
raspbian-preinstalled/mknod:     file format elf32-littlearm


Disassembly of section .init:

00011488 <.init>:
   11488:	push	{r3, lr}
   1148c:	bl	1207c <__assert_fail@plt+0x7cc>
   11490:	pop	{r3, pc}

Disassembly of section .plt:

00011494 <fstatfs64@plt-0x14>:
   11494:	push	{lr}		; (str lr, [sp, #-4]!)
   11498:	ldr	lr, [pc, #4]	; 114a4 <fstatfs64@plt-0x4>
   1149c:	add	lr, pc, lr
   114a0:	ldr	pc, [lr, #8]!
   114a4:	andeq	fp, r1, ip, asr fp

000114a8 <fstatfs64@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #110592	; 0x1b000
   114b0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114b4 <calloc@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #110592	; 0x1b000
   114bc:	ldr	pc, [ip, #2900]!	; 0xb54

000114c0 <fputs_unlocked@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #110592	; 0x1b000
   114c8:	ldr	pc, [ip, #2892]!	; 0xb4c

000114cc <raise@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #110592	; 0x1b000
   114d4:	ldr	pc, [ip, #2884]!	; 0xb44

000114d8 <is_selinux_enabled@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #110592	; 0x1b000
   114e0:	ldr	pc, [ip, #2876]!	; 0xb3c

000114e4 <strcmp@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #110592	; 0x1b000
   114ec:	ldr	pc, [ip, #2868]!	; 0xb34

000114f0 <context_type_get@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #110592	; 0x1b000
   114f8:	ldr	pc, [ip, #2860]!	; 0xb2c

000114fc <fflush@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #110592	; 0x1b000
   11504:	ldr	pc, [ip, #2852]!	; 0xb24

00011508 <lsetfilecon@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #110592	; 0x1b000
   11510:	ldr	pc, [ip, #2844]!	; 0xb1c

00011514 <memmove@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #110592	; 0x1b000
   1151c:	ldr	pc, [ip, #2836]!	; 0xb14

00011520 <free@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #110592	; 0x1b000
   11528:	ldr	pc, [ip, #2828]!	; 0xb0c

0001152c <_exit@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #110592	; 0x1b000
   11534:	ldr	pc, [ip, #2820]!	; 0xb04

00011538 <memcpy@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #110592	; 0x1b000
   11540:	ldr	pc, [ip, #2812]!	; 0xafc

00011544 <__strtoull_internal@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #110592	; 0x1b000
   1154c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011550 <mbsinit@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #110592	; 0x1b000
   11558:	ldr	pc, [ip, #2796]!	; 0xaec

0001155c <context_new@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #110592	; 0x1b000
   11564:	ldr	pc, [ip, #2788]!	; 0xae4

00011568 <memcmp@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #110592	; 0x1b000
   11570:	ldr	pc, [ip, #2780]!	; 0xadc

00011574 <dcgettext@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #110592	; 0x1b000
   1157c:	ldr	pc, [ip, #2772]!	; 0xad4

00011580 <__stack_chk_fail@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #110592	; 0x1b000
   11588:	ldr	pc, [ip, #2764]!	; 0xacc

0001158c <context_type_set@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #110592	; 0x1b000
   11594:	ldr	pc, [ip, #2756]!	; 0xac4

00011598 <realloc@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #110592	; 0x1b000
   115a0:	ldr	pc, [ip, #2748]!	; 0xabc

000115a4 <fgetfilecon@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #110592	; 0x1b000
   115ac:	ldr	pc, [ip, #2740]!	; 0xab4

000115b0 <textdomain@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #110592	; 0x1b000
   115b8:	ldr	pc, [ip, #2732]!	; 0xaac

000115bc <__fxstatat64@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #110592	; 0x1b000
   115c4:	ldr	pc, [ip, #2724]!	; 0xaa4

000115c8 <iswprint@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #110592	; 0x1b000
   115d0:	ldr	pc, [ip, #2716]!	; 0xa9c

000115d4 <__fxstat64@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #110592	; 0x1b000
   115dc:	ldr	pc, [ip, #2708]!	; 0xa94

000115e0 <readlink@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #110592	; 0x1b000
   115e8:	ldr	pc, [ip, #2700]!	; 0xa8c

000115ec <fwrite@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #110592	; 0x1b000
   115f4:	ldr	pc, [ip, #2692]!	; 0xa84

000115f8 <lseek64@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #110592	; 0x1b000
   11600:	ldr	pc, [ip, #2684]!	; 0xa7c

00011604 <__ctype_get_mb_cur_max@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #110592	; 0x1b000
   1160c:	ldr	pc, [ip, #2676]!	; 0xa74

00011610 <matchpathcon@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #110592	; 0x1b000
   11618:	ldr	pc, [ip, #2668]!	; 0xa6c

0001161c <getcon@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #110592	; 0x1b000
   11624:	ldr	pc, [ip, #2660]!	; 0xa64

00011628 <__fpending@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #110592	; 0x1b000
   11630:	ldr	pc, [ip, #2652]!	; 0xa5c

00011634 <mbrtowc@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #110592	; 0x1b000
   1163c:	ldr	pc, [ip, #2644]!	; 0xa54

00011640 <error@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #110592	; 0x1b000
   11648:	ldr	pc, [ip, #2636]!	; 0xa4c

0001164c <open64@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #110592	; 0x1b000
   11654:	ldr	pc, [ip, #2628]!	; 0xa44

00011658 <lgetfilecon@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #110592	; 0x1b000
   11660:	ldr	pc, [ip, #2620]!	; 0xa3c

00011664 <malloc@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #110592	; 0x1b000
   1166c:	ldr	pc, [ip, #2612]!	; 0xa34

00011670 <__libc_start_main@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #110592	; 0x1b000
   11678:	ldr	pc, [ip, #2604]!	; 0xa2c

0001167c <__freading@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #110592	; 0x1b000
   11684:	ldr	pc, [ip, #2596]!	; 0xa24

00011688 <__gmon_start__@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #110592	; 0x1b000
   11690:	ldr	pc, [ip, #2588]!	; 0xa1c

00011694 <context_free@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #110592	; 0x1b000
   1169c:	ldr	pc, [ip, #2580]!	; 0xa14

000116a0 <getopt_long@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #110592	; 0x1b000
   116a8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116ac <__ctype_b_loc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #110592	; 0x1b000
   116b4:	ldr	pc, [ip, #2564]!	; 0xa04

000116b8 <getcwd@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #110592	; 0x1b000
   116c0:	ldr	pc, [ip, #2556]!	; 0x9fc

000116c4 <exit@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #110592	; 0x1b000
   116cc:	ldr	pc, [ip, #2548]!	; 0x9f4

000116d0 <getfilecon@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #110592	; 0x1b000
   116d8:	ldr	pc, [ip, #2540]!	; 0x9ec

000116dc <strlen@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #110592	; 0x1b000
   116e4:	ldr	pc, [ip, #2532]!	; 0x9e4

000116e8 <strchr@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #110592	; 0x1b000
   116f0:	ldr	pc, [ip, #2524]!	; 0x9dc

000116f4 <openat64@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #110592	; 0x1b000
   116fc:	ldr	pc, [ip, #2516]!	; 0x9d4

00011700 <setfscreatecon@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #110592	; 0x1b000
   11708:	ldr	pc, [ip, #2508]!	; 0x9cc

0001170c <__errno_location@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #110592	; 0x1b000
   11714:	ldr	pc, [ip, #2500]!	; 0x9c4

00011718 <__cxa_atexit@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #110592	; 0x1b000
   11720:	ldr	pc, [ip, #2492]!	; 0x9bc

00011724 <memset@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #110592	; 0x1b000
   1172c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011730 <__printf_chk@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #110592	; 0x1b000
   11738:	ldr	pc, [ip, #2476]!	; 0x9ac

0001173c <fileno@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #110592	; 0x1b000
   11744:	ldr	pc, [ip, #2468]!	; 0x9a4

00011748 <__fprintf_chk@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #110592	; 0x1b000
   11750:	ldr	pc, [ip, #2460]!	; 0x99c

00011754 <fclose@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #110592	; 0x1b000
   1175c:	ldr	pc, [ip, #2452]!	; 0x994

00011760 <fseeko64@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #110592	; 0x1b000
   11768:	ldr	pc, [ip, #2444]!	; 0x98c

0001176c <fcntl64@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #110592	; 0x1b000
   11774:	ldr	pc, [ip, #2436]!	; 0x984

00011778 <setlocale@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #110592	; 0x1b000
   11780:	ldr	pc, [ip, #2428]!	; 0x97c

00011784 <fsetfilecon@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #110592	; 0x1b000
   1178c:	ldr	pc, [ip, #2420]!	; 0x974

00011790 <strrchr@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #110592	; 0x1b000
   11798:	ldr	pc, [ip, #2412]!	; 0x96c

0001179c <nl_langinfo@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #110592	; 0x1b000
   117a4:	ldr	pc, [ip, #2404]!	; 0x964

000117a8 <readdir64@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #110592	; 0x1b000
   117b0:	ldr	pc, [ip, #2396]!	; 0x95c

000117b4 <fdopendir@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #110592	; 0x1b000
   117bc:	ldr	pc, [ip, #2388]!	; 0x954

000117c0 <security_compute_create@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #110592	; 0x1b000
   117c8:	ldr	pc, [ip, #2380]!	; 0x94c

000117cc <dirfd@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #110592	; 0x1b000
   117d4:	ldr	pc, [ip, #2372]!	; 0x944

000117d8 <fchdir@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #110592	; 0x1b000
   117e0:	ldr	pc, [ip, #2364]!	; 0x93c

000117e4 <qsort@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #110592	; 0x1b000
   117ec:	ldr	pc, [ip, #2356]!	; 0x934

000117f0 <freecon@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #110592	; 0x1b000
   117f8:	ldr	pc, [ip, #2348]!	; 0x92c

000117fc <bindtextdomain@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #110592	; 0x1b000
   11804:	ldr	pc, [ip, #2340]!	; 0x924

00011808 <getfscreatecon@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #110592	; 0x1b000
   11810:	ldr	pc, [ip, #2332]!	; 0x91c

00011814 <umask@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #110592	; 0x1b000
   1181c:	ldr	pc, [ip, #2324]!	; 0x914

00011820 <context_str@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #110592	; 0x1b000
   11828:	ldr	pc, [ip, #2316]!	; 0x90c

0001182c <chmod@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #110592	; 0x1b000
   11834:	ldr	pc, [ip, #2308]!	; 0x904

00011838 <__xstat64@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #110592	; 0x1b000
   11840:	ldr	pc, [ip, #2300]!	; 0x8fc

00011844 <__xmknod@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #110592	; 0x1b000
   1184c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011850 <strncmp@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #110592	; 0x1b000
   11858:	ldr	pc, [ip, #2284]!	; 0x8ec

0001185c <abort@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #110592	; 0x1b000
   11864:	ldr	pc, [ip, #2276]!	; 0x8e4

00011868 <close@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #110592	; 0x1b000
   11870:	ldr	pc, [ip, #2268]!	; 0x8dc

00011874 <__lxstat64@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #110592	; 0x1b000
   1187c:	ldr	pc, [ip, #2260]!	; 0x8d4

00011880 <mkfifo@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #110592	; 0x1b000
   11888:	ldr	pc, [ip, #2252]!	; 0x8cc

0001188c <mode_to_security_class@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #110592	; 0x1b000
   11894:	ldr	pc, [ip, #2244]!	; 0x8c4

00011898 <closedir@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #110592	; 0x1b000
   118a0:	ldr	pc, [ip, #2236]!	; 0x8bc

000118a4 <strspn@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #110592	; 0x1b000
   118ac:	ldr	pc, [ip, #2228]!	; 0x8b4

000118b0 <__assert_fail@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #110592	; 0x1b000
   118b8:	ldr	pc, [ip, #2220]!	; 0x8ac

Disassembly of section .text:

000118c0 <fts_open@@Base-0x7ec4>:
   118c0:	ldr	r3, [pc, #1776]	; 11fb8 <__assert_fail@plt+0x708>
   118c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c8:	sub	sp, sp, #68	; 0x44
   118cc:	ldr	r3, [r3]
   118d0:	mov	r7, r0
   118d4:	ldr	r0, [r1]
   118d8:	str	r3, [sp, #60]	; 0x3c
   118dc:	mov	r5, r1
   118e0:	bl	14be4 <__assert_fail@plt+0x3334>
   118e4:	ldr	r1, [pc, #1744]	; 11fbc <__assert_fail@plt+0x70c>
   118e8:	mov	r0, #6
   118ec:	bl	11778 <setlocale@plt>
   118f0:	mov	r6, #0
   118f4:	ldr	r1, [pc, #1732]	; 11fc0 <__assert_fail@plt+0x710>
   118f8:	ldr	r0, [pc, #1732]	; 11fc4 <__assert_fail@plt+0x714>
   118fc:	ldr	r9, [pc, #1732]	; 11fc8 <__assert_fail@plt+0x718>
   11900:	ldr	r8, [pc, #1732]	; 11fcc <__assert_fail@plt+0x71c>
   11904:	ldr	sl, [pc, #1732]	; 11fd0 <__assert_fail@plt+0x720>
   11908:	bl	117fc <bindtextdomain@plt>
   1190c:	mov	fp, r6
   11910:	ldr	r0, [pc, #1708]	; 11fc4 <__assert_fail@plt+0x714>
   11914:	bl	115b0 <textdomain@plt>
   11918:	ldr	r0, [pc, #1716]	; 11fd4 <__assert_fail@plt+0x724>
   1191c:	bl	1b214 <fts_children@@Base+0xdf8>
   11920:	str	r6, [sp, #12]
   11924:	mov	r4, #0
   11928:	str	r4, [sp]
   1192c:	mov	r3, r9
   11930:	mov	r2, r8
   11934:	mov	r1, r5
   11938:	mov	r0, r7
   1193c:	bl	116a0 <getopt_long@plt>
   11940:	cmn	r0, #1
   11944:	beq	119f4 <__assert_fail@plt+0x144>
   11948:	cmn	r0, #2
   1194c:	beq	11d4c <__assert_fail@plt+0x49c>
   11950:	ble	1197c <__assert_fail@plt+0xcc>
   11954:	cmp	r0, #90	; 0x5a
   11958:	bne	119b4 <__assert_fail@plt+0x104>
   1195c:	bl	114d8 <is_selinux_enabled@plt>
   11960:	ldr	r3, [sl]
   11964:	cmp	r0, #0
   11968:	ble	119c8 <__assert_fail@plt+0x118>
   1196c:	cmp	r3, #0
   11970:	movne	fp, r3
   11974:	moveq	r6, #1
   11978:	b	11924 <__assert_fail@plt+0x74>
   1197c:	cmn	r0, #3
   11980:	bne	11d08 <__assert_fail@plt+0x458>
   11984:	ldr	r1, [pc, #1612]	; 11fd8 <__assert_fail@plt+0x728>
   11988:	ldr	r3, [pc, #1612]	; 11fdc <__assert_fail@plt+0x72c>
   1198c:	ldr	r2, [pc, #1612]	; 11fe0 <__assert_fail@plt+0x730>
   11990:	str	r4, [sp, #4]
   11994:	ldr	r0, [r1]
   11998:	ldr	r3, [r3]
   1199c:	ldr	r1, [pc, #1600]	; 11fe4 <__assert_fail@plt+0x734>
   119a0:	str	r2, [sp]
   119a4:	ldr	r2, [pc, #1596]	; 11fe8 <__assert_fail@plt+0x738>
   119a8:	bl	17440 <__assert_fail@plt+0x5b90>
   119ac:	mov	r0, r4
   119b0:	bl	116c4 <exit@plt>
   119b4:	cmp	r0, #109	; 0x6d
   119b8:	bne	11d08 <__assert_fail@plt+0x458>
   119bc:	ldr	r3, [sl]
   119c0:	str	r3, [sp, #12]
   119c4:	b	11924 <__assert_fail@plt+0x74>
   119c8:	cmp	r3, #0
   119cc:	beq	11924 <__assert_fail@plt+0x74>
   119d0:	mov	r2, #5
   119d4:	ldr	r1, [pc, #1552]	; 11fec <__assert_fail@plt+0x73c>
   119d8:	mov	r0, r4
   119dc:	bl	11574 <dcgettext@plt>
   119e0:	mov	r1, r4
   119e4:	mov	r2, r0
   119e8:	mov	r0, r4
   119ec:	bl	11640 <error@plt>
   119f0:	b	11924 <__assert_fail@plt+0x74>
   119f4:	ldr	r0, [sp, #12]
   119f8:	cmp	r0, r4
   119fc:	beq	11b1c <__assert_fail@plt+0x26c>
   11a00:	bl	14654 <__assert_fail@plt+0x2da4>
   11a04:	subs	r8, r0, #0
   11a08:	beq	11e10 <__assert_fail@plt+0x560>
   11a0c:	mov	r0, r4
   11a10:	bl	11814 <umask@plt>
   11a14:	mov	r9, r0
   11a18:	bl	11814 <umask@plt>
   11a1c:	mov	r2, r9
   11a20:	mov	r3, r8
   11a24:	mov	r1, r4
   11a28:	str	r4, [sp]
   11a2c:	ldr	r0, [pc, #1468]	; 11ff0 <__assert_fail@plt+0x740>
   11a30:	bl	14a80 <__assert_fail@plt+0x31d0>
   11a34:	mov	r9, r0
   11a38:	mov	r0, r8
   11a3c:	bl	11520 <free@plt>
   11a40:	bic	r3, r9, #508	; 0x1fc
   11a44:	bic	r3, r3, #3
   11a48:	cmp	r3, #0
   11a4c:	bne	11df0 <__assert_fail@plt+0x540>
   11a50:	ldr	r4, [pc, #1436]	; 11ff4 <__assert_fail@plt+0x744>
   11a54:	ldr	r3, [r4]
   11a58:	cmp	r3, r7
   11a5c:	sub	r2, r7, r3
   11a60:	bge	11cb0 <__assert_fail@plt+0x400>
   11a64:	add	r3, r3, #1
   11a68:	cmp	r3, r7
   11a6c:	bge	11a80 <__assert_fail@plt+0x1d0>
   11a70:	ldr	r3, [r5, r3, lsl #2]
   11a74:	ldrb	r3, [r3]
   11a78:	cmp	r3, #112	; 0x70
   11a7c:	beq	11d38 <__assert_fail@plt+0x488>
   11a80:	cmp	r2, #3
   11a84:	bls	11efc <__assert_fail@plt+0x64c>
   11a88:	cmp	r2, #4
   11a8c:	bhi	11edc <__assert_fail@plt+0x62c>
   11a90:	cmp	fp, #0
   11a94:	beq	11aa8 <__assert_fail@plt+0x1f8>
   11a98:	mov	r0, fp
   11a9c:	bl	11700 <setfscreatecon@plt>
   11aa0:	cmp	r0, #0
   11aa4:	blt	11db8 <__assert_fail@plt+0x508>
   11aa8:	ldr	r3, [r4]
   11aac:	add	r3, r3, #1
   11ab0:	ldr	r2, [r5, r3, lsl #2]
   11ab4:	lsl	r3, r3, #2
   11ab8:	ldrb	r2, [r2]
   11abc:	sub	r2, r2, #98	; 0x62
   11ac0:	cmp	r2, #19
   11ac4:	ldrls	pc, [pc, r2, lsl #2]
   11ac8:	b	11d78 <__assert_fail@plt+0x4c8>
   11acc:	andeq	r1, r1, r4, lsr #22
   11ad0:	andeq	r1, r1, r8, lsr #25
   11ad4:	andeq	r1, r1, r8, ror sp
   11ad8:	andeq	r1, r1, r8, ror sp
   11adc:	andeq	r1, r1, r8, ror sp
   11ae0:	andeq	r1, r1, r8, ror sp
   11ae4:	andeq	r1, r1, r8, ror sp
   11ae8:	andeq	r1, r1, r8, ror sp
   11aec:	andeq	r1, r1, r8, ror sp
   11af0:	andeq	r1, r1, r8, ror sp
   11af4:	andeq	r1, r1, r8, ror sp
   11af8:	andeq	r1, r1, r8, ror sp
   11afc:	andeq	r1, r1, r8, ror sp
   11b00:	andeq	r1, r1, r8, ror sp
   11b04:	andeq	r1, r1, r8, asr ip
   11b08:	andeq	r1, r1, r8, ror sp
   11b0c:	andeq	r1, r1, r8, ror sp
   11b10:	andeq	r1, r1, r8, ror sp
   11b14:	andeq	r1, r1, r8, ror sp
   11b18:	andeq	r1, r1, r8, lsr #25
   11b1c:	ldr	r9, [pc, #1228]	; 11ff0 <__assert_fail@plt+0x740>
   11b20:	b	11a50 <__assert_fail@plt+0x1a0>
   11b24:	mov	r7, #24576	; 0x6000
   11b28:	add	ip, r5, r3
   11b2c:	mov	r2, #0
   11b30:	ldr	r3, [ip, #4]
   11b34:	mov	r1, r2
   11b38:	str	r2, [sp]
   11b3c:	str	r3, [sp, #24]
   11b40:	mov	r0, r3
   11b44:	add	r3, sp, #32
   11b48:	ldr	r8, [ip, #8]
   11b4c:	bl	17880 <__assert_fail@plt+0x5fd0>
   11b50:	subs	r2, r0, #0
   11b54:	bne	11e80 <__assert_fail@plt+0x5d0>
   11b58:	ldrd	r0, [sp, #32]
   11b5c:	cmp	r1, r2
   11b60:	cmpeq	r0, r0
   11b64:	bne	11e80 <__assert_fail@plt+0x5d0>
   11b68:	add	r3, sp, #40	; 0x28
   11b6c:	str	r2, [sp]
   11b70:	mov	r1, r2
   11b74:	mov	r0, r8
   11b78:	bl	17880 <__assert_fail@plt+0x5fd0>
   11b7c:	subs	r3, r0, #0
   11b80:	str	r3, [sp, #28]
   11b84:	bne	11e50 <__assert_fail@plt+0x5a0>
   11b88:	ldrd	sl, [sp, #40]	; 0x28
   11b8c:	cmp	fp, r3
   11b90:	cmpeq	sl, sl
   11b94:	bne	11e50 <__assert_fail@plt+0x5a0>
   11b98:	ldr	r3, [sp, #32]
   11b9c:	ldr	r2, [pc, #1108]	; 11ff8 <__assert_fail@plt+0x748>
   11ba0:	ldr	r1, [pc, #1108]	; 11ffc <__assert_fail@plt+0x74c>
   11ba4:	and	r2, r2, r3, lsl #8
   11ba8:	and	r1, r1, sl, lsl #12
   11bac:	orr	lr, r2, r1
   11bb0:	bic	ip, r3, #4080	; 0xff0
   11bb4:	uxtb	r1, sl
   11bb8:	orr	r3, r1, lr
   11bbc:	bic	ip, ip, #15
   11bc0:	str	r3, [sp, #16]
   11bc4:	orr	r3, ip, sl, lsr #20
   11bc8:	str	r3, [sp, #20]
   11bcc:	ldrd	sl, [sp, #16]
   11bd0:	mvn	r3, #0
   11bd4:	mvn	r2, #0
   11bd8:	cmp	fp, r3
   11bdc:	cmpeq	sl, r2
   11be0:	beq	11e2c <__assert_fail@plt+0x57c>
   11be4:	cmp	r6, #0
   11be8:	bne	11d10 <__assert_fail@plt+0x460>
   11bec:	ldr	r1, [r4]
   11bf0:	orr	r2, r9, r7
   11bf4:	ldrd	r6, [sp, #16]
   11bf8:	add	r3, sp, #48	; 0x30
   11bfc:	ldr	r1, [r5, r1, lsl #2]
   11c00:	mov	r0, #1
   11c04:	strd	r6, [sp, #48]	; 0x30
   11c08:	bl	11844 <__xmknod@plt>
   11c0c:	cmp	r0, #0
   11c10:	bne	11c78 <__assert_fail@plt+0x3c8>
   11c14:	ldr	r3, [sp, #12]
   11c18:	cmp	r3, #0
   11c1c:	beq	11c38 <__assert_fail@plt+0x388>
   11c20:	ldr	r3, [r4]
   11c24:	mov	r1, r9
   11c28:	ldr	r0, [r5, r3, lsl #2]
   11c2c:	bl	1182c <chmod@plt>
   11c30:	cmp	r0, #0
   11c34:	bne	11e9c <__assert_fail@plt+0x5ec>
   11c38:	ldr	r3, [pc, #888]	; 11fb8 <__assert_fail@plt+0x708>
   11c3c:	ldr	r2, [sp, #60]	; 0x3c
   11c40:	mov	r0, #0
   11c44:	ldr	r3, [r3]
   11c48:	cmp	r2, r3
   11c4c:	bne	11db4 <__assert_fail@plt+0x504>
   11c50:	add	sp, sp, #68	; 0x44
   11c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c58:	cmp	r6, #0
   11c5c:	bne	11d24 <__assert_fail@plt+0x474>
   11c60:	ldr	r3, [r4]
   11c64:	mov	r1, r9
   11c68:	ldr	r0, [r5, r3, lsl #2]
   11c6c:	bl	11880 <mkfifo@plt>
   11c70:	cmp	r0, #0
   11c74:	beq	11c14 <__assert_fail@plt+0x364>
   11c78:	bl	1170c <__errno_location@plt>
   11c7c:	ldr	r3, [r4]
   11c80:	mov	r1, #3
   11c84:	ldr	r2, [r5, r3, lsl #2]
   11c88:	ldr	r4, [r0]
   11c8c:	mov	r0, #0
   11c90:	bl	16c7c <__assert_fail@plt+0x53cc>
   11c94:	mov	r1, r4
   11c98:	ldr	r2, [pc, #864]	; 12000 <__assert_fail@plt+0x750>
   11c9c:	mov	r3, r0
   11ca0:	mov	r0, #1
   11ca4:	bl	11640 <error@plt>
   11ca8:	mov	r7, #8192	; 0x2000
   11cac:	b	11b28 <__assert_fail@plt+0x278>
   11cb0:	cmp	r2, #1
   11cb4:	bls	11d54 <__assert_fail@plt+0x4a4>
   11cb8:	cmp	r2, #2
   11cbc:	beq	11a90 <__assert_fail@plt+0x1e0>
   11cc0:	mov	r2, #5
   11cc4:	ldr	r1, [pc, #824]	; 12004 <__assert_fail@plt+0x754>
   11cc8:	mov	r0, #0
   11ccc:	bl	11574 <dcgettext@plt>
   11cd0:	ldr	r3, [r4]
   11cd4:	add	r3, r3, #2
   11cd8:	mov	r6, r0
   11cdc:	ldr	r0, [r5, r3, lsl #2]
   11ce0:	bl	16e48 <__assert_fail@plt+0x5598>
   11ce4:	mov	r1, #0
   11ce8:	mov	r2, r6
   11cec:	mov	r3, r0
   11cf0:	mov	r0, r1
   11cf4:	bl	11640 <error@plt>
   11cf8:	ldr	r3, [r4]
   11cfc:	sub	r7, r7, r3
   11d00:	cmp	r7, #4
   11d04:	beq	11f70 <__assert_fail@plt+0x6c0>
   11d08:	mov	r0, #1
   11d0c:	bl	12130 <__assert_fail@plt+0x880>
   11d10:	ldr	r3, [r4]
   11d14:	mov	r1, r7
   11d18:	ldr	r0, [r5, r3, lsl #2]
   11d1c:	bl	12738 <__assert_fail@plt+0xe88>
   11d20:	b	11bec <__assert_fail@plt+0x33c>
   11d24:	add	r3, r5, r3
   11d28:	mov	r1, #4096	; 0x1000
   11d2c:	ldr	r0, [r3, #-4]
   11d30:	bl	12738 <__assert_fail@plt+0xe88>
   11d34:	b	11c60 <__assert_fail@plt+0x3b0>
   11d38:	cmp	r2, #1
   11d3c:	bls	11f80 <__assert_fail@plt+0x6d0>
   11d40:	cmp	r2, #2
   11d44:	bls	11a90 <__assert_fail@plt+0x1e0>
   11d48:	b	11cc0 <__assert_fail@plt+0x410>
   11d4c:	mov	r0, r4
   11d50:	bl	12130 <__assert_fail@plt+0x880>
   11d54:	mov	r2, #5
   11d58:	ldr	r1, [pc, #680]	; 12008 <__assert_fail@plt+0x758>
   11d5c:	mov	r0, #0
   11d60:	bl	11574 <dcgettext@plt>
   11d64:	mov	r1, #0
   11d68:	mov	r2, r0
   11d6c:	mov	r0, r1
   11d70:	bl	11640 <error@plt>
   11d74:	b	11d08 <__assert_fail@plt+0x458>
   11d78:	mov	r2, #5
   11d7c:	ldr	r1, [pc, #648]	; 1200c <__assert_fail@plt+0x75c>
   11d80:	mov	r0, #0
   11d84:	bl	11574 <dcgettext@plt>
   11d88:	ldr	r3, [r4]
   11d8c:	add	r3, r3, #1
   11d90:	mov	r6, r0
   11d94:	ldr	r0, [r5, r3, lsl #2]
   11d98:	bl	16e48 <__assert_fail@plt+0x5598>
   11d9c:	mov	r1, #0
   11da0:	mov	r2, r6
   11da4:	mov	r3, r0
   11da8:	mov	r0, r1
   11dac:	bl	11640 <error@plt>
   11db0:	b	11d08 <__assert_fail@plt+0x458>
   11db4:	bl	11580 <__stack_chk_fail@plt>
   11db8:	bl	1170c <__errno_location@plt>
   11dbc:	mov	r2, #5
   11dc0:	ldr	r1, [pc, #584]	; 12010 <__assert_fail@plt+0x760>
   11dc4:	ldr	r4, [r0]
   11dc8:	mov	r0, #0
   11dcc:	bl	11574 <dcgettext@plt>
   11dd0:	mov	r5, r0
   11dd4:	mov	r0, fp
   11dd8:	bl	16e48 <__assert_fail@plt+0x5598>
   11ddc:	mov	r2, r5
   11de0:	mov	r1, r4
   11de4:	mov	r3, r0
   11de8:	mov	r0, #1
   11dec:	bl	11640 <error@plt>
   11df0:	mov	r2, #5
   11df4:	ldr	r1, [pc, #536]	; 12014 <__assert_fail@plt+0x764>
   11df8:	mov	r0, r4
   11dfc:	bl	11574 <dcgettext@plt>
   11e00:	mov	r1, r4
   11e04:	mov	r2, r0
   11e08:	mov	r0, #1
   11e0c:	bl	11640 <error@plt>
   11e10:	mov	r2, #5
   11e14:	ldr	r1, [pc, #508]	; 12018 <__assert_fail@plt+0x768>
   11e18:	bl	11574 <dcgettext@plt>
   11e1c:	mov	r1, r8
   11e20:	mov	r2, r0
   11e24:	mov	r0, #1
   11e28:	bl	11640 <error@plt>
   11e2c:	mov	r2, #5
   11e30:	ldr	r1, [pc, #484]	; 1201c <__assert_fail@plt+0x76c>
   11e34:	bl	11574 <dcgettext@plt>
   11e38:	str	r8, [sp]
   11e3c:	ldr	r3, [sp, #24]
   11e40:	ldr	r1, [sp, #28]
   11e44:	mov	r2, r0
   11e48:	mov	r0, #1
   11e4c:	bl	11640 <error@plt>
   11e50:	mov	r2, #5
   11e54:	ldr	r1, [pc, #452]	; 12020 <__assert_fail@plt+0x770>
   11e58:	mov	r0, #0
   11e5c:	bl	11574 <dcgettext@plt>
   11e60:	mov	r4, r0
   11e64:	mov	r0, r8
   11e68:	bl	16e48 <__assert_fail@plt+0x5598>
   11e6c:	mov	r2, r4
   11e70:	mov	r1, #0
   11e74:	mov	r3, r0
   11e78:	mov	r0, #1
   11e7c:	bl	11640 <error@plt>
   11e80:	mov	r2, #5
   11e84:	ldr	r1, [pc, #408]	; 12024 <__assert_fail@plt+0x774>
   11e88:	mov	r0, #0
   11e8c:	bl	11574 <dcgettext@plt>
   11e90:	mov	r4, r0
   11e94:	ldr	r0, [sp, #24]
   11e98:	b	11e68 <__assert_fail@plt+0x5b8>
   11e9c:	bl	1170c <__errno_location@plt>
   11ea0:	mov	r2, #5
   11ea4:	ldr	r1, [pc, #380]	; 12028 <__assert_fail@plt+0x778>
   11ea8:	ldr	r6, [r0]
   11eac:	mov	r0, #0
   11eb0:	bl	11574 <dcgettext@plt>
   11eb4:	ldr	r3, [r4]
   11eb8:	ldr	r1, [r5, r3, lsl #2]
   11ebc:	mov	r7, r0
   11ec0:	mov	r0, #4
   11ec4:	bl	16ba0 <__assert_fail@plt+0x52f0>
   11ec8:	mov	r2, r7
   11ecc:	mov	r1, r6
   11ed0:	mov	r3, r0
   11ed4:	mov	r0, #1
   11ed8:	bl	11640 <error@plt>
   11edc:	mov	r2, #5
   11ee0:	ldr	r1, [pc, #284]	; 12004 <__assert_fail@plt+0x754>
   11ee4:	mov	r0, #0
   11ee8:	bl	11574 <dcgettext@plt>
   11eec:	ldr	r3, [r4]
   11ef0:	add	r3, r3, #4
   11ef4:	mov	r6, r0
   11ef8:	b	11d94 <__assert_fail@plt+0x4e4>
   11efc:	mov	r2, #5
   11f00:	ldr	r1, [pc, #292]	; 1202c <__assert_fail@plt+0x77c>
   11f04:	mov	r0, #0
   11f08:	bl	11574 <dcgettext@plt>
   11f0c:	sub	r3, r7, #-1073741823	; 0xc0000001
   11f10:	mov	r6, r0
   11f14:	ldr	r0, [r5, r3, lsl #2]
   11f18:	bl	16e48 <__assert_fail@plt+0x5598>
   11f1c:	mov	r1, #0
   11f20:	mov	r2, r6
   11f24:	mov	r3, r0
   11f28:	mov	r0, r1
   11f2c:	bl	11640 <error@plt>
   11f30:	ldr	r3, [r4]
   11f34:	sub	r7, r7, r3
   11f38:	cmp	r7, #2
   11f3c:	bne	11d08 <__assert_fail@plt+0x458>
   11f40:	ldr	r3, [pc, #232]	; 12030 <__assert_fail@plt+0x780>
   11f44:	ldr	r1, [pc, #232]	; 12034 <__assert_fail@plt+0x784>
   11f48:	mov	r2, #5
   11f4c:	mov	r0, #0
   11f50:	ldr	r4, [r3]
   11f54:	bl	11574 <dcgettext@plt>
   11f58:	ldr	r2, [pc, #216]	; 12038 <__assert_fail@plt+0x788>
   11f5c:	mov	r1, #1
   11f60:	mov	r3, r0
   11f64:	mov	r0, r4
   11f68:	bl	11748 <__fprintf_chk@plt>
   11f6c:	b	11d08 <__assert_fail@plt+0x458>
   11f70:	ldr	r3, [pc, #184]	; 12030 <__assert_fail@plt+0x780>
   11f74:	mov	r2, #5
   11f78:	ldr	r1, [pc, #188]	; 1203c <__assert_fail@plt+0x78c>
   11f7c:	b	11f4c <__assert_fail@plt+0x69c>
   11f80:	mov	r2, #5
   11f84:	ldr	r1, [pc, #160]	; 1202c <__assert_fail@plt+0x77c>
   11f88:	mov	r0, #0
   11f8c:	bl	11574 <dcgettext@plt>
   11f90:	sub	r7, r7, #-1073741823	; 0xc0000001
   11f94:	mov	r4, r0
   11f98:	ldr	r0, [r5, r7, lsl #2]
   11f9c:	bl	16e48 <__assert_fail@plt+0x5598>
   11fa0:	mov	r1, #0
   11fa4:	mov	r2, r4
   11fa8:	mov	r3, r0
   11fac:	mov	r0, r1
   11fb0:	bl	11640 <error@plt>
   11fb4:	b	11d08 <__assert_fail@plt+0x458>
   11fb8:	andeq	ip, r2, r0, lsl #30
   11fbc:	andeq	fp, r1, r0, asr #23
   11fc0:	andeq	fp, r1, ip, asr r8
   11fc4:			; <UNDEFINED> instruction: 0x0001b7b0
   11fc8:	andeq	fp, r1, r0, ror r2
   11fcc:	andeq	fp, r1, ip, asr #17
   11fd0:	ldrdeq	sp, [r2], -r8
   11fd4:	andeq	r3, r1, r0, ror #2
   11fd8:	ldrdeq	sp, [r2], -r4
   11fdc:	andeq	sp, r2, r4, ror r1
   11fe0:			; <UNDEFINED> instruction: 0x0001b8bc
   11fe4:	andeq	fp, r1, r0, asr #5
   11fe8:	andeq	fp, r1, ip, lsr #15
   11fec:	andeq	fp, r1, r0, ror r8
   11ff0:			; <UNDEFINED> instruction: 0x000001b6
   11ff4:	andeq	sp, r2, r8, asr #3
   11ff8:	andeq	pc, pc, r0, lsl #30
   11ffc:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   12000:	andeq	fp, r1, r8, asr fp
   12004:	andeq	fp, r1, ip, asr #20
   12008:	andeq	fp, r1, ip, lsl #18
   1200c:	andeq	fp, r1, r4, lsl sl
   12010:	andeq	fp, r1, r8, lsl #19
   12014:	andeq	fp, r1, r0, ror #17
   12018:	ldrdeq	fp, [r1], -r0
   1201c:	strdeq	fp, [r1], -ip
   12020:	ldrdeq	fp, [r1], -ip
   12024:			; <UNDEFINED> instruction: 0x0001b9bc
   12028:	andeq	fp, r1, ip, lsr #20
   1202c:	andeq	fp, r1, r0, ror #20
   12030:	ldrdeq	sp, [r2], -r0
   12034:	andeq	fp, r1, ip, lsl r9
   12038:	strdeq	fp, [r1], -ip
   1203c:	andeq	fp, r1, r4, asr r9
   12040:	mov	fp, #0
   12044:	mov	lr, #0
   12048:	pop	{r1}		; (ldr r1, [sp], #4)
   1204c:	mov	r2, sp
   12050:	push	{r2}		; (str r2, [sp, #-4]!)
   12054:	push	{r0}		; (str r0, [sp, #-4]!)
   12058:	ldr	ip, [pc, #16]	; 12070 <__assert_fail@plt+0x7c0>
   1205c:	push	{ip}		; (str ip, [sp, #-4]!)
   12060:	ldr	r0, [pc, #12]	; 12074 <__assert_fail@plt+0x7c4>
   12064:	ldr	r3, [pc, #12]	; 12078 <__assert_fail@plt+0x7c8>
   12068:	bl	11670 <__libc_start_main@plt>
   1206c:	bl	1185c <abort@plt>
   12070:	andeq	fp, r1, r0, lsl r2
   12074:	andeq	r1, r1, r0, asr #17
   12078:			; <UNDEFINED> instruction: 0x0001b1b0
   1207c:	ldr	r3, [pc, #20]	; 12098 <__assert_fail@plt+0x7e8>
   12080:	ldr	r2, [pc, #20]	; 1209c <__assert_fail@plt+0x7ec>
   12084:	add	r3, pc, r3
   12088:	ldr	r2, [r3, r2]
   1208c:	cmp	r2, #0
   12090:	bxeq	lr
   12094:	b	11688 <__gmon_start__@plt>
   12098:	andeq	sl, r1, r4, ror pc
   1209c:	andeq	r0, r0, r8, ror #2
   120a0:	ldr	r0, [pc, #24]	; 120c0 <__assert_fail@plt+0x810>
   120a4:	ldr	r3, [pc, #24]	; 120c4 <__assert_fail@plt+0x814>
   120a8:	cmp	r3, r0
   120ac:	bxeq	lr
   120b0:	ldr	r3, [pc, #16]	; 120c8 <__assert_fail@plt+0x818>
   120b4:	cmp	r3, #0
   120b8:	bxeq	lr
   120bc:	bx	r3
   120c0:			; <UNDEFINED> instruction: 0x0002d1bc
   120c4:			; <UNDEFINED> instruction: 0x0002d1bc
   120c8:	andeq	r0, r0, r0
   120cc:	ldr	r0, [pc, #36]	; 120f8 <__assert_fail@plt+0x848>
   120d0:	ldr	r1, [pc, #36]	; 120fc <__assert_fail@plt+0x84c>
   120d4:	sub	r1, r1, r0
   120d8:	asr	r1, r1, #2
   120dc:	add	r1, r1, r1, lsr #31
   120e0:	asrs	r1, r1, #1
   120e4:	bxeq	lr
   120e8:	ldr	r3, [pc, #16]	; 12100 <__assert_fail@plt+0x850>
   120ec:	cmp	r3, #0
   120f0:	bxeq	lr
   120f4:	bx	r3
   120f8:			; <UNDEFINED> instruction: 0x0002d1bc
   120fc:			; <UNDEFINED> instruction: 0x0002d1bc
   12100:	andeq	r0, r0, r0
   12104:	push	{r4, lr}
   12108:	ldr	r4, [pc, #24]	; 12128 <__assert_fail@plt+0x878>
   1210c:	ldrb	r3, [r4]
   12110:	cmp	r3, #0
   12114:	popne	{r4, pc}
   12118:	bl	120a0 <__assert_fail@plt+0x7f0>
   1211c:	mov	r3, #1
   12120:	strb	r3, [r4]
   12124:	pop	{r4, pc}
   12128:	ldrdeq	sp, [r2], -ip
   1212c:	b	120cc <__assert_fail@plt+0x81c>
   12130:	ldr	r3, [pc, #800]	; 12458 <__assert_fail@plt+0xba8>
   12134:	push	{r7, lr}
   12138:	sub	sp, sp, #64	; 0x40
   1213c:	ldr	r3, [r3]
   12140:	subs	r4, r0, #0
   12144:	str	r3, [sp, #60]	; 0x3c
   12148:	beq	12184 <__assert_fail@plt+0x8d4>
   1214c:	ldr	r3, [pc, #776]	; 1245c <__assert_fail@plt+0xbac>
   12150:	mov	r2, #5
   12154:	ldr	r1, [pc, #772]	; 12460 <__assert_fail@plt+0xbb0>
   12158:	mov	r0, #0
   1215c:	ldr	r5, [r3]
   12160:	bl	11574 <dcgettext@plt>
   12164:	ldr	r3, [pc, #760]	; 12464 <__assert_fail@plt+0xbb4>
   12168:	mov	r1, #1
   1216c:	ldr	r3, [r3]
   12170:	mov	r2, r0
   12174:	mov	r0, r5
   12178:	bl	11748 <__fprintf_chk@plt>
   1217c:	mov	r0, r4
   12180:	bl	116c4 <exit@plt>
   12184:	mov	r2, #5
   12188:	ldr	r1, [pc, #728]	; 12468 <__assert_fail@plt+0xbb8>
   1218c:	bl	11574 <dcgettext@plt>
   12190:	ldr	r3, [pc, #716]	; 12464 <__assert_fail@plt+0xbb4>
   12194:	ldr	r5, [pc, #720]	; 1246c <__assert_fail@plt+0xbbc>
   12198:	ldr	r2, [r3]
   1219c:	mov	r1, r0
   121a0:	mov	r0, #1
   121a4:	bl	11730 <__printf_chk@plt>
   121a8:	mov	r2, #5
   121ac:	ldr	r1, [pc, #700]	; 12470 <__assert_fail@plt+0xbc0>
   121b0:	mov	r0, r4
   121b4:	bl	11574 <dcgettext@plt>
   121b8:	ldr	r1, [r5]
   121bc:	bl	114c0 <fputs_unlocked@plt>
   121c0:	mov	r2, #5
   121c4:	ldr	r1, [pc, #680]	; 12474 <__assert_fail@plt+0xbc4>
   121c8:	mov	r0, r4
   121cc:	bl	11574 <dcgettext@plt>
   121d0:	ldr	r1, [r5]
   121d4:	bl	114c0 <fputs_unlocked@plt>
   121d8:	mov	r2, #5
   121dc:	ldr	r1, [pc, #660]	; 12478 <__assert_fail@plt+0xbc8>
   121e0:	mov	r0, r4
   121e4:	bl	11574 <dcgettext@plt>
   121e8:	ldr	r1, [r5]
   121ec:	bl	114c0 <fputs_unlocked@plt>
   121f0:	mov	r2, #5
   121f4:	ldr	r1, [pc, #640]	; 1247c <__assert_fail@plt+0xbcc>
   121f8:	mov	r0, r4
   121fc:	bl	11574 <dcgettext@plt>
   12200:	ldr	r1, [r5]
   12204:	bl	114c0 <fputs_unlocked@plt>
   12208:	mov	r2, #5
   1220c:	ldr	r1, [pc, #620]	; 12480 <__assert_fail@plt+0xbd0>
   12210:	mov	r0, r4
   12214:	bl	11574 <dcgettext@plt>
   12218:	ldr	r1, [r5]
   1221c:	bl	114c0 <fputs_unlocked@plt>
   12220:	mov	r2, #5
   12224:	ldr	r1, [pc, #600]	; 12484 <__assert_fail@plt+0xbd4>
   12228:	mov	r0, r4
   1222c:	bl	11574 <dcgettext@plt>
   12230:	ldr	r1, [r5]
   12234:	bl	114c0 <fputs_unlocked@plt>
   12238:	mov	r2, #5
   1223c:	ldr	r1, [pc, #580]	; 12488 <__assert_fail@plt+0xbd8>
   12240:	mov	r0, r4
   12244:	bl	11574 <dcgettext@plt>
   12248:	ldr	r1, [r5]
   1224c:	bl	114c0 <fputs_unlocked@plt>
   12250:	mov	r2, #5
   12254:	ldr	r1, [pc, #560]	; 1248c <__assert_fail@plt+0xbdc>
   12258:	mov	r0, r4
   1225c:	bl	11574 <dcgettext@plt>
   12260:	ldr	r1, [r5]
   12264:	bl	114c0 <fputs_unlocked@plt>
   12268:	mov	r2, #5
   1226c:	ldr	r1, [pc, #540]	; 12490 <__assert_fail@plt+0xbe0>
   12270:	mov	r0, r4
   12274:	bl	11574 <dcgettext@plt>
   12278:	ldr	r2, [pc, #532]	; 12494 <__assert_fail@plt+0xbe4>
   1227c:	mov	r1, r0
   12280:	mov	r0, #1
   12284:	bl	11730 <__printf_chk@plt>
   12288:	ldr	lr, [pc, #520]	; 12498 <__assert_fail@plt+0xbe8>
   1228c:	add	ip, sp, #4
   12290:	ldm	lr!, {r0, r1, r2, r3}
   12294:	stmia	ip!, {r0, r1, r2, r3}
   12298:	ldm	lr!, {r0, r1, r2, r3}
   1229c:	ldr	r6, [sp, #4]
   122a0:	stmia	ip!, {r0, r1, r2, r3}
   122a4:	cmp	r6, #0
   122a8:	ldm	lr!, {r0, r1, r2, r3}
   122ac:	addeq	r5, sp, #4
   122b0:	stmia	ip!, {r0, r1, r2, r3}
   122b4:	ldm	lr, {r0, r1}
   122b8:	stm	ip, {r0, r1}
   122bc:	beq	122ec <__assert_fail@plt+0xa3c>
   122c0:	ldr	r7, [pc, #460]	; 12494 <__assert_fail@plt+0xbe4>
   122c4:	add	r5, sp, #4
   122c8:	b	122d8 <__assert_fail@plt+0xa28>
   122cc:	ldr	r6, [r5, #8]!
   122d0:	cmp	r6, #0
   122d4:	beq	122ec <__assert_fail@plt+0xa3c>
   122d8:	mov	r1, r6
   122dc:	mov	r0, r7
   122e0:	bl	114e4 <strcmp@plt>
   122e4:	cmp	r0, #0
   122e8:	bne	122cc <__assert_fail@plt+0xa1c>
   122ec:	ldr	r5, [r5, #4]
   122f0:	mov	r2, #5
   122f4:	cmp	r5, #0
   122f8:	ldr	r1, [pc, #412]	; 1249c <__assert_fail@plt+0xbec>
   122fc:	beq	123a4 <__assert_fail@plt+0xaf4>
   12300:	mov	r0, #0
   12304:	bl	11574 <dcgettext@plt>
   12308:	ldr	r3, [pc, #400]	; 124a0 <__assert_fail@plt+0xbf0>
   1230c:	ldr	r2, [pc, #400]	; 124a4 <__assert_fail@plt+0xbf4>
   12310:	mov	r1, r0
   12314:	mov	r0, #1
   12318:	bl	11730 <__printf_chk@plt>
   1231c:	mov	r1, #0
   12320:	mov	r0, #5
   12324:	bl	11778 <setlocale@plt>
   12328:	cmp	r0, #0
   1232c:	ldreq	r6, [pc, #352]	; 12494 <__assert_fail@plt+0xbe4>
   12330:	beq	1234c <__assert_fail@plt+0xa9c>
   12334:	mov	r2, #3
   12338:	ldr	r1, [pc, #360]	; 124a8 <__assert_fail@plt+0xbf8>
   1233c:	bl	11850 <strncmp@plt>
   12340:	ldr	r6, [pc, #332]	; 12494 <__assert_fail@plt+0xbe4>
   12344:	cmp	r0, #0
   12348:	bne	12434 <__assert_fail@plt+0xb84>
   1234c:	mov	r2, #5
   12350:	ldr	r1, [pc, #340]	; 124ac <__assert_fail@plt+0xbfc>
   12354:	mov	r0, #0
   12358:	bl	11574 <dcgettext@plt>
   1235c:	ldr	r3, [pc, #304]	; 12494 <__assert_fail@plt+0xbe4>
   12360:	ldr	r2, [pc, #312]	; 124a0 <__assert_fail@plt+0xbf0>
   12364:	mov	r1, r0
   12368:	mov	r0, #1
   1236c:	bl	11730 <__printf_chk@plt>
   12370:	mov	r2, #5
   12374:	ldr	r1, [pc, #308]	; 124b0 <__assert_fail@plt+0xc00>
   12378:	mov	r0, #0
   1237c:	bl	11574 <dcgettext@plt>
   12380:	ldr	r2, [pc, #300]	; 124b4 <__assert_fail@plt+0xc04>
   12384:	cmp	r5, r6
   12388:	ldr	r3, [pc, #296]	; 124b8 <__assert_fail@plt+0xc08>
   1238c:	movne	r3, r2
   12390:	mov	r1, r0
   12394:	mov	r2, r5
   12398:	mov	r0, #1
   1239c:	bl	11730 <__printf_chk@plt>
   123a0:	b	1217c <__assert_fail@plt+0x8cc>
   123a4:	mov	r0, r5
   123a8:	bl	11574 <dcgettext@plt>
   123ac:	ldr	r3, [pc, #236]	; 124a0 <__assert_fail@plt+0xbf0>
   123b0:	ldr	r2, [pc, #236]	; 124a4 <__assert_fail@plt+0xbf4>
   123b4:	mov	r1, r0
   123b8:	mov	r0, #1
   123bc:	bl	11730 <__printf_chk@plt>
   123c0:	mov	r1, r5
   123c4:	mov	r0, #5
   123c8:	bl	11778 <setlocale@plt>
   123cc:	cmp	r0, #0
   123d0:	beq	123e8 <__assert_fail@plt+0xb38>
   123d4:	mov	r2, #3
   123d8:	ldr	r1, [pc, #200]	; 124a8 <__assert_fail@plt+0xbf8>
   123dc:	bl	11850 <strncmp@plt>
   123e0:	cmp	r0, #0
   123e4:	bne	1242c <__assert_fail@plt+0xb7c>
   123e8:	mov	r2, #5
   123ec:	ldr	r1, [pc, #184]	; 124ac <__assert_fail@plt+0xbfc>
   123f0:	mov	r0, #0
   123f4:	bl	11574 <dcgettext@plt>
   123f8:	ldr	r3, [pc, #148]	; 12494 <__assert_fail@plt+0xbe4>
   123fc:	ldr	r2, [pc, #156]	; 124a0 <__assert_fail@plt+0xbf0>
   12400:	mov	r5, r3
   12404:	mov	r1, r0
   12408:	mov	r0, #1
   1240c:	bl	11730 <__printf_chk@plt>
   12410:	ldr	r1, [pc, #152]	; 124b0 <__assert_fail@plt+0xc00>
   12414:	mov	r2, #5
   12418:	mov	r0, #0
   1241c:	bl	11574 <dcgettext@plt>
   12420:	ldr	r3, [pc, #144]	; 124b8 <__assert_fail@plt+0xc08>
   12424:	mov	r1, r0
   12428:	b	12394 <__assert_fail@plt+0xae4>
   1242c:	ldr	r6, [pc, #96]	; 12494 <__assert_fail@plt+0xbe4>
   12430:	mov	r5, r6
   12434:	mov	r2, #5
   12438:	ldr	r1, [pc, #124]	; 124bc <__assert_fail@plt+0xc0c>
   1243c:	mov	r0, #0
   12440:	bl	11574 <dcgettext@plt>
   12444:	ldr	r2, [pc, #72]	; 12494 <__assert_fail@plt+0xbe4>
   12448:	mov	r1, r0
   1244c:	mov	r0, #1
   12450:	bl	11730 <__printf_chk@plt>
   12454:	b	1234c <__assert_fail@plt+0xa9c>
   12458:	andeq	ip, r2, r0, lsl #30
   1245c:	ldrdeq	sp, [r2], -r0
   12460:	andeq	fp, r1, r8, asr #5
   12464:	andeq	sp, r2, r8, ror #3
   12468:	strdeq	fp, [r1], -r0
   1246c:	ldrdeq	sp, [r2], -r4
   12470:	andeq	fp, r1, r0, lsr #6
   12474:	andeq	fp, r1, r4, asr r3
   12478:	andeq	fp, r1, r0, lsr #7
   1247c:	andeq	fp, r1, ip, ror #7
   12480:			; <UNDEFINED> instruction: 0x0001b4bc
   12484:	andeq	fp, r1, ip, ror #9
   12488:	andeq	fp, r1, r4, lsr #10
   1248c:	andeq	fp, r1, ip, lsr #12
   12490:	andeq	fp, r1, ip, lsr #13
   12494:	andeq	fp, r1, r0, asr #5
   12498:	andeq	fp, r1, r8, lsr r2
   1249c:	andeq	fp, r1, ip, ror #14
   124a0:	andeq	fp, r1, r4, lsl #15
   124a4:	andeq	fp, r1, ip, lsr #15
   124a8:			; <UNDEFINED> instruction: 0x0001b7bc
   124ac:	andeq	fp, r1, r8, lsl #16
   124b0:	andeq	fp, r1, r8, lsr #16
   124b4:	andeq	fp, r1, r0, asr #23
   124b8:	andeq	fp, r1, r4, lsl #21
   124bc:	andeq	fp, r1, r0, asr #15
   124c0:	push	{r4, r5, r6, r7, r8, lr}
   124c4:	sub	sp, sp, #120	; 0x78
   124c8:	ldr	r5, [pc, #612]	; 12734 <__assert_fail@plt+0xe84>
   124cc:	mov	r3, #0
   124d0:	subs	r6, r1, #0
   124d4:	ldr	r2, [r5]
   124d8:	str	r3, [sp]
   124dc:	str	r2, [sp, #116]	; 0x74
   124e0:	str	r3, [sp, #4]
   124e4:	mov	r8, r0
   124e8:	beq	12538 <__assert_fail@plt+0xc88>
   124ec:	add	r0, sp, #4
   124f0:	bl	11808 <getfscreatecon@plt>
   124f4:	cmp	r0, #0
   124f8:	blt	12698 <__assert_fail@plt+0xde8>
   124fc:	ldr	r1, [sp, #4]
   12500:	cmp	r1, #0
   12504:	beq	1270c <__assert_fail@plt+0xe5c>
   12508:	mov	r0, r8
   1250c:	bl	11508 <lsetfilecon@plt>
   12510:	mov	r4, r0
   12514:	ldr	r0, [sp, #4]
   12518:	bl	117f0 <freecon@plt>
   1251c:	ldr	r2, [sp, #116]	; 0x74
   12520:	ldr	r3, [r5]
   12524:	mov	r0, r4
   12528:	cmp	r2, r3
   1252c:	bne	12730 <__assert_fail@plt+0xe80>
   12530:	add	sp, sp, #120	; 0x78
   12534:	pop	{r4, r5, r6, r7, r8, pc}
   12538:	mov	r1, #32768	; 0x8000
   1253c:	bl	1164c <open64@plt>
   12540:	cmn	r0, #1
   12544:	mov	r4, r0
   12548:	beq	12654 <__assert_fail@plt+0xda4>
   1254c:	mov	r1, r0
   12550:	add	r2, sp, #8
   12554:	mov	r0, #3
   12558:	bl	115d4 <__fxstat64@plt>
   1255c:	cmp	r0, #0
   12560:	blt	1268c <__assert_fail@plt+0xddc>
   12564:	mov	r2, sp
   12568:	ldr	r1, [sp, #24]
   1256c:	mov	r0, r8
   12570:	bl	11610 <matchpathcon@plt>
   12574:	cmp	r0, #0
   12578:	blt	12600 <__assert_fail@plt+0xd50>
   1257c:	ldr	r0, [sp]
   12580:	bl	1155c <context_new@plt>
   12584:	subs	r7, r0, #0
   12588:	beq	12610 <__assert_fail@plt+0xd60>
   1258c:	cmn	r4, #1
   12590:	add	r1, sp, #4
   12594:	beq	126a0 <__assert_fail@plt+0xdf0>
   12598:	mov	r0, r4
   1259c:	bl	1a608 <fts_children@@Base+0x1ec>
   125a0:	cmp	r0, #0
   125a4:	blt	126f8 <__assert_fail@plt+0xe48>
   125a8:	ldr	r0, [sp, #4]
   125ac:	bl	1155c <context_new@plt>
   125b0:	subs	r6, r0, #0
   125b4:	beq	12620 <__assert_fail@plt+0xd70>
   125b8:	mov	r0, r7
   125bc:	bl	114f0 <context_type_get@plt>
   125c0:	subs	r1, r0, #0
   125c4:	beq	12620 <__assert_fail@plt+0xd70>
   125c8:	mov	r0, r6
   125cc:	bl	1158c <context_type_set@plt>
   125d0:	cmp	r0, #0
   125d4:	bne	12620 <__assert_fail@plt+0xd70>
   125d8:	mov	r0, r6
   125dc:	bl	11820 <context_str@plt>
   125e0:	subs	r1, r0, #0
   125e4:	beq	12618 <__assert_fail@plt+0xd68>
   125e8:	cmn	r4, #1
   125ec:	beq	12720 <__assert_fail@plt+0xe70>
   125f0:	mov	r0, r4
   125f4:	bl	11784 <fsetfilecon@plt>
   125f8:	mov	r8, r0
   125fc:	b	12624 <__assert_fail@plt+0xd74>
   12600:	bl	1170c <__errno_location@plt>
   12604:	ldr	r3, [r0]
   12608:	cmp	r3, #2
   1260c:	beq	126e4 <__assert_fail@plt+0xe34>
   12610:	mov	r6, #0
   12614:	mov	r7, r6
   12618:	cmn	r4, #1
   1261c:	beq	12630 <__assert_fail@plt+0xd80>
   12620:	mvn	r8, #0
   12624:	mov	r0, r4
   12628:	bl	11868 <close@plt>
   1262c:	mov	r4, r8
   12630:	mov	r0, r7
   12634:	bl	11694 <context_free@plt>
   12638:	mov	r0, r6
   1263c:	bl	11694 <context_free@plt>
   12640:	ldr	r0, [sp]
   12644:	bl	117f0 <freecon@plt>
   12648:	ldr	r0, [sp, #4]
   1264c:	bl	117f0 <freecon@plt>
   12650:	b	1251c <__assert_fail@plt+0xc6c>
   12654:	bl	1170c <__errno_location@plt>
   12658:	ldr	r3, [r0]
   1265c:	cmp	r3, #40	; 0x28
   12660:	beq	12670 <__assert_fail@plt+0xdc0>
   12664:	mov	r6, #0
   12668:	mov	r7, r6
   1266c:	b	12630 <__assert_fail@plt+0xd80>
   12670:	add	r2, sp, #8
   12674:	mov	r1, r8
   12678:	mov	r0, #3
   1267c:	bl	11874 <__lxstat64@plt>
   12680:	cmp	r0, #0
   12684:	bge	12564 <__assert_fail@plt+0xcb4>
   12688:	b	12664 <__assert_fail@plt+0xdb4>
   1268c:	mov	r7, r6
   12690:	mvn	r8, #0
   12694:	b	12624 <__assert_fail@plt+0xd74>
   12698:	mvn	r4, #0
   1269c:	b	1251c <__assert_fail@plt+0xc6c>
   126a0:	mov	r0, r8
   126a4:	bl	1a5f0 <fts_children@@Base+0x1d4>
   126a8:	cmp	r0, #0
   126ac:	blt	12704 <__assert_fail@plt+0xe54>
   126b0:	ldr	r0, [sp, #4]
   126b4:	bl	1155c <context_new@plt>
   126b8:	subs	r6, r0, #0
   126bc:	beq	12630 <__assert_fail@plt+0xd80>
   126c0:	mov	r0, r7
   126c4:	bl	114f0 <context_type_get@plt>
   126c8:	subs	r1, r0, #0
   126cc:	beq	12630 <__assert_fail@plt+0xd80>
   126d0:	mov	r0, r6
   126d4:	bl	1158c <context_type_set@plt>
   126d8:	cmp	r0, #0
   126dc:	bne	12630 <__assert_fail@plt+0xd80>
   126e0:	b	125d8 <__assert_fail@plt+0xd28>
   126e4:	mov	r3, #61	; 0x3d
   126e8:	mov	r6, #0
   126ec:	str	r3, [r0]
   126f0:	mov	r7, r6
   126f4:	b	12618 <__assert_fail@plt+0xd68>
   126f8:	mov	r6, #0
   126fc:	mvn	r8, #0
   12700:	b	12624 <__assert_fail@plt+0xd74>
   12704:	mov	r6, #0
   12708:	b	12630 <__assert_fail@plt+0xd80>
   1270c:	bl	1170c <__errno_location@plt>
   12710:	mov	r3, #61	; 0x3d
   12714:	mvn	r4, #0
   12718:	str	r3, [r0]
   1271c:	b	1251c <__assert_fail@plt+0xc6c>
   12720:	mov	r0, r8
   12724:	bl	11508 <lsetfilecon@plt>
   12728:	mov	r4, r0
   1272c:	b	12630 <__assert_fail@plt+0xd80>
   12730:	bl	11580 <__stack_chk_fail@plt>
   12734:	andeq	ip, r2, r0, lsl #30
   12738:	push	{r4, r5, r6, r7, r8, lr}
   1273c:	sub	sp, sp, #24
   12740:	ldrb	r2, [r0]
   12744:	ldr	r7, [pc, #540]	; 12968 <__assert_fail@plt+0x10b8>
   12748:	mov	r3, #0
   1274c:	cmp	r2, #47	; 0x2f
   12750:	ldr	r2, [r7]
   12754:	mov	r5, r0
   12758:	mov	r6, r1
   1275c:	str	r3, [sp, #4]
   12760:	str	r2, [sp, #20]
   12764:	str	r3, [sp, #8]
   12768:	beq	128b4 <__assert_fail@plt+0x1004>
   1276c:	mov	r1, #2
   12770:	bl	12b2c <__assert_fail@plt+0x127c>
   12774:	subs	r4, r0, #0
   12778:	movne	r5, r4
   1277c:	beq	1292c <__assert_fail@plt+0x107c>
   12780:	add	r2, sp, #4
   12784:	mov	r1, r6
   12788:	mov	r0, r4
   1278c:	bl	11610 <matchpathcon@plt>
   12790:	cmp	r0, #0
   12794:	blt	12900 <__assert_fail@plt+0x1050>
   12798:	mov	r3, #0
   1279c:	mov	r0, r4
   127a0:	str	r3, [sp, #12]
   127a4:	str	r3, [sp, #16]
   127a8:	bl	13238 <__assert_fail@plt+0x1988>
   127ac:	subs	r4, r0, #0
   127b0:	beq	128c0 <__assert_fail@plt+0x1010>
   127b4:	add	r0, sp, #12
   127b8:	bl	1161c <getcon@plt>
   127bc:	cmp	r0, #0
   127c0:	blt	128c0 <__assert_fail@plt+0x1010>
   127c4:	add	r1, sp, #16
   127c8:	mov	r0, r4
   127cc:	bl	1a5d8 <fts_children@@Base+0x1bc>
   127d0:	cmp	r0, #0
   127d4:	blt	128c0 <__assert_fail@plt+0x1010>
   127d8:	mov	r0, r6
   127dc:	bl	1188c <mode_to_security_class@plt>
   127e0:	subs	r2, r0, #0
   127e4:	beq	128c0 <__assert_fail@plt+0x1010>
   127e8:	add	r3, sp, #8
   127ec:	ldrd	r0, [sp, #12]
   127f0:	bl	117c0 <security_compute_create@plt>
   127f4:	mov	r6, r0
   127f8:	mov	r0, r4
   127fc:	bl	11520 <free@plt>
   12800:	ldr	r0, [sp, #12]
   12804:	bl	117f0 <freecon@plt>
   12808:	ldr	r0, [sp, #16]
   1280c:	bl	117f0 <freecon@plt>
   12810:	cmp	r6, #0
   12814:	blt	128f0 <__assert_fail@plt+0x1040>
   12818:	ldr	r0, [sp, #4]
   1281c:	bl	1155c <context_new@plt>
   12820:	subs	r6, r0, #0
   12824:	beq	128f0 <__assert_fail@plt+0x1040>
   12828:	ldr	r0, [sp, #8]
   1282c:	bl	1155c <context_new@plt>
   12830:	subs	r4, r0, #0
   12834:	beq	128e8 <__assert_fail@plt+0x1038>
   12838:	mov	r0, r6
   1283c:	bl	114f0 <context_type_get@plt>
   12840:	subs	r1, r0, #0
   12844:	beq	128e8 <__assert_fail@plt+0x1038>
   12848:	mov	r0, r4
   1284c:	bl	1158c <context_type_set@plt>
   12850:	cmp	r0, #0
   12854:	bne	128e8 <__assert_fail@plt+0x1038>
   12858:	mov	r0, r4
   1285c:	bl	11820 <context_str@plt>
   12860:	cmp	r0, #0
   12864:	beq	128e8 <__assert_fail@plt+0x1038>
   12868:	bl	11700 <setfscreatecon@plt>
   1286c:	mov	r8, r0
   12870:	mov	r0, r6
   12874:	bl	11694 <context_free@plt>
   12878:	mov	r0, r4
   1287c:	bl	11694 <context_free@plt>
   12880:	ldr	r0, [sp, #4]
   12884:	bl	117f0 <freecon@plt>
   12888:	ldr	r0, [sp, #8]
   1288c:	bl	117f0 <freecon@plt>
   12890:	mov	r0, r5
   12894:	bl	11520 <free@plt>
   12898:	ldr	r2, [sp, #20]
   1289c:	ldr	r3, [r7]
   128a0:	mov	r0, r8
   128a4:	cmp	r2, r3
   128a8:	bne	12928 <__assert_fail@plt+0x1078>
   128ac:	add	sp, sp, #24
   128b0:	pop	{r4, r5, r6, r7, r8, pc}
   128b4:	mov	r4, r0
   128b8:	mov	r5, r3
   128bc:	b	12780 <__assert_fail@plt+0xed0>
   128c0:	mov	r0, r4
   128c4:	bl	11520 <free@plt>
   128c8:	ldr	r0, [sp, #12]
   128cc:	bl	117f0 <freecon@plt>
   128d0:	mov	r4, #0
   128d4:	ldr	r0, [sp, #16]
   128d8:	bl	117f0 <freecon@plt>
   128dc:	mov	r6, r4
   128e0:	mvn	r8, #0
   128e4:	b	12870 <__assert_fail@plt+0xfc0>
   128e8:	mvn	r8, #0
   128ec:	b	12870 <__assert_fail@plt+0xfc0>
   128f0:	mov	r4, #0
   128f4:	mov	r6, r4
   128f8:	mvn	r8, #0
   128fc:	b	12870 <__assert_fail@plt+0xfc0>
   12900:	bl	1170c <__errno_location@plt>
   12904:	ldr	r3, [r0]
   12908:	cmp	r3, #2
   1290c:	bne	128f0 <__assert_fail@plt+0x1040>
   12910:	mov	r3, #61	; 0x3d
   12914:	mov	r4, #0
   12918:	str	r3, [r0]
   1291c:	mov	r6, r4
   12920:	mvn	r8, #0
   12924:	b	12870 <__assert_fail@plt+0xfc0>
   12928:	bl	11580 <__stack_chk_fail@plt>
   1292c:	bl	1170c <__errno_location@plt>
   12930:	mov	r2, #5
   12934:	ldr	r1, [pc, #48]	; 1296c <__assert_fail@plt+0x10bc>
   12938:	ldr	r6, [r0]
   1293c:	mov	r0, r4
   12940:	bl	11574 <dcgettext@plt>
   12944:	mov	r1, r5
   12948:	mov	r4, r0
   1294c:	mov	r0, #4
   12950:	bl	16ba0 <__assert_fail@plt+0x52f0>
   12954:	mov	r2, r4
   12958:	mov	r1, r6
   1295c:	mov	r3, r0
   12960:	mov	r0, #1
   12964:	bl	11640 <error@plt>
   12968:	andeq	ip, r2, r0, lsl #30
   1296c:	andeq	fp, r1, r0, lsl #22
   12970:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12974:	mov	r6, r2
   12978:	ldr	r8, [pc, #412]	; 12b1c <__assert_fail@plt+0x126c>
   1297c:	ldrb	r3, [r0]
   12980:	sub	sp, sp, #16
   12984:	ldr	r2, [r8]
   12988:	cmp	r3, #47	; 0x2f
   1298c:	movne	r3, r6
   12990:	orreq	r3, r6, #1
   12994:	cmp	r3, #0
   12998:	mov	r5, r0
   1299c:	mov	r4, r1
   129a0:	str	r2, [sp, #12]
   129a4:	movne	r9, #0
   129a8:	beq	12ac8 <__assert_fail@plt+0x1218>
   129ac:	mov	r2, #0
   129b0:	cmp	r4, #0
   129b4:	str	r5, [sp, #4]
   129b8:	str	r2, [sp, #8]
   129bc:	beq	12aa8 <__assert_fail@plt+0x11f8>
   129c0:	mov	r1, #16
   129c4:	add	r0, sp, #4
   129c8:	bl	177cc <__assert_fail@plt+0x5f1c>
   129cc:	mov	r5, r0
   129d0:	b	129ec <__assert_fail@plt+0x113c>
   129d4:	mov	r1, r6
   129d8:	ldr	r0, [r5, #24]
   129dc:	bl	124c0 <__assert_fail@plt+0xc10>
   129e0:	adds	r0, r0, #1
   129e4:	movne	r0, #1
   129e8:	and	r4, r4, r0
   129ec:	mov	r0, r5
   129f0:	bl	19ca0 <fts_read@@Base>
   129f4:	subs	r7, r0, #0
   129f8:	bne	129d4 <__assert_fail@plt+0x1124>
   129fc:	bl	1170c <__errno_location@plt>
   12a00:	ldr	sl, [r0]
   12a04:	mov	r6, r0
   12a08:	cmp	sl, #0
   12a0c:	bne	12a70 <__assert_fail@plt+0x11c0>
   12a10:	mov	r0, r5
   12a14:	bl	19b20 <fts_close@@Base>
   12a18:	cmp	r0, #0
   12a1c:	bne	12a44 <__assert_fail@plt+0x1194>
   12a20:	mov	r0, r9
   12a24:	bl	11520 <free@plt>
   12a28:	ldr	r2, [sp, #12]
   12a2c:	ldr	r3, [r8]
   12a30:	mov	r0, r4
   12a34:	cmp	r2, r3
   12a38:	bne	12b18 <__assert_fail@plt+0x1268>
   12a3c:	add	sp, sp, #16
   12a40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a44:	mov	r2, #5
   12a48:	ldr	r1, [pc, #208]	; 12b20 <__assert_fail@plt+0x1270>
   12a4c:	mov	r0, #0
   12a50:	ldr	r4, [r6]
   12a54:	bl	11574 <dcgettext@plt>
   12a58:	mov	r1, r4
   12a5c:	mov	r4, #0
   12a60:	mov	r2, r0
   12a64:	mov	r0, #0
   12a68:	bl	11640 <error@plt>
   12a6c:	b	12a20 <__assert_fail@plt+0x1170>
   12a70:	mov	r2, #5
   12a74:	ldr	r1, [pc, #168]	; 12b24 <__assert_fail@plt+0x1274>
   12a78:	mov	r0, r7
   12a7c:	bl	11574 <dcgettext@plt>
   12a80:	mov	r1, sl
   12a84:	mov	r4, r7
   12a88:	mov	r2, r0
   12a8c:	mov	r0, r7
   12a90:	bl	11640 <error@plt>
   12a94:	mov	r0, r5
   12a98:	bl	19b20 <fts_close@@Base>
   12a9c:	cmp	r0, #0
   12aa0:	beq	12a20 <__assert_fail@plt+0x1170>
   12aa4:	b	12a44 <__assert_fail@plt+0x1194>
   12aa8:	mov	r1, r6
   12aac:	mov	r0, r5
   12ab0:	bl	124c0 <__assert_fail@plt+0xc10>
   12ab4:	adds	r4, r0, #1
   12ab8:	mov	r0, r9
   12abc:	movne	r4, #1
   12ac0:	bl	11520 <free@plt>
   12ac4:	b	12a28 <__assert_fail@plt+0x1178>
   12ac8:	mov	r1, #2
   12acc:	bl	12b2c <__assert_fail@plt+0x127c>
   12ad0:	subs	r9, r0, #0
   12ad4:	movne	r5, r9
   12ad8:	bne	129ac <__assert_fail@plt+0x10fc>
   12adc:	bl	1170c <__errno_location@plt>
   12ae0:	mov	r2, #5
   12ae4:	ldr	r1, [pc, #60]	; 12b28 <__assert_fail@plt+0x1278>
   12ae8:	ldr	r4, [r0]
   12aec:	mov	r0, r9
   12af0:	bl	11574 <dcgettext@plt>
   12af4:	mov	r1, r5
   12af8:	mov	r6, r0
   12afc:	mov	r0, #4
   12b00:	bl	16ba0 <__assert_fail@plt+0x52f0>
   12b04:	mov	r2, r6
   12b08:	mov	r1, r4
   12b0c:	mov	r3, r0
   12b10:	mov	r0, #1
   12b14:	bl	11640 <error@plt>
   12b18:	bl	11580 <__stack_chk_fail@plt>
   12b1c:	andeq	ip, r2, r0, lsl #30
   12b20:	andeq	fp, r1, r8, lsr #22
   12b24:	andeq	fp, r1, r8, lsl fp
   12b28:	andeq	fp, r1, r0, lsl #22
   12b2c:	ldr	r2, [pc, #1524]	; 13128 <__assert_fail@plt+0x1878>
   12b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b34:	and	r9, r1, #3
   12b38:	sub	sp, sp, #148	; 0x94
   12b3c:	sub	r3, r9, #1
   12b40:	ldr	r2, [r2]
   12b44:	ands	r3, r3, r9
   12b48:	str	r3, [sp, #28]
   12b4c:	str	r2, [sp, #140]	; 0x8c
   12b50:	bne	1300c <__assert_fail@plt+0x175c>
   12b54:	cmp	r0, #0
   12b58:	beq	13058 <__assert_fail@plt+0x17a8>
   12b5c:	ldrb	r5, [r0]
   12b60:	cmp	r5, #0
   12b64:	beq	13020 <__assert_fail@plt+0x1770>
   12b68:	cmp	r5, #47	; 0x2f
   12b6c:	mov	r4, r1
   12b70:	str	r0, [sp, #8]
   12b74:	beq	12d24 <__assert_fail@plt+0x1474>
   12b78:	bl	1784c <__assert_fail@plt+0x5f9c>
   12b7c:	subs	r8, r0, #0
   12b80:	beq	12dcc <__assert_fail@plt+0x151c>
   12b84:	bl	116dc <strlen@plt>
   12b88:	ldr	r3, [sp, #8]
   12b8c:	cmp	r0, #4096	; 0x1000
   12b90:	mov	r6, r0
   12b94:	bcc	13034 <__assert_fail@plt+0x1784>
   12b98:	add	r6, r8, r0
   12b9c:	mov	r7, r6
   12ba0:	mov	r2, #0
   12ba4:	str	r2, [sp, #16]
   12ba8:	str	r2, [sp, #24]
   12bac:	mov	sl, r2
   12bb0:	ldrb	r2, [r3]
   12bb4:	and	r1, r4, #4
   12bb8:	str	r1, [sp, #8]
   12bbc:	str	r3, [sp, #20]
   12bc0:	cmp	r2, #0
   12bc4:	beq	12d70 <__assert_fail@plt+0x14c0>
   12bc8:	cmp	r2, #47	; 0x2f
   12bcc:	movne	r1, r2
   12bd0:	bne	12be8 <__assert_fail@plt+0x1338>
   12bd4:	ldrb	r1, [r3, #1]!
   12bd8:	cmp	r1, #47	; 0x2f
   12bdc:	beq	12bd4 <__assert_fail@plt+0x1324>
   12be0:	cmp	r1, #0
   12be4:	beq	12d70 <__assert_fail@plt+0x14c0>
   12be8:	mov	r4, r3
   12bec:	b	12bf4 <__assert_fail@plt+0x1344>
   12bf0:	mov	r4, r5
   12bf4:	ldrb	r2, [r4, #1]
   12bf8:	add	r5, r4, #1
   12bfc:	cmp	r2, #0
   12c00:	cmpne	r2, #47	; 0x2f
   12c04:	bne	12bf0 <__assert_fail@plt+0x1340>
   12c08:	cmp	r5, r3
   12c0c:	beq	12d70 <__assert_fail@plt+0x14c0>
   12c10:	sub	fp, r5, r3
   12c14:	cmp	fp, #1
   12c18:	beq	12d60 <__assert_fail@plt+0x14b0>
   12c1c:	cmp	r1, #46	; 0x2e
   12c20:	cmpeq	fp, #2
   12c24:	beq	12edc <__assert_fail@plt+0x162c>
   12c28:	ldrb	r2, [r6, #-1]
   12c2c:	cmp	r2, #47	; 0x2f
   12c30:	movne	r2, #47	; 0x2f
   12c34:	strbne	r2, [r6], #1
   12c38:	add	r2, r6, fp
   12c3c:	cmp	r7, r2
   12c40:	bhi	12c80 <__assert_fail@plt+0x13d0>
   12c44:	ldr	r2, [pc, #1248]	; 1312c <__assert_fail@plt+0x187c>
   12c48:	sub	r7, r7, r8
   12c4c:	cmp	fp, r2
   12c50:	addgt	r7, r7, #1
   12c54:	addgt	r7, fp, r7
   12c58:	addle	r7, r7, #4096	; 0x1000
   12c5c:	mov	r0, r8
   12c60:	mov	r1, r7
   12c64:	str	r3, [sp, #12]
   12c68:	bl	175a0 <__assert_fail@plt+0x5cf0>
   12c6c:	sub	r6, r6, r8
   12c70:	ldr	r3, [sp, #12]
   12c74:	mov	r8, r0
   12c78:	add	r7, r0, r7
   12c7c:	add	r6, r0, r6
   12c80:	mov	r1, r3
   12c84:	mov	r0, r6
   12c88:	mov	r2, fp
   12c8c:	bl	11538 <memcpy@plt>
   12c90:	ldr	r2, [sp, #8]
   12c94:	sub	r3, r9, #2
   12c98:	cmp	r2, #0
   12c9c:	clz	r3, r3
   12ca0:	lsr	r3, r3, #5
   12ca4:	moveq	r3, #0
   12ca8:	cmp	r3, #0
   12cac:	strb	sl, [r0, fp]
   12cb0:	add	r6, r0, fp
   12cb4:	bne	12d04 <__assert_fail@plt+0x1454>
   12cb8:	ldr	r3, [sp, #8]
   12cbc:	add	fp, sp, #32
   12cc0:	cmp	r3, #0
   12cc4:	mov	r2, fp
   12cc8:	mov	r1, r8
   12ccc:	mov	r0, #3
   12cd0:	beq	12dec <__assert_fail@plt+0x153c>
   12cd4:	bl	11838 <__xstat64@plt>
   12cd8:	adds	r0, r0, #0
   12cdc:	movne	r0, #1
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d44 <__assert_fail@plt+0x1494>
   12ce8:	bl	1170c <__errno_location@plt>
   12cec:	cmp	r9, #0
   12cf0:	mov	fp, r0
   12cf4:	ldr	r3, [r0]
   12cf8:	beq	12f54 <__assert_fail@plt+0x16a4>
   12cfc:	cmp	r9, #1
   12d00:	beq	12f30 <__assert_fail@plt+0x1680>
   12d04:	str	sl, [sp, #48]	; 0x30
   12d08:	ldrb	r3, [r5]
   12d0c:	cmp	r3, #0
   12d10:	cmpne	r9, #2
   12d14:	bne	1310c <__assert_fail@plt+0x185c>
   12d18:	ldrb	r2, [r5]
   12d1c:	mov	r3, r5
   12d20:	b	12bc0 <__assert_fail@plt+0x1310>
   12d24:	mov	r0, #4096	; 0x1000
   12d28:	bl	17544 <__assert_fail@plt+0x5c94>
   12d2c:	ldr	r3, [sp, #8]
   12d30:	mov	r6, r0
   12d34:	mov	r8, r0
   12d38:	add	r7, r0, #4096	; 0x1000
   12d3c:	strb	r5, [r6], #1
   12d40:	b	12ba0 <__assert_fail@plt+0x12f0>
   12d44:	ldr	r3, [sp, #48]	; 0x30
   12d48:	and	r3, r3, #61440	; 0xf000
   12d4c:	cmp	r3, #40960	; 0xa000
   12d50:	beq	12dfc <__assert_fail@plt+0x154c>
   12d54:	cmp	r3, #16384	; 0x4000
   12d58:	beq	12d18 <__assert_fail@plt+0x1468>
   12d5c:	b	12d08 <__assert_fail@plt+0x1458>
   12d60:	cmp	r1, #46	; 0x2e
   12d64:	bne	12c28 <__assert_fail@plt+0x1378>
   12d68:	mov	r3, r5
   12d6c:	b	12bc0 <__assert_fail@plt+0x1310>
   12d70:	add	r3, r8, #1
   12d74:	cmp	r6, r3
   12d78:	bls	12d88 <__assert_fail@plt+0x14d8>
   12d7c:	ldrb	r3, [r6, #-1]
   12d80:	cmp	r3, #47	; 0x2f
   12d84:	beq	130bc <__assert_fail@plt+0x180c>
   12d88:	add	r3, r6, #1
   12d8c:	cmp	r7, r3
   12d90:	mov	r3, #0
   12d94:	strb	r3, [r6]
   12d98:	beq	12db0 <__assert_fail@plt+0x1500>
   12d9c:	sub	r1, r6, r8
   12da0:	mov	r0, r8
   12da4:	add	r1, r1, #1
   12da8:	bl	175a0 <__assert_fail@plt+0x5cf0>
   12dac:	mov	r8, r0
   12db0:	ldr	r0, [sp, #24]
   12db4:	bl	11520 <free@plt>
   12db8:	ldr	r3, [sp, #16]
   12dbc:	cmp	r3, #0
   12dc0:	beq	12dcc <__assert_fail@plt+0x151c>
   12dc4:	mov	r0, r3
   12dc8:	bl	13fa8 <__assert_fail@plt+0x26f8>
   12dcc:	ldr	r3, [pc, #852]	; 13128 <__assert_fail@plt+0x1878>
   12dd0:	ldr	r2, [sp, #140]	; 0x8c
   12dd4:	mov	r0, r8
   12dd8:	ldr	r3, [r3]
   12ddc:	cmp	r2, r3
   12de0:	bne	13124 <__assert_fail@plt+0x1874>
   12de4:	add	sp, sp, #148	; 0x94
   12de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dec:	bl	11874 <__lxstat64@plt>
   12df0:	adds	r0, r0, #0
   12df4:	movne	r0, #1
   12df8:	b	12ce0 <__assert_fail@plt+0x1430>
   12dfc:	ldr	r3, [sp, #16]
   12e00:	cmp	r3, #0
   12e04:	beq	12fbc <__assert_fail@plt+0x170c>
   12e08:	mov	r2, fp
   12e0c:	ldrd	r0, [sp, #16]
   12e10:	bl	13414 <__assert_fail@plt+0x1b64>
   12e14:	cmp	r0, #0
   12e18:	bne	12ec8 <__assert_fail@plt+0x1618>
   12e1c:	mov	r2, fp
   12e20:	ldrd	r0, [sp, #16]
   12e24:	bl	133ac <__assert_fail@plt+0x1afc>
   12e28:	ldr	r1, [sp, #80]	; 0x50
   12e2c:	mov	r0, r8
   12e30:	bl	1a6a0 <fts_children@@Base+0x284>
   12e34:	subs	fp, r0, #0
   12e38:	beq	13074 <__assert_fail@plt+0x17c4>
   12e3c:	bl	116dc <strlen@plt>
   12e40:	mov	r4, r0
   12e44:	mov	r0, r5
   12e48:	bl	116dc <strlen@plt>
   12e4c:	ldr	r3, [sp, #28]
   12e50:	cmp	r3, #0
   12e54:	add	r3, r4, r0
   12e58:	mov	r2, r0
   12e5c:	add	r3, r3, #1
   12e60:	beq	12fe8 <__assert_fail@plt+0x1738>
   12e64:	ldr	r1, [sp, #28]
   12e68:	cmp	r3, r1
   12e6c:	bhi	13094 <__assert_fail@plt+0x17e4>
   12e70:	mov	r1, r5
   12e74:	ldr	r5, [sp, #24]
   12e78:	add	r2, r2, #1
   12e7c:	add	r0, r5, r4
   12e80:	bl	11514 <memmove@plt>
   12e84:	mov	r2, r4
   12e88:	mov	r1, fp
   12e8c:	mov	r0, r5
   12e90:	bl	11538 <memcpy@plt>
   12e94:	ldrb	r3, [fp]
   12e98:	add	r2, r8, #1
   12e9c:	cmp	r3, #47	; 0x2f
   12ea0:	strbeq	r3, [r8]
   12ea4:	moveq	r6, r2
   12ea8:	str	r0, [sp, #20]
   12eac:	beq	12eb8 <__assert_fail@plt+0x1608>
   12eb0:	cmp	r6, r2
   12eb4:	bhi	130c8 <__assert_fail@plt+0x1818>
   12eb8:	mov	r0, fp
   12ebc:	bl	11520 <free@plt>
   12ec0:	ldr	r5, [sp, #20]
   12ec4:	b	12d18 <__assert_fail@plt+0x1468>
   12ec8:	cmp	r9, #2
   12ecc:	bne	12f7c <__assert_fail@plt+0x16cc>
   12ed0:	ldrb	r2, [r4, #1]
   12ed4:	mov	r3, r5
   12ed8:	b	12bc0 <__assert_fail@plt+0x1310>
   12edc:	ldrb	r1, [r3, #1]
   12ee0:	cmp	r1, #46	; 0x2e
   12ee4:	bne	12c28 <__assert_fail@plt+0x1378>
   12ee8:	add	r3, r8, #1
   12eec:	cmp	r6, r3
   12ef0:	bls	12d68 <__assert_fail@plt+0x14b8>
   12ef4:	sub	r1, r6, #1
   12ef8:	cmp	r8, r1
   12efc:	bcs	13100 <__assert_fail@plt+0x1850>
   12f00:	ldrb	r3, [r6, #-2]
   12f04:	cmp	r3, #47	; 0x2f
   12f08:	beq	13100 <__assert_fail@plt+0x1850>
   12f0c:	sub	r3, r6, #2
   12f10:	cmp	r3, r8
   12f14:	mov	r6, r3
   12f18:	beq	12d68 <__assert_fail@plt+0x14b8>
   12f1c:	ldrb	r1, [r3, #-1]
   12f20:	sub	r3, r3, #1
   12f24:	cmp	r1, #47	; 0x2f
   12f28:	beq	12d68 <__assert_fail@plt+0x14b8>
   12f2c:	b	12f10 <__assert_fail@plt+0x1660>
   12f30:	ldr	r1, [pc, #504]	; 13130 <__assert_fail@plt+0x1880>
   12f34:	mov	r0, r5
   12f38:	str	r3, [sp, #12]
   12f3c:	bl	118a4 <strspn@plt>
   12f40:	ldr	r3, [sp, #12]
   12f44:	ldrb	r2, [r5, r0]
   12f48:	cmp	r3, #2
   12f4c:	cmpeq	r2, #0
   12f50:	beq	12ed0 <__assert_fail@plt+0x1620>
   12f54:	ldr	r0, [sp, #24]
   12f58:	str	r3, [sp, #8]
   12f5c:	bl	11520 <free@plt>
   12f60:	mov	r0, r8
   12f64:	bl	11520 <free@plt>
   12f68:	ldr	r3, [sp, #16]
   12f6c:	cmp	r3, #0
   12f70:	ldr	r3, [sp, #8]
   12f74:	beq	12fb0 <__assert_fail@plt+0x1700>
   12f78:	b	12fa0 <__assert_fail@plt+0x16f0>
   12f7c:	bl	1170c <__errno_location@plt>
   12f80:	mov	r3, #40	; 0x28
   12f84:	mov	fp, r0
   12f88:	ldr	r0, [sp, #24]
   12f8c:	str	r3, [sp, #8]
   12f90:	bl	11520 <free@plt>
   12f94:	mov	r0, r8
   12f98:	bl	11520 <free@plt>
   12f9c:	ldr	r3, [sp, #8]
   12fa0:	ldr	r0, [sp, #16]
   12fa4:	str	r3, [sp, #8]
   12fa8:	bl	13fa8 <__assert_fail@plt+0x26f8>
   12fac:	ldr	r3, [sp, #8]
   12fb0:	str	r3, [fp]
   12fb4:	mov	r8, #0
   12fb8:	b	12dcc <__assert_fail@plt+0x151c>
   12fbc:	ldr	r3, [pc, #368]	; 13134 <__assert_fail@plt+0x1884>
   12fc0:	ldr	r1, [sp, #16]
   12fc4:	str	r3, [sp]
   12fc8:	ldr	r2, [pc, #360]	; 13138 <__assert_fail@plt+0x1888>
   12fcc:	ldr	r3, [pc, #360]	; 1313c <__assert_fail@plt+0x188c>
   12fd0:	mov	r0, #7
   12fd4:	bl	13da8 <__assert_fail@plt+0x24f8>
   12fd8:	subs	r3, r0, #0
   12fdc:	str	r3, [sp, #16]
   12fe0:	bne	12e08 <__assert_fail@plt+0x1558>
   12fe4:	bl	1778c <__assert_fail@plt+0x5edc>
   12fe8:	cmp	r3, #4096	; 0x1000
   12fec:	movcc	r3, #4096	; 0x1000
   12ff0:	str	r0, [sp, #12]
   12ff4:	mov	r0, r3
   12ff8:	str	r3, [sp, #28]
   12ffc:	bl	17544 <__assert_fail@plt+0x5c94>
   13000:	ldr	r2, [sp, #12]
   13004:	str	r0, [sp, #24]
   13008:	b	12e70 <__assert_fail@plt+0x15c0>
   1300c:	bl	1170c <__errno_location@plt>
   13010:	mov	r3, #22
   13014:	mov	r8, #0
   13018:	str	r3, [r0]
   1301c:	b	12dcc <__assert_fail@plt+0x151c>
   13020:	bl	1170c <__errno_location@plt>
   13024:	mov	r3, #2
   13028:	mov	r8, r5
   1302c:	str	r3, [r0]
   13030:	b	12dcc <__assert_fail@plt+0x151c>
   13034:	mov	r0, r8
   13038:	mov	r1, #4096	; 0x1000
   1303c:	str	r3, [sp, #8]
   13040:	bl	175a0 <__assert_fail@plt+0x5cf0>
   13044:	ldr	r3, [sp, #8]
   13048:	mov	r8, r0
   1304c:	add	r6, r0, r6
   13050:	add	r7, r0, #4096	; 0x1000
   13054:	b	12ba0 <__assert_fail@plt+0x12f0>
   13058:	str	r0, [sp, #8]
   1305c:	bl	1170c <__errno_location@plt>
   13060:	ldr	r3, [sp, #8]
   13064:	mov	r2, #22
   13068:	mov	r8, r3
   1306c:	str	r2, [r0]
   13070:	b	12dcc <__assert_fail@plt+0x151c>
   13074:	bl	1170c <__errno_location@plt>
   13078:	cmp	r9, #2
   1307c:	mov	fp, r0
   13080:	ldr	r3, [r0]
   13084:	bne	12f88 <__assert_fail@plt+0x16d8>
   13088:	cmp	r3, #12
   1308c:	bne	12ed0 <__assert_fail@plt+0x1620>
   13090:	b	12f88 <__assert_fail@plt+0x16d8>
   13094:	str	r0, [sp, #20]
   13098:	mov	r1, r3
   1309c:	ldr	r0, [sp, #24]
   130a0:	str	r3, [sp, #12]
   130a4:	bl	175a0 <__assert_fail@plt+0x5cf0>
   130a8:	ldr	r3, [sp, #12]
   130ac:	ldr	r2, [sp, #20]
   130b0:	str	r3, [sp, #28]
   130b4:	str	r0, [sp, #24]
   130b8:	b	12e70 <__assert_fail@plt+0x15c0>
   130bc:	mov	r3, r6
   130c0:	sub	r6, r6, #1
   130c4:	b	12d8c <__assert_fail@plt+0x14dc>
   130c8:	sub	r3, r6, #1
   130cc:	cmp	r8, r3
   130d0:	bcs	1311c <__assert_fail@plt+0x186c>
   130d4:	ldrb	r2, [r6, #-2]
   130d8:	cmp	r2, #47	; 0x2f
   130dc:	beq	1311c <__assert_fail@plt+0x186c>
   130e0:	sub	r3, r6, #2
   130e4:	cmp	r3, r8
   130e8:	mov	r6, r3
   130ec:	beq	12eb8 <__assert_fail@plt+0x1608>
   130f0:	ldrb	r2, [r3, #-1]!
   130f4:	cmp	r2, #47	; 0x2f
   130f8:	beq	12eb8 <__assert_fail@plt+0x1608>
   130fc:	b	130e4 <__assert_fail@plt+0x1834>
   13100:	mov	r3, r5
   13104:	mov	r6, r1
   13108:	b	12bc0 <__assert_fail@plt+0x1310>
   1310c:	bl	1170c <__errno_location@plt>
   13110:	mov	r3, #20
   13114:	mov	fp, r0
   13118:	b	12f54 <__assert_fail@plt+0x16a4>
   1311c:	mov	r6, r3
   13120:	b	12eb8 <__assert_fail@plt+0x1608>
   13124:	bl	11580 <__stack_chk_fail@plt>
   13128:	andeq	ip, r2, r0, lsl #30
   1312c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13130:	andeq	fp, r1, r4, asr #22
   13134:	andeq	r4, r1, r8, lsr r6
   13138:	andeq	r4, r1, r4, asr r5
   1313c:	andeq	r4, r1, ip, ror #11
   13140:	ldr	r3, [pc, #4]	; 1314c <__assert_fail@plt+0x189c>
   13144:	str	r0, [r3]
   13148:	bx	lr
   1314c:	andeq	sp, r2, r0, ror #3
   13150:	ldr	r3, [pc, #4]	; 1315c <__assert_fail@plt+0x18ac>
   13154:	strb	r0, [r3, #4]
   13158:	bx	lr
   1315c:	andeq	sp, r2, r0, ror #3
   13160:	ldr	r3, [pc, #180]	; 1321c <__assert_fail@plt+0x196c>
   13164:	push	{r4, r5, r6, lr}
   13168:	sub	sp, sp, #8
   1316c:	ldr	r0, [r3]
   13170:	bl	1a754 <fts_children@@Base+0x338>
   13174:	cmp	r0, #0
   13178:	beq	131a0 <__assert_fail@plt+0x18f0>
   1317c:	bl	1170c <__errno_location@plt>
   13180:	ldr	r5, [pc, #152]	; 13220 <__assert_fail@plt+0x1970>
   13184:	ldrb	r3, [r5, #4]
   13188:	cmp	r3, #0
   1318c:	mov	r4, r0
   13190:	beq	131bc <__assert_fail@plt+0x190c>
   13194:	ldr	r3, [r0]
   13198:	cmp	r3, #32
   1319c:	bne	131bc <__assert_fail@plt+0x190c>
   131a0:	ldr	r3, [pc, #124]	; 13224 <__assert_fail@plt+0x1974>
   131a4:	ldr	r0, [r3]
   131a8:	bl	1a754 <fts_children@@Base+0x338>
   131ac:	cmp	r0, #0
   131b0:	bne	131fc <__assert_fail@plt+0x194c>
   131b4:	add	sp, sp, #8
   131b8:	pop	{r4, r5, r6, pc}
   131bc:	mov	r2, #5
   131c0:	ldr	r1, [pc, #96]	; 13228 <__assert_fail@plt+0x1978>
   131c4:	mov	r0, #0
   131c8:	bl	11574 <dcgettext@plt>
   131cc:	mov	r6, r0
   131d0:	ldr	r0, [r5]
   131d4:	cmp	r0, #0
   131d8:	beq	13208 <__assert_fail@plt+0x1958>
   131dc:	ldr	r4, [r4]
   131e0:	bl	16c68 <__assert_fail@plt+0x53b8>
   131e4:	mov	r1, r4
   131e8:	str	r6, [sp]
   131ec:	ldr	r2, [pc, #56]	; 1322c <__assert_fail@plt+0x197c>
   131f0:	mov	r3, r0
   131f4:	mov	r0, #0
   131f8:	bl	11640 <error@plt>
   131fc:	ldr	r3, [pc, #44]	; 13230 <__assert_fail@plt+0x1980>
   13200:	ldr	r0, [r3]
   13204:	bl	1152c <_exit@plt>
   13208:	mov	r3, r6
   1320c:	ldr	r1, [r4]
   13210:	ldr	r2, [pc, #28]	; 13234 <__assert_fail@plt+0x1984>
   13214:	bl	11640 <error@plt>
   13218:	b	131fc <__assert_fail@plt+0x194c>
   1321c:	ldrdeq	sp, [r2], -r4
   13220:	andeq	sp, r2, r0, ror #3
   13224:	ldrdeq	sp, [r2], -r0
   13228:	andeq	fp, r1, r8, asr #22
   1322c:	andeq	fp, r1, r4, asr fp
   13230:	andeq	sp, r2, r8, ror r1
   13234:	andeq	fp, r1, r8, asr fp
   13238:	push	{r4, lr}
   1323c:	bl	132b4 <__assert_fail@plt+0x1a04>
   13240:	cmp	r0, #0
   13244:	popne	{r4, pc}
   13248:	bl	1778c <__assert_fail@plt+0x5edc>
   1324c:	push	{r4, r5, r6, lr}
   13250:	mov	r4, r0
   13254:	ldrb	ip, [r0]
   13258:	sub	r5, ip, #47	; 0x2f
   1325c:	bl	1330c <__assert_fail@plt+0x1a5c>
   13260:	clz	r5, r5
   13264:	lsr	r5, r5, #5
   13268:	sub	r0, r0, r4
   1326c:	cmp	r0, r5
   13270:	popls	{r4, r5, r6, pc}
   13274:	add	r3, r4, r0
   13278:	ldrb	r3, [r3, #-1]
   1327c:	cmp	r3, #47	; 0x2f
   13280:	popne	{r4, r5, r6, pc}
   13284:	sub	r0, r0, #2
   13288:	sub	ip, r4, #1
   1328c:	add	r3, r4, r0
   13290:	add	ip, ip, r5
   13294:	rsb	r2, r4, #1
   13298:	cmp	r3, ip
   1329c:	add	r0, r2, r3
   132a0:	popeq	{r4, r5, r6, pc}
   132a4:	ldrb	r1, [r3], #-1
   132a8:	cmp	r1, #47	; 0x2f
   132ac:	beq	13298 <__assert_fail@plt+0x19e8>
   132b0:	pop	{r4, r5, r6, pc}
   132b4:	push	{r4, r5, r6, lr}
   132b8:	mov	r6, r0
   132bc:	bl	1324c <__assert_fail@plt+0x199c>
   132c0:	add	r3, r0, #1
   132c4:	mov	r4, r0
   132c8:	cmp	r0, #0
   132cc:	movne	r0, r3
   132d0:	addeq	r0, r3, #1
   132d4:	bl	11664 <malloc@plt>
   132d8:	subs	r5, r0, #0
   132dc:	beq	13304 <__assert_fail@plt+0x1a54>
   132e0:	mov	r2, r4
   132e4:	mov	r1, r6
   132e8:	bl	11538 <memcpy@plt>
   132ec:	cmp	r4, #0
   132f0:	moveq	r3, #46	; 0x2e
   132f4:	moveq	r4, #1
   132f8:	strbeq	r3, [r5]
   132fc:	mov	r3, #0
   13300:	strb	r3, [r5, r4]
   13304:	mov	r0, r5
   13308:	pop	{r4, r5, r6, pc}
   1330c:	ldrb	r3, [r0]
   13310:	cmp	r3, #47	; 0x2f
   13314:	bne	13324 <__assert_fail@plt+0x1a74>
   13318:	ldrb	r3, [r0, #1]!
   1331c:	cmp	r3, #47	; 0x2f
   13320:	beq	13318 <__assert_fail@plt+0x1a68>
   13324:	cmp	r3, #0
   13328:	bxeq	lr
   1332c:	mov	r2, r0
   13330:	mov	r1, #0
   13334:	cmp	r3, #47	; 0x2f
   13338:	moveq	r1, #1
   1333c:	beq	1334c <__assert_fail@plt+0x1a9c>
   13340:	cmp	r1, #0
   13344:	movne	r0, r2
   13348:	movne	r1, #0
   1334c:	ldrb	r3, [r2, #1]!
   13350:	cmp	r3, #0
   13354:	bne	13334 <__assert_fail@plt+0x1a84>
   13358:	bx	lr
   1335c:	push	{r4, lr}
   13360:	mov	r4, r0
   13364:	bl	116dc <strlen@plt>
   13368:	cmp	r0, #1
   1336c:	popls	{r4, pc}
   13370:	add	r2, r4, r0
   13374:	mov	r3, r0
   13378:	ldrb	r2, [r2, #-1]
   1337c:	cmp	r2, #47	; 0x2f
   13380:	subeq	r3, r0, #2
   13384:	addeq	r3, r4, r3
   13388:	rsbeq	r1, r4, #1
   1338c:	popne	{r4, pc}
   13390:	cmp	r3, r4
   13394:	add	r0, r1, r3
   13398:	popeq	{r4, pc}
   1339c:	ldrb	r2, [r3], #-1
   133a0:	cmp	r2, #47	; 0x2f
   133a4:	popne	{r4, pc}
   133a8:	b	13390 <__assert_fail@plt+0x1ae0>
   133ac:	push	{r4, r5, r6, r7, r8, lr}
   133b0:	subs	r8, r0, #0
   133b4:	popeq	{r4, r5, r6, r7, r8, pc}
   133b8:	mov	r0, #24
   133bc:	mov	r4, r1
   133c0:	mov	r7, r2
   133c4:	bl	17544 <__assert_fail@plt+0x5c94>
   133c8:	mov	r6, r0
   133cc:	mov	r0, r4
   133d0:	bl	17770 <__assert_fail@plt+0x5ec0>
   133d4:	ldrd	r4, [r7, #96]	; 0x60
   133d8:	ldrd	r2, [r7]
   133dc:	mov	r1, r6
   133e0:	strd	r4, [r6, #8]
   133e4:	strd	r2, [r6, #16]
   133e8:	str	r0, [r6]
   133ec:	mov	r0, r8
   133f0:	bl	143d4 <__assert_fail@plt+0x2b24>
   133f4:	cmp	r0, #0
   133f8:	beq	13410 <__assert_fail@plt+0x1b60>
   133fc:	cmp	r6, r0
   13400:	popeq	{r4, r5, r6, r7, r8, pc}
   13404:	mov	r0, r6
   13408:	pop	{r4, r5, r6, r7, r8, lr}
   1340c:	b	14638 <__assert_fail@plt+0x2d88>
   13410:	bl	1778c <__assert_fail@plt+0x5edc>
   13414:	push	{r4, r5, r6, lr}
   13418:	sub	sp, sp, #32
   1341c:	ldr	r6, [pc, #80]	; 13474 <__assert_fail@plt+0x1bc4>
   13420:	subs	r3, r0, #0
   13424:	moveq	r0, r3
   13428:	ldr	ip, [r6]
   1342c:	str	ip, [sp, #28]
   13430:	beq	13458 <__assert_fail@plt+0x1ba8>
   13434:	ldrd	r4, [r2, #96]	; 0x60
   13438:	ldrd	r2, [r2]
   1343c:	str	r1, [sp]
   13440:	mov	r1, sp
   13444:	strd	r4, [sp, #8]
   13448:	strd	r2, [sp, #16]
   1344c:	bl	13af0 <__assert_fail@plt+0x2240>
   13450:	adds	r0, r0, #0
   13454:	movne	r0, #1
   13458:	ldr	r2, [sp, #28]
   1345c:	ldr	r3, [r6]
   13460:	cmp	r2, r3
   13464:	bne	13470 <__assert_fail@plt+0x1bc0>
   13468:	add	sp, sp, #32
   1346c:	pop	{r4, r5, r6, pc}
   13470:	bl	11580 <__stack_chk_fail@plt>
   13474:	andeq	ip, r2, r0, lsl #30
   13478:	cmp	r0, #10
   1347c:	movcc	r0, #10
   13480:	push	{r4, r5, r6, r7, r8, lr}
   13484:	orr	r7, r0, #1
   13488:	cmn	r7, #1
   1348c:	beq	13504 <__assert_fail@plt+0x1c54>
   13490:	ldr	r8, [pc, #116]	; 1350c <__assert_fail@plt+0x1c5c>
   13494:	umull	r2, r3, r8, r7
   13498:	cmp	r7, #9
   1349c:	lsr	r3, r3, #1
   134a0:	add	r3, r3, r3, lsl #1
   134a4:	sub	r3, r7, r3
   134a8:	bls	134f0 <__assert_fail@plt+0x1c40>
   134ac:	cmp	r3, #0
   134b0:	beq	134f8 <__assert_fail@plt+0x1c48>
   134b4:	mov	r6, #16
   134b8:	mov	r5, #9
   134bc:	mov	r4, #3
   134c0:	b	134d0 <__assert_fail@plt+0x1c20>
   134c4:	cmp	r1, #0
   134c8:	add	r6, r6, #8
   134cc:	beq	134f8 <__assert_fail@plt+0x1c48>
   134d0:	add	r4, r4, #2
   134d4:	mov	r1, r4
   134d8:	mov	r0, r7
   134dc:	bl	1b01c <fts_children@@Base+0xc00>
   134e0:	add	r5, r5, r6
   134e4:	cmp	r5, r7
   134e8:	mov	r3, r1
   134ec:	bcc	134c4 <__assert_fail@plt+0x1c14>
   134f0:	cmp	r3, #0
   134f4:	bne	13504 <__assert_fail@plt+0x1c54>
   134f8:	add	r7, r7, #2
   134fc:	cmn	r7, #1
   13500:	bne	13494 <__assert_fail@plt+0x1be4>
   13504:	mov	r0, r7
   13508:	pop	{r4, r5, r6, r7, r8, pc}
   1350c:	bge	feabdfc0 <optarg@@GLIBC_2.4+0xfea90de8>
   13510:	push	{r4, lr}
   13514:	ror	r0, r0, #3
   13518:	bl	1b01c <fts_children@@Base+0xc00>
   1351c:	mov	r0, r1
   13520:	pop	{r4, pc}
   13524:	sub	r0, r1, r0
   13528:	clz	r0, r0
   1352c:	lsr	r0, r0, #5
   13530:	bx	lr
   13534:	push	{r4, lr}
   13538:	mov	r4, r0
   1353c:	mov	r0, r1
   13540:	ldr	r3, [r4, #24]
   13544:	ldr	r1, [r4, #8]
   13548:	blx	r3
   1354c:	ldr	r3, [r4, #8]
   13550:	cmp	r3, r0
   13554:	bls	13564 <__assert_fail@plt+0x1cb4>
   13558:	ldr	r3, [r4]
   1355c:	add	r0, r3, r0, lsl #3
   13560:	pop	{r4, pc}
   13564:	bl	1185c <abort@plt>
   13568:	push	{r4, r5, r6, r7, r8, lr}
   1356c:	mov	r8, r2
   13570:	mov	r5, r1
   13574:	mov	r7, r3
   13578:	mov	r6, r0
   1357c:	bl	13534 <__assert_fail@plt+0x1c84>
   13580:	str	r0, [r8]
   13584:	ldr	r1, [r0]
   13588:	cmp	r1, #0
   1358c:	beq	13674 <__assert_fail@plt+0x1dc4>
   13590:	cmp	r1, r5
   13594:	mov	r4, r0
   13598:	beq	13638 <__assert_fail@plt+0x1d88>
   1359c:	ldr	r3, [r6, #28]
   135a0:	mov	r0, r5
   135a4:	blx	r3
   135a8:	cmp	r0, #0
   135ac:	ldrne	r3, [r4]
   135b0:	bne	1363c <__assert_fail@plt+0x1d8c>
   135b4:	ldr	r2, [r4, #4]
   135b8:	cmp	r2, #0
   135bc:	beq	13674 <__assert_fail@plt+0x1dc4>
   135c0:	ldr	r3, [r2]
   135c4:	cmp	r5, r3
   135c8:	bne	135ec <__assert_fail@plt+0x1d3c>
   135cc:	b	1360c <__assert_fail@plt+0x1d5c>
   135d0:	ldr	r4, [r4, #4]
   135d4:	ldr	r2, [r4, #4]
   135d8:	cmp	r2, #0
   135dc:	beq	13674 <__assert_fail@plt+0x1dc4>
   135e0:	ldr	r3, [r2]
   135e4:	cmp	r3, r5
   135e8:	beq	1360c <__assert_fail@plt+0x1d5c>
   135ec:	mov	r1, r3
   135f0:	mov	r0, r5
   135f4:	ldr	r3, [r6, #28]
   135f8:	blx	r3
   135fc:	cmp	r0, #0
   13600:	beq	135d0 <__assert_fail@plt+0x1d20>
   13604:	ldr	r2, [r4, #4]
   13608:	ldr	r3, [r2]
   1360c:	cmp	r7, #0
   13610:	beq	1366c <__assert_fail@plt+0x1dbc>
   13614:	ldr	r0, [r2, #4]
   13618:	mov	r1, #0
   1361c:	str	r0, [r4, #4]
   13620:	str	r1, [r2]
   13624:	ldr	r1, [r6, #36]	; 0x24
   13628:	mov	r0, r3
   1362c:	str	r1, [r2, #4]
   13630:	str	r2, [r6, #36]	; 0x24
   13634:	pop	{r4, r5, r6, r7, r8, pc}
   13638:	mov	r3, r1
   1363c:	cmp	r7, #0
   13640:	beq	1366c <__assert_fail@plt+0x1dbc>
   13644:	ldr	r2, [r4, #4]
   13648:	cmp	r2, #0
   1364c:	movne	ip, #0
   13650:	ldmne	r2, {r0, r1}
   13654:	streq	r2, [r4]
   13658:	stmne	r4, {r0, r1}
   1365c:	strne	ip, [r2]
   13660:	ldrne	r1, [r6, #36]	; 0x24
   13664:	strne	r1, [r2, #4]
   13668:	strne	r2, [r6, #36]	; 0x24
   1366c:	mov	r0, r3
   13670:	pop	{r4, r5, r6, r7, r8, pc}
   13674:	mov	r3, #0
   13678:	mov	r0, r3
   1367c:	pop	{r4, r5, r6, r7, r8, pc}
   13680:	ldr	r2, [pc, #164]	; 1372c <__assert_fail@plt+0x1e7c>
   13684:	ldr	r3, [r0]
   13688:	cmp	r3, r2
   1368c:	beq	13714 <__assert_fail@plt+0x1e64>
   13690:	vldr	s15, [r3, #8]
   13694:	vldr	s14, [pc, #128]	; 1371c <__assert_fail@plt+0x1e6c>
   13698:	vcmpe.f32	s15, s14
   1369c:	vmrs	APSR_nzcv, fpscr
   136a0:	ble	13708 <__assert_fail@plt+0x1e58>
   136a4:	vldr	s13, [pc, #116]	; 13720 <__assert_fail@plt+0x1e70>
   136a8:	vcmpe.f32	s15, s13
   136ac:	vmrs	APSR_nzcv, fpscr
   136b0:	bpl	13708 <__assert_fail@plt+0x1e58>
   136b4:	vldr	s13, [pc, #104]	; 13724 <__assert_fail@plt+0x1e74>
   136b8:	vldr	s12, [r3, #12]
   136bc:	vcmpe.f32	s12, s13
   136c0:	vmrs	APSR_nzcv, fpscr
   136c4:	ble	13708 <__assert_fail@plt+0x1e58>
   136c8:	vldr	s13, [r3]
   136cc:	vcmpe.f32	s13, #0.0
   136d0:	vmrs	APSR_nzcv, fpscr
   136d4:	blt	13708 <__assert_fail@plt+0x1e58>
   136d8:	vadd.f32	s14, s13, s14
   136dc:	vldr	s13, [r3, #4]
   136e0:	vcmpe.f32	s14, s13
   136e4:	vmrs	APSR_nzcv, fpscr
   136e8:	bpl	13708 <__assert_fail@plt+0x1e58>
   136ec:	vldr	s12, [pc, #52]	; 13728 <__assert_fail@plt+0x1e78>
   136f0:	vcmpe.f32	s13, s12
   136f4:	vmrs	APSR_nzcv, fpscr
   136f8:	bhi	13708 <__assert_fail@plt+0x1e58>
   136fc:	vcmpe.f32	s15, s14
   13700:	vmrs	APSR_nzcv, fpscr
   13704:	bgt	13714 <__assert_fail@plt+0x1e64>
   13708:	str	r2, [r0]
   1370c:	mov	r0, #0
   13710:	bx	lr
   13714:	mov	r0, #1
   13718:	bx	lr
   1371c:	stclcc	12, cr12, [ip, #820]	; 0x334
   13720:	svccc	0x00666666
   13724:	svccc	0x008ccccd
   13728:	svccc	0x00800000
   1372c:	andeq	fp, r1, ip, asr fp
   13730:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13734:	ldr	r3, [r1, #4]
   13738:	ldr	r6, [r1]
   1373c:	cmp	r6, r3
   13740:	bcs	13808 <__assert_fail@plt+0x1f58>
   13744:	mov	r8, r2
   13748:	mov	r5, r0
   1374c:	mov	r7, r1
   13750:	add	r6, r6, #8
   13754:	mov	r9, #0
   13758:	b	13768 <__assert_fail@plt+0x1eb8>
   1375c:	cmp	r3, r6
   13760:	add	r6, r6, #8
   13764:	bls	13808 <__assert_fail@plt+0x1f58>
   13768:	ldr	sl, [r6, #-8]
   1376c:	cmp	sl, #0
   13770:	beq	1375c <__assert_fail@plt+0x1eac>
   13774:	ldr	r4, [r6, #-4]
   13778:	cmp	r4, #0
   1377c:	bne	1379c <__assert_fail@plt+0x1eec>
   13780:	b	137ec <__assert_fail@plt+0x1f3c>
   13784:	ldr	r2, [r0, #4]
   13788:	cmp	r3, #0
   1378c:	str	r2, [r4, #4]
   13790:	str	r4, [r0, #4]
   13794:	mov	r4, r3
   13798:	beq	137e8 <__assert_fail@plt+0x1f38>
   1379c:	ldr	sl, [r4]
   137a0:	mov	r0, r5
   137a4:	mov	r1, sl
   137a8:	bl	13534 <__assert_fail@plt+0x1c84>
   137ac:	ldr	r3, [r4, #4]
   137b0:	ldr	r2, [r0]
   137b4:	cmp	r2, #0
   137b8:	bne	13784 <__assert_fail@plt+0x1ed4>
   137bc:	ldr	r1, [r5, #12]
   137c0:	str	sl, [r0]
   137c4:	add	r1, r1, #1
   137c8:	str	r1, [r5, #12]
   137cc:	str	r2, [r4]
   137d0:	ldr	r2, [r5, #36]	; 0x24
   137d4:	cmp	r3, #0
   137d8:	str	r2, [r4, #4]
   137dc:	str	r4, [r5, #36]	; 0x24
   137e0:	mov	r4, r3
   137e4:	bne	1379c <__assert_fail@plt+0x1eec>
   137e8:	ldr	sl, [r6, #-8]
   137ec:	cmp	r8, #0
   137f0:	str	r9, [r6, #-4]
   137f4:	beq	13810 <__assert_fail@plt+0x1f60>
   137f8:	ldr	r3, [r7, #4]
   137fc:	cmp	r3, r6
   13800:	add	r6, r6, #8
   13804:	bhi	13768 <__assert_fail@plt+0x1eb8>
   13808:	mov	r0, #1
   1380c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13810:	mov	r1, sl
   13814:	mov	r0, r5
   13818:	bl	13534 <__assert_fail@plt+0x1c84>
   1381c:	ldr	r3, [r0]
   13820:	mov	r4, r0
   13824:	cmp	r3, #0
   13828:	beq	13868 <__assert_fail@plt+0x1fb8>
   1382c:	ldr	r0, [r5, #36]	; 0x24
   13830:	cmp	r0, #0
   13834:	beq	1387c <__assert_fail@plt+0x1fcc>
   13838:	ldr	r3, [r0, #4]
   1383c:	str	r3, [r5, #36]	; 0x24
   13840:	ldr	r3, [r4, #4]
   13844:	str	sl, [r0]
   13848:	str	r3, [r0, #4]
   1384c:	str	r0, [r4, #4]
   13850:	ldr	r2, [r7, #12]
   13854:	str	r9, [r6, #-8]
   13858:	sub	r2, r2, #1
   1385c:	ldr	r3, [r7, #4]
   13860:	str	r2, [r7, #12]
   13864:	b	1375c <__assert_fail@plt+0x1eac>
   13868:	ldr	r3, [r5, #12]
   1386c:	str	sl, [r0]
   13870:	add	r3, r3, #1
   13874:	str	r3, [r5, #12]
   13878:	b	13850 <__assert_fail@plt+0x1fa0>
   1387c:	mov	r0, #8
   13880:	bl	11664 <malloc@plt>
   13884:	cmp	r0, #0
   13888:	bne	13840 <__assert_fail@plt+0x1f90>
   1388c:	mov	r0, r8
   13890:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13894:	ldr	r0, [r0, #8]
   13898:	bx	lr
   1389c:	ldr	r0, [r0, #12]
   138a0:	bx	lr
   138a4:	ldr	r0, [r0, #16]
   138a8:	bx	lr
   138ac:	ldm	r0, {r1, r3}
   138b0:	cmp	r1, r3
   138b4:	bcs	1391c <__assert_fail@plt+0x206c>
   138b8:	sub	ip, r3, #1
   138bc:	sub	ip, ip, r1
   138c0:	add	r3, r1, #16
   138c4:	bic	ip, ip, #7
   138c8:	add	ip, ip, r3
   138cc:	add	r1, r1, #8
   138d0:	mov	r0, #0
   138d4:	b	138e4 <__assert_fail@plt+0x2034>
   138d8:	add	r1, r1, #8
   138dc:	cmp	r1, ip
   138e0:	bxeq	lr
   138e4:	ldr	r3, [r1, #-8]
   138e8:	cmp	r3, #0
   138ec:	beq	138d8 <__assert_fail@plt+0x2028>
   138f0:	ldr	r3, [r1, #-4]
   138f4:	mov	r2, #1
   138f8:	cmp	r3, #0
   138fc:	beq	13910 <__assert_fail@plt+0x2060>
   13900:	ldr	r3, [r3, #4]
   13904:	add	r2, r2, #1
   13908:	cmp	r3, #0
   1390c:	bne	13900 <__assert_fail@plt+0x2050>
   13910:	cmp	r0, r2
   13914:	movcc	r0, r2
   13918:	b	138d8 <__assert_fail@plt+0x2028>
   1391c:	mov	r0, #0
   13920:	bx	lr
   13924:	ldm	r0, {r1, r3}
   13928:	push	{lr}		; (str lr, [sp, #-4]!)
   1392c:	cmp	r1, r3
   13930:	bcs	139c0 <__assert_fail@plt+0x2110>
   13934:	sub	ip, r3, #1
   13938:	sub	ip, ip, r1
   1393c:	add	r3, r1, #16
   13940:	bic	ip, ip, #7
   13944:	mov	r2, #0
   13948:	add	ip, ip, r3
   1394c:	add	r1, r1, #8
   13950:	mov	lr, r2
   13954:	b	13964 <__assert_fail@plt+0x20b4>
   13958:	add	r1, r1, #8
   1395c:	cmp	r1, ip
   13960:	beq	139a0 <__assert_fail@plt+0x20f0>
   13964:	ldr	r3, [r1, #-8]
   13968:	cmp	r3, #0
   1396c:	beq	13958 <__assert_fail@plt+0x20a8>
   13970:	ldr	r3, [r1, #-4]
   13974:	add	lr, lr, #1
   13978:	cmp	r3, #0
   1397c:	add	r2, r2, #1
   13980:	beq	13958 <__assert_fail@plt+0x20a8>
   13984:	ldr	r3, [r3, #4]
   13988:	add	r2, r2, #1
   1398c:	cmp	r3, #0
   13990:	bne	13984 <__assert_fail@plt+0x20d4>
   13994:	add	r1, r1, #8
   13998:	cmp	r1, ip
   1399c:	bne	13964 <__assert_fail@plt+0x20b4>
   139a0:	ldr	r3, [r0, #12]
   139a4:	cmp	r3, lr
   139a8:	ldreq	r0, [r0, #16]
   139ac:	subeq	r0, r0, r2
   139b0:	clzeq	r0, r0
   139b4:	lsreq	r0, r0, #5
   139b8:	movne	r0, #0
   139bc:	pop	{pc}		; (ldr pc, [sp], #4)
   139c0:	mov	r2, #0
   139c4:	mov	lr, r2
   139c8:	b	139a0 <__assert_fail@plt+0x20f0>
   139cc:	push	{r4, r5, r6, r7, lr}
   139d0:	mov	r4, r1
   139d4:	ldr	r2, [r0]
   139d8:	ldr	r1, [r0, #4]
   139dc:	sub	sp, sp, #12
   139e0:	cmp	r2, r1
   139e4:	ldr	r3, [r0, #16]
   139e8:	ldrd	r6, [r0, #8]
   139ec:	bcs	13ad0 <__assert_fail@plt+0x2220>
   139f0:	sub	ip, r1, #1
   139f4:	sub	ip, ip, r2
   139f8:	bic	ip, ip, #7
   139fc:	add	r1, r2, #16
   13a00:	add	ip, ip, r1
   13a04:	add	r0, r2, #8
   13a08:	mov	r5, #0
   13a0c:	b	13a1c <__assert_fail@plt+0x216c>
   13a10:	add	r0, r0, #8
   13a14:	cmp	r0, ip
   13a18:	beq	13a5c <__assert_fail@plt+0x21ac>
   13a1c:	ldr	r2, [r0, #-8]
   13a20:	cmp	r2, #0
   13a24:	beq	13a10 <__assert_fail@plt+0x2160>
   13a28:	ldr	r2, [r0, #-4]
   13a2c:	mov	r1, #1
   13a30:	cmp	r2, #0
   13a34:	beq	13a48 <__assert_fail@plt+0x2198>
   13a38:	ldr	r2, [r2, #4]
   13a3c:	add	r1, r1, #1
   13a40:	cmp	r2, #0
   13a44:	bne	13a38 <__assert_fail@plt+0x2188>
   13a48:	cmp	r5, r1
   13a4c:	add	r0, r0, #8
   13a50:	movcc	r5, r1
   13a54:	cmp	r0, ip
   13a58:	bne	13a1c <__assert_fail@plt+0x216c>
   13a5c:	ldr	r2, [pc, #124]	; 13ae0 <__assert_fail@plt+0x2230>
   13a60:	mov	r1, #1
   13a64:	mov	r0, r4
   13a68:	bl	11748 <__fprintf_chk@plt>
   13a6c:	mov	r3, r6
   13a70:	ldr	r2, [pc, #108]	; 13ae4 <__assert_fail@plt+0x2234>
   13a74:	mov	r1, #1
   13a78:	mov	r0, r4
   13a7c:	bl	11748 <__fprintf_chk@plt>
   13a80:	vmov	s15, r7
   13a84:	vldr	d5, [pc, #76]	; 13ad8 <__assert_fail@plt+0x2228>
   13a88:	mov	r3, r7
   13a8c:	ldr	r2, [pc, #84]	; 13ae8 <__assert_fail@plt+0x2238>
   13a90:	vcvt.f64.u32	d6, s15
   13a94:	vmov	s15, r6
   13a98:	mov	r1, #1
   13a9c:	mov	r0, r4
   13aa0:	vcvt.f64.u32	d7, s15
   13aa4:	vmul.f64	d6, d6, d5
   13aa8:	vdiv.f64	d5, d6, d7
   13aac:	vstr	d5, [sp]
   13ab0:	bl	11748 <__fprintf_chk@plt>
   13ab4:	mov	r3, r5
   13ab8:	mov	r0, r4
   13abc:	ldr	r2, [pc, #40]	; 13aec <__assert_fail@plt+0x223c>
   13ac0:	mov	r1, #1
   13ac4:	add	sp, sp, #12
   13ac8:	pop	{r4, r5, r6, r7, lr}
   13acc:	b	11748 <__fprintf_chk@plt>
   13ad0:	mov	r5, #0
   13ad4:	b	13a5c <__assert_fail@plt+0x21ac>
   13ad8:	andeq	r0, r0, r0
   13adc:	subsmi	r0, r9, r0
   13ae0:	andeq	fp, r1, r0, ror fp
   13ae4:	andeq	fp, r1, r8, lsl #23
   13ae8:	andeq	fp, r1, r0, lsr #23
   13aec:	andeq	fp, r1, r4, asr #23
   13af0:	push	{r4, r5, r6, lr}
   13af4:	mov	r6, r0
   13af8:	mov	r5, r1
   13afc:	bl	13534 <__assert_fail@plt+0x1c84>
   13b00:	ldr	r3, [r0]
   13b04:	cmp	r3, #0
   13b08:	beq	13b44 <__assert_fail@plt+0x2294>
   13b0c:	mov	r4, r0
   13b10:	b	13b18 <__assert_fail@plt+0x2268>
   13b14:	ldr	r3, [r4]
   13b18:	cmp	r3, r5
   13b1c:	mov	r1, r3
   13b20:	mov	r0, r5
   13b24:	beq	13b50 <__assert_fail@plt+0x22a0>
   13b28:	ldr	r3, [r6, #28]
   13b2c:	blx	r3
   13b30:	cmp	r0, #0
   13b34:	bne	13b4c <__assert_fail@plt+0x229c>
   13b38:	ldr	r4, [r4, #4]
   13b3c:	cmp	r4, #0
   13b40:	bne	13b14 <__assert_fail@plt+0x2264>
   13b44:	mov	r0, #0
   13b48:	pop	{r4, r5, r6, pc}
   13b4c:	ldr	r5, [r4]
   13b50:	mov	r0, r5
   13b54:	pop	{r4, r5, r6, pc}
   13b58:	ldr	r3, [r0, #16]
   13b5c:	cmp	r3, #0
   13b60:	beq	13bb0 <__assert_fail@plt+0x2300>
   13b64:	ldr	r3, [r0]
   13b68:	ldr	r2, [r0, #4]
   13b6c:	cmp	r3, r2
   13b70:	bcs	13ba8 <__assert_fail@plt+0x22f8>
   13b74:	ldr	r0, [r3]
   13b78:	cmp	r0, #0
   13b7c:	bxne	lr
   13b80:	sub	r2, r2, #1
   13b84:	sub	r2, r2, r3
   13b88:	bic	r2, r2, #7
   13b8c:	add	r2, r3, r2
   13b90:	b	13ba0 <__assert_fail@plt+0x22f0>
   13b94:	ldr	r0, [r3, #8]!
   13b98:	cmp	r0, #0
   13b9c:	bxne	lr
   13ba0:	cmp	r3, r2
   13ba4:	bne	13b94 <__assert_fail@plt+0x22e4>
   13ba8:	push	{r4, lr}
   13bac:	bl	1185c <abort@plt>
   13bb0:	mov	r0, r3
   13bb4:	bx	lr
   13bb8:	push	{r4, r5, r6, lr}
   13bbc:	mov	r5, r0
   13bc0:	mov	r4, r1
   13bc4:	bl	13534 <__assert_fail@plt+0x1c84>
   13bc8:	mov	r2, r0
   13bcc:	mov	r3, r0
   13bd0:	b	13bdc <__assert_fail@plt+0x232c>
   13bd4:	cmp	r3, #0
   13bd8:	beq	13bf0 <__assert_fail@plt+0x2340>
   13bdc:	ldm	r3, {r1, r3}
   13be0:	cmp	r1, r4
   13be4:	bne	13bd4 <__assert_fail@plt+0x2324>
   13be8:	cmp	r3, #0
   13bec:	bne	13c18 <__assert_fail@plt+0x2368>
   13bf0:	ldr	r3, [r5, #4]
   13bf4:	b	13c04 <__assert_fail@plt+0x2354>
   13bf8:	ldr	r0, [r2]
   13bfc:	cmp	r0, #0
   13c00:	popne	{r4, r5, r6, pc}
   13c04:	add	r2, r2, #8
   13c08:	cmp	r3, r2
   13c0c:	bhi	13bf8 <__assert_fail@plt+0x2348>
   13c10:	mov	r0, #0
   13c14:	pop	{r4, r5, r6, pc}
   13c18:	ldr	r0, [r3]
   13c1c:	pop	{r4, r5, r6, pc}
   13c20:	push	{r4, r5, lr}
   13c24:	ldm	r0, {r5, lr}
   13c28:	cmp	lr, r5
   13c2c:	bls	13cb0 <__assert_fail@plt+0x2400>
   13c30:	mov	ip, #0
   13c34:	ldr	r3, [r5]
   13c38:	cmp	r3, #0
   13c3c:	bne	13c58 <__assert_fail@plt+0x23a8>
   13c40:	add	r5, r5, #8
   13c44:	cmp	lr, r5
   13c48:	bhi	13c34 <__assert_fail@plt+0x2384>
   13c4c:	mov	r2, ip
   13c50:	mov	r0, r2
   13c54:	pop	{r4, r5, pc}
   13c58:	cmp	r2, ip
   13c5c:	bls	13c4c <__assert_fail@plt+0x239c>
   13c60:	str	r3, [r1, ip, lsl #2]
   13c64:	ldr	r3, [r5, #4]
   13c68:	add	r4, ip, #1
   13c6c:	cmp	r3, #0
   13c70:	add	lr, r1, ip, lsl #2
   13c74:	beq	13ca4 <__assert_fail@plt+0x23f4>
   13c78:	mov	ip, r4
   13c7c:	cmp	r2, ip
   13c80:	beq	13c50 <__assert_fail@plt+0x23a0>
   13c84:	ldr	r4, [r3]
   13c88:	add	ip, ip, #1
   13c8c:	str	r4, [lr, #4]!
   13c90:	ldr	r3, [r3, #4]
   13c94:	cmp	r3, #0
   13c98:	bne	13c7c <__assert_fail@plt+0x23cc>
   13c9c:	ldr	lr, [r0, #4]
   13ca0:	b	13c40 <__assert_fail@plt+0x2390>
   13ca4:	ldr	lr, [r0, #4]
   13ca8:	mov	ip, r4
   13cac:	b	13c40 <__assert_fail@plt+0x2390>
   13cb0:	mov	r2, #0
   13cb4:	b	13c50 <__assert_fail@plt+0x23a0>
   13cb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cbc:	ldr	r3, [r0, #4]
   13cc0:	ldr	r8, [r0]
   13cc4:	cmp	r3, r8
   13cc8:	bls	13d30 <__assert_fail@plt+0x2480>
   13ccc:	mov	r7, r2
   13cd0:	mov	r6, r1
   13cd4:	mov	r9, r0
   13cd8:	mov	r5, #0
   13cdc:	ldr	r0, [r8]
   13ce0:	cmp	r0, #0
   13ce4:	bne	13cfc <__assert_fail@plt+0x244c>
   13ce8:	add	r8, r8, #8
   13cec:	cmp	r3, r8
   13cf0:	bhi	13cdc <__assert_fail@plt+0x242c>
   13cf4:	mov	r0, r5
   13cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cfc:	mov	r4, r8
   13d00:	b	13d08 <__assert_fail@plt+0x2458>
   13d04:	ldr	r0, [r4]
   13d08:	mov	r1, r7
   13d0c:	blx	r6
   13d10:	cmp	r0, #0
   13d14:	beq	13cf4 <__assert_fail@plt+0x2444>
   13d18:	ldr	r4, [r4, #4]
   13d1c:	add	r5, r5, #1
   13d20:	cmp	r4, #0
   13d24:	bne	13d04 <__assert_fail@plt+0x2454>
   13d28:	ldr	r3, [r9, #4]
   13d2c:	b	13ce8 <__assert_fail@plt+0x2438>
   13d30:	mov	r5, #0
   13d34:	b	13cf4 <__assert_fail@plt+0x2444>
   13d38:	push	{r4, r5, r6, lr}
   13d3c:	mov	r4, r0
   13d40:	ldrb	r0, [r0]
   13d44:	cmp	r0, #0
   13d48:	beq	13d78 <__assert_fail@plt+0x24c8>
   13d4c:	mov	r5, r1
   13d50:	mov	r1, #0
   13d54:	rsb	r1, r1, r1, lsl #5
   13d58:	add	r0, r1, r0
   13d5c:	mov	r1, r5
   13d60:	bl	1b01c <fts_children@@Base+0xc00>
   13d64:	ldrb	r0, [r4, #1]!
   13d68:	cmp	r0, #0
   13d6c:	bne	13d54 <__assert_fail@plt+0x24a4>
   13d70:	mov	r0, r1
   13d74:	pop	{r4, r5, r6, pc}
   13d78:	mov	r1, r0
   13d7c:	mov	r0, r1
   13d80:	pop	{r4, r5, r6, pc}
   13d84:	push	{lr}		; (str lr, [sp, #-4]!)
   13d88:	mov	ip, r0
   13d8c:	ldr	lr, [pc, #16]	; 13da4 <__assert_fail@plt+0x24f4>
   13d90:	ldm	lr!, {r0, r1, r2, r3}
   13d94:	ldr	lr, [lr]
   13d98:	stmia	ip!, {r0, r1, r2, r3}
   13d9c:	str	lr, [ip]
   13da0:	pop	{pc}		; (ldr pc, [sp], #4)
   13da4:	andeq	fp, r1, ip, asr fp
   13da8:	push	{r4, r5, r6, r7, r8, lr}
   13dac:	sub	sp, sp, #8
   13db0:	cmp	r2, #0
   13db4:	ldr	ip, [pc, #300]	; 13ee8 <__assert_fail@plt+0x2638>
   13db8:	str	r0, [sp, #4]
   13dbc:	ldr	r5, [pc, #296]	; 13eec <__assert_fail@plt+0x263c>
   13dc0:	mov	r0, #40	; 0x28
   13dc4:	movne	r5, r2
   13dc8:	cmp	r3, #0
   13dcc:	movne	r8, r3
   13dd0:	moveq	r8, ip
   13dd4:	mov	r6, r1
   13dd8:	bl	11664 <malloc@plt>
   13ddc:	subs	r4, r0, #0
   13de0:	beq	13eac <__assert_fail@plt+0x25fc>
   13de4:	cmp	r6, #0
   13de8:	add	r0, r4, #20
   13dec:	beq	13e88 <__assert_fail@plt+0x25d8>
   13df0:	str	r6, [r4, #20]
   13df4:	bl	13680 <__assert_fail@plt+0x1dd0>
   13df8:	cmp	r0, #0
   13dfc:	beq	13ea0 <__assert_fail@plt+0x25f0>
   13e00:	ldrb	r3, [r6, #16]
   13e04:	cmp	r3, #0
   13e08:	vldreq	s13, [r6, #8]
   13e0c:	beq	13eb8 <__assert_fail@plt+0x2608>
   13e10:	ldr	r0, [sp, #4]
   13e14:	bl	13478 <__assert_fail@plt+0x1bc8>
   13e18:	lsrs	r3, r0, #30
   13e1c:	movne	r7, #1
   13e20:	moveq	r7, #0
   13e24:	tst	r0, #536870912	; 0x20000000
   13e28:	mov	r6, r0
   13e2c:	bne	13ea0 <__assert_fail@plt+0x25f0>
   13e30:	cmp	r7, #0
   13e34:	bne	13ea0 <__assert_fail@plt+0x25f0>
   13e38:	cmp	r0, #0
   13e3c:	str	r0, [r4, #8]
   13e40:	beq	13ea0 <__assert_fail@plt+0x25f0>
   13e44:	mov	r1, #8
   13e48:	bl	114b4 <calloc@plt>
   13e4c:	cmp	r0, #0
   13e50:	str	r0, [r4]
   13e54:	beq	13ea0 <__assert_fail@plt+0x25f0>
   13e58:	ldr	r3, [sp, #32]
   13e5c:	add	r0, r0, r6, lsl #3
   13e60:	str	r0, [r4, #4]
   13e64:	str	r7, [r4, #12]
   13e68:	mov	r0, r4
   13e6c:	str	r7, [r4, #16]
   13e70:	str	r5, [r4, #24]
   13e74:	str	r8, [r4, #28]
   13e78:	str	r3, [r4, #32]
   13e7c:	str	r7, [r4, #36]	; 0x24
   13e80:	add	sp, sp, #8
   13e84:	pop	{r4, r5, r6, r7, r8, pc}
   13e88:	ldr	r3, [pc, #96]	; 13ef0 <__assert_fail@plt+0x2640>
   13e8c:	str	r3, [r4, #20]
   13e90:	bl	13680 <__assert_fail@plt+0x1dd0>
   13e94:	cmp	r0, #0
   13e98:	vldrne	s13, [pc, #64]	; 13ee0 <__assert_fail@plt+0x2630>
   13e9c:	bne	13eb8 <__assert_fail@plt+0x2608>
   13ea0:	mov	r0, r4
   13ea4:	bl	11520 <free@plt>
   13ea8:	mov	r4, #0
   13eac:	mov	r0, r4
   13eb0:	add	sp, sp, #8
   13eb4:	pop	{r4, r5, r6, r7, r8, pc}
   13eb8:	vldr	s15, [sp, #4]
   13ebc:	vldr	s14, [pc, #32]	; 13ee4 <__assert_fail@plt+0x2634>
   13ec0:	vcvt.f32.u32	s12, s15
   13ec4:	vdiv.f32	s15, s12, s13
   13ec8:	vcmpe.f32	s15, s14
   13ecc:	vmrs	APSR_nzcv, fpscr
   13ed0:	bge	13ea0 <__assert_fail@plt+0x25f0>
   13ed4:	vcvt.u32.f32	s15, s15
   13ed8:	vstr	s15, [sp, #4]
   13edc:	b	13e10 <__assert_fail@plt+0x2560>
   13ee0:	svccc	0x004ccccd
   13ee4:	svcmi	0x00800000
   13ee8:	andeq	r3, r1, r4, lsr #10
   13eec:	andeq	r3, r1, r0, lsl r5
   13ef0:	andeq	fp, r1, ip, asr fp
   13ef4:	push	{r4, r5, r6, r7, r8, lr}
   13ef8:	mov	r5, r0
   13efc:	ldr	r6, [r0]
   13f00:	ldr	r2, [r0, #4]
   13f04:	cmp	r6, r2
   13f08:	addcc	r6, r6, #8
   13f0c:	movcc	r7, #0
   13f10:	bcc	13f24 <__assert_fail@plt+0x2674>
   13f14:	b	13f98 <__assert_fail@plt+0x26e8>
   13f18:	cmp	r2, r6
   13f1c:	add	r6, r6, #8
   13f20:	bls	13f98 <__assert_fail@plt+0x26e8>
   13f24:	ldr	r3, [r6, #-8]
   13f28:	cmp	r3, #0
   13f2c:	beq	13f18 <__assert_fail@plt+0x2668>
   13f30:	ldr	r4, [r6, #-4]
   13f34:	ldr	r2, [r5, #32]
   13f38:	cmp	r4, #0
   13f3c:	beq	13f70 <__assert_fail@plt+0x26c0>
   13f40:	cmp	r2, #0
   13f44:	beq	13f54 <__assert_fail@plt+0x26a4>
   13f48:	ldr	r0, [r4]
   13f4c:	blx	r2
   13f50:	ldr	r2, [r5, #32]
   13f54:	ldr	r3, [r4, #4]
   13f58:	ldr	r1, [r5, #36]	; 0x24
   13f5c:	str	r7, [r4]
   13f60:	str	r1, [r4, #4]
   13f64:	str	r4, [r5, #36]	; 0x24
   13f68:	subs	r4, r3, #0
   13f6c:	bne	13f40 <__assert_fail@plt+0x2690>
   13f70:	cmp	r2, #0
   13f74:	beq	13f80 <__assert_fail@plt+0x26d0>
   13f78:	ldr	r0, [r6, #-8]
   13f7c:	blx	r2
   13f80:	str	r7, [r6, #-8]
   13f84:	str	r7, [r6, #-4]
   13f88:	ldr	r2, [r5, #4]
   13f8c:	cmp	r2, r6
   13f90:	add	r6, r6, #8
   13f94:	bhi	13f24 <__assert_fail@plt+0x2674>
   13f98:	mov	r3, #0
   13f9c:	str	r3, [r5, #12]
   13fa0:	str	r3, [r5, #16]
   13fa4:	pop	{r4, r5, r6, r7, r8, pc}
   13fa8:	ldr	r3, [r0, #32]
   13fac:	push	{r4, r5, r6, lr}
   13fb0:	cmp	r3, #0
   13fb4:	mov	r6, r0
   13fb8:	ldr	r5, [r0]
   13fbc:	ldr	r3, [r0, #4]
   13fc0:	beq	14028 <__assert_fail@plt+0x2778>
   13fc4:	ldr	r2, [r0, #16]
   13fc8:	cmp	r2, #0
   13fcc:	beq	14028 <__assert_fail@plt+0x2778>
   13fd0:	cmp	r5, r3
   13fd4:	bcc	13fe8 <__assert_fail@plt+0x2738>
   13fd8:	b	1405c <__assert_fail@plt+0x27ac>
   13fdc:	add	r5, r5, #8
   13fe0:	cmp	r3, r5
   13fe4:	bls	14024 <__assert_fail@plt+0x2774>
   13fe8:	ldr	r0, [r5]
   13fec:	cmp	r0, #0
   13ff0:	beq	13fdc <__assert_fail@plt+0x272c>
   13ff4:	mov	r4, r5
   13ff8:	b	14000 <__assert_fail@plt+0x2750>
   13ffc:	ldr	r0, [r4]
   14000:	ldr	r3, [r6, #32]
   14004:	blx	r3
   14008:	ldr	r4, [r4, #4]
   1400c:	cmp	r4, #0
   14010:	bne	13ffc <__assert_fail@plt+0x274c>
   14014:	ldr	r3, [r6, #4]
   14018:	add	r5, r5, #8
   1401c:	cmp	r3, r5
   14020:	bhi	13fe8 <__assert_fail@plt+0x2738>
   14024:	ldr	r5, [r6]
   14028:	cmp	r5, r3
   1402c:	bcs	1405c <__assert_fail@plt+0x27ac>
   14030:	ldr	r0, [r5, #4]
   14034:	cmp	r0, #0
   14038:	beq	14050 <__assert_fail@plt+0x27a0>
   1403c:	ldr	r4, [r0, #4]
   14040:	bl	11520 <free@plt>
   14044:	subs	r0, r4, #0
   14048:	bne	1403c <__assert_fail@plt+0x278c>
   1404c:	ldr	r3, [r6, #4]
   14050:	add	r5, r5, #8
   14054:	cmp	r3, r5
   14058:	bhi	14030 <__assert_fail@plt+0x2780>
   1405c:	ldr	r0, [r6, #36]	; 0x24
   14060:	cmp	r0, #0
   14064:	beq	14078 <__assert_fail@plt+0x27c8>
   14068:	ldr	r4, [r0, #4]
   1406c:	bl	11520 <free@plt>
   14070:	subs	r0, r4, #0
   14074:	bne	14068 <__assert_fail@plt+0x27b8>
   14078:	ldr	r0, [r6]
   1407c:	bl	11520 <free@plt>
   14080:	mov	r0, r6
   14084:	pop	{r4, r5, r6, lr}
   14088:	b	11520 <free@plt>
   1408c:	push	{r4, r5, r6, r7, r8, lr}
   14090:	sub	sp, sp, #56	; 0x38
   14094:	ldr	r8, [r0, #20]
   14098:	ldr	r7, [pc, #392]	; 14228 <__assert_fail@plt+0x2978>
   1409c:	mov	r6, r0
   140a0:	ldrb	r3, [r8, #16]
   140a4:	ldr	r2, [r7]
   140a8:	str	r1, [sp, #4]
   140ac:	cmp	r3, #0
   140b0:	str	r2, [sp, #52]	; 0x34
   140b4:	bne	140e0 <__assert_fail@plt+0x2830>
   140b8:	vmov	s15, r1
   140bc:	vldr	s13, [r8, #8]
   140c0:	vldr	s14, [pc, #348]	; 14224 <__assert_fail@plt+0x2974>
   140c4:	vcvt.f32.u32	s12, s15
   140c8:	vdiv.f32	s15, s12, s13
   140cc:	vcmpe.f32	s15, s14
   140d0:	vmrs	APSR_nzcv, fpscr
   140d4:	vcvtlt.u32.f32	s15, s15
   140d8:	vstrlt	s15, [sp, #4]
   140dc:	bge	14110 <__assert_fail@plt+0x2860>
   140e0:	ldr	r0, [sp, #4]
   140e4:	bl	13478 <__assert_fail@plt+0x1bc8>
   140e8:	lsrs	r3, r0, #30
   140ec:	movne	r4, #1
   140f0:	moveq	r4, #0
   140f4:	tst	r0, #536870912	; 0x20000000
   140f8:	movne	r4, #1
   140fc:	cmp	r0, #0
   14100:	moveq	r4, #1
   14104:	cmp	r4, #0
   14108:	mov	r5, r0
   1410c:	beq	14130 <__assert_fail@plt+0x2880>
   14110:	mov	r4, #0
   14114:	ldr	r2, [sp, #52]	; 0x34
   14118:	ldr	r3, [r7]
   1411c:	mov	r0, r4
   14120:	cmp	r2, r3
   14124:	bne	1421c <__assert_fail@plt+0x296c>
   14128:	add	sp, sp, #56	; 0x38
   1412c:	pop	{r4, r5, r6, r7, r8, pc}
   14130:	ldr	r3, [r6, #8]
   14134:	cmp	r3, r0
   14138:	beq	141e4 <__assert_fail@plt+0x2934>
   1413c:	mov	r1, #8
   14140:	bl	114b4 <calloc@plt>
   14144:	cmp	r0, #0
   14148:	str	r0, [sp, #12]
   1414c:	beq	14110 <__assert_fail@plt+0x2860>
   14150:	add	r0, r0, r5, lsl #3
   14154:	ldr	r1, [r6, #32]
   14158:	str	r0, [sp, #16]
   1415c:	ldr	r0, [r6, #28]
   14160:	ldr	ip, [r6, #24]
   14164:	ldr	r3, [r6, #36]	; 0x24
   14168:	mov	r2, r4
   1416c:	str	r0, [sp, #40]	; 0x28
   14170:	str	r1, [sp, #44]	; 0x2c
   14174:	add	r0, sp, #12
   14178:	mov	r1, r6
   1417c:	str	r4, [sp, #24]
   14180:	str	r4, [sp, #28]
   14184:	str	r5, [sp, #20]
   14188:	str	r8, [sp, #32]
   1418c:	str	ip, [sp, #36]	; 0x24
   14190:	str	r3, [sp, #48]	; 0x30
   14194:	bl	13730 <__assert_fail@plt+0x1e80>
   14198:	subs	r4, r0, #0
   1419c:	bne	141ec <__assert_fail@plt+0x293c>
   141a0:	ldr	r3, [sp, #48]	; 0x30
   141a4:	mov	r2, #1
   141a8:	str	r3, [r6, #36]	; 0x24
   141ac:	add	r1, sp, #12
   141b0:	mov	r0, r6
   141b4:	bl	13730 <__assert_fail@plt+0x1e80>
   141b8:	cmp	r0, #0
   141bc:	beq	14220 <__assert_fail@plt+0x2970>
   141c0:	add	r1, sp, #12
   141c4:	mov	r0, r6
   141c8:	mov	r2, r4
   141cc:	bl	13730 <__assert_fail@plt+0x1e80>
   141d0:	cmp	r0, #0
   141d4:	beq	14220 <__assert_fail@plt+0x2970>
   141d8:	ldr	r0, [sp, #12]
   141dc:	bl	11520 <free@plt>
   141e0:	b	14114 <__assert_fail@plt+0x2864>
   141e4:	mov	r4, #1
   141e8:	b	14114 <__assert_fail@plt+0x2864>
   141ec:	ldr	r0, [r6]
   141f0:	bl	11520 <free@plt>
   141f4:	ldrd	r2, [sp, #12]
   141f8:	ldr	r1, [sp, #20]
   141fc:	str	r2, [r6]
   14200:	str	r3, [r6, #4]
   14204:	ldr	r2, [sp, #24]
   14208:	ldr	r3, [sp, #48]	; 0x30
   1420c:	str	r1, [r6, #8]
   14210:	str	r2, [r6, #12]
   14214:	str	r3, [r6, #36]	; 0x24
   14218:	b	14114 <__assert_fail@plt+0x2864>
   1421c:	bl	11580 <__stack_chk_fail@plt>
   14220:	bl	1185c <abort@plt>
   14224:	svcmi	0x00800000
   14228:	andeq	ip, r2, r0, lsl #30
   1422c:	push	{r4, r5, r6, r7, lr}
   14230:	sub	sp, sp, #12
   14234:	ldr	r6, [pc, #404]	; 143d0 <__assert_fail@plt+0x2b20>
   14238:	subs	r7, r1, #0
   1423c:	ldr	r3, [r6]
   14240:	str	r3, [sp, #4]
   14244:	beq	143c4 <__assert_fail@plt+0x2b14>
   14248:	mov	r5, r2
   1424c:	mov	r3, #0
   14250:	mov	r2, sp
   14254:	mov	r4, r0
   14258:	bl	13568 <__assert_fail@plt+0x1cb8>
   1425c:	cmp	r0, #0
   14260:	beq	1428c <__assert_fail@plt+0x29dc>
   14264:	cmp	r5, #0
   14268:	moveq	r0, r5
   1426c:	strne	r0, [r5]
   14270:	movne	r0, #0
   14274:	ldr	r2, [sp, #4]
   14278:	ldr	r3, [r6]
   1427c:	cmp	r2, r3
   14280:	bne	143c8 <__assert_fail@plt+0x2b18>
   14284:	add	sp, sp, #12
   14288:	pop	{r4, r5, r6, r7, pc}
   1428c:	vldr	s15, [r4, #8]
   14290:	ldr	r3, [r4, #20]
   14294:	vldr	s14, [r4, #12]
   14298:	vcvt.f32.u32	s15, s15
   1429c:	vldr	s13, [r3, #8]
   142a0:	vcvt.f32.u32	s14, s14
   142a4:	vmul.f32	s15, s15, s13
   142a8:	vcmpe.f32	s14, s15
   142ac:	vmrs	APSR_nzcv, fpscr
   142b0:	bgt	142fc <__assert_fail@plt+0x2a4c>
   142b4:	ldr	r5, [sp]
   142b8:	ldr	r3, [r5]
   142bc:	cmp	r3, #0
   142c0:	beq	14358 <__assert_fail@plt+0x2aa8>
   142c4:	ldr	r0, [r4, #36]	; 0x24
   142c8:	cmp	r0, #0
   142cc:	beq	1437c <__assert_fail@plt+0x2acc>
   142d0:	ldr	r3, [r0, #4]
   142d4:	str	r3, [r4, #36]	; 0x24
   142d8:	ldr	r3, [r4, #16]
   142dc:	ldr	r2, [r5, #4]
   142e0:	add	r3, r3, #1
   142e4:	str	r7, [r0]
   142e8:	str	r2, [r0, #4]
   142ec:	str	r0, [r5, #4]
   142f0:	mov	r0, #1
   142f4:	str	r3, [r4, #16]
   142f8:	b	14274 <__assert_fail@plt+0x29c4>
   142fc:	add	r0, r4, #20
   14300:	bl	13680 <__assert_fail@plt+0x1dd0>
   14304:	vldr	s15, [r4, #8]
   14308:	ldr	r3, [r4, #20]
   1430c:	vldr	s14, [r4, #12]
   14310:	vcvt.f32.u32	s15, s15
   14314:	vldr	s13, [r3, #8]
   14318:	vcvt.f32.u32	s14, s14
   1431c:	vmul.f32	s12, s13, s15
   14320:	vcmpe.f32	s14, s12
   14324:	vmrs	APSR_nzcv, fpscr
   14328:	ble	142b4 <__assert_fail@plt+0x2a04>
   1432c:	vldr	s14, [r3, #12]
   14330:	ldrb	r3, [r3, #16]
   14334:	vmul.f32	s15, s15, s14
   14338:	cmp	r3, #0
   1433c:	vldr	s14, [pc, #136]	; 143cc <__assert_fail@plt+0x2b1c>
   14340:	vmuleq.f32	s15, s15, s13
   14344:	vcmpe.f32	s15, s14
   14348:	vmrs	APSR_nzcv, fpscr
   1434c:	blt	14390 <__assert_fail@plt+0x2ae0>
   14350:	mvn	r0, #0
   14354:	b	14274 <__assert_fail@plt+0x29c4>
   14358:	ldr	r2, [r4, #16]
   1435c:	ldr	r3, [r4, #12]
   14360:	add	r2, r2, #1
   14364:	add	r3, r3, #1
   14368:	str	r7, [r5]
   1436c:	mov	r0, #1
   14370:	str	r2, [r4, #16]
   14374:	str	r3, [r4, #12]
   14378:	b	14274 <__assert_fail@plt+0x29c4>
   1437c:	mov	r0, #8
   14380:	bl	11664 <malloc@plt>
   14384:	cmp	r0, #0
   14388:	beq	14350 <__assert_fail@plt+0x2aa0>
   1438c:	b	142d8 <__assert_fail@plt+0x2a28>
   14390:	vcvt.u32.f32	s15, s15
   14394:	mov	r0, r4
   14398:	vmov	r1, s15
   1439c:	bl	1408c <__assert_fail@plt+0x27dc>
   143a0:	cmp	r0, #0
   143a4:	beq	14350 <__assert_fail@plt+0x2aa0>
   143a8:	mov	r2, sp
   143ac:	mov	r3, #0
   143b0:	mov	r1, r7
   143b4:	mov	r0, r4
   143b8:	bl	13568 <__assert_fail@plt+0x1cb8>
   143bc:	cmp	r0, #0
   143c0:	beq	142b4 <__assert_fail@plt+0x2a04>
   143c4:	bl	1185c <abort@plt>
   143c8:	bl	11580 <__stack_chk_fail@plt>
   143cc:	svcmi	0x00800000
   143d0:	andeq	ip, r2, r0, lsl #30
   143d4:	push	{r4, r5, lr}
   143d8:	sub	sp, sp, #12
   143dc:	ldr	r5, [pc, #68]	; 14428 <__assert_fail@plt+0x2b78>
   143e0:	mov	r2, sp
   143e4:	mov	r4, r1
   143e8:	ldr	r3, [r5]
   143ec:	str	r3, [sp, #4]
   143f0:	bl	1422c <__assert_fail@plt+0x297c>
   143f4:	cmn	r0, #1
   143f8:	moveq	r0, #0
   143fc:	beq	1440c <__assert_fail@plt+0x2b5c>
   14400:	cmp	r0, #0
   14404:	movne	r0, r4
   14408:	ldreq	r0, [sp]
   1440c:	ldr	r2, [sp, #4]
   14410:	ldr	r3, [r5]
   14414:	cmp	r2, r3
   14418:	bne	14424 <__assert_fail@plt+0x2b74>
   1441c:	add	sp, sp, #12
   14420:	pop	{r4, r5, pc}
   14424:	bl	11580 <__stack_chk_fail@plt>
   14428:	andeq	ip, r2, r0, lsl #30
   1442c:	push	{r4, r5, r6, r7, lr}
   14430:	sub	sp, sp, #12
   14434:	ldr	r5, [pc, #276]	; 14550 <__assert_fail@plt+0x2ca0>
   14438:	mov	r3, #1
   1443c:	mov	r2, sp
   14440:	ldr	ip, [r5]
   14444:	mov	r4, r0
   14448:	str	ip, [sp, #4]
   1444c:	bl	13568 <__assert_fail@plt+0x1cb8>
   14450:	subs	r6, r0, #0
   14454:	beq	14474 <__assert_fail@plt+0x2bc4>
   14458:	ldr	r2, [sp]
   1445c:	ldr	r3, [r4, #16]
   14460:	ldr	r2, [r2]
   14464:	sub	r3, r3, #1
   14468:	cmp	r2, #0
   1446c:	str	r3, [r4, #16]
   14470:	beq	14490 <__assert_fail@plt+0x2be0>
   14474:	ldr	r2, [sp, #4]
   14478:	ldr	r3, [r5]
   1447c:	mov	r0, r6
   14480:	cmp	r2, r3
   14484:	bne	1454c <__assert_fail@plt+0x2c9c>
   14488:	add	sp, sp, #12
   1448c:	pop	{r4, r5, r6, r7, pc}
   14490:	vldr	s15, [r4, #8]
   14494:	ldr	r3, [r4, #12]
   14498:	ldr	r2, [r4, #20]
   1449c:	sub	r3, r3, #1
   144a0:	vcvt.f32.u32	s14, s15
   144a4:	vldr	s13, [r2]
   144a8:	vmov	s15, r3
   144ac:	str	r3, [r4, #12]
   144b0:	vcvt.f32.u32	s15, s15
   144b4:	vmul.f32	s14, s14, s13
   144b8:	vcmpe.f32	s15, s14
   144bc:	vmrs	APSR_nzcv, fpscr
   144c0:	bpl	14474 <__assert_fail@plt+0x2bc4>
   144c4:	add	r0, r4, #20
   144c8:	bl	13680 <__assert_fail@plt+0x1dd0>
   144cc:	vldr	s15, [r4, #8]
   144d0:	ldr	r3, [r4, #20]
   144d4:	vldr	s13, [r4, #12]
   144d8:	vcvt.f32.u32	s15, s15
   144dc:	vldr	s14, [r3]
   144e0:	vcvt.f32.u32	s13, s13
   144e4:	vmul.f32	s14, s15, s14
   144e8:	vcmpe.f32	s13, s14
   144ec:	vmrs	APSR_nzcv, fpscr
   144f0:	bpl	14474 <__assert_fail@plt+0x2bc4>
   144f4:	vldr	s14, [r3, #4]
   144f8:	ldrb	r2, [r3, #16]
   144fc:	mov	r0, r4
   14500:	vmul.f32	s15, s15, s14
   14504:	cmp	r2, #0
   14508:	vldreq	s14, [r3, #8]
   1450c:	vmuleq.f32	s15, s15, s14
   14510:	vcvt.u32.f32	s15, s15
   14514:	vmov	r1, s15
   14518:	bl	1408c <__assert_fail@plt+0x27dc>
   1451c:	cmp	r0, #0
   14520:	bne	14474 <__assert_fail@plt+0x2bc4>
   14524:	ldr	r0, [r4, #36]	; 0x24
   14528:	cmp	r0, #0
   1452c:	beq	14540 <__assert_fail@plt+0x2c90>
   14530:	ldr	r7, [r0, #4]
   14534:	bl	11520 <free@plt>
   14538:	subs	r0, r7, #0
   1453c:	bne	14530 <__assert_fail@plt+0x2c80>
   14540:	mov	r3, #0
   14544:	str	r3, [r4, #36]	; 0x24
   14548:	b	14474 <__assert_fail@plt+0x2bc4>
   1454c:	bl	11580 <__stack_chk_fail@plt>
   14550:	andeq	ip, r2, r0, lsl #30
   14554:	push	{r4, r5, r6, lr}
   14558:	mov	r4, r0
   1455c:	ldr	r0, [r0]
   14560:	mov	r5, r1
   14564:	bl	1a968 <fts_children@@Base+0x54c>
   14568:	ldr	ip, [r4, #8]
   1456c:	mov	r2, r5
   14570:	ldr	r1, [r4, #12]
   14574:	mov	r3, #0
   14578:	eor	r0, r0, ip
   1457c:	bl	1b03c <fts_children@@Base+0xc20>
   14580:	mov	r0, r2
   14584:	pop	{r4, r5, r6, pc}
   14588:	push	{r4, lr}
   1458c:	mov	r2, r1
   14590:	mov	r3, #0
   14594:	ldrd	r0, [r0, #8]
   14598:	bl	1b03c <fts_children@@Base+0xc20>
   1459c:	mov	r0, r2
   145a0:	pop	{r4, pc}
   145a4:	ldrd	r2, [r1, #8]
   145a8:	push	{r4, r5}
   145ac:	ldrd	r4, [r0, #8]
   145b0:	cmp	r5, r3
   145b4:	cmpeq	r4, r2
   145b8:	beq	145c8 <__assert_fail@plt+0x2d18>
   145bc:	mov	r0, #0
   145c0:	pop	{r4, r5}
   145c4:	bx	lr
   145c8:	ldrd	r4, [r0, #16]
   145cc:	ldrd	r2, [r1, #16]
   145d0:	cmp	r5, r3
   145d4:	cmpeq	r4, r2
   145d8:	bne	145bc <__assert_fail@plt+0x2d0c>
   145dc:	ldr	r1, [r1]
   145e0:	ldr	r0, [r0]
   145e4:	pop	{r4, r5}
   145e8:	b	16fd8 <__assert_fail@plt+0x5728>
   145ec:	ldrd	r2, [r1, #8]
   145f0:	push	{r4, r5, r6, lr}
   145f4:	ldrd	r4, [r0, #8]
   145f8:	cmp	r5, r3
   145fc:	cmpeq	r4, r2
   14600:	beq	1460c <__assert_fail@plt+0x2d5c>
   14604:	mov	r0, #0
   14608:	pop	{r4, r5, r6, pc}
   1460c:	ldrd	r4, [r0, #16]
   14610:	ldrd	r2, [r1, #16]
   14614:	cmp	r5, r3
   14618:	cmpeq	r4, r2
   1461c:	bne	14604 <__assert_fail@plt+0x2d54>
   14620:	ldr	r1, [r1]
   14624:	ldr	r0, [r0]
   14628:	bl	114e4 <strcmp@plt>
   1462c:	clz	r0, r0
   14630:	lsr	r0, r0, #5
   14634:	pop	{r4, r5, r6, pc}
   14638:	push	{r4, lr}
   1463c:	mov	r4, r0
   14640:	ldr	r0, [r0]
   14644:	bl	11520 <free@plt>
   14648:	mov	r0, r4
   1464c:	pop	{r4, lr}
   14650:	b	11520 <free@plt>
   14654:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14658:	mov	r4, r0
   1465c:	ldrb	r3, [r0]
   14660:	sub	r2, r3, #48	; 0x30
   14664:	cmp	r2, #7
   14668:	bls	14714 <__assert_fail@plt+0x2e64>
   1466c:	cmp	r3, #0
   14670:	moveq	r0, #16
   14674:	beq	146c0 <__assert_fail@plt+0x2e10>
   14678:	mov	r2, r4
   1467c:	mov	r0, #1
   14680:	and	r1, r3, #239	; 0xef
   14684:	cmp	r3, #43	; 0x2b
   14688:	cmpne	r1, #45	; 0x2d
   1468c:	ldrb	r3, [r2, #1]!
   14690:	moveq	r1, #1
   14694:	movne	r1, #0
   14698:	cmp	r3, #0
   1469c:	add	r0, r0, r1
   146a0:	bne	14680 <__assert_fail@plt+0x2dd0>
   146a4:	lsrs	r3, r0, #28
   146a8:	movne	r3, #1
   146ac:	moveq	r3, #0
   146b0:	lsls	r0, r0, #4
   146b4:	bmi	149ec <__assert_fail@plt+0x313c>
   146b8:	cmp	r3, #0
   146bc:	bne	149ec <__assert_fail@plt+0x313c>
   146c0:	ldr	r9, [pc, #808]	; 149f0 <__assert_fail@plt+0x3140>
   146c4:	ldr	sl, [pc, #808]	; 149f4 <__assert_fail@plt+0x3144>
   146c8:	ldr	r6, [pc, #808]	; 149f8 <__assert_fail@plt+0x3148>
   146cc:	bl	17544 <__assert_fail@plt+0x5c94>
   146d0:	mov	lr, #0
   146d4:	mov	r5, #0
   146d8:	ldrb	ip, [r4]
   146dc:	mov	r2, r4
   146e0:	add	r4, r4, #1
   146e4:	cmp	ip, #97	; 0x61
   146e8:	beq	1495c <__assert_fail@plt+0x30ac>
   146ec:	bls	14750 <__assert_fail@plt+0x2ea0>
   146f0:	cmp	ip, #111	; 0x6f
   146f4:	beq	14974 <__assert_fail@plt+0x30c4>
   146f8:	cmp	ip, #117	; 0x75
   146fc:	beq	1496c <__assert_fail@plt+0x30bc>
   14700:	cmp	ip, #103	; 0x67
   14704:	beq	14964 <__assert_fail@plt+0x30b4>
   14708:	bl	11520 <free@plt>
   1470c:	mov	r0, #0
   14710:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14714:	ldr	ip, [pc, #732]	; 149f8 <__assert_fail@plt+0x3148>
   14718:	add	r1, r0, #1
   1471c:	mov	r5, #0
   14720:	b	14734 <__assert_fail@plt+0x2e84>
   14724:	ldrb	r3, [r1], #1
   14728:	sub	r0, r3, #48	; 0x30
   1472c:	cmp	r0, #7
   14730:	bhi	1497c <__assert_fail@plt+0x30cc>
   14734:	add	r5, r3, r5, lsl #3
   14738:	sub	r5, r5, #48	; 0x30
   1473c:	cmp	r5, ip
   14740:	mov	r2, r1
   14744:	bls	14724 <__assert_fail@plt+0x2e74>
   14748:	mov	r0, #0
   1474c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14750:	cmp	ip, #45	; 0x2d
   14754:	beq	14768 <__assert_fail@plt+0x2eb8>
   14758:	cmp	ip, #61	; 0x3d
   1475c:	beq	14768 <__assert_fail@plt+0x2eb8>
   14760:	cmp	ip, #43	; 0x2b
   14764:	bne	14708 <__assert_fail@plt+0x2e58>
   14768:	add	r7, lr, #1
   1476c:	mov	r8, #3
   14770:	add	lr, r0, lr, lsl #4
   14774:	b	147c8 <__assert_fail@plt+0x2f18>
   14778:	cmp	r3, #117	; 0x75
   1477c:	addeq	r3, r2, #2
   14780:	moveq	r1, #448	; 0x1c0
   14784:	bne	14864 <__assert_fail@plt+0x2fb4>
   14788:	strb	ip, [lr]
   1478c:	ldrb	ip, [r2, #2]
   14790:	mov	r2, r3
   14794:	strb	r8, [lr, #1]
   14798:	str	r5, [lr, #4]
   1479c:	str	r1, [lr, #8]
   147a0:	cmp	r5, #0
   147a4:	andne	r1, r1, r5
   147a8:	and	r3, ip, #239	; 0xef
   147ac:	cmp	ip, #43	; 0x2b
   147b0:	cmpne	r3, #45	; 0x2d
   147b4:	str	r1, [lr, #12]
   147b8:	add	r3, r7, #1
   147bc:	add	lr, lr, #16
   147c0:	bne	149c8 <__assert_fail@plt+0x3118>
   147c4:	mov	r7, r3
   147c8:	ldrb	r3, [r2, #1]
   147cc:	add	r4, r2, #1
   147d0:	cmp	r3, #103	; 0x67
   147d4:	beq	14950 <__assert_fail@plt+0x30a0>
   147d8:	bls	147f0 <__assert_fail@plt+0x2f40>
   147dc:	cmp	r3, #111	; 0x6f
   147e0:	bne	14778 <__assert_fail@plt+0x2ec8>
   147e4:	add	r3, r2, #2
   147e8:	mov	r1, #7
   147ec:	b	14788 <__assert_fail@plt+0x2ed8>
   147f0:	sub	r1, r3, #48	; 0x30
   147f4:	cmp	r1, #7
   147f8:	addls	r4, r2, #2
   147fc:	movls	r1, #0
   14800:	bhi	14864 <__assert_fail@plt+0x2fb4>
   14804:	add	r1, r3, r1, lsl #3
   14808:	sub	r1, r1, #48	; 0x30
   1480c:	cmp	r1, r6
   14810:	mov	r2, r4
   14814:	bhi	14708 <__assert_fail@plt+0x2e58>
   14818:	ldrb	r3, [r4]
   1481c:	add	r4, r4, #1
   14820:	sub	fp, r3, #48	; 0x30
   14824:	cmp	fp, #7
   14828:	bls	14804 <__assert_fail@plt+0x2f54>
   1482c:	cmp	r5, #0
   14830:	bne	14708 <__assert_fail@plt+0x2e58>
   14834:	cmp	r3, #0
   14838:	cmpne	r3, #44	; 0x2c
   1483c:	bne	14708 <__assert_fail@plt+0x2e58>
   14840:	ldr	r5, [pc, #432]	; 149f8 <__assert_fail@plt+0x3148>
   14844:	strb	ip, [lr]
   14848:	mov	ip, #1
   1484c:	strb	ip, [lr, #1]
   14850:	str	r1, [lr, #8]
   14854:	str	r6, [lr, #4]
   14858:	mov	ip, r3
   1485c:	mov	r1, r5
   14860:	b	147a8 <__assert_fail@plt+0x2ef8>
   14864:	mov	fp, #1
   14868:	mov	r1, #0
   1486c:	sub	r2, r3, #88	; 0x58
   14870:	cmp	r2, #32
   14874:	ldrls	pc, [pc, r2, lsl #2]
   14878:	b	14934 <__assert_fail@plt+0x3084>
   1487c:	andeq	r4, r1, r0, lsl #18
   14880:	andeq	r4, r1, r4, lsr r9
   14884:	andeq	r4, r1, r4, lsr r9
   14888:	andeq	r4, r1, r4, lsr r9
   1488c:	andeq	r4, r1, r4, lsr r9
   14890:	andeq	r4, r1, r4, lsr r9
   14894:	andeq	r4, r1, r4, lsr r9
   14898:	andeq	r4, r1, r4, lsr r9
   1489c:	andeq	r4, r1, r4, lsr r9
   148a0:	andeq	r4, r1, r4, lsr r9
   148a4:	andeq	r4, r1, r4, lsr r9
   148a8:	andeq	r4, r1, r4, lsr r9
   148ac:	andeq	r4, r1, r4, lsr r9
   148b0:	andeq	r4, r1, r4, lsr r9
   148b4:	andeq	r4, r1, r4, lsr r9
   148b8:	andeq	r4, r1, r4, lsr r9
   148bc:	andeq	r4, r1, r4, lsr r9
   148c0:	andeq	r4, r1, r4, lsr r9
   148c4:	andeq	r4, r1, r4, lsr r9
   148c8:	andeq	r4, r1, r4, lsr r9
   148cc:	andeq	r4, r1, r4, lsr r9
   148d0:	andeq	r4, r1, r4, lsr r9
   148d4:	andeq	r4, r1, r4, lsr r9
   148d8:	andeq	r4, r1, r4, lsr r9
   148dc:	andeq	r4, r1, r4, lsr r9
   148e0:	andeq	r4, r1, r4, lsr r9
   148e4:	andeq	r4, r1, ip, lsr #18
   148e8:	andeq	r4, r1, r4, lsr #18
   148ec:	andeq	r4, r1, ip, lsl r9
   148f0:	andeq	r4, r1, r4, lsr r9
   148f4:	andeq	r4, r1, r4, lsr r9
   148f8:	andeq	r4, r1, r4, lsl r9
   148fc:	andeq	r4, r1, ip, lsl #18
   14900:	mov	fp, #2
   14904:	ldrb	r3, [r4, #1]!
   14908:	b	1486c <__assert_fail@plt+0x2fbc>
   1490c:	orr	r1, r1, #73	; 0x49
   14910:	b	14904 <__assert_fail@plt+0x3054>
   14914:	orr	r1, r1, #146	; 0x92
   14918:	b	14904 <__assert_fail@plt+0x3054>
   1491c:	orr	r1, r1, #512	; 0x200
   14920:	b	14904 <__assert_fail@plt+0x3054>
   14924:	orr	r1, r1, #3072	; 0xc00
   14928:	b	14904 <__assert_fail@plt+0x3054>
   1492c:	orr	r1, r1, #292	; 0x124
   14930:	b	14904 <__assert_fail@plt+0x3054>
   14934:	strb	ip, [lr]
   14938:	mov	r2, r4
   1493c:	mov	ip, r3
   14940:	strb	fp, [lr, #1]
   14944:	str	r5, [lr, #4]
   14948:	str	r1, [lr, #8]
   1494c:	b	147a0 <__assert_fail@plt+0x2ef0>
   14950:	add	r3, r2, #2
   14954:	mov	r1, #56	; 0x38
   14958:	b	14788 <__assert_fail@plt+0x2ed8>
   1495c:	ldr	r5, [pc, #148]	; 149f8 <__assert_fail@plt+0x3148>
   14960:	b	146d8 <__assert_fail@plt+0x2e28>
   14964:	orr	r5, r5, sl
   14968:	b	146d8 <__assert_fail@plt+0x2e28>
   1496c:	orr	r5, r5, #2496	; 0x9c0
   14970:	b	146d8 <__assert_fail@plt+0x2e28>
   14974:	orr	r5, r5, r9
   14978:	b	146d8 <__assert_fail@plt+0x2e28>
   1497c:	cmp	r3, #0
   14980:	bne	14748 <__assert_fail@plt+0x2e98>
   14984:	sub	r2, r2, r4
   14988:	cmp	r2, #4
   1498c:	andle	r4, r5, #3072	; 0xc00
   14990:	mov	r0, #32
   14994:	mvnle	r4, r4, lsr #10
   14998:	ldrgt	r4, [pc, #88]	; 149f8 <__assert_fail@plt+0x3148>
   1499c:	mvnle	r4, r4, lsl #10
   149a0:	bl	17544 <__assert_fail@plt+0x5c94>
   149a4:	ldr	r1, [pc, #80]	; 149fc <__assert_fail@plt+0x314c>
   149a8:	ldr	r2, [pc, #72]	; 149f8 <__assert_fail@plt+0x3148>
   149ac:	mov	r3, #0
   149b0:	str	r5, [r0, #8]
   149b4:	str	r4, [r0, #12]
   149b8:	strh	r1, [r0]
   149bc:	str	r2, [r0, #4]
   149c0:	strb	r3, [r0, #17]
   149c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149c8:	cmp	ip, #44	; 0x2c
   149cc:	addeq	r4, r2, #1
   149d0:	moveq	lr, r7
   149d4:	beq	146d4 <__assert_fail@plt+0x2e24>
   149d8:	cmp	ip, #0
   149dc:	bne	14708 <__assert_fail@plt+0x2e58>
   149e0:	add	r7, r0, r7, lsl #4
   149e4:	strb	ip, [r7, #1]
   149e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149ec:	bl	1778c <__assert_fail@plt+0x5edc>
   149f0:	andeq	r0, r0, r7, lsl #4
   149f4:	andeq	r0, r0, r8, lsr r4
   149f8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   149fc:	andeq	r0, r0, sp, lsr r1
   14a00:	push	{r4, r5, r6, lr}
   14a04:	sub	sp, sp, #112	; 0x70
   14a08:	ldr	r4, [pc, #100]	; 14a74 <__assert_fail@plt+0x31c4>
   14a0c:	mov	r1, r0
   14a10:	mov	r2, sp
   14a14:	ldr	r3, [r4]
   14a18:	mov	r0, #3
   14a1c:	str	r3, [sp, #108]	; 0x6c
   14a20:	bl	11838 <__xstat64@plt>
   14a24:	subs	r5, r0, #0
   14a28:	movne	r0, #0
   14a2c:	bne	14a58 <__assert_fail@plt+0x31a8>
   14a30:	mov	r0, #32
   14a34:	ldr	r6, [sp, #16]
   14a38:	bl	17544 <__assert_fail@plt+0x5c94>
   14a3c:	ldr	r3, [pc, #52]	; 14a78 <__assert_fail@plt+0x31c8>
   14a40:	ldr	r2, [pc, #52]	; 14a7c <__assert_fail@plt+0x31cc>
   14a44:	str	r6, [r0, #8]
   14a48:	strb	r5, [r0, #17]
   14a4c:	strh	r2, [r0]
   14a50:	str	r3, [r0, #4]
   14a54:	str	r3, [r0, #12]
   14a58:	ldr	r2, [sp, #108]	; 0x6c
   14a5c:	ldr	r3, [r4]
   14a60:	cmp	r2, r3
   14a64:	bne	14a70 <__assert_fail@plt+0x31c0>
   14a68:	add	sp, sp, #112	; 0x70
   14a6c:	pop	{r4, r5, r6, pc}
   14a70:	bl	11580 <__stack_chk_fail@plt>
   14a74:	andeq	ip, r2, r0, lsl #30
   14a78:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14a7c:	andeq	r0, r0, sp, lsr r1
   14a80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a84:	ldrb	r4, [r3, #1]
   14a88:	ldr	r8, [pc, #336]	; 14be0 <__assert_fail@plt+0x3330>
   14a8c:	ldr	sl, [sp, #32]
   14a90:	cmp	r4, #0
   14a94:	and	r0, r0, r8
   14a98:	beq	14bd8 <__assert_fail@plt+0x3328>
   14a9c:	add	r3, r3, #16
   14aa0:	mvn	r2, r2
   14aa4:	mov	r7, #0
   14aa8:	mvn	r9, #3072	; 0xc00
   14aac:	b	14b28 <__assert_fail@plt+0x3278>
   14ab0:	cmp	r4, #2
   14ab4:	mvn	lr, #0
   14ab8:	beq	14bc8 <__assert_fail@plt+0x3318>
   14abc:	mov	r6, r1
   14ac0:	cmp	r4, #3
   14ac4:	bne	14aec <__assert_fail@plt+0x323c>
   14ac8:	and	ip, ip, r0
   14acc:	tst	ip, #292	; 0x124
   14ad0:	movne	r4, #292	; 0x124
   14ad4:	moveq	r4, #0
   14ad8:	tst	ip, #146	; 0x92
   14adc:	orrne	r4, r4, #146	; 0x92
   14ae0:	tst	ip, #73	; 0x49
   14ae4:	orrne	r4, r4, #73	; 0x49
   14ae8:	orr	ip, r4, ip
   14aec:	cmp	r5, #0
   14af0:	and	ip, ip, lr
   14af4:	ldrb	r4, [r3, #-16]
   14af8:	bne	14b64 <__assert_fail@plt+0x32b4>
   14afc:	cmp	r4, #45	; 0x2d
   14b00:	and	ip, ip, r2
   14b04:	beq	14bb0 <__assert_fail@plt+0x3300>
   14b08:	cmp	r4, #61	; 0x3d
   14b0c:	beq	14b84 <__assert_fail@plt+0x32d4>
   14b10:	cmp	r4, #43	; 0x2b
   14b14:	beq	14bbc <__assert_fail@plt+0x330c>
   14b18:	add	r3, r3, #16
   14b1c:	ldrb	r4, [r3, #-15]
   14b20:	cmp	r4, #0
   14b24:	beq	14ba4 <__assert_fail@plt+0x32f4>
   14b28:	cmp	r1, #0
   14b2c:	ldr	r5, [r3, #-12]
   14b30:	ldr	ip, [r3, #-8]
   14b34:	beq	14ab0 <__assert_fail@plt+0x3200>
   14b38:	ldr	lr, [r3, #-4]
   14b3c:	cmp	r4, #2
   14b40:	mvn	r6, lr
   14b44:	and	r6, r6, #3072	; 0xc00
   14b48:	orr	lr, lr, r9
   14b4c:	bne	14ac0 <__assert_fail@plt+0x3210>
   14b50:	orr	ip, ip, #73	; 0x49
   14b54:	cmp	r5, #0
   14b58:	and	ip, ip, lr
   14b5c:	ldrb	r4, [r3, #-16]
   14b60:	beq	14afc <__assert_fail@plt+0x324c>
   14b64:	cmp	r4, #45	; 0x2d
   14b68:	and	ip, ip, r5
   14b6c:	beq	14bb0 <__assert_fail@plt+0x3300>
   14b70:	cmp	r4, #61	; 0x3d
   14b74:	bne	14b10 <__assert_fail@plt+0x3260>
   14b78:	mvn	r5, r5
   14b7c:	orr	r6, r6, r5
   14b80:	mvn	lr, r6
   14b84:	add	r3, r3, #16
   14b88:	ldrb	r4, [r3, #-15]
   14b8c:	and	lr, lr, r8
   14b90:	and	r0, r0, r6
   14b94:	cmp	r4, #0
   14b98:	orr	r7, r7, lr
   14b9c:	orr	r0, r0, ip
   14ba0:	bne	14b28 <__assert_fail@plt+0x3278>
   14ba4:	cmp	sl, #0
   14ba8:	strne	r7, [sl]
   14bac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bb0:	orr	r7, r7, ip
   14bb4:	bic	r0, r0, ip
   14bb8:	b	14b18 <__assert_fail@plt+0x3268>
   14bbc:	orr	r7, r7, ip
   14bc0:	orr	r0, r0, ip
   14bc4:	b	14b18 <__assert_fail@plt+0x3268>
   14bc8:	ands	r6, r0, #73	; 0x49
   14bcc:	beq	14aec <__assert_fail@plt+0x323c>
   14bd0:	mov	r6, r1
   14bd4:	b	14b50 <__assert_fail@plt+0x32a0>
   14bd8:	mov	r7, r4
   14bdc:	b	14ba4 <__assert_fail@plt+0x32f4>
   14be0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14be4:	push	{r4, r5, r6, lr}
   14be8:	subs	r4, r0, #0
   14bec:	beq	14c60 <__assert_fail@plt+0x33b0>
   14bf0:	mov	r1, #47	; 0x2f
   14bf4:	bl	11790 <strrchr@plt>
   14bf8:	subs	r5, r0, #0
   14bfc:	beq	14c4c <__assert_fail@plt+0x339c>
   14c00:	add	r6, r5, #1
   14c04:	sub	r3, r6, r4
   14c08:	cmp	r3, #6
   14c0c:	ble	14c4c <__assert_fail@plt+0x339c>
   14c10:	mov	r2, #7
   14c14:	ldr	r1, [pc, #96]	; 14c7c <__assert_fail@plt+0x33cc>
   14c18:	sub	r0, r5, #6
   14c1c:	bl	11850 <strncmp@plt>
   14c20:	cmp	r0, #0
   14c24:	bne	14c4c <__assert_fail@plt+0x339c>
   14c28:	mov	r2, #3
   14c2c:	ldr	r1, [pc, #76]	; 14c80 <__assert_fail@plt+0x33d0>
   14c30:	mov	r0, r6
   14c34:	bl	11850 <strncmp@plt>
   14c38:	cmp	r0, #0
   14c3c:	movne	r4, r6
   14c40:	ldreq	r3, [pc, #60]	; 14c84 <__assert_fail@plt+0x33d4>
   14c44:	addeq	r4, r5, #4
   14c48:	streq	r4, [r3]
   14c4c:	ldr	r2, [pc, #52]	; 14c88 <__assert_fail@plt+0x33d8>
   14c50:	ldr	r3, [pc, #52]	; 14c8c <__assert_fail@plt+0x33dc>
   14c54:	str	r4, [r2]
   14c58:	str	r4, [r3]
   14c5c:	pop	{r4, r5, r6, pc}
   14c60:	ldr	r3, [pc, #40]	; 14c90 <__assert_fail@plt+0x33e0>
   14c64:	mov	r2, #55	; 0x37
   14c68:	mov	r1, #1
   14c6c:	ldr	r3, [r3]
   14c70:	ldr	r0, [pc, #28]	; 14c94 <__assert_fail@plt+0x33e4>
   14c74:	bl	115ec <fwrite@plt>
   14c78:	bl	1185c <abort@plt>
   14c7c:	andeq	fp, r1, r4, lsl ip
   14c80:	andeq	fp, r1, ip, lsl ip
   14c84:	andeq	sp, r2, r0, asr #3
   14c88:	andeq	sp, r2, r8, ror #3
   14c8c:	andeq	sp, r2, r4, asr #3
   14c90:	ldrdeq	sp, [r2], -r0
   14c94:	ldrdeq	fp, [r1], -ip
   14c98:	push	{r4, lr}
   14c9c:	mov	r2, #48	; 0x30
   14ca0:	mov	r4, r1
   14ca4:	mov	r1, #0
   14ca8:	bl	11724 <memset@plt>
   14cac:	cmp	r4, #10
   14cb0:	beq	14cbc <__assert_fail@plt+0x340c>
   14cb4:	str	r4, [r0]
   14cb8:	pop	{r4, pc}
   14cbc:	bl	1185c <abort@plt>
   14cc0:	push	{r4, r5, r6, lr}
   14cc4:	mov	r2, #5
   14cc8:	mov	r5, r0
   14ccc:	mov	r6, r1
   14cd0:	mov	r1, r0
   14cd4:	mov	r0, #0
   14cd8:	bl	11574 <dcgettext@plt>
   14cdc:	cmp	r5, r0
   14ce0:	mov	r4, r0
   14ce4:	beq	14cf0 <__assert_fail@plt+0x3440>
   14ce8:	mov	r0, r4
   14cec:	pop	{r4, r5, r6, pc}
   14cf0:	bl	1aa64 <fts_children@@Base+0x648>
   14cf4:	ldrb	r3, [r0]
   14cf8:	bic	r3, r3, #32
   14cfc:	cmp	r3, #85	; 0x55
   14d00:	bne	14d60 <__assert_fail@plt+0x34b0>
   14d04:	ldrb	r3, [r0, #1]
   14d08:	bic	r3, r3, #32
   14d0c:	cmp	r3, #84	; 0x54
   14d10:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d14:	ldrb	r3, [r0, #2]
   14d18:	bic	r3, r3, #32
   14d1c:	cmp	r3, #70	; 0x46
   14d20:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d24:	ldrb	r3, [r0, #3]
   14d28:	cmp	r3, #45	; 0x2d
   14d2c:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d30:	ldrb	r3, [r0, #4]
   14d34:	cmp	r3, #56	; 0x38
   14d38:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d3c:	ldrb	r3, [r0, #5]
   14d40:	cmp	r3, #0
   14d44:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d48:	ldrb	r2, [r4]
   14d4c:	ldr	r3, [pc, #156]	; 14df0 <__assert_fail@plt+0x3540>
   14d50:	ldr	r4, [pc, #156]	; 14df4 <__assert_fail@plt+0x3544>
   14d54:	cmp	r2, #96	; 0x60
   14d58:	movne	r4, r3
   14d5c:	b	14ce8 <__assert_fail@plt+0x3438>
   14d60:	cmp	r3, #71	; 0x47
   14d64:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d68:	ldrb	r3, [r0, #1]
   14d6c:	bic	r3, r3, #32
   14d70:	cmp	r3, #66	; 0x42
   14d74:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d78:	ldrb	r3, [r0, #2]
   14d7c:	cmp	r3, #49	; 0x31
   14d80:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d84:	ldrb	r3, [r0, #3]
   14d88:	cmp	r3, #56	; 0x38
   14d8c:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d90:	ldrb	r3, [r0, #4]
   14d94:	cmp	r3, #48	; 0x30
   14d98:	bne	14dd8 <__assert_fail@plt+0x3528>
   14d9c:	ldrb	r3, [r0, #5]
   14da0:	cmp	r3, #51	; 0x33
   14da4:	bne	14dd8 <__assert_fail@plt+0x3528>
   14da8:	ldrb	r3, [r0, #6]
   14dac:	cmp	r3, #48	; 0x30
   14db0:	bne	14dd8 <__assert_fail@plt+0x3528>
   14db4:	ldrb	r3, [r0, #7]
   14db8:	cmp	r3, #0
   14dbc:	bne	14dd8 <__assert_fail@plt+0x3528>
   14dc0:	ldrb	r2, [r4]
   14dc4:	ldr	r3, [pc, #44]	; 14df8 <__assert_fail@plt+0x3548>
   14dc8:	ldr	r4, [pc, #44]	; 14dfc <__assert_fail@plt+0x354c>
   14dcc:	cmp	r2, #96	; 0x60
   14dd0:	movne	r4, r3
   14dd4:	b	14ce8 <__assert_fail@plt+0x3438>
   14dd8:	ldr	r3, [pc, #32]	; 14e00 <__assert_fail@plt+0x3550>
   14ddc:	ldr	r4, [pc, #32]	; 14e04 <__assert_fail@plt+0x3554>
   14de0:	cmp	r6, #9
   14de4:	movne	r4, r3
   14de8:	mov	r0, r4
   14dec:	pop	{r4, r5, r6, pc}
   14df0:	andeq	fp, r1, r8, ror ip
   14df4:	andeq	fp, r1, r4, lsl #25
   14df8:	andeq	fp, r1, ip, ror ip
   14dfc:	andeq	fp, r1, r0, lsl #25
   14e00:	andeq	fp, r1, r8, lsl #25
   14e04:	andeq	fp, r1, r4, ror ip
   14e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e0c:	sub	sp, sp, #124	; 0x7c
   14e10:	ldr	ip, [pc, #3576]	; 15c10 <__assert_fail@plt+0x4360>
   14e14:	str	r3, [sp, #24]
   14e18:	ldr	r3, [sp, #168]	; 0xa8
   14e1c:	ldr	ip, [ip]
   14e20:	str	r3, [sp, #56]	; 0x38
   14e24:	ldr	r3, [sp, #172]	; 0xac
   14e28:	ldr	r8, [sp, #160]	; 0xa0
   14e2c:	str	r3, [sp, #80]	; 0x50
   14e30:	ldr	r3, [sp, #176]	; 0xb0
   14e34:	mov	fp, r0
   14e38:	str	r3, [sp, #76]	; 0x4c
   14e3c:	mov	sl, r1
   14e40:	str	r2, [sp, #36]	; 0x24
   14e44:	str	ip, [sp, #116]	; 0x74
   14e48:	bl	11604 <__ctype_get_mb_cur_max@plt>
   14e4c:	ldr	r3, [sp, #164]	; 0xa4
   14e50:	ands	r4, r3, #2
   14e54:	movne	r3, #1
   14e58:	moveq	r3, #0
   14e5c:	str	r3, [sp, #32]
   14e60:	str	r0, [sp, #64]	; 0x40
   14e64:	cmp	r8, #10
   14e68:	ldrls	pc, [pc, r8, lsl #2]
   14e6c:	b	1661c <__assert_fail@plt+0x4d6c>
   14e70:	andeq	r5, r1, r4, ror #4
   14e74:	strdeq	r5, [r1], -ip
   14e78:	strdeq	r5, [r1], -ip
   14e7c:	andeq	r5, r1, ip, lsl r3
   14e80:	ldrdeq	r5, [r1], -r0
   14e84:	andeq	r5, r1, r8, lsl r2
   14e88:	muleq	r1, r4, r2
   14e8c:	andeq	r5, r1, ip, asr #5
   14e90:	muleq	r1, ip, lr
   14e94:	muleq	r1, ip, lr
   14e98:	muleq	r1, ip, lr
   14e9c:	cmp	r8, #10
   14ea0:	beq	14ec4 <__assert_fail@plt+0x3614>
   14ea4:	mov	r1, r8
   14ea8:	ldr	r0, [pc, #3428]	; 15c14 <__assert_fail@plt+0x4364>
   14eac:	bl	14cc0 <__assert_fail@plt+0x3410>
   14eb0:	mov	r1, r8
   14eb4:	str	r0, [sp, #80]	; 0x50
   14eb8:	ldr	r0, [pc, #3420]	; 15c1c <__assert_fail@plt+0x436c>
   14ebc:	bl	14cc0 <__assert_fail@plt+0x3410>
   14ec0:	str	r0, [sp, #76]	; 0x4c
   14ec4:	cmp	r4, #0
   14ec8:	movne	r4, #0
   14ecc:	beq	162dc <__assert_fail@plt+0x4a2c>
   14ed0:	ldr	r7, [sp, #76]	; 0x4c
   14ed4:	mov	r5, #0
   14ed8:	mov	r6, #1
   14edc:	mov	r0, r7
   14ee0:	str	r6, [sp, #40]	; 0x28
   14ee4:	str	r5, [sp, #68]	; 0x44
   14ee8:	bl	116dc <strlen@plt>
   14eec:	str	r6, [sp, #28]
   14ef0:	str	r5, [sp, #44]	; 0x2c
   14ef4:	str	r5, [sp, #72]	; 0x48
   14ef8:	str	r7, [sp, #60]	; 0x3c
   14efc:	str	r0, [sp, #52]	; 0x34
   14f00:	str	r8, [sp, #160]	; 0xa0
   14f04:	mov	r8, fp
   14f08:	ldr	fp, [sp, #160]	; 0xa0
   14f0c:	mov	r9, #0
   14f10:	ldr	r3, [sp, #24]
   14f14:	cmn	r3, #1
   14f18:	beq	15480 <__assert_fail@plt+0x3bd0>
   14f1c:	ldr	r3, [sp, #24]
   14f20:	subs	r6, r3, r9
   14f24:	movne	r6, #1
   14f28:	cmp	r6, #0
   14f2c:	beq	15498 <__assert_fail@plt+0x3be8>
   14f30:	ldr	r7, [sp, #28]
   14f34:	ldr	r0, [sp, #36]	; 0x24
   14f38:	cmp	fp, #2
   14f3c:	moveq	r7, #0
   14f40:	andne	r7, r7, #1
   14f44:	add	r3, r0, r9
   14f48:	cmp	r7, #0
   14f4c:	str	r3, [sp, #48]	; 0x30
   14f50:	beq	1593c <__assert_fail@plt+0x408c>
   14f54:	ldr	r2, [sp, #52]	; 0x34
   14f58:	cmp	r2, #0
   14f5c:	beq	15c20 <__assert_fail@plt+0x4370>
   14f60:	ldr	r1, [sp, #24]
   14f64:	cmp	r2, #1
   14f68:	mov	r3, r2
   14f6c:	movls	r3, #0
   14f70:	movhi	r3, #1
   14f74:	cmn	r1, #1
   14f78:	movne	r3, #0
   14f7c:	cmp	r3, #0
   14f80:	add	r5, r9, r2
   14f84:	beq	14f90 <__assert_fail@plt+0x36e0>
   14f88:	bl	116dc <strlen@plt>
   14f8c:	str	r0, [sp, #24]
   14f90:	ldr	r3, [sp, #24]
   14f94:	cmp	r5, r3
   14f98:	bhi	15c20 <__assert_fail@plt+0x4370>
   14f9c:	ldr	r2, [sp, #52]	; 0x34
   14fa0:	ldr	r1, [sp, #60]	; 0x3c
   14fa4:	ldr	r0, [sp, #48]	; 0x30
   14fa8:	bl	11568 <memcmp@plt>
   14fac:	cmp	r0, #0
   14fb0:	bne	15c20 <__assert_fail@plt+0x4370>
   14fb4:	ldr	r3, [sp, #32]
   14fb8:	cmp	r3, #0
   14fbc:	bne	164dc <__assert_fail@plt+0x4c2c>
   14fc0:	ldr	r3, [sp, #48]	; 0x30
   14fc4:	ldrb	r5, [r3]
   14fc8:	cmp	r5, #126	; 0x7e
   14fcc:	ldrls	pc, [pc, r5, lsl #2]
   14fd0:	b	158a0 <__assert_fail@plt+0x3ff0>
   14fd4:	andeq	r5, r1, ip, lsl #15
   14fd8:	andeq	r5, r1, r0, lsr #17
   14fdc:	andeq	r5, r1, r0, lsr #17
   14fe0:	andeq	r5, r1, r0, lsr #17
   14fe4:	andeq	r5, r1, r0, lsr #17
   14fe8:	andeq	r5, r1, r0, lsr #17
   14fec:	andeq	r5, r1, r0, lsr #17
   14ff0:	andeq	r5, r1, r8, asr r8
   14ff4:	andeq	r5, r1, r8, asr #16
   14ff8:	andeq	r5, r1, r8, asr #14
   14ffc:	andeq	r5, r1, r0, lsl r7
   15000:	andeq	r5, r1, r8, ror #14
   15004:	andeq	r5, r1, r0, asr r7
   15008:	andeq	r5, r1, r0, lsl #13
   1500c:	andeq	r5, r1, r0, lsr #17
   15010:	andeq	r5, r1, r0, lsr #17
   15014:	andeq	r5, r1, r0, lsr #17
   15018:	andeq	r5, r1, r0, lsr #17
   1501c:	andeq	r5, r1, r0, lsr #17
   15020:	andeq	r5, r1, r0, lsr #17
   15024:	andeq	r5, r1, r0, lsr #17
   15028:	andeq	r5, r1, r0, lsr #17
   1502c:	andeq	r5, r1, r0, lsr #17
   15030:	andeq	r5, r1, r0, lsr #17
   15034:	andeq	r5, r1, r0, lsr #17
   15038:	andeq	r5, r1, r0, lsr #17
   1503c:	andeq	r5, r1, r0, lsr #17
   15040:	andeq	r5, r1, r0, lsr #17
   15044:	andeq	r5, r1, r0, lsr #17
   15048:	andeq	r5, r1, r0, lsr #17
   1504c:	andeq	r5, r1, r0, lsr #17
   15050:	andeq	r5, r1, r0, lsr #17
   15054:	andeq	r5, r1, r0, ror #16
   15058:	andeq	r5, r1, r4, ror r7
   1505c:	andeq	r5, r1, r4, ror r7
   15060:	andeq	r5, r1, r8, ror r8
   15064:	andeq	r5, r1, r4, ror r7
   15068:	muleq	r1, r4, r8
   1506c:	andeq	r5, r1, r4, ror r7
   15070:			; <UNDEFINED> instruction: 0x000155b4
   15074:	andeq	r5, r1, r4, ror r7
   15078:	andeq	r5, r1, r4, ror r7
   1507c:	andeq	r5, r1, r4, ror r7
   15080:	muleq	r1, r4, r8
   15084:	muleq	r1, r4, r8
   15088:	muleq	r1, r4, r8
   1508c:	muleq	r1, r4, r8
   15090:	muleq	r1, r4, r8
   15094:	muleq	r1, r4, r8
   15098:	muleq	r1, r4, r8
   1509c:	muleq	r1, r4, r8
   150a0:	muleq	r1, r4, r8
   150a4:	muleq	r1, r4, r8
   150a8:	muleq	r1, r4, r8
   150ac:	muleq	r1, r4, r8
   150b0:	muleq	r1, r4, r8
   150b4:	muleq	r1, r4, r8
   150b8:	muleq	r1, r4, r8
   150bc:	muleq	r1, r4, r8
   150c0:	andeq	r5, r1, r4, ror r7
   150c4:	andeq	r5, r1, r4, ror r7
   150c8:	andeq	r5, r1, r4, ror r7
   150cc:	andeq	r5, r1, r4, ror r7
   150d0:	andeq	r5, r1, r8, lsl #11
   150d4:	andeq	r5, r1, r0, lsr #17
   150d8:	muleq	r1, r4, r8
   150dc:	muleq	r1, r4, r8
   150e0:	muleq	r1, r4, r8
   150e4:	muleq	r1, r4, r8
   150e8:	muleq	r1, r4, r8
   150ec:	muleq	r1, r4, r8
   150f0:	muleq	r1, r4, r8
   150f4:	muleq	r1, r4, r8
   150f8:	muleq	r1, r4, r8
   150fc:	muleq	r1, r4, r8
   15100:	muleq	r1, r4, r8
   15104:	muleq	r1, r4, r8
   15108:	muleq	r1, r4, r8
   1510c:	muleq	r1, r4, r8
   15110:	muleq	r1, r4, r8
   15114:	muleq	r1, r4, r8
   15118:	muleq	r1, r4, r8
   1511c:	muleq	r1, r4, r8
   15120:	muleq	r1, r4, r8
   15124:	muleq	r1, r4, r8
   15128:	muleq	r1, r4, r8
   1512c:	muleq	r1, r4, r8
   15130:	muleq	r1, r4, r8
   15134:	muleq	r1, r4, r8
   15138:	muleq	r1, r4, r8
   1513c:	muleq	r1, r4, r8
   15140:	andeq	r5, r1, r4, ror r7
   15144:	andeq	r5, r1, r0, asr #10
   15148:	muleq	r1, r4, r8
   1514c:	andeq	r5, r1, r4, ror r7
   15150:	muleq	r1, r4, r8
   15154:	andeq	r5, r1, r4, ror r7
   15158:	muleq	r1, r4, r8
   1515c:	muleq	r1, r4, r8
   15160:	muleq	r1, r4, r8
   15164:	muleq	r1, r4, r8
   15168:	muleq	r1, r4, r8
   1516c:	muleq	r1, r4, r8
   15170:	muleq	r1, r4, r8
   15174:	muleq	r1, r4, r8
   15178:	muleq	r1, r4, r8
   1517c:	muleq	r1, r4, r8
   15180:	muleq	r1, r4, r8
   15184:	muleq	r1, r4, r8
   15188:	muleq	r1, r4, r8
   1518c:	muleq	r1, r4, r8
   15190:	muleq	r1, r4, r8
   15194:	muleq	r1, r4, r8
   15198:	muleq	r1, r4, r8
   1519c:	muleq	r1, r4, r8
   151a0:	muleq	r1, r4, r8
   151a4:	muleq	r1, r4, r8
   151a8:	muleq	r1, r4, r8
   151ac:	muleq	r1, r4, r8
   151b0:	muleq	r1, r4, r8
   151b4:	muleq	r1, r4, r8
   151b8:	muleq	r1, r4, r8
   151bc:	muleq	r1, r4, r8
   151c0:	andeq	r5, r1, r8, asr r3
   151c4:	andeq	r5, r1, r4, ror r7
   151c8:	andeq	r5, r1, r8, asr r3
   151cc:	andeq	r5, r1, r8, ror r8
   151d0:	cmp	r4, #0
   151d4:	moveq	r3, #1
   151d8:	streq	r3, [sp, #28]
   151dc:	beq	15908 <__assert_fail@plt+0x4058>
   151e0:	mov	r3, #0
   151e4:	mov	r4, r3
   151e8:	mov	r2, #1
   151ec:	str	r2, [sp, #40]	; 0x28
   151f0:	str	r3, [sp, #68]	; 0x44
   151f4:	str	r2, [sp, #32]
   151f8:	str	r2, [sp, #52]	; 0x34
   151fc:	ldr	r3, [pc, #2584]	; 15c1c <__assert_fail@plt+0x436c>
   15200:	str	r4, [sp, #44]	; 0x2c
   15204:	str	r4, [sp, #72]	; 0x48
   15208:	str	r4, [sp, #28]
   1520c:	str	r3, [sp, #60]	; 0x3c
   15210:	mov	r8, #2
   15214:	b	14f00 <__assert_fail@plt+0x3650>
   15218:	cmp	r4, #0
   1521c:	bne	164a8 <__assert_fail@plt+0x4bf8>
   15220:	cmp	sl, #0
   15224:	beq	16268 <__assert_fail@plt+0x49b8>
   15228:	mov	r3, #34	; 0x22
   1522c:	strb	r3, [fp]
   15230:	ldr	r3, [pc, #2528]	; 15c18 <__assert_fail@plt+0x4368>
   15234:	mov	r1, r4
   15238:	mov	r2, #1
   1523c:	str	r4, [sp, #68]	; 0x44
   15240:	str	r2, [sp, #40]	; 0x28
   15244:	mov	r4, r2
   15248:	str	r1, [sp, #44]	; 0x2c
   1524c:	str	r1, [sp, #72]	; 0x48
   15250:	str	r1, [sp, #32]
   15254:	str	r2, [sp, #28]
   15258:	str	r2, [sp, #52]	; 0x34
   1525c:	str	r3, [sp, #60]	; 0x3c
   15260:	b	14f00 <__assert_fail@plt+0x3650>
   15264:	mov	r3, #0
   15268:	str	r3, [sp, #68]	; 0x44
   1526c:	str	r3, [sp, #44]	; 0x2c
   15270:	str	r3, [sp, #32]
   15274:	str	r3, [sp, #28]
   15278:	str	r3, [sp, #60]	; 0x3c
   1527c:	mov	r3, #1
   15280:	str	r8, [sp, #72]	; 0x48
   15284:	str	r8, [sp, #52]	; 0x34
   15288:	mov	r4, r8
   1528c:	str	r3, [sp, #40]	; 0x28
   15290:	b	14f00 <__assert_fail@plt+0x3650>
   15294:	mov	r3, #1
   15298:	str	r3, [sp, #40]	; 0x28
   1529c:	str	r3, [sp, #32]
   152a0:	str	r3, [sp, #28]
   152a4:	str	r3, [sp, #52]	; 0x34
   152a8:	ldr	r3, [pc, #2408]	; 15c18 <__assert_fail@plt+0x4368>
   152ac:	mov	r2, #0
   152b0:	mov	r4, r2
   152b4:	str	r2, [sp, #68]	; 0x44
   152b8:	str	r2, [sp, #44]	; 0x2c
   152bc:	str	r2, [sp, #72]	; 0x48
   152c0:	str	r3, [sp, #60]	; 0x3c
   152c4:	mov	r8, #5
   152c8:	b	14f00 <__assert_fail@plt+0x3650>
   152cc:	mov	r3, #0
   152d0:	mov	r2, #1
   152d4:	str	r2, [sp, #40]	; 0x28
   152d8:	mov	r4, r3
   152dc:	str	r3, [sp, #68]	; 0x44
   152e0:	str	r2, [sp, #28]
   152e4:	str	r3, [sp, #44]	; 0x2c
   152e8:	str	r3, [sp, #72]	; 0x48
   152ec:	str	r3, [sp, #32]
   152f0:	str	r3, [sp, #52]	; 0x34
   152f4:	str	r3, [sp, #60]	; 0x3c
   152f8:	b	14f00 <__assert_fail@plt+0x3650>
   152fc:	mov	r2, #1
   15300:	mov	r3, #0
   15304:	str	r2, [sp, #40]	; 0x28
   15308:	mov	r4, r3
   1530c:	str	r3, [sp, #68]	; 0x44
   15310:	str	r8, [sp, #52]	; 0x34
   15314:	str	r2, [sp, #32]
   15318:	b	151fc <__assert_fail@plt+0x394c>
   1531c:	mov	r3, #1
   15320:	str	r3, [sp, #40]	; 0x28
   15324:	str	r3, [sp, #32]
   15328:	str	r3, [sp, #28]
   1532c:	str	r3, [sp, #52]	; 0x34
   15330:	ldr	r3, [pc, #2276]	; 15c1c <__assert_fail@plt+0x436c>
   15334:	mov	r2, #0
   15338:	mov	r4, r2
   1533c:	str	r2, [sp, #68]	; 0x44
   15340:	str	r2, [sp, #44]	; 0x2c
   15344:	str	r2, [sp, #72]	; 0x48
   15348:	str	r3, [sp, #60]	; 0x3c
   1534c:	mov	r8, #2
   15350:	b	14f00 <__assert_fail@plt+0x3650>
   15354:	mov	r7, #0
   15358:	ldr	r3, [sp, #24]
   1535c:	cmn	r3, #1
   15360:	beq	15e9c <__assert_fail@plt+0x45ec>
   15364:	ldr	r3, [sp, #24]
   15368:	subs	r3, r3, #1
   1536c:	movne	r3, #1
   15370:	cmp	r3, #0
   15374:	sub	r2, fp, #2
   15378:	clz	r2, r2
   1537c:	lsr	r2, r2, #5
   15380:	bne	1557c <__assert_fail@plt+0x3ccc>
   15384:	cmp	r9, #0
   15388:	bne	1557c <__assert_fail@plt+0x3ccc>
   1538c:	ldr	r3, [sp, #32]
   15390:	tst	r3, r2
   15394:	bne	1569c <__assert_fail@plt+0x3dec>
   15398:	ldr	r3, [sp, #28]
   1539c:	eor	r3, r3, #1
   153a0:	orr	r3, r2, r3
   153a4:	ldr	r2, [sp, #32]
   153a8:	eor	r3, r3, #1
   153ac:	orrs	r3, r2, r3
   153b0:	beq	153e0 <__assert_fail@plt+0x3b30>
   153b4:	mov	r3, #0
   153b8:	ldr	r1, [sp, #56]	; 0x38
   153bc:	cmp	r1, #0
   153c0:	beq	153e0 <__assert_fail@plt+0x3b30>
   153c4:	lsr	r2, r5, #5
   153c8:	and	r0, r5, #31
   153cc:	uxtb	r2, r2
   153d0:	ldr	r1, [r1, r2, lsl #2]
   153d4:	lsr	r2, r1, r0
   153d8:	tst	r2, #1
   153dc:	bne	153e8 <__assert_fail@plt+0x3b38>
   153e0:	cmp	r7, #0
   153e4:	beq	15638 <__assert_fail@plt+0x3d88>
   153e8:	sub	r2, fp, #2
   153ec:	clz	r2, r2
   153f0:	lsr	r2, r2, #5
   153f4:	ldr	r3, [sp, #32]
   153f8:	cmp	r3, #0
   153fc:	bne	15728 <__assert_fail@plt+0x3e78>
   15400:	ldr	r3, [sp, #44]	; 0x2c
   15404:	eor	r3, r3, #1
   15408:	ands	r3, r2, r3
   1540c:	beq	15444 <__assert_fail@plt+0x3b94>
   15410:	cmp	sl, r4
   15414:	movhi	r2, #39	; 0x27
   15418:	strbhi	r2, [r8, r4]
   1541c:	add	r2, r4, #1
   15420:	cmp	r2, sl
   15424:	movcc	r1, #36	; 0x24
   15428:	strbcc	r1, [r8, r2]
   1542c:	add	r2, r4, #2
   15430:	cmp	r2, sl
   15434:	add	r4, r4, #3
   15438:	movcc	r1, #39	; 0x27
   1543c:	strbcc	r1, [r8, r2]
   15440:	str	r3, [sp, #44]	; 0x2c
   15444:	cmp	r4, sl
   15448:	movcc	r3, #92	; 0x5c
   1544c:	strbcc	r3, [r8, r4]
   15450:	add	r9, r9, #1
   15454:	add	r4, r4, #1
   15458:	cmp	r4, sl
   1545c:	ldr	r3, [sp, #40]	; 0x28
   15460:	strbcc	r5, [r8, r4]
   15464:	cmp	r6, #0
   15468:	moveq	r3, #0
   1546c:	str	r3, [sp, #40]	; 0x28
   15470:	ldr	r3, [sp, #24]
   15474:	add	r4, r4, #1
   15478:	cmn	r3, #1
   1547c:	bne	14f1c <__assert_fail@plt+0x366c>
   15480:	ldr	r3, [sp, #36]	; 0x24
   15484:	ldrb	r6, [r3, r9]
   15488:	adds	r6, r6, #0
   1548c:	movne	r6, #1
   15490:	cmp	r6, #0
   15494:	bne	14f30 <__assert_fail@plt+0x3680>
   15498:	str	fp, [sp, #160]	; 0xa0
   1549c:	mov	fp, r8
   154a0:	ldr	r8, [sp, #160]	; 0xa0
   154a4:	ldr	r1, [sp, #32]
   154a8:	cmp	r4, #0
   154ac:	sub	r2, r8, #2
   154b0:	clz	r2, r2
   154b4:	lsr	r2, r2, #5
   154b8:	andeq	r3, r2, r1
   154bc:	movne	r3, #0
   154c0:	cmp	r3, #0
   154c4:	bne	165b0 <__assert_fail@plt+0x4d00>
   154c8:	eor	r3, r1, #1
   154cc:	ands	r2, r2, r3
   154d0:	beq	164ec <__assert_fail@plt+0x4c3c>
   154d4:	ldr	r3, [sp, #68]	; 0x44
   154d8:	cmp	r3, #0
   154dc:	beq	164f0 <__assert_fail@plt+0x4c40>
   154e0:	ldr	r3, [sp, #40]	; 0x28
   154e4:	cmp	r3, #0
   154e8:	bne	1656c <__assert_fail@plt+0x4cbc>
   154ec:	ldr	r3, [sp, #72]	; 0x48
   154f0:	adds	r3, r3, #0
   154f4:	movne	r3, #1
   154f8:	cmp	sl, #0
   154fc:	movne	r3, #0
   15500:	cmp	r3, #0
   15504:	ldreq	r2, [sp, #68]	; 0x44
   15508:	beq	164f0 <__assert_fail@plt+0x4c40>
   1550c:	ldr	sl, [sp, #72]	; 0x48
   15510:	str	r3, [sp, #68]	; 0x44
   15514:	ldr	r3, [pc, #1792]	; 15c1c <__assert_fail@plt+0x436c>
   15518:	mov	r2, #39	; 0x27
   1551c:	mov	r4, #1
   15520:	str	r3, [sp, #60]	; 0x3c
   15524:	mov	r3, #0
   15528:	strb	r2, [fp]
   1552c:	str	r4, [sp, #52]	; 0x34
   15530:	mov	r8, #2
   15534:	str	r3, [sp, #32]
   15538:	b	14f00 <__assert_fail@plt+0x3650>
   1553c:	mov	r7, #0
   15540:	cmp	fp, #2
   15544:	beq	15e7c <__assert_fail@plt+0x45cc>
   15548:	ldr	r3, [sp, #52]	; 0x34
   1554c:	ldr	r2, [sp, #28]
   15550:	ldr	r1, [sp, #32]
   15554:	cmp	r3, #0
   15558:	andne	r2, r2, r1
   1555c:	moveq	r2, #0
   15560:	cmp	r2, #0
   15564:	moveq	r5, #92	; 0x5c
   15568:	moveq	r3, r5
   1556c:	bne	15e88 <__assert_fail@plt+0x45d8>
   15570:	ldr	r1, [sp, #28]
   15574:	cmp	r1, #0
   15578:	bne	165f8 <__assert_fail@plt+0x4d48>
   1557c:	mov	r6, #0
   15580:	b	15398 <__assert_fail@plt+0x3ae8>
   15584:	mov	r7, #0
   15588:	cmp	fp, #2
   1558c:	beq	15eec <__assert_fail@plt+0x463c>
   15590:	cmp	fp, #5
   15594:	beq	15eb0 <__assert_fail@plt+0x4600>
   15598:	sub	r2, fp, #2
   1559c:	mov	r6, #0
   155a0:	clz	r2, r2
   155a4:	mov	r5, #63	; 0x3f
   155a8:	lsr	r2, r2, #5
   155ac:	b	15398 <__assert_fail@plt+0x3ae8>
   155b0:	mov	r7, #0
   155b4:	cmp	fp, #2
   155b8:	strne	r6, [sp, #68]	; 0x44
   155bc:	movne	r2, #0
   155c0:	movne	r5, #39	; 0x27
   155c4:	bne	15398 <__assert_fail@plt+0x3ae8>
   155c8:	ldr	r3, [sp, #32]
   155cc:	cmp	r3, #0
   155d0:	bne	162cc <__assert_fail@plt+0x4a1c>
   155d4:	cmp	sl, #0
   155d8:	ldr	r3, [sp, #72]	; 0x48
   155dc:	clz	r3, r3
   155e0:	lsr	r3, r3, #5
   155e4:	moveq	r3, #0
   155e8:	cmp	r3, #0
   155ec:	bne	16200 <__assert_fail@plt+0x4950>
   155f0:	cmp	sl, r4
   155f4:	movhi	r3, #39	; 0x27
   155f8:	strbhi	r3, [r8, r4]
   155fc:	add	r3, r4, #1
   15600:	cmp	sl, r3
   15604:	movhi	r2, #92	; 0x5c
   15608:	strbhi	r2, [r8, r3]
   1560c:	add	r3, r4, #2
   15610:	cmp	sl, r3
   15614:	movhi	r2, #39	; 0x27
   15618:	strbhi	r2, [r8, r3]
   1561c:	mov	r3, #0
   15620:	cmp	r7, #0
   15624:	add	r4, r4, #3
   15628:	str	r3, [sp, #44]	; 0x2c
   1562c:	str	r6, [sp, #68]	; 0x44
   15630:	mov	r5, #39	; 0x27
   15634:	bne	153e8 <__assert_fail@plt+0x3b38>
   15638:	ldr	r2, [sp, #44]	; 0x2c
   1563c:	eor	r3, r3, #1
   15640:	and	r3, r3, r2
   15644:	add	r9, r9, #1
   15648:	uxtb	r3, r3
   1564c:	cmp	r3, #0
   15650:	beq	15458 <__assert_fail@plt+0x3ba8>
   15654:	cmp	sl, r4
   15658:	movhi	r3, #39	; 0x27
   1565c:	strbhi	r3, [r8, r4]
   15660:	add	r3, r4, #1
   15664:	cmp	sl, r3
   15668:	movhi	r2, #39	; 0x27
   1566c:	strbhi	r2, [r8, r3]
   15670:	mov	r3, #0
   15674:	add	r4, r4, #2
   15678:	str	r3, [sp, #44]	; 0x2c
   1567c:	b	15458 <__assert_fail@plt+0x3ba8>
   15680:	mov	r3, #114	; 0x72
   15684:	ldr	r1, [sp, #32]
   15688:	sub	r2, fp, #2
   1568c:	clz	r2, r2
   15690:	lsr	r2, r2, #5
   15694:	tst	r2, r1
   15698:	beq	15570 <__assert_fail@plt+0x3cc0>
   1569c:	mov	fp, r8
   156a0:	mov	r8, #2
   156a4:	ldr	r3, [sp, #28]
   156a8:	cmp	r3, #0
   156ac:	movne	r8, #4
   156b0:	ldr	r3, [sp, #164]	; 0xa4
   156b4:	mov	ip, #0
   156b8:	bic	r3, r3, #2
   156bc:	str	r3, [sp, #4]
   156c0:	ldr	r3, [sp, #76]	; 0x4c
   156c4:	str	r8, [sp]
   156c8:	str	r3, [sp, #16]
   156cc:	ldr	r3, [sp, #80]	; 0x50
   156d0:	ldr	r2, [sp, #36]	; 0x24
   156d4:	str	r3, [sp, #12]
   156d8:	mov	r1, sl
   156dc:	ldr	r3, [sp, #24]
   156e0:	mov	r0, fp
   156e4:	str	ip, [sp, #8]
   156e8:	bl	14e08 <__assert_fail@plt+0x3558>
   156ec:	mov	r4, r0
   156f0:	ldr	r3, [pc, #1304]	; 15c10 <__assert_fail@plt+0x4360>
   156f4:	ldr	r2, [sp, #116]	; 0x74
   156f8:	mov	r0, r4
   156fc:	ldr	r3, [r3]
   15700:	cmp	r2, r3
   15704:	bne	165f4 <__assert_fail@plt+0x4d44>
   15708:	add	sp, sp, #124	; 0x7c
   1570c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15710:	mov	r5, #110	; 0x6e
   15714:	ldr	r3, [sp, #32]
   15718:	mov	r2, #0
   1571c:	cmp	r3, #0
   15720:	mov	r6, r2
   15724:	beq	15400 <__assert_fail@plt+0x3b50>
   15728:	str	fp, [sp, #160]	; 0xa0
   1572c:	mov	fp, r8
   15730:	ldr	r8, [sp, #160]	; 0xa0
   15734:	mov	r3, r2
   15738:	ldr	r2, [sp, #28]
   1573c:	and	r2, r2, r3
   15740:	str	r2, [sp, #28]
   15744:	b	156a4 <__assert_fail@plt+0x3df4>
   15748:	mov	r5, #116	; 0x74
   1574c:	b	15714 <__assert_fail@plt+0x3e64>
   15750:	mov	r5, #102	; 0x66
   15754:	ldr	r3, [sp, #32]
   15758:	cmp	r3, #0
   1575c:	bne	16308 <__assert_fail@plt+0x4a58>
   15760:	mov	r6, #0
   15764:	b	15444 <__assert_fail@plt+0x3b94>
   15768:	mov	r5, #118	; 0x76
   1576c:	b	15754 <__assert_fail@plt+0x3ea4>
   15770:	mov	r7, #0
   15774:	mov	r6, #0
   15778:	b	153b4 <__assert_fail@plt+0x3b04>
   1577c:	ldr	r3, [sp, #32]
   15780:	cmp	r3, #0
   15784:	bne	1654c <__assert_fail@plt+0x4c9c>
   15788:	mov	r7, r3
   1578c:	ldr	r3, [sp, #44]	; 0x2c
   15790:	sub	r2, fp, #2
   15794:	eor	r3, r3, #1
   15798:	clz	r2, r2
   1579c:	lsr	r2, r2, #5
   157a0:	ands	r3, r2, r3
   157a4:	beq	161ec <__assert_fail@plt+0x493c>
   157a8:	cmp	sl, r4
   157ac:	movhi	r1, #39	; 0x27
   157b0:	strbhi	r1, [r8, r4]
   157b4:	add	r1, r4, #1
   157b8:	cmp	sl, r1
   157bc:	movhi	r0, #36	; 0x24
   157c0:	strbhi	r0, [r8, r1]
   157c4:	add	r1, r4, #2
   157c8:	cmp	sl, r1
   157cc:	movhi	r0, #39	; 0x27
   157d0:	strbhi	r0, [r8, r1]
   157d4:	add	r1, r4, #3
   157d8:	cmp	sl, r1
   157dc:	bls	1624c <__assert_fail@plt+0x499c>
   157e0:	mov	r4, r1
   157e4:	mov	r1, #92	; 0x5c
   157e8:	strb	r1, [r8, r4]
   157ec:	mov	r1, r4
   157f0:	str	r3, [sp, #44]	; 0x2c
   157f4:	cmp	fp, #2
   157f8:	add	r4, r4, #1
   157fc:	beq	16294 <__assert_fail@plt+0x49e4>
   15800:	ldr	r0, [sp, #24]
   15804:	add	r3, r9, #1
   15808:	cmp	r3, r0
   1580c:	bcs	15824 <__assert_fail@plt+0x3f74>
   15810:	ldr	r0, [sp, #36]	; 0x24
   15814:	ldrb	r3, [r0, r3]
   15818:	sub	r3, r3, #48	; 0x30
   1581c:	cmp	r3, #9
   15820:	bls	162a4 <__assert_fail@plt+0x49f4>
   15824:	mov	r5, #48	; 0x30
   15828:	ldr	r3, [sp, #28]
   1582c:	eor	r3, r3, #1
   15830:	orrs	r2, r2, r3
   15834:	mov	r3, r6
   15838:	moveq	r6, r2
   1583c:	beq	153b8 <__assert_fail@plt+0x3b08>
   15840:	mov	r6, #0
   15844:	b	153e0 <__assert_fail@plt+0x3b30>
   15848:	mov	r2, #0
   1584c:	mov	r6, r2
   15850:	mov	r5, #98	; 0x62
   15854:	b	15400 <__assert_fail@plt+0x3b50>
   15858:	mov	r5, #97	; 0x61
   1585c:	b	15760 <__assert_fail@plt+0x3eb0>
   15860:	mov	r3, r7
   15864:	mov	r6, r7
   15868:	mov	r2, #0
   1586c:	mov	r7, r3
   15870:	mov	r5, #32
   15874:	b	15398 <__assert_fail@plt+0x3ae8>
   15878:	cmp	r9, #0
   1587c:	mov	r3, r7
   15880:	bne	15e48 <__assert_fail@plt+0x4598>
   15884:	mov	r6, r7
   15888:	mov	r2, r9
   1588c:	mov	r7, r3
   15890:	b	15398 <__assert_fail@plt+0x3ae8>
   15894:	mov	r6, r7
   15898:	b	153b4 <__assert_fail@plt+0x3b04>
   1589c:	mov	r7, #0
   158a0:	ldr	r3, [sp, #64]	; 0x40
   158a4:	cmp	r3, #1
   158a8:	bne	15f04 <__assert_fail@plt+0x4654>
   158ac:	bl	116ac <__ctype_b_loc@plt>
   158b0:	ldr	r2, [sp, #64]	; 0x40
   158b4:	sxth	r3, r5
   158b8:	mov	ip, r2
   158bc:	lsl	r3, r3, #1
   158c0:	ldr	r2, [r0]
   158c4:	ldrh	r3, [r2, r3]
   158c8:	and	r3, r3, #16384	; 0x4000
   158cc:	cmp	r3, #0
   158d0:	ldr	r3, [sp, #28]
   158d4:	movne	r6, #1
   158d8:	moveq	r6, #0
   158dc:	movne	r2, #0
   158e0:	andeq	r2, r3, #1
   158e4:	cmp	r2, #0
   158e8:	bne	16214 <__assert_fail@plt+0x4964>
   158ec:	sub	r2, fp, #2
   158f0:	clz	r2, r2
   158f4:	lsr	r2, r2, #5
   158f8:	b	15398 <__assert_fail@plt+0x3ae8>
   158fc:	cmp	r4, #0
   15900:	bne	165c0 <__assert_fail@plt+0x4d10>
   15904:	str	r4, [sp, #28]
   15908:	cmp	sl, #0
   1590c:	bne	16604 <__assert_fail@plt+0x4d54>
   15910:	ldr	r3, [pc, #772]	; 15c1c <__assert_fail@plt+0x436c>
   15914:	mov	r4, #1
   15918:	str	r4, [sp, #40]	; 0x28
   1591c:	str	r3, [sp, #60]	; 0x3c
   15920:	str	r4, [sp, #52]	; 0x34
   15924:	str	sl, [sp, #72]	; 0x48
   15928:	str	sl, [sp, #68]	; 0x44
   1592c:	str	sl, [sp, #44]	; 0x2c
   15930:	str	sl, [sp, #32]
   15934:	mov	r8, #2
   15938:	b	14f00 <__assert_fail@plt+0x3650>
   1593c:	ldr	r3, [sp, #36]	; 0x24
   15940:	ldrb	r5, [r3, r9]
   15944:	cmp	r5, #126	; 0x7e
   15948:	ldrls	pc, [pc, r5, lsl #2]
   1594c:	b	158a0 <__assert_fail@plt+0x3ff0>
   15950:	andeq	r5, r1, r4, lsl #23
   15954:	andeq	r5, r1, r0, lsr #17
   15958:	andeq	r5, r1, r0, lsr #17
   1595c:	andeq	r5, r1, r0, lsr #17
   15960:	andeq	r5, r1, r0, lsr #17
   15964:	andeq	r5, r1, r0, lsr #17
   15968:	andeq	r5, r1, r0, lsr #17
   1596c:	andeq	r5, r1, r0, ror fp
   15970:	andeq	r5, r1, ip, asr fp
   15974:	andeq	r5, r1, r4, asr fp
   15978:	andeq	r5, r1, ip, asr #22
   1597c:	strdeq	r5, [r1], -ip
   15980:	andeq	r5, r1, r8, ror #23
   15984:	andeq	r5, r1, r0, lsl #13
   15988:	andeq	r5, r1, r0, lsr #17
   1598c:	andeq	r5, r1, r0, lsr #17
   15990:	andeq	r5, r1, r0, lsr #17
   15994:	andeq	r5, r1, r0, lsr #17
   15998:	andeq	r5, r1, r0, lsr #17
   1599c:	andeq	r5, r1, r0, lsr #17
   159a0:	andeq	r5, r1, r0, lsr #17
   159a4:	andeq	r5, r1, r0, lsr #17
   159a8:	andeq	r5, r1, r0, lsr #17
   159ac:	andeq	r5, r1, r0, lsr #17
   159b0:	andeq	r5, r1, r0, lsr #17
   159b4:	andeq	r5, r1, r0, lsr #17
   159b8:	andeq	r5, r1, r0, lsr #17
   159bc:	andeq	r5, r1, r0, lsr #17
   159c0:	andeq	r5, r1, r0, lsr #17
   159c4:	andeq	r5, r1, r0, lsr #17
   159c8:	andeq	r5, r1, r0, lsr #17
   159cc:	andeq	r5, r1, r0, lsr #17
   159d0:	ldrdeq	r5, [r1], -r8
   159d4:	andeq	r5, r1, r4, asr #23
   159d8:	andeq	r5, r1, r4, asr #23
   159dc:			; <UNDEFINED> instruction: 0x00015bb4
   159e0:	andeq	r5, r1, r4, asr #23
   159e4:	andeq	r5, r1, ip, ror #17
   159e8:	andeq	r5, r1, r4, asr #23
   159ec:			; <UNDEFINED> instruction: 0x000155b4
   159f0:	andeq	r5, r1, r4, asr #23
   159f4:	andeq	r5, r1, r4, asr #23
   159f8:	andeq	r5, r1, r4, asr #23
   159fc:	andeq	r5, r1, ip, ror #17
   15a00:	andeq	r5, r1, ip, ror #17
   15a04:	andeq	r5, r1, ip, ror #17
   15a08:	andeq	r5, r1, ip, ror #17
   15a0c:	andeq	r5, r1, ip, ror #17
   15a10:	andeq	r5, r1, ip, ror #17
   15a14:	andeq	r5, r1, ip, ror #17
   15a18:	andeq	r5, r1, ip, ror #17
   15a1c:	andeq	r5, r1, ip, ror #17
   15a20:	andeq	r5, r1, ip, ror #17
   15a24:	andeq	r5, r1, ip, ror #17
   15a28:	andeq	r5, r1, ip, ror #17
   15a2c:	andeq	r5, r1, ip, ror #17
   15a30:	andeq	r5, r1, ip, ror #17
   15a34:	andeq	r5, r1, ip, ror #17
   15a38:	andeq	r5, r1, ip, ror #17
   15a3c:	andeq	r5, r1, r4, asr #23
   15a40:	andeq	r5, r1, r4, asr #23
   15a44:	andeq	r5, r1, r4, asr #23
   15a48:	andeq	r5, r1, r4, asr #23
   15a4c:	andeq	r5, r1, r8, lsl #11
   15a50:	andeq	r5, r1, r0, lsr #17
   15a54:	andeq	r5, r1, ip, ror #17
   15a58:	andeq	r5, r1, ip, ror #17
   15a5c:	andeq	r5, r1, ip, ror #17
   15a60:	andeq	r5, r1, ip, ror #17
   15a64:	andeq	r5, r1, ip, ror #17
   15a68:	andeq	r5, r1, ip, ror #17
   15a6c:	andeq	r5, r1, ip, ror #17
   15a70:	andeq	r5, r1, ip, ror #17
   15a74:	andeq	r5, r1, ip, ror #17
   15a78:	andeq	r5, r1, ip, ror #17
   15a7c:	andeq	r5, r1, ip, ror #17
   15a80:	andeq	r5, r1, ip, ror #17
   15a84:	andeq	r5, r1, ip, ror #17
   15a88:	andeq	r5, r1, ip, ror #17
   15a8c:	andeq	r5, r1, ip, ror #17
   15a90:	andeq	r5, r1, ip, ror #17
   15a94:	andeq	r5, r1, ip, ror #17
   15a98:	andeq	r5, r1, ip, ror #17
   15a9c:	andeq	r5, r1, ip, ror #17
   15aa0:	andeq	r5, r1, ip, ror #17
   15aa4:	andeq	r5, r1, ip, ror #17
   15aa8:	andeq	r5, r1, ip, ror #17
   15aac:	andeq	r5, r1, ip, ror #17
   15ab0:	andeq	r5, r1, ip, ror #17
   15ab4:	andeq	r5, r1, ip, ror #17
   15ab8:	andeq	r5, r1, ip, ror #17
   15abc:	andeq	r5, r1, r4, asr #23
   15ac0:	andeq	r5, r1, r0, asr #10
   15ac4:	andeq	r5, r1, ip, ror #17
   15ac8:	andeq	r5, r1, r4, asr #23
   15acc:	andeq	r5, r1, ip, ror #17
   15ad0:	andeq	r5, r1, r4, asr #23
   15ad4:	andeq	r5, r1, ip, ror #17
   15ad8:	andeq	r5, r1, ip, ror #17
   15adc:	andeq	r5, r1, ip, ror #17
   15ae0:	andeq	r5, r1, ip, ror #17
   15ae4:	andeq	r5, r1, ip, ror #17
   15ae8:	andeq	r5, r1, ip, ror #17
   15aec:	andeq	r5, r1, ip, ror #17
   15af0:	andeq	r5, r1, ip, ror #17
   15af4:	andeq	r5, r1, ip, ror #17
   15af8:	andeq	r5, r1, ip, ror #17
   15afc:	andeq	r5, r1, ip, ror #17
   15b00:	andeq	r5, r1, ip, ror #17
   15b04:	andeq	r5, r1, ip, ror #17
   15b08:	andeq	r5, r1, ip, ror #17
   15b0c:	andeq	r5, r1, ip, ror #17
   15b10:	andeq	r5, r1, ip, ror #17
   15b14:	andeq	r5, r1, ip, ror #17
   15b18:	andeq	r5, r1, ip, ror #17
   15b1c:	andeq	r5, r1, ip, ror #17
   15b20:	andeq	r5, r1, ip, ror #17
   15b24:	andeq	r5, r1, ip, ror #17
   15b28:	andeq	r5, r1, ip, ror #17
   15b2c:	andeq	r5, r1, ip, ror #17
   15b30:	andeq	r5, r1, ip, ror #17
   15b34:	andeq	r5, r1, ip, ror #17
   15b38:	andeq	r5, r1, ip, ror #17
   15b3c:	andeq	r5, r1, r8, asr r3
   15b40:	andeq	r5, r1, r4, asr #23
   15b44:	andeq	r5, r1, r8, asr r3
   15b48:			; <UNDEFINED> instruction: 0x00015bb4
   15b4c:	mov	r3, #110	; 0x6e
   15b50:	b	15684 <__assert_fail@plt+0x3dd4>
   15b54:	mov	r3, #116	; 0x74
   15b58:	b	15684 <__assert_fail@plt+0x3dd4>
   15b5c:	sub	r2, fp, #2
   15b60:	mov	r3, #98	; 0x62
   15b64:	clz	r2, r2
   15b68:	lsr	r2, r2, #5
   15b6c:	b	15570 <__assert_fail@plt+0x3cc0>
   15b70:	sub	r2, fp, #2
   15b74:	mov	r3, #97	; 0x61
   15b78:	clz	r2, r2
   15b7c:	lsr	r2, r2, #5
   15b80:	b	15570 <__assert_fail@plt+0x3cc0>
   15b84:	ldr	r3, [sp, #28]
   15b88:	cmp	r3, #0
   15b8c:	bne	1577c <__assert_fail@plt+0x3ecc>
   15b90:	ldr	r3, [sp, #164]	; 0xa4
   15b94:	tst	r3, #1
   15b98:	bne	1620c <__assert_fail@plt+0x495c>
   15b9c:	ldr	r6, [sp, #28]
   15ba0:	sub	r2, fp, #2
   15ba4:	mov	r7, r6
   15ba8:	clz	r2, r2
   15bac:	lsr	r2, r2, #5
   15bb0:	b	15398 <__assert_fail@plt+0x3ae8>
   15bb4:	sub	r2, fp, #2
   15bb8:	clz	r2, r2
   15bbc:	lsr	r2, r2, #5
   15bc0:	b	15384 <__assert_fail@plt+0x3ad4>
   15bc4:	sub	r2, fp, #2
   15bc8:	mov	r6, #0
   15bcc:	clz	r2, r2
   15bd0:	lsr	r2, r2, #5
   15bd4:	b	1538c <__assert_fail@plt+0x3adc>
   15bd8:	sub	r2, fp, #2
   15bdc:	clz	r2, r2
   15be0:	lsr	r2, r2, #5
   15be4:	b	1538c <__assert_fail@plt+0x3adc>
   15be8:	sub	r2, fp, #2
   15bec:	mov	r3, #102	; 0x66
   15bf0:	clz	r2, r2
   15bf4:	lsr	r2, r2, #5
   15bf8:	b	15570 <__assert_fail@plt+0x3cc0>
   15bfc:	sub	r2, fp, #2
   15c00:	mov	r3, #118	; 0x76
   15c04:	clz	r2, r2
   15c08:	lsr	r2, r2, #5
   15c0c:	b	15570 <__assert_fail@plt+0x3cc0>
   15c10:	andeq	ip, r2, r0, lsl #30
   15c14:	andeq	fp, r1, ip, lsl #25
   15c18:	andeq	fp, r1, r4, ror ip
   15c1c:	andeq	fp, r1, r8, lsl #25
   15c20:	ldr	r3, [sp, #48]	; 0x30
   15c24:	ldrb	r5, [r3]
   15c28:	cmp	r5, #126	; 0x7e
   15c2c:	ldrls	pc, [pc, r5, lsl #2]
   15c30:	b	1589c <__assert_fail@plt+0x3fec>
   15c34:	andeq	r5, r1, ip, ror r7
   15c38:	muleq	r1, ip, r8
   15c3c:	muleq	r1, ip, r8
   15c40:	muleq	r1, ip, r8
   15c44:	muleq	r1, ip, r8
   15c48:	muleq	r1, ip, r8
   15c4c:	muleq	r1, ip, r8
   15c50:	andeq	r5, r1, r4, ror lr
   15c54:	andeq	r5, r1, ip, ror #28
   15c58:	andeq	r5, r1, r8, asr #14
   15c5c:	andeq	r5, r1, r0, lsl r7
   15c60:	andeq	r5, r1, r8, ror #14
   15c64:	andeq	r5, r1, r0, asr r7
   15c68:	andeq	r5, r1, r0, ror #28
   15c6c:	muleq	r1, ip, r8
   15c70:	muleq	r1, ip, r8
   15c74:	muleq	r1, ip, r8
   15c78:	muleq	r1, ip, r8
   15c7c:	muleq	r1, ip, r8
   15c80:	muleq	r1, ip, r8
   15c84:	muleq	r1, ip, r8
   15c88:	muleq	r1, ip, r8
   15c8c:	muleq	r1, ip, r8
   15c90:	muleq	r1, ip, r8
   15c94:	muleq	r1, ip, r8
   15c98:	muleq	r1, ip, r8
   15c9c:	muleq	r1, ip, r8
   15ca0:	muleq	r1, ip, r8
   15ca4:	muleq	r1, ip, r8
   15ca8:	muleq	r1, ip, r8
   15cac:	muleq	r1, ip, r8
   15cb0:	muleq	r1, ip, r8
   15cb4:	andeq	r5, r1, r8, asr lr
   15cb8:	andeq	r5, r1, r0, ror r7
   15cbc:	andeq	r5, r1, r0, ror r7
   15cc0:	andeq	r5, r1, ip, lsr lr
   15cc4:	andeq	r5, r1, r0, ror r7
   15cc8:	andeq	r5, r1, r0, lsr lr
   15ccc:	andeq	r5, r1, r0, ror r7
   15cd0:			; <UNDEFINED> instruction: 0x000155b0
   15cd4:	andeq	r5, r1, r0, ror r7
   15cd8:	andeq	r5, r1, r0, ror r7
   15cdc:	andeq	r5, r1, r0, ror r7
   15ce0:	andeq	r5, r1, r0, lsr lr
   15ce4:	andeq	r5, r1, r0, lsr lr
   15ce8:	andeq	r5, r1, r0, lsr lr
   15cec:	andeq	r5, r1, r0, lsr lr
   15cf0:	andeq	r5, r1, r0, lsr lr
   15cf4:	andeq	r5, r1, r0, lsr lr
   15cf8:	andeq	r5, r1, r0, lsr lr
   15cfc:	andeq	r5, r1, r0, lsr lr
   15d00:	andeq	r5, r1, r0, lsr lr
   15d04:	andeq	r5, r1, r0, lsr lr
   15d08:	andeq	r5, r1, r0, lsr lr
   15d0c:	andeq	r5, r1, r0, lsr lr
   15d10:	andeq	r5, r1, r0, lsr lr
   15d14:	andeq	r5, r1, r0, lsr lr
   15d18:	andeq	r5, r1, r0, lsr lr
   15d1c:	andeq	r5, r1, r0, lsr lr
   15d20:	andeq	r5, r1, r0, ror r7
   15d24:	andeq	r5, r1, r0, ror r7
   15d28:	andeq	r5, r1, r0, ror r7
   15d2c:	andeq	r5, r1, r0, ror r7
   15d30:	andeq	r5, r1, r4, lsl #11
   15d34:	muleq	r1, ip, r8
   15d38:	andeq	r5, r1, r0, lsr lr
   15d3c:	andeq	r5, r1, r0, lsr lr
   15d40:	andeq	r5, r1, r0, lsr lr
   15d44:	andeq	r5, r1, r0, lsr lr
   15d48:	andeq	r5, r1, r0, lsr lr
   15d4c:	andeq	r5, r1, r0, lsr lr
   15d50:	andeq	r5, r1, r0, lsr lr
   15d54:	andeq	r5, r1, r0, lsr lr
   15d58:	andeq	r5, r1, r0, lsr lr
   15d5c:	andeq	r5, r1, r0, lsr lr
   15d60:	andeq	r5, r1, r0, lsr lr
   15d64:	andeq	r5, r1, r0, lsr lr
   15d68:	andeq	r5, r1, r0, lsr lr
   15d6c:	andeq	r5, r1, r0, lsr lr
   15d70:	andeq	r5, r1, r0, lsr lr
   15d74:	andeq	r5, r1, r0, lsr lr
   15d78:	andeq	r5, r1, r0, lsr lr
   15d7c:	andeq	r5, r1, r0, lsr lr
   15d80:	andeq	r5, r1, r0, lsr lr
   15d84:	andeq	r5, r1, r0, lsr lr
   15d88:	andeq	r5, r1, r0, lsr lr
   15d8c:	andeq	r5, r1, r0, lsr lr
   15d90:	andeq	r5, r1, r0, lsr lr
   15d94:	andeq	r5, r1, r0, lsr lr
   15d98:	andeq	r5, r1, r0, lsr lr
   15d9c:	andeq	r5, r1, r0, lsr lr
   15da0:	andeq	r5, r1, r0, ror r7
   15da4:	andeq	r5, r1, ip, lsr r5
   15da8:	andeq	r5, r1, r0, lsr lr
   15dac:	andeq	r5, r1, r0, ror r7
   15db0:	andeq	r5, r1, r0, lsr lr
   15db4:	andeq	r5, r1, r0, ror r7
   15db8:	andeq	r5, r1, r0, lsr lr
   15dbc:	andeq	r5, r1, r0, lsr lr
   15dc0:	andeq	r5, r1, r0, lsr lr
   15dc4:	andeq	r5, r1, r0, lsr lr
   15dc8:	andeq	r5, r1, r0, lsr lr
   15dcc:	andeq	r5, r1, r0, lsr lr
   15dd0:	andeq	r5, r1, r0, lsr lr
   15dd4:	andeq	r5, r1, r0, lsr lr
   15dd8:	andeq	r5, r1, r0, lsr lr
   15ddc:	andeq	r5, r1, r0, lsr lr
   15de0:	andeq	r5, r1, r0, lsr lr
   15de4:	andeq	r5, r1, r0, lsr lr
   15de8:	andeq	r5, r1, r0, lsr lr
   15dec:	andeq	r5, r1, r0, lsr lr
   15df0:	andeq	r5, r1, r0, lsr lr
   15df4:	andeq	r5, r1, r0, lsr lr
   15df8:	andeq	r5, r1, r0, lsr lr
   15dfc:	andeq	r5, r1, r0, lsr lr
   15e00:	andeq	r5, r1, r0, lsr lr
   15e04:	andeq	r5, r1, r0, lsr lr
   15e08:	andeq	r5, r1, r0, lsr lr
   15e0c:	andeq	r5, r1, r0, lsr lr
   15e10:	andeq	r5, r1, r0, lsr lr
   15e14:	andeq	r5, r1, r0, lsr lr
   15e18:	andeq	r5, r1, r0, lsr lr
   15e1c:	andeq	r5, r1, r0, lsr lr
   15e20:	andeq	r5, r1, r4, asr r3
   15e24:	andeq	r5, r1, r0, ror r7
   15e28:	andeq	r5, r1, r4, asr r3
   15e2c:	andeq	r5, r1, ip, lsr lr
   15e30:	mov	r6, r7
   15e34:	mov	r7, #0
   15e38:	b	153b4 <__assert_fail@plt+0x3b04>
   15e3c:	cmp	r9, #0
   15e40:	mov	r3, #0
   15e44:	beq	15884 <__assert_fail@plt+0x3fd4>
   15e48:	mov	r6, #0
   15e4c:	mov	r7, r3
   15e50:	mov	r3, r6
   15e54:	b	153b8 <__assert_fail@plt+0x3b08>
   15e58:	mov	r3, #0
   15e5c:	b	15864 <__assert_fail@plt+0x3fb4>
   15e60:	mov	r7, #0
   15e64:	mov	r3, #114	; 0x72
   15e68:	b	15684 <__assert_fail@plt+0x3dd4>
   15e6c:	mov	r5, #98	; 0x62
   15e70:	b	15714 <__assert_fail@plt+0x3e64>
   15e74:	mov	r5, #97	; 0x61
   15e78:	b	15754 <__assert_fail@plt+0x3ea4>
   15e7c:	ldr	r3, [sp, #32]
   15e80:	cmp	r3, #0
   15e84:	bne	162cc <__assert_fail@plt+0x4a1c>
   15e88:	add	r9, r9, #1
   15e8c:	ldr	r3, [sp, #44]	; 0x2c
   15e90:	mov	r6, #0
   15e94:	mov	r5, #92	; 0x5c
   15e98:	b	1564c <__assert_fail@plt+0x3d9c>
   15e9c:	ldr	r3, [sp, #36]	; 0x24
   15ea0:	ldrb	r3, [r3, #1]
   15ea4:	adds	r3, r3, #0
   15ea8:	movne	r3, #1
   15eac:	b	15370 <__assert_fail@plt+0x3ac0>
   15eb0:	ldr	r3, [sp, #164]	; 0xa4
   15eb4:	ands	r3, r3, #4
   15eb8:	beq	15edc <__assert_fail@plt+0x462c>
   15ebc:	ldr	r2, [sp, #24]
   15ec0:	add	r3, r9, #2
   15ec4:	cmp	r3, r2
   15ec8:	bcs	15edc <__assert_fail@plt+0x462c>
   15ecc:	ldr	r2, [sp, #48]	; 0x30
   15ed0:	ldrb	r5, [r2, #1]
   15ed4:	cmp	r5, #63	; 0x3f
   15ed8:	beq	16340 <__assert_fail@plt+0x4a90>
   15edc:	mov	r2, #0
   15ee0:	mov	r6, r2
   15ee4:	mov	r5, #63	; 0x3f
   15ee8:	b	15398 <__assert_fail@plt+0x3ae8>
   15eec:	ldr	r3, [sp, #32]
   15ef0:	cmp	r3, #0
   15ef4:	bne	162cc <__assert_fail@plt+0x4a1c>
   15ef8:	mov	r6, r3
   15efc:	mov	r5, #63	; 0x3f
   15f00:	b	153e0 <__assert_fail@plt+0x3b30>
   15f04:	ldr	r3, [sp, #24]
   15f08:	cmn	r3, #1
   15f0c:	mov	r3, #0
   15f10:	str	r3, [sp, #108]	; 0x6c
   15f14:	str	r3, [sp, #112]	; 0x70
   15f18:	bne	15f28 <__assert_fail@plt+0x4678>
   15f1c:	ldr	r0, [sp, #36]	; 0x24
   15f20:	bl	116dc <strlen@plt>
   15f24:	str	r0, [sp, #24]
   15f28:	mov	r3, #0
   15f2c:	str	sl, [sp, #88]	; 0x58
   15f30:	ldr	sl, [sp, #36]	; 0x24
   15f34:	str	r5, [sp, #92]	; 0x5c
   15f38:	mov	r5, r3
   15f3c:	str	r7, [sp, #96]	; 0x60
   15f40:	str	r4, [sp, #100]	; 0x64
   15f44:	str	r8, [sp, #84]	; 0x54
   15f48:	ldr	r3, [sp, #24]
   15f4c:	add	r4, r9, r5
   15f50:	add	r7, sl, r4
   15f54:	sub	r2, r3, r4
   15f58:	mov	r1, r7
   15f5c:	add	r3, sp, #108	; 0x6c
   15f60:	add	r0, sp, #104	; 0x68
   15f64:	bl	1a620 <fts_children@@Base+0x204>
   15f68:	subs	r8, r0, #0
   15f6c:	beq	15fbc <__assert_fail@plt+0x470c>
   15f70:	cmn	r8, #1
   15f74:	beq	1631c <__assert_fail@plt+0x4a6c>
   15f78:	cmn	r8, #2
   15f7c:	beq	1643c <__assert_fail@plt+0x4b8c>
   15f80:	ldr	r3, [sp, #32]
   15f84:	cmp	fp, #2
   15f88:	movne	r3, #0
   15f8c:	andeq	r3, r3, #1
   15f90:	cmp	r3, #0
   15f94:	bne	1611c <__assert_fail@plt+0x486c>
   15f98:	ldr	r0, [sp, #104]	; 0x68
   15f9c:	bl	115c8 <iswprint@plt>
   15fa0:	add	r5, r5, r8
   15fa4:	cmp	r0, #0
   15fa8:	add	r0, sp, #108	; 0x6c
   15fac:	moveq	r6, #0
   15fb0:	bl	11550 <mbsinit@plt>
   15fb4:	cmp	r0, #0
   15fb8:	beq	15f48 <__assert_fail@plt+0x4698>
   15fbc:	ldr	r3, [sp, #28]
   15fc0:	mov	ip, r5
   15fc4:	eor	r2, r6, #1
   15fc8:	ldr	r5, [sp, #92]	; 0x5c
   15fcc:	ldr	r7, [sp, #96]	; 0x60
   15fd0:	ldr	r4, [sp, #100]	; 0x64
   15fd4:	ldr	r8, [sp, #84]	; 0x54
   15fd8:	ldr	sl, [sp, #88]	; 0x58
   15fdc:	and	r2, r2, r3
   15fe0:	cmp	ip, #1
   15fe4:	bls	158e4 <__assert_fail@plt+0x4034>
   15fe8:	add	r1, ip, r9
   15fec:	ldr	lr, [sp, #48]	; 0x30
   15ff0:	mov	r0, #0
   15ff4:	str	r6, [sp, #48]	; 0x30
   15ff8:	mov	ip, #39	; 0x27
   15ffc:	ldr	r6, [sp, #44]	; 0x2c
   16000:	b	160b8 <__assert_fail@plt+0x4808>
   16004:	ldr	r0, [sp, #32]
   16008:	sub	r3, fp, #2
   1600c:	cmp	r0, #0
   16010:	clz	r3, r3
   16014:	lsr	r3, r3, #5
   16018:	bne	16220 <__assert_fail@plt+0x4970>
   1601c:	eor	r0, r6, #1
   16020:	ands	r3, r3, r0
   16024:	beq	16054 <__assert_fail@plt+0x47a4>
   16028:	add	r0, r4, #1
   1602c:	cmp	sl, r4
   16030:	strbhi	ip, [r8, r4]
   16034:	cmp	sl, r0
   16038:	movhi	r6, #36	; 0x24
   1603c:	strbhi	r6, [r8, r0]
   16040:	add	r0, r4, #2
   16044:	mov	r6, r3
   16048:	add	r4, r4, #3
   1604c:	cmp	sl, r0
   16050:	strbhi	ip, [r8, r0]
   16054:	cmp	sl, r4
   16058:	movhi	r3, #92	; 0x5c
   1605c:	strbhi	r3, [r8, r4]
   16060:	add	r3, r4, #1
   16064:	cmp	sl, r3
   16068:	lsrhi	r0, r5, #6
   1606c:	addhi	r0, r0, #48	; 0x30
   16070:	strbhi	r0, [r8, r3]
   16074:	add	r0, r4, #2
   16078:	cmp	sl, r0
   1607c:	lsrhi	r3, r5, #3
   16080:	andhi	r3, r3, #7
   16084:	addhi	r3, r3, #48	; 0x30
   16088:	add	r9, r9, #1
   1608c:	strbhi	r3, [r8, r0]
   16090:	and	r5, r5, #7
   16094:	cmp	r9, r1
   16098:	add	r5, r5, #48	; 0x30
   1609c:	add	r4, r4, #3
   160a0:	bcs	16240 <__assert_fail@plt+0x4990>
   160a4:	mov	r0, r2
   160a8:	cmp	sl, r4
   160ac:	strbhi	r5, [r8, r4]
   160b0:	ldrb	r5, [lr, #1]!
   160b4:	add	r4, r4, #1
   160b8:	cmp	r2, #0
   160bc:	bne	16004 <__assert_fail@plt+0x4754>
   160c0:	eor	r3, r0, #1
   160c4:	and	r3, r3, r6
   160c8:	cmp	r7, #0
   160cc:	uxtb	r3, r3
   160d0:	beq	160e4 <__assert_fail@plt+0x4834>
   160d4:	cmp	sl, r4
   160d8:	movhi	r7, #92	; 0x5c
   160dc:	strbhi	r7, [r8, r4]
   160e0:	add	r4, r4, #1
   160e4:	add	r9, r9, #1
   160e8:	cmp	r9, r1
   160ec:	bcs	16234 <__assert_fail@plt+0x4984>
   160f0:	cmp	r3, #0
   160f4:	beq	16260 <__assert_fail@plt+0x49b0>
   160f8:	cmp	sl, r4
   160fc:	add	r3, r4, #1
   16100:	strbhi	ip, [r8, r4]
   16104:	mov	r7, #0
   16108:	cmp	sl, r3
   1610c:	strbhi	ip, [r8, r3]
   16110:	add	r4, r4, #2
   16114:	mov	r6, r7
   16118:	b	160a8 <__assert_fail@plt+0x47f8>
   1611c:	cmp	r8, #1
   16120:	beq	15f98 <__assert_fail@plt+0x46e8>
   16124:	add	r1, r4, #1
   16128:	add	r3, sl, r8
   1612c:	add	r1, sl, r1
   16130:	add	r4, r3, r4
   16134:	ldrb	r3, [r1], #1
   16138:	sub	r3, r3, #91	; 0x5b
   1613c:	cmp	r3, #33	; 0x21
   16140:	ldrls	pc, [pc, r3, lsl #2]
   16144:	b	161d0 <__assert_fail@plt+0x4920>
   16148:	ldrdeq	r6, [r1], -ip
   1614c:	ldrdeq	r6, [r1], -ip
   16150:	ldrdeq	r6, [r1], -r0
   16154:	ldrdeq	r6, [r1], -ip
   16158:	ldrdeq	r6, [r1], -r0
   1615c:	ldrdeq	r6, [r1], -ip
   16160:	ldrdeq	r6, [r1], -r0
   16164:	ldrdeq	r6, [r1], -r0
   16168:	ldrdeq	r6, [r1], -r0
   1616c:	ldrdeq	r6, [r1], -r0
   16170:	ldrdeq	r6, [r1], -r0
   16174:	ldrdeq	r6, [r1], -r0
   16178:	ldrdeq	r6, [r1], -r0
   1617c:	ldrdeq	r6, [r1], -r0
   16180:	ldrdeq	r6, [r1], -r0
   16184:	ldrdeq	r6, [r1], -r0
   16188:	ldrdeq	r6, [r1], -r0
   1618c:	ldrdeq	r6, [r1], -r0
   16190:	ldrdeq	r6, [r1], -r0
   16194:	ldrdeq	r6, [r1], -r0
   16198:	ldrdeq	r6, [r1], -r0
   1619c:	ldrdeq	r6, [r1], -r0
   161a0:	ldrdeq	r6, [r1], -r0
   161a4:	ldrdeq	r6, [r1], -r0
   161a8:	ldrdeq	r6, [r1], -r0
   161ac:	ldrdeq	r6, [r1], -r0
   161b0:	ldrdeq	r6, [r1], -r0
   161b4:	ldrdeq	r6, [r1], -r0
   161b8:	ldrdeq	r6, [r1], -r0
   161bc:	ldrdeq	r6, [r1], -r0
   161c0:	ldrdeq	r6, [r1], -r0
   161c4:	ldrdeq	r6, [r1], -r0
   161c8:	ldrdeq	r6, [r1], -r0
   161cc:	ldrdeq	r6, [r1], -ip
   161d0:	cmp	r4, r1
   161d4:	bne	16134 <__assert_fail@plt+0x4884>
   161d8:	b	15f98 <__assert_fail@plt+0x46e8>
   161dc:	ldr	fp, [sp, #84]	; 0x54
   161e0:	ldr	sl, [sp, #88]	; 0x58
   161e4:	mov	r8, #2
   161e8:	b	156a4 <__assert_fail@plt+0x3df4>
   161ec:	cmp	sl, r4
   161f0:	movls	r1, r4
   161f4:	bls	157f4 <__assert_fail@plt+0x3f44>
   161f8:	ldr	r3, [sp, #44]	; 0x2c
   161fc:	b	157e4 <__assert_fail@plt+0x3f34>
   16200:	str	sl, [sp, #72]	; 0x48
   16204:	ldr	sl, [sp, #32]
   16208:	b	1561c <__assert_fail@plt+0x3d6c>
   1620c:	add	r9, r9, #1
   16210:	b	14f10 <__assert_fail@plt+0x3660>
   16214:	ldr	r2, [sp, #28]
   16218:	mov	r6, #0
   1621c:	b	15fe8 <__assert_fail@plt+0x4738>
   16220:	str	fp, [sp, #160]	; 0xa0
   16224:	str	r3, [sp, #28]
   16228:	mov	fp, r8
   1622c:	ldr	r8, [sp, #160]	; 0xa0
   16230:	b	156a4 <__assert_fail@plt+0x3df4>
   16234:	str	r6, [sp, #44]	; 0x2c
   16238:	ldr	r6, [sp, #48]	; 0x30
   1623c:	b	1564c <__assert_fail@plt+0x3d9c>
   16240:	str	r6, [sp, #44]	; 0x2c
   16244:	ldr	r6, [sp, #48]	; 0x30
   16248:	b	15458 <__assert_fail@plt+0x3ba8>
   1624c:	add	r4, r4, #4
   16250:	str	r3, [sp, #44]	; 0x2c
   16254:	mov	r6, #0
   16258:	mov	r5, #48	; 0x30
   1625c:	b	153e0 <__assert_fail@plt+0x3b30>
   16260:	mov	r7, r3
   16264:	b	160a8 <__assert_fail@plt+0x47f8>
   16268:	ldr	r3, [pc, #-1624]	; 15c18 <__assert_fail@plt+0x4368>
   1626c:	mov	r4, #1
   16270:	str	r4, [sp, #40]	; 0x28
   16274:	str	r4, [sp, #28]
   16278:	str	r4, [sp, #52]	; 0x34
   1627c:	str	sl, [sp, #72]	; 0x48
   16280:	str	sl, [sp, #68]	; 0x44
   16284:	str	sl, [sp, #44]	; 0x2c
   16288:	str	sl, [sp, #32]
   1628c:	str	r3, [sp, #60]	; 0x3c
   16290:	b	14f00 <__assert_fail@plt+0x3650>
   16294:	mov	r3, r6
   16298:	mov	r5, #48	; 0x30
   1629c:	mov	r6, #0
   162a0:	b	153e0 <__assert_fail@plt+0x3b30>
   162a4:	cmp	sl, r4
   162a8:	movhi	r3, #48	; 0x30
   162ac:	strbhi	r3, [r8, r4]
   162b0:	add	r3, r1, #2
   162b4:	cmp	sl, r3
   162b8:	movhi	r0, #48	; 0x30
   162bc:	strbhi	r0, [r8, r3]
   162c0:	add	r4, r1, #3
   162c4:	mov	r5, #48	; 0x30
   162c8:	b	15828 <__assert_fail@plt+0x3f78>
   162cc:	str	fp, [sp, #160]	; 0xa0
   162d0:	mov	fp, r8
   162d4:	ldr	r8, [sp, #160]	; 0xa0
   162d8:	b	156a4 <__assert_fail@plt+0x3df4>
   162dc:	ldr	r2, [sp, #80]	; 0x50
   162e0:	ldrb	r3, [r2]
   162e4:	cmp	r3, #0
   162e8:	beq	14ed0 <__assert_fail@plt+0x3620>
   162ec:	cmp	sl, r4
   162f0:	strbhi	r3, [fp, r4]
   162f4:	ldrb	r3, [r2, #1]!
   162f8:	add	r4, r4, #1
   162fc:	cmp	r3, #0
   16300:	bne	162ec <__assert_fail@plt+0x4a3c>
   16304:	b	14ed0 <__assert_fail@plt+0x3620>
   16308:	str	fp, [sp, #160]	; 0xa0
   1630c:	mov	r3, #0
   16310:	mov	fp, r8
   16314:	ldr	r8, [sp, #160]	; 0xa0
   16318:	b	15738 <__assert_fail@plt+0x3e88>
   1631c:	mov	ip, r5
   16320:	ldr	r7, [sp, #96]	; 0x60
   16324:	ldr	r5, [sp, #92]	; 0x5c
   16328:	ldr	r4, [sp, #100]	; 0x64
   1632c:	ldr	r8, [sp, #84]	; 0x54
   16330:	ldr	sl, [sp, #88]	; 0x58
   16334:	ldr	r2, [sp, #28]
   16338:	mov	r6, #0
   1633c:	b	15fe0 <__assert_fail@plt+0x4730>
   16340:	ldr	r2, [sp, #36]	; 0x24
   16344:	ldrb	r1, [r2, r3]
   16348:	sub	r2, r1, #33	; 0x21
   1634c:	cmp	r2, #29
   16350:	ldrls	pc, [pc, r2, lsl #2]
   16354:	b	16430 <__assert_fail@plt+0x4b80>
   16358:	ldrdeq	r6, [r1], -r0
   1635c:	andeq	r6, r1, r0, lsr r4
   16360:	andeq	r6, r1, r0, lsr r4
   16364:	andeq	r6, r1, r0, lsr r4
   16368:	andeq	r6, r1, r0, lsr r4
   1636c:	andeq	r6, r1, r0, lsr r4
   16370:	ldrdeq	r6, [r1], -r0
   16374:	ldrdeq	r6, [r1], -r0
   16378:	ldrdeq	r6, [r1], -r0
   1637c:	andeq	r6, r1, r0, lsr r4
   16380:	andeq	r6, r1, r0, lsr r4
   16384:	andeq	r6, r1, r0, lsr r4
   16388:	ldrdeq	r6, [r1], -r0
   1638c:	andeq	r6, r1, r0, lsr r4
   16390:	ldrdeq	r6, [r1], -r0
   16394:	andeq	r6, r1, r0, lsr r4
   16398:	andeq	r6, r1, r0, lsr r4
   1639c:	andeq	r6, r1, r0, lsr r4
   163a0:	andeq	r6, r1, r0, lsr r4
   163a4:	andeq	r6, r1, r0, lsr r4
   163a8:	andeq	r6, r1, r0, lsr r4
   163ac:	andeq	r6, r1, r0, lsr r4
   163b0:	andeq	r6, r1, r0, lsr r4
   163b4:	andeq	r6, r1, r0, lsr r4
   163b8:	andeq	r6, r1, r0, lsr r4
   163bc:	andeq	r6, r1, r0, lsr r4
   163c0:	andeq	r6, r1, r0, lsr r4
   163c4:	ldrdeq	r6, [r1], -r0
   163c8:	ldrdeq	r6, [r1], -r0
   163cc:	ldrdeq	r6, [r1], -r0
   163d0:	ldr	r2, [sp, #32]
   163d4:	cmp	r2, #0
   163d8:	bne	164dc <__assert_fail@plt+0x4c2c>
   163dc:	cmp	sl, r4
   163e0:	movhi	r2, #63	; 0x3f
   163e4:	strbhi	r2, [r8, r4]
   163e8:	add	r2, r4, #1
   163ec:	cmp	sl, r2
   163f0:	movhi	r0, #34	; 0x22
   163f4:	strbhi	r0, [r8, r2]
   163f8:	add	r2, r4, #2
   163fc:	cmp	sl, r2
   16400:	movhi	r0, #34	; 0x22
   16404:	strbhi	r0, [r8, r2]
   16408:	add	r2, r4, #3
   1640c:	cmp	sl, r2
   16410:	movhi	r0, #63	; 0x3f
   16414:	strbhi	r0, [r8, r2]
   16418:	mov	r2, #0
   1641c:	add	r4, r4, #4
   16420:	mov	r5, r1
   16424:	mov	r9, r3
   16428:	mov	r6, r2
   1642c:	b	15828 <__assert_fail@plt+0x3f78>
   16430:	mov	r2, #0
   16434:	mov	r6, r2
   16438:	b	15398 <__assert_fail@plt+0x3ae8>
   1643c:	ldr	r0, [sp, #24]
   16440:	mov	r1, r4
   16444:	cmp	r1, r0
   16448:	mov	r2, r7
   1644c:	mov	r3, r5
   16450:	mov	ip, r5
   16454:	ldr	r7, [sp, #96]	; 0x60
   16458:	ldr	r5, [sp, #92]	; 0x5c
   1645c:	ldr	r4, [sp, #100]	; 0x64
   16460:	ldr	r8, [sp, #84]	; 0x54
   16464:	ldr	sl, [sp, #88]	; 0x58
   16468:	bcs	1649c <__assert_fail@plt+0x4bec>
   1646c:	ldrb	r6, [r2]
   16470:	cmp	r6, #0
   16474:	bne	16488 <__assert_fail@plt+0x4bd8>
   16478:	b	165b8 <__assert_fail@plt+0x4d08>
   1647c:	ldrb	r6, [r2, #1]!
   16480:	cmp	r6, #0
   16484:	beq	16540 <__assert_fail@plt+0x4c90>
   16488:	add	r3, r3, #1
   1648c:	add	r1, r9, r3
   16490:	cmp	r1, r0
   16494:	bcc	1647c <__assert_fail@plt+0x4bcc>
   16498:	mov	ip, r3
   1649c:	ldr	r2, [sp, #28]
   164a0:	mov	r6, #0
   164a4:	b	15fe0 <__assert_fail@plt+0x4730>
   164a8:	mov	r3, #1
   164ac:	str	r3, [sp, #40]	; 0x28
   164b0:	str	r3, [sp, #32]
   164b4:	str	r3, [sp, #28]
   164b8:	str	r3, [sp, #52]	; 0x34
   164bc:	ldr	r3, [pc, #-2220]	; 15c18 <__assert_fail@plt+0x4368>
   164c0:	mov	r2, #0
   164c4:	str	r2, [sp, #68]	; 0x44
   164c8:	str	r2, [sp, #44]	; 0x2c
   164cc:	str	r2, [sp, #72]	; 0x48
   164d0:	mov	r4, r2
   164d4:	str	r3, [sp, #60]	; 0x3c
   164d8:	b	14f00 <__assert_fail@plt+0x3650>
   164dc:	str	fp, [sp, #160]	; 0xa0
   164e0:	mov	fp, r8
   164e4:	ldr	r8, [sp, #160]	; 0xa0
   164e8:	b	156b0 <__assert_fail@plt+0x3e00>
   164ec:	mov	r2, r3
   164f0:	ldr	r3, [sp, #60]	; 0x3c
   164f4:	cmp	r3, #0
   164f8:	moveq	r2, #0
   164fc:	andne	r2, r2, #1
   16500:	cmp	r2, #0
   16504:	beq	16530 <__assert_fail@plt+0x4c80>
   16508:	mov	r2, r3
   1650c:	ldrb	r3, [r3]
   16510:	cmp	r3, #0
   16514:	beq	16530 <__assert_fail@plt+0x4c80>
   16518:	cmp	sl, r4
   1651c:	strbhi	r3, [fp, r4]
   16520:	ldrb	r3, [r2, #1]!
   16524:	add	r4, r4, #1
   16528:	cmp	r3, #0
   1652c:	bne	16518 <__assert_fail@plt+0x4c68>
   16530:	cmp	sl, r4
   16534:	movhi	r3, #0
   16538:	strbhi	r3, [fp, r4]
   1653c:	b	156f0 <__assert_fail@plt+0x3e40>
   16540:	mov	ip, r3
   16544:	ldr	r2, [sp, #28]
   16548:	b	15fe0 <__assert_fail@plt+0x4730>
   1654c:	str	fp, [sp, #160]	; 0xa0
   16550:	mov	fp, r8
   16554:	ldr	r8, [sp, #160]	; 0xa0
   16558:	sub	r3, r8, #2
   1655c:	clz	r3, r3
   16560:	lsr	r3, r3, #5
   16564:	str	r3, [sp, #28]
   16568:	b	156a4 <__assert_fail@plt+0x3df4>
   1656c:	ldr	r3, [sp, #76]	; 0x4c
   16570:	mov	ip, #5
   16574:	str	r3, [sp, #16]
   16578:	ldr	r3, [sp, #80]	; 0x50
   1657c:	ldr	r2, [sp, #36]	; 0x24
   16580:	str	r3, [sp, #12]
   16584:	ldr	r3, [sp, #56]	; 0x38
   16588:	ldr	r1, [sp, #72]	; 0x48
   1658c:	str	r3, [sp, #8]
   16590:	ldr	r3, [sp, #164]	; 0xa4
   16594:	mov	r0, fp
   16598:	str	r3, [sp, #4]
   1659c:	str	ip, [sp]
   165a0:	ldr	r3, [sp, #24]
   165a4:	bl	14e08 <__assert_fail@plt+0x3558>
   165a8:	mov	r4, r0
   165ac:	b	156f0 <__assert_fail@plt+0x3e40>
   165b0:	mov	r8, #2
   165b4:	b	156a4 <__assert_fail@plt+0x3df4>
   165b8:	ldr	r2, [sp, #28]
   165bc:	b	15fe0 <__assert_fail@plt+0x4730>
   165c0:	mov	r3, #0
   165c4:	str	r3, [sp, #68]	; 0x44
   165c8:	str	r3, [sp, #44]	; 0x2c
   165cc:	str	r3, [sp, #72]	; 0x48
   165d0:	str	r3, [sp, #28]
   165d4:	mov	r4, r3
   165d8:	ldr	r3, [pc, #-2500]	; 15c1c <__assert_fail@plt+0x436c>
   165dc:	mov	r2, #1
   165e0:	str	r2, [sp, #40]	; 0x28
   165e4:	str	r2, [sp, #32]
   165e8:	str	r2, [sp, #52]	; 0x34
   165ec:	str	r3, [sp, #60]	; 0x3c
   165f0:	b	14f00 <__assert_fail@plt+0x3650>
   165f4:	bl	11580 <__stack_chk_fail@plt>
   165f8:	mov	r5, r3
   165fc:	mov	r6, #0
   16600:	b	153f4 <__assert_fail@plt+0x3b44>
   16604:	mov	r3, #0
   16608:	mov	r2, #1
   1660c:	str	r3, [sp, #44]	; 0x2c
   16610:	str	r3, [sp, #72]	; 0x48
   16614:	str	r2, [sp, #40]	; 0x28
   16618:	b	15510 <__assert_fail@plt+0x3c60>
   1661c:	bl	1185c <abort@plt>
   16620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16624:	sub	sp, sp, #44	; 0x2c
   16628:	mov	r6, r0
   1662c:	mov	r4, r3
   16630:	mov	sl, r1
   16634:	mov	fp, r2
   16638:	bl	1170c <__errno_location@plt>
   1663c:	ldr	r7, [pc, #364]	; 167b0 <__assert_fail@plt+0x4f00>
   16640:	cmp	r6, #0
   16644:	ldr	r5, [r7]
   16648:	ldr	r3, [r0]
   1664c:	str	r3, [sp, #24]
   16650:	blt	167ac <__assert_fail@plt+0x4efc>
   16654:	ldr	r3, [r7, #4]
   16658:	mov	r8, r0
   1665c:	cmp	r3, r6
   16660:	bgt	166ac <__assert_fail@plt+0x4dfc>
   16664:	cmn	r6, #-268435454	; 0xf0000002
   16668:	bgt	167a8 <__assert_fail@plt+0x4ef8>
   1666c:	add	r9, r6, #1
   16670:	add	r3, r7, #8
   16674:	cmp	r5, r3
   16678:	lsl	r1, r9, #3
   1667c:	beq	16788 <__assert_fail@plt+0x4ed8>
   16680:	mov	r0, r5
   16684:	bl	175a0 <__assert_fail@plt+0x5cf0>
   16688:	mov	r5, r0
   1668c:	str	r0, [r7]
   16690:	ldr	r0, [r7, #4]
   16694:	mov	r1, #0
   16698:	sub	r2, r9, r0
   1669c:	add	r0, r5, r0, lsl #3
   166a0:	lsl	r2, r2, #3
   166a4:	bl	11724 <memset@plt>
   166a8:	str	r9, [r7, #4]
   166ac:	add	r3, r5, r6, lsl #3
   166b0:	ldr	r1, [r4, #4]
   166b4:	ldr	r7, [r3, #4]
   166b8:	ldr	r9, [r5, r6, lsl #3]
   166bc:	ldr	r2, [r4, #40]	; 0x28
   166c0:	ldr	ip, [r4, #44]	; 0x2c
   166c4:	str	r3, [sp, #28]
   166c8:	ldr	r3, [r4]
   166cc:	orr	r1, r1, #1
   166d0:	add	lr, r4, #8
   166d4:	str	r1, [sp, #36]	; 0x24
   166d8:	str	r1, [sp, #4]
   166dc:	str	r2, [sp, #12]
   166e0:	str	r3, [sp]
   166e4:	mov	r0, r7
   166e8:	mov	r1, r9
   166ec:	str	ip, [sp, #16]
   166f0:	str	lr, [sp, #8]
   166f4:	mov	r3, fp
   166f8:	mov	r2, sl
   166fc:	str	lr, [sp, #32]
   16700:	bl	14e08 <__assert_fail@plt+0x3558>
   16704:	cmp	r9, r0
   16708:	bhi	16774 <__assert_fail@plt+0x4ec4>
   1670c:	ldr	r3, [pc, #160]	; 167b4 <__assert_fail@plt+0x4f04>
   16710:	add	r9, r0, #1
   16714:	cmp	r7, r3
   16718:	str	r9, [r5, r6, lsl #3]
   1671c:	beq	16728 <__assert_fail@plt+0x4e78>
   16720:	mov	r0, r7
   16724:	bl	11520 <free@plt>
   16728:	mov	r0, r9
   1672c:	bl	17544 <__assert_fail@plt+0x5c94>
   16730:	ldr	lr, [sp, #28]
   16734:	ldr	ip, [r4, #44]	; 0x2c
   16738:	ldr	r5, [r4, #40]	; 0x28
   1673c:	mov	r3, fp
   16740:	mov	r2, sl
   16744:	mov	r1, r9
   16748:	str	r0, [lr, #4]
   1674c:	ldr	lr, [r4]
   16750:	ldr	r4, [sp, #32]
   16754:	str	ip, [sp, #16]
   16758:	str	r4, [sp, #8]
   1675c:	ldr	r4, [sp, #36]	; 0x24
   16760:	str	r5, [sp, #12]
   16764:	str	r4, [sp, #4]
   16768:	str	lr, [sp]
   1676c:	mov	r7, r0
   16770:	bl	14e08 <__assert_fail@plt+0x3558>
   16774:	ldr	r3, [sp, #24]
   16778:	mov	r0, r7
   1677c:	str	r3, [r8]
   16780:	add	sp, sp, #44	; 0x2c
   16784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16788:	mov	r0, #0
   1678c:	bl	175a0 <__assert_fail@plt+0x5cf0>
   16790:	ldr	r3, [pc, #32]	; 167b8 <__assert_fail@plt+0x4f08>
   16794:	mov	r5, r0
   16798:	ldm	r3, {r0, r1}
   1679c:	str	r5, [r7]
   167a0:	stm	r5, {r0, r1}
   167a4:	b	16690 <__assert_fail@plt+0x4de0>
   167a8:	bl	1778c <__assert_fail@plt+0x5edc>
   167ac:	bl	1185c <abort@plt>
   167b0:	andeq	sp, r2, ip, ror r1
   167b4:	andeq	sp, r2, ip, ror #3
   167b8:	andeq	sp, r2, r4, lsl #3
   167bc:	push	{r4, r5, r6, lr}
   167c0:	mov	r5, r0
   167c4:	bl	1170c <__errno_location@plt>
   167c8:	cmp	r5, #0
   167cc:	mov	r1, #48	; 0x30
   167d0:	mov	r4, r0
   167d4:	ldr	r0, [pc, #16]	; 167ec <__assert_fail@plt+0x4f3c>
   167d8:	ldr	r6, [r4]
   167dc:	movne	r0, r5
   167e0:	bl	1774c <__assert_fail@plt+0x5e9c>
   167e4:	str	r6, [r4]
   167e8:	pop	{r4, r5, r6, pc}
   167ec:	andeq	sp, r2, ip, ror #5
   167f0:	ldr	r3, [pc, #12]	; 16804 <__assert_fail@plt+0x4f54>
   167f4:	cmp	r0, #0
   167f8:	moveq	r0, r3
   167fc:	ldr	r0, [r0]
   16800:	bx	lr
   16804:	andeq	sp, r2, ip, ror #5
   16808:	ldr	r3, [pc, #12]	; 1681c <__assert_fail@plt+0x4f6c>
   1680c:	cmp	r0, #0
   16810:	moveq	r0, r3
   16814:	str	r1, [r0]
   16818:	bx	lr
   1681c:	andeq	sp, r2, ip, ror #5
   16820:	ldr	r3, [pc, #52]	; 1685c <__assert_fail@plt+0x4fac>
   16824:	cmp	r0, #0
   16828:	moveq	r0, r3
   1682c:	add	r3, r0, #8
   16830:	push	{lr}		; (str lr, [sp, #-4]!)
   16834:	lsr	lr, r1, #5
   16838:	and	r1, r1, #31
   1683c:	ldr	ip, [r3, lr, lsl #2]
   16840:	lsr	r0, ip, r1
   16844:	eor	r2, r2, r0
   16848:	and	r2, r2, #1
   1684c:	and	r0, r0, #1
   16850:	eor	r1, ip, r2, lsl r1
   16854:	str	r1, [r3, lr, lsl #2]
   16858:	pop	{pc}		; (ldr pc, [sp], #4)
   1685c:	andeq	sp, r2, ip, ror #5
   16860:	ldr	r3, [pc, #16]	; 16878 <__assert_fail@plt+0x4fc8>
   16864:	cmp	r0, #0
   16868:	movne	r3, r0
   1686c:	ldr	r0, [r3, #4]
   16870:	str	r1, [r3, #4]
   16874:	bx	lr
   16878:	andeq	sp, r2, ip, ror #5
   1687c:	ldr	r3, [pc, #44]	; 168b0 <__assert_fail@plt+0x5000>
   16880:	cmp	r0, #0
   16884:	moveq	r0, r3
   16888:	mov	ip, #10
   1688c:	cmp	r2, #0
   16890:	cmpne	r1, #0
   16894:	str	ip, [r0]
   16898:	beq	168a8 <__assert_fail@plt+0x4ff8>
   1689c:	str	r1, [r0, #40]	; 0x28
   168a0:	str	r2, [r0, #44]	; 0x2c
   168a4:	bx	lr
   168a8:	push	{r4, lr}
   168ac:	bl	1185c <abort@plt>
   168b0:	andeq	sp, r2, ip, ror #5
   168b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   168b8:	sub	sp, sp, #24
   168bc:	ldr	ip, [pc, #108]	; 16930 <__assert_fail@plt+0x5080>
   168c0:	ldr	r4, [sp, #56]	; 0x38
   168c4:	mov	r9, r2
   168c8:	cmp	r4, #0
   168cc:	moveq	r4, ip
   168d0:	mov	sl, r3
   168d4:	mov	r7, r0
   168d8:	mov	r8, r1
   168dc:	bl	1170c <__errno_location@plt>
   168e0:	ldr	r3, [r4, #44]	; 0x2c
   168e4:	mov	r1, r8
   168e8:	ldr	r6, [r0]
   168ec:	str	r3, [sp, #16]
   168f0:	ldr	r2, [r4, #40]	; 0x28
   168f4:	add	r3, r4, #8
   168f8:	str	r3, [sp, #8]
   168fc:	str	r2, [sp, #12]
   16900:	ldr	r2, [r4, #4]
   16904:	mov	r5, r0
   16908:	str	r2, [sp, #4]
   1690c:	ldr	ip, [r4]
   16910:	mov	r3, sl
   16914:	mov	r2, r9
   16918:	mov	r0, r7
   1691c:	str	ip, [sp]
   16920:	bl	14e08 <__assert_fail@plt+0x3558>
   16924:	str	r6, [r5]
   16928:	add	sp, sp, #24
   1692c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16930:	andeq	sp, r2, ip, ror #5
   16934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16938:	cmp	r3, #0
   1693c:	sub	sp, sp, #44	; 0x2c
   16940:	ldr	r4, [pc, #192]	; 16a08 <__assert_fail@plt+0x5158>
   16944:	mov	r6, r2
   16948:	movne	r4, r3
   1694c:	mov	r9, r1
   16950:	mov	r8, r0
   16954:	bl	1170c <__errno_location@plt>
   16958:	ldr	r3, [r4, #44]	; 0x2c
   1695c:	ldr	r5, [r4, #4]
   16960:	add	sl, r4, #8
   16964:	cmp	r6, #0
   16968:	orreq	r5, r5, #1
   1696c:	mov	r1, #0
   16970:	ldr	r2, [r0]
   16974:	str	r3, [sp, #16]
   16978:	ldr	r3, [r4, #40]	; 0x28
   1697c:	stmib	sp, {r5, sl}
   16980:	str	r3, [sp, #12]
   16984:	ldr	r3, [r4]
   16988:	mov	r7, r0
   1698c:	str	r2, [sp, #28]
   16990:	str	r3, [sp]
   16994:	mov	r2, r8
   16998:	mov	r3, r9
   1699c:	mov	r0, r1
   169a0:	bl	14e08 <__assert_fail@plt+0x3558>
   169a4:	add	r1, r0, #1
   169a8:	mov	fp, r0
   169ac:	mov	r0, r1
   169b0:	str	r1, [sp, #36]	; 0x24
   169b4:	bl	17544 <__assert_fail@plt+0x5c94>
   169b8:	ldr	r3, [r4, #44]	; 0x2c
   169bc:	mov	r2, r8
   169c0:	str	r3, [sp, #16]
   169c4:	ldr	r3, [r4, #40]	; 0x28
   169c8:	str	r5, [sp, #4]
   169cc:	str	r3, [sp, #12]
   169d0:	str	sl, [sp, #8]
   169d4:	ldr	ip, [r4]
   169d8:	ldr	r1, [sp, #36]	; 0x24
   169dc:	mov	r3, r9
   169e0:	str	ip, [sp]
   169e4:	str	r0, [sp, #32]
   169e8:	bl	14e08 <__assert_fail@plt+0x3558>
   169ec:	ldr	r2, [sp, #28]
   169f0:	cmp	r6, #0
   169f4:	str	r2, [r7]
   169f8:	ldr	r0, [sp, #32]
   169fc:	strne	fp, [r6]
   16a00:	add	sp, sp, #44	; 0x2c
   16a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a08:	andeq	sp, r2, ip, ror #5
   16a0c:	mov	r3, r2
   16a10:	mov	r2, #0
   16a14:	b	16934 <__assert_fail@plt+0x5084>
   16a18:	push	{r4, r5, r6, r7, r8, lr}
   16a1c:	ldr	r6, [pc, #112]	; 16a94 <__assert_fail@plt+0x51e4>
   16a20:	ldr	r3, [r6, #4]
   16a24:	ldr	r7, [r6]
   16a28:	cmp	r3, #1
   16a2c:	ble	16a50 <__assert_fail@plt+0x51a0>
   16a30:	sub	r5, r7, #8
   16a34:	add	r5, r5, r3, lsl #3
   16a38:	mov	r4, r7
   16a3c:	ldr	r0, [r4, #12]
   16a40:	add	r4, r4, #8
   16a44:	bl	11520 <free@plt>
   16a48:	cmp	r4, r5
   16a4c:	bne	16a3c <__assert_fail@plt+0x518c>
   16a50:	ldr	r0, [r7, #4]
   16a54:	ldr	r4, [pc, #60]	; 16a98 <__assert_fail@plt+0x51e8>
   16a58:	cmp	r0, r4
   16a5c:	beq	16a70 <__assert_fail@plt+0x51c0>
   16a60:	bl	11520 <free@plt>
   16a64:	mov	r3, #256	; 0x100
   16a68:	str	r4, [r6, #12]
   16a6c:	str	r3, [r6, #8]
   16a70:	ldr	r4, [pc, #36]	; 16a9c <__assert_fail@plt+0x51ec>
   16a74:	cmp	r7, r4
   16a78:	beq	16a88 <__assert_fail@plt+0x51d8>
   16a7c:	mov	r0, r7
   16a80:	bl	11520 <free@plt>
   16a84:	str	r4, [r6]
   16a88:	mov	r3, #1
   16a8c:	str	r3, [r6, #4]
   16a90:	pop	{r4, r5, r6, r7, r8, pc}
   16a94:	andeq	sp, r2, ip, ror r1
   16a98:	andeq	sp, r2, ip, ror #3
   16a9c:	andeq	sp, r2, r4, lsl #3
   16aa0:	ldr	r3, [pc, #4]	; 16aac <__assert_fail@plt+0x51fc>
   16aa4:	mvn	r2, #0
   16aa8:	b	16620 <__assert_fail@plt+0x4d70>
   16aac:	andeq	sp, r2, ip, ror #5
   16ab0:	ldr	r3, [pc]	; 16ab8 <__assert_fail@plt+0x5208>
   16ab4:	b	16620 <__assert_fail@plt+0x4d70>
   16ab8:	andeq	sp, r2, ip, ror #5
   16abc:	mov	r1, r0
   16ac0:	ldr	r3, [pc, #8]	; 16ad0 <__assert_fail@plt+0x5220>
   16ac4:	mvn	r2, #0
   16ac8:	mov	r0, #0
   16acc:	b	16620 <__assert_fail@plt+0x4d70>
   16ad0:	andeq	sp, r2, ip, ror #5
   16ad4:	mov	r2, r1
   16ad8:	ldr	r3, [pc, #8]	; 16ae8 <__assert_fail@plt+0x5238>
   16adc:	mov	r1, r0
   16ae0:	mov	r0, #0
   16ae4:	b	16620 <__assert_fail@plt+0x4d70>
   16ae8:	andeq	sp, r2, ip, ror #5
   16aec:	push	{r4, r5, r6, lr}
   16af0:	sub	sp, sp, #56	; 0x38
   16af4:	ldr	r4, [pc, #68]	; 16b40 <__assert_fail@plt+0x5290>
   16af8:	mov	r6, r2
   16afc:	mov	r5, r0
   16b00:	ldr	r3, [r4]
   16b04:	add	r0, sp, #4
   16b08:	str	r3, [sp, #52]	; 0x34
   16b0c:	bl	14c98 <__assert_fail@plt+0x33e8>
   16b10:	add	r3, sp, #4
   16b14:	mvn	r2, #0
   16b18:	mov	r1, r6
   16b1c:	mov	r0, r5
   16b20:	bl	16620 <__assert_fail@plt+0x4d70>
   16b24:	ldr	r2, [sp, #52]	; 0x34
   16b28:	ldr	r3, [r4]
   16b2c:	cmp	r2, r3
   16b30:	bne	16b3c <__assert_fail@plt+0x528c>
   16b34:	add	sp, sp, #56	; 0x38
   16b38:	pop	{r4, r5, r6, pc}
   16b3c:	bl	11580 <__stack_chk_fail@plt>
   16b40:	andeq	ip, r2, r0, lsl #30
   16b44:	push	{r4, r5, r6, r7, lr}
   16b48:	sub	sp, sp, #60	; 0x3c
   16b4c:	ldr	r4, [pc, #72]	; 16b9c <__assert_fail@plt+0x52ec>
   16b50:	mov	r6, r2
   16b54:	mov	r7, r3
   16b58:	ldr	ip, [r4]
   16b5c:	mov	r5, r0
   16b60:	add	r0, sp, #4
   16b64:	str	ip, [sp, #52]	; 0x34
   16b68:	bl	14c98 <__assert_fail@plt+0x33e8>
   16b6c:	add	r3, sp, #4
   16b70:	mov	r2, r7
   16b74:	mov	r1, r6
   16b78:	mov	r0, r5
   16b7c:	bl	16620 <__assert_fail@plt+0x4d70>
   16b80:	ldr	r2, [sp, #52]	; 0x34
   16b84:	ldr	r3, [r4]
   16b88:	cmp	r2, r3
   16b8c:	bne	16b98 <__assert_fail@plt+0x52e8>
   16b90:	add	sp, sp, #60	; 0x3c
   16b94:	pop	{r4, r5, r6, r7, pc}
   16b98:	bl	11580 <__stack_chk_fail@plt>
   16b9c:	andeq	ip, r2, r0, lsl #30
   16ba0:	mov	r2, r1
   16ba4:	mov	r1, r0
   16ba8:	mov	r0, #0
   16bac:	b	16aec <__assert_fail@plt+0x523c>
   16bb0:	mov	r3, r2
   16bb4:	mov	r2, r1
   16bb8:	mov	r1, r0
   16bbc:	mov	r0, #0
   16bc0:	b	16b44 <__assert_fail@plt+0x5294>
   16bc4:	push	{r4, r5, r6, r7, r8, r9, lr}
   16bc8:	mov	r4, r2
   16bcc:	ldr	lr, [pc, #128]	; 16c54 <__assert_fail@plt+0x53a4>
   16bd0:	mov	r8, r0
   16bd4:	mov	r9, r1
   16bd8:	ldm	lr!, {r0, r1, r2, r3}
   16bdc:	sub	sp, sp, #60	; 0x3c
   16be0:	add	ip, sp, #4
   16be4:	lsr	r6, r4, #5
   16be8:	stmia	ip!, {r0, r1, r2, r3}
   16bec:	add	r7, sp, #12
   16bf0:	ldm	lr!, {r0, r1, r2, r3}
   16bf4:	and	r4, r4, #31
   16bf8:	ldr	r5, [pc, #88]	; 16c58 <__assert_fail@plt+0x53a8>
   16bfc:	stmia	ip!, {r0, r1, r2, r3}
   16c00:	ldm	lr, {r0, r1, r2, r3}
   16c04:	stm	ip, {r0, r1, r2, r3}
   16c08:	mov	r2, r9
   16c0c:	ldr	r3, [r7, r6, lsl #2]
   16c10:	ldr	ip, [r5]
   16c14:	mov	r1, r8
   16c18:	mvn	r0, r3, lsr r4
   16c1c:	and	r0, r0, #1
   16c20:	str	ip, [sp, #52]	; 0x34
   16c24:	eor	r4, r3, r0, lsl r4
   16c28:	add	r3, sp, #4
   16c2c:	mov	r0, #0
   16c30:	str	r4, [r7, r6, lsl #2]
   16c34:	bl	16620 <__assert_fail@plt+0x4d70>
   16c38:	ldr	r2, [sp, #52]	; 0x34
   16c3c:	ldr	r3, [r5]
   16c40:	cmp	r2, r3
   16c44:	bne	16c50 <__assert_fail@plt+0x53a0>
   16c48:	add	sp, sp, #60	; 0x3c
   16c4c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16c50:	bl	11580 <__stack_chk_fail@plt>
   16c54:	andeq	sp, r2, ip, ror #5
   16c58:	andeq	ip, r2, r0, lsl #30
   16c5c:	mov	r2, r1
   16c60:	mvn	r1, #0
   16c64:	b	16bc4 <__assert_fail@plt+0x5314>
   16c68:	mov	r2, #58	; 0x3a
   16c6c:	mvn	r1, #0
   16c70:	b	16bc4 <__assert_fail@plt+0x5314>
   16c74:	mov	r2, #58	; 0x3a
   16c78:	b	16bc4 <__assert_fail@plt+0x5314>
   16c7c:	push	{r4, r5, r6, r7, r8, lr}
   16c80:	sub	sp, sp, #104	; 0x68
   16c84:	ldr	r5, [pc, #120]	; 16d04 <__assert_fail@plt+0x5454>
   16c88:	mov	r6, r0
   16c8c:	mov	r0, sp
   16c90:	ldr	r3, [r5]
   16c94:	mov	r7, r2
   16c98:	str	r3, [sp, #100]	; 0x64
   16c9c:	bl	14c98 <__assert_fail@plt+0x33e8>
   16ca0:	mov	ip, sp
   16ca4:	add	lr, sp, #52	; 0x34
   16ca8:	ldm	ip!, {r0, r1, r2, r3}
   16cac:	stmia	lr!, {r0, r1, r2, r3}
   16cb0:	ldm	ip!, {r0, r1, r2, r3}
   16cb4:	ldr	r8, [sp, #64]	; 0x40
   16cb8:	stmia	lr!, {r0, r1, r2, r3}
   16cbc:	mvn	r4, r8
   16cc0:	ldm	ip, {r0, r1, r2, r3}
   16cc4:	and	ip, r4, #67108864	; 0x4000000
   16cc8:	eor	ip, ip, r8
   16ccc:	str	ip, [sp, #64]	; 0x40
   16cd0:	stm	lr, {r0, r1, r2, r3}
   16cd4:	add	r3, sp, #52	; 0x34
   16cd8:	mvn	r2, #0
   16cdc:	mov	r1, r7
   16ce0:	mov	r0, r6
   16ce4:	bl	16620 <__assert_fail@plt+0x4d70>
   16ce8:	ldr	r2, [sp, #100]	; 0x64
   16cec:	ldr	r3, [r5]
   16cf0:	cmp	r2, r3
   16cf4:	bne	16d00 <__assert_fail@plt+0x5450>
   16cf8:	add	sp, sp, #104	; 0x68
   16cfc:	pop	{r4, r5, r6, r7, r8, pc}
   16d00:	bl	11580 <__stack_chk_fail@plt>
   16d04:	andeq	ip, r2, r0, lsl #30
   16d08:	push	{r4, r5, r6, r7, r8, r9, lr}
   16d0c:	mov	r6, r1
   16d10:	ldr	lr, [pc, #132]	; 16d9c <__assert_fail@plt+0x54ec>
   16d14:	mov	r5, r2
   16d18:	mov	r8, r0
   16d1c:	mov	r9, r3
   16d20:	ldm	lr!, {r0, r1, r2, r3}
   16d24:	sub	sp, sp, #60	; 0x3c
   16d28:	add	ip, sp, #4
   16d2c:	ldr	r4, [pc, #108]	; 16da0 <__assert_fail@plt+0x54f0>
   16d30:	stmia	ip!, {r0, r1, r2, r3}
   16d34:	mov	r7, #10
   16d38:	ldm	lr!, {r0, r1, r2, r3}
   16d3c:	cmp	r5, #0
   16d40:	cmpne	r6, #0
   16d44:	str	r7, [sp, #4]
   16d48:	stmia	ip!, {r0, r1, r2, r3}
   16d4c:	ldm	lr, {r0, r1, r2, r3}
   16d50:	ldr	lr, [r4]
   16d54:	stm	ip, {r0, r1, r2, r3}
   16d58:	str	lr, [sp, #52]	; 0x34
   16d5c:	beq	16d98 <__assert_fail@plt+0x54e8>
   16d60:	add	r3, sp, #4
   16d64:	ldr	r2, [sp, #88]	; 0x58
   16d68:	mov	r1, r9
   16d6c:	mov	r0, r8
   16d70:	str	r6, [sp, #44]	; 0x2c
   16d74:	str	r5, [sp, #48]	; 0x30
   16d78:	bl	16620 <__assert_fail@plt+0x4d70>
   16d7c:	ldr	r2, [sp, #52]	; 0x34
   16d80:	ldr	r3, [r4]
   16d84:	cmp	r2, r3
   16d88:	bne	16d94 <__assert_fail@plt+0x54e4>
   16d8c:	add	sp, sp, #60	; 0x3c
   16d90:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16d94:	bl	11580 <__stack_chk_fail@plt>
   16d98:	bl	1185c <abort@plt>
   16d9c:	andeq	sp, r2, ip, ror #5
   16da0:	andeq	ip, r2, r0, lsl #30
   16da4:	push	{lr}		; (str lr, [sp, #-4]!)
   16da8:	sub	sp, sp, #12
   16dac:	mvn	ip, #0
   16db0:	str	ip, [sp]
   16db4:	bl	16d08 <__assert_fail@plt+0x5458>
   16db8:	add	sp, sp, #12
   16dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc0:	push	{lr}		; (str lr, [sp, #-4]!)
   16dc4:	sub	sp, sp, #12
   16dc8:	mvn	ip, #0
   16dcc:	mov	r3, r2
   16dd0:	str	ip, [sp]
   16dd4:	mov	r2, r1
   16dd8:	mov	r1, r0
   16ddc:	mov	r0, #0
   16de0:	bl	16d08 <__assert_fail@plt+0x5458>
   16de4:	add	sp, sp, #12
   16de8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dec:	push	{lr}		; (str lr, [sp, #-4]!)
   16df0:	sub	sp, sp, #12
   16df4:	str	r3, [sp]
   16df8:	mov	r3, r2
   16dfc:	mov	r2, r1
   16e00:	mov	r1, r0
   16e04:	mov	r0, #0
   16e08:	bl	16d08 <__assert_fail@plt+0x5458>
   16e0c:	add	sp, sp, #12
   16e10:	pop	{pc}		; (ldr pc, [sp], #4)
   16e14:	ldr	r3, [pc]	; 16e1c <__assert_fail@plt+0x556c>
   16e18:	b	16620 <__assert_fail@plt+0x4d70>
   16e1c:	andeq	sp, r2, ip, lsl #3
   16e20:	mov	r2, r1
   16e24:	ldr	r3, [pc, #8]	; 16e34 <__assert_fail@plt+0x5584>
   16e28:	mov	r1, r0
   16e2c:	mov	r0, #0
   16e30:	b	16620 <__assert_fail@plt+0x4d70>
   16e34:	andeq	sp, r2, ip, lsl #3
   16e38:	ldr	r3, [pc, #4]	; 16e44 <__assert_fail@plt+0x5594>
   16e3c:	mvn	r2, #0
   16e40:	b	16620 <__assert_fail@plt+0x4d70>
   16e44:	andeq	sp, r2, ip, lsl #3
   16e48:	mov	r1, r0
   16e4c:	ldr	r3, [pc, #8]	; 16e5c <__assert_fail@plt+0x55ac>
   16e50:	mvn	r2, #0
   16e54:	mov	r0, #0
   16e58:	b	16620 <__assert_fail@plt+0x4d70>
   16e5c:	andeq	sp, r2, ip, lsl #3
   16e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e64:	mov	r9, r1
   16e68:	ldr	r4, [pc, #352]	; 16fd0 <__assert_fail@plt+0x5720>
   16e6c:	sub	sp, sp, #228	; 0xe4
   16e70:	mov	fp, r0
   16e74:	ldr	r1, [r4]
   16e78:	mov	r0, r9
   16e7c:	mov	r8, r3
   16e80:	mov	sl, r2
   16e84:	str	r1, [sp, #220]	; 0xdc
   16e88:	bl	1330c <__assert_fail@plt+0x1a5c>
   16e8c:	mov	r5, r0
   16e90:	mov	r0, r8
   16e94:	bl	1330c <__assert_fail@plt+0x1a5c>
   16e98:	mov	r6, r0
   16e9c:	mov	r0, r5
   16ea0:	bl	1335c <__assert_fail@plt+0x1aac>
   16ea4:	mov	r7, r0
   16ea8:	mov	r0, r6
   16eac:	bl	1335c <__assert_fail@plt+0x1aac>
   16eb0:	cmp	r7, r0
   16eb4:	beq	16ed8 <__assert_fail@plt+0x5628>
   16eb8:	mov	r6, #0
   16ebc:	ldr	r2, [sp, #220]	; 0xdc
   16ec0:	ldr	r3, [r4]
   16ec4:	mov	r0, r6
   16ec8:	cmp	r2, r3
   16ecc:	bne	16fcc <__assert_fail@plt+0x571c>
   16ed0:	add	sp, sp, #228	; 0xe4
   16ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ed8:	mov	r2, r7
   16edc:	mov	r1, r6
   16ee0:	mov	r0, r5
   16ee4:	bl	11568 <memcmp@plt>
   16ee8:	cmp	r0, #0
   16eec:	bne	16eb8 <__assert_fail@plt+0x5608>
   16ef0:	mov	r0, r9
   16ef4:	bl	13238 <__assert_fail@plt+0x1988>
   16ef8:	mov	r3, #256	; 0x100
   16efc:	str	r3, [sp]
   16f00:	mov	r1, fp
   16f04:	add	r3, sp, #8
   16f08:	mov	r2, r0
   16f0c:	mov	r5, r0
   16f10:	mov	r0, #3
   16f14:	bl	115bc <__fxstatat64@plt>
   16f18:	cmp	r0, #0
   16f1c:	bne	16fb0 <__assert_fail@plt+0x5700>
   16f20:	mov	r0, r5
   16f24:	bl	11520 <free@plt>
   16f28:	mov	r0, r8
   16f2c:	bl	13238 <__assert_fail@plt+0x1988>
   16f30:	mov	r3, #256	; 0x100
   16f34:	str	r3, [sp]
   16f38:	mov	r1, sl
   16f3c:	add	r3, sp, #112	; 0x70
   16f40:	mov	r2, r0
   16f44:	mov	r5, r0
   16f48:	mov	r0, #3
   16f4c:	bl	115bc <__fxstatat64@plt>
   16f50:	cmp	r0, #0
   16f54:	bne	16f94 <__assert_fail@plt+0x56e4>
   16f58:	ldrd	r0, [sp, #104]	; 0x68
   16f5c:	ldrd	r2, [sp, #208]	; 0xd0
   16f60:	cmp	r1, r3
   16f64:	cmpeq	r0, r2
   16f68:	movne	r6, #0
   16f6c:	bne	16f88 <__assert_fail@plt+0x56d8>
   16f70:	ldrd	r0, [sp, #8]
   16f74:	ldrd	r2, [sp, #112]	; 0x70
   16f78:	cmp	r1, r3
   16f7c:	cmpeq	r0, r2
   16f80:	moveq	r6, #1
   16f84:	movne	r6, #0
   16f88:	mov	r0, r5
   16f8c:	bl	11520 <free@plt>
   16f90:	b	16ebc <__assert_fail@plt+0x560c>
   16f94:	bl	1170c <__errno_location@plt>
   16f98:	mov	r3, r5
   16f9c:	ldr	r2, [pc, #48]	; 16fd4 <__assert_fail@plt+0x5724>
   16fa0:	ldr	r1, [r0]
   16fa4:	mov	r0, #1
   16fa8:	bl	11640 <error@plt>
   16fac:	b	16f58 <__assert_fail@plt+0x56a8>
   16fb0:	bl	1170c <__errno_location@plt>
   16fb4:	mov	r3, r5
   16fb8:	ldr	r2, [pc, #20]	; 16fd4 <__assert_fail@plt+0x5724>
   16fbc:	ldr	r1, [r0]
   16fc0:	mov	r0, #1
   16fc4:	bl	11640 <error@plt>
   16fc8:	b	16f20 <__assert_fail@plt+0x5670>
   16fcc:	bl	11580 <__stack_chk_fail@plt>
   16fd0:	andeq	ip, r2, r0, lsl #30
   16fd4:	andeq	fp, r1, r8, asr fp
   16fd8:	mvn	r2, #99	; 0x63
   16fdc:	mov	r3, r1
   16fe0:	mov	r1, r0
   16fe4:	mov	r0, r2
   16fe8:	b	16e60 <__assert_fail@plt+0x55b0>
   16fec:	push	{r4, r5, r6, lr}
   16ff0:	sub	sp, sp, #32
   16ff4:	cmp	r1, #0
   16ff8:	mov	r5, r0
   16ffc:	ldr	r4, [sp, #48]	; 0x30
   17000:	ldr	r6, [sp, #52]	; 0x34
   17004:	beq	17094 <__assert_fail@plt+0x57e4>
   17008:	strd	r2, [sp]
   1700c:	mov	r3, r1
   17010:	ldr	r2, [pc, #828]	; 17354 <__assert_fail@plt+0x5aa4>
   17014:	mov	r1, #1
   17018:	bl	11748 <__fprintf_chk@plt>
   1701c:	mov	r2, #5
   17020:	ldr	r1, [pc, #816]	; 17358 <__assert_fail@plt+0x5aa8>
   17024:	mov	r0, #0
   17028:	bl	11574 <dcgettext@plt>
   1702c:	ldr	r3, [pc, #808]	; 1735c <__assert_fail@plt+0x5aac>
   17030:	ldr	r2, [pc, #808]	; 17360 <__assert_fail@plt+0x5ab0>
   17034:	str	r3, [sp]
   17038:	mov	r1, #1
   1703c:	mov	r3, r0
   17040:	mov	r0, r5
   17044:	bl	11748 <__fprintf_chk@plt>
   17048:	ldr	r1, [pc, #788]	; 17364 <__assert_fail@plt+0x5ab4>
   1704c:	mov	r2, #5
   17050:	mov	r0, #0
   17054:	bl	11574 <dcgettext@plt>
   17058:	mov	r1, r5
   1705c:	bl	114c0 <fputs_unlocked@plt>
   17060:	cmp	r6, #9
   17064:	ldrls	pc, [pc, r6, lsl #2]
   17068:	b	17344 <__assert_fail@plt+0x5a94>
   1706c:	andeq	r7, r1, r0, asr r3
   17070:	andeq	r7, r1, r8, lsl r1
   17074:	andeq	r7, r1, r4, asr #2
   17078:	andeq	r7, r1, r8, ror r1
   1707c:			; <UNDEFINED> instruction: 0x000171b4
   17080:	strdeq	r7, [r1], -r4
   17084:	andeq	r7, r1, ip, lsr r2
   17088:	andeq	r7, r1, ip, lsl #5
   1708c:	andeq	r7, r1, r4, ror #5
   17090:	andeq	r7, r1, ip, lsr #1
   17094:	str	r3, [sp]
   17098:	mov	r1, #1
   1709c:	mov	r3, r2
   170a0:	ldr	r2, [pc, #704]	; 17368 <__assert_fail@plt+0x5ab8>
   170a4:	bl	11748 <__fprintf_chk@plt>
   170a8:	b	1701c <__assert_fail@plt+0x576c>
   170ac:	ldr	r1, [pc, #696]	; 1736c <__assert_fail@plt+0x5abc>
   170b0:	mov	r2, #5
   170b4:	mov	r0, #0
   170b8:	bl	11574 <dcgettext@plt>
   170bc:	ldr	r2, [r4, #32]
   170c0:	ldr	r3, [r4, #28]
   170c4:	ldr	r1, [r4, #24]
   170c8:	str	r2, [sp, #28]
   170cc:	ldr	r2, [r4, #20]
   170d0:	str	r3, [sp, #24]
   170d4:	ldr	r3, [r4, #16]
   170d8:	str	r1, [sp, #20]
   170dc:	ldr	r1, [r4, #12]
   170e0:	str	r2, [sp, #16]
   170e4:	ldr	r2, [r4, #8]
   170e8:	str	r3, [sp, #12]
   170ec:	ldr	r3, [r4, #4]
   170f0:	str	r1, [sp, #8]
   170f4:	str	r2, [sp, #4]
   170f8:	str	r3, [sp]
   170fc:	mov	r1, #1
   17100:	ldr	r3, [r4]
   17104:	mov	r2, r0
   17108:	mov	r0, r5
   1710c:	bl	11748 <__fprintf_chk@plt>
   17110:	add	sp, sp, #32
   17114:	pop	{r4, r5, r6, pc}
   17118:	mov	r2, #5
   1711c:	ldr	r1, [pc, #588]	; 17370 <__assert_fail@plt+0x5ac0>
   17120:	mov	r0, #0
   17124:	bl	11574 <dcgettext@plt>
   17128:	ldr	r3, [r4]
   1712c:	mov	r1, #1
   17130:	mov	r2, r0
   17134:	mov	r0, r5
   17138:	add	sp, sp, #32
   1713c:	pop	{r4, r5, r6, lr}
   17140:	b	11748 <__fprintf_chk@plt>
   17144:	mov	r2, #5
   17148:	ldr	r1, [pc, #548]	; 17374 <__assert_fail@plt+0x5ac4>
   1714c:	mov	r0, #0
   17150:	bl	11574 <dcgettext@plt>
   17154:	ldr	r2, [r4, #4]
   17158:	ldr	r3, [r4]
   1715c:	mov	r1, #1
   17160:	str	r2, [sp, #48]	; 0x30
   17164:	mov	r2, r0
   17168:	mov	r0, r5
   1716c:	add	sp, sp, #32
   17170:	pop	{r4, r5, r6, lr}
   17174:	b	11748 <__fprintf_chk@plt>
   17178:	mov	r2, #5
   1717c:	ldr	r1, [pc, #500]	; 17378 <__assert_fail@plt+0x5ac8>
   17180:	mov	r0, #0
   17184:	bl	11574 <dcgettext@plt>
   17188:	ldr	r2, [r4, #8]
   1718c:	ldr	r3, [r4, #4]
   17190:	mov	r1, #1
   17194:	str	r2, [sp, #52]	; 0x34
   17198:	str	r3, [sp, #48]	; 0x30
   1719c:	ldr	r3, [r4]
   171a0:	mov	r2, r0
   171a4:	mov	r0, r5
   171a8:	add	sp, sp, #32
   171ac:	pop	{r4, r5, r6, lr}
   171b0:	b	11748 <__fprintf_chk@plt>
   171b4:	mov	r2, #5
   171b8:	ldr	r1, [pc, #444]	; 1737c <__assert_fail@plt+0x5acc>
   171bc:	mov	r0, #0
   171c0:	bl	11574 <dcgettext@plt>
   171c4:	ldr	r1, [r4, #12]
   171c8:	ldr	r2, [r4, #8]
   171cc:	ldr	r3, [r4, #4]
   171d0:	str	r1, [sp, #8]
   171d4:	str	r2, [sp, #4]
   171d8:	str	r3, [sp]
   171dc:	mov	r1, #1
   171e0:	ldr	r3, [r4]
   171e4:	mov	r2, r0
   171e8:	mov	r0, r5
   171ec:	bl	11748 <__fprintf_chk@plt>
   171f0:	b	17110 <__assert_fail@plt+0x5860>
   171f4:	mov	r2, #5
   171f8:	ldr	r1, [pc, #384]	; 17380 <__assert_fail@plt+0x5ad0>
   171fc:	mov	r0, #0
   17200:	bl	11574 <dcgettext@plt>
   17204:	ldr	r3, [r4, #16]
   17208:	ldr	r1, [r4, #12]
   1720c:	ldr	r2, [r4, #8]
   17210:	str	r3, [sp, #12]
   17214:	ldr	r3, [r4, #4]
   17218:	str	r1, [sp, #8]
   1721c:	str	r2, [sp, #4]
   17220:	str	r3, [sp]
   17224:	mov	r1, #1
   17228:	ldr	r3, [r4]
   1722c:	mov	r2, r0
   17230:	mov	r0, r5
   17234:	bl	11748 <__fprintf_chk@plt>
   17238:	b	17110 <__assert_fail@plt+0x5860>
   1723c:	mov	r2, #5
   17240:	ldr	r1, [pc, #316]	; 17384 <__assert_fail@plt+0x5ad4>
   17244:	mov	r0, #0
   17248:	bl	11574 <dcgettext@plt>
   1724c:	ldr	r2, [r4, #20]
   17250:	ldr	r3, [r4, #16]
   17254:	ldr	r1, [r4, #12]
   17258:	str	r2, [sp, #16]
   1725c:	ldr	r2, [r4, #8]
   17260:	str	r3, [sp, #12]
   17264:	ldr	r3, [r4, #4]
   17268:	str	r1, [sp, #8]
   1726c:	str	r2, [sp, #4]
   17270:	str	r3, [sp]
   17274:	mov	r1, #1
   17278:	ldr	r3, [r4]
   1727c:	mov	r2, r0
   17280:	mov	r0, r5
   17284:	bl	11748 <__fprintf_chk@plt>
   17288:	b	17110 <__assert_fail@plt+0x5860>
   1728c:	mov	r2, #5
   17290:	ldr	r1, [pc, #240]	; 17388 <__assert_fail@plt+0x5ad8>
   17294:	mov	r0, #0
   17298:	bl	11574 <dcgettext@plt>
   1729c:	ldr	r1, [r4, #24]
   172a0:	ldr	r2, [r4, #20]
   172a4:	ldr	r3, [r4, #16]
   172a8:	str	r1, [sp, #20]
   172ac:	ldr	r1, [r4, #12]
   172b0:	str	r2, [sp, #16]
   172b4:	ldr	r2, [r4, #8]
   172b8:	str	r3, [sp, #12]
   172bc:	ldr	r3, [r4, #4]
   172c0:	str	r1, [sp, #8]
   172c4:	str	r2, [sp, #4]
   172c8:	str	r3, [sp]
   172cc:	mov	r1, #1
   172d0:	ldr	r3, [r4]
   172d4:	mov	r2, r0
   172d8:	mov	r0, r5
   172dc:	bl	11748 <__fprintf_chk@plt>
   172e0:	b	17110 <__assert_fail@plt+0x5860>
   172e4:	mov	r2, #5
   172e8:	ldr	r1, [pc, #156]	; 1738c <__assert_fail@plt+0x5adc>
   172ec:	mov	r0, #0
   172f0:	bl	11574 <dcgettext@plt>
   172f4:	ldr	r3, [r4, #28]
   172f8:	ldr	r1, [r4, #24]
   172fc:	ldr	r2, [r4, #20]
   17300:	str	r3, [sp, #24]
   17304:	ldr	r3, [r4, #16]
   17308:	str	r1, [sp, #20]
   1730c:	ldr	r1, [r4, #12]
   17310:	str	r2, [sp, #16]
   17314:	ldr	r2, [r4, #8]
   17318:	str	r3, [sp, #12]
   1731c:	ldr	r3, [r4, #4]
   17320:	str	r1, [sp, #8]
   17324:	str	r2, [sp, #4]
   17328:	str	r3, [sp]
   1732c:	mov	r1, #1
   17330:	ldr	r3, [r4]
   17334:	mov	r2, r0
   17338:	mov	r0, r5
   1733c:	bl	11748 <__fprintf_chk@plt>
   17340:	b	17110 <__assert_fail@plt+0x5860>
   17344:	mov	r2, #5
   17348:	ldr	r1, [pc, #64]	; 17390 <__assert_fail@plt+0x5ae0>
   1734c:	b	170b4 <__assert_fail@plt+0x5804>
   17350:	bl	1185c <abort@plt>
   17354:	strdeq	fp, [r1], -r4
   17358:	andeq	fp, r1, r8, lsl #26
   1735c:	andeq	r0, r0, r2, ror #15
   17360:	ldrdeq	fp, [r1], -ip
   17364:	andeq	fp, r1, ip, lsl #26
   17368:	andeq	fp, r1, r0, lsl #26
   1736c:	andeq	fp, r1, r4, ror #29
   17370:	ldrdeq	fp, [r1], -r8
   17374:	andeq	fp, r1, r8, ror #27
   17378:	andeq	fp, r1, r0, lsl #28
   1737c:	andeq	fp, r1, ip, lsl lr
   17380:	andeq	fp, r1, ip, lsr lr
   17384:	andeq	fp, r1, r0, ror #28
   17388:	andeq	fp, r1, r8, lsl #29
   1738c:			; <UNDEFINED> instruction: 0x0001beb4
   17390:	andeq	fp, r1, r8, lsl pc
   17394:	push	{r4, r5, lr}
   17398:	sub	sp, sp, #12
   1739c:	ldr	r5, [sp, #24]
   173a0:	ldr	ip, [r5]
   173a4:	cmp	ip, #0
   173a8:	beq	173c4 <__assert_fail@plt+0x5b14>
   173ac:	mov	lr, r5
   173b0:	mov	ip, #0
   173b4:	ldr	r4, [lr, #4]!
   173b8:	add	ip, ip, #1
   173bc:	cmp	r4, #0
   173c0:	bne	173b4 <__assert_fail@plt+0x5b04>
   173c4:	stm	sp, {r5, ip}
   173c8:	bl	16fec <__assert_fail@plt+0x573c>
   173cc:	add	sp, sp, #12
   173d0:	pop	{r4, r5, pc}
   173d4:	push	{r4, r5, r6, lr}
   173d8:	sub	sp, sp, #56	; 0x38
   173dc:	ldr	r6, [pc, #88]	; 1743c <__assert_fail@plt+0x5b8c>
   173e0:	ldr	r5, [sp, #72]	; 0x48
   173e4:	add	r4, sp, #8
   173e8:	ldr	ip, [r6]
   173ec:	str	ip, [sp, #52]	; 0x34
   173f0:	mov	ip, #0
   173f4:	ldr	lr, [r5], #4
   173f8:	cmp	lr, #0
   173fc:	str	lr, [r4, #4]!
   17400:	beq	17410 <__assert_fail@plt+0x5b60>
   17404:	add	ip, ip, #1
   17408:	cmp	ip, #10
   1740c:	bne	173f4 <__assert_fail@plt+0x5b44>
   17410:	add	lr, sp, #12
   17414:	str	ip, [sp, #4]
   17418:	str	lr, [sp]
   1741c:	bl	16fec <__assert_fail@plt+0x573c>
   17420:	ldr	r2, [sp, #52]	; 0x34
   17424:	ldr	r3, [r6]
   17428:	cmp	r2, r3
   1742c:	bne	17438 <__assert_fail@plt+0x5b88>
   17430:	add	sp, sp, #56	; 0x38
   17434:	pop	{r4, r5, r6, pc}
   17438:	bl	11580 <__stack_chk_fail@plt>
   1743c:	andeq	ip, r2, r0, lsl #30
   17440:	push	{r3}		; (str r3, [sp, #-4]!)
   17444:	mov	ip, #0
   17448:	push	{r4, r5, r6, lr}
   1744c:	sub	sp, sp, #60	; 0x3c
   17450:	ldr	r6, [pc, #100]	; 174bc <__assert_fail@plt+0x5c0c>
   17454:	add	r5, sp, #8
   17458:	add	r4, sp, #80	; 0x50
   1745c:	ldr	r3, [r6]
   17460:	str	r4, [sp, #8]
   17464:	str	r3, [sp, #52]	; 0x34
   17468:	ldr	r3, [sp, #76]	; 0x4c
   1746c:	ldr	lr, [r4], #4
   17470:	cmp	lr, #0
   17474:	str	lr, [r5, #4]!
   17478:	beq	17488 <__assert_fail@plt+0x5bd8>
   1747c:	add	ip, ip, #1
   17480:	cmp	ip, #10
   17484:	bne	1746c <__assert_fail@plt+0x5bbc>
   17488:	add	lr, sp, #12
   1748c:	str	ip, [sp, #4]
   17490:	str	lr, [sp]
   17494:	bl	16fec <__assert_fail@plt+0x573c>
   17498:	ldr	r2, [sp, #52]	; 0x34
   1749c:	ldr	r3, [r6]
   174a0:	cmp	r2, r3
   174a4:	bne	174b8 <__assert_fail@plt+0x5c08>
   174a8:	add	sp, sp, #60	; 0x3c
   174ac:	pop	{r4, r5, r6, lr}
   174b0:	add	sp, sp, #4
   174b4:	bx	lr
   174b8:	bl	11580 <__stack_chk_fail@plt>
   174bc:	andeq	ip, r2, r0, lsl #30
   174c0:	push	{r4, lr}
   174c4:	mov	r2, #5
   174c8:	ldr	r1, [pc, #88]	; 17528 <__assert_fail@plt+0x5c78>
   174cc:	mov	r0, #0
   174d0:	bl	11574 <dcgettext@plt>
   174d4:	ldr	r2, [pc, #80]	; 1752c <__assert_fail@plt+0x5c7c>
   174d8:	mov	r1, r0
   174dc:	mov	r0, #1
   174e0:	bl	11730 <__printf_chk@plt>
   174e4:	mov	r2, #5
   174e8:	ldr	r1, [pc, #64]	; 17530 <__assert_fail@plt+0x5c80>
   174ec:	mov	r0, #0
   174f0:	bl	11574 <dcgettext@plt>
   174f4:	ldr	r3, [pc, #56]	; 17534 <__assert_fail@plt+0x5c84>
   174f8:	ldr	r2, [pc, #56]	; 17538 <__assert_fail@plt+0x5c88>
   174fc:	mov	r1, r0
   17500:	mov	r0, #1
   17504:	bl	11730 <__printf_chk@plt>
   17508:	ldr	r1, [pc, #44]	; 1753c <__assert_fail@plt+0x5c8c>
   1750c:	mov	r2, #5
   17510:	mov	r0, #0
   17514:	bl	11574 <dcgettext@plt>
   17518:	ldr	r3, [pc, #32]	; 17540 <__assert_fail@plt+0x5c90>
   1751c:	pop	{r4, lr}
   17520:	ldr	r1, [r3]
   17524:	b	114c0 <fputs_unlocked@plt>
   17528:	andeq	fp, r1, r4, asr pc
   1752c:	andeq	fp, r1, ip, ror #30
   17530:	andeq	fp, r1, r4, lsl #31
   17534:	andeq	fp, r1, r4, lsl #15
   17538:	andeq	fp, r1, ip, lsr #15
   1753c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17540:	ldrdeq	sp, [r2], -r4
   17544:	push	{r4, lr}
   17548:	mov	r4, r0
   1754c:	bl	11664 <malloc@plt>
   17550:	adds	r4, r4, #0
   17554:	movne	r4, #1
   17558:	cmp	r0, #0
   1755c:	movne	r4, #0
   17560:	cmp	r4, #0
   17564:	popeq	{r4, pc}
   17568:	bl	1778c <__assert_fail@plt+0x5edc>
   1756c:	push	{r4, r5, r6, lr}
   17570:	umull	r4, r5, r0, r1
   17574:	adds	r3, r5, #0
   17578:	movne	r3, #1
   1757c:	cmp	r4, #0
   17580:	blt	17598 <__assert_fail@plt+0x5ce8>
   17584:	cmp	r3, #0
   17588:	bne	17598 <__assert_fail@plt+0x5ce8>
   1758c:	mul	r0, r1, r0
   17590:	pop	{r4, r5, r6, lr}
   17594:	b	17544 <__assert_fail@plt+0x5c94>
   17598:	bl	1778c <__assert_fail@plt+0x5edc>
   1759c:	b	17544 <__assert_fail@plt+0x5c94>
   175a0:	adds	r3, r0, #0
   175a4:	movne	r3, #1
   175a8:	cmp	r1, #0
   175ac:	movne	r3, #0
   175b0:	cmp	r3, #0
   175b4:	push	{r4, lr}
   175b8:	bne	175e0 <__assert_fail@plt+0x5d30>
   175bc:	mov	r4, r1
   175c0:	bl	11598 <realloc@plt>
   175c4:	adds	r4, r4, #0
   175c8:	movne	r4, #1
   175cc:	cmp	r0, #0
   175d0:	movne	r4, #0
   175d4:	cmp	r4, #0
   175d8:	popeq	{r4, pc}
   175dc:	bl	1778c <__assert_fail@plt+0x5edc>
   175e0:	bl	11520 <free@plt>
   175e4:	mov	r0, #0
   175e8:	pop	{r4, pc}
   175ec:	push	{r4, r5, r6, lr}
   175f0:	umull	r4, r5, r1, r2
   175f4:	adds	r3, r5, #0
   175f8:	movne	r3, #1
   175fc:	cmp	r4, #0
   17600:	blt	17618 <__assert_fail@plt+0x5d68>
   17604:	cmp	r3, #0
   17608:	bne	17618 <__assert_fail@plt+0x5d68>
   1760c:	mul	r1, r2, r1
   17610:	pop	{r4, r5, r6, lr}
   17614:	b	175a0 <__assert_fail@plt+0x5cf0>
   17618:	bl	1778c <__assert_fail@plt+0x5edc>
   1761c:	push	{r4, r5, r6, r7, r8, lr}
   17620:	subs	r7, r0, #0
   17624:	mov	r6, r1
   17628:	mov	r5, r2
   1762c:	ldr	r4, [r1]
   17630:	beq	17664 <__assert_fail@plt+0x5db4>
   17634:	mov	r1, r2
   17638:	ldr	r0, [pc, #104]	; 176a8 <__assert_fail@plt+0x5df8>
   1763c:	bl	1ae30 <fts_children@@Base+0xa14>
   17640:	cmp	r0, r4
   17644:	bls	17688 <__assert_fail@plt+0x5dd8>
   17648:	add	r3, r4, #1
   1764c:	add	r4, r3, r4, lsr #1
   17650:	str	r4, [r6]
   17654:	mul	r1, r5, r4
   17658:	mov	r0, r7
   1765c:	pop	{r4, r5, r6, r7, r8, lr}
   17660:	b	175a0 <__assert_fail@plt+0x5cf0>
   17664:	cmp	r4, #0
   17668:	beq	1768c <__assert_fail@plt+0x5ddc>
   1766c:	umull	r0, r1, r4, r5
   17670:	adds	r3, r1, #0
   17674:	movne	r3, #1
   17678:	cmp	r0, #0
   1767c:	blt	17688 <__assert_fail@plt+0x5dd8>
   17680:	cmp	r3, #0
   17684:	beq	17650 <__assert_fail@plt+0x5da0>
   17688:	bl	1778c <__assert_fail@plt+0x5edc>
   1768c:	mov	r1, r2
   17690:	mov	r0, #64	; 0x40
   17694:	bl	1ae30 <fts_children@@Base+0xa14>
   17698:	cmp	r5, #64	; 0x40
   1769c:	movls	r4, r0
   176a0:	addhi	r4, r0, #1
   176a4:	b	1766c <__assert_fail@plt+0x5dbc>
   176a8:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   176ac:	cmp	r0, #0
   176b0:	ldr	r3, [r1]
   176b4:	beq	176d8 <__assert_fail@plt+0x5e28>
   176b8:	ldr	r2, [pc, #60]	; 176fc <__assert_fail@plt+0x5e4c>
   176bc:	cmp	r3, r2
   176c0:	bhi	176f4 <__assert_fail@plt+0x5e44>
   176c4:	add	r2, r3, #1
   176c8:	add	r3, r2, r3, lsr #1
   176cc:	str	r3, [r1]
   176d0:	mov	r1, r3
   176d4:	b	175a0 <__assert_fail@plt+0x5cf0>
   176d8:	cmp	r3, #0
   176dc:	bne	176f0 <__assert_fail@plt+0x5e40>
   176e0:	mov	r3, #64	; 0x40
   176e4:	str	r3, [r1]
   176e8:	mov	r1, r3
   176ec:	b	175a0 <__assert_fail@plt+0x5cf0>
   176f0:	bge	176cc <__assert_fail@plt+0x5e1c>
   176f4:	push	{r4, lr}
   176f8:	bl	1778c <__assert_fail@plt+0x5edc>
   176fc:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   17700:	push	{r4, lr}
   17704:	mov	r4, r0
   17708:	bl	17544 <__assert_fail@plt+0x5c94>
   1770c:	mov	r2, r4
   17710:	mov	r1, #0
   17714:	pop	{r4, lr}
   17718:	b	11724 <memset@plt>
   1771c:	push	{r4, r5, r6, lr}
   17720:	umull	r4, r5, r0, r1
   17724:	adds	r3, r5, #0
   17728:	movne	r3, #1
   1772c:	cmp	r4, #0
   17730:	blt	17748 <__assert_fail@plt+0x5e98>
   17734:	cmp	r3, #0
   17738:	bne	17748 <__assert_fail@plt+0x5e98>
   1773c:	bl	114b4 <calloc@plt>
   17740:	cmp	r0, #0
   17744:	popne	{r4, r5, r6, pc}
   17748:	bl	1778c <__assert_fail@plt+0x5edc>
   1774c:	push	{r4, r5, r6, lr}
   17750:	mov	r4, r1
   17754:	mov	r5, r0
   17758:	mov	r0, r1
   1775c:	bl	17544 <__assert_fail@plt+0x5c94>
   17760:	mov	r2, r4
   17764:	mov	r1, r5
   17768:	pop	{r4, r5, r6, lr}
   1776c:	b	11538 <memcpy@plt>
   17770:	push	{r4, lr}
   17774:	mov	r4, r0
   17778:	bl	116dc <strlen@plt>
   1777c:	add	r1, r0, #1
   17780:	mov	r0, r4
   17784:	pop	{r4, lr}
   17788:	b	1774c <__assert_fail@plt+0x5e9c>
   1778c:	ldr	r3, [pc, #44]	; 177c0 <__assert_fail@plt+0x5f10>
   17790:	push	{r4, lr}
   17794:	mov	r2, #5
   17798:	ldr	r1, [pc, #36]	; 177c4 <__assert_fail@plt+0x5f14>
   1779c:	mov	r0, #0
   177a0:	ldr	r4, [r3]
   177a4:	bl	11574 <dcgettext@plt>
   177a8:	ldr	r2, [pc, #24]	; 177c8 <__assert_fail@plt+0x5f18>
   177ac:	mov	r1, #0
   177b0:	mov	r3, r0
   177b4:	mov	r0, r4
   177b8:	bl	11640 <error@plt>
   177bc:	bl	1185c <abort@plt>
   177c0:	andeq	sp, r2, r8, ror r1
   177c4:	andeq	ip, r1, ip
   177c8:	andeq	fp, r1, r8, asr fp
   177cc:	push	{r4, lr}
   177d0:	orr	r1, r1, #512	; 0x200
   177d4:	bl	19784 <fts_open@@Base>
   177d8:	cmp	r0, #0
   177dc:	popne	{r4, pc}
   177e0:	bl	1170c <__errno_location@plt>
   177e4:	ldr	r3, [r0]
   177e8:	cmp	r3, #22
   177ec:	beq	177f4 <__assert_fail@plt+0x5f44>
   177f0:	bl	1778c <__assert_fail@plt+0x5edc>
   177f4:	ldr	r3, [pc, #12]	; 17808 <__assert_fail@plt+0x5f58>
   177f8:	mov	r2, #41	; 0x29
   177fc:	ldr	r1, [pc, #8]	; 1780c <__assert_fail@plt+0x5f5c>
   17800:	ldr	r0, [pc, #8]	; 17810 <__assert_fail@plt+0x5f60>
   17804:	bl	118b0 <__assert_fail@plt>
   17808:	andeq	ip, r1, r0, lsr #32
   1780c:	andeq	ip, r1, ip, lsr #32
   17810:	andeq	ip, r1, r8, lsr r0
   17814:	ldr	r3, [r0, #48]	; 0x30
   17818:	and	r3, r3, #17
   1781c:	cmp	r3, #16
   17820:	beq	17844 <__assert_fail@plt+0x5f94>
   17824:	cmp	r3, #17
   17828:	beq	17834 <__assert_fail@plt+0x5f84>
   1782c:	mov	r0, #0
   17830:	bx	lr
   17834:	ldr	r0, [r1, #48]	; 0x30
   17838:	adds	r0, r0, #0
   1783c:	movne	r0, #1
   17840:	bx	lr
   17844:	mov	r0, #1
   17848:	bx	lr
   1784c:	mov	r1, #0
   17850:	push	{r4, lr}
   17854:	mov	r0, r1
   17858:	bl	116b8 <getcwd@plt>
   1785c:	subs	r4, r0, #0
   17860:	beq	1786c <__assert_fail@plt+0x5fbc>
   17864:	mov	r0, r4
   17868:	pop	{r4, pc}
   1786c:	bl	1170c <__errno_location@plt>
   17870:	ldr	r3, [r0]
   17874:	cmp	r3, #12
   17878:	bne	17864 <__assert_fail@plt+0x5fb4>
   1787c:	bl	1778c <__assert_fail@plt+0x5edc>
   17880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17884:	sub	sp, sp, #36	; 0x24
   17888:	ldr	r5, [pc, #2536]	; 18278 <__assert_fail@plt+0x69c8>
   1788c:	mov	r9, r2
   17890:	cmp	r2, #36	; 0x24
   17894:	str	r3, [sp, #12]
   17898:	ldr	r2, [r5]
   1789c:	ldr	r3, [sp, #72]	; 0x48
   178a0:	str	r2, [sp, #28]
   178a4:	str	r3, [sp]
   178a8:	bhi	18264 <__assert_fail@plt+0x69b4>
   178ac:	cmp	r1, #0
   178b0:	mov	r4, r1
   178b4:	mov	r6, r0
   178b8:	addeq	r4, sp, #24
   178bc:	bl	1170c <__errno_location@plt>
   178c0:	mov	r3, #0
   178c4:	str	r3, [r0]
   178c8:	mov	r7, r0
   178cc:	bl	116ac <__ctype_b_loc@plt>
   178d0:	ldrb	r3, [r6]
   178d4:	mov	r1, r6
   178d8:	ldr	r0, [r0]
   178dc:	b	178e4 <__assert_fail@plt+0x6034>
   178e0:	ldrb	r3, [r1, #1]!
   178e4:	lsl	r2, r3, #1
   178e8:	ldrh	r8, [r0, r2]
   178ec:	ands	r8, r8, #8192	; 0x2000
   178f0:	bne	178e0 <__assert_fail@plt+0x6030>
   178f4:	cmp	r3, #45	; 0x2d
   178f8:	beq	17994 <__assert_fail@plt+0x60e4>
   178fc:	mov	r2, r9
   17900:	mov	r3, r8
   17904:	mov	r1, r4
   17908:	mov	r0, r6
   1790c:	bl	11544 <__strtoull_internal@plt>
   17910:	ldr	r9, [r4]
   17914:	cmp	r9, r6
   17918:	mov	sl, r0
   1791c:	mov	fp, r1
   17920:	beq	1797c <__assert_fail@plt+0x60cc>
   17924:	ldr	r8, [r7]
   17928:	cmp	r8, #0
   1792c:	bne	1796c <__assert_fail@plt+0x60bc>
   17930:	ldr	r3, [sp]
   17934:	cmp	r3, #0
   17938:	beq	17948 <__assert_fail@plt+0x6098>
   1793c:	ldrb	r6, [r9]
   17940:	cmp	r6, #0
   17944:	bne	17d1c <__assert_fail@plt+0x646c>
   17948:	ldr	r3, [sp, #12]
   1794c:	strd	sl, [r3]
   17950:	ldr	r2, [sp, #28]
   17954:	ldr	r3, [r5]
   17958:	mov	r0, r8
   1795c:	cmp	r2, r3
   17960:	bne	18260 <__assert_fail@plt+0x69b0>
   17964:	add	sp, sp, #36	; 0x24
   17968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1796c:	cmp	r8, #34	; 0x22
   17970:	bne	17994 <__assert_fail@plt+0x60e4>
   17974:	mov	r8, #1
   17978:	b	17930 <__assert_fail@plt+0x6080>
   1797c:	ldr	r0, [sp]
   17980:	cmp	r0, #0
   17984:	beq	17994 <__assert_fail@plt+0x60e4>
   17988:	ldrb	r6, [r6]
   1798c:	cmp	r6, #0
   17990:	bne	1799c <__assert_fail@plt+0x60ec>
   17994:	mov	r8, #4
   17998:	b	17950 <__assert_fail@plt+0x60a0>
   1799c:	mov	r1, r6
   179a0:	bl	116e8 <strchr@plt>
   179a4:	cmp	r0, #0
   179a8:	movne	sl, #1
   179ac:	movne	fp, #0
   179b0:	beq	17994 <__assert_fail@plt+0x60e4>
   179b4:	sub	r7, r6, #69	; 0x45
   179b8:	cmp	r7, #47	; 0x2f
   179bc:	ldrls	pc, [pc, r7, lsl #2]
   179c0:	b	17b80 <__assert_fail@plt+0x62d0>
   179c4:	andeq	r7, r1, r4, lsl #21
   179c8:	andeq	r7, r1, r0, lsl #23
   179cc:	andeq	r7, r1, r4, lsl #21
   179d0:	andeq	r7, r1, r0, lsl #23
   179d4:	andeq	r7, r1, r0, lsl #23
   179d8:	andeq	r7, r1, r0, lsl #23
   179dc:	andeq	r7, r1, r4, lsl #21
   179e0:	andeq	r7, r1, r0, lsl #23
   179e4:	andeq	r7, r1, r4, lsl #21
   179e8:	andeq	r7, r1, r0, lsl #23
   179ec:	andeq	r7, r1, r0, lsl #23
   179f0:	andeq	r7, r1, r4, lsl #21
   179f4:	andeq	r7, r1, r0, lsl #23
   179f8:	andeq	r7, r1, r0, lsl #23
   179fc:	andeq	r7, r1, r0, lsl #23
   17a00:	andeq	r7, r1, r4, lsl #21
   17a04:	andeq	r7, r1, r0, lsl #23
   17a08:	andeq	r7, r1, r0, lsl #23
   17a0c:	andeq	r7, r1, r0, lsl #23
   17a10:	andeq	r7, r1, r0, lsl #23
   17a14:	andeq	r7, r1, r4, lsl #21
   17a18:	andeq	r7, r1, r4, lsl #21
   17a1c:	andeq	r7, r1, r0, lsl #23
   17a20:	andeq	r7, r1, r0, lsl #23
   17a24:	andeq	r7, r1, r0, lsl #23
   17a28:	andeq	r7, r1, r0, lsl #23
   17a2c:	andeq	r7, r1, r0, lsl #23
   17a30:	andeq	r7, r1, r0, lsl #23
   17a34:	andeq	r7, r1, r0, lsl #23
   17a38:	andeq	r7, r1, r0, lsl #23
   17a3c:	andeq	r7, r1, r0, lsl #23
   17a40:	andeq	r7, r1, r0, lsl #23
   17a44:	andeq	r7, r1, r0, lsl #23
   17a48:	andeq	r7, r1, r0, lsl #23
   17a4c:	andeq	r7, r1, r4, lsl #21
   17a50:	andeq	r7, r1, r0, lsl #23
   17a54:	andeq	r7, r1, r0, lsl #23
   17a58:	andeq	r7, r1, r0, lsl #23
   17a5c:	andeq	r7, r1, r4, lsl #21
   17a60:	andeq	r7, r1, r0, lsl #23
   17a64:	andeq	r7, r1, r4, lsl #21
   17a68:	andeq	r7, r1, r0, lsl #23
   17a6c:	andeq	r7, r1, r0, lsl #23
   17a70:	andeq	r7, r1, r0, lsl #23
   17a74:	andeq	r7, r1, r0, lsl #23
   17a78:	andeq	r7, r1, r0, lsl #23
   17a7c:	andeq	r7, r1, r0, lsl #23
   17a80:	andeq	r7, r1, r4, lsl #21
   17a84:	ldr	r0, [sp]
   17a88:	mov	r1, #48	; 0x30
   17a8c:	bl	116e8 <strchr@plt>
   17a90:	cmp	r0, #0
   17a94:	beq	17b80 <__assert_fail@plt+0x62d0>
   17a98:	ldrb	r3, [r9, #1]
   17a9c:	cmp	r3, #68	; 0x44
   17aa0:	beq	18160 <__assert_fail@plt+0x68b0>
   17aa4:	cmp	r3, #105	; 0x69
   17aa8:	beq	17d40 <__assert_fail@plt+0x6490>
   17aac:	cmp	r3, #66	; 0x42
   17ab0:	beq	18160 <__assert_fail@plt+0x68b0>
   17ab4:	cmp	r7, #47	; 0x2f
   17ab8:	ldrls	pc, [pc, r7, lsl #2]
   17abc:	b	17d30 <__assert_fail@plt+0x6480>
   17ac0:	andeq	r8, r1, r4, asr #2
   17ac4:	andeq	r7, r1, r0, lsr sp
   17ac8:	andeq	r8, r1, r4, lsr r1
   17acc:	andeq	r7, r1, r0, lsr sp
   17ad0:	andeq	r7, r1, r0, lsr sp
   17ad4:	andeq	r7, r1, r0, lsr sp
   17ad8:	andeq	r8, r1, r4, lsr #2
   17adc:	andeq	r7, r1, r0, lsr sp
   17ae0:	andeq	r8, r1, r4, lsl r1
   17ae4:	andeq	r7, r1, r0, lsr sp
   17ae8:	andeq	r7, r1, r0, lsr sp
   17aec:	andeq	r8, r1, r4, lsl #2
   17af0:	andeq	r7, r1, r0, lsr sp
   17af4:	andeq	r7, r1, r0, lsr sp
   17af8:	andeq	r7, r1, r0, lsr sp
   17afc:	strdeq	r8, [r1], -r4
   17b00:	andeq	r7, r1, r0, lsr sp
   17b04:	andeq	r7, r1, r0, lsr sp
   17b08:	andeq	r7, r1, r0, lsr sp
   17b0c:	andeq	r7, r1, r0, lsr sp
   17b10:	andeq	r8, r1, r4, ror #1
   17b14:	ldrdeq	r8, [r1], -r4
   17b18:	andeq	r7, r1, r0, lsr sp
   17b1c:	andeq	r7, r1, r0, lsr sp
   17b20:	andeq	r7, r1, r0, lsr sp
   17b24:	andeq	r7, r1, r0, lsr sp
   17b28:	andeq	r7, r1, r0, lsr sp
   17b2c:	andeq	r7, r1, r0, lsr sp
   17b30:	andeq	r7, r1, r0, lsr sp
   17b34:	andeq	r7, r1, ip, ror sp
   17b38:	andeq	r8, r1, ip, asr #1
   17b3c:	andeq	r7, r1, r0, lsr sp
   17b40:	andeq	r7, r1, r0, lsr sp
   17b44:	andeq	r7, r1, r0, lsr sp
   17b48:	andeq	r8, r1, r4, lsr r1
   17b4c:	andeq	r7, r1, r0, lsr sp
   17b50:	andeq	r7, r1, r0, lsr sp
   17b54:	andeq	r7, r1, r0, lsr sp
   17b58:	andeq	r8, r1, r4, lsr #2
   17b5c:	andeq	r7, r1, r0, lsr sp
   17b60:	andeq	r8, r1, r4, lsl r1
   17b64:	andeq	r7, r1, r0, lsr sp
   17b68:	andeq	r7, r1, r0, lsr sp
   17b6c:	andeq	r7, r1, r0, lsr sp
   17b70:	andeq	r7, r1, r0, lsr sp
   17b74:	andeq	r7, r1, r0, lsr sp
   17b78:	andeq	r7, r1, r0, lsr sp
   17b7c:	strdeq	r8, [r1], -r4
   17b80:	mov	lr, #1
   17b84:	mov	r0, #1024	; 0x400
   17b88:	sub	r6, r6, #66	; 0x42
   17b8c:	cmp	r6, #53	; 0x35
   17b90:	ldrls	pc, [pc, r6, lsl #2]
   17b94:	b	17d30 <__assert_fail@plt+0x6480>
   17b98:	andeq	r7, r1, r4, lsr #27
   17b9c:	andeq	r7, r1, r0, lsr sp
   17ba0:	andeq	r7, r1, r0, lsr sp
   17ba4:	andeq	r7, r1, r8, asr #27
   17ba8:	andeq	r7, r1, r0, lsr sp
   17bac:	andeq	r7, r1, r0, ror ip
   17bb0:	andeq	r7, r1, r0, lsr sp
   17bb4:	andeq	r7, r1, r0, lsr sp
   17bb8:	andeq	r7, r1, r0, lsr sp
   17bbc:	andeq	r7, r1, r0, asr #29
   17bc0:	andeq	r7, r1, r0, lsr sp
   17bc4:	andeq	r8, r1, r4, rrx
   17bc8:	andeq	r7, r1, r0, lsr sp
   17bcc:	andeq	r7, r1, r0, lsr sp
   17bd0:	andeq	r7, r1, r8, ror #31
   17bd4:	andeq	r7, r1, r0, lsr sp
   17bd8:	andeq	r7, r1, r0, lsr sp
   17bdc:	andeq	r7, r1, r0, lsr sp
   17be0:	andeq	r7, r1, ip, ror #30
   17be4:	andeq	r7, r1, r0, lsr sp
   17be8:	andeq	r7, r1, r0, lsr sp
   17bec:	andeq	r7, r1, r0, lsr sp
   17bf0:	andeq	r7, r1, r0, lsr sp
   17bf4:	strdeq	r7, [r1], -r0
   17bf8:	andeq	r7, r1, r4, asr #28
   17bfc:	andeq	r7, r1, r0, lsr sp
   17c00:	andeq	r7, r1, r0, lsr sp
   17c04:	andeq	r7, r1, r0, lsr sp
   17c08:	andeq	r7, r1, r0, lsr sp
   17c0c:	andeq	r7, r1, r0, lsr sp
   17c10:	andeq	r7, r1, r0, lsr sp
   17c14:	andeq	r7, r1, r0, lsr sp
   17c18:	andeq	r7, r1, r0, lsl #27
   17c1c:	andeq	r7, r1, r4, lsl #26
   17c20:	andeq	r7, r1, r0, lsr sp
   17c24:	andeq	r7, r1, r0, lsr sp
   17c28:	andeq	r7, r1, r0, lsr sp
   17c2c:	andeq	r7, r1, r0, ror ip
   17c30:	andeq	r7, r1, r0, lsr sp
   17c34:	andeq	r7, r1, r0, lsr sp
   17c38:	andeq	r7, r1, r0, lsr sp
   17c3c:	andeq	r7, r1, r0, asr #29
   17c40:	andeq	r7, r1, r0, lsr sp
   17c44:	andeq	r8, r1, r4, rrx
   17c48:	andeq	r7, r1, r0, lsr sp
   17c4c:	andeq	r7, r1, r0, lsr sp
   17c50:	andeq	r7, r1, r0, lsr sp
   17c54:	andeq	r7, r1, r0, lsr sp
   17c58:	andeq	r7, r1, r0, lsr sp
   17c5c:	andeq	r7, r1, r0, lsr sp
   17c60:	andeq	r7, r1, ip, ror #30
   17c64:	andeq	r7, r1, r0, lsr sp
   17c68:	andeq	r7, r1, r0, lsr sp
   17c6c:	andeq	r7, r1, r8, asr sp
   17c70:	asr	r1, r0, #31
   17c74:	mov	r2, #0
   17c78:	mov	r3, #0
   17c7c:	cmp	fp, #0
   17c80:	strd	r2, [sp]
   17c84:	bne	181a4 <__assert_fail@plt+0x68f4>
   17c88:	ldrd	r2, [sp]
   17c8c:	orrs	r3, r2, r3
   17c90:	bne	18194 <__assert_fail@plt+0x68e4>
   17c94:	mul	r3, sl, r1
   17c98:	umull	r6, r7, sl, r0
   17c9c:	mla	r3, r0, fp, r3
   17ca0:	ldrd	sl, [sp]
   17ca4:	add	ip, r3, r7
   17ca8:	cmp	ip, #0
   17cac:	mov	r7, ip
   17cb0:	bne	18238 <__assert_fail@plt+0x6988>
   17cb4:	orrs	r3, sl, fp
   17cb8:	bne	18194 <__assert_fail@plt+0x68e4>
   17cbc:	umull	r2, r3, r6, r0
   17cc0:	mul	ip, r6, r1
   17cc4:	strd	r2, [sp]
   17cc8:	mla	r3, r0, r7, ip
   17ccc:	ldr	r2, [sp, #4]
   17cd0:	add	ip, r3, r2
   17cd4:	cmp	ip, #0
   17cd8:	str	ip, [sp, #4]
   17cdc:	bne	18214 <__assert_fail@plt+0x6964>
   17ce0:	orrs	r3, sl, fp
   17ce4:	bne	18194 <__assert_fail@plt+0x68e4>
   17ce8:	ldrd	r6, [sp]
   17cec:	mov	r3, #0
   17cf0:	mul	r2, r6, r1
   17cf4:	umull	sl, fp, r6, r0
   17cf8:	mla	r2, r0, r7, r2
   17cfc:	add	fp, r2, fp
   17d00:	orr	r8, r8, r3
   17d04:	add	r3, r9, lr
   17d08:	str	r3, [r4]
   17d0c:	ldrb	r3, [r9, lr]
   17d10:	cmp	r3, #0
   17d14:	orrne	r8, r8, #2
   17d18:	b	17948 <__assert_fail@plt+0x6098>
   17d1c:	mov	r1, r6
   17d20:	ldr	r0, [sp]
   17d24:	bl	116e8 <strchr@plt>
   17d28:	cmp	r0, #0
   17d2c:	bne	179b4 <__assert_fail@plt+0x6104>
   17d30:	ldr	r3, [sp, #12]
   17d34:	orr	r8, r8, #2
   17d38:	strd	sl, [r3]
   17d3c:	b	17950 <__assert_fail@plt+0x60a0>
   17d40:	ldrb	r3, [r9, #2]
   17d44:	mov	r0, #1024	; 0x400
   17d48:	cmp	r3, #66	; 0x42
   17d4c:	movne	lr, #1
   17d50:	moveq	lr, #3
   17d54:	b	17b88 <__assert_fail@plt+0x62d8>
   17d58:	lsr	r3, fp, #31
   17d5c:	adds	sl, sl, sl
   17d60:	adc	fp, fp, fp
   17d64:	cmp	r3, #0
   17d68:	beq	17d04 <__assert_fail@plt+0x6454>
   17d6c:	mov	r8, #1
   17d70:	mvn	sl, #0
   17d74:	mvn	fp, #0
   17d78:	b	17d04 <__assert_fail@plt+0x6454>
   17d7c:	mov	lr, #1
   17d80:	lsr	r3, fp, #23
   17d84:	cmp	r3, #0
   17d88:	bne	17d6c <__assert_fail@plt+0x64bc>
   17d8c:	lsl	r3, fp, #9
   17d90:	orr	r3, r3, sl, lsr #23
   17d94:	lsl	r2, sl, #9
   17d98:	mov	sl, r2
   17d9c:	mov	fp, r3
   17da0:	b	17d04 <__assert_fail@plt+0x6454>
   17da4:	lsr	r3, fp, #22
   17da8:	cmp	r3, #0
   17dac:	bne	17d6c <__assert_fail@plt+0x64bc>
   17db0:	lsl	r3, fp, #10
   17db4:	orr	r3, r3, sl, lsr #22
   17db8:	lsl	r2, sl, #10
   17dbc:	mov	sl, r2
   17dc0:	mov	fp, r3
   17dc4:	b	17d04 <__assert_fail@plt+0x6454>
   17dc8:	mov	r6, r0
   17dcc:	asr	r7, r0, #31
   17dd0:	mov	r3, #0
   17dd4:	mov	ip, #6
   17dd8:	str	r3, [sp]
   17ddc:	strd	r4, [sp, #16]
   17de0:	b	17e10 <__assert_fail@plt+0x6560>
   17de4:	orrs	r3, r2, r3
   17de8:	movne	r3, #1
   17dec:	muleq	r3, sl, r7
   17df0:	strne	r3, [sp]
   17df4:	mlaeq	r3, r6, fp, r3
   17df8:	umulleq	sl, fp, sl, r6
   17dfc:	mvnne	sl, #0
   17e00:	addeq	fp, r3, fp
   17e04:	mvnne	fp, #0
   17e08:	subs	ip, ip, #1
   17e0c:	beq	18154 <__assert_fail@plt+0x68a4>
   17e10:	cmp	fp, #0
   17e14:	mov	r2, #0
   17e18:	mov	r3, #0
   17e1c:	beq	17de4 <__assert_fail@plt+0x6534>
   17e20:	umull	r0, r1, sl, r6
   17e24:	mov	r5, #0
   17e28:	mov	r0, r1
   17e2c:	mov	r1, r5
   17e30:	umlal	r0, r1, fp, r6
   17e34:	cmp	r1, r5
   17e38:	movne	r2, #1
   17e3c:	movne	r3, #0
   17e40:	b	17de4 <__assert_fail@plt+0x6534>
   17e44:	mov	r6, r0
   17e48:	asr	r7, r0, #31
   17e4c:	mov	r3, #0
   17e50:	mov	ip, #7
   17e54:	str	r3, [sp]
   17e58:	strd	r4, [sp, #16]
   17e5c:	b	17e8c <__assert_fail@plt+0x65dc>
   17e60:	orrs	r3, r2, r3
   17e64:	movne	r3, #1
   17e68:	muleq	r3, sl, r7
   17e6c:	strne	r3, [sp]
   17e70:	mlaeq	r3, r6, fp, r3
   17e74:	umulleq	sl, fp, sl, r6
   17e78:	mvnne	sl, #0
   17e7c:	addeq	fp, r3, fp
   17e80:	mvnne	fp, #0
   17e84:	subs	ip, ip, #1
   17e88:	beq	18154 <__assert_fail@plt+0x68a4>
   17e8c:	cmp	fp, #0
   17e90:	mov	r2, #0
   17e94:	mov	r3, #0
   17e98:	beq	17e60 <__assert_fail@plt+0x65b0>
   17e9c:	umull	r0, r1, sl, r6
   17ea0:	mov	r5, #0
   17ea4:	mov	r0, r1
   17ea8:	mov	r1, r5
   17eac:	umlal	r0, r1, fp, r6
   17eb0:	cmp	r1, r5
   17eb4:	movne	r2, #1
   17eb8:	movne	r3, #0
   17ebc:	b	17e60 <__assert_fail@plt+0x65b0>
   17ec0:	asr	r1, r0, #31
   17ec4:	cmp	fp, #0
   17ec8:	mov	r6, #0
   17ecc:	mov	r7, #0
   17ed0:	bne	1816c <__assert_fail@plt+0x68bc>
   17ed4:	orrs	r3, r6, r7
   17ed8:	bne	17d6c <__assert_fail@plt+0x64bc>
   17edc:	mul	r3, sl, r1
   17ee0:	mla	r3, r0, fp, r3
   17ee4:	umull	sl, fp, sl, r0
   17ee8:	add	fp, r3, fp
   17eec:	b	17d04 <__assert_fail@plt+0x6454>
   17ef0:	mov	r6, r0
   17ef4:	asr	r7, r0, #31
   17ef8:	mov	r3, #0
   17efc:	mov	ip, #8
   17f00:	str	r3, [sp]
   17f04:	strd	r4, [sp, #16]
   17f08:	b	17f38 <__assert_fail@plt+0x6688>
   17f0c:	orrs	r3, r2, r3
   17f10:	movne	r3, #1
   17f14:	muleq	r3, sl, r7
   17f18:	strne	r3, [sp]
   17f1c:	mlaeq	r3, r6, fp, r3
   17f20:	umulleq	sl, fp, sl, r6
   17f24:	mvnne	sl, #0
   17f28:	addeq	fp, r3, fp
   17f2c:	mvnne	fp, #0
   17f30:	subs	ip, ip, #1
   17f34:	beq	18154 <__assert_fail@plt+0x68a4>
   17f38:	cmp	fp, #0
   17f3c:	mov	r2, #0
   17f40:	mov	r3, #0
   17f44:	beq	17f0c <__assert_fail@plt+0x665c>
   17f48:	umull	r0, r1, sl, r6
   17f4c:	mov	r5, #0
   17f50:	mov	r0, r1
   17f54:	mov	r1, r5
   17f58:	umlal	r0, r1, fp, r6
   17f5c:	cmp	r1, r5
   17f60:	movne	r2, #1
   17f64:	movne	r3, #0
   17f68:	b	17f0c <__assert_fail@plt+0x665c>
   17f6c:	mov	r6, r0
   17f70:	asr	r7, r0, #31
   17f74:	mov	r3, #0
   17f78:	mov	ip, #4
   17f7c:	str	r3, [sp]
   17f80:	strd	r4, [sp, #16]
   17f84:	b	17fb4 <__assert_fail@plt+0x6704>
   17f88:	orrs	r3, r2, r3
   17f8c:	movne	r3, #1
   17f90:	muleq	r3, sl, r7
   17f94:	strne	r3, [sp]
   17f98:	mlaeq	r3, r6, fp, r3
   17f9c:	umulleq	sl, fp, sl, r6
   17fa0:	mvnne	sl, #0
   17fa4:	addeq	fp, r3, fp
   17fa8:	mvnne	fp, #0
   17fac:	subs	ip, ip, #1
   17fb0:	beq	18154 <__assert_fail@plt+0x68a4>
   17fb4:	cmp	fp, #0
   17fb8:	mov	r2, #0
   17fbc:	mov	r3, #0
   17fc0:	beq	17f88 <__assert_fail@plt+0x66d8>
   17fc4:	umull	r0, r1, sl, r6
   17fc8:	mov	r5, #0
   17fcc:	mov	r0, r1
   17fd0:	mov	r1, r5
   17fd4:	umlal	r0, r1, fp, r6
   17fd8:	cmp	r1, r5
   17fdc:	movne	r2, #1
   17fe0:	movne	r3, #0
   17fe4:	b	17f88 <__assert_fail@plt+0x66d8>
   17fe8:	mov	r6, r0
   17fec:	asr	r7, r0, #31
   17ff0:	mov	r3, #0
   17ff4:	mov	ip, #5
   17ff8:	str	r3, [sp]
   17ffc:	strd	r4, [sp, #16]
   18000:	b	18030 <__assert_fail@plt+0x6780>
   18004:	orrs	r3, r2, r3
   18008:	movne	r3, #1
   1800c:	muleq	r3, sl, r7
   18010:	strne	r3, [sp]
   18014:	mlaeq	r3, r6, fp, r3
   18018:	umulleq	sl, fp, sl, r6
   1801c:	mvnne	sl, #0
   18020:	addeq	fp, r3, fp
   18024:	mvnne	fp, #0
   18028:	subs	ip, ip, #1
   1802c:	beq	18154 <__assert_fail@plt+0x68a4>
   18030:	cmp	fp, #0
   18034:	mov	r2, #0
   18038:	mov	r3, #0
   1803c:	beq	18004 <__assert_fail@plt+0x6754>
   18040:	umull	r0, r1, sl, r6
   18044:	mov	r5, #0
   18048:	mov	r0, r1
   1804c:	mov	r1, r5
   18050:	umlal	r0, r1, fp, r6
   18054:	cmp	r1, r5
   18058:	movne	r2, #1
   1805c:	movne	r3, #0
   18060:	b	18004 <__assert_fail@plt+0x6754>
   18064:	asr	r1, r0, #31
   18068:	cmp	fp, #0
   1806c:	mov	r6, #0
   18070:	mov	r7, #0
   18074:	bne	181c8 <__assert_fail@plt+0x6918>
   18078:	orrs	r3, r6, r7
   1807c:	bne	17d6c <__assert_fail@plt+0x64bc>
   18080:	umull	r2, r3, sl, r0
   18084:	mul	ip, sl, r1
   18088:	strd	r2, [sp]
   1808c:	mla	r3, r0, fp, ip
   18090:	ldr	r2, [sp, #4]
   18094:	mov	sl, r6
   18098:	add	ip, r3, r2
   1809c:	cmp	ip, #0
   180a0:	mov	fp, r7
   180a4:	str	ip, [sp, #4]
   180a8:	bne	181f0 <__assert_fail@plt+0x6940>
   180ac:	orrs	r3, sl, fp
   180b0:	bne	17d6c <__assert_fail@plt+0x64bc>
   180b4:	ldrd	r6, [sp]
   180b8:	mul	r3, r6, r1
   180bc:	umull	sl, fp, r6, r0
   180c0:	mla	r0, r0, r7, r3
   180c4:	add	fp, r0, fp
   180c8:	b	17d04 <__assert_fail@plt+0x6454>
   180cc:	mov	lr, #1
   180d0:	b	17d04 <__assert_fail@plt+0x6454>
   180d4:	mov	lr, #1
   180d8:	mov	r6, #1024	; 0x400
   180dc:	mov	r7, #0
   180e0:	b	17e4c <__assert_fail@plt+0x659c>
   180e4:	mov	lr, #1
   180e8:	mov	r6, #1024	; 0x400
   180ec:	mov	r7, #0
   180f0:	b	17ef8 <__assert_fail@plt+0x6648>
   180f4:	mov	lr, #1
   180f8:	mov	r6, #1024	; 0x400
   180fc:	mov	r7, #0
   18100:	b	17f74 <__assert_fail@plt+0x66c4>
   18104:	mov	lr, #1
   18108:	mov	r6, #1024	; 0x400
   1810c:	mov	r7, #0
   18110:	b	17ff0 <__assert_fail@plt+0x6740>
   18114:	mov	lr, #1
   18118:	mov	r0, #1024	; 0x400
   1811c:	mov	r1, #0
   18120:	b	18068 <__assert_fail@plt+0x67b8>
   18124:	mov	lr, #1
   18128:	mov	r0, #1024	; 0x400
   1812c:	mov	r1, #0
   18130:	b	17ec4 <__assert_fail@plt+0x6614>
   18134:	mov	lr, #1
   18138:	mov	r0, #1024	; 0x400
   1813c:	mov	r1, #0
   18140:	b	17c74 <__assert_fail@plt+0x63c4>
   18144:	mov	lr, #1
   18148:	mov	r6, #1024	; 0x400
   1814c:	mov	r7, #0
   18150:	b	17dd0 <__assert_fail@plt+0x6520>
   18154:	ldrd	r4, [sp, #16]
   18158:	ldr	r3, [sp]
   1815c:	b	17d00 <__assert_fail@plt+0x6450>
   18160:	mov	lr, #2
   18164:	mov	r0, #1000	; 0x3e8
   18168:	b	17b88 <__assert_fail@plt+0x62d8>
   1816c:	umull	r2, r3, sl, r0
   18170:	str	r3, [sp]
   18174:	mov	r3, #0
   18178:	str	r3, [sp, #4]
   1817c:	ldrd	r2, [sp]
   18180:	umlal	r2, r3, fp, r0
   18184:	cmp	r3, #0
   18188:	movne	r6, #1
   1818c:	movne	r7, #0
   18190:	b	17ed4 <__assert_fail@plt+0x6624>
   18194:	mov	r3, #1
   18198:	mvn	sl, #0
   1819c:	mvn	fp, #0
   181a0:	b	17d00 <__assert_fail@plt+0x6450>
   181a4:	umull	r2, r3, sl, r0
   181a8:	mov	r7, #0
   181ac:	mov	r6, r3
   181b0:	umlal	r6, r7, fp, r0
   181b4:	cmp	r7, #0
   181b8:	movne	r2, #1
   181bc:	movne	r3, #0
   181c0:	strdne	r2, [sp]
   181c4:	b	17c88 <__assert_fail@plt+0x63d8>
   181c8:	umull	r2, r3, sl, r0
   181cc:	str	r3, [sp]
   181d0:	mov	r3, #0
   181d4:	str	r3, [sp, #4]
   181d8:	ldrd	r2, [sp]
   181dc:	umlal	r2, r3, fp, r0
   181e0:	cmp	r3, #0
   181e4:	movne	r6, #1
   181e8:	movne	r7, #0
   181ec:	b	18078 <__assert_fail@plt+0x67c8>
   181f0:	ldr	r3, [sp]
   181f4:	mov	r7, #0
   181f8:	umull	r2, r3, r3, r0
   181fc:	mov	r6, r3
   18200:	umlal	r6, r7, ip, r0
   18204:	cmp	r7, #0
   18208:	movne	sl, #1
   1820c:	movne	fp, #0
   18210:	b	180ac <__assert_fail@plt+0x67fc>
   18214:	ldr	r3, [sp]
   18218:	mov	r7, #0
   1821c:	umull	r2, r3, r3, r0
   18220:	mov	r6, r3
   18224:	umlal	r6, r7, ip, r0
   18228:	cmp	r7, #0
   1822c:	movne	sl, #1
   18230:	movne	fp, #0
   18234:	b	17ce0 <__assert_fail@plt+0x6430>
   18238:	umull	r2, r3, r6, r0
   1823c:	str	r3, [sp]
   18240:	mov	r3, #0
   18244:	str	r3, [sp, #4]
   18248:	ldrd	r2, [sp]
   1824c:	umlal	r2, r3, ip, r0
   18250:	cmp	r3, #0
   18254:	movne	sl, #1
   18258:	movne	fp, #0
   1825c:	b	17cb4 <__assert_fail@plt+0x6404>
   18260:	bl	11580 <__stack_chk_fail@plt>
   18264:	ldr	r3, [pc, #16]	; 1827c <__assert_fail@plt+0x69cc>
   18268:	mov	r2, #96	; 0x60
   1826c:	ldr	r1, [pc, #12]	; 18280 <__assert_fail@plt+0x69d0>
   18270:	ldr	r0, [pc, #12]	; 18284 <__assert_fail@plt+0x69d4>
   18274:	bl	118b0 <__assert_fail@plt>
   18278:	andeq	ip, r2, r0, lsl #30
   1827c:	andeq	ip, r1, r8, asr #32
   18280:	andeq	ip, r1, r4, asr r0
   18284:	andeq	ip, r1, r4, rrx
   18288:	ldrd	r2, [r1, #8]
   1828c:	push	{r4, r5}
   18290:	ldrd	r4, [r0, #8]
   18294:	cmp	r5, r3
   18298:	cmpeq	r4, r2
   1829c:	movne	r0, #0
   182a0:	bne	182bc <__assert_fail@plt+0x6a0c>
   182a4:	ldrd	r4, [r0]
   182a8:	ldrd	r2, [r1]
   182ac:	cmp	r5, r3
   182b0:	cmpeq	r4, r2
   182b4:	moveq	r0, #1
   182b8:	movne	r0, #0
   182bc:	pop	{r4, r5}
   182c0:	bx	lr
   182c4:	push	{r4, lr}
   182c8:	mov	r2, r1
   182cc:	mov	r3, #0
   182d0:	ldrd	r0, [r0, #8]
   182d4:	bl	1b03c <fts_children@@Base+0xc20>
   182d8:	mov	r0, r2
   182dc:	pop	{r4, pc}
   182e0:	push	{r4, lr}
   182e4:	mov	r2, r1
   182e8:	mov	r3, #0
   182ec:	ldrd	r0, [r0]
   182f0:	bl	1b03c <fts_children@@Base+0xc20>
   182f4:	mov	r0, r2
   182f8:	pop	{r4, pc}
   182fc:	push	{r4, r5}
   18300:	ldrd	r2, [r1]
   18304:	ldrd	r4, [r0]
   18308:	cmp	r5, r3
   1830c:	cmpeq	r4, r2
   18310:	moveq	r0, #1
   18314:	movne	r0, #0
   18318:	pop	{r4, r5}
   1831c:	bx	lr
   18320:	ldr	r2, [r0]
   18324:	ldr	r3, [r1]
   18328:	ldrd	r0, [r2, #168]	; 0xa8
   1832c:	ldrd	r2, [r3, #168]	; 0xa8
   18330:	cmp	r1, r3
   18334:	cmpeq	r0, r2
   18338:	bcc	18348 <__assert_fail@plt+0x6a98>
   1833c:	movhi	r0, #1
   18340:	movls	r0, #0
   18344:	bx	lr
   18348:	mvn	r0, #0
   1834c:	bx	lr
   18350:	ldr	r3, [r0, #40]	; 0x28
   18354:	push	{r4, r5, r6, r7, r8, lr}
   18358:	cmp	r3, r2
   1835c:	mov	r6, r0
   18360:	ldr	r7, [r0, #44]	; 0x2c
   18364:	mov	r5, r2
   18368:	mov	r4, r1
   1836c:	ldr	r0, [r0, #8]
   18370:	bcs	18398 <__assert_fail@plt+0x6ae8>
   18374:	add	r1, r2, #40	; 0x28
   18378:	cmn	r1, #-1073741823	; 0xc0000001
   1837c:	str	r1, [r6, #40]	; 0x28
   18380:	bhi	18410 <__assert_fail@plt+0x6b60>
   18384:	lsl	r1, r1, #2
   18388:	bl	11598 <realloc@plt>
   1838c:	cmp	r0, #0
   18390:	strne	r0, [r6, #8]
   18394:	beq	1840c <__assert_fail@plt+0x6b5c>
   18398:	cmp	r4, #0
   1839c:	movne	r2, r0
   183a0:	beq	183b4 <__assert_fail@plt+0x6b04>
   183a4:	str	r4, [r2], #4
   183a8:	ldr	r4, [r4, #8]
   183ac:	cmp	r4, #0
   183b0:	bne	183a4 <__assert_fail@plt+0x6af4>
   183b4:	mov	r3, r7
   183b8:	mov	r2, #4
   183bc:	mov	r1, r5
   183c0:	bl	117e4 <qsort@plt>
   183c4:	ldr	lr, [r6, #8]
   183c8:	subs	r3, r5, #1
   183cc:	ldr	r0, [lr]
   183d0:	moveq	r2, r0
   183d4:	beq	18400 <__assert_fail@plt+0x6b50>
   183d8:	mov	ip, r0
   183dc:	mov	r2, lr
   183e0:	b	183e8 <__assert_fail@plt+0x6b38>
   183e4:	ldr	ip, [r2]
   183e8:	ldr	r1, [r2, #4]!
   183ec:	subs	r3, r3, #1
   183f0:	str	r1, [ip, #8]
   183f4:	bne	183e4 <__assert_fail@plt+0x6b34>
   183f8:	add	r5, lr, r5, lsl #2
   183fc:	ldr	r2, [r5, #-4]
   18400:	mov	r3, #0
   18404:	str	r3, [r2, #8]
   18408:	pop	{r4, r5, r6, r7, r8, pc}
   1840c:	ldr	r0, [r6, #8]
   18410:	bl	11520 <free@plt>
   18414:	mov	r3, #0
   18418:	mov	r0, r4
   1841c:	str	r3, [r6, #8]
   18420:	str	r3, [r6, #40]	; 0x28
   18424:	pop	{r4, r5, r6, r7, r8, pc}
   18428:	add	r3, r2, #184	; 0xb8
   1842c:	push	{r4, r5, r6, r7, r8, lr}
   18430:	mov	r6, r0
   18434:	bic	r0, r3, #7
   18438:	mov	r5, r2
   1843c:	mov	r7, r1
   18440:	bl	11664 <malloc@plt>
   18444:	subs	r4, r0, #0
   18448:	beq	18494 <__assert_fail@plt+0x6be4>
   1844c:	mov	r1, r7
   18450:	mov	r2, r5
   18454:	add	r0, r4, #176	; 0xb0
   18458:	bl	11538 <memcpy@plt>
   1845c:	add	r0, r4, r5
   18460:	ldr	r1, [r6, #24]
   18464:	mov	r3, #0
   18468:	mov	r2, #3
   1846c:	strb	r3, [r0, #176]	; 0xb0
   18470:	str	r3, [r4, #32]
   18474:	str	r3, [r4, #12]
   18478:	strh	r3, [r4, #62]	; 0x3e
   1847c:	str	r3, [r4, #16]
   18480:	str	r3, [r4, #20]
   18484:	str	r5, [r4, #52]	; 0x34
   18488:	str	r6, [r4, #44]	; 0x2c
   1848c:	str	r1, [r4, #28]
   18490:	strh	r2, [r4, #64]	; 0x40
   18494:	mov	r0, r4
   18498:	pop	{r4, r5, r6, r7, r8, pc}
   1849c:	push	{r4, r5, r6, lr}
   184a0:	subs	r4, r0, #0
   184a4:	popeq	{r4, r5, r6, pc}
   184a8:	ldr	r3, [r4, #12]
   184ac:	ldr	r5, [r4, #8]
   184b0:	subs	r0, r3, #0
   184b4:	beq	184bc <__assert_fail@plt+0x6c0c>
   184b8:	bl	11898 <closedir@plt>
   184bc:	mov	r0, r4
   184c0:	bl	11520 <free@plt>
   184c4:	subs	r4, r5, #0
   184c8:	bne	184a8 <__assert_fail@plt+0x6bf8>
   184cc:	pop	{r4, r5, r6, pc}
   184d0:	push	{r4, lr}
   184d4:	mov	r4, r0
   184d8:	mov	r0, r4
   184dc:	bl	1a9d0 <fts_children@@Base+0x5b4>
   184e0:	cmp	r0, #0
   184e4:	mov	r0, r4
   184e8:	popne	{r4, pc}
   184ec:	bl	1aa1c <fts_children@@Base+0x600>
   184f0:	cmp	r0, #0
   184f4:	blt	184d8 <__assert_fail@plt+0x6c28>
   184f8:	bl	11868 <close@plt>
   184fc:	b	184d8 <__assert_fail@plt+0x6c28>
   18500:	push	{r4, r5, r6, r7, r8, lr}
   18504:	sub	sp, sp, #120	; 0x78
   18508:	ldr	r6, [r0, #44]	; 0x2c
   1850c:	ldr	r5, [pc, #272]	; 18624 <__assert_fail@plt+0x6d74>
   18510:	ldr	r3, [r6, #48]	; 0x30
   18514:	ldr	r2, [r5]
   18518:	tst	r3, #512	; 0x200
   1851c:	str	r2, [sp, #116]	; 0x74
   18520:	beq	185a4 <__assert_fail@plt+0x6cf4>
   18524:	ldr	r4, [r6, #52]	; 0x34
   18528:	mov	r7, r0
   1852c:	cmp	r4, #0
   18530:	mov	r8, r1
   18534:	beq	1855c <__assert_fail@plt+0x6cac>
   18538:	ldrd	r2, [r7, #72]	; 0x48
   1853c:	add	r1, sp, #8
   18540:	mov	r0, r4
   18544:	strd	r2, [sp, #8]
   18548:	bl	13af0 <__assert_fail@plt+0x2240>
   1854c:	cmp	r0, #0
   18550:	beq	18588 <__assert_fail@plt+0x6cd8>
   18554:	ldr	r6, [r0, #8]
   18558:	b	185a8 <__assert_fail@plt+0x6cf8>
   1855c:	ldr	r3, [pc, #196]	; 18628 <__assert_fail@plt+0x6d78>
   18560:	mov	r1, r4
   18564:	str	r3, [sp]
   18568:	ldr	r2, [pc, #188]	; 1862c <__assert_fail@plt+0x6d7c>
   1856c:	ldr	r3, [pc, #188]	; 18630 <__assert_fail@plt+0x6d80>
   18570:	mov	r0, #13
   18574:	bl	13da8 <__assert_fail@plt+0x24f8>
   18578:	cmp	r0, #0
   1857c:	mov	r4, r0
   18580:	str	r0, [r6, #52]	; 0x34
   18584:	bne	18538 <__assert_fail@plt+0x6c88>
   18588:	cmp	r8, #0
   1858c:	blt	185a4 <__assert_fail@plt+0x6cf4>
   18590:	mov	r0, r8
   18594:	add	r1, sp, #24
   18598:	bl	114a8 <fstatfs64@plt>
   1859c:	cmp	r0, #0
   185a0:	beq	185c4 <__assert_fail@plt+0x6d14>
   185a4:	mov	r6, #0
   185a8:	ldr	r2, [sp, #116]	; 0x74
   185ac:	ldr	r3, [r5]
   185b0:	mov	r0, r6
   185b4:	cmp	r2, r3
   185b8:	bne	1861c <__assert_fail@plt+0x6d6c>
   185bc:	add	sp, sp, #120	; 0x78
   185c0:	pop	{r4, r5, r6, r7, r8, pc}
   185c4:	cmp	r4, #0
   185c8:	ldr	r6, [sp, #24]
   185cc:	beq	185a8 <__assert_fail@plt+0x6cf8>
   185d0:	mov	r0, #16
   185d4:	bl	11664 <malloc@plt>
   185d8:	subs	r8, r0, #0
   185dc:	beq	185a8 <__assert_fail@plt+0x6cf8>
   185e0:	ldrd	r2, [r7, #72]	; 0x48
   185e4:	str	r6, [r8, #8]
   185e8:	mov	r0, r4
   185ec:	strd	r2, [r8]
   185f0:	mov	r1, r8
   185f4:	bl	143d4 <__assert_fail@plt+0x2b24>
   185f8:	cmp	r0, #0
   185fc:	beq	18610 <__assert_fail@plt+0x6d60>
   18600:	cmp	r8, r0
   18604:	bne	18620 <__assert_fail@plt+0x6d70>
   18608:	ldr	r6, [sp, #24]
   1860c:	b	185a8 <__assert_fail@plt+0x6cf8>
   18610:	mov	r0, r8
   18614:	bl	11520 <free@plt>
   18618:	b	18608 <__assert_fail@plt+0x6d58>
   1861c:	bl	11580 <__stack_chk_fail@plt>
   18620:	bl	1185c <abort@plt>
   18624:	andeq	ip, r2, r0, lsl #30
   18628:	andeq	r1, r1, r0, lsr #10
   1862c:	andeq	r8, r1, r0, ror #5
   18630:	strdeq	r8, [r1], -ip
   18634:	push	{r4, lr}
   18638:	bl	18500 <__assert_fail@plt+0x6c50>
   1863c:	ldr	r3, [pc, #112]	; 186b4 <__assert_fail@plt+0x6e04>
   18640:	cmp	r0, r3
   18644:	beq	186a4 <__assert_fail@plt+0x6df4>
   18648:	ble	18680 <__assert_fail@plt+0x6dd0>
   1864c:	ldr	r3, [pc, #100]	; 186b8 <__assert_fail@plt+0x6e08>
   18650:	cmp	r0, r3
   18654:	beq	186a4 <__assert_fail@plt+0x6df4>
   18658:	add	r3, r3, #83886080	; 0x5000000
   1865c:	add	r3, r3, #4544	; 0x11c0
   18660:	add	r3, r3, #51	; 0x33
   18664:	cmp	r0, r3
   18668:	beq	186ac <__assert_fail@plt+0x6dfc>
   1866c:	ldr	r3, [pc, #72]	; 186bc <__assert_fail@plt+0x6e0c>
   18670:	cmp	r0, r3
   18674:	moveq	r0, #2
   18678:	movne	r0, #1
   1867c:	pop	{r4, pc}
   18680:	cmp	r0, #0
   18684:	popeq	{r4, pc}
   18688:	ldr	r3, [pc, #48]	; 186c0 <__assert_fail@plt+0x6e10>
   1868c:	cmp	r0, r3
   18690:	beq	186a4 <__assert_fail@plt+0x6df4>
   18694:	ldr	r3, [pc, #40]	; 186c4 <__assert_fail@plt+0x6e14>
   18698:	subs	r0, r0, r3
   1869c:	movne	r0, #1
   186a0:	pop	{r4, pc}
   186a4:	mov	r0, #0
   186a8:	pop	{r4, pc}
   186ac:	mov	r0, #2
   186b0:	pop	{r4, pc}
   186b4:	andeq	r9, r0, r0, lsr #31
   186b8:	movtpl	r4, #24911	; 0x614f
   186bc:	rsbpl	r4, r5, #1884160	; 0x1cc000
   186c0:	andeq	r6, r0, r9, ror #18
   186c4:			; <UNDEFINED> instruction: 0xff534d42
   186c8:	push	{r4, r5, r6, lr}
   186cc:	mov	r5, r1
   186d0:	ldr	r1, [r0, #32]
   186d4:	cmn	r1, #100	; 0x64
   186d8:	sub	r3, r1, r5
   186dc:	clz	r3, r3
   186e0:	lsr	r3, r3, #5
   186e4:	moveq	r3, #0
   186e8:	cmp	r3, #0
   186ec:	bne	1874c <__assert_fail@plt+0x6e9c>
   186f0:	cmp	r2, #0
   186f4:	mov	r4, r0
   186f8:	bne	18724 <__assert_fail@plt+0x6e74>
   186fc:	ldr	r3, [r0, #48]	; 0x30
   18700:	lsr	r3, r3, #2
   18704:	eor	r3, r3, #1
   18708:	cmp	r1, #0
   1870c:	movlt	r3, #0
   18710:	andge	r3, r3, #1
   18714:	cmp	r3, #0
   18718:	bne	18740 <__assert_fail@plt+0x6e90>
   1871c:	str	r5, [r4, #32]
   18720:	pop	{r4, r5, r6, pc}
   18724:	add	r0, r0, #60	; 0x3c
   18728:	bl	1a9d8 <fts_children@@Base+0x5bc>
   1872c:	cmp	r0, #0
   18730:	blt	1871c <__assert_fail@plt+0x6e6c>
   18734:	bl	11868 <close@plt>
   18738:	str	r5, [r4, #32]
   1873c:	pop	{r4, r5, r6, pc}
   18740:	mov	r0, r1
   18744:	bl	11868 <close@plt>
   18748:	b	18738 <__assert_fail@plt+0x6e88>
   1874c:	bl	1185c <abort@plt>
   18750:	ldr	r3, [r0, #48]	; 0x30
   18754:	push	{r4, r5, r6, lr}
   18758:	ands	r5, r3, #4
   1875c:	mov	r4, r0
   18760:	movne	r5, #0
   18764:	bne	1877c <__assert_fail@plt+0x6ecc>
   18768:	tst	r3, #512	; 0x200
   1876c:	beq	1878c <__assert_fail@plt+0x6edc>
   18770:	mov	r2, #1
   18774:	mvn	r1, #99	; 0x63
   18778:	bl	186c8 <__assert_fail@plt+0x6e18>
   1877c:	add	r0, r4, #60	; 0x3c
   18780:	bl	184d0 <__assert_fail@plt+0x6c20>
   18784:	mov	r0, r5
   18788:	pop	{r4, r5, r6, pc}
   1878c:	ldr	r0, [r0, #28]
   18790:	bl	117d8 <fchdir@plt>
   18794:	adds	r5, r0, #0
   18798:	movne	r5, #1
   1879c:	b	1877c <__assert_fail@plt+0x6ecc>
   187a0:	push	{r4, r5, r6, lr}
   187a4:	mov	r4, r2
   187a8:	ldr	r2, [r2, #48]	; 0x30
   187ac:	mov	r6, r1
   187b0:	cmp	r2, #0
   187b4:	ldr	ip, [r1]
   187b8:	sub	sp, sp, #8
   187bc:	add	r5, r4, #72	; 0x48
   187c0:	ldr	r1, [r4, #24]
   187c4:	bne	18824 <__assert_fail@plt+0x6f74>
   187c8:	tst	ip, #1
   187cc:	beq	18824 <__assert_fail@plt+0x6f74>
   187d0:	mov	r2, r5
   187d4:	mov	r0, #3
   187d8:	bl	11838 <__xstat64@plt>
   187dc:	cmp	r0, #0
   187e0:	beq	18854 <__assert_fail@plt+0x6fa4>
   187e4:	bl	1170c <__errno_location@plt>
   187e8:	ldr	r3, [r0]
   187ec:	mov	r6, r0
   187f0:	cmp	r3, #2
   187f4:	bne	18888 <__assert_fail@plt+0x6fd8>
   187f8:	mov	r2, r5
   187fc:	ldr	r1, [r4, #24]
   18800:	mov	r0, #3
   18804:	bl	11874 <__lxstat64@plt>
   18808:	cmp	r0, #0
   1880c:	ldrne	r3, [r6]
   18810:	bne	18888 <__assert_fail@plt+0x6fd8>
   18814:	str	r0, [r6]
   18818:	mov	r0, #13
   1881c:	add	sp, sp, #8
   18820:	pop	{r4, r5, r6, pc}
   18824:	lsl	ip, ip, #30
   18828:	orrs	r3, r3, ip, lsr #31
   1882c:	bne	187d0 <__assert_fail@plt+0x6f20>
   18830:	mov	r3, #256	; 0x100
   18834:	mov	r2, r1
   18838:	str	r3, [sp]
   1883c:	mov	r1, r0
   18840:	mov	r3, r5
   18844:	mov	r0, #3
   18848:	bl	115bc <__fxstatat64@plt>
   1884c:	cmp	r0, #0
   18850:	bne	18880 <__assert_fail@plt+0x6fd0>
   18854:	ldr	r3, [r4, #88]	; 0x58
   18858:	and	r3, r3, #61440	; 0xf000
   1885c:	cmp	r3, #16384	; 0x4000
   18860:	beq	188a8 <__assert_fail@plt+0x6ff8>
   18864:	cmp	r3, #40960	; 0xa000
   18868:	beq	18924 <__assert_fail@plt+0x7074>
   1886c:	cmp	r3, #32768	; 0x8000
   18870:	movne	r0, #3
   18874:	moveq	r0, #8
   18878:	add	sp, sp, #8
   1887c:	pop	{r4, r5, r6, pc}
   18880:	bl	1170c <__errno_location@plt>
   18884:	ldr	r3, [r0]
   18888:	str	r3, [r4, #32]
   1888c:	mov	r0, r5
   18890:	mov	r2, #104	; 0x68
   18894:	mov	r1, #0
   18898:	bl	11724 <memset@plt>
   1889c:	mov	r0, #10
   188a0:	add	sp, sp, #8
   188a4:	pop	{r4, r5, r6, pc}
   188a8:	ldr	r3, [r4, #92]	; 0x5c
   188ac:	cmp	r3, #1
   188b0:	bls	1891c <__assert_fail@plt+0x706c>
   188b4:	ldr	r2, [r4, #48]	; 0x30
   188b8:	cmp	r2, #0
   188bc:	ble	1891c <__assert_fail@plt+0x706c>
   188c0:	ldr	r2, [r6]
   188c4:	tst	r2, #32
   188c8:	subeq	r3, r3, #2
   188cc:	ldrb	r2, [r4, #176]	; 0xb0
   188d0:	str	r3, [r4, #56]	; 0x38
   188d4:	cmp	r2, #46	; 0x2e
   188d8:	bne	188fc <__assert_fail@plt+0x704c>
   188dc:	ldrb	r3, [r4, #177]	; 0xb1
   188e0:	cmp	r3, #0
   188e4:	beq	18908 <__assert_fail@plt+0x7058>
   188e8:	ldr	r3, [r4, #176]	; 0xb0
   188ec:	bic	r3, r3, #-16777216	; 0xff000000
   188f0:	bic	r3, r3, #255	; 0xff
   188f4:	cmp	r3, #11776	; 0x2e00
   188f8:	beq	18908 <__assert_fail@plt+0x7058>
   188fc:	mov	r0, #1
   18900:	add	sp, sp, #8
   18904:	pop	{r4, r5, r6, pc}
   18908:	ldr	r3, [r4, #48]	; 0x30
   1890c:	cmp	r3, #0
   18910:	moveq	r0, #1
   18914:	movne	r0, #5
   18918:	b	18878 <__assert_fail@plt+0x6fc8>
   1891c:	mvn	r3, #0
   18920:	b	188cc <__assert_fail@plt+0x701c>
   18924:	mov	r0, #12
   18928:	b	18878 <__assert_fail@plt+0x6fc8>
   1892c:	ldr	ip, [r1]
   18930:	push	{r4, r5, r6, lr}
   18934:	add	r3, ip, #256	; 0x100
   18938:	add	r2, r3, r2
   1893c:	cmp	ip, r2
   18940:	mov	r4, r0
   18944:	ldr	r0, [r0]
   18948:	bhi	18970 <__assert_fail@plt+0x70c0>
   1894c:	str	r2, [r1]
   18950:	mov	r1, r2
   18954:	bl	11598 <realloc@plt>
   18958:	subs	r5, r0, #0
   1895c:	movne	r3, #1
   18960:	strne	r5, [r4]
   18964:	beq	18994 <__assert_fail@plt+0x70e4>
   18968:	mov	r0, r3
   1896c:	pop	{r4, r5, r6, pc}
   18970:	mov	r5, #0
   18974:	bl	11520 <free@plt>
   18978:	str	r5, [r4]
   1897c:	bl	1170c <__errno_location@plt>
   18980:	mov	r2, #36	; 0x24
   18984:	mov	r3, r5
   18988:	str	r2, [r0]
   1898c:	mov	r0, r3
   18990:	pop	{r4, r5, r6, pc}
   18994:	ldr	r0, [r4]
   18998:	bl	11520 <free@plt>
   1899c:	str	r5, [r4]
   189a0:	mov	r3, r5
   189a4:	b	18968 <__assert_fail@plt+0x70b8>
   189a8:	ldr	r3, [pc, #104]	; 18a18 <__assert_fail@plt+0x7168>
   189ac:	push	{r4, lr}
   189b0:	and	r3, r3, r0
   189b4:	cmp	r3, #0
   189b8:	sub	sp, sp, #8
   189bc:	mov	r4, r1
   189c0:	beq	189f4 <__assert_fail@plt+0x7144>
   189c4:	ldr	r2, [pc, #80]	; 18a1c <__assert_fail@plt+0x716c>
   189c8:	ldr	r3, [pc, #80]	; 18a20 <__assert_fail@plt+0x7170>
   189cc:	str	r2, [sp]
   189d0:	mov	r1, #0
   189d4:	ldr	r2, [pc, #72]	; 18a24 <__assert_fail@plt+0x7174>
   189d8:	mov	r0, #31
   189dc:	bl	13da8 <__assert_fail@plt+0x24f8>
   189e0:	str	r0, [r4]
   189e4:	adds	r0, r0, #0
   189e8:	movne	r0, #1
   189ec:	add	sp, sp, #8
   189f0:	pop	{r4, pc}
   189f4:	mov	r0, #32
   189f8:	bl	11664 <malloc@plt>
   189fc:	cmp	r0, #0
   18a00:	str	r0, [r4]
   18a04:	beq	189ec <__assert_fail@plt+0x713c>
   18a08:	bl	1a7c8 <fts_children@@Base+0x3ac>
   18a0c:	mov	r0, #1
   18a10:	add	sp, sp, #8
   18a14:	pop	{r4, pc}
   18a18:	andeq	r0, r0, r2, lsl #2
   18a1c:	andeq	r1, r1, r0, lsr #10
   18a20:	andeq	r8, r1, r8, lsl #5
   18a24:	andeq	r8, r1, r4, asr #5
   18a28:	lsl	r3, r1, #11
   18a2c:	lsl	ip, r1, #7
   18a30:	tst	r1, #512	; 0x200
   18a34:	and	r1, r3, #32768	; 0x8000
   18a38:	and	r3, ip, #262144	; 0x40000
   18a3c:	orr	r1, r1, r3
   18a40:	orr	r1, r1, #540672	; 0x84000
   18a44:	mov	r3, r2
   18a48:	orr	r1, r1, #2304	; 0x900
   18a4c:	beq	18a5c <__assert_fail@plt+0x71ac>
   18a50:	mov	r2, r1
   18a54:	mov	r1, r3
   18a58:	b	1aa98 <fts_children@@Base+0x67c>
   18a5c:	mov	r0, r2
   18a60:	b	1a8c0 <fts_children@@Base+0x4a4>
   18a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a68:	subs	fp, r3, #0
   18a6c:	ldr	r5, [pc, #500]	; 18c68 <__assert_fail@plt+0x73b8>
   18a70:	sub	sp, sp, #116	; 0x74
   18a74:	ldr	sl, [r0, #48]	; 0x30
   18a78:	ldr	r3, [r5]
   18a7c:	mov	r6, r0
   18a80:	mov	r7, r1
   18a84:	mov	r4, r2
   18a88:	and	r9, sl, #4
   18a8c:	str	r3, [sp, #108]	; 0x6c
   18a90:	beq	18b64 <__assert_fail@plt+0x72b4>
   18a94:	ldr	r1, [pc, #464]	; 18c6c <__assert_fail@plt+0x73bc>
   18a98:	mov	r0, fp
   18a9c:	bl	114e4 <strcmp@plt>
   18aa0:	cmp	r0, #0
   18aa4:	bne	18b64 <__assert_fail@plt+0x72b4>
   18aa8:	cmp	r9, #0
   18aac:	bne	18ba0 <__assert_fail@plt+0x72f0>
   18ab0:	cmp	r4, #0
   18ab4:	bge	18c54 <__assert_fail@plt+0x73a4>
   18ab8:	tst	sl, #512	; 0x200
   18abc:	bne	18be0 <__assert_fail@plt+0x7330>
   18ac0:	mov	r9, #1
   18ac4:	mov	r1, sl
   18ac8:	mov	r2, fp
   18acc:	ldr	r0, [r6, #32]
   18ad0:	bl	18a28 <__assert_fail@plt+0x7178>
   18ad4:	subs	r8, r0, #0
   18ad8:	blt	18c48 <__assert_fail@plt+0x7398>
   18adc:	ldr	sl, [r6, #48]	; 0x30
   18ae0:	tst	sl, #2
   18ae4:	beq	18b80 <__assert_fail@plt+0x72d0>
   18ae8:	mov	r2, sp
   18aec:	mov	r1, r8
   18af0:	mov	r0, #3
   18af4:	bl	115d4 <__fxstat64@plt>
   18af8:	cmp	r0, #0
   18afc:	bne	18bd8 <__assert_fail@plt+0x7328>
   18b00:	ldrd	r0, [r7, #72]	; 0x48
   18b04:	ldrd	r2, [sp]
   18b08:	cmp	r1, r3
   18b0c:	cmpeq	r0, r2
   18b10:	bne	18bcc <__assert_fail@plt+0x731c>
   18b14:	ldrd	r0, [r7, #168]	; 0xa8
   18b18:	ldrd	r2, [sp, #96]	; 0x60
   18b1c:	cmp	r1, r3
   18b20:	cmpeq	r0, r2
   18b24:	bne	18bcc <__assert_fail@plt+0x731c>
   18b28:	ldr	sl, [r6, #48]	; 0x30
   18b2c:	tst	sl, #512	; 0x200
   18b30:	bne	18c1c <__assert_fail@plt+0x736c>
   18b34:	mov	r0, r8
   18b38:	bl	117d8 <fchdir@plt>
   18b3c:	mov	sl, r0
   18b40:	cmp	r4, #0
   18b44:	bge	18bb0 <__assert_fail@plt+0x7300>
   18b48:	bl	1170c <__errno_location@plt>
   18b4c:	mov	r4, r0
   18b50:	mov	r0, r8
   18b54:	ldr	r6, [r4]
   18b58:	bl	11868 <close@plt>
   18b5c:	str	r6, [r4]
   18b60:	b	18bb0 <__assert_fail@plt+0x7300>
   18b64:	cmp	r9, #0
   18b68:	bne	18ba0 <__assert_fail@plt+0x72f0>
   18b6c:	cmp	r4, #0
   18b70:	movge	r8, r4
   18b74:	blt	18ac4 <__assert_fail@plt+0x7214>
   18b78:	tst	sl, #2
   18b7c:	bne	18ae8 <__assert_fail@plt+0x7238>
   18b80:	cmp	fp, #0
   18b84:	beq	18b2c <__assert_fail@plt+0x727c>
   18b88:	mov	r0, fp
   18b8c:	ldr	r1, [pc, #216]	; 18c6c <__assert_fail@plt+0x73bc>
   18b90:	bl	114e4 <strcmp@plt>
   18b94:	cmp	r0, #0
   18b98:	bne	18b2c <__assert_fail@plt+0x727c>
   18b9c:	b	18ae8 <__assert_fail@plt+0x7238>
   18ba0:	mvn	r3, r4
   18ba4:	lsr	r3, r3, #31
   18ba8:	ands	sl, r3, sl, lsr #9
   18bac:	bne	18c38 <__assert_fail@plt+0x7388>
   18bb0:	ldr	r2, [sp, #108]	; 0x6c
   18bb4:	ldr	r3, [r5]
   18bb8:	mov	r0, sl
   18bbc:	cmp	r2, r3
   18bc0:	bne	18c50 <__assert_fail@plt+0x73a0>
   18bc4:	add	sp, sp, #116	; 0x74
   18bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bcc:	bl	1170c <__errno_location@plt>
   18bd0:	mov	r3, #2
   18bd4:	str	r3, [r0]
   18bd8:	mvn	sl, #0
   18bdc:	b	18b40 <__assert_fail@plt+0x7290>
   18be0:	add	r8, r6, #60	; 0x3c
   18be4:	mov	r0, r8
   18be8:	bl	1a9d0 <fts_children@@Base+0x5b4>
   18bec:	subs	r9, r0, #0
   18bf0:	bne	18ac4 <__assert_fail@plt+0x7214>
   18bf4:	mov	r0, r8
   18bf8:	bl	1aa1c <fts_children@@Base+0x600>
   18bfc:	ldr	sl, [r6, #48]	; 0x30
   18c00:	subs	r8, r0, #0
   18c04:	blt	18ac0 <__assert_fail@plt+0x7210>
   18c08:	tst	sl, #2
   18c0c:	mov	r4, r8
   18c10:	mov	r9, #1
   18c14:	beq	18b2c <__assert_fail@plt+0x727c>
   18c18:	b	18ae8 <__assert_fail@plt+0x7238>
   18c1c:	eor	r2, r9, #1
   18c20:	mov	r1, r8
   18c24:	uxtb	r2, r2
   18c28:	mov	r0, r6
   18c2c:	bl	186c8 <__assert_fail@plt+0x6e18>
   18c30:	mov	sl, #0
   18c34:	b	18bb0 <__assert_fail@plt+0x7300>
   18c38:	mov	r0, r4
   18c3c:	bl	11868 <close@plt>
   18c40:	mov	sl, #0
   18c44:	b	18bb0 <__assert_fail@plt+0x7300>
   18c48:	mvn	sl, #0
   18c4c:	b	18bb0 <__assert_fail@plt+0x7300>
   18c50:	bl	11580 <__stack_chk_fail@plt>
   18c54:	tst	sl, #2
   18c58:	mov	r8, r4
   18c5c:	mov	r9, #1
   18c60:	beq	18b88 <__assert_fail@plt+0x72d8>
   18c64:	b	18ae8 <__assert_fail@plt+0x7238>
   18c68:	andeq	ip, r2, r0, lsl #30
   18c6c:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>
   18c70:	ldr	r3, [pc, #164]	; 18d1c <__assert_fail@plt+0x746c>
   18c74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c78:	and	r3, r3, r0
   18c7c:	cmp	r3, #0
   18c80:	mov	sl, r1
   18c84:	mov	r8, r2
   18c88:	beq	18cf0 <__assert_fail@plt+0x7440>
   18c8c:	mov	r0, #24
   18c90:	bl	11664 <malloc@plt>
   18c94:	subs	r9, r0, #0
   18c98:	beq	18d14 <__assert_fail@plt+0x7464>
   18c9c:	ldrd	r4, [r8, #168]	; 0xa8
   18ca0:	ldrd	r6, [r8, #72]	; 0x48
   18ca4:	str	r8, [r9, #16]
   18ca8:	strd	r4, [r9, #8]
   18cac:	ldr	r0, [sl]
   18cb0:	strd	r6, [r9]
   18cb4:	mov	r1, r9
   18cb8:	bl	143d4 <__assert_fail@plt+0x2b24>
   18cbc:	cmp	r9, r0
   18cc0:	mov	r4, r0
   18cc4:	beq	18ce8 <__assert_fail@plt+0x7438>
   18cc8:	mov	r0, r9
   18ccc:	bl	11520 <free@plt>
   18cd0:	cmp	r4, #0
   18cd4:	beq	18d14 <__assert_fail@plt+0x7464>
   18cd8:	ldr	r2, [r4, #16]
   18cdc:	mov	r3, #2
   18ce0:	str	r2, [r8]
   18ce4:	strh	r3, [r8, #60]	; 0x3c
   18ce8:	mov	r0, #1
   18cec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18cf0:	ldr	r0, [r1]
   18cf4:	add	r1, r2, #72	; 0x48
   18cf8:	bl	1a7ec <fts_children@@Base+0x3d0>
   18cfc:	cmp	r0, #0
   18d00:	beq	18ce8 <__assert_fail@plt+0x7438>
   18d04:	mov	r3, #2
   18d08:	str	r8, [r8]
   18d0c:	strh	r3, [r8, #60]	; 0x3c
   18d10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d14:	mov	r0, #0
   18d18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d1c:	andeq	r0, r0, r2, lsl #2
   18d20:	push	{r4, r5, r6, lr}
   18d24:	sub	sp, sp, #32
   18d28:	ldr	r6, [pc, #192]	; 18df0 <__assert_fail@plt+0x7540>
   18d2c:	ldr	r3, [pc, #192]	; 18df4 <__assert_fail@plt+0x7544>
   18d30:	ldr	ip, [r6]
   18d34:	and	r3, r3, r0
   18d38:	cmp	r3, #0
   18d3c:	str	ip, [sp, #28]
   18d40:	bne	18d98 <__assert_fail@plt+0x74e8>
   18d44:	ldr	r3, [r2, #4]
   18d48:	cmp	r3, #0
   18d4c:	beq	18d80 <__assert_fail@plt+0x74d0>
   18d50:	ldr	r0, [r3, #48]	; 0x30
   18d54:	cmp	r0, #0
   18d58:	blt	18d80 <__assert_fail@plt+0x74d0>
   18d5c:	ldr	ip, [r1]
   18d60:	ldrd	r0, [ip, #16]
   18d64:	orrs	r1, r0, r1
   18d68:	beq	18dec <__assert_fail@plt+0x753c>
   18d6c:	ldrd	r4, [ip]
   18d70:	ldrd	r0, [r2, #168]	; 0xa8
   18d74:	cmp	r5, r1
   18d78:	cmpeq	r4, r0
   18d7c:	beq	18dc4 <__assert_fail@plt+0x7514>
   18d80:	ldr	r2, [sp, #28]
   18d84:	ldr	r3, [r6]
   18d88:	cmp	r2, r3
   18d8c:	bne	18de8 <__assert_fail@plt+0x7538>
   18d90:	add	sp, sp, #32
   18d94:	pop	{r4, r5, r6, pc}
   18d98:	ldrd	r4, [r2, #72]	; 0x48
   18d9c:	ldrd	r2, [r2, #168]	; 0xa8
   18da0:	ldr	r0, [r1]
   18da4:	mov	r1, sp
   18da8:	strd	r4, [sp]
   18dac:	strd	r2, [sp, #8]
   18db0:	bl	1442c <__assert_fail@plt+0x2b7c>
   18db4:	cmp	r0, #0
   18db8:	beq	18dec <__assert_fail@plt+0x753c>
   18dbc:	bl	11520 <free@plt>
   18dc0:	b	18d80 <__assert_fail@plt+0x74d0>
   18dc4:	ldrd	r4, [r2, #72]	; 0x48
   18dc8:	ldrd	r0, [ip, #8]
   18dcc:	cmp	r1, r5
   18dd0:	cmpeq	r0, r4
   18dd4:	ldrdeq	r0, [r3, #72]	; 0x48
   18dd8:	ldrdeq	r2, [r3, #168]	; 0xa8
   18ddc:	strdeq	r0, [ip, #8]
   18de0:	strdeq	r2, [ip]
   18de4:	b	18d80 <__assert_fail@plt+0x74d0>
   18de8:	bl	11580 <__stack_chk_fail@plt>
   18dec:	bl	1185c <abort@plt>
   18df0:	andeq	ip, r2, r0, lsl #30
   18df4:	andeq	r0, r0, r2, lsl #2
   18df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dfc:	mov	r5, r0
   18e00:	ldr	r9, [r0]
   18e04:	sub	sp, sp, #60	; 0x3c
   18e08:	ldr	r0, [r9, #12]
   18e0c:	str	r1, [sp, #36]	; 0x24
   18e10:	cmp	r0, #0
   18e14:	str	r0, [sp, #48]	; 0x30
   18e18:	beq	19114 <__assert_fail@plt+0x7864>
   18e1c:	bl	117cc <dirfd@plt>
   18e20:	subs	r3, r0, #0
   18e24:	str	r3, [sp, #44]	; 0x2c
   18e28:	blt	196a4 <__assert_fail@plt+0x7df4>
   18e2c:	ldr	r3, [r5, #44]	; 0x2c
   18e30:	cmp	r3, #0
   18e34:	beq	193ec <__assert_fail@plt+0x7b3c>
   18e38:	ldr	r0, [r5, #48]	; 0x30
   18e3c:	mvn	r3, #0
   18e40:	str	r3, [sp, #20]
   18e44:	mov	r3, #1
   18e48:	str	r3, [sp, #52]	; 0x34
   18e4c:	ldr	r2, [r9, #40]	; 0x28
   18e50:	ldr	r3, [r9, #28]
   18e54:	sub	r1, r2, #1
   18e58:	str	r2, [sp, #4]
   18e5c:	ldrb	r3, [r3, r1]
   18e60:	str	r1, [sp, #32]
   18e64:	mov	sl, #0
   18e68:	cmp	r3, #47	; 0x2f
   18e6c:	addne	r3, r2, #1
   18e70:	strne	r3, [sp, #4]
   18e74:	strne	r2, [sp, #32]
   18e78:	ands	r0, r0, #4
   18e7c:	movne	r1, #47	; 0x2f
   18e80:	ldrne	r3, [r5, #24]
   18e84:	ldrne	r0, [sp, #32]
   18e88:	streq	r0, [sp, #24]
   18e8c:	addne	r2, r3, r0
   18e90:	strbne	r1, [r3, r0]
   18e94:	addne	r3, r2, #1
   18e98:	strne	r3, [sp, #24]
   18e9c:	ldr	r3, [r9, #48]	; 0x30
   18ea0:	ldr	fp, [r5, #36]	; 0x24
   18ea4:	ldr	r2, [sp, #4]
   18ea8:	add	r3, r3, #1
   18eac:	str	sl, [sp, #40]	; 0x28
   18eb0:	sub	fp, fp, r2
   18eb4:	str	r3, [sp, #16]
   18eb8:	str	sl, [sp, #28]
   18ebc:	mov	r7, sl
   18ec0:	str	sl, [sp, #8]
   18ec4:	str	r9, [sp, #12]
   18ec8:	b	18f18 <__assert_fail@plt+0x7668>
   18ecc:	mov	r3, #0
   18ed0:	str	r3, [r4, #88]	; 0x58
   18ed4:	mov	r2, #2
   18ed8:	mov	r3, #0
   18edc:	strd	r2, [r4, #120]	; 0x78
   18ee0:	ldr	r3, [sp, #8]
   18ee4:	cmp	r3, #0
   18ee8:	mov	r3, #0
   18eec:	str	r3, [r4, #8]
   18ef0:	ldr	r3, [pc, #2148]	; 1975c <__assert_fail@plt+0x7eac>
   18ef4:	strne	r4, [sl, #8]
   18ef8:	streq	r4, [sp, #8]
   18efc:	cmp	r7, r3
   18f00:	beq	1901c <__assert_fail@plt+0x776c>
   18f04:	ldr	r3, [sp, #20]
   18f08:	add	r7, r7, #1
   18f0c:	cmp	r7, r3
   18f10:	bcs	192a8 <__assert_fail@plt+0x79f8>
   18f14:	mov	sl, r4
   18f18:	ldr	r3, [sp, #12]
   18f1c:	ldr	r4, [r3, #12]
   18f20:	cmp	r4, #0
   18f24:	beq	19404 <__assert_fail@plt+0x7b54>
   18f28:	bl	1170c <__errno_location@plt>
   18f2c:	mov	r3, #0
   18f30:	mov	r8, r0
   18f34:	mov	r0, r4
   18f38:	str	r3, [r8]
   18f3c:	bl	117a8 <readdir64@plt>
   18f40:	subs	r9, r0, #0
   18f44:	beq	194cc <__assert_fail@plt+0x7c1c>
   18f48:	ldr	r3, [r5, #48]	; 0x30
   18f4c:	tst	r3, #32
   18f50:	bne	18f60 <__assert_fail@plt+0x76b0>
   18f54:	ldrb	r3, [r9, #19]
   18f58:	cmp	r3, #46	; 0x2e
   18f5c:	beq	190a8 <__assert_fail@plt+0x77f8>
   18f60:	add	r4, r9, #19
   18f64:	mov	r0, r4
   18f68:	bl	116dc <strlen@plt>
   18f6c:	mov	r1, r4
   18f70:	mov	r2, r0
   18f74:	mov	r6, r0
   18f78:	mov	r0, r5
   18f7c:	bl	18428 <__assert_fail@plt+0x6b78>
   18f80:	subs	r4, r0, #0
   18f84:	beq	19354 <__assert_fail@plt+0x7aa4>
   18f88:	cmp	fp, r6
   18f8c:	bls	19030 <__assert_fail@plt+0x7780>
   18f90:	ldr	r3, [sp, #4]
   18f94:	adds	r6, r3, r6
   18f98:	bcs	19714 <__assert_fail@plt+0x7e64>
   18f9c:	ldr	r0, [r5, #48]	; 0x30
   18fa0:	ldr	r1, [r5]
   18fa4:	ldrd	r2, [r9]
   18fa8:	ldr	ip, [sp, #16]
   18fac:	tst	r0, #4
   18fb0:	str	r1, [r4, #4]
   18fb4:	add	r1, r4, #176	; 0xb0
   18fb8:	str	ip, [r4, #48]	; 0x30
   18fbc:	strd	r2, [r4, #168]	; 0xa8
   18fc0:	str	r6, [r4, #40]	; 0x28
   18fc4:	streq	r1, [r4, #24]
   18fc8:	bne	19088 <__assert_fail@plt+0x77d8>
   18fcc:	ldr	r3, [r5, #44]	; 0x2c
   18fd0:	cmp	r3, #0
   18fd4:	beq	18fe0 <__assert_fail@plt+0x7730>
   18fd8:	ands	r3, r0, #1024	; 0x400
   18fdc:	beq	190f4 <__assert_fail@plt+0x7844>
   18fe0:	ldrb	r2, [r9, #18]
   18fe4:	and	r0, r0, #24
   18fe8:	cmp	r0, #24
   18fec:	sub	r3, r2, #1
   18ff0:	beq	190c8 <__assert_fail@plt+0x7818>
   18ff4:	mov	r2, #11
   18ff8:	cmp	r3, #11
   18ffc:	strh	r2, [r4, #60]	; 0x3c
   19000:	bhi	18ecc <__assert_fail@plt+0x761c>
   19004:	ldr	r2, [pc, #1876]	; 19760 <__assert_fail@plt+0x7eb0>
   19008:	ldr	r1, [r2, r3, lsl #2]
   1900c:	mov	r2, #2
   19010:	mov	r3, #0
   19014:	str	r1, [r4, #88]	; 0x58
   19018:	b	18edc <__assert_fail@plt+0x762c>
   1901c:	ldr	r6, [r5, #44]	; 0x2c
   19020:	cmp	r6, #0
   19024:	beq	1925c <__assert_fail@plt+0x79ac>
   19028:	ldr	r7, [pc, #1844]	; 19764 <__assert_fail@plt+0x7eb4>
   1902c:	b	18f14 <__assert_fail@plt+0x7664>
   19030:	ldr	r3, [sp, #32]
   19034:	add	r1, r5, #36	; 0x24
   19038:	add	r2, r3, #2
   1903c:	add	r2, r2, r6
   19040:	add	r0, r5, #24
   19044:	ldr	fp, [r5, #24]
   19048:	bl	1892c <__assert_fail@plt+0x707c>
   1904c:	cmp	r0, #0
   19050:	beq	19354 <__assert_fail@plt+0x7aa4>
   19054:	ldr	r3, [r5, #24]
   19058:	cmp	r3, fp
   1905c:	beq	1910c <__assert_fail@plt+0x785c>
   19060:	ldr	r2, [r5, #48]	; 0x30
   19064:	tst	r2, #4
   19068:	ldrne	r2, [sp, #4]
   1906c:	addne	r3, r3, r2
   19070:	strne	r3, [sp, #24]
   19074:	ldr	fp, [r5, #36]	; 0x24
   19078:	ldr	r3, [sp, #4]
   1907c:	str	r0, [sp, #28]
   19080:	sub	fp, fp, r3
   19084:	b	18f90 <__assert_fail@plt+0x76e0>
   19088:	ldr	r3, [r4, #28]
   1908c:	ldr	r2, [r4, #52]	; 0x34
   19090:	str	r3, [r4, #24]
   19094:	add	r2, r2, #1
   19098:	ldr	r0, [sp, #24]
   1909c:	bl	11514 <memmove@plt>
   190a0:	ldr	r0, [r5, #48]	; 0x30
   190a4:	b	18fcc <__assert_fail@plt+0x771c>
   190a8:	ldrb	r3, [r9, #20]
   190ac:	cmp	r3, #0
   190b0:	beq	190c0 <__assert_fail@plt+0x7810>
   190b4:	ldrh	r3, [r9, #20]
   190b8:	cmp	r3, #46	; 0x2e
   190bc:	bne	18f60 <__assert_fail@plt+0x76b0>
   190c0:	mov	r4, sl
   190c4:	b	18f14 <__assert_fail@plt+0x7664>
   190c8:	tst	r2, #251	; 0xfb
   190cc:	beq	18ff4 <__assert_fail@plt+0x7744>
   190d0:	mov	r2, #11
   190d4:	cmp	r3, #11
   190d8:	strh	r2, [r4, #60]	; 0x3c
   190dc:	bls	1933c <__assert_fail@plt+0x7a8c>
   190e0:	mov	r3, #0
   190e4:	str	r3, [r4, #88]	; 0x58
   190e8:	mov	r2, #1
   190ec:	mov	r3, #0
   190f0:	b	18edc <__assert_fail@plt+0x762c>
   190f4:	mov	r2, r4
   190f8:	add	r1, r5, #48	; 0x30
   190fc:	ldr	r0, [r5, #32]
   19100:	bl	187a0 <__assert_fail@plt+0x6ef0>
   19104:	strh	r0, [r4, #60]	; 0x3c
   19108:	b	18ee0 <__assert_fail@plt+0x7630>
   1910c:	ldr	r0, [sp, #28]
   19110:	b	19074 <__assert_fail@plt+0x77c4>
   19114:	ldr	r3, [r5, #48]	; 0x30
   19118:	ldr	r1, [r9, #24]
   1911c:	and	r2, r3, #516	; 0x204
   19120:	cmp	r2, #512	; 0x200
   19124:	mvnne	r0, #99	; 0x63
   19128:	ldreq	r0, [r5, #32]
   1912c:	ands	ip, r3, #16
   19130:	beq	19140 <__assert_fail@plt+0x7890>
   19134:	tst	r3, #1
   19138:	moveq	ip, #32768	; 0x8000
   1913c:	bne	193a4 <__assert_fail@plt+0x7af4>
   19140:	lsl	r2, r3, #7
   19144:	and	r2, r2, #262144	; 0x40000
   19148:	orr	r2, r2, ip
   1914c:	orr	r2, r2, #540672	; 0x84000
   19150:	orr	r2, r2, #2304	; 0x900
   19154:	bl	1aa98 <fts_children@@Base+0x67c>
   19158:	subs	r3, r0, #0
   1915c:	str	r3, [sp, #44]	; 0x2c
   19160:	movlt	r3, #0
   19164:	strlt	r3, [r9, #12]
   19168:	blt	19678 <__assert_fail@plt+0x7dc8>
   1916c:	bl	117b4 <fdopendir@plt>
   19170:	subs	r4, r0, #0
   19174:	beq	1965c <__assert_fail@plt+0x7dac>
   19178:	ldrh	r3, [r9, #60]	; 0x3c
   1917c:	str	r4, [r9, #12]
   19180:	cmp	r3, #11
   19184:	beq	195dc <__assert_fail@plt+0x7d2c>
   19188:	ldr	r0, [r5, #48]	; 0x30
   1918c:	tst	r0, #256	; 0x100
   19190:	bne	19550 <__assert_fail@plt+0x7ca0>
   19194:	ldr	r2, [r5, #44]	; 0x2c
   19198:	ldr	r3, [pc, #1480]	; 19768 <__assert_fail@plt+0x7eb8>
   1919c:	cmp	r2, #0
   191a0:	mvnne	r3, #0
   191a4:	str	r3, [sp, #20]
   191a8:	ldr	r3, [sp, #36]	; 0x24
   191ac:	cmp	r3, #2
   191b0:	beq	19540 <__assert_fail@plt+0x7c90>
   191b4:	ldr	r3, [r5, #48]	; 0x30
   191b8:	and	r3, r3, #56	; 0x38
   191bc:	cmp	r3, #24
   191c0:	beq	193b4 <__assert_fail@plt+0x7b04>
   191c4:	ldr	r3, [sp, #36]	; 0x24
   191c8:	mov	r6, #1
   191cc:	sub	r7, r3, #3
   191d0:	clz	r7, r7
   191d4:	lsr	r7, r7, #5
   191d8:	ldr	r3, [r5, #48]	; 0x30
   191dc:	tst	r3, #512	; 0x200
   191e0:	bne	195f8 <__assert_fail@plt+0x7d48>
   191e4:	mov	r3, #0
   191e8:	ldr	r2, [sp, #44]	; 0x2c
   191ec:	mov	r1, r9
   191f0:	mov	r0, r5
   191f4:	bl	18a64 <__assert_fail@plt+0x71b4>
   191f8:	cmp	r0, #0
   191fc:	beq	193f4 <__assert_fail@plt+0x7b44>
   19200:	ldrh	r4, [r9, #62]	; 0x3e
   19204:	tst	r7, r6
   19208:	ldr	r6, [r9, #12]
   1920c:	orr	r4, r4, #1
   19210:	beq	19220 <__assert_fail@plt+0x7970>
   19214:	bl	1170c <__errno_location@plt>
   19218:	ldr	r3, [r0]
   1921c:	str	r3, [r9, #32]
   19220:	strh	r4, [r9, #62]	; 0x3e
   19224:	mov	r0, r6
   19228:	bl	11898 <closedir@plt>
   1922c:	ldr	r3, [sp, #44]	; 0x2c
   19230:	ldr	r0, [r5, #48]	; 0x30
   19234:	mvn	r2, r3
   19238:	mov	r3, #0
   1923c:	lsr	r2, r2, #31
   19240:	ands	r2, r2, r0, lsr #9
   19244:	str	r3, [r9, #12]
   19248:	bne	196dc <__assert_fail@plt+0x7e2c>
   1924c:	mov	r3, #0
   19250:	str	r3, [r9, #12]
   19254:	str	r3, [sp, #52]	; 0x34
   19258:	b	18e4c <__assert_fail@plt+0x759c>
   1925c:	ldr	r1, [sp, #44]	; 0x2c
   19260:	ldr	r0, [sp, #12]
   19264:	bl	18500 <__assert_fail@plt+0x6c50>
   19268:	ldr	r3, [pc, #1276]	; 1976c <__assert_fail@plt+0x7ebc>
   1926c:	cmp	r0, r3
   19270:	beq	19294 <__assert_fail@plt+0x79e4>
   19274:	ldr	r3, [pc, #1268]	; 19770 <__assert_fail@plt+0x7ec0>
   19278:	cmp	r0, r3
   1927c:	beq	19294 <__assert_fail@plt+0x79e4>
   19280:	ldr	r3, [pc, #1260]	; 19774 <__assert_fail@plt+0x7ec4>
   19284:	cmp	r0, r3
   19288:	movne	r3, #1
   1928c:	strne	r3, [sp, #40]	; 0x28
   19290:	bne	19028 <__assert_fail@plt+0x7778>
   19294:	ldr	r3, [sp, #20]
   19298:	add	r7, r7, #1
   1929c:	cmp	r7, r3
   192a0:	str	r6, [sp, #40]	; 0x28
   192a4:	bcc	18f14 <__assert_fail@plt+0x7664>
   192a8:	ldr	r3, [sp, #28]
   192ac:	ldr	r9, [sp, #12]
   192b0:	cmp	r3, #0
   192b4:	beq	19414 <__assert_fail@plt+0x7b64>
   192b8:	ldr	r3, [r5, #4]
   192bc:	ldr	r1, [r5, #24]
   192c0:	cmp	r3, #0
   192c4:	beq	192f4 <__assert_fail@plt+0x7a44>
   192c8:	ldr	r2, [r3, #24]
   192cc:	add	r0, r3, #176	; 0xb0
   192d0:	cmp	r2, r0
   192d4:	ldrne	r0, [r3, #28]
   192d8:	str	r1, [r3, #28]
   192dc:	subne	r2, r2, r0
   192e0:	addne	r2, r1, r2
   192e4:	strne	r2, [r3, #24]
   192e8:	ldr	r3, [r3, #8]
   192ec:	cmp	r3, #0
   192f0:	bne	192c8 <__assert_fail@plt+0x7a18>
   192f4:	ldr	r3, [sp, #8]
   192f8:	b	19328 <__assert_fail@plt+0x7a78>
   192fc:	ldr	r2, [r3, #24]
   19300:	cmp	r2, r0
   19304:	ldrne	r0, [r3, #28]
   19308:	str	r1, [r3, #28]
   1930c:	subne	r2, r2, r0
   19310:	addne	r2, r1, r2
   19314:	strne	r2, [r3, #24]
   19318:	ldr	r2, [r3, #8]
   1931c:	cmp	r2, #0
   19320:	ldreq	r2, [r3, #4]
   19324:	mov	r3, r2
   19328:	ldr	r2, [r3, #48]	; 0x30
   1932c:	add	r0, r3, #176	; 0xb0
   19330:	cmp	r2, #0
   19334:	bge	192fc <__assert_fail@plt+0x7a4c>
   19338:	b	19414 <__assert_fail@plt+0x7b64>
   1933c:	ldr	r2, [pc, #1052]	; 19760 <__assert_fail@plt+0x7eb0>
   19340:	ldr	r1, [r2, r3, lsl #2]
   19344:	mov	r2, #1
   19348:	mov	r3, #0
   1934c:	str	r1, [r4, #88]	; 0x58
   19350:	b	18edc <__assert_fail@plt+0x762c>
   19354:	ldr	r9, [sp, #12]
   19358:	mov	r0, r4
   1935c:	ldr	r4, [r8]
   19360:	bl	11520 <free@plt>
   19364:	ldr	r0, [sp, #8]
   19368:	bl	1849c <__assert_fail@plt+0x6bec>
   1936c:	ldr	r0, [r9, #12]
   19370:	bl	11898 <closedir@plt>
   19374:	ldr	r3, [r5, #48]	; 0x30
   19378:	mov	r2, #0
   1937c:	orr	r3, r3, #16384	; 0x4000
   19380:	mov	r1, #7
   19384:	str	r2, [r9, #12]
   19388:	strh	r1, [r9, #60]	; 0x3c
   1938c:	str	r2, [sp, #8]
   19390:	str	r3, [r5, #48]	; 0x30
   19394:	str	r4, [r8]
   19398:	ldr	r0, [sp, #8]
   1939c:	add	sp, sp, #60	; 0x3c
   193a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193a4:	ldr	ip, [r9, #48]	; 0x30
   193a8:	cmp	ip, #0
   193ac:	movne	ip, #32768	; 0x8000
   193b0:	b	19140 <__assert_fail@plt+0x7890>
   193b4:	ldr	r3, [r9, #92]	; 0x5c
   193b8:	cmp	r3, #2
   193bc:	bne	191c4 <__assert_fail@plt+0x7914>
   193c0:	ldr	r1, [sp, #44]	; 0x2c
   193c4:	mov	r0, r9
   193c8:	bl	18634 <__assert_fail@plt+0x6d84>
   193cc:	cmp	r0, #0
   193d0:	beq	191c4 <__assert_fail@plt+0x7914>
   193d4:	ldr	r3, [sp, #36]	; 0x24
   193d8:	cmp	r3, #3
   193dc:	bne	19540 <__assert_fail@plt+0x7c90>
   193e0:	mov	r6, #0
   193e4:	mov	r7, #1
   193e8:	b	191d8 <__assert_fail@plt+0x7928>
   193ec:	ldr	r3, [pc, #884]	; 19768 <__assert_fail@plt+0x7eb8>
   193f0:	str	r3, [sp, #20]
   193f4:	mov	r3, #1
   193f8:	str	r3, [sp, #52]	; 0x34
   193fc:	ldr	r0, [r5, #48]	; 0x30
   19400:	b	18e4c <__assert_fail@plt+0x759c>
   19404:	mov	r9, r3
   19408:	ldr	r3, [sp, #28]
   1940c:	cmp	r3, #0
   19410:	bne	192b8 <__assert_fail@plt+0x7a08>
   19414:	ldr	r3, [r5, #48]	; 0x30
   19418:	tst	r3, #4
   1941c:	beq	19448 <__assert_fail@plt+0x7b98>
   19420:	ldr	r3, [r5, #36]	; 0x24
   19424:	ldr	r2, [sp, #4]
   19428:	cmp	r7, #0
   1942c:	cmpne	r3, r2
   19430:	ldreq	r3, [sp, #24]
   19434:	subeq	r3, r3, #1
   19438:	streq	r3, [sp, #24]
   1943c:	ldr	r2, [sp, #24]
   19440:	mov	r3, #0
   19444:	strb	r3, [r2]
   19448:	ldrd	r2, [sp, #48]	; 0x30
   1944c:	cmp	r2, #0
   19450:	movne	r3, #0
   19454:	cmp	r3, #0
   19458:	beq	19490 <__assert_fail@plt+0x7be0>
   1945c:	ldr	r3, [sp, #36]	; 0x24
   19460:	cmp	r7, #0
   19464:	cmpne	r3, #1
   19468:	bne	19498 <__assert_fail@plt+0x7be8>
   1946c:	ldr	r3, [r9, #48]	; 0x30
   19470:	cmp	r3, #0
   19474:	bne	1963c <__assert_fail@plt+0x7d8c>
   19478:	mov	r0, r5
   1947c:	bl	18750 <__assert_fail@plt+0x6ea0>
   19480:	adds	r0, r0, #0
   19484:	movne	r0, #1
   19488:	cmp	r0, #0
   1948c:	bne	196ec <__assert_fail@plt+0x7e3c>
   19490:	cmp	r7, #0
   19494:	beq	195a0 <__assert_fail@plt+0x7cf0>
   19498:	ldr	r3, [sp, #40]	; 0x28
   1949c:	cmp	r3, #0
   194a0:	bne	19510 <__assert_fail@plt+0x7c60>
   194a4:	ldr	r3, [r5, #44]	; 0x2c
   194a8:	cmp	r3, #0
   194ac:	cmpne	r7, #1
   194b0:	beq	19398 <__assert_fail@plt+0x7ae8>
   194b4:	mov	r2, r7
   194b8:	ldr	r1, [sp, #8]
   194bc:	mov	r0, r5
   194c0:	add	sp, sp, #60	; 0x3c
   194c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194c8:	b	18350 <__assert_fail@plt+0x6aa0>
   194cc:	ldr	r3, [r8]
   194d0:	ldr	r9, [sp, #12]
   194d4:	cmp	r3, #0
   194d8:	beq	194f4 <__assert_fail@plt+0x7c44>
   194dc:	ldr	r2, [sp, #48]	; 0x30
   194e0:	str	r3, [r9, #32]
   194e4:	orrs	r2, r2, r7
   194e8:	moveq	r2, #4
   194ec:	movne	r2, #7
   194f0:	strh	r2, [r9, #60]	; 0x3c
   194f4:	ldr	r0, [r9, #12]
   194f8:	cmp	r0, #0
   194fc:	beq	19408 <__assert_fail@plt+0x7b58>
   19500:	bl	11898 <closedir@plt>
   19504:	mov	r3, #0
   19508:	str	r3, [r9, #12]
   1950c:	b	19408 <__assert_fail@plt+0x7b58>
   19510:	ldr	r3, [pc, #608]	; 19778 <__assert_fail@plt+0x7ec8>
   19514:	mov	r2, r7
   19518:	str	r3, [r5, #44]	; 0x2c
   1951c:	ldr	r1, [sp, #8]
   19520:	mov	r0, r5
   19524:	bl	18350 <__assert_fail@plt+0x6aa0>
   19528:	mov	r3, #0
   1952c:	str	r3, [r5, #44]	; 0x2c
   19530:	str	r0, [sp, #8]
   19534:	ldr	r0, [sp, #8]
   19538:	add	sp, sp, #60	; 0x3c
   1953c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19540:	mov	r3, #0
   19544:	str	r3, [sp, #52]	; 0x34
   19548:	ldr	r0, [r5, #48]	; 0x30
   1954c:	b	18e4c <__assert_fail@plt+0x759c>
   19550:	add	r4, r5, #56	; 0x38
   19554:	mov	r1, r4
   19558:	mov	r2, r9
   1955c:	bl	18d20 <__assert_fail@plt+0x7470>
   19560:	mov	r3, #0
   19564:	mov	r2, r9
   19568:	add	r1, r5, #48	; 0x30
   1956c:	ldr	r0, [r5, #32]
   19570:	bl	187a0 <__assert_fail@plt+0x6ef0>
   19574:	mov	r1, r4
   19578:	mov	r2, r9
   1957c:	ldr	r0, [r5, #48]	; 0x30
   19580:	bl	18c70 <__assert_fail@plt+0x73c0>
   19584:	subs	r4, r0, #0
   19588:	bne	19194 <__assert_fail@plt+0x78e4>
   1958c:	bl	1170c <__errno_location@plt>
   19590:	mov	r3, #12
   19594:	str	r4, [sp, #8]
   19598:	str	r3, [r0]
   1959c:	b	19398 <__assert_fail@plt+0x7ae8>
   195a0:	ldr	r3, [sp, #36]	; 0x24
   195a4:	cmp	r3, #3
   195a8:	bne	195c0 <__assert_fail@plt+0x7d10>
   195ac:	ldrh	r3, [r9, #60]	; 0x3c
   195b0:	cmp	r3, #4
   195b4:	cmpne	r3, #7
   195b8:	movne	r3, #6
   195bc:	strhne	r3, [r9, #60]	; 0x3c
   195c0:	ldr	r0, [sp, #8]
   195c4:	bl	1849c <__assert_fail@plt+0x6bec>
   195c8:	mov	r3, #0
   195cc:	str	r3, [sp, #8]
   195d0:	ldr	r0, [sp, #8]
   195d4:	add	sp, sp, #60	; 0x3c
   195d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195dc:	mov	r3, #0
   195e0:	mov	r2, r9
   195e4:	add	r1, r5, #48	; 0x30
   195e8:	ldr	r0, [r5, #32]
   195ec:	bl	187a0 <__assert_fail@plt+0x6ef0>
   195f0:	strh	r0, [r9, #60]	; 0x3c
   195f4:	b	19194 <__assert_fail@plt+0x78e4>
   195f8:	ldr	r0, [sp, #44]	; 0x2c
   195fc:	mov	r2, #3
   19600:	ldr	r1, [pc, #372]	; 1977c <__assert_fail@plt+0x7ecc>
   19604:	bl	1abd8 <fts_children@@Base+0x7bc>
   19608:	subs	r3, r0, #0
   1960c:	str	r3, [sp, #44]	; 0x2c
   19610:	bge	191e4 <__assert_fail@plt+0x7934>
   19614:	ldrh	r4, [r9, #62]	; 0x3e
   19618:	tst	r7, r6
   1961c:	ldr	r6, [r9, #12]
   19620:	orr	r4, r4, #1
   19624:	bne	19214 <__assert_fail@plt+0x7964>
   19628:	strh	r4, [r9, #62]	; 0x3e
   1962c:	mov	r0, r6
   19630:	bl	11898 <closedir@plt>
   19634:	ldr	r0, [r5, #48]	; 0x30
   19638:	b	1924c <__assert_fail@plt+0x799c>
   1963c:	ldr	r3, [pc, #316]	; 19780 <__assert_fail@plt+0x7ed0>
   19640:	mvn	r2, #0
   19644:	ldr	r1, [r9, #4]
   19648:	mov	r0, r5
   1964c:	bl	18a64 <__assert_fail@plt+0x71b4>
   19650:	adds	r0, r0, #0
   19654:	movne	r0, #1
   19658:	b	19488 <__assert_fail@plt+0x7bd8>
   1965c:	bl	1170c <__errno_location@plt>
   19660:	mov	r5, r0
   19664:	ldr	r0, [sp, #44]	; 0x2c
   19668:	ldr	r6, [r5]
   1966c:	bl	11868 <close@plt>
   19670:	str	r6, [r5]
   19674:	str	r4, [r9, #12]
   19678:	ldr	r3, [sp, #36]	; 0x24
   1967c:	cmp	r3, #3
   19680:	bne	195c8 <__assert_fail@plt+0x7d18>
   19684:	mov	r3, #4
   19688:	strh	r3, [r9, #60]	; 0x3c
   1968c:	bl	1170c <__errno_location@plt>
   19690:	mov	r3, #0
   19694:	str	r3, [sp, #8]
   19698:	ldr	r3, [r0]
   1969c:	str	r3, [r9, #32]
   196a0:	b	19398 <__assert_fail@plt+0x7ae8>
   196a4:	ldr	r0, [r9, #12]
   196a8:	bl	11898 <closedir@plt>
   196ac:	ldr	r3, [sp, #36]	; 0x24
   196b0:	mov	r4, #0
   196b4:	cmp	r3, #3
   196b8:	str	r4, [r9, #12]
   196bc:	bne	195c8 <__assert_fail@plt+0x7d18>
   196c0:	mov	r3, #4
   196c4:	strh	r3, [r9, #60]	; 0x3c
   196c8:	bl	1170c <__errno_location@plt>
   196cc:	str	r4, [sp, #8]
   196d0:	ldr	r3, [r0]
   196d4:	str	r3, [r9, #32]
   196d8:	b	19398 <__assert_fail@plt+0x7ae8>
   196dc:	ldr	r0, [sp, #44]	; 0x2c
   196e0:	bl	11868 <close@plt>
   196e4:	ldr	r0, [r5, #48]	; 0x30
   196e8:	b	1924c <__assert_fail@plt+0x799c>
   196ec:	ldr	r3, [r5, #48]	; 0x30
   196f0:	mov	r2, #7
   196f4:	orr	r3, r3, #16384	; 0x4000
   196f8:	strh	r2, [r9, #60]	; 0x3c
   196fc:	ldr	r0, [sp, #8]
   19700:	str	r3, [r5, #48]	; 0x30
   19704:	bl	1849c <__assert_fail@plt+0x6bec>
   19708:	mov	r3, #0
   1970c:	str	r3, [sp, #8]
   19710:	b	19398 <__assert_fail@plt+0x7ae8>
   19714:	ldr	r9, [sp, #12]
   19718:	mov	r0, r4
   1971c:	bl	11520 <free@plt>
   19720:	ldr	r0, [sp, #8]
   19724:	bl	1849c <__assert_fail@plt+0x6bec>
   19728:	ldr	r0, [r9, #12]
   1972c:	bl	11898 <closedir@plt>
   19730:	ldr	r3, [r5, #48]	; 0x30
   19734:	mov	r2, #0
   19738:	orr	r3, r3, #16384	; 0x4000
   1973c:	mov	r0, #7
   19740:	mov	r1, #36	; 0x24
   19744:	str	r2, [r9, #12]
   19748:	strh	r0, [r9, #60]	; 0x3c
   1974c:	str	r2, [sp, #8]
   19750:	str	r3, [r5, #48]	; 0x30
   19754:	str	r1, [r8]
   19758:	b	19398 <__assert_fail@plt+0x7ae8>
   1975c:	andeq	r2, r0, r0, lsl r7
   19760:	andeq	ip, r1, ip, lsl #1
   19764:	andeq	r2, r0, r1, lsl r7
   19768:	andeq	r8, r1, r0, lsr #13
   1976c:	andeq	r6, r0, r9, ror #18
   19770:			; <UNDEFINED> instruction: 0x01021994
   19774:			; <UNDEFINED> instruction: 0xff534d42
   19778:	andeq	r8, r1, r0, lsr #6
   1977c:	andeq	r0, r0, r6, lsl #8
   19780:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>

00019784 <fts_open@@Base>:
   19784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19788:	bic	r5, r1, #8128	; 0x1fc0
   1978c:	bic	r5, r5, #63	; 0x3f
   19790:	cmp	r5, #0
   19794:	sub	sp, sp, #20
   19798:	bne	19ac0 <fts_open@@Base+0x33c>
   1979c:	and	r3, r1, #516	; 0x204
   197a0:	cmp	r3, #516	; 0x204
   197a4:	mov	r7, r1
   197a8:	beq	19a54 <fts_open@@Base+0x2d0>
   197ac:	ands	r5, r1, #18
   197b0:	beq	19a54 <fts_open@@Base+0x2d0>
   197b4:	mov	r6, r0
   197b8:	mov	r1, #1
   197bc:	mov	r0, #96	; 0x60
   197c0:	mov	r9, r2
   197c4:	bl	114b4 <calloc@plt>
   197c8:	subs	r5, r0, #0
   197cc:	beq	19a18 <fts_open@@Base+0x294>
   197d0:	tst	r7, #2
   197d4:	bicne	r3, r7, #512	; 0x200
   197d8:	orrne	r3, r3, #4
   197dc:	strne	r3, [r5, #48]	; 0x30
   197e0:	ldr	r3, [r6]
   197e4:	streq	r7, [r5, #48]	; 0x30
   197e8:	mvn	r2, #99	; 0x63
   197ec:	cmp	r3, #0
   197f0:	str	r9, [r5, #44]	; 0x2c
   197f4:	str	r2, [r5, #32]
   197f8:	beq	19adc <fts_open@@Base+0x358>
   197fc:	mov	r8, r6
   19800:	mov	r4, #0
   19804:	mov	r0, r3
   19808:	bl	116dc <strlen@plt>
   1980c:	ldr	r3, [r8, #4]!
   19810:	cmp	r4, r0
   19814:	movcc	r4, r0
   19818:	cmp	r3, #0
   1981c:	bne	19804 <fts_open@@Base+0x80>
   19820:	add	r2, r4, #1
   19824:	cmp	r2, #4096	; 0x1000
   19828:	movcc	r2, #4096	; 0x1000
   1982c:	add	r1, r5, #36	; 0x24
   19830:	add	r0, r5, #24
   19834:	bl	1892c <__assert_fail@plt+0x707c>
   19838:	subs	fp, r0, #0
   1983c:	beq	19a3c <fts_open@@Base+0x2b8>
   19840:	ldr	sl, [r6]
   19844:	cmp	sl, #0
   19848:	beq	19a6c <fts_open@@Base+0x2e8>
   1984c:	mov	r2, #0
   19850:	ldr	r1, [pc, #704]	; 19b18 <fts_open@@Base+0x394>
   19854:	mov	r0, r5
   19858:	bl	18428 <__assert_fail@plt+0x6b78>
   1985c:	subs	sl, r0, #0
   19860:	beq	19a34 <fts_open@@Base+0x2b0>
   19864:	mvn	r3, #0
   19868:	cmp	r9, #0
   1986c:	str	r3, [sl, #48]	; 0x30
   19870:	str	r3, [sl, #56]	; 0x38
   19874:	ldr	r4, [r6]
   19878:	beq	19888 <fts_open@@Base+0x104>
   1987c:	ldr	fp, [r5, #48]	; 0x30
   19880:	lsr	fp, fp, #10
   19884:	and	fp, fp, #1
   19888:	cmp	r4, #0
   1988c:	beq	19b10 <fts_open@@Base+0x38c>
   19890:	lsr	r7, r7, #12
   19894:	mov	r3, #0
   19898:	eor	r7, r7, #1
   1989c:	and	r2, r7, #1
   198a0:	str	r3, [sp, #8]
   198a4:	mov	r8, r3
   198a8:	mov	r7, r3
   198ac:	add	r3, r5, #48	; 0x30
   198b0:	str	r2, [sp, #4]
   198b4:	str	r3, [sp, #12]
   198b8:	b	198f0 <fts_open@@Base+0x16c>
   198bc:	cmp	r9, r1
   198c0:	mov	r0, #2
   198c4:	mov	r1, #0
   198c8:	mov	r3, #11
   198cc:	strd	r0, [r4, #120]	; 0x78
   198d0:	strh	r3, [r4, #60]	; 0x3c
   198d4:	beq	19aac <fts_open@@Base+0x328>
   198d8:	str	r7, [r4, #8]
   198dc:	mov	r7, r4
   198e0:	ldr	r4, [r6, #4]!
   198e4:	add	r8, r8, #1
   198e8:	cmp	r4, #0
   198ec:	beq	1999c <fts_open@@Base+0x218>
   198f0:	mov	r0, r4
   198f4:	bl	116dc <strlen@plt>
   198f8:	ldr	r3, [sp, #4]
   198fc:	cmp	r0, #2
   19900:	movls	r3, #0
   19904:	andhi	r3, r3, #1
   19908:	cmp	r3, #0
   1990c:	mov	r2, r0
   19910:	bne	19a7c <fts_open@@Base+0x2f8>
   19914:	mov	r1, r4
   19918:	mov	r0, r5
   1991c:	bl	18428 <__assert_fail@plt+0x6b78>
   19920:	subs	r4, r0, #0
   19924:	beq	19a24 <fts_open@@Base+0x2a0>
   19928:	cmp	r7, #0
   1992c:	moveq	r3, #0
   19930:	andne	r3, fp, #1
   19934:	add	r2, r4, #176	; 0xb0
   19938:	mov	r1, #0
   1993c:	cmp	r3, #0
   19940:	str	r1, [r4, #48]	; 0x30
   19944:	str	sl, [r4, #4]
   19948:	str	r2, [r4, #24]
   1994c:	bne	198bc <fts_open@@Base+0x138>
   19950:	mov	r2, r4
   19954:	ldr	r1, [sp, #12]
   19958:	ldr	r0, [r5, #32]
   1995c:	bl	187a0 <__assert_fail@plt+0x6ef0>
   19960:	cmp	r9, #0
   19964:	strh	r0, [r4, #60]	; 0x3c
   19968:	bne	198d8 <fts_open@@Base+0x154>
   1996c:	cmp	r7, #0
   19970:	str	r9, [r4, #8]
   19974:	streq	r4, [sp, #8]
   19978:	moveq	r7, r4
   1997c:	beq	198e0 <fts_open@@Base+0x15c>
   19980:	ldr	r3, [sp, #8]
   19984:	str	r4, [sp, #8]
   19988:	str	r4, [r3, #8]
   1998c:	ldr	r4, [r6, #4]!
   19990:	add	r8, r8, #1
   19994:	cmp	r4, #0
   19998:	bne	198f0 <fts_open@@Base+0x16c>
   1999c:	cmp	r9, #0
   199a0:	cmpne	r8, #1
   199a4:	bls	199bc <fts_open@@Base+0x238>
   199a8:	mov	r1, r7
   199ac:	mov	r2, r8
   199b0:	mov	r0, r5
   199b4:	bl	18350 <__assert_fail@plt+0x6aa0>
   199b8:	mov	r7, r0
   199bc:	mov	r2, #0
   199c0:	ldr	r1, [pc, #336]	; 19b18 <fts_open@@Base+0x394>
   199c4:	mov	r0, r5
   199c8:	bl	18428 <__assert_fail@plt+0x6b78>
   199cc:	cmp	r0, #0
   199d0:	str	r0, [r5]
   199d4:	beq	19a24 <fts_open@@Base+0x2a0>
   199d8:	mov	r2, #1
   199dc:	mov	r3, #9
   199e0:	str	r7, [r0, #8]
   199e4:	str	r2, [r0, #48]	; 0x30
   199e8:	strh	r3, [r0, #60]	; 0x3c
   199ec:	add	r1, r5, #56	; 0x38
   199f0:	ldr	r0, [r5, #48]	; 0x30
   199f4:	bl	189a8 <__assert_fail@plt+0x70f8>
   199f8:	cmp	r0, #0
   199fc:	beq	19a24 <fts_open@@Base+0x2a0>
   19a00:	ldr	r1, [r5, #48]	; 0x30
   19a04:	tst	r1, #516	; 0x204
   19a08:	beq	19ae4 <fts_open@@Base+0x360>
   19a0c:	mvn	r1, #0
   19a10:	add	r0, r5, #60	; 0x3c
   19a14:	bl	1a9a4 <fts_children@@Base+0x588>
   19a18:	mov	r0, r5
   19a1c:	add	sp, sp, #20
   19a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a24:	mov	r0, r7
   19a28:	bl	1849c <__assert_fail@plt+0x6bec>
   19a2c:	mov	r0, sl
   19a30:	bl	11520 <free@plt>
   19a34:	ldr	r0, [r5, #24]
   19a38:	bl	11520 <free@plt>
   19a3c:	mov	r0, r5
   19a40:	bl	11520 <free@plt>
   19a44:	mov	r5, #0
   19a48:	mov	r0, r5
   19a4c:	add	sp, sp, #20
   19a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a54:	bl	1170c <__errno_location@plt>
   19a58:	mov	r3, #22
   19a5c:	str	r3, [r0]
   19a60:	mov	r0, r5
   19a64:	add	sp, sp, #20
   19a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a6c:	cmp	r9, #0
   19a70:	beq	19b08 <fts_open@@Base+0x384>
   19a74:	mov	r4, sl
   19a78:	b	1987c <fts_open@@Base+0xf8>
   19a7c:	sub	r1, r0, #1
   19a80:	add	r3, r4, r1
   19a84:	ldrb	r1, [r4, r1]
   19a88:	cmp	r1, #47	; 0x2f
   19a8c:	bne	19914 <fts_open@@Base+0x190>
   19a90:	ldrb	r1, [r3, #-1]!
   19a94:	cmp	r1, #47	; 0x2f
   19a98:	bne	19914 <fts_open@@Base+0x190>
   19a9c:	sub	r2, r2, #1
   19aa0:	cmp	r2, #1
   19aa4:	bne	19a90 <fts_open@@Base+0x30c>
   19aa8:	b	19914 <fts_open@@Base+0x190>
   19aac:	ldr	r3, [sp, #8]
   19ab0:	str	r9, [r4, #8]
   19ab4:	str	r4, [sp, #8]
   19ab8:	str	r4, [r3, #8]
   19abc:	b	1998c <fts_open@@Base+0x208>
   19ac0:	bl	1170c <__errno_location@plt>
   19ac4:	mov	r5, #0
   19ac8:	mov	r3, #22
   19acc:	str	r3, [r0]
   19ad0:	mov	r0, r5
   19ad4:	add	sp, sp, #20
   19ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19adc:	mov	r2, #4096	; 0x1000
   19ae0:	b	1982c <fts_open@@Base+0xa8>
   19ae4:	ldr	r2, [pc, #48]	; 19b1c <fts_open@@Base+0x398>
   19ae8:	ldr	r0, [r5, #32]
   19aec:	bl	18a28 <__assert_fail@plt+0x7178>
   19af0:	cmp	r0, #0
   19af4:	str	r0, [r5, #28]
   19af8:	ldrlt	r3, [r5, #48]	; 0x30
   19afc:	orrlt	r3, r3, #4
   19b00:	strlt	r3, [r5, #48]	; 0x30
   19b04:	b	19a0c <fts_open@@Base+0x288>
   19b08:	mov	r7, sl
   19b0c:	b	199bc <fts_open@@Base+0x238>
   19b10:	mov	r7, r4
   19b14:	b	199bc <fts_open@@Base+0x238>
   19b18:	andeq	fp, r1, r0, asr #23
   19b1c:	andeq	fp, r1, r0, asr r9

00019b20 <fts_close@@Base>:
   19b20:	ldr	r3, [r0]
   19b24:	push	{r4, r5, r6, lr}
   19b28:	cmp	r3, #0
   19b2c:	mov	r5, r0
   19b30:	beq	19b6c <fts_close@@Base+0x4c>
   19b34:	ldr	r2, [r3, #48]	; 0x30
   19b38:	cmp	r2, #0
   19b3c:	blt	19c84 <fts_close@@Base+0x164>
   19b40:	ldr	r4, [r3, #8]
   19b44:	mov	r0, r3
   19b48:	cmp	r4, #0
   19b4c:	ldreq	r4, [r3, #4]
   19b50:	bl	11520 <free@plt>
   19b54:	mov	r3, r4
   19b58:	ldr	r2, [r4, #48]	; 0x30
   19b5c:	cmp	r2, #0
   19b60:	bge	19b40 <fts_close@@Base+0x20>
   19b64:	mov	r0, r4
   19b68:	bl	11520 <free@plt>
   19b6c:	ldr	r0, [r5, #4]
   19b70:	cmp	r0, #0
   19b74:	beq	19b7c <fts_close@@Base+0x5c>
   19b78:	bl	1849c <__assert_fail@plt+0x6bec>
   19b7c:	ldr	r0, [r5, #8]
   19b80:	bl	11520 <free@plt>
   19b84:	ldr	r0, [r5, #24]
   19b88:	bl	11520 <free@plt>
   19b8c:	ldr	r3, [r5, #48]	; 0x30
   19b90:	tst	r3, #512	; 0x200
   19b94:	bne	19bf8 <fts_close@@Base+0xd8>
   19b98:	tst	r3, #4
   19b9c:	beq	19c24 <fts_close@@Base+0x104>
   19ba0:	mov	r4, #0
   19ba4:	add	r0, r5, #60	; 0x3c
   19ba8:	bl	184d0 <__assert_fail@plt+0x6c20>
   19bac:	ldr	r0, [r5, #52]	; 0x34
   19bb0:	cmp	r0, #0
   19bb4:	beq	19bbc <fts_close@@Base+0x9c>
   19bb8:	bl	13fa8 <__assert_fail@plt+0x26f8>
   19bbc:	ldr	r2, [r5, #48]	; 0x30
   19bc0:	ldr	r3, [pc, #212]	; 19c9c <fts_close@@Base+0x17c>
   19bc4:	ldr	r0, [r5, #56]	; 0x38
   19bc8:	and	r3, r3, r2
   19bcc:	cmp	r3, #0
   19bd0:	beq	19c1c <fts_close@@Base+0xfc>
   19bd4:	cmp	r0, #0
   19bd8:	beq	19be0 <fts_close@@Base+0xc0>
   19bdc:	bl	13fa8 <__assert_fail@plt+0x26f8>
   19be0:	mov	r0, r5
   19be4:	bl	11520 <free@plt>
   19be8:	cmp	r4, #0
   19bec:	bne	19c8c <fts_close@@Base+0x16c>
   19bf0:	mov	r0, r4
   19bf4:	pop	{r4, r5, r6, pc}
   19bf8:	ldr	r0, [r5, #32]
   19bfc:	cmp	r0, #0
   19c00:	blt	19ba0 <fts_close@@Base+0x80>
   19c04:	bl	11868 <close@plt>
   19c08:	cmp	r0, #0
   19c0c:	beq	19ba0 <fts_close@@Base+0x80>
   19c10:	bl	1170c <__errno_location@plt>
   19c14:	ldr	r4, [r0]
   19c18:	b	19ba4 <fts_close@@Base+0x84>
   19c1c:	bl	11520 <free@plt>
   19c20:	b	19be0 <fts_close@@Base+0xc0>
   19c24:	ldr	r0, [r5, #28]
   19c28:	bl	117d8 <fchdir@plt>
   19c2c:	cmp	r0, #0
   19c30:	bne	19c54 <fts_close@@Base+0x134>
   19c34:	ldr	r0, [r5, #28]
   19c38:	bl	11868 <close@plt>
   19c3c:	cmp	r0, #0
   19c40:	beq	19ba0 <fts_close@@Base+0x80>
   19c44:	bl	1170c <__errno_location@plt>
   19c48:	mov	r6, r0
   19c4c:	ldr	r4, [r6]
   19c50:	b	19ba4 <fts_close@@Base+0x84>
   19c54:	bl	1170c <__errno_location@plt>
   19c58:	mov	r6, r0
   19c5c:	ldr	r0, [r5, #28]
   19c60:	ldr	r4, [r6]
   19c64:	bl	11868 <close@plt>
   19c68:	clz	r3, r4
   19c6c:	lsr	r3, r3, #5
   19c70:	cmp	r0, #0
   19c74:	moveq	r3, #0
   19c78:	cmp	r3, #0
   19c7c:	beq	19ba4 <fts_close@@Base+0x84>
   19c80:	b	19c4c <fts_close@@Base+0x12c>
   19c84:	mov	r4, r3
   19c88:	b	19b64 <fts_close@@Base+0x44>
   19c8c:	bl	1170c <__errno_location@plt>
   19c90:	str	r4, [r0]
   19c94:	mvn	r4, #0
   19c98:	b	19bf0 <fts_close@@Base+0xd0>
   19c9c:	andeq	r0, r0, r2, lsl #2

00019ca0 <fts_read@@Base>:
   19ca0:	push	{r4, r5, r6, r7, r8, lr}
   19ca4:	ldr	r4, [r0]
   19ca8:	cmp	r4, #0
   19cac:	beq	19dcc <fts_read@@Base+0x12c>
   19cb0:	ldr	r1, [r0, #48]	; 0x30
   19cb4:	ands	r3, r1, #16384	; 0x4000
   19cb8:	bne	19dcc <fts_read@@Base+0x12c>
   19cbc:	ldrh	r2, [r4, #64]	; 0x40
   19cc0:	mov	r8, r0
   19cc4:	mov	r0, #3
   19cc8:	cmp	r2, #1
   19ccc:	strh	r0, [r4, #64]	; 0x40
   19cd0:	beq	1a088 <fts_read@@Base+0x3e8>
   19cd4:	cmp	r2, #2
   19cd8:	ldrh	r3, [r4, #60]	; 0x3c
   19cdc:	beq	19dd8 <fts_read@@Base+0x138>
   19ce0:	cmp	r3, #1
   19ce4:	bne	19d14 <fts_read@@Base+0x74>
   19ce8:	b	19e84 <fts_read@@Base+0x1e4>
   19cec:	mov	r0, r4
   19cf0:	str	r5, [r8]
   19cf4:	bl	11520 <free@plt>
   19cf8:	ldr	r4, [r5, #48]	; 0x30
   19cfc:	cmp	r4, #0
   19d00:	beq	19ecc <fts_read@@Base+0x22c>
   19d04:	ldrh	r3, [r5, #64]	; 0x40
   19d08:	mov	r4, r5
   19d0c:	cmp	r3, #4
   19d10:	bne	19f7c <fts_read@@Base+0x2dc>
   19d14:	ldr	r5, [r4, #8]
   19d18:	cmp	r5, #0
   19d1c:	bne	19cec <fts_read@@Base+0x4c>
   19d20:	ldr	r6, [r4, #4]
   19d24:	ldr	r3, [r6, #12]
   19d28:	cmp	r3, #0
   19d2c:	bne	1a220 <fts_read@@Base+0x580>
   19d30:	str	r6, [r8]
   19d34:	mov	r0, r4
   19d38:	bl	11520 <free@plt>
   19d3c:	ldr	r3, [r6, #48]	; 0x30
   19d40:	cmn	r3, #1
   19d44:	beq	1a154 <fts_read@@Base+0x4b4>
   19d48:	ldrh	r3, [r6, #60]	; 0x3c
   19d4c:	cmp	r3, #11
   19d50:	beq	1a3d8 <fts_read@@Base+0x738>
   19d54:	ldr	r3, [r6, #40]	; 0x28
   19d58:	ldr	r2, [r8, #24]
   19d5c:	mov	r1, #0
   19d60:	strb	r1, [r2, r3]
   19d64:	ldr	r3, [r6, #48]	; 0x30
   19d68:	cmp	r3, r1
   19d6c:	beq	1a174 <fts_read@@Base+0x4d4>
   19d70:	ldrh	r3, [r6, #62]	; 0x3e
   19d74:	tst	r3, #2
   19d78:	bne	1a108 <fts_read@@Base+0x468>
   19d7c:	tst	r3, #1
   19d80:	beq	1a2a8 <fts_read@@Base+0x608>
   19d84:	ldrh	r3, [r6, #60]	; 0x3c
   19d88:	ldr	r0, [r8, #48]	; 0x30
   19d8c:	cmp	r3, #2
   19d90:	beq	19dc0 <fts_read@@Base+0x120>
   19d94:	ldr	r3, [r6, #32]
   19d98:	cmp	r3, #0
   19d9c:	movne	r3, #7
   19da0:	strhne	r3, [r6, #60]	; 0x3c
   19da4:	bne	19dc0 <fts_read@@Base+0x120>
   19da8:	mov	r3, #6
   19dac:	strh	r3, [r6, #60]	; 0x3c
   19db0:	mov	r2, r6
   19db4:	add	r1, r8, #56	; 0x38
   19db8:	bl	18d20 <__assert_fail@plt+0x7470>
   19dbc:	ldr	r0, [r8, #48]	; 0x30
   19dc0:	tst	r0, #16384	; 0x4000
   19dc4:	moveq	r4, r6
   19dc8:	beq	19dd0 <fts_read@@Base+0x130>
   19dcc:	mov	r4, #0
   19dd0:	mov	r0, r4
   19dd4:	pop	{r4, r5, r6, r7, r8, pc}
   19dd8:	sub	r2, r3, #12
   19ddc:	cmp	r2, #1
   19de0:	bls	1a018 <fts_read@@Base+0x378>
   19de4:	cmp	r3, #1
   19de8:	bne	19d14 <fts_read@@Base+0x74>
   19dec:	tst	r1, #64	; 0x40
   19df0:	beq	19e08 <fts_read@@Base+0x168>
   19df4:	ldrd	r6, [r4, #72]	; 0x48
   19df8:	ldrd	r2, [r8, #16]
   19dfc:	cmp	r7, r3
   19e00:	cmpeq	r6, r2
   19e04:	bne	19e8c <fts_read@@Base+0x1ec>
   19e08:	ldr	r0, [r8, #4]
   19e0c:	cmp	r0, #0
   19e10:	beq	1a0b4 <fts_read@@Base+0x414>
   19e14:	tst	r1, #8192	; 0x2000
   19e18:	bne	1a0a0 <fts_read@@Base+0x400>
   19e1c:	ldr	r3, [r4, #24]
   19e20:	mvn	r2, #0
   19e24:	mov	r1, r4
   19e28:	mov	r0, r8
   19e2c:	bl	18a64 <__assert_fail@plt+0x71b4>
   19e30:	cmp	r0, #0
   19e34:	beq	1a13c <fts_read@@Base+0x49c>
   19e38:	bl	1170c <__errno_location@plt>
   19e3c:	ldrh	r3, [r4, #62]	; 0x3e
   19e40:	ldr	r5, [r8, #4]
   19e44:	orr	r3, r3, #1
   19e48:	cmp	r5, #0
   19e4c:	ldr	r2, [r0]
   19e50:	strh	r3, [r4, #62]	; 0x3e
   19e54:	str	r2, [r4, #32]
   19e58:	beq	19e78 <fts_read@@Base+0x1d8>
   19e5c:	mov	r3, r5
   19e60:	ldr	r2, [r3, #4]
   19e64:	ldr	r2, [r2, #24]
   19e68:	str	r2, [r3, #24]
   19e6c:	ldr	r3, [r3, #8]
   19e70:	cmp	r3, #0
   19e74:	bne	19e60 <fts_read@@Base+0x1c0>
   19e78:	mov	r3, #0
   19e7c:	str	r3, [r8, #4]
   19e80:	b	19f84 <fts_read@@Base+0x2e4>
   19e84:	cmp	r2, #4
   19e88:	bne	19dec <fts_read@@Base+0x14c>
   19e8c:	ldrh	r3, [r4, #62]	; 0x3e
   19e90:	tst	r3, #2
   19e94:	bne	1a270 <fts_read@@Base+0x5d0>
   19e98:	ldr	r0, [r8, #4]
   19e9c:	cmp	r0, #0
   19ea0:	beq	19eb0 <fts_read@@Base+0x210>
   19ea4:	bl	1849c <__assert_fail@plt+0x6bec>
   19ea8:	mov	r3, #0
   19eac:	str	r3, [r8, #4]
   19eb0:	mov	r3, #6
   19eb4:	strh	r3, [r4, #60]	; 0x3c
   19eb8:	mov	r2, r4
   19ebc:	add	r1, r8, #56	; 0x38
   19ec0:	ldr	r0, [r8, #48]	; 0x30
   19ec4:	bl	18d20 <__assert_fail@plt+0x7470>
   19ec8:	b	19dd0 <fts_read@@Base+0x130>
   19ecc:	mov	r0, r8
   19ed0:	bl	18750 <__assert_fail@plt+0x6ea0>
   19ed4:	cmp	r0, #0
   19ed8:	bne	1a258 <fts_read@@Base+0x5b8>
   19edc:	ldr	r2, [r8, #48]	; 0x30
   19ee0:	ldr	r3, [pc, #1268]	; 1a3dc <fts_read@@Base+0x73c>
   19ee4:	ldr	r0, [r8, #56]	; 0x38
   19ee8:	and	r3, r3, r2
   19eec:	cmp	r3, #0
   19ef0:	beq	1a268 <fts_read@@Base+0x5c8>
   19ef4:	cmp	r0, #0
   19ef8:	beq	19f00 <fts_read@@Base+0x260>
   19efc:	bl	13fa8 <__assert_fail@plt+0x26f8>
   19f00:	ldr	r2, [r5, #52]	; 0x34
   19f04:	add	r4, r5, #176	; 0xb0
   19f08:	str	r2, [r5, #40]	; 0x28
   19f0c:	mov	r1, r4
   19f10:	add	r2, r2, #1
   19f14:	ldr	r0, [r8, #24]
   19f18:	bl	11514 <memmove@plt>
   19f1c:	mov	r0, r4
   19f20:	mov	r1, #47	; 0x2f
   19f24:	bl	11790 <strrchr@plt>
   19f28:	cmp	r0, #0
   19f2c:	beq	19f5c <fts_read@@Base+0x2bc>
   19f30:	cmp	r4, r0
   19f34:	beq	1a144 <fts_read@@Base+0x4a4>
   19f38:	add	r6, r0, #1
   19f3c:	mov	r0, r6
   19f40:	bl	116dc <strlen@plt>
   19f44:	mov	r1, r6
   19f48:	mov	r7, r0
   19f4c:	add	r2, r7, #1
   19f50:	mov	r0, r4
   19f54:	bl	11514 <memmove@plt>
   19f58:	str	r7, [r5, #52]	; 0x34
   19f5c:	ldr	r3, [r8, #24]
   19f60:	add	r1, r8, #56	; 0x38
   19f64:	str	r3, [r5, #28]
   19f68:	str	r3, [r5, #24]
   19f6c:	ldr	r0, [r8, #48]	; 0x30
   19f70:	bl	189a8 <__assert_fail@plt+0x70f8>
   19f74:	ldrh	r0, [r5, #60]	; 0x3c
   19f78:	b	19fc8 <fts_read@@Base+0x328>
   19f7c:	cmp	r3, #2
   19f80:	beq	1a27c <fts_read@@Base+0x5dc>
   19f84:	ldr	r3, [r5, #4]
   19f88:	mov	ip, #47	; 0x2f
   19f8c:	ldr	r2, [r8, #24]
   19f90:	ldr	r1, [r3, #40]	; 0x28
   19f94:	ldr	r0, [r3, #28]
   19f98:	sub	r3, r1, #1
   19f9c:	ldrb	r0, [r0, r3]
   19fa0:	cmp	r0, ip
   19fa4:	movne	r3, r1
   19fa8:	add	r0, r2, r3
   19fac:	strb	ip, [r2, r3]
   19fb0:	ldr	r2, [r5, #52]	; 0x34
   19fb4:	add	r0, r0, #1
   19fb8:	add	r2, r2, #1
   19fbc:	add	r1, r5, #176	; 0xb0
   19fc0:	bl	11514 <memmove@plt>
   19fc4:	ldrh	r0, [r5, #60]	; 0x3c
   19fc8:	cmp	r0, #11
   19fcc:	str	r5, [r8]
   19fd0:	beq	1a048 <fts_read@@Base+0x3a8>
   19fd4:	cmp	r0, #1
   19fd8:	bne	1a064 <fts_read@@Base+0x3c4>
   19fdc:	ldr	r3, [r5, #48]	; 0x30
   19fe0:	cmp	r3, #0
   19fe4:	beq	1a078 <fts_read@@Base+0x3d8>
   19fe8:	mov	r4, r5
   19fec:	mov	r2, r5
   19ff0:	add	r1, r8, #56	; 0x38
   19ff4:	ldr	r0, [r8, #48]	; 0x30
   19ff8:	bl	18c70 <__assert_fail@plt+0x73c0>
   19ffc:	subs	r5, r0, #0
   1a000:	bne	19dd0 <fts_read@@Base+0x130>
   1a004:	bl	1170c <__errno_location@plt>
   1a008:	mov	r3, #12
   1a00c:	mov	r4, r5
   1a010:	str	r3, [r0]
   1a014:	b	19dd0 <fts_read@@Base+0x130>
   1a018:	mov	r3, #1
   1a01c:	mov	r2, r4
   1a020:	add	r1, r8, #48	; 0x30
   1a024:	ldr	r0, [r8, #32]
   1a028:	bl	187a0 <__assert_fail@plt+0x6ef0>
   1a02c:	cmp	r0, #1
   1a030:	strh	r0, [r4, #60]	; 0x3c
   1a034:	beq	1a2ec <fts_read@@Base+0x64c>
   1a038:	cmp	r0, #11
   1a03c:	str	r4, [r8]
   1a040:	bne	19dd0 <fts_read@@Base+0x130>
   1a044:	mov	r5, r4
   1a048:	ldrd	r2, [r5, #120]	; 0x78
   1a04c:	cmp	r3, #0
   1a050:	cmpeq	r2, #2
   1a054:	beq	1a1b0 <fts_read@@Base+0x510>
   1a058:	cmp	r3, #0
   1a05c:	cmpeq	r2, #1
   1a060:	bne	1a3d8 <fts_read@@Base+0x738>
   1a064:	mov	r4, r5
   1a068:	mov	r0, r4
   1a06c:	pop	{r4, r5, r6, r7, r8, pc}
   1a070:	cmp	r0, #1
   1a074:	bne	1a064 <fts_read@@Base+0x3c4>
   1a078:	ldrd	r2, [r5, #72]	; 0x48
   1a07c:	mov	r4, r5
   1a080:	strd	r2, [r8, #16]
   1a084:	b	19fec <fts_read@@Base+0x34c>
   1a088:	mov	r2, r4
   1a08c:	add	r1, r8, #48	; 0x30
   1a090:	ldr	r0, [r8, #32]
   1a094:	bl	187a0 <__assert_fail@plt+0x6ef0>
   1a098:	strh	r0, [r4, #60]	; 0x3c
   1a09c:	b	19dd0 <fts_read@@Base+0x130>
   1a0a0:	bic	r1, r1, #8192	; 0x2000
   1a0a4:	str	r1, [r8, #48]	; 0x30
   1a0a8:	bl	1849c <__assert_fail@plt+0x6bec>
   1a0ac:	mov	r3, #0
   1a0b0:	str	r3, [r8, #4]
   1a0b4:	mov	r1, #3
   1a0b8:	mov	r0, r8
   1a0bc:	bl	18df8 <__assert_fail@plt+0x7548>
   1a0c0:	cmp	r0, #0
   1a0c4:	mov	r5, r0
   1a0c8:	str	r0, [r8, #4]
   1a0cc:	bne	19e78 <fts_read@@Base+0x1d8>
   1a0d0:	ldr	r0, [r8, #48]	; 0x30
   1a0d4:	tst	r0, #16384	; 0x4000
   1a0d8:	bne	19dcc <fts_read@@Base+0x12c>
   1a0dc:	ldr	r3, [r4, #32]
   1a0e0:	cmp	r3, #0
   1a0e4:	beq	1a0f8 <fts_read@@Base+0x458>
   1a0e8:	ldrh	r3, [r4, #60]	; 0x3c
   1a0ec:	cmp	r3, #4
   1a0f0:	movne	r3, #7
   1a0f4:	strhne	r3, [r4, #60]	; 0x3c
   1a0f8:	add	r1, r8, #56	; 0x38
   1a0fc:	mov	r2, r4
   1a100:	bl	18d20 <__assert_fail@plt+0x7470>
   1a104:	b	19dd0 <fts_read@@Base+0x130>
   1a108:	ldr	r3, [r8, #48]	; 0x30
   1a10c:	ldr	r1, [r6, #36]	; 0x24
   1a110:	tst	r3, #4
   1a114:	bne	1a130 <fts_read@@Base+0x490>
   1a118:	tst	r3, #512	; 0x200
   1a11c:	beq	1a2d4 <fts_read@@Base+0x634>
   1a120:	mov	r2, #1
   1a124:	mov	r0, r8
   1a128:	bl	186c8 <__assert_fail@plt+0x6e18>
   1a12c:	ldr	r1, [r6, #36]	; 0x24
   1a130:	mov	r0, r1
   1a134:	bl	11868 <close@plt>
   1a138:	b	19d84 <fts_read@@Base+0xe4>
   1a13c:	ldr	r5, [r8, #4]
   1a140:	b	19e78 <fts_read@@Base+0x1d8>
   1a144:	ldrb	r3, [r4, #1]
   1a148:	cmp	r3, #0
   1a14c:	beq	19f5c <fts_read@@Base+0x2bc>
   1a150:	b	19f38 <fts_read@@Base+0x298>
   1a154:	mov	r0, r6
   1a158:	bl	11520 <free@plt>
   1a15c:	bl	1170c <__errno_location@plt>
   1a160:	mov	r3, #0
   1a164:	mov	r4, r3
   1a168:	str	r3, [r0]
   1a16c:	str	r3, [r8]
   1a170:	b	19dd0 <fts_read@@Base+0x130>
   1a174:	mov	r0, r8
   1a178:	bl	18750 <__assert_fail@plt+0x6ea0>
   1a17c:	cmp	r0, #0
   1a180:	beq	19d84 <fts_read@@Base+0xe4>
   1a184:	bl	1170c <__errno_location@plt>
   1a188:	ldr	r3, [r8, #48]	; 0x30
   1a18c:	orr	r3, r3, #16384	; 0x4000
   1a190:	ldr	r2, [r0]
   1a194:	str	r2, [r6, #32]
   1a198:	str	r3, [r8, #48]	; 0x30
   1a19c:	ldrh	r3, [r6, #60]	; 0x3c
   1a1a0:	cmp	r3, #2
   1a1a4:	beq	19dcc <fts_read@@Base+0x12c>
   1a1a8:	ldr	r0, [r8, #48]	; 0x30
   1a1ac:	b	19d94 <fts_read@@Base+0xf4>
   1a1b0:	ldr	r4, [r5, #4]
   1a1b4:	ldr	r0, [r8, #32]
   1a1b8:	ldr	r3, [r4, #56]	; 0x38
   1a1bc:	cmp	r3, #0
   1a1c0:	bne	1a1d4 <fts_read@@Base+0x534>
   1a1c4:	ldr	r3, [r8, #48]	; 0x30
   1a1c8:	and	r3, r3, #24
   1a1cc:	cmp	r3, #24
   1a1d0:	beq	1a364 <fts_read@@Base+0x6c4>
   1a1d4:	mov	r3, #0
   1a1d8:	mov	r2, r5
   1a1dc:	add	r1, r8, #48	; 0x30
   1a1e0:	bl	187a0 <__assert_fail@plt+0x6ef0>
   1a1e4:	ldr	r3, [r5, #88]	; 0x58
   1a1e8:	and	r3, r3, #61440	; 0xf000
   1a1ec:	cmp	r3, #16384	; 0x4000
   1a1f0:	strh	r0, [r5, #60]	; 0x3c
   1a1f4:	bne	19fd4 <fts_read@@Base+0x334>
   1a1f8:	ldr	r3, [r5, #48]	; 0x30
   1a1fc:	cmp	r3, #0
   1a200:	beq	1a070 <fts_read@@Base+0x3d0>
   1a204:	ldr	r3, [r4, #56]	; 0x38
   1a208:	sub	r3, r3, #1
   1a20c:	cmn	r3, #3
   1a210:	strls	r3, [r4, #56]	; 0x38
   1a214:	cmp	r0, #1
   1a218:	beq	19fe8 <fts_read@@Base+0x348>
   1a21c:	b	1a064 <fts_read@@Base+0x3c4>
   1a220:	ldr	r3, [r6, #40]	; 0x28
   1a224:	ldr	r2, [r8, #24]
   1a228:	str	r6, [r8]
   1a22c:	mov	r1, #3
   1a230:	strb	r5, [r2, r3]
   1a234:	mov	r0, r8
   1a238:	bl	18df8 <__assert_fail@plt+0x7548>
   1a23c:	subs	r5, r0, #0
   1a240:	bne	1a2c8 <fts_read@@Base+0x628>
   1a244:	ldr	r3, [r8, #48]	; 0x30
   1a248:	tst	r3, #16384	; 0x4000
   1a24c:	bne	19dcc <fts_read@@Base+0x12c>
   1a250:	ldr	r6, [r4, #4]
   1a254:	b	19d30 <fts_read@@Base+0x90>
   1a258:	ldr	r3, [r8, #48]	; 0x30
   1a25c:	orr	r3, r3, #16384	; 0x4000
   1a260:	str	r3, [r8, #48]	; 0x30
   1a264:	b	19dd0 <fts_read@@Base+0x130>
   1a268:	bl	11520 <free@plt>
   1a26c:	b	19f00 <fts_read@@Base+0x260>
   1a270:	ldr	r0, [r4, #36]	; 0x24
   1a274:	bl	11868 <close@plt>
   1a278:	b	19e98 <fts_read@@Base+0x1f8>
   1a27c:	mov	r3, #1
   1a280:	mov	r2, r5
   1a284:	add	r1, r8, #48	; 0x30
   1a288:	ldr	r0, [r8, #32]
   1a28c:	bl	187a0 <__assert_fail@plt+0x6ef0>
   1a290:	cmp	r0, #1
   1a294:	strh	r0, [r5, #60]	; 0x3c
   1a298:	beq	1a330 <fts_read@@Base+0x690>
   1a29c:	mov	r3, #3
   1a2a0:	strh	r3, [r5, #64]	; 0x40
   1a2a4:	b	19f84 <fts_read@@Base+0x2e4>
   1a2a8:	ldr	r3, [pc, #304]	; 1a3e0 <fts_read@@Base+0x740>
   1a2ac:	mvn	r2, #0
   1a2b0:	ldr	r1, [r6, #4]
   1a2b4:	mov	r0, r8
   1a2b8:	bl	18a64 <__assert_fail@plt+0x71b4>
   1a2bc:	cmp	r0, #0
   1a2c0:	beq	19d84 <fts_read@@Base+0xe4>
   1a2c4:	b	1a184 <fts_read@@Base+0x4e4>
   1a2c8:	mov	r0, r4
   1a2cc:	bl	11520 <free@plt>
   1a2d0:	b	19f84 <fts_read@@Base+0x2e4>
   1a2d4:	mov	r0, r1
   1a2d8:	bl	117d8 <fchdir@plt>
   1a2dc:	cmp	r0, #0
   1a2e0:	bne	1a384 <fts_read@@Base+0x6e4>
   1a2e4:	ldr	r1, [r6, #36]	; 0x24
   1a2e8:	b	1a130 <fts_read@@Base+0x490>
   1a2ec:	ldr	r1, [r8, #48]	; 0x30
   1a2f0:	tst	r1, #4
   1a2f4:	strne	r4, [r8]
   1a2f8:	movne	r5, r4
   1a2fc:	bne	19fdc <fts_read@@Base+0x33c>
   1a300:	ldr	r2, [pc, #220]	; 1a3e4 <fts_read@@Base+0x744>
   1a304:	ldr	r0, [r8, #32]
   1a308:	bl	18a28 <__assert_fail@plt+0x7178>
   1a30c:	cmp	r0, #0
   1a310:	str	r0, [r4, #36]	; 0x24
   1a314:	blt	1a3a4 <fts_read@@Base+0x704>
   1a318:	ldrh	r3, [r4, #62]	; 0x3e
   1a31c:	ldrh	r0, [r4, #60]	; 0x3c
   1a320:	mov	r5, r4
   1a324:	orr	r3, r3, #2
   1a328:	strh	r3, [r4, #62]	; 0x3e
   1a32c:	b	19fc8 <fts_read@@Base+0x328>
   1a330:	ldr	r1, [r8, #48]	; 0x30
   1a334:	tst	r1, #4
   1a338:	bne	1a29c <fts_read@@Base+0x5fc>
   1a33c:	ldr	r2, [pc, #160]	; 1a3e4 <fts_read@@Base+0x744>
   1a340:	ldr	r0, [r8, #32]
   1a344:	bl	18a28 <__assert_fail@plt+0x7178>
   1a348:	cmp	r0, #0
   1a34c:	str	r0, [r5, #36]	; 0x24
   1a350:	blt	1a3c0 <fts_read@@Base+0x720>
   1a354:	ldrh	r3, [r5, #62]	; 0x3e
   1a358:	orr	r3, r3, #2
   1a35c:	strh	r3, [r5, #62]	; 0x3e
   1a360:	b	1a29c <fts_read@@Base+0x5fc>
   1a364:	mov	r1, r0
   1a368:	mov	r0, r4
   1a36c:	bl	18634 <__assert_fail@plt+0x6d84>
   1a370:	cmp	r0, #2
   1a374:	ldrheq	r0, [r5, #60]	; 0x3c
   1a378:	beq	19fd4 <fts_read@@Base+0x334>
   1a37c:	ldr	r0, [r8, #32]
   1a380:	b	1a1d4 <fts_read@@Base+0x534>
   1a384:	bl	1170c <__errno_location@plt>
   1a388:	ldr	r3, [r8, #48]	; 0x30
   1a38c:	ldr	r1, [r6, #36]	; 0x24
   1a390:	orr	r3, r3, #16384	; 0x4000
   1a394:	ldr	r2, [r0]
   1a398:	str	r2, [r6, #32]
   1a39c:	str	r3, [r8, #48]	; 0x30
   1a3a0:	b	1a130 <fts_read@@Base+0x490>
   1a3a4:	bl	1170c <__errno_location@plt>
   1a3a8:	mov	r2, #7
   1a3ac:	ldr	r3, [r0]
   1a3b0:	strh	r2, [r4, #60]	; 0x3c
   1a3b4:	str	r3, [r4, #32]
   1a3b8:	str	r4, [r8]
   1a3bc:	b	19dd0 <fts_read@@Base+0x130>
   1a3c0:	bl	1170c <__errno_location@plt>
   1a3c4:	mov	r2, #7
   1a3c8:	ldr	r3, [r0]
   1a3cc:	strh	r2, [r5, #60]	; 0x3c
   1a3d0:	str	r3, [r5, #32]
   1a3d4:	b	1a29c <fts_read@@Base+0x5fc>
   1a3d8:	bl	1185c <abort@plt>
   1a3dc:	andeq	r0, r0, r2, lsl #2
   1a3e0:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>
   1a3e4:	andeq	fp, r1, r0, asr r9

0001a3e8 <fts_set@@Base>:
   1a3e8:	cmp	r2, #4
   1a3ec:	bhi	1a400 <fts_set@@Base+0x18>
   1a3f0:	mov	r3, #0
   1a3f4:	strh	r2, [r1, #64]	; 0x40
   1a3f8:	mov	r0, r3
   1a3fc:	bx	lr
   1a400:	push	{r4, lr}
   1a404:	bl	1170c <__errno_location@plt>
   1a408:	mov	r2, #22
   1a40c:	mov	r3, #1
   1a410:	str	r2, [r0]
   1a414:	mov	r0, r3
   1a418:	pop	{r4, pc}

0001a41c <fts_children@@Base>:
   1a41c:	push	{r4, r5, r6, r7, r8, lr}
   1a420:	mov	r4, r1
   1a424:	mov	r5, r0
   1a428:	bl	1170c <__errno_location@plt>
   1a42c:	bics	r2, r4, #8192	; 0x2000
   1a430:	mov	r7, r0
   1a434:	bne	1a4c4 <fts_children@@Base+0xa8>
   1a438:	ldr	r6, [r5]
   1a43c:	str	r2, [r0]
   1a440:	ldr	r3, [r5, #48]	; 0x30
   1a444:	ands	r0, r3, #16384	; 0x4000
   1a448:	bne	1a4cc <fts_children@@Base+0xb0>
   1a44c:	ldrh	r3, [r6, #60]	; 0x3c
   1a450:	cmp	r3, #9
   1a454:	beq	1a524 <fts_children@@Base+0x108>
   1a458:	cmp	r3, #1
   1a45c:	popne	{r4, r5, r6, r7, r8, pc}
   1a460:	ldr	r0, [r5, #4]
   1a464:	cmp	r0, #0
   1a468:	beq	1a470 <fts_children@@Base+0x54>
   1a46c:	bl	1849c <__assert_fail@plt+0x6bec>
   1a470:	cmp	r4, #8192	; 0x2000
   1a474:	moveq	r8, #2
   1a478:	ldreq	r3, [r5, #48]	; 0x30
   1a47c:	movne	r8, #1
   1a480:	orreq	r3, r3, #8192	; 0x2000
   1a484:	streq	r3, [r5, #48]	; 0x30
   1a488:	ldr	r3, [r6, #48]	; 0x30
   1a48c:	cmp	r3, #0
   1a490:	bne	1a4b0 <fts_children@@Base+0x94>
   1a494:	ldr	r3, [r6, #24]
   1a498:	ldrb	r3, [r3]
   1a49c:	cmp	r3, #47	; 0x2f
   1a4a0:	beq	1a4b0 <fts_children@@Base+0x94>
   1a4a4:	ldr	r1, [r5, #48]	; 0x30
   1a4a8:	ands	r4, r1, #4
   1a4ac:	beq	1a4d4 <fts_children@@Base+0xb8>
   1a4b0:	mov	r1, r8
   1a4b4:	mov	r0, r5
   1a4b8:	bl	18df8 <__assert_fail@plt+0x7548>
   1a4bc:	str	r0, [r5, #4]
   1a4c0:	pop	{r4, r5, r6, r7, r8, pc}
   1a4c4:	mov	r3, #22
   1a4c8:	str	r3, [r0]
   1a4cc:	mov	r0, #0
   1a4d0:	pop	{r4, r5, r6, r7, r8, pc}
   1a4d4:	ldr	r2, [pc, #136]	; 1a564 <fts_children@@Base+0x148>
   1a4d8:	ldr	r0, [r5, #32]
   1a4dc:	bl	18a28 <__assert_fail@plt+0x7178>
   1a4e0:	subs	r6, r0, #0
   1a4e4:	blt	1a540 <fts_children@@Base+0x124>
   1a4e8:	mov	r1, r8
   1a4ec:	mov	r0, r5
   1a4f0:	bl	18df8 <__assert_fail@plt+0x7548>
   1a4f4:	ldr	r3, [r5, #48]	; 0x30
   1a4f8:	ands	r4, r3, #512	; 0x200
   1a4fc:	str	r0, [r5, #4]
   1a500:	bne	1a52c <fts_children@@Base+0x110>
   1a504:	mov	r0, r6
   1a508:	bl	117d8 <fchdir@plt>
   1a50c:	cmp	r0, #0
   1a510:	bne	1a54c <fts_children@@Base+0x130>
   1a514:	mov	r0, r6
   1a518:	bl	11868 <close@plt>
   1a51c:	ldr	r0, [r5, #4]
   1a520:	pop	{r4, r5, r6, r7, r8, pc}
   1a524:	ldr	r0, [r6, #8]
   1a528:	pop	{r4, r5, r6, r7, r8, pc}
   1a52c:	mov	r1, r6
   1a530:	mov	r2, #1
   1a534:	mov	r0, r5
   1a538:	bl	186c8 <__assert_fail@plt+0x6e18>
   1a53c:	b	1a51c <fts_children@@Base+0x100>
   1a540:	str	r4, [r5, #4]
   1a544:	mov	r0, r4
   1a548:	pop	{r4, r5, r6, r7, r8, pc}
   1a54c:	ldr	r5, [r7]
   1a550:	mov	r0, r6
   1a554:	bl	11868 <close@plt>
   1a558:	str	r5, [r7]
   1a55c:	mov	r0, r4
   1a560:	pop	{r4, r5, r6, r7, r8, pc}
   1a564:	andeq	fp, r1, r0, asr r9
   1a568:	push	{r4, r5, r6, r7, r8, lr}
   1a56c:	subs	r4, r0, #0
   1a570:	beq	1a5c0 <fts_children@@Base+0x1a4>
   1a574:	cmp	r4, #10
   1a578:	beq	1a584 <fts_children@@Base+0x168>
   1a57c:	mov	r0, r4
   1a580:	pop	{r4, r5, r6, r7, r8, pc}
   1a584:	ldr	r6, [r1]
   1a588:	mov	r5, r1
   1a58c:	mov	r0, r6
   1a590:	ldr	r1, [pc, #60]	; 1a5d4 <fts_children@@Base+0x1b8>
   1a594:	bl	114e4 <strcmp@plt>
   1a598:	subs	r7, r0, #0
   1a59c:	bne	1a57c <fts_children@@Base+0x160>
   1a5a0:	mov	r0, r6
   1a5a4:	bl	117f0 <freecon@plt>
   1a5a8:	str	r7, [r5]
   1a5ac:	bl	1170c <__errno_location@plt>
   1a5b0:	mov	r3, #61	; 0x3d
   1a5b4:	mvn	r4, #0
   1a5b8:	str	r3, [r0]
   1a5bc:	b	1a57c <fts_children@@Base+0x160>
   1a5c0:	bl	1170c <__errno_location@plt>
   1a5c4:	mov	r3, #95	; 0x5f
   1a5c8:	mvn	r4, #0
   1a5cc:	str	r3, [r0]
   1a5d0:	b	1a57c <fts_children@@Base+0x160>
   1a5d4:	andeq	ip, r1, r0, asr #1
   1a5d8:	push	{r4, lr}
   1a5dc:	mov	r4, r1
   1a5e0:	bl	116d0 <getfilecon@plt>
   1a5e4:	mov	r1, r4
   1a5e8:	pop	{r4, lr}
   1a5ec:	b	1a568 <fts_children@@Base+0x14c>
   1a5f0:	push	{r4, lr}
   1a5f4:	mov	r4, r1
   1a5f8:	bl	11658 <lgetfilecon@plt>
   1a5fc:	mov	r1, r4
   1a600:	pop	{r4, lr}
   1a604:	b	1a568 <fts_children@@Base+0x14c>
   1a608:	push	{r4, lr}
   1a60c:	mov	r4, r1
   1a610:	bl	115a4 <fgetfilecon@plt>
   1a614:	mov	r1, r4
   1a618:	pop	{r4, lr}
   1a61c:	b	1a568 <fts_children@@Base+0x14c>
   1a620:	push	{r4, r5, r6, r7, r8, lr}
   1a624:	subs	r7, r0, #0
   1a628:	ldr	r5, [pc, #108]	; 1a69c <fts_children@@Base+0x280>
   1a62c:	sub	sp, sp, #8
   1a630:	mov	r8, r1
   1a634:	ldr	r1, [r5]
   1a638:	moveq	r7, sp
   1a63c:	str	r1, [sp, #4]
   1a640:	mov	r0, r7
   1a644:	mov	r1, r8
   1a648:	mov	r6, r2
   1a64c:	bl	11634 <mbrtowc@plt>
   1a650:	cmp	r6, #0
   1a654:	cmnne	r0, #3
   1a658:	mov	r4, r0
   1a65c:	bhi	1a67c <fts_children@@Base+0x260>
   1a660:	ldr	r2, [sp, #4]
   1a664:	ldr	r3, [r5]
   1a668:	mov	r0, r4
   1a66c:	cmp	r2, r3
   1a670:	bne	1a698 <fts_children@@Base+0x27c>
   1a674:	add	sp, sp, #8
   1a678:	pop	{r4, r5, r6, r7, r8, pc}
   1a67c:	mov	r0, #0
   1a680:	bl	1a91c <fts_children@@Base+0x500>
   1a684:	cmp	r0, #0
   1a688:	moveq	r4, #1
   1a68c:	ldrbeq	r3, [r8]
   1a690:	streq	r3, [r7]
   1a694:	b	1a660 <fts_children@@Base+0x244>
   1a698:	bl	11580 <__stack_chk_fail@plt>
   1a69c:	andeq	ip, r2, r0, lsl #30
   1a6a0:	cmp	r1, #1024	; 0x400
   1a6a4:	push	{r4, r5, r6, r7, r8, lr}
   1a6a8:	mov	r7, r0
   1a6ac:	ldrhi	r4, [pc, #156]	; 1a750 <fts_children@@Base+0x334>
   1a6b0:	addls	r4, r1, #1
   1a6b4:	mov	r0, r4
   1a6b8:	bl	11664 <malloc@plt>
   1a6bc:	mov	r2, r4
   1a6c0:	subs	r5, r0, #0
   1a6c4:	mov	r1, r5
   1a6c8:	mov	r0, r7
   1a6cc:	beq	1a714 <fts_children@@Base+0x2f8>
   1a6d0:	bl	115e0 <readlink@plt>
   1a6d4:	subs	r6, r0, #0
   1a6d8:	blt	1a71c <fts_children@@Base+0x300>
   1a6dc:	cmp	r4, r6
   1a6e0:	mov	r0, r5
   1a6e4:	bhi	1a740 <fts_children@@Base+0x324>
   1a6e8:	bl	11520 <free@plt>
   1a6ec:	cmn	r4, #-1073741823	; 0xc0000001
   1a6f0:	lslls	r4, r4, #1
   1a6f4:	bls	1a6b4 <fts_children@@Base+0x298>
   1a6f8:	cmn	r4, #-2147483646	; 0x80000002
   1a6fc:	mvn	r4, #-2147483648	; 0x80000000
   1a700:	bls	1a6b4 <fts_children@@Base+0x298>
   1a704:	bl	1170c <__errno_location@plt>
   1a708:	mov	r5, #0
   1a70c:	mov	r3, #12
   1a710:	str	r3, [r0]
   1a714:	mov	r0, r5
   1a718:	pop	{r4, r5, r6, r7, r8, pc}
   1a71c:	bl	1170c <__errno_location@plt>
   1a720:	ldr	r3, [r0]
   1a724:	cmp	r3, #34	; 0x22
   1a728:	beq	1a6dc <fts_children@@Base+0x2c0>
   1a72c:	mov	r0, r5
   1a730:	mov	r5, #0
   1a734:	bl	11520 <free@plt>
   1a738:	mov	r0, r5
   1a73c:	pop	{r4, r5, r6, r7, r8, pc}
   1a740:	mov	r3, #0
   1a744:	strb	r3, [r5, r6]
   1a748:	mov	r0, r5
   1a74c:	pop	{r4, r5, r6, r7, r8, pc}
   1a750:	andeq	r0, r0, r1, lsl #8
   1a754:	push	{r4, r5, r6, lr}
   1a758:	mov	r4, r0
   1a75c:	bl	11628 <__fpending@plt>
   1a760:	ldr	r5, [r4]
   1a764:	and	r5, r5, #32
   1a768:	mov	r6, r0
   1a76c:	mov	r0, r4
   1a770:	bl	1ab38 <fts_children@@Base+0x71c>
   1a774:	cmp	r5, #0
   1a778:	mov	r4, r0
   1a77c:	bne	1a7a8 <fts_children@@Base+0x38c>
   1a780:	cmp	r0, #0
   1a784:	beq	1a7a0 <fts_children@@Base+0x384>
   1a788:	cmp	r6, #0
   1a78c:	bne	1a7c0 <fts_children@@Base+0x3a4>
   1a790:	bl	1170c <__errno_location@plt>
   1a794:	ldr	r4, [r0]
   1a798:	subs	r4, r4, #9
   1a79c:	mvnne	r4, #0
   1a7a0:	mov	r0, r4
   1a7a4:	pop	{r4, r5, r6, pc}
   1a7a8:	cmp	r0, #0
   1a7ac:	bne	1a7c0 <fts_children@@Base+0x3a4>
   1a7b0:	bl	1170c <__errno_location@plt>
   1a7b4:	str	r4, [r0]
   1a7b8:	mvn	r4, #0
   1a7bc:	b	1a7a0 <fts_children@@Base+0x384>
   1a7c0:	mvn	r4, #0
   1a7c4:	b	1a7a0 <fts_children@@Base+0x384>
   1a7c8:	push	{r4, r5}
   1a7cc:	mov	r4, #0
   1a7d0:	mov	r5, #0
   1a7d4:	ldr	r3, [pc, #12]	; 1a7e8 <fts_children@@Base+0x3cc>
   1a7d8:	strd	r4, [r0, #16]
   1a7dc:	str	r3, [r0, #24]
   1a7e0:	pop	{r4, r5}
   1a7e4:	bx	lr
   1a7e8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1a7ec:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7f0:	ldr	r2, [r0, #24]
   1a7f4:	ldr	r3, [pc, #180]	; 1a8b0 <fts_children@@Base+0x494>
   1a7f8:	cmp	r2, r3
   1a7fc:	bne	1a89c <fts_children@@Base+0x480>
   1a800:	ldrd	r6, [r0, #16]
   1a804:	ldrd	sl, [r1, #96]	; 0x60
   1a808:	orrs	r3, r6, r7
   1a80c:	beq	1a848 <fts_children@@Base+0x42c>
   1a810:	ldrd	r2, [r0]
   1a814:	cmp	r3, fp
   1a818:	cmpeq	r2, sl
   1a81c:	beq	1a86c <fts_children@@Base+0x450>
   1a820:	adds	r8, r6, #1
   1a824:	adc	r9, r7, #0
   1a828:	and	r2, r6, r8
   1a82c:	and	r3, r7, r9
   1a830:	orrs	r3, r2, r3
   1a834:	strd	r8, [r0, #16]
   1a838:	movne	r1, #0
   1a83c:	beq	1a88c <fts_children@@Base+0x470>
   1a840:	mov	r0, r1
   1a844:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a848:	mov	r2, #1
   1a84c:	mov	r3, #0
   1a850:	strd	r2, [r0, #16]
   1a854:	ldrd	r2, [r1]
   1a858:	mov	r1, #0
   1a85c:	strd	sl, [r0]
   1a860:	strd	r2, [r0, #8]
   1a864:	mov	r0, r1
   1a868:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a86c:	ldrd	r4, [r1]
   1a870:	ldrd	r2, [r0, #8]
   1a874:	cmp	r5, r3
   1a878:	cmpeq	r4, r2
   1a87c:	bne	1a820 <fts_children@@Base+0x404>
   1a880:	mov	r1, #1
   1a884:	mov	r0, r1
   1a888:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a88c:	orrs	r3, r8, r9
   1a890:	bne	1a854 <fts_children@@Base+0x438>
   1a894:	mov	r1, #1
   1a898:	b	1a884 <fts_children@@Base+0x468>
   1a89c:	ldr	r3, [pc, #16]	; 1a8b4 <fts_children@@Base+0x498>
   1a8a0:	mov	r2, #60	; 0x3c
   1a8a4:	ldr	r1, [pc, #12]	; 1a8b8 <fts_children@@Base+0x49c>
   1a8a8:	ldr	r0, [pc, #12]	; 1a8bc <fts_children@@Base+0x4a0>
   1a8ac:	bl	118b0 <__assert_fail@plt>
   1a8b0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1a8b4:	andeq	ip, r1, ip, asr #1
   1a8b8:	ldrdeq	ip, [r1], -r8
   1a8bc:	andeq	ip, r1, ip, ror #1
   1a8c0:	push	{r1, r2, r3}
   1a8c4:	push	{r4, lr}
   1a8c8:	sub	sp, sp, #12
   1a8cc:	ldr	r4, [pc, #68]	; 1a918 <fts_children@@Base+0x4fc>
   1a8d0:	ldr	r1, [sp, #20]
   1a8d4:	ldr	r3, [r4]
   1a8d8:	ands	r2, r1, #64	; 0x40
   1a8dc:	str	r3, [sp, #4]
   1a8e0:	ldrne	r2, [sp, #24]
   1a8e4:	addne	r3, sp, #24
   1a8e8:	strne	r3, [sp]
   1a8ec:	bl	1164c <open64@plt>
   1a8f0:	bl	1aaf4 <fts_children@@Base+0x6d8>
   1a8f4:	ldr	r2, [sp, #4]
   1a8f8:	ldr	r3, [r4]
   1a8fc:	cmp	r2, r3
   1a900:	bne	1a914 <fts_children@@Base+0x4f8>
   1a904:	add	sp, sp, #12
   1a908:	pop	{r4, lr}
   1a90c:	add	sp, sp, #12
   1a910:	bx	lr
   1a914:	bl	11580 <__stack_chk_fail@plt>
   1a918:	andeq	ip, r2, r0, lsl #30
   1a91c:	push	{r4, lr}
   1a920:	mov	r1, #0
   1a924:	bl	11778 <setlocale@plt>
   1a928:	subs	r4, r0, #0
   1a92c:	beq	1a958 <fts_children@@Base+0x53c>
   1a930:	ldr	r1, [pc, #40]	; 1a960 <fts_children@@Base+0x544>
   1a934:	bl	114e4 <strcmp@plt>
   1a938:	cmp	r0, #0
   1a93c:	popeq	{r4, pc}
   1a940:	mov	r0, r4
   1a944:	ldr	r1, [pc, #24]	; 1a964 <fts_children@@Base+0x548>
   1a948:	bl	114e4 <strcmp@plt>
   1a94c:	adds	r0, r0, #0
   1a950:	movne	r0, #1
   1a954:	pop	{r4, pc}
   1a958:	mov	r0, #1
   1a95c:	pop	{r4, pc}
   1a960:	andeq	ip, r1, r4, lsl #2
   1a964:	andeq	ip, r1, r8, lsl #2
   1a968:	ldrb	r3, [r0]
   1a96c:	cmp	r3, #0
   1a970:	beq	1a99c <fts_children@@Base+0x580>
   1a974:	mov	r2, #0
   1a978:	push	{r4, lr}
   1a97c:	add	r2, r3, r2, ror #23
   1a980:	ldrb	r3, [r0, #1]!
   1a984:	cmp	r3, #0
   1a988:	bne	1a97c <fts_children@@Base+0x560>
   1a98c:	mov	r0, r2
   1a990:	bl	1b01c <fts_children@@Base+0xc00>
   1a994:	mov	r0, r1
   1a998:	pop	{r4, pc}
   1a99c:	mov	r0, r3
   1a9a0:	bx	lr
   1a9a4:	mov	r3, #0
   1a9a8:	mov	r2, #1
   1a9ac:	str	r1, [r0]
   1a9b0:	str	r1, [r0, #4]
   1a9b4:	str	r1, [r0, #8]
   1a9b8:	str	r1, [r0, #12]
   1a9bc:	str	r1, [r0, #16]
   1a9c0:	strb	r2, [r0, #28]
   1a9c4:	str	r3, [r0, #20]
   1a9c8:	str	r3, [r0, #24]
   1a9cc:	bx	lr
   1a9d0:	ldrb	r0, [r0, #28]
   1a9d4:	bx	lr
   1a9d8:	ldrb	ip, [r0, #28]
   1a9dc:	ldr	r3, [r0, #20]
   1a9e0:	mov	r2, r0
   1a9e4:	eor	ip, ip, #1
   1a9e8:	add	r3, ip, r3
   1a9ec:	and	r3, r3, #3
   1a9f0:	ldr	r0, [r0, r3, lsl #2]
   1a9f4:	str	r1, [r2, r3, lsl #2]
   1a9f8:	ldr	r1, [r2, #24]
   1a9fc:	str	r3, [r2, #20]
   1aa00:	cmp	r1, r3
   1aa04:	addeq	ip, ip, r1
   1aa08:	andeq	ip, ip, #3
   1aa0c:	mov	r3, #0
   1aa10:	streq	ip, [r2, #24]
   1aa14:	strb	r3, [r2, #28]
   1aa18:	bx	lr
   1aa1c:	ldrb	r3, [r0, #28]
   1aa20:	cmp	r3, #0
   1aa24:	bne	1aa5c <fts_children@@Base+0x640>
   1aa28:	ldr	r3, [r0, #20]
   1aa2c:	ldr	r1, [r0, #16]
   1aa30:	ldr	r2, [r0, r3, lsl #2]
   1aa34:	str	r1, [r0, r3, lsl #2]
   1aa38:	ldr	r1, [r0, #24]
   1aa3c:	cmp	r3, r1
   1aa40:	addne	r3, r3, #3
   1aa44:	moveq	r3, #1
   1aa48:	andne	r3, r3, #3
   1aa4c:	strbeq	r3, [r0, #28]
   1aa50:	strne	r3, [r0, #20]
   1aa54:	mov	r0, r2
   1aa58:	bx	lr
   1aa5c:	push	{r4, lr}
   1aa60:	bl	1185c <abort@plt>
   1aa64:	push	{r4, lr}
   1aa68:	mov	r0, #14
   1aa6c:	bl	1179c <nl_langinfo@plt>
   1aa70:	cmp	r0, #0
   1aa74:	beq	1aa8c <fts_children@@Base+0x670>
   1aa78:	ldrb	r2, [r0]
   1aa7c:	ldr	r3, [pc, #16]	; 1aa94 <fts_children@@Base+0x678>
   1aa80:	cmp	r2, #0
   1aa84:	moveq	r0, r3
   1aa88:	pop	{r4, pc}
   1aa8c:	ldr	r0, [pc]	; 1aa94 <fts_children@@Base+0x678>
   1aa90:	pop	{r4, pc}
   1aa94:	andeq	ip, r1, r0, lsl r1
   1aa98:	push	{r2, r3}
   1aa9c:	push	{r4, lr}
   1aaa0:	sub	sp, sp, #8
   1aaa4:	ldr	r4, [pc, #68]	; 1aaf0 <fts_children@@Base+0x6d4>
   1aaa8:	ldr	r2, [sp, #16]
   1aaac:	ands	r3, r2, #64	; 0x40
   1aab0:	addne	r3, sp, #20
   1aab4:	ldr	ip, [r4]
   1aab8:	strne	r3, [sp]
   1aabc:	ldrne	r3, [sp, #20]
   1aac0:	str	ip, [sp, #4]
   1aac4:	bl	116f4 <openat64@plt>
   1aac8:	bl	1aaf4 <fts_children@@Base+0x6d8>
   1aacc:	ldr	r2, [sp, #4]
   1aad0:	ldr	r3, [r4]
   1aad4:	cmp	r2, r3
   1aad8:	bne	1aaec <fts_children@@Base+0x6d0>
   1aadc:	add	sp, sp, #8
   1aae0:	pop	{r4, lr}
   1aae4:	add	sp, sp, #8
   1aae8:	bx	lr
   1aaec:	bl	11580 <__stack_chk_fail@plt>
   1aaf0:	andeq	ip, r2, r0, lsl #30
   1aaf4:	cmp	r0, #2
   1aaf8:	push	{r4, r5, r6, r7, r8, lr}
   1aafc:	mov	r4, r0
   1ab00:	bls	1ab0c <fts_children@@Base+0x6f0>
   1ab04:	mov	r0, r4
   1ab08:	pop	{r4, r5, r6, r7, r8, pc}
   1ab0c:	bl	1ae24 <fts_children@@Base+0xa08>
   1ab10:	mov	r7, r0
   1ab14:	bl	1170c <__errno_location@plt>
   1ab18:	mov	r5, r0
   1ab1c:	mov	r0, r4
   1ab20:	ldr	r6, [r5]
   1ab24:	mov	r4, r7
   1ab28:	bl	11868 <close@plt>
   1ab2c:	str	r6, [r5]
   1ab30:	mov	r0, r4
   1ab34:	pop	{r4, r5, r6, r7, r8, pc}
   1ab38:	push	{r4, r5, lr}
   1ab3c:	sub	sp, sp, #12
   1ab40:	mov	r4, r0
   1ab44:	bl	1173c <fileno@plt>
   1ab48:	cmp	r0, #0
   1ab4c:	mov	r0, r4
   1ab50:	blt	1abcc <fts_children@@Base+0x7b0>
   1ab54:	bl	1167c <__freading@plt>
   1ab58:	cmp	r0, #0
   1ab5c:	bne	1ab98 <fts_children@@Base+0x77c>
   1ab60:	mov	r0, r4
   1ab64:	bl	1ad24 <fts_children@@Base+0x908>
   1ab68:	cmp	r0, #0
   1ab6c:	beq	1abc8 <fts_children@@Base+0x7ac>
   1ab70:	bl	1170c <__errno_location@plt>
   1ab74:	mov	r5, r0
   1ab78:	mov	r0, r4
   1ab7c:	ldr	r4, [r5]
   1ab80:	bl	11754 <fclose@plt>
   1ab84:	cmp	r4, #0
   1ab88:	mvnne	r0, #0
   1ab8c:	strne	r4, [r5]
   1ab90:	add	sp, sp, #12
   1ab94:	pop	{r4, r5, pc}
   1ab98:	mov	r0, r4
   1ab9c:	bl	1173c <fileno@plt>
   1aba0:	mov	r3, #1
   1aba4:	str	r3, [sp]
   1aba8:	mov	r2, #0
   1abac:	mov	r3, #0
   1abb0:	bl	115f8 <lseek64@plt>
   1abb4:	mvn	r3, #0
   1abb8:	mvn	r2, #0
   1abbc:	cmp	r1, r3
   1abc0:	cmpeq	r0, r2
   1abc4:	bne	1ab60 <fts_children@@Base+0x744>
   1abc8:	mov	r0, r4
   1abcc:	add	sp, sp, #12
   1abd0:	pop	{r4, r5, lr}
   1abd4:	b	11754 <fclose@plt>
   1abd8:	push	{r1, r2, r3}
   1abdc:	push	{r4, r5, r6, r7, r8, lr}
   1abe0:	sub	sp, sp, #12
   1abe4:	ldr	r4, [pc, #300]	; 1ad18 <fts_children@@Base+0x8fc>
   1abe8:	ldr	r3, [pc, #300]	; 1ad1c <fts_children@@Base+0x900>
   1abec:	ldr	r1, [sp, #36]	; 0x24
   1abf0:	ldr	r2, [r4]
   1abf4:	cmp	r1, r3
   1abf8:	add	r3, sp, #40	; 0x28
   1abfc:	str	r2, [sp, #4]
   1ac00:	str	r3, [sp]
   1ac04:	bne	1acd0 <fts_children@@Base+0x8b4>
   1ac08:	ldr	r6, [pc, #272]	; 1ad20 <fts_children@@Base+0x904>
   1ac0c:	add	r3, sp, #44	; 0x2c
   1ac10:	str	r3, [sp]
   1ac14:	ldr	r3, [r6]
   1ac18:	ldr	r7, [sp, #40]	; 0x28
   1ac1c:	cmp	r3, #0
   1ac20:	blt	1ac64 <fts_children@@Base+0x848>
   1ac24:	mov	r2, r7
   1ac28:	mov	r8, r0
   1ac2c:	bl	1176c <fcntl64@plt>
   1ac30:	subs	r5, r0, #0
   1ac34:	blt	1ace0 <fts_children@@Base+0x8c4>
   1ac38:	mov	r3, #1
   1ac3c:	str	r3, [r6]
   1ac40:	ldr	r2, [sp, #4]
   1ac44:	ldr	r3, [r4]
   1ac48:	mov	r0, r5
   1ac4c:	cmp	r2, r3
   1ac50:	bne	1ad14 <fts_children@@Base+0x8f8>
   1ac54:	add	sp, sp, #12
   1ac58:	pop	{r4, r5, r6, r7, r8, lr}
   1ac5c:	add	sp, sp, #12
   1ac60:	bx	lr
   1ac64:	mov	r2, r7
   1ac68:	mov	r1, #0
   1ac6c:	bl	1abd8 <fts_children@@Base+0x7bc>
   1ac70:	subs	r5, r0, #0
   1ac74:	blt	1ac40 <fts_children@@Base+0x824>
   1ac78:	ldr	r3, [r6]
   1ac7c:	cmn	r3, #1
   1ac80:	bne	1ac40 <fts_children@@Base+0x824>
   1ac84:	mov	r1, #1
   1ac88:	mov	r0, r5
   1ac8c:	bl	1176c <fcntl64@plt>
   1ac90:	subs	r2, r0, #0
   1ac94:	blt	1acb0 <fts_children@@Base+0x894>
   1ac98:	orr	r2, r2, #1
   1ac9c:	mov	r1, #2
   1aca0:	mov	r0, r5
   1aca4:	bl	1176c <fcntl64@plt>
   1aca8:	cmn	r0, #1
   1acac:	bne	1ac40 <fts_children@@Base+0x824>
   1acb0:	bl	1170c <__errno_location@plt>
   1acb4:	mov	r6, r0
   1acb8:	mov	r0, r5
   1acbc:	ldr	r7, [r6]
   1acc0:	mvn	r5, #0
   1acc4:	bl	11868 <close@plt>
   1acc8:	str	r7, [r6]
   1accc:	b	1ac40 <fts_children@@Base+0x824>
   1acd0:	ldr	r2, [sp, #40]	; 0x28
   1acd4:	bl	1176c <fcntl64@plt>
   1acd8:	mov	r5, r0
   1acdc:	b	1ac40 <fts_children@@Base+0x824>
   1ace0:	bl	1170c <__errno_location@plt>
   1ace4:	ldr	r3, [r0]
   1ace8:	cmp	r3, #22
   1acec:	bne	1ac38 <fts_children@@Base+0x81c>
   1acf0:	mov	r2, r7
   1acf4:	mov	r0, r8
   1acf8:	mov	r1, #0
   1acfc:	bl	1abd8 <fts_children@@Base+0x7bc>
   1ad00:	subs	r5, r0, #0
   1ad04:	mvnge	r3, #0
   1ad08:	strge	r3, [r6]
   1ad0c:	bge	1ac84 <fts_children@@Base+0x868>
   1ad10:	b	1ac40 <fts_children@@Base+0x824>
   1ad14:	bl	11580 <__stack_chk_fail@plt>
   1ad18:	andeq	ip, r2, r0, lsl #30
   1ad1c:	andeq	r0, r0, r6, lsl #8
   1ad20:	andeq	sp, r2, ip, lsl r3
   1ad24:	push	{r4, lr}
   1ad28:	subs	r4, r0, #0
   1ad2c:	sub	sp, sp, #8
   1ad30:	beq	1ad4c <fts_children@@Base+0x930>
   1ad34:	bl	1167c <__freading@plt>
   1ad38:	cmp	r0, #0
   1ad3c:	beq	1ad4c <fts_children@@Base+0x930>
   1ad40:	ldr	r3, [r4]
   1ad44:	tst	r3, #256	; 0x100
   1ad48:	bne	1ad5c <fts_children@@Base+0x940>
   1ad4c:	mov	r0, r4
   1ad50:	add	sp, sp, #8
   1ad54:	pop	{r4, lr}
   1ad58:	b	114fc <fflush@plt>
   1ad5c:	mov	r3, #1
   1ad60:	str	r3, [sp]
   1ad64:	mov	r2, #0
   1ad68:	mov	r3, #0
   1ad6c:	mov	r0, r4
   1ad70:	bl	1ad84 <fts_children@@Base+0x968>
   1ad74:	mov	r0, r4
   1ad78:	add	sp, sp, #8
   1ad7c:	pop	{r4, lr}
   1ad80:	b	114fc <fflush@plt>
   1ad84:	push	{r4, r5, r6, r7, r8, lr}
   1ad88:	sub	sp, sp, #8
   1ad8c:	ldmib	r0, {ip, lr}
   1ad90:	mov	r4, r0
   1ad94:	ldr	r5, [sp, #32]
   1ad98:	cmp	lr, ip
   1ad9c:	beq	1adb4 <fts_children@@Base+0x998>
   1ada0:	str	r5, [sp, #32]
   1ada4:	mov	r0, r4
   1ada8:	add	sp, sp, #8
   1adac:	pop	{r4, r5, r6, r7, r8, lr}
   1adb0:	b	11760 <fseeko64@plt>
   1adb4:	ldr	lr, [r0, #20]
   1adb8:	ldr	ip, [r0, #16]
   1adbc:	cmp	lr, ip
   1adc0:	bne	1ada0 <fts_children@@Base+0x984>
   1adc4:	ldr	r8, [r0, #36]	; 0x24
   1adc8:	cmp	r8, #0
   1adcc:	bne	1ada0 <fts_children@@Base+0x984>
   1add0:	mov	r6, r2
   1add4:	mov	r7, r3
   1add8:	bl	1173c <fileno@plt>
   1addc:	mov	r2, r6
   1ade0:	mov	r3, r7
   1ade4:	str	r5, [sp]
   1ade8:	bl	115f8 <lseek64@plt>
   1adec:	mvn	r3, #0
   1adf0:	mvn	r2, #0
   1adf4:	cmp	r1, r3
   1adf8:	cmpeq	r0, r2
   1adfc:	beq	1ae1c <fts_children@@Base+0xa00>
   1ae00:	ldr	r3, [r4]
   1ae04:	strd	r0, [r4, #80]	; 0x50
   1ae08:	mov	r0, r8
   1ae0c:	bic	r3, r3, #16
   1ae10:	str	r3, [r4]
   1ae14:	add	sp, sp, #8
   1ae18:	pop	{r4, r5, r6, r7, r8, pc}
   1ae1c:	mvn	r0, #0
   1ae20:	b	1ae14 <fts_children@@Base+0x9f8>
   1ae24:	mov	r2, #3
   1ae28:	mov	r1, #0
   1ae2c:	b	1abd8 <fts_children@@Base+0x7bc>
   1ae30:	subs	r2, r1, #1
   1ae34:	bxeq	lr
   1ae38:	bcc	1b010 <fts_children@@Base+0xbf4>
   1ae3c:	cmp	r0, r1
   1ae40:	bls	1aff4 <fts_children@@Base+0xbd8>
   1ae44:	tst	r1, r2
   1ae48:	beq	1b000 <fts_children@@Base+0xbe4>
   1ae4c:	clz	r3, r0
   1ae50:	clz	r2, r1
   1ae54:	sub	r3, r2, r3
   1ae58:	rsbs	r3, r3, #31
   1ae5c:	addne	r3, r3, r3, lsl #1
   1ae60:	mov	r2, #0
   1ae64:	addne	pc, pc, r3, lsl #2
   1ae68:	nop			; (mov r0, r0)
   1ae6c:	cmp	r0, r1, lsl #31
   1ae70:	adc	r2, r2, r2
   1ae74:	subcs	r0, r0, r1, lsl #31
   1ae78:	cmp	r0, r1, lsl #30
   1ae7c:	adc	r2, r2, r2
   1ae80:	subcs	r0, r0, r1, lsl #30
   1ae84:	cmp	r0, r1, lsl #29
   1ae88:	adc	r2, r2, r2
   1ae8c:	subcs	r0, r0, r1, lsl #29
   1ae90:	cmp	r0, r1, lsl #28
   1ae94:	adc	r2, r2, r2
   1ae98:	subcs	r0, r0, r1, lsl #28
   1ae9c:	cmp	r0, r1, lsl #27
   1aea0:	adc	r2, r2, r2
   1aea4:	subcs	r0, r0, r1, lsl #27
   1aea8:	cmp	r0, r1, lsl #26
   1aeac:	adc	r2, r2, r2
   1aeb0:	subcs	r0, r0, r1, lsl #26
   1aeb4:	cmp	r0, r1, lsl #25
   1aeb8:	adc	r2, r2, r2
   1aebc:	subcs	r0, r0, r1, lsl #25
   1aec0:	cmp	r0, r1, lsl #24
   1aec4:	adc	r2, r2, r2
   1aec8:	subcs	r0, r0, r1, lsl #24
   1aecc:	cmp	r0, r1, lsl #23
   1aed0:	adc	r2, r2, r2
   1aed4:	subcs	r0, r0, r1, lsl #23
   1aed8:	cmp	r0, r1, lsl #22
   1aedc:	adc	r2, r2, r2
   1aee0:	subcs	r0, r0, r1, lsl #22
   1aee4:	cmp	r0, r1, lsl #21
   1aee8:	adc	r2, r2, r2
   1aeec:	subcs	r0, r0, r1, lsl #21
   1aef0:	cmp	r0, r1, lsl #20
   1aef4:	adc	r2, r2, r2
   1aef8:	subcs	r0, r0, r1, lsl #20
   1aefc:	cmp	r0, r1, lsl #19
   1af00:	adc	r2, r2, r2
   1af04:	subcs	r0, r0, r1, lsl #19
   1af08:	cmp	r0, r1, lsl #18
   1af0c:	adc	r2, r2, r2
   1af10:	subcs	r0, r0, r1, lsl #18
   1af14:	cmp	r0, r1, lsl #17
   1af18:	adc	r2, r2, r2
   1af1c:	subcs	r0, r0, r1, lsl #17
   1af20:	cmp	r0, r1, lsl #16
   1af24:	adc	r2, r2, r2
   1af28:	subcs	r0, r0, r1, lsl #16
   1af2c:	cmp	r0, r1, lsl #15
   1af30:	adc	r2, r2, r2
   1af34:	subcs	r0, r0, r1, lsl #15
   1af38:	cmp	r0, r1, lsl #14
   1af3c:	adc	r2, r2, r2
   1af40:	subcs	r0, r0, r1, lsl #14
   1af44:	cmp	r0, r1, lsl #13
   1af48:	adc	r2, r2, r2
   1af4c:	subcs	r0, r0, r1, lsl #13
   1af50:	cmp	r0, r1, lsl #12
   1af54:	adc	r2, r2, r2
   1af58:	subcs	r0, r0, r1, lsl #12
   1af5c:	cmp	r0, r1, lsl #11
   1af60:	adc	r2, r2, r2
   1af64:	subcs	r0, r0, r1, lsl #11
   1af68:	cmp	r0, r1, lsl #10
   1af6c:	adc	r2, r2, r2
   1af70:	subcs	r0, r0, r1, lsl #10
   1af74:	cmp	r0, r1, lsl #9
   1af78:	adc	r2, r2, r2
   1af7c:	subcs	r0, r0, r1, lsl #9
   1af80:	cmp	r0, r1, lsl #8
   1af84:	adc	r2, r2, r2
   1af88:	subcs	r0, r0, r1, lsl #8
   1af8c:	cmp	r0, r1, lsl #7
   1af90:	adc	r2, r2, r2
   1af94:	subcs	r0, r0, r1, lsl #7
   1af98:	cmp	r0, r1, lsl #6
   1af9c:	adc	r2, r2, r2
   1afa0:	subcs	r0, r0, r1, lsl #6
   1afa4:	cmp	r0, r1, lsl #5
   1afa8:	adc	r2, r2, r2
   1afac:	subcs	r0, r0, r1, lsl #5
   1afb0:	cmp	r0, r1, lsl #4
   1afb4:	adc	r2, r2, r2
   1afb8:	subcs	r0, r0, r1, lsl #4
   1afbc:	cmp	r0, r1, lsl #3
   1afc0:	adc	r2, r2, r2
   1afc4:	subcs	r0, r0, r1, lsl #3
   1afc8:	cmp	r0, r1, lsl #2
   1afcc:	adc	r2, r2, r2
   1afd0:	subcs	r0, r0, r1, lsl #2
   1afd4:	cmp	r0, r1, lsl #1
   1afd8:	adc	r2, r2, r2
   1afdc:	subcs	r0, r0, r1, lsl #1
   1afe0:	cmp	r0, r1
   1afe4:	adc	r2, r2, r2
   1afe8:	subcs	r0, r0, r1
   1afec:	mov	r0, r2
   1aff0:	bx	lr
   1aff4:	moveq	r0, #1
   1aff8:	movne	r0, #0
   1affc:	bx	lr
   1b000:	clz	r2, r1
   1b004:	rsb	r2, r2, #31
   1b008:	lsr	r0, r0, r2
   1b00c:	bx	lr
   1b010:	cmp	r0, #0
   1b014:	mvnne	r0, #0
   1b018:	b	1b078 <fts_children@@Base+0xc5c>
   1b01c:	cmp	r1, #0
   1b020:	beq	1b010 <fts_children@@Base+0xbf4>
   1b024:	push	{r0, r1, lr}
   1b028:	bl	1ae30 <fts_children@@Base+0xa14>
   1b02c:	pop	{r1, r2, lr}
   1b030:	mul	r3, r2, r0
   1b034:	sub	r1, r1, r3
   1b038:	bx	lr
   1b03c:	cmp	r3, #0
   1b040:	cmpeq	r2, #0
   1b044:	bne	1b05c <fts_children@@Base+0xc40>
   1b048:	cmp	r1, #0
   1b04c:	cmpeq	r0, #0
   1b050:	mvnne	r1, #0
   1b054:	mvnne	r0, #0
   1b058:	b	1b078 <fts_children@@Base+0xc5c>
   1b05c:	sub	sp, sp, #8
   1b060:	push	{sp, lr}
   1b064:	bl	1b088 <fts_children@@Base+0xc6c>
   1b068:	ldr	lr, [sp, #4]
   1b06c:	add	sp, sp, #8
   1b070:	pop	{r2, r3}
   1b074:	bx	lr
   1b078:	push	{r1, lr}
   1b07c:	mov	r0, #8
   1b080:	bl	114cc <raise@plt>
   1b084:	pop	{r1, pc}
   1b088:	cmp	r1, r3
   1b08c:	cmpeq	r0, r2
   1b090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b094:	mov	r4, r0
   1b098:	movcc	r0, #0
   1b09c:	mov	r5, r1
   1b0a0:	ldr	lr, [sp, #36]	; 0x24
   1b0a4:	movcc	r1, r0
   1b0a8:	bcc	1b1a4 <fts_children@@Base+0xd88>
   1b0ac:	cmp	r3, #0
   1b0b0:	clzeq	ip, r2
   1b0b4:	clzne	ip, r3
   1b0b8:	addeq	ip, ip, #32
   1b0bc:	cmp	r5, #0
   1b0c0:	clzeq	r1, r4
   1b0c4:	addeq	r1, r1, #32
   1b0c8:	clzne	r1, r5
   1b0cc:	sub	ip, ip, r1
   1b0d0:	sub	sl, ip, #32
   1b0d4:	lsl	r9, r3, ip
   1b0d8:	rsb	fp, ip, #32
   1b0dc:	orr	r9, r9, r2, lsl sl
   1b0e0:	orr	r9, r9, r2, lsr fp
   1b0e4:	lsl	r8, r2, ip
   1b0e8:	cmp	r5, r9
   1b0ec:	cmpeq	r4, r8
   1b0f0:	movcc	r0, #0
   1b0f4:	movcc	r1, r0
   1b0f8:	bcc	1b114 <fts_children@@Base+0xcf8>
   1b0fc:	mov	r0, #1
   1b100:	subs	r4, r4, r8
   1b104:	lsl	r1, r0, sl
   1b108:	orr	r1, r1, r0, lsr fp
   1b10c:	lsl	r0, r0, ip
   1b110:	sbc	r5, r5, r9
   1b114:	cmp	ip, #0
   1b118:	beq	1b1a4 <fts_children@@Base+0xd88>
   1b11c:	lsr	r6, r8, #1
   1b120:	orr	r6, r6, r9, lsl #31
   1b124:	lsr	r7, r9, #1
   1b128:	mov	r2, ip
   1b12c:	b	1b150 <fts_children@@Base+0xd34>
   1b130:	subs	r3, r4, r6
   1b134:	sbc	r8, r5, r7
   1b138:	adds	r3, r3, r3
   1b13c:	adc	r8, r8, r8
   1b140:	adds	r4, r3, #1
   1b144:	adc	r5, r8, #0
   1b148:	subs	r2, r2, #1
   1b14c:	beq	1b16c <fts_children@@Base+0xd50>
   1b150:	cmp	r5, r7
   1b154:	cmpeq	r4, r6
   1b158:	bcs	1b130 <fts_children@@Base+0xd14>
   1b15c:	adds	r4, r4, r4
   1b160:	adc	r5, r5, r5
   1b164:	subs	r2, r2, #1
   1b168:	bne	1b150 <fts_children@@Base+0xd34>
   1b16c:	lsr	r3, r4, ip
   1b170:	orr	r3, r3, r5, lsl fp
   1b174:	lsr	r2, r5, ip
   1b178:	orr	r3, r3, r5, lsr sl
   1b17c:	adds	r0, r0, r4
   1b180:	mov	r4, r3
   1b184:	lsl	r3, r2, ip
   1b188:	orr	r3, r3, r4, lsl sl
   1b18c:	lsl	ip, r4, ip
   1b190:	orr	r3, r3, r4, lsr fp
   1b194:	adc	r1, r1, r5
   1b198:	subs	r0, r0, ip
   1b19c:	mov	r5, r2
   1b1a0:	sbc	r1, r1, r3
   1b1a4:	cmp	lr, #0
   1b1a8:	strdne	r4, [lr]
   1b1ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b1b4:	mov	r7, r0
   1b1b8:	ldr	r6, [pc, #72]	; 1b208 <fts_children@@Base+0xdec>
   1b1bc:	ldr	r5, [pc, #72]	; 1b20c <fts_children@@Base+0xdf0>
   1b1c0:	add	r6, pc, r6
   1b1c4:	add	r5, pc, r5
   1b1c8:	sub	r6, r6, r5
   1b1cc:	mov	r8, r1
   1b1d0:	mov	r9, r2
   1b1d4:	bl	11488 <fstatfs64@plt-0x20>
   1b1d8:	asrs	r6, r6, #2
   1b1dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b1e0:	mov	r4, #0
   1b1e4:	add	r4, r4, #1
   1b1e8:	ldr	r3, [r5], #4
   1b1ec:	mov	r2, r9
   1b1f0:	mov	r1, r8
   1b1f4:	mov	r0, r7
   1b1f8:	blx	r3
   1b1fc:	cmp	r6, r4
   1b200:	bne	1b1e4 <fts_children@@Base+0xdc8>
   1b204:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b208:	andeq	r1, r1, r4, lsr sp
   1b20c:	andeq	r1, r1, ip, lsr #26
   1b210:	bx	lr
   1b214:	ldr	r3, [pc, #12]	; 1b228 <fts_children@@Base+0xe0c>
   1b218:	mov	r1, #0
   1b21c:	add	r3, pc, r3
   1b220:	ldr	r2, [r3]
   1b224:	b	11718 <__cxa_atexit@plt>
   1b228:	andeq	r1, r1, ip, asr #30

Disassembly of section .fini:

0001b22c <.fini>:
   1b22c:	push	{r3, lr}
   1b230:	pop	{r3, pc}
