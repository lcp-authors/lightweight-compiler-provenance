
raspbian-preinstalled/systemd-id128:     file format elf32-littlearm


Disassembly of section .init:

00000a24 <.init>:
 a24:	push	{r3, lr}
 a28:	bl	ea4 <log_oom_internal@plt+0x304>
 a2c:	pop	{r3, pc}

Disassembly of section .plt:

00000a30 <sd_id128_get_machine_app_specific@plt-0x14>:
 a30:	push	{lr}		; (str lr, [sp, #-4]!)
 a34:	ldr	lr, [pc, #4]	; a40 <sd_id128_get_machine_app_specific@plt-0x4>
 a38:	add	lr, pc, lr
 a3c:	ldr	pc, [lr, #8]!
 a40:	andeq	r1, r1, ip, lsl #10

00000a44 <sd_id128_get_machine_app_specific@plt>:
 a44:	add	ip, pc, #0, 12
 a48:	add	ip, ip, #69632	; 0x11000
 a4c:	ldr	pc, [ip, #1292]!	; 0x50c

00000a50 <version@plt>:
 a50:	add	ip, pc, #0, 12
 a54:	add	ip, ip, #69632	; 0x11000
 a58:	ldr	pc, [ip, #1284]!	; 0x504

00000a5c <free@plt>:
 a5c:	add	ip, pc, #0, 12
 a60:	add	ip, ip, #69632	; 0x11000
 a64:	ldr	pc, [ip, #1276]!	; 0x4fc

00000a68 <id128_pretty_print@plt>:
 a68:	add	ip, pc, #0, 12
 a6c:	add	ip, ip, #69632	; 0x11000
 a70:	ldr	pc, [ip, #1268]!	; 0x4f4

00000a74 <log_open@plt>:
 a74:	add	ip, pc, #0, 12
 a78:	add	ip, ip, #69632	; 0x11000
 a7c:	ldr	pc, [ip, #1260]!	; 0x4ec

00000a80 <log_assert_failed_unreachable_realm@plt>:
 a80:	add	ip, pc, #0, 12
 a84:	add	ip, ip, #69632	; 0x11000
 a88:	ldr	pc, [ip, #1252]!	; 0x4e4

00000a8c <ask_password_agent_close@plt>:
 a8c:	add	ip, pc, #0, 12
 a90:	add	ip, ip, #69632	; 0x11000
 a94:	ldr	pc, [ip, #1244]!	; 0x4dc

00000a98 <polkit_agent_close@plt>:
 a98:	add	ip, pc, #0, 12
 a9c:	add	ip, ip, #69632	; 0x11000
 aa0:	ldr	pc, [ip, #1236]!	; 0x4d4

00000aa4 <mac_selinux_finish@plt>:
 aa4:	add	ip, pc, #0, 12
 aa8:	add	ip, ip, #69632	; 0x11000
 aac:	ldr	pc, [ip, #1228]!	; 0x4cc

00000ab0 <sd_id128_get_boot@plt>:
 ab0:	add	ip, pc, #0, 12
 ab4:	add	ip, ip, #69632	; 0x11000
 ab8:	ldr	pc, [ip, #1220]!	; 0x4c4

00000abc <sd_id128_from_string@plt>:
 abc:	add	ip, pc, #0, 12
 ac0:	add	ip, ip, #69632	; 0x11000
 ac4:	ldr	pc, [ip, #1212]!	; 0x4bc

00000ac8 <sd_id128_get_boot_app_specific@plt>:
 ac8:	add	ip, pc, #0, 12
 acc:	add	ip, ip, #69632	; 0x11000
 ad0:	ldr	pc, [ip, #1204]!	; 0x4b4

00000ad4 <log_get_max_level_realm@plt>:
 ad4:	add	ip, pc, #0, 12
 ad8:	add	ip, ip, #69632	; 0x11000
 adc:	ldr	pc, [ip, #1196]!	; 0x4ac

00000ae0 <id128_print_new@plt>:
 ae0:	add	ip, pc, #0, 12
 ae4:	add	ip, ip, #69632	; 0x11000
 ae8:	ldr	pc, [ip, #1188]!	; 0x4a4

00000aec <abort@plt>:
 aec:	add	ip, pc, #0, 12
 af0:	add	ip, ip, #69632	; 0x11000
 af4:	ldr	pc, [ip, #1180]!	; 0x49c

00000af8 <dispatch_verb@plt>:
 af8:	add	ip, pc, #0, 12
 afc:	add	ip, ip, #69632	; 0x11000
 b00:	ldr	pc, [ip, #1172]!	; 0x494

00000b04 <__stack_chk_fail@plt>:
 b04:	add	ip, pc, #0, 12
 b08:	add	ip, ip, #69632	; 0x11000
 b0c:	ldr	pc, [ip, #1164]!	; 0x48c

00000b10 <terminal_urlify_man@plt>:
 b10:	add	ip, pc, #0, 12
 b14:	add	ip, ip, #69632	; 0x11000
 b18:	ldr	pc, [ip, #1156]!	; 0x484

00000b1c <getopt_long@plt>:
 b1c:	add	ip, pc, #0, 12
 b20:	add	ip, ip, #69632	; 0x11000
 b24:	ldr	pc, [ip, #1148]!	; 0x47c

00000b28 <pager_close@plt>:
 b28:	add	ip, pc, #0, 12
 b2c:	add	ip, ip, #69632	; 0x11000
 b30:	ldr	pc, [ip, #1140]!	; 0x474

00000b34 <sd_id128_get_machine@plt>:
 b34:	add	ip, pc, #0, 12
 b38:	add	ip, ip, #69632	; 0x11000
 b3c:	ldr	pc, [ip, #1132]!	; 0x46c

00000b40 <log_parse_environment_realm@plt>:
 b40:	add	ip, pc, #0, 12
 b44:	add	ip, ip, #69632	; 0x11000
 b48:	ldr	pc, [ip, #1124]!	; 0x464

00000b4c <log_assert_failed_realm@plt>:
 b4c:	add	ip, pc, #0, 12
 b50:	add	ip, ip, #69632	; 0x11000
 b54:	ldr	pc, [ip, #1116]!	; 0x45c

00000b58 <sd_id128_get_invocation@plt>:
 b58:	add	ip, pc, #0, 12
 b5c:	add	ip, ip, #69632	; 0x11000
 b60:	ldr	pc, [ip, #1108]!	; 0x454

00000b64 <log_internal_realm@plt>:
 b64:	add	ip, pc, #0, 12
 b68:	add	ip, ip, #69632	; 0x11000
 b6c:	ldr	pc, [ip, #1100]!	; 0x44c

00000b70 <__libc_start_main@plt>:
 b70:	add	ip, pc, #0, 12
 b74:	add	ip, ip, #69632	; 0x11000
 b78:	ldr	pc, [ip, #1092]!	; 0x444

00000b7c <__gmon_start__@plt>:
 b7c:	add	ip, pc, #0, 12
 b80:	add	ip, ip, #69632	; 0x11000
 b84:	ldr	pc, [ip, #1084]!	; 0x43c

00000b88 <__cxa_finalize@plt>:
 b88:	add	ip, pc, #0, 12
 b8c:	add	ip, ip, #69632	; 0x11000
 b90:	ldr	pc, [ip, #1076]!	; 0x434

00000b94 <__printf_chk@plt>:
 b94:	add	ip, pc, #0, 12
 b98:	add	ip, ip, #69632	; 0x11000
 b9c:	ldr	pc, [ip, #1068]!	; 0x42c

00000ba0 <log_oom_internal@plt>:
 ba0:	add	ip, pc, #0, 12
 ba4:	add	ip, ip, #69632	; 0x11000
 ba8:	ldr	pc, [ip, #1060]!	; 0x424

Disassembly of section .text:

00000bac <.text>:
     bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bb0:	mov	r4, r0
     bb4:	sub	sp, sp, #28
     bb8:	mov	r0, #0
     bbc:	ldr	r7, [pc, #564]	; df8 <log_oom_internal@plt+0x258>
     bc0:	mov	r5, r1
     bc4:	bl	b40 <log_parse_environment_realm@plt>
     bc8:	bl	a74 <log_open@plt>
     bcc:	cmp	r4, #0
     bd0:	add	r7, pc, r7
     bd4:	blt	d74 <log_oom_internal@plt+0x1d4>
     bd8:	cmp	r5, #0
     bdc:	beq	da0 <log_oom_internal@plt+0x200>
     be0:	ldr	r9, [pc, #532]	; dfc <log_oom_internal@plt+0x25c>
     be4:	ldr	r8, [pc, #532]	; e00 <log_oom_internal@plt+0x260>
     be8:	ldr	sl, [pc, #532]	; e04 <log_oom_internal@plt+0x264>
     bec:	add	r9, pc, r9
     bf0:	add	r8, pc, r8
     bf4:	add	sl, pc, sl
     bf8:	mov	r6, #0
     bfc:	str	r6, [sp]
     c00:	mov	r3, r9
     c04:	mov	r2, r8
     c08:	mov	r1, r5
     c0c:	mov	r0, r4
     c10:	bl	b1c <getopt_long@plt>
     c14:	cmp	r0, #0
     c18:	blt	cdc <log_oom_internal@plt+0x13c>
     c1c:	cmp	r0, #104	; 0x68
     c20:	beq	d68 <log_oom_internal@plt+0x1c8>
     c24:	bgt	cbc <log_oom_internal@plt+0x11c>
     c28:	cmp	r0, #63	; 0x3f
     c2c:	beq	d54 <log_oom_internal@plt+0x1b4>
     c30:	cmp	r0, #97	; 0x61
     c34:	bne	dcc <log_oom_internal@plt+0x22c>
     c38:	ldr	r3, [pc, #456]	; e08 <log_oom_internal@plt+0x268>
     c3c:	ldr	r1, [pc, #456]	; e0c <log_oom_internal@plt+0x26c>
     c40:	ldr	fp, [r7, r3]
     c44:	add	r1, pc, r1
     c48:	ldr	r0, [fp]
     c4c:	bl	abc <sd_id128_from_string@plt>
     c50:	subs	r1, r0, #0
     c54:	bge	bf8 <log_oom_internal@plt+0x58>
     c58:	mov	r0, r6
     c5c:	str	r1, [sp, #20]
     c60:	bl	ad4 <log_get_max_level_realm@plt>
     c64:	ldr	r1, [sp, #20]
     c68:	cmp	r0, #2
     c6c:	rsble	r6, r1, #0
     c70:	uxtble	r6, r6
     c74:	rsble	r6, r6, #0
     c78:	ble	cfc <log_oom_internal@plt+0x15c>
     c7c:	ldr	r2, [pc, #396]	; e10 <log_oom_internal@plt+0x270>
     c80:	ldr	r3, [pc, #396]	; e14 <log_oom_internal@plt+0x274>
     c84:	add	r2, pc, r2
     c88:	ldr	r0, [fp]
     c8c:	add	r3, pc, r3
     c90:	str	r2, [sp, #4]
     c94:	ldr	r2, [pc, #380]	; e18 <log_oom_internal@plt+0x278>
     c98:	add	r3, r3, #72	; 0x48
     c9c:	str	r0, [sp, #8]
     ca0:	str	r3, [sp]
     ca4:	add	r2, pc, r2
     ca8:	mov	r3, #129	; 0x81
     cac:	mov	r0, #3
     cb0:	bl	b64 <log_internal_realm@plt>
     cb4:	mov	r6, r0
     cb8:	b	cd4 <log_oom_internal@plt+0x134>
     cbc:	cmp	r0, #112	; 0x70
     cc0:	beq	d5c <log_oom_internal@plt+0x1bc>
     cc4:	cmp	r0, #256	; 0x100
     cc8:	bne	dcc <log_oom_internal@plt+0x22c>
     ccc:	bl	a50 <version@plt>
     cd0:	mov	r6, r0
     cd4:	cmp	r6, #0
     cd8:	ble	cfc <log_oom_internal@plt+0x15c>
     cdc:	ldr	r2, [pc, #312]	; e1c <log_oom_internal@plt+0x27c>
     ce0:	mov	r1, r5
     ce4:	add	r2, pc, r2
     ce8:	mov	r0, r4
     cec:	add	r2, r2, #64	; 0x40
     cf0:	mov	r3, #0
     cf4:	bl	af8 <dispatch_verb@plt>
     cf8:	mov	r6, r0
     cfc:	ldr	r3, [pc, #284]	; e20 <log_oom_internal@plt+0x280>
     d00:	ldr	r4, [r7, r3]
     d04:	cmp	r4, #0
     d08:	beq	d38 <log_oom_internal@plt+0x198>
     d0c:	ldr	r3, [pc, #272]	; e24 <log_oom_internal@plt+0x284>
     d10:	add	r4, r4, #3
     d14:	bic	r4, r4, #3
     d18:	ldr	r5, [r7, r3]
     d1c:	cmp	r4, r5
     d20:	bcs	d38 <log_oom_internal@plt+0x198>
     d24:	ldm	r4, {r0, r3}
     d28:	add	r4, r4, #8
     d2c:	blx	r3
     d30:	cmp	r4, r5
     d34:	bcc	d24 <log_oom_internal@plt+0x184>
     d38:	bl	a8c <ask_password_agent_close@plt>
     d3c:	bl	a98 <polkit_agent_close@plt>
     d40:	bl	aa4 <mac_selinux_finish@plt>
     d44:	bl	b28 <pager_close@plt>
     d48:	lsr	r0, r6, #31
     d4c:	add	sp, sp, #28
     d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d54:	mvn	r6, #21
     d58:	b	cfc <log_oom_internal@plt+0x15c>
     d5c:	mov	r3, #1
     d60:	strb	r3, [sl, #16]
     d64:	b	bf8 <log_oom_internal@plt+0x58>
     d68:	bl	fc8 <log_oom_internal@plt+0x428>
     d6c:	mov	r6, r0
     d70:	b	cd4 <log_oom_internal@plt+0x134>
     d74:	ldr	r2, [pc, #172]	; e28 <log_oom_internal@plt+0x288>
     d78:	ldr	r1, [pc, #172]	; e2c <log_oom_internal@plt+0x28c>
     d7c:	add	r2, pc, r2
     d80:	add	r2, r2, #60	; 0x3c
     d84:	str	r2, [sp]
     d88:	ldr	r2, [pc, #160]	; e30 <log_oom_internal@plt+0x290>
     d8c:	mov	r3, #110	; 0x6e
     d90:	add	r2, pc, r2
     d94:	add	r1, pc, r1
     d98:	mov	r0, #0
     d9c:	bl	b4c <log_assert_failed_realm@plt>
     da0:	ldr	r3, [pc, #140]	; e34 <log_oom_internal@plt+0x294>
     da4:	ldr	r2, [pc, #140]	; e38 <log_oom_internal@plt+0x298>
     da8:	add	r3, pc, r3
     dac:	ldr	r1, [pc, #136]	; e3c <log_oom_internal@plt+0x29c>
     db0:	add	r3, r3, #60	; 0x3c
     db4:	str	r3, [sp]
     db8:	mov	r0, r5
     dbc:	mov	r3, #111	; 0x6f
     dc0:	add	r2, pc, r2
     dc4:	add	r1, pc, r1
     dc8:	bl	b4c <log_assert_failed_realm@plt>
     dcc:	ldr	r2, [pc, #108]	; e40 <log_oom_internal@plt+0x2a0>
     dd0:	ldr	r1, [pc, #108]	; e44 <log_oom_internal@plt+0x2a4>
     dd4:	add	r2, pc, r2
     dd8:	add	r2, r2, #60	; 0x3c
     ddc:	str	r2, [sp]
     de0:	ldr	r2, [pc, #96]	; e48 <log_oom_internal@plt+0x2a8>
     de4:	mov	r3, #136	; 0x88
     de8:	add	r2, pc, r2
     dec:	add	r1, pc, r1
     df0:	mov	r0, #0
     df4:	bl	a80 <log_assert_failed_unreachable_realm@plt>
     df8:	andeq	r1, r1, r4, ror r3
     dfc:	muleq	r1, r0, r1
     e00:	andeq	r0, r0, ip, lsr #25
     e04:	andeq	r1, r1, r4, lsl r4
     e08:	andeq	r0, r0, ip, lsl #1
     e0c:	andeq	r1, r1, r4, asr #7
     e10:	ldrdeq	r0, [r0], -r8
     e14:	andeq	r0, r0, r4, lsl #17
     e18:	ldrdeq	r0, [r0], -r4
     e1c:	muleq	r1, r8, r0
     e20:	muleq	r0, r0, r0
     e24:	muleq	r0, r4, r0
     e28:	muleq	r0, r4, r7
     e2c:			; <UNDEFINED> instruction: 0x00000ab4
     e30:	andeq	r0, r0, r8, ror #15
     e34:	andeq	r0, r0, r8, ror #14
     e38:			; <UNDEFINED> instruction: 0x000007b8
     e3c:	muleq	r0, r0, sl
     e40:	andeq	r0, r0, ip, lsr r7
     e44:	muleq	r0, ip, sl
     e48:	muleq	r0, r0, r7
     e4c:	mov	fp, #0
     e50:	mov	lr, #0
     e54:	pop	{r1}		; (ldr r1, [sp], #4)
     e58:	mov	r2, sp
     e5c:	push	{r2}		; (str r2, [sp, #-4]!)
     e60:	push	{r0}		; (str r0, [sp, #-4]!)
     e64:	ldr	sl, [pc, #40]	; e94 <log_oom_internal@plt+0x2f4>
     e68:	add	r3, pc, #36	; 0x24
     e6c:	add	sl, sl, r3
     e70:	ldr	ip, [pc, #32]	; e98 <log_oom_internal@plt+0x2f8>
     e74:	ldr	ip, [sl, ip]
     e78:	push	{ip}		; (str ip, [sp, #-4]!)
     e7c:	ldr	r3, [pc, #24]	; e9c <log_oom_internal@plt+0x2fc>
     e80:	ldr	r3, [sl, r3]
     e84:	ldr	r0, [pc, #20]	; ea0 <log_oom_internal@plt+0x300>
     e88:	ldr	r0, [sl, r0]
     e8c:	bl	b70 <__libc_start_main@plt>
     e90:	bl	aec <abort@plt>
     e94:	strheq	r1, [r1], -r8
     e98:	andeq	r0, r0, r0, lsr #1
     e9c:	muleq	r0, r8, r0
     ea0:	andeq	r0, r0, r8, lsl #1
     ea4:	ldr	r3, [pc, #20]	; ec0 <log_oom_internal@plt+0x320>
     ea8:	ldr	r2, [pc, #20]	; ec4 <log_oom_internal@plt+0x324>
     eac:	add	r3, pc, r3
     eb0:	ldr	r2, [r3, r2]
     eb4:	cmp	r2, #0
     eb8:	bxeq	lr
     ebc:	b	b7c <__gmon_start__@plt>
     ec0:	muleq	r1, r8, r0
     ec4:	andeq	r0, r0, r8, lsr #1
     ec8:	ldr	r0, [pc, #44]	; efc <log_oom_internal@plt+0x35c>
     ecc:	ldr	r3, [pc, #44]	; f00 <log_oom_internal@plt+0x360>
     ed0:	add	r0, pc, r0
     ed4:	add	r3, pc, r3
     ed8:	cmp	r3, r0
     edc:	ldr	r3, [pc, #32]	; f04 <log_oom_internal@plt+0x364>
     ee0:	add	r3, pc, r3
     ee4:	bxeq	lr
     ee8:	ldr	r2, [pc, #24]	; f08 <log_oom_internal@plt+0x368>
     eec:	ldr	r3, [r3, r2]
     ef0:	cmp	r3, #0
     ef4:	bxeq	lr
     ef8:	bx	r3
     efc:	andeq	r1, r1, ip, lsr #2
     f00:	andeq	r1, r1, r8, lsr #2
     f04:	andeq	r1, r1, r4, rrx
     f08:	muleq	r0, ip, r0
     f0c:	ldr	r0, [pc, #56]	; f4c <log_oom_internal@plt+0x3ac>
     f10:	ldr	r3, [pc, #56]	; f50 <log_oom_internal@plt+0x3b0>
     f14:	add	r0, pc, r0
     f18:	add	r3, pc, r3
     f1c:	sub	r1, r3, r0
     f20:	ldr	r3, [pc, #44]	; f54 <log_oom_internal@plt+0x3b4>
     f24:	asr	r1, r1, #2
     f28:	add	r3, pc, r3
     f2c:	add	r1, r1, r1, lsr #31
     f30:	asrs	r1, r1, #1
     f34:	bxeq	lr
     f38:	ldr	r2, [pc, #24]	; f58 <log_oom_internal@plt+0x3b8>
     f3c:	ldr	r3, [r3, r2]
     f40:	cmp	r3, #0
     f44:	bxeq	lr
     f48:	bx	r3
     f4c:	andeq	r1, r1, r8, ror #1
     f50:	andeq	r1, r1, r4, ror #1
     f54:	andeq	r1, r1, ip, lsl r0
     f58:	andeq	r0, r0, ip, lsr #1
     f5c:	ldr	r3, [pc, #76]	; fb0 <log_oom_internal@plt+0x410>
     f60:	ldr	r2, [pc, #76]	; fb4 <log_oom_internal@plt+0x414>
     f64:	add	r3, pc, r3
     f68:	add	r2, pc, r2
     f6c:	ldrb	r3, [r3]
     f70:	cmp	r3, #0
     f74:	bxne	lr
     f78:	ldr	r3, [pc, #56]	; fb8 <log_oom_internal@plt+0x418>
     f7c:	push	{r4, lr}
     f80:	ldr	r3, [r2, r3]
     f84:	cmp	r3, #0
     f88:	beq	f98 <log_oom_internal@plt+0x3f8>
     f8c:	ldr	r3, [pc, #40]	; fbc <log_oom_internal@plt+0x41c>
     f90:	ldr	r0, [pc, r3]
     f94:	bl	b88 <__cxa_finalize@plt>
     f98:	bl	ec8 <log_oom_internal@plt+0x328>
     f9c:	ldr	r3, [pc, #28]	; fc0 <log_oom_internal@plt+0x420>
     fa0:	mov	r2, #1
     fa4:	add	r3, pc, r3
     fa8:	strb	r2, [r3]
     fac:	pop	{r4, pc}
     fb0:	muleq	r1, ip, r0
     fb4:	ldrdeq	r0, [r1], -ip
     fb8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     fbc:	andeq	r1, r1, r8, rrx
     fc0:	andeq	r1, r1, ip, asr r0
     fc4:	b	f0c <log_oom_internal@plt+0x36c>
     fc8:	push	{r4, r5, r6, lr}
     fcc:	sub	sp, sp, #8
     fd0:	ldr	r5, [pc, #164]	; 107c <log_oom_internal@plt+0x4dc>
     fd4:	ldr	r3, [pc, #164]	; 1080 <log_oom_internal@plt+0x4e0>
     fd8:	add	r5, pc, r5
     fdc:	add	r2, sp, #8
     fe0:	ldr	r6, [r5, r3]
     fe4:	ldr	r1, [pc, #152]	; 1084 <log_oom_internal@plt+0x4e4>
     fe8:	ldr	r0, [pc, #152]	; 1088 <log_oom_internal@plt+0x4e8>
     fec:	mov	r4, #0
     ff0:	ldr	r3, [r6]
     ff4:	add	r1, pc, r1
     ff8:	str	r4, [r2, #-8]!
     ffc:	add	r0, pc, r0
    1000:	str	r3, [sp, #4]
    1004:	bl	b10 <terminal_urlify_man@plt>
    1008:	cmp	r0, r4
    100c:	blt	1054 <log_oom_internal@plt+0x4b4>
    1010:	ldr	r2, [pc, #116]	; 108c <log_oom_internal@plt+0x4ec>
    1014:	ldr	r1, [pc, #116]	; 1090 <log_oom_internal@plt+0x4f0>
    1018:	ldr	r3, [sp]
    101c:	ldr	r2, [r5, r2]
    1020:	add	r1, pc, r1
    1024:	mov	r0, #1
    1028:	ldr	r2, [r2]
    102c:	bl	b94 <__printf_chk@plt>
    1030:	ldr	r0, [sp]
    1034:	bl	a5c <free@plt>
    1038:	ldr	r2, [sp, #4]
    103c:	ldr	r3, [r6]
    1040:	mov	r0, r4
    1044:	cmp	r2, r3
    1048:	bne	1078 <log_oom_internal@plt+0x4d8>
    104c:	add	sp, sp, #8
    1050:	pop	{r4, r5, r6, pc}
    1054:	ldr	r3, [pc, #56]	; 1094 <log_oom_internal@plt+0x4f4>
    1058:	ldr	r1, [pc, #56]	; 1098 <log_oom_internal@plt+0x4f8>
    105c:	mov	r0, r4
    1060:	add	r3, pc, r3
    1064:	mov	r2, #71	; 0x47
    1068:	add	r1, pc, r1
    106c:	bl	ba0 <log_oom_internal@plt>
    1070:	mov	r4, r0
    1074:	b	1030 <log_oom_internal@plt+0x490>
    1078:	bl	b04 <__stack_chk_fail@plt>
    107c:	andeq	r0, r1, ip, ror #30
    1080:	andeq	r0, r0, r4, lsl #1
    1084:	andeq	r0, r0, r0, ror r5
    1088:	andeq	r0, r0, ip, ror #10
    108c:	andeq	r0, r0, r4, lsr #1
    1090:	andeq	r0, r0, r0, ror r5
    1094:			; <UNDEFINED> instruction: 0x000004b0
    1098:	andeq	r0, r0, r0, lsl r5
    109c:	b	fc8 <log_oom_internal@plt+0x428>
    10a0:	push	{r4, r5, r6, r7, lr}
    10a4:	sub	sp, sp, #36	; 0x24
    10a8:	ldr	r3, [pc, #276]	; 11c4 <log_oom_internal@plt+0x624>
    10ac:	ldr	r5, [pc, #276]	; 11c8 <log_oom_internal@plt+0x628>
    10b0:	ldr	r2, [pc, #276]	; 11cc <log_oom_internal@plt+0x62c>
    10b4:	add	r3, pc, r3
    10b8:	add	r5, pc, r5
    10bc:	ldr	r4, [r3, r2]
    10c0:	ldrd	r0, [r5]
    10c4:	ldrd	r2, [r5, #8]
    10c8:	ldr	ip, [r4]
    10cc:	orr	r6, r2, r0
    10d0:	orr	r7, r3, r1
    10d4:	orrs	r3, r6, r7
    10d8:	str	ip, [sp, #28]
    10dc:	beq	113c <log_oom_internal@plt+0x59c>
    10e0:	mov	r0, #0
    10e4:	bl	ad4 <log_get_max_level_realm@plt>
    10e8:	cmp	r0, #2
    10ec:	ble	11b8 <log_oom_internal@plt+0x618>
    10f0:	ldr	r2, [pc, #216]	; 11d0 <log_oom_internal@plt+0x630>
    10f4:	ldr	r3, [pc, #216]	; 11d4 <log_oom_internal@plt+0x634>
    10f8:	add	r2, pc, r2
    10fc:	add	r3, pc, r3
    1100:	str	r2, [sp, #4]
    1104:	ldr	r2, [pc, #204]	; 11d8 <log_oom_internal@plt+0x638>
    1108:	add	r3, r3, #8
    110c:	str	r3, [sp]
    1110:	add	r2, pc, r2
    1114:	mov	r3, #56	; 0x38
    1118:	mov	r1, #1073741846	; 0x40000016
    111c:	mov	r0, #3
    1120:	bl	b64 <log_internal_realm@plt>
    1124:	ldr	r2, [sp, #28]
    1128:	ldr	r3, [r4]
    112c:	cmp	r2, r3
    1130:	bne	11c0 <log_oom_internal@plt+0x620>
    1134:	add	sp, sp, #36	; 0x24
    1138:	pop	{r4, r5, r6, r7, pc}
    113c:	add	r7, sp, #8
    1140:	mov	r0, r7
    1144:	bl	b58 <sd_id128_get_invocation@plt>
    1148:	subs	r6, r0, #0
    114c:	bge	11a4 <log_oom_internal@plt+0x604>
    1150:	mov	r0, #0
    1154:	bl	ad4 <log_get_max_level_realm@plt>
    1158:	cmp	r0, #2
    115c:	rsble	r0, r6, #0
    1160:	uxtble	r0, r0
    1164:	rsble	r0, r0, #0
    1168:	ble	1124 <log_oom_internal@plt+0x584>
    116c:	ldr	r2, [pc, #104]	; 11dc <log_oom_internal@plt+0x63c>
    1170:	ldr	r3, [pc, #104]	; 11e0 <log_oom_internal@plt+0x640>
    1174:	add	r2, pc, r2
    1178:	str	r2, [sp, #4]
    117c:	add	r3, pc, r3
    1180:	ldr	r2, [pc, #92]	; 11e4 <log_oom_internal@plt+0x644>
    1184:	add	r3, r3, #8
    1188:	str	r3, [sp]
    118c:	mov	r1, r6
    1190:	mov	r3, #60	; 0x3c
    1194:	add	r2, pc, r2
    1198:	mov	r0, #3
    119c:	bl	b64 <log_internal_realm@plt>
    11a0:	b	1124 <log_oom_internal@plt+0x584>
    11a4:	ldrb	ip, [r5, #16]
    11a8:	ldm	r7, {r0, r1, r2, r3}
    11ac:	str	ip, [sp]
    11b0:	bl	a68 <id128_pretty_print@plt>
    11b4:	b	1124 <log_oom_internal@plt+0x584>
    11b8:	mvn	r0, #21
    11bc:	b	1124 <log_oom_internal@plt+0x584>
    11c0:	bl	b04 <__stack_chk_fail@plt>
    11c4:	muleq	r1, r0, lr
    11c8:	andeq	r0, r1, r0, asr pc
    11cc:	andeq	r0, r0, r4, lsl #1
    11d0:	andeq	r0, r0, r4, asr #13
    11d4:	andeq	r0, r0, r4, lsl r4
    11d8:	andeq	r0, r0, r8, ror #8
    11dc:	andeq	r0, r0, r8, lsr #12
    11e0:	muleq	r0, r4, r3
    11e4:	andeq	r0, r0, r4, ror #7
    11e8:	ldr	r2, [pc, #296]	; 1318 <log_oom_internal@plt+0x778>
    11ec:	ldr	r3, [pc, #296]	; 131c <log_oom_internal@plt+0x77c>
    11f0:	ldr	r1, [pc, #296]	; 1320 <log_oom_internal@plt+0x780>
    11f4:	add	r2, pc, r2
    11f8:	add	r3, pc, r3
    11fc:	push	{r4, r5, r6, r8, r9, lr}
    1200:	sub	sp, sp, #40	; 0x28
    1204:	ldr	r6, [r2, r1]
    1208:	ldrd	r4, [r3]
    120c:	ldrd	r0, [r3, #8]
    1210:	ldr	r2, [r6]
    1214:	orr	r9, r1, r5
    1218:	orr	r8, r0, r4
    121c:	orrs	r1, r8, r9
    1220:	add	r5, sp, #16
    1224:	str	r2, [sp, #36]	; 0x24
    1228:	beq	12f8 <log_oom_internal@plt+0x758>
    122c:	str	r5, [sp]
    1230:	ldm	r3, {r0, r1, r2, r3}
    1234:	bl	ac8 <sd_id128_get_boot_app_specific@plt>
    1238:	mov	r4, r0
    123c:	cmp	r4, #0
    1240:	bge	12dc <log_oom_internal@plt+0x73c>
    1244:	mov	r0, #0
    1248:	bl	ad4 <log_get_max_level_realm@plt>
    124c:	cmp	r0, #2
    1250:	ble	12cc <log_oom_internal@plt+0x72c>
    1254:	ldr	r1, [pc, #200]	; 1324 <log_oom_internal@plt+0x784>
    1258:	add	r1, pc, r1
    125c:	ldrd	r2, [r1, #8]
    1260:	ldrd	r0, [r1]
    1264:	orr	r8, r2, r0
    1268:	orr	r9, r3, r1
    126c:	orrs	r3, r8, r9
    1270:	beq	1308 <log_oom_internal@plt+0x768>
    1274:	ldr	r1, [pc, #172]	; 1328 <log_oom_internal@plt+0x788>
    1278:	add	r1, pc, r1
    127c:	ldr	r2, [pc, #168]	; 132c <log_oom_internal@plt+0x78c>
    1280:	ldr	r3, [pc, #168]	; 1330 <log_oom_internal@plt+0x790>
    1284:	add	r2, pc, r2
    1288:	add	r3, pc, r3
    128c:	str	r2, [sp, #4]
    1290:	ldr	r2, [pc, #156]	; 1334 <log_oom_internal@plt+0x794>
    1294:	add	r3, r3, #28
    1298:	str	r1, [sp, #8]
    129c:	str	r3, [sp]
    12a0:	mov	r1, r4
    12a4:	mov	r3, #45	; 0x2d
    12a8:	add	r2, pc, r2
    12ac:	mov	r0, #3
    12b0:	bl	b64 <log_internal_realm@plt>
    12b4:	ldr	r2, [sp, #36]	; 0x24
    12b8:	ldr	r3, [r6]
    12bc:	cmp	r2, r3
    12c0:	bne	1314 <log_oom_internal@plt+0x774>
    12c4:	add	sp, sp, #40	; 0x28
    12c8:	pop	{r4, r5, r6, r8, r9, pc}
    12cc:	rsb	r0, r4, #0
    12d0:	uxtb	r0, r0
    12d4:	rsb	r0, r0, #0
    12d8:	b	12b4 <log_oom_internal@plt+0x714>
    12dc:	ldr	ip, [pc, #84]	; 1338 <log_oom_internal@plt+0x798>
    12e0:	ldm	r5, {r0, r1, r2, r3}
    12e4:	add	ip, pc, ip
    12e8:	ldrb	ip, [ip, #16]
    12ec:	str	ip, [sp]
    12f0:	bl	a68 <id128_pretty_print@plt>
    12f4:	b	12b4 <log_oom_internal@plt+0x714>
    12f8:	mov	r0, r5
    12fc:	bl	ab0 <sd_id128_get_boot@plt>
    1300:	mov	r4, r0
    1304:	b	123c <log_oom_internal@plt+0x69c>
    1308:	ldr	r1, [pc, #44]	; 133c <log_oom_internal@plt+0x79c>
    130c:	add	r1, pc, r1
    1310:	b	127c <log_oom_internal@plt+0x6dc>
    1314:	bl	b04 <__stack_chk_fail@plt>
    1318:	andeq	r0, r1, r0, asr sp
    131c:	andeq	r0, r1, r0, lsl lr
    1320:	andeq	r0, r0, r4, lsl #1
    1324:			; <UNDEFINED> instruction: 0x00010db0
    1328:	andeq	r0, r0, r4, lsl #11
    132c:	andeq	r0, r0, r8, lsl #11
    1330:	andeq	r0, r0, r8, lsl #5
    1334:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1338:	andeq	r0, r1, r4, lsr #26
    133c:	muleq	r0, r4, r5
    1340:	ldr	r2, [pc, #296]	; 1470 <log_oom_internal@plt+0x8d0>
    1344:	ldr	r3, [pc, #296]	; 1474 <log_oom_internal@plt+0x8d4>
    1348:	ldr	r1, [pc, #296]	; 1478 <log_oom_internal@plt+0x8d8>
    134c:	add	r2, pc, r2
    1350:	add	r3, pc, r3
    1354:	push	{r4, r5, r6, r8, r9, lr}
    1358:	sub	sp, sp, #40	; 0x28
    135c:	ldr	r6, [r2, r1]
    1360:	ldrd	r4, [r3]
    1364:	ldrd	r0, [r3, #8]
    1368:	ldr	r2, [r6]
    136c:	orr	r9, r1, r5
    1370:	orr	r8, r0, r4
    1374:	orrs	r1, r8, r9
    1378:	add	r5, sp, #16
    137c:	str	r2, [sp, #36]	; 0x24
    1380:	beq	1450 <log_oom_internal@plt+0x8b0>
    1384:	str	r5, [sp]
    1388:	ldm	r3, {r0, r1, r2, r3}
    138c:	bl	a44 <sd_id128_get_machine_app_specific@plt>
    1390:	mov	r4, r0
    1394:	cmp	r4, #0
    1398:	bge	1434 <log_oom_internal@plt+0x894>
    139c:	mov	r0, #0
    13a0:	bl	ad4 <log_get_max_level_realm@plt>
    13a4:	cmp	r0, #2
    13a8:	ble	1424 <log_oom_internal@plt+0x884>
    13ac:	ldr	r1, [pc, #200]	; 147c <log_oom_internal@plt+0x8dc>
    13b0:	add	r1, pc, r1
    13b4:	ldrd	r2, [r1, #8]
    13b8:	ldrd	r0, [r1]
    13bc:	orr	r8, r2, r0
    13c0:	orr	r9, r3, r1
    13c4:	orrs	r3, r8, r9
    13c8:	beq	1460 <log_oom_internal@plt+0x8c0>
    13cc:	ldr	r1, [pc, #172]	; 1480 <log_oom_internal@plt+0x8e0>
    13d0:	add	r1, pc, r1
    13d4:	ldr	r2, [pc, #168]	; 1484 <log_oom_internal@plt+0x8e4>
    13d8:	ldr	r3, [pc, #168]	; 1488 <log_oom_internal@plt+0x8e8>
    13dc:	add	r2, pc, r2
    13e0:	add	r3, pc, r3
    13e4:	str	r2, [sp, #4]
    13e8:	ldr	r2, [pc, #156]	; 148c <log_oom_internal@plt+0x8ec>
    13ec:	add	r3, r3, #44	; 0x2c
    13f0:	str	r1, [sp, #8]
    13f4:	str	r3, [sp]
    13f8:	mov	r1, r4
    13fc:	mov	r3, #30
    1400:	add	r2, pc, r2
    1404:	mov	r0, #3
    1408:	bl	b64 <log_internal_realm@plt>
    140c:	ldr	r2, [sp, #36]	; 0x24
    1410:	ldr	r3, [r6]
    1414:	cmp	r2, r3
    1418:	bne	146c <log_oom_internal@plt+0x8cc>
    141c:	add	sp, sp, #40	; 0x28
    1420:	pop	{r4, r5, r6, r8, r9, pc}
    1424:	rsb	r0, r4, #0
    1428:	uxtb	r0, r0
    142c:	rsb	r0, r0, #0
    1430:	b	140c <log_oom_internal@plt+0x86c>
    1434:	ldr	ip, [pc, #84]	; 1490 <log_oom_internal@plt+0x8f0>
    1438:	ldm	r5, {r0, r1, r2, r3}
    143c:	add	ip, pc, ip
    1440:	ldrb	ip, [ip, #16]
    1444:	str	ip, [sp]
    1448:	bl	a68 <id128_pretty_print@plt>
    144c:	b	140c <log_oom_internal@plt+0x86c>
    1450:	mov	r0, r5
    1454:	bl	b34 <sd_id128_get_machine@plt>
    1458:	mov	r4, r0
    145c:	b	1394 <log_oom_internal@plt+0x7f4>
    1460:	ldr	r1, [pc, #44]	; 1494 <log_oom_internal@plt+0x8f4>
    1464:	add	r1, pc, r1
    1468:	b	13d4 <log_oom_internal@plt+0x834>
    146c:	bl	b04 <__stack_chk_fail@plt>
    1470:	strdeq	r0, [r1], -r8
    1474:			; <UNDEFINED> instruction: 0x00010cb8
    1478:	andeq	r0, r0, r4, lsl #1
    147c:	andeq	r0, r1, r8, asr ip
    1480:	andeq	r0, r0, ip, lsr #8
    1484:	andeq	r0, r0, ip, asr #8
    1488:	andeq	r0, r0, r0, lsr r1
    148c:	andeq	r0, r0, r8, ror r1
    1490:	andeq	r0, r1, ip, asr #23
    1494:	andeq	r0, r0, ip, lsr r4
    1498:	ldr	r3, [pc, #8]	; 14a8 <log_oom_internal@plt+0x908>
    149c:	add	r3, pc, r3
    14a0:	ldrb	r0, [r3, #16]
    14a4:	b	ae0 <id128_print_new@plt>
    14a8:	andeq	r0, r1, ip, ror #22
    14ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    14b0:	mov	r7, r0
    14b4:	ldr	r6, [pc, #72]	; 1504 <log_oom_internal@plt+0x964>
    14b8:	ldr	r5, [pc, #72]	; 1508 <log_oom_internal@plt+0x968>
    14bc:	add	r6, pc, r6
    14c0:	add	r5, pc, r5
    14c4:	sub	r6, r6, r5
    14c8:	mov	r8, r1
    14cc:	mov	r9, r2
    14d0:	bl	a24 <sd_id128_get_machine_app_specific@plt-0x20>
    14d4:	asrs	r6, r6, #2
    14d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    14dc:	mov	r4, #0
    14e0:	add	r4, r4, #1
    14e4:	ldr	r3, [r5], #4
    14e8:	mov	r2, r9
    14ec:	mov	r1, r8
    14f0:	mov	r0, r7
    14f4:	blx	r3
    14f8:	cmp	r6, r4
    14fc:	bne	14e0 <log_oom_internal@plt+0x940>
    1500:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1504:			; <UNDEFINED> instruction: 0x000108bc
    1508:			; <UNDEFINED> instruction: 0x000108b4
    150c:	bx	lr

Disassembly of section .fini:

00001510 <.fini>:
    1510:	push	{r3, lr}
    1514:	pop	{r3, pc}
