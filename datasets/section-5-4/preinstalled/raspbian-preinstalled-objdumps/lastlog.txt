
raspbian-preinstalled/lastlog:     file format elf32-littlearm


Disassembly of section .init:

00010d28 <_init@@Base>:
   10d28:	push	{r3, lr}
   10d2c:	bl	11664 <__assert_fail@plt+0x6c4>
   10d30:	pop	{r3, pc}

Disassembly of section .plt:

00010d34 <getpwnam@plt-0x14>:
   10d34:	push	{lr}		; (str lr, [sp, #-4]!)
   10d38:	ldr	lr, [pc, #4]	; 10d44 <_init@@Base+0x1c>
   10d3c:	add	lr, pc, lr
   10d40:	ldr	pc, [lr, #8]!
   10d44:	andeq	r2, r1, r0, ror #3

00010d48 <getpwnam@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #73728	; 0x12000
   10d50:	ldr	pc, [ip, #480]!	; 0x1e0

00010d54 <fsync@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #73728	; 0x12000
   10d5c:	ldr	pc, [ip, #472]!	; 0x1d8

00010d60 <strcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #73728	; 0x12000
   10d68:	ldr	pc, [ip, #464]!	; 0x1d0

00010d6c <getpwuid@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #73728	; 0x12000
   10d74:	ldr	pc, [ip, #456]!	; 0x1c8

00010d78 <fflush@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #73728	; 0x12000
   10d80:	ldr	pc, [ip, #448]!	; 0x1c0

00010d84 <getuid@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #73728	; 0x12000
   10d8c:	ldr	pc, [ip, #440]!	; 0x1b8

00010d90 <time@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #73728	; 0x12000
   10d98:	ldr	pc, [ip, #432]!	; 0x1b0

00010d9c <dcgettext@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #73728	; 0x12000
   10da4:	ldr	pc, [ip, #424]!	; 0x1a8

00010da8 <getpwent@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #73728	; 0x12000
   10db0:	ldr	pc, [ip, #416]!	; 0x1a0

00010db4 <__stack_chk_fail@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #73728	; 0x12000
   10dbc:	ldr	pc, [ip, #408]!	; 0x198

00010dc0 <audit_open@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #73728	; 0x12000
   10dc8:	ldr	pc, [ip, #400]!	; 0x190

00010dcc <textdomain@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #73728	; 0x12000
   10dd4:	ldr	pc, [ip, #392]!	; 0x188

00010dd8 <chdir@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #73728	; 0x12000
   10de0:	ldr	pc, [ip, #384]!	; 0x180

00010de4 <perror@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #73728	; 0x12000
   10dec:	ldr	pc, [ip, #376]!	; 0x178

00010df0 <__fxstat64@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #73728	; 0x12000
   10df8:	ldr	pc, [ip, #368]!	; 0x170

00010dfc <fwrite@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #73728	; 0x12000
   10e04:	ldr	pc, [ip, #360]!	; 0x168

00010e08 <chroot@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #73728	; 0x12000
   10e10:	ldr	pc, [ip, #352]!	; 0x160

00010e14 <fread@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #73728	; 0x12000
   10e1c:	ldr	pc, [ip, #344]!	; 0x158

00010e20 <puts@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #73728	; 0x12000
   10e28:	ldr	pc, [ip, #336]!	; 0x150

00010e2c <__libc_start_main@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #73728	; 0x12000
   10e34:	ldr	pc, [ip, #328]!	; 0x148

00010e38 <strerror@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #73728	; 0x12000
   10e40:	ldr	pc, [ip, #320]!	; 0x140

00010e44 <strftime@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #73728	; 0x12000
   10e4c:	ldr	pc, [ip, #312]!	; 0x138

00010e50 <localtime@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #73728	; 0x12000
   10e58:	ldr	pc, [ip, #304]!	; 0x130

00010e5c <__gmon_start__@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #73728	; 0x12000
   10e64:	ldr	pc, [ip, #296]!	; 0x128

00010e68 <getopt_long@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #73728	; 0x12000
   10e70:	ldr	pc, [ip, #288]!	; 0x120

00010e74 <__ctype_b_loc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #73728	; 0x12000
   10e7c:	ldr	pc, [ip, #280]!	; 0x118

00010e80 <exit@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #73728	; 0x12000
   10e88:	ldr	pc, [ip, #272]!	; 0x110

00010e8c <strtoul@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #73728	; 0x12000
   10e94:	ldr	pc, [ip, #264]!	; 0x108

00010e98 <setreuid@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #73728	; 0x12000
   10ea0:	ldr	pc, [ip, #256]!	; 0x100

00010ea4 <setpwent@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #73728	; 0x12000
   10eac:	ldr	pc, [ip, #248]!	; 0xf8

00010eb0 <__errno_location@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #73728	; 0x12000
   10eb8:	ldr	pc, [ip, #240]!	; 0xf0

00010ebc <getgid@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #73728	; 0x12000
   10ec4:	ldr	pc, [ip, #232]!	; 0xe8

00010ec8 <memset@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #73728	; 0x12000
   10ed0:	ldr	pc, [ip, #224]!	; 0xe0

00010ed4 <__printf_chk@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #73728	; 0x12000
   10edc:	ldr	pc, [ip, #216]!	; 0xd8

00010ee0 <fileno@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #73728	; 0x12000
   10ee8:	ldr	pc, [ip, #208]!	; 0xd0

00010eec <__fprintf_chk@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #73728	; 0x12000
   10ef4:	ldr	pc, [ip, #200]!	; 0xc8

00010ef8 <access@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #73728	; 0x12000
   10f00:	ldr	pc, [ip, #192]!	; 0xc0

00010f04 <fclose@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #73728	; 0x12000
   10f0c:	ldr	pc, [ip, #184]!	; 0xb8

00010f10 <fseeko64@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #73728	; 0x12000
   10f18:	ldr	pc, [ip, #176]!	; 0xb0

00010f1c <setregid@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #73728	; 0x12000
   10f24:	ldr	pc, [ip, #168]!	; 0xa8

00010f28 <setlocale@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #73728	; 0x12000
   10f30:	ldr	pc, [ip, #160]!	; 0xa0

00010f34 <endpwent@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #73728	; 0x12000
   10f3c:	ldr	pc, [ip, #152]!	; 0x98

00010f40 <strrchr@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #73728	; 0x12000
   10f48:	ldr	pc, [ip, #144]!	; 0x90

00010f4c <fputc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #73728	; 0x12000
   10f54:	ldr	pc, [ip, #136]!	; 0x88

00010f58 <fopen64@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #73728	; 0x12000
   10f60:	ldr	pc, [ip, #128]!	; 0x80

00010f64 <bindtextdomain@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #73728	; 0x12000
   10f6c:	ldr	pc, [ip, #120]!	; 0x78

00010f70 <audit_log_user_message@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #73728	; 0x12000
   10f78:	ldr	pc, [ip, #112]!	; 0x70

00010f7c <audit_log_acct_message@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #73728	; 0x12000
   10f84:	ldr	pc, [ip, #104]!	; 0x68

00010f88 <fputs@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #73728	; 0x12000
   10f90:	ldr	pc, [ip, #96]!	; 0x60

00010f94 <abort@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #73728	; 0x12000
   10f9c:	ldr	pc, [ip, #88]!	; 0x58

00010fa0 <__assert_fail@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #73728	; 0x12000
   10fa8:	ldr	pc, [ip, #80]!	; 0x50

Disassembly of section .text:

00010fac <.text>:
   10fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fb0:	sub	sp, sp, #28
   10fb4:	ldr	fp, [pc, #1552]	; 115cc <__assert_fail@plt+0x62c>
   10fb8:	mov	r7, r0
   10fbc:	ldr	r0, [r1]
   10fc0:	ldr	r3, [fp]
   10fc4:	mov	r6, r1
   10fc8:	str	r3, [sp, #20]
   10fcc:	bl	11d2c <__assert_fail@plt+0xd8c>
   10fd0:	ldr	r5, [pc, #1528]	; 115d0 <__assert_fail@plt+0x630>
   10fd4:	ldr	r1, [pc, #1528]	; 115d4 <__assert_fail@plt+0x634>
   10fd8:	add	r3, r5, #136	; 0x88
   10fdc:	str	r3, [sp, #12]
   10fe0:	ldr	r3, [pc, #1520]	; 115d8 <__assert_fail@plt+0x638>
   10fe4:	ldr	r9, [pc, #1520]	; 115dc <__assert_fail@plt+0x63c>
   10fe8:	ldr	r8, [pc, #1520]	; 115e0 <__assert_fail@plt+0x640>
   10fec:	ldr	sl, [pc, #1520]	; 115e4 <__assert_fail@plt+0x644>
   10ff0:	str	r0, [r3]
   10ff4:	mov	r0, #6
   10ff8:	bl	10f28 <setlocale@plt>
   10ffc:	ldr	r1, [pc, #1508]	; 115e8 <__assert_fail@plt+0x648>
   11000:	ldr	r0, [pc, #1508]	; 115ec <__assert_fail@plt+0x64c>
   11004:	bl	10f64 <bindtextdomain@plt>
   11008:	ldr	r0, [pc, #1500]	; 115ec <__assert_fail@plt+0x64c>
   1100c:	bl	10dcc <textdomain@plt>
   11010:	mov	r2, r6
   11014:	mov	r1, r7
   11018:	ldr	r0, [pc, #1488]	; 115f0 <__assert_fail@plt+0x650>
   1101c:	bl	11f2c <__assert_fail@plt+0xf8c>
   11020:	bl	11c20 <__assert_fail@plt+0xc80>
   11024:	mov	r4, #0
   11028:	str	r4, [sp]
   1102c:	mov	r3, r9
   11030:	mov	r2, r8
   11034:	mov	r1, r6
   11038:	mov	r0, r7
   1103c:	bl	10e68 <getopt_long@plt>
   11040:	cmn	r0, #1
   11044:	beq	1123c <__assert_fail@plt+0x29c>
   11048:	sub	r0, r0, #67	; 0x43
   1104c:	cmp	r0, #50	; 0x32
   11050:	ldrls	pc, [pc, r0, lsl #2]
   11054:	b	11488 <__assert_fail@plt+0x4e8>
   11058:	ldrdeq	r1, [r1], -r0
   1105c:	andeq	r1, r1, r8, lsl #9
   11060:	andeq	r1, r1, r8, lsl #9
   11064:	andeq	r1, r1, r8, lsl #9
   11068:	andeq	r1, r1, r8, lsl #9
   1106c:	andeq	r1, r1, r8, lsl #9
   11070:	andeq	r1, r1, r8, lsl #9
   11074:	andeq	r1, r1, r8, lsl #9
   11078:	andeq	r1, r1, r8, lsl #9
   1107c:	andeq	r1, r1, r8, lsl #9
   11080:	andeq	r1, r1, r8, lsl #9
   11084:	andeq	r1, r1, r8, lsl #9
   11088:	andeq	r1, r1, r8, lsl #9
   1108c:	andeq	r1, r1, r8, lsl #9
   11090:	andeq	r1, r1, r8, lsl #9
   11094:	andeq	r1, r1, r8, lsr #32
   11098:	andeq	r1, r1, r4, asr #3
   1109c:	andeq	r1, r1, r8, lsl #9
   110a0:	andeq	r1, r1, r8, lsl #9
   110a4:	andeq	r1, r1, r8, lsl #9
   110a8:	andeq	r1, r1, r8, lsl #9
   110ac:	andeq	r1, r1, r8, lsl #9
   110b0:	andeq	r1, r1, r8, lsl #9
   110b4:	andeq	r1, r1, r8, lsl #9
   110b8:	andeq	r1, r1, r8, lsl #9
   110bc:	andeq	r1, r1, r8, lsl #9
   110c0:	andeq	r1, r1, r8, lsl #9
   110c4:	andeq	r1, r1, r8, lsl #9
   110c8:	andeq	r1, r1, r8, lsl #9
   110cc:	andeq	r1, r1, r8, lsl #9
   110d0:	andeq	r1, r1, r8, lsl #9
   110d4:	andeq	r1, r1, ip, lsl #3
   110d8:	andeq	r1, r1, r8, lsl #9
   110dc:	andeq	r1, r1, r8, lsl #9
   110e0:	andeq	r1, r1, r8, lsl #9
   110e4:	andeq	r1, r1, r8, lsl #9
   110e8:	andeq	r1, r1, r8, lsl #9
   110ec:	andeq	r1, r1, r4, asr r4
   110f0:	andeq	r1, r1, r8, lsl #9
   110f4:	andeq	r1, r1, r8, lsl #9
   110f8:	andeq	r1, r1, r8, lsl #9
   110fc:	andeq	r1, r1, r8, lsl #9
   11100:	andeq	r1, r1, r8, lsl #9
   11104:	andeq	r1, r1, r8, lsl #9
   11108:	andeq	r1, r1, r8, lsl #9
   1110c:	andeq	r1, r1, r8, lsl #9
   11110:	andeq	r1, r1, r8, lsl #9
   11114:	andeq	r1, r1, r8, lsl #9
   11118:	andeq	r1, r1, r8, lsl #9
   1111c:	andeq	r1, r1, r4, asr r1
   11120:	andeq	r1, r1, r4, lsr #2
   11124:	mov	r4, #1
   11128:	ldr	r0, [sl]
   1112c:	strb	r4, [r5, #126]	; 0x7e
   11130:	bl	10d48 <getpwnam@plt>
   11134:	cmp	r0, #0
   11138:	beq	111dc <__assert_fail@plt+0x23c>
   1113c:	ldr	r3, [r0, #8]
   11140:	strb	r4, [r5, #132]	; 0x84
   11144:	str	r3, [r5, #128]	; 0x80
   11148:	str	r3, [r5, #136]	; 0x88
   1114c:	strb	r4, [r5, #140]	; 0x8c
   11150:	b	11024 <__assert_fail@plt+0x84>
   11154:	add	r1, sp, #16
   11158:	ldr	r0, [sl]
   1115c:	bl	121cc <__assert_fail@plt+0x122c>
   11160:	cmp	r0, #0
   11164:	beq	1149c <__assert_fail@plt+0x4fc>
   11168:	ldr	r3, [sp, #16]
   1116c:	mov	r2, #1
   11170:	strb	r2, [r5, #108]	; 0x6c
   11174:	add	r3, r3, r3, lsl r2
   11178:	rsb	r3, r3, r3, lsl #4
   1117c:	rsb	r3, r3, r3, lsl #4
   11180:	lsl	r3, r3, #7
   11184:	str	r3, [r5, #112]	; 0x70
   11188:	b	11024 <__assert_fail@plt+0x84>
   1118c:	add	r1, sp, #16
   11190:	ldr	r0, [sl]
   11194:	bl	121cc <__assert_fail@plt+0x122c>
   11198:	cmp	r0, #0
   1119c:	beq	1149c <__assert_fail@plt+0x4fc>
   111a0:	ldr	r3, [sp, #16]
   111a4:	mov	r2, #1
   111a8:	strb	r2, [r5, #109]	; 0x6d
   111ac:	add	r3, r3, r3, lsl r2
   111b0:	rsb	r3, r3, r3, lsl #4
   111b4:	rsb	r3, r3, r3, lsl #4
   111b8:	lsl	r3, r3, #7
   111bc:	str	r3, [r5, #120]	; 0x78
   111c0:	b	11024 <__assert_fail@plt+0x84>
   111c4:	mov	r3, #1
   111c8:	strb	r3, [r5, #124]	; 0x7c
   111cc:	b	11024 <__assert_fail@plt+0x84>
   111d0:	mov	r3, #1
   111d4:	strb	r3, [r5, #125]	; 0x7d
   111d8:	b	11024 <__assert_fail@plt+0x84>
   111dc:	ldr	r2, [pc, #1040]	; 115f4 <__assert_fail@plt+0x654>
   111e0:	ldr	r0, [sl]
   111e4:	add	r3, r2, #8
   111e8:	str	r3, [sp]
   111ec:	sub	r1, r2, #4
   111f0:	ldr	r3, [sp, #12]
   111f4:	bl	11d4c <__assert_fail@plt+0xdac>
   111f8:	cmp	r0, #0
   111fc:	bne	11024 <__assert_fail@plt+0x84>
   11200:	ldr	r3, [pc, #1008]	; 115f8 <__assert_fail@plt+0x658>
   11204:	mov	r2, #5
   11208:	ldr	r1, [pc, #1004]	; 115fc <__assert_fail@plt+0x65c>
   1120c:	ldr	r5, [r3]
   11210:	bl	10d9c <dcgettext@plt>
   11214:	ldr	r3, [pc, #956]	; 115d8 <__assert_fail@plt+0x638>
   11218:	ldr	r2, [sl]
   1121c:	mov	r1, r4
   11220:	ldr	r3, [r3]
   11224:	str	r2, [sp]
   11228:	mov	r2, r0
   1122c:	mov	r0, r5
   11230:	bl	10eec <__fprintf_chk@plt>
   11234:	mov	r0, r4
   11238:	bl	10e80 <exit@plt>
   1123c:	ldr	r4, [pc, #956]	; 11600 <__assert_fail@plt+0x660>
   11240:	ldr	r3, [r4]
   11244:	cmp	r3, r7
   11248:	blt	114dc <__assert_fail@plt+0x53c>
   1124c:	ldr	r4, [pc, #892]	; 115d0 <__assert_fail@plt+0x630>
   11250:	ldrb	r2, [r4, #125]	; 0x7d
   11254:	ldrb	r3, [r4, #124]	; 0x7c
   11258:	cmp	r2, #0
   1125c:	beq	1138c <__assert_fail@plt+0x3ec>
   11260:	cmp	r3, #0
   11264:	bne	115b8 <__assert_fail@plt+0x618>
   11268:	ldrb	r0, [r4, #126]	; 0x7e
   1126c:	cmp	r0, #0
   11270:	ldrne	r1, [pc, #908]	; 11604 <__assert_fail@plt+0x664>
   11274:	beq	1145c <__assert_fail@plt+0x4bc>
   11278:	ldr	r5, [pc, #904]	; 11608 <__assert_fail@plt+0x668>
   1127c:	mov	r0, r5
   11280:	bl	10f58 <fopen64@plt>
   11284:	cmp	r0, #0
   11288:	str	r0, [r4, #104]	; 0x68
   1128c:	beq	11570 <__assert_fail@plt+0x5d0>
   11290:	bl	10ee0 <fileno@plt>
   11294:	ldr	r2, [pc, #820]	; 115d0 <__assert_fail@plt+0x630>
   11298:	mov	r1, r0
   1129c:	mov	r0, #3
   112a0:	bl	10df0 <__fxstat64@plt>
   112a4:	cmp	r0, #0
   112a8:	bne	1151c <__assert_fail@plt+0x57c>
   112ac:	ldrb	r3, [r4, #125]	; 0x7d
   112b0:	ldrb	r2, [r4, #126]	; 0x7e
   112b4:	cmp	r3, #0
   112b8:	bne	112c8 <__assert_fail@plt+0x328>
   112bc:	ldrb	r3, [r4, #124]	; 0x7c
   112c0:	cmp	r3, #0
   112c4:	beq	1139c <__assert_fail@plt+0x3fc>
   112c8:	cmp	r2, #0
   112cc:	beq	11368 <__assert_fail@plt+0x3c8>
   112d0:	ldrb	r3, [r4, #132]	; 0x84
   112d4:	cmp	r3, #0
   112d8:	beq	112e8 <__assert_fail@plt+0x348>
   112dc:	ldrb	r3, [r4, #140]	; 0x8c
   112e0:	cmp	r3, #0
   112e4:	bne	11438 <__assert_fail@plt+0x498>
   112e8:	bl	10ea4 <setpwent@plt>
   112ec:	bl	10da8 <getpwent@plt>
   112f0:	cmp	r0, #0
   112f4:	beq	11340 <__assert_fail@plt+0x3a0>
   112f8:	ldrb	r3, [r4, #132]	; 0x84
   112fc:	cmp	r3, #0
   11300:	beq	11314 <__assert_fail@plt+0x374>
   11304:	ldr	r2, [r0, #8]
   11308:	ldr	r3, [r4, #128]	; 0x80
   1130c:	cmp	r2, r3
   11310:	bcc	112ec <__assert_fail@plt+0x34c>
   11314:	ldrb	r3, [r4, #140]	; 0x8c
   11318:	cmp	r3, #0
   1131c:	beq	11330 <__assert_fail@plt+0x390>
   11320:	ldr	r2, [r0, #8]
   11324:	ldr	r3, [r4, #136]	; 0x88
   11328:	cmp	r2, r3
   1132c:	bhi	112ec <__assert_fail@plt+0x34c>
   11330:	bl	11bac <__assert_fail@plt+0xc0c>
   11334:	bl	10da8 <getpwent@plt>
   11338:	cmp	r0, #0
   1133c:	bne	112f8 <__assert_fail@plt+0x358>
   11340:	bl	10f34 <endpwent@plt>
   11344:	ldr	r0, [r4, #104]	; 0x68
   11348:	bl	10d78 <fflush@plt>
   1134c:	cmp	r0, #0
   11350:	bne	11580 <__assert_fail@plt+0x5e0>
   11354:	ldr	r0, [r4, #104]	; 0x68
   11358:	bl	10ee0 <fileno@plt>
   1135c:	bl	10d54 <fsync@plt>
   11360:	cmp	r0, #0
   11364:	bne	11580 <__assert_fail@plt+0x5e0>
   11368:	ldr	r0, [r4, #104]	; 0x68
   1136c:	bl	10f04 <fclose@plt>
   11370:	ldr	r2, [sp, #20]
   11374:	ldr	r3, [fp]
   11378:	mov	r0, #0
   1137c:	cmp	r2, r3
   11380:	bne	114d8 <__assert_fail@plt+0x538>
   11384:	add	sp, sp, #28
   11388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1138c:	cmp	r3, #0
   11390:	ldreq	r1, [pc, #628]	; 1160c <__assert_fail@plt+0x66c>
   11394:	beq	11278 <__assert_fail@plt+0x2d8>
   11398:	b	11268 <__assert_fail@plt+0x2c8>
   1139c:	cmp	r2, #0
   113a0:	beq	113cc <__assert_fail@plt+0x42c>
   113a4:	ldrb	r3, [r4, #132]	; 0x84
   113a8:	cmp	r3, #0
   113ac:	beq	113cc <__assert_fail@plt+0x42c>
   113b0:	ldrb	r3, [r4, #140]	; 0x8c
   113b4:	cmp	r3, #0
   113b8:	beq	113cc <__assert_fail@plt+0x42c>
   113bc:	ldr	r0, [r4, #128]	; 0x80
   113c0:	ldr	r3, [r4, #136]	; 0x88
   113c4:	cmp	r0, r3
   113c8:	beq	11490 <__assert_fail@plt+0x4f0>
   113cc:	bl	10ea4 <setpwent@plt>
   113d0:	bl	10da8 <getpwent@plt>
   113d4:	cmp	r0, #0
   113d8:	beq	11430 <__assert_fail@plt+0x490>
   113dc:	ldrb	r3, [r4, #126]	; 0x7e
   113e0:	cmp	r3, #0
   113e4:	beq	11420 <__assert_fail@plt+0x480>
   113e8:	ldrb	r3, [r4, #132]	; 0x84
   113ec:	cmp	r3, #0
   113f0:	beq	11404 <__assert_fail@plt+0x464>
   113f4:	ldr	r2, [r0, #8]
   113f8:	ldr	r3, [r4, #128]	; 0x80
   113fc:	cmp	r2, r3
   11400:	bcc	113d0 <__assert_fail@plt+0x430>
   11404:	ldrb	r3, [r4, #140]	; 0x8c
   11408:	cmp	r3, #0
   1140c:	beq	11420 <__assert_fail@plt+0x480>
   11410:	ldr	r2, [r0, #8]
   11414:	ldr	r3, [r4, #136]	; 0x88
   11418:	cmp	r2, r3
   1141c:	bhi	113d0 <__assert_fail@plt+0x430>
   11420:	bl	1183c <__assert_fail@plt+0x89c>
   11424:	bl	10da8 <getpwent@plt>
   11428:	cmp	r0, #0
   1142c:	bne	113dc <__assert_fail@plt+0x43c>
   11430:	bl	10f34 <endpwent@plt>
   11434:	b	11368 <__assert_fail@plt+0x3c8>
   11438:	ldr	r0, [r4, #128]	; 0x80
   1143c:	ldr	r3, [r4, #136]	; 0x88
   11440:	cmp	r0, r3
   11444:	bne	112e8 <__assert_fail@plt+0x348>
   11448:	bl	10d6c <getpwuid@plt>
   1144c:	bl	11bac <__assert_fail@plt+0xc0c>
   11450:	b	11344 <__assert_fail@plt+0x3a4>
   11454:	mov	r0, #0
   11458:	bl	11718 <__assert_fail@plt+0x778>
   1145c:	ldr	r3, [pc, #404]	; 115f8 <__assert_fail@plt+0x658>
   11460:	ldr	r1, [pc, #424]	; 11610 <__assert_fail@plt+0x670>
   11464:	mov	r2, #5
   11468:	ldr	r4, [r3]
   1146c:	bl	10d9c <dcgettext@plt>
   11470:	ldr	r3, [pc, #352]	; 115d8 <__assert_fail@plt+0x638>
   11474:	mov	r1, #1
   11478:	ldr	r3, [r3]
   1147c:	mov	r2, r0
   11480:	mov	r0, r4
   11484:	bl	10eec <__fprintf_chk@plt>
   11488:	mov	r0, #1
   1148c:	bl	11718 <__assert_fail@plt+0x778>
   11490:	bl	10d6c <getpwuid@plt>
   11494:	bl	1183c <__assert_fail@plt+0x89c>
   11498:	b	11368 <__assert_fail@plt+0x3c8>
   1149c:	ldr	r3, [pc, #340]	; 115f8 <__assert_fail@plt+0x658>
   114a0:	mov	r2, #5
   114a4:	ldr	r1, [pc, #360]	; 11614 <__assert_fail@plt+0x674>
   114a8:	ldr	r4, [r3]
   114ac:	bl	10d9c <dcgettext@plt>
   114b0:	ldr	r3, [pc, #288]	; 115d8 <__assert_fail@plt+0x638>
   114b4:	ldr	r2, [sl]
   114b8:	mov	r1, #1
   114bc:	ldr	r3, [r3]
   114c0:	str	r2, [sp]
   114c4:	mov	r2, r0
   114c8:	mov	r0, r4
   114cc:	bl	10eec <__fprintf_chk@plt>
   114d0:	mov	r0, #1
   114d4:	bl	10e80 <exit@plt>
   114d8:	bl	10db4 <__stack_chk_fail@plt>
   114dc:	ldr	r3, [pc, #276]	; 115f8 <__assert_fail@plt+0x658>
   114e0:	mov	r2, #5
   114e4:	ldr	r1, [pc, #300]	; 11618 <__assert_fail@plt+0x678>
   114e8:	mov	r0, #0
   114ec:	ldr	r5, [r3]
   114f0:	bl	10d9c <dcgettext@plt>
   114f4:	ldr	r2, [r4]
   114f8:	ldr	r3, [pc, #216]	; 115d8 <__assert_fail@plt+0x638>
   114fc:	mov	r1, #1
   11500:	ldr	r2, [r6, r2, lsl #2]
   11504:	ldr	r3, [r3]
   11508:	str	r2, [sp]
   1150c:	mov	r2, r0
   11510:	mov	r0, r5
   11514:	bl	10eec <__fprintf_chk@plt>
   11518:	b	11488 <__assert_fail@plt+0x4e8>
   1151c:	ldr	r3, [pc, #212]	; 115f8 <__assert_fail@plt+0x658>
   11520:	mov	r2, #5
   11524:	ldr	r1, [pc, #240]	; 1161c <__assert_fail@plt+0x67c>
   11528:	mov	r0, #0
   1152c:	ldr	r4, [r3]
   11530:	bl	10d9c <dcgettext@plt>
   11534:	mov	r6, r0
   11538:	bl	10eb0 <__errno_location@plt>
   1153c:	ldr	r3, [pc, #148]	; 115d8 <__assert_fail@plt+0x638>
   11540:	ldr	r7, [r3]
   11544:	ldr	r0, [r0]
   11548:	bl	10e38 <strerror@plt>
   1154c:	mov	r3, r7
   11550:	mov	r2, r6
   11554:	str	r5, [sp]
   11558:	mov	r1, #1
   1155c:	str	r0, [sp, #4]
   11560:	mov	r0, r4
   11564:	bl	10eec <__fprintf_chk@plt>
   11568:	mov	r0, #1
   1156c:	bl	10e80 <exit@plt>
   11570:	mov	r0, r5
   11574:	bl	10de4 <perror@plt>
   11578:	mov	r0, #1
   1157c:	bl	10e80 <exit@plt>
   11580:	ldr	r3, [pc, #112]	; 115f8 <__assert_fail@plt+0x658>
   11584:	mov	r2, #5
   11588:	ldr	r1, [pc, #144]	; 11620 <__assert_fail@plt+0x680>
   1158c:	mov	r0, #0
   11590:	ldr	r4, [r3]
   11594:	bl	10d9c <dcgettext@plt>
   11598:	ldr	r3, [pc, #56]	; 115d8 <__assert_fail@plt+0x638>
   1159c:	mov	r1, #1
   115a0:	ldr	r3, [r3]
   115a4:	mov	r2, r0
   115a8:	mov	r0, r4
   115ac:	bl	10eec <__fprintf_chk@plt>
   115b0:	mov	r0, #1
   115b4:	bl	10e80 <exit@plt>
   115b8:	ldr	r3, [pc, #56]	; 115f8 <__assert_fail@plt+0x658>
   115bc:	mov	r2, #5
   115c0:	ldr	r1, [pc, #92]	; 11624 <__assert_fail@plt+0x684>
   115c4:	mov	r0, #0
   115c8:	b	11468 <__assert_fail@plt+0x4c8>
   115cc:	andeq	r2, r2, r8, lsl lr
   115d0:	andeq	r3, r2, r0, lsr #32
   115d4:	andeq	r2, r1, r4, lsr #17
   115d8:	strheq	r3, [r2], -r0
   115dc:	andeq	r2, r1, r4, lsl #6
   115e0:	andeq	r2, r1, r4, asr #14
   115e4:	andeq	r3, r2, r8, lsl r0
   115e8:	andeq	r2, r1, r0, ror #13
   115ec:	strdeq	r2, [r1], -r4
   115f0:	strdeq	r2, [r1], -ip
   115f4:	andeq	r3, r2, r4, lsr #1
   115f8:	andeq	r3, r2, r0, lsl r0
   115fc:	andeq	r2, r1, r4, lsr #14
   11600:	andeq	r3, r2, r8
   11604:	ldrdeq	r2, [r1], -ip
   11608:	andeq	r2, r1, r8, ror #15
   1160c:	andeq	r2, r1, r4, asr r8
   11610:	andeq	r2, r1, r8, lsr #15
   11614:	andeq	r2, r1, r0, lsl #14
   11618:	andeq	r2, r1, r0, asr r7
   1161c:	strdeq	r2, [r1], -ip
   11620:	andeq	r2, r1, r0, lsr #16
   11624:	andeq	r2, r1, r0, ror r7
   11628:	mov	fp, #0
   1162c:	mov	lr, #0
   11630:	pop	{r1}		; (ldr r1, [sp], #4)
   11634:	mov	r2, sp
   11638:	push	{r2}		; (str r2, [sp, #-4]!)
   1163c:	push	{r0}		; (str r0, [sp, #-4]!)
   11640:	ldr	ip, [pc, #16]	; 11658 <__assert_fail@plt+0x6b8>
   11644:	push	{ip}		; (str ip, [sp, #-4]!)
   11648:	ldr	r0, [pc, #12]	; 1165c <__assert_fail@plt+0x6bc>
   1164c:	ldr	r3, [pc, #12]	; 11660 <__assert_fail@plt+0x6c0>
   11650:	bl	10e2c <__libc_start_main@plt>
   11654:	bl	10f94 <abort@plt>
   11658:	andeq	r2, r1, r4, asr #5
   1165c:	andeq	r0, r1, ip, lsr #31
   11660:	andeq	r2, r1, r4, ror #4
   11664:	ldr	r3, [pc, #20]	; 11680 <__assert_fail@plt+0x6e0>
   11668:	ldr	r2, [pc, #20]	; 11684 <__assert_fail@plt+0x6e4>
   1166c:	add	r3, pc, r3
   11670:	ldr	r2, [r3, r2]
   11674:	cmp	r2, #0
   11678:	bxeq	lr
   1167c:	b	10e5c <__gmon_start__@plt>
   11680:			; <UNDEFINED> instruction: 0x000118b0
   11684:	ldrdeq	r0, [r0], -r8
   11688:	ldr	r0, [pc, #24]	; 116a8 <__assert_fail@plt+0x708>
   1168c:	ldr	r3, [pc, #24]	; 116ac <__assert_fail@plt+0x70c>
   11690:	cmp	r3, r0
   11694:	bxeq	lr
   11698:	ldr	r3, [pc, #16]	; 116b0 <__assert_fail@plt+0x710>
   1169c:	cmp	r3, #0
   116a0:	bxeq	lr
   116a4:	bx	r3
   116a8:	andeq	r3, r2, r8
   116ac:	andeq	r3, r2, r8
   116b0:	andeq	r0, r0, r0
   116b4:	ldr	r0, [pc, #36]	; 116e0 <__assert_fail@plt+0x740>
   116b8:	ldr	r1, [pc, #36]	; 116e4 <__assert_fail@plt+0x744>
   116bc:	sub	r1, r1, r0
   116c0:	asr	r1, r1, #2
   116c4:	add	r1, r1, r1, lsr #31
   116c8:	asrs	r1, r1, #1
   116cc:	bxeq	lr
   116d0:	ldr	r3, [pc, #16]	; 116e8 <__assert_fail@plt+0x748>
   116d4:	cmp	r3, #0
   116d8:	bxeq	lr
   116dc:	bx	r3
   116e0:	andeq	r3, r2, r8
   116e4:	andeq	r3, r2, r8
   116e8:	andeq	r0, r0, r0
   116ec:	push	{r4, lr}
   116f0:	ldr	r4, [pc, #24]	; 11710 <__assert_fail@plt+0x770>
   116f4:	ldrb	r3, [r4]
   116f8:	cmp	r3, #0
   116fc:	popne	{r4, pc}
   11700:	bl	11688 <__assert_fail@plt+0x6e8>
   11704:	mov	r3, #1
   11708:	strb	r3, [r4]
   1170c:	pop	{r4, pc}
   11710:	andeq	r3, r2, ip, lsl r0
   11714:	b	116b4 <__assert_fail@plt+0x714>
   11718:	push	{r4, r5, r6, lr}
   1171c:	subs	r5, r0, #0
   11720:	mov	r2, #5
   11724:	ldrne	r3, [pc, #228]	; 11810 <__assert_fail@plt+0x870>
   11728:	ldreq	r3, [pc, #228]	; 11814 <__assert_fail@plt+0x874>
   1172c:	ldr	r1, [pc, #228]	; 11818 <__assert_fail@plt+0x878>
   11730:	mov	r0, #0
   11734:	ldr	r4, [r3]
   11738:	bl	10d9c <dcgettext@plt>
   1173c:	ldr	r3, [pc, #216]	; 1181c <__assert_fail@plt+0x87c>
   11740:	mov	r1, #1
   11744:	ldr	r3, [r3]
   11748:	mov	r2, r0
   1174c:	mov	r0, r4
   11750:	bl	10eec <__fprintf_chk@plt>
   11754:	mov	r2, #5
   11758:	ldr	r1, [pc, #192]	; 11820 <__assert_fail@plt+0x880>
   1175c:	mov	r0, #0
   11760:	bl	10d9c <dcgettext@plt>
   11764:	mov	r1, r4
   11768:	bl	10f88 <fputs@plt>
   1176c:	mov	r2, #5
   11770:	ldr	r1, [pc, #172]	; 11824 <__assert_fail@plt+0x884>
   11774:	mov	r0, #0
   11778:	bl	10d9c <dcgettext@plt>
   1177c:	mov	r1, r4
   11780:	bl	10f88 <fputs@plt>
   11784:	mov	r2, #5
   11788:	ldr	r1, [pc, #152]	; 11828 <__assert_fail@plt+0x888>
   1178c:	mov	r0, #0
   11790:	bl	10d9c <dcgettext@plt>
   11794:	mov	r1, r4
   11798:	bl	10f88 <fputs@plt>
   1179c:	mov	r2, #5
   117a0:	ldr	r1, [pc, #132]	; 1182c <__assert_fail@plt+0x88c>
   117a4:	mov	r0, #0
   117a8:	bl	10d9c <dcgettext@plt>
   117ac:	mov	r1, r4
   117b0:	bl	10f88 <fputs@plt>
   117b4:	mov	r2, #5
   117b8:	ldr	r1, [pc, #112]	; 11830 <__assert_fail@plt+0x890>
   117bc:	mov	r0, #0
   117c0:	bl	10d9c <dcgettext@plt>
   117c4:	mov	r1, r4
   117c8:	bl	10f88 <fputs@plt>
   117cc:	mov	r2, #5
   117d0:	ldr	r1, [pc, #92]	; 11834 <__assert_fail@plt+0x894>
   117d4:	mov	r0, #0
   117d8:	bl	10d9c <dcgettext@plt>
   117dc:	mov	r1, r4
   117e0:	bl	10f88 <fputs@plt>
   117e4:	mov	r2, #5
   117e8:	ldr	r1, [pc, #72]	; 11838 <__assert_fail@plt+0x898>
   117ec:	mov	r0, #0
   117f0:	bl	10d9c <dcgettext@plt>
   117f4:	mov	r1, r4
   117f8:	bl	10f88 <fputs@plt>
   117fc:	mov	r1, r4
   11800:	mov	r0, #10
   11804:	bl	10f4c <fputc@plt>
   11808:	mov	r0, r5
   1180c:	bl	10e80 <exit@plt>
   11810:	andeq	r3, r2, r0, lsl r0
   11814:	andeq	r3, r2, r4, lsl r0
   11818:	andeq	r2, r1, r4, lsl #7
   1181c:	strheq	r3, [r2], -r0
   11820:	andeq	r2, r1, r4, lsr #7
   11824:	strdeq	r2, [r1], -r0
   11828:	andeq	r2, r1, r8, asr #8
   1182c:	andeq	r2, r1, ip, lsl #9
   11830:	andeq	r2, r1, r8, asr #9
   11834:	andeq	r2, r1, r4, lsr #10
   11838:	andeq	r2, r1, r8, ror r5
   1183c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11840:	sub	sp, sp, #396	; 0x18c
   11844:	ldr	r5, [pc, #472]	; 11a24 <__assert_fail@plt+0xa84>
   11848:	subs	r6, r0, #0
   1184c:	ldr	r3, [r5]
   11850:	str	r3, [sp, #388]	; 0x184
   11854:	beq	1191c <__assert_fail@plt+0x97c>
   11858:	ldr	r2, [r6, #8]
   1185c:	mov	r7, #292	; 0x124
   11860:	ldr	r4, [pc, #448]	; 11a28 <__assert_fail@plt+0xa88>
   11864:	umull	r2, r3, r2, r7
   11868:	ldrd	r8, [r4, #48]	; 0x30
   1186c:	ldr	r0, [pc, #440]	; 11a2c <__assert_fail@plt+0xa8c>
   11870:	mov	r1, #0
   11874:	adds	sl, r0, r2
   11878:	adc	fp, r1, r3
   1187c:	cmp	sl, r8
   11880:	sbcs	r1, fp, r9
   11884:	blt	11934 <__assert_fail@plt+0x994>
   11888:	mov	r2, r7
   1188c:	mov	r1, #0
   11890:	add	r0, sp, #16
   11894:	bl	10ec8 <memset@plt>
   11898:	ldrb	r3, [r4, #108]	; 0x6c
   1189c:	cmp	r3, #0
   118a0:	bne	119a8 <__assert_fail@plt+0xa08>
   118a4:	ldrb	r3, [r4, #109]	; 0x6d
   118a8:	cmp	r3, #0
   118ac:	bne	119d0 <__assert_fail@plt+0xa30>
   118b0:	ldrb	r0, [r4, #116]	; 0x74
   118b4:	cmp	r0, #0
   118b8:	beq	119f0 <__assert_fail@plt+0xa50>
   118bc:	ldr	r3, [sp, #16]
   118c0:	add	r0, sp, #392	; 0x188
   118c4:	str	r3, [r0, #-380]!	; 0xfffffe84
   118c8:	bl	10e50 <localtime@plt>
   118cc:	ldr	r2, [pc, #348]	; 11a30 <__assert_fail@plt+0xa90>
   118d0:	mov	r1, #80	; 0x50
   118d4:	mov	r3, r0
   118d8:	add	r0, sp, #308	; 0x134
   118dc:	bl	10e44 <strftime@plt>
   118e0:	ldr	r0, [sp, #16]
   118e4:	cmp	r0, #0
   118e8:	addne	r0, sp, #308	; 0x134
   118ec:	bne	118fc <__assert_fail@plt+0x95c>
   118f0:	mov	r2, #5
   118f4:	ldr	r1, [pc, #312]	; 11a34 <__assert_fail@plt+0xa94>
   118f8:	bl	10d9c <dcgettext@plt>
   118fc:	add	r3, sp, #52	; 0x34
   11900:	ldr	r2, [r6]
   11904:	ldr	r1, [pc, #300]	; 11a38 <__assert_fail@plt+0xa98>
   11908:	str	r0, [sp, #4]
   1190c:	str	r3, [sp]
   11910:	mov	r0, #1
   11914:	add	r3, sp, #20
   11918:	bl	10ed4 <__printf_chk@plt>
   1191c:	ldr	r2, [sp, #388]	; 0x184
   11920:	ldr	r3, [r5]
   11924:	cmp	r2, r3
   11928:	bne	11a0c <__assert_fail@plt+0xa6c>
   1192c:	add	sp, sp, #396	; 0x18c
   11930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11934:	mov	r1, #0
   11938:	ldr	r0, [r4, #104]	; 0x68
   1193c:	str	r1, [sp]
   11940:	bl	10f10 <fseeko64@plt>
   11944:	subs	r8, r0, #0
   11948:	bne	11a10 <__assert_fail@plt+0xa70>
   1194c:	mov	r1, r7
   11950:	ldr	r3, [r4, #104]	; 0x68
   11954:	mov	r2, #1
   11958:	add	r0, sp, #16
   1195c:	bl	10e14 <fread@plt>
   11960:	cmp	r0, #1
   11964:	beq	11898 <__assert_fail@plt+0x8f8>
   11968:	ldr	r3, [pc, #204]	; 11a3c <__assert_fail@plt+0xa9c>
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #200]	; 11a40 <__assert_fail@plt+0xaa0>
   11974:	mov	r0, r8
   11978:	ldr	r4, [r3]
   1197c:	bl	10d9c <dcgettext@plt>
   11980:	ldr	r3, [pc, #188]	; 11a44 <__assert_fail@plt+0xaa4>
   11984:	ldr	r2, [r6, #8]
   11988:	mov	r1, #1
   1198c:	str	r2, [sp]
   11990:	ldr	r3, [r3]
   11994:	mov	r2, r0
   11998:	mov	r0, r4
   1199c:	bl	10eec <__fprintf_chk@plt>
   119a0:	mov	r0, #1
   119a4:	bl	10e80 <exit@plt>
   119a8:	mov	r0, #0
   119ac:	bl	10d90 <time@plt>
   119b0:	ldr	r3, [sp, #16]
   119b4:	ldr	r2, [r4, #112]	; 0x70
   119b8:	sub	r0, r0, r3
   119bc:	cmp	r0, r2
   119c0:	bgt	1191c <__assert_fail@plt+0x97c>
   119c4:	ldrb	r3, [r4, #109]	; 0x6d
   119c8:	cmp	r3, #0
   119cc:	beq	118b0 <__assert_fail@plt+0x910>
   119d0:	mov	r0, #0
   119d4:	bl	10d90 <time@plt>
   119d8:	ldr	r3, [sp, #16]
   119dc:	ldr	r2, [r4, #120]	; 0x78
   119e0:	sub	r0, r0, r3
   119e4:	cmp	r0, r2
   119e8:	blt	1191c <__assert_fail@plt+0x97c>
   119ec:	b	118b0 <__assert_fail@plt+0x910>
   119f0:	mov	r2, #5
   119f4:	ldr	r1, [pc, #76]	; 11a48 <__assert_fail@plt+0xaa8>
   119f8:	bl	10d9c <dcgettext@plt>
   119fc:	bl	10e20 <puts@plt>
   11a00:	mov	r3, #1
   11a04:	strb	r3, [r4, #116]	; 0x74
   11a08:	b	118bc <__assert_fail@plt+0x91c>
   11a0c:	bl	10db4 <__stack_chk_fail@plt>
   11a10:	ldr	r3, [pc, #52]	; 11a4c <__assert_fail@plt+0xaac>
   11a14:	mov	r2, #120	; 0x78
   11a18:	ldr	r1, [pc, #48]	; 11a50 <__assert_fail@plt+0xab0>
   11a1c:	ldr	r0, [pc, #48]	; 11a54 <__assert_fail@plt+0xab4>
   11a20:	bl	10fa0 <__assert_fail@plt>
   11a24:	andeq	r2, r2, r8, lsl lr
   11a28:	andeq	r3, r2, r0, lsr #32
   11a2c:	andeq	r0, r0, r3, lsr #2
   11a30:	andeq	r2, r1, r0, asr #12
   11a34:	andeq	r2, r1, r0, ror #5
   11a38:	andeq	r2, r1, r8, asr r6
   11a3c:	andeq	r3, r2, r0, lsl r0
   11a40:	andeq	r2, r1, r0, ror #11
   11a44:	strheq	r3, [r2], -r0
   11a48:	andeq	r2, r1, ip, lsl #12
   11a4c:	ldrdeq	r2, [r1], -r4
   11a50:	andeq	r2, r1, r8, asr #11
   11a54:	ldrdeq	r2, [r1], -r4
   11a58:	push	{r4, r5, r6, r7, r8, r9, lr}
   11a5c:	sub	sp, sp, #308	; 0x134
   11a60:	ldr	r5, [pc, #288]	; 11b88 <__assert_fail@plt+0xbe8>
   11a64:	ldr	r6, [pc, #288]	; 11b8c <__assert_fail@plt+0xbec>
   11a68:	mov	r4, r0
   11a6c:	ldr	r3, [r5]
   11a70:	mov	r2, #292	; 0x124
   11a74:	add	r0, sp, #8
   11a78:	mov	r1, #0
   11a7c:	str	r3, [sp, #300]	; 0x12c
   11a80:	bl	10ec8 <memset@plt>
   11a84:	ldrb	r3, [r6, #124]	; 0x7c
   11a88:	cmp	r3, #0
   11a8c:	beq	11b20 <__assert_fail@plt+0xb80>
   11a90:	mov	r0, #0
   11a94:	bl	10d90 <time@plt>
   11a98:	ldr	r1, [r4, #8]
   11a9c:	ldr	r2, [pc, #236]	; 11b90 <__assert_fail@plt+0xbf0>
   11aa0:	ldr	r3, [r4]
   11aa4:	str	r1, [sp]
   11aa8:	mov	r1, #1
   11aac:	str	r1, [sp, #4]
   11ab0:	ldr	r8, [pc, #220]	; 11b94 <__assert_fail@plt+0xbf4>
   11ab4:	add	ip, sp, #44	; 0x2c
   11ab8:	ldr	r7, [pc, #216]	; 11b98 <__assert_fail@plt+0xbf8>
   11abc:	add	lr, sp, #12
   11ac0:	ldr	r9, [r7]
   11ac4:	str	r0, [sp, #8]
   11ac8:	ldm	r2, {r0, r1, r2}
   11acc:	stmia	ip!, {r0, r1}
   11ad0:	ldm	r8, {r0, r1}
   11ad4:	strh	r2, [ip]
   11ad8:	ldr	r2, [pc, #188]	; 11b9c <__assert_fail@plt+0xbfc>
   11adc:	stm	lr, {r0, r1}
   11ae0:	mov	r1, r9
   11ae4:	mov	r0, #1136	; 0x470
   11ae8:	bl	11c88 <__assert_fail@plt+0xce8>
   11aec:	ldr	r3, [r6, #104]	; 0x68
   11af0:	add	r0, sp, #8
   11af4:	mov	r2, #1
   11af8:	mov	r1, #292	; 0x124
   11afc:	bl	10dfc <fwrite@plt>
   11b00:	cmp	r0, #1
   11b04:	bne	11b48 <__assert_fail@plt+0xba8>
   11b08:	ldr	r2, [sp, #300]	; 0x12c
   11b0c:	ldr	r3, [r5]
   11b10:	cmp	r2, r3
   11b14:	bne	11b84 <__assert_fail@plt+0xbe4>
   11b18:	add	sp, sp, #308	; 0x134
   11b1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11b20:	ldr	r0, [r4, #8]
   11b24:	ldr	r7, [pc, #108]	; 11b98 <__assert_fail@plt+0xbf8>
   11b28:	mov	r2, #1
   11b2c:	ldr	r3, [r4]
   11b30:	ldr	r1, [r7]
   11b34:	stm	sp, {r0, r2}
   11b38:	ldr	r2, [pc, #96]	; 11ba0 <__assert_fail@plt+0xc00>
   11b3c:	mov	r0, #1136	; 0x470
   11b40:	bl	11c88 <__assert_fail@plt+0xce8>
   11b44:	b	11aec <__assert_fail@plt+0xb4c>
   11b48:	ldr	r3, [pc, #84]	; 11ba4 <__assert_fail@plt+0xc04>
   11b4c:	mov	r2, #5
   11b50:	ldr	r1, [pc, #80]	; 11ba8 <__assert_fail@plt+0xc08>
   11b54:	mov	r0, #0
   11b58:	ldr	r5, [r3]
   11b5c:	bl	10d9c <dcgettext@plt>
   11b60:	ldr	r2, [r4, #8]
   11b64:	ldr	r3, [r7]
   11b68:	str	r2, [sp]
   11b6c:	mov	r1, #1
   11b70:	mov	r2, r0
   11b74:	mov	r0, r5
   11b78:	bl	10eec <__fprintf_chk@plt>
   11b7c:	mov	r0, #1
   11b80:	bl	10e80 <exit@plt>
   11b84:	bl	10db4 <__stack_chk_fail@plt>
   11b88:	andeq	r2, r2, r8, lsl lr
   11b8c:	andeq	r3, r2, r0, lsr #32
   11b90:	andeq	r2, r1, r4, ror r6
   11b94:	andeq	r2, r1, r0, lsl #13
   11b98:	strheq	r3, [r2], -r0
   11b9c:	andeq	r2, r1, r8, lsl #13
   11ba0:	muleq	r1, ip, r6
   11ba4:	andeq	r3, r2, r0, lsl r0
   11ba8:			; <UNDEFINED> instruction: 0x000126b0
   11bac:	push	{r4, lr}
   11bb0:	subs	r4, r0, #0
   11bb4:	sub	sp, sp, #8
   11bb8:	beq	11bf4 <__assert_fail@plt+0xc54>
   11bbc:	ldr	r1, [pc, #76]	; 11c10 <__assert_fail@plt+0xc70>
   11bc0:	ldr	r2, [r4, #8]
   11bc4:	mov	r3, #292	; 0x124
   11bc8:	ldr	r0, [r1, #104]	; 0x68
   11bcc:	mov	r1, #0
   11bd0:	umull	r2, r3, r2, r3
   11bd4:	str	r1, [sp]
   11bd8:	bl	10f10 <fseeko64@plt>
   11bdc:	cmp	r0, #0
   11be0:	bne	11bfc <__assert_fail@plt+0xc5c>
   11be4:	mov	r0, r4
   11be8:	add	sp, sp, #8
   11bec:	pop	{r4, lr}
   11bf0:	b	11a58 <__assert_fail@plt+0xab8>
   11bf4:	add	sp, sp, #8
   11bf8:	pop	{r4, pc}
   11bfc:	ldr	r3, [pc, #16]	; 11c14 <__assert_fail@plt+0xc74>
   11c00:	mov	r2, #214	; 0xd6
   11c04:	ldr	r1, [pc, #12]	; 11c18 <__assert_fail@plt+0xc78>
   11c08:	ldr	r0, [pc, #12]	; 11c1c <__assert_fail@plt+0xc7c>
   11c0c:	bl	10fa0 <__assert_fail@plt>
   11c10:	andeq	r3, r2, r0, lsr #32
   11c14:	strdeq	r2, [r1], -r8
   11c18:	andeq	r2, r1, r8, asr #11
   11c1c:	ldrdeq	r2, [r1], -r4
   11c20:	push	{r4, lr}
   11c24:	bl	10dc0 <audit_open@plt>
   11c28:	ldr	r3, [pc, #76]	; 11c7c <__assert_fail@plt+0xcdc>
   11c2c:	cmp	r0, #0
   11c30:	str	r0, [r3]
   11c34:	popge	{r4, pc}
   11c38:	bl	10eb0 <__errno_location@plt>
   11c3c:	ldr	r0, [r0]
   11c40:	sub	r3, r0, #93	; 0x5d
   11c44:	bic	r3, r3, #4
   11c48:	cmp	r3, #0
   11c4c:	cmpne	r0, #22
   11c50:	moveq	r0, #1
   11c54:	movne	r0, #0
   11c58:	popeq	{r4, pc}
   11c5c:	mov	r2, #5
   11c60:	ldr	r1, [pc, #24]	; 11c80 <__assert_fail@plt+0xce0>
   11c64:	bl	10d9c <dcgettext@plt>
   11c68:	ldr	r3, [pc, #20]	; 11c84 <__assert_fail@plt+0xce4>
   11c6c:	ldr	r1, [r3]
   11c70:	bl	10f88 <fputs@plt>
   11c74:	mov	r0, #1
   11c78:	bl	10e80 <exit@plt>
   11c7c:	strheq	r3, [r2], -r4
   11c80:	andeq	r2, r1, ip, ror r8
   11c84:	andeq	r3, r2, r0, lsl r0
   11c88:	ldr	r1, [pc, #80]	; 11ce0 <__assert_fail@plt+0xd40>
   11c8c:	push	{lr}		; (str lr, [sp, #-4]!)
   11c90:	sub	sp, sp, #28
   11c94:	ldr	lr, [r1]
   11c98:	cmp	lr, #0
   11c9c:	blt	11cd8 <__assert_fail@plt+0xd38>
   11ca0:	mov	r1, r0
   11ca4:	ldr	r0, [sp, #36]	; 0x24
   11ca8:	mov	ip, r3
   11cac:	str	r0, [sp, #20]
   11cb0:	ldr	r0, [sp, #32]
   11cb4:	mov	r3, r2
   11cb8:	mov	r2, #0
   11cbc:	str	r0, [sp, #4]
   11cc0:	str	ip, [sp]
   11cc4:	mov	r0, lr
   11cc8:	str	r2, [sp, #16]
   11ccc:	str	r2, [sp, #12]
   11cd0:	str	r2, [sp, #8]
   11cd4:	bl	10f7c <audit_log_acct_message@plt>
   11cd8:	add	sp, sp, #28
   11cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ce0:	strheq	r3, [r2], -r4
   11ce4:	ldr	r3, [pc, #56]	; 11d24 <__assert_fail@plt+0xd84>
   11ce8:	ldr	ip, [r3]
   11cec:	cmp	ip, #0
   11cf0:	bxlt	lr
   11cf4:	push	{lr}		; (str lr, [sp, #-4]!)
   11cf8:	sub	sp, sp, #20
   11cfc:	mov	r3, #0
   11d00:	mov	r2, r0
   11d04:	str	r1, [sp, #8]
   11d08:	mov	r0, ip
   11d0c:	str	r3, [sp, #4]
   11d10:	str	r3, [sp]
   11d14:	ldr	r1, [pc, #12]	; 11d28 <__assert_fail@plt+0xd88>
   11d18:	bl	10f70 <audit_log_user_message@plt>
   11d1c:	add	sp, sp, #20
   11d20:	pop	{pc}		; (ldr pc, [sp], #4)
   11d24:	strheq	r3, [r2], -r4
   11d28:	andeq	r0, r0, r7, asr r4
   11d2c:	push	{r4, lr}
   11d30:	mov	r1, #47	; 0x2f
   11d34:	mov	r4, r0
   11d38:	bl	10f40 <strrchr@plt>
   11d3c:	cmp	r0, #0
   11d40:	addne	r0, r0, #1
   11d44:	moveq	r0, r4
   11d48:	pop	{r4, pc}
   11d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d50:	mov	r9, r1
   11d54:	ldr	r4, [pc, #460]	; 11f28 <__assert_fail@plt+0xf88>
   11d58:	sub	sp, sp, #20
   11d5c:	subs	fp, r0, #0
   11d60:	ldr	r1, [r4]
   11d64:	ldr	r7, [sp, #56]	; 0x38
   11d68:	str	r1, [sp, #12]
   11d6c:	beq	11da0 <__assert_fail@plt+0xe00>
   11d70:	mov	r8, r3
   11d74:	ldrb	r3, [fp]
   11d78:	mov	r6, r2
   11d7c:	cmp	r3, #45	; 0x2d
   11d80:	bne	11dbc <__assert_fail@plt+0xe1c>
   11d84:	bl	10e74 <__ctype_b_loc@plt>
   11d88:	ldrb	r3, [fp, #1]
   11d8c:	lsl	r3, r3, #1
   11d90:	ldr	r2, [r0]
   11d94:	ldrh	r3, [r2, r3]
   11d98:	tst	r3, #2048	; 0x800
   11d9c:	bne	11e94 <__assert_fail@plt+0xef4>
   11da0:	mov	r0, #0
   11da4:	ldr	r2, [sp, #12]
   11da8:	ldr	r3, [r4]
   11dac:	cmp	r2, r3
   11db0:	bne	11f24 <__assert_fail@plt+0xf84>
   11db4:	add	sp, sp, #20
   11db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dbc:	bl	10eb0 <__errno_location@plt>
   11dc0:	mov	r5, #0
   11dc4:	add	r1, sp, #8
   11dc8:	mov	r2, #10
   11dcc:	mov	sl, r0
   11dd0:	mov	r0, fp
   11dd4:	str	r5, [sl]
   11dd8:	bl	10e8c <strtoul@plt>
   11ddc:	ldr	r3, [sl]
   11de0:	cmp	r3, #34	; 0x22
   11de4:	mov	fp, r0
   11de8:	beq	11da0 <__assert_fail@plt+0xe00>
   11dec:	ldr	r3, [sp, #8]
   11df0:	ldrb	r2, [r3]
   11df4:	cmp	r2, r5
   11df8:	beq	11eec <__assert_fail@plt+0xf4c>
   11dfc:	cmp	r2, #45	; 0x2d
   11e00:	bne	11f08 <__assert_fail@plt+0xf68>
   11e04:	add	r2, r3, #1
   11e08:	str	r2, [sp, #8]
   11e0c:	ldrb	r3, [r3, #1]
   11e10:	cmp	r3, #0
   11e14:	beq	11f10 <__assert_fail@plt+0xf70>
   11e18:	strd	r2, [sp]
   11e1c:	bl	10e74 <__ctype_b_loc@plt>
   11e20:	ldr	r3, [sp, #4]
   11e24:	ldr	r2, [sp]
   11e28:	lsl	r3, r3, #1
   11e2c:	ldr	r1, [r0]
   11e30:	ldrh	r3, [r1, r3]
   11e34:	tst	r3, #2048	; 0x800
   11e38:	beq	11da0 <__assert_fail@plt+0xe00>
   11e3c:	mov	r3, #1
   11e40:	strb	r3, [r6]
   11e44:	add	r1, sp, #8
   11e48:	mov	r0, r2
   11e4c:	str	fp, [r9]
   11e50:	mov	r2, #10
   11e54:	str	r5, [sl]
   11e58:	str	r3, [sp]
   11e5c:	bl	10e8c <strtoul@plt>
   11e60:	ldr	r2, [sp, #8]
   11e64:	ldrb	r2, [r2]
   11e68:	cmp	r2, #0
   11e6c:	mov	r1, r0
   11e70:	bne	11da0 <__assert_fail@plt+0xe00>
   11e74:	ldr	r2, [sl]
   11e78:	cmp	r2, #34	; 0x22
   11e7c:	beq	11da0 <__assert_fail@plt+0xe00>
   11e80:	ldr	r3, [sp]
   11e84:	strb	r3, [r7]
   11e88:	mov	r0, r3
   11e8c:	str	r1, [r8]
   11e90:	b	11da4 <__assert_fail@plt+0xe04>
   11e94:	bl	10eb0 <__errno_location@plt>
   11e98:	mov	r3, #0
   11e9c:	mov	r2, #10
   11ea0:	add	r1, sp, #8
   11ea4:	mov	r5, r0
   11ea8:	add	r0, fp, #1
   11eac:	str	r3, [r5]
   11eb0:	bl	10e8c <strtoul@plt>
   11eb4:	ldr	r3, [sp, #8]
   11eb8:	ldrb	r3, [r3]
   11ebc:	cmp	r3, #0
   11ec0:	mov	r2, r0
   11ec4:	bne	11da0 <__assert_fail@plt+0xe00>
   11ec8:	ldr	r1, [r5]
   11ecc:	cmp	r1, #34	; 0x22
   11ed0:	beq	11da0 <__assert_fail@plt+0xe00>
   11ed4:	mov	r1, #1
   11ed8:	strb	r3, [r6]
   11edc:	mov	r0, r1
   11ee0:	strb	r1, [r7]
   11ee4:	str	r2, [r8]
   11ee8:	b	11da4 <__assert_fail@plt+0xe04>
   11eec:	mov	r3, #1
   11ef0:	strb	r3, [r6]
   11ef4:	mov	r0, r3
   11ef8:	strb	r3, [r7]
   11efc:	str	fp, [r9]
   11f00:	str	fp, [r8]
   11f04:	b	11da4 <__assert_fail@plt+0xe04>
   11f08:	mov	r0, r5
   11f0c:	b	11da4 <__assert_fail@plt+0xe04>
   11f10:	mov	r0, #1
   11f14:	strb	r0, [r6]
   11f18:	strb	r3, [r7]
   11f1c:	str	fp, [r9]
   11f20:	b	11da4 <__assert_fail@plt+0xe04>
   11f24:	bl	10db4 <__stack_chk_fail@plt>
   11f28:	andeq	r2, r2, r8, lsl lr
   11f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f30:	subs	r7, r1, #0
   11f34:	sub	sp, sp, #12
   11f38:	ble	12030 <__assert_fail@plt+0x1090>
   11f3c:	ldr	r9, [pc, #608]	; 121a4 <__assert_fail@plt+0x1204>
   11f40:	mov	sl, r0
   11f44:	mov	r4, r2
   11f48:	mov	r5, #1
   11f4c:	mov	r8, #0
   11f50:	mov	fp, r4
   11f54:	ldr	r6, [r4], #4
   11f58:	mov	r1, r9
   11f5c:	mov	r0, r6
   11f60:	bl	10d60 <strcmp@plt>
   11f64:	cmp	r0, #0
   11f68:	beq	11f84 <__assert_fail@plt+0xfe4>
   11f6c:	mov	r0, r6
   11f70:	mov	r1, sl
   11f74:	bl	10d60 <strcmp@plt>
   11f78:	cmp	r0, #0
   11f7c:	movne	r3, r5
   11f80:	bne	11f9c <__assert_fail@plt+0xffc>
   11f84:	cmp	r8, #0
   11f88:	bne	12038 <__assert_fail@plt+0x1098>
   11f8c:	cmp	r5, r7
   11f90:	mov	r3, r5
   11f94:	beq	12070 <__assert_fail@plt+0x10d0>
   11f98:	ldr	r8, [r4]
   11f9c:	cmp	r7, r3
   11fa0:	add	r5, r5, #1
   11fa4:	bgt	11f50 <__assert_fail@plt+0xfb0>
   11fa8:	cmp	r8, #0
   11fac:	beq	12030 <__assert_fail@plt+0x1090>
   11fb0:	bl	10ebc <getgid@plt>
   11fb4:	mov	r4, r0
   11fb8:	bl	10ebc <getgid@plt>
   11fbc:	mov	r1, r0
   11fc0:	mov	r0, r4
   11fc4:	bl	10f1c <setregid@plt>
   11fc8:	cmp	r0, #0
   11fcc:	bne	120b0 <__assert_fail@plt+0x1110>
   11fd0:	bl	10d84 <getuid@plt>
   11fd4:	mov	r4, r0
   11fd8:	bl	10d84 <getuid@plt>
   11fdc:	mov	r1, r0
   11fe0:	mov	r0, r4
   11fe4:	bl	10e98 <setreuid@plt>
   11fe8:	subs	r4, r0, #0
   11fec:	bne	120b0 <__assert_fail@plt+0x1110>
   11ff0:	ldrb	r3, [r8]
   11ff4:	cmp	r3, #47	; 0x2f
   11ff8:	bne	1217c <__assert_fail@plt+0x11dc>
   11ffc:	mov	r1, r4
   12000:	mov	r0, r8
   12004:	bl	10ef8 <access@plt>
   12008:	subs	r5, r0, #0
   1200c:	bne	12168 <__assert_fail@plt+0x11c8>
   12010:	mov	r0, r8
   12014:	bl	10dd8 <chdir@plt>
   12018:	subs	r4, r0, #0
   1201c:	bne	12154 <__assert_fail@plt+0x11b4>
   12020:	mov	r0, r8
   12024:	bl	10e08 <chroot@plt>
   12028:	cmp	r0, #0
   1202c:	bne	12100 <__assert_fail@plt+0x1160>
   12030:	add	sp, sp, #12
   12034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12038:	ldr	r3, [pc, #360]	; 121a8 <__assert_fail@plt+0x1208>
   1203c:	mov	r2, #5
   12040:	ldr	r1, [pc, #356]	; 121ac <__assert_fail@plt+0x120c>
   12044:	mov	r0, #0
   12048:	ldr	r4, [r3]
   1204c:	bl	10d9c <dcgettext@plt>
   12050:	ldr	r3, [pc, #344]	; 121b0 <__assert_fail@plt+0x1210>
   12054:	mov	r1, #1
   12058:	ldr	r3, [r3]
   1205c:	mov	r2, r0
   12060:	mov	r0, r4
   12064:	bl	10eec <__fprintf_chk@plt>
   12068:	mov	r0, #3
   1206c:	bl	10e80 <exit@plt>
   12070:	ldr	r3, [pc, #304]	; 121a8 <__assert_fail@plt+0x1208>
   12074:	mov	r2, #5
   12078:	ldr	r1, [pc, #308]	; 121b4 <__assert_fail@plt+0x1214>
   1207c:	mov	r0, r8
   12080:	ldr	r4, [r3]
   12084:	bl	10d9c <dcgettext@plt>
   12088:	ldr	r3, [pc, #288]	; 121b0 <__assert_fail@plt+0x1210>
   1208c:	ldr	r2, [fp]
   12090:	mov	r1, #1
   12094:	ldr	r3, [r3]
   12098:	str	r2, [sp]
   1209c:	mov	r2, r0
   120a0:	mov	r0, r4
   120a4:	bl	10eec <__fprintf_chk@plt>
   120a8:	mov	r0, #3
   120ac:	bl	10e80 <exit@plt>
   120b0:	ldr	r3, [pc, #240]	; 121a8 <__assert_fail@plt+0x1208>
   120b4:	mov	r2, #5
   120b8:	ldr	r1, [pc, #248]	; 121b8 <__assert_fail@plt+0x1218>
   120bc:	mov	r0, #0
   120c0:	ldr	r4, [r3]
   120c4:	bl	10d9c <dcgettext@plt>
   120c8:	ldr	r3, [pc, #224]	; 121b0 <__assert_fail@plt+0x1210>
   120cc:	ldr	r6, [r3]
   120d0:	mov	r5, r0
   120d4:	bl	10eb0 <__errno_location@plt>
   120d8:	ldr	r0, [r0]
   120dc:	bl	10e38 <strerror@plt>
   120e0:	mov	r3, r6
   120e4:	mov	r2, r5
   120e8:	mov	r1, #1
   120ec:	str	r0, [sp]
   120f0:	mov	r0, r4
   120f4:	bl	10eec <__fprintf_chk@plt>
   120f8:	mov	r0, #1
   120fc:	bl	10e80 <exit@plt>
   12100:	ldr	r3, [pc, #160]	; 121a8 <__assert_fail@plt+0x1208>
   12104:	ldr	r1, [pc, #176]	; 121bc <__assert_fail@plt+0x121c>
   12108:	mov	r0, r4
   1210c:	mov	r2, #5
   12110:	ldr	r4, [r3]
   12114:	bl	10d9c <dcgettext@plt>
   12118:	ldr	r3, [pc, #144]	; 121b0 <__assert_fail@plt+0x1210>
   1211c:	ldr	r6, [r3]
   12120:	mov	r5, r0
   12124:	bl	10eb0 <__errno_location@plt>
   12128:	ldr	r0, [r0]
   1212c:	bl	10e38 <strerror@plt>
   12130:	mov	r3, r6
   12134:	mov	r2, r5
   12138:	str	r8, [sp]
   1213c:	mov	r1, #1
   12140:	str	r0, [sp, #4]
   12144:	mov	r0, r4
   12148:	bl	10eec <__fprintf_chk@plt>
   1214c:	mov	r0, #3
   12150:	bl	10e80 <exit@plt>
   12154:	ldr	r3, [pc, #76]	; 121a8 <__assert_fail@plt+0x1208>
   12158:	mov	r0, r5
   1215c:	mov	r2, #5
   12160:	ldr	r1, [pc, #88]	; 121c0 <__assert_fail@plt+0x1220>
   12164:	b	12110 <__assert_fail@plt+0x1170>
   12168:	ldr	r3, [pc, #56]	; 121a8 <__assert_fail@plt+0x1208>
   1216c:	mov	r0, r4
   12170:	mov	r2, #5
   12174:	ldr	r1, [pc, #72]	; 121c4 <__assert_fail@plt+0x1224>
   12178:	b	12110 <__assert_fail@plt+0x1170>
   1217c:	ldr	r3, [pc, #36]	; 121a8 <__assert_fail@plt+0x1208>
   12180:	ldr	r1, [pc, #64]	; 121c8 <__assert_fail@plt+0x1228>
   12184:	mov	r2, #5
   12188:	ldr	r4, [r3]
   1218c:	bl	10d9c <dcgettext@plt>
   12190:	ldr	r3, [pc, #24]	; 121b0 <__assert_fail@plt+0x1210>
   12194:	str	r8, [sp]
   12198:	mov	r1, #1
   1219c:	ldr	r3, [r3]
   121a0:	b	1209c <__assert_fail@plt+0x10fc>
   121a4:	andeq	r2, r1, r8, lsr #17
   121a8:	andeq	r3, r2, r0, lsl r0
   121ac:			; <UNDEFINED> instruction: 0x000128b0
   121b0:	strheq	r3, [r2], -r0
   121b4:	ldrdeq	r2, [r1], -r0
   121b8:	strdeq	r2, [r1], -r8
   121bc:	muleq	r1, r8, r9
   121c0:	andeq	r2, r1, r8, ror #18
   121c4:	andeq	r2, r1, ip, lsr r9
   121c8:	andeq	r2, r1, ip, lsl r9
   121cc:	push	{r4, r5, r6, r7, r8, lr}
   121d0:	sub	sp, sp, #8
   121d4:	ldr	r5, [pc, #132]	; 12260 <__assert_fail@plt+0x12c0>
   121d8:	mov	r6, r0
   121dc:	mov	r8, r1
   121e0:	ldr	r3, [r5]
   121e4:	mov	r4, #0
   121e8:	str	r3, [sp, #4]
   121ec:	bl	10eb0 <__errno_location@plt>
   121f0:	mov	r2, r4
   121f4:	mov	r1, sp
   121f8:	str	r4, [r0]
   121fc:	mov	r7, r0
   12200:	mov	r0, r6
   12204:	bl	10e8c <strtoul@plt>
   12208:	ldrb	r2, [r6]
   1220c:	cmp	r2, r4
   12210:	beq	12254 <__assert_fail@plt+0x12b4>
   12214:	ldr	r3, [sp]
   12218:	ldrb	r2, [r3]
   1221c:	cmp	r2, r4
   12220:	movne	r0, r4
   12224:	bne	1223c <__assert_fail@plt+0x129c>
   12228:	ldr	r3, [r7]
   1222c:	cmp	r3, #34	; 0x22
   12230:	beq	12254 <__assert_fail@plt+0x12b4>
   12234:	str	r0, [r8]
   12238:	mov	r0, #1
   1223c:	ldr	r2, [sp, #4]
   12240:	ldr	r3, [r5]
   12244:	cmp	r2, r3
   12248:	bne	1225c <__assert_fail@plt+0x12bc>
   1224c:	add	sp, sp, #8
   12250:	pop	{r4, r5, r6, r7, r8, pc}
   12254:	mov	r0, r2
   12258:	b	1223c <__assert_fail@plt+0x129c>
   1225c:	bl	10db4 <__stack_chk_fail@plt>
   12260:	andeq	r2, r2, r8, lsl lr
   12264:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12268:	mov	r7, r0
   1226c:	ldr	r6, [pc, #72]	; 122bc <__assert_fail@plt+0x131c>
   12270:	ldr	r5, [pc, #72]	; 122c0 <__assert_fail@plt+0x1320>
   12274:	add	r6, pc, r6
   12278:	add	r5, pc, r5
   1227c:	sub	r6, r6, r5
   12280:	mov	r8, r1
   12284:	mov	r9, r2
   12288:	bl	10d28 <_init@@Base>
   1228c:	asrs	r6, r6, #2
   12290:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12294:	mov	r4, #0
   12298:	add	r4, r4, #1
   1229c:	ldr	r3, [r5], #4
   122a0:	mov	r2, r9
   122a4:	mov	r1, r8
   122a8:	mov	r0, r7
   122ac:	blx	r3
   122b0:	cmp	r6, r4
   122b4:	bne	12298 <__assert_fail@plt+0x12f8>
   122b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122bc:	muleq	r1, r8, fp
   122c0:	muleq	r1, r0, fp
   122c4:	bx	lr

Disassembly of section .fini:

000122c8 <_fini@@Base>:
   122c8:	push	{r3, lr}
   122cc:	pop	{r3, pc}
