
raspbian-preinstalled/symcryptrun:     file format elf32-littlearm


Disassembly of section .init:

00012078 <.init>:
   12078:	push	{r3, lr}
   1207c:	bl	12cb4 <__assert_fail@plt+0x4b4>
   12080:	pop	{r3, pc}

Disassembly of section .plt:

00012084 <gcry_xmalloc@plt-0x14>:
   12084:	push	{lr}		; (str lr, [sp, #-4]!)
   12088:	ldr	lr, [pc, #4]	; 12094 <gcry_xmalloc@plt-0x4>
   1208c:	add	lr, pc, lr
   12090:	ldr	pc, [lr, #8]!
   12094:	ldrdeq	r3, [r2], -ip

00012098 <gcry_xmalloc@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #143360	; 0x23000
   120a0:	ldr	pc, [ip, #3292]!	; 0xcdc

000120a4 <raise@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #143360	; 0x23000
   120ac:	ldr	pc, [ip, #3284]!	; 0xcd4

000120b0 <gpgrt_funlockfile@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #143360	; 0x23000
   120b8:	ldr	pc, [ip, #3276]!	; 0xccc

000120bc <gcry_malloc@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #143360	; 0x23000
   120c4:	ldr	pc, [ip, #3268]!	; 0xcc4

000120c8 <gpgrt_write@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #143360	; 0x23000
   120d0:	ldr	pc, [ip, #3260]!	; 0xcbc

000120d4 <getpwnam@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #143360	; 0x23000
   120dc:	ldr	pc, [ip, #3252]!	; 0xcb4

000120e0 <fsync@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #143360	; 0x23000
   120e8:	ldr	pc, [ip, #3244]!	; 0xcac

000120ec <iconv_close@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #143360	; 0x23000
   120f4:	ldr	pc, [ip, #3236]!	; 0xca4

000120f8 <iconv@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #143360	; 0x23000
   12100:	ldr	pc, [ip, #3228]!	; 0xc9c

00012104 <strcmp@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #143360	; 0x23000
   1210c:	ldr	pc, [ip, #3220]!	; 0xc94

00012110 <gpgrt_vfprintf_unlocked@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #143360	; 0x23000
   12118:	ldr	pc, [ip, #3212]!	; 0xc8c

0001211c <strtol@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #143360	; 0x23000
   12124:	ldr	pc, [ip, #3204]!	; 0xc84

00012128 <getpwuid@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #143360	; 0x23000
   12130:	ldr	pc, [ip, #3196]!	; 0xc7c

00012134 <strcspn@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #143360	; 0x23000
   1213c:	ldr	pc, [ip, #3188]!	; 0xc74

00012140 <setrlimit64@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #143360	; 0x23000
   12148:	ldr	pc, [ip, #3180]!	; 0xc6c

0001214c <read@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #143360	; 0x23000
   12154:	ldr	pc, [ip, #3172]!	; 0xc64

00012158 <fflush@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #143360	; 0x23000
   12160:	ldr	pc, [ip, #3164]!	; 0xc5c

00012164 <getuid@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #143360	; 0x23000
   1216c:	ldr	pc, [ip, #3156]!	; 0xc54

00012170 <sigprocmask@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #143360	; 0x23000
   12178:	ldr	pc, [ip, #3148]!	; 0xc4c

0001217c <memmove@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #143360	; 0x23000
   12184:	ldr	pc, [ip, #3140]!	; 0xc44

00012188 <__memmove_chk@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #143360	; 0x23000
   12190:	ldr	pc, [ip, #3132]!	; 0xc3c

00012194 <free@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #143360	; 0x23000
   1219c:	ldr	pc, [ip, #3124]!	; 0xc34

000121a0 <_gpgrt_putc_overflow@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #143360	; 0x23000
   121a8:	ldr	pc, [ip, #3116]!	; 0xc2c

000121ac <nanosleep@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #143360	; 0x23000
   121b4:	ldr	pc, [ip, #3108]!	; 0xc24

000121b8 <ferror@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #143360	; 0x23000
   121c0:	ldr	pc, [ip, #3100]!	; 0xc1c

000121c4 <inet_pton@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #143360	; 0x23000
   121cc:	ldr	pc, [ip, #3092]!	; 0xc14

000121d0 <_exit@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #143360	; 0x23000
   121d8:	ldr	pc, [ip, #3084]!	; 0xc0c

000121dc <memcpy@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #143360	; 0x23000
   121e4:	ldr	pc, [ip, #3076]!	; 0xc04

000121e8 <gpgrt_read@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #143360	; 0x23000
   121f0:	ldr	pc, [ip, #3068]!	; 0xbfc

000121f4 <signal@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #143360	; 0x23000
   121fc:	ldr	pc, [ip, #3060]!	; 0xbf4

00012200 <time@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #143360	; 0x23000
   12208:	ldr	pc, [ip, #3052]!	; 0xbec

0001220c <rmdir@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #143360	; 0x23000
   12214:	ldr	pc, [ip, #3044]!	; 0xbe4

00012218 <gcry_free@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #143360	; 0x23000
   12220:	ldr	pc, [ip, #3036]!	; 0xbdc

00012224 <memcmp@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #143360	; 0x23000
   1222c:	ldr	pc, [ip, #3028]!	; 0xbd4

00012230 <select@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #143360	; 0x23000
   12238:	ldr	pc, [ip, #3020]!	; 0xbcc

0001223c <sleep@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #143360	; 0x23000
   12244:	ldr	pc, [ip, #3012]!	; 0xbc4

00012248 <stpcpy@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #143360	; 0x23000
   12250:	ldr	pc, [ip, #3004]!	; 0xbbc

00012254 <dcgettext@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #143360	; 0x23000
   1225c:	ldr	pc, [ip, #2996]!	; 0xbb4

00012260 <__stack_chk_fail@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #143360	; 0x23000
   12268:	ldr	pc, [ip, #2988]!	; 0xbac

0001226c <gpgrt_set_alloc_func@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #143360	; 0x23000
   12274:	ldr	pc, [ip, #2980]!	; 0xba4

00012278 <unlink@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #143360	; 0x23000
   12280:	ldr	pc, [ip, #2972]!	; 0xb9c

00012284 <dup2@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #143360	; 0x23000
   1228c:	ldr	pc, [ip, #2964]!	; 0xb94

00012290 <getrlimit64@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #143360	; 0x23000
   12298:	ldr	pc, [ip, #2956]!	; 0xb8c

0001229c <gpgrt_fflush@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #143360	; 0x23000
   122a4:	ldr	pc, [ip, #2948]!	; 0xb84

000122a8 <dup@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #143360	; 0x23000
   122b0:	ldr	pc, [ip, #2940]!	; 0xb7c

000122b4 <__fdelt_chk@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #143360	; 0x23000
   122bc:	ldr	pc, [ip, #2932]!	; 0xb74

000122c0 <textdomain@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #143360	; 0x23000
   122c8:	ldr	pc, [ip, #2924]!	; 0xb6c

000122cc <tmpfile64@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #143360	; 0x23000
   122d4:	ldr	pc, [ip, #2916]!	; 0xb64

000122d8 <chdir@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #143360	; 0x23000
   122e0:	ldr	pc, [ip, #2908]!	; 0xb5c

000122e4 <gpgrt_fputs_unlocked@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #143360	; 0x23000
   122ec:	ldr	pc, [ip, #2900]!	; 0xb54

000122f0 <__fxstat64@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #143360	; 0x23000
   122f8:	ldr	pc, [ip, #2892]!	; 0xb4c

000122fc <sigaction@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #143360	; 0x23000
   12304:	ldr	pc, [ip, #2884]!	; 0xb44

00012308 <gpg_err_code_from_errno@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #143360	; 0x23000
   12310:	ldr	pc, [ip, #2876]!	; 0xb3c

00012314 <fwrite@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #143360	; 0x23000
   1231c:	ldr	pc, [ip, #2868]!	; 0xb34

00012320 <lseek64@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #143360	; 0x23000
   12328:	ldr	pc, [ip, #2860]!	; 0xb2c

0001232c <gcry_check_version@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #143360	; 0x23000
   12334:	ldr	pc, [ip, #2852]!	; 0xb24

00012338 <waitpid@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #143360	; 0x23000
   12340:	ldr	pc, [ip, #2844]!	; 0xb1c

00012344 <strcpy@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #143360	; 0x23000
   1234c:	ldr	pc, [ip, #2836]!	; 0xb14

00012350 <fread@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #143360	; 0x23000
   12358:	ldr	pc, [ip, #2828]!	; 0xb0c

0001235c <bind_textdomain_codeset@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #143360	; 0x23000
   12364:	ldr	pc, [ip, #2820]!	; 0xb04

00012368 <gpgrt_flockfile@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #143360	; 0x23000
   12370:	ldr	pc, [ip, #2812]!	; 0xafc

00012374 <gpgrt_fclose@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #143360	; 0x23000
   1237c:	ldr	pc, [ip, #2804]!	; 0xaf4

00012380 <gpgrt_setvbuf@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #143360	; 0x23000
   12388:	ldr	pc, [ip, #2796]!	; 0xaec

0001238c <assuan_transact@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #143360	; 0x23000
   12394:	ldr	pc, [ip, #2788]!	; 0xae4

00012398 <open64@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #143360	; 0x23000
   123a0:	ldr	pc, [ip, #2780]!	; 0xadc

000123a4 <getenv@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #143360	; 0x23000
   123ac:	ldr	pc, [ip, #2772]!	; 0xad4

000123b0 <gcry_malloc_secure@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #143360	; 0x23000
   123b8:	ldr	pc, [ip, #2764]!	; 0xacc

000123bc <gcry_xrealloc@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #143360	; 0x23000
   123c4:	ldr	pc, [ip, #2756]!	; 0xac4

000123c8 <malloc@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #143360	; 0x23000
   123d0:	ldr	pc, [ip, #2748]!	; 0xabc

000123d4 <iconv_open@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #143360	; 0x23000
   123dc:	ldr	pc, [ip, #2740]!	; 0xab4

000123e0 <__libc_start_main@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #143360	; 0x23000
   123e8:	ldr	pc, [ip, #2732]!	; 0xaac

000123ec <strerror@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #143360	; 0x23000
   123f4:	ldr	pc, [ip, #2724]!	; 0xaa4

000123f8 <localtime@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #143360	; 0x23000
   12400:	ldr	pc, [ip, #2716]!	; 0xa9c

00012404 <__ctype_tolower_loc@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #143360	; 0x23000
   1240c:	ldr	pc, [ip, #2708]!	; 0xa94

00012410 <__ctype_toupper_loc@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #143360	; 0x23000
   12418:	ldr	pc, [ip, #2700]!	; 0xa8c

0001241c <__gmon_start__@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #143360	; 0x23000
   12424:	ldr	pc, [ip, #2692]!	; 0xa84

00012428 <openpty@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #143360	; 0x23000
   12430:	ldr	pc, [ip, #2684]!	; 0xa7c

00012434 <rename@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #143360	; 0x23000
   1243c:	ldr	pc, [ip, #2676]!	; 0xa74

00012440 <kill@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #143360	; 0x23000
   12448:	ldr	pc, [ip, #2668]!	; 0xa6c

0001244c <__ctype_b_loc@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #143360	; 0x23000
   12454:	ldr	pc, [ip, #2660]!	; 0xa64

00012458 <_gpgrt_get_std_stream@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #143360	; 0x23000
   12460:	ldr	pc, [ip, #2652]!	; 0xa5c

00012464 <getcwd@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #143360	; 0x23000
   1246c:	ldr	pc, [ip, #2644]!	; 0xa54

00012470 <getpid@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #143360	; 0x23000
   12478:	ldr	pc, [ip, #2636]!	; 0xa4c

0001247c <exit@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #143360	; 0x23000
   12484:	ldr	pc, [ip, #2628]!	; 0xa44

00012488 <gpgrt_fprintf_unlocked@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #143360	; 0x23000
   12490:	ldr	pc, [ip, #2620]!	; 0xa3c

00012494 <assuan_new@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #143360	; 0x23000
   1249c:	ldr	pc, [ip, #2612]!	; 0xa34

000124a0 <strtoul@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #143360	; 0x23000
   124a8:	ldr	pc, [ip, #2604]!	; 0xa2c

000124ac <ttyname@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #143360	; 0x23000
   124b4:	ldr	pc, [ip, #2596]!	; 0xa24

000124b8 <strlen@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #143360	; 0x23000
   124c0:	ldr	pc, [ip, #2588]!	; 0xa1c

000124c4 <inotify_init@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #143360	; 0x23000
   124cc:	ldr	pc, [ip, #2580]!	; 0xa14

000124d0 <strchr@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #143360	; 0x23000
   124d8:	ldr	pc, [ip, #2572]!	; 0xa0c

000124dc <setenv@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #143360	; 0x23000
   124e4:	ldr	pc, [ip, #2564]!	; 0xa04

000124e8 <gpg_err_code_from_syserror@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #143360	; 0x23000
   124f0:	ldr	pc, [ip, #2556]!	; 0x9fc

000124f4 <execv@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #143360	; 0x23000
   124fc:	ldr	pc, [ip, #2548]!	; 0x9f4

00012500 <sigfillset@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #143360	; 0x23000
   12508:	ldr	pc, [ip, #2540]!	; 0x9ec

0001250c <inotify_add_watch@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #143360	; 0x23000
   12514:	ldr	pc, [ip, #2532]!	; 0x9e4

00012518 <__errno_location@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #143360	; 0x23000
   12520:	ldr	pc, [ip, #2524]!	; 0x9dc

00012524 <__strcat_chk@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #143360	; 0x23000
   1252c:	ldr	pc, [ip, #2516]!	; 0x9d4

00012530 <strncasecmp@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #143360	; 0x23000
   12538:	ldr	pc, [ip, #2508]!	; 0x9cc

0001253c <__sprintf_chk@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #143360	; 0x23000
   12544:	ldr	pc, [ip, #2500]!	; 0x9c4

00012548 <__cxa_atexit@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #143360	; 0x23000
   12550:	ldr	pc, [ip, #2492]!	; 0x9bc

00012554 <mkdir@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #143360	; 0x23000
   1255c:	ldr	pc, [ip, #2484]!	; 0x9b4

00012560 <memset@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #143360	; 0x23000
   12568:	ldr	pc, [ip, #2476]!	; 0x9ac

0001256c <gcry_calloc@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #143360	; 0x23000
   12574:	ldr	pc, [ip, #2468]!	; 0x9a4

00012578 <strncpy@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #143360	; 0x23000
   12580:	ldr	pc, [ip, #2460]!	; 0x99c

00012584 <gpgrt_vasprintf@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #143360	; 0x23000
   1258c:	ldr	pc, [ip, #2452]!	; 0x994

00012590 <gcry_cipher_algo_name@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #143360	; 0x23000
   12598:	ldr	pc, [ip, #2444]!	; 0x98c

0001259c <gpgrt_write_sanitized@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #143360	; 0x23000
   125a4:	ldr	pc, [ip, #2436]!	; 0x984

000125a8 <write@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #143360	; 0x23000
   125b0:	ldr	pc, [ip, #2428]!	; 0x97c

000125b4 <__fprintf_chk@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #143360	; 0x23000
   125bc:	ldr	pc, [ip, #2420]!	; 0x974

000125c0 <gcry_xstrdup@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #143360	; 0x23000
   125c8:	ldr	pc, [ip, #2412]!	; 0x96c

000125cc <access@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #143360	; 0x23000
   125d4:	ldr	pc, [ip, #2404]!	; 0x964

000125d8 <gcry_realloc@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #143360	; 0x23000
   125e0:	ldr	pc, [ip, #2396]!	; 0x95c

000125e4 <fclose@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #143360	; 0x23000
   125ec:	ldr	pc, [ip, #2388]!	; 0x954

000125f0 <gpgrt_fputs@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #143360	; 0x23000
   125f8:	ldr	pc, [ip, #2380]!	; 0x94c

000125fc <pipe@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #143360	; 0x23000
   12604:	ldr	pc, [ip, #2372]!	; 0x944

00012608 <gpgrt_snprintf@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #143360	; 0x23000
   12610:	ldr	pc, [ip, #2364]!	; 0x93c

00012614 <fcntl64@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #143360	; 0x23000
   1261c:	ldr	pc, [ip, #2356]!	; 0x934

00012620 <gcry_md_hash_buffer@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #143360	; 0x23000
   12628:	ldr	pc, [ip, #2348]!	; 0x92c

0001262c <setlocale@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #143360	; 0x23000
   12634:	ldr	pc, [ip, #2340]!	; 0x924

00012638 <sigemptyset@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #143360	; 0x23000
   12640:	ldr	pc, [ip, #2332]!	; 0x91c

00012644 <fork@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #143360	; 0x23000
   1264c:	ldr	pc, [ip, #2324]!	; 0x914

00012650 <assuan_release@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #143360	; 0x23000
   12658:	ldr	pc, [ip, #2316]!	; 0x90c

0001265c <__explicit_bzero_chk@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #143360	; 0x23000
   12664:	ldr	pc, [ip, #2308]!	; 0x904

00012668 <strrchr@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #143360	; 0x23000
   12670:	ldr	pc, [ip, #2300]!	; 0x8fc

00012674 <gcry_set_outofcore_handler@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #143360	; 0x23000
   1267c:	ldr	pc, [ip, #2292]!	; 0x8f4

00012680 <nl_langinfo@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #143360	; 0x23000
   12688:	ldr	pc, [ip, #2284]!	; 0x8ec

0001268c <gpg_err_set_errno@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #143360	; 0x23000
   12694:	ldr	pc, [ip, #2276]!	; 0x8e4

00012698 <gpg_strerror@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #143360	; 0x23000
   126a0:	ldr	pc, [ip, #2268]!	; 0x8dc

000126a4 <gpgrt_fopencookie@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #143360	; 0x23000
   126ac:	ldr	pc, [ip, #2260]!	; 0x8d4

000126b0 <putc@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #143360	; 0x23000
   126b8:	ldr	pc, [ip, #2252]!	; 0x8cc

000126bc <getsockname@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #143360	; 0x23000
   126c4:	ldr	pc, [ip, #2244]!	; 0x8c4

000126c8 <gpg_err_init@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #143360	; 0x23000
   126d0:	ldr	pc, [ip, #2236]!	; 0x8bc

000126d4 <remove@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #143360	; 0x23000
   126dc:	ldr	pc, [ip, #2228]!	; 0x8b4

000126e0 <fopen64@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #143360	; 0x23000
   126e8:	ldr	pc, [ip, #2220]!	; 0x8ac

000126ec <gcry_create_nonce@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #143360	; 0x23000
   126f4:	ldr	pc, [ip, #2212]!	; 0x8a4

000126f8 <gcry_control@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #143360	; 0x23000
   12700:	ldr	pc, [ip, #2204]!	; 0x89c

00012704 <strpbrk@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #143360	; 0x23000
   1270c:	ldr	pc, [ip, #2196]!	; 0x894

00012710 <socket@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #143360	; 0x23000
   12718:	ldr	pc, [ip, #2188]!	; 0x88c

0001271c <gpgrt_fprintf@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #143360	; 0x23000
   12724:	ldr	pc, [ip, #2180]!	; 0x884

00012728 <bindtextdomain@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #143360	; 0x23000
   12730:	ldr	pc, [ip, #2172]!	; 0x87c

00012734 <gcry_xcalloc@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #143360	; 0x23000
   1273c:	ldr	pc, [ip, #2164]!	; 0x874

00012740 <gcry_set_log_handler@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #143360	; 0x23000
   12748:	ldr	pc, [ip, #2156]!	; 0x86c

0001274c <gcry_set_fatalerror_handler@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #143360	; 0x23000
   12754:	ldr	pc, [ip, #2148]!	; 0x864

00012758 <chmod@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #143360	; 0x23000
   12760:	ldr	pc, [ip, #2140]!	; 0x85c

00012764 <__xstat64@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #143360	; 0x23000
   1276c:	ldr	pc, [ip, #2132]!	; 0x854

00012770 <isatty@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #143360	; 0x23000
   12778:	ldr	pc, [ip, #2124]!	; 0x84c

0001277c <unsetenv@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #143360	; 0x23000
   12784:	ldr	pc, [ip, #2116]!	; 0x844

00012788 <fputs@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #143360	; 0x23000
   12790:	ldr	pc, [ip, #2108]!	; 0x83c

00012794 <strncmp@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #143360	; 0x23000
   1279c:	ldr	pc, [ip, #2100]!	; 0x834

000127a0 <abort@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #143360	; 0x23000
   127a8:	ldr	pc, [ip, #2092]!	; 0x82c

000127ac <getc@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #143360	; 0x23000
   127b4:	ldr	pc, [ip, #2084]!	; 0x824

000127b8 <gpgrt_fileno@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #143360	; 0x23000
   127c0:	ldr	pc, [ip, #2076]!	; 0x81c

000127c4 <close@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #143360	; 0x23000
   127cc:	ldr	pc, [ip, #2068]!	; 0x814

000127d0 <gcry_strdup@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #143360	; 0x23000
   127d8:	ldr	pc, [ip, #2060]!	; 0x80c

000127dc <connect@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #143360	; 0x23000
   127e4:	ldr	pc, [ip, #2052]!	; 0x804

000127e8 <assuan_socket_connect@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #143360	; 0x23000
   127f0:	ldr	pc, [ip, #2044]!	; 0x7fc

000127f4 <login_tty@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #143360	; 0x23000
   127fc:	ldr	pc, [ip, #2036]!	; 0x7f4

00012800 <__assert_fail@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #143360	; 0x23000
   12808:	ldr	pc, [ip, #2028]!	; 0x7ec

Disassembly of section .text:

00012810 <.text>:
   12810:	ldr	r3, [pc, #1040]	; 12c28 <__assert_fail@plt+0x428>
   12814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12818:	sub	sp, sp, #100	; 0x64
   1281c:	ldr	r3, [r3]
   12820:	str	r1, [sp, #24]
   12824:	str	r3, [sp, #92]	; 0x5c
   12828:	str	r0, [sp, #28]
   1282c:	bl	19a6c <__assert_fail@plt+0x726c>
   12830:	ldr	r0, [pc, #1012]	; 12c2c <__assert_fail@plt+0x42c>
   12834:	bl	182e0 <__assert_fail@plt+0x5ae0>
   12838:	add	r4, sp, #24
   1283c:	mov	r1, #1
   12840:	ldr	r0, [pc, #1000]	; 12c30 <__assert_fail@plt+0x430>
   12844:	add	r5, sp, #28
   12848:	bl	19324 <__assert_fail@plt+0x6b24>
   1284c:	bl	140b0 <__assert_fail@plt+0x18b0>
   12850:	mov	r2, r4
   12854:	mov	r1, r5
   12858:	mov	r0, #0
   1285c:	bl	19a70 <__assert_fail@plt+0x7270>
   12860:	ldr	r6, [pc, #972]	; 12c34 <__assert_fail@plt+0x434>
   12864:	ldr	fp, [sp, #28]
   12868:	ldr	r8, [sp, #24]
   1286c:	mov	r3, #65	; 0x41
   12870:	mvn	r7, #500	; 0x1f4
   12874:	str	r3, [sp, #44]	; 0x2c
   12878:	mov	r3, #1
   1287c:	str	r5, [sp, #36]	; 0x24
   12880:	str	r4, [sp, #40]	; 0x28
   12884:	str	r3, [sp, #20]
   12888:	mov	r1, r6
   1288c:	add	r0, sp, #36	; 0x24
   12890:	bl	16d68 <__assert_fail@plt+0x4568>
   12894:	cmp	r0, #0
   12898:	beq	128c8 <__assert_fail@plt+0xc8>
   1289c:	ldr	r3, [sp, #52]	; 0x34
   128a0:	add	r2, r3, r7
   128a4:	cmp	r2, #1
   128a8:	movls	r3, #0
   128ac:	strls	r3, [sp, #20]
   128b0:	bls	12888 <__assert_fail@plt+0x88>
   128b4:	cmp	r3, #504	; 0x1f8
   128b8:	bne	12888 <__assert_fail@plt+0x88>
   128bc:	ldr	r0, [sp, #60]	; 0x3c
   128c0:	bl	1aa8c <__assert_fail@plt+0x828c>
   128c4:	b	12888 <__assert_fail@plt+0x88>
   128c8:	ldr	r3, [sp, #20]
   128cc:	mov	r9, r0
   128d0:	cmp	r3, #0
   128d4:	ldreq	r6, [sp, #20]
   128d8:	bne	12b98 <__assert_fail@plt+0x398>
   128dc:	mov	sl, #0
   128e0:	mov	r3, #1
   128e4:	cmp	r6, #0
   128e8:	str	fp, [sp, #28]
   128ec:	ldr	r7, [pc, #832]	; 12c34 <__assert_fail@plt+0x434>
   128f0:	ldr	r9, [pc, #832]	; 12c38 <__assert_fail@plt+0x438>
   128f4:	ldr	fp, [pc, #832]	; 12c3c <__assert_fail@plt+0x43c>
   128f8:	str	r8, [sp, #24]
   128fc:	str	r5, [sp, #36]	; 0x24
   12900:	str	sl, [sp, #16]
   12904:	str	r4, [sp, #40]	; 0x28
   12908:	str	r3, [sp, #44]	; 0x2c
   1290c:	beq	129b8 <__assert_fail@plt+0x1b8>
   12910:	mov	r5, #0
   12914:	ldr	r1, [pc, #804]	; 12c40 <__assert_fail@plt+0x440>
   12918:	mov	r0, r6
   1291c:	str	r5, [sp, #32]
   12920:	bl	126e0 <fopen64@plt>
   12924:	subs	r4, r0, #0
   12928:	strne	r5, [sp, #20]
   1292c:	beq	12a9c <__assert_fail@plt+0x29c>
   12930:	ldr	r5, [pc, #780]	; 12c44 <__assert_fail@plt+0x444>
   12934:	ldr	r8, [pc, #780]	; 12c48 <__assert_fail@plt+0x448>
   12938:	cmp	r4, #0
   1293c:	movne	r3, #1
   12940:	moveq	r3, #2
   12944:	str	r3, [sp, #12]
   12948:	str	r7, [sp]
   1294c:	add	r3, sp, #36	; 0x24
   12950:	add	r2, sp, #32
   12954:	mov	r1, r6
   12958:	mov	r0, r4
   1295c:	bl	17784 <__assert_fail@plt+0x4f84>
   12960:	cmp	r0, #0
   12964:	beq	12a7c <__assert_fail@plt+0x27c>
   12968:	ldr	r3, [sp, #52]	; 0x34
   1296c:	cmp	r3, #504	; 0x1f8
   12970:	beq	12948 <__assert_fail@plt+0x148>
   12974:	bgt	129e8 <__assert_fail@plt+0x1e8>
   12978:	cmp	r3, #500	; 0x1f4
   1297c:	beq	12a64 <__assert_fail@plt+0x264>
   12980:	ble	129c0 <__assert_fail@plt+0x1c0>
   12984:	ldr	r2, [pc, #704]	; 12c4c <__assert_fail@plt+0x44c>
   12988:	cmp	r3, r2
   1298c:	beq	12948 <__assert_fail@plt+0x148>
   12990:	bgt	12a4c <__assert_fail@plt+0x24c>
   12994:	cmp	r4, #0
   12998:	bne	12948 <__assert_fail@plt+0x148>
   1299c:	mov	r0, r6
   129a0:	bl	12218 <gcry_free@plt>
   129a4:	ldr	r0, [sp, #60]	; 0x3c
   129a8:	bl	125c0 <gcry_xstrdup@plt>
   129ac:	mov	r6, r0
   129b0:	cmp	r6, #0
   129b4:	bne	12910 <__assert_fail@plt+0x110>
   129b8:	mov	r4, r6
   129bc:	b	12930 <__assert_fail@plt+0x130>
   129c0:	cmp	r3, #113	; 0x71
   129c4:	moveq	r3, #1
   129c8:	streq	r3, [fp, #4]
   129cc:	beq	12948 <__assert_fail@plt+0x148>
   129d0:	cmp	r3, #118	; 0x76
   129d4:	bne	12a70 <__assert_fail@plt+0x270>
   129d8:	ldr	r3, [fp]
   129dc:	add	r3, r3, #1
   129e0:	str	r3, [fp]
   129e4:	b	12948 <__assert_fail@plt+0x148>
   129e8:	cmp	r3, r9
   129ec:	beq	12a40 <__assert_fail@plt+0x240>
   129f0:	ble	12a1c <__assert_fail@plt+0x21c>
   129f4:	cmp	r3, r5
   129f8:	moveq	sl, r5
   129fc:	beq	12948 <__assert_fail@plt+0x148>
   12a00:	movlt	sl, r3
   12a04:	blt	12948 <__assert_fail@plt+0x148>
   12a08:	cmp	r3, r8
   12a0c:	bne	12a70 <__assert_fail@plt+0x270>
   12a10:	ldr	r3, [sp, #60]	; 0x3c
   12a14:	str	r3, [fp, #24]
   12a18:	b	12948 <__assert_fail@plt+0x148>
   12a1c:	ldr	r2, [pc, #556]	; 12c50 <__assert_fail@plt+0x450>
   12a20:	cmp	r3, r2
   12a24:	beq	12a58 <__assert_fail@plt+0x258>
   12a28:	add	r2, r2, #1
   12a2c:	cmp	r3, r2
   12a30:	bne	12a70 <__assert_fail@plt+0x270>
   12a34:	ldr	r3, [sp, #60]	; 0x3c
   12a38:	str	r3, [fp, #16]
   12a3c:	b	12948 <__assert_fail@plt+0x148>
   12a40:	ldr	r3, [sp, #60]	; 0x3c
   12a44:	str	r3, [fp, #20]
   12a48:	b	12948 <__assert_fail@plt+0x148>
   12a4c:	ldr	r3, [sp, #60]	; 0x3c
   12a50:	str	r3, [sp, #16]
   12a54:	b	12948 <__assert_fail@plt+0x148>
   12a58:	ldr	r3, [sp, #60]	; 0x3c
   12a5c:	str	r3, [fp, #12]
   12a60:	b	12948 <__assert_fail@plt+0x148>
   12a64:	mov	r3, #0
   12a68:	str	r3, [fp]
   12a6c:	b	12948 <__assert_fail@plt+0x148>
   12a70:	ldr	r3, [sp, #12]
   12a74:	str	r3, [sp, #48]	; 0x30
   12a78:	b	12948 <__assert_fail@plt+0x148>
   12a7c:	cmp	r4, #0
   12a80:	mov	r3, r0
   12a84:	beq	12abc <__assert_fail@plt+0x2bc>
   12a88:	mov	r0, r4
   12a8c:	mov	r4, r3
   12a90:	mov	r6, r4
   12a94:	bl	125e4 <fclose@plt>
   12a98:	b	12938 <__assert_fail@plt+0x138>
   12a9c:	ldr	r3, [sp, #20]
   12aa0:	cmp	r3, r5
   12aa4:	beq	12bf4 <__assert_fail@plt+0x3f4>
   12aa8:	mov	r0, r6
   12aac:	bl	12218 <gcry_free@plt>
   12ab0:	mov	r6, r4
   12ab4:	str	r4, [sp, #20]
   12ab8:	b	12930 <__assert_fail@plt+0x130>
   12abc:	mov	r0, r6
   12ac0:	bl	12218 <gcry_free@plt>
   12ac4:	cmp	sl, #0
   12ac8:	beq	12bb0 <__assert_fail@plt+0x3b0>
   12acc:	mov	r0, #0
   12ad0:	bl	192b8 <__assert_fail@plt+0x6ab8>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12bec <__assert_fail@plt+0x3ec>
   12adc:	ldr	r3, [sp, #16]
   12ae0:	cmp	r3, #0
   12ae4:	beq	12af0 <__assert_fail@plt+0x2f0>
   12ae8:	mov	r0, r3
   12aec:	bl	192ec <__assert_fail@plt+0x6aec>
   12af0:	mov	r0, #28
   12af4:	bl	126f8 <gcry_control@plt>
   12af8:	bl	1b9c8 <__assert_fail@plt+0x91c8>
   12afc:	mov	r2, #0
   12b00:	mov	r1, #16384	; 0x4000
   12b04:	mov	r0, #24
   12b08:	bl	126f8 <gcry_control@plt>
   12b0c:	bl	1af08 <__assert_fail@plt+0x8708>
   12b10:	mov	r2, #0
   12b14:	ldr	r1, [pc, #312]	; 12c54 <__assert_fail@plt+0x454>
   12b18:	bl	151e8 <__assert_fail@plt+0x29e8>
   12b1c:	ldr	r4, [pc, #280]	; 12c3c <__assert_fail@plt+0x43c>
   12b20:	mov	r5, r0
   12b24:	bl	21880 <__assert_fail@plt+0xf080>
   12b28:	mov	r0, r5
   12b2c:	bl	12218 <gcry_free@plt>
   12b30:	ldr	r0, [r4, #12]
   12b34:	cmp	r0, #0
   12b38:	beq	12bd0 <__assert_fail@plt+0x3d0>
   12b3c:	ldr	r1, [pc, #276]	; 12c58 <__assert_fail@plt+0x458>
   12b40:	bl	12104 <strcmp@plt>
   12b44:	cmp	r0, #0
   12b48:	beq	12b84 <__assert_fail@plt+0x384>
   12b4c:	mov	r2, #5
   12b50:	ldr	r1, [pc, #260]	; 12c5c <__assert_fail@plt+0x45c>
   12b54:	mov	r0, #0
   12b58:	bl	12254 <dcgettext@plt>
   12b5c:	ldr	r1, [r4, #12]
   12b60:	bl	195cc <__assert_fail@plt+0x6dcc>
   12b64:	mov	r0, #1
   12b68:	ldr	r3, [pc, #184]	; 12c28 <__assert_fail@plt+0x428>
   12b6c:	ldr	r2, [sp, #92]	; 0x5c
   12b70:	ldr	r3, [r3]
   12b74:	cmp	r2, r3
   12b78:	bne	12be8 <__assert_fail@plt+0x3e8>
   12b7c:	add	sp, sp, #100	; 0x64
   12b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b84:	mov	r0, sl
   12b88:	ldr	r2, [sp, #24]
   12b8c:	ldr	r1, [sp, #28]
   12b90:	bl	13d18 <__assert_fail@plt+0x1518>
   12b94:	b	12b68 <__assert_fail@plt+0x368>
   12b98:	bl	1ab04 <__assert_fail@plt+0x8304>
   12b9c:	mov	r2, r9
   12ba0:	ldr	r1, [pc, #184]	; 12c60 <__assert_fail@plt+0x460>
   12ba4:	bl	151e8 <__assert_fail@plt+0x29e8>
   12ba8:	mov	r6, r0
   12bac:	b	128dc <__assert_fail@plt+0xdc>
   12bb0:	mov	r2, #5
   12bb4:	ldr	r1, [pc, #168]	; 12c64 <__assert_fail@plt+0x464>
   12bb8:	mov	r0, sl
   12bbc:	bl	12254 <dcgettext@plt>
   12bc0:	ldr	r2, [pc, #160]	; 12c68 <__assert_fail@plt+0x468>
   12bc4:	ldr	r1, [pc, #160]	; 12c6c <__assert_fail@plt+0x46c>
   12bc8:	bl	195cc <__assert_fail@plt+0x6dcc>
   12bcc:	b	12acc <__assert_fail@plt+0x2cc>
   12bd0:	mov	r2, #5
   12bd4:	ldr	r1, [pc, #148]	; 12c70 <__assert_fail@plt+0x470>
   12bd8:	bl	12254 <dcgettext@plt>
   12bdc:	bl	195cc <__assert_fail@plt+0x6dcc>
   12be0:	mov	r0, #1
   12be4:	b	12b68 <__assert_fail@plt+0x368>
   12be8:	bl	12260 <__stack_chk_fail@plt>
   12bec:	mov	r0, #1
   12bf0:	bl	1247c <exit@plt>
   12bf4:	mov	r2, #5
   12bf8:	ldr	r1, [pc, #116]	; 12c74 <__assert_fail@plt+0x474>
   12bfc:	bl	12254 <dcgettext@plt>
   12c00:	mov	r4, r0
   12c04:	bl	12518 <__errno_location@plt>
   12c08:	ldr	r0, [r0]
   12c0c:	bl	123ec <strerror@plt>
   12c10:	mov	r1, r6
   12c14:	mov	r2, r0
   12c18:	mov	r0, r4
   12c1c:	bl	195cc <__assert_fail@plt+0x6dcc>
   12c20:	mov	r0, #1
   12c24:	bl	1247c <exit@plt>
   12c28:	andeq	r5, r3, r8, asr #22
   12c2c:	andeq	r2, r1, r8, ror #26
   12c30:	andeq	r2, r2, r0, ror #12
   12c34:	andeq	r6, r3, r8
   12c38:	strdeq	r0, [r0], -fp
   12c3c:	andeq	r6, r3, r8, lsl #6
   12c40:	andeq	r2, r2, r0, ror r9
   12c44:	strdeq	r0, [r0], -sp
   12c48:	strdeq	r0, [r0], -lr
   12c4c:	strdeq	r0, [r0], -r6
   12c50:	strdeq	r0, [r0], -r9
   12c54:	ldrdeq	r2, [r2], -r0
   12c58:	strdeq	r2, [r2], -r0
   12c5c:	strdeq	r2, [r2], -ip
   12c60:	andeq	r2, r2, ip, ror #12
   12c64:	muleq	r2, r8, r6
   12c68:			; <UNDEFINED> instruction: 0x000226b8
   12c6c:	andeq	r2, r2, r4, asr #13
   12c70:	ldrdeq	r2, [r2], -ip
   12c74:	andeq	r2, r2, r0, lsl #13
   12c78:	mov	fp, #0
   12c7c:	mov	lr, #0
   12c80:	pop	{r1}		; (ldr r1, [sp], #4)
   12c84:	mov	r2, sp
   12c88:	push	{r2}		; (str r2, [sp, #-4]!)
   12c8c:	push	{r0}		; (str r0, [sp, #-4]!)
   12c90:	ldr	ip, [pc, #16]	; 12ca8 <__assert_fail@plt+0x4a8>
   12c94:	push	{ip}		; (str ip, [sp, #-4]!)
   12c98:	ldr	r0, [pc, #12]	; 12cac <__assert_fail@plt+0x4ac>
   12c9c:	ldr	r3, [pc, #12]	; 12cb0 <__assert_fail@plt+0x4b0>
   12ca0:	bl	123e0 <__libc_start_main@plt>
   12ca4:	bl	127a0 <abort@plt>
   12ca8:	andeq	r2, r2, r4, ror #2
   12cac:	andeq	r2, r1, r0, lsl r8
   12cb0:	andeq	r2, r2, r4, lsl #2
   12cb4:	ldr	r3, [pc, #20]	; 12cd0 <__assert_fail@plt+0x4d0>
   12cb8:	ldr	r2, [pc, #20]	; 12cd4 <__assert_fail@plt+0x4d4>
   12cbc:	add	r3, pc, r3
   12cc0:	ldr	r2, [r3, r2]
   12cc4:	cmp	r2, #0
   12cc8:	bxeq	lr
   12ccc:	b	1241c <__gmon_start__@plt>
   12cd0:	andeq	r3, r2, ip, lsr #1
   12cd4:	andeq	r0, r0, r8, lsl #5
   12cd8:	ldr	r0, [pc, #24]	; 12cf8 <__assert_fail@plt+0x4f8>
   12cdc:	ldr	r3, [pc, #24]	; 12cfc <__assert_fail@plt+0x4fc>
   12ce0:	cmp	r3, r0
   12ce4:	bxeq	lr
   12ce8:	ldr	r3, [pc, #16]	; 12d00 <__assert_fail@plt+0x500>
   12cec:	cmp	r3, #0
   12cf0:	bxeq	lr
   12cf4:	bx	r3
   12cf8:	andeq	r6, r3, r0, asr r1
   12cfc:	andeq	r6, r3, r0, asr r1
   12d00:	andeq	r0, r0, r0
   12d04:	ldr	r0, [pc, #36]	; 12d30 <__assert_fail@plt+0x530>
   12d08:	ldr	r1, [pc, #36]	; 12d34 <__assert_fail@plt+0x534>
   12d0c:	sub	r1, r1, r0
   12d10:	asr	r1, r1, #2
   12d14:	add	r1, r1, r1, lsr #31
   12d18:	asrs	r1, r1, #1
   12d1c:	bxeq	lr
   12d20:	ldr	r3, [pc, #16]	; 12d38 <__assert_fail@plt+0x538>
   12d24:	cmp	r3, #0
   12d28:	bxeq	lr
   12d2c:	bx	r3
   12d30:	andeq	r6, r3, r0, asr r1
   12d34:	andeq	r6, r3, r0, asr r1
   12d38:	andeq	r0, r0, r0
   12d3c:	push	{r4, lr}
   12d40:	ldr	r4, [pc, #24]	; 12d60 <__assert_fail@plt+0x560>
   12d44:	ldrb	r3, [r4]
   12d48:	cmp	r3, #0
   12d4c:	popne	{r4, pc}
   12d50:	bl	12cd8 <__assert_fail@plt+0x4d8>
   12d54:	mov	r3, #1
   12d58:	strb	r3, [r4]
   12d5c:	pop	{r4, pc}
   12d60:	andeq	r6, r3, r0, ror #2
   12d64:	b	12d04 <__assert_fail@plt+0x504>
   12d68:	sub	r0, r0, #1
   12d6c:	cmp	r0, #40	; 0x28
   12d70:	ldrls	pc, [pc, r0, lsl #2]
   12d74:	b	12e78 <__assert_fail@plt+0x678>
   12d78:	andeq	r2, r1, r8, ror #28
   12d7c:	andeq	r2, r1, r8, ror lr
   12d80:	andeq	r2, r1, r8, ror lr
   12d84:	andeq	r2, r1, r8, ror lr
   12d88:	andeq	r2, r1, r8, ror lr
   12d8c:	andeq	r2, r1, r8, ror lr
   12d90:	andeq	r2, r1, r8, ror lr
   12d94:	andeq	r2, r1, r8, ror lr
   12d98:	andeq	r2, r1, r8, ror lr
   12d9c:	andeq	r2, r1, r8, ror lr
   12da0:	andeq	r2, r1, ip, lsl lr
   12da4:	andeq	r2, r1, r8, ror lr
   12da8:	andeq	r2, r1, r4, lsr #28
   12dac:	andeq	r2, r1, r8, ror lr
   12db0:	andeq	r2, r1, r8, ror lr
   12db4:	andeq	r2, r1, r8, ror lr
   12db8:	andeq	r2, r1, ip, lsr #28
   12dbc:	andeq	r2, r1, r8, ror lr
   12dc0:	andeq	r2, r1, r4, lsr lr
   12dc4:	andeq	r2, r1, r8, ror lr
   12dc8:	andeq	r2, r1, r8, ror lr
   12dcc:	andeq	r2, r1, r8, ror lr
   12dd0:	andeq	r2, r1, r8, ror lr
   12dd4:	andeq	r2, r1, r8, ror lr
   12dd8:	andeq	r2, r1, r8, ror lr
   12ddc:	andeq	r2, r1, r8, ror lr
   12de0:	andeq	r2, r1, r8, ror lr
   12de4:	andeq	r2, r1, r8, ror lr
   12de8:	andeq	r2, r1, r8, ror lr
   12dec:	andeq	r2, r1, r8, ror lr
   12df0:	andeq	r2, r1, r4, asr #28
   12df4:	andeq	r2, r1, ip, asr #28
   12df8:	andeq	r2, r1, r0, asr lr
   12dfc:	andeq	r2, r1, r8, ror lr
   12e00:	andeq	r2, r1, r8, ror lr
   12e04:	andeq	r2, r1, r8, ror lr
   12e08:	andeq	r2, r1, r8, ror lr
   12e0c:	andeq	r2, r1, r8, ror lr
   12e10:	andeq	r2, r1, r8, ror lr
   12e14:	andeq	r2, r1, r8, ror #28
   12e18:	andeq	r2, r1, r8, asr lr
   12e1c:	ldr	r0, [pc, #92]	; 12e80 <__assert_fail@plt+0x680>
   12e20:	bx	lr
   12e24:	ldr	r0, [pc, #88]	; 12e84 <__assert_fail@plt+0x684>
   12e28:	bx	lr
   12e2c:	ldr	r0, [pc, #84]	; 12e88 <__assert_fail@plt+0x688>
   12e30:	bx	lr
   12e34:	mov	r2, #5
   12e38:	ldr	r1, [pc, #76]	; 12e8c <__assert_fail@plt+0x68c>
   12e3c:	mov	r0, #0
   12e40:	b	12254 <dcgettext@plt>
   12e44:	ldr	r0, [pc, #68]	; 12e90 <__assert_fail@plt+0x690>
   12e48:	bx	lr
   12e4c:	b	1ab04 <__assert_fail@plt+0x8304>
   12e50:	ldr	r0, [pc, #60]	; 12e94 <__assert_fail@plt+0x694>
   12e54:	bx	lr
   12e58:	mov	r2, #5
   12e5c:	ldr	r1, [pc, #52]	; 12e98 <__assert_fail@plt+0x698>
   12e60:	mov	r0, #0
   12e64:	b	12254 <dcgettext@plt>
   12e68:	mov	r2, #5
   12e6c:	ldr	r1, [pc, #40]	; 12e9c <__assert_fail@plt+0x69c>
   12e70:	mov	r0, #0
   12e74:	b	12254 <dcgettext@plt>
   12e78:	mov	r0, #0
   12e7c:	bx	lr
   12e80:	andeq	r2, r2, r0, lsr #3
   12e84:	andeq	r2, r2, ip, asr #3
   12e88:			; <UNDEFINED> instruction: 0x000221b8
   12e8c:	ldrdeq	r2, [r2], -r4
   12e90:	andeq	r2, r2, r4, asr #3
   12e94:	andeq	r3, r2, r8, lsl pc
   12e98:	andeq	r2, r2, r4, lsr #4
   12e9c:	strdeq	r2, [r2], -r8
   12ea0:	push	{r4, r5, r6, lr}
   12ea4:	sub	sp, sp, #24
   12ea8:	ldr	r5, [pc, #264]	; 12fb8 <__assert_fail@plt+0x7b8>
   12eac:	cmp	r1, #0
   12eb0:	ldr	r3, [r5]
   12eb4:	str	r3, [sp, #20]
   12eb8:	beq	12f68 <__assert_fail@plt+0x768>
   12ebc:	mov	r6, r0
   12ec0:	bl	12644 <fork@plt>
   12ec4:	subs	r4, r0, #0
   12ec8:	beq	12f88 <__assert_fail@plt+0x788>
   12ecc:	bge	12f18 <__assert_fail@plt+0x718>
   12ed0:	mvn	r3, #0
   12ed4:	str	r3, [sp]
   12ed8:	mov	r2, #5
   12edc:	ldr	r1, [pc, #216]	; 12fbc <__assert_fail@plt+0x7bc>
   12ee0:	mov	r0, #0
   12ee4:	bl	12254 <dcgettext@plt>
   12ee8:	ldr	r3, [sp]
   12eec:	mov	r2, r6
   12ef0:	ldr	r1, [pc, #200]	; 12fc0 <__assert_fail@plt+0x7c0>
   12ef4:	bl	195cc <__assert_fail@plt+0x6dcc>
   12ef8:	mov	r0, r6
   12efc:	bl	12278 <unlink@plt>
   12f00:	mov	r0, #1
   12f04:	b	12f50 <__assert_fail@plt+0x750>
   12f08:	bl	12518 <__errno_location@plt>
   12f0c:	ldr	r3, [r0]
   12f10:	cmp	r3, #4
   12f14:	bne	12ed0 <__assert_fail@plt+0x6d0>
   12f18:	mov	r2, #0
   12f1c:	mov	r1, sp
   12f20:	mov	r0, r4
   12f24:	bl	12338 <waitpid@plt>
   12f28:	cmn	r0, #1
   12f2c:	beq	12f08 <__assert_fail@plt+0x708>
   12f30:	cmp	r4, r0
   12f34:	bne	12ed0 <__assert_fail@plt+0x6d0>
   12f38:	ldr	r3, [sp]
   12f3c:	ands	r2, r3, #127	; 0x7f
   12f40:	bne	12ed8 <__assert_fail@plt+0x6d8>
   12f44:	asr	r3, r3, #8
   12f48:	ands	r0, r3, #255	; 0xff
   12f4c:	bne	12f70 <__assert_fail@plt+0x770>
   12f50:	ldr	r2, [sp, #20]
   12f54:	ldr	r3, [r5]
   12f58:	cmp	r2, r3
   12f5c:	bne	12fb4 <__assert_fail@plt+0x7b4>
   12f60:	add	sp, sp, #24
   12f64:	pop	{r4, r5, r6, pc}
   12f68:	bl	12278 <unlink@plt>
   12f6c:	b	12f50 <__assert_fail@plt+0x750>
   12f70:	mov	r0, r2
   12f74:	ldr	r1, [pc, #72]	; 12fc4 <__assert_fail@plt+0x7c4>
   12f78:	mov	r2, #5
   12f7c:	bl	12254 <dcgettext@plt>
   12f80:	ldrb	r3, [sp, #1]
   12f84:	b	12eec <__assert_fail@plt+0x6ec>
   12f88:	ldr	r3, [pc, #48]	; 12fc0 <__assert_fail@plt+0x7c0>
   12f8c:	ldr	r2, [pc, #52]	; 12fc8 <__assert_fail@plt+0x7c8>
   12f90:	mov	r0, r3
   12f94:	add	r1, sp, #4
   12f98:	str	r6, [sp, #12]
   12f9c:	str	r4, [sp, #16]
   12fa0:	str	r3, [sp, #4]
   12fa4:	str	r2, [sp, #8]
   12fa8:	bl	124f4 <execv@plt>
   12fac:	mov	r0, #127	; 0x7f
   12fb0:	bl	121d0 <_exit@plt>
   12fb4:	bl	12260 <__stack_chk_fail@plt>
   12fb8:	andeq	r5, r3, r8, asr #22
   12fbc:	andeq	r2, r2, r8, ror #5
   12fc0:			; <UNDEFINED> instruction: 0x000222b4
   12fc4:	andeq	r2, r2, r8, asr #5
   12fc8:	andeq	r2, r2, r4, asr #5
   12fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fd0:	sub	sp, sp, #4096	; 0x1000
   12fd4:	ldr	sl, [pc, #620]	; 13248 <__assert_fail@plt+0xa48>
   12fd8:	sub	sp, sp, #20
   12fdc:	mov	r8, r0
   12fe0:	ldrb	r0, [r0]
   12fe4:	mov	fp, r2
   12fe8:	add	r2, sp, #4096	; 0x1000
   12fec:	ldr	r3, [sl]
   12ff0:	add	r2, r2, #12
   12ff4:	cmp	r0, #45	; 0x2d
   12ff8:	mov	r7, r1
   12ffc:	str	r3, [r2]
   13000:	bne	13010 <__assert_fail@plt+0x810>
   13004:	ldrb	r3, [r8, #1]
   13008:	cmp	r3, #0
   1300c:	beq	130f8 <__assert_fail@plt+0x8f8>
   13010:	ldr	r1, [pc, #564]	; 1324c <__assert_fail@plt+0xa4c>
   13014:	mov	r0, r8
   13018:	bl	126e0 <fopen64@plt>
   1301c:	subs	r5, r0, #0
   13020:	movne	r3, #0
   13024:	strne	r3, [sp, #4]
   13028:	beq	13210 <__assert_fail@plt+0xa10>
   1302c:	ldrb	r3, [r7]
   13030:	cmp	r3, #45	; 0x2d
   13034:	bne	13050 <__assert_fail@plt+0x850>
   13038:	ldrb	r3, [r7, #1]
   1303c:	cmp	r3, #0
   13040:	ldreq	r3, [pc, #520]	; 13250 <__assert_fail@plt+0xa50>
   13044:	moveq	r9, #1
   13048:	ldreq	r6, [r3]
   1304c:	beq	13088 <__assert_fail@plt+0x888>
   13050:	ldr	r1, [pc, #508]	; 13254 <__assert_fail@plt+0xa54>
   13054:	mov	r0, r7
   13058:	bl	126e0 <fopen64@plt>
   1305c:	subs	r6, r0, #0
   13060:	movne	r9, #0
   13064:	bne	13088 <__assert_fail@plt+0x888>
   13068:	b	13210 <__assert_fail@plt+0xa10>
   1306c:	mov	r3, r6
   13070:	mov	r2, r4
   13074:	mov	r1, #1
   13078:	add	r0, sp, #12
   1307c:	bl	12314 <fwrite@plt>
   13080:	cmp	r0, r4
   13084:	bne	1310c <__assert_fail@plt+0x90c>
   13088:	mov	r3, r5
   1308c:	mov	r2, #4096	; 0x1000
   13090:	mov	r1, #1
   13094:	add	r0, sp, #12
   13098:	bl	12350 <fread@plt>
   1309c:	subs	r4, r0, #0
   130a0:	bgt	1306c <__assert_fail@plt+0x86c>
   130a4:	bne	13158 <__assert_fail@plt+0x958>
   130a8:	mov	r0, r5
   130ac:	bl	121b8 <ferror@plt>
   130b0:	cmp	r0, #0
   130b4:	bne	13158 <__assert_fail@plt+0x958>
   130b8:	ldr	r3, [sp, #4]
   130bc:	cmp	r3, #0
   130c0:	beq	1318c <__assert_fail@plt+0x98c>
   130c4:	cmp	r9, #0
   130c8:	beq	131bc <__assert_fail@plt+0x9bc>
   130cc:	mov	r9, #0
   130d0:	add	r3, sp, #4096	; 0x1000
   130d4:	add	r3, r3, #12
   130d8:	ldr	r2, [r3]
   130dc:	ldr	r3, [sl]
   130e0:	mov	r0, r9
   130e4:	cmp	r2, r3
   130e8:	bne	13244 <__assert_fail@plt+0xa44>
   130ec:	add	sp, sp, #4096	; 0x1000
   130f0:	add	sp, sp, #20
   130f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130f8:	ldr	r3, [pc, #344]	; 13258 <__assert_fail@plt+0xa58>
   130fc:	mov	r2, #1
   13100:	str	r2, [sp, #4]
   13104:	ldr	r5, [r3]
   13108:	b	1302c <__assert_fail@plt+0x82c>
   1310c:	mov	r2, #5
   13110:	ldr	r1, [pc, #324]	; 1325c <__assert_fail@plt+0xa5c>
   13114:	mov	r0, #0
   13118:	bl	12254 <dcgettext@plt>
   1311c:	mov	r4, r0
   13120:	bl	12518 <__errno_location@plt>
   13124:	ldr	r0, [r0]
   13128:	bl	123ec <strerror@plt>
   1312c:	mov	r1, r7
   13130:	mov	r2, r0
   13134:	mov	r0, r4
   13138:	bl	195cc <__assert_fail@plt+0x6dcc>
   1313c:	cmp	r9, #0
   13140:	bne	130d0 <__assert_fail@plt+0x8d0>
   13144:	mov	r1, fp
   13148:	mov	r0, r7
   1314c:	bl	12ea0 <__assert_fail@plt+0x6a0>
   13150:	mov	r9, #1
   13154:	b	130d0 <__assert_fail@plt+0x8d0>
   13158:	ldr	r1, [pc, #256]	; 13260 <__assert_fail@plt+0xa60>
   1315c:	mov	r2, #5
   13160:	mov	r0, #0
   13164:	bl	12254 <dcgettext@plt>
   13168:	mov	r4, r0
   1316c:	bl	12518 <__errno_location@plt>
   13170:	ldr	r0, [r0]
   13174:	bl	123ec <strerror@plt>
   13178:	mov	r1, r8
   1317c:	mov	r2, r0
   13180:	mov	r0, r4
   13184:	bl	195cc <__assert_fail@plt+0x6dcc>
   13188:	b	1313c <__assert_fail@plt+0x93c>
   1318c:	mov	r0, r5
   13190:	bl	125e4 <fclose@plt>
   13194:	cmp	r0, #0
   13198:	beq	130c4 <__assert_fail@plt+0x8c4>
   1319c:	mov	r0, r5
   131a0:	bl	121b8 <ferror@plt>
   131a4:	cmp	r0, #0
   131a8:	beq	130c4 <__assert_fail@plt+0x8c4>
   131ac:	ldr	r0, [sp, #4]
   131b0:	mov	r2, #5
   131b4:	ldr	r1, [pc, #168]	; 13264 <__assert_fail@plt+0xa64>
   131b8:	b	13164 <__assert_fail@plt+0x964>
   131bc:	mov	r0, r6
   131c0:	bl	125e4 <fclose@plt>
   131c4:	cmp	r0, #0
   131c8:	beq	130cc <__assert_fail@plt+0x8cc>
   131cc:	mov	r0, r6
   131d0:	bl	121b8 <ferror@plt>
   131d4:	cmp	r0, #0
   131d8:	beq	130cc <__assert_fail@plt+0x8cc>
   131dc:	mov	r2, #5
   131e0:	ldr	r1, [pc, #124]	; 13264 <__assert_fail@plt+0xa64>
   131e4:	mov	r0, r9
   131e8:	bl	12254 <dcgettext@plt>
   131ec:	mov	r4, r0
   131f0:	bl	12518 <__errno_location@plt>
   131f4:	ldr	r0, [r0]
   131f8:	bl	123ec <strerror@plt>
   131fc:	mov	r1, r8
   13200:	mov	r2, r0
   13204:	mov	r0, r4
   13208:	bl	195cc <__assert_fail@plt+0x6dcc>
   1320c:	b	13144 <__assert_fail@plt+0x944>
   13210:	mov	r2, #5
   13214:	ldr	r1, [pc, #76]	; 13268 <__assert_fail@plt+0xa68>
   13218:	bl	12254 <dcgettext@plt>
   1321c:	mov	r9, #1
   13220:	mov	r4, r0
   13224:	bl	12518 <__errno_location@plt>
   13228:	ldr	r0, [r0]
   1322c:	bl	123ec <strerror@plt>
   13230:	mov	r1, r8
   13234:	mov	r2, r0
   13238:	mov	r0, r4
   1323c:	bl	195cc <__assert_fail@plt+0x6dcc>
   13240:	b	130d0 <__assert_fail@plt+0x8d0>
   13244:	bl	12260 <__stack_chk_fail@plt>
   13248:	andeq	r5, r3, r8, asr #22
   1324c:	andeq	r2, r2, ip, lsl #6
   13250:	andeq	r6, r3, ip, asr r1
   13254:	andeq	r2, r2, r4, lsr r3
   13258:	andeq	r6, r3, r8, asr r1
   1325c:	andeq	r2, r2, r8, lsr r3
   13260:	andeq	r2, r2, r4, asr r3
   13264:	andeq	r2, r2, r0, ror r3
   13268:	andeq	r2, r2, r0, lsl r3
   1326c:	push	{r4, r5, r6, r7, r8, lr}
   13270:	sub	sp, sp, #16
   13274:	ldr	r5, [pc, #252]	; 13378 <__assert_fail@plt+0xb78>
   13278:	subs	r8, r2, #0
   1327c:	mov	r4, r1
   13280:	ldr	r3, [r5]
   13284:	mov	r7, r0
   13288:	str	r3, [sp, #12]
   1328c:	movne	r3, #0
   13290:	strne	r3, [r8]
   13294:	bl	140e8 <__assert_fail@plt+0x18e8>
   13298:	cmp	r4, #0
   1329c:	mov	r6, r0
   132a0:	bne	13304 <__assert_fail@plt+0xb04>
   132a4:	mov	r2, #5
   132a8:	ldr	r1, [pc, #204]	; 1337c <__assert_fail@plt+0xb7c>
   132ac:	mov	r0, #0
   132b0:	bl	12254 <dcgettext@plt>
   132b4:	mov	r3, #0
   132b8:	add	r2, sp, #8
   132bc:	mov	r1, r4
   132c0:	str	r2, [sp, #4]
   132c4:	str	r3, [sp]
   132c8:	mov	r2, r0
   132cc:	mov	r0, r7
   132d0:	bl	218e4 <__assert_fail@plt+0xf0e4>
   132d4:	mov	r4, r0
   132d8:	mov	r0, r6
   132dc:	bl	14158 <__assert_fail@plt+0x1958>
   132e0:	cmp	r4, #0
   132e4:	beq	1331c <__assert_fail@plt+0xb1c>
   132e8:	ldr	r2, [sp, #12]
   132ec:	ldr	r3, [r5]
   132f0:	mov	r0, r4
   132f4:	cmp	r2, r3
   132f8:	bne	13374 <__assert_fail@plt+0xb74>
   132fc:	add	sp, sp, #16
   13300:	pop	{r4, r5, r6, r7, r8, pc}
   13304:	mov	r2, #5
   13308:	ldr	r1, [pc, #112]	; 13380 <__assert_fail@plt+0xb80>
   1330c:	mov	r0, #0
   13310:	bl	12254 <dcgettext@plt>
   13314:	mov	r4, r0
   13318:	b	132a4 <__assert_fail@plt+0xaa4>
   1331c:	ldr	r3, [sp, #8]
   13320:	mov	r2, #5
   13324:	cmp	r3, #0
   13328:	beq	13354 <__assert_fail@plt+0xb54>
   1332c:	ldr	r1, [pc, #80]	; 13384 <__assert_fail@plt+0xb84>
   13330:	mov	r0, r4
   13334:	bl	12254 <dcgettext@plt>
   13338:	mov	r6, r0
   1333c:	ldr	r0, [sp, #8]
   13340:	bl	12698 <gpg_strerror@plt>
   13344:	mov	r1, r0
   13348:	mov	r0, r6
   1334c:	bl	195cc <__assert_fail@plt+0x6dcc>
   13350:	b	132e8 <__assert_fail@plt+0xae8>
   13354:	ldr	r1, [pc, #44]	; 13388 <__assert_fail@plt+0xb88>
   13358:	mov	r0, r4
   1335c:	bl	12254 <dcgettext@plt>
   13360:	bl	19568 <__assert_fail@plt+0x6d68>
   13364:	cmp	r8, #0
   13368:	movne	r3, #1
   1336c:	strne	r3, [r8]
   13370:	b	132e8 <__assert_fail@plt+0xae8>
   13374:	bl	12260 <__stack_chk_fail@plt>
   13378:	andeq	r5, r3, r8, asr #22
   1337c:	andeq	r2, r2, r4, lsr #7
   13380:	andeq	r2, r2, r8, lsl #7
   13384:			; <UNDEFINED> instruction: 0x000223b0
   13388:	ldrdeq	r2, [r2], -ip
   1338c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13390:	sub	sp, sp, #4800	; 0x12c0
   13394:	ldr	ip, [pc, #2120]	; 13be4 <__assert_fail@plt+0x13e4>
   13398:	sub	sp, sp, #28
   1339c:	ldr	r6, [pc, #2116]	; 13be8 <__assert_fail@plt+0x13e8>
   133a0:	mov	r7, r3
   133a4:	add	r3, sp, #4800	; 0x12c0
   133a8:	add	r3, r3, #20
   133ac:	ldr	ip, [ip]
   133b0:	mov	r8, r0
   133b4:	ldr	r0, [r6, #20]
   133b8:	str	ip, [r3]
   133bc:	add	r3, sp, #4864	; 0x1300
   133c0:	cmp	r0, #0
   133c4:	ldr	r5, [r3]
   133c8:	beq	139b8 <__assert_fail@plt+0x11b8>
   133cc:	mov	r9, r2
   133d0:	mov	sl, r1
   133d4:	sub	r2, r0, #1
   133d8:	mov	r3, #0
   133dc:	b	133f0 <__assert_fail@plt+0xbf0>
   133e0:	add	r3, r4, r3, lsl #4
   133e4:	ands	r1, r3, #-268435456	; 0xf0000000
   133e8:	bicne	r3, r3, #-268435456	; 0xf0000000
   133ec:	eorne	r3, r3, r1, lsr #24
   133f0:	ldrb	r4, [r2, #1]!
   133f4:	cmp	r4, #0
   133f8:	bne	133e0 <__assert_fail@plt+0xbe0>
   133fc:	add	fp, r7, #10
   13400:	ldr	r2, [pc, #2020]	; 13bec <__assert_fail@plt+0x13ec>
   13404:	mov	r1, #40	; 0x28
   13408:	add	r0, sp, #172	; 0xac
   1340c:	lsl	fp, fp, #2
   13410:	bl	12608 <gpgrt_snprintf@plt>
   13414:	mov	r0, fp
   13418:	strb	r4, [sp, #211]	; 0xd3
   1341c:	bl	123c8 <malloc@plt>
   13420:	subs	r4, r0, #0
   13424:	beq	13a2c <__assert_fail@plt+0x122c>
   13428:	ldr	r2, [pc, #1984]	; 13bf0 <__assert_fail@plt+0x13f0>
   1342c:	ldr	r3, [r6, #16]
   13430:	cmp	r8, r2
   13434:	str	r3, [r4]
   13438:	ldr	r3, [r6, #20]
   1343c:	beq	13818 <__assert_fail@plt+0x1018>
   13440:	ldr	r1, [pc, #1964]	; 13bf4 <__assert_fail@plt+0x13f4>
   13444:	ldr	r0, [pc, #1964]	; 13bf8 <__assert_fail@plt+0x13f8>
   13448:	ldr	r2, [pc, #1964]	; 13bfc <__assert_fail@plt+0x13fc>
   1344c:	str	r3, [r4, #28]
   13450:	strd	r0, [r4, #4]
   13454:	ldr	r1, [pc, #1956]	; 13c00 <__assert_fail@plt+0x1400>
   13458:	ldr	r3, [pc, #1956]	; 13c04 <__assert_fail@plt+0x1404>
   1345c:	str	sl, [r4, #12]
   13460:	str	r9, [r4, #20]
   13464:	str	r2, [r4, #16]
   13468:	str	r3, [r4, #24]
   1346c:	add	r3, r4, fp
   13470:	cmp	r7, #0
   13474:	mov	r2, #0
   13478:	str	r1, [r4, #32]
   1347c:	str	r2, [r3, #-4]
   13480:	subne	r3, fp, #40	; 0x28
   13484:	subne	r2, fp, #4
   13488:	addne	r3, r5, r3
   1348c:	addne	r2, r4, r2
   13490:	beq	134a4 <__assert_fail@plt+0xca4>
   13494:	ldr	r1, [r3, #-4]!
   13498:	cmp	r3, r5
   1349c:	str	r1, [r2, #-4]!
   134a0:	bne	13494 <__assert_fail@plt+0xc94>
   134a4:	add	r0, sp, #36	; 0x24
   134a8:	bl	125fc <pipe@plt>
   134ac:	cmp	r0, #0
   134b0:	blt	13848 <__assert_fail@plt+0x1048>
   134b4:	mov	r9, #0
   134b8:	add	r1, sp, #24
   134bc:	sub	r0, r1, #4
   134c0:	str	r9, [sp]
   134c4:	mov	r3, r9
   134c8:	mov	r2, r9
   134cc:	bl	12428 <openpty@plt>
   134d0:	cmn	r0, #1
   134d4:	mov	r5, r0
   134d8:	beq	13b9c <__assert_fail@plt+0x139c>
   134dc:	ldr	r3, [sp, #20]
   134e0:	cmp	r3, #2
   134e4:	ble	13b88 <__assert_fail@plt+0x1388>
   134e8:	ldr	r3, [sp, #24]
   134ec:	cmp	r3, #2
   134f0:	ble	13b74 <__assert_fail@plt+0x1374>
   134f4:	ldr	r3, [sp, #36]	; 0x24
   134f8:	cmp	r3, #2
   134fc:	ble	13b60 <__assert_fail@plt+0x1360>
   13500:	ldr	r3, [sp, #40]	; 0x28
   13504:	cmp	r3, #2
   13508:	ble	13bd0 <__assert_fail@plt+0x13d0>
   1350c:	bl	12644 <fork@plt>
   13510:	subs	r3, r0, #0
   13514:	str	r3, [sp, #8]
   13518:	blt	139d0 <__assert_fail@plt+0x11d0>
   1351c:	beq	136d0 <__assert_fail@plt+0xed0>
   13520:	ldr	r0, [sp, #24]
   13524:	bl	127c4 <close@plt>
   13528:	ldr	r8, [pc, #1752]	; 13c08 <__assert_fail@plt+0x1408>
   1352c:	ldr	r0, [sp, #40]	; 0x28
   13530:	bl	127c4 <close@plt>
   13534:	mov	sl, r9
   13538:	mov	r0, r4
   1353c:	mov	r7, r9
   13540:	mov	r4, r9
   13544:	add	r5, sp, #168	; 0xa8
   13548:	bl	12194 <free@plt>
   1354c:	str	r9, [sp, #12]
   13550:	add	r3, sp, #40	; 0x28
   13554:	str	r4, [r3, #4]!
   13558:	cmp	r5, r3
   1355c:	bne	13554 <__assert_fail@plt+0xd54>
   13560:	cmp	sl, #0
   13564:	bne	1359c <__assert_fail@plt+0xd9c>
   13568:	ldr	r0, [sp, #20]
   1356c:	bl	122b4 <__fdelt_chk@plt>
   13570:	ldr	r3, [sp, #20]
   13574:	mov	r1, #1
   13578:	rsbs	r2, r3, #0
   1357c:	and	r2, r2, #31
   13580:	and	r3, r3, #31
   13584:	rsbpl	r3, r2, #0
   13588:	add	r2, sp, #728	; 0x2d8
   1358c:	add	r0, r2, r0, lsl #2
   13590:	ldr	r2, [r0, #-684]	; 0xfffffd54
   13594:	orr	r3, r2, r1, lsl r3
   13598:	str	r3, [r0, #-684]	; 0xfffffd54
   1359c:	cmp	r9, #0
   135a0:	bne	135d8 <__assert_fail@plt+0xdd8>
   135a4:	ldr	r0, [sp, #36]	; 0x24
   135a8:	bl	122b4 <__fdelt_chk@plt>
   135ac:	ldr	r3, [sp, #36]	; 0x24
   135b0:	mov	r1, #1
   135b4:	rsbs	r2, r3, #0
   135b8:	and	r2, r2, #31
   135bc:	and	r3, r3, #31
   135c0:	rsbpl	r3, r2, #0
   135c4:	add	r2, sp, #728	; 0x2d8
   135c8:	add	r0, r2, r0, lsl #2
   135cc:	ldr	r2, [r0, #-684]	; 0xfffffd54
   135d0:	orr	r3, r2, r1, lsl r3
   135d4:	str	r3, [r0, #-684]	; 0xfffffd54
   135d8:	mov	r3, #0
   135dc:	str	r4, [sp]
   135e0:	mov	r2, r3
   135e4:	add	r1, sp, #44	; 0x2c
   135e8:	mov	r0, #1024	; 0x400
   135ec:	bl	12230 <select@plt>
   135f0:	cmp	r0, #0
   135f4:	str	r0, [sp, #28]
   135f8:	blt	13900 <__assert_fail@plt+0x1100>
   135fc:	ldr	r0, [sp, #36]	; 0x24
   13600:	bl	122b4 <__fdelt_chk@plt>
   13604:	ldr	r2, [sp, #36]	; 0x24
   13608:	mov	fp, #1
   1360c:	rsbs	r1, r2, #0
   13610:	and	r1, r1, #31
   13614:	and	r3, r2, #31
   13618:	rsbpl	r3, r1, #0
   1361c:	add	r1, sp, #728	; 0x2d8
   13620:	add	r0, r1, r0, lsl #2
   13624:	ldr	r6, [r0, #-684]	; 0xfffffd54
   13628:	ands	r6, r6, fp, lsl r3
   1362c:	bne	136f8 <__assert_fail@plt+0xef8>
   13630:	ldr	r0, [sp, #20]
   13634:	bl	122b4 <__fdelt_chk@plt>
   13638:	ldr	r3, [sp, #20]
   1363c:	rsbs	r1, r3, #0
   13640:	and	r1, r1, #31
   13644:	and	r2, r3, #31
   13648:	rsbpl	r2, r1, #0
   1364c:	add	r1, sp, #728	; 0x2d8
   13650:	add	r0, r1, r0, lsl #2
   13654:	ldr	r1, [r0, #-684]	; 0xfffffd54
   13658:	ands	r2, r1, fp, lsl r2
   1365c:	bne	137c4 <__assert_fail@plt+0xfc4>
   13660:	eor	r3, r9, #1
   13664:	eor	r6, sl, #1
   13668:	orrs	r6, r6, r3
   1366c:	bne	13550 <__assert_fail@plt+0xd50>
   13670:	ldr	r0, [sp, #20]
   13674:	bl	127c4 <close@plt>
   13678:	ldr	r0, [sp, #36]	; 0x24
   1367c:	bl	127c4 <close@plt>
   13680:	mov	r2, r6
   13684:	add	r1, sp, #28
   13688:	ldr	r0, [sp, #8]
   1368c:	bl	12338 <waitpid@plt>
   13690:	cmp	r0, #0
   13694:	blt	13ad4 <__assert_fail@plt+0x12d4>
   13698:	beq	13b4c <__assert_fail@plt+0x134c>
   1369c:	ldr	r3, [sp, #28]
   136a0:	tst	r3, #127	; 0x7f
   136a4:	bne	13aac <__assert_fail@plt+0x12ac>
   136a8:	asr	r3, r3, #8
   136ac:	ands	r5, r3, #255	; 0xff
   136b0:	beq	13880 <__assert_fail@plt+0x1080>
   136b4:	add	r0, sp, #172	; 0xac
   136b8:	bl	21be4 <__assert_fail@plt+0xf3e4>
   136bc:	ldr	r3, [sp, #12]
   136c0:	cmp	r3, #2
   136c4:	movgt	r5, #2
   136c8:	movle	r5, #1
   136cc:	b	13880 <__assert_fail@plt+0x1080>
   136d0:	ldr	r0, [sp, #20]
   136d4:	bl	127c4 <close@plt>
   136d8:	ldr	r0, [sp, #36]	; 0x24
   136dc:	bl	127c4 <close@plt>
   136e0:	ldr	r0, [sp, #24]
   136e4:	bl	127f4 <login_tty@plt>
   136e8:	subs	r5, r0, #0
   136ec:	beq	138ac <__assert_fail@plt+0x10ac>
   136f0:	mov	r0, #1
   136f4:	bl	121d0 <_exit@plt>
   136f8:	mov	r0, r2
   136fc:	sub	r6, r1, #4
   13700:	rsb	r2, r7, #4080	; 0xff0
   13704:	add	r1, r6, r7
   13708:	add	r2, r2, #15
   1370c:	bl	1214c <read@plt>
   13710:	cmp	r0, #0
   13714:	str	r0, [sp, #28]
   13718:	blt	13aa0 <__assert_fail@plt+0x12a0>
   1371c:	add	r7, r7, r0
   13720:	b	13750 <__assert_fail@plt+0xf50>
   13724:	strb	r4, [fp], #1
   13728:	mov	r1, r6
   1372c:	mov	r0, r8
   13730:	bl	195cc <__assert_fail@plt+0x6dcc>
   13734:	sub	r3, fp, r6
   13738:	sub	r7, r7, r3
   1373c:	mov	r1, fp
   13740:	mov	r2, r7
   13744:	mov	r3, #4096	; 0x1000
   13748:	mov	r0, r6
   1374c:	bl	12188 <__memmove_chk@plt>
   13750:	add	r3, sp, #728	; 0x2d8
   13754:	add	r3, r3, r7
   13758:	mov	r1, #10
   1375c:	mov	r0, r6
   13760:	strb	r4, [r3, #-4]
   13764:	bl	124d0 <strchr@plt>
   13768:	subs	fp, r0, #0
   1376c:	bne	13724 <__assert_fail@plt+0xf24>
   13770:	ldr	r3, [pc, #1172]	; 13c0c <__assert_fail@plt+0x140c>
   13774:	cmp	r7, r3
   13778:	bne	137a8 <__assert_fail@plt+0xfa8>
   1377c:	mov	r1, r6
   13780:	mov	r0, r8
   13784:	bl	195cc <__assert_fail@plt+0x6dcc>
   13788:	mov	r1, #10
   1378c:	mov	r0, r6
   13790:	strb	fp, [sp, #724]	; 0x2d4
   13794:	bl	124d0 <strchr@plt>
   13798:	subs	fp, r0, #0
   1379c:	movne	r7, #0
   137a0:	bne	13724 <__assert_fail@plt+0xf24>
   137a4:	mov	r7, fp
   137a8:	ldr	r3, [sp, #28]
   137ac:	eor	r6, sl, #1
   137b0:	cmp	r3, #0
   137b4:	moveq	r9, #1
   137b8:	beq	13668 <__assert_fail@plt+0xe68>
   137bc:	eor	r3, r9, #1
   137c0:	b	13668 <__assert_fail@plt+0xe68>
   137c4:	mov	r0, r3
   137c8:	mov	r2, #512	; 0x200
   137cc:	add	r1, sp, #212	; 0xd4
   137d0:	bl	1214c <read@plt>
   137d4:	cmp	r0, #0
   137d8:	str	r0, [sp, #28]
   137dc:	blt	13800 <__assert_fail@plt+0x1000>
   137e0:	beq	13810 <__assert_fail@plt+0x1010>
   137e4:	add	r3, sp, #728	; 0x2d8
   137e8:	add	r0, r3, r0
   137ec:	ldrb	r3, [r0, #-517]	; 0xfffffdfb
   137f0:	cmp	r3, #58	; 0x3a
   137f4:	beq	13950 <__assert_fail@plt+0x1150>
   137f8:	eor	r6, sl, #1
   137fc:	b	137bc <__assert_fail@plt+0xfbc>
   13800:	bl	12518 <__errno_location@plt>
   13804:	ldr	r3, [r0]
   13808:	cmp	r3, #5
   1380c:	bne	13a44 <__assert_fail@plt+0x1244>
   13810:	mov	sl, fp
   13814:	b	137bc <__assert_fail@plt+0xfbc>
   13818:	ldr	r1, [pc, #980]	; 13bf4 <__assert_fail@plt+0x13f4>
   1381c:	ldr	r0, [pc, #1004]	; 13c10 <__assert_fail@plt+0x1410>
   13820:	ldr	r2, [pc, #980]	; 13bfc <__assert_fail@plt+0x13fc>
   13824:	str	r3, [r4, #28]
   13828:	ldr	r3, [pc, #980]	; 13c04 <__assert_fail@plt+0x1404>
   1382c:	strd	r0, [r4, #4]
   13830:	str	sl, [r4, #12]
   13834:	str	r9, [r4, #20]
   13838:	str	r2, [r4, #16]
   1383c:	str	r3, [r4, #24]
   13840:	ldr	r1, [pc, #972]	; 13c14 <__assert_fail@plt+0x1414>
   13844:	b	1346c <__assert_fail@plt+0xc6c>
   13848:	mov	r2, #5
   1384c:	ldr	r1, [pc, #964]	; 13c18 <__assert_fail@plt+0x1418>
   13850:	mov	r0, #0
   13854:	bl	12254 <dcgettext@plt>
   13858:	mov	r5, #1
   1385c:	mov	r6, r0
   13860:	bl	12518 <__errno_location@plt>
   13864:	ldr	r0, [r0]
   13868:	bl	123ec <strerror@plt>
   1386c:	mov	r1, r0
   13870:	mov	r0, r6
   13874:	bl	195cc <__assert_fail@plt+0x6dcc>
   13878:	mov	r0, r4
   1387c:	bl	12194 <free@plt>
   13880:	add	r3, sp, #4800	; 0x12c0
   13884:	add	r3, r3, #20
   13888:	ldr	r2, [r3]
   1388c:	ldr	r3, [pc, #848]	; 13be4 <__assert_fail@plt+0x13e4>
   13890:	mov	r0, r5
   13894:	ldr	r3, [r3]
   13898:	cmp	r2, r3
   1389c:	bne	13bcc <__assert_fail@plt+0x13cc>
   138a0:	add	sp, sp, #4800	; 0x12c0
   138a4:	add	sp, sp, #28
   138a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138ac:	mov	r1, #2
   138b0:	ldr	r0, [sp, #40]	; 0x28
   138b4:	bl	12284 <dup2@plt>
   138b8:	ldr	r0, [sp, #40]	; 0x28
   138bc:	bl	127c4 <close@plt>
   138c0:	mov	r1, r4
   138c4:	ldr	r0, [r6, #16]
   138c8:	bl	124f4 <execv@plt>
   138cc:	mov	r2, #5
   138d0:	ldr	r1, [pc, #836]	; 13c1c <__assert_fail@plt+0x141c>
   138d4:	mov	r0, r5
   138d8:	bl	12254 <dcgettext@plt>
   138dc:	mov	r4, r0
   138e0:	bl	12518 <__errno_location@plt>
   138e4:	ldr	r0, [r0]
   138e8:	bl	123ec <strerror@plt>
   138ec:	mov	r1, r0
   138f0:	mov	r0, r4
   138f4:	bl	195cc <__assert_fail@plt+0x6dcc>
   138f8:	mov	r0, #1
   138fc:	bl	121d0 <_exit@plt>
   13900:	ldr	r1, [pc, #792]	; 13c20 <__assert_fail@plt+0x1420>
   13904:	mov	r2, #5
   13908:	mov	r0, #0
   1390c:	bl	12254 <dcgettext@plt>
   13910:	mov	r5, #1
   13914:	mov	r4, r0
   13918:	bl	12518 <__errno_location@plt>
   1391c:	ldr	r0, [r0]
   13920:	bl	123ec <strerror@plt>
   13924:	mov	r1, r0
   13928:	mov	r0, r4
   1392c:	bl	195cc <__assert_fail@plt+0x6dcc>
   13930:	mov	r1, #15
   13934:	ldr	r0, [sp, #8]
   13938:	bl	12440 <kill@plt>
   1393c:	ldr	r0, [sp, #20]
   13940:	bl	127c4 <close@plt>
   13944:	ldr	r0, [sp, #36]	; 0x24
   13948:	bl	127c4 <close@plt>
   1394c:	b	13880 <__assert_fail@plt+0x1080>
   13950:	ldr	r3, [sp, #12]
   13954:	cmp	r3, #0
   13958:	bne	13a94 <__assert_fail@plt+0x1294>
   1395c:	ldr	r3, [sp, #12]
   13960:	add	r2, sp, #32
   13964:	adds	r1, r3, #0
   13968:	movne	r1, #1
   1396c:	add	r0, sp, #172	; 0xac
   13970:	bl	1326c <__assert_fail@plt+0xa6c>
   13974:	subs	r6, r0, #0
   13978:	beq	13b1c <__assert_fail@plt+0x131c>
   1397c:	bl	124b8 <strlen@plt>
   13980:	mov	r1, r6
   13984:	mov	r2, r0
   13988:	ldr	r0, [sp, #20]
   1398c:	bl	125a8 <write@plt>
   13990:	mov	r2, #1
   13994:	ldr	r1, [pc, #648]	; 13c24 <__assert_fail@plt+0x1424>
   13998:	ldr	r0, [sp, #20]
   1399c:	bl	125a8 <write@plt>
   139a0:	ldr	r3, [sp, #12]
   139a4:	mov	r0, r6
   139a8:	add	r3, r3, #1
   139ac:	str	r3, [sp, #12]
   139b0:	bl	12218 <gcry_free@plt>
   139b4:	b	137f8 <__assert_fail@plt+0xff8>
   139b8:	mov	r2, #5
   139bc:	ldr	r1, [pc, #612]	; 13c28 <__assert_fail@plt+0x1428>
   139c0:	bl	12254 <dcgettext@plt>
   139c4:	bl	195cc <__assert_fail@plt+0x6dcc>
   139c8:	mov	r5, #1
   139cc:	b	13880 <__assert_fail@plt+0x1080>
   139d0:	mov	r2, #5
   139d4:	ldr	r1, [pc, #592]	; 13c2c <__assert_fail@plt+0x142c>
   139d8:	mov	r0, r9
   139dc:	bl	12254 <dcgettext@plt>
   139e0:	mov	r5, #1
   139e4:	mov	r6, r0
   139e8:	bl	12518 <__errno_location@plt>
   139ec:	ldr	r0, [r0]
   139f0:	bl	123ec <strerror@plt>
   139f4:	mov	r1, r0
   139f8:	mov	r0, r6
   139fc:	bl	195cc <__assert_fail@plt+0x6dcc>
   13a00:	ldr	r0, [sp, #20]
   13a04:	bl	127c4 <close@plt>
   13a08:	ldr	r0, [sp, #24]
   13a0c:	bl	127c4 <close@plt>
   13a10:	ldr	r0, [sp, #36]	; 0x24
   13a14:	bl	127c4 <close@plt>
   13a18:	ldr	r0, [sp, #40]	; 0x28
   13a1c:	bl	127c4 <close@plt>
   13a20:	mov	r0, r4
   13a24:	bl	12194 <free@plt>
   13a28:	b	13880 <__assert_fail@plt+0x1080>
   13a2c:	mov	r2, #5
   13a30:	ldr	r1, [pc, #504]	; 13c30 <__assert_fail@plt+0x1430>
   13a34:	bl	12254 <dcgettext@plt>
   13a38:	bl	195cc <__assert_fail@plt+0x6dcc>
   13a3c:	mov	r5, #1
   13a40:	b	13880 <__assert_fail@plt+0x1080>
   13a44:	mov	r2, #5
   13a48:	mov	sl, r0
   13a4c:	ldr	r1, [pc, #480]	; 13c34 <__assert_fail@plt+0x1434>
   13a50:	mov	r0, r6
   13a54:	bl	12254 <dcgettext@plt>
   13a58:	mov	r5, fp
   13a5c:	mov	r4, r0
   13a60:	ldr	r0, [sl]
   13a64:	bl	123ec <strerror@plt>
   13a68:	mov	r1, r0
   13a6c:	mov	r0, r4
   13a70:	bl	195cc <__assert_fail@plt+0x6dcc>
   13a74:	mov	r1, #15
   13a78:	ldr	r0, [sp, #8]
   13a7c:	bl	12440 <kill@plt>
   13a80:	ldr	r0, [sp, #20]
   13a84:	bl	127c4 <close@plt>
   13a88:	ldr	r0, [sp, #36]	; 0x24
   13a8c:	bl	127c4 <close@plt>
   13a90:	b	13880 <__assert_fail@plt+0x1080>
   13a94:	add	r0, sp, #172	; 0xac
   13a98:	bl	21be4 <__assert_fail@plt+0xf3e4>
   13a9c:	b	1395c <__assert_fail@plt+0x115c>
   13aa0:	mov	r2, #5
   13aa4:	ldr	r1, [pc, #396]	; 13c38 <__assert_fail@plt+0x1438>
   13aa8:	b	13908 <__assert_fail@plt+0x1108>
   13aac:	mov	r2, #5
   13ab0:	ldr	r1, [pc, #388]	; 13c3c <__assert_fail@plt+0x143c>
   13ab4:	mov	r0, r6
   13ab8:	bl	12254 <dcgettext@plt>
   13abc:	ldr	r1, [sp, #28]
   13ac0:	bl	195cc <__assert_fail@plt+0x6dcc>
   13ac4:	add	r0, sp, #172	; 0xac
   13ac8:	bl	21be4 <__assert_fail@plt+0xf3e4>
   13acc:	mov	r5, #1
   13ad0:	b	13880 <__assert_fail@plt+0x1080>
   13ad4:	mov	r2, #5
   13ad8:	ldr	r1, [pc, #352]	; 13c40 <__assert_fail@plt+0x1440>
   13adc:	mov	r0, r6
   13ae0:	bl	12254 <dcgettext@plt>
   13ae4:	mov	r5, #1
   13ae8:	mov	r4, r0
   13aec:	bl	12518 <__errno_location@plt>
   13af0:	ldr	r0, [r0]
   13af4:	bl	123ec <strerror@plt>
   13af8:	mov	r1, r0
   13afc:	mov	r0, r4
   13b00:	bl	195cc <__assert_fail@plt+0x6dcc>
   13b04:	ldr	r0, [sp, #8]
   13b08:	mov	r1, #15
   13b0c:	bl	12440 <kill@plt>
   13b10:	add	r0, sp, #172	; 0xac
   13b14:	bl	21be4 <__assert_fail@plt+0xf3e4>
   13b18:	b	13880 <__assert_fail@plt+0x1080>
   13b1c:	mov	r1, #15
   13b20:	ldr	r0, [sp, #8]
   13b24:	bl	12440 <kill@plt>
   13b28:	ldr	r0, [sp, #20]
   13b2c:	bl	127c4 <close@plt>
   13b30:	ldr	r0, [sp, #36]	; 0x24
   13b34:	bl	127c4 <close@plt>
   13b38:	ldr	r3, [sp, #32]
   13b3c:	cmp	r3, #0
   13b40:	movne	r5, #3
   13b44:	moveq	r5, #1
   13b48:	b	13880 <__assert_fail@plt+0x1080>
   13b4c:	ldr	r3, [pc, #240]	; 13c44 <__assert_fail@plt+0x1444>
   13b50:	ldr	r2, [pc, #240]	; 13c48 <__assert_fail@plt+0x1448>
   13b54:	ldr	r1, [pc, #240]	; 13c4c <__assert_fail@plt+0x144c>
   13b58:	ldr	r0, [pc, #240]	; 13c50 <__assert_fail@plt+0x1450>
   13b5c:	bl	12800 <__assert_fail@plt>
   13b60:	ldr	r3, [pc, #220]	; 13c44 <__assert_fail@plt+0x1444>
   13b64:	mov	r2, #560	; 0x230
   13b68:	ldr	r1, [pc, #220]	; 13c4c <__assert_fail@plt+0x144c>
   13b6c:	ldr	r0, [pc, #224]	; 13c54 <__assert_fail@plt+0x1454>
   13b70:	bl	12800 <__assert_fail@plt>
   13b74:	ldr	r3, [pc, #200]	; 13c44 <__assert_fail@plt+0x1444>
   13b78:	ldr	r2, [pc, #216]	; 13c58 <__assert_fail@plt+0x1458>
   13b7c:	ldr	r1, [pc, #200]	; 13c4c <__assert_fail@plt+0x144c>
   13b80:	ldr	r0, [pc, #212]	; 13c5c <__assert_fail@plt+0x145c>
   13b84:	bl	12800 <__assert_fail@plt>
   13b88:	ldr	r3, [pc, #180]	; 13c44 <__assert_fail@plt+0x1444>
   13b8c:	ldr	r2, [pc, #204]	; 13c60 <__assert_fail@plt+0x1460>
   13b90:	ldr	r1, [pc, #180]	; 13c4c <__assert_fail@plt+0x144c>
   13b94:	ldr	r0, [pc, #200]	; 13c64 <__assert_fail@plt+0x1464>
   13b98:	bl	12800 <__assert_fail@plt>
   13b9c:	mov	r2, #5
   13ba0:	ldr	r1, [pc, #192]	; 13c68 <__assert_fail@plt+0x1468>
   13ba4:	mov	r0, r9
   13ba8:	bl	12254 <dcgettext@plt>
   13bac:	mov	r6, r0
   13bb0:	bl	12518 <__errno_location@plt>
   13bb4:	ldr	r0, [r0]
   13bb8:	bl	123ec <strerror@plt>
   13bbc:	mov	r1, r0
   13bc0:	mov	r0, r6
   13bc4:	bl	195cc <__assert_fail@plt+0x6dcc>
   13bc8:	b	13a10 <__assert_fail@plt+0x1210>
   13bcc:	bl	12260 <__stack_chk_fail@plt>
   13bd0:	ldr	r3, [pc, #108]	; 13c44 <__assert_fail@plt+0x1444>
   13bd4:	ldr	r2, [pc, #144]	; 13c6c <__assert_fail@plt+0x146c>
   13bd8:	ldr	r1, [pc, #108]	; 13c4c <__assert_fail@plt+0x144c>
   13bdc:	ldr	r0, [pc, #140]	; 13c70 <__assert_fail@plt+0x1470>
   13be0:	bl	12800 <__assert_fail@plt>
   13be4:	andeq	r5, r3, r8, asr #22
   13be8:	andeq	r6, r3, r8, lsl #6
   13bec:	andeq	r2, r2, r0, lsl r4
   13bf0:	strdeq	r0, [r0], -sp
   13bf4:	andeq	r2, r2, r4, ror #10
   13bf8:	andeq	r2, r2, r0, ror #10
   13bfc:	andeq	r2, r2, r8, ror #10
   13c00:	andeq	r2, r2, ip, ror #7
   13c04:	andeq	r2, r2, ip, ror #10
   13c08:	andeq	r3, r2, ip, ror pc
   13c0c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13c10:	andeq	r2, r2, r0, ror r5
   13c14:	andeq	r2, r2, r8, ror #7
   13c18:	andeq	r2, r2, r0, asr #8
   13c1c:	andeq	r2, r2, r0, ror #9
   13c20:	strdeq	r2, [r2], -r4
   13c24:	andeq	r3, r2, r8, lsl pc
   13c28:	strdeq	r2, [r2], -r0
   13c2c:	andeq	r2, r2, ip, asr #9
   13c30:	andeq	r2, r2, r0, lsr #8
   13c34:	andeq	r2, r2, r8, lsl #10
   13c38:	andeq	r2, r2, ip, lsl #10
   13c3c:	andeq	r2, r2, r0, asr #10
   13c40:	andeq	r2, r2, r0, lsr #10
   13c44:	andeq	r2, r2, ip, lsl #3
   13c48:	strdeq	r0, [r0], -r2
   13c4c:	andeq	r2, r2, r8, ror r4
   13c50:	andeq	r2, r2, r4, lsr r5
   13c54:	andeq	r2, r2, ip, lsr #9
   13c58:	andeq	r0, r0, pc, lsr #4
   13c5c:	andeq	r2, r2, r0, lsr #9
   13c60:	andeq	r0, r0, lr, lsr #4
   13c64:	muleq	r2, r4, r4
   13c68:	andeq	r2, r2, ip, asr r4
   13c6c:	andeq	r0, r0, r1, lsr r2
   13c70:			; <UNDEFINED> instruction: 0x000224bc
   13c74:	cmp	r0, #0
   13c78:	bxeq	lr
   13c7c:	b	12218 <gcry_free@plt>
   13c80:	push	{r4, r5, r6, r7, r8, lr}
   13c84:	mov	r4, r0
   13c88:	mov	r5, r1
   13c8c:	mov	r0, #13
   13c90:	mov	r1, #1
   13c94:	mov	r6, r2
   13c98:	mov	r7, r3
   13c9c:	ldr	r8, [sp, #24]
   13ca0:	bl	121f4 <signal@plt>
   13ca4:	ldr	r1, [pc, #96]	; 13d0c <__assert_fail@plt+0x150c>
   13ca8:	ldr	r0, [r1, #16]
   13cac:	cmp	r0, #0
   13cb0:	beq	13cf8 <__assert_fail@plt+0x14f8>
   13cb4:	sub	r1, r4, #508	; 0x1fc
   13cb8:	cmp	r1, #1
   13cbc:	bhi	13cdc <__assert_fail@plt+0x14dc>
   13cc0:	str	r8, [sp, #24]
   13cc4:	mov	r3, r7
   13cc8:	mov	r2, r6
   13ccc:	mov	r1, r5
   13cd0:	mov	r0, r4
   13cd4:	pop	{r4, r5, r6, r7, r8, lr}
   13cd8:	b	1338c <__assert_fail@plt+0xb8c>
   13cdc:	mov	r2, #5
   13ce0:	ldr	r1, [pc, #40]	; 13d10 <__assert_fail@plt+0x1510>
   13ce4:	mov	r0, #0
   13ce8:	bl	12254 <dcgettext@plt>
   13cec:	bl	195cc <__assert_fail@plt+0x6dcc>
   13cf0:	mov	r0, #1
   13cf4:	pop	{r4, r5, r6, r7, r8, pc}
   13cf8:	mov	r2, #5
   13cfc:	ldr	r1, [pc, #16]	; 13d14 <__assert_fail@plt+0x1514>
   13d00:	bl	12254 <dcgettext@plt>
   13d04:	bl	195cc <__assert_fail@plt+0x6dcc>
   13d08:	b	13cf0 <__assert_fail@plt+0x14f0>
   13d0c:	andeq	r6, r3, r8, lsl #6
   13d10:	muleq	r2, r4, r5
   13d14:	andeq	r2, r2, r4, ror r5
   13d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d1c:	mov	r6, r0
   13d20:	sub	sp, sp, #12
   13d24:	ldr	r0, [pc, #848]	; 1407c <__assert_fail@plt+0x187c>
   13d28:	mov	r9, r1
   13d2c:	mov	fp, r2
   13d30:	bl	123a4 <getenv@plt>
   13d34:	subs	r4, r0, #0
   13d38:	beq	13d48 <__assert_fail@plt+0x1548>
   13d3c:	ldrb	r3, [r4]
   13d40:	cmp	r3, #0
   13d44:	bne	13e7c <__assert_fail@plt+0x167c>
   13d48:	ldr	r4, [pc, #816]	; 14080 <__assert_fail@plt+0x1880>
   13d4c:	mov	r0, r4
   13d50:	mov	r3, #0
   13d54:	ldr	r2, [pc, #808]	; 14084 <__assert_fail@plt+0x1884>
   13d58:	ldr	r1, [pc, #808]	; 14088 <__assert_fail@plt+0x1888>
   13d5c:	bl	15850 <__assert_fail@plt+0x3050>
   13d60:	mov	r4, r0
   13d64:	subs	r0, r4, #0
   13d68:	beq	14064 <__assert_fail@plt+0x1864>
   13d6c:	bl	1a2ac <__assert_fail@plt+0x7aac>
   13d70:	cmp	r0, #0
   13d74:	beq	13ff0 <__assert_fail@plt+0x17f0>
   13d78:	ldr	r3, [pc, #780]	; 1408c <__assert_fail@plt+0x188c>
   13d7c:	ldr	r0, [r3, #24]
   13d80:	cmp	r0, #0
   13d84:	beq	13f20 <__assert_fail@plt+0x1720>
   13d88:	ldrb	r3, [r0]
   13d8c:	cmp	r3, #45	; 0x2d
   13d90:	bne	13da0 <__assert_fail@plt+0x15a0>
   13d94:	ldrb	r3, [r0, #1]
   13d98:	cmp	r3, #0
   13d9c:	beq	13f20 <__assert_fail@plt+0x1720>
   13da0:	bl	125c0 <gcry_xstrdup@plt>
   13da4:	mov	sl, #0
   13da8:	mov	r7, r0
   13dac:	mov	r0, r4
   13db0:	bl	124b8 <strlen@plt>
   13db4:	mov	r8, r0
   13db8:	add	r0, r0, #5
   13dbc:	bl	123c8 <malloc@plt>
   13dc0:	subs	r5, r0, #0
   13dc4:	beq	13f8c <__assert_fail@plt+0x178c>
   13dc8:	mov	r2, r8
   13dcc:	mov	r1, r4
   13dd0:	bl	121dc <memcpy@plt>
   13dd4:	ldr	r3, [pc, #692]	; 14090 <__assert_fail@plt+0x1890>
   13dd8:	add	r2, r5, r8
   13ddc:	cmp	sl, #0
   13de0:	ldrb	r1, [r3, #4]
   13de4:	ldr	r0, [r3]
   13de8:	str	r0, [r5, r8]
   13dec:	strb	r1, [r2, #4]
   13df0:	beq	13ea8 <__assert_fail@plt+0x16a8>
   13df4:	ldr	sl, [pc, #664]	; 14094 <__assert_fail@plt+0x1894>
   13df8:	mov	r1, r7
   13dfc:	sub	sl, r6, sl
   13e00:	clz	sl, sl
   13e04:	lsr	sl, sl, #5
   13e08:	mov	r2, sl
   13e0c:	ldr	r0, [pc, #644]	; 14098 <__assert_fail@plt+0x1898>
   13e10:	bl	12fcc <__assert_fail@plt+0x7cc>
   13e14:	subs	r8, r0, #0
   13e18:	bne	13f68 <__assert_fail@plt+0x1768>
   13e1c:	mov	r0, r6
   13e20:	str	fp, [sp]
   13e24:	mov	r3, r9
   13e28:	mov	r2, r5
   13e2c:	mov	r1, r7
   13e30:	bl	13c80 <__assert_fail@plt+0x1480>
   13e34:	sub	r6, r6, #508	; 0x1fc
   13e38:	clz	r6, r6
   13e3c:	lsr	r6, r6, #5
   13e40:	subs	r8, r0, #0
   13e44:	bne	13e60 <__assert_fail@plt+0x1660>
   13e48:	mov	r2, r6
   13e4c:	ldr	r1, [pc, #580]	; 14098 <__assert_fail@plt+0x1898>
   13e50:	mov	r0, r5
   13e54:	bl	12fcc <__assert_fail@plt+0x7cc>
   13e58:	subs	r8, r0, #0
   13e5c:	beq	13fd4 <__assert_fail@plt+0x17d4>
   13e60:	mov	r1, r6
   13e64:	mov	r0, r5
   13e68:	bl	12ea0 <__assert_fail@plt+0x6a0>
   13e6c:	mov	r1, sl
   13e70:	mov	r0, r7
   13e74:	bl	12ea0 <__assert_fail@plt+0x6a0>
   13e78:	b	13f68 <__assert_fail@plt+0x1768>
   13e7c:	bl	124b8 <strlen@plt>
   13e80:	add	r0, r4, r0
   13e84:	ldrb	r3, [r0, #-1]
   13e88:	cmp	r3, #47	; 0x2f
   13e8c:	bne	13d4c <__assert_fail@plt+0x154c>
   13e90:	mov	r0, r4
   13e94:	mov	r2, #0
   13e98:	ldr	r1, [pc, #484]	; 14084 <__assert_fail@plt+0x1884>
   13e9c:	bl	15850 <__assert_fail@plt+0x3050>
   13ea0:	mov	r4, r0
   13ea4:	b	13d64 <__assert_fail@plt+0x1564>
   13ea8:	mov	r0, r6
   13eac:	str	fp, [sp]
   13eb0:	mov	r3, r9
   13eb4:	mov	r2, r5
   13eb8:	mov	r1, r7
   13ebc:	bl	13c80 <__assert_fail@plt+0x1480>
   13ec0:	sub	r6, r6, #508	; 0x1fc
   13ec4:	clz	r6, r6
   13ec8:	lsr	r6, r6, #5
   13ecc:	subs	r8, r0, #0
   13ed0:	bne	13f5c <__assert_fail@plt+0x175c>
   13ed4:	mov	r2, r6
   13ed8:	ldr	r1, [pc, #440]	; 14098 <__assert_fail@plt+0x1898>
   13edc:	mov	r0, r5
   13ee0:	bl	12fcc <__assert_fail@plt+0x7cc>
   13ee4:	subs	r8, r0, #0
   13ee8:	bne	13f5c <__assert_fail@plt+0x175c>
   13eec:	mov	r1, r6
   13ef0:	mov	r0, r5
   13ef4:	bl	12ea0 <__assert_fail@plt+0x6a0>
   13ef8:	mov	r0, r5
   13efc:	bl	12194 <free@plt>
   13f00:	mov	r0, r7
   13f04:	bl	12194 <free@plt>
   13f08:	mov	r0, r4
   13f0c:	bl	1220c <rmdir@plt>
   13f10:	mov	r8, #0
   13f14:	mov	r0, r8
   13f18:	add	sp, sp, #12
   13f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f20:	mov	r0, r4
   13f24:	bl	124b8 <strlen@plt>
   13f28:	mov	r5, r0
   13f2c:	add	r0, r0, #4
   13f30:	bl	123c8 <malloc@plt>
   13f34:	subs	r7, r0, #0
   13f38:	beq	1402c <__assert_fail@plt+0x182c>
   13f3c:	mov	r2, r5
   13f40:	mov	r1, r4
   13f44:	bl	121dc <memcpy@plt>
   13f48:	ldr	r3, [pc, #332]	; 1409c <__assert_fail@plt+0x189c>
   13f4c:	mov	sl, #1
   13f50:	ldr	r0, [r3]
   13f54:	str	r0, [r7, r5]
   13f58:	b	13dac <__assert_fail@plt+0x15ac>
   13f5c:	mov	r1, r6
   13f60:	mov	r0, r5
   13f64:	bl	12ea0 <__assert_fail@plt+0x6a0>
   13f68:	mov	r0, r5
   13f6c:	bl	12194 <free@plt>
   13f70:	mov	r0, r7
   13f74:	bl	12194 <free@plt>
   13f78:	mov	r0, r4
   13f7c:	bl	1220c <rmdir@plt>
   13f80:	mov	r0, r8
   13f84:	add	sp, sp, #12
   13f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f8c:	mov	r2, #5
   13f90:	ldr	r1, [pc, #264]	; 140a0 <__assert_fail@plt+0x18a0>
   13f94:	bl	12254 <dcgettext@plt>
   13f98:	mov	r8, #1
   13f9c:	mov	r5, r0
   13fa0:	bl	12518 <__errno_location@plt>
   13fa4:	ldr	r0, [r0]
   13fa8:	bl	123ec <strerror@plt>
   13fac:	mov	r1, r0
   13fb0:	mov	r0, r5
   13fb4:	bl	195cc <__assert_fail@plt+0x6dcc>
   13fb8:	mov	r0, r7
   13fbc:	bl	12194 <free@plt>
   13fc0:	mov	r0, r4
   13fc4:	bl	1220c <rmdir@plt>
   13fc8:	mov	r0, r8
   13fcc:	add	sp, sp, #12
   13fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd4:	mov	r1, r6
   13fd8:	mov	r0, r5
   13fdc:	bl	12ea0 <__assert_fail@plt+0x6a0>
   13fe0:	mov	r1, sl
   13fe4:	mov	r0, r7
   13fe8:	bl	12ea0 <__assert_fail@plt+0x6a0>
   13fec:	b	13ef8 <__assert_fail@plt+0x16f8>
   13ff0:	mov	r2, #5
   13ff4:	ldr	r1, [pc, #168]	; 140a4 <__assert_fail@plt+0x18a4>
   13ff8:	bl	12254 <dcgettext@plt>
   13ffc:	mov	r5, r0
   14000:	bl	12518 <__errno_location@plt>
   14004:	mov	r8, #1
   14008:	ldr	r0, [r0]
   1400c:	bl	123ec <strerror@plt>
   14010:	mov	r1, r4
   14014:	mov	r2, r0
   14018:	mov	r0, r5
   1401c:	bl	195cc <__assert_fail@plt+0x6dcc>
   14020:	mov	r0, r8
   14024:	add	sp, sp, #12
   14028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1402c:	mov	r2, #5
   14030:	ldr	r1, [pc, #112]	; 140a8 <__assert_fail@plt+0x18a8>
   14034:	bl	12254 <dcgettext@plt>
   14038:	mov	r8, #1
   1403c:	mov	r5, r0
   14040:	bl	12518 <__errno_location@plt>
   14044:	ldr	r0, [r0]
   14048:	bl	123ec <strerror@plt>
   1404c:	mov	r1, r0
   14050:	mov	r0, r5
   14054:	bl	195cc <__assert_fail@plt+0x6dcc>
   14058:	mov	r0, r4
   1405c:	bl	1220c <rmdir@plt>
   14060:	b	13f80 <__assert_fail@plt+0x1780>
   14064:	mov	r2, #5
   14068:	ldr	r1, [pc, #52]	; 140a4 <__assert_fail@plt+0x18a4>
   1406c:	bl	12254 <dcgettext@plt>
   14070:	ldr	r4, [pc, #52]	; 140ac <__assert_fail@plt+0x18ac>
   14074:	mov	r5, r0
   14078:	b	14000 <__assert_fail@plt+0x1800>
   1407c:	andeq	r2, r2, r8, asr #11
   14080:	andeq	r2, r2, r0, asr #11
   14084:	ldrdeq	r2, [r2], -r0
   14088:	andeq	r2, r2, ip, asr #31
   1408c:	andeq	r6, r3, r8, lsl #6
   14090:	andeq	r2, r2, r8, lsr #12
   14094:	strdeq	r0, [r0], -sp
   14098:	andeq	r2, r2, r0, lsr r6
   1409c:	andeq	r2, r2, r0, lsl #12
   140a0:	andeq	r2, r2, r4, lsl #12
   140a4:	andeq	r2, r2, r4, lsr r6
   140a8:	ldrdeq	r2, [r2], -ip
   140ac:	andeq	r2, r2, ip, lsl #18
   140b0:	push	{r4, lr}
   140b4:	mov	r0, #6
   140b8:	ldr	r4, [pc, #28]	; 140dc <__assert_fail@plt+0x18dc>
   140bc:	ldr	r1, [pc, #28]	; 140e0 <__assert_fail@plt+0x18e0>
   140c0:	bl	1262c <setlocale@plt>
   140c4:	mov	r0, r4
   140c8:	ldr	r1, [pc, #20]	; 140e4 <__assert_fail@plt+0x18e4>
   140cc:	bl	12728 <bindtextdomain@plt>
   140d0:	mov	r0, r4
   140d4:	pop	{r4, lr}
   140d8:	b	122c0 <textdomain@plt>
   140dc:	muleq	r2, r8, r8
   140e0:	andeq	r2, r2, ip, lsl #18
   140e4:	andeq	r2, r2, r4, lsl #17
   140e8:	push	{r4, r5, r6, lr}
   140ec:	mov	r1, #0
   140f0:	ldr	r0, [pc, #88]	; 14150 <__assert_fail@plt+0x1950>
   140f4:	bl	1235c <bind_textdomain_codeset@plt>
   140f8:	subs	r4, r0, #0
   140fc:	beq	14128 <__assert_fail@plt+0x1928>
   14100:	mov	r0, r4
   14104:	bl	125c0 <gcry_xstrdup@plt>
   14108:	ldr	r1, [pc, #68]	; 14154 <__assert_fail@plt+0x1954>
   1410c:	mov	r4, r0
   14110:	ldr	r0, [pc, #56]	; 14150 <__assert_fail@plt+0x1950>
   14114:	bl	1235c <bind_textdomain_codeset@plt>
   14118:	subs	r5, r0, #0
   1411c:	beq	14140 <__assert_fail@plt+0x1940>
   14120:	mov	r0, r4
   14124:	pop	{r4, r5, r6, pc}
   14128:	mov	r0, #14
   1412c:	bl	12680 <nl_langinfo@plt>
   14130:	subs	r4, r0, #0
   14134:	bne	14100 <__assert_fail@plt+0x1900>
   14138:	mov	r0, r4
   1413c:	pop	{r4, r5, r6, pc}
   14140:	mov	r0, r4
   14144:	bl	12218 <gcry_free@plt>
   14148:	mov	r4, r5
   1414c:	b	14120 <__assert_fail@plt+0x1920>
   14150:	muleq	r2, r8, r8
   14154:	andeq	r2, r2, r0, lsr #17
   14158:	push	{r4, lr}
   1415c:	subs	r4, r0, #0
   14160:	popeq	{r4, pc}
   14164:	mov	r1, r4
   14168:	ldr	r0, [pc, #12]	; 1417c <__assert_fail@plt+0x197c>
   1416c:	bl	1235c <bind_textdomain_codeset@plt>
   14170:	mov	r0, r4
   14174:	pop	{r4, lr}
   14178:	b	12218 <gcry_free@plt>
   1417c:	muleq	r2, r8, r8
   14180:	push	{r4, r5, r6, lr}
   14184:	mov	r5, r0
   14188:	bl	140e8 <__assert_fail@plt+0x18e8>
   1418c:	mov	r1, r5
   14190:	mov	r2, #5
   14194:	mov	r4, r0
   14198:	mov	r0, #0
   1419c:	bl	12254 <dcgettext@plt>
   141a0:	cmp	r4, #0
   141a4:	mov	r5, r0
   141a8:	beq	141c0 <__assert_fail@plt+0x19c0>
   141ac:	mov	r1, r4
   141b0:	ldr	r0, [pc, #16]	; 141c8 <__assert_fail@plt+0x19c8>
   141b4:	bl	1235c <bind_textdomain_codeset@plt>
   141b8:	mov	r0, r4
   141bc:	bl	12218 <gcry_free@plt>
   141c0:	mov	r0, r5
   141c4:	pop	{r4, r5, r6, pc}
   141c8:	muleq	r2, r8, r8
   141cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141d0:	subs	r5, r0, #0
   141d4:	mov	r6, r1
   141d8:	beq	142d8 <__assert_fail@plt+0x1ad8>
   141dc:	ldr	r8, [pc, #376]	; 1435c <__assert_fail@plt+0x1b5c>
   141e0:	ldr	r4, [r8]
   141e4:	cmp	r4, #0
   141e8:	bne	141fc <__assert_fail@plt+0x19fc>
   141ec:	b	14244 <__assert_fail@plt+0x1a44>
   141f0:	ldr	r4, [r4]
   141f4:	cmp	r4, #0
   141f8:	beq	14244 <__assert_fail@plt+0x1a44>
   141fc:	mov	r1, r5
   14200:	add	r0, r4, #8
   14204:	bl	12104 <strcmp@plt>
   14208:	cmp	r0, #0
   1420c:	bne	141f0 <__assert_fail@plt+0x19f0>
   14210:	ldr	r3, [r4, #4]
   14214:	cmp	r3, #0
   14218:	beq	14244 <__assert_fail@plt+0x1a44>
   1421c:	ldr	r2, [r3, #4]
   14220:	cmp	r6, r2
   14224:	bne	14238 <__assert_fail@plt+0x1a38>
   14228:	b	142f4 <__assert_fail@plt+0x1af4>
   1422c:	ldr	r2, [r3, #4]
   14230:	cmp	r2, r6
   14234:	beq	142f4 <__assert_fail@plt+0x1af4>
   14238:	ldr	r3, [r3]
   1423c:	cmp	r3, #0
   14240:	bne	1422c <__assert_fail@plt+0x1a2c>
   14244:	mov	r1, #0
   14248:	mov	r0, #5
   1424c:	bl	1262c <setlocale@plt>
   14250:	cmp	r0, #0
   14254:	beq	142d8 <__assert_fail@plt+0x1ad8>
   14258:	bl	127d0 <gcry_strdup@plt>
   1425c:	subs	r9, r0, #0
   14260:	beq	142d8 <__assert_fail@plt+0x1ad8>
   14264:	mov	r1, r5
   14268:	mov	r0, #5
   1426c:	bl	1262c <setlocale@plt>
   14270:	cmp	r0, #0
   14274:	beq	14314 <__assert_fail@plt+0x1b14>
   14278:	ldr	r1, [pc, #224]	; 14360 <__assert_fail@plt+0x1b60>
   1427c:	ldr	r0, [pc, #224]	; 14364 <__assert_fail@plt+0x1b64>
   14280:	bl	12728 <bindtextdomain@plt>
   14284:	mov	r2, #5
   14288:	mov	r1, r6
   1428c:	mov	r0, #0
   14290:	bl	12254 <dcgettext@plt>
   14294:	mov	r1, r9
   14298:	mov	r7, r0
   1429c:	mov	r0, #5
   142a0:	bl	1262c <setlocale@plt>
   142a4:	ldr	r1, [pc, #180]	; 14360 <__assert_fail@plt+0x1b60>
   142a8:	ldr	r0, [pc, #180]	; 14364 <__assert_fail@plt+0x1b64>
   142ac:	bl	12728 <bindtextdomain@plt>
   142b0:	cmp	r4, #0
   142b4:	beq	14320 <__assert_fail@plt+0x1b20>
   142b8:	mov	r0, #12
   142bc:	bl	120bc <gcry_malloc@plt>
   142c0:	cmp	r0, #0
   142c4:	ldrne	r3, [r4, #4]
   142c8:	strdne	r6, [r0, #4]
   142cc:	strne	r3, [r0]
   142d0:	strne	r0, [r4, #4]
   142d4:	b	142fc <__assert_fail@plt+0x1afc>
   142d8:	mov	r0, #0
   142dc:	bl	12218 <gcry_free@plt>
   142e0:	mov	r1, r6
   142e4:	mov	r2, #5
   142e8:	mov	r0, #0
   142ec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   142f0:	b	12254 <dcgettext@plt>
   142f4:	ldr	r7, [r3, #8]
   142f8:	mov	r9, #0
   142fc:	mov	r0, r9
   14300:	bl	12218 <gcry_free@plt>
   14304:	cmp	r7, #0
   14308:	beq	142e0 <__assert_fail@plt+0x1ae0>
   1430c:	mov	r0, r7
   14310:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14314:	mov	r0, r9
   14318:	bl	12218 <gcry_free@plt>
   1431c:	b	142e0 <__assert_fail@plt+0x1ae0>
   14320:	mov	r0, r5
   14324:	bl	124b8 <strlen@plt>
   14328:	add	r0, r0, #12
   1432c:	bl	120bc <gcry_malloc@plt>
   14330:	subs	r4, r0, #0
   14334:	beq	142fc <__assert_fail@plt+0x1afc>
   14338:	mov	r1, r5
   1433c:	add	r0, r4, #8
   14340:	bl	12344 <strcpy@plt>
   14344:	ldr	r2, [r8]
   14348:	mov	r3, #0
   1434c:	str	r2, [r4]
   14350:	str	r4, [r8]
   14354:	str	r3, [r4, #4]
   14358:	b	142b8 <__assert_fail@plt+0x1ab8>
   1435c:	andeq	r6, r3, r4, ror #2
   14360:	andeq	r2, r2, r4, lsl #17
   14364:	muleq	r2, r8, r8
   14368:	push	{r4, r5, r6, r7, lr}
   1436c:	ldrb	r6, [r0]
   14370:	cmp	r6, #48	; 0x30
   14374:	beq	1443c <__assert_fail@plt+0x1c3c>
   14378:	sub	r7, r6, #48	; 0x30
   1437c:	uxtb	ip, r7
   14380:	cmp	ip, #9
   14384:	movhi	ip, #0
   14388:	bhi	143c8 <__assert_fail@plt+0x1bc8>
   1438c:	ldrb	r4, [r0, #1]
   14390:	sub	lr, r4, #48	; 0x30
   14394:	add	r5, r0, #1
   14398:	mov	ip, #0
   1439c:	b	143ac <__assert_fail@plt+0x1bac>
   143a0:	ldrb	r4, [r5, #1]!
   143a4:	sub	r7, r6, #48	; 0x30
   143a8:	sub	lr, r4, #48	; 0x30
   143ac:	add	ip, ip, ip, lsl #2
   143b0:	uxtb	lr, lr
   143b4:	cmp	lr, #9
   143b8:	mov	r6, r4
   143bc:	add	ip, r7, ip, lsl #1
   143c0:	mov	r0, r5
   143c4:	bls	143a0 <__assert_fail@plt+0x1ba0>
   143c8:	str	ip, [r1]
   143cc:	ldrb	r1, [r0]
   143d0:	cmp	r1, #46	; 0x2e
   143d4:	bne	14454 <__assert_fail@plt+0x1c54>
   143d8:	ldrb	r4, [r0, #1]
   143dc:	add	lr, r0, #1
   143e0:	cmp	r4, #48	; 0x30
   143e4:	beq	14460 <__assert_fail@plt+0x1c60>
   143e8:	sub	ip, r4, #48	; 0x30
   143ec:	uxtb	r1, ip
   143f0:	cmp	r1, #9
   143f4:	movhi	r1, #0
   143f8:	bhi	1441c <__assert_fail@plt+0x1c1c>
   143fc:	mov	r1, #0
   14400:	ldrb	r4, [lr, #1]!
   14404:	add	r1, r1, r1, lsl #2
   14408:	add	r1, ip, r1, lsl #1
   1440c:	sub	ip, r4, #48	; 0x30
   14410:	uxtb	r0, ip
   14414:	cmp	r0, #9
   14418:	bls	14400 <__assert_fail@plt+0x1c00>
   1441c:	str	r1, [r2]
   14420:	ldrb	r2, [lr]
   14424:	cmp	r2, #46	; 0x2e
   14428:	movne	r2, #0
   1442c:	beq	14478 <__assert_fail@plt+0x1c78>
   14430:	str	r2, [r3]
   14434:	mov	r0, lr
   14438:	pop	{r4, r5, r6, r7, pc}
   1443c:	ldrb	r4, [r0, #1]
   14440:	sub	lr, r4, #48	; 0x30
   14444:	uxtb	ip, lr
   14448:	cmp	ip, #9
   1444c:	movhi	r7, #0
   14450:	bhi	14394 <__assert_fail@plt+0x1b94>
   14454:	mov	lr, #0
   14458:	mov	r0, lr
   1445c:	pop	{r4, r5, r6, r7, pc}
   14460:	ldrb	r1, [r0, #2]
   14464:	sub	r1, r1, #48	; 0x30
   14468:	cmp	r1, #9
   1446c:	bls	14454 <__assert_fail@plt+0x1c54>
   14470:	mov	ip, #0
   14474:	b	143fc <__assert_fail@plt+0x1bfc>
   14478:	ldrb	r0, [lr, #1]
   1447c:	add	r2, lr, #1
   14480:	cmp	r0, #48	; 0x30
   14484:	beq	144c8 <__assert_fail@plt+0x1cc8>
   14488:	sub	r1, r0, #48	; 0x30
   1448c:	uxtb	r0, r1
   14490:	cmp	r0, #9
   14494:	movhi	lr, r2
   14498:	movhi	r2, #0
   1449c:	bhi	14430 <__assert_fail@plt+0x1c30>
   144a0:	mov	lr, r2
   144a4:	mov	r2, #0
   144a8:	ldrb	r0, [lr, #1]!
   144ac:	add	r2, r2, r2, lsl #2
   144b0:	add	r2, r1, r2, lsl #1
   144b4:	sub	r1, r0, #48	; 0x30
   144b8:	uxtb	r0, r1
   144bc:	cmp	r0, #9
   144c0:	bls	144a8 <__assert_fail@plt+0x1ca8>
   144c4:	b	14430 <__assert_fail@plt+0x1c30>
   144c8:	ldrb	r1, [lr, #2]
   144cc:	sub	r1, r1, #48	; 0x30
   144d0:	cmp	r1, #9
   144d4:	bls	14454 <__assert_fail@plt+0x1c54>
   144d8:	mov	r1, #0
   144dc:	b	144a0 <__assert_fail@plt+0x1ca0>
   144e0:	cmp	r1, #0
   144e4:	push	{r4, lr}
   144e8:	mov	r4, r0
   144ec:	beq	1451c <__assert_fail@plt+0x1d1c>
   144f0:	mov	r0, r1
   144f4:	bl	120d4 <getpwnam@plt>
   144f8:	cmp	r0, #0
   144fc:	popeq	{r4, pc}
   14500:	cmp	r4, #0
   14504:	ldr	r0, [r0, #20]
   14508:	beq	14514 <__assert_fail@plt+0x1d14>
   1450c:	pop	{r4, lr}
   14510:	b	125c0 <gcry_xstrdup@plt>
   14514:	pop	{r4, lr}
   14518:	b	127d0 <gcry_strdup@plt>
   1451c:	bl	12164 <getuid@plt>
   14520:	bl	12128 <getpwuid@plt>
   14524:	cmp	r0, #0
   14528:	bne	14500 <__assert_fail@plt+0x1d00>
   1452c:	pop	{r4, pc}
   14530:	push	{r4, r5, r6, r7, r8, lr}
   14534:	sub	sp, sp, #200	; 0xc8
   14538:	ldr	r8, [pc, #188]	; 145fc <__assert_fail@plt+0x1dfc>
   1453c:	mov	r5, r1
   14540:	str	r0, [sp, #4]
   14544:	ldr	r3, [r8]
   14548:	str	r3, [sp, #196]	; 0xc4
   1454c:	bl	124b8 <strlen@plt>
   14550:	mov	r6, r0
   14554:	ldr	r0, [r5], #4
   14558:	cmp	r0, #0
   1455c:	str	r0, [sp, #8]
   14560:	beq	14598 <__assert_fail@plt+0x1d98>
   14564:	bl	124b8 <strlen@plt>
   14568:	add	r4, sp, #12
   1456c:	add	r7, sp, #196	; 0xc4
   14570:	add	r6, r6, r0
   14574:	b	14588 <__assert_fail@plt+0x1d88>
   14578:	bl	124b8 <strlen@plt>
   1457c:	cmp	r7, r4
   14580:	add	r6, r6, r0
   14584:	beq	145e8 <__assert_fail@plt+0x1de8>
   14588:	ldr	r0, [r5], #4
   1458c:	cmp	r0, #0
   14590:	str	r0, [r4], #4
   14594:	bne	14578 <__assert_fail@plt+0x1d78>
   14598:	add	r0, r6, #1
   1459c:	bl	120bc <gcry_malloc@plt>
   145a0:	subs	r5, r0, #0
   145a4:	beq	145cc <__assert_fail@plt+0x1dcc>
   145a8:	ldr	r1, [sp, #4]
   145ac:	cmp	r1, #0
   145b0:	beq	145cc <__assert_fail@plt+0x1dcc>
   145b4:	add	r4, sp, #8
   145b8:	mov	r0, r5
   145bc:	bl	12248 <stpcpy@plt>
   145c0:	ldr	r1, [r4], #4
   145c4:	cmp	r1, #0
   145c8:	bne	145bc <__assert_fail@plt+0x1dbc>
   145cc:	ldr	r2, [sp, #196]	; 0xc4
   145d0:	ldr	r3, [r8]
   145d4:	mov	r0, r5
   145d8:	cmp	r2, r3
   145dc:	bne	145f8 <__assert_fail@plt+0x1df8>
   145e0:	add	sp, sp, #200	; 0xc8
   145e4:	pop	{r4, r5, r6, r7, r8, pc}
   145e8:	mov	r0, #22
   145ec:	bl	1268c <gpg_err_set_errno@plt>
   145f0:	mov	r5, #0
   145f4:	b	145cc <__assert_fail@plt+0x1dcc>
   145f8:	bl	12260 <__stack_chk_fail@plt>
   145fc:	andeq	r5, r3, r8, asr #22
   14600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14604:	sub	sp, sp, #148	; 0x94
   14608:	ldr	r7, [pc, #1020]	; 14a0c <__assert_fail@plt+0x220c>
   1460c:	mov	r9, r0
   14610:	mov	r0, r1
   14614:	ldr	r3, [r7]
   14618:	mov	fp, r2
   1461c:	mov	r6, r1
   14620:	str	r3, [sp, #140]	; 0x8c
   14624:	bl	124b8 <strlen@plt>
   14628:	and	r8, r9, #1
   1462c:	mov	r5, r0
   14630:	ldr	r0, [fp], #4
   14634:	cmp	r0, #0
   14638:	str	r0, [sp, #12]
   1463c:	addeq	r5, r5, #1
   14640:	beq	14680 <__assert_fail@plt+0x1e80>
   14644:	bl	124b8 <strlen@plt>
   14648:	add	r5, r5, #2
   1464c:	add	r4, sp, #16
   14650:	add	sl, sp, #140	; 0x8c
   14654:	add	r5, r5, r0
   14658:	b	14670 <__assert_fail@plt+0x1e70>
   1465c:	bl	124b8 <strlen@plt>
   14660:	cmp	sl, r4
   14664:	add	r0, r0, #1
   14668:	add	r5, r5, r0
   1466c:	beq	1480c <__assert_fail@plt+0x200c>
   14670:	ldr	r0, [fp], #4
   14674:	cmp	r0, #0
   14678:	str	r0, [r4], #4
   1467c:	bne	1465c <__assert_fail@plt+0x1e5c>
   14680:	ldrb	r3, [r6]
   14684:	add	r5, r5, #1
   14688:	cmp	r3, #126	; 0x7e
   1468c:	beq	14788 <__assert_fail@plt+0x1f88>
   14690:	mov	r4, #0
   14694:	mov	fp, r4
   14698:	mov	r3, #1
   1469c:	str	r3, [sp, #4]
   146a0:	cmp	r8, #0
   146a4:	mov	r0, r5
   146a8:	beq	14824 <__assert_fail@plt+0x2024>
   146ac:	bl	12098 <gcry_xmalloc@plt>
   146b0:	mov	sl, r0
   146b4:	cmp	r4, #0
   146b8:	beq	14928 <__assert_fail@plt+0x2128>
   146bc:	mov	r1, r4
   146c0:	mov	r0, sl
   146c4:	bl	12248 <stpcpy@plt>
   146c8:	ldr	r3, [sp, #4]
   146cc:	add	r1, r6, r3
   146d0:	bl	12248 <stpcpy@plt>
   146d4:	mov	r4, r0
   146d8:	mov	r0, fp
   146dc:	bl	12218 <gcry_free@plt>
   146e0:	ldr	r1, [sp, #12]
   146e4:	cmp	r1, #0
   146e8:	addne	fp, sp, #16
   146ec:	movne	r6, #0
   146f0:	movne	r5, #47	; 0x2f
   146f4:	bne	1471c <__assert_fail@plt+0x1f1c>
   146f8:	b	14758 <__assert_fail@plt+0x1f58>
   146fc:	mov	r0, r4
   14700:	add	r6, r6, #1
   14704:	strb	r5, [r0], #1
   14708:	bl	12248 <stpcpy@plt>
   1470c:	ldr	r1, [fp], #4
   14710:	cmp	r1, #0
   14714:	mov	r4, r0
   14718:	beq	14758 <__assert_fail@plt+0x1f58>
   1471c:	cmp	r6, #0
   14720:	bne	146fc <__assert_fail@plt+0x1efc>
   14724:	ldrb	r3, [sl]
   14728:	cmp	r3, #47	; 0x2f
   1472c:	bne	146fc <__assert_fail@plt+0x1efc>
   14730:	ldrb	r3, [sl, #1]
   14734:	cmp	r3, #0
   14738:	bne	146fc <__assert_fail@plt+0x1efc>
   1473c:	mov	r0, r4
   14740:	bl	12248 <stpcpy@plt>
   14744:	ldr	r1, [fp], #4
   14748:	add	r6, r6, #1
   1474c:	cmp	r1, #0
   14750:	mov	r4, r0
   14754:	bne	1471c <__assert_fail@plt+0x1f1c>
   14758:	tst	r9, #2
   1475c:	beq	1476c <__assert_fail@plt+0x1f6c>
   14760:	ldrb	r3, [sl]
   14764:	cmp	r3, #47	; 0x2f
   14768:	bne	1483c <__assert_fail@plt+0x203c>
   1476c:	ldr	r2, [sp, #140]	; 0x8c
   14770:	ldr	r3, [r7]
   14774:	mov	r0, sl
   14778:	cmp	r2, r3
   1477c:	bne	14a08 <__assert_fail@plt+0x2208>
   14780:	add	sp, sp, #148	; 0x94
   14784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14788:	ldrb	r3, [r6, #1]
   1478c:	cmp	r3, #0
   14790:	cmpne	r3, #47	; 0x2f
   14794:	beq	148e0 <__assert_fail@plt+0x20e0>
   14798:	cmp	r8, #0
   1479c:	add	r0, r6, #1
   147a0:	beq	1493c <__assert_fail@plt+0x213c>
   147a4:	bl	125c0 <gcry_xstrdup@plt>
   147a8:	mov	sl, r0
   147ac:	mov	r1, #47	; 0x2f
   147b0:	mov	r0, sl
   147b4:	bl	124d0 <strchr@plt>
   147b8:	cmp	r0, #0
   147bc:	movne	r3, #0
   147c0:	strbne	r3, [r0]
   147c4:	mov	r0, sl
   147c8:	bl	124b8 <strlen@plt>
   147cc:	mov	r1, sl
   147d0:	mov	r4, r0
   147d4:	mov	r0, r8
   147d8:	bl	144e0 <__assert_fail@plt+0x1ce0>
   147dc:	mov	fp, r0
   147e0:	mov	r0, sl
   147e4:	bl	12218 <gcry_free@plt>
   147e8:	cmp	fp, #0
   147ec:	beq	14918 <__assert_fail@plt+0x2118>
   147f0:	mov	r0, fp
   147f4:	bl	124b8 <strlen@plt>
   147f8:	add	r3, r4, #1
   147fc:	str	r3, [sp, #4]
   14800:	mov	r4, fp
   14804:	add	r5, r5, r0
   14808:	b	146a0 <__assert_fail@plt+0x1ea0>
   1480c:	cmp	r8, #0
   14810:	bne	149f8 <__assert_fail@plt+0x21f8>
   14814:	mov	r0, #22
   14818:	mov	sl, r8
   1481c:	bl	1268c <gpg_err_set_errno@plt>
   14820:	b	1476c <__assert_fail@plt+0x1f6c>
   14824:	bl	120bc <gcry_malloc@plt>
   14828:	subs	sl, r0, #0
   1482c:	bne	146b4 <__assert_fail@plt+0x1eb4>
   14830:	mov	r0, fp
   14834:	bl	12218 <gcry_free@plt>
   14838:	b	1476c <__assert_fail@plt+0x1f6c>
   1483c:	bl	1a4b4 <__assert_fail@plt+0x7cb4>
   14840:	subs	r5, r0, #0
   14844:	beq	149a4 <__assert_fail@plt+0x21a4>
   14848:	bl	124b8 <strlen@plt>
   1484c:	mov	r4, r0
   14850:	mov	r0, sl
   14854:	bl	124b8 <strlen@plt>
   14858:	cmp	r8, #0
   1485c:	add	r0, r4, r0
   14860:	add	r0, r0, #2
   14864:	beq	1494c <__assert_fail@plt+0x214c>
   14868:	bl	12098 <gcry_xmalloc@plt>
   1486c:	mov	r4, r0
   14870:	ldrb	r3, [r5]
   14874:	cmp	r3, #47	; 0x2f
   14878:	bne	14888 <__assert_fail@plt+0x2088>
   1487c:	ldrb	r2, [r5, #1]
   14880:	cmp	r2, #0
   14884:	beq	14970 <__assert_fail@plt+0x2170>
   14888:	mov	r1, r5
   1488c:	mov	r0, r4
   14890:	bl	12248 <stpcpy@plt>
   14894:	mov	r3, #47	; 0x2f
   14898:	mov	r1, sl
   1489c:	strb	r3, [r0], #1
   148a0:	bl	12344 <strcpy@plt>
   148a4:	mov	r0, r5
   148a8:	bl	12218 <gcry_free@plt>
   148ac:	mov	r0, sl
   148b0:	bl	12218 <gcry_free@plt>
   148b4:	mov	r0, r4
   148b8:	bl	124b8 <strlen@plt>
   148bc:	cmp	r0, #2
   148c0:	bls	148d8 <__assert_fail@plt+0x20d8>
   148c4:	sub	r3, r0, #2
   148c8:	add	r2, r4, r3
   148cc:	ldrb	r3, [r4, r3]
   148d0:	cmp	r3, #47	; 0x2f
   148d4:	beq	14984 <__assert_fail@plt+0x2184>
   148d8:	mov	sl, r4
   148dc:	b	1476c <__assert_fail@plt+0x1f6c>
   148e0:	ldr	r0, [pc, #296]	; 14a10 <__assert_fail@plt+0x2210>
   148e4:	bl	123a4 <getenv@plt>
   148e8:	subs	r4, r0, #0
   148ec:	movne	fp, #0
   148f0:	beq	149dc <__assert_fail@plt+0x21dc>
   148f4:	ldrb	r3, [r4]
   148f8:	cmp	r3, #0
   148fc:	beq	1491c <__assert_fail@plt+0x211c>
   14900:	mov	r0, r4
   14904:	bl	124b8 <strlen@plt>
   14908:	mov	r3, #1
   1490c:	str	r3, [sp, #4]
   14910:	add	r5, r5, r0
   14914:	b	146a0 <__assert_fail@plt+0x1ea0>
   14918:	mov	r4, fp
   1491c:	mov	r3, #1
   14920:	str	r3, [sp, #4]
   14924:	b	146a0 <__assert_fail@plt+0x1ea0>
   14928:	mov	r1, r6
   1492c:	mov	r0, sl
   14930:	bl	12248 <stpcpy@plt>
   14934:	mov	r4, r0
   14938:	b	146d8 <__assert_fail@plt+0x1ed8>
   1493c:	bl	127d0 <gcry_strdup@plt>
   14940:	subs	sl, r0, #0
   14944:	bne	147ac <__assert_fail@plt+0x1fac>
   14948:	b	1476c <__assert_fail@plt+0x1f6c>
   1494c:	bl	120bc <gcry_malloc@plt>
   14950:	subs	r4, r0, #0
   14954:	bne	14870 <__assert_fail@plt+0x2070>
   14958:	mov	r0, r5
   1495c:	bl	12218 <gcry_free@plt>
   14960:	mov	r0, sl
   14964:	bl	12218 <gcry_free@plt>
   14968:	mov	sl, r8
   1496c:	b	1476c <__assert_fail@plt+0x1f6c>
   14970:	mov	r0, r4
   14974:	mov	r1, sl
   14978:	strb	r3, [r0], #1
   1497c:	bl	12344 <strcpy@plt>
   14980:	b	148a4 <__assert_fail@plt+0x20a4>
   14984:	add	r0, r4, r0
   14988:	ldrb	r3, [r0, #-1]
   1498c:	cmp	r3, #46	; 0x2e
   14990:	moveq	r3, #0
   14994:	moveq	sl, r4
   14998:	strbeq	r3, [r2]
   1499c:	bne	148d8 <__assert_fail@plt+0x20d8>
   149a0:	b	1476c <__assert_fail@plt+0x1f6c>
   149a4:	cmp	r8, #0
   149a8:	beq	14960 <__assert_fail@plt+0x2160>
   149ac:	ldr	r3, [pc, #96]	; 14a14 <__assert_fail@plt+0x2214>
   149b0:	ldr	r4, [r3]
   149b4:	bl	12518 <__errno_location@plt>
   149b8:	ldr	r0, [r0]
   149bc:	bl	123ec <strerror@plt>
   149c0:	ldr	r2, [pc, #80]	; 14a18 <__assert_fail@plt+0x2218>
   149c4:	mov	r1, #1
   149c8:	mov	r3, r0
   149cc:	mov	r0, r4
   149d0:	bl	125b4 <__fprintf_chk@plt>
   149d4:	mov	r0, #2
   149d8:	bl	1247c <exit@plt>
   149dc:	mov	r1, r4
   149e0:	mov	r0, r8
   149e4:	bl	144e0 <__assert_fail@plt+0x1ce0>
   149e8:	subs	fp, r0, #0
   149ec:	mov	r4, fp
   149f0:	beq	1491c <__assert_fail@plt+0x211c>
   149f4:	b	148f4 <__assert_fail@plt+0x20f4>
   149f8:	ldr	r2, [pc, #28]	; 14a1c <__assert_fail@plt+0x221c>
   149fc:	mov	r1, #432	; 0x1b0
   14a00:	ldr	r0, [pc, #24]	; 14a20 <__assert_fail@plt+0x2220>
   14a04:	bl	1992c <__assert_fail@plt+0x712c>
   14a08:	bl	12260 <__stack_chk_fail@plt>
   14a0c:	andeq	r5, r3, r8, asr #22
   14a10:	andeq	r2, r2, r4, ror #17
   14a14:	andeq	r6, r3, r0, asr r1
   14a18:	andeq	r2, r2, ip, ror #17
   14a1c:	andeq	r2, r2, r8, lsr #17
   14a20:	andeq	r2, r2, r8, asr #17
   14a24:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a28:	mov	fp, r1
   14a2c:	ldrb	r1, [r0]
   14a30:	mov	r7, r0
   14a34:	mov	r6, r2
   14a38:	cmp	r1, #0
   14a3c:	beq	14c10 <__assert_fail@plt+0x2410>
   14a40:	mov	r4, r0
   14a44:	mov	r5, #0
   14a48:	rsb	r8, r0, #1
   14a4c:	b	14a64 <__assert_fail@plt+0x2264>
   14a50:	add	r5, r5, #1
   14a54:	add	r0, r8, r4
   14a58:	ldrb	r1, [r4, #1]!
   14a5c:	cmp	r1, #0
   14a60:	beq	14aa8 <__assert_fail@plt+0x22a8>
   14a64:	cmp	r1, #37	; 0x25
   14a68:	cmpne	r1, #58	; 0x3a
   14a6c:	moveq	r3, #1
   14a70:	movne	r3, #0
   14a74:	cmp	r1, #10
   14a78:	orreq	r3, r3, #1
   14a7c:	cmp	r3, #0
   14a80:	bne	14a50 <__assert_fail@plt+0x2250>
   14a84:	subs	r0, fp, #0
   14a88:	beq	14a54 <__assert_fail@plt+0x2254>
   14a8c:	bl	124d0 <strchr@plt>
   14a90:	cmp	r0, #0
   14a94:	bne	14a50 <__assert_fail@plt+0x2250>
   14a98:	add	r0, r8, r4
   14a9c:	ldrb	r1, [r4, #1]!
   14aa0:	cmp	r1, #0
   14aa4:	bne	14a64 <__assert_fail@plt+0x2264>
   14aa8:	add	r0, r0, r5, lsl #1
   14aac:	add	r0, r0, #1
   14ab0:	cmp	r6, #0
   14ab4:	beq	14bf0 <__assert_fail@plt+0x23f0>
   14ab8:	bl	12098 <gcry_xmalloc@plt>
   14abc:	ldrb	r5, [r7]
   14ac0:	cmp	r5, #0
   14ac4:	mov	r6, r0
   14ac8:	beq	14c08 <__assert_fail@plt+0x2408>
   14acc:	mov	r4, #0
   14ad0:	mov	r3, #37	; 0x25
   14ad4:	mov	r2, #97	; 0x61
   14ad8:	b	14b54 <__assert_fail@plt+0x2354>
   14adc:	cmp	r5, #37	; 0x25
   14ae0:	beq	14ba0 <__assert_fail@plt+0x23a0>
   14ae4:	cmp	r5, #10
   14ae8:	beq	14bc4 <__assert_fail@plt+0x23c4>
   14aec:	cmp	fp, #0
   14af0:	beq	14be4 <__assert_fail@plt+0x23e4>
   14af4:	mov	r1, r5
   14af8:	mov	r0, fp
   14afc:	bl	124d0 <strchr@plt>
   14b00:	mov	r3, #37	; 0x25
   14b04:	mov	r2, #97	; 0x61
   14b08:	cmp	r0, #0
   14b0c:	beq	14be4 <__assert_fail@plt+0x23e4>
   14b10:	lsr	r1, r5, #4
   14b14:	cmp	r1, #9
   14b18:	addls	r1, r1, #48	; 0x30
   14b1c:	addhi	r1, r1, #87	; 0x57
   14b20:	and	r5, r5, #15
   14b24:	strb	r3, [sl]
   14b28:	strb	r1, [r8]
   14b2c:	add	r1, r4, #2
   14b30:	add	r4, r4, #3
   14b34:	cmp	r5, #9
   14b38:	add	r8, r6, r4
   14b3c:	addls	r5, r5, #48	; 0x30
   14b40:	addhi	r5, r5, #87	; 0x57
   14b44:	strb	r5, [r6, r1]
   14b48:	ldrb	r5, [r7, #1]!
   14b4c:	cmp	r5, #0
   14b50:	beq	14b90 <__assert_fail@plt+0x2390>
   14b54:	add	r9, r4, #1
   14b58:	cmp	r5, #58	; 0x3a
   14b5c:	add	r8, r6, r9
   14b60:	add	sl, r6, r4
   14b64:	bne	14adc <__assert_fail@plt+0x22dc>
   14b68:	add	r1, r4, #2
   14b6c:	mov	r0, #51	; 0x33
   14b70:	strb	r3, [r6, r4]
   14b74:	strb	r0, [r6, r9]
   14b78:	strb	r2, [r6, r1]
   14b7c:	ldrb	r5, [r7, #1]!
   14b80:	add	r4, r4, #3
   14b84:	add	r8, r6, r4
   14b88:	cmp	r5, #0
   14b8c:	bne	14b54 <__assert_fail@plt+0x2354>
   14b90:	mov	r3, #0
   14b94:	strb	r3, [r8]
   14b98:	mov	r0, r6
   14b9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba0:	add	r1, r4, #2
   14ba4:	mov	r0, #50	; 0x32
   14ba8:	strb	r5, [sl]
   14bac:	add	r4, r4, #3
   14bb0:	strb	r0, [r8]
   14bb4:	mov	r0, #53	; 0x35
   14bb8:	strb	r0, [r6, r1]
   14bbc:	add	r8, r6, r4
   14bc0:	b	14b48 <__assert_fail@plt+0x2348>
   14bc4:	add	r1, r4, #2
   14bc8:	mov	r0, #48	; 0x30
   14bcc:	add	r4, r4, #3
   14bd0:	strb	r3, [sl]
   14bd4:	strb	r0, [r8]
   14bd8:	strb	r2, [r6, r1]
   14bdc:	add	r8, r6, r4
   14be0:	b	14b48 <__assert_fail@plt+0x2348>
   14be4:	mov	r4, r9
   14be8:	strb	r5, [sl]
   14bec:	b	14b48 <__assert_fail@plt+0x2348>
   14bf0:	bl	120bc <gcry_malloc@plt>
   14bf4:	subs	r6, r0, #0
   14bf8:	beq	14b98 <__assert_fail@plt+0x2398>
   14bfc:	ldrb	r5, [r7]
   14c00:	cmp	r5, #0
   14c04:	bne	14acc <__assert_fail@plt+0x22cc>
   14c08:	mov	r8, r6
   14c0c:	b	14b90 <__assert_fail@plt+0x2390>
   14c10:	mov	r0, #1
   14c14:	b	14ab0 <__assert_fail@plt+0x22b0>
   14c18:	ldrb	r3, [r0]
   14c1c:	mov	r2, r0
   14c20:	cmp	r3, #0
   14c24:	beq	14c58 <__assert_fail@plt+0x2458>
   14c28:	mov	r0, #0
   14c2c:	and	r3, r3, #192	; 0xc0
   14c30:	cmp	r3, #128	; 0x80
   14c34:	addne	r0, r0, #1
   14c38:	cmn	r1, #1
   14c3c:	beq	14c48 <__assert_fail@plt+0x2448>
   14c40:	subs	r1, r1, #1
   14c44:	bxeq	lr
   14c48:	ldrb	r3, [r2, #1]!
   14c4c:	cmp	r3, #0
   14c50:	bne	14c2c <__assert_fail@plt+0x242c>
   14c54:	bx	lr
   14c58:	mov	r0, r3
   14c5c:	bx	lr
   14c60:	cmp	r2, #0
   14c64:	beq	14ccc <__assert_fail@plt+0x24cc>
   14c68:	add	r2, r0, r2
   14c6c:	push	{r4, r5, r6, lr}
   14c70:	sub	r0, r0, #1
   14c74:	sub	r6, r2, #1
   14c78:	sub	r1, r1, #1
   14c7c:	ldrb	lr, [r0, #1]!
   14c80:	ldrb	ip, [r1, #1]!
   14c84:	mov	r2, lr
   14c88:	cmp	lr, ip
   14c8c:	mov	r3, ip
   14c90:	sub	r5, lr, #97	; 0x61
   14c94:	sub	r4, ip, #97	; 0x61
   14c98:	beq	14cb4 <__assert_fail@plt+0x24b4>
   14c9c:	cmp	r5, #25
   14ca0:	bicls	r2, lr, #32
   14ca4:	cmp	r4, #25
   14ca8:	bicls	r3, ip, #32
   14cac:	cmp	r3, r2
   14cb0:	bne	14cc4 <__assert_fail@plt+0x24c4>
   14cb4:	cmp	r0, r6
   14cb8:	bne	14c7c <__assert_fail@plt+0x247c>
   14cbc:	mov	r0, #0
   14cc0:	pop	{r4, r5, r6, pc}
   14cc4:	sub	r0, r2, r3
   14cc8:	pop	{r4, r5, r6, pc}
   14ccc:	mov	r0, r2
   14cd0:	bx	lr
   14cd4:	push	{r4, r5, r6, lr}
   14cd8:	mov	r4, r0
   14cdc:	mov	r0, r1
   14ce0:	mov	r6, r1
   14ce4:	bl	124b8 <strlen@plt>
   14ce8:	mov	r1, r6
   14cec:	mov	r2, r0
   14cf0:	mov	r5, r0
   14cf4:	mov	r0, r4
   14cf8:	bl	12794 <strncmp@plt>
   14cfc:	cmp	r0, #0
   14d00:	bne	14d50 <__assert_fail@plt+0x2550>
   14d04:	ldrb	r2, [r4, r5]
   14d08:	add	r0, r4, r5
   14d0c:	tst	r2, #223	; 0xdf
   14d10:	sub	r3, r2, #9
   14d14:	clz	r3, r3
   14d18:	lsr	r3, r3, #5
   14d1c:	movne	r1, r3
   14d20:	moveq	r1, #1
   14d24:	cmp	r1, #0
   14d28:	beq	14d50 <__assert_fail@plt+0x2550>
   14d2c:	cmp	r2, #32
   14d30:	orreq	r3, r3, #1
   14d34:	cmp	r3, #0
   14d38:	popeq	{r4, r5, r6, pc}
   14d3c:	ldrb	r3, [r0, #1]!
   14d40:	cmp	r3, #9
   14d44:	cmpne	r3, #32
   14d48:	beq	14d3c <__assert_fail@plt+0x253c>
   14d4c:	pop	{r4, r5, r6, pc}
   14d50:	mov	r0, #0
   14d54:	pop	{r4, r5, r6, pc}
   14d58:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d5c:	subs	r5, r1, #0
   14d60:	beq	14e0c <__assert_fail@plt+0x260c>
   14d64:	mov	r4, r0
   14d68:	mov	r8, r2
   14d6c:	bl	12410 <__ctype_toupper_loc@plt>
   14d70:	ldrb	r3, [r8]
   14d74:	mov	r1, r5
   14d78:	add	r9, r4, r1
   14d7c:	mov	r5, r4
   14d80:	ldr	r0, [r0]
   14d84:	ldr	sl, [r0, r3, lsl #2]
   14d88:	b	14d9c <__assert_fail@plt+0x259c>
   14d8c:	cmp	lr, #0
   14d90:	beq	14e14 <__assert_fail@plt+0x2614>
   14d94:	mov	r1, lr
   14d98:	mov	r5, r3
   14d9c:	mov	r3, r5
   14da0:	sub	lr, r1, #1
   14da4:	ldrb	r2, [r3], #1
   14da8:	ldr	r2, [r0, r2, lsl #2]
   14dac:	cmp	r2, sl
   14db0:	bne	14d8c <__assert_fail@plt+0x258c>
   14db4:	cmp	r3, r9
   14db8:	add	r4, r8, #1
   14dbc:	ldrb	ip, [r8, #1]
   14dc0:	beq	14e20 <__assert_fail@plt+0x2620>
   14dc4:	ldrb	r6, [r3]
   14dc8:	ldr	r2, [r0, ip, lsl #2]
   14dcc:	ldr	r6, [r0, r6, lsl #2]
   14dd0:	cmp	r6, r2
   14dd4:	bne	14e04 <__assert_fail@plt+0x2604>
   14dd8:	add	fp, r5, r1
   14ddc:	add	r1, r3, #1
   14de0:	b	14df8 <__assert_fail@plt+0x25f8>
   14de4:	ldrb	r2, [r1], #1
   14de8:	ldr	r6, [r0, ip, lsl #2]
   14dec:	ldr	r7, [r0, r2, lsl #2]
   14df0:	cmp	r7, r6
   14df4:	bne	14e04 <__assert_fail@plt+0x2604>
   14df8:	cmp	fp, r1
   14dfc:	ldrb	ip, [r4, #1]!
   14e00:	bne	14de4 <__assert_fail@plt+0x25e4>
   14e04:	cmp	ip, #0
   14e08:	bne	14d94 <__assert_fail@plt+0x2594>
   14e0c:	mov	r0, r5
   14e10:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e14:	mov	r5, lr
   14e18:	mov	r0, r5
   14e1c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e20:	cmp	ip, #0
   14e24:	bne	14d8c <__assert_fail@plt+0x258c>
   14e28:	b	14e0c <__assert_fail@plt+0x260c>
   14e2c:	cmp	r1, #0
   14e30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e34:	beq	14e84 <__assert_fail@plt+0x2684>
   14e38:	ldrb	r6, [r2]
   14e3c:	add	r8, r1, #1
   14e40:	add	r8, r2, r8
   14e44:	sub	r3, r6, #97	; 0x61
   14e48:	cmp	r3, #25
   14e4c:	add	r8, r0, r8
   14e50:	andls	r6, r6, #223	; 0xdf
   14e54:	add	r7, r0, r1
   14e58:	ldrb	r1, [r0]
   14e5c:	add	r3, r0, #1
   14e60:	mov	r9, r0
   14e64:	sub	r0, r1, #97	; 0x61
   14e68:	cmp	r0, #25
   14e6c:	bicls	r1, r1, #32
   14e70:	cmp	r6, r1
   14e74:	mov	r0, r3
   14e78:	beq	14e90 <__assert_fail@plt+0x2690>
   14e7c:	cmp	r7, r3
   14e80:	bne	14e58 <__assert_fail@plt+0x2658>
   14e84:	mov	r9, #0
   14e88:	mov	r0, r9
   14e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e90:	cmp	r3, r7
   14e94:	add	lr, r2, #1
   14e98:	ldrb	ip, [r2, #1]
   14e9c:	beq	14ef0 <__assert_fail@plt+0x26f0>
   14ea0:	sub	sl, r8, r3
   14ea4:	b	14eb4 <__assert_fail@plt+0x26b4>
   14ea8:	ldrb	ip, [lr, #1]!
   14eac:	cmp	lr, sl
   14eb0:	beq	14ee0 <__assert_fail@plt+0x26e0>
   14eb4:	ldrb	r1, [r3]
   14eb8:	sub	r4, ip, #97	; 0x61
   14ebc:	add	r3, r3, #1
   14ec0:	sub	r5, r1, #97	; 0x61
   14ec4:	cmp	r5, #25
   14ec8:	bicls	r1, r1, #32
   14ecc:	cmp	r4, #25
   14ed0:	mov	r4, ip
   14ed4:	bicls	r4, ip, #32
   14ed8:	cmp	r4, r1
   14edc:	beq	14ea8 <__assert_fail@plt+0x26a8>
   14ee0:	cmp	ip, #0
   14ee4:	bne	14e58 <__assert_fail@plt+0x2658>
   14ee8:	mov	r0, r9
   14eec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ef0:	cmp	ip, #0
   14ef4:	bne	14e84 <__assert_fail@plt+0x2684>
   14ef8:	b	14e88 <__assert_fail@plt+0x2688>
   14efc:	push	{r4, lr}
   14f00:	subs	r4, r2, #0
   14f04:	sub	sp, sp, #8
   14f08:	beq	14f5c <__assert_fail@plt+0x275c>
   14f0c:	cmp	r0, #0
   14f10:	beq	14f64 <__assert_fail@plt+0x2764>
   14f14:	cmp	r4, #1
   14f18:	beq	14f78 <__assert_fail@plt+0x2778>
   14f1c:	ldrb	r3, [r1]
   14f20:	cmp	r3, #0
   14f24:	beq	14f78 <__assert_fail@plt+0x2778>
   14f28:	sub	ip, r1, #1
   14f2c:	add	r2, ip, r4
   14f30:	add	r1, r1, #1
   14f34:	mov	ip, r0
   14f38:	b	14f48 <__assert_fail@plt+0x2748>
   14f3c:	ldrb	r3, [r1], #1
   14f40:	cmp	r3, #0
   14f44:	beq	14f54 <__assert_fail@plt+0x2754>
   14f48:	cmp	r1, r2
   14f4c:	strb	r3, [ip], #1
   14f50:	bne	14f3c <__assert_fail@plt+0x273c>
   14f54:	mov	r3, #0
   14f58:	strb	r3, [ip]
   14f5c:	add	sp, sp, #8
   14f60:	pop	{r4, pc}
   14f64:	mov	r0, r4
   14f68:	str	r1, [sp, #4]
   14f6c:	bl	12098 <gcry_xmalloc@plt>
   14f70:	ldr	r1, [sp, #4]
   14f74:	b	14f14 <__assert_fail@plt+0x2714>
   14f78:	mov	ip, r0
   14f7c:	b	14f54 <__assert_fail@plt+0x2754>
   14f80:	push	{r4, r5, r6, lr}
   14f84:	mov	r5, r0
   14f88:	ldrb	r4, [r0]
   14f8c:	cmp	r4, #0
   14f90:	beq	1500c <__assert_fail@plt+0x280c>
   14f94:	bl	1244c <__ctype_b_loc@plt>
   14f98:	mov	r1, r5
   14f9c:	ldr	r2, [r0]
   14fa0:	b	14fb0 <__assert_fail@plt+0x27b0>
   14fa4:	ldrb	r4, [r1, #1]!
   14fa8:	cmp	r4, #0
   14fac:	beq	15014 <__assert_fail@plt+0x2814>
   14fb0:	lsl	r4, r4, #1
   14fb4:	ldrh	r3, [r2, r4]
   14fb8:	ands	r3, r3, #8192	; 0x2000
   14fbc:	bne	14fa4 <__assert_fail@plt+0x27a4>
   14fc0:	ldrb	r2, [r1]
   14fc4:	cmp	r2, #0
   14fc8:	strb	r2, [r5]
   14fcc:	movne	ip, r5
   14fd0:	beq	1500c <__assert_fail@plt+0x280c>
   14fd4:	ldr	lr, [r0]
   14fd8:	lsl	r2, r2, #1
   14fdc:	ldrh	r2, [lr, r2]
   14fe0:	ands	r2, r2, #8192	; 0x2000
   14fe4:	moveq	r3, r2
   14fe8:	beq	14ff4 <__assert_fail@plt+0x27f4>
   14fec:	cmp	r3, #0
   14ff0:	moveq	r3, ip
   14ff4:	ldrb	r2, [r1, #1]!
   14ff8:	cmp	r2, #0
   14ffc:	strb	r2, [ip, #1]!
   15000:	bne	14fd4 <__assert_fail@plt+0x27d4>
   15004:	cmp	r3, #0
   15008:	strbne	r2, [r3]
   1500c:	mov	r0, r5
   15010:	pop	{r4, r5, r6, pc}
   15014:	strb	r4, [r5]
   15018:	mov	r0, r5
   1501c:	pop	{r4, r5, r6, pc}
   15020:	push	{r4, r5, r6, lr}
   15024:	mov	r5, r0
   15028:	ldrb	r4, [r0]
   1502c:	cmp	r4, #0
   15030:	beq	15074 <__assert_fail@plt+0x2874>
   15034:	bl	1244c <__ctype_b_loc@plt>
   15038:	mov	r2, r5
   1503c:	mov	r1, #0
   15040:	ldr	r0, [r0]
   15044:	lsl	r4, r4, #1
   15048:	ldrh	r3, [r0, r4]
   1504c:	ands	r3, r3, #8192	; 0x2000
   15050:	moveq	r1, r3
   15054:	beq	15060 <__assert_fail@plt+0x2860>
   15058:	cmp	r1, #0
   1505c:	moveq	r1, r2
   15060:	ldrb	r4, [r2, #1]!
   15064:	cmp	r4, #0
   15068:	bne	15044 <__assert_fail@plt+0x2844>
   1506c:	cmp	r1, #0
   15070:	strbne	r4, [r1]
   15074:	mov	r0, r5
   15078:	pop	{r4, r5, r6, pc}
   1507c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15080:	subs	r9, r1, #0
   15084:	beq	150e4 <__assert_fail@plt+0x28e4>
   15088:	mov	r7, r2
   1508c:	mov	sl, r0
   15090:	mov	r4, r0
   15094:	add	r8, r0, r9
   15098:	mov	r5, #0
   1509c:	ldrb	r1, [r4]
   150a0:	mov	r0, r7
   150a4:	bl	124d0 <strchr@plt>
   150a8:	mov	r6, r4
   150ac:	add	r4, r4, #1
   150b0:	cmp	r0, #0
   150b4:	moveq	r5, r0
   150b8:	beq	150c4 <__assert_fail@plt+0x28c4>
   150bc:	cmp	r5, #0
   150c0:	moveq	r5, r6
   150c4:	cmp	r4, r8
   150c8:	bne	1509c <__assert_fail@plt+0x289c>
   150cc:	cmp	r5, #0
   150d0:	beq	150e4 <__assert_fail@plt+0x28e4>
   150d4:	mov	r3, #0
   150d8:	sub	r0, r5, sl
   150dc:	strb	r3, [r5]
   150e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150e4:	mov	r0, r9
   150e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150ec:	ldr	r2, [pc]	; 150f4 <__assert_fail@plt+0x28f4>
   150f0:	b	1507c <__assert_fail@plt+0x287c>
   150f4:	andeq	r2, r2, r8, lsl #18
   150f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150fc:	subs	r9, r1, #0
   15100:	beq	15158 <__assert_fail@plt+0x2958>
   15104:	mov	r7, r2
   15108:	mov	sl, r0
   1510c:	mov	r4, r0
   15110:	add	r8, r0, r9
   15114:	mov	r6, #0
   15118:	ldrb	r1, [r4]
   1511c:	mov	r0, r7
   15120:	bl	124d0 <strchr@plt>
   15124:	mov	r5, r4
   15128:	add	r4, r4, #1
   1512c:	cmp	r0, #0
   15130:	moveq	r6, r0
   15134:	beq	15140 <__assert_fail@plt+0x2940>
   15138:	cmp	r6, #0
   1513c:	moveq	r6, r5
   15140:	cmp	r4, r8
   15144:	bne	15118 <__assert_fail@plt+0x2918>
   15148:	cmp	r6, #0
   1514c:	beq	15158 <__assert_fail@plt+0x2958>
   15150:	sub	r0, r6, sl
   15154:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15158:	mov	r0, r9
   1515c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15160:	ldr	r2, [pc]	; 15168 <__assert_fail@plt+0x2968>
   15164:	b	150f8 <__assert_fail@plt+0x28f8>
   15168:	andeq	r2, r2, r8, lsl #18
   1516c:	push	{r4, lr}
   15170:	mov	r1, #47	; 0x2f
   15174:	mov	r4, r0
   15178:	bl	12668 <strrchr@plt>
   1517c:	cmp	r0, #0
   15180:	beq	15190 <__assert_fail@plt+0x2990>
   15184:	add	r0, r0, #1
   15188:	pop	{r4, lr}
   1518c:	b	125c0 <gcry_xstrdup@plt>
   15190:	mov	r0, r4
   15194:	pop	{r4, lr}
   15198:	b	125c0 <gcry_xstrdup@plt>
   1519c:	push	{r4, r5, r6, lr}
   151a0:	mov	r1, #47	; 0x2f
   151a4:	mov	r5, r0
   151a8:	bl	12668 <strrchr@plt>
   151ac:	cmp	r0, #0
   151b0:	beq	151d8 <__assert_fail@plt+0x29d8>
   151b4:	sub	r4, r0, r5
   151b8:	add	r0, r4, #1
   151bc:	bl	12098 <gcry_xmalloc@plt>
   151c0:	mov	r2, r4
   151c4:	mov	r1, r5
   151c8:	bl	12578 <strncpy@plt>
   151cc:	mov	r2, #0
   151d0:	strb	r2, [r0, r4]
   151d4:	pop	{r4, r5, r6, pc}
   151d8:	ldr	r0, [pc, #4]	; 151e4 <__assert_fail@plt+0x29e4>
   151dc:	pop	{r4, r5, r6, lr}
   151e0:	b	125c0 <gcry_xstrdup@plt>
   151e4:	muleq	r2, r8, lr
   151e8:	push	{r0, r1, r2, r3}
   151ec:	mov	r0, #1
   151f0:	push	{r4, lr}
   151f4:	sub	sp, sp, #8
   151f8:	ldr	r4, [pc, #60]	; 1523c <__assert_fail@plt+0x2a3c>
   151fc:	add	r3, sp, #20
   15200:	mov	r2, r3
   15204:	ldr	ip, [r4]
   15208:	ldr	r1, [sp, #16]
   1520c:	str	r3, [sp]
   15210:	str	ip, [sp, #4]
   15214:	bl	14600 <__assert_fail@plt+0x1e00>
   15218:	ldr	r2, [sp, #4]
   1521c:	ldr	r3, [r4]
   15220:	cmp	r2, r3
   15224:	bne	15238 <__assert_fail@plt+0x2a38>
   15228:	add	sp, sp, #8
   1522c:	pop	{r4, lr}
   15230:	add	sp, sp, #16
   15234:	bx	lr
   15238:	bl	12260 <__stack_chk_fail@plt>
   1523c:	andeq	r5, r3, r8, asr #22
   15240:	push	{r0, r1, r2, r3}
   15244:	mov	r0, #0
   15248:	push	{r4, lr}
   1524c:	sub	sp, sp, #8
   15250:	ldr	r4, [pc, #60]	; 15294 <__assert_fail@plt+0x2a94>
   15254:	add	r3, sp, #20
   15258:	mov	r2, r3
   1525c:	ldr	ip, [r4]
   15260:	ldr	r1, [sp, #16]
   15264:	str	r3, [sp]
   15268:	str	ip, [sp, #4]
   1526c:	bl	14600 <__assert_fail@plt+0x1e00>
   15270:	ldr	r2, [sp, #4]
   15274:	ldr	r3, [r4]
   15278:	cmp	r2, r3
   1527c:	bne	15290 <__assert_fail@plt+0x2a90>
   15280:	add	sp, sp, #8
   15284:	pop	{r4, lr}
   15288:	add	sp, sp, #16
   1528c:	bx	lr
   15290:	bl	12260 <__stack_chk_fail@plt>
   15294:	andeq	r5, r3, r8, asr #22
   15298:	push	{r0, r1, r2, r3}
   1529c:	mov	r0, #3
   152a0:	push	{r4, lr}
   152a4:	sub	sp, sp, #8
   152a8:	ldr	r4, [pc, #60]	; 152ec <__assert_fail@plt+0x2aec>
   152ac:	add	r3, sp, #20
   152b0:	mov	r2, r3
   152b4:	ldr	ip, [r4]
   152b8:	ldr	r1, [sp, #16]
   152bc:	str	r3, [sp]
   152c0:	str	ip, [sp, #4]
   152c4:	bl	14600 <__assert_fail@plt+0x1e00>
   152c8:	ldr	r2, [sp, #4]
   152cc:	ldr	r3, [r4]
   152d0:	cmp	r2, r3
   152d4:	bne	152e8 <__assert_fail@plt+0x2ae8>
   152d8:	add	sp, sp, #8
   152dc:	pop	{r4, lr}
   152e0:	add	sp, sp, #16
   152e4:	bx	lr
   152e8:	bl	12260 <__stack_chk_fail@plt>
   152ec:	andeq	r5, r3, r8, asr #22
   152f0:	push	{r0, r1, r2, r3}
   152f4:	mov	r0, #2
   152f8:	push	{r4, lr}
   152fc:	sub	sp, sp, #8
   15300:	ldr	r4, [pc, #60]	; 15344 <__assert_fail@plt+0x2b44>
   15304:	add	r3, sp, #20
   15308:	mov	r2, r3
   1530c:	ldr	ip, [r4]
   15310:	ldr	r1, [sp, #16]
   15314:	str	r3, [sp]
   15318:	str	ip, [sp, #4]
   1531c:	bl	14600 <__assert_fail@plt+0x1e00>
   15320:	ldr	r2, [sp, #4]
   15324:	ldr	r3, [r4]
   15328:	cmp	r2, r3
   1532c:	bne	15340 <__assert_fail@plt+0x2b40>
   15330:	add	sp, sp, #8
   15334:	pop	{r4, lr}
   15338:	add	sp, sp, #16
   1533c:	bx	lr
   15340:	bl	12260 <__stack_chk_fail@plt>
   15344:	andeq	r5, r3, r8, asr #22
   15348:	b	12104 <strcmp@plt>
   1534c:	push	{r4, r5, r6, lr}
   15350:	mov	lr, r0
   15354:	ldrb	ip, [r0]
   15358:	cmp	ip, #9
   1535c:	cmpne	ip, #32
   15360:	bne	15374 <__assert_fail@plt+0x2b74>
   15364:	ldrb	ip, [lr, #1]!
   15368:	cmp	ip, #9
   1536c:	cmpne	ip, #32
   15370:	beq	15364 <__assert_fail@plt+0x2b64>
   15374:	sub	r6, ip, #48	; 0x30
   15378:	mov	r0, #0
   1537c:	uxtb	r3, r6
   15380:	cmp	r3, #9
   15384:	mov	r1, #0
   15388:	pophi	{r4, r5, r6, pc}
   1538c:	lsl	r2, r1, #2
   15390:	lsl	r3, r0, #2
   15394:	adds	r3, r3, r0
   15398:	orr	r2, r2, r0, lsr #30
   1539c:	ldrb	ip, [lr, #1]!
   153a0:	adc	r2, r2, r1
   153a4:	adds	r4, r3, r3
   153a8:	adc	r5, r2, r2
   153ac:	adds	r0, r4, r6
   153b0:	adc	r1, r5, r6, asr #31
   153b4:	sub	r6, ip, #48	; 0x30
   153b8:	uxtb	r3, r6
   153bc:	cmp	r3, #9
   153c0:	bls	1538c <__assert_fail@plt+0x2b8c>
   153c4:	pop	{r4, r5, r6, pc}
   153c8:	ldrb	r2, [r0]
   153cc:	sub	r3, r2, #48	; 0x30
   153d0:	uxtb	r1, r3
   153d4:	cmp	r1, #9
   153d8:	bls	15400 <__assert_fail@plt+0x2c00>
   153dc:	sub	r3, r2, #65	; 0x41
   153e0:	cmp	r3, #5
   153e4:	subls	r3, r2, #55	; 0x37
   153e8:	lslls	r3, r3, #4
   153ec:	bls	15404 <__assert_fail@plt+0x2c04>
   153f0:	sub	r3, r2, #97	; 0x61
   153f4:	cmp	r3, #5
   153f8:	bhi	15448 <__assert_fail@plt+0x2c48>
   153fc:	sub	r3, r2, #87	; 0x57
   15400:	lsl	r3, r3, #4
   15404:	ldrb	r2, [r0, #1]
   15408:	sub	r0, r2, #48	; 0x30
   1540c:	uxtb	r1, r0
   15410:	cmp	r1, #9
   15414:	bls	15428 <__assert_fail@plt+0x2c28>
   15418:	sub	r1, r2, #65	; 0x41
   1541c:	cmp	r1, #5
   15420:	bhi	15430 <__assert_fail@plt+0x2c30>
   15424:	sub	r0, r2, #55	; 0x37
   15428:	add	r0, r0, r3
   1542c:	bx	lr
   15430:	sub	r1, r2, #97	; 0x61
   15434:	cmp	r1, #5
   15438:	bhi	15448 <__assert_fail@plt+0x2c48>
   1543c:	sub	r0, r2, #87	; 0x57
   15440:	add	r0, r0, r3
   15444:	bx	lr
   15448:	mvn	r0, #0
   1544c:	bx	lr
   15450:	subs	r3, r1, #0
   15454:	beq	1545c <__assert_fail@plt+0x2c5c>
   15458:	b	14c18 <__assert_fail@plt+0x2418>
   1545c:	mov	r0, r3
   15460:	bx	lr
   15464:	sub	r0, r0, #65	; 0x41
   15468:	cmp	r0, #25
   1546c:	movhi	r0, #0
   15470:	movls	r0, #1
   15474:	bx	lr
   15478:	sub	r0, r0, #97	; 0x61
   1547c:	cmp	r0, #25
   15480:	movhi	r0, #0
   15484:	movls	r0, #1
   15488:	bx	lr
   1548c:	sub	r3, r0, #97	; 0x61
   15490:	cmp	r3, #25
   15494:	bicls	r0, r0, #32
   15498:	bx	lr
   1549c:	sub	r3, r0, #65	; 0x41
   154a0:	cmp	r3, #25
   154a4:	orrls	r0, r0, #32
   154a8:	bx	lr
   154ac:	ldrb	r3, [r0]
   154b0:	cmp	r3, #0
   154b4:	bxeq	lr
   154b8:	mov	r1, r0
   154bc:	tst	r3, #128	; 0x80
   154c0:	moveq	r2, #1
   154c4:	movne	r2, #0
   154c8:	sub	ip, r3, #65	; 0x41
   154cc:	cmp	ip, #25
   154d0:	movhi	r2, #0
   154d4:	andls	r2, r2, #1
   154d8:	cmp	r2, #0
   154dc:	orrne	r3, r3, #32
   154e0:	strbne	r3, [r1]
   154e4:	ldrb	r3, [r1, #1]!
   154e8:	cmp	r3, #0
   154ec:	bne	154bc <__assert_fail@plt+0x2cbc>
   154f0:	bx	lr
   154f4:	cmp	r0, r1
   154f8:	beq	155b4 <__assert_fail@plt+0x2db4>
   154fc:	push	{r4, r5, lr}
   15500:	ldrb	r2, [r0]
   15504:	ldrb	r3, [r1]
   15508:	cmp	r2, #0
   1550c:	bne	15554 <__assert_fail@plt+0x2d54>
   15510:	b	15588 <__assert_fail@plt+0x2d88>
   15514:	cmp	r3, r2
   15518:	sub	ip, r2, #97	; 0x61
   1551c:	beq	15544 <__assert_fail@plt+0x2d44>
   15520:	cmp	ip, #25
   15524:	sub	r4, r3, #97	; 0x61
   15528:	mov	lr, r2
   1552c:	bicls	lr, r2, #32
   15530:	cmp	r4, #25
   15534:	bicls	r3, r3, #32
   15538:	cmp	r3, lr
   1553c:	mov	r5, r2
   15540:	bne	1559c <__assert_fail@plt+0x2d9c>
   15544:	ldrb	r2, [r0, #1]!
   15548:	ldrb	r3, [r1, #1]!
   1554c:	cmp	r2, #0
   15550:	beq	15588 <__assert_fail@plt+0x2d88>
   15554:	cmp	r3, #0
   15558:	bne	15514 <__assert_fail@plt+0x2d14>
   1555c:	sub	r3, r2, #97	; 0x61
   15560:	cmp	r3, #25
   15564:	mov	r5, r2
   15568:	mov	r3, #0
   1556c:	bhi	15580 <__assert_fail@plt+0x2d80>
   15570:	bic	r5, r2, #32
   15574:	sub	r2, r3, #97	; 0x61
   15578:	cmp	r2, #25
   1557c:	bicls	r3, r3, #32
   15580:	sub	r0, r5, r3
   15584:	pop	{r4, r5, pc}
   15588:	cmp	r3, #0
   1558c:	movne	r5, #0
   15590:	bne	15574 <__assert_fail@plt+0x2d74>
   15594:	mov	r0, #0
   15598:	pop	{r4, r5, pc}
   1559c:	ldrb	r3, [r1]
   155a0:	cmp	r3, r2
   155a4:	beq	15594 <__assert_fail@plt+0x2d94>
   155a8:	cmp	ip, #25
   155ac:	bls	15570 <__assert_fail@plt+0x2d70>
   155b0:	b	15574 <__assert_fail@plt+0x2d74>
   155b4:	mov	r0, #0
   155b8:	bx	lr
   155bc:	cmp	r2, #0
   155c0:	cmpne	r0, r1
   155c4:	beq	1562c <__assert_fail@plt+0x2e2c>
   155c8:	push	{r4, r5, lr}
   155cc:	sub	r1, r1, #1
   155d0:	sub	r4, r0, #1
   155d4:	b	155e0 <__assert_fail@plt+0x2de0>
   155d8:	cmp	r3, ip
   155dc:	bne	15624 <__assert_fail@plt+0x2e24>
   155e0:	ldrb	r3, [r4, #1]!
   155e4:	sub	ip, r3, #65	; 0x41
   155e8:	cmp	ip, #25
   155ec:	ldrb	ip, [r1, #1]!
   155f0:	mvn	lr, r4
   155f4:	add	lr, lr, r2
   155f8:	sub	r5, ip, #65	; 0x41
   155fc:	orrls	r3, r3, #32
   15600:	cmp	r5, #25
   15604:	orrls	ip, ip, #32
   15608:	cmn	r0, lr
   1560c:	moveq	lr, #1
   15610:	movne	lr, #0
   15614:	cmp	r3, #0
   15618:	moveq	lr, #1
   1561c:	cmp	lr, #0
   15620:	beq	155d8 <__assert_fail@plt+0x2dd8>
   15624:	sub	r0, r3, ip
   15628:	pop	{r4, r5, pc}
   1562c:	mov	r0, #0
   15630:	bx	lr
   15634:	cmp	r1, r0
   15638:	beq	15640 <__assert_fail@plt+0x2e40>
   1563c:	b	14c60 <__assert_fail@plt+0x2460>
   15640:	mov	r0, #0
   15644:	bx	lr
   15648:	cmp	r0, r1
   1564c:	beq	156ac <__assert_fail@plt+0x2eac>
   15650:	ldrb	r2, [r0]
   15654:	ldrb	ip, [r1]
   15658:	cmp	r2, #0
   1565c:	beq	15694 <__assert_fail@plt+0x2e94>
   15660:	clz	r3, ip
   15664:	lsr	r3, r3, #5
   15668:	b	15684 <__assert_fail@plt+0x2e84>
   1566c:	ldrb	r2, [r0, #1]!
   15670:	ldrb	ip, [r1, #1]!
   15674:	clz	r3, ip
   15678:	cmp	r2, #0
   1567c:	lsr	r3, r3, #5
   15680:	beq	15694 <__assert_fail@plt+0x2e94>
   15684:	cmp	ip, r2
   15688:	orrne	r3, r3, #1
   1568c:	cmp	r3, #0
   15690:	beq	1566c <__assert_fail@plt+0x2e6c>
   15694:	cmp	ip, r2
   15698:	beq	156ac <__assert_fail@plt+0x2eac>
   1569c:	sxtb	r2, r2
   156a0:	sxtb	r0, ip
   156a4:	sub	r0, r2, r0
   156a8:	bx	lr
   156ac:	mov	r0, #0
   156b0:	bx	lr
   156b4:	push	{r4, r5, r6, r7, r8, lr}
   156b8:	subs	r7, r3, #0
   156bc:	mov	r4, r0
   156c0:	beq	15720 <__assert_fail@plt+0x2f20>
   156c4:	cmp	r7, r1
   156c8:	bhi	15718 <__assert_fail@plt+0x2f18>
   156cc:	sub	r1, r1, r7
   156d0:	adds	r5, r0, r1
   156d4:	bcs	15718 <__assert_fail@plt+0x2f18>
   156d8:	cmp	r0, r2
   156dc:	mov	r6, r2
   156e0:	beq	15720 <__assert_fail@plt+0x2f20>
   156e4:	mov	r2, r7
   156e8:	mov	r1, r6
   156ec:	mov	r0, r4
   156f0:	bl	14c60 <__assert_fail@plt+0x2460>
   156f4:	cmp	r0, #0
   156f8:	beq	15720 <__assert_fail@plt+0x2f20>
   156fc:	add	r4, r4, #1
   15700:	cmp	r5, r4
   15704:	bcc	15718 <__assert_fail@plt+0x2f18>
   15708:	cmp	r6, r4
   1570c:	bne	156e4 <__assert_fail@plt+0x2ee4>
   15710:	mov	r0, r6
   15714:	pop	{r4, r5, r6, r7, r8, pc}
   15718:	mov	r0, #0
   1571c:	pop	{r4, r5, r6, r7, r8, pc}
   15720:	mov	r0, r4
   15724:	pop	{r4, r5, r6, r7, r8, pc}
   15728:	push	{r4, r5, r6, lr}
   1572c:	mov	r5, r0
   15730:	ldrb	r4, [r0]
   15734:	cmp	r4, #0
   15738:	beq	1575c <__assert_fail@plt+0x2f5c>
   1573c:	bl	12404 <__ctype_tolower_loc@plt>
   15740:	mov	r3, r5
   15744:	ldr	r2, [r0]
   15748:	ldr	r2, [r2, r4, lsl #2]
   1574c:	strb	r2, [r3]
   15750:	ldrb	r4, [r3, #1]!
   15754:	cmp	r4, #0
   15758:	bne	15744 <__assert_fail@plt+0x2f44>
   1575c:	mov	r0, r5
   15760:	pop	{r4, r5, r6, pc}
   15764:	cmp	r2, #0
   15768:	beq	157bc <__assert_fail@plt+0x2fbc>
   1576c:	push	{r4, r5, r6, r7, r8, lr}
   15770:	sub	r4, r0, #1
   15774:	add	r8, r4, r2
   15778:	sub	r7, r1, #1
   1577c:	ldrb	r5, [r4, #1]!
   15780:	ldrb	r6, [r7, #1]!
   15784:	cmp	r5, r6
   15788:	beq	157a4 <__assert_fail@plt+0x2fa4>
   1578c:	bl	12410 <__ctype_toupper_loc@plt>
   15790:	ldr	r3, [r0]
   15794:	ldr	r2, [r3, r5, lsl #2]
   15798:	ldr	r3, [r3, r6, lsl #2]
   1579c:	cmp	r2, r3
   157a0:	bne	157b4 <__assert_fail@plt+0x2fb4>
   157a4:	cmp	r8, r4
   157a8:	bne	1577c <__assert_fail@plt+0x2f7c>
   157ac:	mov	r0, #0
   157b0:	pop	{r4, r5, r6, r7, r8, pc}
   157b4:	sub	r0, r5, r6
   157b8:	pop	{r4, r5, r6, r7, r8, pc}
   157bc:	mov	r0, r2
   157c0:	bx	lr
   157c4:	cmp	r0, #0
   157c8:	bxeq	lr
   157cc:	mov	r2, #1
   157d0:	b	14a24 <__assert_fail@plt+0x2224>
   157d4:	cmp	r0, #0
   157d8:	bxeq	lr
   157dc:	mov	r2, #0
   157e0:	b	14a24 <__assert_fail@plt+0x2224>
   157e4:	push	{r0, r1, r2, r3}
   157e8:	push	{r4, lr}
   157ec:	sub	sp, sp, #8
   157f0:	ldr	r4, [pc, #80]	; 15848 <__assert_fail@plt+0x3048>
   157f4:	ldr	r0, [sp, #16]
   157f8:	ldr	r3, [r4]
   157fc:	cmp	r0, #0
   15800:	str	r3, [sp, #4]
   15804:	beq	15838 <__assert_fail@plt+0x3038>
   15808:	add	r3, sp, #20
   1580c:	mov	r1, r3
   15810:	str	r3, [sp]
   15814:	bl	14530 <__assert_fail@plt+0x1d30>
   15818:	ldr	r2, [sp, #4]
   1581c:	ldr	r3, [r4]
   15820:	cmp	r2, r3
   15824:	bne	15844 <__assert_fail@plt+0x3044>
   15828:	add	sp, sp, #8
   1582c:	pop	{r4, lr}
   15830:	add	sp, sp, #16
   15834:	bx	lr
   15838:	ldr	r0, [pc, #12]	; 1584c <__assert_fail@plt+0x304c>
   1583c:	bl	127d0 <gcry_strdup@plt>
   15840:	b	15818 <__assert_fail@plt+0x3018>
   15844:	bl	12260 <__stack_chk_fail@plt>
   15848:	andeq	r5, r3, r8, asr #22
   1584c:	andeq	r2, r2, ip, lsl #18
   15850:	push	{r0, r1, r2, r3}
   15854:	push	{r4, lr}
   15858:	sub	sp, sp, #8
   1585c:	ldr	r4, [pc, #144]	; 158f4 <__assert_fail@plt+0x30f4>
   15860:	ldr	r0, [sp, #16]
   15864:	ldr	r3, [r4]
   15868:	cmp	r0, #0
   1586c:	str	r3, [sp, #4]
   15870:	beq	158ac <__assert_fail@plt+0x30ac>
   15874:	add	r3, sp, #20
   15878:	mov	r1, r3
   1587c:	str	r3, [sp]
   15880:	bl	14530 <__assert_fail@plt+0x1d30>
   15884:	cmp	r0, #0
   15888:	beq	158bc <__assert_fail@plt+0x30bc>
   1588c:	ldr	r2, [sp, #4]
   15890:	ldr	r3, [r4]
   15894:	cmp	r2, r3
   15898:	bne	158b8 <__assert_fail@plt+0x30b8>
   1589c:	add	sp, sp, #8
   158a0:	pop	{r4, lr}
   158a4:	add	sp, sp, #16
   158a8:	bx	lr
   158ac:	ldr	r0, [pc, #68]	; 158f8 <__assert_fail@plt+0x30f8>
   158b0:	bl	125c0 <gcry_xstrdup@plt>
   158b4:	b	15884 <__assert_fail@plt+0x3084>
   158b8:	bl	12260 <__stack_chk_fail@plt>
   158bc:	bl	12518 <__errno_location@plt>
   158c0:	ldr	r3, [pc, #52]	; 158fc <__assert_fail@plt+0x30fc>
   158c4:	ldr	r3, [r3]
   158c8:	ldr	r2, [r0]
   158cc:	cmp	r2, #22
   158d0:	moveq	r2, #37	; 0x25
   158d4:	moveq	r1, #1
   158d8:	ldreq	r0, [pc, #32]	; 15900 <__assert_fail@plt+0x3100>
   158dc:	movne	r2, #22
   158e0:	movne	r1, #1
   158e4:	ldrne	r0, [pc, #24]	; 15904 <__assert_fail@plt+0x3104>
   158e8:	bl	12314 <fwrite@plt>
   158ec:	mov	r0, #2
   158f0:	bl	1247c <exit@plt>
   158f4:	andeq	r5, r3, r8, asr #22
   158f8:	andeq	r2, r2, ip, lsl #18
   158fc:	andeq	r6, r3, r0, asr r1
   15900:	andeq	r2, r2, r0, lsl r9
   15904:	andeq	r2, r2, r8, lsr r9
   15908:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1590c:	mov	r6, r2
   15910:	mov	r7, r3
   15914:	mov	r8, r0
   15918:	mov	r5, r1
   1591c:	bl	124d0 <strchr@plt>
   15920:	cmp	r0, #0
   15924:	beq	159b0 <__assert_fail@plt+0x31b0>
   15928:	mov	r4, #1
   1592c:	b	15934 <__assert_fail@plt+0x3134>
   15930:	mov	r4, r3
   15934:	add	r0, r0, #1
   15938:	mov	r1, r5
   1593c:	bl	124d0 <strchr@plt>
   15940:	add	r3, r4, #1
   15944:	cmp	r0, #0
   15948:	bne	15930 <__assert_fail@plt+0x3130>
   1594c:	add	r0, r4, #2
   15950:	mov	r1, #4
   15954:	bl	1256c <gcry_calloc@plt>
   15958:	subs	r9, r0, #0
   1595c:	beq	159a8 <__assert_fail@plt+0x31a8>
   15960:	str	r8, [r9]
   15964:	mov	r0, r8
   15968:	mov	r1, r5
   1596c:	bl	124d0 <strchr@plt>
   15970:	subs	r3, r0, #0
   15974:	beq	159b8 <__assert_fail@plt+0x31b8>
   15978:	mov	r8, r9
   1597c:	mov	r4, #1
   15980:	add	r0, r3, #1
   15984:	strb	r6, [r3]
   15988:	str	r0, [r8, #4]!
   1598c:	mov	r1, r5
   15990:	bl	124d0 <strchr@plt>
   15994:	add	r4, r4, #1
   15998:	subs	r3, r0, #0
   1599c:	bne	15980 <__assert_fail@plt+0x3180>
   159a0:	cmp	r7, #0
   159a4:	strne	r4, [r7]
   159a8:	mov	r0, r9
   159ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159b0:	mov	r0, #2
   159b4:	b	15950 <__assert_fail@plt+0x3150>
   159b8:	mov	r4, #1
   159bc:	b	159a0 <__assert_fail@plt+0x31a0>
   159c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   159c4:	mov	r8, r0
   159c8:	mov	r6, r1
   159cc:	bl	12704 <strpbrk@plt>
   159d0:	cmp	r0, #0
   159d4:	beq	15b8c <__assert_fail@plt+0x338c>
   159d8:	mov	r5, #1
   159dc:	b	159e4 <__assert_fail@plt+0x31e4>
   159e0:	mov	r5, r3
   159e4:	add	r0, r0, #1
   159e8:	mov	r1, r6
   159ec:	bl	12704 <strpbrk@plt>
   159f0:	add	r3, r5, #1
   159f4:	cmp	r0, #0
   159f8:	bne	159e0 <__assert_fail@plt+0x31e0>
   159fc:	add	r5, r5, #2
   15a00:	tst	r5, #-1073741824	; 0xc0000000
   15a04:	lsl	r5, r5, #2
   15a08:	bne	15ad8 <__assert_fail@plt+0x32d8>
   15a0c:	mov	r0, r8
   15a10:	bl	124b8 <strlen@plt>
   15a14:	add	r0, r0, #1
   15a18:	adds	r0, r5, r0
   15a1c:	movcs	r7, #1
   15a20:	movcc	r7, #0
   15a24:	bcs	15ad8 <__assert_fail@plt+0x32d8>
   15a28:	bl	120bc <gcry_malloc@plt>
   15a2c:	subs	r9, r0, #0
   15a30:	beq	15ae4 <__assert_fail@plt+0x32e4>
   15a34:	add	r5, r9, r5
   15a38:	mov	r1, r8
   15a3c:	mov	r0, r5
   15a40:	bl	12344 <strcpy@plt>
   15a44:	mov	r4, r5
   15a48:	sub	r8, r9, #4
   15a4c:	mov	sl, r7
   15a50:	mov	r1, r6
   15a54:	mov	r0, r4
   15a58:	bl	12704 <strpbrk@plt>
   15a5c:	cmp	r0, #0
   15a60:	beq	15aec <__assert_fail@plt+0x32ec>
   15a64:	strb	sl, [r0]
   15a68:	ldrb	r3, [r4]
   15a6c:	cmp	r3, #32
   15a70:	cmpne	r3, #9
   15a74:	bne	15a88 <__assert_fail@plt+0x3288>
   15a78:	ldrb	r3, [r4, #1]!
   15a7c:	cmp	r3, #9
   15a80:	cmpne	r3, #32
   15a84:	beq	15a78 <__assert_fail@plt+0x3278>
   15a88:	sub	r3, r0, #1
   15a8c:	cmp	r3, r4
   15a90:	bcc	15ac8 <__assert_fail@plt+0x32c8>
   15a94:	ldrb	r2, [r0, #-1]
   15a98:	cmp	r2, #9
   15a9c:	cmpne	r2, #32
   15aa0:	bne	15ac8 <__assert_fail@plt+0x32c8>
   15aa4:	sub	r1, r4, #1
   15aa8:	b	15abc <__assert_fail@plt+0x32bc>
   15aac:	ldrb	r2, [r3]
   15ab0:	cmp	r2, #9
   15ab4:	cmpne	r2, #32
   15ab8:	bne	15ac8 <__assert_fail@plt+0x32c8>
   15abc:	strb	sl, [r3], #-1
   15ac0:	cmp	r3, r1
   15ac4:	bne	15aac <__assert_fail@plt+0x32ac>
   15ac8:	str	r4, [r8, #4]!
   15acc:	add	r7, r7, #1
   15ad0:	add	r4, r0, #1
   15ad4:	b	15a50 <__assert_fail@plt+0x3250>
   15ad8:	mov	r0, #12
   15adc:	bl	1268c <gpg_err_set_errno@plt>
   15ae0:	mov	r9, #0
   15ae4:	mov	r0, r9
   15ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15aec:	ldrb	r3, [r4]
   15af0:	cmp	r3, #32
   15af4:	cmpne	r3, #9
   15af8:	bne	15b0c <__assert_fail@plt+0x330c>
   15afc:	ldrb	r3, [r4, #1]!
   15b00:	cmp	r3, #9
   15b04:	cmpne	r3, #32
   15b08:	beq	15afc <__assert_fail@plt+0x32fc>
   15b0c:	mov	r0, r4
   15b10:	bl	124b8 <strlen@plt>
   15b14:	sub	r0, r0, #1
   15b18:	adds	r3, r4, r0
   15b1c:	bcs	15b54 <__assert_fail@plt+0x3354>
   15b20:	ldrb	r2, [r4, r0]
   15b24:	cmp	r2, #9
   15b28:	cmpne	r2, #32
   15b2c:	bne	15b54 <__assert_fail@plt+0x3354>
   15b30:	mov	r1, #0
   15b34:	b	15b48 <__assert_fail@plt+0x3348>
   15b38:	ldrb	r2, [r3]
   15b3c:	cmp	r2, #9
   15b40:	cmpne	r2, #32
   15b44:	bne	15b54 <__assert_fail@plt+0x3354>
   15b48:	strb	r1, [r3], #-1
   15b4c:	cmp	r3, r4
   15b50:	bcs	15b38 <__assert_fail@plt+0x3338>
   15b54:	lsl	r3, r7, #2
   15b58:	add	r2, r3, #8
   15b5c:	add	r2, r9, r2
   15b60:	add	r3, r9, r3
   15b64:	cmp	r5, r2
   15b68:	mov	r2, #0
   15b6c:	str	r4, [r9, r7, lsl #2]
   15b70:	str	r2, [r3, #4]
   15b74:	beq	15ae4 <__assert_fail@plt+0x32e4>
   15b78:	ldr	r3, [pc, #20]	; 15b94 <__assert_fail@plt+0x3394>
   15b7c:	ldr	r2, [pc, #20]	; 15b98 <__assert_fail@plt+0x3398>
   15b80:	ldr	r1, [pc, #20]	; 15b9c <__assert_fail@plt+0x339c>
   15b84:	ldr	r0, [pc, #20]	; 15ba0 <__assert_fail@plt+0x33a0>
   15b88:	bl	12800 <__assert_fail@plt>
   15b8c:	mov	r5, #8
   15b90:	b	15a0c <__assert_fail@plt+0x320c>
   15b94:			; <UNDEFINED> instruction: 0x000228bc
   15b98:	andeq	r0, r0, r2, lsl r5
   15b9c:	andeq	r2, r2, r8, asr #17
   15ba0:	andeq	r2, r2, r0, asr r9
   15ba4:	push	{r4, r5, r6, r7, r8, lr}
   15ba8:	mov	r6, r2
   15bac:	ldrb	r3, [r0]
   15bb0:	cmp	r3, #32
   15bb4:	bne	15bc4 <__assert_fail@plt+0x33c4>
   15bb8:	ldrb	r3, [r0, #1]!
   15bbc:	cmp	r3, #32
   15bc0:	beq	15bb8 <__assert_fail@plt+0x33b8>
   15bc4:	cmp	r6, #0
   15bc8:	beq	15c28 <__assert_fail@plt+0x3428>
   15bcc:	mov	r4, #0
   15bd0:	sub	r5, r1, #4
   15bd4:	mov	r7, r4
   15bd8:	str	r0, [r5, #4]!
   15bdc:	mov	r1, #32
   15be0:	bl	124d0 <strchr@plt>
   15be4:	add	r4, r4, #1
   15be8:	subs	r3, r0, #0
   15bec:	beq	15c20 <__assert_fail@plt+0x3420>
   15bf0:	mov	r0, r3
   15bf4:	strb	r7, [r0], #1
   15bf8:	ldrb	r3, [r3, #1]
   15bfc:	cmp	r3, #32
   15c00:	bne	15c10 <__assert_fail@plt+0x3410>
   15c04:	ldrb	r3, [r0, #1]!
   15c08:	cmp	r3, #32
   15c0c:	beq	15c04 <__assert_fail@plt+0x3404>
   15c10:	cmp	r3, #0
   15c14:	beq	15c20 <__assert_fail@plt+0x3420>
   15c18:	cmp	r6, r4
   15c1c:	bne	15bd8 <__assert_fail@plt+0x33d8>
   15c20:	mov	r0, r4
   15c24:	pop	{r4, r5, r6, r7, r8, pc}
   15c28:	mov	r4, r6
   15c2c:	b	15c20 <__assert_fail@plt+0x3420>
   15c30:	push	{r4, r5, r6, r7, r8, lr}
   15c34:	subs	r7, r2, #0
   15c38:	beq	15c88 <__assert_fail@plt+0x3488>
   15c3c:	mov	r4, #0
   15c40:	sub	r5, r1, #4
   15c44:	mov	r6, r4
   15c48:	b	15c64 <__assert_fail@plt+0x3464>
   15c4c:	strb	r6, [r0], #1
   15c50:	ldrb	r3, [r3, #1]
   15c54:	cmp	r3, #0
   15c58:	beq	15c80 <__assert_fail@plt+0x3480>
   15c5c:	cmp	r7, r4
   15c60:	beq	15c80 <__assert_fail@plt+0x3480>
   15c64:	str	r0, [r5, #4]!
   15c68:	mov	r1, #58	; 0x3a
   15c6c:	bl	124d0 <strchr@plt>
   15c70:	add	r4, r4, #1
   15c74:	subs	r3, r0, #0
   15c78:	mov	r0, r3
   15c7c:	bne	15c4c <__assert_fail@plt+0x344c>
   15c80:	mov	r0, r4
   15c84:	pop	{r4, r5, r6, r7, r8, pc}
   15c88:	mov	r4, r7
   15c8c:	b	15c80 <__assert_fail@plt+0x3480>
   15c90:	push	{r4, r5, r6, lr}
   15c94:	sub	sp, sp, #32
   15c98:	ldr	r4, [pc, #220]	; 15d7c <__assert_fail@plt+0x357c>
   15c9c:	cmp	r0, #0
   15ca0:	ldr	r3, [r4]
   15ca4:	str	r3, [sp, #28]
   15ca8:	beq	15d70 <__assert_fail@plt+0x3570>
   15cac:	mov	r5, r1
   15cb0:	add	r3, sp, #12
   15cb4:	add	r2, sp, #8
   15cb8:	add	r1, sp, #4
   15cbc:	bl	14368 <__assert_fail@plt+0x1b68>
   15cc0:	subs	r6, r0, #0
   15cc4:	beq	15d70 <__assert_fail@plt+0x3570>
   15cc8:	cmp	r5, #0
   15ccc:	beq	15d40 <__assert_fail@plt+0x3540>
   15cd0:	add	r1, sp, #16
   15cd4:	mov	r0, r5
   15cd8:	add	r3, sp, #24
   15cdc:	add	r2, sp, #20
   15ce0:	bl	14368 <__assert_fail@plt+0x1b68>
   15ce4:	subs	r1, r0, #0
   15ce8:	beq	15d70 <__assert_fail@plt+0x3570>
   15cec:	ldr	r3, [sp, #4]
   15cf0:	ldr	r2, [sp, #16]
   15cf4:	cmp	r3, r2
   15cf8:	subne	r3, r3, r2
   15cfc:	beq	15d10 <__assert_fail@plt+0x3510>
   15d00:	cmp	r3, #0
   15d04:	mvnlt	r0, #0
   15d08:	movge	r0, #1
   15d0c:	b	15d44 <__assert_fail@plt+0x3544>
   15d10:	ldr	r3, [sp, #8]
   15d14:	ldr	r0, [sp, #20]
   15d18:	cmp	r3, r0
   15d1c:	bne	15d5c <__assert_fail@plt+0x355c>
   15d20:	ldr	r3, [sp, #12]
   15d24:	ldr	r0, [sp, #24]
   15d28:	cmp	r3, r0
   15d2c:	bne	15d5c <__assert_fail@plt+0x355c>
   15d30:	mov	r0, r6
   15d34:	bl	12104 <strcmp@plt>
   15d38:	subs	r3, r0, #0
   15d3c:	bne	15d00 <__assert_fail@plt+0x3500>
   15d40:	mov	r0, #0
   15d44:	ldr	r2, [sp, #28]
   15d48:	ldr	r3, [r4]
   15d4c:	cmp	r2, r3
   15d50:	bne	15d78 <__assert_fail@plt+0x3578>
   15d54:	add	sp, sp, #32
   15d58:	pop	{r4, r5, r6, pc}
   15d5c:	sub	r3, r3, r0
   15d60:	cmp	r3, #0
   15d64:	mvnlt	r0, #0
   15d68:	movge	r0, #1
   15d6c:	b	15d44 <__assert_fail@plt+0x3544>
   15d70:	mov	r0, #-2147483648	; 0x80000000
   15d74:	b	15d44 <__assert_fail@plt+0x3544>
   15d78:	bl	12260 <__stack_chk_fail@plt>
   15d7c:	andeq	r5, r3, r8, asr #22
   15d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d84:	sub	sp, sp, #12
   15d88:	mov	r7, r1
   15d8c:	str	r2, [sp]
   15d90:	bl	127d0 <gcry_strdup@plt>
   15d94:	subs	r3, r0, #0
   15d98:	str	r3, [sp, #4]
   15d9c:	beq	15f68 <__assert_fail@plt+0x3768>
   15da0:	mov	r6, #0
   15da4:	ldr	r9, [pc, #464]	; 15f7c <__assert_fail@plt+0x377c>
   15da8:	mov	r5, r6
   15dac:	mov	r8, r6
   15db0:	mov	r4, r3
   15db4:	mov	fp, r3
   15db8:	mov	r1, r9
   15dbc:	mov	r0, fp
   15dc0:	bl	12134 <strcspn@plt>
   15dc4:	adds	sl, fp, r0
   15dc8:	beq	15e68 <__assert_fail@plt+0x3668>
   15dcc:	ldrb	fp, [sl]
   15dd0:	cmp	fp, #10
   15dd4:	beq	15e84 <__assert_fail@plt+0x3684>
   15dd8:	subs	r1, sl, r4
   15ddc:	beq	15dec <__assert_fail@plt+0x35ec>
   15de0:	mov	r0, r4
   15de4:	bl	14c18 <__assert_fail@plt+0x2418>
   15de8:	mov	r1, r0
   15dec:	cmp	r7, r1
   15df0:	bgt	15e9c <__assert_fail@plt+0x369c>
   15df4:	ldr	r3, [sp]
   15df8:	sub	ip, r1, r7
   15dfc:	cmp	r3, r1
   15e00:	sublt	r1, r1, r3
   15e04:	lsl	ip, ip, #1
   15e08:	sub	r0, r7, r5
   15e0c:	addlt	ip, ip, r1, lsl #2
   15e10:	cmp	ip, r0
   15e14:	movlt	ip, #0
   15e18:	movge	ip, #1
   15e1c:	cmp	r5, #0
   15e20:	movne	r5, ip
   15e24:	moveq	r5, #0
   15e28:	cmp	r5, #0
   15e2c:	movne	sl, r8
   15e30:	ldrbne	fp, [r8]
   15e34:	cmp	fp, #0
   15e38:	beq	15f1c <__assert_fail@plt+0x371c>
   15e3c:	mov	fp, sl
   15e40:	mov	r1, #10
   15e44:	strb	r1, [fp], #1
   15e48:	ldrb	r1, [sl, #1]
   15e4c:	cmp	r1, #32
   15e50:	beq	15ecc <__assert_fail@plt+0x36cc>
   15e54:	mov	r6, #0
   15e58:	mov	r5, r6
   15e5c:	mov	r8, r6
   15e60:	mov	r4, fp
   15e64:	b	15db8 <__assert_fail@plt+0x35b8>
   15e68:	ldr	sl, [sp, #4]
   15e6c:	mov	r0, sl
   15e70:	bl	124b8 <strlen@plt>
   15e74:	add	sl, sl, r0
   15e78:	ldrb	fp, [sl]
   15e7c:	cmp	fp, #10
   15e80:	bne	15dd8 <__assert_fail@plt+0x35d8>
   15e84:	add	r4, sl, #1
   15e88:	mov	r5, #0
   15e8c:	mov	fp, r4
   15e90:	mov	r8, r5
   15e94:	mov	r6, #1
   15e98:	b	15db8 <__assert_fail@plt+0x35b8>
   15e9c:	cmp	fp, #0
   15ea0:	beq	15f1c <__assert_fail@plt+0x371c>
   15ea4:	ldrb	r0, [sl, #1]
   15ea8:	add	fp, sl, #1
   15eac:	cmp	r0, #32
   15eb0:	bne	15ec0 <__assert_fail@plt+0x36c0>
   15eb4:	ldrb	r0, [fp, #1]!
   15eb8:	cmp	r0, #32
   15ebc:	beq	15eb4 <__assert_fail@plt+0x36b4>
   15ec0:	mov	r5, r1
   15ec4:	mov	r8, sl
   15ec8:	b	15db8 <__assert_fail@plt+0x35b8>
   15ecc:	ldrb	r1, [sl, #2]
   15ed0:	cmp	r1, #32
   15ed4:	bne	15f74 <__assert_fail@plt+0x3774>
   15ed8:	add	r2, sl, #3
   15edc:	mov	r4, r2
   15ee0:	add	r2, r2, #1
   15ee4:	ldrb	r1, [r4]
   15ee8:	cmp	r1, #32
   15eec:	beq	15edc <__assert_fail@plt+0x36dc>
   15ef0:	mov	r0, r4
   15ef4:	bl	124b8 <strlen@plt>
   15ef8:	mov	r6, #0
   15efc:	mov	r1, r4
   15f00:	mov	r5, r6
   15f04:	mov	r8, r6
   15f08:	mov	r4, fp
   15f0c:	add	r2, r0, #1
   15f10:	mov	r0, fp
   15f14:	bl	1217c <memmove@plt>
   15f18:	b	15db8 <__assert_fail@plt+0x35b8>
   15f1c:	ldr	r4, [sp, #4]
   15f20:	mov	r0, r4
   15f24:	bl	124b8 <strlen@plt>
   15f28:	ldr	r2, [pc, #80]	; 15f80 <__assert_fail@plt+0x3780>
   15f2c:	mov	r1, r0
   15f30:	mov	r0, r4
   15f34:	bl	1507c <__assert_fail@plt+0x287c>
   15f38:	cmp	r6, #0
   15f3c:	bne	15f68 <__assert_fail@plt+0x3768>
   15f40:	ldrb	r3, [r4]
   15f44:	cmp	r3, #0
   15f48:	beq	15f68 <__assert_fail@plt+0x3768>
   15f4c:	mov	r0, r4
   15f50:	bl	124b8 <strlen@plt>
   15f54:	sub	r0, r0, #1
   15f58:	ldrb	r3, [r4, r0]
   15f5c:	cmp	r3, #10
   15f60:	ldreq	r3, [sp, #4]
   15f64:	strbeq	r6, [r3, r0]
   15f68:	ldr	r0, [sp, #4]
   15f6c:	add	sp, sp, #12
   15f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f74:	add	r4, sl, #2
   15f78:	b	15ef0 <__assert_fail@plt+0x36f0>
   15f7c:	andeq	r2, r2, r4, ror r9
   15f80:	andeq	r2, r2, r4, lsr #14
   15f84:	push	{r4, r5, r6, lr}
   15f88:	mov	r5, r1
   15f8c:	ldr	r1, [r0, #8]
   15f90:	mov	r4, r0
   15f94:	ands	r3, r1, #32768	; 0x8000
   15f98:	bne	15fe0 <__assert_fail@plt+0x37e0>
   15f9c:	ldr	r2, [r0]
   15fa0:	orr	r1, r1, #32768	; 0x8000
   15fa4:	str	r1, [r0, #8]
   15fa8:	str	r3, [r0, #28]
   15fac:	str	r3, [r0, #32]
   15fb0:	str	r3, [r0, #36]	; 0x24
   15fb4:	str	r3, [r0, #12]
   15fb8:	ldr	r2, [r2]
   15fbc:	str	r3, [r0, #40]	; 0x28
   15fc0:	cmp	r2, #0
   15fc4:	str	r3, [r0, #44]	; 0x2c
   15fc8:	str	r3, [r0, #48]	; 0x30
   15fcc:	str	r3, [r0, #52]	; 0x34
   15fd0:	blt	16138 <__assert_fail@plt+0x3938>
   15fd4:	mov	r3, #0
   15fd8:	str	r3, [r4, #24]
   15fdc:	pop	{r4, r5, r6, pc}
   15fe0:	ldr	r3, [r0, #12]
   15fe4:	cmp	r3, #0
   15fe8:	beq	15fd4 <__assert_fail@plt+0x37d4>
   15fec:	cmp	r5, #0
   15ff0:	ldr	r3, [r0, #16]
   15ff4:	beq	1607c <__assert_fail@plt+0x387c>
   15ff8:	cmn	r3, #6
   15ffc:	mov	r6, r2
   16000:	mov	r2, #5
   16004:	beq	160e0 <__assert_fail@plt+0x38e0>
   16008:	cmn	r3, #5
   1600c:	beq	160f4 <__assert_fail@plt+0x38f4>
   16010:	cmn	r3, #4
   16014:	beq	16108 <__assert_fail@plt+0x3908>
   16018:	cmn	r3, #3
   1601c:	beq	16140 <__assert_fail@plt+0x3940>
   16020:	cmn	r3, #12
   16024:	beq	16170 <__assert_fail@plt+0x3970>
   16028:	cmn	r3, #7
   1602c:	beq	161a0 <__assert_fail@plt+0x39a0>
   16030:	cmn	r3, #10
   16034:	beq	161d0 <__assert_fail@plt+0x39d0>
   16038:	cmn	r3, #11
   1603c:	mov	r0, #0
   16040:	ldreq	r1, [pc, #496]	; 16238 <__assert_fail@plt+0x3a38>
   16044:	ldrne	r1, [pc, #496]	; 1623c <__assert_fail@plt+0x3a3c>
   16048:	bl	12254 <dcgettext@plt>
   1604c:	mov	r3, r0
   16050:	ldr	r2, [r6]
   16054:	mov	r1, r5
   16058:	ldr	r0, [pc, #480]	; 16240 <__assert_fail@plt+0x3a40>
   1605c:	bl	195cc <__assert_fail@plt+0x6dcc>
   16060:	ldr	r3, [r4, #12]
   16064:	cmp	r3, #1
   16068:	moveq	r3, #0
   1606c:	streq	r3, [r4, #12]
   16070:	beq	15fd4 <__assert_fail@plt+0x37d4>
   16074:	mov	r0, #2
   16078:	bl	1247c <exit@plt>
   1607c:	ldr	r6, [r0, #40]	; 0x28
   16080:	ldr	r2, [pc, #444]	; 16244 <__assert_fail@plt+0x3a44>
   16084:	cmp	r6, #0
   16088:	moveq	r6, r2
   1608c:	cmn	r3, #3
   16090:	beq	16154 <__assert_fail@plt+0x3954>
   16094:	cmn	r3, #12
   16098:	beq	16184 <__assert_fail@plt+0x3984>
   1609c:	cmn	r3, #6
   160a0:	beq	161b4 <__assert_fail@plt+0x39b4>
   160a4:	cmn	r3, #7
   160a8:	beq	161e4 <__assert_fail@plt+0x39e4>
   160ac:	cmn	r3, #8
   160b0:	beq	1611c <__assert_fail@plt+0x391c>
   160b4:	cmn	r3, #9
   160b8:	beq	1621c <__assert_fail@plt+0x3a1c>
   160bc:	cmn	r3, #11
   160c0:	mov	r2, #5
   160c4:	beq	16200 <__assert_fail@plt+0x3a00>
   160c8:	ldr	r1, [pc, #376]	; 16248 <__assert_fail@plt+0x3a48>
   160cc:	mov	r0, #0
   160d0:	bl	12254 <dcgettext@plt>
   160d4:	mov	r1, r6
   160d8:	bl	195cc <__assert_fail@plt+0x6dcc>
   160dc:	b	16060 <__assert_fail@plt+0x3860>
   160e0:	ldr	r1, [pc, #356]	; 1624c <__assert_fail@plt+0x3a4c>
   160e4:	mov	r0, #0
   160e8:	bl	12254 <dcgettext@plt>
   160ec:	mov	r3, r0
   160f0:	b	16050 <__assert_fail@plt+0x3850>
   160f4:	ldr	r1, [pc, #340]	; 16250 <__assert_fail@plt+0x3a50>
   160f8:	mov	r0, #0
   160fc:	bl	12254 <dcgettext@plt>
   16100:	mov	r3, r0
   16104:	b	16050 <__assert_fail@plt+0x3850>
   16108:	ldr	r1, [pc, #324]	; 16254 <__assert_fail@plt+0x3a54>
   1610c:	mov	r0, #0
   16110:	bl	12254 <dcgettext@plt>
   16114:	mov	r3, r0
   16118:	b	16050 <__assert_fail@plt+0x3850>
   1611c:	mov	r0, r5
   16120:	mov	r2, #5
   16124:	ldr	r1, [pc, #300]	; 16258 <__assert_fail@plt+0x3a58>
   16128:	bl	12254 <dcgettext@plt>
   1612c:	mov	r1, r6
   16130:	bl	195cc <__assert_fail@plt+0x6dcc>
   16134:	b	16060 <__assert_fail@plt+0x3860>
   16138:	ldr	r0, [pc, #284]	; 1625c <__assert_fail@plt+0x3a5c>
   1613c:	bl	196d4 <__assert_fail@plt+0x6ed4>
   16140:	ldr	r1, [pc, #280]	; 16260 <__assert_fail@plt+0x3a60>
   16144:	mov	r0, #0
   16148:	bl	12254 <dcgettext@plt>
   1614c:	mov	r3, r0
   16150:	b	16050 <__assert_fail@plt+0x3850>
   16154:	mov	r0, r5
   16158:	mov	r2, #5
   1615c:	ldr	r1, [pc, #256]	; 16264 <__assert_fail@plt+0x3a64>
   16160:	bl	12254 <dcgettext@plt>
   16164:	mov	r1, r6
   16168:	bl	195cc <__assert_fail@plt+0x6dcc>
   1616c:	b	16060 <__assert_fail@plt+0x3860>
   16170:	ldr	r1, [pc, #240]	; 16268 <__assert_fail@plt+0x3a68>
   16174:	mov	r0, #0
   16178:	bl	12254 <dcgettext@plt>
   1617c:	mov	r3, r0
   16180:	b	16050 <__assert_fail@plt+0x3850>
   16184:	mov	r0, r5
   16188:	mov	r2, #5
   1618c:	ldr	r1, [pc, #216]	; 1626c <__assert_fail@plt+0x3a6c>
   16190:	bl	12254 <dcgettext@plt>
   16194:	mov	r1, r6
   16198:	bl	195cc <__assert_fail@plt+0x6dcc>
   1619c:	b	16060 <__assert_fail@plt+0x3860>
   161a0:	ldr	r1, [pc, #200]	; 16270 <__assert_fail@plt+0x3a70>
   161a4:	mov	r0, #0
   161a8:	bl	12254 <dcgettext@plt>
   161ac:	mov	r3, r0
   161b0:	b	16050 <__assert_fail@plt+0x3850>
   161b4:	mov	r0, r5
   161b8:	mov	r2, #5
   161bc:	ldr	r1, [pc, #176]	; 16274 <__assert_fail@plt+0x3a74>
   161c0:	bl	12254 <dcgettext@plt>
   161c4:	mov	r1, r6
   161c8:	bl	195cc <__assert_fail@plt+0x6dcc>
   161cc:	b	16060 <__assert_fail@plt+0x3860>
   161d0:	ldr	r1, [pc, #160]	; 16278 <__assert_fail@plt+0x3a78>
   161d4:	mov	r0, #0
   161d8:	bl	12254 <dcgettext@plt>
   161dc:	mov	r3, r0
   161e0:	b	16050 <__assert_fail@plt+0x3850>
   161e4:	mov	r0, r5
   161e8:	mov	r2, #5
   161ec:	ldr	r1, [pc, #136]	; 1627c <__assert_fail@plt+0x3a7c>
   161f0:	bl	12254 <dcgettext@plt>
   161f4:	mov	r1, r6
   161f8:	bl	195cc <__assert_fail@plt+0x6dcc>
   161fc:	b	16060 <__assert_fail@plt+0x3860>
   16200:	ldr	r1, [pc, #120]	; 16280 <__assert_fail@plt+0x3a80>
   16204:	mov	r0, #0
   16208:	bl	12254 <dcgettext@plt>
   1620c:	mov	r1, r0
   16210:	ldr	r0, [pc, #108]	; 16284 <__assert_fail@plt+0x3a84>
   16214:	bl	195cc <__assert_fail@plt+0x6dcc>
   16218:	b	16060 <__assert_fail@plt+0x3860>
   1621c:	mov	r0, r5
   16220:	mov	r2, #5
   16224:	ldr	r1, [pc, #92]	; 16288 <__assert_fail@plt+0x3a88>
   16228:	bl	12254 <dcgettext@plt>
   1622c:	mov	r1, r6
   16230:	bl	195cc <__assert_fail@plt+0x6dcc>
   16234:	b	16060 <__assert_fail@plt+0x3860>
   16238:	andeq	r2, r2, ip, ror #20
   1623c:	andeq	r2, r2, r8, ror sl
   16240:	andeq	r2, r2, r8, lsl #21
   16244:			; <UNDEFINED> instruction: 0x000229b8
   16248:	andeq	r2, r2, ip, ror fp
   1624c:	andeq	r2, r2, r0, ror #19
   16250:	strdeq	r2, [r2], -r8
   16254:	andeq	r2, r2, r4, lsl #20
   16258:	andeq	r2, r2, ip, lsr #22
   1625c:	andeq	r2, r2, r0, asr #19
   16260:	andeq	r2, r2, r8, lsl sl
   16264:	muleq	r2, r4, sl
   16268:	andeq	r2, r2, ip, lsr #20
   1626c:			; <UNDEFINED> instruction: 0x00022abc
   16270:	andeq	r2, r2, r0, asr #20
   16274:	andeq	r2, r2, r4, ror #21
   16278:	andeq	r2, r2, r0, asr sl
   1627c:	andeq	r2, r2, r0, lsl fp
   16280:	andeq	r2, r2, ip, ror #22
   16284:	andeq	r3, r2, ip, ror pc
   16288:	andeq	r2, r2, ip, asr #22
   1628c:	tst	r1, #16
   16290:	and	r1, r1, #7
   16294:	push	{r4, r5, r6, r7, r8, lr}
   16298:	movne	r7, #0
   1629c:	moveq	r7, #10
   162a0:	cmp	r1, #3
   162a4:	mov	r6, r0
   162a8:	str	r1, [r0, #20]
   162ac:	mov	r5, r2
   162b0:	beq	162d0 <__assert_fail@plt+0x3ad0>
   162b4:	cmp	r1, #4
   162b8:	beq	16310 <__assert_fail@plt+0x3b10>
   162bc:	cmp	r1, #1
   162c0:	beq	162d0 <__assert_fail@plt+0x3ad0>
   162c4:	str	r2, [r6, #24]
   162c8:	mov	r0, #1
   162cc:	pop	{r4, r5, r6, r7, r8, pc}
   162d0:	bl	12518 <__errno_location@plt>
   162d4:	mov	r1, #0
   162d8:	mov	r2, r7
   162dc:	mov	r4, r0
   162e0:	mov	r0, r5
   162e4:	str	r1, [r4]
   162e8:	bl	1211c <strtol@plt>
   162ec:	sub	r3, r0, #-2147483647	; 0x80000001
   162f0:	cmn	r3, #3
   162f4:	bls	16304 <__assert_fail@plt+0x3b04>
   162f8:	ldr	r3, [r4]
   162fc:	cmp	r3, #34	; 0x22
   16300:	beq	1638c <__assert_fail@plt+0x3b8c>
   16304:	str	r0, [r6, #24]
   16308:	mov	r0, #0
   1630c:	pop	{r4, r5, r6, r7, r8, pc}
   16310:	ldrb	r4, [r2]
   16314:	tst	r4, #128	; 0x80
   16318:	bne	16344 <__assert_fail@plt+0x3b44>
   1631c:	bl	1244c <__ctype_b_loc@plt>
   16320:	ldr	r2, [r0]
   16324:	b	16334 <__assert_fail@plt+0x3b34>
   16328:	ldrb	r4, [r5, #1]!
   1632c:	tst	r4, #128	; 0x80
   16330:	bne	16344 <__assert_fail@plt+0x3b44>
   16334:	lsl	r3, r4, #1
   16338:	ldrh	r3, [r2, r3]
   1633c:	tst	r3, #8192	; 0x2000
   16340:	bne	16328 <__assert_fail@plt+0x3b28>
   16344:	cmp	r4, #45	; 0x2d
   16348:	beq	1639c <__assert_fail@plt+0x3b9c>
   1634c:	bl	12518 <__errno_location@plt>
   16350:	mov	r4, #0
   16354:	mov	r2, r7
   16358:	mov	r1, r4
   1635c:	mov	r8, r0
   16360:	mov	r0, r5
   16364:	str	r4, [r8]
   16368:	bl	124a0 <strtoul@plt>
   1636c:	cmn	r0, #1
   16370:	str	r0, [r6, #24]
   16374:	beq	16380 <__assert_fail@plt+0x3b80>
   16378:	mov	r0, r4
   1637c:	pop	{r4, r5, r6, r7, r8, pc}
   16380:	ldr	r3, [r8]
   16384:	cmp	r3, #34	; 0x22
   16388:	bne	16378 <__assert_fail@plt+0x3b78>
   1638c:	mvn	r3, #11
   16390:	str	r3, [r6, #16]
   16394:	mvn	r0, #0
   16398:	pop	{r4, r5, r6, r7, r8, pc}
   1639c:	mov	r2, #0
   163a0:	mvn	r3, #11
   163a4:	str	r2, [r6, #24]
   163a8:	str	r3, [r6, #16]
   163ac:	mvn	r0, #0
   163b0:	pop	{r4, r5, r6, r7, r8, pc}
   163b4:	push	{r1, r2, r3}
   163b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163bc:	sub	sp, sp, #8
   163c0:	ldr	r8, [pc, #188]	; 16484 <__assert_fail@plt+0x3c84>
   163c4:	ldr	r4, [sp, #44]	; 0x2c
   163c8:	ldr	r3, [r8]
   163cc:	cmp	r4, #0
   163d0:	str	r3, [sp, #4]
   163d4:	moveq	r5, r4
   163d8:	beq	1645c <__assert_fail@plt+0x3c5c>
   163dc:	cmp	r0, #0
   163e0:	add	r2, sp, #48	; 0x30
   163e4:	mov	r9, r0
   163e8:	ldr	r6, [pc, #152]	; 16488 <__assert_fail@plt+0x3c88>
   163ec:	ldr	fp, [pc, #152]	; 1648c <__assert_fail@plt+0x3c8c>
   163f0:	movne	r7, #2
   163f4:	moveq	r7, #1
   163f8:	mov	sl, r2
   163fc:	mov	r5, #0
   16400:	str	r2, [sp]
   16404:	b	16434 <__assert_fail@plt+0x3c34>
   16408:	mov	r1, r4
   1640c:	mov	r0, r7
   16410:	blx	r2
   16414:	mov	r0, r4
   16418:	bl	124b8 <strlen@plt>
   1641c:	add	sl, sl, #4
   16420:	ldr	r4, [sl, #-4]
   16424:	str	sl, [sp]
   16428:	cmp	r4, #0
   1642c:	add	r5, r5, r0
   16430:	beq	1645c <__assert_fail@plt+0x3c5c>
   16434:	ldr	r2, [r6]
   16438:	cmp	r2, #0
   1643c:	bne	16408 <__assert_fail@plt+0x3c08>
   16440:	cmp	r9, #0
   16444:	mov	r0, r4
   16448:	ldrne	r3, [pc, #64]	; 16490 <__assert_fail@plt+0x3c90>
   1644c:	ldreq	r1, [fp]
   16450:	ldrne	r1, [r3]
   16454:	bl	12788 <fputs@plt>
   16458:	b	16414 <__assert_fail@plt+0x3c14>
   1645c:	ldr	r2, [sp, #4]
   16460:	ldr	r3, [r8]
   16464:	mov	r0, r5
   16468:	cmp	r2, r3
   1646c:	bne	16480 <__assert_fail@plt+0x3c80>
   16470:	add	sp, sp, #8
   16474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16478:	add	sp, sp, #12
   1647c:	bx	lr
   16480:	bl	12260 <__stack_chk_fail@plt>
   16484:	andeq	r5, r3, r8, asr #22
   16488:	andeq	r6, r3, r8, ror #2
   1648c:	andeq	r6, r3, ip, asr r1
   16490:	andeq	r6, r3, r0, asr r1
   16494:	ldr	r3, [pc, #48]	; 164cc <__assert_fail@plt+0x3ccc>
   16498:	ldr	r3, [r3]
   1649c:	cmp	r3, #0
   164a0:	beq	164b8 <__assert_fail@plt+0x3cb8>
   164a4:	cmp	r0, #0
   164a8:	movne	r0, #2
   164ac:	moveq	r0, #1
   164b0:	mov	r1, #0
   164b4:	bx	r3
   164b8:	cmp	r0, #0
   164bc:	ldrne	r3, [pc, #12]	; 164d0 <__assert_fail@plt+0x3cd0>
   164c0:	ldreq	r3, [pc, #12]	; 164d4 <__assert_fail@plt+0x3cd4>
   164c4:	ldr	r0, [r3]
   164c8:	b	12158 <fflush@plt>
   164cc:	andeq	r6, r3, r8, ror #2
   164d0:	andeq	r6, r3, r0, asr r1
   164d4:	andeq	r6, r3, ip, asr r1
   164d8:	ldr	r3, [pc, #4]	; 164e4 <__assert_fail@plt+0x3ce4>
   164dc:	str	r0, [r3]
   164e0:	bx	lr
   164e4:	andeq	r6, r3, r8, ror #2
   164e8:	ldr	r3, [pc, #244]	; 165e4 <__assert_fail@plt+0x3de4>
   164ec:	push	{r4, lr}
   164f0:	mov	r4, r0
   164f4:	ldr	r3, [r3, #4]
   164f8:	cmp	r3, #0
   164fc:	beq	1650c <__assert_fail@plt+0x3d0c>
   16500:	blx	r3
   16504:	cmp	r0, #0
   16508:	bne	1659c <__assert_fail@plt+0x3d9c>
   1650c:	sub	r0, r4, #10
   16510:	cmp	r0, #31
   16514:	ldrls	pc, [pc, r0, lsl #2]
   16518:	b	165dc <__assert_fail@plt+0x3ddc>
   1651c:	andeq	r6, r1, ip, lsr #11
   16520:			; <UNDEFINED> instruction: 0x000165b4
   16524:	ldrdeq	r6, [r1], -ip
   16528:			; <UNDEFINED> instruction: 0x000165bc
   1652c:	andeq	r6, r1, r4, asr #11
   16530:	andeq	r6, r1, ip, asr #11
   16534:	ldrdeq	r6, [r1], -r4
   16538:	ldrdeq	r6, [r1], -ip
   1653c:	ldrdeq	r6, [r1], -ip
   16540:	ldrdeq	r6, [r1], -ip
   16544:	ldrdeq	r6, [r1], -ip
   16548:	ldrdeq	r6, [r1], -ip
   1654c:	ldrdeq	r6, [r1], -ip
   16550:	ldrdeq	r6, [r1], -ip
   16554:	ldrdeq	r6, [r1], -ip
   16558:	ldrdeq	r6, [r1], -ip
   1655c:	ldrdeq	r6, [r1], -ip
   16560:	ldrdeq	r6, [r1], -ip
   16564:	ldrdeq	r6, [r1], -ip
   16568:	ldrdeq	r6, [r1], -ip
   1656c:	ldrdeq	r6, [r1], -ip
   16570:	ldrdeq	r6, [r1], -ip
   16574:	ldrdeq	r6, [r1], -ip
   16578:	ldrdeq	r6, [r1], -ip
   1657c:	ldrdeq	r6, [r1], -ip
   16580:	ldrdeq	r6, [r1], -ip
   16584:	ldrdeq	r6, [r1], -ip
   16588:	ldrdeq	r6, [r1], -ip
   1658c:	ldrdeq	r6, [r1], -ip
   16590:	ldrdeq	r6, [r1], -ip
   16594:	andeq	r6, r1, r4, lsr #11
   16598:	andeq	r6, r1, r4, lsr #11
   1659c:	pop	{r4, lr}
   165a0:	b	1ffd8 <__assert_fail@plt+0xd7d8>
   165a4:	ldr	r0, [pc, #60]	; 165e8 <__assert_fail@plt+0x3de8>
   165a8:	pop	{r4, pc}
   165ac:	ldr	r0, [pc, #56]	; 165ec <__assert_fail@plt+0x3dec>
   165b0:	pop	{r4, pc}
   165b4:	ldr	r0, [pc, #52]	; 165f0 <__assert_fail@plt+0x3df0>
   165b8:	pop	{r4, pc}
   165bc:	ldr	r0, [pc, #48]	; 165f4 <__assert_fail@plt+0x3df4>
   165c0:	pop	{r4, pc}
   165c4:	ldr	r0, [pc, #44]	; 165f8 <__assert_fail@plt+0x3df8>
   165c8:	pop	{r4, pc}
   165cc:	ldr	r0, [pc, #40]	; 165fc <__assert_fail@plt+0x3dfc>
   165d0:	pop	{r4, pc}
   165d4:	ldr	r0, [pc, #36]	; 16600 <__assert_fail@plt+0x3e00>
   165d8:	pop	{r4, pc}
   165dc:	mov	r0, #0
   165e0:	pop	{r4, pc}
   165e4:	andeq	r6, r3, r8, ror #2
   165e8:	andeq	r2, r2, ip, lsl #18
   165ec:	andeq	r2, r2, r0, lsr #29
   165f0:	muleq	r2, r4, fp
   165f4:	muleq	r2, ip, lr
   165f8:	andeq	r2, r2, r8, ror #28
   165fc:	andeq	r2, r2, ip, ror #27
   16600:	muleq	r2, r8, fp
   16604:	push	{r4, r5, lr}
   16608:	mov	r0, #11
   1660c:	sub	sp, sp, #12
   16610:	bl	164e8 <__assert_fail@plt+0x3ce8>
   16614:	mov	r2, #0
   16618:	mov	r1, r0
   1661c:	mov	r0, r2
   16620:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16624:	mov	r0, #12
   16628:	bl	164e8 <__assert_fail@plt+0x3ce8>
   1662c:	subs	r2, r0, #0
   16630:	beq	16648 <__assert_fail@plt+0x3e48>
   16634:	mov	r0, #0
   16638:	str	r0, [sp]
   1663c:	ldr	r3, [pc, #268]	; 16750 <__assert_fail@plt+0x3f50>
   16640:	ldr	r1, [pc, #268]	; 16754 <__assert_fail@plt+0x3f54>
   16644:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16648:	mov	r0, #13
   1664c:	bl	164e8 <__assert_fail@plt+0x3ce8>
   16650:	mov	ip, #0
   16654:	ldr	r3, [pc, #252]	; 16758 <__assert_fail@plt+0x3f58>
   16658:	str	ip, [sp]
   1665c:	ldr	r1, [pc, #248]	; 1675c <__assert_fail@plt+0x3f5c>
   16660:	mov	r5, r3
   16664:	mov	r4, #20
   16668:	mov	r2, r0
   1666c:	mov	r0, ip
   16670:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16674:	mov	r0, r4
   16678:	bl	164e8 <__assert_fail@plt+0x3ce8>
   1667c:	mov	r3, #0
   16680:	mov	r2, r5
   16684:	add	r4, r4, #1
   16688:	subs	r1, r0, #0
   1668c:	mov	r0, r3
   16690:	beq	16698 <__assert_fail@plt+0x3e98>
   16694:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16698:	cmp	r4, #30
   1669c:	bne	16674 <__assert_fail@plt+0x3e74>
   166a0:	mov	r0, #14
   166a4:	bl	164e8 <__assert_fail@plt+0x3ce8>
   166a8:	subs	r1, r0, #0
   166ac:	beq	166c0 <__assert_fail@plt+0x3ec0>
   166b0:	mov	r3, #0
   166b4:	mov	r0, r3
   166b8:	ldr	r2, [pc, #152]	; 16758 <__assert_fail@plt+0x3f58>
   166bc:	bl	163b4 <__assert_fail@plt+0x3bb4>
   166c0:	mov	r0, #10
   166c4:	bl	164e8 <__assert_fail@plt+0x3ce8>
   166c8:	subs	r1, r0, #0
   166cc:	beq	166e0 <__assert_fail@plt+0x3ee0>
   166d0:	mov	r3, #0
   166d4:	mov	r0, r3
   166d8:	ldr	r2, [pc, #120]	; 16758 <__assert_fail@plt+0x3f58>
   166dc:	bl	163b4 <__assert_fail@plt+0x3bb4>
   166e0:	mov	r0, #15
   166e4:	bl	164e8 <__assert_fail@plt+0x3ce8>
   166e8:	subs	r1, r0, #0
   166ec:	beq	166fc <__assert_fail@plt+0x3efc>
   166f0:	mov	r2, #0
   166f4:	mov	r0, r2
   166f8:	bl	163b4 <__assert_fail@plt+0x3bb4>
   166fc:	mov	r0, #18
   16700:	bl	164e8 <__assert_fail@plt+0x3ce8>
   16704:	subs	r1, r0, #0
   16708:	beq	16718 <__assert_fail@plt+0x3f18>
   1670c:	mov	r2, #0
   16710:	mov	r0, r2
   16714:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16718:	mov	r0, r4
   1671c:	bl	164e8 <__assert_fail@plt+0x3ce8>
   16720:	mov	r2, #0
   16724:	add	r4, r4, #1
   16728:	subs	r1, r0, #0
   1672c:	mov	r0, r2
   16730:	beq	16738 <__assert_fail@plt+0x3f38>
   16734:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16738:	cmp	r4, #40	; 0x28
   1673c:	bne	16718 <__assert_fail@plt+0x3f18>
   16740:	mov	r0, #0
   16744:	add	sp, sp, #12
   16748:	pop	{r4, r5, lr}
   1674c:	b	16494 <__assert_fail@plt+0x3c94>
   16750:			; <UNDEFINED> instruction: 0x000221b4
   16754:	strdeq	r2, [r2], -r0
   16758:	andeq	r3, r2, r8, lsl pc
   1675c:	andeq	r2, r2, r4, lsr #14
   16760:	ldr	r3, [pc, #1504]	; 16d48 <__assert_fail@plt+0x4548>
   16764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16768:	sub	sp, sp, #28
   1676c:	ldr	r3, [r3]
   16770:	mov	r7, r0
   16774:	str	r3, [sp, #20]
   16778:	str	r1, [sp, #8]
   1677c:	bl	16604 <__assert_fail@plt+0x3e04>
   16780:	mov	r2, #0
   16784:	mov	r0, r2
   16788:	ldr	r1, [pc, #1468]	; 16d4c <__assert_fail@plt+0x454c>
   1678c:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16790:	mov	r0, #42	; 0x2a
   16794:	bl	164e8 <__assert_fail@plt+0x3ce8>
   16798:	cmp	r0, #0
   1679c:	beq	167ac <__assert_fail@plt+0x3fac>
   167a0:	ldrb	r3, [r0]
   167a4:	cmp	r3, #49	; 0x31
   167a8:	beq	16c60 <__assert_fail@plt+0x4460>
   167ac:	mov	r0, #41	; 0x29
   167b0:	bl	164e8 <__assert_fail@plt+0x3ce8>
   167b4:	mov	r3, #0
   167b8:	ldr	r2, [pc, #1420]	; 16d4c <__assert_fail@plt+0x454c>
   167bc:	mov	r1, r0
   167c0:	mov	r0, r3
   167c4:	bl	163b4 <__assert_fail@plt+0x3bb4>
   167c8:	ldr	r3, [r7, #12]
   167cc:	cmp	r3, #0
   167d0:	beq	1687c <__assert_fail@plt+0x407c>
   167d4:	ldr	r2, [r7]
   167d8:	cmp	r2, #0
   167dc:	beq	16854 <__assert_fail@plt+0x4054>
   167e0:	mov	r4, r7
   167e4:	mov	r6, #0
   167e8:	b	16830 <__assert_fail@plt+0x4030>
   167ec:	ldrb	r8, [r3]
   167f0:	cmp	r8, #64	; 0x40
   167f4:	beq	16824 <__assert_fail@plt+0x4024>
   167f8:	bl	124b8 <strlen@plt>
   167fc:	cmp	r8, #124	; 0x7c
   16800:	mov	r5, r0
   16804:	beq	16b78 <__assert_fail@plt+0x4378>
   16808:	cmp	r5, #34	; 0x22
   1680c:	movle	r3, #1
   16810:	movgt	r3, #0
   16814:	cmp	r5, r6
   16818:	movle	r3, #0
   1681c:	cmp	r3, #0
   16820:	movne	r6, r5
   16824:	ldr	r3, [r4, #16]!
   16828:	cmp	r3, #0
   1682c:	beq	168bc <__assert_fail@plt+0x40bc>
   16830:	ldr	r0, [r4, #4]
   16834:	cmp	r0, #0
   16838:	beq	16824 <__assert_fail@plt+0x4024>
   1683c:	ldr	r3, [r4, #12]
   16840:	cmp	r3, #0
   16844:	bne	167ec <__assert_fail@plt+0x3fec>
   16848:	bl	124b8 <strlen@plt>
   1684c:	mov	r5, r0
   16850:	b	16808 <__assert_fail@plt+0x4008>
   16854:	ldrb	r3, [r3]
   16858:	cmp	r3, #64	; 0x40
   1685c:	bne	16b5c <__assert_fail@plt+0x435c>
   16860:	ldr	r3, [sp, #8]
   16864:	tst	r3, #32
   16868:	beq	1687c <__assert_fail@plt+0x407c>
   1686c:	mov	r2, #0
   16870:	mov	r0, r2
   16874:	ldr	r1, [pc, #1236]	; 16d50 <__assert_fail@plt+0x4550>
   16878:	bl	163b4 <__assert_fail@plt+0x3bb4>
   1687c:	mov	r0, #19
   16880:	bl	164e8 <__assert_fail@plt+0x3ce8>
   16884:	subs	r4, r0, #0
   16888:	beq	168ac <__assert_fail@plt+0x40ac>
   1688c:	mov	r2, #0
   16890:	mov	r0, r2
   16894:	ldr	r1, [pc, #1200]	; 16d4c <__assert_fail@plt+0x454c>
   16898:	bl	163b4 <__assert_fail@plt+0x3bb4>
   1689c:	mov	r2, #0
   168a0:	mov	r1, r4
   168a4:	mov	r0, r2
   168a8:	bl	163b4 <__assert_fail@plt+0x3bb4>
   168ac:	mov	r0, #0
   168b0:	bl	16494 <__assert_fail@plt+0x3c94>
   168b4:	mov	r0, #0
   168b8:	bl	1247c <exit@plt>
   168bc:	ldr	r3, [r7, #12]
   168c0:	add	r6, r6, #10
   168c4:	ldrb	r3, [r3]
   168c8:	cmp	r3, #64	; 0x40
   168cc:	bne	16b60 <__assert_fail@plt+0x4360>
   168d0:	ldr	r3, [r7]
   168d4:	cmp	r3, #0
   168d8:	beq	16860 <__assert_fail@plt+0x4060>
   168dc:	ldr	fp, [pc, #1136]	; 16d54 <__assert_fail@plt+0x4554>
   168e0:	ldr	sl, [pc, #1136]	; 16d58 <__assert_fail@plt+0x4558>
   168e4:	add	r7, r7, #16
   168e8:	mov	r2, #5
   168ec:	ldr	r1, [r7, #-4]
   168f0:	mov	r0, #0
   168f4:	bl	12254 <dcgettext@plt>
   168f8:	bl	1ffd8 <__assert_fail@plt+0xd7d8>
   168fc:	subs	r5, r0, #0
   16900:	beq	16910 <__assert_fail@plt+0x4110>
   16904:	ldrb	r3, [r5]
   16908:	cmp	r3, #64	; 0x40
   1690c:	beq	16acc <__assert_fail@plt+0x42cc>
   16910:	ldr	r1, [r7, #-16]
   16914:	cmp	r1, #255	; 0xff
   16918:	bgt	169fc <__assert_fail@plt+0x41fc>
   1691c:	mov	ip, #0
   16920:	add	r9, sp, #16
   16924:	mov	r3, ip
   16928:	strb	r1, [sp, #16]
   1692c:	mov	r0, ip
   16930:	mov	r2, r9
   16934:	ldr	r1, [pc, #1056]	; 16d5c <__assert_fail@plt+0x455c>
   16938:	strb	ip, [sp, #17]
   1693c:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16940:	ldr	r3, [r7, #-12]
   16944:	cmp	r3, #0
   16948:	movne	r4, #3
   1694c:	beq	16b40 <__assert_fail@plt+0x4340>
   16950:	ldr	r2, [r7, #-16]
   16954:	mov	r8, #0
   16958:	cmp	r2, #256	; 0x100
   1695c:	movlt	ip, #44	; 0x2c
   16960:	movge	ip, #32
   16964:	str	r8, [sp]
   16968:	mov	r0, r8
   1696c:	mov	r2, fp
   16970:	mov	r1, r9
   16974:	strb	ip, [sp, #16]
   16978:	strb	r8, [sp, #17]
   1697c:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16980:	cmp	r5, r8
   16984:	add	r4, r4, r0
   16988:	beq	16998 <__assert_fail@plt+0x4198>
   1698c:	ldrb	r3, [r5]
   16990:	cmp	r3, #124	; 0x7c
   16994:	beq	16bc8 <__assert_fail@plt+0x43c8>
   16998:	mov	r2, #0
   1699c:	mov	r0, r2
   169a0:	mov	r1, sl
   169a4:	add	r4, r4, #3
   169a8:	bl	163b4 <__assert_fail@plt+0x3bb4>
   169ac:	cmp	r6, r4
   169b0:	ble	169d4 <__assert_fail@plt+0x41d4>
   169b4:	ldr	r8, [pc, #932]	; 16d60 <__assert_fail@plt+0x4560>
   169b8:	mov	r2, #0
   169bc:	add	r4, r4, #1
   169c0:	mov	r0, r2
   169c4:	mov	r1, r8
   169c8:	bl	163b4 <__assert_fail@plt+0x3bb4>
   169cc:	cmp	r6, r4
   169d0:	bne	169b8 <__assert_fail@plt+0x41b8>
   169d4:	cmp	r5, #0
   169d8:	bne	16a24 <__assert_fail@plt+0x4224>
   169dc:	mov	r2, #0
   169e0:	mov	r0, r2
   169e4:	ldr	r1, [pc, #864]	; 16d4c <__assert_fail@plt+0x454c>
   169e8:	bl	163b4 <__assert_fail@plt+0x3bb4>
   169ec:	ldr	r3, [r7], #16
   169f0:	cmp	r3, #0
   169f4:	bne	168e8 <__assert_fail@plt+0x40e8>
   169f8:	b	16860 <__assert_fail@plt+0x4060>
   169fc:	mov	r2, #0
   16a00:	mov	r0, r2
   16a04:	mov	r1, sl
   16a08:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16a0c:	ldr	r3, [r7, #-12]
   16a10:	mov	r4, #3
   16a14:	cmp	r3, #0
   16a18:	addne	r9, sp, #16
   16a1c:	bne	16950 <__assert_fail@plt+0x4150>
   16a20:	b	169b4 <__assert_fail@plt+0x41b4>
   16a24:	ldrb	r3, [r5]
   16a28:	cmp	r3, #0
   16a2c:	cmpne	r6, r4
   16a30:	blt	16c9c <__assert_fail@plt+0x449c>
   16a34:	cmp	r3, #0
   16a38:	beq	169dc <__assert_fail@plt+0x41dc>
   16a3c:	cmp	r3, #10
   16a40:	mov	r8, #0
   16a44:	ldr	r4, [pc, #788]	; 16d60 <__assert_fail@plt+0x4560>
   16a48:	bne	16aa0 <__assert_fail@plt+0x42a0>
   16a4c:	ldrb	r3, [r5, #1]
   16a50:	cmp	r3, #0
   16a54:	beq	169dc <__assert_fail@plt+0x41dc>
   16a58:	mov	r2, #0
   16a5c:	mov	r0, r2
   16a60:	ldr	r1, [pc, #740]	; 16d4c <__assert_fail@plt+0x454c>
   16a64:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16a68:	mov	r9, #0
   16a6c:	mov	r2, #0
   16a70:	add	r9, r9, #1
   16a74:	mov	r0, r2
   16a78:	mov	r1, r4
   16a7c:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16a80:	cmp	r6, r9
   16a84:	bne	16a6c <__assert_fail@plt+0x426c>
   16a88:	ldrb	r3, [r5, #1]
   16a8c:	add	r5, r5, #1
   16a90:	cmp	r3, #0
   16a94:	beq	169dc <__assert_fail@plt+0x41dc>
   16a98:	cmp	r3, #10
   16a9c:	beq	16a4c <__assert_fail@plt+0x424c>
   16aa0:	mov	r2, #0
   16aa4:	mov	r0, r2
   16aa8:	add	r1, sp, #16
   16aac:	strb	r3, [sp, #16]
   16ab0:	strb	r8, [sp, #17]
   16ab4:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16ab8:	ldrb	r3, [r5, #1]
   16abc:	add	r5, r5, #1
   16ac0:	cmp	r3, #0
   16ac4:	bne	16a98 <__assert_fail@plt+0x4298>
   16ac8:	b	169dc <__assert_fail@plt+0x41dc>
   16acc:	ldrb	r3, [r5, #1]
   16ad0:	cmp	r3, #0
   16ad4:	beq	169ec <__assert_fail@plt+0x41ec>
   16ad8:	cmp	r3, #10
   16adc:	add	r5, r5, #1
   16ae0:	mov	r4, #0
   16ae4:	ldr	r8, [pc, #608]	; 16d4c <__assert_fail@plt+0x454c>
   16ae8:	bne	16b20 <__assert_fail@plt+0x4320>
   16aec:	ldrb	r3, [r5, #1]
   16af0:	cmp	r3, #0
   16af4:	beq	169dc <__assert_fail@plt+0x41dc>
   16af8:	mov	r2, #0
   16afc:	mov	r0, r2
   16b00:	mov	r1, r8
   16b04:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16b08:	ldrb	r3, [r5, #1]
   16b0c:	cmp	r3, #0
   16b10:	add	r5, r5, #1
   16b14:	beq	169dc <__assert_fail@plt+0x41dc>
   16b18:	cmp	r3, #10
   16b1c:	beq	16aec <__assert_fail@plt+0x42ec>
   16b20:	mov	r2, #0
   16b24:	mov	r0, r2
   16b28:	add	r1, sp, #16
   16b2c:	strb	r3, [sp, #16]
   16b30:	strb	r4, [sp, #17]
   16b34:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16b38:	ldrb	r3, [r5, #1]
   16b3c:	b	16b0c <__assert_fail@plt+0x430c>
   16b40:	cmp	r5, #0
   16b44:	beq	16b54 <__assert_fail@plt+0x4354>
   16b48:	ldrb	r2, [r5]
   16b4c:	cmp	r2, #124	; 0x7c
   16b50:	beq	16cd8 <__assert_fail@plt+0x44d8>
   16b54:	mov	r4, #3
   16b58:	b	169b4 <__assert_fail@plt+0x41b4>
   16b5c:	mov	r6, #10
   16b60:	mov	r3, #0
   16b64:	mov	r0, r3
   16b68:	ldr	r2, [pc, #476]	; 16d4c <__assert_fail@plt+0x454c>
   16b6c:	ldr	r1, [pc, #496]	; 16d64 <__assert_fail@plt+0x4564>
   16b70:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16b74:	b	168d0 <__assert_fail@plt+0x40d0>
   16b78:	bl	20c0c <__assert_fail@plt+0xe40c>
   16b7c:	ldr	r3, [r4, #12]
   16b80:	add	r2, r3, #1
   16b84:	ldrb	r3, [r3, #1]
   16b88:	cmp	r3, #61	; 0x3d
   16b8c:	beq	16ba0 <__assert_fail@plt+0x43a0>
   16b90:	cmp	r3, #124	; 0x7c
   16b94:	cmpne	r3, #0
   16b98:	add	r5, r5, #1
   16b9c:	beq	16808 <__assert_fail@plt+0x4008>
   16ba0:	cmp	r0, #0
   16ba4:	beq	16bb4 <__assert_fail@plt+0x43b4>
   16ba8:	and	r3, r3, #192	; 0xc0
   16bac:	cmp	r3, #128	; 0x80
   16bb0:	addne	r5, r5, #1
   16bb4:	ldrb	r3, [r2, #1]!
   16bb8:	cmp	r3, #0
   16bbc:	cmpne	r3, #124	; 0x7c
   16bc0:	bne	16ba0 <__assert_fail@plt+0x43a0>
   16bc4:	b	16808 <__assert_fail@plt+0x4008>
   16bc8:	ldrb	ip, [r5, #1]
   16bcc:	add	r3, r5, #1
   16bd0:	str	r3, [sp, #12]
   16bd4:	cmp	ip, #61	; 0x3d
   16bd8:	bne	16c30 <__assert_fail@plt+0x4430>
   16bdc:	mvn	r8, r5
   16be0:	add	r8, r8, r4
   16be4:	add	r4, r5, #2
   16be8:	mov	r5, #0
   16bec:	mov	r2, #0
   16bf0:	mov	r0, r2
   16bf4:	mov	r1, r9
   16bf8:	strb	ip, [sp, #16]
   16bfc:	strb	r5, [sp, #17]
   16c00:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16c04:	mov	r3, r4
   16c08:	add	r2, r8, r4
   16c0c:	ldrb	ip, [r4], #1
   16c10:	cmp	ip, #0
   16c14:	cmpne	ip, #124	; 0x7c
   16c18:	bne	16bec <__assert_fail@plt+0x43ec>
   16c1c:	mov	r4, r2
   16c20:	mov	r5, r3
   16c24:	cmp	ip, #0
   16c28:	addne	r5, r5, #1
   16c2c:	b	16998 <__assert_fail@plt+0x4198>
   16c30:	mov	r2, r8
   16c34:	mov	r0, r8
   16c38:	ldr	r1, [pc, #288]	; 16d60 <__assert_fail@plt+0x4560>
   16c3c:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16c40:	ldrb	ip, [r5, #1]
   16c44:	ldr	r3, [sp, #12]
   16c48:	add	r4, r4, #1
   16c4c:	cmp	ip, #124	; 0x7c
   16c50:	cmpne	ip, r8
   16c54:	moveq	r5, r3
   16c58:	bne	16bdc <__assert_fail@plt+0x43dc>
   16c5c:	b	16c24 <__assert_fail@plt+0x4424>
   16c60:	mov	r0, #40	; 0x28
   16c64:	bl	164e8 <__assert_fail@plt+0x3ce8>
   16c68:	mov	r2, #0
   16c6c:	mov	r4, r0
   16c70:	mov	r1, r0
   16c74:	mov	r0, #1
   16c78:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16c7c:	ldrb	r3, [r4]
   16c80:	cmp	r3, #0
   16c84:	beq	167ac <__assert_fail@plt+0x3fac>
   16c88:	mov	r2, #0
   16c8c:	ldr	r1, [pc, #184]	; 16d4c <__assert_fail@plt+0x454c>
   16c90:	mov	r0, #1
   16c94:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16c98:	b	167ac <__assert_fail@plt+0x3fac>
   16c9c:	mov	r2, #0
   16ca0:	mov	r0, r2
   16ca4:	ldr	r1, [pc, #160]	; 16d4c <__assert_fail@plt+0x454c>
   16ca8:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16cac:	ldr	r8, [pc, #172]	; 16d60 <__assert_fail@plt+0x4560>
   16cb0:	mov	r4, #0
   16cb4:	mov	r2, #0
   16cb8:	add	r4, r4, #1
   16cbc:	mov	r0, r2
   16cc0:	mov	r1, r8
   16cc4:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16cc8:	cmp	r6, r4
   16ccc:	bne	16cb4 <__assert_fail@plt+0x44b4>
   16cd0:	ldrb	r3, [r5]
   16cd4:	b	16a34 <__assert_fail@plt+0x4234>
   16cd8:	mov	r2, r3
   16cdc:	ldr	r1, [pc, #124]	; 16d60 <__assert_fail@plt+0x4560>
   16ce0:	mov	r0, r3
   16ce4:	str	r3, [sp, #12]
   16ce8:	add	r8, r5, #1
   16cec:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16cf0:	rsb	r5, r5, #3
   16cf4:	b	16d14 <__assert_fail@plt+0x4514>
   16cf8:	mov	r2, #0
   16cfc:	ldr	r3, [sp, #12]
   16d00:	mov	r0, r2
   16d04:	mov	r1, r9
   16d08:	strb	ip, [sp, #16]
   16d0c:	strb	r3, [sp, #17]
   16d10:	bl	163b4 <__assert_fail@plt+0x3bb4>
   16d14:	add	r4, r5, r8
   16d18:	mov	r2, r8
   16d1c:	ldrb	ip, [r8], #1
   16d20:	cmp	ip, #0
   16d24:	cmpne	ip, #124	; 0x7c
   16d28:	bne	16cf8 <__assert_fail@plt+0x44f8>
   16d2c:	cmp	ip, #0
   16d30:	movne	r5, r8
   16d34:	moveq	r5, r2
   16d38:	ldr	r3, [r7, #-12]
   16d3c:	cmp	r3, #0
   16d40:	bne	16950 <__assert_fail@plt+0x4150>
   16d44:	b	169ac <__assert_fail@plt+0x41ac>
   16d48:	andeq	r5, r3, r8, asr #22
   16d4c:	andeq	r3, r2, r8, lsl pc
   16d50:	andeq	r2, r2, ip, lsl #30
   16d54:	andeq	r2, r2, r8, lsl #30
   16d58:	andeq	r2, r2, r4, lsl #30
   16d5c:	andeq	r2, r2, r0, lsl #30
   16d60:	andeq	r2, r2, r4, lsr #14
   16d64:	strdeq	r2, [r2], -r4
   16d68:	ldr	ip, [pc, #2540]	; 1775c <__assert_fail@plt+0x4f5c>
   16d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d70:	sub	sp, sp, #108	; 0x6c
   16d74:	mov	r6, r1
   16d78:	str	r1, [sp, #16]
   16d7c:	mov	r4, r0
   16d80:	ldm	ip, {r0, r1, r2, r3}
   16d84:	add	r5, ip, #16
   16d88:	add	lr, sp, #40	; 0x28
   16d8c:	stm	lr, {r0, r1, r2, r3}
   16d90:	add	lr, ip, #32
   16d94:	ldm	r5, {r0, r1, r2, r3}
   16d98:	add	r5, sp, #56	; 0x38
   16d9c:	add	ip, ip, #48	; 0x30
   16da0:	stm	r5, {r0, r1, r2, r3}
   16da4:	ldm	lr, {r0, r1, r2, r3}
   16da8:	add	lr, sp, #72	; 0x48
   16dac:	stm	lr, {r0, r1, r2, r3}
   16db0:	ldm	ip, {r0, r1, r2, r3}
   16db4:	add	ip, sp, #88	; 0x58
   16db8:	stm	ip, {r0, r1, r2, r3}
   16dbc:	ldr	r7, [r6]
   16dc0:	cmp	r7, #0
   16dc4:	beq	170d0 <__assert_fail@plt+0x48d0>
   16dc8:	mov	r7, #0
   16dcc:	mov	r5, r6
   16dd0:	str	r7, [sp, #20]
   16dd4:	str	r7, [sp, #12]
   16dd8:	mov	r9, r7
   16ddc:	mov	r6, r7
   16de0:	ldr	r8, [pc, #2424]	; 17760 <__assert_fail@plt+0x4f60>
   16de4:	ldr	sl, [pc, #2424]	; 17764 <__assert_fail@plt+0x4f64>
   16de8:	b	16df0 <__assert_fail@plt+0x45f0>
   16dec:	mov	r6, ip
   16df0:	ldr	fp, [r5, #4]
   16df4:	cmp	fp, #0
   16df8:	beq	16e60 <__assert_fail@plt+0x4660>
   16dfc:	mov	r1, r8
   16e00:	mov	r0, fp
   16e04:	bl	12104 <strcmp@plt>
   16e08:	cmp	r0, #0
   16e0c:	moveq	r9, #1
   16e10:	beq	16e60 <__assert_fail@plt+0x4660>
   16e14:	mov	r1, sl
   16e18:	mov	r0, fp
   16e1c:	bl	12104 <strcmp@plt>
   16e20:	cmp	r0, #0
   16e24:	moveq	r3, #1
   16e28:	streq	r3, [sp, #12]
   16e2c:	beq	16e60 <__assert_fail@plt+0x4660>
   16e30:	ldr	r1, [pc, #2352]	; 17768 <__assert_fail@plt+0x4f68>
   16e34:	mov	r0, fp
   16e38:	bl	12104 <strcmp@plt>
   16e3c:	cmp	r0, #0
   16e40:	moveq	r3, #1
   16e44:	streq	r3, [sp, #20]
   16e48:	beq	16e60 <__assert_fail@plt+0x4660>
   16e4c:	mov	r0, fp
   16e50:	ldr	r1, [pc, #2324]	; 1776c <__assert_fail@plt+0x4f6c>
   16e54:	bl	12104 <strcmp@plt>
   16e58:	cmp	r0, #0
   16e5c:	moveq	r7, #1
   16e60:	ldr	r3, [r5, #16]!
   16e64:	add	ip, r6, #1
   16e68:	cmp	r3, #0
   16e6c:	bne	16dec <__assert_fail@plt+0x45ec>
   16e70:	cmp	r9, #0
   16e74:	addeq	ip, r6, #2
   16e78:	beq	170e0 <__assert_fail@plt+0x48e0>
   16e7c:	ldr	r3, [sp, #12]
   16e80:	cmp	r3, #0
   16e84:	bne	16ea0 <__assert_fail@plt+0x46a0>
   16e88:	add	r3, sp, #56	; 0x38
   16e8c:	ldr	lr, [sp, #16]
   16e90:	ldm	r3, {r0, r1, r2, r3}
   16e94:	add	lr, lr, ip, lsl #4
   16e98:	add	ip, ip, #1
   16e9c:	stm	lr, {r0, r1, r2, r3}
   16ea0:	ldr	r3, [sp, #20]
   16ea4:	cmp	r3, #0
   16ea8:	bne	16ec4 <__assert_fail@plt+0x46c4>
   16eac:	add	r3, sp, #72	; 0x48
   16eb0:	ldr	lr, [sp, #16]
   16eb4:	ldm	r3, {r0, r1, r2, r3}
   16eb8:	add	lr, lr, ip, lsl #4
   16ebc:	add	ip, ip, #1
   16ec0:	stm	lr, {r0, r1, r2, r3}
   16ec4:	cmp	r7, #0
   16ec8:	addeq	r3, sp, #88	; 0x58
   16ecc:	ldreq	lr, [sp, #16]
   16ed0:	ldmeq	r3, {r0, r1, r2, r3}
   16ed4:	addeq	ip, lr, ip, lsl #4
   16ed8:	stmeq	ip, {r0, r1, r2, r3}
   16edc:	mov	r2, #0
   16ee0:	mov	r1, r2
   16ee4:	mov	r0, r4
   16ee8:	bl	15f84 <__assert_fail@plt+0x3784>
   16eec:	ldr	fp, [r4]
   16ef0:	ldr	r9, [r4, #28]
   16ef4:	ldr	r3, [r4, #4]
   16ef8:	ldr	r8, [fp]
   16efc:	mov	r1, fp
   16f00:	adds	r2, r8, #0
   16f04:	movne	r2, #1
   16f08:	cmp	r9, #0
   16f0c:	movne	r2, #0
   16f10:	cmp	r2, #0
   16f14:	ldr	r7, [r3]
   16f18:	mov	r2, r3
   16f1c:	beq	16f38 <__assert_fail@plt+0x4738>
   16f20:	ldr	r0, [r4, #8]
   16f24:	tst	r0, #16
   16f28:	bne	170f0 <__assert_fail@plt+0x48f0>
   16f2c:	sub	r8, r8, #1
   16f30:	add	r7, r7, #4
   16f34:	mov	r9, #1
   16f38:	cmp	r8, #0
   16f3c:	beq	170c4 <__assert_fail@plt+0x48c4>
   16f40:	ldr	sl, [r4, #36]	; 0x24
   16f44:	ldr	r5, [r7]
   16f48:	cmp	sl, #0
   16f4c:	str	r5, [r4, #40]	; 0x28
   16f50:	moveq	r1, #1
   16f54:	moveq	r0, sl
   16f58:	bne	16f98 <__assert_fail@plt+0x4798>
   16f5c:	ldrb	r2, [r5]
   16f60:	cmp	r2, #45	; 0x2d
   16f64:	beq	16fc8 <__assert_fail@plt+0x47c8>
   16f68:	ldr	r6, [r4, #32]
   16f6c:	cmp	r6, #0
   16f70:	bne	17124 <__assert_fail@plt+0x4924>
   16f74:	ldr	r2, [r4, #8]
   16f78:	tst	r2, #4
   16f7c:	bne	170f8 <__assert_fail@plt+0x48f8>
   16f80:	str	r1, [r4, #36]	; 0x24
   16f84:	ldr	r2, [r4, #36]	; 0x24
   16f88:	ldr	r5, [r7]
   16f8c:	cmp	r2, #0
   16f90:	str	r5, [r4, #40]	; 0x28
   16f94:	beq	16f5c <__assert_fail@plt+0x475c>
   16f98:	ldr	r2, [r4, #8]
   16f9c:	ands	r2, r2, #2
   16fa0:	streq	r2, [r4, #16]
   16fa4:	moveq	r1, fp
   16fa8:	moveq	r2, r3
   16fac:	bne	170f8 <__assert_fail@plt+0x48f8>
   16fb0:	str	r8, [r1]
   16fb4:	str	r7, [r2]
   16fb8:	ldr	r0, [r4, #16]
   16fbc:	str	r9, [r4, #28]
   16fc0:	add	sp, sp, #108	; 0x6c
   16fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fc8:	ldrb	r2, [r5, #1]
   16fcc:	cmp	r2, #45	; 0x2d
   16fd0:	beq	17084 <__assert_fail@plt+0x4884>
   16fd4:	cmp	r2, #0
   16fd8:	beq	16f68 <__assert_fail@plt+0x4768>
   16fdc:	ldr	r2, [sp, #16]
   16fe0:	ldr	r6, [r4, #32]
   16fe4:	ldr	r2, [r2]
   16fe8:	cmp	r6, #0
   16fec:	str	r2, [sp, #20]
   16ff0:	bne	17130 <__assert_fail@plt+0x4930>
   16ff4:	ldr	r1, [r4, #8]
   16ff8:	mov	r2, #1
   16ffc:	tst	r1, #32
   17000:	add	r1, r5, r2
   17004:	str	r2, [r4, #32]
   17008:	str	r1, [sp, #12]
   1700c:	beq	17280 <__assert_fail@plt+0x4a80>
   17010:	ldr	r0, [sp, #20]
   17014:	cmp	r0, #0
   17018:	beq	17600 <__assert_fail@plt+0x4e00>
   1701c:	ldr	r2, [sp, #16]
   17020:	str	sl, [sp, #28]
   17024:	str	r5, [sp, #32]
   17028:	str	r4, [sp, #24]
   1702c:	mov	r5, r6
   17030:	mov	sl, r1
   17034:	mov	r4, r2
   17038:	mov	r6, r3
   1703c:	ldr	r0, [r4, #4]
   17040:	cmp	r0, #0
   17044:	beq	17058 <__assert_fail@plt+0x4858>
   17048:	mov	r1, sl
   1704c:	bl	12104 <strcmp@plt>
   17050:	cmp	r0, #0
   17054:	beq	171f0 <__assert_fail@plt+0x49f0>
   17058:	ldr	r1, [r4, #16]!
   1705c:	add	r5, r5, #1
   17060:	cmp	r1, #0
   17064:	bne	1703c <__assert_fail@plt+0x483c>
   17068:	ldr	r5, [sp, #32]
   1706c:	mov	r3, r6
   17070:	ldr	sl, [sp, #28]
   17074:	ldr	r4, [sp, #24]
   17078:	ldrb	r1, [r5, #1]
   1707c:	mov	r6, #1
   17080:	b	1714c <__assert_fail@plt+0x494c>
   17084:	str	r0, [r4, #32]
   17088:	ldrb	r2, [r5, #2]
   1708c:	cmp	r2, #0
   17090:	bne	172e4 <__assert_fail@plt+0x4ae4>
   17094:	ldr	r2, [r4, #8]
   17098:	tst	r2, #8
   1709c:	bne	173e8 <__assert_fail@plt+0x4be8>
   170a0:	orr	r2, r2, #256	; 0x100
   170a4:	subs	r8, r8, #1
   170a8:	str	r2, [r4, #8]
   170ac:	str	r1, [r4, #36]	; 0x24
   170b0:	add	r7, r7, #4
   170b4:	add	r9, r9, #1
   170b8:	bne	16f84 <__assert_fail@plt+0x4784>
   170bc:	mov	r1, fp
   170c0:	mov	r2, r3
   170c4:	mov	r8, #0
   170c8:	str	r8, [r4, #16]
   170cc:	b	16fb0 <__assert_fail@plt+0x47b0>
   170d0:	ldr	r5, [sp, #16]
   170d4:	mov	ip, #1
   170d8:	str	r7, [sp, #20]
   170dc:	str	r7, [sp, #12]
   170e0:	add	r3, sp, #40	; 0x28
   170e4:	ldm	r3, {r0, r1, r2, r3}
   170e8:	stm	r5, {r0, r1, r2, r3}
   170ec:	b	16e7c <__assert_fail@plt+0x467c>
   170f0:	mov	r9, #0
   170f4:	b	16f40 <__assert_fail@plt+0x4740>
   170f8:	mvn	ip, #0
   170fc:	mov	r0, #2
   17100:	str	r5, [r4, #24]
   17104:	add	r8, r8, ip
   17108:	add	r7, r7, #4
   1710c:	add	r9, r9, #1
   17110:	mov	r1, fp
   17114:	mov	r2, r3
   17118:	str	ip, [r4, #16]
   1711c:	str	r0, [r4, #20]
   17120:	b	16fb0 <__assert_fail@plt+0x47b0>
   17124:	ldr	r2, [sp, #16]
   17128:	ldr	r2, [r2]
   1712c:	str	r2, [sp, #20]
   17130:	add	r2, r5, r6
   17134:	str	r2, [sp, #12]
   17138:	ldr	r2, [sp, #20]
   1713c:	cmp	r2, #0
   17140:	ldr	r2, [sp, #12]
   17144:	ldrb	r1, [r2]
   17148:	beq	17608 <__assert_fail@plt+0x4e08>
   1714c:	ldr	r2, [sp, #20]
   17150:	mov	ip, r1
   17154:	cmp	r1, r2
   17158:	beq	17610 <__assert_fail@plt+0x4e10>
   1715c:	ldr	r2, [sp, #16]
   17160:	add	r2, r2, #16
   17164:	b	17174 <__assert_fail@plt+0x4974>
   17168:	cmp	lr, r1
   1716c:	add	r2, r2, #16
   17170:	beq	1720c <__assert_fail@plt+0x4a0c>
   17174:	ldr	lr, [r2]
   17178:	mov	r0, r2
   1717c:	cmp	lr, #0
   17180:	bne	17168 <__assert_fail@plt+0x4968>
   17184:	cmp	r1, #63	; 0x3f
   17188:	cmpne	r1, #104	; 0x68
   1718c:	beq	17750 <__assert_fail@plt+0x4f50>
   17190:	ldr	r2, [r0, #8]
   17194:	ldr	r1, [sp, #12]
   17198:	tst	r2, #128	; 0x80
   1719c:	add	r6, r6, #1
   171a0:	mvnne	r2, #6
   171a4:	mvneq	r2, #1
   171a8:	str	r6, [r4, #32]
   171ac:	str	r1, [r4, #24]
   171b0:	str	r2, [r4, #16]
   171b4:	ldr	r2, [sp, #12]
   171b8:	mov	r1, fp
   171bc:	ldrb	r0, [r2, #1]
   171c0:	mov	r2, r3
   171c4:	cmp	r0, #0
   171c8:	andne	sl, sl, #1
   171cc:	moveq	sl, #1
   171d0:	cmp	sl, #0
   171d4:	beq	16fb0 <__assert_fail@plt+0x47b0>
   171d8:	mov	r3, #0
   171dc:	sub	r8, r8, #1
   171e0:	add	r7, r7, #4
   171e4:	add	r9, r9, #1
   171e8:	str	r3, [r4, #32]
   171ec:	b	16fb0 <__assert_fail@plt+0x47b0>
   171f0:	ldr	r2, [sp, #16]
   171f4:	mov	r3, r6
   171f8:	ldr	r4, [sp, #24]
   171fc:	mov	r6, #1
   17200:	ldr	ip, [r2, r5, lsl #4]
   17204:	add	r0, r2, r5, lsl #4
   17208:	mov	sl, r6
   1720c:	cmp	ip, #0
   17210:	beq	17298 <__assert_fail@plt+0x4a98>
   17214:	ldr	r1, [r0, #8]
   17218:	str	ip, [r4, #16]
   1721c:	ands	r2, r1, #7
   17220:	beq	17288 <__assert_fail@plt+0x4a88>
   17224:	ldr	r2, [sp, #12]
   17228:	eor	sl, sl, #1
   1722c:	ldrb	r0, [r2, #1]
   17230:	cmp	r0, #0
   17234:	andne	r0, sl, #1
   17238:	moveq	r0, #0
   1723c:	cmp	r0, #0
   17240:	bne	175ec <__assert_fail@plt+0x4dec>
   17244:	ldr	r2, [r7, #4]
   17248:	cmp	r2, #0
   1724c:	beq	172a4 <__assert_fail@plt+0x4aa4>
   17250:	ldrb	ip, [r2]
   17254:	cmp	ip, #45	; 0x2d
   17258:	bne	172c8 <__assert_fail@plt+0x4ac8>
   1725c:	ldrb	ip, [r2, #1]
   17260:	cmp	ip, #0
   17264:	beq	172c8 <__assert_fail@plt+0x4ac8>
   17268:	tst	r1, #8
   1726c:	beq	172c8 <__assert_fail@plt+0x4ac8>
   17270:	str	r0, [r4, #20]
   17274:	mov	r1, fp
   17278:	mov	r2, r3
   1727c:	b	171d8 <__assert_fail@plt+0x49d8>
   17280:	mov	r6, r2
   17284:	b	17138 <__assert_fail@plt+0x4938>
   17288:	add	r6, r6, #1
   1728c:	str	r6, [r4, #32]
   17290:	str	r2, [r4, #20]
   17294:	b	171b4 <__assert_fail@plt+0x49b4>
   17298:	ldr	r2, [sp, #12]
   1729c:	ldrb	r1, [r2]
   172a0:	b	17184 <__assert_fail@plt+0x4984>
   172a4:	tst	r1, #8
   172a8:	mvneq	r0, #2
   172ac:	strne	r2, [r4, #20]
   172b0:	movne	r1, fp
   172b4:	movne	r2, r3
   172b8:	moveq	r1, fp
   172bc:	moveq	r2, r3
   172c0:	streq	r0, [r4, #16]
   172c4:	b	171d8 <__assert_fail@plt+0x49d8>
   172c8:	mov	r0, r4
   172cc:	bl	1628c <__assert_fail@plt+0x3a8c>
   172d0:	sub	r8, r8, #1
   172d4:	add	r7, r7, #4
   172d8:	add	r9, r9, #1
   172dc:	ldm	r4, {r1, r2}
   172e0:	b	171d8 <__assert_fail@plt+0x49d8>
   172e4:	add	r6, r5, #2
   172e8:	mov	r0, r6
   172ec:	mov	r1, #61	; 0x3d
   172f0:	str	r3, [sp, #20]
   172f4:	bl	124d0 <strchr@plt>
   172f8:	subs	r3, r0, #0
   172fc:	str	r3, [sp, #12]
   17300:	ldr	r3, [sp, #20]
   17304:	bne	1740c <__assert_fail@plt+0x4c0c>
   17308:	ldr	r2, [sp, #16]
   1730c:	ldr	r2, [r2]
   17310:	cmp	r2, #0
   17314:	str	r2, [sp, #20]
   17318:	beq	173c4 <__assert_fail@plt+0x4bc4>
   1731c:	ldr	fp, [sp, #16]
   17320:	add	r5, fp, #4
   17324:	ldr	r0, [r5, sl, lsl #4]
   17328:	cmp	r0, #0
   1732c:	beq	17340 <__assert_fail@plt+0x4b40>
   17330:	mov	r1, r6
   17334:	bl	12104 <strcmp@plt>
   17338:	cmp	r0, #0
   1733c:	beq	17508 <__assert_fail@plt+0x4d08>
   17340:	add	sl, sl, #1
   17344:	ldr	r3, [fp, sl, lsl #4]
   17348:	cmp	r3, #0
   1734c:	bne	17324 <__assert_fail@plt+0x4b24>
   17350:	mov	r0, r6
   17354:	mov	fp, r3
   17358:	bl	124b8 <strlen@plt>
   1735c:	str	r4, [sp, #24]
   17360:	ldr	r5, [sp, #16]
   17364:	ldr	r4, [sp, #20]
   17368:	mov	sl, r0
   1736c:	str	r0, [sp, #28]
   17370:	ldr	r0, [r5, #4]
   17374:	cmp	r0, #0
   17378:	beq	17390 <__assert_fail@plt+0x4b90>
   1737c:	mov	r2, sl
   17380:	mov	r1, r6
   17384:	bl	12794 <strncmp@plt>
   17388:	cmp	r0, #0
   1738c:	beq	1744c <__assert_fail@plt+0x4c4c>
   17390:	ldr	r4, [r5, #16]!
   17394:	add	fp, fp, #1
   17398:	cmp	r4, #0
   1739c:	bne	17370 <__assert_fail@plt+0x4b70>
   173a0:	ldr	r3, [sp, #12]
   173a4:	ldr	r4, [sp, #24]
   173a8:	cmp	r3, #0
   173ac:	beq	173bc <__assert_fail@plt+0x4bbc>
   173b0:	ldr	r2, [sp, #12]
   173b4:	mov	r3, #61	; 0x3d
   173b8:	strb	r3, [r2]
   173bc:	ldr	fp, [r4]
   173c0:	ldr	r3, [r4, #4]
   173c4:	mvn	r2, #1
   173c8:	str	r6, [r4, #24]
   173cc:	str	r2, [r4, #16]
   173d0:	sub	r8, r8, #1
   173d4:	add	r7, r7, #4
   173d8:	add	r9, r9, #1
   173dc:	mov	r1, fp
   173e0:	mov	r2, r3
   173e4:	b	16fb0 <__assert_fail@plt+0x47b0>
   173e8:	add	r6, r5, #2
   173ec:	mov	r0, r6
   173f0:	mov	r1, #61	; 0x3d
   173f4:	str	r3, [sp, #20]
   173f8:	bl	124d0 <strchr@plt>
   173fc:	subs	r3, r0, #0
   17400:	str	r3, [sp, #12]
   17404:	ldr	r3, [sp, #20]
   17408:	beq	173c4 <__assert_fail@plt+0x4bc4>
   1740c:	ldr	r2, [sp, #12]
   17410:	mov	r3, #0
   17414:	strb	r3, [r2]
   17418:	ldrb	r3, [r5, #2]
   1741c:	cmp	r3, #0
   17420:	moveq	r3, #61	; 0x3d
   17424:	strbeq	r3, [r2]
   17428:	ldreq	fp, [r4]
   1742c:	ldreq	r3, [r4, #4]
   17430:	beq	173c4 <__assert_fail@plt+0x4bc4>
   17434:	ldr	r3, [sp, #16]
   17438:	ldr	r3, [r3]
   1743c:	cmp	r3, #0
   17440:	str	r3, [sp, #20]
   17444:	bne	1731c <__assert_fail@plt+0x4b1c>
   17448:	b	173b0 <__assert_fail@plt+0x4bb0>
   1744c:	ldr	r2, [sp, #16]
   17450:	add	r3, fp, #1
   17454:	mov	r0, r4
   17458:	ldr	r1, [r2, r3, lsl #4]
   1745c:	lsl	r3, r3, #4
   17460:	cmp	r1, #0
   17464:	ldr	r4, [sp, #24]
   17468:	add	sl, r2, r3
   1746c:	beq	17748 <__assert_fail@plt+0x4f48>
   17470:	sub	r3, r3, #16
   17474:	add	r3, r2, r3
   17478:	sub	r2, r3, sl
   1747c:	add	r2, r2, #32
   17480:	str	r7, [sp, #20]
   17484:	str	r8, [sp, #24]
   17488:	str	r9, [sp, #32]
   1748c:	str	fp, [sp, #36]	; 0x24
   17490:	ldr	r9, [sp, #28]
   17494:	mov	r7, r3
   17498:	str	r4, [sp, #28]
   1749c:	mov	fp, r0
   174a0:	mov	r4, r1
   174a4:	mov	r8, r2
   174a8:	ldr	r0, [sl, #4]
   174ac:	cmp	r0, #0
   174b0:	beq	174e0 <__assert_fail@plt+0x4ce0>
   174b4:	mov	r2, r9
   174b8:	mov	r1, r6
   174bc:	bl	12794 <strncmp@plt>
   174c0:	cmp	r0, #0
   174c4:	bne	174e0 <__assert_fail@plt+0x4ce0>
   174c8:	cmp	r4, fp
   174cc:	bne	176c0 <__assert_fail@plt+0x4ec0>
   174d0:	ldr	r2, [sl, #8]
   174d4:	ldr	r3, [r5, #8]
   174d8:	cmp	r2, r3
   174dc:	bne	176c0 <__assert_fail@plt+0x4ec0>
   174e0:	add	r7, r7, #16
   174e4:	ldr	r4, [r7, #16]
   174e8:	add	sl, sl, r8
   174ec:	cmp	r4, #0
   174f0:	bne	174a8 <__assert_fail@plt+0x4ca8>
   174f4:	add	r4, sp, #28
   174f8:	ldr	r7, [sp, #20]
   174fc:	ldm	r4, {r4, r9, fp}
   17500:	ldr	r8, [sp, #24]
   17504:	mov	sl, fp
   17508:	ldr	r2, [sp, #12]
   1750c:	cmp	r2, #0
   17510:	movne	r3, #61	; 0x3d
   17514:	strbne	r3, [r2]
   17518:	cmp	sl, #0
   1751c:	beq	17554 <__assert_fail@plt+0x4d54>
   17520:	ldr	r3, [sp, #16]
   17524:	ldr	r3, [r3, sl, lsl #4]
   17528:	cmp	r3, #32768	; 0x8000
   1752c:	beq	17750 <__assert_fail@plt+0x4f50>
   17530:	ldr	r2, [pc, #568]	; 17770 <__assert_fail@plt+0x4f70>
   17534:	cmp	r3, r2
   17538:	beq	175a8 <__assert_fail@plt+0x4da8>
   1753c:	ldr	r2, [pc, #560]	; 17774 <__assert_fail@plt+0x4f74>
   17540:	cmp	r3, r2
   17544:	beq	1769c <__assert_fail@plt+0x4e9c>
   17548:	ldr	r2, [pc, #552]	; 17778 <__assert_fail@plt+0x4f78>
   1754c:	cmp	r3, r2
   17550:	beq	1761c <__assert_fail@plt+0x4e1c>
   17554:	ldr	r3, [sp, #16]
   17558:	add	r2, r3, sl, lsl #4
   1755c:	ldr	r3, [r3, sl, lsl #4]
   17560:	ldr	r1, [r2, #8]
   17564:	str	r3, [r4, #16]
   17568:	tst	r1, #7
   1756c:	beq	175c0 <__assert_fail@plt+0x4dc0>
   17570:	ldr	r3, [sp, #12]
   17574:	cmp	r3, #0
   17578:	beq	176f4 <__assert_fail@plt+0x4ef4>
   1757c:	ldrb	r3, [r3, #1]
   17580:	cmp	r3, #0
   17584:	beq	1767c <__assert_fail@plt+0x4e7c>
   17588:	ldr	r3, [sp, #12]
   1758c:	adds	r2, r3, #1
   17590:	beq	1767c <__assert_fail@plt+0x4e7c>
   17594:	mov	r0, r4
   17598:	bl	1628c <__assert_fail@plt+0x3a8c>
   1759c:	ldr	fp, [r4]
   175a0:	ldr	r3, [r4, #4]
   175a4:	b	173d0 <__assert_fail@plt+0x4bd0>
   175a8:	ldr	r3, [r4, #8]
   175ac:	ands	r5, r3, #64	; 0x40
   175b0:	bne	17554 <__assert_fail@plt+0x4d54>
   175b4:	bl	16604 <__assert_fail@plt+0x3e04>
   175b8:	mov	r0, r5
   175bc:	bl	1247c <exit@plt>
   175c0:	ldr	r3, [sp, #12]
   175c4:	cmp	r3, #0
   175c8:	mvnne	r3, #5
   175cc:	ldreq	r2, [sp, #12]
   175d0:	strne	r3, [r4, #20]
   175d4:	ldrne	fp, [r4]
   175d8:	ldrne	r3, [r4, #4]
   175dc:	ldreq	fp, [r4]
   175e0:	ldreq	r3, [r4, #4]
   175e4:	streq	r2, [r4, #20]
   175e8:	b	173d0 <__assert_fail@plt+0x4bd0>
   175ec:	add	r2, r2, #1
   175f0:	mov	r0, r4
   175f4:	bl	1628c <__assert_fail@plt+0x3a8c>
   175f8:	ldm	r4, {r1, r2}
   175fc:	b	171d8 <__assert_fail@plt+0x49d8>
   17600:	ldrb	r1, [r5, #1]
   17604:	mov	r6, r2
   17608:	ldr	r0, [sp, #16]
   1760c:	b	17184 <__assert_fail@plt+0x4984>
   17610:	ldr	r0, [sp, #16]
   17614:	ldr	ip, [sp, #20]
   17618:	b	17214 <__assert_fail@plt+0x4a14>
   1761c:	ldr	r3, [sp, #16]
   17620:	ldr	r3, [r3]
   17624:	cmp	r3, #0
   17628:	beq	17674 <__assert_fail@plt+0x4e74>
   1762c:	ldr	r6, [pc, #328]	; 1777c <__assert_fail@plt+0x4f7c>
   17630:	ldr	r5, [pc, #328]	; 17780 <__assert_fail@plt+0x4f80>
   17634:	ldr	r4, [sp, #16]
   17638:	b	17648 <__assert_fail@plt+0x4e48>
   1763c:	ldr	r3, [r4, #16]!
   17640:	cmp	r3, #0
   17644:	beq	17674 <__assert_fail@plt+0x4e74>
   17648:	ldr	r2, [r4, #4]
   1764c:	cmp	r2, #0
   17650:	beq	1763c <__assert_fail@plt+0x4e3c>
   17654:	ldr	r3, [r4, #8]
   17658:	ands	r0, r3, #64	; 0x40
   1765c:	bne	1763c <__assert_fail@plt+0x4e3c>
   17660:	str	r0, [sp]
   17664:	mov	r3, r6
   17668:	mov	r1, r5
   1766c:	bl	163b4 <__assert_fail@plt+0x3bb4>
   17670:	b	1763c <__assert_fail@plt+0x4e3c>
   17674:	mov	r0, #0
   17678:	bl	1247c <exit@plt>
   1767c:	tst	r1, #8
   17680:	movne	r3, #0
   17684:	mvneq	r3, #2
   17688:	strne	r3, [r4, #20]
   1768c:	streq	r3, [r4, #16]
   17690:	ldr	fp, [r4]
   17694:	ldr	r3, [r4, #4]
   17698:	b	173d0 <__assert_fail@plt+0x4bd0>
   1769c:	mov	r0, #16
   176a0:	bl	164e8 <__assert_fail@plt+0x3ce8>
   176a4:	mov	r3, #0
   176a8:	ldr	r2, [pc, #204]	; 1777c <__assert_fail@plt+0x4f7c>
   176ac:	mov	r1, r0
   176b0:	mov	r0, r3
   176b4:	bl	163b4 <__assert_fail@plt+0x3bb4>
   176b8:	mov	r0, #0
   176bc:	bl	1247c <exit@plt>
   176c0:	ldr	r2, [sp, #12]
   176c4:	ldr	r4, [sp, #28]
   176c8:	cmp	r2, #0
   176cc:	movne	r3, #61	; 0x3d
   176d0:	strbne	r3, [r2]
   176d4:	mvn	r3, #7
   176d8:	str	r3, [r4, #16]
   176dc:	ldr	r7, [sp, #20]
   176e0:	ldr	r8, [sp, #24]
   176e4:	ldr	r9, [sp, #32]
   176e8:	ldr	fp, [r4]
   176ec:	ldr	r3, [r4, #4]
   176f0:	b	173d0 <__assert_fail@plt+0x4bd0>
   176f4:	ldr	r2, [r7, #4]
   176f8:	cmp	r2, #0
   176fc:	beq	1767c <__assert_fail@plt+0x4e7c>
   17700:	ldrb	r3, [r2]
   17704:	cmp	r3, #45	; 0x2d
   17708:	beq	1772c <__assert_fail@plt+0x4f2c>
   1770c:	mov	r0, r4
   17710:	bl	1628c <__assert_fail@plt+0x3a8c>
   17714:	sub	r8, r8, #1
   17718:	add	r7, r7, #4
   1771c:	add	r9, r9, #1
   17720:	ldr	fp, [r4]
   17724:	ldr	r3, [r4, #4]
   17728:	b	173d0 <__assert_fail@plt+0x4bd0>
   1772c:	tst	r1, #8
   17730:	beq	1770c <__assert_fail@plt+0x4f0c>
   17734:	ldr	r3, [sp, #12]
   17738:	ldr	fp, [r4]
   1773c:	str	r3, [r4, #20]
   17740:	ldr	r3, [r4, #4]
   17744:	b	173d0 <__assert_fail@plt+0x4bd0>
   17748:	mov	sl, fp
   1774c:	b	17508 <__assert_fail@plt+0x4d08>
   17750:	ldr	r1, [r4, #8]
   17754:	ldr	r0, [sp, #16]
   17758:	bl	16760 <__assert_fail@plt+0x3f60>
   1775c:	andeq	r2, r2, r8, ror r9
   17760:	andeq	r2, r2, r8, asr #30
   17764:	andeq	r2, r2, r0, asr pc
   17768:	andeq	r2, r2, r8, asr pc
   1776c:	andeq	r2, r2, r4, ror #30
   17770:	andeq	r8, r0, r1
   17774:	andeq	r8, r0, r2
   17778:	andeq	r8, r0, r3
   1777c:	andeq	r3, r2, r8, lsl pc
   17780:	andeq	r2, r2, r4, ror pc
   17784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17788:	cmp	r0, #0
   1778c:	sub	sp, sp, #252	; 0xfc
   17790:	stm	sp, {r0, r3}
   17794:	ldr	r3, [pc, #2536]	; 18184 <__assert_fail@plt+0x5984>
   17798:	ldr	r3, [r3]
   1779c:	str	r3, [sp, #244]	; 0xf4
   177a0:	ldr	r3, [sp, #288]	; 0x120
   177a4:	str	r3, [sp, #8]
   177a8:	beq	17ba0 <__assert_fail@plt+0x53a0>
   177ac:	mov	fp, r2
   177b0:	ldr	r0, [sp, #4]
   177b4:	bl	15f84 <__assert_fail@plt+0x3784>
   177b8:	ldr	r3, [fp]
   177bc:	cmp	r3, #0
   177c0:	beq	17ad8 <__assert_fail@plt+0x52d8>
   177c4:	mov	sl, #0
   177c8:	mov	r3, #0
   177cc:	mov	r4, r3
   177d0:	mov	r6, r3
   177d4:	mov	r8, r3
   177d8:	str	r3, [sp, #20]
   177dc:	str	r3, [sp, #16]
   177e0:	str	r3, [sp, #12]
   177e4:	cmp	sl, #0
   177e8:	beq	17854 <__assert_fail@plt+0x5054>
   177ec:	rsb	r3, sl, #3
   177f0:	add	r2, sp, #248	; 0xf8
   177f4:	add	r3, r2, r3, lsl #2
   177f8:	sub	sl, sl, #1
   177fc:	ldr	r9, [r3, #-216]	; 0xffffff28
   17800:	cmn	r9, #1
   17804:	cmpne	r9, #10
   17808:	bne	1786c <__assert_fail@plt+0x506c>
   1780c:	cmn	r9, #1
   17810:	ldrne	r3, [fp]
   17814:	addne	r3, r3, #1
   17818:	strne	r3, [fp]
   1781c:	cmn	r4, #1
   17820:	beq	17b94 <__assert_fail@plt+0x5394>
   17824:	cmp	r4, #2
   17828:	beq	17908 <__assert_fail@plt+0x5108>
   1782c:	cmp	r4, #3
   17830:	beq	17bb4 <__assert_fail@plt+0x53b4>
   17834:	cmp	r4, #4
   17838:	beq	17be8 <__assert_fail@plt+0x53e8>
   1783c:	cmn	r9, #1
   17840:	beq	17c80 <__assert_fail@plt+0x5480>
   17844:	mov	r8, #0
   17848:	cmp	sl, #0
   1784c:	mov	r4, r8
   17850:	bne	177ec <__assert_fail@plt+0x4fec>
   17854:	ldr	r0, [sp]
   17858:	bl	127ac <getc@plt>
   1785c:	mov	r9, r0
   17860:	cmn	r9, #1
   17864:	cmpne	r9, #10
   17868:	beq	1780c <__assert_fail@plt+0x500c>
   1786c:	cmn	r4, #1
   17870:	beq	177e4 <__assert_fail@plt+0x4fe4>
   17874:	cmp	r4, #0
   17878:	beq	178ac <__assert_fail@plt+0x50ac>
   1787c:	cmp	r4, #1
   17880:	beq	177e4 <__assert_fail@plt+0x4fe4>
   17884:	cmp	r4, #2
   17888:	beq	17988 <__assert_fail@plt+0x5188>
   1788c:	cmp	r4, #3
   17890:	bne	17aa4 <__assert_fail@plt+0x52a4>
   17894:	bics	r3, r9, #127	; 0x7f
   17898:	beq	17a80 <__assert_fail@plt+0x5280>
   1789c:	strb	r9, [sp, #44]	; 0x2c
   178a0:	mov	r8, #1
   178a4:	mov	r4, #4
   178a8:	b	177e4 <__assert_fail@plt+0x4fe4>
   178ac:	bics	r4, r9, #127	; 0x7f
   178b0:	beq	178e0 <__assert_fail@plt+0x50e0>
   178b4:	cmp	r8, #98	; 0x62
   178b8:	addle	r3, sp, #248	; 0xf8
   178bc:	ldrgt	r2, [sp, #4]
   178c0:	addle	r3, r3, r8
   178c4:	mvngt	r3, #3
   178c8:	strgt	r3, [r2, #16]
   178cc:	mvngt	r4, #0
   178d0:	strble	r9, [r3, #-204]	; 0xffffff34
   178d4:	addle	r8, r8, #1
   178d8:	movle	r4, #2
   178dc:	b	177e4 <__assert_fail@plt+0x4fe4>
   178e0:	bl	1244c <__ctype_b_loc@plt>
   178e4:	lsl	r3, r9, #1
   178e8:	ldr	r2, [r0]
   178ec:	ldrh	r3, [r2, r3]
   178f0:	tst	r3, #8192	; 0x2000
   178f4:	bne	177e4 <__assert_fail@plt+0x4fe4>
   178f8:	cmp	r9, #35	; 0x23
   178fc:	bne	178b4 <__assert_fail@plt+0x50b4>
   17900:	mov	r4, #1
   17904:	b	177e4 <__assert_fail@plt+0x4fe4>
   17908:	ldr	r5, [sp, #8]
   1790c:	add	r3, sp, #248	; 0xf8
   17910:	mov	r6, #0
   17914:	ldr	r4, [r5]
   17918:	add	r8, r3, r8
   1791c:	cmp	r4, r6
   17920:	strb	r6, [r8, #-204]	; 0xffffff34
   17924:	beq	17cfc <__assert_fail@plt+0x54fc>
   17928:	ldr	r0, [r5, #4]
   1792c:	cmp	r0, #0
   17930:	beq	17944 <__assert_fail@plt+0x5144>
   17934:	add	r1, sp, #44	; 0x2c
   17938:	bl	12104 <strcmp@plt>
   1793c:	cmp	r0, #0
   17940:	beq	17a14 <__assert_fail@plt+0x5214>
   17944:	ldr	r4, [r5, #16]!
   17948:	add	r6, r6, #1
   1794c:	cmp	r4, #0
   17950:	bne	17928 <__assert_fail@plt+0x5128>
   17954:	ldr	r5, [r5, #8]
   17958:	ldr	r3, [sp, #4]
   1795c:	tst	r5, #64	; 0x40
   17960:	str	r4, [r3, #16]
   17964:	bne	17980 <__assert_fail@plt+0x5180>
   17968:	add	r8, sp, #44	; 0x2c
   1796c:	mov	r0, r8
   17970:	ldr	r1, [pc, #2064]	; 18188 <__assert_fail@plt+0x5988>
   17974:	bl	12104 <strcmp@plt>
   17978:	subs	r4, r0, #0
   1797c:	bne	17a40 <__assert_fail@plt+0x5240>
   17980:	mov	r8, r4
   17984:	b	177e4 <__assert_fail@plt+0x4fe4>
   17988:	bics	r5, r9, #127	; 0x7f
   1798c:	bne	178b4 <__assert_fail@plt+0x50b4>
   17990:	bl	1244c <__ctype_b_loc@plt>
   17994:	lsl	r3, r9, #1
   17998:	ldr	r2, [r0]
   1799c:	mov	r7, r0
   179a0:	ldrh	r3, [r2, r3]
   179a4:	tst	r3, #8192	; 0x2000
   179a8:	beq	178b4 <__assert_fail@plt+0x50b4>
   179ac:	ldr	r4, [sp, #8]
   179b0:	add	r3, sp, #248	; 0xf8
   179b4:	add	r3, r3, r8
   179b8:	ldr	r8, [r4]
   179bc:	strb	r5, [r3, #-204]	; 0xffffff34
   179c0:	cmp	r8, #0
   179c4:	beq	17e08 <__assert_fail@plt+0x5608>
   179c8:	ldr	r0, [r4, #4]
   179cc:	cmp	r0, #0
   179d0:	beq	179e4 <__assert_fail@plt+0x51e4>
   179d4:	add	r1, sp, #44	; 0x2c
   179d8:	bl	12104 <strcmp@plt>
   179dc:	cmp	r0, #0
   179e0:	beq	17ddc <__assert_fail@plt+0x55dc>
   179e4:	ldr	r8, [r4, #16]!
   179e8:	add	r5, r5, #1
   179ec:	cmp	r8, #0
   179f0:	bne	179c8 <__assert_fail@plt+0x51c8>
   179f4:	ldr	r6, [r4, #8]
   179f8:	ldr	r3, [sp, #4]
   179fc:	tst	r6, #64	; 0x40
   17a00:	str	r8, [r3, #16]
   17a04:	beq	17e20 <__assert_fail@plt+0x5620>
   17a08:	mov	r6, r5
   17a0c:	mov	r8, r5
   17a10:	b	17900 <__assert_fail@plt+0x5100>
   17a14:	ldr	r2, [r5, #8]
   17a18:	ldr	r3, [sp, #4]
   17a1c:	ands	r1, r2, #64	; 0x40
   17a20:	mov	r8, r0
   17a24:	str	r4, [r3, #16]
   17a28:	bne	17848 <__assert_fail@plt+0x5048>
   17a2c:	ands	r3, r2, #7
   17a30:	bne	18048 <__assert_fail@plt+0x5848>
   17a34:	ldr	r2, [sp, #4]
   17a38:	str	r3, [r2, #20]
   17a3c:	b	17b74 <__assert_fail@plt+0x5374>
   17a40:	ldr	r3, [sp, #4]
   17a44:	ldr	r7, [r3, #52]	; 0x34
   17a48:	cmp	r7, #0
   17a4c:	bne	17a60 <__assert_fail@plt+0x5260>
   17a50:	b	17b60 <__assert_fail@plt+0x5360>
   17a54:	ldr	r7, [r7]
   17a58:	cmp	r7, #0
   17a5c:	beq	17b60 <__assert_fail@plt+0x5360>
   17a60:	mov	r1, r8
   17a64:	add	r0, r7, #4
   17a68:	bl	12104 <strcmp@plt>
   17a6c:	cmp	r0, #0
   17a70:	bne	17a54 <__assert_fail@plt+0x5254>
   17a74:	mov	r4, r0
   17a78:	mov	r8, r4
   17a7c:	b	177e4 <__assert_fail@plt+0x4fe4>
   17a80:	bl	1244c <__ctype_b_loc@plt>
   17a84:	lsl	r3, r9, #1
   17a88:	ldr	r2, [r0]
   17a8c:	ldrh	r3, [r2, r3]
   17a90:	tst	r3, #8192	; 0x2000
   17a94:	strbeq	r9, [sp, #44]	; 0x2c
   17a98:	moveq	r8, #1
   17a9c:	moveq	r4, #4
   17aa0:	b	177e4 <__assert_fail@plt+0x4fe4>
   17aa4:	cmp	r4, #4
   17aa8:	bne	178b4 <__assert_fail@plt+0x50b4>
   17aac:	ldr	r2, [sp, #12]
   17ab0:	mov	r5, r8
   17ab4:	cmp	r2, #0
   17ab8:	beq	17cc8 <__assert_fail@plt+0x54c8>
   17abc:	ldr	r3, [sp, #16]
   17ac0:	sub	r3, r3, #1
   17ac4:	cmp	r3, r8
   17ac8:	bls	17b30 <__assert_fail@plt+0x5330>
   17acc:	add	r8, r8, #1
   17ad0:	strb	r9, [r2, r5]
   17ad4:	b	177e4 <__assert_fail@plt+0x4fe4>
   17ad8:	ldr	r6, [sp]
   17adc:	mov	r0, r6
   17ae0:	bl	127ac <getc@plt>
   17ae4:	mov	r4, r0
   17ae8:	mov	r0, r6
   17aec:	str	r4, [sp, #32]
   17af0:	bl	127ac <getc@plt>
   17af4:	mov	r5, r0
   17af8:	mov	r0, r6
   17afc:	str	r5, [sp, #36]	; 0x24
   17b00:	bl	127ac <getc@plt>
   17b04:	cmp	r5, #187	; 0xbb
   17b08:	cmpeq	r4, #239	; 0xef
   17b0c:	movne	r4, #1
   17b10:	moveq	r4, #0
   17b14:	cmp	r0, #191	; 0xbf
   17b18:	orrne	r4, r4, #1
   17b1c:	cmp	r4, #0
   17b20:	str	r0, [sp, #40]	; 0x28
   17b24:	movne	sl, #3
   17b28:	bne	177c8 <__assert_fail@plt+0x4fc8>
   17b2c:	b	177c4 <__assert_fail@plt+0x4fc4>
   17b30:	ldr	r3, [sp, #16]
   17b34:	ldr	r0, [sp, #12]
   17b38:	add	r3, r3, #50	; 0x32
   17b3c:	mov	r1, r3
   17b40:	str	r3, [sp, #16]
   17b44:	bl	125d8 <gcry_realloc@plt>
   17b48:	cmp	r0, #0
   17b4c:	beq	18110 <__assert_fail@plt+0x5910>
   17b50:	add	r8, r8, #1
   17b54:	strb	r9, [r0, r5]
   17b58:	str	r0, [sp, #12]
   17b5c:	b	177e4 <__assert_fail@plt+0x4fe4>
   17b60:	ldr	r3, [sp, #4]
   17b64:	tst	r5, #128	; 0x80
   17b68:	mvnne	r4, #6
   17b6c:	mvneq	r4, #1
   17b70:	str	r4, [r3, #16]
   17b74:	ldr	r3, [pc, #1544]	; 18184 <__assert_fail@plt+0x5984>
   17b78:	ldr	r2, [sp, #244]	; 0xf4
   17b7c:	mov	r0, r4
   17b80:	ldr	r3, [r3]
   17b84:	cmp	r2, r3
   17b88:	bne	18150 <__assert_fail@plt+0x5950>
   17b8c:	add	sp, sp, #252	; 0xfc
   17b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b94:	ldr	r3, [sp, #4]
   17b98:	ldr	r4, [r3, #16]
   17b9c:	b	17b74 <__assert_fail@plt+0x5374>
   17ba0:	mov	r1, r3
   17ba4:	ldr	r0, [sp, #4]
   17ba8:	bl	16d68 <__assert_fail@plt+0x4568>
   17bac:	mov	r4, r0
   17bb0:	b	17b74 <__assert_fail@plt+0x5374>
   17bb4:	ldr	r3, [sp, #20]
   17bb8:	cmp	r3, #0
   17bbc:	bne	17cec <__assert_fail@plt+0x54ec>
   17bc0:	ldr	r3, [sp, #8]
   17bc4:	add	r6, r3, r6, lsl #4
   17bc8:	ldr	r3, [r6, #8]
   17bcc:	tst	r3, #7
   17bd0:	bne	17ce4 <__assert_fail@plt+0x54e4>
   17bd4:	ldr	r2, [sp, #4]
   17bd8:	mov	r3, #0
   17bdc:	str	r3, [r2, #20]
   17be0:	ldr	r4, [r2, #16]
   17be4:	b	17b74 <__assert_fail@plt+0x5374>
   17be8:	ldr	r3, [sp, #20]
   17bec:	cmp	r3, #0
   17bf0:	beq	17c5c <__assert_fail@plt+0x545c>
   17bf4:	ldr	r3, [sp, #12]
   17bf8:	cmp	r3, #0
   17bfc:	beq	17c70 <__assert_fail@plt+0x5470>
   17c00:	ldr	r3, [sp, #12]
   17c04:	mov	r6, #0
   17c08:	ldr	r1, [pc, #1404]	; 1818c <__assert_fail@plt+0x598c>
   17c0c:	strb	r6, [r3, r8]
   17c10:	mov	r0, r3
   17c14:	bl	12704 <strpbrk@plt>
   17c18:	subs	r5, r0, #0
   17c1c:	beq	17c44 <__assert_fail@plt+0x5444>
   17c20:	mov	r4, r5
   17c24:	strb	r6, [r4], #1
   17c28:	mov	r0, r4
   17c2c:	bl	14f80 <__assert_fail@plt+0x2780>
   17c30:	cmp	r4, r6
   17c34:	beq	17c44 <__assert_fail@plt+0x5444>
   17c38:	ldrb	r3, [r5, #1]
   17c3c:	cmp	r3, r6
   17c40:	bne	17b94 <__assert_fail@plt+0x5394>
   17c44:	ldr	r0, [sp, #12]
   17c48:	bl	12218 <gcry_free@plt>
   17c4c:	ldr	r3, [sp, #4]
   17c50:	mvn	r4, #9
   17c54:	str	r4, [r3, #16]
   17c58:	b	17b74 <__assert_fail@plt+0x5374>
   17c5c:	ldr	r3, [sp, #8]
   17c60:	add	r6, r3, r6, lsl #4
   17c64:	ldr	r3, [r6, #8]
   17c68:	tst	r3, #7
   17c6c:	bne	17d50 <__assert_fail@plt+0x5550>
   17c70:	ldr	r3, [sp, #4]
   17c74:	mvn	r4, #5
   17c78:	str	r4, [r3, #16]
   17c7c:	b	17b74 <__assert_fail@plt+0x5374>
   17c80:	ldr	r3, [sp, #4]
   17c84:	ldr	r0, [r3, #52]	; 0x34
   17c88:	cmp	r0, #0
   17c8c:	beq	17ca0 <__assert_fail@plt+0x54a0>
   17c90:	ldr	r4, [r0]
   17c94:	bl	12218 <gcry_free@plt>
   17c98:	subs	r0, r4, #0
   17c9c:	bne	17c90 <__assert_fail@plt+0x5490>
   17ca0:	ldm	sp, {r0, r2}
   17ca4:	mov	r3, #0
   17ca8:	str	r3, [r2, #52]	; 0x34
   17cac:	bl	121b8 <ferror@plt>
   17cb0:	subs	r4, r0, #0
   17cb4:	beq	17d44 <__assert_fail@plt+0x5544>
   17cb8:	ldr	r3, [sp, #4]
   17cbc:	mvn	r4, #4
   17cc0:	str	r4, [r3, #16]
   17cc4:	b	17b74 <__assert_fail@plt+0x5374>
   17cc8:	cmp	r8, #98	; 0x62
   17ccc:	bgt	17da4 <__assert_fail@plt+0x55a4>
   17cd0:	add	r3, sp, #248	; 0xf8
   17cd4:	add	r3, r3, r8
   17cd8:	add	r8, r8, #1
   17cdc:	strb	r9, [r3, #-204]	; 0xffffff34
   17ce0:	b	177e4 <__assert_fail@plt+0x4fe4>
   17ce4:	tst	r3, #8
   17ce8:	bne	17bd4 <__assert_fail@plt+0x53d4>
   17cec:	ldr	r3, [sp, #4]
   17cf0:	mvn	r4, #2
   17cf4:	str	r4, [r3, #16]
   17cf8:	b	17b74 <__assert_fail@plt+0x5374>
   17cfc:	ldr	r3, [sp, #8]
   17d00:	mov	r6, r4
   17d04:	ldr	r5, [r3, #8]
   17d08:	ldr	r3, [sp, #4]
   17d0c:	tst	r5, #64	; 0x40
   17d10:	str	r4, [r3, #16]
   17d14:	beq	17968 <__assert_fail@plt+0x5168>
   17d18:	b	17980 <__assert_fail@plt+0x5180>
   17d1c:	add	r3, sp, #248	; 0xf8
   17d20:	add	r8, r3, r8
   17d24:	ldr	r3, [sp, #12]
   17d28:	add	r0, sp, #44	; 0x2c
   17d2c:	strb	r3, [r8, #-204]	; 0xffffff34
   17d30:	bl	127d0 <gcry_strdup@plt>
   17d34:	subs	r3, r0, #0
   17d38:	str	r3, [sp, #12]
   17d3c:	bne	17d68 <__assert_fail@plt+0x5568>
   17d40:	mvn	r4, #10
   17d44:	ldr	r3, [sp, #4]
   17d48:	str	r4, [r3, #16]
   17d4c:	b	17b74 <__assert_fail@plt+0x5374>
   17d50:	ldr	r3, [sp, #12]
   17d54:	cmp	r3, #0
   17d58:	beq	17d1c <__assert_fail@plt+0x551c>
   17d5c:	ldr	r3, [sp, #12]
   17d60:	ldr	r2, [sp, #20]
   17d64:	strb	r2, [r3, r8]
   17d68:	ldr	r4, [sp, #12]
   17d6c:	mov	r0, r4
   17d70:	bl	14f80 <__assert_fail@plt+0x2780>
   17d74:	ldrb	r3, [r4]
   17d78:	cmp	r3, #34	; 0x22
   17d7c:	beq	18070 <__assert_fail@plt+0x5870>
   17d80:	mov	r2, r4
   17d84:	ldr	r4, [sp, #4]
   17d88:	ldr	r1, [r6, #8]
   17d8c:	mov	r0, r4
   17d90:	bl	1628c <__assert_fail@plt+0x3a8c>
   17d94:	cmp	r0, #0
   17d98:	beq	1805c <__assert_fail@plt+0x585c>
   17d9c:	ldr	r4, [r4, #16]
   17da0:	b	17b74 <__assert_fail@plt+0x5374>
   17da4:	mov	r0, #150	; 0x96
   17da8:	bl	120bc <gcry_malloc@plt>
   17dac:	subs	r7, r0, #0
   17db0:	str	r7, [sp, #12]
   17db4:	beq	17d40 <__assert_fail@plt+0x5540>
   17db8:	mov	r2, r8
   17dbc:	add	r1, sp, #44	; 0x2c
   17dc0:	mov	r0, r7
   17dc4:	bl	121dc <memcpy@plt>
   17dc8:	mov	r3, #150	; 0x96
   17dcc:	add	r8, r8, #1
   17dd0:	str	r3, [sp, #16]
   17dd4:	strb	r9, [r7, r5]
   17dd8:	b	177e4 <__assert_fail@plt+0x4fe4>
   17ddc:	ldr	r3, [r4, #8]
   17de0:	ldr	r2, [sp, #4]
   17de4:	tst	r3, #64	; 0x40
   17de8:	moveq	r6, r5
   17dec:	str	r8, [r2, #16]
   17df0:	moveq	r4, #3
   17df4:	mov	r8, r5
   17df8:	beq	177e4 <__assert_fail@plt+0x4fe4>
   17dfc:	mov	r6, r8
   17e00:	mov	r4, #1
   17e04:	b	177e4 <__assert_fail@plt+0x4fe4>
   17e08:	ldr	r3, [sp, #8]
   17e0c:	ldr	r6, [r3, #8]
   17e10:	ldr	r3, [sp, #4]
   17e14:	tst	r6, #64	; 0x40
   17e18:	str	r8, [r3, #16]
   17e1c:	bne	17dfc <__assert_fail@plt+0x55fc>
   17e20:	add	r8, sp, #44	; 0x2c
   17e24:	mov	r0, r8
   17e28:	ldr	r1, [pc, #864]	; 18190 <__assert_fail@plt+0x5990>
   17e2c:	bl	12104 <strcmp@plt>
   17e30:	cmp	r0, #0
   17e34:	beq	18030 <__assert_fail@plt+0x5830>
   17e38:	ldr	r1, [pc, #840]	; 18188 <__assert_fail@plt+0x5988>
   17e3c:	mov	r0, r8
   17e40:	bl	12104 <strcmp@plt>
   17e44:	subs	r4, r0, #0
   17e48:	bne	180bc <__assert_fail@plt+0x58bc>
   17e4c:	ldr	r0, [sp]
   17e50:	bl	127ac <getc@plt>
   17e54:	ldr	r8, [r7]
   17e58:	str	r4, [sp, #28]
   17e5c:	cmn	r0, #1
   17e60:	cmpne	r0, #10
   17e64:	moveq	r3, #1
   17e68:	movne	r3, #0
   17e6c:	cmp	r3, #0
   17e70:	mov	r6, r0
   17e74:	movne	r6, #10
   17e78:	movne	r3, #1
   17e7c:	moveq	r3, #0
   17e80:	str	r3, [sp, #24]
   17e84:	lsl	r3, r6, #1
   17e88:	bics	r2, r6, #127	; 0x7f
   17e8c:	ldrh	r3, [r8, r3]
   17e90:	and	r3, r3, #8192	; 0x2000
   17e94:	bne	1800c <__assert_fail@plt+0x580c>
   17e98:	cmp	r3, #0
   17e9c:	bne	17f50 <__assert_fail@plt+0x5750>
   17ea0:	mov	r3, #1
   17ea4:	ldr	r4, [sp, #24]
   17ea8:	mov	r8, r3
   17eac:	mov	r0, r6
   17eb0:	add	r3, sp, #248	; 0xf8
   17eb4:	add	r2, r3, r2
   17eb8:	cmp	r4, #0
   17ebc:	strb	r0, [r2, #-104]	; 0xffffff98
   17ec0:	bne	18168 <__assert_fail@plt+0x5968>
   17ec4:	ldr	r0, [sp]
   17ec8:	bl	127ac <getc@plt>
   17ecc:	cmn	r0, #1
   17ed0:	cmpne	r0, #10
   17ed4:	bne	18160 <__assert_fail@plt+0x5960>
   17ed8:	mov	r3, #20
   17edc:	mov	r4, #1
   17ee0:	mov	r0, #10
   17ee4:	ldr	r2, [r7]
   17ee8:	ldrh	r3, [r2, r3]
   17eec:	tst	r3, #8192	; 0x2000
   17ef0:	bne	17f84 <__assert_fail@plt+0x5784>
   17ef4:	cmp	r8, #98	; 0x62
   17ef8:	ble	18154 <__assert_fail@plt+0x5954>
   17efc:	cmp	r4, #0
   17f00:	mov	r9, r4
   17f04:	bne	18168 <__assert_fail@plt+0x5968>
   17f08:	ldr	r0, [sp]
   17f0c:	bl	127ac <getc@plt>
   17f10:	cmn	r0, #1
   17f14:	cmpne	r0, #10
   17f18:	mov	r6, r0
   17f1c:	bne	180a8 <__assert_fail@plt+0x58a8>
   17f20:	mov	r6, #10
   17f24:	mov	r3, #20
   17f28:	mov	r0, r6
   17f2c:	mov	r2, #1
   17f30:	str	r2, [sp, #24]
   17f34:	ldr	r8, [r7]
   17f38:	ldrh	r3, [r8, r3]
   17f3c:	tst	r3, #8192	; 0x2000
   17f40:	beq	1811c <__assert_fail@plt+0x591c>
   17f44:	bics	r3, r0, #127	; 0x7f
   17f48:	mov	r6, r0
   17f4c:	bne	17f98 <__assert_fail@plt+0x5798>
   17f50:	ldr	r3, [sp, #24]
   17f54:	cmp	r3, #0
   17f58:	bne	18168 <__assert_fail@plt+0x5968>
   17f5c:	ldr	r0, [sp]
   17f60:	bl	127ac <getc@plt>
   17f64:	ldr	r8, [r7]
   17f68:	cmn	r0, #1
   17f6c:	cmpne	r0, #10
   17f70:	moveq	r3, #1
   17f74:	mov	r6, r0
   17f78:	streq	r3, [sp, #24]
   17f7c:	moveq	r6, #10
   17f80:	b	17e84 <__assert_fail@plt+0x5684>
   17f84:	mov	r3, r8
   17f88:	mov	r6, r0
   17f8c:	mov	r8, r2
   17f90:	mov	r9, r3
   17f94:	str	r4, [sp, #24]
   17f98:	ldr	r3, [sp, #4]
   17f9c:	ldr	r4, [r3, #52]	; 0x34
   17fa0:	add	r3, sp, #248	; 0xf8
   17fa4:	add	r2, r3, r9
   17fa8:	cmp	r4, #0
   17fac:	mov	r3, #0
   17fb0:	strb	r3, [r2, #-104]	; 0xffffff98
   17fb4:	beq	17fd8 <__assert_fail@plt+0x57d8>
   17fb8:	add	r1, sp, #144	; 0x90
   17fbc:	add	r0, r4, #4
   17fc0:	bl	12104 <strcmp@plt>
   17fc4:	cmp	r0, #0
   17fc8:	beq	17e84 <__assert_fail@plt+0x5684>
   17fcc:	ldr	r4, [r4]
   17fd0:	cmp	r4, #0
   17fd4:	bne	17fb8 <__assert_fail@plt+0x57b8>
   17fd8:	add	r0, r9, #8
   17fdc:	bl	120bc <gcry_malloc@plt>
   17fe0:	subs	r8, r0, #0
   17fe4:	beq	17d40 <__assert_fail@plt+0x5540>
   17fe8:	add	r0, r8, #4
   17fec:	add	r1, sp, #144	; 0x90
   17ff0:	bl	12344 <strcpy@plt>
   17ff4:	ldr	r2, [sp, #4]
   17ff8:	ldr	r3, [r2, #52]	; 0x34
   17ffc:	str	r8, [r2, #52]	; 0x34
   18000:	str	r3, [r8]
   18004:	ldr	r8, [r7]
   18008:	b	17e84 <__assert_fail@plt+0x5684>
   1800c:	cmp	r3, #0
   18010:	movne	r9, #0
   18014:	bne	17f98 <__assert_fail@plt+0x5798>
   18018:	mov	r2, r3
   1801c:	mov	r3, #1
   18020:	ldr	r4, [sp, #24]
   18024:	mov	r8, r3
   18028:	mov	r0, r6
   1802c:	b	17eb0 <__assert_fail@plt+0x56b0>
   18030:	mov	r3, #1
   18034:	mov	r6, r5
   18038:	mov	r8, r5
   1803c:	str	r3, [sp, #20]
   18040:	mov	r4, #3
   18044:	b	177e4 <__assert_fail@plt+0x4fe4>
   18048:	tst	r2, #8
   1804c:	beq	17cec <__assert_fail@plt+0x54ec>
   18050:	ldr	r3, [sp, #4]
   18054:	str	r1, [r3, #20]
   18058:	b	17b74 <__assert_fail@plt+0x5374>
   1805c:	ldr	r0, [sp, #12]
   18060:	bl	12218 <gcry_free@plt>
   18064:	ldr	r3, [sp, #4]
   18068:	ldr	r4, [r3, #16]
   1806c:	b	17b74 <__assert_fail@plt+0x5374>
   18070:	ldr	r5, [sp, #12]
   18074:	add	r4, r5, #1
   18078:	ldrb	r3, [r5, #1]
   1807c:	cmp	r3, #0
   18080:	beq	17d80 <__assert_fail@plt+0x5580>
   18084:	mov	r0, r4
   18088:	bl	124b8 <strlen@plt>
   1808c:	ldrb	r3, [r5, r0]
   18090:	cmp	r3, #34	; 0x22
   18094:	moveq	r3, #0
   18098:	ldreq	r2, [sp, #12]
   1809c:	strbeq	r3, [r2, r0]
   180a0:	b	17d80 <__assert_fail@plt+0x5580>
   180a4:	mov	r6, r0
   180a8:	mov	r2, #0
   180ac:	lsl	r3, r6, #1
   180b0:	str	r2, [sp, #24]
   180b4:	mov	r0, r6
   180b8:	b	17f34 <__assert_fail@plt+0x5734>
   180bc:	ldr	r3, [sp, #4]
   180c0:	ldr	r4, [r3, #52]	; 0x34
   180c4:	cmp	r4, #0
   180c8:	beq	180ec <__assert_fail@plt+0x58ec>
   180cc:	mov	r1, r8
   180d0:	add	r0, r4, #4
   180d4:	bl	12104 <strcmp@plt>
   180d8:	cmp	r0, #0
   180dc:	beq	17a08 <__assert_fail@plt+0x5208>
   180e0:	ldr	r4, [r4]
   180e4:	cmp	r4, #0
   180e8:	bne	180cc <__assert_fail@plt+0x58cc>
   180ec:	ldr	r2, [sp, #4]
   180f0:	tst	r6, #128	; 0x80
   180f4:	mvnne	r3, #6
   180f8:	mvneq	r3, #1
   180fc:	mov	r6, r5
   18100:	str	r3, [r2, #16]
   18104:	mov	r8, r5
   18108:	mvn	r4, #0
   1810c:	b	177e4 <__assert_fail@plt+0x4fe4>
   18110:	ldr	r0, [sp, #12]
   18114:	bl	12218 <gcry_free@plt>
   18118:	b	17d40 <__assert_fail@plt+0x5540>
   1811c:	ldr	r3, [sp, #24]
   18120:	cmp	r3, #0
   18124:	bne	18168 <__assert_fail@plt+0x5968>
   18128:	ldr	r0, [sp]
   1812c:	bl	127ac <getc@plt>
   18130:	mov	r3, #1
   18134:	str	r3, [sp, #24]
   18138:	mov	r3, #20
   1813c:	cmn	r0, #1
   18140:	cmpne	r0, #10
   18144:	bne	180a4 <__assert_fail@plt+0x58a4>
   18148:	mov	r0, #10
   1814c:	b	17f34 <__assert_fail@plt+0x5734>
   18150:	bl	12260 <__stack_chk_fail@plt>
   18154:	mov	r2, r8
   18158:	add	r8, r8, #1
   1815c:	b	17eb0 <__assert_fail@plt+0x56b0>
   18160:	lsl	r3, r0, #1
   18164:	b	17ee4 <__assert_fail@plt+0x56e4>
   18168:	ldr	r3, [fp]
   1816c:	ldr	r4, [sp, #28]
   18170:	add	r3, r3, #1
   18174:	mov	r6, r5
   18178:	str	r3, [fp]
   1817c:	mov	r8, #0
   18180:	b	177e4 <__assert_fail@plt+0x4fe4>
   18184:	andeq	r5, r3, r8, asr #22
   18188:	andeq	r2, r2, r8, ror pc
   1818c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   18190:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   18194:	push	{r4, r5, r6, lr}
   18198:	subs	r4, r0, #0
   1819c:	sub	sp, sp, #16
   181a0:	beq	181bc <__assert_fail@plt+0x59bc>
   181a4:	cmp	r4, #1
   181a8:	beq	18294 <__assert_fail@plt+0x5a94>
   181ac:	cmp	r4, #2
   181b0:	beq	18218 <__assert_fail@plt+0x5a18>
   181b4:	add	sp, sp, #16
   181b8:	pop	{r4, r5, r6, pc}
   181bc:	mov	r0, #11
   181c0:	bl	164e8 <__assert_fail@plt+0x3ce8>
   181c4:	mov	r5, r0
   181c8:	mov	r0, #13
   181cc:	bl	164e8 <__assert_fail@plt+0x3ce8>
   181d0:	mov	r6, r0
   181d4:	mov	r0, #14
   181d8:	bl	164e8 <__assert_fail@plt+0x3ce8>
   181dc:	ldr	ip, [pc, #240]	; 182d4 <__assert_fail@plt+0x5ad4>
   181e0:	ldr	r2, [pc, #240]	; 182d8 <__assert_fail@plt+0x5ad8>
   181e4:	mov	r3, r6
   181e8:	str	r2, [sp]
   181ec:	mov	r1, r5
   181f0:	str	r4, [sp, #12]
   181f4:	str	ip, [sp, #8]
   181f8:	ldr	r2, [pc, #220]	; 182dc <__assert_fail@plt+0x5adc>
   181fc:	str	r0, [sp, #4]
   18200:	mov	r0, #1
   18204:	bl	163b4 <__assert_fail@plt+0x3bb4>
   18208:	mov	r0, #1
   1820c:	add	sp, sp, #16
   18210:	pop	{r4, r5, r6, lr}
   18214:	b	16494 <__assert_fail@plt+0x3c94>
   18218:	mov	r0, #42	; 0x2a
   1821c:	bl	164e8 <__assert_fail@plt+0x3ce8>
   18220:	cmp	r0, #0
   18224:	beq	18234 <__assert_fail@plt+0x5a34>
   18228:	ldrb	r3, [r0]
   1822c:	cmp	r3, #49	; 0x31
   18230:	beq	18258 <__assert_fail@plt+0x5a58>
   18234:	mov	r0, #41	; 0x29
   18238:	bl	164e8 <__assert_fail@plt+0x3ce8>
   1823c:	mov	r3, #0
   18240:	ldr	r2, [pc, #140]	; 182d4 <__assert_fail@plt+0x5ad4>
   18244:	mov	r1, r0
   18248:	mov	r0, r3
   1824c:	bl	163b4 <__assert_fail@plt+0x3bb4>
   18250:	mov	r0, #0
   18254:	bl	1247c <exit@plt>
   18258:	mov	r0, #40	; 0x28
   1825c:	bl	164e8 <__assert_fail@plt+0x3ce8>
   18260:	mov	r2, #0
   18264:	mov	r4, r0
   18268:	mov	r1, r0
   1826c:	mov	r0, #1
   18270:	bl	163b4 <__assert_fail@plt+0x3bb4>
   18274:	ldrb	r3, [r4]
   18278:	cmp	r3, #0
   1827c:	beq	18234 <__assert_fail@plt+0x5a34>
   18280:	mov	r2, #0
   18284:	ldr	r1, [pc, #72]	; 182d4 <__assert_fail@plt+0x5ad4>
   18288:	mov	r0, #1
   1828c:	bl	163b4 <__assert_fail@plt+0x3bb4>
   18290:	b	18234 <__assert_fail@plt+0x5a34>
   18294:	mov	r0, #40	; 0x28
   18298:	bl	164e8 <__assert_fail@plt+0x3ce8>
   1829c:	mov	r2, #0
   182a0:	mov	r5, r0
   182a4:	mov	r1, r0
   182a8:	mov	r0, r4
   182ac:	bl	163b4 <__assert_fail@plt+0x3bb4>
   182b0:	ldrb	r3, [r5]
   182b4:	cmp	r3, #0
   182b8:	beq	182cc <__assert_fail@plt+0x5acc>
   182bc:	mov	r0, r4
   182c0:	mov	r2, #0
   182c4:	ldr	r1, [pc, #8]	; 182d4 <__assert_fail@plt+0x5ad4>
   182c8:	bl	163b4 <__assert_fail@plt+0x3bb4>
   182cc:	mov	r0, #2
   182d0:	bl	1247c <exit@plt>
   182d4:	andeq	r3, r2, r8, lsl pc
   182d8:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   182dc:	andeq	r2, r2, r4, lsr #14
   182e0:	ldr	r3, [pc, #4]	; 182ec <__assert_fail@plt+0x5aec>
   182e4:	str	r0, [r3, #4]
   182e8:	bx	lr
   182ec:	andeq	r6, r3, r8, ror #2
   182f0:	push	{r4, lr}
   182f4:	mov	r4, r0
   182f8:	ldr	r0, [r0]
   182fc:	cmp	r0, #2
   18300:	cmnne	r0, #1
   18304:	bne	18324 <__assert_fail@plt+0x5b24>
   18308:	mov	r0, r4
   1830c:	bl	12218 <gcry_free@plt>
   18310:	ldr	r3, [pc, #20]	; 1832c <__assert_fail@plt+0x5b2c>
   18314:	mvn	r2, #0
   18318:	mov	r0, #0
   1831c:	str	r2, [r3]
   18320:	pop	{r4, pc}
   18324:	bl	127c4 <close@plt>
   18328:	b	18308 <__assert_fail@plt+0x5b08>
   1832c:	andeq	r6, r3, r8, asr #2
   18330:	push	{r4, r5, r6, r7, r8, r9, lr}
   18334:	mov	r6, r0
   18338:	ldr	r7, [pc, #504]	; 18538 <__assert_fail@plt+0x5d38>
   1833c:	sub	sp, sp, #28
   18340:	mov	r4, r1
   18344:	ldr	r3, [r7]
   18348:	cmp	r3, #0
   1834c:	beq	18374 <__assert_fail@plt+0x5b74>
   18350:	mov	r0, #2
   18354:	bl	12458 <_gpgrt_get_std_stream@plt>
   18358:	ldr	r3, [r7]
   1835c:	cmp	r3, r0
   18360:	beq	1836c <__assert_fail@plt+0x5b6c>
   18364:	mov	r0, r3
   18368:	bl	12374 <gpgrt_fclose@plt>
   1836c:	mov	r3, #0
   18370:	str	r3, [r7]
   18374:	cmp	r6, #0
   18378:	beq	18500 <__assert_fail@plt+0x5d00>
   1837c:	ldr	r1, [pc, #440]	; 1853c <__assert_fail@plt+0x5d3c>
   18380:	mov	r0, r6
   18384:	bl	12104 <strcmp@plt>
   18388:	cmp	r0, #0
   1838c:	beq	184f0 <__assert_fail@plt+0x5cf0>
   18390:	mov	r2, #6
   18394:	ldr	r1, [pc, #420]	; 18540 <__assert_fail@plt+0x5d40>
   18398:	mov	r0, r6
   1839c:	bl	12794 <strncmp@plt>
   183a0:	mov	r4, r0
   183a4:	mov	r0, r6
   183a8:	bl	124b8 <strlen@plt>
   183ac:	cmp	r4, #0
   183b0:	add	r4, r0, #20
   183b4:	bne	18468 <__assert_fail@plt+0x5c68>
   183b8:	ldrb	r3, [r6, #6]
   183bc:	cmp	r3, #0
   183c0:	beq	18468 <__assert_fail@plt+0x5c68>
   183c4:	mov	r8, #1
   183c8:	mov	r0, r4
   183cc:	bl	12098 <gcry_xmalloc@plt>
   183d0:	mov	r1, r6
   183d4:	mvn	r4, #0
   183d8:	mov	r5, r0
   183dc:	add	r0, r0, #16
   183e0:	bl	12344 <strcpy@plt>
   183e4:	mov	r3, #0
   183e8:	str	r3, [r5, #12]
   183ec:	stmib	r5, {r3, r8}
   183f0:	str	r4, [r5]
   183f4:	ldr	r1, [pc, #328]	; 18544 <__assert_fail@plt+0x5d44>
   183f8:	mov	r2, #0
   183fc:	str	r1, [sp, #20]
   18400:	add	r1, sp, #24
   18404:	str	r2, [sp, #16]
   18408:	ldmdb	r1, {r0, r1}
   1840c:	ldr	ip, [pc, #308]	; 18548 <__assert_fail@plt+0x5d48>
   18410:	str	r2, [sp, #8]
   18414:	add	r3, sp, #8
   18418:	ldr	r2, [pc, #300]	; 1854c <__assert_fail@plt+0x5d4c>
   1841c:	stm	sp, {r0, r1}
   18420:	str	r2, [sp, #12]
   18424:	mov	r0, r5
   18428:	ldm	r3, {r2, r3}
   1842c:	ldr	r1, [pc, #284]	; 18550 <__assert_fail@plt+0x5d50>
   18430:	str	r4, [ip]
   18434:	bl	126a4 <gpgrt_fopencookie@plt>
   18438:	subs	r4, r0, #0
   1843c:	beq	18528 <__assert_fail@plt+0x5d28>
   18440:	mov	r3, #0
   18444:	mov	r1, r3
   18448:	mov	r2, #1
   1844c:	mov	r0, r4
   18450:	bl	12380 <gpgrt_setvbuf@plt>
   18454:	mov	r3, #0
   18458:	stm	r7, {r4, r8}
   1845c:	str	r3, [r7, #8]
   18460:	add	sp, sp, #28
   18464:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18468:	mov	r2, #9
   1846c:	ldr	r1, [pc, #224]	; 18554 <__assert_fail@plt+0x5d54>
   18470:	mov	r0, r6
   18474:	bl	12794 <strncmp@plt>
   18478:	cmp	r0, #0
   1847c:	moveq	r8, #2
   18480:	beq	183c8 <__assert_fail@plt+0x5bc8>
   18484:	mov	r0, r4
   18488:	bl	12098 <gcry_xmalloc@plt>
   1848c:	mov	r1, r6
   18490:	ldr	r9, [pc, #192]	; 18558 <__assert_fail@plt+0x5d58>
   18494:	ldr	r8, [pc, #192]	; 1855c <__assert_fail@plt+0x5d5c>
   18498:	mov	r5, r0
   1849c:	add	r0, r0, #16
   184a0:	bl	12344 <strcpy@plt>
   184a4:	mov	r3, #0
   184a8:	str	r3, [r5, #4]
   184ac:	str	r3, [r5, #12]
   184b0:	str	r3, [r5, #8]
   184b4:	b	184c8 <__assert_fail@plt+0x5cc8>
   184b8:	bl	12518 <__errno_location@plt>
   184bc:	ldr	r3, [r0]
   184c0:	cmp	r3, #4
   184c4:	bne	184e8 <__assert_fail@plt+0x5ce8>
   184c8:	mov	r2, r9
   184cc:	mov	r1, r8
   184d0:	mov	r0, r6
   184d4:	bl	12398 <open64@plt>
   184d8:	cmn	r0, #1
   184dc:	mov	r4, r0
   184e0:	str	r0, [r5]
   184e4:	beq	184b8 <__assert_fail@plt+0x5cb8>
   184e8:	mov	r8, #0
   184ec:	b	183f4 <__assert_fail@plt+0x5bf4>
   184f0:	mov	r0, #2
   184f4:	bl	12458 <_gpgrt_get_std_stream@plt>
   184f8:	bl	127b8 <gpgrt_fileno@plt>
   184fc:	mov	r4, r0
   18500:	mov	r0, #20
   18504:	bl	12098 <gcry_xmalloc@plt>
   18508:	mov	r8, #0
   1850c:	mov	r5, r0
   18510:	str	r4, [r0]
   18514:	strb	r8, [r0, #16]
   18518:	str	r8, [r0, #4]
   1851c:	str	r8, [r0, #12]
   18520:	str	r8, [r0, #8]
   18524:	b	183f4 <__assert_fail@plt+0x5bf4>
   18528:	mov	r0, #2
   1852c:	bl	12458 <_gpgrt_get_std_stream@plt>
   18530:	mov	r4, r0
   18534:	b	18440 <__assert_fail@plt+0x5c40>
   18538:	andeq	r6, r3, r0, ror r1
   1853c:	andeq	r2, r2, r0, lsr r6
   18540:			; <UNDEFINED> instruction: 0x00022fb8
   18544:	strdeq	r8, [r1], -r0
   18548:	andeq	r6, r3, r8, asr #2
   1854c:	andeq	r8, r1, ip, asr ip
   18550:	andeq	r2, r2, r0, asr #31
   18554:	andeq	r2, r2, r4, asr #31
   18558:			; <UNDEFINED> instruction: 0x000001b6
   1855c:	andeq	r0, r0, r1, asr #8
   18560:	push	{r4, r5, r6, r7, r8, r9, lr}
   18564:	sub	sp, sp, #28
   18568:	ldr	r6, [pc, #688]	; 18820 <__assert_fail@plt+0x6020>
   1856c:	cmp	r0, #1
   18570:	ldr	r3, [r6]
   18574:	str	r3, [sp, #20]
   18578:	beq	18650 <__assert_fail@plt+0x5e50>
   1857c:	ldr	r4, [pc, #672]	; 18824 <__assert_fail@plt+0x6024>
   18580:	mov	r5, r0
   18584:	mov	r7, r1
   18588:	ldr	r3, [r4, #12]
   1858c:	ldr	r0, [r4, #4]
   18590:	cmp	r3, #0
   18594:	bne	18668 <__assert_fail@plt+0x5e68>
   18598:	ldr	r3, [r4, #16]
   1859c:	orrs	r0, r0, r3
   185a0:	bne	18800 <__assert_fail@plt+0x6000>
   185a4:	ldr	r3, [r4, #100]	; 0x64
   185a8:	orrs	r3, r0, r3
   185ac:	bne	18690 <__assert_fail@plt+0x5e90>
   185b0:	ldr	r3, [r4, #12]
   185b4:	cmp	r3, #0
   185b8:	beq	186e8 <__assert_fail@plt+0x5ee8>
   185bc:	cmp	r7, #0
   185c0:	bne	18618 <__assert_fail@plt+0x5e18>
   185c4:	ldr	r2, [r4, #16]
   185c8:	ldr	r3, [r4, #12]
   185cc:	ldr	r1, [r4, #100]	; 0x64
   185d0:	orr	r3, r3, r2
   185d4:	ldr	r2, [r4, #4]
   185d8:	orr	r3, r3, r1
   185dc:	orrs	r3, r3, r2
   185e0:	beq	18618 <__assert_fail@plt+0x5e18>
   185e4:	ldr	r1, [r4]
   185e8:	ldrb	r3, [r1, #2]
   185ec:	tst	r3, #1
   185f0:	beq	1874c <__assert_fail@plt+0x5f4c>
   185f4:	ldr	r3, [r1, #16]
   185f8:	ldr	r2, [r1, #8]
   185fc:	cmp	r3, r2
   18600:	bcs	1874c <__assert_fail@plt+0x5f4c>
   18604:	ldr	r2, [r1, #4]
   18608:	add	r0, r3, #1
   1860c:	str	r0, [r1, #16]
   18610:	mov	r1, #32
   18614:	strb	r1, [r2, r3]
   18618:	cmp	r5, #7
   1861c:	ldrls	pc, [pc, r5, lsl #2]
   18620:	b	1880c <__assert_fail@plt+0x600c>
   18624:	andeq	r8, r1, r0, asr r6
   18628:	andeq	r8, r1, r0, asr r6
   1862c:	andeq	r8, r1, r0, asr r6
   18630:	andeq	r8, r1, r0, asr r6
   18634:	andeq	r8, r1, r0, asr r6
   18638:	andeq	r8, r1, ip, lsr #14
   1863c:	andeq	r8, r1, ip, lsr r7
   18640:	andeq	r8, r1, r4, asr #12
   18644:	ldr	r1, [r4]
   18648:	ldr	r0, [pc, #472]	; 18828 <__assert_fail@plt+0x6028>
   1864c:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18650:	ldr	r2, [sp, #20]
   18654:	ldr	r3, [r6]
   18658:	cmp	r2, r3
   1865c:	bne	18808 <__assert_fail@plt+0x6008>
   18660:	add	sp, sp, #28
   18664:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18668:	cmp	r0, #0
   1866c:	ldr	r8, [r4]
   18670:	beq	1879c <__assert_fail@plt+0x5f9c>
   18674:	mov	r1, r8
   18678:	ldr	r0, [pc, #428]	; 1882c <__assert_fail@plt+0x602c>
   1867c:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18680:	ldr	r0, [r4, #4]
   18684:	ldr	r3, [r4, #100]	; 0x64
   18688:	orrs	r3, r0, r3
   1868c:	beq	185b0 <__assert_fail@plt+0x5db0>
   18690:	ldr	r3, [r4, #104]	; 0x68
   18694:	cmp	r3, #0
   18698:	beq	18780 <__assert_fail@plt+0x5f80>
   1869c:	add	r0, sp, #16
   186a0:	blx	r3
   186a4:	cmp	r0, #0
   186a8:	beq	18780 <__assert_fail@plt+0x5f80>
   186ac:	ldr	r1, [pc, #380]	; 18830 <__assert_fail@plt+0x6030>
   186b0:	cmp	r0, #1
   186b4:	ldr	r8, [pc, #376]	; 18834 <__assert_fail@plt+0x6034>
   186b8:	ldr	r9, [r4]
   186bc:	movne	r8, r1
   186c0:	bl	12470 <getpid@plt>
   186c4:	mov	r1, r8
   186c8:	ldr	r3, [sp, #16]
   186cc:	mov	r2, r0
   186d0:	mov	r0, r9
   186d4:	bl	12488 <gpgrt_fprintf_unlocked@plt>
   186d8:	ldr	r3, [r4, #12]
   186dc:	cmp	r3, #0
   186e0:	bne	18758 <__assert_fail@plt+0x5f58>
   186e4:	ldr	r3, [r4, #100]	; 0x64
   186e8:	ldr	r2, [r4, #16]
   186ec:	orrs	r3, r3, r2
   186f0:	beq	18758 <__assert_fail@plt+0x5f58>
   186f4:	ldr	r1, [r4]
   186f8:	ldrb	r3, [r1, #2]
   186fc:	tst	r3, #1
   18700:	beq	18774 <__assert_fail@plt+0x5f74>
   18704:	ldr	r3, [r1, #16]
   18708:	ldr	r2, [r1, #8]
   1870c:	cmp	r3, r2
   18710:	bcs	18774 <__assert_fail@plt+0x5f74>
   18714:	ldr	r2, [r1, #4]
   18718:	add	r0, r3, #1
   1871c:	str	r0, [r1, #16]
   18720:	mov	r1, #58	; 0x3a
   18724:	strb	r1, [r2, r3]
   18728:	b	185bc <__assert_fail@plt+0x5dbc>
   1872c:	ldr	r1, [r4]
   18730:	ldr	r0, [pc, #256]	; 18838 <__assert_fail@plt+0x6038>
   18734:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18738:	b	18650 <__assert_fail@plt+0x5e50>
   1873c:	ldr	r1, [r4]
   18740:	ldr	r0, [pc, #244]	; 1883c <__assert_fail@plt+0x603c>
   18744:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18748:	b	18650 <__assert_fail@plt+0x5e50>
   1874c:	mov	r0, #32
   18750:	bl	121a0 <_gpgrt_putc_overflow@plt>
   18754:	b	18618 <__assert_fail@plt+0x5e18>
   18758:	ldr	r3, [r4, #4]
   1875c:	cmp	r3, #0
   18760:	beq	185bc <__assert_fail@plt+0x5dbc>
   18764:	ldr	r1, [r4]
   18768:	ldrb	r3, [r1, #2]
   1876c:	tst	r3, #1
   18770:	bne	18704 <__assert_fail@plt+0x5f04>
   18774:	mov	r0, #58	; 0x3a
   18778:	bl	121a0 <_gpgrt_putc_overflow@plt>
   1877c:	b	185bc <__assert_fail@plt+0x5dbc>
   18780:	ldr	r8, [r4]
   18784:	bl	12470 <getpid@plt>
   18788:	ldr	r1, [pc, #176]	; 18840 <__assert_fail@plt+0x6040>
   1878c:	mov	r2, r0
   18790:	mov	r0, r8
   18794:	bl	12488 <gpgrt_fprintf_unlocked@plt>
   18798:	b	186d8 <__assert_fail@plt+0x5ed8>
   1879c:	bl	12200 <time@plt>
   187a0:	str	r0, [sp, #16]
   187a4:	add	r0, sp, #16
   187a8:	bl	123f8 <localtime@plt>
   187ac:	mov	r1, r0
   187b0:	mov	r0, r8
   187b4:	ldr	ip, [r1]
   187b8:	ldr	r3, [r1, #16]
   187bc:	ldr	r2, [r1, #20]
   187c0:	str	ip, [sp, #12]
   187c4:	ldr	ip, [r1, #4]
   187c8:	add	r2, r2, #1888	; 0x760
   187cc:	str	ip, [sp, #8]
   187d0:	ldr	ip, [r1, #8]
   187d4:	add	r3, r3, #1
   187d8:	str	ip, [sp, #4]
   187dc:	ldr	r1, [r1, #12]
   187e0:	add	r2, r2, #12
   187e4:	str	r1, [sp]
   187e8:	ldr	r1, [pc, #84]	; 18844 <__assert_fail@plt+0x6044>
   187ec:	bl	12488 <gpgrt_fprintf_unlocked@plt>
   187f0:	ldr	r0, [r4, #4]
   187f4:	ldr	r3, [r4, #16]
   187f8:	orrs	r0, r0, r3
   187fc:	beq	185a4 <__assert_fail@plt+0x5da4>
   18800:	ldr	r8, [r4]
   18804:	b	18674 <__assert_fail@plt+0x5e74>
   18808:	bl	12260 <__stack_chk_fail@plt>
   1880c:	mov	r2, r5
   18810:	ldr	r0, [r4]
   18814:	ldr	r1, [pc, #44]	; 18848 <__assert_fail@plt+0x6048>
   18818:	bl	12488 <gpgrt_fprintf_unlocked@plt>
   1881c:	b	18650 <__assert_fail@plt+0x5e50>
   18820:	andeq	r5, r3, r8, asr #22
   18824:	andeq	r6, r3, r0, ror r1
   18828:	andeq	r3, r2, r8, lsr #32
   1882c:	andeq	r6, r3, r4, lsl #3
   18830:	ldrdeq	r2, [r2], -ip
   18834:	ldrdeq	r2, [r2], -r0
   18838:	andeq	r3, r2, r0, lsl r0
   1883c:	andeq	r3, r2, r8, lsl r0
   18840:	andeq	r3, r2, r8
   18844:	andeq	r2, r2, r8, ror #31
   18848:	andeq	r3, r2, r0, lsr r0
   1884c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18850:	sub	sp, sp, #20
   18854:	mov	r5, r3
   18858:	ldr	r8, [sp, #56]	; 0x38
   1885c:	ldr	r4, [pc, #868]	; 18bc8 <__assert_fail@plt+0x63c8>
   18860:	cmp	r8, #0
   18864:	mov	sl, r0
   18868:	ldrbne	r3, [r8]
   1886c:	ldr	r0, [r4]
   18870:	streq	r8, [sp, #12]
   18874:	subne	r3, r3, #8
   18878:	clzne	r3, r3
   1887c:	lsrne	r3, r3, #5
   18880:	strne	r3, [sp, #12]
   18884:	cmp	r0, #0
   18888:	mov	r7, r1
   1888c:	mov	r6, r2
   18890:	ldr	fp, [sp, #60]	; 0x3c
   18894:	beq	18b28 <__assert_fail@plt+0x6328>
   18898:	bl	12368 <gpgrt_flockfile@plt>
   1889c:	ldr	r3, [r4, #8]
   188a0:	cmp	r3, #0
   188a4:	cmpne	sl, #1
   188a8:	bne	18b54 <__assert_fail@plt+0x6354>
   188ac:	ldr	r9, [sp, #12]
   188b0:	mov	r3, #0
   188b4:	mov	r1, r9
   188b8:	mov	r0, sl
   188bc:	str	r3, [r4, #8]
   188c0:	bl	18560 <__assert_fail@plt+0x5d60>
   188c4:	cmp	r9, #0
   188c8:	addne	r8, r8, #1
   188cc:	cmp	r8, #0
   188d0:	beq	18a78 <__assert_fail@plt+0x6278>
   188d4:	cmp	r5, #0
   188d8:	ldr	r9, [r4]
   188dc:	beq	188f0 <__assert_fail@plt+0x60f0>
   188e0:	mov	r1, r9
   188e4:	mov	r0, r5
   188e8:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   188ec:	ldr	r9, [r4]
   188f0:	cmp	r7, #0
   188f4:	beq	18b14 <__assert_fail@plt+0x6314>
   188f8:	ldr	fp, [pc, #716]	; 18bcc <__assert_fail@plt+0x63cc>
   188fc:	mov	r5, r8
   18900:	b	18950 <__assert_fail@plt+0x6150>
   18904:	cmp	r8, r5
   18908:	moveq	r2, #0
   1890c:	beq	1892c <__assert_fail@plt+0x612c>
   18910:	ldr	r2, [r4, #16]
   18914:	ldr	r0, [r4, #4]
   18918:	orrs	r2, r2, r0
   1891c:	beq	1892c <__assert_fail@plt+0x612c>
   18920:	ldr	r0, [pc, #680]	; 18bd0 <__assert_fail@plt+0x63d0>
   18924:	bl	124b8 <strlen@plt>
   18928:	add	r2, r0, #2
   1892c:	sub	r3, r7, r5
   18930:	add	r3, r3, #1
   18934:	mov	r0, r9
   18938:	stm	sp, {r3, r5}
   1893c:	ldr	r1, [pc, #656]	; 18bd4 <__assert_fail@plt+0x63d4>
   18940:	mov	r3, fp
   18944:	bl	12488 <gpgrt_fprintf_unlocked@plt>
   18948:	ldr	r9, [r4]
   1894c:	add	r5, r7, #1
   18950:	mov	r1, #10
   18954:	mov	r0, r5
   18958:	bl	124d0 <strchr@plt>
   1895c:	subs	r7, r0, #0
   18960:	bne	18904 <__assert_fail@plt+0x6104>
   18964:	mov	r1, r9
   18968:	mov	r0, r5
   1896c:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18970:	ldrb	r3, [r8]
   18974:	cmp	r3, #0
   18978:	beq	18a78 <__assert_fail@plt+0x6278>
   1897c:	mov	r0, r8
   18980:	bl	124b8 <strlen@plt>
   18984:	add	r0, r8, r0
   18988:	ldrb	r3, [r0, #-1]
   1898c:	cmp	r3, #10
   18990:	beq	18a78 <__assert_fail@plt+0x6278>
   18994:	mov	r3, #1
   18998:	cmp	r6, #0
   1899c:	str	r3, [r4, #8]
   189a0:	beq	18b94 <__assert_fail@plt+0x6394>
   189a4:	ldr	r1, [r4]
   189a8:	mov	r0, #10
   189ac:	bl	121a0 <_gpgrt_putc_overflow@plt>
   189b0:	mov	r3, #0
   189b4:	str	r3, [r4, #8]
   189b8:	ldr	r1, [sp, #12]
   189bc:	mov	r0, sl
   189c0:	bl	18560 <__assert_fail@plt+0x5d60>
   189c4:	ldr	r1, [r4]
   189c8:	ldr	r0, [pc, #520]	; 18bd8 <__assert_fail@plt+0x63d8>
   189cc:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   189d0:	ldr	r9, [pc, #516]	; 18bdc <__assert_fail@plt+0x63dc>
   189d4:	ldr	r1, [r4]
   189d8:	ldr	fp, [pc, #504]	; 18bd8 <__assert_fail@plt+0x63d8>
   189dc:	ldr	r8, [pc, #508]	; 18be0 <__assert_fail@plt+0x63e0>
   189e0:	ldr	r7, [pc, #508]	; 18be4 <__assert_fail@plt+0x63e4>
   189e4:	mov	r5, #1
   189e8:	str	r5, [r4, #8]
   189ec:	ldrb	r0, [r6], #1
   189f0:	cmp	r0, #0
   189f4:	beq	18a4c <__assert_fail@plt+0x624c>
   189f8:	cmp	r0, #92	; 0x5c
   189fc:	str	r5, [r4, #8]
   18a00:	beq	18a9c <__assert_fail@plt+0x629c>
   18a04:	cmp	r0, #13
   18a08:	beq	18aac <__assert_fail@plt+0x62ac>
   18a0c:	cmp	r0, #10
   18a10:	beq	18abc <__assert_fail@plt+0x62bc>
   18a14:	ldrb	r3, [r1, #2]
   18a18:	tst	r3, #1
   18a1c:	beq	18a90 <__assert_fail@plt+0x6290>
   18a20:	ldr	r3, [r1, #16]
   18a24:	ldr	r2, [r1, #8]
   18a28:	cmp	r3, r2
   18a2c:	bcs	18a90 <__assert_fail@plt+0x6290>
   18a30:	ldr	r2, [r1, #4]
   18a34:	add	ip, r3, #1
   18a38:	str	ip, [r1, #16]
   18a3c:	strb	r0, [r2, r3]
   18a40:	ldrb	r0, [r6], #1
   18a44:	cmp	r0, #0
   18a48:	bne	189f8 <__assert_fail@plt+0x61f8>
   18a4c:	ldr	r2, [r4, #8]
   18a50:	cmp	r2, #0
   18a54:	bne	18af8 <__assert_fail@plt+0x62f8>
   18a58:	cmp	sl, #5
   18a5c:	beq	18b84 <__assert_fail@plt+0x6384>
   18a60:	cmp	sl, #6
   18a64:	beq	18ba4 <__assert_fail@plt+0x63a4>
   18a68:	mov	r0, r1
   18a6c:	add	sp, sp, #20
   18a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a74:	b	120b0 <gpgrt_funlockfile@plt>
   18a78:	cmp	r6, #0
   18a7c:	beq	18b64 <__assert_fail@plt+0x6364>
   18a80:	ldr	r3, [r4, #8]
   18a84:	cmp	r3, #0
   18a88:	beq	189b8 <__assert_fail@plt+0x61b8>
   18a8c:	b	189a4 <__assert_fail@plt+0x61a4>
   18a90:	bl	121a0 <_gpgrt_putc_overflow@plt>
   18a94:	ldr	r1, [r4]
   18a98:	b	189ec <__assert_fail@plt+0x61ec>
   18a9c:	mov	r0, r7
   18aa0:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18aa4:	ldr	r1, [r4]
   18aa8:	b	189ec <__assert_fail@plt+0x61ec>
   18aac:	mov	r0, r8
   18ab0:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18ab4:	ldr	r1, [r4]
   18ab8:	b	189ec <__assert_fail@plt+0x61ec>
   18abc:	mov	r0, r9
   18ac0:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18ac4:	ldrb	r3, [r6]
   18ac8:	cmp	r3, #0
   18acc:	streq	r3, [r4, #8]
   18ad0:	ldreq	r1, [r4]
   18ad4:	beq	189ec <__assert_fail@plt+0x61ec>
   18ad8:	ldr	r1, [sp, #12]
   18adc:	mov	r0, sl
   18ae0:	bl	18560 <__assert_fail@plt+0x5d60>
   18ae4:	ldr	r1, [r4]
   18ae8:	mov	r0, fp
   18aec:	bl	122e4 <gpgrt_fputs_unlocked@plt>
   18af0:	ldr	r1, [r4]
   18af4:	b	189ec <__assert_fail@plt+0x61ec>
   18af8:	str	r0, [sp, #12]
   18afc:	mov	r0, #10
   18b00:	bl	121a0 <_gpgrt_putc_overflow@plt>
   18b04:	ldr	r3, [sp, #12]
   18b08:	ldr	r1, [r4]
   18b0c:	str	r3, [r4, #8]
   18b10:	b	18a58 <__assert_fail@plt+0x6258>
   18b14:	mov	r2, fp
   18b18:	mov	r0, r9
   18b1c:	mov	r1, r8
   18b20:	bl	12110 <gpgrt_vfprintf_unlocked@plt>
   18b24:	b	18970 <__assert_fail@plt+0x6170>
   18b28:	ldr	r0, [pc, #184]	; 18be8 <__assert_fail@plt+0x63e8>
   18b2c:	mvn	r1, #0
   18b30:	bl	18330 <__assert_fail@plt+0x5b30>
   18b34:	ldr	r0, [r4]
   18b38:	cmp	r0, #0
   18b3c:	bne	18898 <__assert_fail@plt+0x6098>
   18b40:	ldr	r3, [pc, #164]	; 18bec <__assert_fail@plt+0x63ec>
   18b44:	ldr	r2, [pc, #164]	; 18bf0 <__assert_fail@plt+0x63f0>
   18b48:	ldr	r1, [pc, #164]	; 18bf4 <__assert_fail@plt+0x63f4>
   18b4c:	ldr	r0, [pc, #164]	; 18bf8 <__assert_fail@plt+0x63f8>
   18b50:	bl	12800 <__assert_fail@plt>
   18b54:	ldr	r1, [r4]
   18b58:	mov	r0, #10
   18b5c:	bl	121a0 <_gpgrt_putc_overflow@plt>
   18b60:	b	188ac <__assert_fail@plt+0x60ac>
   18b64:	cmp	sl, #5
   18b68:	ldr	r1, [r4]
   18b6c:	bne	18a60 <__assert_fail@plt+0x6260>
   18b70:	ldr	r3, [r4, #8]
   18b74:	cmp	r3, #0
   18b78:	beq	18b84 <__assert_fail@plt+0x6384>
   18b7c:	mov	r0, #10
   18b80:	bl	121a0 <_gpgrt_putc_overflow@plt>
   18b84:	ldr	r0, [r4]
   18b88:	bl	120b0 <gpgrt_funlockfile@plt>
   18b8c:	mov	r0, #2
   18b90:	bl	1247c <exit@plt>
   18b94:	cmp	sl, #5
   18b98:	ldr	r1, [r4]
   18b9c:	bne	18a60 <__assert_fail@plt+0x6260>
   18ba0:	b	18b7c <__assert_fail@plt+0x637c>
   18ba4:	ldr	r3, [r4, #8]
   18ba8:	cmp	r3, #0
   18bac:	bne	18bbc <__assert_fail@plt+0x63bc>
   18bb0:	ldr	r0, [r4]
   18bb4:	bl	120b0 <gpgrt_funlockfile@plt>
   18bb8:	bl	127a0 <abort@plt>
   18bbc:	mov	r0, #10
   18bc0:	bl	121a0 <_gpgrt_putc_overflow@plt>
   18bc4:	b	18bb0 <__assert_fail@plt+0x63b0>
   18bc8:	andeq	r6, r3, r0, ror r1
   18bcc:	andeq	r2, r2, ip, lsl #18
   18bd0:	andeq	r6, r3, r4, lsl #3
   18bd4:	andeq	r3, r2, r0, ror r0
   18bd8:	andeq	r3, r2, r8, ror r0
   18bdc:	andeq	r3, r2, r4, lsl #1
   18be0:	andeq	r3, r2, r0, lsl #1
   18be4:	andeq	r3, r2, ip, ror r0
   18be8:	andeq	r2, r2, r0, lsr r6
   18bec:	andeq	r2, r2, r0, lsr #31
   18bf0:	strdeq	r0, [r0], -r1
   18bf4:	andeq	r3, r2, ip, asr #32
   18bf8:	andeq	r3, r2, r4, rrx
   18bfc:	push	{r1, r2, r3}
   18c00:	mov	r3, #0
   18c04:	push	{r4, lr}
   18c08:	sub	sp, sp, #20
   18c0c:	ldr	r4, [pc, #68]	; 18c58 <__assert_fail@plt+0x6458>
   18c10:	ldr	r2, [sp, #28]
   18c14:	add	ip, sp, #32
   18c18:	ldr	r1, [r4]
   18c1c:	stm	sp, {r2, ip}
   18c20:	str	r1, [sp, #12]
   18c24:	mov	r2, r3
   18c28:	mov	r1, #1
   18c2c:	str	ip, [sp, #8]
   18c30:	bl	1884c <__assert_fail@plt+0x604c>
   18c34:	ldr	r2, [sp, #12]
   18c38:	ldr	r3, [r4]
   18c3c:	cmp	r2, r3
   18c40:	bne	18c54 <__assert_fail@plt+0x6454>
   18c44:	add	sp, sp, #20
   18c48:	pop	{r4, lr}
   18c4c:	add	sp, sp, #12
   18c50:	bx	lr
   18c54:	bl	12260 <__stack_chk_fail@plt>
   18c58:	andeq	r5, r3, r8, asr #22
   18c5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c60:	mov	r4, r0
   18c64:	ldr	r8, [pc, #1564]	; 19288 <__assert_fail@plt+0x6a88>
   18c68:	ldr	r0, [r0, #8]
   18c6c:	sub	sp, sp, #180	; 0xb4
   18c70:	ldr	r3, [r8]
   18c74:	cmp	r0, #0
   18c78:	mov	r7, r1
   18c7c:	mov	r9, r2
   18c80:	str	r3, [sp, #172]	; 0xac
   18c84:	ldr	r6, [r4]
   18c88:	beq	18e44 <__assert_fail@plt+0x6644>
   18c8c:	cmn	r6, #1
   18c90:	beq	18d94 <__assert_fail@plt+0x6594>
   18c94:	ldr	sl, [pc, #1520]	; 1928c <__assert_fail@plt+0x6a8c>
   18c98:	str	r6, [sl]
   18c9c:	cmp	r9, #0
   18ca0:	beq	18d78 <__assert_fail@plt+0x6578>
   18ca4:	mov	r5, r9
   18ca8:	b	18cb8 <__assert_fail@plt+0x64b8>
   18cac:	subs	r5, r5, r0
   18cb0:	add	r7, r7, r0
   18cb4:	beq	18d78 <__assert_fail@plt+0x6578>
   18cb8:	mov	r2, r5
   18cbc:	mov	r1, r7
   18cc0:	mov	r0, r6
   18cc4:	bl	125a8 <write@plt>
   18cc8:	cmp	r0, #0
   18ccc:	bge	18cac <__assert_fail@plt+0x64ac>
   18cd0:	bl	12518 <__errno_location@plt>
   18cd4:	ldr	r3, [r0]
   18cd8:	cmp	r3, #4
   18cdc:	beq	18cb8 <__assert_fail@plt+0x64b8>
   18ce0:	ldr	r5, [pc, #1448]	; 19290 <__assert_fail@plt+0x6a90>
   18ce4:	ldr	r3, [r5, #112]	; 0x70
   18ce8:	cmp	r3, #0
   18cec:	bne	18d50 <__assert_fail@plt+0x6550>
   18cf0:	ldr	r3, [r4]
   18cf4:	cmn	r3, #1
   18cf8:	beq	18d78 <__assert_fail@plt+0x6578>
   18cfc:	mov	r0, #2
   18d00:	bl	12458 <_gpgrt_get_std_stream@plt>
   18d04:	bl	127b8 <gpgrt_fileno@plt>
   18d08:	bl	12770 <isatty@plt>
   18d0c:	cmp	r0, #0
   18d10:	beq	18d50 <__assert_fail@plt+0x6550>
   18d14:	bl	12518 <__errno_location@plt>
   18d18:	ldrb	r3, [r4, #16]
   18d1c:	cmp	r3, #0
   18d20:	mov	r5, r0
   18d24:	mov	r0, #2
   18d28:	beq	18f54 <__assert_fail@plt+0x6754>
   18d2c:	bl	12458 <_gpgrt_get_std_stream@plt>
   18d30:	mov	r6, r0
   18d34:	ldr	r0, [r5]
   18d38:	bl	123ec <strerror@plt>
   18d3c:	add	r2, r4, #16
   18d40:	ldr	r1, [pc, #1356]	; 19294 <__assert_fail@plt+0x6a94>
   18d44:	mov	r3, r0
   18d48:	mov	r0, r6
   18d4c:	bl	1271c <gpgrt_fprintf@plt>
   18d50:	ldr	r3, [r4, #12]
   18d54:	cmp	r3, #0
   18d58:	beq	18d78 <__assert_fail@plt+0x6578>
   18d5c:	ldr	r0, [r4]
   18d60:	cmn	r0, #1
   18d64:	beq	18d78 <__assert_fail@plt+0x6578>
   18d68:	bl	127c4 <close@plt>
   18d6c:	mvn	r3, #0
   18d70:	str	r3, [r4]
   18d74:	str	r3, [sl]
   18d78:	ldr	r2, [sp, #172]	; 0xac
   18d7c:	ldr	r3, [r8]
   18d80:	mov	r0, r9
   18d84:	cmp	r2, r3
   18d88:	bne	19268 <__assert_fail@plt+0x6a68>
   18d8c:	add	sp, sp, #180	; 0xb4
   18d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d94:	mov	r3, #0
   18d98:	add	r6, r4, #16
   18d9c:	mov	r0, r6
   18da0:	str	r3, [r4, #12]
   18da4:	mov	r2, #6
   18da8:	ldr	r1, [pc, #1256]	; 19298 <__assert_fail@plt+0x6a98>
   18dac:	bl	12794 <strncmp@plt>
   18db0:	cmp	r0, #0
   18db4:	bne	18dc4 <__assert_fail@plt+0x65c4>
   18db8:	ldrb	r3, [r4, #22]
   18dbc:	cmp	r3, #0
   18dc0:	bne	18e58 <__assert_fail@plt+0x6658>
   18dc4:	mov	r2, #9
   18dc8:	ldr	r1, [pc, #1228]	; 1929c <__assert_fail@plt+0x6a9c>
   18dcc:	mov	r0, r6
   18dd0:	bl	12794 <strncmp@plt>
   18dd4:	mov	sl, #1
   18dd8:	strh	sl, [sp, #60]	; 0x3c
   18ddc:	cmp	r0, #0
   18de0:	addeq	r5, r4, #25
   18de4:	movne	r5, r6
   18de8:	ldrb	fp, [r5]
   18dec:	cmp	fp, #0
   18df0:	beq	19070 <__assert_fail@plt+0x6870>
   18df4:	mov	r0, r5
   18df8:	bl	124b8 <strlen@plt>
   18dfc:	cmp	r0, #106	; 0x6a
   18e00:	bls	18fc0 <__assert_fail@plt+0x67c0>
   18e04:	ldr	r5, [pc, #1156]	; 19290 <__assert_fail@plt+0x6a90>
   18e08:	mvn	r3, #0
   18e0c:	str	r3, [r4]
   18e10:	ldr	r3, [r4, #4]
   18e14:	ldr	r2, [r5, #112]	; 0x70
   18e18:	cmp	r3, #0
   18e1c:	bne	1911c <__assert_fail@plt+0x691c>
   18e20:	cmp	r2, #0
   18e24:	beq	1912c <__assert_fail@plt+0x692c>
   18e28:	ldr	r6, [r4]
   18e2c:	cmn	r6, #1
   18e30:	beq	19170 <__assert_fail@plt+0x6970>
   18e34:	mov	r2, #0
   18e38:	mov	r3, #1
   18e3c:	str	r2, [r4, #4]
   18e40:	str	r3, [r4, #12]
   18e44:	ldr	sl, [pc, #1088]	; 1928c <__assert_fail@plt+0x6a8c>
   18e48:	cmn	r6, #1
   18e4c:	str	r6, [sl]
   18e50:	beq	18ce0 <__assert_fail@plt+0x64e0>
   18e54:	b	18c9c <__assert_fail@plt+0x649c>
   18e58:	add	r5, r4, #22
   18e5c:	mov	r0, r5
   18e60:	bl	124b8 <strlen@plt>
   18e64:	add	r0, r0, #1
   18e68:	bl	120bc <gcry_malloc@plt>
   18e6c:	subs	sl, r0, #0
   18e70:	beq	19110 <__assert_fail@plt+0x6910>
   18e74:	ldrb	r3, [r4, #22]
   18e78:	cmp	r3, #91	; 0x5b
   18e7c:	beq	18f80 <__assert_fail@plt+0x6780>
   18e80:	mov	r1, r5
   18e84:	bl	12344 <strcpy@plt>
   18e88:	mov	r1, #58	; 0x3a
   18e8c:	mov	r0, sl
   18e90:	bl	124d0 <strchr@plt>
   18e94:	cmp	r0, #0
   18e98:	beq	18fa8 <__assert_fail@plt+0x67a8>
   18e9c:	ldrb	r3, [r0, #1]
   18ea0:	add	ip, r0, #1
   18ea4:	sub	r3, r3, #48	; 0x30
   18ea8:	uxtb	r2, r3
   18eac:	cmp	r2, #9
   18eb0:	bhi	18fa8 <__assert_fail@plt+0x67a8>
   18eb4:	ldr	r5, [pc, #996]	; 192a0 <__assert_fail@plt+0x6aa0>
   18eb8:	b	18ecc <__assert_fail@plt+0x66cc>
   18ebc:	add	r3, r3, r3, lsl #2
   18ec0:	add	r3, r2, r3, lsl #1
   18ec4:	cmp	r3, r5
   18ec8:	bhi	18fa8 <__assert_fail@plt+0x67a8>
   18ecc:	ldrb	r1, [ip, #1]!
   18ed0:	sub	r2, r1, #48	; 0x30
   18ed4:	uxtb	lr, r2
   18ed8:	cmp	lr, #9
   18edc:	bls	18ebc <__assert_fail@plt+0x66bc>
   18ee0:	adds	r2, r1, #0
   18ee4:	movne	r2, #1
   18ee8:	cmp	r3, #0
   18eec:	moveq	r2, #1
   18ef0:	cmp	r2, #0
   18ef4:	bne	18fa8 <__assert_fail@plt+0x67a8>
   18ef8:	rev16	r3, r3
   18efc:	mov	r1, #2
   18f00:	strh	r3, [sp, #18]
   18f04:	strb	r2, [r0]
   18f08:	str	r2, [sp, #20]
   18f0c:	str	r2, [sp, #24]
   18f10:	str	r2, [sp, #28]
   18f14:	mov	r3, r1
   18f18:	add	r2, sp, #20
   18f1c:	add	r5, sp, #16
   18f20:	mov	fp, #16
   18f24:	strh	r1, [sp, #16]
   18f28:	mov	r0, r3
   18f2c:	mov	r1, sl
   18f30:	str	r3, [sp, #12]
   18f34:	bl	121c4 <inet_pton@plt>
   18f38:	ldr	r3, [sp, #12]
   18f3c:	cmp	r0, #1
   18f40:	beq	1926c <__assert_fail@plt+0x6a6c>
   18f44:	mov	r0, sl
   18f48:	bl	12218 <gcry_free@plt>
   18f4c:	ldr	r5, [pc, #828]	; 19290 <__assert_fail@plt+0x6a90>
   18f50:	b	18e08 <__assert_fail@plt+0x6608>
   18f54:	bl	12458 <_gpgrt_get_std_stream@plt>
   18f58:	ldr	r7, [r4]
   18f5c:	mov	r6, r0
   18f60:	ldr	r0, [r5]
   18f64:	bl	123ec <strerror@plt>
   18f68:	mov	r2, r7
   18f6c:	ldr	r1, [pc, #816]	; 192a4 <__assert_fail@plt+0x6aa4>
   18f70:	mov	r3, r0
   18f74:	mov	r0, r6
   18f78:	bl	1271c <gpgrt_fprintf@plt>
   18f7c:	b	18d50 <__assert_fail@plt+0x6550>
   18f80:	add	r1, r4, #23
   18f84:	bl	12344 <strcpy@plt>
   18f88:	mov	r1, #93	; 0x5d
   18f8c:	mov	r0, sl
   18f90:	bl	124d0 <strchr@plt>
   18f94:	cmp	r0, #0
   18f98:	beq	18fa8 <__assert_fail@plt+0x67a8>
   18f9c:	ldrb	r3, [r0, #1]
   18fa0:	cmp	r3, #58	; 0x3a
   18fa4:	beq	1917c <__assert_fail@plt+0x697c>
   18fa8:	mov	r0, #22
   18fac:	bl	1268c <gpg_err_set_errno@plt>
   18fb0:	mov	r0, sl
   18fb4:	bl	12218 <gcry_free@plt>
   18fb8:	ldr	r5, [pc, #720]	; 19290 <__assert_fail@plt+0x6a90>
   18fbc:	b	18e08 <__assert_fail@plt+0x6608>
   18fc0:	mov	r1, r5
   18fc4:	mov	r2, #107	; 0x6b
   18fc8:	add	r0, sp, #62	; 0x3e
   18fcc:	bl	12578 <strncpy@plt>
   18fd0:	mov	r3, #0
   18fd4:	add	r0, sp, #62	; 0x3e
   18fd8:	strb	r3, [sp, #169]	; 0xa9
   18fdc:	bl	124b8 <strlen@plt>
   18fe0:	mov	r3, sl
   18fe4:	ldr	sl, [pc, #700]	; 192a8 <__assert_fail@plt+0x6aa8>
   18fe8:	add	r5, sp, #60	; 0x3c
   18fec:	add	fp, r0, #2
   18ff0:	mov	r0, r3
   18ff4:	mov	r2, #0
   18ff8:	mov	r1, #1
   18ffc:	bl	12710 <socket@plt>
   19000:	cmn	r0, #1
   19004:	str	r0, [r4]
   19008:	ldreq	r5, [pc, #640]	; 19290 <__assert_fail@plt+0x6a90>
   1900c:	beq	18e10 <__assert_fail@plt+0x6610>
   19010:	mov	r2, fp
   19014:	mov	r1, r5
   19018:	bl	127dc <connect@plt>
   1901c:	cmn	r0, #1
   19020:	beq	190e4 <__assert_fail@plt+0x68e4>
   19024:	ldr	r6, [r4]
   19028:	cmn	r6, #1
   1902c:	bne	18e34 <__assert_fail@plt+0x6634>
   19030:	ldr	r5, [pc, #600]	; 19290 <__assert_fail@plt+0x6a90>
   19034:	ldr	r3, [r5, #112]	; 0x70
   19038:	cmp	r3, #0
   1903c:	bne	19124 <__assert_fail@plt+0x6924>
   19040:	ldr	r3, [r4, #4]
   19044:	cmp	r3, #0
   19048:	moveq	r3, #1
   1904c:	streq	r3, [r4, #4]
   19050:	ldr	r3, [r5, #112]	; 0x70
   19054:	ldr	sl, [pc, #560]	; 1928c <__assert_fail@plt+0x6a8c>
   19058:	cmp	r3, #0
   1905c:	mvn	r3, #0
   19060:	str	r3, [sl]
   19064:	str	r3, [r4]
   19068:	bne	18d50 <__assert_fail@plt+0x6550>
   1906c:	b	18d78 <__assert_fail@plt+0x6578>
   19070:	ldr	r5, [pc, #536]	; 19290 <__assert_fail@plt+0x6a90>
   19074:	ldr	r3, [r5, #108]	; 0x6c
   19078:	blx	r3
   1907c:	subs	r1, r0, #0
   19080:	ldrb	r3, [r1]
   19084:	beq	19284 <__assert_fail@plt+0x6a84>
   19088:	cmp	r3, #0
   1908c:	str	r1, [sp, #12]
   19090:	beq	18e08 <__assert_fail@plt+0x6608>
   19094:	bl	124b8 <strlen@plt>
   19098:	ldr	r1, [sp, #12]
   1909c:	add	r0, r0, #7
   190a0:	cmp	r0, #106	; 0x6a
   190a4:	bhi	18e08 <__assert_fail@plt+0x6608>
   190a8:	mov	r2, #107	; 0x6b
   190ac:	add	r0, sp, #62	; 0x3e
   190b0:	bl	12578 <strncpy@plt>
   190b4:	mov	r2, #108	; 0x6c
   190b8:	ldr	r1, [pc, #492]	; 192ac <__assert_fail@plt+0x6aac>
   190bc:	add	r0, sp, #62	; 0x3e
   190c0:	bl	12524 <__strcat_chk@plt>
   190c4:	add	r0, sp, #62	; 0x3e
   190c8:	strb	fp, [sp, #169]	; 0xa9
   190cc:	bl	124b8 <strlen@plt>
   190d0:	add	r5, sp, #60	; 0x3c
   190d4:	mov	r3, sl
   190d8:	add	sl, sp, #62	; 0x3e
   190dc:	add	fp, r0, #2
   190e0:	b	18ff0 <__assert_fail@plt+0x67f0>
   190e4:	ldr	r5, [pc, #420]	; 19290 <__assert_fail@plt+0x6a90>
   190e8:	ldr	r2, [r4, #4]
   190ec:	ldr	r3, [r5, #112]	; 0x70
   190f0:	orrs	r3, r2, r3
   190f4:	beq	1921c <__assert_fail@plt+0x6a1c>
   190f8:	ldr	r0, [r4]
   190fc:	bl	127c4 <close@plt>
   19100:	mvn	r3, #0
   19104:	str	r3, [r4]
   19108:	ldr	r3, [r5, #112]	; 0x70
   1910c:	b	19038 <__assert_fail@plt+0x6838>
   19110:	bl	12218 <gcry_free@plt>
   19114:	ldr	r5, [pc, #372]	; 19290 <__assert_fail@plt+0x6a90>
   19118:	b	18e08 <__assert_fail@plt+0x6608>
   1911c:	cmp	r2, #0
   19120:	beq	19050 <__assert_fail@plt+0x6850>
   19124:	ldr	r6, [r4]
   19128:	b	18e44 <__assert_fail@plt+0x6644>
   1912c:	mov	r0, #2
   19130:	bl	12458 <_gpgrt_get_std_stream@plt>
   19134:	bl	127b8 <gpgrt_fileno@plt>
   19138:	bl	12770 <isatty@plt>
   1913c:	cmp	r0, #0
   19140:	beq	19024 <__assert_fail@plt+0x6824>
   19144:	mov	r0, #2
   19148:	bl	12458 <_gpgrt_get_std_stream@plt>
   1914c:	mov	r5, r0
   19150:	bl	12518 <__errno_location@plt>
   19154:	ldr	r0, [r0]
   19158:	bl	123ec <strerror@plt>
   1915c:	ldr	r1, [pc, #332]	; 192b0 <__assert_fail@plt+0x6ab0>
   19160:	mov	r2, r0
   19164:	mov	r0, r5
   19168:	bl	1271c <gpgrt_fprintf@plt>
   1916c:	b	19024 <__assert_fail@plt+0x6824>
   19170:	ldr	sl, [pc, #276]	; 1928c <__assert_fail@plt+0x6a8c>
   19174:	str	r6, [sl]
   19178:	b	18ce4 <__assert_fail@plt+0x64e4>
   1917c:	ldrb	r3, [r0, #2]
   19180:	add	lr, r0, #2
   19184:	sub	r3, r3, #48	; 0x30
   19188:	uxtb	r2, r3
   1918c:	cmp	r2, #9
   19190:	bhi	18fa8 <__assert_fail@plt+0x67a8>
   19194:	ldr	r5, [pc, #260]	; 192a0 <__assert_fail@plt+0x6aa0>
   19198:	b	191ac <__assert_fail@plt+0x69ac>
   1919c:	add	r3, r3, r3, lsl #2
   191a0:	add	r3, r2, r3, lsl #1
   191a4:	cmp	r3, r5
   191a8:	bhi	18fa8 <__assert_fail@plt+0x67a8>
   191ac:	ldrb	r1, [lr, #1]!
   191b0:	sub	r2, r1, #48	; 0x30
   191b4:	uxtb	ip, r2
   191b8:	cmp	ip, #9
   191bc:	bls	1919c <__assert_fail@plt+0x699c>
   191c0:	cmp	r1, #0
   191c4:	clz	r2, r3
   191c8:	lsr	r2, r2, #5
   191cc:	moveq	r1, r2
   191d0:	movne	r1, #1
   191d4:	cmp	r1, #0
   191d8:	bne	18fa8 <__assert_fail@plt+0x67a8>
   191dc:	mov	r2, #10
   191e0:	rev16	r3, r3
   191e4:	strh	r3, [sp, #34]	; 0x22
   191e8:	strh	r2, [sp, #32]
   191ec:	mov	r3, r2
   191f0:	strb	r1, [r0]
   191f4:	str	r1, [sp, #36]	; 0x24
   191f8:	str	r1, [sp, #40]	; 0x28
   191fc:	str	r1, [sp, #44]	; 0x2c
   19200:	str	r1, [sp, #48]	; 0x30
   19204:	str	r1, [sp, #52]	; 0x34
   19208:	str	r1, [sp, #56]	; 0x38
   1920c:	add	r5, sp, #32
   19210:	add	r2, sp, #40	; 0x28
   19214:	mov	fp, #28
   19218:	b	18f28 <__assert_fail@plt+0x6728>
   1921c:	mov	r0, #2
   19220:	bl	12458 <_gpgrt_get_std_stream@plt>
   19224:	bl	127b8 <gpgrt_fileno@plt>
   19228:	bl	12770 <isatty@plt>
   1922c:	cmp	r0, #0
   19230:	beq	190f8 <__assert_fail@plt+0x68f8>
   19234:	mov	r0, #2
   19238:	bl	12458 <_gpgrt_get_std_stream@plt>
   1923c:	mov	fp, r0
   19240:	bl	12518 <__errno_location@plt>
   19244:	ldr	r0, [r0]
   19248:	bl	123ec <strerror@plt>
   1924c:	mov	r3, sl
   19250:	mov	r2, r6
   19254:	ldr	r1, [pc, #88]	; 192b4 <__assert_fail@plt+0x6ab4>
   19258:	str	r0, [sp]
   1925c:	mov	r0, fp
   19260:	bl	1271c <gpgrt_fprintf@plt>
   19264:	b	190f8 <__assert_fail@plt+0x68f8>
   19268:	bl	12260 <__stack_chk_fail@plt>
   1926c:	mov	r0, sl
   19270:	str	r3, [sp, #12]
   19274:	ldr	sl, [pc, #44]	; 192a8 <__assert_fail@plt+0x6aa8>
   19278:	bl	12218 <gcry_free@plt>
   1927c:	ldr	r3, [sp, #12]
   19280:	b	18ff0 <__assert_fail@plt+0x67f0>
   19284:	udf	#0
   19288:	andeq	r5, r3, r8, asr #22
   1928c:	andeq	r6, r3, r8, asr #2
   19290:	andeq	r6, r3, r0, ror r1
   19294:	ldrdeq	r3, [r2], -ip
   19298:			; <UNDEFINED> instruction: 0x00022fb8
   1929c:	andeq	r2, r2, r4, asr #31
   192a0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   192a4:	strdeq	r3, [r2], -r8
   192a8:	andeq	r2, r2, ip, lsl #18
   192ac:	andeq	r3, r2, r8, lsl #1
   192b0:	muleq	r2, r0, r0
   192b4:	strheq	r3, [r2], -ip
   192b8:	ldr	r3, [pc, #16]	; 192d0 <__assert_fail@plt+0x6ad0>
   192bc:	cmp	r0, #0
   192c0:	movne	r2, #0
   192c4:	ldr	r0, [r3, #116]	; 0x74
   192c8:	strne	r2, [r3, #116]	; 0x74
   192cc:	bx	lr
   192d0:	andeq	r6, r3, r0, ror r1
   192d4:	ldr	r2, [pc, #12]	; 192e8 <__assert_fail@plt+0x6ae8>
   192d8:	ldr	r3, [r2, #116]	; 0x74
   192dc:	add	r3, r3, #1
   192e0:	str	r3, [r2, #116]	; 0x74
   192e4:	bx	lr
   192e8:	andeq	r6, r3, r0, ror r1
   192ec:	ldr	r3, [pc, #12]	; 19300 <__assert_fail@plt+0x6b00>
   192f0:	cmp	r0, #0
   192f4:	mvn	r1, #0
   192f8:	moveq	r0, r3
   192fc:	b	18330 <__assert_fail@plt+0x5b30>
   19300:	andeq	r2, r2, r0, lsr r6
   19304:	ldr	r3, [pc, #4]	; 19310 <__assert_fail@plt+0x6b10>
   19308:	str	r0, [r3, #108]	; 0x6c
   1930c:	bx	lr
   19310:	andeq	r6, r3, r0, ror r1
   19314:	ldr	r3, [pc, #4]	; 19320 <__assert_fail@plt+0x6b20>
   19318:	str	r0, [r3, #104]	; 0x68
   1931c:	bx	lr
   19320:	andeq	r6, r3, r0, ror r1
   19324:	cmp	r0, #0
   19328:	push	{r4, r5, r6, lr}
   1932c:	mov	r4, r1
   19330:	ldr	r5, [pc, #60]	; 19374 <__assert_fail@plt+0x6b74>
   19334:	beq	19350 <__assert_fail@plt+0x6b50>
   19338:	mov	r1, r0
   1933c:	mov	r2, #79	; 0x4f
   19340:	add	r0, r5, #20
   19344:	bl	12578 <strncpy@plt>
   19348:	mov	r3, #0
   1934c:	strb	r3, [r5, #99]	; 0x63
   19350:	and	r1, r4, #1
   19354:	and	r2, r4, #2
   19358:	and	r3, r4, #4
   1935c:	and	r4, r4, #256	; 0x100
   19360:	str	r1, [r5, #16]
   19364:	str	r2, [r5, #12]
   19368:	str	r3, [r5, #100]	; 0x64
   1936c:	str	r4, [r5, #112]	; 0x70
   19370:	pop	{r4, r5, r6, pc}
   19374:	andeq	r6, r3, r0, ror r1
   19378:	cmp	r0, #0
   1937c:	beq	193cc <__assert_fail@plt+0x6bcc>
   19380:	ldr	r2, [pc, #76]	; 193d4 <__assert_fail@plt+0x6bd4>
   19384:	ldr	r3, [r2, #16]
   19388:	ldr	r1, [r2, #12]
   1938c:	adds	r3, r3, #0
   19390:	movne	r3, #1
   19394:	cmp	r1, #0
   19398:	str	r3, [r0]
   1939c:	orrne	r3, r3, #2
   193a0:	strne	r3, [r0]
   193a4:	ldr	r3, [r2, #100]	; 0x64
   193a8:	cmp	r3, #0
   193ac:	ldrne	r3, [r0]
   193b0:	orrne	r3, r3, #4
   193b4:	strne	r3, [r0]
   193b8:	ldr	r3, [r2, #112]	; 0x70
   193bc:	cmp	r3, #0
   193c0:	ldrne	r3, [r0]
   193c4:	orrne	r3, r3, #256	; 0x100
   193c8:	strne	r3, [r0]
   193cc:	ldr	r0, [pc, #4]	; 193d8 <__assert_fail@plt+0x6bd8>
   193d0:	bx	lr
   193d4:	andeq	r6, r3, r0, ror r1
   193d8:	andeq	r6, r3, r4, lsl #3
   193dc:	ldr	r3, [pc, #88]	; 1943c <__assert_fail@plt+0x6c3c>
   193e0:	push	{r4, lr}
   193e4:	mov	r4, r0
   193e8:	ldr	r0, [r3]
   193ec:	cmp	r0, #0
   193f0:	beq	19414 <__assert_fail@plt+0x6c14>
   193f4:	bl	127b8 <gpgrt_fileno@plt>
   193f8:	cmn	r0, #1
   193fc:	sub	r3, r0, r4
   19400:	clz	r3, r3
   19404:	lsr	r3, r3, #5
   19408:	moveq	r3, #0
   1940c:	cmp	r3, #0
   19410:	bne	19434 <__assert_fail@plt+0x6c34>
   19414:	ldr	r3, [pc, #36]	; 19440 <__assert_fail@plt+0x6c40>
   19418:	ldr	r3, [r3]
   1941c:	cmn	r3, #1
   19420:	sub	r0, r3, r4
   19424:	clz	r0, r0
   19428:	lsr	r0, r0, #5
   1942c:	moveq	r0, #0
   19430:	pop	{r4, pc}
   19434:	mov	r0, #1
   19438:	pop	{r4, pc}
   1943c:	andeq	r6, r3, r0, ror r1
   19440:	andeq	r6, r3, r8, asr #2
   19444:	ldr	r3, [pc, #20]	; 19460 <__assert_fail@plt+0x6c60>
   19448:	ldr	r0, [r3]
   1944c:	cmp	r0, #0
   19450:	beq	19458 <__assert_fail@plt+0x6c58>
   19454:	b	127b8 <gpgrt_fileno@plt>
   19458:	mvn	r0, #0
   1945c:	bx	lr
   19460:	andeq	r6, r3, r0, ror r1
   19464:	push	{r4, lr}
   19468:	ldr	r4, [pc, #52]	; 194a4 <__assert_fail@plt+0x6ca4>
   1946c:	ldr	r0, [r4]
   19470:	cmp	r0, #0
   19474:	popne	{r4, pc}
   19478:	ldr	r0, [pc, #40]	; 194a8 <__assert_fail@plt+0x6ca8>
   1947c:	mvn	r1, #0
   19480:	bl	18330 <__assert_fail@plt+0x5b30>
   19484:	ldr	r0, [r4]
   19488:	cmp	r0, #0
   1948c:	popne	{r4, pc}
   19490:	ldr	r3, [pc, #20]	; 194ac <__assert_fail@plt+0x6cac>
   19494:	mov	r2, #672	; 0x2a0
   19498:	ldr	r1, [pc, #16]	; 194b0 <__assert_fail@plt+0x6cb0>
   1949c:	ldr	r0, [pc, #16]	; 194b4 <__assert_fail@plt+0x6cb4>
   194a0:	bl	12800 <__assert_fail@plt>
   194a4:	andeq	r6, r3, r0, ror r1
   194a8:	andeq	r2, r2, r0, lsr r6
   194ac:	andeq	r2, r2, r8, lsr #31
   194b0:	andeq	r3, r2, ip, asr #32
   194b4:	andeq	r3, r2, r4, rrx
   194b8:	push	{r1, r2, r3}
   194bc:	mov	r3, #0
   194c0:	push	{r4, lr}
   194c4:	sub	sp, sp, #20
   194c8:	ldr	r4, [pc, #68]	; 19514 <__assert_fail@plt+0x6d14>
   194cc:	ldr	r2, [sp, #28]
   194d0:	add	ip, sp, #32
   194d4:	ldr	r1, [r4]
   194d8:	stm	sp, {r2, ip}
   194dc:	str	r1, [sp, #12]
   194e0:	mov	r2, r3
   194e4:	mov	r1, r3
   194e8:	str	ip, [sp, #8]
   194ec:	bl	1884c <__assert_fail@plt+0x604c>
   194f0:	ldr	r2, [sp, #12]
   194f4:	ldr	r3, [r4]
   194f8:	cmp	r2, r3
   194fc:	bne	19510 <__assert_fail@plt+0x6d10>
   19500:	add	sp, sp, #20
   19504:	pop	{r4, lr}
   19508:	add	sp, sp, #12
   1950c:	bx	lr
   19510:	bl	12260 <__stack_chk_fail@plt>
   19514:	andeq	r5, r3, r8, asr #22
   19518:	push	{lr}		; (str lr, [sp, #-4]!)
   1951c:	sub	sp, sp, #12
   19520:	mov	r3, #0
   19524:	stm	sp, {r1, r2}
   19528:	mov	r2, r3
   1952c:	mov	r1, r3
   19530:	bl	1884c <__assert_fail@plt+0x604c>
   19534:	add	sp, sp, #12
   19538:	pop	{pc}		; (ldr pc, [sp], #4)
   1953c:	push	{lr}		; (str lr, [sp, #-4]!)
   19540:	sub	sp, sp, #12
   19544:	str	r2, [sp]
   19548:	mov	r2, #0
   1954c:	str	r3, [sp, #4]
   19550:	mov	r3, r1
   19554:	mov	r1, r2
   19558:	bl	1884c <__assert_fail@plt+0x604c>
   1955c:	add	sp, sp, #12
   19560:	pop	{pc}		; (ldr pc, [sp], #4)
   19564:	b	18bfc <__assert_fail@plt+0x63fc>
   19568:	push	{r0, r1, r2, r3}
   1956c:	mov	r3, #0
   19570:	push	{r4, lr}
   19574:	sub	sp, sp, #16
   19578:	ldr	r4, [pc, #72]	; 195c8 <__assert_fail@plt+0x6dc8>
   1957c:	ldr	r2, [sp, #24]
   19580:	add	ip, sp, #28
   19584:	ldr	r0, [r4]
   19588:	stm	sp, {r2, ip}
   1958c:	mov	r1, r3
   19590:	mov	r2, r3
   19594:	str	r0, [sp, #12]
   19598:	mov	r0, #2
   1959c:	str	ip, [sp, #8]
   195a0:	bl	1884c <__assert_fail@plt+0x604c>
   195a4:	ldr	r2, [sp, #12]
   195a8:	ldr	r3, [r4]
   195ac:	cmp	r2, r3
   195b0:	bne	195c4 <__assert_fail@plt+0x6dc4>
   195b4:	add	sp, sp, #16
   195b8:	pop	{r4, lr}
   195bc:	add	sp, sp, #16
   195c0:	bx	lr
   195c4:	bl	12260 <__stack_chk_fail@plt>
   195c8:	andeq	r5, r3, r8, asr #22
   195cc:	push	{r0, r1, r2, r3}
   195d0:	mov	r3, #0
   195d4:	push	{r4, lr}
   195d8:	sub	sp, sp, #16
   195dc:	ldr	r4, [pc, #96]	; 19644 <__assert_fail@plt+0x6e44>
   195e0:	ldr	r2, [sp, #24]
   195e4:	add	ip, sp, #28
   195e8:	ldr	r0, [r4]
   195ec:	mov	r1, r3
   195f0:	stm	sp, {r2, ip}
   195f4:	str	r0, [sp, #12]
   195f8:	mov	r2, r3
   195fc:	mov	r0, #4
   19600:	str	ip, [sp, #8]
   19604:	bl	1884c <__assert_fail@plt+0x604c>
   19608:	ldr	r2, [pc, #56]	; 19648 <__assert_fail@plt+0x6e48>
   1960c:	ldr	r1, [pc, #56]	; 1964c <__assert_fail@plt+0x6e4c>
   19610:	ldr	r3, [r2, #116]	; 0x74
   19614:	cmp	r3, r1
   19618:	addle	r3, r3, #1
   1961c:	strle	r3, [r2, #116]	; 0x74
   19620:	ldr	r2, [sp, #12]
   19624:	ldr	r3, [r4]
   19628:	cmp	r2, r3
   1962c:	bne	19640 <__assert_fail@plt+0x6e40>
   19630:	add	sp, sp, #16
   19634:	pop	{r4, lr}
   19638:	add	sp, sp, #16
   1963c:	bx	lr
   19640:	bl	12260 <__stack_chk_fail@plt>
   19644:	andeq	r5, r3, r8, asr #22
   19648:	andeq	r6, r3, r0, ror r1
   1964c:	andeq	r7, r0, pc, lsr #10
   19650:	push	{r0, r1, r2, r3}
   19654:	mov	r0, #5
   19658:	push	{lr}		; (str lr, [sp, #-4]!)
   1965c:	sub	sp, sp, #20
   19660:	ldr	r3, [pc, #40]	; 19690 <__assert_fail@plt+0x6e90>
   19664:	ldr	r2, [sp, #24]
   19668:	add	ip, sp, #28
   1966c:	ldr	lr, [r3]
   19670:	mov	r3, #0
   19674:	stm	sp, {r2, ip}
   19678:	mov	r1, r3
   1967c:	mov	r2, r3
   19680:	str	lr, [sp, #12]
   19684:	str	ip, [sp, #8]
   19688:	bl	1884c <__assert_fail@plt+0x604c>
   1968c:	bl	127a0 <abort@plt>
   19690:	andeq	r5, r3, r8, asr #22
   19694:	push	{r4, lr}
   19698:	mov	r4, r0
   1969c:	bl	1a85c <__assert_fail@plt+0x805c>
   196a0:	cmp	r0, #0
   196a4:	beq	196b8 <__assert_fail@plt+0x6eb8>
   196a8:	mov	r1, r4
   196ac:	mov	r0, #0
   196b0:	pop	{r4, lr}
   196b4:	b	18330 <__assert_fail@plt+0x5b30>
   196b8:	bl	12518 <__errno_location@plt>
   196bc:	ldr	r0, [r0]
   196c0:	bl	123ec <strerror@plt>
   196c4:	mov	r1, r0
   196c8:	ldr	r0, [pc]	; 196d0 <__assert_fail@plt+0x6ed0>
   196cc:	bl	19650 <__assert_fail@plt+0x6e50>
   196d0:	andeq	r3, r2, r4, lsr #2
   196d4:	push	{r0, r1, r2, r3}
   196d8:	mov	r0, #6
   196dc:	push	{lr}		; (str lr, [sp, #-4]!)
   196e0:	sub	sp, sp, #20
   196e4:	ldr	r3, [pc, #40]	; 19714 <__assert_fail@plt+0x6f14>
   196e8:	ldr	r2, [sp, #24]
   196ec:	add	ip, sp, #28
   196f0:	ldr	lr, [r3]
   196f4:	mov	r3, #0
   196f8:	stm	sp, {r2, ip}
   196fc:	mov	r1, r3
   19700:	mov	r2, r3
   19704:	str	lr, [sp, #12]
   19708:	str	ip, [sp, #8]
   1970c:	bl	1884c <__assert_fail@plt+0x604c>
   19710:	bl	127a0 <abort@plt>
   19714:	andeq	r5, r3, r8, asr #22
   19718:	push	{r0, r1, r2, r3}
   1971c:	mov	r3, #0
   19720:	push	{r4, lr}
   19724:	sub	sp, sp, #16
   19728:	ldr	r4, [pc, #72]	; 19778 <__assert_fail@plt+0x6f78>
   1972c:	ldr	r2, [sp, #24]
   19730:	add	ip, sp, #28
   19734:	ldr	r0, [r4]
   19738:	stm	sp, {r2, ip}
   1973c:	mov	r1, r3
   19740:	mov	r2, r3
   19744:	str	r0, [sp, #12]
   19748:	mov	r0, #7
   1974c:	str	ip, [sp, #8]
   19750:	bl	1884c <__assert_fail@plt+0x604c>
   19754:	ldr	r2, [sp, #12]
   19758:	ldr	r3, [r4]
   1975c:	cmp	r2, r3
   19760:	bne	19774 <__assert_fail@plt+0x6f74>
   19764:	add	sp, sp, #16
   19768:	pop	{r4, lr}
   1976c:	add	sp, sp, #16
   19770:	bx	lr
   19774:	bl	12260 <__stack_chk_fail@plt>
   19778:	andeq	r5, r3, r8, asr #22
   1977c:	push	{r1, r2, r3}
   19780:	mov	r3, #0
   19784:	push	{r4, lr}
   19788:	sub	sp, sp, #20
   1978c:	ldr	r4, [pc, #72]	; 197dc <__assert_fail@plt+0x6fdc>
   19790:	ldr	r1, [sp, #28]
   19794:	add	ip, sp, #32
   19798:	ldr	lr, [r4]
   1979c:	mov	r2, r0
   197a0:	stm	sp, {r1, ip}
   197a4:	mov	r0, #7
   197a8:	mov	r1, r3
   197ac:	str	lr, [sp, #12]
   197b0:	str	ip, [sp, #8]
   197b4:	bl	1884c <__assert_fail@plt+0x604c>
   197b8:	ldr	r2, [sp, #12]
   197bc:	ldr	r3, [r4]
   197c0:	cmp	r2, r3
   197c4:	bne	197d8 <__assert_fail@plt+0x6fd8>
   197c8:	add	sp, sp, #20
   197cc:	pop	{r4, lr}
   197d0:	add	sp, sp, #12
   197d4:	bx	lr
   197d8:	bl	12260 <__stack_chk_fail@plt>
   197dc:	andeq	r5, r3, r8, asr #22
   197e0:	push	{r0, r1, r2, r3}
   197e4:	mov	r3, #0
   197e8:	push	{r4, lr}
   197ec:	sub	sp, sp, #16
   197f0:	ldr	r4, [pc, #80]	; 19848 <__assert_fail@plt+0x7048>
   197f4:	ldr	r0, [sp, #24]
   197f8:	add	ip, sp, #28
   197fc:	ldr	r1, [r4]
   19800:	str	r0, [sp]
   19804:	subs	r0, r0, r3
   19808:	mov	r2, r3
   1980c:	movne	r0, #1
   19810:	str	r1, [sp, #12]
   19814:	str	ip, [sp, #4]
   19818:	mov	r1, r3
   1981c:	str	ip, [sp, #8]
   19820:	bl	1884c <__assert_fail@plt+0x604c>
   19824:	ldr	r2, [sp, #12]
   19828:	ldr	r3, [r4]
   1982c:	cmp	r2, r3
   19830:	bne	19844 <__assert_fail@plt+0x7044>
   19834:	add	sp, sp, #16
   19838:	pop	{r4, lr}
   1983c:	add	sp, sp, #16
   19840:	bx	lr
   19844:	bl	12260 <__stack_chk_fail@plt>
   19848:	andeq	r5, r3, r8, asr #22
   1984c:	mov	r1, #0
   19850:	mov	r0, #1
   19854:	b	18bfc <__assert_fail@plt+0x63fc>
   19858:	push	{r4, r5, r6, r7, r8, lr}
   1985c:	subs	r7, r0, #0
   19860:	mov	r4, r1
   19864:	mov	r5, r2
   19868:	beq	198e8 <__assert_fail@plt+0x70e8>
   1986c:	ldrb	r3, [r7]
   19870:	cmp	r3, #0
   19874:	bne	198d0 <__assert_fail@plt+0x70d0>
   19878:	cmp	r5, #0
   1987c:	bne	1988c <__assert_fail@plt+0x708c>
   19880:	ldr	r0, [pc, #132]	; 1990c <__assert_fail@plt+0x710c>
   19884:	pop	{r4, r5, r6, r7, r8, lr}
   19888:	b	197e0 <__assert_fail@plt+0x6fe0>
   1988c:	ldr	r0, [pc, #124]	; 19910 <__assert_fail@plt+0x7110>
   19890:	ldrb	r1, [r4], #1
   19894:	bl	197e0 <__assert_fail@plt+0x6fe0>
   19898:	cmp	r5, #1
   1989c:	sub	r5, r5, #2
   198a0:	beq	19880 <__assert_fail@plt+0x7080>
   198a4:	add	r5, r5, #1
   198a8:	ldr	r6, [pc, #100]	; 19914 <__assert_fail@plt+0x7114>
   198ac:	add	r5, r4, r5
   198b0:	ldrb	r1, [r4], #1
   198b4:	mov	r0, r6
   198b8:	bl	197e0 <__assert_fail@plt+0x6fe0>
   198bc:	cmp	r4, r5
   198c0:	bne	198b0 <__assert_fail@plt+0x70b0>
   198c4:	cmp	r7, #0
   198c8:	popeq	{r4, r5, r6, r7, r8, pc}
   198cc:	b	19880 <__assert_fail@plt+0x7080>
   198d0:	mov	r1, r7
   198d4:	ldr	r0, [pc, #60]	; 19918 <__assert_fail@plt+0x7118>
   198d8:	bl	19718 <__assert_fail@plt+0x6f18>
   198dc:	cmp	r5, #0
   198e0:	beq	19880 <__assert_fail@plt+0x7080>
   198e4:	b	1988c <__assert_fail@plt+0x708c>
   198e8:	cmp	r2, #0
   198ec:	popeq	{r4, r5, r6, r7, r8, pc}
   198f0:	ldr	r0, [pc, #24]	; 19910 <__assert_fail@plt+0x7110>
   198f4:	ldrb	r1, [r4], #1
   198f8:	bl	197e0 <__assert_fail@plt+0x6fe0>
   198fc:	cmp	r5, #1
   19900:	sub	r5, r5, #2
   19904:	bne	198a4 <__assert_fail@plt+0x70a4>
   19908:	pop	{r4, r5, r6, r7, r8, pc}
   1990c:	andeq	r3, r2, r8, lsl pc
   19910:	andeq	r3, r2, ip, asr #2
   19914:	andeq	r3, r2, r4, asr #2
   19918:	andeq	r3, r2, r0, asr #2
   1991c:	mov	r1, r0
   19920:	ldr	r0, [pc]	; 19928 <__assert_fail@plt+0x7128>
   19924:	b	19718 <__assert_fail@plt+0x6f18>
   19928:	andeq	r3, r2, r4, asr r1
   1992c:	push	{lr}		; (str lr, [sp, #-4]!)
   19930:	sub	sp, sp, #12
   19934:	mov	r3, r1
   19938:	str	r2, [sp]
   1993c:	ldr	r1, [pc, #12]	; 19950 <__assert_fail@plt+0x7150>
   19940:	mov	r2, r0
   19944:	mov	r0, #6
   19948:	bl	194b8 <__assert_fail@plt+0x6cb8>
   1994c:	bl	127a0 <abort@plt>
   19950:	andeq	r3, r2, r4, ror r1
   19954:	push	{lr}		; (str lr, [sp, #-4]!)
   19958:	sub	sp, sp, #12
   1995c:	stm	sp, {r1, r2}
   19960:	mov	r2, r0
   19964:	ldr	r1, [pc, #8]	; 19974 <__assert_fail@plt+0x7174>
   19968:	mov	r0, #6
   1996c:	bl	194b8 <__assert_fail@plt+0x6cb8>
   19970:	bl	127a0 <abort@plt>
   19974:	muleq	r2, r4, r1
   19978:	push	{r4, r5, r6, lr}
   1997c:	ldr	r5, [pc, #44]	; 199b0 <__assert_fail@plt+0x71b0>
   19980:	ldr	r3, [r5]
   19984:	cmp	r3, #0
   19988:	popeq	{r4, r5, r6, pc}
   1998c:	ldr	r4, [r3]
   19990:	ldr	r3, [r3, #4]
   19994:	blx	r3
   19998:	ldr	r0, [r5]
   1999c:	bl	12194 <free@plt>
   199a0:	subs	r3, r4, #0
   199a4:	str	r4, [r5]
   199a8:	bne	1998c <__assert_fail@plt+0x718c>
   199ac:	pop	{r4, r5, r6, pc}
   199b0:	andeq	r6, r3, r8, ror #3
   199b4:	sub	r2, r0, #1
   199b8:	cmp	r2, #1
   199bc:	bhi	19a00 <__assert_fail@plt+0x7200>
   199c0:	cmp	r1, #0
   199c4:	push	{r4, lr}
   199c8:	mov	r4, r1
   199cc:	beq	199ec <__assert_fail@plt+0x71ec>
   199d0:	cmp	r0, #1
   199d4:	movne	r0, #2
   199d8:	bl	12458 <_gpgrt_get_std_stream@plt>
   199dc:	mov	r1, r0
   199e0:	mov	r0, r4
   199e4:	pop	{r4, lr}
   199e8:	b	125f0 <gpgrt_fputs@plt>
   199ec:	cmp	r0, #1
   199f0:	movne	r0, #2
   199f4:	bl	12458 <_gpgrt_get_std_stream@plt>
   199f8:	pop	{r4, lr}
   199fc:	b	1229c <gpgrt_fflush@plt>
   19a00:	mvn	r0, #0
   19a04:	bx	lr
   19a08:	push	{r4, r5, r6, lr}
   19a0c:	ldr	r6, [pc, #84]	; 19a68 <__assert_fail@plt+0x7268>
   19a10:	ldr	r5, [r6]
   19a14:	cmp	r5, #0
   19a18:	beq	19a48 <__assert_fail@plt+0x7248>
   19a1c:	ldr	r3, [r5, #4]
   19a20:	cmp	r0, r3
   19a24:	popeq	{r4, r5, r6, pc}
   19a28:	mov	r3, r5
   19a2c:	b	19a3c <__assert_fail@plt+0x723c>
   19a30:	ldr	r2, [r3, #4]
   19a34:	cmp	r2, r0
   19a38:	popeq	{r4, r5, r6, pc}
   19a3c:	ldr	r3, [r3]
   19a40:	cmp	r3, #0
   19a44:	bne	19a30 <__assert_fail@plt+0x7230>
   19a48:	mov	r4, r0
   19a4c:	mov	r0, #8
   19a50:	bl	123c8 <malloc@plt>
   19a54:	cmp	r0, #0
   19a58:	strne	r0, [r6]
   19a5c:	strne	r4, [r0, #4]
   19a60:	strne	r5, [r0]
   19a64:	pop	{r4, r5, r6, pc}
   19a68:	andeq	r6, r3, r8, ror #3
   19a6c:	bx	lr
   19a70:	ldr	r3, [pc, #136]	; 19b00 <__assert_fail@plt+0x7300>
   19a74:	push	{r4, r5, r6, lr}
   19a78:	str	r0, [r3, #4]
   19a7c:	ldr	r0, [pc, #128]	; 19b04 <__assert_fail@plt+0x7304>
   19a80:	bl	22168 <__assert_fail@plt+0xf968>
   19a84:	mov	r0, #0
   19a88:	bl	20a18 <__assert_fail@plt+0xe218>
   19a8c:	ldr	r0, [pc, #116]	; 19b08 <__assert_fail@plt+0x7308>
   19a90:	bl	1232c <gcry_check_version@plt>
   19a94:	subs	r4, r0, #0
   19a98:	beq	19ad4 <__assert_fail@plt+0x72d4>
   19a9c:	bl	126c8 <gpg_err_init@plt>
   19aa0:	ldr	r0, [pc, #100]	; 19b0c <__assert_fail@plt+0x730c>
   19aa4:	bl	1226c <gpgrt_set_alloc_func@plt>
   19aa8:	mov	r0, #0
   19aac:	bl	12458 <_gpgrt_get_std_stream@plt>
   19ab0:	mov	r0, #1
   19ab4:	bl	12458 <_gpgrt_get_std_stream@plt>
   19ab8:	mov	r0, #2
   19abc:	bl	12458 <_gpgrt_get_std_stream@plt>
   19ac0:	ldr	r0, [pc, #72]	; 19b10 <__assert_fail@plt+0x7310>
   19ac4:	bl	164d8 <__assert_fail@plt+0x3cd8>
   19ac8:	ldr	r0, [pc, #68]	; 19b14 <__assert_fail@plt+0x7314>
   19acc:	pop	{r4, r5, r6, lr}
   19ad0:	b	19304 <__assert_fail@plt+0x6b04>
   19ad4:	mov	r2, #5
   19ad8:	ldr	r1, [pc, #56]	; 19b18 <__assert_fail@plt+0x7318>
   19adc:	bl	12254 <dcgettext@plt>
   19ae0:	mov	r5, r0
   19ae4:	mov	r0, r4
   19ae8:	bl	1232c <gcry_check_version@plt>
   19aec:	ldr	r2, [pc, #20]	; 19b08 <__assert_fail@plt+0x7308>
   19af0:	ldr	r1, [pc, #36]	; 19b1c <__assert_fail@plt+0x731c>
   19af4:	mov	r3, r0
   19af8:	mov	r0, r5
   19afc:	bl	19650 <__assert_fail@plt+0x6e50>
   19b00:	andeq	r6, r3, r8, ror #3
   19b04:	andeq	r9, r1, r8, ror r9
   19b08:			; <UNDEFINED> instruction: 0x000231bc
   19b0c:	ldrdeq	r2, [r1], -r8
   19b10:			; <UNDEFINED> instruction: 0x000199b4
   19b14:	andeq	sl, r1, r8, lsl #30
   19b18:	andeq	r3, r2, r4, asr #3
   19b1c:	andeq	r3, r2, r8, ror #3
   19b20:	ldrb	r3, [r0, #1]
   19b24:	mov	r2, r0
   19b28:	cmp	r3, #0
   19b2c:	beq	19bd8 <__assert_fail@plt+0x73d8>
   19b30:	ldrb	r1, [r0, #2]
   19b34:	cmp	r3, #114	; 0x72
   19b38:	movne	r0, #0
   19b3c:	moveq	r0, #256	; 0x100
   19b40:	cmp	r1, #0
   19b44:	bxeq	lr
   19b48:	ldrb	r3, [r2, #3]
   19b4c:	cmp	r1, #119	; 0x77
   19b50:	orreq	r0, r0, #128	; 0x80
   19b54:	cmp	r3, #0
   19b58:	bxeq	lr
   19b5c:	cmp	r3, #120	; 0x78
   19b60:	ldrb	r3, [r2, #4]
   19b64:	orreq	r0, r0, #64	; 0x40
   19b68:	cmp	r3, #0
   19b6c:	bxeq	lr
   19b70:	cmp	r3, #114	; 0x72
   19b74:	ldrb	r3, [r2, #5]
   19b78:	orreq	r0, r0, #32
   19b7c:	cmp	r3, #0
   19b80:	bxeq	lr
   19b84:	cmp	r3, #119	; 0x77
   19b88:	ldrb	r3, [r2, #6]
   19b8c:	orreq	r0, r0, #16
   19b90:	cmp	r3, #0
   19b94:	bxeq	lr
   19b98:	cmp	r3, #120	; 0x78
   19b9c:	ldrb	r3, [r2, #7]
   19ba0:	orreq	r0, r0, #8
   19ba4:	cmp	r3, #0
   19ba8:	bxeq	lr
   19bac:	cmp	r3, #114	; 0x72
   19bb0:	ldrb	r3, [r2, #8]
   19bb4:	orreq	r0, r0, #4
   19bb8:	cmp	r3, #0
   19bbc:	bxeq	lr
   19bc0:	cmp	r3, #119	; 0x77
   19bc4:	ldrb	r3, [r2, #9]
   19bc8:	orreq	r0, r0, #2
   19bcc:	cmp	r3, #120	; 0x78
   19bd0:	orreq	r0, r0, #1
   19bd4:	bx	lr
   19bd8:	mov	r0, r3
   19bdc:	bx	lr
   19be0:	bx	lr
   19be4:	push	{r4, r5, lr}
   19be8:	sub	sp, sp, #28
   19bec:	ldr	r4, [pc, #160]	; 19c94 <__assert_fail@plt+0x7494>
   19bf0:	mov	r1, sp
   19bf4:	mov	r0, #4
   19bf8:	ldr	r3, [r4]
   19bfc:	str	r3, [sp, #20]
   19c00:	bl	12290 <getrlimit64@plt>
   19c04:	mov	r1, sp
   19c08:	cmp	r0, #0
   19c0c:	movne	r2, #0
   19c10:	movne	r3, #0
   19c14:	mov	r0, #4
   19c18:	strdne	r2, [sp, #8]
   19c1c:	mov	r2, #0
   19c20:	mov	r3, #0
   19c24:	strd	r2, [sp]
   19c28:	bl	12140 <setrlimit64@plt>
   19c2c:	cmp	r0, #0
   19c30:	beq	19c50 <__assert_fail@plt+0x7450>
   19c34:	bl	12518 <__errno_location@plt>
   19c38:	ldr	r3, [r0]
   19c3c:	mov	r5, r0
   19c40:	sub	r3, r3, #22
   19c44:	bics	r3, r3, #16
   19c48:	moveq	r0, #1
   19c4c:	bne	19c6c <__assert_fail@plt+0x746c>
   19c50:	ldr	r2, [sp, #20]
   19c54:	ldr	r3, [r4]
   19c58:	cmp	r2, r3
   19c5c:	bne	19c68 <__assert_fail@plt+0x7468>
   19c60:	add	sp, sp, #28
   19c64:	pop	{r4, r5, pc}
   19c68:	bl	12260 <__stack_chk_fail@plt>
   19c6c:	ldr	r1, [pc, #36]	; 19c98 <__assert_fail@plt+0x7498>
   19c70:	mov	r2, #5
   19c74:	mov	r0, #0
   19c78:	bl	12254 <dcgettext@plt>
   19c7c:	mov	r4, r0
   19c80:	ldr	r0, [r5]
   19c84:	bl	123ec <strerror@plt>
   19c88:	mov	r1, r0
   19c8c:	mov	r0, r4
   19c90:	bl	19650 <__assert_fail@plt+0x6e50>
   19c94:	andeq	r5, r3, r8, asr #22
   19c98:	andeq	r3, r2, r4, lsr r2
   19c9c:	push	{r4, lr}
   19ca0:	sub	sp, sp, #24
   19ca4:	ldr	r4, [pc, #76]	; 19cf8 <__assert_fail@plt+0x74f8>
   19ca8:	mov	r1, sp
   19cac:	mov	r0, #4
   19cb0:	ldr	r3, [r4]
   19cb4:	str	r3, [sp, #20]
   19cb8:	bl	12290 <getrlimit64@plt>
   19cbc:	cmp	r0, #0
   19cc0:	bne	19cd8 <__assert_fail@plt+0x74d8>
   19cc4:	ldrd	r2, [sp, #8]
   19cc8:	mov	r1, sp
   19ccc:	mov	r0, #4
   19cd0:	strd	r2, [sp]
   19cd4:	bl	12140 <setrlimit64@plt>
   19cd8:	ldr	r2, [sp, #20]
   19cdc:	ldr	r3, [r4]
   19ce0:	mov	r0, #1
   19ce4:	cmp	r2, r3
   19ce8:	bne	19cf4 <__assert_fail@plt+0x74f4>
   19cec:	add	sp, sp, #24
   19cf0:	pop	{r4, pc}
   19cf4:	bl	12260 <__stack_chk_fail@plt>
   19cf8:	andeq	r5, r3, r8, asr #22
   19cfc:	ldr	r3, [pc, #8]	; 19d0c <__assert_fail@plt+0x750c>
   19d00:	mov	r2, #1
   19d04:	str	r2, [r3]
   19d08:	bx	lr
   19d0c:	strdeq	r6, [r3], -r0
   19d10:	push	{r4, r5, r6, lr}
   19d14:	mov	r5, r0
   19d18:	ldr	r4, [pc, #48]	; 19d50 <__assert_fail@plt+0x7550>
   19d1c:	ldr	r3, [r4, #4]
   19d20:	cmp	r3, #0
   19d24:	beq	19d38 <__assert_fail@plt+0x7538>
   19d28:	mov	r3, #8
   19d2c:	str	r3, [r5]
   19d30:	ldr	r0, [pc, #28]	; 19d54 <__assert_fail@plt+0x7554>
   19d34:	pop	{r4, r5, r6, pc}
   19d38:	mov	r1, #8
   19d3c:	add	r0, r4, r1
   19d40:	bl	126ec <gcry_create_nonce@plt>
   19d44:	mov	r3, #1
   19d48:	str	r3, [r4, #4]
   19d4c:	b	19d28 <__assert_fail@plt+0x7528>
   19d50:	strdeq	r6, [r3], -r0
   19d54:	strdeq	r6, [r3], -r8
   19d58:	push	{r4, lr}
   19d5c:	sub	sp, sp, #8
   19d60:	ldr	r4, [pc, #48]	; 19d98 <__assert_fail@plt+0x7598>
   19d64:	mov	r0, sp
   19d68:	mov	r1, #4
   19d6c:	ldr	r3, [r4]
   19d70:	str	r3, [sp, #4]
   19d74:	bl	126ec <gcry_create_nonce@plt>
   19d78:	ldr	r2, [sp, #4]
   19d7c:	ldr	r3, [r4]
   19d80:	ldr	r0, [sp]
   19d84:	cmp	r2, r3
   19d88:	bne	19d94 <__assert_fail@plt+0x7594>
   19d8c:	add	sp, sp, #8
   19d90:	pop	{r4, pc}
   19d94:	bl	12260 <__stack_chk_fail@plt>
   19d98:	andeq	r5, r3, r8, asr #22
   19d9c:	b	1223c <sleep@plt>
   19da0:	push	{r4, r5, r6, lr}
   19da4:	sub	sp, sp, #24
   19da8:	ldr	r6, [pc, #144]	; 19e40 <__assert_fail@plt+0x7640>
   19dac:	cmp	r0, #0
   19db0:	ldr	r3, [r6]
   19db4:	str	r3, [sp, #20]
   19db8:	beq	19e24 <__assert_fail@plt+0x7624>
   19dbc:	ldr	r3, [pc, #128]	; 19e44 <__assert_fail@plt+0x7644>
   19dc0:	add	r5, sp, #12
   19dc4:	add	r4, sp, #4
   19dc8:	umull	r2, r3, r3, r0
   19dcc:	lsr	r3, r3, #18
   19dd0:	str	r3, [sp, #4]
   19dd4:	rsb	r2, r3, r3, lsl #5
   19dd8:	rsb	r2, r2, r2, lsl #6
   19ddc:	add	r3, r3, r2, lsl #3
   19de0:	sub	r0, r0, r3, lsl #6
   19de4:	rsb	r3, r0, r0, lsl #5
   19de8:	add	r0, r0, r3, lsl #2
   19dec:	lsl	r0, r0, #3
   19df0:	str	r0, [sp, #8]
   19df4:	b	19e10 <__assert_fail@plt+0x7610>
   19df8:	bl	12518 <__errno_location@plt>
   19dfc:	ldr	r3, [r0]
   19e00:	cmp	r3, #4
   19e04:	bne	19e24 <__assert_fail@plt+0x7624>
   19e08:	ldm	r5, {r0, r1}
   19e0c:	stm	r4, {r0, r1}
   19e10:	mov	r1, r5
   19e14:	mov	r0, r4
   19e18:	bl	121ac <nanosleep@plt>
   19e1c:	cmp	r0, #0
   19e20:	blt	19df8 <__assert_fail@plt+0x75f8>
   19e24:	ldr	r2, [sp, #20]
   19e28:	ldr	r3, [r6]
   19e2c:	cmp	r2, r3
   19e30:	bne	19e3c <__assert_fail@plt+0x763c>
   19e34:	add	sp, sp, #24
   19e38:	pop	{r4, r5, r6, pc}
   19e3c:	bl	12260 <__stack_chk_fail@plt>
   19e40:	andeq	r5, r3, r8, asr #22
   19e44:	tstmi	fp, #2096	; 0x830
   19e48:	bx	lr
   19e4c:	bx	lr
   19e50:	ldr	r3, [pc, #184]	; 19f10 <__assert_fail@plt+0x7710>
   19e54:	ldr	r3, [r3]
   19e58:	cmp	r3, #0
   19e5c:	cmpne	r0, #0
   19e60:	beq	19f08 <__assert_fail@plt+0x7708>
   19e64:	ldrb	r3, [r0]
   19e68:	cmp	r3, #45	; 0x2d
   19e6c:	bne	19f08 <__assert_fail@plt+0x7708>
   19e70:	ldrb	r3, [r0, #1]
   19e74:	cmp	r3, #38	; 0x26
   19e78:	bne	19f08 <__assert_fail@plt+0x7708>
   19e7c:	ldrb	r3, [r0, #2]
   19e80:	add	r0, r0, #2
   19e84:	sub	r1, r3, #48	; 0x30
   19e88:	cmp	r1, #9
   19e8c:	bhi	19ee0 <__assert_fail@plt+0x76e0>
   19e90:	mov	ip, r0
   19e94:	push	{lr}		; (str lr, [sp, #-4]!)
   19e98:	ldrb	r3, [ip, #1]!
   19e9c:	sub	lr, r3, #48	; 0x30
   19ea0:	cmp	lr, #9
   19ea4:	bls	19e98 <__assert_fail@plt+0x7698>
   19ea8:	cmp	r3, #0
   19eac:	bne	19ed8 <__assert_fail@plt+0x76d8>
   19eb0:	cmp	r2, #0
   19eb4:	beq	19ec8 <__assert_fail@plt+0x76c8>
   19eb8:	mov	r1, r3
   19ebc:	mov	r2, #10
   19ec0:	pop	{lr}		; (ldr lr, [sp], #4)
   19ec4:	b	1211c <strtol@plt>
   19ec8:	mov	r1, r2
   19ecc:	pop	{lr}		; (ldr lr, [sp], #4)
   19ed0:	mov	r2, #10
   19ed4:	b	1211c <strtol@plt>
   19ed8:	mvn	r0, #0
   19edc:	pop	{pc}		; (ldr pc, [sp], #4)
   19ee0:	cmp	r3, #0
   19ee4:	bne	19f08 <__assert_fail@plt+0x7708>
   19ee8:	cmp	r2, #0
   19eec:	beq	19efc <__assert_fail@plt+0x76fc>
   19ef0:	mov	r1, r3
   19ef4:	mov	r2, #10
   19ef8:	b	1211c <strtol@plt>
   19efc:	mov	r1, r2
   19f00:	mov	r2, #10
   19f04:	b	1211c <strtol@plt>
   19f08:	mvn	r0, #0
   19f0c:	bx	lr
   19f10:	strdeq	r6, [r3], -r0
   19f14:	b	122cc <tmpfile64@plt>
   19f18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f1c:	mov	r1, #1
   19f20:	mov	r8, r0
   19f24:	mov	r0, #0
   19f28:	bl	12614 <fcntl64@plt>
   19f2c:	cmn	r0, #1
   19f30:	beq	1a074 <__assert_fail@plt+0x7874>
   19f34:	mov	r6, #0
   19f38:	mov	r1, #1
   19f3c:	mov	r0, r1
   19f40:	bl	12614 <fcntl64@plt>
   19f44:	cmn	r0, #1
   19f48:	beq	1a0a0 <__assert_fail@plt+0x78a0>
   19f4c:	mov	r4, #0
   19f50:	mov	r1, #1
   19f54:	mov	r0, #2
   19f58:	bl	12614 <fcntl64@plt>
   19f5c:	cmn	r0, #1
   19f60:	beq	19fd0 <__assert_fail@plt+0x77d0>
   19f64:	ldr	r3, [pc, #392]	; 1a0f4 <__assert_fail@plt+0x78f4>
   19f68:	cmp	r4, #2
   19f6c:	cmpne	r6, #2
   19f70:	moveq	r7, #1
   19f74:	ldr	r5, [r3]
   19f78:	movne	r7, #0
   19f7c:	mov	r9, #0
   19f80:	cmp	r5, #0
   19f84:	beq	19fc4 <__assert_fail@plt+0x77c4>
   19f88:	cmp	r6, #1
   19f8c:	beq	1a01c <__assert_fail@plt+0x781c>
   19f90:	cmp	r4, #1
   19f94:	beq	1a038 <__assert_fail@plt+0x7838>
   19f98:	cmp	r9, #1
   19f9c:	beq	1a054 <__assert_fail@plt+0x7854>
   19fa0:	cmp	r7, #0
   19fa4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fa8:	mov	r3, r8
   19fac:	mov	r0, r5
   19fb0:	ldr	r2, [pc, #320]	; 1a0f8 <__assert_fail@plt+0x78f8>
   19fb4:	mov	r1, #1
   19fb8:	bl	125b4 <__fprintf_chk@plt>
   19fbc:	mov	r0, #3
   19fc0:	bl	1247c <exit@plt>
   19fc4:	cmp	r7, #0
   19fc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fcc:	b	19fbc <__assert_fail@plt+0x77bc>
   19fd0:	bl	12518 <__errno_location@plt>
   19fd4:	ldr	r3, [r0]
   19fd8:	cmp	r3, #9
   19fdc:	bne	19f64 <__assert_fail@plt+0x7764>
   19fe0:	mov	r1, #1
   19fe4:	ldr	r0, [pc, #272]	; 1a0fc <__assert_fail@plt+0x78fc>
   19fe8:	bl	12398 <open64@plt>
   19fec:	cmp	r0, #2
   19ff0:	beq	1a0cc <__assert_fail@plt+0x78cc>
   19ff4:	cmp	r4, #0
   19ff8:	bne	19fbc <__assert_fail@plt+0x77bc>
   19ffc:	ldr	r3, [pc, #252]	; 1a100 <__assert_fail@plt+0x7900>
   1a000:	ldr	r5, [r3]
   1a004:	cmp	r5, #0
   1a008:	beq	19fbc <__assert_fail@plt+0x77bc>
   1a00c:	cmp	r6, #1
   1a010:	bne	19fa8 <__assert_fail@plt+0x77a8>
   1a014:	mov	r7, r6
   1a018:	mov	r9, #2
   1a01c:	mov	r3, r8
   1a020:	ldr	r2, [pc, #220]	; 1a104 <__assert_fail@plt+0x7904>
   1a024:	mov	r1, #1
   1a028:	mov	r0, r5
   1a02c:	bl	125b4 <__fprintf_chk@plt>
   1a030:	cmp	r4, #1
   1a034:	bne	19f98 <__assert_fail@plt+0x7798>
   1a038:	mov	r1, r4
   1a03c:	mov	r3, r8
   1a040:	ldr	r2, [pc, #192]	; 1a108 <__assert_fail@plt+0x7908>
   1a044:	mov	r0, r5
   1a048:	bl	125b4 <__fprintf_chk@plt>
   1a04c:	cmp	r9, #1
   1a050:	bne	19fa0 <__assert_fail@plt+0x77a0>
   1a054:	mov	r1, r9
   1a058:	mov	r3, r8
   1a05c:	ldr	r2, [pc, #168]	; 1a10c <__assert_fail@plt+0x790c>
   1a060:	mov	r0, r5
   1a064:	bl	125b4 <__fprintf_chk@plt>
   1a068:	cmp	r7, #0
   1a06c:	bne	19fa8 <__assert_fail@plt+0x77a8>
   1a070:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a074:	bl	12518 <__errno_location@plt>
   1a078:	ldr	r3, [r0]
   1a07c:	cmp	r3, #9
   1a080:	bne	19f34 <__assert_fail@plt+0x7734>
   1a084:	mov	r1, #0
   1a088:	ldr	r0, [pc, #108]	; 1a0fc <__assert_fail@plt+0x78fc>
   1a08c:	bl	12398 <open64@plt>
   1a090:	cmp	r0, #0
   1a094:	moveq	r6, #1
   1a098:	movne	r6, #2
   1a09c:	b	19f38 <__assert_fail@plt+0x7738>
   1a0a0:	bl	12518 <__errno_location@plt>
   1a0a4:	ldr	r3, [r0]
   1a0a8:	cmp	r3, #9
   1a0ac:	bne	19f4c <__assert_fail@plt+0x774c>
   1a0b0:	mov	r1, #1
   1a0b4:	ldr	r0, [pc, #64]	; 1a0fc <__assert_fail@plt+0x78fc>
   1a0b8:	bl	12398 <open64@plt>
   1a0bc:	cmp	r0, #1
   1a0c0:	mov	r4, r0
   1a0c4:	movne	r4, #2
   1a0c8:	b	19f50 <__assert_fail@plt+0x7750>
   1a0cc:	cmp	r4, #2
   1a0d0:	cmpne	r6, #2
   1a0d4:	moveq	r7, #1
   1a0d8:	movne	r7, #0
   1a0dc:	cmp	r4, #0
   1a0e0:	bne	19fc4 <__assert_fail@plt+0x77c4>
   1a0e4:	ldr	r3, [pc, #20]	; 1a100 <__assert_fail@plt+0x7900>
   1a0e8:	mov	r9, #1
   1a0ec:	ldr	r5, [r3]
   1a0f0:	b	19f80 <__assert_fail@plt+0x7780>
   1a0f4:	andeq	r6, r3, r0, asr r1
   1a0f8:	ldrdeq	r3, [r2], -r8
   1a0fc:	andeq	r3, r2, r4, asr r2
   1a100:	andeq	r6, r3, ip, asr r1
   1a104:	andeq	r3, r2, r0, ror #4
   1a108:	andeq	r3, r2, r8, lsl #5
   1a10c:			; <UNDEFINED> instruction: 0x000232b0
   1a110:	subs	r2, r0, #0
   1a114:	bxne	lr
   1a118:	ldr	r1, [pc, #4]	; 1a124 <__assert_fail@plt+0x7924>
   1a11c:	ldr	r0, [pc, #4]	; 1a128 <__assert_fail@plt+0x7928>
   1a120:	b	19568 <__assert_fail@plt+0x6d68>
   1a124:	andeq	r3, r2, r8, lsl r3
   1a128:	andeq	r3, r2, ip, lsr r3
   1a12c:	b	126d4 <remove@plt>
   1a130:	push	{r4, r5, r6, r7, r8, lr}
   1a134:	subs	r8, r2, #0
   1a138:	mov	r6, r0
   1a13c:	mov	r7, r1
   1a140:	beq	1a1f4 <__assert_fail@plt+0x79f4>
   1a144:	ldr	r3, [r8]
   1a148:	cmp	r3, #0
   1a14c:	bne	1a1ec <__assert_fail@plt+0x79ec>
   1a150:	mov	r1, r7
   1a154:	mov	r0, r6
   1a158:	bl	12434 <rename@plt>
   1a15c:	cmp	r0, #0
   1a160:	bne	1a170 <__assert_fail@plt+0x7970>
   1a164:	mov	r4, #0
   1a168:	mov	r0, r4
   1a16c:	pop	{r4, r5, r6, r7, r8, pc}
   1a170:	ldr	r3, [pc, #184]	; 1a230 <__assert_fail@plt+0x7a30>
   1a174:	ldr	r4, [r3]
   1a178:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a17c:	cmp	r0, #0
   1a180:	beq	1a164 <__assert_fail@plt+0x7964>
   1a184:	ldr	r3, [r8]
   1a188:	lsl	r4, r4, #24
   1a18c:	and	r4, r4, #2130706432	; 0x7f000000
   1a190:	uxth	r0, r0
   1a194:	cmp	r3, #0
   1a198:	orr	r4, r4, r0
   1a19c:	beq	1a224 <__assert_fail@plt+0x7a24>
   1a1a0:	cmp	r4, #0
   1a1a4:	beq	1a164 <__assert_fail@plt+0x7964>
   1a1a8:	bl	1fe90 <__assert_fail@plt+0xd690>
   1a1ac:	mov	r3, #0
   1a1b0:	str	r3, [r8]
   1a1b4:	mov	r2, #5
   1a1b8:	ldr	r1, [pc, #116]	; 1a234 <__assert_fail@plt+0x7a34>
   1a1bc:	mov	r0, #0
   1a1c0:	bl	12254 <dcgettext@plt>
   1a1c4:	mov	r5, r0
   1a1c8:	mov	r0, r4
   1a1cc:	bl	12698 <gpg_strerror@plt>
   1a1d0:	mov	r2, r7
   1a1d4:	mov	r1, r6
   1a1d8:	mov	r3, r0
   1a1dc:	mov	r0, r5
   1a1e0:	bl	195cc <__assert_fail@plt+0x6dcc>
   1a1e4:	mov	r0, r4
   1a1e8:	pop	{r4, r5, r6, r7, r8, pc}
   1a1ec:	bl	1fe1c <__assert_fail@plt+0xd61c>
   1a1f0:	b	1a150 <__assert_fail@plt+0x7950>
   1a1f4:	bl	12434 <rename@plt>
   1a1f8:	cmp	r0, #0
   1a1fc:	beq	1a164 <__assert_fail@plt+0x7964>
   1a200:	ldr	r3, [pc, #40]	; 1a230 <__assert_fail@plt+0x7a30>
   1a204:	ldr	r4, [r3]
   1a208:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a20c:	cmp	r0, #0
   1a210:	beq	1a164 <__assert_fail@plt+0x7964>
   1a214:	lsl	r4, r4, #24
   1a218:	and	r4, r4, #2130706432	; 0x7f000000
   1a21c:	uxth	r0, r0
   1a220:	orr	r4, r4, r0
   1a224:	cmp	r4, #0
   1a228:	bne	1a1b4 <__assert_fail@plt+0x79b4>
   1a22c:	b	1a164 <__assert_fail@plt+0x7964>
   1a230:	andeq	r6, r3, ip, ror #3
   1a234:	andeq	r3, r2, ip, asr r3
   1a238:	subs	r3, r1, #0
   1a23c:	push	{r4, lr}
   1a240:	moveq	r1, r3
   1a244:	mov	r4, r0
   1a248:	beq	1a264 <__assert_fail@plt+0x7a64>
   1a24c:	ldrb	r1, [r3]
   1a250:	cmp	r1, #0
   1a254:	beq	1a264 <__assert_fail@plt+0x7a64>
   1a258:	mov	r0, r3
   1a25c:	bl	19b20 <__assert_fail@plt+0x7320>
   1a260:	mov	r1, r0
   1a264:	mov	r0, r4
   1a268:	pop	{r4, lr}
   1a26c:	b	12554 <mkdir@plt>
   1a270:	b	122d8 <chdir@plt>
   1a274:	subs	r3, r1, #0
   1a278:	push	{r4, lr}
   1a27c:	moveq	r1, r3
   1a280:	mov	r4, r0
   1a284:	beq	1a2a0 <__assert_fail@plt+0x7aa0>
   1a288:	ldrb	r1, [r3]
   1a28c:	cmp	r1, #0
   1a290:	beq	1a2a0 <__assert_fail@plt+0x7aa0>
   1a294:	mov	r0, r3
   1a298:	bl	19b20 <__assert_fail@plt+0x7320>
   1a29c:	mov	r1, r0
   1a2a0:	mov	r0, r4
   1a2a4:	pop	{r4, lr}
   1a2a8:	b	12758 <chmod@plt>
   1a2ac:	ldr	r3, [pc, #476]	; 1a490 <__assert_fail@plt+0x7c90>
   1a2b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2b4:	sub	sp, sp, #28
   1a2b8:	ldr	r3, [r3]
   1a2bc:	mov	r9, r0
   1a2c0:	str	r3, [sp, #20]
   1a2c4:	bl	124b8 <strlen@plt>
   1a2c8:	cmp	r0, #5
   1a2cc:	bls	1a464 <__assert_fail@plt+0x7c64>
   1a2d0:	sub	r0, r0, #6
   1a2d4:	add	r6, r9, r0
   1a2d8:	mov	r0, r6
   1a2dc:	ldr	r1, [pc, #432]	; 1a494 <__assert_fail@plt+0x7c94>
   1a2e0:	bl	12104 <strcmp@plt>
   1a2e4:	cmp	r0, #0
   1a2e8:	bne	1a464 <__assert_fail@plt+0x7c64>
   1a2ec:	bl	12518 <__errno_location@plt>
   1a2f0:	mov	r1, #8
   1a2f4:	ldr	r8, [pc, #412]	; 1a498 <__assert_fail@plt+0x7c98>
   1a2f8:	ldr	r7, [pc, #412]	; 1a49c <__assert_fail@plt+0x7c9c>
   1a2fc:	ldr	fp, [pc, #412]	; 1a4a0 <__assert_fail@plt+0x7ca0>
   1a300:	mov	sl, r0
   1a304:	add	r0, sp, r1
   1a308:	ldr	r3, [sl]
   1a30c:	str	r3, [sp, #4]
   1a310:	bl	126ec <gcry_create_nonce@plt>
   1a314:	ldrd	r4, [sp, #8]
   1a318:	b	1a344 <__assert_fail@plt+0x7b44>
   1a31c:	ldr	r0, [sl]
   1a320:	cmp	r0, #17
   1a324:	bne	1a474 <__assert_fail@plt+0x7c74>
   1a328:	ldrd	r4, [sp, #8]
   1a32c:	ldr	r3, [pc, #368]	; 1a4a4 <__assert_fail@plt+0x7ca4>
   1a330:	adds	r4, r4, r3
   1a334:	adc	r5, r5, #0
   1a338:	subs	r8, r8, #1
   1a33c:	strd	r4, [sp, #8]
   1a340:	beq	1a468 <__assert_fail@plt+0x7c68>
   1a344:	mov	r2, #62	; 0x3e
   1a348:	mov	r3, #0
   1a34c:	mov	r0, r4
   1a350:	mov	r1, r5
   1a354:	bl	21f90 <__assert_fail@plt+0xf790>
   1a358:	mov	r3, #0
   1a35c:	mov	r0, r4
   1a360:	mov	r1, r5
   1a364:	ldrb	ip, [r7, r2]
   1a368:	mov	r2, #62	; 0x3e
   1a36c:	strb	ip, [r6]
   1a370:	bl	21f90 <__assert_fail@plt+0xf790>
   1a374:	mov	r2, #62	; 0x3e
   1a378:	mov	r3, #0
   1a37c:	bl	21f90 <__assert_fail@plt+0xf790>
   1a380:	mov	r3, #0
   1a384:	mov	r0, r4
   1a388:	mov	r1, r5
   1a38c:	ldrb	ip, [r7, r2]
   1a390:	ldr	r2, [pc, #272]	; 1a4a8 <__assert_fail@plt+0x7ca8>
   1a394:	strb	ip, [r6, #1]
   1a398:	bl	21f90 <__assert_fail@plt+0xf790>
   1a39c:	mov	r2, #62	; 0x3e
   1a3a0:	mov	r3, #0
   1a3a4:	bl	21f90 <__assert_fail@plt+0xf790>
   1a3a8:	mov	r3, #0
   1a3ac:	mov	r0, r4
   1a3b0:	mov	r1, r5
   1a3b4:	ldrb	ip, [r7, r2]
   1a3b8:	ldr	r2, [pc, #216]	; 1a498 <__assert_fail@plt+0x7c98>
   1a3bc:	strb	ip, [r6, #2]
   1a3c0:	bl	21f90 <__assert_fail@plt+0xf790>
   1a3c4:	mov	r2, #62	; 0x3e
   1a3c8:	mov	r3, #0
   1a3cc:	bl	21f90 <__assert_fail@plt+0xf790>
   1a3d0:	mov	r0, r4
   1a3d4:	mov	r1, r5
   1a3d8:	ldrb	ip, [r7, r2]
   1a3dc:	add	r3, pc, #156	; 0x9c
   1a3e0:	ldrd	r2, [r3]
   1a3e4:	strb	ip, [r6, #3]
   1a3e8:	bl	21f90 <__assert_fail@plt+0xf790>
   1a3ec:	mov	r2, #62	; 0x3e
   1a3f0:	mov	r3, #0
   1a3f4:	bl	21f90 <__assert_fail@plt+0xf790>
   1a3f8:	mov	r0, r4
   1a3fc:	mov	r1, r5
   1a400:	ldrb	ip, [r7, r2]
   1a404:	add	r3, pc, #124	; 0x7c
   1a408:	ldrd	r2, [r3]
   1a40c:	strb	ip, [r6, #4]
   1a410:	bl	21f90 <__assert_fail@plt+0xf790>
   1a414:	mov	r2, #62	; 0x3e
   1a418:	mov	r3, #0
   1a41c:	bl	21f90 <__assert_fail@plt+0xf790>
   1a420:	mov	r1, fp
   1a424:	mov	r0, r9
   1a428:	ldrb	r3, [r7, r2]
   1a42c:	strb	r3, [r6, #5]
   1a430:	bl	1a238 <__assert_fail@plt+0x7a38>
   1a434:	cmp	r0, #0
   1a438:	bne	1a31c <__assert_fail@plt+0x7b1c>
   1a43c:	ldr	r0, [sp, #4]
   1a440:	bl	1268c <gpg_err_set_errno@plt>
   1a444:	mov	r0, r9
   1a448:	ldr	r3, [pc, #64]	; 1a490 <__assert_fail@plt+0x7c90>
   1a44c:	ldr	r2, [sp, #20]
   1a450:	ldr	r3, [r3]
   1a454:	cmp	r2, r3
   1a458:	bne	1a47c <__assert_fail@plt+0x7c7c>
   1a45c:	add	sp, sp, #28
   1a460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a464:	mov	r0, #22
   1a468:	bl	1268c <gpg_err_set_errno@plt>
   1a46c:	mov	r0, #0
   1a470:	b	1a448 <__assert_fail@plt+0x7c48>
   1a474:	mov	r0, #0
   1a478:	b	1a448 <__assert_fail@plt+0x7c48>
   1a47c:	bl	12260 <__stack_chk_fail@plt>
   1a480:	rsceq	r7, r1, r0, lsl r8
   1a484:	andeq	r0, r0, r0
   1a488:	ldrcc	r1, [fp], r0, ror #7
   1a48c:	andeq	r0, r0, r0
   1a490:	andeq	r5, r3, r8, asr #22
   1a494:	ldrdeq	r2, [r2], -r4
   1a498:	strdeq	sl, [r3], -r8
   1a49c:	strdeq	r3, [r2], -r4
   1a4a0:	andeq	r3, r2, r0, lsl #7
   1a4a4:	andeq	r1, r0, r1, ror #28
   1a4a8:	andeq	r0, r0, r4, lsl #30
   1a4ac:	b	124dc <setenv@plt>
   1a4b0:	b	1277c <unsetenv@plt>
   1a4b4:	push	{r4, r5, r6, lr}
   1a4b8:	mov	r4, #100	; 0x64
   1a4bc:	b	1a4e8 <__assert_fail@plt+0x7ce8>
   1a4c0:	bl	12464 <getcwd@plt>
   1a4c4:	mov	r3, r0
   1a4c8:	cmp	r5, r3
   1a4cc:	mov	r0, r5
   1a4d0:	beq	1a504 <__assert_fail@plt+0x7d04>
   1a4d4:	bl	12218 <gcry_free@plt>
   1a4d8:	bl	12518 <__errno_location@plt>
   1a4dc:	ldr	r3, [r0]
   1a4e0:	cmp	r3, #34	; 0x22
   1a4e4:	bne	1a500 <__assert_fail@plt+0x7d00>
   1a4e8:	add	r0, r4, #1
   1a4ec:	bl	120bc <gcry_malloc@plt>
   1a4f0:	mov	r1, r4
   1a4f4:	lsl	r4, r4, #1
   1a4f8:	subs	r5, r0, #0
   1a4fc:	bne	1a4c0 <__assert_fail@plt+0x7cc0>
   1a500:	mov	r3, #0
   1a504:	mov	r0, r3
   1a508:	pop	{r4, r5, r6, pc}
   1a50c:	push	{r4, r5, r6, lr}
   1a510:	mvn	r3, #0
   1a514:	subs	r4, r1, #0
   1a518:	str	r3, [r0]
   1a51c:	beq	1a558 <__assert_fail@plt+0x7d58>
   1a520:	mov	r5, r0
   1a524:	bl	124c4 <inotify_init@plt>
   1a528:	cmn	r0, #1
   1a52c:	mov	r6, r0
   1a530:	beq	1a5a0 <__assert_fail@plt+0x7da0>
   1a534:	mov	r1, r4
   1a538:	mov	r2, #1024	; 0x400
   1a53c:	bl	1250c <inotify_add_watch@plt>
   1a540:	cmn	r0, #1
   1a544:	movne	r4, #0
   1a548:	strne	r6, [r5]
   1a54c:	beq	1a574 <__assert_fail@plt+0x7d74>
   1a550:	mov	r0, r4
   1a554:	pop	{r4, r5, r6, pc}
   1a558:	ldr	r3, [pc, #100]	; 1a5c4 <__assert_fail@plt+0x7dc4>
   1a55c:	ldr	r4, [r3]
   1a560:	lsl	r4, r4, #24
   1a564:	and	r4, r4, #2130706432	; 0x7f000000
   1a568:	orr	r4, r4, #55	; 0x37
   1a56c:	mov	r0, r4
   1a570:	pop	{r4, r5, r6, pc}
   1a574:	ldr	r3, [pc, #72]	; 1a5c4 <__assert_fail@plt+0x7dc4>
   1a578:	ldr	r5, [r3]
   1a57c:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a580:	subs	r4, r0, #0
   1a584:	lslne	r5, r5, #24
   1a588:	andne	r5, r5, #2130706432	; 0x7f000000
   1a58c:	uxthne	r4, r4
   1a590:	mov	r0, r6
   1a594:	orrne	r4, r5, r4
   1a598:	bl	127c4 <close@plt>
   1a59c:	b	1a550 <__assert_fail@plt+0x7d50>
   1a5a0:	ldr	r3, [pc, #28]	; 1a5c4 <__assert_fail@plt+0x7dc4>
   1a5a4:	ldr	r5, [r3]
   1a5a8:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a5ac:	subs	r4, r0, #0
   1a5b0:	lslne	r5, r5, #24
   1a5b4:	andne	r5, r5, #2130706432	; 0x7f000000
   1a5b8:	uxthne	r4, r4
   1a5bc:	orrne	r4, r5, r4
   1a5c0:	b	1a550 <__assert_fail@plt+0x7d50>
   1a5c4:	andeq	r6, r3, ip, ror #3
   1a5c8:	mvn	r3, #0
   1a5cc:	cmp	r1, #0
   1a5d0:	push	{r4, r5, r6, r7, r8, lr}
   1a5d4:	str	r3, [r0]
   1a5d8:	beq	1a648 <__assert_fail@plt+0x7e48>
   1a5dc:	mov	r5, r0
   1a5e0:	mov	r0, r1
   1a5e4:	bl	127d0 <gcry_strdup@plt>
   1a5e8:	subs	r6, r0, #0
   1a5ec:	beq	1a69c <__assert_fail@plt+0x7e9c>
   1a5f0:	bl	124c4 <inotify_init@plt>
   1a5f4:	cmn	r0, #1
   1a5f8:	mov	r7, r0
   1a5fc:	beq	1a6c0 <__assert_fail@plt+0x7ec0>
   1a600:	mov	r1, #47	; 0x2f
   1a604:	mov	r0, r6
   1a608:	bl	12668 <strrchr@plt>
   1a60c:	ldr	r2, [pc, #208]	; 1a6e4 <__assert_fail@plt+0x7ee4>
   1a610:	mov	r1, r6
   1a614:	cmp	r0, #0
   1a618:	movne	r3, #0
   1a61c:	strbne	r3, [r0]
   1a620:	mov	r0, r7
   1a624:	bl	1250c <inotify_add_watch@plt>
   1a628:	cmn	r0, #1
   1a62c:	beq	1a664 <__assert_fail@plt+0x7e64>
   1a630:	mov	r4, #0
   1a634:	mov	r0, r6
   1a638:	bl	12218 <gcry_free@plt>
   1a63c:	str	r7, [r5]
   1a640:	mov	r0, r4
   1a644:	pop	{r4, r5, r6, r7, r8, pc}
   1a648:	ldr	r3, [pc, #152]	; 1a6e8 <__assert_fail@plt+0x7ee8>
   1a64c:	ldr	r4, [r3]
   1a650:	lsl	r4, r4, #24
   1a654:	and	r4, r4, #2130706432	; 0x7f000000
   1a658:	orr	r4, r4, #55	; 0x37
   1a65c:	mov	r0, r4
   1a660:	pop	{r4, r5, r6, r7, r8, pc}
   1a664:	ldr	r3, [pc, #124]	; 1a6e8 <__assert_fail@plt+0x7ee8>
   1a668:	ldr	r5, [r3]
   1a66c:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a670:	subs	r4, r0, #0
   1a674:	lslne	r5, r5, #24
   1a678:	andne	r5, r5, #2130706432	; 0x7f000000
   1a67c:	uxthne	r4, r4
   1a680:	mov	r0, r7
   1a684:	orrne	r4, r5, r4
   1a688:	bl	127c4 <close@plt>
   1a68c:	mov	r0, r6
   1a690:	bl	12218 <gcry_free@plt>
   1a694:	mov	r0, r4
   1a698:	pop	{r4, r5, r6, r7, r8, pc}
   1a69c:	ldr	r3, [pc, #68]	; 1a6e8 <__assert_fail@plt+0x7ee8>
   1a6a0:	ldr	r5, [r3]
   1a6a4:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a6a8:	subs	r4, r0, #0
   1a6ac:	lslne	r5, r5, #24
   1a6b0:	andne	r5, r5, #2130706432	; 0x7f000000
   1a6b4:	uxthne	r4, r4
   1a6b8:	orrne	r4, r5, r4
   1a6bc:	b	1a640 <__assert_fail@plt+0x7e40>
   1a6c0:	ldr	r3, [pc, #32]	; 1a6e8 <__assert_fail@plt+0x7ee8>
   1a6c4:	ldr	r5, [r3]
   1a6c8:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a6cc:	subs	r4, r0, #0
   1a6d0:	lslne	r5, r5, #24
   1a6d4:	andne	r5, r5, #2130706432	; 0x7f000000
   1a6d8:	uxthne	r4, r4
   1a6dc:	orrne	r4, r5, r4
   1a6e0:	b	1a68c <__assert_fail@plt+0x7e8c>
   1a6e4:	streq	r0, [r0], #-1536	; 0xfffffa00
   1a6e8:	andeq	r6, r3, ip, ror #3
   1a6ec:	mov	r0, #0
   1a6f0:	bx	lr
   1a6f4:	push	{r4, r5, r6, r7, r8, lr}
   1a6f8:	sub	sp, sp, #120	; 0x78
   1a6fc:	ldr	r5, [pc, #316]	; 1a840 <__assert_fail@plt+0x8040>
   1a700:	mov	r4, #110	; 0x6e
   1a704:	mov	r2, sp
   1a708:	ldr	r3, [r5]
   1a70c:	add	r1, sp, #4
   1a710:	str	r3, [sp, #116]	; 0x74
   1a714:	str	r4, [sp]
   1a718:	mov	r8, r0
   1a71c:	bl	126bc <getsockname@plt>
   1a720:	subs	r7, r0, #0
   1a724:	bne	1a7b0 <__assert_fail@plt+0x7fb0>
   1a728:	ldrh	r3, [sp, #4]
   1a72c:	cmp	r3, #1
   1a730:	bne	1a788 <__assert_fail@plt+0x7f88>
   1a734:	ldr	r3, [sp]
   1a738:	cmp	r3, #2
   1a73c:	bls	1a79c <__assert_fail@plt+0x7f9c>
   1a740:	cmp	r3, #110	; 0x6e
   1a744:	bhi	1a7ec <__assert_fail@plt+0x7fec>
   1a748:	sub	r0, r3, #1
   1a74c:	sub	r4, r3, #2
   1a750:	bl	120bc <gcry_malloc@plt>
   1a754:	subs	r6, r0, #0
   1a758:	beq	1a804 <__assert_fail@plt+0x8004>
   1a75c:	mov	r2, r4
   1a760:	add	r1, sp, #6
   1a764:	bl	121dc <memcpy@plt>
   1a768:	strb	r7, [r6, r4]
   1a76c:	ldr	r2, [sp, #116]	; 0x74
   1a770:	ldr	r3, [r5]
   1a774:	mov	r0, r6
   1a778:	cmp	r2, r3
   1a77c:	bne	1a83c <__assert_fail@plt+0x803c>
   1a780:	add	sp, sp, #120	; 0x78
   1a784:	pop	{r4, r5, r6, r7, r8, pc}
   1a788:	mov	r1, r8
   1a78c:	ldr	r0, [pc, #176]	; 1a844 <__assert_fail@plt+0x8044>
   1a790:	mov	r6, r7
   1a794:	bl	195cc <__assert_fail@plt+0x6dcc>
   1a798:	b	1a76c <__assert_fail@plt+0x7f6c>
   1a79c:	mov	r1, r8
   1a7a0:	ldr	r0, [pc, #160]	; 1a848 <__assert_fail@plt+0x8048>
   1a7a4:	mov	r6, r7
   1a7a8:	bl	195cc <__assert_fail@plt+0x6dcc>
   1a7ac:	b	1a76c <__assert_fail@plt+0x7f6c>
   1a7b0:	ldr	r3, [pc, #148]	; 1a84c <__assert_fail@plt+0x804c>
   1a7b4:	mov	r6, #0
   1a7b8:	ldr	r4, [r3]
   1a7bc:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a7c0:	cmp	r0, #0
   1a7c4:	lslne	r4, r4, #24
   1a7c8:	andne	r4, r4, #2130706432	; 0x7f000000
   1a7cc:	uxthne	r0, r0
   1a7d0:	orrne	r0, r4, r0
   1a7d4:	bl	12698 <gpg_strerror@plt>
   1a7d8:	mov	r1, r8
   1a7dc:	mov	r2, r0
   1a7e0:	ldr	r0, [pc, #104]	; 1a850 <__assert_fail@plt+0x8050>
   1a7e4:	bl	195cc <__assert_fail@plt+0x6dcc>
   1a7e8:	b	1a76c <__assert_fail@plt+0x7f6c>
   1a7ec:	mov	r2, r4
   1a7f0:	mov	r1, r8
   1a7f4:	ldr	r0, [pc, #88]	; 1a854 <__assert_fail@plt+0x8054>
   1a7f8:	mov	r6, r7
   1a7fc:	bl	195cc <__assert_fail@plt+0x6dcc>
   1a800:	b	1a76c <__assert_fail@plt+0x7f6c>
   1a804:	ldr	r3, [pc, #64]	; 1a84c <__assert_fail@plt+0x804c>
   1a808:	ldr	r4, [r3]
   1a80c:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1a810:	cmp	r0, #0
   1a814:	lslne	r4, r4, #24
   1a818:	andne	r4, r4, #2130706432	; 0x7f000000
   1a81c:	uxthne	r0, r0
   1a820:	orrne	r0, r4, r0
   1a824:	bl	12698 <gpg_strerror@plt>
   1a828:	mov	r1, r8
   1a82c:	mov	r2, r0
   1a830:	ldr	r0, [pc, #32]	; 1a858 <__assert_fail@plt+0x8058>
   1a834:	bl	195cc <__assert_fail@plt+0x6dcc>
   1a838:	b	1a76c <__assert_fail@plt+0x7f6c>
   1a83c:	bl	12260 <__stack_chk_fail@plt>
   1a840:	andeq	r5, r3, r8, asr #22
   1a844:	andeq	r3, r2, r8, lsr #7
   1a848:	ldrdeq	r3, [r2], -r8
   1a84c:	andeq	r6, r3, ip, ror #3
   1a850:	andeq	r3, r2, r8, lsl #7
   1a854:	andeq	r3, r2, r8, lsl #8
   1a858:	andeq	r3, r2, r8, asr r4
   1a85c:	push	{r4, lr}
   1a860:	bl	122a8 <dup@plt>
   1a864:	cmp	r0, #0
   1a868:	blt	1a878 <__assert_fail@plt+0x8078>
   1a86c:	bl	127c4 <close@plt>
   1a870:	mov	r0, #1
   1a874:	pop	{r4, pc}
   1a878:	mov	r0, #0
   1a87c:	pop	{r4, pc}
   1a880:	ldr	r0, [pc]	; 1a888 <__assert_fail@plt+0x8088>
   1a884:	bx	lr
   1a888:	andeq	r3, r2, r0, asr #9
   1a88c:	push	{r4, r5, r6, lr}
   1a890:	mov	r1, #0
   1a894:	bl	15298 <__assert_fail@plt+0x2a98>
   1a898:	mov	r1, #0
   1a89c:	mov	r4, r0
   1a8a0:	ldr	r0, [pc, #48]	; 1a8d8 <__assert_fail@plt+0x80d8>
   1a8a4:	bl	15298 <__assert_fail@plt+0x2a98>
   1a8a8:	mov	r1, r0
   1a8ac:	mov	r5, r0
   1a8b0:	mov	r0, r4
   1a8b4:	bl	15348 <__assert_fail@plt+0x2b48>
   1a8b8:	mov	r6, r0
   1a8bc:	mov	r0, r5
   1a8c0:	bl	12218 <gcry_free@plt>
   1a8c4:	mov	r0, r4
   1a8c8:	bl	12218 <gcry_free@plt>
   1a8cc:	clz	r0, r6
   1a8d0:	lsr	r0, r0, #5
   1a8d4:	pop	{r4, r5, r6, pc}
   1a8d8:	andeq	r3, r2, ip, asr #9
   1a8dc:	push	{r4, r5, r6, lr}
   1a8e0:	cmp	r0, #0
   1a8e4:	ldr	r5, [pc, #152]	; 1a984 <__assert_fail@plt+0x8184>
   1a8e8:	ldr	r4, [r5]
   1a8ec:	bne	1a900 <__assert_fail@plt+0x8100>
   1a8f0:	cmp	r4, #0
   1a8f4:	beq	1a910 <__assert_fail@plt+0x8110>
   1a8f8:	mov	r0, r4
   1a8fc:	pop	{r4, r5, r6, pc}
   1a900:	mov	r0, r4
   1a904:	bl	12218 <gcry_free@plt>
   1a908:	mov	r3, #0
   1a90c:	str	r3, [r5]
   1a910:	bl	1a880 <__assert_fail@plt+0x8080>
   1a914:	mov	r2, #0
   1a918:	ldr	r1, [pc, #104]	; 1a988 <__assert_fail@plt+0x8188>
   1a91c:	mov	r6, r0
   1a920:	bl	15850 <__assert_fail@plt+0x3050>
   1a924:	mov	r1, #0
   1a928:	mov	r4, r0
   1a92c:	bl	125cc <access@plt>
   1a930:	cmp	r0, #0
   1a934:	beq	1a974 <__assert_fail@plt+0x8174>
   1a938:	mov	r2, #0
   1a93c:	ldr	r1, [pc, #72]	; 1a98c <__assert_fail@plt+0x818c>
   1a940:	mov	r0, r6
   1a944:	str	r4, [r5]
   1a948:	bl	15850 <__assert_fail@plt+0x3050>
   1a94c:	mov	r1, #0
   1a950:	mov	r4, r0
   1a954:	bl	125cc <access@plt>
   1a958:	cmp	r0, #0
   1a95c:	beq	1a974 <__assert_fail@plt+0x8174>
   1a960:	mov	r0, r4
   1a964:	bl	12218 <gcry_free@plt>
   1a968:	ldr	r4, [r5]
   1a96c:	mov	r0, r4
   1a970:	pop	{r4, r5, r6, pc}
   1a974:	ldr	r0, [r5]
   1a978:	bl	12218 <gcry_free@plt>
   1a97c:	str	r4, [r5]
   1a980:	b	1a8f8 <__assert_fail@plt+0x80f8>
   1a984:	andeq	r6, r3, r0, lsl #4
   1a988:	ldrdeq	r3, [r2], -r8
   1a98c:	andeq	r3, r2, r4, ror #9
   1a990:	push	{r4, lr}
   1a994:	ldrb	r4, [r0]
   1a998:	cmp	r4, #0
   1a99c:	beq	1a9bc <__assert_fail@plt+0x81bc>
   1a9a0:	mov	r4, r0
   1a9a4:	bl	124b8 <strlen@plt>
   1a9a8:	add	r0, r4, r0
   1a9ac:	ldrb	r3, [r0, #-1]
   1a9b0:	cmp	r3, #47	; 0x2f
   1a9b4:	movne	r4, #0
   1a9b8:	beq	1a9c4 <__assert_fail@plt+0x81c4>
   1a9bc:	mov	r0, r4
   1a9c0:	pop	{r4, pc}
   1a9c4:	mov	r0, r4
   1a9c8:	bl	125c0 <gcry_xstrdup@plt>
   1a9cc:	mov	r4, r0
   1a9d0:	bl	124b8 <strlen@plt>
   1a9d4:	sub	r0, r0, #1
   1a9d8:	add	r3, r4, r0
   1a9dc:	cmp	r4, r3
   1a9e0:	bcs	1a9bc <__assert_fail@plt+0x81bc>
   1a9e4:	ldrb	r2, [r4, r0]
   1a9e8:	cmp	r2, #47	; 0x2f
   1a9ec:	bne	1a9bc <__assert_fail@plt+0x81bc>
   1a9f0:	mov	r1, #0
   1a9f4:	b	1aa04 <__assert_fail@plt+0x8204>
   1a9f8:	ldrb	r2, [r3]
   1a9fc:	cmp	r2, #47	; 0x2f
   1aa00:	bne	1a9bc <__assert_fail@plt+0x81bc>
   1aa04:	strb	r1, [r3], #-1
   1aa08:	cmp	r4, r3
   1aa0c:	bne	1a9f8 <__assert_fail@plt+0x81f8>
   1aa10:	mov	r0, r4
   1aa14:	pop	{r4, pc}
   1aa18:	ldr	r0, [pc]	; 1aa20 <__assert_fail@plt+0x8220>
   1aa1c:	bx	lr
   1aa20:	andeq	r3, r2, ip, asr #9
   1aa24:	push	{r4, lr}
   1aa28:	ldr	r0, [pc, #80]	; 1aa80 <__assert_fail@plt+0x8280>
   1aa2c:	bl	123a4 <getenv@plt>
   1aa30:	subs	r4, r0, #0
   1aa34:	beq	1aa44 <__assert_fail@plt+0x8244>
   1aa38:	ldrb	r3, [r4]
   1aa3c:	cmp	r3, #0
   1aa40:	bne	1aa50 <__assert_fail@plt+0x8250>
   1aa44:	ldr	r4, [pc, #56]	; 1aa84 <__assert_fail@plt+0x8284>
   1aa48:	mov	r0, r4
   1aa4c:	pop	{r4, pc}
   1aa50:	bl	1a990 <__assert_fail@plt+0x8190>
   1aa54:	cmp	r0, #0
   1aa58:	movne	r4, r0
   1aa5c:	mov	r0, r4
   1aa60:	bl	1a88c <__assert_fail@plt+0x808c>
   1aa64:	cmp	r0, #0
   1aa68:	bne	1aa48 <__assert_fail@plt+0x8248>
   1aa6c:	ldr	r3, [pc, #20]	; 1aa88 <__assert_fail@plt+0x8288>
   1aa70:	mov	r2, #1
   1aa74:	mov	r0, r4
   1aa78:	strb	r2, [r3, #4]
   1aa7c:	pop	{r4, pc}
   1aa80:	strdeq	r3, [r2], -r4
   1aa84:	andeq	r3, r2, ip, asr #9
   1aa88:	andeq	r6, r3, r0, lsl #4
   1aa8c:	push	{r4, r5, r6, lr}
   1aa90:	subs	r4, r0, #0
   1aa94:	beq	1aaa4 <__assert_fail@plt+0x82a4>
   1aa98:	ldrb	r3, [r4]
   1aa9c:	cmp	r3, #0
   1aaa0:	bne	1aad8 <__assert_fail@plt+0x82d8>
   1aaa4:	bl	1aa24 <__assert_fail@plt+0x8224>
   1aaa8:	ldr	r5, [pc, #80]	; 1ab00 <__assert_fail@plt+0x8300>
   1aaac:	mov	r6, #0
   1aab0:	mov	r4, r0
   1aab4:	ldr	r0, [r5, #8]
   1aab8:	bl	12218 <gcry_free@plt>
   1aabc:	mov	r0, r4
   1aac0:	mov	r1, #0
   1aac4:	bl	15298 <__assert_fail@plt+0x2a98>
   1aac8:	str	r0, [r5, #8]
   1aacc:	mov	r0, r6
   1aad0:	pop	{r4, r5, r6, lr}
   1aad4:	b	12218 <gcry_free@plt>
   1aad8:	bl	1a990 <__assert_fail@plt+0x8190>
   1aadc:	ldr	r5, [pc, #28]	; 1ab00 <__assert_fail@plt+0x8300>
   1aae0:	subs	r6, r0, #0
   1aae4:	movne	r4, r6
   1aae8:	mov	r0, r4
   1aaec:	bl	1a88c <__assert_fail@plt+0x808c>
   1aaf0:	cmp	r0, #0
   1aaf4:	moveq	r3, #1
   1aaf8:	strbeq	r3, [r5, #4]
   1aafc:	b	1aab4 <__assert_fail@plt+0x82b4>
   1ab00:	andeq	r6, r3, r0, lsl #4
   1ab04:	push	{r4, r5, r6, lr}
   1ab08:	ldr	r5, [pc, #44]	; 1ab3c <__assert_fail@plt+0x833c>
   1ab0c:	ldr	r4, [r5, #8]
   1ab10:	cmp	r4, #0
   1ab14:	beq	1ab20 <__assert_fail@plt+0x8320>
   1ab18:	mov	r0, r4
   1ab1c:	pop	{r4, r5, r6, pc}
   1ab20:	bl	1aa24 <__assert_fail@plt+0x8224>
   1ab24:	mov	r1, r4
   1ab28:	bl	15298 <__assert_fail@plt+0x2a98>
   1ab2c:	mov	r4, r0
   1ab30:	str	r0, [r5, #8]
   1ab34:	mov	r0, r4
   1ab38:	pop	{r4, r5, r6, pc}
   1ab3c:	andeq	r6, r3, r0, lsl #4
   1ab40:	ldr	r3, [pc, #12]	; 1ab54 <__assert_fail@plt+0x8354>
   1ab44:	ldrb	r0, [r3, #4]
   1ab48:	clz	r0, r0
   1ab4c:	lsr	r0, r0, #5
   1ab50:	bx	lr
   1ab54:	andeq	r6, r3, r0, lsl #4
   1ab58:	ldr	r0, [pc]	; 1ab60 <__assert_fail@plt+0x8360>
   1ab5c:	bx	lr
   1ab60:	andeq	r2, r2, ip, asr #31
   1ab64:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ab68:	mov	r2, #0
   1ab6c:	ldr	r8, [pc, #884]	; 1aee8 <__assert_fail@plt+0x86e8>
   1ab70:	sub	sp, sp, #188	; 0xbc
   1ab74:	mov	r7, r1
   1ab78:	ldr	r3, [r8]
   1ab7c:	str	r2, [r1]
   1ab80:	mov	r9, r0
   1ab84:	str	r3, [sp, #180]	; 0xb4
   1ab88:	bl	1ab04 <__assert_fail@plt+0x8304>
   1ab8c:	ldr	r5, [pc, #856]	; 1aeec <__assert_fail@plt+0x86ec>
   1ab90:	ldr	r4, [pc, #856]	; 1aef0 <__assert_fail@plt+0x86f0>
   1ab94:	ldr	r6, [pc, #856]	; 1aef4 <__assert_fail@plt+0x86f4>
   1ab98:	bl	12164 <getuid@plt>
   1ab9c:	mov	r3, r4
   1aba0:	mov	r2, r6
   1aba4:	mov	r1, #47	; 0x2f
   1aba8:	str	r0, [sp]
   1abac:	add	r0, sp, #132	; 0x84
   1abb0:	bl	12608 <gpgrt_snprintf@plt>
   1abb4:	add	r2, sp, #8
   1abb8:	add	r1, sp, #132	; 0x84
   1abbc:	mov	r0, #3
   1abc0:	bl	12764 <__xstat64@plt>
   1abc4:	cmp	r0, #0
   1abc8:	bne	1abdc <__assert_fail@plt+0x83dc>
   1abcc:	ldr	r3, [sp, #24]
   1abd0:	and	r3, r3, #61440	; 0xf000
   1abd4:	cmp	r3, #16384	; 0x4000
   1abd8:	beq	1ac20 <__assert_fail@plt+0x8420>
   1abdc:	ldr	r4, [r5], #4
   1abe0:	cmp	r4, #0
   1abe4:	bne	1ab98 <__assert_fail@plt+0x8398>
   1abe8:	ldr	r3, [r7]
   1abec:	orr	r3, r3, #2
   1abf0:	orr	r3, r3, #128	; 0x80
   1abf4:	str	r3, [r7]
   1abf8:	bl	1ab04 <__assert_fail@plt+0x8304>
   1abfc:	bl	125c0 <gcry_xstrdup@plt>
   1ac00:	mov	r4, r0
   1ac04:	ldr	r2, [sp, #180]	; 0xb4
   1ac08:	ldr	r3, [r8]
   1ac0c:	mov	r0, r4
   1ac10:	cmp	r2, r3
   1ac14:	bne	1aeb0 <__assert_fail@plt+0x86b0>
   1ac18:	add	sp, sp, #188	; 0xbc
   1ac1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ac20:	ldr	r4, [sp, #32]
   1ac24:	bl	12164 <getuid@plt>
   1ac28:	cmp	r4, r0
   1ac2c:	beq	1ac44 <__assert_fail@plt+0x8444>
   1ac30:	ldr	r3, [r7]
   1ac34:	cmp	r9, #0
   1ac38:	orr	r3, r3, #4
   1ac3c:	str	r3, [r7]
   1ac40:	beq	1abf0 <__assert_fail@plt+0x83f0>
   1ac44:	add	r0, sp, #132	; 0x84
   1ac48:	bl	124b8 <strlen@plt>
   1ac4c:	add	r2, r0, #7
   1ac50:	cmp	r2, #46	; 0x2e
   1ac54:	mov	r3, r0
   1ac58:	bls	1ac68 <__assert_fail@plt+0x8468>
   1ac5c:	ldr	r3, [r7]
   1ac60:	orr	r3, r3, #1
   1ac64:	b	1abf0 <__assert_fail@plt+0x83f0>
   1ac68:	ldr	r2, [pc, #648]	; 1aef8 <__assert_fail@plt+0x86f8>
   1ac6c:	add	r1, sp, #132	; 0x84
   1ac70:	add	ip, r1, r0
   1ac74:	ldrb	lr, [r2, #6]
   1ac78:	ldrh	r1, [r2, #4]
   1ac7c:	ldr	r0, [r2]
   1ac80:	add	r2, sp, #132	; 0x84
   1ac84:	str	r0, [r2, r3]
   1ac88:	strh	r1, [ip, #4]
   1ac8c:	add	r2, sp, #8
   1ac90:	add	r1, sp, #132	; 0x84
   1ac94:	strb	lr, [ip, #6]
   1ac98:	mov	r0, #3
   1ac9c:	bl	12764 <__xstat64@plt>
   1aca0:	cmp	r0, #0
   1aca4:	bne	1ad94 <__assert_fail@plt+0x8594>
   1aca8:	ldr	r3, [sp, #24]
   1acac:	and	r3, r3, #61440	; 0xf000
   1acb0:	cmp	r3, #16384	; 0x4000
   1acb4:	beq	1ade0 <__assert_fail@plt+0x85e0>
   1acb8:	ldr	r3, [r7]
   1acbc:	cmp	r9, #0
   1acc0:	orr	r3, r3, #4
   1acc4:	str	r3, [r7]
   1acc8:	beq	1abf0 <__assert_fail@plt+0x83f0>
   1accc:	ldr	r3, [pc, #552]	; 1aefc <__assert_fail@plt+0x86fc>
   1acd0:	ldrb	r3, [r3, #4]
   1acd4:	cmp	r3, #0
   1acd8:	beq	1adc4 <__assert_fail@plt+0x85c4>
   1acdc:	ldr	r3, [r7]
   1ace0:	orr	r3, r3, #32
   1ace4:	str	r3, [r7]
   1ace8:	bl	1ab04 <__assert_fail@plt+0x8304>
   1acec:	mov	r4, r0
   1acf0:	bl	124b8 <strlen@plt>
   1acf4:	mov	r2, r4
   1acf8:	add	r1, sp, #112	; 0x70
   1acfc:	mov	r3, r0
   1ad00:	mov	r0, #2
   1ad04:	bl	12620 <gcry_md_hash_buffer@plt>
   1ad08:	add	r0, sp, #112	; 0x70
   1ad0c:	mov	r1, #120	; 0x78
   1ad10:	bl	1b3b4 <__assert_fail@plt+0x8bb4>
   1ad14:	subs	r5, r0, #0
   1ad18:	beq	1ac5c <__assert_fail@plt+0x845c>
   1ad1c:	mov	r3, #0
   1ad20:	mov	r2, r5
   1ad24:	ldr	r1, [pc, #468]	; 1af00 <__assert_fail@plt+0x8700>
   1ad28:	add	r0, sp, #132	; 0x84
   1ad2c:	bl	157e4 <__assert_fail@plt+0x2fe4>
   1ad30:	mov	r4, r0
   1ad34:	mov	r0, r5
   1ad38:	bl	12218 <gcry_free@plt>
   1ad3c:	cmp	r4, #0
   1ad40:	beq	1ae44 <__assert_fail@plt+0x8644>
   1ad44:	add	r2, sp, #8
   1ad48:	mov	r1, r4
   1ad4c:	mov	r0, #3
   1ad50:	bl	12764 <__xstat64@plt>
   1ad54:	cmp	r0, #0
   1ad58:	beq	1ae1c <__assert_fail@plt+0x861c>
   1ad5c:	bl	12518 <__errno_location@plt>
   1ad60:	ldr	r3, [r0]
   1ad64:	mov	r5, r0
   1ad68:	cmp	r3, #2
   1ad6c:	beq	1ae54 <__assert_fail@plt+0x8654>
   1ad70:	ldr	r3, [r7]
   1ad74:	cmp	r9, #0
   1ad78:	orr	r3, r3, #1
   1ad7c:	str	r3, [r7]
   1ad80:	bne	1ac04 <__assert_fail@plt+0x8404>
   1ad84:	mov	r0, r4
   1ad88:	bl	12218 <gcry_free@plt>
   1ad8c:	ldr	r3, [r7]
   1ad90:	b	1abf0 <__assert_fail@plt+0x83f0>
   1ad94:	bl	12518 <__errno_location@plt>
   1ad98:	ldr	r3, [r0]
   1ad9c:	cmp	r3, #2
   1ada0:	bne	1ac5c <__assert_fail@plt+0x845c>
   1ada4:	ldr	r1, [pc, #344]	; 1af04 <__assert_fail@plt+0x8704>
   1ada8:	add	r0, sp, #132	; 0x84
   1adac:	bl	1a238 <__assert_fail@plt+0x7a38>
   1adb0:	cmp	r0, #0
   1adb4:	beq	1ae00 <__assert_fail@plt+0x8600>
   1adb8:	ldr	r3, [r7]
   1adbc:	orr	r3, r3, #16
   1adc0:	b	1abf0 <__assert_fail@plt+0x83f0>
   1adc4:	add	r0, sp, #132	; 0x84
   1adc8:	bl	125c0 <gcry_xstrdup@plt>
   1adcc:	mov	r4, r0
   1add0:	cmp	r4, #0
   1add4:	bne	1ac04 <__assert_fail@plt+0x8404>
   1add8:	ldr	r3, [r7]
   1addc:	b	1abf0 <__assert_fail@plt+0x83f0>
   1ade0:	ldr	r4, [sp, #32]
   1ade4:	bl	12164 <getuid@plt>
   1ade8:	cmp	r4, r0
   1adec:	bne	1acb8 <__assert_fail@plt+0x84b8>
   1adf0:	ldr	r3, [sp, #24]
   1adf4:	tst	r3, #63	; 0x3f
   1adf8:	bne	1acb8 <__assert_fail@plt+0x84b8>
   1adfc:	b	1accc <__assert_fail@plt+0x84cc>
   1ae00:	add	r2, sp, #8
   1ae04:	add	r1, sp, #132	; 0x84
   1ae08:	mov	r0, #3
   1ae0c:	bl	12764 <__xstat64@plt>
   1ae10:	cmp	r0, #0
   1ae14:	beq	1aca8 <__assert_fail@plt+0x84a8>
   1ae18:	b	1ac5c <__assert_fail@plt+0x845c>
   1ae1c:	ldr	r3, [sp, #24]
   1ae20:	and	r3, r3, #61440	; 0xf000
   1ae24:	cmp	r3, #16384	; 0x4000
   1ae28:	beq	1ae6c <__assert_fail@plt+0x866c>
   1ae2c:	ldr	r3, [r7]
   1ae30:	cmp	r9, #0
   1ae34:	orr	r3, r3, #8
   1ae38:	str	r3, [r7]
   1ae3c:	bne	1ac04 <__assert_fail@plt+0x8404>
   1ae40:	b	1ad84 <__assert_fail@plt+0x8584>
   1ae44:	ldr	r3, [r7]
   1ae48:	orr	r3, r3, #1
   1ae4c:	str	r3, [r7]
   1ae50:	b	1abf0 <__assert_fail@plt+0x83f0>
   1ae54:	cmp	r9, #0
   1ae58:	beq	1ae8c <__assert_fail@plt+0x868c>
   1ae5c:	ldr	r3, [r7]
   1ae60:	orr	r3, r3, #64	; 0x40
   1ae64:	str	r3, [r7]
   1ae68:	b	1ac04 <__assert_fail@plt+0x8404>
   1ae6c:	ldr	r5, [sp, #32]
   1ae70:	bl	12164 <getuid@plt>
   1ae74:	cmp	r5, r0
   1ae78:	bne	1ae2c <__assert_fail@plt+0x862c>
   1ae7c:	ldr	r3, [sp, #24]
   1ae80:	tst	r3, #63	; 0x3f
   1ae84:	bne	1ae2c <__assert_fail@plt+0x862c>
   1ae88:	b	1ac04 <__assert_fail@plt+0x8404>
   1ae8c:	ldr	r1, [pc, #112]	; 1af04 <__assert_fail@plt+0x8704>
   1ae90:	mov	r0, r4
   1ae94:	bl	1a238 <__assert_fail@plt+0x7a38>
   1ae98:	cmp	r0, #0
   1ae9c:	beq	1aeb4 <__assert_fail@plt+0x86b4>
   1aea0:	ldr	r3, [r7]
   1aea4:	orr	r3, r3, #16
   1aea8:	str	r3, [r7]
   1aeac:	b	1ad84 <__assert_fail@plt+0x8584>
   1aeb0:	bl	12260 <__stack_chk_fail@plt>
   1aeb4:	add	r2, sp, #8
   1aeb8:	add	r1, sp, #132	; 0x84
   1aebc:	mov	r0, #3
   1aec0:	bl	12764 <__xstat64@plt>
   1aec4:	cmp	r0, #0
   1aec8:	beq	1add0 <__assert_fail@plt+0x85d0>
   1aecc:	ldr	r2, [r5]
   1aed0:	ldr	r3, [r7]
   1aed4:	cmp	r2, #2
   1aed8:	orrne	r3, r3, #1
   1aedc:	orreq	r3, r3, #64	; 0x40
   1aee0:	str	r3, [r7]
   1aee4:	b	1ad84 <__assert_fail@plt+0x8584>
   1aee8:	andeq	r5, r3, r8, asr #22
   1aeec:	muleq	r2, r0, r4
   1aef0:	andeq	r3, r2, r4, lsl #14
   1aef4:	andeq	r3, r2, r0, lsl #10
   1aef8:	andeq	r3, r2, r4, lsr #10
   1aefc:	andeq	r6, r3, r0, lsl #4
   1af00:	andeq	r3, r2, ip, lsl #10
   1af04:	andeq	r3, r2, r0, lsl #7
   1af08:	push	{r4, r5, lr}
   1af0c:	sub	sp, sp, #12
   1af10:	ldr	r5, [pc, #64]	; 1af58 <__assert_fail@plt+0x8758>
   1af14:	ldr	r4, [pc, #64]	; 1af5c <__assert_fail@plt+0x875c>
   1af18:	ldr	r0, [r5, #12]
   1af1c:	ldr	r3, [r4]
   1af20:	cmp	r0, #0
   1af24:	str	r3, [sp, #4]
   1af28:	beq	1af44 <__assert_fail@plt+0x8744>
   1af2c:	ldr	r2, [sp, #4]
   1af30:	ldr	r3, [r4]
   1af34:	cmp	r2, r3
   1af38:	bne	1af54 <__assert_fail@plt+0x8754>
   1af3c:	add	sp, sp, #12
   1af40:	pop	{r4, r5, pc}
   1af44:	mov	r1, sp
   1af48:	bl	1ab64 <__assert_fail@plt+0x8364>
   1af4c:	str	r0, [r5, #12]
   1af50:	b	1af2c <__assert_fail@plt+0x872c>
   1af54:	bl	12260 <__stack_chk_fail@plt>
   1af58:	andeq	r6, r3, r0, lsl #4
   1af5c:	andeq	r5, r3, r8, asr #22
   1af60:	ldr	r0, [pc]	; 1af68 <__assert_fail@plt+0x8768>
   1af64:	bx	lr
   1af68:	andeq	r3, r2, r0, lsl r5
   1af6c:	ldr	r0, [pc]	; 1af74 <__assert_fail@plt+0x8774>
   1af70:	bx	lr
   1af74:	andeq	r3, r2, ip, lsl r5
   1af78:	ldr	r0, [pc]	; 1af80 <__assert_fail@plt+0x8780>
   1af7c:	bx	lr
   1af80:	andeq	r3, r2, ip, lsr #10
   1af84:	ldr	r0, [pc]	; 1af8c <__assert_fail@plt+0x878c>
   1af88:	bx	lr
   1af8c:	andeq	r3, r2, r0, asr r5
   1af90:	ldr	r0, [pc]	; 1af98 <__assert_fail@plt+0x8798>
   1af94:	bx	lr
   1af98:	andeq	r2, r2, r4, lsl #17
   1af9c:	ldr	r0, [pc]	; 1afa4 <__assert_fail@plt+0x87a4>
   1afa0:	bx	lr
   1afa4:	andeq	r3, r2, r4, ror #10
   1afa8:	push	{r4, r5, lr}
   1afac:	sub	sp, sp, #12
   1afb0:	ldr	r5, [pc, #96]	; 1b018 <__assert_fail@plt+0x8818>
   1afb4:	ldr	r4, [pc, #96]	; 1b01c <__assert_fail@plt+0x881c>
   1afb8:	ldr	r0, [r5, #16]
   1afbc:	ldr	r3, [r4]
   1afc0:	cmp	r0, #0
   1afc4:	str	r3, [sp, #4]
   1afc8:	beq	1afe4 <__assert_fail@plt+0x87e4>
   1afcc:	ldr	r2, [sp, #4]
   1afd0:	ldr	r3, [r4]
   1afd4:	cmp	r2, r3
   1afd8:	bne	1b014 <__assert_fail@plt+0x8814>
   1afdc:	add	sp, sp, #12
   1afe0:	pop	{r4, r5, pc}
   1afe4:	ldr	r0, [r5, #12]
   1afe8:	cmp	r0, #0
   1afec:	beq	1b004 <__assert_fail@plt+0x8804>
   1aff0:	mov	r2, #0
   1aff4:	ldr	r1, [pc, #36]	; 1b020 <__assert_fail@plt+0x8820>
   1aff8:	bl	151e8 <__assert_fail@plt+0x29e8>
   1affc:	str	r0, [r5, #16]
   1b000:	b	1afcc <__assert_fail@plt+0x87cc>
   1b004:	mov	r1, sp
   1b008:	bl	1ab64 <__assert_fail@plt+0x8364>
   1b00c:	str	r0, [r5, #12]
   1b010:	b	1aff0 <__assert_fail@plt+0x87f0>
   1b014:	bl	12260 <__stack_chk_fail@plt>
   1b018:	andeq	r6, r3, r0, lsl #4
   1b01c:	andeq	r5, r3, r8, asr #22
   1b020:	andeq	r3, r2, r8, ror r5
   1b024:	push	{r4, lr}
   1b028:	ldr	r4, [pc, #72]	; 1b078 <__assert_fail@plt+0x8878>
   1b02c:	ldr	r3, [r4, #20]
   1b030:	cmp	r3, #0
   1b034:	bne	1b050 <__assert_fail@plt+0x8850>
   1b038:	ldr	r3, [r4, #24]
   1b03c:	cmp	r3, #0
   1b040:	bne	1b064 <__assert_fail@plt+0x8864>
   1b044:	bl	127d0 <gcry_strdup@plt>
   1b048:	str	r0, [r4, #24]
   1b04c:	pop	{r4, pc}
   1b050:	ldr	r3, [pc, #36]	; 1b07c <__assert_fail@plt+0x887c>
   1b054:	ldr	r2, [pc, #36]	; 1b080 <__assert_fail@plt+0x8880>
   1b058:	ldr	r1, [pc, #36]	; 1b084 <__assert_fail@plt+0x8884>
   1b05c:	ldr	r0, [pc, #36]	; 1b088 <__assert_fail@plt+0x8888>
   1b060:	bl	19954 <__assert_fail@plt+0x7154>
   1b064:	ldr	r3, [pc, #16]	; 1b07c <__assert_fail@plt+0x887c>
   1b068:	ldr	r2, [pc, #28]	; 1b08c <__assert_fail@plt+0x888c>
   1b06c:	ldr	r1, [pc, #16]	; 1b084 <__assert_fail@plt+0x8884>
   1b070:	ldr	r0, [pc, #24]	; 1b090 <__assert_fail@plt+0x8890>
   1b074:	bl	19954 <__assert_fail@plt+0x7154>
   1b078:	andeq	r6, r3, r0, lsl #4
   1b07c:	muleq	r2, r8, r4
   1b080:	andeq	r0, r0, sp, lsl #8
   1b084:	andeq	r3, r2, r4, lsl #11
   1b088:	muleq	r2, ip, r5
   1b08c:	andeq	r0, r0, lr, lsl #8
   1b090:			; <UNDEFINED> instruction: 0x000235b8
   1b094:	push	{r4, lr}
   1b098:	mov	r3, #1
   1b09c:	ldr	r4, [pc, #664]	; 1b33c <__assert_fail@plt+0x8b3c>
   1b0a0:	sub	r0, r0, #1
   1b0a4:	str	r3, [r4, #20]
   1b0a8:	cmp	r0, #11
   1b0ac:	ldrls	pc, [pc, r0, lsl #2]
   1b0b0:	b	1b32c <__assert_fail@plt+0x8b2c>
   1b0b4:	andeq	fp, r1, r8, lsl r1
   1b0b8:	andeq	fp, r1, ip, asr #2
   1b0bc:	andeq	fp, r1, r8, asr r1
   1b0c0:	andeq	fp, r1, ip, lsl #3
   1b0c4:	andeq	fp, r1, r0, asr #3
   1b0c8:	strdeq	fp, [r1], -r4
   1b0cc:	andeq	fp, r1, r8, lsr #4
   1b0d0:	andeq	fp, r1, ip, asr r2
   1b0d4:	muleq	r1, r0, r2
   1b0d8:	andeq	fp, r1, r4, asr #5
   1b0dc:	strdeq	fp, [r1], -r8
   1b0e0:	andeq	fp, r1, r4, ror #1
   1b0e4:	ldr	r0, [r4, #60]	; 0x3c
   1b0e8:	cmp	r0, #0
   1b0ec:	popne	{r4, pc}
   1b0f0:	ldr	r3, [r4, #24]
   1b0f4:	mov	r2, r0
   1b0f8:	cmp	r3, #0
   1b0fc:	movne	r0, r3
   1b100:	ldrne	r1, [pc, #568]	; 1b340 <__assert_fail@plt+0x8b40>
   1b104:	ldreq	r1, [pc, #568]	; 1b344 <__assert_fail@plt+0x8b44>
   1b108:	ldreq	r0, [pc, #568]	; 1b348 <__assert_fail@plt+0x8b48>
   1b10c:	bl	15850 <__assert_fail@plt+0x3050>
   1b110:	str	r0, [r4, #60]	; 0x3c
   1b114:	pop	{r4, pc}
   1b118:	ldr	r0, [r4, #28]
   1b11c:	cmp	r0, #0
   1b120:	popne	{r4, pc}
   1b124:	ldr	r3, [r4, #24]
   1b128:	mov	r2, r0
   1b12c:	cmp	r3, #0
   1b130:	movne	r0, r3
   1b134:	ldrne	r1, [pc, #528]	; 1b34c <__assert_fail@plt+0x8b4c>
   1b138:	ldreq	r1, [pc, #528]	; 1b350 <__assert_fail@plt+0x8b50>
   1b13c:	ldreq	r0, [pc, #516]	; 1b348 <__assert_fail@plt+0x8b48>
   1b140:	bl	15850 <__assert_fail@plt+0x3050>
   1b144:	str	r0, [r4, #28]
   1b148:	pop	{r4, pc}
   1b14c:	mov	r0, #0
   1b150:	pop	{r4, lr}
   1b154:	b	1a8dc <__assert_fail@plt+0x80dc>
   1b158:	ldr	r0, [r4, #32]
   1b15c:	cmp	r0, #0
   1b160:	popne	{r4, pc}
   1b164:	ldr	r3, [r4, #24]
   1b168:	mov	r2, r0
   1b16c:	cmp	r3, #0
   1b170:	movne	r0, r3
   1b174:	ldrne	r1, [pc, #472]	; 1b354 <__assert_fail@plt+0x8b54>
   1b178:	ldreq	r1, [pc, #472]	; 1b358 <__assert_fail@plt+0x8b58>
   1b17c:	ldreq	r0, [pc, #472]	; 1b35c <__assert_fail@plt+0x8b5c>
   1b180:	bl	15850 <__assert_fail@plt+0x3050>
   1b184:	str	r0, [r4, #32]
   1b188:	pop	{r4, pc}
   1b18c:	ldr	r0, [r4, #36]	; 0x24
   1b190:	cmp	r0, #0
   1b194:	popne	{r4, pc}
   1b198:	ldr	r3, [r4, #24]
   1b19c:	mov	r2, r0
   1b1a0:	cmp	r3, #0
   1b1a4:	movne	r0, r3
   1b1a8:	ldrne	r1, [pc, #432]	; 1b360 <__assert_fail@plt+0x8b60>
   1b1ac:	ldreq	r1, [pc, #432]	; 1b364 <__assert_fail@plt+0x8b64>
   1b1b0:	ldreq	r0, [pc, #400]	; 1b348 <__assert_fail@plt+0x8b48>
   1b1b4:	bl	15850 <__assert_fail@plt+0x3050>
   1b1b8:	str	r0, [r4, #36]	; 0x24
   1b1bc:	pop	{r4, pc}
   1b1c0:	ldr	r0, [r4, #40]	; 0x28
   1b1c4:	cmp	r0, #0
   1b1c8:	popne	{r4, pc}
   1b1cc:	ldr	r3, [r4, #24]
   1b1d0:	mov	r2, r0
   1b1d4:	cmp	r3, #0
   1b1d8:	movne	r0, r3
   1b1dc:	ldrne	r1, [pc, #388]	; 1b368 <__assert_fail@plt+0x8b68>
   1b1e0:	ldreq	r1, [pc, #388]	; 1b36c <__assert_fail@plt+0x8b6c>
   1b1e4:	ldreq	r0, [pc, #368]	; 1b35c <__assert_fail@plt+0x8b5c>
   1b1e8:	bl	15850 <__assert_fail@plt+0x3050>
   1b1ec:	str	r0, [r4, #40]	; 0x28
   1b1f0:	pop	{r4, pc}
   1b1f4:	ldr	r0, [r4, #48]	; 0x30
   1b1f8:	cmp	r0, #0
   1b1fc:	popne	{r4, pc}
   1b200:	ldr	r3, [r4, #24]
   1b204:	mov	r2, r0
   1b208:	cmp	r3, #0
   1b20c:	movne	r0, r3
   1b210:	ldrne	r1, [pc, #344]	; 1b370 <__assert_fail@plt+0x8b70>
   1b214:	ldreq	r1, [pc, #344]	; 1b374 <__assert_fail@plt+0x8b74>
   1b218:	ldreq	r0, [pc, #316]	; 1b35c <__assert_fail@plt+0x8b5c>
   1b21c:	bl	15850 <__assert_fail@plt+0x3050>
   1b220:	str	r0, [r4, #48]	; 0x30
   1b224:	pop	{r4, pc}
   1b228:	ldr	r0, [r4, #52]	; 0x34
   1b22c:	cmp	r0, #0
   1b230:	popne	{r4, pc}
   1b234:	ldr	r3, [r4, #24]
   1b238:	mov	r2, r0
   1b23c:	cmp	r3, #0
   1b240:	movne	r0, r3
   1b244:	ldrne	r1, [pc, #300]	; 1b378 <__assert_fail@plt+0x8b78>
   1b248:	ldreq	r1, [pc, #300]	; 1b37c <__assert_fail@plt+0x8b7c>
   1b24c:	ldreq	r0, [pc, #244]	; 1b348 <__assert_fail@plt+0x8b48>
   1b250:	bl	15850 <__assert_fail@plt+0x3050>
   1b254:	str	r0, [r4, #52]	; 0x34
   1b258:	pop	{r4, pc}
   1b25c:	ldr	r0, [r4, #56]	; 0x38
   1b260:	cmp	r0, #0
   1b264:	popne	{r4, pc}
   1b268:	ldr	r3, [r4, #24]
   1b26c:	mov	r2, r0
   1b270:	cmp	r3, #0
   1b274:	movne	r0, r3
   1b278:	ldrne	r1, [pc, #256]	; 1b380 <__assert_fail@plt+0x8b80>
   1b27c:	ldreq	r1, [pc, #256]	; 1b384 <__assert_fail@plt+0x8b84>
   1b280:	ldreq	r0, [pc, #192]	; 1b348 <__assert_fail@plt+0x8b48>
   1b284:	bl	15850 <__assert_fail@plt+0x3050>
   1b288:	str	r0, [r4, #56]	; 0x38
   1b28c:	pop	{r4, pc}
   1b290:	ldr	r0, [r4, #64]	; 0x40
   1b294:	cmp	r0, #0
   1b298:	popne	{r4, pc}
   1b29c:	ldr	r3, [r4, #24]
   1b2a0:	mov	r2, r0
   1b2a4:	cmp	r3, #0
   1b2a8:	movne	r0, r3
   1b2ac:	ldrne	r1, [pc, #212]	; 1b388 <__assert_fail@plt+0x8b88>
   1b2b0:	ldreq	r1, [pc, #212]	; 1b38c <__assert_fail@plt+0x8b8c>
   1b2b4:	ldreq	r0, [pc, #140]	; 1b348 <__assert_fail@plt+0x8b48>
   1b2b8:	bl	15850 <__assert_fail@plt+0x3050>
   1b2bc:	str	r0, [r4, #64]	; 0x40
   1b2c0:	pop	{r4, pc}
   1b2c4:	ldr	r0, [r4, #68]	; 0x44
   1b2c8:	cmp	r0, #0
   1b2cc:	popne	{r4, pc}
   1b2d0:	ldr	r3, [r4, #24]
   1b2d4:	mov	r2, r0
   1b2d8:	cmp	r3, #0
   1b2dc:	movne	r0, r3
   1b2e0:	ldrne	r1, [pc, #168]	; 1b390 <__assert_fail@plt+0x8b90>
   1b2e4:	ldreq	r1, [pc, #168]	; 1b394 <__assert_fail@plt+0x8b94>
   1b2e8:	ldreq	r0, [pc, #88]	; 1b348 <__assert_fail@plt+0x8b48>
   1b2ec:	bl	15850 <__assert_fail@plt+0x3050>
   1b2f0:	str	r0, [r4, #68]	; 0x44
   1b2f4:	pop	{r4, pc}
   1b2f8:	ldr	r0, [r4, #44]	; 0x2c
   1b2fc:	cmp	r0, #0
   1b300:	popne	{r4, pc}
   1b304:	ldr	r3, [r4, #24]
   1b308:	mov	r2, r0
   1b30c:	cmp	r3, #0
   1b310:	movne	r0, r3
   1b314:	ldrne	r1, [pc, #124]	; 1b398 <__assert_fail@plt+0x8b98>
   1b318:	ldreq	r1, [pc, #124]	; 1b39c <__assert_fail@plt+0x8b9c>
   1b31c:	ldreq	r0, [pc, #56]	; 1b35c <__assert_fail@plt+0x8b5c>
   1b320:	bl	15850 <__assert_fail@plt+0x3050>
   1b324:	str	r0, [r4, #44]	; 0x2c
   1b328:	pop	{r4, pc}
   1b32c:	ldr	r2, [pc, #108]	; 1b3a0 <__assert_fail@plt+0x8ba0>
   1b330:	ldr	r1, [pc, #108]	; 1b3a4 <__assert_fail@plt+0x8ba4>
   1b334:	ldr	r0, [pc, #108]	; 1b3a8 <__assert_fail@plt+0x8ba8>
   1b338:	bl	1992c <__assert_fail@plt+0x712c>
   1b33c:	andeq	r6, r3, r0, lsl #4
   1b340:	andeq	r3, r2, r8, lsr #13
   1b344:	andeq	r3, r2, ip, lsr #13
   1b348:	andeq	r3, r2, r0, asr #9
   1b34c:	ldrdeq	r3, [r2], -r0
   1b350:	andeq	r3, r2, r4, ror #11
   1b354:	strdeq	r3, [r2], -r0
   1b358:	strdeq	r3, [r2], -r4
   1b35c:	andeq	r3, r2, ip, lsl r5
   1b360:	andeq	r3, r2, r0, lsl #12
   1b364:	andeq	r3, r2, r8, lsl #12
   1b368:	andeq	r3, r2, r4, lsl r6
   1b36c:	andeq	r3, r2, ip, lsr #12
   1b370:	andeq	r3, r2, r8, asr r6
   1b374:	andeq	r3, r2, r4, ror r6
   1b378:	andeq	r3, r2, r8, lsl #13
   1b37c:	muleq	r2, r4, r6
   1b380:	muleq	r2, ip, r6
   1b384:	andeq	r3, r2, r0, lsr #13
   1b388:			; <UNDEFINED> instruction: 0x000236b4
   1b38c:	ldrdeq	r3, [r2], -r0
   1b390:	andeq	r3, r2, r4, ror #13
   1b394:	strdeq	r3, [r2], -r4
   1b398:	andeq	r3, r2, r0, asr #12
   1b39c:	andeq	r3, r2, r8, asr #12
   1b3a0:	andeq	r3, r2, ip, lsr #9
   1b3a4:	andeq	r0, r0, lr, ror r4
   1b3a8:	andeq	r3, r2, r4, lsl #11
   1b3ac:	mov	r0, #1
   1b3b0:	b	1a8dc <__assert_fail@plt+0x80dc>
   1b3b4:	ldr	r2, [pc, #748]	; 1b6a8 <__assert_fail@plt+0x8ea8>
   1b3b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3bc:	add	r3, r1, #7
   1b3c0:	cmp	r3, r2
   1b3c4:	bhi	1b5a4 <__assert_fail@plt+0x8da4>
   1b3c8:	ldr	r2, [pc, #732]	; 1b6ac <__assert_fail@plt+0x8eac>
   1b3cc:	lsr	r8, r3, #3
   1b3d0:	mov	r9, r1
   1b3d4:	mov	r4, r0
   1b3d8:	umull	r1, r0, r2, r8
   1b3dc:	umull	r2, r3, r2, r3
   1b3e0:	lsr	r0, r0, #2
   1b3e4:	lsr	r3, r3, #5
   1b3e8:	add	r0, r0, r0, lsl #2
   1b3ec:	sub	r0, r8, r0
   1b3f0:	add	r3, r0, r3, lsl #2
   1b3f4:	lsl	r3, r3, #1
   1b3f8:	cmp	r0, #2
   1b3fc:	movhi	r0, r3
   1b400:	addls	r0, r3, #1
   1b404:	bl	120bc <gcry_malloc@plt>
   1b408:	subs	sl, r0, #0
   1b40c:	beq	1b59c <__assert_fail@plt+0x8d9c>
   1b410:	cmp	r8, #4
   1b414:	bls	1b6a0 <__assert_fail@plt+0x8ea0>
   1b418:	ldr	r0, [pc, #656]	; 1b6b0 <__assert_fail@plt+0x8eb0>
   1b41c:	add	r2, r4, #5
   1b420:	add	r3, sl, #8
   1b424:	ldrb	lr, [r2, #-4]
   1b428:	ldrb	r4, [r2, #-3]
   1b42c:	ldrb	fp, [r2, #-5]
   1b430:	ldrb	ip, [r2, #-2]
   1b434:	ldrb	r1, [r2, #-1]
   1b438:	lsl	r6, lr, #4
   1b43c:	lsl	r7, fp, #2
   1b440:	lsl	r5, r4, #1
   1b444:	and	r6, r6, #16
   1b448:	orr	r6, r6, r4, lsr #4
   1b44c:	and	r7, r7, #28
   1b450:	lsl	r4, ip, #3
   1b454:	and	r5, r5, #30
   1b458:	orr	r7, r7, lr, lsr #6
   1b45c:	orr	r5, r5, ip, lsr #7
   1b460:	asr	lr, lr, #1
   1b464:	and	r4, r4, #24
   1b468:	asr	ip, ip, #2
   1b46c:	orr	r4, r4, r1, lsr #5
   1b470:	and	lr, lr, #31
   1b474:	and	ip, ip, #31
   1b478:	and	r1, r1, #31
   1b47c:	ldrb	ip, [r0, ip]
   1b480:	ldrb	r4, [r0, r4]
   1b484:	ldrb	fp, [r0, fp, lsr #3]
   1b488:	ldrb	r7, [r0, r7]
   1b48c:	ldrb	lr, [r0, lr]
   1b490:	ldrb	r6, [r0, r6]
   1b494:	ldrb	r5, [r0, r5]
   1b498:	ldrb	r1, [r0, r1]
   1b49c:	sub	r8, r8, #5
   1b4a0:	cmp	r8, #4
   1b4a4:	strb	ip, [r3, #-3]
   1b4a8:	strb	r4, [r3, #-2]
   1b4ac:	strb	fp, [r3, #-8]
   1b4b0:	strb	r7, [r3, #-7]
   1b4b4:	strb	lr, [r3, #-6]
   1b4b8:	strb	r6, [r3, #-5]
   1b4bc:	strb	r5, [r3, #-4]
   1b4c0:	strb	r1, [r3, #-1]
   1b4c4:	mov	r4, r2
   1b4c8:	mov	ip, r3
   1b4cc:	add	r2, r2, #5
   1b4d0:	add	r3, r3, #8
   1b4d4:	bhi	1b424 <__assert_fail@plt+0x8c24>
   1b4d8:	sub	r8, r8, #1
   1b4dc:	cmp	r8, #3
   1b4e0:	ldrls	pc, [pc, r8, lsl #2]
   1b4e4:	b	1b584 <__assert_fail@plt+0x8d84>
   1b4e8:			; <UNDEFINED> instruction: 0x0001b5bc
   1b4ec:	andeq	fp, r1, r8, ror #11
   1b4f0:	andeq	fp, r1, r8, lsr r6
   1b4f4:	strdeq	fp, [r1], -r8
   1b4f8:	ldrb	r0, [r4, #1]
   1b4fc:	ldrb	r3, [r4, #2]
   1b500:	ldrb	r5, [r4]
   1b504:	ldrb	r2, [r4, #3]
   1b508:	lsl	lr, r0, #4
   1b50c:	and	lr, lr, #16
   1b510:	orr	lr, lr, r3, lsr #4
   1b514:	lsl	r4, r5, #2
   1b518:	lsl	r3, r3, #1
   1b51c:	and	r4, r4, #28
   1b520:	and	r3, r3, #30
   1b524:	ldr	r1, [pc, #388]	; 1b6b0 <__assert_fail@plt+0x8eb0>
   1b528:	orr	r3, r3, r2, lsr #7
   1b52c:	orr	r4, r4, r0, lsr #6
   1b530:	asr	r6, r2, #2
   1b534:	asr	r0, r0, #1
   1b538:	lsl	r2, r2, #3
   1b53c:	and	r0, r0, #31
   1b540:	and	r6, r6, #31
   1b544:	and	r2, r2, #24
   1b548:	ldrb	r7, [r1, r0]
   1b54c:	ldrb	r8, [r1, lr]
   1b550:	ldrb	r4, [r1, r4]
   1b554:	ldrb	lr, [r1, r3]
   1b558:	ldrb	r5, [r1, r5, lsr #3]
   1b55c:	ldrb	r0, [r1, r6]
   1b560:	ldrb	r3, [r1, r2]
   1b564:	strb	r4, [ip, #1]
   1b568:	strb	r5, [ip]
   1b56c:	strb	r7, [ip, #2]
   1b570:	strb	r8, [ip, #3]
   1b574:	strb	lr, [ip, #4]
   1b578:	strb	r0, [ip, #5]
   1b57c:	strb	r3, [ip, #6]
   1b580:	add	ip, ip, #7
   1b584:	ldr	r1, [pc, #288]	; 1b6ac <__assert_fail@plt+0x8eac>
   1b588:	add	r9, r9, #4
   1b58c:	mov	r3, #0
   1b590:	umull	r2, r9, r1, r9
   1b594:	strb	r3, [ip]
   1b598:	strb	r3, [sl, r9, lsr #2]
   1b59c:	mov	r0, sl
   1b5a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5a4:	bl	12518 <__errno_location@plt>
   1b5a8:	mov	sl, #0
   1b5ac:	mov	r3, #22
   1b5b0:	str	r3, [r0]
   1b5b4:	mov	r0, sl
   1b5b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5bc:	ldrb	r0, [r4]
   1b5c0:	ldr	r1, [pc, #232]	; 1b6b0 <__assert_fail@plt+0x8eb0>
   1b5c4:	mov	r3, ip
   1b5c8:	lsl	r2, r0, #2
   1b5cc:	and	r2, r2, #28
   1b5d0:	ldrb	r0, [r1, r0, lsr #3]
   1b5d4:	ldrb	r2, [r1, r2]
   1b5d8:	strb	r0, [r3], #2
   1b5dc:	strb	r2, [ip, #1]
   1b5e0:	mov	ip, r3
   1b5e4:	b	1b584 <__assert_fail@plt+0x8d84>
   1b5e8:	ldrb	lr, [r4]
   1b5ec:	ldrb	r3, [r4, #1]
   1b5f0:	ldr	r1, [pc, #184]	; 1b6b0 <__assert_fail@plt+0x8eb0>
   1b5f4:	add	ip, ip, #4
   1b5f8:	lsl	r2, lr, #2
   1b5fc:	and	r2, r2, #28
   1b600:	orr	r2, r2, r3, lsr #6
   1b604:	asr	r0, r3, #1
   1b608:	lsl	r3, r3, #4
   1b60c:	and	r0, r0, #31
   1b610:	and	r3, r3, #16
   1b614:	ldrb	r4, [r1, r2]
   1b618:	ldrb	lr, [r1, lr, lsr #3]
   1b61c:	ldrb	r2, [r1, r0]
   1b620:	ldrb	r3, [r1, r3]
   1b624:	strb	r4, [ip, #-3]
   1b628:	strb	lr, [ip, #-4]
   1b62c:	strb	r2, [ip, #-2]
   1b630:	strb	r3, [ip, #-1]
   1b634:	b	1b584 <__assert_fail@plt+0x8d84>
   1b638:	ldrb	r3, [r4, #1]
   1b63c:	ldrb	lr, [r4]
   1b640:	ldrb	r2, [r4, #2]
   1b644:	ldr	r1, [pc, #100]	; 1b6b0 <__assert_fail@plt+0x8eb0>
   1b648:	lsl	r0, r3, #4
   1b64c:	lsl	r4, lr, #2
   1b650:	and	r4, r4, #28
   1b654:	and	r0, r0, #16
   1b658:	orr	r4, r4, r3, lsr #6
   1b65c:	orr	r0, r0, r2, lsr #4
   1b660:	asr	r3, r3, #1
   1b664:	lsl	r2, r2, #1
   1b668:	and	r3, r3, #31
   1b66c:	and	r2, r2, #30
   1b670:	ldrb	r5, [r1, r4]
   1b674:	ldrb	r4, [r1, lr, lsr #3]
   1b678:	ldrb	lr, [r1, r0]
   1b67c:	ldrb	r0, [r1, r3]
   1b680:	ldrb	r3, [r1, r2]
   1b684:	strb	r5, [ip, #1]
   1b688:	strb	r4, [ip]
   1b68c:	strb	lr, [ip, #3]
   1b690:	strb	r0, [ip, #2]
   1b694:	strb	r3, [ip, #4]
   1b698:	add	ip, ip, #5
   1b69c:	b	1b584 <__assert_fail@plt+0x8d84>
   1b6a0:	mov	ip, sl
   1b6a4:	b	1b4d8 <__assert_fail@plt+0x8cd8>
   1b6a8:	andeq	r0, r8, r7
   1b6ac:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1b6b0:	andeq	r3, r2, ip, lsl #14
   1b6b4:	push	{r4, r5, r6, r7, lr}
   1b6b8:	ldrb	r6, [r0]
   1b6bc:	cmp	r6, #48	; 0x30
   1b6c0:	beq	1b7c4 <__assert_fail@plt+0x8fc4>
   1b6c4:	sub	r7, r6, #48	; 0x30
   1b6c8:	uxtb	ip, r7
   1b6cc:	cmp	ip, #9
   1b6d0:	movhi	ip, #0
   1b6d4:	bhi	1b714 <__assert_fail@plt+0x8f14>
   1b6d8:	ldrb	r4, [r0, #1]
   1b6dc:	sub	lr, r4, #48	; 0x30
   1b6e0:	add	r5, r0, #1
   1b6e4:	mov	ip, #0
   1b6e8:	b	1b6f8 <__assert_fail@plt+0x8ef8>
   1b6ec:	ldrb	r4, [r5, #1]!
   1b6f0:	sub	r7, r6, #48	; 0x30
   1b6f4:	sub	lr, r4, #48	; 0x30
   1b6f8:	add	ip, ip, ip, lsl #2
   1b6fc:	uxtb	lr, lr
   1b700:	cmp	lr, #9
   1b704:	mov	r6, r4
   1b708:	add	ip, r7, ip, lsl #1
   1b70c:	mov	r0, r5
   1b710:	bls	1b6ec <__assert_fail@plt+0x8eec>
   1b714:	str	ip, [r1]
   1b718:	ldrb	r1, [r0]
   1b71c:	cmp	r1, #46	; 0x2e
   1b720:	bne	1b7dc <__assert_fail@plt+0x8fdc>
   1b724:	ldrb	lr, [r0, #1]
   1b728:	add	ip, r0, #1
   1b72c:	cmp	lr, #48	; 0x30
   1b730:	beq	1b7e4 <__assert_fail@plt+0x8fe4>
   1b734:	sub	r0, lr, #48	; 0x30
   1b738:	uxtb	r1, r0
   1b73c:	cmp	r1, #9
   1b740:	movhi	r1, #0
   1b744:	bhi	1b768 <__assert_fail@plt+0x8f68>
   1b748:	mov	r1, #0
   1b74c:	ldrb	lr, [ip, #1]!
   1b750:	add	r1, r1, r1, lsl #2
   1b754:	add	r1, r0, r1, lsl #1
   1b758:	sub	r0, lr, #48	; 0x30
   1b75c:	uxtb	lr, r0
   1b760:	cmp	lr, #9
   1b764:	bls	1b74c <__assert_fail@plt+0x8f4c>
   1b768:	str	r1, [r2]
   1b76c:	ldrb	r2, [ip]
   1b770:	cmp	r2, #46	; 0x2e
   1b774:	bne	1b7dc <__assert_fail@plt+0x8fdc>
   1b778:	ldrb	lr, [ip, #1]
   1b77c:	add	r0, ip, #1
   1b780:	cmp	lr, #48	; 0x30
   1b784:	beq	1b7fc <__assert_fail@plt+0x8ffc>
   1b788:	sub	r1, lr, #48	; 0x30
   1b78c:	uxtb	r2, r1
   1b790:	cmp	r2, #9
   1b794:	movhi	r2, #0
   1b798:	bhi	1b7bc <__assert_fail@plt+0x8fbc>
   1b79c:	mov	r2, #0
   1b7a0:	ldrb	lr, [r0, #1]!
   1b7a4:	add	r2, r2, r2, lsl #2
   1b7a8:	add	r2, r1, r2, lsl #1
   1b7ac:	sub	r1, lr, #48	; 0x30
   1b7b0:	uxtb	ip, r1
   1b7b4:	cmp	ip, #9
   1b7b8:	bls	1b7a0 <__assert_fail@plt+0x8fa0>
   1b7bc:	str	r2, [r3]
   1b7c0:	pop	{r4, r5, r6, r7, pc}
   1b7c4:	ldrb	r4, [r0, #1]
   1b7c8:	sub	lr, r4, #48	; 0x30
   1b7cc:	uxtb	ip, lr
   1b7d0:	cmp	ip, #9
   1b7d4:	movhi	r7, #0
   1b7d8:	bhi	1b6e0 <__assert_fail@plt+0x8ee0>
   1b7dc:	mov	r0, #0
   1b7e0:	pop	{r4, r5, r6, r7, pc}
   1b7e4:	ldrb	r1, [r0, #2]
   1b7e8:	sub	r1, r1, #48	; 0x30
   1b7ec:	cmp	r1, #9
   1b7f0:	bls	1b7dc <__assert_fail@plt+0x8fdc>
   1b7f4:	mov	r0, #0
   1b7f8:	b	1b748 <__assert_fail@plt+0x8f48>
   1b7fc:	ldrb	r2, [ip, #2]
   1b800:	sub	r2, r2, #48	; 0x30
   1b804:	cmp	r2, #9
   1b808:	bls	1b7dc <__assert_fail@plt+0x8fdc>
   1b80c:	mov	r1, #0
   1b810:	b	1b79c <__assert_fail@plt+0x8f9c>
   1b814:	subs	r0, r2, #0
   1b818:	push	{r4, lr}
   1b81c:	beq	1b82c <__assert_fail@plt+0x902c>
   1b820:	mov	r1, r0
   1b824:	ldr	r0, [pc, #12]	; 1b838 <__assert_fail@plt+0x9038>
   1b828:	bl	19650 <__assert_fail@plt+0x6e50>
   1b82c:	mov	r0, r1
   1b830:	bl	12698 <gpg_strerror@plt>
   1b834:	b	1b820 <__assert_fail@plt+0x9020>
   1b838:	andeq	r3, r2, r4, asr #14
   1b83c:	cmp	r1, #20
   1b840:	mov	ip, r2
   1b844:	beq	1b8a0 <__assert_fail@plt+0x90a0>
   1b848:	ble	1b87c <__assert_fail@plt+0x907c>
   1b84c:	cmp	r1, #50	; 0x32
   1b850:	moveq	r0, #6
   1b854:	beq	1b870 <__assert_fail@plt+0x9070>
   1b858:	cmp	r1, #100	; 0x64
   1b85c:	moveq	r0, #7
   1b860:	beq	1b870 <__assert_fail@plt+0x9070>
   1b864:	cmp	r1, #40	; 0x28
   1b868:	moveq	r0, #5
   1b86c:	movne	r0, #4
   1b870:	mov	r2, r3
   1b874:	mov	r1, ip
   1b878:	b	19518 <__assert_fail@plt+0x6d18>
   1b87c:	cmp	r1, #0
   1b880:	moveq	r0, #1
   1b884:	beq	1b870 <__assert_fail@plt+0x9070>
   1b888:	cmp	r1, #10
   1b88c:	moveq	r0, #2
   1b890:	movne	r0, #4
   1b894:	mov	r2, r3
   1b898:	mov	r1, ip
   1b89c:	b	19518 <__assert_fail@plt+0x6d18>
   1b8a0:	mov	r0, #3
   1b8a4:	b	1b870 <__assert_fail@plt+0x9070>
   1b8a8:	ldr	r3, [pc, #84]	; 1b904 <__assert_fail@plt+0x9104>
   1b8ac:	ldr	r0, [r3]
   1b8b0:	cmp	r0, #0
   1b8b4:	bne	1b8fc <__assert_fail@plt+0x90fc>
   1b8b8:	push	{r4, lr}
   1b8bc:	ands	r2, r2, #1
   1b8c0:	mov	r4, r1
   1b8c4:	mov	r1, #1
   1b8c8:	str	r1, [r3]
   1b8cc:	beq	1b8e4 <__assert_fail@plt+0x90e4>
   1b8d0:	ldr	r1, [pc, #48]	; 1b908 <__assert_fail@plt+0x9108>
   1b8d4:	mov	r2, #5
   1b8d8:	bl	12254 <dcgettext@plt>
   1b8dc:	mov	r1, r4
   1b8e0:	bl	19650 <__assert_fail@plt+0x6e50>
   1b8e4:	mov	r0, r2
   1b8e8:	ldr	r1, [pc, #28]	; 1b90c <__assert_fail@plt+0x910c>
   1b8ec:	mov	r2, #5
   1b8f0:	bl	12254 <dcgettext@plt>
   1b8f4:	mov	r1, r4
   1b8f8:	bl	19650 <__assert_fail@plt+0x6e50>
   1b8fc:	mov	r0, #0
   1b900:	bx	lr
   1b904:	andeq	r6, r3, r8, asr #4
   1b908:	andeq	r3, r2, ip, asr r7
   1b90c:	muleq	r2, r4, r7
   1b910:	push	{r4, r5, r6, r7, lr}
   1b914:	subs	r7, r2, #0
   1b918:	mov	r6, r0
   1b91c:	sub	sp, sp, #12
   1b920:	mov	r0, r1
   1b924:	beq	1b95c <__assert_fail@plt+0x915c>
   1b928:	ldrsb	r2, [r1]
   1b92c:	cmp	r2, #0
   1b930:	blt	1b984 <__assert_fail@plt+0x9184>
   1b934:	sub	lr, r7, #1
   1b938:	add	lr, lr, r1
   1b93c:	rsb	r4, r1, #1
   1b940:	b	1b950 <__assert_fail@plt+0x9150>
   1b944:	ldrsb	ip, [r1, #1]!
   1b948:	cmp	ip, #0
   1b94c:	blt	1b988 <__assert_fail@plt+0x9188>
   1b950:	cmp	r1, lr
   1b954:	add	r5, r4, r1
   1b958:	bne	1b944 <__assert_fail@plt+0x9144>
   1b95c:	mov	ip, #0
   1b960:	mov	r1, r0
   1b964:	mov	r2, r7
   1b968:	mov	r0, r6
   1b96c:	str	ip, [sp]
   1b970:	bl	1259c <gpgrt_write_sanitized@plt>
   1b974:	mov	r4, r0
   1b978:	mov	r0, r4
   1b97c:	add	sp, sp, #12
   1b980:	pop	{r4, r5, r6, r7, pc}
   1b984:	mov	r5, #0
   1b988:	cmp	r3, #0
   1b98c:	moveq	r2, r3
   1b990:	ldrbne	r2, [r3]
   1b994:	mov	r1, r7
   1b998:	bl	20e48 <__assert_fail@plt+0xe648>
   1b99c:	mov	r1, r6
   1b9a0:	mov	r7, r0
   1b9a4:	bl	125f0 <gpgrt_fputs@plt>
   1b9a8:	mov	r4, r0
   1b9ac:	mov	r0, r7
   1b9b0:	bl	12218 <gcry_free@plt>
   1b9b4:	cmn	r4, #1
   1b9b8:	movne	r4, r5
   1b9bc:	mov	r0, r4
   1b9c0:	add	sp, sp, #12
   1b9c4:	pop	{r4, r5, r6, r7, pc}
   1b9c8:	push	{r4, lr}
   1b9cc:	mov	r1, #0
   1b9d0:	ldr	r0, [pc, #28]	; 1b9f4 <__assert_fail@plt+0x91f4>
   1b9d4:	bl	12740 <gcry_set_log_handler@plt>
   1b9d8:	mov	r1, #0
   1b9dc:	ldr	r0, [pc, #20]	; 1b9f8 <__assert_fail@plt+0x91f8>
   1b9e0:	bl	1274c <gcry_set_fatalerror_handler@plt>
   1b9e4:	mov	r1, #0
   1b9e8:	ldr	r0, [pc, #12]	; 1b9fc <__assert_fail@plt+0x91fc>
   1b9ec:	pop	{r4, lr}
   1b9f0:	b	12674 <gcry_set_outofcore_handler@plt>
   1b9f4:	andeq	fp, r1, ip, lsr r8
   1b9f8:	andeq	fp, r1, r4, lsl r8
   1b9fc:	andeq	fp, r1, r8, lsr #17
   1ba00:	push	{r4, r5, r6, lr}
   1ba04:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1ba08:	ldr	r1, [pc, #40]	; 1ba38 <__assert_fail@plt+0x9238>
   1ba0c:	mov	r2, #5
   1ba10:	subs	r4, r0, #0
   1ba14:	mov	r0, #0
   1ba18:	uxthne	r4, r4
   1ba1c:	bl	12254 <dcgettext@plt>
   1ba20:	mov	r5, r0
   1ba24:	mov	r0, r4
   1ba28:	bl	12698 <gpg_strerror@plt>
   1ba2c:	mov	r1, r0
   1ba30:	mov	r0, r5
   1ba34:	bl	19650 <__assert_fail@plt+0x6e50>
   1ba38:			; <UNDEFINED> instruction: 0x000237bc
   1ba3c:	push	{r4, lr}
   1ba40:	bl	12590 <gcry_cipher_algo_name@plt>
   1ba44:	ldr	r1, [pc, #24]	; 1ba64 <__assert_fail@plt+0x9264>
   1ba48:	mov	r4, r0
   1ba4c:	bl	12104 <strcmp@plt>
   1ba50:	ldr	r3, [pc, #16]	; 1ba68 <__assert_fail@plt+0x9268>
   1ba54:	cmp	r0, #0
   1ba58:	movne	r0, r4
   1ba5c:	moveq	r0, r3
   1ba60:	pop	{r4, pc}
   1ba64:	andeq	r3, r2, r8, ror #15
   1ba68:	andeq	r3, r2, r0, ror #15
   1ba6c:	push	{r4, r5, r6, lr}
   1ba70:	subs	r5, r0, #0
   1ba74:	mov	r4, r2
   1ba78:	beq	1baa4 <__assert_fail@plt+0x92a4>
   1ba7c:	mov	r6, r1
   1ba80:	mov	r2, #5
   1ba84:	ldr	r1, [pc, #52]	; 1bac0 <__assert_fail@plt+0x92c0>
   1ba88:	mov	r0, #0
   1ba8c:	bl	12254 <dcgettext@plt>
   1ba90:	mov	r3, r4
   1ba94:	mov	r2, r6
   1ba98:	mov	r1, r5
   1ba9c:	pop	{r4, r5, r6, lr}
   1baa0:	b	19568 <__assert_fail@plt+0x6d68>
   1baa4:	mov	r2, #5
   1baa8:	ldr	r1, [pc, #20]	; 1bac4 <__assert_fail@plt+0x92c4>
   1baac:	bl	12254 <dcgettext@plt>
   1bab0:	mov	r2, r4
   1bab4:	ldr	r1, [pc, #12]	; 1bac8 <__assert_fail@plt+0x92c8>
   1bab8:	pop	{r4, r5, r6, lr}
   1babc:	b	19568 <__assert_fail@plt+0x6d68>
   1bac0:	andeq	r3, r2, ip, ror #15
   1bac4:	andeq	r3, r2, ip, lsl r8
   1bac8:	andeq	r2, r2, r4, ror pc
   1bacc:	cmp	r0, #0
   1bad0:	beq	1baf4 <__assert_fail@plt+0x92f4>
   1bad4:	ldrb	r3, [r0]
   1bad8:	cmp	r3, #45	; 0x2d
   1badc:	bxne	lr
   1bae0:	ldrb	r2, [r0, #1]
   1bae4:	ldr	r3, [pc, #16]	; 1bafc <__assert_fail@plt+0x92fc>
   1bae8:	cmp	r2, #0
   1baec:	moveq	r0, r3
   1baf0:	bx	lr
   1baf4:	ldr	r0, [pc]	; 1bafc <__assert_fail@plt+0x92fc>
   1baf8:	bx	lr
   1bafc:	andeq	r3, r2, r8, asr r8
   1bb00:	cmp	r0, #0
   1bb04:	beq	1bb28 <__assert_fail@plt+0x9328>
   1bb08:	ldrb	r3, [r0]
   1bb0c:	cmp	r3, #45	; 0x2d
   1bb10:	bxne	lr
   1bb14:	ldrb	r2, [r0, #1]
   1bb18:	ldr	r3, [pc, #16]	; 1bb30 <__assert_fail@plt+0x9330>
   1bb1c:	cmp	r2, #0
   1bb20:	moveq	r0, r3
   1bb24:	bx	lr
   1bb28:	ldr	r0, [pc]	; 1bb30 <__assert_fail@plt+0x9330>
   1bb2c:	bx	lr
   1bb30:	andeq	r3, r2, r4, ror #16
   1bb34:	b	1b910 <__assert_fail@plt+0x9110>
   1bb38:	push	{r4, lr}
   1bb3c:	sub	sp, sp, #8
   1bb40:	ldr	r4, [pc, #52]	; 1bb7c <__assert_fail@plt+0x937c>
   1bb44:	strb	r3, [sp]
   1bb48:	mov	r3, #0
   1bb4c:	ldr	ip, [r4]
   1bb50:	strb	r3, [sp, #1]
   1bb54:	mov	r3, sp
   1bb58:	str	ip, [sp, #4]
   1bb5c:	bl	1b910 <__assert_fail@plt+0x9110>
   1bb60:	ldr	r2, [sp, #4]
   1bb64:	ldr	r3, [r4]
   1bb68:	cmp	r2, r3
   1bb6c:	bne	1bb78 <__assert_fail@plt+0x9378>
   1bb70:	add	sp, sp, #8
   1bb74:	pop	{r4, pc}
   1bb78:	bl	12260 <__stack_chk_fail@plt>
   1bb7c:	andeq	r5, r3, r8, asr #22
   1bb80:	mov	r3, #0
   1bb84:	b	1b910 <__assert_fail@plt+0x9110>
   1bb88:	push	{r4, r5, r6, lr}
   1bb8c:	subs	r4, r1, #0
   1bb90:	mov	r5, r0
   1bb94:	beq	1bbb8 <__assert_fail@plt+0x93b8>
   1bb98:	mov	r0, r4
   1bb9c:	bl	124b8 <strlen@plt>
   1bba0:	mov	r2, r0
   1bba4:	mov	r1, r4
   1bba8:	mov	r0, r5
   1bbac:	mov	r3, #0
   1bbb0:	pop	{r4, r5, r6, lr}
   1bbb4:	b	1b910 <__assert_fail@plt+0x9110>
   1bbb8:	mov	r2, r4
   1bbbc:	ldr	r4, [pc]	; 1bbc4 <__assert_fail@plt+0x93c4>
   1bbc0:	b	1bba4 <__assert_fail@plt+0x93a4>
   1bbc4:	andeq	r2, r2, ip, lsl #18
   1bbc8:	cmp	r2, #0
   1bbcc:	bxeq	lr
   1bbd0:	push	{r4, r5, r6, lr}
   1bbd4:	sub	r6, r2, #1
   1bbd8:	mov	r5, r0
   1bbdc:	add	r6, r1, r6
   1bbe0:	sub	r4, r1, #1
   1bbe4:	ldrb	r3, [r4, #1]!
   1bbe8:	mov	r1, r5
   1bbec:	lsr	r3, r3, #4
   1bbf0:	cmp	r3, #9
   1bbf4:	add	r0, r3, #55	; 0x37
   1bbf8:	addls	r0, r3, #48	; 0x30
   1bbfc:	bl	126b0 <putc@plt>
   1bc00:	ldrb	r3, [r4]
   1bc04:	mov	r1, r5
   1bc08:	and	r3, r3, #15
   1bc0c:	cmp	r3, #9
   1bc10:	add	r0, r3, #55	; 0x37
   1bc14:	addls	r0, r3, #48	; 0x30
   1bc18:	bl	126b0 <putc@plt>
   1bc1c:	cmp	r4, r6
   1bc20:	bne	1bbe4 <__assert_fail@plt+0x93e4>
   1bc24:	pop	{r4, r5, r6, pc}
   1bc28:	cmp	r1, #0
   1bc2c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bc30:	sub	sp, sp, #12
   1bc34:	beq	1bdf4 <__assert_fail@plt+0x95f4>
   1bc38:	sub	r5, r0, #1
   1bc3c:	sub	r1, r1, #1
   1bc40:	mov	r7, r2
   1bc44:	add	r6, r0, r1
   1bc48:	mov	r2, r5
   1bc4c:	mov	r0, #1
   1bc50:	b	1bc84 <__assert_fail@plt+0x9484>
   1bc54:	cmp	ip, r7
   1bc58:	beq	1bd40 <__assert_fail@plt+0x9540>
   1bc5c:	cmp	r7, #0
   1bc60:	sub	r3, ip, #92	; 0x5c
   1bc64:	clz	r3, r3
   1bc68:	lsr	r3, r3, #5
   1bc6c:	moveq	r3, #0
   1bc70:	cmp	r3, #0
   1bc74:	addeq	r0, r0, #1
   1bc78:	bne	1bd54 <__assert_fail@plt+0x9554>
   1bc7c:	cmp	r2, r6
   1bc80:	beq	1bcac <__assert_fail@plt+0x94ac>
   1bc84:	ldrb	ip, [r2, #1]!
   1bc88:	cmp	ip, #127	; 0x7f
   1bc8c:	cmpne	ip, #31
   1bc90:	bhi	1bc54 <__assert_fail@plt+0x9454>
   1bc94:	cmp	ip, #13
   1bc98:	cmpne	ip, #10
   1bc9c:	bne	1bd40 <__assert_fail@plt+0x9540>
   1bca0:	cmp	r2, r6
   1bca4:	add	r0, r0, #2
   1bca8:	bne	1bc84 <__assert_fail@plt+0x9484>
   1bcac:	bl	120bc <gcry_malloc@plt>
   1bcb0:	ldr	r9, [pc, #336]	; 1be08 <__assert_fail@plt+0x9608>
   1bcb4:	mov	r8, r0
   1bcb8:	mov	r4, r0
   1bcbc:	b	1bcf4 <__assert_fail@plt+0x94f4>
   1bcc0:	cmp	r3, r7
   1bcc4:	beq	1bda0 <__assert_fail@plt+0x95a0>
   1bcc8:	cmp	r7, #0
   1bccc:	sub	r2, r3, #92	; 0x5c
   1bcd0:	clz	r2, r2
   1bcd4:	lsr	r2, r2, #5
   1bcd8:	moveq	r2, #0
   1bcdc:	cmp	r2, #0
   1bce0:	strbeq	r3, [r4]
   1bce4:	moveq	r4, r0
   1bce8:	bne	1bda0 <__assert_fail@plt+0x95a0>
   1bcec:	cmp	r5, r6
   1bcf0:	beq	1bd2c <__assert_fail@plt+0x952c>
   1bcf4:	ldrb	r3, [r5, #1]!
   1bcf8:	add	r0, r4, #1
   1bcfc:	cmp	r3, #127	; 0x7f
   1bd00:	cmpne	r3, #31
   1bd04:	bhi	1bcc0 <__assert_fail@plt+0x94c0>
   1bd08:	mov	r2, #92	; 0x5c
   1bd0c:	cmp	r3, #10
   1bd10:	strb	r2, [r4]
   1bd14:	bne	1bd5c <__assert_fail@plt+0x955c>
   1bd18:	mov	r3, #110	; 0x6e
   1bd1c:	cmp	r5, r6
   1bd20:	strb	r3, [r4, #1]
   1bd24:	add	r4, r4, #2
   1bd28:	bne	1bcf4 <__assert_fail@plt+0x94f4>
   1bd2c:	mov	r3, #0
   1bd30:	mov	r0, r8
   1bd34:	strb	r3, [r4]
   1bd38:	add	sp, sp, #12
   1bd3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bd40:	and	r1, ip, #247	; 0xf7
   1bd44:	sub	r3, ip, #11
   1bd48:	cmp	r1, #0
   1bd4c:	cmpne	r3, #1
   1bd50:	bls	1bca0 <__assert_fail@plt+0x94a0>
   1bd54:	add	r0, r0, #5
   1bd58:	b	1bc7c <__assert_fail@plt+0x947c>
   1bd5c:	cmp	r3, #13
   1bd60:	moveq	r3, #114	; 0x72
   1bd64:	strbeq	r3, [r4, #1]
   1bd68:	addeq	r4, r4, #2
   1bd6c:	beq	1bcec <__assert_fail@plt+0x94ec>
   1bd70:	cmp	r3, #12
   1bd74:	beq	1bdc4 <__assert_fail@plt+0x95c4>
   1bd78:	cmp	r3, #11
   1bd7c:	beq	1bdd4 <__assert_fail@plt+0x95d4>
   1bd80:	cmp	r3, #8
   1bd84:	beq	1bde4 <__assert_fail@plt+0x95e4>
   1bd88:	cmp	r3, #0
   1bd8c:	bne	1bda8 <__assert_fail@plt+0x95a8>
   1bd90:	mov	r3, #48	; 0x30
   1bd94:	strb	r3, [r4, #1]
   1bd98:	add	r4, r4, #2
   1bd9c:	b	1bcec <__assert_fail@plt+0x94ec>
   1bda0:	mov	r2, #92	; 0x5c
   1bda4:	strb	r2, [r4]
   1bda8:	str	r3, [sp]
   1bdac:	mvn	r2, #0
   1bdb0:	mov	r3, r9
   1bdb4:	mov	r1, #1
   1bdb8:	add	r4, r4, #4
   1bdbc:	bl	1253c <__sprintf_chk@plt>
   1bdc0:	b	1bcec <__assert_fail@plt+0x94ec>
   1bdc4:	mov	r3, #102	; 0x66
   1bdc8:	strb	r3, [r4, #1]
   1bdcc:	add	r4, r4, #2
   1bdd0:	b	1bcec <__assert_fail@plt+0x94ec>
   1bdd4:	mov	r3, #118	; 0x76
   1bdd8:	strb	r3, [r4, #1]
   1bddc:	add	r4, r4, #2
   1bde0:	b	1bcec <__assert_fail@plt+0x94ec>
   1bde4:	mov	r3, #98	; 0x62
   1bde8:	strb	r3, [r4, #1]
   1bdec:	add	r4, r4, #2
   1bdf0:	b	1bcec <__assert_fail@plt+0x94ec>
   1bdf4:	mov	r0, #1
   1bdf8:	bl	120bc <gcry_malloc@plt>
   1bdfc:	mov	r4, r0
   1be00:	mov	r8, r0
   1be04:	b	1bd2c <__assert_fail@plt+0x952c>
   1be08:	andeq	r3, r2, ip, ror #16
   1be0c:	push	{r4, lr}
   1be10:	bl	1bc28 <__assert_fail@plt+0x9428>
   1be14:	cmp	r0, #0
   1be18:	popne	{r4, pc}
   1be1c:	bl	1ba00 <__assert_fail@plt+0x9200>
   1be20:	push	{r4, r5, r6, r7, lr}
   1be24:	mov	r6, r0
   1be28:	ldr	lr, [pc, #380]	; 1bfac <__assert_fail@plt+0x97ac>
   1be2c:	mov	r7, r1
   1be30:	sub	sp, sp, #44	; 0x2c
   1be34:	ldm	lr!, {r0, r1, r2, r3}
   1be38:	add	ip, sp, #4
   1be3c:	ldr	r5, [pc, #364]	; 1bfb0 <__assert_fail@plt+0x97b0>
   1be40:	stmia	ip!, {r0, r1, r2, r3}
   1be44:	ldm	lr, {r0, r1}
   1be48:	ldr	r3, [r5]
   1be4c:	stm	ip, {r0, r1}
   1be50:	mov	r0, r6
   1be54:	str	r3, [sp, #36]	; 0x24
   1be58:	bl	1dbf4 <__assert_fail@plt+0xb3f4>
   1be5c:	clz	r3, r7
   1be60:	lsr	r3, r3, #5
   1be64:	cmp	r0, #0
   1be68:	movne	r4, #1
   1be6c:	moveq	r4, r3
   1be70:	cmp	r4, #0
   1be74:	movne	r4, #0
   1be78:	beq	1be98 <__assert_fail@plt+0x9698>
   1be7c:	ldr	r2, [sp, #36]	; 0x24
   1be80:	ldr	r3, [r5]
   1be84:	mov	r0, r4
   1be88:	cmp	r2, r3
   1be8c:	bne	1bfa8 <__assert_fail@plt+0x97a8>
   1be90:	add	sp, sp, #44	; 0x2c
   1be94:	pop	{r4, r5, r6, r7, pc}
   1be98:	mov	r0, r6
   1be9c:	bl	1dc38 <__assert_fail@plt+0xb438>
   1bea0:	subs	r6, r0, #0
   1bea4:	beq	1bf84 <__assert_fail@plt+0x9784>
   1bea8:	mov	r3, r4
   1beac:	mov	r2, #1
   1beb0:	mov	r1, #3
   1beb4:	bl	1dda4 <__assert_fail@plt+0xb5a4>
   1beb8:	mov	r1, sp
   1bebc:	mov	r0, r6
   1bec0:	bl	1f444 <__assert_fail@plt+0xcc44>
   1bec4:	cmp	r0, #6
   1bec8:	sbcs	r3, r1, #0
   1becc:	bge	1bee0 <__assert_fail@plt+0x96e0>
   1bed0:	ldr	r4, [sp]
   1bed4:	cmp	r4, #0
   1bed8:	streq	r4, [r7]
   1bedc:	beq	1bf70 <__assert_fail@plt+0x9770>
   1bee0:	add	r1, sp, #28
   1bee4:	mov	r2, #6
   1bee8:	mov	r0, r6
   1beec:	bl	1e444 <__assert_fail@plt+0xbc44>
   1bef0:	cmn	r0, #1
   1bef4:	beq	1bf98 <__assert_fail@plt+0x9798>
   1bef8:	ldr	r2, [sp, #4]
   1befc:	add	r1, sp, #8
   1bf00:	add	r0, sp, #28
   1bf04:	bl	12224 <memcmp@plt>
   1bf08:	cmp	r0, #0
   1bf0c:	beq	1bf64 <__assert_fail@plt+0x9764>
   1bf10:	ldr	r2, [sp, #12]
   1bf14:	add	r1, sp, #16
   1bf18:	add	r0, sp, #28
   1bf1c:	bl	12224 <memcmp@plt>
   1bf20:	cmp	r0, #0
   1bf24:	beq	1bf64 <__assert_fail@plt+0x9764>
   1bf28:	add	r0, sp, #28
   1bf2c:	ldr	r2, [sp, #20]
   1bf30:	add	r1, sp, #24
   1bf34:	bl	12224 <memcmp@plt>
   1bf38:	cmp	r0, #0
   1bf3c:	beq	1bf64 <__assert_fail@plt+0x9764>
   1bf40:	ldrb	r3, [sp, #28]
   1bf44:	tst	r3, #128	; 0x80
   1bf48:	beq	1bf7c <__assert_fail@plt+0x977c>
   1bf4c:	tst	r3, #64	; 0x40
   1bf50:	asreq	r3, r3, #2
   1bf54:	andne	r3, r3, #63	; 0x3f
   1bf58:	andeq	r3, r3, #15
   1bf5c:	cmp	r3, #8
   1bf60:	bne	1bf7c <__assert_fail@plt+0x977c>
   1bf64:	mov	r4, #1
   1bf68:	mov	r3, #0
   1bf6c:	str	r3, [r7]
   1bf70:	mov	r0, r6
   1bf74:	bl	1d94c <__assert_fail@plt+0xb14c>
   1bf78:	b	1be7c <__assert_fail@plt+0x967c>
   1bf7c:	mov	r4, #0
   1bf80:	b	1bf70 <__assert_fail@plt+0x9770>
   1bf84:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1bf88:	mov	r4, r6
   1bf8c:	uxth	r0, r0
   1bf90:	str	r0, [r7]
   1bf94:	b	1be7c <__assert_fail@plt+0x967c>
   1bf98:	ldr	r3, [r6, #56]	; 0x38
   1bf9c:	mov	r4, #0
   1bfa0:	str	r3, [r7]
   1bfa4:	b	1bf70 <__assert_fail@plt+0x9770>
   1bfa8:	bl	12260 <__stack_chk_fail@plt>
   1bfac:	andeq	r3, r2, ip, lsr #14
   1bfb0:	andeq	r5, r3, r8, asr #22
   1bfb4:	push	{r4, r5, r6, r7, r8, lr}
   1bfb8:	mov	r5, r0
   1bfbc:	ldr	r7, [pc, #88]	; 1c01c <__assert_fail@plt+0x981c>
   1bfc0:	mov	r6, r1
   1bfc4:	b	1bfec <__assert_fail@plt+0x97ec>
   1bfc8:	bl	12530 <strncasecmp@plt>
   1bfcc:	cmp	r0, #0
   1bfd0:	beq	1c014 <__assert_fail@plt+0x9814>
   1bfd4:	ldrb	r0, [r5, r4]!
   1bfd8:	cmp	r0, #124	; 0x7c
   1bfdc:	ldrbeq	r0, [r5, #1]
   1bfe0:	addeq	r5, r5, #1
   1bfe4:	cmp	r0, #0
   1bfe8:	popeq	{r4, r5, r6, r7, r8, pc}
   1bfec:	mov	r1, r7
   1bff0:	mov	r0, r5
   1bff4:	bl	12134 <strcspn@plt>
   1bff8:	mov	r1, r6
   1bffc:	subs	r4, r0, #0
   1c000:	mov	r2, r4
   1c004:	mov	r0, r5
   1c008:	bne	1bfc8 <__assert_fail@plt+0x97c8>
   1c00c:	mov	r0, r4
   1c010:	pop	{r4, r5, r6, r7, r8, pc}
   1c014:	mov	r0, #1
   1c018:	pop	{r4, r5, r6, r7, r8, pc}
   1c01c:	andeq	r3, r2, r4, ror r8
   1c020:	push	{r4, r5, r6, lr}
   1c024:	sub	sp, sp, #32
   1c028:	ldr	r4, [pc, #196]	; 1c0f4 <__assert_fail@plt+0x98f4>
   1c02c:	cmp	r1, #0
   1c030:	cmpne	r0, #0
   1c034:	ldr	r3, [r4]
   1c038:	str	r3, [sp, #28]
   1c03c:	bne	1c05c <__assert_fail@plt+0x985c>
   1c040:	mov	r0, #0
   1c044:	ldr	r2, [sp, #28]
   1c048:	ldr	r3, [r4]
   1c04c:	cmp	r2, r3
   1c050:	bne	1c0f0 <__assert_fail@plt+0x98f0>
   1c054:	add	sp, sp, #32
   1c058:	pop	{r4, r5, r6, pc}
   1c05c:	mov	r5, r1
   1c060:	add	r3, sp, #12
   1c064:	add	r2, sp, #8
   1c068:	add	r1, sp, #4
   1c06c:	bl	1b6b4 <__assert_fail@plt+0x8eb4>
   1c070:	subs	r6, r0, #0
   1c074:	beq	1c040 <__assert_fail@plt+0x9840>
   1c078:	mov	r0, r5
   1c07c:	add	r3, sp, #24
   1c080:	add	r2, sp, #20
   1c084:	add	r1, sp, #16
   1c088:	bl	1b6b4 <__assert_fail@plt+0x8eb4>
   1c08c:	cmp	r0, #0
   1c090:	beq	1c040 <__assert_fail@plt+0x9840>
   1c094:	ldr	r2, [sp, #4]
   1c098:	ldr	r3, [sp, #16]
   1c09c:	cmp	r2, r3
   1c0a0:	ble	1c0ac <__assert_fail@plt+0x98ac>
   1c0a4:	mov	r0, #1
   1c0a8:	b	1c044 <__assert_fail@plt+0x9844>
   1c0ac:	bne	1c040 <__assert_fail@plt+0x9840>
   1c0b0:	ldr	r2, [sp, #8]
   1c0b4:	ldr	r3, [sp, #20]
   1c0b8:	cmp	r2, r3
   1c0bc:	bgt	1c0a4 <__assert_fail@plt+0x98a4>
   1c0c0:	bne	1c040 <__assert_fail@plt+0x9840>
   1c0c4:	ldr	r2, [sp, #12]
   1c0c8:	ldr	r3, [sp, #24]
   1c0cc:	cmp	r2, r3
   1c0d0:	bgt	1c0a4 <__assert_fail@plt+0x98a4>
   1c0d4:	bne	1c040 <__assert_fail@plt+0x9840>
   1c0d8:	mov	r1, r0
   1c0dc:	mov	r0, r6
   1c0e0:	bl	12104 <strcmp@plt>
   1c0e4:	cmp	r0, #0
   1c0e8:	bge	1c0a4 <__assert_fail@plt+0x98a4>
   1c0ec:	b	1c040 <__assert_fail@plt+0x9840>
   1c0f0:	bl	12260 <__stack_chk_fail@plt>
   1c0f4:	andeq	r5, r3, r8, asr #22
   1c0f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0fc:	subs	r5, r0, #0
   1c100:	mov	r7, r1
   1c104:	mov	r6, r2
   1c108:	beq	1c2a0 <__assert_fail@plt+0x9aa0>
   1c10c:	ldrb	r4, [r5]
   1c110:	cmp	r4, #32
   1c114:	cmpne	r4, #9
   1c118:	bne	1c12c <__assert_fail@plt+0x992c>
   1c11c:	ldrb	r4, [r5, #1]!
   1c120:	cmp	r4, #9
   1c124:	cmpne	r4, #32
   1c128:	beq	1c11c <__assert_fail@plt+0x991c>
   1c12c:	cmp	r4, #45	; 0x2d
   1c130:	beq	1c370 <__assert_fail@plt+0x9b70>
   1c134:	ldr	r1, [pc, #584]	; 1c384 <__assert_fail@plt+0x9b84>
   1c138:	mov	r0, r5
   1c13c:	bl	12104 <strcmp@plt>
   1c140:	cmp	r0, #0
   1c144:	beq	1c15c <__assert_fail@plt+0x995c>
   1c148:	ldr	r1, [pc, #568]	; 1c388 <__assert_fail@plt+0x9b88>
   1c14c:	mov	r0, r5
   1c150:	bl	12104 <strcmp@plt>
   1c154:	cmp	r0, #0
   1c158:	bne	1c1b8 <__assert_fail@plt+0x99b8>
   1c15c:	ldr	r0, [pc, #552]	; 1c38c <__assert_fail@plt+0x9b8c>
   1c160:	bl	19568 <__assert_fail@plt+0x6d68>
   1c164:	ldr	r2, [r6, #4]
   1c168:	cmp	r2, #0
   1c16c:	beq	1c198 <__assert_fail@plt+0x9998>
   1c170:	ldr	r5, [pc, #536]	; 1c390 <__assert_fail@plt+0x9b90>
   1c174:	add	r4, r6, #8
   1c178:	ldr	r1, [r4, #-8]
   1c17c:	mov	r6, r4
   1c180:	add	r4, r4, #8
   1c184:	mov	r0, r5
   1c188:	bl	19568 <__assert_fail@plt+0x6d68>
   1c18c:	ldr	r2, [r4, #-4]
   1c190:	cmp	r2, #0
   1c194:	bne	1c178 <__assert_fail@plt+0x9978>
   1c198:	ldr	r3, [r6]
   1c19c:	cmp	r3, #77	; 0x4d
   1c1a0:	bne	1c268 <__assert_fail@plt+0x9a68>
   1c1a4:	ldr	r0, [r7]
   1c1a8:	str	r0, [r7]
   1c1ac:	mov	r7, #0
   1c1b0:	mov	r0, r7
   1c1b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1b8:	sub	r4, r4, #48	; 0x30
   1c1bc:	cmp	r4, #9
   1c1c0:	bls	1c270 <__assert_fail@plt+0x9a70>
   1c1c4:	mov	r0, r5
   1c1c8:	ldr	r1, [pc, #452]	; 1c394 <__assert_fail@plt+0x9b94>
   1c1cc:	bl	159c0 <__assert_fail@plt+0x31c0>
   1c1d0:	subs	r8, r0, #0
   1c1d4:	beq	1c360 <__assert_fail@plt+0x9b60>
   1c1d8:	ldr	fp, [r8]
   1c1dc:	cmp	fp, #0
   1c1e0:	beq	1c368 <__assert_fail@plt+0x9b68>
   1c1e4:	ldr	r9, [pc, #428]	; 1c398 <__assert_fail@plt+0x9b98>
   1c1e8:	mov	r4, r8
   1c1ec:	mov	r5, #0
   1c1f0:	b	1c200 <__assert_fail@plt+0x9a00>
   1c1f4:	ldr	fp, [r4, #4]!
   1c1f8:	cmp	fp, #0
   1c1fc:	beq	1c254 <__assert_fail@plt+0x9a54>
   1c200:	ldrb	r3, [fp]
   1c204:	cmp	r3, #0
   1c208:	beq	1c1f4 <__assert_fail@plt+0x99f4>
   1c20c:	ldr	r1, [r6, #4]
   1c210:	cmp	r1, #0
   1c214:	beq	1c304 <__assert_fail@plt+0x9b04>
   1c218:	mov	sl, r6
   1c21c:	b	1c230 <__assert_fail@plt+0x9a30>
   1c220:	add	sl, sl, #8
   1c224:	ldr	r1, [sl, #4]
   1c228:	cmp	r1, #0
   1c22c:	beq	1c304 <__assert_fail@plt+0x9b04>
   1c230:	mov	r0, fp
   1c234:	bl	12104 <strcmp@plt>
   1c238:	cmp	r0, #0
   1c23c:	bne	1c220 <__assert_fail@plt+0x9a20>
   1c240:	ldr	fp, [r4, #4]!
   1c244:	ldr	r3, [sl]
   1c248:	cmp	fp, #0
   1c24c:	orr	r5, r5, r3
   1c250:	bne	1c200 <__assert_fail@plt+0x9a00>
   1c254:	mov	r0, r8
   1c258:	bl	12218 <gcry_free@plt>
   1c25c:	ldr	r0, [r7]
   1c260:	orr	r0, r5, r0
   1c264:	b	1c1a8 <__assert_fail@plt+0x99a8>
   1c268:	mov	r0, #0
   1c26c:	bl	1247c <exit@plt>
   1c270:	bl	12518 <__errno_location@plt>
   1c274:	mov	r2, #0
   1c278:	mov	r1, r2
   1c27c:	mov	r4, r0
   1c280:	mov	r0, r5
   1c284:	str	r2, [r4]
   1c288:	bl	124a0 <strtoul@plt>
   1c28c:	cmn	r0, #1
   1c290:	beq	1c354 <__assert_fail@plt+0x9b54>
   1c294:	ldr	r3, [r7]
   1c298:	orr	r0, r0, r3
   1c29c:	b	1c1a8 <__assert_fail@plt+0x99a8>
   1c2a0:	cmp	r1, #0
   1c2a4:	beq	1c1b0 <__assert_fail@plt+0x99b0>
   1c2a8:	ldr	r0, [pc, #236]	; 1c39c <__assert_fail@plt+0x9b9c>
   1c2ac:	bl	19568 <__assert_fail@plt+0x6d68>
   1c2b0:	ldr	r1, [r6, #4]
   1c2b4:	cmp	r1, #0
   1c2b8:	addne	r6, r6, #8
   1c2bc:	ldrne	r4, [pc, #220]	; 1c3a0 <__assert_fail@plt+0x9ba0>
   1c2c0:	bne	1c2d8 <__assert_fail@plt+0x9ad8>
   1c2c4:	b	1c2f4 <__assert_fail@plt+0x9af4>
   1c2c8:	add	r6, r6, #8
   1c2cc:	ldr	r1, [r6, #-4]
   1c2d0:	cmp	r1, #0
   1c2d4:	beq	1c2f4 <__assert_fail@plt+0x9af4>
   1c2d8:	ldr	r2, [r7]
   1c2dc:	ldr	r3, [r6, #-8]
   1c2e0:	tst	r2, r3
   1c2e4:	beq	1c2c8 <__assert_fail@plt+0x9ac8>
   1c2e8:	mov	r0, r4
   1c2ec:	bl	197e0 <__assert_fail@plt+0x6fe0>
   1c2f0:	b	1c2c8 <__assert_fail@plt+0x9ac8>
   1c2f4:	ldr	r0, [pc, #168]	; 1c3a4 <__assert_fail@plt+0x9ba4>
   1c2f8:	bl	197e0 <__assert_fail@plt+0x6fe0>
   1c2fc:	mov	r7, #0
   1c300:	b	1c1b0 <__assert_fail@plt+0x99b0>
   1c304:	mov	r1, r9
   1c308:	mov	r0, fp
   1c30c:	bl	12104 <strcmp@plt>
   1c310:	cmp	r0, #0
   1c314:	streq	r0, [r7]
   1c318:	moveq	r5, r0
   1c31c:	beq	1c1f4 <__assert_fail@plt+0x99f4>
   1c320:	mov	r0, fp
   1c324:	ldr	r1, [pc, #124]	; 1c3a8 <__assert_fail@plt+0x9ba8>
   1c328:	bl	12104 <strcmp@plt>
   1c32c:	cmp	r0, #0
   1c330:	mvneq	r5, #0
   1c334:	beq	1c1f4 <__assert_fail@plt+0x99f4>
   1c338:	mov	r2, #5
   1c33c:	ldr	r1, [pc, #104]	; 1c3ac <__assert_fail@plt+0x9bac>
   1c340:	mov	r0, #0
   1c344:	bl	12254 <dcgettext@plt>
   1c348:	ldr	r1, [r4]
   1c34c:	bl	19568 <__assert_fail@plt+0x6d68>
   1c350:	b	1c1f4 <__assert_fail@plt+0x99f4>
   1c354:	ldr	r3, [r4]
   1c358:	cmp	r3, #34	; 0x22
   1c35c:	bne	1c1a8 <__assert_fail@plt+0x99a8>
   1c360:	mvn	r7, #0
   1c364:	b	1c1b0 <__assert_fail@plt+0x99b0>
   1c368:	mov	r5, fp
   1c36c:	b	1c254 <__assert_fail@plt+0x9a54>
   1c370:	bl	12518 <__errno_location@plt>
   1c374:	mov	r3, #22
   1c378:	mvn	r7, #0
   1c37c:	str	r3, [r0]
   1c380:	b	1c1b0 <__assert_fail@plt+0x99b0>
   1c384:	muleq	r2, r4, r8
   1c388:	andeq	r2, r2, r8, asr #30
   1c38c:	muleq	r2, r8, r8
   1c390:			; <UNDEFINED> instruction: 0x000238b0
   1c394:			; <UNDEFINED> instruction: 0x000238bc
   1c398:	andeq	r3, r2, r8, ror #17
   1c39c:	andeq	r3, r2, r8, ror r8
   1c3a0:	muleq	r2, r0, r8
   1c3a4:	andeq	r3, r2, r8, lsl pc
   1c3a8:	andeq	r3, r2, r0, asr #17
   1c3ac:	andeq	r3, r2, r4, asr #17
   1c3b0:	push	{r4, r5, r6, lr}
   1c3b4:	sub	sp, sp, #16
   1c3b8:	ldr	r5, [pc, #244]	; 1c4b4 <__assert_fail@plt+0x9cb4>
   1c3bc:	ldr	r3, [r0]
   1c3c0:	mov	r4, r0
   1c3c4:	ldr	r2, [r5]
   1c3c8:	cmp	r3, #3
   1c3cc:	str	r2, [sp, #12]
   1c3d0:	beq	1c45c <__assert_fail@plt+0x9c5c>
   1c3d4:	cmp	r3, #2
   1c3d8:	bne	1c4ac <__assert_fail@plt+0x9cac>
   1c3dc:	ldr	r6, [r0, #60]	; 0x3c
   1c3e0:	cmp	r6, #0
   1c3e4:	beq	1c4a4 <__assert_fail@plt+0x9ca4>
   1c3e8:	ldr	r2, [r0, #44]	; 0x2c
   1c3ec:	add	r3, sp, #8
   1c3f0:	str	r3, [sp]
   1c3f4:	str	r2, [sp, #8]
   1c3f8:	ldr	r3, [r0, #48]	; 0x30
   1c3fc:	ldr	r2, [r0, #76]	; 0x4c
   1c400:	mov	r1, #4
   1c404:	ldr	r0, [r0, #64]	; 0x40
   1c408:	blx	r6
   1c40c:	subs	r3, r0, #0
   1c410:	strne	r3, [r4, #56]	; 0x38
   1c414:	beq	1c43c <__assert_fail@plt+0x9c3c>
   1c418:	mov	r2, #0
   1c41c:	str	r2, [r4, #44]	; 0x2c
   1c420:	ldr	r1, [sp, #12]
   1c424:	ldr	r2, [r5]
   1c428:	mov	r0, r3
   1c42c:	cmp	r1, r2
   1c430:	bne	1c4a0 <__assert_fail@plt+0x9ca0>
   1c434:	add	sp, sp, #16
   1c438:	pop	{r4, r5, r6, pc}
   1c43c:	ldr	r1, [r4, #44]	; 0x2c
   1c440:	ldr	r2, [sp, #8]
   1c444:	cmp	r1, r2
   1c448:	beq	1c418 <__assert_fail@plt+0x9c18>
   1c44c:	ldr	r0, [pc, #100]	; 1c4b8 <__assert_fail@plt+0x9cb8>
   1c450:	bl	19568 <__assert_fail@plt+0x6d68>
   1c454:	mov	r3, #63	; 0x3f
   1c458:	b	1c418 <__assert_fail@plt+0x9c18>
   1c45c:	ldr	r3, [pc, #88]	; 1c4bc <__assert_fail@plt+0x9cbc>
   1c460:	ldr	r1, [r0, #36]	; 0x24
   1c464:	ldr	r3, [r3]
   1c468:	add	r6, r1, #8192	; 0x2000
   1c46c:	cmp	r3, #0
   1c470:	bne	1c490 <__assert_fail@plt+0x9c90>
   1c474:	mov	r1, r6
   1c478:	ldr	r0, [r4, #48]	; 0x30
   1c47c:	bl	123bc <gcry_xrealloc@plt>
   1c480:	str	r6, [r4, #36]	; 0x24
   1c484:	mov	r3, #0
   1c488:	str	r0, [r4, #48]	; 0x30
   1c48c:	b	1c420 <__assert_fail@plt+0x9c20>
   1c490:	mov	r2, r6
   1c494:	ldr	r0, [pc, #36]	; 1c4c0 <__assert_fail@plt+0x9cc0>
   1c498:	bl	19718 <__assert_fail@plt+0x6f18>
   1c49c:	b	1c474 <__assert_fail@plt+0x9c74>
   1c4a0:	bl	12260 <__stack_chk_fail@plt>
   1c4a4:	ldr	r0, [pc, #24]	; 1c4c4 <__assert_fail@plt+0x9cc4>
   1c4a8:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1c4ac:	ldr	r0, [pc, #20]	; 1c4c8 <__assert_fail@plt+0x9cc8>
   1c4b0:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1c4b4:	andeq	r5, r3, r8, asr #22
   1c4b8:	andeq	r3, r2, ip, ror #20
   1c4bc:	andeq	r6, r3, r4, lsr #6
   1c4c0:	andeq	r3, r2, ip, lsl #20
   1c4c4:	andeq	r3, r2, r0, asr sl
   1c4c8:	andeq	r3, r2, r4, lsr sl
   1c4cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c4d0:	cmp	r1, #3
   1c4d4:	ldr	r8, [sp, #32]
   1c4d8:	mov	r6, r0
   1c4dc:	mov	r9, r3
   1c4e0:	ldr	r5, [r0]
   1c4e4:	ldr	r4, [r8]
   1c4e8:	beq	1c5a0 <__assert_fail@plt+0x9da0>
   1c4ec:	cmp	r1, #4
   1c4f0:	beq	1c518 <__assert_fail@plt+0x9d18>
   1c4f4:	cmp	r1, #1
   1c4f8:	beq	1c66c <__assert_fail@plt+0x9e6c>
   1c4fc:	cmp	r1, #5
   1c500:	beq	1c6b8 <__assert_fail@plt+0x9eb8>
   1c504:	cmp	r1, #2
   1c508:	movne	r7, #0
   1c50c:	beq	1c60c <__assert_fail@plt+0x9e0c>
   1c510:	mov	r0, r7
   1c514:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c518:	cmp	r4, #0
   1c51c:	moveq	r7, r4
   1c520:	beq	1c594 <__assert_fail@plt+0x9d94>
   1c524:	mov	sl, r3
   1c528:	mov	r2, r4
   1c52c:	mov	r1, sl
   1c530:	mov	r0, r5
   1c534:	bl	125a8 <write@plt>
   1c538:	cmn	r0, #1
   1c53c:	beq	1c55c <__assert_fail@plt+0x9d5c>
   1c540:	cmp	r0, #0
   1c544:	ble	1c528 <__assert_fail@plt+0x9d28>
   1c548:	subs	r4, r4, r0
   1c54c:	add	sl, sl, r0
   1c550:	bne	1c528 <__assert_fail@plt+0x9d28>
   1c554:	mov	r7, r4
   1c558:	b	1c590 <__assert_fail@plt+0x9d90>
   1c55c:	bl	12518 <__errno_location@plt>
   1c560:	ldr	r3, [r0]
   1c564:	cmp	r3, #4
   1c568:	beq	1c528 <__assert_fail@plt+0x9d28>
   1c56c:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1c570:	uxth	r7, r0
   1c574:	bl	12518 <__errno_location@plt>
   1c578:	ldr	r0, [r0]
   1c57c:	bl	123ec <strerror@plt>
   1c580:	add	r1, r6, #20
   1c584:	mov	r2, r0
   1c588:	ldr	r0, [pc, #552]	; 1c7b8 <__assert_fail@plt+0x9fb8>
   1c58c:	bl	195cc <__assert_fail@plt+0x6dcc>
   1c590:	sub	r4, sl, r9
   1c594:	str	r4, [r8]
   1c598:	mov	r0, r7
   1c59c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c5a0:	cmp	r4, #0
   1c5a4:	beq	1c7a4 <__assert_fail@plt+0x9fa4>
   1c5a8:	ldr	r7, [r0, #12]
   1c5ac:	cmp	r7, #0
   1c5b0:	movne	r3, #0
   1c5b4:	strne	r3, [r8]
   1c5b8:	mvnne	r7, #0
   1c5bc:	beq	1c5d8 <__assert_fail@plt+0x9dd8>
   1c5c0:	b	1c510 <__assert_fail@plt+0x9d10>
   1c5c4:	bl	12518 <__errno_location@plt>
   1c5c8:	ldr	r3, [r0]
   1c5cc:	mov	sl, r0
   1c5d0:	cmp	r3, #4
   1c5d4:	bne	1c684 <__assert_fail@plt+0x9e84>
   1c5d8:	mov	r2, r4
   1c5dc:	mov	r1, r9
   1c5e0:	mov	r0, r5
   1c5e4:	bl	1214c <read@plt>
   1c5e8:	cmn	r0, #1
   1c5ec:	beq	1c5c4 <__assert_fail@plt+0x9dc4>
   1c5f0:	cmp	r0, #0
   1c5f4:	mvneq	r7, #0
   1c5f8:	moveq	r3, #1
   1c5fc:	streq	r3, [r6, #12]
   1c600:	str	r0, [r8]
   1c604:	mov	r0, r7
   1c608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c60c:	cmp	r5, #1
   1c610:	bls	1c65c <__assert_fail@plt+0x9e5c>
   1c614:	ldr	r7, [pc, #416]	; 1c7bc <__assert_fail@plt+0x9fbc>
   1c618:	ldr	r3, [r7]
   1c61c:	cmp	r3, #0
   1c620:	bne	1c740 <__assert_fail@plt+0x9f40>
   1c624:	ldr	r3, [r6, #4]
   1c628:	cmp	r3, #0
   1c62c:	bne	1c65c <__assert_fail@plt+0x9e5c>
   1c630:	ldr	r3, [r6, #8]
   1c634:	cmp	r3, #0
   1c638:	beq	1c6d0 <__assert_fail@plt+0x9ed0>
   1c63c:	mov	r0, r5
   1c640:	bl	127c4 <close@plt>
   1c644:	ldr	r3, [r7]
   1c648:	cmp	r3, #0
   1c64c:	beq	1c65c <__assert_fail@plt+0x9e5c>
   1c650:	mov	r1, r5
   1c654:	ldr	r0, [pc, #356]	; 1c7c0 <__assert_fail@plt+0x9fc0>
   1c658:	bl	19718 <__assert_fail@plt+0x6f18>
   1c65c:	mov	r0, r6
   1c660:	bl	12218 <gcry_free@plt>
   1c664:	mov	r7, #0
   1c668:	b	1c510 <__assert_fail@plt+0x9d10>
   1c66c:	mov	r7, #0
   1c670:	str	r7, [r0, #12]
   1c674:	str	r7, [r0, #4]
   1c678:	str	r7, [r0, #8]
   1c67c:	mov	r0, r7
   1c680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c684:	cmp	r3, #32
   1c688:	moveq	r0, #0
   1c68c:	beq	1c600 <__assert_fail@plt+0x9e00>
   1c690:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1c694:	uxth	r7, r0
   1c698:	ldr	r0, [sl]
   1c69c:	bl	123ec <strerror@plt>
   1c6a0:	add	r1, r6, #20
   1c6a4:	mov	r2, r0
   1c6a8:	ldr	r0, [pc, #276]	; 1c7c4 <__assert_fail@plt+0x9fc4>
   1c6ac:	bl	195cc <__assert_fail@plt+0x6dcc>
   1c6b0:	mov	r0, #0
   1c6b4:	b	1c600 <__assert_fail@plt+0x9e00>
   1c6b8:	mov	r2, r4
   1c6bc:	mov	r0, r3
   1c6c0:	ldr	r1, [pc, #256]	; 1c7c8 <__assert_fail@plt+0x9fc8>
   1c6c4:	bl	14efc <__assert_fail@plt+0x26fc>
   1c6c8:	mov	r7, #0
   1c6cc:	b	1c510 <__assert_fail@plt+0x9d10>
   1c6d0:	ldrb	r3, [r6, #20]
   1c6d4:	cmp	r3, #0
   1c6d8:	beq	1c63c <__assert_fail@plt+0x9e3c>
   1c6dc:	ldr	r9, [pc, #232]	; 1c7cc <__assert_fail@plt+0x9fcc>
   1c6e0:	add	r8, r6, #20
   1c6e4:	ldr	r4, [r9]
   1c6e8:	cmp	r4, #0
   1c6ec:	bne	1c700 <__assert_fail@plt+0x9f00>
   1c6f0:	b	1c754 <__assert_fail@plt+0x9f54>
   1c6f4:	ldr	r4, [r4]
   1c6f8:	cmp	r4, #0
   1c6fc:	beq	1c754 <__assert_fail@plt+0x9f54>
   1c700:	ldr	r3, [r4, #4]
   1c704:	cmn	r3, #1
   1c708:	bne	1c6f4 <__assert_fail@plt+0x9ef4>
   1c70c:	mov	r1, r8
   1c710:	add	r0, r4, #8
   1c714:	bl	12104 <strcmp@plt>
   1c718:	cmp	r0, #0
   1c71c:	bne	1c6f4 <__assert_fail@plt+0x9ef4>
   1c720:	ldr	r3, [r7]
   1c724:	str	r5, [r4, #4]
   1c728:	cmp	r3, #0
   1c72c:	beq	1c65c <__assert_fail@plt+0x9e5c>
   1c730:	mov	r1, r8
   1c734:	ldr	r0, [pc, #148]	; 1c7d0 <__assert_fail@plt+0x9fd0>
   1c738:	bl	19718 <__assert_fail@plt+0x6f18>
   1c73c:	b	1c65c <__assert_fail@plt+0x9e5c>
   1c740:	add	r1, r0, #20
   1c744:	mov	r2, r5
   1c748:	ldr	r0, [pc, #132]	; 1c7d4 <__assert_fail@plt+0x9fd4>
   1c74c:	bl	19718 <__assert_fail@plt+0x6f18>
   1c750:	b	1c624 <__assert_fail@plt+0x9e24>
   1c754:	ldr	r3, [r7]
   1c758:	cmp	r3, #0
   1c75c:	bne	1c794 <__assert_fail@plt+0x9f94>
   1c760:	mov	r0, r8
   1c764:	bl	124b8 <strlen@plt>
   1c768:	add	r1, r0, #12
   1c76c:	mov	r0, #1
   1c770:	bl	12734 <gcry_xcalloc@plt>
   1c774:	mov	r1, r8
   1c778:	mov	r4, r0
   1c77c:	add	r0, r0, #8
   1c780:	bl	12344 <strcpy@plt>
   1c784:	ldr	r3, [r9]
   1c788:	str	r4, [r9]
   1c78c:	stm	r4, {r3, r5}
   1c790:	b	1c65c <__assert_fail@plt+0x9e5c>
   1c794:	mov	r1, r8
   1c798:	ldr	r0, [pc, #56]	; 1c7d8 <__assert_fail@plt+0x9fd8>
   1c79c:	bl	19718 <__assert_fail@plt+0x6f18>
   1c7a0:	b	1c760 <__assert_fail@plt+0x9f60>
   1c7a4:	ldr	r3, [pc, #48]	; 1c7dc <__assert_fail@plt+0x9fdc>
   1c7a8:	ldr	r2, [pc, #48]	; 1c7e0 <__assert_fail@plt+0x9fe0>
   1c7ac:	ldr	r1, [pc, #48]	; 1c7e4 <__assert_fail@plt+0x9fe4>
   1c7b0:	ldr	r0, [pc, #48]	; 1c7e8 <__assert_fail@plt+0x9fe8>
   1c7b4:	bl	12800 <__assert_fail@plt>
   1c7b8:	andeq	r3, r2, r0, asr fp
   1c7bc:	andeq	r6, r3, r4, lsr #6
   1c7c0:	andeq	r3, r2, r4, ror #21
   1c7c4:	andeq	r3, r2, r8, lsr #21
   1c7c8:			; <UNDEFINED> instruction: 0x00023abc
   1c7cc:	andeq	r6, r3, ip, asr #4
   1c7d0:	andeq	r3, r2, r0, lsl #22
   1c7d4:	andeq	r3, r2, ip, asr #21
   1c7d8:	andeq	r3, r2, r8, lsr #22
   1c7dc:	strdeq	r3, [r2], -r0
   1c7e0:	andeq	r0, r0, r6, asr #3
   1c7e4:	muleq	r2, r0, sl
   1c7e8:	andeq	r4, r2, r4, lsl r3
   1c7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7f0:	sub	sp, sp, #20
   1c7f4:	ldr	r6, [pc, #512]	; 1c9fc <__assert_fail@plt+0xa1fc>
   1c7f8:	ldr	r8, [sp, #56]	; 0x38
   1c7fc:	mov	fp, #0
   1c800:	ldr	r2, [r6]
   1c804:	cmp	r1, #3
   1c808:	str	r2, [sp, #12]
   1c80c:	mov	r7, r0
   1c810:	mov	sl, r3
   1c814:	ldr	r9, [r0]
   1c818:	ldr	r2, [r8]
   1c81c:	str	fp, [sp, #4]
   1c820:	beq	1c8e8 <__assert_fail@plt+0xa0e8>
   1c824:	cmp	r1, #4
   1c828:	beq	1c868 <__assert_fail@plt+0xa068>
   1c82c:	cmp	r1, #1
   1c830:	streq	fp, [r0, #12]
   1c834:	streq	fp, [r0, #8]
   1c838:	beq	1c84c <__assert_fail@plt+0xa04c>
   1c83c:	cmp	r1, #5
   1c840:	beq	1c968 <__assert_fail@plt+0xa168>
   1c844:	cmp	r1, #2
   1c848:	beq	1c978 <__assert_fail@plt+0xa178>
   1c84c:	ldr	r2, [sp, #12]
   1c850:	ldr	r3, [r6]
   1c854:	mov	r0, fp
   1c858:	cmp	r2, r3
   1c85c:	bne	1c9e4 <__assert_fail@plt+0xa1e4>
   1c860:	add	sp, sp, #20
   1c864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c868:	cmp	r2, #0
   1c86c:	moveq	fp, r2
   1c870:	beq	1c8e0 <__assert_fail@plt+0xa0e0>
   1c874:	mov	r4, fp
   1c878:	mov	r5, r3
   1c87c:	str	r2, [sp, #4]
   1c880:	b	1c89c <__assert_fail@plt+0xa09c>
   1c884:	ldrd	r2, [sp, #4]
   1c888:	sub	r2, r2, r3
   1c88c:	cmp	r2, #0
   1c890:	add	r5, r5, r3
   1c894:	str	r2, [sp, #4]
   1c898:	beq	1c8dc <__assert_fail@plt+0xa0dc>
   1c89c:	add	r3, sp, #8
   1c8a0:	mov	r1, r5
   1c8a4:	mov	r0, r9
   1c8a8:	str	r4, [sp, #8]
   1c8ac:	bl	120c8 <gpgrt_write@plt>
   1c8b0:	subs	fp, r0, #0
   1c8b4:	beq	1c884 <__assert_fail@plt+0xa084>
   1c8b8:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1c8bc:	uxth	fp, r0
   1c8c0:	bl	12518 <__errno_location@plt>
   1c8c4:	ldr	r0, [r0]
   1c8c8:	bl	123ec <strerror@plt>
   1c8cc:	add	r1, r7, #20
   1c8d0:	mov	r2, r0
   1c8d4:	ldr	r0, [pc, #292]	; 1ca00 <__assert_fail@plt+0xa200>
   1c8d8:	bl	195cc <__assert_fail@plt+0x6dcc>
   1c8dc:	sub	r2, r5, sl
   1c8e0:	str	r2, [r8]
   1c8e4:	b	1c84c <__assert_fail@plt+0xa04c>
   1c8e8:	cmp	r2, fp
   1c8ec:	beq	1c9e8 <__assert_fail@plt+0xa1e8>
   1c8f0:	ldr	r3, [r0, #12]
   1c8f4:	cmp	r3, #0
   1c8f8:	strne	fp, [r8]
   1c8fc:	mvnne	fp, #0
   1c900:	bne	1c84c <__assert_fail@plt+0xa04c>
   1c904:	mov	r1, sl
   1c908:	mov	r0, r9
   1c90c:	add	r3, sp, #4
   1c910:	bl	121e8 <gpgrt_read@plt>
   1c914:	cmn	r0, #1
   1c918:	mov	fp, r0
   1c91c:	beq	1c93c <__assert_fail@plt+0xa13c>
   1c920:	ldr	r3, [sp, #4]
   1c924:	cmp	r3, #0
   1c928:	mvneq	fp, #0
   1c92c:	moveq	r2, #1
   1c930:	streq	r2, [r7, #12]
   1c934:	str	r3, [r8]
   1c938:	b	1c84c <__assert_fail@plt+0xa04c>
   1c93c:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1c940:	uxth	fp, r0
   1c944:	bl	12518 <__errno_location@plt>
   1c948:	ldr	r0, [r0]
   1c94c:	bl	123ec <strerror@plt>
   1c950:	add	r1, r7, #20
   1c954:	mov	r2, r0
   1c958:	ldr	r0, [pc, #164]	; 1ca04 <__assert_fail@plt+0xa204>
   1c95c:	bl	195cc <__assert_fail@plt+0x6dcc>
   1c960:	ldr	r3, [sp, #4]
   1c964:	b	1c934 <__assert_fail@plt+0xa134>
   1c968:	mov	r0, r3
   1c96c:	ldr	r1, [pc, #148]	; 1ca08 <__assert_fail@plt+0xa208>
   1c970:	bl	14efc <__assert_fail@plt+0x26fc>
   1c974:	b	1c84c <__assert_fail@plt+0xa04c>
   1c978:	mov	r0, fp
   1c97c:	bl	12458 <_gpgrt_get_std_stream@plt>
   1c980:	cmp	r9, r0
   1c984:	beq	1c9b4 <__assert_fail@plt+0xa1b4>
   1c988:	mov	r0, #1
   1c98c:	bl	12458 <_gpgrt_get_std_stream@plt>
   1c990:	cmp	r9, r0
   1c994:	beq	1c9b4 <__assert_fail@plt+0xa1b4>
   1c998:	ldr	r3, [pc, #108]	; 1ca0c <__assert_fail@plt+0xa20c>
   1c99c:	ldr	r3, [r3]
   1c9a0:	cmp	r3, #0
   1c9a4:	bne	1c9d0 <__assert_fail@plt+0xa1d0>
   1c9a8:	ldr	r3, [r7, #4]
   1c9ac:	cmp	r3, #0
   1c9b0:	beq	1c9c4 <__assert_fail@plt+0xa1c4>
   1c9b4:	mov	r0, r7
   1c9b8:	bl	12218 <gcry_free@plt>
   1c9bc:	mov	fp, #0
   1c9c0:	b	1c84c <__assert_fail@plt+0xa04c>
   1c9c4:	mov	r0, r9
   1c9c8:	bl	12374 <gpgrt_fclose@plt>
   1c9cc:	b	1c9b4 <__assert_fail@plt+0xa1b4>
   1c9d0:	mov	r2, r9
   1c9d4:	add	r1, r7, #20
   1c9d8:	ldr	r0, [pc, #48]	; 1ca10 <__assert_fail@plt+0xa210>
   1c9dc:	bl	19718 <__assert_fail@plt+0x6f18>
   1c9e0:	b	1c9a8 <__assert_fail@plt+0xa1a8>
   1c9e4:	bl	12260 <__stack_chk_fail@plt>
   1c9e8:	ldr	r3, [pc, #36]	; 1ca14 <__assert_fail@plt+0xa214>
   1c9ec:	ldr	r2, [pc, #36]	; 1ca18 <__assert_fail@plt+0xa218>
   1c9f0:	ldr	r1, [pc, #36]	; 1ca1c <__assert_fail@plt+0xa21c>
   1c9f4:	ldr	r0, [pc, #36]	; 1ca20 <__assert_fail@plt+0xa220>
   1c9f8:	bl	12800 <__assert_fail@plt>
   1c9fc:	andeq	r5, r3, r8, asr #22
   1ca00:	andeq	r3, r2, r0, asr fp
   1ca04:	andeq	r3, r2, r8, lsr #21
   1ca08:	andeq	r3, r2, r8, ror #22
   1ca0c:	andeq	r6, r3, r4, lsr #6
   1ca10:	andeq	r3, r2, r8, ror fp
   1ca14:	strdeq	r3, [r2], -ip
   1ca18:	andeq	r0, r0, r2, ror #4
   1ca1c:	muleq	r2, r0, sl
   1ca20:	andeq	r4, r2, r4, lsl r3
   1ca24:	push	{r4, r5, r6, lr}
   1ca28:	sub	sp, sp, #16
   1ca2c:	ldr	r5, [pc, #108]	; 1caa0 <__assert_fail@plt+0xa2a0>
   1ca30:	mov	r3, #32
   1ca34:	cmp	r0, #0
   1ca38:	ldr	r2, [r5]
   1ca3c:	mov	r4, r1
   1ca40:	str	r2, [sp, #12]
   1ca44:	str	r3, [sp, #8]
   1ca48:	beq	1ca90 <__assert_fail@plt+0xa290>
   1ca4c:	ldr	r6, [r0, #60]	; 0x3c
   1ca50:	cmp	r6, #0
   1ca54:	beq	1ca90 <__assert_fail@plt+0xa290>
   1ca58:	add	r3, sp, #8
   1ca5c:	str	r3, [sp]
   1ca60:	mov	r2, #0
   1ca64:	mov	r3, r1
   1ca68:	ldr	r0, [r0, #64]	; 0x40
   1ca6c:	mov	r1, #5
   1ca70:	blx	r6
   1ca74:	ldr	r2, [sp, #12]
   1ca78:	ldr	r3, [r5]
   1ca7c:	mov	r0, r4
   1ca80:	cmp	r2, r3
   1ca84:	bne	1ca9c <__assert_fail@plt+0xa29c>
   1ca88:	add	sp, sp, #16
   1ca8c:	pop	{r4, r5, r6, pc}
   1ca90:	mov	r3, #63	; 0x3f
   1ca94:	strh	r3, [r4]
   1ca98:	b	1ca74 <__assert_fail@plt+0xa274>
   1ca9c:	bl	12260 <__stack_chk_fail@plt>
   1caa0:	andeq	r5, r3, r8, asr #22
   1caa4:	push	{r4, r5, r6, r7, r8, lr}
   1caa8:	sub	sp, sp, #56	; 0x38
   1caac:	ldr	r8, [pc, #120]	; 1cb2c <__assert_fail@plt+0xa32c>
   1cab0:	subs	r4, r0, #0
   1cab4:	ldr	r3, [r8]
   1cab8:	str	r3, [sp, #52]	; 0x34
   1cabc:	beq	1cb10 <__assert_fail@plt+0xa310>
   1cac0:	ldr	r7, [pc, #104]	; 1cb30 <__assert_fail@plt+0xa330>
   1cac4:	add	r1, sp, #20
   1cac8:	mov	r0, r4
   1cacc:	ldr	r5, [r4, #80]	; 0x50
   1cad0:	ldr	r6, [r4, #84]	; 0x54
   1cad4:	bl	1ca24 <__assert_fail@plt+0xa224>
   1cad8:	ldr	r3, [r4, #44]	; 0x2c
   1cadc:	mov	r2, r6
   1cae0:	str	r3, [sp, #8]
   1cae4:	ldr	r3, [r4, #40]	; 0x28
   1cae8:	mov	r1, r5
   1caec:	str	r3, [sp, #4]
   1caf0:	ldr	r3, [r4, #52]	; 0x34
   1caf4:	str	r3, [sp]
   1caf8:	mov	r3, r0
   1cafc:	mov	r0, r7
   1cb00:	bl	19718 <__assert_fail@plt+0x6f18>
   1cb04:	ldr	r4, [r4, #76]	; 0x4c
   1cb08:	cmp	r4, #0
   1cb0c:	bne	1cac4 <__assert_fail@plt+0xa2c4>
   1cb10:	ldr	r2, [sp, #52]	; 0x34
   1cb14:	ldr	r3, [r8]
   1cb18:	cmp	r2, r3
   1cb1c:	bne	1cb28 <__assert_fail@plt+0xa328>
   1cb20:	add	sp, sp, #56	; 0x38
   1cb24:	pop	{r4, r5, r6, r7, r8, pc}
   1cb28:	bl	12260 <__stack_chk_fail@plt>
   1cb2c:	andeq	r5, r3, r8, asr #22
   1cb30:	andeq	r3, r2, ip, lsl #23
   1cb34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cb38:	mov	r4, r0
   1cb3c:	ldr	r7, [pc, #1204]	; 1cff8 <__assert_fail@plt+0xa7f8>
   1cb40:	ldr	r6, [pc, #1204]	; 1cffc <__assert_fail@plt+0xa7fc>
   1cb44:	sub	sp, sp, #24
   1cb48:	ldr	r0, [r7]
   1cb4c:	ldr	r3, [r6]
   1cb50:	cmp	r0, #0
   1cb54:	mov	r9, r1
   1cb58:	mov	r8, r2
   1cb5c:	str	r3, [sp, #20]
   1cb60:	bne	1cca4 <__assert_fail@plt+0xa4a4>
   1cb64:	ldr	r5, [r4]
   1cb68:	cmp	r5, #1
   1cb6c:	beq	1ce6c <__assert_fail@plt+0xa66c>
   1cb70:	cmp	r5, #0
   1cb74:	bne	1cf94 <__assert_fail@plt+0xa794>
   1cb78:	ldr	r1, [r4, #40]	; 0x28
   1cb7c:	ldr	r2, [r4, #44]	; 0x2c
   1cb80:	cmp	r1, r2
   1cb84:	bhi	1cfac <__assert_fail@plt+0xa7ac>
   1cb88:	ldr	r0, [r4, #48]	; 0x30
   1cb8c:	sub	r2, r2, r1
   1cb90:	str	r2, [r4, #44]	; 0x2c
   1cb94:	add	r1, r0, r1
   1cb98:	bl	1217c <memmove@plt>
   1cb9c:	ldr	r2, [r4, #44]	; 0x2c
   1cba0:	str	r5, [r4, #40]	; 0x28
   1cba4:	cmp	r2, r8
   1cba8:	mov	r1, r2
   1cbac:	bcs	1cc2c <__assert_fail@plt+0xa42c>
   1cbb0:	ldr	r3, [r4, #52]	; 0x34
   1cbb4:	cmp	r3, #0
   1cbb8:	beq	1cc2c <__assert_fail@plt+0xa42c>
   1cbbc:	ldr	r3, [r7]
   1cbc0:	cmp	r3, #0
   1cbc4:	bne	1ce74 <__assert_fail@plt+0xa674>
   1cbc8:	cmp	r9, #0
   1cbcc:	beq	1ce6c <__assert_fail@plt+0xa66c>
   1cbd0:	ldr	r5, [r4, #76]	; 0x4c
   1cbd4:	cmp	r5, #0
   1cbd8:	beq	1ced0 <__assert_fail@plt+0xa6d0>
   1cbdc:	ldr	r3, [r7]
   1cbe0:	cmp	r3, #0
   1cbe4:	bne	1cf00 <__assert_fail@plt+0xa700>
   1cbe8:	ldr	r0, [r4, #48]	; 0x30
   1cbec:	bl	12218 <gcry_free@plt>
   1cbf0:	ldr	r0, [r4, #72]	; 0x48
   1cbf4:	bl	12218 <gcry_free@plt>
   1cbf8:	mov	r2, #88	; 0x58
   1cbfc:	mov	r1, r5
   1cc00:	mov	r0, r4
   1cc04:	bl	121dc <memcpy@plt>
   1cc08:	mov	r0, r5
   1cc0c:	bl	12218 <gcry_free@plt>
   1cc10:	ldr	r3, [r7]
   1cc14:	cmp	r3, #0
   1cc18:	beq	1ce6c <__assert_fail@plt+0xa66c>
   1cc1c:	mov	r0, r4
   1cc20:	bl	1caa4 <__assert_fail@plt+0xa2a4>
   1cc24:	mvn	r0, #0
   1cc28:	b	1cc7c <__assert_fail@plt+0xa47c>
   1cc2c:	cmp	r2, #0
   1cc30:	bne	1cc94 <__assert_fail@plt+0xa494>
   1cc34:	ldr	r0, [r4, #56]	; 0x38
   1cc38:	cmp	r0, #0
   1cc3c:	bne	1cf60 <__assert_fail@plt+0xa760>
   1cc40:	ldr	r8, [r4, #60]	; 0x3c
   1cc44:	cmp	r8, #0
   1cc48:	beq	1ce6c <__assert_fail@plt+0xa66c>
   1cc4c:	ldr	r3, [r4, #52]	; 0x34
   1cc50:	cmp	r3, #0
   1cc54:	bne	1cc64 <__assert_fail@plt+0xa464>
   1cc58:	ldr	r3, [r4, #56]	; 0x38
   1cc5c:	cmp	r3, #0
   1cc60:	beq	1ccd8 <__assert_fail@plt+0xa4d8>
   1cc64:	cmp	r5, r1
   1cc68:	bcs	1ce6c <__assert_fail@plt+0xa66c>
   1cc6c:	ldr	r3, [r4, #48]	; 0x30
   1cc70:	add	r2, r5, #1
   1cc74:	str	r2, [r4, #40]	; 0x28
   1cc78:	ldrb	r0, [r3, r5]
   1cc7c:	ldr	r2, [sp, #20]
   1cc80:	ldr	r3, [r6]
   1cc84:	cmp	r2, r3
   1cc88:	bne	1cfa8 <__assert_fail@plt+0xa7a8>
   1cc8c:	add	sp, sp, #24
   1cc90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc94:	ldr	r8, [r4, #60]	; 0x3c
   1cc98:	cmp	r8, #0
   1cc9c:	beq	1cc64 <__assert_fail@plt+0xa464>
   1cca0:	b	1cc4c <__assert_fail@plt+0xa44c>
   1cca4:	ldr	r0, [r4, #40]	; 0x28
   1cca8:	ldr	r3, [r4, #36]	; 0x24
   1ccac:	ldr	r2, [r4, #44]	; 0x2c
   1ccb0:	add	r1, r3, r0
   1ccb4:	sub	r1, r1, r2
   1ccb8:	sub	r2, r2, r0
   1ccbc:	str	r1, [sp, #4]
   1ccc0:	str	r2, [sp]
   1ccc4:	ldr	r0, [pc, #820]	; 1d000 <__assert_fail@plt+0xa800>
   1ccc8:	ldr	r2, [r4, #84]	; 0x54
   1cccc:	ldr	r1, [r4, #80]	; 0x50
   1ccd0:	bl	19718 <__assert_fail@plt+0x6f18>
   1ccd4:	b	1cb64 <__assert_fail@plt+0xa364>
   1ccd8:	ldr	r3, [r4, #36]	; 0x24
   1ccdc:	ldr	r0, [r7]
   1cce0:	sub	r3, r3, r2
   1cce4:	cmp	r0, #0
   1cce8:	str	r3, [sp, #12]
   1ccec:	bne	1ce88 <__assert_fail@plt+0xa688>
   1ccf0:	cmp	r3, #0
   1ccf4:	beq	1cef8 <__assert_fail@plt+0xa6f8>
   1ccf8:	ldr	r3, [r4, #48]	; 0x30
   1ccfc:	add	r2, sp, #12
   1cd00:	add	r3, r3, r1
   1cd04:	str	r2, [sp]
   1cd08:	mov	r1, #3
   1cd0c:	ldr	r2, [r4, #76]	; 0x4c
   1cd10:	ldr	r0, [r4, #64]	; 0x40
   1cd14:	blx	r8
   1cd18:	ldr	r1, [r4, #44]	; 0x2c
   1cd1c:	ldr	r3, [sp, #12]
   1cd20:	ldr	r2, [r7]
   1cd24:	add	r1, r1, r3
   1cd28:	cmp	r2, #0
   1cd2c:	str	r1, [r4, #44]	; 0x2c
   1cd30:	mov	r5, r0
   1cd34:	beq	1cda4 <__assert_fail@plt+0xa5a4>
   1cd38:	cmp	r0, #0
   1cd3c:	ldr	r8, [r4, #80]	; 0x50
   1cd40:	ldr	sl, [r4, #84]	; 0x54
   1cd44:	beq	1cfd4 <__assert_fail@plt+0xa7d4>
   1cd48:	cmn	r0, #1
   1cd4c:	beq	1cf14 <__assert_fail@plt+0xa714>
   1cd50:	bl	12698 <gpg_strerror@plt>
   1cd54:	ldr	r3, [sp, #12]
   1cd58:	mov	r1, r8
   1cd5c:	str	r3, [sp, #4]
   1cd60:	mov	r2, sl
   1cd64:	mov	r3, r5
   1cd68:	str	r0, [sp]
   1cd6c:	ldr	r0, [pc, #656]	; 1d004 <__assert_fail@plt+0xa804>
   1cd70:	bl	19718 <__assert_fail@plt+0x6f18>
   1cd74:	ldr	r1, [r4, #44]	; 0x2c
   1cd78:	cmp	r1, #0
   1cd7c:	str	r5, [r4, #56]	; 0x38
   1cd80:	beq	1ce6c <__assert_fail@plt+0xa66c>
   1cd84:	ldr	r5, [r4, #40]	; 0x28
   1cd88:	cmp	r5, r1
   1cd8c:	bls	1cc64 <__assert_fail@plt+0xa464>
   1cd90:	ldr	r3, [pc, #624]	; 1d008 <__assert_fail@plt+0xa808>
   1cd94:	ldr	r2, [pc, #624]	; 1d00c <__assert_fail@plt+0xa80c>
   1cd98:	ldr	r1, [pc, #624]	; 1d010 <__assert_fail@plt+0xa810>
   1cd9c:	ldr	r0, [pc, #624]	; 1d014 <__assert_fail@plt+0xa814>
   1cda0:	bl	12800 <__assert_fail@plt>
   1cda4:	cmn	r0, #1
   1cda8:	bne	1cedc <__assert_fail@plt+0xa6dc>
   1cdac:	mov	r3, #0
   1cdb0:	add	r2, sp, #16
   1cdb4:	str	r2, [sp]
   1cdb8:	str	r3, [sp, #16]
   1cdbc:	ldr	r5, [r4, #60]	; 0x3c
   1cdc0:	ldr	r2, [r4, #76]	; 0x4c
   1cdc4:	mov	r1, #2
   1cdc8:	ldr	r0, [r4, #64]	; 0x40
   1cdcc:	blx	r5
   1cdd0:	cmp	r0, #0
   1cdd4:	bne	1cf38 <__assert_fail@plt+0xa738>
   1cdd8:	ldr	r0, [r4, #64]	; 0x40
   1cddc:	cmp	r0, #0
   1cde0:	beq	1cdf0 <__assert_fail@plt+0xa5f0>
   1cde4:	ldr	r3, [r4, #68]	; 0x44
   1cde8:	cmp	r3, #0
   1cdec:	bne	1cf58 <__assert_fail@plt+0xa758>
   1cdf0:	mov	r3, #0
   1cdf4:	mov	r2, #1
   1cdf8:	cmp	r9, #0
   1cdfc:	str	r3, [r4, #64]	; 0x40
   1ce00:	str	r3, [r4, #60]	; 0x3c
   1ce04:	str	r2, [r4, #52]	; 0x34
   1ce08:	ldr	r1, [r4, #44]	; 0x2c
   1ce0c:	beq	1cee8 <__assert_fail@plt+0xa6e8>
   1ce10:	cmp	r1, r3
   1ce14:	bne	1cd84 <__assert_fail@plt+0xa584>
   1ce18:	ldr	r5, [r4, #76]	; 0x4c
   1ce1c:	cmp	r5, r3
   1ce20:	beq	1ce6c <__assert_fail@plt+0xa66c>
   1ce24:	ldr	r3, [r7]
   1ce28:	cmp	r3, #0
   1ce2c:	bne	1cfc0 <__assert_fail@plt+0xa7c0>
   1ce30:	ldr	r0, [r4, #48]	; 0x30
   1ce34:	bl	12218 <gcry_free@plt>
   1ce38:	ldr	r0, [r4, #72]	; 0x48
   1ce3c:	bl	12218 <gcry_free@plt>
   1ce40:	mov	r2, #88	; 0x58
   1ce44:	mov	r1, r5
   1ce48:	mov	r0, r4
   1ce4c:	bl	121dc <memcpy@plt>
   1ce50:	mov	r0, r5
   1ce54:	bl	12218 <gcry_free@plt>
   1ce58:	ldr	r3, [r7]
   1ce5c:	cmp	r3, #0
   1ce60:	beq	1ce6c <__assert_fail@plt+0xa66c>
   1ce64:	mov	r0, r4
   1ce68:	bl	1caa4 <__assert_fail@plt+0xa2a4>
   1ce6c:	mvn	r0, #0
   1ce70:	b	1cc7c <__assert_fail@plt+0xa47c>
   1ce74:	ldr	r2, [r4, #84]	; 0x54
   1ce78:	ldr	r1, [r4, #80]	; 0x50
   1ce7c:	ldr	r0, [pc, #404]	; 1d018 <__assert_fail@plt+0xa818>
   1ce80:	bl	19718 <__assert_fail@plt+0x6f18>
   1ce84:	b	1cbc8 <__assert_fail@plt+0xa3c8>
   1ce88:	ldr	r2, [r4, #84]	; 0x54
   1ce8c:	ldr	r1, [r4, #80]	; 0x50
   1ce90:	ldr	r0, [pc, #388]	; 1d01c <__assert_fail@plt+0xa81c>
   1ce94:	bl	19718 <__assert_fail@plt+0x6f18>
   1ce98:	ldr	r3, [sp, #12]
   1ce9c:	cmp	r3, #0
   1cea0:	bne	1cf4c <__assert_fail@plt+0xa74c>
   1cea4:	ldr	r2, [r7]
   1cea8:	cmp	r2, #0
   1ceac:	beq	1cef4 <__assert_fail@plt+0xa6f4>
   1ceb0:	ldr	r2, [pc, #360]	; 1d020 <__assert_fail@plt+0xa820>
   1ceb4:	ldr	r0, [pc, #328]	; 1d004 <__assert_fail@plt+0xa804>
   1ceb8:	strd	r2, [sp]
   1cebc:	ldr	r2, [r4, #84]	; 0x54
   1cec0:	ldr	r1, [r4, #80]	; 0x50
   1cec4:	bl	19718 <__assert_fail@plt+0x6f18>
   1cec8:	ldr	r1, [r4, #44]	; 0x2c
   1cecc:	b	1cd84 <__assert_fail@plt+0xa584>
   1ced0:	str	r5, [r4, #52]	; 0x34
   1ced4:	mvn	r0, #0
   1ced8:	b	1cc7c <__assert_fail@plt+0xa47c>
   1cedc:	cmp	r0, #0
   1cee0:	bne	1cd78 <__assert_fail@plt+0xa578>
   1cee4:	b	1cd84 <__assert_fail@plt+0xa584>
   1cee8:	cmp	r1, #0
   1ceec:	bne	1cd84 <__assert_fail@plt+0xa584>
   1cef0:	b	1ce6c <__assert_fail@plt+0xa66c>
   1cef4:	ldr	r2, [r4, #44]	; 0x2c
   1cef8:	mov	r1, r2
   1cefc:	b	1cd84 <__assert_fail@plt+0xa584>
   1cf00:	ldr	r2, [r4, #84]	; 0x54
   1cf04:	ldr	r1, [r4, #80]	; 0x50
   1cf08:	ldr	r0, [pc, #276]	; 1d024 <__assert_fail@plt+0xa824>
   1cf0c:	bl	19718 <__assert_fail@plt+0x6f18>
   1cf10:	b	1cbe8 <__assert_fail@plt+0xa3e8>
   1cf14:	ldr	r0, [pc, #268]	; 1d028 <__assert_fail@plt+0xa828>
   1cf18:	str	r3, [sp, #4]
   1cf1c:	str	r0, [sp]
   1cf20:	mov	r3, r5
   1cf24:	mov	r2, sl
   1cf28:	mov	r1, r8
   1cf2c:	ldr	r0, [pc, #208]	; 1d004 <__assert_fail@plt+0xa804>
   1cf30:	bl	19718 <__assert_fail@plt+0x6f18>
   1cf34:	b	1cdac <__assert_fail@plt+0xa5ac>
   1cf38:	bl	12698 <gpg_strerror@plt>
   1cf3c:	mov	r1, r0
   1cf40:	ldr	r0, [pc, #228]	; 1d02c <__assert_fail@plt+0xa82c>
   1cf44:	bl	195cc <__assert_fail@plt+0x6dcc>
   1cf48:	b	1cdd8 <__assert_fail@plt+0xa5d8>
   1cf4c:	ldr	r8, [r4, #60]	; 0x3c
   1cf50:	ldr	r1, [r4, #44]	; 0x2c
   1cf54:	b	1ccf8 <__assert_fail@plt+0xa4f8>
   1cf58:	bl	12218 <gcry_free@plt>
   1cf5c:	b	1cdf0 <__assert_fail@plt+0xa5f0>
   1cf60:	ldr	r3, [r7]
   1cf64:	cmp	r3, #0
   1cf68:	beq	1ce6c <__assert_fail@plt+0xa66c>
   1cf6c:	ldr	r5, [r4, #80]	; 0x50
   1cf70:	ldr	r4, [r4, #84]	; 0x54
   1cf74:	bl	12698 <gpg_strerror@plt>
   1cf78:	mov	r2, r4
   1cf7c:	mov	r1, r5
   1cf80:	mov	r3, r0
   1cf84:	ldr	r0, [pc, #164]	; 1d030 <__assert_fail@plt+0xa830>
   1cf88:	bl	19718 <__assert_fail@plt+0x6f18>
   1cf8c:	mvn	r0, #0
   1cf90:	b	1cc7c <__assert_fail@plt+0xa47c>
   1cf94:	ldr	r3, [pc, #108]	; 1d008 <__assert_fail@plt+0xa808>
   1cf98:	ldr	r2, [pc, #148]	; 1d034 <__assert_fail@plt+0xa834>
   1cf9c:	ldr	r1, [pc, #108]	; 1d010 <__assert_fail@plt+0xa810>
   1cfa0:	ldr	r0, [pc, #144]	; 1d038 <__assert_fail@plt+0xa838>
   1cfa4:	bl	12800 <__assert_fail@plt>
   1cfa8:	bl	12260 <__stack_chk_fail@plt>
   1cfac:	ldr	r3, [pc, #84]	; 1d008 <__assert_fail@plt+0xa808>
   1cfb0:	ldr	r2, [pc, #132]	; 1d03c <__assert_fail@plt+0xa83c>
   1cfb4:	ldr	r1, [pc, #84]	; 1d010 <__assert_fail@plt+0xa810>
   1cfb8:	ldr	r0, [pc, #84]	; 1d014 <__assert_fail@plt+0xa814>
   1cfbc:	bl	12800 <__assert_fail@plt>
   1cfc0:	ldr	r2, [r4, #84]	; 0x54
   1cfc4:	ldr	r1, [r4, #80]	; 0x50
   1cfc8:	ldr	r0, [pc, #112]	; 1d040 <__assert_fail@plt+0xa840>
   1cfcc:	bl	19718 <__assert_fail@plt+0x6f18>
   1cfd0:	b	1ce30 <__assert_fail@plt+0xa630>
   1cfd4:	ldr	r0, [pc, #68]	; 1d020 <__assert_fail@plt+0xa820>
   1cfd8:	str	r3, [sp, #4]
   1cfdc:	str	r0, [sp]
   1cfe0:	mov	r3, r5
   1cfe4:	mov	r2, sl
   1cfe8:	mov	r1, r8
   1cfec:	ldr	r0, [pc, #16]	; 1d004 <__assert_fail@plt+0xa804>
   1cff0:	bl	19718 <__assert_fail@plt+0x6f18>
   1cff4:	b	1cec8 <__assert_fail@plt+0xa6c8>
   1cff8:	andeq	r6, r3, r4, lsr #6
   1cffc:	andeq	r5, r3, r8, asr #22
   1d000:	andeq	r3, r2, r4, asr #23
   1d004:	andeq	r3, r2, r4, lsl #26
   1d008:	andeq	r3, r2, ip, lsl #18
   1d00c:	andeq	r0, r0, r4, ror r7
   1d010:	muleq	r2, r0, sl
   1d014:	andeq	r3, r2, r0, lsr ip
   1d018:	andeq	r3, r2, r8, asr #24
   1d01c:	ldrdeq	r3, [r2], -r4
   1d020:	andeq	r3, r2, r4, asr #26
   1d024:	andeq	r3, r2, r4, ror ip
   1d028:	andeq	r3, r2, r0, lsr #27
   1d02c:	andeq	r3, r2, r8, asr #26
   1d030:	andeq	r3, r2, r8, lsr #25
   1d034:	andeq	r0, r0, pc, ror #13
   1d038:	andeq	r3, r2, r8, lsl ip
   1d03c:	strdeq	r0, [r0], -r4
   1d040:	andeq	r3, r2, r4, ror #26
   1d044:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d048:	subs	r7, r0, #0
   1d04c:	beq	1d10c <__assert_fail@plt+0xa90c>
   1d050:	ldr	r8, [pc, #200]	; 1d120 <__assert_fail@plt+0xa920>
   1d054:	ldr	r3, [r8]
   1d058:	cmp	r3, #0
   1d05c:	bne	1d0e4 <__assert_fail@plt+0xa8e4>
   1d060:	ldr	r3, [pc, #188]	; 1d124 <__assert_fail@plt+0xa924>
   1d064:	ldr	r4, [r3]
   1d068:	cmp	r4, #0
   1d06c:	beq	1d100 <__assert_fail@plt+0xa900>
   1d070:	ldr	sl, [pc, #176]	; 1d128 <__assert_fail@plt+0xa928>
   1d074:	mov	fp, #0
   1d078:	mvn	r9, #0
   1d07c:	ldr	r5, [r4, #4]
   1d080:	cmn	r5, #1
   1d084:	beq	1d0bc <__assert_fail@plt+0xa8bc>
   1d088:	add	r6, r4, #8
   1d08c:	mov	r0, r6
   1d090:	mov	r1, r7
   1d094:	bl	12104 <strcmp@plt>
   1d098:	cmp	r0, #0
   1d09c:	bne	1d0bc <__assert_fail@plt+0xa8bc>
   1d0a0:	ldr	r3, [r8]
   1d0a4:	cmp	r3, #0
   1d0a8:	bne	1d0d0 <__assert_fail@plt+0xa8d0>
   1d0ac:	mov	r0, r5
   1d0b0:	bl	127c4 <close@plt>
   1d0b4:	str	r9, [r4, #4]
   1d0b8:	mov	fp, r0
   1d0bc:	ldr	r4, [r4]
   1d0c0:	cmp	r4, #0
   1d0c4:	bne	1d07c <__assert_fail@plt+0xa87c>
   1d0c8:	mov	r0, fp
   1d0cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0d0:	mov	r1, r6
   1d0d4:	mov	r0, sl
   1d0d8:	bl	19718 <__assert_fail@plt+0x6f18>
   1d0dc:	ldr	r5, [r4, #4]
   1d0e0:	b	1d0ac <__assert_fail@plt+0xa8ac>
   1d0e4:	mov	r1, r7
   1d0e8:	ldr	r0, [pc, #60]	; 1d12c <__assert_fail@plt+0xa92c>
   1d0ec:	bl	19718 <__assert_fail@plt+0x6f18>
   1d0f0:	ldr	r3, [pc, #44]	; 1d124 <__assert_fail@plt+0xa924>
   1d0f4:	ldr	r4, [r3]
   1d0f8:	cmp	r4, #0
   1d0fc:	bne	1d070 <__assert_fail@plt+0xa870>
   1d100:	mov	fp, r4
   1d104:	mov	r0, fp
   1d108:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d10c:	ldr	r3, [pc, #28]	; 1d130 <__assert_fail@plt+0xa930>
   1d110:	mov	r2, #204	; 0xcc
   1d114:	ldr	r1, [pc, #24]	; 1d134 <__assert_fail@plt+0xa934>
   1d118:	ldr	r0, [pc, #24]	; 1d138 <__assert_fail@plt+0xa938>
   1d11c:	bl	12800 <__assert_fail@plt>
   1d120:	andeq	r6, r3, r4, lsr #6
   1d124:	andeq	r6, r3, ip, asr #4
   1d128:	andeq	r3, r2, r8, asr #27
   1d12c:	andeq	r3, r2, ip, lsr #27
   1d130:	andeq	r3, r2, r0, lsr #18
   1d134:	muleq	r2, r0, sl
   1d138:	andeq	r3, r2, r4, lsr #27
   1d13c:	ldr	r3, [pc, #140]	; 1d1d0 <__assert_fail@plt+0xa9d0>
   1d140:	push	{r4, r5, r6, lr}
   1d144:	cmp	r2, #0
   1d148:	mov	r6, r1
   1d14c:	mov	r5, r0
   1d150:	mov	r0, r1
   1d154:	mov	r1, #43	; 0x2b
   1d158:	movne	r4, #384	; 0x180
   1d15c:	moveq	r4, r3
   1d160:	bl	124d0 <strchr@plt>
   1d164:	cmp	r0, #0
   1d168:	beq	1d190 <__assert_fail@plt+0xa990>
   1d16c:	mov	r0, r5
   1d170:	bl	1d044 <__assert_fail@plt+0xa844>
   1d174:	cmp	r0, #0
   1d178:	moveq	r1, #2
   1d17c:	bne	1d1c8 <__assert_fail@plt+0xa9c8>
   1d180:	mov	r2, r4
   1d184:	mov	r0, r5
   1d188:	pop	{r4, r5, r6, lr}
   1d18c:	b	12398 <open64@plt>
   1d190:	mov	r1, #119	; 0x77
   1d194:	mov	r0, r6
   1d198:	bl	124d0 <strchr@plt>
   1d19c:	subs	r1, r0, #0
   1d1a0:	beq	1d180 <__assert_fail@plt+0xa980>
   1d1a4:	mov	r0, r5
   1d1a8:	bl	1d044 <__assert_fail@plt+0xa844>
   1d1ac:	cmp	r0, #0
   1d1b0:	bne	1d1c8 <__assert_fail@plt+0xa9c8>
   1d1b4:	mov	r2, r4
   1d1b8:	mov	r0, r5
   1d1bc:	ldr	r1, [pc, #16]	; 1d1d4 <__assert_fail@plt+0xa9d4>
   1d1c0:	pop	{r4, r5, r6, lr}
   1d1c4:	b	12398 <open64@plt>
   1d1c8:	mvn	r0, #0
   1d1cc:	pop	{r4, r5, r6, pc}
   1d1d0:			; <UNDEFINED> instruction: 0x000001b6
   1d1d4:	andeq	r0, r0, r1, asr #4
   1d1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1dc:	sub	sp, sp, #52	; 0x34
   1d1e0:	ldr	r9, [pc, #564]	; 1d41c <__assert_fail@plt+0xac1c>
   1d1e4:	cmp	r1, #2
   1d1e8:	mov	r5, r0
   1d1ec:	ldr	ip, [r9]
   1d1f0:	mov	r4, r2
   1d1f4:	mov	r6, r3
   1d1f8:	str	ip, [sp, #44]	; 0x2c
   1d1fc:	beq	1d34c <__assert_fail@plt+0xab4c>
   1d200:	cmp	r1, #3
   1d204:	beq	1d2e4 <__assert_fail@plt+0xaae4>
   1d208:	cmp	r1, #4
   1d20c:	bne	1d32c <__assert_fail@plt+0xab2c>
   1d210:	ldr	sl, [pc, #520]	; 1d420 <__assert_fail@plt+0xac20>
   1d214:	orrs	r3, r0, r2
   1d218:	moveq	r3, #1
   1d21c:	ldr	r2, [sl]
   1d220:	movne	r3, #0
   1d224:	cmp	r6, #0
   1d228:	movne	r4, r3
   1d22c:	moveq	r4, #0
   1d230:	cmp	r2, #0
   1d234:	beq	1d390 <__assert_fail@plt+0xab90>
   1d238:	cmp	r6, #0
   1d23c:	beq	1d3e8 <__assert_fail@plt+0xabe8>
   1d240:	mov	r1, r6
   1d244:	ldr	r0, [pc, #472]	; 1d424 <__assert_fail@plt+0xac24>
   1d248:	bl	19718 <__assert_fail@plt+0x6f18>
   1d24c:	cmp	r4, #0
   1d250:	beq	1d32c <__assert_fail@plt+0xab2c>
   1d254:	ldr	r3, [sl]
   1d258:	cmp	r3, #0
   1d25c:	beq	1d26c <__assert_fail@plt+0xaa6c>
   1d260:	mov	r1, r6
   1d264:	ldr	r0, [pc, #444]	; 1d428 <__assert_fail@plt+0xac28>
   1d268:	bl	19718 <__assert_fail@plt+0x6f18>
   1d26c:	ldr	r3, [pc, #440]	; 1d42c <__assert_fail@plt+0xac2c>
   1d270:	ldr	r4, [r3]
   1d274:	cmp	r4, #0
   1d278:	beq	1d408 <__assert_fail@plt+0xac08>
   1d27c:	ldr	fp, [pc, #428]	; 1d430 <__assert_fail@plt+0xac30>
   1d280:	mov	r8, #0
   1d284:	b	1d2a0 <__assert_fail@plt+0xaaa0>
   1d288:	mov	r0, r5
   1d28c:	bl	120e0 <fsync@plt>
   1d290:	mov	r8, r0
   1d294:	ldr	r4, [r4]
   1d298:	cmp	r4, #0
   1d29c:	beq	1d330 <__assert_fail@plt+0xab30>
   1d2a0:	ldr	r5, [r4, #4]
   1d2a4:	cmn	r5, #1
   1d2a8:	beq	1d294 <__assert_fail@plt+0xaa94>
   1d2ac:	add	r7, r4, #8
   1d2b0:	mov	r0, r7
   1d2b4:	mov	r1, r6
   1d2b8:	bl	12104 <strcmp@plt>
   1d2bc:	cmp	r0, #0
   1d2c0:	bne	1d294 <__assert_fail@plt+0xaa94>
   1d2c4:	ldr	r3, [sl]
   1d2c8:	cmp	r3, #0
   1d2cc:	beq	1d288 <__assert_fail@plt+0xaa88>
   1d2d0:	mov	r1, r7
   1d2d4:	mov	r0, fp
   1d2d8:	bl	19718 <__assert_fail@plt+0x6f18>
   1d2dc:	ldr	r5, [r4, #4]
   1d2e0:	b	1d288 <__assert_fail@plt+0xaa88>
   1d2e4:	ldr	r3, [pc, #308]	; 1d420 <__assert_fail@plt+0xac20>
   1d2e8:	ldr	r3, [r3]
   1d2ec:	cmp	r3, #0
   1d2f0:	bne	1d3b4 <__assert_fail@plt+0xabb4>
   1d2f4:	cmp	r5, #0
   1d2f8:	beq	1d32c <__assert_fail@plt+0xab2c>
   1d2fc:	ldr	r2, [r5, #76]	; 0x4c
   1d300:	cmp	r2, #0
   1d304:	bne	1d310 <__assert_fail@plt+0xab10>
   1d308:	b	1d410 <__assert_fail@plt+0xac10>
   1d30c:	mov	r2, r3
   1d310:	ldr	r3, [r2, #76]	; 0x4c
   1d314:	cmp	r3, #0
   1d318:	bne	1d30c <__assert_fail@plt+0xab0c>
   1d31c:	ldr	r3, [pc, #272]	; 1d434 <__assert_fail@plt+0xac34>
   1d320:	ldr	r1, [r2, #60]	; 0x3c
   1d324:	cmp	r1, r3
   1d328:	beq	1d3f8 <__assert_fail@plt+0xabf8>
   1d32c:	mvn	r8, #0
   1d330:	ldr	r2, [sp, #44]	; 0x2c
   1d334:	ldr	r3, [r9]
   1d338:	mov	r0, r8
   1d33c:	cmp	r2, r3
   1d340:	bne	1d418 <__assert_fail@plt+0xac18>
   1d344:	add	sp, sp, #52	; 0x34
   1d348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d34c:	ldr	r3, [pc, #204]	; 1d420 <__assert_fail@plt+0xac20>
   1d350:	ldr	r3, [r3]
   1d354:	cmp	r3, #0
   1d358:	bne	1d39c <__assert_fail@plt+0xab9c>
   1d35c:	orrs	r3, r5, r4
   1d360:	moveq	r3, #1
   1d364:	movne	r3, #0
   1d368:	cmp	r6, #0
   1d36c:	moveq	r3, #0
   1d370:	cmp	r3, #0
   1d374:	beq	1d32c <__assert_fail@plt+0xab2c>
   1d378:	mov	r0, r6
   1d37c:	bl	1d044 <__assert_fail@plt+0xa844>
   1d380:	adds	r0, r0, #0
   1d384:	movne	r0, #1
   1d388:	rsb	r8, r0, #0
   1d38c:	b	1d330 <__assert_fail@plt+0xab30>
   1d390:	cmp	r4, #0
   1d394:	bne	1d26c <__assert_fail@plt+0xaa6c>
   1d398:	b	1d32c <__assert_fail@plt+0xab2c>
   1d39c:	cmp	r6, #0
   1d3a0:	ldr	r1, [pc, #144]	; 1d438 <__assert_fail@plt+0xac38>
   1d3a4:	ldr	r0, [pc, #144]	; 1d43c <__assert_fail@plt+0xac3c>
   1d3a8:	movne	r1, r6
   1d3ac:	bl	19718 <__assert_fail@plt+0x6f18>
   1d3b0:	b	1d35c <__assert_fail@plt+0xab5c>
   1d3b4:	cmp	r0, #0
   1d3b8:	mvneq	r6, #0
   1d3bc:	add	r1, sp, #12
   1d3c0:	ldrdne	r6, [r0, #80]	; 0x50
   1d3c4:	moveq	r7, r6
   1d3c8:	bl	1ca24 <__assert_fail@plt+0xa224>
   1d3cc:	str	r4, [sp]
   1d3d0:	mov	r2, r7
   1d3d4:	mov	r1, r6
   1d3d8:	mov	r3, r0
   1d3dc:	ldr	r0, [pc, #92]	; 1d440 <__assert_fail@plt+0xac40>
   1d3e0:	bl	19718 <__assert_fail@plt+0x6f18>
   1d3e4:	b	1d2f4 <__assert_fail@plt+0xaaf4>
   1d3e8:	ldr	r1, [pc, #84]	; 1d444 <__assert_fail@plt+0xac44>
   1d3ec:	ldr	r0, [pc, #48]	; 1d424 <__assert_fail@plt+0xac24>
   1d3f0:	bl	19718 <__assert_fail@plt+0x6f18>
   1d3f4:	b	1d32c <__assert_fail@plt+0xab2c>
   1d3f8:	ldr	r3, [r2, #64]	; 0x40
   1d3fc:	mov	r8, #0
   1d400:	str	r4, [r3, #8]
   1d404:	b	1d330 <__assert_fail@plt+0xab30>
   1d408:	mov	r8, r4
   1d40c:	b	1d330 <__assert_fail@plt+0xab30>
   1d410:	mov	r2, r5
   1d414:	b	1d31c <__assert_fail@plt+0xab1c>
   1d418:	bl	12260 <__stack_chk_fail@plt>
   1d41c:	andeq	r5, r3, r8, asr #22
   1d420:	andeq	r6, r3, r4, lsr #6
   1d424:	andeq	r3, r2, r0, lsr lr
   1d428:	andeq	r3, r2, r0, asr lr
   1d42c:	andeq	r6, r3, ip, asr #4
   1d430:	andeq	r3, r2, ip, ror #28
   1d434:	andeq	ip, r1, ip, asr #9
   1d438:	muleq	r2, r4, r8
   1d43c:	andeq	r3, r2, r4, ror #27
   1d440:	andeq	r3, r2, r8, lsl #28
   1d444:	andeq	r3, r2, r8, lsl #29
   1d448:	cmp	r0, #0
   1d44c:	bxeq	lr
   1d450:	ldr	r2, [r0, #76]	; 0x4c
   1d454:	cmp	r2, #0
   1d458:	bne	1d464 <__assert_fail@plt+0xac64>
   1d45c:	b	1d488 <__assert_fail@plt+0xac88>
   1d460:	mov	r2, r3
   1d464:	ldr	r3, [r2, #76]	; 0x4c
   1d468:	cmp	r3, #0
   1d46c:	bne	1d460 <__assert_fail@plt+0xac60>
   1d470:	ldr	r3, [pc, #48]	; 1d4a8 <__assert_fail@plt+0xaca8>
   1d474:	ldr	r1, [r2, #60]	; 0x3c
   1d478:	cmp	r1, r3
   1d47c:	beq	1d490 <__assert_fail@plt+0xac90>
   1d480:	mov	r0, #0
   1d484:	bx	lr
   1d488:	mov	r2, r0
   1d48c:	b	1d470 <__assert_fail@plt+0xac70>
   1d490:	ldr	r0, [r2, #64]	; 0x40
   1d494:	ldr	r3, [r0, #16]
   1d498:	cmp	r3, #0
   1d49c:	bne	1d480 <__assert_fail@plt+0xac80>
   1d4a0:	add	r0, r0, #20
   1d4a4:	bx	lr
   1d4a8:	andeq	ip, r1, ip, asr #9
   1d4ac:	ldr	r3, [pc, #32]	; 1d4d4 <__assert_fail@plt+0xacd4>
   1d4b0:	ldr	r3, [r3]
   1d4b4:	cmp	r3, #0
   1d4b8:	beq	1d4cc <__assert_fail@plt+0xaccc>
   1d4bc:	push	{r4, lr}
   1d4c0:	bl	1caa4 <__assert_fail@plt+0xa2a4>
   1d4c4:	mov	r0, #0
   1d4c8:	pop	{r4, pc}
   1d4cc:	mov	r0, #0
   1d4d0:	bx	lr
   1d4d4:	andeq	r6, r3, r4, lsr #6
   1d4d8:	cmp	r0, #3
   1d4dc:	push	{r4, r5, r6, lr}
   1d4e0:	bhi	1d540 <__assert_fail@plt+0xad40>
   1d4e4:	cmp	r1, #0
   1d4e8:	mov	r5, r1
   1d4ec:	beq	1d554 <__assert_fail@plt+0xad54>
   1d4f0:	mov	r6, r0
   1d4f4:	mov	r1, #88	; 0x58
   1d4f8:	mov	r0, #1
   1d4fc:	bl	12734 <gcry_xcalloc@plt>
   1d500:	mov	r4, r0
   1d504:	mov	r0, r5
   1d508:	str	r6, [r4]
   1d50c:	bl	12098 <gcry_xmalloc@plt>
   1d510:	ldr	r1, [pc, #68]	; 1d55c <__assert_fail@plt+0xad5c>
   1d514:	mov	r2, #0
   1d518:	str	r5, [r4, #36]	; 0x24
   1d51c:	ldr	r3, [r1, #4]
   1d520:	str	r2, [r4, #84]	; 0x54
   1d524:	add	r3, r3, #1
   1d528:	str	r3, [r1, #4]
   1d52c:	str	r3, [r4, #80]	; 0x50
   1d530:	str	r2, [r4, #72]	; 0x48
   1d534:	str	r0, [r4, #48]	; 0x30
   1d538:	mov	r0, r4
   1d53c:	pop	{r4, r5, r6, pc}
   1d540:	ldr	r3, [pc, #24]	; 1d560 <__assert_fail@plt+0xad60>
   1d544:	mov	r2, #1104	; 0x450
   1d548:	ldr	r1, [pc, #20]	; 1d564 <__assert_fail@plt+0xad64>
   1d54c:	ldr	r0, [pc, #20]	; 1d568 <__assert_fail@plt+0xad68>
   1d550:	bl	12800 <__assert_fail@plt>
   1d554:	ldr	r0, [pc, #16]	; 1d56c <__assert_fail@plt+0xad6c>
   1d558:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1d55c:	andeq	r6, r3, ip, asr #4
   1d560:	andeq	r3, r2, r4, lsr r9
   1d564:	muleq	r2, r0, sl
   1d568:	muleq	r2, r0, lr
   1d56c:	strdeq	r3, [r2], -r4
   1d570:	mov	r3, r1
   1d574:	push	{r4, r5, r6, r7, r8, lr}
   1d578:	mov	r1, #119	; 0x77
   1d57c:	sub	sp, sp, #8
   1d580:	mov	r6, r0
   1d584:	mov	r0, r3
   1d588:	mov	r7, r2
   1d58c:	bl	124d0 <strchr@plt>
   1d590:	mov	r1, #8192	; 0x2000
   1d594:	cmp	r0, #0
   1d598:	movne	r0, #2
   1d59c:	moveq	r0, #0
   1d5a0:	bl	1d4d8 <__assert_fail@plt+0xacd8>
   1d5a4:	mov	r5, r0
   1d5a8:	mov	r0, #44	; 0x2c
   1d5ac:	bl	12098 <gcry_xmalloc@plt>
   1d5b0:	mov	ip, #1
   1d5b4:	mov	r1, ip
   1d5b8:	ldr	r3, [pc, #144]	; 1d650 <__assert_fail@plt+0xae50>
   1d5bc:	mvn	r2, #0
   1d5c0:	str	r6, [sp]
   1d5c4:	mov	r4, r0
   1d5c8:	add	r8, r0, #20
   1d5cc:	mov	r0, r8
   1d5d0:	str	r6, [r4]
   1d5d4:	str	r7, [r4, #4]
   1d5d8:	str	ip, [r4, #16]
   1d5dc:	bl	1253c <__sprintf_chk@plt>
   1d5e0:	ldr	r1, [pc, #108]	; 1d654 <__assert_fail@plt+0xae54>
   1d5e4:	mov	r3, #0
   1d5e8:	ldr	r2, [pc, #104]	; 1d658 <__assert_fail@plt+0xae58>
   1d5ec:	ldr	r1, [r1]
   1d5f0:	str	r4, [r5, #64]	; 0x40
   1d5f4:	cmp	r1, r3
   1d5f8:	str	r2, [r5, #60]	; 0x3c
   1d5fc:	str	r3, [r4, #12]
   1d600:	str	r3, [r4, #4]
   1d604:	str	r3, [r4, #8]
   1d608:	beq	1d630 <__assert_fail@plt+0xae30>
   1d60c:	ldr	r0, [pc, #72]	; 1d65c <__assert_fail@plt+0xae5c>
   1d610:	cmp	r7, #0
   1d614:	ldr	r1, [r5, #80]	; 0x50
   1d618:	ldr	r2, [r5, #84]	; 0x54
   1d61c:	ldr	r3, [pc, #60]	; 1d660 <__assert_fail@plt+0xae60>
   1d620:	str	r8, [sp]
   1d624:	movne	r3, r0
   1d628:	ldr	r0, [pc, #52]	; 1d664 <__assert_fail@plt+0xae64>
   1d62c:	bl	19718 <__assert_fail@plt+0x6f18>
   1d630:	mov	r3, #0
   1d634:	mov	r2, #1
   1d638:	mov	r1, #3
   1d63c:	mov	r0, r5
   1d640:	bl	1d1d8 <__assert_fail@plt+0xa9d8>
   1d644:	mov	r0, r5
   1d648:	add	sp, sp, #8
   1d64c:	pop	{r4, r5, r6, r7, r8, pc}
   1d650:	andeq	r3, r2, r0, lsr #30
   1d654:	andeq	r6, r3, r4, lsr #6
   1d658:	andeq	ip, r1, ip, asr #9
   1d65c:	andeq	r3, r2, ip, lsl pc
   1d660:	andeq	r2, r2, ip, lsl #18
   1d664:	andeq	r3, r2, r8, lsr #30
   1d668:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d66c:	subs	r7, r1, #0
   1d670:	ldr	r8, [pc, #684]	; 1d924 <__assert_fail@plt+0xb124>
   1d674:	sub	sp, sp, #48	; 0x30
   1d678:	mov	r4, r0
   1d67c:	ldr	r1, [r8]
   1d680:	mov	r9, r2
   1d684:	mov	r6, r3
   1d688:	str	r1, [sp, #44]	; 0x2c
   1d68c:	beq	1d7d4 <__assert_fail@plt+0xafd4>
   1d690:	cmp	r0, #0
   1d694:	beq	1d734 <__assert_fail@plt+0xaf34>
   1d698:	ldrb	r3, [r0]
   1d69c:	cmp	r3, #45	; 0x2d
   1d6a0:	beq	1d728 <__assert_fail@plt+0xaf28>
   1d6a4:	mov	r2, #1
   1d6a8:	mov	r1, #0
   1d6ac:	mov	r0, r4
   1d6b0:	bl	19e50 <__assert_fail@plt+0x7650>
   1d6b4:	cmn	r0, #1
   1d6b8:	bne	1d888 <__assert_fail@plt+0xb088>
   1d6bc:	cmp	r9, #0
   1d6c0:	bne	1d7e4 <__assert_fail@plt+0xafe4>
   1d6c4:	ldr	r3, [pc, #604]	; 1d928 <__assert_fail@plt+0xb128>
   1d6c8:	ldr	r5, [r3]
   1d6cc:	cmp	r5, #0
   1d6d0:	beq	1d700 <__assert_fail@plt+0xaf00>
   1d6d4:	ldr	r7, [r5, #4]
   1d6d8:	cmn	r7, #1
   1d6dc:	beq	1d6f4 <__assert_fail@plt+0xaef4>
   1d6e0:	mov	r1, r4
   1d6e4:	add	r0, r5, #8
   1d6e8:	bl	12104 <strcmp@plt>
   1d6ec:	cmp	r0, #0
   1d6f0:	beq	1d89c <__assert_fail@plt+0xb09c>
   1d6f4:	ldr	r5, [r5]
   1d6f8:	cmp	r5, #0
   1d6fc:	bne	1d6d4 <__assert_fail@plt+0xaed4>
   1d700:	ldr	sl, [pc, #548]	; 1d92c <__assert_fail@plt+0xb12c>
   1d704:	ldr	r3, [sl]
   1d708:	cmp	r3, #0
   1d70c:	bne	1d900 <__assert_fail@plt+0xb100>
   1d710:	mov	r1, r6
   1d714:	mov	r2, #0
   1d718:	mov	r0, r4
   1d71c:	bl	1d13c <__assert_fail@plt+0xa93c>
   1d720:	mov	r7, r0
   1d724:	b	1d7f8 <__assert_fail@plt+0xaff8>
   1d728:	ldrb	r3, [r0, #1]
   1d72c:	cmp	r3, #0
   1d730:	bne	1d6a4 <__assert_fail@plt+0xaea4>
   1d734:	ldr	r3, [pc, #500]	; 1d930 <__assert_fail@plt+0xb130>
   1d738:	cmp	r9, #0
   1d73c:	mov	r1, #8192	; 0x2000
   1d740:	mov	r0, r9
   1d744:	moveq	r7, #0
   1d748:	ldr	r4, [pc, #484]	; 1d934 <__assert_fail@plt+0xb134>
   1d74c:	movne	r4, r3
   1d750:	bl	1d4d8 <__assert_fail@plt+0xacd8>
   1d754:	ldr	sl, [pc, #464]	; 1d92c <__assert_fail@plt+0xb12c>
   1d758:	mov	r6, r0
   1d75c:	mov	r0, r4
   1d760:	bl	124b8 <strlen@plt>
   1d764:	mov	r9, r0
   1d768:	add	r0, r0, #24
   1d76c:	bl	12098 <gcry_xmalloc@plt>
   1d770:	mov	r3, #1
   1d774:	add	r2, r9, r3
   1d778:	mov	r1, r4
   1d77c:	str	r7, [r0]
   1d780:	str	r3, [r0, #16]
   1d784:	mov	r5, r0
   1d788:	add	r0, r0, #20
   1d78c:	bl	121dc <memcpy@plt>
   1d790:	ldr	r3, [sl]
   1d794:	ldr	r2, [pc, #412]	; 1d938 <__assert_fail@plt+0xb138>
   1d798:	cmp	r3, #0
   1d79c:	mov	r3, #0
   1d7a0:	str	r5, [r6, #64]	; 0x40
   1d7a4:	str	r2, [r6, #60]	; 0x3c
   1d7a8:	str	r3, [r5, #12]
   1d7ac:	str	r3, [r5, #4]
   1d7b0:	str	r3, [r5, #8]
   1d7b4:	bne	1d850 <__assert_fail@plt+0xb050>
   1d7b8:	ldr	r2, [sp, #44]	; 0x2c
   1d7bc:	ldr	r3, [r8]
   1d7c0:	mov	r0, r6
   1d7c4:	cmp	r2, r3
   1d7c8:	bne	1d920 <__assert_fail@plt+0xb120>
   1d7cc:	add	sp, sp, #48	; 0x30
   1d7d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d7d4:	cmp	r0, #0
   1d7d8:	bne	1d6bc <__assert_fail@plt+0xaebc>
   1d7dc:	mov	r6, #0
   1d7e0:	b	1d7b8 <__assert_fail@plt+0xafb8>
   1d7e4:	mov	r1, r6
   1d7e8:	ldr	r2, [sp, #80]	; 0x50
   1d7ec:	mov	r0, r4
   1d7f0:	bl	1d13c <__assert_fail@plt+0xa93c>
   1d7f4:	mov	r7, r0
   1d7f8:	cmn	r7, #1
   1d7fc:	beq	1d7dc <__assert_fail@plt+0xafdc>
   1d800:	ldr	sl, [pc, #292]	; 1d92c <__assert_fail@plt+0xb12c>
   1d804:	mov	r1, #8192	; 0x2000
   1d808:	mov	r0, r9
   1d80c:	bl	1d4d8 <__assert_fail@plt+0xacd8>
   1d810:	mov	r6, r0
   1d814:	mov	r0, r4
   1d818:	bl	124b8 <strlen@plt>
   1d81c:	add	r0, r0, #24
   1d820:	bl	12098 <gcry_xmalloc@plt>
   1d824:	mov	r3, #0
   1d828:	mov	r1, r4
   1d82c:	str	r3, [r0, #16]
   1d830:	str	r7, [r0]
   1d834:	mov	r5, r0
   1d838:	add	r0, r0, #20
   1d83c:	bl	12344 <strcpy@plt>
   1d840:	mov	r0, r4
   1d844:	bl	125c0 <gcry_xstrdup@plt>
   1d848:	str	r0, [r6, #72]	; 0x48
   1d84c:	b	1d790 <__assert_fail@plt+0xaf90>
   1d850:	add	r1, sp, #12
   1d854:	mov	r0, r6
   1d858:	ldr	r7, [r6, #80]	; 0x50
   1d85c:	ldr	r9, [r6, #84]	; 0x54
   1d860:	bl	1ca24 <__assert_fail@plt+0xa224>
   1d864:	ldr	r3, [r5]
   1d868:	mov	r2, r9
   1d86c:	str	r3, [sp, #4]
   1d870:	mov	r1, r7
   1d874:	mov	r3, r4
   1d878:	str	r0, [sp]
   1d87c:	ldr	r0, [pc, #184]	; 1d93c <__assert_fail@plt+0xb13c>
   1d880:	bl	19718 <__assert_fail@plt+0x6f18>
   1d884:	b	1d7b8 <__assert_fail@plt+0xafb8>
   1d888:	mov	r1, r6
   1d88c:	mov	r2, #0
   1d890:	bl	1d570 <__assert_fail@plt+0xad70>
   1d894:	mov	r6, r0
   1d898:	b	1d7b8 <__assert_fail@plt+0xafb8>
   1d89c:	ldr	sl, [pc, #136]	; 1d92c <__assert_fail@plt+0xb12c>
   1d8a0:	mvn	r3, #0
   1d8a4:	str	r3, [r5, #4]
   1d8a8:	ldr	r3, [sl]
   1d8ac:	cmp	r3, #0
   1d8b0:	bne	1d910 <__assert_fail@plt+0xb110>
   1d8b4:	mov	r6, #0
   1d8b8:	mov	r2, #0
   1d8bc:	mov	r3, #0
   1d8c0:	str	r6, [sp]
   1d8c4:	mov	r0, r7
   1d8c8:	bl	12320 <lseek64@plt>
   1d8cc:	mvn	r3, #0
   1d8d0:	mvn	r2, #0
   1d8d4:	cmp	r1, r3
   1d8d8:	cmpeq	r0, r2
   1d8dc:	bne	1d804 <__assert_fail@plt+0xb004>
   1d8e0:	bl	12518 <__errno_location@plt>
   1d8e4:	ldr	r0, [r0]
   1d8e8:	bl	123ec <strerror@plt>
   1d8ec:	mov	r1, r7
   1d8f0:	mov	r2, r0
   1d8f4:	ldr	r0, [pc, #68]	; 1d940 <__assert_fail@plt+0xb140>
   1d8f8:	bl	195cc <__assert_fail@plt+0x6dcc>
   1d8fc:	b	1d7b8 <__assert_fail@plt+0xafb8>
   1d900:	mov	r1, r4
   1d904:	ldr	r0, [pc, #56]	; 1d944 <__assert_fail@plt+0xb144>
   1d908:	bl	19718 <__assert_fail@plt+0x6f18>
   1d90c:	b	1d710 <__assert_fail@plt+0xaf10>
   1d910:	mov	r1, r4
   1d914:	ldr	r0, [pc, #44]	; 1d948 <__assert_fail@plt+0xb148>
   1d918:	bl	19718 <__assert_fail@plt+0x6f18>
   1d91c:	b	1d8b4 <__assert_fail@plt+0xb0b4>
   1d920:	bl	12260 <__stack_chk_fail@plt>
   1d924:	andeq	r5, r3, r8, asr #22
   1d928:	andeq	r6, r3, ip, asr #4
   1d92c:	andeq	r6, r3, r4, lsr #6
   1d930:	andeq	r3, r2, r8, asr r8
   1d934:	andeq	r3, r2, r4, ror #16
   1d938:	andeq	ip, r1, ip, asr #9
   1d93c:	andeq	r3, r2, r0, lsr #31
   1d940:	andeq	r3, r2, r8, ror #30
   1d944:	andeq	r3, r2, r0, lsl #31
   1d948:	andeq	r3, r2, r4, asr #30
   1d94c:	ldr	r3, [pc, #324]	; 1da98 <__assert_fail@plt+0xb298>
   1d950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d954:	sub	sp, sp, #52	; 0x34
   1d958:	ldr	r3, [r3]
   1d95c:	mov	r6, #0
   1d960:	subs	r4, r0, #0
   1d964:	str	r6, [sp, #8]
   1d968:	str	r3, [sp, #44]	; 0x2c
   1d96c:	beq	1da70 <__assert_fail@plt+0xb270>
   1d970:	ldr	r8, [pc, #292]	; 1da9c <__assert_fail@plt+0xb29c>
   1d974:	ldr	sl, [pc, #292]	; 1daa0 <__assert_fail@plt+0xb2a0>
   1d978:	ldr	r9, [pc, #292]	; 1daa4 <__assert_fail@plt+0xb2a4>
   1d97c:	b	1da04 <__assert_fail@plt+0xb204>
   1d980:	ldr	r7, [r4, #60]	; 0x3c
   1d984:	cmp	r7, #0
   1d988:	beq	1d9cc <__assert_fail@plt+0xb1cc>
   1d98c:	add	r3, sp, #8
   1d990:	ldr	r2, [r4, #76]	; 0x4c
   1d994:	ldr	r0, [r4, #64]	; 0x40
   1d998:	mov	r1, #2
   1d99c:	str	r3, [sp]
   1d9a0:	mov	r3, #0
   1d9a4:	blx	r7
   1d9a8:	subs	r7, r0, #0
   1d9ac:	beq	1d9cc <__assert_fail@plt+0xb1cc>
   1d9b0:	mov	r0, r6
   1d9b4:	bl	12698 <gpg_strerror@plt>
   1d9b8:	mov	r1, r0
   1d9bc:	mov	r0, r9
   1d9c0:	bl	195cc <__assert_fail@plt+0x6dcc>
   1d9c4:	cmp	r6, #0
   1d9c8:	moveq	r6, r7
   1d9cc:	ldr	r0, [r4, #72]	; 0x48
   1d9d0:	bl	12218 <gcry_free@plt>
   1d9d4:	ldr	r0, [r4, #48]	; 0x30
   1d9d8:	cmp	r0, #0
   1d9dc:	beq	1d9f4 <__assert_fail@plt+0xb1f4>
   1d9e0:	ldr	r2, [r4, #36]	; 0x24
   1d9e4:	mov	r1, #0
   1d9e8:	bl	12560 <memset@plt>
   1d9ec:	ldr	r0, [r4, #48]	; 0x30
   1d9f0:	bl	12218 <gcry_free@plt>
   1d9f4:	mov	r0, r4
   1d9f8:	bl	12218 <gcry_free@plt>
   1d9fc:	subs	r4, r5, #0
   1da00:	beq	1da74 <__assert_fail@plt+0xb274>
   1da04:	ldr	r3, [r4]
   1da08:	ldr	r5, [r4, #76]	; 0x4c
   1da0c:	cmp	r3, #2
   1da10:	beq	1da4c <__assert_fail@plt+0xb24c>
   1da14:	ldr	r3, [r8]
   1da18:	cmp	r3, #0
   1da1c:	beq	1d980 <__assert_fail@plt+0xb180>
   1da20:	add	r1, sp, #12
   1da24:	mov	r0, r4
   1da28:	ldr	r7, [r4, #80]	; 0x50
   1da2c:	ldr	fp, [r4, #84]	; 0x54
   1da30:	bl	1ca24 <__assert_fail@plt+0xa224>
   1da34:	mov	r2, fp
   1da38:	mov	r1, r7
   1da3c:	mov	r3, r0
   1da40:	mov	r0, sl
   1da44:	bl	19718 <__assert_fail@plt+0x6f18>
   1da48:	b	1d980 <__assert_fail@plt+0xb180>
   1da4c:	mov	r0, r4
   1da50:	bl	1c3b0 <__assert_fail@plt+0x9bb0>
   1da54:	subs	r6, r0, #0
   1da58:	beq	1da14 <__assert_fail@plt+0xb214>
   1da5c:	bl	12698 <gpg_strerror@plt>
   1da60:	mov	r1, r0
   1da64:	ldr	r0, [pc, #60]	; 1daa8 <__assert_fail@plt+0xb2a8>
   1da68:	bl	195cc <__assert_fail@plt+0x6dcc>
   1da6c:	b	1da14 <__assert_fail@plt+0xb214>
   1da70:	mov	r6, r4
   1da74:	ldr	r3, [pc, #28]	; 1da98 <__assert_fail@plt+0xb298>
   1da78:	ldr	r2, [sp, #44]	; 0x2c
   1da7c:	mov	r0, r6
   1da80:	ldr	r3, [r3]
   1da84:	cmp	r2, r3
   1da88:	bne	1da94 <__assert_fail@plt+0xb294>
   1da8c:	add	sp, sp, #52	; 0x34
   1da90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da94:	bl	12260 <__stack_chk_fail@plt>
   1da98:	andeq	r5, r3, r8, asr #22
   1da9c:	andeq	r6, r3, r4, lsr #6
   1daa0:	andeq	r3, r2, ip, ror #31
   1daa4:	andeq	r4, r2, r8
   1daa8:	andeq	r3, r2, r8, asr #31
   1daac:	push	{r4, r5, r6, r7, r8, lr}
   1dab0:	sub	sp, sp, #16
   1dab4:	ldr	r8, [pc, #172]	; 1db68 <__assert_fail@plt+0xb368>
   1dab8:	subs	r7, r0, #0
   1dabc:	ldr	r3, [r8]
   1dac0:	str	r3, [sp, #12]
   1dac4:	beq	1db10 <__assert_fail@plt+0xb310>
   1dac8:	ldr	r3, [r7]
   1dacc:	cmp	r3, #2
   1dad0:	beq	1db30 <__assert_fail@plt+0xb330>
   1dad4:	mov	r4, r7
   1dad8:	add	r6, sp, #8
   1dadc:	ldr	r5, [r4, #60]	; 0x3c
   1dae0:	ldr	r2, [r4, #76]	; 0x4c
   1dae4:	cmp	r5, #0
   1dae8:	moveq	r4, r2
   1daec:	beq	1db08 <__assert_fail@plt+0xb308>
   1daf0:	ldr	r0, [r4, #64]	; 0x40
   1daf4:	mov	r3, #0
   1daf8:	str	r6, [sp]
   1dafc:	mov	r1, #6
   1db00:	blx	r5
   1db04:	ldr	r4, [r4, #76]	; 0x4c
   1db08:	cmp	r4, #0
   1db0c:	bne	1dadc <__assert_fail@plt+0xb2dc>
   1db10:	mov	r0, r7
   1db14:	bl	1d94c <__assert_fail@plt+0xb14c>
   1db18:	ldr	r2, [sp, #12]
   1db1c:	ldr	r3, [r8]
   1db20:	cmp	r2, r3
   1db24:	bne	1db64 <__assert_fail@plt+0xb364>
   1db28:	add	sp, sp, #16
   1db2c:	pop	{r4, r5, r6, r7, r8, pc}
   1db30:	ldr	r3, [r7, #72]	; 0x48
   1db34:	cmp	r3, #0
   1db38:	beq	1db54 <__assert_fail@plt+0xb354>
   1db3c:	ldrb	r2, [r3]
   1db40:	cmp	r2, #0
   1db44:	beq	1dad4 <__assert_fail@plt+0xb2d4>
   1db48:	mov	r0, r3
   1db4c:	bl	126d4 <remove@plt>
   1db50:	b	1dad4 <__assert_fail@plt+0xb2d4>
   1db54:	bl	1d448 <__assert_fail@plt+0xac48>
   1db58:	subs	r3, r0, #0
   1db5c:	beq	1dad4 <__assert_fail@plt+0xb2d4>
   1db60:	b	1db3c <__assert_fail@plt+0xb33c>
   1db64:	bl	12260 <__stack_chk_fail@plt>
   1db68:	andeq	r5, r3, r8, asr #22
   1db6c:	mov	r1, #8192	; 0x2000
   1db70:	mov	r0, #3
   1db74:	b	1d4d8 <__assert_fail@plt+0xacd8>
   1db78:	push	{r4, r5, r6, lr}
   1db7c:	mov	r4, r0
   1db80:	mov	r0, #1
   1db84:	mov	r6, r1
   1db88:	bl	1d4d8 <__assert_fail@plt+0xacd8>
   1db8c:	ldr	r3, [r0, #36]	; 0x24
   1db90:	cmp	r3, r6
   1db94:	bne	1dbd0 <__assert_fail@plt+0xb3d0>
   1db98:	cmp	r6, #0
   1db9c:	addne	r5, r4, r6
   1dba0:	subne	r5, r5, #1
   1dba4:	subne	r3, r4, #1
   1dba8:	rsbne	lr, r4, #1
   1dbac:	beq	1dbc8 <__assert_fail@plt+0xb3c8>
   1dbb0:	add	r2, lr, r3
   1dbb4:	ldrb	ip, [r3, #1]!
   1dbb8:	ldr	r1, [r0, #48]	; 0x30
   1dbbc:	cmp	r3, r5
   1dbc0:	strb	ip, [r1, r2]
   1dbc4:	bne	1dbb0 <__assert_fail@plt+0xb3b0>
   1dbc8:	str	r6, [r0, #44]	; 0x2c
   1dbcc:	pop	{r4, r5, r6, pc}
   1dbd0:	ldr	r3, [pc, #12]	; 1dbe4 <__assert_fail@plt+0xb3e4>
   1dbd4:	ldr	r2, [pc, #12]	; 1dbe8 <__assert_fail@plt+0xb3e8>
   1dbd8:	ldr	r1, [pc, #12]	; 1dbec <__assert_fail@plt+0xb3ec>
   1dbdc:	ldr	r0, [pc, #12]	; 1dbf0 <__assert_fail@plt+0xb3f0>
   1dbe0:	bl	12800 <__assert_fail@plt>
   1dbe4:	andeq	r3, r2, r0, asr #18
   1dbe8:	andeq	r0, r0, sl, asr #9
   1dbec:	muleq	r2, r0, sl
   1dbf0:	andeq	r4, r2, ip, lsr #32
   1dbf4:	cmp	r0, #0
   1dbf8:	beq	1dc30 <__assert_fail@plt+0xb430>
   1dbfc:	ldrb	r3, [r0]
   1dc00:	cmp	r3, #45	; 0x2d
   1dc04:	bne	1dc14 <__assert_fail@plt+0xb414>
   1dc08:	ldrb	r3, [r0, #1]
   1dc0c:	cmp	r3, #0
   1dc10:	beq	1dc30 <__assert_fail@plt+0xb430>
   1dc14:	push	{r4, lr}
   1dc18:	mov	r2, #1
   1dc1c:	mov	r1, #0
   1dc20:	bl	19e50 <__assert_fail@plt+0x7650>
   1dc24:	adds	r0, r0, #1
   1dc28:	movne	r0, #1
   1dc2c:	pop	{r4, pc}
   1dc30:	mov	r0, #1
   1dc34:	bx	lr
   1dc38:	push	{lr}		; (str lr, [sp, #-4]!)
   1dc3c:	sub	sp, sp, #12
   1dc40:	mov	r2, #0
   1dc44:	str	r2, [sp]
   1dc48:	ldr	r3, [pc, #12]	; 1dc5c <__assert_fail@plt+0xb45c>
   1dc4c:	mov	r1, #1
   1dc50:	bl	1d668 <__assert_fail@plt+0xae68>
   1dc54:	add	sp, sp, #12
   1dc58:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc5c:	andeq	r2, r2, ip, lsl #6
   1dc60:	push	{lr}		; (str lr, [sp, #-4]!)
   1dc64:	sub	sp, sp, #12
   1dc68:	ldr	r3, [pc, #20]	; 1dc84 <__assert_fail@plt+0xb484>
   1dc6c:	str	r1, [sp]
   1dc70:	mov	r2, #2
   1dc74:	mov	r1, #1
   1dc78:	bl	1d668 <__assert_fail@plt+0xae68>
   1dc7c:	add	sp, sp, #12
   1dc80:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc84:	andeq	r2, r2, r4, lsr r3
   1dc88:	push	{lr}		; (str lr, [sp, #-4]!)
   1dc8c:	sub	sp, sp, #12
   1dc90:	mov	r1, #0
   1dc94:	str	r1, [sp]
   1dc98:	ldr	r3, [pc, #12]	; 1dcac <__assert_fail@plt+0xb4ac>
   1dc9c:	mov	r2, #2
   1dca0:	bl	1d668 <__assert_fail@plt+0xae68>
   1dca4:	add	sp, sp, #12
   1dca8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dcac:	andeq	r4, r2, r0, asr #32
   1dcb0:	mov	r2, #0
   1dcb4:	b	1d570 <__assert_fail@plt+0xad70>
   1dcb8:	mov	r2, #1
   1dcbc:	b	1d570 <__assert_fail@plt+0xad70>
   1dcc0:	mov	r3, r1
   1dcc4:	push	{r4, r5, r6, r7, r8, lr}
   1dcc8:	mov	r1, #119	; 0x77
   1dccc:	sub	sp, sp, #8
   1dcd0:	mov	r6, r0
   1dcd4:	mov	r0, r3
   1dcd8:	mov	r7, r2
   1dcdc:	bl	124d0 <strchr@plt>
   1dce0:	mov	r1, #8192	; 0x2000
   1dce4:	cmp	r0, #0
   1dce8:	movne	r0, #2
   1dcec:	moveq	r0, #0
   1dcf0:	bl	1d4d8 <__assert_fail@plt+0xacd8>
   1dcf4:	mov	r5, r0
   1dcf8:	mov	r0, #54	; 0x36
   1dcfc:	bl	120bc <gcry_malloc@plt>
   1dd00:	mov	ip, #1
   1dd04:	mov	r1, ip
   1dd08:	ldr	r3, [pc, #120]	; 1dd88 <__assert_fail@plt+0xb588>
   1dd0c:	mvn	r2, #0
   1dd10:	str	r6, [sp]
   1dd14:	mov	r4, r0
   1dd18:	add	r8, r0, #20
   1dd1c:	mov	r0, r8
   1dd20:	str	r6, [r4]
   1dd24:	str	r7, [r4, #4]
   1dd28:	str	ip, [r4, #16]
   1dd2c:	bl	1253c <__sprintf_chk@plt>
   1dd30:	ldr	r1, [pc, #84]	; 1dd8c <__assert_fail@plt+0xb58c>
   1dd34:	mov	r3, #0
   1dd38:	ldr	r2, [pc, #80]	; 1dd90 <__assert_fail@plt+0xb590>
   1dd3c:	ldr	r1, [r1]
   1dd40:	str	r4, [r5, #64]	; 0x40
   1dd44:	cmp	r1, r3
   1dd48:	str	r2, [r5, #60]	; 0x3c
   1dd4c:	str	r3, [r4, #12]
   1dd50:	str	r3, [r4, #8]
   1dd54:	beq	1dd7c <__assert_fail@plt+0xb57c>
   1dd58:	ldr	r0, [pc, #52]	; 1dd94 <__assert_fail@plt+0xb594>
   1dd5c:	cmp	r7, #0
   1dd60:	ldr	r1, [r5, #80]	; 0x50
   1dd64:	ldr	r2, [r5, #84]	; 0x54
   1dd68:	ldr	r3, [pc, #40]	; 1dd98 <__assert_fail@plt+0xb598>
   1dd6c:	str	r8, [sp]
   1dd70:	movne	r3, r0
   1dd74:	ldr	r0, [pc, #32]	; 1dd9c <__assert_fail@plt+0xb59c>
   1dd78:	bl	19718 <__assert_fail@plt+0x6f18>
   1dd7c:	mov	r0, r5
   1dd80:	add	sp, sp, #8
   1dd84:	pop	{r4, r5, r6, r7, r8, pc}
   1dd88:	andeq	r4, r2, r4, asr #32
   1dd8c:	andeq	r6, r3, r4, lsr #6
   1dd90:	andeq	ip, r1, ip, ror #15
   1dd94:	andeq	r3, r2, ip, lsl pc
   1dd98:	andeq	r2, r2, ip, lsl #18
   1dd9c:	andeq	r4, r2, ip, asr #32
   1dda0:	b	1dcb0 <__assert_fail@plt+0xb4b0>
   1dda4:	push	{r4, r5, r6, r7, r8, lr}
   1dda8:	sub	sp, sp, #48	; 0x30
   1ddac:	ldr	r4, [pc, #212]	; 1de88 <__assert_fail@plt+0xb688>
   1ddb0:	cmp	r1, #1
   1ddb4:	ldr	ip, [r4]
   1ddb8:	str	ip, [sp, #44]	; 0x2c
   1ddbc:	beq	1dddc <__assert_fail@plt+0xb5dc>
   1ddc0:	bl	1d1d8 <__assert_fail@plt+0xa9d8>
   1ddc4:	ldr	r2, [sp, #44]	; 0x2c
   1ddc8:	ldr	r3, [r4]
   1ddcc:	cmp	r2, r3
   1ddd0:	bne	1de84 <__assert_fail@plt+0xb684>
   1ddd4:	add	sp, sp, #48	; 0x30
   1ddd8:	pop	{r4, r5, r6, r7, r8, pc}
   1dddc:	ldr	r3, [pc, #168]	; 1de8c <__assert_fail@plt+0xb68c>
   1dde0:	mov	r5, r0
   1dde4:	mov	r6, r2
   1dde8:	ldr	r3, [r3]
   1ddec:	cmp	r3, #0
   1ddf0:	bne	1de34 <__assert_fail@plt+0xb634>
   1ddf4:	cmp	r5, #0
   1ddf8:	beq	1de2c <__assert_fail@plt+0xb62c>
   1ddfc:	ldr	r2, [r5, #76]	; 0x4c
   1de00:	cmp	r2, #0
   1de04:	bne	1de10 <__assert_fail@plt+0xb610>
   1de08:	b	1de6c <__assert_fail@plt+0xb66c>
   1de0c:	mov	r2, r3
   1de10:	ldr	r3, [r2, #76]	; 0x4c
   1de14:	cmp	r3, #0
   1de18:	bne	1de0c <__assert_fail@plt+0xb60c>
   1de1c:	ldr	r3, [pc, #108]	; 1de90 <__assert_fail@plt+0xb690>
   1de20:	ldr	r1, [r2, #60]	; 0x3c
   1de24:	cmp	r1, r3
   1de28:	beq	1de74 <__assert_fail@plt+0xb674>
   1de2c:	mvn	r0, #0
   1de30:	b	1ddc4 <__assert_fail@plt+0xb5c4>
   1de34:	cmp	r0, #0
   1de38:	mvneq	r7, #0
   1de3c:	add	r1, sp, #12
   1de40:	ldrne	r7, [r0, #80]	; 0x50
   1de44:	ldrne	r8, [r0, #84]	; 0x54
   1de48:	moveq	r8, r7
   1de4c:	bl	1ca24 <__assert_fail@plt+0xa224>
   1de50:	str	r6, [sp]
   1de54:	mov	r2, r8
   1de58:	mov	r1, r7
   1de5c:	mov	r3, r0
   1de60:	ldr	r0, [pc, #44]	; 1de94 <__assert_fail@plt+0xb694>
   1de64:	bl	19718 <__assert_fail@plt+0x6f18>
   1de68:	b	1ddf4 <__assert_fail@plt+0xb5f4>
   1de6c:	mov	r2, r5
   1de70:	b	1de1c <__assert_fail@plt+0xb61c>
   1de74:	ldr	r3, [r2, #64]	; 0x40
   1de78:	mov	r0, #0
   1de7c:	str	r6, [r3, #4]
   1de80:	b	1ddc4 <__assert_fail@plt+0xb5c4>
   1de84:	bl	12260 <__stack_chk_fail@plt>
   1de88:	andeq	r5, r3, r8, asr #22
   1de8c:	andeq	r6, r3, r4, lsr #6
   1de90:	andeq	ip, r1, ip, asr #9
   1de94:	andeq	r4, r2, r8, rrx
   1de98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1de9c:	sub	sp, sp, #48	; 0x30
   1dea0:	ldr	r7, [pc, #492]	; 1e094 <__assert_fail@plt+0xb894>
   1dea4:	ldr	lr, [r0]
   1dea8:	mov	ip, #0
   1deac:	cmp	lr, #2
   1deb0:	ldr	lr, [r7]
   1deb4:	mov	r4, r0
   1deb8:	mov	r6, r1
   1debc:	mov	r9, r2
   1dec0:	mov	r8, r3
   1dec4:	str	lr, [sp, #44]	; 0x2c
   1dec8:	str	ip, [sp, #8]
   1decc:	beq	1e054 <__assert_fail@plt+0xb854>
   1ded0:	ldr	r3, [r4, #84]	; 0x54
   1ded4:	cmp	r3, #63	; 0x3f
   1ded8:	bgt	1e06c <__assert_fail@plt+0xb86c>
   1dedc:	mov	r0, #88	; 0x58
   1dee0:	bl	12098 <gcry_xmalloc@plt>
   1dee4:	mov	r2, #88	; 0x58
   1dee8:	mov	r1, r4
   1deec:	mov	r5, r0
   1def0:	bl	121dc <memcpy@plt>
   1def4:	ldr	r0, [r4, #72]	; 0x48
   1def8:	cmp	r0, #0
   1defc:	beq	1df04 <__assert_fail@plt+0xb704>
   1df00:	bl	125c0 <gcry_xstrdup@plt>
   1df04:	ldr	r2, [r4]
   1df08:	mov	r3, #0
   1df0c:	cmp	r2, #3
   1df10:	str	r0, [r5, #72]	; 0x48
   1df14:	str	r3, [r4, #60]	; 0x3c
   1df18:	str	r3, [r4, #64]	; 0x40
   1df1c:	str	r3, [r4, #68]	; 0x44
   1df20:	str	r3, [r4, #52]	; 0x34
   1df24:	beq	1e000 <__assert_fail@plt+0xb800>
   1df28:	cmp	r2, #1
   1df2c:	moveq	r2, #8192	; 0x2000
   1df30:	ldrne	r0, [r4, #36]	; 0x24
   1df34:	moveq	r0, r2
   1df38:	streq	r3, [r4]
   1df3c:	streq	r2, [r4, #36]	; 0x24
   1df40:	bl	12098 <gcry_xmalloc@plt>
   1df44:	ldr	sl, [pc, #332]	; 1e098 <__assert_fail@plt+0xb898>
   1df48:	ldr	r3, [r5, #24]
   1df4c:	ldr	r1, [r5, #16]
   1df50:	ldr	r2, [r5, #20]
   1df54:	adds	r1, r3, r1
   1df58:	ldr	r3, [r5, #28]
   1df5c:	str	r5, [r4, #76]	; 0x4c
   1df60:	ldr	ip, [sl]
   1df64:	ldr	r5, [r5, #84]	; 0x54
   1df68:	adc	r3, r3, r2
   1df6c:	str	r9, [r4, #64]	; 0x40
   1df70:	str	r8, [r4, #68]	; 0x44
   1df74:	mov	r9, #0
   1df78:	mov	r8, #0
   1df7c:	add	r5, r5, #1
   1df80:	str	r3, [r4, #28]
   1df84:	cmp	ip, #0
   1df88:	mov	r3, #0
   1df8c:	str	r6, [r4, #60]	; 0x3c
   1df90:	str	r1, [r4, #24]
   1df94:	str	r5, [r4, #84]	; 0x54
   1df98:	strd	r8, [r4, #16]
   1df9c:	strd	r8, [r4, #8]
   1dfa0:	str	r3, [r4, #44]	; 0x2c
   1dfa4:	str	r3, [r4, #40]	; 0x28
   1dfa8:	str	r3, [r4, #32]
   1dfac:	str	r0, [r4, #48]	; 0x30
   1dfb0:	bne	1e014 <__assert_fail@plt+0xb814>
   1dfb4:	cmp	r6, #0
   1dfb8:	moveq	r5, r6
   1dfbc:	beq	1dfe4 <__assert_fail@plt+0xb7e4>
   1dfc0:	add	r3, sp, #8
   1dfc4:	str	r3, [sp]
   1dfc8:	mov	r1, #1
   1dfcc:	mov	r3, #0
   1dfd0:	ldr	r2, [r4, #76]	; 0x4c
   1dfd4:	ldr	r0, [r4, #64]	; 0x40
   1dfd8:	blx	r6
   1dfdc:	subs	r5, r0, #0
   1dfe0:	bne	1e07c <__assert_fail@plt+0xb87c>
   1dfe4:	ldr	r2, [sp, #44]	; 0x2c
   1dfe8:	ldr	r3, [r7]
   1dfec:	mov	r0, r5
   1dff0:	cmp	r2, r3
   1dff4:	bne	1e090 <__assert_fail@plt+0xb890>
   1dff8:	add	sp, sp, #48	; 0x30
   1dffc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e000:	mov	r3, #2
   1e004:	mov	r0, #8192	; 0x2000
   1e008:	str	r3, [r4]
   1e00c:	str	r0, [r4, #36]	; 0x24
   1e010:	b	1df40 <__assert_fail@plt+0xb740>
   1e014:	add	r1, sp, #12
   1e018:	mov	r0, r4
   1e01c:	ldr	r6, [r4, #80]	; 0x50
   1e020:	bl	1ca24 <__assert_fail@plt+0xa224>
   1e024:	mov	r2, r5
   1e028:	mov	r1, r6
   1e02c:	mov	r3, r0
   1e030:	ldr	r0, [pc, #100]	; 1e09c <__assert_fail@plt+0xb89c>
   1e034:	bl	19718 <__assert_fail@plt+0x6f18>
   1e038:	ldr	r3, [sl]
   1e03c:	cmp	r3, #0
   1e040:	beq	1e04c <__assert_fail@plt+0xb84c>
   1e044:	mov	r0, r4
   1e048:	bl	1caa4 <__assert_fail@plt+0xa2a4>
   1e04c:	ldr	r6, [r4, #60]	; 0x3c
   1e050:	b	1dfb4 <__assert_fail@plt+0xb7b4>
   1e054:	bl	1c3b0 <__assert_fail@plt+0x9bb0>
   1e058:	subs	r5, r0, #0
   1e05c:	bne	1dfe4 <__assert_fail@plt+0xb7e4>
   1e060:	ldr	r3, [r4, #84]	; 0x54
   1e064:	cmp	r3, #63	; 0x3f
   1e068:	ble	1dedc <__assert_fail@plt+0xb6dc>
   1e06c:	ldr	r0, [pc, #44]	; 1e0a0 <__assert_fail@plt+0xb8a0>
   1e070:	bl	195cc <__assert_fail@plt+0x6dcc>
   1e074:	mov	r5, #89	; 0x59
   1e078:	b	1dfe4 <__assert_fail@plt+0xb7e4>
   1e07c:	bl	12698 <gpg_strerror@plt>
   1e080:	mov	r1, r0
   1e084:	ldr	r0, [pc, #24]	; 1e0a4 <__assert_fail@plt+0xb8a4>
   1e088:	bl	195cc <__assert_fail@plt+0x6dcc>
   1e08c:	b	1dfe4 <__assert_fail@plt+0xb7e4>
   1e090:	bl	12260 <__stack_chk_fail@plt>
   1e094:	andeq	r5, r3, r8, asr #22
   1e098:	andeq	r6, r3, r4, lsr #6
   1e09c:	andeq	r4, r2, r0, asr #1
   1e0a0:	muleq	r2, r0, r0
   1e0a4:	ldrdeq	r4, [r2], -r8
   1e0a8:	mov	r3, #0
   1e0ac:	b	1de98 <__assert_fail@plt+0xb698>
   1e0b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e0b4:	mov	r6, r1
   1e0b8:	ldr	sl, [pc, #596]	; 1e314 <__assert_fail@plt+0xbb14>
   1e0bc:	ldr	r9, [pc, #596]	; 1e318 <__assert_fail@plt+0xbb18>
   1e0c0:	sub	sp, sp, #48	; 0x30
   1e0c4:	ldr	r3, [sl]
   1e0c8:	ldr	r1, [r9]
   1e0cc:	cmp	r3, #0
   1e0d0:	mov	r3, #0
   1e0d4:	mov	r8, r2
   1e0d8:	str	r1, [sp, #44]	; 0x2c
   1e0dc:	str	r3, [sp, #8]
   1e0e0:	mov	r7, r0
   1e0e4:	bne	1e214 <__assert_fail@plt+0xba14>
   1e0e8:	ldr	r2, [r7]
   1e0ec:	bic	r3, r2, #2
   1e0f0:	cmp	r3, #1
   1e0f4:	bne	1e124 <__assert_fail@plt+0xb924>
   1e0f8:	ldr	r3, [r7, #76]	; 0x4c
   1e0fc:	cmp	r3, #0
   1e100:	bne	1e2e0 <__assert_fail@plt+0xbae0>
   1e104:	mov	r5, #0
   1e108:	ldr	r2, [sp, #44]	; 0x2c
   1e10c:	ldr	r3, [r9]
   1e110:	mov	r0, r5
   1e114:	cmp	r2, r3
   1e118:	bne	1e2f4 <__assert_fail@plt+0xbaf4>
   1e11c:	add	sp, sp, #48	; 0x30
   1e120:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e124:	ldr	r5, [r7, #60]	; 0x3c
   1e128:	cmp	r5, #0
   1e12c:	movne	r4, r7
   1e130:	bne	1e190 <__assert_fail@plt+0xb990>
   1e134:	ldr	r4, [r7, #76]	; 0x4c
   1e138:	cmp	r4, #0
   1e13c:	beq	1e2f8 <__assert_fail@plt+0xbaf8>
   1e140:	ldr	r0, [r7, #48]	; 0x30
   1e144:	bl	12218 <gcry_free@plt>
   1e148:	ldr	r0, [r7, #72]	; 0x48
   1e14c:	bl	12218 <gcry_free@plt>
   1e150:	mov	r0, r7
   1e154:	mov	r2, #88	; 0x58
   1e158:	mov	r1, r4
   1e15c:	bl	121dc <memcpy@plt>
   1e160:	mov	r0, r4
   1e164:	bl	12218 <gcry_free@plt>
   1e168:	b	1e108 <__assert_fail@plt+0xb908>
   1e16c:	cmp	r8, #0
   1e170:	beq	1e1ac <__assert_fail@plt+0xb9ac>
   1e174:	ldr	r3, [r4, #64]	; 0x40
   1e178:	cmp	r3, r8
   1e17c:	beq	1e1ac <__assert_fail@plt+0xb9ac>
   1e180:	ldr	r4, [r4, #76]	; 0x4c
   1e184:	cmp	r4, #0
   1e188:	beq	1e1a4 <__assert_fail@plt+0xb9a4>
   1e18c:	ldr	r5, [r4, #60]	; 0x3c
   1e190:	cmp	r6, r5
   1e194:	beq	1e16c <__assert_fail@plt+0xb96c>
   1e198:	ldr	r4, [r4, #76]	; 0x4c
   1e19c:	cmp	r4, #0
   1e1a0:	bne	1e18c <__assert_fail@plt+0xb98c>
   1e1a4:	ldr	r0, [pc, #368]	; 1e31c <__assert_fail@plt+0xbb1c>
   1e1a8:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1e1ac:	cmp	r2, #2
   1e1b0:	beq	1e2a4 <__assert_fail@plt+0xbaa4>
   1e1b4:	cmp	r5, #0
   1e1b8:	ldr	r0, [r4, #64]	; 0x40
   1e1bc:	beq	1e1e4 <__assert_fail@plt+0xb9e4>
   1e1c0:	add	r3, sp, #8
   1e1c4:	ldr	r2, [r4, #76]	; 0x4c
   1e1c8:	mov	r1, #2
   1e1cc:	str	r3, [sp]
   1e1d0:	mov	r3, #0
   1e1d4:	blx	r5
   1e1d8:	subs	r5, r0, #0
   1e1dc:	bne	1e2cc <__assert_fail@plt+0xbacc>
   1e1e0:	ldr	r0, [r4, #64]	; 0x40
   1e1e4:	cmp	r0, #0
   1e1e8:	beq	1e1f8 <__assert_fail@plt+0xb9f8>
   1e1ec:	ldr	r3, [r4, #68]	; 0x44
   1e1f0:	cmp	r3, #0
   1e1f4:	bne	1e240 <__assert_fail@plt+0xba40>
   1e1f8:	cmp	r7, r4
   1e1fc:	ldr	r4, [r4, #76]	; 0x4c
   1e200:	beq	1e250 <__assert_fail@plt+0xba50>
   1e204:	cmp	r4, #0
   1e208:	beq	1e238 <__assert_fail@plt+0xba38>
   1e20c:	ldr	r0, [pc, #268]	; 1e320 <__assert_fail@plt+0xbb20>
   1e210:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1e214:	add	r1, sp, #12
   1e218:	ldrd	r4, [r0, #80]	; 0x50
   1e21c:	bl	1ca24 <__assert_fail@plt+0xa224>
   1e220:	mov	r2, r5
   1e224:	mov	r1, r4
   1e228:	mov	r3, r0
   1e22c:	ldr	r0, [pc, #240]	; 1e324 <__assert_fail@plt+0xbb24>
   1e230:	bl	19718 <__assert_fail@plt+0x6f18>
   1e234:	b	1e0e8 <__assert_fail@plt+0xb8e8>
   1e238:	ldr	r0, [pc, #232]	; 1e328 <__assert_fail@plt+0xbb28>
   1e23c:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1e240:	bl	12218 <gcry_free@plt>
   1e244:	mov	r3, #0
   1e248:	str	r3, [r4, #64]	; 0x40
   1e24c:	b	1e1f8 <__assert_fail@plt+0xb9f8>
   1e250:	cmp	r4, #0
   1e254:	beq	1e30c <__assert_fail@plt+0xbb0c>
   1e258:	ldr	r0, [r7, #48]	; 0x30
   1e25c:	bl	12218 <gcry_free@plt>
   1e260:	ldr	r0, [r7, #72]	; 0x48
   1e264:	bl	12218 <gcry_free@plt>
   1e268:	mov	r2, #88	; 0x58
   1e26c:	mov	r1, r4
   1e270:	mov	r0, r7
   1e274:	bl	121dc <memcpy@plt>
   1e278:	mov	r0, r4
   1e27c:	bl	12218 <gcry_free@plt>
   1e280:	ldr	r3, [sl]
   1e284:	cmp	r3, #0
   1e288:	beq	1e104 <__assert_fail@plt+0xb904>
   1e28c:	ldr	r2, [r7, #84]	; 0x54
   1e290:	ldr	r1, [r7, #80]	; 0x50
   1e294:	ldr	r0, [pc, #144]	; 1e32c <__assert_fail@plt+0xbb2c>
   1e298:	bl	19718 <__assert_fail@plt+0x6f18>
   1e29c:	mov	r5, #0
   1e2a0:	b	1e108 <__assert_fail@plt+0xb908>
   1e2a4:	mov	r0, r4
   1e2a8:	bl	1c3b0 <__assert_fail@plt+0x9bb0>
   1e2ac:	subs	r5, r0, #0
   1e2b0:	ldreq	r5, [r4, #60]	; 0x3c
   1e2b4:	beq	1e1b4 <__assert_fail@plt+0xb9b4>
   1e2b8:	bl	12698 <gpg_strerror@plt>
   1e2bc:	mov	r1, r0
   1e2c0:	ldr	r0, [pc, #104]	; 1e330 <__assert_fail@plt+0xbb30>
   1e2c4:	bl	195cc <__assert_fail@plt+0x6dcc>
   1e2c8:	b	1e108 <__assert_fail@plt+0xb908>
   1e2cc:	bl	12698 <gpg_strerror@plt>
   1e2d0:	mov	r1, r0
   1e2d4:	ldr	r0, [pc, #88]	; 1e334 <__assert_fail@plt+0xbb34>
   1e2d8:	bl	195cc <__assert_fail@plt+0x6dcc>
   1e2dc:	b	1e108 <__assert_fail@plt+0xb908>
   1e2e0:	ldr	r3, [pc, #80]	; 1e338 <__assert_fail@plt+0xbb38>
   1e2e4:	ldr	r2, [pc, #80]	; 1e33c <__assert_fail@plt+0xbb3c>
   1e2e8:	ldr	r1, [pc, #80]	; 1e340 <__assert_fail@plt+0xbb40>
   1e2ec:	ldr	r0, [pc, #80]	; 1e344 <__assert_fail@plt+0xbb44>
   1e2f0:	bl	12800 <__assert_fail@plt>
   1e2f4:	bl	12260 <__stack_chk_fail@plt>
   1e2f8:	ldr	r3, [pc, #56]	; 1e338 <__assert_fail@plt+0xbb38>
   1e2fc:	mov	r2, #1680	; 0x690
   1e300:	ldr	r1, [pc, #56]	; 1e340 <__assert_fail@plt+0xbb40>
   1e304:	ldr	r0, [pc, #60]	; 1e348 <__assert_fail@plt+0xbb48>
   1e308:	bl	12800 <__assert_fail@plt>
   1e30c:	ldr	r0, [pc, #56]	; 1e34c <__assert_fail@plt+0xbb4c>
   1e310:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1e314:	andeq	r6, r3, r4, lsr #6
   1e318:	andeq	r5, r3, r8, asr #22
   1e31c:	strdeq	r4, [r2], -r8
   1e320:	andeq	r4, r2, r4, asr #3
   1e324:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1e328:	muleq	r2, r8, r1
   1e32c:	andeq	r4, r2, ip, ror r1
   1e330:	andeq	r4, r2, ip, lsl r1
   1e334:	andeq	r3, r2, r8, asr #26
   1e338:	andeq	r3, r2, r8, asr r9
   1e33c:	andeq	r0, r0, sl, lsl #13
   1e340:	muleq	r2, r0, sl
   1e344:	andeq	r4, r2, ip, lsl #2
   1e348:	andeq	r4, r2, r8, lsl r1
   1e34c:	andeq	r4, r2, ip, asr #2
   1e350:	ldr	r3, [r0]
   1e354:	push	{r4, r6, r7, lr}
   1e358:	sub	r3, r3, #2
   1e35c:	cmp	r3, #1
   1e360:	bls	1e424 <__assert_fail@plt+0xbc24>
   1e364:	ldr	r3, [r0, #40]	; 0x28
   1e368:	ldr	r2, [r0, #44]	; 0x2c
   1e36c:	mov	r4, r0
   1e370:	cmp	r3, r2
   1e374:	bhi	1e410 <__assert_fail@plt+0xbc10>
   1e378:	ldrd	r6, [r0, #8]
   1e37c:	orrs	r1, r6, r7
   1e380:	bne	1e3c0 <__assert_fail@plt+0xbbc0>
   1e384:	cmp	r3, r2
   1e388:	bcs	1e3d8 <__assert_fail@plt+0xbbd8>
   1e38c:	ldr	r0, [r4, #48]	; 0x30
   1e390:	add	r1, r3, #1
   1e394:	str	r1, [r4, #40]	; 0x28
   1e398:	ldrb	r0, [r0, r3]
   1e39c:	cmp	r2, r1
   1e3a0:	bcc	1e3fc <__assert_fail@plt+0xbbfc>
   1e3a4:	ldr	r3, [r4, #16]
   1e3a8:	ldr	r2, [r4, #20]
   1e3ac:	adds	r3, r3, #1
   1e3b0:	adc	r2, r2, #0
   1e3b4:	str	r3, [r4, #16]
   1e3b8:	str	r2, [r4, #20]
   1e3bc:	pop	{r4, r6, r7, pc}
   1e3c0:	ldrd	r0, [r0, #16]
   1e3c4:	cmp	r0, r6
   1e3c8:	sbcs	r1, r1, r7
   1e3cc:	blt	1e384 <__assert_fail@plt+0xbb84>
   1e3d0:	mvn	r0, #0
   1e3d4:	pop	{r4, r6, r7, pc}
   1e3d8:	mov	r2, #1
   1e3dc:	mov	r1, r2
   1e3e0:	mov	r0, r4
   1e3e4:	bl	1cb34 <__assert_fail@plt+0xa334>
   1e3e8:	cmn	r0, #1
   1e3ec:	beq	1e3d0 <__assert_fail@plt+0xbbd0>
   1e3f0:	ldr	r1, [r4, #40]	; 0x28
   1e3f4:	ldr	r2, [r4, #44]	; 0x2c
   1e3f8:	b	1e39c <__assert_fail@plt+0xbb9c>
   1e3fc:	ldr	r3, [pc, #40]	; 1e42c <__assert_fail@plt+0xbc2c>
   1e400:	ldr	r2, [pc, #40]	; 1e430 <__assert_fail@plt+0xbc30>
   1e404:	ldr	r1, [pc, #40]	; 1e434 <__assert_fail@plt+0xbc34>
   1e408:	ldr	r0, [pc, #40]	; 1e438 <__assert_fail@plt+0xbc38>
   1e40c:	bl	12800 <__assert_fail@plt>
   1e410:	ldr	r3, [pc, #20]	; 1e42c <__assert_fail@plt+0xbc2c>
   1e414:	ldr	r2, [pc, #32]	; 1e43c <__assert_fail@plt+0xbc3c>
   1e418:	ldr	r1, [pc, #20]	; 1e434 <__assert_fail@plt+0xbc34>
   1e41c:	ldr	r0, [pc, #20]	; 1e438 <__assert_fail@plt+0xbc38>
   1e420:	bl	12800 <__assert_fail@plt>
   1e424:	ldr	r0, [pc, #20]	; 1e440 <__assert_fail@plt+0xbc40>
   1e428:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1e42c:	andeq	r3, r2, ip, ror #18
   1e430:			; <UNDEFINED> instruction: 0x000007b9
   1e434:	muleq	r2, r0, sl
   1e438:	andeq	r3, r2, r0, lsr ip
   1e43c:	andeq	r0, r0, sp, lsr #15
   1e440:	andeq	r4, r2, r8, lsr #4
   1e444:	ldr	r3, [r0]
   1e448:	push	{r4, r5, r6, r7, r8, lr}
   1e44c:	sub	r3, r3, #2
   1e450:	cmp	r3, #1
   1e454:	bls	1e58c <__assert_fail@plt+0xbd8c>
   1e458:	mov	r6, r2
   1e45c:	ldrd	r2, [r0, #8]
   1e460:	mov	r7, r0
   1e464:	mov	r5, r1
   1e468:	orrs	r3, r2, r3
   1e46c:	beq	1e4b4 <__assert_fail@plt+0xbcb4>
   1e470:	cmp	r6, #0
   1e474:	beq	1e584 <__assert_fail@plt+0xbd84>
   1e478:	mov	r4, #0
   1e47c:	b	1e494 <__assert_fail@plt+0xbc94>
   1e480:	cmp	r5, #0
   1e484:	add	r4, r4, #1
   1e488:	strbne	r0, [r5], #1
   1e48c:	cmp	r4, r6
   1e490:	beq	1e4d0 <__assert_fail@plt+0xbcd0>
   1e494:	mov	r0, r7
   1e498:	bl	1e350 <__assert_fail@plt+0xbb50>
   1e49c:	cmn	r0, #1
   1e4a0:	bne	1e480 <__assert_fail@plt+0xbc80>
   1e4a4:	cmp	r4, #0
   1e4a8:	bne	1e4d0 <__assert_fail@plt+0xbcd0>
   1e4ac:	mvn	r4, #0
   1e4b0:	b	1e4d0 <__assert_fail@plt+0xbcd0>
   1e4b4:	mov	r4, #0
   1e4b8:	cmp	r6, r4
   1e4bc:	bhi	1e4d8 <__assert_fail@plt+0xbcd8>
   1e4c0:	ldrd	r2, [r7, #16]
   1e4c4:	adds	r0, r2, r4
   1e4c8:	adc	r1, r3, r4, asr #31
   1e4cc:	strd	r0, [r7, #16]
   1e4d0:	mov	r0, r4
   1e4d4:	pop	{r4, r5, r6, r7, r8, pc}
   1e4d8:	ldr	r1, [r7, #40]	; 0x28
   1e4dc:	ldr	r8, [r7, #44]	; 0x2c
   1e4e0:	cmp	r1, r8
   1e4e4:	bcs	1e538 <__assert_fail@plt+0xbd38>
   1e4e8:	sub	r3, r8, r1
   1e4ec:	sub	r8, r6, r4
   1e4f0:	cmp	r8, r3
   1e4f4:	movcs	r8, r3
   1e4f8:	cmp	r5, #0
   1e4fc:	add	r4, r8, r4
   1e500:	addeq	r8, r8, r1
   1e504:	streq	r8, [r7, #40]	; 0x28
   1e508:	beq	1e530 <__assert_fail@plt+0xbd30>
   1e50c:	ldr	r3, [r7, #48]	; 0x30
   1e510:	mov	r2, r8
   1e514:	add	r1, r3, r1
   1e518:	mov	r0, r5
   1e51c:	bl	121dc <memcpy@plt>
   1e520:	ldr	r3, [r7, #40]	; 0x28
   1e524:	add	r5, r5, r8
   1e528:	add	r8, r3, r8
   1e52c:	str	r8, [r7, #40]	; 0x28
   1e530:	cmp	r4, r6
   1e534:	bcs	1e4c0 <__assert_fail@plt+0xbcc0>
   1e538:	mov	r2, #1
   1e53c:	mov	r1, r2
   1e540:	mov	r0, r7
   1e544:	bl	1cb34 <__assert_fail@plt+0xa334>
   1e548:	cmn	r0, #1
   1e54c:	beq	1e568 <__assert_fail@plt+0xbd68>
   1e550:	cmp	r5, #0
   1e554:	add	r4, r4, #1
   1e558:	strbne	r0, [r5], #1
   1e55c:	cmp	r6, r4
   1e560:	bhi	1e4b8 <__assert_fail@plt+0xbcb8>
   1e564:	b	1e4c0 <__assert_fail@plt+0xbcc0>
   1e568:	ldrd	r2, [r7, #16]
   1e56c:	adds	r0, r2, r4
   1e570:	adc	r1, r3, r4, asr #31
   1e574:	cmp	r4, #0
   1e578:	strd	r0, [r7, #16]
   1e57c:	bne	1e4d0 <__assert_fail@plt+0xbcd0>
   1e580:	b	1e4ac <__assert_fail@plt+0xbcac>
   1e584:	mov	r4, r6
   1e588:	b	1e4d0 <__assert_fail@plt+0xbcd0>
   1e58c:	ldr	r0, [pc]	; 1e594 <__assert_fail@plt+0xbd94>
   1e590:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1e594:	andeq	r4, r2, r8, asr r2
   1e598:	push	{r4, r5, r6, r7, r8, lr}
   1e59c:	subs	r5, r2, #0
   1e5a0:	beq	1e670 <__assert_fail@plt+0xbe70>
   1e5a4:	ldr	r3, [r0]
   1e5a8:	mov	r4, r0
   1e5ac:	cmp	r3, #1
   1e5b0:	bhi	1e684 <__assert_fail@plt+0xbe84>
   1e5b4:	ldr	r2, [r0, #36]	; 0x24
   1e5b8:	mov	r6, r1
   1e5bc:	ldr	r3, [r0, #44]	; 0x2c
   1e5c0:	ldr	r1, [r0, #40]	; 0x28
   1e5c4:	cmp	r5, r2
   1e5c8:	movcs	r5, r2
   1e5cc:	sub	r3, r3, r1
   1e5d0:	cmp	r3, r5
   1e5d4:	bcs	1e620 <__assert_fail@plt+0xbe20>
   1e5d8:	mov	r7, #0
   1e5dc:	b	1e5fc <__assert_fail@plt+0xbdfc>
   1e5e0:	ldr	r3, [r4, #40]	; 0x28
   1e5e4:	cmp	r3, #1
   1e5e8:	bne	1e65c <__assert_fail@plt+0xbe5c>
   1e5ec:	ldr	r3, [r4, #44]	; 0x2c
   1e5f0:	str	r7, [r4, #40]	; 0x28
   1e5f4:	cmp	r3, r5
   1e5f8:	bcs	1e64c <__assert_fail@plt+0xbe4c>
   1e5fc:	mov	r2, r5
   1e600:	mov	r1, #0
   1e604:	mov	r0, r4
   1e608:	bl	1cb34 <__assert_fail@plt+0xa334>
   1e60c:	cmn	r0, #1
   1e610:	bne	1e5e0 <__assert_fail@plt+0xbde0>
   1e614:	ldr	r1, [r4, #40]	; 0x28
   1e618:	ldr	r3, [r4, #44]	; 0x2c
   1e61c:	sub	r3, r3, r1
   1e620:	cmp	r3, r5
   1e624:	movcc	r5, r3
   1e628:	cmp	r5, #0
   1e62c:	beq	1e654 <__assert_fail@plt+0xbe54>
   1e630:	ldr	r3, [r4, #48]	; 0x30
   1e634:	mov	r0, r6
   1e638:	add	r1, r3, r1
   1e63c:	mov	r2, r5
   1e640:	bl	121dc <memcpy@plt>
   1e644:	mov	r0, r5
   1e648:	pop	{r4, r5, r6, r7, r8, pc}
   1e64c:	mov	r1, #0
   1e650:	b	1e620 <__assert_fail@plt+0xbe20>
   1e654:	mvn	r5, #0
   1e658:	b	1e644 <__assert_fail@plt+0xbe44>
   1e65c:	ldr	r3, [pc, #52]	; 1e698 <__assert_fail@plt+0xbe98>
   1e660:	ldr	r2, [pc, #52]	; 1e69c <__assert_fail@plt+0xbe9c>
   1e664:	ldr	r1, [pc, #52]	; 1e6a0 <__assert_fail@plt+0xbea0>
   1e668:	ldr	r0, [pc, #52]	; 1e6a4 <__assert_fail@plt+0xbea4>
   1e66c:	bl	12800 <__assert_fail@plt>
   1e670:	ldr	r3, [pc, #32]	; 1e698 <__assert_fail@plt+0xbe98>
   1e674:	ldr	r2, [pc, #44]	; 1e6a8 <__assert_fail@plt+0xbea8>
   1e678:	ldr	r1, [pc, #32]	; 1e6a0 <__assert_fail@plt+0xbea0>
   1e67c:	ldr	r0, [pc, #40]	; 1e6ac <__assert_fail@plt+0xbeac>
   1e680:	bl	12800 <__assert_fail@plt>
   1e684:	ldr	r3, [pc, #12]	; 1e698 <__assert_fail@plt+0xbe98>
   1e688:	ldr	r2, [pc, #32]	; 1e6b0 <__assert_fail@plt+0xbeb0>
   1e68c:	ldr	r1, [pc, #12]	; 1e6a0 <__assert_fail@plt+0xbea0>
   1e690:	ldr	r0, [pc, #28]	; 1e6b4 <__assert_fail@plt+0xbeb4>
   1e694:	bl	12800 <__assert_fail@plt>
   1e698:	andeq	r3, r2, ip, ror r9
   1e69c:	andeq	r0, r0, r2, lsr #16
   1e6a0:	muleq	r2, r0, sl
   1e6a4:	andeq	r4, r2, r4, asr #5
   1e6a8:	andeq	r0, r0, r1, lsl r8
   1e6ac:	andeq	r4, r2, r4, lsl #5
   1e6b0:	andeq	r0, r0, r2, lsl r8
   1e6b4:	muleq	r2, r0, r2
   1e6b8:	ldr	r3, [r0]
   1e6bc:	push	{r4, r5, r6, lr}
   1e6c0:	cmp	r3, #1
   1e6c4:	bls	1e72c <__assert_fail@plt+0xbf2c>
   1e6c8:	ldr	r3, [r0, #44]	; 0x2c
   1e6cc:	ldr	r2, [r0, #36]	; 0x24
   1e6d0:	mov	r4, r0
   1e6d4:	cmp	r3, r2
   1e6d8:	mov	r5, r1
   1e6dc:	beq	1e700 <__assert_fail@plt+0xbf00>
   1e6e0:	cmp	r2, r3
   1e6e4:	bls	1e718 <__assert_fail@plt+0xbf18>
   1e6e8:	ldr	r2, [r4, #48]	; 0x30
   1e6ec:	add	r1, r3, #1
   1e6f0:	str	r1, [r4, #44]	; 0x2c
   1e6f4:	mov	r0, #0
   1e6f8:	strb	r5, [r2, r3]
   1e6fc:	pop	{r4, r5, r6, pc}
   1e700:	bl	1c3b0 <__assert_fail@plt+0x9bb0>
   1e704:	cmp	r0, #0
   1e708:	popne	{r4, r5, r6, pc}
   1e70c:	ldr	r3, [r4, #44]	; 0x2c
   1e710:	ldr	r2, [r4, #36]	; 0x24
   1e714:	b	1e6e0 <__assert_fail@plt+0xbee0>
   1e718:	ldr	r3, [pc, #20]	; 1e734 <__assert_fail@plt+0xbf34>
   1e71c:	ldr	r2, [pc, #20]	; 1e738 <__assert_fail@plt+0xbf38>
   1e720:	ldr	r1, [pc, #20]	; 1e73c <__assert_fail@plt+0xbf3c>
   1e724:	ldr	r0, [pc, #20]	; 1e740 <__assert_fail@plt+0xbf40>
   1e728:	bl	12800 <__assert_fail@plt>
   1e72c:	ldr	r0, [pc, #16]	; 1e744 <__assert_fail@plt+0xbf44>
   1e730:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1e734:	andeq	r3, r2, r8, lsl #19
   1e738:	andeq	r0, r0, r5, asr #16
   1e73c:	muleq	r2, r0, sl
   1e740:	andeq	r4, r2, r4, lsl #6
   1e744:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1e748:	ldr	r3, [r0]
   1e74c:	push	{r4, r5, r6, r7, r8, lr}
   1e750:	cmp	r3, #1
   1e754:	bls	1e7e4 <__assert_fail@plt+0xbfe4>
   1e758:	cmp	r2, #0
   1e75c:	mov	r5, r0
   1e760:	mov	r7, r1
   1e764:	mov	r6, r2
   1e768:	beq	1e7b0 <__assert_fail@plt+0xbfb0>
   1e76c:	ldr	r3, [r5, #44]	; 0x2c
   1e770:	ldr	r4, [r5, #36]	; 0x24
   1e774:	cmp	r3, r4
   1e778:	bcs	1e7b8 <__assert_fail@plt+0xbfb8>
   1e77c:	sub	r4, r4, r3
   1e780:	cmp	r4, r6
   1e784:	ldr	r0, [r5, #48]	; 0x30
   1e788:	movcs	r4, r6
   1e78c:	add	r0, r0, r3
   1e790:	mov	r2, r4
   1e794:	mov	r1, r7
   1e798:	bl	121dc <memcpy@plt>
   1e79c:	ldr	r3, [r5, #44]	; 0x2c
   1e7a0:	subs	r6, r6, r4
   1e7a4:	add	r3, r3, r4
   1e7a8:	str	r3, [r5, #44]	; 0x2c
   1e7ac:	bne	1e7cc <__assert_fail@plt+0xbfcc>
   1e7b0:	mov	r0, #0
   1e7b4:	pop	{r4, r5, r6, r7, r8, pc}
   1e7b8:	mov	r0, r5
   1e7bc:	bl	1c3b0 <__assert_fail@plt+0x9bb0>
   1e7c0:	cmp	r0, #0
   1e7c4:	beq	1e76c <__assert_fail@plt+0xbf6c>
   1e7c8:	pop	{r4, r5, r6, r7, r8, pc}
   1e7cc:	mov	r0, r5
   1e7d0:	bl	1c3b0 <__assert_fail@plt+0x9bb0>
   1e7d4:	cmp	r0, #0
   1e7d8:	popne	{r4, r5, r6, r7, r8, pc}
   1e7dc:	add	r7, r7, r4
   1e7e0:	b	1e76c <__assert_fail@plt+0xbf6c>
   1e7e4:	ldr	r0, [pc]	; 1e7ec <__assert_fail@plt+0xbfec>
   1e7e8:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1e7ec:	andeq	r4, r2, ip, lsl r3
   1e7f0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7f4:	mov	r6, r3
   1e7f8:	ldr	r3, [sp, #40]	; 0x28
   1e7fc:	cmp	r1, #3
   1e800:	mov	r5, r0
   1e804:	mov	r7, r2
   1e808:	ldr	fp, [r3]
   1e80c:	beq	1e9bc <__assert_fail@plt+0xc1bc>
   1e810:	cmp	r1, #4
   1e814:	beq	1e868 <__assert_fail@plt+0xc068>
   1e818:	cmp	r1, #1
   1e81c:	beq	1ee1c <__assert_fail@plt+0xc61c>
   1e820:	cmp	r1, #5
   1e824:	beq	1ee6c <__assert_fail@plt+0xc66c>
   1e828:	cmp	r1, #2
   1e82c:	movne	r9, #0
   1e830:	bne	1e918 <__assert_fail@plt+0xc118>
   1e834:	ldr	r3, [r0]
   1e838:	cmp	r3, #2
   1e83c:	beq	1eec4 <__assert_fail@plt+0xc6c4>
   1e840:	ldr	r9, [r0, #4]
   1e844:	cmp	r9, #0
   1e848:	bne	1ee84 <__assert_fail@plt+0xc684>
   1e84c:	ldr	r3, [pc, #2184]	; 1f0dc <__assert_fail@plt+0xc8dc>
   1e850:	ldr	r3, [r3]
   1e854:	cmp	r3, #0
   1e858:	bne	1eeb4 <__assert_fail@plt+0xc6b4>
   1e85c:	mov	r0, r5
   1e860:	bl	12218 <gcry_free@plt>
   1e864:	b	1e918 <__assert_fail@plt+0xc118>
   1e868:	ldr	r2, [r0, #12]
   1e86c:	cmp	r2, #0
   1e870:	beq	1f030 <__assert_fail@plt+0xc830>
   1e874:	ldr	r2, [r0, #20]
   1e878:	cmp	r2, #512	; 0x200
   1e87c:	add	r4, r2, fp
   1e880:	bhi	1f040 <__assert_fail@plt+0xc840>
   1e884:	ldr	r8, [pc, #2132]	; 1f0e0 <__assert_fail@plt+0xc8e0>
   1e888:	cmp	r4, r8
   1e88c:	ldrhi	sl, [pc, #2128]	; 1f0e4 <__assert_fail@plt+0xc8e4>
   1e890:	bls	1eb0c <__assert_fail@plt+0xc30c>
   1e894:	cmp	r4, sl
   1e898:	bls	1eacc <__assert_fail@plt+0xc2cc>
   1e89c:	mov	r3, #1024	; 0x400
   1e8a0:	mov	r1, #10
   1e8a4:	b	1e8ac <__assert_fail@plt+0xc0ac>
   1e8a8:	mov	r1, r2
   1e8ac:	lsl	r3, r3, #1
   1e8b0:	cmp	r4, r3
   1e8b4:	add	r2, r1, #1
   1e8b8:	bcs	1e8a8 <__assert_fail@plt+0xc0a8>
   1e8bc:	cmp	r1, #31
   1e8c0:	lsr	fp, r3, #1
   1e8c4:	bgt	1f0a0 <__assert_fail@plt+0xc8a0>
   1e8c8:	orr	r1, r1, #224	; 0xe0
   1e8cc:	mov	r0, r7
   1e8d0:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1e8d4:	ldr	r2, [r5, #20]
   1e8d8:	cmp	r2, #0
   1e8dc:	beq	1e920 <__assert_fail@plt+0xc120>
   1e8e0:	cmp	r2, #512	; 0x200
   1e8e4:	bne	1f0b4 <__assert_fail@plt+0xc8b4>
   1e8e8:	ldr	r1, [r5, #16]
   1e8ec:	mov	r0, r7
   1e8f0:	bl	1e748 <__assert_fail@plt+0xbf48>
   1e8f4:	subs	r9, r0, #0
   1e8f8:	bne	1e9b0 <__assert_fail@plt+0xc1b0>
   1e8fc:	sub	r4, r4, #512	; 0x200
   1e900:	mov	r3, #0
   1e904:	cmp	r4, fp
   1e908:	str	r3, [r5, #20]
   1e90c:	bhi	1e92c <__assert_fail@plt+0xc12c>
   1e910:	cmp	r4, r3
   1e914:	bne	1ead8 <__assert_fail@plt+0xc2d8>
   1e918:	mov	r0, r9
   1e91c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e920:	cmp	r4, fp
   1e924:	mov	r9, r2
   1e928:	bls	1ead8 <__assert_fail@plt+0xc2d8>
   1e92c:	mov	r2, fp
   1e930:	mov	r1, r6
   1e934:	mov	r0, r7
   1e938:	bl	1e748 <__assert_fail@plt+0xbf48>
   1e93c:	cmp	r0, #0
   1e940:	bne	1eaf4 <__assert_fail@plt+0xc2f4>
   1e944:	sub	r4, r4, fp
   1e948:	clz	r3, r9
   1e94c:	lsr	r3, r3, #5
   1e950:	cmp	r4, r8
   1e954:	movls	r2, #0
   1e958:	andhi	r2, r3, #1
   1e95c:	cmp	r2, #0
   1e960:	add	r6, r6, fp
   1e964:	bne	1e894 <__assert_fail@plt+0xc094>
   1e968:	cmp	r4, #0
   1e96c:	moveq	r3, #0
   1e970:	cmp	r3, #0
   1e974:	beq	1e918 <__assert_fail@plt+0xc118>
   1e978:	ldr	r3, [r5, #20]
   1e97c:	cmp	r3, #0
   1e980:	bne	1f08c <__assert_fail@plt+0xc88c>
   1e984:	cmp	r4, r8
   1e988:	bhi	1f078 <__assert_fail@plt+0xc878>
   1e98c:	ldr	r0, [r5, #16]
   1e990:	cmp	r0, #0
   1e994:	beq	1ee94 <__assert_fail@plt+0xc694>
   1e998:	mov	r1, r6
   1e99c:	mov	r2, r4
   1e9a0:	bl	121dc <memcpy@plt>
   1e9a4:	mov	r9, #0
   1e9a8:	str	r4, [r5, #20]
   1e9ac:	b	1e918 <__assert_fail@plt+0xc118>
   1e9b0:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1e9b4:	uxth	r9, r0
   1e9b8:	b	1e8fc <__assert_fail@plt+0xc0fc>
   1e9bc:	cmp	fp, #0
   1e9c0:	beq	1f0c8 <__assert_fail@plt+0xc8c8>
   1e9c4:	ldr	r9, [r0, #28]
   1e9c8:	cmp	r9, #0
   1e9cc:	bne	1eb00 <__assert_fail@plt+0xc300>
   1e9d0:	mov	r8, r9
   1e9d4:	mov	sl, #2
   1e9d8:	ldr	r2, [r5, #4]
   1e9dc:	cmp	r2, #0
   1e9e0:	bne	1ea68 <__assert_fail@plt+0xc268>
   1e9e4:	ldr	r3, [r5, #12]
   1e9e8:	cmp	r3, #2
   1e9ec:	beq	1ec44 <__assert_fail@plt+0xc444>
   1e9f0:	cmp	r3, #0
   1e9f4:	beq	1f020 <__assert_fail@plt+0xc820>
   1e9f8:	ldr	r0, [r5, #24]
   1e9fc:	cmp	r0, #0
   1ea00:	strne	r2, [r5, #24]
   1ea04:	bne	1ea4c <__assert_fail@plt+0xc24c>
   1ea08:	ldr	r3, [r7, #32]
   1ea0c:	cmp	r3, #0
   1ea10:	bne	1ebdc <__assert_fail@plt+0xc3dc>
   1ea14:	ldr	r1, [r7, #40]	; 0x28
   1ea18:	ldr	r3, [r7, #44]	; 0x2c
   1ea1c:	cmp	r1, r3
   1ea20:	bcs	1ebdc <__assert_fail@plt+0xc3dc>
   1ea24:	ldr	r3, [r7, #16]
   1ea28:	ldr	r2, [r7, #20]
   1ea2c:	ldr	r0, [r7, #48]	; 0x30
   1ea30:	adds	r3, r3, #1
   1ea34:	str	r3, [r7, #16]
   1ea38:	adc	r2, r2, #0
   1ea3c:	add	r3, r1, #1
   1ea40:	str	r2, [r7, #20]
   1ea44:	str	r3, [r7, #40]	; 0x28
   1ea48:	ldrb	r0, [r0, r1]
   1ea4c:	cmp	r0, #191	; 0xbf
   1ea50:	bgt	1eb70 <__assert_fail@plt+0xc370>
   1ea54:	cmp	r0, #0
   1ea58:	str	r0, [r5, #4]
   1ea5c:	mov	r2, r0
   1ea60:	str	sl, [r5, #12]
   1ea64:	beq	1ec44 <__assert_fail@plt+0xc444>
   1ea68:	cmp	r2, #0
   1ea6c:	beq	1eb64 <__assert_fail@plt+0xc364>
   1ea70:	cmp	r2, fp
   1ea74:	movcc	r4, r2
   1ea78:	movcs	r4, fp
   1ea7c:	mov	r2, r4
   1ea80:	mov	r1, r6
   1ea84:	mov	r0, r7
   1ea88:	bl	1e444 <__assert_fail@plt+0xbc44>
   1ea8c:	cmp	r4, r0
   1ea90:	ble	1eb40 <__assert_fail@plt+0xc340>
   1ea94:	cmn	r0, #1
   1ea98:	ldr	r3, [r5, #4]
   1ea9c:	addne	fp, fp, r0
   1eaa0:	moveq	r0, #0
   1eaa4:	add	r3, r0, r3
   1eaa8:	mov	r2, fp
   1eaac:	mov	r1, r5
   1eab0:	ldr	r0, [pc, #1584]	; 1f0e8 <__assert_fail@plt+0xc8e8>
   1eab4:	bl	195cc <__assert_fail@plt+0x6dcc>
   1eab8:	mov	r9, #89	; 0x59
   1eabc:	ldr	r3, [sp, #40]	; 0x28
   1eac0:	mov	r0, r9
   1eac4:	str	r8, [r3]
   1eac8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eacc:	mov	r1, #233	; 0xe9
   1ead0:	mov	fp, #512	; 0x200
   1ead4:	b	1e8cc <__assert_fail@plt+0xc0cc>
   1ead8:	mov	r2, r4
   1eadc:	mov	r1, r6
   1eae0:	mov	r0, r7
   1eae4:	bl	1e748 <__assert_fail@plt+0xbf48>
   1eae8:	mov	fp, r4
   1eaec:	cmp	r0, #0
   1eaf0:	beq	1e918 <__assert_fail@plt+0xc118>
   1eaf4:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1eaf8:	uxth	r9, r0
   1eafc:	b	1e944 <__assert_fail@plt+0xc144>
   1eb00:	mov	r8, #0
   1eb04:	mvn	r9, #0
   1eb08:	b	1eabc <__assert_fail@plt+0xc2bc>
   1eb0c:	ldr	r0, [r0, #16]
   1eb10:	cmp	r0, #0
   1eb14:	beq	1ef48 <__assert_fail@plt+0xc748>
   1eb18:	mov	r1, r6
   1eb1c:	add	r0, r0, r2
   1eb20:	mov	r2, fp
   1eb24:	bl	121dc <memcpy@plt>
   1eb28:	ldr	r2, [r5, #20]
   1eb2c:	mov	r9, #0
   1eb30:	add	r3, r2, fp
   1eb34:	str	r3, [r5, #20]
   1eb38:	mov	r0, r9
   1eb3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb40:	ldr	r2, [r5, #4]
   1eb44:	subs	fp, fp, r0
   1eb48:	sub	r2, r2, r0
   1eb4c:	add	r6, r6, r0
   1eb50:	add	r8, r8, r0
   1eb54:	str	r2, [r5, #4]
   1eb58:	beq	1eabc <__assert_fail@plt+0xc2bc>
   1eb5c:	cmp	r2, #0
   1eb60:	bne	1ea70 <__assert_fail@plt+0xc270>
   1eb64:	cmp	fp, #0
   1eb68:	bne	1e9d8 <__assert_fail@plt+0xc1d8>
   1eb6c:	b	1eabc <__assert_fail@plt+0xc2bc>
   1eb70:	cmp	r0, #223	; 0xdf
   1eb74:	bgt	1ebfc <__assert_fail@plt+0xc3fc>
   1eb78:	ldr	r2, [r7, #32]
   1eb7c:	sub	r3, r0, #192	; 0xc0
   1eb80:	cmp	r2, #0
   1eb84:	lsl	r3, r3, #8
   1eb88:	str	r3, [r5, #4]
   1eb8c:	bne	1ec18 <__assert_fail@plt+0xc418>
   1eb90:	ldr	r0, [r7, #40]	; 0x28
   1eb94:	ldr	r2, [r7, #44]	; 0x2c
   1eb98:	cmp	r0, r2
   1eb9c:	bcs	1ec18 <__assert_fail@plt+0xc418>
   1eba0:	ldr	r2, [r7, #16]
   1eba4:	ldr	r1, [r7, #20]
   1eba8:	ldr	ip, [r7, #48]	; 0x30
   1ebac:	adds	r2, r2, #1
   1ebb0:	str	r2, [r7, #16]
   1ebb4:	adc	r1, r1, #0
   1ebb8:	add	r2, r0, #1
   1ebbc:	str	r1, [r7, #20]
   1ebc0:	str	r2, [r7, #40]	; 0x28
   1ebc4:	ldrb	r2, [ip, r0]
   1ebc8:	add	r3, r3, #192	; 0xc0
   1ebcc:	str	sl, [r5, #12]
   1ebd0:	add	r2, r2, r3
   1ebd4:	str	r2, [r5, #4]
   1ebd8:	b	1ea68 <__assert_fail@plt+0xc268>
   1ebdc:	mov	r0, r7
   1ebe0:	bl	1e350 <__assert_fail@plt+0xbb50>
   1ebe4:	cmn	r0, #1
   1ebe8:	bne	1ea4c <__assert_fail@plt+0xc24c>
   1ebec:	ldr	r0, [pc, #1272]	; 1f0ec <__assert_fail@plt+0xc8ec>
   1ebf0:	bl	195cc <__assert_fail@plt+0x6dcc>
   1ebf4:	mov	r9, #89	; 0x59
   1ebf8:	b	1eabc <__assert_fail@plt+0xc2bc>
   1ebfc:	cmp	r0, #255	; 0xff
   1ec00:	beq	1ec5c <__assert_fail@plt+0xc45c>
   1ec04:	and	r2, r0, #31
   1ec08:	mov	r3, #1
   1ec0c:	lsl	r2, r3, r2
   1ec10:	str	r2, [r5, #4]
   1ec14:	b	1ea68 <__assert_fail@plt+0xc268>
   1ec18:	mov	r0, r7
   1ec1c:	bl	1e350 <__assert_fail@plt+0xbb50>
   1ec20:	cmn	r0, #1
   1ec24:	beq	1ef38 <__assert_fail@plt+0xc738>
   1ec28:	ldr	r2, [r5, #4]
   1ec2c:	str	sl, [r5, #12]
   1ec30:	add	r2, r2, #192	; 0xc0
   1ec34:	add	r2, r2, r0
   1ec38:	cmp	r2, #0
   1ec3c:	str	r2, [r5, #4]
   1ec40:	bne	1ea68 <__assert_fail@plt+0xc268>
   1ec44:	clz	r9, r8
   1ec48:	mov	r3, #1
   1ec4c:	lsr	r9, r9, #5
   1ec50:	rsb	r9, r9, #0
   1ec54:	str	r3, [r5, #28]
   1ec58:	b	1eabc <__assert_fail@plt+0xc2bc>
   1ec5c:	ldr	r3, [r7, #32]
   1ec60:	cmp	r3, #0
   1ec64:	bne	1ed68 <__assert_fail@plt+0xc568>
   1ec68:	ldrd	r2, [r7, #40]	; 0x28
   1ec6c:	cmp	r2, r3
   1ec70:	bcs	1ed68 <__assert_fail@plt+0xc568>
   1ec74:	ldr	r1, [r7, #16]
   1ec78:	ldr	r0, [r7, #20]
   1ec7c:	ldr	ip, [r7, #48]	; 0x30
   1ec80:	adds	r1, r1, #1
   1ec84:	str	r1, [r7, #16]
   1ec88:	adc	r0, r0, #0
   1ec8c:	add	r1, r2, #1
   1ec90:	str	r1, [r7, #40]	; 0x28
   1ec94:	str	r0, [r7, #20]
   1ec98:	ldrb	r2, [ip, r2]
   1ec9c:	ldr	r1, [r7, #40]	; 0x28
   1eca0:	cmp	r1, r3
   1eca4:	lsl	r2, r2, #24
   1eca8:	str	r2, [r5, #4]
   1ecac:	bcs	1ed94 <__assert_fail@plt+0xc594>
   1ecb0:	ldr	r0, [r7, #16]
   1ecb4:	ldr	ip, [r7, #20]
   1ecb8:	ldr	lr, [r7, #48]	; 0x30
   1ecbc:	adds	r0, r0, #1
   1ecc0:	str	r0, [r7, #16]
   1ecc4:	adc	ip, ip, #0
   1ecc8:	add	r0, r1, #1
   1eccc:	str	r0, [r7, #40]	; 0x28
   1ecd0:	str	ip, [r7, #20]
   1ecd4:	ldrb	r1, [lr, r1]
   1ecd8:	orr	r2, r2, r1, lsl #16
   1ecdc:	ldr	r1, [r7, #40]	; 0x28
   1ece0:	str	r2, [r5, #4]
   1ece4:	cmp	r1, r3
   1ece8:	bcs	1edcc <__assert_fail@plt+0xc5cc>
   1ecec:	ldr	r0, [r7, #16]
   1ecf0:	ldr	ip, [r7, #20]
   1ecf4:	ldr	lr, [r7, #48]	; 0x30
   1ecf8:	adds	r0, r0, #1
   1ecfc:	str	r0, [r7, #16]
   1ed00:	adc	ip, ip, #0
   1ed04:	add	r0, r1, #1
   1ed08:	str	r0, [r7, #40]	; 0x28
   1ed0c:	str	ip, [r7, #20]
   1ed10:	ldrb	r1, [lr, r1]
   1ed14:	orr	r2, r2, r1, lsl #8
   1ed18:	ldr	r1, [r7, #40]	; 0x28
   1ed1c:	str	r2, [r5, #4]
   1ed20:	cmp	r1, r3
   1ed24:	bcs	1ee04 <__assert_fail@plt+0xc604>
   1ed28:	ldr	r3, [r7, #16]
   1ed2c:	ldr	r0, [r7, #20]
   1ed30:	ldr	ip, [r7, #48]	; 0x30
   1ed34:	adds	r3, r3, #1
   1ed38:	adc	r0, r0, #0
   1ed3c:	str	r3, [r7, #16]
   1ed40:	add	r3, r1, #1
   1ed44:	str	r0, [r7, #20]
   1ed48:	str	r3, [r7, #40]	; 0x28
   1ed4c:	ldrb	r0, [ip, r1]
   1ed50:	orr	r2, r0, r2
   1ed54:	cmp	r2, #0
   1ed58:	str	r2, [r5, #4]
   1ed5c:	str	sl, [r5, #12]
   1ed60:	bne	1ea68 <__assert_fail@plt+0xc268>
   1ed64:	b	1ec44 <__assert_fail@plt+0xc444>
   1ed68:	mov	r0, r7
   1ed6c:	bl	1e350 <__assert_fail@plt+0xbb50>
   1ed70:	ldr	r3, [r7, #32]
   1ed74:	cmp	r3, #0
   1ed78:	lsl	r2, r0, #24
   1ed7c:	str	r2, [r5, #4]
   1ed80:	bne	1ed94 <__assert_fail@plt+0xc594>
   1ed84:	ldr	r3, [r7, #44]	; 0x2c
   1ed88:	ldr	r1, [r7, #40]	; 0x28
   1ed8c:	cmp	r1, r3
   1ed90:	bcc	1ecb0 <__assert_fail@plt+0xc4b0>
   1ed94:	mov	r0, r7
   1ed98:	bl	1e350 <__assert_fail@plt+0xbb50>
   1ed9c:	ldr	r2, [r7, #32]
   1eda0:	ldr	r3, [r5, #4]
   1eda4:	cmp	r2, #0
   1eda8:	lsl	r2, r0, #16
   1edac:	and	r2, r2, #16711680	; 0xff0000
   1edb0:	orr	r2, r2, r3
   1edb4:	str	r2, [r5, #4]
   1edb8:	bne	1edcc <__assert_fail@plt+0xc5cc>
   1edbc:	ldr	r3, [r7, #44]	; 0x2c
   1edc0:	ldr	r1, [r7, #40]	; 0x28
   1edc4:	cmp	r1, r3
   1edc8:	bcc	1ecec <__assert_fail@plt+0xc4ec>
   1edcc:	mov	r0, r7
   1edd0:	bl	1e350 <__assert_fail@plt+0xbb50>
   1edd4:	ldr	r2, [r7, #32]
   1edd8:	ldr	r3, [r5, #4]
   1eddc:	cmp	r2, #0
   1ede0:	lsl	r2, r0, #8
   1ede4:	uxth	r2, r2
   1ede8:	orr	r2, r2, r3
   1edec:	str	r2, [r5, #4]
   1edf0:	bne	1ee04 <__assert_fail@plt+0xc604>
   1edf4:	ldr	r3, [r7, #44]	; 0x2c
   1edf8:	ldr	r1, [r7, #40]	; 0x28
   1edfc:	cmp	r1, r3
   1ee00:	bcc	1ed28 <__assert_fail@plt+0xc528>
   1ee04:	mov	r0, r7
   1ee08:	bl	1e350 <__assert_fail@plt+0xbb50>
   1ee0c:	cmn	r0, #1
   1ee10:	beq	1f010 <__assert_fail@plt+0xc810>
   1ee14:	ldr	r2, [r5, #4]
   1ee18:	b	1ed50 <__assert_fail@plt+0xc550>
   1ee1c:	ldr	r3, [pc, #696]	; 1f0dc <__assert_fail@plt+0xc8dc>
   1ee20:	ldr	r3, [r3]
   1ee24:	cmp	r3, #0
   1ee28:	bne	1eea4 <__assert_fail@plt+0xc6a4>
   1ee2c:	ldr	r3, [r5, #12]
   1ee30:	cmp	r3, #0
   1ee34:	movne	r3, #0
   1ee38:	strne	r3, [r5, #8]
   1ee3c:	bne	1ee54 <__assert_fail@plt+0xc654>
   1ee40:	ldr	r3, [r5]
   1ee44:	cmp	r3, #0
   1ee48:	streq	r3, [r5, #4]
   1ee4c:	ldrne	r3, [r5, #4]
   1ee50:	str	r3, [r5, #8]
   1ee54:	mov	r9, #0
   1ee58:	str	r9, [r5, #28]
   1ee5c:	str	r9, [r5, #16]
   1ee60:	str	r9, [r5, #20]
   1ee64:	mov	r0, r9
   1ee68:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee6c:	mov	r2, fp
   1ee70:	mov	r0, r6
   1ee74:	ldr	r1, [pc, #628]	; 1f0f0 <__assert_fail@plt+0xc8f0>
   1ee78:	bl	14efc <__assert_fail@plt+0x26fc>
   1ee7c:	mov	r9, #0
   1ee80:	b	1e918 <__assert_fail@plt+0xc118>
   1ee84:	ldr	r0, [pc, #616]	; 1f0f4 <__assert_fail@plt+0xc8f4>
   1ee88:	bl	195cc <__assert_fail@plt+0x6dcc>
   1ee8c:	mov	r9, #0
   1ee90:	b	1e84c <__assert_fail@plt+0xc04c>
   1ee94:	mov	r0, #512	; 0x200
   1ee98:	bl	12098 <gcry_xmalloc@plt>
   1ee9c:	str	r0, [r5, #16]
   1eea0:	b	1e998 <__assert_fail@plt+0xc198>
   1eea4:	mov	r1, r0
   1eea8:	ldr	r0, [pc, #584]	; 1f0f8 <__assert_fail@plt+0xc8f8>
   1eeac:	bl	19718 <__assert_fail@plt+0x6f18>
   1eeb0:	b	1ee2c <__assert_fail@plt+0xc62c>
   1eeb4:	mov	r1, r5
   1eeb8:	ldr	r0, [pc, #572]	; 1f0fc <__assert_fail@plt+0xc8fc>
   1eebc:	bl	19718 <__assert_fail@plt+0x6f18>
   1eec0:	b	1e85c <__assert_fail@plt+0xc05c>
   1eec4:	ldr	r3, [r0, #12]
   1eec8:	cmp	r3, #0
   1eecc:	beq	1f068 <__assert_fail@plt+0xc868>
   1eed0:	ldr	r4, [r0, #20]
   1eed4:	cmp	r4, #191	; 0xbf
   1eed8:	bls	1effc <__assert_fail@plt+0xc7fc>
   1eedc:	cmp	r4, #8384	; 0x20c0
   1eee0:	bcs	1ef5c <__assert_fail@plt+0xc75c>
   1eee4:	sub	r6, r4, #192	; 0xc0
   1eee8:	mov	r0, r2
   1eeec:	lsr	r1, r6, #8
   1eef0:	add	r1, r1, #192	; 0xc0
   1eef4:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1eef8:	cmp	r0, #0
   1eefc:	beq	1f054 <__assert_fail@plt+0xc854>
   1ef00:	bl	12518 <__errno_location@plt>
   1ef04:	ldr	r0, [r0]
   1ef08:	bl	123ec <strerror@plt>
   1ef0c:	mov	r1, r0
   1ef10:	ldr	r0, [pc, #488]	; 1f100 <__assert_fail@plt+0xc900>
   1ef14:	bl	195cc <__assert_fail@plt+0x6dcc>
   1ef18:	bl	124e8 <gpg_err_code_from_syserror@plt>
   1ef1c:	uxth	r9, r0
   1ef20:	ldr	r0, [r5, #16]
   1ef24:	bl	12218 <gcry_free@plt>
   1ef28:	mov	r3, #0
   1ef2c:	str	r3, [r5, #16]
   1ef30:	str	r3, [r5, #20]
   1ef34:	b	1e84c <__assert_fail@plt+0xc04c>
   1ef38:	ldr	r0, [pc, #452]	; 1f104 <__assert_fail@plt+0xc904>
   1ef3c:	bl	195cc <__assert_fail@plt+0x6dcc>
   1ef40:	mov	r9, #89	; 0x59
   1ef44:	b	1eabc <__assert_fail@plt+0xc2bc>
   1ef48:	mov	r0, #512	; 0x200
   1ef4c:	bl	12098 <gcry_xmalloc@plt>
   1ef50:	ldr	r2, [r5, #20]
   1ef54:	str	r0, [r5, #16]
   1ef58:	b	1eb18 <__assert_fail@plt+0xc318>
   1ef5c:	mov	r1, #255	; 0xff
   1ef60:	mov	r0, r2
   1ef64:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1ef68:	cmp	r0, #0
   1ef6c:	bne	1ef00 <__assert_fail@plt+0xc700>
   1ef70:	lsr	r1, r4, #24
   1ef74:	mov	r0, r7
   1ef78:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1ef7c:	cmp	r0, #0
   1ef80:	bne	1ef00 <__assert_fail@plt+0xc700>
   1ef84:	lsr	r1, r4, #16
   1ef88:	mov	r0, r7
   1ef8c:	uxtb	r1, r1
   1ef90:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1ef94:	cmp	r0, #0
   1ef98:	bne	1ef00 <__assert_fail@plt+0xc700>
   1ef9c:	lsr	r1, r4, #8
   1efa0:	mov	r0, r7
   1efa4:	uxtb	r1, r1
   1efa8:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1efac:	cmp	r0, #0
   1efb0:	bne	1ef00 <__assert_fail@plt+0xc700>
   1efb4:	uxtb	r1, r4
   1efb8:	mov	r0, r7
   1efbc:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1efc0:	mov	r9, r0
   1efc4:	adds	r3, r4, #0
   1efc8:	movne	r3, #1
   1efcc:	cmp	r9, #0
   1efd0:	movne	r3, #0
   1efd4:	cmp	r3, #0
   1efd8:	beq	1eff0 <__assert_fail@plt+0xc7f0>
   1efdc:	mov	r2, r4
   1efe0:	mov	r0, r7
   1efe4:	ldr	r1, [r5, #16]
   1efe8:	bl	1e748 <__assert_fail@plt+0xbf48>
   1efec:	mov	r9, r0
   1eff0:	cmp	r9, #0
   1eff4:	beq	1ef20 <__assert_fail@plt+0xc720>
   1eff8:	b	1ef00 <__assert_fail@plt+0xc700>
   1effc:	mov	r1, r4
   1f000:	mov	r0, r2
   1f004:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1f008:	mov	r9, r0
   1f00c:	b	1efc4 <__assert_fail@plt+0xc7c4>
   1f010:	ldr	r0, [pc, #240]	; 1f108 <__assert_fail@plt+0xc908>
   1f014:	bl	195cc <__assert_fail@plt+0x6dcc>
   1f018:	mov	r9, #89	; 0x59
   1f01c:	b	1eabc <__assert_fail@plt+0xc2bc>
   1f020:	ldr	r2, [pc, #228]	; 1f10c <__assert_fail@plt+0xc90c>
   1f024:	ldr	r1, [pc, #228]	; 1f110 <__assert_fail@plt+0xc910>
   1f028:	ldr	r0, [pc, #228]	; 1f114 <__assert_fail@plt+0xc914>
   1f02c:	bl	1992c <__assert_fail@plt+0x712c>
   1f030:	ldr	r2, [pc, #212]	; 1f10c <__assert_fail@plt+0xc90c>
   1f034:	ldr	r1, [pc, #220]	; 1f118 <__assert_fail@plt+0xc918>
   1f038:	ldr	r0, [pc, #212]	; 1f114 <__assert_fail@plt+0xc914>
   1f03c:	bl	1992c <__assert_fail@plt+0x712c>
   1f040:	ldr	r3, [pc, #212]	; 1f11c <__assert_fail@plt+0xc91c>
   1f044:	ldr	r2, [pc, #212]	; 1f120 <__assert_fail@plt+0xc920>
   1f048:	ldr	r1, [pc, #196]	; 1f114 <__assert_fail@plt+0xc914>
   1f04c:	ldr	r0, [pc, #208]	; 1f124 <__assert_fail@plt+0xc924>
   1f050:	bl	12800 <__assert_fail@plt>
   1f054:	uxtb	r1, r6
   1f058:	mov	r0, r7
   1f05c:	bl	1e6b8 <__assert_fail@plt+0xbeb8>
   1f060:	mov	r9, r0
   1f064:	b	1efc4 <__assert_fail@plt+0xc7c4>
   1f068:	ldr	r2, [pc, #156]	; 1f10c <__assert_fail@plt+0xc90c>
   1f06c:	ldr	r1, [pc, #180]	; 1f128 <__assert_fail@plt+0xc928>
   1f070:	ldr	r0, [pc, #156]	; 1f114 <__assert_fail@plt+0xc914>
   1f074:	bl	1992c <__assert_fail@plt+0x712c>
   1f078:	ldr	r3, [pc, #156]	; 1f11c <__assert_fail@plt+0xc91c>
   1f07c:	ldr	r2, [pc, #168]	; 1f12c <__assert_fail@plt+0xc92c>
   1f080:	ldr	r1, [pc, #140]	; 1f114 <__assert_fail@plt+0xc914>
   1f084:	ldr	r0, [pc, #164]	; 1f130 <__assert_fail@plt+0xc930>
   1f088:	bl	12800 <__assert_fail@plt>
   1f08c:	ldr	r3, [pc, #136]	; 1f11c <__assert_fail@plt+0xc91c>
   1f090:	mov	r2, #964	; 0x3c4
   1f094:	ldr	r1, [pc, #120]	; 1f114 <__assert_fail@plt+0xc914>
   1f098:	ldr	r0, [pc, #148]	; 1f134 <__assert_fail@plt+0xc934>
   1f09c:	bl	12800 <__assert_fail@plt>
   1f0a0:	ldr	r3, [pc, #116]	; 1f11c <__assert_fail@plt+0xc91c>
   1f0a4:	ldr	r2, [pc, #140]	; 1f138 <__assert_fail@plt+0xc938>
   1f0a8:	ldr	r1, [pc, #100]	; 1f114 <__assert_fail@plt+0xc914>
   1f0ac:	ldr	r0, [pc, #136]	; 1f13c <__assert_fail@plt+0xc93c>
   1f0b0:	bl	12800 <__assert_fail@plt>
   1f0b4:	ldr	r3, [pc, #96]	; 1f11c <__assert_fail@plt+0xc91c>
   1f0b8:	ldr	r2, [pc, #128]	; 1f140 <__assert_fail@plt+0xc940>
   1f0bc:	ldr	r1, [pc, #80]	; 1f114 <__assert_fail@plt+0xc914>
   1f0c0:	ldr	r0, [pc, #124]	; 1f144 <__assert_fail@plt+0xc944>
   1f0c4:	bl	12800 <__assert_fail@plt>
   1f0c8:	ldr	r3, [pc, #76]	; 1f11c <__assert_fail@plt+0xc91c>
   1f0cc:	mov	r2, #796	; 0x31c
   1f0d0:	ldr	r1, [pc, #60]	; 1f114 <__assert_fail@plt+0xc914>
   1f0d4:	ldr	r0, [pc, #108]	; 1f148 <__assert_fail@plt+0xc948>
   1f0d8:	bl	12800 <__assert_fail@plt>
   1f0dc:	andeq	r6, r3, r4, lsr #6
   1f0e0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f0e4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f0e8:	andeq	r4, r2, r0, asr #7
   1f0ec:	andeq	r4, r2, r8, asr #6
   1f0f0:	andeq	r4, r2, r4, lsl #9
   1f0f4:	muleq	r2, r4, r4
   1f0f8:	andeq	r4, r2, ip, ror #8
   1f0fc:			; <UNDEFINED> instruction: 0x000244b4
   1f100:	andeq	r4, r2, ip, asr #9
   1f104:	andeq	r4, r2, r0, ror r3
   1f108:	muleq	r2, r8, r3
   1f10c:	andeq	r3, r2, r8, lsr #19
   1f110:	andeq	r0, r0, r5, ror r3
   1f114:	muleq	r2, r0, sl
   1f118:	andeq	r0, r0, lr, asr #7
   1f11c:	muleq	r2, r8, r9
   1f120:	muleq	r0, r6, r3
   1f124:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1f128:	andeq	r0, r0, r2, lsl r4
   1f12c:	andeq	r0, r0, r5, asr #7
   1f130:	andeq	r4, r2, ip, asr #8
   1f134:	andeq	r4, r2, r0, asr #8
   1f138:	andeq	r0, r0, lr, lsr #7
   1f13c:	andeq	r4, r2, r8, lsl r4
   1f140:			; <UNDEFINED> instruction: 0x000003b3
   1f144:	andeq	r4, r2, r4, lsr #8
   1f148:	andeq	r4, r2, r4, lsl r3
   1f14c:	ldr	r3, [r0]
   1f150:	push	{r4, r5, r6, lr}
   1f154:	cmp	r3, #1
   1f158:	bls	1f180 <__assert_fail@plt+0xc980>
   1f15c:	mov	r4, r0
   1f160:	mov	r0, r1
   1f164:	mov	r5, r1
   1f168:	bl	124b8 <strlen@plt>
   1f16c:	mov	r1, r5
   1f170:	mov	r2, r0
   1f174:	mov	r0, r4
   1f178:	pop	{r4, r5, r6, lr}
   1f17c:	b	1e748 <__assert_fail@plt+0xbf48>
   1f180:	ldr	r0, [pc]	; 1f188 <__assert_fail@plt+0xc988>
   1f184:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1f188:	andeq	r4, r2, ip, ror #9
   1f18c:	push	{r4, r5, r6, r7, r8, lr}
   1f190:	sub	sp, sp, #40	; 0x28
   1f194:	ldr	r6, [pc, #152]	; 1f234 <__assert_fail@plt+0xca34>
   1f198:	mov	r4, r0
   1f19c:	mov	r8, r1
   1f1a0:	ldr	r3, [r6]
   1f1a4:	mov	r7, r2
   1f1a8:	str	r3, [sp, #36]	; 0x24
   1f1ac:	b	1f1b4 <__assert_fail@plt+0xc9b4>
   1f1b0:	mov	r4, r3
   1f1b4:	mov	r0, r4
   1f1b8:	bl	1c3b0 <__assert_fail@plt+0x9bb0>
   1f1bc:	cmp	r0, #0
   1f1c0:	bne	1f208 <__assert_fail@plt+0xca08>
   1f1c4:	ldr	r3, [r4, #76]	; 0x4c
   1f1c8:	cmp	r3, #0
   1f1cc:	bne	1f1b0 <__assert_fail@plt+0xc9b0>
   1f1d0:	ldr	r5, [r4, #44]	; 0x2c
   1f1d4:	mov	r0, r8
   1f1d8:	cmp	r5, r7
   1f1dc:	movcs	r5, r7
   1f1e0:	mov	r2, r5
   1f1e4:	ldr	r1, [r4, #48]	; 0x30
   1f1e8:	bl	121dc <memcpy@plt>
   1f1ec:	ldr	r2, [sp, #36]	; 0x24
   1f1f0:	ldr	r3, [r6]
   1f1f4:	mov	r0, r5
   1f1f8:	cmp	r2, r3
   1f1fc:	bne	1f230 <__assert_fail@plt+0xca30>
   1f200:	add	sp, sp, #40	; 0x28
   1f204:	pop	{r4, r5, r6, r7, r8, pc}
   1f208:	add	r1, sp, #4
   1f20c:	mov	r0, r4
   1f210:	ldr	r5, [r4, #80]	; 0x50
   1f214:	ldr	r6, [r4, #84]	; 0x54
   1f218:	bl	1ca24 <__assert_fail@plt+0xa224>
   1f21c:	mov	r2, r6
   1f220:	mov	r1, r5
   1f224:	mov	r3, r0
   1f228:	ldr	r0, [pc, #8]	; 1f238 <__assert_fail@plt+0xca38>
   1f22c:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1f230:	bl	12260 <__stack_chk_fail@plt>
   1f234:	andeq	r5, r3, r8, asr #22
   1f238:	andeq	r4, r2, ip, lsl r5
   1f23c:	ldr	r3, [r1]
   1f240:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f244:	cmp	r3, #1
   1f248:	bhi	1f300 <__assert_fail@plt+0xcb00>
   1f24c:	ldr	r3, [r0]
   1f250:	mov	r8, r0
   1f254:	cmp	r3, #2
   1f258:	bne	1f2ec <__assert_fail@plt+0xcaec>
   1f25c:	ldr	r5, [r0, #56]	; 0x38
   1f260:	cmp	r5, #0
   1f264:	mvnne	r7, #0
   1f268:	bne	1f2d4 <__assert_fail@plt+0xcad4>
   1f26c:	mov	r0, #32768	; 0x8000
   1f270:	mov	r9, r1
   1f274:	bl	12098 <gcry_xmalloc@plt>
   1f278:	mov	r7, r5
   1f27c:	mov	r6, r0
   1f280:	b	1f2a8 <__assert_fail@plt+0xcaa8>
   1f284:	cmp	r5, r0
   1f288:	mov	r2, r0
   1f28c:	mov	r1, r6
   1f290:	mov	r0, r8
   1f294:	movcc	r5, r4
   1f298:	bl	1e748 <__assert_fail@plt+0xbf48>
   1f29c:	cmp	r0, #0
   1f2a0:	bne	1f2c4 <__assert_fail@plt+0xcac4>
   1f2a4:	add	r7, r7, r4
   1f2a8:	mov	r2, #32768	; 0x8000
   1f2ac:	mov	r1, r6
   1f2b0:	mov	r0, r9
   1f2b4:	bl	1e444 <__assert_fail@plt+0xbc44>
   1f2b8:	cmn	r0, #1
   1f2bc:	mov	r4, r0
   1f2c0:	bne	1f284 <__assert_fail@plt+0xca84>
   1f2c4:	cmp	r5, #0
   1f2c8:	bne	1f2dc <__assert_fail@plt+0xcadc>
   1f2cc:	mov	r0, r6
   1f2d0:	bl	12218 <gcry_free@plt>
   1f2d4:	mov	r0, r7
   1f2d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f2dc:	mov	r1, r5
   1f2e0:	mov	r0, r6
   1f2e4:	bl	20e64 <__assert_fail@plt+0xe664>
   1f2e8:	b	1f2cc <__assert_fail@plt+0xcacc>
   1f2ec:	ldr	r3, [pc, #32]	; 1f314 <__assert_fail@plt+0xcb14>
   1f2f0:	ldr	r2, [pc, #32]	; 1f318 <__assert_fail@plt+0xcb18>
   1f2f4:	ldr	r1, [pc, #32]	; 1f31c <__assert_fail@plt+0xcb1c>
   1f2f8:	ldr	r0, [pc, #32]	; 1f320 <__assert_fail@plt+0xcb20>
   1f2fc:	bl	12800 <__assert_fail@plt>
   1f300:	ldr	r3, [pc, #12]	; 1f314 <__assert_fail@plt+0xcb14>
   1f304:	ldr	r2, [pc, #24]	; 1f324 <__assert_fail@plt+0xcb24>
   1f308:	ldr	r1, [pc, #12]	; 1f31c <__assert_fail@plt+0xcb1c>
   1f30c:	ldr	r0, [pc, #20]	; 1f328 <__assert_fail@plt+0xcb28>
   1f310:	bl	12800 <__assert_fail@plt>
   1f314:			; <UNDEFINED> instruction: 0x000239b8
   1f318:	andeq	r0, r0, pc, lsr #17
   1f31c:	muleq	r2, r0, sl
   1f320:	andeq	r4, r2, r4, lsr #11
   1f324:	andeq	r0, r0, lr, lsr #17
   1f328:	andeq	r4, r2, r4, ror #10
   1f32c:	ldr	r3, [r0]
   1f330:	push	{r4, lr}
   1f334:	cmp	r3, #1
   1f338:	bls	1f36c <__assert_fail@plt+0xcb6c>
   1f33c:	ldr	r3, [r0, #76]	; 0x4c
   1f340:	mov	r4, r0
   1f344:	cmp	r3, #0
   1f348:	popeq	{r4, pc}
   1f34c:	mov	r2, #0
   1f350:	ldr	r1, [r4, #60]	; 0x3c
   1f354:	mov	r0, r4
   1f358:	bl	1e0b0 <__assert_fail@plt+0xb8b0>
   1f35c:	ldr	r3, [r4, #76]	; 0x4c
   1f360:	cmp	r3, #0
   1f364:	bne	1f34c <__assert_fail@plt+0xcb4c>
   1f368:	pop	{r4, pc}
   1f36c:	ldr	r0, [pc]	; 1f374 <__assert_fail@plt+0xcb74>
   1f370:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1f374:	andeq	r4, r2, r4, ror #11
   1f378:	ldr	r3, [r1]
   1f37c:	push	{r4, r5, r6, lr}
   1f380:	sub	r3, r3, #2
   1f384:	cmp	r3, #1
   1f388:	bhi	1f3c0 <__assert_fail@plt+0xcbc0>
   1f38c:	ldr	r3, [r0]
   1f390:	mov	r5, r0
   1f394:	sub	r3, r3, #2
   1f398:	cmp	r3, #1
   1f39c:	bhi	1f3d4 <__assert_fail@plt+0xcbd4>
   1f3a0:	mov	r4, r1
   1f3a4:	mov	r0, r1
   1f3a8:	bl	1f32c <__assert_fail@plt+0xcb2c>
   1f3ac:	mov	r0, r5
   1f3b0:	ldr	r2, [r4, #44]	; 0x2c
   1f3b4:	ldr	r1, [r4, #48]	; 0x30
   1f3b8:	pop	{r4, r5, r6, lr}
   1f3bc:	b	1e748 <__assert_fail@plt+0xbf48>
   1f3c0:	ldr	r3, [pc, #32]	; 1f3e8 <__assert_fail@plt+0xcbe8>
   1f3c4:	mov	r2, #2176	; 0x880
   1f3c8:	ldr	r1, [pc, #28]	; 1f3ec <__assert_fail@plt+0xcbec>
   1f3cc:	ldr	r0, [pc, #28]	; 1f3f0 <__assert_fail@plt+0xcbf0>
   1f3d0:	bl	12800 <__assert_fail@plt>
   1f3d4:	ldr	r3, [pc, #12]	; 1f3e8 <__assert_fail@plt+0xcbe8>
   1f3d8:	ldr	r2, [pc, #20]	; 1f3f4 <__assert_fail@plt+0xcbf4>
   1f3dc:	ldr	r1, [pc, #8]	; 1f3ec <__assert_fail@plt+0xcbec>
   1f3e0:	ldr	r0, [pc, #16]	; 1f3f8 <__assert_fail@plt+0xcbf8>
   1f3e4:	bl	12800 <__assert_fail@plt>
   1f3e8:	andeq	r3, r2, r4, asr #19
   1f3ec:	muleq	r2, r0, sl
   1f3f0:	andeq	r4, r2, r4, lsl r6
   1f3f4:	andeq	r0, r0, r1, lsl #17
   1f3f8:	andeq	r4, r2, r4, asr r6
   1f3fc:	push	{r4, r5, lr}
   1f400:	orrs	ip, r2, r3
   1f404:	ldr	r1, [r0, #24]
   1f408:	ldr	lr, [r0, #16]
   1f40c:	ldr	ip, [r0, #28]
   1f410:	ldr	r5, [r0, #20]
   1f414:	strd	r2, [r0, #8]
   1f418:	movne	r4, #1
   1f41c:	moveq	r4, #0
   1f420:	mov	r2, #0
   1f424:	adds	r1, r1, lr
   1f428:	mov	r3, #0
   1f42c:	adc	ip, ip, r5
   1f430:	str	r4, [r0, #32]
   1f434:	str	r1, [r0, #24]
   1f438:	str	ip, [r0, #28]
   1f43c:	strd	r2, [r0, #16]
   1f440:	pop	{r4, r5, pc}
   1f444:	push	{r4, lr}
   1f448:	sub	sp, sp, #112	; 0x70
   1f44c:	ldr	r4, [pc, #156]	; 1f4f0 <__assert_fail@plt+0xccf0>
   1f450:	cmp	r1, #0
   1f454:	ldr	r3, [r4]
   1f458:	str	r3, [sp, #108]	; 0x6c
   1f45c:	movne	r3, #0
   1f460:	strne	r3, [r1]
   1f464:	b	1f46c <__assert_fail@plt+0xcc6c>
   1f468:	mov	r0, r3
   1f46c:	ldr	r3, [r0, #76]	; 0x4c
   1f470:	cmp	r3, #0
   1f474:	bne	1f468 <__assert_fail@plt+0xcc68>
   1f478:	ldr	r2, [r0, #60]	; 0x3c
   1f47c:	ldr	r3, [pc, #112]	; 1f4f4 <__assert_fail@plt+0xccf4>
   1f480:	cmp	r2, r3
   1f484:	movne	r0, #0
   1f488:	movne	r1, #0
   1f48c:	beq	1f4a8 <__assert_fail@plt+0xcca8>
   1f490:	ldr	r2, [sp, #108]	; 0x6c
   1f494:	ldr	r3, [r4]
   1f498:	cmp	r2, r3
   1f49c:	bne	1f4ec <__assert_fail@plt+0xccec>
   1f4a0:	add	sp, sp, #112	; 0x70
   1f4a4:	pop	{r4, pc}
   1f4a8:	ldr	r3, [r0, #64]	; 0x40
   1f4ac:	mov	r2, sp
   1f4b0:	mov	r0, #3
   1f4b4:	ldr	r1, [r3]
   1f4b8:	bl	122f0 <__fxstat64@plt>
   1f4bc:	cmp	r0, #0
   1f4c0:	ldrdeq	r0, [sp, #48]	; 0x30
   1f4c4:	beq	1f490 <__assert_fail@plt+0xcc90>
   1f4c8:	bl	12518 <__errno_location@plt>
   1f4cc:	ldr	r0, [r0]
   1f4d0:	bl	123ec <strerror@plt>
   1f4d4:	mov	r1, r0
   1f4d8:	ldr	r0, [pc, #24]	; 1f4f8 <__assert_fail@plt+0xccf8>
   1f4dc:	bl	195cc <__assert_fail@plt+0x6dcc>
   1f4e0:	mov	r0, #0
   1f4e4:	mov	r1, #0
   1f4e8:	b	1f490 <__assert_fail@plt+0xcc90>
   1f4ec:	bl	12260 <__stack_chk_fail@plt>
   1f4f0:	andeq	r5, r3, r8, asr #22
   1f4f4:	andeq	ip, r1, ip, asr #9
   1f4f8:	muleq	r2, r0, r6
   1f4fc:	b	1f504 <__assert_fail@plt+0xcd04>
   1f500:	mov	r0, r3
   1f504:	ldr	r3, [r0, #76]	; 0x4c
   1f508:	cmp	r3, #0
   1f50c:	bne	1f500 <__assert_fail@plt+0xcd00>
   1f510:	ldr	r3, [pc, #20]	; 1f52c <__assert_fail@plt+0xcd2c>
   1f514:	ldr	r2, [r0, #60]	; 0x3c
   1f518:	cmp	r2, r3
   1f51c:	ldreq	r3, [r0, #64]	; 0x40
   1f520:	ldreq	r0, [r3]
   1f524:	mvnne	r0, #0
   1f528:	bx	lr
   1f52c:	andeq	ip, r1, ip, asr #9
   1f530:	ldr	r3, [r0, #24]
   1f534:	ldr	r2, [r0, #16]
   1f538:	ldr	ip, [r0, #28]
   1f53c:	ldr	r1, [r0, #20]
   1f540:	adds	r0, r3, r2
   1f544:	adc	r1, ip, r1
   1f548:	bx	lr
   1f54c:	push	{r4, r5, r6, r7, lr}
   1f550:	mov	r7, r3
   1f554:	ldr	r3, [r0]
   1f558:	sub	sp, sp, #12
   1f55c:	bics	r3, r3, #2
   1f560:	mov	r4, r0
   1f564:	mov	r6, r2
   1f568:	beq	1f5dc <__assert_fail@plt+0xcddc>
   1f56c:	ldr	r3, [r4, #76]	; 0x4c
   1f570:	mov	r0, #0
   1f574:	mov	r1, #0
   1f578:	cmp	r3, #0
   1f57c:	mov	r3, #0
   1f580:	strd	r6, [r4, #24]
   1f584:	strd	r0, [r4, #16]
   1f588:	strd	r0, [r4, #8]
   1f58c:	str	r3, [r4, #40]	; 0x28
   1f590:	str	r3, [r4, #32]
   1f594:	str	r3, [r4, #56]	; 0x38
   1f598:	beq	1f5cc <__assert_fail@plt+0xcdcc>
   1f59c:	ldr	r0, [pc, #172]	; 1f650 <__assert_fail@plt+0xce50>
   1f5a0:	bl	19718 <__assert_fail@plt+0x6f18>
   1f5a4:	ldr	r3, [r4, #76]	; 0x4c
   1f5a8:	cmp	r3, #0
   1f5ac:	beq	1f5cc <__assert_fail@plt+0xcdcc>
   1f5b0:	mov	r2, #0
   1f5b4:	ldr	r1, [r4, #60]	; 0x3c
   1f5b8:	mov	r0, r4
   1f5bc:	bl	1e0b0 <__assert_fail@plt+0xb8b0>
   1f5c0:	ldr	r3, [r4, #76]	; 0x4c
   1f5c4:	cmp	r3, #0
   1f5c8:	bne	1f5b0 <__assert_fail@plt+0xcdb0>
   1f5cc:	mov	r0, #0
   1f5d0:	add	sp, sp, #12
   1f5d4:	pop	{r4, r5, r6, r7, pc}
   1f5d8:	mov	r4, r5
   1f5dc:	ldr	r5, [r4, #76]	; 0x4c
   1f5e0:	cmp	r5, #0
   1f5e4:	bne	1f5d8 <__assert_fail@plt+0xcdd8>
   1f5e8:	ldr	r3, [pc, #100]	; 1f654 <__assert_fail@plt+0xce54>
   1f5ec:	ldr	r2, [r4, #60]	; 0x3c
   1f5f0:	cmp	r2, r3
   1f5f4:	bne	1f648 <__assert_fail@plt+0xce48>
   1f5f8:	ldr	r1, [r4, #64]	; 0x40
   1f5fc:	mov	r2, r6
   1f600:	mov	r3, r7
   1f604:	ldr	r0, [r1]
   1f608:	str	r5, [sp]
   1f60c:	bl	12320 <lseek64@plt>
   1f610:	mvn	r3, #0
   1f614:	mvn	r2, #0
   1f618:	cmp	r1, r3
   1f61c:	cmpeq	r0, r2
   1f620:	strne	r5, [r4, #44]	; 0x2c
   1f624:	bne	1f56c <__assert_fail@plt+0xcd6c>
   1f628:	bl	12518 <__errno_location@plt>
   1f62c:	ldr	r0, [r0]
   1f630:	bl	123ec <strerror@plt>
   1f634:	mov	r1, r0
   1f638:	ldr	r0, [pc, #24]	; 1f658 <__assert_fail@plt+0xce58>
   1f63c:	bl	195cc <__assert_fail@plt+0x6dcc>
   1f640:	mvn	r0, #0
   1f644:	b	1f5d0 <__assert_fail@plt+0xcdd0>
   1f648:	mvn	r0, #0
   1f64c:	b	1f5d0 <__assert_fail@plt+0xcdd0>
   1f650:			; <UNDEFINED> instruction: 0x000246b8
   1f654:	andeq	ip, r1, ip, asr #9
   1f658:	andeq	r4, r2, r4, lsr #13
   1f65c:	ldr	r3, [r0, #72]	; 0x48
   1f660:	cmp	r3, #0
   1f664:	beq	1f670 <__assert_fail@plt+0xce70>
   1f668:	mov	r0, r3
   1f66c:	bx	lr
   1f670:	b	1d448 <__assert_fail@plt+0xac48>
   1f674:	cmp	r0, #0
   1f678:	bxeq	lr
   1f67c:	ldr	r2, [r0, #76]	; 0x4c
   1f680:	cmp	r2, #0
   1f684:	bne	1f690 <__assert_fail@plt+0xce90>
   1f688:	b	1f6b4 <__assert_fail@plt+0xceb4>
   1f68c:	mov	r2, r3
   1f690:	ldr	r3, [r2, #76]	; 0x4c
   1f694:	cmp	r3, #0
   1f698:	bne	1f68c <__assert_fail@plt+0xce8c>
   1f69c:	ldr	r3, [pc, #36]	; 1f6c8 <__assert_fail@plt+0xcec8>
   1f6a0:	ldr	r1, [r2, #60]	; 0x3c
   1f6a4:	cmp	r1, r3
   1f6a8:	beq	1f6bc <__assert_fail@plt+0xcebc>
   1f6ac:	mov	r0, #0
   1f6b0:	bx	lr
   1f6b4:	mov	r2, r0
   1f6b8:	b	1f69c <__assert_fail@plt+0xce9c>
   1f6bc:	ldr	r0, [r2, #64]	; 0x40
   1f6c0:	add	r0, r0, #20
   1f6c4:	bx	lr
   1f6c8:	andeq	ip, r1, ip, asr #9
   1f6cc:	cmp	r0, #0
   1f6d0:	beq	1f704 <__assert_fail@plt+0xcf04>
   1f6d4:	ldr	r2, [r0, #76]	; 0x4c
   1f6d8:	cmp	r2, #0
   1f6dc:	bne	1f6e8 <__assert_fail@plt+0xcee8>
   1f6e0:	b	1f720 <__assert_fail@plt+0xcf20>
   1f6e4:	mov	r2, r3
   1f6e8:	ldr	r3, [r2, #76]	; 0x4c
   1f6ec:	cmp	r3, #0
   1f6f0:	bne	1f6e4 <__assert_fail@plt+0xcee4>
   1f6f4:	ldr	r3, [pc, #44]	; 1f728 <__assert_fail@plt+0xcf28>
   1f6f8:	ldr	r1, [r2, #60]	; 0x3c
   1f6fc:	cmp	r1, r3
   1f700:	beq	1f70c <__assert_fail@plt+0xcf0c>
   1f704:	ldr	r0, [pc, #32]	; 1f72c <__assert_fail@plt+0xcf2c>
   1f708:	bx	lr
   1f70c:	ldr	r0, [r2, #64]	; 0x40
   1f710:	ldr	r3, [pc, #20]	; 1f72c <__assert_fail@plt+0xcf2c>
   1f714:	adds	r0, r0, #20
   1f718:	moveq	r0, r3
   1f71c:	bx	lr
   1f720:	mov	r2, r0
   1f724:	b	1f6f4 <__assert_fail@plt+0xcef4>
   1f728:	andeq	ip, r1, ip, asr #9
   1f72c:	strdeq	r4, [r2], -r0
   1f730:	push	{r4, r5, r6, lr}
   1f734:	subs	r5, r1, #0
   1f738:	mov	r4, r0
   1f73c:	bne	1f778 <__assert_fail@plt+0xcf78>
   1f740:	ldr	r3, [r0]
   1f744:	cmp	r3, #0
   1f748:	beq	1f76c <__assert_fail@plt+0xcf6c>
   1f74c:	ldr	r3, [pc, #124]	; 1f7d0 <__assert_fail@plt+0xcfd0>
   1f750:	ldr	r1, [r4, #60]	; 0x3c
   1f754:	cmp	r1, r3
   1f758:	bne	1f7bc <__assert_fail@plt+0xcfbc>
   1f75c:	mov	r0, r4
   1f760:	mov	r2, #0
   1f764:	pop	{r4, r5, r6, lr}
   1f768:	b	1e0b0 <__assert_fail@plt+0xb8b0>
   1f76c:	ldr	r0, [pc, #96]	; 1f7d4 <__assert_fail@plt+0xcfd4>
   1f770:	bl	19718 <__assert_fail@plt+0x6f18>
   1f774:	b	1f74c <__assert_fail@plt+0xcf4c>
   1f778:	mov	r1, #32
   1f77c:	mov	r0, #1
   1f780:	bl	12734 <gcry_xcalloc@plt>
   1f784:	ldr	r3, [r4]
   1f788:	mov	lr, #0
   1f78c:	mov	r1, #1
   1f790:	mov	ip, r0
   1f794:	mov	r2, ip
   1f798:	mov	r0, r4
   1f79c:	str	r5, [ip, #24]
   1f7a0:	str	r3, [ip]
   1f7a4:	str	r1, [ip, #12]
   1f7a8:	mov	r3, lr
   1f7ac:	str	lr, [ip, #4]
   1f7b0:	ldr	r1, [pc, #24]	; 1f7d0 <__assert_fail@plt+0xcfd0>
   1f7b4:	pop	{r4, r5, r6, lr}
   1f7b8:	b	1de98 <__assert_fail@plt+0xb698>
   1f7bc:	ldr	r3, [pc, #20]	; 1f7d8 <__assert_fail@plt+0xcfd8>
   1f7c0:	mov	r2, #2528	; 0x9e0
   1f7c4:	ldr	r1, [pc, #16]	; 1f7dc <__assert_fail@plt+0xcfdc>
   1f7c8:	ldr	r0, [pc, #16]	; 1f7e0 <__assert_fail@plt+0xcfe0>
   1f7cc:	bl	19954 <__assert_fail@plt+0x7154>
   1f7d0:	strdeq	lr, [r1], -r0
   1f7d4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1f7d8:	ldrdeq	r3, [r2], -r8
   1f7dc:	muleq	r2, r0, sl
   1f7e0:	andeq	r4, r2, r8, lsr r7
   1f7e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7e8:	sub	sp, sp, #12
   1f7ec:	ldr	r8, [r2]
   1f7f0:	ldr	sl, [r1]
   1f7f4:	clz	ip, sl
   1f7f8:	lsr	ip, ip, #5
   1f7fc:	mov	r9, r2
   1f800:	str	r3, [sp, #4]
   1f804:	mov	r2, r3
   1f808:	cmp	r8, #1
   1f80c:	movls	r3, ip
   1f810:	orrhi	r3, ip, #1
   1f814:	cmp	r3, #0
   1f818:	str	r1, [sp]
   1f81c:	mov	r4, r0
   1f820:	ldr	r7, [r2]
   1f824:	bne	1f85c <__assert_fail@plt+0xd05c>
   1f828:	cmp	r7, #1
   1f82c:	bls	1f9f4 <__assert_fail@plt+0xd1f4>
   1f830:	cmp	r7, #256	; 0x100
   1f834:	movcc	r8, r7
   1f838:	movcs	r8, #256	; 0x100
   1f83c:	mov	r0, sl
   1f840:	mov	r1, r8
   1f844:	bl	123bc <gcry_xrealloc@plt>
   1f848:	ldr	r3, [sp]
   1f84c:	mov	sl, r0
   1f850:	str	r0, [r3]
   1f854:	str	r8, [r9]
   1f858:	b	1f86c <__assert_fail@plt+0xd06c>
   1f85c:	cmp	r8, #1
   1f860:	orrls	ip, ip, #1
   1f864:	cmp	ip, #0
   1f868:	bne	1f830 <__assert_fail@plt+0xd030>
   1f86c:	mov	fp, sl
   1f870:	mov	r6, #0
   1f874:	b	1f8c8 <__assert_fail@plt+0xd0c8>
   1f878:	ldr	ip, [r4, #16]
   1f87c:	ldr	lr, [r4, #20]
   1f880:	ldr	r5, [r4, #48]	; 0x30
   1f884:	adds	ip, ip, #1
   1f888:	str	ip, [r4, #16]
   1f88c:	adc	lr, lr, #0
   1f890:	add	ip, r0, #1
   1f894:	str	lr, [r4, #20]
   1f898:	str	ip, [r4, #40]	; 0x28
   1f89c:	ldrb	ip, [r5, r0]
   1f8a0:	mov	r0, ip
   1f8a4:	mov	r5, fp
   1f8a8:	cmp	r0, #10
   1f8ac:	add	r6, r6, #1
   1f8b0:	strb	ip, [r5], #1
   1f8b4:	beq	1f9c4 <__assert_fail@plt+0xd1c4>
   1f8b8:	sub	r0, r8, #1
   1f8bc:	cmp	r0, r6
   1f8c0:	beq	1f8fc <__assert_fail@plt+0xd0fc>
   1f8c4:	mov	fp, r5
   1f8c8:	ldr	r0, [r4, #32]
   1f8cc:	cmp	r0, #0
   1f8d0:	bne	1f8e4 <__assert_fail@plt+0xd0e4>
   1f8d4:	ldr	r0, [r4, #40]	; 0x28
   1f8d8:	ldr	ip, [r4, #44]	; 0x2c
   1f8dc:	cmp	r0, ip
   1f8e0:	bcc	1f878 <__assert_fail@plt+0xd078>
   1f8e4:	mov	r0, r4
   1f8e8:	bl	1e350 <__assert_fail@plt+0xbb50>
   1f8ec:	cmn	r0, #1
   1f8f0:	beq	1f9d8 <__assert_fail@plt+0xd1d8>
   1f8f4:	uxtb	ip, r0
   1f8f8:	b	1f8a4 <__assert_fail@plt+0xd0a4>
   1f8fc:	cmp	r8, r7
   1f900:	beq	1f960 <__assert_fail@plt+0xd160>
   1f904:	ldr	r3, [pc, #252]	; 1fa08 <__assert_fail@plt+0xd208>
   1f908:	mov	r0, sl
   1f90c:	cmp	r8, r3
   1f910:	movls	r3, #256	; 0x100
   1f914:	movhi	r3, #1024	; 0x400
   1f918:	add	r2, r8, r3
   1f91c:	cmp	r7, r2
   1f920:	movcc	r8, r7
   1f924:	movcs	r8, r2
   1f928:	mov	r1, r8
   1f92c:	bl	123bc <gcry_xrealloc@plt>
   1f930:	ldr	r3, [sp]
   1f934:	mov	sl, r0
   1f938:	str	r0, [r3]
   1f93c:	add	r5, r0, r6
   1f940:	str	r8, [r9]
   1f944:	b	1f8c4 <__assert_fail@plt+0xd0c4>
   1f948:	mov	r0, r4
   1f94c:	bl	1e350 <__assert_fail@plt+0xbb50>
   1f950:	cmn	r0, #1
   1f954:	beq	1f9a8 <__assert_fail@plt+0xd1a8>
   1f958:	cmp	r0, #10
   1f95c:	beq	1f9a8 <__assert_fail@plt+0xd1a8>
   1f960:	ldr	r2, [r4, #32]
   1f964:	cmp	r2, #0
   1f968:	bne	1f948 <__assert_fail@plt+0xd148>
   1f96c:	ldr	r2, [r4, #40]	; 0x28
   1f970:	ldr	r0, [r4, #44]	; 0x2c
   1f974:	cmp	r2, r0
   1f978:	bcs	1f948 <__assert_fail@plt+0xd148>
   1f97c:	ldr	r0, [r4, #16]
   1f980:	ldr	ip, [r4, #20]
   1f984:	ldr	lr, [r4, #48]	; 0x30
   1f988:	adds	r0, r0, #1
   1f98c:	str	r0, [r4, #16]
   1f990:	adc	ip, ip, #0
   1f994:	add	r0, r2, #1
   1f998:	str	ip, [r4, #20]
   1f99c:	str	r0, [r4, #40]	; 0x28
   1f9a0:	ldrb	r0, [lr, r2]
   1f9a4:	b	1f958 <__assert_fail@plt+0xd158>
   1f9a8:	cmp	sl, r5
   1f9ac:	bcs	1f9e0 <__assert_fail@plt+0xd1e0>
   1f9b0:	ldr	r3, [sp, #4]
   1f9b4:	mov	r1, #10
   1f9b8:	mov	r2, #0
   1f9bc:	strb	r1, [fp]
   1f9c0:	str	r2, [r3]
   1f9c4:	mov	r3, #0
   1f9c8:	mov	r0, r6
   1f9cc:	strb	r3, [r5]
   1f9d0:	add	sp, sp, #12
   1f9d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9d8:	mov	r5, fp
   1f9dc:	b	1f9c4 <__assert_fail@plt+0xd1c4>
   1f9e0:	ldr	r3, [pc, #36]	; 1fa0c <__assert_fail@plt+0xd20c>
   1f9e4:	ldr	r2, [pc, #36]	; 1fa10 <__assert_fail@plt+0xd210>
   1f9e8:	ldr	r1, [pc, #36]	; 1fa14 <__assert_fail@plt+0xd214>
   1f9ec:	ldr	r0, [pc, #36]	; 1fa18 <__assert_fail@plt+0xd218>
   1f9f0:	bl	12800 <__assert_fail@plt>
   1f9f4:	ldr	r3, [pc, #16]	; 1fa0c <__assert_fail@plt+0xd20c>
   1f9f8:	mov	r2, #2560	; 0xa00
   1f9fc:	ldr	r1, [pc, #16]	; 1fa14 <__assert_fail@plt+0xd214>
   1fa00:	ldr	r0, [pc, #20]	; 1fa1c <__assert_fail@plt+0xd21c>
   1fa04:	bl	12800 <__assert_fail@plt>
   1fa08:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1fa0c:	strdeq	r3, [r2], -ip
   1fa10:	andeq	r0, r0, r1, lsr #20
   1fa14:	muleq	r2, r0, sl
   1fa18:	andeq	r4, r2, ip, ror r7
   1fa1c:	andeq	r4, r2, r4, asr r7
   1fa20:	cmp	r2, #0
   1fa24:	push	{r4, r5, r6, r7, r8, lr}
   1fa28:	mov	r4, r0
   1fa2c:	bne	1fb04 <__assert_fail@plt+0xd304>
   1fa30:	cmp	r1, #0
   1fa34:	mov	r5, r1
   1fa38:	popeq	{r4, r5, r6, r7, r8, pc}
   1fa3c:	ldr	r3, [r4, #32]
   1fa40:	mov	r0, r4
   1fa44:	cmp	r3, #0
   1fa48:	beq	1faa4 <__assert_fail@plt+0xd2a4>
   1fa4c:	bl	1e350 <__assert_fail@plt+0xbb50>
   1fa50:	sub	r5, r5, #1
   1fa54:	cmn	r0, #1
   1fa58:	popeq	{r4, r5, r6, r7, r8, pc}
   1fa5c:	cmp	r5, #0
   1fa60:	bne	1fa94 <__assert_fail@plt+0xd294>
   1fa64:	pop	{r4, r5, r6, r7, r8, pc}
   1fa68:	ldrd	r2, [r4, #16]
   1fa6c:	cmp	ip, r5
   1fa70:	movcs	ip, r5
   1fa74:	adds	r6, r2, ip
   1fa78:	sub	r5, r5, ip
   1fa7c:	adc	r7, r3, #0
   1fa80:	cmp	r5, #0
   1fa84:	add	r1, r1, ip
   1fa88:	str	r1, [r4, #40]	; 0x28
   1fa8c:	strd	r6, [r4, #16]
   1fa90:	popeq	{r4, r5, r6, r7, r8, pc}
   1fa94:	ldr	r3, [r4, #32]
   1fa98:	mov	r0, r4
   1fa9c:	cmp	r3, #0
   1faa0:	bne	1fa4c <__assert_fail@plt+0xd24c>
   1faa4:	ldr	r1, [r4, #40]	; 0x28
   1faa8:	ldr	r3, [r4, #44]	; 0x2c
   1faac:	cmp	r1, r3
   1fab0:	sub	ip, r3, r1
   1fab4:	bcc	1fa68 <__assert_fail@plt+0xd268>
   1fab8:	b	1fa4c <__assert_fail@plt+0xd24c>
   1fabc:	ldr	r2, [r4, #44]	; 0x2c
   1fac0:	ldr	r3, [r4, #40]	; 0x28
   1fac4:	cmp	r3, r2
   1fac8:	sub	ip, r2, r3
   1facc:	bcs	1faf4 <__assert_fail@plt+0xd2f4>
   1fad0:	ldrd	r0, [r4, #16]
   1fad4:	str	r2, [r4, #40]	; 0x28
   1fad8:	ldr	r3, [r4, #40]	; 0x28
   1fadc:	adds	r6, r0, ip
   1fae0:	adc	r7, r1, #0
   1fae4:	cmp	r3, r2
   1fae8:	strd	r6, [r4, #16]
   1faec:	sub	ip, r2, r3
   1faf0:	bcc	1fad0 <__assert_fail@plt+0xd2d0>
   1faf4:	mov	r0, r4
   1faf8:	bl	1e350 <__assert_fail@plt+0xbb50>
   1fafc:	cmn	r0, #1
   1fb00:	popeq	{r4, r5, r6, r7, r8, pc}
   1fb04:	ldr	r3, [r4, #32]
   1fb08:	cmp	r3, #0
   1fb0c:	bne	1faf4 <__assert_fail@plt+0xd2f4>
   1fb10:	b	1fabc <__assert_fail@plt+0xd2bc>
   1fb14:	ldr	r3, [pc, #8]	; 1fb24 <__assert_fail@plt+0xd324>
   1fb18:	mov	r2, #1
   1fb1c:	str	r2, [r3]
   1fb20:	bx	lr
   1fb24:	andeq	r6, r3, r4, asr r2
   1fb28:	push	{r4, r5, r6, lr}
   1fb2c:	sub	sp, sp, #288	; 0x120
   1fb30:	ldr	r4, [pc, #108]	; 1fba4 <__assert_fail@plt+0xd3a4>
   1fb34:	cmp	r2, #0
   1fb38:	mov	r6, r1
   1fb3c:	ldr	r3, [r4]
   1fb40:	mov	r5, r0
   1fb44:	str	r3, [sp, #284]	; 0x11c
   1fb48:	beq	1fb64 <__assert_fail@plt+0xd364>
   1fb4c:	add	r2, sp, #4
   1fb50:	mov	r1, #0
   1fb54:	bl	122fc <sigaction@plt>
   1fb58:	ldr	r3, [sp, #4]
   1fb5c:	cmp	r3, #1
   1fb60:	beq	1fb88 <__assert_fail@plt+0xd388>
   1fb64:	add	r0, sp, #148	; 0x94
   1fb68:	str	r6, [sp, #144]	; 0x90
   1fb6c:	bl	12638 <sigemptyset@plt>
   1fb70:	mov	r3, #0
   1fb74:	mov	r0, r5
   1fb78:	add	r1, sp, #144	; 0x90
   1fb7c:	mov	r2, r3
   1fb80:	str	r3, [sp, #276]	; 0x114
   1fb84:	bl	122fc <sigaction@plt>
   1fb88:	ldr	r2, [sp, #284]	; 0x11c
   1fb8c:	ldr	r3, [r4]
   1fb90:	cmp	r2, r3
   1fb94:	bne	1fba0 <__assert_fail@plt+0xd3a0>
   1fb98:	add	sp, sp, #288	; 0x120
   1fb9c:	pop	{r4, r5, r6, pc}
   1fba0:	bl	12260 <__stack_chk_fail@plt>
   1fba4:	andeq	r5, r3, r8, asr #22
   1fba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbac:	mov	r7, r0
   1fbb0:	ldr	r4, [pc, #392]	; 1fd40 <__assert_fail@plt+0xd540>
   1fbb4:	sub	sp, sp, #12
   1fbb8:	ldr	r3, [r4, #4]
   1fbbc:	cmp	r3, #0
   1fbc0:	bne	1fd20 <__assert_fail@plt+0xd520>
   1fbc4:	ldr	r3, [r4, #8]
   1fbc8:	mov	r2, #1
   1fbcc:	cmp	r3, #0
   1fbd0:	str	r2, [r4, #4]
   1fbd4:	beq	1fbdc <__assert_fail@plt+0xd3dc>
   1fbd8:	blx	r3
   1fbdc:	mov	r2, #1
   1fbe0:	ldr	r1, [pc, #348]	; 1fd44 <__assert_fail@plt+0xd544>
   1fbe4:	mov	r0, #2
   1fbe8:	bl	125a8 <write@plt>
   1fbec:	mov	r0, #0
   1fbf0:	bl	19378 <__assert_fail@plt+0x6b78>
   1fbf4:	subs	r4, r0, #0
   1fbf8:	beq	1fc10 <__assert_fail@plt+0xd410>
   1fbfc:	bl	124b8 <strlen@plt>
   1fc00:	mov	r1, r4
   1fc04:	mov	r2, r0
   1fc08:	mov	r0, #2
   1fc0c:	bl	125a8 <write@plt>
   1fc10:	mov	r2, #9
   1fc14:	ldr	r1, [pc, #300]	; 1fd48 <__assert_fail@plt+0xd548>
   1fc18:	mov	r0, #2
   1fc1c:	bl	125a8 <write@plt>
   1fc20:	cmp	r7, #64	; 0x40
   1fc24:	bhi	1fcbc <__assert_fail@plt+0xd4bc>
   1fc28:	ldr	r3, [pc, #284]	; 1fd4c <__assert_fail@plt+0xd54c>
   1fc2c:	ldr	r1, [r3, r7, lsl #2]
   1fc30:	cmp	r1, #0
   1fc34:	bne	1fd28 <__assert_fail@plt+0xd528>
   1fc38:	ldr	r4, [pc, #272]	; 1fd50 <__assert_fail@plt+0xd550>
   1fc3c:	ldr	r9, [pc, #272]	; 1fd54 <__assert_fail@plt+0xd554>
   1fc40:	ldr	r8, [pc, #272]	; 1fd58 <__assert_fail@plt+0xd558>
   1fc44:	mov	r5, r1
   1fc48:	mov	sl, r7
   1fc4c:	mov	r6, #5
   1fc50:	cmp	r4, sl
   1fc54:	and	r3, r5, #1
   1fc58:	mov	r1, r4
   1fc5c:	mov	r0, sl
   1fc60:	ble	1fcfc <__assert_fail@plt+0xd4fc>
   1fc64:	cmp	r4, #1
   1fc68:	orreq	r3, r3, #1
   1fc6c:	cmp	r3, #0
   1fc70:	moveq	r5, r3
   1fc74:	beq	1fca4 <__assert_fail@plt+0xd4a4>
   1fc78:	bl	21c7c <__assert_fail@plt+0xf47c>
   1fc7c:	mov	r2, #1
   1fc80:	mov	r1, r9
   1fc84:	cmp	r0, #0
   1fc88:	mov	r0, #2
   1fc8c:	bne	1fca4 <__assert_fail@plt+0xd4a4>
   1fc90:	bl	125a8 <write@plt>
   1fc94:	mov	r0, sl
   1fc98:	mov	r1, r4
   1fc9c:	bl	21e9c <__assert_fail@plt+0xf69c>
   1fca0:	mov	sl, r1
   1fca4:	smull	r2, r3, r8, r4
   1fca8:	subs	r6, r6, #1
   1fcac:	asr	r4, r4, #31
   1fcb0:	rsb	r4, r4, r3, asr #2
   1fcb4:	bne	1fc50 <__assert_fail@plt+0xd450>
   1fcb8:	b	1fccc <__assert_fail@plt+0xd4cc>
   1fcbc:	ldr	r1, [pc, #152]	; 1fd5c <__assert_fail@plt+0xd55c>
   1fcc0:	mov	r2, #1
   1fcc4:	mov	r0, #2
   1fcc8:	bl	125a8 <write@plt>
   1fccc:	mov	r2, #20
   1fcd0:	ldr	r1, [pc, #136]	; 1fd60 <__assert_fail@plt+0xd560>
   1fcd4:	mov	r0, #2
   1fcd8:	bl	125a8 <write@plt>
   1fcdc:	mov	r2, #0
   1fce0:	mov	r0, r7
   1fce4:	mov	r1, r2
   1fce8:	bl	1fb28 <__assert_fail@plt+0xd328>
   1fcec:	mov	r0, r7
   1fcf0:	add	sp, sp, #12
   1fcf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcf8:	b	120a4 <raise@plt>
   1fcfc:	bl	21c7c <__assert_fail@plt+0xf47c>
   1fd00:	mov	r2, #1
   1fd04:	mov	fp, r0
   1fd08:	add	r1, r9, r0
   1fd0c:	mov	r0, #2
   1fd10:	bl	125a8 <write@plt>
   1fd14:	cmp	fp, #0
   1fd18:	movne	r5, #1
   1fd1c:	b	1fc94 <__assert_fail@plt+0xd494>
   1fd20:	bl	120a4 <raise@plt>
   1fd24:	b	1fbc4 <__assert_fail@plt+0xd3c4>
   1fd28:	mov	r0, r1
   1fd2c:	str	r1, [sp, #4]
   1fd30:	bl	124b8 <strlen@plt>
   1fd34:	ldr	r1, [sp, #4]
   1fd38:	mov	r2, r0
   1fd3c:	b	1fcc4 <__assert_fail@plt+0xd4c4>
   1fd40:	andeq	r6, r3, r4, asr r2
   1fd44:	andeq	r3, r2, r8, lsl pc
   1fd48:	muleq	r2, ip, r7
   1fd4c:	andeq	r5, r3, ip, asr #22
   1fd50:	andeq	r2, r0, r0, lsl r7
   1fd54:	andeq	r4, r2, r8, lsr #15
   1fd58:	strbtvs	r6, [r6], -r7, ror #12
   1fd5c:	muleq	r2, r4, r8
   1fd60:			; <UNDEFINED> instruction: 0x000247b4
   1fd64:	push	{r4, lr}
   1fd68:	subs	r4, r0, #0
   1fd6c:	bne	1fdf0 <__assert_fail@plt+0xd5f0>
   1fd70:	ldr	ip, [pc, #140]	; 1fe04 <__assert_fail@plt+0xd604>
   1fd74:	mov	r3, r1
   1fd78:	mov	r2, #1
   1fd7c:	ldr	r1, [pc, #132]	; 1fe08 <__assert_fail@plt+0xd608>
   1fd80:	mov	r0, #2
   1fd84:	str	r3, [ip, #8]
   1fd88:	bl	1fb28 <__assert_fail@plt+0xd328>
   1fd8c:	mov	r2, #1
   1fd90:	mov	r0, r2
   1fd94:	ldr	r1, [pc, #108]	; 1fe08 <__assert_fail@plt+0xd608>
   1fd98:	bl	1fb28 <__assert_fail@plt+0xd328>
   1fd9c:	mov	r2, #1
   1fda0:	ldr	r1, [pc, #96]	; 1fe08 <__assert_fail@plt+0xd608>
   1fda4:	mov	r0, #15
   1fda8:	bl	1fb28 <__assert_fail@plt+0xd328>
   1fdac:	mov	r2, #1
   1fdb0:	ldr	r1, [pc, #80]	; 1fe08 <__assert_fail@plt+0xd608>
   1fdb4:	mov	r0, #3
   1fdb8:	bl	1fb28 <__assert_fail@plt+0xd328>
   1fdbc:	mov	r2, #1
   1fdc0:	ldr	r1, [pc, #64]	; 1fe08 <__assert_fail@plt+0xd608>
   1fdc4:	mov	r0, #11
   1fdc8:	bl	1fb28 <__assert_fail@plt+0xd328>
   1fdcc:	mov	r2, r4
   1fdd0:	ldr	r1, [pc, #52]	; 1fe0c <__assert_fail@plt+0xd60c>
   1fdd4:	mov	r0, #10
   1fdd8:	bl	1fb28 <__assert_fail@plt+0xd328>
   1fddc:	mov	r2, r4
   1fde0:	mov	r1, #1
   1fde4:	mov	r0, #13
   1fde8:	pop	{r4, lr}
   1fdec:	b	1fb28 <__assert_fail@plt+0xd328>
   1fdf0:	ldr	r3, [pc, #24]	; 1fe10 <__assert_fail@plt+0xd610>
   1fdf4:	mov	r2, #169	; 0xa9
   1fdf8:	ldr	r1, [pc, #20]	; 1fe14 <__assert_fail@plt+0xd614>
   1fdfc:	ldr	r0, [pc, #20]	; 1fe18 <__assert_fail@plt+0xd618>
   1fe00:	bl	12800 <__assert_fail@plt>
   1fe04:	andeq	r6, r3, r4, asr r2
   1fe08:	andeq	pc, r1, r8, lsr #23
   1fe0c:	andeq	pc, r1, r4, lsl fp	; <UNPREDICTABLE>
   1fe10:	andeq	r4, r2, r8, lsl #15
   1fe14:	andeq	r4, r2, ip, asr #15
   1fe18:	andeq	r4, r2, r4, ror #15
   1fe1c:	push	{r4, r5, r6, lr}
   1fe20:	sub	sp, sp, #136	; 0x88
   1fe24:	ldr	r4, [pc, #88]	; 1fe84 <__assert_fail@plt+0xd684>
   1fe28:	ldr	r5, [pc, #88]	; 1fe88 <__assert_fail@plt+0xd688>
   1fe2c:	ldr	r6, [r4, #12]
   1fe30:	ldr	r3, [r5]
   1fe34:	cmp	r6, #0
   1fe38:	str	r3, [sp, #132]	; 0x84
   1fe3c:	bne	1fe78 <__assert_fail@plt+0xd678>
   1fe40:	add	r0, sp, #4
   1fe44:	bl	12500 <sigfillset@plt>
   1fe48:	add	r1, sp, #4
   1fe4c:	add	r2, r4, #16
   1fe50:	mov	r0, r6
   1fe54:	bl	12170 <sigprocmask@plt>
   1fe58:	ldr	r1, [sp, #132]	; 0x84
   1fe5c:	ldr	r2, [r5]
   1fe60:	mov	r3, #1
   1fe64:	cmp	r1, r2
   1fe68:	str	r3, [r4, #12]
   1fe6c:	bne	1fe80 <__assert_fail@plt+0xd680>
   1fe70:	add	sp, sp, #136	; 0x88
   1fe74:	pop	{r4, r5, r6, pc}
   1fe78:	ldr	r0, [pc, #12]	; 1fe8c <__assert_fail@plt+0xd68c>
   1fe7c:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1fe80:	bl	12260 <__stack_chk_fail@plt>
   1fe84:	andeq	r6, r3, r4, asr r2
   1fe88:	andeq	r5, r3, r8, asr #22
   1fe8c:	andeq	r4, r2, ip, ror #15
   1fe90:	push	{r4, lr}
   1fe94:	ldr	r4, [pc, #44]	; 1fec8 <__assert_fail@plt+0xd6c8>
   1fe98:	ldr	r3, [r4, #12]
   1fe9c:	cmp	r3, #0
   1fea0:	beq	1fec0 <__assert_fail@plt+0xd6c0>
   1fea4:	mov	r2, #0
   1fea8:	add	r1, r4, #16
   1feac:	mov	r0, #2
   1feb0:	bl	12170 <sigprocmask@plt>
   1feb4:	mov	r3, #0
   1feb8:	str	r3, [r4, #12]
   1febc:	pop	{r4, pc}
   1fec0:	ldr	r0, [pc, #4]	; 1fecc <__assert_fail@plt+0xd6cc>
   1fec4:	bl	196d4 <__assert_fail@plt+0x6ed4>
   1fec8:	andeq	r6, r3, r4, asr r2
   1fecc:	andeq	r4, r2, ip, lsl #16
   1fed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fed4:	sub	sp, sp, #12
   1fed8:	ldr	r9, [pc, #228]	; 1ffc4 <__assert_fail@plt+0xd7c4>
   1fedc:	str	r1, [sp]
   1fee0:	mov	r1, #64	; 0x40
   1fee4:	str	r2, [sp, #4]
   1fee8:	bl	124d0 <strchr@plt>
   1feec:	ldr	r8, [pc, #212]	; 1ffc8 <__assert_fail@plt+0xd7c8>
   1fef0:	mov	r4, r0
   1fef4:	cmp	r4, #0
   1fef8:	beq	1ff40 <__assert_fail@plt+0xd740>
   1fefc:	add	r5, r4, #1
   1ff00:	mov	r0, r5
   1ff04:	mov	r1, #64	; 0x40
   1ff08:	bl	124d0 <strchr@plt>
   1ff0c:	ldrb	r3, [r4, #1]
   1ff10:	sub	r3, r3, #65	; 0x41
   1ff14:	cmp	r3, #25
   1ff18:	mov	r7, r0
   1ff1c:	bhi	1ff34 <__assert_fail@plt+0xd734>
   1ff20:	cmp	r0, #0
   1ff24:	bne	1ff50 <__assert_fail@plt+0xd750>
   1ff28:	mov	r0, r7
   1ff2c:	add	sp, sp, #12
   1ff30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff34:	mov	r4, r7
   1ff38:	cmp	r4, #0
   1ff3c:	bne	1fefc <__assert_fail@plt+0xd6fc>
   1ff40:	mov	r7, r4
   1ff44:	mov	r0, r7
   1ff48:	add	sp, sp, #12
   1ff4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff50:	sub	r6, r0, r5
   1ff54:	mov	fp, r9
   1ff58:	mov	r0, #5
   1ff5c:	mov	sl, #0
   1ff60:	b	1ff7c <__assert_fail@plt+0xd77c>
   1ff64:	add	sl, sl, #1
   1ff68:	cmp	sl, #10
   1ff6c:	beq	1ff34 <__assert_fail@plt+0xd734>
   1ff70:	ldr	fp, [r8, sl, lsl #3]
   1ff74:	mov	r0, fp
   1ff78:	bl	124b8 <strlen@plt>
   1ff7c:	cmp	r6, r0
   1ff80:	bne	1ff64 <__assert_fail@plt+0xd764>
   1ff84:	mov	r0, fp
   1ff88:	mov	r2, r6
   1ff8c:	mov	r1, r5
   1ff90:	bl	12224 <memcmp@plt>
   1ff94:	cmp	r0, #0
   1ff98:	bne	1ff64 <__assert_fail@plt+0xd764>
   1ff9c:	ldr	r3, [sp]
   1ffa0:	ldr	r2, [pc, #32]	; 1ffc8 <__assert_fail@plt+0xd7c8>
   1ffa4:	str	r4, [r3]
   1ffa8:	add	r3, r2, sl, lsl #3
   1ffac:	ldr	r2, [sp, #4]
   1ffb0:	str	r7, [r2]
   1ffb4:	ldr	r7, [r3, #4]
   1ffb8:	mov	r0, r7
   1ffbc:	add	sp, sp, #12
   1ffc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffc4:	andeq	r4, r2, r8, ror r8
   1ffc8:	andeq	r4, r2, r8, lsr #16
   1ffcc:	cmp	r0, #0
   1ffd0:	bxeq	lr
   1ffd4:	b	1fed0 <__assert_fail@plt+0xd6d0>
   1ffd8:	push	{r4, r5, r6, r7, r8, lr}
   1ffdc:	sub	sp, sp, #32
   1ffe0:	ldr	r8, [pc, #336]	; 20138 <__assert_fail@plt+0xd938>
   1ffe4:	ldr	r7, [pc, #336]	; 2013c <__assert_fail@plt+0xd93c>
   1ffe8:	mov	r5, r0
   1ffec:	ldr	r3, [r8]
   1fff0:	ldr	r2, [r7]
   1fff4:	cmp	r3, #0
   1fff8:	str	r2, [sp, #28]
   1fffc:	bne	20010 <__assert_fail@plt+0xd810>
   20000:	b	20044 <__assert_fail@plt+0xd844>
   20004:	ldr	r3, [r3]
   20008:	cmp	r3, #0
   2000c:	beq	20044 <__assert_fail@plt+0xd844>
   20010:	ldr	r2, [r3, #4]
   20014:	cmp	r5, r2
   20018:	bne	20004 <__assert_fail@plt+0xd804>
   2001c:	ldr	r4, [r3, #8]
   20020:	cmp	r4, #0
   20024:	beq	2004c <__assert_fail@plt+0xd84c>
   20028:	ldr	r2, [sp, #28]
   2002c:	ldr	r3, [r7]
   20030:	mov	r0, r4
   20034:	cmp	r2, r3
   20038:	bne	2011c <__assert_fail@plt+0xd91c>
   2003c:	add	sp, sp, #32
   20040:	pop	{r4, r5, r6, r7, r8, pc}
   20044:	cmp	r5, #0
   20048:	beq	20114 <__assert_fail@plt+0xd914>
   2004c:	add	r2, sp, #8
   20050:	add	r1, sp, #4
   20054:	mov	r0, r5
   20058:	bl	1fed0 <__assert_fail@plt+0xd6d0>
   2005c:	subs	r6, r0, #0
   20060:	beq	20114 <__assert_fail@plt+0xd914>
   20064:	mov	r0, r5
   20068:	bl	124b8 <strlen@plt>
   2006c:	mov	r4, r5
   20070:	add	r1, r0, #100	; 0x64
   20074:	add	r0, sp, #12
   20078:	bl	20f5c <__assert_fail@plt+0xe75c>
   2007c:	b	20098 <__assert_fail@plt+0xd898>
   20080:	add	r2, sp, #8
   20084:	add	r1, sp, #4
   20088:	mov	r0, r4
   2008c:	bl	1fed0 <__assert_fail@plt+0xd6d0>
   20090:	subs	r6, r0, #0
   20094:	beq	200c4 <__assert_fail@plt+0xd8c4>
   20098:	ldr	r2, [sp, #4]
   2009c:	mov	r1, r4
   200a0:	sub	r2, r2, r4
   200a4:	add	r0, sp, #12
   200a8:	bl	2100c <__assert_fail@plt+0xe80c>
   200ac:	mov	r1, r6
   200b0:	add	r0, sp, #12
   200b4:	bl	210d4 <__assert_fail@plt+0xe8d4>
   200b8:	ldr	r4, [sp, #8]
   200bc:	adds	r4, r4, #1
   200c0:	bne	20080 <__assert_fail@plt+0xd880>
   200c4:	mov	r1, r4
   200c8:	add	r0, sp, #12
   200cc:	bl	210d4 <__assert_fail@plt+0xe8d4>
   200d0:	mov	r2, #1
   200d4:	ldr	r1, [pc, #100]	; 20140 <__assert_fail@plt+0xd940>
   200d8:	add	r0, sp, #12
   200dc:	bl	2100c <__assert_fail@plt+0xe80c>
   200e0:	add	r0, sp, #12
   200e4:	mov	r1, #0
   200e8:	bl	211d4 <__assert_fail@plt+0xe9d4>
   200ec:	subs	r4, r0, #0
   200f0:	beq	20120 <__assert_fail@plt+0xd920>
   200f4:	mov	r0, #12
   200f8:	bl	12098 <gcry_xmalloc@plt>
   200fc:	ldr	r3, [r8]
   20100:	str	r5, [r0, #4]
   20104:	str	r4, [r0, #8]
   20108:	str	r3, [r0]
   2010c:	str	r0, [r8]
   20110:	b	20028 <__assert_fail@plt+0xd828>
   20114:	mov	r4, r5
   20118:	b	20028 <__assert_fail@plt+0xd828>
   2011c:	bl	12260 <__stack_chk_fail@plt>
   20120:	bl	12518 <__errno_location@plt>
   20124:	ldr	r0, [r0]
   20128:	bl	123ec <strerror@plt>
   2012c:	mov	r1, r0
   20130:	ldr	r0, [pc, #12]	; 20144 <__assert_fail@plt+0xd944>
   20134:	bl	19650 <__assert_fail@plt+0x6e50>
   20138:	andeq	r6, r3, r4, ror #5
   2013c:	andeq	r5, r3, r8, asr #22
   20140:	andeq	r2, r2, ip, lsl #18
   20144:	andeq	r4, r2, r0, lsl #17
   20148:	push	{r4, r5, r6, r7, r8, lr}
   2014c:	mov	r7, r0
   20150:	mov	r8, r1
   20154:	mov	r6, r2
   20158:	bl	12518 <__errno_location@plt>
   2015c:	ldr	r3, [r0]
   20160:	cmp	r3, #22
   20164:	beq	201d0 <__assert_fail@plt+0xd9d0>
   20168:	ldr	r4, [pc, #200]	; 20238 <__assert_fail@plt+0xda38>
   2016c:	mov	r5, r0
   20170:	ldr	r0, [r4, #8]
   20174:	cmp	r0, #0
   20178:	beq	201a8 <__assert_fail@plt+0xd9a8>
   2017c:	mov	r3, #1
   20180:	str	r3, [r4, #8]
   20184:	cmp	r6, #0
   20188:	popeq	{r4, r5, r6, r7, r8, pc}
   2018c:	ldr	r2, [pc, #168]	; 2023c <__assert_fail@plt+0xda3c>
   20190:	ldr	r1, [pc, #168]	; 20240 <__assert_fail@plt+0xda40>
   20194:	mov	r3, #0
   20198:	str	r1, [r2]
   2019c:	str	r3, [r4, #12]
   201a0:	str	r3, [r4, #16]
   201a4:	pop	{r4, r5, r6, r7, r8, pc}
   201a8:	mov	r2, #5
   201ac:	ldr	r1, [pc, #144]	; 20244 <__assert_fail@plt+0xda44>
   201b0:	bl	12254 <dcgettext@plt>
   201b4:	mov	r7, r0
   201b8:	ldr	r0, [r5]
   201bc:	bl	123ec <strerror@plt>
   201c0:	mov	r1, r0
   201c4:	mov	r0, r7
   201c8:	bl	19568 <__assert_fail@plt+0x6d68>
   201cc:	b	2017c <__assert_fail@plt+0xd97c>
   201d0:	cmp	r7, #0
   201d4:	ldr	r4, [pc, #92]	; 20238 <__assert_fail@plt+0xda38>
   201d8:	beq	201f0 <__assert_fail@plt+0xd9f0>
   201dc:	ldr	r1, [pc, #92]	; 20240 <__assert_fail@plt+0xda40>
   201e0:	mov	r0, r7
   201e4:	bl	12104 <strcmp@plt>
   201e8:	cmp	r0, #0
   201ec:	beq	20228 <__assert_fail@plt+0xda28>
   201f0:	mov	r3, #1
   201f4:	ldr	r0, [r4, #4]
   201f8:	str	r3, [r4, #4]
   201fc:	cmp	r0, #0
   20200:	bne	20184 <__assert_fail@plt+0xd984>
   20204:	mov	r2, #5
   20208:	ldr	r1, [pc, #56]	; 20248 <__assert_fail@plt+0xda48>
   2020c:	bl	12254 <dcgettext@plt>
   20210:	mov	r2, r7
   20214:	mov	r1, r8
   20218:	bl	19568 <__assert_fail@plt+0x6d68>
   2021c:	cmp	r6, #0
   20220:	popeq	{r4, r5, r6, r7, r8, pc}
   20224:	b	2018c <__assert_fail@plt+0xd98c>
   20228:	mov	r3, #1
   2022c:	ldr	r0, [r4]
   20230:	str	r3, [r4]
   20234:	b	201fc <__assert_fail@plt+0xd9fc>
   20238:	andeq	r6, r3, r8, ror #5
   2023c:	andeq	r6, r3, ip, asr #2
   20240:	andeq	r2, r2, r0, lsr #17
   20244:	andeq	r4, r2, r4, lsl #19
   20248:	andeq	r4, r2, r8, asr r9
   2024c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20250:	sub	sp, sp, #76	; 0x4c
   20254:	mov	r7, #0
   20258:	str	r3, [sp, #36]	; 0x24
   2025c:	ldr	r3, [pc, #1932]	; 209f0 <__assert_fail@plt+0xe1f0>
   20260:	str	r1, [sp, #28]
   20264:	add	r1, r0, r1
   20268:	ldr	r3, [r3]
   2026c:	str	r0, [sp, #32]
   20270:	str	r3, [sp, #68]	; 0x44
   20274:	ldr	r3, [sp, #28]
   20278:	ldr	sl, [pc, #1908]	; 209f4 <__assert_fail@plt+0xe1f4>
   2027c:	cmp	r3, #0
   20280:	str	r2, [sp, #24]
   20284:	sub	fp, r1, #1
   20288:	str	r7, [sp, #16]
   2028c:	str	r7, [sp, #20]
   20290:	beq	2039c <__assert_fail@plt+0xdb9c>
   20294:	ldr	r3, [sp, #32]
   20298:	mov	r9, #0
   2029c:	mov	r5, r9
   202a0:	mov	r8, r9
   202a4:	sub	r6, r3, #1
   202a8:	ldr	r4, [sp, #20]
   202ac:	b	2030c <__assert_fail@plt+0xdb0c>
   202b0:	tst	r3, #128	; 0x80
   202b4:	bne	20434 <__assert_fail@plt+0xdc34>
   202b8:	ldr	r1, [sp, #24]
   202bc:	cmn	r1, #1
   202c0:	beq	202f4 <__assert_fail@plt+0xdaf4>
   202c4:	cmp	r3, #127	; 0x7f
   202c8:	cmpne	r3, #31
   202cc:	bls	204cc <__assert_fail@plt+0xdccc>
   202d0:	cmp	r3, r1
   202d4:	beq	204cc <__assert_fail@plt+0xdccc>
   202d8:	cmp	r1, #0
   202dc:	sub	r2, r3, #92	; 0x5c
   202e0:	clz	r2, r2
   202e4:	lsr	r2, r2, #5
   202e8:	moveq	r2, #0
   202ec:	cmp	r2, #0
   202f0:	bne	205dc <__assert_fail@plt+0xdddc>
   202f4:	add	r9, r9, #1
   202f8:	mov	r7, #0
   202fc:	cmp	r4, #0
   20300:	strbne	r3, [r4], #1
   20304:	cmp	fp, r6
   20308:	beq	20378 <__assert_fail@plt+0xdb78>
   2030c:	cmp	r7, #0
   20310:	ldrb	r3, [r6, #1]!
   20314:	beq	20338 <__assert_fail@plt+0xdb38>
   20318:	add	r1, r3, #64	; 0x40
   2031c:	lsr	r2, r3, #7
   20320:	uxtb	r1, r1
   20324:	cmp	r1, #61	; 0x3d
   20328:	movls	r2, #0
   2032c:	andhi	r2, r2, #1
   20330:	cmp	r2, #0
   20334:	bne	204a0 <__assert_fail@plt+0xdca0>
   20338:	cmp	r8, #0
   2033c:	beq	202b0 <__assert_fail@plt+0xdab0>
   20340:	eor	r2, r3, #128	; 0x80
   20344:	cmp	r2, #63	; 0x3f
   20348:	add	r2, r5, #1
   2034c:	str	r2, [sp, #12]
   20350:	bls	203e4 <__assert_fail@plt+0xdbe4>
   20354:	cmp	r4, #0
   20358:	bne	2062c <__assert_fail@plt+0xde2c>
   2035c:	ldr	r3, [sp, #12]
   20360:	mov	r5, #0
   20364:	cmp	fp, r6
   20368:	add	r9, r9, r3, lsl #2
   2036c:	mov	r8, r5
   20370:	mov	r7, #1
   20374:	bne	2030c <__assert_fail@plt+0xdb0c>
   20378:	ldr	r3, [sp, #20]
   2037c:	cmp	r3, #0
   20380:	bne	203b0 <__assert_fail@plt+0xdbb0>
   20384:	add	r0, r9, #1
   20388:	bl	12098 <gcry_xmalloc@plt>
   2038c:	ldr	r3, [sp, #28]
   20390:	cmp	r3, #0
   20394:	str	r0, [sp, #20]
   20398:	bne	20294 <__assert_fail@plt+0xda94>
   2039c:	ldr	r3, [sp, #20]
   203a0:	ldr	r4, [sp, #20]
   203a4:	cmp	r3, #0
   203a8:	ldr	r9, [sp, #28]
   203ac:	beq	20384 <__assert_fail@plt+0xdb84>
   203b0:	ldr	r3, [sp, #36]	; 0x24
   203b4:	cmp	r3, #0
   203b8:	bne	20848 <__assert_fail@plt+0xe048>
   203bc:	ldr	r3, [sp, #36]	; 0x24
   203c0:	strb	r3, [r4]
   203c4:	ldr	r3, [pc, #1572]	; 209f0 <__assert_fail@plt+0xe1f0>
   203c8:	ldr	r2, [sp, #68]	; 0x44
   203cc:	ldr	r0, [sp, #20]
   203d0:	ldr	r3, [r3]
   203d4:	cmp	r2, r3
   203d8:	bne	209dc <__assert_fail@plt+0xe1dc>
   203dc:	add	sp, sp, #76	; 0x4c
   203e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203e4:	add	r2, sp, #72	; 0x48
   203e8:	add	r2, r2, r5
   203ec:	and	r1, r3, #63	; 0x3f
   203f0:	strb	r3, [r2, #-12]
   203f4:	ldr	r3, [sp, #16]
   203f8:	subs	r8, r8, #1
   203fc:	orr	r3, r1, r3, lsl #6
   20400:	str	r3, [sp, #16]
   20404:	bne	20620 <__assert_fail@plt+0xde20>
   20408:	ldr	r3, [pc, #1512]	; 209f8 <__assert_fail@plt+0xe1f8>
   2040c:	ldr	r7, [r3, #12]
   20410:	cmp	r7, #0
   20414:	beq	206a4 <__assert_fail@plt+0xdea4>
   20418:	cmp	r4, #0
   2041c:	bne	20784 <__assert_fail@plt+0xdf84>
   20420:	ldr	r3, [sp, #12]
   20424:	mov	r7, #0
   20428:	add	r9, r9, r3
   2042c:	mov	r5, r7
   20430:	b	20304 <__assert_fail@plt+0xdb04>
   20434:	and	r2, r3, #224	; 0xe0
   20438:	cmp	r2, #192	; 0xc0
   2043c:	beq	20688 <__assert_fail@plt+0xde88>
   20440:	and	r2, r3, #240	; 0xf0
   20444:	cmp	r2, #224	; 0xe0
   20448:	beq	206cc <__assert_fail@plt+0xdecc>
   2044c:	and	r2, r3, #248	; 0xf8
   20450:	cmp	r2, #240	; 0xf0
   20454:	beq	20768 <__assert_fail@plt+0xdf68>
   20458:	and	r2, r3, #252	; 0xfc
   2045c:	cmp	r2, #248	; 0xf8
   20460:	beq	207ac <__assert_fail@plt+0xdfac>
   20464:	and	r2, r3, #254	; 0xfe
   20468:	cmp	r2, #252	; 0xfc
   2046c:	beq	20814 <__assert_fail@plt+0xe014>
   20470:	cmp	r4, #0
   20474:	beq	20494 <__assert_fail@plt+0xdc94>
   20478:	str	r3, [sp]
   2047c:	mov	r0, r4
   20480:	mov	r3, sl
   20484:	mvn	r2, #0
   20488:	mov	r1, #1
   2048c:	bl	1253c <__sprintf_chk@plt>
   20490:	add	r4, r4, #4
   20494:	add	r9, r9, #4
   20498:	mov	r7, #1
   2049c:	b	20304 <__assert_fail@plt+0xdb04>
   204a0:	cmp	r4, #0
   204a4:	beq	204c4 <__assert_fail@plt+0xdcc4>
   204a8:	str	r3, [sp]
   204ac:	mov	r0, r4
   204b0:	mov	r3, sl
   204b4:	mvn	r2, #0
   204b8:	mov	r1, #1
   204bc:	bl	1253c <__sprintf_chk@plt>
   204c0:	add	r4, r4, #4
   204c4:	add	r9, r9, #4
   204c8:	b	20304 <__assert_fail@plt+0xdb04>
   204cc:	cmp	r4, #0
   204d0:	beq	206e8 <__assert_fail@plt+0xdee8>
   204d4:	mov	r7, r4
   204d8:	mov	r2, #92	; 0x5c
   204dc:	strb	r2, [r7], #1
   204e0:	cmp	r3, #13
   204e4:	ldrls	pc, [pc, r3, lsl #2]
   204e8:	b	205f0 <__assert_fail@plt+0xddf0>
   204ec:	andeq	r0, r2, ip, ror r5
   204f0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   204f4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   204f8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   204fc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20500:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20504:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20508:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2050c:	andeq	r0, r2, r4, asr #10
   20510:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20514:	andeq	r0, r2, ip, asr r5
   20518:	andeq	r0, r2, r8, lsr #10
   2051c:			; <UNDEFINED> instruction: 0x000205bc
   20520:	muleq	r2, ip, r5
   20524:	mov	r7, #0
   20528:	subs	r4, r7, #0
   2052c:	add	r9, r9, #2
   20530:	movne	r3, #118	; 0x76
   20534:	strbne	r3, [r4], #1
   20538:	movne	r7, #0
   2053c:	b	20304 <__assert_fail@plt+0xdb04>
   20540:	mov	r7, #0
   20544:	subs	r4, r7, #0
   20548:	add	r9, r9, #2
   2054c:	movne	r3, #98	; 0x62
   20550:	strbne	r3, [r4], #1
   20554:	movne	r7, #0
   20558:	b	20304 <__assert_fail@plt+0xdb04>
   2055c:	cmp	r7, #0
   20560:	add	r9, r9, #2
   20564:	beq	2094c <__assert_fail@plt+0xe14c>
   20568:	mov	r3, #110	; 0x6e
   2056c:	strb	r3, [r4, #1]
   20570:	mov	r7, #0
   20574:	add	r4, r4, #2
   20578:	b	20304 <__assert_fail@plt+0xdb04>
   2057c:	cmp	r7, #0
   20580:	add	r9, r9, #2
   20584:	beq	2094c <__assert_fail@plt+0xe14c>
   20588:	mov	r3, #48	; 0x30
   2058c:	strb	r3, [r4, #1]
   20590:	mov	r7, #0
   20594:	add	r4, r4, #2
   20598:	b	20304 <__assert_fail@plt+0xdb04>
   2059c:	cmp	r7, #0
   205a0:	add	r9, r9, #2
   205a4:	beq	2094c <__assert_fail@plt+0xe14c>
   205a8:	mov	r3, #114	; 0x72
   205ac:	strb	r3, [r4, #1]
   205b0:	mov	r7, #0
   205b4:	add	r4, r4, #2
   205b8:	b	20304 <__assert_fail@plt+0xdb04>
   205bc:	cmp	r7, #0
   205c0:	add	r9, r9, #2
   205c4:	beq	2094c <__assert_fail@plt+0xe14c>
   205c8:	mov	r3, #102	; 0x66
   205cc:	strb	r3, [r4, #1]
   205d0:	mov	r7, #0
   205d4:	add	r4, r4, #2
   205d8:	b	20304 <__assert_fail@plt+0xdb04>
   205dc:	cmp	r4, #0
   205e0:	movne	r7, r4
   205e4:	movne	r3, #92	; 0x5c
   205e8:	strbne	r3, [r7], #1
   205ec:	beq	20838 <__assert_fail@plt+0xe038>
   205f0:	cmp	r7, #0
   205f4:	add	r9, r9, #4
   205f8:	beq	20840 <__assert_fail@plt+0xe040>
   205fc:	str	r3, [sp]
   20600:	mov	r0, r7
   20604:	ldr	r3, [pc, #1008]	; 209fc <__assert_fail@plt+0xe1fc>
   20608:	mvn	r2, #0
   2060c:	mov	r1, #1
   20610:	add	r4, r7, #3
   20614:	bl	1253c <__sprintf_chk@plt>
   20618:	mov	r7, #0
   2061c:	b	20304 <__assert_fail@plt+0xdb04>
   20620:	ldr	r5, [sp, #12]
   20624:	mov	r7, #0
   20628:	b	20304 <__assert_fail@plt+0xdb04>
   2062c:	cmp	r5, #0
   20630:	beq	20830 <__assert_fail@plt+0xe030>
   20634:	add	r5, r4, r5, lsl #2
   20638:	add	r7, sp, #60	; 0x3c
   2063c:	ldrb	r1, [r7], #1
   20640:	mov	r0, r4
   20644:	mov	r3, sl
   20648:	str	r1, [sp]
   2064c:	mvn	r2, #0
   20650:	mov	r1, #1
   20654:	add	r4, r4, #4
   20658:	bl	1253c <__sprintf_chk@plt>
   2065c:	cmp	r5, r4
   20660:	bne	2063c <__assert_fail@plt+0xde3c>
   20664:	ldrb	r3, [r6]
   20668:	str	r3, [sp]
   2066c:	mvn	r2, #0
   20670:	mov	r3, sl
   20674:	mov	r1, #1
   20678:	mov	r0, r5
   2067c:	bl	1253c <__sprintf_chk@plt>
   20680:	add	r4, r5, #4
   20684:	b	2035c <__assert_fail@plt+0xdb5c>
   20688:	mov	r5, #1
   2068c:	strb	r3, [sp, #60]	; 0x3c
   20690:	and	r3, r3, #31
   20694:	mov	r7, r8
   20698:	str	r3, [sp, #16]
   2069c:	mov	r8, r5
   206a0:	b	20304 <__assert_fail@plt+0xdb04>
   206a4:	ldr	r3, [sp, #36]	; 0x24
   206a8:	cmp	r3, #0
   206ac:	beq	20738 <__assert_fail@plt+0xdf38>
   206b0:	cmp	r4, #0
   206b4:	bne	207ec <__assert_fail@plt+0xdfec>
   206b8:	ldr	r3, [sp, #12]
   206bc:	mov	r5, #0
   206c0:	add	r9, r9, r3
   206c4:	mov	r8, r5
   206c8:	b	20304 <__assert_fail@plt+0xdb04>
   206cc:	strb	r3, [sp, #60]	; 0x3c
   206d0:	and	r3, r3, #15
   206d4:	mov	r7, r8
   206d8:	str	r3, [sp, #16]
   206dc:	mov	r5, #1
   206e0:	mov	r8, #2
   206e4:	b	20304 <__assert_fail@plt+0xdb04>
   206e8:	cmp	r3, #13
   206ec:	ldrls	pc, [pc, r3, lsl #2]
   206f0:	b	20838 <__assert_fail@plt+0xe038>
   206f4:	andeq	r0, r2, ip, lsr #14
   206f8:	andeq	r0, r2, r8, lsr r8
   206fc:	andeq	r0, r2, r8, lsr r8
   20700:	andeq	r0, r2, r8, lsr r8
   20704:	andeq	r0, r2, r8, lsr r8
   20708:	andeq	r0, r2, r8, lsr r8
   2070c:	andeq	r0, r2, r8, lsr r8
   20710:	andeq	r0, r2, r8, lsr r8
   20714:	andeq	r0, r2, r0, asr #10
   20718:	andeq	r0, r2, r8, lsr r8
   2071c:	andeq	r0, r2, ip, lsr #14
   20720:	andeq	r0, r2, r4, lsr #10
   20724:	andeq	r0, r2, ip, lsr #14
   20728:	andeq	r0, r2, ip, lsr #14
   2072c:	add	r9, r9, #2
   20730:	mov	r7, #0
   20734:	b	20304 <__assert_fail@plt+0xdb04>
   20738:	ldr	r2, [sp, #16]
   2073c:	sub	r3, r2, #128	; 0x80
   20740:	cmp	r3, #127	; 0x7f
   20744:	bhi	207c8 <__assert_fail@plt+0xdfc8>
   20748:	cmp	r4, #0
   2074c:	ldr	r5, [sp, #12]
   20750:	add	r9, r9, #1
   20754:	beq	20940 <__assert_fail@plt+0xe140>
   20758:	ldr	r8, [sp, #36]	; 0x24
   2075c:	strb	r2, [r4], #1
   20760:	mov	r7, r8
   20764:	b	20304 <__assert_fail@plt+0xdb04>
   20768:	strb	r3, [sp, #60]	; 0x3c
   2076c:	and	r3, r3, #7
   20770:	mov	r7, r8
   20774:	str	r3, [sp, #16]
   20778:	mov	r5, #1
   2077c:	mov	r8, #3
   20780:	b	20304 <__assert_fail@plt+0xdb04>
   20784:	add	r5, r4, r5
   20788:	add	r2, sp, #60	; 0x3c
   2078c:	sub	r3, r4, #1
   20790:	ldrb	r1, [r2], #1
   20794:	strb	r1, [r3, #1]!
   20798:	cmp	r3, r5
   2079c:	bne	20790 <__assert_fail@plt+0xdf90>
   207a0:	ldr	r3, [sp, #12]
   207a4:	add	r4, r4, r3
   207a8:	b	20420 <__assert_fail@plt+0xdc20>
   207ac:	strb	r3, [sp, #60]	; 0x3c
   207b0:	and	r3, r3, #3
   207b4:	mov	r7, r8
   207b8:	str	r3, [sp, #16]
   207bc:	mov	r5, #1
   207c0:	mov	r8, #4
   207c4:	b	20304 <__assert_fail@plt+0xdb04>
   207c8:	ldr	r3, [sp, #12]
   207cc:	cmp	r4, #0
   207d0:	lsl	r8, r3, #2
   207d4:	bne	2090c <__assert_fail@plt+0xe10c>
   207d8:	mov	r7, #0
   207dc:	add	r9, r9, r8
   207e0:	mov	r5, r7
   207e4:	mov	r8, r7
   207e8:	b	20304 <__assert_fail@plt+0xdb04>
   207ec:	add	r5, r4, r5
   207f0:	add	r2, sp, #60	; 0x3c
   207f4:	sub	r3, r4, #1
   207f8:	ldrb	r1, [r2], #1
   207fc:	strb	r1, [r3, #1]!
   20800:	cmp	r5, r3
   20804:	bne	207f8 <__assert_fail@plt+0xdff8>
   20808:	ldr	r3, [sp, #12]
   2080c:	add	r4, r4, r3
   20810:	b	206b8 <__assert_fail@plt+0xdeb8>
   20814:	strb	r3, [sp, #60]	; 0x3c
   20818:	and	r3, r3, #1
   2081c:	mov	r7, r8
   20820:	str	r3, [sp, #16]
   20824:	mov	r5, #1
   20828:	mov	r8, #5
   2082c:	b	20304 <__assert_fail@plt+0xdb04>
   20830:	mov	r5, r4
   20834:	b	20668 <__assert_fail@plt+0xde68>
   20838:	mov	r7, #0
   2083c:	add	r9, r9, #4
   20840:	mov	r4, r7
   20844:	b	20304 <__assert_fail@plt+0xdb04>
   20848:	ldr	r7, [pc, #432]	; 20a00 <__assert_fail@plt+0xe200>
   2084c:	mov	r6, #0
   20850:	strb	r6, [r4]
   20854:	ldr	r0, [r7]
   20858:	ldr	r1, [pc, #420]	; 20a04 <__assert_fail@plt+0xe204>
   2085c:	bl	123d4 <iconv_open@plt>
   20860:	cmn	r0, #1
   20864:	mov	r5, r0
   20868:	beq	209a4 <__assert_fail@plt+0xe1a4>
   2086c:	ldr	r3, [sp, #20]
   20870:	sub	r4, r4, r3
   20874:	add	r0, r4, #1
   20878:	tst	r0, #-268435456	; 0xf0000000
   2087c:	lsl	r0, r0, #4
   20880:	str	r4, [sp, #52]	; 0x34
   20884:	str	r0, [sp, #56]	; 0x38
   20888:	str	r3, [sp, #44]	; 0x2c
   2088c:	bne	209e0 <__assert_fail@plt+0xe1e0>
   20890:	bl	12098 <gcry_xmalloc@plt>
   20894:	add	r3, sp, #56	; 0x38
   20898:	str	r3, [sp]
   2089c:	add	r2, sp, #52	; 0x34
   208a0:	add	r3, sp, #48	; 0x30
   208a4:	add	r1, sp, #44	; 0x2c
   208a8:	mov	r4, r0
   208ac:	mov	r0, r5
   208b0:	str	r4, [sp, #48]	; 0x30
   208b4:	bl	120f8 <iconv@plt>
   208b8:	cmn	r0, #1
   208bc:	bne	20954 <__assert_fail@plt+0xe154>
   208c0:	ldr	r6, [pc, #304]	; 209f8 <__assert_fail@plt+0xe1f8>
   208c4:	ldr	r0, [r6, #20]
   208c8:	cmp	r0, #0
   208cc:	beq	2096c <__assert_fail@plt+0xe16c>
   208d0:	mov	r3, #1
   208d4:	ldr	r0, [sp, #20]
   208d8:	str	r3, [r6, #20]
   208dc:	bl	12218 <gcry_free@plt>
   208e0:	mov	r0, r4
   208e4:	bl	12218 <gcry_free@plt>
   208e8:	ldr	r2, [sp, #24]
   208ec:	ldr	r1, [sp, #28]
   208f0:	ldr	r0, [sp, #32]
   208f4:	mov	r3, #0
   208f8:	bl	2024c <__assert_fail@plt+0xda4c>
   208fc:	str	r0, [sp, #20]
   20900:	mov	r0, r5
   20904:	bl	120ec <iconv_close@plt>
   20908:	b	203c4 <__assert_fail@plt+0xdbc4>
   2090c:	add	r7, r4, r8
   20910:	add	r5, sp, #60	; 0x3c
   20914:	ldrb	r1, [r5], #1
   20918:	mov	r0, r4
   2091c:	mov	r3, sl
   20920:	str	r1, [sp]
   20924:	mvn	r2, #0
   20928:	mov	r1, #1
   2092c:	add	r4, r4, #4
   20930:	bl	1253c <__sprintf_chk@plt>
   20934:	cmp	r4, r7
   20938:	bne	20914 <__assert_fail@plt+0xe114>
   2093c:	b	207d8 <__assert_fail@plt+0xdfd8>
   20940:	mov	r7, r4
   20944:	mov	r8, r4
   20948:	b	20304 <__assert_fail@plt+0xdb04>
   2094c:	mov	r4, r7
   20950:	b	20304 <__assert_fail@plt+0xdb04>
   20954:	ldr	r3, [sp, #48]	; 0x30
   20958:	ldr	r0, [sp, #20]
   2095c:	str	r4, [sp, #20]
   20960:	strb	r6, [r3]
   20964:	bl	12218 <gcry_free@plt>
   20968:	b	20900 <__assert_fail@plt+0xe100>
   2096c:	mov	r2, #5
   20970:	ldr	r1, [pc, #144]	; 20a08 <__assert_fail@plt+0xe208>
   20974:	bl	12254 <dcgettext@plt>
   20978:	mov	r8, r0
   2097c:	bl	12518 <__errno_location@plt>
   20980:	ldr	r7, [r7]
   20984:	ldr	r0, [r0]
   20988:	bl	123ec <strerror@plt>
   2098c:	mov	r2, r7
   20990:	ldr	r1, [pc, #108]	; 20a04 <__assert_fail@plt+0xe204>
   20994:	mov	r3, r0
   20998:	mov	r0, r8
   2099c:	bl	19568 <__assert_fail@plt+0x6d68>
   209a0:	b	208d0 <__assert_fail@plt+0xe0d0>
   209a4:	mov	r2, #1
   209a8:	ldr	r1, [pc, #84]	; 20a04 <__assert_fail@plt+0xe204>
   209ac:	ldr	r0, [r7]
   209b0:	bl	20148 <__assert_fail@plt+0xd948>
   209b4:	ldr	r0, [sp, #20]
   209b8:	bl	12218 <gcry_free@plt>
   209bc:	ldr	r3, [pc, #52]	; 209f8 <__assert_fail@plt+0xe1f8>
   209c0:	ldr	r2, [sp, #24]
   209c4:	ldr	r1, [sp, #28]
   209c8:	ldr	r0, [sp, #32]
   209cc:	ldr	r3, [r3, #16]
   209d0:	bl	2024c <__assert_fail@plt+0xda4c>
   209d4:	str	r0, [sp, #20]
   209d8:	b	203c4 <__assert_fail@plt+0xdbc4>
   209dc:	bl	12260 <__stack_chk_fail@plt>
   209e0:	ldr	r2, [pc, #36]	; 20a0c <__assert_fail@plt+0xe20c>
   209e4:	ldr	r1, [pc, #36]	; 20a10 <__assert_fail@plt+0xe210>
   209e8:	ldr	r0, [pc, #36]	; 20a14 <__assert_fail@plt+0xe214>
   209ec:	bl	1992c <__assert_fail@plt+0x712c>
   209f0:	andeq	r5, r3, r8, asr #22
   209f4:	muleq	r2, ip, r9
   209f8:	andeq	r6, r3, r8, ror #5
   209fc:	andeq	r3, r2, ip, ror #16
   20a00:	andeq	r6, r3, ip, asr #2
   20a04:	andeq	r2, r2, r0, lsr #17
   20a08:			; <UNDEFINED> instruction: 0x000249bc
   20a0c:	andeq	r4, r2, r4, asr #18
   20a10:	andeq	r0, r0, r3, lsl #5
   20a14:	andeq	r4, r2, r4, lsr #19
   20a18:	push	{r4, r5, r6, lr}
   20a1c:	subs	r5, r0, #0
   20a20:	beq	20b24 <__assert_fail@plt+0xe324>
   20a24:	mov	r0, r5
   20a28:	bl	124b8 <strlen@plt>
   20a2c:	cmp	r0, #3
   20a30:	bhi	20a64 <__assert_fail@plt+0xe264>
   20a34:	ldrb	r3, [r5]
   20a38:	mov	r4, r5
   20a3c:	cmp	r3, #0
   20a40:	bne	20a9c <__assert_fail@plt+0xe29c>
   20a44:	ldr	r3, [pc, #392]	; 20bd4 <__assert_fail@plt+0xe3d4>
   20a48:	ldr	r2, [pc, #392]	; 20bd8 <__assert_fail@plt+0xe3d8>
   20a4c:	ldr	r1, [pc, #392]	; 20bdc <__assert_fail@plt+0xe3dc>
   20a50:	mov	r0, #0
   20a54:	str	r1, [r2]
   20a58:	str	r0, [r3, #12]
   20a5c:	str	r0, [r3, #16]
   20a60:	pop	{r4, r5, r6, pc}
   20a64:	mov	r2, #3
   20a68:	ldr	r1, [pc, #368]	; 20be0 <__assert_fail@plt+0xe3e0>
   20a6c:	mov	r0, r5
   20a70:	bl	15634 <__assert_fail@plt+0x2e34>
   20a74:	cmp	r0, #0
   20a78:	bne	20a34 <__assert_fail@plt+0xe234>
   20a7c:	ldrb	r3, [r5, #3]
   20a80:	cmp	r3, #95	; 0x5f
   20a84:	cmpne	r3, #45	; 0x2d
   20a88:	addne	r4, r5, #3
   20a8c:	ldrbeq	r3, [r5, #4]
   20a90:	addeq	r4, r5, #4
   20a94:	cmp	r3, #0
   20a98:	beq	20a44 <__assert_fail@plt+0xe244>
   20a9c:	ldr	r1, [pc, #320]	; 20be4 <__assert_fail@plt+0xe3e4>
   20aa0:	mov	r0, r4
   20aa4:	bl	154f4 <__assert_fail@plt+0x2cf4>
   20aa8:	cmp	r0, #0
   20aac:	beq	20a44 <__assert_fail@plt+0xe244>
   20ab0:	ldr	r1, [pc, #304]	; 20be8 <__assert_fail@plt+0xe3e8>
   20ab4:	mov	r0, r4
   20ab8:	bl	154f4 <__assert_fail@plt+0x2cf4>
   20abc:	cmp	r0, #0
   20ac0:	beq	20a44 <__assert_fail@plt+0xe244>
   20ac4:	ldr	r1, [pc, #288]	; 20bec <__assert_fail@plt+0xe3ec>
   20ac8:	mov	r0, r4
   20acc:	bl	154f4 <__assert_fail@plt+0x2cf4>
   20ad0:	cmp	r0, #0
   20ad4:	beq	20a44 <__assert_fail@plt+0xe244>
   20ad8:	ldr	r1, [pc, #272]	; 20bf0 <__assert_fail@plt+0xe3f0>
   20adc:	mov	r0, r4
   20ae0:	bl	154f4 <__assert_fail@plt+0x2cf4>
   20ae4:	cmp	r0, #0
   20ae8:	beq	20a44 <__assert_fail@plt+0xe244>
   20aec:	ldr	r1, [pc, #256]	; 20bf4 <__assert_fail@plt+0xe3f4>
   20af0:	mov	r0, r4
   20af4:	bl	154f4 <__assert_fail@plt+0x2cf4>
   20af8:	ldr	r6, [pc, #248]	; 20bf8 <__assert_fail@plt+0xe3f8>
   20afc:	cmp	r0, #0
   20b00:	bne	20b34 <__assert_fail@plt+0xe334>
   20b04:	ldr	r3, [pc, #200]	; 20bd4 <__assert_fail@plt+0xe3d4>
   20b08:	ldr	r1, [pc, #200]	; 20bd8 <__assert_fail@plt+0xe3d8>
   20b0c:	mov	r2, #1
   20b10:	mov	r0, #0
   20b14:	str	r6, [r1]
   20b18:	str	r2, [r3, #12]
   20b1c:	str	r0, [r3, #16]
   20b20:	pop	{r4, r5, r6, pc}
   20b24:	mov	r0, #14
   20b28:	bl	12680 <nl_langinfo@plt>
   20b2c:	mov	r5, r0
   20b30:	b	20a24 <__assert_fail@plt+0xe224>
   20b34:	mov	r0, r4
   20b38:	mov	r1, r6
   20b3c:	bl	154f4 <__assert_fail@plt+0x2cf4>
   20b40:	cmp	r0, #0
   20b44:	beq	20b04 <__assert_fail@plt+0xe304>
   20b48:	mov	r1, r6
   20b4c:	mov	r0, r5
   20b50:	bl	123d4 <iconv_open@plt>
   20b54:	cmn	r0, #1
   20b58:	mov	r4, r0
   20b5c:	beq	20ba4 <__assert_fail@plt+0xe3a4>
   20b60:	bl	120ec <iconv_close@plt>
   20b64:	mov	r1, r5
   20b68:	mov	r0, r6
   20b6c:	bl	123d4 <iconv_open@plt>
   20b70:	cmn	r0, #1
   20b74:	mov	r4, r0
   20b78:	beq	20bbc <__assert_fail@plt+0xe3bc>
   20b7c:	bl	120ec <iconv_close@plt>
   20b80:	ldr	r3, [pc, #76]	; 20bd4 <__assert_fail@plt+0xe3d4>
   20b84:	ldr	ip, [pc, #76]	; 20bd8 <__assert_fail@plt+0xe3d8>
   20b88:	mov	r2, #0
   20b8c:	mov	r1, #1
   20b90:	mov	r0, r2
   20b94:	str	r5, [ip]
   20b98:	str	r1, [r3, #16]
   20b9c:	str	r2, [r3, #12]
   20ba0:	pop	{r4, r5, r6, pc}
   20ba4:	mov	r0, r5
   20ba8:	mov	r1, r6
   20bac:	mov	r2, #0
   20bb0:	bl	20148 <__assert_fail@plt+0xd948>
   20bb4:	mov	r0, r4
   20bb8:	pop	{r4, r5, r6, pc}
   20bbc:	mov	r0, r6
   20bc0:	mov	r1, r5
   20bc4:	mov	r2, #0
   20bc8:	bl	20148 <__assert_fail@plt+0xd948>
   20bcc:	mov	r0, r4
   20bd0:	pop	{r4, r5, r6, pc}
   20bd4:	andeq	r6, r3, r8, ror #5
   20bd8:	andeq	r6, r3, ip, asr #2
   20bdc:	andeq	r4, r2, ip, ror #19
   20be0:	andeq	r4, r2, r8, ror #19
   20be4:	strdeq	r4, [r2], -r0
   20be8:	strdeq	r4, [r2], -r8
   20bec:	strdeq	r4, [r2], -ip
   20bf0:	andeq	r4, r2, r4, lsl #20
   20bf4:	andeq	r4, r2, r4, lsl sl
   20bf8:	andeq	r2, r2, r0, lsr #17
   20bfc:	ldr	r3, [pc, #4]	; 20c08 <__assert_fail@plt+0xe408>
   20c00:	ldr	r0, [r3]
   20c04:	bx	lr
   20c08:	andeq	r6, r3, ip, asr #2
   20c0c:	ldr	r3, [pc, #4]	; 20c18 <__assert_fail@plt+0xe418>
   20c10:	ldr	r0, [r3, #12]
   20c14:	bx	lr
   20c18:	andeq	r6, r3, r8, ror #5
   20c1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20c20:	sub	sp, sp, #32
   20c24:	ldr	r8, [pc, #520]	; 20e34 <__assert_fail@plt+0xe634>
   20c28:	ldr	r5, [pc, #520]	; 20e38 <__assert_fail@plt+0xe638>
   20c2c:	ldr	r7, [r8, #12]
   20c30:	ldr	r3, [r5]
   20c34:	cmp	r7, #0
   20c38:	str	r3, [sp, #28]
   20c3c:	bne	20da0 <__assert_fail@plt+0xe5a0>
   20c40:	mov	r4, r0
   20c44:	ldr	r0, [r8, #16]
   20c48:	cmp	r0, #0
   20c4c:	bne	20cf4 <__assert_fail@plt+0xe4f4>
   20c50:	ldrb	r3, [r4]
   20c54:	cmp	r3, #0
   20c58:	beq	20e28 <__assert_fail@plt+0xe628>
   20c5c:	mov	r2, r4
   20c60:	tst	r3, #128	; 0x80
   20c64:	ldrb	r3, [r2, #1]!
   20c68:	addeq	r0, r0, #1
   20c6c:	addne	r0, r0, #2
   20c70:	cmp	r3, #0
   20c74:	bne	20c60 <__assert_fail@plt+0xe460>
   20c78:	add	r0, r0, #1
   20c7c:	bl	12098 <gcry_xmalloc@plt>
   20c80:	ldrb	r3, [r4]
   20c84:	cmp	r3, #0
   20c88:	mov	r6, r0
   20c8c:	mov	r2, r0
   20c90:	beq	20cd0 <__assert_fail@plt+0xe4d0>
   20c94:	mvn	lr, #63	; 0x3f
   20c98:	mvn	ip, #127	; 0x7f
   20c9c:	sxtb	r1, r3
   20ca0:	cmp	r1, #0
   20ca4:	movlt	r0, r2
   20ca8:	orrlt	r3, lr, r3, lsr #6
   20cac:	strblt	r3, [r0], #2
   20cb0:	strbge	r3, [r2], #1
   20cb4:	ldrb	r3, [r4, #1]!
   20cb8:	andlt	r1, r1, #63	; 0x3f
   20cbc:	orrlt	r1, ip, r1
   20cc0:	strblt	r1, [r2, #1]
   20cc4:	movlt	r2, r0
   20cc8:	cmp	r3, #0
   20ccc:	bne	20c9c <__assert_fail@plt+0xe49c>
   20cd0:	mov	r3, #0
   20cd4:	strb	r3, [r2]
   20cd8:	ldr	r2, [sp, #28]
   20cdc:	ldr	r3, [r5]
   20ce0:	mov	r0, r6
   20ce4:	cmp	r2, r3
   20ce8:	bne	20e30 <__assert_fail@plt+0xe630>
   20cec:	add	sp, sp, #32
   20cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20cf4:	ldr	sl, [pc, #320]	; 20e3c <__assert_fail@plt+0xe63c>
   20cf8:	ldr	r0, [pc, #320]	; 20e40 <__assert_fail@plt+0xe640>
   20cfc:	ldr	r1, [sl]
   20d00:	bl	123d4 <iconv_open@plt>
   20d04:	cmn	r0, #1
   20d08:	mov	r9, r0
   20d0c:	beq	20e08 <__assert_fail@plt+0xe608>
   20d10:	ldrb	r3, [r4]
   20d14:	cmp	r3, #0
   20d18:	moveq	r7, r3
   20d1c:	moveq	r0, #1
   20d20:	beq	20d44 <__assert_fail@plt+0xe544>
   20d24:	mov	r2, r4
   20d28:	tst	r3, #128	; 0x80
   20d2c:	ldrb	r3, [r2, #1]!
   20d30:	addeq	r7, r7, #1
   20d34:	addne	r7, r7, #6
   20d38:	cmp	r3, #0
   20d3c:	bne	20d28 <__assert_fail@plt+0xe528>
   20d40:	add	r0, r7, #1
   20d44:	bl	12098 <gcry_xmalloc@plt>
   20d48:	str	r4, [sp, #12]
   20d4c:	mov	r6, r0
   20d50:	mov	r0, r4
   20d54:	bl	124b8 <strlen@plt>
   20d58:	add	r3, sp, #24
   20d5c:	str	r3, [sp]
   20d60:	add	r2, sp, #20
   20d64:	add	r3, sp, #16
   20d68:	add	r1, sp, #12
   20d6c:	str	r6, [sp, #16]
   20d70:	str	r7, [sp, #24]
   20d74:	str	r0, [sp, #20]
   20d78:	mov	r0, r9
   20d7c:	bl	120f8 <iconv@plt>
   20d80:	cmn	r0, #1
   20d84:	beq	20dac <__assert_fail@plt+0xe5ac>
   20d88:	ldr	r3, [sp, #16]
   20d8c:	mov	r2, #0
   20d90:	strb	r2, [r3]
   20d94:	mov	r0, r9
   20d98:	bl	120ec <iconv_close@plt>
   20d9c:	b	20cd8 <__assert_fail@plt+0xe4d8>
   20da0:	bl	125c0 <gcry_xstrdup@plt>
   20da4:	mov	r6, r0
   20da8:	b	20cd8 <__assert_fail@plt+0xe4d8>
   20dac:	ldr	r0, [r8, #24]
   20db0:	cmp	r0, #0
   20db4:	beq	20dd0 <__assert_fail@plt+0xe5d0>
   20db8:	mov	r3, #1
   20dbc:	mov	r1, r4
   20dc0:	mov	r0, r6
   20dc4:	str	r3, [r8, #24]
   20dc8:	bl	12344 <strcpy@plt>
   20dcc:	b	20d94 <__assert_fail@plt+0xe594>
   20dd0:	mov	r2, #5
   20dd4:	ldr	r1, [pc, #104]	; 20e44 <__assert_fail@plt+0xe644>
   20dd8:	bl	12254 <dcgettext@plt>
   20ddc:	mov	r7, r0
   20de0:	bl	12518 <__errno_location@plt>
   20de4:	ldr	sl, [sl]
   20de8:	ldr	r0, [r0]
   20dec:	bl	123ec <strerror@plt>
   20df0:	mov	r1, sl
   20df4:	ldr	r2, [pc, #68]	; 20e40 <__assert_fail@plt+0xe640>
   20df8:	mov	r3, r0
   20dfc:	mov	r0, r7
   20e00:	bl	19568 <__assert_fail@plt+0x6d68>
   20e04:	b	20db8 <__assert_fail@plt+0xe5b8>
   20e08:	ldr	r1, [sl]
   20e0c:	mov	r2, #1
   20e10:	ldr	r0, [pc, #40]	; 20e40 <__assert_fail@plt+0xe640>
   20e14:	bl	20148 <__assert_fail@plt+0xd948>
   20e18:	mov	r0, r4
   20e1c:	bl	20c1c <__assert_fail@plt+0xe41c>
   20e20:	mov	r6, r0
   20e24:	b	20cd8 <__assert_fail@plt+0xe4d8>
   20e28:	mov	r0, #1
   20e2c:	b	20c7c <__assert_fail@plt+0xe47c>
   20e30:	bl	12260 <__stack_chk_fail@plt>
   20e34:	andeq	r6, r3, r8, ror #5
   20e38:	andeq	r5, r3, r8, asr #22
   20e3c:	andeq	r6, r3, ip, asr #2
   20e40:	andeq	r2, r2, r0, lsr #17
   20e44:			; <UNDEFINED> instruction: 0x000249bc
   20e48:	ldr	r3, [pc, #4]	; 20e54 <__assert_fail@plt+0xe654>
   20e4c:	ldr	r3, [r3, #16]
   20e50:	b	2024c <__assert_fail@plt+0xda4c>
   20e54:	andeq	r6, r3, r8, ror #5
   20e58:	b	123d4 <iconv_open@plt>
   20e5c:	b	120f8 <iconv@plt>
   20e60:	b	120ec <iconv_close@plt>
   20e64:	mvn	r2, #0
   20e68:	b	1265c <__explicit_bzero_chk@plt>
   20e6c:	push	{r4, r5, r6, lr}
   20e70:	sub	sp, sp, #216	; 0xd8
   20e74:	ldr	r4, [pc, #160]	; 20f1c <__assert_fail@plt+0xe71c>
   20e78:	mov	r5, r0
   20e7c:	mov	r6, r1
   20e80:	ldr	r3, [r4]
   20e84:	str	r3, [sp, #212]	; 0xd4
   20e88:	bl	15348 <__assert_fail@plt+0x2b48>
   20e8c:	cmp	r0, #0
   20e90:	moveq	r0, #1
   20e94:	bne	20eb0 <__assert_fail@plt+0xe6b0>
   20e98:	ldr	r2, [sp, #212]	; 0xd4
   20e9c:	ldr	r3, [r4]
   20ea0:	cmp	r2, r3
   20ea4:	bne	20f18 <__assert_fail@plt+0xe718>
   20ea8:	add	sp, sp, #216	; 0xd8
   20eac:	pop	{r4, r5, r6, pc}
   20eb0:	mov	r1, r5
   20eb4:	mov	r2, sp
   20eb8:	mov	r0, #3
   20ebc:	bl	12764 <__xstat64@plt>
   20ec0:	cmp	r0, #0
   20ec4:	beq	20ed0 <__assert_fail@plt+0xe6d0>
   20ec8:	mov	r0, #0
   20ecc:	b	20e98 <__assert_fail@plt+0xe698>
   20ed0:	mov	r1, r6
   20ed4:	add	r2, sp, #104	; 0x68
   20ed8:	mov	r0, #3
   20edc:	bl	12764 <__xstat64@plt>
   20ee0:	cmp	r0, #0
   20ee4:	bne	20ec8 <__assert_fail@plt+0xe6c8>
   20ee8:	ldrd	r0, [sp]
   20eec:	ldrd	r2, [sp, #104]	; 0x68
   20ef0:	cmp	r1, r3
   20ef4:	cmpeq	r0, r2
   20ef8:	bne	20ec8 <__assert_fail@plt+0xe6c8>
   20efc:	ldrd	r0, [sp, #96]	; 0x60
   20f00:	ldrd	r2, [sp, #200]	; 0xc8
   20f04:	cmp	r1, r3
   20f08:	cmpeq	r0, r2
   20f0c:	moveq	r0, #1
   20f10:	movne	r0, #0
   20f14:	b	20e98 <__assert_fail@plt+0xe698>
   20f18:	bl	12260 <__stack_chk_fail@plt>
   20f1c:	andeq	r5, r3, r8, asr #22
   20f20:	push	{r4, lr}
   20f24:	mov	r4, r0
   20f28:	ldr	r0, [r0, #8]
   20f2c:	cmp	r0, #0
   20f30:	beq	20f4c <__assert_fail@plt+0xe74c>
   20f34:	ldr	r1, [r4]
   20f38:	bl	20e64 <__assert_fail@plt+0xe664>
   20f3c:	ldr	r0, [r4, #8]
   20f40:	bl	12218 <gcry_free@plt>
   20f44:	mov	r3, #0
   20f48:	str	r3, [r4, #8]
   20f4c:	ldr	r0, [r4, #12]
   20f50:	bl	1268c <gpg_err_set_errno@plt>
   20f54:	mov	r0, #0
   20f58:	pop	{r4, pc}
   20f5c:	push	{r4, lr}
   20f60:	mov	r4, r0
   20f64:	mov	r3, #0
   20f68:	str	r1, [r0, #4]
   20f6c:	mov	r0, r1
   20f70:	str	r3, [r4]
   20f74:	str	r3, [r4, #12]
   20f78:	bl	120bc <gcry_malloc@plt>
   20f7c:	cmp	r0, #0
   20f80:	str	r0, [r4, #8]
   20f84:	popne	{r4, pc}
   20f88:	bl	12518 <__errno_location@plt>
   20f8c:	ldr	r3, [r0]
   20f90:	str	r3, [r4, #12]
   20f94:	pop	{r4, pc}
   20f98:	push	{r4, lr}
   20f9c:	mov	r4, r0
   20fa0:	mov	r3, #0
   20fa4:	str	r1, [r0, #4]
   20fa8:	mov	r0, r1
   20fac:	str	r3, [r4]
   20fb0:	str	r3, [r4, #12]
   20fb4:	bl	123b0 <gcry_malloc_secure@plt>
   20fb8:	cmp	r0, #0
   20fbc:	str	r0, [r4, #8]
   20fc0:	popne	{r4, pc}
   20fc4:	bl	12518 <__errno_location@plt>
   20fc8:	ldr	r3, [r0]
   20fcc:	str	r3, [r4, #12]
   20fd0:	pop	{r4, pc}
   20fd4:	ldr	r3, [r0, #12]
   20fd8:	cmp	r3, #0
   20fdc:	bxne	lr
   20fe0:	ldr	r2, [r0]
   20fe4:	cmp	r2, r1
   20fe8:	bhi	20ff4 <__assert_fail@plt+0xe7f4>
   20fec:	str	r3, [r0]
   20ff0:	bx	lr
   20ff4:	ldr	r3, [r0, #8]
   20ff8:	sub	r2, r2, r1
   20ffc:	str	r2, [r0]
   21000:	add	r1, r3, r1
   21004:	mov	r0, r3
   21008:	b	1217c <memmove@plt>
   2100c:	ldr	ip, [r0, #12]
   21010:	clz	r3, r2
   21014:	cmp	ip, #0
   21018:	lsr	r3, r3, #5
   2101c:	movne	r3, #1
   21020:	cmp	r3, #0
   21024:	bxne	lr
   21028:	ldr	r3, [r0]
   2102c:	push	{r4, r5, r6, lr}
   21030:	mov	r6, r1
   21034:	ldr	r1, [r0, #4]
   21038:	mov	r5, r2
   2103c:	add	r2, r3, r2
   21040:	cmp	r2, r1
   21044:	mov	r4, r0
   21048:	ldr	r0, [r0, #8]
   2104c:	bcc	21070 <__assert_fail@plt+0xe870>
   21050:	add	r3, r5, #1024	; 0x400
   21054:	add	r1, r3, r1
   21058:	str	r1, [r4, #4]
   2105c:	bl	125d8 <gcry_realloc@plt>
   21060:	cmp	r0, #0
   21064:	beq	21090 <__assert_fail@plt+0xe890>
   21068:	ldr	r3, [r4]
   2106c:	str	r0, [r4, #8]
   21070:	mov	r2, r5
   21074:	mov	r1, r6
   21078:	add	r0, r0, r3
   2107c:	bl	121dc <memcpy@plt>
   21080:	ldr	r2, [r4]
   21084:	add	r5, r2, r5
   21088:	str	r5, [r4]
   2108c:	pop	{r4, r5, r6, pc}
   21090:	bl	12518 <__errno_location@plt>
   21094:	ldr	r1, [r4]
   21098:	ldr	r3, [r0]
   2109c:	ldr	r0, [r4, #8]
   210a0:	cmp	r3, #0
   210a4:	moveq	r3, #12
   210a8:	str	r3, [r4, #12]
   210ac:	pop	{r4, r5, r6, lr}
   210b0:	b	20e64 <__assert_fail@plt+0xe664>
   210b4:	cmp	r1, #0
   210b8:	beq	210cc <__assert_fail@plt+0xe8cc>
   210bc:	push	{r4, lr}
   210c0:	bl	2100c <__assert_fail@plt+0xe80c>
   210c4:	mov	r0, #0
   210c8:	pop	{r4, pc}
   210cc:	mov	r0, #0
   210d0:	bx	lr
   210d4:	push	{r4, r5, r6, lr}
   210d8:	mov	r5, r0
   210dc:	mov	r0, r1
   210e0:	mov	r4, r1
   210e4:	bl	124b8 <strlen@plt>
   210e8:	mov	r1, r4
   210ec:	mov	r2, r0
   210f0:	mov	r0, r5
   210f4:	pop	{r4, r5, r6, lr}
   210f8:	b	2100c <__assert_fail@plt+0xe80c>
   210fc:	push	{r1, r2, r3}
   21100:	push	{r4, r5, r6, lr}
   21104:	mov	r5, r0
   21108:	ldr	r4, [pc, #136]	; 21198 <__assert_fail@plt+0xe998>
   2110c:	sub	sp, sp, #20
   21110:	add	r3, sp, #40	; 0x28
   21114:	ldr	r0, [r4]
   21118:	mov	r2, r3
   2111c:	str	r0, [sp, #12]
   21120:	ldr	r1, [sp, #36]	; 0x24
   21124:	add	r0, sp, #8
   21128:	str	r3, [sp, #4]
   2112c:	bl	12584 <gpgrt_vasprintf@plt>
   21130:	cmp	r0, #0
   21134:	blt	2117c <__assert_fail@plt+0xe97c>
   21138:	ldr	r6, [sp, #8]
   2113c:	mov	r0, r6
   21140:	bl	124b8 <strlen@plt>
   21144:	mov	r1, r6
   21148:	mov	r2, r0
   2114c:	mov	r0, r5
   21150:	bl	2100c <__assert_fail@plt+0xe80c>
   21154:	ldr	r0, [sp, #8]
   21158:	bl	12218 <gcry_free@plt>
   2115c:	ldr	r2, [sp, #12]
   21160:	ldr	r3, [r4]
   21164:	cmp	r2, r3
   21168:	bne	21194 <__assert_fail@plt+0xe994>
   2116c:	add	sp, sp, #20
   21170:	pop	{r4, r5, r6, lr}
   21174:	add	sp, sp, #12
   21178:	bx	lr
   2117c:	bl	12518 <__errno_location@plt>
   21180:	ldr	r3, [r0]
   21184:	cmp	r3, #0
   21188:	moveq	r3, #12
   2118c:	str	r3, [r5, #12]
   21190:	b	2115c <__assert_fail@plt+0xe95c>
   21194:	bl	12260 <__stack_chk_fail@plt>
   21198:	andeq	r5, r3, r8, asr #22
   2119c:	ldr	r2, [r0, #12]
   211a0:	mov	r3, r0
   211a4:	cmp	r2, #0
   211a8:	bne	211d0 <__assert_fail@plt+0xe9d0>
   211ac:	cmp	r1, #0
   211b0:	ldr	r0, [r0, #8]
   211b4:	ldrne	r2, [r3]
   211b8:	strne	r2, [r1]
   211bc:	mov	r1, #0
   211c0:	mov	r2, #12
   211c4:	str	r1, [r3, #8]
   211c8:	str	r2, [r3, #12]
   211cc:	bx	lr
   211d0:	b	20f20 <__assert_fail@plt+0xe720>
   211d4:	push	{r4, r5, r6, lr}
   211d8:	sub	sp, sp, #8
   211dc:	ldr	r6, [pc, #148]	; 21278 <__assert_fail@plt+0xea78>
   211e0:	subs	r5, r1, #0
   211e4:	ldr	r3, [r6]
   211e8:	str	r3, [sp, #4]
   211ec:	beq	21258 <__assert_fail@plt+0xea58>
   211f0:	ldr	r3, [r0, #12]
   211f4:	cmp	r3, #0
   211f8:	bne	21268 <__assert_fail@plt+0xea68>
   211fc:	ldr	r1, [r0]
   21200:	mov	r2, #12
   21204:	ldr	r4, [r0, #8]
   21208:	str	r1, [r5]
   2120c:	str	r3, [r0, #8]
   21210:	str	r2, [r0, #12]
   21214:	cmp	r4, #0
   21218:	beq	21228 <__assert_fail@plt+0xea28>
   2121c:	ldr	r1, [r5]
   21220:	cmp	r1, #0
   21224:	bne	21244 <__assert_fail@plt+0xea44>
   21228:	ldr	r2, [sp, #4]
   2122c:	ldr	r3, [r6]
   21230:	mov	r0, r4
   21234:	cmp	r2, r3
   21238:	bne	21274 <__assert_fail@plt+0xea74>
   2123c:	add	sp, sp, #8
   21240:	pop	{r4, r5, r6, pc}
   21244:	mov	r0, r4
   21248:	bl	125d8 <gcry_realloc@plt>
   2124c:	cmp	r0, #0
   21250:	movne	r4, r0
   21254:	b	21228 <__assert_fail@plt+0xea28>
   21258:	ldr	r3, [r0, #12]
   2125c:	mov	r5, sp
   21260:	cmp	r3, #0
   21264:	beq	211fc <__assert_fail@plt+0xe9fc>
   21268:	bl	20f20 <__assert_fail@plt+0xe720>
   2126c:	mov	r4, r0
   21270:	b	21214 <__assert_fail@plt+0xea14>
   21274:	bl	12260 <__stack_chk_fail@plt>
   21278:	andeq	r5, r3, r8, asr #22
   2127c:	mov	r3, r0
   21280:	ldr	r0, [r0, #12]
   21284:	cmp	r0, #0
   21288:	bne	212a0 <__assert_fail@plt+0xeaa0>
   2128c:	cmp	r1, #0
   21290:	ldr	r0, [r3, #8]
   21294:	ldrne	r3, [r3]
   21298:	strne	r3, [r1]
   2129c:	bx	lr
   212a0:	push	{r4, lr}
   212a4:	bl	1268c <gpg_err_set_errno@plt>
   212a8:	mov	r0, #0
   212ac:	pop	{r4, pc}
   212b0:	push	{r4, r5, r6, r7, lr}
   212b4:	mov	r6, r0
   212b8:	sub	sp, sp, #20
   212bc:	mov	r0, r1
   212c0:	mov	r5, r2
   212c4:	mov	r7, r1
   212c8:	bl	124b8 <strlen@plt>
   212cc:	mov	r4, r0
   212d0:	mov	r0, r5
   212d4:	bl	124b8 <strlen@plt>
   212d8:	add	r0, r4, r0
   212dc:	add	r0, r0, #10
   212e0:	bl	120bc <gcry_malloc@plt>
   212e4:	subs	r4, r0, #0
   212e8:	beq	21364 <__assert_fail@plt+0xeb64>
   212ec:	ldr	r3, [pc, #136]	; 2137c <__assert_fail@plt+0xeb7c>
   212f0:	ldm	r3!, {r0, r1}
   212f4:	str	r0, [r4]
   212f8:	str	r1, [r4, #4]
   212fc:	add	r0, r4, #7
   21300:	mov	r1, r7
   21304:	bl	12248 <stpcpy@plt>
   21308:	mov	r3, #61	; 0x3d
   2130c:	mov	r1, r5
   21310:	strb	r3, [r0], #1
   21314:	bl	12248 <stpcpy@plt>
   21318:	ldr	r2, [pc, #96]	; 21380 <__assert_fail@plt+0xeb80>
   2131c:	mov	ip, #0
   21320:	mov	r3, ip
   21324:	ldrh	lr, [r2]
   21328:	mov	r1, r4
   2132c:	mov	r2, ip
   21330:	strh	lr, [r0]
   21334:	str	ip, [sp, #12]
   21338:	str	ip, [sp, #8]
   2133c:	str	ip, [sp, #4]
   21340:	str	ip, [sp]
   21344:	mov	r0, r6
   21348:	bl	1238c <assuan_transact@plt>
   2134c:	mov	r5, r0
   21350:	mov	r0, r4
   21354:	bl	12218 <gcry_free@plt>
   21358:	mov	r0, r5
   2135c:	add	sp, sp, #20
   21360:	pop	{r4, r5, r6, r7, pc}
   21364:	mov	r0, #12
   21368:	bl	12308 <gpg_err_code_from_errno@plt>
   2136c:	uxth	r5, r0
   21370:	mov	r0, r5
   21374:	add	sp, sp, #20
   21378:	pop	{r4, r5, r6, r7, pc}
   2137c:	andeq	r4, r2, ip, lsl sl
   21380:	andeq	r3, r2, r8, lsl pc
   21384:	ldr	r3, [pc, #960]	; 2174c <__assert_fail@plt+0xef4c>
   21388:	push	{r4, r5, r6, r7, r8, r9, lr}
   2138c:	mov	r6, r0
   21390:	ldr	r4, [r3]
   21394:	sub	sp, sp, #20
   21398:	cmp	r4, #0
   2139c:	beq	2157c <__assert_fail@plt+0xed7c>
   213a0:	ldrb	r3, [r4]
   213a4:	cmp	r3, #0
   213a8:	beq	2157c <__assert_fail@plt+0xed7c>
   213ac:	bl	12494 <assuan_new@plt>
   213b0:	subs	r5, r0, #0
   213b4:	beq	213c4 <__assert_fail@plt+0xebc4>
   213b8:	mov	r0, r5
   213bc:	add	sp, sp, #20
   213c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   213c4:	mov	r3, r5
   213c8:	mov	r2, r5
   213cc:	mov	r1, r4
   213d0:	ldr	r0, [r6]
   213d4:	bl	127e8 <assuan_socket_connect@plt>
   213d8:	subs	r5, r0, #0
   213dc:	bne	2159c <__assert_fail@plt+0xed9c>
   213e0:	ldr	r0, [pc, #872]	; 21750 <__assert_fail@plt+0xef50>
   213e4:	ldr	r4, [r6]
   213e8:	bl	123a4 <getenv@plt>
   213ec:	subs	r2, r0, #0
   213f0:	beq	21408 <__assert_fail@plt+0xec08>
   213f4:	ldr	r1, [pc, #856]	; 21754 <__assert_fail@plt+0xef54>
   213f8:	mov	r0, r4
   213fc:	bl	212b0 <__assert_fail@plt+0xeab0>
   21400:	subs	r7, r0, #0
   21404:	bne	2165c <__assert_fail@plt+0xee5c>
   21408:	ldr	r0, [pc, #840]	; 21758 <__assert_fail@plt+0xef58>
   2140c:	bl	123a4 <getenv@plt>
   21410:	subs	r7, r0, #0
   21414:	beq	2166c <__assert_fail@plt+0xee6c>
   21418:	ldrb	r0, [r7]
   2141c:	cmp	r0, #0
   21420:	beq	215cc <__assert_fail@plt+0xedcc>
   21424:	mov	r2, r7
   21428:	ldr	r1, [pc, #812]	; 2175c <__assert_fail@plt+0xef5c>
   2142c:	mov	r0, r4
   21430:	bl	212b0 <__assert_fail@plt+0xeab0>
   21434:	subs	r7, r0, #0
   21438:	bne	2165c <__assert_fail@plt+0xee5c>
   2143c:	ldr	r0, [pc, #796]	; 21760 <__assert_fail@plt+0xef60>
   21440:	bl	123a4 <getenv@plt>
   21444:	subs	r2, r0, #0
   21448:	beq	21460 <__assert_fail@plt+0xec60>
   2144c:	ldr	r1, [pc, #784]	; 21764 <__assert_fail@plt+0xef64>
   21450:	mov	r0, r4
   21454:	bl	212b0 <__assert_fail@plt+0xeab0>
   21458:	subs	r7, r0, #0
   2145c:	bne	2165c <__assert_fail@plt+0xee5c>
   21460:	mov	r1, #0
   21464:	mov	r0, r1
   21468:	bl	1262c <setlocale@plt>
   2146c:	subs	r7, r0, #0
   21470:	beq	2167c <__assert_fail@plt+0xee7c>
   21474:	bl	124b8 <strlen@plt>
   21478:	add	r0, r0, #1
   2147c:	bl	120bc <gcry_malloc@plt>
   21480:	subs	r8, r0, #0
   21484:	beq	21644 <__assert_fail@plt+0xee44>
   21488:	mov	r1, r7
   2148c:	bl	12344 <strcpy@plt>
   21490:	ldr	r1, [pc, #720]	; 21768 <__assert_fail@plt+0xef68>
   21494:	mov	r0, #0
   21498:	bl	1262c <setlocale@plt>
   2149c:	subs	r2, r0, #0
   214a0:	moveq	r7, #1
   214a4:	bne	21694 <__assert_fail@plt+0xee94>
   214a8:	mov	r1, r8
   214ac:	mov	r0, #0
   214b0:	bl	1262c <setlocale@plt>
   214b4:	mov	r0, r8
   214b8:	bl	12218 <gcry_free@plt>
   214bc:	mov	r1, #0
   214c0:	mov	r0, #5
   214c4:	bl	1262c <setlocale@plt>
   214c8:	subs	r9, r0, #0
   214cc:	beq	216d8 <__assert_fail@plt+0xeed8>
   214d0:	bl	124b8 <strlen@plt>
   214d4:	add	r0, r0, #1
   214d8:	bl	120bc <gcry_malloc@plt>
   214dc:	subs	r8, r0, #0
   214e0:	beq	21644 <__assert_fail@plt+0xee44>
   214e4:	mov	r1, r9
   214e8:	bl	12344 <strcpy@plt>
   214ec:	ldr	r1, [pc, #628]	; 21768 <__assert_fail@plt+0xef68>
   214f0:	mov	r0, #5
   214f4:	bl	1262c <setlocale@plt>
   214f8:	cmp	r0, #0
   214fc:	moveq	r7, #0
   21500:	cmp	r7, #0
   21504:	bne	21720 <__assert_fail@plt+0xef20>
   21508:	mov	r1, r8
   2150c:	mov	r0, #5
   21510:	bl	1262c <setlocale@plt>
   21514:	mov	r0, r8
   21518:	bl	12218 <gcry_free@plt>
   2151c:	ldr	r0, [pc, #584]	; 2176c <__assert_fail@plt+0xef6c>
   21520:	bl	123a4 <getenv@plt>
   21524:	subs	r2, r0, #0
   21528:	beq	21538 <__assert_fail@plt+0xed38>
   2152c:	ldr	r1, [pc, #572]	; 21770 <__assert_fail@plt+0xef70>
   21530:	mov	r0, r4
   21534:	bl	212b0 <__assert_fail@plt+0xeab0>
   21538:	ldr	r0, [pc, #564]	; 21774 <__assert_fail@plt+0xef74>
   2153c:	bl	123a4 <getenv@plt>
   21540:	subs	r2, r0, #0
   21544:	beq	21554 <__assert_fail@plt+0xed54>
   21548:	ldr	r1, [pc, #552]	; 21778 <__assert_fail@plt+0xef78>
   2154c:	mov	r0, r4
   21550:	bl	212b0 <__assert_fail@plt+0xeab0>
   21554:	mov	r3, #0
   21558:	mov	r0, r4
   2155c:	str	r3, [sp, #12]
   21560:	str	r3, [sp, #8]
   21564:	str	r3, [sp, #4]
   21568:	str	r3, [sp]
   2156c:	mov	r2, r3
   21570:	ldr	r1, [pc, #516]	; 2177c <__assert_fail@plt+0xef7c>
   21574:	bl	1238c <assuan_transact@plt>
   21578:	b	213b8 <__assert_fail@plt+0xebb8>
   2157c:	ldr	r0, [pc, #508]	; 21780 <__assert_fail@plt+0xef80>
   21580:	bl	195cc <__assert_fail@plt+0x6dcc>
   21584:	mov	r5, #77	; 0x4d
   21588:	mov	r3, #0
   2158c:	mov	r0, r5
   21590:	str	r3, [r6]
   21594:	add	sp, sp, #20
   21598:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2159c:	bl	12698 <gpg_strerror@plt>
   215a0:	mov	r1, r4
   215a4:	mov	r2, r0
   215a8:	ldr	r0, [pc, #468]	; 21784 <__assert_fail@plt+0xef84>
   215ac:	bl	195cc <__assert_fail@plt+0x6dcc>
   215b0:	ldr	r0, [r6]
   215b4:	bl	12650 <assuan_release@plt>
   215b8:	mov	r3, #0
   215bc:	mov	r0, r5
   215c0:	str	r3, [r6]
   215c4:	add	sp, sp, #20
   215c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   215cc:	bl	124ac <ttyname@plt>
   215d0:	cmp	r0, #0
   215d4:	beq	21634 <__assert_fail@plt+0xee34>
   215d8:	mov	r0, #0
   215dc:	bl	124ac <ttyname@plt>
   215e0:	subs	r7, r0, #0
   215e4:	bne	21634 <__assert_fail@plt+0xee34>
   215e8:	ldr	r0, [pc, #368]	; 21760 <__assert_fail@plt+0xef60>
   215ec:	bl	123a4 <getenv@plt>
   215f0:	mov	r1, #0
   215f4:	mov	r0, r1
   215f8:	bl	1262c <setlocale@plt>
   215fc:	subs	r7, r0, #0
   21600:	beq	21714 <__assert_fail@plt+0xef14>
   21604:	bl	124b8 <strlen@plt>
   21608:	add	r0, r0, #1
   2160c:	bl	120bc <gcry_malloc@plt>
   21610:	subs	r8, r0, #0
   21614:	beq	21644 <__assert_fail@plt+0xee44>
   21618:	mov	r1, r7
   2161c:	bl	12344 <strcpy@plt>
   21620:	ldr	r1, [pc, #320]	; 21768 <__assert_fail@plt+0xef68>
   21624:	mov	r0, #0
   21628:	bl	1262c <setlocale@plt>
   2162c:	mov	r7, #0
   21630:	b	214a8 <__assert_fail@plt+0xeca8>
   21634:	ldrb	r3, [r7]
   21638:	cmp	r3, #0
   2163c:	beq	2143c <__assert_fail@plt+0xec3c>
   21640:	b	21424 <__assert_fail@plt+0xec24>
   21644:	mov	r0, #12
   21648:	bl	12308 <gpg_err_code_from_errno@plt>
   2164c:	uxth	r5, r0
   21650:	cmp	r5, #0
   21654:	beq	213b8 <__assert_fail@plt+0xebb8>
   21658:	mov	r7, r5
   2165c:	ldr	r0, [pc, #292]	; 21788 <__assert_fail@plt+0xef88>
   21660:	bl	195cc <__assert_fail@plt+0x6dcc>
   21664:	mov	r5, r7
   21668:	b	215b0 <__assert_fail@plt+0xedb0>
   2166c:	bl	124ac <ttyname@plt>
   21670:	cmp	r0, #0
   21674:	bne	215d8 <__assert_fail@plt+0xedd8>
   21678:	b	215e8 <__assert_fail@plt+0xede8>
   2167c:	ldr	r1, [pc, #228]	; 21768 <__assert_fail@plt+0xef68>
   21680:	bl	1262c <setlocale@plt>
   21684:	subs	r2, r0, #0
   21688:	bne	216c4 <__assert_fail@plt+0xeec4>
   2168c:	mov	r7, #1
   21690:	b	214bc <__assert_fail@plt+0xecbc>
   21694:	ldr	r1, [pc, #240]	; 2178c <__assert_fail@plt+0xef8c>
   21698:	mov	r0, r4
   2169c:	bl	212b0 <__assert_fail@plt+0xeab0>
   216a0:	mov	r1, r8
   216a4:	mov	r7, r0
   216a8:	mov	r0, #0
   216ac:	bl	1262c <setlocale@plt>
   216b0:	mov	r0, r8
   216b4:	bl	12218 <gcry_free@plt>
   216b8:	cmp	r7, #0
   216bc:	bne	2165c <__assert_fail@plt+0xee5c>
   216c0:	b	2168c <__assert_fail@plt+0xee8c>
   216c4:	ldr	r1, [pc, #192]	; 2178c <__assert_fail@plt+0xef8c>
   216c8:	mov	r0, r4
   216cc:	bl	212b0 <__assert_fail@plt+0xeab0>
   216d0:	mov	r7, r0
   216d4:	b	216b8 <__assert_fail@plt+0xeeb8>
   216d8:	ldr	r1, [pc, #136]	; 21768 <__assert_fail@plt+0xef68>
   216dc:	mov	r0, #5
   216e0:	bl	1262c <setlocale@plt>
   216e4:	cmp	r0, #0
   216e8:	moveq	r7, #0
   216ec:	cmp	r7, #0
   216f0:	beq	2151c <__assert_fail@plt+0xed1c>
   216f4:	mov	r2, r0
   216f8:	ldr	r1, [pc, #144]	; 21790 <__assert_fail@plt+0xef90>
   216fc:	mov	r0, r4
   21700:	bl	212b0 <__assert_fail@plt+0xeab0>
   21704:	mov	r7, r0
   21708:	cmp	r7, #0
   2170c:	bne	2165c <__assert_fail@plt+0xee5c>
   21710:	b	2151c <__assert_fail@plt+0xed1c>
   21714:	ldr	r1, [pc, #76]	; 21768 <__assert_fail@plt+0xef68>
   21718:	bl	1262c <setlocale@plt>
   2171c:	b	214bc <__assert_fail@plt+0xecbc>
   21720:	mov	r2, r0
   21724:	ldr	r1, [pc, #100]	; 21790 <__assert_fail@plt+0xef90>
   21728:	mov	r0, r4
   2172c:	bl	212b0 <__assert_fail@plt+0xeab0>
   21730:	mov	r1, r8
   21734:	mov	r7, r0
   21738:	mov	r0, #5
   2173c:	bl	1262c <setlocale@plt>
   21740:	mov	r0, r8
   21744:	bl	12218 <gcry_free@plt>
   21748:	b	21708 <__assert_fail@plt+0xef08>
   2174c:	andeq	r6, r3, r4, lsl #6
   21750:	andeq	r4, r2, r8, ror #20
   21754:	andeq	r4, r2, r8, ror sl
   21758:	andeq	r4, r2, r0, ror sl
   2175c:	andeq	r4, r2, r8, lsl #21
   21760:	andeq	r4, r2, r0, lsl #21
   21764:	muleq	r2, r0, sl
   21768:	andeq	r2, r2, ip, lsl #18
   2176c:			; <UNDEFINED> instruction: 0x00024ab0
   21770:			; <UNDEFINED> instruction: 0x00024abc
   21774:	andeq	r4, r2, r8, asr #21
   21778:	ldrdeq	r4, [r2], -ip
   2177c:	strdeq	r4, [r2], -r0
   21780:	andeq	r4, r2, r4, lsr #20
   21784:	andeq	r4, r2, ip, asr #20
   21788:	andeq	r4, r2, r0, lsl fp
   2178c:	muleq	r2, r8, sl
   21790:	andeq	r4, r2, r4, lsr #21
   21794:	push	{r4, r5, r6, r7, lr}
   21798:	mov	r4, r0
   2179c:	ldrb	r3, [r1]
   217a0:	sub	sp, sp, #12
   217a4:	cmp	r3, #0
   217a8:	beq	21810 <__assert_fail@plt+0xf010>
   217ac:	ldr	r6, [pc, #104]	; 2181c <__assert_fail@plt+0xf01c>
   217b0:	mov	r5, r1
   217b4:	mov	r7, #43	; 0x2b
   217b8:	b	217dc <__assert_fail@plt+0xefdc>
   217bc:	cmp	r3, #32
   217c0:	strbeq	r7, [r4]
   217c4:	strbne	r3, [r4]
   217c8:	ldrb	r3, [r5, #1]!
   217cc:	add	r2, r4, #1
   217d0:	mov	r4, r2
   217d4:	cmp	r3, #0
   217d8:	beq	21810 <__assert_fail@plt+0xf010>
   217dc:	cmp	r3, #43	; 0x2b
   217e0:	cmpne	r3, #31
   217e4:	bhi	217bc <__assert_fail@plt+0xefbc>
   217e8:	str	r3, [sp]
   217ec:	mov	r0, r4
   217f0:	mov	r3, r6
   217f4:	mvn	r2, #0
   217f8:	mov	r1, #1
   217fc:	bl	1253c <__sprintf_chk@plt>
   21800:	ldrb	r3, [r5, #1]!
   21804:	add	r4, r4, #3
   21808:	cmp	r3, #0
   2180c:	bne	217dc <__assert_fail@plt+0xefdc>
   21810:	mov	r0, r4
   21814:	add	sp, sp, #12
   21818:	pop	{r4, r5, r6, r7, pc}
   2181c:	andeq	r4, r2, r8, lsr fp
   21820:	push	{r4, lr}
   21824:	mov	r0, r1
   21828:	mov	r4, r1
   2182c:	mov	r2, #17
   21830:	ldr	r1, [pc, #64]	; 21878 <__assert_fail@plt+0xf078>
   21834:	bl	12794 <strncmp@plt>
   21838:	cmp	r0, #0
   2183c:	bne	2184c <__assert_fail@plt+0xf04c>
   21840:	ldrb	r1, [r4, #17]
   21844:	ands	r1, r1, #223	; 0xdf
   21848:	beq	21860 <__assert_fail@plt+0xf060>
   2184c:	mov	r1, r4
   21850:	ldr	r0, [pc, #36]	; 2187c <__assert_fail@plt+0xf07c>
   21854:	bl	19718 <__assert_fail@plt+0x6f18>
   21858:	mov	r0, #0
   2185c:	pop	{r4, pc}
   21860:	mov	r2, #10
   21864:	add	r0, r4, #17
   21868:	bl	124a0 <strtoul@plt>
   2186c:	bl	1a110 <__assert_fail@plt+0x7910>
   21870:	mov	r0, #0
   21874:	pop	{r4, pc}
   21878:	andeq	r4, r2, r0, asr #22
   2187c:	andeq	r4, r2, r4, asr fp
   21880:	push	{r4, r5, r6, lr}
   21884:	mov	r4, r0
   21888:	ldr	r5, [pc, #80]	; 218e0 <__assert_fail@plt+0xf0e0>
   2188c:	mov	r6, #0
   21890:	ldr	r0, [r5]
   21894:	bl	12218 <gcry_free@plt>
   21898:	cmp	r4, r6
   2189c:	str	r6, [r5]
   218a0:	mov	r0, r4
   218a4:	popeq	{r4, r5, r6, pc}
   218a8:	bl	124b8 <strlen@plt>
   218ac:	add	r0, r0, #1
   218b0:	bl	120bc <gcry_malloc@plt>
   218b4:	cmp	r0, r6
   218b8:	str	r0, [r5]
   218bc:	beq	218d0 <__assert_fail@plt+0xf0d0>
   218c0:	mov	r1, r4
   218c4:	bl	12344 <strcpy@plt>
   218c8:	mov	r0, r6
   218cc:	pop	{r4, r5, r6, pc}
   218d0:	mov	r0, #12
   218d4:	bl	12308 <gpg_err_code_from_errno@plt>
   218d8:	uxth	r0, r0
   218dc:	pop	{r4, r5, r6, pc}
   218e0:	andeq	r6, r3, r4, lsl #6
   218e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218e8:	sub	sp, sp, #60	; 0x3c
   218ec:	ldr	r8, [pc, #596]	; 21b48 <__assert_fail@plt+0xf348>
   218f0:	mov	r7, r0
   218f4:	add	r0, sp, #28
   218f8:	ldr	ip, [r8]
   218fc:	mov	r6, r1
   21900:	mov	r5, r2
   21904:	mov	r4, r3
   21908:	str	ip, [sp, #52]	; 0x34
   2190c:	ldr	r9, [sp, #100]	; 0x64
   21910:	bl	21384 <__assert_fail@plt+0xeb84>
   21914:	subs	fp, r0, #0
   21918:	movne	sl, #0
   2191c:	bne	21a6c <__assert_fail@plt+0xf26c>
   21920:	cmp	r7, #0
   21924:	beq	21b28 <__assert_fail@plt+0xf328>
   21928:	mov	r0, r7
   2192c:	bl	124b8 <strlen@plt>
   21930:	mov	sl, r0
   21934:	cmp	r6, #0
   21938:	beq	21b1c <__assert_fail@plt+0xf31c>
   2193c:	mov	r0, r6
   21940:	bl	124b8 <strlen@plt>
   21944:	mov	fp, r0
   21948:	cmp	r5, #0
   2194c:	beq	21b10 <__assert_fail@plt+0xf310>
   21950:	mov	r0, r5
   21954:	bl	124b8 <strlen@plt>
   21958:	mov	r2, r0
   2195c:	cmp	r4, #0
   21960:	beq	21b04 <__assert_fail@plt+0xf304>
   21964:	mov	r0, r4
   21968:	str	r2, [sp, #20]
   2196c:	bl	124b8 <strlen@plt>
   21970:	ldr	r2, [sp, #20]
   21974:	add	r3, sl, fp
   21978:	add	r3, r3, r2
   2197c:	add	r0, r3, r0
   21980:	add	r0, r0, r0, lsl #1
   21984:	add	r0, r0, #31
   21988:	bl	120bc <gcry_malloc@plt>
   2198c:	subs	sl, r0, #0
   21990:	beq	21b34 <__assert_fail@plt+0xf334>
   21994:	ldr	ip, [pc, #432]	; 21b4c <__assert_fail@plt+0xf34c>
   21998:	ldr	r3, [sp, #96]	; 0x60
   2199c:	add	lr, sl, #15
   219a0:	cmp	r3, #0
   219a4:	ldm	ip!, {r0, r1, r2, r3}
   219a8:	str	r0, [sl]
   219ac:	str	r1, [sl, #4]
   219b0:	str	r2, [sl, #8]
   219b4:	str	r3, [sl, #12]
   219b8:	bne	21ae4 <__assert_fail@plt+0xf2e4>
   219bc:	mov	r0, lr
   219c0:	mov	r1, r7
   219c4:	bl	21794 <__assert_fail@plt+0xef94>
   219c8:	mov	r7, #32
   219cc:	mov	r1, r6
   219d0:	strb	r7, [r0], #1
   219d4:	bl	21794 <__assert_fail@plt+0xef94>
   219d8:	mov	r1, r5
   219dc:	strb	r7, [r0], #1
   219e0:	bl	21794 <__assert_fail@plt+0xef94>
   219e4:	mov	r1, r4
   219e8:	strb	r7, [r0], #1
   219ec:	bl	21794 <__assert_fail@plt+0xef94>
   219f0:	mov	r3, #10
   219f4:	mov	r1, #64	; 0x40
   219f8:	strb	r3, [r0]
   219fc:	add	r0, sp, #36	; 0x24
   21a00:	bl	20f98 <__assert_fail@plt+0xe798>
   21a04:	ldr	r1, [pc, #324]	; 21b50 <__assert_fail@plt+0xf350>
   21a08:	mov	r2, #0
   21a0c:	add	r3, sp, #36	; 0x24
   21a10:	str	r1, [sp]
   21a14:	str	r2, [sp, #12]
   21a18:	str	r2, [sp, #8]
   21a1c:	str	r2, [sp, #4]
   21a20:	mov	r1, sl
   21a24:	ldr	r2, [pc, #296]	; 21b54 <__assert_fail@plt+0xf354>
   21a28:	ldr	r0, [sp, #28]
   21a2c:	bl	1238c <assuan_transact@plt>
   21a30:	mov	fp, r0
   21a34:	mov	r0, sl
   21a38:	bl	12218 <gcry_free@plt>
   21a3c:	cmp	fp, #0
   21a40:	bne	21a98 <__assert_fail@plt+0xf298>
   21a44:	mov	r2, #1
   21a48:	ldr	r1, [pc, #264]	; 21b58 <__assert_fail@plt+0xf358>
   21a4c:	add	r0, sp, #36	; 0x24
   21a50:	bl	2100c <__assert_fail@plt+0xe80c>
   21a54:	mov	r1, fp
   21a58:	add	r0, sp, #36	; 0x24
   21a5c:	bl	2119c <__assert_fail@plt+0xe99c>
   21a60:	mov	sl, r0
   21a64:	bl	124e8 <gpg_err_code_from_syserror@plt>
   21a68:	uxth	fp, r0
   21a6c:	cmp	r9, #0
   21a70:	strne	fp, [r9]
   21a74:	ldr	r0, [sp, #28]
   21a78:	bl	12650 <assuan_release@plt>
   21a7c:	ldr	r2, [sp, #52]	; 0x34
   21a80:	ldr	r3, [r8]
   21a84:	mov	r0, sl
   21a88:	cmp	r2, r3
   21a8c:	bne	21b44 <__assert_fail@plt+0xf344>
   21a90:	add	sp, sp, #60	; 0x3c
   21a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a98:	lsr	r3, fp, #24
   21a9c:	ands	r3, r3, #127	; 0x7f
   21aa0:	beq	21ab8 <__assert_fail@plt+0xf2b8>
   21aa4:	ldr	r2, [pc, #176]	; 21b5c <__assert_fail@plt+0xf35c>
   21aa8:	uxth	r1, fp
   21aac:	cmp	r1, r2
   21ab0:	lsleq	r3, r3, #24
   21ab4:	orreq	fp, r3, #99	; 0x63
   21ab8:	add	r0, sp, #36	; 0x24
   21abc:	add	r1, sp, #32
   21ac0:	bl	2119c <__assert_fail@plt+0xe99c>
   21ac4:	subs	r4, r0, #0
   21ac8:	beq	21ad4 <__assert_fail@plt+0xf2d4>
   21acc:	ldr	r1, [sp, #32]
   21ad0:	bl	20e64 <__assert_fail@plt+0xe664>
   21ad4:	mov	r0, r4
   21ad8:	bl	12218 <gcry_free@plt>
   21adc:	mov	sl, #0
   21ae0:	b	21a6c <__assert_fail@plt+0xf26c>
   21ae4:	ldr	r3, [pc, #116]	; 21b60 <__assert_fail@plt+0xf360>
   21ae8:	ldm	r3!, {r0, r1}
   21aec:	ldrb	r3, [r3]
   21af0:	str	r0, [sl, #15]
   21af4:	str	r1, [lr, #4]
   21af8:	strb	r3, [lr, #8]
   21afc:	add	lr, sl, #23
   21b00:	b	219bc <__assert_fail@plt+0xf1bc>
   21b04:	ldr	r4, [pc, #88]	; 21b64 <__assert_fail@plt+0xf364>
   21b08:	mov	r0, #1
   21b0c:	b	21974 <__assert_fail@plt+0xf174>
   21b10:	ldr	r5, [pc, #76]	; 21b64 <__assert_fail@plt+0xf364>
   21b14:	mov	r2, #1
   21b18:	b	2195c <__assert_fail@plt+0xf15c>
   21b1c:	ldr	r6, [pc, #64]	; 21b64 <__assert_fail@plt+0xf364>
   21b20:	mov	fp, #1
   21b24:	b	21948 <__assert_fail@plt+0xf148>
   21b28:	ldr	r7, [pc, #52]	; 21b64 <__assert_fail@plt+0xf364>
   21b2c:	mov	sl, #1
   21b30:	b	21934 <__assert_fail@plt+0xf134>
   21b34:	mov	r0, #12
   21b38:	bl	12308 <gpg_err_code_from_errno@plt>
   21b3c:	uxth	fp, r0
   21b40:	b	21a6c <__assert_fail@plt+0xf26c>
   21b44:	bl	12260 <__stack_chk_fail@plt>
   21b48:	andeq	r5, r3, r8, asr #22
   21b4c:	andeq	r4, r2, r8, ror fp
   21b50:	andeq	r1, r2, r0, lsr #16
   21b54:	strheq	r1, [r2], -r4
   21b58:	andeq	r2, r2, ip, lsl #18
   21b5c:	andeq	r0, r0, r5, lsl r1
   21b60:	andeq	r4, r2, r8, lsl #23
   21b64:	andeq	r3, r2, r8, asr #2
   21b68:	push	{r4, r5, r6, lr}
   21b6c:	sub	sp, sp, #24
   21b70:	ldr	r5, [pc, #104]	; 21be0 <__assert_fail@plt+0xf3e0>
   21b74:	mov	r6, r0
   21b78:	add	r0, sp, #16
   21b7c:	ldr	r3, [r5]
   21b80:	str	r3, [sp, #20]
   21b84:	bl	21384 <__assert_fail@plt+0xeb84>
   21b88:	subs	r4, r0, #0
   21b8c:	bne	21bc0 <__assert_fail@plt+0xf3c0>
   21b90:	str	r4, [sp, #12]
   21b94:	str	r4, [sp, #8]
   21b98:	str	r4, [sp, #4]
   21b9c:	str	r4, [sp]
   21ba0:	mov	r3, r4
   21ba4:	mov	r2, r4
   21ba8:	mov	r1, r6
   21bac:	ldr	r0, [sp, #16]
   21bb0:	bl	1238c <assuan_transact@plt>
   21bb4:	mov	r4, r0
   21bb8:	ldr	r0, [sp, #16]
   21bbc:	bl	12650 <assuan_release@plt>
   21bc0:	ldr	r2, [sp, #20]
   21bc4:	ldr	r3, [r5]
   21bc8:	mov	r0, r4
   21bcc:	cmp	r2, r3
   21bd0:	bne	21bdc <__assert_fail@plt+0xf3dc>
   21bd4:	add	sp, sp, #24
   21bd8:	pop	{r4, r5, r6, pc}
   21bdc:	bl	12260 <__stack_chk_fail@plt>
   21be0:	andeq	r5, r3, r8, asr #22
   21be4:	push	{r4, r5, lr}
   21be8:	sub	sp, sp, #508	; 0x1fc
   21bec:	ldr	r4, [pc, #124]	; 21c70 <__assert_fail@plt+0xf470>
   21bf0:	mov	r5, r0
   21bf4:	ldr	r3, [r4]
   21bf8:	str	r3, [sp, #500]	; 0x1f4
   21bfc:	bl	124b8 <strlen@plt>
   21c00:	ldr	r3, [pc, #108]	; 21c74 <__assert_fail@plt+0xf474>
   21c04:	add	r0, r0, r0, lsl #1
   21c08:	cmp	r0, r3
   21c0c:	movhi	r0, #168	; 0xa8
   21c10:	bhi	21c54 <__assert_fail@plt+0xf454>
   21c14:	ldr	lr, [pc, #92]	; 21c78 <__assert_fail@plt+0xf478>
   21c18:	mov	ip, sp
   21c1c:	ldm	lr!, {r0, r1, r2, r3}
   21c20:	ldr	lr, [lr]
   21c24:	stmia	ip!, {r0, r1, r2, r3}
   21c28:	mov	r1, r5
   21c2c:	add	r0, sp, #17
   21c30:	strh	lr, [ip]
   21c34:	bl	21794 <__assert_fail@plt+0xef94>
   21c38:	mov	r1, #10
   21c3c:	mov	r2, #0
   21c40:	mov	r3, r0
   21c44:	mov	r0, sp
   21c48:	strb	r1, [r3]
   21c4c:	strb	r2, [r3, #1]
   21c50:	bl	21b68 <__assert_fail@plt+0xf368>
   21c54:	ldr	r2, [sp, #500]	; 0x1f4
   21c58:	ldr	r3, [r4]
   21c5c:	cmp	r2, r3
   21c60:	bne	21c6c <__assert_fail@plt+0xf46c>
   21c64:	add	sp, sp, #508	; 0x1fc
   21c68:	pop	{r4, r5, pc}
   21c6c:	bl	12260 <__stack_chk_fail@plt>
   21c70:	andeq	r5, r3, r8, asr #22
   21c74:	andeq	r0, r0, r2, asr #3
   21c78:	muleq	r2, r4, fp
   21c7c:	cmp	r1, #0
   21c80:	beq	21e8c <__assert_fail@plt+0xf68c>
   21c84:	eor	ip, r0, r1
   21c88:	rsbmi	r1, r1, #0
   21c8c:	subs	r2, r1, #1
   21c90:	beq	21e58 <__assert_fail@plt+0xf658>
   21c94:	movs	r3, r0
   21c98:	rsbmi	r3, r0, #0
   21c9c:	cmp	r3, r1
   21ca0:	bls	21e64 <__assert_fail@plt+0xf664>
   21ca4:	tst	r1, r2
   21ca8:	beq	21e74 <__assert_fail@plt+0xf674>
   21cac:	clz	r2, r3
   21cb0:	clz	r0, r1
   21cb4:	sub	r2, r0, r2
   21cb8:	rsbs	r2, r2, #31
   21cbc:	addne	r2, r2, r2, lsl #1
   21cc0:	mov	r0, #0
   21cc4:	addne	pc, pc, r2, lsl #2
   21cc8:	nop			; (mov r0, r0)
   21ccc:	cmp	r3, r1, lsl #31
   21cd0:	adc	r0, r0, r0
   21cd4:	subcs	r3, r3, r1, lsl #31
   21cd8:	cmp	r3, r1, lsl #30
   21cdc:	adc	r0, r0, r0
   21ce0:	subcs	r3, r3, r1, lsl #30
   21ce4:	cmp	r3, r1, lsl #29
   21ce8:	adc	r0, r0, r0
   21cec:	subcs	r3, r3, r1, lsl #29
   21cf0:	cmp	r3, r1, lsl #28
   21cf4:	adc	r0, r0, r0
   21cf8:	subcs	r3, r3, r1, lsl #28
   21cfc:	cmp	r3, r1, lsl #27
   21d00:	adc	r0, r0, r0
   21d04:	subcs	r3, r3, r1, lsl #27
   21d08:	cmp	r3, r1, lsl #26
   21d0c:	adc	r0, r0, r0
   21d10:	subcs	r3, r3, r1, lsl #26
   21d14:	cmp	r3, r1, lsl #25
   21d18:	adc	r0, r0, r0
   21d1c:	subcs	r3, r3, r1, lsl #25
   21d20:	cmp	r3, r1, lsl #24
   21d24:	adc	r0, r0, r0
   21d28:	subcs	r3, r3, r1, lsl #24
   21d2c:	cmp	r3, r1, lsl #23
   21d30:	adc	r0, r0, r0
   21d34:	subcs	r3, r3, r1, lsl #23
   21d38:	cmp	r3, r1, lsl #22
   21d3c:	adc	r0, r0, r0
   21d40:	subcs	r3, r3, r1, lsl #22
   21d44:	cmp	r3, r1, lsl #21
   21d48:	adc	r0, r0, r0
   21d4c:	subcs	r3, r3, r1, lsl #21
   21d50:	cmp	r3, r1, lsl #20
   21d54:	adc	r0, r0, r0
   21d58:	subcs	r3, r3, r1, lsl #20
   21d5c:	cmp	r3, r1, lsl #19
   21d60:	adc	r0, r0, r0
   21d64:	subcs	r3, r3, r1, lsl #19
   21d68:	cmp	r3, r1, lsl #18
   21d6c:	adc	r0, r0, r0
   21d70:	subcs	r3, r3, r1, lsl #18
   21d74:	cmp	r3, r1, lsl #17
   21d78:	adc	r0, r0, r0
   21d7c:	subcs	r3, r3, r1, lsl #17
   21d80:	cmp	r3, r1, lsl #16
   21d84:	adc	r0, r0, r0
   21d88:	subcs	r3, r3, r1, lsl #16
   21d8c:	cmp	r3, r1, lsl #15
   21d90:	adc	r0, r0, r0
   21d94:	subcs	r3, r3, r1, lsl #15
   21d98:	cmp	r3, r1, lsl #14
   21d9c:	adc	r0, r0, r0
   21da0:	subcs	r3, r3, r1, lsl #14
   21da4:	cmp	r3, r1, lsl #13
   21da8:	adc	r0, r0, r0
   21dac:	subcs	r3, r3, r1, lsl #13
   21db0:	cmp	r3, r1, lsl #12
   21db4:	adc	r0, r0, r0
   21db8:	subcs	r3, r3, r1, lsl #12
   21dbc:	cmp	r3, r1, lsl #11
   21dc0:	adc	r0, r0, r0
   21dc4:	subcs	r3, r3, r1, lsl #11
   21dc8:	cmp	r3, r1, lsl #10
   21dcc:	adc	r0, r0, r0
   21dd0:	subcs	r3, r3, r1, lsl #10
   21dd4:	cmp	r3, r1, lsl #9
   21dd8:	adc	r0, r0, r0
   21ddc:	subcs	r3, r3, r1, lsl #9
   21de0:	cmp	r3, r1, lsl #8
   21de4:	adc	r0, r0, r0
   21de8:	subcs	r3, r3, r1, lsl #8
   21dec:	cmp	r3, r1, lsl #7
   21df0:	adc	r0, r0, r0
   21df4:	subcs	r3, r3, r1, lsl #7
   21df8:	cmp	r3, r1, lsl #6
   21dfc:	adc	r0, r0, r0
   21e00:	subcs	r3, r3, r1, lsl #6
   21e04:	cmp	r3, r1, lsl #5
   21e08:	adc	r0, r0, r0
   21e0c:	subcs	r3, r3, r1, lsl #5
   21e10:	cmp	r3, r1, lsl #4
   21e14:	adc	r0, r0, r0
   21e18:	subcs	r3, r3, r1, lsl #4
   21e1c:	cmp	r3, r1, lsl #3
   21e20:	adc	r0, r0, r0
   21e24:	subcs	r3, r3, r1, lsl #3
   21e28:	cmp	r3, r1, lsl #2
   21e2c:	adc	r0, r0, r0
   21e30:	subcs	r3, r3, r1, lsl #2
   21e34:	cmp	r3, r1, lsl #1
   21e38:	adc	r0, r0, r0
   21e3c:	subcs	r3, r3, r1, lsl #1
   21e40:	cmp	r3, r1
   21e44:	adc	r0, r0, r0
   21e48:	subcs	r3, r3, r1
   21e4c:	cmp	ip, #0
   21e50:	rsbmi	r0, r0, #0
   21e54:	bx	lr
   21e58:	teq	ip, r0
   21e5c:	rsbmi	r0, r0, #0
   21e60:	bx	lr
   21e64:	movcc	r0, #0
   21e68:	asreq	r0, ip, #31
   21e6c:	orreq	r0, r0, #1
   21e70:	bx	lr
   21e74:	clz	r2, r1
   21e78:	rsb	r2, r2, #31
   21e7c:	cmp	ip, #0
   21e80:	lsr	r0, r3, r2
   21e84:	rsbmi	r0, r0, #0
   21e88:	bx	lr
   21e8c:	cmp	r0, #0
   21e90:	mvngt	r0, #-2147483648	; 0x80000000
   21e94:	movlt	r0, #-2147483648	; 0x80000000
   21e98:	b	21fcc <__assert_fail@plt+0xf7cc>
   21e9c:	cmp	r1, #0
   21ea0:	beq	21e8c <__assert_fail@plt+0xf68c>
   21ea4:	push	{r0, r1, lr}
   21ea8:	bl	21c84 <__assert_fail@plt+0xf484>
   21eac:	pop	{r1, r2, lr}
   21eb0:	mul	r3, r2, r0
   21eb4:	sub	r1, r1, r3
   21eb8:	bx	lr
   21ebc:	cmp	r3, #0
   21ec0:	cmpeq	r2, #0
   21ec4:	bne	21ee8 <__assert_fail@plt+0xf6e8>
   21ec8:	cmp	r1, #0
   21ecc:	movlt	r1, #-2147483648	; 0x80000000
   21ed0:	movlt	r0, #0
   21ed4:	blt	21ee4 <__assert_fail@plt+0xf6e4>
   21ed8:	cmpeq	r0, #0
   21edc:	mvnne	r1, #-2147483648	; 0x80000000
   21ee0:	mvnne	r0, #0
   21ee4:	b	21fcc <__assert_fail@plt+0xf7cc>
   21ee8:	sub	sp, sp, #8
   21eec:	push	{sp, lr}
   21ef0:	cmp	r1, #0
   21ef4:	blt	21f14 <__assert_fail@plt+0xf714>
   21ef8:	cmp	r3, #0
   21efc:	blt	21f48 <__assert_fail@plt+0xf748>
   21f00:	bl	21fdc <__assert_fail@plt+0xf7dc>
   21f04:	ldr	lr, [sp, #4]
   21f08:	add	sp, sp, #8
   21f0c:	pop	{r2, r3}
   21f10:	bx	lr
   21f14:	rsbs	r0, r0, #0
   21f18:	sbc	r1, r1, r1, lsl #1
   21f1c:	cmp	r3, #0
   21f20:	blt	21f6c <__assert_fail@plt+0xf76c>
   21f24:	bl	21fdc <__assert_fail@plt+0xf7dc>
   21f28:	ldr	lr, [sp, #4]
   21f2c:	add	sp, sp, #8
   21f30:	pop	{r2, r3}
   21f34:	rsbs	r0, r0, #0
   21f38:	sbc	r1, r1, r1, lsl #1
   21f3c:	rsbs	r2, r2, #0
   21f40:	sbc	r3, r3, r3, lsl #1
   21f44:	bx	lr
   21f48:	rsbs	r2, r2, #0
   21f4c:	sbc	r3, r3, r3, lsl #1
   21f50:	bl	21fdc <__assert_fail@plt+0xf7dc>
   21f54:	ldr	lr, [sp, #4]
   21f58:	add	sp, sp, #8
   21f5c:	pop	{r2, r3}
   21f60:	rsbs	r0, r0, #0
   21f64:	sbc	r1, r1, r1, lsl #1
   21f68:	bx	lr
   21f6c:	rsbs	r2, r2, #0
   21f70:	sbc	r3, r3, r3, lsl #1
   21f74:	bl	21fdc <__assert_fail@plt+0xf7dc>
   21f78:	ldr	lr, [sp, #4]
   21f7c:	add	sp, sp, #8
   21f80:	pop	{r2, r3}
   21f84:	rsbs	r2, r2, #0
   21f88:	sbc	r3, r3, r3, lsl #1
   21f8c:	bx	lr
   21f90:	cmp	r3, #0
   21f94:	cmpeq	r2, #0
   21f98:	bne	21fb0 <__assert_fail@plt+0xf7b0>
   21f9c:	cmp	r1, #0
   21fa0:	cmpeq	r0, #0
   21fa4:	mvnne	r1, #0
   21fa8:	mvnne	r0, #0
   21fac:	b	21fcc <__assert_fail@plt+0xf7cc>
   21fb0:	sub	sp, sp, #8
   21fb4:	push	{sp, lr}
   21fb8:	bl	21fdc <__assert_fail@plt+0xf7dc>
   21fbc:	ldr	lr, [sp, #4]
   21fc0:	add	sp, sp, #8
   21fc4:	pop	{r2, r3}
   21fc8:	bx	lr
   21fcc:	push	{r1, lr}
   21fd0:	mov	r0, #8
   21fd4:	bl	120a4 <raise@plt>
   21fd8:	pop	{r1, pc}
   21fdc:	cmp	r1, r3
   21fe0:	cmpeq	r0, r2
   21fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fe8:	mov	r4, r0
   21fec:	movcc	r0, #0
   21ff0:	mov	r5, r1
   21ff4:	ldr	lr, [sp, #36]	; 0x24
   21ff8:	movcc	r1, r0
   21ffc:	bcc	220f8 <__assert_fail@plt+0xf8f8>
   22000:	cmp	r3, #0
   22004:	clzeq	ip, r2
   22008:	clzne	ip, r3
   2200c:	addeq	ip, ip, #32
   22010:	cmp	r5, #0
   22014:	clzeq	r1, r4
   22018:	addeq	r1, r1, #32
   2201c:	clzne	r1, r5
   22020:	sub	ip, ip, r1
   22024:	sub	sl, ip, #32
   22028:	lsl	r9, r3, ip
   2202c:	rsb	fp, ip, #32
   22030:	orr	r9, r9, r2, lsl sl
   22034:	orr	r9, r9, r2, lsr fp
   22038:	lsl	r8, r2, ip
   2203c:	cmp	r5, r9
   22040:	cmpeq	r4, r8
   22044:	movcc	r0, #0
   22048:	movcc	r1, r0
   2204c:	bcc	22068 <__assert_fail@plt+0xf868>
   22050:	mov	r0, #1
   22054:	subs	r4, r4, r8
   22058:	lsl	r1, r0, sl
   2205c:	orr	r1, r1, r0, lsr fp
   22060:	lsl	r0, r0, ip
   22064:	sbc	r5, r5, r9
   22068:	cmp	ip, #0
   2206c:	beq	220f8 <__assert_fail@plt+0xf8f8>
   22070:	lsr	r6, r8, #1
   22074:	orr	r6, r6, r9, lsl #31
   22078:	lsr	r7, r9, #1
   2207c:	mov	r2, ip
   22080:	b	220a4 <__assert_fail@plt+0xf8a4>
   22084:	subs	r3, r4, r6
   22088:	sbc	r8, r5, r7
   2208c:	adds	r3, r3, r3
   22090:	adc	r8, r8, r8
   22094:	adds	r4, r3, #1
   22098:	adc	r5, r8, #0
   2209c:	subs	r2, r2, #1
   220a0:	beq	220c0 <__assert_fail@plt+0xf8c0>
   220a4:	cmp	r5, r7
   220a8:	cmpeq	r4, r6
   220ac:	bcs	22084 <__assert_fail@plt+0xf884>
   220b0:	adds	r4, r4, r4
   220b4:	adc	r5, r5, r5
   220b8:	subs	r2, r2, #1
   220bc:	bne	220a4 <__assert_fail@plt+0xf8a4>
   220c0:	lsr	r3, r4, ip
   220c4:	orr	r3, r3, r5, lsl fp
   220c8:	lsr	r2, r5, ip
   220cc:	orr	r3, r3, r5, lsr sl
   220d0:	adds	r0, r0, r4
   220d4:	mov	r4, r3
   220d8:	lsl	r3, r2, ip
   220dc:	orr	r3, r3, r4, lsl sl
   220e0:	lsl	ip, r4, ip
   220e4:	orr	r3, r3, r4, lsr fp
   220e8:	adc	r1, r1, r5
   220ec:	subs	r0, r0, ip
   220f0:	mov	r5, r2
   220f4:	sbc	r1, r1, r3
   220f8:	cmp	lr, #0
   220fc:	strdne	r4, [lr]
   22100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22104:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22108:	mov	r7, r0
   2210c:	ldr	r6, [pc, #72]	; 2215c <__assert_fail@plt+0xf95c>
   22110:	ldr	r5, [pc, #72]	; 22160 <__assert_fail@plt+0xf960>
   22114:	add	r6, pc, r6
   22118:	add	r5, pc, r5
   2211c:	sub	r6, r6, r5
   22120:	mov	r8, r1
   22124:	mov	r9, r2
   22128:	bl	12078 <gcry_xmalloc@plt-0x20>
   2212c:	asrs	r6, r6, #2
   22130:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22134:	mov	r4, #0
   22138:	add	r4, r4, #1
   2213c:	ldr	r3, [r5], #4
   22140:	mov	r2, r9
   22144:	mov	r1, r8
   22148:	mov	r0, r7
   2214c:	blx	r3
   22150:	cmp	r6, r4
   22154:	bne	22138 <__assert_fail@plt+0xf938>
   22158:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2215c:	andeq	r3, r1, r8, lsr #20
   22160:	andeq	r3, r1, r0, lsr #20
   22164:	bx	lr
   22168:	ldr	r3, [pc, #12]	; 2217c <__assert_fail@plt+0xf97c>
   2216c:	mov	r1, #0
   22170:	add	r3, pc, r3
   22174:	ldr	r2, [r3]
   22178:	b	12548 <__cxa_atexit@plt>
   2217c:	andeq	r3, r1, ip, lsl #29

Disassembly of section .fini:

00022180 <.fini>:
   22180:	push	{r3, lr}
   22184:	pop	{r3, pc}
