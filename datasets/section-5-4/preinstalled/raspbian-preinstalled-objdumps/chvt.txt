
raspbian-preinstalled/chvt:     file format elf32-littlearm


Disassembly of section .init:

00010634 <.init>:
   10634:	push	{r3, lr}
   10638:	bl	10930 <close@plt+0x1ec>
   1063c:	pop	{r3, pc}

Disassembly of section .plt:

00010640 <strcmp@plt-0x14>:
   10640:	push	{lr}		; (str lr, [sp, #-4]!)
   10644:	ldr	lr, [pc, #4]	; 10650 <strcmp@plt-0x4>
   10648:	add	lr, pc, lr
   1064c:	ldr	pc, [lr, #8]!
   10650:			; <UNDEFINED> instruction: 0x000109b0

00010654 <strcmp@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2480]!	; 0x9b0

00010660 <strtol@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2472]!	; 0x9a8

0001066c <dcgettext@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2464]!	; 0x9a0

00010678 <__stack_chk_fail@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2456]!	; 0x998

00010684 <textdomain@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2448]!	; 0x990

00010690 <ioctl@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2440]!	; 0x988

0001069c <__libc_start_main@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2432]!	; 0x980

000106a8 <strerror@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2424]!	; 0x978

000106b4 <__vfprintf_chk@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2416]!	; 0x970

000106c0 <__gmon_start__@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2408]!	; 0x968

000106cc <open@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2400]!	; 0x960

000106d8 <exit@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2392]!	; 0x958

000106e4 <__errno_location@plt>:
   106e4:	add	ip, pc, #0, 12
   106e8:	add	ip, ip, #16, 20	; 0x10000
   106ec:	ldr	pc, [ip, #2384]!	; 0x950

000106f0 <__printf_chk@plt>:
   106f0:	add	ip, pc, #0, 12
   106f4:	add	ip, ip, #16, 20	; 0x10000
   106f8:	ldr	pc, [ip, #2376]!	; 0x948

000106fc <__fprintf_chk@plt>:
   106fc:	add	ip, pc, #0, 12
   10700:	add	ip, ip, #16, 20	; 0x10000
   10704:	ldr	pc, [ip, #2368]!	; 0x940

00010708 <setlocale@plt>:
   10708:	add	ip, pc, #0, 12
   1070c:	add	ip, ip, #16, 20	; 0x10000
   10710:	ldr	pc, [ip, #2360]!	; 0x938

00010714 <strrchr@plt>:
   10714:	add	ip, pc, #0, 12
   10718:	add	ip, ip, #16, 20	; 0x10000
   1071c:	ldr	pc, [ip, #2352]!	; 0x930

00010720 <bindtextdomain@plt>:
   10720:	add	ip, pc, #0, 12
   10724:	add	ip, ip, #16, 20	; 0x10000
   10728:	ldr	pc, [ip, #2344]!	; 0x928

0001072c <isatty@plt>:
   1072c:	add	ip, pc, #0, 12
   10730:	add	ip, ip, #16, 20	; 0x10000
   10734:	ldr	pc, [ip, #2336]!	; 0x920

00010738 <abort@plt>:
   10738:	add	ip, pc, #0, 12
   1073c:	add	ip, ip, #16, 20	; 0x10000
   10740:	ldr	pc, [ip, #2328]!	; 0x918

00010744 <close@plt>:
   10744:	add	ip, pc, #0, 12
   10748:	add	ip, ip, #16, 20	; 0x10000
   1074c:	ldr	pc, [ip, #2320]!	; 0x910

Disassembly of section .text:

00010750 <.text>:
   10750:	push	{r4, r5, r6, r7, r8, lr}
   10754:	mov	r7, r0
   10758:	ldr	r4, [r1]
   1075c:	mov	r5, r1
   10760:	mov	r0, r4
   10764:	mov	r1, #47	; 0x2f
   10768:	bl	10714 <strrchr@plt>
   1076c:	ldr	r6, [pc, #328]	; 108bc <close@plt+0x178>
   10770:	ldr	r1, [pc, #328]	; 108c0 <close@plt+0x17c>
   10774:	cmp	r0, #0
   10778:	addne	r4, r0, #1
   1077c:	mov	r0, #6
   10780:	str	r4, [r6]
   10784:	bl	10708 <setlocale@plt>
   10788:	ldr	r1, [pc, #308]	; 108c4 <close@plt+0x180>
   1078c:	ldr	r0, [pc, #308]	; 108c8 <close@plt+0x184>
   10790:	bl	10720 <bindtextdomain@plt>
   10794:	ldr	r0, [pc, #300]	; 108c8 <close@plt+0x184>
   10798:	bl	10684 <textdomain@plt>
   1079c:	cmp	r7, #2
   107a0:	beq	107d4 <close@plt+0x90>
   107a4:	ldr	r3, [pc, #288]	; 108cc <close@plt+0x188>
   107a8:	mov	r2, #5
   107ac:	ldr	r1, [pc, #284]	; 108d0 <close@plt+0x18c>
   107b0:	mov	r0, #0
   107b4:	ldr	r4, [r3]
   107b8:	bl	1066c <dcgettext@plt>
   107bc:	mov	r1, #1
   107c0:	mov	r2, r0
   107c4:	mov	r0, r4
   107c8:	bl	106fc <__fprintf_chk@plt>
   107cc:	mov	r0, #1
   107d0:	pop	{r4, r5, r6, r7, r8, pc}
   107d4:	ldr	r1, [pc, #248]	; 108d4 <close@plt+0x190>
   107d8:	ldr	r0, [r5, #4]
   107dc:	bl	10654 <strcmp@plt>
   107e0:	subs	r4, r0, #0
   107e4:	beq	10894 <close@plt+0x150>
   107e8:	mov	r0, #0
   107ec:	bl	10aa8 <close@plt+0x364>
   107f0:	subs	r4, r0, #0
   107f4:	blt	10870 <close@plt+0x12c>
   107f8:	ldr	r0, [r5, #4]
   107fc:	mov	r2, #10
   10800:	mov	r1, #0
   10804:	bl	10660 <strtol@plt>
   10808:	ldr	r1, [pc, #200]	; 108d8 <close@plt+0x194>
   1080c:	mov	r2, r0
   10810:	mov	r5, r0
   10814:	mov	r0, r4
   10818:	bl	10690 <ioctl@plt>
   1081c:	cmp	r0, #0
   10820:	bne	10858 <close@plt+0x114>
   10824:	mov	r2, r5
   10828:	mov	r0, r4
   1082c:	ldr	r1, [pc, #168]	; 108dc <close@plt+0x198>
   10830:	bl	10690 <ioctl@plt>
   10834:	cmp	r0, #0
   10838:	popeq	{r4, r5, r6, r7, r8, pc}
   1083c:	bl	106e4 <__errno_location@plt>
   10840:	ldr	r2, [pc, #152]	; 108e0 <close@plt+0x19c>
   10844:	ldr	r1, [r0]
   10848:	mov	r0, #1
   1084c:	bl	10c6c <close@plt+0x528>
   10850:	mov	r0, #0
   10854:	pop	{r4, r5, r6, r7, r8, pc}
   10858:	bl	106e4 <__errno_location@plt>
   1085c:	ldr	r2, [pc, #128]	; 108e4 <close@plt+0x1a0>
   10860:	ldr	r1, [r0]
   10864:	mov	r0, #1
   10868:	bl	10c6c <close@plt+0x528>
   1086c:	b	10824 <close@plt+0xe0>
   10870:	mov	r2, #5
   10874:	ldr	r1, [pc, #108]	; 108e8 <close@plt+0x1a4>
   10878:	mov	r0, #0
   1087c:	bl	1066c <dcgettext@plt>
   10880:	mov	r1, #0
   10884:	mov	r2, r0
   10888:	mov	r0, #1
   1088c:	bl	10c6c <close@plt+0x528>
   10890:	b	107f8 <close@plt+0xb4>
   10894:	mov	r2, #5
   10898:	ldr	r1, [pc, #76]	; 108ec <close@plt+0x1a8>
   1089c:	bl	1066c <dcgettext@plt>
   108a0:	ldr	r2, [r6]
   108a4:	ldr	r3, [pc, #68]	; 108f0 <close@plt+0x1ac>
   108a8:	mov	r1, r0
   108ac:	mov	r0, #1
   108b0:	bl	106f0 <__printf_chk@plt>
   108b4:	mov	r0, r4
   108b8:	bl	106d8 <exit@plt>
   108bc:	andeq	r1, r2, r8, ror r0
   108c0:	muleq	r1, r8, lr
   108c4:	andeq	r0, r1, ip, ror sp
   108c8:	muleq	r1, r0, sp
   108cc:	andeq	r1, r2, r0, ror r0
   108d0:			; <UNDEFINED> instruction: 0x00010db0
   108d4:	muleq	r1, r4, sp
   108d8:	andeq	r5, r0, r6, lsl #12
   108dc:	andeq	r5, r0, r7, lsl #12
   108e0:	andeq	r0, r1, ip, lsl #28
   108e4:	strdeq	r0, [r1], -r8
   108e8:	andeq	r0, r1, r0, asr #27
   108ec:	muleq	r1, r8, sp
   108f0:	andeq	r0, r1, r4, lsr #27
   108f4:	mov	fp, #0
   108f8:	mov	lr, #0
   108fc:	pop	{r1}		; (ldr r1, [sp], #4)
   10900:	mov	r2, sp
   10904:	push	{r2}		; (str r2, [sp, #-4]!)
   10908:	push	{r0}		; (str r0, [sp, #-4]!)
   1090c:	ldr	ip, [pc, #16]	; 10924 <close@plt+0x1e0>
   10910:	push	{ip}		; (str ip, [sp, #-4]!)
   10914:	ldr	r0, [pc, #12]	; 10928 <close@plt+0x1e4>
   10918:	ldr	r3, [pc, #12]	; 1092c <close@plt+0x1e8>
   1091c:	bl	1069c <__libc_start_main@plt>
   10920:	bl	10738 <abort@plt>
   10924:	andeq	r0, r1, ip, ror #26
   10928:	andeq	r0, r1, r0, asr r7
   1092c:	andeq	r0, r1, ip, lsl #26
   10930:	ldr	r3, [pc, #20]	; 1094c <close@plt+0x208>
   10934:	ldr	r2, [pc, #20]	; 10950 <close@plt+0x20c>
   10938:	add	r3, pc, r3
   1093c:	ldr	r2, [r3, r2]
   10940:	cmp	r2, #0
   10944:	bxeq	lr
   10948:	b	106c0 <__gmon_start__@plt>
   1094c:	andeq	r0, r1, r0, asr #13
   10950:	andeq	r0, r0, r0, rrx
   10954:	ldr	r0, [pc, #24]	; 10974 <close@plt+0x230>
   10958:	ldr	r3, [pc, #24]	; 10978 <close@plt+0x234>
   1095c:	cmp	r3, r0
   10960:	bxeq	lr
   10964:	ldr	r3, [pc, #16]	; 1097c <close@plt+0x238>
   10968:	cmp	r3, #0
   1096c:	bxeq	lr
   10970:	bx	r3
   10974:	andeq	r1, r2, ip, rrx
   10978:	andeq	r1, r2, ip, rrx
   1097c:	andeq	r0, r0, r0
   10980:	ldr	r0, [pc, #36]	; 109ac <close@plt+0x268>
   10984:	ldr	r1, [pc, #36]	; 109b0 <close@plt+0x26c>
   10988:	sub	r1, r1, r0
   1098c:	asr	r1, r1, #2
   10990:	add	r1, r1, r1, lsr #31
   10994:	asrs	r1, r1, #1
   10998:	bxeq	lr
   1099c:	ldr	r3, [pc, #16]	; 109b4 <close@plt+0x270>
   109a0:	cmp	r3, #0
   109a4:	bxeq	lr
   109a8:	bx	r3
   109ac:	andeq	r1, r2, ip, rrx
   109b0:	andeq	r1, r2, ip, rrx
   109b4:	andeq	r0, r0, r0
   109b8:	push	{r4, lr}
   109bc:	ldr	r4, [pc, #24]	; 109dc <close@plt+0x298>
   109c0:	ldrb	r3, [r4]
   109c4:	cmp	r3, #0
   109c8:	popne	{r4, pc}
   109cc:	bl	10954 <close@plt+0x210>
   109d0:	mov	r3, #1
   109d4:	strb	r3, [r4]
   109d8:	pop	{r4, pc}
   109dc:	andeq	r1, r2, r4, ror r0
   109e0:	b	10980 <close@plt+0x23c>
   109e4:	push	{r4, lr}
   109e8:	mov	r1, #2
   109ec:	mov	r4, r0
   109f0:	bl	106cc <open@plt>
   109f4:	cmp	r0, #0
   109f8:	popge	{r4, pc}
   109fc:	mov	r1, #1
   10a00:	mov	r0, r4
   10a04:	bl	106cc <open@plt>
   10a08:	cmp	r0, #0
   10a0c:	popge	{r4, pc}
   10a10:	mov	r0, r4
   10a14:	mov	r1, #0
   10a18:	bl	106cc <open@plt>
   10a1c:	orr	r0, r0, r0, asr #31
   10a20:	pop	{r4, pc}
   10a24:	push	{r4, r5, lr}
   10a28:	sub	sp, sp, #12
   10a2c:	ldr	r4, [pc, #108]	; 10aa0 <close@plt+0x35c>
   10a30:	mov	r3, #0
   10a34:	strb	r3, [sp, #3]
   10a38:	ldr	r3, [r4]
   10a3c:	mov	r5, r0
   10a40:	str	r3, [sp, #4]
   10a44:	bl	1072c <isatty@plt>
   10a48:	cmp	r0, #0
   10a4c:	bne	10a6c <close@plt+0x328>
   10a50:	mov	r0, #0
   10a54:	ldr	r2, [sp, #4]
   10a58:	ldr	r3, [r4]
   10a5c:	cmp	r2, r3
   10a60:	bne	10a9c <close@plt+0x358>
   10a64:	add	sp, sp, #12
   10a68:	pop	{r4, r5, pc}
   10a6c:	mov	r0, r5
   10a70:	add	r2, sp, #3
   10a74:	ldr	r1, [pc, #40]	; 10aa4 <close@plt+0x360>
   10a78:	bl	10690 <ioctl@plt>
   10a7c:	cmp	r0, #0
   10a80:	bne	10a50 <close@plt+0x30c>
   10a84:	ldrb	r0, [sp, #3]
   10a88:	sub	r0, r0, #1
   10a8c:	cmp	r0, #1
   10a90:	movhi	r0, #0
   10a94:	movls	r0, #1
   10a98:	b	10a54 <close@plt+0x310>
   10a9c:	bl	10678 <__stack_chk_fail@plt>
   10aa0:	andeq	r0, r2, r8, lsl #30
   10aa4:	andeq	r4, r0, r3, lsr fp
   10aa8:	push	{r4, r5, r6, lr}
   10aac:	subs	r5, r0, #0
   10ab0:	beq	10ad4 <close@plt+0x390>
   10ab4:	bl	109e4 <close@plt+0x2a0>
   10ab8:	subs	r4, r0, #0
   10abc:	blt	10b6c <close@plt+0x428>
   10ac0:	bl	10a24 <close@plt+0x2e0>
   10ac4:	cmp	r0, #0
   10ac8:	beq	10b64 <close@plt+0x420>
   10acc:	mov	r0, r4
   10ad0:	pop	{r4, r5, r6, pc}
   10ad4:	ldr	r5, [pc, #196]	; 10ba0 <close@plt+0x45c>
   10ad8:	ldr	r0, [pc, #196]	; 10ba4 <close@plt+0x460>
   10adc:	b	10aec <close@plt+0x3a8>
   10ae0:	ldr	r0, [r5], #4
   10ae4:	cmp	r0, #0
   10ae8:	beq	10b18 <close@plt+0x3d4>
   10aec:	bl	109e4 <close@plt+0x2a0>
   10af0:	subs	r4, r0, #0
   10af4:	blt	10ae0 <close@plt+0x39c>
   10af8:	bl	10a24 <close@plt+0x2e0>
   10afc:	cmp	r0, #0
   10b00:	bne	10acc <close@plt+0x388>
   10b04:	mov	r0, r4
   10b08:	bl	10744 <close@plt>
   10b0c:	ldr	r0, [r5], #4
   10b10:	cmp	r0, #0
   10b14:	bne	10aec <close@plt+0x3a8>
   10b18:	mov	r4, r0
   10b1c:	mov	r0, r4
   10b20:	bl	10a24 <close@plt+0x2e0>
   10b24:	cmp	r0, #0
   10b28:	bne	10acc <close@plt+0x388>
   10b2c:	add	r4, r4, #1
   10b30:	cmp	r4, #3
   10b34:	bne	10b1c <close@plt+0x3d8>
   10b38:	ldr	r3, [pc, #104]	; 10ba8 <close@plt+0x464>
   10b3c:	mov	r2, #5
   10b40:	ldr	r1, [pc, #100]	; 10bac <close@plt+0x468>
   10b44:	ldr	r4, [r3]
   10b48:	bl	1066c <dcgettext@plt>
   10b4c:	mov	r1, #1
   10b50:	mov	r2, r0
   10b54:	mov	r0, r4
   10b58:	bl	106fc <__fprintf_chk@plt>
   10b5c:	mov	r0, #1
   10b60:	bl	106d8 <exit@plt>
   10b64:	mov	r0, r4
   10b68:	bl	10744 <close@plt>
   10b6c:	ldr	r3, [pc, #52]	; 10ba8 <close@plt+0x464>
   10b70:	mov	r2, #5
   10b74:	ldr	r1, [pc, #52]	; 10bb0 <close@plt+0x46c>
   10b78:	mov	r0, #0
   10b7c:	ldr	r4, [r3]
   10b80:	bl	1066c <dcgettext@plt>
   10b84:	mov	r3, r5
   10b88:	mov	r1, #1
   10b8c:	mov	r2, r0
   10b90:	mov	r0, r4
   10b94:	bl	106fc <__fprintf_chk@plt>
   10b98:	mov	r0, #1
   10b9c:	bl	106d8 <exit@plt>
   10ba0:	andeq	r0, r1, r4, lsr #28
   10ba4:	andeq	r0, r1, ip, lsr lr
   10ba8:	andeq	r1, r2, r0, ror r0
   10bac:	andeq	r0, r1, r0, ror #28
   10bb0:	andeq	r0, r1, ip, asr #28
   10bb4:	push	{r1, r2, r3}
   10bb8:	push	{r4, r5, r6, r7, lr}
   10bbc:	sub	sp, sp, #8
   10bc0:	ldr	r5, [pc, #144]	; 10c58 <close@plt+0x514>
   10bc4:	ldr	r4, [pc, #144]	; 10c5c <close@plt+0x518>
   10bc8:	ldr	r3, [pc, #144]	; 10c60 <close@plt+0x51c>
   10bcc:	ldr	r1, [r5]
   10bd0:	ldr	r7, [sp, #28]
   10bd4:	add	ip, sp, #32
   10bd8:	mov	r6, r0
   10bdc:	ldr	r3, [r3]
   10be0:	ldr	r2, [pc, #124]	; 10c64 <close@plt+0x520>
   10be4:	str	r1, [sp, #4]
   10be8:	ldr	r0, [r4]
   10bec:	mov	r1, #1
   10bf0:	str	ip, [sp]
   10bf4:	bl	106fc <__fprintf_chk@plt>
   10bf8:	mov	r2, r7
   10bfc:	ldr	r0, [r4]
   10c00:	ldr	r3, [sp]
   10c04:	mov	r1, #1
   10c08:	bl	106b4 <__vfprintf_chk@plt>
   10c0c:	cmp	r6, #0
   10c10:	ble	10c34 <close@plt+0x4f0>
   10c14:	mov	r0, r6
   10c18:	ldr	r4, [r4]
   10c1c:	bl	106a8 <strerror@plt>
   10c20:	ldr	r2, [pc, #64]	; 10c68 <close@plt+0x524>
   10c24:	mov	r1, #1
   10c28:	mov	r3, r0
   10c2c:	mov	r0, r4
   10c30:	bl	106fc <__fprintf_chk@plt>
   10c34:	ldr	r2, [sp, #4]
   10c38:	ldr	r3, [r5]
   10c3c:	cmp	r2, r3
   10c40:	bne	10c54 <close@plt+0x510>
   10c44:	add	sp, sp, #8
   10c48:	pop	{r4, r5, r6, r7, lr}
   10c4c:	add	sp, sp, #12
   10c50:	bx	lr
   10c54:	bl	10678 <__stack_chk_fail@plt>
   10c58:	andeq	r0, r2, r8, lsl #30
   10c5c:	andeq	r1, r2, r0, ror r0
   10c60:	andeq	r1, r2, r8, ror r0
   10c64:	ldrdeq	r0, [r1], -ip
   10c68:	andeq	r0, r1, r4, ror #29
   10c6c:	push	{r2, r3}
   10c70:	mov	r5, r1
   10c74:	ldr	r2, [pc, #124]	; 10cf8 <close@plt+0x5b4>
   10c78:	push	{r7, lr}
   10c7c:	sub	sp, sp, #8
   10c80:	ldr	r4, [pc, #116]	; 10cfc <close@plt+0x5b8>
   10c84:	ldr	r3, [pc, #116]	; 10d00 <close@plt+0x5bc>
   10c88:	ldr	lr, [r2]
   10c8c:	ldr	r7, [sp, #16]
   10c90:	add	ip, sp, #20
   10c94:	ldr	r3, [r3]
   10c98:	ldr	r2, [pc, #100]	; 10d04 <close@plt+0x5c0>
   10c9c:	mov	r1, #1
   10ca0:	mov	r6, r0
   10ca4:	ldr	r0, [r4]
   10ca8:	str	lr, [sp, #4]
   10cac:	str	ip, [sp]
   10cb0:	bl	106fc <__fprintf_chk@plt>
   10cb4:	mov	r2, r7
   10cb8:	ldr	r0, [r4]
   10cbc:	ldr	r3, [sp]
   10cc0:	mov	r1, #1
   10cc4:	bl	106b4 <__vfprintf_chk@plt>
   10cc8:	cmp	r5, #0
   10ccc:	ble	10cf0 <close@plt+0x5ac>
   10cd0:	mov	r0, r5
   10cd4:	ldr	r4, [r4]
   10cd8:	bl	106a8 <strerror@plt>
   10cdc:	ldr	r2, [pc, #36]	; 10d08 <close@plt+0x5c4>
   10ce0:	mov	r1, #1
   10ce4:	mov	r3, r0
   10ce8:	mov	r0, r4
   10cec:	bl	106fc <__fprintf_chk@plt>
   10cf0:	mov	r0, r6
   10cf4:	bl	106d8 <exit@plt>
   10cf8:	andeq	r0, r2, r8, lsl #30
   10cfc:	andeq	r1, r2, r0, ror r0
   10d00:	andeq	r1, r2, r8, ror r0
   10d04:	ldrdeq	r0, [r1], -ip
   10d08:	andeq	r0, r1, r4, ror #29
   10d0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d10:	mov	r7, r0
   10d14:	ldr	r6, [pc, #72]	; 10d64 <close@plt+0x620>
   10d18:	ldr	r5, [pc, #72]	; 10d68 <close@plt+0x624>
   10d1c:	add	r6, pc, r6
   10d20:	add	r5, pc, r5
   10d24:	sub	r6, r6, r5
   10d28:	mov	r8, r1
   10d2c:	mov	r9, r2
   10d30:	bl	10634 <strcmp@plt-0x20>
   10d34:	asrs	r6, r6, #2
   10d38:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d3c:	mov	r4, #0
   10d40:	add	r4, r4, #1
   10d44:	ldr	r3, [r5], #4
   10d48:	mov	r2, r9
   10d4c:	mov	r1, r8
   10d50:	mov	r0, r7
   10d54:	blx	r3
   10d58:	cmp	r6, r4
   10d5c:	bne	10d40 <close@plt+0x5fc>
   10d60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d64:	andeq	r0, r1, r0, ror #3
   10d68:	ldrdeq	r0, [r1], -r8
   10d6c:	bx	lr

Disassembly of section .fini:

00010d70 <.fini>:
   10d70:	push	{r3, lr}
   10d74:	pop	{r3, pc}
