
raspbian-preinstalled/arm-linux-gnueabihf-strings:     file format elf32-littlearm


Disassembly of section .init:

00010fe4 <.init>:
   10fe4:	push	{r3, lr}
   10fe8:	bl	11b88 <__assert_fail@plt+0x848>
   10fec:	pop	{r3, pc}

Disassembly of section .plt:

00010ff0 <bfd_scan_vma@plt-0x14>:
   10ff0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ff4:	ldr	lr, [pc, #4]	; 11000 <bfd_scan_vma@plt-0x4>
   10ff8:	add	lr, pc, lr
   10ffc:	ldr	pc, [lr, #8]!
   11000:	andeq	r4, r1, r0

00011004 <bfd_scan_vma@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #20, 20	; 0x14000
   1100c:	ldr	pc, [ip, #0]!

00011010 <strcmp@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #77824	; 0x13000
   11018:	ldr	pc, [ip, #4088]!	; 0xff8

0001101c <strtol@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #77824	; 0x13000
   11024:	ldr	pc, [ip, #4080]!	; 0xff0

00011028 <printf@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #77824	; 0x13000
   11030:	ldr	pc, [ip, #4072]!	; 0xfe8

00011034 <fflush@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #77824	; 0x13000
   1103c:	ldr	pc, [ip, #4064]!	; 0xfe0

00011040 <bfd_arch_list@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #77824	; 0x13000
   11048:	ldr	pc, [ip, #4056]!	; 0xfd8

0001104c <memmove@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #77824	; 0x13000
   11054:	ldr	pc, [ip, #4048]!	; 0xfd0

00011058 <bfd_set_default_target@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #77824	; 0x13000
   11060:	ldr	pc, [ip, #4040]!	; 0xfc8

00011064 <free@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #77824	; 0x13000
   1106c:	ldr	pc, [ip, #4032]!	; 0xfc0

00011070 <ferror@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #77824	; 0x13000
   11078:	ldr	pc, [ip, #4024]!	; 0xfb8

0001107c <memcpy@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #77824	; 0x13000
   11084:	ldr	pc, [ip, #4016]!	; 0xfb0

00011088 <bfd_malloc_and_get_section@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #77824	; 0x13000
   11090:	ldr	pc, [ip, #4008]!	; 0xfa8

00011094 <bfd_openr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #77824	; 0x13000
   1109c:	ldr	pc, [ip, #4000]!	; 0xfa0

000110a0 <ftell@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #77824	; 0x13000
   110a8:	ldr	pc, [ip, #3992]!	; 0xf98

000110ac <ctime@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #77824	; 0x13000
   110b4:	ldr	pc, [ip, #3984]!	; 0xf90

000110b8 <dcgettext@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #77824	; 0x13000
   110c0:	ldr	pc, [ip, #3976]!	; 0xf88

000110c4 <unlink@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #77824	; 0x13000
   110cc:	ldr	pc, [ip, #3968]!	; 0xf80

000110d0 <xrealloc@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #77824	; 0x13000
   110d8:	ldr	pc, [ip, #3960]!	; 0xf78

000110dc <textdomain@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #77824	; 0x13000
   110e4:	ldr	pc, [ip, #3952]!	; 0xf70

000110e8 <perror@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #77824	; 0x13000
   110f0:	ldr	pc, [ip, #3944]!	; 0xf68

000110f4 <bfd_target_list@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #77824	; 0x13000
   110fc:	ldr	pc, [ip, #3936]!	; 0xf60

00011100 <bfd_get_error@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #77824	; 0x13000
   11108:	ldr	pc, [ip, #3928]!	; 0xf58

0001110c <fwrite@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #77824	; 0x13000
   11114:	ldr	pc, [ip, #3920]!	; 0xf50

00011118 <xmalloc@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #77824	; 0x13000
   11120:	ldr	pc, [ip, #3912]!	; 0xf48

00011124 <xmalloc_set_program_name@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #77824	; 0x13000
   1112c:	ldr	pc, [ip, #3904]!	; 0xf40

00011130 <xstrdup@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #77824	; 0x13000
   11138:	ldr	pc, [ip, #3896]!	; 0xf38

0001113c <strcpy@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #77824	; 0x13000
   11144:	ldr	pc, [ip, #3888]!	; 0xf30

00011148 <fread@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #77824	; 0x13000
   11150:	ldr	pc, [ip, #3880]!	; 0xf28

00011154 <bfd_init@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #77824	; 0x13000
   1115c:	ldr	pc, [ip, #3872]!	; 0xf20

00011160 <mkstemps64@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #77824	; 0x13000
   11168:	ldr	pc, [ip, #3864]!	; 0xf18

0001116c <getenv@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #77824	; 0x13000
   11174:	ldr	pc, [ip, #3856]!	; 0xf10

00011178 <mkstemp64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #77824	; 0x13000
   11180:	ldr	pc, [ip, #3848]!	; 0xf08

00011184 <__libc_start_main@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #77824	; 0x13000
   1118c:	ldr	pc, [ip, #3840]!	; 0xf00

00011190 <strerror@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #77824	; 0x13000
   11198:	ldr	pc, [ip, #3832]!	; 0xef8

0001119c <__gmon_start__@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #77824	; 0x13000
   111a4:	ldr	pc, [ip, #3824]!	; 0xef0

000111a8 <bfd_set_format@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #77824	; 0x13000
   111b0:	ldr	pc, [ip, #3816]!	; 0xee8

000111b4 <getopt_long@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #77824	; 0x13000
   111bc:	ldr	pc, [ip, #3808]!	; 0xee0

000111c0 <exit@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #77824	; 0x13000
   111c8:	ldr	pc, [ip, #3800]!	; 0xed8

000111cc <strtoul@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #77824	; 0x13000
   111d4:	ldr	pc, [ip, #3792]!	; 0xed0

000111d8 <strlen@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #77824	; 0x13000
   111e0:	ldr	pc, [ip, #3784]!	; 0xec8

000111e4 <bfd_close_all_done@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #77824	; 0x13000
   111ec:	ldr	pc, [ip, #3776]!	; 0xec0

000111f0 <fprintf@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #77824	; 0x13000
   111f8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111fc <bfd_printable_arch_mach@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #77824	; 0x13000
   11204:	ldr	pc, [ip, #3760]!	; 0xeb0

00011208 <__errno_location@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #77824	; 0x13000
   11210:	ldr	pc, [ip, #3752]!	; 0xea8

00011214 <bfd_iterate_over_targets@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #77824	; 0x13000
   1121c:	ldr	pc, [ip, #3744]!	; 0xea0

00011220 <memset@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #77824	; 0x13000
   11228:	ldr	pc, [ip, #3736]!	; 0xe98

0001122c <access@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #77824	; 0x13000
   11234:	ldr	pc, [ip, #3728]!	; 0xe90

00011238 <fclose@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #77824	; 0x13000
   11240:	ldr	pc, [ip, #3720]!	; 0xe88

00011244 <bfd_openw@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #77824	; 0x13000
   1124c:	ldr	pc, [ip, #3712]!	; 0xe80

00011250 <bfd_set_error_program_name@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #77824	; 0x13000
   11258:	ldr	pc, [ip, #3704]!	; 0xe78

0001125c <__uflow@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #77824	; 0x13000
   11264:	ldr	pc, [ip, #3696]!	; 0xe70

00011268 <setlocale@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #77824	; 0x13000
   11270:	ldr	pc, [ip, #3688]!	; 0xe68

00011274 <strrchr@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #77824	; 0x13000
   1127c:	ldr	pc, [ip, #3680]!	; 0xe60

00011280 <vfprintf@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #77824	; 0x13000
   11288:	ldr	pc, [ip, #3672]!	; 0xe58

0001128c <fputc@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #77824	; 0x13000
   11294:	ldr	pc, [ip, #3664]!	; 0xe50

00011298 <xexit@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #77824	; 0x13000
   112a0:	ldr	pc, [ip, #3656]!	; 0xe48

000112a4 <bfd_close@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #77824	; 0x13000
   112ac:	ldr	pc, [ip, #3648]!	; 0xe40

000112b0 <sprintf@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #77824	; 0x13000
   112b8:	ldr	pc, [ip, #3640]!	; 0xe38

000112bc <mkdtemp@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #77824	; 0x13000
   112c4:	ldr	pc, [ip, #3632]!	; 0xe30

000112c8 <putc@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #77824	; 0x13000
   112d0:	ldr	pc, [ip, #3624]!	; 0xe28

000112d4 <fopen64@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #77824	; 0x13000
   112dc:	ldr	pc, [ip, #3616]!	; 0xe20

000112e0 <bfd_errmsg@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #77824	; 0x13000
   112e8:	ldr	pc, [ip, #3608]!	; 0xe18

000112ec <bindtextdomain@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #77824	; 0x13000
   112f4:	ldr	pc, [ip, #3600]!	; 0xe10

000112f8 <bfd_check_format@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #77824	; 0x13000
   11300:	ldr	pc, [ip, #3592]!	; 0xe08

00011304 <fseek@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #77824	; 0x13000
   1130c:	ldr	pc, [ip, #3584]!	; 0xe00

00011310 <__xstat64@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #77824	; 0x13000
   11318:	ldr	pc, [ip, #3576]!	; 0xdf8

0001131c <fputs@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #77824	; 0x13000
   11324:	ldr	pc, [ip, #3568]!	; 0xdf0

00011328 <abort@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #77824	; 0x13000
   11330:	ldr	pc, [ip, #3560]!	; 0xde8

00011334 <close@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #77824	; 0x13000
   1133c:	ldr	pc, [ip, #3552]!	; 0xde0

00011340 <__assert_fail@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #77824	; 0x13000
   11348:	ldr	pc, [ip, #3544]!	; 0xdd8

Disassembly of section .text:

0001134c <.text>:
   1134c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11350:	sub	sp, sp, #148	; 0x94
   11354:	ldr	r4, [pc, #1936]	; 11aec <__assert_fail@plt+0x7ac>
   11358:	str	r0, [sp, #28]
   1135c:	str	r1, [sp, #24]
   11360:	mov	r0, #6
   11364:	ldr	r1, [pc, #1924]	; 11af0 <__assert_fail@plt+0x7b0>
   11368:	bl	11268 <setlocale@plt>
   1136c:	ldr	r1, [pc, #1920]	; 11af4 <__assert_fail@plt+0x7b4>
   11370:	ldr	r0, [pc, #1920]	; 11af8 <__assert_fail@plt+0x7b8>
   11374:	bl	112ec <bindtextdomain@plt>
   11378:	ldr	r0, [pc, #1912]	; 11af8 <__assert_fail@plt+0x7b8>
   1137c:	bl	110dc <textdomain@plt>
   11380:	ldr	r3, [sp, #24]
   11384:	ldr	r2, [pc, #1904]	; 11afc <__assert_fail@plt+0x7bc>
   11388:	ldr	r7, [pc, #1904]	; 11b00 <__assert_fail@plt+0x7c0>
   1138c:	ldr	r3, [r3]
   11390:	mov	r5, r2
   11394:	mov	r0, r3
   11398:	str	r3, [r2]
   1139c:	bl	11124 <xmalloc_set_program_name@plt>
   113a0:	ldr	r0, [r5]
   113a4:	bl	11250 <bfd_set_error_program_name@plt>
   113a8:	add	r1, sp, #24
   113ac:	add	r0, sp, #28
   113b0:	bl	133b0 <__assert_fail@plt+0x2070>
   113b4:	ldr	r6, [pc, #1864]	; 11b04 <__assert_fail@plt+0x7c4>
   113b8:	mov	r3, #0
   113bc:	ldr	fp, [pc, #1860]	; 11b08 <__assert_fail@plt+0x7c8>
   113c0:	ldr	sl, [pc, #1860]	; 11b0c <__assert_fail@plt+0x7cc>
   113c4:	ldr	r8, [pc, #1860]	; 11b10 <__assert_fail@plt+0x7d0>
   113c8:	mov	r9, r3
   113cc:	mov	r5, r3
   113d0:	mov	r1, #4
   113d4:	mov	r2, #115	; 0x73
   113d8:	str	r3, [r4, #12]
   113dc:	str	r3, [r4, #20]
   113e0:	str	r3, [r4, #16]
   113e4:	str	r3, [r4, #32]
   113e8:	str	r3, [r4, #36]	; 0x24
   113ec:	str	r3, [r4, #28]
   113f0:	str	r1, [r4, #8]
   113f4:	strb	r2, [r4, #4]
   113f8:	str	r5, [sp]
   113fc:	mov	r3, r7
   11400:	mov	r2, r6
   11404:	ldr	r1, [sp, #24]
   11408:	ldr	r0, [sp, #28]
   1140c:	bl	111b4 <getopt_long@plt>
   11410:	cmn	r0, #1
   11414:	beq	11638 <__assert_fail@plt+0x2f8>
   11418:	sub	r0, r0, #63	; 0x3f
   1141c:	cmp	r0, #56	; 0x38
   11420:	ldrls	pc, [pc, r0, lsl #2]
   11424:	b	11604 <__assert_fail@plt+0x2c4>
   11428:			; <UNDEFINED> instruction: 0x00011ab4
   1142c:	andeq	r1, r1, r4, lsl #12
   11430:	andeq	r1, r1, r4, lsl #12
   11434:	andeq	r1, r1, r4, lsl #12
   11438:	andeq	r1, r1, r4, lsl #12
   1143c:	andeq	r1, r1, r4, lsl #12
   11440:	andeq	r1, r1, r4, lsl #12
   11444:	andeq	r1, r1, r4, lsl #12
   11448:	andeq	r1, r1, r4, lsl #12
   1144c:	andeq	r1, r1, r4, asr #21
   11450:	andeq	r1, r1, r4, lsl #12
   11454:	andeq	r1, r1, r4, lsl #12
   11458:	andeq	r1, r1, r4, lsl #12
   1145c:	andeq	r1, r1, r4, lsl #12
   11460:	andeq	r1, r1, r4, lsl #12
   11464:	andeq	r1, r1, r4, lsl #12
   11468:	andeq	r1, r1, r4, lsl #12
   1146c:	andeq	r1, r1, r4, lsl #12
   11470:	andeq	r1, r1, r4, lsl #12
   11474:	andeq	r1, r1, r4, lsl #12
   11478:	andeq	r1, r1, r4, lsl #12
   1147c:	strdeq	r1, [r1], -r8
   11480:	andeq	r1, r1, r4, lsl #12
   11484:	andeq	r1, r1, ip, ror #11
   11488:	andeq	r1, r1, r4, lsl #12
   1148c:	andeq	r1, r1, r4, lsl #12
   11490:	andeq	r1, r1, r4, lsl #12
   11494:	andeq	r1, r1, r4, lsl #12
   11498:	andeq	r1, r1, r4, lsl #12
   1149c:	andeq	r1, r1, r4, lsl #12
   114a0:	andeq	r1, r1, r4, lsl #12
   114a4:	andeq	r1, r1, r4, lsl #12
   114a8:	andeq	r1, r1, r4, lsl #12
   114ac:	andeq	r1, r1, r4, lsl #12
   114b0:	andeq	r1, r1, r4, ror #11
   114b4:	andeq	r1, r1, r4, lsl #12
   114b8:	andeq	r1, r1, r4, lsl #12
   114bc:	ldrdeq	r1, [r1], -r8
   114c0:			; <UNDEFINED> instruction: 0x000115bc
   114c4:			; <UNDEFINED> instruction: 0x000115b0
   114c8:	andeq	r1, r1, r4, lsl #12
   114cc:	andeq	r1, r1, r4, asr #21
   114d0:	andeq	r1, r1, r4, lsl #12
   114d4:	andeq	r1, r1, r4, lsl #12
   114d8:	andeq	r1, r1, r4, lsl #12
   114dc:	andeq	r1, r1, r4, lsl #12
   114e0:	andeq	r1, r1, r4, lsl #12
   114e4:	andeq	r1, r1, ip, ror #10
   114e8:	andeq	r1, r1, ip, asr r5
   114ec:	andeq	r1, r1, r4, lsl #12
   114f0:	andeq	r1, r1, r4, lsl #12
   114f4:	andeq	r1, r1, r4, lsl #12
   114f8:	andeq	r1, r1, r0, asr r5
   114fc:	andeq	r1, r1, r8, lsl r5
   11500:	andeq	r1, r1, r4, lsl #12
   11504:	andeq	r1, r1, ip, ror #11
   11508:	andeq	r1, r1, ip, lsl #10
   1150c:	mov	r3, #1
   11510:	str	r3, [r4, #12]
   11514:	b	113f8 <__assert_fail@plt+0xb8>
   11518:	ldr	r3, [r8]
   1151c:	mov	r1, #1
   11520:	str	r1, [r4, #20]
   11524:	ldrb	r2, [r3, #1]
   11528:	cmp	r2, #0
   1152c:	bne	11614 <__assert_fail@plt+0x2d4>
   11530:	ldrb	r3, [r3]
   11534:	cmp	r3, #111	; 0x6f
   11538:	beq	11620 <__assert_fail@plt+0x2e0>
   1153c:	cmp	r3, #120	; 0x78
   11540:	bne	1160c <__assert_fail@plt+0x2cc>
   11544:	mov	r3, #16
   11548:	str	r3, [r4, #24]
   1154c:	b	113f8 <__assert_fail@plt+0xb8>
   11550:	ldr	r3, [r8]
   11554:	str	r3, [r4, #28]
   11558:	b	113f8 <__assert_fail@plt+0xb8>
   1155c:	mov	r2, #1
   11560:	mov	r3, #8
   11564:	strd	r2, [r4, #20]
   11568:	b	113f8 <__assert_fail@plt+0xb8>
   1156c:	mov	r2, #0
   11570:	add	r1, sp, #32
   11574:	ldr	r0, [r8]
   11578:	bl	111cc <strtoul@plt>
   1157c:	ldr	r3, [sp, #32]
   11580:	cmp	r3, #0
   11584:	str	r0, [r4, #8]
   11588:	beq	113f8 <__assert_fail@plt+0xb8>
   1158c:	ldrb	r3, [r3]
   11590:	cmp	r3, #0
   11594:	beq	113f8 <__assert_fail@plt+0xb8>
   11598:	ldr	r1, [pc, #1396]	; 11b14 <__assert_fail@plt+0x7d4>
   1159c:	mov	r2, #5
   115a0:	mov	r0, #0
   115a4:	bl	110b8 <dcgettext@plt>
   115a8:	ldr	r1, [r8]
   115ac:	bl	123d4 <__assert_fail@plt+0x1094>
   115b0:	mov	r3, #1
   115b4:	str	r3, [r4, #16]
   115b8:	b	113f8 <__assert_fail@plt+0xb8>
   115bc:	ldr	r3, [r8]
   115c0:	ldrb	r2, [r3, #1]
   115c4:	cmp	r2, #0
   115c8:	bne	11ab4 <__assert_fail@plt+0x774>
   115cc:	ldrb	r3, [r3]
   115d0:	strb	r3, [r4, #4]
   115d4:	b	113f8 <__assert_fail@plt+0xb8>
   115d8:	mov	r3, #1
   115dc:	str	r3, [r4, #32]
   115e0:	b	113f8 <__assert_fail@plt+0xb8>
   115e4:	str	r5, [r4, #32]
   115e8:	b	113f8 <__assert_fail@plt+0xb8>
   115ec:	mov	r0, sl
   115f0:	bl	12e5c <__assert_fail@plt+0x1b1c>
   115f4:	b	113f8 <__assert_fail@plt+0xb8>
   115f8:	ldr	r3, [r8]
   115fc:	str	r3, [r4, #36]	; 0x24
   11600:	b	113f8 <__assert_fail@plt+0xb8>
   11604:	ldr	r9, [fp]
   11608:	b	113f8 <__assert_fail@plt+0xb8>
   1160c:	cmp	r3, #100	; 0x64
   11610:	beq	1162c <__assert_fail@plt+0x2ec>
   11614:	ldr	r3, [pc, #1276]	; 11b18 <__assert_fail@plt+0x7d8>
   11618:	ldr	r0, [r3]
   1161c:	bl	11d38 <__assert_fail@plt+0x9f8>
   11620:	mov	r3, #8
   11624:	str	r3, [r4, #24]
   11628:	b	113f8 <__assert_fail@plt+0xb8>
   1162c:	mov	r3, #10
   11630:	str	r3, [r4, #24]
   11634:	b	113f8 <__assert_fail@plt+0xb8>
   11638:	cmp	r9, #0
   1163c:	bne	119d0 <__assert_fail@plt+0x690>
   11640:	ldr	r5, [r4, #8]
   11644:	cmp	r5, #0
   11648:	ble	11ad4 <__assert_fail@plt+0x794>
   1164c:	ldrb	r3, [r4, #4]
   11650:	sub	r3, r3, #66	; 0x42
   11654:	cmp	r3, #49	; 0x31
   11658:	ldrls	pc, [pc, r3, lsl #2]
   1165c:	b	11ab4 <__assert_fail@plt+0x774>
   11660:	andeq	r1, r1, r4, lsr #17
   11664:			; <UNDEFINED> instruction: 0x00011ab4
   11668:			; <UNDEFINED> instruction: 0x00011ab4
   1166c:			; <UNDEFINED> instruction: 0x00011ab4
   11670:			; <UNDEFINED> instruction: 0x00011ab4
   11674:			; <UNDEFINED> instruction: 0x00011ab4
   11678:			; <UNDEFINED> instruction: 0x00011ab4
   1167c:			; <UNDEFINED> instruction: 0x00011ab4
   11680:			; <UNDEFINED> instruction: 0x00011ab4
   11684:			; <UNDEFINED> instruction: 0x00011ab4
   11688:	andeq	r1, r1, r4, lsr #17
   1168c:			; <UNDEFINED> instruction: 0x00011ab4
   11690:			; <UNDEFINED> instruction: 0x00011ab4
   11694:			; <UNDEFINED> instruction: 0x00011ab4
   11698:			; <UNDEFINED> instruction: 0x00011ab4
   1169c:			; <UNDEFINED> instruction: 0x00011ab4
   116a0:			; <UNDEFINED> instruction: 0x00011ab4
   116a4:			; <UNDEFINED> instruction: 0x000118b0
   116a8:			; <UNDEFINED> instruction: 0x00011ab4
   116ac:			; <UNDEFINED> instruction: 0x00011ab4
   116b0:			; <UNDEFINED> instruction: 0x00011ab4
   116b4:			; <UNDEFINED> instruction: 0x00011ab4
   116b8:			; <UNDEFINED> instruction: 0x00011ab4
   116bc:			; <UNDEFINED> instruction: 0x00011ab4
   116c0:			; <UNDEFINED> instruction: 0x00011ab4
   116c4:			; <UNDEFINED> instruction: 0x00011ab4
   116c8:			; <UNDEFINED> instruction: 0x00011ab4
   116cc:			; <UNDEFINED> instruction: 0x00011ab4
   116d0:			; <UNDEFINED> instruction: 0x00011ab4
   116d4:			; <UNDEFINED> instruction: 0x00011ab4
   116d8:			; <UNDEFINED> instruction: 0x00011ab4
   116dc:			; <UNDEFINED> instruction: 0x00011ab4
   116e0:	andeq	r1, r1, r8, lsr #14
   116e4:			; <UNDEFINED> instruction: 0x00011ab4
   116e8:			; <UNDEFINED> instruction: 0x00011ab4
   116ec:			; <UNDEFINED> instruction: 0x00011ab4
   116f0:			; <UNDEFINED> instruction: 0x00011ab4
   116f4:			; <UNDEFINED> instruction: 0x00011ab4
   116f8:			; <UNDEFINED> instruction: 0x00011ab4
   116fc:			; <UNDEFINED> instruction: 0x00011ab4
   11700:			; <UNDEFINED> instruction: 0x00011ab4
   11704:			; <UNDEFINED> instruction: 0x00011ab4
   11708:	andeq	r1, r1, r8, lsr #14
   1170c:			; <UNDEFINED> instruction: 0x00011ab4
   11710:			; <UNDEFINED> instruction: 0x00011ab4
   11714:			; <UNDEFINED> instruction: 0x00011ab4
   11718:			; <UNDEFINED> instruction: 0x00011ab4
   1171c:			; <UNDEFINED> instruction: 0x00011ab4
   11720:			; <UNDEFINED> instruction: 0x00011ab4
   11724:			; <UNDEFINED> instruction: 0x000118b0
   11728:	mov	r3, #2
   1172c:	str	r3, [r4]
   11730:	ldr	r7, [pc, #976]	; 11b08 <__assert_fail@plt+0x7c8>
   11734:	bl	11154 <bfd_init@plt>
   11738:	bl	1242c <__assert_fail@plt+0x10ec>
   1173c:	ldr	r3, [r7]
   11740:	ldr	r8, [sp, #28]
   11744:	cmp	r3, r8
   11748:	bge	119a0 <__assert_fail@plt+0x660>
   1174c:	mov	r6, #0
   11750:	ldr	r9, [pc, #964]	; 11b1c <__assert_fail@plt+0x7dc>
   11754:	mov	sl, r6
   11758:	b	11770 <__assert_fail@plt+0x430>
   1175c:	ldr	r3, [r7]
   11760:	add	r3, r3, #1
   11764:	cmp	r3, r8
   11768:	str	r3, [r7]
   1176c:	bge	11940 <__assert_fail@plt+0x600>
   11770:	ldr	r2, [sp, #24]
   11774:	mov	r1, r9
   11778:	ldr	r5, [r2, r3, lsl #2]
   1177c:	mov	r0, r5
   11780:	bl	11010 <strcmp@plt>
   11784:	cmp	r0, #0
   11788:	streq	r0, [r4, #32]
   1178c:	beq	1175c <__assert_fail@plt+0x41c>
   11790:	add	r2, sp, #40	; 0x28
   11794:	mov	r1, r5
   11798:	mov	r0, #3
   1179c:	bl	11310 <__xstat64@plt>
   117a0:	cmp	r0, #0
   117a4:	blt	11954 <__assert_fail@plt+0x614>
   117a8:	ldr	r3, [sp, #56]	; 0x38
   117ac:	and	r3, r3, #61440	; 0xf000
   117b0:	cmp	r3, #16384	; 0x4000
   117b4:	beq	11a28 <__assert_fail@plt+0x6e8>
   117b8:	ldr	r3, [r4, #32]
   117bc:	cmp	r3, #0
   117c0:	beq	118d4 <__assert_fail@plt+0x594>
   117c4:	ldr	r1, [r4, #36]	; 0x24
   117c8:	mov	r0, r5
   117cc:	bl	11094 <bfd_openr@plt>
   117d0:	subs	r3, r0, #0
   117d4:	str	r3, [sp, #12]
   117d8:	beq	118d4 <__assert_fail@plt+0x594>
   117dc:	mov	r1, #1
   117e0:	bl	112f8 <bfd_check_format@plt>
   117e4:	cmp	r0, #0
   117e8:	beq	11aa8 <__assert_fail@plt+0x768>
   117ec:	ldr	r3, [sp, #12]
   117f0:	ldr	r6, [r3, #100]	; 0x64
   117f4:	cmp	r6, #0
   117f8:	beq	118bc <__assert_fail@plt+0x57c>
   117fc:	ldr	r8, [pc, #796]	; 11b20 <__assert_fail@plt+0x7e0>
   11800:	mov	r3, #0
   11804:	str	r3, [sp, #16]
   11808:	ldr	r3, [r6, #20]
   1180c:	bics	r3, r8, r3
   11810:	bne	11864 <__assert_fail@plt+0x524>
   11814:	ldr	fp, [r6, #36]	; 0x24
   11818:	cmp	fp, #0
   1181c:	beq	11864 <__assert_fail@plt+0x524>
   11820:	add	r2, sp, #36	; 0x24
   11824:	mov	r1, r6
   11828:	ldr	r0, [sp, #12]
   1182c:	bl	11088 <bfd_malloc_and_get_section@plt>
   11830:	cmp	r0, #0
   11834:	beq	11a48 <__assert_fail@plt+0x708>
   11838:	ldr	r3, [sp, #36]	; 0x24
   1183c:	str	fp, [sp]
   11840:	str	r3, [sp, #4]
   11844:	mov	r1, #0
   11848:	ldrd	r2, [r6, #80]	; 0x50
   1184c:	mov	r0, r5
   11850:	bl	11e38 <__assert_fail@plt+0xaf8>
   11854:	ldr	r0, [sp, #36]	; 0x24
   11858:	bl	11064 <free@plt>
   1185c:	mov	r3, #1
   11860:	str	r3, [sp, #16]
   11864:	ldr	r6, [r6, #12]
   11868:	cmp	r6, #0
   1186c:	bne	11808 <__assert_fail@plt+0x4c8>
   11870:	ldr	r0, [sp, #12]
   11874:	bl	112a4 <bfd_close@plt>
   11878:	cmp	r0, #0
   1187c:	beq	118cc <__assert_fail@plt+0x58c>
   11880:	ldr	r3, [sp, #16]
   11884:	cmp	r3, #0
   11888:	beq	118d4 <__assert_fail@plt+0x594>
   1188c:	mov	r3, #1
   11890:	eor	r3, r3, #1
   11894:	ldr	r8, [sp, #28]
   11898:	orr	sl, sl, r3
   1189c:	mov	r6, #1
   118a0:	b	1175c <__assert_fail@plt+0x41c>
   118a4:	mov	r3, #4
   118a8:	str	r3, [r4]
   118ac:	b	11730 <__assert_fail@plt+0x3f0>
   118b0:	mov	r3, #1
   118b4:	str	r3, [r4]
   118b8:	b	11730 <__assert_fail@plt+0x3f0>
   118bc:	ldr	r0, [sp, #12]
   118c0:	bl	112a4 <bfd_close@plt>
   118c4:	cmp	r0, #0
   118c8:	bne	118d4 <__assert_fail@plt+0x594>
   118cc:	mov	r0, r5
   118d0:	bl	12130 <__assert_fail@plt+0xdf0>
   118d4:	ldr	r1, [pc, #584]	; 11b24 <__assert_fail@plt+0x7e4>
   118d8:	mov	r0, r5
   118dc:	bl	112d4 <fopen64@plt>
   118e0:	subs	r6, r0, #0
   118e4:	beq	11a80 <__assert_fail@plt+0x740>
   118e8:	mov	r8, #0
   118ec:	mov	r2, #0
   118f0:	mov	r3, #0
   118f4:	mov	r1, r6
   118f8:	mov	r0, r5
   118fc:	str	r8, [sp, #4]
   11900:	str	r8, [sp]
   11904:	bl	11e38 <__assert_fail@plt+0xaf8>
   11908:	mov	r0, r6
   1190c:	bl	11238 <fclose@plt>
   11910:	cmn	r0, #1
   11914:	bne	1188c <__assert_fail@plt+0x54c>
   11918:	ldr	r3, [pc, #476]	; 11afc <__assert_fail@plt+0x7bc>
   1191c:	ldr	r1, [pc, #516]	; 11b28 <__assert_fail@plt+0x7e8>
   11920:	ldr	r2, [r3]
   11924:	ldr	r3, [pc, #492]	; 11b18 <__assert_fail@plt+0x7d8>
   11928:	ldr	r0, [r3]
   1192c:	bl	111f0 <fprintf@plt>
   11930:	mov	r0, r5
   11934:	bl	110e8 <perror@plt>
   11938:	mov	r3, r8
   1193c:	b	11890 <__assert_fail@plt+0x550>
   11940:	cmp	r6, #0
   11944:	beq	11ab4 <__assert_fail@plt+0x774>
   11948:	mov	r0, sl
   1194c:	add	sp, sp, #148	; 0x94
   11950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11954:	bl	11208 <__errno_location@plt>
   11958:	mov	r2, #5
   1195c:	ldr	r3, [r0]
   11960:	mov	r6, r0
   11964:	cmp	r3, #2
   11968:	ldreq	r1, [pc, #444]	; 11b2c <__assert_fail@plt+0x7ec>
   1196c:	beq	11a30 <__assert_fail@plt+0x6f0>
   11970:	ldr	r1, [pc, #440]	; 11b30 <__assert_fail@plt+0x7f0>
   11974:	mov	r0, #0
   11978:	bl	110b8 <dcgettext@plt>
   1197c:	mov	r8, r0
   11980:	ldr	r0, [r6]
   11984:	bl	11190 <strerror@plt>
   11988:	mov	r1, r5
   1198c:	mov	r2, r0
   11990:	mov	r0, r8
   11994:	bl	123fc <__assert_fail@plt+0x10bc>
   11998:	mov	r3, #0
   1199c:	b	11890 <__assert_fail@plt+0x550>
   119a0:	ldr	r3, [pc, #396]	; 11b34 <__assert_fail@plt+0x7f4>
   119a4:	mov	ip, #0
   119a8:	str	ip, [sp, #4]
   119ac:	mov	r2, #0
   119b0:	ldr	r1, [r3]
   119b4:	ldr	r0, [pc, #380]	; 11b38 <__assert_fail@plt+0x7f8>
   119b8:	str	ip, [sp]
   119bc:	mov	r3, #0
   119c0:	str	ip, [r4, #32]
   119c4:	mov	sl, ip
   119c8:	bl	11e38 <__assert_fail@plt+0xaf8>
   119cc:	b	11948 <__assert_fail@plt+0x608>
   119d0:	ldr	r3, [sp, #24]
   119d4:	sub	r9, r9, #-1073741823	; 0xc0000001
   119d8:	mov	r2, #0
   119dc:	ldr	r0, [r3, r9, lsl #2]
   119e0:	add	r1, sp, #32
   119e4:	add	r0, r0, #1
   119e8:	bl	111cc <strtoul@plt>
   119ec:	ldr	r3, [sp, #32]
   119f0:	cmp	r3, #0
   119f4:	str	r0, [r4, #8]
   119f8:	beq	11640 <__assert_fail@plt+0x300>
   119fc:	ldrb	r3, [r3]
   11a00:	cmp	r3, #0
   11a04:	beq	11640 <__assert_fail@plt+0x300>
   11a08:	ldr	r1, [pc, #260]	; 11b14 <__assert_fail@plt+0x7d4>
   11a0c:	mov	r2, #5
   11a10:	mov	r0, #0
   11a14:	bl	110b8 <dcgettext@plt>
   11a18:	ldr	r3, [sp, #24]
   11a1c:	ldr	r1, [r3, r9, lsl #2]
   11a20:	add	r1, r1, #1
   11a24:	bl	123d4 <__assert_fail@plt+0x1094>
   11a28:	ldr	r1, [pc, #268]	; 11b3c <__assert_fail@plt+0x7fc>
   11a2c:	mov	r2, #5
   11a30:	mov	r0, #0
   11a34:	bl	110b8 <dcgettext@plt>
   11a38:	mov	r1, r5
   11a3c:	bl	123fc <__assert_fail@plt+0x10bc>
   11a40:	mov	r3, #0
   11a44:	b	11890 <__assert_fail@plt+0x550>
   11a48:	ldr	r1, [pc, #240]	; 11b40 <__assert_fail@plt+0x800>
   11a4c:	mov	r2, #5
   11a50:	bl	110b8 <dcgettext@plt>
   11a54:	ldr	r2, [r6]
   11a58:	str	r2, [sp, #20]
   11a5c:	mov	fp, r0
   11a60:	bl	11100 <bfd_get_error@plt>
   11a64:	bl	112e0 <bfd_errmsg@plt>
   11a68:	ldr	r2, [sp, #20]
   11a6c:	mov	r1, r5
   11a70:	mov	r3, r0
   11a74:	mov	r0, fp
   11a78:	bl	123fc <__assert_fail@plt+0x10bc>
   11a7c:	b	11864 <__assert_fail@plt+0x524>
   11a80:	ldr	r3, [pc, #116]	; 11afc <__assert_fail@plt+0x7bc>
   11a84:	ldr	r1, [pc, #156]	; 11b28 <__assert_fail@plt+0x7e8>
   11a88:	ldr	r2, [r3]
   11a8c:	ldr	r3, [pc, #132]	; 11b18 <__assert_fail@plt+0x7d8>
   11a90:	ldr	r0, [r3]
   11a94:	bl	111f0 <fprintf@plt>
   11a98:	mov	r0, r5
   11a9c:	bl	110e8 <perror@plt>
   11aa0:	mov	r3, r6
   11aa4:	b	11890 <__assert_fail@plt+0x550>
   11aa8:	ldr	r0, [sp, #12]
   11aac:	bl	112a4 <bfd_close@plt>
   11ab0:	b	118d4 <__assert_fail@plt+0x594>
   11ab4:	ldr	r3, [pc, #92]	; 11b18 <__assert_fail@plt+0x7d8>
   11ab8:	mov	r1, #1
   11abc:	ldr	r0, [r3]
   11ac0:	bl	11d38 <__assert_fail@plt+0x9f8>
   11ac4:	ldr	r3, [pc, #120]	; 11b44 <__assert_fail@plt+0x804>
   11ac8:	mov	r1, #0
   11acc:	ldr	r0, [r3]
   11ad0:	bl	11d38 <__assert_fail@plt+0x9f8>
   11ad4:	ldr	r1, [pc, #108]	; 11b48 <__assert_fail@plt+0x808>
   11ad8:	mov	r2, #5
   11adc:	mov	r0, #0
   11ae0:	bl	110b8 <dcgettext@plt>
   11ae4:	mov	r1, r5
   11ae8:	bl	123d4 <__assert_fail@plt+0x1094>
   11aec:	andeq	r5, r2, r8, lsl r2
   11af0:	andeq	r3, r1, ip, ror #21
   11af4:			; <UNDEFINED> instruction: 0x00013fb0
   11af8:	andeq	r3, r1, r4, asr #31
   11afc:	andeq	r5, r2, ip, asr #4
   11b00:	andeq	r5, r2, r8, lsr r1
   11b04:	strdeq	r3, [r1], -r4
   11b08:	strdeq	r5, [r2], -r8
   11b0c:	andeq	r3, r1, ip, ror #31
   11b10:	andeq	r5, r2, r0, lsl r2
   11b14:	ldrdeq	r3, [r1], -r0
   11b18:	andeq	r5, r2, r0, lsl #4
   11b1c:	andeq	r4, r1, ip, asr #32
   11b20:	andeq	r0, r0, r3, lsl #2
   11b24:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11b28:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11b2c:	andeq	r4, r1, r0, asr r0
   11b30:	andeq	r4, r1, r4, rrx
   11b34:	andeq	r5, r2, r8, lsl #4
   11b38:	andeq	r4, r1, r8, lsr r0
   11b3c:	muleq	r1, r0, r0
   11b40:	strheq	r4, [r1], -r0
   11b44:	andeq	r5, r2, ip, lsl #4
   11b48:	andeq	r4, r1, r4, lsl r0
   11b4c:	mov	fp, #0
   11b50:	mov	lr, #0
   11b54:	pop	{r1}		; (ldr r1, [sp], #4)
   11b58:	mov	r2, sp
   11b5c:	push	{r2}		; (str r2, [sp, #-4]!)
   11b60:	push	{r0}		; (str r0, [sp, #-4]!)
   11b64:	ldr	ip, [pc, #16]	; 11b7c <__assert_fail@plt+0x83c>
   11b68:	push	{ip}		; (str ip, [sp, #-4]!)
   11b6c:	ldr	r0, [pc, #12]	; 11b80 <__assert_fail@plt+0x840>
   11b70:	ldr	r3, [pc, #12]	; 11b84 <__assert_fail@plt+0x844>
   11b74:	bl	11184 <__libc_start_main@plt>
   11b78:	bl	11328 <abort@plt>
   11b7c:			; <UNDEFINED> instruction: 0x00013abc
   11b80:	andeq	r1, r1, ip, asr #6
   11b84:	andeq	r3, r1, ip, asr sl
   11b88:	ldr	r3, [pc, #20]	; 11ba4 <__assert_fail@plt+0x864>
   11b8c:	ldr	r2, [pc, #20]	; 11ba8 <__assert_fail@plt+0x868>
   11b90:	add	r3, pc, r3
   11b94:	ldr	r2, [r3, r2]
   11b98:	cmp	r2, #0
   11b9c:	bxeq	lr
   11ba0:	b	1119c <__gmon_start__@plt>
   11ba4:	andeq	r3, r1, r8, ror #8
   11ba8:	andeq	r0, r0, ip, lsr #2
   11bac:	ldr	r0, [pc, #24]	; 11bcc <__assert_fail@plt+0x88c>
   11bb0:	ldr	r3, [pc, #24]	; 11bd0 <__assert_fail@plt+0x890>
   11bb4:	cmp	r3, r0
   11bb8:	bxeq	lr
   11bbc:	ldr	r3, [pc, #16]	; 11bd4 <__assert_fail@plt+0x894>
   11bc0:	cmp	r3, #0
   11bc4:	bxeq	lr
   11bc8:	bx	r3
   11bcc:	strdeq	r5, [r2], -r8
   11bd0:	strdeq	r5, [r2], -r8
   11bd4:	andeq	r0, r0, r0
   11bd8:	ldr	r0, [pc, #36]	; 11c04 <__assert_fail@plt+0x8c4>
   11bdc:	ldr	r1, [pc, #36]	; 11c08 <__assert_fail@plt+0x8c8>
   11be0:	sub	r1, r1, r0
   11be4:	asr	r1, r1, #2
   11be8:	add	r1, r1, r1, lsr #31
   11bec:	asrs	r1, r1, #1
   11bf0:	bxeq	lr
   11bf4:	ldr	r3, [pc, #16]	; 11c0c <__assert_fail@plt+0x8cc>
   11bf8:	cmp	r3, #0
   11bfc:	bxeq	lr
   11c00:	bx	r3
   11c04:	strdeq	r5, [r2], -r8
   11c08:	strdeq	r5, [r2], -r8
   11c0c:	andeq	r0, r0, r0
   11c10:	push	{r4, lr}
   11c14:	ldr	r4, [pc, #24]	; 11c34 <__assert_fail@plt+0x8f4>
   11c18:	ldrb	r3, [r4]
   11c1c:	cmp	r3, #0
   11c20:	popne	{r4, pc}
   11c24:	bl	11bac <__assert_fail@plt+0x86c>
   11c28:	mov	r3, #1
   11c2c:	strb	r3, [r4]
   11c30:	pop	{r4, pc}
   11c34:	andeq	r5, r2, r4, lsl r2
   11c38:	b	11bd8 <__assert_fail@plt+0x898>
   11c3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c40:	ldr	r7, [pc, #236]	; 11d34 <__assert_fail@plt+0x9f4>
   11c44:	ldr	ip, [r7]
   11c48:	cmp	ip, #0
   11c4c:	ble	11cf8 <__assert_fail@plt+0x9b8>
   11c50:	mov	r6, #0
   11c54:	mov	sl, r3
   11c58:	mov	r9, r2
   11c5c:	mov	r4, r1
   11c60:	mov	r8, r0
   11c64:	mov	r5, r6
   11c68:	b	11cac <__assert_fail@plt+0x96c>
   11c6c:	ldr	r3, [sl]
   11c70:	str	ip, [r9]
   11c74:	add	r2, r3, #1
   11c78:	str	r2, [sl]
   11c7c:	ldrb	r0, [r3]
   11c80:	ldr	ip, [r4]
   11c84:	ldr	r3, [r4, #4]
   11c88:	ldr	r2, [r7]
   11c8c:	adds	ip, ip, #1
   11c90:	add	r5, r5, #1
   11c94:	adc	r3, r3, #0
   11c98:	cmp	r2, r5
   11c9c:	orr	r6, r0, r6, lsl #8
   11ca0:	str	ip, [r4]
   11ca4:	str	r3, [r4, #4]
   11ca8:	ble	11cfc <__assert_fail@plt+0x9bc>
   11cac:	ldr	ip, [r9]
   11cb0:	cmp	ip, #0
   11cb4:	sub	ip, ip, #1
   11cb8:	bne	11c6c <__assert_fail@plt+0x92c>
   11cbc:	cmp	r8, #0
   11cc0:	beq	11d28 <__assert_fail@plt+0x9e8>
   11cc4:	ldr	r3, [r8, #4]
   11cc8:	ldr	r2, [r8, #8]
   11ccc:	add	r1, r3, #1
   11cd0:	cmp	r3, r2
   11cd4:	strcc	r1, [r8, #4]
   11cd8:	ldrbcc	r0, [r3]
   11cdc:	bcc	11c80 <__assert_fail@plt+0x940>
   11ce0:	mov	r0, r8
   11ce4:	bl	1125c <__uflow@plt>
   11ce8:	cmn	r0, #1
   11cec:	beq	11d28 <__assert_fail@plt+0x9e8>
   11cf0:	uxtb	r0, r0
   11cf4:	b	11c80 <__assert_fail@plt+0x940>
   11cf8:	mov	r6, #0
   11cfc:	ldrb	r3, [r7, #4]
   11d00:	cmp	r3, #76	; 0x4c
   11d04:	reveq	r6, r6
   11d08:	beq	11d20 <__assert_fail@plt+0x9e0>
   11d0c:	cmp	r3, #108	; 0x6c
   11d10:	lsleq	r3, r6, #8
   11d14:	lsleq	r6, r6, #16
   11d18:	uxtheq	r3, r3
   11d1c:	orreq	r6, r3, r6, lsr #24
   11d20:	mov	r0, r6
   11d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d28:	mvn	r6, #0
   11d2c:	mov	r0, r6
   11d30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d34:	andeq	r5, r2, r8, lsl r2
   11d38:	push	{r4, lr}
   11d3c:	mov	r5, r1
   11d40:	mov	r4, r0
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #200]	; 11e18 <__assert_fail@plt+0xad8>
   11d4c:	mov	r0, #0
   11d50:	bl	110b8 <dcgettext@plt>
   11d54:	ldr	r6, [pc, #192]	; 11e1c <__assert_fail@plt+0xadc>
   11d58:	ldr	r2, [r6]
   11d5c:	mov	r1, r0
   11d60:	mov	r0, r4
   11d64:	bl	111f0 <fprintf@plt>
   11d68:	mov	r2, #5
   11d6c:	ldr	r1, [pc, #172]	; 11e20 <__assert_fail@plt+0xae0>
   11d70:	mov	r0, #0
   11d74:	bl	110b8 <dcgettext@plt>
   11d78:	mov	r1, r0
   11d7c:	mov	r0, r4
   11d80:	bl	111f0 <fprintf@plt>
   11d84:	mov	r2, #5
   11d88:	ldr	r1, [pc, #148]	; 11e24 <__assert_fail@plt+0xae4>
   11d8c:	mov	r0, #0
   11d90:	bl	110b8 <dcgettext@plt>
   11d94:	mov	r1, r0
   11d98:	mov	r0, r4
   11d9c:	bl	111f0 <fprintf@plt>
   11da0:	mov	r2, #5
   11da4:	ldr	r1, [pc, #124]	; 11e28 <__assert_fail@plt+0xae8>
   11da8:	mov	r0, #0
   11dac:	bl	110b8 <dcgettext@plt>
   11db0:	mov	r1, r0
   11db4:	mov	r0, r4
   11db8:	bl	111f0 <fprintf@plt>
   11dbc:	mov	r2, #5
   11dc0:	ldr	r1, [pc, #100]	; 11e2c <__assert_fail@plt+0xaec>
   11dc4:	mov	r0, #0
   11dc8:	bl	110b8 <dcgettext@plt>
   11dcc:	mov	r1, r0
   11dd0:	mov	r0, r4
   11dd4:	bl	111f0 <fprintf@plt>
   11dd8:	mov	r1, r4
   11ddc:	ldr	r0, [r6]
   11de0:	bl	124fc <__assert_fail@plt+0x11bc>
   11de4:	cmp	r5, #0
   11de8:	beq	11df4 <__assert_fail@plt+0xab4>
   11dec:	mov	r0, r5
   11df0:	bl	111c0 <exit@plt>
   11df4:	mov	r2, #5
   11df8:	ldr	r1, [pc, #48]	; 11e30 <__assert_fail@plt+0xaf0>
   11dfc:	mov	r0, r5
   11e00:	bl	110b8 <dcgettext@plt>
   11e04:	ldr	r2, [pc, #40]	; 11e34 <__assert_fail@plt+0xaf4>
   11e08:	mov	r1, r0
   11e0c:	mov	r0, r4
   11e10:	bl	111f0 <fprintf@plt>
   11e14:	b	11dec <__assert_fail@plt+0xaac>
   11e18:	andeq	r3, r1, ip, asr #21
   11e1c:	andeq	r5, r2, ip, asr #4
   11e20:	strdeq	r3, [r1], -r0
   11e24:	andeq	r3, r1, ip, lsr #22
   11e28:	andeq	r3, r1, r0, asr #22
   11e2c:	ldrdeq	r3, [r1], -ip
   11e30:	andeq	r3, r1, r4, asr pc
   11e34:	andeq	r3, r1, r8, ror #30
   11e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e3c:	sub	sp, sp, #28
   11e40:	ldr	r6, [pc, #520]	; 12050 <__assert_fail@plt+0xd10>
   11e44:	str	r0, [sp, #12]
   11e48:	mov	r7, r1
   11e4c:	ldr	r0, [r6, #8]
   11e50:	strd	r2, [sp, #16]
   11e54:	add	r0, r0, #1
   11e58:	bl	11118 <xmalloc@plt>
   11e5c:	ldr	fp, [pc, #496]	; 12054 <__assert_fail@plt+0xd14>
   11e60:	ldr	sl, [pc, #496]	; 12058 <__assert_fail@plt+0xd18>
   11e64:	mov	r8, r0
   11e68:	sub	r9, r0, #1
   11e6c:	ldr	r3, [r6, #8]
   11e70:	ldrd	r0, [sp, #16]
   11e74:	cmp	r3, #0
   11e78:	strd	r0, [sp]
   11e7c:	ble	12048 <__assert_fail@plt+0xd08>
   11e80:	mov	r5, r9
   11e84:	mov	r4, #0
   11e88:	b	11eec <__assert_fail@plt+0xbac>
   11e8c:	cmp	r0, #255	; 0xff
   11e90:	bhi	11e6c <__assert_fail@plt+0xb2c>
   11e94:	cmp	r0, #9
   11e98:	beq	11edc <__assert_fail@plt+0xb9c>
   11e9c:	ldrh	r3, [sl, r3]
   11ea0:	tst	r3, #16
   11ea4:	bne	11edc <__assert_fail@plt+0xb9c>
   11ea8:	ldrb	r1, [r6, #4]
   11eac:	cmp	r0, #127	; 0x7f
   11eb0:	movgt	r2, #0
   11eb4:	movle	r2, #1
   11eb8:	cmp	r1, #83	; 0x53
   11ebc:	orrne	r2, r2, #1
   11ec0:	cmp	r2, #0
   11ec4:	beq	11edc <__assert_fail@plt+0xb9c>
   11ec8:	ldr	r2, [r6, #12]
   11ecc:	cmp	r2, #0
   11ed0:	beq	11e6c <__assert_fail@plt+0xb2c>
   11ed4:	tst	r3, #64	; 0x40
   11ed8:	beq	11e6c <__assert_fail@plt+0xb2c>
   11edc:	ldr	r3, [r6, #8]
   11ee0:	strb	r0, [r5, #1]!
   11ee4:	cmp	r4, r3
   11ee8:	bge	11f20 <__assert_fail@plt+0xbe0>
   11eec:	add	r3, sp, #68	; 0x44
   11ef0:	add	r2, sp, #64	; 0x40
   11ef4:	add	r1, sp, #16
   11ef8:	mov	r0, r7
   11efc:	bl	11c3c <__assert_fail@plt+0x8fc>
   11f00:	add	r4, r4, #1
   11f04:	cmn	r0, #1
   11f08:	lsl	r3, r0, #1
   11f0c:	bne	11e8c <__assert_fail@plt+0xb4c>
   11f10:	mov	r0, r8
   11f14:	bl	11064 <free@plt>
   11f18:	add	sp, sp, #28
   11f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f20:	add	r4, r8, r4
   11f24:	ldr	r3, [r6, #16]
   11f28:	cmp	r3, #0
   11f2c:	bne	1200c <__assert_fail@plt+0xccc>
   11f30:	ldr	r3, [r6, #20]
   11f34:	cmp	r3, #0
   11f38:	bne	11fe0 <__assert_fail@plt+0xca0>
   11f3c:	mov	r3, #0
   11f40:	ldr	r1, [fp]
   11f44:	strb	r3, [r4]
   11f48:	mov	r0, r8
   11f4c:	bl	1131c <fputs@plt>
   11f50:	b	11fa4 <__assert_fail@plt+0xc64>
   11f54:	cmp	r0, #9
   11f58:	beq	11f9c <__assert_fail@plt+0xc5c>
   11f5c:	ldrh	r2, [sl, r2]
   11f60:	tst	r2, #16
   11f64:	bne	11f9c <__assert_fail@plt+0xc5c>
   11f68:	ldrb	r1, [r6, #4]
   11f6c:	cmp	r0, #127	; 0x7f
   11f70:	movgt	r3, #0
   11f74:	movle	r3, #1
   11f78:	cmp	r1, #83	; 0x53
   11f7c:	orrne	r3, r3, #1
   11f80:	cmp	r3, #0
   11f84:	beq	11f9c <__assert_fail@plt+0xc5c>
   11f88:	ldr	r3, [r6, #12]
   11f8c:	cmp	r3, #0
   11f90:	beq	11fc8 <__assert_fail@plt+0xc88>
   11f94:	tst	r2, #64	; 0x40
   11f98:	beq	11fc8 <__assert_fail@plt+0xc88>
   11f9c:	ldr	r1, [fp]
   11fa0:	bl	112c8 <putc@plt>
   11fa4:	add	r3, sp, #68	; 0x44
   11fa8:	add	r2, sp, #64	; 0x40
   11fac:	add	r1, sp, #16
   11fb0:	mov	r0, r7
   11fb4:	bl	11c3c <__assert_fail@plt+0x8fc>
   11fb8:	cmp	r0, #255	; 0xff
   11fbc:	mov	r3, r0
   11fc0:	lsl	r2, r0, #1
   11fc4:	bls	11f54 <__assert_fail@plt+0xc14>
   11fc8:	ldr	r0, [r6, #28]
   11fcc:	ldr	r1, [fp]
   11fd0:	cmp	r0, #0
   11fd4:	beq	1201c <__assert_fail@plt+0xcdc>
   11fd8:	bl	1131c <fputs@plt>
   11fdc:	b	11e6c <__assert_fail@plt+0xb2c>
   11fe0:	ldr	r3, [r6, #24]
   11fe4:	cmp	r3, #10
   11fe8:	beq	12038 <__assert_fail@plt+0xcf8>
   11fec:	cmp	r3, #16
   11ff0:	beq	12028 <__assert_fail@plt+0xce8>
   11ff4:	cmp	r3, #8
   11ff8:	bne	11f3c <__assert_fail@plt+0xbfc>
   11ffc:	ldrd	r2, [sp]
   12000:	ldr	r0, [pc, #84]	; 1205c <__assert_fail@plt+0xd1c>
   12004:	bl	11028 <printf@plt>
   12008:	b	11f3c <__assert_fail@plt+0xbfc>
   1200c:	ldr	r1, [sp, #12]
   12010:	ldr	r0, [pc, #72]	; 12060 <__assert_fail@plt+0xd20>
   12014:	bl	11028 <printf@plt>
   12018:	b	11f30 <__assert_fail@plt+0xbf0>
   1201c:	mov	r0, #10
   12020:	bl	112c8 <putc@plt>
   12024:	b	11e6c <__assert_fail@plt+0xb2c>
   12028:	ldrd	r2, [sp]
   1202c:	ldr	r0, [pc, #48]	; 12064 <__assert_fail@plt+0xd24>
   12030:	bl	11028 <printf@plt>
   12034:	b	11f3c <__assert_fail@plt+0xbfc>
   12038:	ldrd	r2, [sp]
   1203c:	ldr	r0, [pc, #36]	; 12068 <__assert_fail@plt+0xd28>
   12040:	bl	11028 <printf@plt>
   12044:	b	11f3c <__assert_fail@plt+0xbfc>
   12048:	mov	r4, r8
   1204c:	b	11f24 <__assert_fail@plt+0xbe4>
   12050:	andeq	r5, r2, r8, lsl r2
   12054:	andeq	r5, r2, ip, lsl #4
   12058:	andeq	r4, r2, r0, lsl #26
   1205c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12060:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12064:	andeq	r3, r1, r8, lsr #31
   12068:	andeq	r3, r1, r0, lsr #31
   1206c:	push	{r4, r5, r6, lr}
   12070:	mov	r1, #47	; 0x2f
   12074:	mov	r6, r0
   12078:	bl	11274 <strrchr@plt>
   1207c:	cmp	r0, #0
   12080:	beq	120d0 <__assert_fail@plt+0xd90>
   12084:	sub	r4, r0, r6
   12088:	add	r0, r4, #11
   1208c:	bl	11118 <xmalloc@plt>
   12090:	mov	r2, r4
   12094:	mov	r1, r6
   12098:	mov	r5, r0
   1209c:	bl	1107c <memcpy@plt>
   120a0:	add	r2, r4, #1
   120a4:	add	r2, r5, r2
   120a8:	mov	r3, #47	; 0x2f
   120ac:	strb	r3, [r5, r4]
   120b0:	ldr	r3, [pc, #44]	; 120e4 <__assert_fail@plt+0xda4>
   120b4:	ldm	r3!, {r0, r1}
   120b8:	ldrb	r3, [r3]
   120bc:	str	r0, [r2]
   120c0:	str	r1, [r2, #4]
   120c4:	strb	r3, [r2, #8]
   120c8:	mov	r0, r5
   120cc:	pop	{r4, r5, r6, pc}
   120d0:	mov	r0, #9
   120d4:	bl	11118 <xmalloc@plt>
   120d8:	mov	r5, r0
   120dc:	mov	r2, r0
   120e0:	b	120b0 <__assert_fail@plt+0xd70>
   120e4:	andeq	r4, r1, r0, ror r1
   120e8:	subs	r3, r0, #0
   120ec:	beq	12108 <__assert_fail@plt+0xdc8>
   120f0:	cmp	r3, #1
   120f4:	beq	12114 <__assert_fail@plt+0xdd4>
   120f8:	mov	r2, #5
   120fc:	ldr	r1, [pc, #32]	; 12124 <__assert_fail@plt+0xde4>
   12100:	mov	r0, #0
   12104:	b	110b8 <dcgettext@plt>
   12108:	mov	r2, #5
   1210c:	ldr	r1, [pc, #20]	; 12128 <__assert_fail@plt+0xde8>
   12110:	b	110b8 <dcgettext@plt>
   12114:	mov	r2, #5
   12118:	ldr	r1, [pc, #12]	; 1212c <__assert_fail@plt+0xdec>
   1211c:	mov	r0, #0
   12120:	b	110b8 <dcgettext@plt>
   12124:	muleq	r1, r8, r1
   12128:	andeq	r4, r1, ip, ror r1
   1212c:	andeq	r4, r1, r8, lsl #3
   12130:	push	{r4, r5, lr}
   12134:	sub	sp, sp, #12
   12138:	mov	r4, r0
   1213c:	bl	11100 <bfd_get_error@plt>
   12140:	bl	112e0 <bfd_errmsg@plt>
   12144:	ldr	r3, [pc, #84]	; 121a0 <__assert_fail@plt+0xe60>
   12148:	mov	r5, r0
   1214c:	ldr	r0, [r3]
   12150:	bl	11034 <fflush@plt>
   12154:	cmp	r4, #0
   12158:	ldr	r2, [pc, #68]	; 121a4 <__assert_fail@plt+0xe64>
   1215c:	ldr	r1, [pc, #68]	; 121a8 <__assert_fail@plt+0xe68>
   12160:	beq	12184 <__assert_fail@plt+0xe44>
   12164:	str	r5, [sp]
   12168:	mov	r3, r4
   1216c:	ldr	r2, [r2]
   12170:	ldr	r0, [r1]
   12174:	ldr	r1, [pc, #48]	; 121ac <__assert_fail@plt+0xe6c>
   12178:	bl	111f0 <fprintf@plt>
   1217c:	add	sp, sp, #12
   12180:	pop	{r4, r5, pc}
   12184:	ldr	r0, [r1]
   12188:	mov	r3, r5
   1218c:	ldr	r2, [r2]
   12190:	ldr	r1, [pc, #24]	; 121b0 <__assert_fail@plt+0xe70>
   12194:	add	sp, sp, #12
   12198:	pop	{r4, r5, lr}
   1219c:	b	111f0 <fprintf@plt>
   121a0:	andeq	r5, r2, ip, lsl #4
   121a4:	andeq	r5, r2, ip, asr #4
   121a8:	andeq	r5, r2, r0, lsl #4
   121ac:	andeq	r4, r1, ip, lsr #3
   121b0:			; <UNDEFINED> instruction: 0x000141b0
   121b4:	ldr	r3, [r1, #8]
   121b8:	push	{r4, r5, r6, r7, r8, lr}
   121bc:	add	r3, r3, #1
   121c0:	mov	r6, r1
   121c4:	mov	r4, r0
   121c8:	str	r3, [r1, #8]
   121cc:	ldr	r0, [r1, #12]
   121d0:	add	r1, r3, r3, lsl #1
   121d4:	rsb	r1, r3, r1, lsl #3
   121d8:	lsl	r2, r1, #2
   121dc:	cmp	r0, r2
   121e0:	bcs	12228 <__assert_fail@plt+0xee8>
   121e4:	cmp	r3, #63	; 0x3f
   121e8:	lslgt	r5, r1, #3
   121ec:	movle	r5, #11776	; 0x2e00
   121f0:	mov	r1, r5
   121f4:	ldr	r0, [r6, #16]
   121f8:	bl	110d0 <xrealloc@plt>
   121fc:	ldr	r2, [r6, #12]
   12200:	mov	r1, #0
   12204:	str	r0, [r6, #16]
   12208:	add	r0, r0, r2
   1220c:	sub	r2, r5, r2
   12210:	bl	11220 <memset@plt>
   12214:	ldr	r3, [r6, #8]
   12218:	str	r5, [r6, #12]
   1221c:	add	r2, r3, r3, lsl #1
   12220:	rsb	r3, r3, r2, lsl #3
   12224:	lsl	r2, r3, #2
   12228:	ldr	r3, [r6, #16]
   1222c:	ldr	r1, [r4]
   12230:	add	r3, r3, r2
   12234:	mov	r0, #0
   12238:	str	r1, [r3, #-92]	; 0xffffffa4
   1223c:	mov	r2, #5
   12240:	ldr	r1, [pc, #276]	; 1235c <__assert_fail@plt+0x101c>
   12244:	bl	110b8 <dcgettext@plt>
   12248:	ldr	r7, [r4]
   1224c:	mov	r5, r0
   12250:	ldr	r0, [r4, #12]
   12254:	bl	120e8 <__assert_fail@plt+0xda8>
   12258:	mov	r8, r0
   1225c:	ldr	r0, [r4, #8]
   12260:	bl	120e8 <__assert_fail@plt+0xda8>
   12264:	mov	r2, r8
   12268:	mov	r1, r7
   1226c:	mov	r3, r0
   12270:	mov	r0, r5
   12274:	bl	11028 <printf@plt>
   12278:	ldr	r1, [r4]
   1227c:	ldr	r0, [r6]
   12280:	bl	11244 <bfd_openw@plt>
   12284:	subs	r5, r0, #0
   12288:	beq	12348 <__assert_fail@plt+0x1008>
   1228c:	mov	r1, #1
   12290:	bl	111a8 <bfd_set_format@plt>
   12294:	cmp	r0, #0
   12298:	beq	12328 <__assert_fail@plt+0xfe8>
   1229c:	ldr	r8, [pc, #188]	; 12360 <__assert_fail@plt+0x1020>
   122a0:	mov	r4, #2
   122a4:	mov	r7, #1
   122a8:	b	122b8 <__assert_fail@plt+0xf78>
   122ac:	add	r4, r4, #1
   122b0:	cmp	r4, #89	; 0x59
   122b4:	beq	12318 <__assert_fail@plt+0xfd8>
   122b8:	ldr	r3, [r5, #4]
   122bc:	mov	r2, #0
   122c0:	mov	r1, r4
   122c4:	ldr	r3, [r3, #340]	; 0x154
   122c8:	mov	r0, r5
   122cc:	blx	r3
   122d0:	cmp	r0, #0
   122d4:	beq	122ac <__assert_fail@plt+0xf6c>
   122d8:	mov	r1, #0
   122dc:	mov	r0, r4
   122e0:	bl	111fc <bfd_printable_arch_mach@plt>
   122e4:	mov	r1, r0
   122e8:	mov	r0, r8
   122ec:	bl	11028 <printf@plt>
   122f0:	ldr	r2, [r6, #8]
   122f4:	ldr	r3, [r6, #16]
   122f8:	add	r1, r2, r2, lsl #1
   122fc:	rsb	r2, r2, r1, lsl #3
   12300:	add	r3, r3, r2, lsl #2
   12304:	add	r3, r4, r3
   12308:	add	r4, r4, #1
   1230c:	cmp	r4, #89	; 0x59
   12310:	strb	r7, [r3, #-90]	; 0xffffffa6
   12314:	bne	122b8 <__assert_fail@plt+0xf78>
   12318:	mov	r0, r5
   1231c:	bl	111e4 <bfd_close_all_done@plt>
   12320:	ldr	r0, [r6, #4]
   12324:	pop	{r4, r5, r6, r7, r8, pc}
   12328:	bl	11100 <bfd_get_error@plt>
   1232c:	cmp	r0, #5
   12330:	beq	12318 <__assert_fail@plt+0xfd8>
   12334:	ldr	r0, [r4]
   12338:	bl	12130 <__assert_fail@plt+0xdf0>
   1233c:	mov	r3, #1
   12340:	str	r3, [r6, #4]
   12344:	b	12318 <__assert_fail@plt+0xfd8>
   12348:	ldr	r0, [r6]
   1234c:	bl	12130 <__assert_fail@plt+0xdf0>
   12350:	mov	r0, #1
   12354:	str	r0, [r6, #4]
   12358:	pop	{r4, r5, r6, r7, r8, pc}
   1235c:			; <UNDEFINED> instruction: 0x000141b8
   12360:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12364:	push	{r4, lr}
   12368:	bl	12130 <__assert_fail@plt+0xdf0>
   1236c:	mov	r0, #1
   12370:	bl	11298 <xexit@plt>
   12374:	ldr	r3, [pc, #72]	; 123c4 <__assert_fail@plt+0x1084>
   12378:	push	{r4, r5, r6, lr}
   1237c:	mov	r5, r0
   12380:	ldr	r0, [r3]
   12384:	mov	r6, r1
   12388:	ldr	r4, [pc, #56]	; 123c8 <__assert_fail@plt+0x1088>
   1238c:	bl	11034 <fflush@plt>
   12390:	ldr	r3, [pc, #52]	; 123cc <__assert_fail@plt+0x108c>
   12394:	ldr	r1, [pc, #52]	; 123d0 <__assert_fail@plt+0x1090>
   12398:	ldr	r0, [r4]
   1239c:	ldr	r2, [r3]
   123a0:	bl	111f0 <fprintf@plt>
   123a4:	mov	r1, r5
   123a8:	mov	r2, r6
   123ac:	ldr	r0, [r4]
   123b0:	bl	11280 <vfprintf@plt>
   123b4:	ldr	r1, [r4]
   123b8:	mov	r0, #10
   123bc:	pop	{r4, r5, r6, lr}
   123c0:	b	112c8 <putc@plt>
   123c4:	andeq	r5, r2, ip, lsl #4
   123c8:	andeq	r5, r2, r0, lsl #4
   123cc:	andeq	r5, r2, ip, asr #4
   123d0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   123d4:	push	{r0, r1, r2, r3}
   123d8:	push	{lr}		; (str lr, [sp, #-4]!)
   123dc:	sub	sp, sp, #12
   123e0:	add	r3, sp, #20
   123e4:	ldr	r0, [sp, #16]
   123e8:	mov	r1, r3
   123ec:	str	r3, [sp, #4]
   123f0:	bl	12374 <__assert_fail@plt+0x1034>
   123f4:	mov	r0, #1
   123f8:	bl	11298 <xexit@plt>
   123fc:	push	{r0, r1, r2, r3}
   12400:	push	{lr}		; (str lr, [sp, #-4]!)
   12404:	sub	sp, sp, #12
   12408:	add	r3, sp, #20
   1240c:	mov	r1, r3
   12410:	ldr	r0, [sp, #16]
   12414:	str	r3, [sp, #4]
   12418:	bl	12374 <__assert_fail@plt+0x1034>
   1241c:	add	sp, sp, #12
   12420:	pop	{lr}		; (ldr lr, [sp], #4)
   12424:	add	sp, sp, #16
   12428:	bx	lr
   1242c:	push	{r4, lr}
   12430:	ldr	r0, [pc, #48]	; 12468 <__assert_fail@plt+0x1128>
   12434:	bl	11058 <bfd_set_default_target@plt>
   12438:	cmp	r0, #0
   1243c:	popne	{r4, pc}
   12440:	mov	r2, #5
   12444:	ldr	r1, [pc, #32]	; 1246c <__assert_fail@plt+0x112c>
   12448:	bl	110b8 <dcgettext@plt>
   1244c:	mov	r4, r0
   12450:	bl	11100 <bfd_get_error@plt>
   12454:	bl	112e0 <bfd_errmsg@plt>
   12458:	ldr	r1, [pc, #8]	; 12468 <__assert_fail@plt+0x1128>
   1245c:	mov	r2, r0
   12460:	mov	r0, r4
   12464:	bl	123d4 <__assert_fail@plt+0x1094>
   12468:	ldrdeq	r4, [r1], -ip
   1246c:	strdeq	r4, [r1], -r8
   12470:	ldr	r3, [pc, #112]	; 124e8 <__assert_fail@plt+0x11a8>
   12474:	push	{r4, r5, r6, lr}
   12478:	mov	r4, r0
   1247c:	ldr	r5, [pc, #104]	; 124ec <__assert_fail@plt+0x11ac>
   12480:	ldr	r0, [r3]
   12484:	bl	11034 <fflush@plt>
   12488:	mov	r2, #5
   1248c:	ldr	r1, [pc, #92]	; 124f0 <__assert_fail@plt+0x11b0>
   12490:	mov	r0, #0
   12494:	ldr	r6, [r5]
   12498:	bl	110b8 <dcgettext@plt>
   1249c:	ldr	r3, [pc, #80]	; 124f4 <__assert_fail@plt+0x11b4>
   124a0:	ldr	r2, [r3]
   124a4:	mov	r1, r0
   124a8:	mov	r0, r6
   124ac:	bl	111f0 <fprintf@plt>
   124b0:	ldr	r2, [r4]
   124b4:	cmp	r2, #0
   124b8:	beq	124d8 <__assert_fail@plt+0x1198>
   124bc:	ldr	r6, [pc, #52]	; 124f8 <__assert_fail@plt+0x11b8>
   124c0:	mov	r1, r6
   124c4:	ldr	r0, [r5]
   124c8:	bl	111f0 <fprintf@plt>
   124cc:	ldr	r2, [r4, #4]!
   124d0:	cmp	r2, #0
   124d4:	bne	124c0 <__assert_fail@plt+0x1180>
   124d8:	ldr	r1, [r5]
   124dc:	mov	r0, #10
   124e0:	pop	{r4, r5, r6, lr}
   124e4:	b	1128c <fputc@plt>
   124e8:	andeq	r5, r2, ip, lsl #4
   124ec:	andeq	r5, r2, r0, lsl #4
   124f0:	andeq	r4, r1, r4, lsr #4
   124f4:	andeq	r5, r2, ip, asr #4
   124f8:	andeq	r4, r1, ip, lsl #1
   124fc:	push	{r4, r5, r6, r7, r8, lr}
   12500:	subs	r4, r0, #0
   12504:	mov	r2, #5
   12508:	mov	r5, r1
   1250c:	beq	12578 <__assert_fail@plt+0x1238>
   12510:	ldr	r1, [pc, #120]	; 12590 <__assert_fail@plt+0x1250>
   12514:	mov	r0, #0
   12518:	bl	110b8 <dcgettext@plt>
   1251c:	mov	r2, r4
   12520:	mov	r1, r0
   12524:	mov	r0, r5
   12528:	bl	111f0 <fprintf@plt>
   1252c:	bl	110f4 <bfd_target_list@plt>
   12530:	ldr	r2, [r0]
   12534:	mov	r7, r0
   12538:	cmp	r2, #0
   1253c:	beq	12560 <__assert_fail@plt+0x1220>
   12540:	ldr	r6, [pc, #76]	; 12594 <__assert_fail@plt+0x1254>
   12544:	mov	r4, r0
   12548:	mov	r1, r6
   1254c:	mov	r0, r5
   12550:	bl	111f0 <fprintf@plt>
   12554:	ldr	r2, [r4, #4]!
   12558:	cmp	r2, #0
   1255c:	bne	12548 <__assert_fail@plt+0x1208>
   12560:	mov	r1, r5
   12564:	mov	r0, #10
   12568:	bl	1128c <fputc@plt>
   1256c:	mov	r0, r7
   12570:	pop	{r4, r5, r6, r7, r8, lr}
   12574:	b	11064 <free@plt>
   12578:	ldr	r1, [pc, #24]	; 12598 <__assert_fail@plt+0x1258>
   1257c:	bl	110b8 <dcgettext@plt>
   12580:	mov	r1, r0
   12584:	mov	r0, r5
   12588:	bl	111f0 <fprintf@plt>
   1258c:	b	1252c <__assert_fail@plt+0x11ec>
   12590:	andeq	r4, r1, r0, asr r2
   12594:	andeq	r4, r1, ip, lsl #1
   12598:	andeq	r4, r1, ip, lsr r2
   1259c:	push	{r4, r5, r6, r7, r8, lr}
   125a0:	subs	r4, r0, #0
   125a4:	mov	r2, #5
   125a8:	mov	r5, r1
   125ac:	beq	12618 <__assert_fail@plt+0x12d8>
   125b0:	ldr	r1, [pc, #120]	; 12630 <__assert_fail@plt+0x12f0>
   125b4:	mov	r0, #0
   125b8:	bl	110b8 <dcgettext@plt>
   125bc:	mov	r2, r4
   125c0:	mov	r1, r0
   125c4:	mov	r0, r5
   125c8:	bl	111f0 <fprintf@plt>
   125cc:	bl	11040 <bfd_arch_list@plt>
   125d0:	ldr	r2, [r0]
   125d4:	mov	r7, r0
   125d8:	cmp	r2, #0
   125dc:	beq	12600 <__assert_fail@plt+0x12c0>
   125e0:	ldr	r6, [pc, #76]	; 12634 <__assert_fail@plt+0x12f4>
   125e4:	mov	r4, r0
   125e8:	mov	r1, r6
   125ec:	mov	r0, r5
   125f0:	bl	111f0 <fprintf@plt>
   125f4:	ldr	r2, [r4, #4]!
   125f8:	cmp	r2, #0
   125fc:	bne	125e8 <__assert_fail@plt+0x12a8>
   12600:	mov	r1, r5
   12604:	mov	r0, #10
   12608:	bl	1128c <fputc@plt>
   1260c:	mov	r0, r7
   12610:	pop	{r4, r5, r6, r7, r8, lr}
   12614:	b	11064 <free@plt>
   12618:	ldr	r1, [pc, #24]	; 12638 <__assert_fail@plt+0x12f8>
   1261c:	bl	110b8 <dcgettext@plt>
   12620:	mov	r1, r0
   12624:	mov	r0, r5
   12628:	bl	111f0 <fprintf@plt>
   1262c:	b	125cc <__assert_fail@plt+0x128c>
   12630:	andeq	r4, r1, r4, lsl #5
   12634:	andeq	r4, r1, ip, lsl #1
   12638:	andeq	r4, r1, r8, ror #4
   1263c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12640:	mov	r2, #5
   12644:	sub	sp, sp, #44	; 0x2c
   12648:	ldr	r1, [pc, #668]	; 128ec <__assert_fail@plt+0x15ac>
   1264c:	mov	r0, #0
   12650:	bl	110b8 <dcgettext@plt>
   12654:	ldr	r1, [pc, #660]	; 128f0 <__assert_fail@plt+0x15b0>
   12658:	bl	11028 <printf@plt>
   1265c:	mov	r0, #0
   12660:	bl	13950 <__assert_fail@plt+0x2610>
   12664:	mov	r3, #0
   12668:	add	r1, sp, #20
   1266c:	str	r3, [sp, #24]
   12670:	str	r3, [sp, #28]
   12674:	str	r3, [sp, #32]
   12678:	str	r3, [sp, #36]	; 0x24
   1267c:	str	r0, [sp, #20]
   12680:	ldr	r0, [pc, #620]	; 128f4 <__assert_fail@plt+0x15b4>
   12684:	bl	11214 <bfd_iterate_over_targets@plt>
   12688:	ldr	r0, [sp, #20]
   1268c:	bl	110c4 <unlink@plt>
   12690:	ldr	r0, [sp, #20]
   12694:	bl	11064 <free@plt>
   12698:	ldr	r4, [sp, #24]
   1269c:	cmp	r4, #0
   126a0:	beq	126b0 <__assert_fail@plt+0x1370>
   126a4:	mov	r0, r4
   126a8:	add	sp, sp, #44	; 0x2c
   126ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126b0:	mov	r7, r4
   126b4:	mov	r5, #2
   126b8:	mov	r1, #0
   126bc:	mov	r0, r5
   126c0:	bl	111fc <bfd_printable_arch_mach@plt>
   126c4:	bl	111d8 <strlen@plt>
   126c8:	add	r5, r5, #1
   126cc:	cmp	r7, r0
   126d0:	movlt	r7, r0
   126d4:	cmp	r5, #89	; 0x59
   126d8:	bne	126b8 <__assert_fail@plt+0x1378>
   126dc:	ldr	r0, [pc, #532]	; 128f8 <__assert_fail@plt+0x15b8>
   126e0:	bl	1116c <getenv@plt>
   126e4:	cmp	r0, #0
   126e8:	beq	12704 <__assert_fail@plt+0x13c4>
   126ec:	mov	r2, #10
   126f0:	mov	r1, #0
   126f4:	bl	1101c <strtol@plt>
   126f8:	subs	r3, r0, #0
   126fc:	str	r3, [sp, #12]
   12700:	bne	1270c <__assert_fail@plt+0x13cc>
   12704:	mov	r3, #80	; 0x50
   12708:	str	r3, [sp, #12]
   1270c:	ldr	r9, [sp, #28]
   12710:	ldr	fp, [pc, #484]	; 128fc <__assert_fail@plt+0x15bc>
   12714:	cmp	r4, r9
   12718:	bge	127e4 <__assert_fail@plt+0x14a4>
   1271c:	add	r3, r4, r4, lsl #1
   12720:	ldr	r2, [sp, #12]
   12724:	rsb	r3, r4, r3, lsl #3
   12728:	ldr	r8, [sp, #36]	; 0x24
   1272c:	sub	r6, r2, r7
   12730:	lsl	sl, r3, #2
   12734:	add	r8, r8, sl
   12738:	sub	r6, r6, #1
   1273c:	mov	r5, r4
   12740:	ldr	r0, [r8]
   12744:	bl	111d8 <strlen@plt>
   12748:	sub	r6, r6, #1
   1274c:	add	r8, r8, #92	; 0x5c
   12750:	subs	r6, r6, r0
   12754:	bmi	127f4 <__assert_fail@plt+0x14b4>
   12758:	add	r5, r5, #1
   1275c:	cmp	r9, r5
   12760:	bne	12740 <__assert_fail@plt+0x1400>
   12764:	ldr	r2, [pc, #404]	; 12900 <__assert_fail@plt+0x15c0>
   12768:	add	r1, r7, #1
   1276c:	ldr	r0, [pc, #400]	; 12904 <__assert_fail@plt+0x15c4>
   12770:	bl	11028 <printf@plt>
   12774:	mov	r8, sl
   12778:	mov	r6, r4
   1277c:	ldr	r3, [sp, #36]	; 0x24
   12780:	add	r6, r6, #1
   12784:	ldr	r0, [pc, #380]	; 12908 <__assert_fail@plt+0x15c8>
   12788:	ldr	r1, [r3, r8]
   1278c:	bl	11028 <printf@plt>
   12790:	cmp	r6, r5
   12794:	add	r8, r8, #92	; 0x5c
   12798:	bne	1277c <__assert_fail@plt+0x143c>
   1279c:	ldr	r1, [fp]
   127a0:	mov	r0, #10
   127a4:	bl	112c8 <putc@plt>
   127a8:	mov	r6, #2
   127ac:	mov	r1, #0
   127b0:	mov	r0, r6
   127b4:	bl	111fc <bfd_printable_arch_mach@plt>
   127b8:	ldr	r1, [pc, #332]	; 1290c <__assert_fail@plt+0x15cc>
   127bc:	bl	11010 <strcmp@plt>
   127c0:	cmp	r0, #0
   127c4:	bne	12810 <__assert_fail@plt+0x14d0>
   127c8:	add	r6, r6, #1
   127cc:	cmp	r6, #89	; 0x59
   127d0:	bne	127ac <__assert_fail@plt+0x146c>
   127d4:	ldr	r9, [sp, #28]
   127d8:	mov	r4, r5
   127dc:	cmp	r4, r9
   127e0:	blt	1271c <__assert_fail@plt+0x13dc>
   127e4:	ldr	r4, [sp, #24]
   127e8:	mov	r0, r4
   127ec:	add	sp, sp, #44	; 0x2c
   127f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127f4:	ldr	r2, [pc, #260]	; 12900 <__assert_fail@plt+0x15c0>
   127f8:	add	r1, r7, #1
   127fc:	ldr	r0, [pc, #256]	; 12904 <__assert_fail@plt+0x15c4>
   12800:	bl	11028 <printf@plt>
   12804:	cmp	r4, r5
   12808:	bne	12774 <__assert_fail@plt+0x1434>
   1280c:	b	1279c <__assert_fail@plt+0x145c>
   12810:	mov	r1, #0
   12814:	mov	r0, r6
   12818:	bl	111fc <bfd_printable_arch_mach@plt>
   1281c:	mov	r1, r7
   12820:	mov	r2, r0
   12824:	ldr	r0, [pc, #228]	; 12910 <__assert_fail@plt+0x15d0>
   12828:	bl	11028 <printf@plt>
   1282c:	cmp	r4, r5
   12830:	beq	1288c <__assert_fail@plt+0x154c>
   12834:	mov	r8, sl
   12838:	mov	r9, r4
   1283c:	sub	r3, r6, #2
   12840:	str	r3, [sp, #4]
   12844:	ldr	r2, [sp, #36]	; 0x24
   12848:	ldr	r0, [sp, #4]
   1284c:	add	r3, r2, r8
   12850:	add	r3, r3, r0
   12854:	ldr	r1, [fp]
   12858:	ldrb	r3, [r3, #4]
   1285c:	ldr	r0, [r2, r8]
   12860:	cmp	r3, #0
   12864:	beq	1289c <__assert_fail@plt+0x155c>
   12868:	bl	1131c <fputs@plt>
   1286c:	ldr	r1, [fp]
   12870:	add	r9, r9, #1
   12874:	cmp	r5, r9
   12878:	add	r8, r8, #92	; 0x5c
   1287c:	beq	12890 <__assert_fail@plt+0x1550>
   12880:	mov	r0, #32
   12884:	bl	112c8 <putc@plt>
   12888:	b	12844 <__assert_fail@plt+0x1504>
   1288c:	ldr	r1, [fp]
   12890:	mov	r0, #10
   12894:	bl	112c8 <putc@plt>
   12898:	b	127c8 <__assert_fail@plt+0x1488>
   1289c:	str	r1, [sp, #8]
   128a0:	bl	111d8 <strlen@plt>
   128a4:	ldr	r1, [sp, #8]
   128a8:	cmp	r0, #0
   128ac:	sub	r3, r0, #1
   128b0:	beq	12870 <__assert_fail@plt+0x1530>
   128b4:	str	sl, [sp, #8]
   128b8:	mov	sl, r4
   128bc:	mov	r4, r3
   128c0:	b	128c8 <__assert_fail@plt+0x1588>
   128c4:	ldr	r1, [fp]
   128c8:	sub	r4, r4, #1
   128cc:	mov	r0, #45	; 0x2d
   128d0:	bl	112c8 <putc@plt>
   128d4:	cmn	r4, #1
   128d8:	bne	128c4 <__assert_fail@plt+0x1584>
   128dc:	mov	r4, sl
   128e0:	ldr	r1, [fp]
   128e4:	ldr	sl, [sp, #8]
   128e8:	b	12870 <__assert_fail@plt+0x1530>
   128ec:	andeq	r4, r1, r4, lsr #5
   128f0:	andeq	r4, r1, r0, asr #5
   128f4:			; <UNDEFINED> instruction: 0x000121b4
   128f8:	andeq	r4, r1, r4, ror #5
   128fc:	andeq	r5, r2, ip, lsl #4
   12900:	andeq	r4, r1, ip, ror #5
   12904:	strdeq	r4, [r1], -r0
   12908:	andeq	r4, r1, ip, lsr r3
   1290c:	strdeq	r4, [r1], -r8
   12910:	andeq	r4, r1, r4, lsl #6
   12914:	cmp	r2, #0
   12918:	push	{r4, r5, r6, r7, lr}
   1291c:	mov	r5, r0
   12920:	sub	sp, sp, #180	; 0xb4
   12924:	mov	r4, r1
   12928:	mov	r6, r3
   1292c:	beq	1294c <__assert_fail@plt+0x160c>
   12930:	ldr	r3, [r1, #4]
   12934:	mov	r0, r4
   12938:	add	r1, sp, #72	; 0x48
   1293c:	ldr	r3, [r3, #252]	; 0xfc
   12940:	blx	r3
   12944:	cmp	r0, #0
   12948:	beq	129a8 <__assert_fail@plt+0x1668>
   1294c:	mov	r1, r5
   12950:	ldr	r0, [r4]
   12954:	bl	1131c <fputs@plt>
   12958:	cmp	r6, #0
   1295c:	beq	12978 <__assert_fail@plt+0x1638>
   12960:	ldrb	r3, [r4, #44]	; 0x2c
   12964:	tst	r3, #1
   12968:	beq	1298c <__assert_fail@plt+0x164c>
   1296c:	ldrd	r2, [r4, #64]	; 0x40
   12970:	orrs	r1, r2, r3
   12974:	bne	12998 <__assert_fail@plt+0x1658>
   12978:	mov	r1, r5
   1297c:	mov	r0, #10
   12980:	bl	1128c <fputc@plt>
   12984:	add	sp, sp, #180	; 0xb4
   12988:	pop	{r4, r5, r6, r7, pc}
   1298c:	ldrd	r2, [r4, #56]	; 0x38
   12990:	orrs	r1, r2, r3
   12994:	beq	12978 <__assert_fail@plt+0x1638>
   12998:	ldr	r1, [pc, #148]	; 12a34 <__assert_fail@plt+0x16f4>
   1299c:	mov	r0, r5
   129a0:	bl	111f0 <fprintf@plt>
   129a4:	b	12978 <__assert_fail@plt+0x1638>
   129a8:	ldr	r3, [sp, #152]	; 0x98
   129ac:	add	r0, sp, #16
   129b0:	str	r3, [sp, #16]
   129b4:	bl	110ac <ctime@plt>
   129b8:	subs	r2, r0, #0
   129bc:	beq	12a14 <__assert_fail@plt+0x16d4>
   129c0:	add	r7, sp, #32
   129c4:	add	r3, r2, #20
   129c8:	mov	r0, r7
   129cc:	add	r2, r2, #4
   129d0:	ldr	r1, [pc, #96]	; 12a38 <__assert_fail@plt+0x16f8>
   129d4:	bl	112b0 <sprintf@plt>
   129d8:	add	r1, sp, #20
   129dc:	ldr	r0, [sp, #88]	; 0x58
   129e0:	bl	12eb0 <__assert_fail@plt+0x1b70>
   129e4:	ldr	r2, [sp, #120]	; 0x78
   129e8:	ldr	r3, [sp, #100]	; 0x64
   129ec:	mov	ip, #0
   129f0:	stmib	sp, {r2, r7}
   129f4:	str	r3, [sp]
   129f8:	add	r2, sp, #21
   129fc:	ldr	r3, [sp, #96]	; 0x60
   12a00:	ldr	r1, [pc, #52]	; 12a3c <__assert_fail@plt+0x16fc>
   12a04:	mov	r0, r5
   12a08:	strb	ip, [sp, #30]
   12a0c:	bl	111f0 <fprintf@plt>
   12a10:	b	1294c <__assert_fail@plt+0x160c>
   12a14:	mov	r2, #5
   12a18:	ldr	r1, [pc, #32]	; 12a40 <__assert_fail@plt+0x1700>
   12a1c:	bl	110b8 <dcgettext@plt>
   12a20:	add	r7, sp, #32
   12a24:	mov	r1, r0
   12a28:	mov	r0, r7
   12a2c:	bl	112b0 <sprintf@plt>
   12a30:	b	129d8 <__assert_fail@plt+0x1698>
   12a34:	andeq	r4, r1, r0, asr #6
   12a38:	andeq	r4, r1, r0, lsr #6
   12a3c:	andeq	r4, r1, ip, lsr #6
   12a40:	andeq	r4, r1, ip, lsl #6
   12a44:	push	{r4, lr}
   12a48:	bl	1206c <__assert_fail@plt+0xd2c>
   12a4c:	mov	r4, r0
   12a50:	bl	11178 <mkstemp64@plt>
   12a54:	cmn	r0, #1
   12a58:	beq	12a68 <__assert_fail@plt+0x1728>
   12a5c:	bl	11334 <close@plt>
   12a60:	mov	r0, r4
   12a64:	pop	{r4, pc}
   12a68:	mov	r0, r4
   12a6c:	bl	11064 <free@plt>
   12a70:	mov	r4, #0
   12a74:	b	12a60 <__assert_fail@plt+0x1720>
   12a78:	push	{r4, lr}
   12a7c:	bl	1206c <__assert_fail@plt+0xd2c>
   12a80:	pop	{r4, lr}
   12a84:	b	112bc <mkdtemp@plt>
   12a88:	push	{r4, r5, lr}
   12a8c:	sub	sp, sp, #12
   12a90:	mov	r4, r1
   12a94:	mov	r2, #0
   12a98:	add	r1, sp, #4
   12a9c:	mov	r5, r0
   12aa0:	bl	11004 <bfd_scan_vma@plt>
   12aa4:	ldr	r3, [sp, #4]
   12aa8:	ldrb	r3, [r3]
   12aac:	cmp	r3, #0
   12ab0:	bne	12abc <__assert_fail@plt+0x177c>
   12ab4:	add	sp, sp, #12
   12ab8:	pop	{r4, r5, pc}
   12abc:	mov	r2, #5
   12ac0:	ldr	r1, [pc, #16]	; 12ad8 <__assert_fail@plt+0x1798>
   12ac4:	mov	r0, #0
   12ac8:	bl	110b8 <dcgettext@plt>
   12acc:	mov	r2, r5
   12ad0:	mov	r1, r4
   12ad4:	bl	123d4 <__assert_fail@plt+0x1094>
   12ad8:	andeq	r4, r1, r8, asr #6
   12adc:	push	{r4, r5, r6, lr}
   12ae0:	subs	r4, r0, #0
   12ae4:	sub	sp, sp, #104	; 0x68
   12ae8:	beq	12bc0 <__assert_fail@plt+0x1880>
   12aec:	mov	r2, sp
   12af0:	mov	r1, r4
   12af4:	mov	r0, #3
   12af8:	bl	11310 <__xstat64@plt>
   12afc:	cmp	r0, #0
   12b00:	blt	12b44 <__assert_fail@plt+0x1804>
   12b04:	ldr	r3, [sp, #16]
   12b08:	and	r3, r3, #61440	; 0xf000
   12b0c:	cmp	r3, #16384	; 0x4000
   12b10:	moveq	r2, #5
   12b14:	ldreq	r1, [pc, #176]	; 12bcc <__assert_fail@plt+0x188c>
   12b18:	beq	12ba0 <__assert_fail@plt+0x1860>
   12b1c:	cmp	r3, #32768	; 0x8000
   12b20:	movne	r2, #5
   12b24:	ldrne	r1, [pc, #164]	; 12bd0 <__assert_fail@plt+0x1890>
   12b28:	bne	12ba0 <__assert_fail@plt+0x1860>
   12b2c:	ldrd	r0, [sp, #48]	; 0x30
   12b30:	cmp	r0, #0
   12b34:	sbcs	r3, r1, #0
   12b38:	blt	12b98 <__assert_fail@plt+0x1858>
   12b3c:	add	sp, sp, #104	; 0x68
   12b40:	pop	{r4, r5, r6, pc}
   12b44:	bl	11208 <__errno_location@plt>
   12b48:	mov	r2, #5
   12b4c:	ldr	r3, [r0]
   12b50:	mov	r5, r0
   12b54:	cmp	r3, #2
   12b58:	ldreq	r1, [pc, #116]	; 12bd4 <__assert_fail@plt+0x1894>
   12b5c:	beq	12ba0 <__assert_fail@plt+0x1860>
   12b60:	ldr	r1, [pc, #112]	; 12bd8 <__assert_fail@plt+0x1898>
   12b64:	mov	r0, #0
   12b68:	bl	110b8 <dcgettext@plt>
   12b6c:	mov	r6, r0
   12b70:	ldr	r0, [r5]
   12b74:	bl	11190 <strerror@plt>
   12b78:	mov	r1, r4
   12b7c:	mov	r2, r0
   12b80:	mov	r0, r6
   12b84:	bl	123fc <__assert_fail@plt+0x10bc>
   12b88:	mvn	r0, #0
   12b8c:	mvn	r1, #0
   12b90:	add	sp, sp, #104	; 0x68
   12b94:	pop	{r4, r5, r6, pc}
   12b98:	ldr	r1, [pc, #60]	; 12bdc <__assert_fail@plt+0x189c>
   12b9c:	mov	r2, #5
   12ba0:	mov	r0, #0
   12ba4:	bl	110b8 <dcgettext@plt>
   12ba8:	mov	r1, r4
   12bac:	bl	123fc <__assert_fail@plt+0x10bc>
   12bb0:	mvn	r0, #0
   12bb4:	mvn	r1, #0
   12bb8:	add	sp, sp, #104	; 0x68
   12bbc:	pop	{r4, r5, r6, pc}
   12bc0:	mvn	r0, #0
   12bc4:	mvn	r1, #0
   12bc8:	b	12b3c <__assert_fail@plt+0x17fc>
   12bcc:	muleq	r1, r0, r0
   12bd0:	andeq	r4, r1, ip, asr r3
   12bd4:	andeq	r4, r1, r0, asr r0
   12bd8:	andeq	r4, r1, r4, rrx
   12bdc:	andeq	r4, r1, r4, lsl #7
   12be0:	push	{r4, r5, r6, r7, r8, lr}
   12be4:	subs	r6, r0, #0
   12be8:	beq	12c90 <__assert_fail@plt+0x1950>
   12bec:	ldr	r3, [r6, #140]	; 0x8c
   12bf0:	ldr	r5, [r6]
   12bf4:	cmp	r3, #0
   12bf8:	beq	12c50 <__assert_fail@plt+0x1910>
   12bfc:	ldrb	r2, [r3, #44]	; 0x2c
   12c00:	tst	r2, #1
   12c04:	bne	12c50 <__assert_fail@plt+0x1910>
   12c08:	ldr	r8, [r3]
   12c0c:	ldr	r7, [pc, #144]	; 12ca4 <__assert_fail@plt+0x1964>
   12c10:	mov	r0, r8
   12c14:	bl	111d8 <strlen@plt>
   12c18:	mov	r4, r0
   12c1c:	mov	r0, r5
   12c20:	bl	111d8 <strlen@plt>
   12c24:	ldr	r3, [r7]
   12c28:	add	r4, r4, r0
   12c2c:	add	r4, r4, #3
   12c30:	cmp	r3, r4
   12c34:	bcc	12c58 <__assert_fail@plt+0x1918>
   12c38:	ldr	r0, [r7, #4]
   12c3c:	mov	r3, r5
   12c40:	mov	r2, r8
   12c44:	ldr	r1, [pc, #92]	; 12ca8 <__assert_fail@plt+0x1968>
   12c48:	bl	112b0 <sprintf@plt>
   12c4c:	ldr	r5, [r7, #4]
   12c50:	mov	r0, r5
   12c54:	pop	{r4, r5, r6, r7, r8, pc}
   12c58:	cmp	r3, #0
   12c5c:	bne	12c84 <__assert_fail@plt+0x1944>
   12c60:	add	r4, r4, r4, lsr #1
   12c64:	mov	r0, r4
   12c68:	str	r4, [r7]
   12c6c:	bl	11118 <xmalloc@plt>
   12c70:	ldr	r3, [r6, #140]	; 0x8c
   12c74:	ldr	r5, [r6]
   12c78:	ldr	r8, [r3]
   12c7c:	str	r0, [r7, #4]
   12c80:	b	12c3c <__assert_fail@plt+0x18fc>
   12c84:	ldr	r0, [r7, #4]
   12c88:	bl	11064 <free@plt>
   12c8c:	b	12c60 <__assert_fail@plt+0x1920>
   12c90:	ldr	r3, [pc, #20]	; 12cac <__assert_fail@plt+0x196c>
   12c94:	ldr	r2, [pc, #20]	; 12cb0 <__assert_fail@plt+0x1970>
   12c98:	ldr	r1, [pc, #20]	; 12cb4 <__assert_fail@plt+0x1974>
   12c9c:	ldr	r0, [pc, #20]	; 12cb8 <__assert_fail@plt+0x1978>
   12ca0:	bl	11340 <__assert_fail@plt>
   12ca4:	andeq	r5, r2, r0, asr #4
   12ca8:	andeq	r4, r1, r8, ror #7
   12cac:	andeq	r4, r1, r4, asr r1
   12cb0:	andeq	r0, r0, r9, ror r2
   12cb4:	andeq	r4, r1, r0, asr #7
   12cb8:	ldrdeq	r4, [r1], -r8
   12cbc:	push	{r3}		; (str r3, [sp, #-4]!)
   12cc0:	push	{r4, r5, r6, r7, r8, r9, lr}
   12cc4:	sub	sp, sp, #8
   12cc8:	mov	r8, r1
   12ccc:	mov	r7, r2
   12cd0:	mov	r5, r0
   12cd4:	ldr	r6, [sp, #36]	; 0x24
   12cd8:	bl	11100 <bfd_get_error@plt>
   12cdc:	bl	112e0 <bfd_errmsg@plt>
   12ce0:	ldr	r3, [pc, #204]	; 12db4 <__assert_fail@plt+0x1a74>
   12ce4:	ldr	r4, [pc, #204]	; 12db8 <__assert_fail@plt+0x1a78>
   12ce8:	mov	r9, r0
   12cec:	ldr	r0, [r3]
   12cf0:	bl	11034 <fflush@plt>
   12cf4:	ldr	r2, [pc, #192]	; 12dbc <__assert_fail@plt+0x1a7c>
   12cf8:	add	r3, sp, #40	; 0x28
   12cfc:	ldr	r1, [r4]
   12d00:	ldr	r0, [r2]
   12d04:	str	r3, [sp, #4]
   12d08:	bl	1131c <fputs@plt>
   12d0c:	cmp	r8, #0
   12d10:	beq	12d44 <__assert_fail@plt+0x1a04>
   12d14:	cmp	r5, #0
   12d18:	beq	12da4 <__assert_fail@plt+0x1a64>
   12d1c:	cmp	r7, #0
   12d20:	ldr	r0, [r4]
   12d24:	beq	12d48 <__assert_fail@plt+0x1a08>
   12d28:	ldr	r3, [r7]
   12d2c:	cmp	r3, #0
   12d30:	beq	12d48 <__assert_fail@plt+0x1a08>
   12d34:	mov	r2, r5
   12d38:	ldr	r1, [pc, #128]	; 12dc0 <__assert_fail@plt+0x1a80>
   12d3c:	bl	111f0 <fprintf@plt>
   12d40:	b	12d54 <__assert_fail@plt+0x1a14>
   12d44:	ldr	r0, [r4]
   12d48:	mov	r2, r5
   12d4c:	ldr	r1, [pc, #112]	; 12dc4 <__assert_fail@plt+0x1a84>
   12d50:	bl	111f0 <fprintf@plt>
   12d54:	cmp	r6, #0
   12d58:	ldr	r0, [r4]
   12d5c:	beq	12d88 <__assert_fail@plt+0x1a48>
   12d60:	mov	r3, r0
   12d64:	mov	r2, #2
   12d68:	mov	r1, #1
   12d6c:	ldr	r0, [pc, #84]	; 12dc8 <__assert_fail@plt+0x1a88>
   12d70:	bl	1110c <fwrite@plt>
   12d74:	mov	r1, r6
   12d78:	ldr	r2, [sp, #4]
   12d7c:	ldr	r0, [r4]
   12d80:	bl	11280 <vfprintf@plt>
   12d84:	ldr	r0, [r4]
   12d88:	mov	r2, r9
   12d8c:	ldr	r1, [pc, #56]	; 12dcc <__assert_fail@plt+0x1a8c>
   12d90:	bl	111f0 <fprintf@plt>
   12d94:	add	sp, sp, #8
   12d98:	pop	{r4, r5, r6, r7, r8, r9, lr}
   12d9c:	add	sp, sp, #4
   12da0:	bx	lr
   12da4:	mov	r0, r8
   12da8:	bl	12be0 <__assert_fail@plt+0x18a0>
   12dac:	mov	r5, r0
   12db0:	b	12d1c <__assert_fail@plt+0x19dc>
   12db4:	andeq	r5, r2, ip, lsl #4
   12db8:	andeq	r5, r2, r0, lsl #4
   12dbc:	andeq	r5, r2, ip, asr #4
   12dc0:	strdeq	r4, [r1], -r0
   12dc4:	strdeq	r4, [r1], -r8
   12dc8:	strdeq	r4, [r1], -ip
   12dcc:	andeq	r4, r1, r0, lsl #8
   12dd0:	ldrb	r3, [r0]
   12dd4:	cmp	r3, #47	; 0x2f
   12dd8:	beq	12e54 <__assert_fail@plt+0x1b14>
   12ddc:	cmp	r3, #0
   12de0:	beq	12e18 <__assert_fail@plt+0x1ad8>
   12de4:	cmp	r3, #46	; 0x2e
   12de8:	beq	12e20 <__assert_fail@plt+0x1ae0>
   12dec:	ldrb	r3, [r0, #1]!
   12df0:	cmp	r3, #0
   12df4:	cmpne	r3, #47	; 0x2f
   12df8:	bne	12dec <__assert_fail@plt+0x1aac>
   12dfc:	cmp	r3, #47	; 0x2f
   12e00:	bne	12ddc <__assert_fail@plt+0x1a9c>
   12e04:	ldrb	r3, [r0, #1]!
   12e08:	cmp	r3, #47	; 0x2f
   12e0c:	beq	12e04 <__assert_fail@plt+0x1ac4>
   12e10:	cmp	r3, #0
   12e14:	bne	12de4 <__assert_fail@plt+0x1aa4>
   12e18:	mov	r0, #1
   12e1c:	bx	lr
   12e20:	ldrb	r3, [r0, #1]
   12e24:	cmp	r3, #46	; 0x2e
   12e28:	beq	12e40 <__assert_fail@plt+0x1b00>
   12e2c:	cmp	r3, #0
   12e30:	cmpne	r3, #47	; 0x2f
   12e34:	add	r0, r0, #1
   12e38:	bne	12dec <__assert_fail@plt+0x1aac>
   12e3c:	b	12e08 <__assert_fail@plt+0x1ac8>
   12e40:	ldrb	r3, [r0, #2]
   12e44:	add	r0, r0, #2
   12e48:	cmp	r3, #0
   12e4c:	cmpne	r3, #47	; 0x2f
   12e50:	bne	12dec <__assert_fail@plt+0x1aac>
   12e54:	mov	r0, #0
   12e58:	bx	lr
   12e5c:	push	{r4, lr}
   12e60:	mov	r1, r0
   12e64:	ldr	r2, [pc, #52]	; 12ea0 <__assert_fail@plt+0x1b60>
   12e68:	ldr	r0, [pc, #52]	; 12ea4 <__assert_fail@plt+0x1b64>
   12e6c:	bl	11028 <printf@plt>
   12e70:	mov	r2, #5
   12e74:	ldr	r1, [pc, #44]	; 12ea8 <__assert_fail@plt+0x1b68>
   12e78:	mov	r0, #0
   12e7c:	bl	110b8 <dcgettext@plt>
   12e80:	bl	11028 <printf@plt>
   12e84:	mov	r2, #5
   12e88:	ldr	r1, [pc, #28]	; 12eac <__assert_fail@plt+0x1b6c>
   12e8c:	mov	r0, #0
   12e90:	bl	110b8 <dcgettext@plt>
   12e94:	bl	11028 <printf@plt>
   12e98:	mov	r0, #0
   12e9c:	bl	111c0 <exit@plt>
   12ea0:	andeq	r4, r1, r0, asr #5
   12ea4:	andeq	r4, r1, r8, lsl #8
   12ea8:	andeq	r4, r1, r4, lsl r4
   12eac:	andeq	r4, r1, r8, asr #8
   12eb0:	and	r3, r0, #61440	; 0xf000
   12eb4:	cmp	r3, #16384	; 0x4000
   12eb8:	push	{r4, r5, lr}
   12ebc:	moveq	r2, #100	; 0x64
   12ec0:	beq	12f00 <__assert_fail@plt+0x1bc0>
   12ec4:	cmp	r3, #40960	; 0xa000
   12ec8:	moveq	r2, #108	; 0x6c
   12ecc:	beq	12f00 <__assert_fail@plt+0x1bc0>
   12ed0:	cmp	r3, #24576	; 0x6000
   12ed4:	moveq	r2, #98	; 0x62
   12ed8:	beq	12f00 <__assert_fail@plt+0x1bc0>
   12edc:	cmp	r3, #8192	; 0x2000
   12ee0:	moveq	r2, #99	; 0x63
   12ee4:	beq	12f00 <__assert_fail@plt+0x1bc0>
   12ee8:	cmp	r3, #49152	; 0xc000
   12eec:	moveq	r2, #115	; 0x73
   12ef0:	beq	12f00 <__assert_fail@plt+0x1bc0>
   12ef4:	cmp	r3, #4096	; 0x1000
   12ef8:	moveq	r2, #112	; 0x70
   12efc:	movne	r2, #45	; 0x2d
   12f00:	tst	r0, #256	; 0x100
   12f04:	movne	r5, #114	; 0x72
   12f08:	moveq	r5, #45	; 0x2d
   12f0c:	tst	r0, #128	; 0x80
   12f10:	movne	r3, #119	; 0x77
   12f14:	moveq	r3, #45	; 0x2d
   12f18:	tst	r0, #64	; 0x40
   12f1c:	movne	ip, #120	; 0x78
   12f20:	moveq	ip, #45	; 0x2d
   12f24:	tst	r0, #32
   12f28:	movne	r4, #114	; 0x72
   12f2c:	moveq	r4, #45	; 0x2d
   12f30:	tst	r0, #16
   12f34:	movne	lr, #119	; 0x77
   12f38:	moveq	lr, #45	; 0x2d
   12f3c:	tst	r0, #8
   12f40:	strb	r2, [r1]
   12f44:	movne	r2, #120	; 0x78
   12f48:	moveq	r2, #45	; 0x2d
   12f4c:	tst	r0, #4
   12f50:	strb	r3, [r1, #2]
   12f54:	movne	r3, #114	; 0x72
   12f58:	moveq	r3, #45	; 0x2d
   12f5c:	tst	r0, #2
   12f60:	strb	lr, [r1, #5]
   12f64:	movne	lr, #119	; 0x77
   12f68:	moveq	lr, #45	; 0x2d
   12f6c:	tst	r0, #1
   12f70:	strb	r3, [r1, #7]
   12f74:	movne	r3, #120	; 0x78
   12f78:	moveq	r3, #45	; 0x2d
   12f7c:	tst	r0, #2048	; 0x800
   12f80:	strb	r5, [r1, #1]
   12f84:	strb	ip, [r1, #3]
   12f88:	strb	r4, [r1, #4]
   12f8c:	strb	r2, [r1, #6]
   12f90:	strb	lr, [r1, #8]
   12f94:	strb	r3, [r1, #9]
   12f98:	beq	12fac <__assert_fail@plt+0x1c6c>
   12f9c:	cmp	ip, #120	; 0x78
   12fa0:	movne	ip, #83	; 0x53
   12fa4:	moveq	ip, #115	; 0x73
   12fa8:	strb	ip, [r1, #3]
   12fac:	tst	r0, #1024	; 0x400
   12fb0:	beq	12fc4 <__assert_fail@plt+0x1c84>
   12fb4:	cmp	r2, #120	; 0x78
   12fb8:	movne	r2, #83	; 0x53
   12fbc:	moveq	r2, #115	; 0x73
   12fc0:	strb	r2, [r1, #6]
   12fc4:	tst	r0, #512	; 0x200
   12fc8:	popeq	{r4, r5, pc}
   12fcc:	cmp	r3, #120	; 0x78
   12fd0:	movne	r3, #84	; 0x54
   12fd4:	moveq	r3, #116	; 0x74
   12fd8:	strb	r3, [r1, #9]
   12fdc:	pop	{r4, r5, pc}
   12fe0:	push	{r4, r5, r6, lr}
   12fe4:	subs	r5, r0, #0
   12fe8:	beq	13080 <__assert_fail@plt+0x1d40>
   12fec:	ldr	r3, [r5]
   12ff0:	cmp	r3, #0
   12ff4:	beq	13070 <__assert_fail@plt+0x1d30>
   12ff8:	mov	r3, r5
   12ffc:	mov	r0, #0
   13000:	b	13008 <__assert_fail@plt+0x1cc8>
   13004:	mov	r0, r1
   13008:	ldr	r2, [r3, #4]!
   1300c:	add	r1, r0, #1
   13010:	cmp	r2, #0
   13014:	bne	13004 <__assert_fail@plt+0x1cc4>
   13018:	add	r0, r0, #2
   1301c:	lsl	r0, r0, #2
   13020:	bl	11118 <xmalloc@plt>
   13024:	ldr	r2, [r5]
   13028:	cmp	r2, #0
   1302c:	mov	r6, r0
   13030:	beq	13078 <__assert_fail@plt+0x1d38>
   13034:	sub	r4, r0, #4
   13038:	mov	r0, r2
   1303c:	bl	11130 <xstrdup@plt>
   13040:	ldr	r2, [r5, #4]!
   13044:	add	r3, r4, #8
   13048:	cmp	r2, #0
   1304c:	sub	r3, r3, r6
   13050:	add	r4, r4, #4
   13054:	str	r0, [r4]
   13058:	bne	13038 <__assert_fail@plt+0x1cf8>
   1305c:	add	r3, r6, r3
   13060:	mov	r2, #0
   13064:	str	r2, [r3]
   13068:	mov	r0, r6
   1306c:	pop	{r4, r5, r6, pc}
   13070:	mov	r0, #4
   13074:	b	13020 <__assert_fail@plt+0x1ce0>
   13078:	mov	r3, r0
   1307c:	b	13060 <__assert_fail@plt+0x1d20>
   13080:	mov	r6, r5
   13084:	b	13068 <__assert_fail@plt+0x1d28>
   13088:	push	{r4, r5, r6, lr}
   1308c:	subs	r5, r0, #0
   13090:	popeq	{r4, r5, r6, pc}
   13094:	ldr	r0, [r5]
   13098:	cmp	r0, #0
   1309c:	beq	130b4 <__assert_fail@plt+0x1d74>
   130a0:	mov	r4, r5
   130a4:	bl	11064 <free@plt>
   130a8:	ldr	r0, [r4, #4]!
   130ac:	cmp	r0, #0
   130b0:	bne	130a4 <__assert_fail@plt+0x1d64>
   130b4:	mov	r0, r5
   130b8:	pop	{r4, r5, r6, lr}
   130bc:	b	11064 <free@plt>
   130c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130c4:	subs	r4, r0, #0
   130c8:	ldr	r6, [pc, #512]	; 132d0 <__assert_fail@plt+0x1f90>
   130cc:	sub	sp, sp, #12
   130d0:	add	r6, pc, r6
   130d4:	moveq	r9, r4
   130d8:	beq	13274 <__assert_fail@plt+0x1f34>
   130dc:	bl	111d8 <strlen@plt>
   130e0:	mov	r9, #0
   130e4:	mov	fp, r9
   130e8:	mov	sl, r9
   130ec:	mov	r5, r9
   130f0:	mov	r8, r9
   130f4:	mov	r7, r9
   130f8:	add	r0, r0, #1
   130fc:	bl	11118 <xmalloc@plt>
   13100:	ldr	r2, [pc, #460]	; 132d4 <__assert_fail@plt+0x1f94>
   13104:	str	r0, [sp]
   13108:	ldr	r6, [r6, r2]
   1310c:	ldrb	r2, [r4]
   13110:	lsl	r2, r2, #1
   13114:	ldrh	r2, [r6, r2]
   13118:	tst	r2, #64	; 0x40
   1311c:	beq	13134 <__assert_fail@plt+0x1df4>
   13120:	ldrb	r2, [r4, #1]!
   13124:	lsl	r2, r2, #1
   13128:	ldrh	r2, [r6, r2]
   1312c:	tst	r2, #64	; 0x40
   13130:	bne	13120 <__assert_fail@plt+0x1de0>
   13134:	cmp	fp, #0
   13138:	lsl	r2, sl, #2
   1313c:	beq	13150 <__assert_fail@plt+0x1e10>
   13140:	sub	r1, fp, #1
   13144:	cmp	r1, sl
   13148:	addgt	r1, r9, r2
   1314c:	bgt	13180 <__assert_fail@plt+0x1e40>
   13150:	cmp	r9, #0
   13154:	str	r2, [sp, #4]
   13158:	beq	132b8 <__assert_fail@plt+0x1f78>
   1315c:	lsl	fp, fp, #1
   13160:	mov	r0, r9
   13164:	lsl	r1, fp, #2
   13168:	bl	110d0 <xrealloc@plt>
   1316c:	ldr	r2, [sp, #4]
   13170:	mov	r9, r0
   13174:	add	r1, r9, r2
   13178:	mov	r3, #0
   1317c:	str	r3, [r9, r2]
   13180:	ldrb	r2, [r4]
   13184:	ldr	r0, [sp]
   13188:	cmp	r2, #0
   1318c:	bne	131b0 <__assert_fail@plt+0x1e70>
   13190:	b	13214 <__assert_fail@plt+0x1ed4>
   13194:	cmp	r2, #39	; 0x27
   13198:	moveq	r7, r5
   1319c:	beq	131a4 <__assert_fail@plt+0x1e64>
   131a0:	strb	r2, [r0], #1
   131a4:	ldrb	r2, [r4, #1]!
   131a8:	cmp	r2, #0
   131ac:	beq	13214 <__assert_fail@plt+0x1ed4>
   131b0:	lsl	ip, r2, #1
   131b4:	ldrh	ip, [r6, ip]
   131b8:	tst	ip, #64	; 0x40
   131bc:	beq	131cc <__assert_fail@plt+0x1e8c>
   131c0:	orr	ip, r8, r7
   131c4:	orrs	ip, ip, r5
   131c8:	beq	132a8 <__assert_fail@plt+0x1f68>
   131cc:	cmp	r5, #0
   131d0:	movne	r5, #0
   131d4:	strbne	r2, [r0], #1
   131d8:	bne	131a4 <__assert_fail@plt+0x1e64>
   131dc:	cmp	r2, #92	; 0x5c
   131e0:	moveq	r5, #1
   131e4:	beq	131a4 <__assert_fail@plt+0x1e64>
   131e8:	cmp	r7, #0
   131ec:	bne	13194 <__assert_fail@plt+0x1e54>
   131f0:	cmp	r8, #0
   131f4:	beq	13280 <__assert_fail@plt+0x1f40>
   131f8:	cmp	r2, #34	; 0x22
   131fc:	mov	r5, r7
   13200:	moveq	r8, r7
   13204:	bne	131a0 <__assert_fail@plt+0x1e60>
   13208:	ldrb	r2, [r4, #1]!
   1320c:	cmp	r2, #0
   13210:	bne	131b0 <__assert_fail@plt+0x1e70>
   13214:	mov	r3, #0
   13218:	strb	r3, [r0]
   1321c:	ldr	r0, [sp]
   13220:	str	r1, [sp, #4]
   13224:	bl	11130 <xstrdup@plt>
   13228:	ldr	r1, [sp, #4]
   1322c:	mov	r3, #0
   13230:	add	sl, sl, #1
   13234:	str	r3, [r1, #4]
   13238:	str	r0, [r1]
   1323c:	ldrb	r2, [r4]
   13240:	lsl	r1, r2, #1
   13244:	ldrh	r1, [r6, r1]
   13248:	tst	r1, #64	; 0x40
   1324c:	beq	13264 <__assert_fail@plt+0x1f24>
   13250:	ldrb	r2, [r4, #1]!
   13254:	lsl	r1, r2, #1
   13258:	ldrh	r1, [r6, r1]
   1325c:	tst	r1, #64	; 0x40
   13260:	bne	13250 <__assert_fail@plt+0x1f10>
   13264:	cmp	r2, #0
   13268:	bne	1310c <__assert_fail@plt+0x1dcc>
   1326c:	ldr	r0, [sp]
   13270:	bl	11064 <free@plt>
   13274:	mov	r0, r9
   13278:	add	sp, sp, #12
   1327c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13280:	cmp	r2, #39	; 0x27
   13284:	mov	r5, r8
   13288:	moveq	r7, #1
   1328c:	beq	131a4 <__assert_fail@plt+0x1e64>
   13290:	cmp	r2, #34	; 0x22
   13294:	moveq	r7, r8
   13298:	strbne	r2, [r0], #1
   1329c:	movne	r7, r8
   132a0:	moveq	r8, #1
   132a4:	b	131a4 <__assert_fail@plt+0x1e64>
   132a8:	mov	r8, ip
   132ac:	mov	r7, ip
   132b0:	mov	r5, ip
   132b4:	b	13214 <__assert_fail@plt+0x1ed4>
   132b8:	mov	r0, #32
   132bc:	bl	11118 <xmalloc@plt>
   132c0:	mov	fp, #8
   132c4:	ldr	r2, [sp, #4]
   132c8:	mov	r9, r0
   132cc:	b	13174 <__assert_fail@plt+0x1e34>
   132d0:	andeq	r1, r1, r8, lsr #30
   132d4:	andeq	r0, r0, r4, lsr #2
   132d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132dc:	subs	r6, r1, #0
   132e0:	ldr	r8, [pc, #192]	; 133a8 <__assert_fail@plt+0x2068>
   132e4:	add	r8, pc, r8
   132e8:	beq	13378 <__assert_fail@plt+0x2038>
   132ec:	ldr	r5, [r0]
   132f0:	mov	r9, r0
   132f4:	cmp	r5, #0
   132f8:	beq	133a0 <__assert_fail@plt+0x2060>
   132fc:	ldrb	r4, [r5]
   13300:	cmp	r4, #0
   13304:	beq	13380 <__assert_fail@plt+0x2040>
   13308:	ldr	r3, [pc, #156]	; 133ac <__assert_fail@plt+0x206c>
   1330c:	ldr	r7, [r8, r3]
   13310:	b	13320 <__assert_fail@plt+0x1fe0>
   13314:	ldrb	r4, [r5, #1]!
   13318:	cmp	r4, #0
   1331c:	beq	13380 <__assert_fail@plt+0x2040>
   13320:	lsl	r3, r4, #1
   13324:	mov	r1, r6
   13328:	ldrh	r3, [r7, r3]
   1332c:	mov	r0, #92	; 0x5c
   13330:	tst	r3, #64	; 0x40
   13334:	bne	13358 <__assert_fail@plt+0x2018>
   13338:	cmp	r4, #39	; 0x27
   1333c:	cmpne	r4, r0
   13340:	moveq	r3, #1
   13344:	movne	r3, #0
   13348:	cmp	r4, #34	; 0x22
   1334c:	orreq	r3, r3, #1
   13350:	cmp	r3, #0
   13354:	beq	13364 <__assert_fail@plt+0x2024>
   13358:	bl	1128c <fputc@plt>
   1335c:	cmn	r0, #1
   13360:	beq	13378 <__assert_fail@plt+0x2038>
   13364:	mov	r0, r4
   13368:	mov	r1, r6
   1336c:	bl	1128c <fputc@plt>
   13370:	cmn	r0, #1
   13374:	bne	13314 <__assert_fail@plt+0x1fd4>
   13378:	mov	r0, #1
   1337c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13380:	mov	r1, r6
   13384:	mov	r0, #10
   13388:	bl	1128c <fputc@plt>
   1338c:	cmn	r0, #1
   13390:	beq	13378 <__assert_fail@plt+0x2038>
   13394:	ldr	r5, [r9, #4]!
   13398:	cmp	r5, #0
   1339c:	bne	132fc <__assert_fail@plt+0x1fbc>
   133a0:	mov	r0, #0
   133a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133a8:	andeq	r1, r1, r4, lsl sp
   133ac:	andeq	r0, r0, r4, lsr #2
   133b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b4:	mov	r7, r1
   133b8:	sub	sp, sp, #140	; 0x8c
   133bc:	ldr	r3, [r7]
   133c0:	ldr	r1, [r0]
   133c4:	str	r3, [sp, #24]
   133c8:	ldr	r3, [pc, #824]	; 13708 <__assert_fail@plt+0x23c8>
   133cc:	mov	sl, r0
   133d0:	add	r3, pc, r3
   133d4:	str	r3, [sp, #28]
   133d8:	add	r3, sp, #32
   133dc:	str	r3, [sp]
   133e0:	ldr	r3, [pc, #804]	; 1370c <__assert_fail@plt+0x23cc>
   133e4:	mov	fp, #2000	; 0x7d0
   133e8:	mov	r5, #0
   133ec:	add	r3, pc, r3
   133f0:	str	r3, [sp, #4]
   133f4:	add	r4, r5, #1
   133f8:	cmp	r4, r1
   133fc:	bge	134f8 <__assert_fail@plt+0x21b8>
   13400:	ldr	r3, [r7]
   13404:	lsl	r8, r4, #2
   13408:	ldr	r0, [r3, r4, lsl #2]
   1340c:	ldrb	r2, [r0]
   13410:	cmp	r2, #64	; 0x40
   13414:	bne	13504 <__assert_fail@plt+0x21c4>
   13418:	subs	fp, fp, #1
   1341c:	beq	13698 <__assert_fail@plt+0x2358>
   13420:	add	r6, r0, #1
   13424:	mov	r1, r6
   13428:	ldr	r2, [sp]
   1342c:	mov	r0, #3
   13430:	bl	11310 <__xstat64@plt>
   13434:	cmp	r0, #0
   13438:	blt	13500 <__assert_fail@plt+0x21c0>
   1343c:	ldr	r3, [sp, #48]	; 0x30
   13440:	and	r3, r3, #61440	; 0xf000
   13444:	cmp	r3, #16384	; 0x4000
   13448:	beq	136c4 <__assert_fail@plt+0x2384>
   1344c:	mov	r0, r6
   13450:	ldr	r1, [sp, #4]
   13454:	bl	112d4 <fopen64@plt>
   13458:	subs	r9, r0, #0
   1345c:	beq	13500 <__assert_fail@plt+0x21c0>
   13460:	mov	r2, #2
   13464:	mov	r1, #0
   13468:	bl	11304 <fseek@plt>
   1346c:	cmn	r0, #1
   13470:	beq	134dc <__assert_fail@plt+0x219c>
   13474:	mov	r0, r9
   13478:	bl	110a0 <ftell@plt>
   1347c:	cmn	r0, #1
   13480:	mov	r6, r0
   13484:	beq	134dc <__assert_fail@plt+0x219c>
   13488:	mov	r2, #0
   1348c:	mov	r1, r2
   13490:	mov	r0, r9
   13494:	bl	11304 <fseek@plt>
   13498:	cmn	r0, #1
   1349c:	beq	134dc <__assert_fail@plt+0x219c>
   134a0:	add	r0, r6, #1
   134a4:	bl	11118 <xmalloc@plt>
   134a8:	mov	r3, r9
   134ac:	mov	r2, r6
   134b0:	mov	r1, #1
   134b4:	str	r0, [sp, #8]
   134b8:	bl	11148 <fread@plt>
   134bc:	cmp	r6, r0
   134c0:	mov	r3, r0
   134c4:	beq	13510 <__assert_fail@plt+0x21d0>
   134c8:	str	r0, [sp, #12]
   134cc:	mov	r0, r9
   134d0:	bl	11070 <ferror@plt>
   134d4:	cmp	r0, #0
   134d8:	beq	1350c <__assert_fail@plt+0x21cc>
   134dc:	mov	r0, r9
   134e0:	bl	11238 <fclose@plt>
   134e4:	mov	r5, r4
   134e8:	ldr	r1, [sl]
   134ec:	add	r4, r5, #1
   134f0:	cmp	r4, r1
   134f4:	blt	13400 <__assert_fail@plt+0x20c0>
   134f8:	add	sp, sp, #140	; 0x8c
   134fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13500:	ldr	r1, [sl]
   13504:	mov	r5, r4
   13508:	b	133f4 <__assert_fail@plt+0x20b4>
   1350c:	ldr	r3, [sp, #12]
   13510:	ldr	r1, [sp, #8]
   13514:	mov	r2, #0
   13518:	strb	r2, [r1, r3]
   1351c:	ldrb	r3, [r1]
   13520:	cmp	r3, r2
   13524:	beq	13568 <__assert_fail@plt+0x2228>
   13528:	ldr	r2, [pc, #480]	; 13710 <__assert_fail@plt+0x23d0>
   1352c:	ldr	r1, [sp, #28]
   13530:	lsl	r3, r3, #1
   13534:	ldr	r1, [r1, r2]
   13538:	ldrh	r3, [r1, r3]
   1353c:	tst	r3, #64	; 0x40
   13540:	beq	135a8 <__assert_fail@plt+0x2268>
   13544:	ldr	r2, [sp, #8]
   13548:	b	1355c <__assert_fail@plt+0x221c>
   1354c:	lsl	r3, r3, #1
   13550:	ldrh	r3, [r1, r3]
   13554:	tst	r3, #64	; 0x40
   13558:	beq	135a8 <__assert_fail@plt+0x2268>
   1355c:	ldrb	r3, [r2, #1]!
   13560:	cmp	r3, #0
   13564:	bne	1354c <__assert_fail@plt+0x220c>
   13568:	mov	r0, #4
   1356c:	bl	11118 <xmalloc@plt>
   13570:	ldr	r2, [sp, #24]
   13574:	mov	r6, #0
   13578:	mov	r3, r0
   1357c:	str	r0, [sp, #12]
   13580:	ldr	r0, [r7]
   13584:	str	r6, [r3]
   13588:	cmp	r2, r0
   1358c:	bne	1368c <__assert_fail@plt+0x234c>
   13590:	mov	r0, r2
   13594:	bl	12fe0 <__assert_fail@plt+0x1ca0>
   13598:	mov	r3, r6
   1359c:	mov	r2, r8
   135a0:	str	r0, [r7]
   135a4:	b	135f8 <__assert_fail@plt+0x22b8>
   135a8:	ldr	r0, [sp, #8]
   135ac:	bl	130c0 <__assert_fail@plt+0x1d80>
   135b0:	ldr	r2, [sp, #24]
   135b4:	mov	r3, r0
   135b8:	str	r0, [sp, #12]
   135bc:	ldr	r0, [r7]
   135c0:	cmp	r0, r2
   135c4:	beq	136f0 <__assert_fail@plt+0x23b0>
   135c8:	ldr	r6, [r3]
   135cc:	cmp	r6, #0
   135d0:	beq	1368c <__assert_fail@plt+0x234c>
   135d4:	ldr	r2, [sp, #12]
   135d8:	mov	r6, #0
   135dc:	ldr	r3, [r2, #4]!
   135e0:	add	r6, r6, #1
   135e4:	cmp	r3, #0
   135e8:	lsl	r3, r6, #2
   135ec:	bne	135dc <__assert_fail@plt+0x229c>
   135f0:	add	r2, r4, r6
   135f4:	lsl	r2, r2, #2
   135f8:	ldr	r0, [r0, r8]
   135fc:	str	r3, [sp, #16]
   13600:	str	r2, [sp, #20]
   13604:	bl	11064 <free@plt>
   13608:	ldr	r1, [sl]
   1360c:	ldr	r0, [r7]
   13610:	add	r1, r1, #1
   13614:	add	r1, r1, r6
   13618:	lsl	r1, r1, #2
   1361c:	bl	110d0 <xrealloc@plt>
   13620:	ldr	r2, [sp, #20]
   13624:	add	ip, r8, #4
   13628:	mov	r1, r0
   1362c:	ldr	r0, [sl]
   13630:	str	r1, [r7]
   13634:	sub	r4, r0, r4
   13638:	add	r0, r1, r2
   1363c:	add	r1, r1, ip
   13640:	lsl	r2, r4, #2
   13644:	bl	1104c <memmove@plt>
   13648:	ldr	r4, [sp, #12]
   1364c:	ldr	r3, [sp, #16]
   13650:	ldr	r0, [r7]
   13654:	mov	r2, r3
   13658:	mov	r1, r4
   1365c:	add	r0, r0, r8
   13660:	bl	1107c <memcpy@plt>
   13664:	ldr	r3, [sl]
   13668:	mov	r0, r4
   1366c:	sub	r3, r3, #1
   13670:	add	r6, r3, r6
   13674:	str	r6, [sl]
   13678:	bl	11064 <free@plt>
   1367c:	ldr	r0, [sp, #8]
   13680:	bl	11064 <free@plt>
   13684:	mov	r4, r5
   13688:	b	134dc <__assert_fail@plt+0x219c>
   1368c:	mov	r3, r6
   13690:	mov	r2, r8
   13694:	b	135f8 <__assert_fail@plt+0x22b8>
   13698:	ldr	r0, [pc, #116]	; 13714 <__assert_fail@plt+0x23d4>
   1369c:	ldr	r2, [r3]
   136a0:	mov	r3, r0
   136a4:	ldr	r0, [sp, #28]
   136a8:	ldr	r1, [pc, #104]	; 13718 <__assert_fail@plt+0x23d8>
   136ac:	ldr	r3, [r0, r3]
   136b0:	add	r1, pc, r1
   136b4:	ldr	r0, [r3]
   136b8:	bl	111f0 <fprintf@plt>
   136bc:	mov	r0, #1
   136c0:	bl	11298 <xexit@plt>
   136c4:	ldr	r0, [sp, #28]
   136c8:	ldr	r3, [pc, #68]	; 13714 <__assert_fail@plt+0x23d4>
   136cc:	ldr	r2, [r7]
   136d0:	ldr	r1, [pc, #68]	; 1371c <__assert_fail@plt+0x23dc>
   136d4:	ldr	r3, [r0, r3]
   136d8:	add	r1, pc, r1
   136dc:	ldr	r2, [r2]
   136e0:	ldr	r0, [r3]
   136e4:	bl	111f0 <fprintf@plt>
   136e8:	mov	r0, #1
   136ec:	bl	11298 <xexit@plt>
   136f0:	ldr	r3, [sp, #12]
   136f4:	ldr	r0, [sp, #24]
   136f8:	ldr	r6, [r3]
   136fc:	bl	12fe0 <__assert_fail@plt+0x1ca0>
   13700:	str	r0, [r7]
   13704:	b	135cc <__assert_fail@plt+0x228c>
   13708:	andeq	r1, r1, r8, lsr #24
   1370c:	andeq	r0, r0, r0, ror #25
   13710:	andeq	r0, r0, r4, lsr #2
   13714:	andeq	r0, r0, r8, lsr #2
   13718:	andeq	r0, r0, r4, asr lr
   1371c:	andeq	r0, r0, r8, asr lr
   13720:	subs	r3, r0, #0
   13724:	beq	1374c <__assert_fail@plt+0x240c>
   13728:	ldr	r0, [r3]
   1372c:	cmp	r0, #0
   13730:	bxeq	lr
   13734:	mov	r0, #0
   13738:	ldr	r2, [r3, #4]!
   1373c:	add	r0, r0, #1
   13740:	cmp	r2, #0
   13744:	bne	13738 <__assert_fail@plt+0x23f8>
   13748:	bx	lr
   1374c:	mov	r0, r3
   13750:	bx	lr
   13754:	ldr	r3, [pc, #452]	; 13920 <__assert_fail@plt+0x25e0>
   13758:	add	r3, pc, r3
   1375c:	ldr	r3, [r3]
   13760:	cmp	r3, #0
   13764:	beq	13770 <__assert_fail@plt+0x2430>
   13768:	mov	r0, r3
   1376c:	bx	lr
   13770:	ldr	r0, [pc, #428]	; 13924 <__assert_fail@plt+0x25e4>
   13774:	push	{r4, r5, r6, lr}
   13778:	add	r0, pc, r0
   1377c:	bl	1116c <getenv@plt>
   13780:	subs	r4, r0, #0
   13784:	beq	138f8 <__assert_fail@plt+0x25b8>
   13788:	mov	r1, #7
   1378c:	bl	1122c <access@plt>
   13790:	cmp	r0, #0
   13794:	bne	137f8 <__assert_fail@plt+0x24b8>
   13798:	ldr	r0, [pc, #392]	; 13928 <__assert_fail@plt+0x25e8>
   1379c:	add	r0, pc, r0
   137a0:	bl	1116c <getenv@plt>
   137a4:	ldr	r0, [pc, #384]	; 1392c <__assert_fail@plt+0x25ec>
   137a8:	add	r0, pc, r0
   137ac:	bl	1116c <getenv@plt>
   137b0:	mov	r0, r4
   137b4:	bl	111d8 <strlen@plt>
   137b8:	mov	r5, r0
   137bc:	add	r6, r5, #1
   137c0:	add	r0, r0, #2
   137c4:	bl	11118 <xmalloc@plt>
   137c8:	mov	r1, r4
   137cc:	bl	1113c <strcpy@plt>
   137d0:	ldr	r2, [pc, #344]	; 13930 <__assert_fail@plt+0x25f0>
   137d4:	mov	r1, #0
   137d8:	add	r2, pc, r2
   137dc:	mov	r3, r0
   137e0:	mov	r0, #47	; 0x2f
   137e4:	strb	r0, [r3, r5]
   137e8:	str	r3, [r2]
   137ec:	strb	r1, [r3, r6]
   137f0:	mov	r0, r3
   137f4:	pop	{r4, r5, r6, pc}
   137f8:	ldr	r0, [pc, #308]	; 13934 <__assert_fail@plt+0x25f4>
   137fc:	add	r0, pc, r0
   13800:	bl	1116c <getenv@plt>
   13804:	mov	r4, r0
   13808:	cmp	r4, #0
   1380c:	beq	1390c <__assert_fail@plt+0x25cc>
   13810:	mov	r1, #7
   13814:	mov	r0, r4
   13818:	bl	1122c <access@plt>
   1381c:	cmp	r0, #0
   13820:	beq	137a4 <__assert_fail@plt+0x2464>
   13824:	ldr	r0, [pc, #268]	; 13938 <__assert_fail@plt+0x25f8>
   13828:	add	r0, pc, r0
   1382c:	bl	1116c <getenv@plt>
   13830:	mov	r4, r0
   13834:	cmp	r4, #0
   13838:	beq	13850 <__assert_fail@plt+0x2510>
   1383c:	mov	r1, #7
   13840:	mov	r0, r4
   13844:	bl	1122c <access@plt>
   13848:	cmp	r0, #0
   1384c:	beq	137b0 <__assert_fail@plt+0x2470>
   13850:	ldr	r4, [pc, #228]	; 1393c <__assert_fail@plt+0x25fc>
   13854:	mov	r1, #7
   13858:	add	r4, pc, r4
   1385c:	mov	r0, r4
   13860:	bl	1122c <access@plt>
   13864:	cmp	r0, #0
   13868:	moveq	r6, #5
   1386c:	moveq	r0, #6
   13870:	moveq	r5, #4
   13874:	beq	137c4 <__assert_fail@plt+0x2484>
   13878:	ldr	r4, [pc, #192]	; 13940 <__assert_fail@plt+0x2600>
   1387c:	mov	r1, #7
   13880:	add	r4, pc, r4
   13884:	add	r6, r4, #20
   13888:	mov	r0, r6
   1388c:	bl	1122c <access@plt>
   13890:	cmp	r0, #0
   13894:	bne	138b4 <__assert_fail@plt+0x2574>
   13898:	mov	r0, r6
   1389c:	bl	111d8 <strlen@plt>
   138a0:	mov	r4, r6
   138a4:	mov	r5, r0
   138a8:	add	r6, r5, #1
   138ac:	add	r0, r0, #2
   138b0:	b	137c4 <__assert_fail@plt+0x2484>
   138b4:	mov	r1, #7
   138b8:	mov	r0, r4
   138bc:	bl	1122c <access@plt>
   138c0:	cmp	r0, #0
   138c4:	beq	137b0 <__assert_fail@plt+0x2470>
   138c8:	add	r4, r4, #12
   138cc:	mov	r0, r4
   138d0:	mov	r1, #7
   138d4:	bl	1122c <access@plt>
   138d8:	cmp	r0, #0
   138dc:	beq	137b0 <__assert_fail@plt+0x2470>
   138e0:	ldr	r4, [pc, #92]	; 13944 <__assert_fail@plt+0x2604>
   138e4:	mov	r6, #2
   138e8:	mov	r0, #3
   138ec:	mov	r5, #1
   138f0:	add	r4, pc, r4
   138f4:	b	137c4 <__assert_fail@plt+0x2484>
   138f8:	ldr	r0, [pc, #72]	; 13948 <__assert_fail@plt+0x2608>
   138fc:	add	r0, pc, r0
   13900:	bl	1116c <getenv@plt>
   13904:	mov	r4, r0
   13908:	b	13808 <__assert_fail@plt+0x24c8>
   1390c:	ldr	r0, [pc, #56]	; 1394c <__assert_fail@plt+0x260c>
   13910:	add	r0, pc, r0
   13914:	bl	1116c <getenv@plt>
   13918:	mov	r4, r0
   1391c:	b	13834 <__assert_fail@plt+0x24f4>
   13920:	andeq	r1, r1, r8, ror #21
   13924:	andeq	r0, r0, r0, lsl lr
   13928:	strdeq	r0, [r0], -r4
   1392c:	andeq	r0, r0, ip, ror #27
   13930:	andeq	r1, r1, r8, ror #20
   13934:	muleq	r0, r4, sp
   13938:	andeq	r0, r0, ip, ror #26
   1393c:	andeq	r0, r0, r4, lsr #26
   13940:	ldrdeq	r0, [r0], -ip
   13944:	muleq	r0, r4, ip
   13948:	muleq	r0, r4, ip
   1394c:	andeq	r0, r0, r4, lsl #25
   13950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13954:	mov	r6, r0
   13958:	bl	13754 <__assert_fail@plt+0x2414>
   1395c:	ldr	r8, [pc, #228]	; 13a48 <__assert_fail@plt+0x2708>
   13960:	cmp	r6, #0
   13964:	add	r8, pc, r8
   13968:	mov	r7, r0
   1396c:	beq	139fc <__assert_fail@plt+0x26bc>
   13970:	mov	r0, r6
   13974:	bl	111d8 <strlen@plt>
   13978:	mov	r4, r0
   1397c:	mov	r9, r0
   13980:	mov	r0, r7
   13984:	bl	111d8 <strlen@plt>
   13988:	mov	r5, r0
   1398c:	add	r0, r0, r4
   13990:	add	r0, r0, #9
   13994:	bl	11118 <xmalloc@plt>
   13998:	mov	r1, r7
   1399c:	mov	r4, r0
   139a0:	bl	1113c <strcpy@plt>
   139a4:	ldr	r3, [pc, #160]	; 13a4c <__assert_fail@plt+0x270c>
   139a8:	add	r2, r4, r5
   139ac:	add	r3, pc, r3
   139b0:	add	ip, r5, #8
   139b4:	ldm	r3!, {r0, r1}
   139b8:	ldrb	r3, [r3]
   139bc:	str	r0, [r4, r5]
   139c0:	str	r1, [r2, #4]
   139c4:	add	r0, r4, ip
   139c8:	mov	r1, r6
   139cc:	strb	r3, [r2, #8]
   139d0:	bl	1113c <strcpy@plt>
   139d4:	mov	r1, r9
   139d8:	mov	r0, r4
   139dc:	bl	11160 <mkstemps64@plt>
   139e0:	cmn	r0, #1
   139e4:	beq	13a10 <__assert_fail@plt+0x26d0>
   139e8:	bl	11334 <close@plt>
   139ec:	cmp	r0, #0
   139f0:	bne	13a44 <__assert_fail@plt+0x2704>
   139f4:	mov	r0, r4
   139f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139fc:	mov	r9, r6
   13a00:	mov	r4, r6
   13a04:	ldr	r6, [pc, #68]	; 13a50 <__assert_fail@plt+0x2710>
   13a08:	add	r6, pc, r6
   13a0c:	b	13980 <__assert_fail@plt+0x2640>
   13a10:	ldr	r3, [pc, #60]	; 13a54 <__assert_fail@plt+0x2714>
   13a14:	ldr	r3, [r8, r3]
   13a18:	ldr	r4, [r3]
   13a1c:	bl	11208 <__errno_location@plt>
   13a20:	ldr	r0, [r0]
   13a24:	bl	11190 <strerror@plt>
   13a28:	ldr	r1, [pc, #40]	; 13a58 <__assert_fail@plt+0x2718>
   13a2c:	mov	r2, r7
   13a30:	add	r1, pc, r1
   13a34:	mov	r3, r0
   13a38:	mov	r0, r4
   13a3c:	bl	111f0 <fprintf@plt>
   13a40:	bl	11328 <abort@plt>
   13a44:	bl	11328 <abort@plt>
   13a48:	muleq	r1, r4, r6
   13a4c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13a50:	ldrdeq	r0, [r0], -ip
   13a54:	andeq	r0, r0, r8, lsr #2
   13a58:	andeq	r0, r0, r8, ror fp
   13a5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a60:	mov	r7, r0
   13a64:	ldr	r6, [pc, #72]	; 13ab4 <__assert_fail@plt+0x2774>
   13a68:	ldr	r5, [pc, #72]	; 13ab8 <__assert_fail@plt+0x2778>
   13a6c:	add	r6, pc, r6
   13a70:	add	r5, pc, r5
   13a74:	sub	r6, r6, r5
   13a78:	mov	r8, r1
   13a7c:	mov	r9, r2
   13a80:	bl	10fe4 <bfd_scan_vma@plt-0x20>
   13a84:	asrs	r6, r6, #2
   13a88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a8c:	mov	r4, #0
   13a90:	add	r4, r4, #1
   13a94:	ldr	r3, [r5], #4
   13a98:	mov	r2, r9
   13a9c:	mov	r1, r8
   13aa0:	mov	r0, r7
   13aa4:	blx	r3
   13aa8:	cmp	r6, r4
   13aac:	bne	13a90 <__assert_fail@plt+0x2750>
   13ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ab4:	andeq	r1, r1, r8, lsl #5
   13ab8:	andeq	r1, r1, r0, lsl #5
   13abc:	bx	lr

Disassembly of section .fini:

00013ac0 <.fini>:
   13ac0:	push	{r3, lr}
   13ac4:	pop	{r3, pc}
