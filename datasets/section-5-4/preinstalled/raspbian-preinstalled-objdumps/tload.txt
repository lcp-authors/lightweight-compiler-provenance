
raspbian-preinstalled/tload:     file format elf32-littlearm


Disassembly of section .init:

00010c28 <_init@@Base>:
   10c28:	push	{r3, lr}
   10c2c:	bl	11508 <__snprintf_chk@plt+0x704>
   10c30:	pop	{r3, pc}

Disassembly of section .plt:

00010c34 <raise@plt-0x14>:
   10c34:	push	{lr}		; (str lr, [sp, #-4]!)
   10c38:	ldr	lr, [pc, #4]	; 10c44 <_init@@Base+0x1c>
   10c3c:	add	lr, pc, lr
   10c40:	ldr	pc, [lr, #8]!
   10c44:	andeq	r2, r1, r0, lsl r3

00010c48 <raise@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #73728	; 0x12000
   10c50:	ldr	pc, [ip, #784]!	; 0x310

00010c54 <strtol@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #73728	; 0x12000
   10c5c:	ldr	pc, [ip, #776]!	; 0x308

00010c60 <loadavg@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #73728	; 0x12000
   10c68:	ldr	pc, [ip, #768]!	; 0x300

00010c6c <pause@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #73728	; 0x12000
   10c74:	ldr	pc, [ip, #760]!	; 0x2f8

00010c78 <_setjmp@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #73728	; 0x12000
   10c80:	ldr	pc, [ip, #752]!	; 0x2f0

00010c84 <memmove@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #73728	; 0x12000
   10c8c:	ldr	pc, [ip, #744]!	; 0x2e8

00010c90 <ferror@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #73728	; 0x12000
   10c98:	ldr	pc, [ip, #736]!	; 0x2e0

00010c9c <_exit@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #73728	; 0x12000
   10ca4:	ldr	pc, [ip, #728]!	; 0x2d8

00010ca8 <signal@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #73728	; 0x12000
   10cb0:	ldr	pc, [ip, #720]!	; 0x2d0

00010cb4 <dcgettext@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #73728	; 0x12000
   10cbc:	ldr	pc, [ip, #712]!	; 0x2c8

00010cc0 <__stack_chk_fail@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #73728	; 0x12000
   10cc8:	ldr	pc, [ip, #704]!	; 0x2c0

00010ccc <alarm@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #73728	; 0x12000
   10cd4:	ldr	pc, [ip, #696]!	; 0x2b8

00010cd8 <realloc@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #73728	; 0x12000
   10ce0:	ldr	pc, [ip, #688]!	; 0x2b0

00010ce4 <textdomain@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #73728	; 0x12000
   10cec:	ldr	pc, [ip, #680]!	; 0x2a8

00010cf0 <ioctl@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #73728	; 0x12000
   10cf8:	ldr	pc, [ip, #672]!	; 0x2a0

00010cfc <__fpending@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #73728	; 0x12000
   10d04:	ldr	pc, [ip, #664]!	; 0x298

00010d08 <error@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #73728	; 0x12000
   10d10:	ldr	pc, [ip, #656]!	; 0x290

00010d14 <open64@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #73728	; 0x12000
   10d1c:	ldr	pc, [ip, #648]!	; 0x288

00010d20 <malloc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #73728	; 0x12000
   10d28:	ldr	pc, [ip, #640]!	; 0x280

00010d2c <__libc_start_main@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #73728	; 0x12000
   10d34:	ldr	pc, [ip, #632]!	; 0x278

00010d38 <__gmon_start__@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #73728	; 0x12000
   10d40:	ldr	pc, [ip, #624]!	; 0x270

00010d44 <getopt_long@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #73728	; 0x12000
   10d4c:	ldr	pc, [ip, #616]!	; 0x268

00010d50 <__ctype_b_loc@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #73728	; 0x12000
   10d58:	ldr	pc, [ip, #608]!	; 0x260

00010d5c <exit@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #73728	; 0x12000
   10d64:	ldr	pc, [ip, #600]!	; 0x258

00010d68 <__errno_location@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #73728	; 0x12000
   10d70:	ldr	pc, [ip, #592]!	; 0x250

00010d74 <__cxa_atexit@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #73728	; 0x12000
   10d7c:	ldr	pc, [ip, #584]!	; 0x248

00010d80 <memset@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #73728	; 0x12000
   10d88:	ldr	pc, [ip, #576]!	; 0x240

00010d8c <__printf_chk@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #73728	; 0x12000
   10d94:	ldr	pc, [ip, #568]!	; 0x238

00010d98 <strtod@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #73728	; 0x12000
   10da0:	ldr	pc, [ip, #560]!	; 0x230

00010da4 <write@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #73728	; 0x12000
   10dac:	ldr	pc, [ip, #552]!	; 0x228

00010db0 <__fprintf_chk@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #73728	; 0x12000
   10db8:	ldr	pc, [ip, #544]!	; 0x220

00010dbc <fclose@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #73728	; 0x12000
   10dc4:	ldr	pc, [ip, #536]!	; 0x218

00010dc8 <__longjmp_chk@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #73728	; 0x12000
   10dd0:	ldr	pc, [ip, #528]!	; 0x210

00010dd4 <setlocale@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #73728	; 0x12000
   10ddc:	ldr	pc, [ip, #520]!	; 0x208

00010de0 <bindtextdomain@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #73728	; 0x12000
   10de8:	ldr	pc, [ip, #512]!	; 0x200

00010dec <fputs@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #73728	; 0x12000
   10df4:	ldr	pc, [ip, #504]!	; 0x1f8

00010df8 <abort@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #73728	; 0x12000
   10e00:	ldr	pc, [ip, #496]!	; 0x1f0

00010e04 <__snprintf_chk@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #73728	; 0x12000
   10e0c:	ldr	pc, [ip, #488]!	; 0x1e8

Disassembly of section .text:

00010e10 <.text>:
   10e10:	push	{r4, lr}
   10e14:	mov	r2, #5
   10e18:	mov	r4, r0
   10e1c:	ldr	r1, [pc, #256]	; 10f24 <__snprintf_chk@plt+0x120>
   10e20:	mov	r0, #0
   10e24:	bl	10cb4 <dcgettext@plt>
   10e28:	mov	r1, r4
   10e2c:	bl	10dec <fputs@plt>
   10e30:	mov	r2, #5
   10e34:	ldr	r1, [pc, #236]	; 10f28 <__snprintf_chk@plt+0x124>
   10e38:	mov	r0, #0
   10e3c:	bl	10cb4 <dcgettext@plt>
   10e40:	ldr	r3, [pc, #228]	; 10f2c <__snprintf_chk@plt+0x128>
   10e44:	mov	r1, #1
   10e48:	ldr	r3, [r3]
   10e4c:	mov	r2, r0
   10e50:	mov	r0, r4
   10e54:	bl	10db0 <__fprintf_chk@plt>
   10e58:	mov	r2, #5
   10e5c:	ldr	r1, [pc, #204]	; 10f30 <__snprintf_chk@plt+0x12c>
   10e60:	mov	r0, #0
   10e64:	bl	10cb4 <dcgettext@plt>
   10e68:	mov	r1, r4
   10e6c:	bl	10dec <fputs@plt>
   10e70:	mov	r2, #5
   10e74:	ldr	r1, [pc, #184]	; 10f34 <__snprintf_chk@plt+0x130>
   10e78:	mov	r0, #0
   10e7c:	bl	10cb4 <dcgettext@plt>
   10e80:	mov	r1, r4
   10e84:	bl	10dec <fputs@plt>
   10e88:	mov	r2, #5
   10e8c:	ldr	r1, [pc, #164]	; 10f38 <__snprintf_chk@plt+0x134>
   10e90:	mov	r0, #0
   10e94:	bl	10cb4 <dcgettext@plt>
   10e98:	mov	r1, r4
   10e9c:	bl	10dec <fputs@plt>
   10ea0:	mov	r2, #5
   10ea4:	ldr	r1, [pc, #144]	; 10f3c <__snprintf_chk@plt+0x138>
   10ea8:	mov	r0, #0
   10eac:	bl	10cb4 <dcgettext@plt>
   10eb0:	mov	r1, r4
   10eb4:	bl	10dec <fputs@plt>
   10eb8:	mov	r2, #5
   10ebc:	ldr	r1, [pc, #124]	; 10f40 <__snprintf_chk@plt+0x13c>
   10ec0:	mov	r0, #0
   10ec4:	bl	10cb4 <dcgettext@plt>
   10ec8:	mov	r1, r4
   10ecc:	bl	10dec <fputs@plt>
   10ed0:	mov	r2, #5
   10ed4:	ldr	r1, [pc, #104]	; 10f44 <__snprintf_chk@plt+0x140>
   10ed8:	mov	r0, #0
   10edc:	bl	10cb4 <dcgettext@plt>
   10ee0:	mov	r1, r4
   10ee4:	bl	10dec <fputs@plt>
   10ee8:	mov	r2, #5
   10eec:	ldr	r1, [pc, #84]	; 10f48 <__snprintf_chk@plt+0x144>
   10ef0:	mov	r0, #0
   10ef4:	bl	10cb4 <dcgettext@plt>
   10ef8:	ldr	r3, [pc, #76]	; 10f4c <__snprintf_chk@plt+0x148>
   10efc:	mov	r1, #1
   10f00:	mov	r2, r0
   10f04:	mov	r0, r4
   10f08:	bl	10db0 <__fprintf_chk@plt>
   10f0c:	ldr	r3, [pc, #60]	; 10f50 <__snprintf_chk@plt+0x14c>
   10f10:	ldr	r0, [r3]
   10f14:	sub	r0, r0, r4
   10f18:	clz	r0, r0
   10f1c:	lsr	r0, r0, #5
   10f20:	bl	10d5c <exit@plt>
   10f24:	muleq	r1, r4, lr
   10f28:	andeq	r1, r1, r0, lsr #29
   10f2c:	andeq	r3, r2, r8, lsl r0
   10f30:			; <UNDEFINED> instruction: 0x00011eb8
   10f34:	andeq	r1, r1, r4, asr #29
   10f38:	strdeq	r1, [r1], -r4
   10f3c:	strdeq	r1, [r1], -r0
   10f40:	andeq	r1, r1, ip, lsl pc
   10f44:	andeq	r1, r1, r8, asr #30
   10f48:	andeq	r1, r1, r0, lsl #31
   10f4c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   10f50:	andeq	r3, r2, r8, lsr #32
   10f54:	andeq	r0, r0, r0
   10f58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f5c:	vpush	{d8}
   10f60:	ldr	ip, [pc, #1280]	; 11468 <__snprintf_chk@plt+0x664>
   10f64:	ldr	r2, [pc, #1280]	; 1146c <__snprintf_chk@plt+0x668>
   10f68:	ldr	r3, [pc, #1280]	; 11470 <__snprintf_chk@plt+0x66c>
   10f6c:	sub	sp, sp, #68	; 0x44
   10f70:	ldr	ip, [ip]
   10f74:	ldr	r2, [r2]
   10f78:	ldr	r4, [pc, #1268]	; 11474 <__snprintf_chk@plt+0x670>
   10f7c:	mov	r6, r0
   10f80:	mov	r5, r1
   10f84:	mov	r0, #6
   10f88:	ldr	r1, [pc, #1256]	; 11478 <__snprintf_chk@plt+0x674>
   10f8c:	str	ip, [sp, #60]	; 0x3c
   10f90:	str	r2, [r3]
   10f94:	bl	10dd4 <setlocale@plt>
   10f98:	ldr	r1, [pc, #1244]	; 1147c <__snprintf_chk@plt+0x678>
   10f9c:	mov	r0, r4
   10fa0:	bl	10de0 <bindtextdomain@plt>
   10fa4:	mov	r0, r4
   10fa8:	bl	10ce4 <textdomain@plt>
   10fac:	ldr	r0, [pc, #1228]	; 11480 <__snprintf_chk@plt+0x67c>
   10fb0:	bl	11e20 <__snprintf_chk@plt+0x101c>
   10fb4:	ldr	sl, [pc, #1224]	; 11484 <__snprintf_chk@plt+0x680>
   10fb8:	ldr	r9, [pc, #1224]	; 11488 <__snprintf_chk@plt+0x684>
   10fbc:	ldr	r8, [pc, #1224]	; 1148c <__snprintf_chk@plt+0x688>
   10fc0:	ldr	r7, [pc, #1224]	; 11490 <__snprintf_chk@plt+0x68c>
   10fc4:	ldr	fp, [pc, #1224]	; 11494 <__snprintf_chk@plt+0x690>
   10fc8:	mov	r4, #0
   10fcc:	str	r4, [sp]
   10fd0:	mov	r3, sl
   10fd4:	mov	r2, r9
   10fd8:	mov	r1, r5
   10fdc:	mov	r0, r6
   10fe0:	bl	10d44 <getopt_long@plt>
   10fe4:	cmn	r0, #1
   10fe8:	beq	11144 <__snprintf_chk@plt+0x340>
   10fec:	sub	r0, r0, #86	; 0x56
   10ff0:	cmp	r0, #29
   10ff4:	ldrls	pc, [pc, r0, lsl #2]
   10ff8:	b	11410 <__snprintf_chk@plt+0x60c>
   10ffc:	strdeq	r1, [r1], -r8
   11000:	andeq	r1, r1, r0, lsl r4
   11004:	andeq	r1, r1, r0, lsl r4
   11008:	andeq	r1, r1, r0, lsl r4
   1100c:	andeq	r1, r1, r0, lsl r4
   11010:	andeq	r1, r1, r0, lsl r4
   11014:	andeq	r1, r1, r0, lsl r4
   11018:	andeq	r1, r1, r0, lsl r4
   1101c:	andeq	r1, r1, r0, lsl r4
   11020:	andeq	r1, r1, r0, lsl r4
   11024:	andeq	r1, r1, r0, lsl r4
   11028:	andeq	r1, r1, r0, lsl r4
   1102c:	andeq	r1, r1, r0, lsl r4
   11030:	andeq	r1, r1, r0, lsl r4
   11034:	andeq	r1, r1, r8, asr #1
   11038:	andeq	r1, r1, r0, lsl r4
   1103c:	andeq	r1, r1, r0, lsl r4
   11040:	andeq	r1, r1, r0, lsl r4
   11044:	andeq	r1, r1, r4, asr #8
   11048:	andeq	r1, r1, r0, lsl r4
   1104c:	andeq	r1, r1, r0, lsl r4
   11050:	andeq	r1, r1, r0, lsl r4
   11054:	andeq	r1, r1, r0, lsl r4
   11058:	andeq	r1, r1, r0, lsl r4
   1105c:	andeq	r1, r1, r0, lsl r4
   11060:	andeq	r1, r1, r0, lsl r4
   11064:	andeq	r1, r1, r0, lsl r4
   11068:	andeq	r1, r1, r0, lsl r4
   1106c:	andeq	r1, r1, r0, lsl r4
   11070:	andeq	r1, r1, r4, ror r0
   11074:	mov	r2, #5
   11078:	mov	r1, r7
   1107c:	mov	r0, #0
   11080:	ldr	r4, [r8]
   11084:	bl	10cb4 <dcgettext@plt>
   11088:	mov	r1, r0
   1108c:	mov	r0, r4
   11090:	bl	11800 <__snprintf_chk@plt+0x9fc>
   11094:	ldr	r3, [pc, #1020]	; 11498 <__snprintf_chk@plt+0x694>
   11098:	vcmpe.f64	d0, #0.0
   1109c:	vstr	d0, [r3, #400]	; 0x190
   110a0:	vmrs	APSR_nzcv, fpscr
   110a4:	bpl	10fc8 <__snprintf_chk@plt+0x1c4>
   110a8:	ldr	r1, [pc, #1004]	; 1149c <__snprintf_chk@plt+0x698>
   110ac:	mov	r2, #5
   110b0:	mov	r0, #0
   110b4:	bl	10cb4 <dcgettext@plt>
   110b8:	mov	r1, #0
   110bc:	mov	r2, r0
   110c0:	mov	r0, #1
   110c4:	bl	10d08 <error@plt>
   110c8:	mov	r2, #5
   110cc:	mov	r1, r7
   110d0:	mov	r0, #0
   110d4:	ldr	r4, [r8]
   110d8:	bl	10cb4 <dcgettext@plt>
   110dc:	mov	r1, r0
   110e0:	mov	r0, r4
   110e4:	bl	11748 <__snprintf_chk@plt+0x944>
   110e8:	cmp	r0, #0
   110ec:	ble	11450 <__snprintf_chk@plt+0x64c>
   110f0:	str	r0, [fp]
   110f4:	b	10fc8 <__snprintf_chk@plt+0x1c4>
   110f8:	mov	r2, #5
   110fc:	ldr	r1, [pc, #924]	; 114a0 <__snprintf_chk@plt+0x69c>
   11100:	mov	r0, #0
   11104:	bl	10cb4 <dcgettext@plt>
   11108:	ldr	r2, [pc, #860]	; 1146c <__snprintf_chk@plt+0x668>
   1110c:	ldr	r3, [pc, #912]	; 114a4 <__snprintf_chk@plt+0x6a0>
   11110:	ldr	r2, [r2]
   11114:	mov	r1, r0
   11118:	mov	r0, #1
   1111c:	bl	10d8c <__printf_chk@plt>
   11120:	ldr	r3, [pc, #832]	; 11468 <__snprintf_chk@plt+0x664>
   11124:	ldr	r2, [sp, #60]	; 0x3c
   11128:	mov	r0, #0
   1112c:	ldr	r3, [r3]
   11130:	cmp	r2, r3
   11134:	bne	1145c <__snprintf_chk@plt+0x658>
   11138:	add	sp, sp, #68	; 0x44
   1113c:	vpop	{d8}
   11140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11144:	ldr	r3, [pc, #860]	; 114a8 <__snprintf_chk@plt+0x6a4>
   11148:	ldr	r3, [r3]
   1114c:	cmp	r3, r6
   11150:	bge	11170 <__snprintf_chk@plt+0x36c>
   11154:	ldr	r0, [r5, r3, lsl #2]
   11158:	mov	r1, #1
   1115c:	bl	10d14 <open64@plt>
   11160:	ldr	r3, [pc, #812]	; 11494 <__snprintf_chk@plt+0x690>
   11164:	cmn	r0, #1
   11168:	str	r0, [r3, #4]
   1116c:	beq	1141c <__snprintf_chk@plt+0x618>
   11170:	mov	r0, #0
   11174:	bl	115e4 <__snprintf_chk@plt+0x7e0>
   11178:	ldr	r3, [pc, #792]	; 11498 <__snprintf_chk@plt+0x694>
   1117c:	vldr	d7, [r3, #400]	; 0x190
   11180:	vcmp.f64	d7, #0.0
   11184:	vmrs	APSR_nzcv, fpscr
   11188:	ldreq	r2, [pc, #772]	; 11494 <__snprintf_chk@plt+0x690>
   1118c:	vldreq	s14, [r2, #12]
   11190:	vcvteq.f64.s32	d7, s14
   11194:	vstreq	d7, [r3, #400]	; 0x190
   11198:	ldr	r3, [pc, #760]	; 11498 <__snprintf_chk@plt+0x694>
   1119c:	add	r0, r3, #8
   111a0:	add	r5, r3, #400	; 0x190
   111a4:	ldrd	r4, [r5]
   111a8:	str	r4, [r3, #408]	; 0x198
   111ac:	str	r5, [r3, #412]	; 0x19c
   111b0:	bl	10c78 <_setjmp@plt>
   111b4:	ldr	r8, [pc, #728]	; 11494 <__snprintf_chk@plt+0x690>
   111b8:	ldr	r1, [pc, #748]	; 114ac <__snprintf_chk@plt+0x6a8>
   111bc:	mov	r0, #14
   111c0:	bl	10ca8 <signal@plt>
   111c4:	ldr	r0, [r8]
   111c8:	bl	10ccc <alarm@plt>
   111cc:	vldr	d8, [pc, #652]	; 11460 <__snprintf_chk@plt+0x65c>
   111d0:	ldr	r7, [pc, #704]	; 11498 <__snprintf_chk@plt+0x694>
   111d4:	mov	r9, #0
   111d8:	vldr	d7, [r7, #408]	; 0x198
   111dc:	vldr	d6, [r7, #400]	; 0x190
   111e0:	add	r0, sp, #32
   111e4:	add	r2, sp, #48	; 0x30
   111e8:	add	r1, sp, #40	; 0x28
   111ec:	vcmpe.f64	d7, d6
   111f0:	mov	sl, r9
   111f4:	mov	fp, #0
   111f8:	vmrs	APSR_nzcv, fpscr
   111fc:	vaddmi.f64	d7, d7, d7
   11200:	vstrmi	d7, [r7, #408]	; 0x198
   11204:	bl	10c60 <loadavg@plt>
   11208:	ldrd	r4, [r8, #8]
   1120c:	ldr	r6, [r7, #4]
   11210:	vldr	d6, [r7, #408]	; 0x198
   11214:	sub	lr, r5, #1
   11218:	mov	r0, #42	; 0x2a
   1121c:	mla	ip, lr, r4, r9
   11220:	add	ip, r6, ip
   11224:	vldr	d7, [sp, #32]
   11228:	mov	r2, ip
   1122c:	mov	r3, lr
   11230:	vmul.f64	d7, d6, d7
   11234:	vcvt.s32.f64	s15, d7
   11238:	vmov	r1, s15
   1123c:	sub	r1, r1, r5
   11240:	b	11254 <__snprintf_chk@plt+0x450>
   11244:	subs	r3, r3, #1
   11248:	strb	r0, [r2]
   1124c:	sub	r2, r2, r4
   11250:	bmi	113a0 <__snprintf_chk@plt+0x59c>
   11254:	cmn	r1, r3
   11258:	bpl	11244 <__snprintf_chk@plt+0x440>
   1125c:	cmp	fp, #0
   11260:	vstrne	d6, [r7, #408]	; 0x198
   11264:	cmp	r3, #0
   11268:	blt	1128c <__snprintf_chk@plt+0x488>
   1126c:	mla	r2, r3, r4, sl
   11270:	mov	r1, #32
   11274:	add	r2, r6, r2
   11278:	sub	r3, r3, #1
   1127c:	cmn	r3, #1
   11280:	strb	r1, [r2]
   11284:	sub	r2, r2, r4
   11288:	bne	11278 <__snprintf_chk@plt+0x474>
   1128c:	vmov	s15, r5
   11290:	vcvt.f64.s32	d5, s15
   11294:	vsub.f64	d7, d5, d6
   11298:	vcvt.s32.f64	s15, d7
   1129c:	vmov	r3, s15
   112a0:	cmp	r5, r3
   112a4:	movgt	r2, #0
   112a8:	movle	r2, #1
   112ac:	orrs	r2, r2, r3, lsr #31
   112b0:	bne	11308 <__snprintf_chk@plt+0x504>
   112b4:	mov	r1, #1
   112b8:	mov	ip, #61	; 0x3d
   112bc:	mov	r0, #45	; 0x2d
   112c0:	add	r1, r1, #1
   112c4:	vmov.f64	d4, d5
   112c8:	vmov	s15, r1
   112cc:	mla	r3, r3, r4, sl
   112d0:	vcvt.f64.s32	d7, s15
   112d4:	ldrb	r2, [r6, r3]
   112d8:	cmp	r2, #32
   112dc:	movne	r2, ip
   112e0:	moveq	r2, r0
   112e4:	strb	r2, [r6, r3]
   112e8:	vmls.f64	d4, d7, d6
   112ec:	vcvt.s32.f64	s15, d4
   112f0:	vmov	r3, s15
   112f4:	cmp	r5, r3
   112f8:	movgt	r2, #0
   112fc:	movle	r2, #1
   11300:	orrs	r2, r2, r3, lsr #31
   11304:	beq	112c0 <__snprintf_chk@plt+0x4bc>
   11308:	add	r3, r9, #1
   1130c:	cmp	r4, r3
   11310:	ldr	fp, [r7]
   11314:	movne	r9, r3
   11318:	beq	113ac <__snprintf_chk@plt+0x5a8>
   1131c:	vldr	d7, [sp, #48]	; 0x30
   11320:	ldrd	r2, [sp, #32]
   11324:	ldrd	r4, [sp, #40]	; 0x28
   11328:	ldr	r1, [pc, #384]	; 114b0 <__snprintf_chk@plt+0x6ac>
   1132c:	strd	r2, [sp, #8]
   11330:	str	r1, [sp]
   11334:	mvn	r3, #0
   11338:	mov	r1, fp
   1133c:	mov	r0, r6
   11340:	vstr	d7, [sp, #24]
   11344:	strd	r4, [sp, #16]
   11348:	mov	r2, #1
   1134c:	bl	10e04 <__snprintf_chk@plt>
   11350:	ldr	r3, [r7]
   11354:	cmp	r0, r3
   11358:	ldrlt	r3, [r7, #4]
   1135c:	movlt	r2, #32
   11360:	strblt	r2, [r3, r0]
   11364:	mov	r2, #3
   11368:	ldr	r1, [pc, #324]	; 114b4 <__snprintf_chk@plt+0x6b0>
   1136c:	ldr	r0, [r8, #4]
   11370:	bl	10da4 <write@plt>
   11374:	cmp	r0, #0
   11378:	blt	113e8 <__snprintf_chk@plt+0x5e4>
   1137c:	ldr	r2, [r7]
   11380:	ldr	r1, [r7, #4]
   11384:	sub	r2, r2, #1
   11388:	ldr	r0, [r8, #4]
   1138c:	bl	10da4 <write@plt>
   11390:	cmp	r0, #0
   11394:	blt	113e8 <__snprintf_chk@plt+0x5e4>
   11398:	bl	10c6c <pause@plt>
   1139c:	b	111d8 <__snprintf_chk@plt+0x3d4>
   113a0:	vmul.f64	d6, d6, d8
   113a4:	mov	fp, #1
   113a8:	b	11224 <__snprintf_chk@plt+0x420>
   113ac:	sub	r2, fp, #1
   113b0:	add	r1, r6, #1
   113b4:	mov	r0, r6
   113b8:	bl	10c84 <memmove@plt>
   113bc:	subs	r5, r5, #2
   113c0:	bmi	1131c <__snprintf_chk@plt+0x518>
   113c4:	mla	r3, r5, r4, sl
   113c8:	mov	r2, #32
   113cc:	add	r3, r6, r3
   113d0:	sub	r5, r5, #1
   113d4:	cmn	r5, #1
   113d8:	strb	r2, [r3]
   113dc:	sub	r3, r3, r4
   113e0:	bne	113d0 <__snprintf_chk@plt+0x5cc>
   113e4:	b	1131c <__snprintf_chk@plt+0x518>
   113e8:	bl	10d68 <__errno_location@plt>
   113ec:	mov	r2, #5
   113f0:	ldr	r1, [pc, #192]	; 114b8 <__snprintf_chk@plt+0x6b4>
   113f4:	ldr	r4, [r0]
   113f8:	mov	r0, #0
   113fc:	bl	10cb4 <dcgettext@plt>
   11400:	mov	r1, r4
   11404:	mov	r2, r0
   11408:	mov	r0, #1
   1140c:	bl	10d08 <error@plt>
   11410:	ldr	r3, [pc, #164]	; 114bc <__snprintf_chk@plt+0x6b8>
   11414:	ldr	r0, [r3]
   11418:	bl	10e10 <__snprintf_chk@plt+0xc>
   1141c:	bl	10d68 <__errno_location@plt>
   11420:	mov	r2, #5
   11424:	ldr	r1, [pc, #148]	; 114c0 <__snprintf_chk@plt+0x6bc>
   11428:	ldr	r5, [r0]
   1142c:	mov	r0, r4
   11430:	bl	10cb4 <dcgettext@plt>
   11434:	mov	r1, r5
   11438:	mov	r2, r0
   1143c:	mov	r0, #1
   11440:	bl	10d08 <error@plt>
   11444:	ldr	r3, [pc, #120]	; 114c4 <__snprintf_chk@plt+0x6c0>
   11448:	ldr	r0, [r3]
   1144c:	bl	10e10 <__snprintf_chk@plt+0xc>
   11450:	mov	r2, #5
   11454:	ldr	r1, [pc, #108]	; 114c8 <__snprintf_chk@plt+0x6c4>
   11458:	b	110b0 <__snprintf_chk@plt+0x2ac>
   1145c:	bl	10cc0 <__stack_chk_fail@plt>
   11460:	andeq	r0, r0, r0
   11464:	svccc	0x00e00000
   11468:	andeq	r2, r2, r0, asr #28
   1146c:	andeq	r3, r2, r8, lsl r0
   11470:	andeq	r3, r2, ip, lsl r0
   11474:	strdeq	r1, [r1], -r8
   11478:	muleq	r1, ip, lr
   1147c:	andeq	r1, r1, r4, ror #31
   11480:	andeq	r1, r1, r8, ror #21
   11484:	andeq	r1, r1, r4, asr #28
   11488:	andeq	r2, r1, ip, ror r0
   1148c:	andeq	r3, r2, r0, lsr r0
   11490:	andeq	r2, r1, r4
   11494:	andeq	r3, r2, r8
   11498:	andeq	r3, r2, r8, lsr r0
   1149c:	andeq	r2, r1, r0, lsr #32
   114a0:	andeq	r2, r1, ip, asr r0
   114a4:	andeq	r2, r1, r8, rrx
   114a8:	andeq	r3, r2, r0, lsr #32
   114ac:			; <UNDEFINED> instruction: 0x000115bc
   114b0:	strheq	r2, [r1], -r4
   114b4:	muleq	r1, r8, r0
   114b8:	muleq	r1, ip, r0
   114bc:	andeq	r3, r2, r8, lsr #32
   114c0:	andeq	r2, r1, r4, lsl #1
   114c4:	andeq	r3, r2, ip, lsr #32
   114c8:	andeq	r2, r1, ip, lsr r0
   114cc:	mov	fp, #0
   114d0:	mov	lr, #0
   114d4:	pop	{r1}		; (ldr r1, [sp], #4)
   114d8:	mov	r2, sp
   114dc:	push	{r2}		; (str r2, [sp, #-4]!)
   114e0:	push	{r0}		; (str r0, [sp, #-4]!)
   114e4:	ldr	ip, [pc, #16]	; 114fc <__snprintf_chk@plt+0x6f8>
   114e8:	push	{ip}		; (str ip, [sp, #-4]!)
   114ec:	ldr	r0, [pc, #12]	; 11500 <__snprintf_chk@plt+0x6fc>
   114f0:	ldr	r3, [pc, #12]	; 11504 <__snprintf_chk@plt+0x700>
   114f4:	bl	10d2c <__libc_start_main@plt>
   114f8:	bl	10df8 <abort@plt>
   114fc:	andeq	r1, r1, ip, lsl lr
   11500:	andeq	r0, r1, r8, asr pc
   11504:			; <UNDEFINED> instruction: 0x00011dbc
   11508:	ldr	r3, [pc, #20]	; 11524 <__snprintf_chk@plt+0x720>
   1150c:	ldr	r2, [pc, #20]	; 11528 <__snprintf_chk@plt+0x724>
   11510:	add	r3, pc, r3
   11514:	ldr	r2, [r3, r2]
   11518:	cmp	r2, #0
   1151c:	bxeq	lr
   11520:	b	10d38 <__gmon_start__@plt>
   11524:	andeq	r1, r1, ip, lsr sl
   11528:	andeq	r0, r0, r4, lsr #1
   1152c:	ldr	r0, [pc, #24]	; 1154c <__snprintf_chk@plt+0x748>
   11530:	ldr	r3, [pc, #24]	; 11550 <__snprintf_chk@plt+0x74c>
   11534:	cmp	r3, r0
   11538:	bxeq	lr
   1153c:	ldr	r3, [pc, #16]	; 11554 <__snprintf_chk@plt+0x750>
   11540:	cmp	r3, #0
   11544:	bxeq	lr
   11548:	bx	r3
   1154c:	andeq	r3, r2, r8, lsl r0
   11550:	andeq	r3, r2, r8, lsl r0
   11554:	andeq	r0, r0, r0
   11558:	ldr	r0, [pc, #36]	; 11584 <__snprintf_chk@plt+0x780>
   1155c:	ldr	r1, [pc, #36]	; 11588 <__snprintf_chk@plt+0x784>
   11560:	sub	r1, r1, r0
   11564:	asr	r1, r1, #2
   11568:	add	r1, r1, r1, lsr #31
   1156c:	asrs	r1, r1, #1
   11570:	bxeq	lr
   11574:	ldr	r3, [pc, #16]	; 1158c <__snprintf_chk@plt+0x788>
   11578:	cmp	r3, #0
   1157c:	bxeq	lr
   11580:	bx	r3
   11584:	andeq	r3, r2, r8, lsl r0
   11588:	andeq	r3, r2, r8, lsl r0
   1158c:	andeq	r0, r0, r0
   11590:	push	{r4, lr}
   11594:	ldr	r4, [pc, #24]	; 115b4 <__snprintf_chk@plt+0x7b0>
   11598:	ldrb	r3, [r4]
   1159c:	cmp	r3, #0
   115a0:	popne	{r4, pc}
   115a4:	bl	1152c <__snprintf_chk@plt+0x728>
   115a8:	mov	r3, #1
   115ac:	strb	r3, [r4]
   115b0:	pop	{r4, pc}
   115b4:	andeq	r3, r2, r4, lsr r0
   115b8:	b	11558 <__snprintf_chk@plt+0x754>
   115bc:	push	{r4, lr}
   115c0:	mov	r0, #14
   115c4:	ldr	r1, [pc, #16]	; 115dc <__snprintf_chk@plt+0x7d8>
   115c8:	bl	10ca8 <signal@plt>
   115cc:	ldr	r3, [pc, #12]	; 115e0 <__snprintf_chk@plt+0x7dc>
   115d0:	pop	{r4, lr}
   115d4:	ldr	r0, [r3]
   115d8:	b	10ccc <alarm@plt>
   115dc:			; <UNDEFINED> instruction: 0x000115bc
   115e0:	andeq	r3, r2, r8
   115e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   115e8:	sub	sp, sp, #20
   115ec:	ldr	r7, [pc, #308]	; 11728 <__snprintf_chk@plt+0x924>
   115f0:	ldr	r5, [pc, #308]	; 1172c <__snprintf_chk@plt+0x928>
   115f4:	ldr	r1, [pc, #308]	; 11730 <__snprintf_chk@plt+0x92c>
   115f8:	ldr	r3, [r7]
   115fc:	mov	r8, r0
   11600:	mov	r0, #28
   11604:	str	r3, [sp, #12]
   11608:	bl	10ca8 <signal@plt>
   1160c:	ldr	r0, [r5, #4]
   11610:	add	r2, sp, #4
   11614:	ldr	r1, [pc, #280]	; 11734 <__snprintf_chk@plt+0x930>
   11618:	bl	10cf0 <ioctl@plt>
   1161c:	cmn	r0, #1
   11620:	beq	1163c <__snprintf_chk@plt+0x838>
   11624:	ldrh	r3, [sp, #6]
   11628:	cmp	r3, #0
   1162c:	strne	r3, [r5, #8]
   11630:	ldrh	r3, [sp, #4]
   11634:	cmp	r3, #0
   11638:	strne	r3, [r5, #12]
   1163c:	ldr	r6, [r5, #8]
   11640:	sub	r3, r6, #2
   11644:	cmn	r3, #-2147483644	; 0x80000004
   11648:	bhi	116f8 <__snprintf_chk@plt+0x8f4>
   1164c:	ldr	r4, [r5, #12]
   11650:	cmp	r4, #1
   11654:	ble	116f8 <__snprintf_chk@plt+0x8f4>
   11658:	mov	r1, r6
   1165c:	mvn	r0, #-2147483648	; 0x80000000
   11660:	bl	11b6c <__snprintf_chk@plt+0xd68>
   11664:	cmp	r4, r0
   11668:	bge	116f8 <__snprintf_chk@plt+0x8f4>
   1166c:	ldr	r9, [pc, #196]	; 11738 <__snprintf_chk@plt+0x934>
   11670:	mul	r4, r4, r6
   11674:	ldr	r0, [r9, #4]
   11678:	str	r4, [r9]
   1167c:	cmp	r0, #0
   11680:	beq	116d4 <__snprintf_chk@plt+0x8d0>
   11684:	mov	r1, r4
   11688:	bl	10cd8 <realloc@plt>
   1168c:	subs	r5, r0, #0
   11690:	beq	116e4 <__snprintf_chk@plt+0x8e0>
   11694:	sub	r2, r4, #1
   11698:	mov	r1, #32
   1169c:	mov	r0, r5
   116a0:	add	r4, r5, r4
   116a4:	str	r5, [r9, #4]
   116a8:	bl	10d80 <memset@plt>
   116ac:	mov	r3, #0
   116b0:	cmp	r8, #0
   116b4:	strb	r3, [r4, #-2]
   116b8:	bne	11718 <__snprintf_chk@plt+0x914>
   116bc:	ldr	r2, [sp, #12]
   116c0:	ldr	r3, [r7]
   116c4:	cmp	r2, r3
   116c8:	bne	11724 <__snprintf_chk@plt+0x920>
   116cc:	add	sp, sp, #20
   116d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   116d4:	mov	r0, r4
   116d8:	bl	10d20 <malloc@plt>
   116dc:	subs	r5, r0, #0
   116e0:	bne	11694 <__snprintf_chk@plt+0x890>
   116e4:	mov	r3, r4
   116e8:	mov	r1, r5
   116ec:	ldr	r2, [pc, #72]	; 1173c <__snprintf_chk@plt+0x938>
   116f0:	mov	r0, #1
   116f4:	bl	10d08 <error@plt>
   116f8:	mov	r2, #5
   116fc:	ldr	r1, [pc, #60]	; 11740 <__snprintf_chk@plt+0x93c>
   11700:	mov	r0, #0
   11704:	bl	10cb4 <dcgettext@plt>
   11708:	mov	r1, #0
   1170c:	mov	r2, r0
   11710:	mov	r0, #1
   11714:	bl	10d08 <error@plt>
   11718:	mov	r1, #1
   1171c:	ldr	r0, [pc, #32]	; 11744 <__snprintf_chk@plt+0x940>
   11720:	bl	10dc8 <__longjmp_chk@plt>
   11724:	bl	10cc0 <__stack_chk_fail@plt>
   11728:	andeq	r2, r2, r0, asr #28
   1172c:	andeq	r3, r2, r8
   11730:	andeq	r1, r1, r4, ror #11
   11734:	andeq	r5, r0, r3, lsl r4
   11738:	andeq	r3, r2, r8, lsr r0
   1173c:	andeq	r1, r1, r8, asr #31
   11740:	andeq	r1, r1, r8, lsr #31
   11744:	andeq	r3, r2, r0, asr #32
   11748:	push	{r4, r5, r6, r7, r8, lr}
   1174c:	sub	sp, sp, #16
   11750:	ldr	r7, [pc, #160]	; 117f8 <__snprintf_chk@plt+0x9f4>
   11754:	mov	r6, #0
   11758:	mov	r4, r0
   1175c:	ldr	r3, [r7]
   11760:	mov	r8, r1
   11764:	str	r3, [sp, #12]
   11768:	str	r6, [sp, #8]
   1176c:	bl	10d68 <__errno_location@plt>
   11770:	cmp	r4, r6
   11774:	mov	r5, r0
   11778:	beq	117dc <__snprintf_chk@plt+0x9d8>
   1177c:	ldrb	r3, [r4]
   11780:	cmp	r3, #0
   11784:	beq	117dc <__snprintf_chk@plt+0x9d8>
   11788:	str	r6, [r0]
   1178c:	add	r1, sp, #8
   11790:	mov	r2, #10
   11794:	mov	r0, r4
   11798:	bl	10c54 <strtol@plt>
   1179c:	ldr	r1, [r5]
   117a0:	cmp	r1, #0
   117a4:	bne	117e0 <__snprintf_chk@plt+0x9dc>
   117a8:	ldr	r3, [sp, #8]
   117ac:	cmp	r3, r4
   117b0:	cmpne	r3, #0
   117b4:	beq	117e0 <__snprintf_chk@plt+0x9dc>
   117b8:	ldrb	r3, [r3]
   117bc:	cmp	r3, #0
   117c0:	bne	117e0 <__snprintf_chk@plt+0x9dc>
   117c4:	ldr	r2, [sp, #12]
   117c8:	ldr	r3, [r7]
   117cc:	cmp	r2, r3
   117d0:	bne	117f4 <__snprintf_chk@plt+0x9f0>
   117d4:	add	sp, sp, #16
   117d8:	pop	{r4, r5, r6, r7, r8, pc}
   117dc:	ldr	r1, [r5]
   117e0:	str	r4, [sp]
   117e4:	mov	r3, r8
   117e8:	ldr	r2, [pc, #12]	; 117fc <__snprintf_chk@plt+0x9f8>
   117ec:	mov	r0, #1
   117f0:	bl	10d08 <error@plt>
   117f4:	bl	10cc0 <__stack_chk_fail@plt>
   117f8:	andeq	r2, r2, r0, asr #28
   117fc:	andeq	r2, r1, r8, ror #1
   11800:	push	{r4, r5, r6, r7, r8, lr}
   11804:	sub	sp, sp, #16
   11808:	ldr	r7, [pc, #156]	; 118ac <__snprintf_chk@plt+0xaa8>
   1180c:	mov	r6, #0
   11810:	mov	r4, r0
   11814:	ldr	r3, [r7]
   11818:	mov	r8, r1
   1181c:	str	r3, [sp, #12]
   11820:	str	r6, [sp, #8]
   11824:	bl	10d68 <__errno_location@plt>
   11828:	cmp	r4, r6
   1182c:	mov	r5, r0
   11830:	beq	11890 <__snprintf_chk@plt+0xa8c>
   11834:	ldrb	r3, [r4]
   11838:	cmp	r3, #0
   1183c:	beq	11890 <__snprintf_chk@plt+0xa8c>
   11840:	str	r6, [r0]
   11844:	add	r1, sp, #8
   11848:	mov	r0, r4
   1184c:	bl	10d98 <strtod@plt>
   11850:	ldr	r1, [r5]
   11854:	cmp	r1, #0
   11858:	bne	11894 <__snprintf_chk@plt+0xa90>
   1185c:	ldr	r3, [sp, #8]
   11860:	cmp	r3, r4
   11864:	cmpne	r3, #0
   11868:	beq	11894 <__snprintf_chk@plt+0xa90>
   1186c:	ldrb	r3, [r3]
   11870:	cmp	r3, #0
   11874:	bne	11894 <__snprintf_chk@plt+0xa90>
   11878:	ldr	r2, [sp, #12]
   1187c:	ldr	r3, [r7]
   11880:	cmp	r2, r3
   11884:	bne	118a8 <__snprintf_chk@plt+0xaa4>
   11888:	add	sp, sp, #16
   1188c:	pop	{r4, r5, r6, r7, r8, pc}
   11890:	ldr	r1, [r5]
   11894:	str	r4, [sp]
   11898:	mov	r3, r8
   1189c:	ldr	r2, [pc, #12]	; 118b0 <__snprintf_chk@plt+0xaac>
   118a0:	mov	r0, #1
   118a4:	bl	10d08 <error@plt>
   118a8:	bl	10cc0 <__stack_chk_fail@plt>
   118ac:	andeq	r2, r2, r0, asr #28
   118b0:	andeq	r2, r1, r8, ror #1
   118b4:	push	{r4, r5, r6, lr}
   118b8:	subs	r5, r0, #0
   118bc:	sub	sp, sp, #8
   118c0:	mov	r6, r1
   118c4:	beq	11a08 <__snprintf_chk@plt+0xc04>
   118c8:	ldrb	r4, [r5]
   118cc:	cmp	r4, #0
   118d0:	beq	11a08 <__snprintf_chk@plt+0xc04>
   118d4:	bl	10d50 <__ctype_b_loc@plt>
   118d8:	mov	r3, r5
   118dc:	ldr	r2, [r0]
   118e0:	b	118e8 <__snprintf_chk@plt+0xae4>
   118e4:	ldrb	r4, [r3, #1]!
   118e8:	lsl	r1, r4, #1
   118ec:	ldrh	r1, [r2, r1]
   118f0:	ands	ip, r1, #8192	; 0x2000
   118f4:	bne	118e4 <__snprintf_chk@plt+0xae0>
   118f8:	cmp	r4, #45	; 0x2d
   118fc:	beq	119e4 <__snprintf_chk@plt+0xbe0>
   11900:	cmp	r4, #43	; 0x2b
   11904:	ldrbeq	r4, [r3, #1]
   11908:	addeq	r3, r3, #1
   1190c:	lsleq	r1, r4, #1
   11910:	ldrheq	r1, [r2, r1]
   11914:	tst	r1, #2048	; 0x800
   11918:	beq	11a00 <__snprintf_chk@plt+0xbfc>
   1191c:	vldr	d7, [pc, #284]	; 11a40 <__snprintf_chk@plt+0xc3c>
   11920:	vldr	d6, [pc, #288]	; 11a48 <__snprintf_chk@plt+0xc44>
   11924:	mov	r0, r3
   11928:	ldrb	r1, [r0, #1]!
   1192c:	vmul.f64	d7, d7, d6
   11930:	lsl	r1, r1, #1
   11934:	ldrh	r1, [r2, r1]
   11938:	tst	r1, #2048	; 0x800
   1193c:	bne	11928 <__snprintf_chk@plt+0xb24>
   11940:	vldr	d0, [pc, #264]	; 11a50 <__snprintf_chk@plt+0xc4c>
   11944:	vldr	d5, [pc, #252]	; 11a48 <__snprintf_chk@plt+0xc44>
   11948:	sub	r1, r4, #48	; 0x30
   1194c:	ldrb	r4, [r3, #1]!
   11950:	vmov	s12, r1
   11954:	lsl	r1, r4, #1
   11958:	vcvt.f64.s32	d6, s12
   1195c:	ldrh	r1, [r2, r1]
   11960:	tst	r1, #2048	; 0x800
   11964:	vmla.f64	d0, d6, d7
   11968:	vdiv.f64	d7, d7, d5
   1196c:	bne	11948 <__snprintf_chk@plt+0xb44>
   11970:	cmp	r4, #0
   11974:	beq	119d4 <__snprintf_chk@plt+0xbd0>
   11978:	and	r4, r4, #253	; 0xfd
   1197c:	cmp	r4, #44	; 0x2c
   11980:	bne	11a24 <__snprintf_chk@plt+0xc20>
   11984:	ldrb	r1, [r3, #1]
   11988:	add	r3, r3, #1
   1198c:	lsl	r0, r1, #1
   11990:	ldrh	r0, [r2, r0]
   11994:	tst	r0, #2048	; 0x800
   11998:	beq	119cc <__snprintf_chk@plt+0xbc8>
   1199c:	vldr	d6, [pc, #156]	; 11a40 <__snprintf_chk@plt+0xc3c>
   119a0:	vldr	d5, [pc, #160]	; 11a48 <__snprintf_chk@plt+0xc44>
   119a4:	sub	r1, r1, #48	; 0x30
   119a8:	vmov	s14, r1
   119ac:	ldrb	r1, [r3, #1]!
   119b0:	vcvt.f64.s32	d7, s14
   119b4:	lsl	r0, r1, #1
   119b8:	ldrh	r0, [r2, r0]
   119bc:	tst	r0, #2048	; 0x800
   119c0:	vmla.f64	d0, d7, d6
   119c4:	vdiv.f64	d6, d6, d5
   119c8:	bne	119a4 <__snprintf_chk@plt+0xba0>
   119cc:	cmp	r1, #0
   119d0:	bne	11a08 <__snprintf_chk@plt+0xc04>
   119d4:	cmp	ip, #0
   119d8:	vnegne.f64	d0, d0
   119dc:	add	sp, sp, #8
   119e0:	pop	{r4, r5, r6, pc}
   119e4:	ldrb	r4, [r3, #1]
   119e8:	mov	ip, #1
   119ec:	add	r3, r3, ip
   119f0:	lsl	r1, r4, ip
   119f4:	ldrh	r1, [r2, r1]
   119f8:	tst	r1, #2048	; 0x800
   119fc:	bne	1191c <__snprintf_chk@plt+0xb18>
   11a00:	vldr	d0, [pc, #72]	; 11a50 <__snprintf_chk@plt+0xc4c>
   11a04:	b	11970 <__snprintf_chk@plt+0xb6c>
   11a08:	bl	10d68 <__errno_location@plt>
   11a0c:	mov	r3, r6
   11a10:	ldr	r2, [pc, #64]	; 11a58 <__snprintf_chk@plt+0xc54>
   11a14:	ldr	r1, [r0]
   11a18:	str	r5, [sp]
   11a1c:	mov	r0, #1
   11a20:	bl	10d08 <error@plt>
   11a24:	str	r5, [sp]
   11a28:	mov	r3, r6
   11a2c:	ldr	r2, [pc, #36]	; 11a58 <__snprintf_chk@plt+0xc54>
   11a30:	mov	r1, #22
   11a34:	mov	r0, #1
   11a38:	bl	10d08 <error@plt>
   11a3c:	nop			; (mov r0, r0)
   11a40:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   11a44:	svccc	0x00b99999
   11a48:	andeq	r0, r0, r0
   11a4c:	eormi	r0, r4, r0
	...
   11a58:	andeq	r2, r1, r8, ror #1
   11a5c:	push	{r4, r5, r6, lr}
   11a60:	mov	r4, r0
   11a64:	bl	10cfc <__fpending@plt>
   11a68:	mov	r6, r0
   11a6c:	mov	r0, r4
   11a70:	bl	10c90 <ferror@plt>
   11a74:	mov	r5, r0
   11a78:	mov	r0, r4
   11a7c:	bl	10dbc <fclose@plt>
   11a80:	cmp	r5, #0
   11a84:	mov	r4, r0
   11a88:	bne	11aa8 <__snprintf_chk@plt+0xca4>
   11a8c:	cmp	r0, #0
   11a90:	beq	11aa0 <__snprintf_chk@plt+0xc9c>
   11a94:	cmp	r6, #0
   11a98:	beq	11ad0 <__snprintf_chk@plt+0xccc>
   11a9c:	mvn	r4, #0
   11aa0:	mov	r0, r4
   11aa4:	pop	{r4, r5, r6, pc}
   11aa8:	cmp	r0, #0
   11aac:	bne	11a9c <__snprintf_chk@plt+0xc98>
   11ab0:	bl	10d68 <__errno_location@plt>
   11ab4:	ldr	r3, [r0]
   11ab8:	cmp	r3, #32
   11abc:	beq	11a9c <__snprintf_chk@plt+0xc98>
   11ac0:	str	r4, [r0]
   11ac4:	mvn	r4, #0
   11ac8:	mov	r0, r4
   11acc:	pop	{r4, r5, r6, pc}
   11ad0:	bl	10d68 <__errno_location@plt>
   11ad4:	ldr	r4, [r0]
   11ad8:	subs	r4, r4, #9
   11adc:	mvnne	r4, #0
   11ae0:	mov	r0, r4
   11ae4:	pop	{r4, r5, r6, pc}
   11ae8:	ldr	r3, [pc, #108]	; 11b5c <__snprintf_chk@plt+0xd58>
   11aec:	push	{r4, lr}
   11af0:	ldr	r0, [r3]
   11af4:	bl	11a5c <__snprintf_chk@plt+0xc58>
   11af8:	cmp	r0, #0
   11afc:	beq	11b14 <__snprintf_chk@plt+0xd10>
   11b00:	bl	10d68 <__errno_location@plt>
   11b04:	ldr	r3, [r0]
   11b08:	mov	r4, r0
   11b0c:	cmp	r3, #32
   11b10:	bne	11b30 <__snprintf_chk@plt+0xd2c>
   11b14:	ldr	r3, [pc, #68]	; 11b60 <__snprintf_chk@plt+0xd5c>
   11b18:	ldr	r0, [r3]
   11b1c:	bl	11a5c <__snprintf_chk@plt+0xc58>
   11b20:	cmp	r0, #0
   11b24:	popeq	{r4, pc}
   11b28:	mov	r0, #1
   11b2c:	bl	10c9c <_exit@plt>
   11b30:	mov	r2, #5
   11b34:	ldr	r1, [pc, #40]	; 11b64 <__snprintf_chk@plt+0xd60>
   11b38:	mov	r0, #0
   11b3c:	bl	10cb4 <dcgettext@plt>
   11b40:	ldr	r1, [r4]
   11b44:	ldr	r2, [pc, #28]	; 11b68 <__snprintf_chk@plt+0xd64>
   11b48:	mov	r3, r0
   11b4c:	mov	r0, #0
   11b50:	bl	10d08 <error@plt>
   11b54:	mov	r0, #1
   11b58:	bl	10c9c <_exit@plt>
   11b5c:	andeq	r3, r2, ip, lsr #32
   11b60:	andeq	r3, r2, r8, lsr #32
   11b64:	strdeq	r2, [r1], -r4
   11b68:	andeq	r2, r1, r0, lsl #2
   11b6c:	cmp	r1, #0
   11b70:	beq	11d7c <__snprintf_chk@plt+0xf78>
   11b74:	eor	ip, r0, r1
   11b78:	rsbmi	r1, r1, #0
   11b7c:	subs	r2, r1, #1
   11b80:	beq	11d48 <__snprintf_chk@plt+0xf44>
   11b84:	movs	r3, r0
   11b88:	rsbmi	r3, r0, #0
   11b8c:	cmp	r3, r1
   11b90:	bls	11d54 <__snprintf_chk@plt+0xf50>
   11b94:	tst	r1, r2
   11b98:	beq	11d64 <__snprintf_chk@plt+0xf60>
   11b9c:	clz	r2, r3
   11ba0:	clz	r0, r1
   11ba4:	sub	r2, r0, r2
   11ba8:	rsbs	r2, r2, #31
   11bac:	addne	r2, r2, r2, lsl #1
   11bb0:	mov	r0, #0
   11bb4:	addne	pc, pc, r2, lsl #2
   11bb8:	nop			; (mov r0, r0)
   11bbc:	cmp	r3, r1, lsl #31
   11bc0:	adc	r0, r0, r0
   11bc4:	subcs	r3, r3, r1, lsl #31
   11bc8:	cmp	r3, r1, lsl #30
   11bcc:	adc	r0, r0, r0
   11bd0:	subcs	r3, r3, r1, lsl #30
   11bd4:	cmp	r3, r1, lsl #29
   11bd8:	adc	r0, r0, r0
   11bdc:	subcs	r3, r3, r1, lsl #29
   11be0:	cmp	r3, r1, lsl #28
   11be4:	adc	r0, r0, r0
   11be8:	subcs	r3, r3, r1, lsl #28
   11bec:	cmp	r3, r1, lsl #27
   11bf0:	adc	r0, r0, r0
   11bf4:	subcs	r3, r3, r1, lsl #27
   11bf8:	cmp	r3, r1, lsl #26
   11bfc:	adc	r0, r0, r0
   11c00:	subcs	r3, r3, r1, lsl #26
   11c04:	cmp	r3, r1, lsl #25
   11c08:	adc	r0, r0, r0
   11c0c:	subcs	r3, r3, r1, lsl #25
   11c10:	cmp	r3, r1, lsl #24
   11c14:	adc	r0, r0, r0
   11c18:	subcs	r3, r3, r1, lsl #24
   11c1c:	cmp	r3, r1, lsl #23
   11c20:	adc	r0, r0, r0
   11c24:	subcs	r3, r3, r1, lsl #23
   11c28:	cmp	r3, r1, lsl #22
   11c2c:	adc	r0, r0, r0
   11c30:	subcs	r3, r3, r1, lsl #22
   11c34:	cmp	r3, r1, lsl #21
   11c38:	adc	r0, r0, r0
   11c3c:	subcs	r3, r3, r1, lsl #21
   11c40:	cmp	r3, r1, lsl #20
   11c44:	adc	r0, r0, r0
   11c48:	subcs	r3, r3, r1, lsl #20
   11c4c:	cmp	r3, r1, lsl #19
   11c50:	adc	r0, r0, r0
   11c54:	subcs	r3, r3, r1, lsl #19
   11c58:	cmp	r3, r1, lsl #18
   11c5c:	adc	r0, r0, r0
   11c60:	subcs	r3, r3, r1, lsl #18
   11c64:	cmp	r3, r1, lsl #17
   11c68:	adc	r0, r0, r0
   11c6c:	subcs	r3, r3, r1, lsl #17
   11c70:	cmp	r3, r1, lsl #16
   11c74:	adc	r0, r0, r0
   11c78:	subcs	r3, r3, r1, lsl #16
   11c7c:	cmp	r3, r1, lsl #15
   11c80:	adc	r0, r0, r0
   11c84:	subcs	r3, r3, r1, lsl #15
   11c88:	cmp	r3, r1, lsl #14
   11c8c:	adc	r0, r0, r0
   11c90:	subcs	r3, r3, r1, lsl #14
   11c94:	cmp	r3, r1, lsl #13
   11c98:	adc	r0, r0, r0
   11c9c:	subcs	r3, r3, r1, lsl #13
   11ca0:	cmp	r3, r1, lsl #12
   11ca4:	adc	r0, r0, r0
   11ca8:	subcs	r3, r3, r1, lsl #12
   11cac:	cmp	r3, r1, lsl #11
   11cb0:	adc	r0, r0, r0
   11cb4:	subcs	r3, r3, r1, lsl #11
   11cb8:	cmp	r3, r1, lsl #10
   11cbc:	adc	r0, r0, r0
   11cc0:	subcs	r3, r3, r1, lsl #10
   11cc4:	cmp	r3, r1, lsl #9
   11cc8:	adc	r0, r0, r0
   11ccc:	subcs	r3, r3, r1, lsl #9
   11cd0:	cmp	r3, r1, lsl #8
   11cd4:	adc	r0, r0, r0
   11cd8:	subcs	r3, r3, r1, lsl #8
   11cdc:	cmp	r3, r1, lsl #7
   11ce0:	adc	r0, r0, r0
   11ce4:	subcs	r3, r3, r1, lsl #7
   11ce8:	cmp	r3, r1, lsl #6
   11cec:	adc	r0, r0, r0
   11cf0:	subcs	r3, r3, r1, lsl #6
   11cf4:	cmp	r3, r1, lsl #5
   11cf8:	adc	r0, r0, r0
   11cfc:	subcs	r3, r3, r1, lsl #5
   11d00:	cmp	r3, r1, lsl #4
   11d04:	adc	r0, r0, r0
   11d08:	subcs	r3, r3, r1, lsl #4
   11d0c:	cmp	r3, r1, lsl #3
   11d10:	adc	r0, r0, r0
   11d14:	subcs	r3, r3, r1, lsl #3
   11d18:	cmp	r3, r1, lsl #2
   11d1c:	adc	r0, r0, r0
   11d20:	subcs	r3, r3, r1, lsl #2
   11d24:	cmp	r3, r1, lsl #1
   11d28:	adc	r0, r0, r0
   11d2c:	subcs	r3, r3, r1, lsl #1
   11d30:	cmp	r3, r1
   11d34:	adc	r0, r0, r0
   11d38:	subcs	r3, r3, r1
   11d3c:	cmp	ip, #0
   11d40:	rsbmi	r0, r0, #0
   11d44:	bx	lr
   11d48:	teq	ip, r0
   11d4c:	rsbmi	r0, r0, #0
   11d50:	bx	lr
   11d54:	movcc	r0, #0
   11d58:	asreq	r0, ip, #31
   11d5c:	orreq	r0, r0, #1
   11d60:	bx	lr
   11d64:	clz	r2, r1
   11d68:	rsb	r2, r2, #31
   11d6c:	cmp	ip, #0
   11d70:	lsr	r0, r3, r2
   11d74:	rsbmi	r0, r0, #0
   11d78:	bx	lr
   11d7c:	cmp	r0, #0
   11d80:	mvngt	r0, #-2147483648	; 0x80000000
   11d84:	movlt	r0, #-2147483648	; 0x80000000
   11d88:	b	11dac <__snprintf_chk@plt+0xfa8>
   11d8c:	cmp	r1, #0
   11d90:	beq	11d7c <__snprintf_chk@plt+0xf78>
   11d94:	push	{r0, r1, lr}
   11d98:	bl	11b74 <__snprintf_chk@plt+0xd70>
   11d9c:	pop	{r1, r2, lr}
   11da0:	mul	r3, r2, r0
   11da4:	sub	r1, r1, r3
   11da8:	bx	lr
   11dac:	push	{r1, lr}
   11db0:	mov	r0, #8
   11db4:	bl	10c48 <raise@plt>
   11db8:	pop	{r1, pc}
   11dbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11dc0:	mov	r7, r0
   11dc4:	ldr	r6, [pc, #72]	; 11e14 <__snprintf_chk@plt+0x1010>
   11dc8:	ldr	r5, [pc, #72]	; 11e18 <__snprintf_chk@plt+0x1014>
   11dcc:	add	r6, pc, r6
   11dd0:	add	r5, pc, r5
   11dd4:	sub	r6, r6, r5
   11dd8:	mov	r8, r1
   11ddc:	mov	r9, r2
   11de0:	bl	10c28 <_init@@Base>
   11de4:	asrs	r6, r6, #2
   11de8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11dec:	mov	r4, #0
   11df0:	add	r4, r4, #1
   11df4:	ldr	r3, [r5], #4
   11df8:	mov	r2, r9
   11dfc:	mov	r1, r8
   11e00:	mov	r0, r7
   11e04:	blx	r3
   11e08:	cmp	r6, r4
   11e0c:	bne	11df0 <__snprintf_chk@plt+0xfec>
   11e10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e14:	andeq	r1, r1, r8, rrx
   11e18:	andeq	r1, r1, r0, rrx
   11e1c:	bx	lr
   11e20:	ldr	r3, [pc, #12]	; 11e34 <__snprintf_chk@plt+0x1030>
   11e24:	mov	r1, #0
   11e28:	add	r3, pc, r3
   11e2c:	ldr	r2, [r3]
   11e30:	b	10d74 <__cxa_atexit@plt>
   11e34:	ldrdeq	r1, [r1], -r4

Disassembly of section .fini:

00011e38 <_fini@@Base>:
   11e38:	push	{r3, lr}
   11e3c:	pop	{r3, pc}
