
raspbian-preinstalled/arm-linux-gnueabihf-gprof:     file format elf32-littlearm


Disassembly of section .init:

00011034 <.init>:
   11034:	push	{r3, lr}
   11038:	bl	11f9c <bfd_arch_bits_per_address@plt+0xbe8>
   1103c:	pop	{r3, pc}

Disassembly of section .plt:

00011040 <raise@plt-0x14>:
   11040:	push	{lr}		; (str lr, [sp, #-4]!)
   11044:	ldr	lr, [pc, #4]	; 11050 <raise@plt-0x4>
   11048:	add	lr, pc, lr
   1104c:	ldr	pc, [lr, #8]!
   11050:			; <UNDEFINED> instruction: 0x00022fb0

00011054 <raise@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #139264	; 0x22000
   1105c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011060 <cplus_demangle_name_to_style@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #139264	; 0x22000
   11068:	ldr	pc, [ip, #4008]!	; 0xfa8

0001106c <setitimer@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #139264	; 0x22000
   11074:	ldr	pc, [ip, #4000]!	; 0xfa0

00011078 <strcmp@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #139264	; 0x22000
   11080:	ldr	pc, [ip, #3992]!	; 0xf98

00011084 <strtol@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #139264	; 0x22000
   1108c:	ldr	pc, [ip, #3984]!	; 0xf90

00011090 <printf@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #139264	; 0x22000
   11098:	ldr	pc, [ip, #3976]!	; 0xf88

0001109c <memmove@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #139264	; 0x22000
   110a4:	ldr	pc, [ip, #3968]!	; 0xf80

000110a8 <free@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #139264	; 0x22000
   110b0:	ldr	pc, [ip, #3960]!	; 0xf78

000110b4 <fgets@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #139264	; 0x22000
   110bc:	ldr	pc, [ip, #3952]!	; 0xf70

000110c0 <ferror@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #139264	; 0x22000
   110c8:	ldr	pc, [ip, #3944]!	; 0xf68

000110cc <filename_cmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #139264	; 0x22000
   110d4:	ldr	pc, [ip, #3936]!	; 0xf60

000110d8 <cplus_demangle_set_style@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #139264	; 0x22000
   110e0:	ldr	pc, [ip, #3928]!	; 0xf58

000110e4 <memcpy@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #139264	; 0x22000
   110ec:	ldr	pc, [ip, #3920]!	; 0xf50

000110f0 <bfd_openr@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #139264	; 0x22000
   110f8:	ldr	pc, [ip, #3912]!	; 0xf48

000110fc <ftell@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #139264	; 0x22000
   11104:	ldr	pc, [ip, #3904]!	; 0xf40

00011108 <stpcpy@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #139264	; 0x22000
   11110:	ldr	pc, [ip, #3896]!	; 0xf38

00011114 <bfd_get_section_contents@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #139264	; 0x22000
   1111c:	ldr	pc, [ip, #3888]!	; 0xf30

00011120 <dcgettext@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #139264	; 0x22000
   11128:	ldr	pc, [ip, #3880]!	; 0xf28

0001112c <rewind@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #139264	; 0x22000
   11134:	ldr	pc, [ip, #3872]!	; 0xf20

00011138 <sysconf@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #139264	; 0x22000
   11140:	ldr	pc, [ip, #3864]!	; 0xf18

00011144 <xrealloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #139264	; 0x22000
   1114c:	ldr	pc, [ip, #3856]!	; 0xf10

00011150 <textdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #139264	; 0x22000
   11158:	ldr	pc, [ip, #3848]!	; 0xf08

0001115c <perror@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #139264	; 0x22000
   11164:	ldr	pc, [ip, #3840]!	; 0xf00

00011168 <bfd_get_error@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #139264	; 0x22000
   11170:	ldr	pc, [ip, #3832]!	; 0xef8

00011174 <fwrite@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #139264	; 0x22000
   1117c:	ldr	pc, [ip, #3824]!	; 0xef0

00011180 <xmalloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #139264	; 0x22000
   11188:	ldr	pc, [ip, #3816]!	; 0xee8

0001118c <xmalloc_set_program_name@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #139264	; 0x22000
   11194:	ldr	pc, [ip, #3808]!	; 0xee0

00011198 <xstrdup@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #139264	; 0x22000
   111a0:	ldr	pc, [ip, #3800]!	; 0xed8

000111a4 <strcpy@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #139264	; 0x22000
   111ac:	ldr	pc, [ip, #3792]!	; 0xed0

000111b0 <fread@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #139264	; 0x22000
   111b8:	ldr	pc, [ip, #3784]!	; 0xec8

000111bc <bfd_get_section_by_name@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #139264	; 0x22000
   111c4:	ldr	pc, [ip, #3776]!	; 0xec0

000111c8 <bfd_get_arch_size@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #139264	; 0x22000
   111d0:	ldr	pc, [ip, #3768]!	; 0xeb8

000111d4 <bfd_printable_name@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #139264	; 0x22000
   111dc:	ldr	pc, [ip, #3760]!	; 0xeb0

000111e0 <getenv@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #139264	; 0x22000
   111e8:	ldr	pc, [ip, #3752]!	; 0xea8

000111ec <puts@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #139264	; 0x22000
   111f4:	ldr	pc, [ip, #3744]!	; 0xea0

000111f8 <malloc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #139264	; 0x22000
   11200:	ldr	pc, [ip, #3736]!	; 0xe98

00011204 <__libc_start_main@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #139264	; 0x22000
   1120c:	ldr	pc, [ip, #3728]!	; 0xe90

00011210 <__gmon_start__@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #139264	; 0x22000
   11218:	ldr	pc, [ip, #3720]!	; 0xe88

0001121c <getopt_long@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #139264	; 0x22000
   11224:	ldr	pc, [ip, #3712]!	; 0xe80

00011228 <exit@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #139264	; 0x22000
   11230:	ldr	pc, [ip, #3704]!	; 0xe78

00011234 <feof@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #139264	; 0x22000
   1123c:	ldr	pc, [ip, #3696]!	; 0xe70

00011240 <strtoul@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #139264	; 0x22000
   11248:	ldr	pc, [ip, #3688]!	; 0xe68

0001124c <strlen@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #139264	; 0x22000
   11254:	ldr	pc, [ip, #3680]!	; 0xe60

00011258 <strchr@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #139264	; 0x22000
   11260:	ldr	pc, [ip, #3672]!	; 0xe58

00011264 <bfd_get_arch@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #139264	; 0x22000
   1126c:	ldr	pc, [ip, #3664]!	; 0xe50

00011270 <fprintf@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #139264	; 0x22000
   11278:	ldr	pc, [ip, #3656]!	; 0xe48

0001127c <__errno_location@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #139264	; 0x22000
   11284:	ldr	pc, [ip, #3648]!	; 0xe40

00011288 <memset@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #139264	; 0x22000
   11290:	ldr	pc, [ip, #3640]!	; 0xe38

00011294 <putchar@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #139264	; 0x22000
   1129c:	ldr	pc, [ip, #3632]!	; 0xe30

000112a0 <strncpy@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #139264	; 0x22000
   112a8:	ldr	pc, [ip, #3624]!	; 0xe28

000112ac <fscanf@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #139264	; 0x22000
   112b4:	ldr	pc, [ip, #3616]!	; 0xe20

000112b8 <fgetc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #139264	; 0x22000
   112c0:	ldr	pc, [ip, #3608]!	; 0xe18

000112c4 <bfd_get_sign_extend_vma@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #139264	; 0x22000
   112cc:	ldr	pc, [ip, #3600]!	; 0xe10

000112d0 <fclose@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #139264	; 0x22000
   112d8:	ldr	pc, [ip, #3592]!	; 0xe08

000112dc <bfd_demangle@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #139264	; 0x22000
   112e4:	ldr	pc, [ip, #3584]!	; 0xe00

000112e8 <strrchr@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #139264	; 0x22000
   112f0:	ldr	pc, [ip, #3576]!	; 0xdf8

000112f4 <bfd_perror@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #139264	; 0x22000
   112fc:	ldr	pc, [ip, #3568]!	; 0xdf0

00011300 <fputc@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #139264	; 0x22000
   11308:	ldr	pc, [ip, #3560]!	; 0xde8

0001130c <xexit@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #139264	; 0x22000
   11314:	ldr	pc, [ip, #3552]!	; 0xde0

00011318 <sscanf@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #139264	; 0x22000
   11320:	ldr	pc, [ip, #3544]!	; 0xdd8

00011324 <sprintf@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #139264	; 0x22000
   1132c:	ldr	pc, [ip, #3536]!	; 0xdd0

00011330 <putc@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #139264	; 0x22000
   11338:	ldr	pc, [ip, #3528]!	; 0xdc8

0001133c <fopen64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #139264	; 0x22000
   11344:	ldr	pc, [ip, #3520]!	; 0xdc0

00011348 <bfd_errmsg@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #139264	; 0x22000
   11350:	ldr	pc, [ip, #3512]!	; 0xdb8

00011354 <qsort@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #139264	; 0x22000
   1135c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011360 <bindtextdomain@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #139264	; 0x22000
   11368:	ldr	pc, [ip, #3496]!	; 0xda8

0001136c <bfd_check_format@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #139264	; 0x22000
   11374:	ldr	pc, [ip, #3488]!	; 0xda0

00011378 <fseek@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #139264	; 0x22000
   11380:	ldr	pc, [ip, #3480]!	; 0xd98

00011384 <__xstat64@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #139264	; 0x22000
   1138c:	ldr	pc, [ip, #3472]!	; 0xd90

00011390 <fputs@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #139264	; 0x22000
   11398:	ldr	pc, [ip, #3464]!	; 0xd88

0001139c <strncmp@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #139264	; 0x22000
   113a4:	ldr	pc, [ip, #3456]!	; 0xd80

000113a8 <abort@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #139264	; 0x22000
   113b0:	ldr	pc, [ip, #3448]!	; 0xd78

000113b4 <bfd_arch_bits_per_address@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #139264	; 0x22000
   113bc:	ldr	pc, [ip, #3440]!	; 0xd70

Disassembly of section .text:

000113c0 <.text>:
   113c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c4:	sub	sp, sp, #20
   113c8:	ldr	r8, [pc, #2828]	; 11edc <bfd_arch_bits_per_address@plt+0xb28>
   113cc:	str	r0, [sp, #12]
   113d0:	str	r1, [sp, #8]
   113d4:	ldr	r0, [pc, #2820]	; 11ee0 <bfd_arch_bits_per_address@plt+0xb2c>
   113d8:	ldr	r1, [pc, #2820]	; 11ee4 <bfd_arch_bits_per_address@plt+0xb30>
   113dc:	bl	11360 <bindtextdomain@plt>
   113e0:	ldr	r0, [pc, #2808]	; 11ee0 <bfd_arch_bits_per_address@plt+0xb2c>
   113e4:	bl	11150 <textdomain@plt>
   113e8:	ldr	r3, [sp, #8]
   113ec:	ldr	r5, [pc, #2804]	; 11ee8 <bfd_arch_bits_per_address@plt+0xb34>
   113f0:	ldr	r4, [pc, #2804]	; 11eec <bfd_arch_bits_per_address@plt+0xb38>
   113f4:	ldr	r3, [r3]
   113f8:	ldr	r6, [pc, #2800]	; 11ef0 <bfd_arch_bits_per_address@plt+0xb3c>
   113fc:	mov	r0, r3
   11400:	str	r3, [r8]
   11404:	bl	1118c <xmalloc_set_program_name@plt>
   11408:	add	r1, sp, #8
   1140c:	add	r0, sp, #12
   11410:	bl	1da5c <bfd_arch_bits_per_address@plt+0xc6a8>
   11414:	mov	r7, #0
   11418:	mov	r3, #0
   1141c:	str	r3, [sp]
   11420:	mov	r2, r4
   11424:	mov	r3, r5
   11428:	ldr	r1, [sp, #8]
   1142c:	ldr	r0, [sp, #12]
   11430:	bl	1121c <getopt_long@plt>
   11434:	cmn	r0, #1
   11438:	beq	11ad8 <bfd_arch_bits_per_address@plt+0x724>
   1143c:	sub	r0, r0, #65	; 0x41
   11440:	cmp	r0, #87	; 0x57
   11444:	ldrls	pc, [pc, r0, lsl #2]
   11448:	b	11e04 <bfd_arch_bits_per_address@plt+0xa50>
   1144c:	andeq	r1, r1, r4, lsr #14
   11450:	ldrdeq	r1, [r1], -r8
   11454:	andeq	r1, r1, r0, ror #20
   11458:	andeq	r1, r1, r4, asr sl
   1145c:	andeq	r1, r1, r0, asr #20
   11460:	andeq	r1, r1, ip, lsr #20
   11464:	andeq	r1, r1, r8, lsl sl
   11468:	andeq	r1, r1, r4, lsl #28
   1146c:	andeq	r1, r1, r4, lsl #20
   11470:	ldrdeq	r1, [r1], -ip
   11474:	andeq	r1, r1, r4, lsl #28
   11478:	ldrdeq	r1, [r1], -r0
   1147c:	andeq	r1, r1, r4, lsl #28
   11480:			; <UNDEFINED> instruction: 0x000119bc
   11484:	andeq	r1, r1, r8, lsl #19
   11488:	andeq	r1, r1, ip, asr r9
   1148c:	andeq	r1, r1, r8, lsl r9
   11490:	strdeq	r1, [r1], -r4
   11494:	ldrdeq	r1, [r1], -r0
   11498:	andeq	r1, r1, r4, asr #17
   1149c:	andeq	r1, r1, r4, lsl #28
   114a0:	andeq	r1, r1, r4, lsl #28
   114a4:	andeq	r1, r1, r4, lsl #28
   114a8:	andeq	r1, r1, r4, lsl #28
   114ac:	andeq	r1, r1, r4, lsl #28
   114b0:	muleq	r1, r8, r8
   114b4:	andeq	r1, r1, r4, lsl #28
   114b8:	andeq	r1, r1, r4, lsl #28
   114bc:	andeq	r1, r1, r4, lsl #28
   114c0:	andeq	r1, r1, r4, lsl #28
   114c4:	andeq	r1, r1, r4, lsl #28
   114c8:	andeq	r1, r1, r4, lsl #28
   114cc:	andeq	r1, r1, r4, ror #15
   114d0:	ldrdeq	r1, [r1], -r4
   114d4:	andeq	r1, r1, r8, asr #15
   114d8:	andeq	r1, r1, r4, lsl #15
   114dc:	andeq	r1, r1, r0, lsl #12
   114e0:	andeq	r1, r1, ip, ror #11
   114e4:	andeq	r1, r1, r0, ror r7
   114e8:	strdeq	r1, [r1], -r4
   114ec:	andeq	r1, r1, ip, asr r7
   114f0:	andeq	r1, r1, r4, lsl #28
   114f4:	andeq	r1, r1, r4, ror #16
   114f8:	andeq	r1, r1, r8, asr r8
   114fc:	andeq	r1, r1, r8, ror r8
   11500:	andeq	r1, r1, r4, asr #16
   11504:	andeq	r1, r1, r4, lsl #28
   11508:	andeq	r1, r1, r8, lsl r8
   1150c:	andeq	r1, r1, ip, lsr #11
   11510:	andeq	r1, r1, r4, lsl #16
   11514:	strdeq	r1, [r1], -r0
   11518:	strdeq	r1, [r1], -r8
   1151c:	andeq	r1, r1, r4, lsl #28
   11520:			; <UNDEFINED> instruction: 0x000116b0
   11524:	andeq	r1, r1, r4, lsl #13
   11528:	andeq	r1, r1, r4, ror r6
   1152c:	andeq	r1, r1, r4, ror #12
   11530:	andeq	r1, r1, r4, asr r6
   11534:	andeq	r1, r1, r4, lsl #28
   11538:	andeq	r1, r1, r4, lsl #28
   1153c:	andeq	r1, r1, r4, lsl #28
   11540:	andeq	r1, r1, r4, lsl #28
   11544:	andeq	r1, r1, r4, lsl #28
   11548:	andeq	r1, r1, r4, lsl #28
   1154c:	andeq	r1, r1, r4, lsl #28
   11550:	andeq	r1, r1, r4, lsl #28
   11554:	andeq	r1, r1, r4, lsl #28
   11558:	andeq	r1, r1, r4, lsl #28
   1155c:	andeq	r1, r1, r4, lsl #28
   11560:	andeq	r1, r1, r4, lsl #28
   11564:	andeq	r1, r1, r4, lsl #28
   11568:	andeq	r1, r1, r4, lsl #28
   1156c:	andeq	r1, r1, r4, lsl #28
   11570:	andeq	r1, r1, r4, lsl #28
   11574:	andeq	r1, r1, r4, lsl #28
   11578:	andeq	r1, r1, r4, lsl #28
   1157c:	andeq	r1, r1, r4, lsl #28
   11580:	andeq	r1, r1, r4, lsl #28
   11584:	andeq	r1, r1, r4, lsl #28
   11588:	andeq	r1, r1, r4, lsl #28
   1158c:	andeq	r1, r1, r4, lsl #28
   11590:	andeq	r1, r1, r4, lsl #28
   11594:	andeq	r1, r1, r4, lsl #28
   11598:	andeq	r1, r1, r4, lsl #28
   1159c:	andeq	r1, r1, r4, lsl #28
   115a0:	andeq	r1, r1, r4, lsr #12
   115a4:	andeq	r1, r1, r4, lsl r6
   115a8:	andeq	r1, r1, r0, asr r7
   115ac:	ldr	r9, [pc, #2368]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   115b0:	ldr	r9, [r9]
   115b4:	cmp	r9, #0
   115b8:	beq	115d8 <bfd_arch_bits_per_address@plt+0x224>
   115bc:	mov	r1, #47	; 0x2f
   115c0:	mov	r0, r9
   115c4:	bl	11258 <strchr@plt>
   115c8:	subs	r1, r0, #0
   115cc:	movne	r1, #2
   115d0:	mov	r0, r9
   115d4:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   115d8:	ldr	r3, [r6, #4]
   115dc:	orr	r7, r7, #2
   115e0:	orr	r3, r3, #2
   115e4:	str	r3, [r6, #4]
   115e8:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   115ec:	ldr	r9, [pc, #2304]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   115f0:	ldr	r0, [r9]
   115f4:	mov	r1, #0
   115f8:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   115fc:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11600:	ldr	r9, [pc, #2284]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11604:	ldr	r0, [r9]
   11608:	mov	r1, #1
   1160c:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11610:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11614:	ldr	sl, [pc, #2268]	; 11ef8 <bfd_arch_bits_per_address@plt+0xb44>
   11618:	mov	r3, #0
   1161c:	str	r3, [sl, #40]	; 0x28
   11620:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11624:	ldr	r9, [pc, #2248]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11628:	ldr	sl, [pc, #2248]	; 11ef8 <bfd_arch_bits_per_address@plt+0xb44>
   1162c:	mov	fp, #1
   11630:	ldr	r0, [r9]
   11634:	str	fp, [sl, #40]	; 0x28
   11638:	cmp	r0, #0
   1163c:	beq	11418 <bfd_arch_bits_per_address@plt+0x64>
   11640:	bl	11060 <cplus_demangle_name_to_style@plt>
   11644:	cmp	r0, #0
   11648:	beq	11e48 <bfd_arch_bits_per_address@plt+0xa94>
   1164c:	bl	110d8 <cplus_demangle_set_style@plt>
   11650:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11654:	ldr	sl, [pc, #2204]	; 11ef8 <bfd_arch_bits_per_address@plt+0xb44>
   11658:	mov	r3, #0
   1165c:	str	r3, [sl, #36]	; 0x24
   11660:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11664:	ldr	r3, [pc, #2192]	; 11efc <bfd_arch_bits_per_address@plt+0xb48>
   11668:	mov	r2, #1
   1166c:	str	r2, [r3]
   11670:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11674:	ldr	r3, [pc, #2180]	; 11f00 <bfd_arch_bits_per_address@plt+0xb4c>
   11678:	mov	r2, #1
   1167c:	str	r2, [r3]
   11680:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11684:	ldr	r9, [pc, #2152]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11688:	mov	r2, #10
   1168c:	mov	r1, #0
   11690:	ldr	r0, [r9]
   11694:	bl	11084 <strtol@plt>
   11698:	ldr	sl, [pc, #2136]	; 11ef8 <bfd_arch_bits_per_address@plt+0xb44>
   1169c:	cmp	r0, #0
   116a0:	movle	r3, #1
   116a4:	strgt	r0, [sl, #32]
   116a8:	strle	r3, [sl, #32]
   116ac:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   116b0:	mov	r2, #5
   116b4:	ldr	r1, [pc, #2120]	; 11f04 <bfd_arch_bits_per_address@plt+0xb50>
   116b8:	ldr	r0, [pc, #2080]	; 11ee0 <bfd_arch_bits_per_address@plt+0xb2c>
   116bc:	bl	11120 <dcgettext@plt>
   116c0:	ldr	r1, [pc, #2112]	; 11f08 <bfd_arch_bits_per_address@plt+0xb54>
   116c4:	bl	11090 <printf@plt>
   116c8:	mov	r2, #5
   116cc:	ldr	r1, [pc, #2104]	; 11f0c <bfd_arch_bits_per_address@plt+0xb58>
   116d0:	ldr	r0, [pc, #2056]	; 11ee0 <bfd_arch_bits_per_address@plt+0xb2c>
   116d4:	bl	11120 <dcgettext@plt>
   116d8:	bl	11090 <printf@plt>
   116dc:	mov	r2, #5
   116e0:	ldr	r1, [pc, #2088]	; 11f10 <bfd_arch_bits_per_address@plt+0xb5c>
   116e4:	ldr	r0, [pc, #2036]	; 11ee0 <bfd_arch_bits_per_address@plt+0xb2c>
   116e8:	bl	11120 <dcgettext@plt>
   116ec:	bl	11090 <printf@plt>
   116f0:	mov	r0, #0
   116f4:	bl	11228 <exit@plt>
   116f8:	ldr	r9, [pc, #2036]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   116fc:	mov	r2, #10
   11700:	mov	r1, #0
   11704:	ldr	r0, [r9]
   11708:	bl	11084 <strtol@plt>
   1170c:	ldr	r3, [pc, #2048]	; 11f14 <bfd_arch_bits_per_address@plt+0xb60>
   11710:	cmp	r0, #0
   11714:	movlt	r2, #0
   11718:	strge	r0, [r3]
   1171c:	strlt	r2, [r3]
   11720:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11724:	ldr	r9, [pc, #1992]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11728:	ldr	r0, [r9]
   1172c:	cmp	r0, #0
   11730:	beq	1173c <bfd_arch_bits_per_address@plt+0x388>
   11734:	mov	r1, #8
   11738:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   1173c:	ldr	r3, [r6, #4]
   11740:	orr	r7, r7, #16
   11744:	orr	r3, r3, #16
   11748:	str	r3, [r6, #4]
   1174c:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11750:	mov	r3, #1
   11754:	str	r3, [r6, #40]	; 0x28
   11758:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   1175c:	ldr	r3, [r6, #4]
   11760:	orr	r7, r7, #32
   11764:	orr	r3, r3, #32
   11768:	str	r3, [r6, #4]
   1176c:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11770:	ldr	r9, [pc, #1916]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11774:	mov	r1, #5
   11778:	ldr	r0, [r9]
   1177c:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11780:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11784:	ldr	r9, [pc, #1896]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11788:	ldr	r0, [r9]
   1178c:	cmp	r0, #0
   11790:	mvneq	r3, #0
   11794:	streq	r3, [r6, #12]
   11798:	beq	117b8 <bfd_arch_bits_per_address@plt+0x404>
   1179c:	mov	r2, #10
   117a0:	mov	r1, #0
   117a4:	bl	11084 <strtol@plt>
   117a8:	ldr	r3, [r6, #12]
   117ac:	orr	r3, r0, r3
   117b0:	orr	r3, r3, #1
   117b4:	str	r3, [r6, #12]
   117b8:	ldr	r1, [r6, #12]
   117bc:	ldr	r0, [pc, #1876]	; 11f18 <bfd_arch_bits_per_address@plt+0xb64>
   117c0:	bl	11090 <printf@plt>
   117c4:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   117c8:	mov	r3, #1
   117cc:	str	r3, [r6, #8]
   117d0:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   117d4:	ldr	sl, [pc, #1820]	; 11ef8 <bfd_arch_bits_per_address@plt+0xb44>
   117d8:	mov	r3, #0
   117dc:	str	r3, [sl, #28]
   117e0:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   117e4:	mov	r3, #1
   117e8:	str	r3, [r6]
   117ec:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   117f0:	ldr	r3, [r6, #4]
   117f4:	orr	r7, r7, #4
   117f8:	orr	r3, r3, #4
   117fc:	str	r3, [r6, #4]
   11800:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11804:	ldr	r3, [r6, #4]
   11808:	orr	r7, r7, #64	; 0x40
   1180c:	orr	r3, r3, #64	; 0x40
   11810:	str	r3, [r6, #4]
   11814:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11818:	ldr	r9, [pc, #1748]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   1181c:	ldr	r0, [r9]
   11820:	cmp	r0, #0
   11824:	beq	11830 <bfd_arch_bits_per_address@plt+0x47c>
   11828:	mov	r1, #4
   1182c:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11830:	ldr	r3, [r6, #4]
   11834:	orr	r7, r7, #1
   11838:	orr	r3, r3, #1
   1183c:	str	r3, [r6, #4]
   11840:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11844:	ldr	r9, [pc, #1704]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11848:	mov	r1, #6
   1184c:	ldr	r0, [r9]
   11850:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11854:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11858:	mov	r3, #1
   1185c:	str	r3, [r6, #20]
   11860:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11864:	ldr	r9, [pc, #1672]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11868:	mov	r1, #3
   1186c:	ldr	r0, [r9]
   11870:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11874:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11878:	ldr	r9, [pc, #1652]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   1187c:	mov	r2, #10
   11880:	mov	r1, #0
   11884:	ldr	r0, [r9]
   11888:	bl	11240 <strtoul@plt>
   1188c:	ldr	r3, [pc, #1672]	; 11f1c <bfd_arch_bits_per_address@plt+0xb68>
   11890:	str	r0, [r3]
   11894:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11898:	ldr	r9, [pc, #1620]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   1189c:	ldr	r0, [r9]
   118a0:	cmp	r0, #0
   118a4:	beq	11aa8 <bfd_arch_bits_per_address@plt+0x6f4>
   118a8:	mov	r1, #11
   118ac:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   118b0:	ldr	r3, [r6, #4]
   118b4:	orr	r3, r3, #8
   118b8:	str	r3, [r6, #4]
   118bc:	orr	r7, r7, #16
   118c0:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   118c4:	mov	r3, #1
   118c8:	str	r3, [r6, #36]	; 0x24
   118cc:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   118d0:	ldr	r9, [pc, #1564]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   118d4:	ldr	r3, [r6, #12]
   118d8:	ldr	r1, [r9]
   118dc:	tst	r3, #128	; 0x80
   118e0:	str	r1, [r6, #32]
   118e4:	beq	11418 <bfd_arch_bits_per_address@plt+0x64>
   118e8:	ldr	r0, [pc, #1584]	; 11f20 <bfd_arch_bits_per_address@plt+0xb6c>
   118ec:	bl	11090 <printf@plt>
   118f0:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   118f4:	ldr	r9, [pc, #1528]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   118f8:	ldr	r3, [r6, #4]
   118fc:	ldr	r2, [pc, #1568]	; 11f24 <bfd_arch_bits_per_address@plt+0xb70>
   11900:	ldr	r1, [r9]
   11904:	orr	r3, r3, #128	; 0x80
   11908:	orr	r7, r7, #128	; 0x80
   1190c:	str	r1, [r2]
   11910:	str	r3, [r6, #4]
   11914:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11918:	ldr	r9, [pc, #1492]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   1191c:	ldr	r9, [r9]
   11920:	cmp	r9, #0
   11924:	beq	11d4c <bfd_arch_bits_per_address@plt+0x998>
   11928:	mov	r1, #47	; 0x2f
   1192c:	mov	r0, r9
   11930:	bl	11258 <strchr@plt>
   11934:	cmp	r0, #0
   11938:	movne	r1, #3
   1193c:	mov	r0, r9
   11940:	moveq	r1, #1
   11944:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11948:	ldr	r3, [r6, #4]
   1194c:	orr	r3, r3, #2
   11950:	str	r3, [r6, #4]
   11954:	orr	r7, r7, #2
   11958:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   1195c:	ldr	r9, [pc, #1424]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11960:	ldr	r0, [r9]
   11964:	cmp	r0, #0
   11968:	beq	11ac8 <bfd_arch_bits_per_address@plt+0x714>
   1196c:	mov	r1, #5
   11970:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11974:	ldr	r3, [r6, #4]
   11978:	orr	r3, r3, #1
   1197c:	str	r3, [r6, #4]
   11980:	orr	r7, r7, #1
   11984:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11988:	ldr	r9, [pc, #1380]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   1198c:	ldr	r3, [r9]
   11990:	ldrb	r3, [r3]
   11994:	cmp	r3, #98	; 0x62
   11998:	beq	11d84 <bfd_arch_bits_per_address@plt+0x9d0>
   1199c:	bhi	11a8c <bfd_arch_bits_per_address@plt+0x6d8>
   119a0:	cmp	r3, #52	; 0x34
   119a4:	beq	11d20 <bfd_arch_bits_per_address@plt+0x96c>
   119a8:	cmp	r3, #97	; 0x61
   119ac:	bne	11e14 <bfd_arch_bits_per_address@plt+0xa60>
   119b0:	mov	r3, #0
   119b4:	str	r3, [r6, #28]
   119b8:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   119bc:	ldr	r9, [pc, #1328]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   119c0:	mov	r1, #7
   119c4:	ldr	r0, [r9]
   119c8:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   119cc:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   119d0:	mov	r3, #1
   119d4:	str	r3, [r6, #24]
   119d8:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   119dc:	ldr	r9, [pc, #1296]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   119e0:	ldr	r0, [r9]
   119e4:	cmp	r0, #0
   119e8:	beq	11ab8 <bfd_arch_bits_per_address@plt+0x704>
   119ec:	mov	r1, #9
   119f0:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   119f4:	ldr	r3, [r6, #4]
   119f8:	orr	r3, r3, #16
   119fc:	str	r3, [r6, #4]
   11a00:	b	118bc <bfd_arch_bits_per_address@plt+0x508>
   11a04:	ldr	r9, [pc, #1256]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11a08:	ldr	r0, [pc, #1304]	; 11f28 <bfd_arch_bits_per_address@plt+0xb74>
   11a0c:	ldr	r1, [r9]
   11a10:	bl	1a324 <bfd_arch_bits_per_address@plt+0x8f70>
   11a14:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11a18:	ldr	r9, [pc, #1236]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11a1c:	mov	r1, #4
   11a20:	ldr	r0, [r9]
   11a24:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11a28:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11a2c:	ldr	r9, [pc, #1216]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11a30:	mov	r1, #6
   11a34:	ldr	r0, [r9]
   11a38:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11a3c:	b	115f0 <bfd_arch_bits_per_address@plt+0x23c>
   11a40:	ldr	r9, [pc, #1196]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11a44:	mov	r1, #7
   11a48:	ldr	r0, [r9]
   11a4c:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11a50:	b	11604 <bfd_arch_bits_per_address@plt+0x250>
   11a54:	mov	r3, #1
   11a58:	str	r3, [r6, #16]
   11a5c:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11a60:	ldr	r9, [pc, #1164]	; 11ef4 <bfd_arch_bits_per_address@plt+0xb40>
   11a64:	ldr	r0, [r9]
   11a68:	cmp	r0, #0
   11a6c:	beq	11a78 <bfd_arch_bits_per_address@plt+0x6c4>
   11a70:	mov	r1, #10
   11a74:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11a78:	ldr	r3, [r6, #4]
   11a7c:	orr	r7, r7, #8
   11a80:	orr	r3, r3, #8
   11a84:	str	r3, [r6, #4]
   11a88:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11a8c:	cmp	r3, #109	; 0x6d
   11a90:	beq	11d2c <bfd_arch_bits_per_address@plt+0x978>
   11a94:	cmp	r3, #112	; 0x70
   11a98:	bne	11e14 <bfd_arch_bits_per_address@plt+0xa60>
   11a9c:	mov	r3, #4
   11aa0:	str	r3, [r6, #28]
   11aa4:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11aa8:	ldr	r3, [r6, #4]
   11aac:	bic	r3, r3, #8
   11ab0:	str	r3, [r6, #4]
   11ab4:	b	118bc <bfd_arch_bits_per_address@plt+0x508>
   11ab8:	ldr	r3, [r6, #4]
   11abc:	bic	r3, r3, #16
   11ac0:	str	r3, [r6, #4]
   11ac4:	b	118bc <bfd_arch_bits_per_address@plt+0x508>
   11ac8:	ldr	r3, [r6, #4]
   11acc:	bic	r3, r3, #1
   11ad0:	str	r3, [r6, #4]
   11ad4:	b	11980 <bfd_arch_bits_per_address@plt+0x5cc>
   11ad8:	and	r3, r7, #192	; 0xc0
   11adc:	cmp	r3, #192	; 0xc0
   11ae0:	beq	11eac <bfd_arch_bits_per_address@plt+0xaf8>
   11ae4:	ldr	r6, [pc, #1028]	; 11ef0 <bfd_arch_bits_per_address@plt+0xb3c>
   11ae8:	ldr	r0, [pc, #1084]	; 11f2c <bfd_arch_bits_per_address@plt+0xb78>
   11aec:	ldr	r3, [r6, #4]
   11af0:	tst	r3, #4
   11af4:	movne	r3, #1
   11af8:	strne	r3, [r6, #20]
   11afc:	bl	111e0 <getenv@plt>
   11b00:	subs	r1, r0, #0
   11b04:	beq	11b10 <bfd_arch_bits_per_address@plt+0x75c>
   11b08:	ldr	r0, [pc, #1048]	; 11f28 <bfd_arch_bits_per_address@plt+0xb74>
   11b0c:	bl	1a324 <bfd_arch_bits_per_address@plt+0x8f70>
   11b10:	ldr	r5, [pc, #1048]	; 11f30 <bfd_arch_bits_per_address@plt+0xb7c>
   11b14:	ldr	r1, [sp, #12]
   11b18:	ldr	r3, [r5]
   11b1c:	cmp	r3, r1
   11b20:	ldrge	sl, [pc, #976]	; 11ef8 <bfd_arch_bits_per_address@plt+0xb44>
   11b24:	bge	11b5c <bfd_arch_bits_per_address@plt+0x7a8>
   11b28:	ldr	r2, [sp, #8]
   11b2c:	add	r0, r3, #1
   11b30:	cmp	r1, r0
   11b34:	ldr	sl, [pc, #956]	; 11ef8 <bfd_arch_bits_per_address@plt+0xb44>
   11b38:	lsl	r1, r3, #2
   11b3c:	ldr	ip, [r2, r3, lsl #2]
   11b40:	addgt	r2, r2, r1
   11b44:	str	ip, [sl, #716]	; 0x2cc
   11b48:	ldrgt	r2, [r2, #4]
   11b4c:	addgt	r3, r3, #2
   11b50:	str	r0, [r5]
   11b54:	strgt	r2, [sl, #720]	; 0x2d0
   11b58:	strgt	r3, [r5]
   11b5c:	ldr	r0, [sl]
   11b60:	cmp	r0, #0
   11b64:	ldrne	r4, [pc, #908]	; 11ef8 <bfd_arch_bits_per_address@plt+0xb44>
   11b68:	beq	11b98 <bfd_arch_bits_per_address@plt+0x7e4>
   11b6c:	mov	r1, #7
   11b70:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11b74:	ldr	r0, [r4]
   11b78:	mov	r1, #1
   11b7c:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11b80:	ldr	r0, [r4]
   11b84:	mov	r1, #5
   11b88:	bl	1abe0 <bfd_arch_bits_per_address@plt+0x982c>
   11b8c:	ldr	r0, [r4, #4]!
   11b90:	cmp	r0, #0
   11b94:	bne	11b6c <bfd_arch_bits_per_address@plt+0x7b8>
   11b98:	ldr	r0, [sl, #716]	; 0x2cc
   11b9c:	bl	16ae8 <bfd_arch_bits_per_address@plt+0x5734>
   11ba0:	ldr	r3, [r6, #8]
   11ba4:	cmp	r3, #0
   11ba8:	bne	11da4 <bfd_arch_bits_per_address@plt+0x9f0>
   11bac:	ldr	r0, [r6, #32]
   11bb0:	cmp	r0, #0
   11bb4:	beq	11d0c <bfd_arch_bits_per_address@plt+0x958>
   11bb8:	bl	16fb4 <bfd_arch_bits_per_address@plt+0x5c00>
   11bbc:	bl	1ac3c <bfd_arch_bits_per_address@plt+0x9888>
   11bc0:	ldr	r3, [r6, #28]
   11bc4:	cmp	r3, #4
   11bc8:	beq	11ecc <bfd_arch_bits_per_address@plt+0xb18>
   11bcc:	ldr	r0, [sl, #720]	; 0x2d0
   11bd0:	bl	17f04 <bfd_arch_bits_per_address@plt+0x6b50>
   11bd4:	ldr	r3, [r5]
   11bd8:	ldr	r2, [sp, #12]
   11bdc:	cmp	r3, r2
   11be0:	blt	11cdc <bfd_arch_bits_per_address@plt+0x928>
   11be4:	ldr	r2, [r6, #4]
   11be8:	add	r3, r3, #1
   11bec:	cmp	r2, #0
   11bf0:	str	r3, [r5]
   11bf4:	ldr	r5, [pc, #824]	; 11f34 <bfd_arch_bits_per_address@plt+0xb80>
   11bf8:	bne	11c1c <bfd_arch_bits_per_address@plt+0x868>
   11bfc:	ldr	r3, [r5]
   11c00:	tst	r3, #3
   11c04:	moveq	r3, #8
   11c08:	streq	r3, [r6, #4]
   11c0c:	bne	11d5c <bfd_arch_bits_per_address@plt+0x9a8>
   11c10:	ldr	r3, [r6, #4]
   11c14:	bic	r7, r3, r7
   11c18:	str	r7, [r6, #4]
   11c1c:	ldr	r3, [r6, #4]
   11c20:	tst	r3, #4
   11c24:	bne	11d98 <bfd_arch_bits_per_address@plt+0x9e4>
   11c28:	ldr	r3, [r5]
   11c2c:	tst	r3, #1
   11c30:	bne	11d90 <bfd_arch_bits_per_address@plt+0x9dc>
   11c34:	ldr	r3, [r5]
   11c38:	ands	r4, r3, #2
   11c3c:	bne	11db4 <bfd_arch_bits_per_address@plt+0xa00>
   11c40:	ldr	r3, [r6, #4]
   11c44:	ands	r2, r3, #1
   11c48:	beq	11c58 <bfd_arch_bits_per_address@plt+0x8a4>
   11c4c:	ldr	r1, [r5]
   11c50:	tst	r1, #1
   11c54:	beq	11e7c <bfd_arch_bits_per_address@plt+0xac8>
   11c58:	tst	r3, #2
   11c5c:	beq	11cf4 <bfd_arch_bits_per_address@plt+0x940>
   11c60:	ldr	r3, [r5]
   11c64:	tst	r3, #2
   11c68:	beq	11ebc <bfd_arch_bits_per_address@plt+0xb08>
   11c6c:	cmp	r4, #0
   11c70:	beq	11cfc <bfd_arch_bits_per_address@plt+0x948>
   11c74:	ldr	r3, [r6, #36]	; 0x24
   11c78:	cmp	r3, #0
   11c7c:	beq	11c88 <bfd_arch_bits_per_address@plt+0x8d4>
   11c80:	mov	r0, r4
   11c84:	bl	14e1c <bfd_arch_bits_per_address@plt+0x3a68>
   11c88:	ldr	r3, [r6, #4]
   11c8c:	tst	r3, #1
   11c90:	bne	11de0 <bfd_arch_bits_per_address@plt+0xa2c>
   11c94:	ldr	r3, [r6, #4]
   11c98:	tst	r3, #2
   11c9c:	bne	11d38 <bfd_arch_bits_per_address@plt+0x984>
   11ca0:	ldr	r3, [r6, #4]
   11ca4:	tst	r3, #8
   11ca8:	bne	11dc0 <bfd_arch_bits_per_address@plt+0xa0c>
   11cac:	ldr	r3, [r6, #4]
   11cb0:	tst	r3, #16
   11cb4:	bne	11dd8 <bfd_arch_bits_per_address@plt+0xa24>
   11cb8:	ldr	r3, [r6, #4]
   11cbc:	tst	r3, #64	; 0x40
   11cc0:	bne	11dd0 <bfd_arch_bits_per_address@plt+0xa1c>
   11cc4:	ldr	r3, [r6, #4]
   11cc8:	tst	r3, #128	; 0x80
   11ccc:	bne	11dc8 <bfd_arch_bits_per_address@plt+0xa14>
   11cd0:	mov	r0, #0
   11cd4:	add	sp, sp, #20
   11cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cdc:	ldr	r1, [sp, #8]
   11ce0:	add	r2, r3, #1
   11ce4:	ldr	r0, [r1, r3, lsl #2]
   11ce8:	str	r2, [r5]
   11cec:	str	r0, [sl, #720]	; 0x2d0
   11cf0:	b	11bd0 <bfd_arch_bits_per_address@plt+0x81c>
   11cf4:	cmp	r4, #0
   11cf8:	bne	11c88 <bfd_arch_bits_per_address@plt+0x8d4>
   11cfc:	cmp	r2, #0
   11d00:	beq	11ca0 <bfd_arch_bits_per_address@plt+0x8ec>
   11d04:	bl	1920c <bfd_arch_bits_per_address@plt+0x7e58>
   11d08:	b	11ca0 <bfd_arch_bits_per_address@plt+0x8ec>
   11d0c:	ldr	r3, [r6, #20]
   11d10:	cmp	r3, #0
   11d14:	beq	11d7c <bfd_arch_bits_per_address@plt+0x9c8>
   11d18:	bl	17718 <bfd_arch_bits_per_address@plt+0x6364>
   11d1c:	b	11bbc <bfd_arch_bits_per_address@plt+0x808>
   11d20:	mov	r3, #3
   11d24:	str	r3, [r6, #28]
   11d28:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11d2c:	mov	r3, #1
   11d30:	str	r3, [r6, #28]
   11d34:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11d38:	ldr	r3, [r6, #36]	; 0x24
   11d3c:	cmp	r3, #0
   11d40:	beq	11de8 <bfd_arch_bits_per_address@plt+0xa34>
   11d44:	bl	157b4 <bfd_arch_bits_per_address@plt+0x4400>
   11d48:	b	11ca0 <bfd_arch_bits_per_address@plt+0x8ec>
   11d4c:	ldr	r3, [r6, #4]
   11d50:	bic	r3, r3, #2
   11d54:	str	r3, [r6, #4]
   11d58:	b	11954 <bfd_arch_bits_per_address@plt+0x5a0>
   11d5c:	tst	r3, #1
   11d60:	movne	r2, #1
   11d64:	strne	r2, [r6, #4]
   11d68:	tst	r3, #2
   11d6c:	ldrne	r3, [r6, #4]
   11d70:	orrne	r3, r3, #2
   11d74:	strne	r3, [r6, #4]
   11d78:	b	11c10 <bfd_arch_bits_per_address@plt+0x85c>
   11d7c:	bl	17278 <bfd_arch_bits_per_address@plt+0x5ec4>
   11d80:	b	11bbc <bfd_arch_bits_per_address@plt+0x808>
   11d84:	mov	r3, #2
   11d88:	str	r3, [r6, #28]
   11d8c:	b	11418 <bfd_arch_bits_per_address@plt+0x64>
   11d90:	bl	18e00 <bfd_arch_bits_per_address@plt+0x7a4c>
   11d94:	b	11c34 <bfd_arch_bits_per_address@plt+0x880>
   11d98:	ldr	r0, [pc, #408]	; 11f38 <bfd_arch_bits_per_address@plt+0xb84>
   11d9c:	bl	18774 <bfd_arch_bits_per_address@plt+0x73c0>
   11da0:	b	11c28 <bfd_arch_bits_per_address@plt+0x874>
   11da4:	ldr	r3, [pc, #400]	; 11f3c <bfd_arch_bits_per_address@plt+0xb88>
   11da8:	ldr	r0, [r3]
   11dac:	bl	16d4c <bfd_arch_bits_per_address@plt+0x5998>
   11db0:	b	11bac <bfd_arch_bits_per_address@plt+0x7f8>
   11db4:	bl	1358c <bfd_arch_bits_per_address@plt+0x21d8>
   11db8:	mov	r4, r0
   11dbc:	b	11c40 <bfd_arch_bits_per_address@plt+0x88c>
   11dc0:	bl	12828 <bfd_arch_bits_per_address@plt+0x1474>
   11dc4:	b	11cac <bfd_arch_bits_per_address@plt+0x8f8>
   11dc8:	bl	161ac <bfd_arch_bits_per_address@plt+0x4df8>
   11dcc:	b	11cd0 <bfd_arch_bits_per_address@plt+0x91c>
   11dd0:	bl	15b84 <bfd_arch_bits_per_address@plt+0x47d0>
   11dd4:	b	11cc4 <bfd_arch_bits_per_address@plt+0x910>
   11dd8:	bl	12a90 <bfd_arch_bits_per_address@plt+0x16dc>
   11ddc:	b	11cb8 <bfd_arch_bits_per_address@plt+0x904>
   11de0:	bl	1920c <bfd_arch_bits_per_address@plt+0x7e58>
   11de4:	b	11c94 <bfd_arch_bits_per_address@plt+0x8e0>
   11de8:	mov	r0, r4
   11dec:	bl	14e1c <bfd_arch_bits_per_address@plt+0x3a68>
   11df0:	b	11d44 <bfd_arch_bits_per_address@plt+0x990>
   11df4:	ldr	r3, [pc, #324]	; 11f40 <bfd_arch_bits_per_address@plt+0xb8c>
   11df8:	mov	r1, #0
   11dfc:	ldr	r0, [r3]
   11e00:	bl	18b58 <bfd_arch_bits_per_address@plt+0x77a4>
   11e04:	ldr	r3, [pc, #312]	; 11f44 <bfd_arch_bits_per_address@plt+0xb90>
   11e08:	mov	r1, #1
   11e0c:	ldr	r0, [r3]
   11e10:	bl	18b58 <bfd_arch_bits_per_address@plt+0x77a4>
   11e14:	ldr	r3, [pc, #296]	; 11f44 <bfd_arch_bits_per_address@plt+0xb90>
   11e18:	mov	r2, #5
   11e1c:	ldr	r1, [pc, #292]	; 11f48 <bfd_arch_bits_per_address@plt+0xb94>
   11e20:	ldr	r0, [pc, #184]	; 11ee0 <bfd_arch_bits_per_address@plt+0xb2c>
   11e24:	ldr	r4, [r3]
   11e28:	bl	11120 <dcgettext@plt>
   11e2c:	ldr	r3, [r8]
   11e30:	ldr	r2, [r9]
   11e34:	mov	r1, r0
   11e38:	mov	r0, r4
   11e3c:	bl	11270 <fprintf@plt>
   11e40:	mov	r0, #1
   11e44:	bl	11228 <exit@plt>
   11e48:	ldr	r3, [pc, #244]	; 11f44 <bfd_arch_bits_per_address@plt+0xb90>
   11e4c:	mov	r2, #5
   11e50:	ldr	r1, [pc, #244]	; 11f4c <bfd_arch_bits_per_address@plt+0xb98>
   11e54:	ldr	r0, [pc, #132]	; 11ee0 <bfd_arch_bits_per_address@plt+0xb2c>
   11e58:	ldr	r4, [r3]
   11e5c:	bl	11120 <dcgettext@plt>
   11e60:	ldr	r3, [r9]
   11e64:	ldr	r2, [r8]
   11e68:	mov	r1, r0
   11e6c:	mov	r0, r4
   11e70:	bl	11270 <fprintf@plt>
   11e74:	mov	r0, fp
   11e78:	bl	1130c <xexit@plt>
   11e7c:	ldr	r3, [pc, #192]	; 11f44 <bfd_arch_bits_per_address@plt+0xb90>
   11e80:	ldr	r1, [pc, #200]	; 11f50 <bfd_arch_bits_per_address@plt+0xb9c>
   11e84:	mov	r2, #5
   11e88:	ldr	r0, [pc, #80]	; 11ee0 <bfd_arch_bits_per_address@plt+0xb2c>
   11e8c:	ldr	r4, [r3]
   11e90:	bl	11120 <dcgettext@plt>
   11e94:	ldr	r2, [r8]
   11e98:	mov	r1, r0
   11e9c:	mov	r0, r4
   11ea0:	bl	11270 <fprintf@plt>
   11ea4:	mov	r0, #1
   11ea8:	bl	11228 <exit@plt>
   11eac:	ldr	r3, [pc, #144]	; 11f44 <bfd_arch_bits_per_address@plt+0xb90>
   11eb0:	mov	r2, #5
   11eb4:	ldr	r1, [pc, #152]	; 11f54 <bfd_arch_bits_per_address@plt+0xba0>
   11eb8:	b	11e88 <bfd_arch_bits_per_address@plt+0xad4>
   11ebc:	ldr	r3, [pc, #128]	; 11f44 <bfd_arch_bits_per_address@plt+0xb90>
   11ec0:	mov	r2, #5
   11ec4:	ldr	r1, [pc, #140]	; 11f58 <bfd_arch_bits_per_address@plt+0xba4>
   11ec8:	b	11e88 <bfd_arch_bits_per_address@plt+0xad4>
   11ecc:	ldr	r3, [pc, #112]	; 11f44 <bfd_arch_bits_per_address@plt+0xb90>
   11ed0:	mov	r2, #5
   11ed4:	ldr	r1, [pc, #128]	; 11f5c <bfd_arch_bits_per_address@plt+0xba8>
   11ed8:	b	11e88 <bfd_arch_bits_per_address@plt+0xad4>
   11edc:	andeq	r5, r3, ip, lsr r4
   11ee0:	andeq	lr, r1, r0, asr #13
   11ee4:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   11ee8:	andeq	r4, r3, r8, ror r1
   11eec:	muleq	r1, r0, ip
   11ef0:	andeq	r5, r3, r4, lsl r1
   11ef4:	andeq	r4, r3, r8, asr #9
   11ef8:	andeq	r4, r3, ip, asr #2
   11efc:	andeq	r5, r3, r4, ror #2
   11f00:	ldrdeq	r4, [r3], -r8
   11f04:	muleq	r1, ip, fp
   11f08:	andeq	pc, r1, ip, lsr #23
   11f0c:	ldrdeq	pc, [r1], -r0
   11f10:	andeq	pc, r1, r0, lsr #24
   11f14:	andeq	r4, r3, r8, asr #2
   11f18:	andeq	pc, r1, r8, asr #27
   11f1c:	andeq	r4, r3, r4, asr #2
   11f20:	andeq	pc, r1, r0, lsl #23
   11f24:	andeq	r5, r3, r8, lsr r4
   11f28:	andeq	r5, r3, ip, asr r1
   11f2c:	andeq	pc, r1, r4, lsr #26
   11f30:			; <UNDEFINED> instruction: 0x000344b0
   11f34:	andeq	r5, r3, r0, lsl r1
   11f38:	andeq	pc, r1, r4, ror #26
   11f3c:	andeq	r5, r3, r0, lsr #8
   11f40:	andeq	r4, r3, r4, asr #9
   11f44:			; <UNDEFINED> instruction: 0x000344b8
   11f48:	andeq	pc, r1, r4, ror #22
   11f4c:	andeq	pc, r1, ip, ror #24
   11f50:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   11f54:	ldrdeq	pc, [r1], -r8
   11f58:	muleq	r1, r8, sp
   11f5c:	andeq	pc, r1, r0, lsr sp	; <UNPREDICTABLE>
   11f60:	mov	fp, #0
   11f64:	mov	lr, #0
   11f68:	pop	{r1}		; (ldr r1, [sp], #4)
   11f6c:	mov	r2, sp
   11f70:	push	{r2}		; (str r2, [sp, #-4]!)
   11f74:	push	{r0}		; (str r0, [sp, #-4]!)
   11f78:	ldr	ip, [pc, #16]	; 11f90 <bfd_arch_bits_per_address@plt+0xbdc>
   11f7c:	push	{ip}		; (str ip, [sp, #-4]!)
   11f80:	ldr	r0, [pc, #12]	; 11f94 <bfd_arch_bits_per_address@plt+0xbe0>
   11f84:	ldr	r3, [pc, #12]	; 11f98 <bfd_arch_bits_per_address@plt+0xbe4>
   11f88:	bl	11204 <__libc_start_main@plt>
   11f8c:	bl	113a8 <abort@plt>
   11f90:	andeq	lr, r1, ip, ror r6
   11f94:	andeq	r1, r1, r0, asr #7
   11f98:	andeq	lr, r1, ip, lsl r6
   11f9c:	ldr	r3, [pc, #20]	; 11fb8 <bfd_arch_bits_per_address@plt+0xc04>
   11fa0:	ldr	r2, [pc, #20]	; 11fbc <bfd_arch_bits_per_address@plt+0xc08>
   11fa4:	add	r3, pc, r3
   11fa8:	ldr	r2, [r3, r2]
   11fac:	cmp	r2, #0
   11fb0:	bxeq	lr
   11fb4:	b	11210 <__gmon_start__@plt>
   11fb8:	andeq	r2, r2, r4, asr r0
   11fbc:	andeq	r0, r0, r8, lsr r1
   11fc0:	ldr	r0, [pc, #24]	; 11fe0 <bfd_arch_bits_per_address@plt+0xc2c>
   11fc4:	ldr	r3, [pc, #24]	; 11fe4 <bfd_arch_bits_per_address@plt+0xc30>
   11fc8:	cmp	r3, r0
   11fcc:	bxeq	lr
   11fd0:	ldr	r3, [pc, #16]	; 11fe8 <bfd_arch_bits_per_address@plt+0xc34>
   11fd4:	cmp	r3, #0
   11fd8:	bxeq	lr
   11fdc:	bx	r3
   11fe0:	andeq	r4, r3, ip, lsr #9
   11fe4:	andeq	r4, r3, ip, lsr #9
   11fe8:	andeq	r0, r0, r0
   11fec:	ldr	r0, [pc, #36]	; 12018 <bfd_arch_bits_per_address@plt+0xc64>
   11ff0:	ldr	r1, [pc, #36]	; 1201c <bfd_arch_bits_per_address@plt+0xc68>
   11ff4:	sub	r1, r1, r0
   11ff8:	asr	r1, r1, #2
   11ffc:	add	r1, r1, r1, lsr #31
   12000:	asrs	r1, r1, #1
   12004:	bxeq	lr
   12008:	ldr	r3, [pc, #16]	; 12020 <bfd_arch_bits_per_address@plt+0xc6c>
   1200c:	cmp	r3, #0
   12010:	bxeq	lr
   12014:	bx	r3
   12018:	andeq	r4, r3, ip, lsr #9
   1201c:	andeq	r4, r3, ip, lsr #9
   12020:	andeq	r0, r0, r0
   12024:	push	{r4, lr}
   12028:	ldr	r4, [pc, #24]	; 12048 <bfd_arch_bits_per_address@plt+0xc94>
   1202c:	ldrb	r3, [r4]
   12030:	cmp	r3, #0
   12034:	popne	{r4, pc}
   12038:	bl	11fc0 <bfd_arch_bits_per_address@plt+0xc0c>
   1203c:	mov	r3, #1
   12040:	strb	r3, [r4]
   12044:	pop	{r4, pc}
   12048:	andeq	r4, r3, ip, asr #9
   1204c:	b	11fec <bfd_arch_bits_per_address@plt+0xc38>
   12050:	ldr	r3, [r0]
   12054:	cmp	r3, #0
   12058:	beq	1208c <bfd_arch_bits_per_address@plt+0xcd8>
   1205c:	ldr	r2, [r1]
   12060:	cmp	r2, #0
   12064:	beq	12094 <bfd_arch_bits_per_address@plt+0xce0>
   12068:	ldr	r0, [r3, #24]
   1206c:	ldr	r1, [r2, #24]
   12070:	cmp	r0, r1
   12074:	bcc	1208c <bfd_arch_bits_per_address@plt+0xcd8>
   12078:	bhi	12094 <bfd_arch_bits_per_address@plt+0xce0>
   1207c:	ldr	r0, [r3, #16]
   12080:	ldr	r3, [r2, #16]
   12084:	sub	r0, r0, r3
   12088:	bx	lr
   1208c:	mov	r0, #1
   12090:	bx	lr
   12094:	mvn	r0, #0
   12098:	bx	lr
   1209c:	push	{r4, r5, r6, lr}
   120a0:	ldr	r4, [r0]
   120a4:	ldr	r5, [r1]
   120a8:	ldr	r3, [r4, #12]
   120ac:	cmp	r3, #0
   120b0:	beq	120e4 <bfd_arch_bits_per_address@plt+0xd30>
   120b4:	ldr	r2, [r5, #12]
   120b8:	cmp	r2, #0
   120bc:	beq	120e4 <bfd_arch_bits_per_address@plt+0xd30>
   120c0:	ldr	r1, [r2, #4]
   120c4:	ldr	r0, [r3, #4]
   120c8:	bl	110cc <filename_cmp@plt>
   120cc:	cmp	r0, #0
   120d0:	popne	{r4, r5, r6, pc}
   120d4:	ldr	r0, [r4, #16]
   120d8:	ldr	r3, [r5, #16]
   120dc:	cmp	r0, r3
   120e0:	bne	12100 <bfd_arch_bits_per_address@plt+0xd4c>
   120e4:	ldr	r2, [r4]
   120e8:	ldr	r3, [r5]
   120ec:	cmp	r2, r3
   120f0:	bcc	12108 <bfd_arch_bits_per_address@plt+0xd54>
   120f4:	movhi	r0, #1
   120f8:	movls	r0, #0
   120fc:	pop	{r4, r5, r6, pc}
   12100:	sub	r0, r0, r3
   12104:	pop	{r4, r5, r6, pc}
   12108:	mvn	r0, #0
   1210c:	pop	{r4, r5, r6, pc}
   12110:	ldr	ip, [r3, #12]
   12114:	cmp	ip, r2
   12118:	bge	1214c <bfd_arch_bits_per_address@plt+0xd98>
   1211c:	cmp	r1, #0
   12120:	addne	r2, r0, r1
   12124:	subne	r2, r2, #1
   12128:	subne	r3, r0, #1
   1212c:	movne	ip, #32
   12130:	beq	12140 <bfd_arch_bits_per_address@plt+0xd8c>
   12134:	strb	ip, [r3, #1]!
   12138:	cmp	r2, r3
   1213c:	bne	12134 <bfd_arch_bits_per_address@plt+0xd80>
   12140:	mov	r3, #0
   12144:	strb	r3, [r0, r1]
   12148:	bx	lr
   1214c:	ldr	r3, [r3, #20]
   12150:	sub	r2, r2, #-1073741823	; 0xc0000001
   12154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12158:	sub	sp, sp, #316	; 0x13c
   1215c:	ldr	r7, [r3, r2, lsl #2]
   12160:	cmp	r7, #0
   12164:	beq	122d8 <bfd_arch_bits_per_address@plt+0xf24>
   12168:	ldr	r6, [pc, #760]	; 12468 <bfd_arch_bits_per_address@plt+0x10b4>
   1216c:	ldrb	r2, [r7, #20]
   12170:	mov	r8, r1
   12174:	ldr	r3, [r6]
   12178:	mov	r1, #0
   1217c:	add	r3, r3, #1
   12180:	ands	r2, r2, #1
   12184:	str	r0, [sp, #4]
   12188:	str	r3, [r6]
   1218c:	strb	r1, [sp, #12]
   12190:	bne	123a0 <bfd_arch_bits_per_address@plt+0xfec>
   12194:	ldr	r3, [r6, #8]
   12198:	ldr	r1, [r7, #32]
   1219c:	cmp	r3, #0
   121a0:	bne	1230c <bfd_arch_bits_per_address@plt+0xf58>
   121a4:	add	r9, sp, #12
   121a8:	mov	r4, r9
   121ac:	mov	r2, r3
   121b0:	mov	sl, r3
   121b4:	mvn	ip, #0
   121b8:	add	r5, r7, #32
   121bc:	ldr	fp, [pc, #680]	; 1246c <bfd_arch_bits_per_address@plt+0x10b8>
   121c0:	add	r7, r7, #68	; 0x44
   121c4:	b	121d0 <bfd_arch_bits_per_address@plt+0xe1c>
   121c8:	ldr	r1, [r5, #4]!
   121cc:	mov	r2, #1
   121d0:	cmp	r1, #0
   121d4:	beq	1233c <bfd_arch_bits_per_address@plt+0xf88>
   121d8:	ldr	r1, [r5, #40]	; 0x28
   121dc:	cmp	r2, #0
   121e0:	addne	sl, sl, r1
   121e4:	mov	r2, r1
   121e8:	moveq	sl, r1
   121ec:	cmp	r3, #0
   121f0:	sub	lr, r2, ip
   121f4:	clz	lr, lr
   121f8:	lsr	lr, lr, #5
   121fc:	moveq	lr, #0
   12200:	cmp	lr, #0
   12204:	str	r1, [r6, #4]
   12208:	mov	r0, r4
   1220c:	mov	r1, fp
   12210:	bne	12248 <bfd_arch_bits_per_address@plt+0xe94>
   12214:	cmp	r4, r9
   12218:	movhi	r3, #44	; 0x2c
   1221c:	strbhi	r3, [r0], #1
   12220:	movhi	r4, r0
   12224:	mov	r0, r4
   12228:	bl	11324 <sprintf@plt>
   1222c:	mov	r0, r4
   12230:	bl	1124c <strlen@plt>
   12234:	ldr	r3, [r6, #8]
   12238:	ldr	ip, [r6, #4]
   1223c:	adds	lr, r3, #0
   12240:	movne	lr, #1
   12244:	add	r4, r4, r0
   12248:	cmp	r7, r5
   1224c:	bne	121c8 <bfd_arch_bits_per_address@plt+0xe14>
   12250:	cmp	r4, r9
   12254:	movne	lr, #0
   12258:	andeq	lr, lr, #1
   1225c:	cmp	lr, #0
   12260:	bne	12318 <bfd_arch_bits_per_address@plt+0xf64>
   12264:	ldr	r2, [pc, #516]	; 12470 <bfd_arch_bits_per_address@plt+0x10bc>
   12268:	ldr	r3, [r6, #12]
   1226c:	ldr	r2, [r2]
   12270:	add	r3, r3, #1
   12274:	cmp	r2, sl
   12278:	str	r3, [r6, #12]
   1227c:	ldrhi	r3, [pc, #496]	; 12474 <bfd_arch_bits_per_address@plt+0x10c0>
   12280:	ldr	r2, [pc, #496]	; 12478 <bfd_arch_bits_per_address@plt+0x10c4>
   12284:	addhi	r4, r9, #5
   12288:	ldmhi	r3, {r0, r1}
   1228c:	mov	r3, r4
   12290:	strhi	r0, [sp, #12]
   12294:	ldr	r0, [r2]
   12298:	ldrb	r2, [r2, #4]
   1229c:	strhhi	r1, [sp, #16]
   122a0:	str	r0, [r4]
   122a4:	strb	r2, [r3, #4]!
   122a8:	sub	r3, r3, r9
   122ac:	cmp	r8, r3
   122b0:	bhi	123dc <bfd_arch_bits_per_address@plt+0x1028>
   122b4:	ldr	r4, [sp, #4]
   122b8:	mov	r1, r9
   122bc:	mov	r2, r8
   122c0:	mov	r0, r4
   122c4:	bl	112a0 <strncpy@plt>
   122c8:	mov	r3, #0
   122cc:	strb	r3, [r4, r8]
   122d0:	add	sp, sp, #316	; 0x13c
   122d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122d8:	cmp	r1, #0
   122dc:	addne	r2, r0, r1
   122e0:	subne	r2, r2, #1
   122e4:	subne	r3, r0, #1
   122e8:	movne	ip, #32
   122ec:	beq	122fc <bfd_arch_bits_per_address@plt+0xf48>
   122f0:	strb	ip, [r3, #1]!
   122f4:	cmp	r2, r3
   122f8:	bne	122f0 <bfd_arch_bits_per_address@plt+0xf3c>
   122fc:	mov	r3, #0
   12300:	strb	r3, [r0, r1]
   12304:	add	sp, sp, #316	; 0x13c
   12308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1230c:	cmp	r1, #0
   12310:	addeq	r9, sp, #12
   12314:	bne	12418 <bfd_arch_bits_per_address@plt+0x1064>
   12318:	ldr	r2, [r6, #4]
   1231c:	ldr	r1, [pc, #328]	; 1246c <bfd_arch_bits_per_address@plt+0x10b8>
   12320:	mov	r0, r9
   12324:	bl	11324 <sprintf@plt>
   12328:	mov	r0, r9
   1232c:	bl	1124c <strlen@plt>
   12330:	ldr	sl, [r6, #4]
   12334:	add	r4, r9, r0
   12338:	b	12264 <bfd_arch_bits_per_address@plt+0xeb0>
   1233c:	cmp	r3, #0
   12340:	sub	r1, r4, r9
   12344:	clz	r1, r1
   12348:	lsr	r1, r1, #5
   1234c:	movne	r3, r1
   12350:	moveq	r3, #0
   12354:	cmp	r3, #0
   12358:	bne	12318 <bfd_arch_bits_per_address@plt+0xf64>
   1235c:	cmp	r2, #0
   12360:	bne	12264 <bfd_arch_bits_per_address@plt+0xeb0>
   12364:	cmp	r8, #0
   12368:	beq	1238c <bfd_arch_bits_per_address@plt+0xfd8>
   1236c:	ldr	r3, [sp, #4]
   12370:	mov	r1, #32
   12374:	add	r2, r3, r8
   12378:	sub	r2, r2, #1
   1237c:	sub	r3, r3, #1
   12380:	strb	r1, [r3, #1]!
   12384:	cmp	r3, r2
   12388:	bne	12380 <bfd_arch_bits_per_address@plt+0xfcc>
   1238c:	ldr	r2, [sp, #4]
   12390:	mov	r3, #0
   12394:	strb	r3, [r2, r8]
   12398:	add	sp, sp, #316	; 0x13c
   1239c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123a0:	add	r9, sp, #12
   123a4:	ldr	r2, [r7, #24]
   123a8:	ldr	r1, [pc, #188]	; 1246c <bfd_arch_bits_per_address@plt+0x10b8>
   123ac:	mov	r0, r9
   123b0:	bl	11324 <sprintf@plt>
   123b4:	mov	r0, r9
   123b8:	bl	1124c <strlen@plt>
   123bc:	ldr	ip, [r7, #24]
   123c0:	ldr	r3, [r6, #8]
   123c4:	str	ip, [r6, #4]
   123c8:	mov	sl, ip
   123cc:	ldr	r1, [r7, #32]
   123d0:	mov	r2, #1
   123d4:	add	r4, r9, r0
   123d8:	b	121b8 <bfd_arch_bits_per_address@plt+0xe04>
   123dc:	ldr	r4, [sp, #4]
   123e0:	sub	r8, r8, r3
   123e4:	mov	r1, r9
   123e8:	add	r0, r4, r8
   123ec:	bl	111a4 <strcpy@plt>
   123f0:	cmp	r8, #0
   123f4:	beq	12304 <bfd_arch_bits_per_address@plt+0xf50>
   123f8:	sub	r0, r4, #1
   123fc:	add	r8, r0, r8
   12400:	mov	r3, #32
   12404:	strb	r3, [r0, #1]!
   12408:	cmp	r8, r0
   1240c:	bne	12404 <bfd_arch_bits_per_address@plt+0x1050>
   12410:	add	sp, sp, #316	; 0x13c
   12414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12418:	ldr	r0, [r7]
   1241c:	add	r9, sp, #12
   12420:	cmp	r0, r1
   12424:	movcs	sl, r2
   12428:	movcs	r4, r9
   1242c:	mvncs	ip, #0
   12430:	bcs	121b8 <bfd_arch_bits_per_address@plt+0xe04>
   12434:	ldr	r2, [r6, #4]
   12438:	ldr	r1, [pc, #44]	; 1246c <bfd_arch_bits_per_address@plt+0x10b8>
   1243c:	mov	r0, r9
   12440:	bl	11324 <sprintf@plt>
   12444:	mov	r0, r9
   12448:	bl	1124c <strlen@plt>
   1244c:	ldr	ip, [r6, #4]
   12450:	ldr	r3, [r6, #8]
   12454:	mov	sl, ip
   12458:	ldr	r1, [r7, #32]
   1245c:	mov	r2, #1
   12460:	add	r4, r9, r0
   12464:	b	121b8 <bfd_arch_bits_per_address@plt+0xe04>
   12468:	ldrdeq	r4, [r3], -r0
   1246c:	andeq	lr, r1, ip, lsl #13
   12470:	andeq	r4, r3, r4, asr #2
   12474:	muleq	r1, r0, r6
   12478:	muleq	r1, r8, r6
   1247c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12480:	sub	sp, sp, #36	; 0x24
   12484:	mov	r4, r0
   12488:	str	r1, [sp, #12]
   1248c:	add	r1, sp, #16
   12490:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   12494:	cmp	r0, #0
   12498:	bne	126cc <bfd_arch_bits_per_address@plt+0x1318>
   1249c:	ldr	r3, [pc, #608]	; 12704 <bfd_arch_bits_per_address@plt+0x1350>
   124a0:	add	r0, sp, #16
   124a4:	ldr	r6, [pc, #604]	; 12708 <bfd_arch_bits_per_address@plt+0x1354>
   124a8:	ldr	r3, [r3]
   124ac:	ldr	r3, [r3, #4]
   124b0:	ldr	r3, [r3, #40]	; 0x28
   124b4:	blx	r3
   124b8:	ldr	r3, [r6]
   124bc:	cmp	r3, #0
   124c0:	str	r0, [sp, #16]
   124c4:	beq	125c8 <bfd_arch_bits_per_address@plt+0x1214>
   124c8:	cmp	r0, #0
   124cc:	beq	125c0 <bfd_arch_bits_per_address@plt+0x120c>
   124d0:	ldr	r7, [pc, #564]	; 1270c <bfd_arch_bits_per_address@plt+0x1358>
   124d4:	ldr	r9, [pc, #564]	; 12710 <bfd_arch_bits_per_address@plt+0x135c>
   124d8:	ldr	fp, [pc, #564]	; 12714 <bfd_arch_bits_per_address@plt+0x1360>
   124dc:	ldr	sl, [pc, #564]	; 12718 <bfd_arch_bits_per_address@plt+0x1364>
   124e0:	mov	r5, #0
   124e4:	b	12504 <bfd_arch_bits_per_address@plt+0x1150>
   124e8:	ldr	r3, [r9, #16]
   124ec:	cmp	r3, #0
   124f0:	beq	12670 <bfd_arch_bits_per_address@plt+0x12bc>
   124f4:	ldr	r3, [sp, #16]
   124f8:	add	r5, r5, #1
   124fc:	cmp	r3, r5
   12500:	bls	125c0 <bfd_arch_bits_per_address@plt+0x120c>
   12504:	ldr	r3, [r6]
   12508:	cmp	r3, #0
   1250c:	beq	125e4 <bfd_arch_bits_per_address@plt+0x1230>
   12510:	add	r1, sp, #20
   12514:	mov	r0, r4
   12518:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   1251c:	cmp	r0, #0
   12520:	bne	12660 <bfd_arch_bits_per_address@plt+0x12ac>
   12524:	add	r1, sp, #24
   12528:	mov	r0, r4
   1252c:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   12530:	cmp	r0, #0
   12534:	bne	12660 <bfd_arch_bits_per_address@plt+0x12ac>
   12538:	ldr	r3, [r7]
   1253c:	cmp	r3, #0
   12540:	beq	124e8 <bfd_arch_bits_per_address@plt+0x1134>
   12544:	ldr	r1, [sp, #20]
   12548:	ldr	r0, [pc, #460]	; 1271c <bfd_arch_bits_per_address@plt+0x1368>
   1254c:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   12550:	subs	r8, r0, #0
   12554:	beq	124f4 <bfd_arch_bits_per_address@plt+0x1140>
   12558:	ldr	r3, [pc, #448]	; 12720 <bfd_arch_bits_per_address@plt+0x136c>
   1255c:	ldr	r1, [sp, #20]
   12560:	ldr	r3, [r3]
   12564:	tst	r3, #2048	; 0x800
   12568:	bne	126a4 <bfd_arch_bits_per_address@plt+0x12f0>
   1256c:	add	r0, r8, #28
   12570:	mov	r3, #0
   12574:	b	1258c <bfd_arch_bits_per_address@plt+0x11d8>
   12578:	cmp	r2, r1
   1257c:	beq	12598 <bfd_arch_bits_per_address@plt+0x11e4>
   12580:	add	r3, r3, #1
   12584:	cmp	r3, #10
   12588:	beq	124f4 <bfd_arch_bits_per_address@plt+0x1140>
   1258c:	ldr	r2, [r0, #4]!
   12590:	cmp	r2, #0
   12594:	bne	12578 <bfd_arch_bits_per_address@plt+0x11c4>
   12598:	add	r8, r8, r3, lsl #2
   1259c:	ldr	r2, [sp, #24]
   125a0:	ldr	r3, [r8, #72]	; 0x48
   125a4:	add	r5, r5, #1
   125a8:	add	r3, r3, r2
   125ac:	str	r3, [r8, #72]	; 0x48
   125b0:	ldr	r3, [sp, #16]
   125b4:	str	r1, [r8, #32]
   125b8:	cmp	r3, r5
   125bc:	bhi	12504 <bfd_arch_bits_per_address@plt+0x1150>
   125c0:	add	sp, sp, #36	; 0x24
   125c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c8:	mov	r0, r4
   125cc:	bl	112b8 <fgetc@plt>
   125d0:	add	r0, r0, #1
   125d4:	cmp	r0, #1
   125d8:	bhi	125c8 <bfd_arch_bits_per_address@plt+0x1214>
   125dc:	ldr	r0, [sp, #16]
   125e0:	b	124c8 <bfd_arch_bits_per_address@plt+0x1114>
   125e4:	mov	r2, #1
   125e8:	mov	r3, r4
   125ec:	mov	r1, #4
   125f0:	add	r0, sp, #24
   125f4:	bl	111b0 <fread@plt>
   125f8:	cmp	r0, #1
   125fc:	mov	r2, r0
   12600:	bne	12660 <bfd_arch_bits_per_address@plt+0x12ac>
   12604:	mov	r3, r4
   12608:	mov	r1, #4
   1260c:	add	r0, sp, #20
   12610:	bl	111b0 <fread@plt>
   12614:	cmp	r0, #1
   12618:	bne	12660 <bfd_arch_bits_per_address@plt+0x12ac>
   1261c:	mov	r0, r4
   12620:	bl	112b8 <fgetc@plt>
   12624:	add	r0, r0, #1
   12628:	cmp	r0, #1
   1262c:	bhi	1261c <bfd_arch_bits_per_address@plt+0x1268>
   12630:	mov	r0, r4
   12634:	bl	112b8 <fgetc@plt>
   12638:	add	r0, r0, #1
   1263c:	cmp	r0, #1
   12640:	bhi	12630 <bfd_arch_bits_per_address@plt+0x127c>
   12644:	mov	r3, r4
   12648:	mov	r2, #1
   1264c:	mov	r1, #4
   12650:	add	r0, sp, #28
   12654:	bl	111b0 <fread@plt>
   12658:	cmp	r0, #1
   1265c:	beq	12538 <bfd_arch_bits_per_address@plt+0x1184>
   12660:	ldr	r0, [sp, #12]
   12664:	bl	1115c <perror@plt>
   12668:	mov	r0, #1
   1266c:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   12670:	mov	r3, #1
   12674:	mov	r1, sl
   12678:	mov	r2, #5
   1267c:	ldr	r0, [pc, #160]	; 12724 <bfd_arch_bits_per_address@plt+0x1370>
   12680:	str	r3, [r9, #16]
   12684:	ldr	r8, [fp]
   12688:	bl	11120 <dcgettext@plt>
   1268c:	ldr	r3, [pc, #148]	; 12728 <bfd_arch_bits_per_address@plt+0x1374>
   12690:	ldr	r2, [r3]
   12694:	mov	r1, r0
   12698:	mov	r0, r8
   1269c:	bl	11270 <fprintf@plt>
   126a0:	b	124f4 <bfd_arch_bits_per_address@plt+0x1140>
   126a4:	ldr	r0, [sp, #24]
   126a8:	ldr	r3, [r8, #8]
   126ac:	ldr	r2, [r8]
   126b0:	str	r0, [sp, #4]
   126b4:	ldr	r0, [r8, #16]
   126b8:	str	r0, [sp]
   126bc:	ldr	r0, [pc, #104]	; 1272c <bfd_arch_bits_per_address@plt+0x1378>
   126c0:	bl	11090 <printf@plt>
   126c4:	ldr	r1, [sp, #20]
   126c8:	b	1256c <bfd_arch_bits_per_address@plt+0x11b8>
   126cc:	ldr	r3, [pc, #64]	; 12714 <bfd_arch_bits_per_address@plt+0x1360>
   126d0:	mov	r2, #5
   126d4:	ldr	r1, [pc, #84]	; 12730 <bfd_arch_bits_per_address@plt+0x137c>
   126d8:	ldr	r0, [pc, #68]	; 12724 <bfd_arch_bits_per_address@plt+0x1370>
   126dc:	ldr	r4, [r3]
   126e0:	bl	11120 <dcgettext@plt>
   126e4:	ldr	r2, [pc, #60]	; 12728 <bfd_arch_bits_per_address@plt+0x1374>
   126e8:	ldr	r3, [sp, #12]
   126ec:	ldr	r2, [r2]
   126f0:	mov	r1, r0
   126f4:	mov	r0, r4
   126f8:	bl	11270 <fprintf@plt>
   126fc:	mov	r0, #1
   12700:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   12704:	andeq	r5, r3, r0, lsr #8
   12708:	andeq	r5, r3, ip, lsl #2
   1270c:	andeq	r5, r3, r8, lsr #2
   12710:	ldrdeq	r4, [r3], -r0
   12714:			; <UNDEFINED> instruction: 0x000344b8
   12718:	strdeq	lr, [r1], -r4
   1271c:	andeq	r5, r3, r0, asr r4
   12720:	andeq	r5, r3, r0, lsr #2
   12724:	andeq	lr, r1, r0, asr #13
   12728:	andeq	r5, r3, ip, lsr r4
   1272c:	andeq	lr, r1, r8, asr #13
   12730:	andeq	lr, r1, r0, lsr #13
   12734:	push	{r4, r5, r6, r7, r8, lr}
   12738:	mov	r5, r0
   1273c:	ldr	r7, [pc, #224]	; 12824 <bfd_arch_bits_per_address@plt+0x1470>
   12740:	mov	r8, r1
   12744:	mov	r4, #0
   12748:	ldmib	r7, {r0, ip}
   1274c:	cmp	ip, r0
   12750:	bls	12784 <bfd_arch_bits_per_address@plt+0x13d0>
   12754:	add	r2, r0, #28
   12758:	mov	r3, #0
   1275c:	ldr	r1, [r2, #4]!
   12760:	cmp	r1, #0
   12764:	beq	12774 <bfd_arch_bits_per_address@plt+0x13c0>
   12768:	add	r3, r3, #1
   1276c:	cmp	r3, #10
   12770:	bne	1275c <bfd_arch_bits_per_address@plt+0x13a8>
   12774:	add	r0, r0, #216	; 0xd8
   12778:	cmp	ip, r0
   1277c:	add	r4, r4, r3
   12780:	bhi	12754 <bfd_arch_bits_per_address@plt+0x13a0>
   12784:	mov	r1, #2
   12788:	mov	r0, r5
   1278c:	bl	17eac <bfd_arch_bits_per_address@plt+0x6af8>
   12790:	cmp	r0, #0
   12794:	bne	12814 <bfd_arch_bits_per_address@plt+0x1460>
   12798:	mov	r1, r4
   1279c:	mov	r0, r5
   127a0:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   127a4:	cmp	r0, #0
   127a8:	bne	12814 <bfd_arch_bits_per_address@plt+0x1460>
   127ac:	ldr	r6, [r7, #4]
   127b0:	ldr	r3, [r7, #8]
   127b4:	cmp	r6, r3
   127b8:	popcs	{r4, r5, r6, r7, r8, pc}
   127bc:	add	r6, r6, #68	; 0x44
   127c0:	sub	r4, r6, #40	; 0x28
   127c4:	ldr	r1, [r4, #4]!
   127c8:	cmp	r1, #0
   127cc:	beq	127fc <bfd_arch_bits_per_address@plt+0x1448>
   127d0:	mov	r0, r5
   127d4:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   127d8:	cmp	r0, #0
   127dc:	bne	12814 <bfd_arch_bits_per_address@plt+0x1460>
   127e0:	ldr	r1, [r4, #40]	; 0x28
   127e4:	mov	r0, r5
   127e8:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   127ec:	cmp	r0, #0
   127f0:	bne	12814 <bfd_arch_bits_per_address@plt+0x1460>
   127f4:	cmp	r4, r6
   127f8:	bne	127c4 <bfd_arch_bits_per_address@plt+0x1410>
   127fc:	ldr	r2, [r7, #8]
   12800:	add	r3, r6, #148	; 0x94
   12804:	cmp	r2, r3
   12808:	add	r6, r6, #216	; 0xd8
   1280c:	bhi	127c0 <bfd_arch_bits_per_address@plt+0x140c>
   12810:	pop	{r4, r5, r6, r7, r8, pc}
   12814:	mov	r0, r8
   12818:	bl	1115c <perror@plt>
   1281c:	mov	r0, #1
   12820:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   12824:	andeq	r5, r3, r0, asr r4
   12828:	ldr	r3, [pc, #572]	; 12a6c <bfd_arch_bits_per_address@plt+0x16b8>
   1282c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12830:	sub	sp, sp, #20
   12834:	ldr	r2, [r3]
   12838:	cmp	r2, #0
   1283c:	beq	12a40 <bfd_arch_bits_per_address@plt+0x168c>
   12840:	mov	r2, #0
   12844:	str	r2, [r3]
   12848:	ldr	r6, [pc, #544]	; 12a70 <bfd_arch_bits_per_address@plt+0x16bc>
   1284c:	ldr	r0, [r6]
   12850:	lsl	r0, r0, #2
   12854:	bl	11180 <xmalloc@plt>
   12858:	ldr	r4, [r6, #4]
   1285c:	ldr	r3, [r6, #8]
   12860:	cmp	r4, r3
   12864:	mov	sl, r0
   12868:	str	r0, [sp, #12]
   1286c:	bcs	12a4c <bfd_arch_bits_per_address@plt+0x1698>
   12870:	ldr	r7, [pc, #508]	; 12a74 <bfd_arch_bits_per_address@plt+0x16c0>
   12874:	mov	r5, #0
   12878:	sub	r8, r7, #120	; 0x78
   1287c:	add	r9, r8, #132	; 0x84
   12880:	b	1289c <bfd_arch_bits_per_address@plt+0x14e8>
   12884:	str	r4, [sl, r5, lsl #2]
   12888:	add	r5, r5, #1
   1288c:	ldr	r3, [r6, #8]
   12890:	add	r4, r4, #216	; 0xd8
   12894:	cmp	r3, r4
   12898:	bls	128e0 <bfd_arch_bits_per_address@plt+0x152c>
   1289c:	ldr	r1, [r4]
   128a0:	mov	r0, r7
   128a4:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   128a8:	cmp	r0, #0
   128ac:	bne	12884 <bfd_arch_bits_per_address@plt+0x14d0>
   128b0:	ldr	r3, [r8, #120]	; 0x78
   128b4:	cmp	r3, #0
   128b8:	bne	1288c <bfd_arch_bits_per_address@plt+0x14d8>
   128bc:	ldr	r1, [r4]
   128c0:	mov	r0, r9
   128c4:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   128c8:	cmp	r0, #0
   128cc:	beq	12884 <bfd_arch_bits_per_address@plt+0x14d0>
   128d0:	ldr	r3, [r6, #8]
   128d4:	add	r4, r4, #216	; 0xd8
   128d8:	cmp	r3, r4
   128dc:	bhi	1289c <bfd_arch_bits_per_address@plt+0x14e8>
   128e0:	ldr	r4, [sp, #12]
   128e4:	ldr	r3, [pc, #396]	; 12a78 <bfd_arch_bits_per_address@plt+0x16c4>
   128e8:	mov	r2, #4
   128ec:	mov	r1, r5
   128f0:	mov	r0, r4
   128f4:	bl	11354 <qsort@plt>
   128f8:	cmp	r5, #0
   128fc:	beq	12a18 <bfd_arch_bits_per_address@plt+0x1664>
   12900:	ldr	r7, [pc, #372]	; 12a7c <bfd_arch_bits_per_address@plt+0x16c8>
   12904:	ldr	r6, [pc, #372]	; 12a80 <bfd_arch_bits_per_address@plt+0x16cc>
   12908:	ldr	r9, [pc, #372]	; 12a84 <bfd_arch_bits_per_address@plt+0x16d0>
   1290c:	sub	sl, r4, #4
   12910:	add	r3, sl, r5, lsl #2
   12914:	str	r3, [sp, #8]
   12918:	ldr	r5, [sl, #4]!
   1291c:	ldr	r3, [r5, #24]
   12920:	cmp	r3, #0
   12924:	bne	12934 <bfd_arch_bits_per_address@plt+0x1580>
   12928:	ldr	r3, [r9]
   1292c:	cmp	r3, #0
   12930:	bne	12978 <bfd_arch_bits_per_address@plt+0x15c4>
   12934:	mov	r2, #5
   12938:	mov	r1, r7
   1293c:	mov	r0, r6
   12940:	bl	11120 <dcgettext@plt>
   12944:	ldr	r3, [r5, #12]
   12948:	cmp	r3, #0
   1294c:	mov	r4, r0
   12950:	beq	12a28 <bfd_arch_bits_per_address@plt+0x1674>
   12954:	ldr	r1, [r3, #4]
   12958:	ldr	r0, [r5, #24]
   1295c:	ldr	r3, [r5, #8]
   12960:	ldr	r2, [r5, #16]
   12964:	str	r0, [sp, #4]
   12968:	ldr	ip, [r5]
   1296c:	mov	r0, r4
   12970:	str	ip, [sp]
   12974:	bl	11090 <printf@plt>
   12978:	add	r4, r5, #28
   1297c:	add	r8, r5, #68	; 0x44
   12980:	b	129b0 <bfd_arch_bits_per_address@plt+0x15fc>
   12984:	ldr	r1, [r3, #4]
   12988:	ldr	ip, [r4, #40]	; 0x28
   1298c:	ldr	r3, [r5, #8]
   12990:	ldr	r2, [r5, #16]
   12994:	str	ip, [sp, #4]
   12998:	ldr	ip, [r4]
   1299c:	mov	r0, fp
   129a0:	str	ip, [sp]
   129a4:	bl	11090 <printf@plt>
   129a8:	cmp	r4, r8
   129ac:	beq	12a0c <bfd_arch_bits_per_address@plt+0x1658>
   129b0:	ldr	r3, [r4, #4]!
   129b4:	mov	r2, #5
   129b8:	cmp	r3, #0
   129bc:	mov	r1, r7
   129c0:	mov	r0, r6
   129c4:	beq	12a0c <bfd_arch_bits_per_address@plt+0x1658>
   129c8:	ldr	r3, [r4, #40]	; 0x28
   129cc:	cmp	r3, #0
   129d0:	bne	129e0 <bfd_arch_bits_per_address@plt+0x162c>
   129d4:	ldr	r3, [r9]
   129d8:	cmp	r3, #0
   129dc:	bne	129a8 <bfd_arch_bits_per_address@plt+0x15f4>
   129e0:	bl	11120 <dcgettext@plt>
   129e4:	ldr	r3, [r5, #12]
   129e8:	cmp	r3, #0
   129ec:	mov	fp, r0
   129f0:	bne	12984 <bfd_arch_bits_per_address@plt+0x15d0>
   129f4:	ldr	r1, [pc, #140]	; 12a88 <bfd_arch_bits_per_address@plt+0x16d4>
   129f8:	mov	r2, #5
   129fc:	mov	r0, r6
   12a00:	bl	11120 <dcgettext@plt>
   12a04:	mov	r1, r0
   12a08:	b	12988 <bfd_arch_bits_per_address@plt+0x15d4>
   12a0c:	ldr	r3, [sp, #8]
   12a10:	cmp	sl, r3
   12a14:	bne	12918 <bfd_arch_bits_per_address@plt+0x1564>
   12a18:	ldr	r0, [sp, #12]
   12a1c:	add	sp, sp, #20
   12a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a24:	b	110a8 <free@plt>
   12a28:	ldr	r1, [pc, #88]	; 12a88 <bfd_arch_bits_per_address@plt+0x16d4>
   12a2c:	mov	r2, #5
   12a30:	mov	r0, r6
   12a34:	bl	11120 <dcgettext@plt>
   12a38:	mov	r1, r0
   12a3c:	b	12958 <bfd_arch_bits_per_address@plt+0x15a4>
   12a40:	ldr	r0, [pc, #68]	; 12a8c <bfd_arch_bits_per_address@plt+0x16d8>
   12a44:	bl	111ec <puts@plt>
   12a48:	b	12848 <bfd_arch_bits_per_address@plt+0x1494>
   12a4c:	ldr	r3, [pc, #36]	; 12a78 <bfd_arch_bits_per_address@plt+0x16c4>
   12a50:	mov	r2, #4
   12a54:	mov	r1, #0
   12a58:	bl	11354 <qsort@plt>
   12a5c:	ldr	r0, [sp, #12]
   12a60:	add	sp, sp, #20
   12a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a68:	b	110a8 <free@plt>
   12a6c:	andeq	r4, r3, r8, ror r4
   12a70:	andeq	r5, r3, r0, asr r4
   12a74:	ldrdeq	r5, [r3], -r4
   12a78:	muleq	r1, ip, r0
   12a7c:	andeq	lr, r1, ip, lsr r7
   12a80:	andeq	lr, r1, r0, asr #13
   12a84:	andeq	r4, r3, r0, ror r1
   12a88:	andeq	lr, r1, r0, ror #14
   12a8c:	andeq	lr, r1, r8, lsr r7
   12a90:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a94:	vpush	{d8-d9}
   12a98:	ldr	r5, [pc, #1176]	; 12f38 <bfd_arch_bits_per_address@plt+0x1b84>
   12a9c:	ldr	r4, [r5, #4]
   12aa0:	ldr	r3, [r5, #8]
   12aa4:	cmp	r4, r3
   12aa8:	bcs	12f00 <bfd_arch_bits_per_address@plt+0x1b4c>
   12aac:	ldr	r6, [pc, #1160]	; 12f3c <bfd_arch_bits_per_address@plt+0x1b88>
   12ab0:	sub	r7, r6, #96	; 0x60
   12ab4:	add	r8, r7, #108	; 0x6c
   12ab8:	b	12acc <bfd_arch_bits_per_address@plt+0x1718>
   12abc:	ldr	r3, [r5, #8]
   12ac0:	add	r4, r4, #216	; 0xd8
   12ac4:	cmp	r3, r4
   12ac8:	bls	12b18 <bfd_arch_bits_per_address@plt+0x1764>
   12acc:	ldr	r3, [r4, #12]
   12ad0:	cmp	r3, #0
   12ad4:	beq	12abc <bfd_arch_bits_per_address@plt+0x1708>
   12ad8:	ldr	r3, [r3, #12]
   12adc:	ldr	r2, [r4, #16]
   12ae0:	cmp	r2, r3
   12ae4:	ble	12abc <bfd_arch_bits_per_address@plt+0x1708>
   12ae8:	ldr	r1, [r4]
   12aec:	mov	r0, r6
   12af0:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   12af4:	cmp	r0, #0
   12af8:	beq	12e68 <bfd_arch_bits_per_address@plt+0x1ab4>
   12afc:	ldr	r3, [r4, #12]
   12b00:	ldr	r2, [r4, #16]
   12b04:	add	r4, r4, #216	; 0xd8
   12b08:	str	r2, [r3, #12]
   12b0c:	ldr	r3, [r5, #8]
   12b10:	cmp	r3, r4
   12b14:	bhi	12acc <bfd_arch_bits_per_address@plt+0x1718>
   12b18:	ldr	r6, [pc, #1056]	; 12f40 <bfd_arch_bits_per_address@plt+0x1b8c>
   12b1c:	ldr	r4, [r6]
   12b20:	cmp	r4, #0
   12b24:	beq	12f14 <bfd_arch_bits_per_address@plt+0x1b60>
   12b28:	ldr	r0, [r4, #12]
   12b2c:	cmp	r0, #0
   12b30:	lsl	r0, r0, #2
   12b34:	ble	12b50 <bfd_arch_bits_per_address@plt+0x179c>
   12b38:	bl	11180 <xmalloc@plt>
   12b3c:	ldr	r2, [r4, #12]
   12b40:	mov	r1, #0
   12b44:	lsl	r2, r2, #2
   12b48:	str	r0, [r4, #20]
   12b4c:	bl	11288 <memset@plt>
   12b50:	ldr	r4, [r4]
   12b54:	cmp	r4, #0
   12b58:	bne	12b28 <bfd_arch_bits_per_address@plt+0x1774>
   12b5c:	ldr	r4, [r5, #4]
   12b60:	ldr	r3, [r5, #8]
   12b64:	cmp	r4, r3
   12b68:	bcs	12c08 <bfd_arch_bits_per_address@plt+0x1854>
   12b6c:	ldr	r7, [pc, #968]	; 12f3c <bfd_arch_bits_per_address@plt+0x1b88>
   12b70:	sub	r8, r7, #96	; 0x60
   12b74:	add	r9, r8, #108	; 0x6c
   12b78:	b	12b8c <bfd_arch_bits_per_address@plt+0x17d8>
   12b7c:	ldr	r3, [r5, #8]
   12b80:	add	r4, r4, #216	; 0xd8
   12b84:	cmp	r3, r4
   12b88:	bls	12c08 <bfd_arch_bits_per_address@plt+0x1854>
   12b8c:	ldr	r3, [r4, #12]
   12b90:	cmp	r3, #0
   12b94:	beq	12b7c <bfd_arch_bits_per_address@plt+0x17c8>
   12b98:	ldr	r3, [r3, #12]
   12b9c:	cmp	r3, #0
   12ba0:	beq	12b7c <bfd_arch_bits_per_address@plt+0x17c8>
   12ba4:	ldr	r1, [r4]
   12ba8:	mov	r0, r7
   12bac:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   12bb0:	cmp	r0, #0
   12bb4:	beq	12e8c <bfd_arch_bits_per_address@plt+0x1ad8>
   12bb8:	ldrd	r2, [r4, #12]
   12bbc:	ldr	r1, [r4, #24]
   12bc0:	ldr	ip, [r2, #20]
   12bc4:	sub	r3, r3, #-1073741823	; 0xc0000001
   12bc8:	ldr	r0, [r2, #8]
   12bcc:	ldr	sl, [ip, r3, lsl #2]
   12bd0:	add	r0, r0, r1
   12bd4:	cmp	sl, #0
   12bd8:	str	r0, [r2, #8]
   12bdc:	beq	12eb0 <bfd_arch_bits_per_address@plt+0x1afc>
   12be0:	ldr	r3, [sl]
   12be4:	cmp	r3, #0
   12be8:	bne	12eb8 <bfd_arch_bits_per_address@plt+0x1b04>
   12bec:	ldr	r3, [sl, #24]
   12bf0:	add	r4, r4, #216	; 0xd8
   12bf4:	add	r1, r3, r1
   12bf8:	ldr	r3, [r5, #8]
   12bfc:	str	r1, [sl, #24]
   12c00:	cmp	r3, r4
   12c04:	bhi	12b8c <bfd_arch_bits_per_address@plt+0x17d8>
   12c08:	ldr	r4, [r6]
   12c0c:	cmp	r4, #0
   12c10:	beq	12db4 <bfd_arch_bits_per_address@plt+0x1a00>
   12c14:	vldr	d9, [pc, #780]	; 12f28 <bfd_arch_bits_per_address@plt+0x1b74>
   12c18:	vldr	d8, [pc, #784]	; 12f30 <bfd_arch_bits_per_address@plt+0x1b7c>
   12c1c:	ldr	sl, [pc, #800]	; 12f44 <bfd_arch_bits_per_address@plt+0x1b90>
   12c20:	ldr	r7, [pc, #800]	; 12f48 <bfd_arch_bits_per_address@plt+0x1b94>
   12c24:	ldr	fp, [pc, #800]	; 12f4c <bfd_arch_bits_per_address@plt+0x1b98>
   12c28:	ldr	r3, [r4, #12]
   12c2c:	cmp	r3, #0
   12c30:	beq	12da8 <bfd_arch_bits_per_address@plt+0x19f4>
   12c34:	ldr	r3, [sl]
   12c38:	cmp	r3, #0
   12c3c:	beq	12c4c <bfd_arch_bits_per_address@plt+0x1898>
   12c40:	ldr	r3, [r4, #8]
   12c44:	cmp	r3, #0
   12c48:	beq	12da8 <bfd_arch_bits_per_address@plt+0x19f4>
   12c4c:	mov	r5, #0
   12c50:	mov	r3, r4
   12c54:	ldr	r2, [pc, #756]	; 12f50 <bfd_arch_bits_per_address@plt+0x1b9c>
   12c58:	mov	r1, #16
   12c5c:	mov	r0, r4
   12c60:	str	r5, [r7, #12]
   12c64:	str	r5, [r7]
   12c68:	bl	19fc4 <bfd_arch_bits_per_address@plt+0x8c10>
   12c6c:	subs	r6, r0, #0
   12c70:	beq	12da8 <bfd_arch_bits_per_address@plt+0x19f4>
   12c74:	ldr	r3, [fp, #4]
   12c78:	cmp	r3, r5
   12c7c:	bgt	12dbc <bfd_arch_bits_per_address@plt+0x1a08>
   12c80:	ldr	r0, [r4, #20]
   12c84:	bl	110a8 <free@plt>
   12c88:	mov	r3, #0
   12c8c:	str	r3, [r4, #20]
   12c90:	mov	r2, #5
   12c94:	ldr	r1, [pc, #696]	; 12f54 <bfd_arch_bits_per_address@plt+0x1ba0>
   12c98:	ldr	r0, [pc, #696]	; 12f58 <bfd_arch_bits_per_address@plt+0x1ba4>
   12c9c:	bl	11120 <dcgettext@plt>
   12ca0:	mov	r1, r0
   12ca4:	mov	r0, r6
   12ca8:	bl	11270 <fprintf@plt>
   12cac:	mov	r2, #5
   12cb0:	ldr	r1, [pc, #676]	; 12f5c <bfd_arch_bits_per_address@plt+0x1ba8>
   12cb4:	ldr	r0, [pc, #668]	; 12f58 <bfd_arch_bits_per_address@plt+0x1ba4>
   12cb8:	bl	11120 <dcgettext@plt>
   12cbc:	ldr	r2, [r7]
   12cc0:	mov	r1, r0
   12cc4:	mov	r0, r6
   12cc8:	bl	11270 <fprintf@plt>
   12ccc:	mov	r2, #5
   12cd0:	ldr	r1, [pc, #648]	; 12f60 <bfd_arch_bits_per_address@plt+0x1bac>
   12cd4:	ldr	r0, [pc, #636]	; 12f58 <bfd_arch_bits_per_address@plt+0x1ba4>
   12cd8:	bl	11120 <dcgettext@plt>
   12cdc:	ldr	r2, [r7, #12]
   12ce0:	mov	r1, r0
   12ce4:	mov	r0, r6
   12ce8:	bl	11270 <fprintf@plt>
   12cec:	mov	r2, #5
   12cf0:	ldr	r1, [pc, #620]	; 12f64 <bfd_arch_bits_per_address@plt+0x1bb0>
   12cf4:	ldr	r0, [pc, #604]	; 12f58 <bfd_arch_bits_per_address@plt+0x1ba4>
   12cf8:	bl	11120 <dcgettext@plt>
   12cfc:	ldr	r3, [r7]
   12d00:	cmp	r3, #0
   12d04:	vldrne	s13, [r7, #12]
   12d08:	vmovne	s15, r3
   12d0c:	vmoveq.f64	d5, d8
   12d10:	vcvtne.f64.s32	d6, s13
   12d14:	vcvtne.f64.s32	d7, s15
   12d18:	mov	r1, r0
   12d1c:	mov	r0, r6
   12d20:	vmulne.f64	d6, d6, d8
   12d24:	vdivne.f64	d5, d6, d7
   12d28:	vmov	r2, r3, d5
   12d2c:	bl	11270 <fprintf@plt>
   12d30:	mov	r2, #5
   12d34:	ldr	r1, [pc, #556]	; 12f68 <bfd_arch_bits_per_address@plt+0x1bb4>
   12d38:	ldr	r0, [pc, #536]	; 12f58 <bfd_arch_bits_per_address@plt+0x1ba4>
   12d3c:	bl	11120 <dcgettext@plt>
   12d40:	ldr	r2, [r4, #8]
   12d44:	mov	r1, r0
   12d48:	mov	r0, r6
   12d4c:	bl	11270 <fprintf@plt>
   12d50:	mov	r2, #5
   12d54:	ldr	r1, [pc, #528]	; 12f6c <bfd_arch_bits_per_address@plt+0x1bb8>
   12d58:	ldr	r0, [pc, #504]	; 12f58 <bfd_arch_bits_per_address@plt+0x1ba4>
   12d5c:	bl	11120 <dcgettext@plt>
   12d60:	ldr	r3, [r7]
   12d64:	cmp	r3, #0
   12d68:	vmovne	s15, r3
   12d6c:	vldrne	s13, [r4, #8]
   12d70:	vmoveq.f64	d6, d9
   12d74:	vcvtne.f64.s32	d7, s15
   12d78:	vcvtne.f64.u32	d5, s13
   12d7c:	mov	r1, r0
   12d80:	mov	r0, r6
   12d84:	vdivne.f64	d6, d5, d7
   12d88:	vmov	r2, r3, d6
   12d8c:	bl	11270 <fprintf@plt>
   12d90:	ldr	r3, [pc, #472]	; 12f70 <bfd_arch_bits_per_address@plt+0x1bbc>
   12d94:	ldr	r3, [r3]
   12d98:	cmp	r3, r6
   12d9c:	beq	12da8 <bfd_arch_bits_per_address@plt+0x19f4>
   12da0:	mov	r0, r6
   12da4:	bl	112d0 <fclose@plt>
   12da8:	ldr	r4, [r4]
   12dac:	cmp	r4, #0
   12db0:	bne	12c28 <bfd_arch_bits_per_address@plt+0x1874>
   12db4:	vpop	{d8-d9}
   12db8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dbc:	mov	r2, #5
   12dc0:	ldr	r1, [pc, #428]	; 12f74 <bfd_arch_bits_per_address@plt+0x1bc0>
   12dc4:	ldr	r0, [pc, #396]	; 12f58 <bfd_arch_bits_per_address@plt+0x1ba4>
   12dc8:	bl	11120 <dcgettext@plt>
   12dcc:	ldr	r2, [fp, #4]
   12dd0:	mov	r1, r0
   12dd4:	mov	r0, r6
   12dd8:	bl	11270 <fprintf@plt>
   12ddc:	ldr	r3, [pc, #404]	; 12f78 <bfd_arch_bits_per_address@plt+0x1bc4>
   12de0:	ldr	r0, [r4, #20]
   12de4:	mov	r2, #4
   12de8:	ldr	r1, [r4, #12]
   12dec:	bl	11354 <qsort@plt>
   12df0:	ldr	r8, [fp, #4]
   12df4:	ldr	r3, [r4, #12]
   12df8:	ldr	r0, [r4, #20]
   12dfc:	cmp	r8, r3
   12e00:	movge	r8, r3
   12e04:	cmp	r8, #0
   12e08:	ble	12c84 <bfd_arch_bits_per_address@plt+0x18d0>
   12e0c:	ldr	r2, [r0]
   12e10:	cmp	r2, #0
   12e14:	beq	12c84 <bfd_arch_bits_per_address@plt+0x18d0>
   12e18:	ldr	r3, [r2, #24]
   12e1c:	cmp	r3, #0
   12e20:	beq	12c84 <bfd_arch_bits_per_address@plt+0x18d0>
   12e24:	ldr	r9, [pc, #336]	; 12f7c <bfd_arch_bits_per_address@plt+0x1bc8>
   12e28:	b	12e44 <bfd_arch_bits_per_address@plt+0x1a90>
   12e2c:	ldr	r2, [r0, r5, lsl #2]
   12e30:	cmp	r2, #0
   12e34:	beq	12c84 <bfd_arch_bits_per_address@plt+0x18d0>
   12e38:	ldr	r3, [r2, #24]
   12e3c:	cmp	r3, #0
   12e40:	beq	12c84 <bfd_arch_bits_per_address@plt+0x18d0>
   12e44:	ldr	r2, [r2, #16]
   12e48:	add	r5, r5, #1
   12e4c:	mov	r1, r9
   12e50:	mov	r0, r6
   12e54:	bl	11270 <fprintf@plt>
   12e58:	cmp	r5, r8
   12e5c:	ldr	r0, [r4, #20]
   12e60:	bne	12e2c <bfd_arch_bits_per_address@plt+0x1a78>
   12e64:	b	12c84 <bfd_arch_bits_per_address@plt+0x18d0>
   12e68:	ldr	r3, [r7, #96]	; 0x60
   12e6c:	cmp	r3, #0
   12e70:	bne	12abc <bfd_arch_bits_per_address@plt+0x1708>
   12e74:	ldr	r1, [r4]
   12e78:	mov	r0, r8
   12e7c:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   12e80:	cmp	r0, #0
   12e84:	bne	12abc <bfd_arch_bits_per_address@plt+0x1708>
   12e88:	b	12afc <bfd_arch_bits_per_address@plt+0x1748>
   12e8c:	ldr	r3, [r8, #96]	; 0x60
   12e90:	cmp	r3, #0
   12e94:	bne	12b7c <bfd_arch_bits_per_address@plt+0x17c8>
   12e98:	ldr	r1, [r4]
   12e9c:	mov	r0, r9
   12ea0:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   12ea4:	cmp	r0, #0
   12ea8:	bne	12b7c <bfd_arch_bits_per_address@plt+0x17c8>
   12eac:	b	12bb8 <bfd_arch_bits_per_address@plt+0x1804>
   12eb0:	str	r4, [ip, r3, lsl #2]
   12eb4:	b	12b7c <bfd_arch_bits_per_address@plt+0x17c8>
   12eb8:	mov	r0, #216	; 0xd8
   12ebc:	bl	11180 <xmalloc@plt>
   12ec0:	mov	r1, sl
   12ec4:	mov	r2, #216	; 0xd8
   12ec8:	bl	110e4 <memcpy@plt>
   12ecc:	ldr	r2, [r4, #16]
   12ed0:	mov	r1, #0
   12ed4:	sub	r2, r2, #-1073741823	; 0xc0000001
   12ed8:	mov	r3, r0
   12edc:	ldr	r0, [r4, #12]
   12ee0:	str	r1, [r3]
   12ee4:	ldr	r1, [r3, #24]
   12ee8:	ldr	ip, [r4, #24]
   12eec:	ldr	r0, [r0, #20]
   12ef0:	add	r1, r1, ip
   12ef4:	str	r1, [r3, #24]
   12ef8:	str	r3, [r0, r2, lsl #2]
   12efc:	b	12b7c <bfd_arch_bits_per_address@plt+0x17c8>
   12f00:	ldr	r6, [pc, #56]	; 12f40 <bfd_arch_bits_per_address@plt+0x1b8c>
   12f04:	ldr	r4, [r6]
   12f08:	cmp	r4, #0
   12f0c:	bne	12b28 <bfd_arch_bits_per_address@plt+0x1774>
   12f10:	b	12db4 <bfd_arch_bits_per_address@plt+0x1a00>
   12f14:	ldr	r4, [r5, #4]
   12f18:	cmp	r4, r3
   12f1c:	bcc	12b6c <bfd_arch_bits_per_address@plt+0x17b8>
   12f20:	b	12db4 <bfd_arch_bits_per_address@plt+0x1a00>
   12f24:	nop			; (mov r0, r0)
	...
   12f34:	subsmi	r0, r9, r0
   12f38:	andeq	r5, r3, r0, asr r4
   12f3c:			; <UNDEFINED> instruction: 0x000354bc
   12f40:	andeq	r5, r3, r8, asr r1
   12f44:	andeq	r4, r3, r0, ror r1
   12f48:	ldrdeq	r4, [r3], -r0
   12f4c:	andeq	r4, r3, r4, asr #2
   12f50:	andeq	r2, r1, r0, lsl r1
   12f54:	andeq	lr, r1, r0, lsr #15
   12f58:	andeq	lr, r1, r0, asr #13
   12f5c:			; <UNDEFINED> instruction: 0x0001e7b8
   12f60:	andeq	lr, r1, r0, ror #15
   12f64:	strdeq	lr, [r1], -r8
   12f68:	andeq	lr, r1, r0, lsr #16
   12f6c:	andeq	lr, r1, ip, asr #16
   12f70:	andeq	r4, r3, r4, asr #9
   12f74:	andeq	lr, r1, ip, ror #14
   12f78:	andeq	r2, r1, r0, asr r0
   12f7c:	muleq	r1, r4, r7
   12f80:	push	{r4, r5, r6, r7, r8, lr}
   12f84:	mov	r4, r1
   12f88:	ldr	r5, [pc, #236]	; 1307c <bfd_arch_bits_per_address@plt+0x1cc8>
   12f8c:	mov	r1, r0
   12f90:	mov	r0, r5
   12f94:	mov	r7, r2
   12f98:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   12f9c:	mov	r1, r4
   12fa0:	mov	r6, r0
   12fa4:	mov	r0, r5
   12fa8:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   12fac:	cmp	r6, #0
   12fb0:	cmpne	r0, #0
   12fb4:	popeq	{r4, r5, r6, r7, r8, pc}
   12fb8:	ldr	r2, [r5, #4]
   12fbc:	mov	r4, r0
   12fc0:	cmp	r2, r0
   12fc4:	bls	12fd8 <bfd_arch_bits_per_address@plt+0x1c24>
   12fc8:	pop	{r4, r5, r6, r7, r8, pc}
   12fcc:	sub	r4, r4, #216	; 0xd8
   12fd0:	cmp	r2, r4
   12fd4:	pophi	{r4, r5, r6, r7, r8, pc}
   12fd8:	ldrb	r3, [r4, #20]
   12fdc:	tst	r3, #1
   12fe0:	beq	12fcc <bfd_arch_bits_per_address@plt+0x1c18>
   12fe4:	mov	r2, r4
   12fe8:	mov	r1, r6
   12fec:	ldr	r0, [pc, #140]	; 13080 <bfd_arch_bits_per_address@plt+0x1ccc>
   12ff0:	bl	1b16c <bfd_arch_bits_per_address@plt+0x9db8>
   12ff4:	cmp	r0, #0
   12ff8:	beq	1302c <bfd_arch_bits_per_address@plt+0x1c78>
   12ffc:	ldr	r2, [pc, #128]	; 13084 <bfd_arch_bits_per_address@plt+0x1cd0>
   13000:	ldr	r3, [r4, #24]
   13004:	ldr	r2, [r2]
   13008:	add	r3, r3, r7
   1300c:	tst	r2, #16
   13010:	str	r3, [r4, #24]
   13014:	bne	13058 <bfd_arch_bits_per_address@plt+0x1ca4>
   13018:	mov	r2, r7
   1301c:	mov	r1, r4
   13020:	mov	r0, r6
   13024:	pop	{r4, r5, r6, r7, r8, lr}
   13028:	b	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1302c:	ldr	r0, [pc, #84]	; 13088 <bfd_arch_bits_per_address@plt+0x1cd4>
   13030:	ldr	r3, [r0, #24]
   13034:	cmp	r3, #0
   13038:	popne	{r4, r5, r6, r7, r8, pc}
   1303c:	add	r0, r0, #36	; 0x24
   13040:	mov	r2, r4
   13044:	mov	r1, r6
   13048:	bl	1b16c <bfd_arch_bits_per_address@plt+0x9db8>
   1304c:	cmp	r0, #0
   13050:	popne	{r4, r5, r6, r7, r8, pc}
   13054:	b	12ffc <bfd_arch_bits_per_address@plt+0x1c48>
   13058:	mov	r2, #5
   1305c:	ldr	r1, [pc, #40]	; 1308c <bfd_arch_bits_per_address@plt+0x1cd8>
   13060:	ldr	r0, [pc, #40]	; 13090 <bfd_arch_bits_per_address@plt+0x1cdc>
   13064:	bl	11120 <dcgettext@plt>
   13068:	mov	r3, r7
   1306c:	ldr	r2, [r4, #8]
   13070:	ldr	r1, [r6, #8]
   13074:	bl	11090 <printf@plt>
   13078:	b	13018 <bfd_arch_bits_per_address@plt+0x1c64>
   1307c:	andeq	r5, r3, r0, asr r4
   13080:	andeq	r5, r3, r4, ror r4
   13084:	andeq	r5, r3, r0, lsr #2
   13088:	andeq	r5, r3, ip, asr r4
   1308c:	andeq	lr, r1, r4, ror r8
   13090:	andeq	lr, r1, r0, asr #13
   13094:	push	{r4, r5, lr}
   13098:	sub	sp, sp, #20
   1309c:	mov	r5, r1
   130a0:	add	r1, sp, #4
   130a4:	mov	r4, r0
   130a8:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   130ac:	cmp	r0, #0
   130b0:	bne	13128 <bfd_arch_bits_per_address@plt+0x1d74>
   130b4:	add	r1, sp, #8
   130b8:	mov	r0, r4
   130bc:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   130c0:	cmp	r0, #0
   130c4:	bne	13128 <bfd_arch_bits_per_address@plt+0x1d74>
   130c8:	mov	r0, r4
   130cc:	add	r1, sp, #12
   130d0:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   130d4:	cmp	r0, #0
   130d8:	bne	13128 <bfd_arch_bits_per_address@plt+0x1d74>
   130dc:	ldr	r3, [pc, #124]	; 13160 <bfd_arch_bits_per_address@plt+0x1dac>
   130e0:	ldrd	r0, [sp, #4]
   130e4:	ldr	r2, [sp, #12]
   130e8:	ldr	r3, [r3]
   130ec:	tst	r3, #64	; 0x40
   130f0:	bne	13100 <bfd_arch_bits_per_address@plt+0x1d4c>
   130f4:	bl	12f80 <bfd_arch_bits_per_address@plt+0x1bcc>
   130f8:	add	sp, sp, #20
   130fc:	pop	{r4, r5, pc}
   13100:	mov	r3, r2
   13104:	mov	r2, r1
   13108:	mov	r1, r0
   1310c:	ldr	r0, [pc, #80]	; 13164 <bfd_arch_bits_per_address@plt+0x1db0>
   13110:	bl	11090 <printf@plt>
   13114:	ldrd	r0, [sp, #4]
   13118:	ldr	r2, [sp, #12]
   1311c:	bl	12f80 <bfd_arch_bits_per_address@plt+0x1bcc>
   13120:	add	sp, sp, #20
   13124:	pop	{r4, r5, pc}
   13128:	ldr	r3, [pc, #56]	; 13168 <bfd_arch_bits_per_address@plt+0x1db4>
   1312c:	mov	r2, #5
   13130:	ldr	r1, [pc, #52]	; 1316c <bfd_arch_bits_per_address@plt+0x1db8>
   13134:	ldr	r0, [pc, #52]	; 13170 <bfd_arch_bits_per_address@plt+0x1dbc>
   13138:	ldr	r4, [r3]
   1313c:	bl	11120 <dcgettext@plt>
   13140:	ldr	r2, [pc, #44]	; 13174 <bfd_arch_bits_per_address@plt+0x1dc0>
   13144:	mov	r3, r5
   13148:	ldr	r2, [r2]
   1314c:	mov	r1, r0
   13150:	mov	r0, r4
   13154:	bl	11270 <fprintf@plt>
   13158:	mov	r0, #1
   1315c:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   13160:	andeq	r5, r3, r0, lsr #2
   13164:	andeq	lr, r1, r8, lsr #17
   13168:			; <UNDEFINED> instruction: 0x000344b8
   1316c:	andeq	lr, r1, r0, lsr #13
   13170:	andeq	lr, r1, r0, asr #13
   13174:	andeq	r5, r3, ip, lsr r4
   13178:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1317c:	ldr	r9, [pc, #224]	; 13264 <bfd_arch_bits_per_address@plt+0x1eb0>
   13180:	ldr	r8, [r9, #4]
   13184:	ldr	r3, [r9, #8]
   13188:	cmp	r8, r3
   1318c:	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   13190:	ldr	r6, [pc, #208]	; 13268 <bfd_arch_bits_per_address@plt+0x1eb4>
   13194:	ldr	r7, [pc, #208]	; 1326c <bfd_arch_bits_per_address@plt+0x1eb8>
   13198:	mov	sl, r1
   1319c:	mov	r5, r0
   131a0:	ldr	r4, [r8, #208]	; 0xd0
   131a4:	cmp	r4, #0
   131a8:	bne	131bc <bfd_arch_bits_per_address@plt+0x1e08>
   131ac:	b	13240 <bfd_arch_bits_per_address@plt+0x1e8c>
   131b0:	ldr	r4, [r4, #36]	; 0x24
   131b4:	cmp	r4, #0
   131b8:	beq	13240 <bfd_arch_bits_per_address@plt+0x1e8c>
   131bc:	mov	r1, #1
   131c0:	mov	r0, r5
   131c4:	bl	17eac <bfd_arch_bits_per_address@plt+0x6af8>
   131c8:	cmp	r0, #0
   131cc:	bne	13254 <bfd_arch_bits_per_address@plt+0x1ea0>
   131d0:	ldr	r3, [r4]
   131d4:	mov	r0, r5
   131d8:	ldr	r1, [r3]
   131dc:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   131e0:	cmp	r0, #0
   131e4:	bne	13254 <bfd_arch_bits_per_address@plt+0x1ea0>
   131e8:	ldr	r3, [r4, #4]
   131ec:	mov	r0, r5
   131f0:	ldr	r1, [r3]
   131f4:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   131f8:	cmp	r0, #0
   131fc:	bne	13254 <bfd_arch_bits_per_address@plt+0x1ea0>
   13200:	ldr	r1, [r4, #8]
   13204:	mov	r0, r5
   13208:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   1320c:	cmp	r0, #0
   13210:	bne	13254 <bfd_arch_bits_per_address@plt+0x1ea0>
   13214:	ldr	r3, [r6]
   13218:	tst	r3, #64	; 0x40
   1321c:	beq	131b0 <bfd_arch_bits_per_address@plt+0x1dfc>
   13220:	ldm	r4, {r1, r2, r3}
   13224:	mov	r0, r7
   13228:	ldr	r2, [r2]
   1322c:	ldr	r1, [r1]
   13230:	bl	11090 <printf@plt>
   13234:	ldr	r4, [r4, #36]	; 0x24
   13238:	cmp	r4, #0
   1323c:	bne	131bc <bfd_arch_bits_per_address@plt+0x1e08>
   13240:	ldr	r3, [r9, #8]
   13244:	add	r8, r8, #216	; 0xd8
   13248:	cmp	r3, r8
   1324c:	bhi	131a0 <bfd_arch_bits_per_address@plt+0x1dec>
   13250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13254:	mov	r0, sl
   13258:	bl	1115c <perror@plt>
   1325c:	mov	r0, #1
   13260:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   13264:	andeq	r5, r3, r0, asr r4
   13268:	andeq	r5, r3, r0, lsr #2
   1326c:	ldrdeq	lr, [r1], -ip
   13270:	ldr	r2, [r0]
   13274:	ldr	r3, [r1]
   13278:	ldr	r0, [r2, #156]	; 0x9c
   1327c:	ldr	r3, [r3, #156]	; 0x9c
   13280:	sub	r0, r0, r3
   13284:	bx	lr
   13288:	ldr	r3, [r0]
   1328c:	ldr	r2, [r1]
   13290:	vldr	d7, [r3, #176]	; 0xb0
   13294:	vldr	d4, [r3, #184]	; 0xb8
   13298:	vldr	d6, [r2, #176]	; 0xb0
   1329c:	vldr	d5, [r2, #184]	; 0xb8
   132a0:	vadd.f64	d7, d7, d4
   132a4:	vadd.f64	d6, d6, d5
   132a8:	vsub.f64	d7, d7, d6
   132ac:	vcmpe.f64	d7, #0.0
   132b0:	vmrs	APSR_nzcv, fpscr
   132b4:	bmi	1330c <bfd_arch_bits_per_address@plt+0x1f58>
   132b8:	bgt	13350 <bfd_arch_bits_per_address@plt+0x1f9c>
   132bc:	ldr	r0, [r3, #8]
   132c0:	cmp	r0, #0
   132c4:	beq	13324 <bfd_arch_bits_per_address@plt+0x1f70>
   132c8:	ldr	r1, [r2, #8]
   132cc:	cmp	r1, #0
   132d0:	beq	1330c <bfd_arch_bits_per_address@plt+0x1f58>
   132d4:	push	{lr}		; (str lr, [sp, #-4]!)
   132d8:	ldrb	ip, [r0]
   132dc:	ldrb	lr, [r1]
   132e0:	cmp	ip, #95	; 0x5f
   132e4:	beq	13314 <bfd_arch_bits_per_address@plt+0x1f60>
   132e8:	cmp	lr, #95	; 0x5f
   132ec:	beq	13358 <bfd_arch_bits_per_address@plt+0x1fa4>
   132f0:	ldr	ip, [r3, #24]
   132f4:	ldr	r3, [r2, #24]
   132f8:	cmp	ip, r3
   132fc:	bhi	13358 <bfd_arch_bits_per_address@plt+0x1fa4>
   13300:	bcc	1331c <bfd_arch_bits_per_address@plt+0x1f68>
   13304:	pop	{lr}		; (ldr lr, [sp], #4)
   13308:	b	11078 <strcmp@plt>
   1330c:	mov	r0, #1
   13310:	bx	lr
   13314:	cmp	lr, #95	; 0x5f
   13318:	beq	132f0 <bfd_arch_bits_per_address@plt+0x1f3c>
   1331c:	mov	r0, #1
   13320:	pop	{pc}		; (ldr pc, [sp], #4)
   13324:	ldr	r3, [r3, #192]	; 0xc0
   13328:	cmp	r3, #0
   1332c:	bne	13350 <bfd_arch_bits_per_address@plt+0x1f9c>
   13330:	ldr	r3, [r2, #8]
   13334:	cmp	r3, #0
   13338:	bne	13350 <bfd_arch_bits_per_address@plt+0x1f9c>
   1333c:	ldr	r3, [r2, #192]	; 0xc0
   13340:	cmp	r3, #0
   13344:	mvneq	r0, #0
   13348:	movne	r0, #1
   1334c:	bx	lr
   13350:	mvn	r0, #0
   13354:	bx	lr
   13358:	mvn	r0, #0
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	cmp	r1, #0
   13364:	cmpne	r0, #0
   13368:	push	{r4, r5, r6, r7, r8, lr}
   1336c:	beq	133f4 <bfd_arch_bits_per_address@plt+0x2040>
   13370:	ldr	r6, [pc, #176]	; 13428 <bfd_arch_bits_per_address@plt+0x2074>
   13374:	mov	r4, r0
   13378:	mov	r5, r1
   1337c:	ldr	r3, [r6]
   13380:	tst	r3, #512	; 0x200
   13384:	bne	13414 <bfd_arch_bits_per_address@plt+0x2060>
   13388:	ldr	r4, [r4, #208]	; 0xd0
   1338c:	cmp	r4, #0
   13390:	beq	13408 <bfd_arch_bits_per_address@plt+0x2054>
   13394:	ldr	r7, [pc, #144]	; 1342c <bfd_arch_bits_per_address@plt+0x2078>
   13398:	b	133c8 <bfd_arch_bits_per_address@plt+0x2014>
   1339c:	ldr	r1, [r5]
   133a0:	ldr	r2, [r3]
   133a4:	cmp	r1, r2
   133a8:	bcc	133bc <bfd_arch_bits_per_address@plt+0x2008>
   133ac:	ldr	r2, [r5, #4]
   133b0:	ldr	r3, [r3, #4]
   133b4:	cmp	r2, r3
   133b8:	bls	13400 <bfd_arch_bits_per_address@plt+0x204c>
   133bc:	ldr	r4, [r4, #36]	; 0x24
   133c0:	cmp	r4, #0
   133c4:	beq	13408 <bfd_arch_bits_per_address@plt+0x2054>
   133c8:	ldr	r2, [r6]
   133cc:	ldr	r3, [r4, #4]
   133d0:	tst	r2, #512	; 0x200
   133d4:	beq	1339c <bfd_arch_bits_per_address@plt+0x1fe8>
   133d8:	ldr	r1, [r4]
   133dc:	ldr	r2, [r3, #8]
   133e0:	mov	r0, r7
   133e4:	ldr	r1, [r1, #8]
   133e8:	bl	11090 <printf@plt>
   133ec:	ldr	r3, [r4, #4]
   133f0:	b	1339c <bfd_arch_bits_per_address@plt+0x1fe8>
   133f4:	ldr	r0, [pc, #52]	; 13430 <bfd_arch_bits_per_address@plt+0x207c>
   133f8:	bl	111ec <puts@plt>
   133fc:	mov	r4, #0
   13400:	mov	r0, r4
   13404:	pop	{r4, r5, r6, r7, r8, pc}
   13408:	mov	r4, #0
   1340c:	mov	r0, r4
   13410:	pop	{r4, r5, r6, r7, r8, pc}
   13414:	ldr	r2, [r1, #8]
   13418:	ldr	r1, [r0, #8]
   1341c:	ldr	r0, [pc, #16]	; 13434 <bfd_arch_bits_per_address@plt+0x2080>
   13420:	bl	11090 <printf@plt>
   13424:	b	13388 <bfd_arch_bits_per_address@plt+0x1fd4>
   13428:	andeq	r5, r3, r0, lsr #2
   1342c:	andeq	lr, r1, r0, ror #18
   13430:	andeq	lr, r1, r4, lsl r9
   13434:	andeq	lr, r1, ip, lsr r9
   13438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1343c:	mov	r5, r0
   13440:	ldr	r7, [pc, #300]	; 13574 <bfd_arch_bits_per_address@plt+0x21c0>
   13444:	mov	r4, r1
   13448:	mov	r8, r2
   1344c:	ldr	r3, [r7]
   13450:	tst	r3, #16
   13454:	bne	1349c <bfd_arch_bits_per_address@plt+0x20e8>
   13458:	mov	r1, r4
   1345c:	mov	r0, r5
   13460:	bl	13360 <bfd_arch_bits_per_address@plt+0x1fac>
   13464:	subs	r6, r0, #0
   13468:	beq	134b4 <bfd_arch_bits_per_address@plt+0x2100>
   1346c:	ldr	r3, [r7]
   13470:	ldr	r1, [r6, #8]
   13474:	tst	r3, #16
   13478:	bne	13488 <bfd_arch_bits_per_address@plt+0x20d4>
   1347c:	add	r1, r8, r1
   13480:	str	r1, [r6, #8]
   13484:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13488:	mov	r2, r8
   1348c:	ldr	r0, [pc, #228]	; 13578 <bfd_arch_bits_per_address@plt+0x21c4>
   13490:	bl	11090 <printf@plt>
   13494:	ldr	r1, [r6, #8]
   13498:	b	1347c <bfd_arch_bits_per_address@plt+0x20c8>
   1349c:	ldr	r3, [r1, #8]
   134a0:	ldr	r2, [r0, #8]
   134a4:	mov	r1, r8
   134a8:	ldr	r0, [pc, #204]	; 1357c <bfd_arch_bits_per_address@plt+0x21c8>
   134ac:	bl	11090 <printf@plt>
   134b0:	b	13458 <bfd_arch_bits_per_address@plt+0x20a4>
   134b4:	mov	r0, #48	; 0x30
   134b8:	bl	11180 <xmalloc@plt>
   134bc:	mov	r1, r6
   134c0:	mov	r2, #36	; 0x24
   134c4:	mov	r7, r0
   134c8:	add	r0, r0, #12
   134cc:	bl	11288 <memset@plt>
   134d0:	cmp	r5, r4
   134d4:	str	r5, [r7]
   134d8:	stmib	r7, {r4, r8}
   134dc:	beq	1350c <bfd_arch_bits_per_address@plt+0x2158>
   134e0:	ldr	r6, [pc, #152]	; 13580 <bfd_arch_bits_per_address@plt+0x21cc>
   134e4:	ldr	r3, [pc, #152]	; 13584 <bfd_arch_bits_per_address@plt+0x21d0>
   134e8:	ldr	r0, [r6]
   134ec:	ldr	r2, [r3]
   134f0:	cmp	r0, r2
   134f4:	beq	13528 <bfd_arch_bits_per_address@plt+0x2174>
   134f8:	ldr	r3, [pc, #136]	; 13588 <bfd_arch_bits_per_address@plt+0x21d4>
   134fc:	ldr	r8, [r3]
   13500:	add	r3, r0, #1
   13504:	str	r3, [r6]
   13508:	str	r7, [r8, r0, lsl #2]
   1350c:	ldr	r2, [r5, #208]	; 0xd0
   13510:	ldr	r3, [r4, #204]	; 0xcc
   13514:	str	r2, [r7, #36]	; 0x24
   13518:	str	r7, [r5, #208]	; 0xd0
   1351c:	str	r3, [r7, #32]
   13520:	str	r7, [r4, #204]	; 0xcc
   13524:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13528:	cmp	r0, #0
   1352c:	lslne	r2, r0, #1
   13530:	moveq	r2, #2
   13534:	lslne	r0, r0, #3
   13538:	moveq	r0, #8
   1353c:	str	r2, [r3]
   13540:	bl	11180 <xmalloc@plt>
   13544:	ldr	r9, [pc, #60]	; 13588 <bfd_arch_bits_per_address@plt+0x21d4>
   13548:	ldr	r2, [r6]
   1354c:	ldr	sl, [r9]
   13550:	lsl	r2, r2, #2
   13554:	mov	r1, sl
   13558:	mov	r8, r0
   1355c:	bl	110e4 <memcpy@plt>
   13560:	mov	r0, sl
   13564:	bl	110a8 <free@plt>
   13568:	ldr	r0, [r6]
   1356c:	str	r8, [r9]
   13570:	b	13500 <bfd_arch_bits_per_address@plt+0x214c>
   13574:	andeq	r5, r3, r0, lsr #2
   13578:	andeq	lr, r1, r8, lsr #19
   1357c:	andeq	lr, r1, r4, lsl #19
   13580:	andeq	r5, r3, r0, lsl r4
   13584:	andeq	r4, r3, r4, ror #9
   13588:	andeq	r5, r3, r8, lsl r4
   1358c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13590:	vpush	{d8-d9}
   13594:	ldr	r6, [pc, #1308]	; 13ab8 <bfd_arch_bits_per_address@plt+0x2704>
   13598:	ldr	r4, [r6, #4]
   1359c:	ldr	r3, [r6, #8]
   135a0:	sub	sp, sp, #36	; 0x24
   135a4:	cmp	r4, r3
   135a8:	bcs	13f74 <bfd_arch_bits_per_address@plt+0x2bc0>
   135ac:	mov	r8, #0
   135b0:	mov	r9, #0
   135b4:	ldr	r7, [pc, #1280]	; 13abc <bfd_arch_bits_per_address@plt+0x2708>
   135b8:	mov	r5, #0
   135bc:	b	135d0 <bfd_arch_bits_per_address@plt+0x221c>
   135c0:	ldr	r3, [r6, #8]
   135c4:	add	r4, r4, #216	; 0xd8
   135c8:	cmp	r3, r4
   135cc:	bls	13640 <bfd_arch_bits_per_address@plt+0x228c>
   135d0:	strd	r8, [r4, #144]	; 0x90
   135d4:	mov	r1, r4
   135d8:	mov	r0, r4
   135dc:	bl	13360 <bfd_arch_bits_per_address@plt+0x1fac>
   135e0:	cmp	r0, #0
   135e4:	beq	135f4 <bfd_arch_bits_per_address@plt+0x2240>
   135e8:	ldr	r3, [r0, #4]
   135ec:	cmp	r3, r4
   135f0:	beq	13d28 <bfd_arch_bits_per_address@plt+0x2974>
   135f4:	str	r5, [r4, #136]	; 0x88
   135f8:	str	r5, [r4, #160]	; 0xa0
   135fc:	str	r5, [r4, #156]	; 0x9c
   13600:	str	r5, [r4, #192]	; 0xc0
   13604:	ldr	r3, [r7]
   13608:	strd	r8, [r4, #168]	; 0xa8
   1360c:	cmp	r3, #0
   13610:	strd	r8, [r4, #176]	; 0xb0
   13614:	strd	r8, [r4, #184]	; 0xb8
   13618:	strd	r4, [r4, #196]	; 0xc4
   1361c:	beq	135c0 <bfd_arch_bits_per_address@plt+0x220c>
   13620:	ldr	r2, [r4, #216]	; 0xd8
   13624:	ldr	r1, [r4]
   13628:	mov	r0, r4
   1362c:	bl	16e5c <bfd_arch_bits_per_address@plt+0x5aa8>
   13630:	ldr	r3, [r6, #8]
   13634:	add	r4, r4, #216	; 0xd8
   13638:	cmp	r3, r4
   1363c:	bhi	135d0 <bfd_arch_bits_per_address@plt+0x221c>
   13640:	ldr	r4, [r6, #4]
   13644:	cmp	r3, r4
   13648:	bhi	13660 <bfd_arch_bits_per_address@plt+0x22ac>
   1364c:	b	13f74 <bfd_arch_bits_per_address@plt+0x2bc0>
   13650:	ldr	r2, [r6, #8]
   13654:	add	r4, r4, #216	; 0xd8
   13658:	cmp	r2, r4
   1365c:	bls	13684 <bfd_arch_bits_per_address@plt+0x22d0>
   13660:	ldr	r3, [r4, #156]	; 0x9c
   13664:	cmp	r3, #0
   13668:	bne	13650 <bfd_arch_bits_per_address@plt+0x229c>
   1366c:	mov	r0, r4
   13670:	bl	14030 <bfd_arch_bits_per_address@plt+0x2c7c>
   13674:	ldr	r2, [r6, #8]
   13678:	add	r4, r4, #216	; 0xd8
   1367c:	cmp	r2, r4
   13680:	bhi	13660 <bfd_arch_bits_per_address@plt+0x22ac>
   13684:	ldr	r1, [pc, #1156]	; 13b10 <bfd_arch_bits_per_address@plt+0x275c>
   13688:	ldr	r3, [r6, #4]
   1368c:	mov	r0, #0
   13690:	cmp	r2, r3
   13694:	str	r1, [sp, #28]
   13698:	str	r0, [r1]
   1369c:	movhi	ip, r0
   136a0:	bhi	136b4 <bfd_arch_bits_per_address@plt+0x2300>
   136a4:	b	13f88 <bfd_arch_bits_per_address@plt+0x2bd4>
   136a8:	add	r3, r3, #216	; 0xd8
   136ac:	cmp	r2, r3
   136b0:	bls	136dc <bfd_arch_bits_per_address@plt+0x2328>
   136b4:	ldr	r1, [r3, #196]	; 0xc4
   136b8:	cmp	r1, r3
   136bc:	bne	136a8 <bfd_arch_bits_per_address@plt+0x22f4>
   136c0:	ldr	r1, [r3, #200]	; 0xc8
   136c4:	add	r3, r3, #216	; 0xd8
   136c8:	cmp	r1, #0
   136cc:	addne	ip, ip, #1
   136d0:	movne	r0, #1
   136d4:	cmp	r2, r3
   136d8:	bhi	136b4 <bfd_arch_bits_per_address@plt+0x2300>
   136dc:	cmp	r0, #0
   136e0:	beq	13f88 <bfd_arch_bits_per_address@plt+0x2bd4>
   136e4:	add	r0, ip, #1
   136e8:	ldr	r3, [sp, #28]
   136ec:	add	r0, r0, r0, lsl #1
   136f0:	add	r0, r0, r0, lsl #3
   136f4:	str	ip, [r3]
   136f8:	lsl	r0, r0, #3
   136fc:	bl	11180 <xmalloc@plt>
   13700:	ldr	r4, [r6, #4]
   13704:	ldr	r3, [r6, #8]
   13708:	ldr	r2, [pc, #1040]	; 13b20 <bfd_arch_bits_per_address@plt+0x276c>
   1370c:	cmp	r4, r3
   13710:	ldr	r7, [pc, #936]	; 13ac0 <bfd_arch_bits_per_address@plt+0x270c>
   13714:	mov	r5, r0
   13718:	str	r0, [r2]
   1371c:	bcs	13810 <bfd_arch_bits_per_address@plt+0x245c>
   13720:	ldr	sl, [pc, #924]	; 13ac4 <bfd_arch_bits_per_address@plt+0x2710>
   13724:	mov	fp, #0
   13728:	mov	r8, #1
   1372c:	b	13740 <bfd_arch_bits_per_address@plt+0x238c>
   13730:	ldr	r3, [r6, #8]
   13734:	add	r4, r4, #216	; 0xd8
   13738:	cmp	r4, r3
   1373c:	bcs	13810 <bfd_arch_bits_per_address@plt+0x245c>
   13740:	ldr	r3, [r4, #196]	; 0xc4
   13744:	cmp	r3, r4
   13748:	bne	13730 <bfd_arch_bits_per_address@plt+0x237c>
   1374c:	ldr	r3, [r4, #200]	; 0xc8
   13750:	cmp	r3, #0
   13754:	beq	13730 <bfd_arch_bits_per_address@plt+0x237c>
   13758:	add	r9, r5, #216	; 0xd8
   1375c:	mov	r0, r9
   13760:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   13764:	ldr	r3, [r7]
   13768:	add	fp, fp, #1
   1376c:	tst	r3, #4
   13770:	mov	r3, #0
   13774:	str	fp, [r5, #408]	; 0x198
   13778:	str	r9, [r5, #412]	; 0x19c
   1377c:	str	r8, [r5, #376]	; 0x178
   13780:	str	r4, [r5, #416]	; 0x1a0
   13784:	str	r3, [r5, #372]	; 0x174
   13788:	bne	13f54 <bfd_arch_bits_per_address@plt+0x2ba0>
   1378c:	mov	r3, r4
   13790:	str	fp, [r3, #192]	; 0xc0
   13794:	str	r9, [r3, #196]	; 0xc4
   13798:	ldr	r3, [r3, #200]	; 0xc8
   1379c:	cmp	r3, #0
   137a0:	bne	13790 <bfd_arch_bits_per_address@plt+0x23dc>
   137a4:	mov	r2, r4
   137a8:	ldr	r3, [r2, #204]	; 0xcc
   137ac:	cmp	r3, #0
   137b0:	beq	137f0 <bfd_arch_bits_per_address@plt+0x243c>
   137b4:	ldr	r1, [r3]
   137b8:	cmp	r1, r2
   137bc:	beq	137e4 <bfd_arch_bits_per_address@plt+0x2430>
   137c0:	ldr	r1, [r1, #192]	; 0xc0
   137c4:	ldr	r0, [r3, #8]
   137c8:	cmp	fp, r1
   137cc:	ldreq	r1, [r5, #352]	; 0x160
   137d0:	ldrne	r1, [r5, #240]	; 0xf0
   137d4:	addeq	r1, r1, r0
   137d8:	addne	r1, r1, r0
   137dc:	streq	r1, [r5, #352]	; 0x160
   137e0:	strne	r1, [r5, #240]	; 0xf0
   137e4:	ldr	r3, [r3, #32]
   137e8:	cmp	r3, #0
   137ec:	bne	137b4 <bfd_arch_bits_per_address@plt+0x2400>
   137f0:	ldr	r2, [r2, #200]	; 0xc8
   137f4:	cmp	r2, #0
   137f8:	bne	137a8 <bfd_arch_bits_per_address@plt+0x23f4>
   137fc:	ldr	r3, [r6, #8]
   13800:	add	r4, r4, #216	; 0xd8
   13804:	cmp	r4, r3
   13808:	mov	r5, r9
   1380c:	bcc	13740 <bfd_arch_bits_per_address@plt+0x238c>
   13810:	ldr	r0, [r6]
   13814:	lsl	r0, r0, #2
   13818:	bl	11180 <xmalloc@plt>
   1381c:	ldr	r1, [r6]
   13820:	cmp	r1, #0
   13824:	str	r0, [sp, #24]
   13828:	beq	1384c <bfd_arch_bits_per_address@plt+0x2498>
   1382c:	ldr	r0, [sp, #24]
   13830:	ldr	r2, [r6, #4]
   13834:	mov	r3, r0
   13838:	add	r0, r0, r1, lsl #2
   1383c:	str	r2, [r3], #4
   13840:	cmp	r0, r3
   13844:	add	r2, r2, #216	; 0xd8
   13848:	bne	1383c <bfd_arch_bits_per_address@plt+0x2488>
   1384c:	ldr	r3, [pc, #628]	; 13ac8 <bfd_arch_bits_per_address@plt+0x2714>
   13850:	mov	r2, #4
   13854:	ldr	r0, [sp, #24]
   13858:	bl	11354 <qsort@plt>
   1385c:	ldr	r3, [r7]
   13860:	tst	r3, #2
   13864:	ldreq	r8, [r6]
   13868:	bne	13f90 <bfd_arch_bits_per_address@plt+0x2bdc>
   1386c:	subs	r9, r8, #1
   13870:	bmi	139f8 <bfd_arch_bits_per_address@plt+0x2644>
   13874:	ldr	r3, [sp, #24]
   13878:	vldr	d9, [pc, #552]	; 13aa8 <bfd_arch_bits_per_address@plt+0x26f4>
   1387c:	vldr	d8, [pc, #556]	; 13ab0 <bfd_arch_bits_per_address@plt+0x26fc>
   13880:	ldr	sl, [pc, #580]	; 13acc <bfd_arch_bits_per_address@plt+0x2718>
   13884:	add	r8, r3, r8, lsl #2
   13888:	mov	fp, #0
   1388c:	ldr	r4, [r8, #-4]!
   13890:	ldr	ip, [r7]
   13894:	ldr	r5, [r4, #196]	; 0xc4
   13898:	and	ip, ip, #1024	; 0x400
   1389c:	cmp	r5, fp
   138a0:	beq	13d70 <bfd_arch_bits_per_address@plt+0x29bc>
   138a4:	cmp	r4, r5
   138a8:	beq	13e54 <bfd_arch_bits_per_address@plt+0x2aa0>
   138ac:	ldr	r1, [r5, #200]	; 0xc8
   138b0:	mov	r2, #0
   138b4:	cmp	r1, r2
   138b8:	vstr	d9, [r5, #168]	; 0xa8
   138bc:	str	r2, [r5, #160]	; 0xa0
   138c0:	beq	13968 <bfd_arch_bits_per_address@plt+0x25b4>
   138c4:	vldr	d7, [pc, #476]	; 13aa8 <bfd_arch_bits_per_address@plt+0x26f4>
   138c8:	mov	r0, r1
   138cc:	ldr	r3, [r0, #204]	; 0xcc
   138d0:	cmp	r3, #0
   138d4:	beq	13934 <bfd_arch_bits_per_address@plt+0x2580>
   138d8:	str	r1, [sp, #20]
   138dc:	ldr	lr, [r3]
   138e0:	ldr	fp, [lr, #196]	; 0xc4
   138e4:	cmp	r5, fp
   138e8:	beq	13924 <bfd_arch_bits_per_address@plt+0x2570>
   138ec:	ldr	r1, [lr, #160]	; 0xa0
   138f0:	ldr	fp, [r5, #24]
   138f4:	orr	r2, r2, r1
   138f8:	cmp	fp, #0
   138fc:	str	r2, [r5, #160]	; 0xa0
   13900:	beq	13924 <bfd_arch_bits_per_address@plt+0x2570>
   13904:	vldr	s11, [r3, #8]
   13908:	vmov	s13, fp
   1390c:	vldr	d4, [lr, #168]	; 0xa8
   13910:	vcvt.f64.u32	d5, s11
   13914:	vcvt.f64.u32	d6, s13
   13918:	vdiv.f64	d3, d5, d6
   1391c:	vmla.f64	d7, d3, d4
   13920:	vstr	d7, [r5, #168]	; 0xa8
   13924:	ldr	r3, [r3, #32]
   13928:	cmp	r3, #0
   1392c:	bne	138dc <bfd_arch_bits_per_address@plt+0x2528>
   13930:	ldr	r1, [sp, #20]
   13934:	ldr	r0, [r0, #200]	; 0xc8
   13938:	cmp	r0, #0
   1393c:	bne	138cc <bfd_arch_bits_per_address@plt+0x2518>
   13940:	mov	r3, r5
   13944:	b	13958 <bfd_arch_bits_per_address@plt+0x25a4>
   13948:	vldr	d7, [r5, #168]	; 0xa8
   1394c:	mov	r3, r1
   13950:	ldr	r2, [r5, #160]	; 0xa0
   13954:	ldr	r1, [r1, #200]	; 0xc8
   13958:	cmp	r1, #0
   1395c:	str	r2, [r3, #160]	; 0xa0
   13960:	vstr	d7, [r3, #168]	; 0xa8
   13964:	bne	13948 <bfd_arch_bits_per_address@plt+0x2594>
   13968:	cmp	ip, #0
   1396c:	bne	13d7c <bfd_arch_bits_per_address@plt+0x29c8>
   13970:	ldr	r3, [r4, #160]	; 0xa0
   13974:	ldr	r1, [r4]
   13978:	cmp	r3, #0
   1397c:	bne	13d54 <bfd_arch_bits_per_address@plt+0x29a0>
   13980:	ldr	r0, [pc, #376]	; 13b00 <bfd_arch_bits_per_address@plt+0x274c>
   13984:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   13988:	cmp	r0, #0
   1398c:	beq	13ec8 <bfd_arch_bits_per_address@plt+0x2b14>
   13990:	ldr	r1, [r4]
   13994:	mov	fp, r5
   13998:	mov	r3, #1
   1399c:	str	r3, [r4, #160]	; 0xa0
   139a0:	vldr	d7, [r4, #168]	; 0xa8
   139a4:	ldr	r0, [pc, #292]	; 13ad0 <bfd_arch_bits_per_address@plt+0x271c>
   139a8:	vcmp.f64	d7, #0.0
   139ac:	vmrs	APSR_nzcv, fpscr
   139b0:	bne	13d40 <bfd_arch_bits_per_address@plt+0x298c>
   139b4:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   139b8:	cmp	r0, #0
   139bc:	beq	13ef4 <bfd_arch_bits_per_address@plt+0x2b40>
   139c0:	vstr	d8, [r4, #168]	; 0xa8
   139c4:	vmov.f64	d7, d8
   139c8:	vldr	d5, [r4, #120]	; 0x78
   139cc:	vldr	d6, [sl]
   139d0:	ldr	r3, [r7]
   139d4:	vmul.f64	d7, d7, d5
   139d8:	tst	r3, #1024	; 0x400
   139dc:	vadd.f64	d6, d6, d7
   139e0:	vstr	d7, [r4, #176]	; 0xb0
   139e4:	vstr	d6, [sl]
   139e8:	bne	13e14 <bfd_arch_bits_per_address@plt+0x2a60>
   139ec:	subs	r9, r9, #1
   139f0:	bcs	1388c <bfd_arch_bits_per_address@plt+0x24d8>
   139f4:	ldr	r8, [r6]
   139f8:	ldr	r3, [sp, #28]
   139fc:	ldr	r4, [r3]
   13a00:	ldr	r3, [pc, #280]	; 13b20 <bfd_arch_bits_per_address@plt+0x276c>
   13a04:	add	r2, r4, r4, lsl #1
   13a08:	ldr	r1, [r3]
   13a0c:	add	r2, r2, r2, lsl #3
   13a10:	add	r3, r1, #216	; 0xd8
   13a14:	add	r1, r1, r2, lsl #3
   13a18:	cmp	r3, r1
   13a1c:	bhi	13a6c <bfd_arch_bits_per_address@plt+0x26b8>
   13a20:	ldr	r2, [r3, #200]	; 0xc8
   13a24:	vldr	d7, [r3, #120]	; 0x78
   13a28:	cmp	r2, #0
   13a2c:	beq	13a54 <bfd_arch_bits_per_address@plt+0x26a0>
   13a30:	vldr	d6, [r2, #168]	; 0xa8
   13a34:	vcmp.f64	d6, #0.0
   13a38:	vmrs	APSR_nzcv, fpscr
   13a3c:	vldrne	d6, [r2, #120]	; 0x78
   13a40:	ldr	r2, [r2, #200]	; 0xc8
   13a44:	vaddne.f64	d7, d7, d6
   13a48:	vstrne	d7, [r3, #120]	; 0x78
   13a4c:	cmp	r2, #0
   13a50:	bne	13a30 <bfd_arch_bits_per_address@plt+0x267c>
   13a54:	vldr	d6, [r3, #168]	; 0xa8
   13a58:	add	r3, r3, #216	; 0xd8
   13a5c:	vmul.f64	d7, d6, d7
   13a60:	vstr	d7, [r3, #-40]	; 0xffffffd8
   13a64:	cmp	r1, r3
   13a68:	bcs	13a20 <bfd_arch_bits_per_address@plt+0x266c>
   13a6c:	cmp	r8, #0
   13a70:	beq	13c64 <bfd_arch_bits_per_address@plt+0x28b0>
   13a74:	ldr	r3, [sp, #24]
   13a78:	mov	r9, #0
   13a7c:	sub	sl, r3, #4
   13a80:	ldr	r4, [sl, #4]!
   13a84:	vldr	d7, [r4, #168]	; 0xa8
   13a88:	vcmp.f64	d7, #0.0
   13a8c:	vmrs	APSR_nzcv, fpscr
   13a90:	beq	13c48 <bfd_arch_bits_per_address@plt+0x2894>
   13a94:	ldr	r5, [r4, #208]	; 0xd0
   13a98:	cmp	r5, #0
   13a9c:	bne	13be4 <bfd_arch_bits_per_address@plt+0x2830>
   13aa0:	b	13c48 <bfd_arch_bits_per_address@plt+0x2894>
   13aa4:	nop			; (mov r0, r0)
	...
   13ab4:	svccc	0x00f00000	; IMB
   13ab8:	andeq	r5, r3, r0, asr r4
   13abc:	andeq	r5, r3, ip, lsl r1
   13ac0:	andeq	r5, r3, r0, lsr #2
   13ac4:	andeq	lr, r1, r0, asr #19
   13ac8:	andeq	r3, r1, r0, ror r2
   13acc:	strdeq	r4, [r3], -r8
   13ad0:	andeq	r5, r3, r4, lsr #9
   13ad4:	andeq	r3, r1, r8, lsl #5
   13ad8:	andeq	lr, r1, r8, lsr sl
   13adc:			; <UNDEFINED> instruction: 0x000344b8
   13ae0:	andeq	lr, r1, r4, asr #21
   13ae4:	andeq	lr, r1, r4, ror #21
   13ae8:	strdeq	lr, [r1], -r8
   13aec:	andeq	lr, r1, r0, lsl fp
   13af0:	andeq	lr, r1, r4, lsr #22
   13af4:	andeq	lr, r1, r8, lsr #20
   13af8:	andeq	lr, r1, r4, ror #20
   13afc:	muleq	r1, r4, sl
   13b00:	andeq	r5, r3, ip, asr r4
   13b04:			; <UNDEFINED> instruction: 0x000354b0
   13b08:	andeq	r5, r3, r8, ror #8
   13b0c:	ldrdeq	lr, [r1], -r0
   13b10:	andeq	r5, r3, ip, lsl r4
   13b14:	andeq	lr, r1, ip, ror #19
   13b18:	andeq	lr, r1, r4, lsl sl
   13b1c:	andeq	lr, r1, r4, lsr #20
   13b20:	andeq	r5, r3, r4, lsl r4
   13b24:	ldr	r2, [r4, #192]	; 0xc0
   13b28:	ldr	r3, [r8, #192]	; 0xc0
   13b2c:	cmp	r2, r3
   13b30:	beq	13bd8 <bfd_arch_bits_per_address@plt+0x2824>
   13b34:	ldr	r2, [r4, #156]	; 0x9c
   13b38:	ldr	r3, [r8, #156]	; 0x9c
   13b3c:	cmp	r2, r3
   13b40:	ble	13da0 <bfd_arch_bits_per_address@plt+0x29ec>
   13b44:	ldr	r3, [fp, #24]
   13b48:	cmp	r3, #0
   13b4c:	beq	13bd8 <bfd_arch_bits_per_address@plt+0x2824>
   13b50:	vmov	s15, r3
   13b54:	vldr	d3, [fp, #144]	; 0x90
   13b58:	vldr	d8, [fp, #120]	; 0x78
   13b5c:	vldr	d4, [r4, #168]	; 0xa8
   13b60:	vcvt.f64.u32	d2, s15
   13b64:	vldr	s15, [r5, #8]
   13b68:	vldr	d6, [r4, #184]	; 0xb8
   13b6c:	vldr	d5, [r4, #144]	; 0x90
   13b70:	ldr	r3, [r4, #196]	; 0xc4
   13b74:	vcvt.f64.u32	d1, s15
   13b78:	cmp	r4, r3
   13b7c:	vdiv.f64	d7, d1, d2
   13b80:	vmul.f64	d8, d7, d8
   13b84:	vmul.f64	d7, d7, d3
   13b88:	vmul.f64	d3, d8, d4
   13b8c:	vadd.f64	d8, d8, d7
   13b90:	vmul.f64	d7, d7, d4
   13b94:	vmul.f64	d4, d8, d4
   13b98:	vadd.f64	d5, d5, d8
   13b9c:	vadd.f64	d6, d6, d4
   13ba0:	vstr	d5, [r4, #144]	; 0x90
   13ba4:	vstr	d6, [r4, #184]	; 0xb8
   13ba8:	vstr	d3, [r5, #16]
   13bac:	vstr	d7, [r5, #24]
   13bb0:	beq	13bcc <bfd_arch_bits_per_address@plt+0x2818>
   13bb4:	vldr	d6, [r3, #144]	; 0x90
   13bb8:	vldr	d7, [r3, #184]	; 0xb8
   13bbc:	vadd.f64	d6, d6, d8
   13bc0:	vadd.f64	d4, d7, d4
   13bc4:	vstr	d6, [r3, #144]	; 0x90
   13bc8:	vstr	d4, [r3, #184]	; 0xb8
   13bcc:	ldr	r3, [r7]
   13bd0:	tst	r3, #1024	; 0x400
   13bd4:	bne	13dc0 <bfd_arch_bits_per_address@plt+0x2a0c>
   13bd8:	ldr	r5, [r5, #36]	; 0x24
   13bdc:	cmp	r5, #0
   13be0:	beq	13c48 <bfd_arch_bits_per_address@plt+0x2894>
   13be4:	ldr	r8, [r5, #4]
   13be8:	ldr	r3, [r5, #8]
   13bec:	cmp	r4, r8
   13bf0:	cmpne	r3, #0
   13bf4:	beq	13bd8 <bfd_arch_bits_per_address@plt+0x2824>
   13bf8:	vldr	d7, [r8, #168]	; 0xa8
   13bfc:	vcmp.f64	d7, #0.0
   13c00:	vmrs	APSR_nzcv, fpscr
   13c04:	beq	13bd8 <bfd_arch_bits_per_address@plt+0x2824>
   13c08:	ldr	fp, [r8, #196]	; 0xc4
   13c0c:	cmp	r8, fp
   13c10:	bne	13b24 <bfd_arch_bits_per_address@plt+0x2770>
   13c14:	ldr	r3, [r8, #156]	; 0x9c
   13c18:	ldr	r2, [r4, #156]	; 0x9c
   13c1c:	cmp	r2, r3
   13c20:	bgt	13b44 <bfd_arch_bits_per_address@plt+0x2790>
   13c24:	ldr	r3, [pc, #-336]	; 13adc <bfd_arch_bits_per_address@plt+0x2728>
   13c28:	mov	r2, #29
   13c2c:	mov	r1, #1
   13c30:	ldr	r3, [r3]
   13c34:	ldr	r0, [pc, #-348]	; 13ae0 <bfd_arch_bits_per_address@plt+0x272c>
   13c38:	bl	11174 <fwrite@plt>
   13c3c:	ldr	r5, [r5, #36]	; 0x24
   13c40:	cmp	r5, #0
   13c44:	bne	13be4 <bfd_arch_bits_per_address@plt+0x2830>
   13c48:	ldr	r3, [r6]
   13c4c:	add	r9, r9, #1
   13c50:	cmp	r3, r9
   13c54:	bhi	13a80 <bfd_arch_bits_per_address@plt+0x26cc>
   13c58:	ldr	r2, [sp, #28]
   13c5c:	ldr	r4, [r2]
   13c60:	add	r4, r3, r4
   13c64:	ldr	r0, [sp, #24]
   13c68:	bl	110a8 <free@plt>
   13c6c:	lsl	r0, r4, #2
   13c70:	bl	11180 <xmalloc@plt>
   13c74:	ldr	r1, [r6]
   13c78:	cmp	r1, #0
   13c7c:	mov	r4, r0
   13c80:	beq	13ca0 <bfd_arch_bits_per_address@plt+0x28ec>
   13c84:	ldr	r2, [r6, #4]
   13c88:	mov	r3, r0
   13c8c:	add	r0, r0, r1, lsl #2
   13c90:	str	r2, [r3], #4
   13c94:	cmp	r0, r3
   13c98:	add	r2, r2, #216	; 0xd8
   13c9c:	bne	13c90 <bfd_arch_bits_per_address@plt+0x28dc>
   13ca0:	ldr	r3, [sp, #28]
   13ca4:	ldr	r0, [r3]
   13ca8:	cmp	r0, #0
   13cac:	beq	13cd8 <bfd_arch_bits_per_address@plt+0x2924>
   13cb0:	ldr	r3, [pc, #-408]	; 13b20 <bfd_arch_bits_per_address@plt+0x276c>
   13cb4:	add	r2, r4, r1, lsl #2
   13cb8:	add	r1, r1, r0
   13cbc:	ldr	r3, [r3]
   13cc0:	add	r0, r4, r1, lsl #2
   13cc4:	add	r3, r3, #216	; 0xd8
   13cc8:	str	r3, [r2], #4
   13ccc:	cmp	r0, r2
   13cd0:	add	r3, r3, #216	; 0xd8
   13cd4:	bne	13cc8 <bfd_arch_bits_per_address@plt+0x2914>
   13cd8:	ldr	r3, [pc, #-524]	; 13ad4 <bfd_arch_bits_per_address@plt+0x2720>
   13cdc:	mov	r0, r4
   13ce0:	mov	r2, #4
   13ce4:	bl	11354 <qsort@plt>
   13ce8:	ldr	r3, [sp, #28]
   13cec:	ldr	r0, [r6]
   13cf0:	ldr	r3, [r3]
   13cf4:	adds	r0, r0, r3
   13cf8:	beq	13d18 <bfd_arch_bits_per_address@plt+0x2964>
   13cfc:	sub	r2, r4, #4
   13d00:	mov	r3, #0
   13d04:	ldr	r1, [r2, #4]!
   13d08:	add	r3, r3, #1
   13d0c:	cmp	r3, r0
   13d10:	str	r3, [r1, #152]	; 0x98
   13d14:	bne	13d04 <bfd_arch_bits_per_address@plt+0x2950>
   13d18:	mov	r0, r4
   13d1c:	add	sp, sp, #36	; 0x24
   13d20:	vpop	{d8-d9}
   13d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d28:	ldr	r2, [r0, #8]
   13d2c:	ldr	r3, [r4, #24]
   13d30:	str	r2, [r4, #136]	; 0x88
   13d34:	sub	r3, r3, r2
   13d38:	str	r3, [r4, #24]
   13d3c:	b	135f8 <bfd_arch_bits_per_address@plt+0x2244>
   13d40:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   13d44:	cmp	r0, #0
   13d48:	beq	13f1c <bfd_arch_bits_per_address@plt+0x2b68>
   13d4c:	vldr	d7, [r4, #168]	; 0xa8
   13d50:	b	139c8 <bfd_arch_bits_per_address@plt+0x2614>
   13d54:	ldr	r0, [pc, #-604]	; 13b00 <bfd_arch_bits_per_address@plt+0x274c>
   13d58:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   13d5c:	subs	fp, r0, #0
   13d60:	beq	13f3c <bfd_arch_bits_per_address@plt+0x2b88>
   13d64:	mov	fp, r5
   13d68:	ldr	r1, [r4]
   13d6c:	b	139a0 <bfd_arch_bits_per_address@plt+0x25ec>
   13d70:	cmp	ip, #0
   13d74:	mov	r5, fp
   13d78:	beq	13970 <bfd_arch_bits_per_address@plt+0x25bc>
   13d7c:	ldr	r0, [pc, #-656]	; 13af4 <bfd_arch_bits_per_address@plt+0x2740>
   13d80:	bl	11090 <printf@plt>
   13d84:	mov	r0, r4
   13d88:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   13d8c:	ldrd	r2, [r4, #168]	; 0xa8
   13d90:	ldr	r1, [r4, #160]	; 0xa0
   13d94:	ldr	r0, [pc, #-708]	; 13ad8 <bfd_arch_bits_per_address@plt+0x2724>
   13d98:	bl	11090 <printf@plt>
   13d9c:	b	13970 <bfd_arch_bits_per_address@plt+0x25bc>
   13da0:	ldr	r3, [pc, #-716]	; 13adc <bfd_arch_bits_per_address@plt+0x2728>
   13da4:	mov	r2, #29
   13da8:	mov	r1, #1
   13dac:	ldr	r3, [r3]
   13db0:	ldr	r0, [pc, #-728]	; 13ae0 <bfd_arch_bits_per_address@plt+0x272c>
   13db4:	bl	11174 <fwrite@plt>
   13db8:	ldr	fp, [r8, #196]	; 0xc4
   13dbc:	b	13b44 <bfd_arch_bits_per_address@plt+0x2790>
   13dc0:	ldr	r0, [pc, #-740]	; 13ae4 <bfd_arch_bits_per_address@plt+0x2730>
   13dc4:	bl	11090 <printf@plt>
   13dc8:	mov	r0, fp
   13dcc:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   13dd0:	ldr	r1, [fp, #24]
   13dd4:	ldrd	r2, [fp, #120]	; 0x78
   13dd8:	str	r1, [sp, #12]
   13ddc:	ldr	r1, [r5, #8]
   13de0:	ldr	r0, [pc, #-768]	; 13ae8 <bfd_arch_bits_per_address@plt+0x2734>
   13de4:	str	r1, [sp, #8]
   13de8:	vldr	d7, [fp, #144]	; 0x90
   13dec:	vstr	d7, [sp]
   13df0:	bl	11090 <printf@plt>
   13df4:	ldr	r0, [pc, #-784]	; 13aec <bfd_arch_bits_per_address@plt+0x2738>
   13df8:	bl	11090 <printf@plt>
   13dfc:	mov	r0, r4
   13e00:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   13e04:	vmov	r2, r3, d8
   13e08:	ldr	r0, [pc, #-800]	; 13af0 <bfd_arch_bits_per_address@plt+0x273c>
   13e0c:	bl	11090 <printf@plt>
   13e10:	b	13bd8 <bfd_arch_bits_per_address@plt+0x2824>
   13e14:	ldr	r0, [pc, #-808]	; 13af4 <bfd_arch_bits_per_address@plt+0x2740>
   13e18:	bl	11090 <printf@plt>
   13e1c:	mov	r0, r4
   13e20:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   13e24:	ldrd	r2, [r4, #168]	; 0xa8
   13e28:	ldr	r1, [r4, #160]	; 0xa0
   13e2c:	ldr	r0, [pc, #-828]	; 13af8 <bfd_arch_bits_per_address@plt+0x2744>
   13e30:	bl	11090 <printf@plt>
   13e34:	vldr	d7, [sl]
   13e38:	ldrd	r2, [r4, #120]	; 0x78
   13e3c:	ldr	r0, [pc, #-840]	; 13afc <bfd_arch_bits_per_address@plt+0x2748>
   13e40:	vstr	d7, [sp, #8]
   13e44:	ldrd	r4, [r4, #176]	; 0xb0
   13e48:	strd	r4, [sp]
   13e4c:	bl	11090 <printf@plt>
   13e50:	b	139ec <bfd_arch_bits_per_address@plt+0x2638>
   13e54:	ldr	r3, [r4, #204]	; 0xcc
   13e58:	mov	r2, #0
   13e5c:	cmp	r3, r2
   13e60:	vstr	d9, [r4, #168]	; 0xa8
   13e64:	str	r2, [r4, #160]	; 0xa0
   13e68:	beq	13ff4 <bfd_arch_bits_per_address@plt+0x2c40>
   13e6c:	ldr	r1, [r3]
   13e70:	cmp	r4, r1
   13e74:	beq	13eb8 <bfd_arch_bits_per_address@plt+0x2b04>
   13e78:	ldr	r2, [r4, #160]	; 0xa0
   13e7c:	ldr	lr, [r1, #160]	; 0xa0
   13e80:	ldr	r0, [r4, #24]
   13e84:	orr	r2, r2, lr
   13e88:	cmp	r0, #0
   13e8c:	str	r2, [r4, #160]	; 0xa0
   13e90:	beq	13eb8 <bfd_arch_bits_per_address@plt+0x2b04>
   13e94:	vldr	s13, [r3, #8]
   13e98:	vmov	s15, r0
   13e9c:	vldr	d4, [r1, #168]	; 0xa8
   13ea0:	vcvt.f64.u32	d5, s13
   13ea4:	vcvt.f64.u32	d7, s15
   13ea8:	vldr	d6, [r4, #168]	; 0xa8
   13eac:	vdiv.f64	d3, d5, d7
   13eb0:	vmla.f64	d6, d3, d4
   13eb4:	vstr	d6, [r4, #168]	; 0xa8
   13eb8:	ldr	r3, [r3, #32]
   13ebc:	cmp	r3, #0
   13ec0:	bne	13e6c <bfd_arch_bits_per_address@plt+0x2ab8>
   13ec4:	b	13968 <bfd_arch_bits_per_address@plt+0x25b4>
   13ec8:	ldr	r3, [pc, #-976]	; 13b00 <bfd_arch_bits_per_address@plt+0x274c>
   13ecc:	ldr	r1, [r4]
   13ed0:	ldr	r3, [r3]
   13ed4:	cmp	r3, #0
   13ed8:	movne	fp, r5
   13edc:	bne	139a0 <bfd_arch_bits_per_address@plt+0x25ec>
   13ee0:	ldr	r0, [pc, #-992]	; 13b08 <bfd_arch_bits_per_address@plt+0x2754>
   13ee4:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   13ee8:	cmp	r0, #0
   13eec:	bne	13d64 <bfd_arch_bits_per_address@plt+0x29b0>
   13ef0:	b	13990 <bfd_arch_bits_per_address@plt+0x25dc>
   13ef4:	ldr	r3, [pc, #-1020]	; 13b00 <bfd_arch_bits_per_address@plt+0x274c>
   13ef8:	ldr	r3, [r3, #72]	; 0x48
   13efc:	cmp	r3, #0
   13f00:	bne	13d4c <bfd_arch_bits_per_address@plt+0x2998>
   13f04:	ldr	r1, [r4]
   13f08:	ldr	r0, [pc, #-1036]	; 13b04 <bfd_arch_bits_per_address@plt+0x2750>
   13f0c:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   13f10:	cmp	r0, #0
   13f14:	bne	13d4c <bfd_arch_bits_per_address@plt+0x2998>
   13f18:	b	139c0 <bfd_arch_bits_per_address@plt+0x260c>
   13f1c:	ldr	r1, [r4]
   13f20:	ldr	r0, [pc, #-1060]	; 13b04 <bfd_arch_bits_per_address@plt+0x2750>
   13f24:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   13f28:	cmp	r0, #0
   13f2c:	vstrne	d9, [r4, #168]	; 0xa8
   13f30:	vmovne.f64	d7, d9
   13f34:	bne	139c8 <bfd_arch_bits_per_address@plt+0x2614>
   13f38:	b	13d4c <bfd_arch_bits_per_address@plt+0x2998>
   13f3c:	ldr	r1, [r4]
   13f40:	ldr	r0, [pc, #-1088]	; 13b08 <bfd_arch_bits_per_address@plt+0x2754>
   13f44:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   13f48:	cmp	r0, #0
   13f4c:	strne	fp, [r4, #160]	; 0xa0
   13f50:	b	13d64 <bfd_arch_bits_per_address@plt+0x29b0>
   13f54:	mov	r0, sl
   13f58:	bl	11090 <printf@plt>
   13f5c:	mov	r0, r4
   13f60:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   13f64:	mov	r1, fp
   13f68:	ldr	r0, [pc, #-1124]	; 13b0c <bfd_arch_bits_per_address@plt+0x2758>
   13f6c:	bl	11090 <printf@plt>
   13f70:	b	1378c <bfd_arch_bits_per_address@plt+0x23d8>
   13f74:	ldr	r3, [pc, #-1132]	; 13b10 <bfd_arch_bits_per_address@plt+0x275c>
   13f78:	mov	r2, r3
   13f7c:	str	r3, [sp, #28]
   13f80:	mov	r3, #0
   13f84:	str	r3, [r2]
   13f88:	mov	r0, #216	; 0xd8
   13f8c:	b	136fc <bfd_arch_bits_per_address@plt+0x2348>
   13f90:	ldr	r0, [pc, #-1156]	; 13b14 <bfd_arch_bits_per_address@plt+0x2760>
   13f94:	bl	111ec <puts@plt>
   13f98:	ldr	r8, [r6]
   13f9c:	cmp	r8, #0
   13fa0:	beq	14004 <bfd_arch_bits_per_address@plt+0x2c50>
   13fa4:	ldr	r3, [sp, #24]
   13fa8:	ldr	sl, [pc, #-1176]	; 13b18 <bfd_arch_bits_per_address@plt+0x2764>
   13fac:	ldr	r9, [pc, #-1176]	; 13b1c <bfd_arch_bits_per_address@plt+0x2768>
   13fb0:	sub	r5, r3, #4
   13fb4:	mov	r4, #0
   13fb8:	mov	r0, sl
   13fbc:	bl	11090 <printf@plt>
   13fc0:	ldr	r3, [r5, #4]!
   13fc4:	mov	r0, r9
   13fc8:	add	r4, r4, #1
   13fcc:	ldr	r1, [r3, #156]	; 0x9c
   13fd0:	bl	11090 <printf@plt>
   13fd4:	ldr	r0, [r5]
   13fd8:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   13fdc:	mov	r0, #10
   13fe0:	bl	11294 <putchar@plt>
   13fe4:	ldr	r8, [r6]
   13fe8:	cmp	r8, r4
   13fec:	bhi	13fb8 <bfd_arch_bits_per_address@plt+0x2c04>
   13ff0:	b	1386c <bfd_arch_bits_per_address@plt+0x24b8>
   13ff4:	cmp	ip, #0
   13ff8:	bne	13d7c <bfd_arch_bits_per_address@plt+0x29c8>
   13ffc:	ldr	r1, [r4]
   14000:	b	13980 <bfd_arch_bits_per_address@plt+0x25cc>
   14004:	ldr	r3, [sp, #28]
   14008:	ldr	r4, [r3]
   1400c:	ldr	r3, [pc, #-1268]	; 13b20 <bfd_arch_bits_per_address@plt+0x276c>
   14010:	add	r2, r4, r4, lsl #1
   14014:	ldr	r1, [r3]
   14018:	add	r2, r2, r2, lsl #3
   1401c:	add	r3, r1, #216	; 0xd8
   14020:	add	r1, r1, r2, lsl #3
   14024:	cmp	r3, r1
   14028:	bls	13a20 <bfd_arch_bits_per_address@plt+0x266c>
   1402c:	b	13c64 <bfd_arch_bits_per_address@plt+0x28b0>
   14030:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14034:	mov	r8, r0
   14038:	ldr	r6, [pc, #1124]	; 144a4 <bfd_arch_bits_per_address@plt+0x30f0>
   1403c:	ldr	r3, [r6]
   14040:	tst	r3, #2
   14044:	bne	140f0 <bfd_arch_bits_per_address@plt+0x2d3c>
   14048:	ldr	r3, [r8, #156]	; 0x9c
   1404c:	add	r2, r3, #1
   14050:	cmp	r2, #1
   14054:	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14058:	ldr	r7, [pc, #1096]	; 144a8 <bfd_arch_bits_per_address@plt+0x30f4>
   1405c:	cmp	r3, #0
   14060:	ldr	r1, [r7]
   14064:	beq	1426c <bfd_arch_bits_per_address@plt+0x2eb8>
   14068:	cmp	r1, #0
   1406c:	ble	140d0 <bfd_arch_bits_per_address@plt+0x2d1c>
   14070:	ldr	r0, [r7, #4]
   14074:	ldr	r4, [r0, r1, lsl #3]
   14078:	cmp	r8, r4
   1407c:	beq	142ec <bfd_arch_bits_per_address@plt+0x2f38>
   14080:	ldr	r3, [r8, #196]	; 0xc4
   14084:	subs	ip, r8, r3
   14088:	movne	ip, #1
   1408c:	cmp	r3, r4
   14090:	movne	r2, #0
   14094:	andeq	r2, ip, #1
   14098:	cmp	r2, #0
   1409c:	bne	142ec <bfd_arch_bits_per_address@plt+0x2f38>
   140a0:	mov	r5, r1
   140a4:	b	140c8 <bfd_arch_bits_per_address@plt+0x2d14>
   140a8:	ldr	r4, [r0, r5, lsl #3]
   140ac:	cmp	r8, r4
   140b0:	beq	14380 <bfd_arch_bits_per_address@plt+0x2fcc>
   140b4:	cmp	r4, r3
   140b8:	movne	r2, #0
   140bc:	andeq	r2, ip, #1
   140c0:	cmp	r2, #0
   140c4:	bne	1410c <bfd_arch_bits_per_address@plt+0x2d58>
   140c8:	subs	r5, r5, #1
   140cc:	bne	140a8 <bfd_arch_bits_per_address@plt+0x2cf4>
   140d0:	ldr	r3, [pc, #980]	; 144ac <bfd_arch_bits_per_address@plt+0x30f8>
   140d4:	mov	r2, #41	; 0x29
   140d8:	mov	r1, #1
   140dc:	ldr	r3, [r3]
   140e0:	ldr	r0, [pc, #968]	; 144b0 <bfd_arch_bits_per_address@plt+0x30fc>
   140e4:	bl	11174 <fwrite@plt>
   140e8:	mov	r0, #1
   140ec:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   140f0:	ldr	r0, [pc, #956]	; 144b4 <bfd_arch_bits_per_address@plt+0x3100>
   140f4:	bl	11090 <printf@plt>
   140f8:	mov	r0, r8
   140fc:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14100:	ldr	r0, [pc, #944]	; 144b8 <bfd_arch_bits_per_address@plt+0x3104>
   14104:	bl	111ec <puts@plt>
   14108:	b	14048 <bfd_arch_bits_per_address@plt+0x2c94>
   1410c:	ldr	r3, [r6]
   14110:	tst	r3, #2
   14114:	bne	142fc <bfd_arch_bits_per_address@plt+0x2f48>
   14118:	cmp	r5, r1
   1411c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14120:	ldr	r3, [r4, #200]	; 0xc8
   14124:	cmp	r3, #0
   14128:	moveq	fp, r4
   1412c:	beq	14180 <bfd_arch_bits_per_address@plt+0x2dcc>
   14130:	ldr	r8, [pc, #900]	; 144bc <bfd_arch_bits_per_address@plt+0x3108>
   14134:	mov	fp, r4
   14138:	b	1414c <bfd_arch_bits_per_address@plt+0x2d98>
   1413c:	ldr	fp, [fp, #200]	; 0xc8
   14140:	ldr	r2, [fp, #200]	; 0xc8
   14144:	cmp	r2, #0
   14148:	beq	14180 <bfd_arch_bits_per_address@plt+0x2dcc>
   1414c:	ldr	r2, [r6]
   14150:	tst	r2, #2
   14154:	beq	1413c <bfd_arch_bits_per_address@plt+0x2d88>
   14158:	mov	r0, r8
   1415c:	bl	11090 <printf@plt>
   14160:	mov	r0, fp
   14164:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14168:	mov	r0, #10
   1416c:	bl	11294 <putchar@plt>
   14170:	ldr	fp, [fp, #200]	; 0xc8
   14174:	ldr	r2, [fp, #200]	; 0xc8
   14178:	cmp	r2, #0
   1417c:	bne	1414c <bfd_arch_bits_per_address@plt+0x2d98>
   14180:	ldr	r8, [r4, #196]	; 0xc4
   14184:	cmp	r8, r4
   14188:	beq	141b0 <bfd_arch_bits_per_address@plt+0x2dfc>
   1418c:	ldr	r2, [r6]
   14190:	tst	r2, #2
   14194:	beq	141b0 <bfd_arch_bits_per_address@plt+0x2dfc>
   14198:	ldr	r0, [pc, #800]	; 144c0 <bfd_arch_bits_per_address@plt+0x310c>
   1419c:	bl	11090 <printf@plt>
   141a0:	mov	r0, r8
   141a4:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   141a8:	mov	r0, #10
   141ac:	bl	11294 <putchar@plt>
   141b0:	ldr	r2, [r7]
   141b4:	add	r5, r5, #1
   141b8:	cmp	r5, r2
   141bc:	popgt	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141c0:	ldr	sl, [pc, #764]	; 144c4 <bfd_arch_bits_per_address@plt+0x3110>
   141c4:	ldr	r9, [pc, #764]	; 144c8 <bfd_arch_bits_per_address@plt+0x3114>
   141c8:	b	141e4 <bfd_arch_bits_per_address@plt+0x2e30>
   141cc:	cmp	r8, r2
   141d0:	bne	14484 <bfd_arch_bits_per_address@plt+0x30d0>
   141d4:	ldr	r2, [r7]
   141d8:	add	r5, r5, #1
   141dc:	cmp	r5, r2
   141e0:	popgt	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141e4:	ldr	r2, [r7, #4]
   141e8:	ldr	r4, [r2, r5, lsl #3]
   141ec:	ldr	r2, [r4, #196]	; 0xc4
   141f0:	cmp	r4, r2
   141f4:	bne	141cc <bfd_arch_bits_per_address@plt+0x2e18>
   141f8:	ldr	r2, [r6]
   141fc:	str	r4, [fp, #200]	; 0xc8
   14200:	tst	r2, #2
   14204:	str	r8, [r4, #196]	; 0xc4
   14208:	bne	14354 <bfd_arch_bits_per_address@plt+0x2fa0>
   1420c:	ldr	r2, [r4, #200]	; 0xc8
   14210:	mov	fp, r4
   14214:	cmp	r2, #0
   14218:	bne	14230 <bfd_arch_bits_per_address@plt+0x2e7c>
   1421c:	b	141d4 <bfd_arch_bits_per_address@plt+0x2e20>
   14220:	ldr	fp, [fp, #200]	; 0xc8
   14224:	ldr	r2, [fp, #200]	; 0xc8
   14228:	cmp	r2, #0
   1422c:	beq	141d4 <bfd_arch_bits_per_address@plt+0x2e20>
   14230:	ldr	r1, [r6]
   14234:	str	r8, [r2, #196]	; 0xc4
   14238:	tst	r1, #2
   1423c:	beq	14220 <bfd_arch_bits_per_address@plt+0x2e6c>
   14240:	mov	r0, sl
   14244:	bl	11090 <printf@plt>
   14248:	ldr	r0, [fp, #200]	; 0xc8
   1424c:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14250:	mov	r0, r9
   14254:	bl	11090 <printf@plt>
   14258:	mov	r0, r8
   1425c:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14260:	mov	r0, #10
   14264:	bl	11294 <putchar@plt>
   14268:	b	14220 <bfd_arch_bits_per_address@plt+0x2e6c>
   1426c:	ldr	r3, [r7, #8]
   14270:	add	r1, r1, #1
   14274:	cmp	r1, r3
   14278:	str	r1, [r7]
   1427c:	ldr	r0, [r7, #4]
   14280:	bge	1445c <bfd_arch_bits_per_address@plt+0x30a8>
   14284:	ldr	r3, [r6]
   14288:	add	ip, r0, r1, lsl #3
   1428c:	mvn	r2, #0
   14290:	tst	r3, #2
   14294:	str	r8, [r0, r1, lsl #3]
   14298:	str	r1, [ip, #4]
   1429c:	str	r2, [r8, #156]	; 0x9c
   142a0:	bne	14434 <bfd_arch_bits_per_address@plt+0x3080>
   142a4:	ldr	r4, [r8, #208]	; 0xd0
   142a8:	cmp	r4, #0
   142ac:	beq	142d0 <bfd_arch_bits_per_address@plt+0x2f1c>
   142b0:	ldr	r0, [r4, #4]
   142b4:	bl	14030 <bfd_arch_bits_per_address@plt+0x2c7c>
   142b8:	ldr	r4, [r4, #36]	; 0x24
   142bc:	cmp	r4, #0
   142c0:	bne	142b0 <bfd_arch_bits_per_address@plt+0x2efc>
   142c4:	ldr	r3, [r6]
   142c8:	tst	r3, #2
   142cc:	bne	1439c <bfd_arch_bits_per_address@plt+0x2fe8>
   142d0:	ldr	r2, [r8, #196]	; 0xc4
   142d4:	cmp	r8, r2
   142d8:	beq	143dc <bfd_arch_bits_per_address@plt+0x3028>
   142dc:	ldr	r3, [r7]
   142e0:	sub	r3, r3, #1
   142e4:	str	r3, [r7]
   142e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ec:	ldr	r3, [r6]
   142f0:	tst	r3, #2
   142f4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f8:	mov	r5, r1
   142fc:	mov	r2, r5
   14300:	ldr	r0, [pc, #452]	; 144cc <bfd_arch_bits_per_address@plt+0x3118>
   14304:	bl	11090 <printf@plt>
   14308:	cmp	r4, #0
   1430c:	beq	14478 <bfd_arch_bits_per_address@plt+0x30c4>
   14310:	mov	r0, r4
   14314:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14318:	mov	r0, #10
   1431c:	bl	11294 <putchar@plt>
   14320:	ldr	r3, [r7]
   14324:	cmp	r3, r5
   14328:	bne	14120 <bfd_arch_bits_per_address@plt+0x2d6c>
   1432c:	ldr	r3, [r6]
   14330:	tst	r3, #2
   14334:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14338:	ldr	r0, [pc, #400]	; 144d0 <bfd_arch_bits_per_address@plt+0x311c>
   1433c:	bl	11090 <printf@plt>
   14340:	mov	r0, r8
   14344:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14348:	mov	r0, #10
   1434c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14350:	b	11294 <putchar@plt>
   14354:	ldr	r0, [pc, #376]	; 144d4 <bfd_arch_bits_per_address@plt+0x3120>
   14358:	bl	11090 <printf@plt>
   1435c:	mov	r0, r4
   14360:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14364:	mov	r0, r9
   14368:	bl	11090 <printf@plt>
   1436c:	mov	r0, r8
   14370:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14374:	mov	r0, #10
   14378:	bl	11294 <putchar@plt>
   1437c:	b	1420c <bfd_arch_bits_per_address@plt+0x2e58>
   14380:	ldr	r3, [r6]
   14384:	tst	r3, #2
   14388:	beq	14118 <bfd_arch_bits_per_address@plt+0x2d64>
   1438c:	mov	r2, r5
   14390:	ldr	r0, [pc, #308]	; 144cc <bfd_arch_bits_per_address@plt+0x3118>
   14394:	bl	11090 <printf@plt>
   14398:	b	14310 <bfd_arch_bits_per_address@plt+0x2f5c>
   1439c:	ldr	r1, [r7]
   143a0:	ldr	r0, [pc, #304]	; 144d8 <bfd_arch_bits_per_address@plt+0x3124>
   143a4:	bl	11090 <printf@plt>
   143a8:	mov	r0, r8
   143ac:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   143b0:	mov	r0, #10
   143b4:	bl	11294 <putchar@plt>
   143b8:	ldr	r3, [r8, #196]	; 0xc4
   143bc:	cmp	r8, r3
   143c0:	ldr	r3, [r6]
   143c4:	beq	143dc <bfd_arch_bits_per_address@plt+0x3028>
   143c8:	tst	r3, #2
   143cc:	beq	142dc <bfd_arch_bits_per_address@plt+0x2f28>
   143d0:	ldr	r0, [pc, #260]	; 144dc <bfd_arch_bits_per_address@plt+0x3128>
   143d4:	bl	111ec <puts@plt>
   143d8:	b	142dc <bfd_arch_bits_per_address@plt+0x2f28>
   143dc:	ldr	r2, [r7, #12]
   143e0:	ldr	r5, [pc, #248]	; 144e0 <bfd_arch_bits_per_address@plt+0x312c>
   143e4:	add	r2, r2, #1
   143e8:	ldr	r4, [pc, #244]	; 144e4 <bfd_arch_bits_per_address@plt+0x3130>
   143ec:	str	r2, [r7, #12]
   143f0:	b	14408 <bfd_arch_bits_per_address@plt+0x3054>
   143f4:	ldr	r8, [r8, #200]	; 0xc8
   143f8:	cmp	r8, #0
   143fc:	beq	142dc <bfd_arch_bits_per_address@plt+0x2f28>
   14400:	ldr	r2, [r7, #12]
   14404:	ldr	r3, [r6]
   14408:	tst	r3, #2
   1440c:	str	r2, [r8, #156]	; 0x9c
   14410:	beq	143f4 <bfd_arch_bits_per_address@plt+0x3040>
   14414:	mov	r0, r5
   14418:	bl	11090 <printf@plt>
   1441c:	mov	r0, r8
   14420:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14424:	ldr	r1, [r7, #12]
   14428:	mov	r0, r4
   1442c:	bl	11090 <printf@plt>
   14430:	b	143f4 <bfd_arch_bits_per_address@plt+0x3040>
   14434:	ldr	r0, [pc, #172]	; 144e8 <bfd_arch_bits_per_address@plt+0x3134>
   14438:	bl	11090 <printf@plt>
   1443c:	mov	r0, r8
   14440:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14444:	mov	r0, #10
   14448:	bl	11294 <putchar@plt>
   1444c:	ldr	r4, [r8, #208]	; 0xd0
   14450:	cmp	r4, #0
   14454:	bne	142b0 <bfd_arch_bits_per_address@plt+0x2efc>
   14458:	b	142c4 <bfd_arch_bits_per_address@plt+0x2f10>
   1445c:	add	r3, r3, #128	; 0x80
   14460:	str	r3, [r7, #8]
   14464:	lsl	r1, r3, #3
   14468:	bl	11144 <xrealloc@plt>
   1446c:	ldr	r1, [r7]
   14470:	str	r0, [r7, #4]
   14474:	b	14284 <bfd_arch_bits_per_address@plt+0x2ed0>
   14478:	ldr	r0, [pc, #108]	; 144ec <bfd_arch_bits_per_address@plt+0x3138>
   1447c:	bl	11090 <printf@plt>
   14480:	b	14318 <bfd_arch_bits_per_address@plt+0x2f64>
   14484:	ldr	r3, [pc, #32]	; 144ac <bfd_arch_bits_per_address@plt+0x30f8>
   14488:	mov	r2, #38	; 0x26
   1448c:	mov	r1, #1
   14490:	ldr	r3, [r3]
   14494:	ldr	r0, [pc, #84]	; 144f0 <bfd_arch_bits_per_address@plt+0x313c>
   14498:	bl	11174 <fwrite@plt>
   1449c:	mov	r0, #1
   144a0:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   144a4:	andeq	r5, r3, r0, lsr #2
   144a8:	andeq	r4, r3, r8, ror #9
   144ac:			; <UNDEFINED> instruction: 0x000344b8
   144b0:	muleq	r1, r0, ip
   144b4:	andeq	lr, r1, ip, lsr fp
   144b8:	andeq	r0, r2, ip, ror r8
   144bc:	andeq	lr, r1, r0, lsl #23
   144c0:	muleq	r1, r4, fp
   144c4:	ldrdeq	lr, [r1], -r0
   144c8:	andeq	lr, r1, r8, asr #23
   144cc:	andeq	lr, r1, r8, asr #22
   144d0:	andeq	lr, r1, r0, ror fp
   144d4:			; <UNDEFINED> instruction: 0x0001ebb0
   144d8:	andeq	lr, r1, r8, lsr #24
   144dc:	andeq	lr, r1, ip, ror #24
   144e0:	andeq	lr, r1, ip, lsr ip
   144e4:	andeq	lr, r1, r4, asr ip
   144e8:	andeq	lr, r1, r4, lsl ip
   144ec:	andeq	lr, r1, r0, ror #14
   144f0:	andeq	lr, r1, ip, ror #23
   144f4:	andeq	r0, r0, r0
   144f8:	ldr	r2, [r0]
   144fc:	ldr	r3, [r1]
   14500:	ldr	r2, [r2, #8]
   14504:	ldr	r3, [r3, #8]
   14508:	cmp	r2, r3
   1450c:	bhi	1451c <bfd_arch_bits_per_address@plt+0x3168>
   14510:	movcc	r0, #1
   14514:	movcs	r0, #0
   14518:	bx	lr
   1451c:	mvn	r0, #0
   14520:	bx	lr
   14524:	ldr	r2, [r0]
   14528:	ldr	r3, [r1]
   1452c:	ldr	r2, [r2, #28]
   14530:	ldr	r3, [r3, #28]
   14534:	cmp	r2, r3
   14538:	bgt	14548 <bfd_arch_bits_per_address@plt+0x3194>
   1453c:	movlt	r0, #1
   14540:	movge	r0, #0
   14544:	bx	lr
   14548:	mvn	r0, #0
   1454c:	bx	lr
   14550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14554:	vpush	{d8-d9}
   14558:	cmp	r2, #0
   1455c:	sub	sp, sp, #44	; 0x2c
   14560:	ldr	fp, [sp, #96]	; 0x60
   14564:	bne	14688 <bfd_arch_bits_per_address@plt+0x32d4>
   14568:	cmp	r1, #0
   1456c:	beq	1467c <bfd_arch_bits_per_address@plt+0x32c8>
   14570:	sub	r0, r0, #4
   14574:	add	lr, r0, r1, lsl #2
   14578:	mov	r4, #0
   1457c:	mov	r5, #0
   14580:	str	r0, [sp, #24]
   14584:	ldr	ip, [r0, #4]!
   14588:	ldr	ip, [ip, #8]
   1458c:	adds	r4, r4, ip
   14590:	adc	r5, r5, #0
   14594:	cmp	lr, r0
   14598:	bne	14584 <bfd_arch_bits_per_address@plt+0x31d0>
   1459c:	b	146a0 <bfd_arch_bits_per_address@plt+0x32ec>
   145a0:	ldr	r8, [sp, #28]
   145a4:	mov	r5, r3
   145a8:	mov	r6, #0
   145ac:	ldr	r3, [r8, #4]!
   145b0:	ldr	r4, [r3]
   145b4:	ldrb	r2, [r4, #20]
   145b8:	tst	r2, #16
   145bc:	bne	14618 <bfd_arch_bits_per_address@plt+0x3264>
   145c0:	ldr	r3, [r3, #4]
   145c4:	ldrb	r3, [r3, #20]
   145c8:	tst	r3, #16
   145cc:	bne	14618 <bfd_arch_bits_per_address@plt+0x3264>
   145d0:	ldrd	r2, [r4, #112]	; 0x70
   145d4:	cmp	r2, #0
   145d8:	bne	145f0 <bfd_arch_bits_per_address@plt+0x323c>
   145dc:	cmp	r3, #0
   145e0:	bne	145f0 <bfd_arch_bits_per_address@plt+0x323c>
   145e4:	b	14618 <bfd_arch_bits_per_address@plt+0x3264>
   145e8:	mov	r4, r3
   145ec:	ldr	r3, [r3, #116]	; 0x74
   145f0:	cmp	r3, #0
   145f4:	bne	145e8 <bfd_arch_bits_per_address@plt+0x3234>
   145f8:	ldrb	r3, [r4, #20]
   145fc:	ldr	r0, [r4, #8]
   14600:	orr	r3, r3, #16
   14604:	strb	r3, [r4, #20]
   14608:	bl	111ec <puts@plt>
   1460c:	ldr	r4, [r4, #112]	; 0x70
   14610:	cmp	r4, #0
   14614:	bne	145f8 <bfd_arch_bits_per_address@plt+0x3244>
   14618:	add	r6, r6, #1
   1461c:	cmp	r5, r6
   14620:	bhi	145ac <bfd_arch_bits_per_address@plt+0x31f8>
   14624:	ldr	r3, [sp, #8]
   14628:	cmp	r3, #0
   1462c:	beq	1467c <bfd_arch_bits_per_address@plt+0x32c8>
   14630:	cmp	r5, #0
   14634:	beq	1467c <bfd_arch_bits_per_address@plt+0x32c8>
   14638:	ldr	r4, [sp, #24]
   1463c:	add	r5, r4, r5, lsl #2
   14640:	ldr	r1, [r4, #4]!
   14644:	ldr	r2, [r1]
   14648:	ldrb	r3, [r2, #20]
   1464c:	tst	r3, #16
   14650:	bne	14674 <bfd_arch_bits_per_address@plt+0x32c0>
   14654:	ldr	r1, [r1, #4]
   14658:	orr	r3, r3, #16
   1465c:	ldrb	r1, [r1, #20]
   14660:	tst	r1, #16
   14664:	bne	14674 <bfd_arch_bits_per_address@plt+0x32c0>
   14668:	strb	r3, [r2, #20]
   1466c:	ldr	r0, [r2, #8]
   14670:	bl	111ec <puts@plt>
   14674:	cmp	r5, r4
   14678:	bne	14640 <bfd_arch_bits_per_address@plt+0x328c>
   1467c:	add	sp, sp, #44	; 0x2c
   14680:	vpop	{d8-d9}
   14684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14688:	cmp	r1, #0
   1468c:	beq	1467c <bfd_arch_bits_per_address@plt+0x32c8>
   14690:	mov	r4, #0
   14694:	mov	r5, #0
   14698:	sub	r0, r0, #4
   1469c:	str	r0, [sp, #24]
   146a0:	ldr	r9, [sp, #24]
   146a4:	str	r3, [sp, #12]
   146a8:	str	r2, [sp, #8]
   146ac:	mov	r3, #0
   146b0:	mov	r2, #0
   146b4:	strd	r4, [sp, #16]
   146b8:	vldr	d9, [pc, #848]	; 14a10 <bfd_arch_bits_per_address@plt+0x365c>
   146bc:	mov	r5, fp
   146c0:	mov	r6, #0
   146c4:	str	r9, [sp, #28]
   146c8:	str	r1, [sp, #4]
   146cc:	mov	sl, r2
   146d0:	mov	fp, r3
   146d4:	b	14740 <bfd_arch_bits_per_address@plt+0x338c>
   146d8:	ldr	r3, [r4]
   146dc:	ldrb	r2, [r3, #20]
   146e0:	tst	r2, #16
   146e4:	bne	147a4 <bfd_arch_bits_per_address@plt+0x33f0>
   146e8:	ldr	r2, [r3, #112]	; 0x70
   146ec:	ldr	r1, [r3, #116]	; 0x74
   146f0:	cmp	r2, #0
   146f4:	ldr	ip, [r8, #112]	; 0x70
   146f8:	beq	147bc <bfd_arch_bits_per_address@plt+0x3408>
   146fc:	cmp	r1, #0
   14700:	beq	147c4 <bfd_arch_bits_per_address@plt+0x3410>
   14704:	cmp	ip, #0
   14708:	ldr	r0, [r8, #116]	; 0x74
   1470c:	beq	148f0 <bfd_arch_bits_per_address@plt+0x353c>
   14710:	ldr	r1, [r5]
   14714:	cmp	r0, #0
   14718:	ldr	r0, [sp, #12]
   1471c:	add	r2, r1, #1
   14720:	strne	r2, [r5]
   14724:	add	r3, r0, r1, lsl #2
   14728:	strne	r4, [r0, r1, lsl #2]
   1472c:	beq	147dc <bfd_arch_bits_per_address@plt+0x3428>
   14730:	ldr	r3, [sp, #4]
   14734:	add	r6, r6, #1
   14738:	cmp	r3, r6
   1473c:	bls	145a0 <bfd_arch_bits_per_address@plt+0x31ec>
   14740:	ldr	r4, [r9, #4]!
   14744:	ldr	r3, [r4, #8]
   14748:	ldr	r7, [r4, #40]	; 0x28
   1474c:	adds	sl, sl, r3
   14750:	adc	fp, fp, #0
   14754:	cmp	r7, #0
   14758:	bne	14730 <bfd_arch_bits_per_address@plt+0x337c>
   1475c:	ldr	r3, [sp, #8]
   14760:	ldr	r8, [r4, #4]
   14764:	cmp	r3, #0
   14768:	bne	14798 <bfd_arch_bits_per_address@plt+0x33e4>
   1476c:	mov	r0, sl
   14770:	mov	r1, fp
   14774:	bl	1e598 <bfd_arch_bits_per_address@plt+0xd1e4>
   14778:	vmov	d8, r0, r1
   1477c:	ldrd	r0, [sp, #16]
   14780:	bl	1e598 <bfd_arch_bits_per_address@plt+0xd1e4>
   14784:	vmov	d7, r0, r1
   14788:	vdiv.f64	d7, d8, d7
   1478c:	vcmpe.f64	d7, d9
   14790:	vmrs	APSR_nzcv, fpscr
   14794:	bgt	147a4 <bfd_arch_bits_per_address@plt+0x33f0>
   14798:	ldrb	r3, [r8, #20]
   1479c:	tst	r3, #16
   147a0:	beq	146d8 <bfd_arch_bits_per_address@plt+0x3324>
   147a4:	ldr	r3, [r5]
   147a8:	add	r2, r3, #1
   147ac:	str	r2, [r5]
   147b0:	ldr	r2, [sp, #12]
   147b4:	str	r4, [r2, r3, lsl #2]
   147b8:	b	14730 <bfd_arch_bits_per_address@plt+0x337c>
   147bc:	cmp	r1, #0
   147c0:	beq	148fc <bfd_arch_bits_per_address@plt+0x3548>
   147c4:	cmp	ip, #0
   147c8:	beq	147e8 <bfd_arch_bits_per_address@plt+0x3434>
   147cc:	ldr	r3, [r5]
   147d0:	ldr	r1, [sp, #12]
   147d4:	add	r2, r3, #1
   147d8:	add	r3, r1, r3, lsl #2
   147dc:	str	r2, [r5]
   147e0:	str	r4, [r3]
   147e4:	b	14730 <bfd_arch_bits_per_address@plt+0x337c>
   147e8:	ldr	r0, [r8, #116]	; 0x74
   147ec:	cmp	r0, #0
   147f0:	bne	147cc <bfd_arch_bits_per_address@plt+0x3418>
   147f4:	cmp	r2, #0
   147f8:	beq	149bc <bfd_arch_bits_per_address@plt+0x3608>
   147fc:	mov	lr, ip
   14800:	mov	r0, r2
   14804:	strd	sl, [sp, #32]
   14808:	mov	fp, r5
   1480c:	mov	r5, ip
   14810:	mov	ip, r2
   14814:	mov	r2, r3
   14818:	mov	r3, lr
   1481c:	b	14824 <bfd_arch_bits_per_address@plt+0x3470>
   14820:	mov	r0, lr
   14824:	ldr	lr, [r0, #112]	; 0x70
   14828:	add	r3, r3, #1
   1482c:	cmp	lr, #0
   14830:	bne	14820 <bfd_arch_bits_per_address@plt+0x346c>
   14834:	mov	lr, r3
   14838:	cmp	r1, #0
   1483c:	mov	r3, r2
   14840:	mov	r2, ip
   14844:	moveq	lr, r2
   14848:	mov	ip, r5
   1484c:	moveq	r0, r3
   14850:	mov	r5, fp
   14854:	ldrd	sl, [sp, #32]
   14858:	bne	14864 <bfd_arch_bits_per_address@plt+0x34b0>
   1485c:	b	148a0 <bfd_arch_bits_per_address@plt+0x34ec>
   14860:	mov	r1, r3
   14864:	ldr	r3, [r1, #116]	; 0x74
   14868:	add	r7, r7, #1
   1486c:	cmp	r3, #0
   14870:	bne	14860 <bfd_arch_bits_per_address@plt+0x34ac>
   14874:	cmp	r7, lr
   14878:	blt	14984 <bfd_arch_bits_per_address@plt+0x35d0>
   1487c:	ldr	r2, [r0, #112]	; 0x70
   14880:	cmp	r2, #0
   14884:	beq	14a04 <bfd_arch_bits_per_address@plt+0x3650>
   14888:	cmp	r2, #0
   1488c:	mov	lr, r2
   14890:	mov	r3, r0
   14894:	beq	148a8 <bfd_arch_bits_per_address@plt+0x34f4>
   14898:	mov	r0, r2
   1489c:	ldr	r2, [r2, #112]	; 0x70
   148a0:	cmp	r2, #0
   148a4:	bne	14898 <bfd_arch_bits_per_address@plt+0x34e4>
   148a8:	mov	r2, r8
   148ac:	b	148b4 <bfd_arch_bits_per_address@plt+0x3500>
   148b0:	mov	r2, r1
   148b4:	ldr	r1, [r2, #116]	; 0x74
   148b8:	cmp	r1, #0
   148bc:	bne	148b0 <bfd_arch_bits_per_address@plt+0x34fc>
   148c0:	cmp	r0, r8
   148c4:	cmpeq	r2, r3
   148c8:	beq	147a4 <bfd_arch_bits_per_address@plt+0x33f0>
   148cc:	cmp	lr, #0
   148d0:	beq	14990 <bfd_arch_bits_per_address@plt+0x35dc>
   148d4:	cmp	ip, #0
   148d8:	bne	14730 <bfd_arch_bits_per_address@plt+0x337c>
   148dc:	str	r8, [r3, #116]	; 0x74
   148e0:	str	r3, [r8, #112]	; 0x70
   148e4:	mov	r3, #1
   148e8:	str	r3, [r4, #40]	; 0x28
   148ec:	b	14730 <bfd_arch_bits_per_address@plt+0x337c>
   148f0:	cmp	r0, #0
   148f4:	bne	147cc <bfd_arch_bits_per_address@plt+0x3418>
   148f8:	b	147fc <bfd_arch_bits_per_address@plt+0x3448>
   148fc:	cmp	ip, #0
   14900:	beq	149f8 <bfd_arch_bits_per_address@plt+0x3644>
   14904:	mov	r0, ip
   14908:	b	14910 <bfd_arch_bits_per_address@plt+0x355c>
   1490c:	mov	r0, r2
   14910:	ldr	r2, [r0, #112]	; 0x70
   14914:	add	r1, r1, #1
   14918:	cmp	r2, #0
   1491c:	bne	1490c <bfd_arch_bits_per_address@plt+0x3558>
   14920:	ldr	r2, [r8, #116]	; 0x74
   14924:	cmp	r2, #0
   14928:	bne	14934 <bfd_arch_bits_per_address@plt+0x3580>
   1492c:	b	14958 <bfd_arch_bits_per_address@plt+0x35a4>
   14930:	mov	r2, ip
   14934:	ldr	ip, [r2, #116]	; 0x74
   14938:	add	r7, r7, #1
   1493c:	cmp	ip, #0
   14940:	bne	14930 <bfd_arch_bits_per_address@plt+0x357c>
   14944:	cmp	r7, r1
   14948:	movgt	r8, r0
   1494c:	ldrgt	ip, [r0, #112]	; 0x70
   14950:	ldrle	ip, [r2, #112]	; 0x70
   14954:	movle	r8, r2
   14958:	mov	r0, r3
   1495c:	cmp	ip, #0
   14960:	mov	lr, #0
   14964:	movne	r2, ip
   14968:	bne	14974 <bfd_arch_bits_per_address@plt+0x35c0>
   1496c:	b	148a8 <bfd_arch_bits_per_address@plt+0x34f4>
   14970:	mov	r2, r1
   14974:	ldr	r1, [r2, #112]	; 0x70
   14978:	cmp	r1, #0
   1497c:	bne	14970 <bfd_arch_bits_per_address@plt+0x35bc>
   14980:	b	148c0 <bfd_arch_bits_per_address@plt+0x350c>
   14984:	ldr	r2, [r1, #112]	; 0x70
   14988:	mov	r0, r1
   1498c:	b	14880 <bfd_arch_bits_per_address@plt+0x34cc>
   14990:	ldr	r1, [r3, #116]	; 0x74
   14994:	ldr	r2, [r8, #116]	; 0x74
   14998:	cmp	r1, #0
   1499c:	beq	149ec <bfd_arch_bits_per_address@plt+0x3638>
   149a0:	cmp	r2, #0
   149a4:	bne	14730 <bfd_arch_bits_per_address@plt+0x337c>
   149a8:	str	r8, [r3, #112]	; 0x70
   149ac:	str	r3, [r8, #116]	; 0x74
   149b0:	mov	r3, #1
   149b4:	str	r3, [r4, #40]	; 0x28
   149b8:	b	14730 <bfd_arch_bits_per_address@plt+0x337c>
   149bc:	cmp	r1, #0
   149c0:	movne	r0, r3
   149c4:	movne	lr, ip
   149c8:	bne	14864 <bfd_arch_bits_per_address@plt+0x34b0>
   149cc:	ldr	r2, [r3, #116]	; 0x74
   149d0:	mov	r0, r3
   149d4:	b	149e0 <bfd_arch_bits_per_address@plt+0x362c>
   149d8:	mov	r0, r2
   149dc:	ldr	r2, [r2, #116]	; 0x74
   149e0:	cmp	r2, #0
   149e4:	bne	149d8 <bfd_arch_bits_per_address@plt+0x3624>
   149e8:	b	1495c <bfd_arch_bits_per_address@plt+0x35a8>
   149ec:	cmp	r2, #0
   149f0:	bne	148dc <bfd_arch_bits_per_address@plt+0x3528>
   149f4:	b	149a8 <bfd_arch_bits_per_address@plt+0x35f4>
   149f8:	mov	r0, r8
   149fc:	mov	r1, ip
   14a00:	b	14920 <bfd_arch_bits_per_address@plt+0x356c>
   14a04:	mov	r3, r0
   14a08:	b	149cc <bfd_arch_bits_per_address@plt+0x3618>
   14a0c:	nop			; (mov r0, r0)
   14a10:	bvc	ff8668d0 <optarg@@GLIBC_2.4+0xff832408>
   14a14:	svccc	0x00efae14
   14a18:	push	{r4, lr}
   14a1c:	sub	sp, sp, #8192	; 0x2000
   14a20:	sub	sp, sp, #24
   14a24:	mov	r4, r0
   14a28:	ldr	r2, [r0, #152]	; 0x98
   14a2c:	ldr	r1, [pc, #188]	; 14af0 <bfd_arch_bits_per_address@plt+0x373c>
   14a30:	add	r0, sp, #24
   14a34:	bl	11324 <sprintf@plt>
   14a38:	vldr	d5, [r4, #176]	; 0xb0
   14a3c:	vldr	d4, [r4, #184]	; 0xb8
   14a40:	ldr	r3, [pc, #172]	; 14af4 <bfd_arch_bits_per_address@plt+0x3740>
   14a44:	vldr	d1, [pc, #156]	; 14ae8 <bfd_arch_bits_per_address@plt+0x3734>
   14a48:	ldr	r2, [pc, #168]	; 14af8 <bfd_arch_bits_per_address@plt+0x3744>
   14a4c:	vadd.f64	d6, d5, d4
   14a50:	vldr	s14, [r3]
   14a54:	ldr	r3, [pc, #160]	; 14afc <bfd_arch_bits_per_address@plt+0x3748>
   14a58:	ldr	r0, [r2]
   14a5c:	ldr	r2, [pc, #156]	; 14b00 <bfd_arch_bits_per_address@plt+0x374c>
   14a60:	vcvt.f64.s32	d7, s14
   14a64:	vldr	d3, [r3]
   14a68:	ldr	r3, [r4, #24]
   14a6c:	vmul.f64	d6, d6, d1
   14a70:	str	r3, [sp, #16]
   14a74:	ldr	r3, [pc, #136]	; 14b04 <bfd_arch_bits_per_address@plt+0x3750>
   14a78:	cmp	r0, #0
   14a7c:	add	r1, sp, #24
   14a80:	vdiv.f64	d2, d4, d7
   14a84:	movne	r0, r2
   14a88:	moveq	r0, r3
   14a8c:	vdiv.f64	d4, d5, d7
   14a90:	vstr	d2, [sp, #8]
   14a94:	vdiv.f64	d7, d6, d3
   14a98:	vstr	d4, [sp]
   14a9c:	vmov	r2, r3, d7
   14aa0:	bl	11090 <printf@plt>
   14aa4:	ldr	r1, [r4, #136]	; 0x88
   14aa8:	cmp	r1, #0
   14aac:	ldreq	r1, [pc, #84]	; 14b08 <bfd_arch_bits_per_address@plt+0x3754>
   14ab0:	ldrne	r0, [pc, #84]	; 14b0c <bfd_arch_bits_per_address@plt+0x3758>
   14ab4:	ldreq	r0, [pc, #84]	; 14b10 <bfd_arch_bits_per_address@plt+0x375c>
   14ab8:	bl	11090 <printf@plt>
   14abc:	mov	r2, #5
   14ac0:	ldr	r1, [pc, #76]	; 14b14 <bfd_arch_bits_per_address@plt+0x3760>
   14ac4:	ldr	r0, [pc, #76]	; 14b18 <bfd_arch_bits_per_address@plt+0x3764>
   14ac8:	bl	11120 <dcgettext@plt>
   14acc:	ldr	r2, [r4, #152]	; 0x98
   14ad0:	ldr	r1, [r4, #192]	; 0xc0
   14ad4:	bl	11090 <printf@plt>
   14ad8:	add	sp, sp, #8192	; 0x2000
   14adc:	add	sp, sp, #24
   14ae0:	pop	{r4, pc}
   14ae4:	nop			; (mov r0, r0)
   14ae8:	andeq	r0, r0, r0
   14aec:	subsmi	r0, r9, r0
   14af0:	strdeq	lr, [r1], -ip
   14af4:	andeq	r5, r3, r0, asr #2
   14af8:	andeq	r5, r3, r8, lsr r1
   14afc:	strdeq	r4, [r3], -r8
   14b00:			; <UNDEFINED> instruction: 0x0001ecbc
   14b04:	ldrdeq	lr, [r1], -ip
   14b08:	strdeq	pc, [r1], -r0
   14b0c:	andeq	lr, r1, r4, lsl #26
   14b10:	andeq	lr, r1, ip, lsl #26
   14b14:	andeq	lr, r1, r4, lsl sp
   14b18:	andeq	lr, r1, r0, asr #13
   14b1c:	ldr	r3, [pc, #428]	; 14cd0 <bfd_arch_bits_per_address@plt+0x391c>
   14b20:	push	{r4, r5, r6, r7, r8, r9, lr}
   14b24:	mov	r5, r0
   14b28:	ldr	r3, [r3]
   14b2c:	sub	sp, sp, #20
   14b30:	tst	r3, #32
   14b34:	mov	r4, r1
   14b38:	ldr	r6, [r0]
   14b3c:	ldr	r7, [r0, #4]
   14b40:	ldr	r9, [r1]
   14b44:	ldr	r8, [r1, #4]
   14b48:	bne	14c3c <bfd_arch_bits_per_address@plt+0x3888>
   14b4c:	cmp	r6, r7
   14b50:	beq	14c24 <bfd_arch_bits_per_address@plt+0x3870>
   14b54:	cmp	r9, r8
   14b58:	beq	14c30 <bfd_arch_bits_per_address@plt+0x387c>
   14b5c:	ldr	r2, [r6, #192]	; 0xc0
   14b60:	ldr	r3, [r9, #192]	; 0xc0
   14b64:	cmp	r2, #0
   14b68:	beq	14b8c <bfd_arch_bits_per_address@plt+0x37d8>
   14b6c:	ldr	r1, [r7, #192]	; 0xc0
   14b70:	cmp	r1, #0
   14b74:	sub	r2, r2, r1
   14b78:	clz	r2, r2
   14b7c:	lsr	r2, r2, #5
   14b80:	moveq	r2, #0
   14b84:	cmp	r2, #0
   14b88:	bne	14bfc <bfd_arch_bits_per_address@plt+0x3848>
   14b8c:	cmp	r3, #0
   14b90:	beq	14bb4 <bfd_arch_bits_per_address@plt+0x3800>
   14b94:	ldr	r2, [r8, #192]	; 0xc0
   14b98:	cmp	r2, #0
   14b9c:	sub	r3, r2, r3
   14ba0:	clz	r3, r3
   14ba4:	lsr	r3, r3, #5
   14ba8:	moveq	r3, #0
   14bac:	cmp	r3, #0
   14bb0:	bne	14c30 <bfd_arch_bits_per_address@plt+0x387c>
   14bb4:	vldr	d6, [r5, #16]
   14bb8:	vldr	d4, [r5, #24]
   14bbc:	vldr	d7, [r4, #16]
   14bc0:	vldr	d5, [r4, #24]
   14bc4:	vadd.f64	d6, d6, d4
   14bc8:	vadd.f64	d7, d7, d5
   14bcc:	vcmpe.f64	d6, d7
   14bd0:	vmrs	APSR_nzcv, fpscr
   14bd4:	bmi	14c24 <bfd_arch_bits_per_address@plt+0x3870>
   14bd8:	bgt	14c30 <bfd_arch_bits_per_address@plt+0x387c>
   14bdc:	ldr	r2, [r5, #8]
   14be0:	ldr	r3, [r4, #8]
   14be4:	cmp	r2, r3
   14be8:	bcc	14c24 <bfd_arch_bits_per_address@plt+0x3870>
   14bec:	movhi	r0, #1
   14bf0:	movls	r0, #0
   14bf4:	add	sp, sp, #20
   14bf8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14bfc:	cmp	r3, #0
   14c00:	beq	14c24 <bfd_arch_bits_per_address@plt+0x3870>
   14c04:	ldr	r2, [r8, #192]	; 0xc0
   14c08:	cmp	r2, #0
   14c0c:	sub	r3, r2, r3
   14c10:	clz	r3, r3
   14c14:	lsr	r3, r3, #5
   14c18:	moveq	r3, #0
   14c1c:	cmp	r3, #0
   14c20:	bne	14bdc <bfd_arch_bits_per_address@plt+0x3828>
   14c24:	mvn	r0, #0
   14c28:	add	sp, sp, #20
   14c2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14c30:	mov	r0, #1
   14c34:	add	sp, sp, #20
   14c38:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14c3c:	ldr	r0, [pc, #144]	; 14cd4 <bfd_arch_bits_per_address@plt+0x3920>
   14c40:	bl	11090 <printf@plt>
   14c44:	mov	r0, r6
   14c48:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14c4c:	ldr	r0, [pc, #132]	; 14cd8 <bfd_arch_bits_per_address@plt+0x3924>
   14c50:	bl	11090 <printf@plt>
   14c54:	mov	r0, r7
   14c58:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14c5c:	ldrd	r0, [r5, #24]
   14c60:	ldr	r2, [r7, #24]
   14c64:	ldr	r3, [r5, #8]
   14c68:	strd	r0, [sp]
   14c6c:	str	r2, [sp, #12]
   14c70:	str	r3, [sp, #8]
   14c74:	ldr	r0, [pc, #96]	; 14cdc <bfd_arch_bits_per_address@plt+0x3928>
   14c78:	ldrd	r2, [r5, #16]
   14c7c:	bl	11090 <printf@plt>
   14c80:	ldr	r0, [pc, #76]	; 14cd4 <bfd_arch_bits_per_address@plt+0x3920>
   14c84:	bl	11090 <printf@plt>
   14c88:	mov	r0, r9
   14c8c:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14c90:	ldr	r0, [pc, #64]	; 14cd8 <bfd_arch_bits_per_address@plt+0x3924>
   14c94:	bl	11090 <printf@plt>
   14c98:	mov	r0, r8
   14c9c:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14ca0:	ldrd	r0, [r4, #24]
   14ca4:	ldr	r2, [r8, #24]
   14ca8:	ldr	r3, [r4, #8]
   14cac:	strd	r0, [sp]
   14cb0:	str	r2, [sp, #12]
   14cb4:	str	r3, [sp, #8]
   14cb8:	ldr	r0, [pc, #28]	; 14cdc <bfd_arch_bits_per_address@plt+0x3928>
   14cbc:	ldrd	r2, [r4, #16]
   14cc0:	bl	11090 <printf@plt>
   14cc4:	mov	r0, #10
   14cc8:	bl	11294 <putchar@plt>
   14ccc:	b	14b4c <bfd_arch_bits_per_address@plt+0x3798>
   14cd0:	andeq	r5, r3, r0, lsr #2
   14cd4:	andeq	lr, r1, r4, lsr sp
   14cd8:	andeq	lr, r1, r0, asr #26
   14cdc:	andeq	lr, r1, r8, asr #26
   14ce0:	push	{r4, lr}
   14ce4:	sub	sp, sp, #8192	; 0x2000
   14ce8:	sub	sp, sp, #16
   14cec:	mov	r4, r0
   14cf0:	ldr	r2, [r0, #152]	; 0x98
   14cf4:	ldr	r1, [pc, #212]	; 14dd0 <bfd_arch_bits_per_address@plt+0x3a1c>
   14cf8:	add	r0, sp, #16
   14cfc:	bl	11324 <sprintf@plt>
   14d00:	vldr	d4, [r4, #184]	; 0xb8
   14d04:	vldr	d5, [r4, #176]	; 0xb0
   14d08:	ldr	r3, [pc, #196]	; 14dd4 <bfd_arch_bits_per_address@plt+0x3a20>
   14d0c:	vldr	d1, [pc, #180]	; 14dc8 <bfd_arch_bits_per_address@plt+0x3a14>
   14d10:	ldr	r2, [pc, #192]	; 14dd8 <bfd_arch_bits_per_address@plt+0x3a24>
   14d14:	vadd.f64	d6, d5, d4
   14d18:	vldr	s14, [r3]
   14d1c:	vldr	d3, [r2]
   14d20:	ldr	r3, [pc, #180]	; 14ddc <bfd_arch_bits_per_address@plt+0x3a28>
   14d24:	ldr	r2, [pc, #180]	; 14de0 <bfd_arch_bits_per_address@plt+0x3a2c>
   14d28:	vcvt.f64.s32	d7, s14
   14d2c:	ldr	r0, [r3]
   14d30:	ldr	r3, [pc, #172]	; 14de4 <bfd_arch_bits_per_address@plt+0x3a30>
   14d34:	vmul.f64	d6, d6, d1
   14d38:	cmp	r0, #0
   14d3c:	movne	r0, r2
   14d40:	moveq	r0, r3
   14d44:	add	r1, sp, #16
   14d48:	vdiv.f64	d2, d4, d7
   14d4c:	vdiv.f64	d4, d5, d7
   14d50:	vstr	d2, [sp, #8]
   14d54:	vdiv.f64	d7, d6, d3
   14d58:	vstr	d4, [sp]
   14d5c:	vmov	r2, r3, d7
   14d60:	bl	11090 <printf@plt>
   14d64:	ldr	r1, [r4, #24]
   14d68:	ldr	r3, [r4, #136]	; 0x88
   14d6c:	cmn	r1, r3
   14d70:	beq	14db0 <bfd_arch_bits_per_address@plt+0x39fc>
   14d74:	ldr	r0, [pc, #108]	; 14de8 <bfd_arch_bits_per_address@plt+0x3a34>
   14d78:	bl	11090 <printf@plt>
   14d7c:	ldr	r1, [r4, #136]	; 0x88
   14d80:	cmp	r1, #0
   14d84:	ldrne	r0, [pc, #96]	; 14dec <bfd_arch_bits_per_address@plt+0x3a38>
   14d88:	ldreq	r1, [pc, #96]	; 14df0 <bfd_arch_bits_per_address@plt+0x3a3c>
   14d8c:	ldreq	r0, [pc, #96]	; 14df4 <bfd_arch_bits_per_address@plt+0x3a40>
   14d90:	bl	11090 <printf@plt>
   14d94:	mov	r0, r4
   14d98:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   14d9c:	mov	r0, #10
   14da0:	bl	11294 <putchar@plt>
   14da4:	add	sp, sp, #8192	; 0x2000
   14da8:	add	sp, sp, #16
   14dac:	pop	{r4, pc}
   14db0:	ldr	r2, [pc, #56]	; 14df0 <bfd_arch_bits_per_address@plt+0x3a3c>
   14db4:	ldr	r0, [pc, #60]	; 14df8 <bfd_arch_bits_per_address@plt+0x3a44>
   14db8:	mov	r1, r2
   14dbc:	bl	11090 <printf@plt>
   14dc0:	b	14d94 <bfd_arch_bits_per_address@plt+0x39e0>
   14dc4:	nop			; (mov r0, r0)
   14dc8:	andeq	r0, r0, r0
   14dcc:	subsmi	r0, r9, r0
   14dd0:	strdeq	lr, [r1], -ip
   14dd4:	andeq	r5, r3, r0, asr #2
   14dd8:	strdeq	r4, [r3], -r8
   14ddc:	andeq	r5, r3, r8, lsr r1
   14de0:	andeq	lr, r1, ip, asr sp
   14de4:	andeq	lr, r1, r8, ror sp
   14de8:	andeq	lr, r1, ip, asr #27
   14dec:	muleq	r1, r4, sp
   14df0:	strdeq	pc, [r1], -r0
   14df4:	muleq	r1, ip, sp
   14df8:	andeq	lr, r1, r4, lsr #27
   14dfc:	ldr	r2, [r1]
   14e00:	ldr	r3, [r0]
   14e04:	ldr	r1, [r2, #8]
   14e08:	ldr	r0, [r3, #8]
   14e0c:	b	11078 <strcmp@plt>
   14e10:	ldr	r1, [r1, #4]
   14e14:	ldr	r0, [r0, #4]
   14e18:	b	110cc <filename_cmp@plt>
   14e1c:	ldr	r3, [pc, #1108]	; 15278 <bfd_arch_bits_per_address@plt+0x3ec4>
   14e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e24:	sub	sp, sp, #92	; 0x5c
   14e28:	ldr	r3, [r3]
   14e2c:	str	r0, [sp, #36]	; 0x24
   14e30:	cmp	r3, #0
   14e34:	ldr	sl, [pc, #972]	; 15208 <bfd_arch_bits_per_address@plt+0x3e54>
   14e38:	beq	14e48 <bfd_arch_bits_per_address@plt+0x3a94>
   14e3c:	ldr	r3, [sl]
   14e40:	cmp	r3, #0
   14e44:	bne	15790 <bfd_arch_bits_per_address@plt+0x43dc>
   14e48:	ldr	r3, [pc, #956]	; 1520c <bfd_arch_bits_per_address@plt+0x3e58>
   14e4c:	ldr	r2, [r3]
   14e50:	cmp	r2, #0
   14e54:	beq	15784 <bfd_arch_bits_per_address@plt+0x43d0>
   14e58:	mov	r2, #0
   14e5c:	str	r2, [r3]
   14e60:	ldr	r3, [sl]
   14e64:	cmp	r3, #0
   14e68:	bne	14e90 <bfd_arch_bits_per_address@plt+0x3adc>
   14e6c:	ldr	r3, [pc, #1028]	; 15278 <bfd_arch_bits_per_address@plt+0x3ec4>
   14e70:	mov	r2, #5
   14e74:	ldr	r0, [pc, #1068]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14e78:	ldr	r3, [r3]
   14e7c:	cmp	r3, #0
   14e80:	ldrne	r1, [pc, #904]	; 15210 <bfd_arch_bits_per_address@plt+0x3e5c>
   14e84:	ldreq	r1, [pc, #904]	; 15214 <bfd_arch_bits_per_address@plt+0x3e60>
   14e88:	bl	11120 <dcgettext@plt>
   14e8c:	bl	11090 <printf@plt>
   14e90:	mov	r2, #5
   14e94:	ldr	r1, [pc, #892]	; 15218 <bfd_arch_bits_per_address@plt+0x3e64>
   14e98:	ldr	r0, [pc, #1032]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14e9c:	bl	11120 <dcgettext@plt>
   14ea0:	ldr	r3, [pc, #884]	; 1521c <bfd_arch_bits_per_address@plt+0x3e68>
   14ea4:	ldr	r4, [pc, #884]	; 15220 <bfd_arch_bits_per_address@plt+0x3e6c>
   14ea8:	vldr	d7, [r3]
   14eac:	vcvt.s32.f64	s15, d7
   14eb0:	vmov	r1, s15
   14eb4:	lsl	r1, r1, #1
   14eb8:	bl	11090 <printf@plt>
   14ebc:	vldr	d7, [r4]
   14ec0:	vcmpe.f64	d7, #0.0
   14ec4:	vmrs	APSR_nzcv, fpscr
   14ec8:	ble	15760 <bfd_arch_bits_per_address@plt+0x43ac>
   14ecc:	mov	r2, #5
   14ed0:	ldr	r1, [pc, #844]	; 15224 <bfd_arch_bits_per_address@plt+0x3e70>
   14ed4:	ldr	r0, [pc, #972]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14ed8:	bl	11120 <dcgettext@plt>
   14edc:	vldr	d6, [r4]
   14ee0:	vldr	d5, [pc, #792]	; 15200 <bfd_arch_bits_per_address@plt+0x3e4c>
   14ee4:	ldr	r5, [pc, #920]	; 15284 <bfd_arch_bits_per_address@plt+0x3ed0>
   14ee8:	vdiv.f64	d5, d5, d6
   14eec:	vldr	s14, [r5]
   14ef0:	vcvt.f64.s32	d7, s14
   14ef4:	vmov	r2, r3, d5
   14ef8:	vdiv.f64	d5, d6, d7
   14efc:	vstr	d5, [sp]
   14f00:	bl	11090 <printf@plt>
   14f04:	ldr	r3, [sl]
   14f08:	mov	r2, #5
   14f0c:	cmp	r3, #0
   14f10:	beq	1574c <bfd_arch_bits_per_address@plt+0x4398>
   14f14:	ldr	r1, [pc, #780]	; 15228 <bfd_arch_bits_per_address@plt+0x3e74>
   14f18:	ldr	r0, [pc, #904]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14f1c:	bl	11120 <dcgettext@plt>
   14f20:	mov	r2, #5
   14f24:	ldr	r1, [pc, #768]	; 1522c <bfd_arch_bits_per_address@plt+0x3e78>
   14f28:	ldr	r4, [pc, #872]	; 15298 <bfd_arch_bits_per_address@plt+0x3ee4>
   14f2c:	mov	r6, r0
   14f30:	ldr	r0, [pc, #880]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14f34:	bl	11120 <dcgettext@plt>
   14f38:	mov	r2, #5
   14f3c:	ldr	r1, [pc, #748]	; 15230 <bfd_arch_bits_per_address@plt+0x3e7c>
   14f40:	mov	r5, r0
   14f44:	ldr	r0, [pc, #860]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14f48:	bl	11120 <dcgettext@plt>
   14f4c:	mov	r3, r4
   14f50:	str	r6, [sp, #4]
   14f54:	str	r5, [sp, #8]
   14f58:	mov	r2, r4
   14f5c:	mov	r1, r4
   14f60:	str	r4, [sp]
   14f64:	str	r0, [sp, #12]
   14f68:	ldr	r0, [pc, #708]	; 15234 <bfd_arch_bits_per_address@plt+0x3e80>
   14f6c:	bl	11090 <printf@plt>
   14f70:	mov	r2, #5
   14f74:	ldr	r1, [pc, #700]	; 15238 <bfd_arch_bits_per_address@plt+0x3e84>
   14f78:	ldr	r0, [pc, #808]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14f7c:	bl	11120 <dcgettext@plt>
   14f80:	mov	r2, #5
   14f84:	ldr	r1, [pc, #688]	; 1523c <bfd_arch_bits_per_address@plt+0x3e88>
   14f88:	mov	r5, r0
   14f8c:	ldr	r0, [pc, #788]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14f90:	bl	11120 <dcgettext@plt>
   14f94:	mov	r2, #5
   14f98:	ldr	r1, [pc, #672]	; 15240 <bfd_arch_bits_per_address@plt+0x3e8c>
   14f9c:	mov	r6, r0
   14fa0:	ldr	r0, [pc, #768]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14fa4:	bl	11120 <dcgettext@plt>
   14fa8:	mov	r2, #5
   14fac:	ldr	r1, [pc, #656]	; 15244 <bfd_arch_bits_per_address@plt+0x3e90>
   14fb0:	mov	r7, r0
   14fb4:	ldr	r0, [pc, #748]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14fb8:	bl	11120 <dcgettext@plt>
   14fbc:	mov	r2, #5
   14fc0:	ldr	r1, [pc, #608]	; 15228 <bfd_arch_bits_per_address@plt+0x3e74>
   14fc4:	mov	fp, r0
   14fc8:	ldr	r0, [pc, #728]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14fcc:	bl	11120 <dcgettext@plt>
   14fd0:	mov	r2, #5
   14fd4:	ldr	r1, [pc, #612]	; 15240 <bfd_arch_bits_per_address@plt+0x3e8c>
   14fd8:	mov	r8, r0
   14fdc:	ldr	r0, [pc, #708]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14fe0:	bl	11120 <dcgettext@plt>
   14fe4:	mov	r2, #5
   14fe8:	ldr	r1, [pc, #600]	; 15248 <bfd_arch_bits_per_address@plt+0x3e94>
   14fec:	mov	r9, r0
   14ff0:	ldr	r0, [pc, #688]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   14ff4:	bl	11120 <dcgettext@plt>
   14ff8:	mov	r2, #5
   14ffc:	ldr	r1, [pc, #564]	; 15238 <bfd_arch_bits_per_address@plt+0x3e84>
   15000:	str	r0, [sp, #28]
   15004:	ldr	r0, [pc, #668]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   15008:	bl	11120 <dcgettext@plt>
   1500c:	ldr	r3, [sp, #28]
   15010:	mov	r2, r6
   15014:	mov	r1, r5
   15018:	str	r3, [sp, #12]
   1501c:	str	fp, [sp]
   15020:	mov	r3, r7
   15024:	strd	r8, [sp, #4]
   15028:	str	r0, [sp, #16]
   1502c:	ldr	r0, [pc, #536]	; 1524c <bfd_arch_bits_per_address@plt+0x3e98>
   15030:	bl	11090 <printf@plt>
   15034:	mov	r2, #5
   15038:	ldr	r1, [pc, #488]	; 15228 <bfd_arch_bits_per_address@plt+0x3e74>
   1503c:	ldr	r0, [pc, #612]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   15040:	bl	11120 <dcgettext@plt>
   15044:	mov	r2, #5
   15048:	ldr	r1, [pc, #476]	; 1522c <bfd_arch_bits_per_address@plt+0x3e78>
   1504c:	mov	r6, r0
   15050:	ldr	r0, [pc, #592]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   15054:	bl	11120 <dcgettext@plt>
   15058:	mov	r2, #5
   1505c:	ldr	r1, [pc, #492]	; 15250 <bfd_arch_bits_per_address@plt+0x3e9c>
   15060:	mov	r5, r0
   15064:	ldr	r0, [pc, #572]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   15068:	bl	11120 <dcgettext@plt>
   1506c:	str	r6, [sp, #4]
   15070:	str	r5, [sp, #8]
   15074:	str	r4, [sp]
   15078:	mov	r3, r4
   1507c:	mov	r2, r4
   15080:	mov	r1, r4
   15084:	str	r0, [sp, #12]
   15088:	ldr	r0, [pc, #420]	; 15234 <bfd_arch_bits_per_address@plt+0x3e80>
   1508c:	bl	11090 <printf@plt>
   15090:	mov	r0, #10
   15094:	bl	11294 <putchar@plt>
   15098:	ldr	r3, [pc, #464]	; 15270 <bfd_arch_bits_per_address@plt+0x3ebc>
   1509c:	ldr	r2, [pc, #464]	; 15274 <bfd_arch_bits_per_address@plt+0x3ec0>
   150a0:	ldr	r3, [r3]
   150a4:	ldr	r2, [r2]
   150a8:	cmn	r3, r2
   150ac:	beq	15578 <bfd_arch_bits_per_address@plt+0x41c4>
   150b0:	ldr	r3, [sp, #36]	; 0x24
   150b4:	sub	r3, r3, #4
   150b8:	str	r3, [sp, #32]
   150bc:	mov	r3, #0
   150c0:	str	r3, [sp, #28]
   150c4:	ldr	r3, [pc, #392]	; 15254 <bfd_arch_bits_per_address@plt+0x3ea0>
   150c8:	ldr	r2, [sp, #32]
   150cc:	ldr	r3, [r3]
   150d0:	ldr	r4, [r2, #4]!
   150d4:	cmp	r3, #0
   150d8:	str	r2, [sp, #32]
   150dc:	beq	15118 <bfd_arch_bits_per_address@plt+0x3d64>
   150e0:	ldr	r3, [r4, #24]
   150e4:	cmp	r3, #0
   150e8:	bne	15118 <bfd_arch_bits_per_address@plt+0x3d64>
   150ec:	ldr	r3, [r4, #136]	; 0x88
   150f0:	cmp	r3, #0
   150f4:	bne	15118 <bfd_arch_bits_per_address@plt+0x3d64>
   150f8:	vldr	d7, [r4, #176]	; 0xb0
   150fc:	vcmp.f64	d7, #0.0
   15100:	vmrs	APSR_nzcv, fpscr
   15104:	bne	15118 <bfd_arch_bits_per_address@plt+0x3d64>
   15108:	vldr	d7, [r4, #184]	; 0xb8
   1510c:	vcmp.f64	d7, #0.0
   15110:	vmrs	APSR_nzcv, fpscr
   15114:	beq	15550 <bfd_arch_bits_per_address@plt+0x419c>
   15118:	ldr	r3, [r4, #160]	; 0xa0
   1511c:	cmp	r3, #0
   15120:	beq	15550 <bfd_arch_bits_per_address@plt+0x419c>
   15124:	ldr	r3, [pc, #300]	; 15258 <bfd_arch_bits_per_address@plt+0x3ea4>
   15128:	ldr	r3, [r3]
   1512c:	cmp	r3, #0
   15130:	beq	15140 <bfd_arch_bits_per_address@plt+0x3d8c>
   15134:	ldrb	r3, [r4, #20]
   15138:	tst	r3, #1
   1513c:	beq	15550 <bfd_arch_bits_per_address@plt+0x419c>
   15140:	ldr	r5, [r4, #8]
   15144:	cmp	r5, #0
   15148:	beq	155b0 <bfd_arch_bits_per_address@plt+0x41fc>
   1514c:	ldr	r8, [r4, #196]	; 0xc4
   15150:	ldr	r3, [r4, #204]	; 0xcc
   15154:	cmp	r8, #0
   15158:	moveq	r8, r4
   1515c:	cmp	r3, #0
   15160:	beq	15664 <bfd_arch_bits_per_address@plt+0x42b0>
   15164:	ldr	r7, [r3, #32]
   15168:	add	r5, sp, #40	; 0x28
   1516c:	mov	r6, r5
   15170:	mov	r1, #0
   15174:	cmp	r7, #0
   15178:	str	r1, [sp, #72]	; 0x48
   1517c:	str	r1, [r3, #32]
   15180:	str	r3, [r6, #32]
   15184:	beq	151dc <bfd_arch_bits_per_address@plt+0x3e28>
   15188:	ldr	r1, [sp, #72]	; 0x48
   1518c:	ldr	r9, [r7, #32]
   15190:	cmp	r1, #0
   15194:	mov	r6, r5
   15198:	bne	151b0 <bfd_arch_bits_per_address@plt+0x3dfc>
   1519c:	b	151c4 <bfd_arch_bits_per_address@plt+0x3e10>
   151a0:	ldr	r6, [r6, #32]
   151a4:	ldr	r1, [r6, #32]
   151a8:	cmp	r1, #0
   151ac:	beq	151c4 <bfd_arch_bits_per_address@plt+0x3e10>
   151b0:	mov	r0, r7
   151b4:	bl	14b1c <bfd_arch_bits_per_address@plt+0x3768>
   151b8:	cmp	r0, #1
   151bc:	beq	151a0 <bfd_arch_bits_per_address@plt+0x3dec>
   151c0:	ldr	r1, [r6, #32]
   151c4:	mov	r3, r7
   151c8:	mov	r7, r9
   151cc:	cmp	r7, #0
   151d0:	str	r1, [r3, #32]
   151d4:	str	r3, [r6, #32]
   151d8:	bne	15188 <bfd_arch_bits_per_address@plt+0x3dd4>
   151dc:	ldr	r5, [sp, #72]	; 0x48
   151e0:	cmp	r5, #0
   151e4:	str	r5, [r4, #204]	; 0xcc
   151e8:	beq	1539c <bfd_arch_bits_per_address@plt+0x3fe8>
   151ec:	ldr	r7, [pc, #164]	; 15298 <bfd_arch_bits_per_address@plt+0x3ee4>
   151f0:	ldr	fp, [pc, #104]	; 15260 <bfd_arch_bits_per_address@plt+0x3eac>
   151f4:	ldr	r9, [pc, #136]	; 15284 <bfd_arch_bits_per_address@plt+0x3ed0>
   151f8:	b	15334 <bfd_arch_bits_per_address@plt+0x3f80>
   151fc:	nop			; (mov r0, r0)
   15200:	andeq	r0, r0, r0
   15204:	subsmi	r0, r9, r0
   15208:	andeq	r5, r3, r8, lsr r1
   1520c:	andeq	r4, r3, r8, ror r4
   15210:	muleq	r1, ip, lr
   15214:	andeq	lr, r1, r8, asr #29
   15218:	ldrdeq	lr, [r1], -r8
   1521c:	andeq	r5, r3, r8, asr #8
   15220:	strdeq	r4, [r3], -r8
   15224:	andeq	lr, r1, ip, lsl #30
   15228:	andeq	lr, r1, r4, asr #30
   1522c:	andeq	lr, r1, ip, asr #30
   15230:	andeq	lr, r1, r4, asr pc
   15234:	andeq	lr, r1, ip, asr pc
   15238:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1523c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15240:	andeq	lr, r1, r0, lsr #31
   15244:	andeq	lr, r1, r8, lsr #31
   15248:			; <UNDEFINED> instruction: 0x0001efb4
   1524c:			; <UNDEFINED> instruction: 0x0001efbc
   15250:	strdeq	lr, [r1], -r4
   15254:	andeq	r4, r3, r0, ror r1
   15258:	andeq	r5, r3, r8, lsr #2
   1525c:	andeq	lr, r1, r8, asr #28
   15260:	andeq	lr, r1, r4, ror lr
   15264:	andeq	lr, r1, r0, lsr #28
   15268:	strdeq	lr, [r1], -r4
   1526c:	andeq	pc, r1, r8, lsr #1
   15270:	andeq	r5, r3, r0, asr r4
   15274:	andeq	r5, r3, ip, lsl r4
   15278:	andeq	r4, r3, r8, ror #2
   1527c:	andeq	pc, r1, r4, lsr r0	; <UNPREDICTABLE>
   15280:	andeq	pc, r1, r0, ror r0	; <UNPREDICTABLE>
   15284:	andeq	r5, r3, r0, asr #2
   15288:			; <UNDEFINED> instruction: 0x0001edb4
   1528c:	andeq	lr, r1, ip, lsl #26
   15290:	andeq	lr, r1, r8, lsl lr
   15294:	ldrdeq	lr, [r1], -r4
   15298:	strdeq	pc, [r1], -r0
   1529c:	andeq	lr, r1, r4, lsl #26
   152a0:	andeq	pc, r1, r0
   152a4:	andeq	lr, r1, ip, lsr #30
   152a8:	andeq	lr, r1, r0, asr #13
   152ac:	svccc	0x00f00000	; IMB
   152b0:	andeq	lr, r1, r8, lsr r7
   152b4:	andeq	r4, r3, r4, asr #9
   152b8:	ldr	r0, [r4, #192]	; 0xc0
   152bc:	cmp	r0, #0
   152c0:	beq	152d0 <bfd_arch_bits_per_address@plt+0x3f1c>
   152c4:	ldr	ip, [r6, #192]	; 0xc0
   152c8:	cmp	r0, ip
   152cc:	beq	1534c <bfd_arch_bits_per_address@plt+0x3f98>
   152d0:	vldr	s15, [r9]
   152d4:	ldr	r3, [r8, #24]
   152d8:	ldr	r0, [sl]
   152dc:	str	r3, [sp, #20]
   152e0:	vcvt.f64.s32	d7, s15
   152e4:	ldr	r3, [r5, #8]
   152e8:	cmp	r0, #0
   152ec:	str	r3, [sp, #16]
   152f0:	vldr	d5, [r5, #24]
   152f4:	ldr	r3, [pc, #-160]	; 1525c <bfd_arch_bits_per_address@plt+0x3ea8>
   152f8:	moveq	r3, fp
   152fc:	mov	r0, r3
   15300:	vdiv.f64	d6, d5, d7
   15304:	vstr	d6, [sp, #8]
   15308:	vldr	d5, [r5, #16]
   1530c:	vdiv.f64	d6, d5, d7
   15310:	vstr	d6, [sp]
   15314:	bl	11090 <printf@plt>
   15318:	mov	r0, r6
   1531c:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   15320:	mov	r0, #10
   15324:	bl	11294 <putchar@plt>
   15328:	ldr	r5, [r5, #32]
   1532c:	cmp	r5, #0
   15330:	beq	1539c <bfd_arch_bits_per_address@plt+0x3fe8>
   15334:	ldr	r6, [r5]
   15338:	ldr	r1, [pc, #-168]	; 15298 <bfd_arch_bits_per_address@plt+0x3ee4>
   1533c:	cmp	r4, r6
   15340:	mov	r2, r7
   15344:	mov	r3, r1
   15348:	bne	152b8 <bfd_arch_bits_per_address@plt+0x3f04>
   1534c:	ldr	r0, [sl]
   15350:	ldr	ip, [pc, #-244]	; 15264 <bfd_arch_bits_per_address@plt+0x3eb0>
   15354:	cmp	r0, #0
   15358:	ldr	r1, [pc, #-248]	; 15268 <bfd_arch_bits_per_address@plt+0x3eb4>
   1535c:	str	r7, [sp, #8]
   15360:	ldr	r2, [r5, #8]
   15364:	moveq	r1, ip
   15368:	mov	r0, r1
   1536c:	str	r2, [sp, #4]
   15370:	mov	r1, r3
   15374:	mov	r2, r3
   15378:	str	r7, [sp]
   1537c:	bl	11090 <printf@plt>
   15380:	mov	r0, r6
   15384:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   15388:	mov	r0, #10
   1538c:	bl	11294 <putchar@plt>
   15390:	ldr	r5, [r5, #32]
   15394:	cmp	r5, #0
   15398:	bne	15334 <bfd_arch_bits_per_address@plt+0x3f80>
   1539c:	mov	r0, r4
   153a0:	bl	14ce0 <bfd_arch_bits_per_address@plt+0x392c>
   153a4:	ldr	r3, [r4, #208]	; 0xd0
   153a8:	mov	r1, #0
   153ac:	cmp	r3, r1
   153b0:	str	r1, [sp, #76]	; 0x4c
   153b4:	beq	15530 <bfd_arch_bits_per_address@plt+0x417c>
   153b8:	ldr	r7, [r3, #36]	; 0x24
   153bc:	add	r5, sp, #40	; 0x28
   153c0:	mov	r6, r5
   153c4:	cmp	r7, #0
   153c8:	str	r1, [r3, #36]	; 0x24
   153cc:	str	r3, [r6, #36]	; 0x24
   153d0:	beq	15428 <bfd_arch_bits_per_address@plt+0x4074>
   153d4:	ldr	r1, [sp, #76]	; 0x4c
   153d8:	ldr	r8, [r7, #36]	; 0x24
   153dc:	cmp	r1, #0
   153e0:	mov	r6, r5
   153e4:	bne	153fc <bfd_arch_bits_per_address@plt+0x4048>
   153e8:	b	15410 <bfd_arch_bits_per_address@plt+0x405c>
   153ec:	ldr	r6, [r6, #36]	; 0x24
   153f0:	ldr	r1, [r6, #36]	; 0x24
   153f4:	cmp	r1, #0
   153f8:	beq	15410 <bfd_arch_bits_per_address@plt+0x405c>
   153fc:	mov	r0, r7
   15400:	bl	14b1c <bfd_arch_bits_per_address@plt+0x3768>
   15404:	cmn	r0, #1
   15408:	beq	153ec <bfd_arch_bits_per_address@plt+0x4038>
   1540c:	ldr	r1, [r6, #36]	; 0x24
   15410:	mov	r3, r7
   15414:	mov	r7, r8
   15418:	cmp	r7, #0
   1541c:	str	r1, [r3, #36]	; 0x24
   15420:	str	r3, [r6, #36]	; 0x24
   15424:	bne	153d4 <bfd_arch_bits_per_address@plt+0x4020>
   15428:	ldr	r5, [sp, #76]	; 0x4c
   1542c:	cmp	r5, #0
   15430:	str	r5, [r4, #208]	; 0xd0
   15434:	beq	15530 <bfd_arch_bits_per_address@plt+0x417c>
   15438:	ldr	r7, [pc, #-424]	; 15298 <bfd_arch_bits_per_address@plt+0x3ee4>
   1543c:	ldr	fp, [pc, #-488]	; 1525c <bfd_arch_bits_per_address@plt+0x3ea8>
   15440:	ldr	r9, [pc, #-488]	; 15260 <bfd_arch_bits_per_address@plt+0x3eac>
   15444:	ldr	r8, [pc, #-456]	; 15284 <bfd_arch_bits_per_address@plt+0x3ed0>
   15448:	b	154c8 <bfd_arch_bits_per_address@plt+0x4114>
   1544c:	ldr	r0, [r6, #192]	; 0xc0
   15450:	cmp	r0, #0
   15454:	beq	15464 <bfd_arch_bits_per_address@plt+0x40b0>
   15458:	ldr	ip, [r4, #192]	; 0xc0
   1545c:	cmp	r0, ip
   15460:	beq	154e0 <bfd_arch_bits_per_address@plt+0x412c>
   15464:	vldr	s15, [r8]
   15468:	ldr	r3, [r6, #196]	; 0xc4
   1546c:	ldr	r0, [sl]
   15470:	ldr	r3, [r3, #24]
   15474:	vcvt.f64.s32	d7, s15
   15478:	str	r3, [sp, #20]
   1547c:	ldr	r3, [r5, #8]
   15480:	cmp	r0, #0
   15484:	str	r3, [sp, #16]
   15488:	vldr	d5, [r5, #24]
   1548c:	movne	r0, fp
   15490:	moveq	r0, r9
   15494:	vdiv.f64	d6, d5, d7
   15498:	vstr	d6, [sp, #8]
   1549c:	vldr	d5, [r5, #16]
   154a0:	vdiv.f64	d6, d5, d7
   154a4:	vstr	d6, [sp]
   154a8:	bl	11090 <printf@plt>
   154ac:	mov	r0, r6
   154b0:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   154b4:	mov	r0, #10
   154b8:	bl	11294 <putchar@plt>
   154bc:	ldr	r5, [r5, #36]	; 0x24
   154c0:	cmp	r5, #0
   154c4:	beq	15530 <bfd_arch_bits_per_address@plt+0x417c>
   154c8:	ldr	r6, [r5, #4]
   154cc:	ldr	r1, [pc, #-572]	; 15298 <bfd_arch_bits_per_address@plt+0x3ee4>
   154d0:	cmp	r4, r6
   154d4:	mov	r2, r7
   154d8:	mov	r3, r1
   154dc:	bne	1544c <bfd_arch_bits_per_address@plt+0x4098>
   154e0:	ldr	r0, [sl]
   154e4:	ldr	ip, [pc, #-648]	; 15264 <bfd_arch_bits_per_address@plt+0x3eb0>
   154e8:	cmp	r0, #0
   154ec:	ldr	r1, [pc, #-652]	; 15268 <bfd_arch_bits_per_address@plt+0x3eb4>
   154f0:	str	r7, [sp, #8]
   154f4:	ldr	r2, [r5, #8]
   154f8:	moveq	r1, ip
   154fc:	mov	r0, r1
   15500:	str	r2, [sp, #4]
   15504:	mov	r1, r3
   15508:	mov	r2, r3
   1550c:	str	r7, [sp]
   15510:	bl	11090 <printf@plt>
   15514:	mov	r0, r6
   15518:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   1551c:	mov	r0, #10
   15520:	bl	11294 <putchar@plt>
   15524:	ldr	r5, [r5, #36]	; 0x24
   15528:	cmp	r5, #0
   1552c:	bne	154c8 <bfd_arch_bits_per_address@plt+0x4114>
   15530:	ldr	r3, [sl]
   15534:	cmp	r3, #0
   15538:	bne	15658 <bfd_arch_bits_per_address@plt+0x42a4>
   1553c:	ldr	r0, [pc, #-728]	; 1526c <bfd_arch_bits_per_address@plt+0x3eb8>
   15540:	bl	111ec <puts@plt>
   15544:	ldr	r3, [sl]
   15548:	cmp	r3, #0
   1554c:	bne	155a4 <bfd_arch_bits_per_address@plt+0x41f0>
   15550:	ldr	r3, [pc, #-744]	; 15270 <bfd_arch_bits_per_address@plt+0x3ebc>
   15554:	ldr	r2, [pc, #-744]	; 15274 <bfd_arch_bits_per_address@plt+0x3ec0>
   15558:	ldr	r1, [sp, #28]
   1555c:	ldr	r3, [r3]
   15560:	ldr	r2, [r2]
   15564:	add	r1, r1, #1
   15568:	add	r3, r3, r2
   1556c:	cmp	r3, r1
   15570:	str	r1, [sp, #28]
   15574:	bhi	150c4 <bfd_arch_bits_per_address@plt+0x3d10>
   15578:	ldr	r0, [sp, #36]	; 0x24
   1557c:	bl	110a8 <free@plt>
   15580:	ldr	r3, [pc, #-784]	; 15278 <bfd_arch_bits_per_address@plt+0x3ec4>
   15584:	ldr	r3, [r3]
   15588:	cmp	r3, #0
   1558c:	beq	1559c <bfd_arch_bits_per_address@plt+0x41e8>
   15590:	ldr	r3, [sl]
   15594:	cmp	r3, #0
   15598:	beq	157a0 <bfd_arch_bits_per_address@plt+0x43ec>
   1559c:	add	sp, sp, #92	; 0x5c
   155a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155a4:	mov	r0, #10
   155a8:	bl	11294 <putchar@plt>
   155ac:	b	15550 <bfd_arch_bits_per_address@plt+0x419c>
   155b0:	ldr	r3, [r4, #192]	; 0xc0
   155b4:	cmp	r3, #0
   155b8:	beq	1514c <bfd_arch_bits_per_address@plt+0x3d98>
   155bc:	mov	r0, r4
   155c0:	bl	14a18 <bfd_arch_bits_per_address@plt+0x3664>
   155c4:	ldr	r3, [r4, #200]	; 0xc8
   155c8:	str	r5, [r4, #200]	; 0xc8
   155cc:	cmp	r3, #0
   155d0:	beq	15530 <bfd_arch_bits_per_address@plt+0x417c>
   155d4:	cmp	r5, #0
   155d8:	ldr	ip, [r3, #200]	; 0xc8
   155dc:	mov	r0, r4
   155e0:	beq	1563c <bfd_arch_bits_per_address@plt+0x4288>
   155e4:	vldr	d6, [r3, #176]	; 0xb0
   155e8:	vldr	d4, [r3, #184]	; 0xb8
   155ec:	vldr	d7, [r5, #176]	; 0xb0
   155f0:	vldr	d5, [r5, #184]	; 0xb8
   155f4:	vadd.f64	d6, d6, d4
   155f8:	vadd.f64	d7, d7, d5
   155fc:	vcmpe.f64	d6, d7
   15600:	vmrs	APSR_nzcv, fpscr
   15604:	bgt	1563c <bfd_arch_bits_per_address@plt+0x4288>
   15608:	ldr	lr, [r3, #136]	; 0x88
   1560c:	ldr	r2, [r3, #24]
   15610:	ldr	r1, [r5, #24]
   15614:	add	r2, r2, lr
   15618:	ldr	lr, [r5, #136]	; 0x88
   1561c:	bmi	1562c <bfd_arch_bits_per_address@plt+0x4278>
   15620:	add	r1, r1, lr
   15624:	cmp	r2, r1
   15628:	bhi	1563c <bfd_arch_bits_per_address@plt+0x4288>
   1562c:	mov	r0, r5
   15630:	ldr	r5, [r5, #200]	; 0xc8
   15634:	cmp	r5, #0
   15638:	bne	155e4 <bfd_arch_bits_per_address@plt+0x4230>
   1563c:	cmp	ip, #0
   15640:	str	r5, [r3, #200]	; 0xc8
   15644:	str	r3, [r0, #200]	; 0xc8
   15648:	beq	156a0 <bfd_arch_bits_per_address@plt+0x42ec>
   1564c:	mov	r3, ip
   15650:	ldr	r5, [r4, #200]	; 0xc8
   15654:	b	155d4 <bfd_arch_bits_per_address@plt+0x4220>
   15658:	mov	r0, #10
   1565c:	bl	11294 <putchar@plt>
   15660:	b	1553c <bfd_arch_bits_per_address@plt+0x4188>
   15664:	ldr	r3, [sl]
   15668:	mov	r2, #5
   1566c:	cmp	r3, #0
   15670:	ldr	r0, [pc, #-976]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   15674:	ldrne	r1, [pc, #-1024]	; 1527c <bfd_arch_bits_per_address@plt+0x3ec8>
   15678:	ldreq	r1, [pc, #-1024]	; 15280 <bfd_arch_bits_per_address@plt+0x3ecc>
   1567c:	bl	11120 <dcgettext@plt>
   15680:	ldr	r3, [pc, #-1008]	; 15298 <bfd_arch_bits_per_address@plt+0x3ee4>
   15684:	str	r3, [sp, #8]
   15688:	str	r3, [sp, #4]
   1568c:	str	r3, [sp]
   15690:	mov	r2, r3
   15694:	mov	r1, r3
   15698:	bl	11090 <printf@plt>
   1569c:	b	1539c <bfd_arch_bits_per_address@plt+0x3fe8>
   156a0:	ldr	fp, [r4, #200]	; 0xc8
   156a4:	cmp	fp, #0
   156a8:	beq	15530 <bfd_arch_bits_per_address@plt+0x417c>
   156ac:	ldr	r9, [pc, #-1072]	; 15284 <bfd_arch_bits_per_address@plt+0x3ed0>
   156b0:	ldr	r8, [pc, #-1072]	; 15288 <bfd_arch_bits_per_address@plt+0x3ed4>
   156b4:	ldr	r7, [pc, #-1064]	; 15294 <bfd_arch_bits_per_address@plt+0x3ee0>
   156b8:	ldr	r4, [pc, #-1064]	; 15298 <bfd_arch_bits_per_address@plt+0x3ee4>
   156bc:	ldr	r6, [pc, #-1080]	; 1528c <bfd_arch_bits_per_address@plt+0x3ed8>
   156c0:	ldr	r5, [pc, #-1080]	; 15290 <bfd_arch_bits_per_address@plt+0x3edc>
   156c4:	vldr	s15, [r9]
   156c8:	ldr	r3, [fp, #24]
   156cc:	ldr	r0, [sl]
   156d0:	str	r3, [sp, #16]
   156d4:	vcvt.f64.s32	d7, s15
   156d8:	vldr	d5, [fp, #184]	; 0xb8
   156dc:	cmp	r0, #0
   156e0:	mov	r2, r4
   156e4:	movne	r0, r8
   156e8:	moveq	r0, r7
   156ec:	ldr	r1, [pc, #-1116]	; 15298 <bfd_arch_bits_per_address@plt+0x3ee4>
   156f0:	vdiv.f64	d6, d5, d7
   156f4:	vstr	d6, [sp, #8]
   156f8:	vldr	d5, [fp, #176]	; 0xb0
   156fc:	vdiv.f64	d6, d5, d7
   15700:	vstr	d6, [sp]
   15704:	bl	11090 <printf@plt>
   15708:	ldr	r3, [fp, #136]	; 0x88
   1570c:	mov	r1, r4
   15710:	cmp	r3, #0
   15714:	movne	r1, r3
   15718:	mov	r0, r6
   1571c:	ldrne	r0, [pc, #-1160]	; 1529c <bfd_arch_bits_per_address@plt+0x3ee8>
   15720:	bl	11090 <printf@plt>
   15724:	mov	r0, r5
   15728:	bl	11090 <printf@plt>
   1572c:	mov	r0, fp
   15730:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   15734:	mov	r0, #10
   15738:	bl	11294 <putchar@plt>
   1573c:	ldr	fp, [fp, #200]	; 0xc8
   15740:	cmp	fp, #0
   15744:	bne	156c4 <bfd_arch_bits_per_address@plt+0x4310>
   15748:	b	15530 <bfd_arch_bits_per_address@plt+0x417c>
   1574c:	ldr	r1, [pc, #-1204]	; 152a0 <bfd_arch_bits_per_address@plt+0x3eec>
   15750:	ldr	r0, [pc, #-1200]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   15754:	bl	11120 <dcgettext@plt>
   15758:	bl	11090 <printf@plt>
   1575c:	b	15098 <bfd_arch_bits_per_address@plt+0x3ce4>
   15760:	mov	r2, #5
   15764:	ldr	r1, [pc, #-1224]	; 152a4 <bfd_arch_bits_per_address@plt+0x3ef0>
   15768:	ldr	r0, [pc, #-1224]	; 152a8 <bfd_arch_bits_per_address@plt+0x3ef4>
   1576c:	bl	11120 <dcgettext@plt>
   15770:	bl	11090 <printf@plt>
   15774:	ldr	r3, [pc, #-1232]	; 152ac <bfd_arch_bits_per_address@plt+0x3ef8>
   15778:	mov	r2, #0
   1577c:	strd	r2, [r4]
   15780:	b	14f04 <bfd_arch_bits_per_address@plt+0x3b50>
   15784:	ldr	r0, [pc, #-1244]	; 152b0 <bfd_arch_bits_per_address@plt+0x3efc>
   15788:	bl	111ec <puts@plt>
   1578c:	b	14e60 <bfd_arch_bits_per_address@plt+0x3aac>
   15790:	ldr	r3, [pc, #-1252]	; 152b4 <bfd_arch_bits_per_address@plt+0x3f00>
   15794:	ldr	r0, [r3]
   15798:	bl	1c660 <bfd_arch_bits_per_address@plt+0xb2ac>
   1579c:	b	14e48 <bfd_arch_bits_per_address@plt+0x3a94>
   157a0:	ldr	r3, [pc, #-1268]	; 152b4 <bfd_arch_bits_per_address@plt+0x3f00>
   157a4:	ldr	r0, [r3]
   157a8:	add	sp, sp, #92	; 0x5c
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157b0:	b	1cf3c <bfd_arch_bits_per_address@plt+0xbb88>
   157b4:	ldr	r3, [pc, #872]	; 15b24 <bfd_arch_bits_per_address@plt+0x4770>
   157b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157bc:	sub	sp, sp, #44	; 0x2c
   157c0:	ldr	r3, [r3]
   157c4:	ldr	r5, [pc, #860]	; 15b28 <bfd_arch_bits_per_address@plt+0x4774>
   157c8:	ldr	r4, [pc, #860]	; 15b2c <bfd_arch_bits_per_address@plt+0x4778>
   157cc:	ldr	r2, [pc, #860]	; 15b30 <bfd_arch_bits_per_address@plt+0x477c>
   157d0:	sub	r3, r3, #1
   157d4:	ldr	r0, [r5]
   157d8:	ldr	r1, [r4]
   157dc:	smull	ip, r2, r2, r3
   157e0:	add	r0, r0, r1
   157e4:	sub	r3, r2, r3, asr #31
   157e8:	lsl	r0, r0, #2
   157ec:	str	r3, [sp, #4]
   157f0:	bl	11180 <xmalloc@plt>
   157f4:	ldr	r8, [r5]
   157f8:	cmp	r8, #0
   157fc:	mov	sl, r0
   15800:	beq	15858 <bfd_arch_bits_per_address@plt+0x44a4>
   15804:	add	r8, r8, r8, lsl #1
   15808:	ldr	r2, [pc, #804]	; 15b34 <bfd_arch_bits_per_address@plt+0x4780>
   1580c:	add	r8, r8, r8, lsl #3
   15810:	ldr	r3, [r5, #4]
   15814:	ldr	r1, [r2]
   15818:	add	r2, r3, r8, lsl #3
   1581c:	mov	r8, #0
   15820:	cmp	r1, #0
   15824:	beq	15844 <bfd_arch_bits_per_address@plt+0x4490>
   15828:	ldr	r0, [r3, #24]
   1582c:	cmp	r0, #0
   15830:	bne	15844 <bfd_arch_bits_per_address@plt+0x4490>
   15834:	vldr	d7, [r3, #120]	; 0x78
   15838:	vcmp.f64	d7, #0.0
   1583c:	vmrs	APSR_nzcv, fpscr
   15840:	beq	1584c <bfd_arch_bits_per_address@plt+0x4498>
   15844:	str	r3, [sl, r8, lsl #2]
   15848:	add	r8, r8, #1
   1584c:	add	r3, r3, #216	; 0xd8
   15850:	cmp	r3, r2
   15854:	bne	15820 <bfd_arch_bits_per_address@plt+0x446c>
   15858:	ldr	r3, [pc, #728]	; 15b38 <bfd_arch_bits_per_address@plt+0x4784>
   1585c:	mov	r2, #4
   15860:	mov	r1, r8
   15864:	mov	r0, sl
   15868:	bl	11354 <qsort@plt>
   1586c:	ldr	r9, [r4]
   15870:	cmp	r9, #0
   15874:	beq	15b1c <bfd_arch_bits_per_address@plt+0x4768>
   15878:	ldr	r3, [pc, #700]	; 15b3c <bfd_arch_bits_per_address@plt+0x4788>
   1587c:	add	r9, r9, r8
   15880:	add	r2, sl, r8, lsl #2
   15884:	ldr	r3, [r3]
   15888:	add	r1, sl, r9, lsl #2
   1588c:	add	r3, r3, #216	; 0xd8
   15890:	str	r3, [r2], #4
   15894:	cmp	r2, r1
   15898:	add	r3, r3, #216	; 0xd8
   1589c:	bne	15890 <bfd_arch_bits_per_address@plt+0x44dc>
   158a0:	ldr	r0, [pc, #664]	; 15b40 <bfd_arch_bits_per_address@plt+0x478c>
   158a4:	bl	111ec <puts@plt>
   158a8:	mov	r2, #5
   158ac:	ldr	r1, [pc, #656]	; 15b44 <bfd_arch_bits_per_address@plt+0x4790>
   158b0:	ldr	r0, [pc, #656]	; 15b48 <bfd_arch_bits_per_address@plt+0x4794>
   158b4:	bl	11120 <dcgettext@plt>
   158b8:	bl	11090 <printf@plt>
   158bc:	ldr	r2, [pc, #648]	; 15b4c <bfd_arch_bits_per_address@plt+0x4798>
   158c0:	add	r3, r9, #2
   158c4:	cmp	r3, #2
   158c8:	umull	r2, r3, r2, r3
   158cc:	strhi	r8, [sp, #8]
   158d0:	lsr	r3, r3, #1
   158d4:	mov	r2, r3
   158d8:	movhi	r3, #0
   158dc:	strhi	r3, [sp, #12]
   158e0:	movhi	fp, r2
   158e4:	bls	15b0c <bfd_arch_bits_per_address@plt+0x4758>
   158e8:	ldr	r3, [sp, #12]
   158ec:	cmp	r9, r3
   158f0:	bls	15aec <bfd_arch_bits_per_address@plt+0x4738>
   158f4:	ldr	r6, [sp, #12]
   158f8:	mov	r5, #5
   158fc:	mov	r4, #0
   15900:	b	15930 <bfd_arch_bits_per_address@plt+0x457c>
   15904:	cmp	r3, #0
   15908:	beq	159a8 <bfd_arch_bits_per_address@plt+0x45f4>
   1590c:	ldr	r2, [r7, #8]
   15910:	add	r1, sp, #20
   15914:	ldr	r0, [pc, #564]	; 15b50 <bfd_arch_bits_per_address@plt+0x479c>
   15918:	bl	11090 <printf@plt>
   1591c:	add	r6, r6, fp
   15920:	ldr	r3, [sp, #4]
   15924:	cmp	r6, r9
   15928:	add	r5, r5, r3
   1592c:	bcs	15aec <bfd_arch_bits_per_address@plt+0x4738>
   15930:	ldr	r7, [sl, r6, lsl #2]
   15934:	add	r0, sp, #20
   15938:	ldr	r3, [r7, #160]	; 0xa0
   1593c:	ldr	r2, [r7, #152]	; 0x98
   15940:	cmp	r3, #0
   15944:	ldrne	r1, [pc, #520]	; 15b54 <bfd_arch_bits_per_address@plt+0x47a0>
   15948:	ldreq	r1, [pc, #520]	; 15b58 <bfd_arch_bits_per_address@plt+0x47a4>
   1594c:	bl	11324 <sprintf@plt>
   15950:	ldr	r3, [sp, #8]
   15954:	cmp	r3, r6
   15958:	ldr	r3, [pc, #508]	; 15b5c <bfd_arch_bits_per_address@plt+0x47a8>
   1595c:	ldr	r3, [r3]
   15960:	bhi	15904 <bfd_arch_bits_per_address@plt+0x4550>
   15964:	cmp	r3, #0
   15968:	beq	15a68 <bfd_arch_bits_per_address@plt+0x46b4>
   1596c:	add	r1, sp, #20
   15970:	ldr	r0, [pc, #488]	; 15b60 <bfd_arch_bits_per_address@plt+0x47ac>
   15974:	bl	11090 <printf@plt>
   15978:	mov	r2, #5
   1597c:	ldr	r1, [pc, #480]	; 15b64 <bfd_arch_bits_per_address@plt+0x47b0>
   15980:	ldr	r0, [pc, #448]	; 15b48 <bfd_arch_bits_per_address@plt+0x4794>
   15984:	bl	11120 <dcgettext@plt>
   15988:	ldr	r2, [r7, #192]	; 0xc0
   1598c:	mov	r1, r0
   15990:	add	r0, sp, #20
   15994:	bl	11324 <sprintf@plt>
   15998:	add	r1, sp, #20
   1599c:	ldr	r0, [pc, #452]	; 15b68 <bfd_arch_bits_per_address@plt+0x47b4>
   159a0:	bl	11090 <printf@plt>
   159a4:	b	1591c <bfd_arch_bits_per_address@plt+0x4568>
   159a8:	add	r0, sp, #20
   159ac:	bl	1124c <strlen@plt>
   159b0:	sub	r2, r5, #1
   159b4:	add	r8, r4, r0
   159b8:	cmp	r2, r8
   159bc:	blt	159e0 <bfd_arch_bits_per_address@plt+0x462c>
   159c0:	ldr	r4, [pc, #420]	; 15b6c <bfd_arch_bits_per_address@plt+0x47b8>
   159c4:	add	r8, r8, #1
   159c8:	ldr	r1, [r4]
   159cc:	mov	r0, #32
   159d0:	bl	11330 <putc@plt>
   159d4:	cmp	r5, r8
   159d8:	bne	159c4 <bfd_arch_bits_per_address@plt+0x4610>
   159dc:	mov	r8, r5
   159e0:	add	r1, sp, #20
   159e4:	ldr	r0, [pc, #388]	; 15b70 <bfd_arch_bits_per_address@plt+0x47bc>
   159e8:	bl	11090 <printf@plt>
   159ec:	mov	r0, r7
   159f0:	bl	1b1f0 <bfd_arch_bits_per_address@plt+0x9e3c>
   159f4:	ldr	r2, [pc, #376]	; 15b74 <bfd_arch_bits_per_address@plt+0x47c0>
   159f8:	ldr	r2, [r2]
   159fc:	cmp	r2, #0
   15a00:	add	r4, r0, r8
   15a04:	bne	1591c <bfd_arch_bits_per_address@plt+0x4568>
   15a08:	ldrb	r3, [r7, #20]
   15a0c:	tst	r3, #2
   15a10:	beq	1591c <bfd_arch_bits_per_address@plt+0x4568>
   15a14:	ldr	r3, [r7, #12]
   15a18:	cmp	r3, #0
   15a1c:	beq	1591c <bfd_arch_bits_per_address@plt+0x4568>
   15a20:	ldr	r2, [pc, #336]	; 15b78 <bfd_arch_bits_per_address@plt+0x47c4>
   15a24:	ldr	r7, [r3, #4]
   15a28:	ldr	r3, [r2]
   15a2c:	cmp	r3, #0
   15a30:	bne	15a48 <bfd_arch_bits_per_address@plt+0x4694>
   15a34:	mov	r0, r7
   15a38:	mov	r1, #47	; 0x2f
   15a3c:	bl	112e8 <strrchr@plt>
   15a40:	cmp	r0, #0
   15a44:	addne	r7, r0, #1
   15a48:	mov	r1, r7
   15a4c:	ldr	r0, [pc, #296]	; 15b7c <bfd_arch_bits_per_address@plt+0x47c8>
   15a50:	bl	11090 <printf@plt>
   15a54:	mov	r0, r7
   15a58:	bl	1124c <strlen@plt>
   15a5c:	add	r4, r4, #3
   15a60:	add	r4, r4, r0
   15a64:	b	1591c <bfd_arch_bits_per_address@plt+0x4568>
   15a68:	add	r0, sp, #20
   15a6c:	bl	1124c <strlen@plt>
   15a70:	sub	r2, r5, #1
   15a74:	add	r8, r4, r0
   15a78:	cmp	r2, r8
   15a7c:	mov	r4, r8
   15a80:	blt	15aa4 <bfd_arch_bits_per_address@plt+0x46f0>
   15a84:	ldr	r4, [pc, #224]	; 15b6c <bfd_arch_bits_per_address@plt+0x47b8>
   15a88:	add	r8, r8, #1
   15a8c:	ldr	r1, [r4]
   15a90:	mov	r0, #32
   15a94:	bl	11330 <putc@plt>
   15a98:	cmp	r5, r8
   15a9c:	bne	15a88 <bfd_arch_bits_per_address@plt+0x46d4>
   15aa0:	mov	r4, r5
   15aa4:	add	r1, sp, #20
   15aa8:	ldr	r0, [pc, #192]	; 15b70 <bfd_arch_bits_per_address@plt+0x47bc>
   15aac:	bl	11090 <printf@plt>
   15ab0:	mov	r2, #5
   15ab4:	ldr	r1, [pc, #168]	; 15b64 <bfd_arch_bits_per_address@plt+0x47b0>
   15ab8:	ldr	r0, [pc, #136]	; 15b48 <bfd_arch_bits_per_address@plt+0x4794>
   15abc:	bl	11120 <dcgettext@plt>
   15ac0:	ldr	r2, [r7, #192]	; 0xc0
   15ac4:	mov	r1, r0
   15ac8:	add	r0, sp, #20
   15acc:	bl	11324 <sprintf@plt>
   15ad0:	add	r1, sp, #20
   15ad4:	ldr	r0, [pc, #164]	; 15b80 <bfd_arch_bits_per_address@plt+0x47cc>
   15ad8:	bl	11090 <printf@plt>
   15adc:	add	r0, sp, #20
   15ae0:	bl	1124c <strlen@plt>
   15ae4:	add	r4, r0, r4
   15ae8:	b	1591c <bfd_arch_bits_per_address@plt+0x4568>
   15aec:	ldr	r3, [sp, #12]
   15af0:	mov	r0, #10
   15af4:	add	r3, r3, #1
   15af8:	mov	r4, r3
   15afc:	str	r3, [sp, #12]
   15b00:	bl	11294 <putchar@plt>
   15b04:	cmp	fp, r4
   15b08:	bhi	158e8 <bfd_arch_bits_per_address@plt+0x4534>
   15b0c:	mov	r0, sl
   15b10:	add	sp, sp, #44	; 0x2c
   15b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b18:	b	110a8 <free@plt>
   15b1c:	mov	r9, r8
   15b20:	b	158a0 <bfd_arch_bits_per_address@plt+0x44ec>
   15b24:	andeq	r4, r3, ip, ror #2
   15b28:	andeq	r5, r3, r0, asr r4
   15b2c:	andeq	r5, r3, ip, lsl r4
   15b30:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   15b34:	andeq	r4, r3, r0, ror r1
   15b38:	strdeq	r4, [r1], -ip
   15b3c:	andeq	r5, r3, r4, lsl r4
   15b40:	andeq	lr, r1, r8, lsr r7
   15b44:	ldrdeq	pc, [r1], -r8
   15b48:	andeq	lr, r1, r0, asr #13
   15b4c:	bge	feac0600 <optarg@@GLIBC_2.4+0xfea8c138>
   15b50:	strdeq	pc, [r1], -ip
   15b54:	strdeq	lr, [r1], -ip
   15b58:	strdeq	pc, [r1], -r4
   15b5c:	andeq	r5, r3, r8, lsr r1
   15b60:	andeq	pc, r1, ip, lsl r1	; <UNPREDICTABLE>
   15b64:	andeq	pc, r1, r4, lsr #2
   15b68:	andeq	pc, r1, r0, lsr r1	; <UNPREDICTABLE>
   15b6c:	andeq	r4, r3, r4, asr #9
   15b70:	andeq	pc, r1, ip, lsl #2
   15b74:	andeq	r5, r3, r8, lsr #2
   15b78:	andeq	r5, r3, ip, lsr #2
   15b7c:	andeq	pc, r1, r4, lsl r1	; <UNPREDICTABLE>
   15b80:	andeq	pc, r1, ip, lsr r1	; <UNPREDICTABLE>
   15b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b88:	vpush	{d8-d9}
   15b8c:	ldr	r5, [pc, #1404]	; 16110 <bfd_arch_bits_per_address@plt+0x4d5c>
   15b90:	mov	r6, #0
   15b94:	ldr	r7, [pc, #1416]	; 16124 <bfd_arch_bits_per_address@plt+0x4d70>
   15b98:	ldr	r0, [r5]
   15b9c:	sub	sp, sp, #60	; 0x3c
   15ba0:	lsl	r0, r0, #2
   15ba4:	str	r6, [sp, #48]	; 0x30
   15ba8:	str	r6, [sp, #52]	; 0x34
   15bac:	bl	11180 <xmalloc@plt>
   15bb0:	str	r0, [sp, #36]	; 0x24
   15bb4:	mov	r9, r0
   15bb8:	ldr	r0, [r5]
   15bbc:	lsl	r0, r0, #2
   15bc0:	bl	11180 <xmalloc@plt>
   15bc4:	str	r0, [sp, #20]
   15bc8:	mov	r8, r0
   15bcc:	ldr	r0, [r5]
   15bd0:	lsl	r0, r0, #2
   15bd4:	bl	11180 <xmalloc@plt>
   15bd8:	str	r0, [sp, #12]
   15bdc:	ldr	r0, [r7]
   15be0:	lsl	r0, r0, #2
   15be4:	bl	11180 <xmalloc@plt>
   15be8:	str	r0, [sp, #16]
   15bec:	ldr	r0, [r7]
   15bf0:	lsl	r0, r0, #2
   15bf4:	bl	11180 <xmalloc@plt>
   15bf8:	mov	r4, r0
   15bfc:	ldr	r0, [r7]
   15c00:	lsl	r0, r0, #2
   15c04:	bl	11180 <xmalloc@plt>
   15c08:	mov	r3, r5
   15c0c:	ldr	r5, [r5]
   15c10:	cmp	r5, r6
   15c14:	str	r0, [sp, #32]
   15c18:	beq	160d8 <bfd_arch_bits_per_address@plt+0x4d24>
   15c1c:	add	r5, r5, r5, lsl #1
   15c20:	ldr	r3, [r3, #4]
   15c24:	add	r1, r5, r5, lsl #3
   15c28:	mov	ip, r6
   15c2c:	mov	r5, r6
   15c30:	mov	r0, r6
   15c34:	add	r1, r3, r1, lsl #3
   15c38:	mov	lr, r9
   15c3c:	mov	r6, r8
   15c40:	ldr	r2, [r3, #24]
   15c44:	lsl	r8, r5, #2
   15c48:	cmp	r2, #0
   15c4c:	ldrb	r2, [r3, #20]
   15c50:	streq	r3, [lr, ip, lsl #2]
   15c54:	strne	r3, [r6, r8]
   15c58:	orreq	r2, r2, #16
   15c5c:	bicne	r2, r2, #16
   15c60:	strne	r0, [r3, #112]	; 0x70
   15c64:	strne	r0, [r3, #116]	; 0x74
   15c68:	strne	r0, [r3, #28]
   15c6c:	strb	r2, [r3, #20]
   15c70:	add	r3, r3, #216	; 0xd8
   15c74:	addeq	ip, ip, #1
   15c78:	addne	r5, r5, #1
   15c7c:	addne	r8, r8, #4
   15c80:	cmp	r1, r3
   15c84:	bne	15c40 <bfd_arch_bits_per_address@plt+0x488c>
   15c88:	ldr	r3, [pc, #1156]	; 16114 <bfd_arch_bits_per_address@plt+0x4d60>
   15c8c:	str	ip, [sp, #24]
   15c90:	umull	r2, r3, r3, r5
   15c94:	lsr	r3, r3, #6
   15c98:	str	r3, [sp, #40]	; 0x28
   15c9c:	ldr	r1, [pc, #1148]	; 16120 <bfd_arch_bits_per_address@plt+0x4d6c>
   15ca0:	ldr	r3, [pc, #1140]	; 1611c <bfd_arch_bits_per_address@plt+0x4d68>
   15ca4:	mov	r2, #4
   15ca8:	ldr	r0, [r1]
   15cac:	ldr	r1, [pc, #1136]	; 16124 <bfd_arch_bits_per_address@plt+0x4d70>
   15cb0:	mov	r6, r1
   15cb4:	ldr	r1, [r1]
   15cb8:	bl	11354 <qsort@plt>
   15cbc:	ldr	r3, [r6]
   15cc0:	cmp	r3, #0
   15cc4:	str	r3, [sp, #28]
   15cc8:	beq	15da8 <bfd_arch_bits_per_address@plt+0x49f4>
   15ccc:	ldr	r3, [pc, #1100]	; 16120 <bfd_arch_bits_per_address@plt+0x4d6c>
   15cd0:	mov	r0, #0
   15cd4:	mov	r1, #0
   15cd8:	ldr	r7, [r3]
   15cdc:	ldr	r3, [sp, #28]
   15ce0:	mov	r9, r7
   15ce4:	mov	r6, #0
   15ce8:	add	lr, r7, r3, lsl #2
   15cec:	sub	lr, lr, #4
   15cf0:	sub	r3, r7, #4
   15cf4:	ldr	r2, [r3, #4]!
   15cf8:	ldr	ip, [r2, #8]
   15cfc:	str	r6, [r2, #40]	; 0x28
   15d00:	adds	r0, r0, ip
   15d04:	adc	r1, r1, #0
   15d08:	cmp	lr, r3
   15d0c:	bne	15cf4 <bfd_arch_bits_per_address@plt+0x4940>
   15d10:	bl	1e598 <bfd_arch_bits_per_address@plt+0xd1e4>
   15d14:	ldr	fp, [r7]
   15d18:	vldr	d8, [pc, #1000]	; 16108 <bfd_arch_bits_per_address@plt+0x4d54>
   15d1c:	mov	r7, #0
   15d20:	vldr	s15, [fp, #8]
   15d24:	ldr	r6, [fp, #8]
   15d28:	vcvt.f64.u32	d7, s15
   15d2c:	vmov	d9, r0, r1
   15d30:	vdiv.f64	d6, d7, d9
   15d34:	vcmpe.f64	d6, d8
   15d38:	vmrs	APSR_nzcv, fpscr
   15d3c:	bgt	15da8 <bfd_arch_bits_per_address@plt+0x49f4>
   15d40:	str	r4, [sp, #44]	; 0x2c
   15d44:	mov	sl, #0
   15d48:	mov	r4, fp
   15d4c:	mov	fp, r9
   15d50:	ldr	r9, [sp, #28]
   15d54:	b	15d88 <bfd_arch_bits_per_address@plt+0x49d4>
   15d58:	ldr	r4, [fp, #4]!
   15d5c:	ldr	r2, [r4, #8]
   15d60:	adds	r6, r6, r2
   15d64:	adc	r7, r7, #0
   15d68:	mov	r0, r6
   15d6c:	mov	r1, r7
   15d70:	bl	1e598 <bfd_arch_bits_per_address@plt+0xd1e4>
   15d74:	vmov	d7, r0, r1
   15d78:	vdiv.f64	d7, d7, d9
   15d7c:	vcmpe.f64	d7, d8
   15d80:	vmrs	APSR_nzcv, fpscr
   15d84:	bgt	15da4 <bfd_arch_bits_per_address@plt+0x49f0>
   15d88:	ldr	r2, [r4, #4]
   15d8c:	add	sl, sl, #1
   15d90:	cmp	sl, r9
   15d94:	ldr	r3, [r2, #28]
   15d98:	add	r3, r3, #1
   15d9c:	str	r3, [r2, #28]
   15da0:	bne	15d58 <bfd_arch_bits_per_address@plt+0x49a4>
   15da4:	ldr	r4, [sp, #44]	; 0x2c
   15da8:	ldr	r6, [sp, #12]
   15dac:	mov	r2, r8
   15db0:	ldr	r1, [sp, #20]
   15db4:	mov	r0, r6
   15db8:	bl	110e4 <memcpy@plt>
   15dbc:	ldr	r3, [pc, #852]	; 16118 <bfd_arch_bits_per_address@plt+0x4d64>
   15dc0:	mov	r2, #4
   15dc4:	mov	r1, r5
   15dc8:	mov	r0, r6
   15dcc:	bl	11354 <qsort@plt>
   15dd0:	cmp	r5, #79	; 0x4f
   15dd4:	bls	160f0 <bfd_arch_bits_per_address@plt+0x4d3c>
   15dd8:	ldr	r3, [sp, #12]
   15ddc:	ldr	r9, [sp, #52]	; 0x34
   15de0:	ldr	lr, [r3]
   15de4:	ldr	r3, [lr, #28]
   15de8:	cmp	r3, #5
   15dec:	beq	16128 <bfd_arch_bits_per_address@plt+0x4d74>
   15df0:	mov	ip, #0
   15df4:	ldr	r7, [sp, #12]
   15df8:	ldr	sl, [sp, #40]	; 0x28
   15dfc:	mov	r6, ip
   15e00:	mov	r2, r9
   15e04:	mov	r1, #1
   15e08:	ldr	r3, [lr, #208]	; 0xd0
   15e0c:	cmp	r3, #0
   15e10:	beq	15e3c <bfd_arch_bits_per_address@plt+0x4a88>
   15e14:	ldr	r8, [r3]
   15e18:	ldr	r0, [r3, #4]
   15e1c:	cmp	r8, r0
   15e20:	strne	r3, [r4, r2, lsl #2]
   15e24:	str	r1, [r3, #40]	; 0x28
   15e28:	ldr	r3, [r3, #36]	; 0x24
   15e2c:	movne	ip, #1
   15e30:	addne	r2, r2, ip
   15e34:	cmp	r3, #0
   15e38:	bne	15e14 <bfd_arch_bits_per_address@plt+0x4a60>
   15e3c:	ldr	r3, [lr, #204]	; 0xcc
   15e40:	cmp	r3, #0
   15e44:	beq	15e70 <bfd_arch_bits_per_address@plt+0x4abc>
   15e48:	ldr	r8, [r3]
   15e4c:	ldr	r0, [r3, #4]
   15e50:	cmp	r8, r0
   15e54:	strne	r3, [r4, r2, lsl #2]
   15e58:	str	r1, [r3, #40]	; 0x28
   15e5c:	ldr	r3, [r3, #32]
   15e60:	movne	ip, #1
   15e64:	addne	r2, r2, ip
   15e68:	cmp	r3, #0
   15e6c:	bne	15e48 <bfd_arch_bits_per_address@plt+0x4a94>
   15e70:	ldrb	r3, [lr, #20]
   15e74:	add	r0, r6, #1
   15e78:	cmp	r0, sl
   15e7c:	orr	r3, r3, #16
   15e80:	strb	r3, [lr, #20]
   15e84:	bcs	15e9c <bfd_arch_bits_per_address@plt+0x4ae8>
   15e88:	ldr	lr, [r7, #4]!
   15e8c:	ldr	r3, [lr, #28]
   15e90:	cmp	r3, #5
   15e94:	movne	r6, r0
   15e98:	bne	15e08 <bfd_arch_bits_per_address@plt+0x4a54>
   15e9c:	cmp	ip, #0
   15ea0:	moveq	r2, r9
   15ea4:	strne	r2, [sp, #52]	; 0x34
   15ea8:	cmp	r2, #0
   15eac:	beq	160e8 <bfd_arch_bits_per_address@plt+0x4d34>
   15eb0:	mov	r7, #0
   15eb4:	ldr	r9, [sp, #16]
   15eb8:	mov	r3, r7
   15ebc:	sub	ip, r4, #4
   15ec0:	ldr	r1, [ip, #4]!
   15ec4:	add	r3, r3, #1
   15ec8:	ldr	r0, [r1, #4]
   15ecc:	ldrb	lr, [r0, #20]
   15ed0:	tst	lr, #16
   15ed4:	beq	15f08 <bfd_arch_bits_per_address@plt+0x4b54>
   15ed8:	ldr	lr, [r1]
   15edc:	ldrb	r8, [lr, #20]
   15ee0:	tst	r8, #16
   15ee4:	beq	15f08 <bfd_arch_bits_per_address@plt+0x4b54>
   15ee8:	str	r1, [r9, r7, lsl #2]
   15eec:	ldrb	r1, [r0, #20]
   15ef0:	add	r7, r7, #1
   15ef4:	bic	r1, r1, #16
   15ef8:	strb	r1, [r0, #20]
   15efc:	ldrb	r1, [lr, #20]
   15f00:	bic	r1, r1, #16
   15f04:	strb	r1, [lr, #20]
   15f08:	cmp	r3, r2
   15f0c:	bcc	15ec0 <bfd_arch_bits_per_address@plt+0x4b0c>
   15f10:	cmp	r6, #0
   15f14:	beq	15f50 <bfd_arch_bits_per_address@plt+0x4b9c>
   15f18:	ldr	r3, [sp, #12]
   15f1c:	sub	r8, r3, #4
   15f20:	add	r6, r8, r6, lsl #2
   15f24:	b	15f30 <bfd_arch_bits_per_address@plt+0x4b7c>
   15f28:	cmp	r6, r8
   15f2c:	beq	15f50 <bfd_arch_bits_per_address@plt+0x4b9c>
   15f30:	ldr	r3, [r8, #4]!
   15f34:	ldrb	r2, [r3, #20]
   15f38:	tst	r2, #16
   15f3c:	beq	15f28 <bfd_arch_bits_per_address@plt+0x4b74>
   15f40:	ldr	r0, [r3, #8]
   15f44:	bl	111ec <puts@plt>
   15f48:	cmp	r6, r8
   15f4c:	bne	15f30 <bfd_arch_bits_per_address@plt+0x4b7c>
   15f50:	ldr	r8, [sp, #16]
   15f54:	mov	r1, r7
   15f58:	ldr	r3, [pc, #444]	; 1611c <bfd_arch_bits_per_address@plt+0x4d68>
   15f5c:	mov	r2, #4
   15f60:	mov	r0, r8
   15f64:	bl	11354 <qsort@plt>
   15f68:	mov	r1, r7
   15f6c:	ldr	r7, [sp, #32]
   15f70:	add	r6, sp, #48	; 0x30
   15f74:	mov	r0, r8
   15f78:	mov	r3, r7
   15f7c:	mov	r2, #1
   15f80:	str	r6, [sp]
   15f84:	bl	14550 <bfd_arch_bits_per_address@plt+0x319c>
   15f88:	ldr	r3, [pc, #400]	; 16120 <bfd_arch_bits_per_address@plt+0x4d6c>
   15f8c:	ldr	r1, [pc, #400]	; 16124 <bfd_arch_bits_per_address@plt+0x4d70>
   15f90:	str	r6, [sp]
   15f94:	mov	r2, #0
   15f98:	ldr	r0, [r3]
   15f9c:	ldr	r1, [r1]
   15fa0:	mov	r3, r7
   15fa4:	bl	14550 <bfd_arch_bits_per_address@plt+0x319c>
   15fa8:	add	r2, sp, #52	; 0x34
   15fac:	str	r2, [sp]
   15fb0:	mov	r3, r4
   15fb4:	mov	r0, r7
   15fb8:	mov	r2, #1
   15fbc:	ldr	r1, [sp, #48]	; 0x30
   15fc0:	bl	14550 <bfd_arch_bits_per_address@plt+0x319c>
   15fc4:	cmp	r5, #0
   15fc8:	beq	16004 <bfd_arch_bits_per_address@plt+0x4c50>
   15fcc:	ldr	r3, [sp, #20]
   15fd0:	sub	r4, r3, #4
   15fd4:	add	r5, r4, r5, lsl #2
   15fd8:	b	15fe4 <bfd_arch_bits_per_address@plt+0x4c30>
   15fdc:	cmp	r5, r4
   15fe0:	beq	16004 <bfd_arch_bits_per_address@plt+0x4c50>
   15fe4:	ldr	r3, [r4, #4]!
   15fe8:	ldrb	r2, [r3, #20]
   15fec:	tst	r2, #16
   15ff0:	bne	15fdc <bfd_arch_bits_per_address@plt+0x4c28>
   15ff4:	ldr	r0, [r3, #8]
   15ff8:	bl	111ec <puts@plt>
   15ffc:	cmp	r5, r4
   16000:	bne	15fe4 <bfd_arch_bits_per_address@plt+0x4c30>
   16004:	ldr	r3, [sp, #24]
   16008:	cmp	r3, #0
   1600c:	beq	16034 <bfd_arch_bits_per_address@plt+0x4c80>
   16010:	ldr	r3, [sp, #36]	; 0x24
   16014:	sub	r4, r3, #4
   16018:	ldr	r3, [sp, #24]
   1601c:	add	r5, r4, r3, lsl #2
   16020:	ldr	r3, [r4, #4]!
   16024:	ldr	r0, [r3, #8]
   16028:	bl	111ec <puts@plt>
   1602c:	cmp	r5, r4
   16030:	bne	16020 <bfd_arch_bits_per_address@plt+0x4c6c>
   16034:	ldr	r4, [pc, #212]	; 16110 <bfd_arch_bits_per_address@plt+0x4d5c>
   16038:	ldr	r0, [r4]
   1603c:	lsl	r0, r0, #2
   16040:	bl	11180 <xmalloc@plt>
   16044:	mov	r9, r0
   16048:	ldr	r0, [r4]
   1604c:	lsl	r0, r0, #2
   16050:	bl	11180 <xmalloc@plt>
   16054:	mov	r8, r0
   16058:	ldr	r0, [r4]
   1605c:	ldr	r4, [pc, #192]	; 16124 <bfd_arch_bits_per_address@plt+0x4d70>
   16060:	lsl	r0, r0, #2
   16064:	bl	11180 <xmalloc@plt>
   16068:	mov	r7, r0
   1606c:	ldr	r0, [r4]
   16070:	lsl	r0, r0, #2
   16074:	bl	11180 <xmalloc@plt>
   16078:	mov	r6, r0
   1607c:	ldr	r0, [r4]
   16080:	lsl	r0, r0, #2
   16084:	bl	11180 <xmalloc@plt>
   16088:	mov	r5, r0
   1608c:	ldr	r0, [r4]
   16090:	lsl	r0, r0, #2
   16094:	bl	11180 <xmalloc@plt>
   16098:	mov	r4, r0
   1609c:	mov	r0, r9
   160a0:	bl	110a8 <free@plt>
   160a4:	mov	r0, r8
   160a8:	bl	110a8 <free@plt>
   160ac:	mov	r0, r7
   160b0:	bl	110a8 <free@plt>
   160b4:	mov	r0, r6
   160b8:	bl	110a8 <free@plt>
   160bc:	mov	r0, r5
   160c0:	bl	110a8 <free@plt>
   160c4:	mov	r0, r4
   160c8:	add	sp, sp, #60	; 0x3c
   160cc:	vpop	{d8-d9}
   160d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160d4:	b	110a8 <free@plt>
   160d8:	str	r5, [sp, #40]	; 0x28
   160dc:	mov	r8, r5
   160e0:	str	r5, [sp, #24]
   160e4:	b	15c9c <bfd_arch_bits_per_address@plt+0x48e8>
   160e8:	mov	r7, r2
   160ec:	b	15f10 <bfd_arch_bits_per_address@plt+0x4b5c>
   160f0:	ldr	r2, [sp, #52]	; 0x34
   160f4:	cmp	r2, #0
   160f8:	moveq	r7, r2
   160fc:	beq	15f50 <bfd_arch_bits_per_address@plt+0x4b9c>
   16100:	mov	r6, #0
   16104:	b	15eb0 <bfd_arch_bits_per_address@plt+0x4afc>
   16108:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1610c:	svccc	0x00eccccc
   16110:	andeq	r5, r3, r0, asr r4
   16114:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16118:	andeq	r4, r1, r4, lsr #10
   1611c:	strdeq	r4, [r1], -r8
   16120:	andeq	r5, r3, r8, lsl r4
   16124:	andeq	r5, r3, r0, lsl r4
   16128:	cmp	r9, #0
   1612c:	movne	r2, r9
   16130:	bne	16100 <bfd_arch_bits_per_address@plt+0x4d4c>
   16134:	ldr	r7, [sp, #16]
   16138:	mov	r1, r9
   1613c:	mov	r0, r7
   16140:	ldr	r3, [pc, #-44]	; 1611c <bfd_arch_bits_per_address@plt+0x4d68>
   16144:	mov	r2, #4
   16148:	bl	11354 <qsort@plt>
   1614c:	mov	r0, r7
   16150:	ldr	r7, [sp, #32]
   16154:	add	r6, sp, #48	; 0x30
   16158:	mov	r3, r7
   1615c:	mov	r1, r9
   16160:	str	r6, [sp]
   16164:	mov	r2, #1
   16168:	bl	14550 <bfd_arch_bits_per_address@plt+0x319c>
   1616c:	ldr	r3, [pc, #-84]	; 16120 <bfd_arch_bits_per_address@plt+0x4d6c>
   16170:	ldr	r1, [pc, #-84]	; 16124 <bfd_arch_bits_per_address@plt+0x4d70>
   16174:	str	r6, [sp]
   16178:	mov	r2, r9
   1617c:	ldr	r0, [r3]
   16180:	ldr	r1, [r1]
   16184:	mov	r3, r7
   16188:	bl	14550 <bfd_arch_bits_per_address@plt+0x319c>
   1618c:	add	r2, sp, #52	; 0x34
   16190:	str	r2, [sp]
   16194:	mov	r3, r4
   16198:	mov	r0, r7
   1619c:	mov	r2, #1
   161a0:	ldr	r1, [sp, #48]	; 0x30
   161a4:	bl	14550 <bfd_arch_bits_per_address@plt+0x319c>
   161a8:	b	15fcc <bfd_arch_bits_per_address@plt+0x4c18>
   161ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161b0:	sub	sp, sp, #16
   161b4:	ldr	r4, [pc, #512]	; 163bc <bfd_arch_bits_per_address@plt+0x5008>
   161b8:	mov	r3, #0
   161bc:	str	r3, [sp, #12]
   161c0:	ldr	r0, [r4]
   161c4:	lsl	r0, r0, #2
   161c8:	bl	11180 <xmalloc@plt>
   161cc:	ldr	r1, [r4]
   161d0:	ldr	r2, [pc, #488]	; 163c0 <bfd_arch_bits_per_address@plt+0x500c>
   161d4:	cmp	r1, #0
   161d8:	mov	r3, r0
   161dc:	beq	163b4 <bfd_arch_bits_per_address@plt+0x5000>
   161e0:	ldr	r0, [r2]
   161e4:	mov	r5, #1
   161e8:	add	r4, r0, r1, lsl #2
   161ec:	sub	r4, r4, #4
   161f0:	sub	ip, r0, #4
   161f4:	ldr	r2, [ip, #4]!
   161f8:	ldr	lr, [r2]
   161fc:	ldrb	lr, [lr, #20]
   16200:	tst	lr, #8
   16204:	beq	16218 <bfd_arch_bits_per_address@plt+0x4e64>
   16208:	ldr	lr, [r2, #4]
   1620c:	ldrb	lr, [lr, #20]
   16210:	tst	lr, #8
   16214:	bne	1621c <bfd_arch_bits_per_address@plt+0x4e68>
   16218:	str	r5, [r2, #40]	; 0x28
   1621c:	cmp	r4, ip
   16220:	bne	161f4 <bfd_arch_bits_per_address@plt+0x4e40>
   16224:	ldr	r4, [pc, #408]	; 163c4 <bfd_arch_bits_per_address@plt+0x5010>
   16228:	add	r2, sp, #12
   1622c:	str	r2, [sp]
   16230:	mov	r2, #0
   16234:	bl	14550 <bfd_arch_bits_per_address@plt+0x319c>
   16238:	ldr	r3, [r4]
   1623c:	cmp	r3, #0
   16240:	movne	r5, #0
   16244:	movne	r6, r5
   16248:	bne	1625c <bfd_arch_bits_per_address@plt+0x4ea8>
   1624c:	b	16290 <bfd_arch_bits_per_address@plt+0x4edc>
   16250:	ldr	r3, [r4]
   16254:	cmp	r3, r6
   16258:	bls	16290 <bfd_arch_bits_per_address@plt+0x4edc>
   1625c:	ldr	r3, [r4, #4]
   16260:	add	r6, r6, #1
   16264:	add	r3, r3, r5
   16268:	add	r5, r5, #216	; 0xd8
   1626c:	ldrb	r2, [r3, #20]
   16270:	and	r2, r2, #24
   16274:	cmp	r2, #8
   16278:	bne	16250 <bfd_arch_bits_per_address@plt+0x4e9c>
   1627c:	ldr	r0, [r3, #8]
   16280:	bl	111ec <puts@plt>
   16284:	ldr	r3, [r4]
   16288:	cmp	r3, r6
   1628c:	bhi	1625c <bfd_arch_bits_per_address@plt+0x4ea8>
   16290:	ldr	r8, [pc, #304]	; 163c8 <bfd_arch_bits_per_address@plt+0x5014>
   16294:	ldr	r6, [pc, #304]	; 163cc <bfd_arch_bits_per_address@plt+0x5018>
   16298:	ldr	r3, [pc, #304]	; 163d0 <bfd_arch_bits_per_address@plt+0x501c>
   1629c:	ldr	r1, [r8]
   162a0:	ldr	r0, [r6]
   162a4:	mov	r2, #12
   162a8:	bl	11354 <qsort@plt>
   162ac:	ldr	r3, [r8]
   162b0:	cmp	r3, #0
   162b4:	movne	r5, #0
   162b8:	movne	sl, r5
   162bc:	movne	r7, r5
   162c0:	bne	162dc <bfd_arch_bits_per_address@plt+0x4f28>
   162c4:	b	163ac <bfd_arch_bits_per_address@plt+0x4ff8>
   162c8:	ldr	r3, [r8]
   162cc:	add	r7, r7, #1
   162d0:	cmp	r3, r7
   162d4:	add	r5, r5, #12
   162d8:	bls	163ac <bfd_arch_bits_per_address@plt+0x4ff8>
   162dc:	ldr	r3, [r6]
   162e0:	cmp	sl, #0
   162e4:	add	r3, r3, r5
   162e8:	ldr	r1, [r3, #4]
   162ec:	beq	16388 <bfd_arch_bits_per_address@plt+0x4fd4>
   162f0:	mov	r0, sl
   162f4:	bl	110cc <filename_cmp@plt>
   162f8:	cmp	r0, #0
   162fc:	beq	162c8 <bfd_arch_bits_per_address@plt+0x4f14>
   16300:	ldr	r3, [r6]
   16304:	add	r3, r3, r5
   16308:	ldr	sl, [r3, #4]
   1630c:	ldr	r3, [r4]
   16310:	cmp	r3, #0
   16314:	movne	r9, #0
   16318:	beq	16370 <bfd_arch_bits_per_address@plt+0x4fbc>
   1631c:	add	r3, r9, r9, lsl #1
   16320:	ldr	r2, [r4, #4]
   16324:	add	r3, r3, r3, lsl #3
   16328:	mov	r1, sl
   1632c:	add	r3, r2, r3, lsl #3
   16330:	ldrb	r2, [r3, #20]
   16334:	tst	r2, #8
   16338:	beq	16358 <bfd_arch_bits_per_address@plt+0x4fa4>
   1633c:	ldr	r0, [r3, #8]
   16340:	bl	110cc <filename_cmp@plt>
   16344:	cmp	r0, #0
   16348:	beq	16390 <bfd_arch_bits_per_address@plt+0x4fdc>
   1634c:	ldr	r3, [r6]
   16350:	add	r3, r3, r5
   16354:	ldr	sl, [r3, #4]
   16358:	ldr	r3, [r4]
   1635c:	add	r9, r9, #1
   16360:	cmp	r3, r9
   16364:	bhi	1631c <bfd_arch_bits_per_address@plt+0x4f68>
   16368:	cmp	r9, r3
   1636c:	bne	162c8 <bfd_arch_bits_per_address@plt+0x4f14>
   16370:	mov	r0, sl
   16374:	bl	111ec <puts@plt>
   16378:	ldr	r3, [r6]
   1637c:	add	r3, r3, r5
   16380:	ldr	sl, [r3, #4]
   16384:	b	162c8 <bfd_arch_bits_per_address@plt+0x4f14>
   16388:	mov	sl, r1
   1638c:	b	1630c <bfd_arch_bits_per_address@plt+0x4f58>
   16390:	ldr	r2, [r6]
   16394:	ldr	r3, [r4]
   16398:	add	r2, r2, r5
   1639c:	cmp	r9, r3
   163a0:	ldr	sl, [r2, #4]
   163a4:	bne	162c8 <bfd_arch_bits_per_address@plt+0x4f14>
   163a8:	b	16370 <bfd_arch_bits_per_address@plt+0x4fbc>
   163ac:	add	sp, sp, #16
   163b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163b4:	ldr	r0, [r2]
   163b8:	b	16224 <bfd_arch_bits_per_address@plt+0x4e70>
   163bc:	andeq	r5, r3, r0, lsl r4
   163c0:	andeq	r5, r3, r8, lsl r4
   163c4:	andeq	r5, r3, r0, asr r4
   163c8:	andeq	r5, r3, ip, lsr #8
   163cc:	andeq	r5, r3, r8, lsr #8
   163d0:	andeq	r4, r1, r0, lsl lr
   163d4:	ldr	r3, [pc, #56]	; 16414 <bfd_arch_bits_per_address@plt+0x5060>
   163d8:	push	{r4, lr}
   163dc:	mov	r5, r0
   163e0:	mov	r2, #5
   163e4:	ldr	r1, [pc, #44]	; 16418 <bfd_arch_bits_per_address@plt+0x5064>
   163e8:	ldr	r0, [pc, #44]	; 1641c <bfd_arch_bits_per_address@plt+0x5068>
   163ec:	ldr	r4, [r3]
   163f0:	bl	11120 <dcgettext@plt>
   163f4:	ldr	r2, [pc, #36]	; 16420 <bfd_arch_bits_per_address@plt+0x506c>
   163f8:	mov	r3, r5
   163fc:	ldr	r2, [r2]
   16400:	mov	r1, r0
   16404:	mov	r0, r4
   16408:	bl	11270 <fprintf@plt>
   1640c:	mov	r0, #1
   16410:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   16414:			; <UNDEFINED> instruction: 0x000344b8
   16418:	andeq	pc, r1, r0, asr #2
   1641c:	andeq	lr, r1, r0, asr #13
   16420:	andeq	r5, r3, ip, lsr r4
   16424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16428:	sub	sp, sp, #1024	; 0x400
   1642c:	sub	sp, sp, #12
   16430:	ldr	r1, [pc, #652]	; 166c4 <bfd_arch_bits_per_address@plt+0x5310>
   16434:	str	r0, [sp, #4]
   16438:	bl	1133c <fopen64@plt>
   1643c:	subs	r4, r0, #0
   16440:	beq	1668c <bfd_arch_bits_per_address@plt+0x52d8>
   16444:	ldr	r7, [pc, #636]	; 166c8 <bfd_arch_bits_per_address@plt+0x5314>
   16448:	ldr	r6, [pc, #636]	; 166cc <bfd_arch_bits_per_address@plt+0x5318>
   1644c:	ldr	r9, [pc, #636]	; 166d0 <bfd_arch_bits_per_address@plt+0x531c>
   16450:	ldr	r8, [pc, #636]	; 166d4 <bfd_arch_bits_per_address@plt+0x5320>
   16454:	mov	r5, #0
   16458:	mov	r0, r4
   1645c:	bl	11234 <feof@plt>
   16460:	cmp	r0, #0
   16464:	bne	164e0 <bfd_arch_bits_per_address@plt+0x512c>
   16468:	add	r2, sp, #8
   1646c:	mov	r1, r7
   16470:	mov	r0, r4
   16474:	bl	112ac <fscanf@plt>
   16478:	cmp	r0, #0
   1647c:	beq	164ac <bfd_arch_bits_per_address@plt+0x50f8>
   16480:	mov	r2, #14
   16484:	mov	r1, r6
   16488:	add	r0, sp, #8
   1648c:	bl	1139c <strncmp@plt>
   16490:	cmp	r0, #0
   16494:	bne	164b4 <bfd_arch_bits_per_address@plt+0x5100>
   16498:	mov	r1, r8
   1649c:	mov	r0, r4
   164a0:	bl	112ac <fscanf@plt>
   164a4:	cmn	r0, #1
   164a8:	bne	16458 <bfd_arch_bits_per_address@plt+0x50a4>
   164ac:	ldr	r0, [sp, #4]
   164b0:	bl	163d4 <bfd_arch_bits_per_address@plt+0x5020>
   164b4:	add	r2, sp, #8
   164b8:	mov	r1, r9
   164bc:	mov	r0, r4
   164c0:	bl	112ac <fscanf@plt>
   164c4:	cmp	r0, #0
   164c8:	beq	164ac <bfd_arch_bits_per_address@plt+0x50f8>
   164cc:	mov	r0, r4
   164d0:	bl	11234 <feof@plt>
   164d4:	add	r5, r5, #1
   164d8:	cmp	r0, #0
   164dc:	beq	16468 <bfd_arch_bits_per_address@plt+0x50b4>
   164e0:	add	r5, r5, r5, lsl #1
   164e4:	ldr	r6, [pc, #492]	; 166d8 <bfd_arch_bits_per_address@plt+0x5324>
   164e8:	lsl	r0, r5, #2
   164ec:	bl	11180 <xmalloc@plt>
   164f0:	mov	r5, #0
   164f4:	ldr	r8, [pc, #460]	; 166c8 <bfd_arch_bits_per_address@plt+0x5314>
   164f8:	ldr	r7, [pc, #460]	; 166cc <bfd_arch_bits_per_address@plt+0x5318>
   164fc:	str	r0, [r6]
   16500:	mov	r0, r4
   16504:	bl	1112c <rewind@plt>
   16508:	mov	r0, r4
   1650c:	bl	11234 <feof@plt>
   16510:	cmp	r0, #0
   16514:	bne	1656c <bfd_arch_bits_per_address@plt+0x51b8>
   16518:	add	r2, sp, #8
   1651c:	mov	r1, r8
   16520:	mov	r0, r4
   16524:	bl	112ac <fscanf@plt>
   16528:	cmp	r0, #0
   1652c:	beq	164ac <bfd_arch_bits_per_address@plt+0x50f8>
   16530:	mov	r2, #14
   16534:	mov	r1, r7
   16538:	add	r0, sp, #8
   1653c:	bl	1139c <strncmp@plt>
   16540:	cmp	r0, #0
   16544:	bne	165d8 <bfd_arch_bits_per_address@plt+0x5224>
   16548:	ldr	r1, [pc, #388]	; 166d4 <bfd_arch_bits_per_address@plt+0x5320>
   1654c:	mov	r0, r4
   16550:	bl	112ac <fscanf@plt>
   16554:	cmn	r0, #1
   16558:	beq	164ac <bfd_arch_bits_per_address@plt+0x50f8>
   1655c:	mov	r0, r4
   16560:	bl	11234 <feof@plt>
   16564:	cmp	r0, #0
   16568:	beq	16518 <bfd_arch_bits_per_address@plt+0x5164>
   1656c:	ldr	r8, [pc, #360]	; 166dc <bfd_arch_bits_per_address@plt+0x5328>
   16570:	cmp	r5, #0
   16574:	ldr	r0, [r6]
   16578:	str	r5, [r8]
   1657c:	beq	16668 <bfd_arch_bits_per_address@plt+0x52b4>
   16580:	mov	r7, #0
   16584:	mov	r5, r7
   16588:	b	165ac <bfd_arch_bits_per_address@plt+0x51f8>
   1658c:	ldrb	r2, [r3, #8]
   16590:	orr	r2, r2, #1
   16594:	strb	r2, [r3, #8]
   16598:	ldr	r1, [r8]
   1659c:	add	r5, r5, #1
   165a0:	cmp	r1, r5
   165a4:	add	r7, r7, #12
   165a8:	bls	1666c <bfd_arch_bits_per_address@plt+0x52b8>
   165ac:	cmp	r5, #0
   165b0:	add	r3, r0, r7
   165b4:	beq	1658c <bfd_arch_bits_per_address@plt+0x51d8>
   165b8:	ldr	r1, [r3, #-8]
   165bc:	ldr	r0, [r3, #4]
   165c0:	bl	110cc <filename_cmp@plt>
   165c4:	cmp	r0, #0
   165c8:	ldr	r0, [r6]
   165cc:	beq	16598 <bfd_arch_bits_per_address@plt+0x51e4>
   165d0:	add	r3, r0, r7
   165d4:	b	1658c <bfd_arch_bits_per_address@plt+0x51d8>
   165d8:	add	r0, sp, #8
   165dc:	bl	1124c <strlen@plt>
   165e0:	add	fp, r5, r5, lsl #1
   165e4:	ldr	r2, [r6]
   165e8:	lsl	sl, fp, #2
   165ec:	add	r9, r2, sl
   165f0:	add	r0, r0, #1
   165f4:	bl	11180 <xmalloc@plt>
   165f8:	ldr	ip, [r6]
   165fc:	add	r1, sp, #8
   16600:	add	ip, ip, sl
   16604:	str	r0, [r9, #4]
   16608:	ldr	r0, [ip, #4]
   1660c:	bl	111a4 <strcpy@plt>
   16610:	add	r2, sp, #8
   16614:	ldr	r1, [pc, #180]	; 166d0 <bfd_arch_bits_per_address@plt+0x531c>
   16618:	mov	r0, r4
   1661c:	bl	112ac <fscanf@plt>
   16620:	cmp	r0, #0
   16624:	beq	164ac <bfd_arch_bits_per_address@plt+0x50f8>
   16628:	mov	r1, #32
   1662c:	add	r0, sp, #8
   16630:	bl	112e8 <strrchr@plt>
   16634:	add	r5, r5, #1
   16638:	add	sl, r0, #1
   1663c:	mov	r0, sl
   16640:	bl	1124c <strlen@plt>
   16644:	ldr	r9, [r6]
   16648:	add	r0, r0, #1
   1664c:	bl	11180 <xmalloc@plt>
   16650:	ldr	ip, [r6]
   16654:	mov	r1, sl
   16658:	str	r0, [r9, fp, lsl #2]
   1665c:	ldr	r0, [ip, fp, lsl #2]
   16660:	bl	111a4 <strcpy@plt>
   16664:	b	16508 <bfd_arch_bits_per_address@plt+0x5154>
   16668:	mov	r1, r5
   1666c:	ldr	r3, [pc, #108]	; 166e0 <bfd_arch_bits_per_address@plt+0x532c>
   16670:	mov	r2, #12
   16674:	bl	11354 <qsort@plt>
   16678:	mov	r0, r4
   1667c:	bl	112d0 <fclose@plt>
   16680:	add	sp, sp, #1024	; 0x400
   16684:	add	sp, sp, #12
   16688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1668c:	ldr	r3, [pc, #80]	; 166e4 <bfd_arch_bits_per_address@plt+0x5330>
   16690:	mov	r2, #5
   16694:	ldr	r1, [pc, #76]	; 166e8 <bfd_arch_bits_per_address@plt+0x5334>
   16698:	ldr	r0, [pc, #76]	; 166ec <bfd_arch_bits_per_address@plt+0x5338>
   1669c:	ldr	r4, [r3]
   166a0:	bl	11120 <dcgettext@plt>
   166a4:	ldr	r2, [pc, #68]	; 166f0 <bfd_arch_bits_per_address@plt+0x533c>
   166a8:	ldr	r3, [sp, #4]
   166ac:	ldr	r2, [r2]
   166b0:	mov	r1, r0
   166b4:	mov	r0, r4
   166b8:	bl	11270 <fprintf@plt>
   166bc:	mov	r0, #1
   166c0:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   166c4:	andeq	pc, r1, r8, ror #2
   166c8:	andeq	pc, r1, r4, lsl #3
   166cc:	muleq	r1, r0, r1
   166d0:	andeq	pc, r1, r0, lsr #3
   166d4:	andeq	lr, r1, r4, asr #29
   166d8:	andeq	r5, r3, r8, lsr #8
   166dc:	andeq	r5, r3, ip, lsr #8
   166e0:	strdeq	r6, [r1], -r4
   166e4:			; <UNDEFINED> instruction: 0x000344b8
   166e8:	andeq	pc, r1, ip, ror #2
   166ec:	andeq	lr, r1, r0, asr #13
   166f0:	andeq	r5, r3, ip, lsr r4
   166f4:	ldr	r1, [r1]
   166f8:	ldr	r0, [r0]
   166fc:	b	11078 <strcmp@plt>
   16700:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16704:	mov	r4, r0
   16708:	ldr	lr, [pc, #348]	; 1686c <bfd_arch_bits_per_address@plt+0x54b8>
   1670c:	ldr	ip, [pc, #348]	; 16870 <bfd_arch_bits_per_address@plt+0x54bc>
   16710:	sub	sp, sp, #32
   16714:	ldr	r0, [lr]
   16718:	ldr	lr, [ip]
   1671c:	ldr	r9, [pc, #336]	; 16874 <bfd_arch_bits_per_address@plt+0x54c0>
   16720:	ldr	r8, [r0, #4]
   16724:	mov	r7, r1
   16728:	add	r1, sp, #28
   1672c:	ldr	sl, [lr, #28]
   16730:	str	r1, [sp, #8]
   16734:	add	r1, sp, #24
   16738:	mov	ip, #0
   1673c:	str	r1, [sp, #4]
   16740:	add	r1, sp, #20
   16744:	str	r1, [sp]
   16748:	str	ip, [sp, #12]
   1674c:	mov	r6, r2
   16750:	mov	r5, r3
   16754:	mov	r2, lr
   16758:	sub	r3, r4, sl
   1675c:	str	ip, [sp, #20]
   16760:	str	ip, [sp, #24]
   16764:	str	ip, [sp, #28]
   16768:	ldr	r1, [r9]
   1676c:	ldr	r8, [r8, #296]	; 0x128
   16770:	blx	r8
   16774:	ldr	r3, [pc, #252]	; 16878 <bfd_arch_bits_per_address@plt+0x54c4>
   16778:	cmp	r0, #0
   1677c:	beq	167cc <bfd_arch_bits_per_address@plt+0x5418>
   16780:	ldr	r2, [sp, #20]
   16784:	ldr	r0, [r3]
   16788:	cmp	r2, #0
   1678c:	and	r0, r0, #128	; 0x80
   16790:	beq	16858 <bfd_arch_bits_per_address@plt+0x54a4>
   16794:	ldr	r1, [sp, #24]
   16798:	cmp	r1, #0
   1679c:	beq	16824 <bfd_arch_bits_per_address@plt+0x5470>
   167a0:	ldr	r3, [sp, #28]
   167a4:	cmp	r3, #0
   167a8:	beq	16818 <bfd_arch_bits_per_address@plt+0x5464>
   167ac:	cmp	r0, #0
   167b0:	bne	16838 <bfd_arch_bits_per_address@plt+0x5484>
   167b4:	mov	r0, #1
   167b8:	str	r2, [r7]
   167bc:	str	r1, [r6]
   167c0:	str	r3, [r5]
   167c4:	add	sp, sp, #32
   167c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167cc:	ldr	r0, [r3]
   167d0:	ands	r0, r0, #128	; 0x80
   167d4:	beq	167c4 <bfd_arch_bits_per_address@plt+0x5410>
   167d8:	ldr	r2, [sp, #20]
   167dc:	ldr	r3, [pc, #152]	; 1687c <bfd_arch_bits_per_address@plt+0x54c8>
   167e0:	cmp	r2, #0
   167e4:	ldr	r1, [sp, #24]
   167e8:	moveq	r2, r3
   167ec:	ldr	r0, [pc, #136]	; 1687c <bfd_arch_bits_per_address@plt+0x54c8>
   167f0:	cmp	r1, #0
   167f4:	ldr	r3, [sp, #28]
   167f8:	moveq	r1, r0
   167fc:	str	r1, [sp]
   16800:	ldr	r0, [pc, #120]	; 16880 <bfd_arch_bits_per_address@plt+0x54cc>
   16804:	mov	r1, r4
   16808:	bl	11090 <printf@plt>
   1680c:	mov	r0, #0
   16810:	add	sp, sp, #32
   16814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16818:	cmp	r0, #0
   1681c:	bne	167fc <bfd_arch_bits_per_address@plt+0x5448>
   16820:	b	167c4 <bfd_arch_bits_per_address@plt+0x5410>
   16824:	cmp	r0, #0
   16828:	beq	167c4 <bfd_arch_bits_per_address@plt+0x5410>
   1682c:	ldr	r3, [sp, #28]
   16830:	ldr	r1, [pc, #68]	; 1687c <bfd_arch_bits_per_address@plt+0x54c8>
   16834:	b	167fc <bfd_arch_bits_per_address@plt+0x5448>
   16838:	str	r1, [sp]
   1683c:	ldr	r0, [pc, #64]	; 16884 <bfd_arch_bits_per_address@plt+0x54d0>
   16840:	mov	r1, r4
   16844:	bl	11090 <printf@plt>
   16848:	ldr	r2, [sp, #20]
   1684c:	ldr	r1, [sp, #24]
   16850:	ldr	r3, [sp, #28]
   16854:	b	167b4 <bfd_arch_bits_per_address@plt+0x5400>
   16858:	cmp	r0, #0
   1685c:	beq	167c4 <bfd_arch_bits_per_address@plt+0x5410>
   16860:	ldr	r1, [sp, #24]
   16864:	ldr	r2, [pc, #16]	; 1687c <bfd_arch_bits_per_address@plt+0x54c8>
   16868:	b	167ec <bfd_arch_bits_per_address@plt+0x5438>
   1686c:	andeq	r5, r3, r0, lsr #8
   16870:	andeq	r5, r3, r0, lsr r4
   16874:	andeq	r4, r3, r0, lsl #10
   16878:	andeq	r5, r3, r0, lsr #2
   1687c:	andeq	lr, r1, r0, ror #14
   16880:	ldrdeq	pc, [r1], -r0
   16884:	andeq	pc, r1, ip, lsr #3
   16888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1688c:	sub	sp, sp, #28
   16890:	ldr	r4, [r0, #16]
   16894:	cmp	r4, #0
   16898:	beq	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   1689c:	ldr	r3, [r0, #12]
   168a0:	ands	ip, r3, #4
   168a4:	bne	169dc <bfd_arch_bits_per_address@plt+0x5628>
   168a8:	ldr	r4, [pc, #524]	; 16abc <bfd_arch_bits_per_address@plt+0x5708>
   168ac:	mov	r5, r0
   168b0:	ldr	r2, [r4]
   168b4:	cmp	r2, #0
   168b8:	bne	169b0 <bfd_arch_bits_per_address@plt+0x55fc>
   168bc:	ldr	r8, [pc, #508]	; 16ac0 <bfd_arch_bits_per_address@plt+0x570c>
   168c0:	add	r2, sp, #4
   168c4:	mov	r1, r5
   168c8:	ldr	r3, [r8]
   168cc:	mov	r0, r3
   168d0:	ldr	r3, [r3, #4]
   168d4:	ldr	r3, [r3, #276]	; 0x114
   168d8:	blx	r3
   168dc:	ldrb	r2, [sp, #8]
   168e0:	cmp	r2, #84	; 0x54
   168e4:	cmpne	r2, #87	; 0x57
   168e8:	moveq	r3, #1
   168ec:	movne	r3, #0
   168f0:	moveq	r4, #84	; 0x54
   168f4:	beq	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   168f8:	cmp	r2, #116	; 0x74
   168fc:	bne	169ec <bfd_arch_bits_per_address@plt+0x5638>
   16900:	ldr	r4, [r4]
   16904:	cmp	r4, #0
   16908:	bne	169dc <bfd_arch_bits_per_address@plt+0x5628>
   1690c:	ldr	r9, [r5, #4]
   16910:	cmp	r9, #0
   16914:	beq	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   16918:	ldrb	sl, [r9]
   1691c:	cmp	sl, #0
   16920:	beq	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   16924:	cmp	sl, #36	; 0x24
   16928:	beq	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   1692c:	ldr	r7, [pc, #400]	; 16ac4 <bfd_arch_bits_per_address@plt+0x5710>
   16930:	mov	r3, sl
   16934:	mov	r6, r9
   16938:	cmp	r3, #46	; 0x2e
   1693c:	bne	16a34 <bfd_arch_bits_per_address@plt+0x5680>
   16940:	mov	r0, r6
   16944:	bl	1124c <strlen@plt>
   16948:	cmp	r0, #7
   1694c:	mov	fp, r0
   16950:	bls	16970 <bfd_arch_bits_per_address@plt+0x55bc>
   16954:	mov	r0, r6
   16958:	mov	r2, #7
   1695c:	ldr	r1, [pc, #356]	; 16ac8 <bfd_arch_bits_per_address@plt+0x5714>
   16960:	bl	1139c <strncmp@plt>
   16964:	cmp	r0, #0
   16968:	addeq	r6, r6, #6
   1696c:	bne	16a10 <bfd_arch_bits_per_address@plt+0x565c>
   16970:	ldrb	r3, [r6, #1]
   16974:	add	r6, r6, #1
   16978:	cmp	r3, #0
   1697c:	bne	16994 <bfd_arch_bits_per_address@plt+0x55e0>
   16980:	b	16a34 <bfd_arch_bits_per_address@plt+0x5680>
   16984:	ldrb	r3, [r6, #1]!
   16988:	cmp	r3, #46	; 0x2e
   1698c:	cmpne	r3, #0
   16990:	beq	16938 <bfd_arch_bits_per_address@plt+0x5584>
   16994:	lsl	r3, r3, #1
   16998:	ldrh	r3, [r7, r3]
   1699c:	tst	r3, #4
   169a0:	bne	16984 <bfd_arch_bits_per_address@plt+0x55d0>
   169a4:	mov	r0, r4
   169a8:	add	sp, sp, #28
   169ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b0:	tst	r3, #1
   169b4:	beq	168bc <bfd_arch_bits_per_address@plt+0x5508>
   169b8:	ldr	r3, [pc, #268]	; 16acc <bfd_arch_bits_per_address@plt+0x5718>
   169bc:	ldr	r4, [r3]
   169c0:	ands	r4, r4, #128	; 0x80
   169c4:	beq	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   169c8:	ldr	r1, [r0, #4]
   169cc:	ldr	r0, [pc, #252]	; 16ad0 <bfd_arch_bits_per_address@plt+0x571c>
   169d0:	mov	r4, ip
   169d4:	bl	11090 <printf@plt>
   169d8:	b	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   169dc:	mov	r4, #0
   169e0:	mov	r0, r4
   169e4:	add	sp, sp, #28
   169e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169ec:	ldr	r1, [pc, #216]	; 16acc <bfd_arch_bits_per_address@plt+0x5718>
   169f0:	ldr	r4, [r1]
   169f4:	ands	r4, r4, #128	; 0x80
   169f8:	beq	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   169fc:	ldr	r1, [r5, #4]
   16a00:	ldr	r0, [pc, #204]	; 16ad4 <bfd_arch_bits_per_address@plt+0x5720>
   16a04:	mov	r4, r3
   16a08:	bl	11090 <printf@plt>
   16a0c:	b	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   16a10:	cmp	fp, #11
   16a14:	bls	16970 <bfd_arch_bits_per_address@plt+0x55bc>
   16a18:	mov	r0, r6
   16a1c:	mov	r2, #11
   16a20:	ldr	r1, [pc, #176]	; 16ad8 <bfd_arch_bits_per_address@plt+0x5724>
   16a24:	bl	1139c <strncmp@plt>
   16a28:	cmp	r0, #0
   16a2c:	addeq	r6, r6, #10
   16a30:	b	16970 <bfd_arch_bits_per_address@plt+0x55bc>
   16a34:	ldrb	r3, [r6, #1]
   16a38:	add	r6, r6, #1
   16a3c:	cmp	r3, #0
   16a40:	beq	16a50 <bfd_arch_bits_per_address@plt+0x569c>
   16a44:	cmp	r3, #36	; 0x24
   16a48:	bne	16938 <bfd_arch_bits_per_address@plt+0x5584>
   16a4c:	b	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   16a50:	ldr	r3, [r8]
   16a54:	ldr	r3, [r3, #4]
   16a58:	ldrb	r3, [r3, #24]
   16a5c:	cmp	sl, r3
   16a60:	cmpne	r3, #0
   16a64:	bne	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   16a68:	mov	r2, #14
   16a6c:	ldr	r1, [pc, #104]	; 16adc <bfd_arch_bits_per_address@plt+0x5728>
   16a70:	mov	r0, r9
   16a74:	bl	1139c <strncmp@plt>
   16a78:	cmp	r0, #0
   16a7c:	beq	169dc <bfd_arch_bits_per_address@plt+0x5628>
   16a80:	mov	r0, r9
   16a84:	mov	r2, #15
   16a88:	ldr	r1, [pc, #80]	; 16ae0 <bfd_arch_bits_per_address@plt+0x572c>
   16a8c:	bl	1139c <strncmp@plt>
   16a90:	cmp	r0, #0
   16a94:	beq	169dc <bfd_arch_bits_per_address@plt+0x5628>
   16a98:	ldr	r3, [pc, #68]	; 16ae4 <bfd_arch_bits_per_address@plt+0x5730>
   16a9c:	ldr	r3, [r3]
   16aa0:	cmp	r3, #0
   16aa4:	moveq	r4, #116	; 0x74
   16aa8:	beq	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   16aac:	ldr	r3, [r5, #12]
   16ab0:	tst	r3, #8
   16ab4:	movne	r4, #116	; 0x74
   16ab8:	b	169a4 <bfd_arch_bits_per_address@plt+0x55f0>
   16abc:	andeq	r5, r3, r4, lsl r1
   16ac0:	andeq	r5, r3, r0, lsr #8
   16ac4:	strdeq	r3, [r3], -r8
   16ac8:	andeq	pc, r1, ip, asr #4
   16acc:	andeq	r5, r3, r0, lsr #2
   16ad0:	andeq	pc, r1, r0, lsl #4
   16ad4:	andeq	pc, r1, r8, lsr #4
   16ad8:	andeq	pc, r1, r4, asr r2	; <UNPREDICTABLE>
   16adc:	andeq	pc, r1, r0, ror #4
   16ae0:	andeq	pc, r1, r0, ror r2	; <UNPREDICTABLE>
   16ae4:	andeq	r5, r3, r4, lsr #2
   16ae8:	push	{r4, r5, r6, r7, lr}
   16aec:	mov	r1, #0
   16af0:	sub	sp, sp, #20
   16af4:	mov	r4, r0
   16af8:	bl	110f0 <bfd_openr@plt>
   16afc:	ldr	r6, [pc, #532]	; 16d18 <bfd_arch_bits_per_address@plt+0x5964>
   16b00:	cmp	r0, #0
   16b04:	str	r0, [r6]
   16b08:	beq	16d08 <bfd_arch_bits_per_address@plt+0x5954>
   16b0c:	mov	r1, #1
   16b10:	bl	1136c <bfd_check_format@plt>
   16b14:	cmp	r0, #0
   16b18:	beq	16cd0 <bfd_arch_bits_per_address@plt+0x591c>
   16b1c:	ldr	r1, [pc, #504]	; 16d1c <bfd_arch_bits_per_address@plt+0x5968>
   16b20:	ldr	r0, [r6]
   16b24:	bl	111bc <bfd_get_section_by_name@plt>
   16b28:	ldr	r5, [pc, #496]	; 16d20 <bfd_arch_bits_per_address@plt+0x596c>
   16b2c:	cmp	r0, #0
   16b30:	str	r0, [r5]
   16b34:	beq	16c70 <bfd_arch_bits_per_address@plt+0x58bc>
   16b38:	ldr	r3, [r6]
   16b3c:	mov	r0, r3
   16b40:	ldr	r3, [r3, #4]
   16b44:	ldr	r3, [r3, #260]	; 0x104
   16b48:	blx	r3
   16b4c:	cmp	r0, #0
   16b50:	blt	16c98 <bfd_arch_bits_per_address@plt+0x58e4>
   16b54:	bl	11180 <xmalloc@plt>
   16b58:	ldr	r2, [r6]
   16b5c:	ldr	r5, [pc, #448]	; 16d24 <bfd_arch_bits_per_address@plt+0x5970>
   16b60:	mov	r3, r0
   16b64:	mov	r0, r2
   16b68:	ldr	r2, [r2, #4]
   16b6c:	mov	r1, r3
   16b70:	str	r3, [r5]
   16b74:	ldr	r3, [r2, #264]	; 0x108
   16b78:	blx	r3
   16b7c:	cmp	r0, #0
   16b80:	mov	r1, r0
   16b84:	str	r0, [r5, #4]
   16b88:	blt	16c98 <bfd_arch_bits_per_address@plt+0x58e4>
   16b8c:	ldr	r0, [r6]
   16b90:	add	r3, sp, #12
   16b94:	mov	r4, #0
   16b98:	ldr	r2, [r0, #4]
   16b9c:	str	r3, [sp, #4]
   16ba0:	str	r4, [sp]
   16ba4:	mov	r3, r4
   16ba8:	ldr	r7, [r2, #432]	; 0x1b0
   16bac:	ldr	r2, [r5]
   16bb0:	blx	r7
   16bb4:	subs	r7, r0, #0
   16bb8:	bgt	16c08 <bfd_arch_bits_per_address@plt+0x5854>
   16bbc:	ldr	r4, [pc, #356]	; 16d28 <bfd_arch_bits_per_address@plt+0x5974>
   16bc0:	mov	r2, #0
   16bc4:	mov	r3, #1
   16bc8:	ldr	r0, [r6]
   16bcc:	str	r2, [r4]
   16bd0:	str	r3, [r5, #8]
   16bd4:	bl	11264 <bfd_get_arch@plt>
   16bd8:	cmp	r0, #3
   16bdc:	beq	16c64 <bfd_arch_bits_per_address@plt+0x58b0>
   16be0:	cmp	r0, #32
   16be4:	moveq	r3, #4
   16be8:	streq	r3, [r5, #8]
   16bec:	ldr	r3, [pc, #312]	; 16d2c <bfd_arch_bits_per_address@plt+0x5978>
   16bf0:	ldr	r0, [r3]
   16bf4:	cmp	r0, #0
   16bf8:	beq	16c00 <bfd_arch_bits_per_address@plt+0x584c>
   16bfc:	bl	16424 <bfd_arch_bits_per_address@plt+0x5070>
   16c00:	add	sp, sp, #20
   16c04:	pop	{r4, r5, r6, r7, pc}
   16c08:	ldrd	r0, [r5]
   16c0c:	add	r1, r7, r1
   16c10:	add	r1, r1, #1
   16c14:	lsl	r1, r1, #2
   16c18:	bl	11144 <xrealloc@plt>
   16c1c:	ldr	r2, [r5, #4]
   16c20:	mov	r3, r4
   16c24:	mov	r1, r4
   16c28:	add	ip, r0, r2, lsl #2
   16c2c:	str	r0, [r5]
   16c30:	mov	r0, ip
   16c34:	add	r2, r2, r7
   16c38:	str	r2, [r5, #4]
   16c3c:	ldr	r2, [sp, #12]
   16c40:	add	r1, r1, #1
   16c44:	add	r2, r2, r3
   16c48:	cmp	r7, r1
   16c4c:	str	r2, [r0], #4
   16c50:	add	r3, r3, #24
   16c54:	bne	16c3c <bfd_arch_bits_per_address@plt+0x5888>
   16c58:	mov	r3, #0
   16c5c:	str	r3, [ip, r7, lsl #2]
   16c60:	b	16bbc <bfd_arch_bits_per_address@plt+0x5808>
   16c64:	mov	r3, #2
   16c68:	str	r3, [r4]
   16c6c:	b	16bec <bfd_arch_bits_per_address@plt+0x5838>
   16c70:	ldr	r1, [pc, #184]	; 16d30 <bfd_arch_bits_per_address@plt+0x597c>
   16c74:	ldr	r0, [r6]
   16c78:	bl	111bc <bfd_get_section_by_name@plt>
   16c7c:	cmp	r0, #0
   16c80:	str	r0, [r5]
   16c84:	bne	16b38 <bfd_arch_bits_per_address@plt+0x5784>
   16c88:	ldr	r3, [pc, #164]	; 16d34 <bfd_arch_bits_per_address@plt+0x5980>
   16c8c:	mov	r2, #5
   16c90:	ldr	r1, [pc, #160]	; 16d38 <bfd_arch_bits_per_address@plt+0x5984>
   16c94:	b	16cdc <bfd_arch_bits_per_address@plt+0x5928>
   16c98:	ldr	r2, [pc, #148]	; 16d34 <bfd_arch_bits_per_address@plt+0x5980>
   16c9c:	ldr	r3, [pc, #152]	; 16d3c <bfd_arch_bits_per_address@plt+0x5988>
   16ca0:	ldr	r5, [r2]
   16ca4:	ldr	r6, [r3]
   16ca8:	bl	11168 <bfd_get_error@plt>
   16cac:	bl	11348 <bfd_errmsg@plt>
   16cb0:	mov	r2, r6
   16cb4:	mov	r3, r4
   16cb8:	ldr	r1, [pc, #128]	; 16d40 <bfd_arch_bits_per_address@plt+0x598c>
   16cbc:	str	r0, [sp]
   16cc0:	mov	r0, r5
   16cc4:	bl	11270 <fprintf@plt>
   16cc8:	mov	r0, #1
   16ccc:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   16cd0:	ldr	r3, [pc, #92]	; 16d34 <bfd_arch_bits_per_address@plt+0x5980>
   16cd4:	ldr	r1, [pc, #104]	; 16d44 <bfd_arch_bits_per_address@plt+0x5990>
   16cd8:	mov	r2, #5
   16cdc:	ldr	r0, [pc, #100]	; 16d48 <bfd_arch_bits_per_address@plt+0x5994>
   16ce0:	ldr	r5, [r3]
   16ce4:	bl	11120 <dcgettext@plt>
   16ce8:	ldr	r2, [pc, #76]	; 16d3c <bfd_arch_bits_per_address@plt+0x5988>
   16cec:	mov	r3, r4
   16cf0:	ldr	r2, [r2]
   16cf4:	mov	r1, r0
   16cf8:	mov	r0, r5
   16cfc:	bl	11270 <fprintf@plt>
   16d00:	mov	r0, #1
   16d04:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   16d08:	mov	r0, r4
   16d0c:	bl	1115c <perror@plt>
   16d10:	mov	r0, #1
   16d14:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   16d18:	andeq	r5, r3, r0, lsr #8
   16d1c:	andeq	pc, r1, r4, lsr #5
   16d20:	andeq	r5, r3, r0, lsr r4
   16d24:	andeq	r4, r3, r0, lsl #10
   16d28:	andeq	r5, r3, r4, lsr r4
   16d2c:	andeq	r5, r3, r8, lsr r4
   16d30:	andeq	pc, r1, ip, lsr #5
   16d34:			; <UNDEFINED> instruction: 0x000344b8
   16d38:			; <UNDEFINED> instruction: 0x0001f2b4
   16d3c:	andeq	r5, r3, ip, lsr r4
   16d40:	ldrdeq	pc, [r1], -r8
   16d44:	andeq	pc, r1, r0, lsl #5
   16d48:	andeq	lr, r1, r0, asr #13
   16d4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d50:	mov	sl, r0
   16d54:	ldr	r7, [pc, #224]	; 16e3c <bfd_arch_bits_per_address@plt+0x5a88>
   16d58:	sub	sp, sp, #16
   16d5c:	ldr	r4, [pc, #220]	; 16e40 <bfd_arch_bits_per_address@plt+0x5a8c>
   16d60:	ldr	r5, [r7]
   16d64:	ldr	r6, [r5, #36]	; 0x24
   16d68:	mov	r0, r6
   16d6c:	bl	111f8 <malloc@plt>
   16d70:	cmp	r0, #0
   16d74:	str	r0, [r4]
   16d78:	beq	16e00 <bfd_arch_bits_per_address@plt+0x5a4c>
   16d7c:	mov	r8, #0
   16d80:	mov	r9, #0
   16d84:	mov	r2, r0
   16d88:	mov	r1, r5
   16d8c:	str	r6, [sp, #8]
   16d90:	mov	r0, sl
   16d94:	strd	r8, [sp]
   16d98:	bl	11114 <bfd_get_section_contents@plt>
   16d9c:	subs	r5, r0, #0
   16da0:	beq	16db8 <bfd_arch_bits_per_address@plt+0x5a04>
   16da4:	ldr	r3, [r4]
   16da8:	cmp	r3, #0
   16dac:	beq	16dcc <bfd_arch_bits_per_address@plt+0x5a18>
   16db0:	add	sp, sp, #16
   16db4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16db8:	ldr	r0, [pc, #132]	; 16e44 <bfd_arch_bits_per_address@plt+0x5a90>
   16dbc:	bl	112f4 <bfd_perror@plt>
   16dc0:	ldr	r0, [r4]
   16dc4:	bl	110a8 <free@plt>
   16dc8:	str	r5, [r4]
   16dcc:	ldr	r3, [pc, #116]	; 16e48 <bfd_arch_bits_per_address@plt+0x5a94>
   16dd0:	mov	r2, #5
   16dd4:	ldr	r1, [pc, #112]	; 16e4c <bfd_arch_bits_per_address@plt+0x5a98>
   16dd8:	ldr	r0, [pc, #112]	; 16e50 <bfd_arch_bits_per_address@plt+0x5a9c>
   16ddc:	ldr	r4, [r3]
   16de0:	bl	11120 <dcgettext@plt>
   16de4:	ldr	r3, [pc, #104]	; 16e54 <bfd_arch_bits_per_address@plt+0x5aa0>
   16de8:	ldr	r2, [r3]
   16dec:	mov	r1, r0
   16df0:	mov	r0, r4
   16df4:	add	sp, sp, #16
   16df8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16dfc:	b	11270 <fprintf@plt>
   16e00:	ldr	r3, [pc, #64]	; 16e48 <bfd_arch_bits_per_address@plt+0x5a94>
   16e04:	mov	r2, #5
   16e08:	ldr	r1, [pc, #72]	; 16e58 <bfd_arch_bits_per_address@plt+0x5aa4>
   16e0c:	ldr	r0, [pc, #60]	; 16e50 <bfd_arch_bits_per_address@plt+0x5a9c>
   16e10:	ldr	r4, [r3]
   16e14:	bl	11120 <dcgettext@plt>
   16e18:	ldr	r3, [r7]
   16e1c:	ldr	r2, [pc, #48]	; 16e54 <bfd_arch_bits_per_address@plt+0x5aa0>
   16e20:	ldr	r3, [r3, #36]	; 0x24
   16e24:	ldr	r2, [r2]
   16e28:	mov	r1, r0
   16e2c:	mov	r0, r4
   16e30:	bl	11270 <fprintf@plt>
   16e34:	mov	r0, #1
   16e38:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   16e3c:	andeq	r5, r3, r0, lsr r4
   16e40:	andeq	r5, r3, r4, lsr #8
   16e44:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   16e48:			; <UNDEFINED> instruction: 0x000344b8
   16e4c:	andeq	pc, r1, r0, lsr r3	; <UNPREDICTABLE>
   16e50:	andeq	lr, r1, r0, asr #13
   16e54:	andeq	r5, r3, ip, lsr r4
   16e58:	andeq	pc, r1, r4, ror #5
   16e5c:	ldr	r3, [pc, #308]	; 16f98 <bfd_arch_bits_per_address@plt+0x5be4>
   16e60:	push	{r4, r5, r6, lr}
   16e64:	sub	sp, sp, #8
   16e68:	ldr	r3, [r3]
   16e6c:	str	r1, [sp, #4]
   16e70:	cmp	r3, #0
   16e74:	str	r2, [sp]
   16e78:	beq	16f08 <bfd_arch_bits_per_address@plt+0x5b54>
   16e7c:	ldr	r5, [pc, #280]	; 16f9c <bfd_arch_bits_per_address@plt+0x5be8>
   16e80:	mov	r1, sp
   16e84:	mov	r4, r0
   16e88:	add	r0, sp, #4
   16e8c:	bl	1995c <bfd_arch_bits_per_address@plt+0x85a8>
   16e90:	ldr	r0, [r5]
   16e94:	bl	11264 <bfd_get_arch@plt>
   16e98:	cmp	r0, #7
   16e9c:	beq	16f84 <bfd_arch_bits_per_address@plt+0x5bd0>
   16ea0:	bls	16f10 <bfd_arch_bits_per_address@plt+0x5b5c>
   16ea4:	cmp	r0, #32
   16ea8:	beq	16f70 <bfd_arch_bits_per_address@plt+0x5bbc>
   16eac:	cmp	r0, #83	; 0x53
   16eb0:	beq	16f34 <bfd_arch_bits_per_address@plt+0x5b80>
   16eb4:	cmp	r0, #8
   16eb8:	beq	16f48 <bfd_arch_bits_per_address@plt+0x5b94>
   16ebc:	ldr	r3, [pc, #220]	; 16fa0 <bfd_arch_bits_per_address@plt+0x5bec>
   16ec0:	mov	r2, #5
   16ec4:	ldr	r1, [pc, #216]	; 16fa4 <bfd_arch_bits_per_address@plt+0x5bf0>
   16ec8:	ldr	r0, [pc, #216]	; 16fa8 <bfd_arch_bits_per_address@plt+0x5bf4>
   16ecc:	ldr	r4, [r3]
   16ed0:	bl	11120 <dcgettext@plt>
   16ed4:	ldr	r3, [pc, #208]	; 16fac <bfd_arch_bits_per_address@plt+0x5bf8>
   16ed8:	mov	r6, r0
   16edc:	ldr	r0, [r5]
   16ee0:	ldr	r5, [r3]
   16ee4:	bl	111d4 <bfd_printable_name@plt>
   16ee8:	mov	r2, r5
   16eec:	mov	r1, r6
   16ef0:	mov	r3, r0
   16ef4:	mov	r0, r4
   16ef8:	bl	11270 <fprintf@plt>
   16efc:	ldr	r3, [pc, #172]	; 16fb0 <bfd_arch_bits_per_address@plt+0x5bfc>
   16f00:	mov	r2, #0
   16f04:	str	r2, [r3]
   16f08:	add	sp, sp, #8
   16f0c:	pop	{r4, r5, r6, pc}
   16f10:	cmp	r0, #3
   16f14:	beq	16f5c <bfd_arch_bits_per_address@plt+0x5ba8>
   16f18:	cmp	r0, #5
   16f1c:	bne	16ebc <bfd_arch_bits_per_address@plt+0x5b08>
   16f20:	mov	r0, r4
   16f24:	ldr	r2, [sp]
   16f28:	ldr	r1, [sp, #4]
   16f2c:	bl	1be30 <bfd_arch_bits_per_address@plt+0xaa7c>
   16f30:	b	16f08 <bfd_arch_bits_per_address@plt+0x5b54>
   16f34:	mov	r0, r4
   16f38:	ldr	r2, [sp]
   16f3c:	ldr	r1, [sp, #4]
   16f40:	bl	1c228 <bfd_arch_bits_per_address@plt+0xae74>
   16f44:	b	16f08 <bfd_arch_bits_per_address@plt+0x5b54>
   16f48:	mov	r0, r4
   16f4c:	ldr	r2, [sp]
   16f50:	ldr	r1, [sp, #4]
   16f54:	bl	1b47c <bfd_arch_bits_per_address@plt+0xa0c8>
   16f58:	b	16f08 <bfd_arch_bits_per_address@plt+0x5b54>
   16f5c:	mov	r0, r4
   16f60:	ldr	r2, [sp]
   16f64:	ldr	r1, [sp, #4]
   16f68:	bl	1ba4c <bfd_arch_bits_per_address@plt+0xa698>
   16f6c:	b	16f08 <bfd_arch_bits_per_address@plt+0x5b54>
   16f70:	mov	r0, r4
   16f74:	ldr	r2, [sp]
   16f78:	ldr	r1, [sp, #4]
   16f7c:	bl	1b5f4 <bfd_arch_bits_per_address@plt+0xa240>
   16f80:	b	16f08 <bfd_arch_bits_per_address@plt+0x5b54>
   16f84:	mov	r0, r4
   16f88:	ldr	r2, [sp]
   16f8c:	ldr	r1, [sp, #4]
   16f90:	bl	1bfac <bfd_arch_bits_per_address@plt+0xabf8>
   16f94:	b	16f08 <bfd_arch_bits_per_address@plt+0x5b54>
   16f98:	andeq	r5, r3, r4, lsr #8
   16f9c:	andeq	r5, r3, r0, lsr #8
   16fa0:			; <UNDEFINED> instruction: 0x000344b8
   16fa4:	andeq	pc, r1, r4, asr #6
   16fa8:	andeq	lr, r1, r0, asr #13
   16fac:	andeq	r5, r3, ip, lsr r4
   16fb0:	andeq	r5, r3, ip, lsl r1
   16fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fb8:	sub	sp, sp, #20
   16fbc:	ldr	r1, [pc, #636]	; 17240 <bfd_arch_bits_per_address@plt+0x5e8c>
   16fc0:	mov	sl, r0
   16fc4:	bl	1133c <fopen64@plt>
   16fc8:	subs	r4, r0, #0
   16fcc:	beq	17220 <bfd_arch_bits_per_address@plt+0x5e6c>
   16fd0:	ldr	r9, [pc, #620]	; 17244 <bfd_arch_bits_per_address@plt+0x5e90>
   16fd4:	ldr	r8, [pc, #620]	; 17248 <bfd_arch_bits_per_address@plt+0x5e94>
   16fd8:	ldr	r7, [pc, #620]	; 1724c <bfd_arch_bits_per_address@plt+0x5e98>
   16fdc:	ldr	fp, [pc, #620]	; 17250 <bfd_arch_bits_per_address@plt+0x5e9c>
   16fe0:	mov	r6, #0
   16fe4:	mov	r0, r4
   16fe8:	bl	11234 <feof@plt>
   16fec:	cmp	r0, #0
   16ff0:	bne	17094 <bfd_arch_bits_per_address@plt+0x5ce0>
   16ff4:	ldr	r5, [pc, #600]	; 17254 <bfd_arch_bits_per_address@plt+0x5ea0>
   16ff8:	mov	r2, r4
   16ffc:	mov	r0, r5
   17000:	mov	r1, r9
   17004:	bl	110b4 <fgets@plt>
   17008:	cmp	r0, #0
   1700c:	beq	17094 <bfd_arch_bits_per_address@plt+0x5ce0>
   17010:	add	r3, r5, #1024	; 0x400
   17014:	str	r3, [sp]
   17018:	mov	r0, r5
   1701c:	add	r3, sp, #15
   17020:	mov	r2, r8
   17024:	mov	r1, r7
   17028:	bl	11318 <sscanf@plt>
   1702c:	cmp	r0, #3
   17030:	bne	16fe4 <bfd_arch_bits_per_address@plt+0x5c30>
   17034:	ldrb	r3, [sp, #15]
   17038:	and	r3, r3, #223	; 0xdf
   1703c:	cmp	r3, #84	; 0x54
   17040:	bne	16fe4 <bfd_arch_bits_per_address@plt+0x5c30>
   17044:	add	r6, r6, #1
   17048:	cmp	r6, fp
   1704c:	bls	16fe4 <bfd_arch_bits_per_address@plt+0x5c30>
   17050:	ldr	r0, [pc, #512]	; 17258 <bfd_arch_bits_per_address@plt+0x5ea4>
   17054:	ldr	r3, [pc, #512]	; 1725c <bfd_arch_bits_per_address@plt+0x5ea8>
   17058:	ldr	r1, [pc, #512]	; 17260 <bfd_arch_bits_per_address@plt+0x5eac>
   1705c:	mov	r2, #5
   17060:	mvn	ip, #0
   17064:	str	ip, [r0]
   17068:	ldr	r0, [pc, #500]	; 17264 <bfd_arch_bits_per_address@plt+0x5eb0>
   1706c:	ldr	r4, [r3]
   17070:	bl	11120 <dcgettext@plt>
   17074:	ldr	r2, [pc, #492]	; 17268 <bfd_arch_bits_per_address@plt+0x5eb4>
   17078:	mov	r3, sl
   1707c:	ldr	r2, [r2]
   17080:	mov	r1, r0
   17084:	mov	r0, r4
   17088:	bl	11270 <fprintf@plt>
   1708c:	mov	r0, #1
   17090:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   17094:	ldr	r7, [pc, #444]	; 17258 <bfd_arch_bits_per_address@plt+0x5ea4>
   17098:	cmp	r6, #0
   1709c:	str	r6, [r7]
   170a0:	beq	17210 <bfd_arch_bits_per_address@plt+0x5e5c>
   170a4:	add	r6, r6, r6, lsl #1
   170a8:	add	r6, r6, r6, lsl #3
   170ac:	lsl	r0, r6, #3
   170b0:	bl	11180 <xmalloc@plt>
   170b4:	mov	r2, #0
   170b8:	mov	r1, r2
   170bc:	mov	r3, r0
   170c0:	mov	r0, r4
   170c4:	str	r3, [r7, #4]
   170c8:	str	r3, [r7, #8]
   170cc:	bl	11378 <fseek@plt>
   170d0:	cmp	r0, #0
   170d4:	bne	17230 <bfd_arch_bits_per_address@plt+0x5e7c>
   170d8:	ldr	r8, [pc, #360]	; 17248 <bfd_arch_bits_per_address@plt+0x5e94>
   170dc:	ldr	r9, [pc, #360]	; 1724c <bfd_arch_bits_per_address@plt+0x5e98>
   170e0:	ldr	sl, [pc, #388]	; 1726c <bfd_arch_bits_per_address@plt+0x5eb8>
   170e4:	mov	fp, r8
   170e8:	mov	r0, r4
   170ec:	bl	11234 <feof@plt>
   170f0:	cmp	r0, #0
   170f4:	bne	171d4 <bfd_arch_bits_per_address@plt+0x5e20>
   170f8:	ldr	r5, [pc, #340]	; 17254 <bfd_arch_bits_per_address@plt+0x5ea0>
   170fc:	mov	r2, r4
   17100:	mov	r0, r5
   17104:	ldr	r1, [pc, #312]	; 17244 <bfd_arch_bits_per_address@plt+0x5e90>
   17108:	bl	110b4 <fgets@plt>
   1710c:	cmp	r0, #0
   17110:	beq	171d4 <bfd_arch_bits_per_address@plt+0x5e20>
   17114:	add	r6, r5, #1024	; 0x400
   17118:	str	r6, [sp]
   1711c:	mov	r0, r5
   17120:	add	r3, sp, #15
   17124:	mov	r2, r8
   17128:	mov	r1, r9
   1712c:	bl	11318 <sscanf@plt>
   17130:	cmp	r0, #3
   17134:	bne	170e8 <bfd_arch_bits_per_address@plt+0x5d34>
   17138:	ldrb	r3, [sp, #15]
   1713c:	and	r3, r3, #223	; 0xdf
   17140:	cmp	r3, #84	; 0x54
   17144:	bne	170e8 <bfd_arch_bits_per_address@plt+0x5d34>
   17148:	ldr	r0, [r7, #8]
   1714c:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   17150:	ldr	r2, [r7, #8]
   17154:	mov	r1, sl
   17158:	mov	r0, fp
   1715c:	bl	11318 <sscanf@plt>
   17160:	mov	r0, r6
   17164:	bl	1124c <strlen@plt>
   17168:	ldr	r5, [r7, #8]
   1716c:	add	r0, r0, #1
   17170:	bl	11180 <xmalloc@plt>
   17174:	ldr	r3, [r7, #8]
   17178:	mov	r1, r6
   1717c:	str	r0, [r5, #8]
   17180:	ldr	r0, [r3, #8]
   17184:	bl	111a4 <strcpy@plt>
   17188:	ldr	r3, [r7, #8]
   1718c:	mov	r0, r4
   17190:	add	r1, r3, #216	; 0xd8
   17194:	ldrb	r2, [r3, #20]
   17198:	str	r1, [r7, #8]
   1719c:	bic	r2, r2, #13
   171a0:	orr	r2, r2, #5
   171a4:	strb	r2, [r3, #20]
   171a8:	ldrb	r1, [sp, #15]
   171ac:	uxtb	r2, r2
   171b0:	bic	r2, r2, #2
   171b4:	sub	r1, r1, #116	; 0x74
   171b8:	clz	r1, r1
   171bc:	lsr	r1, r1, #5
   171c0:	orr	r2, r2, r1, lsl #1
   171c4:	strb	r2, [r3, #20]
   171c8:	bl	11234 <feof@plt>
   171cc:	cmp	r0, #0
   171d0:	beq	170f8 <bfd_arch_bits_per_address@plt+0x5d44>
   171d4:	mov	r0, r4
   171d8:	bl	112d0 <fclose@plt>
   171dc:	ldrd	r2, [r7, #4]
   171e0:	ldr	r0, [pc, #112]	; 17258 <bfd_arch_bits_per_address@plt+0x5ea4>
   171e4:	sub	r3, r3, r2
   171e8:	asr	r3, r3, #3
   171ec:	add	r2, r3, r3, lsl #3
   171f0:	add	r3, r3, r2, lsl #1
   171f4:	rsb	r3, r3, r3, lsl #9
   171f8:	add	r3, r3, r3, lsl #18
   171fc:	rsb	r3, r3, #0
   17200:	str	r3, [r7]
   17204:	bl	1a410 <bfd_arch_bits_per_address@plt+0x905c>
   17208:	add	sp, sp, #20
   1720c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17210:	ldr	r3, [pc, #68]	; 1725c <bfd_arch_bits_per_address@plt+0x5ea8>
   17214:	mov	r2, #5
   17218:	ldr	r1, [pc, #80]	; 17270 <bfd_arch_bits_per_address@plt+0x5ebc>
   1721c:	b	17068 <bfd_arch_bits_per_address@plt+0x5cb4>
   17220:	ldr	r3, [pc, #52]	; 1725c <bfd_arch_bits_per_address@plt+0x5ea8>
   17224:	mov	r2, #5
   17228:	ldr	r1, [pc, #68]	; 17274 <bfd_arch_bits_per_address@plt+0x5ec0>
   1722c:	b	17068 <bfd_arch_bits_per_address@plt+0x5cb4>
   17230:	mov	r0, sl
   17234:	bl	1115c <perror@plt>
   17238:	mov	r0, #1
   1723c:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   17240:	andeq	pc, r1, r8, ror #2
   17244:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17248:	andeq	r4, r3, ip, lsl #10
   1724c:	andeq	pc, r1, r0, ror r3	; <UNPREDICTABLE>
   17250:			; <UNDEFINED> instruction: 0x012f684a
   17254:	andeq	r4, r3, ip, lsl #18
   17258:	andeq	r5, r3, r0, asr r4
   1725c:			; <UNDEFINED> instruction: 0x000344b8
   17260:	andeq	pc, r1, r4, lsr #7
   17264:	andeq	lr, r1, r0, asr #13
   17268:	andeq	r5, r3, ip, lsr r4
   1726c:	andeq	r0, r2, r4, asr sl
   17270:	andeq	pc, r1, r4, lsl #7
   17274:	andeq	pc, r1, ip, ror #2
   17278:	ldr	r3, [pc, #1124]	; 176e4 <bfd_arch_bits_per_address@plt+0x6330>
   1727c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17280:	sub	sp, sp, #28
   17284:	ldr	r3, [r3]
   17288:	ldr	r3, [r3, #4]
   1728c:	ldr	r3, [r3, #4]
   17290:	cmp	r3, #2
   17294:	bcc	17694 <bfd_arch_bits_per_address@plt+0x62e0>
   17298:	cmp	r3, #5
   1729c:	bls	17688 <bfd_arch_bits_per_address@plt+0x62d4>
   172a0:	sub	r3, r3, #10
   172a4:	clz	r3, r3
   172a8:	lsr	r3, r3, #5
   172ac:	str	r3, [sp, #8]
   172b0:	ldr	r6, [pc, #1072]	; 176e8 <bfd_arch_bits_per_address@plt+0x6334>
   172b4:	ldr	fp, [pc, #1072]	; 176ec <bfd_arch_bits_per_address@plt+0x6338>
   172b8:	mov	r4, #0
   172bc:	ldr	r3, [r6, #4]
   172c0:	str	r4, [fp]
   172c4:	cmp	r3, r4
   172c8:	movgt	r8, r4
   172cc:	bgt	17304 <bfd_arch_bits_per_address@plt+0x5f50>
   172d0:	b	176a8 <bfd_arch_bits_per_address@plt+0x62f4>
   172d4:	cmp	r4, #0
   172d8:	beq	172e8 <bfd_arch_bits_per_address@plt+0x5f34>
   172dc:	ldrb	r3, [r4, #8]
   172e0:	tst	r3, #1
   172e4:	beq	172f4 <bfd_arch_bits_per_address@plt+0x5f40>
   172e8:	ldr	r3, [fp]
   172ec:	add	r3, r3, #1
   172f0:	str	r3, [fp]
   172f4:	ldr	r3, [r6, #4]
   172f8:	add	r8, r8, #1
   172fc:	cmp	r3, r8
   17300:	ble	173a4 <bfd_arch_bits_per_address@plt+0x5ff0>
   17304:	ldr	r3, [r6]
   17308:	lsl	r5, r8, #2
   1730c:	ldr	r0, [r3, r8, lsl #2]
   17310:	bl	16888 <bfd_arch_bits_per_address@plt+0x54d4>
   17314:	cmp	r0, #0
   17318:	beq	172f4 <bfd_arch_bits_per_address@plt+0x5f40>
   1731c:	ldr	r3, [pc, #972]	; 176f0 <bfd_arch_bits_per_address@plt+0x633c>
   17320:	ldr	r7, [r3]
   17324:	cmp	r7, #0
   17328:	beq	172d4 <bfd_arch_bits_per_address@plt+0x5f20>
   1732c:	ldr	r2, [r6]
   17330:	ldr	r3, [pc, #956]	; 176f4 <bfd_arch_bits_per_address@plt+0x6340>
   17334:	str	r8, [sp]
   17338:	ldr	r2, [r2, r5]
   1733c:	ldr	r9, [r3]
   17340:	mov	sl, #0
   17344:	ldr	r3, [r2, #4]
   17348:	mov	r8, r9
   1734c:	mov	r9, r7
   17350:	mov	r7, r3
   17354:	b	17360 <bfd_arch_bits_per_address@plt+0x5fac>
   17358:	beq	17680 <bfd_arch_bits_per_address@plt+0x62cc>
   1735c:	add	sl, r5, #1
   17360:	cmp	sl, r9
   17364:	bcs	17398 <bfd_arch_bits_per_address@plt+0x5fe4>
   17368:	add	r5, sl, r9
   1736c:	mov	r0, r7
   17370:	lsr	r5, r5, #1
   17374:	add	r4, r5, r5, lsl #1
   17378:	ldr	r1, [r8, r4, lsl #2]
   1737c:	bl	11078 <strcmp@plt>
   17380:	add	r4, r8, r4, lsl #2
   17384:	cmp	r0, #0
   17388:	bge	17358 <bfd_arch_bits_per_address@plt+0x5fa4>
   1738c:	cmp	r5, sl
   17390:	mov	r9, r5
   17394:	bhi	17368 <bfd_arch_bits_per_address@plt+0x5fb4>
   17398:	ldr	r8, [sp]
   1739c:	mov	r4, #0
   173a0:	b	172e8 <bfd_arch_bits_per_address@plt+0x5f34>
   173a4:	ldr	r0, [fp]
   173a8:	cmp	r0, #0
   173ac:	beq	176a8 <bfd_arch_bits_per_address@plt+0x62f4>
   173b0:	add	r0, r0, r0, lsl #1
   173b4:	add	r0, r0, r0, lsl #3
   173b8:	lsl	r0, r0, #3
   173bc:	bl	11180 <xmalloc@plt>
   173c0:	ldr	r3, [r6, #4]
   173c4:	cmp	r3, #0
   173c8:	str	r0, [fp, #4]
   173cc:	str	r0, [fp, #8]
   173d0:	ble	176a0 <bfd_arch_bits_per_address@plt+0x62ec>
   173d4:	mov	r8, #0
   173d8:	b	174d8 <bfd_arch_bits_per_address@plt+0x6124>
   173dc:	ldr	r3, [pc, #780]	; 176f0 <bfd_arch_bits_per_address@plt+0x633c>
   173e0:	ldr	r7, [r3]
   173e4:	cmp	r7, #0
   173e8:	bne	17568 <bfd_arch_bits_per_address@plt+0x61b4>
   173ec:	cmp	r4, #0
   173f0:	beq	175dc <bfd_arch_bits_per_address@plt+0x6228>
   173f4:	ldrb	r3, [r4, #8]
   173f8:	tst	r3, #1
   173fc:	beq	174c8 <bfd_arch_bits_per_address@plt+0x6114>
   17400:	ldr	r0, [fp, #8]
   17404:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   17408:	ldr	r1, [sp]
   1740c:	ldr	r2, [r6]
   17410:	ldr	r3, [fp, #8]
   17414:	ldr	r2, [r2, r1]
   17418:	ldr	r1, [r2, #16]
   1741c:	ldr	r0, [r2, #8]
   17420:	cmp	r1, #0
   17424:	str	r0, [r3]
   17428:	ldrne	r2, [r1, #28]
   1742c:	addne	r0, r0, r2
   17430:	strne	r0, [r3]
   17434:	ldrb	r2, [r3, #20]
   17438:	ldr	r1, [r4, #4]
   1743c:	orr	r2, r2, #8
   17440:	strb	r2, [r3, #20]
   17444:	str	r1, [r3, #8]
   17448:	add	r3, r3, #16
   1744c:	add	r2, sp, #20
   17450:	add	r1, sp, #16
   17454:	bl	16700 <bfd_arch_bits_per_address@plt+0x534c>
   17458:	cmp	r0, #0
   1745c:	bne	17664 <bfd_arch_bits_per_address@plt+0x62b0>
   17460:	ldr	r3, [sp, #8]
   17464:	ldr	r1, [sp, #4]
   17468:	cmp	r3, #0
   1746c:	moveq	r3, #1
   17470:	ldrne	r3, [r6]
   17474:	ldrne	r2, [sp]
   17478:	ldrne	r3, [r3, r2]
   1747c:	ldr	r2, [fp, #8]
   17480:	ldrne	r3, [r3, #12]
   17484:	lsrne	r3, r3, #3
   17488:	andne	r3, r3, #1
   1748c:	cmp	r1, #116	; 0x74
   17490:	ldrb	r1, [r2, #20]
   17494:	bic	r1, r1, #1
   17498:	orr	r3, r3, r1
   1749c:	orr	r3, r3, #4
   174a0:	strb	r3, [r2, #20]
   174a4:	uxtbeq	r3, r3
   174a8:	orreq	r3, r3, #2
   174ac:	strbeq	r3, [r2, #20]
   174b0:	ldr	r3, [pc, #576]	; 176f8 <bfd_arch_bits_per_address@plt+0x6344>
   174b4:	ldr	r3, [r3]
   174b8:	tst	r3, #128	; 0x80
   174bc:	bne	1762c <bfd_arch_bits_per_address@plt+0x6278>
   174c0:	add	r2, r2, #216	; 0xd8
   174c4:	str	r2, [fp, #8]
   174c8:	ldr	r3, [r6, #4]
   174cc:	add	r8, r8, #1
   174d0:	cmp	r3, r8
   174d4:	ble	17534 <bfd_arch_bits_per_address@plt+0x6180>
   174d8:	ldr	r3, [r6]
   174dc:	lsl	r2, r8, #2
   174e0:	str	r2, [sp]
   174e4:	ldr	r0, [r3, r8, lsl #2]
   174e8:	bl	16888 <bfd_arch_bits_per_address@plt+0x54d4>
   174ec:	subs	r3, r0, #0
   174f0:	str	r3, [sp, #4]
   174f4:	bne	173dc <bfd_arch_bits_per_address@plt+0x6028>
   174f8:	ldr	r3, [pc, #504]	; 176f8 <bfd_arch_bits_per_address@plt+0x6344>
   174fc:	ldr	r3, [r3]
   17500:	tst	r3, #128	; 0x80
   17504:	beq	174c8 <bfd_arch_bits_per_address@plt+0x6114>
   17508:	ldr	r3, [r6]
   1750c:	lsl	r2, r8, #2
   17510:	ldr	r0, [pc, #484]	; 176fc <bfd_arch_bits_per_address@plt+0x6348>
   17514:	ldr	r3, [r3, r2]
   17518:	add	r8, r8, #1
   1751c:	ldr	r2, [r3, #4]
   17520:	ldr	r1, [r3, #8]
   17524:	bl	11090 <printf@plt>
   17528:	ldr	r3, [r6, #4]
   1752c:	cmp	r3, r8
   17530:	bgt	174d8 <bfd_arch_bits_per_address@plt+0x6124>
   17534:	ldrd	r2, [fp, #4]
   17538:	sub	r3, r3, r2
   1753c:	asr	r3, r3, #3
   17540:	add	r2, r3, r3, lsl #3
   17544:	add	r3, r3, r2, lsl #1
   17548:	rsb	r3, r3, r3, lsl #9
   1754c:	add	r3, r3, r3, lsl #18
   17550:	rsb	r3, r3, #0
   17554:	ldr	r0, [pc, #400]	; 176ec <bfd_arch_bits_per_address@plt+0x6338>
   17558:	str	r3, [fp]
   1755c:	bl	1a410 <bfd_arch_bits_per_address@plt+0x905c>
   17560:	add	sp, sp, #28
   17564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17568:	ldr	r3, [pc, #388]	; 176f4 <bfd_arch_bits_per_address@plt+0x6340>
   1756c:	ldr	r1, [r6]
   17570:	str	r8, [sp, #12]
   17574:	ldr	r9, [r3]
   17578:	lsl	r3, r8, #2
   1757c:	mov	sl, #0
   17580:	ldr	r1, [r1, r3]
   17584:	mov	r8, r9
   17588:	mov	r9, r7
   1758c:	ldr	r3, [r1, #4]
   17590:	mov	r7, r3
   17594:	b	175a0 <bfd_arch_bits_per_address@plt+0x61ec>
   17598:	beq	17678 <bfd_arch_bits_per_address@plt+0x62c4>
   1759c:	add	sl, r5, #1
   175a0:	cmp	r9, sl
   175a4:	bls	175d8 <bfd_arch_bits_per_address@plt+0x6224>
   175a8:	add	r5, sl, r9
   175ac:	mov	r0, r7
   175b0:	lsr	r5, r5, #1
   175b4:	add	r4, r5, r5, lsl #1
   175b8:	ldr	r1, [r8, r4, lsl #2]
   175bc:	bl	11078 <strcmp@plt>
   175c0:	add	r4, r8, r4, lsl #2
   175c4:	cmp	r0, #0
   175c8:	bge	17598 <bfd_arch_bits_per_address@plt+0x61e4>
   175cc:	cmp	sl, r5
   175d0:	mov	r9, r5
   175d4:	bcc	175a8 <bfd_arch_bits_per_address@plt+0x61f4>
   175d8:	ldr	r8, [sp, #12]
   175dc:	ldr	r0, [fp, #8]
   175e0:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   175e4:	ldr	r2, [r6]
   175e8:	ldr	r1, [sp]
   175ec:	ldr	r3, [fp, #8]
   175f0:	ldr	r1, [r2, r1]
   175f4:	ldr	r2, [r1, #16]
   175f8:	ldr	r0, [r1, #8]
   175fc:	cmp	r2, #0
   17600:	str	r0, [r3]
   17604:	ldrne	r2, [r2, #28]
   17608:	addne	r0, r0, r2
   1760c:	strne	r0, [r3]
   17610:	ldrb	r2, [r3, #20]
   17614:	ldr	r1, [r1, #4]
   17618:	mov	r4, #0
   1761c:	bic	r2, r2, #8
   17620:	str	r1, [r3, #8]
   17624:	strb	r2, [r3, #20]
   17628:	b	17448 <bfd_arch_bits_per_address@plt+0x6094>
   1762c:	ldr	r1, [fp, #4]
   17630:	ldr	r3, [r2]
   17634:	sub	r1, r2, r1
   17638:	ldr	r0, [pc, #192]	; 17700 <bfd_arch_bits_per_address@plt+0x634c>
   1763c:	asr	r1, r1, #3
   17640:	ldr	r2, [r2, #8]
   17644:	add	ip, r1, r1, lsl #3
   17648:	add	r1, r1, ip, lsl #1
   1764c:	rsb	r1, r1, r1, lsl #9
   17650:	add	r1, r1, r1, lsl #18
   17654:	rsb	r1, r1, #0
   17658:	bl	11090 <printf@plt>
   1765c:	ldr	r2, [fp, #8]
   17660:	b	174c0 <bfd_arch_bits_per_address@plt+0x610c>
   17664:	ldr	r0, [sp, #16]
   17668:	ldr	r5, [fp, #8]
   1766c:	bl	19ec8 <bfd_arch_bits_per_address@plt+0x8b14>
   17670:	str	r0, [r5, #12]
   17674:	b	17460 <bfd_arch_bits_per_address@plt+0x60ac>
   17678:	ldr	r8, [sp, #12]
   1767c:	b	173f4 <bfd_arch_bits_per_address@plt+0x6040>
   17680:	ldr	r8, [sp]
   17684:	b	172dc <bfd_arch_bits_per_address@plt+0x5f28>
   17688:	mov	r3, #1
   1768c:	str	r3, [sp, #8]
   17690:	b	172b0 <bfd_arch_bits_per_address@plt+0x5efc>
   17694:	mov	r3, #0
   17698:	str	r3, [sp, #8]
   1769c:	b	172b0 <bfd_arch_bits_per_address@plt+0x5efc>
   176a0:	mov	r3, #0
   176a4:	b	17554 <bfd_arch_bits_per_address@plt+0x61a0>
   176a8:	ldr	r3, [pc, #84]	; 17704 <bfd_arch_bits_per_address@plt+0x6350>
   176ac:	mov	r2, #5
   176b0:	ldr	r1, [pc, #80]	; 17708 <bfd_arch_bits_per_address@plt+0x6354>
   176b4:	ldr	r0, [pc, #80]	; 1770c <bfd_arch_bits_per_address@plt+0x6358>
   176b8:	ldr	r4, [r3]
   176bc:	bl	11120 <dcgettext@plt>
   176c0:	ldr	r3, [pc, #72]	; 17710 <bfd_arch_bits_per_address@plt+0x635c>
   176c4:	ldr	r2, [pc, #72]	; 17714 <bfd_arch_bits_per_address@plt+0x6360>
   176c8:	ldr	r3, [r3]
   176cc:	ldr	r2, [r2]
   176d0:	mov	r1, r0
   176d4:	mov	r0, r4
   176d8:	bl	11270 <fprintf@plt>
   176dc:	mov	r0, #1
   176e0:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   176e4:	andeq	r5, r3, r0, lsr #8
   176e8:	andeq	r4, r3, r0, lsl #10
   176ec:	andeq	r5, r3, r0, asr r4
   176f0:	andeq	r5, r3, ip, lsr #8
   176f4:	andeq	r5, r3, r8, lsr #8
   176f8:	andeq	r5, r3, r0, lsr #2
   176fc:	andeq	pc, r1, r8, asr #7
   17700:	strdeq	pc, [r1], -ip
   17704:			; <UNDEFINED> instruction: 0x000344b8
   17708:	andeq	pc, r1, r4, lsl #7
   1770c:	andeq	lr, r1, r0, asr #13
   17710:	andeq	r4, r3, r8, lsl r4
   17714:	andeq	r5, r3, ip, lsr r4
   17718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1771c:	sub	sp, sp, #260	; 0x104
   17720:	bl	17278 <bfd_arch_bits_per_address@plt+0x5ec4>
   17724:	mov	r0, #4096	; 0x1000
   17728:	bl	11180 <xmalloc@plt>
   1772c:	mov	r5, #0
   17730:	mov	r8, r0
   17734:	mov	r0, #4096	; 0x1000
   17738:	bl	11180 <xmalloc@plt>
   1773c:	ldr	r3, [pc, #1084]	; 17b80 <bfd_arch_bits_per_address@plt+0x67cc>
   17740:	str	r5, [sp, #28]
   17744:	ldr	r3, [r3]
   17748:	ldr	r4, [r3, #28]
   1774c:	ldr	r3, [r3, #36]	; 0x24
   17750:	add	r9, r4, r3
   17754:	cmp	r4, r9
   17758:	str	r0, [sp, #12]
   1775c:	bcs	17894 <bfd_arch_bits_per_address@plt+0x64e0>
   17760:	mov	r3, #4096	; 0x1000
   17764:	str	r3, [sp, #16]
   17768:	ldr	r6, [pc, #1044]	; 17b84 <bfd_arch_bits_per_address@plt+0x67d0>
   1776c:	str	r3, [sp, #20]
   17770:	add	sl, sp, #24
   17774:	b	177dc <bfd_arch_bits_per_address@plt+0x6428>
   17778:	ldr	r3, [sp, #28]
   1777c:	mov	r0, fp
   17780:	add	r3, r3, #1
   17784:	str	r3, [sp, #28]
   17788:	bl	1124c <strlen@plt>
   1778c:	ldr	r3, [sp, #20]
   17790:	cmp	r3, r0
   17794:	bls	17868 <bfd_arch_bits_per_address@plt+0x64b4>
   17798:	mov	r1, fp
   1779c:	mov	r0, r8
   177a0:	bl	111a4 <strcpy@plt>
   177a4:	ldr	r5, [sp, #24]
   177a8:	mov	r0, r5
   177ac:	bl	1124c <strlen@plt>
   177b0:	ldr	r3, [sp, #16]
   177b4:	cmp	r3, r0
   177b8:	bls	17840 <bfd_arch_bits_per_address@plt+0x648c>
   177bc:	mov	r1, r5
   177c0:	ldr	r0, [sp, #12]
   177c4:	bl	111a4 <strcpy@plt>
   177c8:	mov	r5, r7
   177cc:	ldr	r3, [r6, #8]
   177d0:	add	r4, r4, r3
   177d4:	cmp	r9, r4
   177d8:	bls	17890 <bfd_arch_bits_per_address@plt+0x64dc>
   177dc:	add	r3, sp, #56	; 0x38
   177e0:	add	r2, sp, #48	; 0x30
   177e4:	mov	r1, sl
   177e8:	mov	r0, r4
   177ec:	bl	16700 <bfd_arch_bits_per_address@plt+0x534c>
   177f0:	cmp	r0, #0
   177f4:	beq	177cc <bfd_arch_bits_per_address@plt+0x6418>
   177f8:	ldr	r7, [sp, #56]	; 0x38
   177fc:	ldr	fp, [sp, #48]	; 0x30
   17800:	cmp	r7, r5
   17804:	bne	17778 <bfd_arch_bits_per_address@plt+0x63c4>
   17808:	mov	r1, fp
   1780c:	mov	r0, r8
   17810:	bl	11078 <strcmp@plt>
   17814:	cmp	r0, #0
   17818:	movne	r7, r5
   1781c:	bne	17778 <bfd_arch_bits_per_address@plt+0x63c4>
   17820:	ldr	r1, [sp, #24]
   17824:	ldr	r0, [sp, #12]
   17828:	bl	110cc <filename_cmp@plt>
   1782c:	cmp	r0, #0
   17830:	beq	177cc <bfd_arch_bits_per_address@plt+0x6418>
   17834:	ldr	fp, [sp, #48]	; 0x30
   17838:	ldr	r7, [sp, #56]	; 0x38
   1783c:	b	17778 <bfd_arch_bits_per_address@plt+0x63c4>
   17840:	add	r3, r0, #1024	; 0x400
   17844:	mov	r5, r3
   17848:	ldr	r0, [sp, #12]
   1784c:	str	r3, [sp, #16]
   17850:	bl	110a8 <free@plt>
   17854:	mov	r0, r5
   17858:	bl	11180 <xmalloc@plt>
   1785c:	ldr	r5, [sp, #24]
   17860:	str	r0, [sp, #12]
   17864:	b	177bc <bfd_arch_bits_per_address@plt+0x6408>
   17868:	add	r3, r0, #1024	; 0x400
   1786c:	mov	r5, r3
   17870:	mov	r0, r8
   17874:	str	r3, [sp, #20]
   17878:	bl	110a8 <free@plt>
   1787c:	mov	r0, r5
   17880:	bl	11180 <xmalloc@plt>
   17884:	ldr	fp, [sp, #48]	; 0x30
   17888:	mov	r8, r0
   1788c:	b	17798 <bfd_arch_bits_per_address@plt+0x63e4>
   17890:	ldr	r5, [sp, #28]
   17894:	ldr	r7, [pc, #748]	; 17b88 <bfd_arch_bits_per_address@plt+0x67d4>
   17898:	mov	r0, r8
   1789c:	bl	110a8 <free@plt>
   178a0:	ldr	r0, [sp, #12]
   178a4:	bl	110a8 <free@plt>
   178a8:	ldr	r0, [r7]
   178ac:	add	r0, r5, r0
   178b0:	str	r0, [sp, #28]
   178b4:	add	r0, r0, r0, lsl #1
   178b8:	add	r0, r0, r0, lsl #3
   178bc:	lsl	r0, r0, #3
   178c0:	bl	11180 <xmalloc@plt>
   178c4:	ldr	r3, [pc, #692]	; 17b80 <bfd_arch_bits_per_address@plt+0x67cc>
   178c8:	ldr	r3, [r3]
   178cc:	ldr	r4, [r3, #28]
   178d0:	cmp	r9, r4
   178d4:	str	r0, [sp, #32]
   178d8:	str	r0, [sp, #36]	; 0x24
   178dc:	bls	179dc <bfd_arch_bits_per_address@plt+0x6628>
   178e0:	ldr	r6, [pc, #668]	; 17b84 <bfd_arch_bits_per_address@plt+0x67d0>
   178e4:	ldr	r8, [pc, #672]	; 17b8c <bfd_arch_bits_per_address@plt+0x67d8>
   178e8:	mov	r5, #0
   178ec:	add	sl, sp, #24
   178f0:	b	179a4 <bfd_arch_bits_per_address@plt+0x65f0>
   178f4:	ldr	fp, [sp, #36]	; 0x24
   178f8:	cmp	r5, #0
   178fc:	ldr	r3, [fp, #8]
   17900:	beq	17b04 <bfd_arch_bits_per_address@plt+0x6750>
   17904:	ldr	r1, [r5, #16]
   17908:	ldr	r2, [fp, #16]
   1790c:	cmp	r1, r2
   17910:	beq	17a90 <bfd_arch_bits_per_address@plt+0x66dc>
   17914:	mov	r0, r3
   17918:	bl	11198 <xstrdup@plt>
   1791c:	ldr	r3, [sp, #36]	; 0x24
   17920:	str	r3, [sp, #12]
   17924:	str	r0, [fp, #8]
   17928:	ldr	r0, [sp, #24]
   1792c:	bl	19ec8 <bfd_arch_bits_per_address@plt+0x8b14>
   17930:	ldr	r3, [sp, #12]
   17934:	ldr	fp, [sp, #36]	; 0x24
   17938:	str	r0, [r3, #12]
   1793c:	ldr	r2, [fp, #12]
   17940:	ldr	r3, [r5, #12]
   17944:	str	r4, [fp]
   17948:	cmp	r2, r3
   1794c:	beq	17ad0 <bfd_arch_bits_per_address@plt+0x671c>
   17950:	mov	r1, r4
   17954:	ldr	r0, [pc, #556]	; 17b88 <bfd_arch_bits_per_address@plt+0x67d4>
   17958:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   1795c:	ldr	r5, [sp, #36]	; 0x24
   17960:	cmp	r0, #0
   17964:	ldrbne	r3, [r0, #20]
   17968:	ldrbne	r2, [r5, #20]
   1796c:	andne	r3, r3, #2
   17970:	bicne	r2, r2, #2
   17974:	orrne	r3, r3, r2
   17978:	strbne	r3, [r5, #20]
   1797c:	ldr	r3, [r8]
   17980:	tst	r3, #128	; 0x80
   17984:	moveq	r0, r5
   17988:	bne	17a58 <bfd_arch_bits_per_address@plt+0x66a4>
   1798c:	ldr	r3, [r6, #8]
   17990:	add	r0, r0, #216	; 0xd8
   17994:	add	r4, r4, r3
   17998:	cmp	r9, r4
   1799c:	str	r0, [sp, #36]	; 0x24
   179a0:	bls	179dc <bfd_arch_bits_per_address@plt+0x6628>
   179a4:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   179a8:	ldr	r2, [sp, #36]	; 0x24
   179ac:	mov	r1, sl
   179b0:	add	r3, r2, #16
   179b4:	mov	r0, r4
   179b8:	add	r2, r2, #8
   179bc:	bl	16700 <bfd_arch_bits_per_address@plt+0x534c>
   179c0:	cmp	r0, #0
   179c4:	bne	178f4 <bfd_arch_bits_per_address@plt+0x6540>
   179c8:	ldr	r3, [r6, #8]
   179cc:	ldr	r0, [sp, #36]	; 0x24
   179d0:	add	r4, r4, r3
   179d4:	cmp	r9, r4
   179d8:	bhi	179a4 <bfd_arch_bits_per_address@plt+0x65f0>
   179dc:	ldr	r2, [r7]
   179e0:	ldr	r1, [r7, #4]
   179e4:	add	r2, r2, r2, lsl #1
   179e8:	add	r2, r2, r2, lsl #3
   179ec:	lsl	r2, r2, #3
   179f0:	bl	110e4 <memcpy@plt>
   179f4:	ldr	r2, [r7]
   179f8:	ldr	r1, [sp, #36]	; 0x24
   179fc:	ldr	r3, [sp, #32]
   17a00:	add	r2, r2, r2, lsl #1
   17a04:	ldr	r0, [sp, #28]
   17a08:	add	r2, r2, r2, lsl #3
   17a0c:	add	r2, r1, r2, lsl #3
   17a10:	sub	r3, r2, r3
   17a14:	str	r2, [sp, #36]	; 0x24
   17a18:	asr	r3, r3, #3
   17a1c:	add	r2, r3, r3, lsl #3
   17a20:	add	r3, r3, r2, lsl #1
   17a24:	rsb	r3, r3, r3, lsl #9
   17a28:	add	r3, r3, r3, lsl #18
   17a2c:	cmn	r0, r3
   17a30:	bne	17b2c <bfd_arch_bits_per_address@plt+0x6778>
   17a34:	add	r4, sp, #28
   17a38:	mov	r0, r4
   17a3c:	bl	1a410 <bfd_arch_bits_per_address@plt+0x905c>
   17a40:	ldr	r0, [r7, #4]
   17a44:	bl	110a8 <free@plt>
   17a48:	ldm	r4, {r0, r1, r2}
   17a4c:	stm	r7, {r0, r1, r2}
   17a50:	add	sp, sp, #260	; 0x104
   17a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a58:	ldr	r1, [sp, #32]
   17a5c:	ldr	r3, [r5]
   17a60:	sub	r1, r5, r1
   17a64:	ldr	r2, [r5, #8]
   17a68:	asr	r1, r1, #3
   17a6c:	ldr	r0, [pc, #284]	; 17b90 <bfd_arch_bits_per_address@plt+0x67dc>
   17a70:	add	ip, r1, r1, lsl #3
   17a74:	add	r1, r1, ip, lsl #1
   17a78:	rsb	r1, r1, r1, lsl #9
   17a7c:	add	r1, r1, r1, lsl #18
   17a80:	rsb	r1, r1, #0
   17a84:	bl	11090 <printf@plt>
   17a88:	ldr	r0, [sp, #36]	; 0x24
   17a8c:	b	1798c <bfd_arch_bits_per_address@plt+0x65d8>
   17a90:	mov	r1, r3
   17a94:	ldr	r0, [r5, #8]
   17a98:	str	r3, [sp, #12]
   17a9c:	bl	11078 <strcmp@plt>
   17aa0:	ldr	r3, [sp, #12]
   17aa4:	cmp	r0, #0
   17aa8:	bne	17914 <bfd_arch_bits_per_address@plt+0x6560>
   17aac:	ldr	r3, [r5, #12]
   17ab0:	ldr	r1, [sp, #24]
   17ab4:	ldr	r0, [r3, #4]
   17ab8:	bl	110cc <filename_cmp@plt>
   17abc:	cmp	r0, #0
   17ac0:	beq	179c8 <bfd_arch_bits_per_address@plt+0x6614>
   17ac4:	ldr	fp, [sp, #36]	; 0x24
   17ac8:	ldr	r3, [fp, #8]
   17acc:	b	17914 <bfd_arch_bits_per_address@plt+0x6560>
   17ad0:	ldr	r1, [r5, #8]
   17ad4:	ldr	r0, [fp, #8]
   17ad8:	bl	11078 <strcmp@plt>
   17adc:	cmp	r0, #0
   17ae0:	bne	17950 <bfd_arch_bits_per_address@plt+0x659c>
   17ae4:	ldrb	r3, [r5, #20]
   17ae8:	ldrb	r2, [fp, #20]
   17aec:	mov	r5, fp
   17af0:	and	r3, r3, #2
   17af4:	bic	r2, r2, #2
   17af8:	orr	r3, r3, r2
   17afc:	strb	r3, [fp, #20]
   17b00:	b	1797c <bfd_arch_bits_per_address@plt+0x65c8>
   17b04:	mov	r0, r3
   17b08:	bl	11198 <xstrdup@plt>
   17b0c:	ldr	r5, [sp, #36]	; 0x24
   17b10:	str	r0, [fp, #8]
   17b14:	ldr	r0, [sp, #24]
   17b18:	bl	19ec8 <bfd_arch_bits_per_address@plt+0x8b14>
   17b1c:	ldr	r3, [sp, #36]	; 0x24
   17b20:	str	r0, [r5, #12]
   17b24:	str	r4, [r3]
   17b28:	b	17950 <bfd_arch_bits_per_address@plt+0x659c>
   17b2c:	ldr	r3, [pc, #96]	; 17b94 <bfd_arch_bits_per_address@plt+0x67e0>
   17b30:	mov	r2, #5
   17b34:	ldr	r1, [pc, #92]	; 17b98 <bfd_arch_bits_per_address@plt+0x67e4>
   17b38:	ldr	r0, [pc, #92]	; 17b9c <bfd_arch_bits_per_address@plt+0x67e8>
   17b3c:	ldr	r4, [r3]
   17b40:	bl	11120 <dcgettext@plt>
   17b44:	ldr	r3, [sp, #32]
   17b48:	ldr	r2, [sp, #36]	; 0x24
   17b4c:	ldr	r1, [pc, #76]	; 17ba0 <bfd_arch_bits_per_address@plt+0x67ec>
   17b50:	sub	r2, r2, r3
   17b54:	ldr	ip, [pc, #72]	; 17ba4 <bfd_arch_bits_per_address@plt+0x67f0>
   17b58:	asr	r2, r2, #3
   17b5c:	ldr	r3, [sp, #28]
   17b60:	mul	r1, r1, r2
   17b64:	ldr	r2, [ip]
   17b68:	str	r1, [sp]
   17b6c:	mov	r1, r0
   17b70:	mov	r0, r4
   17b74:	bl	11270 <fprintf@plt>
   17b78:	mov	r0, #1
   17b7c:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   17b80:	andeq	r5, r3, r0, lsr r4
   17b84:	andeq	r4, r3, r0, lsl #10
   17b88:	andeq	r5, r3, r0, asr r4
   17b8c:	andeq	r5, r3, r0, lsr #2
   17b90:	andeq	pc, r1, r8, lsr #8
   17b94:			; <UNDEFINED> instruction: 0x000344b8
   17b98:	andeq	pc, r1, r0, asr r4	; <UNPREDICTABLE>
   17b9c:	andeq	lr, r1, r0, asr #13
   17ba0:	stmdavs	fp, {r0, r1, r4, r9, fp, ip, lr, pc}^
   17ba4:	andeq	r5, r3, ip, lsr r4
   17ba8:	push	{r4, lr}
   17bac:	sub	sp, sp, #8
   17bb0:	mov	r3, r0
   17bb4:	mov	r4, r1
   17bb8:	mov	r2, #8
   17bbc:	mov	r0, sp
   17bc0:	mov	r1, #1
   17bc4:	bl	111b0 <fread@plt>
   17bc8:	cmp	r0, #8
   17bcc:	movne	r3, #1
   17bd0:	bne	17bf4 <bfd_arch_bits_per_address@plt+0x6840>
   17bd4:	ldr	r3, [pc, #36]	; 17c00 <bfd_arch_bits_per_address@plt+0x684c>
   17bd8:	mov	r0, sp
   17bdc:	ldr	r3, [r3]
   17be0:	ldr	r3, [r3, #4]
   17be4:	ldr	r3, [r3, #28]
   17be8:	blx	r3
   17bec:	mov	r3, #0
   17bf0:	strd	r0, [r4]
   17bf4:	mov	r0, r3
   17bf8:	add	sp, sp, #8
   17bfc:	pop	{r4, pc}
   17c00:	andeq	r5, r3, r0, lsr #8
   17c04:	push	{r4, r5, r6, lr}
   17c08:	ldr	r5, [pc, #120]	; 17c88 <bfd_arch_bits_per_address@plt+0x68d4>
   17c0c:	ldr	r0, [r5]
   17c10:	bl	111c8 <bfd_get_arch_size@plt>
   17c14:	cmn	r0, #1
   17c18:	movne	r4, r0
   17c1c:	beq	17c40 <bfd_arch_bits_per_address@plt+0x688c>
   17c20:	cmp	r4, #32
   17c24:	beq	17c38 <bfd_arch_bits_per_address@plt+0x6884>
   17c28:	cmp	r4, #64	; 0x40
   17c2c:	bne	17c50 <bfd_arch_bits_per_address@plt+0x689c>
   17c30:	mov	r0, #1
   17c34:	pop	{r4, r5, r6, pc}
   17c38:	mov	r0, #0
   17c3c:	pop	{r4, r5, r6, pc}
   17c40:	ldr	r0, [r5]
   17c44:	bl	113b4 <bfd_arch_bits_per_address@plt>
   17c48:	mov	r4, r0
   17c4c:	b	17c20 <bfd_arch_bits_per_address@plt+0x686c>
   17c50:	ldr	r3, [pc, #52]	; 17c8c <bfd_arch_bits_per_address@plt+0x68d8>
   17c54:	mov	r2, #5
   17c58:	ldr	r1, [pc, #48]	; 17c90 <bfd_arch_bits_per_address@plt+0x68dc>
   17c5c:	ldr	r0, [pc, #48]	; 17c94 <bfd_arch_bits_per_address@plt+0x68e0>
   17c60:	ldr	r5, [r3]
   17c64:	bl	11120 <dcgettext@plt>
   17c68:	ldr	r2, [pc, #40]	; 17c98 <bfd_arch_bits_per_address@plt+0x68e4>
   17c6c:	mov	r3, r4
   17c70:	ldr	r2, [r2]
   17c74:	mov	r1, r0
   17c78:	mov	r0, r5
   17c7c:	bl	11270 <fprintf@plt>
   17c80:	mov	r0, #1
   17c84:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   17c88:	andeq	r5, r3, r0, lsr #8
   17c8c:			; <UNDEFINED> instruction: 0x000344b8
   17c90:	andeq	pc, r1, r8, lsl #9
   17c94:	andeq	lr, r1, r0, asr #13
   17c98:	andeq	r5, r3, ip, lsr r4
   17c9c:	ldr	r3, [pc, #76]	; 17cf0 <bfd_arch_bits_per_address@plt+0x693c>
   17ca0:	push	{r4, lr}
   17ca4:	mov	r1, r2
   17ca8:	ldr	r3, [r3]
   17cac:	sub	sp, sp, #8
   17cb0:	mov	r4, r0
   17cb4:	ldr	r3, [r3, #4]
   17cb8:	mov	r2, sp
   17cbc:	mov	r0, r1
   17cc0:	ldr	r3, [r3, #36]	; 0x24
   17cc4:	mov	r1, #0
   17cc8:	blx	r3
   17ccc:	mov	r3, r4
   17cd0:	mov	r0, sp
   17cd4:	mov	r2, #8
   17cd8:	mov	r1, #1
   17cdc:	bl	11174 <fwrite@plt>
   17ce0:	subs	r0, r0, #8
   17ce4:	movne	r0, #1
   17ce8:	add	sp, sp, #8
   17cec:	pop	{r4, pc}
   17cf0:	andeq	r5, r3, r0, lsr #8
   17cf4:	push	{r4, lr}
   17cf8:	mov	r2, #4
   17cfc:	sub	sp, sp, #8
   17d00:	mov	r3, r0
   17d04:	mov	r4, r1
   17d08:	add	r0, sp, r2
   17d0c:	mov	r1, #1
   17d10:	bl	111b0 <fread@plt>
   17d14:	cmp	r0, #4
   17d18:	movne	r3, #1
   17d1c:	bne	17d40 <bfd_arch_bits_per_address@plt+0x698c>
   17d20:	ldr	r3, [pc, #36]	; 17d4c <bfd_arch_bits_per_address@plt+0x6998>
   17d24:	add	r0, sp, #4
   17d28:	ldr	r3, [r3]
   17d2c:	ldr	r3, [r3, #4]
   17d30:	ldr	r3, [r3, #40]	; 0x28
   17d34:	blx	r3
   17d38:	mov	r3, #0
   17d3c:	str	r0, [r4]
   17d40:	mov	r0, r3
   17d44:	add	sp, sp, #8
   17d48:	pop	{r4, pc}
   17d4c:	andeq	r5, r3, r0, lsr #8
   17d50:	push	{r4, r5, r6, lr}
   17d54:	sub	sp, sp, #8
   17d58:	mov	r4, r0
   17d5c:	mov	r6, r1
   17d60:	bl	17c04 <bfd_arch_bits_per_address@plt+0x6850>
   17d64:	subs	r5, r0, #0
   17d68:	beq	17d9c <bfd_arch_bits_per_address@plt+0x69e8>
   17d6c:	cmp	r5, #1
   17d70:	movne	r4, #0
   17d74:	bne	17d90 <bfd_arch_bits_per_address@plt+0x69dc>
   17d78:	mov	r0, r4
   17d7c:	mov	r1, sp
   17d80:	bl	17ba8 <bfd_arch_bits_per_address@plt+0x67f4>
   17d84:	subs	r4, r0, #0
   17d88:	beq	17db0 <bfd_arch_bits_per_address@plt+0x69fc>
   17d8c:	mov	r4, #1
   17d90:	mov	r0, r4
   17d94:	add	sp, sp, #8
   17d98:	pop	{r4, r5, r6, pc}
   17d9c:	mov	r0, r4
   17da0:	mov	r1, sp
   17da4:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   17da8:	subs	r4, r0, #0
   17dac:	bne	17d8c <bfd_arch_bits_per_address@plt+0x69d8>
   17db0:	ldr	r3, [pc, #24]	; 17dd0 <bfd_arch_bits_per_address@plt+0x6a1c>
   17db4:	ldr	r0, [r3]
   17db8:	bl	112c4 <bfd_get_sign_extend_vma@plt>
   17dbc:	ldr	r3, [sp]
   17dc0:	mov	r0, r4
   17dc4:	str	r3, [r6]
   17dc8:	add	sp, sp, #8
   17dcc:	pop	{r4, r5, r6, pc}
   17dd0:	andeq	r5, r3, r0, lsr #8
   17dd4:	mov	ip, r1
   17dd8:	push	{r4, lr}
   17ddc:	mov	r3, r0
   17de0:	mov	r1, #1
   17de4:	mov	r0, ip
   17de8:	mov	r4, r2
   17dec:	bl	111b0 <fread@plt>
   17df0:	subs	r0, r0, r4
   17df4:	movne	r0, #1
   17df8:	pop	{r4, pc}
   17dfc:	ldr	r3, [pc, #72]	; 17e4c <bfd_arch_bits_per_address@plt+0x6a98>
   17e00:	push	{r4, lr}
   17e04:	mov	r2, r1
   17e08:	ldr	r3, [r3]
   17e0c:	sub	sp, sp, #8
   17e10:	mov	r4, r0
   17e14:	ldr	r3, [r3, #4]
   17e18:	add	r1, sp, #4
   17e1c:	mov	r0, r2
   17e20:	ldr	r3, [r3, #48]	; 0x30
   17e24:	blx	r3
   17e28:	mov	r3, r4
   17e2c:	add	r0, sp, #4
   17e30:	mov	r2, #4
   17e34:	mov	r1, #1
   17e38:	bl	11174 <fwrite@plt>
   17e3c:	subs	r0, r0, #4
   17e40:	movne	r0, #1
   17e44:	add	sp, sp, #8
   17e48:	pop	{r4, pc}
   17e4c:	andeq	r5, r3, r0, lsr #8
   17e50:	push	{r4, r5, r6, lr}
   17e54:	mov	r4, r0
   17e58:	mov	r5, r1
   17e5c:	bl	17c04 <bfd_arch_bits_per_address@plt+0x6850>
   17e60:	cmp	r0, #0
   17e64:	beq	17e94 <bfd_arch_bits_per_address@plt+0x6ae0>
   17e68:	cmp	r0, #1
   17e6c:	bne	17e8c <bfd_arch_bits_per_address@plt+0x6ad8>
   17e70:	mov	r2, r5
   17e74:	mov	r0, r4
   17e78:	mov	r3, #0
   17e7c:	bl	17c9c <bfd_arch_bits_per_address@plt+0x68e8>
   17e80:	adds	r0, r0, #0
   17e84:	movne	r0, #1
   17e88:	pop	{r4, r5, r6, pc}
   17e8c:	mov	r0, #0
   17e90:	pop	{r4, r5, r6, pc}
   17e94:	mov	r1, r5
   17e98:	mov	r0, r4
   17e9c:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   17ea0:	adds	r0, r0, #0
   17ea4:	movne	r0, #1
   17ea8:	pop	{r4, r5, r6, pc}
   17eac:	push	{lr}		; (str lr, [sp, #-4]!)
   17eb0:	sub	sp, sp, #12
   17eb4:	mov	r2, #1
   17eb8:	strb	r1, [sp, #4]
   17ebc:	mov	r3, r0
   17ec0:	mov	r1, r2
   17ec4:	add	r0, sp, #4
   17ec8:	bl	11174 <fwrite@plt>
   17ecc:	subs	r0, r0, #1
   17ed0:	movne	r0, #1
   17ed4:	add	sp, sp, #12
   17ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   17edc:	mov	ip, r1
   17ee0:	push	{r4, lr}
   17ee4:	mov	r3, r0
   17ee8:	mov	r1, #1
   17eec:	mov	r0, ip
   17ef0:	mov	r4, r2
   17ef4:	bl	11174 <fwrite@plt>
   17ef8:	subs	r0, r0, r4
   17efc:	movne	r0, #1
   17f00:	pop	{r4, pc}
   17f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f08:	sub	sp, sp, #76	; 0x4c
   17f0c:	ldr	r1, [pc, #1992]	; 186dc <bfd_arch_bits_per_address@plt+0x7328>
   17f10:	mov	r7, r0
   17f14:	bl	11078 <strcmp@plt>
   17f18:	cmp	r0, #0
   17f1c:	bne	18344 <bfd_arch_bits_per_address@plt+0x6f90>
   17f20:	ldr	r3, [pc, #1976]	; 186e0 <bfd_arch_bits_per_address@plt+0x732c>
   17f24:	ldr	r5, [r3]
   17f28:	add	r0, sp, #52	; 0x34
   17f2c:	mov	r3, r5
   17f30:	mov	r2, #1
   17f34:	mov	r1, #20
   17f38:	bl	111b0 <fread@plt>
   17f3c:	cmp	r0, #1
   17f40:	mov	r6, r0
   17f44:	bne	185cc <bfd_arch_bits_per_address@plt+0x7218>
   17f48:	ldr	r8, [pc, #1940]	; 186e4 <bfd_arch_bits_per_address@plt+0x7330>
   17f4c:	ldr	r4, [r8]
   17f50:	cmp	r4, #1
   17f54:	beq	18400 <bfd_arch_bits_per_address@plt+0x704c>
   17f58:	cmp	r4, #0
   17f5c:	beq	18170 <bfd_arch_bits_per_address@plt+0x6dbc>
   17f60:	sub	r4, r4, #2
   17f64:	cmp	r4, #1
   17f68:	bhi	185fc <bfd_arch_bits_per_address@plt+0x7248>
   17f6c:	ldr	r6, [pc, #1908]	; 186e8 <bfd_arch_bits_per_address@plt+0x7334>
   17f70:	mov	r2, #0
   17f74:	mov	r3, #3
   17f78:	mov	r1, r2
   17f7c:	mov	r0, r5
   17f80:	str	r3, [r6, #4]
   17f84:	bl	11378 <fseek@plt>
   17f88:	cmp	r0, #0
   17f8c:	blt	18358 <bfd_arch_bits_per_address@plt+0x6fa4>
   17f90:	add	r1, sp, #40	; 0x28
   17f94:	mov	r0, r5
   17f98:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   17f9c:	cmp	r0, #0
   17fa0:	bne	185cc <bfd_arch_bits_per_address@plt+0x7218>
   17fa4:	add	r1, sp, #44	; 0x2c
   17fa8:	mov	r0, r5
   17fac:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   17fb0:	cmp	r0, #0
   17fb4:	bne	185cc <bfd_arch_bits_per_address@plt+0x7218>
   17fb8:	add	r1, sp, #48	; 0x30
   17fbc:	mov	r0, r5
   17fc0:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   17fc4:	cmp	r0, #0
   17fc8:	bne	185cc <bfd_arch_bits_per_address@plt+0x7218>
   17fcc:	add	r1, sp, #28
   17fd0:	mov	r0, r5
   17fd4:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   17fd8:	subs	r3, r0, #0
   17fdc:	str	r3, [sp, #8]
   17fe0:	bne	185cc <bfd_arch_bits_per_address@plt+0x7218>
   17fe4:	ldr	r3, [pc, #1792]	; 186ec <bfd_arch_bits_per_address@plt+0x7338>
   17fe8:	ldr	r2, [sp, #28]
   17fec:	cmp	r2, r3
   17ff0:	beq	18474 <bfd_arch_bits_per_address@plt+0x70c0>
   17ff4:	ldr	r3, [r8]
   17ff8:	cmp	r3, #3
   17ffc:	beq	186cc <bfd_arch_bits_per_address@plt+0x7318>
   18000:	bl	17c04 <bfd_arch_bits_per_address@plt+0x6850>
   18004:	cmp	r0, #0
   18008:	moveq	r4, #12
   1800c:	beq	1801c <bfd_arch_bits_per_address@plt+0x6c68>
   18010:	cmp	r0, #1
   18014:	moveq	r4, #20
   18018:	movne	r4, #0
   1801c:	mov	r2, #0
   18020:	mov	r1, r4
   18024:	mov	r0, r5
   18028:	bl	11378 <fseek@plt>
   1802c:	cmp	r0, #0
   18030:	blt	18358 <bfd_arch_bits_per_address@plt+0x6fa4>
   18034:	ldr	r9, [pc, #1716]	; 186f0 <bfd_arch_bits_per_address@plt+0x733c>
   18038:	ldr	r3, [sp, #48]	; 0x30
   1803c:	ldr	sl, [r9]
   18040:	sub	r4, r3, r4
   18044:	cmp	sl, #0
   18048:	lsr	r8, r4, #1
   1804c:	beq	184cc <bfd_arch_bits_per_address@plt+0x7118>
   18050:	ldr	r2, [sp, #40]	; 0x28
   18054:	ldr	r3, [sl]
   18058:	cmp	r2, r3
   1805c:	bne	186bc <bfd_arch_bits_per_address@plt+0x7308>
   18060:	ldr	r2, [sp, #44]	; 0x2c
   18064:	ldr	r3, [sl, #4]
   18068:	cmp	r2, r3
   1806c:	bne	186bc <bfd_arch_bits_per_address@plt+0x7308>
   18070:	ldr	r3, [sl, #8]
   18074:	cmp	r3, r8
   18078:	bne	186bc <bfd_arch_bits_per_address@plt+0x7308>
   1807c:	ldr	fp, [pc, #1648]	; 186f4 <bfd_arch_bits_per_address@plt+0x7340>
   18080:	ldr	r3, [fp]
   18084:	tst	r3, #64	; 0x40
   18088:	bne	18450 <bfd_arch_bits_per_address@plt+0x709c>
   1808c:	cmp	r4, #0
   18090:	blt	18684 <bfd_arch_bits_per_address@plt+0x72d0>
   18094:	ldr	r3, [r9]
   18098:	ldrd	r2, [r3]
   1809c:	cmp	r2, r3
   180a0:	bhi	18684 <bfd_arch_bits_per_address@plt+0x72d0>
   180a4:	cmp	r4, #1
   180a8:	movls	r3, #0
   180ac:	movhi	r3, #1
   180b0:	cmp	r8, #0
   180b4:	str	r3, [sp, #12]
   180b8:	ldrne	sl, [pc, #1592]	; 186f8 <bfd_arch_bits_per_address@plt+0x7344>
   180bc:	movne	r4, #0
   180c0:	beq	18114 <bfd_arch_bits_per_address@plt+0x6d60>
   180c4:	mov	r3, r5
   180c8:	mov	r2, #1
   180cc:	mov	r1, #2
   180d0:	add	r0, sp, #16
   180d4:	bl	111b0 <fread@plt>
   180d8:	cmp	r0, #1
   180dc:	bne	18590 <bfd_arch_bits_per_address@plt+0x71dc>
   180e0:	ldr	r3, [sl]
   180e4:	add	r0, sp, #16
   180e8:	ldr	r3, [r3, #4]
   180ec:	ldr	r3, [r3, #52]	; 0x34
   180f0:	blx	r3
   180f4:	ldr	r3, [r9]
   180f8:	ldr	r2, [r3, #12]
   180fc:	ldr	r3, [r2, r4, lsl #2]
   18100:	add	r0, r3, r0
   18104:	str	r0, [r2, r4, lsl #2]
   18108:	add	r4, r4, #1
   1810c:	cmp	r8, r4
   18110:	bne	180c4 <bfd_arch_bits_per_address@plt+0x6d10>
   18114:	ldr	r9, [pc, #1504]	; 186fc <bfd_arch_bits_per_address@plt+0x7348>
   18118:	mov	r4, #0
   1811c:	add	r1, sp, #20
   18120:	mov	r0, r5
   18124:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   18128:	cmp	r0, #0
   1812c:	beq	18268 <bfd_arch_bits_per_address@plt+0x6eb4>
   18130:	ldr	r8, [pc, #1480]	; 18700 <bfd_arch_bits_per_address@plt+0x734c>
   18134:	ldr	r3, [r8]
   18138:	cmp	r3, #0
   1813c:	beq	18304 <bfd_arch_bits_per_address@plt+0x6f50>
   18140:	ldr	r3, [pc, #1432]	; 186e0 <bfd_arch_bits_per_address@plt+0x732c>
   18144:	ldr	r3, [r3]
   18148:	cmp	r3, r5
   1814c:	beq	18158 <bfd_arch_bits_per_address@plt+0x6da4>
   18150:	mov	r0, r5
   18154:	bl	112d0 <fclose@plt>
   18158:	ldr	r3, [pc, #1444]	; 18704 <bfd_arch_bits_per_address@plt+0x7350>
   1815c:	ldr	r3, [r3]
   18160:	tst	r3, #32
   18164:	bne	18368 <bfd_arch_bits_per_address@plt+0x6fb4>
   18168:	add	sp, sp, #76	; 0x4c
   1816c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18170:	add	r0, sp, #52	; 0x34
   18174:	mov	r2, #4
   18178:	ldr	r1, [pc, #1416]	; 18708 <bfd_arch_bits_per_address@plt+0x7354>
   1817c:	bl	1139c <strncmp@plt>
   18180:	cmp	r0, #0
   18184:	bne	17f6c <bfd_arch_bits_per_address@plt+0x6bb8>
   18188:	ldr	r3, [pc, #1384]	; 186f8 <bfd_arch_bits_per_address@plt+0x7344>
   1818c:	add	r0, sp, #56	; 0x38
   18190:	ldr	r6, [pc, #1360]	; 186e8 <bfd_arch_bits_per_address@plt+0x7334>
   18194:	ldr	r3, [r3]
   18198:	ldr	r3, [r3, #4]
   1819c:	ldr	r3, [r3, #40]	; 0x28
   181a0:	blx	r3
   181a4:	cmp	r0, #1
   181a8:	movls	r3, #0
   181ac:	str	r0, [r6]
   181b0:	strls	r3, [sp, #8]
   181b4:	movls	r4, r3
   181b8:	strls	r3, [sp, #12]
   181bc:	bhi	18644 <bfd_arch_bits_per_address@plt+0x7290>
   181c0:	mov	r2, #1
   181c4:	mov	r1, r2
   181c8:	mov	r3, r5
   181cc:	add	r0, sp, #40	; 0x28
   181d0:	bl	111b0 <fread@plt>
   181d4:	cmp	r0, #1
   181d8:	bne	18140 <bfd_arch_bits_per_address@plt+0x6d8c>
   181dc:	ldrb	r3, [sp, #40]	; 0x28
   181e0:	cmp	r3, #1
   181e4:	beq	18248 <bfd_arch_bits_per_address@plt+0x6e94>
   181e8:	cmp	r3, #0
   181ec:	bne	18218 <bfd_arch_bits_per_address@plt+0x6e64>
   181f0:	ldr	r3, [r6, #4]
   181f4:	ldr	r2, [sp, #12]
   181f8:	orr	r3, r3, #1
   181fc:	add	r2, r2, #1
   18200:	mov	r1, r7
   18204:	mov	r0, r5
   18208:	str	r2, [sp, #12]
   1820c:	str	r3, [r6, #4]
   18210:	bl	19a34 <bfd_arch_bits_per_address@plt+0x8680>
   18214:	b	181c0 <bfd_arch_bits_per_address@plt+0x6e0c>
   18218:	cmp	r3, #2
   1821c:	bne	1854c <bfd_arch_bits_per_address@plt+0x7198>
   18220:	ldr	r3, [r6, #4]
   18224:	ldr	r2, [sp, #8]
   18228:	orr	r3, r3, #4
   1822c:	add	r2, r2, #1
   18230:	mov	r1, r7
   18234:	mov	r0, r5
   18238:	str	r2, [sp, #8]
   1823c:	str	r3, [r6, #4]
   18240:	bl	1247c <bfd_arch_bits_per_address@plt+0x10c8>
   18244:	b	181c0 <bfd_arch_bits_per_address@plt+0x6e0c>
   18248:	ldr	r3, [r6, #4]
   1824c:	mov	r1, r7
   18250:	orr	r3, r3, #2
   18254:	mov	r0, r5
   18258:	add	r4, r4, #1
   1825c:	str	r3, [r6, #4]
   18260:	bl	13094 <bfd_arch_bits_per_address@plt+0x1ce0>
   18264:	b	181c0 <bfd_arch_bits_per_address@plt+0x6e0c>
   18268:	add	r1, sp, #24
   1826c:	mov	r0, r5
   18270:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   18274:	cmp	r0, #0
   18278:	bne	18130 <bfd_arch_bits_per_address@plt+0x6d7c>
   1827c:	bl	17c04 <bfd_arch_bits_per_address@plt+0x6850>
   18280:	cmp	r0, #0
   18284:	beq	182e0 <bfd_arch_bits_per_address@plt+0x6f2c>
   18288:	cmp	r0, #1
   1828c:	bne	18130 <bfd_arch_bits_per_address@plt+0x6d7c>
   18290:	add	r1, sp, #32
   18294:	mov	r0, r5
   18298:	bl	17ba8 <bfd_arch_bits_per_address@plt+0x67f4>
   1829c:	cmp	r0, #0
   182a0:	bne	18130 <bfd_arch_bits_per_address@plt+0x6d7c>
   182a4:	ldr	r3, [fp]
   182a8:	ldr	r8, [sp, #32]
   182ac:	tst	r3, #64	; 0x40
   182b0:	add	r4, r4, #1
   182b4:	ldrd	r0, [sp, #20]
   182b8:	beq	182d4 <bfd_arch_bits_per_address@plt+0x6f20>
   182bc:	mov	r2, r1
   182c0:	mov	r3, r8
   182c4:	mov	r1, r0
   182c8:	mov	r0, r9
   182cc:	bl	11090 <printf@plt>
   182d0:	ldrd	r0, [sp, #20]
   182d4:	mov	r2, r8
   182d8:	bl	12f80 <bfd_arch_bits_per_address@plt+0x1bcc>
   182dc:	b	1811c <bfd_arch_bits_per_address@plt+0x6d68>
   182e0:	add	r1, sp, #32
   182e4:	mov	r0, r5
   182e8:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   182ec:	cmp	r0, #0
   182f0:	beq	182a4 <bfd_arch_bits_per_address@plt+0x6ef0>
   182f4:	ldr	r8, [pc, #1028]	; 18700 <bfd_arch_bits_per_address@plt+0x734c>
   182f8:	ldr	r3, [r8]
   182fc:	cmp	r3, #0
   18300:	bne	18140 <bfd_arch_bits_per_address@plt+0x6d8c>
   18304:	bl	18bd8 <bfd_arch_bits_per_address@plt+0x7824>
   18308:	cmp	r0, #0
   1830c:	strne	r0, [r8]
   18310:	bne	18140 <bfd_arch_bits_per_address@plt+0x6d8c>
   18314:	ldr	r1, [pc, #1008]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   18318:	mov	r3, #1
   1831c:	mov	r2, #5
   18320:	ldr	r9, [r1]
   18324:	ldr	r0, [pc, #996]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   18328:	ldr	r1, [pc, #996]	; 18714 <bfd_arch_bits_per_address@plt+0x7360>
   1832c:	str	r3, [r8]
   18330:	bl	11120 <dcgettext@plt>
   18334:	mov	r1, r0
   18338:	mov	r0, r9
   1833c:	bl	11270 <fprintf@plt>
   18340:	b	18140 <bfd_arch_bits_per_address@plt+0x6d8c>
   18344:	ldr	r1, [pc, #972]	; 18718 <bfd_arch_bits_per_address@plt+0x7364>
   18348:	mov	r0, r7
   1834c:	bl	1133c <fopen64@plt>
   18350:	subs	r5, r0, #0
   18354:	bne	17f28 <bfd_arch_bits_per_address@plt+0x6b74>
   18358:	mov	r0, r7
   1835c:	bl	1115c <perror@plt>
   18360:	mov	r0, #1
   18364:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   18368:	mov	r2, #5
   1836c:	ldr	r1, [pc, #936]	; 1871c <bfd_arch_bits_per_address@plt+0x7368>
   18370:	ldr	r0, [pc, #920]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   18374:	bl	11120 <dcgettext@plt>
   18378:	mov	r1, r7
   1837c:	ldr	r2, [r6]
   18380:	bl	11090 <printf@plt>
   18384:	ldr	r3, [sp, #12]
   18388:	mov	r2, #5
   1838c:	cmp	r3, #1
   18390:	ldr	r0, [pc, #888]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   18394:	ldreq	r1, [pc, #900]	; 18720 <bfd_arch_bits_per_address@plt+0x736c>
   18398:	ldrne	r1, [pc, #900]	; 18724 <bfd_arch_bits_per_address@plt+0x7370>
   1839c:	bl	11120 <dcgettext@plt>
   183a0:	ldr	r1, [sp, #12]
   183a4:	bl	11090 <printf@plt>
   183a8:	cmp	r4, #1
   183ac:	mov	r2, #5
   183b0:	ldreq	r1, [pc, #880]	; 18728 <bfd_arch_bits_per_address@plt+0x7374>
   183b4:	ldrne	r1, [pc, #880]	; 1872c <bfd_arch_bits_per_address@plt+0x7378>
   183b8:	ldr	r0, [pc, #848]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   183bc:	bl	11120 <dcgettext@plt>
   183c0:	mov	r1, r4
   183c4:	bl	11090 <printf@plt>
   183c8:	ldr	r3, [sp, #8]
   183cc:	mov	r2, #5
   183d0:	cmp	r3, #1
   183d4:	ldr	r0, [pc, #820]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   183d8:	ldreq	r1, [pc, #848]	; 18730 <bfd_arch_bits_per_address@plt+0x737c>
   183dc:	ldrne	r1, [pc, #848]	; 18734 <bfd_arch_bits_per_address@plt+0x7380>
   183e0:	bl	11120 <dcgettext@plt>
   183e4:	ldr	r1, [sp, #8]
   183e8:	bl	11090 <printf@plt>
   183ec:	ldr	r3, [pc, #836]	; 18738 <bfd_arch_bits_per_address@plt+0x7384>
   183f0:	mov	r2, #0
   183f4:	str	r2, [r3]
   183f8:	add	sp, sp, #76	; 0x4c
   183fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18400:	add	r0, sp, #52	; 0x34
   18404:	mov	r2, #4
   18408:	ldr	r1, [pc, #760]	; 18708 <bfd_arch_bits_per_address@plt+0x7354>
   1840c:	bl	1139c <strncmp@plt>
   18410:	cmp	r0, #0
   18414:	beq	18188 <bfd_arch_bits_per_address@plt+0x6dd4>
   18418:	ldr	r3, [pc, #748]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   1841c:	mov	r2, #5
   18420:	ldr	r1, [pc, #788]	; 1873c <bfd_arch_bits_per_address@plt+0x7388>
   18424:	ldr	r0, [pc, #740]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   18428:	ldr	r5, [r3]
   1842c:	bl	11120 <dcgettext@plt>
   18430:	ldr	r2, [pc, #776]	; 18740 <bfd_arch_bits_per_address@plt+0x738c>
   18434:	mov	r3, r7
   18438:	ldr	r2, [r2]
   1843c:	mov	r1, r0
   18440:	mov	r0, r5
   18444:	bl	11270 <fprintf@plt>
   18448:	mov	r0, r4
   1844c:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   18450:	ldrd	r2, [sp, #44]	; 0x2c
   18454:	ldr	r1, [sp, #40]	; 0x28
   18458:	ldr	r0, [pc, #740]	; 18744 <bfd_arch_bits_per_address@plt+0x7390>
   1845c:	bl	11090 <printf@plt>
   18460:	mov	r2, r8
   18464:	mov	r1, r4
   18468:	ldr	r0, [pc, #728]	; 18748 <bfd_arch_bits_per_address@plt+0x7394>
   1846c:	bl	11090 <printf@plt>
   18470:	b	1808c <bfd_arch_bits_per_address@plt+0x6cd8>
   18474:	add	r1, sp, #32
   18478:	mov	r0, r5
   1847c:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   18480:	subs	r4, r0, #0
   18484:	bne	185cc <bfd_arch_bits_per_address@plt+0x7218>
   18488:	ldr	r3, [pc, #608]	; 186f0 <bfd_arch_bits_per_address@plt+0x733c>
   1848c:	ldr	r2, [sp, #32]
   18490:	ldr	r3, [r3]
   18494:	cmp	r3, #0
   18498:	ldr	r3, [pc, #608]	; 18700 <bfd_arch_bits_per_address@plt+0x734c>
   1849c:	streq	r2, [r3]
   184a0:	beq	184b0 <bfd_arch_bits_per_address@plt+0x70fc>
   184a4:	ldr	r3, [r3]
   184a8:	cmp	r3, r2
   184ac:	bne	18634 <bfd_arch_bits_per_address@plt+0x7280>
   184b0:	bl	17c04 <bfd_arch_bits_per_address@plt+0x6850>
   184b4:	cmp	r0, #0
   184b8:	moveq	r4, #32
   184bc:	beq	1801c <bfd_arch_bits_per_address@plt+0x6c68>
   184c0:	cmp	r0, #1
   184c4:	moveq	r4, #40	; 0x28
   184c8:	b	1801c <bfd_arch_bits_per_address@plt+0x6c68>
   184cc:	ldr	r3, [pc, #632]	; 1874c <bfd_arch_bits_per_address@plt+0x7398>
   184d0:	mov	r2, #1
   184d4:	mov	r0, #16
   184d8:	str	r2, [r3]
   184dc:	bl	11180 <xmalloc@plt>
   184e0:	ldr	r1, [sp, #40]	; 0x28
   184e4:	ldr	r2, [sp, #44]	; 0x2c
   184e8:	vmov	s13, r8
   184ec:	sub	r3, r2, r1
   184f0:	lsr	r3, r3, #1
   184f4:	vcvt.f64.s32	d6, s13
   184f8:	vmov	s15, r3
   184fc:	ldr	r3, [pc, #588]	; 18750 <bfd_arch_bits_per_address@plt+0x739c>
   18500:	vcvt.f64.s32	d7, s15
   18504:	vdiv.f64	d5, d7, d6
   18508:	str	r2, [r0, #4]
   1850c:	lsl	r2, r8, #2
   18510:	mov	fp, r0
   18514:	str	r0, [r9]
   18518:	str	r8, [r0, #8]
   1851c:	str	r1, [r0]
   18520:	mov	r0, r2
   18524:	str	r2, [sp, #12]
   18528:	vstr	d5, [r3]
   1852c:	bl	11180 <xmalloc@plt>
   18530:	ldr	r3, [r9]
   18534:	ldr	r2, [sp, #12]
   18538:	mov	r1, sl
   1853c:	str	r0, [fp, #12]
   18540:	ldr	r0, [r3, #12]
   18544:	bl	11288 <memset@plt>
   18548:	b	1807c <bfd_arch_bits_per_address@plt+0x6cc8>
   1854c:	ldr	r3, [pc, #440]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   18550:	mov	r8, r0
   18554:	mov	r2, #5
   18558:	ldr	r1, [pc, #500]	; 18754 <bfd_arch_bits_per_address@plt+0x73a0>
   1855c:	ldr	r0, [pc, #428]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   18560:	ldr	r4, [r3]
   18564:	bl	11120 <dcgettext@plt>
   18568:	ldrb	r1, [sp, #40]	; 0x28
   1856c:	ldr	r2, [pc, #460]	; 18740 <bfd_arch_bits_per_address@plt+0x738c>
   18570:	mov	r3, r7
   18574:	ldr	r2, [r2]
   18578:	str	r1, [sp]
   1857c:	mov	r1, r0
   18580:	mov	r0, r4
   18584:	bl	11270 <fprintf@plt>
   18588:	mov	r0, r8
   1858c:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   18590:	ldr	r3, [pc, #372]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   18594:	mov	r2, #5
   18598:	ldr	r1, [pc, #440]	; 18758 <bfd_arch_bits_per_address@plt+0x73a4>
   1859c:	ldr	r0, [pc, #364]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   185a0:	ldr	r5, [r3]
   185a4:	bl	11120 <dcgettext@plt>
   185a8:	ldr	r2, [pc, #400]	; 18740 <bfd_arch_bits_per_address@plt+0x738c>
   185ac:	str	r8, [sp]
   185b0:	sub	r3, r4, #1
   185b4:	ldr	r2, [r2]
   185b8:	mov	r1, r0
   185bc:	mov	r0, r5
   185c0:	bl	11270 <fprintf@plt>
   185c4:	mov	r0, #1
   185c8:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   185cc:	ldr	r3, [pc, #312]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   185d0:	ldr	r1, [pc, #388]	; 1875c <bfd_arch_bits_per_address@plt+0x73a8>
   185d4:	mov	r2, #5
   185d8:	ldr	r0, [pc, #304]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   185dc:	ldr	r4, [r3]
   185e0:	bl	11120 <dcgettext@plt>
   185e4:	mov	r2, r7
   185e8:	mov	r1, r0
   185ec:	mov	r0, r4
   185f0:	bl	11270 <fprintf@plt>
   185f4:	mov	r0, #1
   185f8:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   185fc:	ldr	r3, [pc, #264]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   18600:	mov	r2, #5
   18604:	ldr	r1, [pc, #340]	; 18760 <bfd_arch_bits_per_address@plt+0x73ac>
   18608:	ldr	r0, [pc, #256]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   1860c:	ldr	r4, [r3]
   18610:	bl	11120 <dcgettext@plt>
   18614:	ldr	r2, [pc, #292]	; 18740 <bfd_arch_bits_per_address@plt+0x738c>
   18618:	ldr	r3, [r8]
   1861c:	ldr	r2, [r2]
   18620:	mov	r1, r0
   18624:	mov	r0, r4
   18628:	bl	11270 <fprintf@plt>
   1862c:	mov	r0, r6
   18630:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   18634:	ldr	r3, [pc, #208]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   18638:	mov	r2, #5
   1863c:	ldr	r1, [pc, #288]	; 18764 <bfd_arch_bits_per_address@plt+0x73b0>
   18640:	b	185d8 <bfd_arch_bits_per_address@plt+0x7224>
   18644:	ldr	r3, [pc, #192]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   18648:	mov	r2, #5
   1864c:	ldr	r1, [pc, #276]	; 18768 <bfd_arch_bits_per_address@plt+0x73b4>
   18650:	ldr	r0, [pc, #184]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   18654:	ldr	r4, [r3]
   18658:	bl	11120 <dcgettext@plt>
   1865c:	ldr	r2, [pc, #220]	; 18740 <bfd_arch_bits_per_address@plt+0x738c>
   18660:	ldr	r1, [r6]
   18664:	mov	r3, r7
   18668:	str	r1, [sp]
   1866c:	ldr	r2, [r2]
   18670:	mov	r1, r0
   18674:	mov	r0, r4
   18678:	bl	11270 <fprintf@plt>
   1867c:	mov	r0, #1
   18680:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   18684:	ldr	r3, [pc, #128]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   18688:	ldr	r1, [pc, #220]	; 1876c <bfd_arch_bits_per_address@plt+0x73b8>
   1868c:	mov	r2, #5
   18690:	ldr	r0, [pc, #120]	; 18710 <bfd_arch_bits_per_address@plt+0x735c>
   18694:	ldr	r4, [r3]
   18698:	bl	11120 <dcgettext@plt>
   1869c:	ldr	r2, [pc, #156]	; 18740 <bfd_arch_bits_per_address@plt+0x738c>
   186a0:	mov	r3, r7
   186a4:	ldr	r2, [r2]
   186a8:	mov	r1, r0
   186ac:	mov	r0, r4
   186b0:	bl	11270 <fprintf@plt>
   186b4:	mov	r0, #1
   186b8:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   186bc:	ldr	r3, [pc, #72]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   186c0:	mov	r2, #5
   186c4:	ldr	r1, [pc, #164]	; 18770 <bfd_arch_bits_per_address@plt+0x73bc>
   186c8:	b	185d8 <bfd_arch_bits_per_address@plt+0x7224>
   186cc:	ldr	r3, [pc, #56]	; 1870c <bfd_arch_bits_per_address@plt+0x7358>
   186d0:	mov	r2, #5
   186d4:	ldr	r1, [pc, #96]	; 1873c <bfd_arch_bits_per_address@plt+0x7388>
   186d8:	b	18690 <bfd_arch_bits_per_address@plt+0x72dc>
   186dc:			; <UNDEFINED> instruction: 0x0001f4b8
   186e0:	andeq	r4, r3, r0, asr #9
   186e4:	andeq	r5, r3, r0, lsr r1
   186e8:	andeq	r5, r3, ip, lsl #2
   186ec:	andeq	r1, r5, r9, ror r8
   186f0:	andeq	r5, r3, r0, asr #8
   186f4:	andeq	r5, r3, r0, lsr #2
   186f8:	andeq	r5, r3, r0, lsr #8
   186fc:	muleq	r1, r4, r6
   18700:	andeq	r5, r3, r0, asr #2
   18704:	andeq	r5, r3, r8, lsl r1
   18708:	andeq	pc, r1, r4, ror #9
   1870c:			; <UNDEFINED> instruction: 0x000344b8
   18710:	andeq	lr, r1, r0, asr #13
   18714:	andeq	pc, r1, ip, asr #13
   18718:	andeq	pc, r1, r8, ror #2
   1871c:	andeq	pc, r1, ip, lsl r7	; <UNPREDICTABLE>
   18720:	andeq	pc, r1, r0, asr #14
   18724:	andeq	pc, r1, r8, asr r7	; <UNPREDICTABLE>
   18728:	andeq	pc, r1, r0, ror r7	; <UNPREDICTABLE>
   1872c:	andeq	pc, r1, r8, lsl #15
   18730:	andeq	pc, r1, r0, lsr #15
   18734:	andeq	pc, r1, r0, asr #15
   18738:	andeq	r4, r3, r8, ror r4
   1873c:	andeq	pc, r1, ip, ror #9
   18740:	andeq	r5, r3, ip, lsr r4
   18744:	andeq	pc, r1, r8, asr #11
   18748:	strdeq	pc, [r1], -ip
   1874c:	andeq	r5, r3, r4, asr #8
   18750:	andeq	r5, r3, r8, asr #8
   18754:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   18758:	andeq	pc, r1, r4, ror #12
   1875c:			; <UNDEFINED> instruction: 0x0001f4bc
   18760:	andeq	pc, r1, ip, ror #13
   18764:	andeq	pc, r1, r8, ror #10
   18768:	andeq	pc, r1, r0, lsl r5	; <UNPREDICTABLE>
   1876c:	andeq	pc, r1, ip, lsr #12
   18770:	andeq	pc, r1, r0, lsr #11
   18774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18778:	sub	sp, sp, #52	; 0x34
   1877c:	ldr	r1, [pc, #920]	; 18b1c <bfd_arch_bits_per_address@plt+0x7768>
   18780:	str	r0, [sp, #4]
   18784:	bl	1133c <fopen64@plt>
   18788:	subs	r5, r0, #0
   1878c:	beq	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18790:	ldr	r7, [pc, #904]	; 18b20 <bfd_arch_bits_per_address@plt+0x776c>
   18794:	ldr	r3, [r7]
   18798:	cmp	r3, #1
   1879c:	bls	18a28 <bfd_arch_bits_per_address@plt+0x7674>
   187a0:	sub	r2, r3, #2
   187a4:	cmp	r2, #1
   187a8:	bhi	18ae4 <bfd_arch_bits_per_address@plt+0x7730>
   187ac:	mov	r6, #0
   187b0:	cmp	r3, #3
   187b4:	str	r6, [sp, #20]
   187b8:	str	r6, [sp, #16]
   187bc:	str	r6, [sp, #24]
   187c0:	beq	187d8 <bfd_arch_bits_per_address@plt+0x7424>
   187c4:	bl	18bd8 <bfd_arch_bits_per_address@plt+0x7824>
   187c8:	ldr	r3, [pc, #852]	; 18b24 <bfd_arch_bits_per_address@plt+0x7770>
   187cc:	ldr	r3, [r3]
   187d0:	cmp	r0, r3
   187d4:	beq	18a98 <bfd_arch_bits_per_address@plt+0x76e4>
   187d8:	bl	17c04 <bfd_arch_bits_per_address@plt+0x6850>
   187dc:	cmp	r0, #0
   187e0:	beq	18a1c <bfd_arch_bits_per_address@plt+0x7668>
   187e4:	cmp	r0, #1
   187e8:	moveq	r8, #40	; 0x28
   187ec:	movne	r8, #0
   187f0:	mov	r4, #12
   187f4:	ldr	r6, [pc, #812]	; 18b28 <bfd_arch_bits_per_address@plt+0x7774>
   187f8:	mov	r0, r5
   187fc:	ldr	r3, [r6]
   18800:	ldr	r1, [r3]
   18804:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   18808:	cmp	r0, #0
   1880c:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18810:	ldr	r3, [r6]
   18814:	mov	r0, r5
   18818:	ldr	r1, [r3, #4]
   1881c:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   18820:	cmp	r0, #0
   18824:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18828:	ldr	r3, [r6]
   1882c:	mov	r0, r5
   18830:	ldr	r1, [r3, #8]
   18834:	add	r1, r8, r1, lsl #1
   18838:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   1883c:	cmp	r0, #0
   18840:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18844:	ldr	r3, [r7]
   18848:	cmp	r3, #3
   1884c:	beq	18864 <bfd_arch_bits_per_address@plt+0x74b0>
   18850:	bl	18bd8 <bfd_arch_bits_per_address@plt+0x7824>
   18854:	ldr	r3, [pc, #712]	; 18b24 <bfd_arch_bits_per_address@plt+0x7770>
   18858:	ldr	r3, [r3]
   1885c:	cmp	r0, r3
   18860:	beq	18890 <bfd_arch_bits_per_address@plt+0x74dc>
   18864:	ldr	r1, [pc, #704]	; 18b2c <bfd_arch_bits_per_address@plt+0x7778>
   18868:	mov	r0, r5
   1886c:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   18870:	cmp	r0, #0
   18874:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18878:	ldr	r3, [pc, #676]	; 18b24 <bfd_arch_bits_per_address@plt+0x7770>
   1887c:	mov	r0, r5
   18880:	ldr	r1, [r3]
   18884:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   18888:	cmp	r0, #0
   1888c:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18890:	cmp	r4, #0
   18894:	bne	189fc <bfd_arch_bits_per_address@plt+0x7648>
   18898:	ldr	r3, [r6]
   1889c:	ldr	r2, [r3, #8]
   188a0:	cmp	r2, #0
   188a4:	movne	r4, #0
   188a8:	ldrne	r7, [pc, #640]	; 18b30 <bfd_arch_bits_per_address@plt+0x777c>
   188ac:	beq	188fc <bfd_arch_bits_per_address@plt+0x7548>
   188b0:	ldr	r0, [r7]
   188b4:	ldr	r2, [r3, #12]
   188b8:	add	r1, sp, #12
   188bc:	ldr	r3, [r0, #4]
   188c0:	ldr	r0, [r2, r4, lsl #2]
   188c4:	ldr	r3, [r3, #60]	; 0x3c
   188c8:	blx	r3
   188cc:	mov	r3, r5
   188d0:	mov	r2, #1
   188d4:	mov	r1, #2
   188d8:	add	r0, sp, #12
   188dc:	bl	11174 <fwrite@plt>
   188e0:	cmp	r0, #1
   188e4:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   188e8:	ldr	r3, [r6]
   188ec:	add	r4, r4, #1
   188f0:	ldr	r2, [r3, #8]
   188f4:	cmp	r2, r4
   188f8:	bhi	188b0 <bfd_arch_bits_per_address@plt+0x74fc>
   188fc:	ldr	fp, [pc, #560]	; 18b34 <bfd_arch_bits_per_address@plt+0x7780>
   18900:	ldr	sl, [fp, #4]
   18904:	ldr	r3, [fp, #8]
   18908:	cmp	sl, r3
   1890c:	bcs	189bc <bfd_arch_bits_per_address@plt+0x7608>
   18910:	ldr	r8, [pc, #544]	; 18b38 <bfd_arch_bits_per_address@plt+0x7784>
   18914:	ldr	r9, [pc, #544]	; 18b3c <bfd_arch_bits_per_address@plt+0x7788>
   18918:	ldr	r4, [sl, #208]	; 0xd0
   1891c:	cmp	r4, #0
   18920:	beq	189ac <bfd_arch_bits_per_address@plt+0x75f8>
   18924:	ldrd	r2, [r4]
   18928:	mov	r0, r5
   1892c:	ldr	r7, [r4, #8]
   18930:	ldr	r1, [r2]
   18934:	ldr	r6, [r3]
   18938:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   1893c:	cmp	r0, #0
   18940:	beq	18954 <bfd_arch_bits_per_address@plt+0x75a0>
   18944:	ldr	r0, [sp, #4]
   18948:	bl	1115c <perror@plt>
   1894c:	mov	r0, #1
   18950:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   18954:	mov	r1, r6
   18958:	mov	r0, r5
   1895c:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   18960:	subs	r6, r0, #0
   18964:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18968:	bl	17c04 <bfd_arch_bits_per_address@plt+0x6850>
   1896c:	cmp	r0, #0
   18970:	beq	189e4 <bfd_arch_bits_per_address@plt+0x7630>
   18974:	cmp	r0, #1
   18978:	bne	18994 <bfd_arch_bits_per_address@plt+0x75e0>
   1897c:	mov	r2, r7
   18980:	mov	r3, r6
   18984:	mov	r0, r5
   18988:	bl	17c9c <bfd_arch_bits_per_address@plt+0x68e8>
   1898c:	cmp	r0, #0
   18990:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18994:	ldr	r3, [r8]
   18998:	tst	r3, #64	; 0x40
   1899c:	bne	189cc <bfd_arch_bits_per_address@plt+0x7618>
   189a0:	ldr	r4, [r4, #36]	; 0x24
   189a4:	cmp	r4, #0
   189a8:	bne	18924 <bfd_arch_bits_per_address@plt+0x7570>
   189ac:	ldr	r3, [fp, #8]
   189b0:	add	sl, sl, #216	; 0xd8
   189b4:	cmp	r3, sl
   189b8:	bhi	18918 <bfd_arch_bits_per_address@plt+0x7564>
   189bc:	mov	r0, r5
   189c0:	bl	112d0 <fclose@plt>
   189c4:	add	sp, sp, #52	; 0x34
   189c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189cc:	ldm	r4, {r1, r2, r3}
   189d0:	mov	r0, r9
   189d4:	ldr	r2, [r2]
   189d8:	ldr	r1, [r1]
   189dc:	bl	11090 <printf@plt>
   189e0:	b	189a0 <bfd_arch_bits_per_address@plt+0x75ec>
   189e4:	mov	r1, r7
   189e8:	mov	r0, r5
   189ec:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   189f0:	cmp	r0, #0
   189f4:	beq	18994 <bfd_arch_bits_per_address@plt+0x75e0>
   189f8:	b	18944 <bfd_arch_bits_per_address@plt+0x7590>
   189fc:	add	r0, sp, #16
   18a00:	mov	r3, r5
   18a04:	mov	r2, r4
   18a08:	mov	r1, #1
   18a0c:	bl	11174 <fwrite@plt>
   18a10:	cmp	r0, r4
   18a14:	beq	18898 <bfd_arch_bits_per_address@plt+0x74e4>
   18a18:	b	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18a1c:	mov	r4, #12
   18a20:	mov	r8, #32
   18a24:	b	187f4 <bfd_arch_bits_per_address@plt+0x7440>
   18a28:	ldr	r3, [pc, #256]	; 18b30 <bfd_arch_bits_per_address@plt+0x777c>
   18a2c:	ldr	r2, [pc, #268]	; 18b40 <bfd_arch_bits_per_address@plt+0x778c>
   18a30:	add	r1, sp, #32
   18a34:	ldr	r3, [r3]
   18a38:	str	r2, [sp, #28]
   18a3c:	mov	r0, #1
   18a40:	ldr	r3, [r3, #4]
   18a44:	ldr	r3, [r3, #48]	; 0x30
   18a48:	blx	r3
   18a4c:	mov	r3, r5
   18a50:	add	r0, sp, #28
   18a54:	mov	r2, #1
   18a58:	mov	r1, #20
   18a5c:	bl	11174 <fwrite@plt>
   18a60:	cmp	r0, #1
   18a64:	bne	18944 <bfd_arch_bits_per_address@plt+0x7590>
   18a68:	ldr	r4, [pc, #212]	; 18b44 <bfd_arch_bits_per_address@plt+0x7790>
   18a6c:	ldr	r3, [r4, #4]
   18a70:	tst	r3, #1
   18a74:	bne	18ad0 <bfd_arch_bits_per_address@plt+0x771c>
   18a78:	tst	r3, #2
   18a7c:	bne	18abc <bfd_arch_bits_per_address@plt+0x7708>
   18a80:	tst	r3, #4
   18a84:	beq	189c4 <bfd_arch_bits_per_address@plt+0x7610>
   18a88:	ldr	r1, [sp, #4]
   18a8c:	mov	r0, r5
   18a90:	bl	12734 <bfd_arch_bits_per_address@plt+0x1380>
   18a94:	b	189c4 <bfd_arch_bits_per_address@plt+0x7610>
   18a98:	bl	17c04 <bfd_arch_bits_per_address@plt+0x6850>
   18a9c:	subs	r4, r0, #0
   18aa0:	moveq	r8, #12
   18aa4:	beq	187f4 <bfd_arch_bits_per_address@plt+0x7440>
   18aa8:	cmp	r4, #1
   18aac:	movne	r8, r6
   18ab0:	mov	r4, r6
   18ab4:	moveq	r8, #20
   18ab8:	b	187f4 <bfd_arch_bits_per_address@plt+0x7440>
   18abc:	ldr	r1, [sp, #4]
   18ac0:	mov	r0, r5
   18ac4:	bl	13178 <bfd_arch_bits_per_address@plt+0x1dc4>
   18ac8:	ldr	r3, [r4, #4]
   18acc:	b	18a80 <bfd_arch_bits_per_address@plt+0x76cc>
   18ad0:	ldr	r1, [sp, #4]
   18ad4:	mov	r0, r5
   18ad8:	bl	18c9c <bfd_arch_bits_per_address@plt+0x78e8>
   18adc:	ldr	r3, [r4, #4]
   18ae0:	b	18a78 <bfd_arch_bits_per_address@plt+0x76c4>
   18ae4:	ldr	r3, [pc, #92]	; 18b48 <bfd_arch_bits_per_address@plt+0x7794>
   18ae8:	mov	r2, #5
   18aec:	ldr	r1, [pc, #88]	; 18b4c <bfd_arch_bits_per_address@plt+0x7798>
   18af0:	ldr	r0, [pc, #88]	; 18b50 <bfd_arch_bits_per_address@plt+0x779c>
   18af4:	ldr	r4, [r3]
   18af8:	bl	11120 <dcgettext@plt>
   18afc:	ldr	r2, [pc, #80]	; 18b54 <bfd_arch_bits_per_address@plt+0x77a0>
   18b00:	ldr	r3, [r7]
   18b04:	ldr	r2, [r2]
   18b08:	mov	r1, r0
   18b0c:	mov	r0, r4
   18b10:	bl	11270 <fprintf@plt>
   18b14:	mov	r0, #1
   18b18:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   18b1c:	andeq	pc, r1, r0, ror #15
   18b20:	andeq	r5, r3, r0, lsr r1
   18b24:	andeq	r5, r3, r0, asr #2
   18b28:	andeq	r5, r3, r0, asr #8
   18b2c:	andeq	r1, r5, r9, ror r8
   18b30:	andeq	r5, r3, r0, lsr #8
   18b34:	andeq	r5, r3, r0, asr r4
   18b38:	andeq	r5, r3, r0, lsr #2
   18b3c:	andeq	pc, r1, r4, ror #15
   18b40:	cdpvs	13, 6, cr6, cr15, cr7, {3}
   18b44:	andeq	r5, r3, ip, lsl #2
   18b48:			; <UNDEFINED> instruction: 0x000344b8
   18b4c:	andeq	pc, r1, ip, ror #13
   18b50:	andeq	lr, r1, r0, asr #13
   18b54:	andeq	r5, r3, ip, lsr r4
   18b58:	push	{r4, lr}
   18b5c:	mov	r5, r0
   18b60:	mov	r4, r1
   18b64:	mov	r2, #5
   18b68:	ldr	r1, [pc, #76]	; 18bbc <bfd_arch_bits_per_address@plt+0x7808>
   18b6c:	ldr	r0, [pc, #76]	; 18bc0 <bfd_arch_bits_per_address@plt+0x780c>
   18b70:	bl	11120 <dcgettext@plt>
   18b74:	ldr	r3, [pc, #72]	; 18bc4 <bfd_arch_bits_per_address@plt+0x7810>
   18b78:	ldr	r2, [r3]
   18b7c:	mov	r1, r0
   18b80:	mov	r0, r5
   18b84:	bl	11270 <fprintf@plt>
   18b88:	cmp	r4, #0
   18b8c:	beq	18b98 <bfd_arch_bits_per_address@plt+0x77e4>
   18b90:	mov	r0, r4
   18b94:	bl	11228 <exit@plt>
   18b98:	mov	r2, #5
   18b9c:	ldr	r1, [pc, #36]	; 18bc8 <bfd_arch_bits_per_address@plt+0x7814>
   18ba0:	ldr	r0, [pc, #24]	; 18bc0 <bfd_arch_bits_per_address@plt+0x780c>
   18ba4:	bl	11120 <dcgettext@plt>
   18ba8:	ldr	r2, [pc, #28]	; 18bcc <bfd_arch_bits_per_address@plt+0x7818>
   18bac:	mov	r1, r0
   18bb0:	mov	r0, r5
   18bb4:	bl	11270 <fprintf@plt>
   18bb8:	b	18b90 <bfd_arch_bits_per_address@plt+0x77dc>
   18bbc:	andeq	pc, r1, r4, lsl r8	; <UNPREDICTABLE>
   18bc0:	andeq	lr, r1, r0, asr #13
   18bc4:	andeq	r5, r3, ip, lsr r4
   18bc8:	andeq	pc, r1, r4, lsl fp	; <UNPREDICTABLE>
   18bcc:	andeq	pc, r1, r8, lsr #22
   18bd0:	push	{r4, lr}
   18bd4:	bl	11228 <exit@plt>
   18bd8:	push	{r4, lr}
   18bdc:	mov	r4, #0
   18be0:	sub	sp, sp, #16
   18be4:	mov	r3, #1
   18be8:	mov	r2, r4
   18bec:	mov	r1, sp
   18bf0:	mov	r0, r4
   18bf4:	str	r3, [sp, #4]
   18bf8:	str	r4, [sp]
   18bfc:	str	r4, [sp, #8]
   18c00:	str	r4, [sp, #12]
   18c04:	bl	1106c <setitimer@plt>
   18c08:	mov	r1, r4
   18c0c:	mov	r2, sp
   18c10:	mov	r0, r4
   18c14:	bl	1106c <setitimer@plt>
   18c18:	ldr	r1, [sp, #4]
   18c1c:	cmp	r1, #1
   18c20:	ble	18c34 <bfd_arch_bits_per_address@plt+0x7880>
   18c24:	ldr	r0, [pc, #24]	; 18c44 <bfd_arch_bits_per_address@plt+0x7890>
   18c28:	bl	1e00c <bfd_arch_bits_per_address@plt+0xcc58>
   18c2c:	add	sp, sp, #16
   18c30:	pop	{r4, pc}
   18c34:	mov	r0, #2
   18c38:	bl	11138 <sysconf@plt>
   18c3c:	add	sp, sp, #16
   18c40:	pop	{r4, pc}
   18c44:	andeq	r4, pc, r0, asr #4
   18c48:	ldr	r3, [r0]
   18c4c:	ldr	r2, [r1]
   18c50:	vldr	d6, [r3, #120]	; 0x78
   18c54:	vldr	d7, [r2, #120]	; 0x78
   18c58:	vsub.f64	d7, d7, d6
   18c5c:	vcmpe.f64	d7, #0.0
   18c60:	vmrs	APSR_nzcv, fpscr
   18c64:	bgt	18c8c <bfd_arch_bits_per_address@plt+0x78d8>
   18c68:	bmi	18c94 <bfd_arch_bits_per_address@plt+0x78e0>
   18c6c:	ldr	r0, [r2, #24]
   18c70:	ldr	r1, [r3, #24]
   18c74:	cmp	r0, r1
   18c78:	bhi	18c8c <bfd_arch_bits_per_address@plt+0x78d8>
   18c7c:	bcc	18c94 <bfd_arch_bits_per_address@plt+0x78e0>
   18c80:	ldr	r1, [r2, #8]
   18c84:	ldr	r0, [r3, #8]
   18c88:	b	11078 <strcmp@plt>
   18c8c:	mov	r0, #1
   18c90:	bx	lr
   18c94:	mvn	r0, #0
   18c98:	bx	lr
   18c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ca0:	sub	sp, sp, #20
   18ca4:	ldr	sl, [pc, #316]	; 18de8 <bfd_arch_bits_per_address@plt+0x7a34>
   18ca8:	ldr	r3, [sl]
   18cac:	cmp	r3, #0
   18cb0:	beq	18dd0 <bfd_arch_bits_per_address@plt+0x7a1c>
   18cb4:	ldr	r9, [pc, #304]	; 18dec <bfd_arch_bits_per_address@plt+0x7a38>
   18cb8:	ldr	fp, [pc, #304]	; 18df0 <bfd_arch_bits_per_address@plt+0x7a3c>
   18cbc:	ldr	r7, [pc, #304]	; 18df4 <bfd_arch_bits_per_address@plt+0x7a40>
   18cc0:	mov	r6, r0
   18cc4:	mov	r8, #0
   18cc8:	str	r1, [sp, #4]
   18ccc:	mov	r1, #0
   18cd0:	mov	r0, r6
   18cd4:	ldr	r4, [fp]
   18cd8:	bl	17eac <bfd_arch_bits_per_address@plt+0x6af8>
   18cdc:	add	r5, r4, r8, lsl #4
   18ce0:	cmp	r0, #0
   18ce4:	bne	18dd8 <bfd_arch_bits_per_address@plt+0x7a24>
   18ce8:	ldr	r1, [r4, r8, lsl #4]
   18cec:	mov	r0, r6
   18cf0:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   18cf4:	cmp	r0, #0
   18cf8:	bne	18dd8 <bfd_arch_bits_per_address@plt+0x7a24>
   18cfc:	ldr	r1, [r5, #4]
   18d00:	mov	r0, r6
   18d04:	bl	17e50 <bfd_arch_bits_per_address@plt+0x6a9c>
   18d08:	cmp	r0, #0
   18d0c:	bne	18dd8 <bfd_arch_bits_per_address@plt+0x7a24>
   18d10:	ldr	r1, [r5, #8]
   18d14:	mov	r0, r6
   18d18:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   18d1c:	cmp	r0, #0
   18d20:	bne	18dd8 <bfd_arch_bits_per_address@plt+0x7a24>
   18d24:	ldr	r3, [pc, #204]	; 18df8 <bfd_arch_bits_per_address@plt+0x7a44>
   18d28:	mov	r0, r6
   18d2c:	ldr	r1, [r3]
   18d30:	bl	17dfc <bfd_arch_bits_per_address@plt+0x6a48>
   18d34:	cmp	r0, #0
   18d38:	bne	18dd8 <bfd_arch_bits_per_address@plt+0x7a24>
   18d3c:	mov	r2, #15
   18d40:	mov	r1, r9
   18d44:	mov	r0, r6
   18d48:	bl	17edc <bfd_arch_bits_per_address@plt+0x6b28>
   18d4c:	cmp	r0, #0
   18d50:	bne	18dd8 <bfd_arch_bits_per_address@plt+0x7a24>
   18d54:	mov	r2, #1
   18d58:	ldr	r1, [pc, #156]	; 18dfc <bfd_arch_bits_per_address@plt+0x7a48>
   18d5c:	mov	r0, r6
   18d60:	bl	17edc <bfd_arch_bits_per_address@plt+0x6b28>
   18d64:	subs	r4, r0, #0
   18d68:	bne	18dd8 <bfd_arch_bits_per_address@plt+0x7a24>
   18d6c:	ldr	r3, [r5, #8]
   18d70:	cmp	r3, #0
   18d74:	beq	18dc0 <bfd_arch_bits_per_address@plt+0x7a0c>
   18d78:	ldr	r3, [r7]
   18d7c:	ldr	r2, [r5, #12]
   18d80:	add	r1, sp, #12
   18d84:	ldr	r3, [r3, #4]
   18d88:	ldr	r0, [r2, r4, lsl #2]
   18d8c:	ldr	r3, [r3, #60]	; 0x3c
   18d90:	blx	r3
   18d94:	mov	r3, r6
   18d98:	mov	r2, #1
   18d9c:	mov	r1, #2
   18da0:	add	r0, sp, #12
   18da4:	bl	11174 <fwrite@plt>
   18da8:	cmp	r0, #1
   18dac:	bne	18dd8 <bfd_arch_bits_per_address@plt+0x7a24>
   18db0:	ldr	r3, [r5, #8]
   18db4:	add	r4, r4, #1
   18db8:	cmp	r3, r4
   18dbc:	bhi	18d78 <bfd_arch_bits_per_address@plt+0x79c4>
   18dc0:	ldr	r3, [sl]
   18dc4:	add	r8, r8, #1
   18dc8:	cmp	r3, r8
   18dcc:	bhi	18ccc <bfd_arch_bits_per_address@plt+0x7918>
   18dd0:	add	sp, sp, #20
   18dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd8:	ldr	r0, [sp, #4]
   18ddc:	bl	1115c <perror@plt>
   18de0:	mov	r0, #1
   18de4:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   18de8:	andeq	r5, r3, r4, asr #8
   18dec:	andeq	r4, r3, ip, ror r4
   18df0:	andeq	r5, r3, r0, asr #8
   18df4:	andeq	r5, r3, r0, lsr #8
   18df8:	andeq	r5, r3, r0, asr #2
   18dfc:	andeq	r4, r3, ip, lsl #9
   18e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e04:	vpush	{d8-d11}
   18e08:	ldr	r8, [pc, #964]	; 191d4 <bfd_arch_bits_per_address@plt+0x7e20>
   18e0c:	ldr	r2, [pc, #964]	; 191d8 <bfd_arch_bits_per_address@plt+0x7e24>
   18e10:	ldr	r4, [r8, #4]
   18e14:	ldr	r3, [r8, #8]
   18e18:	sub	sp, sp, #44	; 0x2c
   18e1c:	cmp	r4, r3
   18e20:	ldr	ip, [r2]
   18e24:	bcs	18e90 <bfd_arch_bits_per_address@plt+0x7adc>
   18e28:	ldr	r5, [pc, #940]	; 191dc <bfd_arch_bits_per_address@plt+0x7e28>
   18e2c:	ldr	r7, [pc, #940]	; 191e0 <bfd_arch_bits_per_address@plt+0x7e2c>
   18e30:	ldr	r6, [pc, #940]	; 191e4 <bfd_arch_bits_per_address@plt+0x7e30>
   18e34:	ldr	r9, [pc, #940]	; 191e8 <bfd_arch_bits_per_address@plt+0x7e34>
   18e38:	ldr	fp, [pc, #940]	; 191ec <bfd_arch_bits_per_address@plt+0x7e38>
   18e3c:	cmp	ip, #0
   18e40:	ldr	r1, [r4]
   18e44:	beq	18e78 <bfd_arch_bits_per_address@plt+0x7ac4>
   18e48:	ldr	r2, [r5]
   18e4c:	mov	r3, #0
   18e50:	add	sl, r2, #4
   18e54:	ldr	r0, [r2, r3, lsl #4]
   18e58:	cmp	r1, r0
   18e5c:	bcc	18e6c <bfd_arch_bits_per_address@plt+0x7ab8>
   18e60:	ldr	lr, [sl, r3, lsl #4]
   18e64:	cmp	r1, lr
   18e68:	bcc	1913c <bfd_arch_bits_per_address@plt+0x7d88>
   18e6c:	add	r3, r3, #1
   18e70:	cmp	r3, ip
   18e74:	bne	18e54 <bfd_arch_bits_per_address@plt+0x7aa0>
   18e78:	lsr	r1, r1, #1
   18e7c:	str	r1, [r4, #128]	; 0x80
   18e80:	ldr	r3, [r8, #8]
   18e84:	add	r4, r4, #216	; 0xd8
   18e88:	cmp	r4, r3
   18e8c:	bcc	18e3c <bfd_arch_bits_per_address@plt+0x7a88>
   18e90:	cmp	ip, #0
   18e94:	beq	190b4 <bfd_arch_bits_per_address@plt+0x7d00>
   18e98:	ldr	r9, [pc, #832]	; 191e0 <bfd_arch_bits_per_address@plt+0x7e2c>
   18e9c:	ldr	r5, [pc, #844]	; 191f0 <bfd_arch_bits_per_address@plt+0x7e3c>
   18ea0:	mov	r3, #0
   18ea4:	str	r3, [sp, #28]
   18ea8:	ldr	r2, [pc, #824]	; 191e8 <bfd_arch_bits_per_address@plt+0x7e34>
   18eac:	ldr	r3, [pc, #808]	; 191dc <bfd_arch_bits_per_address@plt+0x7e28>
   18eb0:	ldr	fp, [r2]
   18eb4:	ldr	r2, [sp, #28]
   18eb8:	ldr	r3, [r3]
   18ebc:	add	r6, r3, r2, lsl #4
   18ec0:	ldr	r3, [r3, r2, lsl #4]
   18ec4:	ldr	r0, [r6, #8]
   18ec8:	lsr	r3, r3, #1
   18ecc:	cmp	r0, #0
   18ed0:	str	r3, [sp, #36]	; 0x24
   18ed4:	beq	191cc <bfd_arch_bits_per_address@plt+0x7e18>
   18ed8:	mov	r3, #1
   18edc:	and	fp, fp, #64	; 0x40
   18ee0:	str	r3, [sp, #24]
   18ee4:	mov	r2, #0
   18ee8:	str	r6, [sp, #20]
   18eec:	b	18efc <bfd_arch_bits_per_address@plt+0x7b48>
   18ef0:	vmov	r2, s20
   18ef4:	cmp	r0, r2
   18ef8:	bls	19090 <bfd_arch_bits_per_address@plt+0x7cdc>
   18efc:	ldr	r3, [sp, #20]
   18f00:	add	ip, r2, #1
   18f04:	mov	r1, fp
   18f08:	ldr	r3, [r3, #12]
   18f0c:	vmov	s20, ip
   18f10:	ldr	r3, [r3, r2, lsl #2]
   18f14:	cmp	r3, #0
   18f18:	beq	18ef0 <bfd_arch_bits_per_address@plt+0x7b3c>
   18f1c:	vmov	s15, r2
   18f20:	vldr	d5, [r9]
   18f24:	ldr	r2, [sp, #36]	; 0x24
   18f28:	cmp	fp, #0
   18f2c:	vcvt.f64.u32	d6, s15
   18f30:	vmov	s15, r3
   18f34:	vcvt.f64.u32	d9, s15
   18f38:	vcvt.f64.u32	d7, s20
   18f3c:	vmul.f64	d6, d6, d5
   18f40:	vmul.f64	d7, d7, d5
   18f44:	vcvt.u32.f64	s13, d6
   18f48:	vcvt.u32.f64	s14, d7
   18f4c:	vmov	r4, s13
   18f50:	add	r4, r4, r2
   18f54:	vmov	r1, s14
   18f58:	add	r2, r1, r2
   18f5c:	str	r2, [sp, #16]
   18f60:	bne	19104 <bfd_arch_bits_per_address@plt+0x7d50>
   18f64:	vldr	d7, [r5]
   18f68:	ldr	r3, [sp, #24]
   18f6c:	ldr	r0, [r8]
   18f70:	sub	r6, r3, #1
   18f74:	vadd.f64	d7, d7, d9
   18f78:	mov	r3, fp
   18f7c:	vstr	d7, [r5]
   18f80:	b	18fc0 <bfd_arch_bits_per_address@plt+0x7c0c>
   18f84:	mov	r1, sl
   18f88:	ldr	r0, [pc, #612]	; 191f4 <bfd_arch_bits_per_address@plt+0x7e40>
   18f8c:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   18f90:	cmp	r0, #0
   18f94:	beq	190d4 <bfd_arch_bits_per_address@plt+0x7d20>
   18f98:	ldr	r2, [r8, #4]
   18f9c:	ldr	r3, [pc, #580]	; 191e8 <bfd_arch_bits_per_address@plt+0x7e34>
   18fa0:	add	fp, r2, fp
   18fa4:	ldr	r0, [r8]
   18fa8:	vldr	d7, [fp, #120]	; 0x78
   18fac:	ldr	r3, [r3]
   18fb0:	and	r3, r3, #64	; 0x40
   18fb4:	vadd.f64	d11, d7, d11
   18fb8:	vstr	d11, [fp, #120]	; 0x78
   18fbc:	str	r6, [sp, #24]
   18fc0:	cmp	r6, r0
   18fc4:	str	r3, [sp, #32]
   18fc8:	bcs	190c0 <bfd_arch_bits_per_address@plt+0x7d0c>
   18fcc:	add	r7, r6, r6, lsl #1
   18fd0:	ldr	sl, [r8, #4]
   18fd4:	add	r7, r7, r7, lsl #3
   18fd8:	ldr	r1, [sp, #16]
   18fdc:	lsl	fp, r7, #3
   18fe0:	add	lr, sl, fp
   18fe4:	add	r6, r6, #1
   18fe8:	ldr	ip, [lr, #128]	; 0x80
   18fec:	ldr	r2, [lr, #344]	; 0x158
   18ff0:	cmp	r1, ip
   18ff4:	bcc	19074 <bfd_arch_bits_per_address@plt+0x7cc0>
   18ff8:	cmp	r4, r2
   18ffc:	bcs	18fbc <bfd_arch_bits_per_address@plt+0x7c08>
   19000:	cmp	r4, ip
   19004:	movcc	r1, ip
   19008:	ldr	ip, [sp, #16]
   1900c:	movcs	r1, r4
   19010:	cmp	ip, r2
   19014:	rsbls	r1, r1, ip
   19018:	rsbhi	r1, r1, r2
   1901c:	cmp	r1, #0
   19020:	beq	18fbc <bfd_arch_bits_per_address@plt+0x7c08>
   19024:	vmov	s13, r1
   19028:	vldr	d7, [r9]
   1902c:	cmp	r3, #0
   19030:	ldr	sl, [sl, r7, lsl #3]
   19034:	vcvt.f64.u32	d8, s13
   19038:	vmul.f64	d8, d8, d9
   1903c:	vdiv.f64	d11, d8, d7
   19040:	beq	18f84 <bfd_arch_bits_per_address@plt+0x7bd0>
   19044:	ldr	r3, [lr, #8]
   19048:	lsl	r2, r2, #1
   1904c:	str	r1, [sp, #8]
   19050:	vstr	d11, [sp]
   19054:	mov	r1, sl
   19058:	ldr	r0, [pc, #408]	; 191f8 <bfd_arch_bits_per_address@plt+0x7e44>
   1905c:	bl	11090 <printf@plt>
   19060:	vldr	d7, [r9]
   19064:	ldr	r3, [r8, #4]
   19068:	ldr	sl, [r3, r7, lsl #3]
   1906c:	vdiv.f64	d11, d8, d7
   19070:	b	18f84 <bfd_arch_bits_per_address@plt+0x7bd0>
   19074:	mov	fp, r3
   19078:	ldr	r3, [sp, #20]
   1907c:	vmov	r2, s20
   19080:	ldr	r1, [sp, #32]
   19084:	ldr	r0, [r3, #8]
   19088:	cmp	r0, r2
   1908c:	bhi	18efc <bfd_arch_bits_per_address@plt+0x7b48>
   19090:	cmp	r1, #0
   19094:	bne	1919c <bfd_arch_bits_per_address@plt+0x7de8>
   19098:	ldr	r3, [pc, #312]	; 191d8 <bfd_arch_bits_per_address@plt+0x7e24>
   1909c:	ldr	r2, [sp, #28]
   190a0:	ldr	r3, [r3]
   190a4:	add	r2, r2, #1
   190a8:	cmp	r3, r2
   190ac:	str	r2, [sp, #28]
   190b0:	bhi	18ea8 <bfd_arch_bits_per_address@plt+0x7af4>
   190b4:	add	sp, sp, #44	; 0x2c
   190b8:	vpop	{d8-d11}
   190bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190c0:	mov	r1, r3
   190c4:	mov	fp, r3
   190c8:	ldr	r3, [sp, #20]
   190cc:	ldr	r0, [r3, #8]
   190d0:	b	18ef0 <bfd_arch_bits_per_address@plt+0x7b3c>
   190d4:	ldr	r3, [pc, #288]	; 191fc <bfd_arch_bits_per_address@plt+0x7e48>
   190d8:	ldr	r3, [r3, #48]	; 0x30
   190dc:	cmp	r3, #0
   190e0:	beq	19124 <bfd_arch_bits_per_address@plt+0x7d70>
   190e4:	vldr	d7, [r5]
   190e8:	ldr	r3, [pc, #248]	; 191e8 <bfd_arch_bits_per_address@plt+0x7e34>
   190ec:	ldr	r0, [r8]
   190f0:	vsub.f64	d11, d7, d11
   190f4:	ldr	r3, [r3]
   190f8:	and	r3, r3, #64	; 0x40
   190fc:	vstr	d11, [r5]
   19100:	b	18fbc <bfd_arch_bits_per_address@plt+0x7c08>
   19104:	lsl	r2, r2, #1
   19108:	lsl	r1, r4, #1
   1910c:	ldr	r0, [pc, #236]	; 19200 <bfd_arch_bits_per_address@plt+0x7e4c>
   19110:	bl	11090 <printf@plt>
   19114:	ldr	r3, [pc, #204]	; 191e8 <bfd_arch_bits_per_address@plt+0x7e34>
   19118:	ldr	fp, [r3]
   1911c:	and	fp, fp, #64	; 0x40
   19120:	b	18f64 <bfd_arch_bits_per_address@plt+0x7bb0>
   19124:	mov	r1, sl
   19128:	ldr	r0, [pc, #212]	; 19204 <bfd_arch_bits_per_address@plt+0x7e50>
   1912c:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   19130:	cmp	r0, #0
   19134:	bne	190e4 <bfd_arch_bits_per_address@plt+0x7d30>
   19138:	b	18f98 <bfd_arch_bits_per_address@plt+0x7be4>
   1913c:	ldr	r2, [r6]
   19140:	lsr	r1, r1, #1
   19144:	sub	r3, r1, r0
   19148:	add	r2, r1, r2, lsr #1
   1914c:	sub	r0, r2, r0
   19150:	vmov	s12, r3
   19154:	vmov	s15, r0
   19158:	vldr	d4, [r7]
   1915c:	str	r1, [r4, #128]	; 0x80
   19160:	vcvt.f64.u32	d6, s12
   19164:	vcvt.f64.u32	d7, s15
   19168:	vdiv.f64	d5, d6, d4
   1916c:	vdiv.f64	d6, d7, d4
   19170:	vcvt.u32.f64	s10, d5
   19174:	vmov	r3, s10
   19178:	vcvt.u32.f64	s12, d6
   1917c:	vmov	r0, s12
   19180:	cmp	r3, r0
   19184:	bcs	18e80 <bfd_arch_bits_per_address@plt+0x7acc>
   19188:	ldr	r3, [r9]
   1918c:	tst	r3, #64	; 0x40
   19190:	bne	191ac <bfd_arch_bits_per_address@plt+0x7df8>
   19194:	str	r2, [r4, #128]	; 0x80
   19198:	b	18e80 <bfd_arch_bits_per_address@plt+0x7acc>
   1919c:	ldrd	r2, [r5]
   191a0:	ldr	r0, [pc, #96]	; 19208 <bfd_arch_bits_per_address@plt+0x7e54>
   191a4:	bl	11090 <printf@plt>
   191a8:	b	19098 <bfd_arch_bits_per_address@plt+0x7ce4>
   191ac:	mov	r0, fp
   191b0:	bl	11090 <printf@plt>
   191b4:	ldr	r3, [r6]
   191b8:	ldr	r1, [pc, #24]	; 191d8 <bfd_arch_bits_per_address@plt+0x7e24>
   191bc:	ldr	r2, [r4, #128]	; 0x80
   191c0:	ldr	ip, [r1]
   191c4:	add	r2, r2, r3, lsr #1
   191c8:	b	19194 <bfd_arch_bits_per_address@plt+0x7de0>
   191cc:	and	r1, fp, #64	; 0x40
   191d0:	b	19090 <bfd_arch_bits_per_address@plt+0x7cdc>
   191d4:	andeq	r5, r3, r0, asr r4
   191d8:	andeq	r5, r3, r4, asr #8
   191dc:	andeq	r5, r3, r0, asr #8
   191e0:	andeq	r5, r3, r8, asr #8
   191e4:	andeq	r5, r3, r4, lsr r4
   191e8:	andeq	r5, r3, r0, lsr #2
   191ec:	andeq	r0, r2, r0, ror #1
   191f0:	andeq	r5, r3, r8, asr #2
   191f4:	andeq	r5, r3, ip, lsl #9
   191f8:	andeq	r0, r2, r8, asr r1
   191fc:	andeq	r5, r3, ip, asr r4
   19200:	andeq	r0, r2, r4, lsl r1
   19204:	muleq	r3, r8, r4
   19208:	muleq	r2, r8, r1
   1920c:	ldr	r3, [pc, #1228]	; 196e0 <bfd_arch_bits_per_address@plt+0x832c>
   19210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19214:	vpush	{d8-d10}
   19218:	ldr	r2, [r3]
   1921c:	cmp	r2, #0
   19220:	sub	sp, sp, #100	; 0x64
   19224:	beq	19888 <bfd_arch_bits_per_address@plt+0x84d4>
   19228:	mov	r2, #0
   1922c:	str	r2, [r3]
   19230:	ldr	r9, [pc, #1196]	; 196e4 <bfd_arch_bits_per_address@plt+0x8330>
   19234:	ldr	r7, [pc, #1196]	; 196e8 <bfd_arch_bits_per_address@plt+0x8334>
   19238:	mov	r2, #0
   1923c:	ldr	r1, [r9]
   19240:	mov	r3, #0
   19244:	cmp	r1, #0
   19248:	strd	r2, [r7, #8]
   1924c:	beq	19868 <bfd_arch_bits_per_address@plt+0x84b4>
   19250:	ldr	r3, [pc, #1172]	; 196ec <bfd_arch_bits_per_address@plt+0x8338>
   19254:	str	r3, [sp, #28]
   19258:	ldr	r3, [r3]
   1925c:	cmp	r3, #0
   19260:	bne	197fc <bfd_arch_bits_per_address@plt+0x8448>
   19264:	ldr	r8, [pc, #1156]	; 196f0 <bfd_arch_bits_per_address@plt+0x833c>
   19268:	ldr	r0, [r8]
   1926c:	lsl	r0, r0, #2
   19270:	bl	11180 <xmalloc@plt>
   19274:	ldr	r1, [r8]
   19278:	cmp	r1, #0
   1927c:	str	r0, [sp, #24]
   19280:	beq	192a0 <bfd_arch_bits_per_address@plt+0x7eec>
   19284:	ldr	r2, [r8, #4]
   19288:	mov	r3, r0
   1928c:	add	r0, r0, r1, lsl #2
   19290:	str	r2, [r3], #4
   19294:	cmp	r0, r3
   19298:	add	r2, r2, #216	; 0xd8
   1929c:	bne	19290 <bfd_arch_bits_per_address@plt+0x7edc>
   192a0:	ldr	r5, [sp, #24]
   192a4:	ldr	r3, [pc, #1096]	; 196f4 <bfd_arch_bits_per_address@plt+0x8340>
   192a8:	mov	r2, #4
   192ac:	mov	r0, r5
   192b0:	bl	11354 <qsort@plt>
   192b4:	ldr	sl, [r9]
   192b8:	cmp	sl, #0
   192bc:	movne	sl, #109	; 0x6d
   192c0:	movne	r4, #5
   192c4:	bne	193a8 <bfd_arch_bits_per_address@plt+0x7ff4>
   192c8:	ldr	r4, [r8]
   192cc:	cmp	r4, #0
   192d0:	beq	19820 <bfd_arch_bits_per_address@plt+0x846c>
   192d4:	vldr	d5, [pc, #988]	; 196b8 <bfd_arch_bits_per_address@plt+0x8304>
   192d8:	add	r4, r5, r4, lsl #2
   192dc:	sub	r0, r4, #4
   192e0:	sub	r1, r5, #4
   192e4:	mov	r4, sl
   192e8:	ldr	r3, [r1, #4]!
   192ec:	ldr	r2, [r3, #24]
   192f0:	cmp	r2, #0
   192f4:	beq	19320 <bfd_arch_bits_per_address@plt+0x7f6c>
   192f8:	vldr	d4, [r3, #144]	; 0x90
   192fc:	vldr	d6, [r3, #120]	; 0x78
   19300:	vmov	s15, r2
   19304:	vadd.f64	d6, d6, d4
   19308:	vcvt.f64.u32	d7, s15
   1930c:	vdiv.f64	d4, d6, d7
   19310:	vcmpe.f64	d4, d5
   19314:	vmrs	APSR_nzcv, fpscr
   19318:	vmovgt.f64	d5, d4
   1931c:	movgt	r4, r3
   19320:	cmp	r1, r0
   19324:	bne	192e8 <bfd_arch_bits_per_address@plt+0x7f34>
   19328:	cmp	r4, #0
   1932c:	beq	19820 <bfd_arch_bits_per_address@plt+0x846c>
   19330:	ldr	r4, [r4, #24]
   19334:	cmp	r4, #0
   19338:	beq	19820 <bfd_arch_bits_per_address@plt+0x846c>
   1933c:	vcmpe.f64	d5, #0.0
   19340:	vmrs	APSR_nzcv, fpscr
   19344:	movle	sl, #84	; 0x54
   19348:	movle	r4, #0
   1934c:	ble	193a8 <bfd_arch_bits_per_address@plt+0x7ff4>
   19350:	ldr	r3, [pc, #928]	; 196f8 <bfd_arch_bits_per_address@plt+0x8344>
   19354:	vldr	d7, [pc, #868]	; 196c0 <bfd_arch_bits_per_address@plt+0x830c>
   19358:	vldr	d4, [pc, #872]	; 196c8 <bfd_arch_bits_per_address@plt+0x8314>
   1935c:	vldr	s4, [r3]
   19360:	vldr	d3, [pc, #872]	; 196d0 <bfd_arch_bits_per_address@plt+0x831c>
   19364:	ldr	r3, [pc, #912]	; 196fc <bfd_arch_bits_per_address@plt+0x8348>
   19368:	mov	r4, #0
   1936c:	vcvt.f64.s32	d2, s4
   19370:	vdiv.f64	d6, d5, d2
   19374:	b	1937c <bfd_arch_bits_per_address@plt+0x7fc8>
   19378:	vldr	d7, [r3, #-16]
   1937c:	vmul.f64	d7, d6, d7
   19380:	add	r3, r3, #16
   19384:	vcmpe.f64	d7, d4
   19388:	vmrs	APSR_nzcv, fpscr
   1938c:	blt	1939c <bfd_arch_bits_per_address@plt+0x7fe8>
   19390:	vcmpe.f64	d7, d3
   19394:	vmrs	APSR_nzcv, fpscr
   19398:	bmi	198ac <bfd_arch_bits_per_address@plt+0x84f8>
   1939c:	add	r4, r4, #1
   193a0:	cmp	r4, #11
   193a4:	bne	19378 <bfd_arch_bits_per_address@plt+0x7fc4>
   193a8:	mov	r2, #5
   193ac:	ldr	r1, [pc, #844]	; 19700 <bfd_arch_bits_per_address@plt+0x834c>
   193b0:	ldr	r0, [pc, #928]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   193b4:	bl	11120 <dcgettext@plt>
   193b8:	ldr	r6, [pc, #836]	; 19704 <bfd_arch_bits_per_address@plt+0x8350>
   193bc:	add	r5, sp, #32
   193c0:	mov	r2, sl
   193c4:	ldrb	r3, [r6, #16]
   193c8:	mov	r1, r0
   193cc:	mov	r0, r5
   193d0:	bl	11324 <sprintf@plt>
   193d4:	ldr	r3, [r9]
   193d8:	mov	r2, #5
   193dc:	cmp	r3, #0
   193e0:	bne	1975c <bfd_arch_bits_per_address@plt+0x83a8>
   193e4:	ldr	r1, [pc, #796]	; 19708 <bfd_arch_bits_per_address@plt+0x8354>
   193e8:	ldr	r0, [pc, #872]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   193ec:	bl	11120 <dcgettext@plt>
   193f0:	ldr	r3, [pc, #768]	; 196f8 <bfd_arch_bits_per_address@plt+0x8344>
   193f4:	str	r6, [sp]
   193f8:	vldr	d6, [pc, #712]	; 196c8 <bfd_arch_bits_per_address@plt+0x8314>
   193fc:	vldr	s14, [r3]
   19400:	vcvt.f64.s32	d7, s14
   19404:	vdiv.f64	d7, d6, d7
   19408:	vmov	r2, r3, d7
   1940c:	bl	11090 <printf@plt>
   19410:	vldr	d8, [r7]
   19414:	vcmpe.f64	d8, #0.0
   19418:	vmrs	APSR_nzcv, fpscr
   1941c:	bls	197d8 <bfd_arch_bits_per_address@plt+0x8424>
   19420:	mov	r2, #5
   19424:	ldr	r1, [pc, #736]	; 1970c <bfd_arch_bits_per_address@plt+0x8358>
   19428:	ldr	r0, [pc, #808]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   1942c:	bl	11120 <dcgettext@plt>
   19430:	mov	r2, #5
   19434:	ldr	r1, [pc, #724]	; 19710 <bfd_arch_bits_per_address@plt+0x835c>
   19438:	mov	r6, r0
   1943c:	ldr	r0, [pc, #788]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   19440:	bl	11120 <dcgettext@plt>
   19444:	mov	r2, #5
   19448:	ldr	r1, [pc, #704]	; 19710 <bfd_arch_bits_per_address@plt+0x835c>
   1944c:	mov	sl, r0
   19450:	ldr	r0, [pc, #768]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   19454:	bl	11120 <dcgettext@plt>
   19458:	mov	r2, #5
   1945c:	ldr	r1, [pc, #688]	; 19714 <bfd_arch_bits_per_address@plt+0x8360>
   19460:	str	r0, [sp, #20]
   19464:	ldr	r0, [pc, #748]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   19468:	bl	11120 <dcgettext@plt>
   1946c:	ldr	r1, [pc, #676]	; 19718 <bfd_arch_bits_per_address@plt+0x8364>
   19470:	ldr	r3, [sp, #20]
   19474:	mov	r2, r6
   19478:	str	r3, [sp, #4]
   1947c:	str	r1, [sp, #12]
   19480:	mov	r3, sl
   19484:	str	r1, [sp]
   19488:	ldr	r1, [pc, #652]	; 1971c <bfd_arch_bits_per_address@plt+0x8368>
   1948c:	str	r0, [sp, #8]
   19490:	ldr	r0, [pc, #648]	; 19720 <bfd_arch_bits_per_address@plt+0x836c>
   19494:	bl	11090 <printf@plt>
   19498:	mov	r2, #5
   1949c:	ldr	r1, [pc, #640]	; 19724 <bfd_arch_bits_per_address@plt+0x8370>
   194a0:	ldr	r0, [pc, #688]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   194a4:	bl	11120 <dcgettext@plt>
   194a8:	mov	r2, #5
   194ac:	ldr	r1, [pc, #628]	; 19728 <bfd_arch_bits_per_address@plt+0x8374>
   194b0:	mov	r6, r0
   194b4:	ldr	r0, [pc, #668]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   194b8:	bl	11120 <dcgettext@plt>
   194bc:	mov	r2, #5
   194c0:	ldr	r1, [pc, #612]	; 1972c <bfd_arch_bits_per_address@plt+0x8378>
   194c4:	mov	sl, r0
   194c8:	ldr	r0, [pc, #648]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   194cc:	bl	11120 <dcgettext@plt>
   194d0:	ldr	r3, [pc, #556]	; 19704 <bfd_arch_bits_per_address@plt+0x8350>
   194d4:	str	sl, [sp]
   194d8:	mov	r2, r3
   194dc:	mov	r1, r6
   194e0:	str	r5, [sp, #8]
   194e4:	str	r5, [sp, #4]
   194e8:	str	r0, [sp, #12]
   194ec:	ldr	r0, [pc, #572]	; 19730 <bfd_arch_bits_per_address@plt+0x837c>
   194f0:	bl	11090 <printf@plt>
   194f4:	ldr	r3, [r8]
   194f8:	cmp	r3, #0
   194fc:	beq	19688 <bfd_arch_bits_per_address@plt+0x82d4>
   19500:	ldr	r3, [pc, #556]	; 19734 <bfd_arch_bits_per_address@plt+0x8380>
   19504:	vldr	d9, [pc, #428]	; 196b8 <bfd_arch_bits_per_address@plt+0x8304>
   19508:	add	r3, r3, r4, lsl #4
   1950c:	str	r3, [sp, #20]
   19510:	ldr	r3, [sp, #24]
   19514:	vldr	d8, [pc, #444]	; 196d8 <bfd_arch_bits_per_address@plt+0x8324>
   19518:	ldr	sl, [pc, #536]	; 19738 <bfd_arch_bits_per_address@plt+0x8384>
   1951c:	sub	r6, r3, #4
   19520:	mov	r4, #0
   19524:	b	19638 <bfd_arch_bits_per_address@plt+0x8284>
   19528:	ldr	r3, [pc, #524]	; 1973c <bfd_arch_bits_per_address@plt+0x8388>
   1952c:	ldr	r5, [r6]
   19530:	ldr	r2, [sp, #20]
   19534:	ldr	r3, [r3]
   19538:	vldr	d7, [r5, #120]	; 0x78
   1953c:	cmp	r3, #0
   19540:	vldr	d10, [r2, #8]
   19544:	beq	19560 <bfd_arch_bits_per_address@plt+0x81ac>
   19548:	ldr	r3, [r5, #24]
   1954c:	cmp	r3, #0
   19550:	bne	19560 <bfd_arch_bits_per_address@plt+0x81ac>
   19554:	vcmp.f64	d7, #0.0
   19558:	vmrs	APSR_nzcv, fpscr
   1955c:	beq	19628 <bfd_arch_bits_per_address@plt+0x8274>
   19560:	vldr	d6, [r7, #8]
   19564:	vldr	d5, [r7]
   19568:	ldr	r3, [r9]
   1956c:	vadd.f64	d6, d7, d6
   19570:	cmp	r3, #0
   19574:	vcmpe.f64	d5, #0.0
   19578:	vstr	d6, [r7, #8]
   1957c:	beq	19848 <bfd_arch_bits_per_address@plt+0x8494>
   19580:	vmrs	APSR_nzcv, fpscr
   19584:	ldr	fp, [pc, #364]	; 196f8 <bfd_arch_bits_per_address@plt+0x8344>
   19588:	ldr	r0, [pc, #432]	; 19740 <bfd_arch_bits_per_address@plt+0x838c>
   1958c:	vmulgt.f64	d3, d7, d8
   19590:	vmovle.f64	d4, d9
   19594:	vdivgt.f64	d4, d3, d5
   19598:	vmov	r2, r3, d4
   1959c:	vldr	s11, [fp]
   195a0:	vcvt.f64.s32	d5, s11
   195a4:	vdiv.f64	d4, d7, d5
   195a8:	vdiv.f64	d7, d6, d5
   195ac:	vstr	d4, [sp, #8]
   195b0:	vstr	d7, [sp]
   195b4:	bl	11090 <printf@plt>
   195b8:	ldr	r3, [r5, #24]
   195bc:	cmp	r3, #0
   195c0:	beq	19830 <bfd_arch_bits_per_address@plt+0x847c>
   195c4:	vldr	d7, [r5, #120]	; 0x78
   195c8:	vmov	s13, r3
   195cc:	vldr	s12, [fp]
   195d0:	vldr	d5, [r5, #144]	; 0x90
   195d4:	vmul.f64	d3, d10, d7
   195d8:	mov	r1, r3
   195dc:	vcvt.f64.u32	d4, s13
   195e0:	vcvt.f64.s32	d6, s12
   195e4:	vadd.f64	d7, d7, d5
   195e8:	ldr	r0, [pc, #340]	; 19744 <bfd_arch_bits_per_address@plt+0x8390>
   195ec:	vdiv.f64	d2, d3, d6
   195f0:	vmul.f64	d7, d7, d10
   195f4:	vdiv.f64	d5, d7, d6
   195f8:	vdiv.f64	d7, d2, d4
   195fc:	vmov	r2, r3, d7
   19600:	vdiv.f64	d7, d5, d4
   19604:	vstr	d7, [sp]
   19608:	bl	11090 <printf@plt>
   1960c:	ldr	r3, [r9]
   19610:	mov	r0, r5
   19614:	cmp	r3, #0
   19618:	beq	19828 <bfd_arch_bits_per_address@plt+0x8474>
   1961c:	bl	1b408 <bfd_arch_bits_per_address@plt+0xa054>
   19620:	mov	r0, #10
   19624:	bl	11294 <putchar@plt>
   19628:	ldr	r3, [r8]
   1962c:	add	r4, r4, #1
   19630:	cmp	r3, r4
   19634:	bls	19688 <bfd_arch_bits_per_address@plt+0x82d4>
   19638:	ldr	r3, [r6, #4]!
   1963c:	mov	r0, sl
   19640:	ldr	r5, [r3]
   19644:	mov	r1, r5
   19648:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   1964c:	cmp	r0, #0
   19650:	bne	19528 <bfd_arch_bits_per_address@plt+0x8174>
   19654:	ldr	r0, [pc, #236]	; 19748 <bfd_arch_bits_per_address@plt+0x8394>
   19658:	ldr	r3, [r0, #48]	; 0x30
   1965c:	cmp	r3, #0
   19660:	bne	19628 <bfd_arch_bits_per_address@plt+0x8274>
   19664:	mov	r1, r5
   19668:	add	r0, r0, #60	; 0x3c
   1966c:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   19670:	cmp	r0, #0
   19674:	beq	19528 <bfd_arch_bits_per_address@plt+0x8174>
   19678:	ldr	r3, [r8]
   1967c:	add	r4, r4, #1
   19680:	cmp	r3, r4
   19684:	bhi	19638 <bfd_arch_bits_per_address@plt+0x8284>
   19688:	ldr	r0, [sp, #24]
   1968c:	bl	110a8 <free@plt>
   19690:	ldr	r3, [sp, #28]
   19694:	ldr	r3, [r3]
   19698:	cmp	r3, #0
   1969c:	beq	196ac <bfd_arch_bits_per_address@plt+0x82f8>
   196a0:	ldr	r3, [r9]
   196a4:	cmp	r3, #0
   196a8:	beq	19894 <bfd_arch_bits_per_address@plt+0x84e0>
   196ac:	add	sp, sp, #100	; 0x64
   196b0:	vpop	{d8-d10}
   196b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   196c0:			; <UNDEFINED> instruction: 0x812dea11
   196c4:	ldclcc	7, cr9, [r1, #-612]!	; 0xfffffd9c
   196c8:	andeq	r0, r0, r0
   196cc:	svccc	0x00f00000	; IMB
   196d0:	andeq	r0, r0, r0
   196d4:	addmi	r4, pc, r0
   196d8:	andeq	r0, r0, r0
   196dc:	subsmi	r0, r9, r0
   196e0:	andeq	r4, r3, r8, ror r4
   196e4:	andeq	r5, r3, r8, lsr r1
   196e8:	andeq	r5, r3, r8, asr #2
   196ec:	andeq	r4, r3, r8, ror #2
   196f0:	andeq	r5, r3, r0, asr r4
   196f4:	andeq	r8, r1, r8, asr #24
   196f8:	andeq	r5, r3, r0, asr #2
   196fc:	andeq	r0, r2, r8, asr #32
   19700:	ldrdeq	r0, [r2], -ip
   19704:	andeq	r4, r3, ip, ror r4
   19708:	andeq	r0, r2, r4, lsl #4
   1970c:	andeq	r0, r2, ip, lsr r2
   19710:	andeq	r0, r2, r8, asr #4
   19714:	andeq	r0, r2, r0, asr r2
   19718:	strdeq	pc, [r1], -r0
   1971c:	andeq	r0, r2, r8, asr r2
   19720:	andeq	r0, r2, ip, asr r2
   19724:	andeq	pc, r1, ip, ror pc	; <UNPREDICTABLE>
   19728:	andeq	r0, r2, ip, lsl #5
   1972c:			; <UNDEFINED> instruction: 0x0001efb4
   19730:	muleq	r2, r4, r2
   19734:	andeq	r0, r2, r0, lsr r0
   19738:	andeq	r5, r3, ip, lsl #9
   1973c:	andeq	r4, r3, r0, ror r1
   19740:	andeq	r0, r2, r4, asr #5
   19744:	andeq	r0, r2, ip, ror #5
   19748:	andeq	r5, r3, ip, asr r4
   1974c:	ldrdeq	lr, [r1], -r8
   19750:	andeq	r5, r3, r8, asr #8
   19754:	andeq	r0, r2, r8, ror #3
   19758:	andeq	lr, r1, r0, asr #13
   1975c:	ldr	r1, [pc, #-24]	; 1974c <bfd_arch_bits_per_address@plt+0x8398>
   19760:	ldr	r0, [pc, #-16]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   19764:	bl	11120 <dcgettext@plt>
   19768:	ldr	r3, [pc, #-32]	; 19750 <bfd_arch_bits_per_address@plt+0x839c>
   1976c:	vldr	d7, [r3]
   19770:	vcvt.s32.f64	s15, d7
   19774:	vmov	r1, s15
   19778:	lsl	r1, r1, #1
   1977c:	bl	11090 <printf@plt>
   19780:	vldr	d8, [r7]
   19784:	vcmpe.f64	d8, #0.0
   19788:	vmrs	APSR_nzcv, fpscr
   1978c:	ble	19414 <bfd_arch_bits_per_address@plt+0x8060>
   19790:	mov	r2, #5
   19794:	ldr	r1, [pc, #-72]	; 19754 <bfd_arch_bits_per_address@plt+0x83a0>
   19798:	ldr	r0, [pc, #-72]	; 19758 <bfd_arch_bits_per_address@plt+0x83a4>
   1979c:	bl	11120 <dcgettext@plt>
   197a0:	vldr	d6, [pc, #272]	; 198b8 <bfd_arch_bits_per_address@plt+0x8504>
   197a4:	ldr	r3, [pc, #276]	; 198c0 <bfd_arch_bits_per_address@plt+0x850c>
   197a8:	str	r6, [sp, #8]
   197ac:	vdiv.f64	d6, d6, d8
   197b0:	vldr	s14, [r3]
   197b4:	vcvt.f64.s32	d7, s14
   197b8:	vmov	r2, r3, d6
   197bc:	vdiv.f64	d6, d8, d7
   197c0:	vstr	d6, [sp]
   197c4:	bl	11090 <printf@plt>
   197c8:	vldr	d8, [r7]
   197cc:	vcmpe.f64	d8, #0.0
   197d0:	vmrs	APSR_nzcv, fpscr
   197d4:	bhi	19420 <bfd_arch_bits_per_address@plt+0x806c>
   197d8:	mov	r2, #5
   197dc:	ldr	r1, [pc, #224]	; 198c4 <bfd_arch_bits_per_address@plt+0x8510>
   197e0:	ldr	r0, [pc, #224]	; 198c8 <bfd_arch_bits_per_address@plt+0x8514>
   197e4:	bl	11120 <dcgettext@plt>
   197e8:	bl	11090 <printf@plt>
   197ec:	ldr	r3, [pc, #216]	; 198cc <bfd_arch_bits_per_address@plt+0x8518>
   197f0:	mov	r2, #0
   197f4:	strd	r2, [r7]
   197f8:	b	19420 <bfd_arch_bits_per_address@plt+0x806c>
   197fc:	mov	r2, #5
   19800:	ldr	r1, [pc, #200]	; 198d0 <bfd_arch_bits_per_address@plt+0x851c>
   19804:	ldr	r0, [pc, #188]	; 198c8 <bfd_arch_bits_per_address@plt+0x8514>
   19808:	bl	11120 <dcgettext@plt>
   1980c:	bl	11090 <printf@plt>
   19810:	ldr	r3, [pc, #188]	; 198d4 <bfd_arch_bits_per_address@plt+0x8520>
   19814:	ldr	r0, [r3]
   19818:	bl	1c39c <bfd_arch_bits_per_address@plt+0xafe8>
   1981c:	b	19264 <bfd_arch_bits_per_address@plt+0x7eb0>
   19820:	mov	sl, #84	; 0x54
   19824:	b	193a8 <bfd_arch_bits_per_address@plt+0x7ff4>
   19828:	bl	1b1f0 <bfd_arch_bits_per_address@plt+0x9e3c>
   1982c:	b	19620 <bfd_arch_bits_per_address@plt+0x826c>
   19830:	ldr	r3, [pc, #160]	; 198d8 <bfd_arch_bits_per_address@plt+0x8524>
   19834:	ldr	r0, [pc, #160]	; 198dc <bfd_arch_bits_per_address@plt+0x8528>
   19838:	mov	r2, r3
   1983c:	mov	r1, r3
   19840:	bl	11090 <printf@plt>
   19844:	b	1960c <bfd_arch_bits_per_address@plt+0x8258>
   19848:	vmrs	APSR_nzcv, fpscr
   1984c:	ldr	fp, [pc, #108]	; 198c0 <bfd_arch_bits_per_address@plt+0x850c>
   19850:	ldr	r0, [pc, #136]	; 198e0 <bfd_arch_bits_per_address@plt+0x852c>
   19854:	vmulgt.f64	d3, d7, d8
   19858:	vmovle.f64	d4, d9
   1985c:	vdivgt.f64	d4, d3, d5
   19860:	vmov	r2, r3, d4
   19864:	b	1959c <bfd_arch_bits_per_address@plt+0x81e8>
   19868:	mov	r2, #5
   1986c:	ldr	r1, [pc, #112]	; 198e4 <bfd_arch_bits_per_address@plt+0x8530>
   19870:	ldr	r0, [pc, #80]	; 198c8 <bfd_arch_bits_per_address@plt+0x8514>
   19874:	bl	11120 <dcgettext@plt>
   19878:	bl	11090 <printf@plt>
   1987c:	ldr	r3, [pc, #100]	; 198e8 <bfd_arch_bits_per_address@plt+0x8534>
   19880:	str	r3, [sp, #28]
   19884:	b	19264 <bfd_arch_bits_per_address@plt+0x7eb0>
   19888:	ldr	r0, [pc, #92]	; 198ec <bfd_arch_bits_per_address@plt+0x8538>
   1988c:	bl	111ec <puts@plt>
   19890:	b	19230 <bfd_arch_bits_per_address@plt+0x7e7c>
   19894:	ldr	r3, [pc, #56]	; 198d4 <bfd_arch_bits_per_address@plt+0x8520>
   19898:	ldr	r0, [r3]
   1989c:	bl	1c39c <bfd_arch_bits_per_address@plt+0xafe8>
   198a0:	add	sp, sp, #100	; 0x64
   198a4:	vpop	{d8-d10}
   198a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198ac:	ldr	r3, [pc, #60]	; 198f0 <bfd_arch_bits_per_address@plt+0x853c>
   198b0:	ldrb	sl, [r3, r4, lsl #4]
   198b4:	b	193a8 <bfd_arch_bits_per_address@plt+0x7ff4>
   198b8:	andeq	r0, r0, r0
   198bc:	subsmi	r0, r9, r0
   198c0:	andeq	r5, r3, r0, asr #2
   198c4:	andeq	r0, r2, r4, lsr #4
   198c8:	andeq	lr, r1, r0, asr #13
   198cc:	svccc	0x00f00000	; IMB
   198d0:			; <UNDEFINED> instruction: 0x000201b8
   198d4:	andeq	r4, r3, r4, asr #9
   198d8:	strdeq	pc, [r1], -r0
   198dc:	andeq	r0, r2, r0, lsl #6
   198e0:	ldrdeq	r0, [r2], -r8
   198e4:	andeq	r0, r2, ip, asr #3
   198e8:	andeq	r4, r3, r8, ror #2
   198ec:	andeq	lr, r1, r8, lsr r7
   198f0:	andeq	r0, r2, r0, lsr r0
   198f4:	ldr	r3, [pc, #88]	; 19954 <bfd_arch_bits_per_address@plt+0x85a0>
   198f8:	ldr	r1, [r3]
   198fc:	cmp	r1, #0
   19900:	beq	1994c <bfd_arch_bits_per_address@plt+0x8598>
   19904:	ldr	r2, [pc, #76]	; 19958 <bfd_arch_bits_per_address@plt+0x85a4>
   19908:	push	{lr}		; (str lr, [sp, #-4]!)
   1990c:	mov	r3, #0
   19910:	ldr	ip, [r2]
   19914:	add	lr, ip, #4
   19918:	ldr	r2, [ip, r3, lsl #4]
   1991c:	cmp	r2, r0
   19920:	bhi	19930 <bfd_arch_bits_per_address@plt+0x857c>
   19924:	ldr	r2, [lr, r3, lsl #4]
   19928:	cmp	r2, r0
   1992c:	bhi	19944 <bfd_arch_bits_per_address@plt+0x8590>
   19930:	add	r3, r3, #1
   19934:	cmp	r3, r1
   19938:	bne	19918 <bfd_arch_bits_per_address@plt+0x8564>
   1993c:	mov	r0, #0
   19940:	pop	{pc}		; (ldr pc, [sp], #4)
   19944:	mov	r0, #1
   19948:	pop	{pc}		; (ldr pc, [sp], #4)
   1994c:	mov	r0, r1
   19950:	bx	lr
   19954:	andeq	r5, r3, r4, asr #8
   19958:	andeq	r5, r3, r0, asr #8
   1995c:	ldr	r3, [pc, #184]	; 19a1c <bfd_arch_bits_per_address@plt+0x8668>
   19960:	push	{r4, r5, r6, r7, r8, lr}
   19964:	ldr	r5, [r3]
   19968:	ldr	r3, [r0]
   1996c:	cmp	r5, #0
   19970:	beq	199e0 <bfd_arch_bits_per_address@plt+0x862c>
   19974:	ldr	r2, [pc, #164]	; 19a20 <bfd_arch_bits_per_address@plt+0x866c>
   19978:	mov	r6, #0
   1997c:	mov	ip, r6
   19980:	ldr	r7, [r2]
   19984:	add	r8, r7, #4
   19988:	b	19990 <bfd_arch_bits_per_address@plt+0x85dc>
   1998c:	ldr	r3, [r0]
   19990:	ldr	r4, [r7, ip, lsl #4]
   19994:	ldr	r2, [r8, ip, lsl #4]
   19998:	ldr	lr, [r1]
   1999c:	cmp	r3, r4
   199a0:	movcc	r3, r4
   199a4:	cmp	r2, lr
   199a8:	movcs	r2, lr
   199ac:	cmp	r3, r2
   199b0:	bcs	199c8 <bfd_arch_bits_per_address@plt+0x8614>
   199b4:	cmp	r6, #0
   199b8:	bne	199e8 <bfd_arch_bits_per_address@plt+0x8634>
   199bc:	mov	r6, #1
   199c0:	str	r3, [r0]
   199c4:	str	r2, [r1]
   199c8:	add	ip, ip, #1
   199cc:	cmp	r5, ip
   199d0:	bne	1998c <bfd_arch_bits_per_address@plt+0x85d8>
   199d4:	cmp	r6, #0
   199d8:	popne	{r4, r5, r6, r7, r8, pc}
   199dc:	ldr	r3, [r0]
   199e0:	str	r3, [r1]
   199e4:	pop	{r4, r5, r6, r7, r8, pc}
   199e8:	ldr	r3, [pc, #52]	; 19a24 <bfd_arch_bits_per_address@plt+0x8670>
   199ec:	mov	r2, #5
   199f0:	ldr	r1, [pc, #48]	; 19a28 <bfd_arch_bits_per_address@plt+0x8674>
   199f4:	ldr	r0, [pc, #48]	; 19a2c <bfd_arch_bits_per_address@plt+0x8678>
   199f8:	ldr	r4, [r3]
   199fc:	bl	11120 <dcgettext@plt>
   19a00:	ldr	r3, [pc, #40]	; 19a30 <bfd_arch_bits_per_address@plt+0x867c>
   19a04:	ldr	r2, [r3]
   19a08:	mov	r1, r0
   19a0c:	mov	r0, r4
   19a10:	bl	11270 <fprintf@plt>
   19a14:	mov	r0, #1
   19a18:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   19a1c:	andeq	r5, r3, r4, asr #8
   19a20:	andeq	r5, r3, r0, asr #8
   19a24:			; <UNDEFINED> instruction: 0x000344b8
   19a28:	andeq	r0, r2, r8, lsl r3
   19a2c:	andeq	lr, r1, r0, asr #13
   19a30:	andeq	r5, r3, ip, lsr r4
   19a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a38:	vpush	{d8}
   19a3c:	ldr	r9, [pc, #1084]	; 19e80 <bfd_arch_bits_per_address@plt+0x8acc>
   19a40:	mov	r7, r0
   19a44:	sub	sp, sp, #68	; 0x44
   19a48:	ldr	r6, [r9]
   19a4c:	str	r1, [sp, #20]
   19a50:	add	r1, sp, #48	; 0x30
   19a54:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   19a58:	cmp	r0, #0
   19a5c:	bne	19d7c <bfd_arch_bits_per_address@plt+0x89c8>
   19a60:	add	r1, sp, #52	; 0x34
   19a64:	mov	r0, r7
   19a68:	bl	17d50 <bfd_arch_bits_per_address@plt+0x699c>
   19a6c:	cmp	r0, #0
   19a70:	bne	19d7c <bfd_arch_bits_per_address@plt+0x89c8>
   19a74:	add	r1, sp, #56	; 0x38
   19a78:	mov	r0, r7
   19a7c:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   19a80:	cmp	r0, #0
   19a84:	bne	19d7c <bfd_arch_bits_per_address@plt+0x89c8>
   19a88:	add	r1, sp, #28
   19a8c:	mov	r0, r7
   19a90:	bl	17cf4 <bfd_arch_bits_per_address@plt+0x6940>
   19a94:	cmp	r0, #0
   19a98:	bne	19d7c <bfd_arch_bits_per_address@plt+0x89c8>
   19a9c:	add	r8, sp, #32
   19aa0:	mov	r1, r8
   19aa4:	mov	r2, #15
   19aa8:	mov	r0, r7
   19aac:	bl	17dd4 <bfd_arch_bits_per_address@plt+0x6a20>
   19ab0:	cmp	r0, #0
   19ab4:	bne	19d7c <bfd_arch_bits_per_address@plt+0x89c8>
   19ab8:	add	r1, sp, #24
   19abc:	mov	r2, #1
   19ac0:	mov	r0, r7
   19ac4:	bl	17dd4 <bfd_arch_bits_per_address@plt+0x6a20>
   19ac8:	cmp	r0, #0
   19acc:	bne	19d7c <bfd_arch_bits_per_address@plt+0x89c8>
   19ad0:	ldrd	r4, [sp, #48]	; 0x30
   19ad4:	vldr	s15, [sp, #56]	; 0x38
   19ad8:	cmp	r6, #0
   19adc:	sub	r3, r5, r4
   19ae0:	lsr	r3, r3, #1
   19ae4:	vcvt.f64.u32	d6, s15
   19ae8:	vmov	s15, r3
   19aec:	vcvt.f64.s32	d7, s15
   19af0:	vdiv.f64	d8, d7, d6
   19af4:	beq	19c58 <bfd_arch_bits_per_address@plt+0x88a4>
   19af8:	ldr	r6, [pc, #900]	; 19e84 <bfd_arch_bits_per_address@plt+0x8ad0>
   19afc:	mov	r2, #15
   19b00:	mov	r1, r6
   19b04:	mov	r0, r8
   19b08:	bl	1139c <strncmp@plt>
   19b0c:	cmp	r0, #0
   19b10:	bne	19df8 <bfd_arch_bits_per_address@plt+0x8a44>
   19b14:	ldrb	r2, [sp, #24]
   19b18:	ldrb	r3, [r6, #16]
   19b1c:	cmp	r2, r3
   19b20:	bne	19e3c <bfd_arch_bits_per_address@plt+0x8a88>
   19b24:	ldr	r3, [pc, #860]	; 19e88 <bfd_arch_bits_per_address@plt+0x8ad4>
   19b28:	vldr	d6, [pc, #840]	; 19e78 <bfd_arch_bits_per_address@plt+0x8ac4>
   19b2c:	vldr	d7, [r3]
   19b30:	vsub.f64	d7, d7, d8
   19b34:	vabs.f64	d7, d7
   19b38:	vcmpe.f64	d7, d6
   19b3c:	vmrs	APSR_nzcv, fpscr
   19b40:	bgt	19de8 <bfd_arch_bits_per_address@plt+0x8a34>
   19b44:	ldr	ip, [r9]
   19b48:	cmp	ip, #0
   19b4c:	beq	19ca4 <bfd_arch_bits_per_address@plt+0x88f0>
   19b50:	ldr	r2, [pc, #820]	; 19e8c <bfd_arch_bits_per_address@plt+0x8ad8>
   19b54:	mov	r3, #0
   19b58:	ldr	r0, [r2]
   19b5c:	mov	r2, r0
   19b60:	b	19b74 <bfd_arch_bits_per_address@plt+0x87c0>
   19b64:	add	r3, r3, #1
   19b68:	cmp	r3, ip
   19b6c:	add	r2, r2, #16
   19b70:	beq	19ca4 <bfd_arch_bits_per_address@plt+0x88f0>
   19b74:	ldr	r1, [r0, r3, lsl #4]
   19b78:	mov	r6, r2
   19b7c:	cmp	r1, r4
   19b80:	bne	19b64 <bfd_arch_bits_per_address@plt+0x87b0>
   19b84:	ldr	r1, [r2, #4]
   19b88:	cmp	r1, r5
   19b8c:	bne	19b64 <bfd_arch_bits_per_address@plt+0x87b0>
   19b90:	ldr	r8, [pc, #760]	; 19e90 <bfd_arch_bits_per_address@plt+0x8adc>
   19b94:	ldr	r3, [r6, #8]
   19b98:	ldr	r2, [r8]
   19b9c:	tst	r2, #64	; 0x40
   19ba0:	bne	19c90 <bfd_arch_bits_per_address@plt+0x88dc>
   19ba4:	cmp	r3, #0
   19ba8:	beq	19c4c <bfd_arch_bits_per_address@plt+0x8898>
   19bac:	ldr	r9, [pc, #736]	; 19e94 <bfd_arch_bits_per_address@plt+0x8ae0>
   19bb0:	ldr	fp, [pc, #736]	; 19e98 <bfd_arch_bits_per_address@plt+0x8ae4>
   19bb4:	mov	r4, #0
   19bb8:	b	19bcc <bfd_arch_bits_per_address@plt+0x8818>
   19bbc:	ldr	r3, [r6, #8]
   19bc0:	add	r4, r4, #1
   19bc4:	cmp	r3, r4
   19bc8:	bls	19c4c <bfd_arch_bits_per_address@plt+0x8898>
   19bcc:	mov	r3, r7
   19bd0:	mov	r2, #1
   19bd4:	mov	r1, #2
   19bd8:	add	r0, sp, #24
   19bdc:	bl	111b0 <fread@plt>
   19be0:	cmp	r0, #1
   19be4:	bne	19d38 <bfd_arch_bits_per_address@plt+0x8984>
   19be8:	ldr	r3, [r9]
   19bec:	add	r0, sp, #24
   19bf0:	ldr	r3, [r3, #4]
   19bf4:	ldr	r3, [r3, #52]	; 0x34
   19bf8:	blx	r3
   19bfc:	ldr	r3, [r6, #12]
   19c00:	ldr	r5, [r3, r4, lsl #2]
   19c04:	add	r5, r0, r5
   19c08:	str	r5, [r3, r4, lsl #2]
   19c0c:	ldr	r3, [r8]
   19c10:	tst	r3, #64	; 0x40
   19c14:	beq	19bbc <bfd_arch_bits_per_address@plt+0x8808>
   19c18:	ldrd	r0, [r6, #4]
   19c1c:	ldr	sl, [r6]
   19c20:	sub	r0, r0, sl
   19c24:	mul	r0, r4, r0
   19c28:	bl	1de00 <bfd_arch_bits_per_address@plt+0xca4c>
   19c2c:	mov	r2, r5
   19c30:	add	r4, r4, #1
   19c34:	add	r1, r0, sl
   19c38:	mov	r0, fp
   19c3c:	bl	11090 <printf@plt>
   19c40:	ldr	r3, [r6, #8]
   19c44:	cmp	r3, r4
   19c48:	bhi	19bcc <bfd_arch_bits_per_address@plt+0x8818>
   19c4c:	add	sp, sp, #68	; 0x44
   19c50:	vpop	{d8}
   19c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c58:	ldm	r8, {r0, r1, r2, r3}
   19c5c:	ldr	ip, [pc, #544]	; 19e84 <bfd_arch_bits_per_address@plt+0x8ad0>
   19c60:	ldrb	fp, [sp, #24]
   19c64:	ldr	lr, [pc, #560]	; 19e9c <bfd_arch_bits_per_address@plt+0x8ae8>
   19c68:	ldr	r6, [pc, #536]	; 19e88 <bfd_arch_bits_per_address@plt+0x8ad4>
   19c6c:	strb	fp, [ip, #16]
   19c70:	stmia	ip!, {r0, r1, r2}
   19c74:	lsr	r2, r3, #16
   19c78:	ldr	r1, [sp, #28]
   19c7c:	strh	r3, [ip], #2
   19c80:	vstr	d8, [r6]
   19c84:	str	r1, [lr]
   19c88:	strb	r2, [ip]
   19c8c:	b	19b44 <bfd_arch_bits_per_address@plt+0x8790>
   19c90:	ldm	r6, {r1, r2}
   19c94:	ldr	r0, [pc, #516]	; 19ea0 <bfd_arch_bits_per_address@plt+0x8aec>
   19c98:	bl	11090 <printf@plt>
   19c9c:	ldr	r3, [r6, #8]
   19ca0:	b	19ba4 <bfd_arch_bits_per_address@plt+0x87f0>
   19ca4:	mov	r1, r8
   19ca8:	add	r0, sp, #28
   19cac:	strd	r4, [sp, #28]
   19cb0:	bl	1995c <bfd_arch_bits_per_address@plt+0x85a8>
   19cb4:	ldrd	r2, [sp, #28]
   19cb8:	cmp	r2, r3
   19cbc:	bne	19db4 <bfd_arch_bits_per_address@plt+0x8a00>
   19cc0:	ldr	r1, [r9]
   19cc4:	ldr	r4, [pc, #448]	; 19e8c <bfd_arch_bits_per_address@plt+0x8ad8>
   19cc8:	add	r1, r1, #1
   19ccc:	ldr	r0, [r4]
   19cd0:	lsl	r1, r1, #4
   19cd4:	bl	11144 <xrealloc@plt>
   19cd8:	add	ip, sp, #48	; 0x30
   19cdc:	ldr	r6, [r9]
   19ce0:	mov	r5, r0
   19ce4:	ldm	ip!, {r0, r1, r2, r3}
   19ce8:	add	lr, r5, r6, lsl #4
   19cec:	str	r5, [r4]
   19cf0:	str	r0, [r5, r6, lsl #4]
   19cf4:	ldr	ip, [r9]
   19cf8:	ldr	r6, [r4]
   19cfc:	str	r1, [lr, #4]
   19d00:	add	r6, r6, ip, lsl #4
   19d04:	str	r2, [lr, #8]
   19d08:	str	r3, [lr, #12]
   19d0c:	ldr	r0, [r6, #8]
   19d10:	add	ip, ip, #1
   19d14:	str	ip, [r9]
   19d18:	lsl	r0, r0, #2
   19d1c:	bl	11180 <xmalloc@plt>
   19d20:	ldr	r2, [r6, #8]
   19d24:	mov	r1, #0
   19d28:	lsl	r2, r2, #2
   19d2c:	str	r0, [r6, #12]
   19d30:	bl	11288 <memset@plt>
   19d34:	b	19b90 <bfd_arch_bits_per_address@plt+0x87dc>
   19d38:	ldr	r3, [pc, #356]	; 19ea4 <bfd_arch_bits_per_address@plt+0x8af0>
   19d3c:	mov	r2, #5
   19d40:	ldr	r1, [pc, #352]	; 19ea8 <bfd_arch_bits_per_address@plt+0x8af4>
   19d44:	ldr	r0, [pc, #352]	; 19eac <bfd_arch_bits_per_address@plt+0x8af8>
   19d48:	ldr	r5, [r3]
   19d4c:	bl	11120 <dcgettext@plt>
   19d50:	ldr	r2, [pc, #344]	; 19eb0 <bfd_arch_bits_per_address@plt+0x8afc>
   19d54:	ldr	r1, [r6, #8]
   19d58:	ldr	r3, [sp, #20]
   19d5c:	str	r1, [sp, #4]
   19d60:	str	r4, [sp]
   19d64:	ldr	r2, [r2]
   19d68:	mov	r1, r0
   19d6c:	mov	r0, r5
   19d70:	bl	11270 <fprintf@plt>
   19d74:	mov	r0, #1
   19d78:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   19d7c:	ldr	r3, [pc, #288]	; 19ea4 <bfd_arch_bits_per_address@plt+0x8af0>
   19d80:	mov	r2, #5
   19d84:	ldr	r1, [pc, #296]	; 19eb4 <bfd_arch_bits_per_address@plt+0x8b00>
   19d88:	ldr	r0, [pc, #284]	; 19eac <bfd_arch_bits_per_address@plt+0x8af8>
   19d8c:	ldr	r4, [r3]
   19d90:	bl	11120 <dcgettext@plt>
   19d94:	ldr	r2, [pc, #276]	; 19eb0 <bfd_arch_bits_per_address@plt+0x8afc>
   19d98:	ldr	r3, [sp, #20]
   19d9c:	ldr	r2, [r2]
   19da0:	mov	r1, r0
   19da4:	mov	r0, r4
   19da8:	bl	11270 <fprintf@plt>
   19dac:	mov	r0, #1
   19db0:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   19db4:	ldr	r3, [pc, #232]	; 19ea4 <bfd_arch_bits_per_address@plt+0x8af0>
   19db8:	ldr	r1, [pc, #248]	; 19eb8 <bfd_arch_bits_per_address@plt+0x8b04>
   19dbc:	mov	r2, #5
   19dc0:	ldr	r0, [pc, #228]	; 19eac <bfd_arch_bits_per_address@plt+0x8af8>
   19dc4:	ldr	r4, [r3]
   19dc8:	bl	11120 <dcgettext@plt>
   19dcc:	ldr	r3, [pc, #220]	; 19eb0 <bfd_arch_bits_per_address@plt+0x8afc>
   19dd0:	ldr	r2, [r3]
   19dd4:	mov	r1, r0
   19dd8:	mov	r0, r4
   19ddc:	bl	11270 <fprintf@plt>
   19de0:	mov	r0, #1
   19de4:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   19de8:	ldr	r3, [pc, #180]	; 19ea4 <bfd_arch_bits_per_address@plt+0x8af0>
   19dec:	mov	r2, #5
   19df0:	ldr	r1, [pc, #196]	; 19ebc <bfd_arch_bits_per_address@plt+0x8b08>
   19df4:	b	19dc0 <bfd_arch_bits_per_address@plt+0x8a0c>
   19df8:	ldr	r3, [pc, #164]	; 19ea4 <bfd_arch_bits_per_address@plt+0x8af0>
   19dfc:	mov	r2, #5
   19e00:	ldr	r1, [pc, #184]	; 19ec0 <bfd_arch_bits_per_address@plt+0x8b0c>
   19e04:	ldr	r0, [pc, #160]	; 19eac <bfd_arch_bits_per_address@plt+0x8af8>
   19e08:	ldr	r4, [r3]
   19e0c:	bl	11120 <dcgettext@plt>
   19e10:	ldr	r3, [pc, #152]	; 19eb0 <bfd_arch_bits_per_address@plt+0x8afc>
   19e14:	str	r8, [sp, #8]
   19e18:	str	r6, [sp]
   19e1c:	ldr	r3, [r3]
   19e20:	mov	r2, r3
   19e24:	str	r3, [sp, #4]
   19e28:	mov	r1, r0
   19e2c:	mov	r0, r4
   19e30:	bl	11270 <fprintf@plt>
   19e34:	mov	r0, #1
   19e38:	bl	18bd0 <bfd_arch_bits_per_address@plt+0x781c>
   19e3c:	ldr	r3, [pc, #96]	; 19ea4 <bfd_arch_bits_per_address@plt+0x8af0>
   19e40:	mov	r2, #5
   19e44:	ldr	r1, [pc, #120]	; 19ec4 <bfd_arch_bits_per_address@plt+0x8b10>
   19e48:	ldr	r0, [pc, #92]	; 19eac <bfd_arch_bits_per_address@plt+0x8af8>
   19e4c:	ldr	r4, [r3]
   19e50:	bl	11120 <dcgettext@plt>
   19e54:	ldr	r3, [pc, #84]	; 19eb0 <bfd_arch_bits_per_address@plt+0x8afc>
   19e58:	ldrb	r2, [r6, #16]
   19e5c:	ldrb	r1, [sp, #24]
   19e60:	ldr	r3, [r3]
   19e64:	str	r1, [sp, #8]
   19e68:	strd	r2, [sp]
   19e6c:	mov	r2, r3
   19e70:	b	19e28 <bfd_arch_bits_per_address@plt+0x8a74>
   19e74:	nop			; (mov r0, r0)
   19e78:	adcsge	lr, r5, sp, lsl #27
   19e7c:	mrccc	6, 5, ip, cr0, cr7, {7}
   19e80:	andeq	r5, r3, r4, asr #8
   19e84:	andeq	r4, r3, ip, ror r4
   19e88:	andeq	r5, r3, r8, asr #8
   19e8c:	andeq	r5, r3, r0, asr #8
   19e90:	andeq	r5, r3, r0, lsr #2
   19e94:	andeq	r5, r3, r0, lsr #8
   19e98:			; <UNDEFINED> instruction: 0x000204bc
   19e9c:	andeq	r5, r3, r0, asr #2
   19ea0:	andeq	r0, r2, ip, asr #8
   19ea4:			; <UNDEFINED> instruction: 0x000344b8
   19ea8:	andeq	r0, r2, r4, lsl #9
   19eac:	andeq	lr, r1, r0, asr #13
   19eb0:	andeq	r5, r3, ip, lsr r4
   19eb4:	andeq	lr, r1, r0, lsr #13
   19eb8:	andeq	r0, r2, r8, lsr #8
   19ebc:	strdeq	r0, [r2], -ip
   19ec0:	andeq	r0, r2, r4, asr r3
   19ec4:	andeq	r0, r2, r4, lsr #7
   19ec8:	push	{r4, r5, r6, lr}
   19ecc:	mov	r5, r0
   19ed0:	ldr	r6, [pc, #124]	; 19f54 <bfd_arch_bits_per_address@plt+0x8ba0>
   19ed4:	ldr	r4, [r6]
   19ed8:	cmp	r4, #0
   19edc:	bne	19ef0 <bfd_arch_bits_per_address@plt+0x8b3c>
   19ee0:	b	19f0c <bfd_arch_bits_per_address@plt+0x8b58>
   19ee4:	ldr	r4, [r4]
   19ee8:	cmp	r4, #0
   19eec:	beq	19f0c <bfd_arch_bits_per_address@plt+0x8b58>
   19ef0:	ldr	r1, [r4, #4]
   19ef4:	mov	r0, r5
   19ef8:	bl	110cc <filename_cmp@plt>
   19efc:	cmp	r0, #0
   19f00:	bne	19ee4 <bfd_arch_bits_per_address@plt+0x8b30>
   19f04:	mov	r0, r4
   19f08:	pop	{r4, r5, r6, pc}
   19f0c:	mov	r0, #24
   19f10:	bl	11180 <xmalloc@plt>
   19f14:	mov	r3, #0
   19f18:	mov	r4, r0
   19f1c:	mov	r0, r5
   19f20:	str	r3, [r4]
   19f24:	str	r3, [r4, #4]
   19f28:	str	r3, [r4, #8]
   19f2c:	str	r3, [r4, #12]
   19f30:	str	r3, [r4, #16]
   19f34:	str	r3, [r4, #20]
   19f38:	bl	11198 <xstrdup@plt>
   19f3c:	ldr	r3, [r6]
   19f40:	str	r4, [r6]
   19f44:	str	r3, [r4]
   19f48:	str	r0, [r4, #4]
   19f4c:	mov	r0, r4
   19f50:	pop	{r4, r5, r6, pc}
   19f54:	andeq	r5, r3, r8, asr r1
   19f58:	ldr	r3, [pc, #96]	; 19fc0 <bfd_arch_bits_per_address@plt+0x8c0c>
   19f5c:	push	{r4, r5, r6, lr}
   19f60:	ldr	r4, [r3]
   19f64:	cmp	r4, #0
   19f68:	beq	19fb4 <bfd_arch_bits_per_address@plt+0x8c00>
   19f6c:	mov	r6, r0
   19f70:	b	19f80 <bfd_arch_bits_per_address@plt+0x8bcc>
   19f74:	ldr	r4, [r4]
   19f78:	cmp	r4, #0
   19f7c:	beq	19fb4 <bfd_arch_bits_per_address@plt+0x8c00>
   19f80:	ldr	r5, [r4, #4]
   19f84:	mov	r1, #47	; 0x2f
   19f88:	mov	r0, r5
   19f8c:	bl	112e8 <strrchr@plt>
   19f90:	subs	r3, r0, #0
   19f94:	addne	r5, r3, #1
   19f98:	mov	r0, r6
   19f9c:	mov	r1, r5
   19fa0:	bl	110cc <filename_cmp@plt>
   19fa4:	cmp	r0, #0
   19fa8:	bne	19f74 <bfd_arch_bits_per_address@plt+0x8bc0>
   19fac:	mov	r0, r4
   19fb0:	pop	{r4, r5, r6, pc}
   19fb4:	mov	r4, #0
   19fb8:	mov	r0, r4
   19fbc:	pop	{r4, r5, r6, pc}
   19fc0:	andeq	r5, r3, r8, asr r1
   19fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fc8:	sub	sp, sp, #9216	; 0x2400
   19fcc:	ldr	r6, [r0, #4]
   19fd0:	sub	sp, sp, #12
   19fd4:	mov	fp, r3
   19fd8:	ldr	r3, [pc, #772]	; 1a2e4 <bfd_arch_bits_per_address@plt+0x8f30>
   19fdc:	add	r5, sp, #8
   19fe0:	mov	r8, r0
   19fe4:	mov	sl, r1
   19fe8:	mov	r0, r5
   19fec:	mov	r1, r6
   19ff0:	ldr	r4, [r3, #4]
   19ff4:	str	r2, [sp]
   19ff8:	bl	111a4 <strcpy@plt>
   19ffc:	ldrb	r3, [r6]
   1a000:	ldr	r7, [pc, #736]	; 1a2e8 <bfd_arch_bits_per_address@plt+0x8f34>
   1a004:	ldr	r9, [pc, #736]	; 1a2ec <bfd_arch_bits_per_address@plt+0x8f38>
   1a008:	cmp	r3, #47	; 0x2f
   1a00c:	moveq	r4, #0
   1a010:	mov	r6, #0
   1a014:	b	1a094 <bfd_arch_bits_per_address@plt+0x8ce0>
   1a018:	mov	r1, r9
   1a01c:	mov	r0, r5
   1a020:	bl	1133c <fopen64@plt>
   1a024:	cmp	r0, #0
   1a028:	bne	1a0b4 <bfd_arch_bits_per_address@plt+0x8d00>
   1a02c:	orrs	r3, r6, r4
   1a030:	bne	1a054 <bfd_arch_bits_per_address@plt+0x8ca0>
   1a034:	mov	r1, #47	; 0x2f
   1a038:	ldr	r0, [r8, #4]
   1a03c:	bl	112e8 <strrchr@plt>
   1a040:	cmp	r0, #0
   1a044:	beq	1a240 <bfd_arch_bits_per_address@plt+0x8e8c>
   1a048:	ldr	r3, [pc, #660]	; 1a2e4 <bfd_arch_bits_per_address@plt+0x8f30>
   1a04c:	add	r6, r0, #1
   1a050:	ldr	r4, [r3, #4]
   1a054:	cmp	r4, #0
   1a058:	beq	1a240 <bfd_arch_bits_per_address@plt+0x8e8c>
   1a05c:	add	r1, r4, #4
   1a060:	mov	r0, r5
   1a064:	bl	11108 <stpcpy@plt>
   1a068:	ldr	r3, [pc, #640]	; 1a2f0 <bfd_arch_bits_per_address@plt+0x8f3c>
   1a06c:	cmp	r6, #0
   1a070:	movne	r1, r6
   1a074:	ldrh	r3, [r3]
   1a078:	ldreq	r1, [r8, #4]
   1a07c:	sub	r2, r0, r5
   1a080:	strh	r3, [r0]
   1a084:	add	r0, r2, #1
   1a088:	add	r0, r5, r0
   1a08c:	bl	111a4 <strcpy@plt>
   1a090:	ldr	r4, [r4]
   1a094:	ldr	r3, [r7]
   1a098:	tst	r3, #8192	; 0x2000
   1a09c:	beq	1a018 <bfd_arch_bits_per_address@plt+0x8c64>
   1a0a0:	mov	r2, r5
   1a0a4:	ldr	r1, [r8, #4]
   1a0a8:	ldr	r0, [pc, #580]	; 1a2f4 <bfd_arch_bits_per_address@plt+0x8f40>
   1a0ac:	bl	11090 <printf@plt>
   1a0b0:	b	1a018 <bfd_arch_bits_per_address@plt+0x8c64>
   1a0b4:	ldr	r3, [pc, #552]	; 1a2e4 <bfd_arch_bits_per_address@plt+0x8f30>
   1a0b8:	str	r0, [sp, #4]
   1a0bc:	ldr	r3, [r3, #12]
   1a0c0:	cmp	r3, #0
   1a0c4:	beq	1a1c4 <bfd_arch_bits_per_address@plt+0x8e10>
   1a0c8:	ldr	r4, [r8, #4]
   1a0cc:	mov	r1, #47	; 0x2f
   1a0d0:	mov	r0, r4
   1a0d4:	bl	112e8 <strrchr@plt>
   1a0d8:	cmp	r0, #0
   1a0dc:	addne	r4, r0, #1
   1a0e0:	mov	r1, r4
   1a0e4:	mov	r0, r5
   1a0e8:	bl	11108 <stpcpy@plt>
   1a0ec:	ldr	r2, [pc, #516]	; 1a2f8 <bfd_arch_bits_per_address@plt+0x8f44>
   1a0f0:	ldr	r1, [pc, #516]	; 1a2fc <bfd_arch_bits_per_address@plt+0x8f48>
   1a0f4:	mov	r3, r0
   1a0f8:	ldr	r0, [r2]
   1a0fc:	ldrb	r2, [r2, #4]
   1a100:	str	r0, [r3]
   1a104:	mov	r0, r5
   1a108:	strb	r2, [r3, #4]
   1a10c:	bl	1133c <fopen64@plt>
   1a110:	subs	r7, r0, #0
   1a114:	beq	1a2d8 <bfd_arch_bits_per_address@plt+0x8f24>
   1a118:	ldr	r3, [pc, #480]	; 1a300 <bfd_arch_bits_per_address@plt+0x8f4c>
   1a11c:	ldr	r3, [r3]
   1a120:	cmp	r3, r7
   1a124:	beq	1a1cc <bfd_arch_bits_per_address@plt+0x8e18>
   1a128:	add	r0, sl, #1
   1a12c:	bl	11180 <xmalloc@plt>
   1a130:	mov	r4, #1
   1a134:	mov	r6, r4
   1a138:	mov	r8, r0
   1a13c:	add	r0, sp, #1024	; 0x400
   1a140:	ldr	r3, [sp, #4]
   1a144:	mov	r2, #8192	; 0x2000
   1a148:	mov	r1, #1
   1a14c:	add	r0, r0, #8
   1a150:	bl	111b0 <fread@plt>
   1a154:	cmp	r0, #0
   1a158:	ble	1a220 <bfd_arch_bits_per_address@plt+0x8e6c>
   1a15c:	add	r3, sp, #1024	; 0x400
   1a160:	add	r3, r3, #8
   1a164:	add	r9, r3, r0
   1a168:	mov	r5, r3
   1a16c:	cmp	r4, #0
   1a170:	mov	r2, r6
   1a174:	mov	r3, fp
   1a178:	mov	r1, sl
   1a17c:	mov	r0, r8
   1a180:	beq	1a19c <bfd_arch_bits_per_address@plt+0x8de8>
   1a184:	ldr	ip, [sp]
   1a188:	blx	ip
   1a18c:	mov	r1, r7
   1a190:	mov	r0, r8
   1a194:	bl	11390 <fputs@plt>
   1a198:	add	r6, r6, #1
   1a19c:	ldrb	r4, [r5], #1
   1a1a0:	mov	r1, r7
   1a1a4:	mov	r0, r4
   1a1a8:	bl	11300 <fputc@plt>
   1a1ac:	cmp	r5, r9
   1a1b0:	sub	r4, r4, #10
   1a1b4:	clz	r4, r4
   1a1b8:	lsr	r4, r4, #5
   1a1bc:	bne	1a16c <bfd_arch_bits_per_address@plt+0x8db8>
   1a1c0:	b	1a13c <bfd_arch_bits_per_address@plt+0x8d88>
   1a1c4:	ldr	r3, [pc, #308]	; 1a300 <bfd_arch_bits_per_address@plt+0x8f4c>
   1a1c8:	ldr	r7, [r3]
   1a1cc:	ldr	r3, [pc, #304]	; 1a304 <bfd_arch_bits_per_address@plt+0x8f50>
   1a1d0:	ldr	r2, [r3]
   1a1d4:	cmp	r2, #0
   1a1d8:	beq	1a2b0 <bfd_arch_bits_per_address@plt+0x8efc>
   1a1dc:	mov	r2, #0
   1a1e0:	str	r2, [r3]
   1a1e4:	ldr	r3, [pc, #284]	; 1a308 <bfd_arch_bits_per_address@plt+0x8f54>
   1a1e8:	ldr	r2, [r3]
   1a1ec:	cmp	r2, #0
   1a1f0:	beq	1a2c0 <bfd_arch_bits_per_address@plt+0x8f0c>
   1a1f4:	mov	r2, #0
   1a1f8:	str	r2, [r3]
   1a1fc:	mov	r2, #5
   1a200:	ldr	r1, [pc, #260]	; 1a30c <bfd_arch_bits_per_address@plt+0x8f58>
   1a204:	ldr	r0, [pc, #260]	; 1a310 <bfd_arch_bits_per_address@plt+0x8f5c>
   1a208:	bl	11120 <dcgettext@plt>
   1a20c:	ldr	r2, [r8, #4]
   1a210:	mov	r1, r0
   1a214:	mov	r0, r7
   1a218:	bl	11270 <fprintf@plt>
   1a21c:	b	1a128 <bfd_arch_bits_per_address@plt+0x8d74>
   1a220:	mov	r0, r8
   1a224:	bl	110a8 <free@plt>
   1a228:	ldr	r0, [sp, #4]
   1a22c:	bl	112d0 <fclose@plt>
   1a230:	mov	r0, r7
   1a234:	add	sp, sp, #9216	; 0x2400
   1a238:	add	sp, sp, #12
   1a23c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a240:	bl	1127c <__errno_location@plt>
   1a244:	ldr	r3, [r0]
   1a248:	cmp	r3, #2
   1a24c:	beq	1a26c <bfd_arch_bits_per_address@plt+0x8eb8>
   1a250:	ldr	r0, [r8, #4]
   1a254:	bl	1115c <perror@plt>
   1a258:	mov	r7, #0
   1a25c:	mov	r0, r7
   1a260:	add	sp, sp, #9216	; 0x2400
   1a264:	add	sp, sp, #12
   1a268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a26c:	ldr	r3, [pc, #160]	; 1a314 <bfd_arch_bits_per_address@plt+0x8f60>
   1a270:	mov	r2, #5
   1a274:	ldr	r1, [pc, #156]	; 1a318 <bfd_arch_bits_per_address@plt+0x8f64>
   1a278:	ldr	r0, [pc, #144]	; 1a310 <bfd_arch_bits_per_address@plt+0x8f5c>
   1a27c:	ldr	r4, [r3]
   1a280:	bl	11120 <dcgettext@plt>
   1a284:	ldr	r2, [pc, #144]	; 1a31c <bfd_arch_bits_per_address@plt+0x8f68>
   1a288:	ldr	r3, [r8, #4]
   1a28c:	mov	r7, #0
   1a290:	ldr	r2, [r2]
   1a294:	mov	r1, r0
   1a298:	mov	r0, r4
   1a29c:	bl	11270 <fprintf@plt>
   1a2a0:	mov	r0, r7
   1a2a4:	add	sp, sp, #9216	; 0x2400
   1a2a8:	add	sp, sp, #12
   1a2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2b0:	mov	r1, r7
   1a2b4:	mov	r0, #10
   1a2b8:	bl	11300 <fputc@plt>
   1a2bc:	b	1a1e4 <bfd_arch_bits_per_address@plt+0x8e30>
   1a2c0:	mov	r3, r7
   1a2c4:	mov	r2, #2
   1a2c8:	mov	r1, #1
   1a2cc:	ldr	r0, [pc, #76]	; 1a320 <bfd_arch_bits_per_address@plt+0x8f6c>
   1a2d0:	bl	11174 <fwrite@plt>
   1a2d4:	b	1a1fc <bfd_arch_bits_per_address@plt+0x8e48>
   1a2d8:	mov	r0, r5
   1a2dc:	bl	1115c <perror@plt>
   1a2e0:	b	1a230 <bfd_arch_bits_per_address@plt+0x8e7c>
   1a2e4:	andeq	r5, r3, r8, asr r1
   1a2e8:	andeq	r5, r3, r0, lsr #2
   1a2ec:	andeq	pc, r1, r8, ror #2
   1a2f0:	andeq	r0, r2, r8, lsl #10
   1a2f4:	ldrdeq	r0, [r2], -r8
   1a2f8:	andeq	r0, r2, r8, lsr #10
   1a2fc:	andeq	pc, r1, r0, ror #15
   1a300:	andeq	r4, r3, r4, asr #9
   1a304:	muleq	r3, r0, r4
   1a308:	andeq	r4, r3, r8, ror r4
   1a30c:	andeq	r0, r2, r4, lsr r5
   1a310:	andeq	lr, r1, r0, asr #13
   1a314:			; <UNDEFINED> instruction: 0x000344b8
   1a318:	andeq	r0, r2, ip, lsl #10
   1a31c:	andeq	r5, r3, ip, lsr r4
   1a320:	andeq	r0, r2, r0, lsr r5
   1a324:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a328:	mov	r8, r0
   1a32c:	sub	r7, r1, #1
   1a330:	mov	r9, #0
   1a334:	b	1a37c <bfd_arch_bits_per_address@plt+0x8fc8>
   1a338:	add	r0, r5, #8
   1a33c:	bl	11180 <xmalloc@plt>
   1a340:	mov	r2, r5
   1a344:	mov	r1, r6
   1a348:	mov	r4, r0
   1a34c:	add	r0, r0, #4
   1a350:	bl	110e4 <memcpy@plt>
   1a354:	ldr	r3, [r8, #4]
   1a358:	add	r5, r4, r5
   1a35c:	cmp	r3, #0
   1a360:	strb	r9, [r5, #4]
   1a364:	streq	r4, [r8]
   1a368:	str	r9, [r4]
   1a36c:	strne	r4, [r3]
   1a370:	cmp	r7, #0
   1a374:	str	r4, [r8, #4]
   1a378:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a37c:	add	r6, r7, #1
   1a380:	mov	r0, r6
   1a384:	mov	r1, #58	; 0x3a
   1a388:	bl	11258 <strchr@plt>
   1a38c:	subs	r7, r0, #0
   1a390:	subne	r5, r7, r6
   1a394:	bne	1a338 <bfd_arch_bits_per_address@plt+0x8f84>
   1a398:	mov	r0, r6
   1a39c:	bl	1124c <strlen@plt>
   1a3a0:	mov	r5, r0
   1a3a4:	b	1a338 <bfd_arch_bits_per_address@plt+0x8f84>
   1a3a8:	ldr	r2, [r0]
   1a3ac:	ldr	r3, [r1]
   1a3b0:	cmp	r2, r3
   1a3b4:	bhi	1a3ec <bfd_arch_bits_per_address@plt+0x9038>
   1a3b8:	bcc	1a3f4 <bfd_arch_bits_per_address@plt+0x9040>
   1a3bc:	ldrb	r2, [r0, #20]
   1a3c0:	ldrb	r3, [r1, #20]
   1a3c4:	eor	r1, r2, r3
   1a3c8:	tst	r1, #1
   1a3cc:	andne	r0, r2, #1
   1a3d0:	andne	r3, r3, #1
   1a3d4:	subne	r0, r3, r0
   1a3d8:	lsleq	r2, r2, #30
   1a3dc:	lsreq	r0, r3, #1
   1a3e0:	andeq	r0, r0, #1
   1a3e4:	rsbeq	r0, r0, r2, lsr #31
   1a3e8:	bx	lr
   1a3ec:	mov	r0, #1
   1a3f0:	bx	lr
   1a3f4:	mvn	r0, #0
   1a3f8:	bx	lr
   1a3fc:	push	{r4, lr}
   1a400:	mov	r2, #216	; 0xd8
   1a404:	mov	r1, #0
   1a408:	bl	11288 <memset@plt>
   1a40c:	pop	{r4, pc}
   1a410:	ldr	r1, [r0]
   1a414:	cmp	r1, #0
   1a418:	bxeq	lr
   1a41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a420:	mov	r6, r0
   1a424:	ldr	r3, [pc, #872]	; 1a794 <bfd_arch_bits_per_address@plt+0x93e0>
   1a428:	mov	r2, #216	; 0xd8
   1a42c:	sub	sp, sp, #28
   1a430:	ldr	r0, [r0, #4]
   1a434:	bl	11354 <qsort@plt>
   1a438:	ldr	r5, [r6, #4]
   1a43c:	ldr	r3, [r6, #8]
   1a440:	ldr	fp, [pc, #848]	; 1a798 <bfd_arch_bits_per_address@plt+0x93e4>
   1a444:	ldr	r2, [r5]
   1a448:	cmp	r5, r3
   1a44c:	add	r8, r2, #1
   1a450:	bcs	1a784 <bfd_arch_bits_per_address@plt+0x93d0>
   1a454:	ldr	r7, [fp]
   1a458:	ldr	sl, [pc, #828]	; 1a79c <bfd_arch_bits_per_address@plt+0x93e8>
   1a45c:	mov	r4, r5
   1a460:	and	r7, r7, #4224	; 0x1080
   1a464:	b	1a4c0 <bfd_arch_bits_per_address@plt+0x910c>
   1a468:	ldr	r1, [r6, #4]
   1a46c:	cmp	r1, r5
   1a470:	bcs	1a484 <bfd_arch_bits_per_address@plt+0x90d0>
   1a474:	ldr	r1, [r5, #-212]	; 0xffffff2c
   1a478:	cmp	r1, #0
   1a47c:	subeq	r1, r2, #1
   1a480:	streq	r1, [r5, #-212]	; 0xffffff2c
   1a484:	ldr	r1, [r4, #4]
   1a488:	cmp	r1, #0
   1a48c:	cmpne	r1, r2
   1a490:	bcc	1a4b0 <bfd_arch_bits_per_address@plt+0x90fc>
   1a494:	mov	r0, r5
   1a498:	mov	r2, #216	; 0xd8
   1a49c:	mov	r1, r4
   1a4a0:	bl	110e4 <memcpy@plt>
   1a4a4:	ldr	r8, [r4]
   1a4a8:	ldr	r3, [r6, #8]
   1a4ac:	add	r5, r5, #216	; 0xd8
   1a4b0:	add	r4, r4, #216	; 0xd8
   1a4b4:	cmp	r3, r4
   1a4b8:	bls	1a50c <bfd_arch_bits_per_address@plt+0x9158>
   1a4bc:	ldr	r2, [r4]
   1a4c0:	cmp	r8, r2
   1a4c4:	mov	r9, r7
   1a4c8:	bne	1a468 <bfd_arch_bits_per_address@plt+0x90b4>
   1a4cc:	ldrb	r0, [r4, #20]
   1a4d0:	ldrb	ip, [r5, #-196]	; 0xffffff3c
   1a4d4:	ands	r1, r0, #2
   1a4d8:	bne	1a55c <bfd_arch_bits_per_address@plt+0x91a8>
   1a4dc:	tst	ip, #2
   1a4e0:	beq	1a55c <bfd_arch_bits_per_address@plt+0x91a8>
   1a4e4:	cmp	r7, #0
   1a4e8:	bne	1a764 <bfd_arch_bits_per_address@plt+0x93b0>
   1a4ec:	mov	r1, r4
   1a4f0:	mov	r2, #216	; 0xd8
   1a4f4:	sub	r0, r5, #216	; 0xd8
   1a4f8:	bl	110e4 <memcpy@plt>
   1a4fc:	ldr	r3, [r6, #8]
   1a500:	add	r4, r4, #216	; 0xd8
   1a504:	cmp	r3, r4
   1a508:	bhi	1a4bc <bfd_arch_bits_per_address@plt+0x9108>
   1a50c:	ldr	r3, [r6, #4]
   1a510:	sub	r3, r5, r3
   1a514:	asr	r3, r3, #3
   1a518:	add	r2, r3, r3, lsl #3
   1a51c:	add	r3, r3, r2, lsl #1
   1a520:	rsb	r3, r3, r3, lsl #9
   1a524:	add	r3, r3, r3, lsl #18
   1a528:	rsb	r3, r3, #0
   1a52c:	ldr	r1, [r6]
   1a530:	cmp	r1, #0
   1a534:	beq	1a544 <bfd_arch_bits_per_address@plt+0x9190>
   1a538:	ldr	r2, [r5, #-212]	; 0xffffff2c
   1a53c:	cmp	r2, #0
   1a540:	beq	1a720 <bfd_arch_bits_per_address@plt+0x936c>
   1a544:	cmp	r9, #0
   1a548:	streq	r5, [r6, #8]
   1a54c:	streq	r3, [r6]
   1a550:	bne	1a694 <bfd_arch_bits_per_address@plt+0x92e0>
   1a554:	add	sp, sp, #28
   1a558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a55c:	eor	r2, r0, ip
   1a560:	tst	r2, #2
   1a564:	bne	1a624 <bfd_arch_bits_per_address@plt+0x9270>
   1a568:	ands	lr, r0, #1
   1a56c:	beq	1a5e8 <bfd_arch_bits_per_address@plt+0x9234>
   1a570:	tst	ip, #1
   1a574:	bne	1a5e8 <bfd_arch_bits_per_address@plt+0x9234>
   1a578:	cmp	r7, #0
   1a57c:	beq	1a4ec <bfd_arch_bits_per_address@plt+0x9138>
   1a580:	cmp	r1, #0
   1a584:	movne	r2, #116	; 0x74
   1a588:	moveq	r2, #84	; 0x54
   1a58c:	cmp	lr, #0
   1a590:	moveq	r3, #102	; 0x66
   1a594:	movne	r3, #70	; 0x46
   1a598:	ldr	r1, [r4, #8]
   1a59c:	tst	ip, #2
   1a5a0:	ldr	lr, [r5, #-208]	; 0xffffff30
   1a5a4:	moveq	r0, #84	; 0x54
   1a5a8:	movne	r0, #116	; 0x74
   1a5ac:	tst	ip, #1
   1a5b0:	movne	ip, #70	; 0x46
   1a5b4:	moveq	ip, #102	; 0x66
   1a5b8:	str	r0, [sp, #4]
   1a5bc:	str	lr, [sp]
   1a5c0:	str	ip, [sp, #8]
   1a5c4:	ldr	r0, [pc, #468]	; 1a7a0 <bfd_arch_bits_per_address@plt+0x93ec>
   1a5c8:	bl	11090 <printf@plt>
   1a5cc:	ldr	r1, [r4]
   1a5d0:	mov	r0, sl
   1a5d4:	bl	11090 <printf@plt>
   1a5d8:	ldr	r7, [fp]
   1a5dc:	and	r7, r7, #4224	; 0x1080
   1a5e0:	mov	r9, r7
   1a5e4:	b	1a4ec <bfd_arch_bits_per_address@plt+0x9138>
   1a5e8:	tst	r2, #1
   1a5ec:	bne	1a624 <bfd_arch_bits_per_address@plt+0x9270>
   1a5f0:	ldr	r2, [r4, #8]
   1a5f4:	str	r2, [sp, #20]
   1a5f8:	ldrb	r2, [r2]
   1a5fc:	cmp	r2, #95	; 0x5f
   1a600:	str	r2, [sp, #16]
   1a604:	beq	1a740 <bfd_arch_bits_per_address@plt+0x938c>
   1a608:	ldr	r2, [r5, #-208]	; 0xffffff30
   1a60c:	ldrb	r2, [r2]
   1a610:	cmp	r2, #95	; 0x5f
   1a614:	beq	1a578 <bfd_arch_bits_per_address@plt+0x91c4>
   1a618:	ldr	r2, [sp, #16]
   1a61c:	cmp	r2, #0
   1a620:	bne	1a740 <bfd_arch_bits_per_address@plt+0x938c>
   1a624:	cmp	r7, #0
   1a628:	beq	1a4b0 <bfd_arch_bits_per_address@plt+0x90fc>
   1a62c:	tst	ip, #2
   1a630:	movne	r2, #116	; 0x74
   1a634:	moveq	r2, #84	; 0x54
   1a638:	tst	ip, #1
   1a63c:	movne	r3, #70	; 0x46
   1a640:	moveq	r3, #102	; 0x66
   1a644:	ldr	ip, [r4, #8]
   1a648:	cmp	r1, #0
   1a64c:	movne	lr, #116	; 0x74
   1a650:	moveq	lr, #84	; 0x54
   1a654:	tst	r0, #1
   1a658:	movne	r0, #70	; 0x46
   1a65c:	moveq	r0, #102	; 0x66
   1a660:	ldr	r1, [r5, #-208]	; 0xffffff30
   1a664:	stm	sp, {ip, lr}
   1a668:	str	r0, [sp, #8]
   1a66c:	ldr	r0, [pc, #300]	; 1a7a0 <bfd_arch_bits_per_address@plt+0x93ec>
   1a670:	bl	11090 <printf@plt>
   1a674:	ldr	r1, [r4]
   1a678:	mov	r0, sl
   1a67c:	bl	11090 <printf@plt>
   1a680:	ldr	r7, [fp]
   1a684:	ldr	r3, [r6, #8]
   1a688:	and	r7, r7, #4224	; 0x1080
   1a68c:	mov	r9, r7
   1a690:	b	1a4b0 <bfd_arch_bits_per_address@plt+0x90fc>
   1a694:	sub	r1, r1, r3
   1a698:	ldr	r0, [pc, #260]	; 1a7a4 <bfd_arch_bits_per_address@plt+0x93f0>
   1a69c:	bl	11090 <printf@plt>
   1a6a0:	ldr	r2, [r6, #4]
   1a6a4:	ldr	r1, [fp]
   1a6a8:	sub	r3, r5, r2
   1a6ac:	tst	r1, #4224	; 0x1080
   1a6b0:	asr	r3, r3, #3
   1a6b4:	str	r5, [r6, #8]
   1a6b8:	add	r1, r3, r3, lsl #3
   1a6bc:	add	r3, r3, r1, lsl #1
   1a6c0:	rsb	r3, r3, r3, lsl #9
   1a6c4:	add	r3, r3, r3, lsl #18
   1a6c8:	rsb	r3, r3, #0
   1a6cc:	str	r3, [r6]
   1a6d0:	beq	1a554 <bfd_arch_bits_per_address@plt+0x91a0>
   1a6d4:	cmp	r3, #0
   1a6d8:	beq	1a554 <bfd_arch_bits_per_address@plt+0x91a0>
   1a6dc:	ldr	r5, [pc, #196]	; 1a7a8 <bfd_arch_bits_per_address@plt+0x93f4>
   1a6e0:	mov	r4, #0
   1a6e4:	b	1a6ec <bfd_arch_bits_per_address@plt+0x9338>
   1a6e8:	ldr	r2, [r6, #4]
   1a6ec:	add	r3, r4, r4, lsl #1
   1a6f0:	mov	r0, r5
   1a6f4:	add	r3, r3, r3, lsl #3
   1a6f8:	add	r4, r4, #1
   1a6fc:	add	ip, r2, r3, lsl #3
   1a700:	ldr	r1, [r2, r3, lsl #3]
   1a704:	ldrd	r2, [ip, #4]
   1a708:	bl	11090 <printf@plt>
   1a70c:	ldr	r3, [r6]
   1a710:	cmp	r3, r4
   1a714:	bhi	1a6e8 <bfd_arch_bits_per_address@plt+0x9334>
   1a718:	add	sp, sp, #28
   1a71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a720:	ldr	r2, [pc, #132]	; 1a7ac <bfd_arch_bits_per_address@plt+0x93f8>
   1a724:	ldr	r0, [r2]
   1a728:	ldr	r2, [r0, #28]
   1a72c:	ldr	r0, [r0, #36]	; 0x24
   1a730:	add	r2, r2, r0
   1a734:	sub	r2, r2, #1
   1a738:	str	r2, [r5, #-212]	; 0xffffff2c
   1a73c:	b	1a544 <bfd_arch_bits_per_address@plt+0x9190>
   1a740:	ldr	r2, [sp, #20]
   1a744:	ldrb	r2, [r2, #1]
   1a748:	cmp	r2, #95	; 0x5f
   1a74c:	beq	1a624 <bfd_arch_bits_per_address@plt+0x9270>
   1a750:	ldr	r2, [r5, #-208]	; 0xffffff30
   1a754:	ldrb	r2, [r2, #1]
   1a758:	cmp	r2, #95	; 0x5f
   1a75c:	bne	1a624 <bfd_arch_bits_per_address@plt+0x9270>
   1a760:	b	1a578 <bfd_arch_bits_per_address@plt+0x91c4>
   1a764:	tst	r0, #1
   1a768:	moveq	r3, #102	; 0x66
   1a76c:	movne	r3, #70	; 0x46
   1a770:	ldr	r1, [r4, #8]
   1a774:	ldr	lr, [r5, #-208]	; 0xffffff30
   1a778:	mov	r2, #84	; 0x54
   1a77c:	mov	r0, #116	; 0x74
   1a780:	b	1a5ac <bfd_arch_bits_per_address@plt+0x91f8>
   1a784:	ldr	r9, [fp]
   1a788:	mov	r3, #0
   1a78c:	and	r9, r9, #4224	; 0x1080
   1a790:	b	1a52c <bfd_arch_bits_per_address@plt+0x9178>
   1a794:	andeq	sl, r1, r8, lsr #7
   1a798:	andeq	r5, r3, r0, lsr #2
   1a79c:	andeq	r0, r2, r4, ror r5
   1a7a0:	andeq	r0, r2, r4, asr #10
   1a7a4:	andeq	r0, r2, r4, lsl #11
   1a7a8:			; <UNDEFINED> instruction: 0x000205b8
   1a7ac:	andeq	r5, r3, r0, lsr r4
   1a7b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7b4:	sub	sp, sp, #20
   1a7b8:	ldr	fp, [pc, #208]	; 1a890 <bfd_arch_bits_per_address@plt+0x94dc>
   1a7bc:	mov	r4, r0
   1a7c0:	mov	r2, r1
   1a7c4:	str	r1, [sp, #12]
   1a7c8:	ldr	r0, [fp]
   1a7cc:	ldr	r1, [pc, #192]	; 1a894 <bfd_arch_bits_per_address@plt+0x94e0>
   1a7d0:	bl	11270 <fprintf@plt>
   1a7d4:	ldr	r8, [r4]
   1a7d8:	ldr	r6, [r4, #4]
   1a7dc:	subs	r8, r8, #1
   1a7e0:	beq	1a86c <bfd_arch_bits_per_address@plt+0x94b8>
   1a7e4:	mov	r9, #0
   1a7e8:	b	1a804 <bfd_arch_bits_per_address@plt+0x9450>
   1a7ec:	ldr	r3, [r6, sl]
   1a7f0:	mov	r9, r2
   1a7f4:	cmp	r3, r1
   1a7f8:	bhi	1a884 <bfd_arch_bits_per_address@plt+0x94d0>
   1a7fc:	cmp	r8, r9
   1a800:	beq	1a86c <bfd_arch_bits_per_address@plt+0x94b8>
   1a804:	add	r4, r8, r9
   1a808:	mov	r2, r9
   1a80c:	lsr	r4, r4, #1
   1a810:	mov	r3, r4
   1a814:	add	r5, r4, r4, lsl #1
   1a818:	ldr	r1, [pc, #120]	; 1a898 <bfd_arch_bits_per_address@plt+0x94e4>
   1a81c:	add	r5, r5, r5, lsl #3
   1a820:	str	r8, [sp]
   1a824:	lsl	r7, r5, #3
   1a828:	add	sl, r7, #216	; 0xd8
   1a82c:	ldr	r0, [fp]
   1a830:	bl	11270 <fprintf@plt>
   1a834:	ldr	r1, [pc, #96]	; 1a89c <bfd_arch_bits_per_address@plt+0x94e8>
   1a838:	ldr	r2, [r6, r5, lsl #3]
   1a83c:	ldr	r3, [r6, sl]
   1a840:	ldr	r0, [fp]
   1a844:	bl	11270 <fprintf@plt>
   1a848:	ldr	r3, [r6, r5, lsl #3]
   1a84c:	ldr	r1, [sp, #12]
   1a850:	add	r7, r6, r7
   1a854:	cmp	r3, r1
   1a858:	add	r2, r4, #1
   1a85c:	bls	1a7ec <bfd_arch_bits_per_address@plt+0x9438>
   1a860:	mov	r8, r4
   1a864:	cmp	r8, r9
   1a868:	bne	1a804 <bfd_arch_bits_per_address@plt+0x9450>
   1a86c:	ldr	r3, [fp]
   1a870:	mov	r2, #40	; 0x28
   1a874:	mov	r1, #1
   1a878:	ldr	r0, [pc, #32]	; 1a8a0 <bfd_arch_bits_per_address@plt+0x94ec>
   1a87c:	bl	11174 <fwrite@plt>
   1a880:	mov	r7, #0
   1a884:	mov	r0, r7
   1a888:	add	sp, sp, #20
   1a88c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a890:			; <UNDEFINED> instruction: 0x000344b8
   1a894:	ldrdeq	r0, [r2], -ip
   1a898:	strdeq	r0, [r2], -ip
   1a89c:	andeq	r0, r2, r0, lsr r6
   1a8a0:	andeq	r0, r2, r0, ror #12
   1a8a4:	ldr	r3, [r0]
   1a8a8:	push	{r4, r5, r6, r7, r8, lr}
   1a8ac:	cmp	r3, #0
   1a8b0:	beq	1a984 <bfd_arch_bits_per_address@plt+0x95d0>
   1a8b4:	sub	r2, r3, #1
   1a8b8:	cmp	r2, #0
   1a8bc:	ldr	ip, [r0, #4]
   1a8c0:	mov	r5, r2
   1a8c4:	beq	1a9a8 <bfd_arch_bits_per_address@plt+0x95f4>
   1a8c8:	ldr	r3, [pc, #228]	; 1a9b4 <bfd_arch_bits_per_address@plt+0x9600>
   1a8cc:	mov	lr, #0
   1a8d0:	mov	r6, lr
   1a8d4:	ldr	r7, [r3]
   1a8d8:	and	r7, r7, #512	; 0x200
   1a8dc:	b	1a8f8 <bfd_arch_bits_per_address@plt+0x9544>
   1a8e0:	ldr	r0, [r4, #216]	; 0xd8
   1a8e4:	add	r6, r3, #1
   1a8e8:	cmp	r0, r1
   1a8ec:	bhi	1a978 <bfd_arch_bits_per_address@plt+0x95c4>
   1a8f0:	cmp	r6, r5
   1a8f4:	beq	1a930 <bfd_arch_bits_per_address@plt+0x957c>
   1a8f8:	add	r3, r6, r5
   1a8fc:	cmp	r7, #0
   1a900:	add	r3, r3, r3, lsr #31
   1a904:	addne	lr, lr, #1
   1a908:	asr	r3, r3, #1
   1a90c:	add	r0, r3, r3, lsl #1
   1a910:	add	r0, r0, r0, lsl #3
   1a914:	ldr	r8, [ip, r0, lsl #3]
   1a918:	add	r4, ip, r0, lsl #3
   1a91c:	cmp	r8, r1
   1a920:	bls	1a8e0 <bfd_arch_bits_per_address@plt+0x952c>
   1a924:	mov	r5, r3
   1a928:	cmp	r6, r5
   1a92c:	bne	1a8f8 <bfd_arch_bits_per_address@plt+0x9544>
   1a930:	add	r3, r3, #1
   1a934:	add	r3, r3, r3, lsl #1
   1a938:	add	r3, r3, r3, lsl #3
   1a93c:	add	r4, ip, r3, lsl #3
   1a940:	ldr	r3, [r4]
   1a944:	cmp	r3, r1
   1a948:	bhi	1a984 <bfd_arch_bits_per_address@plt+0x95d0>
   1a94c:	ldr	r3, [r4, #4]
   1a950:	cmp	r3, r1
   1a954:	bcc	1a984 <bfd_arch_bits_per_address@plt+0x95d0>
   1a958:	ldr	r3, [pc, #84]	; 1a9b4 <bfd_arch_bits_per_address@plt+0x9600>
   1a95c:	ldr	r3, [r3]
   1a960:	tst	r3, #512	; 0x200
   1a964:	beq	1a988 <bfd_arch_bits_per_address@plt+0x95d4>
   1a968:	mov	r1, lr
   1a96c:	ldr	r0, [pc, #68]	; 1a9b8 <bfd_arch_bits_per_address@plt+0x9604>
   1a970:	bl	11090 <printf@plt>
   1a974:	b	1a988 <bfd_arch_bits_per_address@plt+0x95d4>
   1a978:	ldr	r3, [r4, #4]
   1a97c:	cmp	r3, r1
   1a980:	bcs	1a990 <bfd_arch_bits_per_address@plt+0x95dc>
   1a984:	mov	r4, #0
   1a988:	mov	r0, r4
   1a98c:	pop	{r4, r5, r6, r7, r8, pc}
   1a990:	cmp	r7, #0
   1a994:	beq	1a988 <bfd_arch_bits_per_address@plt+0x95d4>
   1a998:	mov	r1, lr
   1a99c:	ldr	r0, [pc, #24]	; 1a9bc <bfd_arch_bits_per_address@plt+0x9608>
   1a9a0:	bl	11090 <printf@plt>
   1a9a4:	b	1a988 <bfd_arch_bits_per_address@plt+0x95d4>
   1a9a8:	mov	r4, ip
   1a9ac:	mov	lr, r2
   1a9b0:	b	1a940 <bfd_arch_bits_per_address@plt+0x958c>
   1a9b4:	andeq	r5, r3, r0, lsr #2
   1a9b8:			; <UNDEFINED> instruction: 0x000206b8
   1a9bc:	andeq	r0, r2, ip, lsl #13
   1a9c0:	push	{r4, r5, r6, lr}
   1a9c4:	mov	r5, r0
   1a9c8:	mov	r0, r1
   1a9cc:	mov	r6, r1
   1a9d0:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   1a9d4:	mov	r0, r5
   1a9d8:	mov	r1, #58	; 0x3a
   1a9dc:	bl	112e8 <strrchr@plt>
   1a9e0:	subs	r4, r0, #0
   1a9e4:	beq	1aa40 <bfd_arch_bits_per_address@plt+0x968c>
   1a9e8:	mov	r3, #0
   1a9ec:	cmp	r5, r4
   1a9f0:	strb	r3, [r4]
   1a9f4:	bcc	1aa24 <bfd_arch_bits_per_address@plt+0x9670>
   1a9f8:	ldrb	r3, [r4, #1]
   1a9fc:	cmp	r3, #0
   1aa00:	popeq	{r4, r5, r6, pc}
   1aa04:	ldr	r2, [pc, #180]	; 1aac0 <bfd_arch_bits_per_address@plt+0x970c>
   1aa08:	lsl	r3, r3, #1
   1aa0c:	add	r0, r4, #1
   1aa10:	ldrh	r3, [r2, r3]
   1aa14:	tst	r3, #4
   1aa18:	bne	1aa7c <bfd_arch_bits_per_address@plt+0x96c8>
   1aa1c:	str	r0, [r6, #8]
   1aa20:	pop	{r4, r5, r6, pc}
   1aa24:	mov	r0, r5
   1aa28:	bl	19f58 <bfd_arch_bits_per_address@plt+0x8ba4>
   1aa2c:	cmp	r0, #0
   1aa30:	strne	r0, [r6, #12]
   1aa34:	ldreq	r3, [pc, #136]	; 1aac4 <bfd_arch_bits_per_address@plt+0x9710>
   1aa38:	streq	r3, [r6, #12]
   1aa3c:	b	1a9f8 <bfd_arch_bits_per_address@plt+0x9644>
   1aa40:	ldrb	r4, [r5]
   1aa44:	cmp	r4, #0
   1aa48:	popeq	{r4, r5, r6, pc}
   1aa4c:	mov	r1, #46	; 0x2e
   1aa50:	mov	r0, r5
   1aa54:	bl	11258 <strchr@plt>
   1aa58:	subs	r1, r0, #0
   1aa5c:	beq	1aa90 <bfd_arch_bits_per_address@plt+0x96dc>
   1aa60:	mov	r0, r5
   1aa64:	bl	19f58 <bfd_arch_bits_per_address@plt+0x8ba4>
   1aa68:	cmp	r0, #0
   1aa6c:	strne	r0, [r6, #12]
   1aa70:	ldreq	r3, [pc, #76]	; 1aac4 <bfd_arch_bits_per_address@plt+0x9710>
   1aa74:	streq	r3, [r6, #12]
   1aa78:	pop	{r4, r5, r6, pc}
   1aa7c:	mov	r2, #10
   1aa80:	mov	r1, #0
   1aa84:	bl	11084 <strtol@plt>
   1aa88:	str	r0, [r6, #16]
   1aa8c:	pop	{r4, r5, r6, pc}
   1aa90:	ldr	r3, [pc, #40]	; 1aac0 <bfd_arch_bits_per_address@plt+0x970c>
   1aa94:	lsl	r4, r4, #1
   1aa98:	ldrh	r3, [r3, r4]
   1aa9c:	tst	r3, #4
   1aaa0:	bne	1aaac <bfd_arch_bits_per_address@plt+0x96f8>
   1aaa4:	str	r5, [r6, #8]
   1aaa8:	pop	{r4, r5, r6, pc}
   1aaac:	mov	r0, r5
   1aab0:	mov	r2, #10
   1aab4:	bl	11084 <strtol@plt>
   1aab8:	str	r0, [r6, #16]
   1aabc:	pop	{r4, r5, r6, pc}
   1aac0:	strdeq	r3, [r3], -r8
   1aac4:	muleq	r3, r4, r4
   1aac8:	ldr	r3, [r0, #12]
   1aacc:	cmp	r3, #0
   1aad0:	beq	1aae8 <bfd_arch_bits_per_address@plt+0x9734>
   1aad4:	ldr	r2, [r1, #12]
   1aad8:	cmp	r3, r2
   1aadc:	beq	1aae8 <bfd_arch_bits_per_address@plt+0x9734>
   1aae0:	mov	r0, #0
   1aae4:	bx	lr
   1aae8:	ldr	r3, [r0, #16]
   1aaec:	cmp	r3, #0
   1aaf0:	bne	1ab3c <bfd_arch_bits_per_address@plt+0x9788>
   1aaf4:	ldr	r0, [r0, #8]
   1aaf8:	cmp	r0, #0
   1aafc:	beq	1ab50 <bfd_arch_bits_per_address@plt+0x979c>
   1ab00:	ldr	r1, [r1, #8]
   1ab04:	push	{r4, lr}
   1ab08:	ldrb	r3, [r1]
   1ab0c:	cmp	r3, #0
   1ab10:	beq	1ab2c <bfd_arch_bits_per_address@plt+0x9778>
   1ab14:	ldr	r2, [pc, #60]	; 1ab58 <bfd_arch_bits_per_address@plt+0x97a4>
   1ab18:	ldr	r2, [r2]
   1ab1c:	ldr	r2, [r2, #4]
   1ab20:	ldrb	r2, [r2, #24]
   1ab24:	cmp	r2, r3
   1ab28:	addeq	r1, r1, #1
   1ab2c:	bl	11078 <strcmp@plt>
   1ab30:	clz	r0, r0
   1ab34:	lsr	r0, r0, #5
   1ab38:	pop	{r4, pc}
   1ab3c:	ldr	r2, [r1, #16]
   1ab40:	cmp	r3, r2
   1ab44:	beq	1aaf4 <bfd_arch_bits_per_address@plt+0x9740>
   1ab48:	mov	r0, #0
   1ab4c:	bx	lr
   1ab50:	mov	r0, #1
   1ab54:	bx	lr
   1ab58:	andeq	r5, r3, r0, lsr #8
   1ab5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab60:	mov	r5, r0
   1ab64:	ldr	r0, [r0, #4]
   1ab68:	mov	r8, r3
   1ab6c:	sub	r3, r1, #216	; 0xd8
   1ab70:	cmp	r0, r3
   1ab74:	mov	r6, r1
   1ab78:	ldr	r0, [r8]
   1ab7c:	beq	1abc0 <bfd_arch_bits_per_address@plt+0x980c>
   1ab80:	ldr	r9, [r2]
   1ab84:	mov	r7, r2
   1ab88:	mov	r2, #216	; 0xd8
   1ab8c:	add	r4, r9, r9, lsl #1
   1ab90:	add	r4, r4, r4, lsl #3
   1ab94:	add	r4, r0, r4, lsl #3
   1ab98:	mov	r0, r4
   1ab9c:	bl	110e4 <memcpy@plt>
   1aba0:	str	r9, [r5]
   1aba4:	ldr	r2, [r7]
   1aba8:	ldr	r3, [r5, #8]
   1abac:	add	r2, r2, #1
   1abb0:	str	r3, [r4, #112]	; 0x70
   1abb4:	str	r4, [r5, #8]
   1abb8:	ldr	r0, [r8]
   1abbc:	str	r2, [r7]
   1abc0:	ldr	r3, [r5]
   1abc4:	ldr	r2, [r6, #4]
   1abc8:	add	r3, r3, r3, lsl #1
   1abcc:	add	r3, r3, r3, lsl #3
   1abd0:	add	r3, r0, r3, lsl #3
   1abd4:	str	r2, [r3, #4]
   1abd8:	str	r6, [r5, #4]
   1abdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1abe0:	push	{r4, r5, r6, lr}
   1abe4:	mov	r5, r1
   1abe8:	mov	r6, r0
   1abec:	bl	1124c <strlen@plt>
   1abf0:	add	r0, r0, #480	; 0x1e0
   1abf4:	add	r0, r0, #1
   1abf8:	bl	11180 <xmalloc@plt>
   1abfc:	mov	r2, #480	; 0x1e0
   1ac00:	mov	r1, #0
   1ac04:	mov	r4, r0
   1ac08:	bl	11288 <memset@plt>
   1ac0c:	add	r3, r4, #480	; 0x1e0
   1ac10:	mov	r0, r3
   1ac14:	mov	r1, r6
   1ac18:	str	r3, [r4, #4]
   1ac1c:	bl	111a4 <strcpy@plt>
   1ac20:	ldr	r3, [pc, #16]	; 1ac38 <bfd_arch_bits_per_address@plt+0x9884>
   1ac24:	str	r5, [r4, #8]
   1ac28:	ldr	r2, [r3]
   1ac2c:	str	r4, [r3]
   1ac30:	str	r2, [r4]
   1ac34:	pop	{r4, r5, r6, pc}
   1ac38:	andeq	r5, r3, r8, ror #2
   1ac3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac40:	sub	sp, sp, #36	; 0x24
   1ac44:	ldr	r5, [pc, #1248]	; 1b12c <bfd_arch_bits_per_address@plt+0x9d78>
   1ac48:	ldr	r7, [pc, #1248]	; 1b130 <bfd_arch_bits_per_address@plt+0x9d7c>
   1ac4c:	ldr	r4, [r5]
   1ac50:	cmp	r4, #0
   1ac54:	beq	1ad68 <bfd_arch_bits_per_address@plt+0x99b4>
   1ac58:	ldr	r9, [pc, #1236]	; 1b134 <bfd_arch_bits_per_address@plt+0x9d80>
   1ac5c:	ldr	r6, [pc, #1236]	; 1b138 <bfd_arch_bits_per_address@plt+0x9d84>
   1ac60:	ldr	r8, [pc, #1236]	; 1b13c <bfd_arch_bits_per_address@plt+0x9d88>
   1ac64:	b	1ad2c <bfd_arch_bits_per_address@plt+0x9978>
   1ac68:	mov	r1, #47	; 0x2f
   1ac6c:	mov	r0, sl
   1ac70:	bl	11258 <strchr@plt>
   1ac74:	subs	fp, r0, #0
   1ac78:	beq	1ac9c <bfd_arch_bits_per_address@plt+0x98e8>
   1ac7c:	add	r1, r4, #264	; 0x108
   1ac80:	add	r0, fp, #1
   1ac84:	bl	1a9c0 <bfd_arch_bits_per_address@plt+0x960c>
   1ac88:	mov	r3, #0
   1ac8c:	strb	r3, [fp]
   1ac90:	ldr	sl, [r4, #4]
   1ac94:	mov	r3, #1
   1ac98:	str	r3, [r4, #12]
   1ac9c:	mov	r0, sl
   1aca0:	add	r1, r4, #32
   1aca4:	bl	1a9c0 <bfd_arch_bits_per_address@plt+0x960c>
   1aca8:	ldr	r3, [r7]
   1acac:	tst	r3, #4096	; 0x1000
   1acb0:	beq	1ad20 <bfd_arch_bits_per_address@plt+0x996c>
   1acb4:	ldr	r3, [r4, #44]	; 0x2c
   1acb8:	mov	r0, r6
   1acbc:	cmp	r3, #0
   1acc0:	ldrne	r1, [r3, #4]
   1acc4:	ldreq	r1, [pc, #1140]	; 1b140 <bfd_arch_bits_per_address@plt+0x9d8c>
   1acc8:	bl	11090 <printf@plt>
   1accc:	ldr	r1, [r4, #40]	; 0x28
   1acd0:	cmp	r1, #0
   1acd4:	beq	1ad50 <bfd_arch_bits_per_address@plt+0x999c>
   1acd8:	mov	r0, r8
   1acdc:	bl	11090 <printf@plt>
   1ace0:	ldr	r3, [r4, #12]
   1ace4:	cmp	r3, #0
   1ace8:	beq	1ad18 <bfd_arch_bits_per_address@plt+0x9964>
   1acec:	ldr	r3, [r4, #276]	; 0x114
   1acf0:	ldr	r0, [pc, #1100]	; 1b144 <bfd_arch_bits_per_address@plt+0x9d90>
   1acf4:	cmp	r3, #0
   1acf8:	ldrne	r1, [r3, #4]
   1acfc:	ldreq	r1, [pc, #1084]	; 1b140 <bfd_arch_bits_per_address@plt+0x9d8c>
   1ad00:	bl	11090 <printf@plt>
   1ad04:	ldr	r1, [r4, #272]	; 0x110
   1ad08:	cmp	r1, #0
   1ad0c:	beq	1b0c8 <bfd_arch_bits_per_address@plt+0x9d14>
   1ad10:	mov	r0, r8
   1ad14:	bl	11090 <printf@plt>
   1ad18:	mov	r0, #10
   1ad1c:	bl	11294 <putchar@plt>
   1ad20:	ldr	r4, [r4]
   1ad24:	cmp	r4, #0
   1ad28:	beq	1ad68 <bfd_arch_bits_per_address@plt+0x99b4>
   1ad2c:	ldr	r3, [r7]
   1ad30:	ldr	sl, [r4, #4]
   1ad34:	tst	r3, #4096	; 0x1000
   1ad38:	beq	1ac68 <bfd_arch_bits_per_address@plt+0x98b4>
   1ad3c:	mov	r1, sl
   1ad40:	mov	r0, r9
   1ad44:	bl	11090 <printf@plt>
   1ad48:	ldr	sl, [r4, #4]
   1ad4c:	b	1ac68 <bfd_arch_bits_per_address@plt+0x98b4>
   1ad50:	ldr	r1, [r4, #48]	; 0x30
   1ad54:	cmp	r1, #0
   1ad58:	beq	1b0e0 <bfd_arch_bits_per_address@plt+0x9d2c>
   1ad5c:	ldr	r0, [pc, #996]	; 1b148 <bfd_arch_bits_per_address@plt+0x9d94>
   1ad60:	bl	11090 <printf@plt>
   1ad64:	b	1ace0 <bfd_arch_bits_per_address@plt+0x992c>
   1ad68:	ldr	r9, [pc, #988]	; 1b14c <bfd_arch_bits_per_address@plt+0x9d98>
   1ad6c:	ldr	fp, [r9, #4]
   1ad70:	ldr	sl, [r9, #8]
   1ad74:	cmp	fp, sl
   1ad78:	ldrcs	r3, [pc, #976]	; 1b150 <bfd_arch_bits_per_address@plt+0x9d9c>
   1ad7c:	strcs	r3, [sp, #24]
   1ad80:	bcs	1ae40 <bfd_arch_bits_per_address@plt+0x9a8c>
   1ad84:	ldr	r8, [r5]
   1ad88:	ldr	r3, [pc, #960]	; 1b150 <bfd_arch_bits_per_address@plt+0x9d9c>
   1ad8c:	sub	r6, fp, #216	; 0xd8
   1ad90:	str	r7, [sp, #28]
   1ad94:	mov	r7, fp
   1ad98:	mov	fp, sl
   1ad9c:	mov	sl, r8
   1ada0:	mov	r8, r3
   1ada4:	str	r3, [sp, #24]
   1ada8:	cmp	sl, #0
   1adac:	movne	r4, sl
   1adb0:	beq	1ae2c <bfd_arch_bits_per_address@plt+0x9a78>
   1adb4:	mov	r1, r7
   1adb8:	add	r0, r4, #32
   1adbc:	bl	1aac8 <bfd_arch_bits_per_address@plt+0x9714>
   1adc0:	mov	r1, r7
   1adc4:	cmp	r0, #0
   1adc8:	add	r0, r4, #264	; 0x108
   1adcc:	beq	1adf0 <bfd_arch_bits_per_address@plt+0x9a3c>
   1add0:	ldr	r2, [r4, #20]
   1add4:	cmp	r2, r6
   1add8:	ldrne	r2, [r4, #8]
   1addc:	addne	r2, r2, r2, lsl #1
   1ade0:	ldrne	ip, [r8, r2, lsl #2]
   1ade4:	addne	ip, ip, #1
   1ade8:	strne	ip, [r8, r2, lsl #2]
   1adec:	str	r7, [r4, #20]
   1adf0:	ldr	r2, [r4, #12]
   1adf4:	cmp	r2, #0
   1adf8:	beq	1ae20 <bfd_arch_bits_per_address@plt+0x9a6c>
   1adfc:	bl	1aac8 <bfd_arch_bits_per_address@plt+0x9714>
   1ae00:	cmp	r0, #0
   1ae04:	beq	1ae20 <bfd_arch_bits_per_address@plt+0x9a6c>
   1ae08:	ldr	r2, [r4, #252]	; 0xfc
   1ae0c:	str	r7, [r4, #252]	; 0xfc
   1ae10:	cmp	r2, r6
   1ae14:	ldrne	r2, [r5, #4]
   1ae18:	addne	r2, r2, #1
   1ae1c:	strne	r2, [r5, #4]
   1ae20:	ldr	r4, [r4]
   1ae24:	cmp	r4, #0
   1ae28:	bne	1adb4 <bfd_arch_bits_per_address@plt+0x9a00>
   1ae2c:	add	r7, r7, #216	; 0xd8
   1ae30:	cmp	r7, fp
   1ae34:	add	r6, r6, #216	; 0xd8
   1ae38:	bcc	1ada8 <bfd_arch_bits_per_address@plt+0x99f4>
   1ae3c:	ldr	r7, [sp, #28]
   1ae40:	ldr	r4, [pc, #780]	; 1b154 <bfd_arch_bits_per_address@plt+0x9da0>
   1ae44:	mov	r6, #0
   1ae48:	add	r8, r4, #144	; 0x90
   1ae4c:	b	1ae5c <bfd_arch_bits_per_address@plt+0x9aa8>
   1ae50:	add	r4, r4, #12
   1ae54:	cmp	r8, r4
   1ae58:	beq	1aea0 <bfd_arch_bits_per_address@plt+0x9aec>
   1ae5c:	ldr	r3, [r4, #-12]
   1ae60:	cmp	r3, #0
   1ae64:	beq	1ae50 <bfd_arch_bits_per_address@plt+0x9a9c>
   1ae68:	add	r3, r3, r3, lsl #1
   1ae6c:	add	r4, r4, #12
   1ae70:	add	r3, r3, r3, lsl #3
   1ae74:	lsl	r0, r3, #3
   1ae78:	bl	11180 <xmalloc@plt>
   1ae7c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1ae80:	str	r6, [r4, #-24]	; 0xffffffe8
   1ae84:	add	r3, r3, r3, lsl #1
   1ae88:	add	r3, r3, r3, lsl #3
   1ae8c:	add	r3, r0, r3, lsl #3
   1ae90:	str	r0, [r4, #-20]	; 0xffffffec
   1ae94:	str	r3, [r4, #-16]
   1ae98:	cmp	r8, r4
   1ae9c:	bne	1ae5c <bfd_arch_bits_per_address@plt+0x9aa8>
   1aea0:	ldr	r3, [r5, #4]
   1aea4:	cmp	r3, #0
   1aea8:	bne	1b0f8 <bfd_arch_bits_per_address@plt+0x9d44>
   1aeac:	ldr	r6, [r9, #4]
   1aeb0:	ldr	r3, [r9, #8]
   1aeb4:	ldr	r8, [r5]
   1aeb8:	cmp	r6, r3
   1aebc:	bcs	1af68 <bfd_arch_bits_per_address@plt+0x9bb4>
   1aec0:	ldr	r5, [pc, #656]	; 1b158 <bfd_arch_bits_per_address@plt+0x9da4>
   1aec4:	ldr	sl, [sp, #24]
   1aec8:	cmp	r8, #0
   1aecc:	movne	r4, r8
   1aed0:	bne	1af04 <bfd_arch_bits_per_address@plt+0x9b50>
   1aed4:	b	1af58 <bfd_arch_bits_per_address@plt+0x9ba4>
   1aed8:	ldr	r3, [r4, #12]
   1aedc:	mov	r1, r6
   1aee0:	cmp	r3, #0
   1aee4:	add	r0, r4, #264	; 0x108
   1aee8:	beq	1aef8 <bfd_arch_bits_per_address@plt+0x9b44>
   1aeec:	bl	1aac8 <bfd_arch_bits_per_address@plt+0x9714>
   1aef0:	cmp	r0, #0
   1aef4:	bne	1af38 <bfd_arch_bits_per_address@plt+0x9b84>
   1aef8:	ldr	r4, [r4]
   1aefc:	cmp	r4, #0
   1af00:	beq	1af58 <bfd_arch_bits_per_address@plt+0x9ba4>
   1af04:	mov	r1, r6
   1af08:	add	r0, r4, #32
   1af0c:	bl	1aac8 <bfd_arch_bits_per_address@plt+0x9714>
   1af10:	cmp	r0, #0
   1af14:	beq	1aed8 <bfd_arch_bits_per_address@plt+0x9b24>
   1af18:	ldr	r2, [r4, #8]
   1af1c:	mov	r1, r6
   1af20:	add	r0, r4, #16
   1af24:	add	r2, r2, r2, lsl #1
   1af28:	add	r2, sl, r2, lsl #2
   1af2c:	add	r3, r2, #4
   1af30:	bl	1ab5c <bfd_arch_bits_per_address@plt+0x97a8>
   1af34:	b	1aed8 <bfd_arch_bits_per_address@plt+0x9b24>
   1af38:	add	r0, r4, #248	; 0xf8
   1af3c:	mov	r3, r5
   1af40:	ldr	r2, [pc, #532]	; 1b15c <bfd_arch_bits_per_address@plt+0x9da8>
   1af44:	mov	r1, r6
   1af48:	bl	1ab5c <bfd_arch_bits_per_address@plt+0x97a8>
   1af4c:	ldr	r4, [r4]
   1af50:	cmp	r4, #0
   1af54:	bne	1af04 <bfd_arch_bits_per_address@plt+0x9b50>
   1af58:	ldr	r3, [r9, #8]
   1af5c:	add	r6, r6, #216	; 0xd8
   1af60:	cmp	r3, r6
   1af64:	bhi	1aec8 <bfd_arch_bits_per_address@plt+0x9b14>
   1af68:	cmp	r8, #0
   1af6c:	beq	1b05c <bfd_arch_bits_per_address@plt+0x9ca8>
   1af70:	ldr	r6, [pc, #456]	; 1b140 <bfd_arch_bits_per_address@plt+0x9d8c>
   1af74:	ldr	sl, [pc, #484]	; 1b160 <bfd_arch_bits_per_address@plt+0x9dac>
   1af78:	b	1af88 <bfd_arch_bits_per_address@plt+0x9bd4>
   1af7c:	ldr	r8, [r8]
   1af80:	cmp	r8, #0
   1af84:	beq	1b05c <bfd_arch_bits_per_address@plt+0x9ca8>
   1af88:	ldr	r3, [r8, #12]
   1af8c:	cmp	r3, #0
   1af90:	beq	1af7c <bfd_arch_bits_per_address@plt+0x9bc8>
   1af94:	ldr	r5, [r8, #24]
   1af98:	cmp	r5, #0
   1af9c:	beq	1af7c <bfd_arch_bits_per_address@plt+0x9bc8>
   1afa0:	ldr	r9, [pc, #444]	; 1b164 <bfd_arch_bits_per_address@plt+0x9db0>
   1afa4:	ldr	r4, [r8, #256]	; 0x100
   1afa8:	cmp	r4, #0
   1afac:	beq	1b044 <bfd_arch_bits_per_address@plt+0x9c90>
   1afb0:	ldr	r3, [r7]
   1afb4:	tst	r3, #4096	; 0x1000
   1afb8:	beq	1b028 <bfd_arch_bits_per_address@plt+0x9c74>
   1afbc:	ldr	r3, [r5, #12]
   1afc0:	ldr	r2, [r5, #8]
   1afc4:	ldr	lr, [r8, #8]
   1afc8:	cmp	r3, #0
   1afcc:	ldr	r0, [r4, #12]
   1afd0:	ldrne	r1, [r3, #4]
   1afd4:	moveq	r1, r6
   1afd8:	cmp	r2, #0
   1afdc:	ldr	lr, [sl, lr, lsl #2]
   1afe0:	moveq	r2, r6
   1afe4:	cmp	r0, #0
   1afe8:	ldm	r5, {r3, ip}
   1afec:	ldrne	fp, [r0, #4]
   1aff0:	ldr	r0, [r4, #8]
   1aff4:	str	lr, [sp, #20]
   1aff8:	ldr	lr, [r4, #4]
   1affc:	moveq	fp, r6
   1b000:	str	lr, [sp, #16]
   1b004:	cmp	r0, #0
   1b008:	ldr	lr, [r4]
   1b00c:	moveq	r0, r6
   1b010:	str	r0, [sp, #8]
   1b014:	str	lr, [sp, #12]
   1b018:	str	fp, [sp, #4]
   1b01c:	str	ip, [sp]
   1b020:	mov	r0, r9
   1b024:	bl	11090 <printf@plt>
   1b028:	mov	r1, r4
   1b02c:	mov	r2, #0
   1b030:	mov	r0, r5
   1b034:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1b038:	ldr	r4, [r4, #112]	; 0x70
   1b03c:	cmp	r4, #0
   1b040:	bne	1afb0 <bfd_arch_bits_per_address@plt+0x9bfc>
   1b044:	ldr	r5, [r5, #112]	; 0x70
   1b048:	cmp	r5, #0
   1b04c:	bne	1afa4 <bfd_arch_bits_per_address@plt+0x9bf0>
   1b050:	ldr	r8, [r8]
   1b054:	cmp	r8, #0
   1b058:	bne	1af88 <bfd_arch_bits_per_address@plt+0x9bd4>
   1b05c:	ldr	r4, [pc, #236]	; 1b150 <bfd_arch_bits_per_address@plt+0x9d9c>
   1b060:	ldr	r8, [pc, #248]	; 1b160 <bfd_arch_bits_per_address@plt+0x9dac>
   1b064:	add	r5, r4, #144	; 0x90
   1b068:	ldr	r6, [pc, #248]	; 1b168 <bfd_arch_bits_per_address@plt+0x9db4>
   1b06c:	ldr	r9, [sp, #24]
   1b070:	b	1b088 <bfd_arch_bits_per_address@plt+0x9cd4>
   1b074:	mov	r0, r4
   1b078:	add	r4, r4, #12
   1b07c:	bl	1a410 <bfd_arch_bits_per_address@plt+0x905c>
   1b080:	cmp	r4, r5
   1b084:	beq	1b0c0 <bfd_arch_bits_per_address@plt+0x9d0c>
   1b088:	ldr	r3, [r7]
   1b08c:	tst	r3, #4096	; 0x1000
   1b090:	beq	1b074 <bfd_arch_bits_per_address@plt+0x9cc0>
   1b094:	sub	r2, r4, r9
   1b098:	mov	r0, r6
   1b09c:	asr	r2, r2, #2
   1b0a0:	add	r3, r2, r2, lsl #2
   1b0a4:	add	r3, r3, r3, lsl #4
   1b0a8:	add	r3, r3, r3, lsl #8
   1b0ac:	add	r3, r3, r3, lsl #16
   1b0b0:	add	r3, r2, r3, lsl #1
   1b0b4:	ldr	r1, [r8, r3, lsl #2]
   1b0b8:	bl	11090 <printf@plt>
   1b0bc:	b	1b074 <bfd_arch_bits_per_address@plt+0x9cc0>
   1b0c0:	add	sp, sp, #36	; 0x24
   1b0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0c8:	ldr	r1, [r4, #280]	; 0x118
   1b0cc:	cmp	r1, #0
   1b0d0:	beq	1b0ec <bfd_arch_bits_per_address@plt+0x9d38>
   1b0d4:	ldr	r0, [pc, #108]	; 1b148 <bfd_arch_bits_per_address@plt+0x9d94>
   1b0d8:	bl	11090 <printf@plt>
   1b0dc:	b	1ad18 <bfd_arch_bits_per_address@plt+0x9964>
   1b0e0:	mov	r0, #42	; 0x2a
   1b0e4:	bl	11294 <putchar@plt>
   1b0e8:	b	1ace0 <bfd_arch_bits_per_address@plt+0x992c>
   1b0ec:	mov	r0, #42	; 0x2a
   1b0f0:	bl	11294 <putchar@plt>
   1b0f4:	b	1ad18 <bfd_arch_bits_per_address@plt+0x9964>
   1b0f8:	add	r3, r3, r3, lsl #1
   1b0fc:	add	r3, r3, r3, lsl #3
   1b100:	lsl	r0, r3, #3
   1b104:	bl	11180 <xmalloc@plt>
   1b108:	ldr	r3, [r5, #4]
   1b10c:	mov	r2, #0
   1b110:	str	r2, [r5, #4]
   1b114:	add	r3, r3, r3, lsl #1
   1b118:	add	r3, r3, r3, lsl #3
   1b11c:	add	r3, r0, r3, lsl #3
   1b120:	str	r0, [r5, #8]
   1b124:	str	r3, [r5, #12]
   1b128:	b	1aeac <bfd_arch_bits_per_address@plt+0x9af8>
   1b12c:	andeq	r5, r3, r8, ror #2
   1b130:	andeq	r5, r3, r0, lsr #2
   1b134:	andeq	r0, r2, r4, lsl r7
   1b138:	andeq	r0, r2, r8, lsr #14
   1b13c:	andeq	pc, r1, ip, lsr r1	; <UNPREDICTABLE>
   1b140:	andeq	r0, r2, r0, lsl r7
   1b144:	andeq	r0, r2, r0, lsr r7
   1b148:	andeq	r0, r2, ip, lsr #14
   1b14c:	andeq	r5, r3, r0, asr r4
   1b150:	andeq	r5, r3, ip, asr r4
   1b154:	andeq	r5, r3, r8, ror #8
   1b158:	andeq	r5, r3, r0, ror r1
   1b15c:	andeq	r5, r3, ip, ror #2
   1b160:	andeq	r0, r2, r0, ror #13
   1b164:	andeq	r0, r2, r8, lsr r7
   1b168:	andeq	r0, r2, r4, ror r7
   1b16c:	push	{r4, r5, r6, r7, r8, lr}
   1b170:	mov	r5, r1
   1b174:	ldr	r4, [r0, #4]
   1b178:	ldr	r1, [r0, #8]
   1b17c:	cmp	r4, r1
   1b180:	bcs	1b1dc <bfd_arch_bits_per_address@plt+0x9e28>
   1b184:	mov	r6, r0
   1b188:	mov	r7, r2
   1b18c:	b	1b19c <bfd_arch_bits_per_address@plt+0x9de8>
   1b190:	add	r4, r4, #216	; 0xd8
   1b194:	cmp	r1, r4
   1b198:	bls	1b1dc <bfd_arch_bits_per_address@plt+0x9e28>
   1b19c:	ldr	r3, [r5]
   1b1a0:	ldr	r2, [r4]
   1b1a4:	cmp	r3, r2
   1b1a8:	bcc	1b190 <bfd_arch_bits_per_address@plt+0x9ddc>
   1b1ac:	ldr	r2, [r4, #4]
   1b1b0:	cmp	r3, r2
   1b1b4:	bhi	1b190 <bfd_arch_bits_per_address@plt+0x9ddc>
   1b1b8:	mov	r1, r7
   1b1bc:	mov	r0, r4
   1b1c0:	bl	13360 <bfd_arch_bits_per_address@plt+0x1fac>
   1b1c4:	cmp	r0, #0
   1b1c8:	bne	1b1e4 <bfd_arch_bits_per_address@plt+0x9e30>
   1b1cc:	ldr	r1, [r6, #8]
   1b1d0:	add	r4, r4, #216	; 0xd8
   1b1d4:	cmp	r1, r4
   1b1d8:	bhi	1b19c <bfd_arch_bits_per_address@plt+0x9de8>
   1b1dc:	mov	r0, #0
   1b1e0:	pop	{r4, r5, r6, r7, r8, pc}
   1b1e4:	mov	r0, #1
   1b1e8:	pop	{r4, r5, r6, r7, r8, pc}
   1b1ec:	andeq	r0, r0, r0
   1b1f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b1f4:	sub	sp, sp, #1024	; 0x400
   1b1f8:	ldr	r4, [r0, #8]
   1b1fc:	sub	sp, sp, #12
   1b200:	cmp	r4, #0
   1b204:	beq	1b2f8 <bfd_arch_bits_per_address@plt+0x9f44>
   1b208:	ldr	r3, [pc, #456]	; 1b3d8 <bfd_arch_bits_per_address@plt+0xa024>
   1b20c:	mov	r5, r0
   1b210:	ldr	r3, [r3]
   1b214:	cmp	r3, #0
   1b218:	bne	1b22c <bfd_arch_bits_per_address@plt+0x9e78>
   1b21c:	ldr	r3, [pc, #440]	; 1b3dc <bfd_arch_bits_per_address@plt+0xa028>
   1b220:	ldr	r3, [r3]
   1b224:	cmp	r3, #0
   1b228:	bne	1b36c <bfd_arch_bits_per_address@plt+0x9fb8>
   1b22c:	mov	r1, r4
   1b230:	ldr	r0, [pc, #424]	; 1b3e0 <bfd_arch_bits_per_address@plt+0xa02c>
   1b234:	bl	11090 <printf@plt>
   1b238:	mov	r0, r4
   1b23c:	bl	1124c <strlen@plt>
   1b240:	ldr	r2, [pc, #412]	; 1b3e4 <bfd_arch_bits_per_address@plt+0xa030>
   1b244:	ldr	r3, [pc, #412]	; 1b3e8 <bfd_arch_bits_per_address@plt+0xa034>
   1b248:	ldr	r7, [r2]
   1b24c:	ldr	r3, [r3]
   1b250:	orrs	r3, r7, r3
   1b254:	mov	r6, r0
   1b258:	mov	r4, r0
   1b25c:	beq	1b2e0 <bfd_arch_bits_per_address@plt+0x9f2c>
   1b260:	ldr	r3, [r5, #12]
   1b264:	cmp	r3, #0
   1b268:	movne	r8, #0
   1b26c:	beq	1b2e0 <bfd_arch_bits_per_address@plt+0x9f2c>
   1b270:	ldr	r2, [pc, #372]	; 1b3ec <bfd_arch_bits_per_address@plt+0xa038>
   1b274:	ldr	r9, [r3, #4]
   1b278:	ldr	r3, [r2]
   1b27c:	cmp	r3, #0
   1b280:	bne	1b298 <bfd_arch_bits_per_address@plt+0x9ee4>
   1b284:	mov	r0, r9
   1b288:	mov	r1, #47	; 0x2f
   1b28c:	bl	112e8 <strrchr@plt>
   1b290:	cmp	r0, #0
   1b294:	addne	r9, r0, #1
   1b298:	cmp	r7, #0
   1b29c:	ldr	r3, [r5, #16]
   1b2a0:	bne	1b34c <bfd_arch_bits_per_address@plt+0x9f98>
   1b2a4:	add	r4, sp, #8
   1b2a8:	mov	r2, r9
   1b2ac:	mov	r0, r4
   1b2b0:	ldr	r1, [pc, #312]	; 1b3f0 <bfd_arch_bits_per_address@plt+0xa03c>
   1b2b4:	bl	11324 <sprintf@plt>
   1b2b8:	mov	r1, r4
   1b2bc:	ldr	r0, [pc, #284]	; 1b3e0 <bfd_arch_bits_per_address@plt+0xa02c>
   1b2c0:	bl	11090 <printf@plt>
   1b2c4:	mov	r0, r4
   1b2c8:	bl	1124c <strlen@plt>
   1b2cc:	cmp	r8, #0
   1b2d0:	add	r4, r0, r6
   1b2d4:	beq	1b2e0 <bfd_arch_bits_per_address@plt+0x9f2c>
   1b2d8:	mov	r0, r8
   1b2dc:	bl	110a8 <free@plt>
   1b2e0:	ldr	r6, [pc, #268]	; 1b3f4 <bfd_arch_bits_per_address@plt+0xa040>
   1b2e4:	ldr	r3, [r6]
   1b2e8:	tst	r3, #2
   1b2ec:	bne	1b330 <bfd_arch_bits_per_address@plt+0x9f7c>
   1b2f0:	tst	r3, #1024	; 0x400
   1b2f4:	bne	1b308 <bfd_arch_bits_per_address@plt+0x9f54>
   1b2f8:	mov	r0, r4
   1b2fc:	add	sp, sp, #1024	; 0x400
   1b300:	add	sp, sp, #12
   1b304:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b308:	vldr	d6, [r5, #168]	; 0xa8
   1b30c:	vldr	d7, [pc, #188]	; 1b3d0 <bfd_arch_bits_per_address@plt+0xa01c>
   1b310:	ldr	r0, [pc, #224]	; 1b3f8 <bfd_arch_bits_per_address@plt+0xa044>
   1b314:	vmul.f64	d7, d6, d7
   1b318:	vmov	r2, r3, d7
   1b31c:	bl	11090 <printf@plt>
   1b320:	mov	r0, r4
   1b324:	add	sp, sp, #1024	; 0x400
   1b328:	add	sp, sp, #12
   1b32c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b330:	ldr	r1, [r5, #156]	; 0x9c
   1b334:	ldr	r0, [pc, #192]	; 1b3fc <bfd_arch_bits_per_address@plt+0xa048>
   1b338:	bl	11090 <printf@plt>
   1b33c:	ldr	r3, [r6]
   1b340:	tst	r3, #1024	; 0x400
   1b344:	beq	1b2f8 <bfd_arch_bits_per_address@plt+0x9f44>
   1b348:	b	1b308 <bfd_arch_bits_per_address@plt+0x9f54>
   1b34c:	ldr	r1, [r5]
   1b350:	add	r4, sp, #8
   1b354:	str	r1, [sp]
   1b358:	mov	r2, r9
   1b35c:	mov	r0, r4
   1b360:	ldr	r1, [pc, #152]	; 1b400 <bfd_arch_bits_per_address@plt+0xa04c>
   1b364:	bl	11324 <sprintf@plt>
   1b368:	b	1b2b8 <bfd_arch_bits_per_address@plt+0x9f04>
   1b36c:	ldr	r3, [pc, #144]	; 1b404 <bfd_arch_bits_per_address@plt+0xa050>
   1b370:	mov	r2, #3
   1b374:	mov	r1, r4
   1b378:	ldr	r0, [r3]
   1b37c:	bl	112dc <bfd_demangle@plt>
   1b380:	subs	r8, r0, #0
   1b384:	beq	1b22c <bfd_arch_bits_per_address@plt+0x9e78>
   1b388:	mov	r1, r8
   1b38c:	ldr	r0, [pc, #76]	; 1b3e0 <bfd_arch_bits_per_address@plt+0xa02c>
   1b390:	bl	11090 <printf@plt>
   1b394:	mov	r0, r8
   1b398:	bl	1124c <strlen@plt>
   1b39c:	ldr	r2, [pc, #64]	; 1b3e4 <bfd_arch_bits_per_address@plt+0xa030>
   1b3a0:	ldr	r3, [pc, #64]	; 1b3e8 <bfd_arch_bits_per_address@plt+0xa034>
   1b3a4:	ldr	r7, [r2]
   1b3a8:	ldr	r3, [r3]
   1b3ac:	orrs	r3, r7, r3
   1b3b0:	mov	r6, r0
   1b3b4:	mov	r4, r0
   1b3b8:	beq	1b2d8 <bfd_arch_bits_per_address@plt+0x9f24>
   1b3bc:	ldr	r3, [r5, #12]
   1b3c0:	cmp	r3, #0
   1b3c4:	bne	1b270 <bfd_arch_bits_per_address@plt+0x9ebc>
   1b3c8:	b	1b2d8 <bfd_arch_bits_per_address@plt+0x9f24>
   1b3cc:	nop			; (mov r0, r0)
   1b3d0:	andeq	r0, r0, r0
   1b3d4:	subsmi	r0, r9, r0
   1b3d8:	andeq	r5, r3, r8, lsr r1
   1b3dc:	andeq	r4, r3, r4, ror r1
   1b3e0:	andeq	pc, r1, ip, lsr r1	; <UNPREDICTABLE>
   1b3e4:	andeq	r5, r3, r8, lsr #2
   1b3e8:	andeq	r5, r3, ip, lsr r1
   1b3ec:	andeq	r5, r3, ip, lsr #2
   1b3f0:	andeq	r0, r2, r4, asr #16
   1b3f4:	andeq	r5, r3, r0, lsr #2
   1b3f8:	andeq	r0, r2, r8, asr r8
   1b3fc:	andeq	r0, r2, r0, asr r8
   1b400:	andeq	r0, r2, r4, lsr r8
   1b404:	andeq	r5, r3, r0, lsr #8
   1b408:	push	{r4, lr}
   1b40c:	mov	r4, r0
   1b410:	bl	1b1f0 <bfd_arch_bits_per_address@plt+0x9e3c>
   1b414:	ldr	r3, [r4, #192]	; 0xc0
   1b418:	cmp	r3, #0
   1b41c:	bne	1b450 <bfd_arch_bits_per_address@plt+0xa09c>
   1b420:	ldr	r1, [r4, #152]	; 0x98
   1b424:	cmp	r1, #0
   1b428:	popeq	{r4, pc}
   1b42c:	ldr	r3, [r4, #160]	; 0xa0
   1b430:	cmp	r3, #0
   1b434:	beq	1b444 <bfd_arch_bits_per_address@plt+0xa090>
   1b438:	ldr	r0, [pc, #44]	; 1b46c <bfd_arch_bits_per_address@plt+0xa0b8>
   1b43c:	pop	{r4, lr}
   1b440:	b	11090 <printf@plt>
   1b444:	ldr	r0, [pc, #36]	; 1b470 <bfd_arch_bits_per_address@plt+0xa0bc>
   1b448:	pop	{r4, lr}
   1b44c:	b	11090 <printf@plt>
   1b450:	mov	r2, #5
   1b454:	ldr	r1, [pc, #24]	; 1b474 <bfd_arch_bits_per_address@plt+0xa0c0>
   1b458:	ldr	r0, [pc, #24]	; 1b478 <bfd_arch_bits_per_address@plt+0xa0c4>
   1b45c:	bl	11120 <dcgettext@plt>
   1b460:	ldr	r1, [r4, #192]	; 0xc0
   1b464:	bl	11090 <printf@plt>
   1b468:	b	1b420 <bfd_arch_bits_per_address@plt+0xa06c>
   1b46c:	andeq	r0, r2, r0, ror r8
   1b470:	andeq	r0, r2, r8, ror r8
   1b474:	andeq	r0, r2, r4, ror #16
   1b478:	andeq	lr, r1, r0, asr #13
   1b47c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b480:	sub	sp, sp, #12
   1b484:	ldr	r9, [pc, #324]	; 1b5d0 <bfd_arch_bits_per_address@plt+0xa21c>
   1b488:	str	r0, [sp]
   1b48c:	mov	r4, r1
   1b490:	ldr	r3, [r9]
   1b494:	mov	r5, r2
   1b498:	tst	r3, #256	; 0x100
   1b49c:	bne	1b5a0 <bfd_arch_bits_per_address@plt+0xa1ec>
   1b4a0:	cmp	r4, r5
   1b4a4:	bcs	1b544 <bfd_arch_bits_per_address@plt+0xa190>
   1b4a8:	ldr	r7, [pc, #292]	; 1b5d4 <bfd_arch_bits_per_address@plt+0xa220>
   1b4ac:	ldr	r6, [pc, #292]	; 1b5d8 <bfd_arch_bits_per_address@plt+0xa224>
   1b4b0:	ldr	sl, [pc, #292]	; 1b5dc <bfd_arch_bits_per_address@plt+0xa228>
   1b4b4:	ldr	fp, [pc, #292]	; 1b5e0 <bfd_arch_bits_per_address@plt+0xa22c>
   1b4b8:	b	1b4c8 <bfd_arch_bits_per_address@plt+0xa114>
   1b4bc:	add	r4, r4, #1
   1b4c0:	cmp	r5, r4
   1b4c4:	beq	1b544 <bfd_arch_bits_per_address@plt+0xa190>
   1b4c8:	ldr	r3, [r6]
   1b4cc:	ldr	r2, [r7]
   1b4d0:	ldr	r3, [r3, #28]
   1b4d4:	sub	r3, r4, r3
   1b4d8:	add	r8, r2, r3
   1b4dc:	ldrb	r3, [r2, r3]
   1b4e0:	cmp	r3, #232	; 0xe8
   1b4e4:	bne	1b4bc <bfd_arch_bits_per_address@plt+0xa108>
   1b4e8:	ldr	r3, [r9]
   1b4ec:	tst	r3, #256	; 0x100
   1b4f0:	bne	1b590 <bfd_arch_bits_per_address@plt+0xa1dc>
   1b4f4:	ldr	r3, [sl]
   1b4f8:	add	r0, r8, #1
   1b4fc:	add	r8, r4, #5
   1b500:	ldr	r3, [r3, #4]
   1b504:	ldr	r3, [r3, #40]	; 0x28
   1b508:	blx	r3
   1b50c:	add	r8, r8, r0
   1b510:	mov	r0, r8
   1b514:	bl	198f4 <bfd_arch_bits_per_address@plt+0x8540>
   1b518:	cmp	r0, #0
   1b51c:	bne	1b54c <bfd_arch_bits_per_address@plt+0xa198>
   1b520:	ldr	r2, [r9]
   1b524:	and	r2, r2, #256	; 0x100
   1b528:	cmp	r2, #0
   1b52c:	beq	1b4bc <bfd_arch_bits_per_address@plt+0xa108>
   1b530:	ldr	r0, [pc, #172]	; 1b5e4 <bfd_arch_bits_per_address@plt+0xa230>
   1b534:	add	r4, r4, #1
   1b538:	bl	111ec <puts@plt>
   1b53c:	cmp	r5, r4
   1b540:	bne	1b4c8 <bfd_arch_bits_per_address@plt+0xa114>
   1b544:	add	sp, sp, #12
   1b548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b54c:	mov	r1, r8
   1b550:	ldr	r0, [pc, #144]	; 1b5e8 <bfd_arch_bits_per_address@plt+0xa234>
   1b554:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   1b558:	subs	r3, r0, #0
   1b55c:	beq	1b520 <bfd_arch_bits_per_address@plt+0xa16c>
   1b560:	ldr	r1, [r3]
   1b564:	ldr	r2, [r9]
   1b568:	cmp	r1, r8
   1b56c:	and	r2, r2, #256	; 0x100
   1b570:	bne	1b528 <bfd_arch_bits_per_address@plt+0xa174>
   1b574:	cmp	r2, #0
   1b578:	bne	1b5b8 <bfd_arch_bits_per_address@plt+0xa204>
   1b57c:	mov	r1, r3
   1b580:	mov	r2, #0
   1b584:	ldr	r0, [sp]
   1b588:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1b58c:	b	1b4bc <bfd_arch_bits_per_address@plt+0xa108>
   1b590:	mov	r1, r4
   1b594:	mov	r0, fp
   1b598:	bl	11090 <printf@plt>
   1b59c:	b	1b4f4 <bfd_arch_bits_per_address@plt+0xa140>
   1b5a0:	mov	r3, r2
   1b5a4:	mov	r2, r1
   1b5a8:	ldr	r1, [r0, #8]
   1b5ac:	ldr	r0, [pc, #56]	; 1b5ec <bfd_arch_bits_per_address@plt+0xa238>
   1b5b0:	bl	11090 <printf@plt>
   1b5b4:	b	1b4a0 <bfd_arch_bits_per_address@plt+0xa0ec>
   1b5b8:	ldr	r2, [r3, #8]
   1b5bc:	ldr	r0, [pc, #44]	; 1b5f0 <bfd_arch_bits_per_address@plt+0xa23c>
   1b5c0:	str	r3, [sp, #4]
   1b5c4:	bl	11090 <printf@plt>
   1b5c8:	ldr	r3, [sp, #4]
   1b5cc:	b	1b57c <bfd_arch_bits_per_address@plt+0xa1c8>
   1b5d0:	andeq	r5, r3, r0, lsr #2
   1b5d4:	andeq	r5, r3, r4, lsr #8
   1b5d8:	andeq	r5, r3, r0, lsr r4
   1b5dc:	andeq	r5, r3, r0, lsr #8
   1b5e0:	andeq	r0, r2, r0, lsr #17
   1b5e4:	andeq	r0, r2, ip, asr #17
   1b5e8:	andeq	r5, r3, r0, asr r4
   1b5ec:	andeq	r0, r2, r0, lsl #17
   1b5f0:			; <UNDEFINED> instruction: 0x000208b8
   1b5f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5f8:	sub	sp, sp, #12
   1b5fc:	ldr	r4, [pc, #620]	; 1b870 <bfd_arch_bits_per_address@plt+0xa4bc>
   1b600:	str	r0, [sp]
   1b604:	mov	r5, r1
   1b608:	ldr	r3, [r4, #8]
   1b60c:	mov	fp, r2
   1b610:	cmp	r3, #0
   1b614:	beq	1b834 <bfd_arch_bits_per_address@plt+0xa480>
   1b618:	ldr	sl, [pc, #596]	; 1b874 <bfd_arch_bits_per_address@plt+0xa4c0>
   1b61c:	ldr	r3, [sl]
   1b620:	tst	r3, #256	; 0x100
   1b624:	bne	1b80c <bfd_arch_bits_per_address@plt+0xa458>
   1b628:	add	r5, r5, #3
   1b62c:	bic	r5, r5, #3
   1b630:	cmp	fp, r5
   1b634:	bls	1b70c <bfd_arch_bits_per_address@plt+0xa358>
   1b638:	ldr	r9, [pc, #568]	; 1b878 <bfd_arch_bits_per_address@plt+0xa4c4>
   1b63c:	ldr	r8, [pc, #568]	; 1b87c <bfd_arch_bits_per_address@plt+0xa4c8>
   1b640:	ldr	r7, [pc, #568]	; 1b880 <bfd_arch_bits_per_address@plt+0xa4cc>
   1b644:	b	1b6a8 <bfd_arch_bits_per_address@plt+0xa2f4>
   1b648:	cmp	r3, #-805306368	; 0xd0000000
   1b64c:	bne	1b69c <bfd_arch_bits_per_address@plt+0xa2e8>
   1b650:	ldr	r3, [sl]
   1b654:	tst	r3, #256	; 0x100
   1b658:	bne	1b76c <bfd_arch_bits_per_address@plt+0xa3b8>
   1b65c:	bic	r4, r4, #-16777216	; 0xff000000
   1b660:	bic	r4, r4, #14680064	; 0xe00000
   1b664:	eor	r4, r4, #1048576	; 0x100000
   1b668:	add	r4, r4, r5
   1b66c:	add	r6, r4, #-268435452	; 0xf0000004
   1b670:	add	r6, r6, #267386880	; 0xff00000
   1b674:	mov	r0, r6
   1b678:	bl	198f4 <bfd_arch_bits_per_address@plt+0x8540>
   1b67c:	cmp	r0, #0
   1b680:	bne	1b714 <bfd_arch_bits_per_address@plt+0xa360>
   1b684:	ldr	r3, [sl]
   1b688:	and	r3, r3, #256	; 0x100
   1b68c:	cmp	r3, #0
   1b690:	beq	1b69c <bfd_arch_bits_per_address@plt+0xa2e8>
   1b694:	ldr	r0, [pc, #488]	; 1b884 <bfd_arch_bits_per_address@plt+0xa4d0>
   1b698:	bl	111ec <puts@plt>
   1b69c:	add	r5, r5, #4
   1b6a0:	cmp	fp, r5
   1b6a4:	bls	1b70c <bfd_arch_bits_per_address@plt+0xa358>
   1b6a8:	ldr	r3, [r8]
   1b6ac:	ldr	r2, [r7]
   1b6b0:	ldr	r0, [r9]
   1b6b4:	ldr	r3, [r3, #28]
   1b6b8:	ldr	r2, [r2, #4]
   1b6bc:	sub	r3, r5, r3
   1b6c0:	add	r0, r0, r3
   1b6c4:	ldr	r3, [r2, #40]	; 0x28
   1b6c8:	blx	r3
   1b6cc:	and	r3, r0, #-67108864	; 0xfc000000
   1b6d0:	cmp	r3, #1744830464	; 0x68000000
   1b6d4:	mov	r4, r0
   1b6d8:	bne	1b648 <bfd_arch_bits_per_address@plt+0xa294>
   1b6dc:	tst	r0, #16384	; 0x4000
   1b6e0:	beq	1b69c <bfd_arch_bits_per_address@plt+0xa2e8>
   1b6e4:	ldr	r3, [sl]
   1b6e8:	tst	r3, #256	; 0x100
   1b6ec:	bne	1b7d8 <bfd_arch_bits_per_address@plt+0xa424>
   1b6f0:	mov	r2, #0
   1b6f4:	ldr	r1, [pc, #372]	; 1b870 <bfd_arch_bits_per_address@plt+0xa4bc>
   1b6f8:	ldr	r0, [sp]
   1b6fc:	add	r5, r5, #4
   1b700:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1b704:	cmp	fp, r5
   1b708:	bhi	1b6a8 <bfd_arch_bits_per_address@plt+0xa2f4>
   1b70c:	add	sp, sp, #12
   1b710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b714:	mov	r1, r6
   1b718:	ldr	r0, [pc, #360]	; 1b888 <bfd_arch_bits_per_address@plt+0xa4d4>
   1b71c:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   1b720:	subs	r3, r0, #0
   1b724:	str	r3, [sp, #4]
   1b728:	beq	1b684 <bfd_arch_bits_per_address@plt+0xa2d0>
   1b72c:	ldr	r2, [sl]
   1b730:	ldr	r3, [sp, #4]
   1b734:	tst	r2, #256	; 0x100
   1b738:	ldr	r3, [r3]
   1b73c:	bne	1b788 <bfd_arch_bits_per_address@plt+0xa3d4>
   1b740:	cmp	r6, r3
   1b744:	beq	1b758 <bfd_arch_bits_per_address@plt+0xa3a4>
   1b748:	sub	r4, r4, #1048576	; 0x100000
   1b74c:	sub	r4, r4, #4
   1b750:	cmp	r4, r3
   1b754:	bne	1b69c <bfd_arch_bits_per_address@plt+0xa2e8>
   1b758:	ldr	r1, [sp, #4]
   1b75c:	mov	r2, #0
   1b760:	ldr	r0, [sp]
   1b764:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1b768:	b	1b69c <bfd_arch_bits_per_address@plt+0xa2e8>
   1b76c:	mov	r2, #5
   1b770:	ldr	r1, [pc, #276]	; 1b88c <bfd_arch_bits_per_address@plt+0xa4d8>
   1b774:	ldr	r0, [pc, #276]	; 1b890 <bfd_arch_bits_per_address@plt+0xa4dc>
   1b778:	bl	11120 <dcgettext@plt>
   1b77c:	mov	r1, r5
   1b780:	bl	11090 <printf@plt>
   1b784:	b	1b65c <bfd_arch_bits_per_address@plt+0xa2a8>
   1b788:	ldr	r2, [sp, #4]
   1b78c:	mov	r1, r6
   1b790:	ldr	r0, [pc, #252]	; 1b894 <bfd_arch_bits_per_address@plt+0xa4e0>
   1b794:	ldr	r2, [r2, #8]
   1b798:	bl	11090 <printf@plt>
   1b79c:	ldr	r2, [sp, #4]
   1b7a0:	ldr	r2, [r2]
   1b7a4:	cmp	r2, r6
   1b7a8:	beq	1b864 <bfd_arch_bits_per_address@plt+0xa4b0>
   1b7ac:	sub	r4, r4, #1048576	; 0x100000
   1b7b0:	sub	r4, r4, #4
   1b7b4:	ldr	r3, [sl]
   1b7b8:	cmp	r2, r4
   1b7bc:	and	r3, r3, #256	; 0x100
   1b7c0:	bne	1b68c <bfd_arch_bits_per_address@plt+0xa2d8>
   1b7c4:	cmp	r3, #0
   1b7c8:	beq	1b758 <bfd_arch_bits_per_address@plt+0xa3a4>
   1b7cc:	mov	r0, #10
   1b7d0:	bl	11294 <putchar@plt>
   1b7d4:	b	1b758 <bfd_arch_bits_per_address@plt+0xa3a4>
   1b7d8:	mov	r2, #5
   1b7dc:	ldr	r1, [pc, #180]	; 1b898 <bfd_arch_bits_per_address@plt+0xa4e4>
   1b7e0:	ldr	r0, [pc, #168]	; 1b890 <bfd_arch_bits_per_address@plt+0xa4dc>
   1b7e4:	bl	11120 <dcgettext@plt>
   1b7e8:	and	r2, r4, #49152	; 0xc000
   1b7ec:	ldr	r1, [pc, #168]	; 1b89c <bfd_arch_bits_per_address@plt+0xa4e8>
   1b7f0:	ldr	r3, [pc, #168]	; 1b8a0 <bfd_arch_bits_per_address@plt+0xa4ec>
   1b7f4:	cmp	r2, #16384	; 0x4000
   1b7f8:	movne	r3, r1
   1b7fc:	mov	r2, r3
   1b800:	mov	r1, r5
   1b804:	bl	11090 <printf@plt>
   1b808:	b	1b6f0 <bfd_arch_bits_per_address@plt+0xa33c>
   1b80c:	mov	r2, #5
   1b810:	ldr	r1, [pc, #140]	; 1b8a4 <bfd_arch_bits_per_address@plt+0xa4f0>
   1b814:	ldr	r0, [pc, #116]	; 1b890 <bfd_arch_bits_per_address@plt+0xa4dc>
   1b818:	bl	11120 <dcgettext@plt>
   1b81c:	ldr	r1, [sp]
   1b820:	mov	r3, fp
   1b824:	mov	r2, r5
   1b828:	ldr	r1, [r1, #8]
   1b82c:	bl	11090 <printf@plt>
   1b830:	b	1b628 <bfd_arch_bits_per_address@plt+0xa274>
   1b834:	mov	r0, r4
   1b838:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   1b83c:	mov	r2, #5
   1b840:	ldr	r1, [pc, #96]	; 1b8a8 <bfd_arch_bits_per_address@plt+0xa4f4>
   1b844:	ldr	r0, [pc, #68]	; 1b890 <bfd_arch_bits_per_address@plt+0xa4dc>
   1b848:	bl	11120 <dcgettext@plt>
   1b84c:	ldr	r3, [pc, #88]	; 1b8ac <bfd_arch_bits_per_address@plt+0xa4f8>
   1b850:	mov	r2, #0
   1b854:	str	r4, [r4, #196]	; 0xc4
   1b858:	strd	r2, [r4, #168]	; 0xa8
   1b85c:	str	r0, [r4, #8]
   1b860:	b	1b618 <bfd_arch_bits_per_address@plt+0xa264>
   1b864:	ldr	r3, [sl]
   1b868:	and	r3, r3, #256	; 0x100
   1b86c:	b	1b7c4 <bfd_arch_bits_per_address@plt+0xa410>
   1b870:	andeq	r5, r3, r8, ror r1
   1b874:	andeq	r5, r3, r0, lsr #2
   1b878:	andeq	r5, r3, r4, lsr #8
   1b87c:	andeq	r5, r3, r0, lsr r4
   1b880:	andeq	r5, r3, r0, lsr #8
   1b884:	andeq	r0, r2, ip, asr #17
   1b888:	andeq	r5, r3, r0, asr r4
   1b88c:	andeq	r0, r2, ip, asr #18
   1b890:	andeq	lr, r1, r0, asr #13
   1b894:	andeq	r0, r2, r4, ror #18
   1b898:	andeq	r0, r2, r0, lsr #18
   1b89c:	andeq	r0, r2, r0, ror #17
   1b8a0:	strdeq	pc, [r1], -r0
   1b8a4:	andeq	r0, r2, r0, lsl #18
   1b8a8:	andeq	r0, r2, ip, ror #17
   1b8ac:	svccc	0x00f00000	; IMB
   1b8b0:	and	r3, r0, #15
   1b8b4:	lsr	r0, r0, #4
   1b8b8:	sub	r0, r0, #4
   1b8bc:	cmp	r0, #11
   1b8c0:	ldrls	pc, [pc, r0, lsl #2]
   1b8c4:	b	1b998 <bfd_arch_bits_per_address@plt+0xa5e4>
   1b8c8:	andeq	fp, r1, r8, lsl r9
   1b8cc:	andeq	fp, r1, r0, lsr #18
   1b8d0:	andeq	fp, r1, r8, lsr #18
   1b8d4:	andeq	fp, r1, r0, lsr r9
   1b8d8:	andeq	fp, r1, r8, lsr r9
   1b8dc:	andeq	fp, r1, r8, asr #18
   1b8e0:	andeq	fp, r1, r8, asr r9
   1b8e4:	andeq	fp, r1, r8, ror #18
   1b8e8:	andeq	fp, r1, r8, ror r9
   1b8ec:	andeq	fp, r1, r8, lsl #19
   1b8f0:	strdeq	fp, [r1], -r8
   1b8f4:	andeq	fp, r1, r8, lsl #18
   1b8f8:	cmp	r3, #15
   1b8fc:	movne	r0, #11
   1b900:	moveq	r0, #19
   1b904:	bx	lr
   1b908:	cmp	r3, #15
   1b90c:	movne	r0, #12
   1b910:	moveq	r0, #20
   1b914:	bx	lr
   1b918:	mov	r0, #1
   1b91c:	bx	lr
   1b920:	mov	r0, #2
   1b924:	bx	lr
   1b928:	mov	r0, #3
   1b92c:	bx	lr
   1b930:	mov	r0, #4
   1b934:	bx	lr
   1b938:	cmp	r3, #15
   1b93c:	movne	r0, #5
   1b940:	moveq	r0, #13
   1b944:	bx	lr
   1b948:	cmp	r3, #15
   1b94c:	movne	r0, #6
   1b950:	moveq	r0, #14
   1b954:	bx	lr
   1b958:	cmp	r3, #15
   1b95c:	movne	r0, #7
   1b960:	moveq	r0, #15
   1b964:	bx	lr
   1b968:	cmp	r3, #15
   1b96c:	movne	r0, #8
   1b970:	moveq	r0, #16
   1b974:	bx	lr
   1b978:	cmp	r3, #15
   1b97c:	movne	r0, #9
   1b980:	moveq	r0, #17
   1b984:	bx	lr
   1b988:	cmp	r3, #15
   1b98c:	movne	r0, #10
   1b990:	moveq	r0, #18
   1b994:	bx	lr
   1b998:	mov	r0, #0
   1b99c:	bx	lr
   1b9a0:	sub	r1, r0, #1
   1b9a4:	rsb	r2, r0, #1
   1b9a8:	push	{r4, lr}
   1b9ac:	add	r4, r2, r1
   1b9b0:	ldrb	r0, [r1, #1]!
   1b9b4:	bl	1b8b0 <bfd_arch_bits_per_address@plt+0xa4fc>
   1b9b8:	cmp	r0, #20
   1b9bc:	ldrls	pc, [pc, r0, lsl #2]
   1b9c0:	b	1ba48 <bfd_arch_bits_per_address@plt+0xa694>
   1b9c4:	andeq	fp, r1, r0, lsr sl
   1b9c8:	andeq	fp, r1, ip, lsr #19
   1b9cc:	andeq	fp, r1, r0, lsr sl
   1b9d0:	andeq	fp, r1, r0, lsr sl
   1b9d4:	andeq	fp, r1, r0, lsr sl
   1b9d8:	andeq	fp, r1, r0, lsr sl
   1b9dc:	andeq	fp, r1, r0, lsr sl
   1b9e0:	andeq	fp, r1, r4, lsr #20
   1b9e4:	andeq	fp, r1, r4, lsr #20
   1b9e8:	andeq	fp, r1, r8, lsl sl
   1b9ec:	andeq	fp, r1, r8, lsl sl
   1b9f0:	andeq	fp, r1, ip, lsr sl
   1b9f4:	andeq	fp, r1, ip, lsr sl
   1b9f8:	andeq	fp, r1, ip, lsr sl
   1b9fc:	andeq	fp, r1, ip, lsr sl
   1ba00:	andeq	fp, r1, r4, lsr #20
   1ba04:	andeq	fp, r1, r4, lsr #20
   1ba08:	andeq	fp, r1, r8, lsl sl
   1ba0c:	andeq	fp, r1, r8, lsl sl
   1ba10:	andeq	fp, r1, ip, lsr sl
   1ba14:	andeq	fp, r1, ip, lsr sl
   1ba18:	mov	r0, #3
   1ba1c:	add	r0, r0, r4
   1ba20:	pop	{r4, pc}
   1ba24:	mov	r0, #2
   1ba28:	add	r0, r0, r4
   1ba2c:	pop	{r4, pc}
   1ba30:	mov	r0, #1
   1ba34:	add	r0, r0, r4
   1ba38:	pop	{r4, pc}
   1ba3c:	mov	r0, #5
   1ba40:	add	r0, r0, r4
   1ba44:	pop	{r4, pc}
   1ba48:	bl	113a8 <abort@plt>
   1ba4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba50:	sub	sp, sp, #12
   1ba54:	ldr	r5, [pc, #904]	; 1bde4 <bfd_arch_bits_per_address@plt+0xaa30>
   1ba58:	str	r0, [sp]
   1ba5c:	mov	r4, r1
   1ba60:	ldr	r3, [r5]
   1ba64:	mov	r6, r2
   1ba68:	cmp	r3, #0
   1ba6c:	beq	1bd20 <bfd_arch_bits_per_address@plt+0xa96c>
   1ba70:	ldr	r9, [pc, #880]	; 1bde8 <bfd_arch_bits_per_address@plt+0xaa34>
   1ba74:	ldr	r3, [r9]
   1ba78:	tst	r3, #256	; 0x100
   1ba7c:	bne	1bd04 <bfd_arch_bits_per_address@plt+0xa950>
   1ba80:	cmp	r4, r6
   1ba84:	bcs	1bc10 <bfd_arch_bits_per_address@plt+0xa85c>
   1ba88:	ldr	r8, [pc, #860]	; 1bdec <bfd_arch_bits_per_address@plt+0xaa38>
   1ba8c:	ldr	r7, [pc, #860]	; 1bdf0 <bfd_arch_bits_per_address@plt+0xaa3c>
   1ba90:	b	1baa4 <bfd_arch_bits_per_address@plt+0xa6f0>
   1ba94:	mov	r0, #1
   1ba98:	add	r4, r4, r0
   1ba9c:	cmp	r6, r4
   1baa0:	bls	1bc10 <bfd_arch_bits_per_address@plt+0xa85c>
   1baa4:	ldr	r3, [r7]
   1baa8:	ldr	r2, [r8]
   1baac:	ldr	r3, [r3, #28]
   1bab0:	sub	r3, r4, r3
   1bab4:	add	sl, r2, r3
   1bab8:	ldrb	r3, [r2, r3]
   1babc:	cmp	r3, #251	; 0xfb
   1bac0:	bne	1ba94 <bfd_arch_bits_per_address@plt+0xa6e0>
   1bac4:	ldr	r3, [r9]
   1bac8:	tst	r3, #256	; 0x100
   1bacc:	bne	1bc18 <bfd_arch_bits_per_address@plt+0xa864>
   1bad0:	ldrb	r0, [sl, #1]
   1bad4:	bl	1b8b0 <bfd_arch_bits_per_address@plt+0xa4fc>
   1bad8:	cmp	r0, #0
   1badc:	beq	1bae8 <bfd_arch_bits_per_address@plt+0xa734>
   1bae0:	cmp	r0, #13
   1bae4:	bne	1ba94 <bfd_arch_bits_per_address@plt+0xa6e0>
   1bae8:	add	r0, sl, #1
   1baec:	bl	1b9a0 <bfd_arch_bits_per_address@plt+0xa5ec>
   1baf0:	add	r5, r0, #1
   1baf4:	add	fp, sl, r5
   1baf8:	ldrb	r0, [sl, r5]
   1bafc:	bl	1b8b0 <bfd_arch_bits_per_address@plt+0xa4fc>
   1bb00:	mov	sl, r0
   1bb04:	sub	r3, sl, #3
   1bb08:	cmp	r3, #17
   1bb0c:	ldrls	pc, [pc, r3, lsl #2]
   1bb10:	b	1ba94 <bfd_arch_bits_per_address@plt+0xa6e0>
   1bb14:	andeq	fp, r1, r8, ror #23
   1bb18:	muleq	r1, r4, sl
   1bb1c:	muleq	r1, r4, sl
   1bb20:	muleq	r1, r4, sl
   1bb24:	muleq	r1, r4, sl
   1bb28:	andeq	fp, r1, r8, ror #23
   1bb2c:	muleq	r1, r4, sl
   1bb30:	andeq	fp, r1, r8, ror #23
   1bb34:	muleq	r1, r4, sl
   1bb38:	andeq	fp, r1, r8, ror #23
   1bb3c:	muleq	r1, r4, sl
   1bb40:	muleq	r1, r4, sl
   1bb44:	andeq	fp, r1, r8, ror #22
   1bb48:	andeq	fp, r1, r8, ror #23
   1bb4c:	andeq	fp, r1, r8, ror #22
   1bb50:	andeq	fp, r1, r8, ror #23
   1bb54:	andeq	fp, r1, r8, ror #22
   1bb58:	andeq	fp, r1, r8, ror #23
   1bb5c:	ldrb	r0, [fp]
   1bb60:	bl	1b8b0 <bfd_arch_bits_per_address@plt+0xa4fc>
   1bb64:	mov	sl, r0
   1bb68:	cmp	sl, #17
   1bb6c:	add	r0, fp, #1
   1bb70:	beq	1bd7c <bfd_arch_bits_per_address@plt+0xa9c8>
   1bb74:	cmp	sl, #19
   1bb78:	beq	1bd5c <bfd_arch_bits_per_address@plt+0xa9a8>
   1bb7c:	cmp	sl, #15
   1bb80:	beq	1bd48 <bfd_arch_bits_per_address@plt+0xa994>
   1bb84:	ldr	r3, [pc, #616]	; 1bdf4 <bfd_arch_bits_per_address@plt+0xaa40>
   1bb88:	mov	r2, #31
   1bb8c:	mov	r1, #1
   1bb90:	ldr	r3, [r3]
   1bb94:	ldr	r0, [pc, #604]	; 1bdf8 <bfd_arch_bits_per_address@plt+0xaa44>
   1bb98:	bl	11174 <fwrite@plt>
   1bb9c:	mov	sl, r4
   1bba0:	mov	r0, sl
   1bba4:	bl	198f4 <bfd_arch_bits_per_address@plt+0x8540>
   1bba8:	cmp	r0, #0
   1bbac:	beq	1bc3c <bfd_arch_bits_per_address@plt+0xa888>
   1bbb0:	mov	r1, sl
   1bbb4:	ldr	r0, [pc, #576]	; 1bdfc <bfd_arch_bits_per_address@plt+0xaa48>
   1bbb8:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   1bbbc:	subs	r3, r0, #0
   1bbc0:	beq	1bc3c <bfd_arch_bits_per_address@plt+0xa888>
   1bbc4:	ldr	r2, [r9]
   1bbc8:	tst	r2, #256	; 0x100
   1bbcc:	bne	1bd9c <bfd_arch_bits_per_address@plt+0xa9e8>
   1bbd0:	ldr	r2, [r3]
   1bbd4:	cmp	r2, sl
   1bbd8:	bne	1ba94 <bfd_arch_bits_per_address@plt+0xa6e0>
   1bbdc:	mov	r1, r3
   1bbe0:	mov	r2, #0
   1bbe4:	b	1bbf0 <bfd_arch_bits_per_address@plt+0xa83c>
   1bbe8:	ldr	r1, [pc, #528]	; 1be00 <bfd_arch_bits_per_address@plt+0xaa4c>
   1bbec:	mov	r2, #0
   1bbf0:	ldr	r0, [sp]
   1bbf4:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1bbf8:	mov	r0, fp
   1bbfc:	bl	1b9a0 <bfd_arch_bits_per_address@plt+0xa5ec>
   1bc00:	add	r0, r0, r5
   1bc04:	add	r4, r4, r0
   1bc08:	cmp	r6, r4
   1bc0c:	bhi	1baa4 <bfd_arch_bits_per_address@plt+0xa6f0>
   1bc10:	add	sp, sp, #12
   1bc14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc18:	mov	r1, r4
   1bc1c:	ldr	r0, [pc, #480]	; 1be04 <bfd_arch_bits_per_address@plt+0xaa50>
   1bc20:	bl	11090 <printf@plt>
   1bc24:	ldrb	r0, [sl, #1]
   1bc28:	bl	1b8b0 <bfd_arch_bits_per_address@plt+0xa4fc>
   1bc2c:	subs	r2, r0, #0
   1bc30:	beq	1bc54 <bfd_arch_bits_per_address@plt+0xa8a0>
   1bc34:	cmp	r2, #13
   1bc38:	beq	1bc54 <bfd_arch_bits_per_address@plt+0xa8a0>
   1bc3c:	ldr	r3, [r9]
   1bc40:	tst	r3, #256	; 0x100
   1bc44:	beq	1ba94 <bfd_arch_bits_per_address@plt+0xa6e0>
   1bc48:	ldr	r0, [pc, #440]	; 1be08 <bfd_arch_bits_per_address@plt+0xaa54>
   1bc4c:	bl	111ec <puts@plt>
   1bc50:	b	1ba94 <bfd_arch_bits_per_address@plt+0xa6e0>
   1bc54:	add	r0, sl, #1
   1bc58:	str	r2, [sp, #4]
   1bc5c:	bl	1b9a0 <bfd_arch_bits_per_address@plt+0xa5ec>
   1bc60:	add	r5, r0, #1
   1bc64:	add	fp, sl, r5
   1bc68:	ldrb	r0, [sl, r5]
   1bc6c:	bl	1b8b0 <bfd_arch_bits_per_address@plt+0xa4fc>
   1bc70:	ldr	r3, [r9]
   1bc74:	tst	r3, #256	; 0x100
   1bc78:	mov	sl, r0
   1bc7c:	beq	1bb04 <bfd_arch_bits_per_address@plt+0xa750>
   1bc80:	ldr	r3, [pc, #388]	; 1be0c <bfd_arch_bits_per_address@plt+0xaa58>
   1bc84:	ldr	r2, [sp, #4]
   1bc88:	ldr	r0, [pc, #384]	; 1be10 <bfd_arch_bits_per_address@plt+0xaa5c>
   1bc8c:	ldr	r1, [r3, r2, lsl #2]
   1bc90:	bl	11090 <printf@plt>
   1bc94:	cmp	sl, #20
   1bc98:	bhi	1bde0 <bfd_arch_bits_per_address@plt+0xaa2c>
   1bc9c:	ldr	r3, [pc, #360]	; 1be0c <bfd_arch_bits_per_address@plt+0xaa58>
   1bca0:	ldr	r0, [pc, #364]	; 1be14 <bfd_arch_bits_per_address@plt+0xaa60>
   1bca4:	ldr	r1, [r3, sl, lsl #2]
   1bca8:	sub	sl, sl, #3
   1bcac:	bl	11090 <printf@plt>
   1bcb0:	cmp	sl, #17
   1bcb4:	ldrls	pc, [pc, sl, lsl #2]
   1bcb8:	b	1bc3c <bfd_arch_bits_per_address@plt+0xa888>
   1bcbc:	andeq	fp, r1, r8, ror #23
   1bcc0:	andeq	fp, r1, ip, lsr ip
   1bcc4:	andeq	fp, r1, ip, lsr ip
   1bcc8:	andeq	fp, r1, ip, lsr ip
   1bccc:	andeq	fp, r1, ip, lsr ip
   1bcd0:	andeq	fp, r1, r8, ror #23
   1bcd4:	andeq	fp, r1, ip, lsr ip
   1bcd8:	andeq	fp, r1, r8, ror #23
   1bcdc:	andeq	fp, r1, ip, lsr ip
   1bce0:	andeq	fp, r1, r8, ror #23
   1bce4:	andeq	fp, r1, ip, lsr ip
   1bce8:	andeq	fp, r1, ip, lsr ip
   1bcec:	andeq	fp, r1, ip, asr fp
   1bcf0:	andeq	fp, r1, r8, ror #23
   1bcf4:	andeq	fp, r1, ip, asr fp
   1bcf8:	andeq	fp, r1, r8, ror #23
   1bcfc:	andeq	fp, r1, ip, asr fp
   1bd00:	andeq	fp, r1, r8, ror #23
   1bd04:	ldr	r1, [sp]
   1bd08:	mov	r3, r6
   1bd0c:	mov	r2, r4
   1bd10:	ldr	r1, [r1, #8]
   1bd14:	ldr	r0, [pc, #252]	; 1be18 <bfd_arch_bits_per_address@plt+0xaa64>
   1bd18:	bl	11090 <printf@plt>
   1bd1c:	b	1ba80 <bfd_arch_bits_per_address@plt+0xa6cc>
   1bd20:	mov	r7, r5
   1bd24:	mov	r3, #1
   1bd28:	str	r3, [r7], #8
   1bd2c:	mov	r0, r7
   1bd30:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   1bd34:	ldr	r3, [pc, #224]	; 1be1c <bfd_arch_bits_per_address@plt+0xaa68>
   1bd38:	mov	r2, #0
   1bd3c:	str	r7, [r5, #204]	; 0xcc
   1bd40:	strd	r2, [r5, #176]	; 0xb0
   1bd44:	b	1ba70 <bfd_arch_bits_per_address@plt+0xa6bc>
   1bd48:	ldrb	sl, [fp, #1]
   1bd4c:	eor	sl, sl, #128	; 0x80
   1bd50:	sub	sl, sl, #127	; 0x7f
   1bd54:	add	sl, sl, r4
   1bd58:	b	1bba0 <bfd_arch_bits_per_address@plt+0xa7ec>
   1bd5c:	ldr	r3, [pc, #188]	; 1be20 <bfd_arch_bits_per_address@plt+0xaa6c>
   1bd60:	ldr	r3, [r3]
   1bd64:	ldr	r3, [r3, #4]
   1bd68:	ldr	r3, [r3, #44]	; 0x2c
   1bd6c:	blx	r3
   1bd70:	add	r0, r0, #4
   1bd74:	add	sl, r0, r4
   1bd78:	b	1bba0 <bfd_arch_bits_per_address@plt+0xa7ec>
   1bd7c:	ldr	r3, [pc, #156]	; 1be20 <bfd_arch_bits_per_address@plt+0xaa6c>
   1bd80:	ldr	r3, [r3]
   1bd84:	ldr	r3, [r3, #4]
   1bd88:	ldr	r3, [r3, #56]	; 0x38
   1bd8c:	blx	r3
   1bd90:	add	r0, r0, #2
   1bd94:	add	sl, r0, r4
   1bd98:	b	1bba0 <bfd_arch_bits_per_address@plt+0xa7ec>
   1bd9c:	mov	r1, sl
   1bda0:	ldr	r0, [pc, #124]	; 1be24 <bfd_arch_bits_per_address@plt+0xaa70>
   1bda4:	str	r3, [sp, #4]
   1bda8:	bl	11090 <printf@plt>
   1bdac:	ldr	r3, [sp, #4]
   1bdb0:	ldr	r0, [pc, #112]	; 1be28 <bfd_arch_bits_per_address@plt+0xaa74>
   1bdb4:	ldr	r1, [r3, #8]
   1bdb8:	bl	11090 <printf@plt>
   1bdbc:	ldr	r3, [sp, #4]
   1bdc0:	ldr	r0, [pc, #100]	; 1be2c <bfd_arch_bits_per_address@plt+0xaa78>
   1bdc4:	ldr	r1, [r3]
   1bdc8:	bl	11090 <printf@plt>
   1bdcc:	ldr	r3, [sp, #4]
   1bdd0:	ldr	r2, [r3]
   1bdd4:	cmp	r2, sl
   1bdd8:	bne	1bc3c <bfd_arch_bits_per_address@plt+0xa888>
   1bddc:	b	1bbdc <bfd_arch_bits_per_address@plt+0xa828>
   1bde0:	bl	113a8 <abort@plt>
   1bde4:	andeq	r5, r3, r0, asr r2
   1bde8:	andeq	r5, r3, r0, lsr #2
   1bdec:	andeq	r5, r3, r4, lsr #8
   1bdf0:	andeq	r5, r3, r0, lsr r4
   1bdf4:			; <UNDEFINED> instruction: 0x000344b8
   1bdf8:	andeq	r0, r2, r0, lsr #20
   1bdfc:	andeq	r5, r3, r0, asr r4
   1be00:	andeq	r5, r3, r8, asr r2
   1be04:	ldrdeq	r0, [r2], -r8
   1be08:	andeq	r0, r2, ip, ror sl
   1be0c:	andeq	r0, r2, r4, lsl #19
   1be10:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1be14:	andeq	r0, r2, r8, lsl #20
   1be18:	andeq	r0, r2, r0, lsl #17
   1be1c:	svccc	0x00f00000	; IMB
   1be20:	andeq	r5, r3, r0, lsr #8
   1be24:	andeq	r0, r2, r0, asr #20
   1be28:	andeq	r0, r2, r8, asr sl
   1be2c:	andeq	r0, r2, r8, ror #20
   1be30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be34:	sub	sp, sp, #12
   1be38:	ldr	r7, [pc, #328]	; 1bf88 <bfd_arch_bits_per_address@plt+0xabd4>
   1be3c:	str	r0, [sp, #4]
   1be40:	mov	r5, r1
   1be44:	ldr	r3, [r7]
   1be48:	mov	r6, r2
   1be4c:	tst	r3, #256	; 0x100
   1be50:	bne	1bf50 <bfd_arch_bits_per_address@plt+0xab9c>
   1be54:	add	r5, r5, #3
   1be58:	bic	r5, r5, #3
   1be5c:	cmp	r6, r5
   1be60:	bls	1bf48 <bfd_arch_bits_per_address@plt+0xab94>
   1be64:	ldr	sl, [pc, #288]	; 1bf8c <bfd_arch_bits_per_address@plt+0xabd8>
   1be68:	ldr	r9, [pc, #288]	; 1bf90 <bfd_arch_bits_per_address@plt+0xabdc>
   1be6c:	ldr	r8, [pc, #288]	; 1bf94 <bfd_arch_bits_per_address@plt+0xabe0>
   1be70:	b	1beb4 <bfd_arch_bits_per_address@plt+0xab00>
   1be74:	bic	r4, r4, #-1073741824	; 0xc0000000
   1be78:	add	r3, r5, #-536870912	; 0xe0000000
   1be7c:	eor	r4, r4, #536870912	; 0x20000000
   1be80:	add	r4, r4, r3
   1be84:	mov	r0, r4
   1be88:	bl	198f4 <bfd_arch_bits_per_address@plt+0x8540>
   1be8c:	cmp	r0, #0
   1be90:	bne	1bf00 <bfd_arch_bits_per_address@plt+0xab4c>
   1be94:	ldr	r3, [r7]
   1be98:	tst	r3, #256	; 0x100
   1be9c:	beq	1bea8 <bfd_arch_bits_per_address@plt+0xaaf4>
   1bea0:	ldr	r0, [pc, #240]	; 1bf98 <bfd_arch_bits_per_address@plt+0xabe4>
   1bea4:	bl	111ec <puts@plt>
   1bea8:	add	r5, r5, #4
   1beac:	cmp	r6, r5
   1beb0:	bls	1bf48 <bfd_arch_bits_per_address@plt+0xab94>
   1beb4:	ldr	r3, [r9]
   1beb8:	ldr	r2, [r8]
   1bebc:	ldr	r0, [sl]
   1bec0:	ldr	r3, [r3, #28]
   1bec4:	ldr	r2, [r2, #4]
   1bec8:	sub	r3, r5, r3
   1becc:	add	r0, r0, r3
   1bed0:	ldr	r3, [r2, #40]	; 0x28
   1bed4:	blx	r3
   1bed8:	tst	r0, #-1073741824	; 0xc0000000
   1bedc:	mov	r4, r0
   1bee0:	beq	1bea8 <bfd_arch_bits_per_address@plt+0xaaf4>
   1bee4:	ldr	r3, [r7]
   1bee8:	tst	r3, #256	; 0x100
   1beec:	beq	1be74 <bfd_arch_bits_per_address@plt+0xaac0>
   1bef0:	mov	r1, r5
   1bef4:	ldr	r0, [pc, #160]	; 1bf9c <bfd_arch_bits_per_address@plt+0xabe8>
   1bef8:	bl	11090 <printf@plt>
   1befc:	b	1be74 <bfd_arch_bits_per_address@plt+0xaac0>
   1bf00:	mov	r1, r4
   1bf04:	ldr	r0, [pc, #148]	; 1bfa0 <bfd_arch_bits_per_address@plt+0xabec>
   1bf08:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   1bf0c:	subs	fp, r0, #0
   1bf10:	beq	1be94 <bfd_arch_bits_per_address@plt+0xaae0>
   1bf14:	ldr	r2, [r7]
   1bf18:	ldr	r3, [fp]
   1bf1c:	tst	r2, #256	; 0x100
   1bf20:	bne	1bf68 <bfd_arch_bits_per_address@plt+0xabb4>
   1bf24:	cmp	r4, r3
   1bf28:	bne	1bea8 <bfd_arch_bits_per_address@plt+0xaaf4>
   1bf2c:	mov	r1, fp
   1bf30:	mov	r2, #0
   1bf34:	ldr	r0, [sp, #4]
   1bf38:	add	r5, r5, #4
   1bf3c:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1bf40:	cmp	r6, r5
   1bf44:	bhi	1beb4 <bfd_arch_bits_per_address@plt+0xab00>
   1bf48:	add	sp, sp, #12
   1bf4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf50:	mov	r3, r2
   1bf54:	mov	r2, r1
   1bf58:	ldr	r1, [r0, #8]
   1bf5c:	ldr	r0, [pc, #64]	; 1bfa4 <bfd_arch_bits_per_address@plt+0xabf0>
   1bf60:	bl	11090 <printf@plt>
   1bf64:	b	1be54 <bfd_arch_bits_per_address@plt+0xaaa0>
   1bf68:	ldr	r2, [fp, #8]
   1bf6c:	mov	r1, r4
   1bf70:	ldr	r0, [pc, #48]	; 1bfa8 <bfd_arch_bits_per_address@plt+0xabf4>
   1bf74:	bl	11090 <printf@plt>
   1bf78:	ldr	r3, [fp]
   1bf7c:	cmp	r3, r4
   1bf80:	bne	1be94 <bfd_arch_bits_per_address@plt+0xaae0>
   1bf84:	b	1bf2c <bfd_arch_bits_per_address@plt+0xab78>
   1bf88:	andeq	r5, r3, r0, lsr #2
   1bf8c:	andeq	r5, r3, r4, lsr #8
   1bf90:	andeq	r5, r3, r0, lsr r4
   1bf94:	andeq	r5, r3, r0, lsr #8
   1bf98:	andeq	r0, r2, ip, asr #17
   1bf9c:	andeq	r0, r2, r0, lsr #24
   1bfa0:	andeq	r5, r3, r0, asr r4
   1bfa4:	andeq	r0, r2, r0, lsl #18
   1bfa8:	andeq	r0, r2, ip, lsr ip
   1bfac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfb0:	sub	sp, sp, #12
   1bfb4:	ldr	r4, [pc, #552]	; 1c1e4 <bfd_arch_bits_per_address@plt+0xae30>
   1bfb8:	str	r0, [sp]
   1bfbc:	mov	r5, r1
   1bfc0:	ldr	r3, [r4]
   1bfc4:	mov	r6, r2
   1bfc8:	cmp	r3, #0
   1bfcc:	beq	1c1a8 <bfd_arch_bits_per_address@plt+0xadf4>
   1bfd0:	ldr	r7, [pc, #528]	; 1c1e8 <bfd_arch_bits_per_address@plt+0xae34>
   1bfd4:	ldr	r3, [r7]
   1bfd8:	tst	r3, #256	; 0x100
   1bfdc:	bne	1c180 <bfd_arch_bits_per_address@plt+0xadcc>
   1bfe0:	cmp	r5, r6
   1bfe4:	bcs	1c09c <bfd_arch_bits_per_address@plt+0xace8>
   1bfe8:	ldr	sl, [pc, #508]	; 1c1ec <bfd_arch_bits_per_address@plt+0xae38>
   1bfec:	ldr	r9, [pc, #508]	; 1c1f0 <bfd_arch_bits_per_address@plt+0xae3c>
   1bff0:	ldr	r8, [pc, #508]	; 1c1f4 <bfd_arch_bits_per_address@plt+0xae40>
   1bff4:	ldr	fp, [pc, #508]	; 1c1f8 <bfd_arch_bits_per_address@plt+0xae44>
   1bff8:	b	1c018 <bfd_arch_bits_per_address@plt+0xac64>
   1bffc:	ldr	r3, [pc, #504]	; 1c1fc <bfd_arch_bits_per_address@plt+0xae48>
   1c000:	and	r4, r4, fp
   1c004:	cmp	r4, r3
   1c008:	beq	1c0a4 <bfd_arch_bits_per_address@plt+0xacf0>
   1c00c:	add	r5, r5, #4
   1c010:	cmp	r6, r5
   1c014:	bls	1c09c <bfd_arch_bits_per_address@plt+0xace8>
   1c018:	ldr	r3, [r9]
   1c01c:	ldr	r2, [r8]
   1c020:	ldr	r0, [sl]
   1c024:	ldr	r3, [r3, #28]
   1c028:	ldr	r2, [r2, #4]
   1c02c:	sub	r3, r5, r3
   1c030:	add	r0, r0, r3
   1c034:	ldr	r3, [r2, #40]	; 0x28
   1c038:	blx	r3
   1c03c:	and	r3, r0, #-67108864	; 0xfc000000
   1c040:	cmp	r3, #201326592	; 0xc000000
   1c044:	mov	r4, r0
   1c048:	bne	1bffc <bfd_arch_bits_per_address@plt+0xac48>
   1c04c:	ldr	r3, [r7]
   1c050:	tst	r3, #256	; 0x100
   1c054:	bne	1c10c <bfd_arch_bits_per_address@plt+0xad58>
   1c058:	lsl	r4, r4, #2
   1c05c:	and	r3, r5, #-268435456	; 0xf0000000
   1c060:	bic	r4, r4, #-268435453	; 0xf0000003
   1c064:	orr	r4, r4, r3
   1c068:	mov	r0, r4
   1c06c:	bl	198f4 <bfd_arch_bits_per_address@plt+0x8540>
   1c070:	cmp	r0, #0
   1c074:	bne	1c0c4 <bfd_arch_bits_per_address@plt+0xad10>
   1c078:	ldr	r3, [r7]
   1c07c:	and	r3, r3, #256	; 0x100
   1c080:	cmp	r3, #0
   1c084:	beq	1c00c <bfd_arch_bits_per_address@plt+0xac58>
   1c088:	ldr	r0, [pc, #368]	; 1c200 <bfd_arch_bits_per_address@plt+0xae4c>
   1c08c:	add	r5, r5, #4
   1c090:	bl	111ec <puts@plt>
   1c094:	cmp	r6, r5
   1c098:	bhi	1c018 <bfd_arch_bits_per_address@plt+0xac64>
   1c09c:	add	sp, sp, #12
   1c0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0a4:	ldr	r3, [r7]
   1c0a8:	tst	r3, #256	; 0x100
   1c0ac:	bne	1c128 <bfd_arch_bits_per_address@plt+0xad74>
   1c0b0:	mov	r2, #0
   1c0b4:	ldr	r1, [pc, #328]	; 1c204 <bfd_arch_bits_per_address@plt+0xae50>
   1c0b8:	ldr	r0, [sp]
   1c0bc:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1c0c0:	b	1c00c <bfd_arch_bits_per_address@plt+0xac58>
   1c0c4:	mov	r1, r4
   1c0c8:	ldr	r0, [pc, #312]	; 1c208 <bfd_arch_bits_per_address@plt+0xae54>
   1c0cc:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   1c0d0:	subs	r3, r0, #0
   1c0d4:	str	r3, [sp, #4]
   1c0d8:	beq	1c078 <bfd_arch_bits_per_address@plt+0xacc4>
   1c0dc:	ldr	r2, [r7]
   1c0e0:	ldr	r3, [sp, #4]
   1c0e4:	tst	r2, #256	; 0x100
   1c0e8:	ldr	r3, [r3]
   1c0ec:	bne	1c144 <bfd_arch_bits_per_address@plt+0xad90>
   1c0f0:	cmp	r4, r3
   1c0f4:	bne	1c00c <bfd_arch_bits_per_address@plt+0xac58>
   1c0f8:	ldr	r1, [sp, #4]
   1c0fc:	mov	r2, #0
   1c100:	ldr	r0, [sp]
   1c104:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1c108:	b	1c00c <bfd_arch_bits_per_address@plt+0xac58>
   1c10c:	mov	r2, #5
   1c110:	ldr	r1, [pc, #244]	; 1c20c <bfd_arch_bits_per_address@plt+0xae58>
   1c114:	ldr	r0, [pc, #244]	; 1c210 <bfd_arch_bits_per_address@plt+0xae5c>
   1c118:	bl	11120 <dcgettext@plt>
   1c11c:	mov	r1, r5
   1c120:	bl	11090 <printf@plt>
   1c124:	b	1c058 <bfd_arch_bits_per_address@plt+0xaca4>
   1c128:	mov	r2, #5
   1c12c:	ldr	r1, [pc, #224]	; 1c214 <bfd_arch_bits_per_address@plt+0xae60>
   1c130:	ldr	r0, [pc, #216]	; 1c210 <bfd_arch_bits_per_address@plt+0xae5c>
   1c134:	bl	11120 <dcgettext@plt>
   1c138:	mov	r1, r5
   1c13c:	bl	11090 <printf@plt>
   1c140:	b	1c0b0 <bfd_arch_bits_per_address@plt+0xacfc>
   1c144:	ldr	r2, [sp, #4]
   1c148:	mov	r1, r4
   1c14c:	ldr	r0, [pc, #196]	; 1c218 <bfd_arch_bits_per_address@plt+0xae64>
   1c150:	ldr	r2, [r2, #8]
   1c154:	bl	11090 <printf@plt>
   1c158:	ldr	r2, [sp, #4]
   1c15c:	ldr	r3, [r2]
   1c160:	cmp	r3, r4
   1c164:	ldr	r3, [r7]
   1c168:	bne	1c07c <bfd_arch_bits_per_address@plt+0xacc8>
   1c16c:	tst	r3, #256	; 0x100
   1c170:	beq	1c0f8 <bfd_arch_bits_per_address@plt+0xad44>
   1c174:	mov	r0, #10
   1c178:	bl	11294 <putchar@plt>
   1c17c:	b	1c0f8 <bfd_arch_bits_per_address@plt+0xad44>
   1c180:	mov	r2, #5
   1c184:	ldr	r1, [pc, #144]	; 1c21c <bfd_arch_bits_per_address@plt+0xae68>
   1c188:	ldr	r0, [pc, #128]	; 1c210 <bfd_arch_bits_per_address@plt+0xae5c>
   1c18c:	bl	11120 <dcgettext@plt>
   1c190:	ldr	r1, [sp]
   1c194:	mov	r3, r6
   1c198:	mov	r2, r5
   1c19c:	ldr	r1, [r1, #8]
   1c1a0:	bl	11090 <printf@plt>
   1c1a4:	b	1bfe0 <bfd_arch_bits_per_address@plt+0xac2c>
   1c1a8:	mov	r7, r4
   1c1ac:	mov	r3, #1
   1c1b0:	str	r3, [r7], #8
   1c1b4:	mov	r0, r7
   1c1b8:	bl	1a3fc <bfd_arch_bits_per_address@plt+0x9048>
   1c1bc:	mov	r2, #5
   1c1c0:	ldr	r1, [pc, #88]	; 1c220 <bfd_arch_bits_per_address@plt+0xae6c>
   1c1c4:	ldr	r0, [pc, #68]	; 1c210 <bfd_arch_bits_per_address@plt+0xae5c>
   1c1c8:	bl	11120 <dcgettext@plt>
   1c1cc:	ldr	r3, [pc, #80]	; 1c224 <bfd_arch_bits_per_address@plt+0xae70>
   1c1d0:	mov	r2, #0
   1c1d4:	str	r7, [r4, #204]	; 0xcc
   1c1d8:	strd	r2, [r4, #176]	; 0xb0
   1c1dc:	str	r0, [r4, #16]
   1c1e0:	b	1bfd0 <bfd_arch_bits_per_address@plt+0xac1c>
   1c1e4:	andeq	r5, r3, r0, lsr r3
   1c1e8:	andeq	r5, r3, r0, lsr #2
   1c1ec:	andeq	r5, r3, r4, lsr #8
   1c1f0:	andeq	r5, r3, r0, lsr r4
   1c1f4:	andeq	r5, r3, r0, lsr #8
   1c1f8:	stc2	8, cr15, [r0], {63}	; 0x3f
   1c1fc:	andeq	pc, r0, r9, lsl #16
   1c200:	andeq	r0, r2, ip, asr #17
   1c204:	andeq	r5, r3, r8, lsr r3
   1c208:	andeq	r5, r3, r0, asr r4
   1c20c:	andeq	r0, r2, r4, ror #24
   1c210:	andeq	lr, r1, r0, asr #13
   1c214:	andeq	r0, r2, ip, ror ip
   1c218:	andeq	r0, r2, r4, ror #18
   1c21c:	andeq	r0, r2, r0, lsl #18
   1c220:	andeq	r0, r2, ip, ror #17
   1c224:	svccc	0x00f00000	; IMB
   1c228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c22c:	sub	sp, sp, #12
   1c230:	ldr	sl, [pc, #320]	; 1c378 <bfd_arch_bits_per_address@plt+0xafc4>
   1c234:	str	r0, [sp, #4]
   1c238:	mov	r4, r1
   1c23c:	ldr	r3, [sl]
   1c240:	mov	r6, r2
   1c244:	tst	r3, #256	; 0x100
   1c248:	bne	1c360 <bfd_arch_bits_per_address@plt+0xafac>
   1c24c:	cmp	r4, r6
   1c250:	bcs	1c2e8 <bfd_arch_bits_per_address@plt+0xaf34>
   1c254:	ldr	r9, [pc, #288]	; 1c37c <bfd_arch_bits_per_address@plt+0xafc8>
   1c258:	ldr	r8, [pc, #288]	; 1c380 <bfd_arch_bits_per_address@plt+0xafcc>
   1c25c:	ldr	r7, [pc, #288]	; 1c384 <bfd_arch_bits_per_address@plt+0xafd0>
   1c260:	b	1c270 <bfd_arch_bits_per_address@plt+0xaebc>
   1c264:	add	r4, r4, #4
   1c268:	cmp	r6, r4
   1c26c:	bls	1c2e8 <bfd_arch_bits_per_address@plt+0xaf34>
   1c270:	ldr	r3, [r8]
   1c274:	ldr	r2, [r7]
   1c278:	ldr	r0, [r9]
   1c27c:	ldr	r3, [r3, #28]
   1c280:	ldr	r2, [r2, #4]
   1c284:	sub	r3, r4, r3
   1c288:	add	r0, r0, r3
   1c28c:	ldr	r3, [r2, #40]	; 0x28
   1c290:	blx	r3
   1c294:	and	r3, r0, #2080374784	; 0x7c000000
   1c298:	cmp	r3, #335544320	; 0x14000000
   1c29c:	mov	r5, r0
   1c2a0:	bne	1c264 <bfd_arch_bits_per_address@plt+0xaeb0>
   1c2a4:	ldr	r3, [sl]
   1c2a8:	tst	r3, #256	; 0x100
   1c2ac:	bne	1c330 <bfd_arch_bits_per_address@plt+0xaf7c>
   1c2b0:	lsl	r5, r5, #6
   1c2b4:	add	r5, r4, r5, asr #4
   1c2b8:	mov	r0, r5
   1c2bc:	bl	198f4 <bfd_arch_bits_per_address@plt+0x8540>
   1c2c0:	cmp	r0, #0
   1c2c4:	bne	1c2f0 <bfd_arch_bits_per_address@plt+0xaf3c>
   1c2c8:	ldr	r3, [sl]
   1c2cc:	tst	r3, #256	; 0x100
   1c2d0:	beq	1c264 <bfd_arch_bits_per_address@plt+0xaeb0>
   1c2d4:	ldr	r0, [pc, #172]	; 1c388 <bfd_arch_bits_per_address@plt+0xafd4>
   1c2d8:	add	r4, r4, #4
   1c2dc:	bl	111ec <puts@plt>
   1c2e0:	cmp	r6, r4
   1c2e4:	bhi	1c270 <bfd_arch_bits_per_address@plt+0xaebc>
   1c2e8:	add	sp, sp, #12
   1c2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2f0:	mov	r1, r5
   1c2f4:	ldr	r0, [pc, #144]	; 1c38c <bfd_arch_bits_per_address@plt+0xafd8>
   1c2f8:	bl	1a8a4 <bfd_arch_bits_per_address@plt+0x94f0>
   1c2fc:	subs	fp, r0, #0
   1c300:	beq	1c2c8 <bfd_arch_bits_per_address@plt+0xaf14>
   1c304:	ldr	r2, [sl]
   1c308:	ldr	r3, [fp]
   1c30c:	tst	r2, #256	; 0x100
   1c310:	bne	1c340 <bfd_arch_bits_per_address@plt+0xaf8c>
   1c314:	cmp	r5, r3
   1c318:	bne	1c264 <bfd_arch_bits_per_address@plt+0xaeb0>
   1c31c:	mov	r1, fp
   1c320:	mov	r2, #0
   1c324:	ldr	r0, [sp, #4]
   1c328:	bl	13438 <bfd_arch_bits_per_address@plt+0x2084>
   1c32c:	b	1c264 <bfd_arch_bits_per_address@plt+0xaeb0>
   1c330:	mov	r1, r4
   1c334:	ldr	r0, [pc, #84]	; 1c390 <bfd_arch_bits_per_address@plt+0xafdc>
   1c338:	bl	11090 <printf@plt>
   1c33c:	b	1c2b0 <bfd_arch_bits_per_address@plt+0xaefc>
   1c340:	ldr	r2, [fp, #8]
   1c344:	mov	r1, r5
   1c348:	ldr	r0, [pc, #68]	; 1c394 <bfd_arch_bits_per_address@plt+0xafe0>
   1c34c:	bl	11090 <printf@plt>
   1c350:	ldr	r3, [fp]
   1c354:	cmp	r3, r5
   1c358:	bne	1c2c8 <bfd_arch_bits_per_address@plt+0xaf14>
   1c35c:	b	1c31c <bfd_arch_bits_per_address@plt+0xaf68>
   1c360:	mov	r3, r2
   1c364:	mov	r2, r1
   1c368:	ldr	r1, [r0, #8]
   1c36c:	ldr	r0, [pc, #36]	; 1c398 <bfd_arch_bits_per_address@plt+0xafe4>
   1c370:	bl	11090 <printf@plt>
   1c374:	b	1c24c <bfd_arch_bits_per_address@plt+0xae98>
   1c378:	andeq	r5, r3, r0, lsr #2
   1c37c:	andeq	r5, r3, r4, lsr #8
   1c380:	andeq	r5, r3, r0, lsr r4
   1c384:	andeq	r5, r3, r0, lsr #8
   1c388:	andeq	r0, r2, ip, asr #17
   1c38c:	andeq	r5, r3, r0, asr r4
   1c390:	muleq	r2, r8, ip
   1c394:	andeq	r0, r2, ip, lsr ip
   1c398:	andeq	r0, r2, r0, lsl #18
   1c39c:	push	{r4, lr}
   1c3a0:	mov	r1, r0
   1c3a4:	mov	r4, r0
   1c3a8:	mov	r0, #10
   1c3ac:	bl	11300 <fputc@plt>
   1c3b0:	mov	r3, r4
   1c3b4:	mov	r2, #59	; 0x3b
   1c3b8:	mov	r1, #1
   1c3bc:	ldr	r0, [pc, #568]	; 1c5fc <bfd_arch_bits_per_address@plt+0xb248>
   1c3c0:	bl	11174 <fwrite@plt>
   1c3c4:	mov	r3, r4
   1c3c8:	mov	r2, #42	; 0x2a
   1c3cc:	mov	r1, #1
   1c3d0:	ldr	r0, [pc, #552]	; 1c600 <bfd_arch_bits_per_address@plt+0xb24c>
   1c3d4:	bl	11174 <fwrite@plt>
   1c3d8:	mov	r1, r4
   1c3dc:	mov	r0, #10
   1c3e0:	bl	11300 <fputc@plt>
   1c3e4:	mov	r3, r4
   1c3e8:	mov	r2, #60	; 0x3c
   1c3ec:	mov	r1, #1
   1c3f0:	ldr	r0, [pc, #524]	; 1c604 <bfd_arch_bits_per_address@plt+0xb250>
   1c3f4:	bl	11174 <fwrite@plt>
   1c3f8:	mov	r3, r4
   1c3fc:	mov	r2, #59	; 0x3b
   1c400:	mov	r1, #1
   1c404:	ldr	r0, [pc, #508]	; 1c608 <bfd_arch_bits_per_address@plt+0xb254>
   1c408:	bl	11174 <fwrite@plt>
   1c40c:	mov	r1, r4
   1c410:	mov	r0, #10
   1c414:	bl	11300 <fputc@plt>
   1c418:	mov	r3, r4
   1c41c:	mov	r2, #55	; 0x37
   1c420:	mov	r1, #1
   1c424:	ldr	r0, [pc, #480]	; 1c60c <bfd_arch_bits_per_address@plt+0xb258>
   1c428:	bl	11174 <fwrite@plt>
   1c42c:	mov	r3, r4
   1c430:	mov	r2, #60	; 0x3c
   1c434:	mov	r1, #1
   1c438:	ldr	r0, [pc, #464]	; 1c610 <bfd_arch_bits_per_address@plt+0xb25c>
   1c43c:	bl	11174 <fwrite@plt>
   1c440:	mov	r3, r4
   1c444:	mov	r2, #20
   1c448:	mov	r1, #1
   1c44c:	ldr	r0, [pc, #448]	; 1c614 <bfd_arch_bits_per_address@plt+0xb260>
   1c450:	bl	11174 <fwrite@plt>
   1c454:	mov	r1, r4
   1c458:	mov	r0, #10
   1c45c:	bl	11300 <fputc@plt>
   1c460:	mov	r3, r4
   1c464:	mov	r2, #61	; 0x3d
   1c468:	mov	r1, #1
   1c46c:	ldr	r0, [pc, #420]	; 1c618 <bfd_arch_bits_per_address@plt+0xb264>
   1c470:	bl	11174 <fwrite@plt>
   1c474:	mov	r3, r4
   1c478:	mov	r2, #50	; 0x32
   1c47c:	mov	r1, #1
   1c480:	ldr	r0, [pc, #404]	; 1c61c <bfd_arch_bits_per_address@plt+0xb268>
   1c484:	bl	11174 <fwrite@plt>
   1c488:	mov	r1, r4
   1c48c:	mov	r0, #10
   1c490:	bl	11300 <fputc@plt>
   1c494:	mov	r3, r4
   1c498:	mov	r2, #60	; 0x3c
   1c49c:	mov	r1, #1
   1c4a0:	ldr	r0, [pc, #376]	; 1c620 <bfd_arch_bits_per_address@plt+0xb26c>
   1c4a4:	bl	11174 <fwrite@plt>
   1c4a8:	mov	r3, r4
   1c4ac:	mov	r2, #60	; 0x3c
   1c4b0:	mov	r1, #1
   1c4b4:	ldr	r0, [pc, #360]	; 1c624 <bfd_arch_bits_per_address@plt+0xb270>
   1c4b8:	bl	11174 <fwrite@plt>
   1c4bc:	mov	r3, r4
   1c4c0:	mov	r2, #16
   1c4c4:	mov	r1, #1
   1c4c8:	ldr	r0, [pc, #344]	; 1c628 <bfd_arch_bits_per_address@plt+0xb274>
   1c4cc:	bl	11174 <fwrite@plt>
   1c4d0:	mov	r1, r4
   1c4d4:	mov	r0, #10
   1c4d8:	bl	11300 <fputc@plt>
   1c4dc:	mov	r3, r4
   1c4e0:	mov	r2, #60	; 0x3c
   1c4e4:	mov	r1, #1
   1c4e8:	ldr	r0, [pc, #316]	; 1c62c <bfd_arch_bits_per_address@plt+0xb278>
   1c4ec:	bl	11174 <fwrite@plt>
   1c4f0:	mov	r3, r4
   1c4f4:	mov	r2, #58	; 0x3a
   1c4f8:	mov	r1, #1
   1c4fc:	ldr	r0, [pc, #300]	; 1c630 <bfd_arch_bits_per_address@plt+0xb27c>
   1c500:	bl	11174 <fwrite@plt>
   1c504:	mov	r3, r4
   1c508:	mov	r2, #38	; 0x26
   1c50c:	mov	r1, #1
   1c510:	ldr	r0, [pc, #284]	; 1c634 <bfd_arch_bits_per_address@plt+0xb280>
   1c514:	bl	11174 <fwrite@plt>
   1c518:	mov	r1, r4
   1c51c:	mov	r0, #10
   1c520:	bl	11300 <fputc@plt>
   1c524:	mov	r3, r4
   1c528:	mov	r2, #61	; 0x3d
   1c52c:	mov	r1, #1
   1c530:	ldr	r0, [pc, #256]	; 1c638 <bfd_arch_bits_per_address@plt+0xb284>
   1c534:	bl	11174 <fwrite@plt>
   1c538:	mov	r3, r4
   1c53c:	mov	r2, #61	; 0x3d
   1c540:	mov	r1, #1
   1c544:	ldr	r0, [pc, #240]	; 1c63c <bfd_arch_bits_per_address@plt+0xb288>
   1c548:	bl	11174 <fwrite@plt>
   1c54c:	mov	r3, r4
   1c550:	mov	r2, #55	; 0x37
   1c554:	mov	r1, #1
   1c558:	ldr	r0, [pc, #224]	; 1c640 <bfd_arch_bits_per_address@plt+0xb28c>
   1c55c:	bl	11174 <fwrite@plt>
   1c560:	mov	r3, r4
   1c564:	mov	r2, #53	; 0x35
   1c568:	mov	r1, #1
   1c56c:	ldr	r0, [pc, #208]	; 1c644 <bfd_arch_bits_per_address@plt+0xb290>
   1c570:	bl	11174 <fwrite@plt>
   1c574:	mov	r3, r4
   1c578:	mov	r2, #48	; 0x30
   1c57c:	mov	r1, #1
   1c580:	ldr	r0, [pc, #192]	; 1c648 <bfd_arch_bits_per_address@plt+0xb294>
   1c584:	bl	11174 <fwrite@plt>
   1c588:	mov	r3, r4
   1c58c:	mov	r2, #2
   1c590:	mov	r1, #1
   1c594:	ldr	r0, [pc, #176]	; 1c64c <bfd_arch_bits_per_address@plt+0xb298>
   1c598:	bl	11174 <fwrite@plt>
   1c59c:	mov	r3, r4
   1c5a0:	mov	r2, #55	; 0x37
   1c5a4:	mov	r1, #1
   1c5a8:	ldr	r0, [pc, #160]	; 1c650 <bfd_arch_bits_per_address@plt+0xb29c>
   1c5ac:	bl	11174 <fwrite@plt>
   1c5b0:	mov	r1, r4
   1c5b4:	mov	r0, #10
   1c5b8:	bl	11300 <fputc@plt>
   1c5bc:	mov	r3, r4
   1c5c0:	mov	r2, #69	; 0x45
   1c5c4:	mov	r1, #1
   1c5c8:	ldr	r0, [pc, #132]	; 1c654 <bfd_arch_bits_per_address@plt+0xb2a0>
   1c5cc:	bl	11174 <fwrite@plt>
   1c5d0:	mov	r3, r4
   1c5d4:	mov	r2, #67	; 0x43
   1c5d8:	mov	r1, #1
   1c5dc:	ldr	r0, [pc, #116]	; 1c658 <bfd_arch_bits_per_address@plt+0xb2a4>
   1c5e0:	bl	11174 <fwrite@plt>
   1c5e4:	mov	r3, r4
   1c5e8:	mov	r2, #38	; 0x26
   1c5ec:	mov	r1, #1
   1c5f0:	ldr	r0, [pc, #100]	; 1c65c <bfd_arch_bits_per_address@plt+0xb2a8>
   1c5f4:	pop	{r4, lr}
   1c5f8:	b	11174 <fwrite@plt>
   1c5fc:			; <UNDEFINED> instruction: 0x00020cb0
   1c600:	andeq	r0, r2, ip, ror #25
   1c604:	andeq	r0, r2, r8, lsl sp
   1c608:	andeq	r0, r2, r8, asr sp
   1c60c:	muleq	r2, r4, sp
   1c610:	andeq	r0, r2, ip, asr #27
   1c614:	andeq	r0, r2, ip, lsl #28
   1c618:	andeq	r0, r2, r4, lsr #28
   1c61c:	andeq	r0, r2, r4, ror #28
   1c620:	muleq	r2, r8, lr
   1c624:	ldrdeq	r0, [r2], -r8
   1c628:	andeq	r0, r2, r8, lsl pc
   1c62c:	andeq	r0, r2, ip, lsr #30
   1c630:	andeq	r0, r2, ip, ror #30
   1c634:	andeq	r0, r2, r8, lsr #31
   1c638:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1c63c:	andeq	r1, r2, r0, lsl r0
   1c640:	andeq	r1, r2, r0, asr r0
   1c644:	andeq	r1, r2, r8, lsl #1
   1c648:	andeq	r1, r2, r0, asr #1
   1c64c:	andeq	r0, r2, r0, lsr r5
   1c650:	strdeq	r1, [r2], -r4
   1c654:	andeq	r1, r2, ip, lsr #2
   1c658:	andeq	r1, r2, r4, ror r1
   1c65c:			; <UNDEFINED> instruction: 0x000211b8
   1c660:	push	{r4, r5, r6, lr}
   1c664:	mov	r1, r0
   1c668:	mov	r4, r0
   1c66c:	mov	r0, #10
   1c670:	bl	11300 <fputc@plt>
   1c674:	mov	r1, r4
   1c678:	mov	r0, #10
   1c67c:	bl	11300 <fputc@plt>
   1c680:	mov	r1, r4
   1c684:	mov	r0, #10
   1c688:	bl	11300 <fputc@plt>
   1c68c:	mov	r3, r4
   1c690:	mov	r2, #20
   1c694:	mov	r1, #1
   1c698:	ldr	r0, [pc, #1908]	; 1ce14 <bfd_arch_bits_per_address@plt+0xba60>
   1c69c:	bl	11174 <fwrite@plt>
   1c6a0:	mov	r3, r4
   1c6a4:	mov	r2, #60	; 0x3c
   1c6a8:	mov	r1, #1
   1c6ac:	ldr	r0, [pc, #1892]	; 1ce18 <bfd_arch_bits_per_address@plt+0xba64>
   1c6b0:	bl	11174 <fwrite@plt>
   1c6b4:	mov	r3, r4
   1c6b8:	mov	r2, #28
   1c6bc:	mov	r1, #1
   1c6c0:	ldr	r0, [pc, #1876]	; 1ce1c <bfd_arch_bits_per_address@plt+0xba68>
   1c6c4:	bl	11174 <fwrite@plt>
   1c6c8:	mov	r1, r4
   1c6cc:	mov	r0, #10
   1c6d0:	bl	11300 <fputc@plt>
   1c6d4:	ldr	r5, [pc, #1860]	; 1ce20 <bfd_arch_bits_per_address@plt+0xba6c>
   1c6d8:	mov	r3, r4
   1c6dc:	mov	r2, #28
   1c6e0:	mov	r1, #1
   1c6e4:	ldr	r0, [pc, #1848]	; 1ce24 <bfd_arch_bits_per_address@plt+0xba70>
   1c6e8:	bl	11174 <fwrite@plt>
   1c6ec:	mov	r1, r4
   1c6f0:	mov	r0, #10
   1c6f4:	bl	11300 <fputc@plt>
   1c6f8:	mov	r3, r4
   1c6fc:	mov	r0, r5
   1c700:	mov	r2, #54	; 0x36
   1c704:	mov	r1, #1
   1c708:	bl	11174 <fwrite@plt>
   1c70c:	mov	r3, r4
   1c710:	mov	r2, #57	; 0x39
   1c714:	mov	r1, #1
   1c718:	ldr	r0, [pc, #1800]	; 1ce28 <bfd_arch_bits_per_address@plt+0xba74>
   1c71c:	bl	11174 <fwrite@plt>
   1c720:	mov	r1, r4
   1c724:	mov	r0, #10
   1c728:	bl	11300 <fputc@plt>
   1c72c:	mov	r3, r4
   1c730:	mov	r2, #58	; 0x3a
   1c734:	mov	r1, #1
   1c738:	ldr	r0, [pc, #1772]	; 1ce2c <bfd_arch_bits_per_address@plt+0xba78>
   1c73c:	bl	11174 <fwrite@plt>
   1c740:	mov	r3, r4
   1c744:	mov	r2, #49	; 0x31
   1c748:	mov	r1, #1
   1c74c:	ldr	r0, [pc, #1756]	; 1ce30 <bfd_arch_bits_per_address@plt+0xba7c>
   1c750:	bl	11174 <fwrite@plt>
   1c754:	mov	r3, r4
   1c758:	mov	r2, #23
   1c75c:	mov	r1, #1
   1c760:	ldr	r0, [pc, #1740]	; 1ce34 <bfd_arch_bits_per_address@plt+0xba80>
   1c764:	bl	11174 <fwrite@plt>
   1c768:	mov	r1, r4
   1c76c:	mov	r0, #10
   1c770:	bl	11300 <fputc@plt>
   1c774:	mov	r3, r4
   1c778:	mov	r2, #55	; 0x37
   1c77c:	mov	r1, #1
   1c780:	ldr	r0, [pc, #1712]	; 1ce38 <bfd_arch_bits_per_address@plt+0xba84>
   1c784:	bl	11174 <fwrite@plt>
   1c788:	mov	r3, r4
   1c78c:	mov	r2, #18
   1c790:	mov	r1, #1
   1c794:	ldr	r0, [pc, #1696]	; 1ce3c <bfd_arch_bits_per_address@plt+0xba88>
   1c798:	bl	11174 <fwrite@plt>
   1c79c:	mov	r1, r4
   1c7a0:	mov	r0, #10
   1c7a4:	bl	11300 <fputc@plt>
   1c7a8:	mov	r3, r4
   1c7ac:	mov	r2, #12
   1c7b0:	mov	r1, #1
   1c7b4:	ldr	r0, [pc, #1668]	; 1ce40 <bfd_arch_bits_per_address@plt+0xba8c>
   1c7b8:	bl	11174 <fwrite@plt>
   1c7bc:	mov	r3, r4
   1c7c0:	mov	r2, #60	; 0x3c
   1c7c4:	mov	r1, #1
   1c7c8:	ldr	r0, [pc, #1652]	; 1ce44 <bfd_arch_bits_per_address@plt+0xba90>
   1c7cc:	bl	11174 <fwrite@plt>
   1c7d0:	mov	r3, r4
   1c7d4:	mov	r2, #52	; 0x34
   1c7d8:	mov	r1, #1
   1c7dc:	ldr	r0, [pc, #1636]	; 1ce48 <bfd_arch_bits_per_address@plt+0xba94>
   1c7e0:	bl	11174 <fwrite@plt>
   1c7e4:	mov	r1, r4
   1c7e8:	mov	r0, #10
   1c7ec:	bl	11300 <fputc@plt>
   1c7f0:	mov	r3, r4
   1c7f4:	mov	r2, #61	; 0x3d
   1c7f8:	mov	r1, #1
   1c7fc:	ldr	r0, [pc, #1608]	; 1ce4c <bfd_arch_bits_per_address@plt+0xba98>
   1c800:	bl	11174 <fwrite@plt>
   1c804:	mov	r3, r4
   1c808:	mov	r2, #33	; 0x21
   1c80c:	mov	r1, #1
   1c810:	ldr	r0, [pc, #1592]	; 1ce50 <bfd_arch_bits_per_address@plt+0xba9c>
   1c814:	bl	11174 <fwrite@plt>
   1c818:	mov	r1, r4
   1c81c:	mov	r0, #10
   1c820:	bl	11300 <fputc@plt>
   1c824:	mov	r3, r4
   1c828:	mov	r2, #57	; 0x39
   1c82c:	mov	r1, #1
   1c830:	ldr	r0, [pc, #1564]	; 1ce54 <bfd_arch_bits_per_address@plt+0xbaa0>
   1c834:	bl	11174 <fwrite@plt>
   1c838:	mov	r3, r4
   1c83c:	mov	r2, #23
   1c840:	mov	r1, #1
   1c844:	ldr	r0, [pc, #1548]	; 1ce58 <bfd_arch_bits_per_address@plt+0xbaa4>
   1c848:	bl	11174 <fwrite@plt>
   1c84c:	mov	r1, r4
   1c850:	mov	r0, #10
   1c854:	bl	11300 <fputc@plt>
   1c858:	mov	r3, r4
   1c85c:	mov	r2, #58	; 0x3a
   1c860:	mov	r1, #1
   1c864:	ldr	r0, [pc, #1520]	; 1ce5c <bfd_arch_bits_per_address@plt+0xbaa8>
   1c868:	bl	11174 <fwrite@plt>
   1c86c:	mov	r3, r4
   1c870:	mov	r2, #45	; 0x2d
   1c874:	mov	r1, #1
   1c878:	ldr	r0, [pc, #1504]	; 1ce60 <bfd_arch_bits_per_address@plt+0xbaac>
   1c87c:	bl	11174 <fwrite@plt>
   1c880:	mov	r1, r4
   1c884:	mov	r0, #10
   1c888:	bl	11300 <fputc@plt>
   1c88c:	mov	r3, r4
   1c890:	mov	r0, r5
   1c894:	mov	r2, #54	; 0x36
   1c898:	mov	r1, #1
   1c89c:	bl	11174 <fwrite@plt>
   1c8a0:	mov	r3, r4
   1c8a4:	mov	r2, #45	; 0x2d
   1c8a8:	mov	r1, #1
   1c8ac:	ldr	r0, [pc, #1456]	; 1ce64 <bfd_arch_bits_per_address@plt+0xbab0>
   1c8b0:	bl	11174 <fwrite@plt>
   1c8b4:	mov	r1, r4
   1c8b8:	mov	r0, #10
   1c8bc:	bl	11300 <fputc@plt>
   1c8c0:	mov	r1, r4
   1c8c4:	mov	r0, #10
   1c8c8:	bl	11300 <fputc@plt>
   1c8cc:	mov	r1, r4
   1c8d0:	mov	r0, #10
   1c8d4:	bl	11300 <fputc@plt>
   1c8d8:	mov	r3, r4
   1c8dc:	mov	r2, #27
   1c8e0:	mov	r1, #1
   1c8e4:	ldr	r0, [pc, #1404]	; 1ce68 <bfd_arch_bits_per_address@plt+0xbab4>
   1c8e8:	bl	11174 <fwrite@plt>
   1c8ec:	mov	r1, r4
   1c8f0:	mov	r0, #10
   1c8f4:	bl	11300 <fputc@plt>
   1c8f8:	mov	r3, r4
   1c8fc:	mov	r2, #61	; 0x3d
   1c900:	mov	r1, #1
   1c904:	ldr	r0, [pc, #1376]	; 1ce6c <bfd_arch_bits_per_address@plt+0xbab8>
   1c908:	bl	11174 <fwrite@plt>
   1c90c:	mov	r3, r4
   1c910:	mov	r2, #50	; 0x32
   1c914:	mov	r1, #1
   1c918:	ldr	r0, [pc, #1360]	; 1ce70 <bfd_arch_bits_per_address@plt+0xbabc>
   1c91c:	bl	11174 <fwrite@plt>
   1c920:	mov	r1, r4
   1c924:	mov	r0, #10
   1c928:	bl	11300 <fputc@plt>
   1c92c:	mov	r3, r4
   1c930:	mov	r2, #13
   1c934:	mov	r1, #1
   1c938:	ldr	r0, [pc, #1332]	; 1ce74 <bfd_arch_bits_per_address@plt+0xbac0>
   1c93c:	bl	11174 <fwrite@plt>
   1c940:	mov	r3, r4
   1c944:	mov	r2, #51	; 0x33
   1c948:	mov	r1, #1
   1c94c:	ldr	r0, [pc, #1316]	; 1ce78 <bfd_arch_bits_per_address@plt+0xbac4>
   1c950:	bl	11174 <fwrite@plt>
   1c954:	mov	r3, r4
   1c958:	mov	r2, #58	; 0x3a
   1c95c:	mov	r1, #1
   1c960:	ldr	r0, [pc, #1300]	; 1ce7c <bfd_arch_bits_per_address@plt+0xbac8>
   1c964:	bl	11174 <fwrite@plt>
   1c968:	mov	r3, r4
   1c96c:	mov	r2, #18
   1c970:	mov	r1, #1
   1c974:	ldr	r0, [pc, #1284]	; 1ce80 <bfd_arch_bits_per_address@plt+0xbacc>
   1c978:	bl	11174 <fwrite@plt>
   1c97c:	mov	r1, r4
   1c980:	mov	r0, #10
   1c984:	bl	11300 <fputc@plt>
   1c988:	mov	r3, r4
   1c98c:	mov	r2, #57	; 0x39
   1c990:	mov	r1, #1
   1c994:	ldr	r0, [pc, #1256]	; 1ce84 <bfd_arch_bits_per_address@plt+0xbad0>
   1c998:	bl	11174 <fwrite@plt>
   1c99c:	mov	r3, r4
   1c9a0:	mov	r2, #53	; 0x35
   1c9a4:	mov	r1, #1
   1c9a8:	ldr	r0, [pc, #1240]	; 1ce88 <bfd_arch_bits_per_address@plt+0xbad4>
   1c9ac:	bl	11174 <fwrite@plt>
   1c9b0:	mov	r3, r4
   1c9b4:	mov	r2, #59	; 0x3b
   1c9b8:	mov	r1, #1
   1c9bc:	ldr	r0, [pc, #1224]	; 1ce8c <bfd_arch_bits_per_address@plt+0xbad8>
   1c9c0:	bl	11174 <fwrite@plt>
   1c9c4:	mov	r3, r4
   1c9c8:	mov	r2, #23
   1c9cc:	mov	r1, #1
   1c9d0:	ldr	r0, [pc, #1208]	; 1ce90 <bfd_arch_bits_per_address@plt+0xbadc>
   1c9d4:	bl	11174 <fwrite@plt>
   1c9d8:	mov	r1, r4
   1c9dc:	mov	r0, #10
   1c9e0:	bl	11300 <fputc@plt>
   1c9e4:	mov	r3, r4
   1c9e8:	mov	r2, #58	; 0x3a
   1c9ec:	mov	r1, #1
   1c9f0:	ldr	r0, [pc, #1180]	; 1ce94 <bfd_arch_bits_per_address@plt+0xbae0>
   1c9f4:	bl	11174 <fwrite@plt>
   1c9f8:	mov	r3, r4
   1c9fc:	mov	r2, #58	; 0x3a
   1ca00:	mov	r1, #1
   1ca04:	ldr	r0, [pc, #1164]	; 1ce98 <bfd_arch_bits_per_address@plt+0xbae4>
   1ca08:	bl	11174 <fwrite@plt>
   1ca0c:	mov	r3, r4
   1ca10:	mov	r2, #36	; 0x24
   1ca14:	mov	r1, #1
   1ca18:	ldr	r0, [pc, #1148]	; 1ce9c <bfd_arch_bits_per_address@plt+0xbae8>
   1ca1c:	bl	11174 <fwrite@plt>
   1ca20:	mov	r1, r4
   1ca24:	mov	r0, #10
   1ca28:	bl	11300 <fputc@plt>
   1ca2c:	mov	r3, r4
   1ca30:	mov	r2, #61	; 0x3d
   1ca34:	mov	r1, #1
   1ca38:	ldr	r0, [pc, #1120]	; 1cea0 <bfd_arch_bits_per_address@plt+0xbaec>
   1ca3c:	bl	11174 <fwrite@plt>
   1ca40:	mov	r3, r4
   1ca44:	mov	r2, #50	; 0x32
   1ca48:	mov	r1, #1
   1ca4c:	ldr	r0, [pc, #1104]	; 1cea4 <bfd_arch_bits_per_address@plt+0xbaf0>
   1ca50:	bl	11174 <fwrite@plt>
   1ca54:	mov	r1, r4
   1ca58:	mov	r0, #10
   1ca5c:	bl	11300 <fputc@plt>
   1ca60:	mov	r3, r4
   1ca64:	mov	r2, #53	; 0x35
   1ca68:	mov	r1, #1
   1ca6c:	ldr	r0, [pc, #1076]	; 1cea8 <bfd_arch_bits_per_address@plt+0xbaf4>
   1ca70:	bl	11174 <fwrite@plt>
   1ca74:	mov	r3, r4
   1ca78:	mov	r2, #45	; 0x2d
   1ca7c:	mov	r1, #1
   1ca80:	ldr	r0, [pc, #1060]	; 1ceac <bfd_arch_bits_per_address@plt+0xbaf8>
   1ca84:	bl	11174 <fwrite@plt>
   1ca88:	mov	r1, r4
   1ca8c:	mov	r0, #10
   1ca90:	bl	11300 <fputc@plt>
   1ca94:	mov	r1, r4
   1ca98:	mov	r0, #10
   1ca9c:	bl	11300 <fputc@plt>
   1caa0:	mov	r1, r4
   1caa4:	mov	r0, #10
   1caa8:	bl	11300 <fputc@plt>
   1caac:	mov	r3, r4
   1cab0:	mov	r2, #29
   1cab4:	mov	r1, #1
   1cab8:	ldr	r0, [pc, #1008]	; 1ceb0 <bfd_arch_bits_per_address@plt+0xbafc>
   1cabc:	bl	11174 <fwrite@plt>
   1cac0:	mov	r1, r4
   1cac4:	mov	r0, #10
   1cac8:	bl	11300 <fputc@plt>
   1cacc:	mov	r3, r4
   1cad0:	mov	r2, #58	; 0x3a
   1cad4:	mov	r1, #1
   1cad8:	ldr	r0, [pc, #980]	; 1ceb4 <bfd_arch_bits_per_address@plt+0xbb00>
   1cadc:	bl	11174 <fwrite@plt>
   1cae0:	mov	r3, r4
   1cae4:	mov	r2, #57	; 0x39
   1cae8:	mov	r1, #1
   1caec:	ldr	r0, [pc, #964]	; 1ceb8 <bfd_arch_bits_per_address@plt+0xbb04>
   1caf0:	bl	11174 <fwrite@plt>
   1caf4:	mov	r1, r4
   1caf8:	mov	r0, #10
   1cafc:	bl	11300 <fputc@plt>
   1cb00:	mov	r3, r4
   1cb04:	mov	r2, #12
   1cb08:	mov	r1, #1
   1cb0c:	ldr	r0, [pc, #936]	; 1cebc <bfd_arch_bits_per_address@plt+0xbb08>
   1cb10:	bl	11174 <fwrite@plt>
   1cb14:	mov	r3, r4
   1cb18:	mov	r2, #61	; 0x3d
   1cb1c:	mov	r1, #1
   1cb20:	ldr	r0, [pc, #920]	; 1cec0 <bfd_arch_bits_per_address@plt+0xbb0c>
   1cb24:	bl	11174 <fwrite@plt>
   1cb28:	mov	r3, r4
   1cb2c:	mov	r2, #52	; 0x34
   1cb30:	mov	r1, #1
   1cb34:	ldr	r0, [pc, #904]	; 1cec4 <bfd_arch_bits_per_address@plt+0xbb10>
   1cb38:	bl	11174 <fwrite@plt>
   1cb3c:	mov	r3, r4
   1cb40:	mov	r2, #20
   1cb44:	mov	r1, #1
   1cb48:	ldr	r0, [pc, #888]	; 1cec8 <bfd_arch_bits_per_address@plt+0xbb14>
   1cb4c:	bl	11174 <fwrite@plt>
   1cb50:	mov	r1, r4
   1cb54:	mov	r0, #10
   1cb58:	bl	11300 <fputc@plt>
   1cb5c:	mov	r3, r4
   1cb60:	mov	r2, #59	; 0x3b
   1cb64:	mov	r1, #1
   1cb68:	ldr	r0, [pc, #860]	; 1cecc <bfd_arch_bits_per_address@plt+0xbb18>
   1cb6c:	bl	11174 <fwrite@plt>
   1cb70:	mov	r3, r4
   1cb74:	mov	r2, #50	; 0x32
   1cb78:	mov	r1, #1
   1cb7c:	ldr	r0, [pc, #844]	; 1ced0 <bfd_arch_bits_per_address@plt+0xbb1c>
   1cb80:	bl	11174 <fwrite@plt>
   1cb84:	mov	r3, r4
   1cb88:	mov	r2, #47	; 0x2f
   1cb8c:	mov	r1, #1
   1cb90:	ldr	r0, [pc, #828]	; 1ced4 <bfd_arch_bits_per_address@plt+0xbb20>
   1cb94:	bl	11174 <fwrite@plt>
   1cb98:	mov	r1, r4
   1cb9c:	mov	r0, #10
   1cba0:	bl	11300 <fputc@plt>
   1cba4:	mov	r3, r4
   1cba8:	mov	r2, #58	; 0x3a
   1cbac:	mov	r1, #1
   1cbb0:	ldr	r0, [pc, #800]	; 1ced8 <bfd_arch_bits_per_address@plt+0xbb24>
   1cbb4:	bl	11174 <fwrite@plt>
   1cbb8:	mov	r3, r4
   1cbbc:	mov	r2, #53	; 0x35
   1cbc0:	mov	r1, #1
   1cbc4:	ldr	r0, [pc, #784]	; 1cedc <bfd_arch_bits_per_address@plt+0xbb28>
   1cbc8:	bl	11174 <fwrite@plt>
   1cbcc:	mov	r3, r4
   1cbd0:	mov	r2, #32
   1cbd4:	mov	r1, #1
   1cbd8:	ldr	r0, [pc, #768]	; 1cee0 <bfd_arch_bits_per_address@plt+0xbb2c>
   1cbdc:	bl	11174 <fwrite@plt>
   1cbe0:	mov	r1, r4
   1cbe4:	mov	r0, #10
   1cbe8:	bl	11300 <fputc@plt>
   1cbec:	mov	r3, r4
   1cbf0:	mov	r2, #59	; 0x3b
   1cbf4:	mov	r1, #1
   1cbf8:	ldr	r0, [pc, #740]	; 1cee4 <bfd_arch_bits_per_address@plt+0xbb30>
   1cbfc:	bl	11174 <fwrite@plt>
   1cc00:	mov	r3, r4
   1cc04:	mov	r2, #41	; 0x29
   1cc08:	mov	r1, #1
   1cc0c:	ldr	r0, [pc, #724]	; 1cee8 <bfd_arch_bits_per_address@plt+0xbb34>
   1cc10:	bl	11174 <fwrite@plt>
   1cc14:	mov	r1, r4
   1cc18:	mov	r0, #10
   1cc1c:	bl	11300 <fputc@plt>
   1cc20:	mov	r3, r4
   1cc24:	mov	r2, #61	; 0x3d
   1cc28:	mov	r1, #1
   1cc2c:	ldr	r0, [pc, #696]	; 1ceec <bfd_arch_bits_per_address@plt+0xbb38>
   1cc30:	bl	11174 <fwrite@plt>
   1cc34:	mov	r3, r4
   1cc38:	mov	r2, #36	; 0x24
   1cc3c:	mov	r1, #1
   1cc40:	ldr	r0, [pc, #680]	; 1cef0 <bfd_arch_bits_per_address@plt+0xbb3c>
   1cc44:	bl	11174 <fwrite@plt>
   1cc48:	mov	r1, r4
   1cc4c:	mov	r0, #10
   1cc50:	bl	11300 <fputc@plt>
   1cc54:	mov	r1, r4
   1cc58:	mov	r0, #10
   1cc5c:	bl	11300 <fputc@plt>
   1cc60:	mov	r1, r4
   1cc64:	mov	r0, #10
   1cc68:	bl	11300 <fputc@plt>
   1cc6c:	mov	r3, r4
   1cc70:	mov	r2, #53	; 0x35
   1cc74:	mov	r1, #1
   1cc78:	ldr	r0, [pc, #628]	; 1cef4 <bfd_arch_bits_per_address@plt+0xbb40>
   1cc7c:	bl	11174 <fwrite@plt>
   1cc80:	mov	r3, r4
   1cc84:	mov	r2, #59	; 0x3b
   1cc88:	mov	r1, #1
   1cc8c:	ldr	r0, [pc, #612]	; 1cef8 <bfd_arch_bits_per_address@plt+0xbb44>
   1cc90:	bl	11174 <fwrite@plt>
   1cc94:	mov	r3, r4
   1cc98:	mov	r2, #58	; 0x3a
   1cc9c:	mov	r1, #1
   1cca0:	ldr	r0, [pc, #596]	; 1cefc <bfd_arch_bits_per_address@plt+0xbb48>
   1cca4:	bl	11174 <fwrite@plt>
   1cca8:	mov	r3, r4
   1ccac:	mov	r2, #59	; 0x3b
   1ccb0:	mov	r1, #1
   1ccb4:	ldr	r0, [pc, #580]	; 1cf00 <bfd_arch_bits_per_address@plt+0xbb4c>
   1ccb8:	bl	11174 <fwrite@plt>
   1ccbc:	mov	r3, r4
   1ccc0:	mov	r2, #61	; 0x3d
   1ccc4:	mov	r1, #1
   1ccc8:	ldr	r0, [pc, #564]	; 1cf04 <bfd_arch_bits_per_address@plt+0xbb50>
   1cccc:	bl	11174 <fwrite@plt>
   1ccd0:	mov	r3, r4
   1ccd4:	mov	r2, #28
   1ccd8:	mov	r1, #1
   1ccdc:	ldr	r0, [pc, #548]	; 1cf08 <bfd_arch_bits_per_address@plt+0xbb54>
   1cce0:	bl	11174 <fwrite@plt>
   1cce4:	mov	r1, r4
   1cce8:	mov	r0, #10
   1ccec:	bl	11300 <fputc@plt>
   1ccf0:	mov	r3, r4
   1ccf4:	mov	r2, #60	; 0x3c
   1ccf8:	mov	r1, #1
   1ccfc:	ldr	r0, [pc, #520]	; 1cf0c <bfd_arch_bits_per_address@plt+0xbb58>
   1cd00:	bl	11174 <fwrite@plt>
   1cd04:	mov	r3, r4
   1cd08:	mov	r2, #32
   1cd0c:	mov	r1, #1
   1cd10:	ldr	r0, [pc, #504]	; 1cf10 <bfd_arch_bits_per_address@plt+0xbb5c>
   1cd14:	bl	11174 <fwrite@plt>
   1cd18:	mov	r1, r4
   1cd1c:	mov	r0, #10
   1cd20:	bl	11300 <fputc@plt>
   1cd24:	mov	r1, r4
   1cd28:	mov	r0, #10
   1cd2c:	bl	11300 <fputc@plt>
   1cd30:	mov	r1, r4
   1cd34:	mov	r0, #10
   1cd38:	bl	11300 <fputc@plt>
   1cd3c:	mov	r3, r4
   1cd40:	mov	r2, #26
   1cd44:	mov	r1, #1
   1cd48:	ldr	r0, [pc, #452]	; 1cf14 <bfd_arch_bits_per_address@plt+0xbb60>
   1cd4c:	bl	11174 <fwrite@plt>
   1cd50:	mov	r3, r4
   1cd54:	mov	r2, #55	; 0x37
   1cd58:	mov	r1, #1
   1cd5c:	ldr	r0, [pc, #436]	; 1cf18 <bfd_arch_bits_per_address@plt+0xbb64>
   1cd60:	bl	11174 <fwrite@plt>
   1cd64:	mov	r3, r4
   1cd68:	mov	r2, #59	; 0x3b
   1cd6c:	mov	r1, #1
   1cd70:	ldr	r0, [pc, #420]	; 1cf1c <bfd_arch_bits_per_address@plt+0xbb68>
   1cd74:	bl	11174 <fwrite@plt>
   1cd78:	mov	r3, r4
   1cd7c:	mov	r2, #60	; 0x3c
   1cd80:	mov	r1, #1
   1cd84:	ldr	r0, [pc, #404]	; 1cf20 <bfd_arch_bits_per_address@plt+0xbb6c>
   1cd88:	bl	11174 <fwrite@plt>
   1cd8c:	mov	r3, r4
   1cd90:	mov	r2, #52	; 0x34
   1cd94:	mov	r1, #1
   1cd98:	ldr	r0, [pc, #388]	; 1cf24 <bfd_arch_bits_per_address@plt+0xbb70>
   1cd9c:	bl	11174 <fwrite@plt>
   1cda0:	mov	r3, r4
   1cda4:	mov	r2, #2
   1cda8:	mov	r1, #1
   1cdac:	ldr	r0, [pc, #372]	; 1cf28 <bfd_arch_bits_per_address@plt+0xbb74>
   1cdb0:	bl	11174 <fwrite@plt>
   1cdb4:	mov	r3, r4
   1cdb8:	mov	r2, #55	; 0x37
   1cdbc:	mov	r1, #1
   1cdc0:	ldr	r0, [pc, #356]	; 1cf2c <bfd_arch_bits_per_address@plt+0xbb78>
   1cdc4:	bl	11174 <fwrite@plt>
   1cdc8:	mov	r1, r4
   1cdcc:	mov	r0, #10
   1cdd0:	bl	11300 <fputc@plt>
   1cdd4:	mov	r3, r4
   1cdd8:	mov	r2, #69	; 0x45
   1cddc:	mov	r1, #1
   1cde0:	ldr	r0, [pc, #328]	; 1cf30 <bfd_arch_bits_per_address@plt+0xbb7c>
   1cde4:	bl	11174 <fwrite@plt>
   1cde8:	mov	r3, r4
   1cdec:	mov	r2, #67	; 0x43
   1cdf0:	mov	r1, #1
   1cdf4:	ldr	r0, [pc, #312]	; 1cf34 <bfd_arch_bits_per_address@plt+0xbb80>
   1cdf8:	bl	11174 <fwrite@plt>
   1cdfc:	mov	r3, r4
   1ce00:	mov	r2, #38	; 0x26
   1ce04:	mov	r1, #1
   1ce08:	ldr	r0, [pc, #296]	; 1cf38 <bfd_arch_bits_per_address@plt+0xbb84>
   1ce0c:	pop	{r4, r5, r6, lr}
   1ce10:	b	11174 <fwrite@plt>
   1ce14:	andeq	r1, r2, r0, ror #3
   1ce18:	strdeq	r1, [r2], -r8
   1ce1c:	andeq	r1, r2, r8, lsr r2
   1ce20:	andeq	r1, r2, r8, ror r2
   1ce24:	andeq	r1, r2, r8, asr r2
   1ce28:			; <UNDEFINED> instruction: 0x000212b0
   1ce2c:	andeq	r1, r2, ip, ror #5
   1ce30:	andeq	r1, r2, r8, lsr #6
   1ce34:	andeq	r1, r2, ip, asr r3
   1ce38:	andeq	r1, r2, r4, ror r3
   1ce3c:	andeq	r1, r2, ip, lsr #7
   1ce40:	andeq	r1, r2, r0, asr #7
   1ce44:	ldrdeq	r1, [r2], -r0
   1ce48:	andeq	r1, r2, r0, lsl r4
   1ce4c:	andeq	r1, r2, r8, asr #8
   1ce50:	andeq	r1, r2, r8, lsl #9
   1ce54:	andeq	r1, r2, ip, lsr #9
   1ce58:	andeq	r1, r2, r8, ror #9
   1ce5c:	andeq	r1, r2, r0, lsl #10
   1ce60:	andeq	r1, r2, ip, lsr r5
   1ce64:	andeq	r1, r2, ip, ror #10
   1ce68:	muleq	r2, ip, r5
   1ce6c:			; <UNDEFINED> instruction: 0x000215b8
   1ce70:	strdeq	r1, [r2], -r8
   1ce74:	andeq	r1, r2, ip, lsr #12
   1ce78:	andeq	r1, r2, ip, lsr r6
   1ce7c:	andeq	r1, r2, r0, ror r6
   1ce80:	andeq	r1, r2, ip, lsr #13
   1ce84:	andeq	r1, r2, r0, asr #13
   1ce88:	strdeq	r1, [r2], -ip
   1ce8c:	andeq	r1, r2, r4, lsr r7
   1ce90:	andeq	r1, r2, r0, ror r7
   1ce94:	andeq	r1, r2, r8, lsl #15
   1ce98:	andeq	r1, r2, r4, asr #15
   1ce9c:	andeq	r1, r2, r0, lsl #16
   1cea0:	andeq	r1, r2, r8, lsr #16
   1cea4:	andeq	r1, r2, r8, ror #16
   1cea8:	muleq	r2, ip, r8
   1ceac:	ldrdeq	r1, [r2], -r4
   1ceb0:	andeq	r1, r2, r4, lsl #18
   1ceb4:	andeq	r1, r2, r4, lsr #18
   1ceb8:	andeq	r1, r2, r0, ror #18
   1cebc:	muleq	r2, ip, r9
   1cec0:	andeq	r1, r2, ip, lsr #19
   1cec4:	andeq	r1, r2, ip, ror #19
   1cec8:	andeq	r1, r2, r4, lsr #20
   1cecc:	andeq	r1, r2, ip, lsr sl
   1ced0:	andeq	r1, r2, r8, ror sl
   1ced4:	andeq	r1, r2, ip, lsr #21
   1ced8:	ldrdeq	r1, [r2], -ip
   1cedc:	andeq	r1, r2, r8, lsl fp
   1cee0:	andeq	r1, r2, r0, asr fp
   1cee4:	andeq	r1, r2, r4, ror fp
   1cee8:			; <UNDEFINED> instruction: 0x00021bb0
   1ceec:	ldrdeq	r1, [r2], -ip
   1cef0:	andeq	r1, r2, ip, lsl ip
   1cef4:	andeq	r1, r2, r4, asr #24
   1cef8:	andeq	r1, r2, ip, ror ip
   1cefc:			; <UNDEFINED> instruction: 0x00021cb8
   1cf00:	strdeq	r1, [r2], -r4
   1cf04:	andeq	r1, r2, r0, lsr sp
   1cf08:	andeq	r1, r2, r0, ror sp
   1cf0c:	muleq	r2, r0, sp
   1cf10:	ldrdeq	r1, [r2], -r0
   1cf14:	strdeq	r1, [r2], -r4
   1cf18:	andeq	r1, r2, r0, lsl lr
   1cf1c:	andeq	r1, r2, r8, asr #28
   1cf20:	andeq	r1, r2, r4, lsl #29
   1cf24:	andeq	r1, r2, r4, asr #29
   1cf28:	andeq	r0, r2, r0, lsr r5
   1cf2c:	strdeq	r1, [r2], -r4
   1cf30:	andeq	r1, r2, ip, lsr #2
   1cf34:	andeq	r1, r2, r4, ror r1
   1cf38:			; <UNDEFINED> instruction: 0x000211b8
   1cf3c:	push	{r4, r5, r6, lr}
   1cf40:	mov	r1, r0
   1cf44:	mov	r4, r0
   1cf48:	mov	r0, #10
   1cf4c:	bl	11300 <fputc@plt>
   1cf50:	mov	r3, r4
   1cf54:	mov	r2, #70	; 0x46
   1cf58:	mov	r1, #1
   1cf5c:	ldr	r0, [pc, #1568]	; 1d584 <bfd_arch_bits_per_address@plt+0xc1d0>
   1cf60:	bl	11174 <fwrite@plt>
   1cf64:	mov	r3, r4
   1cf68:	mov	r2, #67	; 0x43
   1cf6c:	mov	r1, #1
   1cf70:	ldr	r0, [pc, #1552]	; 1d588 <bfd_arch_bits_per_address@plt+0xc1d4>
   1cf74:	bl	11174 <fwrite@plt>
   1cf78:	mov	r1, r4
   1cf7c:	mov	r0, #10
   1cf80:	bl	11300 <fputc@plt>
   1cf84:	mov	r3, r4
   1cf88:	mov	r2, #72	; 0x48
   1cf8c:	mov	r1, #1
   1cf90:	ldr	r0, [pc, #1524]	; 1d58c <bfd_arch_bits_per_address@plt+0xc1d8>
   1cf94:	bl	11174 <fwrite@plt>
   1cf98:	mov	r3, r4
   1cf9c:	mov	r2, #66	; 0x42
   1cfa0:	mov	r1, #1
   1cfa4:	ldr	r0, [pc, #1508]	; 1d590 <bfd_arch_bits_per_address@plt+0xc1dc>
   1cfa8:	bl	11174 <fwrite@plt>
   1cfac:	mov	r3, r4
   1cfb0:	mov	r2, #66	; 0x42
   1cfb4:	mov	r1, #1
   1cfb8:	ldr	r0, [pc, #1492]	; 1d594 <bfd_arch_bits_per_address@plt+0xc1e0>
   1cfbc:	bl	11174 <fwrite@plt>
   1cfc0:	mov	r3, r4
   1cfc4:	mov	r2, #60	; 0x3c
   1cfc8:	mov	r1, #1
   1cfcc:	ldr	r0, [pc, #1476]	; 1d598 <bfd_arch_bits_per_address@plt+0xc1e4>
   1cfd0:	bl	11174 <fwrite@plt>
   1cfd4:	mov	r3, r4
   1cfd8:	mov	r2, #18
   1cfdc:	mov	r1, #1
   1cfe0:	ldr	r0, [pc, #1460]	; 1d59c <bfd_arch_bits_per_address@plt+0xc1e8>
   1cfe4:	bl	11174 <fwrite@plt>
   1cfe8:	mov	r3, r4
   1cfec:	mov	r2, #63	; 0x3f
   1cff0:	mov	r1, #1
   1cff4:	ldr	r0, [pc, #1444]	; 1d5a0 <bfd_arch_bits_per_address@plt+0xc1ec>
   1cff8:	bl	11174 <fwrite@plt>
   1cffc:	mov	r3, r4
   1d000:	mov	r2, #40	; 0x28
   1d004:	mov	r1, #1
   1d008:	ldr	r0, [pc, #1428]	; 1d5a4 <bfd_arch_bits_per_address@plt+0xc1f0>
   1d00c:	bl	11174 <fwrite@plt>
   1d010:	mov	r3, r4
   1d014:	mov	r2, #61	; 0x3d
   1d018:	mov	r1, #1
   1d01c:	ldr	r0, [pc, #1412]	; 1d5a8 <bfd_arch_bits_per_address@plt+0xc1f4>
   1d020:	bl	11174 <fwrite@plt>
   1d024:	mov	r3, r4
   1d028:	mov	r2, #62	; 0x3e
   1d02c:	mov	r1, #1
   1d030:	ldr	r0, [pc, #1396]	; 1d5ac <bfd_arch_bits_per_address@plt+0xc1f8>
   1d034:	bl	11174 <fwrite@plt>
   1d038:	mov	r1, r4
   1d03c:	mov	r0, #10
   1d040:	bl	11300 <fputc@plt>
   1d044:	mov	r3, r4
   1d048:	mov	r2, #70	; 0x46
   1d04c:	mov	r1, #1
   1d050:	ldr	r0, [pc, #1368]	; 1d5b0 <bfd_arch_bits_per_address@plt+0xc1fc>
   1d054:	bl	11174 <fwrite@plt>
   1d058:	mov	r3, r4
   1d05c:	mov	r2, #55	; 0x37
   1d060:	mov	r1, #1
   1d064:	ldr	r0, [pc, #1352]	; 1d5b4 <bfd_arch_bits_per_address@plt+0xc200>
   1d068:	bl	11174 <fwrite@plt>
   1d06c:	mov	r3, r4
   1d070:	mov	r2, #60	; 0x3c
   1d074:	mov	r1, #1
   1d078:	ldr	r0, [pc, #1336]	; 1d5b8 <bfd_arch_bits_per_address@plt+0xc204>
   1d07c:	bl	11174 <fwrite@plt>
   1d080:	mov	r3, r4
   1d084:	mov	r2, #41	; 0x29
   1d088:	mov	r1, #1
   1d08c:	ldr	r0, [pc, #1320]	; 1d5bc <bfd_arch_bits_per_address@plt+0xc208>
   1d090:	bl	11174 <fwrite@plt>
   1d094:	mov	r1, r4
   1d098:	mov	r0, #10
   1d09c:	bl	11300 <fputc@plt>
   1d0a0:	mov	r3, r4
   1d0a4:	mov	r2, #67	; 0x43
   1d0a8:	mov	r1, #1
   1d0ac:	ldr	r0, [pc, #1292]	; 1d5c0 <bfd_arch_bits_per_address@plt+0xc20c>
   1d0b0:	bl	11174 <fwrite@plt>
   1d0b4:	mov	r1, r4
   1d0b8:	mov	r0, #10
   1d0bc:	bl	11300 <fputc@plt>
   1d0c0:	mov	r3, r4
   1d0c4:	mov	r2, #68	; 0x44
   1d0c8:	mov	r1, #1
   1d0cc:	ldr	r0, [pc, #1264]	; 1d5c4 <bfd_arch_bits_per_address@plt+0xc210>
   1d0d0:	bl	11174 <fwrite@plt>
   1d0d4:	mov	r3, r4
   1d0d8:	mov	r2, #28
   1d0dc:	mov	r1, #1
   1d0e0:	ldr	r0, [pc, #1248]	; 1d5c8 <bfd_arch_bits_per_address@plt+0xc214>
   1d0e4:	bl	11174 <fwrite@plt>
   1d0e8:	mov	r1, r4
   1d0ec:	mov	r0, #10
   1d0f0:	bl	11300 <fputc@plt>
   1d0f4:	mov	r3, r4
   1d0f8:	mov	r2, #65	; 0x41
   1d0fc:	mov	r1, #1
   1d100:	ldr	r0, [pc, #1220]	; 1d5cc <bfd_arch_bits_per_address@plt+0xc218>
   1d104:	bl	11174 <fwrite@plt>
   1d108:	mov	r3, r4
   1d10c:	mov	r2, #56	; 0x38
   1d110:	mov	r1, #1
   1d114:	ldr	r0, [pc, #1204]	; 1d5d0 <bfd_arch_bits_per_address@plt+0xc21c>
   1d118:	bl	11174 <fwrite@plt>
   1d11c:	mov	r3, r4
   1d120:	mov	r2, #56	; 0x38
   1d124:	mov	r1, #1
   1d128:	ldr	r0, [pc, #1188]	; 1d5d4 <bfd_arch_bits_per_address@plt+0xc220>
   1d12c:	bl	11174 <fwrite@plt>
   1d130:	mov	r3, r4
   1d134:	mov	r2, #43	; 0x2b
   1d138:	mov	r1, #1
   1d13c:	ldr	r0, [pc, #1172]	; 1d5d8 <bfd_arch_bits_per_address@plt+0xc224>
   1d140:	bl	11174 <fwrite@plt>
   1d144:	mov	r1, r4
   1d148:	mov	r0, #10
   1d14c:	bl	11300 <fputc@plt>
   1d150:	mov	r3, r4
   1d154:	mov	r2, #65	; 0x41
   1d158:	mov	r1, #1
   1d15c:	ldr	r0, [pc, #1144]	; 1d5dc <bfd_arch_bits_per_address@plt+0xc228>
   1d160:	bl	11174 <fwrite@plt>
   1d164:	mov	r3, r4
   1d168:	mov	r2, #54	; 0x36
   1d16c:	mov	r1, #1
   1d170:	ldr	r0, [pc, #1128]	; 1d5e0 <bfd_arch_bits_per_address@plt+0xc22c>
   1d174:	bl	11174 <fwrite@plt>
   1d178:	mov	r3, r4
   1d17c:	mov	r2, #49	; 0x31
   1d180:	mov	r1, #1
   1d184:	ldr	r0, [pc, #1112]	; 1d5e4 <bfd_arch_bits_per_address@plt+0xc230>
   1d188:	bl	11174 <fwrite@plt>
   1d18c:	mov	r3, r4
   1d190:	mov	r2, #40	; 0x28
   1d194:	mov	r1, #1
   1d198:	ldr	r0, [pc, #1096]	; 1d5e8 <bfd_arch_bits_per_address@plt+0xc234>
   1d19c:	bl	11174 <fwrite@plt>
   1d1a0:	mov	r1, r4
   1d1a4:	mov	r0, #10
   1d1a8:	bl	11300 <fputc@plt>
   1d1ac:	mov	r1, r4
   1d1b0:	mov	r0, #10
   1d1b4:	bl	11300 <fputc@plt>
   1d1b8:	ldr	r5, [pc, #1068]	; 1d5ec <bfd_arch_bits_per_address@plt+0xc238>
   1d1bc:	mov	r3, r4
   1d1c0:	mov	r2, #69	; 0x45
   1d1c4:	mov	r1, #1
   1d1c8:	ldr	r0, [pc, #1056]	; 1d5f0 <bfd_arch_bits_per_address@plt+0xc23c>
   1d1cc:	bl	11174 <fwrite@plt>
   1d1d0:	mov	r1, r4
   1d1d4:	mov	r0, #10
   1d1d8:	bl	11300 <fputc@plt>
   1d1dc:	mov	r3, r4
   1d1e0:	mov	r0, r5
   1d1e4:	mov	r2, #66	; 0x42
   1d1e8:	mov	r1, #1
   1d1ec:	bl	11174 <fwrite@plt>
   1d1f0:	mov	r3, r4
   1d1f4:	mov	r2, #38	; 0x26
   1d1f8:	mov	r1, #1
   1d1fc:	ldr	r0, [pc, #1008]	; 1d5f4 <bfd_arch_bits_per_address@plt+0xc240>
   1d200:	bl	11174 <fwrite@plt>
   1d204:	mov	r1, r4
   1d208:	mov	r0, #10
   1d20c:	bl	11300 <fputc@plt>
   1d210:	mov	r3, r4
   1d214:	mov	r2, #66	; 0x42
   1d218:	mov	r1, #1
   1d21c:	ldr	r0, [pc, #980]	; 1d5f8 <bfd_arch_bits_per_address@plt+0xc244>
   1d220:	bl	11174 <fwrite@plt>
   1d224:	mov	r3, r4
   1d228:	mov	r2, #44	; 0x2c
   1d22c:	mov	r1, #1
   1d230:	ldr	r0, [pc, #964]	; 1d5fc <bfd_arch_bits_per_address@plt+0xc248>
   1d234:	bl	11174 <fwrite@plt>
   1d238:	mov	r1, r4
   1d23c:	mov	r0, #10
   1d240:	bl	11300 <fputc@plt>
   1d244:	mov	r3, r4
   1d248:	mov	r2, #63	; 0x3f
   1d24c:	mov	r1, #1
   1d250:	ldr	r0, [pc, #936]	; 1d600 <bfd_arch_bits_per_address@plt+0xc24c>
   1d254:	bl	11174 <fwrite@plt>
   1d258:	mov	r3, r4
   1d25c:	mov	r2, #54	; 0x36
   1d260:	mov	r1, #1
   1d264:	ldr	r0, [pc, #920]	; 1d604 <bfd_arch_bits_per_address@plt+0xc250>
   1d268:	bl	11174 <fwrite@plt>
   1d26c:	mov	r3, r4
   1d270:	mov	r2, #55	; 0x37
   1d274:	mov	r1, #1
   1d278:	ldr	r0, [pc, #904]	; 1d608 <bfd_arch_bits_per_address@plt+0xc254>
   1d27c:	bl	11174 <fwrite@plt>
   1d280:	mov	r3, r4
   1d284:	mov	r2, #40	; 0x28
   1d288:	mov	r1, #1
   1d28c:	ldr	r0, [pc, #888]	; 1d60c <bfd_arch_bits_per_address@plt+0xc258>
   1d290:	bl	11174 <fwrite@plt>
   1d294:	mov	r1, r4
   1d298:	mov	r0, #10
   1d29c:	bl	11300 <fputc@plt>
   1d2a0:	mov	r3, r4
   1d2a4:	mov	r2, #62	; 0x3e
   1d2a8:	mov	r1, #1
   1d2ac:	ldr	r0, [pc, #860]	; 1d610 <bfd_arch_bits_per_address@plt+0xc25c>
   1d2b0:	bl	11174 <fwrite@plt>
   1d2b4:	mov	r3, r4
   1d2b8:	mov	r2, #50	; 0x32
   1d2bc:	mov	r1, #1
   1d2c0:	ldr	r0, [pc, #844]	; 1d614 <bfd_arch_bits_per_address@plt+0xc260>
   1d2c4:	bl	11174 <fwrite@plt>
   1d2c8:	mov	r3, r4
   1d2cc:	mov	r2, #57	; 0x39
   1d2d0:	mov	r1, #1
   1d2d4:	ldr	r0, [pc, #828]	; 1d618 <bfd_arch_bits_per_address@plt+0xc264>
   1d2d8:	bl	11174 <fwrite@plt>
   1d2dc:	mov	r3, r4
   1d2e0:	mov	r2, #33	; 0x21
   1d2e4:	mov	r1, #1
   1d2e8:	ldr	r0, [pc, #812]	; 1d61c <bfd_arch_bits_per_address@plt+0xc268>
   1d2ec:	bl	11174 <fwrite@plt>
   1d2f0:	mov	r1, r4
   1d2f4:	mov	r0, #10
   1d2f8:	bl	11300 <fputc@plt>
   1d2fc:	mov	r3, r4
   1d300:	mov	r2, #63	; 0x3f
   1d304:	mov	r1, #1
   1d308:	ldr	r0, [pc, #784]	; 1d620 <bfd_arch_bits_per_address@plt+0xc26c>
   1d30c:	bl	11174 <fwrite@plt>
   1d310:	mov	r3, r4
   1d314:	mov	r2, #67	; 0x43
   1d318:	mov	r1, #1
   1d31c:	ldr	r0, [pc, #768]	; 1d624 <bfd_arch_bits_per_address@plt+0xc270>
   1d320:	bl	11174 <fwrite@plt>
   1d324:	mov	r3, r4
   1d328:	mov	r2, #19
   1d32c:	mov	r1, #1
   1d330:	ldr	r0, [pc, #752]	; 1d628 <bfd_arch_bits_per_address@plt+0xc274>
   1d334:	bl	11174 <fwrite@plt>
   1d338:	mov	r1, r4
   1d33c:	mov	r0, #10
   1d340:	bl	11300 <fputc@plt>
   1d344:	mov	r3, r4
   1d348:	mov	r2, #70	; 0x46
   1d34c:	mov	r1, #1
   1d350:	ldr	r0, [pc, #724]	; 1d62c <bfd_arch_bits_per_address@plt+0xc278>
   1d354:	bl	11174 <fwrite@plt>
   1d358:	mov	r1, r4
   1d35c:	mov	r0, #10
   1d360:	bl	11300 <fputc@plt>
   1d364:	mov	r3, r4
   1d368:	mov	r0, r5
   1d36c:	mov	r2, #66	; 0x42
   1d370:	mov	r1, #1
   1d374:	bl	11174 <fwrite@plt>
   1d378:	mov	r3, r4
   1d37c:	mov	r2, #36	; 0x24
   1d380:	mov	r1, #1
   1d384:	ldr	r0, [pc, #676]	; 1d630 <bfd_arch_bits_per_address@plt+0xc27c>
   1d388:	bl	11174 <fwrite@plt>
   1d38c:	mov	r1, r4
   1d390:	mov	r0, #10
   1d394:	bl	11300 <fputc@plt>
   1d398:	mov	r3, r4
   1d39c:	mov	r2, #70	; 0x46
   1d3a0:	mov	r1, #1
   1d3a4:	ldr	r0, [pc, #648]	; 1d634 <bfd_arch_bits_per_address@plt+0xc280>
   1d3a8:	bl	11174 <fwrite@plt>
   1d3ac:	mov	r3, r4
   1d3b0:	mov	r2, #36	; 0x24
   1d3b4:	mov	r1, #1
   1d3b8:	ldr	r0, [pc, #632]	; 1d638 <bfd_arch_bits_per_address@plt+0xc284>
   1d3bc:	bl	11174 <fwrite@plt>
   1d3c0:	mov	r1, r4
   1d3c4:	mov	r0, #10
   1d3c8:	bl	11300 <fputc@plt>
   1d3cc:	mov	r3, r4
   1d3d0:	mov	r2, #60	; 0x3c
   1d3d4:	mov	r1, #1
   1d3d8:	ldr	r0, [pc, #604]	; 1d63c <bfd_arch_bits_per_address@plt+0xc288>
   1d3dc:	bl	11174 <fwrite@plt>
   1d3e0:	mov	r3, r4
   1d3e4:	mov	r2, #53	; 0x35
   1d3e8:	mov	r1, #1
   1d3ec:	ldr	r0, [pc, #588]	; 1d640 <bfd_arch_bits_per_address@plt+0xc28c>
   1d3f0:	bl	11174 <fwrite@plt>
   1d3f4:	mov	r3, r4
   1d3f8:	mov	r2, #52	; 0x34
   1d3fc:	mov	r1, #1
   1d400:	ldr	r0, [pc, #572]	; 1d644 <bfd_arch_bits_per_address@plt+0xc290>
   1d404:	bl	11174 <fwrite@plt>
   1d408:	mov	r3, r4
   1d40c:	mov	r2, #38	; 0x26
   1d410:	mov	r1, #1
   1d414:	ldr	r0, [pc, #556]	; 1d648 <bfd_arch_bits_per_address@plt+0xc294>
   1d418:	bl	11174 <fwrite@plt>
   1d41c:	mov	r1, r4
   1d420:	mov	r0, #10
   1d424:	bl	11300 <fputc@plt>
   1d428:	mov	r3, r4
   1d42c:	mov	r2, #60	; 0x3c
   1d430:	mov	r1, #1
   1d434:	ldr	r0, [pc, #528]	; 1d64c <bfd_arch_bits_per_address@plt+0xc298>
   1d438:	bl	11174 <fwrite@plt>
   1d43c:	mov	r3, r4
   1d440:	mov	r2, #49	; 0x31
   1d444:	mov	r1, #1
   1d448:	ldr	r0, [pc, #512]	; 1d650 <bfd_arch_bits_per_address@plt+0xc29c>
   1d44c:	bl	11174 <fwrite@plt>
   1d450:	mov	r3, r4
   1d454:	mov	r2, #49	; 0x31
   1d458:	mov	r1, #1
   1d45c:	ldr	r0, [pc, #496]	; 1d654 <bfd_arch_bits_per_address@plt+0xc2a0>
   1d460:	bl	11174 <fwrite@plt>
   1d464:	mov	r3, r4
   1d468:	mov	r2, #41	; 0x29
   1d46c:	mov	r1, #1
   1d470:	ldr	r0, [pc, #480]	; 1d658 <bfd_arch_bits_per_address@plt+0xc2a4>
   1d474:	bl	11174 <fwrite@plt>
   1d478:	mov	r1, r4
   1d47c:	mov	r0, #10
   1d480:	bl	11300 <fputc@plt>
   1d484:	mov	r3, r4
   1d488:	mov	r2, #66	; 0x42
   1d48c:	mov	r1, #1
   1d490:	ldr	r0, [pc, #452]	; 1d65c <bfd_arch_bits_per_address@plt+0xc2a8>
   1d494:	bl	11174 <fwrite@plt>
   1d498:	mov	r3, r4
   1d49c:	mov	r2, #66	; 0x42
   1d4a0:	mov	r1, #1
   1d4a4:	ldr	r0, [pc, #436]	; 1d660 <bfd_arch_bits_per_address@plt+0xc2ac>
   1d4a8:	bl	11174 <fwrite@plt>
   1d4ac:	mov	r3, r4
   1d4b0:	mov	r2, #64	; 0x40
   1d4b4:	mov	r1, #1
   1d4b8:	ldr	r0, [pc, #420]	; 1d664 <bfd_arch_bits_per_address@plt+0xc2b0>
   1d4bc:	bl	11174 <fwrite@plt>
   1d4c0:	mov	r3, r4
   1d4c4:	mov	r2, #71	; 0x47
   1d4c8:	mov	r1, #1
   1d4cc:	ldr	r0, [pc, #404]	; 1d668 <bfd_arch_bits_per_address@plt+0xc2b4>
   1d4d0:	bl	11174 <fwrite@plt>
   1d4d4:	mov	r3, r4
   1d4d8:	mov	r2, #72	; 0x48
   1d4dc:	mov	r1, #1
   1d4e0:	ldr	r0, [pc, #388]	; 1d66c <bfd_arch_bits_per_address@plt+0xc2b8>
   1d4e4:	bl	11174 <fwrite@plt>
   1d4e8:	mov	r3, r4
   1d4ec:	mov	r2, #69	; 0x45
   1d4f0:	mov	r1, #1
   1d4f4:	ldr	r0, [pc, #372]	; 1d670 <bfd_arch_bits_per_address@plt+0xc2bc>
   1d4f8:	bl	11174 <fwrite@plt>
   1d4fc:	mov	r3, r4
   1d500:	mov	r2, #12
   1d504:	mov	r1, #1
   1d508:	ldr	r0, [pc, #356]	; 1d674 <bfd_arch_bits_per_address@plt+0xc2c0>
   1d50c:	bl	11174 <fwrite@plt>
   1d510:	mov	r3, r4
   1d514:	mov	r2, #2
   1d518:	mov	r1, #1
   1d51c:	ldr	r0, [pc, #340]	; 1d678 <bfd_arch_bits_per_address@plt+0xc2c4>
   1d520:	bl	11174 <fwrite@plt>
   1d524:	mov	r3, r4
   1d528:	mov	r2, #55	; 0x37
   1d52c:	mov	r1, #1
   1d530:	ldr	r0, [pc, #324]	; 1d67c <bfd_arch_bits_per_address@plt+0xc2c8>
   1d534:	bl	11174 <fwrite@plt>
   1d538:	mov	r1, r4
   1d53c:	mov	r0, #10
   1d540:	bl	11300 <fputc@plt>
   1d544:	mov	r3, r4
   1d548:	mov	r2, #69	; 0x45
   1d54c:	mov	r1, #1
   1d550:	ldr	r0, [pc, #296]	; 1d680 <bfd_arch_bits_per_address@plt+0xc2cc>
   1d554:	bl	11174 <fwrite@plt>
   1d558:	mov	r3, r4
   1d55c:	mov	r2, #67	; 0x43
   1d560:	mov	r1, #1
   1d564:	ldr	r0, [pc, #280]	; 1d684 <bfd_arch_bits_per_address@plt+0xc2d0>
   1d568:	bl	11174 <fwrite@plt>
   1d56c:	mov	r3, r4
   1d570:	mov	r2, #38	; 0x26
   1d574:	mov	r1, #1
   1d578:	ldr	r0, [pc, #264]	; 1d688 <bfd_arch_bits_per_address@plt+0xc2d4>
   1d57c:	pop	{r4, r5, r6, lr}
   1d580:	b	11174 <fwrite@plt>
   1d584:	strdeq	r1, [r2], -ip
   1d588:	andeq	r1, r2, r4, asr #30
   1d58c:	andeq	r1, r2, r8, lsl #31
   1d590:	ldrdeq	r1, [r2], -r4
   1d594:	andeq	r2, r2, r8, lsl r0
   1d598:	andeq	r2, r2, ip, asr r0
   1d59c:	muleq	r2, ip, r0
   1d5a0:	strheq	r2, [r2], -r0
   1d5a4:	strdeq	r2, [r2], -r0
   1d5a8:	andeq	r2, r2, ip, lsl r1
   1d5ac:	andeq	r2, r2, ip, asr r1
   1d5b0:	muleq	r2, ip, r1
   1d5b4:	andeq	r2, r2, r4, ror #3
   1d5b8:	andeq	r2, r2, ip, lsl r2
   1d5bc:	andeq	r2, r2, ip, asr r2
   1d5c0:	andeq	r2, r2, r8, lsl #5
   1d5c4:	andeq	r2, r2, ip, asr #5
   1d5c8:	andeq	r2, r2, r4, lsl r3
   1d5cc:	andeq	r2, r2, r4, lsr r3
   1d5d0:	andeq	r2, r2, r8, ror r3
   1d5d4:			; <UNDEFINED> instruction: 0x000223b4
   1d5d8:	strdeq	r2, [r2], -r0
   1d5dc:	andeq	r2, r2, ip, lsl r4
   1d5e0:	andeq	r2, r2, r0, ror #8
   1d5e4:	muleq	r2, r8, r4
   1d5e8:	andeq	r2, r2, ip, asr #9
   1d5ec:	andeq	r2, r2, r0, asr #10
   1d5f0:	strdeq	r2, [r2], -r8
   1d5f4:	andeq	r2, r2, r4, lsl #11
   1d5f8:	andeq	r2, r2, ip, lsr #11
   1d5fc:	strdeq	r2, [r2], -r0
   1d600:	andeq	r2, r2, r0, lsr #12
   1d604:	andeq	r2, r2, r0, ror #12
   1d608:	muleq	r2, r8, r6
   1d60c:	ldrdeq	r2, [r2], -r0
   1d610:	strdeq	r2, [r2], -ip
   1d614:	andeq	r2, r2, ip, lsr r7
   1d618:	andeq	r2, r2, r0, ror r7
   1d61c:	andeq	r2, r2, ip, lsr #15
   1d620:	ldrdeq	r2, [r2], -r0
   1d624:	andeq	r2, r2, r0, lsl r8
   1d628:	andeq	r2, r2, r4, asr r8
   1d62c:	andeq	r2, r2, r8, ror #16
   1d630:			; <UNDEFINED> instruction: 0x000228b0
   1d634:	ldrdeq	r2, [r2], -r8
   1d638:	andeq	r2, r2, r0, lsr #18
   1d63c:	andeq	r2, r2, r8, asr #18
   1d640:	andeq	r2, r2, r8, lsl #19
   1d644:	andeq	r2, r2, r0, asr #19
   1d648:	strdeq	r2, [r2], -r8
   1d64c:	andeq	r2, r2, r0, lsr #20
   1d650:	andeq	r2, r2, r0, ror #20
   1d654:	muleq	r2, r4, sl
   1d658:	andeq	r2, r2, r8, asr #21
   1d65c:	strdeq	r2, [r2], -r4
   1d660:	andeq	r2, r2, r8, lsr fp
   1d664:	andeq	r2, r2, ip, ror fp
   1d668:	andeq	r2, r2, r0, asr #23
   1d66c:	andeq	r2, r2, r8, lsl #24
   1d670:	andeq	r2, r2, r4, asr ip
   1d674:	andeq	r1, r2, ip, ror #29
   1d678:	andeq	r0, r2, r0, lsr r5
   1d67c:	strdeq	r1, [r2], -r4
   1d680:	andeq	r1, r2, ip, lsr #2
   1d684:	andeq	r1, r2, r4, ror r1
   1d688:			; <UNDEFINED> instruction: 0x000211b8
   1d68c:	push	{r4, r5, r6, lr}
   1d690:	subs	r5, r0, #0
   1d694:	beq	1d72c <bfd_arch_bits_per_address@plt+0xc378>
   1d698:	ldr	r3, [r5]
   1d69c:	cmp	r3, #0
   1d6a0:	beq	1d71c <bfd_arch_bits_per_address@plt+0xc368>
   1d6a4:	mov	r3, r5
   1d6a8:	mov	r0, #0
   1d6ac:	b	1d6b4 <bfd_arch_bits_per_address@plt+0xc300>
   1d6b0:	mov	r0, r1
   1d6b4:	ldr	r2, [r3, #4]!
   1d6b8:	add	r1, r0, #1
   1d6bc:	cmp	r2, #0
   1d6c0:	bne	1d6b0 <bfd_arch_bits_per_address@plt+0xc2fc>
   1d6c4:	add	r0, r0, #2
   1d6c8:	lsl	r0, r0, #2
   1d6cc:	bl	11180 <xmalloc@plt>
   1d6d0:	ldr	r2, [r5]
   1d6d4:	cmp	r2, #0
   1d6d8:	mov	r6, r0
   1d6dc:	beq	1d724 <bfd_arch_bits_per_address@plt+0xc370>
   1d6e0:	sub	r4, r0, #4
   1d6e4:	mov	r0, r2
   1d6e8:	bl	11198 <xstrdup@plt>
   1d6ec:	ldr	r2, [r5, #4]!
   1d6f0:	add	r3, r4, #8
   1d6f4:	cmp	r2, #0
   1d6f8:	sub	r3, r3, r6
   1d6fc:	add	r4, r4, #4
   1d700:	str	r0, [r4]
   1d704:	bne	1d6e4 <bfd_arch_bits_per_address@plt+0xc330>
   1d708:	add	r3, r6, r3
   1d70c:	mov	r2, #0
   1d710:	str	r2, [r3]
   1d714:	mov	r0, r6
   1d718:	pop	{r4, r5, r6, pc}
   1d71c:	mov	r0, #4
   1d720:	b	1d6cc <bfd_arch_bits_per_address@plt+0xc318>
   1d724:	mov	r3, r0
   1d728:	b	1d70c <bfd_arch_bits_per_address@plt+0xc358>
   1d72c:	mov	r6, r5
   1d730:	b	1d714 <bfd_arch_bits_per_address@plt+0xc360>
   1d734:	push	{r4, r5, r6, lr}
   1d738:	subs	r5, r0, #0
   1d73c:	popeq	{r4, r5, r6, pc}
   1d740:	ldr	r0, [r5]
   1d744:	cmp	r0, #0
   1d748:	beq	1d760 <bfd_arch_bits_per_address@plt+0xc3ac>
   1d74c:	mov	r4, r5
   1d750:	bl	110a8 <free@plt>
   1d754:	ldr	r0, [r4, #4]!
   1d758:	cmp	r0, #0
   1d75c:	bne	1d750 <bfd_arch_bits_per_address@plt+0xc39c>
   1d760:	mov	r0, r5
   1d764:	pop	{r4, r5, r6, lr}
   1d768:	b	110a8 <free@plt>
   1d76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d770:	subs	r4, r0, #0
   1d774:	ldr	r6, [pc, #512]	; 1d97c <bfd_arch_bits_per_address@plt+0xc5c8>
   1d778:	sub	sp, sp, #12
   1d77c:	add	r6, pc, r6
   1d780:	moveq	r9, r4
   1d784:	beq	1d920 <bfd_arch_bits_per_address@plt+0xc56c>
   1d788:	bl	1124c <strlen@plt>
   1d78c:	mov	r9, #0
   1d790:	mov	fp, r9
   1d794:	mov	sl, r9
   1d798:	mov	r5, r9
   1d79c:	mov	r8, r9
   1d7a0:	mov	r7, r9
   1d7a4:	add	r0, r0, #1
   1d7a8:	bl	11180 <xmalloc@plt>
   1d7ac:	ldr	r2, [pc, #460]	; 1d980 <bfd_arch_bits_per_address@plt+0xc5cc>
   1d7b0:	str	r0, [sp]
   1d7b4:	ldr	r6, [r6, r2]
   1d7b8:	ldrb	r2, [r4]
   1d7bc:	lsl	r2, r2, #1
   1d7c0:	ldrh	r2, [r6, r2]
   1d7c4:	tst	r2, #64	; 0x40
   1d7c8:	beq	1d7e0 <bfd_arch_bits_per_address@plt+0xc42c>
   1d7cc:	ldrb	r2, [r4, #1]!
   1d7d0:	lsl	r2, r2, #1
   1d7d4:	ldrh	r2, [r6, r2]
   1d7d8:	tst	r2, #64	; 0x40
   1d7dc:	bne	1d7cc <bfd_arch_bits_per_address@plt+0xc418>
   1d7e0:	cmp	fp, #0
   1d7e4:	lsl	r2, sl, #2
   1d7e8:	beq	1d7fc <bfd_arch_bits_per_address@plt+0xc448>
   1d7ec:	sub	r1, fp, #1
   1d7f0:	cmp	r1, sl
   1d7f4:	addgt	r1, r9, r2
   1d7f8:	bgt	1d82c <bfd_arch_bits_per_address@plt+0xc478>
   1d7fc:	cmp	r9, #0
   1d800:	str	r2, [sp, #4]
   1d804:	beq	1d964 <bfd_arch_bits_per_address@plt+0xc5b0>
   1d808:	lsl	fp, fp, #1
   1d80c:	mov	r0, r9
   1d810:	lsl	r1, fp, #2
   1d814:	bl	11144 <xrealloc@plt>
   1d818:	ldr	r2, [sp, #4]
   1d81c:	mov	r9, r0
   1d820:	add	r1, r9, r2
   1d824:	mov	r3, #0
   1d828:	str	r3, [r9, r2]
   1d82c:	ldrb	r2, [r4]
   1d830:	ldr	r0, [sp]
   1d834:	cmp	r2, #0
   1d838:	bne	1d85c <bfd_arch_bits_per_address@plt+0xc4a8>
   1d83c:	b	1d8c0 <bfd_arch_bits_per_address@plt+0xc50c>
   1d840:	cmp	r2, #39	; 0x27
   1d844:	moveq	r7, r5
   1d848:	beq	1d850 <bfd_arch_bits_per_address@plt+0xc49c>
   1d84c:	strb	r2, [r0], #1
   1d850:	ldrb	r2, [r4, #1]!
   1d854:	cmp	r2, #0
   1d858:	beq	1d8c0 <bfd_arch_bits_per_address@plt+0xc50c>
   1d85c:	lsl	ip, r2, #1
   1d860:	ldrh	ip, [r6, ip]
   1d864:	tst	ip, #64	; 0x40
   1d868:	beq	1d878 <bfd_arch_bits_per_address@plt+0xc4c4>
   1d86c:	orr	ip, r8, r7
   1d870:	orrs	ip, ip, r5
   1d874:	beq	1d954 <bfd_arch_bits_per_address@plt+0xc5a0>
   1d878:	cmp	r5, #0
   1d87c:	movne	r5, #0
   1d880:	strbne	r2, [r0], #1
   1d884:	bne	1d850 <bfd_arch_bits_per_address@plt+0xc49c>
   1d888:	cmp	r2, #92	; 0x5c
   1d88c:	moveq	r5, #1
   1d890:	beq	1d850 <bfd_arch_bits_per_address@plt+0xc49c>
   1d894:	cmp	r7, #0
   1d898:	bne	1d840 <bfd_arch_bits_per_address@plt+0xc48c>
   1d89c:	cmp	r8, #0
   1d8a0:	beq	1d92c <bfd_arch_bits_per_address@plt+0xc578>
   1d8a4:	cmp	r2, #34	; 0x22
   1d8a8:	mov	r5, r7
   1d8ac:	moveq	r8, r7
   1d8b0:	bne	1d84c <bfd_arch_bits_per_address@plt+0xc498>
   1d8b4:	ldrb	r2, [r4, #1]!
   1d8b8:	cmp	r2, #0
   1d8bc:	bne	1d85c <bfd_arch_bits_per_address@plt+0xc4a8>
   1d8c0:	mov	r3, #0
   1d8c4:	strb	r3, [r0]
   1d8c8:	ldr	r0, [sp]
   1d8cc:	str	r1, [sp, #4]
   1d8d0:	bl	11198 <xstrdup@plt>
   1d8d4:	ldr	r1, [sp, #4]
   1d8d8:	mov	r3, #0
   1d8dc:	add	sl, sl, #1
   1d8e0:	str	r3, [r1, #4]
   1d8e4:	str	r0, [r1]
   1d8e8:	ldrb	r2, [r4]
   1d8ec:	lsl	r1, r2, #1
   1d8f0:	ldrh	r1, [r6, r1]
   1d8f4:	tst	r1, #64	; 0x40
   1d8f8:	beq	1d910 <bfd_arch_bits_per_address@plt+0xc55c>
   1d8fc:	ldrb	r2, [r4, #1]!
   1d900:	lsl	r1, r2, #1
   1d904:	ldrh	r1, [r6, r1]
   1d908:	tst	r1, #64	; 0x40
   1d90c:	bne	1d8fc <bfd_arch_bits_per_address@plt+0xc548>
   1d910:	cmp	r2, #0
   1d914:	bne	1d7b8 <bfd_arch_bits_per_address@plt+0xc404>
   1d918:	ldr	r0, [sp]
   1d91c:	bl	110a8 <free@plt>
   1d920:	mov	r0, r9
   1d924:	add	sp, sp, #12
   1d928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d92c:	cmp	r2, #39	; 0x27
   1d930:	mov	r5, r8
   1d934:	moveq	r7, #1
   1d938:	beq	1d850 <bfd_arch_bits_per_address@plt+0xc49c>
   1d93c:	cmp	r2, #34	; 0x22
   1d940:	moveq	r7, r8
   1d944:	strbne	r2, [r0], #1
   1d948:	movne	r7, r8
   1d94c:	moveq	r8, #1
   1d950:	b	1d850 <bfd_arch_bits_per_address@plt+0xc49c>
   1d954:	mov	r8, ip
   1d958:	mov	r7, ip
   1d95c:	mov	r5, ip
   1d960:	b	1d8c0 <bfd_arch_bits_per_address@plt+0xc50c>
   1d964:	mov	r0, #32
   1d968:	bl	11180 <xmalloc@plt>
   1d96c:	mov	fp, #8
   1d970:	ldr	r2, [sp, #4]
   1d974:	mov	r9, r0
   1d978:	b	1d820 <bfd_arch_bits_per_address@plt+0xc46c>
   1d97c:	andeq	r6, r1, ip, ror r8
   1d980:	andeq	r0, r0, r0, lsr r1
   1d984:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d988:	subs	r6, r1, #0
   1d98c:	ldr	r8, [pc, #192]	; 1da54 <bfd_arch_bits_per_address@plt+0xc6a0>
   1d990:	add	r8, pc, r8
   1d994:	beq	1da24 <bfd_arch_bits_per_address@plt+0xc670>
   1d998:	ldr	r5, [r0]
   1d99c:	mov	r9, r0
   1d9a0:	cmp	r5, #0
   1d9a4:	beq	1da4c <bfd_arch_bits_per_address@plt+0xc698>
   1d9a8:	ldrb	r4, [r5]
   1d9ac:	cmp	r4, #0
   1d9b0:	beq	1da2c <bfd_arch_bits_per_address@plt+0xc678>
   1d9b4:	ldr	r3, [pc, #156]	; 1da58 <bfd_arch_bits_per_address@plt+0xc6a4>
   1d9b8:	ldr	r7, [r8, r3]
   1d9bc:	b	1d9cc <bfd_arch_bits_per_address@plt+0xc618>
   1d9c0:	ldrb	r4, [r5, #1]!
   1d9c4:	cmp	r4, #0
   1d9c8:	beq	1da2c <bfd_arch_bits_per_address@plt+0xc678>
   1d9cc:	lsl	r3, r4, #1
   1d9d0:	mov	r1, r6
   1d9d4:	ldrh	r3, [r7, r3]
   1d9d8:	mov	r0, #92	; 0x5c
   1d9dc:	tst	r3, #64	; 0x40
   1d9e0:	bne	1da04 <bfd_arch_bits_per_address@plt+0xc650>
   1d9e4:	cmp	r4, #39	; 0x27
   1d9e8:	cmpne	r4, r0
   1d9ec:	moveq	r3, #1
   1d9f0:	movne	r3, #0
   1d9f4:	cmp	r4, #34	; 0x22
   1d9f8:	orreq	r3, r3, #1
   1d9fc:	cmp	r3, #0
   1da00:	beq	1da10 <bfd_arch_bits_per_address@plt+0xc65c>
   1da04:	bl	11300 <fputc@plt>
   1da08:	cmn	r0, #1
   1da0c:	beq	1da24 <bfd_arch_bits_per_address@plt+0xc670>
   1da10:	mov	r0, r4
   1da14:	mov	r1, r6
   1da18:	bl	11300 <fputc@plt>
   1da1c:	cmn	r0, #1
   1da20:	bne	1d9c0 <bfd_arch_bits_per_address@plt+0xc60c>
   1da24:	mov	r0, #1
   1da28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da2c:	mov	r1, r6
   1da30:	mov	r0, #10
   1da34:	bl	11300 <fputc@plt>
   1da38:	cmn	r0, #1
   1da3c:	beq	1da24 <bfd_arch_bits_per_address@plt+0xc670>
   1da40:	ldr	r5, [r9, #4]!
   1da44:	cmp	r5, #0
   1da48:	bne	1d9a8 <bfd_arch_bits_per_address@plt+0xc5f4>
   1da4c:	mov	r0, #0
   1da50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da54:	andeq	r6, r1, r8, ror #12
   1da58:	andeq	r0, r0, r0, lsr r1
   1da5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da60:	mov	r7, r1
   1da64:	sub	sp, sp, #140	; 0x8c
   1da68:	ldr	r3, [r7]
   1da6c:	ldr	r1, [r0]
   1da70:	str	r3, [sp, #24]
   1da74:	ldr	r3, [pc, #824]	; 1ddb4 <bfd_arch_bits_per_address@plt+0xca00>
   1da78:	mov	sl, r0
   1da7c:	add	r3, pc, r3
   1da80:	str	r3, [sp, #28]
   1da84:	add	r3, sp, #32
   1da88:	str	r3, [sp]
   1da8c:	ldr	r3, [pc, #804]	; 1ddb8 <bfd_arch_bits_per_address@plt+0xca04>
   1da90:	mov	fp, #2000	; 0x7d0
   1da94:	mov	r5, #0
   1da98:	add	r3, pc, r3
   1da9c:	str	r3, [sp, #4]
   1daa0:	add	r4, r5, #1
   1daa4:	cmp	r4, r1
   1daa8:	bge	1dba4 <bfd_arch_bits_per_address@plt+0xc7f0>
   1daac:	ldr	r3, [r7]
   1dab0:	lsl	r8, r4, #2
   1dab4:	ldr	r0, [r3, r4, lsl #2]
   1dab8:	ldrb	r2, [r0]
   1dabc:	cmp	r2, #64	; 0x40
   1dac0:	bne	1dbb0 <bfd_arch_bits_per_address@plt+0xc7fc>
   1dac4:	subs	fp, fp, #1
   1dac8:	beq	1dd44 <bfd_arch_bits_per_address@plt+0xc990>
   1dacc:	add	r6, r0, #1
   1dad0:	mov	r1, r6
   1dad4:	ldr	r2, [sp]
   1dad8:	mov	r0, #3
   1dadc:	bl	11384 <__xstat64@plt>
   1dae0:	cmp	r0, #0
   1dae4:	blt	1dbac <bfd_arch_bits_per_address@plt+0xc7f8>
   1dae8:	ldr	r3, [sp, #48]	; 0x30
   1daec:	and	r3, r3, #61440	; 0xf000
   1daf0:	cmp	r3, #16384	; 0x4000
   1daf4:	beq	1dd70 <bfd_arch_bits_per_address@plt+0xc9bc>
   1daf8:	mov	r0, r6
   1dafc:	ldr	r1, [sp, #4]
   1db00:	bl	1133c <fopen64@plt>
   1db04:	subs	r9, r0, #0
   1db08:	beq	1dbac <bfd_arch_bits_per_address@plt+0xc7f8>
   1db0c:	mov	r2, #2
   1db10:	mov	r1, #0
   1db14:	bl	11378 <fseek@plt>
   1db18:	cmn	r0, #1
   1db1c:	beq	1db88 <bfd_arch_bits_per_address@plt+0xc7d4>
   1db20:	mov	r0, r9
   1db24:	bl	110fc <ftell@plt>
   1db28:	cmn	r0, #1
   1db2c:	mov	r6, r0
   1db30:	beq	1db88 <bfd_arch_bits_per_address@plt+0xc7d4>
   1db34:	mov	r2, #0
   1db38:	mov	r1, r2
   1db3c:	mov	r0, r9
   1db40:	bl	11378 <fseek@plt>
   1db44:	cmn	r0, #1
   1db48:	beq	1db88 <bfd_arch_bits_per_address@plt+0xc7d4>
   1db4c:	add	r0, r6, #1
   1db50:	bl	11180 <xmalloc@plt>
   1db54:	mov	r3, r9
   1db58:	mov	r2, r6
   1db5c:	mov	r1, #1
   1db60:	str	r0, [sp, #8]
   1db64:	bl	111b0 <fread@plt>
   1db68:	cmp	r6, r0
   1db6c:	mov	r3, r0
   1db70:	beq	1dbbc <bfd_arch_bits_per_address@plt+0xc808>
   1db74:	str	r0, [sp, #12]
   1db78:	mov	r0, r9
   1db7c:	bl	110c0 <ferror@plt>
   1db80:	cmp	r0, #0
   1db84:	beq	1dbb8 <bfd_arch_bits_per_address@plt+0xc804>
   1db88:	mov	r0, r9
   1db8c:	bl	112d0 <fclose@plt>
   1db90:	mov	r5, r4
   1db94:	ldr	r1, [sl]
   1db98:	add	r4, r5, #1
   1db9c:	cmp	r4, r1
   1dba0:	blt	1daac <bfd_arch_bits_per_address@plt+0xc6f8>
   1dba4:	add	sp, sp, #140	; 0x8c
   1dba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbac:	ldr	r1, [sl]
   1dbb0:	mov	r5, r4
   1dbb4:	b	1daa0 <bfd_arch_bits_per_address@plt+0xc6ec>
   1dbb8:	ldr	r3, [sp, #12]
   1dbbc:	ldr	r1, [sp, #8]
   1dbc0:	mov	r2, #0
   1dbc4:	strb	r2, [r1, r3]
   1dbc8:	ldrb	r3, [r1]
   1dbcc:	cmp	r3, r2
   1dbd0:	beq	1dc14 <bfd_arch_bits_per_address@plt+0xc860>
   1dbd4:	ldr	r2, [pc, #480]	; 1ddbc <bfd_arch_bits_per_address@plt+0xca08>
   1dbd8:	ldr	r1, [sp, #28]
   1dbdc:	lsl	r3, r3, #1
   1dbe0:	ldr	r1, [r1, r2]
   1dbe4:	ldrh	r3, [r1, r3]
   1dbe8:	tst	r3, #64	; 0x40
   1dbec:	beq	1dc54 <bfd_arch_bits_per_address@plt+0xc8a0>
   1dbf0:	ldr	r2, [sp, #8]
   1dbf4:	b	1dc08 <bfd_arch_bits_per_address@plt+0xc854>
   1dbf8:	lsl	r3, r3, #1
   1dbfc:	ldrh	r3, [r1, r3]
   1dc00:	tst	r3, #64	; 0x40
   1dc04:	beq	1dc54 <bfd_arch_bits_per_address@plt+0xc8a0>
   1dc08:	ldrb	r3, [r2, #1]!
   1dc0c:	cmp	r3, #0
   1dc10:	bne	1dbf8 <bfd_arch_bits_per_address@plt+0xc844>
   1dc14:	mov	r0, #4
   1dc18:	bl	11180 <xmalloc@plt>
   1dc1c:	ldr	r2, [sp, #24]
   1dc20:	mov	r6, #0
   1dc24:	mov	r3, r0
   1dc28:	str	r0, [sp, #12]
   1dc2c:	ldr	r0, [r7]
   1dc30:	str	r6, [r3]
   1dc34:	cmp	r2, r0
   1dc38:	bne	1dd38 <bfd_arch_bits_per_address@plt+0xc984>
   1dc3c:	mov	r0, r2
   1dc40:	bl	1d68c <bfd_arch_bits_per_address@plt+0xc2d8>
   1dc44:	mov	r3, r6
   1dc48:	mov	r2, r8
   1dc4c:	str	r0, [r7]
   1dc50:	b	1dca4 <bfd_arch_bits_per_address@plt+0xc8f0>
   1dc54:	ldr	r0, [sp, #8]
   1dc58:	bl	1d76c <bfd_arch_bits_per_address@plt+0xc3b8>
   1dc5c:	ldr	r2, [sp, #24]
   1dc60:	mov	r3, r0
   1dc64:	str	r0, [sp, #12]
   1dc68:	ldr	r0, [r7]
   1dc6c:	cmp	r0, r2
   1dc70:	beq	1dd9c <bfd_arch_bits_per_address@plt+0xc9e8>
   1dc74:	ldr	r6, [r3]
   1dc78:	cmp	r6, #0
   1dc7c:	beq	1dd38 <bfd_arch_bits_per_address@plt+0xc984>
   1dc80:	ldr	r2, [sp, #12]
   1dc84:	mov	r6, #0
   1dc88:	ldr	r3, [r2, #4]!
   1dc8c:	add	r6, r6, #1
   1dc90:	cmp	r3, #0
   1dc94:	lsl	r3, r6, #2
   1dc98:	bne	1dc88 <bfd_arch_bits_per_address@plt+0xc8d4>
   1dc9c:	add	r2, r4, r6
   1dca0:	lsl	r2, r2, #2
   1dca4:	ldr	r0, [r0, r8]
   1dca8:	str	r3, [sp, #16]
   1dcac:	str	r2, [sp, #20]
   1dcb0:	bl	110a8 <free@plt>
   1dcb4:	ldr	r1, [sl]
   1dcb8:	ldr	r0, [r7]
   1dcbc:	add	r1, r1, #1
   1dcc0:	add	r1, r1, r6
   1dcc4:	lsl	r1, r1, #2
   1dcc8:	bl	11144 <xrealloc@plt>
   1dccc:	ldr	r2, [sp, #20]
   1dcd0:	add	ip, r8, #4
   1dcd4:	mov	r1, r0
   1dcd8:	ldr	r0, [sl]
   1dcdc:	str	r1, [r7]
   1dce0:	sub	r4, r0, r4
   1dce4:	add	r0, r1, r2
   1dce8:	add	r1, r1, ip
   1dcec:	lsl	r2, r4, #2
   1dcf0:	bl	1109c <memmove@plt>
   1dcf4:	ldr	r4, [sp, #12]
   1dcf8:	ldr	r3, [sp, #16]
   1dcfc:	ldr	r0, [r7]
   1dd00:	mov	r2, r3
   1dd04:	mov	r1, r4
   1dd08:	add	r0, r0, r8
   1dd0c:	bl	110e4 <memcpy@plt>
   1dd10:	ldr	r3, [sl]
   1dd14:	mov	r0, r4
   1dd18:	sub	r3, r3, #1
   1dd1c:	add	r6, r3, r6
   1dd20:	str	r6, [sl]
   1dd24:	bl	110a8 <free@plt>
   1dd28:	ldr	r0, [sp, #8]
   1dd2c:	bl	110a8 <free@plt>
   1dd30:	mov	r4, r5
   1dd34:	b	1db88 <bfd_arch_bits_per_address@plt+0xc7d4>
   1dd38:	mov	r3, r6
   1dd3c:	mov	r2, r8
   1dd40:	b	1dca4 <bfd_arch_bits_per_address@plt+0xc8f0>
   1dd44:	ldr	r0, [pc, #116]	; 1ddc0 <bfd_arch_bits_per_address@plt+0xca0c>
   1dd48:	ldr	r2, [r3]
   1dd4c:	mov	r3, r0
   1dd50:	ldr	r0, [sp, #28]
   1dd54:	ldr	r1, [pc, #104]	; 1ddc4 <bfd_arch_bits_per_address@plt+0xca10>
   1dd58:	ldr	r3, [r0, r3]
   1dd5c:	add	r1, pc, r1
   1dd60:	ldr	r0, [r3]
   1dd64:	bl	11270 <fprintf@plt>
   1dd68:	mov	r0, #1
   1dd6c:	bl	1130c <xexit@plt>
   1dd70:	ldr	r0, [sp, #28]
   1dd74:	ldr	r3, [pc, #68]	; 1ddc0 <bfd_arch_bits_per_address@plt+0xca0c>
   1dd78:	ldr	r2, [r7]
   1dd7c:	ldr	r1, [pc, #68]	; 1ddc8 <bfd_arch_bits_per_address@plt+0xca14>
   1dd80:	ldr	r3, [r0, r3]
   1dd84:	add	r1, pc, r1
   1dd88:	ldr	r2, [r2]
   1dd8c:	ldr	r0, [r3]
   1dd90:	bl	11270 <fprintf@plt>
   1dd94:	mov	r0, #1
   1dd98:	bl	1130c <xexit@plt>
   1dd9c:	ldr	r3, [sp, #12]
   1dda0:	ldr	r0, [sp, #24]
   1dda4:	ldr	r6, [r3]
   1dda8:	bl	1d68c <bfd_arch_bits_per_address@plt+0xc2d8>
   1ddac:	str	r0, [r7]
   1ddb0:	b	1dc78 <bfd_arch_bits_per_address@plt+0xc8c4>
   1ddb4:	andeq	r6, r1, ip, ror r5
   1ddb8:	andeq	r1, r0, r8, asr #13
   1ddbc:	andeq	r0, r0, r0, lsr r1
   1ddc0:	andeq	r0, r0, r4, lsr r1
   1ddc4:	andeq	r4, r0, r8, lsr pc
   1ddc8:	andeq	r4, r0, ip, lsr pc
   1ddcc:	subs	r3, r0, #0
   1ddd0:	beq	1ddf8 <bfd_arch_bits_per_address@plt+0xca44>
   1ddd4:	ldr	r0, [r3]
   1ddd8:	cmp	r0, #0
   1dddc:	bxeq	lr
   1dde0:	mov	r0, #0
   1dde4:	ldr	r2, [r3, #4]!
   1dde8:	add	r0, r0, #1
   1ddec:	cmp	r2, #0
   1ddf0:	bne	1dde4 <bfd_arch_bits_per_address@plt+0xca30>
   1ddf4:	bx	lr
   1ddf8:	mov	r0, r3
   1ddfc:	bx	lr
   1de00:	subs	r2, r1, #1
   1de04:	bxeq	lr
   1de08:	bcc	1dfe0 <bfd_arch_bits_per_address@plt+0xcc2c>
   1de0c:	cmp	r0, r1
   1de10:	bls	1dfc4 <bfd_arch_bits_per_address@plt+0xcc10>
   1de14:	tst	r1, r2
   1de18:	beq	1dfd0 <bfd_arch_bits_per_address@plt+0xcc1c>
   1de1c:	clz	r3, r0
   1de20:	clz	r2, r1
   1de24:	sub	r3, r2, r3
   1de28:	rsbs	r3, r3, #31
   1de2c:	addne	r3, r3, r3, lsl #1
   1de30:	mov	r2, #0
   1de34:	addne	pc, pc, r3, lsl #2
   1de38:	nop			; (mov r0, r0)
   1de3c:	cmp	r0, r1, lsl #31
   1de40:	adc	r2, r2, r2
   1de44:	subcs	r0, r0, r1, lsl #31
   1de48:	cmp	r0, r1, lsl #30
   1de4c:	adc	r2, r2, r2
   1de50:	subcs	r0, r0, r1, lsl #30
   1de54:	cmp	r0, r1, lsl #29
   1de58:	adc	r2, r2, r2
   1de5c:	subcs	r0, r0, r1, lsl #29
   1de60:	cmp	r0, r1, lsl #28
   1de64:	adc	r2, r2, r2
   1de68:	subcs	r0, r0, r1, lsl #28
   1de6c:	cmp	r0, r1, lsl #27
   1de70:	adc	r2, r2, r2
   1de74:	subcs	r0, r0, r1, lsl #27
   1de78:	cmp	r0, r1, lsl #26
   1de7c:	adc	r2, r2, r2
   1de80:	subcs	r0, r0, r1, lsl #26
   1de84:	cmp	r0, r1, lsl #25
   1de88:	adc	r2, r2, r2
   1de8c:	subcs	r0, r0, r1, lsl #25
   1de90:	cmp	r0, r1, lsl #24
   1de94:	adc	r2, r2, r2
   1de98:	subcs	r0, r0, r1, lsl #24
   1de9c:	cmp	r0, r1, lsl #23
   1dea0:	adc	r2, r2, r2
   1dea4:	subcs	r0, r0, r1, lsl #23
   1dea8:	cmp	r0, r1, lsl #22
   1deac:	adc	r2, r2, r2
   1deb0:	subcs	r0, r0, r1, lsl #22
   1deb4:	cmp	r0, r1, lsl #21
   1deb8:	adc	r2, r2, r2
   1debc:	subcs	r0, r0, r1, lsl #21
   1dec0:	cmp	r0, r1, lsl #20
   1dec4:	adc	r2, r2, r2
   1dec8:	subcs	r0, r0, r1, lsl #20
   1decc:	cmp	r0, r1, lsl #19
   1ded0:	adc	r2, r2, r2
   1ded4:	subcs	r0, r0, r1, lsl #19
   1ded8:	cmp	r0, r1, lsl #18
   1dedc:	adc	r2, r2, r2
   1dee0:	subcs	r0, r0, r1, lsl #18
   1dee4:	cmp	r0, r1, lsl #17
   1dee8:	adc	r2, r2, r2
   1deec:	subcs	r0, r0, r1, lsl #17
   1def0:	cmp	r0, r1, lsl #16
   1def4:	adc	r2, r2, r2
   1def8:	subcs	r0, r0, r1, lsl #16
   1defc:	cmp	r0, r1, lsl #15
   1df00:	adc	r2, r2, r2
   1df04:	subcs	r0, r0, r1, lsl #15
   1df08:	cmp	r0, r1, lsl #14
   1df0c:	adc	r2, r2, r2
   1df10:	subcs	r0, r0, r1, lsl #14
   1df14:	cmp	r0, r1, lsl #13
   1df18:	adc	r2, r2, r2
   1df1c:	subcs	r0, r0, r1, lsl #13
   1df20:	cmp	r0, r1, lsl #12
   1df24:	adc	r2, r2, r2
   1df28:	subcs	r0, r0, r1, lsl #12
   1df2c:	cmp	r0, r1, lsl #11
   1df30:	adc	r2, r2, r2
   1df34:	subcs	r0, r0, r1, lsl #11
   1df38:	cmp	r0, r1, lsl #10
   1df3c:	adc	r2, r2, r2
   1df40:	subcs	r0, r0, r1, lsl #10
   1df44:	cmp	r0, r1, lsl #9
   1df48:	adc	r2, r2, r2
   1df4c:	subcs	r0, r0, r1, lsl #9
   1df50:	cmp	r0, r1, lsl #8
   1df54:	adc	r2, r2, r2
   1df58:	subcs	r0, r0, r1, lsl #8
   1df5c:	cmp	r0, r1, lsl #7
   1df60:	adc	r2, r2, r2
   1df64:	subcs	r0, r0, r1, lsl #7
   1df68:	cmp	r0, r1, lsl #6
   1df6c:	adc	r2, r2, r2
   1df70:	subcs	r0, r0, r1, lsl #6
   1df74:	cmp	r0, r1, lsl #5
   1df78:	adc	r2, r2, r2
   1df7c:	subcs	r0, r0, r1, lsl #5
   1df80:	cmp	r0, r1, lsl #4
   1df84:	adc	r2, r2, r2
   1df88:	subcs	r0, r0, r1, lsl #4
   1df8c:	cmp	r0, r1, lsl #3
   1df90:	adc	r2, r2, r2
   1df94:	subcs	r0, r0, r1, lsl #3
   1df98:	cmp	r0, r1, lsl #2
   1df9c:	adc	r2, r2, r2
   1dfa0:	subcs	r0, r0, r1, lsl #2
   1dfa4:	cmp	r0, r1, lsl #1
   1dfa8:	adc	r2, r2, r2
   1dfac:	subcs	r0, r0, r1, lsl #1
   1dfb0:	cmp	r0, r1
   1dfb4:	adc	r2, r2, r2
   1dfb8:	subcs	r0, r0, r1
   1dfbc:	mov	r0, r2
   1dfc0:	bx	lr
   1dfc4:	moveq	r0, #1
   1dfc8:	movne	r0, #0
   1dfcc:	bx	lr
   1dfd0:	clz	r2, r1
   1dfd4:	rsb	r2, r2, #31
   1dfd8:	lsr	r0, r0, r2
   1dfdc:	bx	lr
   1dfe0:	cmp	r0, #0
   1dfe4:	mvnne	r0, #0
   1dfe8:	b	1e60c <bfd_arch_bits_per_address@plt+0xd258>
   1dfec:	cmp	r1, #0
   1dff0:	beq	1dfe0 <bfd_arch_bits_per_address@plt+0xcc2c>
   1dff4:	push	{r0, r1, lr}
   1dff8:	bl	1de00 <bfd_arch_bits_per_address@plt+0xca4c>
   1dffc:	pop	{r1, r2, lr}
   1e000:	mul	r3, r2, r0
   1e004:	sub	r1, r1, r3
   1e008:	bx	lr
   1e00c:	cmp	r1, #0
   1e010:	beq	1e21c <bfd_arch_bits_per_address@plt+0xce68>
   1e014:	eor	ip, r0, r1
   1e018:	rsbmi	r1, r1, #0
   1e01c:	subs	r2, r1, #1
   1e020:	beq	1e1e8 <bfd_arch_bits_per_address@plt+0xce34>
   1e024:	movs	r3, r0
   1e028:	rsbmi	r3, r0, #0
   1e02c:	cmp	r3, r1
   1e030:	bls	1e1f4 <bfd_arch_bits_per_address@plt+0xce40>
   1e034:	tst	r1, r2
   1e038:	beq	1e204 <bfd_arch_bits_per_address@plt+0xce50>
   1e03c:	clz	r2, r3
   1e040:	clz	r0, r1
   1e044:	sub	r2, r0, r2
   1e048:	rsbs	r2, r2, #31
   1e04c:	addne	r2, r2, r2, lsl #1
   1e050:	mov	r0, #0
   1e054:	addne	pc, pc, r2, lsl #2
   1e058:	nop			; (mov r0, r0)
   1e05c:	cmp	r3, r1, lsl #31
   1e060:	adc	r0, r0, r0
   1e064:	subcs	r3, r3, r1, lsl #31
   1e068:	cmp	r3, r1, lsl #30
   1e06c:	adc	r0, r0, r0
   1e070:	subcs	r3, r3, r1, lsl #30
   1e074:	cmp	r3, r1, lsl #29
   1e078:	adc	r0, r0, r0
   1e07c:	subcs	r3, r3, r1, lsl #29
   1e080:	cmp	r3, r1, lsl #28
   1e084:	adc	r0, r0, r0
   1e088:	subcs	r3, r3, r1, lsl #28
   1e08c:	cmp	r3, r1, lsl #27
   1e090:	adc	r0, r0, r0
   1e094:	subcs	r3, r3, r1, lsl #27
   1e098:	cmp	r3, r1, lsl #26
   1e09c:	adc	r0, r0, r0
   1e0a0:	subcs	r3, r3, r1, lsl #26
   1e0a4:	cmp	r3, r1, lsl #25
   1e0a8:	adc	r0, r0, r0
   1e0ac:	subcs	r3, r3, r1, lsl #25
   1e0b0:	cmp	r3, r1, lsl #24
   1e0b4:	adc	r0, r0, r0
   1e0b8:	subcs	r3, r3, r1, lsl #24
   1e0bc:	cmp	r3, r1, lsl #23
   1e0c0:	adc	r0, r0, r0
   1e0c4:	subcs	r3, r3, r1, lsl #23
   1e0c8:	cmp	r3, r1, lsl #22
   1e0cc:	adc	r0, r0, r0
   1e0d0:	subcs	r3, r3, r1, lsl #22
   1e0d4:	cmp	r3, r1, lsl #21
   1e0d8:	adc	r0, r0, r0
   1e0dc:	subcs	r3, r3, r1, lsl #21
   1e0e0:	cmp	r3, r1, lsl #20
   1e0e4:	adc	r0, r0, r0
   1e0e8:	subcs	r3, r3, r1, lsl #20
   1e0ec:	cmp	r3, r1, lsl #19
   1e0f0:	adc	r0, r0, r0
   1e0f4:	subcs	r3, r3, r1, lsl #19
   1e0f8:	cmp	r3, r1, lsl #18
   1e0fc:	adc	r0, r0, r0
   1e100:	subcs	r3, r3, r1, lsl #18
   1e104:	cmp	r3, r1, lsl #17
   1e108:	adc	r0, r0, r0
   1e10c:	subcs	r3, r3, r1, lsl #17
   1e110:	cmp	r3, r1, lsl #16
   1e114:	adc	r0, r0, r0
   1e118:	subcs	r3, r3, r1, lsl #16
   1e11c:	cmp	r3, r1, lsl #15
   1e120:	adc	r0, r0, r0
   1e124:	subcs	r3, r3, r1, lsl #15
   1e128:	cmp	r3, r1, lsl #14
   1e12c:	adc	r0, r0, r0
   1e130:	subcs	r3, r3, r1, lsl #14
   1e134:	cmp	r3, r1, lsl #13
   1e138:	adc	r0, r0, r0
   1e13c:	subcs	r3, r3, r1, lsl #13
   1e140:	cmp	r3, r1, lsl #12
   1e144:	adc	r0, r0, r0
   1e148:	subcs	r3, r3, r1, lsl #12
   1e14c:	cmp	r3, r1, lsl #11
   1e150:	adc	r0, r0, r0
   1e154:	subcs	r3, r3, r1, lsl #11
   1e158:	cmp	r3, r1, lsl #10
   1e15c:	adc	r0, r0, r0
   1e160:	subcs	r3, r3, r1, lsl #10
   1e164:	cmp	r3, r1, lsl #9
   1e168:	adc	r0, r0, r0
   1e16c:	subcs	r3, r3, r1, lsl #9
   1e170:	cmp	r3, r1, lsl #8
   1e174:	adc	r0, r0, r0
   1e178:	subcs	r3, r3, r1, lsl #8
   1e17c:	cmp	r3, r1, lsl #7
   1e180:	adc	r0, r0, r0
   1e184:	subcs	r3, r3, r1, lsl #7
   1e188:	cmp	r3, r1, lsl #6
   1e18c:	adc	r0, r0, r0
   1e190:	subcs	r3, r3, r1, lsl #6
   1e194:	cmp	r3, r1, lsl #5
   1e198:	adc	r0, r0, r0
   1e19c:	subcs	r3, r3, r1, lsl #5
   1e1a0:	cmp	r3, r1, lsl #4
   1e1a4:	adc	r0, r0, r0
   1e1a8:	subcs	r3, r3, r1, lsl #4
   1e1ac:	cmp	r3, r1, lsl #3
   1e1b0:	adc	r0, r0, r0
   1e1b4:	subcs	r3, r3, r1, lsl #3
   1e1b8:	cmp	r3, r1, lsl #2
   1e1bc:	adc	r0, r0, r0
   1e1c0:	subcs	r3, r3, r1, lsl #2
   1e1c4:	cmp	r3, r1, lsl #1
   1e1c8:	adc	r0, r0, r0
   1e1cc:	subcs	r3, r3, r1, lsl #1
   1e1d0:	cmp	r3, r1
   1e1d4:	adc	r0, r0, r0
   1e1d8:	subcs	r3, r3, r1
   1e1dc:	cmp	ip, #0
   1e1e0:	rsbmi	r0, r0, #0
   1e1e4:	bx	lr
   1e1e8:	teq	ip, r0
   1e1ec:	rsbmi	r0, r0, #0
   1e1f0:	bx	lr
   1e1f4:	movcc	r0, #0
   1e1f8:	asreq	r0, ip, #31
   1e1fc:	orreq	r0, r0, #1
   1e200:	bx	lr
   1e204:	clz	r2, r1
   1e208:	rsb	r2, r2, #31
   1e20c:	cmp	ip, #0
   1e210:	lsr	r0, r3, r2
   1e214:	rsbmi	r0, r0, #0
   1e218:	bx	lr
   1e21c:	cmp	r0, #0
   1e220:	mvngt	r0, #-2147483648	; 0x80000000
   1e224:	movlt	r0, #-2147483648	; 0x80000000
   1e228:	b	1e60c <bfd_arch_bits_per_address@plt+0xd258>
   1e22c:	cmp	r1, #0
   1e230:	beq	1e21c <bfd_arch_bits_per_address@plt+0xce68>
   1e234:	push	{r0, r1, lr}
   1e238:	bl	1e014 <bfd_arch_bits_per_address@plt+0xcc60>
   1e23c:	pop	{r1, r2, lr}
   1e240:	mul	r3, r2, r0
   1e244:	sub	r1, r1, r3
   1e248:	bx	lr
   1e24c:	eor	r1, r1, #-2147483648	; 0x80000000
   1e250:	b	1e258 <bfd_arch_bits_per_address@plt+0xcea4>
   1e254:	eor	r3, r3, #-2147483648	; 0x80000000
   1e258:	push	{r4, r5, lr}
   1e25c:	lsl	r4, r1, #1
   1e260:	lsl	r5, r3, #1
   1e264:	teq	r4, r5
   1e268:	teqeq	r0, r2
   1e26c:	orrsne	ip, r4, r0
   1e270:	orrsne	ip, r5, r2
   1e274:	mvnsne	ip, r4, asr #21
   1e278:	mvnsne	ip, r5, asr #21
   1e27c:	beq	1e468 <bfd_arch_bits_per_address@plt+0xd0b4>
   1e280:	lsr	r4, r4, #21
   1e284:	rsbs	r5, r4, r5, lsr #21
   1e288:	rsblt	r5, r5, #0
   1e28c:	ble	1e2ac <bfd_arch_bits_per_address@plt+0xcef8>
   1e290:	add	r4, r4, r5
   1e294:	eor	r2, r0, r2
   1e298:	eor	r3, r1, r3
   1e29c:	eor	r0, r2, r0
   1e2a0:	eor	r1, r3, r1
   1e2a4:	eor	r2, r0, r2
   1e2a8:	eor	r3, r1, r3
   1e2ac:	cmp	r5, #54	; 0x36
   1e2b0:	pophi	{r4, r5, pc}
   1e2b4:	tst	r1, #-2147483648	; 0x80000000
   1e2b8:	lsl	r1, r1, #12
   1e2bc:	mov	ip, #1048576	; 0x100000
   1e2c0:	orr	r1, ip, r1, lsr #12
   1e2c4:	beq	1e2d0 <bfd_arch_bits_per_address@plt+0xcf1c>
   1e2c8:	rsbs	r0, r0, #0
   1e2cc:	rsc	r1, r1, #0
   1e2d0:	tst	r3, #-2147483648	; 0x80000000
   1e2d4:	lsl	r3, r3, #12
   1e2d8:	orr	r3, ip, r3, lsr #12
   1e2dc:	beq	1e2e8 <bfd_arch_bits_per_address@plt+0xcf34>
   1e2e0:	rsbs	r2, r2, #0
   1e2e4:	rsc	r3, r3, #0
   1e2e8:	teq	r4, r5
   1e2ec:	beq	1e450 <bfd_arch_bits_per_address@plt+0xd09c>
   1e2f0:	sub	r4, r4, #1
   1e2f4:	rsbs	lr, r5, #32
   1e2f8:	blt	1e314 <bfd_arch_bits_per_address@plt+0xcf60>
   1e2fc:	lsl	ip, r2, lr
   1e300:	adds	r0, r0, r2, lsr r5
   1e304:	adc	r1, r1, #0
   1e308:	adds	r0, r0, r3, lsl lr
   1e30c:	adcs	r1, r1, r3, asr r5
   1e310:	b	1e330 <bfd_arch_bits_per_address@plt+0xcf7c>
   1e314:	sub	r5, r5, #32
   1e318:	add	lr, lr, #32
   1e31c:	cmp	r2, #1
   1e320:	lsl	ip, r3, lr
   1e324:	orrcs	ip, ip, #2
   1e328:	adds	r0, r0, r3, asr r5
   1e32c:	adcs	r1, r1, r3, asr #31
   1e330:	and	r5, r1, #-2147483648	; 0x80000000
   1e334:	bpl	1e344 <bfd_arch_bits_per_address@plt+0xcf90>
   1e338:	rsbs	ip, ip, #0
   1e33c:	rscs	r0, r0, #0
   1e340:	rsc	r1, r1, #0
   1e344:	cmp	r1, #1048576	; 0x100000
   1e348:	bcc	1e388 <bfd_arch_bits_per_address@plt+0xcfd4>
   1e34c:	cmp	r1, #2097152	; 0x200000
   1e350:	bcc	1e370 <bfd_arch_bits_per_address@plt+0xcfbc>
   1e354:	lsrs	r1, r1, #1
   1e358:	rrxs	r0, r0
   1e35c:	rrx	ip, ip
   1e360:	add	r4, r4, #1
   1e364:	lsl	r2, r4, #21
   1e368:	cmn	r2, #4194304	; 0x400000
   1e36c:	bcs	1e4c8 <bfd_arch_bits_per_address@plt+0xd114>
   1e370:	cmp	ip, #-2147483648	; 0x80000000
   1e374:	lsrseq	ip, r0, #1
   1e378:	adcs	r0, r0, #0
   1e37c:	adc	r1, r1, r4, lsl #20
   1e380:	orr	r1, r1, r5
   1e384:	pop	{r4, r5, pc}
   1e388:	lsls	ip, ip, #1
   1e38c:	adcs	r0, r0, r0
   1e390:	adc	r1, r1, r1
   1e394:	tst	r1, #1048576	; 0x100000
   1e398:	sub	r4, r4, #1
   1e39c:	bne	1e370 <bfd_arch_bits_per_address@plt+0xcfbc>
   1e3a0:	teq	r1, #0
   1e3a4:	moveq	r1, r0
   1e3a8:	moveq	r0, #0
   1e3ac:	clz	r3, r1
   1e3b0:	addeq	r3, r3, #32
   1e3b4:	sub	r3, r3, #11
   1e3b8:	subs	r2, r3, #32
   1e3bc:	bge	1e3e0 <bfd_arch_bits_per_address@plt+0xd02c>
   1e3c0:	adds	r2, r2, #12
   1e3c4:	ble	1e3dc <bfd_arch_bits_per_address@plt+0xd028>
   1e3c8:	add	ip, r2, #20
   1e3cc:	rsb	r2, r2, #12
   1e3d0:	lsl	r0, r1, ip
   1e3d4:	lsr	r1, r1, r2
   1e3d8:	b	1e3f0 <bfd_arch_bits_per_address@plt+0xd03c>
   1e3dc:	add	r2, r2, #20
   1e3e0:	rsble	ip, r2, #32
   1e3e4:	lsl	r1, r1, r2
   1e3e8:	orrle	r1, r1, r0, lsr ip
   1e3ec:	lslle	r0, r0, r2
   1e3f0:	subs	r4, r4, r3
   1e3f4:	addge	r1, r1, r4, lsl #20
   1e3f8:	orrge	r1, r1, r5
   1e3fc:	popge	{r4, r5, pc}
   1e400:	mvn	r4, r4
   1e404:	subs	r4, r4, #31
   1e408:	bge	1e444 <bfd_arch_bits_per_address@plt+0xd090>
   1e40c:	adds	r4, r4, #12
   1e410:	bgt	1e42c <bfd_arch_bits_per_address@plt+0xd078>
   1e414:	add	r4, r4, #20
   1e418:	rsb	r2, r4, #32
   1e41c:	lsr	r0, r0, r4
   1e420:	orr	r0, r0, r1, lsl r2
   1e424:	orr	r1, r5, r1, lsr r4
   1e428:	pop	{r4, r5, pc}
   1e42c:	rsb	r4, r4, #12
   1e430:	rsb	r2, r4, #32
   1e434:	lsr	r0, r0, r2
   1e438:	orr	r0, r0, r1, lsl r4
   1e43c:	mov	r1, r5
   1e440:	pop	{r4, r5, pc}
   1e444:	lsr	r0, r1, r4
   1e448:	mov	r1, r5
   1e44c:	pop	{r4, r5, pc}
   1e450:	teq	r4, #0
   1e454:	eor	r3, r3, #1048576	; 0x100000
   1e458:	eoreq	r1, r1, #1048576	; 0x100000
   1e45c:	addeq	r4, r4, #1
   1e460:	subne	r5, r5, #1
   1e464:	b	1e2f0 <bfd_arch_bits_per_address@plt+0xcf3c>
   1e468:	mvns	ip, r4, asr #21
   1e46c:	mvnsne	ip, r5, asr #21
   1e470:	beq	1e4d8 <bfd_arch_bits_per_address@plt+0xd124>
   1e474:	teq	r4, r5
   1e478:	teqeq	r0, r2
   1e47c:	beq	1e490 <bfd_arch_bits_per_address@plt+0xd0dc>
   1e480:	orrs	ip, r4, r0
   1e484:	moveq	r1, r3
   1e488:	moveq	r0, r2
   1e48c:	pop	{r4, r5, pc}
   1e490:	teq	r1, r3
   1e494:	movne	r1, #0
   1e498:	movne	r0, #0
   1e49c:	popne	{r4, r5, pc}
   1e4a0:	lsrs	ip, r4, #21
   1e4a4:	bne	1e4b8 <bfd_arch_bits_per_address@plt+0xd104>
   1e4a8:	lsls	r0, r0, #1
   1e4ac:	adcs	r1, r1, r1
   1e4b0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1e4b4:	pop	{r4, r5, pc}
   1e4b8:	adds	r4, r4, #4194304	; 0x400000
   1e4bc:	addcc	r1, r1, #1048576	; 0x100000
   1e4c0:	popcc	{r4, r5, pc}
   1e4c4:	and	r5, r1, #-2147483648	; 0x80000000
   1e4c8:	orr	r1, r5, #2130706432	; 0x7f000000
   1e4cc:	orr	r1, r1, #15728640	; 0xf00000
   1e4d0:	mov	r0, #0
   1e4d4:	pop	{r4, r5, pc}
   1e4d8:	mvns	ip, r4, asr #21
   1e4dc:	movne	r1, r3
   1e4e0:	movne	r0, r2
   1e4e4:	mvnseq	ip, r5, asr #21
   1e4e8:	movne	r3, r1
   1e4ec:	movne	r2, r0
   1e4f0:	orrs	r4, r0, r1, lsl #12
   1e4f4:	orrseq	r5, r2, r3, lsl #12
   1e4f8:	teqeq	r1, r3
   1e4fc:	orrne	r1, r1, #524288	; 0x80000
   1e500:	pop	{r4, r5, pc}
   1e504:	teq	r0, #0
   1e508:	moveq	r1, #0
   1e50c:	bxeq	lr
   1e510:	push	{r4, r5, lr}
   1e514:	mov	r4, #1024	; 0x400
   1e518:	add	r4, r4, #50	; 0x32
   1e51c:	mov	r5, #0
   1e520:	mov	r1, #0
   1e524:	b	1e3a0 <bfd_arch_bits_per_address@plt+0xcfec>
   1e528:	teq	r0, #0
   1e52c:	moveq	r1, #0
   1e530:	bxeq	lr
   1e534:	push	{r4, r5, lr}
   1e538:	mov	r4, #1024	; 0x400
   1e53c:	add	r4, r4, #50	; 0x32
   1e540:	ands	r5, r0, #-2147483648	; 0x80000000
   1e544:	rsbmi	r0, r0, #0
   1e548:	mov	r1, #0
   1e54c:	b	1e3a0 <bfd_arch_bits_per_address@plt+0xcfec>
   1e550:	lsls	r2, r0, #1
   1e554:	asr	r1, r2, #3
   1e558:	rrx	r1, r1
   1e55c:	lsl	r0, r2, #28
   1e560:	andsne	r3, r2, #-16777216	; 0xff000000
   1e564:	teqne	r3, #-16777216	; 0xff000000
   1e568:	eorne	r1, r1, #939524096	; 0x38000000
   1e56c:	bxne	lr
   1e570:	bics	r2, r2, #-16777216	; 0xff000000
   1e574:	bxeq	lr
   1e578:	teq	r3, #-16777216	; 0xff000000
   1e57c:	orreq	r1, r1, #524288	; 0x80000
   1e580:	bxeq	lr
   1e584:	push	{r4, r5, lr}
   1e588:	mov	r4, #896	; 0x380
   1e58c:	and	r5, r1, #-2147483648	; 0x80000000
   1e590:	bic	r1, r1, #-2147483648	; 0x80000000
   1e594:	b	1e3a0 <bfd_arch_bits_per_address@plt+0xcfec>
   1e598:	orrs	r2, r0, r1
   1e59c:	bxeq	lr
   1e5a0:	push	{r4, r5, lr}
   1e5a4:	mov	r5, #0
   1e5a8:	b	1e5c8 <bfd_arch_bits_per_address@plt+0xd214>
   1e5ac:	orrs	r2, r0, r1
   1e5b0:	bxeq	lr
   1e5b4:	push	{r4, r5, lr}
   1e5b8:	ands	r5, r1, #-2147483648	; 0x80000000
   1e5bc:	bpl	1e5c8 <bfd_arch_bits_per_address@plt+0xd214>
   1e5c0:	rsbs	r0, r0, #0
   1e5c4:	rsc	r1, r1, #0
   1e5c8:	mov	r4, #1024	; 0x400
   1e5cc:	add	r4, r4, #50	; 0x32
   1e5d0:	lsrs	ip, r1, #22
   1e5d4:	beq	1e344 <bfd_arch_bits_per_address@plt+0xcf90>
   1e5d8:	mov	r2, #3
   1e5dc:	lsrs	ip, ip, #3
   1e5e0:	addne	r2, r2, #3
   1e5e4:	lsrs	ip, ip, #3
   1e5e8:	addne	r2, r2, #3
   1e5ec:	add	r2, r2, ip, lsr #3
   1e5f0:	rsb	r3, r2, #32
   1e5f4:	lsl	ip, r0, r3
   1e5f8:	lsr	r0, r0, r2
   1e5fc:	orr	r0, r0, r1, lsl r3
   1e600:	lsr	r1, r1, r2
   1e604:	add	r4, r4, r2
   1e608:	b	1e344 <bfd_arch_bits_per_address@plt+0xcf90>
   1e60c:	push	{r1, lr}
   1e610:	mov	r0, #8
   1e614:	bl	11054 <raise@plt>
   1e618:	pop	{r1, pc}
   1e61c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e620:	mov	r7, r0
   1e624:	ldr	r6, [pc, #72]	; 1e674 <bfd_arch_bits_per_address@plt+0xd2c0>
   1e628:	ldr	r5, [pc, #72]	; 1e678 <bfd_arch_bits_per_address@plt+0xd2c4>
   1e62c:	add	r6, pc, r6
   1e630:	add	r5, pc, r5
   1e634:	sub	r6, r6, r5
   1e638:	mov	r8, r1
   1e63c:	mov	r9, r2
   1e640:	bl	11034 <raise@plt-0x20>
   1e644:	asrs	r6, r6, #2
   1e648:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e64c:	mov	r4, #0
   1e650:	add	r4, r4, #1
   1e654:	ldr	r3, [r5], #4
   1e658:	mov	r2, r9
   1e65c:	mov	r1, r8
   1e660:	mov	r0, r7
   1e664:	blx	r3
   1e668:	cmp	r6, r4
   1e66c:	bne	1e650 <bfd_arch_bits_per_address@plt+0xd29c>
   1e670:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e674:	andeq	r5, r1, r0, asr #13
   1e678:			; <UNDEFINED> instruction: 0x000156b8
   1e67c:	bx	lr

Disassembly of section .fini:

0001e680 <.fini>:
   1e680:	push	{r3, lr}
   1e684:	pop	{r3, pc}
