
raspbian-preinstalled/choom:     file format elf32-littlearm


Disassembly of section .init:

00011310 <.init>:
   11310:	push	{r3, lr}
   11314:	bl	11da4 <__assert_fail@plt+0x648>
   11318:	pop	{r3, pc}

Disassembly of section .plt:

0001131c <fdopen@plt-0x14>:
   1131c:	push	{lr}		; (str lr, [sp, #-4]!)
   11320:	ldr	lr, [pc, #4]	; 1132c <fdopen@plt-0x4>
   11324:	add	lr, pc, lr
   11328:	ldr	pc, [lr, #8]!
   1132c:	andeq	r6, r1, r0, asr fp

00011330 <fdopen@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #90112	; 0x16000
   11338:	ldr	pc, [ip, #2896]!	; 0xb50

0001133c <calloc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #90112	; 0x16000
   11344:	ldr	pc, [ip, #2888]!	; 0xb48

00011348 <raise@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #90112	; 0x16000
   11350:	ldr	pc, [ip, #2880]!	; 0xb40

00011354 <strcmp@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #90112	; 0x16000
   1135c:	ldr	pc, [ip, #2872]!	; 0xb38

00011360 <rewinddir@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #90112	; 0x16000
   11368:	ldr	pc, [ip, #2864]!	; 0xb30

0001136c <strtol@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #90112	; 0x16000
   11374:	ldr	pc, [ip, #2856]!	; 0xb28

00011378 <strcspn@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #90112	; 0x16000
   11380:	ldr	pc, [ip, #2848]!	; 0xb20

00011384 <read@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #90112	; 0x16000
   1138c:	ldr	pc, [ip, #2840]!	; 0xb18

00011390 <getuid@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #90112	; 0x16000
   11398:	ldr	pc, [ip, #2832]!	; 0xb10

0001139c <free@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #90112	; 0x16000
   113a4:	ldr	pc, [ip, #2824]!	; 0xb08

000113a8 <fgets@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #90112	; 0x16000
   113b0:	ldr	pc, [ip, #2816]!	; 0xb00

000113b4 <nanosleep@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #90112	; 0x16000
   113bc:	ldr	pc, [ip, #2808]!	; 0xaf8

000113c0 <faccessat@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #90112	; 0x16000
   113c8:	ldr	pc, [ip, #2800]!	; 0xaf0

000113cc <ferror@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #90112	; 0x16000
   113d4:	ldr	pc, [ip, #2792]!	; 0xae8

000113d8 <strndup@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #90112	; 0x16000
   113e0:	ldr	pc, [ip, #2784]!	; 0xae0

000113e4 <__openat64_2@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #90112	; 0x16000
   113ec:	ldr	pc, [ip, #2776]!	; 0xad8

000113f0 <_exit@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #90112	; 0x16000
   113f8:	ldr	pc, [ip, #2768]!	; 0xad0

000113fc <__vsnprintf_chk@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #90112	; 0x16000
   11404:	ldr	pc, [ip, #2760]!	; 0xac8

00011408 <memcpy@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #90112	; 0x16000
   11410:	ldr	pc, [ip, #2752]!	; 0xac0

00011414 <execvp@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #90112	; 0x16000
   1141c:	ldr	pc, [ip, #2744]!	; 0xab8

00011420 <__strtoull_internal@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #90112	; 0x16000
   11428:	ldr	pc, [ip, #2736]!	; 0xab0

0001142c <dcgettext@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #90112	; 0x16000
   11434:	ldr	pc, [ip, #2728]!	; 0xaa8

00011438 <strdup@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #90112	; 0x16000
   11440:	ldr	pc, [ip, #2720]!	; 0xaa0

00011444 <__stack_chk_fail@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #90112	; 0x16000
   1144c:	ldr	pc, [ip, #2712]!	; 0xa98

00011450 <dup@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #90112	; 0x16000
   11458:	ldr	pc, [ip, #2704]!	; 0xa90

0001145c <textdomain@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #90112	; 0x16000
   11464:	ldr	pc, [ip, #2696]!	; 0xa88

00011468 <err@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #90112	; 0x16000
   11470:	ldr	pc, [ip, #2688]!	; 0xa80

00011474 <geteuid@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #90112	; 0x16000
   1147c:	ldr	pc, [ip, #2680]!	; 0xa78

00011480 <vfscanf@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #90112	; 0x16000
   11488:	ldr	pc, [ip, #2672]!	; 0xa70

0001148c <readlink@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #90112	; 0x16000
   11494:	ldr	pc, [ip, #2664]!	; 0xa68

00011498 <getegid@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #90112	; 0x16000
   114a0:	ldr	pc, [ip, #2656]!	; 0xa60

000114a4 <mkostemp64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #90112	; 0x16000
   114ac:	ldr	pc, [ip, #2648]!	; 0xa58

000114b0 <__fpending@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #90112	; 0x16000
   114b8:	ldr	pc, [ip, #2640]!	; 0xa50

000114bc <open64@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #90112	; 0x16000
   114c4:	ldr	pc, [ip, #2632]!	; 0xa48

000114c8 <__asprintf_chk@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #90112	; 0x16000
   114d0:	ldr	pc, [ip, #2624]!	; 0xa40

000114d4 <getenv@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #90112	; 0x16000
   114dc:	ldr	pc, [ip, #2616]!	; 0xa38

000114e0 <malloc@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #90112	; 0x16000
   114e8:	ldr	pc, [ip, #2608]!	; 0xa30

000114ec <__libc_start_main@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #90112	; 0x16000
   114f4:	ldr	pc, [ip, #2600]!	; 0xa28

000114f8 <readlinkat@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #90112	; 0x16000
   11500:	ldr	pc, [ip, #2592]!	; 0xa20

00011504 <__vfprintf_chk@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #90112	; 0x16000
   1150c:	ldr	pc, [ip, #2584]!	; 0xa18

00011510 <getdtablesize@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #90112	; 0x16000
   11518:	ldr	pc, [ip, #2576]!	; 0xa10

0001151c <__ctype_tolower_loc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #90112	; 0x16000
   11524:	ldr	pc, [ip, #2568]!	; 0xa08

00011528 <__gmon_start__@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #90112	; 0x16000
   11530:	ldr	pc, [ip, #2560]!	; 0xa00

00011534 <getopt_long@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #90112	; 0x16000
   1153c:	ldr	pc, [ip, #2552]!	; 0x9f8

00011540 <__ctype_b_loc@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #90112	; 0x16000
   11548:	ldr	pc, [ip, #2544]!	; 0x9f0

0001154c <getpid@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #90112	; 0x16000
   11554:	ldr	pc, [ip, #2536]!	; 0x9e8

00011558 <exit@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #90112	; 0x16000
   11560:	ldr	pc, [ip, #2528]!	; 0x9e0

00011564 <syscall@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #90112	; 0x16000
   1156c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011570 <strtoul@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #90112	; 0x16000
   11578:	ldr	pc, [ip, #2512]!	; 0x9d0

0001157c <strlen@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #90112	; 0x16000
   11584:	ldr	pc, [ip, #2504]!	; 0x9c8

00011588 <strchr@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #90112	; 0x16000
   11590:	ldr	pc, [ip, #2496]!	; 0x9c0

00011594 <warnx@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #90112	; 0x16000
   1159c:	ldr	pc, [ip, #2488]!	; 0x9b8

000115a0 <__open64_2@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #90112	; 0x16000
   115a8:	ldr	pc, [ip, #2480]!	; 0x9b0

000115ac <__errno_location@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #90112	; 0x16000
   115b4:	ldr	pc, [ip, #2472]!	; 0x9a8

000115b8 <__cxa_atexit@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #90112	; 0x16000
   115c0:	ldr	pc, [ip, #2464]!	; 0x9a0

000115c4 <__vasprintf_chk@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #90112	; 0x16000
   115cc:	ldr	pc, [ip, #2456]!	; 0x998

000115d0 <mkdir@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #90112	; 0x16000
   115d8:	ldr	pc, [ip, #2448]!	; 0x990

000115dc <getgid@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #90112	; 0x16000
   115e4:	ldr	pc, [ip, #2440]!	; 0x988

000115e8 <__sched_cpufree@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #90112	; 0x16000
   115f0:	ldr	pc, [ip, #2432]!	; 0x980

000115f4 <memset@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #90112	; 0x16000
   115fc:	ldr	pc, [ip, #2424]!	; 0x978

00011600 <strncpy@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #90112	; 0x16000
   11608:	ldr	pc, [ip, #2416]!	; 0x970

0001160c <fgetc@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #90112	; 0x16000
   11614:	ldr	pc, [ip, #2408]!	; 0x968

00011618 <__printf_chk@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #90112	; 0x16000
   11620:	ldr	pc, [ip, #2400]!	; 0x960

00011624 <strtod@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #90112	; 0x16000
   1162c:	ldr	pc, [ip, #2392]!	; 0x958

00011630 <write@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #90112	; 0x16000
   11638:	ldr	pc, [ip, #2384]!	; 0x950

0001163c <__sched_cpualloc@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #90112	; 0x16000
   11644:	ldr	pc, [ip, #2376]!	; 0x948

00011648 <__fprintf_chk@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #90112	; 0x16000
   11650:	ldr	pc, [ip, #2368]!	; 0x940

00011654 <fclose@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #90112	; 0x16000
   1165c:	ldr	pc, [ip, #2360]!	; 0x938

00011660 <fcntl64@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #90112	; 0x16000
   11668:	ldr	pc, [ip, #2352]!	; 0x930

0001166c <setlocale@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #90112	; 0x16000
   11674:	ldr	pc, [ip, #2344]!	; 0x928

00011678 <errx@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #90112	; 0x16000
   11680:	ldr	pc, [ip, #2336]!	; 0x920

00011684 <strrchr@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #90112	; 0x16000
   1168c:	ldr	pc, [ip, #2328]!	; 0x918

00011690 <warn@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #90112	; 0x16000
   11698:	ldr	pc, [ip, #2320]!	; 0x910

0001169c <fputc@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #90112	; 0x16000
   116a4:	ldr	pc, [ip, #2312]!	; 0x908

000116a8 <sscanf@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #90112	; 0x16000
   116b0:	ldr	pc, [ip, #2304]!	; 0x900

000116b4 <localeconv@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #90112	; 0x16000
   116bc:	ldr	pc, [ip, #2296]!	; 0x8f8

000116c0 <readdir64@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #90112	; 0x16000
   116c8:	ldr	pc, [ip, #2288]!	; 0x8f0

000116cc <fdopendir@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #90112	; 0x16000
   116d4:	ldr	pc, [ip, #2280]!	; 0x8e8

000116d8 <__strtoll_internal@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #90112	; 0x16000
   116e0:	ldr	pc, [ip, #2272]!	; 0x8e0

000116e4 <fopen64@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #90112	; 0x16000
   116ec:	ldr	pc, [ip, #2264]!	; 0x8d8

000116f0 <bindtextdomain@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #90112	; 0x16000
   116f8:	ldr	pc, [ip, #2256]!	; 0x8d0

000116fc <umask@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #90112	; 0x16000
   11704:	ldr	pc, [ip, #2248]!	; 0x8c8

00011708 <fputs@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #90112	; 0x16000
   11710:	ldr	pc, [ip, #2240]!	; 0x8c0

00011714 <strncmp@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #90112	; 0x16000
   1171c:	ldr	pc, [ip, #2232]!	; 0x8b8

00011720 <abort@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #90112	; 0x16000
   11728:	ldr	pc, [ip, #2224]!	; 0x8b0

0001172c <close@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #90112	; 0x16000
   11734:	ldr	pc, [ip, #2216]!	; 0x8a8

00011738 <closedir@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #90112	; 0x16000
   11740:	ldr	pc, [ip, #2208]!	; 0x8a0

00011744 <__snprintf_chk@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #90112	; 0x16000
   1174c:	ldr	pc, [ip, #2200]!	; 0x898

00011750 <strspn@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #90112	; 0x16000
   11758:	ldr	pc, [ip, #2192]!	; 0x890

0001175c <__assert_fail@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #90112	; 0x16000
   11764:	ldr	pc, [ip, #2184]!	; 0x888

Disassembly of section .text:

00011768 <.text>:
   11768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1176c:	sub	sp, sp, #36	; 0x24
   11770:	ldr	sl, [pc, #1352]	; 11cc0 <__assert_fail@plt+0x564>
   11774:	mov	r5, r0
   11778:	mov	r6, r1
   1177c:	ldr	r3, [sl]
   11780:	ldr	r1, [pc, #1340]	; 11cc4 <__assert_fail@plt+0x568>
   11784:	mov	r0, #6
   11788:	str	r3, [sp, #28]
   1178c:	mov	r4, #0
   11790:	bl	1166c <setlocale@plt>
   11794:	ldr	r8, [pc, #1324]	; 11cc8 <__assert_fail@plt+0x56c>
   11798:	ldr	r1, [pc, #1324]	; 11ccc <__assert_fail@plt+0x570>
   1179c:	ldr	r0, [pc, #1324]	; 11cd0 <__assert_fail@plt+0x574>
   117a0:	ldr	r7, [pc, #1324]	; 11cd4 <__assert_fail@plt+0x578>
   117a4:	bl	116f0 <bindtextdomain@plt>
   117a8:	mov	fp, r4
   117ac:	ldr	r0, [pc, #1308]	; 11cd0 <__assert_fail@plt+0x574>
   117b0:	mov	r9, r4
   117b4:	bl	1145c <textdomain@plt>
   117b8:	ldr	r0, [pc, #1304]	; 11cd8 <__assert_fail@plt+0x57c>
   117bc:	bl	175c8 <__assert_fail@plt+0x5e6c>
   117c0:	str	r4, [sp, #12]
   117c4:	str	r9, [sp]
   117c8:	mov	r3, r8
   117cc:	mov	r2, r7
   117d0:	mov	r1, r6
   117d4:	mov	r0, r5
   117d8:	bl	11534 <getopt_long@plt>
   117dc:	cmn	r0, #1
   117e0:	beq	11900 <__assert_fail@plt+0x1a4>
   117e4:	sub	r0, r0, #86	; 0x56
   117e8:	cmp	r0, #26
   117ec:	ldrls	pc, [pc, r0, lsl #2]
   117f0:	b	11b60 <__assert_fail@plt+0x404>
   117f4:			; <UNDEFINED> instruction: 0x000118bc
   117f8:	andeq	r1, r1, r0, ror #22
   117fc:	andeq	r1, r1, r0, ror #22
   11800:	andeq	r1, r1, r0, ror #22
   11804:	andeq	r1, r1, r0, ror #22
   11808:	andeq	r1, r1, r0, ror #22
   1180c:	andeq	r1, r1, r0, ror #22
   11810:	andeq	r1, r1, r0, ror #22
   11814:	andeq	r1, r1, r0, ror #22
   11818:	andeq	r1, r1, r0, ror #22
   1181c:	andeq	r1, r1, r0, ror #22
   11820:	andeq	r1, r1, r0, ror #22
   11824:	andeq	r1, r1, r0, ror #22
   11828:	andeq	r1, r1, r0, ror #22
   1182c:	andeq	r1, r1, r0, ror #22
   11830:	andeq	r1, r1, r0, ror #22
   11834:	andeq	r1, r1, r0, ror #22
   11838:	andeq	r1, r1, r0, ror #22
   1183c:	andeq	r1, r1, r8, lsl sl
   11840:	andeq	r1, r1, r0, ror #22
   11844:	andeq	r1, r1, r0, ror #22
   11848:	andeq	r1, r1, r0, ror #22
   1184c:	andeq	r1, r1, r0, ror #22
   11850:	andeq	r1, r1, r0, ror #22
   11854:	andeq	r1, r1, ip, lsl #17
   11858:	andeq	r1, r1, r0, ror #22
   1185c:	andeq	r1, r1, r0, ror #16
   11860:	ldr	r3, [pc, #1140]	; 11cdc <__assert_fail@plt+0x580>
   11864:	mov	r2, #5
   11868:	ldr	r1, [pc, #1136]	; 11ce0 <__assert_fail@plt+0x584>
   1186c:	mov	r0, #0
   11870:	ldr	fp, [r3]
   11874:	bl	1142c <dcgettext@plt>
   11878:	mov	r1, r0
   1187c:	mov	r0, fp
   11880:	bl	12cf0 <__assert_fail@plt+0x1594>
   11884:	mov	fp, r0
   11888:	b	117c4 <__assert_fail@plt+0x68>
   1188c:	ldr	r3, [pc, #1096]	; 11cdc <__assert_fail@plt+0x580>
   11890:	mov	r2, #5
   11894:	ldr	r1, [pc, #1096]	; 11ce4 <__assert_fail@plt+0x588>
   11898:	mov	r0, #0
   1189c:	ldr	r4, [r3]
   118a0:	bl	1142c <dcgettext@plt>
   118a4:	mov	r1, r0
   118a8:	mov	r0, r4
   118ac:	bl	12cf0 <__assert_fail@plt+0x1594>
   118b0:	mov	r4, #1
   118b4:	str	r0, [sp, #12]
   118b8:	b	117c4 <__assert_fail@plt+0x68>
   118bc:	mov	r2, #5
   118c0:	ldr	r1, [pc, #1056]	; 11ce8 <__assert_fail@plt+0x58c>
   118c4:	mov	r0, #0
   118c8:	bl	1142c <dcgettext@plt>
   118cc:	ldr	r2, [pc, #1048]	; 11cec <__assert_fail@plt+0x590>
   118d0:	ldr	r3, [pc, #1048]	; 11cf0 <__assert_fail@plt+0x594>
   118d4:	ldr	r2, [r2]
   118d8:	mov	r1, r0
   118dc:	mov	r0, #1
   118e0:	bl	11618 <__printf_chk@plt>
   118e4:	ldr	r2, [sp, #28]
   118e8:	ldr	r3, [sl]
   118ec:	mov	r0, #0
   118f0:	cmp	r2, r3
   118f4:	bne	11c4c <__assert_fail@plt+0x4f0>
   118f8:	add	sp, sp, #36	; 0x24
   118fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11900:	ldr	r7, [pc, #1004]	; 11cf4 <__assert_fail@plt+0x598>
   11904:	ldr	r3, [r7]
   11908:	cmp	r3, r5
   1190c:	blt	119bc <__assert_fail@plt+0x260>
   11910:	cmp	fp, #0
   11914:	beq	11c50 <__assert_fail@plt+0x4f4>
   11918:	mov	r1, fp
   1191c:	ldr	r0, [pc, #980]	; 11cf8 <__assert_fail@plt+0x59c>
   11920:	bl	14440 <__assert_fail@plt+0x2ce4>
   11924:	cmp	r4, #0
   11928:	mov	r5, r0
   1192c:	bne	11b98 <__assert_fail@plt+0x43c>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #960]	; 11cfc <__assert_fail@plt+0x5a0>
   11938:	mov	r0, r4
   1193c:	bl	1142c <dcgettext@plt>
   11940:	ldr	r2, [pc, #952]	; 11d00 <__assert_fail@plt+0x5a4>
   11944:	add	r1, sp, #24
   11948:	mov	r6, r0
   1194c:	mov	r0, r5
   11950:	bl	15e34 <__assert_fail@plt+0x46d8>
   11954:	cmp	r0, #0
   11958:	bne	11c7c <__assert_fail@plt+0x520>
   1195c:	ldr	r3, [sp, #24]
   11960:	mov	r1, r6
   11964:	mov	r2, fp
   11968:	mov	r0, #1
   1196c:	bl	11618 <__printf_chk@plt>
   11970:	mov	r0, r4
   11974:	mov	r2, #5
   11978:	ldr	r1, [pc, #900]	; 11d04 <__assert_fail@plt+0x5a8>
   1197c:	bl	1142c <dcgettext@plt>
   11980:	ldr	r2, [pc, #896]	; 11d08 <__assert_fail@plt+0x5ac>
   11984:	add	r1, sp, #20
   11988:	mov	r4, r0
   1198c:	mov	r0, r5
   11990:	bl	15e34 <__assert_fail@plt+0x46d8>
   11994:	cmp	r0, #0
   11998:	bne	11c78 <__assert_fail@plt+0x51c>
   1199c:	mov	r2, fp
   119a0:	mov	r1, r4
   119a4:	ldr	r3, [sp, #20]
   119a8:	mov	r0, #1
   119ac:	bl	11618 <__printf_chk@plt>
   119b0:	mov	r0, r5
   119b4:	bl	14338 <__assert_fail@plt+0x2bdc>
   119b8:	b	118e4 <__assert_fail@plt+0x188>
   119bc:	cmp	fp, #0
   119c0:	bne	11b44 <__assert_fail@plt+0x3e8>
   119c4:	cmp	r4, #0
   119c8:	beq	11c98 <__assert_fail@plt+0x53c>
   119cc:	bl	1154c <getpid@plt>
   119d0:	mov	r1, r0
   119d4:	ldr	r0, [pc, #796]	; 11cf8 <__assert_fail@plt+0x59c>
   119d8:	bl	14440 <__assert_fail@plt+0x2ce4>
   119dc:	ldr	r2, [sp, #12]
   119e0:	ldr	r1, [pc, #800]	; 11d08 <__assert_fail@plt+0x5ac>
   119e4:	asr	r3, r2, #31
   119e8:	str	r1, [sp]
   119ec:	mov	r4, r0
   119f0:	bl	1635c <__assert_fail@plt+0x4c00>
   119f4:	cmp	r0, #0
   119f8:	beq	11c00 <__assert_fail@plt+0x4a4>
   119fc:	mov	r0, fp
   11a00:	ldr	r1, [pc, #772]	; 11d0c <__assert_fail@plt+0x5b0>
   11a04:	mov	r2, #5
   11a08:	bl	1142c <dcgettext@plt>
   11a0c:	mov	r1, r0
   11a10:	mov	r0, #1
   11a14:	bl	11468 <err@plt>
   11a18:	ldr	r3, [pc, #752]	; 11d10 <__assert_fail@plt+0x5b4>
   11a1c:	mov	r2, #5
   11a20:	ldr	r1, [pc, #748]	; 11d14 <__assert_fail@plt+0x5b8>
   11a24:	ldr	r4, [r3]
   11a28:	mov	r0, #0
   11a2c:	bl	1142c <dcgettext@plt>
   11a30:	mov	r1, r4
   11a34:	bl	11708 <fputs@plt>
   11a38:	mov	r2, #5
   11a3c:	ldr	r1, [pc, #724]	; 11d18 <__assert_fail@plt+0x5bc>
   11a40:	mov	r0, #0
   11a44:	bl	1142c <dcgettext@plt>
   11a48:	ldr	r3, [pc, #668]	; 11cec <__assert_fail@plt+0x590>
   11a4c:	mov	r1, #1
   11a50:	ldr	r3, [r3]
   11a54:	mov	r2, r0
   11a58:	mov	r0, r4
   11a5c:	bl	11648 <__fprintf_chk@plt>
   11a60:	mov	r1, r4
   11a64:	mov	r0, #10
   11a68:	bl	1169c <fputc@plt>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #676]	; 11d1c <__assert_fail@plt+0x5c0>
   11a74:	mov	r0, #0
   11a78:	bl	1142c <dcgettext@plt>
   11a7c:	mov	r1, r4
   11a80:	bl	11708 <fputs@plt>
   11a84:	mov	r2, #5
   11a88:	ldr	r1, [pc, #656]	; 11d20 <__assert_fail@plt+0x5c4>
   11a8c:	mov	r0, #0
   11a90:	bl	1142c <dcgettext@plt>
   11a94:	mov	r1, r4
   11a98:	bl	11708 <fputs@plt>
   11a9c:	mov	r2, #5
   11aa0:	ldr	r1, [pc, #636]	; 11d24 <__assert_fail@plt+0x5c8>
   11aa4:	mov	r0, #0
   11aa8:	bl	1142c <dcgettext@plt>
   11aac:	mov	r1, r4
   11ab0:	bl	11708 <fputs@plt>
   11ab4:	mov	r2, #5
   11ab8:	ldr	r1, [pc, #616]	; 11d28 <__assert_fail@plt+0x5cc>
   11abc:	mov	r0, #0
   11ac0:	bl	1142c <dcgettext@plt>
   11ac4:	mov	r1, r4
   11ac8:	bl	11708 <fputs@plt>
   11acc:	mov	r1, r4
   11ad0:	mov	r0, #10
   11ad4:	bl	1169c <fputc@plt>
   11ad8:	mov	r2, #5
   11adc:	ldr	r1, [pc, #584]	; 11d2c <__assert_fail@plt+0x5d0>
   11ae0:	mov	r0, #0
   11ae4:	bl	1142c <dcgettext@plt>
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #572]	; 11d30 <__assert_fail@plt+0x5d4>
   11af0:	mov	r4, r0
   11af4:	mov	r0, #0
   11af8:	bl	1142c <dcgettext@plt>
   11afc:	ldr	r2, [pc, #560]	; 11d34 <__assert_fail@plt+0x5d8>
   11b00:	mov	r3, r4
   11b04:	str	r2, [sp]
   11b08:	ldr	r1, [pc, #552]	; 11d38 <__assert_fail@plt+0x5dc>
   11b0c:	ldr	r2, [pc, #552]	; 11d3c <__assert_fail@plt+0x5e0>
   11b10:	str	r0, [sp, #4]
   11b14:	mov	r0, #1
   11b18:	bl	11618 <__printf_chk@plt>
   11b1c:	mov	r2, #5
   11b20:	ldr	r1, [pc, #536]	; 11d40 <__assert_fail@plt+0x5e4>
   11b24:	mov	r0, #0
   11b28:	bl	1142c <dcgettext@plt>
   11b2c:	ldr	r2, [pc, #528]	; 11d44 <__assert_fail@plt+0x5e8>
   11b30:	mov	r1, r0
   11b34:	mov	r0, #1
   11b38:	bl	11618 <__printf_chk@plt>
   11b3c:	mov	r0, #0
   11b40:	bl	11558 <exit@plt>
   11b44:	ldr	r1, [pc, #508]	; 11d48 <__assert_fail@plt+0x5ec>
   11b48:	mov	r2, #5
   11b4c:	mov	r0, #0
   11b50:	bl	1142c <dcgettext@plt>
   11b54:	ldr	r3, [r7]
   11b58:	ldr	r1, [r6, r3, lsl #2]
   11b5c:	bl	11594 <warnx@plt>
   11b60:	ldr	r3, [pc, #484]	; 11d4c <__assert_fail@plt+0x5f0>
   11b64:	ldr	r1, [pc, #484]	; 11d50 <__assert_fail@plt+0x5f4>
   11b68:	mov	r2, #5
   11b6c:	mov	r0, #0
   11b70:	ldr	r4, [r3]
   11b74:	bl	1142c <dcgettext@plt>
   11b78:	ldr	r3, [pc, #364]	; 11cec <__assert_fail@plt+0x590>
   11b7c:	mov	r1, #1
   11b80:	ldr	r3, [r3]
   11b84:	mov	r2, r0
   11b88:	mov	r0, r4
   11b8c:	bl	11648 <__fprintf_chk@plt>
   11b90:	mov	r0, #1
   11b94:	bl	11558 <exit@plt>
   11b98:	ldr	r4, [pc, #360]	; 11d08 <__assert_fail@plt+0x5ac>
   11b9c:	add	r1, sp, #24
   11ba0:	mov	r2, r4
   11ba4:	bl	15e34 <__assert_fail@plt+0x46d8>
   11ba8:	subs	r6, r0, #0
   11bac:	bne	11c78 <__assert_fail@plt+0x51c>
   11bb0:	ldr	r2, [sp, #12]
   11bb4:	str	r4, [sp]
   11bb8:	mov	r0, r5
   11bbc:	asr	r3, r2, #31
   11bc0:	ldr	r4, [sp, #24]
   11bc4:	bl	1635c <__assert_fail@plt+0x4c00>
   11bc8:	cmp	r0, #0
   11bcc:	movne	r0, r6
   11bd0:	bne	11a00 <__assert_fail@plt+0x2a4>
   11bd4:	mov	r2, #5
   11bd8:	ldr	r1, [pc, #372]	; 11d54 <__assert_fail@plt+0x5f8>
   11bdc:	bl	1142c <dcgettext@plt>
   11be0:	ldr	r3, [sp, #12]
   11be4:	mov	r2, fp
   11be8:	str	r3, [sp]
   11bec:	mov	r3, r4
   11bf0:	mov	r1, r0
   11bf4:	mov	r0, #1
   11bf8:	bl	11618 <__printf_chk@plt>
   11bfc:	b	119b0 <__assert_fail@plt+0x254>
   11c00:	mov	r0, r4
   11c04:	bl	14338 <__assert_fail@plt+0x2bdc>
   11c08:	ldr	r4, [r7]
   11c0c:	add	r1, r6, r4, lsl #2
   11c10:	ldr	r0, [r6, r4, lsl #2]
   11c14:	bl	11414 <execvp@plt>
   11c18:	bl	115ac <__errno_location@plt>
   11c1c:	mov	r2, #5
   11c20:	ldr	r1, [pc, #304]	; 11d58 <__assert_fail@plt+0x5fc>
   11c24:	ldr	r3, [r0]
   11c28:	mov	r0, fp
   11c2c:	cmp	r3, #2
   11c30:	moveq	r5, #127	; 0x7f
   11c34:	movne	r5, #126	; 0x7e
   11c38:	bl	1142c <dcgettext@plt>
   11c3c:	ldr	r2, [r6, r4, lsl #2]
   11c40:	mov	r1, r0
   11c44:	mov	r0, r5
   11c48:	bl	11468 <err@plt>
   11c4c:	bl	11444 <__stack_chk_fail@plt>
   11c50:	mov	r2, #5
   11c54:	ldr	r1, [pc, #256]	; 11d5c <__assert_fail@plt+0x600>
   11c58:	mov	r0, fp
   11c5c:	bl	1142c <dcgettext@plt>
   11c60:	bl	11594 <warnx@plt>
   11c64:	ldr	r3, [pc, #224]	; 11d4c <__assert_fail@plt+0x5f0>
   11c68:	mov	r0, fp
   11c6c:	mov	r2, #5
   11c70:	ldr	r1, [pc, #216]	; 11d50 <__assert_fail@plt+0x5f4>
   11c74:	b	11b70 <__assert_fail@plt+0x414>
   11c78:	bl	11e58 <__assert_fail@plt+0x6fc>
   11c7c:	ldr	r1, [pc, #220]	; 11d60 <__assert_fail@plt+0x604>
   11c80:	mov	r0, r4
   11c84:	mov	r2, #5
   11c88:	bl	1142c <dcgettext@plt>
   11c8c:	mov	r1, r0
   11c90:	mov	r0, #1
   11c94:	bl	11468 <err@plt>
   11c98:	mov	r2, #5
   11c9c:	ldr	r1, [pc, #192]	; 11d64 <__assert_fail@plt+0x608>
   11ca0:	mov	r0, r4
   11ca4:	bl	1142c <dcgettext@plt>
   11ca8:	bl	11594 <warnx@plt>
   11cac:	ldr	r3, [pc, #152]	; 11d4c <__assert_fail@plt+0x5f0>
   11cb0:	mov	r0, r4
   11cb4:	mov	r2, #5
   11cb8:	ldr	r1, [pc, #144]	; 11d50 <__assert_fail@plt+0x5f4>
   11cbc:	b	11b70 <__assert_fail@plt+0x414>
   11cc0:	andeq	r7, r2, r8, ror sp
   11cc4:	ldrdeq	r7, [r1], -r4
   11cc8:	andeq	r7, r1, ip, ror #11
   11ccc:	andeq	r7, r1, r0, ror r6
   11cd0:	andeq	r7, r1, r4, lsl #13
   11cd4:	andeq	r7, r1, r8, lsl #17
   11cd8:	andeq	r1, r1, ip, ror lr
   11cdc:	andeq	r8, r2, r8, lsr #32
   11ce0:	muleq	r1, r0, r6
   11ce4:	andeq	r7, r1, r8, lsr #13
   11ce8:	andeq	r7, r1, r0, asr #13
   11cec:	andeq	r8, r2, r0, lsl r0
   11cf0:	andeq	r7, r1, ip, asr #13
   11cf4:	andeq	r8, r2, r8, lsl r0
   11cf8:	andeq	r7, r1, ip, asr #19
   11cfc:	andeq	r7, r1, ip, asr #17
   11d00:	andeq	r7, r1, ip, ror #17
   11d04:	andeq	r7, r1, r8, lsl r9
   11d08:	andeq	r7, r1, r8, asr #18
   11d0c:	andeq	r7, r1, r8, asr r9
   11d10:	andeq	r8, r2, r4, lsr #32
   11d14:	andeq	r7, r1, r0, ror #13
   11d18:	andeq	r7, r1, ip, ror #13
   11d1c:	andeq	r7, r1, r4, asr r7
   11d20:	andeq	r7, r1, ip, ror r7
   11d24:	andeq	r7, r1, r8, lsl #15
   11d28:	andeq	r7, r1, r0, asr #15
   11d2c:	andeq	r7, r1, r4, ror #15
   11d30:	strdeq	r7, [r1], -r8
   11d34:	andeq	r7, r1, r8, lsr #16
   11d38:	andeq	r7, r1, r4, lsl r8
   11d3c:	andeq	r7, r1, r8, lsl #16
   11d40:	andeq	r7, r1, r8, lsr r8
   11d44:	andeq	r7, r1, r4, asr r8
   11d48:	muleq	r1, r0, r8
   11d4c:	andeq	r8, r2, r0, lsr #32
   11d50:	andeq	r7, r1, r0, ror #16
   11d54:	andeq	r7, r1, ip, ror r9
   11d58:			; <UNDEFINED> instruction: 0x000179b4
   11d5c:	ldrdeq	r7, [r1], -r8
   11d60:	strdeq	r7, [r1], -r8
   11d64:	andeq	r7, r1, r8, lsr #17
   11d68:	mov	fp, #0
   11d6c:	mov	lr, #0
   11d70:	pop	{r1}		; (ldr r1, [sp], #4)
   11d74:	mov	r2, sp
   11d78:	push	{r2}		; (str r2, [sp, #-4]!)
   11d7c:	push	{r0}		; (str r0, [sp, #-4]!)
   11d80:	ldr	ip, [pc, #16]	; 11d98 <__assert_fail@plt+0x63c>
   11d84:	push	{ip}		; (str ip, [sp, #-4]!)
   11d88:	ldr	r0, [pc, #12]	; 11d9c <__assert_fail@plt+0x640>
   11d8c:	ldr	r3, [pc, #12]	; 11da0 <__assert_fail@plt+0x644>
   11d90:	bl	114ec <__libc_start_main@plt>
   11d94:	bl	11720 <abort@plt>
   11d98:	andeq	r7, r1, r4, asr #11
   11d9c:	andeq	r1, r1, r8, ror #14
   11da0:	andeq	r7, r1, r4, ror #10
   11da4:	ldr	r3, [pc, #20]	; 11dc0 <__assert_fail@plt+0x664>
   11da8:	ldr	r2, [pc, #20]	; 11dc4 <__assert_fail@plt+0x668>
   11dac:	add	r3, pc, r3
   11db0:	ldr	r2, [r3, r2]
   11db4:	cmp	r2, #0
   11db8:	bxeq	lr
   11dbc:	b	11528 <__gmon_start__@plt>
   11dc0:	andeq	r6, r1, r8, asr #1
   11dc4:	andeq	r0, r0, ip, ror r1
   11dc8:	ldr	r0, [pc, #24]	; 11de8 <__assert_fail@plt+0x68c>
   11dcc:	ldr	r3, [pc, #24]	; 11dec <__assert_fail@plt+0x690>
   11dd0:	cmp	r3, r0
   11dd4:	bxeq	lr
   11dd8:	ldr	r3, [pc, #16]	; 11df0 <__assert_fail@plt+0x694>
   11ddc:	cmp	r3, #0
   11de0:	bxeq	lr
   11de4:	bx	r3
   11de8:	andeq	r8, r2, ip
   11dec:	andeq	r8, r2, ip
   11df0:	andeq	r0, r0, r0
   11df4:	ldr	r0, [pc, #36]	; 11e20 <__assert_fail@plt+0x6c4>
   11df8:	ldr	r1, [pc, #36]	; 11e24 <__assert_fail@plt+0x6c8>
   11dfc:	sub	r1, r1, r0
   11e00:	asr	r1, r1, #2
   11e04:	add	r1, r1, r1, lsr #31
   11e08:	asrs	r1, r1, #1
   11e0c:	bxeq	lr
   11e10:	ldr	r3, [pc, #16]	; 11e28 <__assert_fail@plt+0x6cc>
   11e14:	cmp	r3, #0
   11e18:	bxeq	lr
   11e1c:	bx	r3
   11e20:	andeq	r8, r2, ip
   11e24:	andeq	r8, r2, ip
   11e28:	andeq	r0, r0, r0
   11e2c:	push	{r4, lr}
   11e30:	ldr	r4, [pc, #24]	; 11e50 <__assert_fail@plt+0x6f4>
   11e34:	ldrb	r3, [r4]
   11e38:	cmp	r3, #0
   11e3c:	popne	{r4, pc}
   11e40:	bl	11dc8 <__assert_fail@plt+0x66c>
   11e44:	mov	r3, #1
   11e48:	strb	r3, [r4]
   11e4c:	pop	{r4, pc}
   11e50:	andeq	r8, r2, ip, lsr #32
   11e54:	b	11df4 <__assert_fail@plt+0x698>
   11e58:	ldr	r1, [pc, #24]	; 11e78 <__assert_fail@plt+0x71c>
   11e5c:	push	{r4, lr}
   11e60:	mov	r2, #5
   11e64:	mov	r0, #0
   11e68:	bl	1142c <dcgettext@plt>
   11e6c:	mov	r1, r0
   11e70:	mov	r0, #1
   11e74:	bl	11468 <err@plt>
   11e78:	andeq	r7, r1, ip, lsr r6
   11e7c:	ldr	r3, [pc, #292]	; 11fa8 <__assert_fail@plt+0x84c>
   11e80:	push	{r4, r5, r6, lr}
   11e84:	ldr	r4, [r3]
   11e88:	mov	r0, r4
   11e8c:	bl	114b0 <__fpending@plt>
   11e90:	mov	r6, r0
   11e94:	mov	r0, r4
   11e98:	bl	113cc <ferror@plt>
   11e9c:	mov	r5, r0
   11ea0:	mov	r0, r4
   11ea4:	bl	11654 <fclose@plt>
   11ea8:	cmp	r5, #0
   11eac:	mov	r4, r0
   11eb0:	bne	11f58 <__assert_fail@plt+0x7fc>
   11eb4:	cmp	r0, #0
   11eb8:	beq	11ed4 <__assert_fail@plt+0x778>
   11ebc:	bl	115ac <__errno_location@plt>
   11ec0:	cmp	r6, #0
   11ec4:	ldr	r3, [r0]
   11ec8:	bne	11f30 <__assert_fail@plt+0x7d4>
   11ecc:	cmp	r3, #9
   11ed0:	bne	11f30 <__assert_fail@plt+0x7d4>
   11ed4:	ldr	r3, [pc, #208]	; 11fac <__assert_fail@plt+0x850>
   11ed8:	ldr	r4, [r3]
   11edc:	mov	r0, r4
   11ee0:	bl	114b0 <__fpending@plt>
   11ee4:	mov	r6, r0
   11ee8:	mov	r0, r4
   11eec:	bl	113cc <ferror@plt>
   11ef0:	mov	r5, r0
   11ef4:	mov	r0, r4
   11ef8:	bl	11654 <fclose@plt>
   11efc:	cmp	r5, #0
   11f00:	mov	r4, r0
   11f04:	bne	11f8c <__assert_fail@plt+0x830>
   11f08:	cmp	r0, #0
   11f0c:	popeq	{r4, r5, r6, pc}
   11f10:	cmp	r6, #0
   11f14:	bne	11f28 <__assert_fail@plt+0x7cc>
   11f18:	bl	115ac <__errno_location@plt>
   11f1c:	ldr	r3, [r0]
   11f20:	cmp	r3, #9
   11f24:	popeq	{r4, r5, r6, pc}
   11f28:	mov	r0, #1
   11f2c:	bl	113f0 <_exit@plt>
   11f30:	cmp	r3, #32
   11f34:	beq	11ed4 <__assert_fail@plt+0x778>
   11f38:	cmp	r3, #0
   11f3c:	beq	11f74 <__assert_fail@plt+0x818>
   11f40:	mov	r2, #5
   11f44:	ldr	r1, [pc, #100]	; 11fb0 <__assert_fail@plt+0x854>
   11f48:	mov	r0, #0
   11f4c:	bl	1142c <dcgettext@plt>
   11f50:	bl	11690 <warn@plt>
   11f54:	b	11f28 <__assert_fail@plt+0x7cc>
   11f58:	bl	115ac <__errno_location@plt>
   11f5c:	cmp	r4, #0
   11f60:	ldr	r3, [r0]
   11f64:	bne	11f30 <__assert_fail@plt+0x7d4>
   11f68:	cmp	r3, #32
   11f6c:	strne	r4, [r0]
   11f70:	beq	11ed4 <__assert_fail@plt+0x778>
   11f74:	mov	r2, #5
   11f78:	ldr	r1, [pc, #48]	; 11fb0 <__assert_fail@plt+0x854>
   11f7c:	mov	r0, #0
   11f80:	bl	1142c <dcgettext@plt>
   11f84:	bl	11594 <warnx@plt>
   11f88:	b	11f28 <__assert_fail@plt+0x7cc>
   11f8c:	cmp	r0, #0
   11f90:	bne	11f28 <__assert_fail@plt+0x7cc>
   11f94:	bl	115ac <__errno_location@plt>
   11f98:	ldr	r3, [r0]
   11f9c:	cmp	r3, #32
   11fa0:	strne	r4, [r0]
   11fa4:	b	11f28 <__assert_fail@plt+0x7cc>
   11fa8:	andeq	r8, r2, r4, lsr #32
   11fac:	andeq	r8, r2, r0, lsr #32
   11fb0:	andeq	r7, r1, r4, ror #12
   11fb4:	andeq	r0, r0, r0
   11fb8:	cmp	r0, #0
   11fbc:	mov	r3, #0
   11fc0:	str	r3, [r1]
   11fc4:	bxeq	lr
   11fc8:	ldrsb	r2, [r0]
   11fcc:	cmp	r2, #47	; 0x2f
   11fd0:	bne	1200c <__assert_fail@plt+0x8b0>
   11fd4:	ldrsb	r3, [r0, #1]
   11fd8:	cmp	r3, #47	; 0x2f
   11fdc:	bne	12014 <__assert_fail@plt+0x8b8>
   11fe0:	add	r3, r0, #1
   11fe4:	b	11ff4 <__assert_fail@plt+0x898>
   11fe8:	ldrsb	r2, [r3]
   11fec:	cmp	r2, #47	; 0x2f
   11ff0:	bne	12014 <__assert_fail@plt+0x8b8>
   11ff4:	cmp	r3, #0
   11ff8:	mov	r0, r3
   11ffc:	bxeq	lr
   12000:	ldrsb	r2, [r3], #1
   12004:	cmp	r2, #47	; 0x2f
   12008:	beq	11fe8 <__assert_fail@plt+0x88c>
   1200c:	cmp	r2, #0
   12010:	beq	12050 <__assert_fail@plt+0x8f4>
   12014:	mov	r3, #1
   12018:	str	r3, [r1]
   1201c:	ldrsb	r3, [r0, #1]
   12020:	add	r2, r0, #1
   12024:	cmp	r3, #47	; 0x2f
   12028:	cmpne	r3, #0
   1202c:	bxeq	lr
   12030:	rsb	r3, r0, #1
   12034:	add	ip, r2, r3
   12038:	str	ip, [r1]
   1203c:	ldrsb	ip, [r2, #1]!
   12040:	cmp	ip, #0
   12044:	cmpne	ip, #47	; 0x2f
   12048:	bne	12034 <__assert_fail@plt+0x8d8>
   1204c:	bx	lr
   12050:	mov	r0, r2
   12054:	bx	lr
   12058:	push	{r4, r5, r6, r7, r8, lr}
   1205c:	mov	r7, r1
   12060:	ldrsb	r1, [r0]
   12064:	cmp	r1, #0
   12068:	movne	r5, r0
   1206c:	movne	r4, #0
   12070:	beq	120dc <__assert_fail@plt+0x980>
   12074:	cmp	r1, #92	; 0x5c
   12078:	addne	r6, r5, r4
   1207c:	beq	120ac <__assert_fail@plt+0x950>
   12080:	mov	r0, r7
   12084:	bl	11588 <strchr@plt>
   12088:	cmp	r0, #0
   1208c:	bne	120d4 <__assert_fail@plt+0x978>
   12090:	ldrsb	r1, [r6, #1]!
   12094:	add	r4, r4, #1
   12098:	mov	r0, r4
   1209c:	cmp	r1, #0
   120a0:	popeq	{r4, r5, r6, r7, r8, pc}
   120a4:	cmp	r1, #92	; 0x5c
   120a8:	bne	12080 <__assert_fail@plt+0x924>
   120ac:	add	r3, r5, r4
   120b0:	ldrsb	r3, [r3, #1]
   120b4:	cmp	r3, #0
   120b8:	beq	120d4 <__assert_fail@plt+0x978>
   120bc:	add	r4, r4, #2
   120c0:	mov	r0, r4
   120c4:	ldrsb	r1, [r5, r4]
   120c8:	cmp	r1, #0
   120cc:	bne	12074 <__assert_fail@plt+0x918>
   120d0:	pop	{r4, r5, r6, r7, r8, pc}
   120d4:	mov	r0, r4
   120d8:	pop	{r4, r5, r6, r7, r8, pc}
   120dc:	mov	r0, r1
   120e0:	pop	{r4, r5, r6, r7, r8, pc}
   120e4:	ldr	ip, [pc, #244]	; 121e0 <__assert_fail@plt+0xa84>
   120e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   120ec:	add	ip, pc, ip
   120f0:	ldr	lr, [pc, #236]	; 121e4 <__assert_fail@plt+0xa88>
   120f4:	sub	sp, sp, #12
   120f8:	mov	r5, #0
   120fc:	ldr	r7, [ip, lr]
   12100:	mov	r4, r0
   12104:	mov	r8, r1
   12108:	ldr	r3, [r7]
   1210c:	mov	r0, ip
   12110:	mov	r9, r2
   12114:	str	r5, [sp]
   12118:	str	r3, [sp, #4]
   1211c:	bl	115ac <__errno_location@plt>
   12120:	cmp	r4, r5
   12124:	str	r5, [r0]
   12128:	beq	12138 <__assert_fail@plt+0x9dc>
   1212c:	ldrsb	r3, [r4]
   12130:	cmp	r3, r5
   12134:	bne	12158 <__assert_fail@plt+0x9fc>
   12138:	ldr	r1, [pc, #168]	; 121e8 <__assert_fail@plt+0xa8c>
   1213c:	mov	r3, r4
   12140:	add	r1, pc, r1
   12144:	mov	r2, r8
   12148:	ldr	r0, [r1]
   1214c:	ldr	r1, [pc, #152]	; 121ec <__assert_fail@plt+0xa90>
   12150:	add	r1, pc, r1
   12154:	bl	11678 <errx@plt>
   12158:	mov	r6, r0
   1215c:	mov	r2, r9
   12160:	mov	r3, r5
   12164:	mov	r1, sp
   12168:	mov	r0, r4
   1216c:	bl	11420 <__strtoull_internal@plt>
   12170:	ldr	r2, [r6]
   12174:	cmp	r2, r5
   12178:	bne	121b4 <__assert_fail@plt+0xa58>
   1217c:	ldr	r3, [sp]
   12180:	cmp	r3, r4
   12184:	beq	12138 <__assert_fail@plt+0x9dc>
   12188:	cmp	r3, r5
   1218c:	beq	1219c <__assert_fail@plt+0xa40>
   12190:	ldrsb	r3, [r3]
   12194:	cmp	r3, r5
   12198:	bne	12138 <__assert_fail@plt+0x9dc>
   1219c:	ldr	r2, [sp, #4]
   121a0:	ldr	r3, [r7]
   121a4:	cmp	r2, r3
   121a8:	bne	121dc <__assert_fail@plt+0xa80>
   121ac:	add	sp, sp, #12
   121b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   121b4:	ldr	r3, [pc, #52]	; 121f0 <__assert_fail@plt+0xa94>
   121b8:	cmp	r2, #34	; 0x22
   121bc:	add	r3, pc, r3
   121c0:	ldr	r0, [r3]
   121c4:	bne	12138 <__assert_fail@plt+0x9dc>
   121c8:	ldr	r1, [pc, #36]	; 121f4 <__assert_fail@plt+0xa98>
   121cc:	mov	r3, r4
   121d0:	mov	r2, r8
   121d4:	add	r1, pc, r1
   121d8:	bl	11468 <err@plt>
   121dc:	bl	11444 <__stack_chk_fail@plt>
   121e0:	andeq	r5, r1, r8, lsl #27
   121e4:	andeq	r0, r0, r4, ror r1
   121e8:	andeq	r5, r1, r0, asr #29
   121ec:			; <UNDEFINED> instruction: 0x000058b0
   121f0:	andeq	r5, r1, r4, asr #28
   121f4:	andeq	r5, r0, ip, lsr #16
   121f8:	push	{r4, lr}
   121fc:	mov	r5, r0
   12200:	mov	r4, r1
   12204:	bl	115ac <__errno_location@plt>
   12208:	ldr	ip, [pc, #32]	; 12230 <__assert_fail@plt+0xad4>
   1220c:	ldr	r1, [pc, #32]	; 12234 <__assert_fail@plt+0xad8>
   12210:	add	ip, pc, ip
   12214:	mov	lr, #34	; 0x22
   12218:	mov	r3, r5
   1221c:	mov	r2, r4
   12220:	add	r1, pc, r1
   12224:	str	lr, [r0]
   12228:	ldr	r0, [ip]
   1222c:	bl	11468 <err@plt>
   12230:	strdeq	r5, [r1], -r0
   12234:	andeq	r5, r0, r0, ror #15
   12238:	push	{r4, r5, r6, lr}
   1223c:	mov	r4, r0
   12240:	mov	r5, r1
   12244:	bl	120e4 <__assert_fail@plt+0x988>
   12248:	mov	r3, #0
   1224c:	mvn	r2, #0
   12250:	cmp	r1, r3
   12254:	cmpeq	r0, r2
   12258:	popls	{r4, r5, r6, pc}
   1225c:	mov	r1, r5
   12260:	mov	r0, r4
   12264:	bl	121f8 <__assert_fail@plt+0xa9c>
   12268:	ldr	r3, [pc, #8]	; 12278 <__assert_fail@plt+0xb1c>
   1226c:	add	r3, pc, r3
   12270:	str	r0, [r3]
   12274:	bx	lr
   12278:	muleq	r1, r4, sp
   1227c:	ldr	r3, [pc, #1648]	; 128f4 <__assert_fail@plt+0x1198>
   12280:	ldr	ip, [pc, #1648]	; 128f8 <__assert_fail@plt+0x119c>
   12284:	add	r3, pc, r3
   12288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1228c:	mov	r5, r1
   12290:	ldr	r1, [r3, ip]
   12294:	sub	sp, sp, #52	; 0x34
   12298:	mov	ip, r1
   1229c:	mov	r8, r0
   122a0:	str	r1, [sp, #24]
   122a4:	mov	r0, #0
   122a8:	mov	r1, #0
   122ac:	ldr	r3, [ip]
   122b0:	strd	r0, [r5]
   122b4:	mov	r9, r2
   122b8:	str	r3, [sp, #44]	; 0x2c
   122bc:	bl	115ac <__errno_location@plt>
   122c0:	cmp	r8, #0
   122c4:	mov	r4, r0
   122c8:	beq	124a8 <__assert_fail@plt+0xd4c>
   122cc:	ldrsb	fp, [r8]
   122d0:	cmp	fp, #0
   122d4:	beq	124a8 <__assert_fail@plt+0xd4c>
   122d8:	bl	11540 <__ctype_b_loc@plt>
   122dc:	mov	r2, r8
   122e0:	ldr	r1, [r0]
   122e4:	b	122ec <__assert_fail@plt+0xb90>
   122e8:	ldrsb	fp, [r2, #1]!
   122ec:	uxtb	r3, fp
   122f0:	lsl	r3, r3, #1
   122f4:	ldrh	ip, [r1, r3]
   122f8:	ands	ip, ip, #8192	; 0x2000
   122fc:	bne	122e8 <__assert_fail@plt+0xb8c>
   12300:	cmp	fp, #45	; 0x2d
   12304:	beq	124a8 <__assert_fail@plt+0xd4c>
   12308:	add	fp, sp, #40	; 0x28
   1230c:	mov	r3, ip
   12310:	mov	r2, ip
   12314:	str	ip, [r4]
   12318:	mov	r1, fp
   1231c:	mov	r0, r8
   12320:	str	ip, [sp, #40]	; 0x28
   12324:	bl	11420 <__strtoull_internal@plt>
   12328:	ldr	sl, [sp, #40]	; 0x28
   1232c:	cmp	sl, r8
   12330:	mov	r2, r0
   12334:	mov	r3, r1
   12338:	ldr	r0, [r4]
   1233c:	strd	r2, [sp, #16]
   12340:	beq	12628 <__assert_fail@plt+0xecc>
   12344:	cmp	r0, #0
   12348:	bne	124d0 <__assert_fail@plt+0xd74>
   1234c:	cmp	sl, #0
   12350:	beq	1265c <__assert_fail@plt+0xf00>
   12354:	ldrsb	r0, [sl]
   12358:	cmp	r0, #0
   1235c:	beq	12650 <__assert_fail@plt+0xef4>
   12360:	mov	r8, #0
   12364:	mov	r2, #0
   12368:	mov	r3, #0
   1236c:	str	r9, [sp, #32]
   12370:	mov	r6, fp
   12374:	mov	r9, sl
   12378:	mov	r7, r8
   1237c:	mov	sl, r2
   12380:	mov	fp, r3
   12384:	str	r5, [sp, #28]
   12388:	ldrsb	r2, [r9, #1]
   1238c:	cmp	r2, #105	; 0x69
   12390:	beq	12514 <__assert_fail@plt+0xdb8>
   12394:	bic	r1, r2, #32
   12398:	cmp	r1, #66	; 0x42
   1239c:	bne	12634 <__assert_fail@plt+0xed8>
   123a0:	ldrsb	r2, [r9, #2]
   123a4:	cmp	r2, #0
   123a8:	beq	12818 <__assert_fail@plt+0x10bc>
   123ac:	bl	116b4 <localeconv@plt>
   123b0:	cmp	r0, #0
   123b4:	beq	124a8 <__assert_fail@plt+0xd4c>
   123b8:	ldr	r2, [r0]
   123bc:	cmp	r2, #0
   123c0:	beq	124a8 <__assert_fail@plt+0xd4c>
   123c4:	mov	r0, r2
   123c8:	str	r2, [sp]
   123cc:	bl	1157c <strlen@plt>
   123d0:	orrs	r3, sl, fp
   123d4:	mov	r5, r0
   123d8:	bne	124a8 <__assert_fail@plt+0xd4c>
   123dc:	ldrsb	r1, [r9]
   123e0:	cmp	r1, #0
   123e4:	beq	124a8 <__assert_fail@plt+0xd4c>
   123e8:	ldr	r2, [sp]
   123ec:	mov	r1, r9
   123f0:	mov	r0, r2
   123f4:	mov	r2, r5
   123f8:	bl	11714 <strncmp@plt>
   123fc:	cmp	r0, #0
   12400:	bne	124a8 <__assert_fail@plt+0xd4c>
   12404:	ldrsb	r2, [r9, r5]
   12408:	add	r5, r9, r5
   1240c:	cmp	r2, #48	; 0x30
   12410:	bne	12430 <__assert_fail@plt+0xcd4>
   12414:	add	r8, r8, #1
   12418:	sub	r1, r8, r5
   1241c:	mov	r3, r5
   12420:	add	r8, r3, r1
   12424:	ldrsb	r2, [r3, #1]!
   12428:	cmp	r2, #48	; 0x30
   1242c:	beq	12420 <__assert_fail@plt+0xcc4>
   12430:	mov	r3, #0
   12434:	str	r7, [r4]
   12438:	mov	r2, r3
   1243c:	mov	r1, r6
   12440:	mov	r0, r5
   12444:	str	r7, [sp, #40]	; 0x28
   12448:	bl	11420 <__strtoull_internal@plt>
   1244c:	ldr	r9, [sp, #40]	; 0x28
   12450:	cmp	r9, r5
   12454:	mov	sl, r0
   12458:	mov	fp, r1
   1245c:	beq	12624 <__assert_fail@plt+0xec8>
   12460:	ldr	ip, [r4]
   12464:	cmp	ip, #0
   12468:	beq	12500 <__assert_fail@plt+0xda4>
   1246c:	subs	r3, r0, #1
   12470:	str	r3, [sp, #8]
   12474:	sbc	r3, r1, #0
   12478:	str	r3, [sp, #12]
   1247c:	ldrd	r2, [sp, #8]
   12480:	mvn	r1, #0
   12484:	mvn	r0, #2
   12488:	cmp	r3, r1
   1248c:	cmpeq	r2, r0
   12490:	bhi	12854 <__assert_fail@plt+0x10f8>
   12494:	cmp	r9, #0
   12498:	beq	124a8 <__assert_fail@plt+0xd4c>
   1249c:	ldrsb	r2, [r9]
   124a0:	cmp	r2, #0
   124a4:	bne	12388 <__assert_fail@plt+0xc2c>
   124a8:	mov	r3, #22
   124ac:	mvn	r0, #21
   124b0:	str	r3, [r4]
   124b4:	ldr	r3, [sp, #24]
   124b8:	ldr	r2, [sp, #44]	; 0x2c
   124bc:	ldr	r3, [r3]
   124c0:	cmp	r2, r3
   124c4:	bne	128f0 <__assert_fail@plt+0x1194>
   124c8:	add	sp, sp, #52	; 0x34
   124cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124d0:	subs	r6, r2, #1
   124d4:	sbc	r7, r3, #0
   124d8:	mvn	r3, #0
   124dc:	mvn	r2, #2
   124e0:	cmp	r7, r3
   124e4:	cmpeq	r6, r2
   124e8:	bls	1234c <__assert_fail@plt+0xbf0>
   124ec:	rsb	r0, r0, #0
   124f0:	cmp	r0, #0
   124f4:	bge	124b4 <__assert_fail@plt+0xd58>
   124f8:	rsb	r3, r0, #0
   124fc:	b	124b0 <__assert_fail@plt+0xd54>
   12500:	orrs	r3, sl, fp
   12504:	bne	12494 <__assert_fail@plt+0xd38>
   12508:	ldrsb	r2, [r9, #1]
   1250c:	cmp	r2, #105	; 0x69
   12510:	bne	12394 <__assert_fail@plt+0xc38>
   12514:	ldrsb	r2, [r9, #2]
   12518:	bic	r2, r2, #32
   1251c:	cmp	r2, #66	; 0x42
   12520:	bne	123ac <__assert_fail@plt+0xc50>
   12524:	ldrsb	r2, [r9, #3]
   12528:	cmp	r2, #0
   1252c:	bne	123ac <__assert_fail@plt+0xc50>
   12530:	strd	sl, [sp]
   12534:	mov	sl, r9
   12538:	ldr	r9, [sp, #32]
   1253c:	mov	r3, #1024	; 0x400
   12540:	ldr	r5, [sp, #28]
   12544:	str	r3, [sp, #28]
   12548:	ldrsb	r7, [sl]
   1254c:	ldr	r6, [pc, #936]	; 128fc <__assert_fail@plt+0x11a0>
   12550:	add	r6, pc, r6
   12554:	mov	r1, r7
   12558:	mov	r0, r6
   1255c:	bl	11588 <strchr@plt>
   12560:	cmp	r0, #0
   12564:	beq	12834 <__assert_fail@plt+0x10d8>
   12568:	sub	ip, r0, r6
   1256c:	add	fp, ip, #1
   12570:	cmp	fp, #0
   12574:	beq	12640 <__assert_fail@plt+0xee4>
   12578:	ldr	r3, [sp, #20]
   1257c:	ldr	r6, [sp, #28]
   12580:	cmp	r3, #0
   12584:	mov	r0, #0
   12588:	asr	r7, r6, #31
   1258c:	mov	r1, #0
   12590:	bne	12890 <__assert_fail@plt+0x1134>
   12594:	orrs	r3, r0, r1
   12598:	bne	12684 <__assert_fail@plt+0xf28>
   1259c:	str	fp, [sp, #32]
   125a0:	sub	ip, ip, #1
   125a4:	str	r8, [sp, #36]	; 0x24
   125a8:	mov	fp, r4
   125ac:	ldrd	r0, [sp, #16]
   125b0:	mov	lr, r5
   125b4:	mov	sl, r9
   125b8:	b	125c8 <__assert_fail@plt+0xe6c>
   125bc:	orrs	r3, r4, r5
   125c0:	sub	ip, ip, #1
   125c4:	bne	1266c <__assert_fail@plt+0xf10>
   125c8:	mul	r2, r0, r7
   125cc:	cmn	ip, #1
   125d0:	mla	r2, r6, r1, r2
   125d4:	umull	r0, r1, r0, r6
   125d8:	add	r2, r2, r1
   125dc:	mov	r1, r2
   125e0:	beq	127f8 <__assert_fail@plt+0x109c>
   125e4:	cmp	r2, #0
   125e8:	mov	r4, #0
   125ec:	mov	r5, #0
   125f0:	beq	125bc <__assert_fail@plt+0xe60>
   125f4:	umull	r2, r3, r6, r2
   125f8:	umull	r8, r9, r0, r6
   125fc:	strd	r2, [sp, #8]
   12600:	mov	r8, r9
   12604:	ldr	r3, [sp, #12]
   12608:	adds	r8, r2, r8
   1260c:	mov	r2, #0
   12610:	adc	r3, r3, r2
   12614:	cmp	r3, r2
   12618:	movne	r4, #1
   1261c:	movne	r5, #0
   12620:	b	125bc <__assert_fail@plt+0xe60>
   12624:	ldr	r0, [r4]
   12628:	cmp	r0, #0
   1262c:	beq	124a8 <__assert_fail@plt+0xd4c>
   12630:	b	124ec <__assert_fail@plt+0xd90>
   12634:	cmp	r2, #0
   12638:	bne	123ac <__assert_fail@plt+0xc50>
   1263c:	b	12530 <__assert_fail@plt+0xdd4>
   12640:	cmp	r9, #0
   12644:	movne	r0, fp
   12648:	bne	12690 <__assert_fail@plt+0xf34>
   1264c:	mov	r0, r9
   12650:	ldrd	r2, [sp, #16]
   12654:	strd	r2, [r5]
   12658:	b	124b4 <__assert_fail@plt+0xd58>
   1265c:	ldrd	r2, [sp, #16]
   12660:	mov	r0, sl
   12664:	strd	r2, [r5]
   12668:	b	124b4 <__assert_fail@plt+0xd58>
   1266c:	mov	r4, fp
   12670:	ldr	r8, [sp, #36]	; 0x24
   12674:	ldr	fp, [sp, #32]
   12678:	mov	r5, lr
   1267c:	mov	r9, sl
   12680:	strd	r0, [sp, #16]
   12684:	mvn	r0, #33	; 0x21
   12688:	cmp	r9, #0
   1268c:	beq	12694 <__assert_fail@plt+0xf38>
   12690:	str	fp, [r9]
   12694:	ldrd	r2, [sp]
   12698:	mov	r1, r2
   1269c:	orrs	r3, r1, r3
   126a0:	movne	r3, #1
   126a4:	moveq	r3, #0
   126a8:	cmp	fp, #0
   126ac:	moveq	r3, #0
   126b0:	cmp	r3, #0
   126b4:	beq	127ec <__assert_fail@plt+0x1090>
   126b8:	ldr	r3, [pc, #576]	; 12900 <__assert_fail@plt+0x11a4>
   126bc:	ldr	r1, [pc, #576]	; 12904 <__assert_fail@plt+0x11a8>
   126c0:	umull	ip, r3, r3, r8
   126c4:	smull	ip, r1, r1, r8
   126c8:	lsr	r3, r3, #1
   126cc:	rsb	r1, r1, r8, asr #31
   126d0:	add	r3, r3, r3, lsl #1
   126d4:	add	r1, r1, fp
   126d8:	subs	r3, r8, r3
   126dc:	sub	r6, r1, #1
   126e0:	bne	1285c <__assert_fail@plt+0x1100>
   126e4:	ldrd	r8, [sp]
   126e8:	adds	r3, r8, r8
   126ec:	adc	r2, r9, r9
   126f0:	adds	r3, r3, r8
   126f4:	adc	r2, r2, r9
   126f8:	lsl	ip, r3, #5
   126fc:	lsl	lr, r2, #5
   12700:	orr	lr, lr, r3, lsr #27
   12704:	adds	r3, r3, ip
   12708:	adc	r2, r2, lr
   1270c:	adds	r3, r8, r3
   12710:	str	r3, [sp]
   12714:	ldr	r3, [sp, #4]
   12718:	adc	r3, r3, r2
   1271c:	str	r3, [sp, #4]
   12720:	cmp	r6, #0
   12724:	blt	124a8 <__assert_fail@plt+0xd4c>
   12728:	beq	127d0 <__assert_fail@plt+0x1074>
   1272c:	ldr	r3, [sp, #4]
   12730:	ldr	r8, [sp, #28]
   12734:	cmp	r3, #0
   12738:	mov	r6, #0
   1273c:	asr	r9, r8, #31
   12740:	mov	r7, #0
   12744:	bne	128c4 <__assert_fail@plt+0x1168>
   12748:	orrs	r3, r6, r7
   1274c:	bne	127d0 <__assert_fail@plt+0x1074>
   12750:	sub	r1, r1, #3
   12754:	ldrd	r2, [sp]
   12758:	mov	lr, r4
   1275c:	str	r5, [sp, #8]
   12760:	b	12770 <__assert_fail@plt+0x1014>
   12764:	orrs	ip, r6, r7
   12768:	sub	r1, r1, #1
   1276c:	bne	127c4 <__assert_fail@plt+0x1068>
   12770:	mul	ip, r2, r9
   12774:	cmn	r1, #1
   12778:	mla	ip, r8, r3, ip
   1277c:	umull	r2, r3, r2, r8
   12780:	add	ip, ip, r3
   12784:	mov	r3, ip
   12788:	beq	127c4 <__assert_fail@plt+0x1068>
   1278c:	cmp	ip, #0
   12790:	mov	r6, #0
   12794:	mov	r7, #0
   12798:	beq	12764 <__assert_fail@plt+0x1008>
   1279c:	umull	sl, fp, r2, r8
   127a0:	umull	r4, r5, r8, ip
   127a4:	mov	ip, fp
   127a8:	adds	ip, r4, ip
   127ac:	mov	ip, #0
   127b0:	adc	ip, r5, ip
   127b4:	cmp	ip, #0
   127b8:	movne	r6, #1
   127bc:	movne	r7, #0
   127c0:	b	12764 <__assert_fail@plt+0x1008>
   127c4:	ldr	r5, [sp, #8]
   127c8:	mov	r4, lr
   127cc:	strd	r2, [sp]
   127d0:	ldrd	r2, [sp]
   127d4:	ldr	r1, [sp, #16]
   127d8:	adds	r1, r1, r2
   127dc:	str	r1, [sp, #16]
   127e0:	ldr	r1, [sp, #20]
   127e4:	adc	r3, r1, r3
   127e8:	str	r3, [sp, #20]
   127ec:	ldrd	r2, [sp, #16]
   127f0:	strd	r2, [r5]
   127f4:	b	124f0 <__assert_fail@plt+0xd94>
   127f8:	mov	r4, fp
   127fc:	strd	r0, [sp, #16]
   12800:	ldr	r8, [sp, #36]	; 0x24
   12804:	ldr	fp, [sp, #32]
   12808:	mov	r5, lr
   1280c:	mov	r9, sl
   12810:	mov	r0, #0
   12814:	b	12688 <__assert_fail@plt+0xf2c>
   12818:	mov	r3, #1000	; 0x3e8
   1281c:	strd	sl, [sp]
   12820:	ldr	r5, [sp, #28]
   12824:	mov	sl, r9
   12828:	str	r3, [sp, #28]
   1282c:	ldr	r9, [sp, #32]
   12830:	b	12548 <__assert_fail@plt+0xdec>
   12834:	ldr	r6, [pc, #204]	; 12908 <__assert_fail@plt+0x11ac>
   12838:	mov	r1, r7
   1283c:	add	r6, pc, r6
   12840:	mov	r0, r6
   12844:	bl	11588 <strchr@plt>
   12848:	cmp	r0, #0
   1284c:	bne	12568 <__assert_fail@plt+0xe0c>
   12850:	b	124a8 <__assert_fail@plt+0xd4c>
   12854:	mov	r0, ip
   12858:	b	124ec <__assert_fail@plt+0xd90>
   1285c:	cmp	r3, #1
   12860:	bne	12720 <__assert_fail@plt+0xfc4>
   12864:	ldrd	r8, [sp]
   12868:	lsl	r2, r9, #2
   1286c:	lsl	r3, r8, #2
   12870:	adds	r3, r3, r8
   12874:	orr	r2, r2, r8, lsr #30
   12878:	adc	r2, r2, r9
   1287c:	adds	r3, r3, r3
   12880:	str	r3, [sp]
   12884:	adc	r3, r2, r2
   12888:	str	r3, [sp, #4]
   1288c:	b	12720 <__assert_fail@plt+0xfc4>
   12890:	ldr	lr, [sp, #28]
   12894:	ldr	r3, [sp, #16]
   12898:	ldr	sl, [sp, #20]
   1289c:	umull	r2, r3, r3, lr
   128a0:	str	r3, [sp, #8]
   128a4:	mov	r3, #0
   128a8:	str	r3, [sp, #12]
   128ac:	ldrd	r2, [sp, #8]
   128b0:	umlal	r2, r3, sl, lr
   128b4:	cmp	r3, #0
   128b8:	movne	r0, #1
   128bc:	movne	r1, #0
   128c0:	b	12594 <__assert_fail@plt+0xe38>
   128c4:	ldr	r3, [sp]
   128c8:	ldr	ip, [sp, #28]
   128cc:	ldr	lr, [sp, #4]
   128d0:	umull	sl, fp, r3, ip
   128d4:	mov	r3, #0
   128d8:	mov	r2, fp
   128dc:	umlal	r2, r3, lr, ip
   128e0:	cmp	r3, #0
   128e4:	movne	r6, #1
   128e8:	movne	r7, #0
   128ec:	b	12748 <__assert_fail@plt+0xfec>
   128f0:	bl	11444 <__stack_chk_fail@plt>
   128f4:	strdeq	r5, [r1], -r0
   128f8:	andeq	r0, r0, r4, ror r1
   128fc:			; <UNDEFINED> instruction: 0x000054bc
   12900:	bge	feabd3b4 <optarg@@GLIBC_2.4+0xfea9538c>
   12904:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   12908:	ldrdeq	r5, [r0], -ip
   1290c:	mov	r2, #0
   12910:	b	1227c <__assert_fail@plt+0xb20>
   12914:	push	{r4, r5, r6, lr}
   12918:	subs	r5, r0, #0
   1291c:	mov	r6, r1
   12920:	beq	1298c <__assert_fail@plt+0x1230>
   12924:	ldrsb	r4, [r5]
   12928:	cmp	r4, #0
   1292c:	beq	129a0 <__assert_fail@plt+0x1244>
   12930:	bl	11540 <__ctype_b_loc@plt>
   12934:	mov	r3, r5
   12938:	ldr	r0, [r0]
   1293c:	b	12954 <__assert_fail@plt+0x11f8>
   12940:	adds	r3, r3, #1
   12944:	beq	1298c <__assert_fail@plt+0x1230>
   12948:	ldrsb	r4, [r3]
   1294c:	cmp	r4, #0
   12950:	beq	12968 <__assert_fail@plt+0x120c>
   12954:	uxtb	r4, r4
   12958:	lsl	r4, r4, #1
   1295c:	ldrh	r2, [r0, r4]
   12960:	tst	r2, #2048	; 0x800
   12964:	bne	12940 <__assert_fail@plt+0x11e4>
   12968:	cmp	r6, #0
   1296c:	strne	r3, [r6]
   12970:	cmp	r5, r3
   12974:	bcs	12998 <__assert_fail@plt+0x123c>
   12978:	ldrsb	r3, [r3]
   1297c:	cmp	r3, #0
   12980:	bne	12998 <__assert_fail@plt+0x123c>
   12984:	mov	r0, #1
   12988:	pop	{r4, r5, r6, pc}
   1298c:	cmp	r6, #0
   12990:	movne	r3, #0
   12994:	strne	r3, [r6]
   12998:	mov	r0, #0
   1299c:	pop	{r4, r5, r6, pc}
   129a0:	cmp	r1, #0
   129a4:	strne	r5, [r1]
   129a8:	b	12998 <__assert_fail@plt+0x123c>
   129ac:	push	{r4, r5, r6, lr}
   129b0:	subs	r5, r0, #0
   129b4:	mov	r6, r1
   129b8:	beq	12a24 <__assert_fail@plt+0x12c8>
   129bc:	ldrsb	r4, [r5]
   129c0:	cmp	r4, #0
   129c4:	beq	12a38 <__assert_fail@plt+0x12dc>
   129c8:	bl	11540 <__ctype_b_loc@plt>
   129cc:	mov	r3, r5
   129d0:	ldr	r0, [r0]
   129d4:	b	129ec <__assert_fail@plt+0x1290>
   129d8:	adds	r3, r3, #1
   129dc:	beq	12a24 <__assert_fail@plt+0x12c8>
   129e0:	ldrsb	r4, [r3]
   129e4:	cmp	r4, #0
   129e8:	beq	12a00 <__assert_fail@plt+0x12a4>
   129ec:	uxtb	r4, r4
   129f0:	lsl	r4, r4, #1
   129f4:	ldrh	r2, [r0, r4]
   129f8:	tst	r2, #4096	; 0x1000
   129fc:	bne	129d8 <__assert_fail@plt+0x127c>
   12a00:	cmp	r6, #0
   12a04:	strne	r3, [r6]
   12a08:	cmp	r5, r3
   12a0c:	bcs	12a30 <__assert_fail@plt+0x12d4>
   12a10:	ldrsb	r3, [r3]
   12a14:	cmp	r3, #0
   12a18:	bne	12a30 <__assert_fail@plt+0x12d4>
   12a1c:	mov	r0, #1
   12a20:	pop	{r4, r5, r6, pc}
   12a24:	cmp	r6, #0
   12a28:	movne	r3, #0
   12a2c:	strne	r3, [r6]
   12a30:	mov	r0, #0
   12a34:	pop	{r4, r5, r6, pc}
   12a38:	cmp	r1, #0
   12a3c:	strne	r5, [r1]
   12a40:	b	12a30 <__assert_fail@plt+0x12d4>
   12a44:	push	{r1, r2, r3}
   12a48:	ldr	r3, [pc, #188]	; 12b0c <__assert_fail@plt+0x13b0>
   12a4c:	ldr	r2, [pc, #188]	; 12b10 <__assert_fail@plt+0x13b4>
   12a50:	add	r3, pc, r3
   12a54:	push	{r4, r5, r6, r7, r8, lr}
   12a58:	sub	sp, sp, #12
   12a5c:	ldr	r7, [r3, r2]
   12a60:	ldr	r8, [sp, #36]	; 0x24
   12a64:	mov	r6, r0
   12a68:	ldr	r3, [r7]
   12a6c:	add	r4, sp, #48	; 0x30
   12a70:	str	r3, [sp, #4]
   12a74:	b	12a90 <__assert_fail@plt+0x1334>
   12a78:	mov	r1, r5
   12a7c:	mov	r0, r6
   12a80:	bl	11354 <strcmp@plt>
   12a84:	add	r4, r4, #8
   12a88:	cmp	r0, #0
   12a8c:	beq	12ac8 <__assert_fail@plt+0x136c>
   12a90:	ldr	r1, [r4, #-8]
   12a94:	sub	r3, r4, #4
   12a98:	cmp	r1, #0
   12a9c:	str	r3, [sp]
   12aa0:	beq	12ae8 <__assert_fail@plt+0x138c>
   12aa4:	ldr	r5, [r4, #-4]
   12aa8:	str	r4, [sp]
   12aac:	cmp	r5, #0
   12ab0:	beq	12ae8 <__assert_fail@plt+0x138c>
   12ab4:	mov	r0, r6
   12ab8:	bl	11354 <strcmp@plt>
   12abc:	cmp	r0, #0
   12ac0:	bne	12a78 <__assert_fail@plt+0x131c>
   12ac4:	mov	r0, #1
   12ac8:	ldr	r2, [sp, #4]
   12acc:	ldr	r3, [r7]
   12ad0:	cmp	r2, r3
   12ad4:	bne	12b08 <__assert_fail@plt+0x13ac>
   12ad8:	add	sp, sp, #12
   12adc:	pop	{r4, r5, r6, r7, r8, lr}
   12ae0:	add	sp, sp, #12
   12ae4:	bx	lr
   12ae8:	ldr	r1, [pc, #36]	; 12b14 <__assert_fail@plt+0x13b8>
   12aec:	mov	r3, r6
   12af0:	add	r1, pc, r1
   12af4:	mov	r2, r8
   12af8:	ldr	r0, [r1]
   12afc:	ldr	r1, [pc, #20]	; 12b18 <__assert_fail@plt+0x13bc>
   12b00:	add	r1, pc, r1
   12b04:	bl	11678 <errx@plt>
   12b08:	bl	11444 <__stack_chk_fail@plt>
   12b0c:	andeq	r5, r1, r4, lsr #8
   12b10:	andeq	r0, r0, r4, ror r1
   12b14:	andeq	r5, r1, r0, lsl r5
   12b18:	andeq	r4, r0, r0, lsl #30
   12b1c:	cmp	r1, #0
   12b20:	beq	12b6c <__assert_fail@plt+0x1410>
   12b24:	ldrsb	r3, [r0]
   12b28:	cmp	r3, #0
   12b2c:	beq	12b6c <__assert_fail@plt+0x1410>
   12b30:	sxtb	r2, r2
   12b34:	cmp	r3, r2
   12b38:	bxeq	lr
   12b3c:	add	r1, r0, r1
   12b40:	add	r3, r0, #1
   12b44:	b	12b60 <__assert_fail@plt+0x1404>
   12b48:	ldrsb	ip, [r3]
   12b4c:	add	r3, r3, #1
   12b50:	cmp	ip, #0
   12b54:	beq	12b6c <__assert_fail@plt+0x1410>
   12b58:	cmp	ip, r2
   12b5c:	bxeq	lr
   12b60:	cmp	r3, r1
   12b64:	mov	r0, r3
   12b68:	bne	12b48 <__assert_fail@plt+0x13ec>
   12b6c:	mov	r0, #0
   12b70:	bx	lr
   12b74:	push	{r4, r5, r6, lr}
   12b78:	mov	r2, #10
   12b7c:	mov	r4, r0
   12b80:	mov	r5, r1
   12b84:	bl	12238 <__assert_fail@plt+0xadc>
   12b88:	cmp	r0, #65536	; 0x10000
   12b8c:	bcs	12b98 <__assert_fail@plt+0x143c>
   12b90:	uxth	r0, r0
   12b94:	pop	{r4, r5, r6, pc}
   12b98:	mov	r1, r5
   12b9c:	mov	r0, r4
   12ba0:	bl	121f8 <__assert_fail@plt+0xa9c>
   12ba4:	push	{r4, r5, r6, lr}
   12ba8:	mov	r2, #16
   12bac:	mov	r4, r0
   12bb0:	mov	r5, r1
   12bb4:	bl	12238 <__assert_fail@plt+0xadc>
   12bb8:	cmp	r0, #65536	; 0x10000
   12bbc:	bcs	12bc8 <__assert_fail@plt+0x146c>
   12bc0:	uxth	r0, r0
   12bc4:	pop	{r4, r5, r6, pc}
   12bc8:	mov	r1, r5
   12bcc:	mov	r0, r4
   12bd0:	bl	121f8 <__assert_fail@plt+0xa9c>
   12bd4:	mov	r2, #10
   12bd8:	b	12238 <__assert_fail@plt+0xadc>
   12bdc:	mov	r2, #16
   12be0:	b	12238 <__assert_fail@plt+0xadc>
   12be4:	ldr	r2, [pc, #236]	; 12cd8 <__assert_fail@plt+0x157c>
   12be8:	ldr	ip, [pc, #236]	; 12cdc <__assert_fail@plt+0x1580>
   12bec:	add	r2, pc, r2
   12bf0:	push	{r4, r5, r6, r7, r8, lr}
   12bf4:	sub	sp, sp, #8
   12bf8:	ldr	r7, [r2, ip]
   12bfc:	mov	r5, #0
   12c00:	mov	r4, r0
   12c04:	ldr	r3, [r7]
   12c08:	mov	r8, r1
   12c0c:	str	r5, [sp]
   12c10:	str	r3, [sp, #4]
   12c14:	bl	115ac <__errno_location@plt>
   12c18:	cmp	r4, r5
   12c1c:	str	r5, [r0]
   12c20:	beq	12c30 <__assert_fail@plt+0x14d4>
   12c24:	ldrsb	r3, [r4]
   12c28:	cmp	r3, r5
   12c2c:	bne	12c50 <__assert_fail@plt+0x14f4>
   12c30:	ldr	r1, [pc, #168]	; 12ce0 <__assert_fail@plt+0x1584>
   12c34:	mov	r3, r4
   12c38:	add	r1, pc, r1
   12c3c:	mov	r2, r8
   12c40:	ldr	r0, [r1]
   12c44:	ldr	r1, [pc, #152]	; 12ce4 <__assert_fail@plt+0x1588>
   12c48:	add	r1, pc, r1
   12c4c:	bl	11678 <errx@plt>
   12c50:	mov	r6, r0
   12c54:	mov	r2, #10
   12c58:	mov	r3, r5
   12c5c:	mov	r1, sp
   12c60:	mov	r0, r4
   12c64:	bl	116d8 <__strtoll_internal@plt>
   12c68:	ldr	r2, [r6]
   12c6c:	cmp	r2, r5
   12c70:	bne	12cac <__assert_fail@plt+0x1550>
   12c74:	ldr	r3, [sp]
   12c78:	cmp	r3, r4
   12c7c:	beq	12c30 <__assert_fail@plt+0x14d4>
   12c80:	cmp	r3, r5
   12c84:	beq	12c94 <__assert_fail@plt+0x1538>
   12c88:	ldrsb	r3, [r3]
   12c8c:	cmp	r3, r5
   12c90:	bne	12c30 <__assert_fail@plt+0x14d4>
   12c94:	ldr	r2, [sp, #4]
   12c98:	ldr	r3, [r7]
   12c9c:	cmp	r2, r3
   12ca0:	bne	12cd4 <__assert_fail@plt+0x1578>
   12ca4:	add	sp, sp, #8
   12ca8:	pop	{r4, r5, r6, r7, r8, pc}
   12cac:	ldr	r3, [pc, #52]	; 12ce8 <__assert_fail@plt+0x158c>
   12cb0:	cmp	r2, #34	; 0x22
   12cb4:	add	r3, pc, r3
   12cb8:	ldr	r0, [r3]
   12cbc:	bne	12c30 <__assert_fail@plt+0x14d4>
   12cc0:	ldr	r1, [pc, #36]	; 12cec <__assert_fail@plt+0x1590>
   12cc4:	mov	r3, r4
   12cc8:	mov	r2, r8
   12ccc:	add	r1, pc, r1
   12cd0:	bl	11468 <err@plt>
   12cd4:	bl	11444 <__stack_chk_fail@plt>
   12cd8:	andeq	r5, r1, r8, lsl #5
   12cdc:	andeq	r0, r0, r4, ror r1
   12ce0:	andeq	r5, r1, r8, asr #7
   12ce4:			; <UNDEFINED> instruction: 0x00004db8
   12ce8:	andeq	r5, r1, ip, asr #6
   12cec:	andeq	r4, r0, r4, lsr sp
   12cf0:	push	{r4, r5, r6, r7, r8, lr}
   12cf4:	mov	r7, r0
   12cf8:	mov	r6, r1
   12cfc:	bl	12be4 <__assert_fail@plt+0x1488>
   12d00:	mov	r3, #0
   12d04:	mvn	r2, #0
   12d08:	adds	r4, r0, #-2147483648	; 0x80000000
   12d0c:	adc	r5, r1, #0
   12d10:	cmp	r5, r3
   12d14:	cmpeq	r4, r2
   12d18:	popls	{r4, r5, r6, r7, r8, pc}
   12d1c:	bl	115ac <__errno_location@plt>
   12d20:	ldr	ip, [pc, #32]	; 12d48 <__assert_fail@plt+0x15ec>
   12d24:	ldr	r1, [pc, #32]	; 12d4c <__assert_fail@plt+0x15f0>
   12d28:	add	ip, pc, ip
   12d2c:	mov	lr, #34	; 0x22
   12d30:	mov	r3, r7
   12d34:	mov	r2, r6
   12d38:	add	r1, pc, r1
   12d3c:	str	lr, [r0]
   12d40:	ldr	r0, [ip]
   12d44:	bl	11468 <err@plt>
   12d48:	ldrdeq	r5, [r1], -r8
   12d4c:	andeq	r4, r0, r8, asr #25
   12d50:	push	{r4, r5, r6, lr}
   12d54:	mov	r5, r0
   12d58:	mov	r4, r1
   12d5c:	bl	12cf0 <__assert_fail@plt+0x1594>
   12d60:	add	r3, r0, #32768	; 0x8000
   12d64:	cmp	r3, #65536	; 0x10000
   12d68:	bcs	12d74 <__assert_fail@plt+0x1618>
   12d6c:	sxth	r0, r0
   12d70:	pop	{r4, r5, r6, pc}
   12d74:	bl	115ac <__errno_location@plt>
   12d78:	ldr	ip, [pc, #32]	; 12da0 <__assert_fail@plt+0x1644>
   12d7c:	ldr	r1, [pc, #32]	; 12da4 <__assert_fail@plt+0x1648>
   12d80:	add	ip, pc, ip
   12d84:	mov	lr, #34	; 0x22
   12d88:	mov	r3, r5
   12d8c:	mov	r2, r4
   12d90:	add	r1, pc, r1
   12d94:	str	lr, [r0]
   12d98:	ldr	r0, [ip]
   12d9c:	bl	11468 <err@plt>
   12da0:	andeq	r5, r1, r0, lsl #5
   12da4:	andeq	r4, r0, r0, ror ip
   12da8:	mov	r2, #10
   12dac:	b	120e4 <__assert_fail@plt+0x988>
   12db0:	mov	r2, #16
   12db4:	b	120e4 <__assert_fail@plt+0x988>
   12db8:	ldr	r2, [pc, #228]	; 12ea4 <__assert_fail@plt+0x1748>
   12dbc:	ldr	r3, [pc, #228]	; 12ea8 <__assert_fail@plt+0x174c>
   12dc0:	add	r2, pc, r2
   12dc4:	push	{r4, r5, r6, r7, r8, lr}
   12dc8:	sub	sp, sp, #8
   12dcc:	ldr	r7, [r2, r3]
   12dd0:	mov	r5, #0
   12dd4:	mov	r4, r0
   12dd8:	ldr	r3, [r7]
   12ddc:	mov	r8, r1
   12de0:	str	r5, [sp]
   12de4:	str	r3, [sp, #4]
   12de8:	bl	115ac <__errno_location@plt>
   12dec:	cmp	r4, r5
   12df0:	str	r5, [r0]
   12df4:	beq	12e04 <__assert_fail@plt+0x16a8>
   12df8:	ldrsb	r3, [r4]
   12dfc:	cmp	r3, r5
   12e00:	bne	12e24 <__assert_fail@plt+0x16c8>
   12e04:	ldr	r1, [pc, #160]	; 12eac <__assert_fail@plt+0x1750>
   12e08:	mov	r3, r4
   12e0c:	add	r1, pc, r1
   12e10:	mov	r2, r8
   12e14:	ldr	r0, [r1]
   12e18:	ldr	r1, [pc, #144]	; 12eb0 <__assert_fail@plt+0x1754>
   12e1c:	add	r1, pc, r1
   12e20:	bl	11678 <errx@plt>
   12e24:	mov	r6, r0
   12e28:	mov	r1, sp
   12e2c:	mov	r0, r4
   12e30:	bl	11624 <strtod@plt>
   12e34:	ldr	r2, [r6]
   12e38:	cmp	r2, r5
   12e3c:	bne	12e78 <__assert_fail@plt+0x171c>
   12e40:	ldr	r3, [sp]
   12e44:	cmp	r3, r4
   12e48:	beq	12e04 <__assert_fail@plt+0x16a8>
   12e4c:	cmp	r3, r5
   12e50:	beq	12e60 <__assert_fail@plt+0x1704>
   12e54:	ldrsb	r3, [r3]
   12e58:	cmp	r3, r5
   12e5c:	bne	12e04 <__assert_fail@plt+0x16a8>
   12e60:	ldr	r2, [sp, #4]
   12e64:	ldr	r3, [r7]
   12e68:	cmp	r2, r3
   12e6c:	bne	12ea0 <__assert_fail@plt+0x1744>
   12e70:	add	sp, sp, #8
   12e74:	pop	{r4, r5, r6, r7, r8, pc}
   12e78:	ldr	r3, [pc, #52]	; 12eb4 <__assert_fail@plt+0x1758>
   12e7c:	cmp	r2, #34	; 0x22
   12e80:	add	r3, pc, r3
   12e84:	ldr	r0, [r3]
   12e88:	bne	12e04 <__assert_fail@plt+0x16a8>
   12e8c:	ldr	r1, [pc, #36]	; 12eb8 <__assert_fail@plt+0x175c>
   12e90:	mov	r3, r4
   12e94:	mov	r2, r8
   12e98:	add	r1, pc, r1
   12e9c:	bl	11468 <err@plt>
   12ea0:	bl	11444 <__stack_chk_fail@plt>
   12ea4:	strheq	r5, [r1], -r4
   12ea8:	andeq	r0, r0, r4, ror r1
   12eac:	strdeq	r5, [r1], -r4
   12eb0:	andeq	r4, r0, r4, ror #23
   12eb4:	andeq	r5, r1, r0, lsl #3
   12eb8:	andeq	r4, r0, r8, ror #22
   12ebc:	ldr	r2, [pc, #232]	; 12fac <__assert_fail@plt+0x1850>
   12ec0:	ldr	r3, [pc, #232]	; 12fb0 <__assert_fail@plt+0x1854>
   12ec4:	add	r2, pc, r2
   12ec8:	push	{r4, r5, r6, r7, r8, lr}
   12ecc:	sub	sp, sp, #8
   12ed0:	ldr	r7, [r2, r3]
   12ed4:	mov	r5, #0
   12ed8:	mov	r4, r0
   12edc:	ldr	r3, [r7]
   12ee0:	mov	r8, r1
   12ee4:	str	r5, [sp]
   12ee8:	str	r3, [sp, #4]
   12eec:	bl	115ac <__errno_location@plt>
   12ef0:	cmp	r4, r5
   12ef4:	str	r5, [r0]
   12ef8:	beq	12f08 <__assert_fail@plt+0x17ac>
   12efc:	ldrsb	r3, [r4]
   12f00:	cmp	r3, r5
   12f04:	bne	12f28 <__assert_fail@plt+0x17cc>
   12f08:	ldr	r1, [pc, #164]	; 12fb4 <__assert_fail@plt+0x1858>
   12f0c:	mov	r3, r4
   12f10:	add	r1, pc, r1
   12f14:	mov	r2, r8
   12f18:	ldr	r0, [r1]
   12f1c:	ldr	r1, [pc, #148]	; 12fb8 <__assert_fail@plt+0x185c>
   12f20:	add	r1, pc, r1
   12f24:	bl	11678 <errx@plt>
   12f28:	mov	r6, r0
   12f2c:	mov	r2, #10
   12f30:	mov	r1, sp
   12f34:	mov	r0, r4
   12f38:	bl	1136c <strtol@plt>
   12f3c:	ldr	r2, [r6]
   12f40:	cmp	r2, r5
   12f44:	bne	12f80 <__assert_fail@plt+0x1824>
   12f48:	ldr	r3, [sp]
   12f4c:	cmp	r3, r4
   12f50:	beq	12f08 <__assert_fail@plt+0x17ac>
   12f54:	cmp	r3, r5
   12f58:	beq	12f68 <__assert_fail@plt+0x180c>
   12f5c:	ldrsb	r3, [r3]
   12f60:	cmp	r3, r5
   12f64:	bne	12f08 <__assert_fail@plt+0x17ac>
   12f68:	ldr	r2, [sp, #4]
   12f6c:	ldr	r3, [r7]
   12f70:	cmp	r2, r3
   12f74:	bne	12fa8 <__assert_fail@plt+0x184c>
   12f78:	add	sp, sp, #8
   12f7c:	pop	{r4, r5, r6, r7, r8, pc}
   12f80:	ldr	r3, [pc, #52]	; 12fbc <__assert_fail@plt+0x1860>
   12f84:	cmp	r2, #34	; 0x22
   12f88:	add	r3, pc, r3
   12f8c:	ldr	r0, [r3]
   12f90:	bne	12f08 <__assert_fail@plt+0x17ac>
   12f94:	ldr	r1, [pc, #36]	; 12fc0 <__assert_fail@plt+0x1864>
   12f98:	mov	r3, r4
   12f9c:	mov	r2, r8
   12fa0:	add	r1, pc, r1
   12fa4:	bl	11468 <err@plt>
   12fa8:	bl	11444 <__stack_chk_fail@plt>
   12fac:			; <UNDEFINED> instruction: 0x00014fb0
   12fb0:	andeq	r0, r0, r4, ror r1
   12fb4:	strdeq	r5, [r1], -r0
   12fb8:	andeq	r4, r0, r0, ror #21
   12fbc:	andeq	r5, r1, r8, ror r0
   12fc0:	andeq	r4, r0, r0, ror #20
   12fc4:	ldr	r2, [pc, #232]	; 130b4 <__assert_fail@plt+0x1958>
   12fc8:	ldr	r3, [pc, #232]	; 130b8 <__assert_fail@plt+0x195c>
   12fcc:	add	r2, pc, r2
   12fd0:	push	{r4, r5, r6, r7, r8, lr}
   12fd4:	sub	sp, sp, #8
   12fd8:	ldr	r7, [r2, r3]
   12fdc:	mov	r5, #0
   12fe0:	mov	r4, r0
   12fe4:	ldr	r3, [r7]
   12fe8:	mov	r8, r1
   12fec:	str	r5, [sp]
   12ff0:	str	r3, [sp, #4]
   12ff4:	bl	115ac <__errno_location@plt>
   12ff8:	cmp	r4, r5
   12ffc:	str	r5, [r0]
   13000:	beq	13010 <__assert_fail@plt+0x18b4>
   13004:	ldrsb	r3, [r4]
   13008:	cmp	r3, r5
   1300c:	bne	13030 <__assert_fail@plt+0x18d4>
   13010:	ldr	r1, [pc, #164]	; 130bc <__assert_fail@plt+0x1960>
   13014:	mov	r3, r4
   13018:	add	r1, pc, r1
   1301c:	mov	r2, r8
   13020:	ldr	r0, [r1]
   13024:	ldr	r1, [pc, #148]	; 130c0 <__assert_fail@plt+0x1964>
   13028:	add	r1, pc, r1
   1302c:	bl	11678 <errx@plt>
   13030:	mov	r6, r0
   13034:	mov	r2, #10
   13038:	mov	r1, sp
   1303c:	mov	r0, r4
   13040:	bl	11570 <strtoul@plt>
   13044:	ldr	r2, [r6]
   13048:	cmp	r2, r5
   1304c:	bne	13088 <__assert_fail@plt+0x192c>
   13050:	ldr	r3, [sp]
   13054:	cmp	r3, r4
   13058:	beq	13010 <__assert_fail@plt+0x18b4>
   1305c:	cmp	r3, r5
   13060:	beq	13070 <__assert_fail@plt+0x1914>
   13064:	ldrsb	r3, [r3]
   13068:	cmp	r3, r5
   1306c:	bne	13010 <__assert_fail@plt+0x18b4>
   13070:	ldr	r2, [sp, #4]
   13074:	ldr	r3, [r7]
   13078:	cmp	r2, r3
   1307c:	bne	130b0 <__assert_fail@plt+0x1954>
   13080:	add	sp, sp, #8
   13084:	pop	{r4, r5, r6, r7, r8, pc}
   13088:	ldr	r3, [pc, #52]	; 130c4 <__assert_fail@plt+0x1968>
   1308c:	cmp	r2, #34	; 0x22
   13090:	add	r3, pc, r3
   13094:	ldr	r0, [r3]
   13098:	bne	13010 <__assert_fail@plt+0x18b4>
   1309c:	ldr	r1, [pc, #36]	; 130c8 <__assert_fail@plt+0x196c>
   130a0:	mov	r3, r4
   130a4:	mov	r2, r8
   130a8:	add	r1, pc, r1
   130ac:	bl	11468 <err@plt>
   130b0:	bl	11444 <__stack_chk_fail@plt>
   130b4:	andeq	r4, r1, r8, lsr #29
   130b8:	andeq	r0, r0, r4, ror r1
   130bc:	andeq	r4, r1, r8, ror #31
   130c0:	ldrdeq	r4, [r0], -r8
   130c4:	andeq	r4, r1, r0, ror pc
   130c8:	andeq	r4, r0, r8, asr r9
   130cc:	ldr	r3, [pc, #140]	; 13160 <__assert_fail@plt+0x1a04>
   130d0:	ldr	r2, [pc, #140]	; 13164 <__assert_fail@plt+0x1a08>
   130d4:	add	r3, pc, r3
   130d8:	push	{r4, r5, r6, lr}
   130dc:	sub	sp, sp, #16
   130e0:	ldr	r4, [r3, r2]
   130e4:	mov	r5, r1
   130e8:	mov	r1, sp
   130ec:	ldr	r3, [r4]
   130f0:	mov	r6, r0
   130f4:	str	r3, [sp, #12]
   130f8:	bl	1290c <__assert_fail@plt+0x11b0>
   130fc:	cmp	r0, #0
   13100:	beq	13140 <__assert_fail@plt+0x19e4>
   13104:	bl	115ac <__errno_location@plt>
   13108:	ldr	r3, [pc, #88]	; 13168 <__assert_fail@plt+0x1a0c>
   1310c:	mov	r2, r5
   13110:	ldr	r1, [pc, r3]
   13114:	ldr	r3, [r0]
   13118:	mov	r0, r1
   1311c:	cmp	r3, #0
   13120:	mov	r3, r6
   13124:	beq	13134 <__assert_fail@plt+0x19d8>
   13128:	ldr	r1, [pc, #60]	; 1316c <__assert_fail@plt+0x1a10>
   1312c:	add	r1, pc, r1
   13130:	bl	11468 <err@plt>
   13134:	ldr	r1, [pc, #52]	; 13170 <__assert_fail@plt+0x1a14>
   13138:	add	r1, pc, r1
   1313c:	bl	11678 <errx@plt>
   13140:	ldr	r2, [sp, #12]
   13144:	ldr	r3, [r4]
   13148:	ldrd	r0, [sp]
   1314c:	cmp	r2, r3
   13150:	bne	1315c <__assert_fail@plt+0x1a00>
   13154:	add	sp, sp, #16
   13158:	pop	{r4, r5, r6, pc}
   1315c:	bl	11444 <__stack_chk_fail@plt>
   13160:	andeq	r4, r1, r0, lsr #27
   13164:	andeq	r0, r0, r4, ror r1
   13168:	strdeq	r4, [r1], -r0
   1316c:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   13170:	andeq	r4, r0, r8, asr #17
   13174:	push	{r4, lr}
   13178:	mov	r4, r1
   1317c:	mov	r1, r2
   13180:	bl	12db8 <__assert_fail@plt+0x165c>
   13184:	vldr	d6, [pc, #28]	; 131a8 <__assert_fail@plt+0x1a4c>
   13188:	vcvt.s32.f64	s15, d0
   1318c:	vcvt.f64.s32	d5, s15
   13190:	vstr	s15, [r4]
   13194:	vsub.f64	d0, d0, d5
   13198:	vmul.f64	d0, d0, d6
   1319c:	vcvt.s32.f64	s0, d0
   131a0:	vstr	s0, [r4, #4]
   131a4:	pop	{r4, pc}
   131a8:	andeq	r0, r0, r0
   131ac:	smlawbmi	lr, r0, r4, r8
   131b0:	and	r2, r0, #61440	; 0xf000
   131b4:	cmp	r2, #16384	; 0x4000
   131b8:	moveq	r2, r1
   131bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c0:	moveq	sl, #100	; 0x64
   131c4:	mov	r3, r0
   131c8:	add	r9, r1, #1
   131cc:	add	r8, r1, #2
   131d0:	add	r7, r1, #3
   131d4:	add	r6, r1, #4
   131d8:	add	r5, r1, #5
   131dc:	add	r4, r1, #6
   131e0:	add	lr, r1, #7
   131e4:	add	ip, r1, #8
   131e8:	add	r0, r1, #9
   131ec:	strbeq	sl, [r2], #10
   131f0:	beq	13294 <__assert_fail@plt+0x1b38>
   131f4:	cmp	r2, #40960	; 0xa000
   131f8:	moveq	r2, r1
   131fc:	moveq	sl, #108	; 0x6c
   13200:	strbeq	sl, [r2], #10
   13204:	beq	13294 <__assert_fail@plt+0x1b38>
   13208:	cmp	r2, #8192	; 0x2000
   1320c:	moveq	r2, r1
   13210:	moveq	sl, #99	; 0x63
   13214:	strbeq	sl, [r2], #10
   13218:	beq	13294 <__assert_fail@plt+0x1b38>
   1321c:	cmp	r2, #24576	; 0x6000
   13220:	moveq	r2, r1
   13224:	moveq	sl, #98	; 0x62
   13228:	strbeq	sl, [r2], #10
   1322c:	beq	13294 <__assert_fail@plt+0x1b38>
   13230:	cmp	r2, #49152	; 0xc000
   13234:	moveq	r2, r1
   13238:	moveq	sl, #115	; 0x73
   1323c:	strbeq	sl, [r2], #10
   13240:	beq	13294 <__assert_fail@plt+0x1b38>
   13244:	cmp	r2, #4096	; 0x1000
   13248:	moveq	r2, r1
   1324c:	moveq	sl, #112	; 0x70
   13250:	strbeq	sl, [r2], #10
   13254:	beq	13294 <__assert_fail@plt+0x1b38>
   13258:	cmp	r2, #32768	; 0x8000
   1325c:	moveq	r2, r1
   13260:	moveq	sl, #45	; 0x2d
   13264:	strbeq	sl, [r2], #10
   13268:	beq	13294 <__assert_fail@plt+0x1b38>
   1326c:	mov	r2, r0
   13270:	mov	r0, ip
   13274:	mov	ip, lr
   13278:	mov	lr, r4
   1327c:	mov	r4, r5
   13280:	mov	r5, r6
   13284:	mov	r6, r7
   13288:	mov	r7, r8
   1328c:	mov	r8, r9
   13290:	mov	r9, r1
   13294:	tst	r3, #256	; 0x100
   13298:	movne	fp, #114	; 0x72
   1329c:	moveq	fp, #45	; 0x2d
   132a0:	tst	r3, #128	; 0x80
   132a4:	movne	sl, #119	; 0x77
   132a8:	moveq	sl, #45	; 0x2d
   132ac:	tst	r3, #2048	; 0x800
   132b0:	strb	fp, [r9]
   132b4:	and	r9, r3, #64	; 0x40
   132b8:	strb	sl, [r8]
   132bc:	beq	13358 <__assert_fail@plt+0x1bfc>
   132c0:	cmp	r9, #0
   132c4:	movne	r9, #115	; 0x73
   132c8:	moveq	r9, #83	; 0x53
   132cc:	tst	r3, #32
   132d0:	movne	r8, #114	; 0x72
   132d4:	moveq	r8, #45	; 0x2d
   132d8:	tst	r3, #16
   132dc:	strb	r9, [r7]
   132e0:	movne	r7, #119	; 0x77
   132e4:	moveq	r7, #45	; 0x2d
   132e8:	tst	r3, #1024	; 0x400
   132ec:	strb	r8, [r6]
   132f0:	and	r6, r3, #8
   132f4:	strb	r7, [r5]
   132f8:	beq	13368 <__assert_fail@plt+0x1c0c>
   132fc:	cmp	r6, #0
   13300:	movne	r6, #115	; 0x73
   13304:	moveq	r6, #83	; 0x53
   13308:	tst	r3, #4
   1330c:	movne	r5, #114	; 0x72
   13310:	moveq	r5, #45	; 0x2d
   13314:	tst	r3, #2
   13318:	strb	r6, [r4]
   1331c:	movne	r4, #119	; 0x77
   13320:	moveq	r4, #45	; 0x2d
   13324:	tst	r3, #512	; 0x200
   13328:	strb	r5, [lr]
   1332c:	and	r3, r3, #1
   13330:	strb	r4, [ip]
   13334:	beq	13378 <__assert_fail@plt+0x1c1c>
   13338:	cmp	r3, #0
   1333c:	movne	ip, #116	; 0x74
   13340:	moveq	ip, #84	; 0x54
   13344:	mov	r3, #0
   13348:	strb	ip, [r0]
   1334c:	mov	r0, r1
   13350:	strb	r3, [r2]
   13354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13358:	cmp	r9, #0
   1335c:	movne	r9, #120	; 0x78
   13360:	moveq	r9, #45	; 0x2d
   13364:	b	132cc <__assert_fail@plt+0x1b70>
   13368:	cmp	r6, #0
   1336c:	movne	r6, #120	; 0x78
   13370:	moveq	r6, #45	; 0x2d
   13374:	b	13308 <__assert_fail@plt+0x1bac>
   13378:	cmp	r3, #0
   1337c:	movne	ip, #120	; 0x78
   13380:	moveq	ip, #45	; 0x2d
   13384:	b	13344 <__assert_fail@plt+0x1be8>
   13388:	ldr	r1, [pc, #680]	; 13638 <__assert_fail@plt+0x1edc>
   1338c:	ldr	ip, [pc, #680]	; 1363c <__assert_fail@plt+0x1ee0>
   13390:	add	r1, pc, r1
   13394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13398:	sub	sp, sp, #108	; 0x6c
   1339c:	ldr	r8, [r1, ip]
   133a0:	tst	r0, #2
   133a4:	strd	r2, [sp, #32]
   133a8:	ldr	r1, [r8]
   133ac:	addeq	r9, sp, #60	; 0x3c
   133b0:	str	r1, [sp, #100]	; 0x64
   133b4:	ldrd	r2, [sp, #32]
   133b8:	movne	r1, #32
   133bc:	strbne	r1, [sp, #60]	; 0x3c
   133c0:	addne	ip, sp, #61	; 0x3d
   133c4:	addne	r9, sp, #60	; 0x3c
   133c8:	moveq	ip, r9
   133cc:	mov	r1, #10
   133d0:	mov	sl, #1
   133d4:	sub	lr, r1, #32
   133d8:	lsl	r4, sl, r1
   133dc:	lsl	r5, sl, lr
   133e0:	rsb	lr, r1, #32
   133e4:	orr	r5, r5, sl, lsr lr
   133e8:	cmp	r3, r5
   133ec:	cmpeq	r2, r4
   133f0:	bcc	135ac <__assert_fail@plt+0x1e50>
   133f4:	add	r1, r1, #10
   133f8:	cmp	r1, #70	; 0x46
   133fc:	bne	133d4 <__assert_fail@plt+0x1c78>
   13400:	mov	lr, ip
   13404:	strd	r2, [sp, #32]
   13408:	mov	r4, r2
   1340c:	tst	r0, #1
   13410:	mov	r2, #69	; 0x45
   13414:	bic	r5, r3, #-268435456	; 0xf0000000
   13418:	lsr	sl, r3, #28
   1341c:	strb	r2, [lr], #1
   13420:	bne	13594 <__assert_fail@plt+0x1e38>
   13424:	orrs	r3, r4, r5
   13428:	mov	r3, #0
   1342c:	strb	r3, [lr]
   13430:	beq	135d4 <__assert_fail@plt+0x1e78>
   13434:	sub	r2, r1, #20
   13438:	rsb	r0, r2, #32
   1343c:	lsr	r3, r4, r2
   13440:	sub	r1, r1, #52	; 0x34
   13444:	orr	r3, r3, r5, lsl r0
   13448:	orr	r3, r3, r5, lsr r1
   1344c:	lsr	r2, r5, r2
   13450:	adds	r6, r3, #50	; 0x32
   13454:	adc	r7, r2, #0
   13458:	mov	r3, #0
   1345c:	mov	r2, #100	; 0x64
   13460:	mov	r0, r6
   13464:	mov	r1, r7
   13468:	bl	173f0 <__assert_fail@plt+0x5c94>
   1346c:	cmp	r1, #0
   13470:	cmpeq	r0, #10
   13474:	mov	r2, r0
   13478:	mov	r3, r1
   1347c:	addeq	sl, sl, #1
   13480:	beq	135d4 <__assert_fail@plt+0x1e78>
   13484:	cmp	r7, #0
   13488:	cmpeq	r6, #99	; 0x63
   1348c:	strd	r2, [sp, #32]
   13490:	bls	135d4 <__assert_fail@plt+0x1e78>
   13494:	bl	116b4 <localeconv@plt>
   13498:	ldrd	r2, [sp, #32]
   1349c:	cmp	r0, #0
   134a0:	beq	1361c <__assert_fail@plt+0x1ec0>
   134a4:	ldr	r0, [r0]
   134a8:	cmp	r0, #0
   134ac:	beq	13628 <__assert_fail@plt+0x1ecc>
   134b0:	ldrsb	r1, [r0]
   134b4:	cmp	r1, #0
   134b8:	ldreq	r0, [pc, #384]	; 13640 <__assert_fail@plt+0x1ee4>
   134bc:	addeq	r0, pc, r0
   134c0:	ldr	r1, [pc, #380]	; 13644 <__assert_fail@plt+0x1ee8>
   134c4:	strd	r2, [sp, #16]
   134c8:	add	r1, pc, r1
   134cc:	add	r4, sp, #68	; 0x44
   134d0:	mov	r3, #32
   134d4:	str	r0, [sp, #8]
   134d8:	str	r1, [sp]
   134dc:	str	r9, [sp, #24]
   134e0:	str	sl, [sp, #4]
   134e4:	mov	r0, r4
   134e8:	mov	r1, r3
   134ec:	mov	r2, #1
   134f0:	bl	11744 <__snprintf_chk@plt>
   134f4:	b	135fc <__assert_fail@plt+0x1ea0>
   134f8:	ldr	r4, [pc, #328]	; 13648 <__assert_fail@plt+0x1eec>
   134fc:	mvn	sl, #0
   13500:	ldr	fp, [pc, #324]	; 1364c <__assert_fail@plt+0x1ef0>
   13504:	umull	r2, r3, lr, r4
   13508:	sub	r4, r1, #42	; 0x2a
   1350c:	strd	r2, [sp, #40]	; 0x28
   13510:	ldr	r3, [sp, #44]	; 0x2c
   13514:	lsl	r2, sl, lr
   13518:	lsr	r3, r3, #3
   1351c:	str	r3, [sp, #52]	; 0x34
   13520:	ldr	r3, [sp, #32]
   13524:	str	r4, [sp, #48]	; 0x30
   13528:	orr	r4, r2, sl, lsl r4
   1352c:	lsr	r2, r3, lr
   13530:	mov	r3, r2
   13534:	ldr	r2, [sp, #52]	; 0x34
   13538:	add	fp, pc, fp
   1353c:	str	r4, [sp, #40]	; 0x28
   13540:	ldrsb	fp, [fp, r2]
   13544:	mov	r2, r3
   13548:	ldr	r3, [sp, #36]	; 0x24
   1354c:	rsb	r5, lr, #32
   13550:	ldr	r4, [sp, #40]	; 0x28
   13554:	orr	r2, r2, r3, lsl r5
   13558:	orr	r4, r4, sl, lsr r5
   1355c:	ldr	r3, [sp, #32]
   13560:	str	r4, [sp, #40]	; 0x28
   13564:	cmp	r0, #0
   13568:	bic	r4, r3, sl, lsl lr
   1356c:	ldr	r0, [sp, #36]	; 0x24
   13570:	ldr	r3, [sp, #48]	; 0x30
   13574:	mov	lr, ip
   13578:	orr	sl, r2, r0, lsr r3
   1357c:	ldr	r3, [sp, #40]	; 0x28
   13580:	strb	fp, [lr], #1
   13584:	bic	r5, r0, r3
   13588:	beq	13424 <__assert_fail@plt+0x1cc8>
   1358c:	cmp	fp, #66	; 0x42
   13590:	beq	13424 <__assert_fail@plt+0x1cc8>
   13594:	mov	r3, #105	; 0x69
   13598:	strb	r3, [ip, #1]
   1359c:	mov	r3, #66	; 0x42
   135a0:	add	lr, ip, #3
   135a4:	strb	r3, [ip, #2]
   135a8:	b	13424 <__assert_fail@plt+0x1cc8>
   135ac:	subs	lr, r1, #10
   135b0:	strd	r2, [sp, #32]
   135b4:	and	r0, r0, #1
   135b8:	bne	134f8 <__assert_fail@plt+0x1d9c>
   135bc:	ldr	sl, [sp, #32]
   135c0:	cmp	r0, #0
   135c4:	movne	r0, lr
   135c8:	mov	r3, #66	; 0x42
   135cc:	strb	r0, [ip, #1]
   135d0:	strb	r3, [ip]
   135d4:	ldr	r2, [pc, #116]	; 13650 <__assert_fail@plt+0x1ef4>
   135d8:	add	r4, sp, #68	; 0x44
   135dc:	add	r2, pc, r2
   135e0:	mov	r3, #32
   135e4:	stm	sp, {r2, sl}
   135e8:	str	r9, [sp, #8]
   135ec:	mov	r0, r4
   135f0:	mov	r1, r3
   135f4:	mov	r2, #1
   135f8:	bl	11744 <__snprintf_chk@plt>
   135fc:	mov	r0, r4
   13600:	bl	11438 <strdup@plt>
   13604:	ldr	r2, [sp, #100]	; 0x64
   13608:	ldr	r3, [r8]
   1360c:	cmp	r2, r3
   13610:	bne	13634 <__assert_fail@plt+0x1ed8>
   13614:	add	sp, sp, #108	; 0x6c
   13618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1361c:	ldr	r0, [pc, #48]	; 13654 <__assert_fail@plt+0x1ef8>
   13620:	add	r0, pc, r0
   13624:	b	134c0 <__assert_fail@plt+0x1d64>
   13628:	ldr	r0, [pc, #40]	; 13658 <__assert_fail@plt+0x1efc>
   1362c:	add	r0, pc, r0
   13630:	b	134c0 <__assert_fail@plt+0x1d64>
   13634:	bl	11444 <__stack_chk_fail@plt>
   13638:	andeq	r4, r1, r4, ror #21
   1363c:	andeq	r0, r0, r4, ror r1
   13640:	andeq	r4, r0, r8, ror #10
   13644:	andeq	r4, r0, r8, ror #10
   13648:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1364c:	strdeq	r4, [r0], -r0
   13650:	andeq	r4, r0, r0, ror #8
   13654:	andeq	r4, r0, r4, lsl #8
   13658:	strdeq	r4, [r0], -r8
   1365c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13660:	subs	r4, r0, #0
   13664:	beq	13734 <__assert_fail@plt+0x1fd8>
   13668:	ldrsb	lr, [r4]
   1366c:	cmp	lr, #0
   13670:	beq	13734 <__assert_fail@plt+0x1fd8>
   13674:	cmp	r1, #0
   13678:	clz	ip, r2
   1367c:	lsr	ip, ip, #5
   13680:	moveq	r0, #1
   13684:	movne	r0, ip
   13688:	cmp	r3, #0
   1368c:	moveq	r0, #1
   13690:	cmp	r0, #0
   13694:	bne	13734 <__assert_fail@plt+0x1fd8>
   13698:	mov	r8, r3
   1369c:	mov	r7, r2
   136a0:	mov	r9, r1
   136a4:	mov	r5, r0
   136a8:	b	13704 <__assert_fail@plt+0x1fa8>
   136ac:	cmp	r3, #0
   136b0:	bne	136f0 <__assert_fail@plt+0x1f94>
   136b4:	cmn	r4, #1
   136b8:	add	r6, r4, #1
   136bc:	beq	1373c <__assert_fail@plt+0x1fe0>
   136c0:	cmp	r0, r6
   136c4:	bcs	13734 <__assert_fail@plt+0x1fd8>
   136c8:	sub	r1, r6, r0
   136cc:	blx	r8
   136d0:	cmn	r0, #1
   136d4:	beq	13734 <__assert_fail@plt+0x1fd8>
   136d8:	str	r0, [r9, r5, lsl #2]
   136dc:	ldrsb	r3, [r6]
   136e0:	add	r5, r5, #1
   136e4:	cmp	r3, #0
   136e8:	beq	1373c <__assert_fail@plt+0x1fe0>
   136ec:	mov	r0, #0
   136f0:	cmn	r4, #1
   136f4:	beq	1373c <__assert_fail@plt+0x1fe0>
   136f8:	ldrsb	lr, [r4, #1]!
   136fc:	cmp	lr, #0
   13700:	beq	1373c <__assert_fail@plt+0x1fe0>
   13704:	cmp	r7, r5
   13708:	mov	r6, r4
   1370c:	bls	13744 <__assert_fail@plt+0x1fe8>
   13710:	cmp	r0, #0
   13714:	moveq	r0, r4
   13718:	cmp	lr, #44	; 0x2c
   1371c:	ldrsb	r3, [r4, #1]
   13720:	bne	136ac <__assert_fail@plt+0x1f50>
   13724:	cmp	r3, #0
   13728:	beq	136b4 <__assert_fail@plt+0x1f58>
   1372c:	cmp	r0, r6
   13730:	bcc	136c8 <__assert_fail@plt+0x1f6c>
   13734:	mvn	r0, #0
   13738:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1373c:	mov	r0, r5
   13740:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13744:	mvn	r0, #1
   13748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1374c:	cmp	r0, #0
   13750:	beq	137bc <__assert_fail@plt+0x2060>
   13754:	push	{r4, lr}
   13758:	mov	r4, r3
   1375c:	cmp	r4, #0
   13760:	ldrsb	ip, [r0]
   13764:	clz	r3, ip
   13768:	lsr	r3, r3, #5
   1376c:	moveq	r3, #1
   13770:	cmp	r3, #0
   13774:	bne	137b4 <__assert_fail@plt+0x2058>
   13778:	ldr	lr, [r4]
   1377c:	cmp	lr, r2
   13780:	bhi	137b4 <__assert_fail@plt+0x2058>
   13784:	cmp	ip, #43	; 0x2b
   13788:	strne	r3, [r4]
   1378c:	addeq	r0, r0, #1
   13790:	ldr	r3, [sp, #8]
   13794:	addeq	r1, r1, lr, lsl #2
   13798:	subeq	r2, r2, lr
   1379c:	bl	1365c <__assert_fail@plt+0x1f00>
   137a0:	cmp	r0, #0
   137a4:	ldrgt	r3, [r4]
   137a8:	addgt	r3, r3, r0
   137ac:	strgt	r3, [r4]
   137b0:	pop	{r4, pc}
   137b4:	mvn	r0, #0
   137b8:	pop	{r4, pc}
   137bc:	mvn	r0, #0
   137c0:	bx	lr
   137c4:	cmp	r2, #0
   137c8:	clz	r3, r1
   137cc:	lsr	r3, r3, #5
   137d0:	moveq	r3, #1
   137d4:	cmp	r0, #0
   137d8:	moveq	r3, #1
   137dc:	cmp	r3, #0
   137e0:	bne	138ac <__assert_fail@plt+0x2150>
   137e4:	push	{r4, r5, r6, r7, r8, lr}
   137e8:	mov	r6, r2
   137ec:	mov	r2, r3
   137f0:	ldrsb	r3, [r0]
   137f4:	mov	r8, r1
   137f8:	mov	r4, r0
   137fc:	mov	r7, #1
   13800:	cmp	r3, #0
   13804:	beq	13874 <__assert_fail@plt+0x2118>
   13808:	cmp	r2, #0
   1380c:	moveq	r2, r4
   13810:	cmp	r3, #44	; 0x2c
   13814:	mov	r5, r4
   13818:	ldrsb	r3, [r4, #1]!
   1381c:	beq	1387c <__assert_fail@plt+0x2120>
   13820:	cmp	r3, #0
   13824:	bne	1389c <__assert_fail@plt+0x2140>
   13828:	mov	r5, r4
   1382c:	cmp	r2, r5
   13830:	sub	r1, r5, r2
   13834:	mov	r0, r2
   13838:	bcs	13894 <__assert_fail@plt+0x2138>
   1383c:	blx	r6
   13840:	mov	r2, r4
   13844:	cmp	r0, #0
   13848:	and	r1, r0, #7
   1384c:	poplt	{r4, r5, r6, r7, r8, pc}
   13850:	ldrb	r3, [r8, r0, asr #3]
   13854:	orr	r3, r3, r7, lsl r1
   13858:	strb	r3, [r8, r0, asr #3]
   1385c:	ldrsb	r3, [r5]
   13860:	cmp	r3, #0
   13864:	beq	13874 <__assert_fail@plt+0x2118>
   13868:	ldrsb	r3, [r4]
   1386c:	cmp	r3, #0
   13870:	bne	13810 <__assert_fail@plt+0x20b4>
   13874:	mov	r0, #0
   13878:	pop	{r4, r5, r6, r7, r8, pc}
   1387c:	cmp	r3, #0
   13880:	moveq	r5, r4
   13884:	cmp	r2, r5
   13888:	sub	r1, r5, r2
   1388c:	mov	r0, r2
   13890:	bcc	1383c <__assert_fail@plt+0x20e0>
   13894:	mvn	r0, #0
   13898:	pop	{r4, r5, r6, r7, r8, pc}
   1389c:	adds	r4, r5, #1
   138a0:	bne	13800 <__assert_fail@plt+0x20a4>
   138a4:	mov	r0, #0
   138a8:	pop	{r4, r5, r6, r7, r8, pc}
   138ac:	mvn	r0, #21
   138b0:	bx	lr
   138b4:	cmp	r2, #0
   138b8:	clz	r3, r1
   138bc:	lsr	r3, r3, #5
   138c0:	moveq	r3, #1
   138c4:	cmp	r0, #0
   138c8:	moveq	r3, #1
   138cc:	cmp	r3, #0
   138d0:	bne	13994 <__assert_fail@plt+0x2238>
   138d4:	push	{r4, r5, r6, r7, r8, lr}
   138d8:	mov	r6, r2
   138dc:	mov	r2, r3
   138e0:	ldrsb	r3, [r0]
   138e4:	mov	r7, r1
   138e8:	mov	r4, r0
   138ec:	cmp	r3, #0
   138f0:	beq	1395c <__assert_fail@plt+0x2200>
   138f4:	cmp	r2, #0
   138f8:	moveq	r2, r4
   138fc:	cmp	r3, #44	; 0x2c
   13900:	mov	r5, r4
   13904:	ldrsb	r3, [r4, #1]!
   13908:	beq	13964 <__assert_fail@plt+0x2208>
   1390c:	cmp	r3, #0
   13910:	bne	13984 <__assert_fail@plt+0x2228>
   13914:	mov	r5, r4
   13918:	cmp	r2, r5
   1391c:	sub	r1, r5, r2
   13920:	mov	r0, r2
   13924:	bcs	1397c <__assert_fail@plt+0x2220>
   13928:	blx	r6
   1392c:	mov	r2, r4
   13930:	cmp	r0, #0
   13934:	poplt	{r4, r5, r6, r7, r8, pc}
   13938:	ldr	r3, [r7]
   1393c:	orr	r3, r3, r0
   13940:	str	r3, [r7]
   13944:	ldrsb	r3, [r5]
   13948:	cmp	r3, #0
   1394c:	beq	1395c <__assert_fail@plt+0x2200>
   13950:	ldrsb	r3, [r4]
   13954:	cmp	r3, #0
   13958:	bne	138fc <__assert_fail@plt+0x21a0>
   1395c:	mov	r0, #0
   13960:	pop	{r4, r5, r6, r7, r8, pc}
   13964:	cmp	r3, #0
   13968:	moveq	r5, r4
   1396c:	cmp	r2, r5
   13970:	sub	r1, r5, r2
   13974:	mov	r0, r2
   13978:	bcc	13928 <__assert_fail@plt+0x21cc>
   1397c:	mvn	r0, #0
   13980:	pop	{r4, r5, r6, r7, r8, pc}
   13984:	adds	r4, r5, #1
   13988:	bne	138ec <__assert_fail@plt+0x2190>
   1398c:	mov	r0, #0
   13990:	pop	{r4, r5, r6, r7, r8, pc}
   13994:	mvn	r0, #21
   13998:	bx	lr
   1399c:	ldr	ip, [pc, #396]	; 13b30 <__assert_fail@plt+0x23d4>
   139a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139a4:	add	ip, pc, ip
   139a8:	ldr	lr, [pc, #388]	; 13b34 <__assert_fail@plt+0x23d8>
   139ac:	sub	sp, sp, #8
   139b0:	mov	r9, r3
   139b4:	ldr	r5, [ip, lr]
   139b8:	mov	sl, #0
   139bc:	subs	r4, r0, #0
   139c0:	ldr	r3, [r5]
   139c4:	mov	r7, r1
   139c8:	str	sl, [sp]
   139cc:	mov	r1, ip
   139d0:	str	r3, [sp, #4]
   139d4:	beq	13a48 <__assert_fail@plt+0x22ec>
   139d8:	str	r9, [r7]
   139dc:	str	r9, [r2]
   139e0:	mov	r6, r2
   139e4:	bl	115ac <__errno_location@plt>
   139e8:	str	sl, [r0]
   139ec:	ldrsb	r3, [r4]
   139f0:	mov	r8, r0
   139f4:	cmp	r3, #58	; 0x3a
   139f8:	beq	13a64 <__assert_fail@plt+0x2308>
   139fc:	mov	sl, sp
   13a00:	mov	r1, sl
   13a04:	mov	r2, #10
   13a08:	mov	r0, r4
   13a0c:	bl	1136c <strtol@plt>
   13a10:	str	r0, [r7]
   13a14:	str	r0, [r6]
   13a18:	ldr	r0, [r8]
   13a1c:	cmp	r0, #0
   13a20:	bne	13ab4 <__assert_fail@plt+0x2358>
   13a24:	ldr	r2, [sp]
   13a28:	cmp	r2, #0
   13a2c:	cmpne	r2, r4
   13a30:	beq	13ab4 <__assert_fail@plt+0x2358>
   13a34:	ldrsb	r3, [r2]
   13a38:	cmp	r3, #58	; 0x3a
   13a3c:	beq	13abc <__assert_fail@plt+0x2360>
   13a40:	cmp	r3, #45	; 0x2d
   13a44:	beq	13acc <__assert_fail@plt+0x2370>
   13a48:	mov	r0, #0
   13a4c:	ldr	r2, [sp, #4]
   13a50:	ldr	r3, [r5]
   13a54:	cmp	r2, r3
   13a58:	bne	13b2c <__assert_fail@plt+0x23d0>
   13a5c:	add	sp, sp, #8
   13a60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a64:	add	r4, r4, #1
   13a68:	mov	r0, r4
   13a6c:	mov	r2, #10
   13a70:	mov	r1, sp
   13a74:	bl	1136c <strtol@plt>
   13a78:	str	r0, [r6]
   13a7c:	ldr	r3, [r8]
   13a80:	cmp	r3, #0
   13a84:	bne	13ab4 <__assert_fail@plt+0x2358>
   13a88:	ldr	r3, [sp]
   13a8c:	cmp	r3, #0
   13a90:	beq	13ab4 <__assert_fail@plt+0x2358>
   13a94:	ldrsb	r2, [r3]
   13a98:	sub	r3, r3, r4
   13a9c:	clz	r3, r3
   13aa0:	cmp	r2, #0
   13aa4:	lsr	r3, r3, #5
   13aa8:	movne	r3, #1
   13aac:	cmp	r3, #0
   13ab0:	beq	13a48 <__assert_fail@plt+0x22ec>
   13ab4:	mvn	r0, #0
   13ab8:	b	13a4c <__assert_fail@plt+0x22f0>
   13abc:	ldrsb	r3, [r2, #1]
   13ac0:	cmp	r3, #0
   13ac4:	streq	r9, [r6]
   13ac8:	beq	13a4c <__assert_fail@plt+0x22f0>
   13acc:	mov	r3, #0
   13ad0:	add	r4, r2, #1
   13ad4:	str	r3, [r8]
   13ad8:	mov	r1, sl
   13adc:	mov	r0, r4
   13ae0:	mov	r2, #10
   13ae4:	str	r3, [sp]
   13ae8:	bl	1136c <strtol@plt>
   13aec:	str	r0, [r6]
   13af0:	ldr	r3, [r8]
   13af4:	cmp	r3, #0
   13af8:	bne	13ab4 <__assert_fail@plt+0x2358>
   13afc:	ldr	r2, [sp]
   13b00:	cmp	r2, #0
   13b04:	beq	13ab4 <__assert_fail@plt+0x2358>
   13b08:	ldrsb	r3, [r2]
   13b0c:	sub	r2, r2, r4
   13b10:	clz	r2, r2
   13b14:	cmp	r3, #0
   13b18:	lsr	r2, r2, #5
   13b1c:	movne	r2, #1
   13b20:	cmp	r2, #0
   13b24:	beq	13a48 <__assert_fail@plt+0x22ec>
   13b28:	b	13ab4 <__assert_fail@plt+0x2358>
   13b2c:	bl	11444 <__stack_chk_fail@plt>
   13b30:	ldrdeq	r4, [r1], -r0
   13b34:	andeq	r0, r0, r4, ror r1
   13b38:	ldr	r3, [pc, #244]	; 13c34 <__assert_fail@plt+0x24d8>
   13b3c:	ldr	r2, [pc, #244]	; 13c38 <__assert_fail@plt+0x24dc>
   13b40:	add	r3, pc, r3
   13b44:	push	{r4, r5, r6, r7, r8, r9, lr}
   13b48:	sub	sp, sp, #20
   13b4c:	ldr	r9, [r3, r2]
   13b50:	cmp	r0, #0
   13b54:	cmpne	r1, #0
   13b58:	ldr	r3, [r9]
   13b5c:	str	r3, [sp, #12]
   13b60:	beq	13c28 <__assert_fail@plt+0x24cc>
   13b64:	mov	r4, r1
   13b68:	add	r8, sp, #4
   13b6c:	add	r7, sp, #8
   13b70:	b	13bb0 <__assert_fail@plt+0x2454>
   13b74:	cmp	r4, r3
   13b78:	bne	13c28 <__assert_fail@plt+0x24cc>
   13b7c:	mov	r2, r4
   13b80:	mov	r1, r6
   13b84:	mov	r0, r5
   13b88:	bl	11714 <strncmp@plt>
   13b8c:	cmp	r0, #0
   13b90:	bne	13c28 <__assert_fail@plt+0x24cc>
   13b94:	adds	r0, r5, r4
   13b98:	moveq	r3, #0
   13b9c:	movne	r3, #1
   13ba0:	adds	r4, r6, r4
   13ba4:	moveq	r3, #0
   13ba8:	cmp	r3, #0
   13bac:	beq	13c28 <__assert_fail@plt+0x24cc>
   13bb0:	mov	r1, r8
   13bb4:	bl	11fb8 <__assert_fail@plt+0x85c>
   13bb8:	mov	r1, r7
   13bbc:	mov	r5, r0
   13bc0:	mov	r0, r4
   13bc4:	bl	11fb8 <__assert_fail@plt+0x85c>
   13bc8:	ldr	r4, [sp, #4]
   13bcc:	ldr	r3, [sp, #8]
   13bd0:	mov	r6, r0
   13bd4:	adds	r0, r4, r3
   13bd8:	beq	13c0c <__assert_fail@plt+0x24b0>
   13bdc:	cmp	r0, #1
   13be0:	bne	13b74 <__assert_fail@plt+0x2418>
   13be4:	cmp	r5, #0
   13be8:	beq	13bf8 <__assert_fail@plt+0x249c>
   13bec:	ldrsb	r2, [r5]
   13bf0:	cmp	r2, #47	; 0x2f
   13bf4:	beq	13c10 <__assert_fail@plt+0x24b4>
   13bf8:	cmp	r6, #0
   13bfc:	beq	13b74 <__assert_fail@plt+0x2418>
   13c00:	ldrsb	r2, [r6]
   13c04:	cmp	r2, #47	; 0x2f
   13c08:	bne	13b74 <__assert_fail@plt+0x2418>
   13c0c:	mov	r0, #1
   13c10:	ldr	r2, [sp, #12]
   13c14:	ldr	r3, [r9]
   13c18:	cmp	r2, r3
   13c1c:	bne	13c30 <__assert_fail@plt+0x24d4>
   13c20:	add	sp, sp, #20
   13c24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13c28:	mov	r0, #0
   13c2c:	b	13c10 <__assert_fail@plt+0x24b4>
   13c30:	bl	11444 <__stack_chk_fail@plt>
   13c34:	andeq	r4, r1, r4, lsr r3
   13c38:	andeq	r0, r0, r4, ror r1
   13c3c:	orrs	r3, r0, r1
   13c40:	beq	13cbc <__assert_fail@plt+0x2560>
   13c44:	cmp	r0, #0
   13c48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c4c:	mov	r4, r1
   13c50:	mov	r5, r0
   13c54:	beq	13cc8 <__assert_fail@plt+0x256c>
   13c58:	cmp	r1, #0
   13c5c:	beq	13cd8 <__assert_fail@plt+0x257c>
   13c60:	mov	r6, r2
   13c64:	bl	1157c <strlen@plt>
   13c68:	mvn	r3, r0
   13c6c:	cmp	r6, r3
   13c70:	mov	r7, r0
   13c74:	movhi	r8, #0
   13c78:	bhi	13cb4 <__assert_fail@plt+0x2558>
   13c7c:	add	r9, r6, r0
   13c80:	add	r0, r9, #1
   13c84:	bl	114e0 <malloc@plt>
   13c88:	subs	r8, r0, #0
   13c8c:	beq	13cb4 <__assert_fail@plt+0x2558>
   13c90:	mov	r1, r5
   13c94:	mov	r2, r7
   13c98:	bl	11408 <memcpy@plt>
   13c9c:	mov	r2, r6
   13ca0:	mov	r1, r4
   13ca4:	add	r0, r8, r7
   13ca8:	bl	11408 <memcpy@plt>
   13cac:	mov	r3, #0
   13cb0:	strb	r3, [r8, r9]
   13cb4:	mov	r0, r8
   13cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cbc:	ldr	r0, [pc, #28]	; 13ce0 <__assert_fail@plt+0x2584>
   13cc0:	add	r0, pc, r0
   13cc4:	b	11438 <strdup@plt>
   13cc8:	mov	r0, r4
   13ccc:	mov	r1, r2
   13cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cd4:	b	113d8 <strndup@plt>
   13cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cdc:	b	11438 <strdup@plt>
   13ce0:	andeq	r3, r0, ip, lsl #28
   13ce4:	push	{r4, r5, r6, lr}
   13ce8:	subs	r4, r1, #0
   13cec:	mov	r5, r0
   13cf0:	moveq	r2, r4
   13cf4:	beq	13d04 <__assert_fail@plt+0x25a8>
   13cf8:	mov	r0, r4
   13cfc:	bl	1157c <strlen@plt>
   13d00:	mov	r2, r0
   13d04:	mov	r1, r4
   13d08:	mov	r0, r5
   13d0c:	pop	{r4, r5, r6, lr}
   13d10:	b	13c3c <__assert_fail@plt+0x24e0>
   13d14:	push	{r1, r2, r3}
   13d18:	ldr	r1, [pc, #132]	; 13da4 <__assert_fail@plt+0x2648>
   13d1c:	ldr	r3, [pc, #132]	; 13da8 <__assert_fail@plt+0x264c>
   13d20:	add	r1, pc, r1
   13d24:	push	{r4, r5, lr}
   13d28:	mov	r5, r0
   13d2c:	ldr	r4, [r1, r3]
   13d30:	sub	sp, sp, #16
   13d34:	add	ip, sp, #32
   13d38:	ldr	r0, [r4]
   13d3c:	ldr	r2, [sp, #28]
   13d40:	str	r0, [sp, #12]
   13d44:	mov	r3, ip
   13d48:	add	r0, sp, #8
   13d4c:	mov	r1, #1
   13d50:	str	ip, [sp, #4]
   13d54:	bl	115c4 <__vasprintf_chk@plt>
   13d58:	subs	r2, r0, #0
   13d5c:	movlt	r5, #0
   13d60:	blt	13d7c <__assert_fail@plt+0x2620>
   13d64:	mov	r0, r5
   13d68:	ldr	r1, [sp, #8]
   13d6c:	bl	13c3c <__assert_fail@plt+0x24e0>
   13d70:	mov	r5, r0
   13d74:	ldr	r0, [sp, #8]
   13d78:	bl	1139c <free@plt>
   13d7c:	ldr	r2, [sp, #12]
   13d80:	ldr	r3, [r4]
   13d84:	mov	r0, r5
   13d88:	cmp	r2, r3
   13d8c:	bne	13da0 <__assert_fail@plt+0x2644>
   13d90:	add	sp, sp, #16
   13d94:	pop	{r4, r5, lr}
   13d98:	add	sp, sp, #12
   13d9c:	bx	lr
   13da0:	bl	11444 <__stack_chk_fail@plt>
   13da4:	andeq	r4, r1, r4, asr r1
   13da8:	andeq	r0, r0, r4, ror r1
   13dac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13db0:	mov	r6, r0
   13db4:	ldr	r0, [pc, #348]	; 13f18 <__assert_fail@plt+0x27bc>
   13db8:	ldr	ip, [pc, #348]	; 13f1c <__assert_fail@plt+0x27c0>
   13dbc:	add	r0, pc, r0
   13dc0:	ldr	r5, [r6]
   13dc4:	ldr	r8, [r0, ip]
   13dc8:	sub	sp, sp, #8
   13dcc:	ldrsb	r4, [r5]
   13dd0:	mov	r9, r2
   13dd4:	ldr	r2, [r8]
   13dd8:	cmp	r4, #0
   13ddc:	mov	r7, r1
   13de0:	str	r2, [sp, #4]
   13de4:	mov	r1, r0
   13de8:	beq	13e98 <__assert_fail@plt+0x273c>
   13dec:	mov	r0, r5
   13df0:	mov	r1, r9
   13df4:	mov	sl, r3
   13df8:	bl	11750 <strspn@plt>
   13dfc:	add	r4, r5, r0
   13e00:	ldrsb	r5, [r5, r0]
   13e04:	cmp	r5, #0
   13e08:	beq	13f00 <__assert_fail@plt+0x27a4>
   13e0c:	cmp	sl, #0
   13e10:	beq	13eb4 <__assert_fail@plt+0x2758>
   13e14:	ldr	r0, [pc, #260]	; 13f20 <__assert_fail@plt+0x27c4>
   13e18:	mov	r1, r5
   13e1c:	add	r0, pc, r0
   13e20:	bl	11588 <strchr@plt>
   13e24:	cmp	r0, #0
   13e28:	beq	13ed0 <__assert_fail@plt+0x2774>
   13e2c:	add	sl, r4, #1
   13e30:	mov	r3, #0
   13e34:	mov	r0, sl
   13e38:	mov	r1, sp
   13e3c:	strb	r5, [sp]
   13e40:	strb	r3, [sp, #1]
   13e44:	bl	12058 <__assert_fail@plt+0x8fc>
   13e48:	add	r3, r4, r0
   13e4c:	str	r0, [r7]
   13e50:	ldrsb	r3, [r3, #1]
   13e54:	subs	r5, r5, r3
   13e58:	movne	r5, #1
   13e5c:	cmp	r3, #0
   13e60:	moveq	r5, #1
   13e64:	cmp	r5, #0
   13e68:	bne	13f00 <__assert_fail@plt+0x27a4>
   13e6c:	add	r0, r0, #2
   13e70:	add	r5, r4, r0
   13e74:	ldrsb	r1, [r4, r0]
   13e78:	cmp	r1, #0
   13e7c:	beq	13e90 <__assert_fail@plt+0x2734>
   13e80:	mov	r0, r9
   13e84:	bl	11588 <strchr@plt>
   13e88:	cmp	r0, #0
   13e8c:	beq	13f00 <__assert_fail@plt+0x27a4>
   13e90:	mov	r4, sl
   13e94:	str	r5, [r6]
   13e98:	ldr	r2, [sp, #4]
   13e9c:	ldr	r3, [r8]
   13ea0:	mov	r0, r4
   13ea4:	cmp	r2, r3
   13ea8:	bne	13f14 <__assert_fail@plt+0x27b8>
   13eac:	add	sp, sp, #8
   13eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13eb4:	mov	r1, r9
   13eb8:	mov	r0, r4
   13ebc:	bl	11378 <strcspn@plt>
   13ec0:	add	r3, r4, r0
   13ec4:	str	r0, [r7]
   13ec8:	str	r3, [r6]
   13ecc:	b	13e98 <__assert_fail@plt+0x273c>
   13ed0:	mov	r1, r9
   13ed4:	mov	r0, r4
   13ed8:	bl	12058 <__assert_fail@plt+0x8fc>
   13edc:	str	r0, [r7]
   13ee0:	ldrsb	r1, [r4, r0]
   13ee4:	add	r5, r4, r0
   13ee8:	cmp	r1, #0
   13eec:	beq	13f0c <__assert_fail@plt+0x27b0>
   13ef0:	mov	r0, r9
   13ef4:	bl	11588 <strchr@plt>
   13ef8:	cmp	r0, #0
   13efc:	bne	13f0c <__assert_fail@plt+0x27b0>
   13f00:	str	r4, [r6]
   13f04:	mov	r4, #0
   13f08:	b	13e98 <__assert_fail@plt+0x273c>
   13f0c:	str	r5, [r6]
   13f10:	b	13e98 <__assert_fail@plt+0x273c>
   13f14:	bl	11444 <__stack_chk_fail@plt>
   13f18:	strheq	r4, [r1], -r8
   13f1c:	andeq	r0, r0, r4, ror r1
   13f20:	andeq	r3, r0, r8, lsr #24
   13f24:	push	{r4, lr}
   13f28:	mov	r4, r0
   13f2c:	b	13f38 <__assert_fail@plt+0x27dc>
   13f30:	cmp	r0, #10
   13f34:	beq	13f50 <__assert_fail@plt+0x27f4>
   13f38:	mov	r0, r4
   13f3c:	bl	1160c <fgetc@plt>
   13f40:	cmn	r0, #1
   13f44:	bne	13f30 <__assert_fail@plt+0x27d4>
   13f48:	mov	r0, #1
   13f4c:	pop	{r4, pc}
   13f50:	mov	r0, #0
   13f54:	pop	{r4, pc}
   13f58:	push	{r1, r2, r3}
   13f5c:	subs	r3, r0, #0
   13f60:	ldr	r1, [pc, #168]	; 14010 <__assert_fail@plt+0x28b4>
   13f64:	ldr	r2, [pc, #168]	; 14014 <__assert_fail@plt+0x28b8>
   13f68:	add	r1, pc, r1
   13f6c:	push	{r4, r5, r6, lr}
   13f70:	sub	sp, sp, #12
   13f74:	ldr	r5, [r1, r2]
   13f78:	ldr	r6, [sp, #28]
   13f7c:	ldr	r2, [r5]
   13f80:	str	r2, [sp, #4]
   13f84:	beq	13f9c <__assert_fail@plt+0x2840>
   13f88:	ldr	r2, [pc, #136]	; 14018 <__assert_fail@plt+0x28bc>
   13f8c:	add	r2, pc, r2
   13f90:	ldr	r2, [r2]
   13f94:	tst	r2, #16777216	; 0x1000000
   13f98:	beq	13fec <__assert_fail@plt+0x2890>
   13f9c:	ldr	r3, [pc, #120]	; 1401c <__assert_fail@plt+0x28c0>
   13fa0:	ldr	r4, [r1, r3]
   13fa4:	add	ip, sp, #32
   13fa8:	mov	r2, r6
   13fac:	mov	r3, ip
   13fb0:	mov	r1, #1
   13fb4:	ldr	r0, [r4]
   13fb8:	str	ip, [sp]
   13fbc:	bl	11504 <__vfprintf_chk@plt>
   13fc0:	ldr	r1, [r4]
   13fc4:	mov	r0, #10
   13fc8:	bl	1169c <fputc@plt>
   13fcc:	ldr	r2, [sp, #4]
   13fd0:	ldr	r3, [r5]
   13fd4:	cmp	r2, r3
   13fd8:	bne	1400c <__assert_fail@plt+0x28b0>
   13fdc:	add	sp, sp, #12
   13fe0:	pop	{r4, r5, r6, lr}
   13fe4:	add	sp, sp, #12
   13fe8:	bx	lr
   13fec:	ldr	r0, [pc, #40]	; 1401c <__assert_fail@plt+0x28c0>
   13ff0:	ldr	r2, [pc, #40]	; 14020 <__assert_fail@plt+0x28c4>
   13ff4:	ldr	r4, [r1, r0]
   13ff8:	add	r2, pc, r2
   13ffc:	mov	r1, #1
   14000:	ldr	r0, [r4]
   14004:	bl	11648 <__fprintf_chk@plt>
   14008:	b	13fa4 <__assert_fail@plt+0x2848>
   1400c:	bl	11444 <__stack_chk_fail@plt>
   14010:	andeq	r3, r1, ip, lsl #30
   14014:	andeq	r0, r0, r4, ror r1
   14018:	muleq	r1, ip, r0
   1401c:	andeq	r0, r0, r8, ror r1
   14020:	andeq	r3, r0, r8, ror sl
   14024:	push	{r0, r1, r2, r3}
   14028:	ldr	r0, [pc, #104]	; 14098 <__assert_fail@plt+0x293c>
   1402c:	ldr	r2, [pc, #104]	; 1409c <__assert_fail@plt+0x2940>
   14030:	add	r0, pc, r0
   14034:	push	{r4, r5, lr}
   14038:	sub	sp, sp, #12
   1403c:	ldr	r4, [r0, r2]
   14040:	ldr	r1, [pc, #88]	; 140a0 <__assert_fail@plt+0x2944>
   14044:	add	r3, sp, #28
   14048:	ldr	ip, [r4]
   1404c:	str	r3, [sp]
   14050:	str	ip, [sp, #4]
   14054:	ldr	r5, [r0, r1]
   14058:	ldr	r2, [sp, #24]
   1405c:	mov	r1, #1
   14060:	ldr	r0, [r5]
   14064:	bl	11504 <__vfprintf_chk@plt>
   14068:	ldr	r1, [r5]
   1406c:	mov	r0, #10
   14070:	bl	1169c <fputc@plt>
   14074:	ldr	r2, [sp, #4]
   14078:	ldr	r3, [r4]
   1407c:	cmp	r2, r3
   14080:	bne	14094 <__assert_fail@plt+0x2938>
   14084:	add	sp, sp, #12
   14088:	pop	{r4, r5, lr}
   1408c:	add	sp, sp, #16
   14090:	bx	lr
   14094:	bl	11444 <__stack_chk_fail@plt>
   14098:	andeq	r3, r1, r4, asr #28
   1409c:	andeq	r0, r0, r4, ror r1
   140a0:	andeq	r0, r0, r8, ror r1
   140a4:	ldr	r1, [r0, #12]
   140a8:	ldr	r2, [r0, #4]
   140ac:	cmp	r1, #0
   140b0:	push	{r4, lr}
   140b4:	moveq	r4, r2
   140b8:	sub	sp, sp, #16
   140bc:	beq	14110 <__assert_fail@plt+0x29b4>
   140c0:	cmp	r2, #0
   140c4:	beq	14138 <__assert_fail@plt+0x29dc>
   140c8:	ldrsb	r3, [r2]
   140cc:	ldr	ip, [pc, #116]	; 14148 <__assert_fail@plt+0x29ec>
   140d0:	add	r4, r0, #16
   140d4:	cmp	r3, #47	; 0x2f
   140d8:	addeq	r2, r2, #1
   140dc:	add	ip, pc, ip
   140e0:	mov	r3, #4096	; 0x1000
   140e4:	stmib	sp, {r1, r2}
   140e8:	mov	r0, r4
   140ec:	str	ip, [sp]
   140f0:	mov	r1, r3
   140f4:	mov	r2, #1
   140f8:	bl	11744 <__snprintf_chk@plt>
   140fc:	cmp	r0, #0
   14100:	movlt	r4, #0
   14104:	blt	14110 <__assert_fail@plt+0x29b4>
   14108:	cmp	r0, #4096	; 0x1000
   1410c:	bge	1411c <__assert_fail@plt+0x29c0>
   14110:	mov	r0, r4
   14114:	add	sp, sp, #16
   14118:	pop	{r4, pc}
   1411c:	bl	115ac <__errno_location@plt>
   14120:	mov	r4, #0
   14124:	mov	r3, #36	; 0x24
   14128:	str	r3, [r0]
   1412c:	mov	r0, r4
   14130:	add	sp, sp, #16
   14134:	pop	{r4, pc}
   14138:	mov	r4, r1
   1413c:	mov	r0, r4
   14140:	add	sp, sp, #16
   14144:	pop	{r4, pc}
   14148:	muleq	r0, ip, r9
   1414c:	push	{r4, lr}
   14150:	sub	sp, sp, #8
   14154:	add	r4, r0, #16
   14158:	mov	r3, #4096	; 0x1000
   1415c:	stm	sp, {r1, r2}
   14160:	mov	r0, r4
   14164:	mov	r1, r3
   14168:	mov	r2, #1
   1416c:	bl	113fc <__vsnprintf_chk@plt>
   14170:	cmp	r0, #0
   14174:	movlt	r4, #0
   14178:	blt	14184 <__assert_fail@plt+0x2a28>
   1417c:	cmp	r0, #4096	; 0x1000
   14180:	bge	14190 <__assert_fail@plt+0x2a34>
   14184:	mov	r0, r4
   14188:	add	sp, sp, #8
   1418c:	pop	{r4, pc}
   14190:	bl	115ac <__errno_location@plt>
   14194:	mov	r4, #0
   14198:	mov	r3, #36	; 0x24
   1419c:	str	r3, [r0]
   141a0:	mov	r0, r4
   141a4:	add	sp, sp, #8
   141a8:	pop	{r4, pc}
   141ac:	push	{r4, r5, r6, r7, lr}
   141b0:	sub	sp, sp, #20
   141b4:	ldr	r4, [pc, #312]	; 142f4 <__assert_fail@plt+0x2b98>
   141b8:	ldr	r3, [pc, #312]	; 142f8 <__assert_fail@plt+0x2b9c>
   141bc:	add	r4, pc, r4
   141c0:	ldr	r7, [pc, #308]	; 142fc <__assert_fail@plt+0x2ba0>
   141c4:	ldr	r5, [r4, r3]
   141c8:	add	r7, pc, r7
   141cc:	ldr	r6, [r7]
   141d0:	ldr	r3, [r5]
   141d4:	cmp	r6, #0
   141d8:	str	r3, [sp, #12]
   141dc:	beq	141f8 <__assert_fail@plt+0x2a9c>
   141e0:	ldr	r2, [sp, #12]
   141e4:	ldr	r3, [r5]
   141e8:	cmp	r2, r3
   141ec:	bne	142f0 <__assert_fail@plt+0x2b94>
   141f0:	add	sp, sp, #20
   141f4:	pop	{r4, r5, r6, r7, pc}
   141f8:	ldr	r0, [pc, #256]	; 14300 <__assert_fail@plt+0x2ba4>
   141fc:	add	r0, pc, r0
   14200:	bl	114d4 <getenv@plt>
   14204:	cmp	r0, #0
   14208:	beq	14250 <__assert_fail@plt+0x2af4>
   1420c:	mov	r2, r6
   14210:	add	r1, sp, #8
   14214:	bl	11570 <strtoul@plt>
   14218:	mov	r6, r0
   1421c:	ldr	r0, [sp, #8]
   14220:	cmp	r0, #0
   14224:	beq	1423c <__assert_fail@plt+0x2ae0>
   14228:	ldr	r1, [pc, #212]	; 14304 <__assert_fail@plt+0x2ba8>
   1422c:	add	r1, pc, r1
   14230:	bl	11354 <strcmp@plt>
   14234:	cmp	r0, #0
   14238:	beq	14264 <__assert_fail@plt+0x2b08>
   1423c:	ldr	r3, [pc, #196]	; 14308 <__assert_fail@plt+0x2bac>
   14240:	cmp	r6, #0
   14244:	add	r3, pc, r3
   14248:	str	r6, [r3]
   1424c:	bne	14270 <__assert_fail@plt+0x2b14>
   14250:	mov	r3, #2
   14254:	ldr	r2, [pc, #176]	; 1430c <__assert_fail@plt+0x2bb0>
   14258:	add	r2, pc, r2
   1425c:	str	r3, [r2]
   14260:	b	141e0 <__assert_fail@plt+0x2a84>
   14264:	ldr	r3, [pc, #164]	; 14310 <__assert_fail@plt+0x2bb4>
   14268:	mov	r6, r3
   1426c:	str	r3, [r7]
   14270:	bl	11390 <getuid@plt>
   14274:	mov	r7, r0
   14278:	bl	11474 <geteuid@plt>
   1427c:	cmp	r7, r0
   14280:	beq	142d4 <__assert_fail@plt+0x2b78>
   14284:	ldr	r7, [pc, #136]	; 14314 <__assert_fail@plt+0x2bb8>
   14288:	ldr	r2, [pc, #136]	; 14318 <__assert_fail@plt+0x2bbc>
   1428c:	add	r7, pc, r7
   14290:	orr	r3, r6, #16777216	; 0x1000000
   14294:	str	r3, [r7]
   14298:	ldr	r3, [r4, r2]
   1429c:	ldr	r4, [r3]
   142a0:	bl	1154c <getpid@plt>
   142a4:	ldr	r3, [pc, #112]	; 1431c <__assert_fail@plt+0x2bc0>
   142a8:	ldr	r2, [pc, #112]	; 14320 <__assert_fail@plt+0x2bc4>
   142ac:	add	r3, pc, r3
   142b0:	str	r3, [sp]
   142b4:	add	r2, pc, r2
   142b8:	mov	r1, #1
   142bc:	mov	r3, r0
   142c0:	mov	r0, r4
   142c4:	bl	11648 <__fprintf_chk@plt>
   142c8:	ldr	r3, [r7]
   142cc:	orr	r3, r3, #2
   142d0:	b	14254 <__assert_fail@plt+0x2af8>
   142d4:	bl	115dc <getgid@plt>
   142d8:	mov	r7, r0
   142dc:	bl	11498 <getegid@plt>
   142e0:	cmp	r7, r0
   142e4:	orreq	r3, r6, #2
   142e8:	bne	14284 <__assert_fail@plt+0x2b28>
   142ec:	b	14254 <__assert_fail@plt+0x2af8>
   142f0:	bl	11444 <__stack_chk_fail@plt>
   142f4:			; <UNDEFINED> instruction: 0x00013cb8
   142f8:	andeq	r0, r0, r4, ror r1
   142fc:	andeq	r3, r1, r0, ror #28
   14300:	andeq	r3, r0, r4, lsl #17
   14304:	andeq	r3, r0, r4, ror #16
   14308:	andeq	r3, r1, r4, ror #27
   1430c:	ldrdeq	r3, [r1], -r0
   14310:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   14314:	muleq	r1, ip, sp
   14318:	andeq	r0, r0, r8, ror r1
   1431c:	andeq	r3, r0, r4, lsr #16
   14320:	andeq	r3, r0, r0, ror #15
   14324:	cmp	r0, #0
   14328:	ldrne	r3, [r0, #8]
   1432c:	addne	r3, r3, #1
   14330:	strne	r3, [r0, #8]
   14334:	bx	lr
   14338:	ldr	r2, [pc, #228]	; 14424 <__assert_fail@plt+0x2cc8>
   1433c:	push	{r4, r5, lr}
   14340:	subs	r4, r0, #0
   14344:	sub	sp, sp, #12
   14348:	add	r2, pc, r2
   1434c:	beq	14364 <__assert_fail@plt+0x2c08>
   14350:	ldr	r3, [r4, #8]
   14354:	sub	r3, r3, #1
   14358:	cmp	r3, #0
   1435c:	str	r3, [r4, #8]
   14360:	ble	1436c <__assert_fail@plt+0x2c10>
   14364:	add	sp, sp, #12
   14368:	pop	{r4, r5, pc}
   1436c:	ldr	r3, [pc, #180]	; 14428 <__assert_fail@plt+0x2ccc>
   14370:	add	r3, pc, r3
   14374:	ldr	r3, [r3]
   14378:	tst	r3, #4
   1437c:	bne	143d0 <__assert_fail@plt+0x2c74>
   14380:	add	r3, r4, #4096	; 0x1000
   14384:	ldr	r2, [r3, #16]
   14388:	cmp	r2, #0
   1438c:	beq	1439c <__assert_fail@plt+0x2c40>
   14390:	ldr	r3, [r3, #20]
   14394:	mov	r0, r4
   14398:	blx	r3
   1439c:	ldr	r0, [r4]
   143a0:	cmp	r0, #0
   143a4:	bge	143c8 <__assert_fail@plt+0x2c6c>
   143a8:	ldr	r0, [r4, #4]
   143ac:	bl	1139c <free@plt>
   143b0:	ldr	r0, [r4, #12]
   143b4:	bl	1139c <free@plt>
   143b8:	mov	r0, r4
   143bc:	add	sp, sp, #12
   143c0:	pop	{r4, r5, lr}
   143c4:	b	1139c <free@plt>
   143c8:	bl	1172c <close@plt>
   143cc:	b	143a8 <__assert_fail@plt+0x2c4c>
   143d0:	ldr	r3, [pc, #84]	; 1442c <__assert_fail@plt+0x2cd0>
   143d4:	ldr	r3, [r2, r3]
   143d8:	ldr	r5, [r3]
   143dc:	bl	1154c <getpid@plt>
   143e0:	ldr	r2, [pc, #72]	; 14430 <__assert_fail@plt+0x2cd4>
   143e4:	ldr	r3, [pc, #72]	; 14434 <__assert_fail@plt+0x2cd8>
   143e8:	add	r2, pc, r2
   143ec:	str	r2, [sp, #4]
   143f0:	ldr	r2, [pc, #64]	; 14438 <__assert_fail@plt+0x2cdc>
   143f4:	add	r3, pc, r3
   143f8:	str	r3, [sp]
   143fc:	add	r2, pc, r2
   14400:	mov	r1, #1
   14404:	mov	r3, r0
   14408:	mov	r0, r5
   1440c:	bl	11648 <__fprintf_chk@plt>
   14410:	ldr	r1, [pc, #36]	; 1443c <__assert_fail@plt+0x2ce0>
   14414:	mov	r0, r4
   14418:	add	r1, pc, r1
   1441c:	bl	13f58 <__assert_fail@plt+0x27fc>
   14420:	b	14380 <__assert_fail@plt+0x2c24>
   14424:	andeq	r3, r1, ip, lsr #22
   14428:			; <UNDEFINED> instruction: 0x00013cb8
   1442c:	andeq	r0, r0, r8, ror r1
   14430:	andeq	r3, r0, r0, lsl #14
   14434:	ldrdeq	r3, [r0], -ip
   14438:	ldrdeq	r3, [r0], -ip
   1443c:	ldrdeq	r3, [r0], -r4
   14440:	push	{r0, r1, r2, r3}
   14444:	mov	r0, #1
   14448:	push	{r4, r5, r6, r7, lr}
   1444c:	sub	sp, sp, #20
   14450:	ldr	r5, [pc, #264]	; 14560 <__assert_fail@plt+0x2e04>
   14454:	ldr	r3, [pc, #264]	; 14564 <__assert_fail@plt+0x2e08>
   14458:	add	r5, pc, r5
   1445c:	ldr	r1, [pc, #260]	; 14568 <__assert_fail@plt+0x2e0c>
   14460:	ldr	r6, [r5, r3]
   14464:	ldr	r7, [sp, #40]	; 0x28
   14468:	ldr	r3, [r6]
   1446c:	str	r3, [sp, #12]
   14470:	bl	1133c <calloc@plt>
   14474:	subs	r4, r0, #0
   14478:	beq	144d4 <__assert_fail@plt+0x2d78>
   1447c:	ldr	r3, [pc, #232]	; 1456c <__assert_fail@plt+0x2e10>
   14480:	add	r3, pc, r3
   14484:	ldr	r3, [r3]
   14488:	tst	r3, #4
   1448c:	bne	144f8 <__assert_fail@plt+0x2d9c>
   14490:	mov	r1, #1
   14494:	mvn	r3, #0
   14498:	cmp	r7, #0
   1449c:	str	r1, [r4, #8]
   144a0:	str	r3, [r4]
   144a4:	beq	144d4 <__assert_fail@plt+0x2d78>
   144a8:	add	ip, sp, #44	; 0x2c
   144ac:	mov	r2, r7
   144b0:	mov	r3, ip
   144b4:	add	r0, r4, #4
   144b8:	str	ip, [sp, #8]
   144bc:	bl	115c4 <__vasprintf_chk@plt>
   144c0:	cmp	r0, #0
   144c4:	blt	1454c <__assert_fail@plt+0x2df0>
   144c8:	ldr	r3, [r4, #4]
   144cc:	cmp	r3, #0
   144d0:	beq	1454c <__assert_fail@plt+0x2df0>
   144d4:	ldr	r2, [sp, #12]
   144d8:	ldr	r3, [r6]
   144dc:	mov	r0, r4
   144e0:	cmp	r2, r3
   144e4:	bne	1455c <__assert_fail@plt+0x2e00>
   144e8:	add	sp, sp, #20
   144ec:	pop	{r4, r5, r6, r7, lr}
   144f0:	add	sp, sp, #16
   144f4:	bx	lr
   144f8:	ldr	r3, [pc, #112]	; 14570 <__assert_fail@plt+0x2e14>
   144fc:	ldr	r3, [r5, r3]
   14500:	ldr	r5, [r3]
   14504:	bl	1154c <getpid@plt>
   14508:	ldr	r2, [pc, #100]	; 14574 <__assert_fail@plt+0x2e18>
   1450c:	ldr	r3, [pc, #100]	; 14578 <__assert_fail@plt+0x2e1c>
   14510:	add	r2, pc, r2
   14514:	str	r2, [sp, #4]
   14518:	ldr	r2, [pc, #92]	; 1457c <__assert_fail@plt+0x2e20>
   1451c:	add	r3, pc, r3
   14520:	str	r3, [sp]
   14524:	add	r2, pc, r2
   14528:	mov	r1, #1
   1452c:	mov	r3, r0
   14530:	mov	r0, r5
   14534:	bl	11648 <__fprintf_chk@plt>
   14538:	ldr	r1, [pc, #64]	; 14580 <__assert_fail@plt+0x2e24>
   1453c:	mov	r0, r4
   14540:	add	r1, pc, r1
   14544:	bl	13f58 <__assert_fail@plt+0x27fc>
   14548:	b	14490 <__assert_fail@plt+0x2d34>
   1454c:	mov	r0, r4
   14550:	bl	14338 <__assert_fail@plt+0x2bdc>
   14554:	mov	r4, #0
   14558:	b	144d4 <__assert_fail@plt+0x2d78>
   1455c:	bl	11444 <__stack_chk_fail@plt>
   14560:	andeq	r3, r1, ip, lsl sl
   14564:	andeq	r0, r0, r4, ror r1
   14568:	andeq	r1, r0, ip, lsl r0
   1456c:	andeq	r3, r1, r8, lsr #23
   14570:	andeq	r0, r0, r8, ror r1
   14574:	ldrdeq	r3, [r0], -r8
   14578:			; <UNDEFINED> instruction: 0x000035b4
   1457c:			; <UNDEFINED> instruction: 0x000035b4
   14580:			; <UNDEFINED> instruction: 0x000035b4
   14584:	ldr	r3, [r0]
   14588:	push	{r4, r5, r6, lr}
   1458c:	cmp	r3, #0
   14590:	ldr	r6, [pc, #220]	; 14674 <__assert_fail@plt+0x2f18>
   14594:	sub	sp, sp, #8
   14598:	add	r6, pc, r6
   1459c:	bge	14654 <__assert_fail@plt+0x2ef8>
   145a0:	cmp	r1, #0
   145a4:	mov	r5, r0
   145a8:	beq	14644 <__assert_fail@plt+0x2ee8>
   145ac:	mov	r0, r1
   145b0:	bl	11438 <strdup@plt>
   145b4:	subs	r4, r0, #0
   145b8:	beq	1464c <__assert_fail@plt+0x2ef0>
   145bc:	ldr	r0, [r5, #12]
   145c0:	bl	1139c <free@plt>
   145c4:	ldr	r3, [pc, #172]	; 14678 <__assert_fail@plt+0x2f1c>
   145c8:	str	r4, [r5, #12]
   145cc:	add	r3, pc, r3
   145d0:	ldr	r0, [r3]
   145d4:	ands	r0, r0, #4
   145d8:	bne	145e4 <__assert_fail@plt+0x2e88>
   145dc:	add	sp, sp, #8
   145e0:	pop	{r4, r5, r6, pc}
   145e4:	ldr	r3, [pc, #144]	; 1467c <__assert_fail@plt+0x2f20>
   145e8:	ldr	r3, [r6, r3]
   145ec:	ldr	r6, [r3]
   145f0:	bl	1154c <getpid@plt>
   145f4:	ldr	r2, [pc, #132]	; 14680 <__assert_fail@plt+0x2f24>
   145f8:	ldr	r3, [pc, #132]	; 14684 <__assert_fail@plt+0x2f28>
   145fc:	add	r2, pc, r2
   14600:	str	r2, [sp, #4]
   14604:	ldr	r2, [pc, #124]	; 14688 <__assert_fail@plt+0x2f2c>
   14608:	add	r3, pc, r3
   1460c:	str	r3, [sp]
   14610:	add	r2, pc, r2
   14614:	mov	r1, #1
   14618:	mov	r3, r0
   1461c:	mov	r0, r6
   14620:	bl	11648 <__fprintf_chk@plt>
   14624:	ldr	r1, [pc, #96]	; 1468c <__assert_fail@plt+0x2f30>
   14628:	mov	r0, r5
   1462c:	mov	r2, r4
   14630:	add	r1, pc, r1
   14634:	bl	13f58 <__assert_fail@plt+0x27fc>
   14638:	mov	r0, #0
   1463c:	add	sp, sp, #8
   14640:	pop	{r4, r5, r6, pc}
   14644:	mov	r4, r1
   14648:	b	145bc <__assert_fail@plt+0x2e60>
   1464c:	mvn	r0, #11
   14650:	b	145dc <__assert_fail@plt+0x2e80>
   14654:	ldr	r3, [pc, #52]	; 14690 <__assert_fail@plt+0x2f34>
   14658:	ldr	r1, [pc, #52]	; 14694 <__assert_fail@plt+0x2f38>
   1465c:	ldr	r0, [pc, #52]	; 14698 <__assert_fail@plt+0x2f3c>
   14660:	add	r3, pc, r3
   14664:	mov	r2, #109	; 0x6d
   14668:	add	r1, pc, r1
   1466c:	add	r0, pc, r0
   14670:	bl	1175c <__assert_fail@plt>
   14674:	ldrdeq	r3, [r1], -ip
   14678:	andeq	r3, r1, ip, asr sl
   1467c:	andeq	r0, r0, r8, ror r1
   14680:	andeq	r3, r0, ip, ror #9
   14684:	andeq	r3, r0, r8, asr #9
   14688:	andeq	r3, r0, r8, asr #9
   1468c:	andeq	r3, r0, r8, ror #9
   14690:	andeq	r3, r0, r8, ror #7
   14694:	muleq	r0, r4, r4
   14698:	muleq	r0, ip, r4
   1469c:	cmp	r0, #0
   146a0:	ldrne	r0, [r0, #12]
   146a4:	bx	lr
   146a8:	push	{r4, r5, r6, lr}
   146ac:	subs	r5, r1, #0
   146b0:	ldr	r6, [pc, #196]	; 1477c <__assert_fail@plt+0x3020>
   146b4:	sub	sp, sp, #8
   146b8:	mov	r4, r0
   146bc:	add	r6, pc, r6
   146c0:	beq	146d4 <__assert_fail@plt+0x2f78>
   146c4:	mov	r0, r5
   146c8:	bl	11438 <strdup@plt>
   146cc:	subs	r5, r0, #0
   146d0:	beq	14774 <__assert_fail@plt+0x3018>
   146d4:	ldr	r0, [r4]
   146d8:	cmp	r0, #0
   146dc:	blt	146ec <__assert_fail@plt+0x2f90>
   146e0:	bl	1172c <close@plt>
   146e4:	mvn	r3, #0
   146e8:	str	r3, [r4]
   146ec:	ldr	r0, [r4, #4]
   146f0:	bl	1139c <free@plt>
   146f4:	ldr	r3, [pc, #132]	; 14780 <__assert_fail@plt+0x3024>
   146f8:	str	r5, [r4, #4]
   146fc:	add	r3, pc, r3
   14700:	ldr	r3, [r3]
   14704:	ands	r0, r3, #4
   14708:	bne	14714 <__assert_fail@plt+0x2fb8>
   1470c:	add	sp, sp, #8
   14710:	pop	{r4, r5, r6, pc}
   14714:	ldr	r3, [pc, #104]	; 14784 <__assert_fail@plt+0x3028>
   14718:	ldr	r3, [r6, r3]
   1471c:	ldr	r6, [r3]
   14720:	bl	1154c <getpid@plt>
   14724:	ldr	r2, [pc, #92]	; 14788 <__assert_fail@plt+0x302c>
   14728:	ldr	r3, [pc, #92]	; 1478c <__assert_fail@plt+0x3030>
   1472c:	add	r2, pc, r2
   14730:	str	r2, [sp, #4]
   14734:	ldr	r2, [pc, #84]	; 14790 <__assert_fail@plt+0x3034>
   14738:	add	r3, pc, r3
   1473c:	str	r3, [sp]
   14740:	add	r2, pc, r2
   14744:	mov	r1, #1
   14748:	mov	r3, r0
   1474c:	mov	r0, r6
   14750:	bl	11648 <__fprintf_chk@plt>
   14754:	ldr	r1, [pc, #56]	; 14794 <__assert_fail@plt+0x3038>
   14758:	mov	r0, r4
   1475c:	mov	r2, r5
   14760:	add	r1, pc, r1
   14764:	bl	13f58 <__assert_fail@plt+0x27fc>
   14768:	mov	r0, #0
   1476c:	add	sp, sp, #8
   14770:	pop	{r4, r5, r6, pc}
   14774:	mvn	r0, #11
   14778:	b	1470c <__assert_fail@plt+0x2fb0>
   1477c:			; <UNDEFINED> instruction: 0x000137b8
   14780:	andeq	r3, r1, ip, lsr #18
   14784:	andeq	r0, r0, r8, ror r1
   14788:			; <UNDEFINED> instruction: 0x000033bc
   1478c:	muleq	r0, r8, r3
   14790:	muleq	r0, r8, r3
   14794:	andeq	r3, r0, ip, asr #7
   14798:	cmp	r0, #0
   1479c:	ldrne	r0, [r0, #4]
   147a0:	bx	lr
   147a4:	ldr	r3, [pc, #144]	; 1483c <__assert_fail@plt+0x30e0>
   147a8:	add	ip, r0, #4096	; 0x1000
   147ac:	add	r3, pc, r3
   147b0:	str	r1, [ip, #16]
   147b4:	ldr	r3, [r3]
   147b8:	str	r2, [ip, #20]
   147bc:	tst	r3, #4
   147c0:	ldr	r3, [pc, #120]	; 14840 <__assert_fail@plt+0x30e4>
   147c4:	add	r3, pc, r3
   147c8:	bne	147d4 <__assert_fail@plt+0x3078>
   147cc:	mov	r0, #0
   147d0:	bx	lr
   147d4:	ldr	r2, [pc, #104]	; 14844 <__assert_fail@plt+0x30e8>
   147d8:	push	{r4, r5, lr}
   147dc:	sub	sp, sp, #12
   147e0:	ldr	r3, [r3, r2]
   147e4:	mov	r4, r0
   147e8:	ldr	r5, [r3]
   147ec:	bl	1154c <getpid@plt>
   147f0:	ldr	r2, [pc, #80]	; 14848 <__assert_fail@plt+0x30ec>
   147f4:	ldr	r3, [pc, #80]	; 1484c <__assert_fail@plt+0x30f0>
   147f8:	add	r2, pc, r2
   147fc:	str	r2, [sp, #4]
   14800:	ldr	r2, [pc, #72]	; 14850 <__assert_fail@plt+0x30f4>
   14804:	add	r3, pc, r3
   14808:	str	r3, [sp]
   1480c:	add	r2, pc, r2
   14810:	mov	r1, #1
   14814:	mov	r3, r0
   14818:	mov	r0, r5
   1481c:	bl	11648 <__fprintf_chk@plt>
   14820:	ldr	r1, [pc, #44]	; 14854 <__assert_fail@plt+0x30f8>
   14824:	mov	r0, r4
   14828:	add	r1, pc, r1
   1482c:	bl	13f58 <__assert_fail@plt+0x27fc>
   14830:	mov	r0, #0
   14834:	add	sp, sp, #12
   14838:	pop	{r4, r5, pc}
   1483c:	andeq	r3, r1, ip, ror r8
   14840:			; <UNDEFINED> instruction: 0x000136b0
   14844:	andeq	r0, r0, r8, ror r1
   14848:	strdeq	r3, [r0], -r0
   1484c:	andeq	r3, r0, ip, asr #5
   14850:	andeq	r3, r0, ip, asr #5
   14854:	andeq	r3, r0, r4, lsl r3
   14858:	cmp	r0, #0
   1485c:	addne	r0, r0, #4096	; 0x1000
   14860:	ldrne	r0, [r0, #16]
   14864:	bx	lr
   14868:	add	r3, r0, #4096	; 0x1000
   1486c:	mov	r0, #0
   14870:	str	r1, [r3, #24]
   14874:	bx	lr
   14878:	push	{r4, r5, r6, lr}
   1487c:	subs	r4, r0, #0
   14880:	ldr	r5, [pc, #284]	; 149a4 <__assert_fail@plt+0x3248>
   14884:	sub	sp, sp, #8
   14888:	add	r5, pc, r5
   1488c:	beq	14980 <__assert_fail@plt+0x3224>
   14890:	ldr	r3, [r4, #4]
   14894:	cmp	r3, #0
   14898:	beq	1495c <__assert_fail@plt+0x3200>
   1489c:	ldr	r3, [r4]
   148a0:	cmp	r3, #0
   148a4:	blt	148b4 <__assert_fail@plt+0x3158>
   148a8:	mov	r0, r3
   148ac:	add	sp, sp, #8
   148b0:	pop	{r4, r5, r6, pc}
   148b4:	bl	140a4 <__assert_fail@plt+0x2948>
   148b8:	subs	r6, r0, #0
   148bc:	beq	1494c <__assert_fail@plt+0x31f0>
   148c0:	ldr	r3, [pc, #224]	; 149a8 <__assert_fail@plt+0x324c>
   148c4:	add	r3, pc, r3
   148c8:	ldr	r3, [r3]
   148cc:	tst	r3, #4
   148d0:	bne	148f4 <__assert_fail@plt+0x3198>
   148d4:	mov	r0, r6
   148d8:	mov	r1, #524288	; 0x80000
   148dc:	bl	114bc <open64@plt>
   148e0:	mov	r3, r0
   148e4:	str	r0, [r4]
   148e8:	mov	r0, r3
   148ec:	add	sp, sp, #8
   148f0:	pop	{r4, r5, r6, pc}
   148f4:	ldr	r3, [pc, #176]	; 149ac <__assert_fail@plt+0x3250>
   148f8:	ldr	r3, [r5, r3]
   148fc:	ldr	r5, [r3]
   14900:	bl	1154c <getpid@plt>
   14904:	ldr	r2, [pc, #164]	; 149b0 <__assert_fail@plt+0x3254>
   14908:	ldr	r3, [pc, #164]	; 149b4 <__assert_fail@plt+0x3258>
   1490c:	add	r2, pc, r2
   14910:	str	r2, [sp, #4]
   14914:	ldr	r2, [pc, #156]	; 149b8 <__assert_fail@plt+0x325c>
   14918:	add	r3, pc, r3
   1491c:	str	r3, [sp]
   14920:	add	r2, pc, r2
   14924:	mov	r1, #1
   14928:	mov	r3, r0
   1492c:	mov	r0, r5
   14930:	bl	11648 <__fprintf_chk@plt>
   14934:	ldr	r1, [pc, #128]	; 149bc <__assert_fail@plt+0x3260>
   14938:	mov	r2, r6
   1493c:	add	r1, pc, r1
   14940:	mov	r0, r4
   14944:	bl	13f58 <__assert_fail@plt+0x27fc>
   14948:	b	148d4 <__assert_fail@plt+0x3178>
   1494c:	bl	115ac <__errno_location@plt>
   14950:	ldr	r3, [r0]
   14954:	rsb	r3, r3, #0
   14958:	b	148a8 <__assert_fail@plt+0x314c>
   1495c:	ldr	r3, [pc, #92]	; 149c0 <__assert_fail@plt+0x3264>
   14960:	ldr	r1, [pc, #92]	; 149c4 <__assert_fail@plt+0x3268>
   14964:	ldr	r0, [pc, #92]	; 149c8 <__assert_fail@plt+0x326c>
   14968:	add	r3, pc, r3
   1496c:	mov	r2, #201	; 0xc9
   14970:	add	r3, r3, #20
   14974:	add	r1, pc, r1
   14978:	add	r0, pc, r0
   1497c:	bl	1175c <__assert_fail@plt>
   14980:	ldr	r3, [pc, #68]	; 149cc <__assert_fail@plt+0x3270>
   14984:	ldr	r1, [pc, #68]	; 149d0 <__assert_fail@plt+0x3274>
   14988:	ldr	r0, [pc, #68]	; 149d4 <__assert_fail@plt+0x3278>
   1498c:	add	r3, pc, r3
   14990:	mov	r2, #200	; 0xc8
   14994:	add	r3, r3, #20
   14998:	add	r1, pc, r1
   1499c:	add	r0, pc, r0
   149a0:	bl	1175c <__assert_fail@plt>
   149a4:	andeq	r3, r1, ip, ror #11
   149a8:	andeq	r3, r1, r4, ror #14
   149ac:	andeq	r0, r0, r8, ror r1
   149b0:	ldrdeq	r3, [r0], -ip
   149b4:			; <UNDEFINED> instruction: 0x000031b8
   149b8:			; <UNDEFINED> instruction: 0x000031b8
   149bc:	andeq	r3, r0, r4, lsr #4
   149c0:	andeq	r3, r0, r0, ror #1
   149c4:	andeq	r3, r0, r8, lsl #3
   149c8:	ldrdeq	r3, [r0], -r8
   149cc:	strheq	r3, [r0], -ip
   149d0:	andeq	r3, r0, r4, ror #2
   149d4:			; <UNDEFINED> instruction: 0x000031b0
   149d8:	push	{r3}		; (str r3, [sp, #-4]!)
   149dc:	ldr	r3, [pc, #340]	; 14b38 <__assert_fail@plt+0x33dc>
   149e0:	ldr	ip, [pc, #340]	; 14b3c <__assert_fail@plt+0x33e0>
   149e4:	add	r3, pc, r3
   149e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   149ec:	sub	sp, sp, #24
   149f0:	ldr	r8, [r3, ip]
   149f4:	ldr	r7, [sp, #52]	; 0x34
   149f8:	mov	r6, r2
   149fc:	ldr	r2, [r8]
   14a00:	cmp	r7, #0
   14a04:	mov	r4, r1
   14a08:	str	r2, [sp, #20]
   14a0c:	beq	14af8 <__assert_fail@plt+0x339c>
   14a10:	add	r3, sp, #56	; 0x38
   14a14:	ldr	r5, [r0, #4]
   14a18:	mov	r1, r7
   14a1c:	mov	r2, r3
   14a20:	mov	r9, r0
   14a24:	str	r3, [sp, #16]
   14a28:	bl	1414c <__assert_fail@plt+0x29f0>
   14a2c:	cmp	r5, #0
   14a30:	beq	14a40 <__assert_fail@plt+0x32e4>
   14a34:	ldrsb	r3, [r5]
   14a38:	cmp	r3, #47	; 0x2f
   14a3c:	addeq	r5, r5, #1
   14a40:	cmp	r0, #0
   14a44:	beq	14a54 <__assert_fail@plt+0x32f8>
   14a48:	ldrsb	r3, [r0]
   14a4c:	cmp	r3, #47	; 0x2f
   14a50:	addeq	r0, r0, #1
   14a54:	ldr	r2, [r9, #12]
   14a58:	cmp	r2, #0
   14a5c:	beq	14ae4 <__assert_fail@plt+0x3388>
   14a60:	cmp	r5, #0
   14a64:	beq	14ad0 <__assert_fail@plt+0x3374>
   14a68:	cmp	r0, #0
   14a6c:	beq	14ac4 <__assert_fail@plt+0x3368>
   14a70:	ldr	r3, [pc, #200]	; 14b40 <__assert_fail@plt+0x33e4>
   14a74:	str	r0, [sp, #12]
   14a78:	add	r3, pc, r3
   14a7c:	stmib	sp, {r2, r5}
   14a80:	str	r3, [sp]
   14a84:	mov	r2, #1
   14a88:	mvn	r3, #0
   14a8c:	mov	r1, r6
   14a90:	mov	r0, r4
   14a94:	bl	11744 <__snprintf_chk@plt>
   14a98:	cmp	r0, r6
   14a9c:	bcs	14b20 <__assert_fail@plt+0x33c4>
   14aa0:	ldr	r2, [sp, #20]
   14aa4:	ldr	r3, [r8]
   14aa8:	mov	r0, r4
   14aac:	cmp	r2, r3
   14ab0:	bne	14b34 <__assert_fail@plt+0x33d8>
   14ab4:	add	sp, sp, #24
   14ab8:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14abc:	add	sp, sp, #4
   14ac0:	bx	lr
   14ac4:	ldr	r0, [pc, #120]	; 14b44 <__assert_fail@plt+0x33e8>
   14ac8:	add	r0, pc, r0
   14acc:	b	14a70 <__assert_fail@plt+0x3314>
   14ad0:	ldr	r5, [pc, #112]	; 14b48 <__assert_fail@plt+0x33ec>
   14ad4:	cmp	r0, #0
   14ad8:	add	r5, pc, r5
   14adc:	bne	14a70 <__assert_fail@plt+0x3314>
   14ae0:	b	14ac4 <__assert_fail@plt+0x3368>
   14ae4:	ldr	r2, [pc, #96]	; 14b4c <__assert_fail@plt+0x33f0>
   14ae8:	cmp	r5, #0
   14aec:	add	r2, pc, r2
   14af0:	bne	14a68 <__assert_fail@plt+0x330c>
   14af4:	b	14ad0 <__assert_fail@plt+0x3374>
   14af8:	bl	140a4 <__assert_fail@plt+0x2948>
   14afc:	subs	r1, r0, #0
   14b00:	moveq	r4, r1
   14b04:	beq	14aa0 <__assert_fail@plt+0x3344>
   14b08:	mov	r2, r6
   14b0c:	add	r6, r4, r6
   14b10:	mov	r0, r4
   14b14:	bl	11600 <strncpy@plt>
   14b18:	strb	r7, [r6, #-1]
   14b1c:	b	14aa0 <__assert_fail@plt+0x3344>
   14b20:	bl	115ac <__errno_location@plt>
   14b24:	mov	r3, #36	; 0x24
   14b28:	mov	r4, #0
   14b2c:	str	r3, [r0]
   14b30:	b	14aa0 <__assert_fail@plt+0x3344>
   14b34:	bl	11444 <__stack_chk_fail@plt>
   14b38:	muleq	r1, r0, r4
   14b3c:	andeq	r0, r0, r4, ror r1
   14b40:	strdeq	r3, [r0], -ip
   14b44:	andeq	r3, r0, r4
   14b48:	strdeq	r2, [r0], -r4
   14b4c:	andeq	r2, r0, r0, ror #31
   14b50:	push	{r4, r5, r6, r7, r8, r9, lr}
   14b54:	sub	sp, sp, #20
   14b58:	ldr	r5, [pc, #296]	; 14c88 <__assert_fail@plt+0x352c>
   14b5c:	ldr	r3, [pc, #296]	; 14c8c <__assert_fail@plt+0x3530>
   14b60:	add	r5, pc, r5
   14b64:	mov	r8, r1
   14b68:	ldr	r6, [r5, r3]
   14b6c:	mov	r7, r2
   14b70:	mov	r9, r0
   14b74:	ldr	r3, [r6]
   14b78:	str	r3, [sp, #12]
   14b7c:	bl	14878 <__assert_fail@plt+0x311c>
   14b80:	subs	r4, r0, #0
   14b84:	str	r0, [sp, #8]
   14b88:	blt	14bbc <__assert_fail@plt+0x3460>
   14b8c:	ldr	r3, [pc, #252]	; 14c90 <__assert_fail@plt+0x3534>
   14b90:	add	r3, pc, r3
   14b94:	ldr	r3, [r3]
   14b98:	tst	r3, #4
   14b9c:	bne	14c28 <__assert_fail@plt+0x34cc>
   14ba0:	mov	r0, r4
   14ba4:	mov	r3, #0
   14ba8:	mov	r2, r8
   14bac:	mov	r1, r7
   14bb0:	bl	113c0 <faccessat@plt>
   14bb4:	subs	r4, r0, #0
   14bb8:	bne	14bd8 <__assert_fail@plt+0x347c>
   14bbc:	ldr	r2, [sp, #12]
   14bc0:	ldr	r3, [r6]
   14bc4:	mov	r0, r4
   14bc8:	cmp	r2, r3
   14bcc:	bne	14c84 <__assert_fail@plt+0x3528>
   14bd0:	add	sp, sp, #20
   14bd4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14bd8:	bl	115ac <__errno_location@plt>
   14bdc:	ldr	r3, [r0]
   14be0:	cmp	r3, #2
   14be4:	bne	14bbc <__assert_fail@plt+0x3460>
   14be8:	add	r3, r9, #4096	; 0x1000
   14bec:	ldr	r3, [r3, #24]
   14bf0:	cmp	r3, #0
   14bf4:	beq	14bbc <__assert_fail@plt+0x3460>
   14bf8:	mov	r0, r9
   14bfc:	add	r2, sp, #8
   14c00:	mov	r1, r7
   14c04:	blx	r3
   14c08:	subs	r3, r0, #0
   14c0c:	bne	14bbc <__assert_fail@plt+0x3460>
   14c10:	mov	r2, r8
   14c14:	mov	r1, r7
   14c18:	ldr	r0, [sp, #8]
   14c1c:	bl	113c0 <faccessat@plt>
   14c20:	mov	r4, r0
   14c24:	b	14bbc <__assert_fail@plt+0x3460>
   14c28:	ldr	r3, [pc, #100]	; 14c94 <__assert_fail@plt+0x3538>
   14c2c:	ldr	r3, [r5, r3]
   14c30:	ldr	r4, [r3]
   14c34:	bl	1154c <getpid@plt>
   14c38:	ldr	r2, [pc, #88]	; 14c98 <__assert_fail@plt+0x353c>
   14c3c:	ldr	r3, [pc, #88]	; 14c9c <__assert_fail@plt+0x3540>
   14c40:	add	r2, pc, r2
   14c44:	str	r2, [sp, #4]
   14c48:	ldr	r2, [pc, #80]	; 14ca0 <__assert_fail@plt+0x3544>
   14c4c:	add	r3, pc, r3
   14c50:	str	r3, [sp]
   14c54:	add	r2, pc, r2
   14c58:	mov	r1, #1
   14c5c:	mov	r3, r0
   14c60:	mov	r0, r4
   14c64:	bl	11648 <__fprintf_chk@plt>
   14c68:	ldr	r1, [pc, #52]	; 14ca4 <__assert_fail@plt+0x3548>
   14c6c:	mov	r2, r7
   14c70:	add	r1, pc, r1
   14c74:	mov	r0, r9
   14c78:	bl	13f58 <__assert_fail@plt+0x27fc>
   14c7c:	ldr	r4, [sp, #8]
   14c80:	b	14ba0 <__assert_fail@plt+0x3444>
   14c84:	bl	11444 <__stack_chk_fail@plt>
   14c88:	andeq	r3, r1, r4, lsl r3
   14c8c:	andeq	r0, r0, r4, ror r1
   14c90:	muleq	r1, r8, r4
   14c94:	andeq	r0, r0, r8, ror r1
   14c98:	andeq	r2, r0, r8, lsr #29
   14c9c:	andeq	r2, r0, r4, lsl #29
   14ca0:	andeq	r2, r0, r4, lsl #29
   14ca4:	andeq	r2, r0, r0, lsl pc
   14ca8:	push	{r2, r3}
   14cac:	ldr	r3, [pc, #104]	; 14d1c <__assert_fail@plt+0x35c0>
   14cb0:	ldr	r2, [pc, #104]	; 14d20 <__assert_fail@plt+0x35c4>
   14cb4:	add	r3, pc, r3
   14cb8:	push	{r4, r5, r6, lr}
   14cbc:	sub	sp, sp, #8
   14cc0:	ldr	r4, [r3, r2]
   14cc4:	add	ip, sp, #28
   14cc8:	mov	r2, ip
   14ccc:	ldr	r3, [r4]
   14cd0:	mov	r6, r1
   14cd4:	ldr	r1, [sp, #24]
   14cd8:	str	r3, [sp, #4]
   14cdc:	mov	r5, r0
   14ce0:	str	ip, [sp]
   14ce4:	bl	1414c <__assert_fail@plt+0x29f0>
   14ce8:	mov	r1, r6
   14cec:	mov	r2, r0
   14cf0:	mov	r0, r5
   14cf4:	bl	14b50 <__assert_fail@plt+0x33f4>
   14cf8:	ldr	r2, [sp, #4]
   14cfc:	ldr	r3, [r4]
   14d00:	cmp	r2, r3
   14d04:	bne	14d18 <__assert_fail@plt+0x35bc>
   14d08:	add	sp, sp, #8
   14d0c:	pop	{r4, r5, r6, lr}
   14d10:	add	sp, sp, #8
   14d14:	bx	lr
   14d18:	bl	11444 <__stack_chk_fail@plt>
   14d1c:	andeq	r3, r1, r0, asr #3
   14d20:	andeq	r0, r0, r4, ror r1
   14d24:	push	{r4, r5, r6, r7, r8, r9, lr}
   14d28:	sub	sp, sp, #20
   14d2c:	ldr	r5, [pc, #536]	; 14f4c <__assert_fail@plt+0x37f0>
   14d30:	ldr	r3, [pc, #536]	; 14f50 <__assert_fail@plt+0x37f4>
   14d34:	add	r5, pc, r5
   14d38:	subs	r8, r0, #0
   14d3c:	ldr	r6, [r5, r3]
   14d40:	mov	r7, r2
   14d44:	ldr	r3, [r6]
   14d48:	str	r3, [sp, #12]
   14d4c:	beq	14dac <__assert_fail@plt+0x3650>
   14d50:	mov	r9, r1
   14d54:	bl	14878 <__assert_fail@plt+0x311c>
   14d58:	cmp	r0, #0
   14d5c:	mov	r4, r0
   14d60:	str	r0, [sp, #8]
   14d64:	blt	14d90 <__assert_fail@plt+0x3634>
   14d68:	mov	r2, r9
   14d6c:	mov	r1, r7
   14d70:	bl	113e4 <__openat64_2@plt>
   14d74:	subs	r4, r0, #0
   14d78:	blt	14e20 <__assert_fail@plt+0x36c4>
   14d7c:	ldr	r3, [pc, #464]	; 14f54 <__assert_fail@plt+0x37f8>
   14d80:	add	r3, pc, r3
   14d84:	ldr	r3, [r3]
   14d88:	tst	r3, #4
   14d8c:	bne	14ed8 <__assert_fail@plt+0x377c>
   14d90:	ldr	r2, [sp, #12]
   14d94:	ldr	r3, [r6]
   14d98:	mov	r0, r4
   14d9c:	cmp	r2, r3
   14da0:	bne	14f40 <__assert_fail@plt+0x37e4>
   14da4:	add	sp, sp, #20
   14da8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14dac:	mov	r0, r2
   14db0:	bl	115a0 <__open64_2@plt>
   14db4:	ldr	r3, [pc, #412]	; 14f58 <__assert_fail@plt+0x37fc>
   14db8:	add	r3, pc, r3
   14dbc:	ldr	r3, [r3]
   14dc0:	tst	r3, #4
   14dc4:	mov	r4, r0
   14dc8:	beq	14d90 <__assert_fail@plt+0x3634>
   14dcc:	ldr	r3, [pc, #392]	; 14f5c <__assert_fail@plt+0x3800>
   14dd0:	ldr	r3, [r5, r3]
   14dd4:	ldr	r5, [r3]
   14dd8:	bl	1154c <getpid@plt>
   14ddc:	ldr	r2, [pc, #380]	; 14f60 <__assert_fail@plt+0x3804>
   14de0:	ldr	r3, [pc, #380]	; 14f64 <__assert_fail@plt+0x3808>
   14de4:	add	r2, pc, r2
   14de8:	str	r2, [sp, #4]
   14dec:	ldr	r2, [pc, #372]	; 14f68 <__assert_fail@plt+0x380c>
   14df0:	add	r3, pc, r3
   14df4:	str	r3, [sp]
   14df8:	add	r2, pc, r2
   14dfc:	mov	r1, #1
   14e00:	mov	r3, r0
   14e04:	mov	r0, r5
   14e08:	bl	11648 <__fprintf_chk@plt>
   14e0c:	ldr	r0, [pc, #344]	; 14f6c <__assert_fail@plt+0x3810>
   14e10:	mov	r1, r7
   14e14:	add	r0, pc, r0
   14e18:	bl	14024 <__assert_fail@plt+0x28c8>
   14e1c:	b	14d90 <__assert_fail@plt+0x3634>
   14e20:	bl	115ac <__errno_location@plt>
   14e24:	ldr	r3, [r0]
   14e28:	cmp	r3, #2
   14e2c:	bne	14d7c <__assert_fail@plt+0x3620>
   14e30:	add	r3, r8, #4096	; 0x1000
   14e34:	ldr	r3, [r3, #24]
   14e38:	cmp	r3, #0
   14e3c:	beq	14d7c <__assert_fail@plt+0x3620>
   14e40:	add	r2, sp, #8
   14e44:	mov	r1, r7
   14e48:	mov	r0, r8
   14e4c:	blx	r3
   14e50:	cmp	r0, #0
   14e54:	bne	14d7c <__assert_fail@plt+0x3620>
   14e58:	mov	r2, r9
   14e5c:	mov	r1, r7
   14e60:	ldr	r0, [sp, #8]
   14e64:	bl	113e4 <__openat64_2@plt>
   14e68:	ldr	r3, [pc, #256]	; 14f70 <__assert_fail@plt+0x3814>
   14e6c:	add	r3, pc, r3
   14e70:	ldr	r3, [r3]
   14e74:	tst	r3, #4
   14e78:	mov	r9, r0
   14e7c:	beq	14f44 <__assert_fail@plt+0x37e8>
   14e80:	ldr	r3, [pc, #212]	; 14f5c <__assert_fail@plt+0x3800>
   14e84:	ldr	r3, [r5, r3]
   14e88:	ldr	r5, [r3]
   14e8c:	bl	1154c <getpid@plt>
   14e90:	ldr	r2, [pc, #220]	; 14f74 <__assert_fail@plt+0x3818>
   14e94:	ldr	r3, [pc, #220]	; 14f78 <__assert_fail@plt+0x381c>
   14e98:	add	r2, pc, r2
   14e9c:	str	r2, [sp, #4]
   14ea0:	ldr	r2, [pc, #212]	; 14f7c <__assert_fail@plt+0x3820>
   14ea4:	add	r3, pc, r3
   14ea8:	str	r3, [sp]
   14eac:	add	r2, pc, r2
   14eb0:	mov	r1, #1
   14eb4:	mov	r3, r0
   14eb8:	mov	r0, r5
   14ebc:	bl	11648 <__fprintf_chk@plt>
   14ec0:	ldr	r3, [pc, #184]	; 14f80 <__assert_fail@plt+0x3824>
   14ec4:	cmp	r4, r9
   14ec8:	add	r3, pc, r3
   14ecc:	ldrne	r3, [pc, #176]	; 14f84 <__assert_fail@plt+0x3828>
   14ed0:	addne	r3, pc, r3
   14ed4:	b	14f24 <__assert_fail@plt+0x37c8>
   14ed8:	ldr	r3, [pc, #124]	; 14f5c <__assert_fail@plt+0x3800>
   14edc:	mov	r9, r4
   14ee0:	ldr	r3, [r5, r3]
   14ee4:	ldr	r4, [r3]
   14ee8:	bl	1154c <getpid@plt>
   14eec:	ldr	r2, [pc, #148]	; 14f88 <__assert_fail@plt+0x382c>
   14ef0:	ldr	r3, [pc, #148]	; 14f8c <__assert_fail@plt+0x3830>
   14ef4:	add	r2, pc, r2
   14ef8:	str	r2, [sp, #4]
   14efc:	ldr	r2, [pc, #140]	; 14f90 <__assert_fail@plt+0x3834>
   14f00:	add	r3, pc, r3
   14f04:	str	r3, [sp]
   14f08:	add	r2, pc, r2
   14f0c:	mov	r1, #1
   14f10:	mov	r3, r0
   14f14:	mov	r0, r4
   14f18:	bl	11648 <__fprintf_chk@plt>
   14f1c:	ldr	r3, [pc, #112]	; 14f94 <__assert_fail@plt+0x3838>
   14f20:	add	r3, pc, r3
   14f24:	ldr	r1, [pc, #108]	; 14f98 <__assert_fail@plt+0x383c>
   14f28:	mov	r2, r7
   14f2c:	mov	r0, r8
   14f30:	add	r1, pc, r1
   14f34:	mov	r4, r9
   14f38:	bl	13f58 <__assert_fail@plt+0x27fc>
   14f3c:	b	14d90 <__assert_fail@plt+0x3634>
   14f40:	bl	11444 <__stack_chk_fail@plt>
   14f44:	mov	r4, r0
   14f48:	b	14d90 <__assert_fail@plt+0x3634>
   14f4c:	andeq	r3, r1, r0, asr #2
   14f50:	andeq	r0, r0, r4, ror r1
   14f54:	andeq	r3, r1, r8, lsr #5
   14f58:	andeq	r3, r1, r0, ror r2
   14f5c:	andeq	r0, r0, r8, ror r1
   14f60:	andeq	r2, r0, r4, lsl #26
   14f64:	andeq	r2, r0, r0, ror #25
   14f68:	andeq	r2, r0, r0, ror #25
   14f6c:	andeq	r2, r0, ip, lsl #27
   14f70:			; <UNDEFINED> instruction: 0x000131bc
   14f74:	andeq	r2, r0, r0, asr ip
   14f78:	andeq	r2, r0, ip, lsr #24
   14f7c:	andeq	r2, r0, ip, lsr #24
   14f80:	andeq	r2, r0, r4, lsl #24
   14f84:	andeq	r2, r0, r0, asr #25
   14f88:	strdeq	r2, [r0], -r4
   14f8c:	ldrdeq	r2, [r0], -r0
   14f90:	ldrdeq	r2, [r0], -r0
   14f94:	andeq	r2, r0, ip, lsr #23
   14f98:	andeq	r2, r0, r0, lsl #25
   14f9c:	mov	ip, r2
   14fa0:	push	{r4, r5, r6, lr}
   14fa4:	mov	r2, r3
   14fa8:	mov	r5, r1
   14fac:	mov	r1, ip
   14fb0:	mov	r4, r0
   14fb4:	bl	1414c <__assert_fail@plt+0x29f0>
   14fb8:	subs	r2, r0, #0
   14fbc:	beq	14fd0 <__assert_fail@plt+0x3874>
   14fc0:	mov	r1, r5
   14fc4:	mov	r0, r4
   14fc8:	pop	{r4, r5, r6, lr}
   14fcc:	b	14d24 <__assert_fail@plt+0x35c8>
   14fd0:	bl	115ac <__errno_location@plt>
   14fd4:	ldr	r0, [r0]
   14fd8:	rsb	r0, r0, #0
   14fdc:	pop	{r4, r5, r6, pc}
   14fe0:	push	{r2, r3}
   14fe4:	ldr	r2, [pc, #80]	; 1503c <__assert_fail@plt+0x38e0>
   14fe8:	ldr	ip, [pc, #80]	; 15040 <__assert_fail@plt+0x38e4>
   14fec:	add	r2, pc, r2
   14ff0:	push	{r4, lr}
   14ff4:	sub	sp, sp, #8
   14ff8:	ldr	r4, [r2, ip]
   14ffc:	add	lr, sp, #20
   15000:	mov	r3, lr
   15004:	ldr	ip, [r4]
   15008:	ldr	r2, [sp, #16]
   1500c:	str	lr, [sp]
   15010:	str	ip, [sp, #4]
   15014:	bl	14f9c <__assert_fail@plt+0x3840>
   15018:	ldr	r2, [sp, #4]
   1501c:	ldr	r3, [r4]
   15020:	cmp	r2, r3
   15024:	bne	15038 <__assert_fail@plt+0x38dc>
   15028:	add	sp, sp, #8
   1502c:	pop	{r4, lr}
   15030:	add	sp, sp, #8
   15034:	bx	lr
   15038:	bl	11444 <__stack_chk_fail@plt>
   1503c:	andeq	r2, r1, r8, lsl #29
   15040:	andeq	r0, r0, r4, ror r1
   15044:	push	{r4, r5, r6, r7, r8, lr}
   15048:	subs	r4, r1, #0
   1504c:	beq	15108 <__assert_fail@plt+0x39ac>
   15050:	ldrsb	r3, [r4]
   15054:	cmp	r3, #0
   15058:	beq	15110 <__assert_fail@plt+0x39b4>
   1505c:	ldr	r5, [pc, #180]	; 15118 <__assert_fail@plt+0x39bc>
   15060:	ldr	r7, [pc, #180]	; 1511c <__assert_fail@plt+0x39c0>
   15064:	ldr	lr, [pc, #180]	; 15120 <__assert_fail@plt+0x39c4>
   15068:	ldr	r6, [pc, #180]	; 15124 <__assert_fail@plt+0x39c8>
   1506c:	mov	ip, r4
   15070:	mov	r1, #0
   15074:	b	150a4 <__assert_fail@plt+0x3948>
   15078:	cmp	r3, #119	; 0x77
   1507c:	beq	150d8 <__assert_fail@plt+0x397c>
   15080:	cmp	r3, #97	; 0x61
   15084:	beq	150ec <__assert_fail@plt+0x3990>
   15088:	cmp	r3, #101	; 0x65
   1508c:	orreq	r1, r1, #524288	; 0x80000
   15090:	cmn	ip, #1
   15094:	beq	150c0 <__assert_fail@plt+0x3964>
   15098:	ldrsb	r3, [ip, #1]!
   1509c:	cmp	r3, #0
   150a0:	beq	150c0 <__assert_fail@plt+0x3964>
   150a4:	cmp	r3, #114	; 0x72
   150a8:	bne	15078 <__assert_fail@plt+0x391c>
   150ac:	ldrsb	r3, [ip, #1]
   150b0:	cmp	r3, #43	; 0x2b
   150b4:	orreq	r1, r1, #2
   150b8:	cmn	ip, #1
   150bc:	bne	15098 <__assert_fail@plt+0x393c>
   150c0:	bl	14d24 <__assert_fail@plt+0x35c8>
   150c4:	cmp	r0, #0
   150c8:	blt	15100 <__assert_fail@plt+0x39a4>
   150cc:	mov	r1, r4
   150d0:	pop	{r4, r5, r6, r7, r8, lr}
   150d4:	b	11330 <fdopen@plt>
   150d8:	ldrsb	r3, [ip, #1]
   150dc:	cmp	r3, #43	; 0x2b
   150e0:	orreq	r1, r1, r6
   150e4:	orrne	r1, r1, lr
   150e8:	b	15090 <__assert_fail@plt+0x3934>
   150ec:	ldrsb	r3, [ip, #1]
   150f0:	cmp	r3, #43	; 0x2b
   150f4:	orreq	r1, r1, r7
   150f8:	orrne	r1, r1, r5
   150fc:	b	15090 <__assert_fail@plt+0x3934>
   15100:	mov	r0, #0
   15104:	pop	{r4, r5, r6, r7, r8, pc}
   15108:	mov	r1, r4
   1510c:	b	150c0 <__assert_fail@plt+0x3964>
   15110:	mov	r1, r3
   15114:	b	150c0 <__assert_fail@plt+0x3964>
   15118:	andeq	r0, r0, r1, lsl #8
   1511c:	andeq	r0, r0, r2, lsl #8
   15120:	andeq	r0, r0, r1, lsl #4
   15124:	andeq	r0, r0, r2, lsl #4
   15128:	mov	ip, r2
   1512c:	push	{r4, r5, r6, lr}
   15130:	mov	r2, r3
   15134:	mov	r5, r1
   15138:	mov	r1, ip
   1513c:	mov	r4, r0
   15140:	bl	1414c <__assert_fail@plt+0x29f0>
   15144:	subs	r2, r0, #0
   15148:	popeq	{r4, r5, r6, pc}
   1514c:	mov	r1, r5
   15150:	mov	r0, r4
   15154:	pop	{r4, r5, r6, lr}
   15158:	b	15044 <__assert_fail@plt+0x38e8>
   1515c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15160:	add	fp, sp, #32
   15164:	ldr	lr, [pc, #300]	; 15298 <__assert_fail@plt+0x3b3c>
   15168:	ldr	ip, [pc, #300]	; 1529c <__assert_fail@plt+0x3b40>
   1516c:	add	lr, pc, lr
   15170:	sub	sp, sp, #20
   15174:	ldr	ip, [lr, ip]
   15178:	rsb	r6, r2, r2, lsl #3
   1517c:	mov	r7, r1
   15180:	mov	r4, r2
   15184:	mov	r1, lr
   15188:	add	r2, r6, #7
   1518c:	ldr	r1, [pc, #268]	; 152a0 <__assert_fail@plt+0x3b44>
   15190:	str	ip, [fp, #-48]	; 0xffffffd0
   15194:	bic	r2, r2, #7
   15198:	ldr	ip, [ip]
   1519c:	mov	r8, #0
   151a0:	sub	sp, sp, r2
   151a4:	mov	r9, r3
   151a8:	str	r8, [r7]
   151ac:	ldrd	r2, [fp, #4]
   151b0:	add	r1, pc, r1
   151b4:	str	ip, [fp, #-40]	; 0xffffffd8
   151b8:	bl	15128 <__assert_fail@plt+0x39cc>
   151bc:	subs	r5, r0, #0
   151c0:	beq	1527c <__assert_fail@plt+0x3b20>
   151c4:	mov	r1, r6
   151c8:	mov	r2, r5
   151cc:	mov	r0, sp
   151d0:	bl	113a8 <fgets@plt>
   151d4:	cmp	r0, #0
   151d8:	beq	1527c <__assert_fail@plt+0x3b20>
   151dc:	mov	r0, r5
   151e0:	bl	11654 <fclose@plt>
   151e4:	mov	r0, sp
   151e8:	bl	1157c <strlen@plt>
   151ec:	mov	r2, #0
   151f0:	sub	r1, fp, #44	; 0x2c
   151f4:	mov	sl, sp
   151f8:	sub	r0, r0, #1
   151fc:	ldrsb	r3, [sp, r0]
   15200:	cmp	r3, #10
   15204:	strbeq	r8, [sp, r0]
   15208:	mov	r0, r4
   1520c:	bl	16c08 <__assert_fail@plt+0x54ac>
   15210:	cmp	r0, #0
   15214:	str	r0, [r7]
   15218:	beq	1528c <__assert_fail@plt+0x3b30>
   1521c:	cmp	r9, #0
   15220:	mov	r1, r0
   15224:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15228:	mov	r0, sl
   1522c:	bne	1525c <__assert_fail@plt+0x3b00>
   15230:	bl	17038 <__assert_fail@plt+0x58dc>
   15234:	cmp	r0, #0
   15238:	bne	1526c <__assert_fail@plt+0x3b10>
   1523c:	mov	r0, #0
   15240:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15244:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15248:	ldr	r3, [r3]
   1524c:	cmp	r2, r3
   15250:	bne	15294 <__assert_fail@plt+0x3b38>
   15254:	sub	sp, fp, #32
   15258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1525c:	mov	r3, #0
   15260:	bl	17190 <__assert_fail@plt+0x5a34>
   15264:	cmp	r0, #0
   15268:	beq	1523c <__assert_fail@plt+0x3ae0>
   1526c:	ldr	r0, [r7]
   15270:	bl	16c4c <__assert_fail@plt+0x54f0>
   15274:	mvn	r0, #21
   15278:	b	15240 <__assert_fail@plt+0x3ae4>
   1527c:	bl	115ac <__errno_location@plt>
   15280:	ldr	r0, [r0]
   15284:	rsb	r0, r0, #0
   15288:	b	15240 <__assert_fail@plt+0x3ae4>
   1528c:	mvn	r0, #11
   15290:	b	15240 <__assert_fail@plt+0x3ae4>
   15294:	bl	11444 <__stack_chk_fail@plt>
   15298:	andeq	r2, r1, r8, lsl #26
   1529c:	andeq	r0, r0, r4, ror r1
   152a0:	andeq	r2, r0, r0, lsl sl
   152a4:	push	{r2, r3}
   152a8:	ldr	r2, [pc, #80]	; 15300 <__assert_fail@plt+0x3ba4>
   152ac:	ldr	ip, [pc, #80]	; 15304 <__assert_fail@plt+0x3ba8>
   152b0:	add	r2, pc, r2
   152b4:	push	{r4, lr}
   152b8:	sub	sp, sp, #8
   152bc:	ldr	r4, [r2, ip]
   152c0:	add	lr, sp, #20
   152c4:	mov	r3, lr
   152c8:	ldr	ip, [r4]
   152cc:	ldr	r2, [sp, #16]
   152d0:	str	lr, [sp]
   152d4:	str	ip, [sp, #4]
   152d8:	bl	15128 <__assert_fail@plt+0x39cc>
   152dc:	ldr	r2, [sp, #4]
   152e0:	ldr	r3, [r4]
   152e4:	cmp	r2, r3
   152e8:	bne	152fc <__assert_fail@plt+0x3ba0>
   152ec:	add	sp, sp, #8
   152f0:	pop	{r4, lr}
   152f4:	add	sp, sp, #8
   152f8:	bx	lr
   152fc:	bl	11444 <__stack_chk_fail@plt>
   15300:	andeq	r2, r1, r4, asr #23
   15304:	andeq	r0, r0, r4, ror r1
   15308:	ldr	r3, [pc, #268]	; 1541c <__assert_fail@plt+0x3cc0>
   1530c:	push	{r4, r5, r6, lr}
   15310:	subs	r5, r1, #0
   15314:	sub	sp, sp, #8
   15318:	add	r3, pc, r3
   1531c:	beq	1535c <__assert_fail@plt+0x3c00>
   15320:	mov	r2, r5
   15324:	mov	r1, #524288	; 0x80000
   15328:	bl	14d24 <__assert_fail@plt+0x35c8>
   1532c:	mov	r4, r0
   15330:	cmp	r4, #0
   15334:	blt	1539c <__assert_fail@plt+0x3c40>
   15338:	mov	r0, r4
   1533c:	bl	116cc <fdopendir@plt>
   15340:	subs	r6, r0, #0
   15344:	beq	15410 <__assert_fail@plt+0x3cb4>
   15348:	cmp	r5, #0
   1534c:	beq	15400 <__assert_fail@plt+0x3ca4>
   15350:	mov	r0, r6
   15354:	add	sp, sp, #8
   15358:	pop	{r4, r5, r6, pc}
   1535c:	ldr	r2, [r0, #4]
   15360:	mov	r4, r0
   15364:	cmp	r2, #0
   15368:	beq	1539c <__assert_fail@plt+0x3c40>
   1536c:	ldr	r2, [pc, #172]	; 15420 <__assert_fail@plt+0x3cc4>
   15370:	add	r2, pc, r2
   15374:	ldr	r2, [r2]
   15378:	tst	r2, #4
   1537c:	bne	153ac <__assert_fail@plt+0x3c50>
   15380:	mov	r0, r4
   15384:	bl	14878 <__assert_fail@plt+0x311c>
   15388:	mov	r1, #3
   1538c:	bl	16a48 <__assert_fail@plt+0x52ec>
   15390:	mov	r4, r0
   15394:	cmp	r4, #0
   15398:	bge	15338 <__assert_fail@plt+0x3bdc>
   1539c:	mov	r6, #0
   153a0:	mov	r0, r6
   153a4:	add	sp, sp, #8
   153a8:	pop	{r4, r5, r6, pc}
   153ac:	ldr	r2, [pc, #112]	; 15424 <__assert_fail@plt+0x3cc8>
   153b0:	ldr	r3, [r3, r2]
   153b4:	ldr	r6, [r3]
   153b8:	bl	1154c <getpid@plt>
   153bc:	ldr	r2, [pc, #100]	; 15428 <__assert_fail@plt+0x3ccc>
   153c0:	ldr	r3, [pc, #100]	; 1542c <__assert_fail@plt+0x3cd0>
   153c4:	add	r2, pc, r2
   153c8:	str	r2, [sp, #4]
   153cc:	ldr	r2, [pc, #92]	; 15430 <__assert_fail@plt+0x3cd4>
   153d0:	add	r3, pc, r3
   153d4:	str	r3, [sp]
   153d8:	add	r2, pc, r2
   153dc:	mov	r1, #1
   153e0:	mov	r3, r0
   153e4:	mov	r0, r6
   153e8:	bl	11648 <__fprintf_chk@plt>
   153ec:	ldr	r1, [pc, #64]	; 15434 <__assert_fail@plt+0x3cd8>
   153f0:	mov	r0, r4
   153f4:	add	r1, pc, r1
   153f8:	bl	13f58 <__assert_fail@plt+0x27fc>
   153fc:	b	15380 <__assert_fail@plt+0x3c24>
   15400:	bl	11360 <rewinddir@plt>
   15404:	mov	r0, r6
   15408:	add	sp, sp, #8
   1540c:	pop	{r4, r5, r6, pc}
   15410:	mov	r0, r4
   15414:	bl	1172c <close@plt>
   15418:	b	15350 <__assert_fail@plt+0x3bf4>
   1541c:	andeq	r2, r1, ip, asr fp
   15420:			; <UNDEFINED> instruction: 0x00012cb8
   15424:	andeq	r0, r0, r8, ror r1
   15428:	andeq	r2, r0, r4, lsr #14
   1542c:	andeq	r2, r0, r0, lsl #14
   15430:	andeq	r2, r0, r0, lsl #14
   15434:	ldrdeq	r2, [r0], -r0
   15438:	push	{r4, lr}
   1543c:	mov	r4, r0
   15440:	bl	1414c <__assert_fail@plt+0x29f0>
   15444:	subs	r1, r0, #0
   15448:	popeq	{r4, pc}
   1544c:	mov	r0, r4
   15450:	pop	{r4, lr}
   15454:	b	15308 <__assert_fail@plt+0x3bac>
   15458:	push	{r1, r2, r3}
   1545c:	ldr	r3, [pc, #80]	; 154b4 <__assert_fail@plt+0x3d58>
   15460:	ldr	r1, [pc, #80]	; 154b8 <__assert_fail@plt+0x3d5c>
   15464:	add	r3, pc, r3
   15468:	push	{r4, lr}
   1546c:	sub	sp, sp, #12
   15470:	ldr	r4, [r3, r1]
   15474:	add	ip, sp, #24
   15478:	mov	r2, ip
   1547c:	ldr	r3, [r4]
   15480:	ldr	r1, [sp, #20]
   15484:	str	r3, [sp, #4]
   15488:	str	ip, [sp]
   1548c:	bl	15438 <__assert_fail@plt+0x3cdc>
   15490:	ldr	r2, [sp, #4]
   15494:	ldr	r3, [r4]
   15498:	cmp	r2, r3
   1549c:	bne	154b0 <__assert_fail@plt+0x3d54>
   154a0:	add	sp, sp, #12
   154a4:	pop	{r4, lr}
   154a8:	add	sp, sp, #12
   154ac:	bx	lr
   154b0:	bl	11444 <__stack_chk_fail@plt>
   154b4:	andeq	r2, r1, r0, lsl sl
   154b8:	andeq	r0, r0, r4, ror r1
   154bc:	push	{r4, r5, r6, lr}
   154c0:	subs	r6, r3, #0
   154c4:	mov	r4, r1
   154c8:	mov	r5, r2
   154cc:	beq	154f0 <__assert_fail@plt+0x3d94>
   154d0:	bl	14878 <__assert_fail@plt+0x311c>
   154d4:	subs	r3, r0, #0
   154d8:	blt	15518 <__assert_fail@plt+0x3dbc>
   154dc:	mov	r3, r5
   154e0:	mov	r2, r4
   154e4:	mov	r1, r6
   154e8:	pop	{r4, r5, r6, lr}
   154ec:	b	114f8 <readlinkat@plt>
   154f0:	bl	140a4 <__assert_fail@plt+0x2948>
   154f4:	cmp	r0, #0
   154f8:	beq	1550c <__assert_fail@plt+0x3db0>
   154fc:	mov	r2, r5
   15500:	mov	r1, r4
   15504:	pop	{r4, r5, r6, lr}
   15508:	b	1148c <readlink@plt>
   1550c:	bl	115ac <__errno_location@plt>
   15510:	ldr	r3, [r0]
   15514:	rsb	r3, r3, #0
   15518:	mov	r0, r3
   1551c:	pop	{r4, r5, r6, pc}
   15520:	push	{r3}		; (str r3, [sp, #-4]!)
   15524:	ldr	r3, [pc, #132]	; 155b0 <__assert_fail@plt+0x3e54>
   15528:	ldr	ip, [pc, #132]	; 155b4 <__assert_fail@plt+0x3e58>
   1552c:	add	r3, pc, r3
   15530:	push	{r4, r5, r6, r7, lr}
   15534:	sub	sp, sp, #8
   15538:	ldr	r4, [r3, ip]
   1553c:	add	lr, sp, #32
   15540:	mov	r5, r1
   15544:	ldr	ip, [r4]
   15548:	mov	r7, r2
   1554c:	ldr	r1, [sp, #28]
   15550:	mov	r2, lr
   15554:	str	ip, [sp, #4]
   15558:	str	lr, [sp]
   1555c:	mov	r6, r0
   15560:	bl	1414c <__assert_fail@plt+0x29f0>
   15564:	subs	r3, r0, #0
   15568:	beq	1559c <__assert_fail@plt+0x3e40>
   1556c:	mov	r2, r7
   15570:	mov	r1, r5
   15574:	mov	r0, r6
   15578:	bl	154bc <__assert_fail@plt+0x3d60>
   1557c:	ldr	r2, [sp, #4]
   15580:	ldr	r3, [r4]
   15584:	cmp	r2, r3
   15588:	bne	155ac <__assert_fail@plt+0x3e50>
   1558c:	add	sp, sp, #8
   15590:	pop	{r4, r5, r6, r7, lr}
   15594:	add	sp, sp, #4
   15598:	bx	lr
   1559c:	bl	115ac <__errno_location@plt>
   155a0:	ldr	r0, [r0]
   155a4:	rsb	r0, r0, #0
   155a8:	b	1557c <__assert_fail@plt+0x3e20>
   155ac:	bl	11444 <__stack_chk_fail@plt>
   155b0:	andeq	r2, r1, r8, asr #18
   155b4:	andeq	r0, r0, r4, ror r1
   155b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155bc:	mov	r9, r3
   155c0:	ldr	r4, [pc, #400]	; 15758 <__assert_fail@plt+0x3ffc>
   155c4:	ldr	ip, [pc, #400]	; 1575c <__assert_fail@plt+0x4000>
   155c8:	add	r4, pc, r4
   155cc:	sub	sp, sp, #36	; 0x24
   155d0:	ldr	r3, [r4, ip]
   155d4:	mov	r6, r1
   155d8:	str	r3, [sp, #12]
   155dc:	ldr	r3, [r3]
   155e0:	mov	r1, #524288	; 0x80000
   155e4:	mov	r5, r2
   155e8:	mov	r2, r9
   155ec:	str	r3, [sp, #28]
   155f0:	bl	14d24 <__assert_fail@plt+0x35c8>
   155f4:	mov	r7, r0
   155f8:	bl	115ac <__errno_location@plt>
   155fc:	cmp	r7, #0
   15600:	mov	r8, r0
   15604:	blt	15734 <__assert_fail@plt+0x3fd8>
   15608:	ldr	r3, [pc, #336]	; 15760 <__assert_fail@plt+0x4004>
   1560c:	add	r3, pc, r3
   15610:	ldr	r3, [r3]
   15614:	tst	r3, #4
   15618:	bne	156c0 <__assert_fail@plt+0x3f64>
   1561c:	mov	r2, r5
   15620:	mov	r1, #0
   15624:	mov	r0, r6
   15628:	bl	115f4 <memset@plt>
   1562c:	cmp	r5, #0
   15630:	movne	r4, #0
   15634:	movne	fp, r4
   15638:	addne	r9, sp, #20
   1563c:	beq	15748 <__assert_fail@plt+0x3fec>
   15640:	mov	r2, r5
   15644:	mov	r1, r6
   15648:	mov	r0, r7
   1564c:	bl	11384 <read@plt>
   15650:	cmp	r0, #0
   15654:	ble	15670 <__assert_fail@plt+0x3f14>
   15658:	subs	r5, r5, r0
   1565c:	add	r6, r6, r0
   15660:	add	r4, r4, r0
   15664:	beq	15740 <__assert_fail@plt+0x3fe4>
   15668:	mov	fp, #0
   1566c:	b	15640 <__assert_fail@plt+0x3ee4>
   15670:	ldr	sl, [r8]
   15674:	beq	1568c <__assert_fail@plt+0x3f30>
   15678:	cmp	sl, #4
   1567c:	cmpne	sl, #11
   15680:	bne	1568c <__assert_fail@plt+0x3f30>
   15684:	cmp	fp, #4
   15688:	ble	15714 <__assert_fail@plt+0x3fb8>
   1568c:	cmp	r4, #0
   15690:	mvneq	r4, #0
   15694:	mov	r0, r7
   15698:	bl	1172c <close@plt>
   1569c:	str	sl, [r8]
   156a0:	ldr	r3, [sp, #12]
   156a4:	ldr	r2, [sp, #28]
   156a8:	mov	r0, r4
   156ac:	ldr	r3, [r3]
   156b0:	cmp	r2, r3
   156b4:	bne	15754 <__assert_fail@plt+0x3ff8>
   156b8:	add	sp, sp, #36	; 0x24
   156bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156c0:	ldr	r3, [pc, #156]	; 15764 <__assert_fail@plt+0x4008>
   156c4:	ldr	r3, [r4, r3]
   156c8:	ldr	r4, [r3]
   156cc:	bl	1154c <getpid@plt>
   156d0:	ldr	r2, [pc, #144]	; 15768 <__assert_fail@plt+0x400c>
   156d4:	ldr	r3, [pc, #144]	; 1576c <__assert_fail@plt+0x4010>
   156d8:	add	r2, pc, r2
   156dc:	str	r2, [sp, #4]
   156e0:	ldr	r2, [pc, #136]	; 15770 <__assert_fail@plt+0x4014>
   156e4:	add	r3, pc, r3
   156e8:	str	r3, [sp]
   156ec:	add	r2, pc, r2
   156f0:	mov	r1, #1
   156f4:	mov	r3, r0
   156f8:	mov	r0, r4
   156fc:	bl	11648 <__fprintf_chk@plt>
   15700:	ldr	r0, [pc, #108]	; 15774 <__assert_fail@plt+0x4018>
   15704:	mov	r1, r9
   15708:	add	r0, pc, r0
   1570c:	bl	14024 <__assert_fail@plt+0x28c8>
   15710:	b	1561c <__assert_fail@plt+0x3ec0>
   15714:	ldr	r3, [pc, #92]	; 15778 <__assert_fail@plt+0x401c>
   15718:	mov	r1, #0
   1571c:	mov	r0, r9
   15720:	add	fp, fp, #1
   15724:	str	r1, [sp, #20]
   15728:	str	r3, [sp, #24]
   1572c:	bl	113b4 <nanosleep@plt>
   15730:	b	15640 <__assert_fail@plt+0x3ee4>
   15734:	ldr	r4, [r0]
   15738:	rsb	r4, r4, #0
   1573c:	b	156a0 <__assert_fail@plt+0x3f44>
   15740:	ldr	sl, [r8]
   15744:	b	15694 <__assert_fail@plt+0x3f38>
   15748:	ldr	sl, [r8]
   1574c:	mov	r4, r5
   15750:	b	15694 <__assert_fail@plt+0x3f38>
   15754:	bl	11444 <__stack_chk_fail@plt>
   15758:	andeq	r2, r1, ip, lsr #17
   1575c:	andeq	r0, r0, r4, ror r1
   15760:	andeq	r2, r1, ip, lsl sl
   15764:	andeq	r0, r0, r8, ror r1
   15768:	andeq	r2, r0, r0, lsl r4
   1576c:	andeq	r2, r0, ip, ror #7
   15770:	andeq	r2, r0, ip, ror #7
   15774:	ldrdeq	r2, [r0], -r0
   15778:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1577c:	push	{r4, r5, r6, lr}
   15780:	mov	r5, r1
   15784:	mov	r6, r2
   15788:	mov	r1, r3
   1578c:	ldr	r2, [sp, #16]
   15790:	mov	r4, r0
   15794:	bl	1414c <__assert_fail@plt+0x29f0>
   15798:	subs	r3, r0, #0
   1579c:	beq	157b4 <__assert_fail@plt+0x4058>
   157a0:	mov	r2, r6
   157a4:	mov	r1, r5
   157a8:	mov	r0, r4
   157ac:	pop	{r4, r5, r6, lr}
   157b0:	b	155b8 <__assert_fail@plt+0x3e5c>
   157b4:	mvn	r0, #21
   157b8:	pop	{r4, r5, r6, pc}
   157bc:	push	{r3}		; (str r3, [sp, #-4]!)
   157c0:	ldr	r3, [pc, #80]	; 15818 <__assert_fail@plt+0x40bc>
   157c4:	ldr	ip, [pc, #80]	; 1581c <__assert_fail@plt+0x40c0>
   157c8:	add	r3, pc, r3
   157cc:	push	{r4, lr}
   157d0:	sub	sp, sp, #20
   157d4:	ldr	r4, [r3, ip]
   157d8:	add	lr, sp, #32
   157dc:	str	lr, [sp]
   157e0:	ldr	ip, [r4]
   157e4:	ldr	r3, [sp, #28]
   157e8:	str	lr, [sp, #8]
   157ec:	str	ip, [sp, #12]
   157f0:	bl	1577c <__assert_fail@plt+0x4020>
   157f4:	ldr	r2, [sp, #12]
   157f8:	ldr	r3, [r4]
   157fc:	cmp	r2, r3
   15800:	bne	15814 <__assert_fail@plt+0x40b8>
   15804:	add	sp, sp, #20
   15808:	pop	{r4, lr}
   1580c:	add	sp, sp, #4
   15810:	bx	lr
   15814:	bl	11444 <__stack_chk_fail@plt>
   15818:	andeq	r2, r1, ip, lsr #13
   1581c:	andeq	r0, r0, r4, ror r1
   15820:	ldr	ip, [pc, #176]	; 158d8 <__assert_fail@plt+0x417c>
   15824:	ldr	r3, [pc, #176]	; 158dc <__assert_fail@plt+0x4180>
   15828:	add	ip, pc, ip
   1582c:	push	{r4, r5, r6, r7, r8, lr}
   15830:	sub	sp, sp, #8192	; 0x2000
   15834:	ldr	r7, [ip, r3]
   15838:	sub	sp, sp, #8
   1583c:	mov	r6, r1
   15840:	add	r5, sp, #8
   15844:	add	ip, sp, #8192	; 0x2000
   15848:	ldr	lr, [r7]
   1584c:	mov	r1, #0
   15850:	add	ip, ip, #4
   15854:	sub	r8, r5, #4
   15858:	mov	r3, r2
   1585c:	str	r1, [r6]
   15860:	ldr	r2, [pc, #120]	; 158e0 <__assert_fail@plt+0x4184>
   15864:	mov	r1, r8
   15868:	str	lr, [ip]
   1586c:	bl	155b8 <__assert_fail@plt+0x3e5c>
   15870:	subs	r4, r0, #0
   15874:	blt	158ac <__assert_fail@plt+0x4150>
   15878:	beq	1588c <__assert_fail@plt+0x4130>
   1587c:	sub	r3, r5, #5
   15880:	ldrsb	r3, [r3, r4]
   15884:	cmp	r3, #10
   15888:	subeq	r4, r4, #1
   1588c:	add	r5, r5, r4
   15890:	mov	r3, #0
   15894:	mov	r0, r8
   15898:	strb	r3, [r5, #-4]
   1589c:	bl	11438 <strdup@plt>
   158a0:	cmp	r0, #0
   158a4:	mvneq	r4, #11
   158a8:	str	r0, [r6]
   158ac:	add	r3, sp, #8192	; 0x2000
   158b0:	add	r3, r3, #4
   158b4:	ldr	r2, [r3]
   158b8:	ldr	r3, [r7]
   158bc:	mov	r0, r4
   158c0:	cmp	r2, r3
   158c4:	bne	158d4 <__assert_fail@plt+0x4178>
   158c8:	add	sp, sp, #8192	; 0x2000
   158cc:	add	sp, sp, #8
   158d0:	pop	{r4, r5, r6, r7, r8, pc}
   158d4:	bl	11444 <__stack_chk_fail@plt>
   158d8:	andeq	r2, r1, ip, asr #12
   158dc:	andeq	r0, r0, r4, ror r1
   158e0:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   158e4:	push	{r2, r3}
   158e8:	ldr	r3, [pc, #116]	; 15964 <__assert_fail@plt+0x4208>
   158ec:	ldr	r2, [pc, #116]	; 15968 <__assert_fail@plt+0x420c>
   158f0:	add	r3, pc, r3
   158f4:	push	{r4, r5, r6, lr}
   158f8:	sub	sp, sp, #8
   158fc:	ldr	r4, [r3, r2]
   15900:	add	ip, sp, #28
   15904:	mov	r2, ip
   15908:	ldr	r3, [r4]
   1590c:	mov	r5, r1
   15910:	ldr	r1, [sp, #24]
   15914:	str	ip, [sp]
   15918:	str	r3, [sp, #4]
   1591c:	mov	r6, r0
   15920:	bl	1414c <__assert_fail@plt+0x29f0>
   15924:	subs	r2, r0, #0
   15928:	beq	15958 <__assert_fail@plt+0x41fc>
   1592c:	mov	r1, r5
   15930:	mov	r0, r6
   15934:	bl	15820 <__assert_fail@plt+0x40c4>
   15938:	ldr	r2, [sp, #4]
   1593c:	ldr	r3, [r4]
   15940:	cmp	r2, r3
   15944:	bne	15960 <__assert_fail@plt+0x4204>
   15948:	add	sp, sp, #8
   1594c:	pop	{r4, r5, r6, lr}
   15950:	add	sp, sp, #8
   15954:	bx	lr
   15958:	mvn	r0, #21
   1595c:	b	15938 <__assert_fail@plt+0x41dc>
   15960:	bl	11444 <__stack_chk_fail@plt>
   15964:	andeq	r2, r1, r4, lsl #11
   15968:	andeq	r0, r0, r4, ror r1
   1596c:	push	{r4, lr}
   15970:	sub	r2, r2, #1
   15974:	mov	r4, r1
   15978:	bl	155b8 <__assert_fail@plt+0x3e5c>
   1597c:	cmp	r0, #0
   15980:	poplt	{r4, pc}
   15984:	beq	159a0 <__assert_fail@plt+0x4244>
   15988:	add	r3, r4, r0
   1598c:	ldrsb	r2, [r3, #-1]
   15990:	cmp	r2, #10
   15994:	subeq	r0, r0, #1
   15998:	movne	r4, r3
   1599c:	addeq	r4, r4, r0
   159a0:	mov	r3, #0
   159a4:	strb	r3, [r4]
   159a8:	pop	{r4, pc}
   159ac:	push	{r3}		; (str r3, [sp, #-4]!)
   159b0:	ldr	r3, [pc, #124]	; 15a34 <__assert_fail@plt+0x42d8>
   159b4:	ldr	ip, [pc, #124]	; 15a38 <__assert_fail@plt+0x42dc>
   159b8:	add	r3, pc, r3
   159bc:	push	{r4, r5, r6, r7, lr}
   159c0:	sub	sp, sp, #8
   159c4:	ldr	r4, [r3, ip]
   159c8:	add	lr, sp, #32
   159cc:	mov	r5, r1
   159d0:	ldr	ip, [r4]
   159d4:	mov	r7, r2
   159d8:	ldr	r1, [sp, #28]
   159dc:	mov	r2, lr
   159e0:	str	ip, [sp, #4]
   159e4:	str	lr, [sp]
   159e8:	mov	r6, r0
   159ec:	bl	1414c <__assert_fail@plt+0x29f0>
   159f0:	subs	r3, r0, #0
   159f4:	beq	15a28 <__assert_fail@plt+0x42cc>
   159f8:	mov	r2, r7
   159fc:	mov	r1, r5
   15a00:	mov	r0, r6
   15a04:	bl	1596c <__assert_fail@plt+0x4210>
   15a08:	ldr	r2, [sp, #4]
   15a0c:	ldr	r3, [r4]
   15a10:	cmp	r2, r3
   15a14:	bne	15a30 <__assert_fail@plt+0x42d4>
   15a18:	add	sp, sp, #8
   15a1c:	pop	{r4, r5, r6, r7, lr}
   15a20:	add	sp, sp, #4
   15a24:	bx	lr
   15a28:	mvn	r0, #21
   15a2c:	b	15a08 <__assert_fail@plt+0x42ac>
   15a30:	bl	11444 <__stack_chk_fail@plt>
   15a34:			; <UNDEFINED> instruction: 0x000124bc
   15a38:	andeq	r0, r0, r4, ror r1
   15a3c:	push	{r2, r3}
   15a40:	mov	r2, r1
   15a44:	push	{r4, r5, r6, r7, r8, lr}
   15a48:	mov	r7, r1
   15a4c:	ldr	r4, [pc, #236]	; 15b40 <__assert_fail@plt+0x43e4>
   15a50:	ldr	r3, [pc, #236]	; 15b44 <__assert_fail@plt+0x43e8>
   15a54:	add	r4, pc, r4
   15a58:	ldr	r1, [pc, #232]	; 15b48 <__assert_fail@plt+0x43ec>
   15a5c:	ldr	r5, [r4, r3]
   15a60:	sub	sp, sp, #16
   15a64:	add	r1, pc, r1
   15a68:	ldr	r3, [r5]
   15a6c:	ldr	r8, [sp, #40]	; 0x28
   15a70:	str	r3, [sp, #12]
   15a74:	bl	15044 <__assert_fail@plt+0x38e8>
   15a78:	subs	r6, r0, #0
   15a7c:	beq	15b34 <__assert_fail@plt+0x43d8>
   15a80:	ldr	r3, [pc, #196]	; 15b4c <__assert_fail@plt+0x43f0>
   15a84:	add	r3, pc, r3
   15a88:	ldr	r3, [r3]
   15a8c:	tst	r3, #4
   15a90:	bne	15adc <__assert_fail@plt+0x4380>
   15a94:	add	r3, sp, #44	; 0x2c
   15a98:	mov	r1, r8
   15a9c:	mov	r2, r3
   15aa0:	mov	r0, r6
   15aa4:	str	r3, [sp, #8]
   15aa8:	bl	11480 <vfscanf@plt>
   15aac:	mov	r4, r0
   15ab0:	mov	r0, r6
   15ab4:	bl	11654 <fclose@plt>
   15ab8:	ldr	r2, [sp, #12]
   15abc:	ldr	r3, [r5]
   15ac0:	mov	r0, r4
   15ac4:	cmp	r2, r3
   15ac8:	bne	15b3c <__assert_fail@plt+0x43e0>
   15acc:	add	sp, sp, #16
   15ad0:	pop	{r4, r5, r6, r7, r8, lr}
   15ad4:	add	sp, sp, #8
   15ad8:	bx	lr
   15adc:	ldr	r3, [pc, #108]	; 15b50 <__assert_fail@plt+0x43f4>
   15ae0:	ldr	r3, [r4, r3]
   15ae4:	ldr	r4, [r3]
   15ae8:	bl	1154c <getpid@plt>
   15aec:	ldr	r2, [pc, #96]	; 15b54 <__assert_fail@plt+0x43f8>
   15af0:	ldr	r3, [pc, #96]	; 15b58 <__assert_fail@plt+0x43fc>
   15af4:	add	r2, pc, r2
   15af8:	str	r2, [sp, #4]
   15afc:	ldr	r2, [pc, #88]	; 15b5c <__assert_fail@plt+0x4400>
   15b00:	add	r3, pc, r3
   15b04:	str	r3, [sp]
   15b08:	add	r2, pc, r2
   15b0c:	mov	r1, #1
   15b10:	mov	r3, r0
   15b14:	mov	r0, r4
   15b18:	bl	11648 <__fprintf_chk@plt>
   15b1c:	ldr	r0, [pc, #60]	; 15b60 <__assert_fail@plt+0x4404>
   15b20:	mov	r2, r7
   15b24:	mov	r1, r8
   15b28:	add	r0, pc, r0
   15b2c:	bl	14024 <__assert_fail@plt+0x28c8>
   15b30:	b	15a94 <__assert_fail@plt+0x4338>
   15b34:	mvn	r4, #21
   15b38:	b	15ab8 <__assert_fail@plt+0x435c>
   15b3c:	bl	11444 <__stack_chk_fail@plt>
   15b40:	andeq	r2, r1, r0, lsr #8
   15b44:	andeq	r0, r0, r4, ror r1
   15b48:	andeq	r2, r0, ip, asr r1
   15b4c:	andeq	r2, r1, r4, lsr #11
   15b50:	andeq	r0, r0, r8, ror r1
   15b54:	strdeq	r1, [r0], -r4
   15b58:	ldrdeq	r1, [r0], -r0
   15b5c:	ldrdeq	r1, [r0], -r0
   15b60:	andeq	r2, r0, r0, asr #1
   15b64:	ldr	ip, [pc, #140]	; 15bf8 <__assert_fail@plt+0x449c>
   15b68:	push	{r3}		; (str r3, [sp, #-4]!)
   15b6c:	add	ip, pc, ip
   15b70:	push	{r4, r5, r6, lr}
   15b74:	mov	r3, r2
   15b78:	ldr	lr, [pc, #124]	; 15bfc <__assert_fail@plt+0x44a0>
   15b7c:	mov	r2, r1
   15b80:	ldr	r1, [pc, #120]	; 15c00 <__assert_fail@plt+0x44a4>
   15b84:	ldr	r4, [ip, lr]
   15b88:	sub	sp, sp, #12
   15b8c:	add	r1, pc, r1
   15b90:	ldr	ip, [r4]
   15b94:	ldr	r5, [sp, #28]
   15b98:	str	ip, [sp, #4]
   15b9c:	bl	15128 <__assert_fail@plt+0x39cc>
   15ba0:	subs	r6, r0, #0
   15ba4:	beq	15bec <__assert_fail@plt+0x4490>
   15ba8:	add	r3, sp, #32
   15bac:	mov	r1, r5
   15bb0:	mov	r2, r3
   15bb4:	str	r3, [sp]
   15bb8:	bl	11480 <vfscanf@plt>
   15bbc:	mov	r5, r0
   15bc0:	mov	r0, r6
   15bc4:	bl	11654 <fclose@plt>
   15bc8:	ldr	r2, [sp, #4]
   15bcc:	ldr	r3, [r4]
   15bd0:	mov	r0, r5
   15bd4:	cmp	r2, r3
   15bd8:	bne	15bf4 <__assert_fail@plt+0x4498>
   15bdc:	add	sp, sp, #12
   15be0:	pop	{r4, r5, r6, lr}
   15be4:	add	sp, sp, #4
   15be8:	bx	lr
   15bec:	mvn	r5, #21
   15bf0:	b	15bc8 <__assert_fail@plt+0x446c>
   15bf4:	bl	11444 <__stack_chk_fail@plt>
   15bf8:	andeq	r2, r1, r8, lsl #6
   15bfc:	andeq	r0, r0, r4, ror r1
   15c00:	andeq	r2, r0, r4, lsr r0
   15c04:	ldr	r3, [pc, #124]	; 15c88 <__assert_fail@plt+0x452c>
   15c08:	ldr	ip, [pc, #124]	; 15c8c <__assert_fail@plt+0x4530>
   15c0c:	add	r3, pc, r3
   15c10:	push	{r4, r5, r6, r7, lr}
   15c14:	mov	r5, r1
   15c18:	ldr	r4, [r3, ip]
   15c1c:	mov	r1, r2
   15c20:	ldr	r2, [pc, #104]	; 15c90 <__assert_fail@plt+0x4534>
   15c24:	sub	sp, sp, #20
   15c28:	ldr	ip, [r4]
   15c2c:	mov	r6, #0
   15c30:	mov	r7, #0
   15c34:	add	r2, pc, r2
   15c38:	mov	r3, sp
   15c3c:	strd	r6, [sp]
   15c40:	str	ip, [sp, #12]
   15c44:	bl	15a3c <__assert_fail@plt+0x42e0>
   15c48:	cmp	r0, #1
   15c4c:	bne	15c7c <__assert_fail@plt+0x4520>
   15c50:	cmp	r5, #0
   15c54:	moveq	r0, r5
   15c58:	ldrdne	r2, [sp]
   15c5c:	movne	r0, #0
   15c60:	strdne	r2, [r5]
   15c64:	ldr	r2, [sp, #12]
   15c68:	ldr	r3, [r4]
   15c6c:	cmp	r2, r3
   15c70:	bne	15c84 <__assert_fail@plt+0x4528>
   15c74:	add	sp, sp, #20
   15c78:	pop	{r4, r5, r6, r7, pc}
   15c7c:	mvn	r0, #0
   15c80:	b	15c64 <__assert_fail@plt+0x4508>
   15c84:	bl	11444 <__stack_chk_fail@plt>
   15c88:	andeq	r2, r1, r8, ror #4
   15c8c:	andeq	r0, r0, r4, ror r1
   15c90:	andeq	r1, r0, r8, asr #31
   15c94:	push	{r2, r3}
   15c98:	ldr	r3, [pc, #116]	; 15d14 <__assert_fail@plt+0x45b8>
   15c9c:	ldr	r2, [pc, #116]	; 15d18 <__assert_fail@plt+0x45bc>
   15ca0:	add	r3, pc, r3
   15ca4:	push	{r4, r5, r6, lr}
   15ca8:	sub	sp, sp, #8
   15cac:	ldr	r4, [r3, r2]
   15cb0:	add	ip, sp, #28
   15cb4:	mov	r2, ip
   15cb8:	ldr	r3, [r4]
   15cbc:	mov	r5, r1
   15cc0:	ldr	r1, [sp, #24]
   15cc4:	str	ip, [sp]
   15cc8:	str	r3, [sp, #4]
   15ccc:	mov	r6, r0
   15cd0:	bl	1414c <__assert_fail@plt+0x29f0>
   15cd4:	subs	r2, r0, #0
   15cd8:	beq	15d08 <__assert_fail@plt+0x45ac>
   15cdc:	mov	r1, r5
   15ce0:	mov	r0, r6
   15ce4:	bl	15c04 <__assert_fail@plt+0x44a8>
   15ce8:	ldr	r2, [sp, #4]
   15cec:	ldr	r3, [r4]
   15cf0:	cmp	r2, r3
   15cf4:	bne	15d10 <__assert_fail@plt+0x45b4>
   15cf8:	add	sp, sp, #8
   15cfc:	pop	{r4, r5, r6, lr}
   15d00:	add	sp, sp, #8
   15d04:	bx	lr
   15d08:	mvn	r0, #21
   15d0c:	b	15ce8 <__assert_fail@plt+0x458c>
   15d10:	bl	11444 <__stack_chk_fail@plt>
   15d14:	ldrdeq	r2, [r1], -r4
   15d18:	andeq	r0, r0, r4, ror r1
   15d1c:	ldr	r3, [pc, #124]	; 15da0 <__assert_fail@plt+0x4644>
   15d20:	ldr	ip, [pc, #124]	; 15da4 <__assert_fail@plt+0x4648>
   15d24:	add	r3, pc, r3
   15d28:	push	{r4, r5, r6, r7, lr}
   15d2c:	mov	r5, r1
   15d30:	ldr	r4, [r3, ip]
   15d34:	mov	r1, r2
   15d38:	ldr	r2, [pc, #104]	; 15da8 <__assert_fail@plt+0x464c>
   15d3c:	sub	sp, sp, #20
   15d40:	ldr	ip, [r4]
   15d44:	mov	r6, #0
   15d48:	mov	r7, #0
   15d4c:	add	r2, pc, r2
   15d50:	mov	r3, sp
   15d54:	strd	r6, [sp]
   15d58:	str	ip, [sp, #12]
   15d5c:	bl	15a3c <__assert_fail@plt+0x42e0>
   15d60:	cmp	r0, #1
   15d64:	bne	15d94 <__assert_fail@plt+0x4638>
   15d68:	cmp	r5, #0
   15d6c:	moveq	r0, r5
   15d70:	ldrdne	r2, [sp]
   15d74:	movne	r0, #0
   15d78:	strdne	r2, [r5]
   15d7c:	ldr	r2, [sp, #12]
   15d80:	ldr	r3, [r4]
   15d84:	cmp	r2, r3
   15d88:	bne	15d9c <__assert_fail@plt+0x4640>
   15d8c:	add	sp, sp, #20
   15d90:	pop	{r4, r5, r6, r7, pc}
   15d94:	mvn	r0, #0
   15d98:	b	15d7c <__assert_fail@plt+0x4620>
   15d9c:	bl	11444 <__stack_chk_fail@plt>
   15da0:	andeq	r2, r1, r0, asr r1
   15da4:	andeq	r0, r0, r4, ror r1
   15da8:			; <UNDEFINED> instruction: 0x00001eb8
   15dac:	push	{r2, r3}
   15db0:	ldr	r3, [pc, #116]	; 15e2c <__assert_fail@plt+0x46d0>
   15db4:	ldr	r2, [pc, #116]	; 15e30 <__assert_fail@plt+0x46d4>
   15db8:	add	r3, pc, r3
   15dbc:	push	{r4, r5, r6, lr}
   15dc0:	sub	sp, sp, #8
   15dc4:	ldr	r4, [r3, r2]
   15dc8:	add	ip, sp, #28
   15dcc:	mov	r2, ip
   15dd0:	ldr	r3, [r4]
   15dd4:	mov	r5, r1
   15dd8:	ldr	r1, [sp, #24]
   15ddc:	str	ip, [sp]
   15de0:	str	r3, [sp, #4]
   15de4:	mov	r6, r0
   15de8:	bl	1414c <__assert_fail@plt+0x29f0>
   15dec:	subs	r2, r0, #0
   15df0:	beq	15e20 <__assert_fail@plt+0x46c4>
   15df4:	mov	r1, r5
   15df8:	mov	r0, r6
   15dfc:	bl	15d1c <__assert_fail@plt+0x45c0>
   15e00:	ldr	r2, [sp, #4]
   15e04:	ldr	r3, [r4]
   15e08:	cmp	r2, r3
   15e0c:	bne	15e28 <__assert_fail@plt+0x46cc>
   15e10:	add	sp, sp, #8
   15e14:	pop	{r4, r5, r6, lr}
   15e18:	add	sp, sp, #8
   15e1c:	bx	lr
   15e20:	mvn	r0, #21
   15e24:	b	15e00 <__assert_fail@plt+0x46a4>
   15e28:	bl	11444 <__stack_chk_fail@plt>
   15e2c:	strheq	r2, [r1], -ip
   15e30:	andeq	r0, r0, r4, ror r1
   15e34:	ldr	ip, [pc, #120]	; 15eb4 <__assert_fail@plt+0x4758>
   15e38:	ldr	r3, [pc, #120]	; 15eb8 <__assert_fail@plt+0x475c>
   15e3c:	add	ip, pc, ip
   15e40:	push	{r4, r5, r6, lr}
   15e44:	mov	r6, r1
   15e48:	ldr	r5, [ip, r3]
   15e4c:	mov	r1, r2
   15e50:	ldr	r2, [pc, #100]	; 15ebc <__assert_fail@plt+0x4760>
   15e54:	sub	sp, sp, #8
   15e58:	ldr	lr, [r5]
   15e5c:	mov	r4, #0
   15e60:	mov	r3, sp
   15e64:	add	r2, pc, r2
   15e68:	str	lr, [sp, #4]
   15e6c:	str	r4, [sp]
   15e70:	bl	15a3c <__assert_fail@plt+0x42e0>
   15e74:	cmp	r0, #1
   15e78:	bne	15ea8 <__assert_fail@plt+0x474c>
   15e7c:	cmp	r6, r4
   15e80:	moveq	r0, r6
   15e84:	ldrne	r3, [sp]
   15e88:	movne	r0, r4
   15e8c:	strne	r3, [r6]
   15e90:	ldr	r2, [sp, #4]
   15e94:	ldr	r3, [r5]
   15e98:	cmp	r2, r3
   15e9c:	bne	15eb0 <__assert_fail@plt+0x4754>
   15ea0:	add	sp, sp, #8
   15ea4:	pop	{r4, r5, r6, pc}
   15ea8:	mvn	r0, #0
   15eac:	b	15e90 <__assert_fail@plt+0x4734>
   15eb0:	bl	11444 <__stack_chk_fail@plt>
   15eb4:	andeq	r2, r1, r8, lsr r0
   15eb8:	andeq	r0, r0, r4, ror r1
   15ebc:	andeq	r1, r0, r8, lsr #27
   15ec0:	push	{r2, r3}
   15ec4:	ldr	r3, [pc, #116]	; 15f40 <__assert_fail@plt+0x47e4>
   15ec8:	ldr	r2, [pc, #116]	; 15f44 <__assert_fail@plt+0x47e8>
   15ecc:	add	r3, pc, r3
   15ed0:	push	{r4, r5, r6, lr}
   15ed4:	sub	sp, sp, #8
   15ed8:	ldr	r4, [r3, r2]
   15edc:	add	ip, sp, #28
   15ee0:	mov	r2, ip
   15ee4:	ldr	r3, [r4]
   15ee8:	mov	r5, r1
   15eec:	ldr	r1, [sp, #24]
   15ef0:	str	ip, [sp]
   15ef4:	str	r3, [sp, #4]
   15ef8:	mov	r6, r0
   15efc:	bl	1414c <__assert_fail@plt+0x29f0>
   15f00:	subs	r2, r0, #0
   15f04:	beq	15f34 <__assert_fail@plt+0x47d8>
   15f08:	mov	r1, r5
   15f0c:	mov	r0, r6
   15f10:	bl	15e34 <__assert_fail@plt+0x46d8>
   15f14:	ldr	r2, [sp, #4]
   15f18:	ldr	r3, [r4]
   15f1c:	cmp	r2, r3
   15f20:	bne	15f3c <__assert_fail@plt+0x47e0>
   15f24:	add	sp, sp, #8
   15f28:	pop	{r4, r5, r6, lr}
   15f2c:	add	sp, sp, #8
   15f30:	bx	lr
   15f34:	mvn	r0, #21
   15f38:	b	15f14 <__assert_fail@plt+0x47b8>
   15f3c:	bl	11444 <__stack_chk_fail@plt>
   15f40:	andeq	r1, r1, r8, lsr #31
   15f44:	andeq	r0, r0, r4, ror r1
   15f48:	ldr	ip, [pc, #112]	; 15fc0 <__assert_fail@plt+0x4864>
   15f4c:	ldr	r3, [pc, #112]	; 15fc4 <__assert_fail@plt+0x4868>
   15f50:	add	ip, pc, ip
   15f54:	push	{r4, r5, lr}
   15f58:	mov	r5, r1
   15f5c:	ldr	r4, [ip, r3]
   15f60:	mov	r1, r2
   15f64:	ldr	r2, [pc, #92]	; 15fc8 <__assert_fail@plt+0x486c>
   15f68:	sub	sp, sp, #12
   15f6c:	ldr	lr, [r4]
   15f70:	mov	r3, sp
   15f74:	add	r2, pc, r2
   15f78:	str	lr, [sp, #4]
   15f7c:	bl	15a3c <__assert_fail@plt+0x42e0>
   15f80:	cmp	r0, #1
   15f84:	bne	15fb4 <__assert_fail@plt+0x4858>
   15f88:	cmp	r5, #0
   15f8c:	moveq	r0, r5
   15f90:	ldrne	r3, [sp]
   15f94:	movne	r0, #0
   15f98:	strne	r3, [r5]
   15f9c:	ldr	r2, [sp, #4]
   15fa0:	ldr	r3, [r4]
   15fa4:	cmp	r2, r3
   15fa8:	bne	15fbc <__assert_fail@plt+0x4860>
   15fac:	add	sp, sp, #12
   15fb0:	pop	{r4, r5, pc}
   15fb4:	mvn	r0, #0
   15fb8:	b	15f9c <__assert_fail@plt+0x4840>
   15fbc:	bl	11444 <__stack_chk_fail@plt>
   15fc0:	andeq	r1, r1, r4, lsr #30
   15fc4:	andeq	r0, r0, r4, ror r1
   15fc8:	muleq	r0, ip, ip
   15fcc:	push	{r2, r3}
   15fd0:	ldr	r3, [pc, #116]	; 1604c <__assert_fail@plt+0x48f0>
   15fd4:	ldr	r2, [pc, #116]	; 16050 <__assert_fail@plt+0x48f4>
   15fd8:	add	r3, pc, r3
   15fdc:	push	{r4, r5, r6, lr}
   15fe0:	sub	sp, sp, #8
   15fe4:	ldr	r4, [r3, r2]
   15fe8:	add	ip, sp, #28
   15fec:	mov	r2, ip
   15ff0:	ldr	r3, [r4]
   15ff4:	mov	r5, r1
   15ff8:	ldr	r1, [sp, #24]
   15ffc:	str	ip, [sp]
   16000:	str	r3, [sp, #4]
   16004:	mov	r6, r0
   16008:	bl	1414c <__assert_fail@plt+0x29f0>
   1600c:	subs	r2, r0, #0
   16010:	beq	16040 <__assert_fail@plt+0x48e4>
   16014:	mov	r1, r5
   16018:	mov	r0, r6
   1601c:	bl	15f48 <__assert_fail@plt+0x47ec>
   16020:	ldr	r2, [sp, #4]
   16024:	ldr	r3, [r4]
   16028:	cmp	r2, r3
   1602c:	bne	16048 <__assert_fail@plt+0x48ec>
   16030:	add	sp, sp, #8
   16034:	pop	{r4, r5, r6, lr}
   16038:	add	sp, sp, #8
   1603c:	bx	lr
   16040:	mvn	r0, #21
   16044:	b	16020 <__assert_fail@plt+0x48c4>
   16048:	bl	11444 <__stack_chk_fail@plt>
   1604c:	muleq	r1, ip, lr
   16050:	andeq	r0, r0, r4, ror r1
   16054:	ldr	ip, [pc, #168]	; 16104 <__assert_fail@plt+0x49a8>
   16058:	ldr	r3, [pc, #168]	; 16108 <__assert_fail@plt+0x49ac>
   1605c:	add	ip, pc, ip
   16060:	push	{r4, r5, lr}
   16064:	sub	sp, sp, #28
   16068:	ldr	r5, [ip, r3]
   1606c:	mov	r4, r1
   16070:	add	r3, sp, #16
   16074:	mov	r1, r2
   16078:	ldr	r2, [pc, #140]	; 1610c <__assert_fail@plt+0x49b0>
   1607c:	str	r3, [sp]
   16080:	ldr	lr, [r5]
   16084:	add	r3, sp, #12
   16088:	add	r2, pc, r2
   1608c:	str	lr, [sp, #20]
   16090:	bl	15a3c <__assert_fail@plt+0x42e0>
   16094:	cmp	r0, #2
   16098:	bne	160f8 <__assert_fail@plt+0x499c>
   1609c:	cmp	r4, #0
   160a0:	moveq	r0, r4
   160a4:	beq	160e0 <__assert_fail@plt+0x4984>
   160a8:	ldr	r0, [sp, #16]
   160ac:	ldr	r3, [sp, #12]
   160b0:	ldr	ip, [pc, #88]	; 16110 <__assert_fail@plt+0x49b4>
   160b4:	ldr	r2, [pc, #88]	; 16114 <__assert_fail@plt+0x49b8>
   160b8:	uxtb	r1, r0
   160bc:	and	ip, ip, r3, lsl #8
   160c0:	bic	r3, r3, #4080	; 0xff0
   160c4:	and	r2, r2, r0, lsl #12
   160c8:	orr	r1, r1, ip
   160cc:	bic	r3, r3, #15
   160d0:	orr	r3, r3, r0, lsr #20
   160d4:	orr	r2, r2, r1
   160d8:	mov	r0, #0
   160dc:	strd	r2, [r4]
   160e0:	ldr	r2, [sp, #20]
   160e4:	ldr	r3, [r5]
   160e8:	cmp	r2, r3
   160ec:	bne	16100 <__assert_fail@plt+0x49a4>
   160f0:	add	sp, sp, #28
   160f4:	pop	{r4, r5, pc}
   160f8:	mvn	r0, #0
   160fc:	b	160e0 <__assert_fail@plt+0x4984>
   16100:	bl	11444 <__stack_chk_fail@plt>
   16104:	andeq	r1, r1, r8, lsl lr
   16108:	andeq	r0, r0, r4, ror r1
   1610c:	andeq	r1, r0, ip, lsl #23
   16110:	andeq	pc, pc, r0, lsl #30
   16114:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   16118:	push	{r2, r3}
   1611c:	ldr	r3, [pc, #116]	; 16198 <__assert_fail@plt+0x4a3c>
   16120:	ldr	r2, [pc, #116]	; 1619c <__assert_fail@plt+0x4a40>
   16124:	add	r3, pc, r3
   16128:	push	{r4, r5, r6, lr}
   1612c:	sub	sp, sp, #8
   16130:	ldr	r4, [r3, r2]
   16134:	add	ip, sp, #28
   16138:	mov	r2, ip
   1613c:	ldr	r3, [r4]
   16140:	mov	r5, r1
   16144:	ldr	r1, [sp, #24]
   16148:	str	ip, [sp]
   1614c:	str	r3, [sp, #4]
   16150:	mov	r6, r0
   16154:	bl	1414c <__assert_fail@plt+0x29f0>
   16158:	subs	r2, r0, #0
   1615c:	beq	1618c <__assert_fail@plt+0x4a30>
   16160:	mov	r1, r5
   16164:	mov	r0, r6
   16168:	bl	16054 <__assert_fail@plt+0x48f8>
   1616c:	ldr	r2, [sp, #4]
   16170:	ldr	r3, [r4]
   16174:	cmp	r2, r3
   16178:	bne	16194 <__assert_fail@plt+0x4a38>
   1617c:	add	sp, sp, #8
   16180:	pop	{r4, r5, r6, lr}
   16184:	add	sp, sp, #8
   16188:	bx	lr
   1618c:	mvn	r0, #21
   16190:	b	1616c <__assert_fail@plt+0x4a10>
   16194:	bl	11444 <__stack_chk_fail@plt>
   16198:	andeq	r1, r1, r0, asr sp
   1619c:	andeq	r0, r0, r4, ror r1
   161a0:	ldr	r3, [pc, #284]	; 162c4 <__assert_fail@plt+0x4b68>
   161a4:	ldr	ip, [pc, #284]	; 162c8 <__assert_fail@plt+0x4b6c>
   161a8:	add	r3, pc, r3
   161ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161b0:	sub	sp, sp, #20
   161b4:	ldr	r8, [r3, ip]
   161b8:	mov	r6, r1
   161bc:	ldr	r1, [pc, #264]	; 162cc <__assert_fail@plt+0x4b70>
   161c0:	ldr	r3, [r8]
   161c4:	str	r3, [sp, #12]
   161c8:	bl	14d24 <__assert_fail@plt+0x35c8>
   161cc:	mov	r7, r0
   161d0:	bl	115ac <__errno_location@plt>
   161d4:	cmp	r7, #0
   161d8:	mov	r5, r0
   161dc:	blt	162ac <__assert_fail@plt+0x4b50>
   161e0:	mov	r0, r6
   161e4:	bl	1157c <strlen@plt>
   161e8:	subs	r4, r0, #0
   161ec:	beq	16264 <__assert_fail@plt+0x4b08>
   161f0:	mov	r9, #0
   161f4:	add	sl, sp, #4
   161f8:	str	r9, [r5]
   161fc:	mov	r2, r4
   16200:	mov	r1, r6
   16204:	mov	r0, r7
   16208:	bl	11630 <write@plt>
   1620c:	cmp	r0, #0
   16210:	ble	16290 <__assert_fail@plt+0x4b34>
   16214:	subs	r4, r4, r0
   16218:	ldr	fp, [r5]
   1621c:	beq	16248 <__assert_fail@plt+0x4aec>
   16220:	cmp	fp, #11
   16224:	add	r6, r6, r0
   16228:	bne	161f8 <__assert_fail@plt+0x4a9c>
   1622c:	ldr	r3, [pc, #156]	; 162d0 <__assert_fail@plt+0x4b74>
   16230:	mov	r1, #0
   16234:	mov	r0, sl
   16238:	str	r9, [sp, #4]
   1623c:	str	r3, [sp, #8]
   16240:	bl	113b4 <nanosleep@plt>
   16244:	b	161f8 <__assert_fail@plt+0x4a9c>
   16248:	cmp	fp, #11
   1624c:	bne	16268 <__assert_fail@plt+0x4b0c>
   16250:	ldr	r3, [pc, #120]	; 162d0 <__assert_fail@plt+0x4b74>
   16254:	mov	r1, r4
   16258:	add	r0, sp, #4
   1625c:	stmib	sp, {r1, r3}
   16260:	bl	113b4 <nanosleep@plt>
   16264:	ldr	fp, [r5]
   16268:	mov	r0, r7
   1626c:	bl	1172c <close@plt>
   16270:	str	fp, [r5]
   16274:	ldr	r2, [sp, #12]
   16278:	ldr	r3, [r8]
   1627c:	mov	r0, r4
   16280:	cmp	r2, r3
   16284:	bne	162c0 <__assert_fail@plt+0x4b64>
   16288:	add	sp, sp, #20
   1628c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16290:	ldr	fp, [r5]
   16294:	cmp	fp, #4
   16298:	cmpne	fp, #11
   1629c:	bne	162b8 <__assert_fail@plt+0x4b5c>
   162a0:	cmp	fp, #11
   162a4:	bne	161f8 <__assert_fail@plt+0x4a9c>
   162a8:	b	1622c <__assert_fail@plt+0x4ad0>
   162ac:	ldr	r4, [r0]
   162b0:	rsb	r4, r4, #0
   162b4:	b	16274 <__assert_fail@plt+0x4b18>
   162b8:	mvn	r4, #0
   162bc:	b	16268 <__assert_fail@plt+0x4b0c>
   162c0:	bl	11444 <__stack_chk_fail@plt>
   162c4:	andeq	r1, r1, ip, asr #25
   162c8:	andeq	r0, r0, r4, ror r1
   162cc:	andeq	r0, r8, r1
   162d0:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   162d4:	push	{r2, r3}
   162d8:	ldr	r3, [pc, #116]	; 16354 <__assert_fail@plt+0x4bf8>
   162dc:	ldr	r2, [pc, #116]	; 16358 <__assert_fail@plt+0x4bfc>
   162e0:	add	r3, pc, r3
   162e4:	push	{r4, r5, r6, lr}
   162e8:	sub	sp, sp, #8
   162ec:	ldr	r4, [r3, r2]
   162f0:	add	ip, sp, #28
   162f4:	mov	r2, ip
   162f8:	ldr	r3, [r4]
   162fc:	mov	r5, r1
   16300:	ldr	r1, [sp, #24]
   16304:	str	ip, [sp]
   16308:	str	r3, [sp, #4]
   1630c:	mov	r6, r0
   16310:	bl	1414c <__assert_fail@plt+0x29f0>
   16314:	subs	r2, r0, #0
   16318:	beq	16348 <__assert_fail@plt+0x4bec>
   1631c:	mov	r1, r5
   16320:	mov	r0, r6
   16324:	bl	161a0 <__assert_fail@plt+0x4a44>
   16328:	ldr	r2, [sp, #4]
   1632c:	ldr	r3, [r4]
   16330:	cmp	r2, r3
   16334:	bne	16350 <__assert_fail@plt+0x4bf4>
   16338:	add	sp, sp, #8
   1633c:	pop	{r4, r5, r6, lr}
   16340:	add	sp, sp, #8
   16344:	bx	lr
   16348:	mvn	r0, #21
   1634c:	b	16328 <__assert_fail@plt+0x4bcc>
   16350:	bl	11444 <__stack_chk_fail@plt>
   16354:	muleq	r1, r4, fp
   16358:	andeq	r0, r0, r4, ror r1
   1635c:	ldr	ip, [pc, #328]	; 164ac <__assert_fail@plt+0x4d50>
   16360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16364:	add	ip, pc, ip
   16368:	ldr	lr, [pc, #320]	; 164b0 <__assert_fail@plt+0x4d54>
   1636c:	sub	sp, sp, #60	; 0x3c
   16370:	mov	r9, r3
   16374:	ldr	r7, [ip, lr]
   16378:	mov	r3, ip
   1637c:	ldr	r1, [pc, #304]	; 164b4 <__assert_fail@plt+0x4d58>
   16380:	ldr	r3, [r7]
   16384:	mov	r8, r2
   16388:	ldr	r2, [sp, #96]	; 0x60
   1638c:	str	r3, [sp, #52]	; 0x34
   16390:	bl	14d24 <__assert_fail@plt+0x35c8>
   16394:	mov	r6, r0
   16398:	bl	115ac <__errno_location@plt>
   1639c:	cmp	r6, #0
   163a0:	mov	r5, r0
   163a4:	blt	16494 <__assert_fail@plt+0x4d38>
   163a8:	ldr	r2, [pc, #264]	; 164b8 <__assert_fail@plt+0x4d5c>
   163ac:	mov	r3, #21
   163b0:	add	r2, pc, r2
   163b4:	strd	r8, [sp, #8]
   163b8:	str	r2, [sp]
   163bc:	add	r0, sp, #28
   163c0:	mov	r1, r3
   163c4:	mov	r2, #1
   163c8:	mov	r8, r0
   163cc:	bl	11744 <__snprintf_chk@plt>
   163d0:	mov	r9, #0
   163d4:	add	sl, sp, #20
   163d8:	mov	r4, r0
   163dc:	str	r9, [r5]
   163e0:	mov	r2, r4
   163e4:	mov	r1, r8
   163e8:	mov	r0, r6
   163ec:	bl	11630 <write@plt>
   163f0:	cmp	r0, #0
   163f4:	ble	1642c <__assert_fail@plt+0x4cd0>
   163f8:	subs	r4, r4, r0
   163fc:	ldr	fp, [r5]
   16400:	beq	16448 <__assert_fail@plt+0x4cec>
   16404:	cmp	fp, #11
   16408:	add	r8, r8, r0
   1640c:	bne	163dc <__assert_fail@plt+0x4c80>
   16410:	ldr	r3, [pc, #164]	; 164bc <__assert_fail@plt+0x4d60>
   16414:	mov	r1, #0
   16418:	mov	r0, sl
   1641c:	str	r9, [sp, #20]
   16420:	str	r3, [sp, #24]
   16424:	bl	113b4 <nanosleep@plt>
   16428:	b	163dc <__assert_fail@plt+0x4c80>
   1642c:	ldr	fp, [r5]
   16430:	cmp	fp, #4
   16434:	cmpne	fp, #11
   16438:	bne	164a0 <__assert_fail@plt+0x4d44>
   1643c:	cmp	fp, #11
   16440:	bne	163dc <__assert_fail@plt+0x4c80>
   16444:	b	16410 <__assert_fail@plt+0x4cb4>
   16448:	cmp	fp, #11
   1644c:	bne	1646c <__assert_fail@plt+0x4d10>
   16450:	ldr	r3, [pc, #100]	; 164bc <__assert_fail@plt+0x4d60>
   16454:	mov	r1, r4
   16458:	add	r0, sp, #20
   1645c:	str	r4, [sp, #20]
   16460:	str	r3, [sp, #24]
   16464:	bl	113b4 <nanosleep@plt>
   16468:	ldr	fp, [r5]
   1646c:	mov	r0, r6
   16470:	bl	1172c <close@plt>
   16474:	str	fp, [r5]
   16478:	ldr	r2, [sp, #52]	; 0x34
   1647c:	ldr	r3, [r7]
   16480:	mov	r0, r4
   16484:	cmp	r2, r3
   16488:	bne	164a8 <__assert_fail@plt+0x4d4c>
   1648c:	add	sp, sp, #60	; 0x3c
   16490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16494:	ldr	r4, [r0]
   16498:	rsb	r4, r4, #0
   1649c:	b	16478 <__assert_fail@plt+0x4d1c>
   164a0:	mvn	r4, #0
   164a4:	b	1646c <__assert_fail@plt+0x4d10>
   164a8:	bl	11444 <__stack_chk_fail@plt>
   164ac:	andeq	r1, r1, r0, lsl fp
   164b0:	andeq	r0, r0, r4, ror r1
   164b4:	andeq	r0, r8, r1
   164b8:	andeq	r1, r0, ip, asr #16
   164bc:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   164c0:	ldr	ip, [pc, #328]	; 16610 <__assert_fail@plt+0x4eb4>
   164c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c8:	add	ip, pc, ip
   164cc:	ldr	lr, [pc, #320]	; 16614 <__assert_fail@plt+0x4eb8>
   164d0:	sub	sp, sp, #76	; 0x4c
   164d4:	mov	r9, r3
   164d8:	ldr	r7, [ip, lr]
   164dc:	mov	r3, ip
   164e0:	ldr	r1, [pc, #304]	; 16618 <__assert_fail@plt+0x4ebc>
   164e4:	ldr	r3, [r7]
   164e8:	mov	r8, r2
   164ec:	ldr	r2, [sp, #112]	; 0x70
   164f0:	str	r3, [sp, #68]	; 0x44
   164f4:	bl	14d24 <__assert_fail@plt+0x35c8>
   164f8:	mov	r6, r0
   164fc:	bl	115ac <__errno_location@plt>
   16500:	cmp	r6, #0
   16504:	mov	r5, r0
   16508:	blt	165f8 <__assert_fail@plt+0x4e9c>
   1650c:	ldr	r2, [pc, #264]	; 1661c <__assert_fail@plt+0x4ec0>
   16510:	mov	r3, #37	; 0x25
   16514:	add	r2, pc, r2
   16518:	strd	r8, [sp, #8]
   1651c:	str	r2, [sp]
   16520:	add	r0, sp, #28
   16524:	mov	r1, r3
   16528:	mov	r2, #1
   1652c:	mov	r8, r0
   16530:	bl	11744 <__snprintf_chk@plt>
   16534:	mov	r9, #0
   16538:	add	sl, sp, #20
   1653c:	mov	r4, r0
   16540:	str	r9, [r5]
   16544:	mov	r2, r4
   16548:	mov	r1, r8
   1654c:	mov	r0, r6
   16550:	bl	11630 <write@plt>
   16554:	cmp	r0, #0
   16558:	ble	16590 <__assert_fail@plt+0x4e34>
   1655c:	subs	r4, r4, r0
   16560:	ldr	fp, [r5]
   16564:	beq	165ac <__assert_fail@plt+0x4e50>
   16568:	cmp	fp, #11
   1656c:	add	r8, r8, r0
   16570:	bne	16540 <__assert_fail@plt+0x4de4>
   16574:	ldr	r3, [pc, #164]	; 16620 <__assert_fail@plt+0x4ec4>
   16578:	mov	r1, #0
   1657c:	mov	r0, sl
   16580:	str	r9, [sp, #20]
   16584:	str	r3, [sp, #24]
   16588:	bl	113b4 <nanosleep@plt>
   1658c:	b	16540 <__assert_fail@plt+0x4de4>
   16590:	ldr	fp, [r5]
   16594:	cmp	fp, #4
   16598:	cmpne	fp, #11
   1659c:	bne	16604 <__assert_fail@plt+0x4ea8>
   165a0:	cmp	fp, #11
   165a4:	bne	16540 <__assert_fail@plt+0x4de4>
   165a8:	b	16574 <__assert_fail@plt+0x4e18>
   165ac:	cmp	fp, #11
   165b0:	bne	165d0 <__assert_fail@plt+0x4e74>
   165b4:	ldr	r3, [pc, #100]	; 16620 <__assert_fail@plt+0x4ec4>
   165b8:	mov	r1, r4
   165bc:	add	r0, sp, #20
   165c0:	str	r4, [sp, #20]
   165c4:	str	r3, [sp, #24]
   165c8:	bl	113b4 <nanosleep@plt>
   165cc:	ldr	fp, [r5]
   165d0:	mov	r0, r6
   165d4:	bl	1172c <close@plt>
   165d8:	str	fp, [r5]
   165dc:	ldr	r2, [sp, #68]	; 0x44
   165e0:	ldr	r3, [r7]
   165e4:	mov	r0, r4
   165e8:	cmp	r2, r3
   165ec:	bne	1660c <__assert_fail@plt+0x4eb0>
   165f0:	add	sp, sp, #76	; 0x4c
   165f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165f8:	ldr	r4, [r0]
   165fc:	rsb	r4, r4, #0
   16600:	b	165dc <__assert_fail@plt+0x4e80>
   16604:	mvn	r4, #0
   16608:	b	165d0 <__assert_fail@plt+0x4e74>
   1660c:	bl	11444 <__stack_chk_fail@plt>
   16610:	andeq	r1, r1, ip, lsr #19
   16614:	andeq	r0, r0, r4, ror r1
   16618:	andeq	r0, r8, r1
   1661c:	strdeq	r1, [r0], -r0
   16620:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   16624:	ldr	r1, [pc, #124]	; 166a8 <__assert_fail@plt+0x4f4c>
   16628:	ldr	ip, [pc, #124]	; 166ac <__assert_fail@plt+0x4f50>
   1662c:	add	r1, pc, r1
   16630:	push	{r4, r5, r6, r7, lr}
   16634:	sub	sp, sp, #20
   16638:	ldr	r6, [r1, ip]
   1663c:	add	lr, sp, #44	; 0x2c
   16640:	mov	r5, r3
   16644:	mov	r3, r1
   16648:	ldr	r3, [r6]
   1664c:	mov	r4, r2
   16650:	ldr	r1, [sp, #40]	; 0x28
   16654:	mov	r2, lr
   16658:	str	lr, [sp, #8]
   1665c:	str	r3, [sp, #12]
   16660:	mov	r7, r0
   16664:	bl	1414c <__assert_fail@plt+0x29f0>
   16668:	cmp	r0, #0
   1666c:	beq	1669c <__assert_fail@plt+0x4f40>
   16670:	str	r0, [sp]
   16674:	mov	r2, r4
   16678:	mov	r3, r5
   1667c:	mov	r0, r7
   16680:	bl	164c0 <__assert_fail@plt+0x4d64>
   16684:	ldr	r2, [sp, #12]
   16688:	ldr	r3, [r6]
   1668c:	cmp	r2, r3
   16690:	bne	166a4 <__assert_fail@plt+0x4f48>
   16694:	add	sp, sp, #20
   16698:	pop	{r4, r5, r6, r7, pc}
   1669c:	mvn	r0, #21
   166a0:	b	16684 <__assert_fail@plt+0x4f28>
   166a4:	bl	11444 <__stack_chk_fail@plt>
   166a8:	andeq	r1, r1, r8, asr #16
   166ac:	andeq	r0, r0, r4, ror r1
   166b0:	push	{r4, r5, r6, r7, r8, lr}
   166b4:	bl	15308 <__assert_fail@plt+0x3bac>
   166b8:	subs	r6, r0, #0
   166bc:	moveq	r5, r6
   166c0:	beq	16720 <__assert_fail@plt+0x4fc4>
   166c4:	ldr	r8, [pc, #92]	; 16728 <__assert_fail@plt+0x4fcc>
   166c8:	ldr	r7, [pc, #92]	; 1672c <__assert_fail@plt+0x4fd0>
   166cc:	mov	r5, #0
   166d0:	add	r8, pc, r8
   166d4:	add	r7, pc, r7
   166d8:	mov	r0, r6
   166dc:	bl	116c0 <readdir64@plt>
   166e0:	mov	r1, r8
   166e4:	cmp	r0, #0
   166e8:	add	r4, r0, #19
   166ec:	mov	r0, r4
   166f0:	beq	16718 <__assert_fail@plt+0x4fbc>
   166f4:	bl	11354 <strcmp@plt>
   166f8:	mov	r1, r7
   166fc:	cmp	r0, #0
   16700:	mov	r0, r4
   16704:	beq	166d8 <__assert_fail@plt+0x4f7c>
   16708:	bl	11354 <strcmp@plt>
   1670c:	cmp	r0, #0
   16710:	addne	r5, r5, #1
   16714:	b	166d8 <__assert_fail@plt+0x4f7c>
   16718:	mov	r0, r6
   1671c:	bl	11738 <closedir@plt>
   16720:	mov	r0, r5
   16724:	pop	{r4, r5, r6, r7, r8, pc}
   16728:	andeq	r1, r0, r4, asr r3
   1672c:	andeq	r1, r0, r8, asr #10
   16730:	push	{r1, r2, r3}
   16734:	ldr	r3, [pc, #104]	; 167a4 <__assert_fail@plt+0x5048>
   16738:	ldr	r1, [pc, #104]	; 167a8 <__assert_fail@plt+0x504c>
   1673c:	add	r3, pc, r3
   16740:	push	{r4, r5, lr}
   16744:	sub	sp, sp, #8
   16748:	ldr	r4, [r3, r1]
   1674c:	add	ip, sp, #24
   16750:	ldr	r1, [sp, #20]
   16754:	ldr	r3, [r4]
   16758:	mov	r2, ip
   1675c:	str	ip, [sp]
   16760:	mov	r5, r0
   16764:	str	r3, [sp, #4]
   16768:	bl	1414c <__assert_fail@plt+0x29f0>
   1676c:	subs	r1, r0, #0
   16770:	moveq	r0, r1
   16774:	beq	16780 <__assert_fail@plt+0x5024>
   16778:	mov	r0, r5
   1677c:	bl	166b0 <__assert_fail@plt+0x4f54>
   16780:	ldr	r2, [sp, #4]
   16784:	ldr	r3, [r4]
   16788:	cmp	r2, r3
   1678c:	bne	167a0 <__assert_fail@plt+0x5044>
   16790:	add	sp, sp, #8
   16794:	pop	{r4, r5, lr}
   16798:	add	sp, sp, #12
   1679c:	bx	lr
   167a0:	bl	11444 <__stack_chk_fail@plt>
   167a4:	andeq	r1, r1, r8, lsr r7
   167a8:	andeq	r0, r0, r4, ror r1
   167ac:	ldr	r3, [pc, #184]	; 1686c <__assert_fail@plt+0x5110>
   167b0:	push	{r4, r5, r6, lr}
   167b4:	add	r3, pc, r3
   167b8:	ldr	lr, [pc, #176]	; 16870 <__assert_fail@plt+0x5114>
   167bc:	sub	sp, sp, #4096	; 0x1000
   167c0:	sub	sp, sp, #24
   167c4:	ldr	r5, [r3, lr]
   167c8:	mov	r6, r2
   167cc:	add	r2, sp, #4096	; 0x1000
   167d0:	add	r2, r2, #20
   167d4:	ldr	r3, [r5]
   167d8:	subs	ip, r1, #0
   167dc:	str	r3, [r2]
   167e0:	beq	16860 <__assert_fail@plt+0x5104>
   167e4:	cmp	r0, #0
   167e8:	beq	16850 <__assert_fail@plt+0x50f4>
   167ec:	ldrsb	r3, [ip]
   167f0:	ldr	r2, [pc, #124]	; 16874 <__assert_fail@plt+0x5118>
   167f4:	add	r4, sp, #20
   167f8:	cmp	r3, #47	; 0x2f
   167fc:	addeq	ip, ip, #1
   16800:	add	r2, pc, r2
   16804:	mov	r3, #4096	; 0x1000
   16808:	stmib	sp, {r0, ip}
   1680c:	str	r2, [sp]
   16810:	mov	r1, r3
   16814:	mov	r0, r4
   16818:	mov	r2, #1
   1681c:	bl	11744 <__snprintf_chk@plt>
   16820:	mov	r1, r6
   16824:	mov	r0, r4
   16828:	bl	116e4 <fopen64@plt>
   1682c:	add	r3, sp, #4096	; 0x1000
   16830:	add	r3, r3, #20
   16834:	ldr	r2, [r3]
   16838:	ldr	r3, [r5]
   1683c:	cmp	r2, r3
   16840:	bne	16868 <__assert_fail@plt+0x510c>
   16844:	add	sp, sp, #4096	; 0x1000
   16848:	add	sp, sp, #24
   1684c:	pop	{r4, r5, r6, pc}
   16850:	mov	r1, r6
   16854:	mov	r0, ip
   16858:	bl	116e4 <fopen64@plt>
   1685c:	b	1682c <__assert_fail@plt+0x50d0>
   16860:	mov	r0, ip
   16864:	b	1682c <__assert_fail@plt+0x50d0>
   16868:	bl	11444 <__stack_chk_fail@plt>
   1686c:	andeq	r1, r1, r0, asr #13
   16870:	andeq	r0, r0, r4, ror r1
   16874:	andeq	r1, r0, r8, ror r2
   16878:	push	{r3}		; (str r3, [sp, #-4]!)
   1687c:	ldr	r3, [pc, #88]	; 168dc <__assert_fail@plt+0x5180>
   16880:	ldr	ip, [pc, #88]	; 168e0 <__assert_fail@plt+0x5184>
   16884:	add	r3, pc, r3
   16888:	push	{r4, lr}
   1688c:	sub	sp, sp, #20
   16890:	ldr	r4, [r3, ip]
   16894:	ldr	lr, [sp, #28]
   16898:	add	ip, sp, #32
   1689c:	str	lr, [sp]
   168a0:	ldr	r3, [r4]
   168a4:	str	ip, [sp, #4]
   168a8:	str	r3, [sp, #12]
   168ac:	mov	r3, #0
   168b0:	str	ip, [sp, #8]
   168b4:	bl	1515c <__assert_fail@plt+0x3a00>
   168b8:	ldr	r2, [sp, #12]
   168bc:	ldr	r3, [r4]
   168c0:	cmp	r2, r3
   168c4:	bne	168d8 <__assert_fail@plt+0x517c>
   168c8:	add	sp, sp, #20
   168cc:	pop	{r4, lr}
   168d0:	add	sp, sp, #4
   168d4:	bx	lr
   168d8:	bl	11444 <__stack_chk_fail@plt>
   168dc:	strdeq	r1, [r1], -r0
   168e0:	andeq	r0, r0, r4, ror r1
   168e4:	push	{r3}		; (str r3, [sp, #-4]!)
   168e8:	ldr	r3, [pc, #88]	; 16948 <__assert_fail@plt+0x51ec>
   168ec:	ldr	ip, [pc, #88]	; 1694c <__assert_fail@plt+0x51f0>
   168f0:	add	r3, pc, r3
   168f4:	push	{r4, lr}
   168f8:	sub	sp, sp, #20
   168fc:	ldr	r4, [r3, ip]
   16900:	ldr	lr, [sp, #28]
   16904:	add	ip, sp, #32
   16908:	str	lr, [sp]
   1690c:	ldr	r3, [r4]
   16910:	str	ip, [sp, #4]
   16914:	str	r3, [sp, #12]
   16918:	mov	r3, #1
   1691c:	str	ip, [sp, #8]
   16920:	bl	1515c <__assert_fail@plt+0x3a00>
   16924:	ldr	r2, [sp, #12]
   16928:	ldr	r3, [r4]
   1692c:	cmp	r2, r3
   16930:	bne	16944 <__assert_fail@plt+0x51e8>
   16934:	add	sp, sp, #20
   16938:	pop	{r4, lr}
   1693c:	add	sp, sp, #4
   16940:	bx	lr
   16944:	bl	11444 <__stack_chk_fail@plt>
   16948:	andeq	r1, r1, r4, lsl #11
   1694c:	andeq	r0, r0, r4, ror r1
   16950:	ldr	r1, [pc]	; 16958 <__assert_fail@plt+0x51fc>
   16954:	b	114a4 <mkostemp64@plt>
   16958:	andeq	r0, r8, r2, asr #1
   1695c:	ldr	ip, [pc, #208]	; 16a34 <__assert_fail@plt+0x52d8>
   16960:	push	{r4, r5, r6, r7, lr}
   16964:	add	ip, pc, ip
   16968:	ldr	lr, [pc, #200]	; 16a38 <__assert_fail@plt+0x52dc>
   1696c:	sub	sp, sp, #20
   16970:	mov	r5, r2
   16974:	ldr	r4, [ip, lr]
   16978:	subs	r3, r1, #0
   1697c:	mov	r6, r0
   16980:	ldr	r2, [r4]
   16984:	mov	r0, ip
   16988:	str	r2, [sp, #12]
   1698c:	beq	169fc <__assert_fail@plt+0x52a0>
   16990:	ldr	r2, [pc, #164]	; 16a3c <__assert_fail@plt+0x52e0>
   16994:	str	r5, [sp]
   16998:	add	r2, pc, r2
   1699c:	mov	r1, #1
   169a0:	add	r0, sp, #8
   169a4:	bl	114c8 <__asprintf_chk@plt>
   169a8:	cmp	r0, #0
   169ac:	blt	16a28 <__assert_fail@plt+0x52cc>
   169b0:	mov	r0, #63	; 0x3f
   169b4:	bl	116fc <umask@plt>
   169b8:	mov	r7, r0
   169bc:	ldr	r0, [sp, #8]
   169c0:	bl	16950 <__assert_fail@plt+0x51f4>
   169c4:	mov	r5, r0
   169c8:	mov	r0, r7
   169cc:	bl	116fc <umask@plt>
   169d0:	cmn	r5, #1
   169d4:	beq	16a18 <__assert_fail@plt+0x52bc>
   169d8:	ldr	r3, [sp, #8]
   169dc:	str	r3, [r6]
   169e0:	ldr	r2, [sp, #12]
   169e4:	ldr	r3, [r4]
   169e8:	mov	r0, r5
   169ec:	cmp	r2, r3
   169f0:	bne	16a30 <__assert_fail@plt+0x52d4>
   169f4:	add	sp, sp, #20
   169f8:	pop	{r4, r5, r6, r7, pc}
   169fc:	ldr	r0, [pc, #60]	; 16a40 <__assert_fail@plt+0x52e4>
   16a00:	add	r0, pc, r0
   16a04:	bl	114d4 <getenv@plt>
   16a08:	subs	r3, r0, #0
   16a0c:	ldreq	r3, [pc, #48]	; 16a44 <__assert_fail@plt+0x52e8>
   16a10:	addeq	r3, pc, r3
   16a14:	b	16990 <__assert_fail@plt+0x5234>
   16a18:	ldr	r0, [sp, #8]
   16a1c:	bl	1139c <free@plt>
   16a20:	mov	r3, #0
   16a24:	b	169dc <__assert_fail@plt+0x5280>
   16a28:	mvn	r5, #0
   16a2c:	b	169e0 <__assert_fail@plt+0x5284>
   16a30:	bl	11444 <__stack_chk_fail@plt>
   16a34:	andeq	r1, r1, r0, lsl r5
   16a38:	andeq	r0, r0, r4, ror r1
   16a3c:	muleq	r0, r8, r2
   16a40:	andeq	r1, r0, r8, lsr #4
   16a44:	andeq	r1, r0, r0, lsl r2
   16a48:	push	{r4, r5, r6, lr}
   16a4c:	mov	r2, r1
   16a50:	ldr	r1, [pc, #108]	; 16ac4 <__assert_fail@plt+0x5368>
   16a54:	mov	r5, r0
   16a58:	bl	11660 <fcntl64@plt>
   16a5c:	subs	r4, r0, #0
   16a60:	blt	16a6c <__assert_fail@plt+0x5310>
   16a64:	mov	r0, r4
   16a68:	pop	{r4, r5, r6, pc}
   16a6c:	mov	r0, r5
   16a70:	bl	11450 <dup@plt>
   16a74:	subs	r4, r0, #0
   16a78:	blt	16a64 <__assert_fail@plt+0x5308>
   16a7c:	mov	r1, #1
   16a80:	bl	11660 <fcntl64@plt>
   16a84:	subs	r2, r0, #0
   16a88:	blt	16aa4 <__assert_fail@plt+0x5348>
   16a8c:	orr	r2, r2, #1
   16a90:	mov	r1, #2
   16a94:	mov	r0, r4
   16a98:	bl	11660 <fcntl64@plt>
   16a9c:	cmp	r0, #0
   16aa0:	bge	16a64 <__assert_fail@plt+0x5308>
   16aa4:	bl	115ac <__errno_location@plt>
   16aa8:	mov	r5, r0
   16aac:	mov	r0, r4
   16ab0:	ldr	r6, [r5]
   16ab4:	mvn	r4, #0
   16ab8:	bl	1172c <close@plt>
   16abc:	str	r6, [r5]
   16ac0:	b	16a64 <__assert_fail@plt+0x5308>
   16ac4:	andeq	r0, r0, r6, lsl #8
   16ac8:	b	11510 <getdtablesize@plt>
   16acc:	subs	r3, r0, #0
   16ad0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ad4:	beq	16bcc <__assert_fail@plt+0x5470>
   16ad8:	ldrsb	r3, [r3]
   16adc:	cmp	r3, #0
   16ae0:	beq	16bcc <__assert_fail@plt+0x5470>
   16ae4:	mov	r9, r1
   16ae8:	bl	11438 <strdup@plt>
   16aec:	subs	r8, r0, #0
   16af0:	beq	16bd4 <__assert_fail@plt+0x5478>
   16af4:	ldrsb	r3, [r8]
   16af8:	cmp	r3, #47	; 0x2f
   16afc:	addeq	r4, r8, #1
   16b00:	ldrsbeq	r3, [r8, #1]
   16b04:	movne	r4, r8
   16b08:	cmp	r3, #0
   16b0c:	beq	16b9c <__assert_fail@plt+0x5440>
   16b10:	mov	r6, #47	; 0x2f
   16b14:	mov	r7, #0
   16b18:	b	16b48 <__assert_fail@plt+0x53ec>
   16b1c:	strb	r7, [r5]
   16b20:	ldrsb	r3, [r4]
   16b24:	cmp	r3, #0
   16b28:	bne	16ba4 <__assert_fail@plt+0x5448>
   16b2c:	mov	r4, r5
   16b30:	strb	r6, [r4], #1
   16b34:	cmp	r4, #0
   16b38:	beq	16b9c <__assert_fail@plt+0x5440>
   16b3c:	ldrsb	r3, [r5, #1]
   16b40:	cmp	r3, #0
   16b44:	beq	16b9c <__assert_fail@plt+0x5440>
   16b48:	mov	r1, #47	; 0x2f
   16b4c:	mov	r0, r4
   16b50:	bl	11588 <strchr@plt>
   16b54:	subs	r5, r0, #0
   16b58:	bne	16b1c <__assert_fail@plt+0x53c0>
   16b5c:	ldrsb	r3, [r4]
   16b60:	cmp	r3, #0
   16b64:	beq	16b9c <__assert_fail@plt+0x5440>
   16b68:	mov	r1, r9
   16b6c:	mov	r0, r8
   16b70:	bl	115d0 <mkdir@plt>
   16b74:	subs	r4, r0, #0
   16b78:	beq	16b9c <__assert_fail@plt+0x5440>
   16b7c:	bl	115ac <__errno_location@plt>
   16b80:	ldr	r3, [r0]
   16b84:	cmp	r3, #17
   16b88:	beq	16b9c <__assert_fail@plt+0x5440>
   16b8c:	mov	r0, r8
   16b90:	bl	1139c <free@plt>
   16b94:	mov	r0, r4
   16b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b9c:	mov	r4, #0
   16ba0:	b	16b8c <__assert_fail@plt+0x5430>
   16ba4:	mov	r1, r9
   16ba8:	mov	r0, r8
   16bac:	bl	115d0 <mkdir@plt>
   16bb0:	subs	r4, r0, #0
   16bb4:	beq	16b2c <__assert_fail@plt+0x53d0>
   16bb8:	bl	115ac <__errno_location@plt>
   16bbc:	ldr	r3, [r0]
   16bc0:	cmp	r3, #17
   16bc4:	beq	16b2c <__assert_fail@plt+0x53d0>
   16bc8:	b	16b8c <__assert_fail@plt+0x5430>
   16bcc:	mvn	r4, #21
   16bd0:	b	16b94 <__assert_fail@plt+0x5438>
   16bd4:	mvn	r4, #11
   16bd8:	b	16b94 <__assert_fail@plt+0x5438>
   16bdc:	subs	r3, r0, #0
   16be0:	beq	16c00 <__assert_fail@plt+0x54a4>
   16be4:	push	{r4, lr}
   16be8:	mov	r1, #47	; 0x2f
   16bec:	bl	11684 <strrchr@plt>
   16bf0:	cmp	r0, #0
   16bf4:	movne	r3, #0
   16bf8:	strbne	r3, [r0], #1
   16bfc:	pop	{r4, pc}
   16c00:	mov	r0, r3
   16c04:	bx	lr
   16c08:	push	{r4, r5, r6, lr}
   16c0c:	mov	r6, r1
   16c10:	mov	r5, r2
   16c14:	mov	r4, r0
   16c18:	bl	1163c <__sched_cpualloc@plt>
   16c1c:	cmp	r0, #0
   16c20:	popeq	{r4, r5, r6, pc}
   16c24:	cmp	r6, #0
   16c28:	addne	r3, r4, #31
   16c2c:	lsrne	r3, r3, #5
   16c30:	lslne	r3, r3, #2
   16c34:	strne	r3, [r6]
   16c38:	cmp	r5, #0
   16c3c:	addne	r4, r4, #31
   16c40:	bicne	r4, r4, #31
   16c44:	strne	r4, [r5]
   16c48:	pop	{r4, r5, r6, pc}
   16c4c:	b	115e8 <__sched_cpufree@plt>
   16c50:	ldr	r3, [pc, #212]	; 16d2c <__assert_fail@plt+0x55d0>
   16c54:	ldr	r2, [pc, #212]	; 16d30 <__assert_fail@plt+0x55d4>
   16c58:	add	r3, pc, r3
   16c5c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16c60:	sub	sp, sp, #12
   16c64:	ldr	r9, [r3, r2]
   16c68:	mov	r7, sp
   16c6c:	mov	r1, r7
   16c70:	ldr	r3, [r9]
   16c74:	mov	r2, #0
   16c78:	mov	r0, #2048	; 0x800
   16c7c:	str	r3, [sp, #4]
   16c80:	bl	16c08 <__assert_fail@plt+0x54ac>
   16c84:	subs	r4, r0, #0
   16c88:	movne	r5, #2048	; 0x800
   16c8c:	ldrne	r8, [pc, #160]	; 16d34 <__assert_fail@plt+0x55d8>
   16c90:	bne	16cbc <__assert_fail@plt+0x5560>
   16c94:	b	16d20 <__assert_fail@plt+0x55c4>
   16c98:	mov	r0, r4
   16c9c:	lsl	r5, r5, #1
   16ca0:	bl	16c4c <__assert_fail@plt+0x54f0>
   16ca4:	mov	r0, r5
   16ca8:	mov	r2, #0
   16cac:	mov	r1, r7
   16cb0:	bl	16c08 <__assert_fail@plt+0x54ac>
   16cb4:	subs	r4, r0, #0
   16cb8:	beq	16d20 <__assert_fail@plt+0x55c4>
   16cbc:	ldr	r2, [sp]
   16cc0:	mov	r1, #0
   16cc4:	mov	r0, r4
   16cc8:	bl	115f4 <memset@plt>
   16ccc:	mov	r3, r4
   16cd0:	ldr	r2, [sp]
   16cd4:	mov	r1, #0
   16cd8:	mov	r0, #242	; 0xf2
   16cdc:	bl	11564 <syscall@plt>
   16ce0:	subs	r6, r0, #0
   16ce4:	bge	16cfc <__assert_fail@plt+0x55a0>
   16ce8:	bl	115ac <__errno_location@plt>
   16cec:	ldr	r3, [r0]
   16cf0:	cmp	r5, r8
   16cf4:	cmple	r3, #22
   16cf8:	beq	16c98 <__assert_fail@plt+0x553c>
   16cfc:	mov	r0, r4
   16d00:	bl	16c4c <__assert_fail@plt+0x54f0>
   16d04:	lsl	r0, r6, #3
   16d08:	ldr	r2, [sp, #4]
   16d0c:	ldr	r3, [r9]
   16d10:	cmp	r2, r3
   16d14:	bne	16d28 <__assert_fail@plt+0x55cc>
   16d18:	add	sp, sp, #12
   16d1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16d20:	mvn	r0, #0
   16d24:	b	16d08 <__assert_fail@plt+0x55ac>
   16d28:	bl	11444 <__stack_chk_fail@plt>
   16d2c:	andeq	r1, r1, ip, lsl r2
   16d30:	andeq	r0, r0, r4, ror r1
   16d34:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   16d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d3c:	lsls	r7, r3, #3
   16d40:	sub	sp, sp, #28
   16d44:	mov	sl, r0
   16d48:	beq	16ee4 <__assert_fail@plt+0x5788>
   16d4c:	mov	r5, r3
   16d50:	ldr	r3, [pc, #404]	; 16eec <__assert_fail@plt+0x5790>
   16d54:	ldr	fp, [pc, #404]	; 16ef0 <__assert_fail@plt+0x5794>
   16d58:	add	r3, pc, r3
   16d5c:	str	r3, [sp, #16]
   16d60:	ldr	r3, [pc, #396]	; 16ef4 <__assert_fail@plt+0x5798>
   16d64:	mov	r9, r1
   16d68:	add	r3, pc, r3
   16d6c:	mov	r1, #0
   16d70:	mov	r6, r2
   16d74:	add	fp, pc, fp
   16d78:	str	r3, [sp, #20]
   16d7c:	mov	ip, r1
   16d80:	mov	r8, r0
   16d84:	b	16d94 <__assert_fail@plt+0x5638>
   16d88:	cmp	r7, r4
   16d8c:	mov	ip, r4
   16d90:	bls	16e70 <__assert_fail@plt+0x5714>
   16d94:	cmp	r5, ip, lsr #3
   16d98:	add	r4, ip, #1
   16d9c:	bls	16d88 <__assert_fail@plt+0x562c>
   16da0:	lsr	r2, ip, #5
   16da4:	and	r3, ip, #31
   16da8:	ldr	r2, [r6, r2, lsl #2]
   16dac:	lsr	r3, r2, r3
   16db0:	tst	r3, #1
   16db4:	beq	16d88 <__assert_fail@plt+0x562c>
   16db8:	cmp	r7, r4
   16dbc:	bls	16e88 <__assert_fail@plt+0x572c>
   16dc0:	cmp	r5, r4, lsr #3
   16dc4:	bls	16e88 <__assert_fail@plt+0x572c>
   16dc8:	lsr	r2, r4, #5
   16dcc:	and	r3, r4, #31
   16dd0:	ldr	r2, [r6, r2, lsl #2]
   16dd4:	lsr	r3, r2, r3
   16dd8:	tst	r3, #1
   16ddc:	beq	16e88 <__assert_fail@plt+0x572c>
   16de0:	sub	r0, r7, #1
   16de4:	sub	r0, r0, ip
   16de8:	mov	r2, #1
   16dec:	b	16e10 <__assert_fail@plt+0x56b4>
   16df0:	cmp	r5, r3, lsr #3
   16df4:	bls	16e24 <__assert_fail@plt+0x56c8>
   16df8:	ldr	r3, [r6, lr, lsl #2]
   16dfc:	add	lr, r2, #1
   16e00:	lsr	r3, r3, r1
   16e04:	tst	r3, #1
   16e08:	beq	16e24 <__assert_fail@plt+0x56c8>
   16e0c:	mov	r2, lr
   16e10:	add	r3, r2, r4
   16e14:	cmp	r0, r2
   16e18:	and	r1, r3, #31
   16e1c:	lsr	lr, r3, #5
   16e20:	bne	16df0 <__assert_fail@plt+0x5694>
   16e24:	cmp	r2, #1
   16e28:	beq	16ec0 <__assert_fail@plt+0x5764>
   16e2c:	add	r4, ip, r2
   16e30:	str	r4, [sp, #8]
   16e34:	stm	sp, {fp, ip}
   16e38:	mvn	r3, #0
   16e3c:	mov	r2, #1
   16e40:	mov	r1, r9
   16e44:	mov	r0, r8
   16e48:	bl	11744 <__snprintf_chk@plt>
   16e4c:	cmp	r0, r9
   16e50:	bcs	16eb4 <__assert_fail@plt+0x5758>
   16e54:	add	r4, r4, #1
   16e58:	cmp	r7, r4
   16e5c:	add	r8, r8, r0
   16e60:	sub	r9, r9, r0
   16e64:	mov	r1, #1
   16e68:	mov	ip, r4
   16e6c:	bhi	16d94 <__assert_fail@plt+0x5638>
   16e70:	sub	r8, r8, r1
   16e74:	mov	r3, #0
   16e78:	mov	r0, sl
   16e7c:	strb	r3, [r8]
   16e80:	add	sp, sp, #28
   16e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e88:	ldr	r3, [sp, #16]
   16e8c:	str	ip, [sp, #4]
   16e90:	str	r3, [sp]
   16e94:	mov	r2, #1
   16e98:	mvn	r3, #0
   16e9c:	mov	r1, r9
   16ea0:	mov	r0, r8
   16ea4:	mov	r4, ip
   16ea8:	bl	11744 <__snprintf_chk@plt>
   16eac:	cmp	r0, r9
   16eb0:	bcc	16e54 <__assert_fail@plt+0x56f8>
   16eb4:	mov	r0, #0
   16eb8:	add	sp, sp, #28
   16ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec0:	ldr	r3, [sp, #20]
   16ec4:	str	r4, [sp, #8]
   16ec8:	str	r3, [sp]
   16ecc:	str	ip, [sp, #4]
   16ed0:	mvn	r3, #0
   16ed4:	mov	r1, r9
   16ed8:	mov	r0, r8
   16edc:	bl	11744 <__snprintf_chk@plt>
   16ee0:	b	16e4c <__assert_fail@plt+0x56f0>
   16ee4:	mov	r8, r0
   16ee8:	b	16e74 <__assert_fail@plt+0x5718>
   16eec:	andeq	r0, r0, ip, ror #29
   16ef0:	ldrdeq	r0, [r0], -r8
   16ef4:	ldrdeq	r0, [r0], -r8
   16ef8:	lsl	ip, r3, #3
   16efc:	subs	ip, ip, #4
   16f00:	push	{r4, r5, r6, r7, r8, lr}
   16f04:	mov	r7, r0
   16f08:	mov	r6, r0
   16f0c:	bmi	17028 <__assert_fail@plt+0x58cc>
   16f10:	cmp	r1, #0
   16f14:	beq	17028 <__assert_fail@plt+0x58cc>
   16f18:	mov	r0, #0
   16f1c:	b	16f74 <__assert_fail@plt+0x5818>
   16f20:	lsr	r8, r5, #5
   16f24:	and	r5, r5, #31
   16f28:	ldr	r8, [r2, r8, lsl #2]
   16f2c:	lsr	r5, r8, r5
   16f30:	tst	r5, #1
   16f34:	beq	16fec <__assert_fail@plt+0x5890>
   16f38:	orr	r4, lr, #8
   16f3c:	cmp	r0, #0
   16f40:	moveq	r0, r6
   16f44:	cmp	r4, #9
   16f48:	mov	lr, r4
   16f4c:	addgt	lr, r4, #87	; 0x57
   16f50:	ble	16ffc <__assert_fail@plt+0x58a0>
   16f54:	mov	r4, r6
   16f58:	subs	ip, ip, #4
   16f5c:	strb	lr, [r4], #1
   16f60:	bmi	17010 <__assert_fail@plt+0x58b4>
   16f64:	sub	lr, r4, r7
   16f68:	cmp	lr, r1
   16f6c:	beq	17010 <__assert_fail@plt+0x58b4>
   16f70:	mov	r6, r4
   16f74:	cmp	r3, ip, lsr #3
   16f78:	lsrhi	r4, ip, #5
   16f7c:	andhi	lr, ip, #31
   16f80:	ldrhi	r4, [r2, r4, lsl #2]
   16f84:	movls	lr, #0
   16f88:	lsrhi	lr, r4, lr
   16f8c:	add	r4, ip, #1
   16f90:	andhi	lr, lr, #1
   16f94:	cmp	r3, r4, lsr #3
   16f98:	bls	16fb4 <__assert_fail@plt+0x5858>
   16f9c:	lsr	r5, r4, #5
   16fa0:	and	r4, r4, #31
   16fa4:	ldr	r5, [r2, r5, lsl #2]
   16fa8:	lsr	r4, r5, r4
   16fac:	tst	r4, #1
   16fb0:	orrne	lr, lr, #2
   16fb4:	add	r4, ip, #2
   16fb8:	cmp	r3, r4, lsr #3
   16fbc:	bls	16fd8 <__assert_fail@plt+0x587c>
   16fc0:	lsr	r5, r4, #5
   16fc4:	and	r4, r4, #31
   16fc8:	ldr	r5, [r2, r5, lsl #2]
   16fcc:	lsr	r4, r5, r4
   16fd0:	tst	r4, #1
   16fd4:	orrne	lr, lr, #4
   16fd8:	add	r5, ip, #3
   16fdc:	clz	r4, r0
   16fe0:	cmp	r3, r5, lsr #3
   16fe4:	lsr	r4, r4, #5
   16fe8:	bhi	16f20 <__assert_fail@plt+0x57c4>
   16fec:	cmp	lr, #0
   16ff0:	moveq	r4, #0
   16ff4:	cmp	r4, #0
   16ff8:	movne	r0, r6
   16ffc:	mov	r4, r6
   17000:	add	lr, lr, #48	; 0x30
   17004:	subs	ip, ip, #4
   17008:	strb	lr, [r4], #1
   1700c:	bpl	16f64 <__assert_fail@plt+0x5808>
   17010:	cmp	r0, #0
   17014:	mov	r3, #0
   17018:	strb	r3, [r4]
   1701c:	popne	{r4, r5, r6, r7, r8, pc}
   17020:	mov	r0, r6
   17024:	pop	{r4, r5, r6, r7, r8, pc}
   17028:	mov	r3, #0
   1702c:	strb	r3, [r6], #-1
   17030:	mov	r0, r6
   17034:	pop	{r4, r5, r6, r7, r8, pc}
   17038:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1703c:	mov	r7, r0
   17040:	mov	r6, r1
   17044:	mov	r9, r2
   17048:	bl	1157c <strlen@plt>
   1704c:	cmp	r0, #1
   17050:	sub	r0, r0, #1
   17054:	add	r4, r7, r0
   17058:	bls	17068 <__assert_fail@plt+0x590c>
   1705c:	ldrb	r3, [r7]
   17060:	cmp	r3, #48	; 0x30
   17064:	beq	17178 <__assert_fail@plt+0x5a1c>
   17068:	mov	r2, r9
   1706c:	mov	r1, #0
   17070:	mov	r0, r6
   17074:	bl	115f4 <memset@plt>
   17078:	cmp	r7, r4
   1707c:	movls	r5, #0
   17080:	movls	r8, #1
   17084:	bls	17134 <__assert_fail@plt+0x59d8>
   17088:	b	17170 <__assert_fail@plt+0x5a14>
   1708c:	sxtb	r0, r3
   17090:	cmn	r0, #1
   17094:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17098:	tst	r3, #1
   1709c:	beq	170b8 <__assert_fail@plt+0x595c>
   170a0:	cmp	r9, r5, lsr #3
   170a4:	lsrhi	r0, r5, #5
   170a8:	andhi	r2, r5, #31
   170ac:	ldrhi	r1, [r6, r0, lsl #2]
   170b0:	orrhi	r2, r1, r8, lsl r2
   170b4:	strhi	r2, [r6, r0, lsl #2]
   170b8:	tst	r3, #2
   170bc:	beq	170dc <__assert_fail@plt+0x5980>
   170c0:	add	r2, r5, #1
   170c4:	cmp	r9, r2, lsr #3
   170c8:	lsrhi	r0, r2, #5
   170cc:	andhi	r2, r2, #31
   170d0:	ldrhi	r1, [r6, r0, lsl #2]
   170d4:	orrhi	r2, r1, r8, lsl r2
   170d8:	strhi	r2, [r6, r0, lsl #2]
   170dc:	tst	r3, #4
   170e0:	beq	17100 <__assert_fail@plt+0x59a4>
   170e4:	add	r2, r5, #2
   170e8:	cmp	r9, r2, lsr #3
   170ec:	lsrhi	r0, r2, #5
   170f0:	andhi	r2, r2, #31
   170f4:	ldrhi	r1, [r6, r0, lsl #2]
   170f8:	orrhi	r2, r1, r8, lsl r2
   170fc:	strhi	r2, [r6, r0, lsl #2]
   17100:	tst	r3, #8
   17104:	beq	17124 <__assert_fail@plt+0x59c8>
   17108:	add	r3, r5, #3
   1710c:	cmp	r9, r3, lsr #3
   17110:	lsrhi	r1, r3, #5
   17114:	andhi	r3, r3, #31
   17118:	ldrhi	r2, [r6, r1, lsl #2]
   1711c:	orrhi	r3, r2, r8, lsl r3
   17120:	strhi	r3, [r6, r1, lsl #2]
   17124:	sub	r4, r4, #1
   17128:	cmp	r7, r4
   1712c:	add	r5, r5, #4
   17130:	bhi	17170 <__assert_fail@plt+0x5a14>
   17134:	ldrsb	sl, [r4]
   17138:	cmp	sl, #44	; 0x2c
   1713c:	ldrsbeq	sl, [r4, #-1]
   17140:	subeq	r4, r4, #1
   17144:	sub	r3, sl, #48	; 0x30
   17148:	cmp	r3, #9
   1714c:	bls	1708c <__assert_fail@plt+0x5930>
   17150:	bl	1151c <__ctype_tolower_loc@plt>
   17154:	ldr	r3, [r0]
   17158:	ldr	r3, [r3, sl, lsl #2]
   1715c:	sub	r2, r3, #97	; 0x61
   17160:	cmp	r2, #5
   17164:	bhi	17188 <__assert_fail@plt+0x5a2c>
   17168:	sub	r3, r3, #87	; 0x57
   1716c:	b	17098 <__assert_fail@plt+0x593c>
   17170:	mov	r0, #0
   17174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17178:	ldrb	r3, [r7, #1]
   1717c:	cmp	r3, #120	; 0x78
   17180:	addeq	r7, r7, #2
   17184:	b	17068 <__assert_fail@plt+0x590c>
   17188:	mvn	r0, #0
   1718c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17190:	ldr	ip, [pc, #584]	; 173e0 <__assert_fail@plt+0x5c84>
   17194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17198:	add	ip, pc, ip
   1719c:	ldr	lr, [pc, #576]	; 173e4 <__assert_fail@plt+0x5c88>
   171a0:	mov	r6, r1
   171a4:	sub	sp, sp, #52	; 0x34
   171a8:	ldr	r1, [ip, lr]
   171ac:	mov	sl, r0
   171b0:	mov	lr, r1
   171b4:	str	r1, [sp, #16]
   171b8:	ldr	lr, [lr]
   171bc:	mov	r1, #0
   171c0:	mov	r0, r6
   171c4:	str	r3, [sp, #8]
   171c8:	mov	r4, r2
   171cc:	str	lr, [sp, #44]	; 0x2c
   171d0:	lsl	r5, r2, #3
   171d4:	bl	115f4 <memset@plt>
   171d8:	mov	r3, #0
   171dc:	str	r3, [sp]
   171e0:	ldr	r3, [pc, #512]	; 173e8 <__assert_fail@plt+0x5c8c>
   171e4:	cmp	sl, #0
   171e8:	add	r3, pc, r3
   171ec:	str	r3, [sp, #4]
   171f0:	ldr	r3, [pc, #500]	; 173ec <__assert_fail@plt+0x5c90>
   171f4:	add	r3, pc, r3
   171f8:	str	r3, [sp, #20]
   171fc:	beq	17310 <__assert_fail@plt+0x5bb4>
   17200:	mov	r1, #44	; 0x2c
   17204:	mov	r0, sl
   17208:	bl	11588 <strchr@plt>
   1720c:	subs	r9, r0, #0
   17210:	addne	r9, r9, #1
   17214:	add	r3, sp, #31
   17218:	add	r2, sp, #32
   1721c:	ldr	r1, [sp, #4]
   17220:	mov	r0, sl
   17224:	str	r3, [sp, #12]
   17228:	bl	116a8 <sscanf@plt>
   1722c:	subs	r3, r0, #0
   17230:	str	r3, [sp]
   17234:	ble	173a8 <__assert_fail@plt+0x5c4c>
   17238:	ldr	fp, [sp, #32]
   1723c:	mov	r7, #1
   17240:	mov	r1, #45	; 0x2d
   17244:	mov	r0, sl
   17248:	str	fp, [sp, #36]	; 0x24
   1724c:	str	r7, [sp, #40]	; 0x28
   17250:	bl	11588 <strchr@plt>
   17254:	subs	r8, r0, #0
   17258:	beq	1729c <__assert_fail@plt+0x5b40>
   1725c:	mov	r0, sl
   17260:	mov	r1, #44	; 0x2c
   17264:	bl	11588 <strchr@plt>
   17268:	add	r8, r8, r7
   1726c:	subs	sl, r0, #0
   17270:	beq	17344 <__assert_fail@plt+0x5be8>
   17274:	cmp	r8, #0
   17278:	add	sl, sl, r7
   1727c:	beq	1729c <__assert_fail@plt+0x5b40>
   17280:	clz	r7, sl
   17284:	lsr	r7, r7, #5
   17288:	cmp	sl, r8
   1728c:	movls	r2, r7
   17290:	orrhi	r2, r7, #1
   17294:	cmp	r2, #0
   17298:	bne	1734c <__assert_fail@plt+0x5bf0>
   1729c:	mov	lr, fp
   172a0:	ldr	r3, [sp, #8]
   172a4:	adds	ip, r3, #0
   172a8:	movne	ip, #1
   172ac:	cmp	r5, fp
   172b0:	movhi	r2, #0
   172b4:	andls	r2, ip, #1
   172b8:	cmp	r2, #0
   172bc:	bne	17324 <__assert_fail@plt+0x5bc8>
   172c0:	ldr	r7, [sp, #40]	; 0x28
   172c4:	mov	r8, #1
   172c8:	b	172e0 <__assert_fail@plt+0x5b84>
   172cc:	cmp	fp, r5
   172d0:	movcc	r3, #0
   172d4:	andcs	r3, ip, #1
   172d8:	cmp	r3, #0
   172dc:	bne	17324 <__assert_fail@plt+0x5bc8>
   172e0:	cmp	r4, fp, lsr #3
   172e4:	lsrhi	r1, fp, #5
   172e8:	andhi	r3, fp, #31
   172ec:	ldrhi	r2, [r6, r1, lsl #2]
   172f0:	add	fp, fp, r7
   172f4:	orrhi	r3, r2, r8, lsl r3
   172f8:	strhi	r3, [r6, r1, lsl #2]
   172fc:	cmp	fp, lr
   17300:	bls	172cc <__assert_fail@plt+0x5b70>
   17304:	mov	sl, r9
   17308:	cmp	sl, #0
   1730c:	bne	17200 <__assert_fail@plt+0x5aa4>
   17310:	ldr	r3, [sp]
   17314:	sub	r0, r3, #2
   17318:	clz	r0, r0
   1731c:	lsr	r0, r0, #5
   17320:	b	17328 <__assert_fail@plt+0x5bcc>
   17324:	mov	r0, #2
   17328:	ldr	r3, [sp, #16]
   1732c:	ldr	r2, [sp, #44]	; 0x2c
   17330:	ldr	r3, [r3]
   17334:	cmp	r2, r3
   17338:	bne	173dc <__assert_fail@plt+0x5c80>
   1733c:	add	sp, sp, #52	; 0x34
   17340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17344:	cmp	r8, #0
   17348:	beq	1729c <__assert_fail@plt+0x5b40>
   1734c:	ldr	r3, [sp, #12]
   17350:	add	r2, sp, #36	; 0x24
   17354:	ldr	r1, [sp, #20]
   17358:	mov	r0, r8
   1735c:	bl	116a8 <sscanf@plt>
   17360:	subs	r3, r0, #0
   17364:	str	r3, [sp]
   17368:	ble	173a8 <__assert_fail@plt+0x5c4c>
   1736c:	mov	r0, r8
   17370:	mov	r1, #58	; 0x3a
   17374:	bl	11588 <strchr@plt>
   17378:	cmp	r0, #0
   1737c:	beq	17398 <__assert_fail@plt+0x5c3c>
   17380:	adds	r0, r0, #1
   17384:	beq	17398 <__assert_fail@plt+0x5c3c>
   17388:	cmp	r0, sl
   1738c:	orrcc	r7, r7, #1
   17390:	cmp	r7, #0
   17394:	bne	173b0 <__assert_fail@plt+0x5c54>
   17398:	ldr	fp, [sp, #32]
   1739c:	ldr	lr, [sp, #36]	; 0x24
   173a0:	cmp	fp, lr
   173a4:	bls	172a0 <__assert_fail@plt+0x5b44>
   173a8:	mov	r0, #1
   173ac:	b	17328 <__assert_fail@plt+0x5bcc>
   173b0:	ldr	r3, [sp, #12]
   173b4:	add	r2, sp, #40	; 0x28
   173b8:	ldr	r1, [sp, #20]
   173bc:	bl	116a8 <sscanf@plt>
   173c0:	subs	r3, r0, #0
   173c4:	str	r3, [sp]
   173c8:	ble	173a8 <__assert_fail@plt+0x5c4c>
   173cc:	ldr	r3, [sp, #40]	; 0x28
   173d0:	cmp	r3, #0
   173d4:	bne	17398 <__assert_fail@plt+0x5c3c>
   173d8:	b	173a8 <__assert_fail@plt+0x5c4c>
   173dc:	bl	11444 <__stack_chk_fail@plt>
   173e0:	ldrdeq	r0, [r1], -ip
   173e4:	andeq	r0, r0, r4, ror r1
   173e8:	andeq	r0, r0, r4, ror sl
   173ec:	andeq	r0, r0, r8, ror #20
   173f0:	cmp	r3, #0
   173f4:	cmpeq	r2, #0
   173f8:	bne	17410 <__assert_fail@plt+0x5cb4>
   173fc:	cmp	r1, #0
   17400:	cmpeq	r0, #0
   17404:	mvnne	r1, #0
   17408:	mvnne	r0, #0
   1740c:	b	1742c <__assert_fail@plt+0x5cd0>
   17410:	sub	sp, sp, #8
   17414:	push	{sp, lr}
   17418:	bl	1743c <__assert_fail@plt+0x5ce0>
   1741c:	ldr	lr, [sp, #4]
   17420:	add	sp, sp, #8
   17424:	pop	{r2, r3}
   17428:	bx	lr
   1742c:	push	{r1, lr}
   17430:	mov	r0, #8
   17434:	bl	11348 <raise@plt>
   17438:	pop	{r1, pc}
   1743c:	cmp	r1, r3
   17440:	cmpeq	r0, r2
   17444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17448:	mov	r4, r0
   1744c:	movcc	r0, #0
   17450:	mov	r5, r1
   17454:	ldr	lr, [sp, #36]	; 0x24
   17458:	movcc	r1, r0
   1745c:	bcc	17558 <__assert_fail@plt+0x5dfc>
   17460:	cmp	r3, #0
   17464:	clzeq	ip, r2
   17468:	clzne	ip, r3
   1746c:	addeq	ip, ip, #32
   17470:	cmp	r5, #0
   17474:	clzeq	r1, r4
   17478:	addeq	r1, r1, #32
   1747c:	clzne	r1, r5
   17480:	sub	ip, ip, r1
   17484:	sub	sl, ip, #32
   17488:	lsl	r9, r3, ip
   1748c:	rsb	fp, ip, #32
   17490:	orr	r9, r9, r2, lsl sl
   17494:	orr	r9, r9, r2, lsr fp
   17498:	lsl	r8, r2, ip
   1749c:	cmp	r5, r9
   174a0:	cmpeq	r4, r8
   174a4:	movcc	r0, #0
   174a8:	movcc	r1, r0
   174ac:	bcc	174c8 <__assert_fail@plt+0x5d6c>
   174b0:	mov	r0, #1
   174b4:	subs	r4, r4, r8
   174b8:	lsl	r1, r0, sl
   174bc:	orr	r1, r1, r0, lsr fp
   174c0:	lsl	r0, r0, ip
   174c4:	sbc	r5, r5, r9
   174c8:	cmp	ip, #0
   174cc:	beq	17558 <__assert_fail@plt+0x5dfc>
   174d0:	lsr	r6, r8, #1
   174d4:	orr	r6, r6, r9, lsl #31
   174d8:	lsr	r7, r9, #1
   174dc:	mov	r2, ip
   174e0:	b	17504 <__assert_fail@plt+0x5da8>
   174e4:	subs	r3, r4, r6
   174e8:	sbc	r8, r5, r7
   174ec:	adds	r3, r3, r3
   174f0:	adc	r8, r8, r8
   174f4:	adds	r4, r3, #1
   174f8:	adc	r5, r8, #0
   174fc:	subs	r2, r2, #1
   17500:	beq	17520 <__assert_fail@plt+0x5dc4>
   17504:	cmp	r5, r7
   17508:	cmpeq	r4, r6
   1750c:	bcs	174e4 <__assert_fail@plt+0x5d88>
   17510:	adds	r4, r4, r4
   17514:	adc	r5, r5, r5
   17518:	subs	r2, r2, #1
   1751c:	bne	17504 <__assert_fail@plt+0x5da8>
   17520:	lsr	r3, r4, ip
   17524:	orr	r3, r3, r5, lsl fp
   17528:	lsr	r2, r5, ip
   1752c:	orr	r3, r3, r5, lsr sl
   17530:	adds	r0, r0, r4
   17534:	mov	r4, r3
   17538:	lsl	r3, r2, ip
   1753c:	orr	r3, r3, r4, lsl sl
   17540:	lsl	ip, r4, ip
   17544:	orr	r3, r3, r4, lsr fp
   17548:	adc	r1, r1, r5
   1754c:	subs	r0, r0, ip
   17550:	mov	r5, r2
   17554:	sbc	r1, r1, r3
   17558:	cmp	lr, #0
   1755c:	strdne	r4, [lr]
   17560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17564:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17568:	mov	r7, r0
   1756c:	ldr	r6, [pc, #72]	; 175bc <__assert_fail@plt+0x5e60>
   17570:	ldr	r5, [pc, #72]	; 175c0 <__assert_fail@plt+0x5e64>
   17574:	add	r6, pc, r6
   17578:	add	r5, pc, r5
   1757c:	sub	r6, r6, r5
   17580:	mov	r8, r1
   17584:	mov	r9, r2
   17588:	bl	11310 <fdopen@plt-0x20>
   1758c:	asrs	r6, r6, #2
   17590:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17594:	mov	r4, #0
   17598:	add	r4, r4, #1
   1759c:	ldr	r3, [r5], #4
   175a0:	mov	r2, r9
   175a4:	mov	r1, r8
   175a8:	mov	r0, r7
   175ac:	blx	r3
   175b0:	cmp	r6, r4
   175b4:	bne	17598 <__assert_fail@plt+0x5e3c>
   175b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175bc:	strdeq	r0, [r1], -r8
   175c0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   175c4:	bx	lr
   175c8:	ldr	r3, [pc, #12]	; 175dc <__assert_fail@plt+0x5e80>
   175cc:	mov	r1, #0
   175d0:	add	r3, pc, r3
   175d4:	ldr	r2, [r3]
   175d8:	b	115b8 <__cxa_atexit@plt>
   175dc:	andeq	r0, r1, ip, lsr #20

Disassembly of section .fini:

000175e0 <.fini>:
   175e0:	push	{r3, lr}
   175e4:	pop	{r3, pc}
