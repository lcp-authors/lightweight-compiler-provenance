
raspbian-preinstalled/con2fbmap:     file format elf32-littlearm


Disassembly of section .init:

000104bc <.init>:
   104bc:	push	{r3, lr}
   104c0:	bl	10758 <close@plt+0x1ec>
   104c4:	pop	{r3, pc}

Disassembly of section .plt:

000104c8 <strtol@plt-0x14>:
   104c8:	push	{lr}		; (str lr, [sp, #-4]!)
   104cc:	ldr	lr, [pc, #4]	; 104d8 <strtol@plt-0x4>
   104d0:	add	lr, pc, lr
   104d4:	ldr	pc, [lr, #8]!
   104d8:	andeq	r0, r1, r4, ror #21

000104dc <strtol@plt>:
   104dc:	add	ip, pc, #0, 12
   104e0:	add	ip, ip, #16, 20	; 0x10000
   104e4:	ldr	pc, [ip, #2788]!	; 0xae4

000104e8 <ioctl@plt>:
   104e8:	add	ip, pc, #0, 12
   104ec:	add	ip, ip, #16, 20	; 0x10000
   104f0:	ldr	pc, [ip, #2780]!	; 0xadc

000104f4 <__libc_start_main@plt>:
   104f4:	add	ip, pc, #0, 12
   104f8:	add	ip, ip, #16, 20	; 0x10000
   104fc:	ldr	pc, [ip, #2772]!	; 0xad4

00010500 <strerror@plt>:
   10500:	add	ip, pc, #0, 12
   10504:	add	ip, ip, #16, 20	; 0x10000
   10508:	ldr	pc, [ip, #2764]!	; 0xacc

0001050c <__gmon_start__@plt>:
   1050c:	add	ip, pc, #0, 12
   10510:	add	ip, ip, #16, 20	; 0x10000
   10514:	ldr	pc, [ip, #2756]!	; 0xac4

00010518 <open@plt>:
   10518:	add	ip, pc, #0, 12
   1051c:	add	ip, ip, #16, 20	; 0x10000
   10520:	ldr	pc, [ip, #2748]!	; 0xabc

00010524 <exit@plt>:
   10524:	add	ip, pc, #0, 12
   10528:	add	ip, ip, #16, 20	; 0x10000
   1052c:	ldr	pc, [ip, #2740]!	; 0xab4

00010530 <__errno_location@plt>:
   10530:	add	ip, pc, #0, 12
   10534:	add	ip, ip, #16, 20	; 0x10000
   10538:	ldr	pc, [ip, #2732]!	; 0xaac

0001053c <__printf_chk@plt>:
   1053c:	add	ip, pc, #0, 12
   10540:	add	ip, ip, #16, 20	; 0x10000
   10544:	ldr	pc, [ip, #2724]!	; 0xaa4

00010548 <__fprintf_chk@plt>:
   10548:	add	ip, pc, #0, 12
   1054c:	add	ip, ip, #16, 20	; 0x10000
   10550:	ldr	pc, [ip, #2716]!	; 0xa9c

00010554 <access@plt>:
   10554:	add	ip, pc, #0, 12
   10558:	add	ip, ip, #16, 20	; 0x10000
   1055c:	ldr	pc, [ip, #2708]!	; 0xa94

00010560 <abort@plt>:
   10560:	add	ip, pc, #0, 12
   10564:	add	ip, ip, #16, 20	; 0x10000
   10568:	ldr	pc, [ip, #2700]!	; 0xa8c

0001056c <close@plt>:
   1056c:	add	ip, pc, #0, 12
   10570:	add	ip, ip, #16, 20	; 0x10000
   10574:	ldr	pc, [ip, #2692]!	; 0xa84

Disassembly of section .text:

00010578 <.text>:
   10578:	ldr	r3, [pc, #364]	; 106ec <close@plt+0x180>
   1057c:	ldr	r2, [pc, #364]	; 106f0 <close@plt+0x184>
   10580:	push	{r4, r5, r6, lr}
   10584:	mov	r4, r1
   10588:	sub	sp, sp, #24
   1058c:	ldr	r1, [r1]
   10590:	ldr	r3, [r3]
   10594:	cmp	r0, #2
   10598:	str	r1, [r2]
   1059c:	str	r3, [sp, #20]
   105a0:	beq	1063c <close@plt+0xd0>
   105a4:	cmp	r0, #3
   105a8:	bne	10638 <close@plt+0xcc>
   105ac:	mov	r2, #10
   105b0:	mov	r1, #0
   105b4:	ldr	r0, [r4, #8]
   105b8:	bl	104dc <strtol@plt>
   105bc:	mov	r6, #1
   105c0:	str	r0, [sp, #16]
   105c4:	mov	r2, #10
   105c8:	ldr	r0, [r4, #4]
   105cc:	mov	r1, #0
   105d0:	bl	104dc <strtol@plt>
   105d4:	mov	r1, #0
   105d8:	ldr	r4, [pc, #276]	; 106f4 <close@plt+0x188>
   105dc:	str	r0, [sp, #12]
   105e0:	ldr	r0, [pc, #272]	; 106f8 <close@plt+0x18c>
   105e4:	bl	10554 <access@plt>
   105e8:	ldr	r3, [pc, #268]	; 106fc <close@plt+0x190>
   105ec:	mov	r1, #0
   105f0:	cmp	r0, r1
   105f4:	movne	r4, r3
   105f8:	mov	r0, r4
   105fc:	bl	10518 <open@plt>
   10600:	cmn	r0, #1
   10604:	mov	r5, r0
   10608:	beq	106b8 <close@plt+0x14c>
   1060c:	cmp	r6, #0
   10610:	add	r2, sp, #12
   10614:	beq	10644 <close@plt+0xd8>
   10618:	ldr	r1, [pc, #224]	; 10700 <close@plt+0x194>
   1061c:	bl	104e8 <ioctl@plt>
   10620:	cmp	r0, #0
   10624:	bne	10698 <close@plt+0x12c>
   10628:	mov	r0, r5
   1062c:	bl	1056c <close@plt>
   10630:	mov	r0, #0
   10634:	bl	10524 <exit@plt>
   10638:	bl	1080c <close@plt+0x2a0>
   1063c:	mov	r6, #0
   10640:	b	105c4 <close@plt+0x58>
   10644:	ldr	r1, [pc, #184]	; 10704 <close@plt+0x198>
   10648:	bl	104e8 <ioctl@plt>
   1064c:	cmp	r0, #0
   10650:	beq	10684 <close@plt+0x118>
   10654:	ldr	r3, [pc, #172]	; 10708 <close@plt+0x19c>
   10658:	ldr	r4, [r3]
   1065c:	bl	10530 <__errno_location@plt>
   10660:	ldr	r0, [r0]
   10664:	bl	10500 <strerror@plt>
   10668:	ldr	r2, [pc, #156]	; 1070c <close@plt+0x1a0>
   1066c:	mov	r3, r0
   10670:	mov	r0, r4
   10674:	mov	r1, #1
   10678:	bl	10548 <__fprintf_chk@plt>
   1067c:	mov	r0, #1
   10680:	bl	10524 <exit@plt>
   10684:	ldrd	r2, [sp, #12]
   10688:	ldr	r1, [pc, #128]	; 10710 <close@plt+0x1a4>
   1068c:	mov	r0, #1
   10690:	bl	1053c <__printf_chk@plt>
   10694:	b	10628 <close@plt+0xbc>
   10698:	ldr	r3, [pc, #104]	; 10708 <close@plt+0x19c>
   1069c:	ldr	r4, [r3]
   106a0:	bl	10530 <__errno_location@plt>
   106a4:	ldr	r0, [r0]
   106a8:	bl	10500 <strerror@plt>
   106ac:	ldr	r2, [pc, #96]	; 10714 <close@plt+0x1a8>
   106b0:	mov	r3, r0
   106b4:	b	10670 <close@plt+0x104>
   106b8:	ldr	r3, [pc, #72]	; 10708 <close@plt+0x19c>
   106bc:	ldr	r5, [r3]
   106c0:	bl	10530 <__errno_location@plt>
   106c4:	ldr	r0, [r0]
   106c8:	bl	10500 <strerror@plt>
   106cc:	mov	r3, r4
   106d0:	ldr	r2, [pc, #64]	; 10718 <close@plt+0x1ac>
   106d4:	mov	r1, #1
   106d8:	str	r0, [sp]
   106dc:	mov	r0, r5
   106e0:	bl	10548 <__fprintf_chk@plt>
   106e4:	mov	r0, #1
   106e8:	bl	10524 <exit@plt>
   106ec:			; <UNDEFINED> instruction: 0x00020eb8
   106f0:	andeq	r1, r2, r0, lsl r0
   106f4:	ldrdeq	r0, [r1], -r4
   106f8:	andeq	r0, r1, ip, ror #17
   106fc:	andeq	r0, r1, r0, ror #17
   10700:	andeq	r4, r0, r0, lsl r6
   10704:	andeq	r4, r0, pc, lsl #12
   10708:	andeq	r1, r2, r8
   1070c:	andeq	r0, r1, ip, lsr #18
   10710:	andeq	r0, r1, ip, asr #18
   10714:	andeq	r0, r1, ip, lsl #18
   10718:	strdeq	r0, [r1], -ip
   1071c:	mov	fp, #0
   10720:	mov	lr, #0
   10724:	pop	{r1}		; (ldr r1, [sp], #4)
   10728:	mov	r2, sp
   1072c:	push	{r2}		; (str r2, [sp, #-4]!)
   10730:	push	{r0}		; (str r0, [sp, #-4]!)
   10734:	ldr	ip, [pc, #16]	; 1074c <close@plt+0x1e0>
   10738:	push	{ip}		; (str ip, [sp, #-4]!)
   1073c:	ldr	r0, [pc, #12]	; 10750 <close@plt+0x1e4>
   10740:	ldr	r3, [pc, #12]	; 10754 <close@plt+0x1e8>
   10744:	bl	104f4 <__libc_start_main@plt>
   10748:	bl	10560 <abort@plt>
   1074c:	andeq	r0, r1, r0, lsr #17
   10750:	andeq	r0, r1, r8, ror r5
   10754:	andeq	r0, r1, r0, asr #16
   10758:	ldr	r3, [pc, #20]	; 10774 <close@plt+0x208>
   1075c:	ldr	r2, [pc, #20]	; 10778 <close@plt+0x20c>
   10760:	add	r3, pc, r3
   10764:	ldr	r2, [r3, r2]
   10768:	cmp	r2, #0
   1076c:	bxeq	lr
   10770:	b	1050c <__gmon_start__@plt>
   10774:	andeq	r0, r1, r4, asr r8
   10778:	andeq	r0, r0, r0, asr #32
   1077c:	ldr	r0, [pc, #24]	; 1079c <close@plt+0x230>
   10780:	ldr	r3, [pc, #24]	; 107a0 <close@plt+0x234>
   10784:	cmp	r3, r0
   10788:	bxeq	lr
   1078c:	ldr	r3, [pc, #16]	; 107a4 <close@plt+0x238>
   10790:	cmp	r3, #0
   10794:	bxeq	lr
   10798:	bx	r3
   1079c:	andeq	r1, r2, r8
   107a0:	andeq	r1, r2, r8
   107a4:	andeq	r0, r0, r0
   107a8:	ldr	r0, [pc, #36]	; 107d4 <close@plt+0x268>
   107ac:	ldr	r1, [pc, #36]	; 107d8 <close@plt+0x26c>
   107b0:	sub	r1, r1, r0
   107b4:	asr	r1, r1, #2
   107b8:	add	r1, r1, r1, lsr #31
   107bc:	asrs	r1, r1, #1
   107c0:	bxeq	lr
   107c4:	ldr	r3, [pc, #16]	; 107dc <close@plt+0x270>
   107c8:	cmp	r3, #0
   107cc:	bxeq	lr
   107d0:	bx	r3
   107d4:	andeq	r1, r2, r8
   107d8:	andeq	r1, r2, r8
   107dc:	andeq	r0, r0, r0
   107e0:	push	{r4, lr}
   107e4:	ldr	r4, [pc, #24]	; 10804 <close@plt+0x298>
   107e8:	ldrb	r3, [r4]
   107ec:	cmp	r3, #0
   107f0:	popne	{r4, pc}
   107f4:	bl	1077c <close@plt+0x210>
   107f8:	mov	r3, #1
   107fc:	strb	r3, [r4]
   10800:	pop	{r4, pc}
   10804:	andeq	r1, r2, ip
   10808:	b	107a8 <close@plt+0x23c>
   1080c:	ldr	r1, [pc, #32]	; 10834 <close@plt+0x2c8>
   10810:	ldr	r3, [pc, #32]	; 10838 <close@plt+0x2cc>
   10814:	push	{r4, lr}
   10818:	ldr	r0, [r1]
   1081c:	ldr	r2, [pc, #24]	; 1083c <close@plt+0x2d0>
   10820:	ldr	r3, [r3]
   10824:	mov	r1, #1
   10828:	bl	10548 <__fprintf_chk@plt>
   1082c:	mov	r0, #1
   10830:	bl	10524 <exit@plt>
   10834:	andeq	r1, r2, r8
   10838:	andeq	r1, r2, r0, lsl r0
   1083c:			; <UNDEFINED> instruction: 0x000108b0
   10840:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10844:	mov	r7, r0
   10848:	ldr	r6, [pc, #72]	; 10898 <close@plt+0x32c>
   1084c:	ldr	r5, [pc, #72]	; 1089c <close@plt+0x330>
   10850:	add	r6, pc, r6
   10854:	add	r5, pc, r5
   10858:	sub	r6, r6, r5
   1085c:	mov	r8, r1
   10860:	mov	r9, r2
   10864:	bl	104bc <strtol@plt-0x20>
   10868:	asrs	r6, r6, #2
   1086c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10870:	mov	r4, #0
   10874:	add	r4, r4, #1
   10878:	ldr	r3, [r5], #4
   1087c:	mov	r2, r9
   10880:	mov	r1, r8
   10884:	mov	r0, r7
   10888:	blx	r3
   1088c:	cmp	r6, r4
   10890:	bne	10874 <close@plt+0x308>
   10894:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10898:	andeq	r0, r1, ip, asr r6
   1089c:	andeq	r0, r1, r4, asr r6
   108a0:	bx	lr

Disassembly of section .fini:

000108a4 <.fini>:
   108a4:	push	{r3, lr}
   108a8:	pop	{r3, pc}
