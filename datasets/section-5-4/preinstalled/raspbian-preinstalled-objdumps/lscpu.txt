
raspbian-preinstalled/lscpu:     file format elf32-littlearm


Disassembly of section .init:

0001188c <.init>:
   1188c:	push	{r3, lr}
   11890:	bl	136f8 <__assert_fail@plt+0x18f4>
   11894:	pop	{r3, pc}

Disassembly of section .plt:

00011898 <fdopen@plt-0x14>:
   11898:	push	{lr}		; (str lr, [sp, #-4]!)
   1189c:	ldr	lr, [pc, #4]	; 118a8 <fdopen@plt-0x4>
   118a0:	add	lr, pc, lr
   118a4:	ldr	pc, [lr, #8]!
   118a8:	andeq	lr, r1, r4, ror r5

000118ac <fdopen@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #122880	; 0x1e000
   118b4:	ldr	pc, [ip, #1396]!	; 0x574

000118b8 <calloc@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #122880	; 0x1e000
   118c0:	ldr	pc, [ip, #1388]!	; 0x56c

000118c4 <strstr@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #122880	; 0x1e000
   118cc:	ldr	pc, [ip, #1380]!	; 0x564

000118d0 <raise@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #122880	; 0x1e000
   118d8:	ldr	pc, [ip, #1372]!	; 0x55c

000118dc <scols_line_set_data@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #122880	; 0x1e000
   118e4:	ldr	pc, [ip, #1364]!	; 0x554

000118e8 <scols_line_refer_data@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #122880	; 0x1e000
   118f0:	ldr	pc, [ip, #1356]!	; 0x54c

000118f4 <strcmp@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #122880	; 0x1e000
   118fc:	ldr	pc, [ip, #1348]!	; 0x544

00011900 <rewinddir@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #122880	; 0x1e000
   11908:	ldr	pc, [ip, #1340]!	; 0x53c

0001190c <strtol@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #122880	; 0x1e000
   11914:	ldr	pc, [ip, #1332]!	; 0x534

00011918 <strcspn@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #122880	; 0x1e000
   11920:	ldr	pc, [ip, #1324]!	; 0x52c

00011924 <scols_table_set_name@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #122880	; 0x1e000
   1192c:	ldr	pc, [ip, #1316]!	; 0x524

00011930 <scols_table_enable_noheadings@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #122880	; 0x1e000
   11938:	ldr	pc, [ip, #1308]!	; 0x51c

0001193c <read@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #122880	; 0x1e000
   11944:	ldr	pc, [ip, #1300]!	; 0x514

00011948 <scols_table_new_column@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #122880	; 0x1e000
   11950:	ldr	pc, [ip, #1292]!	; 0x50c

00011954 <getuid@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #122880	; 0x1e000
   1195c:	ldr	pc, [ip, #1284]!	; 0x504

00011960 <memmove@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #122880	; 0x1e000
   11968:	ldr	pc, [ip, #1276]!	; 0x4fc

0001196c <free@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #122880	; 0x1e000
   11974:	ldr	pc, [ip, #1268]!	; 0x4f4

00011978 <fgets@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #122880	; 0x1e000
   11980:	ldr	pc, [ip, #1260]!	; 0x4ec

00011984 <nanosleep@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #122880	; 0x1e000
   1198c:	ldr	pc, [ip, #1252]!	; 0x4e4

00011990 <faccessat@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #122880	; 0x1e000
   11998:	ldr	pc, [ip, #1244]!	; 0x4dc

0001199c <ferror@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #122880	; 0x1e000
   119a4:	ldr	pc, [ip, #1236]!	; 0x4d4

000119a8 <strndup@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #122880	; 0x1e000
   119b0:	ldr	pc, [ip, #1228]!	; 0x4cc

000119b4 <__openat64_2@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #122880	; 0x1e000
   119bc:	ldr	pc, [ip, #1220]!	; 0x4c4

000119c0 <_exit@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #122880	; 0x1e000
   119c8:	ldr	pc, [ip, #1212]!	; 0x4bc

000119cc <__vsnprintf_chk@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #122880	; 0x1e000
   119d4:	ldr	pc, [ip, #1204]!	; 0x4b4

000119d8 <memcpy@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #122880	; 0x1e000
   119e0:	ldr	pc, [ip, #1196]!	; 0x4ac

000119e4 <__strtoull_internal@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #122880	; 0x1e000
   119ec:	ldr	pc, [ip, #1188]!	; 0x4a4

000119f0 <__sched_cpucount@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #122880	; 0x1e000
   119f8:	ldr	pc, [ip, #1180]!	; 0x49c

000119fc <memcmp@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #122880	; 0x1e000
   11a04:	ldr	pc, [ip, #1172]!	; 0x494

00011a08 <uname@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #122880	; 0x1e000
   11a10:	ldr	pc, [ip, #1164]!	; 0x48c

00011a14 <dcgettext@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #122880	; 0x1e000
   11a1c:	ldr	pc, [ip, #1156]!	; 0x484

00011a20 <strdup@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #122880	; 0x1e000
   11a28:	ldr	pc, [ip, #1148]!	; 0x47c

00011a2c <__stack_chk_fail@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #122880	; 0x1e000
   11a34:	ldr	pc, [ip, #1140]!	; 0x474

00011a38 <realloc@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #122880	; 0x1e000
   11a40:	ldr	pc, [ip, #1132]!	; 0x46c

00011a44 <dup@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #122880	; 0x1e000
   11a4c:	ldr	pc, [ip, #1124]!	; 0x464

00011a50 <textdomain@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #122880	; 0x1e000
   11a58:	ldr	pc, [ip, #1116]!	; 0x45c

00011a5c <err@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #122880	; 0x1e000
   11a64:	ldr	pc, [ip, #1108]!	; 0x454

00011a68 <geteuid@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #122880	; 0x1e000
   11a70:	ldr	pc, [ip, #1100]!	; 0x44c

00011a74 <vfscanf@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #122880	; 0x1e000
   11a7c:	ldr	pc, [ip, #1092]!	; 0x444

00011a80 <readlink@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #122880	; 0x1e000
   11a88:	ldr	pc, [ip, #1084]!	; 0x43c

00011a8c <getegid@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #122880	; 0x1e000
   11a94:	ldr	pc, [ip, #1076]!	; 0x434

00011a98 <mkostemp64@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #122880	; 0x1e000
   11aa0:	ldr	pc, [ip, #1068]!	; 0x42c

00011aa4 <fwrite@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #122880	; 0x1e000
   11aac:	ldr	pc, [ip, #1060]!	; 0x424

00011ab0 <lseek64@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #122880	; 0x1e000
   11ab8:	ldr	pc, [ip, #1052]!	; 0x41c

00011abc <scols_new_table@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #122880	; 0x1e000
   11ac4:	ldr	pc, [ip, #1044]!	; 0x414

00011ac8 <fread@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #122880	; 0x1e000
   11ad0:	ldr	pc, [ip, #1036]!	; 0x40c

00011ad4 <__fpending@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #122880	; 0x1e000
   11adc:	ldr	pc, [ip, #1028]!	; 0x404

00011ae0 <open64@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #122880	; 0x1e000
   11ae8:	ldr	pc, [ip, #1020]!	; 0x3fc

00011aec <__asprintf_chk@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #122880	; 0x1e000
   11af4:	ldr	pc, [ip, #1012]!	; 0x3f4

00011af8 <getenv@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #122880	; 0x1e000
   11b00:	ldr	pc, [ip, #1004]!	; 0x3ec

00011b04 <malloc@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #122880	; 0x1e000
   11b0c:	ldr	pc, [ip, #996]!	; 0x3e4

00011b10 <__libc_start_main@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #122880	; 0x1e000
   11b18:	ldr	pc, [ip, #988]!	; 0x3dc

00011b1c <readlinkat@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #122880	; 0x1e000
   11b24:	ldr	pc, [ip, #980]!	; 0x3d4

00011b28 <scols_table_new_line@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #122880	; 0x1e000
   11b30:	ldr	pc, [ip, #972]!	; 0x3cc

00011b34 <scols_unref_table@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #122880	; 0x1e000
   11b3c:	ldr	pc, [ip, #964]!	; 0x3c4

00011b40 <__vfprintf_chk@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #122880	; 0x1e000
   11b48:	ldr	pc, [ip, #956]!	; 0x3bc

00011b4c <getdtablesize@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #122880	; 0x1e000
   11b54:	ldr	pc, [ip, #948]!	; 0x3b4

00011b58 <__ctype_tolower_loc@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #122880	; 0x1e000
   11b60:	ldr	pc, [ip, #940]!	; 0x3ac

00011b64 <__gmon_start__@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #122880	; 0x1e000
   11b6c:	ldr	pc, [ip, #932]!	; 0x3a4

00011b70 <getopt_long@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #122880	; 0x1e000
   11b78:	ldr	pc, [ip, #924]!	; 0x39c

00011b7c <__ctype_b_loc@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #122880	; 0x1e000
   11b84:	ldr	pc, [ip, #916]!	; 0x394

00011b88 <getpid@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #122880	; 0x1e000
   11b90:	ldr	pc, [ip, #908]!	; 0x38c

00011b94 <exit@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #122880	; 0x1e000
   11b9c:	ldr	pc, [ip, #900]!	; 0x384

00011ba0 <syscall@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #122880	; 0x1e000
   11ba8:	ldr	pc, [ip, #892]!	; 0x37c

00011bac <strtoul@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #122880	; 0x1e000
   11bb4:	ldr	pc, [ip, #884]!	; 0x374

00011bb8 <strlen@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #122880	; 0x1e000
   11bc0:	ldr	pc, [ip, #876]!	; 0x36c

00011bc4 <strchr@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #122880	; 0x1e000
   11bcc:	ldr	pc, [ip, #868]!	; 0x364

00011bd0 <warnx@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #122880	; 0x1e000
   11bd8:	ldr	pc, [ip, #860]!	; 0x35c

00011bdc <__open64_2@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #122880	; 0x1e000
   11be4:	ldr	pc, [ip, #852]!	; 0x354

00011be8 <__errno_location@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #122880	; 0x1e000
   11bf0:	ldr	pc, [ip, #844]!	; 0x34c

00011bf4 <strncasecmp@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #122880	; 0x1e000
   11bfc:	ldr	pc, [ip, #836]!	; 0x344

00011c00 <snprintf@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #122880	; 0x1e000
   11c08:	ldr	pc, [ip, #828]!	; 0x33c

00011c0c <__cxa_atexit@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #122880	; 0x1e000
   11c14:	ldr	pc, [ip, #820]!	; 0x334

00011c18 <__vasprintf_chk@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #122880	; 0x1e000
   11c20:	ldr	pc, [ip, #812]!	; 0x32c

00011c24 <mkdir@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #122880	; 0x1e000
   11c2c:	ldr	pc, [ip, #804]!	; 0x324

00011c30 <getgid@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #122880	; 0x1e000
   11c38:	ldr	pc, [ip, #796]!	; 0x31c

00011c3c <__sched_cpufree@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #122880	; 0x1e000
   11c44:	ldr	pc, [ip, #788]!	; 0x314

00011c48 <memset@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #122880	; 0x1e000
   11c50:	ldr	pc, [ip, #780]!	; 0x30c

00011c54 <strncpy@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #122880	; 0x1e000
   11c5c:	ldr	pc, [ip, #772]!	; 0x304

00011c60 <fscanf@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #122880	; 0x1e000
   11c68:	ldr	pc, [ip, #764]!	; 0x2fc

00011c6c <fgetc@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #122880	; 0x1e000
   11c74:	ldr	pc, [ip, #756]!	; 0x2f4

00011c78 <__printf_chk@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #122880	; 0x1e000
   11c80:	ldr	pc, [ip, #748]!	; 0x2ec

00011c84 <strtod@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #122880	; 0x1e000
   11c8c:	ldr	pc, [ip, #740]!	; 0x2e4

00011c90 <write@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #122880	; 0x1e000
   11c98:	ldr	pc, [ip, #732]!	; 0x2dc

00011c9c <__sched_cpualloc@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #122880	; 0x1e000
   11ca4:	ldr	pc, [ip, #724]!	; 0x2d4

00011ca8 <scols_table_enable_json@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #122880	; 0x1e000
   11cb0:	ldr	pc, [ip, #716]!	; 0x2cc

00011cb4 <__fprintf_chk@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #122880	; 0x1e000
   11cbc:	ldr	pc, [ip, #708]!	; 0x2c4

00011cc0 <fclose@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #122880	; 0x1e000
   11cc8:	ldr	pc, [ip, #700]!	; 0x2bc

00011ccc <fcntl64@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #122880	; 0x1e000
   11cd4:	ldr	pc, [ip, #692]!	; 0x2b4

00011cd8 <setlocale@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #122880	; 0x1e000
   11ce0:	ldr	pc, [ip, #684]!	; 0x2ac

00011ce4 <errx@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #122880	; 0x1e000
   11cec:	ldr	pc, [ip, #676]!	; 0x2a4

00011cf0 <strrchr@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #122880	; 0x1e000
   11cf8:	ldr	pc, [ip, #668]!	; 0x29c

00011cfc <warn@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #122880	; 0x1e000
   11d04:	ldr	pc, [ip, #660]!	; 0x294

00011d08 <scols_print_table@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #122880	; 0x1e000
   11d10:	ldr	pc, [ip, #652]!	; 0x28c

00011d14 <fputc@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #122880	; 0x1e000
   11d1c:	ldr	pc, [ip, #644]!	; 0x284

00011d20 <sscanf@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #122880	; 0x1e000
   11d28:	ldr	pc, [ip, #636]!	; 0x27c

00011d2c <localeconv@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #122880	; 0x1e000
   11d34:	ldr	pc, [ip, #628]!	; 0x274

00011d38 <readdir64@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #122880	; 0x1e000
   11d40:	ldr	pc, [ip, #620]!	; 0x26c

00011d44 <fdopendir@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #122880	; 0x1e000
   11d4c:	ldr	pc, [ip, #612]!	; 0x264

00011d50 <putc@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #122880	; 0x1e000
   11d58:	ldr	pc, [ip, #604]!	; 0x25c

00011d5c <__strtoll_internal@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #122880	; 0x1e000
   11d64:	ldr	pc, [ip, #596]!	; 0x254

00011d68 <fopen64@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #122880	; 0x1e000
   11d70:	ldr	pc, [ip, #588]!	; 0x24c

00011d74 <qsort@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #122880	; 0x1e000
   11d7c:	ldr	pc, [ip, #580]!	; 0x244

00011d80 <bindtextdomain@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #122880	; 0x1e000
   11d88:	ldr	pc, [ip, #572]!	; 0x23c

00011d8c <umask@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #122880	; 0x1e000
   11d94:	ldr	pc, [ip, #564]!	; 0x234

00011d98 <__xstat64@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #122880	; 0x1e000
   11da0:	ldr	pc, [ip, #556]!	; 0x22c

00011da4 <fputs@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #122880	; 0x1e000
   11dac:	ldr	pc, [ip, #548]!	; 0x224

00011db0 <strncmp@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #122880	; 0x1e000
   11db8:	ldr	pc, [ip, #540]!	; 0x21c

00011dbc <abort@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #122880	; 0x1e000
   11dc4:	ldr	pc, [ip, #532]!	; 0x214

00011dc8 <close@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #122880	; 0x1e000
   11dd0:	ldr	pc, [ip, #524]!	; 0x20c

00011dd4 <closedir@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #122880	; 0x1e000
   11ddc:	ldr	pc, [ip, #516]!	; 0x204

00011de0 <__snprintf_chk@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #122880	; 0x1e000
   11de8:	ldr	pc, [ip, #508]!	; 0x1fc

00011dec <scols_init_debug@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #122880	; 0x1e000
   11df4:	ldr	pc, [ip, #500]!	; 0x1f4

00011df8 <strspn@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #122880	; 0x1e000
   11e00:	ldr	pc, [ip, #492]!	; 0x1ec

00011e04 <__assert_fail@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #122880	; 0x1e000
   11e0c:	ldr	pc, [ip, #484]!	; 0x1e4

Disassembly of section .text:

00011e10 <.text>:
   11e10:	ldr	r3, [pc, #3368]	; 12b40 <__assert_fail@plt+0xd3c>
   11e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e18:	mov	r6, #0
   11e1c:	sub	sp, sp, #660	; 0x294
   11e20:	ldr	r3, [r3]
   11e24:	mov	r2, #232	; 0xe8
   11e28:	mov	r7, r0
   11e2c:	mov	sl, r1
   11e30:	add	r0, sp, #100	; 0x64
   11e34:	mov	r1, r6
   11e38:	str	r3, [sp, #652]	; 0x28c
   11e3c:	str	r6, [sp, #92]	; 0x5c
   11e40:	str	r6, [sp, #88]	; 0x58
   11e44:	str	r6, [sp, #96]	; 0x60
   11e48:	bl	11c48 <memset@plt>
   11e4c:	ldr	r1, [pc, #3312]	; 12b44 <__assert_fail@plt+0xd40>
   11e50:	mov	r0, #6
   11e54:	str	r6, [sp, #332]	; 0x14c
   11e58:	str	r6, [sp, #336]	; 0x150
   11e5c:	str	r6, [sp, #340]	; 0x154
   11e60:	bl	11cd8 <setlocale@plt>
   11e64:	ldr	r1, [pc, #3292]	; 12b48 <__assert_fail@plt+0xd44>
   11e68:	ldr	r0, [pc, #3292]	; 12b4c <__assert_fail@plt+0xd48>
   11e6c:	bl	11d80 <bindtextdomain@plt>
   11e70:	ldr	r0, [pc, #3284]	; 12b4c <__assert_fail@plt+0xd48>
   11e74:	bl	11a50 <textdomain@plt>
   11e78:	ldr	r0, [pc, #3280]	; 12b50 <__assert_fail@plt+0xd4c>
   11e7c:	str	r6, [sp, #28]
   11e80:	bl	1cdf0 <__assert_fail@plt+0xafec>
   11e84:	ldr	r9, [pc, #3564]	; 12c78 <__assert_fail@plt+0xe74>
   11e88:	ldr	r8, [pc, #3268]	; 12b54 <__assert_fail@plt+0xd50>
   11e8c:	ldr	fp, [pc, #3268]	; 12b58 <__assert_fail@plt+0xd54>
   11e90:	mov	r3, #0
   11e94:	str	r3, [sp]
   11e98:	mov	r2, r8
   11e9c:	mov	r3, r9
   11ea0:	mov	r1, sl
   11ea4:	mov	r0, r7
   11ea8:	bl	11b70 <getopt_long@plt>
   11eac:	cmn	r0, #1
   11eb0:	mov	r4, r0
   11eb4:	beq	12168 <__assert_fail@plt+0x364>
   11eb8:	cmp	r0, #96	; 0x60
   11ebc:	ble	11f40 <__assert_fail@plt+0x13c>
   11ec0:	ldr	r5, [pc, #3220]	; 12b5c <__assert_fail@plt+0xd58>
   11ec4:	add	r2, sp, #332	; 0x14c
   11ec8:	mov	r3, #97	; 0x61
   11ecc:	cmp	r4, r3
   11ed0:	blt	11f1c <__assert_fail@plt+0x118>
   11ed4:	beq	11f04 <__assert_fail@plt+0x100>
   11ed8:	mov	r0, r5
   11edc:	ldr	r1, [r0, #4]!
   11ee0:	cmp	r4, r1
   11ee4:	movlt	r3, #0
   11ee8:	movge	r3, #1
   11eec:	cmp	r1, #0
   11ef0:	moveq	r3, #0
   11ef4:	cmp	r3, #0
   11ef8:	beq	11f1c <__assert_fail@plt+0x118>
   11efc:	cmp	r4, r1
   11f00:	bne	11edc <__assert_fail@plt+0xd8>
   11f04:	ldr	r3, [r2]
   11f08:	cmp	r3, #0
   11f0c:	streq	r4, [r2]
   11f10:	beq	11f1c <__assert_fail@plt+0x118>
   11f14:	cmp	r4, r3
   11f18:	bne	134b8 <__assert_fail@plt+0x16b4>
   11f1c:	ldr	r3, [r5, #64]!	; 0x40
   11f20:	add	r2, r2, #4
   11f24:	cmp	r4, r3
   11f28:	movlt	r1, #0
   11f2c:	movge	r1, #1
   11f30:	cmp	r3, #0
   11f34:	moveq	r1, #0
   11f38:	cmp	r1, #0
   11f3c:	bne	11ecc <__assert_fail@plt+0xc8>
   11f40:	sub	r3, r4, #74	; 0x4a
   11f44:	cmp	r3, #54	; 0x36
   11f48:	ldrls	pc, [pc, r3, lsl #2]
   11f4c:	b	131b4 <__assert_fail@plt+0x13b0>
   11f50:	andeq	r2, r1, r8, asr r1
   11f54:			; <UNDEFINED> instruction: 0x000131b4
   11f58:			; <UNDEFINED> instruction: 0x000131b4
   11f5c:			; <UNDEFINED> instruction: 0x000131b4
   11f60:			; <UNDEFINED> instruction: 0x000131b4
   11f64:			; <UNDEFINED> instruction: 0x000131b4
   11f68:			; <UNDEFINED> instruction: 0x000131b4
   11f6c:			; <UNDEFINED> instruction: 0x000131b4
   11f70:			; <UNDEFINED> instruction: 0x000131b4
   11f74:			; <UNDEFINED> instruction: 0x000131b4
   11f78:			; <UNDEFINED> instruction: 0x000131b4
   11f7c:			; <UNDEFINED> instruction: 0x000131b4
   11f80:	andeq	r2, r1, ip, lsl #2
   11f84:			; <UNDEFINED> instruction: 0x000131b4
   11f88:			; <UNDEFINED> instruction: 0x000131b4
   11f8c:			; <UNDEFINED> instruction: 0x000131b4
   11f90:			; <UNDEFINED> instruction: 0x000131b4
   11f94:			; <UNDEFINED> instruction: 0x000131b4
   11f98:			; <UNDEFINED> instruction: 0x000131b4
   11f9c:			; <UNDEFINED> instruction: 0x000131b4
   11fa0:			; <UNDEFINED> instruction: 0x000131b4
   11fa4:			; <UNDEFINED> instruction: 0x000131b4
   11fa8:			; <UNDEFINED> instruction: 0x000131b4
   11fac:	strdeq	r2, [r1], -r4
   11fb0:	andeq	r2, r1, r0, ror #1
   11fb4:	andeq	r2, r1, ip, asr #1
   11fb8:			; <UNDEFINED> instruction: 0x000131b4
   11fbc:	andeq	r2, r1, ip, ror r0
   11fc0:			; <UNDEFINED> instruction: 0x000131b4
   11fc4:			; <UNDEFINED> instruction: 0x000131b4
   11fc8:	andeq	r2, r1, ip, ror #30
   11fcc:			; <UNDEFINED> instruction: 0x000131b4
   11fd0:			; <UNDEFINED> instruction: 0x000131b4
   11fd4:			; <UNDEFINED> instruction: 0x000131b4
   11fd8:			; <UNDEFINED> instruction: 0x000131b4
   11fdc:			; <UNDEFINED> instruction: 0x000131b4
   11fe0:			; <UNDEFINED> instruction: 0x000131b4
   11fe4:			; <UNDEFINED> instruction: 0x000131b4
   11fe8:	andeq	r2, r1, ip, ror r0
   11fec:			; <UNDEFINED> instruction: 0x000131b4
   11ff0:			; <UNDEFINED> instruction: 0x000131b4
   11ff4:	andeq	r2, r1, r8, rrx
   11ff8:			; <UNDEFINED> instruction: 0x000131b4
   11ffc:			; <UNDEFINED> instruction: 0x000131b4
   12000:			; <UNDEFINED> instruction: 0x000131b4
   12004:			; <UNDEFINED> instruction: 0x000131b4
   12008:	andeq	r2, r1, r8, asr r0
   1200c:	andeq	r2, r1, r8, asr #32
   12010:			; <UNDEFINED> instruction: 0x000131b4
   12014:			; <UNDEFINED> instruction: 0x000131b4
   12018:			; <UNDEFINED> instruction: 0x000131b4
   1201c:			; <UNDEFINED> instruction: 0x000131b4
   12020:			; <UNDEFINED> instruction: 0x000131b4
   12024:			; <UNDEFINED> instruction: 0x000131b4
   12028:	andeq	r2, r1, ip, lsr #32
   1202c:	add	r3, sp, #340	; 0x154
   12030:	add	r1, sp, #392	; 0x188
   12034:	mov	r2, #1
   12038:	str	r2, [r3, #4]!
   1203c:	cmp	r1, r3
   12040:	bne	12038 <__assert_fail@plt+0x234>
   12044:	b	11e90 <__assert_fail@plt+0x8c>
   12048:	ldrb	r3, [sp, #96]	; 0x60
   1204c:	orr	r3, r3, #32
   12050:	strb	r3, [sp, #96]	; 0x60
   12054:	b	11e90 <__assert_fail@plt+0x8c>
   12058:	ldrb	r3, [sp, #96]	; 0x60
   1205c:	orr	r3, r3, #1
   12060:	strb	r3, [sp, #96]	; 0x60
   12064:	b	11e90 <__assert_fail@plt+0x8c>
   12068:	ldr	r2, [fp]
   1206c:	mov	r3, #1
   12070:	str	r2, [sp, #100]	; 0x64
   12074:	str	r3, [sp, #92]	; 0x5c
   12078:	b	11e90 <__assert_fail@plt+0x8c>
   1207c:	ldr	r3, [fp]
   12080:	cmp	r3, #0
   12084:	beq	120b8 <__assert_fail@plt+0x2b4>
   12088:	ldrsb	r2, [r3]
   1208c:	add	r1, sp, #344	; 0x158
   12090:	cmp	r2, #61	; 0x3d
   12094:	addeq	r3, r3, #1
   12098:	streq	r3, [fp]
   1209c:	mov	r2, #13
   120a0:	ldr	r3, [pc, #2744]	; 12b60 <__assert_fail@plt+0xd5c>
   120a4:	ldr	r0, [fp]
   120a8:	bl	18c44 <__assert_fail@plt+0x6e40>
   120ac:	subs	r3, r0, #0
   120b0:	str	r3, [sp, #28]
   120b4:	blt	1361c <__assert_fail@plt+0x1818>
   120b8:	cmp	r4, #112	; 0x70
   120bc:	moveq	r3, #1
   120c0:	movne	r3, #2
   120c4:	str	r3, [sp, #88]	; 0x58
   120c8:	b	11e90 <__assert_fail@plt+0x8c>
   120cc:	ldrb	r3, [sp, #96]	; 0x60
   120d0:	mov	r6, #1
   120d4:	orr	r3, r3, #8
   120d8:	strb	r3, [sp, #96]	; 0x60
   120dc:	b	11e90 <__assert_fail@plt+0x8c>
   120e0:	ldrb	r3, [sp, #96]	; 0x60
   120e4:	mov	r6, #1
   120e8:	orr	r3, r3, #4
   120ec:	strb	r3, [sp, #96]	; 0x60
   120f0:	b	11e90 <__assert_fail@plt+0x8c>
   120f4:	ldrb	r3, [sp, #96]	; 0x60
   120f8:	mov	r6, #1
   120fc:	bic	r3, r3, #12
   12100:	orr	r3, r3, #12
   12104:	strb	r3, [sp, #96]	; 0x60
   12108:	b	11e90 <__assert_fail@plt+0x8c>
   1210c:	mov	r2, #5
   12110:	ldr	r1, [pc, #2636]	; 12b64 <__assert_fail@plt+0xd60>
   12114:	mov	r0, #0
   12118:	bl	11a14 <dcgettext@plt>
   1211c:	ldr	r2, [pc, #2912]	; 12c84 <__assert_fail@plt+0xe80>
   12120:	ldr	r3, [pc, #2624]	; 12b68 <__assert_fail@plt+0xd64>
   12124:	mov	r6, #0
   12128:	ldr	r2, [r2]
   1212c:	mov	r1, r0
   12130:	mov	r0, #1
   12134:	bl	11c78 <__printf_chk@plt>
   12138:	ldr	r3, [pc, #2560]	; 12b40 <__assert_fail@plt+0xd3c>
   1213c:	ldr	r2, [sp, #652]	; 0x28c
   12140:	mov	r0, r6
   12144:	ldr	r3, [r3]
   12148:	cmp	r2, r3
   1214c:	bne	136a0 <__assert_fail@plt+0x189c>
   12150:	add	sp, sp, #660	; 0x294
   12154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12158:	ldrb	r3, [sp, #96]	; 0x60
   1215c:	orr	r3, r3, #16
   12160:	strb	r3, [sp, #96]	; 0x60
   12164:	b	11e90 <__assert_fail@plt+0x8c>
   12168:	cmp	r6, #0
   1216c:	beq	1217c <__assert_fail@plt+0x378>
   12170:	ldr	r0, [sp, #88]	; 0x58
   12174:	cmp	r0, #0
   12178:	beq	13588 <__assert_fail@plt+0x1784>
   1217c:	ldr	r3, [pc, #2536]	; 12b6c <__assert_fail@plt+0xd68>
   12180:	ldr	r3, [r3]
   12184:	cmp	r3, r7
   12188:	bne	131a0 <__assert_fail@plt+0x139c>
   1218c:	ldrb	r3, [sp, #96]	; 0x60
   12190:	tst	r3, #12
   12194:	bne	121b8 <__assert_fail@plt+0x3b4>
   12198:	ldr	r2, [sp, #88]	; 0x58
   1219c:	orr	r3, r3, #4
   121a0:	sub	r2, r2, #2
   121a4:	clz	r2, r2
   121a8:	lsr	r2, r2, #5
   121ac:	bic	r3, r3, #8
   121b0:	orr	r3, r3, r2, lsl #3
   121b4:	strb	r3, [sp, #96]	; 0x60
   121b8:	bl	19f7c <__assert_fail@plt+0x8178>
   121bc:	ldr	r0, [pc, #2476]	; 12b70 <__assert_fail@plt+0xd6c>
   121c0:	bl	1a210 <__assert_fail@plt+0x840c>
   121c4:	cmp	r0, #0
   121c8:	str	r0, [sp, #104]	; 0x68
   121cc:	beq	136a4 <__assert_fail@plt+0x18a0>
   121d0:	ldr	r1, [sp, #100]	; 0x64
   121d4:	cmp	r1, #0
   121d8:	beq	121e0 <__assert_fail@plt+0x3dc>
   121dc:	bl	1a354 <__assert_fail@plt+0x8550>
   121e0:	ldr	r0, [pc, #2444]	; 12b74 <__assert_fail@plt+0xd70>
   121e4:	bl	1a210 <__assert_fail@plt+0x840c>
   121e8:	cmp	r0, #0
   121ec:	str	r0, [sp, #108]	; 0x6c
   121f0:	beq	13678 <__assert_fail@plt+0x1874>
   121f4:	ldr	r1, [sp, #100]	; 0x64
   121f8:	cmp	r1, #0
   121fc:	beq	12204 <__assert_fail@plt+0x400>
   12200:	bl	1a354 <__assert_fail@plt+0x8550>
   12204:	ldr	fp, [pc, #2412]	; 12b78 <__assert_fail@plt+0xd74>
   12208:	add	r0, sp, #100	; 0x64
   1220c:	add	r1, sp, #92	; 0x5c
   12210:	bl	163f0 <__assert_fail@plt+0x45ec>
   12214:	ldr	r3, [fp]
   12218:	ldr	r0, [sp, #208]	; 0xd0
   1221c:	add	r3, r3, #31
   12220:	cmp	r0, #0
   12224:	lsr	r3, r3, #5
   12228:	lsl	r3, r3, #2
   1222c:	str	r3, [sp, #36]	; 0x24
   12230:	movgt	r3, #0
   12234:	strgt	r3, [sp, #24]
   12238:	ble	127fc <__assert_fail@plt+0x9f8>
   1223c:	ldr	r1, [sp, #24]
   12240:	ldr	r3, [sp, #216]	; 0xd8
   12244:	ldr	r2, [sp, #244]	; 0xf4
   12248:	lsl	ip, r1, #2
   1224c:	cmp	r3, #0
   12250:	str	ip, [sp, #20]
   12254:	ldr	r4, [r2, r1, lsl #2]
   12258:	beq	12280 <__assert_fail@plt+0x47c>
   1225c:	ldr	r2, [sp, #36]	; 0x24
   12260:	cmp	r2, r4, lsr #3
   12264:	bls	127e8 <__assert_fail@plt+0x9e4>
   12268:	lsr	r2, r4, #5
   1226c:	and	r1, r4, #31
   12270:	ldr	r2, [r3, r2, lsl #2]
   12274:	lsr	r3, r2, r1
   12278:	tst	r3, #1
   1227c:	beq	127e8 <__assert_fail@plt+0x9e4>
   12280:	mov	r3, r4
   12284:	ldr	r2, [pc, #2288]	; 12b7c <__assert_fail@plt+0xd78>
   12288:	mov	r1, #0
   1228c:	ldr	r0, [sp, #104]	; 0x68
   12290:	bl	1aa78 <__assert_fail@plt+0x8c74>
   12294:	subs	r5, r0, #0
   12298:	bne	12414 <__assert_fail@plt+0x610>
   1229c:	str	r4, [sp]
   122a0:	ldr	r3, [pc, #2260]	; 12b7c <__assert_fail@plt+0xd78>
   122a4:	ldr	r2, [fp]
   122a8:	add	r1, sp, #56	; 0x38
   122ac:	ldr	r0, [sp, #104]	; 0x68
   122b0:	bl	1c648 <__assert_fail@plt+0xa844>
   122b4:	str	r4, [sp]
   122b8:	ldr	r3, [pc, #2240]	; 12b80 <__assert_fail@plt+0xd7c>
   122bc:	ldr	r2, [fp]
   122c0:	add	r1, sp, #60	; 0x3c
   122c4:	ldr	r0, [sp, #104]	; 0x68
   122c8:	bl	1c648 <__assert_fail@plt+0xa844>
   122cc:	str	r4, [sp]
   122d0:	ldr	r3, [pc, #2220]	; 12b84 <__assert_fail@plt+0xd80>
   122d4:	ldr	r2, [fp]
   122d8:	add	r1, sp, #64	; 0x40
   122dc:	ldr	r0, [sp, #104]	; 0x68
   122e0:	bl	1c648 <__assert_fail@plt+0xa844>
   122e4:	str	r4, [sp]
   122e8:	ldr	r3, [pc, #2200]	; 12b88 <__assert_fail@plt+0xd84>
   122ec:	ldr	r2, [fp]
   122f0:	add	r1, sp, #68	; 0x44
   122f4:	ldr	r0, [sp, #104]	; 0x68
   122f8:	bl	1c648 <__assert_fail@plt+0xa844>
   122fc:	mov	r3, r4
   12300:	ldr	r2, [pc, #2180]	; 12b8c <__assert_fail@plt+0xd88>
   12304:	add	r1, sp, #72	; 0x48
   12308:	ldr	r0, [sp, #104]	; 0x68
   1230c:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12310:	ldr	r2, [pc, #2168]	; 12b90 <__assert_fail@plt+0xd8c>
   12314:	add	r1, sp, #76	; 0x4c
   12318:	cmp	r0, #0
   1231c:	mvnne	r3, #0
   12320:	strne	r3, [sp, #72]	; 0x48
   12324:	ldr	r0, [sp, #104]	; 0x68
   12328:	mov	r3, r4
   1232c:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12330:	ldr	r2, [pc, #2140]	; 12b94 <__assert_fail@plt+0xd90>
   12334:	add	r1, sp, #80	; 0x50
   12338:	cmp	r0, #0
   1233c:	mvnne	r3, #0
   12340:	strne	r3, [sp, #76]	; 0x4c
   12344:	ldr	r0, [sp, #104]	; 0x68
   12348:	mov	r3, r4
   1234c:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12350:	ldr	r2, [pc, #2112]	; 12b98 <__assert_fail@plt+0xd94>
   12354:	add	r1, sp, #84	; 0x54
   12358:	cmp	r0, #0
   1235c:	mvnne	r3, #0
   12360:	strne	r3, [sp, #80]	; 0x50
   12364:	ldr	r0, [sp, #104]	; 0x68
   12368:	mov	r3, r4
   1236c:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12370:	cmp	r0, #0
   12374:	mvnne	r3, #0
   12378:	strne	r3, [sp, #84]	; 0x54
   1237c:	ldr	r3, [sp, #300]	; 0x12c
   12380:	cmp	r3, #0
   12384:	beq	12d60 <__assert_fail@plt+0xf5c>
   12388:	ldr	r2, [sp, #60]	; 0x3c
   1238c:	add	r1, sp, #284	; 0x11c
   12390:	ldr	r0, [sp, #288]	; 0x120
   12394:	bl	13904 <__assert_fail@plt+0x1b00>
   12398:	ldr	r3, [sp, #304]	; 0x130
   1239c:	ldr	r4, [sp, #20]
   123a0:	ldr	r1, [sp, #72]	; 0x48
   123a4:	ldr	r2, [sp, #56]	; 0x38
   123a8:	ldr	r0, [sp, #300]	; 0x12c
   123ac:	str	r1, [r3, r4]
   123b0:	add	r1, sp, #296	; 0x128
   123b4:	bl	13904 <__assert_fail@plt+0x1b00>
   123b8:	ldr	r2, [sp, #64]	; 0x40
   123bc:	ldr	r3, [sp, #292]	; 0x124
   123c0:	ldr	r1, [sp, #76]	; 0x4c
   123c4:	cmp	r2, #0
   123c8:	str	r1, [r3, r4]
   123cc:	beq	123ec <__assert_fail@plt+0x5e8>
   123d0:	add	r1, sp, #272	; 0x110
   123d4:	ldr	r0, [sp, #276]	; 0x114
   123d8:	bl	13904 <__assert_fail@plt+0x1b00>
   123dc:	ldr	r3, [sp, #280]	; 0x118
   123e0:	ldr	r1, [sp, #20]
   123e4:	ldr	r2, [sp, #80]	; 0x50
   123e8:	str	r2, [r3, r1]
   123ec:	ldr	r2, [sp, #68]	; 0x44
   123f0:	cmp	r2, #0
   123f4:	beq	12414 <__assert_fail@plt+0x610>
   123f8:	add	r1, sp, #260	; 0x104
   123fc:	ldr	r0, [sp, #264]	; 0x108
   12400:	bl	13904 <__assert_fail@plt+0x1b00>
   12404:	ldr	r3, [sp, #268]	; 0x10c
   12408:	ldr	r1, [sp, #20]
   1240c:	ldr	r2, [sp, #84]	; 0x54
   12410:	str	r2, [r3, r1]
   12414:	ldr	r3, [sp, #228]	; 0xe4
   12418:	ldr	r2, [sp, #244]	; 0xf4
   1241c:	ldr	r1, [sp, #20]
   12420:	cmp	r3, #0
   12424:	ldr	r5, [r2, r1]
   12428:	ldreq	r4, [pc, #1900]	; 12b9c <__assert_fail@plt+0xd98>
   1242c:	mov	r2, r3
   12430:	beq	125a4 <__assert_fail@plt+0x7a0>
   12434:	cmp	r2, #0
   12438:	ble	12620 <__assert_fail@plt+0x81c>
   1243c:	ldr	r9, [pc, #1880]	; 12b9c <__assert_fail@plt+0xd98>
   12440:	ldr	sl, [pc, #1880]	; 12ba0 <__assert_fail@plt+0xd9c>
   12444:	mov	r4, #0
   12448:	b	1248c <__assert_fail@plt+0x688>
   1244c:	str	r4, [sp, #4]
   12450:	str	r5, [sp]
   12454:	mov	r3, sl
   12458:	ldr	r2, [fp]
   1245c:	add	r1, sp, #52	; 0x34
   12460:	bl	1c648 <__assert_fail@plt+0xa844>
   12464:	ldr	r0, [r6, #12]
   12468:	cmp	r0, #0
   1246c:	beq	125f0 <__assert_fail@plt+0x7ec>
   12470:	add	r1, r6, #8
   12474:	ldr	r2, [sp, #52]	; 0x34
   12478:	bl	13904 <__assert_fail@plt+0x1b00>
   1247c:	ldr	r3, [sp, #228]	; 0xe4
   12480:	add	r4, r4, #1
   12484:	cmp	r4, r3
   12488:	bge	12620 <__assert_fail@plt+0x81c>
   1248c:	str	r4, [sp]
   12490:	mov	r3, r5
   12494:	mov	r2, r9
   12498:	mov	r1, #0
   1249c:	ldr	r0, [sp, #104]	; 0x68
   124a0:	ldr	r7, [sp, #232]	; 0xe8
   124a4:	bl	1aa78 <__assert_fail@plt+0x8c74>
   124a8:	cmp	r0, #0
   124ac:	bne	1247c <__assert_fail@plt+0x678>
   124b0:	ldr	r3, [r7, r4, lsl #4]
   124b4:	lsl	r8, r4, #4
   124b8:	cmp	r3, #0
   124bc:	add	r6, r7, r8
   124c0:	ldr	r0, [sp, #104]	; 0x68
   124c4:	bne	1244c <__assert_fail@plt+0x648>
   124c8:	str	r4, [sp, #4]
   124cc:	str	r5, [sp]
   124d0:	add	r1, sp, #396	; 0x18c
   124d4:	ldr	r3, [pc, #1736]	; 12ba4 <__assert_fail@plt+0xda0>
   124d8:	mov	r2, #256	; 0x100
   124dc:	bl	1b77c <__assert_fail@plt+0x9978>
   124e0:	cmp	r0, #0
   124e4:	ble	128bc <__assert_fail@plt+0xab8>
   124e8:	ldr	r1, [pc, #1720]	; 12ba8 <__assert_fail@plt+0xda4>
   124ec:	add	r0, sp, #396	; 0x18c
   124f0:	bl	118f4 <strcmp@plt>
   124f4:	ldr	r3, [sp, #104]	; 0x68
   124f8:	cmp	r0, #0
   124fc:	beq	128f8 <__assert_fail@plt+0xaf4>
   12500:	ldr	r1, [pc, #1700]	; 12bac <__assert_fail@plt+0xda8>
   12504:	add	r0, sp, #396	; 0x18c
   12508:	str	r3, [sp, #32]
   1250c:	bl	118f4 <strcmp@plt>
   12510:	ldr	r3, [sp, #32]
   12514:	str	r4, [sp]
   12518:	ldr	r2, [pc, #1680]	; 12bb0 <__assert_fail@plt+0xdac>
   1251c:	add	r1, sp, #84	; 0x54
   12520:	cmp	r0, #0
   12524:	mov	r0, r3
   12528:	mov	r3, r5
   1252c:	bne	12930 <__assert_fail@plt+0xb2c>
   12530:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12534:	mov	r1, #105	; 0x69
   12538:	ldr	r2, [sp, #84]	; 0x54
   1253c:	str	r1, [sp, #8]
   12540:	ldr	r1, [pc, #1644]	; 12bb4 <__assert_fail@plt+0xdb0>
   12544:	mov	r3, #256	; 0x100
   12548:	add	r0, sp, #396	; 0x18c
   1254c:	stm	sp, {r1, r2}
   12550:	mov	r1, r3
   12554:	mov	r2, #1
   12558:	bl	11de0 <__snprintf_chk@plt>
   1255c:	add	r0, sp, #396	; 0x18c
   12560:	bl	11a20 <strdup@plt>
   12564:	cmp	r0, #0
   12568:	beq	13650 <__assert_fail@plt+0x184c>
   1256c:	str	r0, [r7, r8]
   12570:	mov	r3, r5
   12574:	str	r4, [sp]
   12578:	ldr	r2, [pc, #1592]	; 12bb8 <__assert_fail@plt+0xdb4>
   1257c:	add	r1, r6, #4
   12580:	ldr	r0, [sp, #104]	; 0x68
   12584:	bl	1b6b4 <__assert_fail@plt+0x98b0>
   12588:	cmp	r0, #0
   1258c:	blt	12918 <__assert_fail@plt+0xb14>
   12590:	ldr	r0, [sp, #104]	; 0x68
   12594:	b	1244c <__assert_fail@plt+0x648>
   12598:	ldr	r3, [sp, #228]	; 0xe4
   1259c:	add	r3, r3, #1
   125a0:	str	r3, [sp, #228]	; 0xe4
   125a4:	str	r3, [sp]
   125a8:	mov	r2, r4
   125ac:	mov	r3, r5
   125b0:	mov	r1, #0
   125b4:	ldr	r0, [sp, #104]	; 0x68
   125b8:	bl	1aa78 <__assert_fail@plt+0x8c74>
   125bc:	cmp	r0, #0
   125c0:	beq	12598 <__assert_fail@plt+0x794>
   125c4:	ldr	r0, [sp, #228]	; 0xe4
   125c8:	cmp	r0, #0
   125cc:	beq	12620 <__assert_fail@plt+0x81c>
   125d0:	mov	r1, #16
   125d4:	bl	118b8 <calloc@plt>
   125d8:	cmp	r0, #0
   125dc:	bne	12938 <__assert_fail@plt+0xb34>
   125e0:	mov	r2, #16
   125e4:	ldr	r1, [pc, #1708]	; 12c98 <__assert_fail@plt+0xe94>
   125e8:	mov	r0, #1
   125ec:	bl	11a5c <err@plt>
   125f0:	ldr	r7, [sp, #208]	; 0xd0
   125f4:	mov	r1, #4
   125f8:	mov	r0, r7
   125fc:	bl	118b8 <calloc@plt>
   12600:	adds	r7, r7, #0
   12604:	movne	r7, #1
   12608:	cmp	r0, #0
   1260c:	movne	r7, #0
   12610:	cmp	r7, #0
   12614:	bne	135e0 <__assert_fail@plt+0x17dc>
   12618:	str	r0, [r6, #12]
   1261c:	b	12470 <__assert_fail@plt+0x66c>
   12620:	ldr	r3, [sp, #200]	; 0xc8
   12624:	cmp	r3, #0
   12628:	blt	1269c <__assert_fail@plt+0x898>
   1262c:	ldr	r3, [sp, #244]	; 0xf4
   12630:	ldr	r0, [sp, #20]
   12634:	ldr	r2, [pc, #1408]	; 12bbc <__assert_fail@plt+0xdb8>
   12638:	mov	r1, #0
   1263c:	ldr	r4, [r3, r0]
   12640:	ldr	r0, [sp, #104]	; 0x68
   12644:	mov	r3, r4
   12648:	bl	1aa78 <__assert_fail@plt+0x8c74>
   1264c:	cmp	r0, #0
   12650:	bne	1269c <__assert_fail@plt+0x898>
   12654:	ldr	r3, [sp, #308]	; 0x134
   12658:	cmp	r3, #0
   1265c:	beq	131ec <__assert_fail@plt+0x13e8>
   12660:	add	r1, sp, #396	; 0x18c
   12664:	ldr	r3, [pc, #1360]	; 12bbc <__assert_fail@plt+0xdb8>
   12668:	mov	r2, #64	; 0x40
   1266c:	str	r4, [sp]
   12670:	ldr	r0, [sp, #104]	; 0x68
   12674:	bl	1b77c <__assert_fail@plt+0x9978>
   12678:	add	r0, sp, #396	; 0x18c
   1267c:	ldr	r1, [pc, #1340]	; 12bc0 <__assert_fail@plt+0xdbc>
   12680:	bl	118f4 <strcmp@plt>
   12684:	cmp	r0, #0
   12688:	bne	1299c <__assert_fail@plt+0xb98>
   1268c:	ldr	r3, [sp, #308]	; 0x134
   12690:	ldr	r1, [sp, #20]
   12694:	mov	r2, #1
   12698:	str	r2, [r3, r1]
   1269c:	ldr	r3, [sp, #244]	; 0xf4
   126a0:	ldr	r0, [sp, #20]
   126a4:	ldr	r2, [pc, #1304]	; 12bc4 <__assert_fail@plt+0xdc0>
   126a8:	mov	r1, #0
   126ac:	ldr	r4, [r3, r0]
   126b0:	ldr	r0, [sp, #104]	; 0x68
   126b4:	mov	r3, r4
   126b8:	bl	1aa78 <__assert_fail@plt+0x8c74>
   126bc:	cmp	r0, #0
   126c0:	bne	126e8 <__assert_fail@plt+0x8e4>
   126c4:	ldr	r1, [sp, #312]	; 0x138
   126c8:	cmp	r1, #0
   126cc:	beq	12b08 <__assert_fail@plt+0xd04>
   126d0:	ldr	r2, [sp, #20]
   126d4:	mov	r3, r4
   126d8:	add	r1, r1, r2
   126dc:	ldr	r0, [sp, #104]	; 0x68
   126e0:	ldr	r2, [pc, #1244]	; 12bc4 <__assert_fail@plt+0xdc0>
   126e4:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   126e8:	ldr	r3, [sp, #244]	; 0xf4
   126ec:	ldr	r0, [sp, #20]
   126f0:	ldr	r2, [pc, #1232]	; 12bc8 <__assert_fail@plt+0xdc4>
   126f4:	mov	r1, #0
   126f8:	ldr	r4, [r3, r0]
   126fc:	ldr	r0, [sp, #104]	; 0x68
   12700:	mov	r3, r4
   12704:	bl	1aa78 <__assert_fail@plt+0x8c74>
   12708:	cmp	r0, #0
   1270c:	bne	12734 <__assert_fail@plt+0x930>
   12710:	ldr	r1, [sp, #316]	; 0x13c
   12714:	cmp	r1, #0
   12718:	beq	12cd4 <__assert_fail@plt+0xed0>
   1271c:	ldr	r2, [sp, #20]
   12720:	mov	r3, r4
   12724:	add	r1, r1, r2
   12728:	ldr	r0, [sp, #104]	; 0x68
   1272c:	ldr	r2, [pc, #1172]	; 12bc8 <__assert_fail@plt+0xdc4>
   12730:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12734:	ldr	r0, [sp, #20]
   12738:	ldr	r3, [sp, #244]	; 0xf4
   1273c:	ldr	r2, [pc, #1160]	; 12bcc <__assert_fail@plt+0xdc8>
   12740:	add	r1, sp, #48	; 0x30
   12744:	ldr	r3, [r3, r0]
   12748:	ldr	r0, [sp, #104]	; 0x68
   1274c:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12750:	cmp	r0, #0
   12754:	bne	1278c <__assert_fail@plt+0x988>
   12758:	ldr	r3, [sp, #172]	; 0xac
   1275c:	cmp	r3, #0
   12760:	beq	12d08 <__assert_fail@plt+0xf04>
   12764:	vldr	s15, [sp, #48]	; 0x30
   12768:	vldr	s13, [pc, #972]	; 12b3c <__assert_fail@plt+0xd38>
   1276c:	ldr	r2, [sp, #20]
   12770:	ldr	r1, [pc, #1112]	; 12bd0 <__assert_fail@plt+0xdcc>
   12774:	vcvt.f32.s32	s15, s15
   12778:	add	r0, r3, r2
   1277c:	vdiv.f32	s14, s15, s13
   12780:	vcvt.f64.f32	d7, s14
   12784:	vmov	r2, r3, d7
   12788:	bl	13858 <__assert_fail@plt+0x1a54>
   1278c:	ldr	r0, [sp, #20]
   12790:	ldr	r3, [sp, #244]	; 0xf4
   12794:	ldr	r2, [pc, #1080]	; 12bd4 <__assert_fail@plt+0xdd0>
   12798:	add	r1, sp, #44	; 0x2c
   1279c:	ldr	r3, [r3, r0]
   127a0:	ldr	r0, [sp, #104]	; 0x68
   127a4:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   127a8:	cmp	r0, #0
   127ac:	bne	127e4 <__assert_fail@plt+0x9e0>
   127b0:	ldr	r3, [sp, #176]	; 0xb0
   127b4:	cmp	r3, #0
   127b8:	beq	12ca0 <__assert_fail@plt+0xe9c>
   127bc:	vldr	s15, [sp, #44]	; 0x2c
   127c0:	vldr	s13, [pc, #884]	; 12b3c <__assert_fail@plt+0xd38>
   127c4:	ldr	r2, [sp, #20]
   127c8:	ldr	r1, [pc, #1024]	; 12bd0 <__assert_fail@plt+0xdcc>
   127cc:	vcvt.f32.s32	s15, s15
   127d0:	add	r0, r3, r2
   127d4:	vdiv.f32	s14, s15, s13
   127d8:	vcvt.f64.f32	d7, s14
   127dc:	vmov	r2, r3, d7
   127e0:	bl	13858 <__assert_fail@plt+0x1a54>
   127e4:	ldr	r0, [sp, #208]	; 0xd0
   127e8:	ldr	r3, [sp, #24]
   127ec:	add	r3, r3, #1
   127f0:	cmp	r0, r3
   127f4:	str	r3, [sp, #24]
   127f8:	bgt	1223c <__assert_fail@plt+0x438>
   127fc:	ldr	r0, [sp, #232]	; 0xe8
   12800:	cmp	r0, #0
   12804:	beq	12818 <__assert_fail@plt+0xa14>
   12808:	ldr	r3, [pc, #968]	; 12bd8 <__assert_fail@plt+0xdd4>
   1280c:	mov	r2, #16
   12810:	ldr	r1, [sp, #228]	; 0xe4
   12814:	bl	11d74 <qsort@plt>
   12818:	ldr	r0, [sp, #240]	; 0xf0
   1281c:	cmp	r0, #0
   12820:	beq	12834 <__assert_fail@plt+0xa30>
   12824:	ldr	r3, [pc, #940]	; 12bd8 <__assert_fail@plt+0xdd4>
   12828:	mov	r2, #16
   1282c:	ldr	r1, [sp, #236]	; 0xec
   12830:	bl	11d74 <qsort@plt>
   12834:	mov	r4, #0
   12838:	ldr	r0, [pc, #1104]	; 12c90 <__assert_fail@plt+0xe8c>
   1283c:	str	r4, [sp, #248]	; 0xf8
   12840:	bl	1a210 <__assert_fail@plt+0x840c>
   12844:	subs	r7, r0, #0
   12848:	beq	1365c <__assert_fail@plt+0x1858>
   1284c:	ldr	r1, [sp, #100]	; 0x64
   12850:	bl	1a354 <__assert_fail@plt+0x8550>
   12854:	mov	r1, r4
   12858:	mov	r0, r7
   1285c:	bl	1b0d8 <__assert_fail@plt+0x92d4>
   12860:	subs	r4, r0, #0
   12864:	beq	1294c <__assert_fail@plt+0xb48>
   12868:	ldr	r6, [pc, #876]	; 12bdc <__assert_fail@plt+0xdd8>
   1286c:	mov	r0, r4
   12870:	bl	11d38 <readdir64@plt>
   12874:	subs	r5, r0, #0
   12878:	beq	129c4 <__assert_fail@plt+0xbc0>
   1287c:	ldrb	r3, [r5, #18]
   12880:	tst	r3, #251	; 0xfb
   12884:	bne	1286c <__assert_fail@plt+0xa68>
   12888:	mov	r1, r6
   1288c:	mov	r2, #4
   12890:	add	r0, r5, #19
   12894:	bl	11db0 <strncmp@plt>
   12898:	subs	r1, r0, #0
   1289c:	bne	1286c <__assert_fail@plt+0xa68>
   128a0:	add	r0, r5, #23
   128a4:	bl	17efc <__assert_fail@plt+0x60f8>
   128a8:	cmp	r0, #0
   128ac:	ldrne	r3, [sp, #248]	; 0xf8
   128b0:	addne	r3, r3, #1
   128b4:	strne	r3, [sp, #248]	; 0xf8
   128b8:	b	1286c <__assert_fail@plt+0xa68>
   128bc:	str	r4, [sp]
   128c0:	mov	r3, r5
   128c4:	ldr	r2, [pc, #740]	; 12bb0 <__assert_fail@plt+0xdac>
   128c8:	add	r1, sp, #84	; 0x54
   128cc:	ldr	r0, [sp, #104]	; 0x68
   128d0:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   128d4:	ldr	r2, [sp, #84]	; 0x54
   128d8:	ldr	r1, [pc, #768]	; 12be0 <__assert_fail@plt+0xddc>
   128dc:	mov	r3, #256	; 0x100
   128e0:	add	r0, sp, #396	; 0x18c
   128e4:	stm	sp, {r1, r2}
   128e8:	mov	r1, r3
   128ec:	mov	r2, #1
   128f0:	bl	11de0 <__snprintf_chk@plt>
   128f4:	b	1255c <__assert_fail@plt+0x758>
   128f8:	mov	r0, r3
   128fc:	add	r1, sp, #84	; 0x54
   12900:	str	r4, [sp]
   12904:	mov	r3, r5
   12908:	ldr	r2, [pc, #672]	; 12bb0 <__assert_fail@plt+0xdac>
   1290c:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12910:	mov	r1, #100	; 0x64
   12914:	b	12538 <__assert_fail@plt+0x734>
   12918:	ldr	r0, [pc, #708]	; 12be4 <__assert_fail@plt+0xde0>
   1291c:	bl	11a20 <strdup@plt>
   12920:	cmp	r0, #0
   12924:	beq	13650 <__assert_fail@plt+0x184c>
   12928:	str	r0, [r6, #4]
   1292c:	b	12590 <__assert_fail@plt+0x78c>
   12930:	bl	1bc90 <__assert_fail@plt+0x9e8c>
   12934:	b	128d4 <__assert_fail@plt+0xad0>
   12938:	ldr	r2, [sp, #228]	; 0xe4
   1293c:	str	r0, [sp, #232]	; 0xe8
   12940:	b	12434 <__assert_fail@plt+0x630>
   12944:	mov	r0, r4
   12948:	bl	11dd4 <closedir@plt>
   1294c:	mov	r0, r7
   12950:	bl	1a108 <__assert_fail@plt+0x8304>
   12954:	add	r1, sp, #92	; 0x5c
   12958:	add	r0, sp, #100	; 0x64
   1295c:	bl	13df4 <__assert_fail@plt+0x1ff0>
   12960:	add	r0, sp, #100	; 0x64
   12964:	bl	16d88 <__assert_fail@plt+0x4f84>
   12968:	ldr	r3, [sp, #88]	; 0x58
   1296c:	cmp	r3, #1
   12970:	beq	1321c <__assert_fail@plt+0x1418>
   12974:	cmp	r3, #2
   12978:	beq	13274 <__assert_fail@plt+0x1470>
   1297c:	cmp	r3, #0
   12980:	beq	13470 <__assert_fail@plt+0x166c>
   12984:	ldr	r0, [sp, #104]	; 0x68
   12988:	bl	1a108 <__assert_fail@plt+0x8304>
   1298c:	ldr	r0, [sp, #108]	; 0x6c
   12990:	bl	1a108 <__assert_fail@plt+0x8304>
   12994:	mov	r6, #0
   12998:	b	12138 <__assert_fail@plt+0x334>
   1299c:	ldr	r1, [pc, #580]	; 12be8 <__assert_fail@plt+0xde4>
   129a0:	add	r0, sp, #396	; 0x18c
   129a4:	bl	118f4 <strcmp@plt>
   129a8:	ldr	r4, [sp, #308]	; 0x134
   129ac:	cmp	r0, #0
   129b0:	bne	12d3c <__assert_fail@plt+0xf38>
   129b4:	ldr	r2, [sp, #20]
   129b8:	mov	r3, #2
   129bc:	str	r3, [r4, r2]
   129c0:	b	1269c <__assert_fail@plt+0x898>
   129c4:	ldr	r0, [sp, #248]	; 0xf8
   129c8:	cmp	r0, #0
   129cc:	beq	12944 <__assert_fail@plt+0xb40>
   129d0:	mov	r1, #4
   129d4:	bl	138c8 <__assert_fail@plt+0x1ac4>
   129d8:	ldr	r5, [sp, #248]	; 0xf8
   129dc:	lsl	r5, r5, #2
   129e0:	str	r0, [sp, #256]	; 0x100
   129e4:	mov	r0, r5
   129e8:	bl	11b04 <malloc@plt>
   129ec:	adds	r6, r5, #0
   129f0:	movne	r6, #1
   129f4:	cmp	r0, #0
   129f8:	movne	r6, #0
   129fc:	cmp	r6, #0
   12a00:	mov	r3, r0
   12a04:	bne	13690 <__assert_fail@plt+0x188c>
   12a08:	mov	r0, r4
   12a0c:	str	r3, [sp, #252]	; 0xfc
   12a10:	bl	11900 <rewinddir@plt>
   12a14:	ldr	r8, [pc, #448]	; 12bdc <__assert_fail@plt+0xdd8>
   12a18:	ldr	r9, [pc, #460]	; 12bec <__assert_fail@plt+0xde8>
   12a1c:	mov	r0, r4
   12a20:	bl	11d38 <readdir64@plt>
   12a24:	subs	r5, r0, #0
   12a28:	beq	12aa0 <__assert_fail@plt+0xc9c>
   12a2c:	ldr	r3, [sp, #248]	; 0xf8
   12a30:	cmp	r3, r6
   12a34:	ble	12aa0 <__assert_fail@plt+0xc9c>
   12a38:	ldrb	r3, [r5, #18]
   12a3c:	tst	r3, #251	; 0xfb
   12a40:	bne	12a1c <__assert_fail@plt+0xc18>
   12a44:	mov	r2, #4
   12a48:	mov	r1, r8
   12a4c:	add	r0, r5, #19
   12a50:	bl	11db0 <strncmp@plt>
   12a54:	subs	sl, r0, #0
   12a58:	bne	12a1c <__assert_fail@plt+0xc18>
   12a5c:	add	r5, r5, #23
   12a60:	mov	r0, r5
   12a64:	mov	r1, sl
   12a68:	bl	17efc <__assert_fail@plt+0x60f8>
   12a6c:	cmp	r0, #0
   12a70:	beq	12a1c <__assert_fail@plt+0xc18>
   12a74:	mov	r0, sl
   12a78:	mov	r2, #5
   12a7c:	mov	r1, r9
   12a80:	bl	11a14 <dcgettext@plt>
   12a84:	ldr	sl, [sp, #252]	; 0xfc
   12a88:	mov	r1, r0
   12a8c:	mov	r0, r5
   12a90:	bl	184a4 <__assert_fail@plt+0x66a0>
   12a94:	str	r0, [sl, r6, lsl #2]
   12a98:	add	r6, r6, #1
   12a9c:	b	12a1c <__assert_fail@plt+0xc18>
   12aa0:	mov	r0, r4
   12aa4:	bl	11dd4 <closedir@plt>
   12aa8:	ldr	r3, [pc, #320]	; 12bf0 <__assert_fail@plt+0xdec>
   12aac:	mov	r2, #4
   12ab0:	ldr	r1, [sp, #248]	; 0xf8
   12ab4:	ldr	r0, [sp, #252]	; 0xfc
   12ab8:	bl	11d74 <qsort@plt>
   12abc:	ldr	r3, [sp, #248]	; 0xf8
   12ac0:	cmp	r3, #0
   12ac4:	ble	1294c <__assert_fail@plt+0xb48>
   12ac8:	ldr	r5, [pc, #292]	; 12bf4 <__assert_fail@plt+0xdf0>
   12acc:	mov	r4, #0
   12ad0:	ldr	r2, [sp, #252]	; 0xfc
   12ad4:	ldr	r1, [sp, #256]	; 0x100
   12ad8:	mov	r3, r5
   12adc:	ldr	r2, [r2, r4, lsl #2]
   12ae0:	add	r1, r1, r4, lsl #2
   12ae4:	str	r2, [sp]
   12ae8:	ldr	r2, [fp]
   12aec:	mov	r0, r7
   12af0:	bl	1c648 <__assert_fail@plt+0xa844>
   12af4:	ldr	r3, [sp, #248]	; 0xf8
   12af8:	add	r4, r4, #1
   12afc:	cmp	r4, r3
   12b00:	blt	12ad0 <__assert_fail@plt+0xccc>
   12b04:	b	1294c <__assert_fail@plt+0xb48>
   12b08:	ldr	r5, [sp, #208]	; 0xd0
   12b0c:	mov	r1, #4
   12b10:	mov	r0, r5
   12b14:	bl	118b8 <calloc@plt>
   12b18:	cmp	r5, #0
   12b1c:	clz	r3, r0
   12b20:	lsr	r3, r3, #5
   12b24:	moveq	r3, #0
   12b28:	cmp	r3, #0
   12b2c:	bne	135e0 <__assert_fail@plt+0x17dc>
   12b30:	mov	r1, r0
   12b34:	str	r0, [sp, #312]	; 0x138
   12b38:	b	126d0 <__assert_fail@plt+0x8cc>
   12b3c:	ldrbtmi	r0, [sl], #-0
   12b40:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   12b44:	andeq	lr, r1, ip, lsr lr
   12b48:	andeq	sp, r1, r4, ror #19
   12b4c:	strdeq	sp, [r1], -r8
   12b50:			; <UNDEFINED> instruction: 0x000162b8
   12b54:	andeq	sp, r1, ip, asr #27
   12b58:	andeq	r0, r3, r8, lsr #32
   12b5c:	andeq	sp, r1, r0
   12b60:	ldrdeq	r3, [r1], -r0
   12b64:	andeq	sp, r1, r4, lsl #27
   12b68:	muleq	r1, r0, sp
   12b6c:	andeq	r0, r3, r8, lsl r0
   12b70:	andeq	sp, r1, ip, asr #28
   12b74:	andeq	sp, r1, ip, lsl #29
   12b78:	andeq	r0, r3, r0, lsr r0
   12b7c:			; <UNDEFINED> instruction: 0x0001deb8
   12b80:	ldrdeq	sp, [r1], -r8
   12b84:	strdeq	sp, [r1], -r8
   12b88:	andeq	sp, r1, r8, lsl pc
   12b8c:	andeq	sp, r1, r8, lsr pc
   12b90:	andeq	sp, r1, r0, asr pc
   12b94:	andeq	sp, r1, r4, ror pc
   12b98:	andeq	sp, r1, ip, lsl #31
   12b9c:	andeq	sp, r1, r8, lsr #31
   12ba0:	andeq	lr, r1, r0, lsr #32
   12ba4:			; <UNDEFINED> instruction: 0x0001dfbc
   12ba8:	andeq	sp, r1, r4, ror #17
   12bac:	andeq	sp, r1, ip, ror #17
   12bb0:	ldrdeq	sp, [r1], -r8
   12bb4:	andeq	sp, r1, ip, lsl #18
   12bb8:	strdeq	sp, [r1], -r4
   12bbc:	andeq	lr, r1, r4, asr #32
   12bc0:	andeq	lr, r1, r8, asr r0
   12bc4:	muleq	r1, r4, r0
   12bc8:	andeq	lr, r1, r4, lsr #1
   12bcc:	strheq	lr, [r1], -r4
   12bd0:	muleq	r1, r0, r5
   12bd4:	ldrdeq	lr, [r1], -r4
   12bd8:	andeq	r3, r1, r0, asr #15
   12bdc:	andeq	lr, r1, r8, lsl #2
   12be0:	andeq	sp, r1, r4, lsl r9
   12be4:	andeq	lr, r1, r0, lsl r0
   12be8:	andeq	lr, r1, r8, rrx
   12bec:	andeq	lr, r1, r0, lsr r1
   12bf0:			; <UNDEFINED> instruction: 0x000137b0
   12bf4:	andeq	lr, r1, r4, asr r1
   12bf8:	andeq	lr, r1, r8, ror r0
   12bfc:	andeq	lr, r1, r8, lsl #1
   12c00:	andeq	r0, r3, r4, lsr #32
   12c04:	andeq	sp, r1, r0, lsr sl
   12c08:	andeq	sp, r1, ip, lsr sl
   12c0c:	andeq	ip, r1, r4, lsl lr
   12c10:	andeq	sp, r1, r0, asr sp
   12c14:	andeq	sp, r1, ip, asr #20
   12c18:	andeq	sp, r1, r0, lsl #21
   12c1c:	andeq	sp, r1, ip, lsl #21
   12c20:	ldrdeq	sp, [r1], -ip
   12c24:	andeq	sp, r1, r0, lsr #22
   12c28:	andeq	sp, r1, r4, asr fp
   12c2c:	muleq	r1, r8, fp
   12c30:	ldrdeq	sp, [r1], -r8
   12c34:	andeq	sp, r1, r0, lsl ip
   12c38:	andeq	sp, r1, r4, asr ip
   12c3c:	andeq	sp, r1, r0, lsr #25
   12c40:	andeq	sp, r1, r0, ror #25
   12c44:	strdeq	sp, [r1], -r4
   12c48:	andeq	sp, r1, r4, lsr #26
   12c4c:	andeq	sp, r1, r0, lsl sp
   12c50:	andeq	sp, r1, r4, lsl #26
   12c54:	andeq	sp, r1, r4, lsr sp
   12c58:	andeq	sp, r1, ip, asr sp
   12c5c:	andeq	sp, r1, r8, ror sp
   12c60:	andeq	sp, r1, r0, asr #28
   12c64:	andeq	sp, r1, r4, lsr #27
   12c68:	andeq	sp, r1, r4, lsl #20
   12c6c:	andeq	lr, r1, r4, ror #2
   12c70:	andeq	sp, r1, r0, ror #19
   12c74:	andeq	sp, r1, r8, lsr #20
   12c78:	andeq	ip, r1, r0, lsr pc
   12c7c:	andeq	r0, r3, r0, lsr #32
   12c80:	andeq	sp, r1, r0, ror #27
   12c84:	andeq	r0, r3, r0, lsl r0
   12c88:	andeq	sp, r1, r8, asr #2
   12c8c:	andeq	lr, r1, r0, lsl r1
   12c90:	strdeq	lr, [r1], -r4
   12c94:	muleq	r1, r4, lr
   12c98:	strdeq	sp, [r1], -r0
   12c9c:	andeq	sp, r1, r4, ror #28
   12ca0:	ldr	r4, [sp, #208]	; 0xd0
   12ca4:	mov	r1, #4
   12ca8:	mov	r0, r4
   12cac:	bl	118b8 <calloc@plt>
   12cb0:	cmp	r4, #0
   12cb4:	clz	r3, r0
   12cb8:	lsr	r3, r3, #5
   12cbc:	moveq	r3, #0
   12cc0:	cmp	r3, #0
   12cc4:	bne	135e0 <__assert_fail@plt+0x17dc>
   12cc8:	mov	r3, r0
   12ccc:	str	r0, [sp, #176]	; 0xb0
   12cd0:	b	127bc <__assert_fail@plt+0x9b8>
   12cd4:	ldr	r5, [sp, #208]	; 0xd0
   12cd8:	mov	r1, #4
   12cdc:	mov	r0, r5
   12ce0:	bl	118b8 <calloc@plt>
   12ce4:	adds	r3, r5, #0
   12ce8:	movne	r3, #1
   12cec:	cmp	r0, #0
   12cf0:	movne	r3, #0
   12cf4:	cmp	r3, #0
   12cf8:	bne	135e0 <__assert_fail@plt+0x17dc>
   12cfc:	mov	r1, r0
   12d00:	str	r0, [sp, #316]	; 0x13c
   12d04:	b	1271c <__assert_fail@plt+0x918>
   12d08:	ldr	r4, [sp, #208]	; 0xd0
   12d0c:	mov	r1, #4
   12d10:	mov	r0, r4
   12d14:	bl	118b8 <calloc@plt>
   12d18:	adds	r3, r4, #0
   12d1c:	movne	r3, #1
   12d20:	cmp	r0, #0
   12d24:	movne	r3, #0
   12d28:	cmp	r3, #0
   12d2c:	bne	135e0 <__assert_fail@plt+0x17dc>
   12d30:	mov	r3, r0
   12d34:	str	r0, [sp, #172]	; 0xac
   12d38:	b	12764 <__assert_fail@plt+0x960>
   12d3c:	ldr	r1, [pc, #-332]	; 12bf8 <__assert_fail@plt+0xdf4>
   12d40:	add	r0, sp, #396	; 0x18c
   12d44:	bl	118f4 <strcmp@plt>
   12d48:	cmp	r0, #0
   12d4c:	bne	12f00 <__assert_fail@plt+0x10fc>
   12d50:	ldr	r2, [sp, #20]
   12d54:	mov	r3, #3
   12d58:	str	r3, [r4, r2]
   12d5c:	b	1269c <__assert_fail@plt+0x898>
   12d60:	ldr	r4, [fp]
   12d64:	ldr	r1, [sp, #56]	; 0x38
   12d68:	add	r4, r4, #31
   12d6c:	lsr	r4, r4, #5
   12d70:	lsl	r4, r4, #2
   12d74:	mov	r0, r4
   12d78:	bl	119f0 <__sched_cpucount@plt>
   12d7c:	ldr	r1, [sp, #60]	; 0x3c
   12d80:	subs	r6, r0, #0
   12d84:	moveq	r6, #1
   12d88:	mov	r0, r4
   12d8c:	bl	119f0 <__sched_cpucount@plt>
   12d90:	mov	r1, r6
   12d94:	bl	1c9d8 <__assert_fail@plt+0xabd4>
   12d98:	mov	r1, r6
   12d9c:	subs	r4, r0, #0
   12da0:	moveq	r4, #1
   12da4:	ldr	r0, [sp, #212]	; 0xd4
   12da8:	bl	1c9d8 <__assert_fail@plt+0xabd4>
   12dac:	mov	r1, r4
   12db0:	bl	1c9d8 <__assert_fail@plt+0xabd4>
   12db4:	ldr	r3, [sp, #224]	; 0xe0
   12db8:	mov	r1, #4
   12dbc:	cmp	r0, #0
   12dc0:	moveq	r0, #1
   12dc4:	cmp	r3, #0
   12dc8:	muleq	r0, r0, r4
   12dcc:	ldr	r4, [sp, #208]	; 0xd0
   12dd0:	muleq	r6, r6, r0
   12dd4:	mov	r0, r4
   12dd8:	streq	r6, [sp, #224]	; 0xe0
   12ddc:	bl	118b8 <calloc@plt>
   12de0:	subs	r3, r0, #0
   12de4:	beq	12f24 <__assert_fail@plt+0x1120>
   12de8:	mov	r1, #4
   12dec:	mov	r0, r4
   12df0:	str	r3, [sp, #300]	; 0x12c
   12df4:	bl	118b8 <calloc@plt>
   12df8:	subs	r3, r0, #0
   12dfc:	bne	13480 <__assert_fail@plt+0x167c>
   12e00:	cmp	r4, #0
   12e04:	bne	135e0 <__assert_fail@plt+0x17dc>
   12e08:	mov	r7, #0
   12e0c:	mov	r0, r7
   12e10:	mov	r1, #4
   12e14:	str	r7, [sp, #288]	; 0x120
   12e18:	bl	118b8 <calloc@plt>
   12e1c:	subs	r6, r0, #0
   12e20:	beq	134a0 <__assert_fail@plt+0x169c>
   12e24:	mov	r0, r7
   12e28:	mov	r1, #4
   12e2c:	str	r6, [sp, #304]	; 0x130
   12e30:	bl	118b8 <calloc@plt>
   12e34:	str	r0, [sp, #292]	; 0x124
   12e38:	mov	r3, #0
   12e3c:	mvn	r2, #0
   12e40:	b	12e50 <__assert_fail@plt+0x104c>
   12e44:	str	r2, [r0, r3, lsl #2]
   12e48:	str	r2, [r6, r3, lsl #2]
   12e4c:	add	r3, r3, #1
   12e50:	cmp	r4, r3
   12e54:	bgt	12e44 <__assert_fail@plt+0x1040>
   12e58:	ldr	r3, [sp, #64]	; 0x40
   12e5c:	cmp	r3, #0
   12e60:	beq	12eac <__assert_fail@plt+0x10a8>
   12e64:	mov	r1, #4
   12e68:	mov	r0, r4
   12e6c:	bl	118b8 <calloc@plt>
   12e70:	subs	r3, r0, #0
   12e74:	bne	135f0 <__assert_fail@plt+0x17ec>
   12e78:	cmp	r4, #0
   12e7c:	bne	135e0 <__assert_fail@plt+0x17dc>
   12e80:	mov	r1, #4
   12e84:	str	r4, [sp, #276]	; 0x114
   12e88:	bl	118b8 <calloc@plt>
   12e8c:	str	r0, [sp, #280]	; 0x118
   12e90:	mov	r3, #0
   12e94:	mvn	r2, #0
   12e98:	b	12ea4 <__assert_fail@plt+0x10a0>
   12e9c:	str	r2, [r0, r3, lsl #2]
   12ea0:	add	r3, r3, #1
   12ea4:	cmp	r4, r3
   12ea8:	bgt	12e9c <__assert_fail@plt+0x1098>
   12eac:	ldr	r3, [sp, #68]	; 0x44
   12eb0:	cmp	r3, #0
   12eb4:	beq	12388 <__assert_fail@plt+0x584>
   12eb8:	mov	r1, #4
   12ebc:	mov	r0, r4
   12ec0:	bl	118b8 <calloc@plt>
   12ec4:	subs	r3, r0, #0
   12ec8:	bne	135b8 <__assert_fail@plt+0x17b4>
   12ecc:	cmp	r4, #0
   12ed0:	bne	135e0 <__assert_fail@plt+0x17dc>
   12ed4:	mov	r1, #4
   12ed8:	str	r4, [sp, #264]	; 0x108
   12edc:	bl	118b8 <calloc@plt>
   12ee0:	str	r0, [sp, #268]	; 0x10c
   12ee4:	mvn	r3, #0
   12ee8:	b	12ef4 <__assert_fail@plt+0x10f0>
   12eec:	str	r3, [r0, r5, lsl #2]
   12ef0:	add	r5, r5, #1
   12ef4:	cmp	r4, r5
   12ef8:	bgt	12eec <__assert_fail@plt+0x10e8>
   12efc:	b	12388 <__assert_fail@plt+0x584>
   12f00:	add	r0, sp, #396	; 0x18c
   12f04:	ldr	r1, [pc, #-784]	; 12bfc <__assert_fail@plt+0xdf8>
   12f08:	bl	118f4 <strcmp@plt>
   12f0c:	ldr	r2, [sp, #20]
   12f10:	cmp	r0, #0
   12f14:	moveq	r3, #4
   12f18:	movne	r3, #0
   12f1c:	str	r3, [r4, r2]
   12f20:	b	1269c <__assert_fail@plt+0x898>
   12f24:	cmp	r4, #0
   12f28:	bne	135e0 <__assert_fail@plt+0x17dc>
   12f2c:	mov	r1, #4
   12f30:	str	r4, [sp, #300]	; 0x12c
   12f34:	bl	118b8 <calloc@plt>
   12f38:	subs	r3, r0, #0
   12f3c:	beq	12e08 <__assert_fail@plt+0x1004>
   12f40:	mov	r1, #4
   12f44:	mov	r0, r4
   12f48:	str	r3, [sp, #288]	; 0x120
   12f4c:	bl	118b8 <calloc@plt>
   12f50:	subs	r6, r0, #0
   12f54:	beq	134a0 <__assert_fail@plt+0x169c>
   12f58:	mov	r1, #4
   12f5c:	mov	r0, r4
   12f60:	str	r6, [sp, #304]	; 0x130
   12f64:	bl	118b8 <calloc@plt>
   12f68:	b	12e34 <__assert_fail@plt+0x1030>
   12f6c:	ldr	r3, [pc, #-884]	; 12c00 <__assert_fail@plt+0xdfc>
   12f70:	mov	r2, #5
   12f74:	ldr	r1, [pc, #-888]	; 12c04 <__assert_fail@plt+0xe00>
   12f78:	ldr	r4, [r3]
   12f7c:	mov	r0, #0
   12f80:	bl	11a14 <dcgettext@plt>
   12f84:	mov	r1, r4
   12f88:	bl	11da4 <fputs@plt>
   12f8c:	mov	r2, #5
   12f90:	ldr	r1, [pc, #-912]	; 12c08 <__assert_fail@plt+0xe04>
   12f94:	mov	r0, #0
   12f98:	bl	11a14 <dcgettext@plt>
   12f9c:	ldr	r3, [pc, #-800]	; 12c84 <__assert_fail@plt+0xe80>
   12fa0:	mov	r1, #1
   12fa4:	mov	r6, #0
   12fa8:	ldr	r3, [r3]
   12fac:	ldr	r5, [pc, #-936]	; 12c0c <__assert_fail@plt+0xe08>
   12fb0:	ldr	r8, [pc, #-936]	; 12c10 <__assert_fail@plt+0xe0c>
   12fb4:	mov	r2, r0
   12fb8:	mov	r0, r4
   12fbc:	bl	11cb4 <__fprintf_chk@plt>
   12fc0:	mov	r1, r4
   12fc4:	mov	r0, #10
   12fc8:	bl	11d14 <fputc@plt>
   12fcc:	mov	r2, #5
   12fd0:	ldr	r1, [pc, #-964]	; 12c14 <__assert_fail@plt+0xe10>
   12fd4:	mov	r0, r6
   12fd8:	bl	11a14 <dcgettext@plt>
   12fdc:	mov	r1, r4
   12fe0:	bl	11da4 <fputs@plt>
   12fe4:	mov	r2, #5
   12fe8:	ldr	r1, [pc, #-984]	; 12c18 <__assert_fail@plt+0xe14>
   12fec:	mov	r0, r6
   12ff0:	bl	11a14 <dcgettext@plt>
   12ff4:	mov	r1, r4
   12ff8:	bl	11da4 <fputs@plt>
   12ffc:	mov	r2, #5
   13000:	ldr	r1, [pc, #-1004]	; 12c1c <__assert_fail@plt+0xe18>
   13004:	mov	r0, r6
   13008:	bl	11a14 <dcgettext@plt>
   1300c:	mov	r1, r4
   13010:	bl	11da4 <fputs@plt>
   13014:	mov	r2, #5
   13018:	ldr	r1, [pc, #-1024]	; 12c20 <__assert_fail@plt+0xe1c>
   1301c:	mov	r0, r6
   13020:	bl	11a14 <dcgettext@plt>
   13024:	mov	r1, r4
   13028:	bl	11da4 <fputs@plt>
   1302c:	mov	r2, #5
   13030:	ldr	r1, [pc, #-1044]	; 12c24 <__assert_fail@plt+0xe20>
   13034:	mov	r0, r6
   13038:	bl	11a14 <dcgettext@plt>
   1303c:	mov	r1, r4
   13040:	bl	11da4 <fputs@plt>
   13044:	mov	r2, #5
   13048:	ldr	r1, [pc, #-1064]	; 12c28 <__assert_fail@plt+0xe24>
   1304c:	mov	r0, r6
   13050:	bl	11a14 <dcgettext@plt>
   13054:	mov	r1, r4
   13058:	bl	11da4 <fputs@plt>
   1305c:	mov	r2, #5
   13060:	ldr	r1, [pc, #-1084]	; 12c2c <__assert_fail@plt+0xe28>
   13064:	mov	r0, r6
   13068:	bl	11a14 <dcgettext@plt>
   1306c:	mov	r1, r4
   13070:	bl	11da4 <fputs@plt>
   13074:	mov	r2, #5
   13078:	ldr	r1, [pc, #-1104]	; 12c30 <__assert_fail@plt+0xe2c>
   1307c:	mov	r0, r6
   13080:	bl	11a14 <dcgettext@plt>
   13084:	mov	r1, r4
   13088:	bl	11da4 <fputs@plt>
   1308c:	mov	r2, #5
   13090:	ldr	r1, [pc, #-1124]	; 12c34 <__assert_fail@plt+0xe30>
   13094:	mov	r0, r6
   13098:	bl	11a14 <dcgettext@plt>
   1309c:	mov	r1, r4
   130a0:	bl	11da4 <fputs@plt>
   130a4:	mov	r2, #5
   130a8:	ldr	r1, [pc, #-1144]	; 12c38 <__assert_fail@plt+0xe34>
   130ac:	mov	r0, r6
   130b0:	bl	11a14 <dcgettext@plt>
   130b4:	mov	r1, r4
   130b8:	bl	11da4 <fputs@plt>
   130bc:	mov	r2, #5
   130c0:	ldr	r1, [pc, #-1164]	; 12c3c <__assert_fail@plt+0xe38>
   130c4:	mov	r0, r6
   130c8:	bl	11a14 <dcgettext@plt>
   130cc:	mov	r1, r4
   130d0:	bl	11da4 <fputs@plt>
   130d4:	mov	r1, r4
   130d8:	mov	r0, #10
   130dc:	bl	11d14 <fputc@plt>
   130e0:	mov	r2, #5
   130e4:	ldr	r1, [pc, #-1196]	; 12c40 <__assert_fail@plt+0xe3c>
   130e8:	mov	r0, r6
   130ec:	bl	11a14 <dcgettext@plt>
   130f0:	mov	r2, #5
   130f4:	ldr	r1, [pc, #-1208]	; 12c44 <__assert_fail@plt+0xe40>
   130f8:	mov	r7, r0
   130fc:	mov	r0, r6
   13100:	bl	11a14 <dcgettext@plt>
   13104:	ldr	r2, [pc, #-1220]	; 12c48 <__assert_fail@plt+0xe44>
   13108:	mov	r3, r7
   1310c:	str	r2, [sp]
   13110:	ldr	r1, [pc, #-1228]	; 12c4c <__assert_fail@plt+0xe48>
   13114:	ldr	r2, [pc, #-1228]	; 12c50 <__assert_fail@plt+0xe4c>
   13118:	str	r0, [sp, #4]
   1311c:	mov	r0, #1
   13120:	bl	11c78 <__printf_chk@plt>
   13124:	ldr	r1, [pc, #-1240]	; 12c54 <__assert_fail@plt+0xe50>
   13128:	mov	r2, #5
   1312c:	mov	r0, r6
   13130:	bl	11a14 <dcgettext@plt>
   13134:	mov	r1, r4
   13138:	bl	11da4 <fputs@plt>
   1313c:	ldr	r1, [r5, #4]
   13140:	mov	r2, #5
   13144:	mov	r0, #0
   13148:	ldr	r7, [r5]
   1314c:	bl	11a14 <dcgettext@plt>
   13150:	add	r6, r6, #1
   13154:	mov	r3, r7
   13158:	mov	r2, r8
   1315c:	mov	r1, #1
   13160:	add	r5, r5, #12
   13164:	str	r0, [sp]
   13168:	mov	r0, r4
   1316c:	bl	11cb4 <__fprintf_chk@plt>
   13170:	cmp	r6, #13
   13174:	bne	1313c <__assert_fail@plt+0x1338>
   13178:	mov	r2, #5
   1317c:	ldr	r1, [pc, #-1324]	; 12c58 <__assert_fail@plt+0xe54>
   13180:	mov	r0, #0
   13184:	bl	11a14 <dcgettext@plt>
   13188:	ldr	r2, [pc, #-1332]	; 12c5c <__assert_fail@plt+0xe58>
   1318c:	mov	r1, r0
   13190:	mov	r0, #1
   13194:	bl	11c78 <__printf_chk@plt>
   13198:	mov	r0, #0
   1319c:	bl	11b94 <exit@plt>
   131a0:	mov	r2, #5
   131a4:	ldr	r1, [pc, #-1356]	; 12c60 <__assert_fail@plt+0xe5c>
   131a8:	mov	r0, #0
   131ac:	bl	11a14 <dcgettext@plt>
   131b0:	bl	11bd0 <warnx@plt>
   131b4:	ldr	r3, [pc, #-1344]	; 12c7c <__assert_fail@plt+0xe78>
   131b8:	mov	r2, #5
   131bc:	ldr	r1, [pc, #-1376]	; 12c64 <__assert_fail@plt+0xe60>
   131c0:	mov	r0, #0
   131c4:	ldr	r4, [r3]
   131c8:	bl	11a14 <dcgettext@plt>
   131cc:	ldr	r3, [pc, #-1360]	; 12c84 <__assert_fail@plt+0xe80>
   131d0:	mov	r1, #1
   131d4:	ldr	r3, [r3]
   131d8:	mov	r2, r0
   131dc:	mov	r0, r4
   131e0:	bl	11cb4 <__fprintf_chk@plt>
   131e4:	mov	r0, #1
   131e8:	bl	11b94 <exit@plt>
   131ec:	ldr	r5, [sp, #208]	; 0xd0
   131f0:	mov	r1, #4
   131f4:	mov	r0, r5
   131f8:	bl	118b8 <calloc@plt>
   131fc:	cmp	r5, #0
   13200:	clz	r3, r0
   13204:	lsr	r3, r3, #5
   13208:	moveq	r3, #0
   1320c:	cmp	r3, #0
   13210:	bne	135e0 <__assert_fail@plt+0x17dc>
   13214:	str	r0, [sp, #308]	; 0x134
   13218:	b	12660 <__assert_fail@plt+0x85c>
   1321c:	ldr	r1, [sp, #28]
   13220:	cmp	r1, #0
   13224:	bne	1325c <__assert_fail@plt+0x1458>
   13228:	ldrb	r2, [sp, #96]	; 0x60
   1322c:	str	r3, [sp, #348]	; 0x15c
   13230:	mov	r3, #2
   13234:	orr	r2, r2, #2
   13238:	str	r1, [sp, #344]	; 0x158
   1323c:	strb	r2, [sp, #96]	; 0x60
   13240:	mov	r1, #5
   13244:	mov	r2, #3
   13248:	str	r3, [sp, #352]	; 0x160
   1324c:	mov	r3, #6
   13250:	str	r1, [sp, #28]
   13254:	str	r2, [sp, #356]	; 0x164
   13258:	str	r3, [sp, #360]	; 0x168
   1325c:	add	r3, sp, #88	; 0x58
   13260:	ldr	r2, [sp, #28]
   13264:	add	r0, sp, #100	; 0x64
   13268:	add	r1, sp, #344	; 0x158
   1326c:	bl	15b04 <__assert_fail@plt+0x3d00>
   13270:	b	12984 <__assert_fail@plt+0xb80>
   13274:	ldr	r1, [sp, #28]
   13278:	cmp	r1, #0
   1327c:	bne	13458 <__assert_fail@plt+0x1654>
   13280:	ldr	r2, [sp, #256]	; 0x100
   13284:	str	r1, [sp, #344]	; 0x158
   13288:	cmp	r2, #0
   1328c:	moveq	r3, #1
   13290:	strne	r3, [sp, #28]
   13294:	streq	r3, [sp, #28]
   13298:	ldr	r3, [sp, #264]	; 0x108
   1329c:	movne	r2, #3
   132a0:	strne	r2, [sp, #348]	; 0x15c
   132a4:	cmp	r3, #0
   132a8:	beq	132c8 <__assert_fail@plt+0x14c4>
   132ac:	ldr	r1, [sp, #28]
   132b0:	add	r3, sp, #656	; 0x290
   132b4:	mov	r2, #5
   132b8:	add	r3, r3, r1, lsl #2
   132bc:	str	r2, [r3, #-312]	; 0xfffffec8
   132c0:	add	r3, r1, #1
   132c4:	str	r3, [sp, #28]
   132c8:	ldr	r3, [sp, #276]	; 0x114
   132cc:	cmp	r3, #0
   132d0:	beq	132f0 <__assert_fail@plt+0x14ec>
   132d4:	ldr	r1, [sp, #28]
   132d8:	add	r3, sp, #656	; 0x290
   132dc:	mov	r2, #4
   132e0:	add	r3, r3, r1, lsl #2
   132e4:	str	r2, [r3, #-312]	; 0xfffffec8
   132e8:	add	r3, r1, #1
   132ec:	str	r3, [sp, #28]
   132f0:	ldr	r3, [sp, #288]	; 0x120
   132f4:	cmp	r3, #0
   132f8:	beq	13318 <__assert_fail@plt+0x1514>
   132fc:	ldr	r1, [sp, #28]
   13300:	mov	r2, #2
   13304:	add	r3, sp, #656	; 0x290
   13308:	add	r3, r3, r1, lsl r2
   1330c:	str	r2, [r3, #-312]	; 0xfffffec8
   13310:	add	r3, r1, #1
   13314:	str	r3, [sp, #28]
   13318:	ldr	r3, [sp, #300]	; 0x12c
   1331c:	cmp	r3, #0
   13320:	beq	13340 <__assert_fail@plt+0x153c>
   13324:	ldr	r1, [sp, #28]
   13328:	add	r3, sp, #656	; 0x290
   1332c:	mov	r2, #1
   13330:	add	r3, r3, r1, lsl #2
   13334:	str	r2, [r3, #-312]	; 0xfffffec8
   13338:	add	r3, r1, r2
   1333c:	str	r3, [sp, #28]
   13340:	ldr	r3, [sp, #232]	; 0xe8
   13344:	cmp	r3, #0
   13348:	beq	13368 <__assert_fail@plt+0x1564>
   1334c:	ldr	r1, [sp, #28]
   13350:	add	r3, sp, #656	; 0x290
   13354:	mov	r2, #6
   13358:	add	r3, r3, r1, lsl #2
   1335c:	str	r2, [r3, #-312]	; 0xfffffec8
   13360:	add	r3, r1, #1
   13364:	str	r3, [sp, #28]
   13368:	ldr	r3, [sp, #220]	; 0xdc
   1336c:	cmp	r3, #0
   13370:	beq	13390 <__assert_fail@plt+0x158c>
   13374:	ldr	r1, [sp, #28]
   13378:	add	r3, sp, #656	; 0x290
   1337c:	mov	r2, #10
   13380:	add	r3, r3, r1, lsl #2
   13384:	str	r2, [r3, #-312]	; 0xfffffec8
   13388:	add	r3, r1, #1
   1338c:	str	r3, [sp, #28]
   13390:	ldr	r3, [sp, #316]	; 0x13c
   13394:	cmp	r3, #0
   13398:	beq	133b8 <__assert_fail@plt+0x15b4>
   1339c:	ldr	r1, [sp, #28]
   133a0:	add	r3, sp, #656	; 0x290
   133a4:	mov	r2, #9
   133a8:	add	r3, r3, r1, lsl #2
   133ac:	str	r2, [r3, #-312]	; 0xfffffec8
   133b0:	add	r3, r1, #1
   133b4:	str	r3, [sp, #28]
   133b8:	ldr	r3, [sp, #308]	; 0x134
   133bc:	cmp	r3, #0
   133c0:	beq	133e0 <__assert_fail@plt+0x15dc>
   133c4:	ldr	r1, [sp, #28]
   133c8:	add	r3, sp, #656	; 0x290
   133cc:	mov	r2, #7
   133d0:	add	r3, r3, r1, lsl #2
   133d4:	str	r2, [r3, #-312]	; 0xfffffec8
   133d8:	add	r3, r1, #1
   133dc:	str	r3, [sp, #28]
   133e0:	ldr	r3, [sp, #312]	; 0x138
   133e4:	cmp	r3, #0
   133e8:	beq	13408 <__assert_fail@plt+0x1604>
   133ec:	ldr	r1, [sp, #28]
   133f0:	add	r3, sp, #656	; 0x290
   133f4:	mov	r2, #8
   133f8:	add	r3, r3, r1, lsl #2
   133fc:	str	r2, [r3, #-312]	; 0xfffffec8
   13400:	add	r3, r1, #1
   13404:	str	r3, [sp, #28]
   13408:	ldr	r3, [sp, #172]	; 0xac
   1340c:	cmp	r3, #0
   13410:	beq	13430 <__assert_fail@plt+0x162c>
   13414:	ldr	r1, [sp, #28]
   13418:	add	r3, sp, #656	; 0x290
   1341c:	mov	r2, #11
   13420:	add	r3, r3, r1, lsl #2
   13424:	str	r2, [r3, #-312]	; 0xfffffec8
   13428:	add	r3, r1, #1
   1342c:	str	r3, [sp, #28]
   13430:	ldr	r3, [sp, #176]	; 0xb0
   13434:	cmp	r3, #0
   13438:	beq	13458 <__assert_fail@plt+0x1654>
   1343c:	ldr	r1, [sp, #28]
   13440:	add	r3, sp, #656	; 0x290
   13444:	mov	r2, #12
   13448:	add	r3, r3, r1, lsl #2
   1344c:	str	r2, [r3, #-312]	; 0xfffffec8
   13450:	add	r3, r1, #1
   13454:	str	r3, [sp, #28]
   13458:	add	r3, sp, #88	; 0x58
   1345c:	ldr	r2, [sp, #28]
   13460:	add	r0, sp, #100	; 0x64
   13464:	add	r1, sp, #344	; 0x158
   13468:	bl	15f34 <__assert_fail@plt+0x4130>
   1346c:	b	12984 <__assert_fail@plt+0xb80>
   13470:	add	r1, sp, #88	; 0x58
   13474:	add	r0, sp, #100	; 0x64
   13478:	bl	14a7c <__assert_fail@plt+0x2c78>
   1347c:	b	12984 <__assert_fail@plt+0xb80>
   13480:	mov	r1, #4
   13484:	mov	r0, r4
   13488:	str	r3, [sp, #288]	; 0x120
   1348c:	bl	118b8 <calloc@plt>
   13490:	subs	r6, r0, #0
   13494:	bne	13624 <__assert_fail@plt+0x1820>
   13498:	cmp	r4, #0
   1349c:	bne	135e0 <__assert_fail@plt+0x17dc>
   134a0:	mov	r0, #0
   134a4:	mov	r1, #4
   134a8:	str	r0, [sp, #304]	; 0x130
   134ac:	mov	r6, r0
   134b0:	bl	118b8 <calloc@plt>
   134b4:	b	12e34 <__assert_fail@plt+0x1030>
   134b8:	ldr	r6, [pc, #-2116]	; 12c7c <__assert_fail@plt+0xe78>
   134bc:	mov	r2, #5
   134c0:	ldr	r1, [pc, #-2144]	; 12c68 <__assert_fail@plt+0xe64>
   134c4:	mov	r0, #0
   134c8:	ldr	sl, [r6]
   134cc:	bl	11a14 <dcgettext@plt>
   134d0:	ldr	r3, [pc, #-2132]	; 12c84 <__assert_fail@plt+0xe80>
   134d4:	mov	r1, #1
   134d8:	sub	r4, r5, #4
   134dc:	ldr	r3, [r3]
   134e0:	add	r5, r5, #56	; 0x38
   134e4:	ldr	r7, [pc, #-2176]	; 12c6c <__assert_fail@plt+0xe68>
   134e8:	ldr	r9, [pc, #-2176]	; 12c70 <__assert_fail@plt+0xe6c>
   134ec:	ldr	r8, [pc, #-2176]	; 12c74 <__assert_fail@plt+0xe70>
   134f0:	mov	r2, r0
   134f4:	mov	r0, sl
   134f8:	bl	11cb4 <__fprintf_chk@plt>
   134fc:	ldr	r0, [r4, #4]!
   13500:	cmp	r0, #0
   13504:	beq	1355c <__assert_fail@plt+0x1758>
   13508:	cmp	r0, #97	; 0x61
   1350c:	beq	13570 <__assert_fail@plt+0x176c>
   13510:	ldr	r2, [pc, #-2208]	; 12c78 <__assert_fail@plt+0xe74>
   13514:	b	13528 <__assert_fail@plt+0x1724>
   13518:	add	r2, r2, #16
   1351c:	ldr	r1, [r2, #12]
   13520:	cmp	r0, r1
   13524:	beq	13574 <__assert_fail@plt+0x1770>
   13528:	ldr	r3, [r2, #16]
   1352c:	cmp	r3, #0
   13530:	bne	13518 <__assert_fail@plt+0x1714>
   13534:	sub	r3, r0, #33	; 0x21
   13538:	cmp	r3, #93	; 0x5d
   1353c:	bhi	13554 <__assert_fail@plt+0x1750>
   13540:	mov	r3, r0
   13544:	mov	r2, r8
   13548:	mov	r1, #1
   1354c:	ldr	r0, [r6]
   13550:	bl	11cb4 <__fprintf_chk@plt>
   13554:	cmp	r5, r4
   13558:	bne	134fc <__assert_fail@plt+0x16f8>
   1355c:	ldr	r1, [r6]
   13560:	mov	r0, #10
   13564:	bl	11d14 <fputc@plt>
   13568:	mov	r0, #1
   1356c:	bl	11b94 <exit@plt>
   13570:	mov	r3, r9
   13574:	mov	r2, r7
   13578:	mov	r1, #1
   1357c:	ldr	r0, [r6]
   13580:	bl	11cb4 <__fprintf_chk@plt>
   13584:	b	13554 <__assert_fail@plt+0x1750>
   13588:	ldr	r3, [pc, #-2324]	; 12c7c <__assert_fail@plt+0xe78>
   1358c:	mov	r2, #5
   13590:	ldr	r1, [pc, #-2328]	; 12c80 <__assert_fail@plt+0xe7c>
   13594:	ldr	r4, [r3]
   13598:	bl	11a14 <dcgettext@plt>
   1359c:	ldr	r3, [pc, #-2336]	; 12c84 <__assert_fail@plt+0xe80>
   135a0:	mov	r1, #1
   135a4:	ldr	r3, [r3]
   135a8:	mov	r2, r0
   135ac:	mov	r0, r4
   135b0:	bl	11cb4 <__fprintf_chk@plt>
   135b4:	b	12138 <__assert_fail@plt+0x334>
   135b8:	mov	r1, #4
   135bc:	mov	r0, r4
   135c0:	str	r3, [sp, #264]	; 0x108
   135c4:	bl	118b8 <calloc@plt>
   135c8:	cmp	r4, #0
   135cc:	clz	r3, r0
   135d0:	lsr	r3, r3, #5
   135d4:	moveq	r3, #0
   135d8:	cmp	r3, #0
   135dc:	beq	12ee0 <__assert_fail@plt+0x10dc>
   135e0:	mov	r2, #4
   135e4:	ldr	r1, [pc, #-2388]	; 12c98 <__assert_fail@plt+0xe94>
   135e8:	mov	r0, #1
   135ec:	bl	11a5c <err@plt>
   135f0:	mov	r1, #4
   135f4:	mov	r0, r4
   135f8:	str	r3, [sp, #276]	; 0x114
   135fc:	bl	118b8 <calloc@plt>
   13600:	cmp	r4, #0
   13604:	clz	r3, r0
   13608:	lsr	r3, r3, #5
   1360c:	moveq	r3, #0
   13610:	cmp	r3, #0
   13614:	beq	12e8c <__assert_fail@plt+0x1088>
   13618:	b	135e0 <__assert_fail@plt+0x17dc>
   1361c:	mov	r6, #1
   13620:	b	12138 <__assert_fail@plt+0x334>
   13624:	mov	r1, #4
   13628:	mov	r0, r4
   1362c:	str	r6, [sp, #304]	; 0x130
   13630:	bl	118b8 <calloc@plt>
   13634:	adds	r3, r4, #0
   13638:	movne	r3, #1
   1363c:	cmp	r0, #0
   13640:	movne	r3, #0
   13644:	cmp	r3, #0
   13648:	beq	12e34 <__assert_fail@plt+0x1030>
   1364c:	b	135e0 <__assert_fail@plt+0x17dc>
   13650:	ldr	r1, [pc, #-2512]	; 12c88 <__assert_fail@plt+0xe84>
   13654:	mov	r0, #1
   13658:	bl	11a5c <err@plt>
   1365c:	mov	r2, #5
   13660:	ldr	r1, [pc, #-2524]	; 12c8c <__assert_fail@plt+0xe88>
   13664:	bl	11a14 <dcgettext@plt>
   13668:	ldr	r2, [pc, #-2528]	; 12c90 <__assert_fail@plt+0xe8c>
   1366c:	mov	r1, r0
   13670:	mov	r0, #1
   13674:	bl	11a5c <err@plt>
   13678:	ldr	r1, [pc, #-2540]	; 12c94 <__assert_fail@plt+0xe90>
   1367c:	mov	r2, #5
   13680:	bl	11a14 <dcgettext@plt>
   13684:	mov	r1, r0
   13688:	mov	r0, #1
   1368c:	bl	11a5c <err@plt>
   13690:	mov	r2, r5
   13694:	ldr	r1, [pc, #-2564]	; 12c98 <__assert_fail@plt+0xe94>
   13698:	mov	r0, #1
   1369c:	bl	11a5c <err@plt>
   136a0:	bl	11a2c <__stack_chk_fail@plt>
   136a4:	ldr	r1, [pc, #-2576]	; 12c9c <__assert_fail@plt+0xe98>
   136a8:	mov	r2, #5
   136ac:	bl	11a14 <dcgettext@plt>
   136b0:	mov	r1, r0
   136b4:	mov	r0, #1
   136b8:	bl	11a5c <err@plt>
   136bc:	mov	fp, #0
   136c0:	mov	lr, #0
   136c4:	pop	{r1}		; (ldr r1, [sp], #4)
   136c8:	mov	r2, sp
   136cc:	push	{r2}		; (str r2, [sp, #-4]!)
   136d0:	push	{r0}		; (str r0, [sp, #-4]!)
   136d4:	ldr	ip, [pc, #16]	; 136ec <__assert_fail@plt+0x18e8>
   136d8:	push	{ip}		; (str ip, [sp, #-4]!)
   136dc:	ldr	r0, [pc, #12]	; 136f0 <__assert_fail@plt+0x18ec>
   136e0:	ldr	r3, [pc, #12]	; 136f4 <__assert_fail@plt+0x18f0>
   136e4:	bl	11b10 <__libc_start_main@plt>
   136e8:	bl	11dbc <abort@plt>
   136ec:	andeq	ip, r1, ip, ror #27
   136f0:	andeq	r1, r1, r0, lsl lr
   136f4:	andeq	ip, r1, ip, lsl #27
   136f8:	ldr	r3, [pc, #20]	; 13714 <__assert_fail@plt+0x1910>
   136fc:	ldr	r2, [pc, #20]	; 13718 <__assert_fail@plt+0x1914>
   13700:	add	r3, pc, r3
   13704:	ldr	r2, [r3, r2]
   13708:	cmp	r2, #0
   1370c:	bxeq	lr
   13710:	b	11b64 <__gmon_start__@plt>
   13714:	andeq	ip, r1, r4, lsl r7
   13718:	andeq	r0, r0, r0, ror #3
   1371c:	ldr	r0, [pc, #24]	; 1373c <__assert_fail@plt+0x1938>
   13720:	ldr	r3, [pc, #24]	; 13740 <__assert_fail@plt+0x193c>
   13724:	cmp	r3, r0
   13728:	bxeq	lr
   1372c:	ldr	r3, [pc, #16]	; 13744 <__assert_fail@plt+0x1940>
   13730:	cmp	r3, #0
   13734:	bxeq	lr
   13738:	bx	r3
   1373c:	andeq	r0, r3, ip
   13740:	andeq	r0, r3, ip
   13744:	andeq	r0, r0, r0
   13748:	ldr	r0, [pc, #36]	; 13774 <__assert_fail@plt+0x1970>
   1374c:	ldr	r1, [pc, #36]	; 13778 <__assert_fail@plt+0x1974>
   13750:	sub	r1, r1, r0
   13754:	asr	r1, r1, #2
   13758:	add	r1, r1, r1, lsr #31
   1375c:	asrs	r1, r1, #1
   13760:	bxeq	lr
   13764:	ldr	r3, [pc, #16]	; 1377c <__assert_fail@plt+0x1978>
   13768:	cmp	r3, #0
   1376c:	bxeq	lr
   13770:	bx	r3
   13774:	andeq	r0, r3, ip
   13778:	andeq	r0, r3, ip
   1377c:	andeq	r0, r0, r0
   13780:	push	{r4, lr}
   13784:	ldr	r4, [pc, #24]	; 137a4 <__assert_fail@plt+0x19a0>
   13788:	ldrb	r3, [r4]
   1378c:	cmp	r3, #0
   13790:	popne	{r4, pc}
   13794:	bl	1371c <__assert_fail@plt+0x1918>
   13798:	mov	r3, #1
   1379c:	strb	r3, [r4]
   137a0:	pop	{r4, pc}
   137a4:	andeq	r0, r3, ip, lsr #32
   137a8:	b	13748 <__assert_fail@plt+0x1944>
   137ac:	andeq	r0, r0, r0
   137b0:	ldr	r0, [r0]
   137b4:	ldr	r3, [r1]
   137b8:	sub	r0, r0, r3
   137bc:	bx	lr
   137c0:	ldr	r3, [r1]
   137c4:	ldr	r1, [r0]
   137c8:	mov	r0, r3
   137cc:	b	118f4 <strcmp@plt>
   137d0:	push	{r4, r5, r6, r7, r8, lr}
   137d4:	mov	r8, r0
   137d8:	ldr	r5, [pc, #108]	; 1384c <__assert_fail@plt+0x1a48>
   137dc:	ldr	r6, [pc, #108]	; 13850 <__assert_fail@plt+0x1a4c>
   137e0:	mov	r7, r1
   137e4:	mov	r4, #0
   137e8:	b	137f0 <__assert_fail@plt+0x19ec>
   137ec:	ldr	r6, [r5, #-12]
   137f0:	mov	r2, r7
   137f4:	mov	r1, r6
   137f8:	mov	r0, r8
   137fc:	bl	11bf4 <strncasecmp@plt>
   13800:	add	r5, r5, #12
   13804:	cmp	r0, #0
   13808:	bne	13818 <__assert_fail@plt+0x1a14>
   1380c:	ldrsb	r3, [r6, r7]
   13810:	cmp	r3, #0
   13814:	beq	13844 <__assert_fail@plt+0x1a40>
   13818:	add	r4, r4, #1
   1381c:	cmp	r4, #13
   13820:	bne	137ec <__assert_fail@plt+0x19e8>
   13824:	mov	r2, #5
   13828:	ldr	r1, [pc, #36]	; 13854 <__assert_fail@plt+0x1a50>
   1382c:	mov	r0, #0
   13830:	bl	11a14 <dcgettext@plt>
   13834:	mov	r1, r8
   13838:	bl	11bd0 <warnx@plt>
   1383c:	mvn	r0, #0
   13840:	pop	{r4, r5, r6, r7, r8, pc}
   13844:	mov	r0, r4
   13848:	pop	{r4, r5, r6, r7, r8, pc}
   1384c:	andeq	ip, r1, r0, lsr #28
   13850:	andeq	sp, r1, r0, asr #1
   13854:	andeq	sp, r1, r4, asr #1
   13858:	push	{r1, r2, r3}
   1385c:	push	{r4, lr}
   13860:	sub	sp, sp, #12
   13864:	ldr	r4, [pc, #84]	; 138c0 <__assert_fail@plt+0x1abc>
   13868:	add	ip, sp, #24
   1386c:	mov	r3, ip
   13870:	ldr	r1, [r4]
   13874:	ldr	r2, [sp, #20]
   13878:	str	r1, [sp, #4]
   1387c:	mov	r1, #1
   13880:	str	ip, [sp]
   13884:	bl	11c18 <__vasprintf_chk@plt>
   13888:	cmp	r0, #0
   1388c:	blt	138b0 <__assert_fail@plt+0x1aac>
   13890:	ldr	r2, [sp, #4]
   13894:	ldr	r3, [r4]
   13898:	cmp	r2, r3
   1389c:	bne	138bc <__assert_fail@plt+0x1ab8>
   138a0:	add	sp, sp, #12
   138a4:	pop	{r4, lr}
   138a8:	add	sp, sp, #12
   138ac:	bx	lr
   138b0:	ldr	r1, [pc, #12]	; 138c4 <__assert_fail@plt+0x1ac0>
   138b4:	mov	r0, #1
   138b8:	bl	11a5c <err@plt>
   138bc:	bl	11a2c <__stack_chk_fail@plt>
   138c0:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   138c4:	ldrdeq	sp, [r1], -r8
   138c8:	push	{r4, r5, r6, lr}
   138cc:	mov	r4, r0
   138d0:	mov	r5, r1
   138d4:	bl	118b8 <calloc@plt>
   138d8:	adds	r4, r4, #0
   138dc:	movne	r4, #1
   138e0:	cmp	r0, #0
   138e4:	movne	r4, #0
   138e8:	cmp	r4, #0
   138ec:	popeq	{r4, r5, r6, pc}
   138f0:	mov	r2, r5
   138f4:	ldr	r1, [pc, #4]	; 13900 <__assert_fail@plt+0x1afc>
   138f8:	mov	r0, #1
   138fc:	bl	11a5c <err@plt>
   13900:	strdeq	sp, [r1], -r0
   13904:	ldr	r3, [pc, #140]	; 13998 <__assert_fail@plt+0x1b94>
   13908:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1390c:	subs	sl, r0, #0
   13910:	ldr	r6, [r3]
   13914:	beq	13990 <__assert_fail@plt+0x1b8c>
   13918:	ldr	r8, [r1]
   1391c:	mov	r7, r2
   13920:	cmp	r8, #0
   13924:	mov	r9, r1
   13928:	ble	13978 <__assert_fail@plt+0x1b74>
   1392c:	add	r6, r6, #31
   13930:	sub	r5, sl, #4
   13934:	lsr	r6, r6, #5
   13938:	mov	r4, #0
   1393c:	lsl	r6, r6, #2
   13940:	b	1394c <__assert_fail@plt+0x1b48>
   13944:	cmp	r8, r4
   13948:	beq	1397c <__assert_fail@plt+0x1b78>
   1394c:	mov	r2, r6
   13950:	ldr	r1, [r5, #4]!
   13954:	mov	r0, r7
   13958:	bl	119fc <memcmp@plt>
   1395c:	add	r4, r4, #1
   13960:	cmp	r0, #0
   13964:	bne	13944 <__assert_fail@plt+0x1b40>
   13968:	mov	r0, r7
   1396c:	bl	11c3c <__sched_cpufree@plt>
   13970:	mov	r0, #1
   13974:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13978:	bne	13968 <__assert_fail@plt+0x1b64>
   1397c:	add	r3, r8, #1
   13980:	str	r7, [sl, r8, lsl #2]
   13984:	mov	r0, #0
   13988:	str	r3, [r9]
   1398c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13990:	mvn	r0, #0
   13994:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13998:	andeq	r0, r3, r0, lsr r0
   1399c:	push	{r2, r3}
   139a0:	push	{r4, r5, r6, r7, lr}
   139a4:	sub	sp, sp, #20
   139a8:	ldr	r4, [pc, #208]	; 13a80 <__assert_fail@plt+0x1c7c>
   139ac:	mov	r6, r1
   139b0:	mov	r1, #0
   139b4:	ldr	r3, [r4]
   139b8:	ldr	r5, [sp, #40]	; 0x28
   139bc:	str	r3, [sp, #12]
   139c0:	bl	11b28 <scols_table_new_line@plt>
   139c4:	subs	r7, r0, #0
   139c8:	beq	13a3c <__assert_fail@plt+0x1c38>
   139cc:	mov	r2, r6
   139d0:	mov	r1, #0
   139d4:	bl	118dc <scols_line_set_data@plt>
   139d8:	add	ip, sp, #44	; 0x2c
   139dc:	mov	r2, r5
   139e0:	mov	r3, ip
   139e4:	mov	r1, #1
   139e8:	add	r0, sp, #4
   139ec:	str	ip, [sp, #8]
   139f0:	bl	11c18 <__vasprintf_chk@plt>
   139f4:	cmp	r0, #0
   139f8:	blt	13a58 <__assert_fail@plt+0x1c54>
   139fc:	ldr	r2, [sp, #4]
   13a00:	cmp	r2, #0
   13a04:	beq	13a1c <__assert_fail@plt+0x1c18>
   13a08:	mov	r0, r7
   13a0c:	mov	r1, #1
   13a10:	bl	118e8 <scols_line_refer_data@plt>
   13a14:	cmp	r0, #0
   13a18:	bne	13a64 <__assert_fail@plt+0x1c60>
   13a1c:	ldr	r2, [sp, #12]
   13a20:	ldr	r3, [r4]
   13a24:	cmp	r2, r3
   13a28:	bne	13a54 <__assert_fail@plt+0x1c50>
   13a2c:	add	sp, sp, #20
   13a30:	pop	{r4, r5, r6, r7, lr}
   13a34:	add	sp, sp, #8
   13a38:	bx	lr
   13a3c:	ldr	r1, [pc, #64]	; 13a84 <__assert_fail@plt+0x1c80>
   13a40:	mov	r2, #5
   13a44:	bl	11a14 <dcgettext@plt>
   13a48:	mov	r1, r0
   13a4c:	mov	r0, #1
   13a50:	bl	11a5c <err@plt>
   13a54:	bl	11a2c <__stack_chk_fail@plt>
   13a58:	ldr	r1, [pc, #40]	; 13a88 <__assert_fail@plt+0x1c84>
   13a5c:	mov	r0, #1
   13a60:	bl	11a5c <err@plt>
   13a64:	ldr	r1, [pc, #32]	; 13a8c <__assert_fail@plt+0x1c88>
   13a68:	mov	r2, #5
   13a6c:	mov	r0, #0
   13a70:	bl	11a14 <dcgettext@plt>
   13a74:	mov	r1, r0
   13a78:	mov	r0, #1
   13a7c:	bl	11a5c <err@plt>
   13a80:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   13a84:	andeq	sp, r1, ip, lsl #2
   13a88:	ldrdeq	sp, [r1], -r8
   13a8c:	andeq	sp, r1, ip, lsr #2
   13a90:	ldr	ip, [pc, #136]	; 13b20 <__assert_fail@plt+0x1d1c>
   13a94:	push	{r4, r5, r6, fp, lr}
   13a98:	add	fp, sp, #16
   13a9c:	sub	sp, sp, #12
   13aa0:	ldr	ip, [ip]
   13aa4:	ldr	r4, [pc, #120]	; 13b24 <__assert_fail@plt+0x1d20>
   13aa8:	cmp	r3, #0
   13aac:	add	r3, ip, #31
   13ab0:	rsb	ip, ip, ip, lsl #3
   13ab4:	mov	r5, r0
   13ab8:	add	r0, ip, #7
   13abc:	bic	r0, r0, #7
   13ac0:	lsr	r3, r3, #5
   13ac4:	ldr	lr, [r4]
   13ac8:	sub	sp, sp, r0
   13acc:	mov	r6, r1
   13ad0:	lsl	r3, r3, #2
   13ad4:	str	lr, [fp, #-24]	; 0xffffffe8
   13ad8:	mov	r1, ip
   13adc:	mov	r0, sp
   13ae0:	beq	13b14 <__assert_fail@plt+0x1d10>
   13ae4:	bl	19830 <__assert_fail@plt+0x7a2c>
   13ae8:	mov	r3, r0
   13aec:	ldr	r2, [pc, #52]	; 13b28 <__assert_fail@plt+0x1d24>
   13af0:	mov	r1, r6
   13af4:	mov	r0, r5
   13af8:	bl	1399c <__assert_fail@plt+0x1b98>
   13afc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13b00:	ldr	r3, [r4]
   13b04:	cmp	r2, r3
   13b08:	bne	13b1c <__assert_fail@plt+0x1d18>
   13b0c:	sub	sp, fp, #16
   13b10:	pop	{r4, r5, r6, fp, pc}
   13b14:	bl	19670 <__assert_fail@plt+0x786c>
   13b18:	b	13ae8 <__assert_fail@plt+0x1ce4>
   13b1c:	bl	11a2c <__stack_chk_fail@plt>
   13b20:	andeq	r0, r3, r0, lsr r0
   13b24:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   13b28:	ldrdeq	sp, [r1], -r4
   13b2c:	push	{r4, r5, r6, r7, r8, lr}
   13b30:	ldrsb	r3, [r0]
   13b34:	cmp	r3, #0
   13b38:	beq	13b48 <__assert_fail@plt+0x1d44>
   13b3c:	ldr	r8, [r2]
   13b40:	cmp	r8, #0
   13b44:	beq	13b54 <__assert_fail@plt+0x1d50>
   13b48:	mov	r7, #0
   13b4c:	mov	r0, r7
   13b50:	pop	{r4, r5, r6, r7, r8, pc}
   13b54:	mov	r5, r0
   13b58:	mov	r0, r1
   13b5c:	mov	r7, r1
   13b60:	mov	r6, r2
   13b64:	bl	11bb8 <strlen@plt>
   13b68:	mov	r1, r7
   13b6c:	mov	r2, r0
   13b70:	mov	r4, r0
   13b74:	mov	r0, r5
   13b78:	bl	11db0 <strncmp@plt>
   13b7c:	subs	r7, r0, #0
   13b80:	bne	13c50 <__assert_fail@plt+0x1e4c>
   13b84:	bl	11b7c <__ctype_b_loc@plt>
   13b88:	add	r3, r5, r4
   13b8c:	ldr	r4, [r0]
   13b90:	mov	r2, r3
   13b94:	ldrsb	r1, [r3], #1
   13b98:	lsl	ip, r1, #1
   13b9c:	ldrh	ip, [r4, ip]
   13ba0:	tst	ip, #8192	; 0x2000
   13ba4:	bne	13b90 <__assert_fail@plt+0x1d8c>
   13ba8:	cmp	r1, #58	; 0x3a
   13bac:	bne	13b4c <__assert_fail@plt+0x1d48>
   13bb0:	ldrsb	r3, [r2, #1]
   13bb4:	add	r8, r2, #1
   13bb8:	lsl	r2, r3, #1
   13bbc:	ldrh	r2, [r4, r2]
   13bc0:	tst	r2, #8192	; 0x2000
   13bc4:	beq	13bdc <__assert_fail@plt+0x1dd8>
   13bc8:	ldrsb	r3, [r8, #1]!
   13bcc:	lsl	r2, r3, #1
   13bd0:	ldrh	r2, [r4, r2]
   13bd4:	tst	r2, #8192	; 0x2000
   13bd8:	bne	13bc8 <__assert_fail@plt+0x1dc4>
   13bdc:	cmp	r3, #0
   13be0:	beq	13b4c <__assert_fail@plt+0x1d48>
   13be4:	mov	r0, r5
   13be8:	bl	11bb8 <strlen@plt>
   13bec:	sub	r0, r0, #1
   13bf0:	add	r5, r5, r0
   13bf4:	ldrsb	r3, [r5, #-1]
   13bf8:	lsl	r3, r3, #1
   13bfc:	ldrh	r3, [r4, r3]
   13c00:	tst	r3, #8192	; 0x2000
   13c04:	beq	13c24 <__assert_fail@plt+0x1e20>
   13c08:	sub	r2, r5, #1
   13c0c:	mov	r5, r2
   13c10:	ldrsb	r3, [r2, #-1]!
   13c14:	lsl	r3, r3, #1
   13c18:	ldrh	r3, [r4, r3]
   13c1c:	tst	r3, #8192	; 0x2000
   13c20:	bne	13c0c <__assert_fail@plt+0x1e08>
   13c24:	mov	r3, #0
   13c28:	mov	r0, r8
   13c2c:	strb	r3, [r5]
   13c30:	bl	11a20 <strdup@plt>
   13c34:	cmp	r0, #0
   13c38:	strne	r0, [r6]
   13c3c:	movne	r7, #1
   13c40:	bne	13b4c <__assert_fail@plt+0x1d48>
   13c44:	ldr	r1, [pc, #16]	; 13c5c <__assert_fail@plt+0x1e58>
   13c48:	mov	r0, #1
   13c4c:	bl	11a5c <err@plt>
   13c50:	mov	r7, r8
   13c54:	mov	r0, r7
   13c58:	pop	{r4, r5, r6, r7, r8, pc}
   13c5c:	andeq	sp, r1, r8, asr #2
   13c60:	push	{r4, r5, r6, r7, r8, lr}
   13c64:	sub	sp, sp, #264	; 0x108
   13c68:	ldr	r8, [pc, #188]	; 13d2c <__assert_fail@plt+0x1f28>
   13c6c:	mov	r6, r1
   13c70:	ldr	r2, [pc, #184]	; 13d30 <__assert_fail@plt+0x1f2c>
   13c74:	ldr	r3, [r8]
   13c78:	ldr	r1, [pc, #180]	; 13d34 <__assert_fail@plt+0x1f30>
   13c7c:	str	r3, [sp, #260]	; 0x104
   13c80:	bl	1ae14 <__assert_fail@plt+0x9010>
   13c84:	subs	r4, r0, #0
   13c88:	moveq	r0, r4
   13c8c:	beq	13d08 <__assert_fail@plt+0x1f04>
   13c90:	mov	r2, #256	; 0x100
   13c94:	mov	r1, #0
   13c98:	add	r0, sp, #4
   13c9c:	bl	11c48 <memset@plt>
   13ca0:	mov	r3, r4
   13ca4:	mov	r2, #255	; 0xff
   13ca8:	mov	r1, #1
   13cac:	add	r0, sp, #4
   13cb0:	bl	11ac8 <fread@plt>
   13cb4:	mov	r7, r0
   13cb8:	mov	r0, r4
   13cbc:	bl	11cc0 <fclose@plt>
   13cc0:	cmp	r7, #0
   13cc4:	beq	13d20 <__assert_fail@plt+0x1f1c>
   13cc8:	mov	r4, #0
   13ccc:	b	13ce8 <__assert_fail@plt+0x1ee4>
   13cd0:	mov	r0, r5
   13cd4:	bl	11bb8 <strlen@plt>
   13cd8:	add	r0, r0, #1
   13cdc:	add	r4, r4, r0
   13ce0:	cmp	r7, r4
   13ce4:	bls	13d20 <__assert_fail@plt+0x1f1c>
   13ce8:	add	r3, sp, #4
   13cec:	add	r5, r3, r4
   13cf0:	mov	r0, r5
   13cf4:	mov	r1, r6
   13cf8:	bl	118f4 <strcmp@plt>
   13cfc:	cmp	r0, #0
   13d00:	bne	13cd0 <__assert_fail@plt+0x1ecc>
   13d04:	mov	r0, #1
   13d08:	ldr	r2, [sp, #260]	; 0x104
   13d0c:	ldr	r3, [r8]
   13d10:	cmp	r2, r3
   13d14:	bne	13d28 <__assert_fail@plt+0x1f24>
   13d18:	add	sp, sp, #264	; 0x108
   13d1c:	pop	{r4, r5, r6, r7, r8, pc}
   13d20:	mov	r0, #0
   13d24:	b	13d08 <__assert_fail@plt+0x1f04>
   13d28:	bl	11a2c <__stack_chk_fail@plt>
   13d2c:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   13d30:	andeq	sp, r1, r0, ror #2
   13d34:	andeq	lr, r1, r0, asr r1
   13d38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d3c:	sub	sp, sp, #32
   13d40:	ldr	sl, [pc, #156]	; 13de4 <__assert_fail@plt+0x1fe0>
   13d44:	mov	r8, r1
   13d48:	mov	r9, r2
   13d4c:	ldr	r3, [sl]
   13d50:	ldr	r2, [pc, #144]	; 13de8 <__assert_fail@plt+0x1fe4>
   13d54:	ldr	r1, [pc, #144]	; 13dec <__assert_fail@plt+0x1fe8>
   13d58:	str	r3, [sp, #28]
   13d5c:	bl	1ae14 <__assert_fail@plt+0x9010>
   13d60:	subs	r4, r0, #0
   13d64:	moveq	r5, r4
   13d68:	beq	13dc4 <__assert_fail@plt+0x1fc0>
   13d6c:	ldr	r5, [pc, #124]	; 13df0 <__assert_fail@plt+0x1fec>
   13d70:	add	r7, sp, #24
   13d74:	add	r6, sp, #20
   13d78:	strd	r6, [sp]
   13d7c:	add	r3, sp, #16
   13d80:	add	r2, sp, #12
   13d84:	mov	r1, r5
   13d88:	mov	r0, r4
   13d8c:	bl	11c60 <fscanf@plt>
   13d90:	cmp	r0, #4
   13d94:	bne	13db8 <__assert_fail@plt+0x1fb4>
   13d98:	ldr	r3, [sp, #20]
   13d9c:	cmp	r3, r8
   13da0:	bne	13d78 <__assert_fail@plt+0x1f74>
   13da4:	ldr	r3, [sp, #24]
   13da8:	cmp	r3, r9
   13dac:	bne	13d78 <__assert_fail@plt+0x1f74>
   13db0:	mov	r5, #1
   13db4:	b	13dbc <__assert_fail@plt+0x1fb8>
   13db8:	mov	r5, #0
   13dbc:	mov	r0, r4
   13dc0:	bl	11cc0 <fclose@plt>
   13dc4:	ldr	r2, [sp, #28]
   13dc8:	ldr	r3, [sl]
   13dcc:	mov	r0, r5
   13dd0:	cmp	r2, r3
   13dd4:	bne	13de0 <__assert_fail@plt+0x1fdc>
   13dd8:	add	sp, sp, #32
   13ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13de0:	bl	11a2c <__stack_chk_fail@plt>
   13de4:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   13de8:	andeq	sp, r1, r8, ror r1
   13dec:	andeq	lr, r1, r0, asr r1
   13df0:	andeq	sp, r1, r8, lsl #3
   13df4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13df8:	sub	sp, sp, #8192	; 0x2000
   13dfc:	ldr	r5, [pc, #1504]	; 143e4 <__assert_fail@plt+0x25e0>
   13e00:	sub	sp, sp, #8
   13e04:	add	ip, sp, #8192	; 0x2000
   13e08:	ldr	r3, [r5]
   13e0c:	add	ip, ip, #4
   13e10:	mov	r4, r0
   13e14:	mov	r7, r1
   13e18:	ldr	r0, [r0, #8]
   13e1c:	ldr	r2, [pc, #1476]	; 143e8 <__assert_fail@plt+0x25e4>
   13e20:	ldr	r1, [pc, #1476]	; 143ec <__assert_fail@plt+0x25e8>
   13e24:	str	r3, [ip]
   13e28:	bl	1ae14 <__assert_fail@plt+0x9010>
   13e2c:	subs	r6, r0, #0
   13e30:	beq	13e80 <__assert_fail@plt+0x207c>
   13e34:	add	r8, sp, #4
   13e38:	mov	r0, r8
   13e3c:	mov	r2, r6
   13e40:	mov	r1, #256	; 0x100
   13e44:	bl	11978 <fgets@plt>
   13e48:	cmp	r0, #0
   13e4c:	beq	13e6c <__assert_fail@plt+0x2068>
   13e50:	mov	r0, r8
   13e54:	ldr	r1, [pc, #1428]	; 143f0 <__assert_fail@plt+0x25ec>
   13e58:	bl	118c4 <strstr@plt>
   13e5c:	cmp	r0, #0
   13e60:	movne	r2, #15
   13e64:	movne	r3, #3
   13e68:	strdne	r2, [r4, #52]	; 0x34
   13e6c:	mov	r0, r6
   13e70:	bl	11cc0 <fclose@plt>
   13e74:	ldr	r3, [r4, #56]	; 0x38
   13e78:	cmp	r3, #0
   13e7c:	bne	13ea8 <__assert_fail@plt+0x20a4>
   13e80:	ldr	r3, [r7]
   13e84:	cmp	r3, #1
   13e88:	beq	13ed4 <__assert_fail@plt+0x20d0>
   13e8c:	ldr	r6, [r4, #52]	; 0x34
   13e90:	cmp	r6, #0
   13e94:	beq	13ecc <__assert_fail@plt+0x20c8>
   13e98:	mov	r3, #2
   13e9c:	cmp	r6, #1
   13ea0:	str	r3, [r4, #56]	; 0x38
   13ea4:	beq	13f08 <__assert_fail@plt+0x2104>
   13ea8:	add	r3, sp, #8192	; 0x2000
   13eac:	add	r3, r3, #4
   13eb0:	ldr	r2, [r3]
   13eb4:	ldr	r3, [r5]
   13eb8:	cmp	r2, r3
   13ebc:	bne	14274 <__assert_fail@plt+0x2470>
   13ec0:	add	sp, sp, #8192	; 0x2000
   13ec4:	add	sp, sp, #8
   13ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ecc:	bl	17394 <__assert_fail@plt+0x5590>
   13ed0:	str	r0, [r4, #52]	; 0x34
   13ed4:	ldr	r6, [r4, #52]	; 0x34
   13ed8:	cmp	r6, #0
   13edc:	bne	13e98 <__assert_fail@plt+0x2094>
   13ee0:	ldr	r2, [pc, #1292]	; 143f4 <__assert_fail@plt+0x25f0>
   13ee4:	mov	r1, r6
   13ee8:	ldr	r0, [r4, #8]
   13eec:	bl	1a920 <__assert_fail@plt+0x8b1c>
   13ef0:	cmp	r0, #0
   13ef4:	bne	13f40 <__assert_fail@plt+0x213c>
   13ef8:	mov	r2, #12
   13efc:	mov	r3, #1
   13f00:	strd	r2, [r4, #52]	; 0x34
   13f04:	b	13ea8 <__assert_fail@plt+0x20a4>
   13f08:	ldr	r2, [pc, #1256]	; 143f8 <__assert_fail@plt+0x25f4>
   13f0c:	ldr	r1, [pc, #1240]	; 143ec <__assert_fail@plt+0x25e8>
   13f10:	ldr	r0, [r4]
   13f14:	bl	1c57c <__assert_fail@plt+0xa778>
   13f18:	subs	r6, r0, #0
   13f1c:	beq	13ea8 <__assert_fail@plt+0x20a4>
   13f20:	mov	r2, sp
   13f24:	ldr	r1, [pc, #1232]	; 143fc <__assert_fail@plt+0x25f8>
   13f28:	bl	11c60 <fscanf@plt>
   13f2c:	cmp	r0, #1
   13f30:	beq	13ff8 <__assert_fail@plt+0x21f4>
   13f34:	mov	r0, r6
   13f38:	bl	11cc0 <fclose@plt>
   13f3c:	b	13ea8 <__assert_fail@plt+0x20a4>
   13f40:	ldr	r1, [pc, #1208]	; 14400 <__assert_fail@plt+0x25fc>
   13f44:	ldr	r0, [r4, #8]
   13f48:	bl	13c60 <__assert_fail@plt+0x1e5c>
   13f4c:	subs	r1, r0, #0
   13f50:	beq	1401c <__assert_fail@plt+0x2218>
   13f54:	str	r6, [r4, #52]	; 0x34
   13f58:	str	r6, [r4, #56]	; 0x38
   13f5c:	ldr	r2, [pc, #1184]	; 14404 <__assert_fail@plt+0x2600>
   13f60:	mov	r1, #0
   13f64:	ldr	r0, [r4, #8]
   13f68:	bl	1a920 <__assert_fail@plt+0x8b1c>
   13f6c:	subs	r6, r0, #0
   13f70:	bne	13fd0 <__assert_fail@plt+0x21cc>
   13f74:	ldr	r2, [pc, #1164]	; 14408 <__assert_fail@plt+0x2604>
   13f78:	ldr	r1, [pc, #1132]	; 143ec <__assert_fail@plt+0x25e8>
   13f7c:	ldr	r0, [r4, #8]
   13f80:	bl	1ae14 <__assert_fail@plt+0x9010>
   13f84:	subs	r7, r0, #0
   13f88:	beq	13fbc <__assert_fail@plt+0x21b8>
   13f8c:	add	r2, sp, #4
   13f90:	ldr	r1, [pc, #1140]	; 1440c <__assert_fail@plt+0x2608>
   13f94:	bl	11c60 <fscanf@plt>
   13f98:	cmp	r0, #1
   13f9c:	bne	13fb4 <__assert_fail@plt+0x21b0>
   13fa0:	add	r0, sp, #4
   13fa4:	ldr	r1, [pc, #1124]	; 14410 <__assert_fail@plt+0x260c>
   13fa8:	bl	118f4 <strcmp@plt>
   13fac:	clz	r6, r0
   13fb0:	lsr	r6, r6, #5
   13fb4:	mov	r0, r7
   13fb8:	bl	11cc0 <fclose@plt>
   13fbc:	eor	r6, r6, #1
   13fc0:	mov	r3, #1
   13fc4:	str	r6, [r4, #56]	; 0x38
   13fc8:	str	r3, [r4, #52]	; 0x34
   13fcc:	b	13ea8 <__assert_fail@plt+0x20a4>
   13fd0:	mov	r2, #1
   13fd4:	ldr	r1, [pc, #1080]	; 14414 <__assert_fail@plt+0x2610>
   13fd8:	ldr	r0, [r4, #8]
   13fdc:	bl	13d38 <__assert_fail@plt+0x1f34>
   13fe0:	cmp	r0, #0
   13fe4:	beq	140e4 <__assert_fail@plt+0x22e0>
   13fe8:	mov	r2, #1
   13fec:	mov	r3, #2
   13ff0:	strd	r2, [r4, #52]	; 0x34
   13ff4:	b	13ea8 <__assert_fail@plt+0x20a4>
   13ff8:	ldr	r3, [sp]
   13ffc:	tst	r3, #32
   14000:	bne	14010 <__assert_fail@plt+0x220c>
   14004:	and	r3, r3, #264	; 0x108
   14008:	cmp	r3, #264	; 0x108
   1400c:	bne	13f34 <__assert_fail@plt+0x2130>
   14010:	mov	r3, #1
   14014:	str	r3, [r4, #56]	; 0x38
   14018:	b	13f34 <__assert_fail@plt+0x2130>
   1401c:	ldr	r2, [pc, #1012]	; 14418 <__assert_fail@plt+0x2614>
   14020:	ldr	r0, [r4, #8]
   14024:	bl	1a920 <__assert_fail@plt+0x8b1c>
   14028:	subs	r1, r0, #0
   1402c:	bne	14044 <__assert_fail@plt+0x2240>
   14030:	ldr	r2, [pc, #996]	; 1441c <__assert_fail@plt+0x2618>
   14034:	ldr	r0, [r4, #8]
   14038:	bl	1a920 <__assert_fail@plt+0x8b1c>
   1403c:	subs	r1, r0, #0
   14040:	beq	14068 <__assert_fail@plt+0x2264>
   14044:	ldr	r1, [pc, #980]	; 14420 <__assert_fail@plt+0x261c>
   14048:	ldr	r0, [r4, #8]
   1404c:	bl	13c60 <__assert_fail@plt+0x1e5c>
   14050:	cmp	r0, #0
   14054:	beq	140d4 <__assert_fail@plt+0x22d0>
   14058:	mov	r2, #2
   1405c:	mov	r3, #1
   14060:	strd	r2, [r4, #52]	; 0x34
   14064:	b	13ea8 <__assert_fail@plt+0x20a4>
   14068:	ldr	r2, [pc, #948]	; 14424 <__assert_fail@plt+0x2620>
   1406c:	ldr	r0, [r4, #8]
   14070:	bl	1a920 <__assert_fail@plt+0x8b1c>
   14074:	cmp	r0, #0
   14078:	beq	14044 <__assert_fail@plt+0x2240>
   1407c:	mov	r2, #13
   14080:	mov	r3, #1
   14084:	ldr	r1, [pc, #864]	; 143ec <__assert_fail@plt+0x25e8>
   14088:	strd	r2, [r4, #52]	; 0x34
   1408c:	ldr	r0, [r4, #8]
   14090:	ldr	r2, [pc, #896]	; 14418 <__assert_fail@plt+0x2614>
   14094:	bl	1ae14 <__assert_fail@plt+0x9010>
   14098:	subs	r6, r0, #0
   1409c:	beq	140d4 <__assert_fail@plt+0x22d0>
   140a0:	add	r8, sp, #4
   140a4:	mov	r2, r8
   140a8:	ldr	r1, [pc, #860]	; 1440c <__assert_fail@plt+0x2608>
   140ac:	bl	11c60 <fscanf@plt>
   140b0:	cmp	r0, #1
   140b4:	bne	140cc <__assert_fail@plt+0x22c8>
   140b8:	mov	r0, r8
   140bc:	ldr	r1, [pc, #868]	; 14428 <__assert_fail@plt+0x2624>
   140c0:	bl	118f4 <strcmp@plt>
   140c4:	cmp	r0, #0
   140c8:	streq	r0, [r4, #56]	; 0x38
   140cc:	mov	r0, r6
   140d0:	bl	11cc0 <fclose@plt>
   140d4:	ldr	r3, [r4, #52]	; 0x34
   140d8:	cmp	r3, #0
   140dc:	ble	13f5c <__assert_fail@plt+0x2158>
   140e0:	b	13ea8 <__assert_fail@plt+0x20a4>
   140e4:	mov	r2, #1808	; 0x710
   140e8:	ldr	r1, [pc, #828]	; 1442c <__assert_fail@plt+0x2628>
   140ec:	ldr	r0, [r4, #8]
   140f0:	bl	13d38 <__assert_fail@plt+0x1f34>
   140f4:	cmp	r0, #0
   140f8:	movne	r2, #4
   140fc:	movne	r3, #2
   14100:	strdne	r2, [r4, #52]	; 0x34
   14104:	bne	13ea8 <__assert_fail@plt+0x20a4>
   14108:	ldr	r2, [pc, #800]	; 14430 <__assert_fail@plt+0x262c>
   1410c:	ldr	r1, [pc, #800]	; 14434 <__assert_fail@plt+0x2630>
   14110:	ldr	r0, [r4, #8]
   14114:	bl	13d38 <__assert_fail@plt+0x1f34>
   14118:	cmp	r0, #0
   1411c:	movne	r2, #11
   14120:	movne	r3, #2
   14124:	strdne	r2, [r4, #52]	; 0x34
   14128:	bne	13ea8 <__assert_fail@plt+0x20a4>
   1412c:	ldr	r2, [pc, #772]	; 14438 <__assert_fail@plt+0x2634>
   14130:	ldr	r1, [pc, #692]	; 143ec <__assert_fail@plt+0x25e8>
   14134:	ldr	r0, [r4, #8]
   14138:	bl	1ae14 <__assert_fail@plt+0x9010>
   1413c:	subs	r9, r0, #0
   14140:	beq	14278 <__assert_fail@plt+0x2474>
   14144:	ldr	sl, [pc, #752]	; 1443c <__assert_fail@plt+0x2638>
   14148:	ldr	r7, [pc, #752]	; 14440 <__assert_fail@plt+0x263c>
   1414c:	ldr	r1, [pc, #752]	; 14444 <__assert_fail@plt+0x2640>
   14150:	mov	r2, #5
   14154:	mov	r3, #2
   14158:	add	r6, sp, #8
   1415c:	add	r8, sp, #4
   14160:	str	r1, [r4, #48]	; 0x30
   14164:	strd	r2, [r4, #52]	; 0x34
   14168:	mov	r2, r9
   1416c:	mov	r1, #8192	; 0x2000
   14170:	mov	r0, r8
   14174:	bl	11978 <fgets@plt>
   14178:	cmp	r0, #0
   1417c:	beq	14268 <__assert_fail@plt+0x2464>
   14180:	mov	r1, sl
   14184:	mov	r0, r8
   14188:	bl	118c4 <strstr@plt>
   1418c:	cmp	r0, #0
   14190:	beq	14168 <__assert_fail@plt+0x2364>
   14194:	mov	r1, r7
   14198:	mov	r0, r8
   1419c:	bl	118c4 <strstr@plt>
   141a0:	mov	r1, #58	; 0x3a
   141a4:	cmp	r0, #0
   141a8:	moveq	r3, #5
   141ac:	movne	r3, #2
   141b0:	str	r3, [r4, #52]	; 0x34
   141b4:	mov	r0, r8
   141b8:	bl	11bc4 <strchr@plt>
   141bc:	subs	r2, r0, #0
   141c0:	beq	14168 <__assert_fail@plt+0x2364>
   141c4:	add	r2, r2, #1
   141c8:	ldr	r1, [pc, #632]	; 14448 <__assert_fail@plt+0x2644>
   141cc:	sub	r0, r6, #8
   141d0:	bl	13858 <__assert_fail@plt+0x1a54>
   141d4:	b	141e0 <__assert_fail@plt+0x23dc>
   141d8:	add	r7, r7, #1
   141dc:	str	r7, [r6, #-8]
   141e0:	ldr	r7, [r6, #-8]
   141e4:	ldrsb	r3, [r7]
   141e8:	cmp	r3, #32
   141ec:	beq	141d8 <__assert_fail@plt+0x23d4>
   141f0:	str	r7, [r4, #48]	; 0x30
   141f4:	mov	r0, r7
   141f8:	bl	11bb8 <strlen@plt>
   141fc:	mov	r1, #0
   14200:	sub	r0, r0, #1
   14204:	add	r7, r7, r0
   14208:	str	r7, [r6, #-8]
   1420c:	b	1421c <__assert_fail@plt+0x2418>
   14210:	sub	r2, r3, #1
   14214:	str	r2, [r6, #-8]
   14218:	strb	r1, [r3]
   1421c:	ldr	r3, [r6, #-8]
   14220:	ldrsb	r2, [r3]
   14224:	cmp	r2, #32
   14228:	cmpne	r2, #10
   1422c:	beq	14210 <__assert_fail@plt+0x240c>
   14230:	ldr	r8, [pc, #532]	; 1444c <__assert_fail@plt+0x2648>
   14234:	b	1424c <__assert_fail@plt+0x2448>
   14238:	bl	11bb8 <strlen@plt>
   1423c:	add	r1, r7, #1
   14240:	mov	r2, r0
   14244:	mov	r0, r7
   14248:	bl	11960 <memmove@plt>
   1424c:	mov	r1, r8
   14250:	ldr	r0, [r4, #48]	; 0x30
   14254:	bl	118c4 <strstr@plt>
   14258:	cmp	r0, #0
   1425c:	mov	r7, r0
   14260:	str	r0, [r6, #-8]
   14264:	bne	14238 <__assert_fail@plt+0x2434>
   14268:	mov	r0, r9
   1426c:	bl	11cc0 <fclose@plt>
   14270:	b	13ea8 <__assert_fail@plt+0x20a4>
   14274:	bl	11a2c <__stack_chk_fail@plt>
   14278:	mov	r1, r9
   1427c:	ldr	r2, [pc, #460]	; 14450 <__assert_fail@plt+0x264c>
   14280:	ldr	r0, [r4, #8]
   14284:	bl	1a920 <__assert_fail@plt+0x8b1c>
   14288:	subs	r1, r0, #0
   1428c:	beq	14300 <__assert_fail@plt+0x24fc>
   14290:	ldr	r6, [r4, #16]
   14294:	cmp	r6, #0
   14298:	beq	142d4 <__assert_fail@plt+0x24d0>
   1429c:	ldr	r1, [pc, #432]	; 14454 <__assert_fail@plt+0x2650>
   142a0:	mov	r0, r6
   142a4:	bl	118f4 <strcmp@plt>
   142a8:	cmp	r0, #0
   142ac:	beq	142c4 <__assert_fail@plt+0x24c0>
   142b0:	mov	r0, r6
   142b4:	ldr	r1, [pc, #412]	; 14458 <__assert_fail@plt+0x2654>
   142b8:	bl	118f4 <strcmp@plt>
   142bc:	cmp	r0, #0
   142c0:	bne	142d4 <__assert_fail@plt+0x24d0>
   142c4:	mov	r2, #5
   142c8:	mov	r3, #2
   142cc:	strd	r2, [r4, #52]	; 0x34
   142d0:	b	13ea8 <__assert_fail@plt+0x20a4>
   142d4:	ldr	r0, [r4, #32]
   142d8:	cmp	r0, #0
   142dc:	beq	14324 <__assert_fail@plt+0x2520>
   142e0:	ldr	r1, [pc, #372]	; 1445c <__assert_fail@plt+0x2658>
   142e4:	bl	118c4 <strstr@plt>
   142e8:	cmp	r0, #0
   142ec:	beq	14324 <__assert_fail@plt+0x2520>
   142f0:	mov	r2, #7
   142f4:	mov	r3, #1
   142f8:	strd	r2, [r4, #52]	; 0x34
   142fc:	b	13ea8 <__assert_fail@plt+0x20a4>
   14300:	ldr	r2, [pc, #344]	; 14460 <__assert_fail@plt+0x265c>
   14304:	ldr	r0, [r4, #8]
   14308:	bl	1a920 <__assert_fail@plt+0x8b1c>
   1430c:	cmp	r0, #0
   14310:	beq	14290 <__assert_fail@plt+0x248c>
   14314:	mov	r2, #10
   14318:	mov	r3, #3
   1431c:	strd	r2, [r4, #52]	; 0x34
   14320:	b	13ea8 <__assert_fail@plt+0x20a4>
   14324:	ldr	r2, [pc, #312]	; 14464 <__assert_fail@plt+0x2660>
   14328:	ldr	r1, [pc, #188]	; 143ec <__assert_fail@plt+0x25e8>
   1432c:	ldr	r0, [r4, #8]
   14330:	bl	1ae14 <__assert_fail@plt+0x9010>
   14334:	subs	r9, r0, #0
   14338:	beq	13ea8 <__assert_fail@plt+0x20a4>
   1433c:	add	r6, sp, #8
   14340:	mov	r7, r6
   14344:	mov	r3, #0
   14348:	str	r3, [r7, #-8]!
   1434c:	add	r8, sp, #4
   14350:	ldr	sl, [pc, #272]	; 14468 <__assert_fail@plt+0x2664>
   14354:	b	14370 <__assert_fail@plt+0x256c>
   14358:	mov	r2, r7
   1435c:	mov	r1, sl
   14360:	mov	r0, r8
   14364:	bl	13b2c <__assert_fail@plt+0x1d28>
   14368:	cmp	r0, #0
   1436c:	bne	14388 <__assert_fail@plt+0x2584>
   14370:	mov	r2, r9
   14374:	mov	r1, #8192	; 0x2000
   14378:	mov	r0, r8
   1437c:	bl	11978 <fgets@plt>
   14380:	cmp	r0, #0
   14384:	bne	14358 <__assert_fail@plt+0x2554>
   14388:	mov	r0, r9
   1438c:	bl	11cc0 <fclose@plt>
   14390:	ldr	r7, [r6, #-8]
   14394:	cmp	r7, #0
   14398:	beq	13ea8 <__assert_fail@plt+0x20a4>
   1439c:	bl	11b7c <__ctype_b_loc@plt>
   143a0:	ldr	r1, [r0]
   143a4:	b	143b0 <__assert_fail@plt+0x25ac>
   143a8:	add	r3, r3, #1
   143ac:	str	r3, [r6, #-8]
   143b0:	ldr	r3, [r6, #-8]
   143b4:	ldrsb	r2, [r3]
   143b8:	lsl	r0, r2, #1
   143bc:	ldrh	r0, [r1, r0]
   143c0:	tst	r0, #2048	; 0x800
   143c4:	bne	143a8 <__assert_fail@plt+0x25a4>
   143c8:	cmp	r2, #0
   143cc:	moveq	r2, #6
   143d0:	moveq	r3, #3
   143d4:	mov	r0, r7
   143d8:	strdeq	r2, [r4, #52]	; 0x34
   143dc:	bl	1196c <free@plt>
   143e0:	b	13ea8 <__assert_fail@plt+0x20a4>
   143e4:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   143e8:	andeq	sp, r1, r4, lsr #3
   143ec:	andeq	lr, r1, r0, asr r1
   143f0:			; <UNDEFINED> instruction: 0x0001d1bc
   143f4:	strdeq	sp, [r1], -r0
   143f8:	andeq	sp, r1, r8, asr #3
   143fc:	andeq	sp, r1, ip, ror #3
   14400:	strdeq	sp, [r1], -r8
   14404:	andeq	sp, r1, r8, lsl #5
   14408:	andeq	sp, r1, ip, lsl #5
   1440c:	andeq	sp, r1, r8, ror #4
   14410:	andeq	sp, r1, r0, lsr #5
   14414:	andeq	r5, r0, r3, asr r8
   14418:	andeq	sp, r1, r4, lsl #4
   1441c:	andeq	sp, r1, r4, lsr #4
   14420:	andeq	sp, r1, r8, ror r2
   14424:	andeq	sp, r1, r0, asr #4
   14428:	andeq	sp, r1, r0, ror r2
   1442c:	andeq	r1, r0, sp, lsr #11
   14430:	andeq	fp, r0, pc, ror #29
   14434:	andeq	r8, r0, lr, ror #1
   14438:	andeq	sp, r1, ip, lsr #5
   1443c:			; <UNDEFINED> instruction: 0x0001d2bc
   14440:	ldrdeq	sp, [r1], -r0
   14444:			; <UNDEFINED> instruction: 0x0001d2b4
   14448:	ldrdeq	sp, [r1], -r4
   1444c:	ldrdeq	sp, [r1], -r4
   14450:	ldrdeq	sp, [r1], -r8
   14454:	andeq	sp, r1, r0, ror #5
   14458:	strdeq	sp, [r1], -r0
   1445c:	strdeq	sp, [r1], -ip
   14460:	ldrdeq	sp, [r1], -ip
   14464:	andeq	sp, r1, r0, lsl #6
   14468:	andeq	sp, r1, ip, lsl #6
   1446c:	ldr	ip, [pc, #1504]	; 14a54 <__assert_fail@plt+0x2c50>
   14470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14474:	sub	sp, sp, #20
   14478:	ldr	r4, [ip]
   1447c:	ldr	lr, [r0, #144]	; 0x90
   14480:	add	r4, r4, #31
   14484:	str	r3, [sp, #12]
   14488:	ldr	r3, [sp, #56]	; 0x38
   1448c:	lsr	r4, r4, #5
   14490:	mov	r8, r0
   14494:	mov	r0, #0
   14498:	ldr	r5, [lr, r1, lsl #2]
   1449c:	lsl	r4, r4, #2
   144a0:	strb	r0, [r3]
   144a4:	cmp	r2, #12
   144a8:	ldrls	pc, [pc, r2, lsl #2]
   144ac:	b	14558 <__assert_fail@plt+0x2754>
   144b0:	muleq	r1, ip, r5
   144b4:	andeq	r4, r1, ip, ror r6
   144b8:	andeq	r4, r1, r4, asr #11
   144bc:	andeq	r4, r1, r4, lsr #12
   144c0:	ldrdeq	r4, [r1], -ip
   144c4:	andeq	r4, r1, ip, lsr r7
   144c8:	muleq	r1, ip, r7
   144cc:	andeq	r4, r1, ip, asr #16
   144d0:	muleq	r1, r0, r8
   144d4:			; <UNDEFINED> instruction: 0x000148b0
   144d8:	andeq	r4, r1, r4, ror #9
   144dc:	strdeq	r4, [r1], -r0
   144e0:	andeq	r4, r1, r4, ror #10
   144e4:	ldr	r2, [r8, #120]	; 0x78
   144e8:	cmp	r2, #0
   144ec:	beq	14558 <__assert_fail@plt+0x2754>
   144f0:	ldr	r3, [ip]
   144f4:	ldr	r1, [sp, #12]
   144f8:	add	r3, r3, #31
   144fc:	ldr	r1, [r1]
   14500:	lsr	r3, r3, #5
   14504:	cmp	r1, #1
   14508:	lsl	r3, r3, #2
   1450c:	lsr	r1, r5, #3
   14510:	beq	149d8 <__assert_fail@plt+0x2bd4>
   14514:	cmp	r1, r3
   14518:	bcs	14534 <__assert_fail@plt+0x2730>
   1451c:	lsr	r3, r5, #5
   14520:	and	r5, r5, #31
   14524:	ldr	r3, [r2, r3, lsl #2]
   14528:	lsr	r5, r3, r5
   1452c:	tst	r5, #1
   14530:	bne	14a40 <__assert_fail@plt+0x2c3c>
   14534:	mov	r2, #5
   14538:	ldr	r1, [pc, #1304]	; 14a58 <__assert_fail@plt+0x2c54>
   1453c:	mov	r0, #0
   14540:	bl	11a14 <dcgettext@plt>
   14544:	mov	r3, r0
   14548:	ldr	r2, [pc, #1292]	; 14a5c <__assert_fail@plt+0x2c58>
   1454c:	mov	r1, #8192	; 0x2000
   14550:	ldr	r0, [sp, #56]	; 0x38
   14554:	bl	11c00 <snprintf@plt>
   14558:	ldr	r0, [sp, #56]	; 0x38
   1455c:	add	sp, sp, #20
   14560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14564:	ldr	r3, [r8, #76]	; 0x4c
   14568:	cmp	r3, #0
   1456c:	beq	14558 <__assert_fail@plt+0x2754>
   14570:	ldr	r1, [r3, r1, lsl #2]
   14574:	cmp	r1, #0
   14578:	beq	14558 <__assert_fail@plt+0x2754>
   1457c:	ldr	r2, [pc, #1244]	; 14a60 <__assert_fail@plt+0x2c5c>
   14580:	ldr	r0, [sp, #56]	; 0x38
   14584:	bl	11c54 <strncpy@plt>
   14588:	ldr	r3, [sp, #56]	; 0x38
   1458c:	mov	r2, #0
   14590:	add	r3, r3, #4096	; 0x1000
   14594:	strb	r2, [r3, #4095]	; 0xfff
   14598:	b	14558 <__assert_fail@plt+0x2754>
   1459c:	ldr	r3, [pc, #1216]	; 14a64 <__assert_fail@plt+0x2c60>
   145a0:	stm	sp, {r3, r5}
   145a4:	mvn	r3, #0
   145a8:	mov	r2, #1
   145ac:	mov	r1, #8192	; 0x2000
   145b0:	ldr	r0, [sp, #56]	; 0x38
   145b4:	bl	11de0 <__snprintf_chk@plt>
   145b8:	ldr	r0, [sp, #56]	; 0x38
   145bc:	add	sp, sp, #20
   145c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c4:	ldr	r3, [sp, #12]
   145c8:	ldrb	r3, [r3, #8]
   145cc:	ands	r3, r3, #32
   145d0:	bne	14984 <__assert_fail@plt+0x2b80>
   145d4:	ldr	r2, [r8, #184]	; 0xb8
   145d8:	ldr	lr, [r8, #188]	; 0xbc
   145dc:	cmp	r2, #0
   145e0:	beq	14558 <__assert_fail@plt+0x2754>
   145e4:	and	r1, r5, #31
   145e8:	mov	ip, #1
   145ec:	lsr	r0, r5, #5
   145f0:	lsl	ip, ip, r1
   145f4:	lsl	r0, r0, #2
   145f8:	lsr	r5, r5, #3
   145fc:	cmp	r4, r5
   14600:	bls	14614 <__assert_fail@plt+0x2810>
   14604:	ldr	r1, [lr, r3, lsl #2]
   14608:	ldr	r1, [r1, r0]
   1460c:	tst	ip, r1
   14610:	bne	14998 <__assert_fail@plt+0x2b94>
   14614:	add	r3, r3, #1
   14618:	cmp	r2, r3
   1461c:	bne	145fc <__assert_fail@plt+0x27f8>
   14620:	b	14558 <__assert_fail@plt+0x2754>
   14624:	ldr	r2, [r8, #148]	; 0x94
   14628:	ldr	lr, [r8, #156]	; 0x9c
   1462c:	cmp	r2, #0
   14630:	beq	14558 <__assert_fail@plt+0x2754>
   14634:	and	r3, r5, #31
   14638:	lsr	r0, r5, #5
   1463c:	mov	ip, #1
   14640:	lsl	r0, r0, #2
   14644:	lsl	ip, ip, r3
   14648:	lsr	r5, r5, #3
   1464c:	mov	r3, #0
   14650:	cmp	r4, r5
   14654:	bls	1466c <__assert_fail@plt+0x2868>
   14658:	ldr	r1, [lr, r3, lsl #2]
   1465c:	lsl	r6, r3, #2
   14660:	ldr	r1, [r1, r0]
   14664:	tst	ip, r1
   14668:	bne	149ac <__assert_fail@plt+0x2ba8>
   1466c:	add	r3, r3, #1
   14670:	cmp	r2, r3
   14674:	bne	14650 <__assert_fail@plt+0x284c>
   14678:	b	14558 <__assert_fail@plt+0x2754>
   1467c:	ldr	r3, [sp, #12]
   14680:	ldrb	r3, [r3, #8]
   14684:	ands	r3, r3, #32
   14688:	bne	14970 <__assert_fail@plt+0x2b6c>
   1468c:	ldr	r2, [r8, #196]	; 0xc4
   14690:	ldr	lr, [r8, #200]	; 0xc8
   14694:	cmp	r2, #0
   14698:	beq	14558 <__assert_fail@plt+0x2754>
   1469c:	and	r1, r5, #31
   146a0:	mov	ip, #1
   146a4:	lsr	r0, r5, #5
   146a8:	lsl	ip, ip, r1
   146ac:	lsl	r0, r0, #2
   146b0:	lsr	r5, r5, #3
   146b4:	cmp	r4, r5
   146b8:	bls	146cc <__assert_fail@plt+0x28c8>
   146bc:	ldr	r1, [lr, r3, lsl #2]
   146c0:	ldr	r1, [r1, r0]
   146c4:	tst	ip, r1
   146c8:	bne	14998 <__assert_fail@plt+0x2b94>
   146cc:	add	r3, r3, #1
   146d0:	cmp	r2, r3
   146d4:	bne	146b4 <__assert_fail@plt+0x28b0>
   146d8:	b	14558 <__assert_fail@plt+0x2754>
   146dc:	ldr	r3, [sp, #12]
   146e0:	ldrb	r3, [r3, #8]
   146e4:	ands	r3, r3, #32
   146e8:	bne	14950 <__assert_fail@plt+0x2b4c>
   146ec:	ldr	r2, [r8, #172]	; 0xac
   146f0:	ldr	lr, [r8, #176]	; 0xb0
   146f4:	cmp	r2, #0
   146f8:	beq	14558 <__assert_fail@plt+0x2754>
   146fc:	and	r1, r5, #31
   14700:	mov	ip, #1
   14704:	lsr	r0, r5, #5
   14708:	lsl	ip, ip, r1
   1470c:	lsl	r0, r0, #2
   14710:	lsr	r5, r5, #3
   14714:	cmp	r4, r5
   14718:	bls	1472c <__assert_fail@plt+0x2928>
   1471c:	ldr	r1, [lr, r3, lsl #2]
   14720:	ldr	r1, [r1, r0]
   14724:	tst	ip, r1
   14728:	bne	14998 <__assert_fail@plt+0x2b94>
   1472c:	add	r3, r3, #1
   14730:	cmp	r2, r3
   14734:	bne	14714 <__assert_fail@plt+0x2910>
   14738:	b	14558 <__assert_fail@plt+0x2754>
   1473c:	ldr	r3, [sp, #12]
   14740:	ldrb	r3, [r3, #8]
   14744:	ands	r3, r3, #32
   14748:	bne	14934 <__assert_fail@plt+0x2b30>
   1474c:	ldr	r2, [r8, #160]	; 0xa0
   14750:	ldr	lr, [r8, #164]	; 0xa4
   14754:	cmp	r2, #0
   14758:	beq	14558 <__assert_fail@plt+0x2754>
   1475c:	and	r1, r5, #31
   14760:	mov	ip, #1
   14764:	lsr	r0, r5, #5
   14768:	lsl	ip, ip, r1
   1476c:	lsl	r0, r0, #2
   14770:	lsr	r5, r5, #3
   14774:	cmp	r4, r5
   14778:	bls	1478c <__assert_fail@plt+0x2988>
   1477c:	ldr	r1, [lr, r3, lsl #2]
   14780:	ldr	r1, [r1, r0]
   14784:	tst	ip, r1
   14788:	bne	14998 <__assert_fail@plt+0x2b94>
   1478c:	add	r3, r3, #1
   14790:	cmp	r2, r3
   14794:	bne	14774 <__assert_fail@plt+0x2970>
   14798:	b	14558 <__assert_fail@plt+0x2754>
   1479c:	ldr	r9, [r8, #128]	; 0x80
   147a0:	subs	r9, r9, #1
   147a4:	bmi	14558 <__assert_fail@plt+0x2754>
   147a8:	and	r3, r5, #31
   147ac:	mov	r7, #1
   147b0:	lsr	r6, r5, #5
   147b4:	lsl	r7, r7, r3
   147b8:	ldr	fp, [sp, #56]	; 0x38
   147bc:	lsl	r6, r6, #2
   147c0:	lsr	r5, r5, #3
   147c4:	mov	sl, #8192	; 0x2000
   147c8:	ldr	r3, [r8, #132]	; 0x84
   147cc:	add	r3, r3, r9, lsl #4
   147d0:	ldr	r2, [r3, #8]
   147d4:	ldr	r0, [r3, #12]
   147d8:	cmp	r2, #0
   147dc:	beq	14808 <__assert_fail@plt+0x2a04>
   147e0:	mov	r3, #0
   147e4:	cmp	r4, r5
   147e8:	bls	147fc <__assert_fail@plt+0x29f8>
   147ec:	ldr	r1, [r0, r3, lsl #2]
   147f0:	ldr	r1, [r1, r6]
   147f4:	tst	r7, r1
   147f8:	bne	14900 <__assert_fail@plt+0x2afc>
   147fc:	add	r3, r3, #1
   14800:	cmp	r2, r3
   14804:	bne	147e4 <__assert_fail@plt+0x29e0>
   14808:	cmp	r9, #0
   1480c:	beq	14558 <__assert_fail@plt+0x2754>
   14810:	cmp	sl, #1
   14814:	bls	149a0 <__assert_fail@plt+0x2b9c>
   14818:	ldr	r3, [sp, #12]
   1481c:	sub	sl, sl, #1
   14820:	sub	r9, r9, #1
   14824:	ldrb	r2, [r3, #8]
   14828:	mov	r3, fp
   1482c:	tst	r2, #2
   14830:	movne	r1, #44	; 0x2c
   14834:	moveq	r1, #58	; 0x3a
   14838:	mov	r2, #0
   1483c:	strb	r1, [r3], #1
   14840:	strb	r2, [fp, #1]
   14844:	mov	fp, r3
   14848:	b	147c8 <__assert_fail@plt+0x29c4>
   1484c:	ldr	r3, [r8, #208]	; 0xd0
   14850:	cmp	r3, #0
   14854:	beq	14558 <__assert_fail@plt+0x2754>
   14858:	ldr	r3, [r3, r1, lsl #2]
   1485c:	ldr	r2, [sp, #12]
   14860:	ldr	r1, [pc, #512]	; 14a68 <__assert_fail@plt+0x2c64>
   14864:	add	r1, r1, r3, lsl #3
   14868:	ldr	ip, [r2]
   1486c:	ldr	r0, [r1, #160]	; 0xa0
   14870:	cmp	ip, #1
   14874:	ldr	r3, [r1, #156]	; 0x9c
   14878:	ldr	r2, [pc, #476]	; 14a5c <__assert_fail@plt+0x2c58>
   1487c:	movne	r3, r0
   14880:	mov	r1, #8192	; 0x2000
   14884:	ldr	r0, [sp, #56]	; 0x38
   14888:	bl	11c00 <snprintf@plt>
   1488c:	b	14558 <__assert_fail@plt+0x2754>
   14890:	ldr	r3, [r8, #212]	; 0xd4
   14894:	cmp	r3, #0
   14898:	beq	14558 <__assert_fail@plt+0x2754>
   1489c:	ldr	r2, [r3, r1, lsl #2]
   148a0:	ldr	r3, [pc, #444]	; 14a64 <__assert_fail@plt+0x2c60>
   148a4:	str	r2, [sp, #4]
   148a8:	str	r3, [sp]
   148ac:	b	145a4 <__assert_fail@plt+0x27a0>
   148b0:	ldr	r3, [r8, #216]	; 0xd8
   148b4:	cmp	r3, #0
   148b8:	beq	14558 <__assert_fail@plt+0x2754>
   148bc:	ldr	r2, [sp, #12]
   148c0:	ldr	r0, [r3, r1, lsl #2]
   148c4:	ldr	r2, [r2]
   148c8:	cmp	r2, #1
   148cc:	mov	r2, #5
   148d0:	beq	14a18 <__assert_fail@plt+0x2c14>
   148d4:	cmp	r0, #0
   148d8:	beq	14a0c <__assert_fail@plt+0x2c08>
   148dc:	ldr	r1, [pc, #392]	; 14a6c <__assert_fail@plt+0x2c68>
   148e0:	mov	r0, #0
   148e4:	bl	11a14 <dcgettext@plt>
   148e8:	mov	r3, r0
   148ec:	b	14548 <__assert_fail@plt+0x2744>
   148f0:	ldr	r3, [r8, #72]	; 0x48
   148f4:	cmp	r3, #0
   148f8:	bne	14570 <__assert_fail@plt+0x276c>
   148fc:	b	14558 <__assert_fail@plt+0x2754>
   14900:	str	r3, [sp, #4]
   14904:	ldr	r3, [pc, #356]	; 14a70 <__assert_fail@plt+0x2c6c>
   14908:	mov	r2, #1
   1490c:	str	r3, [sp]
   14910:	mov	r1, sl
   14914:	mvn	r3, #0
   14918:	mov	r0, fp
   1491c:	bl	11de0 <__snprintf_chk@plt>
   14920:	cmp	sl, r0
   14924:	bls	149a0 <__assert_fail@plt+0x2b9c>
   14928:	add	fp, fp, r0
   1492c:	sub	sl, sl, r0
   14930:	b	14808 <__assert_fail@plt+0x2a04>
   14934:	ldr	r3, [r8, #168]	; 0xa8
   14938:	ldr	r3, [r3, r1, lsl #2]
   1493c:	cmn	r3, #1
   14940:	beq	14960 <__assert_fail@plt+0x2b5c>
   14944:	ldr	r2, [pc, #280]	; 14a64 <__assert_fail@plt+0x2c60>
   14948:	strd	r2, [sp]
   1494c:	b	145a4 <__assert_fail@plt+0x27a0>
   14950:	ldr	r3, [r8, #180]	; 0xb4
   14954:	ldr	r3, [r3, r1, lsl #2]
   14958:	cmn	r3, #1
   1495c:	bne	14944 <__assert_fail@plt+0x2b40>
   14960:	ldr	r2, [sp, #56]	; 0x38
   14964:	mov	r3, #45	; 0x2d
   14968:	strh	r3, [r2]
   1496c:	b	14558 <__assert_fail@plt+0x2754>
   14970:	ldr	r3, [r8, #204]	; 0xcc
   14974:	ldr	r3, [r3, r1, lsl #2]
   14978:	cmn	r3, #1
   1497c:	bne	14944 <__assert_fail@plt+0x2b40>
   14980:	b	14960 <__assert_fail@plt+0x2b5c>
   14984:	ldr	r3, [r8, #192]	; 0xc0
   14988:	ldr	r3, [r3, r1, lsl #2]
   1498c:	cmn	r3, #1
   14990:	bne	14944 <__assert_fail@plt+0x2b40>
   14994:	b	14960 <__assert_fail@plt+0x2b5c>
   14998:	ldr	r2, [pc, #208]	; 14a70 <__assert_fail@plt+0x2c6c>
   1499c:	b	14948 <__assert_fail@plt+0x2b44>
   149a0:	mov	r3, #0
   149a4:	str	r3, [sp, #56]	; 0x38
   149a8:	b	14558 <__assert_fail@plt+0x2754>
   149ac:	ldr	r2, [r8, #152]	; 0x98
   149b0:	ldr	r1, [pc, #172]	; 14a64 <__assert_fail@plt+0x2c60>
   149b4:	mvn	r3, #0
   149b8:	ldr	r0, [r2, r6]
   149bc:	str	r1, [sp]
   149c0:	str	r0, [sp, #4]
   149c4:	mov	r2, #1
   149c8:	mov	r1, #8192	; 0x2000
   149cc:	ldr	r0, [sp, #56]	; 0x38
   149d0:	bl	11de0 <__snprintf_chk@plt>
   149d4:	b	14558 <__assert_fail@plt+0x2754>
   149d8:	cmp	r1, r3
   149dc:	bcs	149f8 <__assert_fail@plt+0x2bf4>
   149e0:	lsr	r3, r5, #5
   149e4:	and	r5, r5, #31
   149e8:	ldr	r3, [r2, r3, lsl #2]
   149ec:	lsr	r3, r3, r5
   149f0:	tst	r3, #1
   149f4:	bne	14a2c <__assert_fail@plt+0x2c28>
   149f8:	mov	r2, #5
   149fc:	ldr	r1, [pc, #112]	; 14a74 <__assert_fail@plt+0x2c70>
   14a00:	mov	r0, #0
   14a04:	bl	11a14 <dcgettext@plt>
   14a08:	b	14544 <__assert_fail@plt+0x2740>
   14a0c:	ldr	r1, [pc, #68]	; 14a58 <__assert_fail@plt+0x2c54>
   14a10:	bl	11a14 <dcgettext@plt>
   14a14:	b	14544 <__assert_fail@plt+0x2740>
   14a18:	cmp	r0, #0
   14a1c:	bne	14a30 <__assert_fail@plt+0x2c2c>
   14a20:	ldr	r1, [pc, #76]	; 14a74 <__assert_fail@plt+0x2c70>
   14a24:	bl	11a14 <dcgettext@plt>
   14a28:	b	14544 <__assert_fail@plt+0x2740>
   14a2c:	mov	r2, #5
   14a30:	ldr	r1, [pc, #64]	; 14a78 <__assert_fail@plt+0x2c74>
   14a34:	mov	r0, #0
   14a38:	bl	11a14 <dcgettext@plt>
   14a3c:	b	14544 <__assert_fail@plt+0x2740>
   14a40:	mov	r2, #5
   14a44:	ldr	r1, [pc, #32]	; 14a6c <__assert_fail@plt+0x2c68>
   14a48:	mov	r0, #0
   14a4c:	bl	11a14 <dcgettext@plt>
   14a50:	b	14544 <__assert_fail@plt+0x2740>
   14a54:	andeq	r0, r3, r0, lsr r0
   14a58:	andeq	sp, r1, r4, lsr #6
   14a5c:	ldrdeq	sp, [r1], -r4
   14a60:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   14a64:	muleq	r1, ip, r8
   14a68:	andeq	ip, r1, r4, lsl lr
   14a6c:	andeq	sp, r1, r0, lsr #6
   14a70:	andeq	sp, r1, r4, lsl r3
   14a74:	andeq	sp, r1, ip, lsl r3
   14a78:	andeq	sp, r1, r8, lsl r3
   14a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a80:	vpush	{d8}
   14a84:	ldr	r3, [pc, #1240]	; 14f64 <__assert_fail@plt+0x3160>
   14a88:	ldr	fp, [pc, #1108]	; 14ee4 <__assert_fail@plt+0x30e0>
   14a8c:	mov	r4, r0
   14a90:	sub	sp, sp, #8192	; 0x2000
   14a94:	sub	sp, sp, #60	; 0x3c
   14a98:	add	r2, sp, #8192	; 0x2000
   14a9c:	ldr	r3, [r3]
   14aa0:	add	r2, r2, #52	; 0x34
   14aa4:	mov	r0, #0
   14aa8:	mov	r8, r1
   14aac:	str	r3, [r2]
   14ab0:	ldr	r9, [fp]
   14ab4:	bl	11dec <scols_init_debug@plt>
   14ab8:	bl	11abc <scols_new_table@plt>
   14abc:	subs	r6, r0, #0
   14ac0:	beq	159dc <__assert_fail@plt+0x3bd8>
   14ac4:	mov	r1, #1
   14ac8:	bl	11930 <scols_table_enable_noheadings@plt>
   14acc:	ldrb	r3, [r8, #8]
   14ad0:	tst	r3, #16
   14ad4:	bne	15810 <__assert_fail@plt+0x3a0c>
   14ad8:	mov	r2, #0
   14adc:	vldr	d0, [pc, #1012]	; 14ed8 <__assert_fail@plt+0x30d4>
   14ae0:	ldr	r1, [pc, #1024]	; 14ee8 <__assert_fail@plt+0x30e4>
   14ae4:	mov	r0, r6
   14ae8:	bl	11948 <scols_table_new_column@plt>
   14aec:	cmp	r0, #0
   14af0:	beq	159a4 <__assert_fail@plt+0x3ba0>
   14af4:	mov	r2, #16
   14af8:	vldr	d0, [pc, #984]	; 14ed8 <__assert_fail@plt+0x30d4>
   14afc:	ldr	r1, [pc, #1000]	; 14eec <__assert_fail@plt+0x30e8>
   14b00:	mov	r0, r6
   14b04:	bl	11948 <scols_table_new_column@plt>
   14b08:	cmp	r0, #0
   14b0c:	beq	159a4 <__assert_fail@plt+0x3ba0>
   14b10:	mov	r2, #5
   14b14:	ldr	r1, [pc, #980]	; 14ef0 <__assert_fail@plt+0x30ec>
   14b18:	mov	r0, #0
   14b1c:	bl	11a14 <dcgettext@plt>
   14b20:	ldr	r3, [r4, #12]
   14b24:	ldr	r2, [pc, #1100]	; 14f78 <__assert_fail@plt+0x3174>
   14b28:	mov	r1, r0
   14b2c:	mov	r0, r6
   14b30:	bl	1399c <__assert_fail@plt+0x1b98>
   14b34:	ldr	r3, [r4, #104]	; 0x68
   14b38:	cmp	r3, #0
   14b3c:	bne	15384 <__assert_fail@plt+0x3580>
   14b40:	mov	r2, #5
   14b44:	ldr	r1, [pc, #936]	; 14ef4 <__assert_fail@plt+0x30f0>
   14b48:	mov	r0, #0
   14b4c:	bl	11a14 <dcgettext@plt>
   14b50:	ldr	r3, [pc, #928]	; 14ef8 <__assert_fail@plt+0x30f4>
   14b54:	ldr	r2, [pc, #1052]	; 14f78 <__assert_fail@plt+0x3174>
   14b58:	mov	r1, r0
   14b5c:	mov	r0, r6
   14b60:	bl	1399c <__assert_fail@plt+0x1b98>
   14b64:	ldr	r3, [r4, #96]	; 0x60
   14b68:	cmp	r3, #0
   14b6c:	beq	14b94 <__assert_fail@plt+0x2d90>
   14b70:	mov	r2, #5
   14b74:	ldr	r1, [pc, #896]	; 14efc <__assert_fail@plt+0x30f8>
   14b78:	mov	r0, #0
   14b7c:	bl	11a14 <dcgettext@plt>
   14b80:	ldr	r3, [r4, #96]	; 0x60
   14b84:	ldr	r2, [pc, #1004]	; 14f78 <__assert_fail@plt+0x3174>
   14b88:	mov	r1, r0
   14b8c:	mov	r0, r6
   14b90:	bl	1399c <__assert_fail@plt+0x1b98>
   14b94:	mov	r2, #5
   14b98:	ldr	r1, [pc, #864]	; 14f00 <__assert_fail@plt+0x30fc>
   14b9c:	mov	r0, #0
   14ba0:	bl	11a14 <dcgettext@plt>
   14ba4:	ldr	r3, [r4, #112]	; 0x70
   14ba8:	ldr	r2, [pc, #852]	; 14f04 <__assert_fail@plt+0x3100>
   14bac:	mov	r1, r0
   14bb0:	mov	r0, r6
   14bb4:	bl	1399c <__assert_fail@plt+0x1b98>
   14bb8:	ldr	r3, [r4, #120]	; 0x78
   14bbc:	cmp	r3, #0
   14bc0:	beq	14c24 <__assert_fail@plt+0x2e20>
   14bc4:	ldrb	r0, [r8, #8]
   14bc8:	mov	r2, #5
   14bcc:	ands	r0, r0, #1
   14bd0:	movne	r0, #0
   14bd4:	ldrne	r1, [pc, #812]	; 14f08 <__assert_fail@plt+0x3104>
   14bd8:	ldreq	r1, [pc, #812]	; 14f0c <__assert_fail@plt+0x3108>
   14bdc:	bl	11a14 <dcgettext@plt>
   14be0:	ldrb	r3, [r8, #8]
   14be4:	ldr	r2, [r4, #120]	; 0x78
   14be8:	and	r3, r3, #1
   14bec:	mov	r1, r0
   14bf0:	mov	r0, r6
   14bf4:	bl	13a90 <__assert_fail@plt+0x1c8c>
   14bf8:	ldr	r1, [r4, #120]	; 0x78
   14bfc:	cmp	r1, #0
   14c00:	beq	14c24 <__assert_fail@plt+0x2e20>
   14c04:	add	r9, r9, #31
   14c08:	lsr	r9, r9, #5
   14c0c:	lsl	r5, r9, #2
   14c10:	mov	r0, r5
   14c14:	bl	119f0 <__sched_cpucount@plt>
   14c18:	ldr	r3, [r4, #112]	; 0x70
   14c1c:	cmp	r0, r3
   14c20:	bne	153e4 <__assert_fail@plt+0x35e0>
   14c24:	ldr	r3, [r4, #184]	; 0xb8
   14c28:	cmp	r3, #0
   14c2c:	bne	155b4 <__assert_fail@plt+0x37b0>
   14c30:	ldr	r3, [r4, #148]	; 0x94
   14c34:	cmp	r3, #0
   14c38:	bne	15518 <__assert_fail@plt+0x3714>
   14c3c:	ldr	r3, [r4, #16]
   14c40:	cmp	r3, #0
   14c44:	beq	14c6c <__assert_fail@plt+0x2e68>
   14c48:	mov	r2, #5
   14c4c:	ldr	r1, [pc, #700]	; 14f10 <__assert_fail@plt+0x310c>
   14c50:	mov	r0, #0
   14c54:	bl	11a14 <dcgettext@plt>
   14c58:	ldr	r3, [r4, #16]
   14c5c:	ldr	r2, [pc, #788]	; 14f78 <__assert_fail@plt+0x3174>
   14c60:	mov	r1, r0
   14c64:	mov	r0, r6
   14c68:	bl	1399c <__assert_fail@plt+0x1b98>
   14c6c:	ldr	r3, [r4, #20]
   14c70:	cmp	r3, #0
   14c74:	beq	14c9c <__assert_fail@plt+0x2e98>
   14c78:	mov	r2, #5
   14c7c:	ldr	r1, [pc, #656]	; 14f14 <__assert_fail@plt+0x3110>
   14c80:	mov	r0, #0
   14c84:	bl	11a14 <dcgettext@plt>
   14c88:	ldr	r3, [r4, #20]
   14c8c:	ldr	r2, [pc, #740]	; 14f78 <__assert_fail@plt+0x3174>
   14c90:	mov	r1, r0
   14c94:	mov	r0, r6
   14c98:	bl	1399c <__assert_fail@plt+0x1b98>
   14c9c:	ldr	r3, [r4, #24]
   14ca0:	cmp	r3, #0
   14ca4:	beq	14ccc <__assert_fail@plt+0x2ec8>
   14ca8:	mov	r2, #5
   14cac:	ldr	r1, [pc, #612]	; 14f18 <__assert_fail@plt+0x3114>
   14cb0:	mov	r0, #0
   14cb4:	bl	11a14 <dcgettext@plt>
   14cb8:	ldr	r3, [r4, #24]
   14cbc:	ldr	r2, [pc, #692]	; 14f78 <__assert_fail@plt+0x3174>
   14cc0:	mov	r1, r0
   14cc4:	mov	r0, r6
   14cc8:	bl	1399c <__assert_fail@plt+0x1b98>
   14ccc:	ldr	r3, [r4, #28]
   14cd0:	cmp	r3, #0
   14cd4:	beq	15508 <__assert_fail@plt+0x3704>
   14cd8:	mov	r2, #5
   14cdc:	ldr	r1, [pc, #568]	; 14f1c <__assert_fail@plt+0x3118>
   14ce0:	mov	r0, #0
   14ce4:	bl	11a14 <dcgettext@plt>
   14ce8:	ldr	r3, [r4, #36]	; 0x24
   14cec:	ldr	r2, [pc, #644]	; 14f78 <__assert_fail@plt+0x3174>
   14cf0:	cmp	r3, #0
   14cf4:	ldreq	r3, [r4, #28]
   14cf8:	mov	r1, r0
   14cfc:	mov	r0, r6
   14d00:	bl	1399c <__assert_fail@plt+0x1b98>
   14d04:	ldr	r3, [r4, #32]
   14d08:	cmp	r3, #0
   14d0c:	beq	154f8 <__assert_fail@plt+0x36f4>
   14d10:	mov	r2, #5
   14d14:	ldr	r1, [pc, #516]	; 14f20 <__assert_fail@plt+0x311c>
   14d18:	mov	r0, #0
   14d1c:	bl	11a14 <dcgettext@plt>
   14d20:	ldr	r3, [r4, #40]	; 0x28
   14d24:	ldr	r2, [pc, #588]	; 14f78 <__assert_fail@plt+0x3174>
   14d28:	cmp	r3, #0
   14d2c:	ldreq	r3, [r4, #32]
   14d30:	mov	r1, r0
   14d34:	mov	r0, r6
   14d38:	bl	1399c <__assert_fail@plt+0x1b98>
   14d3c:	ldr	r3, [r4, #80]	; 0x50
   14d40:	cmp	r3, #0
   14d44:	beq	14d6c <__assert_fail@plt+0x2f68>
   14d48:	mov	r2, #5
   14d4c:	ldr	r1, [pc, #464]	; 14f24 <__assert_fail@plt+0x3120>
   14d50:	mov	r0, #0
   14d54:	bl	11a14 <dcgettext@plt>
   14d58:	ldr	r3, [r4, #80]	; 0x50
   14d5c:	ldr	r2, [pc, #532]	; 14f78 <__assert_fail@plt+0x3174>
   14d60:	mov	r1, r0
   14d64:	mov	r0, r6
   14d68:	bl	1399c <__assert_fail@plt+0x1b98>
   14d6c:	ldr	r3, [r4, #60]	; 0x3c
   14d70:	cmp	r3, #0
   14d74:	beq	14d9c <__assert_fail@plt+0x2f98>
   14d78:	mov	r2, #5
   14d7c:	ldr	r1, [pc, #420]	; 14f28 <__assert_fail@plt+0x3124>
   14d80:	mov	r0, #0
   14d84:	bl	11a14 <dcgettext@plt>
   14d88:	ldr	r3, [r4, #60]	; 0x3c
   14d8c:	ldr	r2, [pc, #484]	; 14f78 <__assert_fail@plt+0x3174>
   14d90:	mov	r1, r0
   14d94:	mov	r0, r6
   14d98:	bl	1399c <__assert_fail@plt+0x1b98>
   14d9c:	ldr	r3, [r4, #64]	; 0x40
   14da0:	cmp	r3, #0
   14da4:	beq	14dcc <__assert_fail@plt+0x2fc8>
   14da8:	mov	r2, #5
   14dac:	ldr	r1, [pc, #376]	; 14f2c <__assert_fail@plt+0x3128>
   14db0:	mov	r0, #0
   14db4:	bl	11a14 <dcgettext@plt>
   14db8:	ldr	r3, [r4, #64]	; 0x40
   14dbc:	ldr	r2, [pc, #436]	; 14f78 <__assert_fail@plt+0x3174>
   14dc0:	mov	r1, r0
   14dc4:	mov	r0, r6
   14dc8:	bl	1399c <__assert_fail@plt+0x1b98>
   14dcc:	ldr	r3, [r4, #68]	; 0x44
   14dd0:	cmp	r3, #0
   14dd4:	beq	14dfc <__assert_fail@plt+0x2ff8>
   14dd8:	mov	r2, #5
   14ddc:	ldr	r1, [pc, #332]	; 14f30 <__assert_fail@plt+0x312c>
   14de0:	mov	r0, #0
   14de4:	bl	11a14 <dcgettext@plt>
   14de8:	ldr	r3, [r4, #68]	; 0x44
   14dec:	ldr	r2, [pc, #388]	; 14f78 <__assert_fail@plt+0x3174>
   14df0:	mov	r1, r0
   14df4:	mov	r0, r6
   14df8:	bl	1399c <__assert_fail@plt+0x1b98>
   14dfc:	ldr	r3, [r4, #72]	; 0x48
   14e00:	cmp	r3, #0
   14e04:	beq	14fa0 <__assert_fail@plt+0x319c>
   14e08:	mov	r2, #5
   14e0c:	ldr	r1, [pc, #288]	; 14f34 <__assert_fail@plt+0x3130>
   14e10:	mov	r0, #0
   14e14:	bl	11a14 <dcgettext@plt>
   14e18:	ldr	r3, [r4, #116]	; 0x74
   14e1c:	cmp	r3, #0
   14e20:	mov	r7, r0
   14e24:	beq	154e8 <__assert_fail@plt+0x36e4>
   14e28:	ldr	r2, [r4, #108]	; 0x6c
   14e2c:	cmp	r2, #0
   14e30:	ble	154e8 <__assert_fail@plt+0x36e4>
   14e34:	ldr	r9, [fp]
   14e38:	vldr	s16, [pc, #160]	; 14ee0 <__assert_fail@plt+0x30dc>
   14e3c:	add	r9, r9, #31
   14e40:	mov	r5, #0
   14e44:	lsr	r9, r9, #5
   14e48:	lsl	r9, r9, #2
   14e4c:	ldr	r3, [r4, #144]	; 0x90
   14e50:	lsl	r0, r5, #2
   14e54:	ldr	r3, [r3, r5, lsl #2]
   14e58:	cmp	r9, r3, lsr #3
   14e5c:	bls	14ea8 <__assert_fail@plt+0x30a4>
   14e60:	ldr	r1, [r4, #116]	; 0x74
   14e64:	lsr	ip, r3, #5
   14e68:	and	r3, r3, #31
   14e6c:	ldr	r1, [r1, ip, lsl #2]
   14e70:	lsr	r3, r1, r3
   14e74:	tst	r3, #1
   14e78:	beq	14ea8 <__assert_fail@plt+0x30a4>
   14e7c:	ldr	r3, [r4, #72]	; 0x48
   14e80:	ldr	r0, [r3, r0]
   14e84:	cmp	r0, #0
   14e88:	beq	14ea8 <__assert_fail@plt+0x30a4>
   14e8c:	mov	r1, #0
   14e90:	bl	11c84 <strtod@plt>
   14e94:	ldr	r2, [r4, #108]	; 0x6c
   14e98:	vcvt.f32.f64	s0, d0
   14e9c:	vcmpe.f32	s0, s16
   14ea0:	vmrs	APSR_nzcv, fpscr
   14ea4:	vmovgt.f32	s16, s0
   14ea8:	add	r5, r5, #1
   14eac:	cmp	r5, r2
   14eb0:	blt	14e4c <__assert_fail@plt+0x3048>
   14eb4:	vcvt.f64.f32	d8, s16
   14eb8:	ldr	r2, [pc, #124]	; 14f3c <__assert_fail@plt+0x3138>
   14ebc:	mov	r3, #8192	; 0x2000
   14ec0:	add	r5, sp, #52	; 0x34
   14ec4:	mov	r1, r3
   14ec8:	str	r2, [sp]
   14ecc:	mov	r0, r5
   14ed0:	b	14f80 <__assert_fail@plt+0x317c>
   14ed4:	nop			; (mov r0, r0)
	...
   14ee4:	andeq	r0, r3, r0, lsr r0
   14ee8:	andeq	sp, r1, r0, asr r3
   14eec:	andeq	sp, r1, ip, ror r3
   14ef0:	andeq	sp, r1, r4, lsl #7
   14ef4:			; <UNDEFINED> instruction: 0x0001d3bc
   14ef8:	andeq	sp, r1, r8, asr #7
   14efc:	ldrdeq	sp, [r1], -r8
   14f00:	andeq	sp, r1, r0, asr #12
   14f04:	muleq	r1, ip, r8
   14f08:	andeq	sp, r1, r8, ror #7
   14f0c:	andeq	sp, r1, r0, lsl #8
   14f10:	andeq	sp, r1, r8, lsl #10
   14f14:	andeq	sp, r1, r4, lsl r5
   14f18:	andeq	sp, r1, r4, lsr #10
   14f1c:	andeq	sp, r1, r0, lsr r5
   14f20:	andeq	sp, r1, r8, lsr r5
   14f24:	andeq	sp, r1, r4, asr #10
   14f28:	andeq	sp, r1, r0, asr r5
   14f2c:	andeq	sp, r1, ip, asr r5
   14f30:	andeq	sp, r1, r0, ror r5
   14f34:	andeq	sp, r1, r0, lsl #11
   14f38:	muleq	r1, r8, r5
   14f3c:	muleq	r1, r0, r5
   14f40:	andeq	sp, r1, r8, lsr #11
   14f44:			; <UNDEFINED> instruction: 0x0001d5b4
   14f48:	ldrdeq	sp, [r1], -r0
   14f4c:	ldrdeq	sp, [r1], -ip
   14f50:	andeq	sp, r1, r4, lsl r6
   14f54:	andeq	ip, r1, r4, lsl lr
   14f58:	andeq	sp, r1, r8, lsr #12
   14f5c:	andeq	sp, r1, r4, lsr r6
   14f60:	andeq	sp, r1, r4, lsl #13
   14f64:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   14f68:	muleq	r1, r4, r3
   14f6c:	andeq	sp, r1, ip, lsr #7
   14f70:			; <UNDEFINED> instruction: 0x0001d5b8
   14f74:	andeq	sp, r1, r8, asr #11
   14f78:	ldrdeq	sp, [r1], -r4
   14f7c:	svclt	0x00800000
   14f80:	mov	r2, #1
   14f84:	vstr	d8, [sp, #8]
   14f88:	bl	11de0 <__snprintf_chk@plt>
   14f8c:	mov	r3, r5
   14f90:	mov	r1, r7
   14f94:	ldr	r2, [pc, #-36]	; 14f78 <__assert_fail@plt+0x3174>
   14f98:	mov	r0, r6
   14f9c:	bl	1399c <__assert_fail@plt+0x1b98>
   14fa0:	ldr	r3, [r4, #76]	; 0x4c
   14fa4:	cmp	r3, #0
   14fa8:	beq	150a8 <__assert_fail@plt+0x32a4>
   14fac:	mov	r2, #5
   14fb0:	ldr	r1, [pc, #-128]	; 14f38 <__assert_fail@plt+0x3134>
   14fb4:	mov	r0, #0
   14fb8:	bl	11a14 <dcgettext@plt>
   14fbc:	ldr	r3, [r4, #116]	; 0x74
   14fc0:	cmp	r3, #0
   14fc4:	mov	r7, r0
   14fc8:	beq	15068 <__assert_fail@plt+0x3264>
   14fcc:	ldr	r2, [r4, #108]	; 0x6c
   14fd0:	cmp	r2, #0
   14fd4:	ble	15068 <__assert_fail@plt+0x3264>
   14fd8:	ldr	r9, [fp]
   14fdc:	vldr	s16, [pc, #-104]	; 14f7c <__assert_fail@plt+0x3178>
   14fe0:	add	r9, r9, #31
   14fe4:	mov	r5, #0
   14fe8:	lsr	r9, r9, #5
   14fec:	lsl	r9, r9, #2
   14ff0:	ldr	r3, [r4, #144]	; 0x90
   14ff4:	lsl	r0, r5, #2
   14ff8:	ldr	r3, [r3, r5, lsl #2]
   14ffc:	cmp	r9, r3, lsr #3
   15000:	bls	15058 <__assert_fail@plt+0x3254>
   15004:	ldr	r1, [r4, #116]	; 0x74
   15008:	lsr	ip, r3, #5
   1500c:	and	r3, r3, #31
   15010:	ldr	r1, [r1, ip, lsl #2]
   15014:	lsr	r3, r1, r3
   15018:	tst	r3, #1
   1501c:	beq	15058 <__assert_fail@plt+0x3254>
   15020:	ldr	r3, [r4, #76]	; 0x4c
   15024:	ldr	r0, [r3, r0]
   15028:	cmp	r0, #0
   1502c:	beq	15058 <__assert_fail@plt+0x3254>
   15030:	mov	r1, #0
   15034:	bl	11c84 <strtod@plt>
   15038:	vcmpe.f32	s16, #0.0
   1503c:	vmrs	APSR_nzcv, fpscr
   15040:	vcvt.f32.f64	s0, d0
   15044:	bmi	154f0 <__assert_fail@plt+0x36ec>
   15048:	vcmpe.f32	s0, s16
   1504c:	vmrs	APSR_nzcv, fpscr
   15050:	bmi	154f0 <__assert_fail@plt+0x36ec>
   15054:	ldr	r2, [r4, #108]	; 0x6c
   15058:	add	r5, r5, #1
   1505c:	cmp	r5, r2
   15060:	blt	14ff0 <__assert_fail@plt+0x31ec>
   15064:	b	1506c <__assert_fail@plt+0x3268>
   15068:	vldr	s16, [pc, #-244]	; 14f7c <__assert_fail@plt+0x3178>
   1506c:	vcvt.f64.f32	d8, s16
   15070:	ldr	r2, [pc, #-316]	; 14f3c <__assert_fail@plt+0x3138>
   15074:	mov	r3, #8192	; 0x2000
   15078:	add	r5, sp, #52	; 0x34
   1507c:	mov	r1, r3
   15080:	str	r2, [sp]
   15084:	mov	r0, r5
   15088:	mov	r2, #1
   1508c:	vstr	d8, [sp, #8]
   15090:	bl	11de0 <__snprintf_chk@plt>
   15094:	mov	r3, r5
   15098:	mov	r1, r7
   1509c:	ldr	r2, [pc, #-300]	; 14f78 <__assert_fail@plt+0x3174>
   150a0:	mov	r0, r6
   150a4:	bl	1399c <__assert_fail@plt+0x1b98>
   150a8:	ldr	r3, [r4, #84]	; 0x54
   150ac:	cmp	r3, #0
   150b0:	beq	150d8 <__assert_fail@plt+0x32d4>
   150b4:	mov	r2, #5
   150b8:	ldr	r1, [pc, #-384]	; 14f40 <__assert_fail@plt+0x313c>
   150bc:	mov	r0, #0
   150c0:	bl	11a14 <dcgettext@plt>
   150c4:	ldr	r3, [r4, #84]	; 0x54
   150c8:	ldr	r2, [pc, #-344]	; 14f78 <__assert_fail@plt+0x3174>
   150cc:	mov	r1, r0
   150d0:	mov	r0, r6
   150d4:	bl	1399c <__assert_fail@plt+0x1b98>
   150d8:	ldr	r5, [r4, #44]	; 0x2c
   150dc:	cmp	r5, #0
   150e0:	beq	1510c <__assert_fail@plt+0x3308>
   150e4:	ldr	r1, [pc, #-424]	; 14f44 <__assert_fail@plt+0x3140>
   150e8:	mov	r0, r5
   150ec:	bl	118f4 <strcmp@plt>
   150f0:	cmp	r0, #0
   150f4:	beq	154c4 <__assert_fail@plt+0x36c0>
   150f8:	mov	r0, r5
   150fc:	ldr	r1, [pc, #-444]	; 14f48 <__assert_fail@plt+0x3144>
   15100:	bl	118f4 <strcmp@plt>
   15104:	cmp	r0, #0
   15108:	beq	15868 <__assert_fail@plt+0x3a64>
   1510c:	ldr	r3, [r4, #48]	; 0x30
   15110:	cmp	r3, #0
   15114:	beq	1513c <__assert_fail@plt+0x3338>
   15118:	mov	r2, #5
   1511c:	ldr	r1, [pc, #-472]	; 14f4c <__assert_fail@plt+0x3148>
   15120:	mov	r0, #0
   15124:	bl	11a14 <dcgettext@plt>
   15128:	ldr	r3, [r4, #48]	; 0x30
   1512c:	ldr	r2, [pc, #-444]	; 14f78 <__assert_fail@plt+0x3174>
   15130:	mov	r1, r0
   15134:	mov	r0, r6
   15138:	bl	1399c <__assert_fail@plt+0x1b98>
   1513c:	ldr	r3, [r4, #52]	; 0x34
   15140:	cmp	r3, #0
   15144:	bne	15540 <__assert_fail@plt+0x373c>
   15148:	ldr	r3, [r4, #100]	; 0x64
   1514c:	cmp	r3, #0
   15150:	blt	15198 <__assert_fail@plt+0x3394>
   15154:	mov	r2, #5
   15158:	ldr	r1, [pc, #-528]	; 14f50 <__assert_fail@plt+0x314c>
   1515c:	mov	r0, #0
   15160:	bl	11a14 <dcgettext@plt>
   15164:	ldr	r1, [r4, #100]	; 0x64
   15168:	ldr	r3, [pc, #-540]	; 14f54 <__assert_fail@plt+0x3150>
   1516c:	mov	r2, #5
   15170:	add	r3, r3, r1, lsl #2
   15174:	ldr	r1, [r3, #276]	; 0x114
   15178:	mov	r5, r0
   1517c:	mov	r0, #0
   15180:	bl	11a14 <dcgettext@plt>
   15184:	mov	r1, r5
   15188:	ldr	r2, [pc, #-536]	; 14f78 <__assert_fail@plt+0x3174>
   1518c:	mov	r3, r0
   15190:	mov	r0, r6
   15194:	bl	1399c <__assert_fail@plt+0x1b98>
   15198:	ldr	r7, [r4, #128]	; 0x80
   1519c:	cmp	r7, #0
   151a0:	beq	15218 <__assert_fail@plt+0x3414>
   151a4:	subs	r7, r7, #1
   151a8:	bmi	15218 <__assert_fail@plt+0x3414>
   151ac:	ldr	fp, [pc, #-604]	; 14f58 <__assert_fail@plt+0x3154>
   151b0:	ldr	sl, [pc, #-576]	; 14f78 <__assert_fail@plt+0x3174>
   151b4:	add	r5, sp, #52	; 0x34
   151b8:	mov	r2, #5
   151bc:	mov	r1, fp
   151c0:	mov	r0, #0
   151c4:	bl	11a14 <dcgettext@plt>
   151c8:	ldr	r2, [r4, #132]	; 0x84
   151cc:	mov	r3, #8192	; 0x2000
   151d0:	mov	r1, r3
   151d4:	ldr	ip, [r2, r7, lsl #4]
   151d8:	mov	r2, #1
   151dc:	str	ip, [sp, #4]
   151e0:	lsl	r9, r7, #4
   151e4:	sub	r7, r7, #1
   151e8:	str	r0, [sp]
   151ec:	mov	r0, r5
   151f0:	bl	11de0 <__snprintf_chk@plt>
   151f4:	ldr	r3, [r4, #132]	; 0x84
   151f8:	mov	r2, sl
   151fc:	add	r3, r3, r9
   15200:	mov	r1, r5
   15204:	ldr	r3, [r3, #4]
   15208:	mov	r0, r6
   1520c:	bl	1399c <__assert_fail@plt+0x1b98>
   15210:	cmn	r7, #1
   15214:	bne	151b8 <__assert_fail@plt+0x33b4>
   15218:	ldr	r7, [r4, #136]	; 0x88
   1521c:	cmp	r7, #0
   15220:	beq	15298 <__assert_fail@plt+0x3494>
   15224:	subs	r7, r7, #1
   15228:	bmi	15298 <__assert_fail@plt+0x3494>
   1522c:	ldr	fp, [pc, #-732]	; 14f58 <__assert_fail@plt+0x3154>
   15230:	ldr	sl, [pc, #-704]	; 14f78 <__assert_fail@plt+0x3174>
   15234:	add	r5, sp, #52	; 0x34
   15238:	mov	r2, #5
   1523c:	mov	r1, fp
   15240:	mov	r0, #0
   15244:	bl	11a14 <dcgettext@plt>
   15248:	ldr	r2, [r4, #140]	; 0x8c
   1524c:	mov	r3, #8192	; 0x2000
   15250:	mov	r1, r3
   15254:	ldr	ip, [r2, r7, lsl #4]
   15258:	mov	r2, #1
   1525c:	str	ip, [sp, #4]
   15260:	lsl	r9, r7, #4
   15264:	sub	r7, r7, #1
   15268:	str	r0, [sp]
   1526c:	mov	r0, r5
   15270:	bl	11de0 <__snprintf_chk@plt>
   15274:	ldr	r3, [r4, #140]	; 0x8c
   15278:	mov	r2, sl
   1527c:	add	r3, r3, r9
   15280:	mov	r1, r5
   15284:	ldr	r3, [r3, #4]
   15288:	mov	r0, r6
   1528c:	bl	1399c <__assert_fail@plt+0x1b98>
   15290:	cmn	r7, #1
   15294:	bne	15238 <__assert_fail@plt+0x3434>
   15298:	ldr	r3, [r4, #148]	; 0x94
   1529c:	cmp	r3, #0
   152a0:	ble	1530c <__assert_fail@plt+0x3508>
   152a4:	ldr	r9, [pc, #-848]	; 14f5c <__assert_fail@plt+0x3158>
   152a8:	mov	r7, #0
   152ac:	add	r5, sp, #52	; 0x34
   152b0:	mov	r2, #5
   152b4:	mov	r1, r9
   152b8:	mov	r0, #0
   152bc:	bl	11a14 <dcgettext@plt>
   152c0:	ldr	r2, [r4, #152]	; 0x98
   152c4:	mov	r3, #8192	; 0x2000
   152c8:	mov	r1, r3
   152cc:	ldr	ip, [r2, r7, lsl #2]
   152d0:	mov	r2, #1
   152d4:	stm	sp, {r0, ip}
   152d8:	mov	r0, r5
   152dc:	bl	11de0 <__snprintf_chk@plt>
   152e0:	ldrb	r3, [r8, #8]
   152e4:	ldr	r2, [r4, #156]	; 0x9c
   152e8:	mov	r1, r5
   152ec:	and	r3, r3, #1
   152f0:	ldr	r2, [r2, r7, lsl #2]
   152f4:	mov	r0, r6
   152f8:	bl	13a90 <__assert_fail@plt+0x1c8c>
   152fc:	ldr	r3, [r4, #148]	; 0x94
   15300:	add	r7, r7, #1
   15304:	cmp	r3, r7
   15308:	bgt	152b0 <__assert_fail@plt+0x34ac>
   1530c:	ldr	r3, [r4, #220]	; 0xdc
   15310:	cmp	r3, #0
   15314:	bne	157a0 <__assert_fail@plt+0x399c>
   15318:	ldr	r3, [r4, #88]	; 0x58
   1531c:	cmp	r3, #0
   15320:	beq	15348 <__assert_fail@plt+0x3544>
   15324:	mov	r2, #5
   15328:	ldr	r1, [pc, #-976]	; 14f60 <__assert_fail@plt+0x315c>
   1532c:	mov	r0, #0
   15330:	bl	11a14 <dcgettext@plt>
   15334:	ldr	r3, [r4, #88]	; 0x58
   15338:	ldr	r2, [pc, #-968]	; 14f78 <__assert_fail@plt+0x3174>
   1533c:	mov	r1, r0
   15340:	mov	r0, r6
   15344:	bl	1399c <__assert_fail@plt+0x1b98>
   15348:	mov	r0, r6
   1534c:	bl	11d08 <scols_print_table@plt>
   15350:	mov	r0, r6
   15354:	bl	11b34 <scols_unref_table@plt>
   15358:	add	r3, sp, #8192	; 0x2000
   1535c:	add	r3, r3, #52	; 0x34
   15360:	ldr	r2, [r3]
   15364:	ldr	r3, [pc, #-1032]	; 14f64 <__assert_fail@plt+0x3160>
   15368:	ldr	r3, [r3]
   1536c:	cmp	r2, r3
   15370:	bne	159d8 <__assert_fail@plt+0x3bd4>
   15374:	add	sp, sp, #8192	; 0x2000
   15378:	add	sp, sp, #60	; 0x3c
   1537c:	vpop	{d8}
   15380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15384:	tst	r3, #2
   15388:	addne	r5, sp, #52	; 0x34
   1538c:	ldrne	r2, [pc, #-1068]	; 14f68 <__assert_fail@plt+0x3164>
   15390:	movne	ip, r5
   15394:	addeq	r5, sp, #52	; 0x34
   15398:	ldmne	r2, {r0, r1, r2}
   1539c:	addne	r7, sp, #60	; 0x3c
   153a0:	moveq	r7, r5
   153a4:	stmiane	ip!, {r0, r1}
   153a8:	strbne	r2, [ip]
   153ac:	tst	r3, #4
   153b0:	bne	15958 <__assert_fail@plt+0x3b54>
   153b4:	mov	r3, #0
   153b8:	strb	r3, [r7, #-2]
   153bc:	mov	r0, r3
   153c0:	mov	r2, #5
   153c4:	ldr	r1, [pc, #-1120]	; 14f6c <__assert_fail@plt+0x3168>
   153c8:	bl	11a14 <dcgettext@plt>
   153cc:	mov	r3, r5
   153d0:	ldr	r2, [pc, #-1120]	; 14f78 <__assert_fail@plt+0x3174>
   153d4:	mov	r1, r0
   153d8:	mov	r0, r6
   153dc:	bl	1399c <__assert_fail@plt+0x1b98>
   153e0:	b	14b40 <__assert_fail@plt+0x2d3c>
   153e4:	mov	r2, #0
   153e8:	mov	r1, r2
   153ec:	ldr	r0, [fp]
   153f0:	bl	19540 <__assert_fail@plt+0x773c>
   153f4:	subs	sl, r0, #0
   153f8:	beq	159c0 <__assert_fail@plt+0x3bbc>
   153fc:	mov	r2, r5
   15400:	mov	r1, #0
   15404:	bl	11c48 <memset@plt>
   15408:	ldr	ip, [r4, #108]	; 0x6c
   1540c:	cmp	ip, #0
   15410:	ble	1582c <__assert_fail@plt+0x3a28>
   15414:	ldr	r0, [fp]
   15418:	ldr	r2, [r4, #144]	; 0x90
   1541c:	add	r0, r0, #31
   15420:	sub	r2, r2, #4
   15424:	lsr	r0, r0, #5
   15428:	ldr	lr, [r4, #120]	; 0x78
   1542c:	lsl	r0, r0, #2
   15430:	add	ip, r2, ip, lsl #2
   15434:	b	15494 <__assert_fail@plt+0x3690>
   15438:	lsr	r1, r3, #3
   1543c:	cmp	r1, r0
   15440:	bcs	1548c <__assert_fail@plt+0x3688>
   15444:	lsr	r7, r3, #5
   15448:	and	r3, r3, #31
   1544c:	ldr	r9, [lr, r7, lsl #2]
   15450:	lsr	r9, r9, r3
   15454:	tst	r9, #1
   15458:	bne	1548c <__assert_fail@plt+0x3688>
   1545c:	ldr	r9, [r4, #116]	; 0x74
   15460:	cmp	r9, #0
   15464:	beq	1548c <__assert_fail@plt+0x3688>
   15468:	ldr	r9, [r9, r7, lsl #2]
   1546c:	cmp	r1, r5
   15470:	movcs	r1, #0
   15474:	movcc	r1, #1
   15478:	ands	r1, r1, r9, lsr r3
   1547c:	movne	r9, #1
   15480:	ldrne	r1, [sl, r7, lsl #2]
   15484:	orrne	r3, r1, r9, lsl r3
   15488:	strne	r3, [sl, r7, lsl #2]
   1548c:	cmp	ip, r2
   15490:	beq	1582c <__assert_fail@plt+0x3a28>
   15494:	cmp	lr, #0
   15498:	ldr	r3, [r2, #4]!
   1549c:	bne	15438 <__assert_fail@plt+0x3634>
   154a0:	ldr	r9, [r4, #116]	; 0x74
   154a4:	cmp	r9, #0
   154a8:	beq	1548c <__assert_fail@plt+0x3688>
   154ac:	lsr	r1, r3, #3
   154b0:	cmp	r0, r1
   154b4:	bls	1548c <__assert_fail@plt+0x3688>
   154b8:	lsr	r7, r3, #5
   154bc:	and	r3, r3, #31
   154c0:	b	15468 <__assert_fail@plt+0x3664>
   154c4:	mov	r2, #5
   154c8:	ldr	r1, [pc, #-1376]	; 14f70 <__assert_fail@plt+0x316c>
   154cc:	bl	11a14 <dcgettext@plt>
   154d0:	ldr	r3, [pc, #-1380]	; 14f74 <__assert_fail@plt+0x3170>
   154d4:	ldr	r2, [pc, #-1380]	; 14f78 <__assert_fail@plt+0x3174>
   154d8:	mov	r1, r0
   154dc:	mov	r0, r6
   154e0:	bl	1399c <__assert_fail@plt+0x1b98>
   154e4:	b	1510c <__assert_fail@plt+0x3308>
   154e8:	vldr	s16, [pc, #984]	; 158c8 <__assert_fail@plt+0x3ac4>
   154ec:	b	14eb4 <__assert_fail@plt+0x30b0>
   154f0:	vmov.f32	s16, s0
   154f4:	b	15054 <__assert_fail@plt+0x3250>
   154f8:	ldr	r3, [r4, #40]	; 0x28
   154fc:	cmp	r3, #0
   15500:	bne	14d10 <__assert_fail@plt+0x2f0c>
   15504:	b	14d3c <__assert_fail@plt+0x2f38>
   15508:	ldr	r3, [r4, #36]	; 0x24
   1550c:	cmp	r3, #0
   15510:	bne	14cd8 <__assert_fail@plt+0x2ed4>
   15514:	b	14d04 <__assert_fail@plt+0x2f00>
   15518:	mov	r2, #5
   1551c:	ldr	r1, [pc, #936]	; 158cc <__assert_fail@plt+0x3ac8>
   15520:	mov	r0, #0
   15524:	bl	11a14 <dcgettext@plt>
   15528:	ldr	r3, [r4, #148]	; 0x94
   1552c:	ldr	r2, [pc, #924]	; 158d0 <__assert_fail@plt+0x3acc>
   15530:	mov	r1, r0
   15534:	mov	r0, r6
   15538:	bl	1399c <__assert_fail@plt+0x1b98>
   1553c:	b	14c3c <__assert_fail@plt+0x2e38>
   15540:	mov	r2, #5
   15544:	ldr	r1, [pc, #904]	; 158d4 <__assert_fail@plt+0x3ad0>
   15548:	mov	r0, #0
   1554c:	bl	11a14 <dcgettext@plt>
   15550:	ldr	r3, [r4, #52]	; 0x34
   15554:	ldr	r5, [pc, #892]	; 158d8 <__assert_fail@plt+0x3ad4>
   15558:	ldr	r2, [pc, #892]	; 158dc <__assert_fail@plt+0x3ad8>
   1555c:	add	r3, r5, r3, lsl #2
   15560:	ldr	r3, [r3, #196]	; 0xc4
   15564:	mov	r1, r0
   15568:	mov	r0, r6
   1556c:	bl	1399c <__assert_fail@plt+0x1b98>
   15570:	mov	r2, #5
   15574:	ldr	r1, [pc, #868]	; 158e0 <__assert_fail@plt+0x3adc>
   15578:	mov	r0, #0
   1557c:	bl	11a14 <dcgettext@plt>
   15580:	ldr	r3, [r4, #56]	; 0x38
   15584:	mov	r2, #5
   15588:	add	r5, r5, r3, lsl #2
   1558c:	ldr	r1, [r5, #260]	; 0x104
   15590:	mov	r7, r0
   15594:	mov	r0, #0
   15598:	bl	11a14 <dcgettext@plt>
   1559c:	mov	r1, r7
   155a0:	ldr	r2, [pc, #820]	; 158dc <__assert_fail@plt+0x3ad8>
   155a4:	mov	r3, r0
   155a8:	mov	r0, r6
   155ac:	bl	1399c <__assert_fail@plt+0x1b98>
   155b0:	b	15148 <__assert_fail@plt+0x3344>
   155b4:	add	r7, sp, #56	; 0x38
   155b8:	mov	r3, #0
   155bc:	ldr	r2, [pc, #800]	; 158e4 <__assert_fail@plt+0x3ae0>
   155c0:	ldr	r1, [pc, #800]	; 158e8 <__assert_fail@plt+0x3ae4>
   155c4:	ldr	r0, [r4, #8]
   155c8:	str	r3, [r7, #-24]	; 0xffffffe8
   155cc:	str	r3, [r7, #-28]	; 0xffffffe4
   155d0:	str	r3, [r7, #-16]
   155d4:	str	r3, [r7, #-20]	; 0xffffffec
   155d8:	bl	1ae14 <__assert_fail@plt+0x9010>
   155dc:	subs	r9, r0, #0
   155e0:	beq	1565c <__assert_fail@plt+0x3858>
   155e4:	sub	r3, r7, #8
   155e8:	str	r6, [sp, #20]
   155ec:	add	r5, sp, #52	; 0x34
   155f0:	ldr	sl, [pc, #756]	; 158ec <__assert_fail@plt+0x3ae8>
   155f4:	mov	r6, r3
   155f8:	b	15638 <__assert_fail@plt+0x3834>
   155fc:	sub	r0, r7, #28
   15600:	sub	r1, r7, #24
   15604:	sub	r2, r7, #20
   15608:	sub	r3, r7, #16
   1560c:	str	r0, [sp, #12]
   15610:	str	r1, [sp, #8]
   15614:	str	r2, [sp, #4]
   15618:	str	r3, [sp]
   1561c:	sub	r2, r7, #12
   15620:	mov	r3, r6
   15624:	mov	r1, sl
   15628:	mov	r0, r5
   1562c:	bl	11d20 <sscanf@plt>
   15630:	cmp	r0, #6
   15634:	beq	15650 <__assert_fail@plt+0x384c>
   15638:	mov	r2, r9
   1563c:	mov	r1, #8192	; 0x2000
   15640:	mov	r0, r5
   15644:	bl	11978 <fgets@plt>
   15648:	cmp	r0, #0
   1564c:	bne	155fc <__assert_fail@plt+0x37f8>
   15650:	mov	r0, r9
   15654:	ldr	r6, [sp, #20]
   15658:	bl	11cc0 <fclose@plt>
   1565c:	ldr	r0, [r4, #92]	; 0x5c
   15660:	cmp	r0, #0
   15664:	beq	1588c <__assert_fail@plt+0x3a88>
   15668:	mov	r2, #10
   1566c:	mov	r1, #0
   15670:	bl	1190c <strtol@plt>
   15674:	mov	r2, #5
   15678:	ldr	r1, [pc, #624]	; 158f0 <__assert_fail@plt+0x3aec>
   1567c:	add	r5, r0, #1
   15680:	mov	r0, #0
   15684:	bl	11a14 <dcgettext@plt>
   15688:	cmp	r5, #0
   1568c:	mov	r9, r0
   15690:	beq	1589c <__assert_fail@plt+0x3a98>
   15694:	mov	r3, r5
   15698:	mov	r1, r9
   1569c:	ldr	r2, [pc, #556]	; 158d0 <__assert_fail@plt+0x3acc>
   156a0:	mov	r0, r6
   156a4:	bl	1399c <__assert_fail@plt+0x1b98>
   156a8:	mov	r2, #5
   156ac:	ldr	r1, [pc, #576]	; 158f4 <__assert_fail@plt+0x3af0>
   156b0:	mov	r0, #0
   156b4:	bl	11a14 <dcgettext@plt>
   156b8:	ldr	r3, [r7, #-28]	; 0xffffffe4
   156bc:	cmp	r3, #0
   156c0:	mov	r5, r0
   156c4:	bne	156d8 <__assert_fail@plt+0x38d4>
   156c8:	ldr	r1, [r4, #184]	; 0xb8
   156cc:	ldr	r0, [r4, #196]	; 0xc4
   156d0:	bl	1c9d8 <__assert_fail@plt+0xabd4>
   156d4:	mov	r3, r0
   156d8:	ldr	r2, [pc, #496]	; 158d0 <__assert_fail@plt+0x3acc>
   156dc:	mov	r0, r6
   156e0:	mov	r1, r5
   156e4:	bl	1399c <__assert_fail@plt+0x1b98>
   156e8:	ldr	r0, [r4, #172]	; 0xac
   156ec:	mov	r2, #5
   156f0:	cmp	r0, #0
   156f4:	beq	1593c <__assert_fail@plt+0x3b38>
   156f8:	ldr	r1, [pc, #504]	; 158f8 <__assert_fail@plt+0x3af4>
   156fc:	mov	r0, #0
   15700:	bl	11a14 <dcgettext@plt>
   15704:	ldr	r3, [r7, #-24]	; 0xffffffe8
   15708:	cmp	r3, #0
   1570c:	mov	r5, r0
   15710:	bne	15724 <__assert_fail@plt+0x3920>
   15714:	ldr	r1, [r4, #172]	; 0xac
   15718:	ldr	r0, [r4, #184]	; 0xb8
   1571c:	bl	1c9d8 <__assert_fail@plt+0xabd4>
   15720:	mov	r3, r0
   15724:	ldr	r2, [pc, #420]	; 158d0 <__assert_fail@plt+0x3acc>
   15728:	mov	r0, r6
   1572c:	mov	r1, r5
   15730:	bl	1399c <__assert_fail@plt+0x1b98>
   15734:	ldr	r0, [r4, #160]	; 0xa0
   15738:	mov	r2, #5
   1573c:	cmp	r0, #0
   15740:	beq	15974 <__assert_fail@plt+0x3b70>
   15744:	ldr	r1, [pc, #432]	; 158fc <__assert_fail@plt+0x3af8>
   15748:	mov	r0, #0
   1574c:	bl	11a14 <dcgettext@plt>
   15750:	ldr	r3, [r7, #-20]	; 0xffffffec
   15754:	cmp	r3, #0
   15758:	mov	r5, r0
   1575c:	beq	15990 <__assert_fail@plt+0x3b8c>
   15760:	mov	r1, r5
   15764:	ldr	r2, [pc, #356]	; 158d0 <__assert_fail@plt+0x3acc>
   15768:	mov	r0, r6
   1576c:	bl	1399c <__assert_fail@plt+0x1b98>
   15770:	ldr	r1, [pc, #392]	; 15900 <__assert_fail@plt+0x3afc>
   15774:	mov	r2, #5
   15778:	mov	r0, #0
   1577c:	bl	11a14 <dcgettext@plt>
   15780:	ldr	r3, [r7, #-16]
   15784:	cmp	r3, #0
   15788:	ldreq	r3, [r4, #160]	; 0xa0
   1578c:	mov	r1, r0
   15790:	ldr	r2, [pc, #312]	; 158d0 <__assert_fail@plt+0x3acc>
   15794:	mov	r0, r6
   15798:	bl	1399c <__assert_fail@plt+0x1b98>
   1579c:	b	14c30 <__assert_fail@plt+0x2e2c>
   157a0:	mov	r2, #5
   157a4:	ldr	r1, [pc, #344]	; 15904 <__assert_fail@plt+0x3b00>
   157a8:	mov	r0, #0
   157ac:	bl	11a14 <dcgettext@plt>
   157b0:	ldr	r3, [r4, #220]	; 0xdc
   157b4:	ldr	r2, [pc, #276]	; 158d0 <__assert_fail@plt+0x3acc>
   157b8:	mov	r1, r0
   157bc:	mov	r0, r6
   157c0:	bl	1399c <__assert_fail@plt+0x1b98>
   157c4:	mov	r2, #5
   157c8:	ldr	r1, [pc, #312]	; 15908 <__assert_fail@plt+0x3b04>
   157cc:	mov	r0, #0
   157d0:	bl	11a14 <dcgettext@plt>
   157d4:	ldr	r3, [r4, #224]	; 0xe0
   157d8:	ldr	r2, [pc, #240]	; 158d0 <__assert_fail@plt+0x3acc>
   157dc:	mov	r1, r0
   157e0:	mov	r0, r6
   157e4:	bl	1399c <__assert_fail@plt+0x1b98>
   157e8:	mov	r2, #5
   157ec:	ldr	r1, [pc, #280]	; 1590c <__assert_fail@plt+0x3b08>
   157f0:	mov	r0, #0
   157f4:	bl	11a14 <dcgettext@plt>
   157f8:	ldr	r3, [r4, #228]	; 0xe4
   157fc:	ldr	r2, [pc, #204]	; 158d0 <__assert_fail@plt+0x3acc>
   15800:	mov	r1, r0
   15804:	mov	r0, r6
   15808:	bl	1399c <__assert_fail@plt+0x1b98>
   1580c:	b	15318 <__assert_fail@plt+0x3514>
   15810:	mov	r1, #1
   15814:	mov	r0, r6
   15818:	bl	11ca8 <scols_table_enable_json@plt>
   1581c:	ldr	r1, [pc, #236]	; 15910 <__assert_fail@plt+0x3b0c>
   15820:	mov	r0, r6
   15824:	bl	11924 <scols_table_set_name@plt>
   15828:	b	14ad8 <__assert_fail@plt+0x2cd4>
   1582c:	ldrb	r0, [r8, #8]
   15830:	ands	r0, r0, #1
   15834:	bne	158b0 <__assert_fail@plt+0x3aac>
   15838:	ldr	r1, [pc, #212]	; 15914 <__assert_fail@plt+0x3b10>
   1583c:	mov	r2, #5
   15840:	bl	11a14 <dcgettext@plt>
   15844:	mov	r1, r0
   15848:	ldrb	r3, [r8, #8]
   1584c:	mov	r0, r6
   15850:	mov	r2, sl
   15854:	and	r3, r3, #1
   15858:	bl	13a90 <__assert_fail@plt+0x1c8c>
   1585c:	mov	r0, sl
   15860:	bl	19584 <__assert_fail@plt+0x7780>
   15864:	b	14c24 <__assert_fail@plt+0x2e20>
   15868:	mov	r2, #5
   1586c:	ldr	r1, [pc, #164]	; 15918 <__assert_fail@plt+0x3b14>
   15870:	bl	11a14 <dcgettext@plt>
   15874:	ldr	r3, [pc, #160]	; 1591c <__assert_fail@plt+0x3b18>
   15878:	ldr	r2, [pc, #92]	; 158dc <__assert_fail@plt+0x3ad8>
   1587c:	mov	r1, r0
   15880:	mov	r0, r6
   15884:	bl	1399c <__assert_fail@plt+0x1b98>
   15888:	b	1510c <__assert_fail@plt+0x3308>
   1588c:	mov	r2, #5
   15890:	ldr	r1, [pc, #88]	; 158f0 <__assert_fail@plt+0x3aec>
   15894:	bl	11a14 <dcgettext@plt>
   15898:	mov	r9, r0
   1589c:	ldr	r1, [r4, #196]	; 0xc4
   158a0:	ldr	r0, [r4, #124]	; 0x7c
   158a4:	bl	1c9d8 <__assert_fail@plt+0xabd4>
   158a8:	mov	r5, r0
   158ac:	b	15694 <__assert_fail@plt+0x3890>
   158b0:	ldr	r1, [pc, #104]	; 15920 <__assert_fail@plt+0x3b1c>
   158b4:	mov	r2, #5
   158b8:	mov	r0, #0
   158bc:	bl	11a14 <dcgettext@plt>
   158c0:	mov	r1, r0
   158c4:	b	15848 <__assert_fail@plt+0x3a44>
   158c8:	andeq	r0, r0, r0
   158cc:	strdeq	sp, [r1], -r8
   158d0:	muleq	r1, ip, r8
   158d4:	andeq	sp, r1, r8, ror #11
   158d8:	andeq	ip, r1, r4, lsl lr
   158dc:	ldrdeq	sp, [r1], -r4
   158e0:	strdeq	sp, [r1], -ip
   158e4:	andeq	sp, r1, ip, lsr #5
   158e8:	andeq	lr, r1, r0, asr r1
   158ec:	andeq	sp, r1, r4, ror #8
   158f0:	andeq	sp, r1, r4, lsl #9
   158f4:	muleq	r1, r8, r4
   158f8:	andeq	sp, r1, ip, lsr #9
   158fc:	andeq	sp, r1, r0, asr #9
   15900:	ldrdeq	sp, [r1], -r4
   15904:	andeq	sp, r1, r8, asr #12
   15908:	andeq	sp, r1, ip, asr r6
   1590c:	andeq	sp, r1, ip, ror #12
   15910:	andeq	sp, r1, r8, asr #6
   15914:	andeq	sp, r1, ip, asr #8
   15918:			; <UNDEFINED> instruction: 0x0001d5b8
   1591c:	ldrdeq	sp, [r1], -r4
   15920:	andeq	sp, r1, r4, lsr r4
   15924:	andeq	sp, r1, ip, ror #9
   15928:	andeq	sp, r1, r0, lsr #7
   1592c:	andeq	sp, r1, r0, ror #9
   15930:	andeq	sp, r1, r8, asr r3
   15934:	andeq	sp, r1, r8, lsl r4
   15938:	andeq	sp, r1, r8, lsr #6
   1593c:	ldr	r1, [pc, #-32]	; 15924 <__assert_fail@plt+0x3b20>
   15940:	bl	11a14 <dcgettext@plt>
   15944:	ldr	r3, [r7, #-24]	; 0xffffffe8
   15948:	cmp	r3, #0
   1594c:	ldreq	r3, [r4, #184]	; 0xb8
   15950:	mov	r1, r0
   15954:	b	15790 <__assert_fail@plt+0x398c>
   15958:	ldr	r2, [pc, #-56]	; 15928 <__assert_fail@plt+0x3b24>
   1595c:	mov	r3, r7
   15960:	add	r7, r7, #8
   15964:	ldm	r2, {r0, r1, r2}
   15968:	stmia	r3!, {r0, r1}
   1596c:	strb	r2, [r3]
   15970:	b	153b4 <__assert_fail@plt+0x35b0>
   15974:	ldr	r1, [pc, #-80]	; 1592c <__assert_fail@plt+0x3b28>
   15978:	bl	11a14 <dcgettext@plt>
   1597c:	ldr	r3, [r7, #-20]	; 0xffffffec
   15980:	cmp	r3, #0
   15984:	ldreq	r3, [r4, #172]	; 0xac
   15988:	mov	r1, r0
   1598c:	b	15790 <__assert_fail@plt+0x398c>
   15990:	ldr	r1, [r4, #160]	; 0xa0
   15994:	ldr	r0, [r4, #172]	; 0xac
   15998:	bl	1c9d8 <__assert_fail@plt+0xabd4>
   1599c:	mov	r3, r0
   159a0:	b	15760 <__assert_fail@plt+0x395c>
   159a4:	ldr	r1, [pc, #-124]	; 15930 <__assert_fail@plt+0x3b2c>
   159a8:	mov	r2, #5
   159ac:	mov	r0, #0
   159b0:	bl	11a14 <dcgettext@plt>
   159b4:	mov	r1, r0
   159b8:	mov	r0, #1
   159bc:	bl	11a5c <err@plt>
   159c0:	ldr	r1, [pc, #-148]	; 15934 <__assert_fail@plt+0x3b30>
   159c4:	mov	r2, #5
   159c8:	bl	11a14 <dcgettext@plt>
   159cc:	mov	r1, r0
   159d0:	mov	r0, #1
   159d4:	bl	11a5c <err@plt>
   159d8:	bl	11a2c <__stack_chk_fail@plt>
   159dc:	ldr	r1, [pc, #-172]	; 15938 <__assert_fail@plt+0x3b34>
   159e0:	mov	r2, #5
   159e4:	bl	11a14 <dcgettext@plt>
   159e8:	mov	r1, r0
   159ec:	mov	r0, #1
   159f0:	bl	11a5c <err@plt>
   159f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159f8:	sub	sp, sp, #12
   159fc:	mov	fp, r3
   15a00:	ldr	r3, [sp, #48]	; 0x30
   15a04:	mov	r7, #0
   15a08:	cmp	r2, #6
   15a0c:	mov	sl, r2
   15a10:	str	r0, [sp, #4]
   15a14:	strb	r7, [r3]
   15a18:	bne	15abc <__assert_fail@plt+0x3cb8>
   15a1c:	ldr	r3, [sp, #4]
   15a20:	ldr	r3, [r3]
   15a24:	subs	r6, r3, #1
   15a28:	bmi	15ab0 <__assert_fail@plt+0x3cac>
   15a2c:	ldr	r9, [pc, #200]	; 15afc <__assert_fail@plt+0x3cf8>
   15a30:	ldr	r5, [sp, #48]	; 0x30
   15a34:	mov	r8, r1
   15a38:	mov	r4, #8192	; 0x2000
   15a3c:	ldr	r3, [r8]
   15a40:	mov	r1, r4
   15a44:	mov	r2, r9
   15a48:	ldr	r3, [r3, r6, lsl #4]
   15a4c:	mov	r0, r5
   15a50:	bl	11c00 <snprintf@plt>
   15a54:	cmp	r0, r4
   15a58:	movcc	r3, #0
   15a5c:	movcs	r3, #1
   15a60:	orrs	r3, r3, r0, lsr #31
   15a64:	sub	r4, r4, r0
   15a68:	bne	15ae4 <__assert_fail@plt+0x3ce0>
   15a6c:	add	r0, r5, r0
   15a70:	cmp	r6, #0
   15a74:	mov	r5, r0
   15a78:	beq	15aa8 <__assert_fail@plt+0x3ca4>
   15a7c:	cmp	r4, #1
   15a80:	bls	15af0 <__assert_fail@plt+0x3cec>
   15a84:	ldrb	r3, [fp, #8]
   15a88:	sub	r6, r6, #1
   15a8c:	sub	r4, r4, #1
   15a90:	tst	r3, #2
   15a94:	movne	r3, #44	; 0x2c
   15a98:	moveq	r3, #58	; 0x3a
   15a9c:	strb	r3, [r5], #1
   15aa0:	strb	r7, [r0, #1]
   15aa4:	b	15a3c <__assert_fail@plt+0x3c38>
   15aa8:	ldr	r3, [sp, #4]
   15aac:	ldr	r3, [r3]
   15ab0:	cmp	r3, #0
   15ab4:	ldrne	r0, [sp, #48]	; 0x30
   15ab8:	bne	15adc <__assert_fail@plt+0x3cd8>
   15abc:	ldr	r3, [pc, #60]	; 15b00 <__assert_fail@plt+0x3cfc>
   15ac0:	add	sl, sl, sl, lsl #1
   15ac4:	ldr	r2, [pc, #48]	; 15afc <__assert_fail@plt+0x3cf8>
   15ac8:	ldr	r3, [r3, sl, lsl #2]
   15acc:	mov	r1, #8192	; 0x2000
   15ad0:	ldr	r0, [sp, #48]	; 0x30
   15ad4:	bl	11c00 <snprintf@plt>
   15ad8:	ldr	r0, [sp, #48]	; 0x30
   15adc:	add	sp, sp, #12
   15ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ae4:	mov	r0, #0
   15ae8:	add	sp, sp, #12
   15aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15af0:	mov	r0, r3
   15af4:	add	sp, sp, #12
   15af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15afc:	ldrdeq	sp, [r1], -r4
   15b00:	andeq	ip, r1, r4, lsl lr
   15b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b08:	mov	r5, r0
   15b0c:	sub	sp, sp, #8192	; 0x2000
   15b10:	ldr	r0, [pc, #1020]	; 15f14 <__assert_fail@plt+0x4110>
   15b14:	sub	sp, sp, #36	; 0x24
   15b18:	mov	r6, r3
   15b1c:	add	r3, sp, #8192	; 0x2000
   15b20:	ldr	ip, [r0]
   15b24:	add	r3, r3, #28
   15b28:	mov	sl, r2
   15b2c:	mov	fp, r1
   15b30:	mov	r2, #5
   15b34:	ldr	r1, [pc, #988]	; 15f18 <__assert_fail@plt+0x4114>
   15b38:	mov	r0, #0
   15b3c:	str	ip, [r3]
   15b40:	bl	11a14 <dcgettext@plt>
   15b44:	ldr	r8, [pc, #976]	; 15f1c <__assert_fail@plt+0x4118>
   15b48:	mov	r1, r0
   15b4c:	mov	r0, #1
   15b50:	bl	11c78 <__printf_chk@plt>
   15b54:	ldr	r3, [r8]
   15b58:	mov	r2, #2
   15b5c:	mov	r1, #1
   15b60:	ldr	r0, [pc, #952]	; 15f20 <__assert_fail@plt+0x411c>
   15b64:	bl	11aa4 <fwrite@plt>
   15b68:	cmp	sl, #0
   15b6c:	ble	15cd4 <__assert_fail@plt+0x3ed0>
   15b70:	sub	r7, fp, #4
   15b74:	add	r3, r7, sl, lsl #2
   15b78:	str	fp, [sp, #12]
   15b7c:	mov	r9, #0
   15b80:	mov	fp, r3
   15b84:	str	sl, [sp, #16]
   15b88:	b	15bf8 <__assert_fail@plt+0x3df4>
   15b8c:	cmp	r9, #0
   15b90:	beq	15ba0 <__assert_fail@plt+0x3d9c>
   15b94:	ldr	r1, [r8]
   15b98:	mov	r0, #44	; 0x2c
   15b9c:	bl	11d50 <putc@plt>
   15ba0:	add	r3, sp, #28
   15ba4:	str	r3, [sp]
   15ba8:	mov	r2, r4
   15bac:	mov	r3, r6
   15bb0:	add	r1, r5, #132	; 0x84
   15bb4:	add	r0, r5, #128	; 0x80
   15bb8:	bl	159f4 <__assert_fail@plt+0x3bf0>
   15bbc:	subs	sl, r0, #0
   15bc0:	beq	15bdc <__assert_fail@plt+0x3dd8>
   15bc4:	ldrsb	r2, [sl]
   15bc8:	cmp	r2, #0
   15bcc:	cmpne	r4, #6
   15bd0:	bne	15c50 <__assert_fail@plt+0x3e4c>
   15bd4:	cmp	r2, #0
   15bd8:	bne	15be0 <__assert_fail@plt+0x3ddc>
   15bdc:	ldr	sl, [pc, #832]	; 15f24 <__assert_fail@plt+0x4120>
   15be0:	mov	r0, sl
   15be4:	ldr	r1, [r8]
   15be8:	bl	11da4 <fputs@plt>
   15bec:	cmp	fp, r7
   15bf0:	add	r9, r9, #1
   15bf4:	beq	15ccc <__assert_fail@plt+0x3ec8>
   15bf8:	ldr	r4, [r7, #4]!
   15bfc:	cmp	r4, #6
   15c00:	bne	15b8c <__assert_fail@plt+0x3d88>
   15c04:	ldrb	r3, [r6, #8]
   15c08:	tst	r3, #2
   15c0c:	beq	15b8c <__assert_fail@plt+0x3d88>
   15c10:	ldr	r3, [r5, #128]	; 0x80
   15c14:	cmp	r3, #0
   15c18:	beq	15bec <__assert_fail@plt+0x3de8>
   15c1c:	cmp	r9, #0
   15c20:	bne	15ef4 <__assert_fail@plt+0x40f0>
   15c24:	add	r3, sp, #28
   15c28:	mov	r2, r4
   15c2c:	str	r3, [sp]
   15c30:	add	r1, r5, #132	; 0x84
   15c34:	mov	r3, r6
   15c38:	add	r0, r5, #128	; 0x80
   15c3c:	bl	159f4 <__assert_fail@plt+0x3bf0>
   15c40:	subs	sl, r0, #0
   15c44:	ldrsbne	r2, [sl]
   15c48:	bne	15bd4 <__assert_fail@plt+0x3dd0>
   15c4c:	b	15bdc <__assert_fail@plt+0x3dd8>
   15c50:	add	r4, r4, r4, lsl #1
   15c54:	ldr	r3, [pc, #716]	; 15f28 <__assert_fail@plt+0x4124>
   15c58:	add	r4, r3, r4, lsl #2
   15c5c:	ldrb	r2, [r4, #8]
   15c60:	tst	r2, #1
   15c64:	bne	15be0 <__assert_fail@plt+0x3ddc>
   15c68:	adds	r2, sl, #1
   15c6c:	beq	15be0 <__assert_fail@plt+0x3ddc>
   15c70:	ldrsb	r4, [sl, #1]
   15c74:	cmp	r4, #0
   15c78:	beq	15be0 <__assert_fail@plt+0x3ddc>
   15c7c:	str	r5, [sp, #20]
   15c80:	mov	r5, r2
   15c84:	b	15c94 <__assert_fail@plt+0x3e90>
   15c88:	ldrsb	r4, [r5]
   15c8c:	cmp	r4, #0
   15c90:	beq	15cc0 <__assert_fail@plt+0x3ebc>
   15c94:	ldr	r2, [pc, #656]	; 15f2c <__assert_fail@plt+0x4128>
   15c98:	add	r3, r4, #128	; 0x80
   15c9c:	cmp	r3, r2
   15ca0:	bhi	15cb4 <__assert_fail@plt+0x3eb0>
   15ca4:	bl	11b58 <__ctype_tolower_loc@plt>
   15ca8:	ldr	r3, [r0]
   15cac:	ldr	r4, [r3, r4, lsl #2]
   15cb0:	sxtb	r4, r4
   15cb4:	strb	r4, [r5], #1
   15cb8:	cmp	r5, #0
   15cbc:	bne	15c88 <__assert_fail@plt+0x3e84>
   15cc0:	ldr	r5, [sp, #20]
   15cc4:	ldrsb	r2, [sl]
   15cc8:	b	15bd4 <__assert_fail@plt+0x3dd0>
   15ccc:	ldr	fp, [sp, #12]
   15cd0:	ldr	sl, [sp, #16]
   15cd4:	ldr	r1, [r8]
   15cd8:	mov	r0, #10
   15cdc:	bl	11d50 <putc@plt>
   15ce0:	ldr	ip, [r5, #108]	; 0x6c
   15ce4:	cmp	ip, #0
   15ce8:	movgt	r7, #0
   15cec:	bgt	15d74 <__assert_fail@plt+0x3f70>
   15cf0:	b	15ecc <__assert_fail@plt+0x40c8>
   15cf4:	ldr	r0, [r5, #120]	; 0x78
   15cf8:	cmp	r0, #0
   15cfc:	beq	15e58 <__assert_fail@plt+0x4054>
   15d00:	ldr	r1, [pc, #552]	; 15f30 <__assert_fail@plt+0x412c>
   15d04:	ldr	r1, [r1]
   15d08:	add	r1, r1, #31
   15d0c:	lsr	r1, r1, #5
   15d10:	lsl	r1, r1, #2
   15d14:	cmp	r1, r2, lsr #3
   15d18:	bls	15d68 <__assert_fail@plt+0x3f64>
   15d1c:	lsr	r1, r2, #5
   15d20:	and	r2, r2, #31
   15d24:	ldr	lr, [r0, r1, lsl #2]
   15d28:	lsr	lr, lr, r2
   15d2c:	tst	lr, #1
   15d30:	beq	15d68 <__assert_fail@plt+0x3f64>
   15d34:	tst	r3, #4
   15d38:	bne	15d4c <__assert_fail@plt+0x3f48>
   15d3c:	ldr	r0, [r0, r1, lsl #2]
   15d40:	lsr	r0, r0, r2
   15d44:	tst	r0, #1
   15d48:	bne	15d68 <__assert_fail@plt+0x3f64>
   15d4c:	ldr	r0, [r5, #116]	; 0x74
   15d50:	cmp	r0, #0
   15d54:	beq	15dc4 <__assert_fail@plt+0x3fc0>
   15d58:	ldr	r1, [r0, r1, lsl #2]
   15d5c:	lsr	r2, r1, r2
   15d60:	tst	r2, #1
   15d64:	bne	15dc4 <__assert_fail@plt+0x3fc0>
   15d68:	add	r7, r7, #1
   15d6c:	cmp	ip, r7
   15d70:	ble	15ecc <__assert_fail@plt+0x40c8>
   15d74:	ldrb	r3, [r6, #8]
   15d78:	ldr	r2, [r5, #144]	; 0x90
   15d7c:	tst	r3, #8
   15d80:	ldr	r2, [r2, r7, lsl #2]
   15d84:	beq	15cf4 <__assert_fail@plt+0x3ef0>
   15d88:	tst	r3, #4
   15d8c:	bne	15e58 <__assert_fail@plt+0x4054>
   15d90:	ldr	r0, [r5, #120]	; 0x78
   15d94:	cmp	r0, #0
   15d98:	beq	15e58 <__assert_fail@plt+0x4054>
   15d9c:	ldr	r1, [pc, #396]	; 15f30 <__assert_fail@plt+0x412c>
   15da0:	ldr	r1, [r1]
   15da4:	add	r1, r1, #31
   15da8:	lsr	r1, r1, #5
   15dac:	lsl	r1, r1, #2
   15db0:	cmp	r1, r2, lsr #3
   15db4:	bhi	15f04 <__assert_fail@plt+0x4100>
   15db8:	ldr	r2, [r5, #116]	; 0x74
   15dbc:	cmp	r2, #0
   15dc0:	bne	15d68 <__assert_fail@plt+0x3f64>
   15dc4:	cmp	sl, #0
   15dc8:	movgt	r4, #0
   15dcc:	addgt	r9, sp, #28
   15dd0:	bgt	15e2c <__assert_fail@plt+0x4028>
   15dd4:	b	15eb0 <__assert_fail@plt+0x40ac>
   15dd8:	ldr	r1, [r8]
   15ddc:	mov	r0, #44	; 0x2c
   15de0:	bl	11d50 <putc@plt>
   15de4:	ldr	r2, [fp, r4, lsl #2]
   15de8:	str	r9, [sp]
   15dec:	mov	r3, r6
   15df0:	mov	r1, r7
   15df4:	mov	r0, r5
   15df8:	bl	1446c <__assert_fail@plt+0x2668>
   15dfc:	cmp	r0, #0
   15e00:	beq	15e50 <__assert_fail@plt+0x404c>
   15e04:	ldrsb	r3, [r0]
   15e08:	ldr	r2, [pc, #276]	; 15f24 <__assert_fail@plt+0x4120>
   15e0c:	cmp	r3, #0
   15e10:	moveq	r0, r2
   15e14:	ldr	r1, [r8]
   15e18:	bl	11da4 <fputs@plt>
   15e1c:	add	r4, r4, #1
   15e20:	cmp	sl, r4
   15e24:	beq	15eb0 <__assert_fail@plt+0x40ac>
   15e28:	ldrb	r3, [r6, #8]
   15e2c:	tst	r3, #2
   15e30:	beq	15e40 <__assert_fail@plt+0x403c>
   15e34:	ldr	r2, [fp, r4, lsl #2]
   15e38:	cmp	r2, #6
   15e3c:	beq	15e8c <__assert_fail@plt+0x4088>
   15e40:	cmp	r4, #0
   15e44:	bne	15dd8 <__assert_fail@plt+0x3fd4>
   15e48:	ldr	r2, [fp]
   15e4c:	b	15de8 <__assert_fail@plt+0x3fe4>
   15e50:	ldr	r0, [pc, #204]	; 15f24 <__assert_fail@plt+0x4120>
   15e54:	b	15e14 <__assert_fail@plt+0x4010>
   15e58:	ldr	r0, [r5, #116]	; 0x74
   15e5c:	cmp	r0, #0
   15e60:	beq	15dc4 <__assert_fail@plt+0x3fc0>
   15e64:	ldr	r1, [pc, #196]	; 15f30 <__assert_fail@plt+0x412c>
   15e68:	ldr	r1, [r1]
   15e6c:	add	r1, r1, #31
   15e70:	lsr	r1, r1, #5
   15e74:	lsl	r1, r1, #2
   15e78:	cmp	r1, r2, lsr #3
   15e7c:	bls	15d68 <__assert_fail@plt+0x3f64>
   15e80:	lsr	r1, r2, #5
   15e84:	and	r2, r2, #31
   15e88:	b	15d58 <__assert_fail@plt+0x3f54>
   15e8c:	ldr	r3, [r5, #128]	; 0x80
   15e90:	cmp	r3, #0
   15e94:	beq	15e1c <__assert_fail@plt+0x4018>
   15e98:	cmp	r4, #0
   15e9c:	beq	15de8 <__assert_fail@plt+0x3fe4>
   15ea0:	ldr	r1, [r8]
   15ea4:	mov	r0, #44	; 0x2c
   15ea8:	bl	11d50 <putc@plt>
   15eac:	b	15dd8 <__assert_fail@plt+0x3fd4>
   15eb0:	ldr	r1, [r8]
   15eb4:	mov	r0, #10
   15eb8:	bl	11d50 <putc@plt>
   15ebc:	ldr	ip, [r5, #108]	; 0x6c
   15ec0:	add	r7, r7, #1
   15ec4:	cmp	ip, r7
   15ec8:	bgt	15d74 <__assert_fail@plt+0x3f70>
   15ecc:	add	r3, sp, #8192	; 0x2000
   15ed0:	add	r3, r3, #28
   15ed4:	ldr	r2, [r3]
   15ed8:	ldr	r3, [pc, #52]	; 15f14 <__assert_fail@plt+0x4110>
   15edc:	ldr	r3, [r3]
   15ee0:	cmp	r2, r3
   15ee4:	bne	15f10 <__assert_fail@plt+0x410c>
   15ee8:	add	sp, sp, #8192	; 0x2000
   15eec:	add	sp, sp, #36	; 0x24
   15ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ef4:	ldr	r1, [r8]
   15ef8:	mov	r0, #44	; 0x2c
   15efc:	bl	11d50 <putc@plt>
   15f00:	b	15b94 <__assert_fail@plt+0x3d90>
   15f04:	lsr	r1, r2, #5
   15f08:	and	r2, r2, #31
   15f0c:	b	15d3c <__assert_fail@plt+0x3f38>
   15f10:	bl	11a2c <__stack_chk_fail@plt>
   15f14:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   15f18:	andeq	sp, r1, ip, lsl #13
   15f1c:	andeq	r0, r3, r4, lsr #32
   15f20:	andeq	sp, r1, r8, lsr #14
   15f24:	andeq	lr, r1, ip, lsr lr
   15f28:	andeq	ip, r1, r4, lsl lr
   15f2c:	andeq	r0, r0, pc, ror r1
   15f30:	andeq	r0, r3, r0, lsr r0
   15f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f38:	vpush	{d8}
   15f3c:	ldr	ip, [pc, #852]	; 16298 <__assert_fail@plt+0x4494>
   15f40:	mov	r8, r3
   15f44:	mov	r7, r0
   15f48:	sub	sp, sp, #8192	; 0x2000
   15f4c:	sub	sp, sp, #36	; 0x24
   15f50:	add	r3, sp, #8192	; 0x2000
   15f54:	add	r3, r3, #28
   15f58:	ldr	ip, [ip]
   15f5c:	mov	r0, #0
   15f60:	str	ip, [r3]
   15f64:	str	r1, [sp, #16]
   15f68:	mov	r9, r2
   15f6c:	bl	11dec <scols_init_debug@plt>
   15f70:	bl	11abc <scols_new_table@plt>
   15f74:	subs	r3, r0, #0
   15f78:	str	r3, [sp, #12]
   15f7c:	beq	16270 <__assert_fail@plt+0x446c>
   15f80:	ldrb	r3, [r8, #8]
   15f84:	tst	r3, #16
   15f88:	bne	1620c <__assert_fail@plt+0x4408>
   15f8c:	cmp	r9, #0
   15f90:	ble	15ffc <__assert_fail@plt+0x41f8>
   15f94:	ldr	r3, [sp, #16]
   15f98:	vldr	d8, [pc, #752]	; 16290 <__assert_fail@plt+0x448c>
   15f9c:	add	fp, r7, #128	; 0x80
   15fa0:	add	sl, r7, #132	; 0x84
   15fa4:	str	r7, [sp, #20]
   15fa8:	ldr	r7, [sp, #12]
   15fac:	sub	r5, r3, #4
   15fb0:	mov	r4, #0
   15fb4:	add	r6, sp, #28
   15fb8:	str	r6, [sp]
   15fbc:	mov	r3, r8
   15fc0:	ldr	r2, [r5, #4]!
   15fc4:	mov	r1, sl
   15fc8:	mov	r0, fp
   15fcc:	bl	159f4 <__assert_fail@plt+0x3bf0>
   15fd0:	mov	r2, #0
   15fd4:	vmov.f64	d0, d8
   15fd8:	mov	r1, r0
   15fdc:	mov	r0, r7
   15fe0:	bl	11948 <scols_table_new_column@plt>
   15fe4:	cmp	r0, #0
   15fe8:	beq	16240 <__assert_fail@plt+0x443c>
   15fec:	add	r4, r4, #1
   15ff0:	cmp	r9, r4
   15ff4:	bne	15fb8 <__assert_fail@plt+0x41b4>
   15ff8:	ldr	r7, [sp, #20]
   15ffc:	ldr	r0, [r7, #108]	; 0x6c
   16000:	cmp	r0, #0
   16004:	movgt	r6, #0
   16008:	bgt	16084 <__assert_fail@plt+0x4280>
   1600c:	b	161a0 <__assert_fail@plt+0x439c>
   16010:	ldr	ip, [r7, #120]	; 0x78
   16014:	cmp	ip, #0
   16018:	beq	1615c <__assert_fail@plt+0x4358>
   1601c:	ldr	r2, [pc, #632]	; 1629c <__assert_fail@plt+0x4498>
   16020:	ldr	r2, [r2]
   16024:	add	r2, r2, #31
   16028:	lsr	r2, r2, #5
   1602c:	lsl	r2, r2, #2
   16030:	cmp	r2, r3, lsr #3
   16034:	bls	16078 <__assert_fail@plt+0x4274>
   16038:	lsr	r2, r3, #5
   1603c:	and	r3, r3, #31
   16040:	ldr	lr, [ip, r2, lsl #2]
   16044:	lsr	lr, lr, r3
   16048:	tst	lr, #1
   1604c:	beq	16078 <__assert_fail@plt+0x4274>
   16050:	tst	r1, #4
   16054:	beq	161e8 <__assert_fail@plt+0x43e4>
   16058:	ldr	r1, [r7, #116]	; 0x74
   1605c:	cmp	r1, #0
   16060:	beq	160d4 <__assert_fail@plt+0x42d0>
   16064:	lsl	r2, r2, #2
   16068:	ldr	r2, [r1, r2]
   1606c:	lsr	r3, r2, r3
   16070:	tst	r3, #1
   16074:	bne	160d4 <__assert_fail@plt+0x42d0>
   16078:	add	r6, r6, #1
   1607c:	cmp	r0, r6
   16080:	ble	161a0 <__assert_fail@plt+0x439c>
   16084:	ldrb	r1, [r8, #8]
   16088:	ldr	r3, [r7, #144]	; 0x90
   1608c:	tst	r1, #8
   16090:	ldr	r3, [r3, r6, lsl #2]
   16094:	beq	16010 <__assert_fail@plt+0x420c>
   16098:	tst	r1, #4
   1609c:	bne	1615c <__assert_fail@plt+0x4358>
   160a0:	ldr	ip, [r7, #120]	; 0x78
   160a4:	cmp	ip, #0
   160a8:	beq	1615c <__assert_fail@plt+0x4358>
   160ac:	ldr	r2, [pc, #488]	; 1629c <__assert_fail@plt+0x4498>
   160b0:	ldr	r2, [r2]
   160b4:	add	r2, r2, #31
   160b8:	lsr	r2, r2, #5
   160bc:	lsl	r2, r2, #2
   160c0:	cmp	r2, r3, lsr #3
   160c4:	bhi	161e0 <__assert_fail@plt+0x43dc>
   160c8:	ldr	r3, [r7, #116]	; 0x74
   160cc:	cmp	r3, #0
   160d0:	bne	16078 <__assert_fail@plt+0x4274>
   160d4:	mov	r1, #0
   160d8:	ldr	r0, [sp, #12]
   160dc:	bl	11b28 <scols_table_new_line@plt>
   160e0:	subs	sl, r0, #0
   160e4:	beq	16258 <__assert_fail@plt+0x4454>
   160e8:	cmp	r9, #0
   160ec:	ble	16190 <__assert_fail@plt+0x438c>
   160f0:	ldr	r3, [sp, #16]
   160f4:	mov	r4, #0
   160f8:	sub	r5, r3, #4
   160fc:	add	fp, sp, #28
   16100:	b	16134 <__assert_fail@plt+0x4330>
   16104:	ldrsb	r3, [r2]
   16108:	ldr	r1, [pc, #400]	; 162a0 <__assert_fail@plt+0x449c>
   1610c:	cmp	r3, #0
   16110:	moveq	r2, r1
   16114:	mov	r1, r4
   16118:	mov	r0, sl
   1611c:	bl	118dc <scols_line_set_data@plt>
   16120:	cmp	r0, #0
   16124:	bne	16224 <__assert_fail@plt+0x4420>
   16128:	add	r4, r4, #1
   1612c:	cmp	r9, r4
   16130:	beq	16190 <__assert_fail@plt+0x438c>
   16134:	str	fp, [sp]
   16138:	mov	r3, r8
   1613c:	ldr	r2, [r5, #4]!
   16140:	mov	r1, r6
   16144:	mov	r0, r7
   16148:	bl	1446c <__assert_fail@plt+0x2668>
   1614c:	subs	r2, r0, #0
   16150:	bne	16104 <__assert_fail@plt+0x4300>
   16154:	ldr	r2, [pc, #324]	; 162a0 <__assert_fail@plt+0x449c>
   16158:	b	16114 <__assert_fail@plt+0x4310>
   1615c:	ldr	r1, [r7, #116]	; 0x74
   16160:	cmp	r1, #0
   16164:	beq	160d4 <__assert_fail@plt+0x42d0>
   16168:	ldr	r2, [pc, #300]	; 1629c <__assert_fail@plt+0x4498>
   1616c:	ldr	r2, [r2]
   16170:	add	r2, r2, #31
   16174:	lsr	r2, r2, #5
   16178:	lsl	r2, r2, #2
   1617c:	cmp	r2, r3, lsr #3
   16180:	bls	16078 <__assert_fail@plt+0x4274>
   16184:	lsr	r2, r3, #5
   16188:	and	r3, r3, #31
   1618c:	b	16064 <__assert_fail@plt+0x4260>
   16190:	ldr	r0, [r7, #108]	; 0x6c
   16194:	add	r6, r6, #1
   16198:	cmp	r0, r6
   1619c:	bgt	16084 <__assert_fail@plt+0x4280>
   161a0:	ldr	r4, [sp, #12]
   161a4:	mov	r0, r4
   161a8:	bl	11d08 <scols_print_table@plt>
   161ac:	mov	r0, r4
   161b0:	bl	11b34 <scols_unref_table@plt>
   161b4:	add	r3, sp, #8192	; 0x2000
   161b8:	add	r3, r3, #28
   161bc:	ldr	r2, [r3]
   161c0:	ldr	r3, [pc, #208]	; 16298 <__assert_fail@plt+0x4494>
   161c4:	ldr	r3, [r3]
   161c8:	cmp	r2, r3
   161cc:	bne	16288 <__assert_fail@plt+0x4484>
   161d0:	add	sp, sp, #8192	; 0x2000
   161d4:	add	sp, sp, #36	; 0x24
   161d8:	vpop	{d8}
   161dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161e0:	lsr	r2, r3, #5
   161e4:	and	r3, r3, #31
   161e8:	ldr	r1, [ip, r2, lsl #2]
   161ec:	lsl	r2, r2, #2
   161f0:	lsr	r1, r1, r3
   161f4:	tst	r1, #1
   161f8:	bne	16078 <__assert_fail@plt+0x4274>
   161fc:	ldr	r1, [r7, #116]	; 0x74
   16200:	cmp	r1, #0
   16204:	bne	16068 <__assert_fail@plt+0x4264>
   16208:	b	160d4 <__assert_fail@plt+0x42d0>
   1620c:	mov	r1, #1
   16210:	bl	11ca8 <scols_table_enable_json@plt>
   16214:	ldr	r1, [pc, #136]	; 162a4 <__assert_fail@plt+0x44a0>
   16218:	ldr	r0, [sp, #12]
   1621c:	bl	11924 <scols_table_set_name@plt>
   16220:	b	15f8c <__assert_fail@plt+0x4188>
   16224:	ldr	r1, [pc, #124]	; 162a8 <__assert_fail@plt+0x44a4>
   16228:	mov	r2, #5
   1622c:	mov	r0, #0
   16230:	bl	11a14 <dcgettext@plt>
   16234:	mov	r1, r0
   16238:	mov	r0, #1
   1623c:	bl	11a5c <err@plt>
   16240:	ldr	r1, [pc, #100]	; 162ac <__assert_fail@plt+0x44a8>
   16244:	mov	r2, #5
   16248:	bl	11a14 <dcgettext@plt>
   1624c:	mov	r1, r0
   16250:	mov	r0, #1
   16254:	bl	11a5c <err@plt>
   16258:	ldr	r1, [pc, #80]	; 162b0 <__assert_fail@plt+0x44ac>
   1625c:	mov	r2, #5
   16260:	bl	11a14 <dcgettext@plt>
   16264:	mov	r1, r0
   16268:	mov	r0, #1
   1626c:	bl	11a5c <err@plt>
   16270:	ldr	r1, [pc, #60]	; 162b4 <__assert_fail@plt+0x44b0>
   16274:	mov	r2, #5
   16278:	bl	11a14 <dcgettext@plt>
   1627c:	mov	r1, r0
   16280:	mov	r0, #1
   16284:	bl	11a5c <err@plt>
   16288:	bl	11a2c <__stack_chk_fail@plt>
   1628c:	nop			; (mov r0, r0)
	...
   16298:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   1629c:	andeq	r0, r3, r0, lsr r0
   162a0:	andeq	sp, r1, ip, lsr #14
   162a4:	andeq	sp, r1, r0, lsr r7
   162a8:	andeq	sp, r1, ip, lsr #2
   162ac:	andeq	sp, r1, r8, lsr r7
   162b0:	andeq	sp, r1, ip, lsl #2
   162b4:	andeq	sp, r1, r8, lsr #6
   162b8:	ldr	r3, [pc, #292]	; 163e4 <__assert_fail@plt+0x45e0>
   162bc:	push	{r4, r5, r6, lr}
   162c0:	ldr	r4, [r3]
   162c4:	mov	r0, r4
   162c8:	bl	11ad4 <__fpending@plt>
   162cc:	mov	r6, r0
   162d0:	mov	r0, r4
   162d4:	bl	1199c <ferror@plt>
   162d8:	mov	r5, r0
   162dc:	mov	r0, r4
   162e0:	bl	11cc0 <fclose@plt>
   162e4:	cmp	r5, #0
   162e8:	mov	r4, r0
   162ec:	bne	16394 <__assert_fail@plt+0x4590>
   162f0:	cmp	r0, #0
   162f4:	beq	16310 <__assert_fail@plt+0x450c>
   162f8:	bl	11be8 <__errno_location@plt>
   162fc:	cmp	r6, #0
   16300:	ldr	r3, [r0]
   16304:	bne	1636c <__assert_fail@plt+0x4568>
   16308:	cmp	r3, #9
   1630c:	bne	1636c <__assert_fail@plt+0x4568>
   16310:	ldr	r3, [pc, #208]	; 163e8 <__assert_fail@plt+0x45e4>
   16314:	ldr	r4, [r3]
   16318:	mov	r0, r4
   1631c:	bl	11ad4 <__fpending@plt>
   16320:	mov	r6, r0
   16324:	mov	r0, r4
   16328:	bl	1199c <ferror@plt>
   1632c:	mov	r5, r0
   16330:	mov	r0, r4
   16334:	bl	11cc0 <fclose@plt>
   16338:	cmp	r5, #0
   1633c:	mov	r4, r0
   16340:	bne	163c8 <__assert_fail@plt+0x45c4>
   16344:	cmp	r0, #0
   16348:	popeq	{r4, r5, r6, pc}
   1634c:	cmp	r6, #0
   16350:	bne	16364 <__assert_fail@plt+0x4560>
   16354:	bl	11be8 <__errno_location@plt>
   16358:	ldr	r3, [r0]
   1635c:	cmp	r3, #9
   16360:	popeq	{r4, r5, r6, pc}
   16364:	mov	r0, #1
   16368:	bl	119c0 <_exit@plt>
   1636c:	cmp	r3, #32
   16370:	beq	16310 <__assert_fail@plt+0x450c>
   16374:	cmp	r3, #0
   16378:	beq	163b0 <__assert_fail@plt+0x45ac>
   1637c:	mov	r2, #5
   16380:	ldr	r1, [pc, #100]	; 163ec <__assert_fail@plt+0x45e8>
   16384:	mov	r0, #0
   16388:	bl	11a14 <dcgettext@plt>
   1638c:	bl	11cfc <warn@plt>
   16390:	b	16364 <__assert_fail@plt+0x4560>
   16394:	bl	11be8 <__errno_location@plt>
   16398:	cmp	r4, #0
   1639c:	ldr	r3, [r0]
   163a0:	bne	1636c <__assert_fail@plt+0x4568>
   163a4:	cmp	r3, #32
   163a8:	strne	r4, [r0]
   163ac:	beq	16310 <__assert_fail@plt+0x450c>
   163b0:	mov	r2, #5
   163b4:	ldr	r1, [pc, #48]	; 163ec <__assert_fail@plt+0x45e8>
   163b8:	mov	r0, #0
   163bc:	bl	11a14 <dcgettext@plt>
   163c0:	bl	11bd0 <warnx@plt>
   163c4:	b	16364 <__assert_fail@plt+0x4560>
   163c8:	cmp	r0, #0
   163cc:	bne	16364 <__assert_fail@plt+0x4560>
   163d0:	bl	11be8 <__errno_location@plt>
   163d4:	ldr	r3, [r0]
   163d8:	cmp	r3, #32
   163dc:	strne	r4, [r0]
   163e0:	b	16364 <__assert_fail@plt+0x4560>
   163e4:	andeq	r0, r3, r4, lsr #32
   163e8:	andeq	r0, r3, r0, lsr #32
   163ec:	andeq	sp, r1, ip, asr r7
   163f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163f4:	sub	sp, sp, #8576	; 0x2180
   163f8:	ldr	r7, [pc, #2172]	; 16c7c <__assert_fail@plt+0x4e78>
   163fc:	sub	sp, sp, #52	; 0x34
   16400:	add	r2, sp, #8576	; 0x2180
   16404:	ldr	r3, [r7]
   16408:	add	r2, r2, #44	; 0x2c
   1640c:	mov	r4, r0
   16410:	mov	r5, #0
   16414:	add	r0, sp, #36	; 0x24
   16418:	mov	r8, r1
   1641c:	str	r3, [r2]
   16420:	str	r5, [sp, #16]
   16424:	bl	11a08 <uname@plt>
   16428:	cmn	r0, #1
   1642c:	beq	16c1c <__assert_fail@plt+0x4e18>
   16430:	ldr	r2, [pc, #2120]	; 16c80 <__assert_fail@plt+0x4e7c>
   16434:	ldr	r1, [pc, #2120]	; 16c84 <__assert_fail@plt+0x4e80>
   16438:	ldr	r0, [r4, #8]
   1643c:	bl	1ae14 <__assert_fail@plt+0x9010>
   16440:	subs	r5, r0, #0
   16444:	beq	16c38 <__assert_fail@plt+0x4e34>
   16448:	add	r0, sp, #296	; 0x128
   1644c:	bl	11a20 <strdup@plt>
   16450:	cmp	r0, #0
   16454:	beq	16b84 <__assert_fail@plt+0x4d80>
   16458:	ldr	r6, [pc, #2088]	; 16c88 <__assert_fail@plt+0x4e84>
   1645c:	ldr	r9, [pc, #2088]	; 16c8c <__assert_fail@plt+0x4e88>
   16460:	ldr	sl, [pc, #2088]	; 16c90 <__assert_fail@plt+0x4e8c>
   16464:	str	r0, [r4, #12]
   16468:	add	fp, r4, #16
   1646c:	b	16488 <__assert_fail@plt+0x4684>
   16470:	mov	r2, fp
   16474:	mov	r1, r6
   16478:	add	r0, sp, #428	; 0x1ac
   1647c:	bl	13b2c <__assert_fail@plt+0x1d28>
   16480:	cmp	r0, #0
   16484:	beq	16734 <__assert_fail@plt+0x4930>
   16488:	mov	r2, r5
   1648c:	mov	r1, #8192	; 0x2000
   16490:	add	r0, sp, #428	; 0x1ac
   16494:	bl	11978 <fgets@plt>
   16498:	cmp	r0, #0
   1649c:	bne	16470 <__assert_fail@plt+0x466c>
   164a0:	ldr	r2, [r4, #88]	; 0x58
   164a4:	str	r0, [r4, #104]	; 0x68
   164a8:	cmp	r2, #0
   164ac:	beq	1654c <__assert_fail@plt+0x4748>
   164b0:	ldr	r1, [pc, #2012]	; 16c94 <__assert_fail@plt+0x4e90>
   164b4:	mov	r3, #8192	; 0x2000
   164b8:	add	r0, sp, #428	; 0x1ac
   164bc:	stm	sp, {r1, r2}
   164c0:	mov	r1, r3
   164c4:	mov	r2, #1
   164c8:	bl	11de0 <__snprintf_chk@plt>
   164cc:	ldr	r1, [pc, #1988]	; 16c98 <__assert_fail@plt+0x4e94>
   164d0:	add	r0, sp, #428	; 0x1ac
   164d4:	bl	118c4 <strstr@plt>
   164d8:	cmp	r0, #0
   164dc:	beq	16b60 <__assert_fail@plt+0x4d5c>
   164e0:	ldr	r0, [pc, #1972]	; 16c9c <__assert_fail@plt+0x4e98>
   164e4:	bl	11a20 <strdup@plt>
   164e8:	cmp	r0, #0
   164ec:	beq	16b84 <__assert_fail@plt+0x4d80>
   164f0:	str	r0, [r4, #44]	; 0x2c
   164f4:	ldr	r1, [pc, #1956]	; 16ca0 <__assert_fail@plt+0x4e9c>
   164f8:	add	r0, sp, #428	; 0x1ac
   164fc:	bl	118c4 <strstr@plt>
   16500:	ldr	r1, [pc, #1948]	; 16ca4 <__assert_fail@plt+0x4ea0>
   16504:	cmp	r0, #0
   16508:	add	r0, sp, #428	; 0x1ac
   1650c:	ldrne	r3, [r4, #104]	; 0x68
   16510:	orrne	r3, r3, #6
   16514:	strne	r3, [r4, #104]	; 0x68
   16518:	bl	118c4 <strstr@plt>
   1651c:	ldr	r1, [pc, #1924]	; 16ca8 <__assert_fail@plt+0x4ea4>
   16520:	cmp	r0, #0
   16524:	add	r0, sp, #428	; 0x1ac
   16528:	ldrne	r3, [r4, #104]	; 0x68
   1652c:	orrne	r3, r3, #6
   16530:	strne	r3, [r4, #104]	; 0x68
   16534:	bl	118c4 <strstr@plt>
   16538:	cmp	r0, #0
   1653c:	beq	16be4 <__assert_fail@plt+0x4de0>
   16540:	ldr	r3, [r4, #104]	; 0x68
   16544:	orr	r3, r3, #6
   16548:	str	r3, [r4, #104]	; 0x68
   1654c:	ldr	r6, [r4, #12]
   16550:	cmp	r6, #0
   16554:	beq	16584 <__assert_fail@plt+0x4780>
   16558:	ldr	r3, [r8]
   1655c:	cmp	r3, #1
   16560:	beq	16584 <__assert_fail@plt+0x4780>
   16564:	ldr	r1, [pc, #1856]	; 16cac <__assert_fail@plt+0x4ea8>
   16568:	mov	r0, r6
   1656c:	bl	118f4 <strcmp@plt>
   16570:	cmp	r0, #0
   16574:	bne	16bb8 <__assert_fail@plt+0x4db4>
   16578:	ldr	r3, [r4, #104]	; 0x68
   1657c:	orr	r3, r3, #6
   16580:	str	r3, [r4, #104]	; 0x68
   16584:	ldr	r6, [pc, #1828]	; 16cb0 <__assert_fail@plt+0x4eac>
   16588:	mov	r0, r5
   1658c:	bl	11cc0 <fclose@plt>
   16590:	mov	r1, r6
   16594:	ldr	r2, [pc, #1816]	; 16cb4 <__assert_fail@plt+0x4eb0>
   16598:	ldr	r0, [r4, #4]
   1659c:	bl	1bc04 <__assert_fail@plt+0x9e00>
   165a0:	cmp	r0, #0
   165a4:	beq	16b50 <__assert_fail@plt+0x4d4c>
   165a8:	ldr	r3, [r8]
   165ac:	cmp	r3, #0
   165b0:	beq	16bd8 <__assert_fail@plt+0x4dd4>
   165b4:	ldr	r3, [r6]
   165b8:	add	r1, sp, #16
   165bc:	cmp	r3, #0
   165c0:	movle	r3, #2048	; 0x800
   165c4:	strle	r3, [r6]
   165c8:	ldr	r2, [r6]
   165cc:	ldr	r3, [pc, #1764]	; 16cb8 <__assert_fail@plt+0x4eb4>
   165d0:	ldr	r0, [r4, #4]
   165d4:	add	r5, r2, #31
   165d8:	bl	1c6b4 <__assert_fail@plt+0xa8b0>
   165dc:	lsr	r5, r5, #5
   165e0:	lsl	r5, r5, #2
   165e4:	subs	r8, r0, #0
   165e8:	bne	16bfc <__assert_fail@plt+0x4df8>
   165ec:	ldr	r1, [sp, #16]
   165f0:	mov	r0, r5
   165f4:	bl	119f0 <__sched_cpucount@plt>
   165f8:	mov	r1, #4
   165fc:	str	r0, [r4, #108]	; 0x6c
   16600:	bl	138c8 <__assert_fail@plt+0x1ac4>
   16604:	ldr	ip, [r6]
   16608:	cmp	ip, #0
   1660c:	mov	lr, r0
   16610:	str	r0, [r4, #144]	; 0x90
   16614:	ldr	r0, [sp, #16]
   16618:	ble	16650 <__assert_fail@plt+0x484c>
   1661c:	mov	r3, r8
   16620:	cmp	r5, r3, lsr #3
   16624:	bls	16644 <__assert_fail@plt+0x4840>
   16628:	lsr	r1, r3, #5
   1662c:	and	r2, r3, #31
   16630:	ldr	r1, [r0, r1, lsl #2]
   16634:	lsr	r2, r1, r2
   16638:	tst	r2, #1
   1663c:	strne	r3, [lr, r8, lsl #2]
   16640:	addne	r8, r8, #1
   16644:	add	r3, r3, #1
   16648:	cmp	ip, r3
   1664c:	bne	16620 <__assert_fail@plt+0x481c>
   16650:	bl	19584 <__assert_fail@plt+0x7780>
   16654:	mov	r0, #0
   16658:	str	r0, [sp, #16]
   1665c:	ldr	r3, [pc, #1624]	; 16cbc <__assert_fail@plt+0x4eb8>
   16660:	ldr	r2, [r6]
   16664:	add	r1, r4, #116	; 0x74
   16668:	ldr	r0, [r4, #4]
   1666c:	bl	1c6b4 <__assert_fail@plt+0xa8b0>
   16670:	cmp	r0, #0
   16674:	beq	16ba4 <__assert_fail@plt+0x4da0>
   16678:	ldr	r2, [r6]
   1667c:	ldr	r3, [pc, #1596]	; 16cc0 <__assert_fail@plt+0x4ebc>
   16680:	add	r1, r4, #120	; 0x78
   16684:	ldr	r0, [r4, #4]
   16688:	bl	1c6b4 <__assert_fail@plt+0xa8b0>
   1668c:	cmp	r0, #0
   16690:	beq	16b90 <__assert_fail@plt+0x4d8c>
   16694:	ldr	r2, [pc, #1576]	; 16cc4 <__assert_fail@plt+0x4ec0>
   16698:	add	r1, r4, #100	; 0x64
   1669c:	ldr	r0, [r4, #4]
   166a0:	bl	1bc04 <__assert_fail@plt+0x9e00>
   166a4:	ldr	r2, [pc, #1564]	; 16cc8 <__assert_fail@plt+0x4ec4>
   166a8:	ldr	r1, [pc, #1492]	; 16c84 <__assert_fail@plt+0x4e80>
   166ac:	cmp	r0, #0
   166b0:	mvnne	r3, #0
   166b4:	strne	r3, [r4, #100]	; 0x64
   166b8:	ldr	r0, [r4, #8]
   166bc:	bl	1ae14 <__assert_fail@plt+0x9010>
   166c0:	subs	r5, r0, #0
   166c4:	beq	16710 <__assert_fail@plt+0x490c>
   166c8:	add	r8, r4, #20
   166cc:	ldr	r6, [pc, #1528]	; 16ccc <__assert_fail@plt+0x4ec8>
   166d0:	b	166f0 <__assert_fail@plt+0x48ec>
   166d4:	ldr	r3, [r4, #20]
   166d8:	cmp	r3, #0
   166dc:	bne	16708 <__assert_fail@plt+0x4904>
   166e0:	mov	r2, r8
   166e4:	mov	r1, r6
   166e8:	add	r0, sp, #428	; 0x1ac
   166ec:	bl	13b2c <__assert_fail@plt+0x1d28>
   166f0:	mov	r2, r5
   166f4:	mov	r1, #8192	; 0x2000
   166f8:	add	r0, sp, #428	; 0x1ac
   166fc:	bl	11978 <fgets@plt>
   16700:	cmp	r0, #0
   16704:	bne	166d4 <__assert_fail@plt+0x48d0>
   16708:	mov	r0, r5
   1670c:	bl	11cc0 <fclose@plt>
   16710:	add	r3, sp, #8576	; 0x2180
   16714:	add	r3, r3, #44	; 0x2c
   16718:	ldr	r2, [r3]
   1671c:	ldr	r3, [r7]
   16720:	cmp	r2, r3
   16724:	bne	16c54 <__assert_fail@plt+0x4e50>
   16728:	add	sp, sp, #8576	; 0x2180
   1672c:	add	sp, sp, #52	; 0x34
   16730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16734:	mov	r2, fp
   16738:	mov	r1, r9
   1673c:	add	r0, sp, #428	; 0x1ac
   16740:	bl	13b2c <__assert_fail@plt+0x1d28>
   16744:	cmp	r0, #0
   16748:	bne	16468 <__assert_fail@plt+0x4664>
   1674c:	mov	r2, fp
   16750:	mov	r1, sl
   16754:	add	r0, sp, #428	; 0x1ac
   16758:	bl	13b2c <__assert_fail@plt+0x1d28>
   1675c:	cmp	r0, #0
   16760:	bne	16468 <__assert_fail@plt+0x4664>
   16764:	add	fp, r4, #24
   16768:	mov	r2, fp
   1676c:	ldr	r1, [pc, #1372]	; 16cd0 <__assert_fail@plt+0x4ecc>
   16770:	add	r0, sp, #428	; 0x1ac
   16774:	bl	13b2c <__assert_fail@plt+0x1d28>
   16778:	cmp	r0, #0
   1677c:	bne	16468 <__assert_fail@plt+0x4664>
   16780:	mov	r2, fp
   16784:	ldr	r1, [pc, #1352]	; 16cd4 <__assert_fail@plt+0x4ed0>
   16788:	add	r0, sp, #428	; 0x1ac
   1678c:	bl	13b2c <__assert_fail@plt+0x1d28>
   16790:	cmp	r0, #0
   16794:	bne	16468 <__assert_fail@plt+0x4664>
   16798:	add	fp, r4, #28
   1679c:	mov	r2, fp
   167a0:	ldr	r1, [pc, #1328]	; 16cd8 <__assert_fail@plt+0x4ed4>
   167a4:	add	r0, sp, #428	; 0x1ac
   167a8:	bl	13b2c <__assert_fail@plt+0x1d28>
   167ac:	cmp	r0, #0
   167b0:	bne	16468 <__assert_fail@plt+0x4664>
   167b4:	mov	r2, fp
   167b8:	ldr	r1, [pc, #1308]	; 16cdc <__assert_fail@plt+0x4ed8>
   167bc:	add	r0, sp, #428	; 0x1ac
   167c0:	bl	13b2c <__assert_fail@plt+0x1d28>
   167c4:	cmp	r0, #0
   167c8:	bne	16468 <__assert_fail@plt+0x4664>
   167cc:	add	r2, r4, #32
   167d0:	ldr	r1, [pc, #1288]	; 16ce0 <__assert_fail@plt+0x4edc>
   167d4:	add	r0, sp, #428	; 0x1ac
   167d8:	bl	13b2c <__assert_fail@plt+0x1d28>
   167dc:	cmp	r0, #0
   167e0:	bne	16468 <__assert_fail@plt+0x4664>
   167e4:	add	fp, r4, #80	; 0x50
   167e8:	mov	r2, fp
   167ec:	ldr	r1, [pc, #1264]	; 16ce4 <__assert_fail@plt+0x4ee0>
   167f0:	add	r0, sp, #428	; 0x1ac
   167f4:	bl	13b2c <__assert_fail@plt+0x1d28>
   167f8:	cmp	r0, #0
   167fc:	bne	16468 <__assert_fail@plt+0x4664>
   16800:	mov	r2, fp
   16804:	ldr	r1, [pc, #1244]	; 16ce8 <__assert_fail@plt+0x4ee4>
   16808:	add	r0, sp, #428	; 0x1ac
   1680c:	bl	13b2c <__assert_fail@plt+0x1d28>
   16810:	cmp	r0, #0
   16814:	bne	16468 <__assert_fail@plt+0x4664>
   16818:	add	r2, r4, #60	; 0x3c
   1681c:	ldr	r1, [pc, #1224]	; 16cec <__assert_fail@plt+0x4ee8>
   16820:	add	r0, sp, #428	; 0x1ac
   16824:	bl	13b2c <__assert_fail@plt+0x1d28>
   16828:	cmp	r0, #0
   1682c:	bne	16468 <__assert_fail@plt+0x4664>
   16830:	add	r2, r4, #64	; 0x40
   16834:	ldr	r1, [pc, #1204]	; 16cf0 <__assert_fail@plt+0x4eec>
   16838:	add	r0, sp, #428	; 0x1ac
   1683c:	bl	13b2c <__assert_fail@plt+0x1d28>
   16840:	cmp	r0, #0
   16844:	bne	16468 <__assert_fail@plt+0x4664>
   16848:	add	r2, r4, #68	; 0x44
   1684c:	ldr	r1, [pc, #1184]	; 16cf4 <__assert_fail@plt+0x4ef0>
   16850:	add	r0, sp, #428	; 0x1ac
   16854:	bl	13b2c <__assert_fail@plt+0x1d28>
   16858:	cmp	r0, #0
   1685c:	bne	16468 <__assert_fail@plt+0x4664>
   16860:	add	fp, r4, #88	; 0x58
   16864:	mov	r2, fp
   16868:	ldr	r1, [pc, #1160]	; 16cf8 <__assert_fail@plt+0x4ef4>
   1686c:	add	r0, sp, #428	; 0x1ac
   16870:	bl	13b2c <__assert_fail@plt+0x1d28>
   16874:	cmp	r0, #0
   16878:	bne	16468 <__assert_fail@plt+0x4664>
   1687c:	mov	r2, fp
   16880:	ldr	r1, [pc, #1140]	; 16cfc <__assert_fail@plt+0x4ef8>
   16884:	add	r0, sp, #428	; 0x1ac
   16888:	bl	13b2c <__assert_fail@plt+0x1d28>
   1688c:	cmp	r0, #0
   16890:	bne	16468 <__assert_fail@plt+0x4664>
   16894:	mov	r2, fp
   16898:	ldr	r1, [pc, #1120]	; 16d00 <__assert_fail@plt+0x4efc>
   1689c:	add	r0, sp, #428	; 0x1ac
   168a0:	bl	13b2c <__assert_fail@plt+0x1d28>
   168a4:	cmp	r0, #0
   168a8:	bne	16468 <__assert_fail@plt+0x4664>
   168ac:	mov	r2, fp
   168b0:	ldr	r1, [pc, #1100]	; 16d04 <__assert_fail@plt+0x4f00>
   168b4:	add	r0, sp, #428	; 0x1ac
   168b8:	bl	13b2c <__assert_fail@plt+0x1d28>
   168bc:	cmp	r0, #0
   168c0:	bne	16468 <__assert_fail@plt+0x4664>
   168c4:	add	fp, r4, #84	; 0x54
   168c8:	mov	r2, fp
   168cc:	ldr	r1, [pc, #1076]	; 16d08 <__assert_fail@plt+0x4f04>
   168d0:	add	r0, sp, #428	; 0x1ac
   168d4:	bl	13b2c <__assert_fail@plt+0x1d28>
   168d8:	cmp	r0, #0
   168dc:	bne	16468 <__assert_fail@plt+0x4664>
   168e0:	mov	r2, fp
   168e4:	ldr	r1, [pc, #1056]	; 16d0c <__assert_fail@plt+0x4f08>
   168e8:	add	r0, sp, #428	; 0x1ac
   168ec:	bl	13b2c <__assert_fail@plt+0x1d28>
   168f0:	cmp	r0, #0
   168f4:	bne	16468 <__assert_fail@plt+0x4664>
   168f8:	mov	r2, fp
   168fc:	ldr	r1, [pc, #1036]	; 16d10 <__assert_fail@plt+0x4f0c>
   16900:	add	r0, sp, #428	; 0x1ac
   16904:	bl	13b2c <__assert_fail@plt+0x1d28>
   16908:	cmp	r0, #0
   1690c:	bne	16468 <__assert_fail@plt+0x4664>
   16910:	add	r2, r4, #40	; 0x28
   16914:	ldr	r1, [pc, #1016]	; 16d14 <__assert_fail@plt+0x4f10>
   16918:	add	r0, sp, #428	; 0x1ac
   1691c:	bl	13b2c <__assert_fail@plt+0x1d28>
   16920:	cmp	r0, #0
   16924:	bne	16468 <__assert_fail@plt+0x4664>
   16928:	add	fp, r4, #36	; 0x24
   1692c:	mov	r2, fp
   16930:	ldr	r1, [pc, #992]	; 16d18 <__assert_fail@plt+0x4f14>
   16934:	add	r0, sp, #428	; 0x1ac
   16938:	bl	13b2c <__assert_fail@plt+0x1d28>
   1693c:	cmp	r0, #0
   16940:	bne	16468 <__assert_fail@plt+0x4664>
   16944:	mov	r2, fp
   16948:	ldr	r1, [pc, #972]	; 16d1c <__assert_fail@plt+0x4f18>
   1694c:	add	r0, sp, #428	; 0x1ac
   16950:	bl	13b2c <__assert_fail@plt+0x1d28>
   16954:	cmp	r0, #0
   16958:	bne	16468 <__assert_fail@plt+0x4664>
   1695c:	add	r2, r4, #92	; 0x5c
   16960:	ldr	r1, [pc, #952]	; 16d20 <__assert_fail@plt+0x4f1c>
   16964:	add	r0, sp, #428	; 0x1ac
   16968:	bl	13b2c <__assert_fail@plt+0x1d28>
   1696c:	cmp	r0, #0
   16970:	bne	16468 <__assert_fail@plt+0x4664>
   16974:	add	r2, r4, #96	; 0x60
   16978:	ldr	r1, [pc, #932]	; 16d24 <__assert_fail@plt+0x4f20>
   1697c:	add	r0, sp, #428	; 0x1ac
   16980:	bl	13b2c <__assert_fail@plt+0x1d28>
   16984:	cmp	r0, #0
   16988:	bne	16468 <__assert_fail@plt+0x4664>
   1698c:	mov	r2, #5
   16990:	ldr	r1, [pc, #912]	; 16d28 <__assert_fail@plt+0x4f24>
   16994:	add	r0, sp, #428	; 0x1ac
   16998:	bl	11db0 <strncmp@plt>
   1699c:	cmp	r0, #0
   169a0:	bne	16468 <__assert_fail@plt+0x4664>
   169a4:	bl	11b7c <__ctype_b_loc@plt>
   169a8:	add	r3, sp, #432	; 0x1b0
   169ac:	add	r2, r3, #1
   169b0:	ldr	r0, [r0]
   169b4:	mov	r3, r2
   169b8:	add	r2, r2, #1
   169bc:	ldrsb	r1, [r3]
   169c0:	lsl	r1, r1, #1
   169c4:	ldrh	r1, [r0, r1]
   169c8:	tst	r1, #2048	; 0x800
   169cc:	bne	169b4 <__assert_fail@plt+0x4bb0>
   169d0:	sub	r3, r3, #1
   169d4:	ldrsb	r2, [r3, #1]!
   169d8:	lsl	r1, r2, #1
   169dc:	ldrh	r1, [r0, r1]
   169e0:	tst	r1, #8192	; 0x2000
   169e4:	bne	169d4 <__assert_fail@plt+0x4bd0>
   169e8:	cmp	r2, #58	; 0x3a
   169ec:	bne	16468 <__assert_fail@plt+0x4664>
   169f0:	ldr	r1, [pc, #820]	; 16d2c <__assert_fail@plt+0x4f28>
   169f4:	add	r0, sp, #428	; 0x1ac
   169f8:	bl	118c4 <strstr@plt>
   169fc:	adds	r0, r0, #6
   16a00:	beq	16468 <__assert_fail@plt+0x4664>
   16a04:	mov	r2, #7
   16a08:	ldr	r1, [pc, #800]	; 16d30 <__assert_fail@plt+0x4f2c>
   16a0c:	bl	11db0 <strncmp@plt>
   16a10:	cmp	r0, #0
   16a14:	beq	16468 <__assert_fail@plt+0x4664>
   16a18:	ldr	r1, [pc, #788]	; 16d34 <__assert_fail@plt+0x4f30>
   16a1c:	add	r0, sp, #428	; 0x1ac
   16a20:	bl	118c4 <strstr@plt>
   16a24:	cmp	r0, #0
   16a28:	beq	16468 <__assert_fail@plt+0x4664>
   16a2c:	add	r2, sp, #20
   16a30:	ldr	r1, [pc, #768]	; 16d38 <__assert_fail@plt+0x4f34>
   16a34:	bl	11d20 <sscanf@plt>
   16a38:	cmp	r0, #1
   16a3c:	bne	16468 <__assert_fail@plt+0x4664>
   16a40:	ldr	r1, [pc, #756]	; 16d3c <__assert_fail@plt+0x4f38>
   16a44:	add	r0, sp, #428	; 0x1ac
   16a48:	bl	118c4 <strstr@plt>
   16a4c:	adds	fp, r0, #5
   16a50:	beq	16468 <__assert_fail@plt+0x4664>
   16a54:	ldrsb	r3, [r0, #5]
   16a58:	cmp	r3, #0
   16a5c:	beq	16468 <__assert_fail@plt+0x4664>
   16a60:	mov	r2, #4
   16a64:	ldr	r1, [pc, #724]	; 16d40 <__assert_fail@plt+0x4f3c>
   16a68:	mov	r0, fp
   16a6c:	bl	11db0 <strncmp@plt>
   16a70:	mov	r2, #11
   16a74:	ldr	r1, [pc, #712]	; 16d44 <__assert_fail@plt+0x4f40>
   16a78:	cmp	r0, #0
   16a7c:	movne	r3, #0
   16a80:	moveq	r3, #100	; 0x64
   16a84:	mov	r0, fp
   16a88:	mov	fp, r3
   16a8c:	bl	11db0 <strncmp@plt>
   16a90:	mov	r3, fp
   16a94:	ldr	r1, [pc, #684]	; 16d48 <__assert_fail@plt+0x4f44>
   16a98:	cmp	r0, #0
   16a9c:	moveq	r3, #105	; 0x69
   16aa0:	add	r0, sp, #428	; 0x1ac
   16aa4:	str	r3, [sp, #12]
   16aa8:	bl	118c4 <strstr@plt>
   16aac:	cmp	r0, #0
   16ab0:	beq	16468 <__assert_fail@plt+0x4664>
   16ab4:	add	r2, sp, #24
   16ab8:	ldr	r1, [pc, #652]	; 16d4c <__assert_fail@plt+0x4f48>
   16abc:	bl	11d20 <sscanf@plt>
   16ac0:	cmp	r0, #1
   16ac4:	bne	16468 <__assert_fail@plt+0x4664>
   16ac8:	ldr	fp, [r4, #136]	; 0x88
   16acc:	ldr	r0, [r4, #140]	; 0x8c
   16ad0:	add	fp, fp, #1
   16ad4:	str	fp, [r4, #136]	; 0x88
   16ad8:	lsl	fp, fp, #4
   16adc:	mov	r1, fp
   16ae0:	bl	11a38 <realloc@plt>
   16ae4:	adds	r3, fp, #0
   16ae8:	movne	r3, #1
   16aec:	cmp	r0, #0
   16af0:	movne	r3, #0
   16af4:	cmp	r3, #0
   16af8:	bne	16c58 <__assert_fail@plt+0x4e54>
   16afc:	ldr	r2, [r4, #136]	; 0x88
   16b00:	ldr	r1, [sp, #12]
   16b04:	sub	r2, r2, #-268435455	; 0xf0000001
   16b08:	cmp	r1, #0
   16b0c:	add	fp, r0, r2, lsl #4
   16b10:	str	r0, [r4, #140]	; 0x8c
   16b14:	str	r3, [r0, r2, lsl #4]
   16b18:	str	r3, [fp, #4]
   16b1c:	str	r3, [fp, #8]
   16b20:	str	r3, [fp, #12]
   16b24:	beq	16c68 <__assert_fail@plt+0x4e64>
   16b28:	mov	r3, r1
   16b2c:	ldr	r2, [sp, #20]
   16b30:	ldr	r1, [pc, #536]	; 16d50 <__assert_fail@plt+0x4f4c>
   16b34:	mov	r0, fp
   16b38:	bl	13858 <__assert_fail@plt+0x1a54>
   16b3c:	add	r0, fp, #4
   16b40:	ldrd	r2, [sp, #24]
   16b44:	ldr	r1, [pc, #520]	; 16d54 <__assert_fail@plt+0x4f50>
   16b48:	bl	13858 <__assert_fail@plt+0x1a54>
   16b4c:	b	16468 <__assert_fail@plt+0x4664>
   16b50:	ldr	r3, [r6]
   16b54:	add	r3, r3, #1
   16b58:	str	r3, [r6]
   16b5c:	b	165b4 <__assert_fail@plt+0x47b0>
   16b60:	ldr	r1, [pc, #496]	; 16d58 <__assert_fail@plt+0x4f54>
   16b64:	add	r0, sp, #428	; 0x1ac
   16b68:	bl	118c4 <strstr@plt>
   16b6c:	cmp	r0, #0
   16b70:	beq	164f4 <__assert_fail@plt+0x46f0>
   16b74:	ldr	r0, [pc, #480]	; 16d5c <__assert_fail@plt+0x4f58>
   16b78:	bl	11a20 <strdup@plt>
   16b7c:	cmp	r0, #0
   16b80:	bne	164f0 <__assert_fail@plt+0x46ec>
   16b84:	ldr	r1, [pc, #468]	; 16d60 <__assert_fail@plt+0x4f5c>
   16b88:	mov	r0, #1
   16b8c:	bl	11a5c <err@plt>
   16b90:	mov	r0, r5
   16b94:	ldr	r1, [r4, #120]	; 0x78
   16b98:	bl	119f0 <__sched_cpucount@plt>
   16b9c:	str	r0, [r4, #124]	; 0x7c
   16ba0:	b	16694 <__assert_fail@plt+0x4890>
   16ba4:	ldr	r1, [r4, #116]	; 0x74
   16ba8:	mov	r0, r5
   16bac:	bl	119f0 <__sched_cpucount@plt>
   16bb0:	str	r0, [r4, #112]	; 0x70
   16bb4:	b	16678 <__assert_fail@plt+0x4874>
   16bb8:	mov	r0, r6
   16bbc:	ldr	r1, [pc, #416]	; 16d64 <__assert_fail@plt+0x4f60>
   16bc0:	bl	118f4 <strcmp@plt>
   16bc4:	cmp	r0, #0
   16bc8:	ldreq	r3, [r4, #104]	; 0x68
   16bcc:	orreq	r3, r3, #2
   16bd0:	streq	r3, [r4, #104]	; 0x68
   16bd4:	b	16584 <__assert_fail@plt+0x4780>
   16bd8:	bl	19588 <__assert_fail@plt+0x7784>
   16bdc:	str	r0, [r6]
   16be0:	b	165b4 <__assert_fail@plt+0x47b0>
   16be4:	ldr	r1, [pc, #380]	; 16d68 <__assert_fail@plt+0x4f64>
   16be8:	add	r0, sp, #428	; 0x1ac
   16bec:	bl	118c4 <strstr@plt>
   16bf0:	cmp	r0, #0
   16bf4:	bne	16540 <__assert_fail@plt+0x473c>
   16bf8:	b	1654c <__assert_fail@plt+0x4748>
   16bfc:	mov	r2, #5
   16c00:	ldr	r1, [pc, #356]	; 16d6c <__assert_fail@plt+0x4f68>
   16c04:	mov	r0, #0
   16c08:	bl	11a14 <dcgettext@plt>
   16c0c:	ldr	r2, [pc, #348]	; 16d70 <__assert_fail@plt+0x4f6c>
   16c10:	mov	r1, r0
   16c14:	mov	r0, #1
   16c18:	bl	11a5c <err@plt>
   16c1c:	ldr	r1, [pc, #336]	; 16d74 <__assert_fail@plt+0x4f70>
   16c20:	mov	r0, r5
   16c24:	mov	r2, #5
   16c28:	bl	11a14 <dcgettext@plt>
   16c2c:	mov	r1, r0
   16c30:	mov	r0, #1
   16c34:	bl	11a5c <err@plt>
   16c38:	mov	r2, #5
   16c3c:	ldr	r1, [pc, #308]	; 16d78 <__assert_fail@plt+0x4f74>
   16c40:	bl	11a14 <dcgettext@plt>
   16c44:	ldr	r2, [pc, #304]	; 16d7c <__assert_fail@plt+0x4f78>
   16c48:	mov	r1, r0
   16c4c:	mov	r0, #1
   16c50:	bl	11a5c <err@plt>
   16c54:	bl	11a2c <__stack_chk_fail@plt>
   16c58:	mov	r2, fp
   16c5c:	ldr	r1, [pc, #284]	; 16d80 <__assert_fail@plt+0x4f7c>
   16c60:	mov	r0, #1
   16c64:	bl	11a5c <err@plt>
   16c68:	ldr	r2, [sp, #20]
   16c6c:	ldr	r1, [pc, #272]	; 16d84 <__assert_fail@plt+0x4f80>
   16c70:	mov	r0, fp
   16c74:	bl	13858 <__assert_fail@plt+0x1a54>
   16c78:	b	16b3c <__assert_fail@plt+0x4d38>
   16c7c:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   16c80:	andeq	sp, r1, ip, ror r7
   16c84:	andeq	lr, r1, r0, asr r1
   16c88:	andeq	sp, r1, r4, lsr #15
   16c8c:	andeq	sp, r1, ip, lsr #15
   16c90:			; <UNDEFINED> instruction: 0x0001d7b8
   16c94:	andeq	sp, r1, r0, lsr #18
   16c98:	andeq	sp, r1, r8, lsr #18
   16c9c:			; <UNDEFINED> instruction: 0x0001d5b4
   16ca0:	andeq	sp, r1, r8, lsr r9
   16ca4:	andeq	sp, r1, r0, asr #18
   16ca8:	andeq	sp, r1, r8, asr #18
   16cac:	andeq	sp, r1, r8, asr r9
   16cb0:	andeq	r0, r3, r0, lsr r0
   16cb4:	andeq	sp, r1, r4, ror #18
   16cb8:			; <UNDEFINED> instruction: 0x0001d9b8
   16cbc:	andeq	sp, r1, r0, ror r9
   16cc0:	andeq	sp, r1, r4, asr #19
   16cc4:	andeq	sp, r1, ip, asr #19
   16cc8:	andeq	sp, r1, ip, lsr #5
   16ccc:	ldrdeq	sp, [r1], -r8
   16cd0:	andeq	sp, r1, ip, asr #15
   16cd4:	andeq	sp, r1, r8, asr #15
   16cd8:	ldrdeq	sp, [r1], -r4
   16cdc:	ldrdeq	sp, [r1], -ip
   16ce0:	andeq	sp, r1, r8, ror #15
   16ce4:	strdeq	sp, [r1], -r4
   16ce8:	andeq	sp, r1, r0, lsl #16
   16cec:	andeq	sp, r1, ip, lsl #16
   16cf0:	andeq	sp, r1, r4, lsl r8
   16cf4:	andeq	sp, r1, r4, lsr #16
   16cf8:	andeq	sp, r1, r4, lsr r8
   16cfc:	andeq	sp, r1, ip, lsr r8
   16d00:	andeq	sp, r1, r8, asr #16
   16d04:	ldrdeq	sp, [r1], -r0
   16d08:	andeq	sp, r1, r4, asr r8
   16d0c:	andeq	sp, r1, r0, ror #16
   16d10:	andeq	sp, r1, ip, ror #16
   16d14:	andeq	sp, r1, r0, ror #28
   16d18:	andeq	sp, r1, r4, lsl #17
   16d1c:	andeq	sp, r1, r0, lsl #17
   16d20:	muleq	r1, r0, r8
   16d24:	andeq	sp, r1, r0, lsr #17
   16d28:			; <UNDEFINED> instruction: 0x0001d8b0
   16d2c:			; <UNDEFINED> instruction: 0x0001d8b8
   16d30:	andeq	sp, r1, r0, asr #17
   16d34:	andeq	sp, r1, r8, asr #17
   16d38:	ldrdeq	sp, [r1], -r0
   16d3c:	ldrdeq	sp, [r1], -ip
   16d40:	andeq	sp, r1, r4, ror #17
   16d44:	andeq	sp, r1, ip, ror #17
   16d48:	strdeq	sp, [r1], -r8
   16d4c:	andeq	sp, r1, r0, lsl #18
   16d50:	andeq	sp, r1, ip, lsl #18
   16d54:	andeq	sp, r1, r8, lsl r9
   16d58:	andeq	sp, r1, r0, lsr r9
   16d5c:	ldrdeq	sp, [r1], -r0
   16d60:	andeq	sp, r1, r8, asr #2
   16d64:	andeq	sp, r1, r0, ror #18
   16d68:	andeq	sp, r1, r0, asr r9
   16d6c:	andeq	sp, r1, r8, ror r9
   16d70:	andeq	sp, r1, r0, lsr #19
   16d74:	andeq	sp, r1, r8, ror #14
   16d78:	andeq	sp, r1, r4, lsl #15
   16d7c:	muleq	r1, r4, r7
   16d80:	strdeq	sp, [r1], -r0
   16d84:	andeq	sp, r1, r4, lsl r9
   16d88:	push	{r4, r5, r6, r7, r8, lr}
   16d8c:	sub	sp, sp, #32
   16d90:	ldr	r5, [pc, #564]	; 16fcc <__assert_fail@plt+0x51c8>
   16d94:	ldr	r6, [r0, #16]
   16d98:	ldr	r3, [r5]
   16d9c:	cmp	r6, #0
   16da0:	str	r3, [sp, #28]
   16da4:	beq	16e7c <__assert_fail@plt+0x5078>
   16da8:	ldr	r7, [r0, #28]
   16dac:	mov	r4, r0
   16db0:	cmp	r7, #0
   16db4:	beq	16e7c <__assert_fail@plt+0x5078>
   16db8:	mov	r2, #2
   16dbc:	ldr	r1, [pc, #524]	; 16fd0 <__assert_fail@plt+0x51cc>
   16dc0:	mov	r0, r6
   16dc4:	bl	11db0 <strncmp@plt>
   16dc8:	cmp	r0, #0
   16dcc:	bne	16e7c <__assert_fail@plt+0x5078>
   16dd0:	mov	r0, r7
   16dd4:	mov	r2, #2
   16dd8:	ldr	r1, [pc, #496]	; 16fd0 <__assert_fail@plt+0x51cc>
   16ddc:	bl	11db0 <strncmp@plt>
   16de0:	subs	r8, r0, #0
   16de4:	bne	16e7c <__assert_fail@plt+0x5078>
   16de8:	bl	11be8 <__errno_location@plt>
   16dec:	mov	r2, r8
   16df0:	add	r1, sp, #16
   16df4:	mov	r7, r0
   16df8:	str	r8, [r0]
   16dfc:	mov	r0, r6
   16e00:	bl	1190c <strtol@plt>
   16e04:	ldr	r2, [r7]
   16e08:	cmp	r2, #0
   16e0c:	mov	r6, r0
   16e10:	bne	16e7c <__assert_fail@plt+0x5078>
   16e14:	ldr	r1, [r4, #16]
   16e18:	ldr	r3, [sp, #16]
   16e1c:	cmp	r1, r3
   16e20:	beq	16e7c <__assert_fail@plt+0x5078>
   16e24:	add	r1, sp, #16
   16e28:	ldr	r0, [r4, #28]
   16e2c:	bl	1190c <strtol@plt>
   16e30:	ldr	r1, [r7]
   16e34:	cmp	r1, #0
   16e38:	bne	16e7c <__assert_fail@plt+0x5078>
   16e3c:	ldr	r2, [r4, #28]
   16e40:	ldr	r3, [sp, #16]
   16e44:	cmp	r2, r3
   16e48:	beq	16e7c <__assert_fail@plt+0x5078>
   16e4c:	cmp	r6, #65	; 0x41
   16e50:	beq	16fb4 <__assert_fail@plt+0x51b0>
   16e54:	ldr	r2, [pc, #376]	; 16fd4 <__assert_fail@plt+0x51d0>
   16e58:	mov	r3, #66	; 0x42
   16e5c:	b	16e70 <__assert_fail@plt+0x506c>
   16e60:	cmp	r3, r6
   16e64:	add	r2, r2, #12
   16e68:	beq	16e94 <__assert_fail@plt+0x5090>
   16e6c:	ldr	r3, [r2, #-12]
   16e70:	cmn	r3, #1
   16e74:	add	r1, r1, #1
   16e78:	bne	16e60 <__assert_fail@plt+0x505c>
   16e7c:	ldr	r2, [sp, #28]
   16e80:	ldr	r3, [r5]
   16e84:	cmp	r2, r3
   16e88:	bne	16fc8 <__assert_fail@plt+0x51c4>
   16e8c:	add	sp, sp, #32
   16e90:	pop	{r4, r5, r6, r7, r8, pc}
   16e94:	ldr	r3, [pc, #316]	; 16fd8 <__assert_fail@plt+0x51d4>
   16e98:	add	r1, r1, r1, lsl #1
   16e9c:	add	r1, r3, r1, lsl #2
   16ea0:	ldr	ip, [r1, #348]	; 0x15c
   16ea4:	ldr	r3, [r1, #352]	; 0x160
   16ea8:	cmp	ip, #0
   16eac:	str	r3, [r4, #16]
   16eb0:	beq	16e7c <__assert_fail@plt+0x5078>
   16eb4:	ldr	r3, [ip]
   16eb8:	cmn	r3, #1
   16ebc:	beq	16e7c <__assert_fail@plt+0x5078>
   16ec0:	cmp	r0, r3
   16ec4:	addne	r3, ip, #8
   16ec8:	bne	16edc <__assert_fail@plt+0x50d8>
   16ecc:	b	16fa8 <__assert_fail@plt+0x51a4>
   16ed0:	cmp	r2, r0
   16ed4:	add	r3, r3, #8
   16ed8:	beq	16fa8 <__assert_fail@plt+0x51a4>
   16edc:	ldr	r2, [r3]
   16ee0:	mov	ip, r3
   16ee4:	cmn	r2, #1
   16ee8:	bne	16ed0 <__assert_fail@plt+0x50cc>
   16eec:	cmp	r6, #65	; 0x41
   16ef0:	bne	16e7c <__assert_fail@plt+0x5078>
   16ef4:	ldr	r0, [r4, #36]	; 0x24
   16ef8:	cmp	r0, #0
   16efc:	beq	16e7c <__assert_fail@plt+0x5078>
   16f00:	ldr	r3, [r4, #80]	; 0x50
   16f04:	cmp	r3, #0
   16f08:	beq	16e7c <__assert_fail@plt+0x5078>
   16f0c:	mov	r3, #0
   16f10:	mov	r2, #10
   16f14:	str	r3, [r7]
   16f18:	add	r1, sp, #16
   16f1c:	bl	1190c <strtol@plt>
   16f20:	ldr	r2, [r7]
   16f24:	cmp	r2, #0
   16f28:	mov	r6, r0
   16f2c:	bne	16e7c <__assert_fail@plt+0x5078>
   16f30:	ldr	r1, [r4, #36]	; 0x24
   16f34:	ldr	r3, [sp, #16]
   16f38:	cmp	r1, r3
   16f3c:	beq	16e7c <__assert_fail@plt+0x5078>
   16f40:	add	r1, sp, #16
   16f44:	ldr	r0, [r4, #80]	; 0x50
   16f48:	bl	1190c <strtol@plt>
   16f4c:	ldr	r3, [r7]
   16f50:	cmp	r3, #0
   16f54:	bne	16e7c <__assert_fail@plt+0x5078>
   16f58:	ldr	r2, [r4, #80]	; 0x50
   16f5c:	ldr	r3, [sp, #16]
   16f60:	cmp	r2, r3
   16f64:	beq	16e7c <__assert_fail@plt+0x5078>
   16f68:	ldr	r2, [pc, #108]	; 16fdc <__assert_fail@plt+0x51d8>
   16f6c:	mov	r3, #8
   16f70:	stmib	sp, {r0, r6}
   16f74:	str	r2, [sp]
   16f78:	mov	r1, r3
   16f7c:	mov	r2, #1
   16f80:	add	r0, sp, #20
   16f84:	bl	11de0 <__snprintf_chk@plt>
   16f88:	add	r0, sp, #20
   16f8c:	bl	11a20 <strdup@plt>
   16f90:	cmp	r0, #0
   16f94:	strne	r0, [r4, #80]	; 0x50
   16f98:	bne	16e7c <__assert_fail@plt+0x5078>
   16f9c:	ldr	r1, [pc, #60]	; 16fe0 <__assert_fail@plt+0x51dc>
   16fa0:	mov	r0, #1
   16fa4:	bl	11a5c <err@plt>
   16fa8:	ldr	r3, [ip, #4]
   16fac:	str	r3, [r4, #32]
   16fb0:	b	16eec <__assert_fail@plt+0x50e8>
   16fb4:	ldr	r2, [pc, #40]	; 16fe4 <__assert_fail@plt+0x51e0>
   16fb8:	mov	r3, #2064	; 0x810
   16fbc:	str	r2, [r4, #16]
   16fc0:	ldr	ip, [pc, #16]	; 16fd8 <__assert_fail@plt+0x51d4>
   16fc4:	b	16ec0 <__assert_fail@plt+0x50bc>
   16fc8:	bl	11a2c <__stack_chk_fail@plt>
   16fcc:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   16fd0:	andeq	lr, r1, ip, asr #19
   16fd4:	andeq	lr, r1, r0, lsr r6
   16fd8:	andeq	lr, r1, r0, asr #9
   16fdc:	muleq	r1, r8, r8
   16fe0:	andeq	sp, r1, r8, asr #2
   16fe4:	andeq	lr, r1, r0, lsr #17
   16fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fec:	sub	sp, sp, #28
   16ff0:	ldr	r8, [pc, #312]	; 17130 <__assert_fail@plt+0x532c>
   16ff4:	mov	r9, r0
   16ff8:	mov	r4, r1
   16ffc:	ldr	r3, [r8]
   17000:	mov	r0, r2
   17004:	mov	r1, #0
   17008:	str	r3, [sp, #20]
   1700c:	bl	11ae0 <open64@plt>
   17010:	subs	r6, r0, #0
   17014:	movlt	r5, #0
   17018:	blt	170dc <__assert_fail@plt+0x52d8>
   1701c:	mov	r0, r4
   17020:	bl	11b04 <malloc@plt>
   17024:	subs	r5, r0, #0
   17028:	beq	17114 <__assert_fail@plt+0x5310>
   1702c:	mov	sl, #0
   17030:	mov	r2, r9
   17034:	mov	r3, sl
   17038:	str	sl, [sp]
   1703c:	mov	r0, r6
   17040:	bl	11ab0 <lseek64@plt>
   17044:	mvn	r3, #0
   17048:	mvn	r2, #0
   1704c:	cmp	r1, r3
   17050:	cmpeq	r0, r2
   17054:	beq	17114 <__assert_fail@plt+0x5310>
   17058:	mov	r2, r4
   1705c:	mov	r1, sl
   17060:	mov	r0, r5
   17064:	bl	11c48 <memset@plt>
   17068:	cmp	r4, sl
   1706c:	beq	170d4 <__assert_fail@plt+0x52d0>
   17070:	ldr	fp, [pc, #188]	; 17134 <__assert_fail@plt+0x5330>
   17074:	mov	r9, sl
   17078:	mov	r7, r5
   1707c:	mov	r2, r4
   17080:	mov	r1, r7
   17084:	mov	r0, r6
   17088:	bl	1193c <read@plt>
   1708c:	cmp	r0, #0
   17090:	ble	170ac <__assert_fail@plt+0x52a8>
   17094:	subs	r4, r4, r0
   17098:	add	r7, r7, r0
   1709c:	add	sl, sl, r0
   170a0:	beq	170d4 <__assert_fail@plt+0x52d0>
   170a4:	mov	r9, #0
   170a8:	b	1707c <__assert_fail@plt+0x5278>
   170ac:	beq	170cc <__assert_fail@plt+0x52c8>
   170b0:	bl	11be8 <__errno_location@plt>
   170b4:	ldr	r2, [r0]
   170b8:	cmp	r2, #4
   170bc:	cmpne	r2, #11
   170c0:	bne	170cc <__assert_fail@plt+0x52c8>
   170c4:	cmp	r9, #4
   170c8:	ble	170f8 <__assert_fail@plt+0x52f4>
   170cc:	cmp	sl, #0
   170d0:	beq	17114 <__assert_fail@plt+0x5310>
   170d4:	mov	r0, r6
   170d8:	bl	11dc8 <close@plt>
   170dc:	ldr	r2, [sp, #20]
   170e0:	ldr	r3, [r8]
   170e4:	mov	r0, r5
   170e8:	cmp	r2, r3
   170ec:	bne	1712c <__assert_fail@plt+0x5328>
   170f0:	add	sp, sp, #28
   170f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170f8:	mov	r1, #0
   170fc:	add	r0, sp, #12
   17100:	add	r9, r9, #1
   17104:	str	r1, [sp, #12]
   17108:	str	fp, [sp, #16]
   1710c:	bl	11984 <nanosleep@plt>
   17110:	b	1707c <__assert_fail@plt+0x5278>
   17114:	mov	r0, r5
   17118:	bl	1196c <free@plt>
   1711c:	mov	r0, r6
   17120:	bl	11dc8 <close@plt>
   17124:	mov	r5, #0
   17128:	b	170dc <__assert_fail@plt+0x52d8>
   1712c:	bl	11a2c <__stack_chk_fail@plt>
   17130:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   17134:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   17138:	push	{r4, r5, r6, lr}
   1713c:	subs	r4, r2, #0
   17140:	moveq	r5, r4
   17144:	beq	17188 <__assert_fail@plt+0x5384>
   17148:	cmp	r4, #1
   1714c:	add	r5, r1, r0
   17150:	ldrsb	r3, [r1, r0]
   17154:	bhi	1717c <__assert_fail@plt+0x5378>
   17158:	b	17190 <__assert_fail@plt+0x538c>
   1715c:	mov	r0, r5
   17160:	bl	11bb8 <strlen@plt>
   17164:	sub	r4, r4, #1
   17168:	uxtb	r4, r4
   1716c:	cmp	r4, #1
   17170:	add	r0, r0, #1
   17174:	ldrsb	r3, [r5, r0]!
   17178:	beq	17190 <__assert_fail@plt+0x538c>
   1717c:	cmp	r3, #0
   17180:	bne	1715c <__assert_fail@plt+0x5358>
   17184:	mov	r5, r3
   17188:	mov	r0, r5
   1718c:	pop	{r4, r5, r6, pc}
   17190:	cmp	r3, #0
   17194:	moveq	r5, #0
   17198:	mov	r0, r5
   1719c:	pop	{r4, r5, r6, pc}
   171a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171a4:	mov	sl, r2
   171a8:	sub	sp, sp, #20
   171ac:	mov	r2, r3
   171b0:	mov	r6, r1
   171b4:	bl	16fe8 <__assert_fail@plt+0x51e4>
   171b8:	subs	r5, r0, #0
   171bc:	beq	172c0 <__assert_fail@plt+0x54bc>
   171c0:	cmp	sl, #0
   171c4:	mov	r4, sl
   171c8:	beq	172c4 <__assert_fail@plt+0x54c0>
   171cc:	add	r3, r5, r6
   171d0:	mov	r2, r3
   171d4:	str	r3, [sp]
   171d8:	add	r3, r5, #4
   171dc:	cmp	r2, r3
   171e0:	bcc	172c0 <__assert_fail@plt+0x54bc>
   171e4:	ldrb	r7, [r5, #1]
   171e8:	ldrb	r0, [r5]
   171ec:	cmp	r7, #3
   171f0:	bls	172c0 <__assert_fail@plt+0x54bc>
   171f4:	mov	r8, r5
   171f8:	mov	r9, #0
   171fc:	str	r9, [sp, #4]
   17200:	str	r9, [sp, #12]
   17204:	str	r9, [sp, #8]
   17208:	add	r4, r8, r7
   1720c:	sub	r3, r4, r5
   17210:	add	r3, r3, #1
   17214:	cmp	r3, r6
   17218:	bge	17254 <__assert_fail@plt+0x5450>
   1721c:	mov	r3, r4
   17220:	mov	r4, r3
   17224:	add	r3, r3, #1
   17228:	ldrb	r1, [r4]
   1722c:	sub	r2, r3, r5
   17230:	add	r2, r2, #1
   17234:	cmp	r1, #0
   17238:	bne	17248 <__assert_fail@plt+0x5444>
   1723c:	ldrb	r1, [r3]
   17240:	cmp	r1, #0
   17244:	beq	17254 <__assert_fail@plt+0x5450>
   17248:	cmp	r2, r6
   1724c:	mov	r4, r3
   17250:	blt	17220 <__assert_fail@plt+0x541c>
   17254:	cmp	r0, #0
   17258:	add	fp, r4, #2
   1725c:	beq	172d8 <__assert_fail@plt+0x54d4>
   17260:	cmp	r0, #1
   17264:	bne	17290 <__assert_fail@plt+0x548c>
   17268:	ldrb	r2, [r8, #4]
   1726c:	mov	r1, r8
   17270:	mov	r0, r7
   17274:	bl	17138 <__assert_fail@plt+0x5334>
   17278:	ldrb	r2, [r8, #5]
   1727c:	mov	r1, r8
   17280:	str	r0, [sp, #4]
   17284:	mov	r0, r7
   17288:	bl	17138 <__assert_fail@plt+0x5334>
   1728c:	str	r0, [sp, #12]
   17290:	add	r9, r9, #1
   17294:	cmp	sl, r9
   17298:	beq	172f8 <__assert_fail@plt+0x54f4>
   1729c:	ldr	r3, [sp]
   172a0:	add	r2, r4, #6
   172a4:	cmp	r3, r2
   172a8:	bcc	172f8 <__assert_fail@plt+0x54f4>
   172ac:	ldrb	r7, [r4, #3]
   172b0:	mov	r8, fp
   172b4:	ldrb	r0, [r4, #2]
   172b8:	cmp	r7, #3
   172bc:	bhi	17208 <__assert_fail@plt+0x5404>
   172c0:	mov	r4, #0
   172c4:	mov	r0, r5
   172c8:	bl	1196c <free@plt>
   172cc:	mov	r0, r4
   172d0:	add	sp, sp, #20
   172d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172d8:	mov	r0, r7
   172dc:	ldrb	r2, [r8, #4]
   172e0:	mov	r1, r8
   172e4:	bl	17138 <__assert_fail@plt+0x5334>
   172e8:	add	r9, r9, #1
   172ec:	cmp	sl, r9
   172f0:	str	r0, [sp, #8]
   172f4:	bne	1729c <__assert_fail@plt+0x5498>
   172f8:	ldr	r4, [sp, #4]
   172fc:	cmp	r4, #0
   17300:	beq	17338 <__assert_fail@plt+0x5534>
   17304:	mov	r0, r4
   17308:	ldr	r1, [pc, #116]	; 17384 <__assert_fail@plt+0x5580>
   1730c:	bl	118f4 <strcmp@plt>
   17310:	cmp	r0, #0
   17314:	moveq	r4, #8
   17318:	beq	172c4 <__assert_fail@plt+0x54c0>
   1731c:	mov	r0, r4
   17320:	ldr	r1, [pc, #96]	; 17388 <__assert_fail@plt+0x5584>
   17324:	bl	118c4 <strstr@plt>
   17328:	ldr	r3, [sp, #12]
   1732c:	cmp	r0, #0
   17330:	cmpne	r3, #0
   17334:	bne	17360 <__assert_fail@plt+0x555c>
   17338:	ldr	r3, [sp, #8]
   1733c:	cmp	r3, #0
   17340:	beq	1737c <__assert_fail@plt+0x5578>
   17344:	mov	r0, r3
   17348:	ldr	r1, [pc, #60]	; 1738c <__assert_fail@plt+0x5588>
   1734c:	bl	118f4 <strcmp@plt>
   17350:	cmp	r0, #0
   17354:	movne	r4, #0
   17358:	moveq	r4, #10
   1735c:	b	172c4 <__assert_fail@plt+0x54c0>
   17360:	mov	r0, r3
   17364:	ldr	r1, [pc, #36]	; 17390 <__assert_fail@plt+0x558c>
   17368:	bl	118c4 <strstr@plt>
   1736c:	cmp	r0, #0
   17370:	movne	r4, #9
   17374:	bne	172c4 <__assert_fail@plt+0x54c0>
   17378:	b	17338 <__assert_fail@plt+0x5534>
   1737c:	ldr	r4, [sp, #8]
   17380:	b	172c4 <__assert_fail@plt+0x54c0>
   17384:	andeq	lr, r1, r8, ror #25
   17388:	strdeq	lr, [r1], -r8
   1738c:	andeq	lr, r1, r4, asr r4
   17390:	andeq	lr, r1, r0, lsl #26
   17394:	push	{r4, r5, r6, r7, r8, lr}
   17398:	sub	sp, sp, #176	; 0xb0
   1739c:	ldr	r6, [pc, #472]	; 1757c <__assert_fail@plt+0x5778>
   173a0:	mov	r2, sp
   173a4:	ldr	r1, [pc, #468]	; 17580 <__assert_fail@plt+0x577c>
   173a8:	ldr	r3, [r6]
   173ac:	mov	r0, #3
   173b0:	str	r3, [sp, #172]	; 0xac
   173b4:	bl	11d98 <__xstat64@plt>
   173b8:	subs	r5, r0, #0
   173bc:	bne	17414 <__assert_fail@plt+0x5610>
   173c0:	ldr	r2, [sp, #52]	; 0x34
   173c4:	ldr	r1, [sp, #48]	; 0x30
   173c8:	ldr	r3, [pc, #432]	; 17580 <__assert_fail@plt+0x577c>
   173cc:	asr	r2, r2, #31
   173d0:	and	r2, r2, #3
   173d4:	adds	r2, r2, r1
   173d8:	uxth	r1, r1
   173dc:	lsr	r2, r2, #2
   173e0:	uxth	r2, r2
   173e4:	bl	171a0 <__assert_fail@plt+0x539c>
   173e8:	subs	r4, r0, #0
   173ec:	blt	17414 <__assert_fail@plt+0x5610>
   173f0:	mov	r0, r5
   173f4:	bl	1196c <free@plt>
   173f8:	ldr	r2, [sp, #172]	; 0xac
   173fc:	ldr	r3, [r6]
   17400:	mov	r0, r4
   17404:	cmp	r2, r3
   17408:	bne	17578 <__assert_fail@plt+0x5774>
   1740c:	add	sp, sp, #176	; 0xb0
   17410:	pop	{r4, r5, r6, r7, r8, pc}
   17414:	ldr	r1, [pc, #360]	; 17584 <__assert_fail@plt+0x5780>
   17418:	ldr	r0, [pc, #360]	; 17588 <__assert_fail@plt+0x5784>
   1741c:	bl	11d68 <fopen64@plt>
   17420:	subs	r7, r0, #0
   17424:	beq	17558 <__assert_fail@plt+0x5754>
   17428:	ldr	r8, [pc, #348]	; 1758c <__assert_fail@plt+0x5788>
   1742c:	mov	r2, r7
   17430:	mov	r1, #63	; 0x3f
   17434:	add	r0, sp, #108	; 0x6c
   17438:	bl	11978 <fgets@plt>
   1743c:	subs	r4, r0, #0
   17440:	beq	17548 <__assert_fail@plt+0x5744>
   17444:	mov	r1, #61	; 0x3d
   17448:	add	r0, sp, #108	; 0x6c
   1744c:	bl	11bc4 <strchr@plt>
   17450:	subs	r5, r0, #0
   17454:	beq	1742c <__assert_fail@plt+0x5628>
   17458:	mov	r3, #0
   1745c:	strb	r3, [r5]
   17460:	mov	r1, r8
   17464:	add	r0, sp, #108	; 0x6c
   17468:	bl	118f4 <strcmp@plt>
   1746c:	subs	r4, r0, #0
   17470:	bne	1742c <__assert_fail@plt+0x5628>
   17474:	mov	r2, r4
   17478:	mov	r1, r4
   1747c:	add	r0, r5, #1
   17480:	bl	11bac <strtoul@plt>
   17484:	mov	r5, r0
   17488:	mov	r0, r7
   1748c:	bl	11cc0 <fclose@plt>
   17490:	mov	r0, r5
   17494:	ldr	r2, [pc, #244]	; 17590 <__assert_fail@plt+0x578c>
   17498:	mov	r1, #32
   1749c:	bl	16fe8 <__assert_fail@plt+0x51e4>
   174a0:	subs	r5, r0, #0
   174a4:	beq	173f0 <__assert_fail@plt+0x55ec>
   174a8:	ldrb	r0, [r5, #5]
   174ac:	cmp	r0, #0
   174b0:	beq	174dc <__assert_fail@plt+0x56d8>
   174b4:	add	r0, r0, r5
   174b8:	mov	r2, r5
   174bc:	mov	r3, r4
   174c0:	ldrb	r1, [r2], #1
   174c4:	add	r3, r1, r3
   174c8:	cmp	r2, r0
   174cc:	uxtb	r3, r3
   174d0:	bne	174c0 <__assert_fail@plt+0x56bc>
   174d4:	cmp	r3, #0
   174d8:	bne	17538 <__assert_fail@plt+0x5734>
   174dc:	mov	r2, #5
   174e0:	ldr	r1, [pc, #172]	; 17594 <__assert_fail@plt+0x5790>
   174e4:	add	r0, r5, #16
   174e8:	bl	119fc <memcmp@plt>
   174ec:	cmp	r0, #0
   174f0:	bne	17538 <__assert_fail@plt+0x5734>
   174f4:	add	r3, r5, #15
   174f8:	add	r1, r5, #30
   174fc:	ldrb	r2, [r3, #1]!
   17500:	add	r0, r0, r2
   17504:	cmp	r3, r1
   17508:	uxtb	r0, r0
   1750c:	bne	174fc <__assert_fail@plt+0x56f8>
   17510:	cmp	r0, #0
   17514:	bne	17538 <__assert_fail@plt+0x5734>
   17518:	ldr	r3, [pc, #112]	; 17590 <__assert_fail@plt+0x578c>
   1751c:	ldrh	r2, [r5, #28]
   17520:	ldrh	r1, [r5, #22]
   17524:	ldr	r0, [r5, #24]
   17528:	bl	171a0 <__assert_fail@plt+0x539c>
   1752c:	cmp	r0, #0
   17530:	movge	r4, r0
   17534:	bge	173f0 <__assert_fail@plt+0x55ec>
   17538:	mov	r0, r5
   1753c:	bl	1196c <free@plt>
   17540:	mov	r5, #0
   17544:	b	173f0 <__assert_fail@plt+0x55ec>
   17548:	mov	r0, r7
   1754c:	bl	11cc0 <fclose@plt>
   17550:	mov	r5, r4
   17554:	b	173f0 <__assert_fail@plt+0x55ec>
   17558:	ldr	r1, [pc, #36]	; 17584 <__assert_fail@plt+0x5780>
   1755c:	ldr	r0, [pc, #52]	; 17598 <__assert_fail@plt+0x5794>
   17560:	bl	11d68 <fopen64@plt>
   17564:	subs	r7, r0, #0
   17568:	bne	17428 <__assert_fail@plt+0x5624>
   1756c:	mov	r4, r7
   17570:	mov	r5, r7
   17574:	b	173f0 <__assert_fail@plt+0x55ec>
   17578:	bl	11a2c <__stack_chk_fail@plt>
   1757c:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   17580:	andeq	lr, r1, r8, asr #25
   17584:	andeq	lr, r1, r0, asr r1
   17588:	andeq	lr, r1, r8, lsl #26
   1758c:	andeq	lr, r1, r8, lsr sp
   17590:	andeq	lr, r1, r0, asr #26
   17594:	andeq	lr, r1, ip, asr #26
   17598:	andeq	lr, r1, r4, lsr #26
   1759c:	andeq	r0, r0, r0
   175a0:	cmp	r0, #0
   175a4:	mov	r3, #0
   175a8:	str	r3, [r1]
   175ac:	bxeq	lr
   175b0:	ldrsb	r2, [r0]
   175b4:	cmp	r2, #47	; 0x2f
   175b8:	bne	175f4 <__assert_fail@plt+0x57f0>
   175bc:	ldrsb	r3, [r0, #1]
   175c0:	cmp	r3, #47	; 0x2f
   175c4:	bne	175fc <__assert_fail@plt+0x57f8>
   175c8:	add	r3, r0, #1
   175cc:	b	175dc <__assert_fail@plt+0x57d8>
   175d0:	ldrsb	r2, [r3]
   175d4:	cmp	r2, #47	; 0x2f
   175d8:	bne	175fc <__assert_fail@plt+0x57f8>
   175dc:	cmp	r3, #0
   175e0:	mov	r0, r3
   175e4:	bxeq	lr
   175e8:	ldrsb	r2, [r3], #1
   175ec:	cmp	r2, #47	; 0x2f
   175f0:	beq	175d0 <__assert_fail@plt+0x57cc>
   175f4:	cmp	r2, #0
   175f8:	beq	17638 <__assert_fail@plt+0x5834>
   175fc:	mov	r3, #1
   17600:	str	r3, [r1]
   17604:	ldrsb	r3, [r0, #1]
   17608:	add	r2, r0, #1
   1760c:	cmp	r3, #47	; 0x2f
   17610:	cmpne	r3, #0
   17614:	bxeq	lr
   17618:	rsb	r3, r0, #1
   1761c:	add	ip, r2, r3
   17620:	str	ip, [r1]
   17624:	ldrsb	ip, [r2, #1]!
   17628:	cmp	ip, #0
   1762c:	cmpne	ip, #47	; 0x2f
   17630:	bne	1761c <__assert_fail@plt+0x5818>
   17634:	bx	lr
   17638:	mov	r0, r2
   1763c:	bx	lr
   17640:	push	{r4, r5, r6, r7, r8, lr}
   17644:	mov	r7, r1
   17648:	ldrsb	r1, [r0]
   1764c:	cmp	r1, #0
   17650:	movne	r5, r0
   17654:	movne	r4, #0
   17658:	beq	176c4 <__assert_fail@plt+0x58c0>
   1765c:	cmp	r1, #92	; 0x5c
   17660:	addne	r6, r5, r4
   17664:	beq	17694 <__assert_fail@plt+0x5890>
   17668:	mov	r0, r7
   1766c:	bl	11bc4 <strchr@plt>
   17670:	cmp	r0, #0
   17674:	bne	176bc <__assert_fail@plt+0x58b8>
   17678:	ldrsb	r1, [r6, #1]!
   1767c:	add	r4, r4, #1
   17680:	mov	r0, r4
   17684:	cmp	r1, #0
   17688:	popeq	{r4, r5, r6, r7, r8, pc}
   1768c:	cmp	r1, #92	; 0x5c
   17690:	bne	17668 <__assert_fail@plt+0x5864>
   17694:	add	r3, r5, r4
   17698:	ldrsb	r3, [r3, #1]
   1769c:	cmp	r3, #0
   176a0:	beq	176bc <__assert_fail@plt+0x58b8>
   176a4:	add	r4, r4, #2
   176a8:	mov	r0, r4
   176ac:	ldrsb	r1, [r5, r4]
   176b0:	cmp	r1, #0
   176b4:	bne	1765c <__assert_fail@plt+0x5858>
   176b8:	pop	{r4, r5, r6, r7, r8, pc}
   176bc:	mov	r0, r4
   176c0:	pop	{r4, r5, r6, r7, r8, pc}
   176c4:	mov	r0, r1
   176c8:	pop	{r4, r5, r6, r7, r8, pc}
   176cc:	ldr	ip, [pc, #244]	; 177c8 <__assert_fail@plt+0x59c4>
   176d0:	push	{r4, r5, r6, r7, r8, r9, lr}
   176d4:	add	ip, pc, ip
   176d8:	ldr	lr, [pc, #236]	; 177cc <__assert_fail@plt+0x59c8>
   176dc:	sub	sp, sp, #12
   176e0:	mov	r5, #0
   176e4:	ldr	r7, [ip, lr]
   176e8:	mov	r4, r0
   176ec:	mov	r8, r1
   176f0:	ldr	r3, [r7]
   176f4:	mov	r0, ip
   176f8:	mov	r9, r2
   176fc:	str	r5, [sp]
   17700:	str	r3, [sp, #4]
   17704:	bl	11be8 <__errno_location@plt>
   17708:	cmp	r4, r5
   1770c:	str	r5, [r0]
   17710:	beq	17720 <__assert_fail@plt+0x591c>
   17714:	ldrsb	r3, [r4]
   17718:	cmp	r3, r5
   1771c:	bne	17740 <__assert_fail@plt+0x593c>
   17720:	ldr	r1, [pc, #168]	; 177d0 <__assert_fail@plt+0x59cc>
   17724:	mov	r3, r4
   17728:	add	r1, pc, r1
   1772c:	mov	r2, r8
   17730:	ldr	r0, [r1]
   17734:	ldr	r1, [pc, #152]	; 177d4 <__assert_fail@plt+0x59d0>
   17738:	add	r1, pc, r1
   1773c:	bl	11ce4 <errx@plt>
   17740:	mov	r6, r0
   17744:	mov	r2, r9
   17748:	mov	r3, r5
   1774c:	mov	r1, sp
   17750:	mov	r0, r4
   17754:	bl	119e4 <__strtoull_internal@plt>
   17758:	ldr	r2, [r6]
   1775c:	cmp	r2, r5
   17760:	bne	1779c <__assert_fail@plt+0x5998>
   17764:	ldr	r3, [sp]
   17768:	cmp	r3, r4
   1776c:	beq	17720 <__assert_fail@plt+0x591c>
   17770:	cmp	r3, r5
   17774:	beq	17784 <__assert_fail@plt+0x5980>
   17778:	ldrsb	r3, [r3]
   1777c:	cmp	r3, r5
   17780:	bne	17720 <__assert_fail@plt+0x591c>
   17784:	ldr	r2, [sp, #4]
   17788:	ldr	r3, [r7]
   1778c:	cmp	r2, r3
   17790:	bne	177c4 <__assert_fail@plt+0x59c0>
   17794:	add	sp, sp, #12
   17798:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1779c:	ldr	r3, [pc, #52]	; 177d8 <__assert_fail@plt+0x59d4>
   177a0:	cmp	r2, #34	; 0x22
   177a4:	add	r3, pc, r3
   177a8:	ldr	r0, [r3]
   177ac:	bne	17720 <__assert_fail@plt+0x591c>
   177b0:	ldr	r1, [pc, #36]	; 177dc <__assert_fail@plt+0x59d8>
   177b4:	mov	r3, r4
   177b8:	mov	r2, r8
   177bc:	add	r1, pc, r1
   177c0:	bl	11a5c <err@plt>
   177c4:	bl	11a2c <__stack_chk_fail@plt>
   177c8:	andeq	r8, r1, r0, asr #14
   177cc:	ldrdeq	r0, [r0], -r8
   177d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   177d4:	andeq	r7, r0, r4, lsl r6
   177d8:	andeq	r8, r1, ip, asr r8
   177dc:	muleq	r0, r0, r5
   177e0:	push	{r4, lr}
   177e4:	mov	r5, r0
   177e8:	mov	r4, r1
   177ec:	bl	11be8 <__errno_location@plt>
   177f0:	ldr	ip, [pc, #32]	; 17818 <__assert_fail@plt+0x5a14>
   177f4:	ldr	r1, [pc, #32]	; 1781c <__assert_fail@plt+0x5a18>
   177f8:	add	ip, pc, ip
   177fc:	mov	lr, #34	; 0x22
   17800:	mov	r3, r5
   17804:	mov	r2, r4
   17808:	add	r1, pc, r1
   1780c:	str	lr, [r0]
   17810:	ldr	r0, [ip]
   17814:	bl	11a5c <err@plt>
   17818:	andeq	r8, r1, r8, lsl #16
   1781c:	andeq	r7, r0, r4, asr #10
   17820:	push	{r4, r5, r6, lr}
   17824:	mov	r4, r0
   17828:	mov	r5, r1
   1782c:	bl	176cc <__assert_fail@plt+0x58c8>
   17830:	mov	r3, #0
   17834:	mvn	r2, #0
   17838:	cmp	r1, r3
   1783c:	cmpeq	r0, r2
   17840:	popls	{r4, r5, r6, pc}
   17844:	mov	r1, r5
   17848:	mov	r0, r4
   1784c:	bl	177e0 <__assert_fail@plt+0x59dc>
   17850:	ldr	r3, [pc, #8]	; 17860 <__assert_fail@plt+0x5a5c>
   17854:	add	r3, pc, r3
   17858:	str	r0, [r3]
   1785c:	bx	lr
   17860:	andeq	r8, r1, ip, lsr #15
   17864:	ldr	r3, [pc, #1648]	; 17edc <__assert_fail@plt+0x60d8>
   17868:	ldr	ip, [pc, #1648]	; 17ee0 <__assert_fail@plt+0x60dc>
   1786c:	add	r3, pc, r3
   17870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17874:	mov	r5, r1
   17878:	ldr	r1, [r3, ip]
   1787c:	sub	sp, sp, #52	; 0x34
   17880:	mov	ip, r1
   17884:	mov	r8, r0
   17888:	str	r1, [sp, #24]
   1788c:	mov	r0, #0
   17890:	mov	r1, #0
   17894:	ldr	r3, [ip]
   17898:	strd	r0, [r5]
   1789c:	mov	r9, r2
   178a0:	str	r3, [sp, #44]	; 0x2c
   178a4:	bl	11be8 <__errno_location@plt>
   178a8:	cmp	r8, #0
   178ac:	mov	r4, r0
   178b0:	beq	17a90 <__assert_fail@plt+0x5c8c>
   178b4:	ldrsb	fp, [r8]
   178b8:	cmp	fp, #0
   178bc:	beq	17a90 <__assert_fail@plt+0x5c8c>
   178c0:	bl	11b7c <__ctype_b_loc@plt>
   178c4:	mov	r2, r8
   178c8:	ldr	r1, [r0]
   178cc:	b	178d4 <__assert_fail@plt+0x5ad0>
   178d0:	ldrsb	fp, [r2, #1]!
   178d4:	uxtb	r3, fp
   178d8:	lsl	r3, r3, #1
   178dc:	ldrh	ip, [r1, r3]
   178e0:	ands	ip, ip, #8192	; 0x2000
   178e4:	bne	178d0 <__assert_fail@plt+0x5acc>
   178e8:	cmp	fp, #45	; 0x2d
   178ec:	beq	17a90 <__assert_fail@plt+0x5c8c>
   178f0:	add	fp, sp, #40	; 0x28
   178f4:	mov	r3, ip
   178f8:	mov	r2, ip
   178fc:	str	ip, [r4]
   17900:	mov	r1, fp
   17904:	mov	r0, r8
   17908:	str	ip, [sp, #40]	; 0x28
   1790c:	bl	119e4 <__strtoull_internal@plt>
   17910:	ldr	sl, [sp, #40]	; 0x28
   17914:	cmp	sl, r8
   17918:	mov	r2, r0
   1791c:	mov	r3, r1
   17920:	ldr	r0, [r4]
   17924:	strd	r2, [sp, #16]
   17928:	beq	17c10 <__assert_fail@plt+0x5e0c>
   1792c:	cmp	r0, #0
   17930:	bne	17ab8 <__assert_fail@plt+0x5cb4>
   17934:	cmp	sl, #0
   17938:	beq	17c44 <__assert_fail@plt+0x5e40>
   1793c:	ldrsb	r0, [sl]
   17940:	cmp	r0, #0
   17944:	beq	17c38 <__assert_fail@plt+0x5e34>
   17948:	mov	r8, #0
   1794c:	mov	r2, #0
   17950:	mov	r3, #0
   17954:	str	r9, [sp, #32]
   17958:	mov	r6, fp
   1795c:	mov	r9, sl
   17960:	mov	r7, r8
   17964:	mov	sl, r2
   17968:	mov	fp, r3
   1796c:	str	r5, [sp, #28]
   17970:	ldrsb	r2, [r9, #1]
   17974:	cmp	r2, #105	; 0x69
   17978:	beq	17afc <__assert_fail@plt+0x5cf8>
   1797c:	bic	r1, r2, #32
   17980:	cmp	r1, #66	; 0x42
   17984:	bne	17c1c <__assert_fail@plt+0x5e18>
   17988:	ldrsb	r2, [r9, #2]
   1798c:	cmp	r2, #0
   17990:	beq	17e00 <__assert_fail@plt+0x5ffc>
   17994:	bl	11d2c <localeconv@plt>
   17998:	cmp	r0, #0
   1799c:	beq	17a90 <__assert_fail@plt+0x5c8c>
   179a0:	ldr	r2, [r0]
   179a4:	cmp	r2, #0
   179a8:	beq	17a90 <__assert_fail@plt+0x5c8c>
   179ac:	mov	r0, r2
   179b0:	str	r2, [sp]
   179b4:	bl	11bb8 <strlen@plt>
   179b8:	orrs	r3, sl, fp
   179bc:	mov	r5, r0
   179c0:	bne	17a90 <__assert_fail@plt+0x5c8c>
   179c4:	ldrsb	r1, [r9]
   179c8:	cmp	r1, #0
   179cc:	beq	17a90 <__assert_fail@plt+0x5c8c>
   179d0:	ldr	r2, [sp]
   179d4:	mov	r1, r9
   179d8:	mov	r0, r2
   179dc:	mov	r2, r5
   179e0:	bl	11db0 <strncmp@plt>
   179e4:	cmp	r0, #0
   179e8:	bne	17a90 <__assert_fail@plt+0x5c8c>
   179ec:	ldrsb	r2, [r9, r5]
   179f0:	add	r5, r9, r5
   179f4:	cmp	r2, #48	; 0x30
   179f8:	bne	17a18 <__assert_fail@plt+0x5c14>
   179fc:	add	r8, r8, #1
   17a00:	sub	r1, r8, r5
   17a04:	mov	r3, r5
   17a08:	add	r8, r3, r1
   17a0c:	ldrsb	r2, [r3, #1]!
   17a10:	cmp	r2, #48	; 0x30
   17a14:	beq	17a08 <__assert_fail@plt+0x5c04>
   17a18:	mov	r3, #0
   17a1c:	str	r7, [r4]
   17a20:	mov	r2, r3
   17a24:	mov	r1, r6
   17a28:	mov	r0, r5
   17a2c:	str	r7, [sp, #40]	; 0x28
   17a30:	bl	119e4 <__strtoull_internal@plt>
   17a34:	ldr	r9, [sp, #40]	; 0x28
   17a38:	cmp	r9, r5
   17a3c:	mov	sl, r0
   17a40:	mov	fp, r1
   17a44:	beq	17c0c <__assert_fail@plt+0x5e08>
   17a48:	ldr	ip, [r4]
   17a4c:	cmp	ip, #0
   17a50:	beq	17ae8 <__assert_fail@plt+0x5ce4>
   17a54:	subs	r3, r0, #1
   17a58:	str	r3, [sp, #8]
   17a5c:	sbc	r3, r1, #0
   17a60:	str	r3, [sp, #12]
   17a64:	ldrd	r2, [sp, #8]
   17a68:	mvn	r1, #0
   17a6c:	mvn	r0, #2
   17a70:	cmp	r3, r1
   17a74:	cmpeq	r2, r0
   17a78:	bhi	17e3c <__assert_fail@plt+0x6038>
   17a7c:	cmp	r9, #0
   17a80:	beq	17a90 <__assert_fail@plt+0x5c8c>
   17a84:	ldrsb	r2, [r9]
   17a88:	cmp	r2, #0
   17a8c:	bne	17970 <__assert_fail@plt+0x5b6c>
   17a90:	mov	r3, #22
   17a94:	mvn	r0, #21
   17a98:	str	r3, [r4]
   17a9c:	ldr	r3, [sp, #24]
   17aa0:	ldr	r2, [sp, #44]	; 0x2c
   17aa4:	ldr	r3, [r3]
   17aa8:	cmp	r2, r3
   17aac:	bne	17ed8 <__assert_fail@plt+0x60d4>
   17ab0:	add	sp, sp, #52	; 0x34
   17ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ab8:	subs	r6, r2, #1
   17abc:	sbc	r7, r3, #0
   17ac0:	mvn	r3, #0
   17ac4:	mvn	r2, #2
   17ac8:	cmp	r7, r3
   17acc:	cmpeq	r6, r2
   17ad0:	bls	17934 <__assert_fail@plt+0x5b30>
   17ad4:	rsb	r0, r0, #0
   17ad8:	cmp	r0, #0
   17adc:	bge	17a9c <__assert_fail@plt+0x5c98>
   17ae0:	rsb	r3, r0, #0
   17ae4:	b	17a98 <__assert_fail@plt+0x5c94>
   17ae8:	orrs	r3, sl, fp
   17aec:	bne	17a7c <__assert_fail@plt+0x5c78>
   17af0:	ldrsb	r2, [r9, #1]
   17af4:	cmp	r2, #105	; 0x69
   17af8:	bne	1797c <__assert_fail@plt+0x5b78>
   17afc:	ldrsb	r2, [r9, #2]
   17b00:	bic	r2, r2, #32
   17b04:	cmp	r2, #66	; 0x42
   17b08:	bne	17994 <__assert_fail@plt+0x5b90>
   17b0c:	ldrsb	r2, [r9, #3]
   17b10:	cmp	r2, #0
   17b14:	bne	17994 <__assert_fail@plt+0x5b90>
   17b18:	strd	sl, [sp]
   17b1c:	mov	sl, r9
   17b20:	ldr	r9, [sp, #32]
   17b24:	mov	r3, #1024	; 0x400
   17b28:	ldr	r5, [sp, #28]
   17b2c:	str	r3, [sp, #28]
   17b30:	ldrsb	r7, [sl]
   17b34:	ldr	r6, [pc, #936]	; 17ee4 <__assert_fail@plt+0x60e0>
   17b38:	add	r6, pc, r6
   17b3c:	mov	r1, r7
   17b40:	mov	r0, r6
   17b44:	bl	11bc4 <strchr@plt>
   17b48:	cmp	r0, #0
   17b4c:	beq	17e1c <__assert_fail@plt+0x6018>
   17b50:	sub	ip, r0, r6
   17b54:	add	fp, ip, #1
   17b58:	cmp	fp, #0
   17b5c:	beq	17c28 <__assert_fail@plt+0x5e24>
   17b60:	ldr	r3, [sp, #20]
   17b64:	ldr	r6, [sp, #28]
   17b68:	cmp	r3, #0
   17b6c:	mov	r0, #0
   17b70:	asr	r7, r6, #31
   17b74:	mov	r1, #0
   17b78:	bne	17e78 <__assert_fail@plt+0x6074>
   17b7c:	orrs	r3, r0, r1
   17b80:	bne	17c6c <__assert_fail@plt+0x5e68>
   17b84:	str	fp, [sp, #32]
   17b88:	sub	ip, ip, #1
   17b8c:	str	r8, [sp, #36]	; 0x24
   17b90:	mov	fp, r4
   17b94:	ldrd	r0, [sp, #16]
   17b98:	mov	lr, r5
   17b9c:	mov	sl, r9
   17ba0:	b	17bb0 <__assert_fail@plt+0x5dac>
   17ba4:	orrs	r3, r4, r5
   17ba8:	sub	ip, ip, #1
   17bac:	bne	17c54 <__assert_fail@plt+0x5e50>
   17bb0:	mul	r2, r0, r7
   17bb4:	cmn	ip, #1
   17bb8:	mla	r2, r6, r1, r2
   17bbc:	umull	r0, r1, r0, r6
   17bc0:	add	r2, r2, r1
   17bc4:	mov	r1, r2
   17bc8:	beq	17de0 <__assert_fail@plt+0x5fdc>
   17bcc:	cmp	r2, #0
   17bd0:	mov	r4, #0
   17bd4:	mov	r5, #0
   17bd8:	beq	17ba4 <__assert_fail@plt+0x5da0>
   17bdc:	umull	r2, r3, r6, r2
   17be0:	umull	r8, r9, r0, r6
   17be4:	strd	r2, [sp, #8]
   17be8:	mov	r8, r9
   17bec:	ldr	r3, [sp, #12]
   17bf0:	adds	r8, r2, r8
   17bf4:	mov	r2, #0
   17bf8:	adc	r3, r3, r2
   17bfc:	cmp	r3, r2
   17c00:	movne	r4, #1
   17c04:	movne	r5, #0
   17c08:	b	17ba4 <__assert_fail@plt+0x5da0>
   17c0c:	ldr	r0, [r4]
   17c10:	cmp	r0, #0
   17c14:	beq	17a90 <__assert_fail@plt+0x5c8c>
   17c18:	b	17ad4 <__assert_fail@plt+0x5cd0>
   17c1c:	cmp	r2, #0
   17c20:	bne	17994 <__assert_fail@plt+0x5b90>
   17c24:	b	17b18 <__assert_fail@plt+0x5d14>
   17c28:	cmp	r9, #0
   17c2c:	movne	r0, fp
   17c30:	bne	17c78 <__assert_fail@plt+0x5e74>
   17c34:	mov	r0, r9
   17c38:	ldrd	r2, [sp, #16]
   17c3c:	strd	r2, [r5]
   17c40:	b	17a9c <__assert_fail@plt+0x5c98>
   17c44:	ldrd	r2, [sp, #16]
   17c48:	mov	r0, sl
   17c4c:	strd	r2, [r5]
   17c50:	b	17a9c <__assert_fail@plt+0x5c98>
   17c54:	mov	r4, fp
   17c58:	ldr	r8, [sp, #36]	; 0x24
   17c5c:	ldr	fp, [sp, #32]
   17c60:	mov	r5, lr
   17c64:	mov	r9, sl
   17c68:	strd	r0, [sp, #16]
   17c6c:	mvn	r0, #33	; 0x21
   17c70:	cmp	r9, #0
   17c74:	beq	17c7c <__assert_fail@plt+0x5e78>
   17c78:	str	fp, [r9]
   17c7c:	ldrd	r2, [sp]
   17c80:	mov	r1, r2
   17c84:	orrs	r3, r1, r3
   17c88:	movne	r3, #1
   17c8c:	moveq	r3, #0
   17c90:	cmp	fp, #0
   17c94:	moveq	r3, #0
   17c98:	cmp	r3, #0
   17c9c:	beq	17dd4 <__assert_fail@plt+0x5fd0>
   17ca0:	ldr	r3, [pc, #576]	; 17ee8 <__assert_fail@plt+0x60e4>
   17ca4:	ldr	r1, [pc, #576]	; 17eec <__assert_fail@plt+0x60e8>
   17ca8:	umull	ip, r3, r3, r8
   17cac:	smull	ip, r1, r1, r8
   17cb0:	lsr	r3, r3, #1
   17cb4:	rsb	r1, r1, r8, asr #31
   17cb8:	add	r3, r3, r3, lsl #1
   17cbc:	add	r1, r1, fp
   17cc0:	subs	r3, r8, r3
   17cc4:	sub	r6, r1, #1
   17cc8:	bne	17e44 <__assert_fail@plt+0x6040>
   17ccc:	ldrd	r8, [sp]
   17cd0:	adds	r3, r8, r8
   17cd4:	adc	r2, r9, r9
   17cd8:	adds	r3, r3, r8
   17cdc:	adc	r2, r2, r9
   17ce0:	lsl	ip, r3, #5
   17ce4:	lsl	lr, r2, #5
   17ce8:	orr	lr, lr, r3, lsr #27
   17cec:	adds	r3, r3, ip
   17cf0:	adc	r2, r2, lr
   17cf4:	adds	r3, r8, r3
   17cf8:	str	r3, [sp]
   17cfc:	ldr	r3, [sp, #4]
   17d00:	adc	r3, r3, r2
   17d04:	str	r3, [sp, #4]
   17d08:	cmp	r6, #0
   17d0c:	blt	17a90 <__assert_fail@plt+0x5c8c>
   17d10:	beq	17db8 <__assert_fail@plt+0x5fb4>
   17d14:	ldr	r3, [sp, #4]
   17d18:	ldr	r8, [sp, #28]
   17d1c:	cmp	r3, #0
   17d20:	mov	r6, #0
   17d24:	asr	r9, r8, #31
   17d28:	mov	r7, #0
   17d2c:	bne	17eac <__assert_fail@plt+0x60a8>
   17d30:	orrs	r3, r6, r7
   17d34:	bne	17db8 <__assert_fail@plt+0x5fb4>
   17d38:	sub	r1, r1, #3
   17d3c:	ldrd	r2, [sp]
   17d40:	mov	lr, r4
   17d44:	str	r5, [sp, #8]
   17d48:	b	17d58 <__assert_fail@plt+0x5f54>
   17d4c:	orrs	ip, r6, r7
   17d50:	sub	r1, r1, #1
   17d54:	bne	17dac <__assert_fail@plt+0x5fa8>
   17d58:	mul	ip, r2, r9
   17d5c:	cmn	r1, #1
   17d60:	mla	ip, r8, r3, ip
   17d64:	umull	r2, r3, r2, r8
   17d68:	add	ip, ip, r3
   17d6c:	mov	r3, ip
   17d70:	beq	17dac <__assert_fail@plt+0x5fa8>
   17d74:	cmp	ip, #0
   17d78:	mov	r6, #0
   17d7c:	mov	r7, #0
   17d80:	beq	17d4c <__assert_fail@plt+0x5f48>
   17d84:	umull	sl, fp, r2, r8
   17d88:	umull	r4, r5, r8, ip
   17d8c:	mov	ip, fp
   17d90:	adds	ip, r4, ip
   17d94:	mov	ip, #0
   17d98:	adc	ip, r5, ip
   17d9c:	cmp	ip, #0
   17da0:	movne	r6, #1
   17da4:	movne	r7, #0
   17da8:	b	17d4c <__assert_fail@plt+0x5f48>
   17dac:	ldr	r5, [sp, #8]
   17db0:	mov	r4, lr
   17db4:	strd	r2, [sp]
   17db8:	ldrd	r2, [sp]
   17dbc:	ldr	r1, [sp, #16]
   17dc0:	adds	r1, r1, r2
   17dc4:	str	r1, [sp, #16]
   17dc8:	ldr	r1, [sp, #20]
   17dcc:	adc	r3, r1, r3
   17dd0:	str	r3, [sp, #20]
   17dd4:	ldrd	r2, [sp, #16]
   17dd8:	strd	r2, [r5]
   17ddc:	b	17ad8 <__assert_fail@plt+0x5cd4>
   17de0:	mov	r4, fp
   17de4:	strd	r0, [sp, #16]
   17de8:	ldr	r8, [sp, #36]	; 0x24
   17dec:	ldr	fp, [sp, #32]
   17df0:	mov	r5, lr
   17df4:	mov	r9, sl
   17df8:	mov	r0, #0
   17dfc:	b	17c70 <__assert_fail@plt+0x5e6c>
   17e00:	mov	r3, #1000	; 0x3e8
   17e04:	strd	sl, [sp]
   17e08:	ldr	r5, [sp, #28]
   17e0c:	mov	sl, r9
   17e10:	str	r3, [sp, #28]
   17e14:	ldr	r9, [sp, #32]
   17e18:	b	17b30 <__assert_fail@plt+0x5d2c>
   17e1c:	ldr	r6, [pc, #204]	; 17ef0 <__assert_fail@plt+0x60ec>
   17e20:	mov	r1, r7
   17e24:	add	r6, pc, r6
   17e28:	mov	r0, r6
   17e2c:	bl	11bc4 <strchr@plt>
   17e30:	cmp	r0, #0
   17e34:	bne	17b50 <__assert_fail@plt+0x5d4c>
   17e38:	b	17a90 <__assert_fail@plt+0x5c8c>
   17e3c:	mov	r0, ip
   17e40:	b	17ad4 <__assert_fail@plt+0x5cd0>
   17e44:	cmp	r3, #1
   17e48:	bne	17d08 <__assert_fail@plt+0x5f04>
   17e4c:	ldrd	r8, [sp]
   17e50:	lsl	r2, r9, #2
   17e54:	lsl	r3, r8, #2
   17e58:	adds	r3, r3, r8
   17e5c:	orr	r2, r2, r8, lsr #30
   17e60:	adc	r2, r2, r9
   17e64:	adds	r3, r3, r3
   17e68:	str	r3, [sp]
   17e6c:	adc	r3, r2, r2
   17e70:	str	r3, [sp, #4]
   17e74:	b	17d08 <__assert_fail@plt+0x5f04>
   17e78:	ldr	lr, [sp, #28]
   17e7c:	ldr	r3, [sp, #16]
   17e80:	ldr	sl, [sp, #20]
   17e84:	umull	r2, r3, r3, lr
   17e88:	str	r3, [sp, #8]
   17e8c:	mov	r3, #0
   17e90:	str	r3, [sp, #12]
   17e94:	ldrd	r2, [sp, #8]
   17e98:	umlal	r2, r3, sl, lr
   17e9c:	cmp	r3, #0
   17ea0:	movne	r0, #1
   17ea4:	movne	r1, #0
   17ea8:	b	17b7c <__assert_fail@plt+0x5d78>
   17eac:	ldr	r3, [sp]
   17eb0:	ldr	ip, [sp, #28]
   17eb4:	ldr	lr, [sp, #4]
   17eb8:	umull	sl, fp, r3, ip
   17ebc:	mov	r3, #0
   17ec0:	mov	r2, fp
   17ec4:	umlal	r2, r3, lr, ip
   17ec8:	cmp	r3, #0
   17ecc:	movne	r6, #1
   17ed0:	movne	r7, #0
   17ed4:	b	17d30 <__assert_fail@plt+0x5f2c>
   17ed8:	bl	11a2c <__stack_chk_fail@plt>
   17edc:	andeq	r8, r1, r8, lsr #11
   17ee0:	ldrdeq	r0, [r0], -r8
   17ee4:	andeq	r7, r0, r0, lsr #4
   17ee8:	bge	feac299c <optarg@@GLIBC_2.4+0xfea92974>
   17eec:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   17ef0:	andeq	r6, r0, r0, asr #30
   17ef4:	mov	r2, #0
   17ef8:	b	17864 <__assert_fail@plt+0x5a60>
   17efc:	push	{r4, r5, r6, lr}
   17f00:	subs	r5, r0, #0
   17f04:	mov	r6, r1
   17f08:	beq	17f74 <__assert_fail@plt+0x6170>
   17f0c:	ldrsb	r4, [r5]
   17f10:	cmp	r4, #0
   17f14:	beq	17f88 <__assert_fail@plt+0x6184>
   17f18:	bl	11b7c <__ctype_b_loc@plt>
   17f1c:	mov	r3, r5
   17f20:	ldr	r0, [r0]
   17f24:	b	17f3c <__assert_fail@plt+0x6138>
   17f28:	adds	r3, r3, #1
   17f2c:	beq	17f74 <__assert_fail@plt+0x6170>
   17f30:	ldrsb	r4, [r3]
   17f34:	cmp	r4, #0
   17f38:	beq	17f50 <__assert_fail@plt+0x614c>
   17f3c:	uxtb	r4, r4
   17f40:	lsl	r4, r4, #1
   17f44:	ldrh	r2, [r0, r4]
   17f48:	tst	r2, #2048	; 0x800
   17f4c:	bne	17f28 <__assert_fail@plt+0x6124>
   17f50:	cmp	r6, #0
   17f54:	strne	r3, [r6]
   17f58:	cmp	r5, r3
   17f5c:	bcs	17f80 <__assert_fail@plt+0x617c>
   17f60:	ldrsb	r3, [r3]
   17f64:	cmp	r3, #0
   17f68:	bne	17f80 <__assert_fail@plt+0x617c>
   17f6c:	mov	r0, #1
   17f70:	pop	{r4, r5, r6, pc}
   17f74:	cmp	r6, #0
   17f78:	movne	r3, #0
   17f7c:	strne	r3, [r6]
   17f80:	mov	r0, #0
   17f84:	pop	{r4, r5, r6, pc}
   17f88:	cmp	r1, #0
   17f8c:	strne	r5, [r1]
   17f90:	b	17f80 <__assert_fail@plt+0x617c>
   17f94:	push	{r4, r5, r6, lr}
   17f98:	subs	r5, r0, #0
   17f9c:	mov	r6, r1
   17fa0:	beq	1800c <__assert_fail@plt+0x6208>
   17fa4:	ldrsb	r4, [r5]
   17fa8:	cmp	r4, #0
   17fac:	beq	18020 <__assert_fail@plt+0x621c>
   17fb0:	bl	11b7c <__ctype_b_loc@plt>
   17fb4:	mov	r3, r5
   17fb8:	ldr	r0, [r0]
   17fbc:	b	17fd4 <__assert_fail@plt+0x61d0>
   17fc0:	adds	r3, r3, #1
   17fc4:	beq	1800c <__assert_fail@plt+0x6208>
   17fc8:	ldrsb	r4, [r3]
   17fcc:	cmp	r4, #0
   17fd0:	beq	17fe8 <__assert_fail@plt+0x61e4>
   17fd4:	uxtb	r4, r4
   17fd8:	lsl	r4, r4, #1
   17fdc:	ldrh	r2, [r0, r4]
   17fe0:	tst	r2, #4096	; 0x1000
   17fe4:	bne	17fc0 <__assert_fail@plt+0x61bc>
   17fe8:	cmp	r6, #0
   17fec:	strne	r3, [r6]
   17ff0:	cmp	r5, r3
   17ff4:	bcs	18018 <__assert_fail@plt+0x6214>
   17ff8:	ldrsb	r3, [r3]
   17ffc:	cmp	r3, #0
   18000:	bne	18018 <__assert_fail@plt+0x6214>
   18004:	mov	r0, #1
   18008:	pop	{r4, r5, r6, pc}
   1800c:	cmp	r6, #0
   18010:	movne	r3, #0
   18014:	strne	r3, [r6]
   18018:	mov	r0, #0
   1801c:	pop	{r4, r5, r6, pc}
   18020:	cmp	r1, #0
   18024:	strne	r5, [r1]
   18028:	b	18018 <__assert_fail@plt+0x6214>
   1802c:	push	{r1, r2, r3}
   18030:	ldr	r3, [pc, #188]	; 180f4 <__assert_fail@plt+0x62f0>
   18034:	ldr	r2, [pc, #188]	; 180f8 <__assert_fail@plt+0x62f4>
   18038:	add	r3, pc, r3
   1803c:	push	{r4, r5, r6, r7, r8, lr}
   18040:	sub	sp, sp, #12
   18044:	ldr	r7, [r3, r2]
   18048:	ldr	r8, [sp, #36]	; 0x24
   1804c:	mov	r6, r0
   18050:	ldr	r3, [r7]
   18054:	add	r4, sp, #48	; 0x30
   18058:	str	r3, [sp, #4]
   1805c:	b	18078 <__assert_fail@plt+0x6274>
   18060:	mov	r1, r5
   18064:	mov	r0, r6
   18068:	bl	118f4 <strcmp@plt>
   1806c:	add	r4, r4, #8
   18070:	cmp	r0, #0
   18074:	beq	180b0 <__assert_fail@plt+0x62ac>
   18078:	ldr	r1, [r4, #-8]
   1807c:	sub	r3, r4, #4
   18080:	cmp	r1, #0
   18084:	str	r3, [sp]
   18088:	beq	180d0 <__assert_fail@plt+0x62cc>
   1808c:	ldr	r5, [r4, #-4]
   18090:	str	r4, [sp]
   18094:	cmp	r5, #0
   18098:	beq	180d0 <__assert_fail@plt+0x62cc>
   1809c:	mov	r0, r6
   180a0:	bl	118f4 <strcmp@plt>
   180a4:	cmp	r0, #0
   180a8:	bne	18060 <__assert_fail@plt+0x625c>
   180ac:	mov	r0, #1
   180b0:	ldr	r2, [sp, #4]
   180b4:	ldr	r3, [r7]
   180b8:	cmp	r2, r3
   180bc:	bne	180f0 <__assert_fail@plt+0x62ec>
   180c0:	add	sp, sp, #12
   180c4:	pop	{r4, r5, r6, r7, r8, lr}
   180c8:	add	sp, sp, #12
   180cc:	bx	lr
   180d0:	ldr	r1, [pc, #36]	; 180fc <__assert_fail@plt+0x62f8>
   180d4:	mov	r3, r6
   180d8:	add	r1, pc, r1
   180dc:	mov	r2, r8
   180e0:	ldr	r0, [r1]
   180e4:	ldr	r1, [pc, #20]	; 18100 <__assert_fail@plt+0x62fc>
   180e8:	add	r1, pc, r1
   180ec:	bl	11ce4 <errx@plt>
   180f0:	bl	11a2c <__stack_chk_fail@plt>
   180f4:	ldrdeq	r7, [r1], -ip
   180f8:	ldrdeq	r0, [r0], -r8
   180fc:	andeq	r7, r1, r8, lsr #30
   18100:	andeq	r6, r0, r4, ror #24
   18104:	cmp	r1, #0
   18108:	beq	18154 <__assert_fail@plt+0x6350>
   1810c:	ldrsb	r3, [r0]
   18110:	cmp	r3, #0
   18114:	beq	18154 <__assert_fail@plt+0x6350>
   18118:	sxtb	r2, r2
   1811c:	cmp	r3, r2
   18120:	bxeq	lr
   18124:	add	r1, r0, r1
   18128:	add	r3, r0, #1
   1812c:	b	18148 <__assert_fail@plt+0x6344>
   18130:	ldrsb	ip, [r3]
   18134:	add	r3, r3, #1
   18138:	cmp	ip, #0
   1813c:	beq	18154 <__assert_fail@plt+0x6350>
   18140:	cmp	ip, r2
   18144:	bxeq	lr
   18148:	cmp	r3, r1
   1814c:	mov	r0, r3
   18150:	bne	18130 <__assert_fail@plt+0x632c>
   18154:	mov	r0, #0
   18158:	bx	lr
   1815c:	push	{r4, r5, r6, lr}
   18160:	mov	r2, #10
   18164:	mov	r4, r0
   18168:	mov	r5, r1
   1816c:	bl	17820 <__assert_fail@plt+0x5a1c>
   18170:	cmp	r0, #65536	; 0x10000
   18174:	bcs	18180 <__assert_fail@plt+0x637c>
   18178:	uxth	r0, r0
   1817c:	pop	{r4, r5, r6, pc}
   18180:	mov	r1, r5
   18184:	mov	r0, r4
   18188:	bl	177e0 <__assert_fail@plt+0x59dc>
   1818c:	push	{r4, r5, r6, lr}
   18190:	mov	r2, #16
   18194:	mov	r4, r0
   18198:	mov	r5, r1
   1819c:	bl	17820 <__assert_fail@plt+0x5a1c>
   181a0:	cmp	r0, #65536	; 0x10000
   181a4:	bcs	181b0 <__assert_fail@plt+0x63ac>
   181a8:	uxth	r0, r0
   181ac:	pop	{r4, r5, r6, pc}
   181b0:	mov	r1, r5
   181b4:	mov	r0, r4
   181b8:	bl	177e0 <__assert_fail@plt+0x59dc>
   181bc:	mov	r2, #10
   181c0:	b	17820 <__assert_fail@plt+0x5a1c>
   181c4:	mov	r2, #16
   181c8:	b	17820 <__assert_fail@plt+0x5a1c>
   181cc:	ldr	r2, [pc, #236]	; 182c0 <__assert_fail@plt+0x64bc>
   181d0:	ldr	ip, [pc, #236]	; 182c4 <__assert_fail@plt+0x64c0>
   181d4:	add	r2, pc, r2
   181d8:	push	{r4, r5, r6, r7, r8, lr}
   181dc:	sub	sp, sp, #8
   181e0:	ldr	r7, [r2, ip]
   181e4:	mov	r5, #0
   181e8:	mov	r4, r0
   181ec:	ldr	r3, [r7]
   181f0:	mov	r8, r1
   181f4:	str	r5, [sp]
   181f8:	str	r3, [sp, #4]
   181fc:	bl	11be8 <__errno_location@plt>
   18200:	cmp	r4, r5
   18204:	str	r5, [r0]
   18208:	beq	18218 <__assert_fail@plt+0x6414>
   1820c:	ldrsb	r3, [r4]
   18210:	cmp	r3, r5
   18214:	bne	18238 <__assert_fail@plt+0x6434>
   18218:	ldr	r1, [pc, #168]	; 182c8 <__assert_fail@plt+0x64c4>
   1821c:	mov	r3, r4
   18220:	add	r1, pc, r1
   18224:	mov	r2, r8
   18228:	ldr	r0, [r1]
   1822c:	ldr	r1, [pc, #152]	; 182cc <__assert_fail@plt+0x64c8>
   18230:	add	r1, pc, r1
   18234:	bl	11ce4 <errx@plt>
   18238:	mov	r6, r0
   1823c:	mov	r2, #10
   18240:	mov	r3, r5
   18244:	mov	r1, sp
   18248:	mov	r0, r4
   1824c:	bl	11d5c <__strtoll_internal@plt>
   18250:	ldr	r2, [r6]
   18254:	cmp	r2, r5
   18258:	bne	18294 <__assert_fail@plt+0x6490>
   1825c:	ldr	r3, [sp]
   18260:	cmp	r3, r4
   18264:	beq	18218 <__assert_fail@plt+0x6414>
   18268:	cmp	r3, r5
   1826c:	beq	1827c <__assert_fail@plt+0x6478>
   18270:	ldrsb	r3, [r3]
   18274:	cmp	r3, r5
   18278:	bne	18218 <__assert_fail@plt+0x6414>
   1827c:	ldr	r2, [sp, #4]
   18280:	ldr	r3, [r7]
   18284:	cmp	r2, r3
   18288:	bne	182bc <__assert_fail@plt+0x64b8>
   1828c:	add	sp, sp, #8
   18290:	pop	{r4, r5, r6, r7, r8, pc}
   18294:	ldr	r3, [pc, #52]	; 182d0 <__assert_fail@plt+0x64cc>
   18298:	cmp	r2, #34	; 0x22
   1829c:	add	r3, pc, r3
   182a0:	ldr	r0, [r3]
   182a4:	bne	18218 <__assert_fail@plt+0x6414>
   182a8:	ldr	r1, [pc, #36]	; 182d4 <__assert_fail@plt+0x64d0>
   182ac:	mov	r3, r4
   182b0:	mov	r2, r8
   182b4:	add	r1, pc, r1
   182b8:	bl	11a5c <err@plt>
   182bc:	bl	11a2c <__stack_chk_fail@plt>
   182c0:	andeq	r7, r1, r0, asr #24
   182c4:	ldrdeq	r0, [r0], -r8
   182c8:	andeq	r7, r1, r0, ror #27
   182cc:	andeq	r6, r0, ip, lsl fp
   182d0:	andeq	r7, r1, r4, ror #26
   182d4:	muleq	r0, r8, sl
   182d8:	push	{r4, r5, r6, r7, r8, lr}
   182dc:	mov	r7, r0
   182e0:	mov	r6, r1
   182e4:	bl	181cc <__assert_fail@plt+0x63c8>
   182e8:	mov	r3, #0
   182ec:	mvn	r2, #0
   182f0:	adds	r4, r0, #-2147483648	; 0x80000000
   182f4:	adc	r5, r1, #0
   182f8:	cmp	r5, r3
   182fc:	cmpeq	r4, r2
   18300:	popls	{r4, r5, r6, r7, r8, pc}
   18304:	bl	11be8 <__errno_location@plt>
   18308:	ldr	ip, [pc, #32]	; 18330 <__assert_fail@plt+0x652c>
   1830c:	ldr	r1, [pc, #32]	; 18334 <__assert_fail@plt+0x6530>
   18310:	add	ip, pc, ip
   18314:	mov	lr, #34	; 0x22
   18318:	mov	r3, r7
   1831c:	mov	r2, r6
   18320:	add	r1, pc, r1
   18324:	str	lr, [r0]
   18328:	ldr	r0, [ip]
   1832c:	bl	11a5c <err@plt>
   18330:	strdeq	r7, [r1], -r0
   18334:	andeq	r6, r0, ip, lsr #20
   18338:	push	{r4, r5, r6, lr}
   1833c:	mov	r5, r0
   18340:	mov	r4, r1
   18344:	bl	182d8 <__assert_fail@plt+0x64d4>
   18348:	add	r3, r0, #32768	; 0x8000
   1834c:	cmp	r3, #65536	; 0x10000
   18350:	bcs	1835c <__assert_fail@plt+0x6558>
   18354:	sxth	r0, r0
   18358:	pop	{r4, r5, r6, pc}
   1835c:	bl	11be8 <__errno_location@plt>
   18360:	ldr	ip, [pc, #32]	; 18388 <__assert_fail@plt+0x6584>
   18364:	ldr	r1, [pc, #32]	; 1838c <__assert_fail@plt+0x6588>
   18368:	add	ip, pc, ip
   1836c:	mov	lr, #34	; 0x22
   18370:	mov	r3, r5
   18374:	mov	r2, r4
   18378:	add	r1, pc, r1
   1837c:	str	lr, [r0]
   18380:	ldr	r0, [ip]
   18384:	bl	11a5c <err@plt>
   18388:	muleq	r1, r8, ip
   1838c:	ldrdeq	r6, [r0], -r4
   18390:	mov	r2, #10
   18394:	b	176cc <__assert_fail@plt+0x58c8>
   18398:	mov	r2, #16
   1839c:	b	176cc <__assert_fail@plt+0x58c8>
   183a0:	ldr	r2, [pc, #228]	; 1848c <__assert_fail@plt+0x6688>
   183a4:	ldr	r3, [pc, #228]	; 18490 <__assert_fail@plt+0x668c>
   183a8:	add	r2, pc, r2
   183ac:	push	{r4, r5, r6, r7, r8, lr}
   183b0:	sub	sp, sp, #8
   183b4:	ldr	r7, [r2, r3]
   183b8:	mov	r5, #0
   183bc:	mov	r4, r0
   183c0:	ldr	r3, [r7]
   183c4:	mov	r8, r1
   183c8:	str	r5, [sp]
   183cc:	str	r3, [sp, #4]
   183d0:	bl	11be8 <__errno_location@plt>
   183d4:	cmp	r4, r5
   183d8:	str	r5, [r0]
   183dc:	beq	183ec <__assert_fail@plt+0x65e8>
   183e0:	ldrsb	r3, [r4]
   183e4:	cmp	r3, r5
   183e8:	bne	1840c <__assert_fail@plt+0x6608>
   183ec:	ldr	r1, [pc, #160]	; 18494 <__assert_fail@plt+0x6690>
   183f0:	mov	r3, r4
   183f4:	add	r1, pc, r1
   183f8:	mov	r2, r8
   183fc:	ldr	r0, [r1]
   18400:	ldr	r1, [pc, #144]	; 18498 <__assert_fail@plt+0x6694>
   18404:	add	r1, pc, r1
   18408:	bl	11ce4 <errx@plt>
   1840c:	mov	r6, r0
   18410:	mov	r1, sp
   18414:	mov	r0, r4
   18418:	bl	11c84 <strtod@plt>
   1841c:	ldr	r2, [r6]
   18420:	cmp	r2, r5
   18424:	bne	18460 <__assert_fail@plt+0x665c>
   18428:	ldr	r3, [sp]
   1842c:	cmp	r3, r4
   18430:	beq	183ec <__assert_fail@plt+0x65e8>
   18434:	cmp	r3, r5
   18438:	beq	18448 <__assert_fail@plt+0x6644>
   1843c:	ldrsb	r3, [r3]
   18440:	cmp	r3, r5
   18444:	bne	183ec <__assert_fail@plt+0x65e8>
   18448:	ldr	r2, [sp, #4]
   1844c:	ldr	r3, [r7]
   18450:	cmp	r2, r3
   18454:	bne	18488 <__assert_fail@plt+0x6684>
   18458:	add	sp, sp, #8
   1845c:	pop	{r4, r5, r6, r7, r8, pc}
   18460:	ldr	r3, [pc, #52]	; 1849c <__assert_fail@plt+0x6698>
   18464:	cmp	r2, #34	; 0x22
   18468:	add	r3, pc, r3
   1846c:	ldr	r0, [r3]
   18470:	bne	183ec <__assert_fail@plt+0x65e8>
   18474:	ldr	r1, [pc, #36]	; 184a0 <__assert_fail@plt+0x669c>
   18478:	mov	r3, r4
   1847c:	mov	r2, r8
   18480:	add	r1, pc, r1
   18484:	bl	11a5c <err@plt>
   18488:	bl	11a2c <__stack_chk_fail@plt>
   1848c:	andeq	r7, r1, ip, ror #20
   18490:	ldrdeq	r0, [r0], -r8
   18494:	andeq	r7, r1, ip, lsl #24
   18498:	andeq	r6, r0, r8, asr #18
   1849c:	muleq	r1, r8, fp
   184a0:	andeq	r6, r0, ip, asr #17
   184a4:	ldr	r2, [pc, #232]	; 18594 <__assert_fail@plt+0x6790>
   184a8:	ldr	r3, [pc, #232]	; 18598 <__assert_fail@plt+0x6794>
   184ac:	add	r2, pc, r2
   184b0:	push	{r4, r5, r6, r7, r8, lr}
   184b4:	sub	sp, sp, #8
   184b8:	ldr	r7, [r2, r3]
   184bc:	mov	r5, #0
   184c0:	mov	r4, r0
   184c4:	ldr	r3, [r7]
   184c8:	mov	r8, r1
   184cc:	str	r5, [sp]
   184d0:	str	r3, [sp, #4]
   184d4:	bl	11be8 <__errno_location@plt>
   184d8:	cmp	r4, r5
   184dc:	str	r5, [r0]
   184e0:	beq	184f0 <__assert_fail@plt+0x66ec>
   184e4:	ldrsb	r3, [r4]
   184e8:	cmp	r3, r5
   184ec:	bne	18510 <__assert_fail@plt+0x670c>
   184f0:	ldr	r1, [pc, #164]	; 1859c <__assert_fail@plt+0x6798>
   184f4:	mov	r3, r4
   184f8:	add	r1, pc, r1
   184fc:	mov	r2, r8
   18500:	ldr	r0, [r1]
   18504:	ldr	r1, [pc, #148]	; 185a0 <__assert_fail@plt+0x679c>
   18508:	add	r1, pc, r1
   1850c:	bl	11ce4 <errx@plt>
   18510:	mov	r6, r0
   18514:	mov	r2, #10
   18518:	mov	r1, sp
   1851c:	mov	r0, r4
   18520:	bl	1190c <strtol@plt>
   18524:	ldr	r2, [r6]
   18528:	cmp	r2, r5
   1852c:	bne	18568 <__assert_fail@plt+0x6764>
   18530:	ldr	r3, [sp]
   18534:	cmp	r3, r4
   18538:	beq	184f0 <__assert_fail@plt+0x66ec>
   1853c:	cmp	r3, r5
   18540:	beq	18550 <__assert_fail@plt+0x674c>
   18544:	ldrsb	r3, [r3]
   18548:	cmp	r3, r5
   1854c:	bne	184f0 <__assert_fail@plt+0x66ec>
   18550:	ldr	r2, [sp, #4]
   18554:	ldr	r3, [r7]
   18558:	cmp	r2, r3
   1855c:	bne	18590 <__assert_fail@plt+0x678c>
   18560:	add	sp, sp, #8
   18564:	pop	{r4, r5, r6, r7, r8, pc}
   18568:	ldr	r3, [pc, #52]	; 185a4 <__assert_fail@plt+0x67a0>
   1856c:	cmp	r2, #34	; 0x22
   18570:	add	r3, pc, r3
   18574:	ldr	r0, [r3]
   18578:	bne	184f0 <__assert_fail@plt+0x66ec>
   1857c:	ldr	r1, [pc, #36]	; 185a8 <__assert_fail@plt+0x67a4>
   18580:	mov	r3, r4
   18584:	mov	r2, r8
   18588:	add	r1, pc, r1
   1858c:	bl	11a5c <err@plt>
   18590:	bl	11a2c <__stack_chk_fail@plt>
   18594:	andeq	r7, r1, r8, ror #18
   18598:	ldrdeq	r0, [r0], -r8
   1859c:	andeq	r7, r1, r8, lsl #22
   185a0:	andeq	r6, r0, r4, asr #16
   185a4:	muleq	r1, r0, sl
   185a8:	andeq	r6, r0, r4, asr #15
   185ac:	ldr	r2, [pc, #232]	; 1869c <__assert_fail@plt+0x6898>
   185b0:	ldr	r3, [pc, #232]	; 186a0 <__assert_fail@plt+0x689c>
   185b4:	add	r2, pc, r2
   185b8:	push	{r4, r5, r6, r7, r8, lr}
   185bc:	sub	sp, sp, #8
   185c0:	ldr	r7, [r2, r3]
   185c4:	mov	r5, #0
   185c8:	mov	r4, r0
   185cc:	ldr	r3, [r7]
   185d0:	mov	r8, r1
   185d4:	str	r5, [sp]
   185d8:	str	r3, [sp, #4]
   185dc:	bl	11be8 <__errno_location@plt>
   185e0:	cmp	r4, r5
   185e4:	str	r5, [r0]
   185e8:	beq	185f8 <__assert_fail@plt+0x67f4>
   185ec:	ldrsb	r3, [r4]
   185f0:	cmp	r3, r5
   185f4:	bne	18618 <__assert_fail@plt+0x6814>
   185f8:	ldr	r1, [pc, #164]	; 186a4 <__assert_fail@plt+0x68a0>
   185fc:	mov	r3, r4
   18600:	add	r1, pc, r1
   18604:	mov	r2, r8
   18608:	ldr	r0, [r1]
   1860c:	ldr	r1, [pc, #148]	; 186a8 <__assert_fail@plt+0x68a4>
   18610:	add	r1, pc, r1
   18614:	bl	11ce4 <errx@plt>
   18618:	mov	r6, r0
   1861c:	mov	r2, #10
   18620:	mov	r1, sp
   18624:	mov	r0, r4
   18628:	bl	11bac <strtoul@plt>
   1862c:	ldr	r2, [r6]
   18630:	cmp	r2, r5
   18634:	bne	18670 <__assert_fail@plt+0x686c>
   18638:	ldr	r3, [sp]
   1863c:	cmp	r3, r4
   18640:	beq	185f8 <__assert_fail@plt+0x67f4>
   18644:	cmp	r3, r5
   18648:	beq	18658 <__assert_fail@plt+0x6854>
   1864c:	ldrsb	r3, [r3]
   18650:	cmp	r3, r5
   18654:	bne	185f8 <__assert_fail@plt+0x67f4>
   18658:	ldr	r2, [sp, #4]
   1865c:	ldr	r3, [r7]
   18660:	cmp	r2, r3
   18664:	bne	18698 <__assert_fail@plt+0x6894>
   18668:	add	sp, sp, #8
   1866c:	pop	{r4, r5, r6, r7, r8, pc}
   18670:	ldr	r3, [pc, #52]	; 186ac <__assert_fail@plt+0x68a8>
   18674:	cmp	r2, #34	; 0x22
   18678:	add	r3, pc, r3
   1867c:	ldr	r0, [r3]
   18680:	bne	185f8 <__assert_fail@plt+0x67f4>
   18684:	ldr	r1, [pc, #36]	; 186b0 <__assert_fail@plt+0x68ac>
   18688:	mov	r3, r4
   1868c:	mov	r2, r8
   18690:	add	r1, pc, r1
   18694:	bl	11a5c <err@plt>
   18698:	bl	11a2c <__stack_chk_fail@plt>
   1869c:	andeq	r7, r1, r0, ror #16
   186a0:	ldrdeq	r0, [r0], -r8
   186a4:	andeq	r7, r1, r0, lsl #20
   186a8:	andeq	r6, r0, ip, lsr r7
   186ac:	andeq	r7, r1, r8, lsl #19
   186b0:			; <UNDEFINED> instruction: 0x000066bc
   186b4:	ldr	r3, [pc, #140]	; 18748 <__assert_fail@plt+0x6944>
   186b8:	ldr	r2, [pc, #140]	; 1874c <__assert_fail@plt+0x6948>
   186bc:	add	r3, pc, r3
   186c0:	push	{r4, r5, r6, lr}
   186c4:	sub	sp, sp, #16
   186c8:	ldr	r4, [r3, r2]
   186cc:	mov	r5, r1
   186d0:	mov	r1, sp
   186d4:	ldr	r3, [r4]
   186d8:	mov	r6, r0
   186dc:	str	r3, [sp, #12]
   186e0:	bl	17ef4 <__assert_fail@plt+0x60f0>
   186e4:	cmp	r0, #0
   186e8:	beq	18728 <__assert_fail@plt+0x6924>
   186ec:	bl	11be8 <__errno_location@plt>
   186f0:	ldr	r3, [pc, #88]	; 18750 <__assert_fail@plt+0x694c>
   186f4:	mov	r2, r5
   186f8:	ldr	r1, [pc, r3]
   186fc:	ldr	r3, [r0]
   18700:	mov	r0, r1
   18704:	cmp	r3, #0
   18708:	mov	r3, r6
   1870c:	beq	1871c <__assert_fail@plt+0x6918>
   18710:	ldr	r1, [pc, #60]	; 18754 <__assert_fail@plt+0x6950>
   18714:	add	r1, pc, r1
   18718:	bl	11a5c <err@plt>
   1871c:	ldr	r1, [pc, #52]	; 18758 <__assert_fail@plt+0x6954>
   18720:	add	r1, pc, r1
   18724:	bl	11ce4 <errx@plt>
   18728:	ldr	r2, [sp, #12]
   1872c:	ldr	r3, [r4]
   18730:	ldrd	r0, [sp]
   18734:	cmp	r2, r3
   18738:	bne	18744 <__assert_fail@plt+0x6940>
   1873c:	add	sp, sp, #16
   18740:	pop	{r4, r5, r6, pc}
   18744:	bl	11a2c <__stack_chk_fail@plt>
   18748:	andeq	r7, r1, r8, asr r7
   1874c:	ldrdeq	r0, [r0], -r8
   18750:	andeq	r7, r1, r8, lsl #18
   18754:	andeq	r6, r0, r8, lsr r6
   18758:	andeq	r6, r0, ip, lsr #12
   1875c:	push	{r4, lr}
   18760:	mov	r4, r1
   18764:	mov	r1, r2
   18768:	bl	183a0 <__assert_fail@plt+0x659c>
   1876c:	vldr	d6, [pc, #28]	; 18790 <__assert_fail@plt+0x698c>
   18770:	vcvt.s32.f64	s15, d0
   18774:	vcvt.f64.s32	d5, s15
   18778:	vstr	s15, [r4]
   1877c:	vsub.f64	d0, d0, d5
   18780:	vmul.f64	d0, d0, d6
   18784:	vcvt.s32.f64	s0, d0
   18788:	vstr	s0, [r4, #4]
   1878c:	pop	{r4, pc}
   18790:	andeq	r0, r0, r0
   18794:	smlawbmi	lr, r0, r4, r8
   18798:	and	r2, r0, #61440	; 0xf000
   1879c:	cmp	r2, #16384	; 0x4000
   187a0:	moveq	r2, r1
   187a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187a8:	moveq	sl, #100	; 0x64
   187ac:	mov	r3, r0
   187b0:	add	r9, r1, #1
   187b4:	add	r8, r1, #2
   187b8:	add	r7, r1, #3
   187bc:	add	r6, r1, #4
   187c0:	add	r5, r1, #5
   187c4:	add	r4, r1, #6
   187c8:	add	lr, r1, #7
   187cc:	add	ip, r1, #8
   187d0:	add	r0, r1, #9
   187d4:	strbeq	sl, [r2], #10
   187d8:	beq	1887c <__assert_fail@plt+0x6a78>
   187dc:	cmp	r2, #40960	; 0xa000
   187e0:	moveq	r2, r1
   187e4:	moveq	sl, #108	; 0x6c
   187e8:	strbeq	sl, [r2], #10
   187ec:	beq	1887c <__assert_fail@plt+0x6a78>
   187f0:	cmp	r2, #8192	; 0x2000
   187f4:	moveq	r2, r1
   187f8:	moveq	sl, #99	; 0x63
   187fc:	strbeq	sl, [r2], #10
   18800:	beq	1887c <__assert_fail@plt+0x6a78>
   18804:	cmp	r2, #24576	; 0x6000
   18808:	moveq	r2, r1
   1880c:	moveq	sl, #98	; 0x62
   18810:	strbeq	sl, [r2], #10
   18814:	beq	1887c <__assert_fail@plt+0x6a78>
   18818:	cmp	r2, #49152	; 0xc000
   1881c:	moveq	r2, r1
   18820:	moveq	sl, #115	; 0x73
   18824:	strbeq	sl, [r2], #10
   18828:	beq	1887c <__assert_fail@plt+0x6a78>
   1882c:	cmp	r2, #4096	; 0x1000
   18830:	moveq	r2, r1
   18834:	moveq	sl, #112	; 0x70
   18838:	strbeq	sl, [r2], #10
   1883c:	beq	1887c <__assert_fail@plt+0x6a78>
   18840:	cmp	r2, #32768	; 0x8000
   18844:	moveq	r2, r1
   18848:	moveq	sl, #45	; 0x2d
   1884c:	strbeq	sl, [r2], #10
   18850:	beq	1887c <__assert_fail@plt+0x6a78>
   18854:	mov	r2, r0
   18858:	mov	r0, ip
   1885c:	mov	ip, lr
   18860:	mov	lr, r4
   18864:	mov	r4, r5
   18868:	mov	r5, r6
   1886c:	mov	r6, r7
   18870:	mov	r7, r8
   18874:	mov	r8, r9
   18878:	mov	r9, r1
   1887c:	tst	r3, #256	; 0x100
   18880:	movne	fp, #114	; 0x72
   18884:	moveq	fp, #45	; 0x2d
   18888:	tst	r3, #128	; 0x80
   1888c:	movne	sl, #119	; 0x77
   18890:	moveq	sl, #45	; 0x2d
   18894:	tst	r3, #2048	; 0x800
   18898:	strb	fp, [r9]
   1889c:	and	r9, r3, #64	; 0x40
   188a0:	strb	sl, [r8]
   188a4:	beq	18940 <__assert_fail@plt+0x6b3c>
   188a8:	cmp	r9, #0
   188ac:	movne	r9, #115	; 0x73
   188b0:	moveq	r9, #83	; 0x53
   188b4:	tst	r3, #32
   188b8:	movne	r8, #114	; 0x72
   188bc:	moveq	r8, #45	; 0x2d
   188c0:	tst	r3, #16
   188c4:	strb	r9, [r7]
   188c8:	movne	r7, #119	; 0x77
   188cc:	moveq	r7, #45	; 0x2d
   188d0:	tst	r3, #1024	; 0x400
   188d4:	strb	r8, [r6]
   188d8:	and	r6, r3, #8
   188dc:	strb	r7, [r5]
   188e0:	beq	18950 <__assert_fail@plt+0x6b4c>
   188e4:	cmp	r6, #0
   188e8:	movne	r6, #115	; 0x73
   188ec:	moveq	r6, #83	; 0x53
   188f0:	tst	r3, #4
   188f4:	movne	r5, #114	; 0x72
   188f8:	moveq	r5, #45	; 0x2d
   188fc:	tst	r3, #2
   18900:	strb	r6, [r4]
   18904:	movne	r4, #119	; 0x77
   18908:	moveq	r4, #45	; 0x2d
   1890c:	tst	r3, #512	; 0x200
   18910:	strb	r5, [lr]
   18914:	and	r3, r3, #1
   18918:	strb	r4, [ip]
   1891c:	beq	18960 <__assert_fail@plt+0x6b5c>
   18920:	cmp	r3, #0
   18924:	movne	ip, #116	; 0x74
   18928:	moveq	ip, #84	; 0x54
   1892c:	mov	r3, #0
   18930:	strb	ip, [r0]
   18934:	mov	r0, r1
   18938:	strb	r3, [r2]
   1893c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18940:	cmp	r9, #0
   18944:	movne	r9, #120	; 0x78
   18948:	moveq	r9, #45	; 0x2d
   1894c:	b	188b4 <__assert_fail@plt+0x6ab0>
   18950:	cmp	r6, #0
   18954:	movne	r6, #120	; 0x78
   18958:	moveq	r6, #45	; 0x2d
   1895c:	b	188f0 <__assert_fail@plt+0x6aec>
   18960:	cmp	r3, #0
   18964:	movne	ip, #120	; 0x78
   18968:	moveq	ip, #45	; 0x2d
   1896c:	b	1892c <__assert_fail@plt+0x6b28>
   18970:	ldr	r1, [pc, #680]	; 18c20 <__assert_fail@plt+0x6e1c>
   18974:	ldr	ip, [pc, #680]	; 18c24 <__assert_fail@plt+0x6e20>
   18978:	add	r1, pc, r1
   1897c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18980:	sub	sp, sp, #108	; 0x6c
   18984:	ldr	r8, [r1, ip]
   18988:	tst	r0, #2
   1898c:	strd	r2, [sp, #32]
   18990:	ldr	r1, [r8]
   18994:	addeq	r9, sp, #60	; 0x3c
   18998:	str	r1, [sp, #100]	; 0x64
   1899c:	ldrd	r2, [sp, #32]
   189a0:	movne	r1, #32
   189a4:	strbne	r1, [sp, #60]	; 0x3c
   189a8:	addne	ip, sp, #61	; 0x3d
   189ac:	addne	r9, sp, #60	; 0x3c
   189b0:	moveq	ip, r9
   189b4:	mov	r1, #10
   189b8:	mov	sl, #1
   189bc:	sub	lr, r1, #32
   189c0:	lsl	r4, sl, r1
   189c4:	lsl	r5, sl, lr
   189c8:	rsb	lr, r1, #32
   189cc:	orr	r5, r5, sl, lsr lr
   189d0:	cmp	r3, r5
   189d4:	cmpeq	r2, r4
   189d8:	bcc	18b94 <__assert_fail@plt+0x6d90>
   189dc:	add	r1, r1, #10
   189e0:	cmp	r1, #70	; 0x46
   189e4:	bne	189bc <__assert_fail@plt+0x6bb8>
   189e8:	mov	lr, ip
   189ec:	strd	r2, [sp, #32]
   189f0:	mov	r4, r2
   189f4:	tst	r0, #1
   189f8:	mov	r2, #69	; 0x45
   189fc:	bic	r5, r3, #-268435456	; 0xf0000000
   18a00:	lsr	sl, r3, #28
   18a04:	strb	r2, [lr], #1
   18a08:	bne	18b7c <__assert_fail@plt+0x6d78>
   18a0c:	orrs	r3, r4, r5
   18a10:	mov	r3, #0
   18a14:	strb	r3, [lr]
   18a18:	beq	18bbc <__assert_fail@plt+0x6db8>
   18a1c:	sub	r2, r1, #20
   18a20:	rsb	r0, r2, #32
   18a24:	lsr	r3, r4, r2
   18a28:	sub	r1, r1, #52	; 0x34
   18a2c:	orr	r3, r3, r5, lsl r0
   18a30:	orr	r3, r3, r5, lsr r1
   18a34:	lsr	r2, r5, r2
   18a38:	adds	r6, r3, #50	; 0x32
   18a3c:	adc	r7, r2, #0
   18a40:	mov	r3, #0
   18a44:	mov	r2, #100	; 0x64
   18a48:	mov	r0, r6
   18a4c:	mov	r1, r7
   18a50:	bl	1cc18 <__assert_fail@plt+0xae14>
   18a54:	cmp	r1, #0
   18a58:	cmpeq	r0, #10
   18a5c:	mov	r2, r0
   18a60:	mov	r3, r1
   18a64:	addeq	sl, sl, #1
   18a68:	beq	18bbc <__assert_fail@plt+0x6db8>
   18a6c:	cmp	r7, #0
   18a70:	cmpeq	r6, #99	; 0x63
   18a74:	strd	r2, [sp, #32]
   18a78:	bls	18bbc <__assert_fail@plt+0x6db8>
   18a7c:	bl	11d2c <localeconv@plt>
   18a80:	ldrd	r2, [sp, #32]
   18a84:	cmp	r0, #0
   18a88:	beq	18c04 <__assert_fail@plt+0x6e00>
   18a8c:	ldr	r0, [r0]
   18a90:	cmp	r0, #0
   18a94:	beq	18c10 <__assert_fail@plt+0x6e0c>
   18a98:	ldrsb	r1, [r0]
   18a9c:	cmp	r1, #0
   18aa0:	ldreq	r0, [pc, #384]	; 18c28 <__assert_fail@plt+0x6e24>
   18aa4:	addeq	r0, pc, r0
   18aa8:	ldr	r1, [pc, #380]	; 18c2c <__assert_fail@plt+0x6e28>
   18aac:	strd	r2, [sp, #16]
   18ab0:	add	r1, pc, r1
   18ab4:	add	r4, sp, #68	; 0x44
   18ab8:	mov	r3, #32
   18abc:	str	r0, [sp, #8]
   18ac0:	str	r1, [sp]
   18ac4:	str	r9, [sp, #24]
   18ac8:	str	sl, [sp, #4]
   18acc:	mov	r0, r4
   18ad0:	mov	r1, r3
   18ad4:	mov	r2, #1
   18ad8:	bl	11de0 <__snprintf_chk@plt>
   18adc:	b	18be4 <__assert_fail@plt+0x6de0>
   18ae0:	ldr	r4, [pc, #328]	; 18c30 <__assert_fail@plt+0x6e2c>
   18ae4:	mvn	sl, #0
   18ae8:	ldr	fp, [pc, #324]	; 18c34 <__assert_fail@plt+0x6e30>
   18aec:	umull	r2, r3, lr, r4
   18af0:	sub	r4, r1, #42	; 0x2a
   18af4:	strd	r2, [sp, #40]	; 0x28
   18af8:	ldr	r3, [sp, #44]	; 0x2c
   18afc:	lsl	r2, sl, lr
   18b00:	lsr	r3, r3, #3
   18b04:	str	r3, [sp, #52]	; 0x34
   18b08:	ldr	r3, [sp, #32]
   18b0c:	str	r4, [sp, #48]	; 0x30
   18b10:	orr	r4, r2, sl, lsl r4
   18b14:	lsr	r2, r3, lr
   18b18:	mov	r3, r2
   18b1c:	ldr	r2, [sp, #52]	; 0x34
   18b20:	add	fp, pc, fp
   18b24:	str	r4, [sp, #40]	; 0x28
   18b28:	ldrsb	fp, [fp, r2]
   18b2c:	mov	r2, r3
   18b30:	ldr	r3, [sp, #36]	; 0x24
   18b34:	rsb	r5, lr, #32
   18b38:	ldr	r4, [sp, #40]	; 0x28
   18b3c:	orr	r2, r2, r3, lsl r5
   18b40:	orr	r4, r4, sl, lsr r5
   18b44:	ldr	r3, [sp, #32]
   18b48:	str	r4, [sp, #40]	; 0x28
   18b4c:	cmp	r0, #0
   18b50:	bic	r4, r3, sl, lsl lr
   18b54:	ldr	r0, [sp, #36]	; 0x24
   18b58:	ldr	r3, [sp, #48]	; 0x30
   18b5c:	mov	lr, ip
   18b60:	orr	sl, r2, r0, lsr r3
   18b64:	ldr	r3, [sp, #40]	; 0x28
   18b68:	strb	fp, [lr], #1
   18b6c:	bic	r5, r0, r3
   18b70:	beq	18a0c <__assert_fail@plt+0x6c08>
   18b74:	cmp	fp, #66	; 0x42
   18b78:	beq	18a0c <__assert_fail@plt+0x6c08>
   18b7c:	mov	r3, #105	; 0x69
   18b80:	strb	r3, [ip, #1]
   18b84:	mov	r3, #66	; 0x42
   18b88:	add	lr, ip, #3
   18b8c:	strb	r3, [ip, #2]
   18b90:	b	18a0c <__assert_fail@plt+0x6c08>
   18b94:	subs	lr, r1, #10
   18b98:	strd	r2, [sp, #32]
   18b9c:	and	r0, r0, #1
   18ba0:	bne	18ae0 <__assert_fail@plt+0x6cdc>
   18ba4:	ldr	sl, [sp, #32]
   18ba8:	cmp	r0, #0
   18bac:	movne	r0, lr
   18bb0:	mov	r3, #66	; 0x42
   18bb4:	strb	r0, [ip, #1]
   18bb8:	strb	r3, [ip]
   18bbc:	ldr	r2, [pc, #116]	; 18c38 <__assert_fail@plt+0x6e34>
   18bc0:	add	r4, sp, #68	; 0x44
   18bc4:	add	r2, pc, r2
   18bc8:	mov	r3, #32
   18bcc:	stm	sp, {r2, sl}
   18bd0:	str	r9, [sp, #8]
   18bd4:	mov	r0, r4
   18bd8:	mov	r1, r3
   18bdc:	mov	r2, #1
   18be0:	bl	11de0 <__snprintf_chk@plt>
   18be4:	mov	r0, r4
   18be8:	bl	11a20 <strdup@plt>
   18bec:	ldr	r2, [sp, #100]	; 0x64
   18bf0:	ldr	r3, [r8]
   18bf4:	cmp	r2, r3
   18bf8:	bne	18c1c <__assert_fail@plt+0x6e18>
   18bfc:	add	sp, sp, #108	; 0x6c
   18c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c04:	ldr	r0, [pc, #48]	; 18c3c <__assert_fail@plt+0x6e38>
   18c08:	add	r0, pc, r0
   18c0c:	b	18aa8 <__assert_fail@plt+0x6ca4>
   18c10:	ldr	r0, [pc, #40]	; 18c40 <__assert_fail@plt+0x6e3c>
   18c14:	add	r0, pc, r0
   18c18:	b	18aa8 <__assert_fail@plt+0x6ca4>
   18c1c:	bl	11a2c <__stack_chk_fail@plt>
   18c20:	muleq	r1, ip, r4
   18c24:	ldrdeq	r0, [r0], -r8
   18c28:	andeq	r6, r0, ip, asr #5
   18c2c:	andeq	r6, r0, ip, asr #5
   18c30:	stclgt	12, cr12, [ip], {205}	; 0xcd
   18c34:	andeq	r6, r0, r4, asr r2
   18c38:	andeq	r6, r0, r4, asr #3
   18c3c:	andeq	r6, r0, r8, ror #2
   18c40:	andeq	r6, r0, ip, asr r1
   18c44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c48:	subs	r4, r0, #0
   18c4c:	beq	18d1c <__assert_fail@plt+0x6f18>
   18c50:	ldrsb	lr, [r4]
   18c54:	cmp	lr, #0
   18c58:	beq	18d1c <__assert_fail@plt+0x6f18>
   18c5c:	cmp	r1, #0
   18c60:	clz	ip, r2
   18c64:	lsr	ip, ip, #5
   18c68:	moveq	r0, #1
   18c6c:	movne	r0, ip
   18c70:	cmp	r3, #0
   18c74:	moveq	r0, #1
   18c78:	cmp	r0, #0
   18c7c:	bne	18d1c <__assert_fail@plt+0x6f18>
   18c80:	mov	r8, r3
   18c84:	mov	r7, r2
   18c88:	mov	r9, r1
   18c8c:	mov	r5, r0
   18c90:	b	18cec <__assert_fail@plt+0x6ee8>
   18c94:	cmp	r3, #0
   18c98:	bne	18cd8 <__assert_fail@plt+0x6ed4>
   18c9c:	cmn	r4, #1
   18ca0:	add	r6, r4, #1
   18ca4:	beq	18d24 <__assert_fail@plt+0x6f20>
   18ca8:	cmp	r0, r6
   18cac:	bcs	18d1c <__assert_fail@plt+0x6f18>
   18cb0:	sub	r1, r6, r0
   18cb4:	blx	r8
   18cb8:	cmn	r0, #1
   18cbc:	beq	18d1c <__assert_fail@plt+0x6f18>
   18cc0:	str	r0, [r9, r5, lsl #2]
   18cc4:	ldrsb	r3, [r6]
   18cc8:	add	r5, r5, #1
   18ccc:	cmp	r3, #0
   18cd0:	beq	18d24 <__assert_fail@plt+0x6f20>
   18cd4:	mov	r0, #0
   18cd8:	cmn	r4, #1
   18cdc:	beq	18d24 <__assert_fail@plt+0x6f20>
   18ce0:	ldrsb	lr, [r4, #1]!
   18ce4:	cmp	lr, #0
   18ce8:	beq	18d24 <__assert_fail@plt+0x6f20>
   18cec:	cmp	r7, r5
   18cf0:	mov	r6, r4
   18cf4:	bls	18d2c <__assert_fail@plt+0x6f28>
   18cf8:	cmp	r0, #0
   18cfc:	moveq	r0, r4
   18d00:	cmp	lr, #44	; 0x2c
   18d04:	ldrsb	r3, [r4, #1]
   18d08:	bne	18c94 <__assert_fail@plt+0x6e90>
   18d0c:	cmp	r3, #0
   18d10:	beq	18c9c <__assert_fail@plt+0x6e98>
   18d14:	cmp	r0, r6
   18d18:	bcc	18cb0 <__assert_fail@plt+0x6eac>
   18d1c:	mvn	r0, #0
   18d20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d24:	mov	r0, r5
   18d28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d2c:	mvn	r0, #1
   18d30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d34:	cmp	r0, #0
   18d38:	beq	18da4 <__assert_fail@plt+0x6fa0>
   18d3c:	push	{r4, lr}
   18d40:	mov	r4, r3
   18d44:	cmp	r4, #0
   18d48:	ldrsb	ip, [r0]
   18d4c:	clz	r3, ip
   18d50:	lsr	r3, r3, #5
   18d54:	moveq	r3, #1
   18d58:	cmp	r3, #0
   18d5c:	bne	18d9c <__assert_fail@plt+0x6f98>
   18d60:	ldr	lr, [r4]
   18d64:	cmp	lr, r2
   18d68:	bhi	18d9c <__assert_fail@plt+0x6f98>
   18d6c:	cmp	ip, #43	; 0x2b
   18d70:	strne	r3, [r4]
   18d74:	addeq	r0, r0, #1
   18d78:	ldr	r3, [sp, #8]
   18d7c:	addeq	r1, r1, lr, lsl #2
   18d80:	subeq	r2, r2, lr
   18d84:	bl	18c44 <__assert_fail@plt+0x6e40>
   18d88:	cmp	r0, #0
   18d8c:	ldrgt	r3, [r4]
   18d90:	addgt	r3, r3, r0
   18d94:	strgt	r3, [r4]
   18d98:	pop	{r4, pc}
   18d9c:	mvn	r0, #0
   18da0:	pop	{r4, pc}
   18da4:	mvn	r0, #0
   18da8:	bx	lr
   18dac:	cmp	r2, #0
   18db0:	clz	r3, r1
   18db4:	lsr	r3, r3, #5
   18db8:	moveq	r3, #1
   18dbc:	cmp	r0, #0
   18dc0:	moveq	r3, #1
   18dc4:	cmp	r3, #0
   18dc8:	bne	18e94 <__assert_fail@plt+0x7090>
   18dcc:	push	{r4, r5, r6, r7, r8, lr}
   18dd0:	mov	r6, r2
   18dd4:	mov	r2, r3
   18dd8:	ldrsb	r3, [r0]
   18ddc:	mov	r8, r1
   18de0:	mov	r4, r0
   18de4:	mov	r7, #1
   18de8:	cmp	r3, #0
   18dec:	beq	18e5c <__assert_fail@plt+0x7058>
   18df0:	cmp	r2, #0
   18df4:	moveq	r2, r4
   18df8:	cmp	r3, #44	; 0x2c
   18dfc:	mov	r5, r4
   18e00:	ldrsb	r3, [r4, #1]!
   18e04:	beq	18e64 <__assert_fail@plt+0x7060>
   18e08:	cmp	r3, #0
   18e0c:	bne	18e84 <__assert_fail@plt+0x7080>
   18e10:	mov	r5, r4
   18e14:	cmp	r2, r5
   18e18:	sub	r1, r5, r2
   18e1c:	mov	r0, r2
   18e20:	bcs	18e7c <__assert_fail@plt+0x7078>
   18e24:	blx	r6
   18e28:	mov	r2, r4
   18e2c:	cmp	r0, #0
   18e30:	and	r1, r0, #7
   18e34:	poplt	{r4, r5, r6, r7, r8, pc}
   18e38:	ldrb	r3, [r8, r0, asr #3]
   18e3c:	orr	r3, r3, r7, lsl r1
   18e40:	strb	r3, [r8, r0, asr #3]
   18e44:	ldrsb	r3, [r5]
   18e48:	cmp	r3, #0
   18e4c:	beq	18e5c <__assert_fail@plt+0x7058>
   18e50:	ldrsb	r3, [r4]
   18e54:	cmp	r3, #0
   18e58:	bne	18df8 <__assert_fail@plt+0x6ff4>
   18e5c:	mov	r0, #0
   18e60:	pop	{r4, r5, r6, r7, r8, pc}
   18e64:	cmp	r3, #0
   18e68:	moveq	r5, r4
   18e6c:	cmp	r2, r5
   18e70:	sub	r1, r5, r2
   18e74:	mov	r0, r2
   18e78:	bcc	18e24 <__assert_fail@plt+0x7020>
   18e7c:	mvn	r0, #0
   18e80:	pop	{r4, r5, r6, r7, r8, pc}
   18e84:	adds	r4, r5, #1
   18e88:	bne	18de8 <__assert_fail@plt+0x6fe4>
   18e8c:	mov	r0, #0
   18e90:	pop	{r4, r5, r6, r7, r8, pc}
   18e94:	mvn	r0, #21
   18e98:	bx	lr
   18e9c:	cmp	r2, #0
   18ea0:	clz	r3, r1
   18ea4:	lsr	r3, r3, #5
   18ea8:	moveq	r3, #1
   18eac:	cmp	r0, #0
   18eb0:	moveq	r3, #1
   18eb4:	cmp	r3, #0
   18eb8:	bne	18f7c <__assert_fail@plt+0x7178>
   18ebc:	push	{r4, r5, r6, r7, r8, lr}
   18ec0:	mov	r6, r2
   18ec4:	mov	r2, r3
   18ec8:	ldrsb	r3, [r0]
   18ecc:	mov	r7, r1
   18ed0:	mov	r4, r0
   18ed4:	cmp	r3, #0
   18ed8:	beq	18f44 <__assert_fail@plt+0x7140>
   18edc:	cmp	r2, #0
   18ee0:	moveq	r2, r4
   18ee4:	cmp	r3, #44	; 0x2c
   18ee8:	mov	r5, r4
   18eec:	ldrsb	r3, [r4, #1]!
   18ef0:	beq	18f4c <__assert_fail@plt+0x7148>
   18ef4:	cmp	r3, #0
   18ef8:	bne	18f6c <__assert_fail@plt+0x7168>
   18efc:	mov	r5, r4
   18f00:	cmp	r2, r5
   18f04:	sub	r1, r5, r2
   18f08:	mov	r0, r2
   18f0c:	bcs	18f64 <__assert_fail@plt+0x7160>
   18f10:	blx	r6
   18f14:	mov	r2, r4
   18f18:	cmp	r0, #0
   18f1c:	poplt	{r4, r5, r6, r7, r8, pc}
   18f20:	ldr	r3, [r7]
   18f24:	orr	r3, r3, r0
   18f28:	str	r3, [r7]
   18f2c:	ldrsb	r3, [r5]
   18f30:	cmp	r3, #0
   18f34:	beq	18f44 <__assert_fail@plt+0x7140>
   18f38:	ldrsb	r3, [r4]
   18f3c:	cmp	r3, #0
   18f40:	bne	18ee4 <__assert_fail@plt+0x70e0>
   18f44:	mov	r0, #0
   18f48:	pop	{r4, r5, r6, r7, r8, pc}
   18f4c:	cmp	r3, #0
   18f50:	moveq	r5, r4
   18f54:	cmp	r2, r5
   18f58:	sub	r1, r5, r2
   18f5c:	mov	r0, r2
   18f60:	bcc	18f10 <__assert_fail@plt+0x710c>
   18f64:	mvn	r0, #0
   18f68:	pop	{r4, r5, r6, r7, r8, pc}
   18f6c:	adds	r4, r5, #1
   18f70:	bne	18ed4 <__assert_fail@plt+0x70d0>
   18f74:	mov	r0, #0
   18f78:	pop	{r4, r5, r6, r7, r8, pc}
   18f7c:	mvn	r0, #21
   18f80:	bx	lr
   18f84:	ldr	ip, [pc, #396]	; 19118 <__assert_fail@plt+0x7314>
   18f88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f8c:	add	ip, pc, ip
   18f90:	ldr	lr, [pc, #388]	; 1911c <__assert_fail@plt+0x7318>
   18f94:	sub	sp, sp, #8
   18f98:	mov	r9, r3
   18f9c:	ldr	r5, [ip, lr]
   18fa0:	mov	sl, #0
   18fa4:	subs	r4, r0, #0
   18fa8:	ldr	r3, [r5]
   18fac:	mov	r7, r1
   18fb0:	str	sl, [sp]
   18fb4:	mov	r1, ip
   18fb8:	str	r3, [sp, #4]
   18fbc:	beq	19030 <__assert_fail@plt+0x722c>
   18fc0:	str	r9, [r7]
   18fc4:	str	r9, [r2]
   18fc8:	mov	r6, r2
   18fcc:	bl	11be8 <__errno_location@plt>
   18fd0:	str	sl, [r0]
   18fd4:	ldrsb	r3, [r4]
   18fd8:	mov	r8, r0
   18fdc:	cmp	r3, #58	; 0x3a
   18fe0:	beq	1904c <__assert_fail@plt+0x7248>
   18fe4:	mov	sl, sp
   18fe8:	mov	r1, sl
   18fec:	mov	r2, #10
   18ff0:	mov	r0, r4
   18ff4:	bl	1190c <strtol@plt>
   18ff8:	str	r0, [r7]
   18ffc:	str	r0, [r6]
   19000:	ldr	r0, [r8]
   19004:	cmp	r0, #0
   19008:	bne	1909c <__assert_fail@plt+0x7298>
   1900c:	ldr	r2, [sp]
   19010:	cmp	r2, #0
   19014:	cmpne	r2, r4
   19018:	beq	1909c <__assert_fail@plt+0x7298>
   1901c:	ldrsb	r3, [r2]
   19020:	cmp	r3, #58	; 0x3a
   19024:	beq	190a4 <__assert_fail@plt+0x72a0>
   19028:	cmp	r3, #45	; 0x2d
   1902c:	beq	190b4 <__assert_fail@plt+0x72b0>
   19030:	mov	r0, #0
   19034:	ldr	r2, [sp, #4]
   19038:	ldr	r3, [r5]
   1903c:	cmp	r2, r3
   19040:	bne	19114 <__assert_fail@plt+0x7310>
   19044:	add	sp, sp, #8
   19048:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1904c:	add	r4, r4, #1
   19050:	mov	r0, r4
   19054:	mov	r2, #10
   19058:	mov	r1, sp
   1905c:	bl	1190c <strtol@plt>
   19060:	str	r0, [r6]
   19064:	ldr	r3, [r8]
   19068:	cmp	r3, #0
   1906c:	bne	1909c <__assert_fail@plt+0x7298>
   19070:	ldr	r3, [sp]
   19074:	cmp	r3, #0
   19078:	beq	1909c <__assert_fail@plt+0x7298>
   1907c:	ldrsb	r2, [r3]
   19080:	sub	r3, r3, r4
   19084:	clz	r3, r3
   19088:	cmp	r2, #0
   1908c:	lsr	r3, r3, #5
   19090:	movne	r3, #1
   19094:	cmp	r3, #0
   19098:	beq	19030 <__assert_fail@plt+0x722c>
   1909c:	mvn	r0, #0
   190a0:	b	19034 <__assert_fail@plt+0x7230>
   190a4:	ldrsb	r3, [r2, #1]
   190a8:	cmp	r3, #0
   190ac:	streq	r9, [r6]
   190b0:	beq	19034 <__assert_fail@plt+0x7230>
   190b4:	mov	r3, #0
   190b8:	add	r4, r2, #1
   190bc:	str	r3, [r8]
   190c0:	mov	r1, sl
   190c4:	mov	r0, r4
   190c8:	mov	r2, #10
   190cc:	str	r3, [sp]
   190d0:	bl	1190c <strtol@plt>
   190d4:	str	r0, [r6]
   190d8:	ldr	r3, [r8]
   190dc:	cmp	r3, #0
   190e0:	bne	1909c <__assert_fail@plt+0x7298>
   190e4:	ldr	r2, [sp]
   190e8:	cmp	r2, #0
   190ec:	beq	1909c <__assert_fail@plt+0x7298>
   190f0:	ldrsb	r3, [r2]
   190f4:	sub	r2, r2, r4
   190f8:	clz	r2, r2
   190fc:	cmp	r3, #0
   19100:	lsr	r2, r2, #5
   19104:	movne	r2, #1
   19108:	cmp	r2, #0
   1910c:	beq	19030 <__assert_fail@plt+0x722c>
   19110:	b	1909c <__assert_fail@plt+0x7298>
   19114:	bl	11a2c <__stack_chk_fail@plt>
   19118:	andeq	r6, r1, r8, lsl #29
   1911c:	ldrdeq	r0, [r0], -r8
   19120:	ldr	r3, [pc, #244]	; 1921c <__assert_fail@plt+0x7418>
   19124:	ldr	r2, [pc, #244]	; 19220 <__assert_fail@plt+0x741c>
   19128:	add	r3, pc, r3
   1912c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19130:	sub	sp, sp, #20
   19134:	ldr	r9, [r3, r2]
   19138:	cmp	r0, #0
   1913c:	cmpne	r1, #0
   19140:	ldr	r3, [r9]
   19144:	str	r3, [sp, #12]
   19148:	beq	19210 <__assert_fail@plt+0x740c>
   1914c:	mov	r4, r1
   19150:	add	r8, sp, #4
   19154:	add	r7, sp, #8
   19158:	b	19198 <__assert_fail@plt+0x7394>
   1915c:	cmp	r4, r3
   19160:	bne	19210 <__assert_fail@plt+0x740c>
   19164:	mov	r2, r4
   19168:	mov	r1, r6
   1916c:	mov	r0, r5
   19170:	bl	11db0 <strncmp@plt>
   19174:	cmp	r0, #0
   19178:	bne	19210 <__assert_fail@plt+0x740c>
   1917c:	adds	r0, r5, r4
   19180:	moveq	r3, #0
   19184:	movne	r3, #1
   19188:	adds	r4, r6, r4
   1918c:	moveq	r3, #0
   19190:	cmp	r3, #0
   19194:	beq	19210 <__assert_fail@plt+0x740c>
   19198:	mov	r1, r8
   1919c:	bl	175a0 <__assert_fail@plt+0x579c>
   191a0:	mov	r1, r7
   191a4:	mov	r5, r0
   191a8:	mov	r0, r4
   191ac:	bl	175a0 <__assert_fail@plt+0x579c>
   191b0:	ldr	r4, [sp, #4]
   191b4:	ldr	r3, [sp, #8]
   191b8:	mov	r6, r0
   191bc:	adds	r0, r4, r3
   191c0:	beq	191f4 <__assert_fail@plt+0x73f0>
   191c4:	cmp	r0, #1
   191c8:	bne	1915c <__assert_fail@plt+0x7358>
   191cc:	cmp	r5, #0
   191d0:	beq	191e0 <__assert_fail@plt+0x73dc>
   191d4:	ldrsb	r2, [r5]
   191d8:	cmp	r2, #47	; 0x2f
   191dc:	beq	191f8 <__assert_fail@plt+0x73f4>
   191e0:	cmp	r6, #0
   191e4:	beq	1915c <__assert_fail@plt+0x7358>
   191e8:	ldrsb	r2, [r6]
   191ec:	cmp	r2, #47	; 0x2f
   191f0:	bne	1915c <__assert_fail@plt+0x7358>
   191f4:	mov	r0, #1
   191f8:	ldr	r2, [sp, #12]
   191fc:	ldr	r3, [r9]
   19200:	cmp	r2, r3
   19204:	bne	19218 <__assert_fail@plt+0x7414>
   19208:	add	sp, sp, #20
   1920c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19210:	mov	r0, #0
   19214:	b	191f8 <__assert_fail@plt+0x73f4>
   19218:	bl	11a2c <__stack_chk_fail@plt>
   1921c:	andeq	r6, r1, ip, ror #25
   19220:	ldrdeq	r0, [r0], -r8
   19224:	orrs	r3, r0, r1
   19228:	beq	192a4 <__assert_fail@plt+0x74a0>
   1922c:	cmp	r0, #0
   19230:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19234:	mov	r4, r1
   19238:	mov	r5, r0
   1923c:	beq	192b0 <__assert_fail@plt+0x74ac>
   19240:	cmp	r1, #0
   19244:	beq	192c0 <__assert_fail@plt+0x74bc>
   19248:	mov	r6, r2
   1924c:	bl	11bb8 <strlen@plt>
   19250:	mvn	r3, r0
   19254:	cmp	r6, r3
   19258:	mov	r7, r0
   1925c:	movhi	r8, #0
   19260:	bhi	1929c <__assert_fail@plt+0x7498>
   19264:	add	r9, r6, r0
   19268:	add	r0, r9, #1
   1926c:	bl	11b04 <malloc@plt>
   19270:	subs	r8, r0, #0
   19274:	beq	1929c <__assert_fail@plt+0x7498>
   19278:	mov	r1, r5
   1927c:	mov	r2, r7
   19280:	bl	119d8 <memcpy@plt>
   19284:	mov	r2, r6
   19288:	mov	r1, r4
   1928c:	add	r0, r8, r7
   19290:	bl	119d8 <memcpy@plt>
   19294:	mov	r3, #0
   19298:	strb	r3, [r8, r9]
   1929c:	mov	r0, r8
   192a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   192a4:	ldr	r0, [pc, #28]	; 192c8 <__assert_fail@plt+0x74c4>
   192a8:	add	r0, pc, r0
   192ac:	b	11a20 <strdup@plt>
   192b0:	mov	r0, r4
   192b4:	mov	r1, r2
   192b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   192bc:	b	119a8 <strndup@plt>
   192c0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   192c4:	b	11a20 <strdup@plt>
   192c8:	andeq	r5, r0, ip, lsl #23
   192cc:	push	{r4, r5, r6, lr}
   192d0:	subs	r4, r1, #0
   192d4:	mov	r5, r0
   192d8:	moveq	r2, r4
   192dc:	beq	192ec <__assert_fail@plt+0x74e8>
   192e0:	mov	r0, r4
   192e4:	bl	11bb8 <strlen@plt>
   192e8:	mov	r2, r0
   192ec:	mov	r1, r4
   192f0:	mov	r0, r5
   192f4:	pop	{r4, r5, r6, lr}
   192f8:	b	19224 <__assert_fail@plt+0x7420>
   192fc:	push	{r1, r2, r3}
   19300:	ldr	r1, [pc, #132]	; 1938c <__assert_fail@plt+0x7588>
   19304:	ldr	r3, [pc, #132]	; 19390 <__assert_fail@plt+0x758c>
   19308:	add	r1, pc, r1
   1930c:	push	{r4, r5, lr}
   19310:	mov	r5, r0
   19314:	ldr	r4, [r1, r3]
   19318:	sub	sp, sp, #16
   1931c:	add	ip, sp, #32
   19320:	ldr	r0, [r4]
   19324:	ldr	r2, [sp, #28]
   19328:	str	r0, [sp, #12]
   1932c:	mov	r3, ip
   19330:	add	r0, sp, #8
   19334:	mov	r1, #1
   19338:	str	ip, [sp, #4]
   1933c:	bl	11c18 <__vasprintf_chk@plt>
   19340:	subs	r2, r0, #0
   19344:	movlt	r5, #0
   19348:	blt	19364 <__assert_fail@plt+0x7560>
   1934c:	mov	r0, r5
   19350:	ldr	r1, [sp, #8]
   19354:	bl	19224 <__assert_fail@plt+0x7420>
   19358:	mov	r5, r0
   1935c:	ldr	r0, [sp, #8]
   19360:	bl	1196c <free@plt>
   19364:	ldr	r2, [sp, #12]
   19368:	ldr	r3, [r4]
   1936c:	mov	r0, r5
   19370:	cmp	r2, r3
   19374:	bne	19388 <__assert_fail@plt+0x7584>
   19378:	add	sp, sp, #16
   1937c:	pop	{r4, r5, lr}
   19380:	add	sp, sp, #12
   19384:	bx	lr
   19388:	bl	11a2c <__stack_chk_fail@plt>
   1938c:	andeq	r6, r1, ip, lsl #22
   19390:	ldrdeq	r0, [r0], -r8
   19394:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19398:	mov	r6, r0
   1939c:	ldr	r0, [pc, #348]	; 19500 <__assert_fail@plt+0x76fc>
   193a0:	ldr	ip, [pc, #348]	; 19504 <__assert_fail@plt+0x7700>
   193a4:	add	r0, pc, r0
   193a8:	ldr	r5, [r6]
   193ac:	ldr	r8, [r0, ip]
   193b0:	sub	sp, sp, #8
   193b4:	ldrsb	r4, [r5]
   193b8:	mov	r9, r2
   193bc:	ldr	r2, [r8]
   193c0:	cmp	r4, #0
   193c4:	mov	r7, r1
   193c8:	str	r2, [sp, #4]
   193cc:	mov	r1, r0
   193d0:	beq	19480 <__assert_fail@plt+0x767c>
   193d4:	mov	r0, r5
   193d8:	mov	r1, r9
   193dc:	mov	sl, r3
   193e0:	bl	11df8 <strspn@plt>
   193e4:	add	r4, r5, r0
   193e8:	ldrsb	r5, [r5, r0]
   193ec:	cmp	r5, #0
   193f0:	beq	194e8 <__assert_fail@plt+0x76e4>
   193f4:	cmp	sl, #0
   193f8:	beq	1949c <__assert_fail@plt+0x7698>
   193fc:	ldr	r0, [pc, #260]	; 19508 <__assert_fail@plt+0x7704>
   19400:	mov	r1, r5
   19404:	add	r0, pc, r0
   19408:	bl	11bc4 <strchr@plt>
   1940c:	cmp	r0, #0
   19410:	beq	194b8 <__assert_fail@plt+0x76b4>
   19414:	add	sl, r4, #1
   19418:	mov	r3, #0
   1941c:	mov	r0, sl
   19420:	mov	r1, sp
   19424:	strb	r5, [sp]
   19428:	strb	r3, [sp, #1]
   1942c:	bl	17640 <__assert_fail@plt+0x583c>
   19430:	add	r3, r4, r0
   19434:	str	r0, [r7]
   19438:	ldrsb	r3, [r3, #1]
   1943c:	subs	r5, r5, r3
   19440:	movne	r5, #1
   19444:	cmp	r3, #0
   19448:	moveq	r5, #1
   1944c:	cmp	r5, #0
   19450:	bne	194e8 <__assert_fail@plt+0x76e4>
   19454:	add	r0, r0, #2
   19458:	add	r5, r4, r0
   1945c:	ldrsb	r1, [r4, r0]
   19460:	cmp	r1, #0
   19464:	beq	19478 <__assert_fail@plt+0x7674>
   19468:	mov	r0, r9
   1946c:	bl	11bc4 <strchr@plt>
   19470:	cmp	r0, #0
   19474:	beq	194e8 <__assert_fail@plt+0x76e4>
   19478:	mov	r4, sl
   1947c:	str	r5, [r6]
   19480:	ldr	r2, [sp, #4]
   19484:	ldr	r3, [r8]
   19488:	mov	r0, r4
   1948c:	cmp	r2, r3
   19490:	bne	194fc <__assert_fail@plt+0x76f8>
   19494:	add	sp, sp, #8
   19498:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1949c:	mov	r1, r9
   194a0:	mov	r0, r4
   194a4:	bl	11918 <strcspn@plt>
   194a8:	add	r3, r4, r0
   194ac:	str	r0, [r7]
   194b0:	str	r3, [r6]
   194b4:	b	19480 <__assert_fail@plt+0x767c>
   194b8:	mov	r1, r9
   194bc:	mov	r0, r4
   194c0:	bl	17640 <__assert_fail@plt+0x583c>
   194c4:	str	r0, [r7]
   194c8:	ldrsb	r1, [r4, r0]
   194cc:	add	r5, r4, r0
   194d0:	cmp	r1, #0
   194d4:	beq	194f4 <__assert_fail@plt+0x76f0>
   194d8:	mov	r0, r9
   194dc:	bl	11bc4 <strchr@plt>
   194e0:	cmp	r0, #0
   194e4:	bne	194f4 <__assert_fail@plt+0x76f0>
   194e8:	str	r4, [r6]
   194ec:	mov	r4, #0
   194f0:	b	19480 <__assert_fail@plt+0x767c>
   194f4:	str	r5, [r6]
   194f8:	b	19480 <__assert_fail@plt+0x767c>
   194fc:	bl	11a2c <__stack_chk_fail@plt>
   19500:	andeq	r6, r1, r0, ror sl
   19504:	ldrdeq	r0, [r0], -r8
   19508:	andeq	r5, r0, ip, lsl #19
   1950c:	push	{r4, lr}
   19510:	mov	r4, r0
   19514:	b	19520 <__assert_fail@plt+0x771c>
   19518:	cmp	r0, #10
   1951c:	beq	19538 <__assert_fail@plt+0x7734>
   19520:	mov	r0, r4
   19524:	bl	11c6c <fgetc@plt>
   19528:	cmn	r0, #1
   1952c:	bne	19518 <__assert_fail@plt+0x7714>
   19530:	mov	r0, #1
   19534:	pop	{r4, pc}
   19538:	mov	r0, #0
   1953c:	pop	{r4, pc}
   19540:	push	{r4, r5, r6, lr}
   19544:	mov	r6, r1
   19548:	mov	r5, r2
   1954c:	mov	r4, r0
   19550:	bl	11c9c <__sched_cpualloc@plt>
   19554:	cmp	r0, #0
   19558:	popeq	{r4, r5, r6, pc}
   1955c:	cmp	r6, #0
   19560:	addne	r3, r4, #31
   19564:	lsrne	r3, r3, #5
   19568:	lslne	r3, r3, #2
   1956c:	strne	r3, [r6]
   19570:	cmp	r5, #0
   19574:	addne	r4, r4, #31
   19578:	bicne	r4, r4, #31
   1957c:	strne	r4, [r5]
   19580:	pop	{r4, r5, r6, pc}
   19584:	b	11c3c <__sched_cpufree@plt>
   19588:	ldr	r3, [pc, #212]	; 19664 <__assert_fail@plt+0x7860>
   1958c:	ldr	r2, [pc, #212]	; 19668 <__assert_fail@plt+0x7864>
   19590:	add	r3, pc, r3
   19594:	push	{r4, r5, r6, r7, r8, r9, lr}
   19598:	sub	sp, sp, #12
   1959c:	ldr	r9, [r3, r2]
   195a0:	mov	r7, sp
   195a4:	mov	r1, r7
   195a8:	ldr	r3, [r9]
   195ac:	mov	r2, #0
   195b0:	mov	r0, #2048	; 0x800
   195b4:	str	r3, [sp, #4]
   195b8:	bl	19540 <__assert_fail@plt+0x773c>
   195bc:	subs	r4, r0, #0
   195c0:	movne	r5, #2048	; 0x800
   195c4:	ldrne	r8, [pc, #160]	; 1966c <__assert_fail@plt+0x7868>
   195c8:	bne	195f4 <__assert_fail@plt+0x77f0>
   195cc:	b	19658 <__assert_fail@plt+0x7854>
   195d0:	mov	r0, r4
   195d4:	lsl	r5, r5, #1
   195d8:	bl	19584 <__assert_fail@plt+0x7780>
   195dc:	mov	r0, r5
   195e0:	mov	r2, #0
   195e4:	mov	r1, r7
   195e8:	bl	19540 <__assert_fail@plt+0x773c>
   195ec:	subs	r4, r0, #0
   195f0:	beq	19658 <__assert_fail@plt+0x7854>
   195f4:	ldr	r2, [sp]
   195f8:	mov	r1, #0
   195fc:	mov	r0, r4
   19600:	bl	11c48 <memset@plt>
   19604:	mov	r3, r4
   19608:	ldr	r2, [sp]
   1960c:	mov	r1, #0
   19610:	mov	r0, #242	; 0xf2
   19614:	bl	11ba0 <syscall@plt>
   19618:	subs	r6, r0, #0
   1961c:	bge	19634 <__assert_fail@plt+0x7830>
   19620:	bl	11be8 <__errno_location@plt>
   19624:	ldr	r3, [r0]
   19628:	cmp	r5, r8
   1962c:	cmple	r3, #22
   19630:	beq	195d0 <__assert_fail@plt+0x77cc>
   19634:	mov	r0, r4
   19638:	bl	19584 <__assert_fail@plt+0x7780>
   1963c:	lsl	r0, r6, #3
   19640:	ldr	r2, [sp, #4]
   19644:	ldr	r3, [r9]
   19648:	cmp	r2, r3
   1964c:	bne	19660 <__assert_fail@plt+0x785c>
   19650:	add	sp, sp, #12
   19654:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19658:	mvn	r0, #0
   1965c:	b	19640 <__assert_fail@plt+0x783c>
   19660:	bl	11a2c <__stack_chk_fail@plt>
   19664:	andeq	r6, r1, r4, lsl #17
   19668:	ldrdeq	r0, [r0], -r8
   1966c:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   19670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19674:	lsls	r7, r3, #3
   19678:	sub	sp, sp, #28
   1967c:	mov	sl, r0
   19680:	beq	1981c <__assert_fail@plt+0x7a18>
   19684:	mov	r5, r3
   19688:	ldr	r3, [pc, #404]	; 19824 <__assert_fail@plt+0x7a20>
   1968c:	ldr	fp, [pc, #404]	; 19828 <__assert_fail@plt+0x7a24>
   19690:	add	r3, pc, r3
   19694:	str	r3, [sp, #16]
   19698:	ldr	r3, [pc, #396]	; 1982c <__assert_fail@plt+0x7a28>
   1969c:	mov	r9, r1
   196a0:	add	r3, pc, r3
   196a4:	mov	r1, #0
   196a8:	mov	r6, r2
   196ac:	add	fp, pc, fp
   196b0:	str	r3, [sp, #20]
   196b4:	mov	ip, r1
   196b8:	mov	r8, r0
   196bc:	b	196cc <__assert_fail@plt+0x78c8>
   196c0:	cmp	r7, r4
   196c4:	mov	ip, r4
   196c8:	bls	197a8 <__assert_fail@plt+0x79a4>
   196cc:	cmp	r5, ip, lsr #3
   196d0:	add	r4, ip, #1
   196d4:	bls	196c0 <__assert_fail@plt+0x78bc>
   196d8:	lsr	r2, ip, #5
   196dc:	and	r3, ip, #31
   196e0:	ldr	r2, [r6, r2, lsl #2]
   196e4:	lsr	r3, r2, r3
   196e8:	tst	r3, #1
   196ec:	beq	196c0 <__assert_fail@plt+0x78bc>
   196f0:	cmp	r7, r4
   196f4:	bls	197c0 <__assert_fail@plt+0x79bc>
   196f8:	cmp	r5, r4, lsr #3
   196fc:	bls	197c0 <__assert_fail@plt+0x79bc>
   19700:	lsr	r2, r4, #5
   19704:	and	r3, r4, #31
   19708:	ldr	r2, [r6, r2, lsl #2]
   1970c:	lsr	r3, r2, r3
   19710:	tst	r3, #1
   19714:	beq	197c0 <__assert_fail@plt+0x79bc>
   19718:	sub	r0, r7, #1
   1971c:	sub	r0, r0, ip
   19720:	mov	r2, #1
   19724:	b	19748 <__assert_fail@plt+0x7944>
   19728:	cmp	r5, r3, lsr #3
   1972c:	bls	1975c <__assert_fail@plt+0x7958>
   19730:	ldr	r3, [r6, lr, lsl #2]
   19734:	add	lr, r2, #1
   19738:	lsr	r3, r3, r1
   1973c:	tst	r3, #1
   19740:	beq	1975c <__assert_fail@plt+0x7958>
   19744:	mov	r2, lr
   19748:	add	r3, r2, r4
   1974c:	cmp	r0, r2
   19750:	and	r1, r3, #31
   19754:	lsr	lr, r3, #5
   19758:	bne	19728 <__assert_fail@plt+0x7924>
   1975c:	cmp	r2, #1
   19760:	beq	197f8 <__assert_fail@plt+0x79f4>
   19764:	add	r4, ip, r2
   19768:	str	r4, [sp, #8]
   1976c:	stm	sp, {fp, ip}
   19770:	mvn	r3, #0
   19774:	mov	r2, #1
   19778:	mov	r1, r9
   1977c:	mov	r0, r8
   19780:	bl	11de0 <__snprintf_chk@plt>
   19784:	cmp	r0, r9
   19788:	bcs	197ec <__assert_fail@plt+0x79e8>
   1978c:	add	r4, r4, #1
   19790:	cmp	r7, r4
   19794:	add	r8, r8, r0
   19798:	sub	r9, r9, r0
   1979c:	mov	r1, #1
   197a0:	mov	ip, r4
   197a4:	bhi	196cc <__assert_fail@plt+0x78c8>
   197a8:	sub	r8, r8, r1
   197ac:	mov	r3, #0
   197b0:	mov	r0, sl
   197b4:	strb	r3, [r8]
   197b8:	add	sp, sp, #28
   197bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c0:	ldr	r3, [sp, #16]
   197c4:	str	ip, [sp, #4]
   197c8:	str	r3, [sp]
   197cc:	mov	r2, #1
   197d0:	mvn	r3, #0
   197d4:	mov	r1, r9
   197d8:	mov	r0, r8
   197dc:	mov	r4, ip
   197e0:	bl	11de0 <__snprintf_chk@plt>
   197e4:	cmp	r0, r9
   197e8:	bcc	1978c <__assert_fail@plt+0x7988>
   197ec:	mov	r0, #0
   197f0:	add	sp, sp, #28
   197f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197f8:	ldr	r3, [sp, #20]
   197fc:	str	r4, [sp, #8]
   19800:	str	r3, [sp]
   19804:	str	ip, [sp, #4]
   19808:	mvn	r3, #0
   1980c:	mov	r1, r9
   19810:	mov	r0, r8
   19814:	bl	11de0 <__snprintf_chk@plt>
   19818:	b	19784 <__assert_fail@plt+0x7980>
   1981c:	mov	r8, r0
   19820:	b	197ac <__assert_fail@plt+0x79a8>
   19824:	andeq	r5, r0, r8, lsl #14
   19828:	strdeq	r5, [r0], -r4
   1982c:	strdeq	r5, [r0], -r4
   19830:	lsl	ip, r3, #3
   19834:	subs	ip, ip, #4
   19838:	push	{r4, r5, r6, r7, r8, lr}
   1983c:	mov	r7, r0
   19840:	mov	r6, r0
   19844:	bmi	19960 <__assert_fail@plt+0x7b5c>
   19848:	cmp	r1, #0
   1984c:	beq	19960 <__assert_fail@plt+0x7b5c>
   19850:	mov	r0, #0
   19854:	b	198ac <__assert_fail@plt+0x7aa8>
   19858:	lsr	r8, r5, #5
   1985c:	and	r5, r5, #31
   19860:	ldr	r8, [r2, r8, lsl #2]
   19864:	lsr	r5, r8, r5
   19868:	tst	r5, #1
   1986c:	beq	19924 <__assert_fail@plt+0x7b20>
   19870:	orr	r4, lr, #8
   19874:	cmp	r0, #0
   19878:	moveq	r0, r6
   1987c:	cmp	r4, #9
   19880:	mov	lr, r4
   19884:	addgt	lr, r4, #87	; 0x57
   19888:	ble	19934 <__assert_fail@plt+0x7b30>
   1988c:	mov	r4, r6
   19890:	subs	ip, ip, #4
   19894:	strb	lr, [r4], #1
   19898:	bmi	19948 <__assert_fail@plt+0x7b44>
   1989c:	sub	lr, r4, r7
   198a0:	cmp	lr, r1
   198a4:	beq	19948 <__assert_fail@plt+0x7b44>
   198a8:	mov	r6, r4
   198ac:	cmp	r3, ip, lsr #3
   198b0:	lsrhi	r4, ip, #5
   198b4:	andhi	lr, ip, #31
   198b8:	ldrhi	r4, [r2, r4, lsl #2]
   198bc:	movls	lr, #0
   198c0:	lsrhi	lr, r4, lr
   198c4:	add	r4, ip, #1
   198c8:	andhi	lr, lr, #1
   198cc:	cmp	r3, r4, lsr #3
   198d0:	bls	198ec <__assert_fail@plt+0x7ae8>
   198d4:	lsr	r5, r4, #5
   198d8:	and	r4, r4, #31
   198dc:	ldr	r5, [r2, r5, lsl #2]
   198e0:	lsr	r4, r5, r4
   198e4:	tst	r4, #1
   198e8:	orrne	lr, lr, #2
   198ec:	add	r4, ip, #2
   198f0:	cmp	r3, r4, lsr #3
   198f4:	bls	19910 <__assert_fail@plt+0x7b0c>
   198f8:	lsr	r5, r4, #5
   198fc:	and	r4, r4, #31
   19900:	ldr	r5, [r2, r5, lsl #2]
   19904:	lsr	r4, r5, r4
   19908:	tst	r4, #1
   1990c:	orrne	lr, lr, #4
   19910:	add	r5, ip, #3
   19914:	clz	r4, r0
   19918:	cmp	r3, r5, lsr #3
   1991c:	lsr	r4, r4, #5
   19920:	bhi	19858 <__assert_fail@plt+0x7a54>
   19924:	cmp	lr, #0
   19928:	moveq	r4, #0
   1992c:	cmp	r4, #0
   19930:	movne	r0, r6
   19934:	mov	r4, r6
   19938:	add	lr, lr, #48	; 0x30
   1993c:	subs	ip, ip, #4
   19940:	strb	lr, [r4], #1
   19944:	bpl	1989c <__assert_fail@plt+0x7a98>
   19948:	cmp	r0, #0
   1994c:	mov	r3, #0
   19950:	strb	r3, [r4]
   19954:	popne	{r4, r5, r6, r7, r8, pc}
   19958:	mov	r0, r6
   1995c:	pop	{r4, r5, r6, r7, r8, pc}
   19960:	mov	r3, #0
   19964:	strb	r3, [r6], #-1
   19968:	mov	r0, r6
   1996c:	pop	{r4, r5, r6, r7, r8, pc}
   19970:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19974:	mov	r7, r0
   19978:	mov	r6, r1
   1997c:	mov	r9, r2
   19980:	bl	11bb8 <strlen@plt>
   19984:	cmp	r0, #1
   19988:	sub	r0, r0, #1
   1998c:	add	r4, r7, r0
   19990:	bls	199a0 <__assert_fail@plt+0x7b9c>
   19994:	ldrb	r3, [r7]
   19998:	cmp	r3, #48	; 0x30
   1999c:	beq	19ab0 <__assert_fail@plt+0x7cac>
   199a0:	mov	r2, r9
   199a4:	mov	r1, #0
   199a8:	mov	r0, r6
   199ac:	bl	11c48 <memset@plt>
   199b0:	cmp	r7, r4
   199b4:	movls	r5, #0
   199b8:	movls	r8, #1
   199bc:	bls	19a6c <__assert_fail@plt+0x7c68>
   199c0:	b	19aa8 <__assert_fail@plt+0x7ca4>
   199c4:	sxtb	r0, r3
   199c8:	cmn	r0, #1
   199cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   199d0:	tst	r3, #1
   199d4:	beq	199f0 <__assert_fail@plt+0x7bec>
   199d8:	cmp	r9, r5, lsr #3
   199dc:	lsrhi	r0, r5, #5
   199e0:	andhi	r2, r5, #31
   199e4:	ldrhi	r1, [r6, r0, lsl #2]
   199e8:	orrhi	r2, r1, r8, lsl r2
   199ec:	strhi	r2, [r6, r0, lsl #2]
   199f0:	tst	r3, #2
   199f4:	beq	19a14 <__assert_fail@plt+0x7c10>
   199f8:	add	r2, r5, #1
   199fc:	cmp	r9, r2, lsr #3
   19a00:	lsrhi	r0, r2, #5
   19a04:	andhi	r2, r2, #31
   19a08:	ldrhi	r1, [r6, r0, lsl #2]
   19a0c:	orrhi	r2, r1, r8, lsl r2
   19a10:	strhi	r2, [r6, r0, lsl #2]
   19a14:	tst	r3, #4
   19a18:	beq	19a38 <__assert_fail@plt+0x7c34>
   19a1c:	add	r2, r5, #2
   19a20:	cmp	r9, r2, lsr #3
   19a24:	lsrhi	r0, r2, #5
   19a28:	andhi	r2, r2, #31
   19a2c:	ldrhi	r1, [r6, r0, lsl #2]
   19a30:	orrhi	r2, r1, r8, lsl r2
   19a34:	strhi	r2, [r6, r0, lsl #2]
   19a38:	tst	r3, #8
   19a3c:	beq	19a5c <__assert_fail@plt+0x7c58>
   19a40:	add	r3, r5, #3
   19a44:	cmp	r9, r3, lsr #3
   19a48:	lsrhi	r1, r3, #5
   19a4c:	andhi	r3, r3, #31
   19a50:	ldrhi	r2, [r6, r1, lsl #2]
   19a54:	orrhi	r3, r2, r8, lsl r3
   19a58:	strhi	r3, [r6, r1, lsl #2]
   19a5c:	sub	r4, r4, #1
   19a60:	cmp	r7, r4
   19a64:	add	r5, r5, #4
   19a68:	bhi	19aa8 <__assert_fail@plt+0x7ca4>
   19a6c:	ldrsb	sl, [r4]
   19a70:	cmp	sl, #44	; 0x2c
   19a74:	ldrsbeq	sl, [r4, #-1]
   19a78:	subeq	r4, r4, #1
   19a7c:	sub	r3, sl, #48	; 0x30
   19a80:	cmp	r3, #9
   19a84:	bls	199c4 <__assert_fail@plt+0x7bc0>
   19a88:	bl	11b58 <__ctype_tolower_loc@plt>
   19a8c:	ldr	r3, [r0]
   19a90:	ldr	r3, [r3, sl, lsl #2]
   19a94:	sub	r2, r3, #97	; 0x61
   19a98:	cmp	r2, #5
   19a9c:	bhi	19ac0 <__assert_fail@plt+0x7cbc>
   19aa0:	sub	r3, r3, #87	; 0x57
   19aa4:	b	199d0 <__assert_fail@plt+0x7bcc>
   19aa8:	mov	r0, #0
   19aac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ab0:	ldrb	r3, [r7, #1]
   19ab4:	cmp	r3, #120	; 0x78
   19ab8:	addeq	r7, r7, #2
   19abc:	b	199a0 <__assert_fail@plt+0x7b9c>
   19ac0:	mvn	r0, #0
   19ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ac8:	ldr	ip, [pc, #584]	; 19d18 <__assert_fail@plt+0x7f14>
   19acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ad0:	add	ip, pc, ip
   19ad4:	ldr	lr, [pc, #576]	; 19d1c <__assert_fail@plt+0x7f18>
   19ad8:	mov	r6, r1
   19adc:	sub	sp, sp, #52	; 0x34
   19ae0:	ldr	r1, [ip, lr]
   19ae4:	mov	sl, r0
   19ae8:	mov	lr, r1
   19aec:	str	r1, [sp, #16]
   19af0:	ldr	lr, [lr]
   19af4:	mov	r1, #0
   19af8:	mov	r0, r6
   19afc:	str	r3, [sp, #8]
   19b00:	mov	r4, r2
   19b04:	str	lr, [sp, #44]	; 0x2c
   19b08:	lsl	r5, r2, #3
   19b0c:	bl	11c48 <memset@plt>
   19b10:	mov	r3, #0
   19b14:	str	r3, [sp]
   19b18:	ldr	r3, [pc, #512]	; 19d20 <__assert_fail@plt+0x7f1c>
   19b1c:	cmp	sl, #0
   19b20:	add	r3, pc, r3
   19b24:	str	r3, [sp, #4]
   19b28:	ldr	r3, [pc, #500]	; 19d24 <__assert_fail@plt+0x7f20>
   19b2c:	add	r3, pc, r3
   19b30:	str	r3, [sp, #20]
   19b34:	beq	19c48 <__assert_fail@plt+0x7e44>
   19b38:	mov	r1, #44	; 0x2c
   19b3c:	mov	r0, sl
   19b40:	bl	11bc4 <strchr@plt>
   19b44:	subs	r9, r0, #0
   19b48:	addne	r9, r9, #1
   19b4c:	add	r3, sp, #31
   19b50:	add	r2, sp, #32
   19b54:	ldr	r1, [sp, #4]
   19b58:	mov	r0, sl
   19b5c:	str	r3, [sp, #12]
   19b60:	bl	11d20 <sscanf@plt>
   19b64:	subs	r3, r0, #0
   19b68:	str	r3, [sp]
   19b6c:	ble	19ce0 <__assert_fail@plt+0x7edc>
   19b70:	ldr	fp, [sp, #32]
   19b74:	mov	r7, #1
   19b78:	mov	r1, #45	; 0x2d
   19b7c:	mov	r0, sl
   19b80:	str	fp, [sp, #36]	; 0x24
   19b84:	str	r7, [sp, #40]	; 0x28
   19b88:	bl	11bc4 <strchr@plt>
   19b8c:	subs	r8, r0, #0
   19b90:	beq	19bd4 <__assert_fail@plt+0x7dd0>
   19b94:	mov	r0, sl
   19b98:	mov	r1, #44	; 0x2c
   19b9c:	bl	11bc4 <strchr@plt>
   19ba0:	add	r8, r8, r7
   19ba4:	subs	sl, r0, #0
   19ba8:	beq	19c7c <__assert_fail@plt+0x7e78>
   19bac:	cmp	r8, #0
   19bb0:	add	sl, sl, r7
   19bb4:	beq	19bd4 <__assert_fail@plt+0x7dd0>
   19bb8:	clz	r7, sl
   19bbc:	lsr	r7, r7, #5
   19bc0:	cmp	sl, r8
   19bc4:	movls	r2, r7
   19bc8:	orrhi	r2, r7, #1
   19bcc:	cmp	r2, #0
   19bd0:	bne	19c84 <__assert_fail@plt+0x7e80>
   19bd4:	mov	lr, fp
   19bd8:	ldr	r3, [sp, #8]
   19bdc:	adds	ip, r3, #0
   19be0:	movne	ip, #1
   19be4:	cmp	r5, fp
   19be8:	movhi	r2, #0
   19bec:	andls	r2, ip, #1
   19bf0:	cmp	r2, #0
   19bf4:	bne	19c5c <__assert_fail@plt+0x7e58>
   19bf8:	ldr	r7, [sp, #40]	; 0x28
   19bfc:	mov	r8, #1
   19c00:	b	19c18 <__assert_fail@plt+0x7e14>
   19c04:	cmp	fp, r5
   19c08:	movcc	r3, #0
   19c0c:	andcs	r3, ip, #1
   19c10:	cmp	r3, #0
   19c14:	bne	19c5c <__assert_fail@plt+0x7e58>
   19c18:	cmp	r4, fp, lsr #3
   19c1c:	lsrhi	r1, fp, #5
   19c20:	andhi	r3, fp, #31
   19c24:	ldrhi	r2, [r6, r1, lsl #2]
   19c28:	add	fp, fp, r7
   19c2c:	orrhi	r3, r2, r8, lsl r3
   19c30:	strhi	r3, [r6, r1, lsl #2]
   19c34:	cmp	fp, lr
   19c38:	bls	19c04 <__assert_fail@plt+0x7e00>
   19c3c:	mov	sl, r9
   19c40:	cmp	sl, #0
   19c44:	bne	19b38 <__assert_fail@plt+0x7d34>
   19c48:	ldr	r3, [sp]
   19c4c:	sub	r0, r3, #2
   19c50:	clz	r0, r0
   19c54:	lsr	r0, r0, #5
   19c58:	b	19c60 <__assert_fail@plt+0x7e5c>
   19c5c:	mov	r0, #2
   19c60:	ldr	r3, [sp, #16]
   19c64:	ldr	r2, [sp, #44]	; 0x2c
   19c68:	ldr	r3, [r3]
   19c6c:	cmp	r2, r3
   19c70:	bne	19d14 <__assert_fail@plt+0x7f10>
   19c74:	add	sp, sp, #52	; 0x34
   19c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c7c:	cmp	r8, #0
   19c80:	beq	19bd4 <__assert_fail@plt+0x7dd0>
   19c84:	ldr	r3, [sp, #12]
   19c88:	add	r2, sp, #36	; 0x24
   19c8c:	ldr	r1, [sp, #20]
   19c90:	mov	r0, r8
   19c94:	bl	11d20 <sscanf@plt>
   19c98:	subs	r3, r0, #0
   19c9c:	str	r3, [sp]
   19ca0:	ble	19ce0 <__assert_fail@plt+0x7edc>
   19ca4:	mov	r0, r8
   19ca8:	mov	r1, #58	; 0x3a
   19cac:	bl	11bc4 <strchr@plt>
   19cb0:	cmp	r0, #0
   19cb4:	beq	19cd0 <__assert_fail@plt+0x7ecc>
   19cb8:	adds	r0, r0, #1
   19cbc:	beq	19cd0 <__assert_fail@plt+0x7ecc>
   19cc0:	cmp	r0, sl
   19cc4:	orrcc	r7, r7, #1
   19cc8:	cmp	r7, #0
   19ccc:	bne	19ce8 <__assert_fail@plt+0x7ee4>
   19cd0:	ldr	fp, [sp, #32]
   19cd4:	ldr	lr, [sp, #36]	; 0x24
   19cd8:	cmp	fp, lr
   19cdc:	bls	19bd8 <__assert_fail@plt+0x7dd4>
   19ce0:	mov	r0, #1
   19ce4:	b	19c60 <__assert_fail@plt+0x7e5c>
   19ce8:	ldr	r3, [sp, #12]
   19cec:	add	r2, sp, #40	; 0x28
   19cf0:	ldr	r1, [sp, #20]
   19cf4:	bl	11d20 <sscanf@plt>
   19cf8:	subs	r3, r0, #0
   19cfc:	str	r3, [sp]
   19d00:	ble	19ce0 <__assert_fail@plt+0x7edc>
   19d04:	ldr	r3, [sp, #40]	; 0x28
   19d08:	cmp	r3, #0
   19d0c:	bne	19cd0 <__assert_fail@plt+0x7ecc>
   19d10:	b	19ce0 <__assert_fail@plt+0x7edc>
   19d14:	bl	11a2c <__stack_chk_fail@plt>
   19d18:	andeq	r6, r1, r4, asr #6
   19d1c:	ldrdeq	r0, [r0], -r8
   19d20:	andeq	r5, r0, ip, lsl #5
   19d24:	andeq	r5, r0, r0, lsl #5
   19d28:	push	{r1, r2, r3}
   19d2c:	subs	r3, r0, #0
   19d30:	ldr	r1, [pc, #168]	; 19de0 <__assert_fail@plt+0x7fdc>
   19d34:	ldr	r2, [pc, #168]	; 19de4 <__assert_fail@plt+0x7fe0>
   19d38:	add	r1, pc, r1
   19d3c:	push	{r4, r5, r6, lr}
   19d40:	sub	sp, sp, #12
   19d44:	ldr	r5, [r1, r2]
   19d48:	ldr	r6, [sp, #28]
   19d4c:	ldr	r2, [r5]
   19d50:	str	r2, [sp, #4]
   19d54:	beq	19d6c <__assert_fail@plt+0x7f68>
   19d58:	ldr	r2, [pc, #136]	; 19de8 <__assert_fail@plt+0x7fe4>
   19d5c:	add	r2, pc, r2
   19d60:	ldr	r2, [r2]
   19d64:	tst	r2, #16777216	; 0x1000000
   19d68:	beq	19dbc <__assert_fail@plt+0x7fb8>
   19d6c:	ldr	r3, [pc, #120]	; 19dec <__assert_fail@plt+0x7fe8>
   19d70:	ldr	r4, [r1, r3]
   19d74:	add	ip, sp, #32
   19d78:	mov	r2, r6
   19d7c:	mov	r3, ip
   19d80:	mov	r1, #1
   19d84:	ldr	r0, [r4]
   19d88:	str	ip, [sp]
   19d8c:	bl	11b40 <__vfprintf_chk@plt>
   19d90:	ldr	r1, [r4]
   19d94:	mov	r0, #10
   19d98:	bl	11d14 <fputc@plt>
   19d9c:	ldr	r2, [sp, #4]
   19da0:	ldr	r3, [r5]
   19da4:	cmp	r2, r3
   19da8:	bne	19ddc <__assert_fail@plt+0x7fd8>
   19dac:	add	sp, sp, #12
   19db0:	pop	{r4, r5, r6, lr}
   19db4:	add	sp, sp, #12
   19db8:	bx	lr
   19dbc:	ldr	r0, [pc, #40]	; 19dec <__assert_fail@plt+0x7fe8>
   19dc0:	ldr	r2, [pc, #40]	; 19df0 <__assert_fail@plt+0x7fec>
   19dc4:	ldr	r4, [r1, r0]
   19dc8:	add	r2, pc, r2
   19dcc:	mov	r1, #1
   19dd0:	ldr	r0, [r4]
   19dd4:	bl	11cb4 <__fprintf_chk@plt>
   19dd8:	b	19d74 <__assert_fail@plt+0x7f70>
   19ddc:	bl	11a2c <__stack_chk_fail@plt>
   19de0:	ldrdeq	r6, [r1], -ip
   19de4:	ldrdeq	r0, [r0], -r8
   19de8:	ldrdeq	r6, [r1], -r0
   19dec:	ldrdeq	r0, [r0], -ip
   19df0:	andeq	r5, r0, r4, lsl r0
   19df4:	push	{r0, r1, r2, r3}
   19df8:	ldr	r0, [pc, #104]	; 19e68 <__assert_fail@plt+0x8064>
   19dfc:	ldr	r2, [pc, #104]	; 19e6c <__assert_fail@plt+0x8068>
   19e00:	add	r0, pc, r0
   19e04:	push	{r4, r5, lr}
   19e08:	sub	sp, sp, #12
   19e0c:	ldr	r4, [r0, r2]
   19e10:	ldr	r1, [pc, #88]	; 19e70 <__assert_fail@plt+0x806c>
   19e14:	add	r3, sp, #28
   19e18:	ldr	ip, [r4]
   19e1c:	str	r3, [sp]
   19e20:	str	ip, [sp, #4]
   19e24:	ldr	r5, [r0, r1]
   19e28:	ldr	r2, [sp, #24]
   19e2c:	mov	r1, #1
   19e30:	ldr	r0, [r5]
   19e34:	bl	11b40 <__vfprintf_chk@plt>
   19e38:	ldr	r1, [r5]
   19e3c:	mov	r0, #10
   19e40:	bl	11d14 <fputc@plt>
   19e44:	ldr	r2, [sp, #4]
   19e48:	ldr	r3, [r4]
   19e4c:	cmp	r2, r3
   19e50:	bne	19e64 <__assert_fail@plt+0x8060>
   19e54:	add	sp, sp, #12
   19e58:	pop	{r4, r5, lr}
   19e5c:	add	sp, sp, #16
   19e60:	bx	lr
   19e64:	bl	11a2c <__stack_chk_fail@plt>
   19e68:	andeq	r6, r1, r4, lsl r0
   19e6c:	ldrdeq	r0, [r0], -r8
   19e70:	ldrdeq	r0, [r0], -ip
   19e74:	ldr	r1, [r0, #12]
   19e78:	ldr	r2, [r0, #4]
   19e7c:	cmp	r1, #0
   19e80:	push	{r4, lr}
   19e84:	moveq	r4, r2
   19e88:	sub	sp, sp, #16
   19e8c:	beq	19ee0 <__assert_fail@plt+0x80dc>
   19e90:	cmp	r2, #0
   19e94:	beq	19f08 <__assert_fail@plt+0x8104>
   19e98:	ldrsb	r3, [r2]
   19e9c:	ldr	ip, [pc, #116]	; 19f18 <__assert_fail@plt+0x8114>
   19ea0:	add	r4, r0, #16
   19ea4:	cmp	r3, #47	; 0x2f
   19ea8:	addeq	r2, r2, #1
   19eac:	add	ip, pc, ip
   19eb0:	mov	r3, #4096	; 0x1000
   19eb4:	stmib	sp, {r1, r2}
   19eb8:	mov	r0, r4
   19ebc:	str	ip, [sp]
   19ec0:	mov	r1, r3
   19ec4:	mov	r2, #1
   19ec8:	bl	11de0 <__snprintf_chk@plt>
   19ecc:	cmp	r0, #0
   19ed0:	movlt	r4, #0
   19ed4:	blt	19ee0 <__assert_fail@plt+0x80dc>
   19ed8:	cmp	r0, #4096	; 0x1000
   19edc:	bge	19eec <__assert_fail@plt+0x80e8>
   19ee0:	mov	r0, r4
   19ee4:	add	sp, sp, #16
   19ee8:	pop	{r4, pc}
   19eec:	bl	11be8 <__errno_location@plt>
   19ef0:	mov	r4, #0
   19ef4:	mov	r3, #36	; 0x24
   19ef8:	str	r3, [r0]
   19efc:	mov	r0, r4
   19f00:	add	sp, sp, #16
   19f04:	pop	{r4, pc}
   19f08:	mov	r4, r1
   19f0c:	mov	r0, r4
   19f10:	add	sp, sp, #16
   19f14:	pop	{r4, pc}
   19f18:	andeq	r4, r0, r8, lsr pc
   19f1c:	push	{r4, lr}
   19f20:	sub	sp, sp, #8
   19f24:	add	r4, r0, #16
   19f28:	mov	r3, #4096	; 0x1000
   19f2c:	stm	sp, {r1, r2}
   19f30:	mov	r0, r4
   19f34:	mov	r1, r3
   19f38:	mov	r2, #1
   19f3c:	bl	119cc <__vsnprintf_chk@plt>
   19f40:	cmp	r0, #0
   19f44:	movlt	r4, #0
   19f48:	blt	19f54 <__assert_fail@plt+0x8150>
   19f4c:	cmp	r0, #4096	; 0x1000
   19f50:	bge	19f60 <__assert_fail@plt+0x815c>
   19f54:	mov	r0, r4
   19f58:	add	sp, sp, #8
   19f5c:	pop	{r4, pc}
   19f60:	bl	11be8 <__errno_location@plt>
   19f64:	mov	r4, #0
   19f68:	mov	r3, #36	; 0x24
   19f6c:	str	r3, [r0]
   19f70:	mov	r0, r4
   19f74:	add	sp, sp, #8
   19f78:	pop	{r4, pc}
   19f7c:	push	{r4, r5, r6, r7, lr}
   19f80:	sub	sp, sp, #20
   19f84:	ldr	r4, [pc, #312]	; 1a0c4 <__assert_fail@plt+0x82c0>
   19f88:	ldr	r3, [pc, #312]	; 1a0c8 <__assert_fail@plt+0x82c4>
   19f8c:	add	r4, pc, r4
   19f90:	ldr	r7, [pc, #308]	; 1a0cc <__assert_fail@plt+0x82c8>
   19f94:	ldr	r5, [r4, r3]
   19f98:	add	r7, pc, r7
   19f9c:	ldr	r6, [r7]
   19fa0:	ldr	r3, [r5]
   19fa4:	cmp	r6, #0
   19fa8:	str	r3, [sp, #12]
   19fac:	beq	19fc8 <__assert_fail@plt+0x81c4>
   19fb0:	ldr	r2, [sp, #12]
   19fb4:	ldr	r3, [r5]
   19fb8:	cmp	r2, r3
   19fbc:	bne	1a0c0 <__assert_fail@plt+0x82bc>
   19fc0:	add	sp, sp, #20
   19fc4:	pop	{r4, r5, r6, r7, pc}
   19fc8:	ldr	r0, [pc, #256]	; 1a0d0 <__assert_fail@plt+0x82cc>
   19fcc:	add	r0, pc, r0
   19fd0:	bl	11af8 <getenv@plt>
   19fd4:	cmp	r0, #0
   19fd8:	beq	1a020 <__assert_fail@plt+0x821c>
   19fdc:	mov	r2, r6
   19fe0:	add	r1, sp, #8
   19fe4:	bl	11bac <strtoul@plt>
   19fe8:	mov	r6, r0
   19fec:	ldr	r0, [sp, #8]
   19ff0:	cmp	r0, #0
   19ff4:	beq	1a00c <__assert_fail@plt+0x8208>
   19ff8:	ldr	r1, [pc, #212]	; 1a0d4 <__assert_fail@plt+0x82d0>
   19ffc:	add	r1, pc, r1
   1a000:	bl	118f4 <strcmp@plt>
   1a004:	cmp	r0, #0
   1a008:	beq	1a034 <__assert_fail@plt+0x8230>
   1a00c:	ldr	r3, [pc, #196]	; 1a0d8 <__assert_fail@plt+0x82d4>
   1a010:	cmp	r6, #0
   1a014:	add	r3, pc, r3
   1a018:	str	r6, [r3]
   1a01c:	bne	1a040 <__assert_fail@plt+0x823c>
   1a020:	mov	r3, #2
   1a024:	ldr	r2, [pc, #176]	; 1a0dc <__assert_fail@plt+0x82d8>
   1a028:	add	r2, pc, r2
   1a02c:	str	r3, [r2]
   1a030:	b	19fb0 <__assert_fail@plt+0x81ac>
   1a034:	ldr	r3, [pc, #164]	; 1a0e0 <__assert_fail@plt+0x82dc>
   1a038:	mov	r6, r3
   1a03c:	str	r3, [r7]
   1a040:	bl	11954 <getuid@plt>
   1a044:	mov	r7, r0
   1a048:	bl	11a68 <geteuid@plt>
   1a04c:	cmp	r7, r0
   1a050:	beq	1a0a4 <__assert_fail@plt+0x82a0>
   1a054:	ldr	r7, [pc, #136]	; 1a0e4 <__assert_fail@plt+0x82e0>
   1a058:	ldr	r2, [pc, #136]	; 1a0e8 <__assert_fail@plt+0x82e4>
   1a05c:	add	r7, pc, r7
   1a060:	orr	r3, r6, #16777216	; 0x1000000
   1a064:	str	r3, [r7]
   1a068:	ldr	r3, [r4, r2]
   1a06c:	ldr	r4, [r3]
   1a070:	bl	11b88 <getpid@plt>
   1a074:	ldr	r3, [pc, #112]	; 1a0ec <__assert_fail@plt+0x82e8>
   1a078:	ldr	r2, [pc, #112]	; 1a0f0 <__assert_fail@plt+0x82ec>
   1a07c:	add	r3, pc, r3
   1a080:	str	r3, [sp]
   1a084:	add	r2, pc, r2
   1a088:	mov	r1, #1
   1a08c:	mov	r3, r0
   1a090:	mov	r0, r4
   1a094:	bl	11cb4 <__fprintf_chk@plt>
   1a098:	ldr	r3, [r7]
   1a09c:	orr	r3, r3, #2
   1a0a0:	b	1a024 <__assert_fail@plt+0x8220>
   1a0a4:	bl	11c30 <getgid@plt>
   1a0a8:	mov	r7, r0
   1a0ac:	bl	11a8c <getegid@plt>
   1a0b0:	cmp	r7, r0
   1a0b4:	orreq	r3, r6, #2
   1a0b8:	bne	1a054 <__assert_fail@plt+0x8250>
   1a0bc:	b	1a024 <__assert_fail@plt+0x8220>
   1a0c0:	bl	11a2c <__stack_chk_fail@plt>
   1a0c4:	andeq	r5, r1, r8, lsl #29
   1a0c8:	ldrdeq	r0, [r0], -r8
   1a0cc:	muleq	r1, r4, r0
   1a0d0:	andeq	r4, r0, r0, lsr #28
   1a0d4:	ldrdeq	r3, [r0], -ip
   1a0d8:	andeq	r6, r1, r8, lsl r0
   1a0dc:	andeq	r6, r1, r4
   1a0e0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1a0e4:	ldrdeq	r5, [r1], -r0
   1a0e8:	ldrdeq	r0, [r0], -ip
   1a0ec:			; <UNDEFINED> instruction: 0x00004dbc
   1a0f0:	andeq	r4, r0, r8, ror sp
   1a0f4:	cmp	r0, #0
   1a0f8:	ldrne	r3, [r0, #8]
   1a0fc:	addne	r3, r3, #1
   1a100:	strne	r3, [r0, #8]
   1a104:	bx	lr
   1a108:	ldr	r2, [pc, #228]	; 1a1f4 <__assert_fail@plt+0x83f0>
   1a10c:	push	{r4, r5, lr}
   1a110:	subs	r4, r0, #0
   1a114:	sub	sp, sp, #12
   1a118:	add	r2, pc, r2
   1a11c:	beq	1a134 <__assert_fail@plt+0x8330>
   1a120:	ldr	r3, [r4, #8]
   1a124:	sub	r3, r3, #1
   1a128:	cmp	r3, #0
   1a12c:	str	r3, [r4, #8]
   1a130:	ble	1a13c <__assert_fail@plt+0x8338>
   1a134:	add	sp, sp, #12
   1a138:	pop	{r4, r5, pc}
   1a13c:	ldr	r3, [pc, #180]	; 1a1f8 <__assert_fail@plt+0x83f4>
   1a140:	add	r3, pc, r3
   1a144:	ldr	r3, [r3]
   1a148:	tst	r3, #4
   1a14c:	bne	1a1a0 <__assert_fail@plt+0x839c>
   1a150:	add	r3, r4, #4096	; 0x1000
   1a154:	ldr	r2, [r3, #16]
   1a158:	cmp	r2, #0
   1a15c:	beq	1a16c <__assert_fail@plt+0x8368>
   1a160:	ldr	r3, [r3, #20]
   1a164:	mov	r0, r4
   1a168:	blx	r3
   1a16c:	ldr	r0, [r4]
   1a170:	cmp	r0, #0
   1a174:	bge	1a198 <__assert_fail@plt+0x8394>
   1a178:	ldr	r0, [r4, #4]
   1a17c:	bl	1196c <free@plt>
   1a180:	ldr	r0, [r4, #12]
   1a184:	bl	1196c <free@plt>
   1a188:	mov	r0, r4
   1a18c:	add	sp, sp, #12
   1a190:	pop	{r4, r5, lr}
   1a194:	b	1196c <free@plt>
   1a198:	bl	11dc8 <close@plt>
   1a19c:	b	1a178 <__assert_fail@plt+0x8374>
   1a1a0:	ldr	r3, [pc, #84]	; 1a1fc <__assert_fail@plt+0x83f8>
   1a1a4:	ldr	r3, [r2, r3]
   1a1a8:	ldr	r5, [r3]
   1a1ac:	bl	11b88 <getpid@plt>
   1a1b0:	ldr	r2, [pc, #72]	; 1a200 <__assert_fail@plt+0x83fc>
   1a1b4:	ldr	r3, [pc, #72]	; 1a204 <__assert_fail@plt+0x8400>
   1a1b8:	add	r2, pc, r2
   1a1bc:	str	r2, [sp, #4]
   1a1c0:	ldr	r2, [pc, #64]	; 1a208 <__assert_fail@plt+0x8404>
   1a1c4:	add	r3, pc, r3
   1a1c8:	str	r3, [sp]
   1a1cc:	add	r2, pc, r2
   1a1d0:	mov	r1, #1
   1a1d4:	mov	r3, r0
   1a1d8:	mov	r0, r5
   1a1dc:	bl	11cb4 <__fprintf_chk@plt>
   1a1e0:	ldr	r1, [pc, #36]	; 1a20c <__assert_fail@plt+0x8408>
   1a1e4:	mov	r0, r4
   1a1e8:	add	r1, pc, r1
   1a1ec:	bl	19d28 <__assert_fail@plt+0x7f24>
   1a1f0:	b	1a150 <__assert_fail@plt+0x834c>
   1a1f4:	strdeq	r5, [r1], -ip
   1a1f8:	andeq	r5, r1, ip, ror #29
   1a1fc:	ldrdeq	r0, [r0], -ip
   1a200:	muleq	r0, r8, ip
   1a204:	andeq	r4, r0, r4, ror ip
   1a208:	andeq	r4, r0, r4, ror ip
   1a20c:	andeq	r4, r0, ip, ror #24
   1a210:	push	{r0, r1, r2, r3}
   1a214:	mov	r0, #1
   1a218:	push	{r4, r5, r6, r7, lr}
   1a21c:	sub	sp, sp, #20
   1a220:	ldr	r5, [pc, #264]	; 1a330 <__assert_fail@plt+0x852c>
   1a224:	ldr	r3, [pc, #264]	; 1a334 <__assert_fail@plt+0x8530>
   1a228:	add	r5, pc, r5
   1a22c:	ldr	r1, [pc, #260]	; 1a338 <__assert_fail@plt+0x8534>
   1a230:	ldr	r6, [r5, r3]
   1a234:	ldr	r7, [sp, #40]	; 0x28
   1a238:	ldr	r3, [r6]
   1a23c:	str	r3, [sp, #12]
   1a240:	bl	118b8 <calloc@plt>
   1a244:	subs	r4, r0, #0
   1a248:	beq	1a2a4 <__assert_fail@plt+0x84a0>
   1a24c:	ldr	r3, [pc, #232]	; 1a33c <__assert_fail@plt+0x8538>
   1a250:	add	r3, pc, r3
   1a254:	ldr	r3, [r3]
   1a258:	tst	r3, #4
   1a25c:	bne	1a2c8 <__assert_fail@plt+0x84c4>
   1a260:	mov	r1, #1
   1a264:	mvn	r3, #0
   1a268:	cmp	r7, #0
   1a26c:	str	r1, [r4, #8]
   1a270:	str	r3, [r4]
   1a274:	beq	1a2a4 <__assert_fail@plt+0x84a0>
   1a278:	add	ip, sp, #44	; 0x2c
   1a27c:	mov	r2, r7
   1a280:	mov	r3, ip
   1a284:	add	r0, r4, #4
   1a288:	str	ip, [sp, #8]
   1a28c:	bl	11c18 <__vasprintf_chk@plt>
   1a290:	cmp	r0, #0
   1a294:	blt	1a31c <__assert_fail@plt+0x8518>
   1a298:	ldr	r3, [r4, #4]
   1a29c:	cmp	r3, #0
   1a2a0:	beq	1a31c <__assert_fail@plt+0x8518>
   1a2a4:	ldr	r2, [sp, #12]
   1a2a8:	ldr	r3, [r6]
   1a2ac:	mov	r0, r4
   1a2b0:	cmp	r2, r3
   1a2b4:	bne	1a32c <__assert_fail@plt+0x8528>
   1a2b8:	add	sp, sp, #20
   1a2bc:	pop	{r4, r5, r6, r7, lr}
   1a2c0:	add	sp, sp, #16
   1a2c4:	bx	lr
   1a2c8:	ldr	r3, [pc, #112]	; 1a340 <__assert_fail@plt+0x853c>
   1a2cc:	ldr	r3, [r5, r3]
   1a2d0:	ldr	r5, [r3]
   1a2d4:	bl	11b88 <getpid@plt>
   1a2d8:	ldr	r2, [pc, #100]	; 1a344 <__assert_fail@plt+0x8540>
   1a2dc:	ldr	r3, [pc, #100]	; 1a348 <__assert_fail@plt+0x8544>
   1a2e0:	add	r2, pc, r2
   1a2e4:	str	r2, [sp, #4]
   1a2e8:	ldr	r2, [pc, #92]	; 1a34c <__assert_fail@plt+0x8548>
   1a2ec:	add	r3, pc, r3
   1a2f0:	str	r3, [sp]
   1a2f4:	add	r2, pc, r2
   1a2f8:	mov	r1, #1
   1a2fc:	mov	r3, r0
   1a300:	mov	r0, r5
   1a304:	bl	11cb4 <__fprintf_chk@plt>
   1a308:	ldr	r1, [pc, #64]	; 1a350 <__assert_fail@plt+0x854c>
   1a30c:	mov	r0, r4
   1a310:	add	r1, pc, r1
   1a314:	bl	19d28 <__assert_fail@plt+0x7f24>
   1a318:	b	1a260 <__assert_fail@plt+0x845c>
   1a31c:	mov	r0, r4
   1a320:	bl	1a108 <__assert_fail@plt+0x8304>
   1a324:	mov	r4, #0
   1a328:	b	1a2a4 <__assert_fail@plt+0x84a0>
   1a32c:	bl	11a2c <__stack_chk_fail@plt>
   1a330:	andeq	r5, r1, ip, ror #23
   1a334:	ldrdeq	r0, [r0], -r8
   1a338:	andeq	r1, r0, ip, lsl r0
   1a33c:	ldrdeq	r5, [r1], -ip
   1a340:	ldrdeq	r0, [r0], -ip
   1a344:	andeq	r4, r0, r0, ror fp
   1a348:	andeq	r4, r0, ip, asr #22
   1a34c:	andeq	r4, r0, ip, asr #22
   1a350:	andeq	r4, r0, ip, asr #22
   1a354:	ldr	r3, [r0]
   1a358:	push	{r4, r5, r6, lr}
   1a35c:	cmp	r3, #0
   1a360:	ldr	r6, [pc, #220]	; 1a444 <__assert_fail@plt+0x8640>
   1a364:	sub	sp, sp, #8
   1a368:	add	r6, pc, r6
   1a36c:	bge	1a424 <__assert_fail@plt+0x8620>
   1a370:	cmp	r1, #0
   1a374:	mov	r5, r0
   1a378:	beq	1a414 <__assert_fail@plt+0x8610>
   1a37c:	mov	r0, r1
   1a380:	bl	11a20 <strdup@plt>
   1a384:	subs	r4, r0, #0
   1a388:	beq	1a41c <__assert_fail@plt+0x8618>
   1a38c:	ldr	r0, [r5, #12]
   1a390:	bl	1196c <free@plt>
   1a394:	ldr	r3, [pc, #172]	; 1a448 <__assert_fail@plt+0x8644>
   1a398:	str	r4, [r5, #12]
   1a39c:	add	r3, pc, r3
   1a3a0:	ldr	r0, [r3]
   1a3a4:	ands	r0, r0, #4
   1a3a8:	bne	1a3b4 <__assert_fail@plt+0x85b0>
   1a3ac:	add	sp, sp, #8
   1a3b0:	pop	{r4, r5, r6, pc}
   1a3b4:	ldr	r3, [pc, #144]	; 1a44c <__assert_fail@plt+0x8648>
   1a3b8:	ldr	r3, [r6, r3]
   1a3bc:	ldr	r6, [r3]
   1a3c0:	bl	11b88 <getpid@plt>
   1a3c4:	ldr	r2, [pc, #132]	; 1a450 <__assert_fail@plt+0x864c>
   1a3c8:	ldr	r3, [pc, #132]	; 1a454 <__assert_fail@plt+0x8650>
   1a3cc:	add	r2, pc, r2
   1a3d0:	str	r2, [sp, #4]
   1a3d4:	ldr	r2, [pc, #124]	; 1a458 <__assert_fail@plt+0x8654>
   1a3d8:	add	r3, pc, r3
   1a3dc:	str	r3, [sp]
   1a3e0:	add	r2, pc, r2
   1a3e4:	mov	r1, #1
   1a3e8:	mov	r3, r0
   1a3ec:	mov	r0, r6
   1a3f0:	bl	11cb4 <__fprintf_chk@plt>
   1a3f4:	ldr	r1, [pc, #96]	; 1a45c <__assert_fail@plt+0x8658>
   1a3f8:	mov	r0, r5
   1a3fc:	mov	r2, r4
   1a400:	add	r1, pc, r1
   1a404:	bl	19d28 <__assert_fail@plt+0x7f24>
   1a408:	mov	r0, #0
   1a40c:	add	sp, sp, #8
   1a410:	pop	{r4, r5, r6, pc}
   1a414:	mov	r4, r1
   1a418:	b	1a38c <__assert_fail@plt+0x8588>
   1a41c:	mvn	r0, #11
   1a420:	b	1a3ac <__assert_fail@plt+0x85a8>
   1a424:	ldr	r3, [pc, #52]	; 1a460 <__assert_fail@plt+0x865c>
   1a428:	ldr	r1, [pc, #52]	; 1a464 <__assert_fail@plt+0x8660>
   1a42c:	ldr	r0, [pc, #52]	; 1a468 <__assert_fail@plt+0x8664>
   1a430:	add	r3, pc, r3
   1a434:	mov	r2, #109	; 0x6d
   1a438:	add	r1, pc, r1
   1a43c:	add	r0, pc, r0
   1a440:	bl	11e04 <__assert_fail@plt>
   1a444:	andeq	r5, r1, ip, lsr #21
   1a448:	muleq	r1, r0, ip
   1a44c:	ldrdeq	r0, [r0], -ip
   1a450:	andeq	r4, r0, r4, lsl #21
   1a454:	andeq	r4, r0, r0, ror #20
   1a458:	andeq	r4, r0, r0, ror #20
   1a45c:	andeq	r4, r0, r0, lsl #21
   1a460:	andeq	r4, r0, r4, lsl #19
   1a464:	andeq	r4, r0, ip, lsr #20
   1a468:	andeq	r4, r0, r4, lsr sl
   1a46c:	cmp	r0, #0
   1a470:	ldrne	r0, [r0, #12]
   1a474:	bx	lr
   1a478:	push	{r4, r5, r6, lr}
   1a47c:	subs	r5, r1, #0
   1a480:	ldr	r6, [pc, #196]	; 1a54c <__assert_fail@plt+0x8748>
   1a484:	sub	sp, sp, #8
   1a488:	mov	r4, r0
   1a48c:	add	r6, pc, r6
   1a490:	beq	1a4a4 <__assert_fail@plt+0x86a0>
   1a494:	mov	r0, r5
   1a498:	bl	11a20 <strdup@plt>
   1a49c:	subs	r5, r0, #0
   1a4a0:	beq	1a544 <__assert_fail@plt+0x8740>
   1a4a4:	ldr	r0, [r4]
   1a4a8:	cmp	r0, #0
   1a4ac:	blt	1a4bc <__assert_fail@plt+0x86b8>
   1a4b0:	bl	11dc8 <close@plt>
   1a4b4:	mvn	r3, #0
   1a4b8:	str	r3, [r4]
   1a4bc:	ldr	r0, [r4, #4]
   1a4c0:	bl	1196c <free@plt>
   1a4c4:	ldr	r3, [pc, #132]	; 1a550 <__assert_fail@plt+0x874c>
   1a4c8:	str	r5, [r4, #4]
   1a4cc:	add	r3, pc, r3
   1a4d0:	ldr	r3, [r3]
   1a4d4:	ands	r0, r3, #4
   1a4d8:	bne	1a4e4 <__assert_fail@plt+0x86e0>
   1a4dc:	add	sp, sp, #8
   1a4e0:	pop	{r4, r5, r6, pc}
   1a4e4:	ldr	r3, [pc, #104]	; 1a554 <__assert_fail@plt+0x8750>
   1a4e8:	ldr	r3, [r6, r3]
   1a4ec:	ldr	r6, [r3]
   1a4f0:	bl	11b88 <getpid@plt>
   1a4f4:	ldr	r2, [pc, #92]	; 1a558 <__assert_fail@plt+0x8754>
   1a4f8:	ldr	r3, [pc, #92]	; 1a55c <__assert_fail@plt+0x8758>
   1a4fc:	add	r2, pc, r2
   1a500:	str	r2, [sp, #4]
   1a504:	ldr	r2, [pc, #84]	; 1a560 <__assert_fail@plt+0x875c>
   1a508:	add	r3, pc, r3
   1a50c:	str	r3, [sp]
   1a510:	add	r2, pc, r2
   1a514:	mov	r1, #1
   1a518:	mov	r3, r0
   1a51c:	mov	r0, r6
   1a520:	bl	11cb4 <__fprintf_chk@plt>
   1a524:	ldr	r1, [pc, #56]	; 1a564 <__assert_fail@plt+0x8760>
   1a528:	mov	r0, r4
   1a52c:	mov	r2, r5
   1a530:	add	r1, pc, r1
   1a534:	bl	19d28 <__assert_fail@plt+0x7f24>
   1a538:	mov	r0, #0
   1a53c:	add	sp, sp, #8
   1a540:	pop	{r4, r5, r6, pc}
   1a544:	mvn	r0, #11
   1a548:	b	1a4dc <__assert_fail@plt+0x86d8>
   1a54c:	andeq	r5, r1, r8, lsl #19
   1a550:	andeq	r5, r1, r0, ror #22
   1a554:	ldrdeq	r0, [r0], -ip
   1a558:	andeq	r4, r0, r4, asr r9
   1a55c:	andeq	r4, r0, r0, lsr r9
   1a560:	andeq	r4, r0, r0, lsr r9
   1a564:	andeq	r4, r0, r4, ror #18
   1a568:	cmp	r0, #0
   1a56c:	ldrne	r0, [r0, #4]
   1a570:	bx	lr
   1a574:	ldr	r3, [pc, #144]	; 1a60c <__assert_fail@plt+0x8808>
   1a578:	add	ip, r0, #4096	; 0x1000
   1a57c:	add	r3, pc, r3
   1a580:	str	r1, [ip, #16]
   1a584:	ldr	r3, [r3]
   1a588:	str	r2, [ip, #20]
   1a58c:	tst	r3, #4
   1a590:	ldr	r3, [pc, #120]	; 1a610 <__assert_fail@plt+0x880c>
   1a594:	add	r3, pc, r3
   1a598:	bne	1a5a4 <__assert_fail@plt+0x87a0>
   1a59c:	mov	r0, #0
   1a5a0:	bx	lr
   1a5a4:	ldr	r2, [pc, #104]	; 1a614 <__assert_fail@plt+0x8810>
   1a5a8:	push	{r4, r5, lr}
   1a5ac:	sub	sp, sp, #12
   1a5b0:	ldr	r3, [r3, r2]
   1a5b4:	mov	r4, r0
   1a5b8:	ldr	r5, [r3]
   1a5bc:	bl	11b88 <getpid@plt>
   1a5c0:	ldr	r2, [pc, #80]	; 1a618 <__assert_fail@plt+0x8814>
   1a5c4:	ldr	r3, [pc, #80]	; 1a61c <__assert_fail@plt+0x8818>
   1a5c8:	add	r2, pc, r2
   1a5cc:	str	r2, [sp, #4]
   1a5d0:	ldr	r2, [pc, #72]	; 1a620 <__assert_fail@plt+0x881c>
   1a5d4:	add	r3, pc, r3
   1a5d8:	str	r3, [sp]
   1a5dc:	add	r2, pc, r2
   1a5e0:	mov	r1, #1
   1a5e4:	mov	r3, r0
   1a5e8:	mov	r0, r5
   1a5ec:	bl	11cb4 <__fprintf_chk@plt>
   1a5f0:	ldr	r1, [pc, #44]	; 1a624 <__assert_fail@plt+0x8820>
   1a5f4:	mov	r0, r4
   1a5f8:	add	r1, pc, r1
   1a5fc:	bl	19d28 <__assert_fail@plt+0x7f24>
   1a600:	mov	r0, #0
   1a604:	add	sp, sp, #12
   1a608:	pop	{r4, r5, pc}
   1a60c:			; <UNDEFINED> instruction: 0x00015ab0
   1a610:	andeq	r5, r1, r0, lsl #17
   1a614:	ldrdeq	r0, [r0], -ip
   1a618:	andeq	r4, r0, r8, lsl #17
   1a61c:	andeq	r4, r0, r4, ror #16
   1a620:	andeq	r4, r0, r4, ror #16
   1a624:	andeq	r4, r0, ip, lsr #17
   1a628:	cmp	r0, #0
   1a62c:	addne	r0, r0, #4096	; 0x1000
   1a630:	ldrne	r0, [r0, #16]
   1a634:	bx	lr
   1a638:	add	r3, r0, #4096	; 0x1000
   1a63c:	mov	r0, #0
   1a640:	str	r1, [r3, #24]
   1a644:	bx	lr
   1a648:	push	{r4, r5, r6, lr}
   1a64c:	subs	r4, r0, #0
   1a650:	ldr	r5, [pc, #284]	; 1a774 <__assert_fail@plt+0x8970>
   1a654:	sub	sp, sp, #8
   1a658:	add	r5, pc, r5
   1a65c:	beq	1a750 <__assert_fail@plt+0x894c>
   1a660:	ldr	r3, [r4, #4]
   1a664:	cmp	r3, #0
   1a668:	beq	1a72c <__assert_fail@plt+0x8928>
   1a66c:	ldr	r3, [r4]
   1a670:	cmp	r3, #0
   1a674:	blt	1a684 <__assert_fail@plt+0x8880>
   1a678:	mov	r0, r3
   1a67c:	add	sp, sp, #8
   1a680:	pop	{r4, r5, r6, pc}
   1a684:	bl	19e74 <__assert_fail@plt+0x8070>
   1a688:	subs	r6, r0, #0
   1a68c:	beq	1a71c <__assert_fail@plt+0x8918>
   1a690:	ldr	r3, [pc, #224]	; 1a778 <__assert_fail@plt+0x8974>
   1a694:	add	r3, pc, r3
   1a698:	ldr	r3, [r3]
   1a69c:	tst	r3, #4
   1a6a0:	bne	1a6c4 <__assert_fail@plt+0x88c0>
   1a6a4:	mov	r0, r6
   1a6a8:	mov	r1, #524288	; 0x80000
   1a6ac:	bl	11ae0 <open64@plt>
   1a6b0:	mov	r3, r0
   1a6b4:	str	r0, [r4]
   1a6b8:	mov	r0, r3
   1a6bc:	add	sp, sp, #8
   1a6c0:	pop	{r4, r5, r6, pc}
   1a6c4:	ldr	r3, [pc, #176]	; 1a77c <__assert_fail@plt+0x8978>
   1a6c8:	ldr	r3, [r5, r3]
   1a6cc:	ldr	r5, [r3]
   1a6d0:	bl	11b88 <getpid@plt>
   1a6d4:	ldr	r2, [pc, #164]	; 1a780 <__assert_fail@plt+0x897c>
   1a6d8:	ldr	r3, [pc, #164]	; 1a784 <__assert_fail@plt+0x8980>
   1a6dc:	add	r2, pc, r2
   1a6e0:	str	r2, [sp, #4]
   1a6e4:	ldr	r2, [pc, #156]	; 1a788 <__assert_fail@plt+0x8984>
   1a6e8:	add	r3, pc, r3
   1a6ec:	str	r3, [sp]
   1a6f0:	add	r2, pc, r2
   1a6f4:	mov	r1, #1
   1a6f8:	mov	r3, r0
   1a6fc:	mov	r0, r5
   1a700:	bl	11cb4 <__fprintf_chk@plt>
   1a704:	ldr	r1, [pc, #128]	; 1a78c <__assert_fail@plt+0x8988>
   1a708:	mov	r2, r6
   1a70c:	add	r1, pc, r1
   1a710:	mov	r0, r4
   1a714:	bl	19d28 <__assert_fail@plt+0x7f24>
   1a718:	b	1a6a4 <__assert_fail@plt+0x88a0>
   1a71c:	bl	11be8 <__errno_location@plt>
   1a720:	ldr	r3, [r0]
   1a724:	rsb	r3, r3, #0
   1a728:	b	1a678 <__assert_fail@plt+0x8874>
   1a72c:	ldr	r3, [pc, #92]	; 1a790 <__assert_fail@plt+0x898c>
   1a730:	ldr	r1, [pc, #92]	; 1a794 <__assert_fail@plt+0x8990>
   1a734:	ldr	r0, [pc, #92]	; 1a798 <__assert_fail@plt+0x8994>
   1a738:	add	r3, pc, r3
   1a73c:	mov	r2, #201	; 0xc9
   1a740:	add	r3, r3, #20
   1a744:	add	r1, pc, r1
   1a748:	add	r0, pc, r0
   1a74c:	bl	11e04 <__assert_fail@plt>
   1a750:	ldr	r3, [pc, #68]	; 1a79c <__assert_fail@plt+0x8998>
   1a754:	ldr	r1, [pc, #68]	; 1a7a0 <__assert_fail@plt+0x899c>
   1a758:	ldr	r0, [pc, #68]	; 1a7a4 <__assert_fail@plt+0x89a0>
   1a75c:	add	r3, pc, r3
   1a760:	mov	r2, #200	; 0xc8
   1a764:	add	r3, r3, #20
   1a768:	add	r1, pc, r1
   1a76c:	add	r0, pc, r0
   1a770:	bl	11e04 <__assert_fail@plt>
   1a774:			; <UNDEFINED> instruction: 0x000157bc
   1a778:	muleq	r1, r8, r9
   1a77c:	ldrdeq	r0, [r0], -ip
   1a780:	andeq	r4, r0, r4, ror r7
   1a784:	andeq	r4, r0, r0, asr r7
   1a788:	andeq	r4, r0, r0, asr r7
   1a78c:			; <UNDEFINED> instruction: 0x000047bc
   1a790:	andeq	r4, r0, ip, ror r6
   1a794:	andeq	r4, r0, r0, lsr #14
   1a798:	andeq	r4, r0, r0, ror r7
   1a79c:	andeq	r4, r0, r8, asr r6
   1a7a0:	strdeq	r4, [r0], -ip
   1a7a4:	andeq	r4, r0, r8, asr #14
   1a7a8:	push	{r3}		; (str r3, [sp, #-4]!)
   1a7ac:	ldr	r3, [pc, #340]	; 1a908 <__assert_fail@plt+0x8b04>
   1a7b0:	ldr	ip, [pc, #340]	; 1a90c <__assert_fail@plt+0x8b08>
   1a7b4:	add	r3, pc, r3
   1a7b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a7bc:	sub	sp, sp, #24
   1a7c0:	ldr	r8, [r3, ip]
   1a7c4:	ldr	r7, [sp, #52]	; 0x34
   1a7c8:	mov	r6, r2
   1a7cc:	ldr	r2, [r8]
   1a7d0:	cmp	r7, #0
   1a7d4:	mov	r4, r1
   1a7d8:	str	r2, [sp, #20]
   1a7dc:	beq	1a8c8 <__assert_fail@plt+0x8ac4>
   1a7e0:	add	r3, sp, #56	; 0x38
   1a7e4:	ldr	r5, [r0, #4]
   1a7e8:	mov	r1, r7
   1a7ec:	mov	r2, r3
   1a7f0:	mov	r9, r0
   1a7f4:	str	r3, [sp, #16]
   1a7f8:	bl	19f1c <__assert_fail@plt+0x8118>
   1a7fc:	cmp	r5, #0
   1a800:	beq	1a810 <__assert_fail@plt+0x8a0c>
   1a804:	ldrsb	r3, [r5]
   1a808:	cmp	r3, #47	; 0x2f
   1a80c:	addeq	r5, r5, #1
   1a810:	cmp	r0, #0
   1a814:	beq	1a824 <__assert_fail@plt+0x8a20>
   1a818:	ldrsb	r3, [r0]
   1a81c:	cmp	r3, #47	; 0x2f
   1a820:	addeq	r0, r0, #1
   1a824:	ldr	r2, [r9, #12]
   1a828:	cmp	r2, #0
   1a82c:	beq	1a8b4 <__assert_fail@plt+0x8ab0>
   1a830:	cmp	r5, #0
   1a834:	beq	1a8a0 <__assert_fail@plt+0x8a9c>
   1a838:	cmp	r0, #0
   1a83c:	beq	1a894 <__assert_fail@plt+0x8a90>
   1a840:	ldr	r3, [pc, #200]	; 1a910 <__assert_fail@plt+0x8b0c>
   1a844:	str	r0, [sp, #12]
   1a848:	add	r3, pc, r3
   1a84c:	stmib	sp, {r2, r5}
   1a850:	str	r3, [sp]
   1a854:	mov	r2, #1
   1a858:	mvn	r3, #0
   1a85c:	mov	r1, r6
   1a860:	mov	r0, r4
   1a864:	bl	11de0 <__snprintf_chk@plt>
   1a868:	cmp	r0, r6
   1a86c:	bcs	1a8f0 <__assert_fail@plt+0x8aec>
   1a870:	ldr	r2, [sp, #20]
   1a874:	ldr	r3, [r8]
   1a878:	mov	r0, r4
   1a87c:	cmp	r2, r3
   1a880:	bne	1a904 <__assert_fail@plt+0x8b00>
   1a884:	add	sp, sp, #24
   1a888:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1a88c:	add	sp, sp, #4
   1a890:	bx	lr
   1a894:	ldr	r0, [pc, #120]	; 1a914 <__assert_fail@plt+0x8b10>
   1a898:	add	r0, pc, r0
   1a89c:	b	1a840 <__assert_fail@plt+0x8a3c>
   1a8a0:	ldr	r5, [pc, #112]	; 1a918 <__assert_fail@plt+0x8b14>
   1a8a4:	cmp	r0, #0
   1a8a8:	add	r5, pc, r5
   1a8ac:	bne	1a840 <__assert_fail@plt+0x8a3c>
   1a8b0:	b	1a894 <__assert_fail@plt+0x8a90>
   1a8b4:	ldr	r2, [pc, #96]	; 1a91c <__assert_fail@plt+0x8b18>
   1a8b8:	cmp	r5, #0
   1a8bc:	add	r2, pc, r2
   1a8c0:	bne	1a838 <__assert_fail@plt+0x8a34>
   1a8c4:	b	1a8a0 <__assert_fail@plt+0x8a9c>
   1a8c8:	bl	19e74 <__assert_fail@plt+0x8070>
   1a8cc:	subs	r1, r0, #0
   1a8d0:	moveq	r4, r1
   1a8d4:	beq	1a870 <__assert_fail@plt+0x8a6c>
   1a8d8:	mov	r2, r6
   1a8dc:	add	r6, r4, r6
   1a8e0:	mov	r0, r4
   1a8e4:	bl	11c54 <strncpy@plt>
   1a8e8:	strb	r7, [r6, #-1]
   1a8ec:	b	1a870 <__assert_fail@plt+0x8a6c>
   1a8f0:	bl	11be8 <__errno_location@plt>
   1a8f4:	mov	r3, #36	; 0x24
   1a8f8:	mov	r4, #0
   1a8fc:	str	r3, [r0]
   1a900:	b	1a870 <__assert_fail@plt+0x8a6c>
   1a904:	bl	11a2c <__stack_chk_fail@plt>
   1a908:	andeq	r5, r1, r0, ror #12
   1a90c:	ldrdeq	r0, [r0], -r8
   1a910:	muleq	r0, r4, r6
   1a914:	muleq	r0, ip, r5
   1a918:	andeq	r4, r0, ip, lsl #11
   1a91c:	andeq	r4, r0, r8, ror r5
   1a920:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a924:	sub	sp, sp, #20
   1a928:	ldr	r5, [pc, #296]	; 1aa58 <__assert_fail@plt+0x8c54>
   1a92c:	ldr	r3, [pc, #296]	; 1aa5c <__assert_fail@plt+0x8c58>
   1a930:	add	r5, pc, r5
   1a934:	mov	r8, r1
   1a938:	ldr	r6, [r5, r3]
   1a93c:	mov	r7, r2
   1a940:	mov	r9, r0
   1a944:	ldr	r3, [r6]
   1a948:	str	r3, [sp, #12]
   1a94c:	bl	1a648 <__assert_fail@plt+0x8844>
   1a950:	subs	r4, r0, #0
   1a954:	str	r0, [sp, #8]
   1a958:	blt	1a98c <__assert_fail@plt+0x8b88>
   1a95c:	ldr	r3, [pc, #252]	; 1aa60 <__assert_fail@plt+0x8c5c>
   1a960:	add	r3, pc, r3
   1a964:	ldr	r3, [r3]
   1a968:	tst	r3, #4
   1a96c:	bne	1a9f8 <__assert_fail@plt+0x8bf4>
   1a970:	mov	r0, r4
   1a974:	mov	r3, #0
   1a978:	mov	r2, r8
   1a97c:	mov	r1, r7
   1a980:	bl	11990 <faccessat@plt>
   1a984:	subs	r4, r0, #0
   1a988:	bne	1a9a8 <__assert_fail@plt+0x8ba4>
   1a98c:	ldr	r2, [sp, #12]
   1a990:	ldr	r3, [r6]
   1a994:	mov	r0, r4
   1a998:	cmp	r2, r3
   1a99c:	bne	1aa54 <__assert_fail@plt+0x8c50>
   1a9a0:	add	sp, sp, #20
   1a9a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a9a8:	bl	11be8 <__errno_location@plt>
   1a9ac:	ldr	r3, [r0]
   1a9b0:	cmp	r3, #2
   1a9b4:	bne	1a98c <__assert_fail@plt+0x8b88>
   1a9b8:	add	r3, r9, #4096	; 0x1000
   1a9bc:	ldr	r3, [r3, #24]
   1a9c0:	cmp	r3, #0
   1a9c4:	beq	1a98c <__assert_fail@plt+0x8b88>
   1a9c8:	mov	r0, r9
   1a9cc:	add	r2, sp, #8
   1a9d0:	mov	r1, r7
   1a9d4:	blx	r3
   1a9d8:	subs	r3, r0, #0
   1a9dc:	bne	1a98c <__assert_fail@plt+0x8b88>
   1a9e0:	mov	r2, r8
   1a9e4:	mov	r1, r7
   1a9e8:	ldr	r0, [sp, #8]
   1a9ec:	bl	11990 <faccessat@plt>
   1a9f0:	mov	r4, r0
   1a9f4:	b	1a98c <__assert_fail@plt+0x8b88>
   1a9f8:	ldr	r3, [pc, #100]	; 1aa64 <__assert_fail@plt+0x8c60>
   1a9fc:	ldr	r3, [r5, r3]
   1aa00:	ldr	r4, [r3]
   1aa04:	bl	11b88 <getpid@plt>
   1aa08:	ldr	r2, [pc, #88]	; 1aa68 <__assert_fail@plt+0x8c64>
   1aa0c:	ldr	r3, [pc, #88]	; 1aa6c <__assert_fail@plt+0x8c68>
   1aa10:	add	r2, pc, r2
   1aa14:	str	r2, [sp, #4]
   1aa18:	ldr	r2, [pc, #80]	; 1aa70 <__assert_fail@plt+0x8c6c>
   1aa1c:	add	r3, pc, r3
   1aa20:	str	r3, [sp]
   1aa24:	add	r2, pc, r2
   1aa28:	mov	r1, #1
   1aa2c:	mov	r3, r0
   1aa30:	mov	r0, r4
   1aa34:	bl	11cb4 <__fprintf_chk@plt>
   1aa38:	ldr	r1, [pc, #52]	; 1aa74 <__assert_fail@plt+0x8c70>
   1aa3c:	mov	r2, r7
   1aa40:	add	r1, pc, r1
   1aa44:	mov	r0, r9
   1aa48:	bl	19d28 <__assert_fail@plt+0x7f24>
   1aa4c:	ldr	r4, [sp, #8]
   1aa50:	b	1a970 <__assert_fail@plt+0x8b6c>
   1aa54:	bl	11a2c <__stack_chk_fail@plt>
   1aa58:	andeq	r5, r1, r4, ror #9
   1aa5c:	ldrdeq	r0, [r0], -r8
   1aa60:	andeq	r5, r1, ip, asr #13
   1aa64:	ldrdeq	r0, [r0], -ip
   1aa68:	andeq	r4, r0, r0, asr #8
   1aa6c:	andeq	r4, r0, ip, lsl r4
   1aa70:	andeq	r4, r0, ip, lsl r4
   1aa74:	andeq	r4, r0, r8, lsr #9
   1aa78:	push	{r2, r3}
   1aa7c:	ldr	r3, [pc, #104]	; 1aaec <__assert_fail@plt+0x8ce8>
   1aa80:	ldr	r2, [pc, #104]	; 1aaf0 <__assert_fail@plt+0x8cec>
   1aa84:	add	r3, pc, r3
   1aa88:	push	{r4, r5, r6, lr}
   1aa8c:	sub	sp, sp, #8
   1aa90:	ldr	r4, [r3, r2]
   1aa94:	add	ip, sp, #28
   1aa98:	mov	r2, ip
   1aa9c:	ldr	r3, [r4]
   1aaa0:	mov	r6, r1
   1aaa4:	ldr	r1, [sp, #24]
   1aaa8:	str	r3, [sp, #4]
   1aaac:	mov	r5, r0
   1aab0:	str	ip, [sp]
   1aab4:	bl	19f1c <__assert_fail@plt+0x8118>
   1aab8:	mov	r1, r6
   1aabc:	mov	r2, r0
   1aac0:	mov	r0, r5
   1aac4:	bl	1a920 <__assert_fail@plt+0x8b1c>
   1aac8:	ldr	r2, [sp, #4]
   1aacc:	ldr	r3, [r4]
   1aad0:	cmp	r2, r3
   1aad4:	bne	1aae8 <__assert_fail@plt+0x8ce4>
   1aad8:	add	sp, sp, #8
   1aadc:	pop	{r4, r5, r6, lr}
   1aae0:	add	sp, sp, #8
   1aae4:	bx	lr
   1aae8:	bl	11a2c <__stack_chk_fail@plt>
   1aaec:	muleq	r1, r0, r3
   1aaf0:	ldrdeq	r0, [r0], -r8
   1aaf4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1aaf8:	sub	sp, sp, #20
   1aafc:	ldr	r5, [pc, #536]	; 1ad1c <__assert_fail@plt+0x8f18>
   1ab00:	ldr	r3, [pc, #536]	; 1ad20 <__assert_fail@plt+0x8f1c>
   1ab04:	add	r5, pc, r5
   1ab08:	subs	r8, r0, #0
   1ab0c:	ldr	r6, [r5, r3]
   1ab10:	mov	r7, r2
   1ab14:	ldr	r3, [r6]
   1ab18:	str	r3, [sp, #12]
   1ab1c:	beq	1ab7c <__assert_fail@plt+0x8d78>
   1ab20:	mov	r9, r1
   1ab24:	bl	1a648 <__assert_fail@plt+0x8844>
   1ab28:	cmp	r0, #0
   1ab2c:	mov	r4, r0
   1ab30:	str	r0, [sp, #8]
   1ab34:	blt	1ab60 <__assert_fail@plt+0x8d5c>
   1ab38:	mov	r2, r9
   1ab3c:	mov	r1, r7
   1ab40:	bl	119b4 <__openat64_2@plt>
   1ab44:	subs	r4, r0, #0
   1ab48:	blt	1abf0 <__assert_fail@plt+0x8dec>
   1ab4c:	ldr	r3, [pc, #464]	; 1ad24 <__assert_fail@plt+0x8f20>
   1ab50:	add	r3, pc, r3
   1ab54:	ldr	r3, [r3]
   1ab58:	tst	r3, #4
   1ab5c:	bne	1aca8 <__assert_fail@plt+0x8ea4>
   1ab60:	ldr	r2, [sp, #12]
   1ab64:	ldr	r3, [r6]
   1ab68:	mov	r0, r4
   1ab6c:	cmp	r2, r3
   1ab70:	bne	1ad10 <__assert_fail@plt+0x8f0c>
   1ab74:	add	sp, sp, #20
   1ab78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ab7c:	mov	r0, r2
   1ab80:	bl	11bdc <__open64_2@plt>
   1ab84:	ldr	r3, [pc, #412]	; 1ad28 <__assert_fail@plt+0x8f24>
   1ab88:	add	r3, pc, r3
   1ab8c:	ldr	r3, [r3]
   1ab90:	tst	r3, #4
   1ab94:	mov	r4, r0
   1ab98:	beq	1ab60 <__assert_fail@plt+0x8d5c>
   1ab9c:	ldr	r3, [pc, #392]	; 1ad2c <__assert_fail@plt+0x8f28>
   1aba0:	ldr	r3, [r5, r3]
   1aba4:	ldr	r5, [r3]
   1aba8:	bl	11b88 <getpid@plt>
   1abac:	ldr	r2, [pc, #380]	; 1ad30 <__assert_fail@plt+0x8f2c>
   1abb0:	ldr	r3, [pc, #380]	; 1ad34 <__assert_fail@plt+0x8f30>
   1abb4:	add	r2, pc, r2
   1abb8:	str	r2, [sp, #4]
   1abbc:	ldr	r2, [pc, #372]	; 1ad38 <__assert_fail@plt+0x8f34>
   1abc0:	add	r3, pc, r3
   1abc4:	str	r3, [sp]
   1abc8:	add	r2, pc, r2
   1abcc:	mov	r1, #1
   1abd0:	mov	r3, r0
   1abd4:	mov	r0, r5
   1abd8:	bl	11cb4 <__fprintf_chk@plt>
   1abdc:	ldr	r0, [pc, #344]	; 1ad3c <__assert_fail@plt+0x8f38>
   1abe0:	mov	r1, r7
   1abe4:	add	r0, pc, r0
   1abe8:	bl	19df4 <__assert_fail@plt+0x7ff0>
   1abec:	b	1ab60 <__assert_fail@plt+0x8d5c>
   1abf0:	bl	11be8 <__errno_location@plt>
   1abf4:	ldr	r3, [r0]
   1abf8:	cmp	r3, #2
   1abfc:	bne	1ab4c <__assert_fail@plt+0x8d48>
   1ac00:	add	r3, r8, #4096	; 0x1000
   1ac04:	ldr	r3, [r3, #24]
   1ac08:	cmp	r3, #0
   1ac0c:	beq	1ab4c <__assert_fail@plt+0x8d48>
   1ac10:	add	r2, sp, #8
   1ac14:	mov	r1, r7
   1ac18:	mov	r0, r8
   1ac1c:	blx	r3
   1ac20:	cmp	r0, #0
   1ac24:	bne	1ab4c <__assert_fail@plt+0x8d48>
   1ac28:	mov	r2, r9
   1ac2c:	mov	r1, r7
   1ac30:	ldr	r0, [sp, #8]
   1ac34:	bl	119b4 <__openat64_2@plt>
   1ac38:	ldr	r3, [pc, #256]	; 1ad40 <__assert_fail@plt+0x8f3c>
   1ac3c:	add	r3, pc, r3
   1ac40:	ldr	r3, [r3]
   1ac44:	tst	r3, #4
   1ac48:	mov	r9, r0
   1ac4c:	beq	1ad14 <__assert_fail@plt+0x8f10>
   1ac50:	ldr	r3, [pc, #212]	; 1ad2c <__assert_fail@plt+0x8f28>
   1ac54:	ldr	r3, [r5, r3]
   1ac58:	ldr	r5, [r3]
   1ac5c:	bl	11b88 <getpid@plt>
   1ac60:	ldr	r2, [pc, #220]	; 1ad44 <__assert_fail@plt+0x8f40>
   1ac64:	ldr	r3, [pc, #220]	; 1ad48 <__assert_fail@plt+0x8f44>
   1ac68:	add	r2, pc, r2
   1ac6c:	str	r2, [sp, #4]
   1ac70:	ldr	r2, [pc, #212]	; 1ad4c <__assert_fail@plt+0x8f48>
   1ac74:	add	r3, pc, r3
   1ac78:	str	r3, [sp]
   1ac7c:	add	r2, pc, r2
   1ac80:	mov	r1, #1
   1ac84:	mov	r3, r0
   1ac88:	mov	r0, r5
   1ac8c:	bl	11cb4 <__fprintf_chk@plt>
   1ac90:	ldr	r3, [pc, #184]	; 1ad50 <__assert_fail@plt+0x8f4c>
   1ac94:	cmp	r4, r9
   1ac98:	add	r3, pc, r3
   1ac9c:	ldrne	r3, [pc, #176]	; 1ad54 <__assert_fail@plt+0x8f50>
   1aca0:	addne	r3, pc, r3
   1aca4:	b	1acf4 <__assert_fail@plt+0x8ef0>
   1aca8:	ldr	r3, [pc, #124]	; 1ad2c <__assert_fail@plt+0x8f28>
   1acac:	mov	r9, r4
   1acb0:	ldr	r3, [r5, r3]
   1acb4:	ldr	r4, [r3]
   1acb8:	bl	11b88 <getpid@plt>
   1acbc:	ldr	r2, [pc, #148]	; 1ad58 <__assert_fail@plt+0x8f54>
   1acc0:	ldr	r3, [pc, #148]	; 1ad5c <__assert_fail@plt+0x8f58>
   1acc4:	add	r2, pc, r2
   1acc8:	str	r2, [sp, #4]
   1accc:	ldr	r2, [pc, #140]	; 1ad60 <__assert_fail@plt+0x8f5c>
   1acd0:	add	r3, pc, r3
   1acd4:	str	r3, [sp]
   1acd8:	add	r2, pc, r2
   1acdc:	mov	r1, #1
   1ace0:	mov	r3, r0
   1ace4:	mov	r0, r4
   1ace8:	bl	11cb4 <__fprintf_chk@plt>
   1acec:	ldr	r3, [pc, #112]	; 1ad64 <__assert_fail@plt+0x8f60>
   1acf0:	add	r3, pc, r3
   1acf4:	ldr	r1, [pc, #108]	; 1ad68 <__assert_fail@plt+0x8f64>
   1acf8:	mov	r2, r7
   1acfc:	mov	r0, r8
   1ad00:	add	r1, pc, r1
   1ad04:	mov	r4, r9
   1ad08:	bl	19d28 <__assert_fail@plt+0x7f24>
   1ad0c:	b	1ab60 <__assert_fail@plt+0x8d5c>
   1ad10:	bl	11a2c <__stack_chk_fail@plt>
   1ad14:	mov	r4, r0
   1ad18:	b	1ab60 <__assert_fail@plt+0x8d5c>
   1ad1c:	andeq	r5, r1, r0, lsl r3
   1ad20:	ldrdeq	r0, [r0], -r8
   1ad24:	ldrdeq	r5, [r1], -ip
   1ad28:	andeq	r5, r1, r4, lsr #9
   1ad2c:	ldrdeq	r0, [r0], -ip
   1ad30:	muleq	r0, ip, r2
   1ad34:	andeq	r4, r0, r8, ror r2
   1ad38:	andeq	r4, r0, r8, ror r2
   1ad3c:	andeq	r4, r0, r4, lsr #6
   1ad40:	strdeq	r5, [r1], -r0
   1ad44:	andeq	r4, r0, r8, ror #3
   1ad48:	andeq	r4, r0, r4, asr #3
   1ad4c:	andeq	r4, r0, r4, asr #3
   1ad50:	muleq	r0, ip, r1
   1ad54:	andeq	r4, r0, r8, asr r2
   1ad58:	andeq	r4, r0, ip, lsl #3
   1ad5c:	andeq	r4, r0, r8, ror #2
   1ad60:	andeq	r4, r0, r8, ror #2
   1ad64:	andeq	r4, r0, r4, asr #2
   1ad68:	andeq	r4, r0, r8, lsl r2
   1ad6c:	mov	ip, r2
   1ad70:	push	{r4, r5, r6, lr}
   1ad74:	mov	r2, r3
   1ad78:	mov	r5, r1
   1ad7c:	mov	r1, ip
   1ad80:	mov	r4, r0
   1ad84:	bl	19f1c <__assert_fail@plt+0x8118>
   1ad88:	subs	r2, r0, #0
   1ad8c:	beq	1ada0 <__assert_fail@plt+0x8f9c>
   1ad90:	mov	r1, r5
   1ad94:	mov	r0, r4
   1ad98:	pop	{r4, r5, r6, lr}
   1ad9c:	b	1aaf4 <__assert_fail@plt+0x8cf0>
   1ada0:	bl	11be8 <__errno_location@plt>
   1ada4:	ldr	r0, [r0]
   1ada8:	rsb	r0, r0, #0
   1adac:	pop	{r4, r5, r6, pc}
   1adb0:	push	{r2, r3}
   1adb4:	ldr	r2, [pc, #80]	; 1ae0c <__assert_fail@plt+0x9008>
   1adb8:	ldr	ip, [pc, #80]	; 1ae10 <__assert_fail@plt+0x900c>
   1adbc:	add	r2, pc, r2
   1adc0:	push	{r4, lr}
   1adc4:	sub	sp, sp, #8
   1adc8:	ldr	r4, [r2, ip]
   1adcc:	add	lr, sp, #20
   1add0:	mov	r3, lr
   1add4:	ldr	ip, [r4]
   1add8:	ldr	r2, [sp, #16]
   1addc:	str	lr, [sp]
   1ade0:	str	ip, [sp, #4]
   1ade4:	bl	1ad6c <__assert_fail@plt+0x8f68>
   1ade8:	ldr	r2, [sp, #4]
   1adec:	ldr	r3, [r4]
   1adf0:	cmp	r2, r3
   1adf4:	bne	1ae08 <__assert_fail@plt+0x9004>
   1adf8:	add	sp, sp, #8
   1adfc:	pop	{r4, lr}
   1ae00:	add	sp, sp, #8
   1ae04:	bx	lr
   1ae08:	bl	11a2c <__stack_chk_fail@plt>
   1ae0c:	andeq	r5, r1, r8, asr r0
   1ae10:	ldrdeq	r0, [r0], -r8
   1ae14:	push	{r4, r5, r6, r7, r8, lr}
   1ae18:	subs	r4, r1, #0
   1ae1c:	beq	1aed8 <__assert_fail@plt+0x90d4>
   1ae20:	ldrsb	r3, [r4]
   1ae24:	cmp	r3, #0
   1ae28:	beq	1aee0 <__assert_fail@plt+0x90dc>
   1ae2c:	ldr	r5, [pc, #180]	; 1aee8 <__assert_fail@plt+0x90e4>
   1ae30:	ldr	r7, [pc, #180]	; 1aeec <__assert_fail@plt+0x90e8>
   1ae34:	ldr	lr, [pc, #180]	; 1aef0 <__assert_fail@plt+0x90ec>
   1ae38:	ldr	r6, [pc, #180]	; 1aef4 <__assert_fail@plt+0x90f0>
   1ae3c:	mov	ip, r4
   1ae40:	mov	r1, #0
   1ae44:	b	1ae74 <__assert_fail@plt+0x9070>
   1ae48:	cmp	r3, #119	; 0x77
   1ae4c:	beq	1aea8 <__assert_fail@plt+0x90a4>
   1ae50:	cmp	r3, #97	; 0x61
   1ae54:	beq	1aebc <__assert_fail@plt+0x90b8>
   1ae58:	cmp	r3, #101	; 0x65
   1ae5c:	orreq	r1, r1, #524288	; 0x80000
   1ae60:	cmn	ip, #1
   1ae64:	beq	1ae90 <__assert_fail@plt+0x908c>
   1ae68:	ldrsb	r3, [ip, #1]!
   1ae6c:	cmp	r3, #0
   1ae70:	beq	1ae90 <__assert_fail@plt+0x908c>
   1ae74:	cmp	r3, #114	; 0x72
   1ae78:	bne	1ae48 <__assert_fail@plt+0x9044>
   1ae7c:	ldrsb	r3, [ip, #1]
   1ae80:	cmp	r3, #43	; 0x2b
   1ae84:	orreq	r1, r1, #2
   1ae88:	cmn	ip, #1
   1ae8c:	bne	1ae68 <__assert_fail@plt+0x9064>
   1ae90:	bl	1aaf4 <__assert_fail@plt+0x8cf0>
   1ae94:	cmp	r0, #0
   1ae98:	blt	1aed0 <__assert_fail@plt+0x90cc>
   1ae9c:	mov	r1, r4
   1aea0:	pop	{r4, r5, r6, r7, r8, lr}
   1aea4:	b	118ac <fdopen@plt>
   1aea8:	ldrsb	r3, [ip, #1]
   1aeac:	cmp	r3, #43	; 0x2b
   1aeb0:	orreq	r1, r1, r6
   1aeb4:	orrne	r1, r1, lr
   1aeb8:	b	1ae60 <__assert_fail@plt+0x905c>
   1aebc:	ldrsb	r3, [ip, #1]
   1aec0:	cmp	r3, #43	; 0x2b
   1aec4:	orreq	r1, r1, r7
   1aec8:	orrne	r1, r1, r5
   1aecc:	b	1ae60 <__assert_fail@plt+0x905c>
   1aed0:	mov	r0, #0
   1aed4:	pop	{r4, r5, r6, r7, r8, pc}
   1aed8:	mov	r1, r4
   1aedc:	b	1ae90 <__assert_fail@plt+0x908c>
   1aee0:	mov	r1, r3
   1aee4:	b	1ae90 <__assert_fail@plt+0x908c>
   1aee8:	andeq	r0, r0, r1, lsl #8
   1aeec:	andeq	r0, r0, r2, lsl #8
   1aef0:	andeq	r0, r0, r1, lsl #4
   1aef4:	andeq	r0, r0, r2, lsl #4
   1aef8:	mov	ip, r2
   1aefc:	push	{r4, r5, r6, lr}
   1af00:	mov	r2, r3
   1af04:	mov	r5, r1
   1af08:	mov	r1, ip
   1af0c:	mov	r4, r0
   1af10:	bl	19f1c <__assert_fail@plt+0x8118>
   1af14:	subs	r2, r0, #0
   1af18:	popeq	{r4, r5, r6, pc}
   1af1c:	mov	r1, r5
   1af20:	mov	r0, r4
   1af24:	pop	{r4, r5, r6, lr}
   1af28:	b	1ae14 <__assert_fail@plt+0x9010>
   1af2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af30:	add	fp, sp, #32
   1af34:	ldr	lr, [pc, #300]	; 1b068 <__assert_fail@plt+0x9264>
   1af38:	ldr	ip, [pc, #300]	; 1b06c <__assert_fail@plt+0x9268>
   1af3c:	add	lr, pc, lr
   1af40:	sub	sp, sp, #20
   1af44:	ldr	ip, [lr, ip]
   1af48:	rsb	r6, r2, r2, lsl #3
   1af4c:	mov	r7, r1
   1af50:	mov	r4, r2
   1af54:	mov	r1, lr
   1af58:	add	r2, r6, #7
   1af5c:	ldr	r1, [pc, #268]	; 1b070 <__assert_fail@plt+0x926c>
   1af60:	str	ip, [fp, #-48]	; 0xffffffd0
   1af64:	bic	r2, r2, #7
   1af68:	ldr	ip, [ip]
   1af6c:	mov	r8, #0
   1af70:	sub	sp, sp, r2
   1af74:	mov	r9, r3
   1af78:	str	r8, [r7]
   1af7c:	ldrd	r2, [fp, #4]
   1af80:	add	r1, pc, r1
   1af84:	str	ip, [fp, #-40]	; 0xffffffd8
   1af88:	bl	1aef8 <__assert_fail@plt+0x90f4>
   1af8c:	subs	r5, r0, #0
   1af90:	beq	1b04c <__assert_fail@plt+0x9248>
   1af94:	mov	r1, r6
   1af98:	mov	r2, r5
   1af9c:	mov	r0, sp
   1afa0:	bl	11978 <fgets@plt>
   1afa4:	cmp	r0, #0
   1afa8:	beq	1b04c <__assert_fail@plt+0x9248>
   1afac:	mov	r0, r5
   1afb0:	bl	11cc0 <fclose@plt>
   1afb4:	mov	r0, sp
   1afb8:	bl	11bb8 <strlen@plt>
   1afbc:	mov	r2, #0
   1afc0:	sub	r1, fp, #44	; 0x2c
   1afc4:	mov	sl, sp
   1afc8:	sub	r0, r0, #1
   1afcc:	ldrsb	r3, [sp, r0]
   1afd0:	cmp	r3, #10
   1afd4:	strbeq	r8, [sp, r0]
   1afd8:	mov	r0, r4
   1afdc:	bl	19540 <__assert_fail@plt+0x773c>
   1afe0:	cmp	r0, #0
   1afe4:	str	r0, [r7]
   1afe8:	beq	1b05c <__assert_fail@plt+0x9258>
   1afec:	cmp	r9, #0
   1aff0:	mov	r1, r0
   1aff4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1aff8:	mov	r0, sl
   1affc:	bne	1b02c <__assert_fail@plt+0x9228>
   1b000:	bl	19970 <__assert_fail@plt+0x7b6c>
   1b004:	cmp	r0, #0
   1b008:	bne	1b03c <__assert_fail@plt+0x9238>
   1b00c:	mov	r0, #0
   1b010:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b014:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b018:	ldr	r3, [r3]
   1b01c:	cmp	r2, r3
   1b020:	bne	1b064 <__assert_fail@plt+0x9260>
   1b024:	sub	sp, fp, #32
   1b028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b02c:	mov	r3, #0
   1b030:	bl	19ac8 <__assert_fail@plt+0x7cc4>
   1b034:	cmp	r0, #0
   1b038:	beq	1b00c <__assert_fail@plt+0x9208>
   1b03c:	ldr	r0, [r7]
   1b040:	bl	19584 <__assert_fail@plt+0x7780>
   1b044:	mvn	r0, #21
   1b048:	b	1b010 <__assert_fail@plt+0x920c>
   1b04c:	bl	11be8 <__errno_location@plt>
   1b050:	ldr	r0, [r0]
   1b054:	rsb	r0, r0, #0
   1b058:	b	1b010 <__assert_fail@plt+0x920c>
   1b05c:	mvn	r0, #11
   1b060:	b	1b010 <__assert_fail@plt+0x920c>
   1b064:	bl	11a2c <__stack_chk_fail@plt>
   1b068:	ldrdeq	r4, [r1], -r8
   1b06c:	ldrdeq	r0, [r0], -r8
   1b070:	andeq	r3, r0, ip, lsl #9
   1b074:	push	{r2, r3}
   1b078:	ldr	r2, [pc, #80]	; 1b0d0 <__assert_fail@plt+0x92cc>
   1b07c:	ldr	ip, [pc, #80]	; 1b0d4 <__assert_fail@plt+0x92d0>
   1b080:	add	r2, pc, r2
   1b084:	push	{r4, lr}
   1b088:	sub	sp, sp, #8
   1b08c:	ldr	r4, [r2, ip]
   1b090:	add	lr, sp, #20
   1b094:	mov	r3, lr
   1b098:	ldr	ip, [r4]
   1b09c:	ldr	r2, [sp, #16]
   1b0a0:	str	lr, [sp]
   1b0a4:	str	ip, [sp, #4]
   1b0a8:	bl	1aef8 <__assert_fail@plt+0x90f4>
   1b0ac:	ldr	r2, [sp, #4]
   1b0b0:	ldr	r3, [r4]
   1b0b4:	cmp	r2, r3
   1b0b8:	bne	1b0cc <__assert_fail@plt+0x92c8>
   1b0bc:	add	sp, sp, #8
   1b0c0:	pop	{r4, lr}
   1b0c4:	add	sp, sp, #8
   1b0c8:	bx	lr
   1b0cc:	bl	11a2c <__stack_chk_fail@plt>
   1b0d0:	muleq	r1, r4, sp
   1b0d4:	ldrdeq	r0, [r0], -r8
   1b0d8:	ldr	r3, [pc, #268]	; 1b1ec <__assert_fail@plt+0x93e8>
   1b0dc:	push	{r4, r5, r6, lr}
   1b0e0:	subs	r5, r1, #0
   1b0e4:	sub	sp, sp, #8
   1b0e8:	add	r3, pc, r3
   1b0ec:	beq	1b12c <__assert_fail@plt+0x9328>
   1b0f0:	mov	r2, r5
   1b0f4:	mov	r1, #524288	; 0x80000
   1b0f8:	bl	1aaf4 <__assert_fail@plt+0x8cf0>
   1b0fc:	mov	r4, r0
   1b100:	cmp	r4, #0
   1b104:	blt	1b16c <__assert_fail@plt+0x9368>
   1b108:	mov	r0, r4
   1b10c:	bl	11d44 <fdopendir@plt>
   1b110:	subs	r6, r0, #0
   1b114:	beq	1b1e0 <__assert_fail@plt+0x93dc>
   1b118:	cmp	r5, #0
   1b11c:	beq	1b1d0 <__assert_fail@plt+0x93cc>
   1b120:	mov	r0, r6
   1b124:	add	sp, sp, #8
   1b128:	pop	{r4, r5, r6, pc}
   1b12c:	ldr	r2, [r0, #4]
   1b130:	mov	r4, r0
   1b134:	cmp	r2, #0
   1b138:	beq	1b16c <__assert_fail@plt+0x9368>
   1b13c:	ldr	r2, [pc, #172]	; 1b1f0 <__assert_fail@plt+0x93ec>
   1b140:	add	r2, pc, r2
   1b144:	ldr	r2, [r2]
   1b148:	tst	r2, #4
   1b14c:	bne	1b17c <__assert_fail@plt+0x9378>
   1b150:	mov	r0, r4
   1b154:	bl	1a648 <__assert_fail@plt+0x8844>
   1b158:	mov	r1, #3
   1b15c:	bl	1c818 <__assert_fail@plt+0xaa14>
   1b160:	mov	r4, r0
   1b164:	cmp	r4, #0
   1b168:	bge	1b108 <__assert_fail@plt+0x9304>
   1b16c:	mov	r6, #0
   1b170:	mov	r0, r6
   1b174:	add	sp, sp, #8
   1b178:	pop	{r4, r5, r6, pc}
   1b17c:	ldr	r2, [pc, #112]	; 1b1f4 <__assert_fail@plt+0x93f0>
   1b180:	ldr	r3, [r3, r2]
   1b184:	ldr	r6, [r3]
   1b188:	bl	11b88 <getpid@plt>
   1b18c:	ldr	r2, [pc, #100]	; 1b1f8 <__assert_fail@plt+0x93f4>
   1b190:	ldr	r3, [pc, #100]	; 1b1fc <__assert_fail@plt+0x93f8>
   1b194:	add	r2, pc, r2
   1b198:	str	r2, [sp, #4]
   1b19c:	ldr	r2, [pc, #92]	; 1b200 <__assert_fail@plt+0x93fc>
   1b1a0:	add	r3, pc, r3
   1b1a4:	str	r3, [sp]
   1b1a8:	add	r2, pc, r2
   1b1ac:	mov	r1, #1
   1b1b0:	mov	r3, r0
   1b1b4:	mov	r0, r6
   1b1b8:	bl	11cb4 <__fprintf_chk@plt>
   1b1bc:	ldr	r1, [pc, #64]	; 1b204 <__assert_fail@plt+0x9400>
   1b1c0:	mov	r0, r4
   1b1c4:	add	r1, pc, r1
   1b1c8:	bl	19d28 <__assert_fail@plt+0x7f24>
   1b1cc:	b	1b150 <__assert_fail@plt+0x934c>
   1b1d0:	bl	11900 <rewinddir@plt>
   1b1d4:	mov	r0, r6
   1b1d8:	add	sp, sp, #8
   1b1dc:	pop	{r4, r5, r6, pc}
   1b1e0:	mov	r0, r4
   1b1e4:	bl	11dc8 <close@plt>
   1b1e8:	b	1b120 <__assert_fail@plt+0x931c>
   1b1ec:	andeq	r4, r1, ip, lsr #26
   1b1f0:	andeq	r4, r1, ip, ror #29
   1b1f4:	ldrdeq	r0, [r0], -ip
   1b1f8:			; <UNDEFINED> instruction: 0x00003cbc
   1b1fc:	muleq	r0, r8, ip
   1b200:	muleq	r0, r8, ip
   1b204:	andeq	r3, r0, r4, ror #26
   1b208:	push	{r4, lr}
   1b20c:	mov	r4, r0
   1b210:	bl	19f1c <__assert_fail@plt+0x8118>
   1b214:	subs	r1, r0, #0
   1b218:	popeq	{r4, pc}
   1b21c:	mov	r0, r4
   1b220:	pop	{r4, lr}
   1b224:	b	1b0d8 <__assert_fail@plt+0x92d4>
   1b228:	push	{r1, r2, r3}
   1b22c:	ldr	r3, [pc, #80]	; 1b284 <__assert_fail@plt+0x9480>
   1b230:	ldr	r1, [pc, #80]	; 1b288 <__assert_fail@plt+0x9484>
   1b234:	add	r3, pc, r3
   1b238:	push	{r4, lr}
   1b23c:	sub	sp, sp, #12
   1b240:	ldr	r4, [r3, r1]
   1b244:	add	ip, sp, #24
   1b248:	mov	r2, ip
   1b24c:	ldr	r3, [r4]
   1b250:	ldr	r1, [sp, #20]
   1b254:	str	r3, [sp, #4]
   1b258:	str	ip, [sp]
   1b25c:	bl	1b208 <__assert_fail@plt+0x9404>
   1b260:	ldr	r2, [sp, #4]
   1b264:	ldr	r3, [r4]
   1b268:	cmp	r2, r3
   1b26c:	bne	1b280 <__assert_fail@plt+0x947c>
   1b270:	add	sp, sp, #12
   1b274:	pop	{r4, lr}
   1b278:	add	sp, sp, #12
   1b27c:	bx	lr
   1b280:	bl	11a2c <__stack_chk_fail@plt>
   1b284:	andeq	r4, r1, r0, ror #23
   1b288:	ldrdeq	r0, [r0], -r8
   1b28c:	push	{r4, r5, r6, lr}
   1b290:	subs	r6, r3, #0
   1b294:	mov	r4, r1
   1b298:	mov	r5, r2
   1b29c:	beq	1b2c0 <__assert_fail@plt+0x94bc>
   1b2a0:	bl	1a648 <__assert_fail@plt+0x8844>
   1b2a4:	subs	r3, r0, #0
   1b2a8:	blt	1b2e8 <__assert_fail@plt+0x94e4>
   1b2ac:	mov	r3, r5
   1b2b0:	mov	r2, r4
   1b2b4:	mov	r1, r6
   1b2b8:	pop	{r4, r5, r6, lr}
   1b2bc:	b	11b1c <readlinkat@plt>
   1b2c0:	bl	19e74 <__assert_fail@plt+0x8070>
   1b2c4:	cmp	r0, #0
   1b2c8:	beq	1b2dc <__assert_fail@plt+0x94d8>
   1b2cc:	mov	r2, r5
   1b2d0:	mov	r1, r4
   1b2d4:	pop	{r4, r5, r6, lr}
   1b2d8:	b	11a80 <readlink@plt>
   1b2dc:	bl	11be8 <__errno_location@plt>
   1b2e0:	ldr	r3, [r0]
   1b2e4:	rsb	r3, r3, #0
   1b2e8:	mov	r0, r3
   1b2ec:	pop	{r4, r5, r6, pc}
   1b2f0:	push	{r3}		; (str r3, [sp, #-4]!)
   1b2f4:	ldr	r3, [pc, #132]	; 1b380 <__assert_fail@plt+0x957c>
   1b2f8:	ldr	ip, [pc, #132]	; 1b384 <__assert_fail@plt+0x9580>
   1b2fc:	add	r3, pc, r3
   1b300:	push	{r4, r5, r6, r7, lr}
   1b304:	sub	sp, sp, #8
   1b308:	ldr	r4, [r3, ip]
   1b30c:	add	lr, sp, #32
   1b310:	mov	r5, r1
   1b314:	ldr	ip, [r4]
   1b318:	mov	r7, r2
   1b31c:	ldr	r1, [sp, #28]
   1b320:	mov	r2, lr
   1b324:	str	ip, [sp, #4]
   1b328:	str	lr, [sp]
   1b32c:	mov	r6, r0
   1b330:	bl	19f1c <__assert_fail@plt+0x8118>
   1b334:	subs	r3, r0, #0
   1b338:	beq	1b36c <__assert_fail@plt+0x9568>
   1b33c:	mov	r2, r7
   1b340:	mov	r1, r5
   1b344:	mov	r0, r6
   1b348:	bl	1b28c <__assert_fail@plt+0x9488>
   1b34c:	ldr	r2, [sp, #4]
   1b350:	ldr	r3, [r4]
   1b354:	cmp	r2, r3
   1b358:	bne	1b37c <__assert_fail@plt+0x9578>
   1b35c:	add	sp, sp, #8
   1b360:	pop	{r4, r5, r6, r7, lr}
   1b364:	add	sp, sp, #4
   1b368:	bx	lr
   1b36c:	bl	11be8 <__errno_location@plt>
   1b370:	ldr	r0, [r0]
   1b374:	rsb	r0, r0, #0
   1b378:	b	1b34c <__assert_fail@plt+0x9548>
   1b37c:	bl	11a2c <__stack_chk_fail@plt>
   1b380:	andeq	r4, r1, r8, lsl fp
   1b384:	ldrdeq	r0, [r0], -r8
   1b388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b38c:	mov	r9, r3
   1b390:	ldr	r4, [pc, #400]	; 1b528 <__assert_fail@plt+0x9724>
   1b394:	ldr	ip, [pc, #400]	; 1b52c <__assert_fail@plt+0x9728>
   1b398:	add	r4, pc, r4
   1b39c:	sub	sp, sp, #36	; 0x24
   1b3a0:	ldr	r3, [r4, ip]
   1b3a4:	mov	r6, r1
   1b3a8:	str	r3, [sp, #12]
   1b3ac:	ldr	r3, [r3]
   1b3b0:	mov	r1, #524288	; 0x80000
   1b3b4:	mov	r5, r2
   1b3b8:	mov	r2, r9
   1b3bc:	str	r3, [sp, #28]
   1b3c0:	bl	1aaf4 <__assert_fail@plt+0x8cf0>
   1b3c4:	mov	r7, r0
   1b3c8:	bl	11be8 <__errno_location@plt>
   1b3cc:	cmp	r7, #0
   1b3d0:	mov	r8, r0
   1b3d4:	blt	1b504 <__assert_fail@plt+0x9700>
   1b3d8:	ldr	r3, [pc, #336]	; 1b530 <__assert_fail@plt+0x972c>
   1b3dc:	add	r3, pc, r3
   1b3e0:	ldr	r3, [r3]
   1b3e4:	tst	r3, #4
   1b3e8:	bne	1b490 <__assert_fail@plt+0x968c>
   1b3ec:	mov	r2, r5
   1b3f0:	mov	r1, #0
   1b3f4:	mov	r0, r6
   1b3f8:	bl	11c48 <memset@plt>
   1b3fc:	cmp	r5, #0
   1b400:	movne	r4, #0
   1b404:	movne	fp, r4
   1b408:	addne	r9, sp, #20
   1b40c:	beq	1b518 <__assert_fail@plt+0x9714>
   1b410:	mov	r2, r5
   1b414:	mov	r1, r6
   1b418:	mov	r0, r7
   1b41c:	bl	1193c <read@plt>
   1b420:	cmp	r0, #0
   1b424:	ble	1b440 <__assert_fail@plt+0x963c>
   1b428:	subs	r5, r5, r0
   1b42c:	add	r6, r6, r0
   1b430:	add	r4, r4, r0
   1b434:	beq	1b510 <__assert_fail@plt+0x970c>
   1b438:	mov	fp, #0
   1b43c:	b	1b410 <__assert_fail@plt+0x960c>
   1b440:	ldr	sl, [r8]
   1b444:	beq	1b45c <__assert_fail@plt+0x9658>
   1b448:	cmp	sl, #4
   1b44c:	cmpne	sl, #11
   1b450:	bne	1b45c <__assert_fail@plt+0x9658>
   1b454:	cmp	fp, #4
   1b458:	ble	1b4e4 <__assert_fail@plt+0x96e0>
   1b45c:	cmp	r4, #0
   1b460:	mvneq	r4, #0
   1b464:	mov	r0, r7
   1b468:	bl	11dc8 <close@plt>
   1b46c:	str	sl, [r8]
   1b470:	ldr	r3, [sp, #12]
   1b474:	ldr	r2, [sp, #28]
   1b478:	mov	r0, r4
   1b47c:	ldr	r3, [r3]
   1b480:	cmp	r2, r3
   1b484:	bne	1b524 <__assert_fail@plt+0x9720>
   1b488:	add	sp, sp, #36	; 0x24
   1b48c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b490:	ldr	r3, [pc, #156]	; 1b534 <__assert_fail@plt+0x9730>
   1b494:	ldr	r3, [r4, r3]
   1b498:	ldr	r4, [r3]
   1b49c:	bl	11b88 <getpid@plt>
   1b4a0:	ldr	r2, [pc, #144]	; 1b538 <__assert_fail@plt+0x9734>
   1b4a4:	ldr	r3, [pc, #144]	; 1b53c <__assert_fail@plt+0x9738>
   1b4a8:	add	r2, pc, r2
   1b4ac:	str	r2, [sp, #4]
   1b4b0:	ldr	r2, [pc, #136]	; 1b540 <__assert_fail@plt+0x973c>
   1b4b4:	add	r3, pc, r3
   1b4b8:	str	r3, [sp]
   1b4bc:	add	r2, pc, r2
   1b4c0:	mov	r1, #1
   1b4c4:	mov	r3, r0
   1b4c8:	mov	r0, r4
   1b4cc:	bl	11cb4 <__fprintf_chk@plt>
   1b4d0:	ldr	r0, [pc, #108]	; 1b544 <__assert_fail@plt+0x9740>
   1b4d4:	mov	r1, r9
   1b4d8:	add	r0, pc, r0
   1b4dc:	bl	19df4 <__assert_fail@plt+0x7ff0>
   1b4e0:	b	1b3ec <__assert_fail@plt+0x95e8>
   1b4e4:	ldr	r3, [pc, #92]	; 1b548 <__assert_fail@plt+0x9744>
   1b4e8:	mov	r1, #0
   1b4ec:	mov	r0, r9
   1b4f0:	add	fp, fp, #1
   1b4f4:	str	r1, [sp, #20]
   1b4f8:	str	r3, [sp, #24]
   1b4fc:	bl	11984 <nanosleep@plt>
   1b500:	b	1b410 <__assert_fail@plt+0x960c>
   1b504:	ldr	r4, [r0]
   1b508:	rsb	r4, r4, #0
   1b50c:	b	1b470 <__assert_fail@plt+0x966c>
   1b510:	ldr	sl, [r8]
   1b514:	b	1b464 <__assert_fail@plt+0x9660>
   1b518:	ldr	sl, [r8]
   1b51c:	mov	r4, r5
   1b520:	b	1b464 <__assert_fail@plt+0x9660>
   1b524:	bl	11a2c <__stack_chk_fail@plt>
   1b528:	andeq	r4, r1, ip, ror sl
   1b52c:	ldrdeq	r0, [r0], -r8
   1b530:	andeq	r4, r1, r0, asr ip
   1b534:	ldrdeq	r0, [r0], -ip
   1b538:	andeq	r3, r0, r8, lsr #19
   1b53c:	andeq	r3, r0, r4, lsl #19
   1b540:	andeq	r3, r0, r4, lsl #19
   1b544:	andeq	r3, r0, r4, ror #20
   1b548:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1b54c:	push	{r4, r5, r6, lr}
   1b550:	mov	r5, r1
   1b554:	mov	r6, r2
   1b558:	mov	r1, r3
   1b55c:	ldr	r2, [sp, #16]
   1b560:	mov	r4, r0
   1b564:	bl	19f1c <__assert_fail@plt+0x8118>
   1b568:	subs	r3, r0, #0
   1b56c:	beq	1b584 <__assert_fail@plt+0x9780>
   1b570:	mov	r2, r6
   1b574:	mov	r1, r5
   1b578:	mov	r0, r4
   1b57c:	pop	{r4, r5, r6, lr}
   1b580:	b	1b388 <__assert_fail@plt+0x9584>
   1b584:	mvn	r0, #21
   1b588:	pop	{r4, r5, r6, pc}
   1b58c:	push	{r3}		; (str r3, [sp, #-4]!)
   1b590:	ldr	r3, [pc, #80]	; 1b5e8 <__assert_fail@plt+0x97e4>
   1b594:	ldr	ip, [pc, #80]	; 1b5ec <__assert_fail@plt+0x97e8>
   1b598:	add	r3, pc, r3
   1b59c:	push	{r4, lr}
   1b5a0:	sub	sp, sp, #20
   1b5a4:	ldr	r4, [r3, ip]
   1b5a8:	add	lr, sp, #32
   1b5ac:	str	lr, [sp]
   1b5b0:	ldr	ip, [r4]
   1b5b4:	ldr	r3, [sp, #28]
   1b5b8:	str	lr, [sp, #8]
   1b5bc:	str	ip, [sp, #12]
   1b5c0:	bl	1b54c <__assert_fail@plt+0x9748>
   1b5c4:	ldr	r2, [sp, #12]
   1b5c8:	ldr	r3, [r4]
   1b5cc:	cmp	r2, r3
   1b5d0:	bne	1b5e4 <__assert_fail@plt+0x97e0>
   1b5d4:	add	sp, sp, #20
   1b5d8:	pop	{r4, lr}
   1b5dc:	add	sp, sp, #4
   1b5e0:	bx	lr
   1b5e4:	bl	11a2c <__stack_chk_fail@plt>
   1b5e8:	andeq	r4, r1, ip, ror r8
   1b5ec:	ldrdeq	r0, [r0], -r8
   1b5f0:	ldr	ip, [pc, #176]	; 1b6a8 <__assert_fail@plt+0x98a4>
   1b5f4:	ldr	r3, [pc, #176]	; 1b6ac <__assert_fail@plt+0x98a8>
   1b5f8:	add	ip, pc, ip
   1b5fc:	push	{r4, r5, r6, r7, r8, lr}
   1b600:	sub	sp, sp, #8192	; 0x2000
   1b604:	ldr	r7, [ip, r3]
   1b608:	sub	sp, sp, #8
   1b60c:	mov	r6, r1
   1b610:	add	r5, sp, #8
   1b614:	add	ip, sp, #8192	; 0x2000
   1b618:	ldr	lr, [r7]
   1b61c:	mov	r1, #0
   1b620:	add	ip, ip, #4
   1b624:	sub	r8, r5, #4
   1b628:	mov	r3, r2
   1b62c:	str	r1, [r6]
   1b630:	ldr	r2, [pc, #120]	; 1b6b0 <__assert_fail@plt+0x98ac>
   1b634:	mov	r1, r8
   1b638:	str	lr, [ip]
   1b63c:	bl	1b388 <__assert_fail@plt+0x9584>
   1b640:	subs	r4, r0, #0
   1b644:	blt	1b67c <__assert_fail@plt+0x9878>
   1b648:	beq	1b65c <__assert_fail@plt+0x9858>
   1b64c:	sub	r3, r5, #5
   1b650:	ldrsb	r3, [r3, r4]
   1b654:	cmp	r3, #10
   1b658:	subeq	r4, r4, #1
   1b65c:	add	r5, r5, r4
   1b660:	mov	r3, #0
   1b664:	mov	r0, r8
   1b668:	strb	r3, [r5, #-4]
   1b66c:	bl	11a20 <strdup@plt>
   1b670:	cmp	r0, #0
   1b674:	mvneq	r4, #11
   1b678:	str	r0, [r6]
   1b67c:	add	r3, sp, #8192	; 0x2000
   1b680:	add	r3, r3, #4
   1b684:	ldr	r2, [r3]
   1b688:	ldr	r3, [r7]
   1b68c:	mov	r0, r4
   1b690:	cmp	r2, r3
   1b694:	bne	1b6a4 <__assert_fail@plt+0x98a0>
   1b698:	add	sp, sp, #8192	; 0x2000
   1b69c:	add	sp, sp, #8
   1b6a0:	pop	{r4, r5, r6, r7, r8, pc}
   1b6a4:	bl	11a2c <__stack_chk_fail@plt>
   1b6a8:	andeq	r4, r1, ip, lsl r8
   1b6ac:	ldrdeq	r0, [r0], -r8
   1b6b0:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1b6b4:	push	{r2, r3}
   1b6b8:	ldr	r3, [pc, #116]	; 1b734 <__assert_fail@plt+0x9930>
   1b6bc:	ldr	r2, [pc, #116]	; 1b738 <__assert_fail@plt+0x9934>
   1b6c0:	add	r3, pc, r3
   1b6c4:	push	{r4, r5, r6, lr}
   1b6c8:	sub	sp, sp, #8
   1b6cc:	ldr	r4, [r3, r2]
   1b6d0:	add	ip, sp, #28
   1b6d4:	mov	r2, ip
   1b6d8:	ldr	r3, [r4]
   1b6dc:	mov	r5, r1
   1b6e0:	ldr	r1, [sp, #24]
   1b6e4:	str	ip, [sp]
   1b6e8:	str	r3, [sp, #4]
   1b6ec:	mov	r6, r0
   1b6f0:	bl	19f1c <__assert_fail@plt+0x8118>
   1b6f4:	subs	r2, r0, #0
   1b6f8:	beq	1b728 <__assert_fail@plt+0x9924>
   1b6fc:	mov	r1, r5
   1b700:	mov	r0, r6
   1b704:	bl	1b5f0 <__assert_fail@plt+0x97ec>
   1b708:	ldr	r2, [sp, #4]
   1b70c:	ldr	r3, [r4]
   1b710:	cmp	r2, r3
   1b714:	bne	1b730 <__assert_fail@plt+0x992c>
   1b718:	add	sp, sp, #8
   1b71c:	pop	{r4, r5, r6, lr}
   1b720:	add	sp, sp, #8
   1b724:	bx	lr
   1b728:	mvn	r0, #21
   1b72c:	b	1b708 <__assert_fail@plt+0x9904>
   1b730:	bl	11a2c <__stack_chk_fail@plt>
   1b734:	andeq	r4, r1, r4, asr r7
   1b738:	ldrdeq	r0, [r0], -r8
   1b73c:	push	{r4, lr}
   1b740:	sub	r2, r2, #1
   1b744:	mov	r4, r1
   1b748:	bl	1b388 <__assert_fail@plt+0x9584>
   1b74c:	cmp	r0, #0
   1b750:	poplt	{r4, pc}
   1b754:	beq	1b770 <__assert_fail@plt+0x996c>
   1b758:	add	r3, r4, r0
   1b75c:	ldrsb	r2, [r3, #-1]
   1b760:	cmp	r2, #10
   1b764:	subeq	r0, r0, #1
   1b768:	movne	r4, r3
   1b76c:	addeq	r4, r4, r0
   1b770:	mov	r3, #0
   1b774:	strb	r3, [r4]
   1b778:	pop	{r4, pc}
   1b77c:	push	{r3}		; (str r3, [sp, #-4]!)
   1b780:	ldr	r3, [pc, #124]	; 1b804 <__assert_fail@plt+0x9a00>
   1b784:	ldr	ip, [pc, #124]	; 1b808 <__assert_fail@plt+0x9a04>
   1b788:	add	r3, pc, r3
   1b78c:	push	{r4, r5, r6, r7, lr}
   1b790:	sub	sp, sp, #8
   1b794:	ldr	r4, [r3, ip]
   1b798:	add	lr, sp, #32
   1b79c:	mov	r5, r1
   1b7a0:	ldr	ip, [r4]
   1b7a4:	mov	r7, r2
   1b7a8:	ldr	r1, [sp, #28]
   1b7ac:	mov	r2, lr
   1b7b0:	str	ip, [sp, #4]
   1b7b4:	str	lr, [sp]
   1b7b8:	mov	r6, r0
   1b7bc:	bl	19f1c <__assert_fail@plt+0x8118>
   1b7c0:	subs	r3, r0, #0
   1b7c4:	beq	1b7f8 <__assert_fail@plt+0x99f4>
   1b7c8:	mov	r2, r7
   1b7cc:	mov	r1, r5
   1b7d0:	mov	r0, r6
   1b7d4:	bl	1b73c <__assert_fail@plt+0x9938>
   1b7d8:	ldr	r2, [sp, #4]
   1b7dc:	ldr	r3, [r4]
   1b7e0:	cmp	r2, r3
   1b7e4:	bne	1b800 <__assert_fail@plt+0x99fc>
   1b7e8:	add	sp, sp, #8
   1b7ec:	pop	{r4, r5, r6, r7, lr}
   1b7f0:	add	sp, sp, #4
   1b7f4:	bx	lr
   1b7f8:	mvn	r0, #21
   1b7fc:	b	1b7d8 <__assert_fail@plt+0x99d4>
   1b800:	bl	11a2c <__stack_chk_fail@plt>
   1b804:	andeq	r4, r1, ip, lsl #13
   1b808:	ldrdeq	r0, [r0], -r8
   1b80c:	push	{r2, r3}
   1b810:	mov	r2, r1
   1b814:	push	{r4, r5, r6, r7, r8, lr}
   1b818:	mov	r7, r1
   1b81c:	ldr	r4, [pc, #236]	; 1b910 <__assert_fail@plt+0x9b0c>
   1b820:	ldr	r3, [pc, #236]	; 1b914 <__assert_fail@plt+0x9b10>
   1b824:	add	r4, pc, r4
   1b828:	ldr	r1, [pc, #232]	; 1b918 <__assert_fail@plt+0x9b14>
   1b82c:	ldr	r5, [r4, r3]
   1b830:	sub	sp, sp, #16
   1b834:	add	r1, pc, r1
   1b838:	ldr	r3, [r5]
   1b83c:	ldr	r8, [sp, #40]	; 0x28
   1b840:	str	r3, [sp, #12]
   1b844:	bl	1ae14 <__assert_fail@plt+0x9010>
   1b848:	subs	r6, r0, #0
   1b84c:	beq	1b904 <__assert_fail@plt+0x9b00>
   1b850:	ldr	r3, [pc, #196]	; 1b91c <__assert_fail@plt+0x9b18>
   1b854:	add	r3, pc, r3
   1b858:	ldr	r3, [r3]
   1b85c:	tst	r3, #4
   1b860:	bne	1b8ac <__assert_fail@plt+0x9aa8>
   1b864:	add	r3, sp, #44	; 0x2c
   1b868:	mov	r1, r8
   1b86c:	mov	r2, r3
   1b870:	mov	r0, r6
   1b874:	str	r3, [sp, #8]
   1b878:	bl	11a74 <vfscanf@plt>
   1b87c:	mov	r4, r0
   1b880:	mov	r0, r6
   1b884:	bl	11cc0 <fclose@plt>
   1b888:	ldr	r2, [sp, #12]
   1b88c:	ldr	r3, [r5]
   1b890:	mov	r0, r4
   1b894:	cmp	r2, r3
   1b898:	bne	1b90c <__assert_fail@plt+0x9b08>
   1b89c:	add	sp, sp, #16
   1b8a0:	pop	{r4, r5, r6, r7, r8, lr}
   1b8a4:	add	sp, sp, #8
   1b8a8:	bx	lr
   1b8ac:	ldr	r3, [pc, #108]	; 1b920 <__assert_fail@plt+0x9b1c>
   1b8b0:	ldr	r3, [r4, r3]
   1b8b4:	ldr	r4, [r3]
   1b8b8:	bl	11b88 <getpid@plt>
   1b8bc:	ldr	r2, [pc, #96]	; 1b924 <__assert_fail@plt+0x9b20>
   1b8c0:	ldr	r3, [pc, #96]	; 1b928 <__assert_fail@plt+0x9b24>
   1b8c4:	add	r2, pc, r2
   1b8c8:	str	r2, [sp, #4]
   1b8cc:	ldr	r2, [pc, #88]	; 1b92c <__assert_fail@plt+0x9b28>
   1b8d0:	add	r3, pc, r3
   1b8d4:	str	r3, [sp]
   1b8d8:	add	r2, pc, r2
   1b8dc:	mov	r1, #1
   1b8e0:	mov	r3, r0
   1b8e4:	mov	r0, r4
   1b8e8:	bl	11cb4 <__fprintf_chk@plt>
   1b8ec:	ldr	r0, [pc, #60]	; 1b930 <__assert_fail@plt+0x9b2c>
   1b8f0:	mov	r2, r7
   1b8f4:	mov	r1, r8
   1b8f8:	add	r0, pc, r0
   1b8fc:	bl	19df4 <__assert_fail@plt+0x7ff0>
   1b900:	b	1b864 <__assert_fail@plt+0x9a60>
   1b904:	mvn	r4, #21
   1b908:	b	1b888 <__assert_fail@plt+0x9a84>
   1b90c:	bl	11a2c <__stack_chk_fail@plt>
   1b910:	strdeq	r4, [r1], -r0
   1b914:	ldrdeq	r0, [r0], -r8
   1b918:	ldrdeq	r2, [r0], -r8
   1b91c:	ldrdeq	r4, [r1], -r8
   1b920:	ldrdeq	r0, [r0], -ip
   1b924:	andeq	r3, r0, ip, lsl #11
   1b928:	andeq	r3, r0, r8, ror #10
   1b92c:	andeq	r3, r0, r8, ror #10
   1b930:	andeq	r3, r0, r4, asr r6
   1b934:	ldr	ip, [pc, #140]	; 1b9c8 <__assert_fail@plt+0x9bc4>
   1b938:	push	{r3}		; (str r3, [sp, #-4]!)
   1b93c:	add	ip, pc, ip
   1b940:	push	{r4, r5, r6, lr}
   1b944:	mov	r3, r2
   1b948:	ldr	lr, [pc, #124]	; 1b9cc <__assert_fail@plt+0x9bc8>
   1b94c:	mov	r2, r1
   1b950:	ldr	r1, [pc, #120]	; 1b9d0 <__assert_fail@plt+0x9bcc>
   1b954:	ldr	r4, [ip, lr]
   1b958:	sub	sp, sp, #12
   1b95c:	add	r1, pc, r1
   1b960:	ldr	ip, [r4]
   1b964:	ldr	r5, [sp, #28]
   1b968:	str	ip, [sp, #4]
   1b96c:	bl	1aef8 <__assert_fail@plt+0x90f4>
   1b970:	subs	r6, r0, #0
   1b974:	beq	1b9bc <__assert_fail@plt+0x9bb8>
   1b978:	add	r3, sp, #32
   1b97c:	mov	r1, r5
   1b980:	mov	r2, r3
   1b984:	str	r3, [sp]
   1b988:	bl	11a74 <vfscanf@plt>
   1b98c:	mov	r5, r0
   1b990:	mov	r0, r6
   1b994:	bl	11cc0 <fclose@plt>
   1b998:	ldr	r2, [sp, #4]
   1b99c:	ldr	r3, [r4]
   1b9a0:	mov	r0, r5
   1b9a4:	cmp	r2, r3
   1b9a8:	bne	1b9c4 <__assert_fail@plt+0x9bc0>
   1b9ac:	add	sp, sp, #12
   1b9b0:	pop	{r4, r5, r6, lr}
   1b9b4:	add	sp, sp, #4
   1b9b8:	bx	lr
   1b9bc:	mvn	r5, #21
   1b9c0:	b	1b998 <__assert_fail@plt+0x9b94>
   1b9c4:	bl	11a2c <__stack_chk_fail@plt>
   1b9c8:	ldrdeq	r4, [r1], -r8
   1b9cc:	ldrdeq	r0, [r0], -r8
   1b9d0:			; <UNDEFINED> instruction: 0x00002ab0
   1b9d4:	ldr	r3, [pc, #124]	; 1ba58 <__assert_fail@plt+0x9c54>
   1b9d8:	ldr	ip, [pc, #124]	; 1ba5c <__assert_fail@plt+0x9c58>
   1b9dc:	add	r3, pc, r3
   1b9e0:	push	{r4, r5, r6, r7, lr}
   1b9e4:	mov	r5, r1
   1b9e8:	ldr	r4, [r3, ip]
   1b9ec:	mov	r1, r2
   1b9f0:	ldr	r2, [pc, #104]	; 1ba60 <__assert_fail@plt+0x9c5c>
   1b9f4:	sub	sp, sp, #20
   1b9f8:	ldr	ip, [r4]
   1b9fc:	mov	r6, #0
   1ba00:	mov	r7, #0
   1ba04:	add	r2, pc, r2
   1ba08:	mov	r3, sp
   1ba0c:	strd	r6, [sp]
   1ba10:	str	ip, [sp, #12]
   1ba14:	bl	1b80c <__assert_fail@plt+0x9a08>
   1ba18:	cmp	r0, #1
   1ba1c:	bne	1ba4c <__assert_fail@plt+0x9c48>
   1ba20:	cmp	r5, #0
   1ba24:	moveq	r0, r5
   1ba28:	ldrdne	r2, [sp]
   1ba2c:	movne	r0, #0
   1ba30:	strdne	r2, [r5]
   1ba34:	ldr	r2, [sp, #12]
   1ba38:	ldr	r3, [r4]
   1ba3c:	cmp	r2, r3
   1ba40:	bne	1ba54 <__assert_fail@plt+0x9c50>
   1ba44:	add	sp, sp, #20
   1ba48:	pop	{r4, r5, r6, r7, pc}
   1ba4c:	mvn	r0, #0
   1ba50:	b	1ba34 <__assert_fail@plt+0x9c30>
   1ba54:	bl	11a2c <__stack_chk_fail@plt>
   1ba58:	andeq	r4, r1, r8, lsr r4
   1ba5c:	ldrdeq	r0, [r0], -r8
   1ba60:	andeq	r3, r0, ip, asr r5
   1ba64:	push	{r2, r3}
   1ba68:	ldr	r3, [pc, #116]	; 1bae4 <__assert_fail@plt+0x9ce0>
   1ba6c:	ldr	r2, [pc, #116]	; 1bae8 <__assert_fail@plt+0x9ce4>
   1ba70:	add	r3, pc, r3
   1ba74:	push	{r4, r5, r6, lr}
   1ba78:	sub	sp, sp, #8
   1ba7c:	ldr	r4, [r3, r2]
   1ba80:	add	ip, sp, #28
   1ba84:	mov	r2, ip
   1ba88:	ldr	r3, [r4]
   1ba8c:	mov	r5, r1
   1ba90:	ldr	r1, [sp, #24]
   1ba94:	str	ip, [sp]
   1ba98:	str	r3, [sp, #4]
   1ba9c:	mov	r6, r0
   1baa0:	bl	19f1c <__assert_fail@plt+0x8118>
   1baa4:	subs	r2, r0, #0
   1baa8:	beq	1bad8 <__assert_fail@plt+0x9cd4>
   1baac:	mov	r1, r5
   1bab0:	mov	r0, r6
   1bab4:	bl	1b9d4 <__assert_fail@plt+0x9bd0>
   1bab8:	ldr	r2, [sp, #4]
   1babc:	ldr	r3, [r4]
   1bac0:	cmp	r2, r3
   1bac4:	bne	1bae0 <__assert_fail@plt+0x9cdc>
   1bac8:	add	sp, sp, #8
   1bacc:	pop	{r4, r5, r6, lr}
   1bad0:	add	sp, sp, #8
   1bad4:	bx	lr
   1bad8:	mvn	r0, #21
   1badc:	b	1bab8 <__assert_fail@plt+0x9cb4>
   1bae0:	bl	11a2c <__stack_chk_fail@plt>
   1bae4:	andeq	r4, r1, r4, lsr #7
   1bae8:	ldrdeq	r0, [r0], -r8
   1baec:	ldr	r3, [pc, #124]	; 1bb70 <__assert_fail@plt+0x9d6c>
   1baf0:	ldr	ip, [pc, #124]	; 1bb74 <__assert_fail@plt+0x9d70>
   1baf4:	add	r3, pc, r3
   1baf8:	push	{r4, r5, r6, r7, lr}
   1bafc:	mov	r5, r1
   1bb00:	ldr	r4, [r3, ip]
   1bb04:	mov	r1, r2
   1bb08:	ldr	r2, [pc, #104]	; 1bb78 <__assert_fail@plt+0x9d74>
   1bb0c:	sub	sp, sp, #20
   1bb10:	ldr	ip, [r4]
   1bb14:	mov	r6, #0
   1bb18:	mov	r7, #0
   1bb1c:	add	r2, pc, r2
   1bb20:	mov	r3, sp
   1bb24:	strd	r6, [sp]
   1bb28:	str	ip, [sp, #12]
   1bb2c:	bl	1b80c <__assert_fail@plt+0x9a08>
   1bb30:	cmp	r0, #1
   1bb34:	bne	1bb64 <__assert_fail@plt+0x9d60>
   1bb38:	cmp	r5, #0
   1bb3c:	moveq	r0, r5
   1bb40:	ldrdne	r2, [sp]
   1bb44:	movne	r0, #0
   1bb48:	strdne	r2, [r5]
   1bb4c:	ldr	r2, [sp, #12]
   1bb50:	ldr	r3, [r4]
   1bb54:	cmp	r2, r3
   1bb58:	bne	1bb6c <__assert_fail@plt+0x9d68>
   1bb5c:	add	sp, sp, #20
   1bb60:	pop	{r4, r5, r6, r7, pc}
   1bb64:	mvn	r0, #0
   1bb68:	b	1bb4c <__assert_fail@plt+0x9d48>
   1bb6c:	bl	11a2c <__stack_chk_fail@plt>
   1bb70:	andeq	r4, r1, r0, lsr #6
   1bb74:	ldrdeq	r0, [r0], -r8
   1bb78:	andeq	r3, r0, ip, asr #8
   1bb7c:	push	{r2, r3}
   1bb80:	ldr	r3, [pc, #116]	; 1bbfc <__assert_fail@plt+0x9df8>
   1bb84:	ldr	r2, [pc, #116]	; 1bc00 <__assert_fail@plt+0x9dfc>
   1bb88:	add	r3, pc, r3
   1bb8c:	push	{r4, r5, r6, lr}
   1bb90:	sub	sp, sp, #8
   1bb94:	ldr	r4, [r3, r2]
   1bb98:	add	ip, sp, #28
   1bb9c:	mov	r2, ip
   1bba0:	ldr	r3, [r4]
   1bba4:	mov	r5, r1
   1bba8:	ldr	r1, [sp, #24]
   1bbac:	str	ip, [sp]
   1bbb0:	str	r3, [sp, #4]
   1bbb4:	mov	r6, r0
   1bbb8:	bl	19f1c <__assert_fail@plt+0x8118>
   1bbbc:	subs	r2, r0, #0
   1bbc0:	beq	1bbf0 <__assert_fail@plt+0x9dec>
   1bbc4:	mov	r1, r5
   1bbc8:	mov	r0, r6
   1bbcc:	bl	1baec <__assert_fail@plt+0x9ce8>
   1bbd0:	ldr	r2, [sp, #4]
   1bbd4:	ldr	r3, [r4]
   1bbd8:	cmp	r2, r3
   1bbdc:	bne	1bbf8 <__assert_fail@plt+0x9df4>
   1bbe0:	add	sp, sp, #8
   1bbe4:	pop	{r4, r5, r6, lr}
   1bbe8:	add	sp, sp, #8
   1bbec:	bx	lr
   1bbf0:	mvn	r0, #21
   1bbf4:	b	1bbd0 <__assert_fail@plt+0x9dcc>
   1bbf8:	bl	11a2c <__stack_chk_fail@plt>
   1bbfc:	andeq	r4, r1, ip, lsl #5
   1bc00:	ldrdeq	r0, [r0], -r8
   1bc04:	ldr	ip, [pc, #120]	; 1bc84 <__assert_fail@plt+0x9e80>
   1bc08:	ldr	r3, [pc, #120]	; 1bc88 <__assert_fail@plt+0x9e84>
   1bc0c:	add	ip, pc, ip
   1bc10:	push	{r4, r5, r6, lr}
   1bc14:	mov	r6, r1
   1bc18:	ldr	r5, [ip, r3]
   1bc1c:	mov	r1, r2
   1bc20:	ldr	r2, [pc, #100]	; 1bc8c <__assert_fail@plt+0x9e88>
   1bc24:	sub	sp, sp, #8
   1bc28:	ldr	lr, [r5]
   1bc2c:	mov	r4, #0
   1bc30:	mov	r3, sp
   1bc34:	add	r2, pc, r2
   1bc38:	str	lr, [sp, #4]
   1bc3c:	str	r4, [sp]
   1bc40:	bl	1b80c <__assert_fail@plt+0x9a08>
   1bc44:	cmp	r0, #1
   1bc48:	bne	1bc78 <__assert_fail@plt+0x9e74>
   1bc4c:	cmp	r6, r4
   1bc50:	moveq	r0, r6
   1bc54:	ldrne	r3, [sp]
   1bc58:	movne	r0, r4
   1bc5c:	strne	r3, [r6]
   1bc60:	ldr	r2, [sp, #4]
   1bc64:	ldr	r3, [r5]
   1bc68:	cmp	r2, r3
   1bc6c:	bne	1bc80 <__assert_fail@plt+0x9e7c>
   1bc70:	add	sp, sp, #8
   1bc74:	pop	{r4, r5, r6, pc}
   1bc78:	mvn	r0, #0
   1bc7c:	b	1bc60 <__assert_fail@plt+0x9e5c>
   1bc80:	bl	11a2c <__stack_chk_fail@plt>
   1bc84:	andeq	r4, r1, r8, lsl #4
   1bc88:	ldrdeq	r0, [r0], -r8
   1bc8c:	andeq	r2, r0, r0, ror #24
   1bc90:	push	{r2, r3}
   1bc94:	ldr	r3, [pc, #116]	; 1bd10 <__assert_fail@plt+0x9f0c>
   1bc98:	ldr	r2, [pc, #116]	; 1bd14 <__assert_fail@plt+0x9f10>
   1bc9c:	add	r3, pc, r3
   1bca0:	push	{r4, r5, r6, lr}
   1bca4:	sub	sp, sp, #8
   1bca8:	ldr	r4, [r3, r2]
   1bcac:	add	ip, sp, #28
   1bcb0:	mov	r2, ip
   1bcb4:	ldr	r3, [r4]
   1bcb8:	mov	r5, r1
   1bcbc:	ldr	r1, [sp, #24]
   1bcc0:	str	ip, [sp]
   1bcc4:	str	r3, [sp, #4]
   1bcc8:	mov	r6, r0
   1bccc:	bl	19f1c <__assert_fail@plt+0x8118>
   1bcd0:	subs	r2, r0, #0
   1bcd4:	beq	1bd04 <__assert_fail@plt+0x9f00>
   1bcd8:	mov	r1, r5
   1bcdc:	mov	r0, r6
   1bce0:	bl	1bc04 <__assert_fail@plt+0x9e00>
   1bce4:	ldr	r2, [sp, #4]
   1bce8:	ldr	r3, [r4]
   1bcec:	cmp	r2, r3
   1bcf0:	bne	1bd0c <__assert_fail@plt+0x9f08>
   1bcf4:	add	sp, sp, #8
   1bcf8:	pop	{r4, r5, r6, lr}
   1bcfc:	add	sp, sp, #8
   1bd00:	bx	lr
   1bd04:	mvn	r0, #21
   1bd08:	b	1bce4 <__assert_fail@plt+0x9ee0>
   1bd0c:	bl	11a2c <__stack_chk_fail@plt>
   1bd10:	andeq	r4, r1, r8, ror r1
   1bd14:	ldrdeq	r0, [r0], -r8
   1bd18:	ldr	ip, [pc, #112]	; 1bd90 <__assert_fail@plt+0x9f8c>
   1bd1c:	ldr	r3, [pc, #112]	; 1bd94 <__assert_fail@plt+0x9f90>
   1bd20:	add	ip, pc, ip
   1bd24:	push	{r4, r5, lr}
   1bd28:	mov	r5, r1
   1bd2c:	ldr	r4, [ip, r3]
   1bd30:	mov	r1, r2
   1bd34:	ldr	r2, [pc, #92]	; 1bd98 <__assert_fail@plt+0x9f94>
   1bd38:	sub	sp, sp, #12
   1bd3c:	ldr	lr, [r4]
   1bd40:	mov	r3, sp
   1bd44:	add	r2, pc, r2
   1bd48:	str	lr, [sp, #4]
   1bd4c:	bl	1b80c <__assert_fail@plt+0x9a08>
   1bd50:	cmp	r0, #1
   1bd54:	bne	1bd84 <__assert_fail@plt+0x9f80>
   1bd58:	cmp	r5, #0
   1bd5c:	moveq	r0, r5
   1bd60:	ldrne	r3, [sp]
   1bd64:	movne	r0, #0
   1bd68:	strne	r3, [r5]
   1bd6c:	ldr	r2, [sp, #4]
   1bd70:	ldr	r3, [r4]
   1bd74:	cmp	r2, r3
   1bd78:	bne	1bd8c <__assert_fail@plt+0x9f88>
   1bd7c:	add	sp, sp, #12
   1bd80:	pop	{r4, r5, pc}
   1bd84:	mvn	r0, #0
   1bd88:	b	1bd6c <__assert_fail@plt+0x9f68>
   1bd8c:	bl	11a2c <__stack_chk_fail@plt>
   1bd90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1bd94:	ldrdeq	r0, [r0], -r8
   1bd98:	andeq	r3, r0, ip, lsr #4
   1bd9c:	push	{r2, r3}
   1bda0:	ldr	r3, [pc, #116]	; 1be1c <__assert_fail@plt+0xa018>
   1bda4:	ldr	r2, [pc, #116]	; 1be20 <__assert_fail@plt+0xa01c>
   1bda8:	add	r3, pc, r3
   1bdac:	push	{r4, r5, r6, lr}
   1bdb0:	sub	sp, sp, #8
   1bdb4:	ldr	r4, [r3, r2]
   1bdb8:	add	ip, sp, #28
   1bdbc:	mov	r2, ip
   1bdc0:	ldr	r3, [r4]
   1bdc4:	mov	r5, r1
   1bdc8:	ldr	r1, [sp, #24]
   1bdcc:	str	ip, [sp]
   1bdd0:	str	r3, [sp, #4]
   1bdd4:	mov	r6, r0
   1bdd8:	bl	19f1c <__assert_fail@plt+0x8118>
   1bddc:	subs	r2, r0, #0
   1bde0:	beq	1be10 <__assert_fail@plt+0xa00c>
   1bde4:	mov	r1, r5
   1bde8:	mov	r0, r6
   1bdec:	bl	1bd18 <__assert_fail@plt+0x9f14>
   1bdf0:	ldr	r2, [sp, #4]
   1bdf4:	ldr	r3, [r4]
   1bdf8:	cmp	r2, r3
   1bdfc:	bne	1be18 <__assert_fail@plt+0xa014>
   1be00:	add	sp, sp, #8
   1be04:	pop	{r4, r5, r6, lr}
   1be08:	add	sp, sp, #8
   1be0c:	bx	lr
   1be10:	mvn	r0, #21
   1be14:	b	1bdf0 <__assert_fail@plt+0x9fec>
   1be18:	bl	11a2c <__stack_chk_fail@plt>
   1be1c:	andeq	r4, r1, ip, rrx
   1be20:	ldrdeq	r0, [r0], -r8
   1be24:	ldr	ip, [pc, #168]	; 1bed4 <__assert_fail@plt+0xa0d0>
   1be28:	ldr	r3, [pc, #168]	; 1bed8 <__assert_fail@plt+0xa0d4>
   1be2c:	add	ip, pc, ip
   1be30:	push	{r4, r5, lr}
   1be34:	sub	sp, sp, #28
   1be38:	ldr	r5, [ip, r3]
   1be3c:	mov	r4, r1
   1be40:	add	r3, sp, #16
   1be44:	mov	r1, r2
   1be48:	ldr	r2, [pc, #140]	; 1bedc <__assert_fail@plt+0xa0d8>
   1be4c:	str	r3, [sp]
   1be50:	ldr	lr, [r5]
   1be54:	add	r3, sp, #12
   1be58:	add	r2, pc, r2
   1be5c:	str	lr, [sp, #20]
   1be60:	bl	1b80c <__assert_fail@plt+0x9a08>
   1be64:	cmp	r0, #2
   1be68:	bne	1bec8 <__assert_fail@plt+0xa0c4>
   1be6c:	cmp	r4, #0
   1be70:	moveq	r0, r4
   1be74:	beq	1beb0 <__assert_fail@plt+0xa0ac>
   1be78:	ldr	r0, [sp, #16]
   1be7c:	ldr	r3, [sp, #12]
   1be80:	ldr	ip, [pc, #88]	; 1bee0 <__assert_fail@plt+0xa0dc>
   1be84:	ldr	r2, [pc, #88]	; 1bee4 <__assert_fail@plt+0xa0e0>
   1be88:	uxtb	r1, r0
   1be8c:	and	ip, ip, r3, lsl #8
   1be90:	bic	r3, r3, #4080	; 0xff0
   1be94:	and	r2, r2, r0, lsl #12
   1be98:	orr	r1, r1, ip
   1be9c:	bic	r3, r3, #15
   1bea0:	orr	r3, r3, r0, lsr #20
   1bea4:	orr	r2, r2, r1
   1bea8:	mov	r0, #0
   1beac:	strd	r2, [r4]
   1beb0:	ldr	r2, [sp, #20]
   1beb4:	ldr	r3, [r5]
   1beb8:	cmp	r2, r3
   1bebc:	bne	1bed0 <__assert_fail@plt+0xa0cc>
   1bec0:	add	sp, sp, #28
   1bec4:	pop	{r4, r5, pc}
   1bec8:	mvn	r0, #0
   1becc:	b	1beb0 <__assert_fail@plt+0xa0ac>
   1bed0:	bl	11a2c <__stack_chk_fail@plt>
   1bed4:	andeq	r3, r1, r8, ror #31
   1bed8:	ldrdeq	r0, [r0], -r8
   1bedc:	andeq	r3, r0, ip, lsl r1
   1bee0:	andeq	pc, pc, r0, lsl #30
   1bee4:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1bee8:	push	{r2, r3}
   1beec:	ldr	r3, [pc, #116]	; 1bf68 <__assert_fail@plt+0xa164>
   1bef0:	ldr	r2, [pc, #116]	; 1bf6c <__assert_fail@plt+0xa168>
   1bef4:	add	r3, pc, r3
   1bef8:	push	{r4, r5, r6, lr}
   1befc:	sub	sp, sp, #8
   1bf00:	ldr	r4, [r3, r2]
   1bf04:	add	ip, sp, #28
   1bf08:	mov	r2, ip
   1bf0c:	ldr	r3, [r4]
   1bf10:	mov	r5, r1
   1bf14:	ldr	r1, [sp, #24]
   1bf18:	str	ip, [sp]
   1bf1c:	str	r3, [sp, #4]
   1bf20:	mov	r6, r0
   1bf24:	bl	19f1c <__assert_fail@plt+0x8118>
   1bf28:	subs	r2, r0, #0
   1bf2c:	beq	1bf5c <__assert_fail@plt+0xa158>
   1bf30:	mov	r1, r5
   1bf34:	mov	r0, r6
   1bf38:	bl	1be24 <__assert_fail@plt+0xa020>
   1bf3c:	ldr	r2, [sp, #4]
   1bf40:	ldr	r3, [r4]
   1bf44:	cmp	r2, r3
   1bf48:	bne	1bf64 <__assert_fail@plt+0xa160>
   1bf4c:	add	sp, sp, #8
   1bf50:	pop	{r4, r5, r6, lr}
   1bf54:	add	sp, sp, #8
   1bf58:	bx	lr
   1bf5c:	mvn	r0, #21
   1bf60:	b	1bf3c <__assert_fail@plt+0xa138>
   1bf64:	bl	11a2c <__stack_chk_fail@plt>
   1bf68:	andeq	r3, r1, r0, lsr #30
   1bf6c:	ldrdeq	r0, [r0], -r8
   1bf70:	ldr	r3, [pc, #284]	; 1c094 <__assert_fail@plt+0xa290>
   1bf74:	ldr	ip, [pc, #284]	; 1c098 <__assert_fail@plt+0xa294>
   1bf78:	add	r3, pc, r3
   1bf7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf80:	sub	sp, sp, #20
   1bf84:	ldr	r8, [r3, ip]
   1bf88:	mov	r6, r1
   1bf8c:	ldr	r1, [pc, #264]	; 1c09c <__assert_fail@plt+0xa298>
   1bf90:	ldr	r3, [r8]
   1bf94:	str	r3, [sp, #12]
   1bf98:	bl	1aaf4 <__assert_fail@plt+0x8cf0>
   1bf9c:	mov	r7, r0
   1bfa0:	bl	11be8 <__errno_location@plt>
   1bfa4:	cmp	r7, #0
   1bfa8:	mov	r5, r0
   1bfac:	blt	1c07c <__assert_fail@plt+0xa278>
   1bfb0:	mov	r0, r6
   1bfb4:	bl	11bb8 <strlen@plt>
   1bfb8:	subs	r4, r0, #0
   1bfbc:	beq	1c034 <__assert_fail@plt+0xa230>
   1bfc0:	mov	r9, #0
   1bfc4:	add	sl, sp, #4
   1bfc8:	str	r9, [r5]
   1bfcc:	mov	r2, r4
   1bfd0:	mov	r1, r6
   1bfd4:	mov	r0, r7
   1bfd8:	bl	11c90 <write@plt>
   1bfdc:	cmp	r0, #0
   1bfe0:	ble	1c060 <__assert_fail@plt+0xa25c>
   1bfe4:	subs	r4, r4, r0
   1bfe8:	ldr	fp, [r5]
   1bfec:	beq	1c018 <__assert_fail@plt+0xa214>
   1bff0:	cmp	fp, #11
   1bff4:	add	r6, r6, r0
   1bff8:	bne	1bfc8 <__assert_fail@plt+0xa1c4>
   1bffc:	ldr	r3, [pc, #156]	; 1c0a0 <__assert_fail@plt+0xa29c>
   1c000:	mov	r1, #0
   1c004:	mov	r0, sl
   1c008:	str	r9, [sp, #4]
   1c00c:	str	r3, [sp, #8]
   1c010:	bl	11984 <nanosleep@plt>
   1c014:	b	1bfc8 <__assert_fail@plt+0xa1c4>
   1c018:	cmp	fp, #11
   1c01c:	bne	1c038 <__assert_fail@plt+0xa234>
   1c020:	ldr	r3, [pc, #120]	; 1c0a0 <__assert_fail@plt+0xa29c>
   1c024:	mov	r1, r4
   1c028:	add	r0, sp, #4
   1c02c:	stmib	sp, {r1, r3}
   1c030:	bl	11984 <nanosleep@plt>
   1c034:	ldr	fp, [r5]
   1c038:	mov	r0, r7
   1c03c:	bl	11dc8 <close@plt>
   1c040:	str	fp, [r5]
   1c044:	ldr	r2, [sp, #12]
   1c048:	ldr	r3, [r8]
   1c04c:	mov	r0, r4
   1c050:	cmp	r2, r3
   1c054:	bne	1c090 <__assert_fail@plt+0xa28c>
   1c058:	add	sp, sp, #20
   1c05c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c060:	ldr	fp, [r5]
   1c064:	cmp	fp, #4
   1c068:	cmpne	fp, #11
   1c06c:	bne	1c088 <__assert_fail@plt+0xa284>
   1c070:	cmp	fp, #11
   1c074:	bne	1bfc8 <__assert_fail@plt+0xa1c4>
   1c078:	b	1bffc <__assert_fail@plt+0xa1f8>
   1c07c:	ldr	r4, [r0]
   1c080:	rsb	r4, r4, #0
   1c084:	b	1c044 <__assert_fail@plt+0xa240>
   1c088:	mvn	r4, #0
   1c08c:	b	1c038 <__assert_fail@plt+0xa234>
   1c090:	bl	11a2c <__stack_chk_fail@plt>
   1c094:	muleq	r1, ip, lr
   1c098:	ldrdeq	r0, [r0], -r8
   1c09c:	andeq	r0, r8, r1
   1c0a0:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1c0a4:	push	{r2, r3}
   1c0a8:	ldr	r3, [pc, #116]	; 1c124 <__assert_fail@plt+0xa320>
   1c0ac:	ldr	r2, [pc, #116]	; 1c128 <__assert_fail@plt+0xa324>
   1c0b0:	add	r3, pc, r3
   1c0b4:	push	{r4, r5, r6, lr}
   1c0b8:	sub	sp, sp, #8
   1c0bc:	ldr	r4, [r3, r2]
   1c0c0:	add	ip, sp, #28
   1c0c4:	mov	r2, ip
   1c0c8:	ldr	r3, [r4]
   1c0cc:	mov	r5, r1
   1c0d0:	ldr	r1, [sp, #24]
   1c0d4:	str	ip, [sp]
   1c0d8:	str	r3, [sp, #4]
   1c0dc:	mov	r6, r0
   1c0e0:	bl	19f1c <__assert_fail@plt+0x8118>
   1c0e4:	subs	r2, r0, #0
   1c0e8:	beq	1c118 <__assert_fail@plt+0xa314>
   1c0ec:	mov	r1, r5
   1c0f0:	mov	r0, r6
   1c0f4:	bl	1bf70 <__assert_fail@plt+0xa16c>
   1c0f8:	ldr	r2, [sp, #4]
   1c0fc:	ldr	r3, [r4]
   1c100:	cmp	r2, r3
   1c104:	bne	1c120 <__assert_fail@plt+0xa31c>
   1c108:	add	sp, sp, #8
   1c10c:	pop	{r4, r5, r6, lr}
   1c110:	add	sp, sp, #8
   1c114:	bx	lr
   1c118:	mvn	r0, #21
   1c11c:	b	1c0f8 <__assert_fail@plt+0xa2f4>
   1c120:	bl	11a2c <__stack_chk_fail@plt>
   1c124:	andeq	r3, r1, r4, ror #26
   1c128:	ldrdeq	r0, [r0], -r8
   1c12c:	ldr	ip, [pc, #328]	; 1c27c <__assert_fail@plt+0xa478>
   1c130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c134:	add	ip, pc, ip
   1c138:	ldr	lr, [pc, #320]	; 1c280 <__assert_fail@plt+0xa47c>
   1c13c:	sub	sp, sp, #60	; 0x3c
   1c140:	mov	r9, r3
   1c144:	ldr	r7, [ip, lr]
   1c148:	mov	r3, ip
   1c14c:	ldr	r1, [pc, #304]	; 1c284 <__assert_fail@plt+0xa480>
   1c150:	ldr	r3, [r7]
   1c154:	mov	r8, r2
   1c158:	ldr	r2, [sp, #96]	; 0x60
   1c15c:	str	r3, [sp, #52]	; 0x34
   1c160:	bl	1aaf4 <__assert_fail@plt+0x8cf0>
   1c164:	mov	r6, r0
   1c168:	bl	11be8 <__errno_location@plt>
   1c16c:	cmp	r6, #0
   1c170:	mov	r5, r0
   1c174:	blt	1c264 <__assert_fail@plt+0xa460>
   1c178:	ldr	r2, [pc, #264]	; 1c288 <__assert_fail@plt+0xa484>
   1c17c:	mov	r3, #21
   1c180:	add	r2, pc, r2
   1c184:	strd	r8, [sp, #8]
   1c188:	str	r2, [sp]
   1c18c:	add	r0, sp, #28
   1c190:	mov	r1, r3
   1c194:	mov	r2, #1
   1c198:	mov	r8, r0
   1c19c:	bl	11de0 <__snprintf_chk@plt>
   1c1a0:	mov	r9, #0
   1c1a4:	add	sl, sp, #20
   1c1a8:	mov	r4, r0
   1c1ac:	str	r9, [r5]
   1c1b0:	mov	r2, r4
   1c1b4:	mov	r1, r8
   1c1b8:	mov	r0, r6
   1c1bc:	bl	11c90 <write@plt>
   1c1c0:	cmp	r0, #0
   1c1c4:	ble	1c1fc <__assert_fail@plt+0xa3f8>
   1c1c8:	subs	r4, r4, r0
   1c1cc:	ldr	fp, [r5]
   1c1d0:	beq	1c218 <__assert_fail@plt+0xa414>
   1c1d4:	cmp	fp, #11
   1c1d8:	add	r8, r8, r0
   1c1dc:	bne	1c1ac <__assert_fail@plt+0xa3a8>
   1c1e0:	ldr	r3, [pc, #164]	; 1c28c <__assert_fail@plt+0xa488>
   1c1e4:	mov	r1, #0
   1c1e8:	mov	r0, sl
   1c1ec:	str	r9, [sp, #20]
   1c1f0:	str	r3, [sp, #24]
   1c1f4:	bl	11984 <nanosleep@plt>
   1c1f8:	b	1c1ac <__assert_fail@plt+0xa3a8>
   1c1fc:	ldr	fp, [r5]
   1c200:	cmp	fp, #4
   1c204:	cmpne	fp, #11
   1c208:	bne	1c270 <__assert_fail@plt+0xa46c>
   1c20c:	cmp	fp, #11
   1c210:	bne	1c1ac <__assert_fail@plt+0xa3a8>
   1c214:	b	1c1e0 <__assert_fail@plt+0xa3dc>
   1c218:	cmp	fp, #11
   1c21c:	bne	1c23c <__assert_fail@plt+0xa438>
   1c220:	ldr	r3, [pc, #100]	; 1c28c <__assert_fail@plt+0xa488>
   1c224:	mov	r1, r4
   1c228:	add	r0, sp, #20
   1c22c:	str	r4, [sp, #20]
   1c230:	str	r3, [sp, #24]
   1c234:	bl	11984 <nanosleep@plt>
   1c238:	ldr	fp, [r5]
   1c23c:	mov	r0, r6
   1c240:	bl	11dc8 <close@plt>
   1c244:	str	fp, [r5]
   1c248:	ldr	r2, [sp, #52]	; 0x34
   1c24c:	ldr	r3, [r7]
   1c250:	mov	r0, r4
   1c254:	cmp	r2, r3
   1c258:	bne	1c278 <__assert_fail@plt+0xa474>
   1c25c:	add	sp, sp, #60	; 0x3c
   1c260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c264:	ldr	r4, [r0]
   1c268:	rsb	r4, r4, #0
   1c26c:	b	1c248 <__assert_fail@plt+0xa444>
   1c270:	mvn	r4, #0
   1c274:	b	1c23c <__assert_fail@plt+0xa438>
   1c278:	bl	11a2c <__stack_chk_fail@plt>
   1c27c:	andeq	r3, r1, r0, ror #25
   1c280:	ldrdeq	r0, [r0], -r8
   1c284:	andeq	r0, r8, r1
   1c288:	andeq	r2, r0, r0, ror #27
   1c28c:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1c290:	ldr	ip, [pc, #328]	; 1c3e0 <__assert_fail@plt+0xa5dc>
   1c294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c298:	add	ip, pc, ip
   1c29c:	ldr	lr, [pc, #320]	; 1c3e4 <__assert_fail@plt+0xa5e0>
   1c2a0:	sub	sp, sp, #76	; 0x4c
   1c2a4:	mov	r9, r3
   1c2a8:	ldr	r7, [ip, lr]
   1c2ac:	mov	r3, ip
   1c2b0:	ldr	r1, [pc, #304]	; 1c3e8 <__assert_fail@plt+0xa5e4>
   1c2b4:	ldr	r3, [r7]
   1c2b8:	mov	r8, r2
   1c2bc:	ldr	r2, [sp, #112]	; 0x70
   1c2c0:	str	r3, [sp, #68]	; 0x44
   1c2c4:	bl	1aaf4 <__assert_fail@plt+0x8cf0>
   1c2c8:	mov	r6, r0
   1c2cc:	bl	11be8 <__errno_location@plt>
   1c2d0:	cmp	r6, #0
   1c2d4:	mov	r5, r0
   1c2d8:	blt	1c3c8 <__assert_fail@plt+0xa5c4>
   1c2dc:	ldr	r2, [pc, #264]	; 1c3ec <__assert_fail@plt+0xa5e8>
   1c2e0:	mov	r3, #37	; 0x25
   1c2e4:	add	r2, pc, r2
   1c2e8:	strd	r8, [sp, #8]
   1c2ec:	str	r2, [sp]
   1c2f0:	add	r0, sp, #28
   1c2f4:	mov	r1, r3
   1c2f8:	mov	r2, #1
   1c2fc:	mov	r8, r0
   1c300:	bl	11de0 <__snprintf_chk@plt>
   1c304:	mov	r9, #0
   1c308:	add	sl, sp, #20
   1c30c:	mov	r4, r0
   1c310:	str	r9, [r5]
   1c314:	mov	r2, r4
   1c318:	mov	r1, r8
   1c31c:	mov	r0, r6
   1c320:	bl	11c90 <write@plt>
   1c324:	cmp	r0, #0
   1c328:	ble	1c360 <__assert_fail@plt+0xa55c>
   1c32c:	subs	r4, r4, r0
   1c330:	ldr	fp, [r5]
   1c334:	beq	1c37c <__assert_fail@plt+0xa578>
   1c338:	cmp	fp, #11
   1c33c:	add	r8, r8, r0
   1c340:	bne	1c310 <__assert_fail@plt+0xa50c>
   1c344:	ldr	r3, [pc, #164]	; 1c3f0 <__assert_fail@plt+0xa5ec>
   1c348:	mov	r1, #0
   1c34c:	mov	r0, sl
   1c350:	str	r9, [sp, #20]
   1c354:	str	r3, [sp, #24]
   1c358:	bl	11984 <nanosleep@plt>
   1c35c:	b	1c310 <__assert_fail@plt+0xa50c>
   1c360:	ldr	fp, [r5]
   1c364:	cmp	fp, #4
   1c368:	cmpne	fp, #11
   1c36c:	bne	1c3d4 <__assert_fail@plt+0xa5d0>
   1c370:	cmp	fp, #11
   1c374:	bne	1c310 <__assert_fail@plt+0xa50c>
   1c378:	b	1c344 <__assert_fail@plt+0xa540>
   1c37c:	cmp	fp, #11
   1c380:	bne	1c3a0 <__assert_fail@plt+0xa59c>
   1c384:	ldr	r3, [pc, #100]	; 1c3f0 <__assert_fail@plt+0xa5ec>
   1c388:	mov	r1, r4
   1c38c:	add	r0, sp, #20
   1c390:	str	r4, [sp, #20]
   1c394:	str	r3, [sp, #24]
   1c398:	bl	11984 <nanosleep@plt>
   1c39c:	ldr	fp, [r5]
   1c3a0:	mov	r0, r6
   1c3a4:	bl	11dc8 <close@plt>
   1c3a8:	str	fp, [r5]
   1c3ac:	ldr	r2, [sp, #68]	; 0x44
   1c3b0:	ldr	r3, [r7]
   1c3b4:	mov	r0, r4
   1c3b8:	cmp	r2, r3
   1c3bc:	bne	1c3dc <__assert_fail@plt+0xa5d8>
   1c3c0:	add	sp, sp, #76	; 0x4c
   1c3c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3c8:	ldr	r4, [r0]
   1c3cc:	rsb	r4, r4, #0
   1c3d0:	b	1c3ac <__assert_fail@plt+0xa5a8>
   1c3d4:	mvn	r4, #0
   1c3d8:	b	1c3a0 <__assert_fail@plt+0xa59c>
   1c3dc:	bl	11a2c <__stack_chk_fail@plt>
   1c3e0:	andeq	r3, r1, ip, ror fp
   1c3e4:	ldrdeq	r0, [r0], -r8
   1c3e8:	andeq	r0, r8, r1
   1c3ec:	andeq	r2, r0, r4, lsl #25
   1c3f0:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1c3f4:	ldr	r1, [pc, #124]	; 1c478 <__assert_fail@plt+0xa674>
   1c3f8:	ldr	ip, [pc, #124]	; 1c47c <__assert_fail@plt+0xa678>
   1c3fc:	add	r1, pc, r1
   1c400:	push	{r4, r5, r6, r7, lr}
   1c404:	sub	sp, sp, #20
   1c408:	ldr	r6, [r1, ip]
   1c40c:	add	lr, sp, #44	; 0x2c
   1c410:	mov	r5, r3
   1c414:	mov	r3, r1
   1c418:	ldr	r3, [r6]
   1c41c:	mov	r4, r2
   1c420:	ldr	r1, [sp, #40]	; 0x28
   1c424:	mov	r2, lr
   1c428:	str	lr, [sp, #8]
   1c42c:	str	r3, [sp, #12]
   1c430:	mov	r7, r0
   1c434:	bl	19f1c <__assert_fail@plt+0x8118>
   1c438:	cmp	r0, #0
   1c43c:	beq	1c46c <__assert_fail@plt+0xa668>
   1c440:	str	r0, [sp]
   1c444:	mov	r2, r4
   1c448:	mov	r3, r5
   1c44c:	mov	r0, r7
   1c450:	bl	1c290 <__assert_fail@plt+0xa48c>
   1c454:	ldr	r2, [sp, #12]
   1c458:	ldr	r3, [r6]
   1c45c:	cmp	r2, r3
   1c460:	bne	1c474 <__assert_fail@plt+0xa670>
   1c464:	add	sp, sp, #20
   1c468:	pop	{r4, r5, r6, r7, pc}
   1c46c:	mvn	r0, #21
   1c470:	b	1c454 <__assert_fail@plt+0xa650>
   1c474:	bl	11a2c <__stack_chk_fail@plt>
   1c478:	andeq	r3, r1, r8, lsl sl
   1c47c:	ldrdeq	r0, [r0], -r8
   1c480:	push	{r4, r5, r6, r7, r8, lr}
   1c484:	bl	1b0d8 <__assert_fail@plt+0x92d4>
   1c488:	subs	r6, r0, #0
   1c48c:	moveq	r5, r6
   1c490:	beq	1c4f0 <__assert_fail@plt+0xa6ec>
   1c494:	ldr	r8, [pc, #92]	; 1c4f8 <__assert_fail@plt+0xa6f4>
   1c498:	ldr	r7, [pc, #92]	; 1c4fc <__assert_fail@plt+0xa6f8>
   1c49c:	mov	r5, #0
   1c4a0:	add	r8, pc, r8
   1c4a4:	add	r7, pc, r7
   1c4a8:	mov	r0, r6
   1c4ac:	bl	11d38 <readdir64@plt>
   1c4b0:	mov	r1, r8
   1c4b4:	cmp	r0, #0
   1c4b8:	add	r4, r0, #19
   1c4bc:	mov	r0, r4
   1c4c0:	beq	1c4e8 <__assert_fail@plt+0xa6e4>
   1c4c4:	bl	118f4 <strcmp@plt>
   1c4c8:	mov	r1, r7
   1c4cc:	cmp	r0, #0
   1c4d0:	mov	r0, r4
   1c4d4:	beq	1c4a8 <__assert_fail@plt+0xa6a4>
   1c4d8:	bl	118f4 <strcmp@plt>
   1c4dc:	cmp	r0, #0
   1c4e0:	addne	r5, r5, #1
   1c4e4:	b	1c4a8 <__assert_fail@plt+0xa6a4>
   1c4e8:	mov	r0, r6
   1c4ec:	bl	11dd4 <closedir@plt>
   1c4f0:	mov	r0, r5
   1c4f4:	pop	{r4, r5, r6, r7, r8, pc}
   1c4f8:	ldrdeq	r2, [r0], -r0
   1c4fc:	ldrdeq	r2, [r0], -r8
   1c500:	push	{r1, r2, r3}
   1c504:	ldr	r3, [pc, #104]	; 1c574 <__assert_fail@plt+0xa770>
   1c508:	ldr	r1, [pc, #104]	; 1c578 <__assert_fail@plt+0xa774>
   1c50c:	add	r3, pc, r3
   1c510:	push	{r4, r5, lr}
   1c514:	sub	sp, sp, #8
   1c518:	ldr	r4, [r3, r1]
   1c51c:	add	ip, sp, #24
   1c520:	ldr	r1, [sp, #20]
   1c524:	ldr	r3, [r4]
   1c528:	mov	r2, ip
   1c52c:	str	ip, [sp]
   1c530:	mov	r5, r0
   1c534:	str	r3, [sp, #4]
   1c538:	bl	19f1c <__assert_fail@plt+0x8118>
   1c53c:	subs	r1, r0, #0
   1c540:	moveq	r0, r1
   1c544:	beq	1c550 <__assert_fail@plt+0xa74c>
   1c548:	mov	r0, r5
   1c54c:	bl	1c480 <__assert_fail@plt+0xa67c>
   1c550:	ldr	r2, [sp, #4]
   1c554:	ldr	r3, [r4]
   1c558:	cmp	r2, r3
   1c55c:	bne	1c570 <__assert_fail@plt+0xa76c>
   1c560:	add	sp, sp, #8
   1c564:	pop	{r4, r5, lr}
   1c568:	add	sp, sp, #12
   1c56c:	bx	lr
   1c570:	bl	11a2c <__stack_chk_fail@plt>
   1c574:	andeq	r3, r1, r8, lsl #18
   1c578:	ldrdeq	r0, [r0], -r8
   1c57c:	ldr	r3, [pc, #184]	; 1c63c <__assert_fail@plt+0xa838>
   1c580:	push	{r4, r5, r6, lr}
   1c584:	add	r3, pc, r3
   1c588:	ldr	lr, [pc, #176]	; 1c640 <__assert_fail@plt+0xa83c>
   1c58c:	sub	sp, sp, #4096	; 0x1000
   1c590:	sub	sp, sp, #24
   1c594:	ldr	r5, [r3, lr]
   1c598:	mov	r6, r2
   1c59c:	add	r2, sp, #4096	; 0x1000
   1c5a0:	add	r2, r2, #20
   1c5a4:	ldr	r3, [r5]
   1c5a8:	subs	ip, r1, #0
   1c5ac:	str	r3, [r2]
   1c5b0:	beq	1c630 <__assert_fail@plt+0xa82c>
   1c5b4:	cmp	r0, #0
   1c5b8:	beq	1c620 <__assert_fail@plt+0xa81c>
   1c5bc:	ldrsb	r3, [ip]
   1c5c0:	ldr	r2, [pc, #124]	; 1c644 <__assert_fail@plt+0xa840>
   1c5c4:	add	r4, sp, #20
   1c5c8:	cmp	r3, #47	; 0x2f
   1c5cc:	addeq	ip, ip, #1
   1c5d0:	add	r2, pc, r2
   1c5d4:	mov	r3, #4096	; 0x1000
   1c5d8:	stmib	sp, {r0, ip}
   1c5dc:	str	r2, [sp]
   1c5e0:	mov	r1, r3
   1c5e4:	mov	r0, r4
   1c5e8:	mov	r2, #1
   1c5ec:	bl	11de0 <__snprintf_chk@plt>
   1c5f0:	mov	r1, r6
   1c5f4:	mov	r0, r4
   1c5f8:	bl	11d68 <fopen64@plt>
   1c5fc:	add	r3, sp, #4096	; 0x1000
   1c600:	add	r3, r3, #20
   1c604:	ldr	r2, [r3]
   1c608:	ldr	r3, [r5]
   1c60c:	cmp	r2, r3
   1c610:	bne	1c638 <__assert_fail@plt+0xa834>
   1c614:	add	sp, sp, #4096	; 0x1000
   1c618:	add	sp, sp, #24
   1c61c:	pop	{r4, r5, r6, pc}
   1c620:	mov	r1, r6
   1c624:	mov	r0, ip
   1c628:	bl	11d68 <fopen64@plt>
   1c62c:	b	1c5fc <__assert_fail@plt+0xa7f8>
   1c630:	mov	r0, ip
   1c634:	b	1c5fc <__assert_fail@plt+0xa7f8>
   1c638:	bl	11a2c <__stack_chk_fail@plt>
   1c63c:	muleq	r1, r0, r8
   1c640:	ldrdeq	r0, [r0], -r8
   1c644:	andeq	r2, r0, r4, lsl r8
   1c648:	push	{r3}		; (str r3, [sp, #-4]!)
   1c64c:	ldr	r3, [pc, #88]	; 1c6ac <__assert_fail@plt+0xa8a8>
   1c650:	ldr	ip, [pc, #88]	; 1c6b0 <__assert_fail@plt+0xa8ac>
   1c654:	add	r3, pc, r3
   1c658:	push	{r4, lr}
   1c65c:	sub	sp, sp, #20
   1c660:	ldr	r4, [r3, ip]
   1c664:	ldr	lr, [sp, #28]
   1c668:	add	ip, sp, #32
   1c66c:	str	lr, [sp]
   1c670:	ldr	r3, [r4]
   1c674:	str	ip, [sp, #4]
   1c678:	str	r3, [sp, #12]
   1c67c:	mov	r3, #0
   1c680:	str	ip, [sp, #8]
   1c684:	bl	1af2c <__assert_fail@plt+0x9128>
   1c688:	ldr	r2, [sp, #12]
   1c68c:	ldr	r3, [r4]
   1c690:	cmp	r2, r3
   1c694:	bne	1c6a8 <__assert_fail@plt+0xa8a4>
   1c698:	add	sp, sp, #20
   1c69c:	pop	{r4, lr}
   1c6a0:	add	sp, sp, #4
   1c6a4:	bx	lr
   1c6a8:	bl	11a2c <__stack_chk_fail@plt>
   1c6ac:	andeq	r3, r1, r0, asr #15
   1c6b0:	ldrdeq	r0, [r0], -r8
   1c6b4:	push	{r3}		; (str r3, [sp, #-4]!)
   1c6b8:	ldr	r3, [pc, #88]	; 1c718 <__assert_fail@plt+0xa914>
   1c6bc:	ldr	ip, [pc, #88]	; 1c71c <__assert_fail@plt+0xa918>
   1c6c0:	add	r3, pc, r3
   1c6c4:	push	{r4, lr}
   1c6c8:	sub	sp, sp, #20
   1c6cc:	ldr	r4, [r3, ip]
   1c6d0:	ldr	lr, [sp, #28]
   1c6d4:	add	ip, sp, #32
   1c6d8:	str	lr, [sp]
   1c6dc:	ldr	r3, [r4]
   1c6e0:	str	ip, [sp, #4]
   1c6e4:	str	r3, [sp, #12]
   1c6e8:	mov	r3, #1
   1c6ec:	str	ip, [sp, #8]
   1c6f0:	bl	1af2c <__assert_fail@plt+0x9128>
   1c6f4:	ldr	r2, [sp, #12]
   1c6f8:	ldr	r3, [r4]
   1c6fc:	cmp	r2, r3
   1c700:	bne	1c714 <__assert_fail@plt+0xa910>
   1c704:	add	sp, sp, #20
   1c708:	pop	{r4, lr}
   1c70c:	add	sp, sp, #4
   1c710:	bx	lr
   1c714:	bl	11a2c <__stack_chk_fail@plt>
   1c718:	andeq	r3, r1, r4, asr r7
   1c71c:	ldrdeq	r0, [r0], -r8
   1c720:	ldr	r1, [pc]	; 1c728 <__assert_fail@plt+0xa924>
   1c724:	b	11a98 <mkostemp64@plt>
   1c728:	andeq	r0, r8, r2, asr #1
   1c72c:	ldr	ip, [pc, #208]	; 1c804 <__assert_fail@plt+0xaa00>
   1c730:	push	{r4, r5, r6, r7, lr}
   1c734:	add	ip, pc, ip
   1c738:	ldr	lr, [pc, #200]	; 1c808 <__assert_fail@plt+0xaa04>
   1c73c:	sub	sp, sp, #20
   1c740:	mov	r5, r2
   1c744:	ldr	r4, [ip, lr]
   1c748:	subs	r3, r1, #0
   1c74c:	mov	r6, r0
   1c750:	ldr	r2, [r4]
   1c754:	mov	r0, ip
   1c758:	str	r2, [sp, #12]
   1c75c:	beq	1c7cc <__assert_fail@plt+0xa9c8>
   1c760:	ldr	r2, [pc, #164]	; 1c80c <__assert_fail@plt+0xaa08>
   1c764:	str	r5, [sp]
   1c768:	add	r2, pc, r2
   1c76c:	mov	r1, #1
   1c770:	add	r0, sp, #8
   1c774:	bl	11aec <__asprintf_chk@plt>
   1c778:	cmp	r0, #0
   1c77c:	blt	1c7f8 <__assert_fail@plt+0xa9f4>
   1c780:	mov	r0, #63	; 0x3f
   1c784:	bl	11d8c <umask@plt>
   1c788:	mov	r7, r0
   1c78c:	ldr	r0, [sp, #8]
   1c790:	bl	1c720 <__assert_fail@plt+0xa91c>
   1c794:	mov	r5, r0
   1c798:	mov	r0, r7
   1c79c:	bl	11d8c <umask@plt>
   1c7a0:	cmn	r5, #1
   1c7a4:	beq	1c7e8 <__assert_fail@plt+0xa9e4>
   1c7a8:	ldr	r3, [sp, #8]
   1c7ac:	str	r3, [r6]
   1c7b0:	ldr	r2, [sp, #12]
   1c7b4:	ldr	r3, [r4]
   1c7b8:	mov	r0, r5
   1c7bc:	cmp	r2, r3
   1c7c0:	bne	1c800 <__assert_fail@plt+0xa9fc>
   1c7c4:	add	sp, sp, #20
   1c7c8:	pop	{r4, r5, r6, r7, pc}
   1c7cc:	ldr	r0, [pc, #60]	; 1c810 <__assert_fail@plt+0xaa0c>
   1c7d0:	add	r0, pc, r0
   1c7d4:	bl	11af8 <getenv@plt>
   1c7d8:	subs	r3, r0, #0
   1c7dc:	ldreq	r3, [pc, #48]	; 1c814 <__assert_fail@plt+0xaa10>
   1c7e0:	addeq	r3, pc, r3
   1c7e4:	b	1c760 <__assert_fail@plt+0xa95c>
   1c7e8:	ldr	r0, [sp, #8]
   1c7ec:	bl	1196c <free@plt>
   1c7f0:	mov	r3, #0
   1c7f4:	b	1c7ac <__assert_fail@plt+0xa9a8>
   1c7f8:	mvn	r5, #0
   1c7fc:	b	1c7b0 <__assert_fail@plt+0xa9ac>
   1c800:	bl	11a2c <__stack_chk_fail@plt>
   1c804:	andeq	r3, r1, r0, ror #13
   1c808:	ldrdeq	r0, [r0], -r8
   1c80c:	andeq	r2, r0, r8, lsr #16
   1c810:			; <UNDEFINED> instruction: 0x000027b8
   1c814:	andeq	r2, r0, r0, lsr #15
   1c818:	push	{r4, r5, r6, lr}
   1c81c:	mov	r2, r1
   1c820:	ldr	r1, [pc, #108]	; 1c894 <__assert_fail@plt+0xaa90>
   1c824:	mov	r5, r0
   1c828:	bl	11ccc <fcntl64@plt>
   1c82c:	subs	r4, r0, #0
   1c830:	blt	1c83c <__assert_fail@plt+0xaa38>
   1c834:	mov	r0, r4
   1c838:	pop	{r4, r5, r6, pc}
   1c83c:	mov	r0, r5
   1c840:	bl	11a44 <dup@plt>
   1c844:	subs	r4, r0, #0
   1c848:	blt	1c834 <__assert_fail@plt+0xaa30>
   1c84c:	mov	r1, #1
   1c850:	bl	11ccc <fcntl64@plt>
   1c854:	subs	r2, r0, #0
   1c858:	blt	1c874 <__assert_fail@plt+0xaa70>
   1c85c:	orr	r2, r2, #1
   1c860:	mov	r1, #2
   1c864:	mov	r0, r4
   1c868:	bl	11ccc <fcntl64@plt>
   1c86c:	cmp	r0, #0
   1c870:	bge	1c834 <__assert_fail@plt+0xaa30>
   1c874:	bl	11be8 <__errno_location@plt>
   1c878:	mov	r5, r0
   1c87c:	mov	r0, r4
   1c880:	ldr	r6, [r5]
   1c884:	mvn	r4, #0
   1c888:	bl	11dc8 <close@plt>
   1c88c:	str	r6, [r5]
   1c890:	b	1c834 <__assert_fail@plt+0xaa30>
   1c894:	andeq	r0, r0, r6, lsl #8
   1c898:	b	11b4c <getdtablesize@plt>
   1c89c:	subs	r3, r0, #0
   1c8a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c8a4:	beq	1c99c <__assert_fail@plt+0xab98>
   1c8a8:	ldrsb	r3, [r3]
   1c8ac:	cmp	r3, #0
   1c8b0:	beq	1c99c <__assert_fail@plt+0xab98>
   1c8b4:	mov	r9, r1
   1c8b8:	bl	11a20 <strdup@plt>
   1c8bc:	subs	r8, r0, #0
   1c8c0:	beq	1c9a4 <__assert_fail@plt+0xaba0>
   1c8c4:	ldrsb	r3, [r8]
   1c8c8:	cmp	r3, #47	; 0x2f
   1c8cc:	addeq	r4, r8, #1
   1c8d0:	ldrsbeq	r3, [r8, #1]
   1c8d4:	movne	r4, r8
   1c8d8:	cmp	r3, #0
   1c8dc:	beq	1c96c <__assert_fail@plt+0xab68>
   1c8e0:	mov	r6, #47	; 0x2f
   1c8e4:	mov	r7, #0
   1c8e8:	b	1c918 <__assert_fail@plt+0xab14>
   1c8ec:	strb	r7, [r5]
   1c8f0:	ldrsb	r3, [r4]
   1c8f4:	cmp	r3, #0
   1c8f8:	bne	1c974 <__assert_fail@plt+0xab70>
   1c8fc:	mov	r4, r5
   1c900:	strb	r6, [r4], #1
   1c904:	cmp	r4, #0
   1c908:	beq	1c96c <__assert_fail@plt+0xab68>
   1c90c:	ldrsb	r3, [r5, #1]
   1c910:	cmp	r3, #0
   1c914:	beq	1c96c <__assert_fail@plt+0xab68>
   1c918:	mov	r1, #47	; 0x2f
   1c91c:	mov	r0, r4
   1c920:	bl	11bc4 <strchr@plt>
   1c924:	subs	r5, r0, #0
   1c928:	bne	1c8ec <__assert_fail@plt+0xaae8>
   1c92c:	ldrsb	r3, [r4]
   1c930:	cmp	r3, #0
   1c934:	beq	1c96c <__assert_fail@plt+0xab68>
   1c938:	mov	r1, r9
   1c93c:	mov	r0, r8
   1c940:	bl	11c24 <mkdir@plt>
   1c944:	subs	r4, r0, #0
   1c948:	beq	1c96c <__assert_fail@plt+0xab68>
   1c94c:	bl	11be8 <__errno_location@plt>
   1c950:	ldr	r3, [r0]
   1c954:	cmp	r3, #17
   1c958:	beq	1c96c <__assert_fail@plt+0xab68>
   1c95c:	mov	r0, r8
   1c960:	bl	1196c <free@plt>
   1c964:	mov	r0, r4
   1c968:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c96c:	mov	r4, #0
   1c970:	b	1c95c <__assert_fail@plt+0xab58>
   1c974:	mov	r1, r9
   1c978:	mov	r0, r8
   1c97c:	bl	11c24 <mkdir@plt>
   1c980:	subs	r4, r0, #0
   1c984:	beq	1c8fc <__assert_fail@plt+0xaaf8>
   1c988:	bl	11be8 <__errno_location@plt>
   1c98c:	ldr	r3, [r0]
   1c990:	cmp	r3, #17
   1c994:	beq	1c8fc <__assert_fail@plt+0xaaf8>
   1c998:	b	1c95c <__assert_fail@plt+0xab58>
   1c99c:	mvn	r4, #21
   1c9a0:	b	1c964 <__assert_fail@plt+0xab60>
   1c9a4:	mvn	r4, #11
   1c9a8:	b	1c964 <__assert_fail@plt+0xab60>
   1c9ac:	subs	r3, r0, #0
   1c9b0:	beq	1c9d0 <__assert_fail@plt+0xabcc>
   1c9b4:	push	{r4, lr}
   1c9b8:	mov	r1, #47	; 0x2f
   1c9bc:	bl	11cf0 <strrchr@plt>
   1c9c0:	cmp	r0, #0
   1c9c4:	movne	r3, #0
   1c9c8:	strbne	r3, [r0], #1
   1c9cc:	pop	{r4, pc}
   1c9d0:	mov	r0, r3
   1c9d4:	bx	lr
   1c9d8:	cmp	r1, #0
   1c9dc:	beq	1cbe8 <__assert_fail@plt+0xade4>
   1c9e0:	eor	ip, r0, r1
   1c9e4:	rsbmi	r1, r1, #0
   1c9e8:	subs	r2, r1, #1
   1c9ec:	beq	1cbb4 <__assert_fail@plt+0xadb0>
   1c9f0:	movs	r3, r0
   1c9f4:	rsbmi	r3, r0, #0
   1c9f8:	cmp	r3, r1
   1c9fc:	bls	1cbc0 <__assert_fail@plt+0xadbc>
   1ca00:	tst	r1, r2
   1ca04:	beq	1cbd0 <__assert_fail@plt+0xadcc>
   1ca08:	clz	r2, r3
   1ca0c:	clz	r0, r1
   1ca10:	sub	r2, r0, r2
   1ca14:	rsbs	r2, r2, #31
   1ca18:	addne	r2, r2, r2, lsl #1
   1ca1c:	mov	r0, #0
   1ca20:	addne	pc, pc, r2, lsl #2
   1ca24:	nop			; (mov r0, r0)
   1ca28:	cmp	r3, r1, lsl #31
   1ca2c:	adc	r0, r0, r0
   1ca30:	subcs	r3, r3, r1, lsl #31
   1ca34:	cmp	r3, r1, lsl #30
   1ca38:	adc	r0, r0, r0
   1ca3c:	subcs	r3, r3, r1, lsl #30
   1ca40:	cmp	r3, r1, lsl #29
   1ca44:	adc	r0, r0, r0
   1ca48:	subcs	r3, r3, r1, lsl #29
   1ca4c:	cmp	r3, r1, lsl #28
   1ca50:	adc	r0, r0, r0
   1ca54:	subcs	r3, r3, r1, lsl #28
   1ca58:	cmp	r3, r1, lsl #27
   1ca5c:	adc	r0, r0, r0
   1ca60:	subcs	r3, r3, r1, lsl #27
   1ca64:	cmp	r3, r1, lsl #26
   1ca68:	adc	r0, r0, r0
   1ca6c:	subcs	r3, r3, r1, lsl #26
   1ca70:	cmp	r3, r1, lsl #25
   1ca74:	adc	r0, r0, r0
   1ca78:	subcs	r3, r3, r1, lsl #25
   1ca7c:	cmp	r3, r1, lsl #24
   1ca80:	adc	r0, r0, r0
   1ca84:	subcs	r3, r3, r1, lsl #24
   1ca88:	cmp	r3, r1, lsl #23
   1ca8c:	adc	r0, r0, r0
   1ca90:	subcs	r3, r3, r1, lsl #23
   1ca94:	cmp	r3, r1, lsl #22
   1ca98:	adc	r0, r0, r0
   1ca9c:	subcs	r3, r3, r1, lsl #22
   1caa0:	cmp	r3, r1, lsl #21
   1caa4:	adc	r0, r0, r0
   1caa8:	subcs	r3, r3, r1, lsl #21
   1caac:	cmp	r3, r1, lsl #20
   1cab0:	adc	r0, r0, r0
   1cab4:	subcs	r3, r3, r1, lsl #20
   1cab8:	cmp	r3, r1, lsl #19
   1cabc:	adc	r0, r0, r0
   1cac0:	subcs	r3, r3, r1, lsl #19
   1cac4:	cmp	r3, r1, lsl #18
   1cac8:	adc	r0, r0, r0
   1cacc:	subcs	r3, r3, r1, lsl #18
   1cad0:	cmp	r3, r1, lsl #17
   1cad4:	adc	r0, r0, r0
   1cad8:	subcs	r3, r3, r1, lsl #17
   1cadc:	cmp	r3, r1, lsl #16
   1cae0:	adc	r0, r0, r0
   1cae4:	subcs	r3, r3, r1, lsl #16
   1cae8:	cmp	r3, r1, lsl #15
   1caec:	adc	r0, r0, r0
   1caf0:	subcs	r3, r3, r1, lsl #15
   1caf4:	cmp	r3, r1, lsl #14
   1caf8:	adc	r0, r0, r0
   1cafc:	subcs	r3, r3, r1, lsl #14
   1cb00:	cmp	r3, r1, lsl #13
   1cb04:	adc	r0, r0, r0
   1cb08:	subcs	r3, r3, r1, lsl #13
   1cb0c:	cmp	r3, r1, lsl #12
   1cb10:	adc	r0, r0, r0
   1cb14:	subcs	r3, r3, r1, lsl #12
   1cb18:	cmp	r3, r1, lsl #11
   1cb1c:	adc	r0, r0, r0
   1cb20:	subcs	r3, r3, r1, lsl #11
   1cb24:	cmp	r3, r1, lsl #10
   1cb28:	adc	r0, r0, r0
   1cb2c:	subcs	r3, r3, r1, lsl #10
   1cb30:	cmp	r3, r1, lsl #9
   1cb34:	adc	r0, r0, r0
   1cb38:	subcs	r3, r3, r1, lsl #9
   1cb3c:	cmp	r3, r1, lsl #8
   1cb40:	adc	r0, r0, r0
   1cb44:	subcs	r3, r3, r1, lsl #8
   1cb48:	cmp	r3, r1, lsl #7
   1cb4c:	adc	r0, r0, r0
   1cb50:	subcs	r3, r3, r1, lsl #7
   1cb54:	cmp	r3, r1, lsl #6
   1cb58:	adc	r0, r0, r0
   1cb5c:	subcs	r3, r3, r1, lsl #6
   1cb60:	cmp	r3, r1, lsl #5
   1cb64:	adc	r0, r0, r0
   1cb68:	subcs	r3, r3, r1, lsl #5
   1cb6c:	cmp	r3, r1, lsl #4
   1cb70:	adc	r0, r0, r0
   1cb74:	subcs	r3, r3, r1, lsl #4
   1cb78:	cmp	r3, r1, lsl #3
   1cb7c:	adc	r0, r0, r0
   1cb80:	subcs	r3, r3, r1, lsl #3
   1cb84:	cmp	r3, r1, lsl #2
   1cb88:	adc	r0, r0, r0
   1cb8c:	subcs	r3, r3, r1, lsl #2
   1cb90:	cmp	r3, r1, lsl #1
   1cb94:	adc	r0, r0, r0
   1cb98:	subcs	r3, r3, r1, lsl #1
   1cb9c:	cmp	r3, r1
   1cba0:	adc	r0, r0, r0
   1cba4:	subcs	r3, r3, r1
   1cba8:	cmp	ip, #0
   1cbac:	rsbmi	r0, r0, #0
   1cbb0:	bx	lr
   1cbb4:	teq	ip, r0
   1cbb8:	rsbmi	r0, r0, #0
   1cbbc:	bx	lr
   1cbc0:	movcc	r0, #0
   1cbc4:	asreq	r0, ip, #31
   1cbc8:	orreq	r0, r0, #1
   1cbcc:	bx	lr
   1cbd0:	clz	r2, r1
   1cbd4:	rsb	r2, r2, #31
   1cbd8:	cmp	ip, #0
   1cbdc:	lsr	r0, r3, r2
   1cbe0:	rsbmi	r0, r0, #0
   1cbe4:	bx	lr
   1cbe8:	cmp	r0, #0
   1cbec:	mvngt	r0, #-2147483648	; 0x80000000
   1cbf0:	movlt	r0, #-2147483648	; 0x80000000
   1cbf4:	b	1cc54 <__assert_fail@plt+0xae50>
   1cbf8:	cmp	r1, #0
   1cbfc:	beq	1cbe8 <__assert_fail@plt+0xade4>
   1cc00:	push	{r0, r1, lr}
   1cc04:	bl	1c9e0 <__assert_fail@plt+0xabdc>
   1cc08:	pop	{r1, r2, lr}
   1cc0c:	mul	r3, r2, r0
   1cc10:	sub	r1, r1, r3
   1cc14:	bx	lr
   1cc18:	cmp	r3, #0
   1cc1c:	cmpeq	r2, #0
   1cc20:	bne	1cc38 <__assert_fail@plt+0xae34>
   1cc24:	cmp	r1, #0
   1cc28:	cmpeq	r0, #0
   1cc2c:	mvnne	r1, #0
   1cc30:	mvnne	r0, #0
   1cc34:	b	1cc54 <__assert_fail@plt+0xae50>
   1cc38:	sub	sp, sp, #8
   1cc3c:	push	{sp, lr}
   1cc40:	bl	1cc64 <__assert_fail@plt+0xae60>
   1cc44:	ldr	lr, [sp, #4]
   1cc48:	add	sp, sp, #8
   1cc4c:	pop	{r2, r3}
   1cc50:	bx	lr
   1cc54:	push	{r1, lr}
   1cc58:	mov	r0, #8
   1cc5c:	bl	118d0 <raise@plt>
   1cc60:	pop	{r1, pc}
   1cc64:	cmp	r1, r3
   1cc68:	cmpeq	r0, r2
   1cc6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc70:	mov	r4, r0
   1cc74:	movcc	r0, #0
   1cc78:	mov	r5, r1
   1cc7c:	ldr	lr, [sp, #36]	; 0x24
   1cc80:	movcc	r1, r0
   1cc84:	bcc	1cd80 <__assert_fail@plt+0xaf7c>
   1cc88:	cmp	r3, #0
   1cc8c:	clzeq	ip, r2
   1cc90:	clzne	ip, r3
   1cc94:	addeq	ip, ip, #32
   1cc98:	cmp	r5, #0
   1cc9c:	clzeq	r1, r4
   1cca0:	addeq	r1, r1, #32
   1cca4:	clzne	r1, r5
   1cca8:	sub	ip, ip, r1
   1ccac:	sub	sl, ip, #32
   1ccb0:	lsl	r9, r3, ip
   1ccb4:	rsb	fp, ip, #32
   1ccb8:	orr	r9, r9, r2, lsl sl
   1ccbc:	orr	r9, r9, r2, lsr fp
   1ccc0:	lsl	r8, r2, ip
   1ccc4:	cmp	r5, r9
   1ccc8:	cmpeq	r4, r8
   1cccc:	movcc	r0, #0
   1ccd0:	movcc	r1, r0
   1ccd4:	bcc	1ccf0 <__assert_fail@plt+0xaeec>
   1ccd8:	mov	r0, #1
   1ccdc:	subs	r4, r4, r8
   1cce0:	lsl	r1, r0, sl
   1cce4:	orr	r1, r1, r0, lsr fp
   1cce8:	lsl	r0, r0, ip
   1ccec:	sbc	r5, r5, r9
   1ccf0:	cmp	ip, #0
   1ccf4:	beq	1cd80 <__assert_fail@plt+0xaf7c>
   1ccf8:	lsr	r6, r8, #1
   1ccfc:	orr	r6, r6, r9, lsl #31
   1cd00:	lsr	r7, r9, #1
   1cd04:	mov	r2, ip
   1cd08:	b	1cd2c <__assert_fail@plt+0xaf28>
   1cd0c:	subs	r3, r4, r6
   1cd10:	sbc	r8, r5, r7
   1cd14:	adds	r3, r3, r3
   1cd18:	adc	r8, r8, r8
   1cd1c:	adds	r4, r3, #1
   1cd20:	adc	r5, r8, #0
   1cd24:	subs	r2, r2, #1
   1cd28:	beq	1cd48 <__assert_fail@plt+0xaf44>
   1cd2c:	cmp	r5, r7
   1cd30:	cmpeq	r4, r6
   1cd34:	bcs	1cd0c <__assert_fail@plt+0xaf08>
   1cd38:	adds	r4, r4, r4
   1cd3c:	adc	r5, r5, r5
   1cd40:	subs	r2, r2, #1
   1cd44:	bne	1cd2c <__assert_fail@plt+0xaf28>
   1cd48:	lsr	r3, r4, ip
   1cd4c:	orr	r3, r3, r5, lsl fp
   1cd50:	lsr	r2, r5, ip
   1cd54:	orr	r3, r3, r5, lsr sl
   1cd58:	adds	r0, r0, r4
   1cd5c:	mov	r4, r3
   1cd60:	lsl	r3, r2, ip
   1cd64:	orr	r3, r3, r4, lsl sl
   1cd68:	lsl	ip, r4, ip
   1cd6c:	orr	r3, r3, r4, lsr fp
   1cd70:	adc	r1, r1, r5
   1cd74:	subs	r0, r0, ip
   1cd78:	mov	r5, r2
   1cd7c:	sbc	r1, r1, r3
   1cd80:	cmp	lr, #0
   1cd84:	strdne	r4, [lr]
   1cd88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cd90:	mov	r7, r0
   1cd94:	ldr	r6, [pc, #72]	; 1cde4 <__assert_fail@plt+0xafe0>
   1cd98:	ldr	r5, [pc, #72]	; 1cde8 <__assert_fail@plt+0xafe4>
   1cd9c:	add	r6, pc, r6
   1cda0:	add	r5, pc, r5
   1cda4:	sub	r6, r6, r5
   1cda8:	mov	r8, r1
   1cdac:	mov	r9, r2
   1cdb0:	bl	1188c <fdopen@plt-0x20>
   1cdb4:	asrs	r6, r6, #2
   1cdb8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cdbc:	mov	r4, #0
   1cdc0:	add	r4, r4, #1
   1cdc4:	ldr	r3, [r5], #4
   1cdc8:	mov	r2, r9
   1cdcc:	mov	r1, r8
   1cdd0:	mov	r0, r7
   1cdd4:	blx	r3
   1cdd8:	cmp	r6, r4
   1cddc:	bne	1cdc0 <__assert_fail@plt+0xafbc>
   1cde0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cde4:	andeq	r2, r1, r8, ror #30
   1cde8:	andeq	r2, r1, r0, ror #30
   1cdec:	bx	lr
   1cdf0:	ldr	r3, [pc, #12]	; 1ce04 <__assert_fail@plt+0xb000>
   1cdf4:	mov	r1, #0
   1cdf8:	add	r3, pc, r3
   1cdfc:	ldr	r2, [r3]
   1ce00:	b	11c0c <__cxa_atexit@plt>
   1ce04:	andeq	r3, r1, r4, lsl #4

Disassembly of section .fini:

0001ce08 <.fini>:
   1ce08:	push	{r3, lr}
   1ce0c:	pop	{r3, pc}
