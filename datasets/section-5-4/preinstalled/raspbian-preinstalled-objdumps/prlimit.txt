
raspbian-preinstalled/prlimit:     file format elf32-littlearm


Disassembly of section .init:

00010f74 <.init>:
   10f74:	push	{r3, lr}
   10f78:	bl	11f88 <__assert_fail@plt+0xd18>
   10f7c:	pop	{r3, pc}

Disassembly of section .plt:

00010f80 <calloc@plt-0x14>:
   10f80:	push	{lr}		; (str lr, [sp, #-4]!)
   10f84:	ldr	lr, [pc, #4]	; 10f90 <calloc@plt-0x4>
   10f88:	add	lr, pc, lr
   10f8c:	ldr	pc, [lr, #8]!
   10f90:	andeq	r4, r1, r4, ror #30

00010f94 <calloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #20, 20	; 0x14000
   10f9c:	ldr	pc, [ip, #3940]!	; 0xf64

00010fa0 <raise@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #20, 20	; 0x14000
   10fa8:	ldr	pc, [ip, #3932]!	; 0xf5c

00010fac <scols_line_refer_data@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #20, 20	; 0x14000
   10fb4:	ldr	pc, [ip, #3924]!	; 0xf54

00010fb8 <strcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #20, 20	; 0x14000
   10fc0:	ldr	pc, [ip, #3916]!	; 0xf4c

00010fc4 <strtol@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #20, 20	; 0x14000
   10fcc:	ldr	pc, [ip, #3908]!	; 0xf44

00010fd0 <strcspn@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #20, 20	; 0x14000
   10fd8:	ldr	pc, [ip, #3900]!	; 0xf3c

00010fdc <scols_table_enable_noheadings@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #20, 20	; 0x14000
   10fe4:	ldr	pc, [ip, #3892]!	; 0xf34

00010fe8 <scols_table_new_column@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #20, 20	; 0x14000
   10ff0:	ldr	pc, [ip, #3884]!	; 0xf2c

00010ff4 <free@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #20, 20	; 0x14000
   10ffc:	ldr	pc, [ip, #3876]!	; 0xf24

00011000 <scols_table_enable_raw@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #20, 20	; 0x14000
   11008:	ldr	pc, [ip, #3868]!	; 0xf1c

0001100c <ferror@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #20, 20	; 0x14000
   11014:	ldr	pc, [ip, #3860]!	; 0xf14

00011018 <strndup@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #20, 20	; 0x14000
   11020:	ldr	pc, [ip, #3852]!	; 0xf0c

00011024 <_exit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #20, 20	; 0x14000
   1102c:	ldr	pc, [ip, #3844]!	; 0xf04

00011030 <memcpy@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #20, 20	; 0x14000
   11038:	ldr	pc, [ip, #3836]!	; 0xefc

0001103c <execvp@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #20, 20	; 0x14000
   11044:	ldr	pc, [ip, #3828]!	; 0xef4

00011048 <__strtoull_internal@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #20, 20	; 0x14000
   11050:	ldr	pc, [ip, #3820]!	; 0xeec

00011054 <dcgettext@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #20, 20	; 0x14000
   1105c:	ldr	pc, [ip, #3812]!	; 0xee4

00011060 <strdup@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #20, 20	; 0x14000
   11068:	ldr	pc, [ip, #3804]!	; 0xedc

0001106c <__stack_chk_fail@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #20, 20	; 0x14000
   11074:	ldr	pc, [ip, #3796]!	; 0xed4

00011078 <textdomain@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #20, 20	; 0x14000
   11080:	ldr	pc, [ip, #3788]!	; 0xecc

00011084 <err@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #20, 20	; 0x14000
   1108c:	ldr	pc, [ip, #3780]!	; 0xec4

00011090 <scols_new_table@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #20, 20	; 0x14000
   11098:	ldr	pc, [ip, #3772]!	; 0xebc

0001109c <__fpending@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #20, 20	; 0x14000
   110a4:	ldr	pc, [ip, #3764]!	; 0xeb4

000110a8 <prlimit64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #20, 20	; 0x14000
   110b0:	ldr	pc, [ip, #3756]!	; 0xeac

000110b4 <malloc@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #20, 20	; 0x14000
   110bc:	ldr	pc, [ip, #3748]!	; 0xea4

000110c0 <__libc_start_main@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #3740]!	; 0xe9c

000110cc <scols_table_new_line@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #20, 20	; 0x14000
   110d4:	ldr	pc, [ip, #3732]!	; 0xe94

000110d8 <scols_unref_table@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #20, 20	; 0x14000
   110e0:	ldr	pc, [ip, #3724]!	; 0xe8c

000110e4 <__gmon_start__@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #20, 20	; 0x14000
   110ec:	ldr	pc, [ip, #3716]!	; 0xe84

000110f0 <getopt_long@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #20, 20	; 0x14000
   110f8:	ldr	pc, [ip, #3708]!	; 0xe7c

000110fc <__ctype_b_loc@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #20, 20	; 0x14000
   11104:	ldr	pc, [ip, #3700]!	; 0xe74

00011108 <getpid@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #20, 20	; 0x14000
   11110:	ldr	pc, [ip, #3692]!	; 0xe6c

00011114 <exit@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #20, 20	; 0x14000
   1111c:	ldr	pc, [ip, #3684]!	; 0xe64

00011120 <strtoul@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #20, 20	; 0x14000
   11128:	ldr	pc, [ip, #3676]!	; 0xe5c

0001112c <strlen@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #20, 20	; 0x14000
   11134:	ldr	pc, [ip, #3668]!	; 0xe54

00011138 <strchr@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #20, 20	; 0x14000
   11140:	ldr	pc, [ip, #3660]!	; 0xe4c

00011144 <warnx@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #20, 20	; 0x14000
   1114c:	ldr	pc, [ip, #3652]!	; 0xe44

00011150 <__errno_location@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #20, 20	; 0x14000
   11158:	ldr	pc, [ip, #3644]!	; 0xe3c

0001115c <strncasecmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #20, 20	; 0x14000
   11164:	ldr	pc, [ip, #3636]!	; 0xe34

00011168 <__cxa_atexit@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #20, 20	; 0x14000
   11170:	ldr	pc, [ip, #3628]!	; 0xe2c

00011174 <__vasprintf_chk@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #20, 20	; 0x14000
   1117c:	ldr	pc, [ip, #3620]!	; 0xe24

00011180 <strtoull@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #20, 20	; 0x14000
   11188:	ldr	pc, [ip, #3612]!	; 0xe1c

0001118c <fgetc@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #20, 20	; 0x14000
   11194:	ldr	pc, [ip, #3604]!	; 0xe14

00011198 <__printf_chk@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #20, 20	; 0x14000
   111a0:	ldr	pc, [ip, #3596]!	; 0xe0c

000111a4 <strtod@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #20, 20	; 0x14000
   111ac:	ldr	pc, [ip, #3588]!	; 0xe04

000111b0 <__fprintf_chk@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #20, 20	; 0x14000
   111b8:	ldr	pc, [ip, #3580]!	; 0xdfc

000111bc <fclose@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #20, 20	; 0x14000
   111c4:	ldr	pc, [ip, #3572]!	; 0xdf4

000111c8 <setlocale@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #20, 20	; 0x14000
   111d0:	ldr	pc, [ip, #3564]!	; 0xdec

000111d4 <errx@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #20, 20	; 0x14000
   111dc:	ldr	pc, [ip, #3556]!	; 0xde4

000111e0 <warn@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #20, 20	; 0x14000
   111e8:	ldr	pc, [ip, #3548]!	; 0xddc

000111ec <scols_print_table@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #20, 20	; 0x14000
   111f4:	ldr	pc, [ip, #3540]!	; 0xdd4

000111f8 <fputc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #20, 20	; 0x14000
   11200:	ldr	pc, [ip, #3532]!	; 0xdcc

00011204 <localeconv@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #20, 20	; 0x14000
   1120c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011210 <__strtoll_internal@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #20, 20	; 0x14000
   11218:	ldr	pc, [ip, #3516]!	; 0xdbc

0001121c <bindtextdomain@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #20, 20	; 0x14000
   11224:	ldr	pc, [ip, #3508]!	; 0xdb4

00011228 <fputs@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #20, 20	; 0x14000
   11230:	ldr	pc, [ip, #3500]!	; 0xdac

00011234 <strncmp@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #20, 20	; 0x14000
   1123c:	ldr	pc, [ip, #3492]!	; 0xda4

00011240 <abort@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #20, 20	; 0x14000
   11248:	ldr	pc, [ip, #3484]!	; 0xd9c

0001124c <__snprintf_chk@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #20, 20	; 0x14000
   11254:	ldr	pc, [ip, #3476]!	; 0xd94

00011258 <scols_init_debug@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #20, 20	; 0x14000
   11260:	ldr	pc, [ip, #3468]!	; 0xd8c

00011264 <strspn@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #20, 20	; 0x14000
   1126c:	ldr	pc, [ip, #3460]!	; 0xd84

00011270 <__assert_fail@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #20, 20	; 0x14000
   11278:	ldr	pc, [ip, #3452]!	; 0xd7c

Disassembly of section .text:

00011280 <.text>:
   11280:	ldr	r3, [pc, #3028]	; 11e5c <__assert_fail@plt+0xbec>
   11284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11288:	sub	sp, sp, #68	; 0x44
   1128c:	ldr	r3, [r3]
   11290:	mov	r9, r0
   11294:	mov	fp, r1
   11298:	mov	r0, #6
   1129c:	ldr	r1, [pc, #3004]	; 11e60 <__assert_fail@plt+0xbf0>
   112a0:	str	r3, [sp, #60]	; 0x3c
   112a4:	ldr	sl, [pc, #3000]	; 11e64 <__assert_fail@plt+0xbf4>
   112a8:	bl	111c8 <setlocale@plt>
   112ac:	ldr	r6, [pc, #2996]	; 11e68 <__assert_fail@plt+0xbf8>
   112b0:	ldr	r1, [pc, #2996]	; 11e6c <__assert_fail@plt+0xbfc>
   112b4:	ldr	r0, [pc, #2996]	; 11e70 <__assert_fail@plt+0xc00>
   112b8:	ldr	r5, [pc, #2996]	; 11e74 <__assert_fail@plt+0xc04>
   112bc:	ldr	r8, [pc, #2996]	; 11e78 <__assert_fail@plt+0xc08>
   112c0:	bl	1121c <bindtextdomain@plt>
   112c4:	ldr	r0, [pc, #2980]	; 11e70 <__assert_fail@plt+0xc00>
   112c8:	bl	11078 <textdomain@plt>
   112cc:	add	r7, sp, #32
   112d0:	ldr	r0, [pc, #2980]	; 11e7c <__assert_fail@plt+0xc0c>
   112d4:	bl	146c8 <__assert_fail@plt+0x3458>
   112d8:	str	r7, [sp, #32]
   112dc:	str	r7, [sp, #36]	; 0x24
   112e0:	mov	r4, #0
   112e4:	str	r4, [sp]
   112e8:	mov	r3, r6
   112ec:	mov	r2, r5
   112f0:	mov	r1, fp
   112f4:	mov	r0, r9
   112f8:	bl	110f0 <getopt_long@plt>
   112fc:	cmn	r0, #1
   11300:	beq	115d0 <__assert_fail@plt+0x360>
   11304:	sub	r0, r0, #86	; 0x56
   11308:	cmp	r0, #44	; 0x2c
   1130c:	ldrls	pc, [pc, r0, lsl #2]
   11310:	b	11d00 <__assert_fail@plt+0xa90>
   11314:	andeq	r1, r1, r8, lsl #11
   11318:	andeq	r1, r1, r0, lsl #26
   1131c:	andeq	r1, r1, r0, lsl #26
   11320:	andeq	r1, r1, r0, lsl #26
   11324:	andeq	r1, r1, r0, lsl #26
   11328:	andeq	r1, r1, r0, lsl #26
   1132c:	andeq	r1, r1, r0, lsl #26
   11330:	andeq	r1, r1, r0, lsl #26
   11334:	andeq	r1, r1, r0, lsl #26
   11338:	andeq	r1, r1, r0, lsl #26
   1133c:	andeq	r1, r1, r0, lsl #26
   11340:	andeq	r1, r1, r0, lsl #26
   11344:	andeq	r1, r1, r0, lsl #26
   11348:	andeq	r1, r1, r4, ror r5
   1134c:	andeq	r1, r1, r0, ror #10
   11350:	andeq	r1, r1, ip, asr #10
   11354:	andeq	r1, r1, r8, lsr r5
   11358:	andeq	r1, r1, r0, lsl #26
   1135c:	andeq	r1, r1, r4, asr #22
   11360:	andeq	r1, r1, r4, lsr #10
   11364:	andeq	r1, r1, r0, lsl #26
   11368:	andeq	r1, r1, r0, lsl #26
   1136c:	andeq	r1, r1, r0, lsl r5
   11370:	strdeq	r1, [r1], -ip
   11374:	andeq	r1, r1, r8, ror #9
   11378:	andeq	r1, r1, r0, asr #9
   1137c:	muleq	r1, r0, r4
   11380:	andeq	r1, r1, ip, ror r4
   11384:	andeq	r1, r1, r8, ror #8
   11388:	andeq	r1, r1, r4, asr r4
   1138c:	andeq	r1, r1, r0, asr #8
   11390:	andeq	r1, r1, ip, lsr #8
   11394:	andeq	r1, r1, r8, lsl r4
   11398:	andeq	r1, r1, r0, lsl #26
   1139c:	andeq	r1, r1, r4, lsl #8
   113a0:	strdeq	r1, [r1], -r0
   113a4:	andeq	r1, r1, r0, lsl #26
   113a8:	andeq	r1, r1, r0, lsl #26
   113ac:	andeq	r1, r1, r0, lsl #26
   113b0:	andeq	r1, r1, r0, lsl #26
   113b4:	andeq	r1, r1, r0, lsl #26
   113b8:	andeq	r1, r1, r0, lsl #26
   113bc:	andeq	r1, r1, r0, ror #7
   113c0:	ldrdeq	r1, [r1], -r4
   113c4:	andeq	r1, r1, r8, asr #7
   113c8:	mov	r3, #1
   113cc:	str	r3, [sl, #48]	; 0x30
   113d0:	b	112e0 <__assert_fail@plt+0x70>
   113d4:	mov	r3, #1
   113d8:	str	r3, [sl, #56]	; 0x38
   113dc:	b	112e0 <__assert_fail@plt+0x70>
   113e0:	ldr	r3, [sl, #52]	; 0x34
   113e4:	add	r3, r3, #1
   113e8:	str	r3, [sl, #52]	; 0x34
   113ec:	b	112e0 <__assert_fail@plt+0x70>
   113f0:	mov	r2, #13
   113f4:	mov	r1, r7
   113f8:	ldr	r0, [r8]
   113fc:	bl	12158 <__assert_fail@plt+0xee8>
   11400:	b	112e0 <__assert_fail@plt+0x70>
   11404:	mov	r2, #5
   11408:	mov	r1, r7
   1140c:	ldr	r0, [r8]
   11410:	bl	12158 <__assert_fail@plt+0xee8>
   11414:	b	112e0 <__assert_fail@plt+0x70>
   11418:	mov	r2, #0
   1141c:	mov	r1, r7
   11420:	ldr	r0, [r8]
   11424:	bl	12158 <__assert_fail@plt+0xee8>
   11428:	b	112e0 <__assert_fail@plt+0x70>
   1142c:	mov	r2, #10
   11430:	mov	r1, r7
   11434:	ldr	r0, [r8]
   11438:	bl	12158 <__assert_fail@plt+0xee8>
   1143c:	b	112e0 <__assert_fail@plt+0x70>
   11440:	mov	r2, #2
   11444:	mov	r1, r7
   11448:	ldr	r0, [r8]
   1144c:	bl	12158 <__assert_fail@plt+0xee8>
   11450:	b	112e0 <__assert_fail@plt+0x70>
   11454:	mov	r2, #15
   11458:	mov	r1, r7
   1145c:	ldr	r0, [r8]
   11460:	bl	12158 <__assert_fail@plt+0xee8>
   11464:	b	112e0 <__assert_fail@plt+0x70>
   11468:	mov	r2, #12
   1146c:	mov	r1, r7
   11470:	ldr	r0, [r8]
   11474:	bl	12158 <__assert_fail@plt+0xee8>
   11478:	b	112e0 <__assert_fail@plt+0x70>
   1147c:	mov	r2, #7
   11480:	mov	r1, r7
   11484:	ldr	r0, [r8]
   11488:	bl	12158 <__assert_fail@plt+0xee8>
   1148c:	b	112e0 <__assert_fail@plt+0x70>
   11490:	ldr	r0, [sl]
   11494:	cmp	r0, #0
   11498:	bne	11e40 <__assert_fail@plt+0xbd0>
   1149c:	mov	r2, #5
   114a0:	ldr	r1, [pc, #2520]	; 11e80 <__assert_fail@plt+0xc10>
   114a4:	ldr	r4, [r8]
   114a8:	bl	11054 <dcgettext@plt>
   114ac:	mov	r1, r0
   114b0:	mov	r0, r4
   114b4:	bl	13288 <__assert_fail@plt+0x2018>
   114b8:	str	r0, [sl]
   114bc:	b	112e0 <__assert_fail@plt+0x70>
   114c0:	ldr	r3, [pc, #2492]	; 11e84 <__assert_fail@plt+0xc14>
   114c4:	mov	r2, #10
   114c8:	ldr	r1, [pc, #2488]	; 11e88 <__assert_fail@plt+0xc18>
   114cc:	ldr	r0, [r8]
   114d0:	bl	13bf4 <__assert_fail@plt+0x2984>
   114d4:	cmp	r0, #0
   114d8:	str	r0, [sl, #44]	; 0x2c
   114dc:	bge	112e0 <__assert_fail@plt+0x70>
   114e0:	mov	r0, #1
   114e4:	b	115b4 <__assert_fail@plt+0x344>
   114e8:	mov	r2, #9
   114ec:	mov	r1, r7
   114f0:	ldr	r0, [r8]
   114f4:	bl	12158 <__assert_fail@plt+0xee8>
   114f8:	b	112e0 <__assert_fail@plt+0x70>
   114fc:	mov	r2, #11
   11500:	mov	r1, r7
   11504:	ldr	r0, [r8]
   11508:	bl	12158 <__assert_fail@plt+0xee8>
   1150c:	b	112e0 <__assert_fail@plt+0x70>
   11510:	mov	r2, #6
   11514:	mov	r1, r7
   11518:	ldr	r0, [r8]
   1151c:	bl	12158 <__assert_fail@plt+0xee8>
   11520:	b	112e0 <__assert_fail@plt+0x70>
   11524:	mov	r2, #14
   11528:	mov	r1, r7
   1152c:	ldr	r0, [r8]
   11530:	bl	12158 <__assert_fail@plt+0xee8>
   11534:	b	112e0 <__assert_fail@plt+0x70>
   11538:	mov	r2, #4
   1153c:	mov	r1, r7
   11540:	ldr	r0, [r8]
   11544:	bl	12158 <__assert_fail@plt+0xee8>
   11548:	b	112e0 <__assert_fail@plt+0x70>
   1154c:	mov	r2, #8
   11550:	mov	r1, r7
   11554:	ldr	r0, [r8]
   11558:	bl	12158 <__assert_fail@plt+0xee8>
   1155c:	b	112e0 <__assert_fail@plt+0x70>
   11560:	mov	r2, #3
   11564:	mov	r1, r7
   11568:	ldr	r0, [r8]
   1156c:	bl	12158 <__assert_fail@plt+0xee8>
   11570:	b	112e0 <__assert_fail@plt+0x70>
   11574:	mov	r2, #1
   11578:	mov	r1, r7
   1157c:	ldr	r0, [r8]
   11580:	bl	12158 <__assert_fail@plt+0xee8>
   11584:	b	112e0 <__assert_fail@plt+0x70>
   11588:	mov	r2, #5
   1158c:	ldr	r1, [pc, #2296]	; 11e8c <__assert_fail@plt+0xc1c>
   11590:	mov	r0, #0
   11594:	bl	11054 <dcgettext@plt>
   11598:	ldr	r2, [pc, #2288]	; 11e90 <__assert_fail@plt+0xc20>
   1159c:	ldr	r3, [pc, #2288]	; 11e94 <__assert_fail@plt+0xc24>
   115a0:	ldr	r2, [r2]
   115a4:	mov	r1, r0
   115a8:	mov	r0, #1
   115ac:	bl	11198 <__printf_chk@plt>
   115b0:	mov	r0, #0
   115b4:	ldr	r3, [pc, #2208]	; 11e5c <__assert_fail@plt+0xbec>
   115b8:	ldr	r2, [sp, #60]	; 0x3c
   115bc:	ldr	r3, [r3]
   115c0:	cmp	r2, r3
   115c4:	bne	11e3c <__assert_fail@plt+0xbcc>
   115c8:	add	sp, sp, #68	; 0x44
   115cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115d0:	ldr	r3, [pc, #2240]	; 11e98 <__assert_fail@plt+0xc28>
   115d4:	ldr	r5, [pc, #2184]	; 11e64 <__assert_fail@plt+0xbf4>
   115d8:	ldr	r3, [r3]
   115dc:	cmp	r3, r9
   115e0:	bge	115f0 <__assert_fail@plt+0x380>
   115e4:	ldr	r3, [r5]
   115e8:	cmp	r3, #0
   115ec:	bne	11e08 <__assert_fail@plt+0xb98>
   115f0:	ldr	r3, [r5, #44]	; 0x2c
   115f4:	cmp	r3, #0
   115f8:	beq	119ac <__assert_fail@plt+0x73c>
   115fc:	mov	r0, #0
   11600:	bl	11258 <scols_init_debug@plt>
   11604:	ldr	r4, [sp, #32]
   11608:	cmp	r4, r7
   1160c:	ldrne	r8, [r4]
   11610:	beq	11b10 <__assert_fail@plt+0x8a0>
   11614:	str	r9, [sp, #24]
   11618:	str	fp, [sp, #28]
   1161c:	b	11728 <__assert_fail@plt+0x4b8>
   11620:	cmp	r6, #6
   11624:	bne	11880 <__assert_fail@plt+0x610>
   11628:	ldrd	r0, [r4, #8]
   1162c:	ldrd	r2, [r4, #16]
   11630:	cmp	r3, r1
   11634:	cmpeq	r2, r0
   11638:	bcs	11658 <__assert_fail@plt+0x3e8>
   1163c:	and	fp, r3, r1
   11640:	mvn	r3, #0
   11644:	and	sl, r2, r0
   11648:	cmp	fp, r3
   1164c:	mvn	r2, #0
   11650:	cmpeq	sl, r2
   11654:	bne	11dcc <__assert_fail@plt+0xb5c>
   11658:	ldr	r3, [r5, #52]	; 0x34
   1165c:	add	r6, r4, #8
   11660:	cmp	r3, #0
   11664:	ldr	r9, [r5]
   11668:	beq	116ec <__assert_fail@plt+0x47c>
   1166c:	mov	r2, #5
   11670:	ldr	r1, [pc, #2084]	; 11e9c <__assert_fail@plt+0xc2c>
   11674:	mov	r0, #0
   11678:	bl	11054 <dcgettext@plt>
   1167c:	ldr	r3, [r4, #24]
   11680:	cmp	r9, #0
   11684:	ldr	r2, [r3]
   11688:	mov	r1, r0
   1168c:	beq	11918 <__assert_fail@plt+0x6a8>
   11690:	mov	r3, r9
   11694:	mov	r0, #1
   11698:	bl	11198 <__printf_chk@plt>
   1169c:	ldrd	r2, [r4, #8]
   116a0:	mvn	r1, #0
   116a4:	mvn	r0, #0
   116a8:	cmp	r3, r1
   116ac:	cmpeq	r2, r0
   116b0:	beq	118f4 <__assert_fail@plt+0x684>
   116b4:	ldr	r1, [pc, #2020]	; 11ea0 <__assert_fail@plt+0xc30>
   116b8:	mov	r0, #1
   116bc:	bl	11198 <__printf_chk@plt>
   116c0:	ldrd	r2, [r4, #16]
   116c4:	mvn	r1, #0
   116c8:	mvn	r0, #0
   116cc:	cmp	r3, r1
   116d0:	cmpeq	r2, r0
   116d4:	beq	118c8 <__assert_fail@plt+0x658>
   116d8:	ldr	r1, [pc, #1988]	; 11ea4 <__assert_fail@plt+0xc34>
   116dc:	mov	r0, #1
   116e0:	bl	11198 <__printf_chk@plt>
   116e4:	ldr	r9, [r5]
   116e8:	mov	r3, #0
   116ec:	ldr	r1, [r4, #24]
   116f0:	mov	r2, r6
   116f4:	mov	r0, r9
   116f8:	ldr	r1, [r1, #12]
   116fc:	bl	110a8 <prlimit64@plt>
   11700:	cmn	r0, #1
   11704:	beq	11d54 <__assert_fail@plt+0xae4>
   11708:	ldr	r3, [r4, #28]
   1170c:	cmp	r3, #0
   11710:	bne	11740 <__assert_fail@plt+0x4d0>
   11714:	cmp	r8, r7
   11718:	ldr	r3, [r8]
   1171c:	mov	r4, r8
   11720:	beq	11764 <__assert_fail@plt+0x4f4>
   11724:	mov	r8, r3
   11728:	ldr	r6, [r4, #28]
   1172c:	cmp	r6, #0
   11730:	bne	11620 <__assert_fail@plt+0x3b0>
   11734:	add	r3, r4, #8
   11738:	ldr	r9, [r5]
   1173c:	b	116ec <__assert_fail@plt+0x47c>
   11740:	ldrd	r2, [r4]
   11744:	mov	r0, r4
   11748:	mov	r4, r8
   1174c:	str	r3, [r2, #4]
   11750:	str	r2, [r3]
   11754:	bl	10ff4 <free@plt>
   11758:	cmp	r8, r7
   1175c:	ldr	r3, [r8]
   11760:	bne	11724 <__assert_fail@plt+0x4b4>
   11764:	ldr	r3, [sp, #32]
   11768:	ldr	r9, [sp, #24]
   1176c:	cmp	r3, r8
   11770:	ldr	fp, [sp, #28]
   11774:	beq	11950 <__assert_fail@plt+0x6e0>
   11778:	bl	11090 <scols_new_table@plt>
   1177c:	subs	r3, r0, #0
   11780:	str	r3, [sp, #8]
   11784:	beq	11e24 <__assert_fail@plt+0xbb4>
   11788:	ldr	r1, [r5, #56]	; 0x38
   1178c:	bl	11000 <scols_table_enable_raw@plt>
   11790:	ldr	r1, [r5, #48]	; 0x30
   11794:	ldr	r0, [sp, #8]
   11798:	bl	10fdc <scols_table_enable_noheadings@plt>
   1179c:	ldr	r3, [r5, #44]	; 0x2c
   117a0:	cmp	r3, #0
   117a4:	ble	11808 <__assert_fail@plt+0x598>
   117a8:	ldr	r3, [r5, #4]
   117ac:	cmp	r3, #4
   117b0:	bgt	11a44 <__assert_fail@plt+0x7d4>
   117b4:	ldr	r6, [pc, #1772]	; 11ea8 <__assert_fail@plt+0xc38>
   117b8:	mov	r4, #0
   117bc:	ldr	r8, [pc, #1768]	; 11eac <__assert_fail@plt+0xc3c>
   117c0:	ldr	sl, [sp, #8]
   117c4:	b	117d4 <__assert_fail@plt+0x564>
   117c8:	ldr	r3, [r6], #4
   117cc:	cmp	r3, #4
   117d0:	bgt	11a44 <__assert_fail@plt+0x7d4>
   117d4:	add	r3, r3, r3, lsl #1
   117d8:	mov	r0, sl
   117dc:	add	ip, r8, r3, lsl #3
   117e0:	ldr	r1, [r8, r3, lsl #3]
   117e4:	ldr	r2, [ip, #16]
   117e8:	vldr	d0, [ip, #8]
   117ec:	bl	10fe8 <scols_table_new_column@plt>
   117f0:	cmp	r0, #0
   117f4:	beq	11d90 <__assert_fail@plt+0xb20>
   117f8:	ldr	r3, [r5, #44]	; 0x2c
   117fc:	add	r4, r4, #1
   11800:	cmp	r4, r3
   11804:	blt	117c8 <__assert_fail@plt+0x558>
   11808:	ldr	r8, [sp, #32]
   1180c:	cmp	r8, r7
   11810:	ldr	r3, [r8]
   11814:	beq	1193c <__assert_fail@plt+0x6cc>
   11818:	str	fp, [sp, #24]
   1181c:	mov	sl, #0
   11820:	mov	fp, r3
   11824:	str	r9, [sp, #20]
   11828:	mov	r1, #0
   1182c:	ldr	r0, [sp, #8]
   11830:	bl	110cc <scols_table_new_line@plt>
   11834:	subs	r9, r0, #0
   11838:	beq	11df0 <__assert_fail@plt+0xb80>
   1183c:	ldr	r3, [r5, #44]	; 0x2c
   11840:	cmp	r3, #0
   11844:	ble	11a98 <__assert_fail@plt+0x828>
   11848:	ldr	r3, [r5, #4]
   1184c:	str	sl, [sp, #40]	; 0x28
   11850:	cmp	r3, #4
   11854:	bgt	11a44 <__assert_fail@plt+0x7d4>
   11858:	ldr	r6, [pc, #1608]	; 11ea8 <__assert_fail@plt+0xc38>
   1185c:	mov	r4, #0
   11860:	cmp	r3, #4
   11864:	ldrls	pc, [pc, r3, lsl #2]
   11868:	b	11a7c <__assert_fail@plt+0x80c>
   1186c:	andeq	r1, r1, ip, asr #21
   11870:	andeq	r1, r1, r0, ror #21
   11874:	andeq	r1, r1, r4, asr #21
   11878:	andeq	r1, r1, r8, asr sl
   1187c:	ldrdeq	r1, [r1], -ip
   11880:	ldr	r1, [r4, #24]
   11884:	add	r3, sp, #40	; 0x28
   11888:	mov	r2, #0
   1188c:	ldr	r1, [r1, #12]
   11890:	ldr	r0, [r5]
   11894:	bl	110a8 <prlimit64@plt>
   11898:	cmn	r0, #1
   1189c:	beq	11da8 <__assert_fail@plt+0xb38>
   118a0:	ldr	r3, [r4, #28]
   118a4:	tst	r3, #2
   118a8:	ldrdeq	r0, [sp, #40]	; 0x28
   118ac:	strdeq	r0, [r4, #8]
   118b0:	beq	1162c <__assert_fail@plt+0x3bc>
   118b4:	tst	r3, #4
   118b8:	ldrd	r0, [r4, #8]
   118bc:	ldrdeq	r2, [sp, #48]	; 0x30
   118c0:	strdeq	r2, [r4, #16]
   118c4:	b	1162c <__assert_fail@plt+0x3bc>
   118c8:	mov	r2, #5
   118cc:	ldr	r1, [pc, #1500]	; 11eb0 <__assert_fail@plt+0xc40>
   118d0:	mov	r0, #0
   118d4:	bl	11054 <dcgettext@plt>
   118d8:	ldr	r1, [pc, #1492]	; 11eb4 <__assert_fail@plt+0xc44>
   118dc:	mov	r2, r0
   118e0:	mov	r0, #1
   118e4:	bl	11198 <__printf_chk@plt>
   118e8:	ldr	r9, [r5]
   118ec:	mov	r3, #0
   118f0:	b	116ec <__assert_fail@plt+0x47c>
   118f4:	mov	r2, #5
   118f8:	ldr	r1, [pc, #1456]	; 11eb0 <__assert_fail@plt+0xc40>
   118fc:	mov	r0, #0
   11900:	bl	11054 <dcgettext@plt>
   11904:	ldr	r1, [pc, #1452]	; 11eb8 <__assert_fail@plt+0xc48>
   11908:	mov	r2, r0
   1190c:	mov	r0, #1
   11910:	bl	11198 <__printf_chk@plt>
   11914:	b	116c0 <__assert_fail@plt+0x450>
   11918:	str	r2, [sp, #20]
   1191c:	str	r0, [sp, #8]
   11920:	bl	11108 <getpid@plt>
   11924:	ldr	r2, [sp, #20]
   11928:	ldr	r1, [sp, #8]
   1192c:	mov	r9, r0
   11930:	b	11690 <__assert_fail@plt+0x420>
   11934:	ldr	r9, [sp, #20]
   11938:	ldr	fp, [sp, #24]
   1193c:	ldr	r4, [sp, #8]
   11940:	mov	r0, r4
   11944:	bl	111ec <scols_print_table@plt>
   11948:	mov	r0, r4
   1194c:	bl	110d8 <scols_unref_table@plt>
   11950:	ldr	r3, [pc, #1344]	; 11e98 <__assert_fail@plt+0xc28>
   11954:	ldr	r3, [r3]
   11958:	cmp	r3, r9
   1195c:	movge	r0, #0
   11960:	bge	115b4 <__assert_fail@plt+0x344>
   11964:	add	r1, fp, r3, lsl #2
   11968:	ldr	r0, [fp, r3, lsl #2]
   1196c:	bl	1103c <execvp@plt>
   11970:	bl	11150 <__errno_location@plt>
   11974:	mov	r2, #5
   11978:	ldr	r1, [pc, #1340]	; 11ebc <__assert_fail@plt+0xc4c>
   1197c:	ldr	r3, [r0]
   11980:	mov	r0, #0
   11984:	cmp	r3, #2
   11988:	moveq	r4, #127	; 0x7f
   1198c:	movne	r4, #126	; 0x7e
   11990:	bl	11054 <dcgettext@plt>
   11994:	ldr	r3, [pc, #1276]	; 11e98 <__assert_fail@plt+0xc28>
   11998:	ldr	r3, [r3]
   1199c:	ldr	r2, [fp, r3, lsl #2]
   119a0:	mov	r1, r0
   119a4:	mov	r0, r4
   119a8:	bl	11084 <err@plt>
   119ac:	mov	r2, #2
   119b0:	str	r3, [r5, #8]
   119b4:	mov	r3, #3
   119b8:	mov	r1, #1
   119bc:	str	r2, [r5, #12]
   119c0:	str	r3, [r5, #16]
   119c4:	mov	r2, #5
   119c8:	mov	r3, #4
   119cc:	str	r1, [r5, #4]
   119d0:	str	r2, [r5, #44]	; 0x2c
   119d4:	str	r3, [r5, #20]
   119d8:	b	115fc <__assert_fail@plt+0x38c>
   119dc:	ldr	r3, [r8, #24]
   119e0:	ldr	r1, [r3, #8]
   119e4:	cmp	r1, #0
   119e8:	beq	11a24 <__assert_fail@plt+0x7b4>
   119ec:	mov	r2, #5
   119f0:	mov	r0, #0
   119f4:	bl	11054 <dcgettext@plt>
   119f8:	cmp	r0, #0
   119fc:	beq	11a24 <__assert_fail@plt+0x7b4>
   11a00:	bl	11060 <strdup@plt>
   11a04:	subs	r2, r0, #0
   11a08:	beq	11d84 <__assert_fail@plt+0xb14>
   11a0c:	str	r2, [sp, #40]	; 0x28
   11a10:	mov	r1, r4
   11a14:	mov	r0, r9
   11a18:	bl	10fac <scols_line_refer_data@plt>
   11a1c:	cmp	r0, #0
   11a20:	bne	11d38 <__assert_fail@plt+0xac8>
   11a24:	ldr	r3, [r5, #44]	; 0x2c
   11a28:	add	r4, r4, #1
   11a2c:	cmp	r4, r3
   11a30:	bge	11a98 <__assert_fail@plt+0x828>
   11a34:	ldr	r3, [r6], #4
   11a38:	str	sl, [sp, #40]	; 0x28
   11a3c:	cmp	r3, #4
   11a40:	ble	11860 <__assert_fail@plt+0x5f0>
   11a44:	ldr	r3, [pc, #1140]	; 11ec0 <__assert_fail@plt+0xc50>
   11a48:	mov	r2, #209	; 0xd1
   11a4c:	ldr	r1, [pc, #1136]	; 11ec4 <__assert_fail@plt+0xc54>
   11a50:	ldr	r0, [pc, #1136]	; 11ec8 <__assert_fail@plt+0xc58>
   11a54:	bl	11270 <__assert_fail@plt>
   11a58:	ldrd	r2, [r8, #16]
   11a5c:	mvn	r1, #0
   11a60:	mvn	r0, #0
   11a64:	cmp	r3, r1
   11a68:	cmpeq	r2, r0
   11a6c:	beq	11af4 <__assert_fail@plt+0x884>
   11a70:	ldr	r1, [pc, #1108]	; 11ecc <__assert_fail@plt+0xc5c>
   11a74:	add	r0, sp, #40	; 0x28
   11a78:	bl	120e4 <__assert_fail@plt+0xe74>
   11a7c:	ldr	r2, [sp, #40]	; 0x28
   11a80:	cmp	r2, #0
   11a84:	bne	11a10 <__assert_fail@plt+0x7a0>
   11a88:	ldr	r3, [r5, #44]	; 0x2c
   11a8c:	add	r4, r4, #1
   11a90:	cmp	r4, r3
   11a94:	blt	11a34 <__assert_fail@plt+0x7c4>
   11a98:	ldrd	r2, [r8]
   11a9c:	mov	r0, r8
   11aa0:	mov	r8, fp
   11aa4:	str	r3, [r2, #4]
   11aa8:	str	r2, [r3]
   11aac:	bl	10ff4 <free@plt>
   11ab0:	cmp	fp, r7
   11ab4:	ldr	r3, [fp]
   11ab8:	beq	11934 <__assert_fail@plt+0x6c4>
   11abc:	mov	fp, r3
   11ac0:	b	11828 <__assert_fail@plt+0x5b8>
   11ac4:	ldrd	r2, [r8, #8]
   11ac8:	b	11a5c <__assert_fail@plt+0x7ec>
   11acc:	ldr	r3, [r8, #24]
   11ad0:	ldr	r0, [r3, #4]
   11ad4:	cmp	r0, #0
   11ad8:	bne	11a00 <__assert_fail@plt+0x790>
   11adc:	b	11a24 <__assert_fail@plt+0x7b4>
   11ae0:	ldr	r3, [r8, #24]
   11ae4:	ldr	r0, [r3]
   11ae8:	cmp	r0, #0
   11aec:	bne	11a00 <__assert_fail@plt+0x790>
   11af0:	b	11a24 <__assert_fail@plt+0x7b4>
   11af4:	mov	r2, #5
   11af8:	ldr	r1, [pc, #944]	; 11eb0 <__assert_fail@plt+0xc40>
   11afc:	mov	r0, #0
   11b00:	bl	11054 <dcgettext@plt>
   11b04:	cmp	r0, #0
   11b08:	bne	11a00 <__assert_fail@plt+0x790>
   11b0c:	b	11a24 <__assert_fail@plt+0x7b4>
   11b10:	mov	r4, #0
   11b14:	mov	r2, r4
   11b18:	mov	r1, r7
   11b1c:	add	r4, r4, #1
   11b20:	mov	r0, #0
   11b24:	bl	12158 <__assert_fail@plt+0xee8>
   11b28:	cmp	r4, #16
   11b2c:	bne	11b14 <__assert_fail@plt+0x8a4>
   11b30:	ldr	r4, [sp, #32]
   11b34:	cmp	r4, r7
   11b38:	ldr	r8, [r4]
   11b3c:	bne	11614 <__assert_fail@plt+0x3a4>
   11b40:	b	11950 <__assert_fail@plt+0x6e0>
   11b44:	ldr	r3, [pc, #900]	; 11ed0 <__assert_fail@plt+0xc60>
   11b48:	mov	r2, #5
   11b4c:	ldr	r1, [pc, #896]	; 11ed4 <__assert_fail@plt+0xc64>
   11b50:	ldr	r4, [r3]
   11b54:	mov	r0, #0
   11b58:	bl	11054 <dcgettext@plt>
   11b5c:	mov	r1, r4
   11b60:	bl	11228 <fputs@plt>
   11b64:	mov	r2, #5
   11b68:	ldr	r1, [pc, #872]	; 11ed8 <__assert_fail@plt+0xc68>
   11b6c:	mov	r0, #0
   11b70:	bl	11054 <dcgettext@plt>
   11b74:	ldr	r7, [pc, #788]	; 11e90 <__assert_fail@plt+0xc20>
   11b78:	mov	r6, #0
   11b7c:	mov	r1, #1
   11b80:	ldr	r3, [r7]
   11b84:	ldr	r5, [pc, #800]	; 11eac <__assert_fail@plt+0xc3c>
   11b88:	ldr	r8, [pc, #844]	; 11edc <__assert_fail@plt+0xc6c>
   11b8c:	mov	r2, r0
   11b90:	mov	r0, r4
   11b94:	bl	111b0 <__fprintf_chk@plt>
   11b98:	mov	r2, #5
   11b9c:	ldr	r1, [pc, #828]	; 11ee0 <__assert_fail@plt+0xc70>
   11ba0:	mov	r0, r6
   11ba4:	bl	11054 <dcgettext@plt>
   11ba8:	ldr	r3, [r7]
   11bac:	mov	r1, #1
   11bb0:	mov	r2, r0
   11bb4:	mov	r0, r4
   11bb8:	bl	111b0 <__fprintf_chk@plt>
   11bbc:	mov	r1, r4
   11bc0:	mov	r0, #10
   11bc4:	bl	111f8 <fputc@plt>
   11bc8:	mov	r2, #5
   11bcc:	ldr	r1, [pc, #784]	; 11ee4 <__assert_fail@plt+0xc74>
   11bd0:	mov	r0, r6
   11bd4:	bl	11054 <dcgettext@plt>
   11bd8:	mov	r1, r4
   11bdc:	bl	11228 <fputs@plt>
   11be0:	mov	r2, #5
   11be4:	ldr	r1, [pc, #764]	; 11ee8 <__assert_fail@plt+0xc78>
   11be8:	mov	r0, r6
   11bec:	bl	11054 <dcgettext@plt>
   11bf0:	mov	r1, r4
   11bf4:	bl	11228 <fputs@plt>
   11bf8:	mov	r2, #5
   11bfc:	ldr	r1, [pc, #744]	; 11eec <__assert_fail@plt+0xc7c>
   11c00:	mov	r0, r6
   11c04:	bl	11054 <dcgettext@plt>
   11c08:	mov	r1, r4
   11c0c:	bl	11228 <fputs@plt>
   11c10:	mov	r2, #5
   11c14:	ldr	r1, [pc, #724]	; 11ef0 <__assert_fail@plt+0xc80>
   11c18:	mov	r0, r6
   11c1c:	bl	11054 <dcgettext@plt>
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #712]	; 11ef4 <__assert_fail@plt+0xc84>
   11c28:	mov	r7, r0
   11c2c:	mov	r0, r6
   11c30:	bl	11054 <dcgettext@plt>
   11c34:	ldr	r2, [pc, #700]	; 11ef8 <__assert_fail@plt+0xc88>
   11c38:	mov	r3, r7
   11c3c:	str	r2, [sp]
   11c40:	ldr	r1, [pc, #692]	; 11efc <__assert_fail@plt+0xc8c>
   11c44:	ldr	r2, [pc, #692]	; 11f00 <__assert_fail@plt+0xc90>
   11c48:	str	r0, [sp, #4]
   11c4c:	mov	r0, #1
   11c50:	bl	11198 <__printf_chk@plt>
   11c54:	mov	r2, #5
   11c58:	ldr	r1, [pc, #676]	; 11f04 <__assert_fail@plt+0xc94>
   11c5c:	mov	r0, r6
   11c60:	bl	11054 <dcgettext@plt>
   11c64:	mov	r1, r4
   11c68:	bl	11228 <fputs@plt>
   11c6c:	mov	r2, #5
   11c70:	ldr	r1, [pc, #656]	; 11f08 <__assert_fail@plt+0xc98>
   11c74:	mov	r0, r6
   11c78:	bl	11054 <dcgettext@plt>
   11c7c:	mov	r1, r4
   11c80:	bl	11228 <fputs@plt>
   11c84:	ldr	r1, [pc, #640]	; 11f0c <__assert_fail@plt+0xc9c>
   11c88:	mov	r2, #5
   11c8c:	mov	r0, r6
   11c90:	bl	11054 <dcgettext@plt>
   11c94:	mov	r1, r4
   11c98:	bl	11228 <fputs@plt>
   11c9c:	ldr	r1, [r5, #20]
   11ca0:	mov	r2, #5
   11ca4:	mov	r0, #0
   11ca8:	ldr	r7, [r5]
   11cac:	bl	11054 <dcgettext@plt>
   11cb0:	add	r6, r6, #1
   11cb4:	mov	r3, r7
   11cb8:	mov	r2, r8
   11cbc:	mov	r1, #1
   11cc0:	add	r5, r5, #24
   11cc4:	str	r0, [sp]
   11cc8:	mov	r0, r4
   11ccc:	bl	111b0 <__fprintf_chk@plt>
   11cd0:	cmp	r6, #5
   11cd4:	bne	11c9c <__assert_fail@plt+0xa2c>
   11cd8:	mov	r2, r6
   11cdc:	ldr	r1, [pc, #556]	; 11f10 <__assert_fail@plt+0xca0>
   11ce0:	mov	r0, #0
   11ce4:	bl	11054 <dcgettext@plt>
   11ce8:	ldr	r2, [pc, #548]	; 11f14 <__assert_fail@plt+0xca4>
   11cec:	mov	r1, r0
   11cf0:	mov	r0, #1
   11cf4:	bl	11198 <__printf_chk@plt>
   11cf8:	mov	r0, #0
   11cfc:	bl	11114 <exit@plt>
   11d00:	ldr	r3, [pc, #528]	; 11f18 <__assert_fail@plt+0xca8>
   11d04:	mov	r2, #5
   11d08:	ldr	r1, [pc, #524]	; 11f1c <__assert_fail@plt+0xcac>
   11d0c:	mov	r0, #0
   11d10:	ldr	r4, [r3]
   11d14:	bl	11054 <dcgettext@plt>
   11d18:	ldr	r3, [pc, #368]	; 11e90 <__assert_fail@plt+0xc20>
   11d1c:	mov	r1, #1
   11d20:	ldr	r3, [r3]
   11d24:	mov	r2, r0
   11d28:	mov	r0, r4
   11d2c:	bl	111b0 <__fprintf_chk@plt>
   11d30:	mov	r0, #1
   11d34:	bl	11114 <exit@plt>
   11d38:	ldr	r1, [pc, #480]	; 11f20 <__assert_fail@plt+0xcb0>
   11d3c:	mov	r2, #5
   11d40:	mov	r0, #0
   11d44:	bl	11054 <dcgettext@plt>
   11d48:	mov	r1, r0
   11d4c:	mov	r0, #1
   11d50:	bl	11084 <err@plt>
   11d54:	ldr	r0, [r4, #28]
   11d58:	mov	r2, #5
   11d5c:	cmp	r0, #0
   11d60:	movne	r0, #0
   11d64:	ldrne	r1, [pc, #440]	; 11f24 <__assert_fail@plt+0xcb4>
   11d68:	ldreq	r1, [pc, #440]	; 11f28 <__assert_fail@plt+0xcb8>
   11d6c:	bl	11054 <dcgettext@plt>
   11d70:	ldr	r3, [r4, #24]
   11d74:	ldr	r2, [r3]
   11d78:	mov	r1, r0
   11d7c:	mov	r0, #1
   11d80:	bl	11084 <err@plt>
   11d84:	ldr	r1, [pc, #416]	; 11f2c <__assert_fail@plt+0xcbc>
   11d88:	mov	r0, #1
   11d8c:	bl	11084 <err@plt>
   11d90:	ldr	r1, [pc, #408]	; 11f30 <__assert_fail@plt+0xcc0>
   11d94:	mov	r2, #5
   11d98:	bl	11054 <dcgettext@plt>
   11d9c:	mov	r1, r0
   11da0:	mov	r0, #1
   11da4:	bl	11084 <err@plt>
   11da8:	mov	r2, #5
   11dac:	ldr	r1, [pc, #384]	; 11f34 <__assert_fail@plt+0xcc4>
   11db0:	mov	r0, #0
   11db4:	bl	11054 <dcgettext@plt>
   11db8:	ldr	r3, [r4, #24]
   11dbc:	ldr	r2, [r3]
   11dc0:	mov	r1, r0
   11dc4:	mov	r0, #1
   11dc8:	bl	11084 <err@plt>
   11dcc:	mov	r2, #5
   11dd0:	ldr	r1, [pc, #352]	; 11f38 <__assert_fail@plt+0xcc8>
   11dd4:	mov	r0, #0
   11dd8:	bl	11054 <dcgettext@plt>
   11ddc:	ldr	r3, [r4, #24]
   11de0:	ldr	r2, [r3]
   11de4:	mov	r1, r0
   11de8:	mov	r0, #1
   11dec:	bl	111d4 <errx@plt>
   11df0:	ldr	r1, [pc, #324]	; 11f3c <__assert_fail@plt+0xccc>
   11df4:	mov	r2, #5
   11df8:	bl	11054 <dcgettext@plt>
   11dfc:	mov	r1, r0
   11e00:	mov	r0, #1
   11e04:	bl	11084 <err@plt>
   11e08:	ldr	r1, [pc, #304]	; 11f40 <__assert_fail@plt+0xcd0>
   11e0c:	mov	r0, r4
   11e10:	mov	r2, #5
   11e14:	bl	11054 <dcgettext@plt>
   11e18:	mov	r1, r0
   11e1c:	mov	r0, #1
   11e20:	bl	111d4 <errx@plt>
   11e24:	ldr	r1, [pc, #280]	; 11f44 <__assert_fail@plt+0xcd4>
   11e28:	mov	r2, #5
   11e2c:	bl	11054 <dcgettext@plt>
   11e30:	mov	r1, r0
   11e34:	mov	r0, #1
   11e38:	bl	11084 <err@plt>
   11e3c:	bl	1106c <__stack_chk_fail@plt>
   11e40:	ldr	r1, [pc, #256]	; 11f48 <__assert_fail@plt+0xcd8>
   11e44:	mov	r2, #5
   11e48:	mov	r0, #0
   11e4c:	bl	11054 <dcgettext@plt>
   11e50:	mov	r1, r0
   11e54:	mov	r0, #1
   11e58:	bl	111d4 <errx@plt>
   11e5c:	andeq	r5, r2, r8, ror #27
   11e60:	andeq	r4, r1, r0, lsr #20
   11e64:	andeq	r6, r2, r0, lsr r1
   11e68:	andeq	r4, r1, ip, ror r7
   11e6c:			; <UNDEFINED> instruction: 0x000149b8
   11e70:	andeq	r4, r1, ip, asr #19
   11e74:	andeq	r5, r1, r8, rrx
   11e78:	andeq	r6, r2, r8, lsr #2
   11e7c:	andeq	r2, r1, r4, lsl r4
   11e80:	andeq	r4, r1, r0, lsl #20
   11e84:	andeq	r2, r1, ip, lsr r0
   11e88:	andeq	r6, r2, r4, lsr r1
   11e8c:	andeq	r5, r1, r0, lsr #32
   11e90:	andeq	r6, r2, r0, lsl r1
   11e94:	andeq	r5, r1, ip, lsr #32
   11e98:	andeq	r6, r2, r8, lsl r1
   11e9c:	andeq	r5, r1, r4, lsr #2
   11ea0:	andeq	r5, r1, r4, asr #2
   11ea4:	andeq	r5, r1, r4, asr r1
   11ea8:	andeq	r6, r2, r8, lsr r1
   11eac:	strdeq	r4, [r1], -r0
   11eb0:	andeq	r4, r1, r4, lsl #19
   11eb4:	andeq	r5, r1, ip, asr #2
   11eb8:	andeq	r5, r1, r0, asr #2
   11ebc:	andeq	r5, r1, r4, ror #4
   11ec0:	strdeq	r4, [r1], -ip
   11ec4:	andeq	r4, r1, r8, lsl r9
   11ec8:	andeq	r5, r1, r4, asr #3
   11ecc:	andeq	r4, r1, r8, asr #18
   11ed0:	andeq	r6, r2, r4, lsr #2
   11ed4:	andeq	r4, r1, r8, lsl sl
   11ed8:	andeq	r4, r1, r4, lsr #20
   11edc:	andeq	r4, r1, ip, ror #31
   11ee0:	andeq	r4, r1, ip, lsr sl
   11ee4:	andeq	r4, r1, r4, asr sl
   11ee8:	andeq	r4, r1, r8, lsl #21
   11eec:	muleq	r1, ip, sl
   11ef0:	andeq	r4, r1, r4, lsl #23
   11ef4:	muleq	r1, r8, fp
   11ef8:	andeq	r4, r1, r8, asr #23
   11efc:			; <UNDEFINED> instruction: 0x00014bb4
   11f00:	andeq	r4, r1, r8, lsr #23
   11f04:	ldrdeq	r4, [r1], -r8
   11f08:	strdeq	r4, [r1], -r0
   11f0c:	ldrdeq	r4, [r1], -r0
   11f10:	strdeq	r4, [r1], -r8
   11f14:	andeq	r5, r1, r4, lsl r0
   11f18:	andeq	r6, r2, r0, lsr #2
   11f1c:	andeq	r5, r1, r0, asr #32
   11f20:	andeq	r5, r1, r8, asr #4
   11f24:	andeq	r5, r1, ip, asr r1
   11f28:	andeq	r5, r1, r0, lsl #3
   11f2c:	andeq	r5, r1, r0, lsr r2
   11f30:	andeq	r5, r1, ip, ror #3
   11f34:	ldrdeq	r5, [r1], -r8
   11f38:	strdeq	r5, [r1], -r4
   11f3c:	andeq	r5, r1, r0, lsl r2
   11f40:	andeq	r5, r1, r4, lsr #1
   11f44:	andeq	r5, r1, r4, lsr #3
   11f48:	ldrdeq	r4, [r1], -r8
   11f4c:	mov	fp, #0
   11f50:	mov	lr, #0
   11f54:	pop	{r1}		; (ldr r1, [sp], #4)
   11f58:	mov	r2, sp
   11f5c:	push	{r2}		; (str r2, [sp, #-4]!)
   11f60:	push	{r0}		; (str r0, [sp, #-4]!)
   11f64:	ldr	ip, [pc, #16]	; 11f7c <__assert_fail@plt+0xd0c>
   11f68:	push	{ip}		; (str ip, [sp, #-4]!)
   11f6c:	ldr	r0, [pc, #12]	; 11f80 <__assert_fail@plt+0xd10>
   11f70:	ldr	r3, [pc, #12]	; 11f84 <__assert_fail@plt+0xd14>
   11f74:	bl	110c0 <__libc_start_main@plt>
   11f78:	bl	11240 <abort@plt>
   11f7c:	andeq	r4, r1, r4, asr #13
   11f80:	andeq	r1, r1, r0, lsl #5
   11f84:	andeq	r4, r1, r4, ror #12
   11f88:	ldr	r3, [pc, #20]	; 11fa4 <__assert_fail@plt+0xd34>
   11f8c:	ldr	r2, [pc, #20]	; 11fa8 <__assert_fail@plt+0xd38>
   11f90:	add	r3, pc, r3
   11f94:	ldr	r2, [r3, r2]
   11f98:	cmp	r2, #0
   11f9c:	bxeq	lr
   11fa0:	b	110e4 <__gmon_start__@plt>
   11fa4:	andeq	r3, r1, ip, asr pc
   11fa8:	andeq	r0, r0, r8, lsl #2
   11fac:	ldr	r0, [pc, #24]	; 11fcc <__assert_fail@plt+0xd5c>
   11fb0:	ldr	r3, [pc, #24]	; 11fd0 <__assert_fail@plt+0xd60>
   11fb4:	cmp	r3, r0
   11fb8:	bxeq	lr
   11fbc:	ldr	r3, [pc, #16]	; 11fd4 <__assert_fail@plt+0xd64>
   11fc0:	cmp	r3, #0
   11fc4:	bxeq	lr
   11fc8:	bx	r3
   11fcc:	andeq	r6, r2, ip, lsl #2
   11fd0:	andeq	r6, r2, ip, lsl #2
   11fd4:	andeq	r0, r0, r0
   11fd8:	ldr	r0, [pc, #36]	; 12004 <__assert_fail@plt+0xd94>
   11fdc:	ldr	r1, [pc, #36]	; 12008 <__assert_fail@plt+0xd98>
   11fe0:	sub	r1, r1, r0
   11fe4:	asr	r1, r1, #2
   11fe8:	add	r1, r1, r1, lsr #31
   11fec:	asrs	r1, r1, #1
   11ff0:	bxeq	lr
   11ff4:	ldr	r3, [pc, #16]	; 1200c <__assert_fail@plt+0xd9c>
   11ff8:	cmp	r3, #0
   11ffc:	bxeq	lr
   12000:	bx	r3
   12004:	andeq	r6, r2, ip, lsl #2
   12008:	andeq	r6, r2, ip, lsl #2
   1200c:	andeq	r0, r0, r0
   12010:	push	{r4, lr}
   12014:	ldr	r4, [pc, #24]	; 12034 <__assert_fail@plt+0xdc4>
   12018:	ldrb	r3, [r4]
   1201c:	cmp	r3, #0
   12020:	popne	{r4, pc}
   12024:	bl	11fac <__assert_fail@plt+0xd3c>
   12028:	mov	r3, #1
   1202c:	strb	r3, [r4]
   12030:	pop	{r4, pc}
   12034:	andeq	r6, r2, ip, lsr #2
   12038:	b	11fd8 <__assert_fail@plt+0xd68>
   1203c:	push	{r4, r5, r6, r7, r8, lr}
   12040:	subs	r8, r0, #0
   12044:	beq	120b4 <__assert_fail@plt+0xe44>
   12048:	ldr	r6, [pc, #120]	; 120c8 <__assert_fail@plt+0xe58>
   1204c:	ldr	r5, [pc, #120]	; 120cc <__assert_fail@plt+0xe5c>
   12050:	mov	r7, r1
   12054:	mov	r4, #0
   12058:	mov	r2, r7
   1205c:	mov	r1, r5
   12060:	mov	r0, r8
   12064:	bl	1115c <strncasecmp@plt>
   12068:	cmp	r0, #0
   1206c:	bne	1207c <__assert_fail@plt+0xe0c>
   12070:	ldrsb	r3, [r5, r7]
   12074:	cmp	r3, #0
   12078:	beq	120ac <__assert_fail@plt+0xe3c>
   1207c:	add	r4, r4, #1
   12080:	cmp	r4, #5
   12084:	ldrne	r5, [r6, #24]!
   12088:	bne	12058 <__assert_fail@plt+0xde8>
   1208c:	mov	r2, r4
   12090:	ldr	r1, [pc, #56]	; 120d0 <__assert_fail@plt+0xe60>
   12094:	mov	r0, #0
   12098:	bl	11054 <dcgettext@plt>
   1209c:	mov	r1, r8
   120a0:	bl	11144 <warnx@plt>
   120a4:	mvn	r0, #0
   120a8:	pop	{r4, r5, r6, r7, r8, pc}
   120ac:	mov	r0, r4
   120b0:	pop	{r4, r5, r6, r7, r8, pc}
   120b4:	ldr	r3, [pc, #24]	; 120d4 <__assert_fail@plt+0xe64>
   120b8:	ldr	r2, [pc, #24]	; 120d8 <__assert_fail@plt+0xe68>
   120bc:	ldr	r1, [pc, #24]	; 120dc <__assert_fail@plt+0xe6c>
   120c0:	ldr	r0, [pc, #24]	; 120e0 <__assert_fail@plt+0xe70>
   120c4:	bl	11270 <__assert_fail@plt>
   120c8:	strdeq	r4, [r1], -r0
   120cc:	andeq	r4, r1, ip, lsl #18
   120d0:	andeq	r4, r1, r4, lsr r9
   120d4:	andeq	r4, r1, r8, ror #14
   120d8:	andeq	r0, r0, sp, lsl #2
   120dc:	andeq	r4, r1, r8, lsl r9
   120e0:	andeq	r4, r1, ip, lsr #18
   120e4:	push	{r1, r2, r3}
   120e8:	push	{r4, lr}
   120ec:	sub	sp, sp, #12
   120f0:	ldr	r4, [pc, #84]	; 1214c <__assert_fail@plt+0xedc>
   120f4:	add	ip, sp, #24
   120f8:	mov	r3, ip
   120fc:	ldr	r1, [r4]
   12100:	ldr	r2, [pc, #72]	; 12150 <__assert_fail@plt+0xee0>
   12104:	str	r1, [sp, #4]
   12108:	mov	r1, #1
   1210c:	str	ip, [sp]
   12110:	bl	11174 <__vasprintf_chk@plt>
   12114:	cmp	r0, #0
   12118:	blt	1213c <__assert_fail@plt+0xecc>
   1211c:	ldr	r2, [sp, #4]
   12120:	ldr	r3, [r4]
   12124:	cmp	r2, r3
   12128:	bne	12148 <__assert_fail@plt+0xed8>
   1212c:	add	sp, sp, #12
   12130:	pop	{r4, lr}
   12134:	add	sp, sp, #12
   12138:	bx	lr
   1213c:	ldr	r1, [pc, #16]	; 12154 <__assert_fail@plt+0xee4>
   12140:	mov	r0, #1
   12144:	bl	11084 <err@plt>
   12148:	bl	1106c <__stack_chk_fail@plt>
   1214c:	andeq	r5, r2, r8, ror #27
   12150:	andeq	r4, r1, r8, asr #18
   12154:	andeq	r4, r1, r0, asr r9
   12158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1215c:	sub	sp, sp, #20
   12160:	ldr	r5, [pc, #664]	; 12400 <__assert_fail@plt+0x1190>
   12164:	mov	r7, r0
   12168:	mov	r6, r1
   1216c:	ldr	r3, [r5]
   12170:	mov	r1, #32
   12174:	mov	r0, #1
   12178:	mov	r8, r2
   1217c:	str	r3, [sp, #12]
   12180:	bl	10f94 <calloc@plt>
   12184:	subs	r4, r0, #0
   12188:	bne	1219c <__assert_fail@plt+0xf2c>
   1218c:	mov	r2, #32
   12190:	ldr	r1, [pc, #620]	; 12404 <__assert_fail@plt+0x1194>
   12194:	mov	r0, #1
   12198:	bl	11084 <err@plt>
   1219c:	ldr	r9, [pc, #612]	; 12408 <__assert_fail@plt+0x1198>
   121a0:	cmp	r7, #0
   121a4:	add	r3, r9, r8, lsl #4
   121a8:	str	r4, [r4]
   121ac:	str	r4, [r4, #4]
   121b0:	str	r3, [r4, #24]
   121b4:	beq	1223c <__assert_fail@plt+0xfcc>
   121b8:	mov	sl, #0
   121bc:	str	sl, [sp, #8]
   121c0:	bl	11150 <__errno_location@plt>
   121c4:	ldr	r1, [pc, #576]	; 1240c <__assert_fail@plt+0x119c>
   121c8:	str	sl, [r0]
   121cc:	mov	fp, r0
   121d0:	mov	r0, r7
   121d4:	bl	10fb8 <strcmp@plt>
   121d8:	cmp	r0, sl
   121dc:	beq	1226c <__assert_fail@plt+0xffc>
   121e0:	ldrsb	r3, [r7]
   121e4:	cmp	r3, #58	; 0x3a
   121e8:	beq	12284 <__assert_fail@plt+0x1014>
   121ec:	mov	r2, #9
   121f0:	ldr	r1, [pc, #532]	; 1240c <__assert_fail@plt+0x119c>
   121f4:	mov	r0, r7
   121f8:	bl	11234 <strncmp@plt>
   121fc:	cmp	r0, #0
   12200:	bne	122d0 <__assert_fail@plt+0x1060>
   12204:	mvn	r3, #0
   12208:	mov	sl, r3
   1220c:	add	r2, r7, #9
   12210:	str	r2, [sp, #8]
   12214:	ldrsb	r1, [r2]
   12218:	cmp	r1, #58	; 0x3a
   1221c:	movne	r0, r3
   12220:	movne	r1, sl
   12224:	movne	r2, #6
   12228:	beq	122b4 <__assert_fail@plt+0x1044>
   1222c:	str	r3, [r4, #8]
   12230:	str	sl, [r4, #12]
   12234:	strd	r0, [r4, #16]
   12238:	str	r2, [r4, #28]
   1223c:	ldr	r3, [r6, #4]
   12240:	ldr	r1, [sp, #12]
   12244:	ldr	r2, [r5]
   12248:	str	r6, [r4]
   1224c:	cmp	r1, r2
   12250:	str	r3, [r4, #4]
   12254:	str	r4, [r6, #4]
   12258:	mov	r0, #0
   1225c:	str	r4, [r3]
   12260:	bne	123fc <__assert_fail@plt+0x118c>
   12264:	add	sp, sp, #20
   12268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1226c:	mvn	r0, #0
   12270:	mov	r1, r0
   12274:	mov	r3, r0
   12278:	mov	sl, r0
   1227c:	mov	r2, #6
   12280:	b	1222c <__assert_fail@plt+0xfbc>
   12284:	add	r7, r7, #1
   12288:	mov	r0, r7
   1228c:	ldr	r1, [pc, #376]	; 1240c <__assert_fail@plt+0x119c>
   12290:	bl	10fb8 <strcmp@plt>
   12294:	cmp	r0, sl
   12298:	bne	12358 <__assert_fail@plt+0x10e8>
   1229c:	mvn	r0, #0
   122a0:	mov	r1, r0
   122a4:	mov	r3, r0
   122a8:	mov	sl, r0
   122ac:	mov	r2, #4
   122b0:	b	1222c <__assert_fail@plt+0xfbc>
   122b4:	ldrsb	r1, [r2, #1]
   122b8:	cmp	r1, #0
   122bc:	bne	12328 <__assert_fail@plt+0x10b8>
   122c0:	mov	r0, r3
   122c4:	mov	r1, sl
   122c8:	mov	r2, #2
   122cc:	b	1222c <__assert_fail@plt+0xfbc>
   122d0:	mov	r2, #10
   122d4:	add	r1, sp, #8
   122d8:	mov	r0, r7
   122dc:	bl	11180 <strtoull@plt>
   122e0:	ldr	r2, [fp]
   122e4:	cmp	r2, #0
   122e8:	mov	r3, r0
   122ec:	mov	sl, r1
   122f0:	bne	12308 <__assert_fail@plt+0x1098>
   122f4:	ldr	r2, [sp, #8]
   122f8:	cmp	r2, #0
   122fc:	beq	12308 <__assert_fail@plt+0x1098>
   12300:	cmp	r7, r2
   12304:	bne	12214 <__assert_fail@plt+0xfa4>
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #252]	; 12410 <__assert_fail@plt+0x11a0>
   12310:	mov	r0, #0
   12314:	bl	11054 <dcgettext@plt>
   12318:	ldr	r2, [r9, r8, lsl #4]
   1231c:	mov	r1, r0
   12320:	mov	r0, #1
   12324:	bl	111d4 <errx@plt>
   12328:	add	r7, r2, #1
   1232c:	mov	r0, r7
   12330:	ldr	r1, [pc, #212]	; 1240c <__assert_fail@plt+0x119c>
   12334:	str	r3, [sp, #4]
   12338:	bl	10fb8 <strcmp@plt>
   1233c:	ldr	r3, [sp, #4]
   12340:	cmp	r0, #0
   12344:	bne	123a4 <__assert_fail@plt+0x1134>
   12348:	mvn	r0, #0
   1234c:	mov	r2, #6
   12350:	mov	r1, r0
   12354:	b	1222c <__assert_fail@plt+0xfbc>
   12358:	mov	r2, #10
   1235c:	add	r1, sp, #8
   12360:	mov	r0, r7
   12364:	bl	11180 <strtoull@plt>
   12368:	ldr	r3, [fp]
   1236c:	cmp	r3, #0
   12370:	bne	12308 <__assert_fail@plt+0x1098>
   12374:	ldr	r3, [sp, #8]
   12378:	cmp	r3, #0
   1237c:	beq	12308 <__assert_fail@plt+0x1098>
   12380:	ldrsb	r2, [r3]
   12384:	cmp	r2, #0
   12388:	bne	12308 <__assert_fail@plt+0x1098>
   1238c:	cmp	r7, r3
   12390:	mvnne	r3, #0
   12394:	movne	r2, #4
   12398:	movne	sl, r3
   1239c:	bne	1222c <__assert_fail@plt+0xfbc>
   123a0:	b	12308 <__assert_fail@plt+0x1098>
   123a4:	mov	ip, #0
   123a8:	mov	r2, #10
   123ac:	str	ip, [fp]
   123b0:	add	r1, sp, #8
   123b4:	mov	r0, r7
   123b8:	str	r3, [sp, #4]
   123bc:	str	ip, [sp, #8]
   123c0:	bl	11180 <strtoull@plt>
   123c4:	ldr	r2, [fp]
   123c8:	cmp	r2, #0
   123cc:	bne	12308 <__assert_fail@plt+0x1098>
   123d0:	ldr	r2, [sp, #8]
   123d4:	cmp	r2, #0
   123d8:	beq	12308 <__assert_fail@plt+0x1098>
   123dc:	ldrsb	ip, [r2]
   123e0:	cmp	ip, #0
   123e4:	bne	12308 <__assert_fail@plt+0x1098>
   123e8:	cmp	r7, r2
   123ec:	beq	12308 <__assert_fail@plt+0x1098>
   123f0:	mov	r2, #6
   123f4:	ldr	r3, [sp, #4]
   123f8:	b	1222c <__assert_fail@plt+0xfbc>
   123fc:	bl	1106c <__stack_chk_fail@plt>
   12400:	andeq	r5, r2, r8, ror #27
   12404:	andeq	r4, r1, r8, ror #18
   12408:	andeq	r6, r2, r8
   1240c:	andeq	r4, r1, r4, lsl #19
   12410:	muleq	r1, r0, r9
   12414:	ldr	r3, [pc, #292]	; 12540 <__assert_fail@plt+0x12d0>
   12418:	push	{r4, r5, r6, lr}
   1241c:	ldr	r4, [r3]
   12420:	mov	r0, r4
   12424:	bl	1109c <__fpending@plt>
   12428:	mov	r6, r0
   1242c:	mov	r0, r4
   12430:	bl	1100c <ferror@plt>
   12434:	mov	r5, r0
   12438:	mov	r0, r4
   1243c:	bl	111bc <fclose@plt>
   12440:	cmp	r5, #0
   12444:	mov	r4, r0
   12448:	bne	124f0 <__assert_fail@plt+0x1280>
   1244c:	cmp	r0, #0
   12450:	beq	1246c <__assert_fail@plt+0x11fc>
   12454:	bl	11150 <__errno_location@plt>
   12458:	cmp	r6, #0
   1245c:	ldr	r3, [r0]
   12460:	bne	124c8 <__assert_fail@plt+0x1258>
   12464:	cmp	r3, #9
   12468:	bne	124c8 <__assert_fail@plt+0x1258>
   1246c:	ldr	r3, [pc, #208]	; 12544 <__assert_fail@plt+0x12d4>
   12470:	ldr	r4, [r3]
   12474:	mov	r0, r4
   12478:	bl	1109c <__fpending@plt>
   1247c:	mov	r6, r0
   12480:	mov	r0, r4
   12484:	bl	1100c <ferror@plt>
   12488:	mov	r5, r0
   1248c:	mov	r0, r4
   12490:	bl	111bc <fclose@plt>
   12494:	cmp	r5, #0
   12498:	mov	r4, r0
   1249c:	bne	12524 <__assert_fail@plt+0x12b4>
   124a0:	cmp	r0, #0
   124a4:	popeq	{r4, r5, r6, pc}
   124a8:	cmp	r6, #0
   124ac:	bne	124c0 <__assert_fail@plt+0x1250>
   124b0:	bl	11150 <__errno_location@plt>
   124b4:	ldr	r3, [r0]
   124b8:	cmp	r3, #9
   124bc:	popeq	{r4, r5, r6, pc}
   124c0:	mov	r0, #1
   124c4:	bl	11024 <_exit@plt>
   124c8:	cmp	r3, #32
   124cc:	beq	1246c <__assert_fail@plt+0x11fc>
   124d0:	cmp	r3, #0
   124d4:	beq	1250c <__assert_fail@plt+0x129c>
   124d8:	mov	r2, #5
   124dc:	ldr	r1, [pc, #100]	; 12548 <__assert_fail@plt+0x12d8>
   124e0:	mov	r0, #0
   124e4:	bl	11054 <dcgettext@plt>
   124e8:	bl	111e0 <warn@plt>
   124ec:	b	124c0 <__assert_fail@plt+0x1250>
   124f0:	bl	11150 <__errno_location@plt>
   124f4:	cmp	r4, #0
   124f8:	ldr	r3, [r0]
   124fc:	bne	124c8 <__assert_fail@plt+0x1258>
   12500:	cmp	r3, #32
   12504:	strne	r4, [r0]
   12508:	beq	1246c <__assert_fail@plt+0x11fc>
   1250c:	mov	r2, #5
   12510:	ldr	r1, [pc, #48]	; 12548 <__assert_fail@plt+0x12d8>
   12514:	mov	r0, #0
   12518:	bl	11054 <dcgettext@plt>
   1251c:	bl	11144 <warnx@plt>
   12520:	b	124c0 <__assert_fail@plt+0x1250>
   12524:	cmp	r0, #0
   12528:	bne	124c0 <__assert_fail@plt+0x1250>
   1252c:	bl	11150 <__errno_location@plt>
   12530:	ldr	r3, [r0]
   12534:	cmp	r3, #32
   12538:	strne	r4, [r0]
   1253c:	b	124c0 <__assert_fail@plt+0x1250>
   12540:	andeq	r6, r2, r4, lsr #2
   12544:	andeq	r6, r2, r0, lsr #2
   12548:	andeq	r4, r1, ip, lsr #19
   1254c:	andeq	r0, r0, r0
   12550:	cmp	r0, #0
   12554:	mov	r3, #0
   12558:	str	r3, [r1]
   1255c:	bxeq	lr
   12560:	ldrsb	r2, [r0]
   12564:	cmp	r2, #47	; 0x2f
   12568:	bne	125a4 <__assert_fail@plt+0x1334>
   1256c:	ldrsb	r3, [r0, #1]
   12570:	cmp	r3, #47	; 0x2f
   12574:	bne	125ac <__assert_fail@plt+0x133c>
   12578:	add	r3, r0, #1
   1257c:	b	1258c <__assert_fail@plt+0x131c>
   12580:	ldrsb	r2, [r3]
   12584:	cmp	r2, #47	; 0x2f
   12588:	bne	125ac <__assert_fail@plt+0x133c>
   1258c:	cmp	r3, #0
   12590:	mov	r0, r3
   12594:	bxeq	lr
   12598:	ldrsb	r2, [r3], #1
   1259c:	cmp	r2, #47	; 0x2f
   125a0:	beq	12580 <__assert_fail@plt+0x1310>
   125a4:	cmp	r2, #0
   125a8:	beq	125e8 <__assert_fail@plt+0x1378>
   125ac:	mov	r3, #1
   125b0:	str	r3, [r1]
   125b4:	ldrsb	r3, [r0, #1]
   125b8:	add	r2, r0, #1
   125bc:	cmp	r3, #47	; 0x2f
   125c0:	cmpne	r3, #0
   125c4:	bxeq	lr
   125c8:	rsb	r3, r0, #1
   125cc:	add	ip, r2, r3
   125d0:	str	ip, [r1]
   125d4:	ldrsb	ip, [r2, #1]!
   125d8:	cmp	ip, #0
   125dc:	cmpne	ip, #47	; 0x2f
   125e0:	bne	125cc <__assert_fail@plt+0x135c>
   125e4:	bx	lr
   125e8:	mov	r0, r2
   125ec:	bx	lr
   125f0:	push	{r4, r5, r6, r7, r8, lr}
   125f4:	mov	r7, r1
   125f8:	ldrsb	r1, [r0]
   125fc:	cmp	r1, #0
   12600:	movne	r5, r0
   12604:	movne	r4, #0
   12608:	beq	12674 <__assert_fail@plt+0x1404>
   1260c:	cmp	r1, #92	; 0x5c
   12610:	addne	r6, r5, r4
   12614:	beq	12644 <__assert_fail@plt+0x13d4>
   12618:	mov	r0, r7
   1261c:	bl	11138 <strchr@plt>
   12620:	cmp	r0, #0
   12624:	bne	1266c <__assert_fail@plt+0x13fc>
   12628:	ldrsb	r1, [r6, #1]!
   1262c:	add	r4, r4, #1
   12630:	mov	r0, r4
   12634:	cmp	r1, #0
   12638:	popeq	{r4, r5, r6, r7, r8, pc}
   1263c:	cmp	r1, #92	; 0x5c
   12640:	bne	12618 <__assert_fail@plt+0x13a8>
   12644:	add	r3, r5, r4
   12648:	ldrsb	r3, [r3, #1]
   1264c:	cmp	r3, #0
   12650:	beq	1266c <__assert_fail@plt+0x13fc>
   12654:	add	r4, r4, #2
   12658:	mov	r0, r4
   1265c:	ldrsb	r1, [r5, r4]
   12660:	cmp	r1, #0
   12664:	bne	1260c <__assert_fail@plt+0x139c>
   12668:	pop	{r4, r5, r6, r7, r8, pc}
   1266c:	mov	r0, r4
   12670:	pop	{r4, r5, r6, r7, r8, pc}
   12674:	mov	r0, r1
   12678:	pop	{r4, r5, r6, r7, r8, pc}
   1267c:	ldr	ip, [pc, #244]	; 12778 <__assert_fail@plt+0x1508>
   12680:	push	{r4, r5, r6, r7, r8, r9, lr}
   12684:	add	ip, pc, ip
   12688:	ldr	lr, [pc, #236]	; 1277c <__assert_fail@plt+0x150c>
   1268c:	sub	sp, sp, #12
   12690:	mov	r5, #0
   12694:	ldr	r7, [ip, lr]
   12698:	mov	r4, r0
   1269c:	mov	r8, r1
   126a0:	ldr	r3, [r7]
   126a4:	mov	r0, ip
   126a8:	mov	r9, r2
   126ac:	str	r5, [sp]
   126b0:	str	r3, [sp, #4]
   126b4:	bl	11150 <__errno_location@plt>
   126b8:	cmp	r4, r5
   126bc:	str	r5, [r0]
   126c0:	beq	126d0 <__assert_fail@plt+0x1460>
   126c4:	ldrsb	r3, [r4]
   126c8:	cmp	r3, r5
   126cc:	bne	126f0 <__assert_fail@plt+0x1480>
   126d0:	ldr	r1, [pc, #168]	; 12780 <__assert_fail@plt+0x1510>
   126d4:	mov	r3, r4
   126d8:	add	r1, pc, r1
   126dc:	mov	r2, r8
   126e0:	ldr	r0, [r1]
   126e4:	ldr	r1, [pc, #152]	; 12784 <__assert_fail@plt+0x1514>
   126e8:	add	r1, pc, r1
   126ec:	bl	111d4 <errx@plt>
   126f0:	mov	r6, r0
   126f4:	mov	r2, r9
   126f8:	mov	r3, r5
   126fc:	mov	r1, sp
   12700:	mov	r0, r4
   12704:	bl	11048 <__strtoull_internal@plt>
   12708:	ldr	r2, [r6]
   1270c:	cmp	r2, r5
   12710:	bne	1274c <__assert_fail@plt+0x14dc>
   12714:	ldr	r3, [sp]
   12718:	cmp	r3, r4
   1271c:	beq	126d0 <__assert_fail@plt+0x1460>
   12720:	cmp	r3, r5
   12724:	beq	12734 <__assert_fail@plt+0x14c4>
   12728:	ldrsb	r3, [r3]
   1272c:	cmp	r3, r5
   12730:	bne	126d0 <__assert_fail@plt+0x1460>
   12734:	ldr	r2, [sp, #4]
   12738:	ldr	r3, [r7]
   1273c:	cmp	r2, r3
   12740:	bne	12774 <__assert_fail@plt+0x1504>
   12744:	add	sp, sp, #12
   12748:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1274c:	ldr	r3, [pc, #52]	; 12788 <__assert_fail@plt+0x1518>
   12750:	cmp	r2, #34	; 0x22
   12754:	add	r3, pc, r3
   12758:	ldr	r0, [r3]
   1275c:	bne	126d0 <__assert_fail@plt+0x1460>
   12760:	ldr	r1, [pc, #36]	; 1278c <__assert_fail@plt+0x151c>
   12764:	mov	r3, r4
   12768:	mov	r2, r8
   1276c:	add	r1, pc, r1
   12770:	bl	11084 <err@plt>
   12774:	bl	1106c <__stack_chk_fail@plt>
   12778:	andeq	r3, r1, r8, ror #16
   1277c:	andeq	r0, r0, r4, lsl #2
   12780:	andeq	r3, r1, r8, lsr #20
   12784:	ldrdeq	r2, [r0], -ip
   12788:	andeq	r3, r1, ip, lsr #19
   1278c:	andeq	r2, r0, r8, asr lr
   12790:	push	{r4, lr}
   12794:	mov	r5, r0
   12798:	mov	r4, r1
   1279c:	bl	11150 <__errno_location@plt>
   127a0:	ldr	ip, [pc, #32]	; 127c8 <__assert_fail@plt+0x1558>
   127a4:	ldr	r1, [pc, #32]	; 127cc <__assert_fail@plt+0x155c>
   127a8:	add	ip, pc, ip
   127ac:	mov	lr, #34	; 0x22
   127b0:	mov	r3, r5
   127b4:	mov	r2, r4
   127b8:	add	r1, pc, r1
   127bc:	str	lr, [r0]
   127c0:	ldr	r0, [ip]
   127c4:	bl	11084 <err@plt>
   127c8:	andeq	r3, r1, r8, asr r9
   127cc:	andeq	r2, r0, ip, lsl #28
   127d0:	push	{r4, r5, r6, lr}
   127d4:	mov	r4, r0
   127d8:	mov	r5, r1
   127dc:	bl	1267c <__assert_fail@plt+0x140c>
   127e0:	mov	r3, #0
   127e4:	mvn	r2, #0
   127e8:	cmp	r1, r3
   127ec:	cmpeq	r0, r2
   127f0:	popls	{r4, r5, r6, pc}
   127f4:	mov	r1, r5
   127f8:	mov	r0, r4
   127fc:	bl	12790 <__assert_fail@plt+0x1520>
   12800:	ldr	r3, [pc, #8]	; 12810 <__assert_fail@plt+0x15a0>
   12804:	add	r3, pc, r3
   12808:	str	r0, [r3]
   1280c:	bx	lr
   12810:	strdeq	r3, [r1], -ip
   12814:	ldr	r3, [pc, #1648]	; 12e8c <__assert_fail@plt+0x1c1c>
   12818:	ldr	ip, [pc, #1648]	; 12e90 <__assert_fail@plt+0x1c20>
   1281c:	add	r3, pc, r3
   12820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12824:	mov	r5, r1
   12828:	ldr	r1, [r3, ip]
   1282c:	sub	sp, sp, #52	; 0x34
   12830:	mov	ip, r1
   12834:	mov	r8, r0
   12838:	str	r1, [sp, #24]
   1283c:	mov	r0, #0
   12840:	mov	r1, #0
   12844:	ldr	r3, [ip]
   12848:	strd	r0, [r5]
   1284c:	mov	r9, r2
   12850:	str	r3, [sp, #44]	; 0x2c
   12854:	bl	11150 <__errno_location@plt>
   12858:	cmp	r8, #0
   1285c:	mov	r4, r0
   12860:	beq	12a40 <__assert_fail@plt+0x17d0>
   12864:	ldrsb	fp, [r8]
   12868:	cmp	fp, #0
   1286c:	beq	12a40 <__assert_fail@plt+0x17d0>
   12870:	bl	110fc <__ctype_b_loc@plt>
   12874:	mov	r2, r8
   12878:	ldr	r1, [r0]
   1287c:	b	12884 <__assert_fail@plt+0x1614>
   12880:	ldrsb	fp, [r2, #1]!
   12884:	uxtb	r3, fp
   12888:	lsl	r3, r3, #1
   1288c:	ldrh	ip, [r1, r3]
   12890:	ands	ip, ip, #8192	; 0x2000
   12894:	bne	12880 <__assert_fail@plt+0x1610>
   12898:	cmp	fp, #45	; 0x2d
   1289c:	beq	12a40 <__assert_fail@plt+0x17d0>
   128a0:	add	fp, sp, #40	; 0x28
   128a4:	mov	r3, ip
   128a8:	mov	r2, ip
   128ac:	str	ip, [r4]
   128b0:	mov	r1, fp
   128b4:	mov	r0, r8
   128b8:	str	ip, [sp, #40]	; 0x28
   128bc:	bl	11048 <__strtoull_internal@plt>
   128c0:	ldr	sl, [sp, #40]	; 0x28
   128c4:	cmp	sl, r8
   128c8:	mov	r2, r0
   128cc:	mov	r3, r1
   128d0:	ldr	r0, [r4]
   128d4:	strd	r2, [sp, #16]
   128d8:	beq	12bc0 <__assert_fail@plt+0x1950>
   128dc:	cmp	r0, #0
   128e0:	bne	12a68 <__assert_fail@plt+0x17f8>
   128e4:	cmp	sl, #0
   128e8:	beq	12bf4 <__assert_fail@plt+0x1984>
   128ec:	ldrsb	r0, [sl]
   128f0:	cmp	r0, #0
   128f4:	beq	12be8 <__assert_fail@plt+0x1978>
   128f8:	mov	r8, #0
   128fc:	mov	r2, #0
   12900:	mov	r3, #0
   12904:	str	r9, [sp, #32]
   12908:	mov	r6, fp
   1290c:	mov	r9, sl
   12910:	mov	r7, r8
   12914:	mov	sl, r2
   12918:	mov	fp, r3
   1291c:	str	r5, [sp, #28]
   12920:	ldrsb	r2, [r9, #1]
   12924:	cmp	r2, #105	; 0x69
   12928:	beq	12aac <__assert_fail@plt+0x183c>
   1292c:	bic	r1, r2, #32
   12930:	cmp	r1, #66	; 0x42
   12934:	bne	12bcc <__assert_fail@plt+0x195c>
   12938:	ldrsb	r2, [r9, #2]
   1293c:	cmp	r2, #0
   12940:	beq	12db0 <__assert_fail@plt+0x1b40>
   12944:	bl	11204 <localeconv@plt>
   12948:	cmp	r0, #0
   1294c:	beq	12a40 <__assert_fail@plt+0x17d0>
   12950:	ldr	r2, [r0]
   12954:	cmp	r2, #0
   12958:	beq	12a40 <__assert_fail@plt+0x17d0>
   1295c:	mov	r0, r2
   12960:	str	r2, [sp]
   12964:	bl	1112c <strlen@plt>
   12968:	orrs	r3, sl, fp
   1296c:	mov	r5, r0
   12970:	bne	12a40 <__assert_fail@plt+0x17d0>
   12974:	ldrsb	r1, [r9]
   12978:	cmp	r1, #0
   1297c:	beq	12a40 <__assert_fail@plt+0x17d0>
   12980:	ldr	r2, [sp]
   12984:	mov	r1, r9
   12988:	mov	r0, r2
   1298c:	mov	r2, r5
   12990:	bl	11234 <strncmp@plt>
   12994:	cmp	r0, #0
   12998:	bne	12a40 <__assert_fail@plt+0x17d0>
   1299c:	ldrsb	r2, [r9, r5]
   129a0:	add	r5, r9, r5
   129a4:	cmp	r2, #48	; 0x30
   129a8:	bne	129c8 <__assert_fail@plt+0x1758>
   129ac:	add	r8, r8, #1
   129b0:	sub	r1, r8, r5
   129b4:	mov	r3, r5
   129b8:	add	r8, r3, r1
   129bc:	ldrsb	r2, [r3, #1]!
   129c0:	cmp	r2, #48	; 0x30
   129c4:	beq	129b8 <__assert_fail@plt+0x1748>
   129c8:	mov	r3, #0
   129cc:	str	r7, [r4]
   129d0:	mov	r2, r3
   129d4:	mov	r1, r6
   129d8:	mov	r0, r5
   129dc:	str	r7, [sp, #40]	; 0x28
   129e0:	bl	11048 <__strtoull_internal@plt>
   129e4:	ldr	r9, [sp, #40]	; 0x28
   129e8:	cmp	r9, r5
   129ec:	mov	sl, r0
   129f0:	mov	fp, r1
   129f4:	beq	12bbc <__assert_fail@plt+0x194c>
   129f8:	ldr	ip, [r4]
   129fc:	cmp	ip, #0
   12a00:	beq	12a98 <__assert_fail@plt+0x1828>
   12a04:	subs	r3, r0, #1
   12a08:	str	r3, [sp, #8]
   12a0c:	sbc	r3, r1, #0
   12a10:	str	r3, [sp, #12]
   12a14:	ldrd	r2, [sp, #8]
   12a18:	mvn	r1, #0
   12a1c:	mvn	r0, #2
   12a20:	cmp	r3, r1
   12a24:	cmpeq	r2, r0
   12a28:	bhi	12dec <__assert_fail@plt+0x1b7c>
   12a2c:	cmp	r9, #0
   12a30:	beq	12a40 <__assert_fail@plt+0x17d0>
   12a34:	ldrsb	r2, [r9]
   12a38:	cmp	r2, #0
   12a3c:	bne	12920 <__assert_fail@plt+0x16b0>
   12a40:	mov	r3, #22
   12a44:	mvn	r0, #21
   12a48:	str	r3, [r4]
   12a4c:	ldr	r3, [sp, #24]
   12a50:	ldr	r2, [sp, #44]	; 0x2c
   12a54:	ldr	r3, [r3]
   12a58:	cmp	r2, r3
   12a5c:	bne	12e88 <__assert_fail@plt+0x1c18>
   12a60:	add	sp, sp, #52	; 0x34
   12a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a68:	subs	r6, r2, #1
   12a6c:	sbc	r7, r3, #0
   12a70:	mvn	r3, #0
   12a74:	mvn	r2, #2
   12a78:	cmp	r7, r3
   12a7c:	cmpeq	r6, r2
   12a80:	bls	128e4 <__assert_fail@plt+0x1674>
   12a84:	rsb	r0, r0, #0
   12a88:	cmp	r0, #0
   12a8c:	bge	12a4c <__assert_fail@plt+0x17dc>
   12a90:	rsb	r3, r0, #0
   12a94:	b	12a48 <__assert_fail@plt+0x17d8>
   12a98:	orrs	r3, sl, fp
   12a9c:	bne	12a2c <__assert_fail@plt+0x17bc>
   12aa0:	ldrsb	r2, [r9, #1]
   12aa4:	cmp	r2, #105	; 0x69
   12aa8:	bne	1292c <__assert_fail@plt+0x16bc>
   12aac:	ldrsb	r2, [r9, #2]
   12ab0:	bic	r2, r2, #32
   12ab4:	cmp	r2, #66	; 0x42
   12ab8:	bne	12944 <__assert_fail@plt+0x16d4>
   12abc:	ldrsb	r2, [r9, #3]
   12ac0:	cmp	r2, #0
   12ac4:	bne	12944 <__assert_fail@plt+0x16d4>
   12ac8:	strd	sl, [sp]
   12acc:	mov	sl, r9
   12ad0:	ldr	r9, [sp, #32]
   12ad4:	mov	r3, #1024	; 0x400
   12ad8:	ldr	r5, [sp, #28]
   12adc:	str	r3, [sp, #28]
   12ae0:	ldrsb	r7, [sl]
   12ae4:	ldr	r6, [pc, #936]	; 12e94 <__assert_fail@plt+0x1c24>
   12ae8:	add	r6, pc, r6
   12aec:	mov	r1, r7
   12af0:	mov	r0, r6
   12af4:	bl	11138 <strchr@plt>
   12af8:	cmp	r0, #0
   12afc:	beq	12dcc <__assert_fail@plt+0x1b5c>
   12b00:	sub	ip, r0, r6
   12b04:	add	fp, ip, #1
   12b08:	cmp	fp, #0
   12b0c:	beq	12bd8 <__assert_fail@plt+0x1968>
   12b10:	ldr	r3, [sp, #20]
   12b14:	ldr	r6, [sp, #28]
   12b18:	cmp	r3, #0
   12b1c:	mov	r0, #0
   12b20:	asr	r7, r6, #31
   12b24:	mov	r1, #0
   12b28:	bne	12e28 <__assert_fail@plt+0x1bb8>
   12b2c:	orrs	r3, r0, r1
   12b30:	bne	12c1c <__assert_fail@plt+0x19ac>
   12b34:	str	fp, [sp, #32]
   12b38:	sub	ip, ip, #1
   12b3c:	str	r8, [sp, #36]	; 0x24
   12b40:	mov	fp, r4
   12b44:	ldrd	r0, [sp, #16]
   12b48:	mov	lr, r5
   12b4c:	mov	sl, r9
   12b50:	b	12b60 <__assert_fail@plt+0x18f0>
   12b54:	orrs	r3, r4, r5
   12b58:	sub	ip, ip, #1
   12b5c:	bne	12c04 <__assert_fail@plt+0x1994>
   12b60:	mul	r2, r0, r7
   12b64:	cmn	ip, #1
   12b68:	mla	r2, r6, r1, r2
   12b6c:	umull	r0, r1, r0, r6
   12b70:	add	r2, r2, r1
   12b74:	mov	r1, r2
   12b78:	beq	12d90 <__assert_fail@plt+0x1b20>
   12b7c:	cmp	r2, #0
   12b80:	mov	r4, #0
   12b84:	mov	r5, #0
   12b88:	beq	12b54 <__assert_fail@plt+0x18e4>
   12b8c:	umull	r2, r3, r6, r2
   12b90:	umull	r8, r9, r0, r6
   12b94:	strd	r2, [sp, #8]
   12b98:	mov	r8, r9
   12b9c:	ldr	r3, [sp, #12]
   12ba0:	adds	r8, r2, r8
   12ba4:	mov	r2, #0
   12ba8:	adc	r3, r3, r2
   12bac:	cmp	r3, r2
   12bb0:	movne	r4, #1
   12bb4:	movne	r5, #0
   12bb8:	b	12b54 <__assert_fail@plt+0x18e4>
   12bbc:	ldr	r0, [r4]
   12bc0:	cmp	r0, #0
   12bc4:	beq	12a40 <__assert_fail@plt+0x17d0>
   12bc8:	b	12a84 <__assert_fail@plt+0x1814>
   12bcc:	cmp	r2, #0
   12bd0:	bne	12944 <__assert_fail@plt+0x16d4>
   12bd4:	b	12ac8 <__assert_fail@plt+0x1858>
   12bd8:	cmp	r9, #0
   12bdc:	movne	r0, fp
   12be0:	bne	12c28 <__assert_fail@plt+0x19b8>
   12be4:	mov	r0, r9
   12be8:	ldrd	r2, [sp, #16]
   12bec:	strd	r2, [r5]
   12bf0:	b	12a4c <__assert_fail@plt+0x17dc>
   12bf4:	ldrd	r2, [sp, #16]
   12bf8:	mov	r0, sl
   12bfc:	strd	r2, [r5]
   12c00:	b	12a4c <__assert_fail@plt+0x17dc>
   12c04:	mov	r4, fp
   12c08:	ldr	r8, [sp, #36]	; 0x24
   12c0c:	ldr	fp, [sp, #32]
   12c10:	mov	r5, lr
   12c14:	mov	r9, sl
   12c18:	strd	r0, [sp, #16]
   12c1c:	mvn	r0, #33	; 0x21
   12c20:	cmp	r9, #0
   12c24:	beq	12c2c <__assert_fail@plt+0x19bc>
   12c28:	str	fp, [r9]
   12c2c:	ldrd	r2, [sp]
   12c30:	mov	r1, r2
   12c34:	orrs	r3, r1, r3
   12c38:	movne	r3, #1
   12c3c:	moveq	r3, #0
   12c40:	cmp	fp, #0
   12c44:	moveq	r3, #0
   12c48:	cmp	r3, #0
   12c4c:	beq	12d84 <__assert_fail@plt+0x1b14>
   12c50:	ldr	r3, [pc, #576]	; 12e98 <__assert_fail@plt+0x1c28>
   12c54:	ldr	r1, [pc, #576]	; 12e9c <__assert_fail@plt+0x1c2c>
   12c58:	umull	ip, r3, r3, r8
   12c5c:	smull	ip, r1, r1, r8
   12c60:	lsr	r3, r3, #1
   12c64:	rsb	r1, r1, r8, asr #31
   12c68:	add	r3, r3, r3, lsl #1
   12c6c:	add	r1, r1, fp
   12c70:	subs	r3, r8, r3
   12c74:	sub	r6, r1, #1
   12c78:	bne	12df4 <__assert_fail@plt+0x1b84>
   12c7c:	ldrd	r8, [sp]
   12c80:	adds	r3, r8, r8
   12c84:	adc	r2, r9, r9
   12c88:	adds	r3, r3, r8
   12c8c:	adc	r2, r2, r9
   12c90:	lsl	ip, r3, #5
   12c94:	lsl	lr, r2, #5
   12c98:	orr	lr, lr, r3, lsr #27
   12c9c:	adds	r3, r3, ip
   12ca0:	adc	r2, r2, lr
   12ca4:	adds	r3, r8, r3
   12ca8:	str	r3, [sp]
   12cac:	ldr	r3, [sp, #4]
   12cb0:	adc	r3, r3, r2
   12cb4:	str	r3, [sp, #4]
   12cb8:	cmp	r6, #0
   12cbc:	blt	12a40 <__assert_fail@plt+0x17d0>
   12cc0:	beq	12d68 <__assert_fail@plt+0x1af8>
   12cc4:	ldr	r3, [sp, #4]
   12cc8:	ldr	r8, [sp, #28]
   12ccc:	cmp	r3, #0
   12cd0:	mov	r6, #0
   12cd4:	asr	r9, r8, #31
   12cd8:	mov	r7, #0
   12cdc:	bne	12e5c <__assert_fail@plt+0x1bec>
   12ce0:	orrs	r3, r6, r7
   12ce4:	bne	12d68 <__assert_fail@plt+0x1af8>
   12ce8:	sub	r1, r1, #3
   12cec:	ldrd	r2, [sp]
   12cf0:	mov	lr, r4
   12cf4:	str	r5, [sp, #8]
   12cf8:	b	12d08 <__assert_fail@plt+0x1a98>
   12cfc:	orrs	ip, r6, r7
   12d00:	sub	r1, r1, #1
   12d04:	bne	12d5c <__assert_fail@plt+0x1aec>
   12d08:	mul	ip, r2, r9
   12d0c:	cmn	r1, #1
   12d10:	mla	ip, r8, r3, ip
   12d14:	umull	r2, r3, r2, r8
   12d18:	add	ip, ip, r3
   12d1c:	mov	r3, ip
   12d20:	beq	12d5c <__assert_fail@plt+0x1aec>
   12d24:	cmp	ip, #0
   12d28:	mov	r6, #0
   12d2c:	mov	r7, #0
   12d30:	beq	12cfc <__assert_fail@plt+0x1a8c>
   12d34:	umull	sl, fp, r2, r8
   12d38:	umull	r4, r5, r8, ip
   12d3c:	mov	ip, fp
   12d40:	adds	ip, r4, ip
   12d44:	mov	ip, #0
   12d48:	adc	ip, r5, ip
   12d4c:	cmp	ip, #0
   12d50:	movne	r6, #1
   12d54:	movne	r7, #0
   12d58:	b	12cfc <__assert_fail@plt+0x1a8c>
   12d5c:	ldr	r5, [sp, #8]
   12d60:	mov	r4, lr
   12d64:	strd	r2, [sp]
   12d68:	ldrd	r2, [sp]
   12d6c:	ldr	r1, [sp, #16]
   12d70:	adds	r1, r1, r2
   12d74:	str	r1, [sp, #16]
   12d78:	ldr	r1, [sp, #20]
   12d7c:	adc	r3, r1, r3
   12d80:	str	r3, [sp, #20]
   12d84:	ldrd	r2, [sp, #16]
   12d88:	strd	r2, [r5]
   12d8c:	b	12a88 <__assert_fail@plt+0x1818>
   12d90:	mov	r4, fp
   12d94:	strd	r0, [sp, #16]
   12d98:	ldr	r8, [sp, #36]	; 0x24
   12d9c:	ldr	fp, [sp, #32]
   12da0:	mov	r5, lr
   12da4:	mov	r9, sl
   12da8:	mov	r0, #0
   12dac:	b	12c20 <__assert_fail@plt+0x19b0>
   12db0:	mov	r3, #1000	; 0x3e8
   12db4:	strd	sl, [sp]
   12db8:	ldr	r5, [sp, #28]
   12dbc:	mov	sl, r9
   12dc0:	str	r3, [sp, #28]
   12dc4:	ldr	r9, [sp, #32]
   12dc8:	b	12ae0 <__assert_fail@plt+0x1870>
   12dcc:	ldr	r6, [pc, #204]	; 12ea0 <__assert_fail@plt+0x1c30>
   12dd0:	mov	r1, r7
   12dd4:	add	r6, pc, r6
   12dd8:	mov	r0, r6
   12ddc:	bl	11138 <strchr@plt>
   12de0:	cmp	r0, #0
   12de4:	bne	12b00 <__assert_fail@plt+0x1890>
   12de8:	b	12a40 <__assert_fail@plt+0x17d0>
   12dec:	mov	r0, ip
   12df0:	b	12a84 <__assert_fail@plt+0x1814>
   12df4:	cmp	r3, #1
   12df8:	bne	12cb8 <__assert_fail@plt+0x1a48>
   12dfc:	ldrd	r8, [sp]
   12e00:	lsl	r2, r9, #2
   12e04:	lsl	r3, r8, #2
   12e08:	adds	r3, r3, r8
   12e0c:	orr	r2, r2, r8, lsr #30
   12e10:	adc	r2, r2, r9
   12e14:	adds	r3, r3, r3
   12e18:	str	r3, [sp]
   12e1c:	adc	r3, r2, r2
   12e20:	str	r3, [sp, #4]
   12e24:	b	12cb8 <__assert_fail@plt+0x1a48>
   12e28:	ldr	lr, [sp, #28]
   12e2c:	ldr	r3, [sp, #16]
   12e30:	ldr	sl, [sp, #20]
   12e34:	umull	r2, r3, r3, lr
   12e38:	str	r3, [sp, #8]
   12e3c:	mov	r3, #0
   12e40:	str	r3, [sp, #12]
   12e44:	ldrd	r2, [sp, #8]
   12e48:	umlal	r2, r3, sl, lr
   12e4c:	cmp	r3, #0
   12e50:	movne	r0, #1
   12e54:	movne	r1, #0
   12e58:	b	12b2c <__assert_fail@plt+0x18bc>
   12e5c:	ldr	r3, [sp]
   12e60:	ldr	ip, [sp, #28]
   12e64:	ldr	lr, [sp, #4]
   12e68:	umull	sl, fp, r3, ip
   12e6c:	mov	r3, #0
   12e70:	mov	r2, fp
   12e74:	umlal	r2, r3, lr, ip
   12e78:	cmp	r3, #0
   12e7c:	movne	r6, #1
   12e80:	movne	r7, #0
   12e84:	b	12ce0 <__assert_fail@plt+0x1a70>
   12e88:	bl	1106c <__stack_chk_fail@plt>
   12e8c:	ldrdeq	r3, [r1], -r0
   12e90:	andeq	r0, r0, r4, lsl #2
   12e94:	andeq	r2, r0, r8, ror #21
   12e98:	bge	feabd94c <optarg@@GLIBC_2.4+0xfea97824>
   12e9c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   12ea0:	andeq	r2, r0, r8, lsl #16
   12ea4:	mov	r2, #0
   12ea8:	b	12814 <__assert_fail@plt+0x15a4>
   12eac:	push	{r4, r5, r6, lr}
   12eb0:	subs	r5, r0, #0
   12eb4:	mov	r6, r1
   12eb8:	beq	12f24 <__assert_fail@plt+0x1cb4>
   12ebc:	ldrsb	r4, [r5]
   12ec0:	cmp	r4, #0
   12ec4:	beq	12f38 <__assert_fail@plt+0x1cc8>
   12ec8:	bl	110fc <__ctype_b_loc@plt>
   12ecc:	mov	r3, r5
   12ed0:	ldr	r0, [r0]
   12ed4:	b	12eec <__assert_fail@plt+0x1c7c>
   12ed8:	adds	r3, r3, #1
   12edc:	beq	12f24 <__assert_fail@plt+0x1cb4>
   12ee0:	ldrsb	r4, [r3]
   12ee4:	cmp	r4, #0
   12ee8:	beq	12f00 <__assert_fail@plt+0x1c90>
   12eec:	uxtb	r4, r4
   12ef0:	lsl	r4, r4, #1
   12ef4:	ldrh	r2, [r0, r4]
   12ef8:	tst	r2, #2048	; 0x800
   12efc:	bne	12ed8 <__assert_fail@plt+0x1c68>
   12f00:	cmp	r6, #0
   12f04:	strne	r3, [r6]
   12f08:	cmp	r5, r3
   12f0c:	bcs	12f30 <__assert_fail@plt+0x1cc0>
   12f10:	ldrsb	r3, [r3]
   12f14:	cmp	r3, #0
   12f18:	bne	12f30 <__assert_fail@plt+0x1cc0>
   12f1c:	mov	r0, #1
   12f20:	pop	{r4, r5, r6, pc}
   12f24:	cmp	r6, #0
   12f28:	movne	r3, #0
   12f2c:	strne	r3, [r6]
   12f30:	mov	r0, #0
   12f34:	pop	{r4, r5, r6, pc}
   12f38:	cmp	r1, #0
   12f3c:	strne	r5, [r1]
   12f40:	b	12f30 <__assert_fail@plt+0x1cc0>
   12f44:	push	{r4, r5, r6, lr}
   12f48:	subs	r5, r0, #0
   12f4c:	mov	r6, r1
   12f50:	beq	12fbc <__assert_fail@plt+0x1d4c>
   12f54:	ldrsb	r4, [r5]
   12f58:	cmp	r4, #0
   12f5c:	beq	12fd0 <__assert_fail@plt+0x1d60>
   12f60:	bl	110fc <__ctype_b_loc@plt>
   12f64:	mov	r3, r5
   12f68:	ldr	r0, [r0]
   12f6c:	b	12f84 <__assert_fail@plt+0x1d14>
   12f70:	adds	r3, r3, #1
   12f74:	beq	12fbc <__assert_fail@plt+0x1d4c>
   12f78:	ldrsb	r4, [r3]
   12f7c:	cmp	r4, #0
   12f80:	beq	12f98 <__assert_fail@plt+0x1d28>
   12f84:	uxtb	r4, r4
   12f88:	lsl	r4, r4, #1
   12f8c:	ldrh	r2, [r0, r4]
   12f90:	tst	r2, #4096	; 0x1000
   12f94:	bne	12f70 <__assert_fail@plt+0x1d00>
   12f98:	cmp	r6, #0
   12f9c:	strne	r3, [r6]
   12fa0:	cmp	r5, r3
   12fa4:	bcs	12fc8 <__assert_fail@plt+0x1d58>
   12fa8:	ldrsb	r3, [r3]
   12fac:	cmp	r3, #0
   12fb0:	bne	12fc8 <__assert_fail@plt+0x1d58>
   12fb4:	mov	r0, #1
   12fb8:	pop	{r4, r5, r6, pc}
   12fbc:	cmp	r6, #0
   12fc0:	movne	r3, #0
   12fc4:	strne	r3, [r6]
   12fc8:	mov	r0, #0
   12fcc:	pop	{r4, r5, r6, pc}
   12fd0:	cmp	r1, #0
   12fd4:	strne	r5, [r1]
   12fd8:	b	12fc8 <__assert_fail@plt+0x1d58>
   12fdc:	push	{r1, r2, r3}
   12fe0:	ldr	r3, [pc, #188]	; 130a4 <__assert_fail@plt+0x1e34>
   12fe4:	ldr	r2, [pc, #188]	; 130a8 <__assert_fail@plt+0x1e38>
   12fe8:	add	r3, pc, r3
   12fec:	push	{r4, r5, r6, r7, r8, lr}
   12ff0:	sub	sp, sp, #12
   12ff4:	ldr	r7, [r3, r2]
   12ff8:	ldr	r8, [sp, #36]	; 0x24
   12ffc:	mov	r6, r0
   13000:	ldr	r3, [r7]
   13004:	add	r4, sp, #48	; 0x30
   13008:	str	r3, [sp, #4]
   1300c:	b	13028 <__assert_fail@plt+0x1db8>
   13010:	mov	r1, r5
   13014:	mov	r0, r6
   13018:	bl	10fb8 <strcmp@plt>
   1301c:	add	r4, r4, #8
   13020:	cmp	r0, #0
   13024:	beq	13060 <__assert_fail@plt+0x1df0>
   13028:	ldr	r1, [r4, #-8]
   1302c:	sub	r3, r4, #4
   13030:	cmp	r1, #0
   13034:	str	r3, [sp]
   13038:	beq	13080 <__assert_fail@plt+0x1e10>
   1303c:	ldr	r5, [r4, #-4]
   13040:	str	r4, [sp]
   13044:	cmp	r5, #0
   13048:	beq	13080 <__assert_fail@plt+0x1e10>
   1304c:	mov	r0, r6
   13050:	bl	10fb8 <strcmp@plt>
   13054:	cmp	r0, #0
   13058:	bne	13010 <__assert_fail@plt+0x1da0>
   1305c:	mov	r0, #1
   13060:	ldr	r2, [sp, #4]
   13064:	ldr	r3, [r7]
   13068:	cmp	r2, r3
   1306c:	bne	130a0 <__assert_fail@plt+0x1e30>
   13070:	add	sp, sp, #12
   13074:	pop	{r4, r5, r6, r7, r8, lr}
   13078:	add	sp, sp, #12
   1307c:	bx	lr
   13080:	ldr	r1, [pc, #36]	; 130ac <__assert_fail@plt+0x1e3c>
   13084:	mov	r3, r6
   13088:	add	r1, pc, r1
   1308c:	mov	r2, r8
   13090:	ldr	r0, [r1]
   13094:	ldr	r1, [pc, #20]	; 130b0 <__assert_fail@plt+0x1e40>
   13098:	add	r1, pc, r1
   1309c:	bl	111d4 <errx@plt>
   130a0:	bl	1106c <__stack_chk_fail@plt>
   130a4:	andeq	r2, r1, r4, lsl #30
   130a8:	andeq	r0, r0, r4, lsl #2
   130ac:	andeq	r3, r1, r8, ror r0
   130b0:	andeq	r2, r0, ip, lsr #10
   130b4:	cmp	r1, #0
   130b8:	beq	13104 <__assert_fail@plt+0x1e94>
   130bc:	ldrsb	r3, [r0]
   130c0:	cmp	r3, #0
   130c4:	beq	13104 <__assert_fail@plt+0x1e94>
   130c8:	sxtb	r2, r2
   130cc:	cmp	r3, r2
   130d0:	bxeq	lr
   130d4:	add	r1, r0, r1
   130d8:	add	r3, r0, #1
   130dc:	b	130f8 <__assert_fail@plt+0x1e88>
   130e0:	ldrsb	ip, [r3]
   130e4:	add	r3, r3, #1
   130e8:	cmp	ip, #0
   130ec:	beq	13104 <__assert_fail@plt+0x1e94>
   130f0:	cmp	ip, r2
   130f4:	bxeq	lr
   130f8:	cmp	r3, r1
   130fc:	mov	r0, r3
   13100:	bne	130e0 <__assert_fail@plt+0x1e70>
   13104:	mov	r0, #0
   13108:	bx	lr
   1310c:	push	{r4, r5, r6, lr}
   13110:	mov	r2, #10
   13114:	mov	r4, r0
   13118:	mov	r5, r1
   1311c:	bl	127d0 <__assert_fail@plt+0x1560>
   13120:	cmp	r0, #65536	; 0x10000
   13124:	bcs	13130 <__assert_fail@plt+0x1ec0>
   13128:	uxth	r0, r0
   1312c:	pop	{r4, r5, r6, pc}
   13130:	mov	r1, r5
   13134:	mov	r0, r4
   13138:	bl	12790 <__assert_fail@plt+0x1520>
   1313c:	push	{r4, r5, r6, lr}
   13140:	mov	r2, #16
   13144:	mov	r4, r0
   13148:	mov	r5, r1
   1314c:	bl	127d0 <__assert_fail@plt+0x1560>
   13150:	cmp	r0, #65536	; 0x10000
   13154:	bcs	13160 <__assert_fail@plt+0x1ef0>
   13158:	uxth	r0, r0
   1315c:	pop	{r4, r5, r6, pc}
   13160:	mov	r1, r5
   13164:	mov	r0, r4
   13168:	bl	12790 <__assert_fail@plt+0x1520>
   1316c:	mov	r2, #10
   13170:	b	127d0 <__assert_fail@plt+0x1560>
   13174:	mov	r2, #16
   13178:	b	127d0 <__assert_fail@plt+0x1560>
   1317c:	ldr	r2, [pc, #236]	; 13270 <__assert_fail@plt+0x2000>
   13180:	ldr	ip, [pc, #236]	; 13274 <__assert_fail@plt+0x2004>
   13184:	add	r2, pc, r2
   13188:	push	{r4, r5, r6, r7, r8, lr}
   1318c:	sub	sp, sp, #8
   13190:	ldr	r7, [r2, ip]
   13194:	mov	r5, #0
   13198:	mov	r4, r0
   1319c:	ldr	r3, [r7]
   131a0:	mov	r8, r1
   131a4:	str	r5, [sp]
   131a8:	str	r3, [sp, #4]
   131ac:	bl	11150 <__errno_location@plt>
   131b0:	cmp	r4, r5
   131b4:	str	r5, [r0]
   131b8:	beq	131c8 <__assert_fail@plt+0x1f58>
   131bc:	ldrsb	r3, [r4]
   131c0:	cmp	r3, r5
   131c4:	bne	131e8 <__assert_fail@plt+0x1f78>
   131c8:	ldr	r1, [pc, #168]	; 13278 <__assert_fail@plt+0x2008>
   131cc:	mov	r3, r4
   131d0:	add	r1, pc, r1
   131d4:	mov	r2, r8
   131d8:	ldr	r0, [r1]
   131dc:	ldr	r1, [pc, #152]	; 1327c <__assert_fail@plt+0x200c>
   131e0:	add	r1, pc, r1
   131e4:	bl	111d4 <errx@plt>
   131e8:	mov	r6, r0
   131ec:	mov	r2, #10
   131f0:	mov	r3, r5
   131f4:	mov	r1, sp
   131f8:	mov	r0, r4
   131fc:	bl	11210 <__strtoll_internal@plt>
   13200:	ldr	r2, [r6]
   13204:	cmp	r2, r5
   13208:	bne	13244 <__assert_fail@plt+0x1fd4>
   1320c:	ldr	r3, [sp]
   13210:	cmp	r3, r4
   13214:	beq	131c8 <__assert_fail@plt+0x1f58>
   13218:	cmp	r3, r5
   1321c:	beq	1322c <__assert_fail@plt+0x1fbc>
   13220:	ldrsb	r3, [r3]
   13224:	cmp	r3, r5
   13228:	bne	131c8 <__assert_fail@plt+0x1f58>
   1322c:	ldr	r2, [sp, #4]
   13230:	ldr	r3, [r7]
   13234:	cmp	r2, r3
   13238:	bne	1326c <__assert_fail@plt+0x1ffc>
   1323c:	add	sp, sp, #8
   13240:	pop	{r4, r5, r6, r7, r8, pc}
   13244:	ldr	r3, [pc, #52]	; 13280 <__assert_fail@plt+0x2010>
   13248:	cmp	r2, #34	; 0x22
   1324c:	add	r3, pc, r3
   13250:	ldr	r0, [r3]
   13254:	bne	131c8 <__assert_fail@plt+0x1f58>
   13258:	ldr	r1, [pc, #36]	; 13284 <__assert_fail@plt+0x2014>
   1325c:	mov	r3, r4
   13260:	mov	r2, r8
   13264:	add	r1, pc, r1
   13268:	bl	11084 <err@plt>
   1326c:	bl	1106c <__stack_chk_fail@plt>
   13270:	andeq	r2, r1, r8, ror #26
   13274:	andeq	r0, r0, r4, lsl #2
   13278:	andeq	r2, r1, r0, lsr pc
   1327c:	andeq	r2, r0, r4, ror #7
   13280:			; <UNDEFINED> instruction: 0x00012eb4
   13284:	andeq	r2, r0, r0, ror #6
   13288:	push	{r4, r5, r6, r7, r8, lr}
   1328c:	mov	r7, r0
   13290:	mov	r6, r1
   13294:	bl	1317c <__assert_fail@plt+0x1f0c>
   13298:	mov	r3, #0
   1329c:	mvn	r2, #0
   132a0:	adds	r4, r0, #-2147483648	; 0x80000000
   132a4:	adc	r5, r1, #0
   132a8:	cmp	r5, r3
   132ac:	cmpeq	r4, r2
   132b0:	popls	{r4, r5, r6, r7, r8, pc}
   132b4:	bl	11150 <__errno_location@plt>
   132b8:	ldr	ip, [pc, #32]	; 132e0 <__assert_fail@plt+0x2070>
   132bc:	ldr	r1, [pc, #32]	; 132e4 <__assert_fail@plt+0x2074>
   132c0:	add	ip, pc, ip
   132c4:	mov	lr, #34	; 0x22
   132c8:	mov	r3, r7
   132cc:	mov	r2, r6
   132d0:	add	r1, pc, r1
   132d4:	str	lr, [r0]
   132d8:	ldr	r0, [ip]
   132dc:	bl	11084 <err@plt>
   132e0:	andeq	r2, r1, r0, asr #28
   132e4:	strdeq	r2, [r0], -r4
   132e8:	push	{r4, r5, r6, lr}
   132ec:	mov	r5, r0
   132f0:	mov	r4, r1
   132f4:	bl	13288 <__assert_fail@plt+0x2018>
   132f8:	add	r3, r0, #32768	; 0x8000
   132fc:	cmp	r3, #65536	; 0x10000
   13300:	bcs	1330c <__assert_fail@plt+0x209c>
   13304:	sxth	r0, r0
   13308:	pop	{r4, r5, r6, pc}
   1330c:	bl	11150 <__errno_location@plt>
   13310:	ldr	ip, [pc, #32]	; 13338 <__assert_fail@plt+0x20c8>
   13314:	ldr	r1, [pc, #32]	; 1333c <__assert_fail@plt+0x20cc>
   13318:	add	ip, pc, ip
   1331c:	mov	lr, #34	; 0x22
   13320:	mov	r3, r5
   13324:	mov	r2, r4
   13328:	add	r1, pc, r1
   1332c:	str	lr, [r0]
   13330:	ldr	r0, [ip]
   13334:	bl	11084 <err@plt>
   13338:	andeq	r2, r1, r8, ror #27
   1333c:	muleq	r0, ip, r2
   13340:	mov	r2, #10
   13344:	b	1267c <__assert_fail@plt+0x140c>
   13348:	mov	r2, #16
   1334c:	b	1267c <__assert_fail@plt+0x140c>
   13350:	ldr	r2, [pc, #228]	; 1343c <__assert_fail@plt+0x21cc>
   13354:	ldr	r3, [pc, #228]	; 13440 <__assert_fail@plt+0x21d0>
   13358:	add	r2, pc, r2
   1335c:	push	{r4, r5, r6, r7, r8, lr}
   13360:	sub	sp, sp, #8
   13364:	ldr	r7, [r2, r3]
   13368:	mov	r5, #0
   1336c:	mov	r4, r0
   13370:	ldr	r3, [r7]
   13374:	mov	r8, r1
   13378:	str	r5, [sp]
   1337c:	str	r3, [sp, #4]
   13380:	bl	11150 <__errno_location@plt>
   13384:	cmp	r4, r5
   13388:	str	r5, [r0]
   1338c:	beq	1339c <__assert_fail@plt+0x212c>
   13390:	ldrsb	r3, [r4]
   13394:	cmp	r3, r5
   13398:	bne	133bc <__assert_fail@plt+0x214c>
   1339c:	ldr	r1, [pc, #160]	; 13444 <__assert_fail@plt+0x21d4>
   133a0:	mov	r3, r4
   133a4:	add	r1, pc, r1
   133a8:	mov	r2, r8
   133ac:	ldr	r0, [r1]
   133b0:	ldr	r1, [pc, #144]	; 13448 <__assert_fail@plt+0x21d8>
   133b4:	add	r1, pc, r1
   133b8:	bl	111d4 <errx@plt>
   133bc:	mov	r6, r0
   133c0:	mov	r1, sp
   133c4:	mov	r0, r4
   133c8:	bl	111a4 <strtod@plt>
   133cc:	ldr	r2, [r6]
   133d0:	cmp	r2, r5
   133d4:	bne	13410 <__assert_fail@plt+0x21a0>
   133d8:	ldr	r3, [sp]
   133dc:	cmp	r3, r4
   133e0:	beq	1339c <__assert_fail@plt+0x212c>
   133e4:	cmp	r3, r5
   133e8:	beq	133f8 <__assert_fail@plt+0x2188>
   133ec:	ldrsb	r3, [r3]
   133f0:	cmp	r3, r5
   133f4:	bne	1339c <__assert_fail@plt+0x212c>
   133f8:	ldr	r2, [sp, #4]
   133fc:	ldr	r3, [r7]
   13400:	cmp	r2, r3
   13404:	bne	13438 <__assert_fail@plt+0x21c8>
   13408:	add	sp, sp, #8
   1340c:	pop	{r4, r5, r6, r7, r8, pc}
   13410:	ldr	r3, [pc, #52]	; 1344c <__assert_fail@plt+0x21dc>
   13414:	cmp	r2, #34	; 0x22
   13418:	add	r3, pc, r3
   1341c:	ldr	r0, [r3]
   13420:	bne	1339c <__assert_fail@plt+0x212c>
   13424:	ldr	r1, [pc, #36]	; 13450 <__assert_fail@plt+0x21e0>
   13428:	mov	r3, r4
   1342c:	mov	r2, r8
   13430:	add	r1, pc, r1
   13434:	bl	11084 <err@plt>
   13438:	bl	1106c <__stack_chk_fail@plt>
   1343c:	muleq	r1, r4, fp
   13440:	andeq	r0, r0, r4, lsl #2
   13444:	andeq	r2, r1, ip, asr sp
   13448:	andeq	r2, r0, r0, lsl r2
   1344c:	andeq	r2, r1, r8, ror #25
   13450:	muleq	r0, r4, r1
   13454:	ldr	r2, [pc, #232]	; 13544 <__assert_fail@plt+0x22d4>
   13458:	ldr	r3, [pc, #232]	; 13548 <__assert_fail@plt+0x22d8>
   1345c:	add	r2, pc, r2
   13460:	push	{r4, r5, r6, r7, r8, lr}
   13464:	sub	sp, sp, #8
   13468:	ldr	r7, [r2, r3]
   1346c:	mov	r5, #0
   13470:	mov	r4, r0
   13474:	ldr	r3, [r7]
   13478:	mov	r8, r1
   1347c:	str	r5, [sp]
   13480:	str	r3, [sp, #4]
   13484:	bl	11150 <__errno_location@plt>
   13488:	cmp	r4, r5
   1348c:	str	r5, [r0]
   13490:	beq	134a0 <__assert_fail@plt+0x2230>
   13494:	ldrsb	r3, [r4]
   13498:	cmp	r3, r5
   1349c:	bne	134c0 <__assert_fail@plt+0x2250>
   134a0:	ldr	r1, [pc, #164]	; 1354c <__assert_fail@plt+0x22dc>
   134a4:	mov	r3, r4
   134a8:	add	r1, pc, r1
   134ac:	mov	r2, r8
   134b0:	ldr	r0, [r1]
   134b4:	ldr	r1, [pc, #148]	; 13550 <__assert_fail@plt+0x22e0>
   134b8:	add	r1, pc, r1
   134bc:	bl	111d4 <errx@plt>
   134c0:	mov	r6, r0
   134c4:	mov	r2, #10
   134c8:	mov	r1, sp
   134cc:	mov	r0, r4
   134d0:	bl	10fc4 <strtol@plt>
   134d4:	ldr	r2, [r6]
   134d8:	cmp	r2, r5
   134dc:	bne	13518 <__assert_fail@plt+0x22a8>
   134e0:	ldr	r3, [sp]
   134e4:	cmp	r3, r4
   134e8:	beq	134a0 <__assert_fail@plt+0x2230>
   134ec:	cmp	r3, r5
   134f0:	beq	13500 <__assert_fail@plt+0x2290>
   134f4:	ldrsb	r3, [r3]
   134f8:	cmp	r3, r5
   134fc:	bne	134a0 <__assert_fail@plt+0x2230>
   13500:	ldr	r2, [sp, #4]
   13504:	ldr	r3, [r7]
   13508:	cmp	r2, r3
   1350c:	bne	13540 <__assert_fail@plt+0x22d0>
   13510:	add	sp, sp, #8
   13514:	pop	{r4, r5, r6, r7, r8, pc}
   13518:	ldr	r3, [pc, #52]	; 13554 <__assert_fail@plt+0x22e4>
   1351c:	cmp	r2, #34	; 0x22
   13520:	add	r3, pc, r3
   13524:	ldr	r0, [r3]
   13528:	bne	134a0 <__assert_fail@plt+0x2230>
   1352c:	ldr	r1, [pc, #36]	; 13558 <__assert_fail@plt+0x22e8>
   13530:	mov	r3, r4
   13534:	mov	r2, r8
   13538:	add	r1, pc, r1
   1353c:	bl	11084 <err@plt>
   13540:	bl	1106c <__stack_chk_fail@plt>
   13544:	muleq	r1, r0, sl
   13548:	andeq	r0, r0, r4, lsl #2
   1354c:	andeq	r2, r1, r8, asr ip
   13550:	andeq	r2, r0, ip, lsl #2
   13554:	andeq	r2, r1, r0, ror #23
   13558:	andeq	r2, r0, ip, lsl #1
   1355c:	ldr	r2, [pc, #232]	; 1364c <__assert_fail@plt+0x23dc>
   13560:	ldr	r3, [pc, #232]	; 13650 <__assert_fail@plt+0x23e0>
   13564:	add	r2, pc, r2
   13568:	push	{r4, r5, r6, r7, r8, lr}
   1356c:	sub	sp, sp, #8
   13570:	ldr	r7, [r2, r3]
   13574:	mov	r5, #0
   13578:	mov	r4, r0
   1357c:	ldr	r3, [r7]
   13580:	mov	r8, r1
   13584:	str	r5, [sp]
   13588:	str	r3, [sp, #4]
   1358c:	bl	11150 <__errno_location@plt>
   13590:	cmp	r4, r5
   13594:	str	r5, [r0]
   13598:	beq	135a8 <__assert_fail@plt+0x2338>
   1359c:	ldrsb	r3, [r4]
   135a0:	cmp	r3, r5
   135a4:	bne	135c8 <__assert_fail@plt+0x2358>
   135a8:	ldr	r1, [pc, #164]	; 13654 <__assert_fail@plt+0x23e4>
   135ac:	mov	r3, r4
   135b0:	add	r1, pc, r1
   135b4:	mov	r2, r8
   135b8:	ldr	r0, [r1]
   135bc:	ldr	r1, [pc, #148]	; 13658 <__assert_fail@plt+0x23e8>
   135c0:	add	r1, pc, r1
   135c4:	bl	111d4 <errx@plt>
   135c8:	mov	r6, r0
   135cc:	mov	r2, #10
   135d0:	mov	r1, sp
   135d4:	mov	r0, r4
   135d8:	bl	11120 <strtoul@plt>
   135dc:	ldr	r2, [r6]
   135e0:	cmp	r2, r5
   135e4:	bne	13620 <__assert_fail@plt+0x23b0>
   135e8:	ldr	r3, [sp]
   135ec:	cmp	r3, r4
   135f0:	beq	135a8 <__assert_fail@plt+0x2338>
   135f4:	cmp	r3, r5
   135f8:	beq	13608 <__assert_fail@plt+0x2398>
   135fc:	ldrsb	r3, [r3]
   13600:	cmp	r3, r5
   13604:	bne	135a8 <__assert_fail@plt+0x2338>
   13608:	ldr	r2, [sp, #4]
   1360c:	ldr	r3, [r7]
   13610:	cmp	r2, r3
   13614:	bne	13648 <__assert_fail@plt+0x23d8>
   13618:	add	sp, sp, #8
   1361c:	pop	{r4, r5, r6, r7, r8, pc}
   13620:	ldr	r3, [pc, #52]	; 1365c <__assert_fail@plt+0x23ec>
   13624:	cmp	r2, #34	; 0x22
   13628:	add	r3, pc, r3
   1362c:	ldr	r0, [r3]
   13630:	bne	135a8 <__assert_fail@plt+0x2338>
   13634:	ldr	r1, [pc, #36]	; 13660 <__assert_fail@plt+0x23f0>
   13638:	mov	r3, r4
   1363c:	mov	r2, r8
   13640:	add	r1, pc, r1
   13644:	bl	11084 <err@plt>
   13648:	bl	1106c <__stack_chk_fail@plt>
   1364c:	andeq	r2, r1, r8, lsl #19
   13650:	andeq	r0, r0, r4, lsl #2
   13654:	andeq	r2, r1, r0, asr fp
   13658:	andeq	r2, r0, r4
   1365c:	ldrdeq	r2, [r1], -r8
   13660:	andeq	r1, r0, r4, lsl #31
   13664:	ldr	r3, [pc, #140]	; 136f8 <__assert_fail@plt+0x2488>
   13668:	ldr	r2, [pc, #140]	; 136fc <__assert_fail@plt+0x248c>
   1366c:	add	r3, pc, r3
   13670:	push	{r4, r5, r6, lr}
   13674:	sub	sp, sp, #16
   13678:	ldr	r4, [r3, r2]
   1367c:	mov	r5, r1
   13680:	mov	r1, sp
   13684:	ldr	r3, [r4]
   13688:	mov	r6, r0
   1368c:	str	r3, [sp, #12]
   13690:	bl	12ea4 <__assert_fail@plt+0x1c34>
   13694:	cmp	r0, #0
   13698:	beq	136d8 <__assert_fail@plt+0x2468>
   1369c:	bl	11150 <__errno_location@plt>
   136a0:	ldr	r3, [pc, #88]	; 13700 <__assert_fail@plt+0x2490>
   136a4:	mov	r2, r5
   136a8:	ldr	r1, [pc, r3]
   136ac:	ldr	r3, [r0]
   136b0:	mov	r0, r1
   136b4:	cmp	r3, #0
   136b8:	mov	r3, r6
   136bc:	beq	136cc <__assert_fail@plt+0x245c>
   136c0:	ldr	r1, [pc, #60]	; 13704 <__assert_fail@plt+0x2494>
   136c4:	add	r1, pc, r1
   136c8:	bl	11084 <err@plt>
   136cc:	ldr	r1, [pc, #52]	; 13708 <__assert_fail@plt+0x2498>
   136d0:	add	r1, pc, r1
   136d4:	bl	111d4 <errx@plt>
   136d8:	ldr	r2, [sp, #12]
   136dc:	ldr	r3, [r4]
   136e0:	ldrd	r0, [sp]
   136e4:	cmp	r2, r3
   136e8:	bne	136f4 <__assert_fail@plt+0x2484>
   136ec:	add	sp, sp, #16
   136f0:	pop	{r4, r5, r6, pc}
   136f4:	bl	1106c <__stack_chk_fail@plt>
   136f8:	andeq	r2, r1, r0, lsl #17
   136fc:	andeq	r0, r0, r4, lsl #2
   13700:	andeq	r2, r1, r8, asr sl
   13704:	andeq	r1, r0, r0, lsl #30
   13708:	strdeq	r1, [r0], -r4
   1370c:	push	{r4, lr}
   13710:	mov	r4, r1
   13714:	mov	r1, r2
   13718:	bl	13350 <__assert_fail@plt+0x20e0>
   1371c:	vldr	d6, [pc, #28]	; 13740 <__assert_fail@plt+0x24d0>
   13720:	vcvt.s32.f64	s15, d0
   13724:	vcvt.f64.s32	d5, s15
   13728:	vstr	s15, [r4]
   1372c:	vsub.f64	d0, d0, d5
   13730:	vmul.f64	d0, d0, d6
   13734:	vcvt.s32.f64	s0, d0
   13738:	vstr	s0, [r4, #4]
   1373c:	pop	{r4, pc}
   13740:	andeq	r0, r0, r0
   13744:	smlawbmi	lr, r0, r4, r8
   13748:	and	r2, r0, #61440	; 0xf000
   1374c:	cmp	r2, #16384	; 0x4000
   13750:	moveq	r2, r1
   13754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13758:	moveq	sl, #100	; 0x64
   1375c:	mov	r3, r0
   13760:	add	r9, r1, #1
   13764:	add	r8, r1, #2
   13768:	add	r7, r1, #3
   1376c:	add	r6, r1, #4
   13770:	add	r5, r1, #5
   13774:	add	r4, r1, #6
   13778:	add	lr, r1, #7
   1377c:	add	ip, r1, #8
   13780:	add	r0, r1, #9
   13784:	strbeq	sl, [r2], #10
   13788:	beq	1382c <__assert_fail@plt+0x25bc>
   1378c:	cmp	r2, #40960	; 0xa000
   13790:	moveq	r2, r1
   13794:	moveq	sl, #108	; 0x6c
   13798:	strbeq	sl, [r2], #10
   1379c:	beq	1382c <__assert_fail@plt+0x25bc>
   137a0:	cmp	r2, #8192	; 0x2000
   137a4:	moveq	r2, r1
   137a8:	moveq	sl, #99	; 0x63
   137ac:	strbeq	sl, [r2], #10
   137b0:	beq	1382c <__assert_fail@plt+0x25bc>
   137b4:	cmp	r2, #24576	; 0x6000
   137b8:	moveq	r2, r1
   137bc:	moveq	sl, #98	; 0x62
   137c0:	strbeq	sl, [r2], #10
   137c4:	beq	1382c <__assert_fail@plt+0x25bc>
   137c8:	cmp	r2, #49152	; 0xc000
   137cc:	moveq	r2, r1
   137d0:	moveq	sl, #115	; 0x73
   137d4:	strbeq	sl, [r2], #10
   137d8:	beq	1382c <__assert_fail@plt+0x25bc>
   137dc:	cmp	r2, #4096	; 0x1000
   137e0:	moveq	r2, r1
   137e4:	moveq	sl, #112	; 0x70
   137e8:	strbeq	sl, [r2], #10
   137ec:	beq	1382c <__assert_fail@plt+0x25bc>
   137f0:	cmp	r2, #32768	; 0x8000
   137f4:	moveq	r2, r1
   137f8:	moveq	sl, #45	; 0x2d
   137fc:	strbeq	sl, [r2], #10
   13800:	beq	1382c <__assert_fail@plt+0x25bc>
   13804:	mov	r2, r0
   13808:	mov	r0, ip
   1380c:	mov	ip, lr
   13810:	mov	lr, r4
   13814:	mov	r4, r5
   13818:	mov	r5, r6
   1381c:	mov	r6, r7
   13820:	mov	r7, r8
   13824:	mov	r8, r9
   13828:	mov	r9, r1
   1382c:	tst	r3, #256	; 0x100
   13830:	movne	fp, #114	; 0x72
   13834:	moveq	fp, #45	; 0x2d
   13838:	tst	r3, #128	; 0x80
   1383c:	movne	sl, #119	; 0x77
   13840:	moveq	sl, #45	; 0x2d
   13844:	tst	r3, #2048	; 0x800
   13848:	strb	fp, [r9]
   1384c:	and	r9, r3, #64	; 0x40
   13850:	strb	sl, [r8]
   13854:	beq	138f0 <__assert_fail@plt+0x2680>
   13858:	cmp	r9, #0
   1385c:	movne	r9, #115	; 0x73
   13860:	moveq	r9, #83	; 0x53
   13864:	tst	r3, #32
   13868:	movne	r8, #114	; 0x72
   1386c:	moveq	r8, #45	; 0x2d
   13870:	tst	r3, #16
   13874:	strb	r9, [r7]
   13878:	movne	r7, #119	; 0x77
   1387c:	moveq	r7, #45	; 0x2d
   13880:	tst	r3, #1024	; 0x400
   13884:	strb	r8, [r6]
   13888:	and	r6, r3, #8
   1388c:	strb	r7, [r5]
   13890:	beq	13900 <__assert_fail@plt+0x2690>
   13894:	cmp	r6, #0
   13898:	movne	r6, #115	; 0x73
   1389c:	moveq	r6, #83	; 0x53
   138a0:	tst	r3, #4
   138a4:	movne	r5, #114	; 0x72
   138a8:	moveq	r5, #45	; 0x2d
   138ac:	tst	r3, #2
   138b0:	strb	r6, [r4]
   138b4:	movne	r4, #119	; 0x77
   138b8:	moveq	r4, #45	; 0x2d
   138bc:	tst	r3, #512	; 0x200
   138c0:	strb	r5, [lr]
   138c4:	and	r3, r3, #1
   138c8:	strb	r4, [ip]
   138cc:	beq	13910 <__assert_fail@plt+0x26a0>
   138d0:	cmp	r3, #0
   138d4:	movne	ip, #116	; 0x74
   138d8:	moveq	ip, #84	; 0x54
   138dc:	mov	r3, #0
   138e0:	strb	ip, [r0]
   138e4:	mov	r0, r1
   138e8:	strb	r3, [r2]
   138ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f0:	cmp	r9, #0
   138f4:	movne	r9, #120	; 0x78
   138f8:	moveq	r9, #45	; 0x2d
   138fc:	b	13864 <__assert_fail@plt+0x25f4>
   13900:	cmp	r6, #0
   13904:	movne	r6, #120	; 0x78
   13908:	moveq	r6, #45	; 0x2d
   1390c:	b	138a0 <__assert_fail@plt+0x2630>
   13910:	cmp	r3, #0
   13914:	movne	ip, #120	; 0x78
   13918:	moveq	ip, #45	; 0x2d
   1391c:	b	138dc <__assert_fail@plt+0x266c>
   13920:	ldr	r1, [pc, #680]	; 13bd0 <__assert_fail@plt+0x2960>
   13924:	ldr	ip, [pc, #680]	; 13bd4 <__assert_fail@plt+0x2964>
   13928:	add	r1, pc, r1
   1392c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13930:	sub	sp, sp, #108	; 0x6c
   13934:	ldr	r8, [r1, ip]
   13938:	tst	r0, #2
   1393c:	strd	r2, [sp, #32]
   13940:	ldr	r1, [r8]
   13944:	addeq	r9, sp, #60	; 0x3c
   13948:	str	r1, [sp, #100]	; 0x64
   1394c:	ldrd	r2, [sp, #32]
   13950:	movne	r1, #32
   13954:	strbne	r1, [sp, #60]	; 0x3c
   13958:	addne	ip, sp, #61	; 0x3d
   1395c:	addne	r9, sp, #60	; 0x3c
   13960:	moveq	ip, r9
   13964:	mov	r1, #10
   13968:	mov	sl, #1
   1396c:	sub	lr, r1, #32
   13970:	lsl	r4, sl, r1
   13974:	lsl	r5, sl, lr
   13978:	rsb	lr, r1, #32
   1397c:	orr	r5, r5, sl, lsr lr
   13980:	cmp	r3, r5
   13984:	cmpeq	r2, r4
   13988:	bcc	13b44 <__assert_fail@plt+0x28d4>
   1398c:	add	r1, r1, #10
   13990:	cmp	r1, #70	; 0x46
   13994:	bne	1396c <__assert_fail@plt+0x26fc>
   13998:	mov	lr, ip
   1399c:	strd	r2, [sp, #32]
   139a0:	mov	r4, r2
   139a4:	tst	r0, #1
   139a8:	mov	r2, #69	; 0x45
   139ac:	bic	r5, r3, #-268435456	; 0xf0000000
   139b0:	lsr	sl, r3, #28
   139b4:	strb	r2, [lr], #1
   139b8:	bne	13b2c <__assert_fail@plt+0x28bc>
   139bc:	orrs	r3, r4, r5
   139c0:	mov	r3, #0
   139c4:	strb	r3, [lr]
   139c8:	beq	13b6c <__assert_fail@plt+0x28fc>
   139cc:	sub	r2, r1, #20
   139d0:	rsb	r0, r2, #32
   139d4:	lsr	r3, r4, r2
   139d8:	sub	r1, r1, #52	; 0x34
   139dc:	orr	r3, r3, r5, lsl r0
   139e0:	orr	r3, r3, r5, lsr r1
   139e4:	lsr	r2, r5, r2
   139e8:	adds	r6, r3, #50	; 0x32
   139ec:	adc	r7, r2, #0
   139f0:	mov	r3, #0
   139f4:	mov	r2, #100	; 0x64
   139f8:	mov	r0, r6
   139fc:	mov	r1, r7
   13a00:	bl	144f0 <__assert_fail@plt+0x3280>
   13a04:	cmp	r1, #0
   13a08:	cmpeq	r0, #10
   13a0c:	mov	r2, r0
   13a10:	mov	r3, r1
   13a14:	addeq	sl, sl, #1
   13a18:	beq	13b6c <__assert_fail@plt+0x28fc>
   13a1c:	cmp	r7, #0
   13a20:	cmpeq	r6, #99	; 0x63
   13a24:	strd	r2, [sp, #32]
   13a28:	bls	13b6c <__assert_fail@plt+0x28fc>
   13a2c:	bl	11204 <localeconv@plt>
   13a30:	ldrd	r2, [sp, #32]
   13a34:	cmp	r0, #0
   13a38:	beq	13bb4 <__assert_fail@plt+0x2944>
   13a3c:	ldr	r0, [r0]
   13a40:	cmp	r0, #0
   13a44:	beq	13bc0 <__assert_fail@plt+0x2950>
   13a48:	ldrsb	r1, [r0]
   13a4c:	cmp	r1, #0
   13a50:	ldreq	r0, [pc, #384]	; 13bd8 <__assert_fail@plt+0x2968>
   13a54:	addeq	r0, pc, r0
   13a58:	ldr	r1, [pc, #380]	; 13bdc <__assert_fail@plt+0x296c>
   13a5c:	strd	r2, [sp, #16]
   13a60:	add	r1, pc, r1
   13a64:	add	r4, sp, #68	; 0x44
   13a68:	mov	r3, #32
   13a6c:	str	r0, [sp, #8]
   13a70:	str	r1, [sp]
   13a74:	str	r9, [sp, #24]
   13a78:	str	sl, [sp, #4]
   13a7c:	mov	r0, r4
   13a80:	mov	r1, r3
   13a84:	mov	r2, #1
   13a88:	bl	1124c <__snprintf_chk@plt>
   13a8c:	b	13b94 <__assert_fail@plt+0x2924>
   13a90:	ldr	r4, [pc, #328]	; 13be0 <__assert_fail@plt+0x2970>
   13a94:	mvn	sl, #0
   13a98:	ldr	fp, [pc, #324]	; 13be4 <__assert_fail@plt+0x2974>
   13a9c:	umull	r2, r3, lr, r4
   13aa0:	sub	r4, r1, #42	; 0x2a
   13aa4:	strd	r2, [sp, #40]	; 0x28
   13aa8:	ldr	r3, [sp, #44]	; 0x2c
   13aac:	lsl	r2, sl, lr
   13ab0:	lsr	r3, r3, #3
   13ab4:	str	r3, [sp, #52]	; 0x34
   13ab8:	ldr	r3, [sp, #32]
   13abc:	str	r4, [sp, #48]	; 0x30
   13ac0:	orr	r4, r2, sl, lsl r4
   13ac4:	lsr	r2, r3, lr
   13ac8:	mov	r3, r2
   13acc:	ldr	r2, [sp, #52]	; 0x34
   13ad0:	add	fp, pc, fp
   13ad4:	str	r4, [sp, #40]	; 0x28
   13ad8:	ldrsb	fp, [fp, r2]
   13adc:	mov	r2, r3
   13ae0:	ldr	r3, [sp, #36]	; 0x24
   13ae4:	rsb	r5, lr, #32
   13ae8:	ldr	r4, [sp, #40]	; 0x28
   13aec:	orr	r2, r2, r3, lsl r5
   13af0:	orr	r4, r4, sl, lsr r5
   13af4:	ldr	r3, [sp, #32]
   13af8:	str	r4, [sp, #40]	; 0x28
   13afc:	cmp	r0, #0
   13b00:	bic	r4, r3, sl, lsl lr
   13b04:	ldr	r0, [sp, #36]	; 0x24
   13b08:	ldr	r3, [sp, #48]	; 0x30
   13b0c:	mov	lr, ip
   13b10:	orr	sl, r2, r0, lsr r3
   13b14:	ldr	r3, [sp, #40]	; 0x28
   13b18:	strb	fp, [lr], #1
   13b1c:	bic	r5, r0, r3
   13b20:	beq	139bc <__assert_fail@plt+0x274c>
   13b24:	cmp	fp, #66	; 0x42
   13b28:	beq	139bc <__assert_fail@plt+0x274c>
   13b2c:	mov	r3, #105	; 0x69
   13b30:	strb	r3, [ip, #1]
   13b34:	mov	r3, #66	; 0x42
   13b38:	add	lr, ip, #3
   13b3c:	strb	r3, [ip, #2]
   13b40:	b	139bc <__assert_fail@plt+0x274c>
   13b44:	subs	lr, r1, #10
   13b48:	strd	r2, [sp, #32]
   13b4c:	and	r0, r0, #1
   13b50:	bne	13a90 <__assert_fail@plt+0x2820>
   13b54:	ldr	sl, [sp, #32]
   13b58:	cmp	r0, #0
   13b5c:	movne	r0, lr
   13b60:	mov	r3, #66	; 0x42
   13b64:	strb	r0, [ip, #1]
   13b68:	strb	r3, [ip]
   13b6c:	ldr	r2, [pc, #116]	; 13be8 <__assert_fail@plt+0x2978>
   13b70:	add	r4, sp, #68	; 0x44
   13b74:	add	r2, pc, r2
   13b78:	mov	r3, #32
   13b7c:	stm	sp, {r2, sl}
   13b80:	str	r9, [sp, #8]
   13b84:	mov	r0, r4
   13b88:	mov	r1, r3
   13b8c:	mov	r2, #1
   13b90:	bl	1124c <__snprintf_chk@plt>
   13b94:	mov	r0, r4
   13b98:	bl	11060 <strdup@plt>
   13b9c:	ldr	r2, [sp, #100]	; 0x64
   13ba0:	ldr	r3, [r8]
   13ba4:	cmp	r2, r3
   13ba8:	bne	13bcc <__assert_fail@plt+0x295c>
   13bac:	add	sp, sp, #108	; 0x6c
   13bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb4:	ldr	r0, [pc, #48]	; 13bec <__assert_fail@plt+0x297c>
   13bb8:	add	r0, pc, r0
   13bbc:	b	13a58 <__assert_fail@plt+0x27e8>
   13bc0:	ldr	r0, [pc, #40]	; 13bf0 <__assert_fail@plt+0x2980>
   13bc4:	add	r0, pc, r0
   13bc8:	b	13a58 <__assert_fail@plt+0x27e8>
   13bcc:	bl	1106c <__stack_chk_fail@plt>
   13bd0:	andeq	r2, r1, r4, asr #11
   13bd4:	andeq	r0, r0, r4, lsl #2
   13bd8:	muleq	r0, r4, fp
   13bdc:	muleq	r0, r4, fp
   13be0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   13be4:	andeq	r1, r0, ip, lsl fp
   13be8:	andeq	r1, r0, ip, lsl #21
   13bec:	andeq	r1, r0, r0, lsr sl
   13bf0:	andeq	r1, r0, r4, lsr #20
   13bf4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bf8:	subs	r4, r0, #0
   13bfc:	beq	13ccc <__assert_fail@plt+0x2a5c>
   13c00:	ldrsb	lr, [r4]
   13c04:	cmp	lr, #0
   13c08:	beq	13ccc <__assert_fail@plt+0x2a5c>
   13c0c:	cmp	r1, #0
   13c10:	clz	ip, r2
   13c14:	lsr	ip, ip, #5
   13c18:	moveq	r0, #1
   13c1c:	movne	r0, ip
   13c20:	cmp	r3, #0
   13c24:	moveq	r0, #1
   13c28:	cmp	r0, #0
   13c2c:	bne	13ccc <__assert_fail@plt+0x2a5c>
   13c30:	mov	r8, r3
   13c34:	mov	r7, r2
   13c38:	mov	r9, r1
   13c3c:	mov	r5, r0
   13c40:	b	13c9c <__assert_fail@plt+0x2a2c>
   13c44:	cmp	r3, #0
   13c48:	bne	13c88 <__assert_fail@plt+0x2a18>
   13c4c:	cmn	r4, #1
   13c50:	add	r6, r4, #1
   13c54:	beq	13cd4 <__assert_fail@plt+0x2a64>
   13c58:	cmp	r0, r6
   13c5c:	bcs	13ccc <__assert_fail@plt+0x2a5c>
   13c60:	sub	r1, r6, r0
   13c64:	blx	r8
   13c68:	cmn	r0, #1
   13c6c:	beq	13ccc <__assert_fail@plt+0x2a5c>
   13c70:	str	r0, [r9, r5, lsl #2]
   13c74:	ldrsb	r3, [r6]
   13c78:	add	r5, r5, #1
   13c7c:	cmp	r3, #0
   13c80:	beq	13cd4 <__assert_fail@plt+0x2a64>
   13c84:	mov	r0, #0
   13c88:	cmn	r4, #1
   13c8c:	beq	13cd4 <__assert_fail@plt+0x2a64>
   13c90:	ldrsb	lr, [r4, #1]!
   13c94:	cmp	lr, #0
   13c98:	beq	13cd4 <__assert_fail@plt+0x2a64>
   13c9c:	cmp	r7, r5
   13ca0:	mov	r6, r4
   13ca4:	bls	13cdc <__assert_fail@plt+0x2a6c>
   13ca8:	cmp	r0, #0
   13cac:	moveq	r0, r4
   13cb0:	cmp	lr, #44	; 0x2c
   13cb4:	ldrsb	r3, [r4, #1]
   13cb8:	bne	13c44 <__assert_fail@plt+0x29d4>
   13cbc:	cmp	r3, #0
   13cc0:	beq	13c4c <__assert_fail@plt+0x29dc>
   13cc4:	cmp	r0, r6
   13cc8:	bcc	13c60 <__assert_fail@plt+0x29f0>
   13ccc:	mvn	r0, #0
   13cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cd4:	mov	r0, r5
   13cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cdc:	mvn	r0, #1
   13ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ce4:	cmp	r0, #0
   13ce8:	beq	13d54 <__assert_fail@plt+0x2ae4>
   13cec:	push	{r4, lr}
   13cf0:	mov	r4, r3
   13cf4:	cmp	r4, #0
   13cf8:	ldrsb	ip, [r0]
   13cfc:	clz	r3, ip
   13d00:	lsr	r3, r3, #5
   13d04:	moveq	r3, #1
   13d08:	cmp	r3, #0
   13d0c:	bne	13d4c <__assert_fail@plt+0x2adc>
   13d10:	ldr	lr, [r4]
   13d14:	cmp	lr, r2
   13d18:	bhi	13d4c <__assert_fail@plt+0x2adc>
   13d1c:	cmp	ip, #43	; 0x2b
   13d20:	strne	r3, [r4]
   13d24:	addeq	r0, r0, #1
   13d28:	ldr	r3, [sp, #8]
   13d2c:	addeq	r1, r1, lr, lsl #2
   13d30:	subeq	r2, r2, lr
   13d34:	bl	13bf4 <__assert_fail@plt+0x2984>
   13d38:	cmp	r0, #0
   13d3c:	ldrgt	r3, [r4]
   13d40:	addgt	r3, r3, r0
   13d44:	strgt	r3, [r4]
   13d48:	pop	{r4, pc}
   13d4c:	mvn	r0, #0
   13d50:	pop	{r4, pc}
   13d54:	mvn	r0, #0
   13d58:	bx	lr
   13d5c:	cmp	r2, #0
   13d60:	clz	r3, r1
   13d64:	lsr	r3, r3, #5
   13d68:	moveq	r3, #1
   13d6c:	cmp	r0, #0
   13d70:	moveq	r3, #1
   13d74:	cmp	r3, #0
   13d78:	bne	13e44 <__assert_fail@plt+0x2bd4>
   13d7c:	push	{r4, r5, r6, r7, r8, lr}
   13d80:	mov	r6, r2
   13d84:	mov	r2, r3
   13d88:	ldrsb	r3, [r0]
   13d8c:	mov	r8, r1
   13d90:	mov	r4, r0
   13d94:	mov	r7, #1
   13d98:	cmp	r3, #0
   13d9c:	beq	13e0c <__assert_fail@plt+0x2b9c>
   13da0:	cmp	r2, #0
   13da4:	moveq	r2, r4
   13da8:	cmp	r3, #44	; 0x2c
   13dac:	mov	r5, r4
   13db0:	ldrsb	r3, [r4, #1]!
   13db4:	beq	13e14 <__assert_fail@plt+0x2ba4>
   13db8:	cmp	r3, #0
   13dbc:	bne	13e34 <__assert_fail@plt+0x2bc4>
   13dc0:	mov	r5, r4
   13dc4:	cmp	r2, r5
   13dc8:	sub	r1, r5, r2
   13dcc:	mov	r0, r2
   13dd0:	bcs	13e2c <__assert_fail@plt+0x2bbc>
   13dd4:	blx	r6
   13dd8:	mov	r2, r4
   13ddc:	cmp	r0, #0
   13de0:	and	r1, r0, #7
   13de4:	poplt	{r4, r5, r6, r7, r8, pc}
   13de8:	ldrb	r3, [r8, r0, asr #3]
   13dec:	orr	r3, r3, r7, lsl r1
   13df0:	strb	r3, [r8, r0, asr #3]
   13df4:	ldrsb	r3, [r5]
   13df8:	cmp	r3, #0
   13dfc:	beq	13e0c <__assert_fail@plt+0x2b9c>
   13e00:	ldrsb	r3, [r4]
   13e04:	cmp	r3, #0
   13e08:	bne	13da8 <__assert_fail@plt+0x2b38>
   13e0c:	mov	r0, #0
   13e10:	pop	{r4, r5, r6, r7, r8, pc}
   13e14:	cmp	r3, #0
   13e18:	moveq	r5, r4
   13e1c:	cmp	r2, r5
   13e20:	sub	r1, r5, r2
   13e24:	mov	r0, r2
   13e28:	bcc	13dd4 <__assert_fail@plt+0x2b64>
   13e2c:	mvn	r0, #0
   13e30:	pop	{r4, r5, r6, r7, r8, pc}
   13e34:	adds	r4, r5, #1
   13e38:	bne	13d98 <__assert_fail@plt+0x2b28>
   13e3c:	mov	r0, #0
   13e40:	pop	{r4, r5, r6, r7, r8, pc}
   13e44:	mvn	r0, #21
   13e48:	bx	lr
   13e4c:	cmp	r2, #0
   13e50:	clz	r3, r1
   13e54:	lsr	r3, r3, #5
   13e58:	moveq	r3, #1
   13e5c:	cmp	r0, #0
   13e60:	moveq	r3, #1
   13e64:	cmp	r3, #0
   13e68:	bne	13f2c <__assert_fail@plt+0x2cbc>
   13e6c:	push	{r4, r5, r6, r7, r8, lr}
   13e70:	mov	r6, r2
   13e74:	mov	r2, r3
   13e78:	ldrsb	r3, [r0]
   13e7c:	mov	r7, r1
   13e80:	mov	r4, r0
   13e84:	cmp	r3, #0
   13e88:	beq	13ef4 <__assert_fail@plt+0x2c84>
   13e8c:	cmp	r2, #0
   13e90:	moveq	r2, r4
   13e94:	cmp	r3, #44	; 0x2c
   13e98:	mov	r5, r4
   13e9c:	ldrsb	r3, [r4, #1]!
   13ea0:	beq	13efc <__assert_fail@plt+0x2c8c>
   13ea4:	cmp	r3, #0
   13ea8:	bne	13f1c <__assert_fail@plt+0x2cac>
   13eac:	mov	r5, r4
   13eb0:	cmp	r2, r5
   13eb4:	sub	r1, r5, r2
   13eb8:	mov	r0, r2
   13ebc:	bcs	13f14 <__assert_fail@plt+0x2ca4>
   13ec0:	blx	r6
   13ec4:	mov	r2, r4
   13ec8:	cmp	r0, #0
   13ecc:	poplt	{r4, r5, r6, r7, r8, pc}
   13ed0:	ldr	r3, [r7]
   13ed4:	orr	r3, r3, r0
   13ed8:	str	r3, [r7]
   13edc:	ldrsb	r3, [r5]
   13ee0:	cmp	r3, #0
   13ee4:	beq	13ef4 <__assert_fail@plt+0x2c84>
   13ee8:	ldrsb	r3, [r4]
   13eec:	cmp	r3, #0
   13ef0:	bne	13e94 <__assert_fail@plt+0x2c24>
   13ef4:	mov	r0, #0
   13ef8:	pop	{r4, r5, r6, r7, r8, pc}
   13efc:	cmp	r3, #0
   13f00:	moveq	r5, r4
   13f04:	cmp	r2, r5
   13f08:	sub	r1, r5, r2
   13f0c:	mov	r0, r2
   13f10:	bcc	13ec0 <__assert_fail@plt+0x2c50>
   13f14:	mvn	r0, #0
   13f18:	pop	{r4, r5, r6, r7, r8, pc}
   13f1c:	adds	r4, r5, #1
   13f20:	bne	13e84 <__assert_fail@plt+0x2c14>
   13f24:	mov	r0, #0
   13f28:	pop	{r4, r5, r6, r7, r8, pc}
   13f2c:	mvn	r0, #21
   13f30:	bx	lr
   13f34:	ldr	ip, [pc, #396]	; 140c8 <__assert_fail@plt+0x2e58>
   13f38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f3c:	add	ip, pc, ip
   13f40:	ldr	lr, [pc, #388]	; 140cc <__assert_fail@plt+0x2e5c>
   13f44:	sub	sp, sp, #8
   13f48:	mov	r9, r3
   13f4c:	ldr	r5, [ip, lr]
   13f50:	mov	sl, #0
   13f54:	subs	r4, r0, #0
   13f58:	ldr	r3, [r5]
   13f5c:	mov	r7, r1
   13f60:	str	sl, [sp]
   13f64:	mov	r1, ip
   13f68:	str	r3, [sp, #4]
   13f6c:	beq	13fe0 <__assert_fail@plt+0x2d70>
   13f70:	str	r9, [r7]
   13f74:	str	r9, [r2]
   13f78:	mov	r6, r2
   13f7c:	bl	11150 <__errno_location@plt>
   13f80:	str	sl, [r0]
   13f84:	ldrsb	r3, [r4]
   13f88:	mov	r8, r0
   13f8c:	cmp	r3, #58	; 0x3a
   13f90:	beq	13ffc <__assert_fail@plt+0x2d8c>
   13f94:	mov	sl, sp
   13f98:	mov	r1, sl
   13f9c:	mov	r2, #10
   13fa0:	mov	r0, r4
   13fa4:	bl	10fc4 <strtol@plt>
   13fa8:	str	r0, [r7]
   13fac:	str	r0, [r6]
   13fb0:	ldr	r0, [r8]
   13fb4:	cmp	r0, #0
   13fb8:	bne	1404c <__assert_fail@plt+0x2ddc>
   13fbc:	ldr	r2, [sp]
   13fc0:	cmp	r2, #0
   13fc4:	cmpne	r2, r4
   13fc8:	beq	1404c <__assert_fail@plt+0x2ddc>
   13fcc:	ldrsb	r3, [r2]
   13fd0:	cmp	r3, #58	; 0x3a
   13fd4:	beq	14054 <__assert_fail@plt+0x2de4>
   13fd8:	cmp	r3, #45	; 0x2d
   13fdc:	beq	14064 <__assert_fail@plt+0x2df4>
   13fe0:	mov	r0, #0
   13fe4:	ldr	r2, [sp, #4]
   13fe8:	ldr	r3, [r5]
   13fec:	cmp	r2, r3
   13ff0:	bne	140c4 <__assert_fail@plt+0x2e54>
   13ff4:	add	sp, sp, #8
   13ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ffc:	add	r4, r4, #1
   14000:	mov	r0, r4
   14004:	mov	r2, #10
   14008:	mov	r1, sp
   1400c:	bl	10fc4 <strtol@plt>
   14010:	str	r0, [r6]
   14014:	ldr	r3, [r8]
   14018:	cmp	r3, #0
   1401c:	bne	1404c <__assert_fail@plt+0x2ddc>
   14020:	ldr	r3, [sp]
   14024:	cmp	r3, #0
   14028:	beq	1404c <__assert_fail@plt+0x2ddc>
   1402c:	ldrsb	r2, [r3]
   14030:	sub	r3, r3, r4
   14034:	clz	r3, r3
   14038:	cmp	r2, #0
   1403c:	lsr	r3, r3, #5
   14040:	movne	r3, #1
   14044:	cmp	r3, #0
   14048:	beq	13fe0 <__assert_fail@plt+0x2d70>
   1404c:	mvn	r0, #0
   14050:	b	13fe4 <__assert_fail@plt+0x2d74>
   14054:	ldrsb	r3, [r2, #1]
   14058:	cmp	r3, #0
   1405c:	streq	r9, [r6]
   14060:	beq	13fe4 <__assert_fail@plt+0x2d74>
   14064:	mov	r3, #0
   14068:	add	r4, r2, #1
   1406c:	str	r3, [r8]
   14070:	mov	r1, sl
   14074:	mov	r0, r4
   14078:	mov	r2, #10
   1407c:	str	r3, [sp]
   14080:	bl	10fc4 <strtol@plt>
   14084:	str	r0, [r6]
   14088:	ldr	r3, [r8]
   1408c:	cmp	r3, #0
   14090:	bne	1404c <__assert_fail@plt+0x2ddc>
   14094:	ldr	r2, [sp]
   14098:	cmp	r2, #0
   1409c:	beq	1404c <__assert_fail@plt+0x2ddc>
   140a0:	ldrsb	r3, [r2]
   140a4:	sub	r2, r2, r4
   140a8:	clz	r2, r2
   140ac:	cmp	r3, #0
   140b0:	lsr	r2, r2, #5
   140b4:	movne	r2, #1
   140b8:	cmp	r2, #0
   140bc:	beq	13fe0 <__assert_fail@plt+0x2d70>
   140c0:	b	1404c <__assert_fail@plt+0x2ddc>
   140c4:	bl	1106c <__stack_chk_fail@plt>
   140c8:			; <UNDEFINED> instruction: 0x00011fb0
   140cc:	andeq	r0, r0, r4, lsl #2
   140d0:	ldr	r3, [pc, #244]	; 141cc <__assert_fail@plt+0x2f5c>
   140d4:	ldr	r2, [pc, #244]	; 141d0 <__assert_fail@plt+0x2f60>
   140d8:	add	r3, pc, r3
   140dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   140e0:	sub	sp, sp, #20
   140e4:	ldr	r9, [r3, r2]
   140e8:	cmp	r0, #0
   140ec:	cmpne	r1, #0
   140f0:	ldr	r3, [r9]
   140f4:	str	r3, [sp, #12]
   140f8:	beq	141c0 <__assert_fail@plt+0x2f50>
   140fc:	mov	r4, r1
   14100:	add	r8, sp, #4
   14104:	add	r7, sp, #8
   14108:	b	14148 <__assert_fail@plt+0x2ed8>
   1410c:	cmp	r4, r3
   14110:	bne	141c0 <__assert_fail@plt+0x2f50>
   14114:	mov	r2, r4
   14118:	mov	r1, r6
   1411c:	mov	r0, r5
   14120:	bl	11234 <strncmp@plt>
   14124:	cmp	r0, #0
   14128:	bne	141c0 <__assert_fail@plt+0x2f50>
   1412c:	adds	r0, r5, r4
   14130:	moveq	r3, #0
   14134:	movne	r3, #1
   14138:	adds	r4, r6, r4
   1413c:	moveq	r3, #0
   14140:	cmp	r3, #0
   14144:	beq	141c0 <__assert_fail@plt+0x2f50>
   14148:	mov	r1, r8
   1414c:	bl	12550 <__assert_fail@plt+0x12e0>
   14150:	mov	r1, r7
   14154:	mov	r5, r0
   14158:	mov	r0, r4
   1415c:	bl	12550 <__assert_fail@plt+0x12e0>
   14160:	ldr	r4, [sp, #4]
   14164:	ldr	r3, [sp, #8]
   14168:	mov	r6, r0
   1416c:	adds	r0, r4, r3
   14170:	beq	141a4 <__assert_fail@plt+0x2f34>
   14174:	cmp	r0, #1
   14178:	bne	1410c <__assert_fail@plt+0x2e9c>
   1417c:	cmp	r5, #0
   14180:	beq	14190 <__assert_fail@plt+0x2f20>
   14184:	ldrsb	r2, [r5]
   14188:	cmp	r2, #47	; 0x2f
   1418c:	beq	141a8 <__assert_fail@plt+0x2f38>
   14190:	cmp	r6, #0
   14194:	beq	1410c <__assert_fail@plt+0x2e9c>
   14198:	ldrsb	r2, [r6]
   1419c:	cmp	r2, #47	; 0x2f
   141a0:	bne	1410c <__assert_fail@plt+0x2e9c>
   141a4:	mov	r0, #1
   141a8:	ldr	r2, [sp, #12]
   141ac:	ldr	r3, [r9]
   141b0:	cmp	r2, r3
   141b4:	bne	141c8 <__assert_fail@plt+0x2f58>
   141b8:	add	sp, sp, #20
   141bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   141c0:	mov	r0, #0
   141c4:	b	141a8 <__assert_fail@plt+0x2f38>
   141c8:	bl	1106c <__stack_chk_fail@plt>
   141cc:	andeq	r1, r1, r4, lsl lr
   141d0:	andeq	r0, r0, r4, lsl #2
   141d4:	orrs	r3, r0, r1
   141d8:	beq	14254 <__assert_fail@plt+0x2fe4>
   141dc:	cmp	r0, #0
   141e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141e4:	mov	r4, r1
   141e8:	mov	r5, r0
   141ec:	beq	14260 <__assert_fail@plt+0x2ff0>
   141f0:	cmp	r1, #0
   141f4:	beq	14270 <__assert_fail@plt+0x3000>
   141f8:	mov	r6, r2
   141fc:	bl	1112c <strlen@plt>
   14200:	mvn	r3, r0
   14204:	cmp	r6, r3
   14208:	mov	r7, r0
   1420c:	movhi	r8, #0
   14210:	bhi	1424c <__assert_fail@plt+0x2fdc>
   14214:	add	r9, r6, r0
   14218:	add	r0, r9, #1
   1421c:	bl	110b4 <malloc@plt>
   14220:	subs	r8, r0, #0
   14224:	beq	1424c <__assert_fail@plt+0x2fdc>
   14228:	mov	r1, r5
   1422c:	mov	r2, r7
   14230:	bl	11030 <memcpy@plt>
   14234:	mov	r2, r6
   14238:	mov	r1, r4
   1423c:	add	r0, r8, r7
   14240:	bl	11030 <memcpy@plt>
   14244:	mov	r3, #0
   14248:	strb	r3, [r8, r9]
   1424c:	mov	r0, r8
   14250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14254:	ldr	r0, [pc, #28]	; 14278 <__assert_fail@plt+0x3008>
   14258:	add	r0, pc, r0
   1425c:	b	11060 <strdup@plt>
   14260:	mov	r0, r4
   14264:	mov	r1, r2
   14268:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1426c:	b	11018 <strndup@plt>
   14270:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14274:	b	11060 <strdup@plt>
   14278:	andeq	r0, r0, r0, asr #15
   1427c:	push	{r4, r5, r6, lr}
   14280:	subs	r4, r1, #0
   14284:	mov	r5, r0
   14288:	moveq	r2, r4
   1428c:	beq	1429c <__assert_fail@plt+0x302c>
   14290:	mov	r0, r4
   14294:	bl	1112c <strlen@plt>
   14298:	mov	r2, r0
   1429c:	mov	r1, r4
   142a0:	mov	r0, r5
   142a4:	pop	{r4, r5, r6, lr}
   142a8:	b	141d4 <__assert_fail@plt+0x2f64>
   142ac:	push	{r1, r2, r3}
   142b0:	ldr	r1, [pc, #132]	; 1433c <__assert_fail@plt+0x30cc>
   142b4:	ldr	r3, [pc, #132]	; 14340 <__assert_fail@plt+0x30d0>
   142b8:	add	r1, pc, r1
   142bc:	push	{r4, r5, lr}
   142c0:	mov	r5, r0
   142c4:	ldr	r4, [r1, r3]
   142c8:	sub	sp, sp, #16
   142cc:	add	ip, sp, #32
   142d0:	ldr	r0, [r4]
   142d4:	ldr	r2, [sp, #28]
   142d8:	str	r0, [sp, #12]
   142dc:	mov	r3, ip
   142e0:	add	r0, sp, #8
   142e4:	mov	r1, #1
   142e8:	str	ip, [sp, #4]
   142ec:	bl	11174 <__vasprintf_chk@plt>
   142f0:	subs	r2, r0, #0
   142f4:	movlt	r5, #0
   142f8:	blt	14314 <__assert_fail@plt+0x30a4>
   142fc:	mov	r0, r5
   14300:	ldr	r1, [sp, #8]
   14304:	bl	141d4 <__assert_fail@plt+0x2f64>
   14308:	mov	r5, r0
   1430c:	ldr	r0, [sp, #8]
   14310:	bl	10ff4 <free@plt>
   14314:	ldr	r2, [sp, #12]
   14318:	ldr	r3, [r4]
   1431c:	mov	r0, r5
   14320:	cmp	r2, r3
   14324:	bne	14338 <__assert_fail@plt+0x30c8>
   14328:	add	sp, sp, #16
   1432c:	pop	{r4, r5, lr}
   14330:	add	sp, sp, #12
   14334:	bx	lr
   14338:	bl	1106c <__stack_chk_fail@plt>
   1433c:	andeq	r1, r1, r4, lsr ip
   14340:	andeq	r0, r0, r4, lsl #2
   14344:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14348:	mov	r6, r0
   1434c:	ldr	r0, [pc, #348]	; 144b0 <__assert_fail@plt+0x3240>
   14350:	ldr	ip, [pc, #348]	; 144b4 <__assert_fail@plt+0x3244>
   14354:	add	r0, pc, r0
   14358:	ldr	r5, [r6]
   1435c:	ldr	r8, [r0, ip]
   14360:	sub	sp, sp, #8
   14364:	ldrsb	r4, [r5]
   14368:	mov	r9, r2
   1436c:	ldr	r2, [r8]
   14370:	cmp	r4, #0
   14374:	mov	r7, r1
   14378:	str	r2, [sp, #4]
   1437c:	mov	r1, r0
   14380:	beq	14430 <__assert_fail@plt+0x31c0>
   14384:	mov	r0, r5
   14388:	mov	r1, r9
   1438c:	mov	sl, r3
   14390:	bl	11264 <strspn@plt>
   14394:	add	r4, r5, r0
   14398:	ldrsb	r5, [r5, r0]
   1439c:	cmp	r5, #0
   143a0:	beq	14498 <__assert_fail@plt+0x3228>
   143a4:	cmp	sl, #0
   143a8:	beq	1444c <__assert_fail@plt+0x31dc>
   143ac:	ldr	r0, [pc, #260]	; 144b8 <__assert_fail@plt+0x3248>
   143b0:	mov	r1, r5
   143b4:	add	r0, pc, r0
   143b8:	bl	11138 <strchr@plt>
   143bc:	cmp	r0, #0
   143c0:	beq	14468 <__assert_fail@plt+0x31f8>
   143c4:	add	sl, r4, #1
   143c8:	mov	r3, #0
   143cc:	mov	r0, sl
   143d0:	mov	r1, sp
   143d4:	strb	r5, [sp]
   143d8:	strb	r3, [sp, #1]
   143dc:	bl	125f0 <__assert_fail@plt+0x1380>
   143e0:	add	r3, r4, r0
   143e4:	str	r0, [r7]
   143e8:	ldrsb	r3, [r3, #1]
   143ec:	subs	r5, r5, r3
   143f0:	movne	r5, #1
   143f4:	cmp	r3, #0
   143f8:	moveq	r5, #1
   143fc:	cmp	r5, #0
   14400:	bne	14498 <__assert_fail@plt+0x3228>
   14404:	add	r0, r0, #2
   14408:	add	r5, r4, r0
   1440c:	ldrsb	r1, [r4, r0]
   14410:	cmp	r1, #0
   14414:	beq	14428 <__assert_fail@plt+0x31b8>
   14418:	mov	r0, r9
   1441c:	bl	11138 <strchr@plt>
   14420:	cmp	r0, #0
   14424:	beq	14498 <__assert_fail@plt+0x3228>
   14428:	mov	r4, sl
   1442c:	str	r5, [r6]
   14430:	ldr	r2, [sp, #4]
   14434:	ldr	r3, [r8]
   14438:	mov	r0, r4
   1443c:	cmp	r2, r3
   14440:	bne	144ac <__assert_fail@plt+0x323c>
   14444:	add	sp, sp, #8
   14448:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1444c:	mov	r1, r9
   14450:	mov	r0, r4
   14454:	bl	10fd0 <strcspn@plt>
   14458:	add	r3, r4, r0
   1445c:	str	r0, [r7]
   14460:	str	r3, [r6]
   14464:	b	14430 <__assert_fail@plt+0x31c0>
   14468:	mov	r1, r9
   1446c:	mov	r0, r4
   14470:	bl	125f0 <__assert_fail@plt+0x1380>
   14474:	str	r0, [r7]
   14478:	ldrsb	r1, [r4, r0]
   1447c:	add	r5, r4, r0
   14480:	cmp	r1, #0
   14484:	beq	144a4 <__assert_fail@plt+0x3234>
   14488:	mov	r0, r9
   1448c:	bl	11138 <strchr@plt>
   14490:	cmp	r0, #0
   14494:	bne	144a4 <__assert_fail@plt+0x3234>
   14498:	str	r4, [r6]
   1449c:	mov	r4, #0
   144a0:	b	14430 <__assert_fail@plt+0x31c0>
   144a4:	str	r5, [r6]
   144a8:	b	14430 <__assert_fail@plt+0x31c0>
   144ac:	bl	1106c <__stack_chk_fail@plt>
   144b0:	muleq	r1, r8, fp
   144b4:	andeq	r0, r0, r4, lsl #2
   144b8:	andeq	r1, r0, r4, asr r2
   144bc:	push	{r4, lr}
   144c0:	mov	r4, r0
   144c4:	b	144d0 <__assert_fail@plt+0x3260>
   144c8:	cmp	r0, #10
   144cc:	beq	144e8 <__assert_fail@plt+0x3278>
   144d0:	mov	r0, r4
   144d4:	bl	1118c <fgetc@plt>
   144d8:	cmn	r0, #1
   144dc:	bne	144c8 <__assert_fail@plt+0x3258>
   144e0:	mov	r0, #1
   144e4:	pop	{r4, pc}
   144e8:	mov	r0, #0
   144ec:	pop	{r4, pc}
   144f0:	cmp	r3, #0
   144f4:	cmpeq	r2, #0
   144f8:	bne	14510 <__assert_fail@plt+0x32a0>
   144fc:	cmp	r1, #0
   14500:	cmpeq	r0, #0
   14504:	mvnne	r1, #0
   14508:	mvnne	r0, #0
   1450c:	b	1452c <__assert_fail@plt+0x32bc>
   14510:	sub	sp, sp, #8
   14514:	push	{sp, lr}
   14518:	bl	1453c <__assert_fail@plt+0x32cc>
   1451c:	ldr	lr, [sp, #4]
   14520:	add	sp, sp, #8
   14524:	pop	{r2, r3}
   14528:	bx	lr
   1452c:	push	{r1, lr}
   14530:	mov	r0, #8
   14534:	bl	10fa0 <raise@plt>
   14538:	pop	{r1, pc}
   1453c:	cmp	r1, r3
   14540:	cmpeq	r0, r2
   14544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14548:	mov	r4, r0
   1454c:	movcc	r0, #0
   14550:	mov	r5, r1
   14554:	ldr	lr, [sp, #36]	; 0x24
   14558:	movcc	r1, r0
   1455c:	bcc	14658 <__assert_fail@plt+0x33e8>
   14560:	cmp	r3, #0
   14564:	clzeq	ip, r2
   14568:	clzne	ip, r3
   1456c:	addeq	ip, ip, #32
   14570:	cmp	r5, #0
   14574:	clzeq	r1, r4
   14578:	addeq	r1, r1, #32
   1457c:	clzne	r1, r5
   14580:	sub	ip, ip, r1
   14584:	sub	sl, ip, #32
   14588:	lsl	r9, r3, ip
   1458c:	rsb	fp, ip, #32
   14590:	orr	r9, r9, r2, lsl sl
   14594:	orr	r9, r9, r2, lsr fp
   14598:	lsl	r8, r2, ip
   1459c:	cmp	r5, r9
   145a0:	cmpeq	r4, r8
   145a4:	movcc	r0, #0
   145a8:	movcc	r1, r0
   145ac:	bcc	145c8 <__assert_fail@plt+0x3358>
   145b0:	mov	r0, #1
   145b4:	subs	r4, r4, r8
   145b8:	lsl	r1, r0, sl
   145bc:	orr	r1, r1, r0, lsr fp
   145c0:	lsl	r0, r0, ip
   145c4:	sbc	r5, r5, r9
   145c8:	cmp	ip, #0
   145cc:	beq	14658 <__assert_fail@plt+0x33e8>
   145d0:	lsr	r6, r8, #1
   145d4:	orr	r6, r6, r9, lsl #31
   145d8:	lsr	r7, r9, #1
   145dc:	mov	r2, ip
   145e0:	b	14604 <__assert_fail@plt+0x3394>
   145e4:	subs	r3, r4, r6
   145e8:	sbc	r8, r5, r7
   145ec:	adds	r3, r3, r3
   145f0:	adc	r8, r8, r8
   145f4:	adds	r4, r3, #1
   145f8:	adc	r5, r8, #0
   145fc:	subs	r2, r2, #1
   14600:	beq	14620 <__assert_fail@plt+0x33b0>
   14604:	cmp	r5, r7
   14608:	cmpeq	r4, r6
   1460c:	bcs	145e4 <__assert_fail@plt+0x3374>
   14610:	adds	r4, r4, r4
   14614:	adc	r5, r5, r5
   14618:	subs	r2, r2, #1
   1461c:	bne	14604 <__assert_fail@plt+0x3394>
   14620:	lsr	r3, r4, ip
   14624:	orr	r3, r3, r5, lsl fp
   14628:	lsr	r2, r5, ip
   1462c:	orr	r3, r3, r5, lsr sl
   14630:	adds	r0, r0, r4
   14634:	mov	r4, r3
   14638:	lsl	r3, r2, ip
   1463c:	orr	r3, r3, r4, lsl sl
   14640:	lsl	ip, r4, ip
   14644:	orr	r3, r3, r4, lsr fp
   14648:	adc	r1, r1, r5
   1464c:	subs	r0, r0, ip
   14650:	mov	r5, r2
   14654:	sbc	r1, r1, r3
   14658:	cmp	lr, #0
   1465c:	strdne	r4, [lr]
   14660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14664:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14668:	mov	r7, r0
   1466c:	ldr	r6, [pc, #72]	; 146bc <__assert_fail@plt+0x344c>
   14670:	ldr	r5, [pc, #72]	; 146c0 <__assert_fail@plt+0x3450>
   14674:	add	r6, pc, r6
   14678:	add	r5, pc, r5
   1467c:	sub	r6, r6, r5
   14680:	mov	r8, r1
   14684:	mov	r9, r2
   14688:	bl	10f74 <calloc@plt-0x20>
   1468c:	asrs	r6, r6, #2
   14690:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14694:	mov	r4, #0
   14698:	add	r4, r4, #1
   1469c:	ldr	r3, [r5], #4
   146a0:	mov	r2, r9
   146a4:	mov	r1, r8
   146a8:	mov	r0, r7
   146ac:	blx	r3
   146b0:	cmp	r6, r4
   146b4:	bne	14698 <__assert_fail@plt+0x3428>
   146b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146bc:	andeq	r1, r1, r8, ror #14
   146c0:	andeq	r1, r1, r0, ror #14
   146c4:	bx	lr
   146c8:	ldr	r3, [pc, #12]	; 146dc <__assert_fail@plt+0x346c>
   146cc:	mov	r1, #0
   146d0:	add	r3, pc, r3
   146d4:	ldr	r2, [r3]
   146d8:	b	11168 <__cxa_atexit@plt>
   146dc:	andeq	r1, r1, ip, lsr #18

Disassembly of section .fini:

000146e0 <.fini>:
   146e0:	push	{r3, lr}
   146e4:	pop	{r3, pc}
