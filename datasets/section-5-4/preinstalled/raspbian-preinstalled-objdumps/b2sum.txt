
raspbian-preinstalled/b2sum:     file format elf32-littlearm


Disassembly of section .init:

00010eec <.init>:
   10eec:	push	{r3, lr}
   10ef0:	bl	12768 <__assert_fail@plt+0x1580>
   10ef4:	pop	{r3, pc}

Disassembly of section .plt:

00010ef8 <fdopen@plt-0x14>:
   10ef8:	push	{lr}		; (str lr, [sp, #-4]!)
   10efc:	ldr	lr, [pc, #4]	; 10f08 <fdopen@plt-0x4>
   10f00:	add	lr, pc, lr
   10f04:	ldr	pc, [lr, #8]!
   10f08:	strdeq	lr, [r1], -r8

00010f0c <fdopen@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #122880	; 0x1e000
   10f14:	ldr	pc, [ip, #248]!	; 0xf8

00010f18 <calloc@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #122880	; 0x1e000
   10f20:	ldr	pc, [ip, #240]!	; 0xf0

00010f24 <fputs_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #122880	; 0x1e000
   10f2c:	ldr	pc, [ip, #232]!	; 0xe8

00010f30 <raise@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #122880	; 0x1e000
   10f38:	ldr	pc, [ip, #224]!	; 0xe0

00010f3c <__getdelim@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #122880	; 0x1e000
   10f44:	ldr	pc, [ip, #216]!	; 0xd8

00010f48 <strcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #122880	; 0x1e000
   10f50:	ldr	pc, [ip, #208]!	; 0xd0

00010f54 <posix_fadvise64@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #122880	; 0x1e000
   10f5c:	ldr	pc, [ip, #200]!	; 0xc8

00010f60 <fflush@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #122880	; 0x1e000
   10f68:	ldr	pc, [ip, #192]!	; 0xc0

00010f6c <free@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #122880	; 0x1e000
   10f74:	ldr	pc, [ip, #184]!	; 0xb8

00010f78 <ferror@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #122880	; 0x1e000
   10f80:	ldr	pc, [ip, #176]!	; 0xb0

00010f84 <_exit@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #122880	; 0x1e000
   10f8c:	ldr	pc, [ip, #168]!	; 0xa8

00010f90 <memcpy@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #122880	; 0x1e000
   10f98:	ldr	pc, [ip, #160]!	; 0xa0

00010f9c <__strtoull_internal@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #122880	; 0x1e000
   10fa4:	ldr	pc, [ip, #152]!	; 0x98

00010fa8 <mbsinit@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #122880	; 0x1e000
   10fb0:	ldr	pc, [ip, #144]!	; 0x90

00010fb4 <fwrite_unlocked@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #122880	; 0x1e000
   10fbc:	ldr	pc, [ip, #136]!	; 0x88

00010fc0 <memcmp@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #122880	; 0x1e000
   10fc8:	ldr	pc, [ip, #128]!	; 0x80

00010fcc <dcgettext@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #122880	; 0x1e000
   10fd4:	ldr	pc, [ip, #120]!	; 0x78

00010fd8 <__stack_chk_fail@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #122880	; 0x1e000
   10fe0:	ldr	pc, [ip, #112]!	; 0x70

00010fe4 <realloc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #122880	; 0x1e000
   10fec:	ldr	pc, [ip, #104]!	; 0x68

00010ff0 <textdomain@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #122880	; 0x1e000
   10ff8:	ldr	pc, [ip, #96]!	; 0x60

00010ffc <iswprint@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #122880	; 0x1e000
   11004:	ldr	pc, [ip, #88]!	; 0x58

00011008 <__memcpy_chk@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #122880	; 0x1e000
   11010:	ldr	pc, [ip, #80]!	; 0x50

00011014 <fwrite@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #122880	; 0x1e000
   1101c:	ldr	pc, [ip, #72]!	; 0x48

00011020 <lseek64@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #122880	; 0x1e000
   11028:	ldr	pc, [ip, #64]!	; 0x40

0001102c <__ctype_get_mb_cur_max@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #122880	; 0x1e000
   11034:	ldr	pc, [ip, #56]!	; 0x38

00011038 <fread@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #122880	; 0x1e000
   11040:	ldr	pc, [ip, #48]!	; 0x30

00011044 <__fpending@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #122880	; 0x1e000
   1104c:	ldr	pc, [ip, #40]!	; 0x28

00011050 <mbrtowc@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #122880	; 0x1e000
   11058:	ldr	pc, [ip, #32]!

0001105c <error@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #122880	; 0x1e000
   11064:	ldr	pc, [ip, #24]!

00011068 <malloc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #122880	; 0x1e000
   11070:	ldr	pc, [ip, #16]!

00011074 <__libc_start_main@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #122880	; 0x1e000
   1107c:	ldr	pc, [ip, #8]!

00011080 <__freading@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #122880	; 0x1e000
   11088:	ldr	pc, [ip, #0]!

0001108c <__ctype_tolower_loc@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #118784	; 0x1d000
   11094:	ldr	pc, [ip, #4088]!	; 0xff8

00011098 <__gmon_start__@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #118784	; 0x1d000
   110a0:	ldr	pc, [ip, #4080]!	; 0xff0

000110a4 <getopt_long@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #118784	; 0x1d000
   110ac:	ldr	pc, [ip, #4072]!	; 0xfe8

000110b0 <__ctype_b_loc@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #118784	; 0x1d000
   110b8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110bc <exit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #118784	; 0x1d000
   110c4:	ldr	pc, [ip, #4056]!	; 0xfd8

000110c8 <feof@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #118784	; 0x1d000
   110d0:	ldr	pc, [ip, #4048]!	; 0xfd0

000110d4 <strtoul@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #118784	; 0x1d000
   110dc:	ldr	pc, [ip, #4040]!	; 0xfc8

000110e0 <strlen@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #118784	; 0x1d000
   110e8:	ldr	pc, [ip, #4032]!	; 0xfc0

000110ec <strchr@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #118784	; 0x1d000
   110f4:	ldr	pc, [ip, #4024]!	; 0xfb8

000110f8 <__errno_location@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #118784	; 0x1d000
   11100:	ldr	pc, [ip, #4016]!	; 0xfb0

00011104 <__cxa_atexit@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #118784	; 0x1d000
   1110c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011110 <setvbuf@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #118784	; 0x1d000
   11118:	ldr	pc, [ip, #4000]!	; 0xfa0

0001111c <memset@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #118784	; 0x1d000
   11124:	ldr	pc, [ip, #3992]!	; 0xf98

00011128 <__printf_chk@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #118784	; 0x1d000
   11130:	ldr	pc, [ip, #3984]!	; 0xf90

00011134 <fileno@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #118784	; 0x1d000
   1113c:	ldr	pc, [ip, #3976]!	; 0xf88

00011140 <__fprintf_chk@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #118784	; 0x1d000
   11148:	ldr	pc, [ip, #3968]!	; 0xf80

0001114c <fclose@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #118784	; 0x1d000
   11154:	ldr	pc, [ip, #3960]!	; 0xf78

00011158 <fseeko64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #118784	; 0x1d000
   11160:	ldr	pc, [ip, #3952]!	; 0xf70

00011164 <fcntl64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #118784	; 0x1d000
   1116c:	ldr	pc, [ip, #3944]!	; 0xf68

00011170 <__overflow@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #118784	; 0x1d000
   11178:	ldr	pc, [ip, #3936]!	; 0xf60

0001117c <setlocale@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #118784	; 0x1d000
   11184:	ldr	pc, [ip, #3928]!	; 0xf58

00011188 <strrchr@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #118784	; 0x1d000
   11190:	ldr	pc, [ip, #3920]!	; 0xf50

00011194 <nl_langinfo@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #118784	; 0x1d000
   1119c:	ldr	pc, [ip, #3912]!	; 0xf48

000111a0 <fopen64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #118784	; 0x1d000
   111a8:	ldr	pc, [ip, #3904]!	; 0xf40

000111ac <bindtextdomain@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #118784	; 0x1d000
   111b4:	ldr	pc, [ip, #3896]!	; 0xf38

000111b8 <strncmp@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #118784	; 0x1d000
   111c0:	ldr	pc, [ip, #3888]!	; 0xf30

000111c4 <abort@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #118784	; 0x1d000
   111cc:	ldr	pc, [ip, #3880]!	; 0xf28

000111d0 <close@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #118784	; 0x1d000
   111d8:	ldr	pc, [ip, #3872]!	; 0xf20

000111dc <dcngettext@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #118784	; 0x1d000
   111e4:	ldr	pc, [ip, #3864]!	; 0xf18

000111e8 <__assert_fail@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #118784	; 0x1d000
   111f0:	ldr	pc, [ip, #3856]!	; 0xf10

Disassembly of section .text:

000111f8 <.text>:
   111f8:	ldr	r3, [pc, #3996]	; 1219c <__assert_fail@plt+0xfb4>
   111fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11200:	sub	sp, sp, #284	; 0x11c
   11204:	ldr	r3, [r3]
   11208:	mov	r8, r0
   1120c:	ldr	r0, [r1]
   11210:	str	r3, [sp, #276]	; 0x114
   11214:	mov	r6, r1
   11218:	bl	1895c <__assert_fail@plt+0x7774>
   1121c:	ldr	r1, [pc, #3964]	; 121a0 <__assert_fail@plt+0xfb8>
   11220:	mov	r0, #6
   11224:	bl	1117c <setlocale@plt>
   11228:	ldr	r1, [pc, #3956]	; 121a4 <__assert_fail@plt+0xfbc>
   1122c:	ldr	r0, [pc, #3956]	; 121a8 <__assert_fail@plt+0xfc0>
   11230:	bl	111ac <bindtextdomain@plt>
   11234:	ldr	r0, [pc, #3948]	; 121a8 <__assert_fail@plt+0xfc0>
   11238:	bl	10ff0 <textdomain@plt>
   1123c:	ldr	r0, [pc, #3944]	; 121ac <__assert_fail@plt+0xfc4>
   11240:	bl	1cdb4 <__assert_fail@plt+0xbbcc>
   11244:	ldr	r2, [pc, #3940]	; 121b0 <__assert_fail@plt+0xfc8>
   11248:	mov	r3, #0
   1124c:	mov	r1, r3
   11250:	ldr	r0, [r2]
   11254:	mov	r2, #1
   11258:	mov	r4, r3
   1125c:	str	r3, [sp, #48]	; 0x30
   11260:	bl	11110 <setvbuf@plt>
   11264:	ldr	r3, [pc, #3912]	; 121b4 <__assert_fail@plt+0xfcc>
   11268:	ldr	fp, [pc, #3888]	; 121a0 <__assert_fail@plt+0xfb8>
   1126c:	ldr	r9, [pc, #3908]	; 121b8 <__assert_fail@plt+0xfd0>
   11270:	ldr	r7, [pc, #3908]	; 121bc <__assert_fail@plt+0xfd4>
   11274:	add	sl, r3, #56	; 0x38
   11278:	mvn	r5, #0
   1127c:	str	r4, [sp, #36]	; 0x24
   11280:	mov	r4, #0
   11284:	str	r4, [sp]
   11288:	mov	r3, sl
   1128c:	mov	r2, r9
   11290:	mov	r1, r6
   11294:	mov	r0, r8
   11298:	bl	110a4 <getopt_long@plt>
   1129c:	cmn	r0, #1
   112a0:	beq	11498 <__assert_fail@plt+0x2b0>
   112a4:	cmp	r0, #119	; 0x77
   112a8:	beq	113bc <__assert_fail@plt+0x1d4>
   112ac:	ble	112e4 <__assert_fail@plt+0xfc>
   112b0:	ldr	r3, [pc, #3848]	; 121c0 <__assert_fail@plt+0xfd8>
   112b4:	cmp	r0, r3
   112b8:	beq	113dc <__assert_fail@plt+0x1f4>
   112bc:	ble	11320 <__assert_fail@plt+0x138>
   112c0:	ldr	r3, [pc, #3836]	; 121c4 <__assert_fail@plt+0xfdc>
   112c4:	cmp	r0, r3
   112c8:	beq	113d0 <__assert_fail@plt+0x1e8>
   112cc:	bge	11308 <__assert_fail@plt+0x120>
   112d0:	mov	r3, #1
   112d4:	strb	r4, [r7, #17]
   112d8:	strb	r4, [r7, #18]
   112dc:	strb	r3, [r7, #19]
   112e0:	b	11280 <__assert_fail@plt+0x98>
   112e4:	cmp	r0, #98	; 0x62
   112e8:	beq	113b4 <__assert_fail@plt+0x1cc>
   112ec:	ble	11344 <__assert_fail@plt+0x15c>
   112f0:	cmp	r0, #108	; 0x6c
   112f4:	beq	113f0 <__assert_fail@plt+0x208>
   112f8:	cmp	r0, #116	; 0x74
   112fc:	bne	11334 <__assert_fail@plt+0x14c>
   11300:	mov	r5, r4
   11304:	b	11280 <__assert_fail@plt+0x98>
   11308:	cmp	r0, #260	; 0x104
   1130c:	bne	1133c <__assert_fail@plt+0x154>
   11310:	mov	r3, #1
   11314:	str	r3, [sp, #48]	; 0x30
   11318:	mov	r5, r3
   1131c:	b	11280 <__assert_fail@plt+0x98>
   11320:	cmp	r0, #122	; 0x7a
   11324:	bne	11384 <__assert_fail@plt+0x19c>
   11328:	ldr	r3, [pc, #3736]	; 121c8 <__assert_fail@plt+0xfe0>
   1132c:	strb	r4, [r3]
   11330:	b	11280 <__assert_fail@plt+0x98>
   11334:	cmp	r0, #99	; 0x63
   11338:	beq	113a8 <__assert_fail@plt+0x1c0>
   1133c:	mov	r0, #1
   11340:	bl	12b84 <__assert_fail@plt+0x199c>
   11344:	cmn	r0, #3
   11348:	bne	11398 <__assert_fail@plt+0x1b0>
   1134c:	ldr	r3, [pc, #3704]	; 121cc <__assert_fail@plt+0xfe4>
   11350:	ldr	r0, [pc, #3672]	; 121b0 <__assert_fail@plt+0xfc8>
   11354:	ldr	r1, [pc, #3700]	; 121d0 <__assert_fail@plt+0xfe8>
   11358:	ldr	r2, [pc, #3700]	; 121d4 <__assert_fail@plt+0xfec>
   1135c:	str	r4, [sp, #8]
   11360:	ldr	r0, [r0]
   11364:	ldr	r3, [r3]
   11368:	str	r1, [sp, #4]
   1136c:	str	r2, [sp]
   11370:	ldr	r1, [pc, #3680]	; 121d8 <__assert_fail@plt+0xff0>
   11374:	ldr	r2, [pc, #3680]	; 121dc <__assert_fail@plt+0xff4>
   11378:	bl	1b038 <__assert_fail@plt+0x9e50>
   1137c:	mov	r0, r4
   11380:	bl	110bc <exit@plt>
   11384:	cmp	r0, #256	; 0x100
   11388:	bne	1133c <__assert_fail@plt+0x154>
   1138c:	mov	r3, #1
   11390:	strb	r3, [r7, #16]
   11394:	b	11280 <__assert_fail@plt+0x98>
   11398:	cmn	r0, #2
   1139c:	bne	1133c <__assert_fail@plt+0x154>
   113a0:	mov	r0, r4
   113a4:	bl	12b84 <__assert_fail@plt+0x199c>
   113a8:	mov	r3, #1
   113ac:	str	r3, [sp, #36]	; 0x24
   113b0:	b	11280 <__assert_fail@plt+0x98>
   113b4:	mov	r5, #1
   113b8:	b	11280 <__assert_fail@plt+0x98>
   113bc:	mov	r3, #1
   113c0:	strb	r4, [r7, #17]
   113c4:	strb	r4, [r7, #19]
   113c8:	strb	r3, [r7, #18]
   113cc:	b	11280 <__assert_fail@plt+0x98>
   113d0:	mov	r3, #1
   113d4:	strb	r3, [r7, #20]
   113d8:	b	11280 <__assert_fail@plt+0x98>
   113dc:	mov	r3, #1
   113e0:	strb	r4, [r7, #18]
   113e4:	strb	r4, [r7, #19]
   113e8:	strb	r3, [r7, #17]
   113ec:	b	11280 <__assert_fail@plt+0x98>
   113f0:	ldr	r3, [pc, #3560]	; 121e0 <__assert_fail@plt+0xff8>
   113f4:	mov	r2, #5
   113f8:	ldr	r1, [pc, #3556]	; 121e4 <__assert_fail@plt+0xffc>
   113fc:	mov	r0, r4
   11400:	ldr	fp, [r3]
   11404:	bl	10fcc <dcgettext@plt>
   11408:	mvn	r2, #0
   1140c:	mvn	r3, #0
   11410:	ldr	r1, [pc, #3464]	; 121a0 <__assert_fail@plt+0xfb8>
   11414:	strd	r2, [sp]
   11418:	str	r4, [sp, #16]
   1141c:	mov	r2, #0
   11420:	mov	r3, #0
   11424:	str	r1, [sp, #8]
   11428:	str	r0, [sp, #12]
   1142c:	mov	r0, fp
   11430:	bl	1b514 <__assert_fail@plt+0xa32c>
   11434:	str	r4, [sp, #28]
   11438:	and	r2, r0, #7
   1143c:	str	r2, [sp, #24]
   11440:	ldrd	r2, [sp, #24]
   11444:	str	r0, [r7, #8]
   11448:	str	r1, [r7, #12]
   1144c:	orrs	r2, r2, r3
   11450:	ldr	r3, [pc, #3464]	; 121e0 <__assert_fail@plt+0xff8>
   11454:	ldr	fp, [r3]
   11458:	beq	11280 <__assert_fail@plt+0x98>
   1145c:	mov	r2, #5
   11460:	ldr	r1, [pc, #3612]	; 12284 <__assert_fail@plt+0x109c>
   11464:	mov	r0, r4
   11468:	bl	10fcc <dcgettext@plt>
   1146c:	mov	r5, r0
   11470:	mov	r0, fp
   11474:	bl	1abc0 <__assert_fail@plt+0x99d8>
   11478:	mov	r2, r5
   1147c:	mov	r1, r4
   11480:	mov	r3, r0
   11484:	mov	r0, r4
   11488:	bl	1105c <error@plt>
   1148c:	mov	r2, #5
   11490:	ldr	r1, [pc, #3408]	; 121e8 <__assert_fail@plt+0x1000>
   11494:	b	12564 <__assert_fail@plt+0x137c>
   11498:	ldr	sl, [pc, #3356]	; 121bc <__assert_fail@plt+0xfd4>
   1149c:	mov	r1, #3
   114a0:	ldrd	r2, [sl, #8]
   114a4:	str	r1, [sl, #24]
   114a8:	cmp	r3, #0
   114ac:	cmpeq	r2, #512	; 0x200
   114b0:	bhi	126a8 <__assert_fail@plt+0x14c0>
   114b4:	orrs	r3, r2, r3
   114b8:	ldr	r3, [sp, #36]	; 0x24
   114bc:	movne	r3, #1
   114c0:	cmp	r3, #0
   114c4:	moveq	r2, #512	; 0x200
   114c8:	moveq	r3, #0
   114cc:	ldr	r4, [sp, #48]	; 0x30
   114d0:	strdeq	r2, [sl, #8]
   114d4:	ldr	r3, [sl, #8]
   114d8:	ldr	r2, [sl, #12]
   114dc:	cmp	r5, #0
   114e0:	movne	r4, #0
   114e4:	lsr	r3, r3, #2
   114e8:	orr	r3, r3, r2, lsl #30
   114ec:	cmp	r4, #0
   114f0:	str	r3, [sl]
   114f4:	bne	12720 <__assert_fail@plt+0x1538>
   114f8:	ldr	r3, [pc, #3272]	; 121c8 <__assert_fail@plt+0xfe0>
   114fc:	ldrb	r3, [r3]
   11500:	cmp	r3, #10
   11504:	ldr	r3, [sp, #36]	; 0x24
   11508:	beq	11578 <__assert_fail@plt+0x390>
   1150c:	cmp	r3, #0
   11510:	movne	r2, #5
   11514:	ldrne	r1, [pc, #3280]	; 121ec <__assert_fail@plt+0x1004>
   11518:	bne	1155c <__assert_fail@plt+0x374>
   1151c:	ldrb	r3, [sl, #16]
   11520:	cmp	r3, #0
   11524:	bne	12698 <__assert_fail@plt+0x14b0>
   11528:	ldrb	r3, [sl, #17]
   1152c:	cmp	r3, #0
   11530:	bne	1268c <__assert_fail@plt+0x14a4>
   11534:	ldrb	r3, [sl, #18]
   11538:	cmp	r3, #0
   1153c:	bne	124e8 <__assert_fail@plt+0x1300>
   11540:	ldrb	r3, [sl, #19]
   11544:	ldr	r2, [sp, #36]	; 0x24
   11548:	eor	r3, r3, #1
   1154c:	orrs	r4, r2, r3
   11550:	moveq	r2, #5
   11554:	ldreq	r1, [pc, #3220]	; 121f0 <__assert_fail@plt+0x1008>
   11558:	bne	115d0 <__assert_fail@plt+0x3e8>
   1155c:	mov	r0, #0
   11560:	bl	10fcc <dcgettext@plt>
   11564:	mov	r1, #0
   11568:	mov	r2, r0
   1156c:	mov	r0, r1
   11570:	bl	1105c <error@plt>
   11574:	b	1133c <__assert_fail@plt+0x154>
   11578:	ldr	r2, [sp, #48]	; 0x30
   1157c:	ands	r7, r3, r2
   11580:	movne	r2, #5
   11584:	ldrne	r1, [pc, #3176]	; 121f4 <__assert_fail@plt+0x100c>
   11588:	bne	1155c <__assert_fail@plt+0x374>
   1158c:	ldr	r3, [sp, #36]	; 0x24
   11590:	cmp	r5, #0
   11594:	movlt	r3, #0
   11598:	andge	r3, r3, #1
   1159c:	cmp	r3, #0
   115a0:	movne	r2, #5
   115a4:	ldrne	r1, [pc, #3148]	; 121f8 <__assert_fail@plt+0x1010>
   115a8:	bne	1155c <__assert_fail@plt+0x374>
   115ac:	ldrb	r3, [sl, #16]
   115b0:	cmp	r3, #0
   115b4:	beq	12674 <__assert_fail@plt+0x148c>
   115b8:	ldr	r3, [sp, #36]	; 0x24
   115bc:	cmp	r3, #0
   115c0:	beq	12698 <__assert_fail@plt+0x14b0>
   115c4:	ldrb	r3, [sl, #18]
   115c8:	cmp	r3, #0
   115cc:	bne	115ec <__assert_fail@plt+0x404>
   115d0:	ldrb	r2, [sl, #20]
   115d4:	ldr	r3, [sp, #36]	; 0x24
   115d8:	eor	r3, r3, #1
   115dc:	tst	r2, r3
   115e0:	movne	r2, #5
   115e4:	ldrne	r1, [pc, #3088]	; 121fc <__assert_fail@plt+0x1014>
   115e8:	bne	1155c <__assert_fail@plt+0x374>
   115ec:	ldr	r3, [pc, #3084]	; 12200 <__assert_fail@plt+0x1018>
   115f0:	cmn	r5, #1
   115f4:	add	r2, r6, r8, lsl #2
   115f8:	ldr	r3, [r3]
   115fc:	moveq	r5, #0
   11600:	cmp	r3, r8
   11604:	str	r2, [sp, #96]	; 0x60
   11608:	addeq	r2, r2, #4
   1160c:	streq	r2, [sp, #96]	; 0x60
   11610:	ldreq	r2, [pc, #3052]	; 12204 <__assert_fail@plt+0x101c>
   11614:	streq	r2, [r6, r8, lsl #2]
   11618:	add	r6, r6, r3, lsl #2
   1161c:	ldr	r3, [sp, #96]	; 0x60
   11620:	cmp	r3, r6
   11624:	bls	125cc <__assert_fail@plt+0x13e4>
   11628:	cmp	r5, #0
   1162c:	movne	r3, #42	; 0x2a
   11630:	moveq	r3, #32
   11634:	str	r3, [sp, #116]	; 0x74
   11638:	uxtb	r3, r3
   1163c:	str	r3, [sp, #112]	; 0x70
   11640:	mov	r3, #1
   11644:	str	r6, [sp, #72]	; 0x48
   11648:	str	r3, [sp, #84]	; 0x54
   1164c:	ldr	r3, [sp, #36]	; 0x24
   11650:	cmp	r3, #0
   11654:	ldr	r3, [sp, #72]	; 0x48
   11658:	ldr	r0, [r3], #4
   1165c:	str	r0, [sp, #68]	; 0x44
   11660:	str	r3, [sp, #72]	; 0x48
   11664:	beq	11e20 <__assert_fail@plt+0xc38>
   11668:	ldr	r1, [pc, #2964]	; 12204 <__assert_fail@plt+0x101c>
   1166c:	bl	10f48 <strcmp@plt>
   11670:	subs	r3, r0, #0
   11674:	str	r3, [sp, #76]	; 0x4c
   11678:	bne	11f70 <__assert_fail@plt+0xd88>
   1167c:	mov	r3, #1
   11680:	mov	r2, #5
   11684:	ldr	r1, [pc, #3040]	; 1226c <__assert_fail@plt+0x1084>
   11688:	strb	r3, [sl, #4]
   1168c:	bl	10fcc <dcgettext@plt>
   11690:	ldr	r3, [pc, #3024]	; 12268 <__assert_fail@plt+0x1080>
   11694:	ldr	r9, [r3]
   11698:	str	r0, [sp, #68]	; 0x44
   1169c:	mov	r3, #0
   116a0:	mov	r0, #0
   116a4:	mov	r1, #0
   116a8:	str	r3, [sp, #100]	; 0x64
   116ac:	str	r3, [sp, #120]	; 0x78
   116b0:	str	r3, [sp, #124]	; 0x7c
   116b4:	str	r3, [sp, #80]	; 0x50
   116b8:	mov	r2, #1
   116bc:	mov	r3, #0
   116c0:	strd	r0, [sp, #88]	; 0x58
   116c4:	strd	r0, [sp, #56]	; 0x38
   116c8:	strd	r0, [sp, #40]	; 0x28
   116cc:	strd	r2, [sp, #24]
   116d0:	mov	r3, r9
   116d4:	mov	r2, #10
   116d8:	add	r1, sp, #124	; 0x7c
   116dc:	add	r0, sp, #120	; 0x78
   116e0:	bl	10f3c <__getdelim@plt>
   116e4:	subs	r7, r0, #0
   116e8:	ble	11af4 <__assert_fail@plt+0x90c>
   116ec:	ldr	r4, [sp, #120]	; 0x78
   116f0:	ldrb	r2, [r4]
   116f4:	cmp	r2, #35	; 0x23
   116f8:	beq	11874 <__assert_fail@plt+0x68c>
   116fc:	add	r3, r4, r7
   11700:	ldrb	r3, [r3, #-1]
   11704:	cmp	r3, #10
   11708:	subeq	r7, r7, #1
   1170c:	moveq	r3, #0
   11710:	strbeq	r3, [r4, r7]
   11714:	ldreq	r4, [sp, #120]	; 0x78
   11718:	ldrbeq	r2, [r4]
   1171c:	cmp	r2, #9
   11720:	cmpne	r2, #32
   11724:	moveq	r3, #1
   11728:	movne	r3, #0
   1172c:	bne	1174c <__assert_fail@plt+0x564>
   11730:	mov	r1, r4
   11734:	rsb	r0, r4, #1
   11738:	add	r3, r0, r1
   1173c:	ldrb	r2, [r1, #1]!
   11740:	cmp	r2, #9
   11744:	cmpne	r2, #32
   11748:	beq	11738 <__assert_fail@plt+0x550>
   1174c:	cmp	r2, #92	; 0x5c
   11750:	addeq	r3, r3, #1
   11754:	ldreq	r2, [sp, #36]	; 0x24
   11758:	movne	r2, #0
   1175c:	add	r5, r4, r3
   11760:	str	r2, [sp, #64]	; 0x40
   11764:	mov	r0, r5
   11768:	mov	r2, #6
   1176c:	ldr	r1, [pc, #2708]	; 12208 <__assert_fail@plt+0x1020>
   11770:	str	r3, [sp, #52]	; 0x34
   11774:	bl	111b8 <strncmp@plt>
   11778:	ldr	r3, [sp, #52]	; 0x34
   1177c:	cmp	r0, #0
   11780:	bne	118e0 <__assert_fail@plt+0x6f8>
   11784:	add	r8, r3, #6
   11788:	add	fp, r4, r8
   1178c:	ldrb	r6, [r4, r8]
   11790:	cmp	r6, #0
   11794:	beq	117f0 <__assert_fail@plt+0x608>
   11798:	cmp	r6, #32
   1179c:	cmpne	r6, #9
   117a0:	beq	11de0 <__assert_fail@plt+0xbf8>
   117a4:	cmp	r6, #45	; 0x2d
   117a8:	beq	117f0 <__assert_fail@plt+0x608>
   117ac:	cmp	r6, #40	; 0x28
   117b0:	beq	11e80 <__assert_fail@plt+0xc98>
   117b4:	add	r3, r3, #7
   117b8:	add	r3, r4, r3
   117bc:	b	117dc <__assert_fail@plt+0x5f4>
   117c0:	cmp	r6, #32
   117c4:	cmpne	r6, #9
   117c8:	beq	11de0 <__assert_fail@plt+0xbf8>
   117cc:	cmp	r6, #45	; 0x2d
   117d0:	beq	117f0 <__assert_fail@plt+0x608>
   117d4:	cmp	r6, #40	; 0x28
   117d8:	beq	11e80 <__assert_fail@plt+0xc98>
   117dc:	mov	fp, r3
   117e0:	ldrb	r6, [r3], #1
   117e4:	add	r8, r8, #1
   117e8:	cmp	r6, #0
   117ec:	bne	117c0 <__assert_fail@plt+0x5d8>
   117f0:	mov	r3, #0
   117f4:	mov	r0, r5
   117f8:	strb	r3, [fp]
   117fc:	mov	r2, r3
   11800:	ldr	r1, [pc, #2564]	; 1220c <__assert_fail@plt+0x1024>
   11804:	bl	18478 <__assert_fail@plt+0x7290>
   11808:	cmp	r0, #0
   1180c:	addge	r8, r8, #1
   11810:	strge	r0, [sl, #28]
   11814:	blt	11850 <__assert_fail@plt+0x668>
   11818:	cmp	r6, #45	; 0x2d
   1181c:	add	r5, r4, r8
   11820:	beq	11ea8 <__assert_fail@plt+0xcc0>
   11824:	mov	r0, #512	; 0x200
   11828:	mov	r1, #0
   1182c:	mov	r2, #128	; 0x80
   11830:	strd	r0, [sl, #8]
   11834:	ldrb	r3, [r5]
   11838:	str	r2, [sl]
   1183c:	cmp	r3, #32
   11840:	addeq	r8, r8, #1
   11844:	ldrbeq	r3, [r4, r8]
   11848:	cmp	r3, #40	; 0x28
   1184c:	beq	11f18 <__assert_fail@plt+0xd30>
   11850:	ldr	r2, [sp, #40]	; 0x28
   11854:	ldrb	r3, [sl, #18]
   11858:	adds	r2, r2, #1
   1185c:	str	r2, [sp, #40]	; 0x28
   11860:	ldr	r2, [sp, #44]	; 0x2c
   11864:	adc	r2, r2, #0
   11868:	cmp	r3, #0
   1186c:	str	r2, [sp, #44]	; 0x2c
   11870:	bne	11c94 <__assert_fail@plt+0xaac>
   11874:	ldr	r3, [r9]
   11878:	ands	r3, r3, #48	; 0x30
   1187c:	bne	11af4 <__assert_fail@plt+0x90c>
   11880:	ldr	r2, [sp, #24]
   11884:	adds	r2, r2, #1
   11888:	str	r2, [sp, #24]
   1188c:	ldr	r2, [sp, #28]
   11890:	adc	r2, r2, #0
   11894:	str	r2, [sp, #28]
   11898:	ldrd	r0, [sp, #24]
   1189c:	orrs	r2, r0, r1
   118a0:	bne	116d0 <__assert_fail@plt+0x4e8>
   118a4:	mov	r0, r3
   118a8:	mov	r2, #5
   118ac:	ldr	r1, [pc, #2396]	; 12210 <__assert_fail@plt+0x1028>
   118b0:	mov	r4, r3
   118b4:	bl	10fcc <dcgettext@plt>
   118b8:	ldr	r2, [sp, #68]	; 0x44
   118bc:	mov	r1, #3
   118c0:	mov	r5, r0
   118c4:	mov	r0, r4
   118c8:	bl	1a9f4 <__assert_fail@plt+0x980c>
   118cc:	mov	r2, r5
   118d0:	mov	r1, r4
   118d4:	mov	r3, r0
   118d8:	mov	r0, #1
   118dc:	bl	1105c <error@plt>
   118e0:	ldrb	r6, [r4, r3]
   118e4:	ldr	r2, [sl, #24]
   118e8:	sub	r1, r7, r3
   118ec:	cmp	r6, #92	; 0x5c
   118f0:	addeq	r2, r2, #1
   118f4:	cmp	r1, r2
   118f8:	str	r3, [sp, #52]	; 0x34
   118fc:	bcc	11850 <__assert_fail@plt+0x668>
   11900:	mov	r8, #0
   11904:	str	r8, [sl]
   11908:	bl	110b0 <__ctype_b_loc@plt>
   1190c:	mov	ip, r8
   11910:	add	r2, r5, #1
   11914:	mvn	lr, r5
   11918:	ldr	r3, [sp, #52]	; 0x34
   1191c:	ldr	fp, [sp, #36]	; 0x24
   11920:	ldr	r0, [r0]
   11924:	b	11930 <__assert_fail@plt+0x748>
   11928:	ldrb	r6, [r2], #1
   1192c:	mov	ip, fp
   11930:	lsl	r6, r6, #1
   11934:	add	r8, lr, r2
   11938:	ldrh	r1, [r0, r6]
   1193c:	tst	r1, #4096	; 0x1000
   11940:	bne	11928 <__assert_fail@plt+0x740>
   11944:	cmp	ip, #0
   11948:	beq	11850 <__assert_fail@plt+0x668>
   1194c:	sub	r2, r8, #2
   11950:	cmp	r2, #126	; 0x7e
   11954:	str	r8, [sl]
   11958:	bhi	11850 <__assert_fail@plt+0x668>
   1195c:	ands	r2, r8, #1
   11960:	bne	11850 <__assert_fail@plt+0x668>
   11964:	add	r6, r3, r8
   11968:	lsl	r8, r8, #2
   1196c:	ldrb	r3, [r4, r6]
   11970:	str	r8, [sl, #8]
   11974:	str	r2, [sl, #12]
   11978:	cmp	r3, #32
   1197c:	cmpne	r3, #9
   11980:	movne	r3, #1
   11984:	moveq	r3, #0
   11988:	bne	11850 <__assert_fail@plt+0x668>
   1198c:	strb	r3, [r4, r6]
   11990:	mov	r0, r5
   11994:	bl	1281c <__assert_fail@plt+0x1634>
   11998:	cmp	r0, #0
   1199c:	beq	11850 <__assert_fail@plt+0x668>
   119a0:	add	r1, r6, #1
   119a4:	sub	r3, r7, r1
   119a8:	cmp	r3, #1
   119ac:	ldr	r3, [pc, #2068]	; 121c8 <__assert_fail@plt+0xfe0>
   119b0:	ldr	r2, [r3, #4]
   119b4:	beq	12084 <__assert_fail@plt+0xe9c>
   119b8:	ldrb	r3, [r4, r1]
   119bc:	cmp	r3, #32
   119c0:	cmpne	r3, #42	; 0x2a
   119c4:	movne	r3, #1
   119c8:	moveq	r3, #0
   119cc:	bne	12084 <__assert_fail@plt+0xe9c>
   119d0:	cmp	r2, #1
   119d4:	addne	r1, r6, #2
   119d8:	ldrne	r2, [pc, #2024]	; 121c8 <__assert_fail@plt+0xfe0>
   119dc:	strne	r3, [r2, #4]
   119e0:	ldr	r3, [sp, #64]	; 0x40
   119e4:	add	r4, r4, r1
   119e8:	cmp	r3, #0
   119ec:	bne	1259c <__assert_fail@plt+0x13b4>
   119f0:	ldr	r3, [sp, #76]	; 0x4c
   119f4:	cmp	r3, #0
   119f8:	bne	11a10 <__assert_fail@plt+0x828>
   119fc:	ldr	r1, [pc, #2048]	; 12204 <__assert_fail@plt+0x101c>
   11a00:	mov	r0, r4
   11a04:	bl	10f48 <strcmp@plt>
   11a08:	cmp	r0, #0
   11a0c:	beq	11850 <__assert_fail@plt+0x668>
   11a10:	ldrb	r8, [sl, #17]
   11a14:	cmp	r8, #0
   11a18:	movne	r8, #0
   11a1c:	movne	r7, r8
   11a20:	bne	11a44 <__assert_fail@plt+0x85c>
   11a24:	mov	r1, #10
   11a28:	mov	r0, r4
   11a2c:	bl	110ec <strchr@plt>
   11a30:	ldr	r3, [sp, #36]	; 0x24
   11a34:	cmp	r0, #0
   11a38:	movne	r8, r3
   11a3c:	movne	r7, #1
   11a40:	moveq	r7, #0
   11a44:	add	r2, sp, #128	; 0x80
   11a48:	add	r1, sp, #208	; 0xd0
   11a4c:	mov	r0, r4
   11a50:	bl	129cc <__assert_fail@plt+0x17e4>
   11a54:	subs	r3, r0, #0
   11a58:	str	r3, [sp, #52]	; 0x34
   11a5c:	bne	11ce0 <__assert_fail@plt+0xaf8>
   11a60:	ldr	r2, [sp, #56]	; 0x38
   11a64:	ldrb	r3, [sl, #17]
   11a68:	adds	r2, r2, #1
   11a6c:	str	r2, [sp, #56]	; 0x38
   11a70:	ldr	r2, [sp, #60]	; 0x3c
   11a74:	adc	r2, r2, #0
   11a78:	cmp	r3, #0
   11a7c:	str	r2, [sp, #60]	; 0x3c
   11a80:	bne	11ae0 <__assert_fail@plt+0x8f8>
   11a84:	cmp	r7, #0
   11a88:	beq	11ab4 <__assert_fail@plt+0x8cc>
   11a8c:	ldr	r3, [pc, #1820]	; 121b0 <__assert_fail@plt+0xfc8>
   11a90:	ldr	r0, [r3]
   11a94:	ldr	r3, [r0, #20]
   11a98:	ldr	r2, [r0, #24]
   11a9c:	cmp	r3, r2
   11aa0:	addcc	r1, r3, #1
   11aa4:	movcc	r2, #92	; 0x5c
   11aa8:	strcc	r1, [r0, #20]
   11aac:	strbcc	r2, [r3]
   11ab0:	bcs	125d8 <__assert_fail@plt+0x13f0>
   11ab4:	mov	r1, r8
   11ab8:	mov	r0, r4
   11abc:	bl	1290c <__assert_fail@plt+0x1724>
   11ac0:	ldr	r1, [pc, #1868]	; 12214 <__assert_fail@plt+0x102c>
   11ac4:	mov	r2, #5
   11ac8:	mov	r0, #0
   11acc:	bl	10fcc <dcgettext@plt>
   11ad0:	ldr	r1, [pc, #1856]	; 12218 <__assert_fail@plt+0x1030>
   11ad4:	mov	r2, r0
   11ad8:	mov	r0, #1
   11adc:	bl	11128 <__printf_chk@plt>
   11ae0:	ldr	r3, [sp, #36]	; 0x24
   11ae4:	str	r3, [sp, #80]	; 0x50
   11ae8:	ldr	r3, [r9]
   11aec:	ands	r3, r3, #48	; 0x30
   11af0:	beq	11880 <__assert_fail@plt+0x698>
   11af4:	ldr	r0, [sp, #120]	; 0x78
   11af8:	bl	10f6c <free@plt>
   11afc:	ldr	r4, [r9]
   11b00:	ands	r4, r4, #32
   11b04:	bne	1215c <__assert_fail@plt+0xf74>
   11b08:	ldr	r3, [sp, #76]	; 0x4c
   11b0c:	cmp	r3, #0
   11b10:	bne	120d4 <__assert_fail@plt+0xeec>
   11b14:	ldr	r3, [sp, #80]	; 0x50
   11b18:	cmp	r3, #0
   11b1c:	beq	12114 <__assert_fail@plt+0xf2c>
   11b20:	ldrb	r3, [sl, #17]
   11b24:	cmp	r3, #0
   11b28:	bne	11fb8 <__assert_fail@plt+0xdd0>
   11b2c:	ldrd	r0, [sp, #40]	; 0x28
   11b30:	orrs	r3, r0, r1
   11b34:	beq	11b80 <__assert_fail@plt+0x998>
   11b38:	mov	r3, #0
   11b3c:	cmp	r1, r3
   11b40:	mvn	r2, #0
   11b44:	cmpeq	r0, r2
   11b48:	ldrls	r3, [sp, #40]	; 0x28
   11b4c:	bhi	124d0 <__assert_fail@plt+0x12e8>
   11b50:	mov	r2, #5
   11b54:	str	r2, [sp]
   11b58:	ldr	r1, [pc, #1724]	; 1221c <__assert_fail@plt+0x1034>
   11b5c:	ldr	r2, [pc, #1724]	; 12220 <__assert_fail@plt+0x1038>
   11b60:	mov	r0, #0
   11b64:	bl	111dc <dcngettext@plt>
   11b68:	ldrd	r2, [sp, #40]	; 0x28
   11b6c:	mov	r1, #0
   11b70:	strd	r2, [sp]
   11b74:	mov	r2, r0
   11b78:	mov	r0, r1
   11b7c:	bl	1105c <error@plt>
   11b80:	ldrd	r0, [sp, #56]	; 0x38
   11b84:	orrs	r3, r0, r1
   11b88:	beq	11bd4 <__assert_fail@plt+0x9ec>
   11b8c:	mov	r3, #0
   11b90:	cmp	r1, r3
   11b94:	mvn	r2, #0
   11b98:	cmpeq	r0, r2
   11b9c:	ldrls	r3, [sp, #56]	; 0x38
   11ba0:	bhi	124b8 <__assert_fail@plt+0x12d0>
   11ba4:	mov	r2, #5
   11ba8:	str	r2, [sp]
   11bac:	ldr	r1, [pc, #1648]	; 12224 <__assert_fail@plt+0x103c>
   11bb0:	ldr	r2, [pc, #1648]	; 12228 <__assert_fail@plt+0x1040>
   11bb4:	mov	r0, #0
   11bb8:	bl	111dc <dcngettext@plt>
   11bbc:	ldrd	r2, [sp, #56]	; 0x38
   11bc0:	mov	r1, #0
   11bc4:	strd	r2, [sp]
   11bc8:	mov	r2, r0
   11bcc:	mov	r0, r1
   11bd0:	bl	1105c <error@plt>
   11bd4:	ldrd	r0, [sp, #88]	; 0x58
   11bd8:	orrs	r3, r0, r1
   11bdc:	beq	11c28 <__assert_fail@plt+0xa40>
   11be0:	mov	r3, #0
   11be4:	cmp	r1, r3
   11be8:	mvn	r2, #0
   11bec:	cmpeq	r0, r2
   11bf0:	ldrls	r3, [sp, #88]	; 0x58
   11bf4:	bhi	124a0 <__assert_fail@plt+0x12b8>
   11bf8:	mov	r2, #5
   11bfc:	str	r2, [sp]
   11c00:	ldr	r1, [pc, #1572]	; 1222c <__assert_fail@plt+0x1044>
   11c04:	ldr	r2, [pc, #1572]	; 12230 <__assert_fail@plt+0x1048>
   11c08:	mov	r0, #0
   11c0c:	bl	111dc <dcngettext@plt>
   11c10:	ldrd	r2, [sp, #88]	; 0x58
   11c14:	mov	r1, #0
   11c18:	strd	r2, [sp]
   11c1c:	mov	r2, r0
   11c20:	mov	r0, r1
   11c24:	bl	1105c <error@plt>
   11c28:	ldrb	r3, [sl, #16]
   11c2c:	cmp	r3, #0
   11c30:	beq	11fb8 <__assert_fail@plt+0xdd0>
   11c34:	ldr	r3, [sp, #100]	; 0x64
   11c38:	cmp	r3, #0
   11c3c:	beq	12500 <__assert_fail@plt+0x1318>
   11c40:	ldrd	r2, [sp, #88]	; 0x58
   11c44:	ldrd	r0, [sp, #56]	; 0x38
   11c48:	mov	lr, r2
   11c4c:	orr	ip, r0, r2
   11c50:	orr	r3, r1, r3
   11c54:	str	ip, [sp, #104]	; 0x68
   11c58:	str	r3, [sp, #108]	; 0x6c
   11c5c:	ldrd	r2, [sp, #104]	; 0x68
   11c60:	orrs	r3, r2, r3
   11c64:	bne	11c80 <__assert_fail@plt+0xa98>
   11c68:	ldrd	r2, [sp, #40]	; 0x28
   11c6c:	ldrb	r4, [sl, #20]
   11c70:	mov	r1, r2
   11c74:	orrs	r3, r1, r3
   11c78:	eor	r4, r4, #1
   11c7c:	orreq	r4, r4, #1
   11c80:	and	r4, r4, #1
   11c84:	ldr	r3, [sp, #84]	; 0x54
   11c88:	and	r3, r3, r4
   11c8c:	str	r3, [sp, #84]	; 0x54
   11c90:	b	11e3c <__assert_fail@plt+0xc54>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #1428]	; 12234 <__assert_fail@plt+0x104c>
   11c9c:	mov	r0, #0
   11ca0:	bl	10fcc <dcgettext@plt>
   11ca4:	ldr	r2, [sp, #68]	; 0x44
   11ca8:	mov	r1, #3
   11cac:	mov	r4, r0
   11cb0:	mov	r0, #0
   11cb4:	bl	1a9f4 <__assert_fail@plt+0x980c>
   11cb8:	mov	r2, r4
   11cbc:	ldrd	r4, [sp, #24]
   11cc0:	ldr	r3, [pc, #1344]	; 12208 <__assert_fail@plt+0x1020>
   11cc4:	mov	r1, #0
   11cc8:	str	r3, [sp, #8]
   11ccc:	strd	r4, [sp]
   11cd0:	mov	r3, r0
   11cd4:	mov	r0, r1
   11cd8:	bl	1105c <error@plt>
   11cdc:	b	11874 <__assert_fail@plt+0x68c>
   11ce0:	ldrb	r3, [sl, #16]
   11ce4:	cmp	r3, #0
   11ce8:	beq	11cf8 <__assert_fail@plt+0xb10>
   11cec:	ldrb	r3, [sp, #128]	; 0x80
   11cf0:	cmp	r3, #0
   11cf4:	bne	11ae0 <__assert_fail@plt+0x8f8>
   11cf8:	ldr	fp, [sl]
   11cfc:	lsrs	fp, fp, #1
   11d00:	beq	1209c <__assert_fail@plt+0xeb4>
   11d04:	bl	1108c <__ctype_tolower_loc@plt>
   11d08:	mov	r6, #0
   11d0c:	add	r2, sp, #207	; 0xcf
   11d10:	add	ip, r5, #1
   11d14:	ldr	r1, [r0]
   11d18:	b	11d48 <__assert_fail@plt+0xb60>
   11d1c:	ldr	lr, [pc, #1168]	; 121b4 <__assert_fail@plt+0xfcc>
   11d20:	and	r3, r3, #15
   11d24:	ldrb	r0, [ip, r6, lsl #1]
   11d28:	add	r3, lr, r3
   11d2c:	ldrb	r3, [r3, #296]	; 0x128
   11d30:	ldr	r0, [r1, r0, lsl #2]
   11d34:	cmp	r0, r3
   11d38:	bne	11d68 <__assert_fail@plt+0xb80>
   11d3c:	add	r6, r6, #1
   11d40:	cmp	fp, r6
   11d44:	beq	1209c <__assert_fail@plt+0xeb4>
   11d48:	ldrb	r3, [r2, #1]!
   11d4c:	ldr	r0, [pc, #1120]	; 121b4 <__assert_fail@plt+0xfcc>
   11d50:	ldrb	lr, [r5, r6, lsl #1]
   11d54:	add	r0, r0, r3, lsr #4
   11d58:	ldrb	r0, [r0, #296]	; 0x128
   11d5c:	ldr	lr, [r1, lr, lsl #2]
   11d60:	cmp	lr, r0
   11d64:	beq	11d1c <__assert_fail@plt+0xb34>
   11d68:	ldr	r2, [sp, #88]	; 0x58
   11d6c:	ldrb	r3, [sl, #17]
   11d70:	adds	r2, r2, #1
   11d74:	str	r2, [sp, #88]	; 0x58
   11d78:	ldr	r2, [sp, #92]	; 0x5c
   11d7c:	adc	r2, r2, #0
   11d80:	cmp	r3, #0
   11d84:	str	r2, [sp, #92]	; 0x5c
   11d88:	bne	11ae0 <__assert_fail@plt+0x8f8>
   11d8c:	cmp	r7, #0
   11d90:	beq	11dbc <__assert_fail@plt+0xbd4>
   11d94:	ldr	r3, [pc, #1044]	; 121b0 <__assert_fail@plt+0xfc8>
   11d98:	ldr	r0, [r3]
   11d9c:	ldr	r3, [r0, #20]
   11da0:	ldr	r2, [r0, #24]
   11da4:	cmp	r3, r2
   11da8:	addcc	r1, r3, #1
   11dac:	movcc	r2, #92	; 0x5c
   11db0:	strcc	r1, [r0, #20]
   11db4:	strbcc	r2, [r3]
   11db8:	bcs	12634 <__assert_fail@plt+0x144c>
   11dbc:	mov	r1, r8
   11dc0:	mov	r0, r4
   11dc4:	bl	1290c <__assert_fail@plt+0x1724>
   11dc8:	cmp	fp, r6
   11dcc:	beq	12488 <__assert_fail@plt+0x12a0>
   11dd0:	mov	r2, #5
   11dd4:	ldr	r1, [pc, #1116]	; 12238 <__assert_fail@plt+0x1050>
   11dd8:	mov	r0, #0
   11ddc:	b	11acc <__assert_fail@plt+0x8e4>
   11de0:	mov	r3, #0
   11de4:	mov	r0, r5
   11de8:	strb	r3, [fp]
   11dec:	mov	r2, r3
   11df0:	ldr	r1, [pc, #1044]	; 1220c <__assert_fail@plt+0x1024>
   11df4:	bl	18478 <__assert_fail@plt+0x7290>
   11df8:	cmp	r0, #0
   11dfc:	blt	11850 <__assert_fail@plt+0x668>
   11e00:	cmp	r6, #40	; 0x28
   11e04:	str	r0, [sl, #28]
   11e08:	addne	r8, r8, #1
   11e0c:	bne	11818 <__assert_fail@plt+0x630>
   11e10:	mov	r3, #40	; 0x28
   11e14:	strb	r3, [fp]
   11e18:	add	r5, r4, r8
   11e1c:	b	11824 <__assert_fail@plt+0x63c>
   11e20:	add	r2, sp, #128	; 0x80
   11e24:	add	r1, sp, #136	; 0x88
   11e28:	ldr	r0, [sp, #68]	; 0x44
   11e2c:	bl	129cc <__assert_fail@plt+0x17e4>
   11e30:	subs	r4, r0, #0
   11e34:	bne	11fc8 <__assert_fail@plt+0xde0>
   11e38:	str	r4, [sp, #84]	; 0x54
   11e3c:	ldr	r3, [sp, #96]	; 0x60
   11e40:	ldr	r2, [sp, #72]	; 0x48
   11e44:	cmp	r3, r2
   11e48:	bhi	1164c <__assert_fail@plt+0x464>
   11e4c:	ldrb	r3, [sl, #4]
   11e50:	cmp	r3, #0
   11e54:	bne	12540 <__assert_fail@plt+0x1358>
   11e58:	ldr	r3, [pc, #828]	; 1219c <__assert_fail@plt+0xfb4>
   11e5c:	ldr	r1, [sp, #84]	; 0x54
   11e60:	ldr	r2, [sp, #276]	; 0x114
   11e64:	ldr	r3, [r3]
   11e68:	eor	r0, r1, #1
   11e6c:	cmp	r2, r3
   11e70:	uxtb	r0, r0
   11e74:	bne	126a4 <__assert_fail@plt+0x14bc>
   11e78:	add	sp, sp, #284	; 0x11c
   11e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e80:	mov	r3, #0
   11e84:	mov	r0, r5
   11e88:	strb	r3, [fp]
   11e8c:	mov	r2, r3
   11e90:	ldr	r1, [pc, #884]	; 1220c <__assert_fail@plt+0x1024>
   11e94:	bl	18478 <__assert_fail@plt+0x7290>
   11e98:	cmp	r0, #0
   11e9c:	strge	r0, [sl, #28]
   11ea0:	bge	11e10 <__assert_fail@plt+0xc28>
   11ea4:	b	11850 <__assert_fail@plt+0x668>
   11ea8:	mov	r2, #0
   11eac:	str	r2, [sp]
   11eb0:	mov	r1, r2
   11eb4:	add	r3, sp, #128	; 0x80
   11eb8:	mov	r0, r5
   11ebc:	bl	1b51c <__assert_fail@plt+0xa334>
   11ec0:	cmp	r0, #0
   11ec4:	bne	11850 <__assert_fail@plt+0x668>
   11ec8:	ldr	r2, [sp, #128]	; 0x80
   11ecc:	cmp	r2, #0
   11ed0:	beq	11850 <__assert_fail@plt+0x668>
   11ed4:	mov	r1, #0
   11ed8:	cmp	r1, #0
   11edc:	cmpeq	r2, #512	; 0x200
   11ee0:	mov	r0, r2
   11ee4:	bhi	11850 <__assert_fail@plt+0x668>
   11ee8:	tst	r2, #7
   11eec:	bne	11850 <__assert_fail@plt+0x668>
   11ef0:	mov	r3, r5
   11ef4:	strd	r0, [sl, #8]
   11ef8:	mov	r5, r3
   11efc:	sub	r8, r3, r4
   11f00:	ldrb	r1, [r3], #1
   11f04:	sub	r1, r1, #48	; 0x30
   11f08:	cmp	r1, #9
   11f0c:	bls	11ef8 <__assert_fail@plt+0xd10>
   11f10:	lsr	r2, r2, #2
   11f14:	b	11834 <__assert_fail@plt+0x64c>
   11f18:	add	r8, r8, #1
   11f1c:	subs	r7, r7, r8
   11f20:	beq	11850 <__assert_fail@plt+0x668>
   11f24:	subs	r7, r7, #1
   11f28:	add	r4, r4, r8
   11f2c:	beq	11f58 <__assert_fail@plt+0xd70>
   11f30:	ldrb	r2, [r4, r7]
   11f34:	add	r3, r4, r7
   11f38:	cmp	r2, #41	; 0x29
   11f3c:	bne	11f50 <__assert_fail@plt+0xd68>
   11f40:	b	12298 <__assert_fail@plt+0x10b0>
   11f44:	ldrb	r2, [r3, #-1]!
   11f48:	cmp	r2, #41	; 0x29
   11f4c:	beq	12294 <__assert_fail@plt+0x10ac>
   11f50:	subs	r7, r7, #1
   11f54:	bne	11f44 <__assert_fail@plt+0xd5c>
   11f58:	ldrb	r3, [r4]
   11f5c:	cmp	r3, #41	; 0x29
   11f60:	bne	11850 <__assert_fail@plt+0x668>
   11f64:	mov	r5, r4
   11f68:	mov	r7, #0
   11f6c:	b	1229c <__assert_fail@plt+0x10b4>
   11f70:	ldr	r1, [pc, #708]	; 1223c <__assert_fail@plt+0x1054>
   11f74:	ldr	r0, [sp, #68]	; 0x44
   11f78:	bl	188c4 <__assert_fail@plt+0x76dc>
   11f7c:	subs	r9, r0, #0
   11f80:	bne	1169c <__assert_fail@plt+0x4b4>
   11f84:	bl	110f8 <__errno_location@plt>
   11f88:	ldr	r2, [sp, #68]	; 0x44
   11f8c:	mov	r1, #3
   11f90:	ldr	r4, [r0]
   11f94:	mov	r0, r9
   11f98:	bl	1a9f4 <__assert_fail@plt+0x980c>
   11f9c:	mov	r1, r4
   11fa0:	ldr	r2, [pc, #664]	; 12240 <__assert_fail@plt+0x1058>
   11fa4:	mov	r4, r9
   11fa8:	mov	r3, r0
   11fac:	mov	r0, r9
   11fb0:	bl	1105c <error@plt>
   11fb4:	b	11c84 <__assert_fail@plt+0xa9c>
   11fb8:	ldr	r3, [sp, #100]	; 0x64
   11fbc:	cmp	r3, #0
   11fc0:	bne	11c40 <__assert_fail@plt+0xa58>
   11fc4:	b	11c80 <__assert_fail@plt+0xa98>
   11fc8:	mov	r1, #92	; 0x5c
   11fcc:	ldr	r0, [sp, #68]	; 0x44
   11fd0:	bl	110ec <strchr@plt>
   11fd4:	cmp	r0, #0
   11fd8:	beq	1257c <__assert_fail@plt+0x1394>
   11fdc:	ldr	r3, [pc, #484]	; 121c8 <__assert_fail@plt+0xfe0>
   11fe0:	ldrb	r3, [r3]
   11fe4:	cmp	r3, #10
   11fe8:	beq	1231c <__assert_fail@plt+0x1134>
   11fec:	ldr	r3, [sp, #48]	; 0x30
   11ff0:	cmp	r3, #0
   11ff4:	bne	12594 <__assert_fail@plt+0x13ac>
   11ff8:	ldr	r3, [sl]
   11ffc:	ldr	r4, [sp, #48]	; 0x30
   12000:	lsrs	r3, r3, #1
   12004:	beq	12414 <__assert_fail@plt+0x122c>
   12008:	ldr	r5, [pc, #564]	; 12244 <__assert_fail@plt+0x105c>
   1200c:	add	r6, sp, #135	; 0x87
   12010:	ldrb	r2, [r6, #1]
   12014:	mov	r1, r5
   12018:	mov	r0, #1
   1201c:	bl	11128 <__printf_chk@plt>
   12020:	ldr	r2, [sl]
   12024:	add	r3, r6, #2
   12028:	add	r1, sp, #136	; 0x88
   1202c:	sub	r3, r3, r1
   12030:	cmp	r3, r2, lsr #1
   12034:	add	r6, r6, #1
   12038:	bcc	12010 <__assert_fail@plt+0xe28>
   1203c:	ldr	r3, [sp, #48]	; 0x30
   12040:	cmp	r3, #0
   12044:	beq	12414 <__assert_fail@plt+0x122c>
   12048:	ldr	r3, [pc, #352]	; 121b0 <__assert_fail@plt+0xfc8>
   1204c:	ldr	r0, [r3]
   12050:	ldr	r3, [pc, #368]	; 121c8 <__assert_fail@plt+0xfe0>
   12054:	ldr	r2, [r0, #24]
   12058:	ldrb	r1, [r3]
   1205c:	ldr	r3, [r0, #20]
   12060:	cmp	r3, r2
   12064:	addcc	r2, r3, #1
   12068:	strcc	r2, [r0, #20]
   1206c:	ldrcc	r4, [sp, #84]	; 0x54
   12070:	strbcc	r1, [r3]
   12074:	bcc	11e38 <__assert_fail@plt+0xc50>
   12078:	bl	11170 <__overflow@plt>
   1207c:	ldr	r4, [sp, #84]	; 0x54
   12080:	b	11e38 <__assert_fail@plt+0xc50>
   12084:	cmp	r2, #0
   12088:	beq	11850 <__assert_fail@plt+0x668>
   1208c:	ldr	r2, [pc, #308]	; 121c8 <__assert_fail@plt+0xfe0>
   12090:	mov	r3, #1
   12094:	str	r3, [r2, #4]
   12098:	b	119e0 <__assert_fail@plt+0x7f8>
   1209c:	ldrb	r3, [sl, #17]
   120a0:	mov	r6, fp
   120a4:	cmp	r3, #0
   120a8:	str	r3, [sp, #100]	; 0x64
   120ac:	bne	11ae0 <__assert_fail@plt+0x8f8>
   120b0:	ldrb	r3, [sl, #19]
   120b4:	cmp	r3, #0
   120b8:	str	r3, [sp, #100]	; 0x64
   120bc:	bne	11ae0 <__assert_fail@plt+0x8f8>
   120c0:	cmp	r7, #0
   120c4:	beq	12474 <__assert_fail@plt+0x128c>
   120c8:	ldr	r3, [sp, #52]	; 0x34
   120cc:	str	r3, [sp, #100]	; 0x64
   120d0:	b	11d94 <__assert_fail@plt+0xbac>
   120d4:	mov	r0, r9
   120d8:	bl	1c570 <__assert_fail@plt+0xb388>
   120dc:	cmp	r0, #0
   120e0:	beq	11b14 <__assert_fail@plt+0x92c>
   120e4:	bl	110f8 <__errno_location@plt>
   120e8:	ldr	r2, [sp, #68]	; 0x44
   120ec:	mov	r1, #3
   120f0:	ldr	r5, [r0]
   120f4:	mov	r0, r4
   120f8:	bl	1a9f4 <__assert_fail@plt+0x980c>
   120fc:	mov	r1, r5
   12100:	ldr	r2, [pc, #312]	; 12240 <__assert_fail@plt+0x1058>
   12104:	mov	r3, r0
   12108:	mov	r0, r4
   1210c:	bl	1105c <error@plt>
   12110:	b	11c84 <__assert_fail@plt+0xa9c>
   12114:	mov	r0, r3
   12118:	mov	r2, #5
   1211c:	ldr	r1, [pc, #292]	; 12248 <__assert_fail@plt+0x1060>
   12120:	mov	r6, r3
   12124:	bl	10fcc <dcgettext@plt>
   12128:	ldr	r2, [sp, #68]	; 0x44
   1212c:	mov	r1, #3
   12130:	mov	r5, r0
   12134:	mov	r0, r6
   12138:	bl	1a9f4 <__assert_fail@plt+0x980c>
   1213c:	ldr	r3, [pc, #196]	; 12208 <__assert_fail@plt+0x1020>
   12140:	mov	r2, r5
   12144:	str	r3, [sp]
   12148:	mov	r1, r6
   1214c:	mov	r3, r0
   12150:	mov	r0, r6
   12154:	bl	1105c <error@plt>
   12158:	b	11c80 <__assert_fail@plt+0xa98>
   1215c:	mov	r2, #5
   12160:	ldr	r1, [pc, #228]	; 1224c <__assert_fail@plt+0x1064>
   12164:	mov	r0, #0
   12168:	bl	10fcc <dcgettext@plt>
   1216c:	ldr	r2, [sp, #68]	; 0x44
   12170:	mov	r1, #3
   12174:	mov	r4, r0
   12178:	mov	r0, #0
   1217c:	bl	1a9f4 <__assert_fail@plt+0x980c>
   12180:	mov	r1, #0
   12184:	mov	r2, r4
   12188:	mov	r4, #0
   1218c:	mov	r3, r0
   12190:	mov	r0, r1
   12194:	bl	1105c <error@plt>
   12198:	b	11c84 <__assert_fail@plt+0xa9c>
   1219c:	andeq	lr, r2, r8, lsl #30
   121a0:	andeq	sp, r1, r0, lsl r5
   121a4:	andeq	sp, r1, r0, lsl r6
   121a8:	andeq	sp, r1, r4, ror #10
   121ac:			; <UNDEFINED> instruction: 0x000187b4
   121b0:	andeq	pc, r2, r4, lsl #3
   121b4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   121b8:	andeq	sp, r1, r8, lsl #13
   121bc:	muleq	r2, r0, r1
   121c0:	andeq	r0, r0, r1, lsl #2
   121c4:	andeq	r0, r0, r3, lsl #2
   121c8:	andeq	pc, r2, r0, lsl r1	; <UNPREDICTABLE>
   121cc:	andeq	pc, r2, ip, lsl r1	; <UNPREDICTABLE>
   121d0:	andeq	sp, r1, r8, ror #12
   121d4:	andeq	sp, r1, r8, ror r6
   121d8:	andeq	ip, r1, r4, lsr #30
   121dc:	andeq	sp, r1, r0, ror #10
   121e0:	andeq	pc, r2, r8, lsl #3
   121e4:	andeq	sp, r1, r4, lsr #12
   121e8:	andeq	sp, r1, r8, asr #12
   121ec:	andeq	sp, r1, r0, ror #13
   121f0:	andeq	sp, r1, ip, ror #16
   121f4:	andeq	sp, r1, ip, lsl r7
   121f8:	andeq	sp, r1, r8, asr r7
   121fc:	andeq	sp, r1, ip, lsr #17
   12200:	andeq	pc, r2, r0, ror r1	; <UNPREDICTABLE>
   12204:	andeq	ip, r1, ip, lsl pc
   12208:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1220c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12210:	strdeq	sp, [r1], -ip
   12214:	andeq	sp, r1, r8, asr #18
   12218:	andeq	sp, r1, ip, asr r9
   1221c:	andeq	sp, r1, r4, ror #19
   12220:			; <UNDEFINED> instruction: 0x0001d9b4
   12224:	andeq	sp, r1, r0, asr #20
   12228:	andeq	sp, r1, r0, lsl sl
   1222c:	muleq	r1, ip, sl
   12230:	andeq	sp, r1, ip, ror #20
   12234:	andeq	sp, r1, r8, lsl r9
   12238:	andeq	sp, r1, r4, ror #18
   1223c:	andeq	ip, r1, r0, lsr #30
   12240:	andeq	sp, r1, r4, asr #12
   12244:	strdeq	sp, [r1], -ip
   12248:	andeq	sp, r1, r0, lsl #19
   1224c:	andeq	sp, r1, r0, ror r9
   12250:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12254:	andeq	sp, r1, r8, ror #21
   12258:	andeq	sp, r1, ip, ror #18
   1225c:	andeq	r4, pc, r0, asr #4
   12260:	andeq	sp, r1, ip, lsr #16
   12264:	andeq	sp, r1, ip, asr #21
   12268:	andeq	pc, r2, r0, lsl #3
   1226c:	andeq	sp, r1, ip, ror #17
   12270:	andeq	pc, r2, r4, lsl #3
   12274:	strdeq	sp, [r1], -r0
   12278:	strdeq	sp, [r1], -r4
   1227c:	andeq	sp, r1, ip, ror #15
   12280:	andeq	sp, r1, r4, lsr #15
   12284:	andeq	sp, r1, r4, lsr r6
   12288:	muleq	r1, r0, r6
   1228c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12290:			; <UNDEFINED> instruction: 0x0001d6bc
   12294:	add	r3, r4, r7
   12298:	mov	r5, r3
   1229c:	ldr	r3, [sp, #64]	; 0x40
   122a0:	cmp	r3, #0
   122a4:	bne	125b4 <__assert_fail@plt+0x13cc>
   122a8:	add	r7, r7, #1
   122ac:	mov	r3, #0
   122b0:	strb	r3, [r5]
   122b4:	ldrb	r3, [r4, r7]
   122b8:	add	r2, r4, r7
   122bc:	cmp	r3, #9
   122c0:	cmpne	r3, #32
   122c4:	rsbeq	r1, r4, #1
   122c8:	bne	122e0 <__assert_fail@plt+0x10f8>
   122cc:	add	r7, r1, r2
   122d0:	ldrb	r3, [r2, #1]!
   122d4:	cmp	r3, #9
   122d8:	cmpne	r3, #32
   122dc:	beq	122cc <__assert_fail@plt+0x10e4>
   122e0:	cmp	r3, #61	; 0x3d
   122e4:	bne	11850 <__assert_fail@plt+0x668>
   122e8:	add	r7, r7, #1
   122ec:	add	r3, r4, r7
   122f0:	ldrb	r2, [r3]
   122f4:	mov	r5, r3
   122f8:	add	r3, r3, #1
   122fc:	cmp	r2, #9
   12300:	cmpne	r2, #32
   12304:	beq	122f0 <__assert_fail@plt+0x1108>
   12308:	mov	r0, r5
   1230c:	bl	1281c <__assert_fail@plt+0x1634>
   12310:	cmp	r0, #0
   12314:	bne	119f0 <__assert_fail@plt+0x808>
   12318:	b	11850 <__assert_fail@plt+0x668>
   1231c:	ldr	r3, [sp, #48]	; 0x30
   12320:	cmp	r3, #0
   12324:	beq	123e0 <__assert_fail@plt+0x11f8>
   12328:	ldr	r3, [pc, #-192]	; 12270 <__assert_fail@plt+0x1088>
   1232c:	ldr	r0, [r3]
   12330:	ldr	r3, [r0, #20]
   12334:	ldr	r2, [r0, #24]
   12338:	cmp	r2, r3
   1233c:	bls	12664 <__assert_fail@plt+0x147c>
   12340:	ldr	r5, [sp, #48]	; 0x30
   12344:	add	r1, r3, #1
   12348:	mov	r2, #92	; 0x5c
   1234c:	str	r1, [r0, #20]
   12350:	strb	r2, [r3]
   12354:	ldr	r2, [pc, #-236]	; 12270 <__assert_fail@plt+0x1088>
   12358:	ldr	r3, [sl, #28]
   1235c:	ldr	r1, [r2]
   12360:	ldr	r2, [pc, #-220]	; 1228c <__assert_fail@plt+0x10a4>
   12364:	add	r3, r2, r3, lsl #2
   12368:	ldr	r0, [r3, #288]	; 0x120
   1236c:	bl	10f24 <fputs_unlocked@plt>
   12370:	ldrd	r2, [sl, #8]
   12374:	ldr	r0, [pc, #-300]	; 12250 <__assert_fail@plt+0x1068>
   12378:	mov	r1, #0
   1237c:	cmp	r3, r1
   12380:	cmpeq	r2, r0
   12384:	bhi	125e4 <__assert_fail@plt+0x13fc>
   12388:	ldr	r1, [pc, #-316]	; 12254 <__assert_fail@plt+0x106c>
   1238c:	mov	r0, #1
   12390:	bl	11128 <__printf_chk@plt>
   12394:	ldr	r3, [pc, #-300]	; 12270 <__assert_fail@plt+0x1088>
   12398:	mov	r2, #2
   1239c:	mov	r6, r3
   123a0:	mov	r1, #1
   123a4:	ldr	r3, [r3]
   123a8:	ldr	r0, [pc, #-316]	; 12274 <__assert_fail@plt+0x108c>
   123ac:	bl	10fb4 <fwrite_unlocked@plt>
   123b0:	mov	r1, r5
   123b4:	ldr	r0, [sp, #68]	; 0x44
   123b8:	bl	1290c <__assert_fail@plt+0x1724>
   123bc:	ldr	r3, [r6]
   123c0:	mov	r2, #4
   123c4:	mov	r1, #1
   123c8:	ldr	r0, [pc, #-344]	; 12278 <__assert_fail@plt+0x1090>
   123cc:	bl	10fb4 <fwrite_unlocked@plt>
   123d0:	ldr	r3, [sp, #48]	; 0x30
   123d4:	eor	r3, r3, #1
   123d8:	tst	r5, r3
   123dc:	beq	12620 <__assert_fail@plt+0x1438>
   123e0:	ldr	r3, [pc, #-376]	; 12270 <__assert_fail@plt+0x1088>
   123e4:	ldr	r0, [r3]
   123e8:	ldr	r3, [r0, #20]
   123ec:	ldr	r2, [r0, #24]
   123f0:	cmp	r3, r2
   123f4:	addcc	r1, r3, #1
   123f8:	movcc	r2, #92	; 0x5c
   123fc:	strcc	r1, [r0, #20]
   12400:	strbcc	r2, [r3]
   12404:	bcs	12658 <__assert_fail@plt+0x1470>
   12408:	ldr	r3, [sl]
   1240c:	lsrs	r3, r3, #1
   12410:	bne	12008 <__assert_fail@plt+0xe20>
   12414:	ldr	r3, [pc, #-428]	; 12270 <__assert_fail@plt+0x1088>
   12418:	ldr	r0, [r3]
   1241c:	ldr	r3, [r0, #20]
   12420:	ldr	r2, [r0, #24]
   12424:	cmp	r3, r2
   12428:	addcc	r1, r3, #1
   1242c:	movcc	r2, #32
   12430:	strcc	r1, [r0, #20]
   12434:	strbcc	r2, [r3]
   12438:	bcs	1264c <__assert_fail@plt+0x1464>
   1243c:	ldr	r3, [pc, #-468]	; 12270 <__assert_fail@plt+0x1088>
   12440:	ldr	r0, [r3]
   12444:	ldr	r2, [r0, #24]
   12448:	ldr	r3, [r0, #20]
   1244c:	cmp	r3, r2
   12450:	addcc	r2, r3, #1
   12454:	strcc	r2, [r0, #20]
   12458:	ldrcc	r2, [sp, #112]	; 0x70
   1245c:	strbcc	r2, [r3]
   12460:	bcs	12640 <__assert_fail@plt+0x1458>
   12464:	mov	r1, r4
   12468:	ldr	r0, [sp, #68]	; 0x44
   1246c:	bl	1290c <__assert_fail@plt+0x1724>
   12470:	b	12048 <__assert_fail@plt+0xe60>
   12474:	mov	r1, r8
   12478:	mov	r0, r4
   1247c:	bl	1290c <__assert_fail@plt+0x1724>
   12480:	ldr	r3, [sp, #52]	; 0x34
   12484:	str	r3, [sp, #100]	; 0x64
   12488:	ldrb	r0, [sl, #19]
   1248c:	cmp	r0, #0
   12490:	bne	11ae0 <__assert_fail@plt+0x8f8>
   12494:	mov	r2, #5
   12498:	ldr	r1, [pc, #-584]	; 12258 <__assert_fail@plt+0x1070>
   1249c:	b	11acc <__assert_fail@plt+0x8e4>
   124a0:	ldr	r2, [pc, #-588]	; 1225c <__assert_fail@plt+0x1074>
   124a4:	mov	r3, #0
   124a8:	bl	1cbdc <__assert_fail@plt+0xb9f4>
   124ac:	add	r3, r2, #999424	; 0xf4000
   124b0:	add	r3, r3, #576	; 0x240
   124b4:	b	11bf8 <__assert_fail@plt+0xa10>
   124b8:	ldr	r2, [pc, #-612]	; 1225c <__assert_fail@plt+0x1074>
   124bc:	mov	r3, #0
   124c0:	bl	1cbdc <__assert_fail@plt+0xb9f4>
   124c4:	add	r3, r2, #999424	; 0xf4000
   124c8:	add	r3, r3, #576	; 0x240
   124cc:	b	11ba4 <__assert_fail@plt+0x9bc>
   124d0:	ldr	r2, [pc, #-636]	; 1225c <__assert_fail@plt+0x1074>
   124d4:	mov	r3, #0
   124d8:	bl	1cbdc <__assert_fail@plt+0xb9f4>
   124dc:	add	r3, r2, #999424	; 0xf4000
   124e0:	add	r3, r3, #576	; 0x240
   124e4:	b	11b50 <__assert_fail@plt+0x968>
   124e8:	ldr	r3, [sp, #36]	; 0x24
   124ec:	cmp	r3, #0
   124f0:	moveq	r2, #5
   124f4:	ldreq	r1, [pc, #-668]	; 12260 <__assert_fail@plt+0x1078>
   124f8:	bne	115ec <__assert_fail@plt+0x404>
   124fc:	b	1155c <__assert_fail@plt+0x374>
   12500:	ldr	r6, [sp, #100]	; 0x64
   12504:	mov	r2, #5
   12508:	ldr	r1, [pc, #-684]	; 12264 <__assert_fail@plt+0x107c>
   1250c:	mov	r0, r6
   12510:	bl	10fcc <dcgettext@plt>
   12514:	ldr	r2, [sp, #68]	; 0x44
   12518:	mov	r1, #3
   1251c:	mov	r5, r0
   12520:	mov	r0, r6
   12524:	bl	1a9f4 <__assert_fail@plt+0x980c>
   12528:	mov	r2, r5
   1252c:	mov	r1, r6
   12530:	mov	r3, r0
   12534:	mov	r0, r6
   12538:	bl	1105c <error@plt>
   1253c:	b	11c80 <__assert_fail@plt+0xa98>
   12540:	ldr	r3, [pc, #-736]	; 12268 <__assert_fail@plt+0x1080>
   12544:	ldr	r0, [r3]
   12548:	bl	1c570 <__assert_fail@plt+0xb388>
   1254c:	cmn	r0, #1
   12550:	bne	11e58 <__assert_fail@plt+0xc70>
   12554:	bl	110f8 <__errno_location@plt>
   12558:	ldr	r1, [pc, #-756]	; 1226c <__assert_fail@plt+0x1084>
   1255c:	mov	r2, #5
   12560:	ldr	r4, [r0]
   12564:	mov	r0, #0
   12568:	bl	10fcc <dcgettext@plt>
   1256c:	mov	r1, r4
   12570:	mov	r2, r0
   12574:	mov	r0, #1
   12578:	bl	1105c <error@plt>
   1257c:	mov	r1, #10
   12580:	ldr	r0, [sp, #68]	; 0x44
   12584:	bl	110ec <strchr@plt>
   12588:	cmp	r0, #0
   1258c:	bne	11fdc <__assert_fail@plt+0xdf4>
   12590:	b	11fec <__assert_fail@plt+0xe04>
   12594:	mov	r5, #0
   12598:	b	12354 <__assert_fail@plt+0x116c>
   1259c:	sub	r1, r7, r1
   125a0:	mov	r0, r4
   125a4:	bl	12878 <__assert_fail@plt+0x1690>
   125a8:	adds	r0, r0, #0
   125ac:	movne	r0, #1
   125b0:	b	12310 <__assert_fail@plt+0x1128>
   125b4:	mov	r1, r7
   125b8:	mov	r0, r4
   125bc:	bl	12878 <__assert_fail@plt+0x1690>
   125c0:	cmp	r0, #0
   125c4:	bne	122a8 <__assert_fail@plt+0x10c0>
   125c8:	b	11850 <__assert_fail@plt+0x668>
   125cc:	mov	r3, #1
   125d0:	str	r3, [sp, #84]	; 0x54
   125d4:	b	11e4c <__assert_fail@plt+0xc64>
   125d8:	mov	r1, #92	; 0x5c
   125dc:	bl	11170 <__overflow@plt>
   125e0:	b	11ab4 <__assert_fail@plt+0x8cc>
   125e4:	ldr	r3, [pc, #-892]	; 12270 <__assert_fail@plt+0x1088>
   125e8:	mov	r2, #2
   125ec:	mov	r4, r3
   125f0:	mov	r1, #1
   125f4:	ldr	r3, [r3]
   125f8:	ldr	r0, [pc, #-908]	; 12274 <__assert_fail@plt+0x108c>
   125fc:	bl	10fb4 <fwrite_unlocked@plt>
   12600:	mov	r1, r5
   12604:	ldr	r0, [sp, #68]	; 0x44
   12608:	bl	1290c <__assert_fail@plt+0x1724>
   1260c:	ldr	r3, [r4]
   12610:	mov	r2, #4
   12614:	mov	r1, #1
   12618:	ldr	r0, [pc, #-936]	; 12278 <__assert_fail@plt+0x1090>
   1261c:	bl	10fb4 <fwrite_unlocked@plt>
   12620:	ldr	r3, [sl]
   12624:	mov	r4, r5
   12628:	lsrs	r3, r3, #1
   1262c:	bne	12008 <__assert_fail@plt+0xe20>
   12630:	b	1203c <__assert_fail@plt+0xe54>
   12634:	mov	r1, #92	; 0x5c
   12638:	bl	11170 <__overflow@plt>
   1263c:	b	11dbc <__assert_fail@plt+0xbd4>
   12640:	ldr	r1, [sp, #116]	; 0x74
   12644:	bl	11170 <__overflow@plt>
   12648:	b	12464 <__assert_fail@plt+0x127c>
   1264c:	mov	r1, #32
   12650:	bl	11170 <__overflow@plt>
   12654:	b	1243c <__assert_fail@plt+0x1254>
   12658:	mov	r1, #92	; 0x5c
   1265c:	bl	11170 <__overflow@plt>
   12660:	b	12408 <__assert_fail@plt+0x1220>
   12664:	mov	r1, #92	; 0x5c
   12668:	bl	11170 <__overflow@plt>
   1266c:	ldr	r5, [sp, #48]	; 0x30
   12670:	b	12354 <__assert_fail@plt+0x116c>
   12674:	ldrb	r3, [sl, #17]
   12678:	cmp	r3, #0
   1267c:	beq	11534 <__assert_fail@plt+0x34c>
   12680:	ldr	r3, [sp, #36]	; 0x24
   12684:	cmp	r3, #0
   12688:	bne	115c4 <__assert_fail@plt+0x3dc>
   1268c:	mov	r2, #5
   12690:	ldr	r1, [pc, #-1052]	; 1227c <__assert_fail@plt+0x1094>
   12694:	b	1155c <__assert_fail@plt+0x374>
   12698:	mov	r2, #5
   1269c:	ldr	r1, [pc, #-1060]	; 12280 <__assert_fail@plt+0x1098>
   126a0:	b	1155c <__assert_fail@plt+0x374>
   126a4:	bl	10fd8 <__stack_chk_fail@plt>
   126a8:	mov	r2, #5
   126ac:	ldr	r1, [pc, #-1072]	; 12284 <__assert_fail@plt+0x109c>
   126b0:	mov	r0, r4
   126b4:	bl	10fcc <dcgettext@plt>
   126b8:	mov	r6, #512	; 0x200
   126bc:	mov	r7, #0
   126c0:	mov	r5, r0
   126c4:	mov	r0, fp
   126c8:	bl	1abc0 <__assert_fail@plt+0x99d8>
   126cc:	mov	r2, r5
   126d0:	mov	r1, r4
   126d4:	mov	r3, r0
   126d8:	mov	r0, r4
   126dc:	bl	1105c <error@plt>
   126e0:	ldr	r1, [pc, #-1120]	; 12288 <__assert_fail@plt+0x10a0>
   126e4:	mov	r2, #5
   126e8:	mov	r0, r4
   126ec:	bl	10fcc <dcgettext@plt>
   126f0:	ldr	r3, [sl, #28]
   126f4:	ldr	r2, [pc, #-1136]	; 1228c <__assert_fail@plt+0x10a4>
   126f8:	add	r3, r2, r3, lsl #2
   126fc:	mov	r5, r0
   12700:	ldr	r0, [r3, #280]	; 0x118
   12704:	bl	1abc0 <__assert_fail@plt+0x99d8>
   12708:	mov	r2, r5
   1270c:	mov	r1, r4
   12710:	strd	r6, [sp]
   12714:	mov	r3, r0
   12718:	mov	r0, #1
   1271c:	bl	1105c <error@plt>
   12720:	mov	r2, #5
   12724:	ldr	r1, [pc, #-1180]	; 12290 <__assert_fail@plt+0x10a8>
   12728:	b	1155c <__assert_fail@plt+0x374>
   1272c:	mov	fp, #0
   12730:	mov	lr, #0
   12734:	pop	{r1}		; (ldr r1, [sp], #4)
   12738:	mov	r2, sp
   1273c:	push	{r2}		; (str r2, [sp, #-4]!)
   12740:	push	{r0}		; (str r0, [sp, #-4]!)
   12744:	ldr	ip, [pc, #16]	; 1275c <__assert_fail@plt+0x1574>
   12748:	push	{ip}		; (str ip, [sp, #-4]!)
   1274c:	ldr	r0, [pc, #12]	; 12760 <__assert_fail@plt+0x1578>
   12750:	ldr	r3, [pc, #12]	; 12764 <__assert_fail@plt+0x157c>
   12754:	bl	11074 <__libc_start_main@plt>
   12758:	bl	111c4 <abort@plt>
   1275c:			; <UNDEFINED> instruction: 0x0001cdb0
   12760:	strdeq	r1, [r1], -r8
   12764:	andeq	ip, r1, r0, asr sp
   12768:	ldr	r3, [pc, #20]	; 12784 <__assert_fail@plt+0x159c>
   1276c:	ldr	r2, [pc, #20]	; 12788 <__assert_fail@plt+0x15a0>
   12770:	add	r3, pc, r3
   12774:	ldr	r2, [r3, r2]
   12778:	cmp	r2, #0
   1277c:	bxeq	lr
   12780:	b	11098 <__gmon_start__@plt>
   12784:	andeq	ip, r1, r8, lsl #17
   12788:	andeq	r0, r0, r4, lsl #2
   1278c:	ldr	r0, [pc, #24]	; 127ac <__assert_fail@plt+0x15c4>
   12790:	ldr	r3, [pc, #24]	; 127b0 <__assert_fail@plt+0x15c8>
   12794:	cmp	r3, r0
   12798:	bxeq	lr
   1279c:	ldr	r3, [pc, #16]	; 127b4 <__assert_fail@plt+0x15cc>
   127a0:	cmp	r3, #0
   127a4:	bxeq	lr
   127a8:	bx	r3
   127ac:	andeq	pc, r2, r8, ror #2
   127b0:	andeq	pc, r2, r8, ror #2
   127b4:	andeq	r0, r0, r0
   127b8:	ldr	r0, [pc, #36]	; 127e4 <__assert_fail@plt+0x15fc>
   127bc:	ldr	r1, [pc, #36]	; 127e8 <__assert_fail@plt+0x1600>
   127c0:	sub	r1, r1, r0
   127c4:	asr	r1, r1, #2
   127c8:	add	r1, r1, r1, lsr #31
   127cc:	asrs	r1, r1, #1
   127d0:	bxeq	lr
   127d4:	ldr	r3, [pc, #16]	; 127ec <__assert_fail@plt+0x1604>
   127d8:	cmp	r3, #0
   127dc:	bxeq	lr
   127e0:	bx	r3
   127e4:	andeq	pc, r2, r8, ror #2
   127e8:	andeq	pc, r2, r8, ror #2
   127ec:	andeq	r0, r0, r0
   127f0:	push	{r4, lr}
   127f4:	ldr	r4, [pc, #24]	; 12814 <__assert_fail@plt+0x162c>
   127f8:	ldrb	r3, [r4]
   127fc:	cmp	r3, #0
   12800:	popne	{r4, pc}
   12804:	bl	1278c <__assert_fail@plt+0x15a4>
   12808:	mov	r3, #1
   1280c:	strb	r3, [r4]
   12810:	pop	{r4, pc}
   12814:	andeq	pc, r2, ip, lsl #3
   12818:	b	127b8 <__assert_fail@plt+0x15d0>
   1281c:	ldr	r3, [pc, #80]	; 12874 <__assert_fail@plt+0x168c>
   12820:	push	{r4, r5, r6, lr}
   12824:	mov	r5, r0
   12828:	ldr	r4, [r3]
   1282c:	cmp	r4, #0
   12830:	beq	12864 <__assert_fail@plt+0x167c>
   12834:	bl	110b0 <__ctype_b_loc@plt>
   12838:	mov	r3, r5
   1283c:	add	r1, r5, r4
   12840:	ldr	ip, [r0]
   12844:	ldrb	r2, [r3], #1
   12848:	mov	r5, r3
   1284c:	lsl	r2, r2, #1
   12850:	ldrh	r0, [ip, r2]
   12854:	ands	r0, r0, #4096	; 0x1000
   12858:	popeq	{r4, r5, r6, pc}
   1285c:	cmp	r1, r3
   12860:	bne	12844 <__assert_fail@plt+0x165c>
   12864:	ldrb	r0, [r5]
   12868:	clz	r0, r0
   1286c:	lsr	r0, r0, #5
   12870:	pop	{r4, r5, r6, pc}
   12874:	muleq	r2, r0, r1
   12878:	cmp	r1, #0
   1287c:	bxeq	lr
   12880:	push	{r4, r5, lr}
   12884:	add	ip, r0, #1
   12888:	mov	r2, #0
   1288c:	sub	r4, r1, #1
   12890:	mov	r5, #10
   12894:	ldrb	r3, [r0, r2]
   12898:	cmp	r3, #0
   1289c:	beq	128cc <__assert_fail@plt+0x16e4>
   128a0:	cmp	r3, #92	; 0x5c
   128a4:	mov	lr, ip
   128a8:	bne	128d4 <__assert_fail@plt+0x16ec>
   128ac:	cmp	r4, r2
   128b0:	add	r2, r2, #1
   128b4:	beq	128cc <__assert_fail@plt+0x16e4>
   128b8:	ldrb	r3, [r0, r2]
   128bc:	cmp	r3, #92	; 0x5c
   128c0:	beq	12904 <__assert_fail@plt+0x171c>
   128c4:	cmp	r3, #110	; 0x6e
   128c8:	beq	128fc <__assert_fail@plt+0x1714>
   128cc:	mov	r0, #0
   128d0:	pop	{r4, r5, pc}
   128d4:	strb	r3, [ip, #-1]
   128d8:	add	r2, r2, #1
   128dc:	cmp	r1, r2
   128e0:	add	ip, ip, #1
   128e4:	bhi	12894 <__assert_fail@plt+0x16ac>
   128e8:	add	r1, r0, r1
   128ec:	cmp	lr, r1
   128f0:	movcc	r3, #0
   128f4:	strbcc	r3, [lr]
   128f8:	pop	{r4, r5, pc}
   128fc:	strb	r5, [ip, #-1]
   12900:	b	128d8 <__assert_fail@plt+0x16f0>
   12904:	strb	r3, [ip, #-1]
   12908:	b	128d8 <__assert_fail@plt+0x16f0>
   1290c:	cmp	r1, #0
   12910:	beq	129b4 <__assert_fail@plt+0x17cc>
   12914:	push	{r4, r5, r6, r7, r8, lr}
   12918:	mov	r4, r0
   1291c:	ldrb	ip, [r0]
   12920:	cmp	ip, #0
   12924:	popeq	{r4, r5, r6, r7, r8, pc}
   12928:	ldr	r6, [pc, #144]	; 129c0 <__assert_fail@plt+0x17d8>
   1292c:	ldr	r7, [pc, #144]	; 129c4 <__assert_fail@plt+0x17dc>
   12930:	ldr	r5, [pc, #144]	; 129c8 <__assert_fail@plt+0x17e0>
   12934:	b	12960 <__assert_fail@plt+0x1778>
   12938:	ldr	r3, [lr, #20]
   1293c:	ldr	r2, [lr, #24]
   12940:	add	r1, r3, #1
   12944:	cmp	r3, r2
   12948:	strcc	r1, [lr, #20]
   1294c:	strbcc	ip, [r3]
   12950:	bcs	129a4 <__assert_fail@plt+0x17bc>
   12954:	ldrb	ip, [r4, #1]!
   12958:	cmp	ip, #0
   1295c:	popeq	{r4, r5, r6, r7, r8, pc}
   12960:	cmp	ip, #10
   12964:	ldr	lr, [r6]
   12968:	beq	1298c <__assert_fail@plt+0x17a4>
   1296c:	cmp	ip, #92	; 0x5c
   12970:	mov	r3, lr
   12974:	mov	r2, #2
   12978:	mov	r1, #1
   1297c:	mov	r0, r5
   12980:	bne	12938 <__assert_fail@plt+0x1750>
   12984:	bl	10fb4 <fwrite_unlocked@plt>
   12988:	b	12954 <__assert_fail@plt+0x176c>
   1298c:	mov	r3, lr
   12990:	mov	r2, #2
   12994:	mov	r1, #1
   12998:	mov	r0, r7
   1299c:	bl	10fb4 <fwrite_unlocked@plt>
   129a0:	b	12954 <__assert_fail@plt+0x176c>
   129a4:	mov	r1, ip
   129a8:	mov	r0, lr
   129ac:	bl	11170 <__overflow@plt>
   129b0:	b	12954 <__assert_fail@plt+0x176c>
   129b4:	ldr	r3, [pc, #4]	; 129c0 <__assert_fail@plt+0x17d8>
   129b8:	ldr	r1, [r3]
   129bc:	b	10f24 <fputs_unlocked@plt>
   129c0:	andeq	pc, r2, r4, lsl #3
   129c4:	andeq	ip, r1, r4, lsl pc
   129c8:	andeq	ip, r1, r8, lsl pc
   129cc:	push	{r4, r5, r6, r7, r8, lr}
   129d0:	mov	r7, r1
   129d4:	ldr	r1, [pc, #404]	; 12b70 <__assert_fail@plt+0x1988>
   129d8:	mov	r5, r2
   129dc:	mov	r6, r0
   129e0:	bl	10f48 <strcmp@plt>
   129e4:	mov	r3, #0
   129e8:	strb	r3, [r5]
   129ec:	cmp	r0, r3
   129f0:	bne	12a44 <__assert_fail@plt+0x185c>
   129f4:	ldr	r8, [pc, #376]	; 12b74 <__assert_fail@plt+0x198c>
   129f8:	ldr	r5, [pc, #376]	; 12b78 <__assert_fail@plt+0x1990>
   129fc:	mov	r3, #1
   12a00:	ldr	r4, [r8]
   12a04:	mov	r1, #2
   12a08:	mov	r0, r4
   12a0c:	strb	r3, [r5, #4]
   12a10:	bl	18890 <__assert_fail@plt+0x76a8>
   12a14:	ldr	r3, [r5, #8]
   12a18:	ldr	r2, [r5, #12]
   12a1c:	mov	r1, r7
   12a20:	lsr	r3, r3, #3
   12a24:	orr	r2, r3, r2, lsl #29
   12a28:	mov	r0, r4
   12a2c:	bl	1836c <__assert_fail@plt+0x7184>
   12a30:	cmp	r0, #0
   12a34:	bne	12ad0 <__assert_fail@plt+0x18e8>
   12a38:	mov	r4, #1
   12a3c:	mov	r0, r4
   12a40:	pop	{r4, r5, r6, r7, r8, pc}
   12a44:	ldr	r1, [pc, #304]	; 12b7c <__assert_fail@plt+0x1994>
   12a48:	mov	r0, r6
   12a4c:	bl	188c4 <__assert_fail@plt+0x76dc>
   12a50:	subs	r4, r0, #0
   12a54:	beq	12b1c <__assert_fail@plt+0x1934>
   12a58:	mov	r1, #2
   12a5c:	bl	18890 <__assert_fail@plt+0x76a8>
   12a60:	ldr	r2, [pc, #272]	; 12b78 <__assert_fail@plt+0x1990>
   12a64:	mov	r1, r7
   12a68:	mov	r0, r4
   12a6c:	ldr	r3, [r2, #8]
   12a70:	ldr	r2, [r2, #12]
   12a74:	lsr	r3, r3, #3
   12a78:	orr	r2, r3, r2, lsl #29
   12a7c:	bl	1836c <__assert_fail@plt+0x7184>
   12a80:	subs	r5, r0, #0
   12a84:	ldrne	r8, [pc, #232]	; 12b74 <__assert_fail@plt+0x198c>
   12a88:	bne	12ad0 <__assert_fail@plt+0x18e8>
   12a8c:	mov	r0, r4
   12a90:	bl	1c570 <__assert_fail@plt+0xb388>
   12a94:	cmp	r0, #0
   12a98:	beq	12a38 <__assert_fail@plt+0x1850>
   12a9c:	bl	110f8 <__errno_location@plt>
   12aa0:	mov	r2, r6
   12aa4:	mov	r1, #3
   12aa8:	mov	r4, r5
   12aac:	ldr	r6, [r0]
   12ab0:	mov	r0, r5
   12ab4:	bl	1a9f4 <__assert_fail@plt+0x980c>
   12ab8:	mov	r1, r6
   12abc:	ldr	r2, [pc, #188]	; 12b80 <__assert_fail@plt+0x1998>
   12ac0:	mov	r3, r0
   12ac4:	mov	r0, r5
   12ac8:	bl	1105c <error@plt>
   12acc:	b	12a3c <__assert_fail@plt+0x1854>
   12ad0:	bl	110f8 <__errno_location@plt>
   12ad4:	mov	r2, r6
   12ad8:	mov	r1, #3
   12adc:	ldr	r5, [r0]
   12ae0:	mov	r0, #0
   12ae4:	bl	1a9f4 <__assert_fail@plt+0x980c>
   12ae8:	mov	r1, r5
   12aec:	ldr	r2, [pc, #140]	; 12b80 <__assert_fail@plt+0x1998>
   12af0:	mov	r3, r0
   12af4:	mov	r0, #0
   12af8:	bl	1105c <error@plt>
   12afc:	ldr	r3, [r8]
   12b00:	cmp	r3, r4
   12b04:	moveq	r4, #0
   12b08:	beq	12a3c <__assert_fail@plt+0x1854>
   12b0c:	mov	r0, r4
   12b10:	bl	1c570 <__assert_fail@plt+0xb388>
   12b14:	mov	r4, #0
   12b18:	b	12a3c <__assert_fail@plt+0x1854>
   12b1c:	ldr	r3, [pc, #84]	; 12b78 <__assert_fail@plt+0x1990>
   12b20:	ldrb	r4, [r3, #16]
   12b24:	bl	110f8 <__errno_location@plt>
   12b28:	cmp	r4, #0
   12b2c:	ldr	r7, [r0]
   12b30:	beq	12b44 <__assert_fail@plt+0x195c>
   12b34:	cmp	r7, #2
   12b38:	moveq	r3, #1
   12b3c:	strbeq	r3, [r5]
   12b40:	beq	12a3c <__assert_fail@plt+0x1854>
   12b44:	mov	r2, r6
   12b48:	mov	r1, #3
   12b4c:	mov	r0, #0
   12b50:	bl	1a9f4 <__assert_fail@plt+0x980c>
   12b54:	mov	r1, r7
   12b58:	ldr	r2, [pc, #32]	; 12b80 <__assert_fail@plt+0x1998>
   12b5c:	mov	r4, #0
   12b60:	mov	r3, r0
   12b64:	mov	r0, #0
   12b68:	bl	1105c <error@plt>
   12b6c:	b	12a3c <__assert_fail@plt+0x1854>
   12b70:	andeq	ip, r1, ip, lsl pc
   12b74:	andeq	pc, r2, r0, lsl #3
   12b78:	muleq	r2, r0, r1
   12b7c:	andeq	ip, r1, r0, lsr #30
   12b80:	andeq	sp, r1, r4, asr #12
   12b84:	ldr	r3, [pc, #868]	; 12ef0 <__assert_fail@plt+0x1d08>
   12b88:	push	{r7, lr}
   12b8c:	sub	sp, sp, #72	; 0x48
   12b90:	ldr	r3, [r3]
   12b94:	subs	r4, r0, #0
   12b98:	str	r3, [sp, #68]	; 0x44
   12b9c:	beq	12bd8 <__assert_fail@plt+0x19f0>
   12ba0:	ldr	r3, [pc, #844]	; 12ef4 <__assert_fail@plt+0x1d0c>
   12ba4:	mov	r2, #5
   12ba8:	ldr	r1, [pc, #840]	; 12ef8 <__assert_fail@plt+0x1d10>
   12bac:	mov	r0, #0
   12bb0:	ldr	r5, [r3]
   12bb4:	bl	10fcc <dcgettext@plt>
   12bb8:	ldr	r3, [pc, #828]	; 12efc <__assert_fail@plt+0x1d14>
   12bbc:	mov	r1, #1
   12bc0:	ldr	r3, [r3]
   12bc4:	mov	r2, r0
   12bc8:	mov	r0, r5
   12bcc:	bl	11140 <__fprintf_chk@plt>
   12bd0:	mov	r0, r4
   12bd4:	bl	110bc <exit@plt>
   12bd8:	mov	r2, #5
   12bdc:	ldr	r1, [pc, #796]	; 12f00 <__assert_fail@plt+0x1d18>
   12be0:	bl	10fcc <dcgettext@plt>
   12be4:	ldr	r2, [pc, #784]	; 12efc <__assert_fail@plt+0x1d14>
   12be8:	ldr	r5, [pc, #788]	; 12f04 <__assert_fail@plt+0x1d1c>
   12bec:	mov	r3, #512	; 0x200
   12bf0:	ldr	r2, [r2]
   12bf4:	str	r3, [sp]
   12bf8:	ldr	r3, [pc, #776]	; 12f08 <__assert_fail@plt+0x1d20>
   12bfc:	mov	r1, r0
   12c00:	mov	r0, #1
   12c04:	bl	11128 <__printf_chk@plt>
   12c08:	mov	r2, #5
   12c0c:	ldr	r1, [pc, #760]	; 12f0c <__assert_fail@plt+0x1d24>
   12c10:	mov	r0, r4
   12c14:	bl	10fcc <dcgettext@plt>
   12c18:	ldr	r1, [r5]
   12c1c:	bl	10f24 <fputs_unlocked@plt>
   12c20:	mov	r2, #5
   12c24:	ldr	r1, [pc, #740]	; 12f10 <__assert_fail@plt+0x1d28>
   12c28:	mov	r0, r4
   12c2c:	bl	10fcc <dcgettext@plt>
   12c30:	ldr	r1, [r5]
   12c34:	bl	10f24 <fputs_unlocked@plt>
   12c38:	mov	r2, #5
   12c3c:	ldr	r1, [pc, #720]	; 12f14 <__assert_fail@plt+0x1d2c>
   12c40:	mov	r0, r4
   12c44:	bl	10fcc <dcgettext@plt>
   12c48:	ldr	r2, [pc, #696]	; 12f08 <__assert_fail@plt+0x1d20>
   12c4c:	mov	r1, r0
   12c50:	mov	r0, #1
   12c54:	bl	11128 <__printf_chk@plt>
   12c58:	mov	r2, #5
   12c5c:	ldr	r1, [pc, #692]	; 12f18 <__assert_fail@plt+0x1d30>
   12c60:	mov	r0, r4
   12c64:	bl	10fcc <dcgettext@plt>
   12c68:	ldr	r1, [r5]
   12c6c:	bl	10f24 <fputs_unlocked@plt>
   12c70:	mov	r2, #5
   12c74:	ldr	r1, [pc, #672]	; 12f1c <__assert_fail@plt+0x1d34>
   12c78:	mov	r0, r4
   12c7c:	bl	10fcc <dcgettext@plt>
   12c80:	ldr	r1, [r5]
   12c84:	bl	10f24 <fputs_unlocked@plt>
   12c88:	mov	r2, #5
   12c8c:	ldr	r1, [pc, #652]	; 12f20 <__assert_fail@plt+0x1d38>
   12c90:	mov	r0, r4
   12c94:	bl	10fcc <dcgettext@plt>
   12c98:	ldr	r1, [r5]
   12c9c:	bl	10f24 <fputs_unlocked@plt>
   12ca0:	mov	r2, #5
   12ca4:	ldr	r1, [pc, #632]	; 12f24 <__assert_fail@plt+0x1d3c>
   12ca8:	mov	r0, r4
   12cac:	bl	10fcc <dcgettext@plt>
   12cb0:	ldr	r1, [r5]
   12cb4:	bl	10f24 <fputs_unlocked@plt>
   12cb8:	mov	r2, #5
   12cbc:	ldr	r1, [pc, #612]	; 12f28 <__assert_fail@plt+0x1d40>
   12cc0:	mov	r0, r4
   12cc4:	bl	10fcc <dcgettext@plt>
   12cc8:	ldr	r1, [r5]
   12ccc:	bl	10f24 <fputs_unlocked@plt>
   12cd0:	mov	r2, #5
   12cd4:	ldr	r1, [pc, #592]	; 12f2c <__assert_fail@plt+0x1d44>
   12cd8:	mov	r0, r4
   12cdc:	bl	10fcc <dcgettext@plt>
   12ce0:	ldr	r1, [r5]
   12ce4:	bl	10f24 <fputs_unlocked@plt>
   12ce8:	mov	r2, #5
   12cec:	ldr	r1, [pc, #572]	; 12f30 <__assert_fail@plt+0x1d48>
   12cf0:	mov	r0, r4
   12cf4:	bl	10fcc <dcgettext@plt>
   12cf8:	ldr	r1, [r5]
   12cfc:	bl	10f24 <fputs_unlocked@plt>
   12d00:	mov	r2, #5
   12d04:	ldr	r1, [pc, #552]	; 12f34 <__assert_fail@plt+0x1d4c>
   12d08:	mov	r0, r4
   12d0c:	bl	10fcc <dcgettext@plt>
   12d10:	ldr	r2, [pc, #544]	; 12f38 <__assert_fail@plt+0x1d50>
   12d14:	mov	r1, r0
   12d18:	mov	r0, #1
   12d1c:	bl	11128 <__printf_chk@plt>
   12d20:	ldr	lr, [pc, #532]	; 12f3c <__assert_fail@plt+0x1d54>
   12d24:	add	ip, sp, #12
   12d28:	ldm	lr!, {r0, r1, r2, r3}
   12d2c:	stmia	ip!, {r0, r1, r2, r3}
   12d30:	ldm	lr!, {r0, r1, r2, r3}
   12d34:	ldr	r6, [sp, #12]
   12d38:	stmia	ip!, {r0, r1, r2, r3}
   12d3c:	cmp	r6, #0
   12d40:	ldm	lr!, {r0, r1, r2, r3}
   12d44:	addeq	r5, sp, #12
   12d48:	stmia	ip!, {r0, r1, r2, r3}
   12d4c:	ldm	lr, {r0, r1}
   12d50:	stm	ip, {r0, r1}
   12d54:	beq	12d84 <__assert_fail@plt+0x1b9c>
   12d58:	ldr	r7, [pc, #480]	; 12f40 <__assert_fail@plt+0x1d58>
   12d5c:	add	r5, sp, #12
   12d60:	b	12d70 <__assert_fail@plt+0x1b88>
   12d64:	ldr	r6, [r5, #8]!
   12d68:	cmp	r6, #0
   12d6c:	beq	12d84 <__assert_fail@plt+0x1b9c>
   12d70:	mov	r1, r6
   12d74:	mov	r0, r7
   12d78:	bl	10f48 <strcmp@plt>
   12d7c:	cmp	r0, #0
   12d80:	bne	12d64 <__assert_fail@plt+0x1b7c>
   12d84:	ldr	r5, [r5, #4]
   12d88:	mov	r2, #5
   12d8c:	cmp	r5, #0
   12d90:	ldr	r1, [pc, #428]	; 12f44 <__assert_fail@plt+0x1d5c>
   12d94:	beq	12e3c <__assert_fail@plt+0x1c54>
   12d98:	mov	r0, #0
   12d9c:	bl	10fcc <dcgettext@plt>
   12da0:	ldr	r3, [pc, #416]	; 12f48 <__assert_fail@plt+0x1d60>
   12da4:	ldr	r2, [pc, #416]	; 12f4c <__assert_fail@plt+0x1d64>
   12da8:	mov	r1, r0
   12dac:	mov	r0, #1
   12db0:	bl	11128 <__printf_chk@plt>
   12db4:	mov	r1, #0
   12db8:	mov	r0, #5
   12dbc:	bl	1117c <setlocale@plt>
   12dc0:	cmp	r0, #0
   12dc4:	ldreq	r6, [pc, #372]	; 12f40 <__assert_fail@plt+0x1d58>
   12dc8:	beq	12de4 <__assert_fail@plt+0x1bfc>
   12dcc:	mov	r2, #3
   12dd0:	ldr	r1, [pc, #376]	; 12f50 <__assert_fail@plt+0x1d68>
   12dd4:	bl	111b8 <strncmp@plt>
   12dd8:	ldr	r6, [pc, #352]	; 12f40 <__assert_fail@plt+0x1d58>
   12ddc:	cmp	r0, #0
   12de0:	bne	12ecc <__assert_fail@plt+0x1ce4>
   12de4:	mov	r2, #5
   12de8:	ldr	r1, [pc, #356]	; 12f54 <__assert_fail@plt+0x1d6c>
   12dec:	mov	r0, #0
   12df0:	bl	10fcc <dcgettext@plt>
   12df4:	ldr	r3, [pc, #324]	; 12f40 <__assert_fail@plt+0x1d58>
   12df8:	ldr	r2, [pc, #328]	; 12f48 <__assert_fail@plt+0x1d60>
   12dfc:	mov	r1, r0
   12e00:	mov	r0, #1
   12e04:	bl	11128 <__printf_chk@plt>
   12e08:	mov	r2, #5
   12e0c:	ldr	r1, [pc, #324]	; 12f58 <__assert_fail@plt+0x1d70>
   12e10:	mov	r0, #0
   12e14:	bl	10fcc <dcgettext@plt>
   12e18:	ldr	r2, [pc, #316]	; 12f5c <__assert_fail@plt+0x1d74>
   12e1c:	cmp	r5, r6
   12e20:	ldr	r3, [pc, #312]	; 12f60 <__assert_fail@plt+0x1d78>
   12e24:	movne	r3, r2
   12e28:	mov	r1, r0
   12e2c:	mov	r2, r5
   12e30:	mov	r0, #1
   12e34:	bl	11128 <__printf_chk@plt>
   12e38:	b	12bd0 <__assert_fail@plt+0x19e8>
   12e3c:	mov	r0, r5
   12e40:	bl	10fcc <dcgettext@plt>
   12e44:	ldr	r3, [pc, #252]	; 12f48 <__assert_fail@plt+0x1d60>
   12e48:	ldr	r2, [pc, #252]	; 12f4c <__assert_fail@plt+0x1d64>
   12e4c:	mov	r1, r0
   12e50:	mov	r0, #1
   12e54:	bl	11128 <__printf_chk@plt>
   12e58:	mov	r1, r5
   12e5c:	mov	r0, #5
   12e60:	bl	1117c <setlocale@plt>
   12e64:	cmp	r0, #0
   12e68:	beq	12e80 <__assert_fail@plt+0x1c98>
   12e6c:	mov	r2, #3
   12e70:	ldr	r1, [pc, #216]	; 12f50 <__assert_fail@plt+0x1d68>
   12e74:	bl	111b8 <strncmp@plt>
   12e78:	cmp	r0, #0
   12e7c:	bne	12ec4 <__assert_fail@plt+0x1cdc>
   12e80:	mov	r2, #5
   12e84:	ldr	r1, [pc, #200]	; 12f54 <__assert_fail@plt+0x1d6c>
   12e88:	mov	r0, #0
   12e8c:	bl	10fcc <dcgettext@plt>
   12e90:	ldr	r3, [pc, #168]	; 12f40 <__assert_fail@plt+0x1d58>
   12e94:	ldr	r2, [pc, #172]	; 12f48 <__assert_fail@plt+0x1d60>
   12e98:	mov	r5, r3
   12e9c:	mov	r1, r0
   12ea0:	mov	r0, #1
   12ea4:	bl	11128 <__printf_chk@plt>
   12ea8:	ldr	r1, [pc, #168]	; 12f58 <__assert_fail@plt+0x1d70>
   12eac:	mov	r2, #5
   12eb0:	mov	r0, #0
   12eb4:	bl	10fcc <dcgettext@plt>
   12eb8:	ldr	r3, [pc, #160]	; 12f60 <__assert_fail@plt+0x1d78>
   12ebc:	mov	r1, r0
   12ec0:	b	12e2c <__assert_fail@plt+0x1c44>
   12ec4:	ldr	r6, [pc, #116]	; 12f40 <__assert_fail@plt+0x1d58>
   12ec8:	mov	r5, r6
   12ecc:	mov	r2, #5
   12ed0:	ldr	r1, [pc, #140]	; 12f64 <__assert_fail@plt+0x1d7c>
   12ed4:	mov	r0, #0
   12ed8:	bl	10fcc <dcgettext@plt>
   12edc:	ldr	r2, [pc, #92]	; 12f40 <__assert_fail@plt+0x1d58>
   12ee0:	mov	r1, r0
   12ee4:	mov	r0, #1
   12ee8:	bl	11128 <__printf_chk@plt>
   12eec:	b	12de4 <__assert_fail@plt+0x1bfc>
   12ef0:	andeq	lr, r2, r8, lsl #30
   12ef4:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   12ef8:	andeq	ip, r1, ip, lsr #30
   12efc:			; <UNDEFINED> instruction: 0x0002f1b8
   12f00:	andeq	ip, r1, r4, asr pc
   12f04:	andeq	pc, r2, r4, lsl #3
   12f08:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f0c:	andeq	ip, r1, r4, lsr #31
   12f10:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12f14:	andeq	sp, r1, ip
   12f18:	andeq	sp, r1, r0, asr r0
   12f1c:	andeq	sp, r1, r8, ror #1
   12f20:	andeq	sp, r1, ip, lsl r1
   12f24:	andeq	sp, r1, r0, asr r1
   12f28:	andeq	sp, r1, ip, asr #3
   12f2c:	andeq	sp, r1, r0, lsl #7
   12f30:			; <UNDEFINED> instruction: 0x0001d3b0
   12f34:	andeq	sp, r1, r8, ror #7
   12f38:	andeq	sp, r1, r4, lsl r5
   12f3c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12f40:	andeq	ip, r1, r4, lsr #30
   12f44:	andeq	sp, r1, r0, lsr #10
   12f48:	andeq	sp, r1, r8, lsr r5
   12f4c:	andeq	sp, r1, r0, ror #10
   12f50:	andeq	sp, r1, r0, ror r5
   12f54:			; <UNDEFINED> instruction: 0x0001d5bc
   12f58:	ldrdeq	sp, [r1], -ip
   12f5c:	andeq	sp, r1, r0, lsl r5
   12f60:	andeq	sp, r1, ip, lsl #22
   12f64:	andeq	sp, r1, r4, ror r5
   12f68:	ldr	r3, [pc, #4088]	; 13f68 <__assert_fail@plt+0x2d80>
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	sub	sp, sp, #540	; 0x21c
   12f74:	ldr	r3, [r3]
   12f78:	add	ip, sp, #272	; 0x110
   12f7c:	add	r9, sp, #400	; 0x190
   12f80:	str	r3, [sp, #532]	; 0x214
   12f84:	ldrb	r8, [r1, #1]
   12f88:	ldrb	r7, [r1, #5]
   12f8c:	ldrb	r2, [r1]
   12f90:	ldrb	r6, [r1, #2]
   12f94:	ldrb	r3, [r1, #4]
   12f98:	ldrb	r5, [r1, #6]
   12f9c:	ldrb	r4, [r1, #3]
   12fa0:	ldrb	lr, [r1, #7]
   12fa4:	orr	r2, r2, r8, lsl #8
   12fa8:	orr	r3, r3, r7, lsl #8
   12fac:	orr	r2, r2, r6, lsl #16
   12fb0:	orr	r3, r3, r5, lsl #16
   12fb4:	orr	r2, r2, r4, lsl #24
   12fb8:	orr	r3, r3, lr, lsl #24
   12fbc:	add	ip, ip, #8
   12fc0:	strd	r2, [ip, #-8]
   12fc4:	cmp	r9, ip
   12fc8:	add	r1, r1, #8
   12fcc:	bne	12f84 <__assert_fail@plt+0x1d9c>
   12fd0:	add	r3, r0, #56	; 0x38
   12fd4:	mov	ip, r9
   12fd8:	mov	lr, r3
   12fdc:	sub	r1, r0, #8
   12fe0:	str	r9, [sp, #188]	; 0xbc
   12fe4:	str	r1, [sp, #192]	; 0xc0
   12fe8:	str	r3, [sp, #184]	; 0xb8
   12fec:	ldrd	r2, [r1, #8]!
   12ff0:	cmp	lr, r1
   12ff4:	strd	r2, [ip], #8
   12ff8:	bne	12fec <__assert_fail@plt+0x1e04>
   12ffc:	ldr	r4, [sp, #432]	; 0x1b0
   13000:	ldr	ip, [sp, #400]	; 0x190
   13004:	ldr	r1, [sp, #272]	; 0x110
   13008:	ldr	r3, [sp, #436]	; 0x1b4
   1300c:	ldr	r7, [sp, #404]	; 0x194
   13010:	ldr	lr, [sp, #276]	; 0x114
   13014:	adds	ip, r4, ip
   13018:	adc	r7, r3, r7
   1301c:	ldr	r2, [r0, #68]	; 0x44
   13020:	adds	ip, ip, r1
   13024:	adc	r7, r7, lr
   13028:	str	lr, [sp, #24]
   1302c:	ldr	lr, [r0, #64]	; 0x40
   13030:	eor	r2, r2, r7
   13034:	eor	lr, lr, ip
   13038:	eor	r2, r2, #1358954496	; 0x51000000
   1303c:	eor	r2, r2, #937984	; 0xe5000
   13040:	eor	lr, lr, #-1392508928	; 0xad000000
   13044:	str	r1, [sp, #20]
   13048:	eor	r2, r2, #636	; 0x27c
   1304c:	ldr	r1, [pc, #3864]	; 13f6c <__assert_fail@plt+0x2d84>
   13050:	eor	lr, lr, #15073280	; 0xe60000
   13054:	eor	r2, r2, #3
   13058:	eor	lr, lr, #33280	; 0x8200
   1305c:	ldr	r6, [pc, #3852]	; 13f70 <__assert_fail@plt+0x2d88>
   13060:	adds	r1, r2, r1
   13064:	eor	lr, lr, #209	; 0xd1
   13068:	adc	r6, lr, r6
   1306c:	eor	r4, r4, r1
   13070:	ldr	r8, [sp, #280]	; 0x118
   13074:	eor	r3, r3, r6
   13078:	ldr	r9, [sp, #284]	; 0x11c
   1307c:	lsr	r5, r4, #24
   13080:	orr	sl, r5, r3, lsl #8
   13084:	adds	ip, ip, r8
   13088:	lsr	r3, r3, #24
   1308c:	orr	r4, r3, r4, lsl #8
   13090:	adc	r7, r7, r9
   13094:	adds	r3, ip, sl
   13098:	adc	ip, r7, r4
   1309c:	eor	r2, r2, r3
   130a0:	str	r3, [sp, #8]
   130a4:	eor	r3, ip, lr
   130a8:	str	ip, [sp, #84]	; 0x54
   130ac:	lsr	ip, r2, #16
   130b0:	orr	fp, ip, r3, lsl #16
   130b4:	adds	r5, r1, fp
   130b8:	ldr	lr, [sp, #408]	; 0x198
   130bc:	str	sl, [sp, #220]	; 0xdc
   130c0:	lsr	r3, r3, #16
   130c4:	ldr	sl, [sp, #440]	; 0x1b8
   130c8:	orr	r7, r3, r2, lsl #16
   130cc:	ldr	ip, [sp, #444]	; 0x1bc
   130d0:	ldr	r2, [sp, #412]	; 0x19c
   130d4:	str	r5, [sp, #116]	; 0x74
   130d8:	ldr	r5, [sp, #288]	; 0x120
   130dc:	adc	r6, r6, r7
   130e0:	str	r7, [sp, #160]	; 0xa0
   130e4:	adds	r3, sl, lr
   130e8:	ldr	r7, [sp, #292]	; 0x124
   130ec:	str	r4, [sp, #228]	; 0xe4
   130f0:	str	r6, [sp, #12]
   130f4:	ldr	r4, [r0, #76]	; 0x4c
   130f8:	adc	r6, ip, r2
   130fc:	adds	r3, r3, r5
   13100:	adc	r6, r6, r7
   13104:	ldr	r2, [r0, #72]	; 0x48
   13108:	eor	r4, r4, r6
   1310c:	eor	r2, r2, r3
   13110:	eor	r4, r4, #-1694498816	; 0x9b000000
   13114:	eor	r4, r4, #352256	; 0x56000
   13118:	eor	r2, r2, #721420288	; 0x2b000000
   1311c:	eor	r4, r4, #2176	; 0x880
   13120:	ldr	lr, [pc, #3660]	; 13f74 <__assert_fail@plt+0x2d8c>
   13124:	eor	r2, r2, #4079616	; 0x3e4000
   13128:	eor	r4, r4, #12
   1312c:	eor	r2, r2, #11264	; 0x2c00
   13130:	ldr	r1, [pc, #3648]	; 13f78 <__assert_fail@plt+0x2d90>
   13134:	adds	lr, r4, lr
   13138:	eor	r2, r2, #31
   1313c:	adc	r1, r2, r1
   13140:	str	r8, [sp, #28]
   13144:	eor	r8, sl, lr
   13148:	eor	ip, ip, r1
   1314c:	str	r9, [sp, #32]
   13150:	str	fp, [sp, #148]	; 0x94
   13154:	str	r5, [sp, #36]	; 0x24
   13158:	str	r7, [sp, #40]	; 0x28
   1315c:	ldr	sl, [sp, #296]	; 0x128
   13160:	lsr	r5, r8, #24
   13164:	ldr	r9, [sp, #300]	; 0x12c
   13168:	adds	r3, r3, sl
   1316c:	orr	r5, r5, ip, lsl #8
   13170:	lsr	ip, ip, #24
   13174:	str	sl, [sp, #44]	; 0x2c
   13178:	orr	sl, ip, r8, lsl #8
   1317c:	adc	ip, r6, r9
   13180:	adds	r6, r3, r5
   13184:	adc	r8, ip, sl
   13188:	eor	r4, r4, r6
   1318c:	eor	r2, r2, r8
   13190:	lsr	r3, r4, #16
   13194:	orr	fp, r3, r2, lsl #16
   13198:	adds	lr, lr, fp
   1319c:	ldr	r7, [sp, #448]	; 0x1c0
   131a0:	lsr	r2, r2, #16
   131a4:	ldr	ip, [sp, #416]	; 0x1a0
   131a8:	orr	r3, r2, r4, lsl #16
   131ac:	str	r6, [sp, #96]	; 0x60
   131b0:	ldr	r4, [sp, #304]	; 0x130
   131b4:	str	lr, [sp, #16]
   131b8:	ldr	r6, [sp, #420]	; 0x1a4
   131bc:	ldr	lr, [sp, #452]	; 0x1c4
   131c0:	adc	r1, r1, r3
   131c4:	str	r3, [sp, #156]	; 0x9c
   131c8:	adds	ip, r7, ip
   131cc:	ldr	r3, [sp, #308]	; 0x134
   131d0:	adc	r6, lr, r6
   131d4:	ldr	r2, [r0, #84]	; 0x54
   131d8:	adds	ip, ip, r4
   131dc:	adc	r6, r6, r3
   131e0:	str	r3, [sp, #56]	; 0x38
   131e4:	ldr	r3, [r0, #80]	; 0x50
   131e8:	eor	r2, r2, r6
   131ec:	eor	r3, r3, ip
   131f0:	eor	r2, r2, #528482304	; 0x1f800000
   131f4:	eor	r2, r2, #251904	; 0x3d800
   131f8:	eor	r3, r3, #-83886080	; 0xfb000000
   131fc:	str	r1, [sp, #140]	; 0x8c
   13200:	eor	r2, r2, #424	; 0x1a8
   13204:	ldr	r1, [pc, #3440]	; 13f7c <__assert_fail@plt+0x2d94>
   13208:	eor	r3, r3, #4259840	; 0x410000
   1320c:	str	r4, [sp, #52]	; 0x34
   13210:	eor	r2, r2, #3
   13214:	eor	r3, r3, #48384	; 0xbd00
   13218:	ldr	r4, [pc, #3424]	; 13f80 <__assert_fail@plt+0x2d98>
   1321c:	adds	r1, r2, r1
   13220:	eor	r3, r3, #107	; 0x6b
   13224:	eor	r7, r7, r1
   13228:	adc	r4, r3, r4
   1322c:	eor	lr, lr, r4
   13230:	str	r8, [sp, #100]	; 0x64
   13234:	lsr	r8, r7, #24
   13238:	orr	r8, r8, lr, lsl #8
   1323c:	str	r9, [sp, #48]	; 0x30
   13240:	ldr	r9, [sp, #312]	; 0x138
   13244:	str	r8, [sp, #92]	; 0x5c
   13248:	lsr	lr, lr, #24
   1324c:	adds	ip, ip, r9
   13250:	str	fp, [sp, #152]	; 0x98
   13254:	str	r9, [sp, #60]	; 0x3c
   13258:	ldr	fp, [sp, #316]	; 0x13c
   1325c:	orr	r9, lr, r7, lsl #8
   13260:	ldr	lr, [sp, #92]	; 0x5c
   13264:	adc	r6, r6, fp
   13268:	adds	r7, ip, lr
   1326c:	adc	lr, r6, r9
   13270:	eor	r2, r2, r7
   13274:	eor	r3, r3, lr
   13278:	lsr	ip, r2, #16
   1327c:	str	r9, [sp, #104]	; 0x68
   13280:	orr	r9, ip, r3, lsl #16
   13284:	lsr	r3, r3, #16
   13288:	adds	r1, r1, r9
   1328c:	ldr	r8, [sp, #456]	; 0x1c8
   13290:	orr	r2, r3, r2, lsl #16
   13294:	ldr	r6, [sp, #460]	; 0x1cc
   13298:	str	fp, [sp, #64]	; 0x40
   1329c:	str	r7, [sp, #112]	; 0x70
   132a0:	ldr	fp, [sp, #320]	; 0x140
   132a4:	str	lr, [sp, #120]	; 0x78
   132a8:	ldr	ip, [sp, #424]	; 0x1a8
   132ac:	adc	r4, r4, r2
   132b0:	str	r9, [sp, #208]	; 0xd0
   132b4:	str	r2, [sp, #212]	; 0xd4
   132b8:	ldr	r9, [sp, #428]	; 0x1ac
   132bc:	ldr	r2, [sp, #324]	; 0x144
   132c0:	adds	ip, r8, ip
   132c4:	mov	r7, r2
   132c8:	adc	r9, r6, r9
   132cc:	ldr	r3, [r0, #92]	; 0x5c
   132d0:	adds	ip, ip, fp
   132d4:	adc	r9, r9, r7
   132d8:	ldr	r0, [r0, #88]	; 0x58
   132dc:	eor	r3, r3, r9
   132e0:	eor	r0, r0, ip
   132e4:	eor	r3, r3, #1526726656	; 0x5b000000
   132e8:	eor	r2, r0, #322961408	; 0x13400000
   132ec:	eor	r3, r3, #14680064	; 0xe00000
   132f0:	eor	r0, r2, #4063232	; 0x3e0000
   132f4:	eor	r3, r3, #52480	; 0xcd00
   132f8:	ldr	r2, [pc, #3204]	; 13f84 <__assert_fail@plt+0x2d9c>
   132fc:	eor	r3, r3, #25
   13300:	eor	r0, r0, #8512	; 0x2140
   13304:	ldr	lr, [pc, #3196]	; 13f88 <__assert_fail@plt+0x2da0>
   13308:	adds	r2, r3, r2
   1330c:	eor	r0, r0, #57	; 0x39
   13310:	adc	lr, r0, lr
   13314:	str	r7, [sp, #72]	; 0x48
   13318:	eor	r7, r8, r2
   1331c:	eor	r6, r6, lr
   13320:	str	r0, [sp, #80]	; 0x50
   13324:	lsr	r8, r7, #24
   13328:	ldr	r0, [sp, #332]	; 0x14c
   1332c:	orr	r8, r8, r6, lsl #8
   13330:	lsr	r6, r6, #24
   13334:	str	r0, [sp, #4]
   13338:	str	fp, [sp, #68]	; 0x44
   1333c:	orr	r0, r6, r7, lsl #8
   13340:	ldr	fp, [sp, #328]	; 0x148
   13344:	mov	r6, r0
   13348:	ldr	r0, [sp, #4]
   1334c:	adds	ip, ip, fp
   13350:	adc	r9, r9, r0
   13354:	adds	r0, ip, r8
   13358:	mov	ip, r0
   1335c:	eor	r7, ip, r3
   13360:	ldr	r3, [sp, #80]	; 0x50
   13364:	adc	r0, r9, r6
   13368:	eor	r3, r3, r0
   1336c:	str	r0, [sp, #164]	; 0xa4
   13370:	ldr	r0, [sp, #16]
   13374:	str	ip, [sp, #124]	; 0x7c
   13378:	ldr	ip, [sp, #140]	; 0x8c
   1337c:	eor	r5, r5, r0
   13380:	str	r6, [sp, #136]	; 0x88
   13384:	ldr	r6, [sp, #336]	; 0x150
   13388:	eor	ip, ip, sl
   1338c:	lsr	r0, r7, #16
   13390:	mov	sl, r6
   13394:	orr	r0, r0, r3, lsl #16
   13398:	lsl	r6, r5, #1
   1339c:	lsr	r3, r3, #16
   133a0:	adds	r2, r2, r0
   133a4:	orr	r3, r3, r7, lsl #16
   133a8:	orr	r6, r6, ip, lsr #31
   133ac:	lsl	r7, ip, #1
   133b0:	str	sl, [sp, #80]	; 0x50
   133b4:	mov	ip, sl
   133b8:	ldr	sl, [sp, #8]
   133bc:	ldr	r9, [sp, #340]	; 0x154
   133c0:	str	r2, [sp, #108]	; 0x6c
   133c4:	ldr	r2, [sp, #84]	; 0x54
   133c8:	adc	lr, lr, r3
   133cc:	adds	ip, sl, ip
   133d0:	orr	r5, r7, r5, lsr #31
   133d4:	adc	r7, r2, r9
   133d8:	adds	ip, ip, r6
   133dc:	adc	r7, r7, r5
   133e0:	eor	r3, r3, r7
   133e4:	eor	r0, r0, ip
   133e8:	str	r9, [sp, #84]	; 0x54
   133ec:	adds	r9, r1, r3
   133f0:	adc	sl, r4, r0
   133f4:	eor	r6, r6, r9
   133f8:	str	fp, [sp, #76]	; 0x4c
   133fc:	ldr	fp, [sp, #344]	; 0x158
   13400:	eor	r5, r5, sl
   13404:	str	fp, [sp, #8]
   13408:	lsr	fp, r6, #24
   1340c:	orr	r2, fp, r5, lsl #8
   13410:	str	r6, [sp, #88]	; 0x58
   13414:	ldr	r6, [sp, #348]	; 0x15c
   13418:	ldr	fp, [sp, #8]
   1341c:	lsr	r5, r5, #24
   13420:	adds	ip, ip, fp
   13424:	ldr	fp, [sp, #88]	; 0x58
   13428:	adc	r7, r7, r6
   1342c:	str	r6, [sp, #88]	; 0x58
   13430:	orr	r5, r5, fp, lsl #8
   13434:	mov	fp, r5
   13438:	adds	r5, ip, r2
   1343c:	adc	r7, r7, fp
   13440:	eor	r3, r3, r5
   13444:	ldr	ip, [sp, #92]	; 0x5c
   13448:	eor	r0, r0, r7
   1344c:	ldr	r6, [sp, #104]	; 0x68
   13450:	eor	r1, r1, ip
   13454:	lsr	ip, r3, #16
   13458:	eor	r6, r4, r6
   1345c:	orr	r4, ip, r0, lsl #16
   13460:	adds	r9, r9, r4
   13464:	lsr	r0, r0, #16
   13468:	str	r9, [sp, #172]	; 0xac
   1346c:	orr	r9, r0, r3, lsl #16
   13470:	ldr	r0, [sp, #356]	; 0x164
   13474:	ldr	ip, [sp, #352]	; 0x160
   13478:	str	r2, [sp, #224]	; 0xe0
   1347c:	ldr	r2, [sp, #96]	; 0x60
   13480:	lsl	r3, r1, #1
   13484:	str	r7, [sp, #168]	; 0xa8
   13488:	mov	r7, r0
   1348c:	ldr	r0, [sp, #100]	; 0x64
   13490:	adc	sl, sl, r9
   13494:	str	r4, [sp, #260]	; 0x104
   13498:	lsl	r4, r6, #1
   1349c:	orr	r6, r3, r6, lsr #31
   134a0:	adds	r3, r2, ip
   134a4:	orr	r4, r4, r1, lsr #31
   134a8:	ldr	r2, [sp, #160]	; 0xa0
   134ac:	str	ip, [sp, #92]	; 0x5c
   134b0:	adc	ip, r0, r7
   134b4:	adds	r1, r3, r6
   134b8:	adc	ip, ip, r4
   134bc:	eor	r3, ip, r2
   134c0:	ldr	r2, [sp, #108]	; 0x6c
   134c4:	str	r9, [sp, #264]	; 0x108
   134c8:	adds	r9, r2, r3
   134cc:	ldr	r2, [sp, #148]	; 0x94
   134d0:	eor	r6, r6, r9
   134d4:	eor	r0, r1, r2
   134d8:	str	sl, [sp, #144]	; 0x90
   134dc:	str	r7, [sp, #96]	; 0x60
   134e0:	ldr	sl, [sp, #360]	; 0x168
   134e4:	adc	r7, lr, r0
   134e8:	eor	r4, r4, r7
   134ec:	str	fp, [sp, #236]	; 0xec
   134f0:	mov	fp, sl
   134f4:	lsr	sl, r6, #24
   134f8:	orr	sl, sl, r4, lsl #8
   134fc:	lsr	r4, r4, #24
   13500:	str	sl, [sp, #160]	; 0xa0
   13504:	orr	r6, r4, r6, lsl #8
   13508:	ldr	r2, [sp, #364]	; 0x16c
   1350c:	mov	sl, r6
   13510:	ldr	r6, [sp, #160]	; 0xa0
   13514:	adds	r1, r1, fp
   13518:	adc	ip, ip, r2
   1351c:	adds	r6, r1, r6
   13520:	adc	r1, ip, sl
   13524:	eor	r3, r3, r6
   13528:	str	r6, [sp, #176]	; 0xb0
   1352c:	ldr	r6, [sp, #136]	; 0x88
   13530:	eor	r0, r0, r1
   13534:	str	r2, [sp, #104]	; 0x68
   13538:	ldr	r2, [sp, #108]	; 0x6c
   1353c:	lsr	ip, r3, #16
   13540:	str	fp, [sp, #100]	; 0x64
   13544:	str	sl, [sp, #244]	; 0xf4
   13548:	str	r1, [sp, #180]	; 0xb4
   1354c:	eor	r1, lr, r6
   13550:	ldr	r6, [sp, #368]	; 0x170
   13554:	eor	r2, r2, r8
   13558:	orr	lr, ip, r0, lsl #16
   1355c:	mov	r8, r6
   13560:	adds	r6, r9, lr
   13564:	lsr	r0, r0, #16
   13568:	str	r6, [sp, #196]	; 0xc4
   1356c:	lsl	r6, r2, #1
   13570:	orr	r3, r0, r3, lsl #16
   13574:	orr	r6, r6, r1, lsr #31
   13578:	ldr	r0, [sp, #372]	; 0x174
   1357c:	lsl	r4, r1, #1
   13580:	ldr	r1, [sp, #112]	; 0x70
   13584:	mov	ip, r0
   13588:	str	r8, [sp, #108]	; 0x6c
   1358c:	adc	r0, r7, r3
   13590:	adds	r1, r1, r8
   13594:	ldr	r8, [sp, #120]	; 0x78
   13598:	orr	r4, r4, r2, lsr #31
   1359c:	str	ip, [sp, #112]	; 0x70
   135a0:	ldr	r2, [sp, #156]	; 0x9c
   135a4:	adc	ip, r8, ip
   135a8:	adds	r1, r1, r6
   135ac:	adc	ip, ip, r4
   135b0:	str	r3, [sp, #216]	; 0xd8
   135b4:	str	r0, [sp, #148]	; 0x94
   135b8:	ldr	r3, [sp, #116]	; 0x74
   135bc:	ldr	r0, [sp, #152]	; 0x98
   135c0:	eor	r2, ip, r2
   135c4:	ldr	r9, [sp, #12]
   135c8:	adds	r8, r3, r2
   135cc:	eor	r0, r1, r0
   135d0:	adc	r7, r9, r0
   135d4:	eor	r6, r6, r8
   135d8:	eor	r4, r4, r7
   135dc:	ldr	sl, [sp, #376]	; 0x178
   135e0:	lsr	r9, r6, #24
   135e4:	ldr	fp, [sp, #380]	; 0x17c
   135e8:	orr	r9, r9, r4, lsl #8
   135ec:	lsr	r4, r4, #24
   135f0:	adds	r1, r1, sl
   135f4:	orr	r6, r4, r6, lsl #8
   135f8:	mov	r4, r6
   135fc:	adc	ip, ip, fp
   13600:	adds	r6, r1, r9
   13604:	eor	r2, r2, r6
   13608:	str	r6, [sp, #200]	; 0xc8
   1360c:	mov	r6, r3
   13610:	ldr	r3, [sp, #220]	; 0xdc
   13614:	adc	r1, ip, r4
   13618:	eor	r0, r0, r1
   1361c:	str	r4, [sp, #256]	; 0x100
   13620:	str	r1, [sp, #204]	; 0xcc
   13624:	ldr	r4, [sp, #228]	; 0xe4
   13628:	eor	r1, r6, r3
   1362c:	ldr	r3, [sp, #12]
   13630:	lsr	ip, r2, #16
   13634:	eor	r6, r3, r4
   13638:	orr	ip, ip, r0, lsl #16
   1363c:	ldr	r4, [sp, #384]	; 0x180
   13640:	adds	r8, r8, ip
   13644:	str	r9, [sp, #252]	; 0xfc
   13648:	lsr	r0, r0, #16
   1364c:	mov	r9, r4
   13650:	str	r8, [sp, #152]	; 0x98
   13654:	lsl	r4, r6, #1
   13658:	ldr	r8, [sp, #124]	; 0x7c
   1365c:	orr	r2, r0, r2, lsl #16
   13660:	orr	r4, r4, r1, lsr #31
   13664:	ldr	r0, [sp, #388]	; 0x184
   13668:	str	fp, [sp, #120]	; 0x78
   1366c:	lsl	fp, r1, #1
   13670:	ldr	r1, [sp, #164]	; 0xa4
   13674:	adc	r7, r7, r2
   13678:	orr	fp, fp, r6, lsr #31
   1367c:	adds	r6, r8, r9
   13680:	adc	r8, r1, r0
   13684:	str	sl, [sp, #116]	; 0x74
   13688:	adds	r6, r6, fp
   1368c:	str	r7, [sp, #156]	; 0x9c
   13690:	str	r9, [sp, #136]	; 0x88
   13694:	str	r0, [sp, #124]	; 0x7c
   13698:	ldr	r1, [sp, #212]	; 0xd4
   1369c:	adc	r8, r8, r4
   136a0:	ldr	r3, [sp, #16]
   136a4:	eor	r1, r8, r1
   136a8:	adds	r0, r3, r1
   136ac:	ldr	r3, [sp, #208]	; 0xd0
   136b0:	eor	fp, fp, r0
   136b4:	eor	sl, r6, r3
   136b8:	ldr	r3, [sp, #140]	; 0x8c
   136bc:	ldr	r9, [sp, #392]	; 0x188
   136c0:	adc	r7, r3, sl
   136c4:	eor	r4, r4, r7
   136c8:	ldr	r3, [sp, #396]	; 0x18c
   136cc:	str	r9, [sp, #12]
   136d0:	lsr	r9, fp, #24
   136d4:	str	r3, [sp, #16]
   136d8:	orr	r9, r9, r4, lsl #8
   136dc:	lsr	r3, r4, #24
   136e0:	ldr	r4, [sp, #12]
   136e4:	adds	r6, r6, r4
   136e8:	orr	r4, r3, fp, lsl #8
   136ec:	ldr	r3, [sp, #16]
   136f0:	ldr	fp, [sp, #92]	; 0x5c
   136f4:	adc	r8, r8, r3
   136f8:	adds	r3, r6, r9
   136fc:	adc	r8, r8, r4
   13700:	eor	r1, r1, r3
   13704:	eor	sl, sl, r8
   13708:	lsr	r6, r1, #16
   1370c:	str	r3, [sp, #208]	; 0xd0
   13710:	orr	r3, r6, sl, lsl #16
   13714:	lsr	sl, sl, #16
   13718:	adds	r0, r0, r3
   1371c:	orr	r1, sl, r1, lsl #16
   13720:	eor	r9, r9, r0
   13724:	adc	r7, r7, r1
   13728:	eor	r6, r7, r4
   1372c:	ldr	r4, [sp, #136]	; 0x88
   13730:	str	r8, [sp, #212]	; 0xd4
   13734:	lsl	r8, r9, #1
   13738:	adds	r4, r5, r4
   1373c:	str	r3, [sp, #228]	; 0xe4
   13740:	lsl	r5, r6, #1
   13744:	ldr	r3, [sp, #168]	; 0xa8
   13748:	orr	r6, r8, r6, lsr #31
   1374c:	ldr	r8, [sp, #124]	; 0x7c
   13750:	orr	r5, r5, r9, lsr #31
   13754:	adc	r8, r3, r8
   13758:	adds	r4, r4, r6
   1375c:	ldr	r3, [sp, #216]	; 0xd8
   13760:	adc	r8, r8, r5
   13764:	ldr	sl, [sp, #152]	; 0x98
   13768:	eor	r3, r3, r8
   1376c:	adds	r9, sl, r3
   13770:	ldr	sl, [sp, #156]	; 0x9c
   13774:	eor	lr, lr, r4
   13778:	adc	sl, sl, lr
   1377c:	eor	r6, r6, r9
   13780:	eor	r5, r5, sl
   13784:	adds	r4, fp, r4
   13788:	lsr	fp, r6, #24
   1378c:	orr	fp, fp, r5, lsl #8
   13790:	lsr	r5, r5, #24
   13794:	str	fp, [sp, #168]	; 0xa8
   13798:	orr	r5, r5, r6, lsl #8
   1379c:	mov	r6, r5
   137a0:	ldr	fp, [sp, #96]	; 0x60
   137a4:	ldr	r5, [sp, #168]	; 0xa8
   137a8:	adc	r8, fp, r8
   137ac:	adds	r5, r4, r5
   137b0:	eor	r3, r3, r5
   137b4:	str	r5, [sp, #216]	; 0xd8
   137b8:	adc	r5, r8, r6
   137bc:	eor	lr, lr, r5
   137c0:	lsr	r4, r3, #16
   137c4:	ldr	r8, [sp, #172]	; 0xac
   137c8:	orr	r4, r4, lr, lsl #16
   137cc:	str	r5, [sp, #220]	; 0xdc
   137d0:	lsr	lr, lr, #16
   137d4:	ldr	r5, [sp, #224]	; 0xe0
   137d8:	adds	r9, r9, r4
   137dc:	orr	lr, lr, r3, lsl #16
   137e0:	eor	fp, r8, r5
   137e4:	adc	r3, sl, lr
   137e8:	ldr	r5, [sp, #236]	; 0xec
   137ec:	str	r6, [sp, #232]	; 0xe8
   137f0:	ldr	r6, [sp, #144]	; 0x90
   137f4:	str	r4, [sp, #236]	; 0xec
   137f8:	str	r9, [sp, #224]	; 0xe0
   137fc:	str	lr, [sp, #240]	; 0xf0
   13800:	ldr	r4, [sp, #52]	; 0x34
   13804:	str	r3, [sp, #140]	; 0x8c
   13808:	ldr	r3, [sp, #176]	; 0xb0
   1380c:	eor	r5, r6, r5
   13810:	adds	lr, r4, r3
   13814:	ldr	r6, [sp, #56]	; 0x38
   13818:	ldr	r4, [sp, #180]	; 0xb4
   1381c:	lsl	r3, fp, #1
   13820:	orr	r3, r3, r5, lsr #31
   13824:	lsl	r5, r5, #1
   13828:	adc	r4, r6, r4
   1382c:	orr	fp, r5, fp, lsr #31
   13830:	adds	lr, lr, r3
   13834:	adc	r4, r4, fp
   13838:	eor	r2, r2, r4
   1383c:	adds	r0, r0, r2
   13840:	eor	ip, ip, lr
   13844:	adc	r7, r7, ip
   13848:	eor	r3, r3, r0
   1384c:	ldr	r6, [sp, #80]	; 0x50
   13850:	eor	fp, fp, r7
   13854:	adds	lr, r6, lr
   13858:	ldr	r5, [sp, #84]	; 0x54
   1385c:	lsr	r6, r3, #24
   13860:	orr	r6, r6, fp, lsl #8
   13864:	lsr	fp, fp, #24
   13868:	adc	r4, r5, r4
   1386c:	orr	r3, fp, r3, lsl #8
   13870:	adds	r9, lr, r6
   13874:	adc	lr, r4, r3
   13878:	eor	r2, r2, r9
   1387c:	ldr	fp, [sp, #196]	; 0xc4
   13880:	eor	ip, ip, lr
   13884:	str	lr, [sp, #180]	; 0xb4
   13888:	ldr	lr, [sp, #160]	; 0xa0
   1388c:	lsr	r4, r2, #16
   13890:	eor	sl, fp, lr
   13894:	orr	r4, r4, ip, lsl #16
   13898:	ldr	r5, [sp, #148]	; 0x94
   1389c:	ldr	lr, [sp, #244]	; 0xf4
   138a0:	lsr	ip, ip, #16
   138a4:	adds	r0, r0, r4
   138a8:	orr	ip, ip, r2, lsl #16
   138ac:	eor	lr, r5, lr
   138b0:	adc	r7, r7, ip
   138b4:	str	r0, [sp, #160]	; 0xa0
   138b8:	str	ip, [sp, #248]	; 0xf8
   138bc:	ldr	r0, [sp, #8]
   138c0:	ldr	ip, [sp, #200]	; 0xc8
   138c4:	str	r4, [sp, #244]	; 0xf4
   138c8:	lsl	r4, sl, #1
   138cc:	adds	r0, r0, ip
   138d0:	orr	r4, r4, lr, lsr #31
   138d4:	lsl	r2, lr, #1
   138d8:	ldr	ip, [sp, #88]	; 0x58
   138dc:	ldr	lr, [sp, #204]	; 0xcc
   138e0:	orr	sl, r2, sl, lsr #31
   138e4:	str	r7, [sp, #164]	; 0xa4
   138e8:	adc	r7, ip, lr
   138ec:	adds	r0, r0, r4
   138f0:	adc	r7, r7, sl
   138f4:	ldr	lr, [sp, #228]	; 0xe4
   138f8:	eor	r1, r1, r7
   138fc:	ldr	r5, [sp, #144]	; 0x90
   13900:	adds	ip, r8, r1
   13904:	eor	r8, r0, lr
   13908:	eor	r4, r4, ip
   1390c:	adc	r5, r5, r8
   13910:	ldr	lr, [sp, #12]
   13914:	eor	r2, r5, sl
   13918:	adds	r0, lr, r0
   1391c:	lsr	sl, r4, #24
   13920:	ldr	lr, [sp, #16]
   13924:	orr	sl, sl, r2, lsl #8
   13928:	lsr	r2, r2, #24
   1392c:	orr	r2, r2, r4, lsl #8
   13930:	adc	r7, lr, r7
   13934:	adds	r0, r0, sl
   13938:	adc	r7, r7, r2
   1393c:	eor	r1, r1, r0
   13940:	eor	r8, r8, r7
   13944:	str	r2, [sp, #228]	; 0xe4
   13948:	str	r7, [sp, #200]	; 0xc8
   1394c:	ldr	r2, [sp, #152]	; 0x98
   13950:	ldr	r7, [sp, #252]	; 0xfc
   13954:	str	r9, [sp, #176]	; 0xb0
   13958:	lsr	r9, r1, #16
   1395c:	orr	r9, r9, r8, lsl #16
   13960:	str	r0, [sp, #196]	; 0xc4
   13964:	lsr	r8, r8, #16
   13968:	eor	r0, r2, r7
   1396c:	ldr	r7, [sp, #256]	; 0x100
   13970:	ldr	r2, [sp, #156]	; 0x9c
   13974:	adds	ip, ip, r9
   13978:	orr	r1, r8, r1, lsl #16
   1397c:	str	r9, [sp, #252]	; 0xfc
   13980:	eor	r2, r2, r7
   13984:	adc	r5, r5, r1
   13988:	ldr	lr, [sp, #208]	; 0xd0
   1398c:	str	r1, [sp, #256]	; 0x100
   13990:	ldr	r1, [sp, #116]	; 0x74
   13994:	ldr	r4, [sp, #120]	; 0x78
   13998:	ldr	r8, [sp, #212]	; 0xd4
   1399c:	lsl	r7, r0, #1
   139a0:	orr	r7, r7, r2, lsr #31
   139a4:	adds	lr, r1, lr
   139a8:	lsl	r1, r2, #1
   139ac:	adc	r8, r4, r8
   139b0:	orr	r1, r1, r0, lsr #31
   139b4:	adds	lr, lr, r7
   139b8:	ldr	r0, [sp, #264]	; 0x108
   139bc:	adc	r9, r8, r1
   139c0:	ldr	r4, [sp, #260]	; 0x104
   139c4:	eor	r8, r9, r0
   139c8:	ldr	r0, [sp, #148]	; 0x94
   139cc:	adds	fp, fp, r8
   139d0:	eor	r2, lr, r4
   139d4:	adc	r4, r0, r2
   139d8:	eor	r7, r7, fp
   139dc:	ldr	r0, [sp, #68]	; 0x44
   139e0:	eor	r1, r1, r4
   139e4:	str	fp, [sp, #144]	; 0x90
   139e8:	adds	lr, r0, lr
   139ec:	lsr	fp, r7, #24
   139f0:	ldr	r0, [sp, #72]	; 0x48
   139f4:	orr	fp, fp, r1, lsl #8
   139f8:	lsr	r1, r1, #24
   139fc:	orr	r1, r1, r7, lsl #8
   13a00:	adc	r9, r0, r9
   13a04:	adds	r7, lr, fp
   13a08:	adc	r9, r9, r1
   13a0c:	eor	r8, r8, r7
   13a10:	str	r7, [sp, #204]	; 0xcc
   13a14:	str	r1, [sp, #152]	; 0x98
   13a18:	ldr	r7, [sp, #164]	; 0xa4
   13a1c:	ldr	r1, [sp, #160]	; 0xa0
   13a20:	eor	r2, r2, r9
   13a24:	eor	r6, r6, r1
   13a28:	lsr	lr, r8, #16
   13a2c:	eor	r1, r7, r3
   13a30:	ldr	r3, [sp, #144]	; 0x90
   13a34:	orr	lr, lr, r2, lsl #16
   13a38:	adds	r0, r3, lr
   13a3c:	lsr	r2, r2, #16
   13a40:	lsl	r3, r6, #1
   13a44:	orr	r7, r2, r8, lsl #16
   13a48:	lsl	r8, r1, #1
   13a4c:	ldr	r2, [sp, #216]	; 0xd8
   13a50:	orr	r1, r3, r1, lsr #31
   13a54:	ldr	r3, [sp, #28]
   13a58:	adc	r4, r4, r7
   13a5c:	orr	r8, r8, r6, lsr #31
   13a60:	adds	r2, r3, r2
   13a64:	ldr	r6, [sp, #32]
   13a68:	ldr	r3, [sp, #220]	; 0xdc
   13a6c:	eor	fp, fp, r0
   13a70:	adc	r6, r6, r3
   13a74:	adds	r2, r2, r1
   13a78:	adc	r6, r6, r8
   13a7c:	eor	r3, r6, r7
   13a80:	adds	r7, ip, r3
   13a84:	eor	lr, lr, r2
   13a88:	str	r3, [sp, #144]	; 0x90
   13a8c:	adc	r3, r5, lr
   13a90:	eor	r1, r1, r7
   13a94:	eor	r8, r8, r3
   13a98:	str	r3, [sp, #148]	; 0x94
   13a9c:	ldr	r3, [sp, #108]	; 0x6c
   13aa0:	eor	ip, ip, sl
   13aa4:	adds	r2, r3, r2
   13aa8:	lsr	r3, r1, #24
   13aac:	orr	r3, r3, r8, lsl #8
   13ab0:	lsr	r8, r8, #24
   13ab4:	str	r3, [sp, #172]	; 0xac
   13ab8:	orr	r8, r8, r1, lsl #8
   13abc:	ldr	r3, [sp, #112]	; 0x70
   13ac0:	mov	r1, r8
   13ac4:	ldr	r8, [sp, #172]	; 0xac
   13ac8:	adc	r6, r3, r6
   13acc:	ldr	r3, [sp, #144]	; 0x90
   13ad0:	adds	r2, r2, r8
   13ad4:	adc	r6, r6, r1
   13ad8:	eor	r3, r3, r2
   13adc:	ldr	r8, [sp, #228]	; 0xe4
   13ae0:	eor	lr, lr, r6
   13ae4:	str	r2, [sp, #208]	; 0xd0
   13ae8:	lsr	r2, r3, #16
   13aec:	eor	r5, r5, r8
   13af0:	orr	r8, r2, lr, lsl #16
   13af4:	str	r6, [sp, #212]	; 0xd4
   13af8:	adds	r6, r7, r8
   13afc:	str	r1, [sp, #260]	; 0x104
   13b00:	lsr	lr, lr, #16
   13b04:	str	r8, [sp, #228]	; 0xe4
   13b08:	str	r6, [sp, #144]	; 0x90
   13b0c:	ldr	r8, [sp, #148]	; 0x94
   13b10:	orr	r2, lr, r3, lsl #16
   13b14:	adc	r8, r8, r2
   13b18:	ldr	r1, [sp, #20]
   13b1c:	str	r2, [sp, #264]	; 0x108
   13b20:	ldr	r2, [sp, #176]	; 0xb0
   13b24:	lsl	r3, ip, #1
   13b28:	adds	r2, r1, r2
   13b2c:	ldr	lr, [sp, #24]
   13b30:	ldr	r1, [sp, #180]	; 0xb4
   13b34:	lsl	sl, r5, #1
   13b38:	orr	r5, r3, r5, lsr #31
   13b3c:	adc	r1, lr, r1
   13b40:	orr	ip, sl, ip, lsr #31
   13b44:	adds	r2, r2, r5
   13b48:	ldr	lr, [sp, #240]	; 0xf0
   13b4c:	adc	r1, r1, ip
   13b50:	ldr	r7, [sp, #236]	; 0xec
   13b54:	eor	r3, r1, lr
   13b58:	adds	r6, r0, r3
   13b5c:	eor	lr, r2, r7
   13b60:	eor	r7, r6, r5
   13b64:	adc	r5, r4, lr
   13b68:	eor	ip, ip, r5
   13b6c:	ldr	sl, [sp, #36]	; 0x24
   13b70:	str	r8, [sp, #148]	; 0x94
   13b74:	lsr	r8, r7, #24
   13b78:	adds	r2, sl, r2
   13b7c:	orr	r8, r8, ip, lsl #8
   13b80:	ldr	sl, [sp, #40]	; 0x28
   13b84:	lsr	ip, ip, #24
   13b88:	orr	ip, ip, r7, lsl #8
   13b8c:	adc	r1, sl, r1
   13b90:	mov	sl, ip
   13b94:	adds	ip, r2, r8
   13b98:	eor	r3, r3, ip
   13b9c:	str	r8, [sp, #236]	; 0xec
   13ba0:	adc	r8, r1, sl
   13ba4:	eor	lr, lr, r8
   13ba8:	ldr	r2, [sp, #152]	; 0x98
   13bac:	lsr	r1, r3, #16
   13bb0:	orr	r1, r1, lr, lsl #16
   13bb4:	adds	r0, r6, r1
   13bb8:	eor	r4, r4, r2
   13bbc:	lsr	lr, lr, #16
   13bc0:	orr	r3, lr, r3, lsl #16
   13bc4:	str	r0, [sp, #152]	; 0x98
   13bc8:	lsl	lr, fp, #1
   13bcc:	ldr	r0, [sp, #196]	; 0xc4
   13bd0:	ldr	r2, [sp, #100]	; 0x64
   13bd4:	orr	lr, lr, r4, lsr #31
   13bd8:	ldr	r7, [sp, #200]	; 0xc8
   13bdc:	str	ip, [sp, #180]	; 0xb4
   13be0:	lsl	ip, r4, #1
   13be4:	ldr	r4, [sp, #104]	; 0x68
   13be8:	adc	r5, r5, r3
   13bec:	adds	r2, r2, r0
   13bf0:	ldr	r6, [sp, #248]	; 0xf8
   13bf4:	adc	r7, r4, r7
   13bf8:	orr	ip, ip, fp, lsr #31
   13bfc:	adds	r2, r2, lr
   13c00:	adc	r7, r7, ip
   13c04:	str	sl, [sp, #240]	; 0xf0
   13c08:	ldr	sl, [sp, #224]	; 0xe0
   13c0c:	eor	r0, r7, r6
   13c10:	ldr	r4, [sp, #244]	; 0xf4
   13c14:	str	r5, [sp, #156]	; 0x9c
   13c18:	adds	r5, sl, r0
   13c1c:	eor	r6, r5, lr
   13c20:	ldr	lr, [sp, #140]	; 0x8c
   13c24:	eor	r4, r2, r4
   13c28:	adc	lr, lr, r4
   13c2c:	eor	ip, ip, lr
   13c30:	ldr	fp, [sp, #76]	; 0x4c
   13c34:	str	r8, [sp, #216]	; 0xd8
   13c38:	lsr	r8, r6, #24
   13c3c:	adds	r2, fp, r2
   13c40:	orr	fp, r8, ip, lsl #8
   13c44:	ldr	r8, [sp, #4]
   13c48:	lsr	ip, ip, #24
   13c4c:	adc	r7, r8, r7
   13c50:	orr	r6, ip, r6, lsl #8
   13c54:	adds	r2, r2, fp
   13c58:	adc	ip, r7, r6
   13c5c:	eor	r0, r0, r2
   13c60:	str	fp, [sp, #244]	; 0xf4
   13c64:	str	r2, [sp, #196]	; 0xc4
   13c68:	str	r6, [sp, #248]	; 0xf8
   13c6c:	str	ip, [sp, #200]	; 0xc8
   13c70:	ldr	r7, [sp, #168]	; 0xa8
   13c74:	eor	r2, ip, r4
   13c78:	eor	fp, sl, r7
   13c7c:	ldr	ip, [sp, #140]	; 0x8c
   13c80:	ldr	r7, [sp, #232]	; 0xe8
   13c84:	lsr	r4, r0, #16
   13c88:	orr	r4, r4, r2, lsl #16
   13c8c:	lsr	r2, r2, #16
   13c90:	adds	r5, r5, r4
   13c94:	eor	r6, ip, r7
   13c98:	orr	r0, r2, r0, lsl #16
   13c9c:	ldr	ip, [sp, #204]	; 0xcc
   13ca0:	ldr	r2, [sp, #60]	; 0x3c
   13ca4:	adc	lr, lr, r0
   13ca8:	str	lr, [sp, #168]	; 0xa8
   13cac:	lsl	sl, fp, #1
   13cb0:	adds	lr, r2, ip
   13cb4:	ldr	ip, [sp, #64]	; 0x40
   13cb8:	orr	sl, sl, r6, lsr #31
   13cbc:	lsl	r7, r6, #1
   13cc0:	adc	r8, ip, r9
   13cc4:	orr	r7, r7, fp, lsr #31
   13cc8:	adds	lr, lr, sl
   13ccc:	ldr	r2, [sp, #256]	; 0x100
   13cd0:	adc	r8, r8, r7
   13cd4:	str	r5, [sp, #140]	; 0x8c
   13cd8:	ldr	r5, [sp, #160]	; 0xa0
   13cdc:	eor	r2, r8, r2
   13ce0:	ldr	r9, [sp, #252]	; 0xfc
   13ce4:	adds	ip, r5, r2
   13ce8:	ldr	r5, [sp, #164]	; 0xa4
   13cec:	eor	r9, lr, r9
   13cf0:	adc	r6, r5, r9
   13cf4:	eor	sl, sl, ip
   13cf8:	ldr	fp, [sp, #44]	; 0x2c
   13cfc:	eor	r7, r7, r6
   13d00:	adds	lr, fp, lr
   13d04:	lsr	r5, sl, #24
   13d08:	ldr	fp, [sp, #48]	; 0x30
   13d0c:	orr	r5, r5, r7, lsl #8
   13d10:	lsr	r7, r7, #24
   13d14:	adc	r8, fp, r8
   13d18:	orr	r7, r7, sl, lsl #8
   13d1c:	adds	lr, lr, r5
   13d20:	eor	r2, r2, lr
   13d24:	str	lr, [sp, #204]	; 0xcc
   13d28:	adc	lr, r8, r7
   13d2c:	eor	r9, r9, lr
   13d30:	str	lr, [sp, #220]	; 0xdc
   13d34:	lsr	lr, r2, #16
   13d38:	orr	sl, lr, r9, lsl #16
   13d3c:	lsr	r9, r9, #16
   13d40:	adds	ip, ip, sl
   13d44:	orr	r2, r9, r2, lsl #16
   13d48:	adc	r6, r6, r2
   13d4c:	eor	r5, r5, ip
   13d50:	eor	r7, r7, r6
   13d54:	ldr	r9, [sp, #100]	; 0x64
   13d58:	str	sl, [sp, #232]	; 0xe8
   13d5c:	ldr	sl, [sp, #208]	; 0xd0
   13d60:	lsl	r8, r5, #1
   13d64:	adds	lr, r9, sl
   13d68:	ldr	sl, [sp, #212]	; 0xd4
   13d6c:	lsl	r9, r7, #1
   13d70:	orr	r7, r8, r7, lsr #31
   13d74:	ldr	r8, [sp, #104]	; 0x68
   13d78:	orr	r5, r9, r5, lsr #31
   13d7c:	adc	r8, r8, sl
   13d80:	adds	lr, lr, r7
   13d84:	adc	r8, r8, r5
   13d88:	ldr	r9, [sp, #140]	; 0x8c
   13d8c:	eor	r3, r3, r8
   13d90:	ldr	sl, [sp, #168]	; 0xa8
   13d94:	adds	r9, r9, r3
   13d98:	eor	r1, r1, lr
   13d9c:	adc	sl, sl, r1
   13da0:	eor	r7, r7, r9
   13da4:	ldr	fp, [sp, #80]	; 0x50
   13da8:	eor	r5, r5, sl
   13dac:	adds	lr, fp, lr
   13db0:	lsr	fp, r7, #24
   13db4:	orr	fp, fp, r5, lsl #8
   13db8:	str	fp, [sp, #176]	; 0xb0
   13dbc:	lsr	r5, r5, #24
   13dc0:	orr	r7, r5, r7, lsl #8
   13dc4:	ldr	fp, [sp, #84]	; 0x54
   13dc8:	ldr	r5, [sp, #176]	; 0xb0
   13dcc:	adc	r8, fp, r8
   13dd0:	adds	r5, lr, r5
   13dd4:	eor	r3, r3, r5
   13dd8:	str	r5, [sp, #208]	; 0xd0
   13ddc:	adc	r5, r8, r7
   13de0:	eor	r1, r1, r5
   13de4:	str	r7, [sp, #252]	; 0xfc
   13de8:	str	r5, [sp, #212]	; 0xd4
   13dec:	ldr	r7, [sp, #144]	; 0x90
   13df0:	ldr	r5, [sp, #172]	; 0xac
   13df4:	lsr	lr, r3, #16
   13df8:	eor	fp, r7, r5
   13dfc:	ldr	r7, [sp, #148]	; 0x94
   13e00:	ldr	r5, [sp, #260]	; 0x104
   13e04:	eor	r8, r7, r5
   13e08:	orr	r7, lr, r1, lsl #16
   13e0c:	lsr	r1, r1, #16
   13e10:	adds	r9, r9, r7
   13e14:	orr	r1, r1, r3, lsl #16
   13e18:	adc	r3, sl, r1
   13e1c:	str	r1, [sp, #260]	; 0x104
   13e20:	str	r3, [sp, #160]	; 0xa0
   13e24:	ldr	r1, [sp, #180]	; 0xb4
   13e28:	ldr	r3, [sp, #108]	; 0x6c
   13e2c:	str	r9, [sp, #224]	; 0xe0
   13e30:	adds	lr, r3, r1
   13e34:	ldr	r9, [sp, #216]	; 0xd8
   13e38:	lsl	r3, fp, #1
   13e3c:	ldr	r1, [sp, #112]	; 0x70
   13e40:	orr	r3, r3, r8, lsr #31
   13e44:	lsl	r8, r8, #1
   13e48:	adc	r1, r1, r9
   13e4c:	orr	fp, r8, fp, lsr #31
   13e50:	adds	lr, lr, r3
   13e54:	adc	r1, r1, fp
   13e58:	eor	r0, r0, r1
   13e5c:	adds	ip, ip, r0
   13e60:	eor	r4, r4, lr
   13e64:	adc	r9, r6, r4
   13e68:	eor	r3, r3, ip
   13e6c:	eor	fp, fp, r9
   13e70:	ldr	r5, [sp, #20]
   13e74:	str	r7, [sp, #256]	; 0x100
   13e78:	lsr	r6, r3, #24
   13e7c:	ldr	r7, [sp, #24]
   13e80:	adds	lr, r5, lr
   13e84:	orr	r6, r6, fp, lsl #8
   13e88:	lsr	fp, fp, #24
   13e8c:	orr	r3, fp, r3, lsl #8
   13e90:	adc	r1, r7, r1
   13e94:	adds	r8, lr, r6
   13e98:	adc	r1, r1, r3
   13e9c:	eor	r4, r4, r1
   13ea0:	ldr	lr, [sp, #152]	; 0x98
   13ea4:	str	r1, [sp, #216]	; 0xd8
   13ea8:	ldr	r1, [sp, #236]	; 0xec
   13eac:	eor	r0, r0, r8
   13eb0:	str	r8, [sp, #180]	; 0xb4
   13eb4:	ldr	r5, [sp, #156]	; 0x9c
   13eb8:	eor	r8, lr, r1
   13ebc:	ldr	r1, [sp, #240]	; 0xf0
   13ec0:	lsl	lr, r8, #1
   13ec4:	eor	r5, r5, r1
   13ec8:	lsr	r1, r0, #16
   13ecc:	orr	r1, r1, r4, lsl #16
   13ed0:	lsr	r4, r4, #16
   13ed4:	adds	ip, ip, r1
   13ed8:	orr	r0, r4, r0, lsl #16
   13edc:	adc	r4, r9, r0
   13ee0:	str	r0, [sp, #240]	; 0xf0
   13ee4:	ldr	r9, [sp, #196]	; 0xc4
   13ee8:	ldr	r0, [sp, #60]	; 0x3c
   13eec:	str	r1, [sp, #236]	; 0xec
   13ef0:	str	ip, [sp, #164]	; 0xa4
   13ef4:	adds	r1, r0, r9
   13ef8:	ldr	ip, [sp, #64]	; 0x40
   13efc:	ldr	r9, [sp, #200]	; 0xc8
   13f00:	orr	lr, lr, r5, lsr #31
   13f04:	lsl	r5, r5, #1
   13f08:	adc	r7, ip, r9
   13f0c:	orr	r8, r5, r8, lsr #31
   13f10:	adds	r1, r1, lr
   13f14:	adc	r7, r7, r8
   13f18:	ldr	r5, [sp, #144]	; 0x90
   13f1c:	eor	r2, r2, r7
   13f20:	ldr	ip, [sp, #232]	; 0xe8
   13f24:	adds	r0, r5, r2
   13f28:	ldr	r5, [sp, #148]	; 0x94
   13f2c:	eor	ip, r1, ip
   13f30:	eor	lr, lr, r0
   13f34:	adc	r5, r5, ip
   13f38:	eor	r8, r8, r5
   13f3c:	str	r4, [sp, #172]	; 0xac
   13f40:	ldr	r4, [sp, #36]	; 0x24
   13f44:	lsr	sl, lr, #24
   13f48:	ldr	fp, [sp, #40]	; 0x28
   13f4c:	adds	r1, r4, r1
   13f50:	orr	r4, sl, r8, lsl #8
   13f54:	lsr	r8, r8, #24
   13f58:	orr	r9, r8, lr, lsl #8
   13f5c:	adc	r7, fp, r7
   13f60:	str	r4, [sp, #148]	; 0x94
   13f64:	b	13f8c <__assert_fail@plt+0x2da4>
   13f68:	andeq	lr, r2, r8, lsl #30
   13f6c:	vtbl.8	d12, {d12-d13}, d8
   13f70:	bvs	28d914 <optarg@@GLIBC_2.4+0x25e78c>
   13f74:	strbhi	sl, [sl], #1851	; 0x73b
   13f78:	bllt	19ff994 <optarg@@GLIBC_2.4+0x19d080c>
   13f7c:	vcmla.f32	d15, d4, d27[0], #90
   13f80:	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
   13f84:	svcpl	0x001d36f1
   13f88:	strbge	pc, [pc, #-1338]	; 13a56 <__assert_fail@plt+0x286e>	; <UNPREDICTABLE>
   13f8c:	adds	r4, r1, r4
   13f90:	str	r4, [sp, #196]	; 0xc4
   13f94:	adc	sl, r7, r9
   13f98:	eor	r2, r2, r4
   13f9c:	ldr	r7, [sp, #244]	; 0xf4
   13fa0:	str	r9, [sp, #232]	; 0xe8
   13fa4:	ldr	r9, [sp, #140]	; 0x8c
   13fa8:	eor	ip, ip, sl
   13fac:	eor	r1, r9, r7
   13fb0:	ldr	lr, [sp, #168]	; 0xa8
   13fb4:	ldr	r7, [sp, #248]	; 0xf8
   13fb8:	lsr	r9, r2, #16
   13fbc:	orr	r9, r9, ip, lsl #16
   13fc0:	eor	r4, lr, r7
   13fc4:	adds	r0, r0, r9
   13fc8:	lsr	ip, ip, #16
   13fcc:	str	r9, [sp, #244]	; 0xf4
   13fd0:	ldr	lr, [sp, #12]
   13fd4:	ldr	r9, [sp, #204]	; 0xcc
   13fd8:	orr	r2, ip, r2, lsl #16
   13fdc:	adc	r5, r5, r2
   13fe0:	lsl	r7, r1, #1
   13fe4:	adds	lr, lr, r9
   13fe8:	str	r2, [sp, #248]	; 0xf8
   13fec:	ldr	r9, [sp, #220]	; 0xdc
   13ff0:	ldr	r2, [sp, #16]
   13ff4:	orr	r7, r7, r4, lsr #31
   13ff8:	lsl	ip, r4, #1
   13ffc:	adc	r8, r2, r9
   14000:	orr	ip, ip, r1, lsr #31
   14004:	adds	lr, lr, r7
   14008:	ldr	r2, [sp, #264]	; 0x108
   1400c:	str	sl, [sp, #200]	; 0xc8
   14010:	ldr	sl, [sp, #228]	; 0xe4
   14014:	adc	r9, r8, ip
   14018:	eor	r8, r9, r2
   1401c:	eor	r2, lr, sl
   14020:	ldr	sl, [sp, #152]	; 0x98
   14024:	adds	r1, sl, r8
   14028:	ldr	sl, [sp, #156]	; 0x9c
   1402c:	eor	r7, r7, r1
   14030:	adc	r4, sl, r2
   14034:	ldr	sl, [sp, #116]	; 0x74
   14038:	eor	ip, ip, r4
   1403c:	adds	lr, sl, lr
   14040:	lsr	fp, r7, #24
   14044:	ldr	sl, [sp, #120]	; 0x78
   14048:	orr	fp, fp, ip, lsl #8
   1404c:	lsr	ip, ip, #24
   14050:	orr	ip, ip, r7, lsl #8
   14054:	adc	r9, sl, r9
   14058:	adds	lr, lr, fp
   1405c:	adc	r9, r9, ip
   14060:	eor	r8, r8, lr
   14064:	str	ip, [sp, #152]	; 0x98
   14068:	ldr	ip, [sp, #164]	; 0xa4
   1406c:	eor	r2, r2, r9
   14070:	eor	r6, r6, ip
   14074:	str	lr, [sp, #204]	; 0xcc
   14078:	ldr	ip, [sp, #172]	; 0xac
   1407c:	lsr	lr, r8, #16
   14080:	orr	lr, lr, r2, lsl #16
   14084:	lsr	r2, r2, #16
   14088:	orr	r7, r2, r8, lsl #16
   1408c:	ldr	sl, [sp, #208]	; 0xd0
   14090:	eor	ip, ip, r3
   14094:	ldr	r2, [sp, #92]	; 0x5c
   14098:	adds	r1, r1, lr
   1409c:	lsl	r3, r6, #1
   140a0:	adc	r4, r4, r7
   140a4:	lsl	r8, ip, #1
   140a8:	adds	r2, r2, sl
   140ac:	orr	ip, r3, ip, lsr #31
   140b0:	ldr	sl, [sp, #212]	; 0xd4
   140b4:	ldr	r3, [sp, #96]	; 0x60
   140b8:	orr	r8, r8, r6, lsr #31
   140bc:	adc	r6, r3, sl
   140c0:	adds	r2, r2, ip
   140c4:	adc	r6, r6, r8
   140c8:	eor	r3, r6, r7
   140cc:	adds	r7, r0, r3
   140d0:	eor	lr, lr, r2
   140d4:	adc	sl, r5, lr
   140d8:	eor	ip, ip, r7
   140dc:	eor	r8, r8, sl
   140e0:	str	sl, [sp, #144]	; 0x90
   140e4:	ldr	sl, [sp, #136]	; 0x88
   140e8:	eor	fp, fp, r1
   140ec:	adds	r2, sl, r2
   140f0:	lsr	sl, ip, #24
   140f4:	orr	sl, sl, r8, lsl #8
   140f8:	lsr	r8, r8, #24
   140fc:	str	sl, [sp, #168]	; 0xa8
   14100:	orr	ip, r8, ip, lsl #8
   14104:	mov	r8, ip
   14108:	ldr	sl, [sp, #124]	; 0x7c
   1410c:	ldr	ip, [sp, #168]	; 0xa8
   14110:	adc	r6, sl, r6
   14114:	adds	r2, r2, ip
   14118:	adc	r6, r6, r8
   1411c:	eor	r3, r3, r2
   14120:	str	r2, [sp, #208]	; 0xd0
   14124:	str	r8, [sp, #228]	; 0xe4
   14128:	ldr	r2, [sp, #148]	; 0x94
   1412c:	eor	lr, lr, r6
   14130:	eor	r0, r0, r2
   14134:	lsr	r2, r3, #16
   14138:	orr	ip, r2, lr, lsl #16
   1413c:	lsr	lr, lr, #16
   14140:	ldr	sl, [sp, #232]	; 0xe8
   14144:	ldr	r2, [sp, #144]	; 0x90
   14148:	orr	r3, lr, r3, lsl #16
   1414c:	adds	r7, r7, ip
   14150:	mov	lr, r3
   14154:	ldr	r8, [sp, #180]	; 0xb4
   14158:	eor	r5, r5, sl
   1415c:	adc	sl, r2, lr
   14160:	ldr	r2, [sp, #44]	; 0x2c
   14164:	lsl	r3, r0, #1
   14168:	adds	r2, r2, r8
   1416c:	str	ip, [sp, #232]	; 0xe8
   14170:	ldr	r8, [sp, #216]	; 0xd8
   14174:	ldr	ip, [sp, #48]	; 0x30
   14178:	str	sl, [sp, #144]	; 0x90
   1417c:	lsl	sl, r5, #1
   14180:	orr	r5, r3, r5, lsr #31
   14184:	adc	ip, ip, r8
   14188:	orr	r0, sl, r0, lsr #31
   1418c:	adds	r2, r2, r5
   14190:	str	r6, [sp, #212]	; 0xd4
   14194:	ldr	r6, [sp, #260]	; 0x104
   14198:	adc	ip, ip, r0
   1419c:	str	lr, [sp, #264]	; 0x108
   141a0:	ldr	lr, [sp, #256]	; 0x100
   141a4:	eor	r3, ip, r6
   141a8:	adds	r6, r1, r3
   141ac:	eor	lr, r2, lr
   141b0:	ldr	sl, [sp, #68]	; 0x44
   141b4:	str	r7, [sp, #140]	; 0x8c
   141b8:	eor	r7, r6, r5
   141bc:	adc	r5, r4, lr
   141c0:	eor	r0, r0, r5
   141c4:	adds	r2, sl, r2
   141c8:	lsr	r8, r7, #24
   141cc:	ldr	sl, [sp, #72]	; 0x48
   141d0:	orr	r8, r8, r0, lsl #8
   141d4:	lsr	r0, r0, #24
   141d8:	adc	ip, sl, ip
   141dc:	orr	r0, r0, r7, lsl #8
   141e0:	adds	r7, r2, r8
   141e4:	eor	r3, r3, r7
   141e8:	str	r8, [sp, #256]	; 0x100
   141ec:	adc	r8, ip, r0
   141f0:	eor	lr, lr, r8
   141f4:	ldr	r1, [sp, #152]	; 0x98
   141f8:	lsr	ip, r3, #16
   141fc:	orr	ip, ip, lr, lsl #16
   14200:	lsr	lr, lr, #16
   14204:	eor	r4, r4, r1
   14208:	orr	r3, lr, r3, lsl #16
   1420c:	adds	r1, r6, ip
   14210:	adc	r5, r5, r3
   14214:	str	r8, [sp, #216]	; 0xd8
   14218:	str	r5, [sp, #148]	; 0x94
   1421c:	ldr	r8, [sp, #196]	; 0xc4
   14220:	ldr	r5, [sp, #76]	; 0x4c
   14224:	str	r1, [sp, #220]	; 0xdc
   14228:	lsl	r1, fp, #1
   1422c:	adds	r2, r5, r8
   14230:	str	r0, [sp, #260]	; 0x104
   14234:	ldr	r8, [sp, #200]	; 0xc8
   14238:	lsl	r0, r4, #1
   1423c:	orr	r4, r1, r4, lsr #31
   14240:	ldr	r1, [sp, #4]
   14244:	orr	r0, r0, fp, lsr #31
   14248:	ldr	r5, [sp, #240]	; 0xf0
   1424c:	str	r7, [sp, #180]	; 0xb4
   14250:	adc	r7, r1, r8
   14254:	adds	r2, r2, r4
   14258:	adc	r7, r7, r0
   1425c:	ldr	fp, [sp, #224]	; 0xe0
   14260:	ldr	lr, [sp, #236]	; 0xec
   14264:	eor	r1, r7, r5
   14268:	ldr	r5, [sp, #160]	; 0xa0
   1426c:	adds	r6, fp, r1
   14270:	eor	lr, r2, lr
   14274:	adc	r5, r5, lr
   14278:	eor	r4, r4, r6
   1427c:	ldr	r8, [sp, #28]
   14280:	eor	r0, r0, r5
   14284:	adds	r2, r8, r2
   14288:	lsr	r8, r4, #24
   1428c:	orr	sl, r8, r0, lsl #8
   14290:	mov	r8, sl
   14294:	lsr	r0, r0, #24
   14298:	ldr	sl, [sp, #32]
   1429c:	orr	r4, r0, r4, lsl #8
   142a0:	adc	r7, sl, r7
   142a4:	mov	r0, r4
   142a8:	adds	r4, r2, r8
   142ac:	str	r0, [sp, #240]	; 0xf0
   142b0:	adc	r0, r7, r0
   142b4:	ldr	r7, [sp, #176]	; 0xb0
   142b8:	eor	r1, r1, r4
   142bc:	eor	fp, fp, r7
   142c0:	eor	lr, lr, r0
   142c4:	ldr	r7, [sp, #252]	; 0xfc
   142c8:	str	r0, [sp, #200]	; 0xc8
   142cc:	ldr	r0, [sp, #160]	; 0xa0
   142d0:	str	r4, [sp, #196]	; 0xc4
   142d4:	lsr	r4, r1, #16
   142d8:	eor	sl, r0, r7
   142dc:	orr	r4, r4, lr, lsl #16
   142e0:	lsr	lr, lr, #16
   142e4:	ldr	r0, [sp, #204]	; 0xcc
   142e8:	orr	r1, lr, r1, lsl #16
   142ec:	lsl	r2, fp, #1
   142f0:	ldr	lr, [sp, #8]
   142f4:	adds	r6, r6, r4
   142f8:	lsl	r7, sl, #1
   142fc:	orr	sl, r2, sl, lsr #31
   14300:	ldr	r2, [sp, #88]	; 0x58
   14304:	adc	r5, r5, r1
   14308:	adds	lr, lr, r0
   1430c:	str	r5, [sp, #156]	; 0x9c
   14310:	orr	r7, r7, fp, lsr #31
   14314:	ldr	r5, [sp, #248]	; 0xf8
   14318:	str	r8, [sp, #236]	; 0xec
   1431c:	adc	r8, r2, r9
   14320:	adds	lr, lr, sl
   14324:	adc	r8, r8, r7
   14328:	str	r6, [sp, #152]	; 0x98
   1432c:	ldr	r6, [sp, #164]	; 0xa4
   14330:	eor	r2, r8, r5
   14334:	ldr	r9, [sp, #244]	; 0xf4
   14338:	adds	r0, r6, r2
   1433c:	ldr	r6, [sp, #172]	; 0xac
   14340:	eor	r9, lr, r9
   14344:	eor	sl, sl, r0
   14348:	adc	r6, r6, r9
   1434c:	ldr	fp, [sp, #52]	; 0x34
   14350:	eor	r7, r7, r6
   14354:	adds	lr, fp, lr
   14358:	lsr	r5, sl, #24
   1435c:	ldr	fp, [sp, #56]	; 0x38
   14360:	orr	r5, r5, r7, lsl #8
   14364:	lsr	r7, r7, #24
   14368:	adc	r8, fp, r8
   1436c:	orr	r7, r7, sl, lsl #8
   14370:	adds	lr, lr, r5
   14374:	eor	r2, r2, lr
   14378:	str	lr, [sp, #176]	; 0xb0
   1437c:	adc	lr, r8, r7
   14380:	eor	r9, r9, lr
   14384:	str	lr, [sp, #204]	; 0xcc
   14388:	lsr	lr, r2, #16
   1438c:	orr	fp, lr, r9, lsl #16
   14390:	lsr	r9, r9, #16
   14394:	adds	r0, r0, fp
   14398:	orr	r2, r9, r2, lsl #16
   1439c:	adc	r6, r6, r2
   143a0:	eor	r5, r5, r0
   143a4:	eor	r7, r7, r6
   143a8:	ldr	r9, [sp, #76]	; 0x4c
   143ac:	ldr	lr, [sp, #208]	; 0xd0
   143b0:	lsl	r8, r5, #1
   143b4:	adds	lr, r9, lr
   143b8:	str	fp, [sp, #244]	; 0xf4
   143bc:	lsl	r9, r7, #1
   143c0:	ldr	fp, [sp, #212]	; 0xd4
   143c4:	orr	r7, r8, r7, lsr #31
   143c8:	ldr	r8, [sp, #4]
   143cc:	orr	r5, r9, r5, lsr #31
   143d0:	adc	r8, r8, fp
   143d4:	adds	lr, lr, r7
   143d8:	adc	r8, r8, r5
   143dc:	ldr	r9, [sp, #152]	; 0x98
   143e0:	eor	r3, r3, r8
   143e4:	ldr	fp, [sp, #156]	; 0x9c
   143e8:	adds	r9, r9, r3
   143ec:	eor	ip, ip, lr
   143f0:	adc	sl, fp, ip
   143f4:	eor	r7, r7, r9
   143f8:	ldr	fp, [sp, #8]
   143fc:	eor	r5, r5, sl
   14400:	adds	lr, fp, lr
   14404:	lsr	fp, r7, #24
   14408:	orr	fp, fp, r5, lsl #8
   1440c:	lsr	r5, r5, #24
   14410:	str	fp, [sp, #172]	; 0xac
   14414:	orr	r5, r5, r7, lsl #8
   14418:	mov	r7, r5
   1441c:	ldr	fp, [sp, #88]	; 0x58
   14420:	ldr	r5, [sp, #172]	; 0xac
   14424:	adc	r8, fp, r8
   14428:	adds	r5, lr, r5
   1442c:	str	r5, [sp, #208]	; 0xd0
   14430:	eor	r3, r3, r5
   14434:	adc	r5, r8, r7
   14438:	eor	ip, ip, r5
   1443c:	str	r7, [sp, #248]	; 0xf8
   14440:	str	r5, [sp, #212]	; 0xd4
   14444:	ldr	r7, [sp, #168]	; 0xa8
   14448:	ldr	r5, [sp, #140]	; 0x8c
   1444c:	lsr	lr, r3, #16
   14450:	eor	fp, r5, r7
   14454:	orr	lr, lr, ip, lsl #16
   14458:	ldr	r7, [sp, #228]	; 0xe4
   1445c:	ldr	r5, [sp, #144]	; 0x90
   14460:	lsr	ip, ip, #16
   14464:	adds	r9, r9, lr
   14468:	orr	ip, ip, r3, lsl #16
   1446c:	adc	r3, sl, ip
   14470:	eor	r8, r5, r7
   14474:	str	ip, [sp, #268]	; 0x10c
   14478:	ldr	r7, [sp, #180]	; 0xb4
   1447c:	ldr	ip, [sp, #44]	; 0x2c
   14480:	str	lr, [sp, #252]	; 0xfc
   14484:	str	r9, [sp, #224]	; 0xe0
   14488:	adds	lr, ip, r7
   1448c:	ldr	r9, [sp, #48]	; 0x30
   14490:	ldr	r7, [sp, #216]	; 0xd8
   14494:	str	r3, [sp, #228]	; 0xe4
   14498:	lsl	r3, fp, #1
   1449c:	orr	r3, r3, r8, lsr #31
   144a0:	lsl	r8, r8, #1
   144a4:	adc	ip, r9, r7
   144a8:	orr	fp, r8, fp, lsr #31
   144ac:	adds	lr, lr, r3
   144b0:	adc	ip, ip, fp
   144b4:	eor	r1, r1, ip
   144b8:	adds	r0, r0, r1
   144bc:	eor	r4, r4, lr
   144c0:	adc	r9, r6, r4
   144c4:	eor	r3, r3, r0
   144c8:	eor	fp, fp, r9
   144cc:	ldr	r8, [sp, #28]
   144d0:	lsr	r6, r3, #24
   144d4:	ldr	sl, [sp, #32]
   144d8:	adds	lr, r8, lr
   144dc:	orr	r5, r6, fp, lsl #8
   144e0:	lsr	fp, fp, #24
   144e4:	orr	r3, fp, r3, lsl #8
   144e8:	ldr	r7, [sp, #256]	; 0x100
   144ec:	ldr	fp, [sp, #220]	; 0xdc
   144f0:	adc	ip, sl, ip
   144f4:	adds	r6, lr, r5
   144f8:	adc	ip, ip, r3
   144fc:	eor	r1, r1, r6
   14500:	eor	r8, fp, r7
   14504:	eor	r4, r4, ip
   14508:	ldr	r7, [sp, #260]	; 0x104
   1450c:	str	r6, [sp, #180]	; 0xb4
   14510:	ldr	r6, [sp, #148]	; 0x94
   14514:	str	ip, [sp, #216]	; 0xd8
   14518:	lsr	ip, r1, #16
   1451c:	str	r5, [sp, #168]	; 0xa8
   14520:	eor	r5, r6, r7
   14524:	orr	r7, ip, r4, lsl #16
   14528:	lsr	r4, r4, #16
   1452c:	adds	r0, r0, r7
   14530:	orr	r1, r4, r1, lsl #16
   14534:	str	r7, [sp, #256]	; 0x100
   14538:	str	r0, [sp, #160]	; 0xa0
   1453c:	ldr	r7, [sp, #116]	; 0x74
   14540:	adc	r0, r9, r1
   14544:	str	r1, [sp, #260]	; 0x104
   14548:	ldr	r1, [sp, #196]	; 0xc4
   1454c:	str	r0, [sp, #164]	; 0xa4
   14550:	adds	r1, r7, r1
   14554:	ldr	r0, [sp, #120]	; 0x78
   14558:	lsl	ip, r8, #1
   1455c:	ldr	r7, [sp, #200]	; 0xc8
   14560:	orr	ip, ip, r5, lsr #31
   14564:	lsl	r5, r5, #1
   14568:	adc	r7, r0, r7
   1456c:	orr	r8, r5, r8, lsr #31
   14570:	adds	r1, r1, ip
   14574:	adc	r7, r7, r8
   14578:	ldr	r6, [sp, #140]	; 0x8c
   1457c:	eor	r2, r2, r7
   14580:	ldr	r9, [sp, #244]	; 0xf4
   14584:	adds	r0, r6, r2
   14588:	ldr	r6, [sp, #144]	; 0x90
   1458c:	eor	lr, r1, r9
   14590:	adc	r5, r6, lr
   14594:	eor	ip, ip, r0
   14598:	eor	r8, r8, r5
   1459c:	ldr	r4, [sp, #108]	; 0x6c
   145a0:	ldr	r9, [sp, #112]	; 0x70
   145a4:	lsr	sl, ip, #24
   145a8:	orr	sl, sl, r8, lsl #8
   145ac:	adds	r1, r4, r1
   145b0:	lsr	r8, r8, #24
   145b4:	adc	r7, r9, r7
   145b8:	orr	r8, r8, ip, lsl #8
   145bc:	adds	r1, r1, sl
   145c0:	adc	r4, r7, r8
   145c4:	eor	r2, r2, r1
   145c8:	eor	lr, lr, r4
   145cc:	ldr	r7, [sp, #152]	; 0x98
   145d0:	str	r1, [sp, #196]	; 0xc4
   145d4:	lsr	r9, r2, #16
   145d8:	ldr	r1, [sp, #236]	; 0xec
   145dc:	orr	r9, r9, lr, lsl #16
   145e0:	lsr	lr, lr, #16
   145e4:	adds	r0, r0, r9
   145e8:	eor	r1, r7, r1
   145ec:	orr	r2, lr, r2, lsl #16
   145f0:	ldr	r7, [sp, #240]	; 0xf0
   145f4:	ldr	r6, [sp, #156]	; 0x9c
   145f8:	adc	r5, r5, r2
   145fc:	str	r9, [sp, #236]	; 0xec
   14600:	str	r2, [sp, #240]	; 0xf0
   14604:	ldr	r9, [sp, #100]	; 0x64
   14608:	ldr	r2, [sp, #176]	; 0xb0
   1460c:	eor	ip, r6, r7
   14610:	adds	lr, r9, r2
   14614:	str	r4, [sp, #200]	; 0xc8
   14618:	ldr	r2, [sp, #204]	; 0xcc
   1461c:	ldr	r4, [sp, #104]	; 0x68
   14620:	lsl	r7, r1, #1
   14624:	orr	r7, r7, ip, lsr #31
   14628:	lsl	ip, ip, #1
   1462c:	orr	ip, ip, r1, lsr #31
   14630:	ldr	r6, [sp, #232]	; 0xe8
   14634:	ldr	r1, [sp, #264]	; 0x108
   14638:	str	r8, [sp, #140]	; 0x8c
   1463c:	adc	r8, r4, r2
   14640:	adds	lr, lr, r7
   14644:	adc	r9, r8, ip
   14648:	eor	r2, lr, r6
   1464c:	eor	r8, r9, r1
   14650:	ldr	r6, [sp, #148]	; 0x94
   14654:	adds	r1, fp, r8
   14658:	adc	r4, r6, r2
   1465c:	eor	r7, r7, r1
   14660:	ldr	r6, [sp, #136]	; 0x88
   14664:	eor	ip, ip, r4
   14668:	adds	lr, r6, lr
   1466c:	lsr	fp, r7, #24
   14670:	ldr	r6, [sp, #124]	; 0x7c
   14674:	orr	fp, fp, ip, lsl #8
   14678:	lsr	ip, ip, #24
   1467c:	adc	r9, r6, r9
   14680:	orr	r6, ip, r7, lsl #8
   14684:	adds	r7, lr, fp
   14688:	adc	ip, r9, r6
   1468c:	str	r6, [sp, #148]	; 0x94
   14690:	ldr	r9, [sp, #160]	; 0xa0
   14694:	ldr	r6, [sp, #168]	; 0xa8
   14698:	eor	r8, r8, r7
   1469c:	str	r7, [sp, #176]	; 0xb0
   146a0:	ldr	r7, [sp, #164]	; 0xa4
   146a4:	eor	r6, r6, r9
   146a8:	eor	r2, r2, ip
   146ac:	str	ip, [sp, #204]	; 0xcc
   146b0:	lsr	lr, r8, #16
   146b4:	eor	ip, r7, r3
   146b8:	orr	lr, lr, r2, lsl #16
   146bc:	lsl	r3, r6, #1
   146c0:	lsr	r2, r2, #16
   146c4:	orr	r7, r2, r8, lsl #16
   146c8:	lsl	r8, ip, #1
   146cc:	ldr	r2, [sp, #208]	; 0xd0
   146d0:	orr	ip, r3, ip, lsr #31
   146d4:	ldr	r3, [sp, #36]	; 0x24
   146d8:	adds	r1, r1, lr
   146dc:	adc	r4, r4, r7
   146e0:	orr	r8, r8, r6, lsr #31
   146e4:	adds	r2, r3, r2
   146e8:	ldr	r6, [sp, #40]	; 0x28
   146ec:	ldr	r3, [sp, #212]	; 0xd4
   146f0:	eor	fp, fp, r1
   146f4:	adc	r6, r6, r3
   146f8:	adds	r2, r2, ip
   146fc:	adc	r6, r6, r8
   14700:	eor	r3, r6, r7
   14704:	adds	r7, r0, r3
   14708:	eor	lr, lr, r2
   1470c:	adc	r9, r5, lr
   14710:	str	r9, [sp, #144]	; 0x90
   14714:	eor	ip, ip, r7
   14718:	eor	r8, r8, r9
   1471c:	ldr	r9, [sp, #68]	; 0x44
   14720:	eor	r0, r0, sl
   14724:	adds	r2, r9, r2
   14728:	lsr	r9, ip, #24
   1472c:	orr	r9, r9, r8, lsl #8
   14730:	lsr	r8, r8, #24
   14734:	str	r9, [sp, #168]	; 0xa8
   14738:	orr	r8, r8, ip, lsl #8
   1473c:	mov	ip, r8
   14740:	ldr	r9, [sp, #72]	; 0x48
   14744:	ldr	r8, [sp, #168]	; 0xa8
   14748:	adc	r6, r9, r6
   1474c:	adds	r2, r2, r8
   14750:	adc	r8, r6, ip
   14754:	eor	r3, r3, r2
   14758:	eor	lr, lr, r8
   1475c:	str	r2, [sp, #208]	; 0xd0
   14760:	lsr	r2, r3, #16
   14764:	orr	sl, r2, lr, lsl #16
   14768:	str	r8, [sp, #212]	; 0xd4
   1476c:	lsr	lr, lr, #16
   14770:	ldr	r8, [sp, #140]	; 0x8c
   14774:	str	sl, [sp, #244]	; 0xf4
   14778:	adds	sl, r7, sl
   1477c:	orr	r3, lr, r3, lsl #16
   14780:	str	sl, [sp, #140]	; 0x8c
   14784:	ldr	sl, [sp, #144]	; 0x90
   14788:	eor	r5, r5, r8
   1478c:	mov	r8, r3
   14790:	adc	sl, sl, r8
   14794:	ldr	r6, [sp, #180]	; 0xb4
   14798:	lsl	r3, r0, #1
   1479c:	ldr	r2, [sp, #60]	; 0x3c
   147a0:	str	ip, [sp, #232]	; 0xe8
   147a4:	str	sl, [sp, #144]	; 0x90
   147a8:	ldr	ip, [sp, #216]	; 0xd8
   147ac:	lsl	sl, r5, #1
   147b0:	orr	r5, r3, r5, lsr #31
   147b4:	ldr	r3, [sp, #64]	; 0x40
   147b8:	adds	r2, r2, r6
   147bc:	adc	ip, r3, ip
   147c0:	orr	r0, sl, r0, lsr #31
   147c4:	adds	r2, r2, r5
   147c8:	str	r8, [sp, #264]	; 0x108
   147cc:	ldr	r8, [sp, #268]	; 0x10c
   147d0:	adc	ip, ip, r0
   147d4:	ldr	lr, [sp, #252]	; 0xfc
   147d8:	eor	r3, ip, r8
   147dc:	adds	r6, r1, r3
   147e0:	eor	lr, r2, lr
   147e4:	eor	r7, r6, r5
   147e8:	adc	r5, r4, lr
   147ec:	eor	r0, r0, r5
   147f0:	ldr	sl, [sp, #92]	; 0x5c
   147f4:	lsr	r8, r7, #24
   147f8:	adds	r2, sl, r2
   147fc:	orr	sl, r8, r0, lsl #8
   14800:	ldr	r8, [sp, #96]	; 0x60
   14804:	lsr	r0, r0, #24
   14808:	orr	r0, r0, r7, lsl #8
   1480c:	adc	ip, r8, ip
   14810:	mov	r8, r0
   14814:	adds	r0, r2, sl
   14818:	adc	ip, ip, r8
   1481c:	eor	r3, r3, r0
   14820:	eor	lr, lr, ip
   14824:	str	ip, [sp, #216]	; 0xd8
   14828:	lsr	ip, r3, #16
   1482c:	orr	ip, ip, lr, lsl #16
   14830:	lsr	lr, lr, #16
   14834:	adds	r6, r6, ip
   14838:	orr	r3, lr, r3, lsl #16
   1483c:	str	r0, [sp, #180]	; 0xb4
   14840:	str	r6, [sp, #220]	; 0xdc
   14844:	ldr	r0, [sp, #148]	; 0x94
   14848:	adc	r6, r5, r3
   1484c:	str	r6, [sp, #148]	; 0x94
   14850:	ldr	r2, [sp, #52]	; 0x34
   14854:	ldr	r6, [sp, #196]	; 0xc4
   14858:	eor	r4, r4, r0
   1485c:	lsl	r1, fp, #1
   14860:	adds	r2, r2, r6
   14864:	ldr	lr, [sp, #200]	; 0xc8
   14868:	ldr	r6, [sp, #56]	; 0x38
   1486c:	lsl	r0, r4, #1
   14870:	orr	r4, r1, r4, lsr #31
   14874:	adc	r7, r6, lr
   14878:	orr	r0, r0, fp, lsr #31
   1487c:	adds	r2, r2, r4
   14880:	str	sl, [sp, #252]	; 0xfc
   14884:	str	r8, [sp, #268]	; 0x10c
   14888:	ldr	r1, [sp, #260]	; 0x104
   1488c:	adc	r7, r7, r0
   14890:	ldr	fp, [sp, #224]	; 0xe0
   14894:	ldr	lr, [sp, #256]	; 0x100
   14898:	ldr	r9, [sp, #228]	; 0xe4
   1489c:	eor	r1, r7, r1
   148a0:	adds	r6, fp, r1
   148a4:	eor	lr, r2, lr
   148a8:	adc	r5, r9, lr
   148ac:	eor	r4, r4, r6
   148b0:	ldr	r8, [sp, #20]
   148b4:	eor	r0, r0, r5
   148b8:	adds	r2, r8, r2
   148bc:	lsr	r8, r4, #24
   148c0:	orr	sl, r8, r0, lsl #8
   148c4:	mov	r8, sl
   148c8:	lsr	r0, r0, #24
   148cc:	ldr	sl, [sp, #24]
   148d0:	orr	r4, r0, r4, lsl #8
   148d4:	adc	r7, sl, r7
   148d8:	mov	r0, r4
   148dc:	adds	r4, r2, r8
   148e0:	eor	r1, r1, r4
   148e4:	str	r4, [sp, #196]	; 0xc4
   148e8:	adc	r4, r7, r0
   148ec:	eor	lr, lr, r4
   148f0:	ldr	r7, [sp, #172]	; 0xac
   148f4:	str	r4, [sp, #200]	; 0xc8
   148f8:	lsr	r4, r1, #16
   148fc:	orr	r4, r4, lr, lsl #16
   14900:	lsr	lr, lr, #16
   14904:	adds	r6, r6, r4
   14908:	eor	fp, fp, r7
   1490c:	orr	r1, lr, r1, lsl #16
   14910:	ldr	r7, [sp, #248]	; 0xf8
   14914:	adc	lr, r5, r1
   14918:	eor	sl, r9, r7
   1491c:	str	r0, [sp, #260]	; 0x104
   14920:	str	lr, [sp, #156]	; 0x9c
   14924:	ldr	r0, [sp, #12]
   14928:	ldr	lr, [sp, #176]	; 0xb0
   1492c:	lsl	r2, fp, #1
   14930:	adds	lr, r0, lr
   14934:	lsl	r7, sl, #1
   14938:	ldr	r0, [sp, #16]
   1493c:	orr	sl, r2, sl, lsr #31
   14940:	ldr	r2, [sp, #204]	; 0xcc
   14944:	ldr	r5, [sp, #236]	; 0xec
   14948:	orr	r7, r7, fp, lsr #31
   1494c:	str	r8, [sp, #256]	; 0x100
   14950:	adc	r8, r0, r2
   14954:	adds	lr, lr, sl
   14958:	ldr	r2, [sp, #240]	; 0xf0
   1495c:	adc	r8, r8, r7
   14960:	ldr	r0, [sp, #160]	; 0xa0
   14964:	eor	r9, lr, r5
   14968:	eor	r2, r8, r2
   1496c:	ldr	r5, [sp, #164]	; 0xa4
   14970:	adds	r0, r0, r2
   14974:	eor	sl, sl, r0
   14978:	str	r6, [sp, #152]	; 0x98
   1497c:	ldr	fp, [sp, #80]	; 0x50
   14980:	adc	r6, r5, r9
   14984:	eor	r7, r7, r6
   14988:	adds	lr, fp, lr
   1498c:	lsr	r5, sl, #24
   14990:	ldr	fp, [sp, #84]	; 0x54
   14994:	orr	r5, r5, r7, lsl #8
   14998:	lsr	r7, r7, #24
   1499c:	adc	r8, fp, r8
   149a0:	orr	r7, r7, sl, lsl #8
   149a4:	adds	lr, lr, r5
   149a8:	eor	r2, r2, lr
   149ac:	str	lr, [sp, #204]	; 0xcc
   149b0:	adc	lr, r8, r7
   149b4:	eor	r9, r9, lr
   149b8:	str	lr, [sp, #224]	; 0xe0
   149bc:	lsr	lr, r2, #16
   149c0:	orr	fp, lr, r9, lsl #16
   149c4:	lsr	r9, r9, #16
   149c8:	adds	r0, r0, fp
   149cc:	orr	r2, r9, r2, lsl #16
   149d0:	adc	r6, r6, r2
   149d4:	eor	r5, r5, r0
   149d8:	str	fp, [sp, #236]	; 0xec
   149dc:	ldr	lr, [sp, #8]
   149e0:	ldr	fp, [sp, #208]	; 0xd0
   149e4:	eor	r7, r7, r6
   149e8:	lsl	r8, r5, #1
   149ec:	adds	lr, lr, fp
   149f0:	ldr	sl, [sp, #88]	; 0x58
   149f4:	ldr	fp, [sp, #212]	; 0xd4
   149f8:	lsl	r9, r7, #1
   149fc:	orr	r7, r8, r7, lsr #31
   14a00:	orr	r5, r9, r5, lsr #31
   14a04:	adc	r8, sl, fp
   14a08:	adds	lr, lr, r7
   14a0c:	adc	r8, r8, r5
   14a10:	ldr	r9, [sp, #152]	; 0x98
   14a14:	eor	r3, r3, r8
   14a18:	ldr	fp, [sp, #156]	; 0x9c
   14a1c:	adds	r9, r9, r3
   14a20:	eor	ip, ip, lr
   14a24:	adc	sl, fp, ip
   14a28:	eor	r7, r7, r9
   14a2c:	ldr	fp, [sp, #20]
   14a30:	eor	r5, r5, sl
   14a34:	adds	lr, fp, lr
   14a38:	lsr	fp, r7, #24
   14a3c:	orr	fp, fp, r5, lsl #8
   14a40:	str	fp, [sp, #176]	; 0xb0
   14a44:	lsr	r5, r5, #24
   14a48:	ldr	fp, [sp, #24]
   14a4c:	orr	r7, r5, r7, lsl #8
   14a50:	ldr	r5, [sp, #176]	; 0xb0
   14a54:	adc	r8, fp, r8
   14a58:	adds	r5, lr, r5
   14a5c:	str	r7, [sp, #240]	; 0xf0
   14a60:	adc	r7, r8, r7
   14a64:	eor	r3, r3, r5
   14a68:	eor	ip, ip, r7
   14a6c:	str	r5, [sp, #208]	; 0xd0
   14a70:	str	r7, [sp, #212]	; 0xd4
   14a74:	ldr	r5, [sp, #140]	; 0x8c
   14a78:	ldr	r7, [sp, #168]	; 0xa8
   14a7c:	ldr	lr, [sp, #144]	; 0x90
   14a80:	eor	fp, r5, r7
   14a84:	ldr	r7, [sp, #232]	; 0xe8
   14a88:	ldr	r5, [sp, #76]	; 0x4c
   14a8c:	eor	r8, lr, r7
   14a90:	lsr	lr, r3, #16
   14a94:	orr	r7, lr, ip, lsl #16
   14a98:	lsr	ip, ip, #16
   14a9c:	adds	r9, r9, r7
   14aa0:	orr	r3, ip, r3, lsl #16
   14aa4:	str	r7, [sp, #232]	; 0xe8
   14aa8:	ldr	lr, [sp, #60]	; 0x3c
   14aac:	ldr	r7, [sp, #180]	; 0xb4
   14ab0:	str	r3, [sp, #248]	; 0xf8
   14ab4:	adc	r3, sl, r3
   14ab8:	ldr	ip, [sp, #216]	; 0xd8
   14abc:	adds	lr, lr, r7
   14ac0:	str	r3, [sp, #164]	; 0xa4
   14ac4:	ldr	r7, [sp, #64]	; 0x40
   14ac8:	lsl	r3, fp, #1
   14acc:	orr	r3, r3, r8, lsr #31
   14ad0:	lsl	r8, r8, #1
   14ad4:	adc	ip, r7, ip
   14ad8:	orr	fp, r8, fp, lsr #31
   14adc:	adds	lr, lr, r3
   14ae0:	adc	ip, ip, fp
   14ae4:	eor	r1, r1, ip
   14ae8:	adds	r0, r0, r1
   14aec:	eor	r4, r4, lr
   14af0:	eor	r3, r3, r0
   14af4:	str	r9, [sp, #160]	; 0xa0
   14af8:	adc	r9, r6, r4
   14afc:	eor	fp, fp, r9
   14b00:	ldr	r7, [sp, #4]
   14b04:	lsr	r6, r3, #24
   14b08:	adds	lr, r5, lr
   14b0c:	orr	r6, r6, fp, lsl #8
   14b10:	lsr	fp, fp, #24
   14b14:	orr	r3, fp, r3, lsl #8
   14b18:	adc	ip, r7, ip
   14b1c:	adds	sl, lr, r6
   14b20:	adc	ip, ip, r3
   14b24:	ldr	fp, [sp, #220]	; 0xdc
   14b28:	eor	r4, r4, ip
   14b2c:	str	ip, [sp, #228]	; 0xe4
   14b30:	ldr	ip, [sp, #252]	; 0xfc
   14b34:	eor	r1, r1, sl
   14b38:	eor	r8, fp, ip
   14b3c:	ldr	r7, [sp, #148]	; 0x94
   14b40:	ldr	ip, [sp, #268]	; 0x10c
   14b44:	str	sl, [sp, #216]	; 0xd8
   14b48:	eor	r5, r7, ip
   14b4c:	lsr	ip, r1, #16
   14b50:	orr	ip, ip, r4, lsl #16
   14b54:	lsr	r4, r4, #16
   14b58:	adds	r0, r0, ip
   14b5c:	orr	r1, r4, r1, lsl #16
   14b60:	str	r1, [sp, #268]	; 0x10c
   14b64:	adc	r1, r9, r1
   14b68:	str	ip, [sp, #252]	; 0xfc
   14b6c:	str	r0, [sp, #168]	; 0xa8
   14b70:	str	r1, [sp, #172]	; 0xac
   14b74:	ldr	r1, [sp, #36]	; 0x24
   14b78:	ldr	ip, [sp, #196]	; 0xc4
   14b7c:	ldr	r0, [sp, #200]	; 0xc8
   14b80:	adds	r1, r1, ip
   14b84:	ldr	r7, [sp, #40]	; 0x28
   14b88:	lsl	ip, r8, #1
   14b8c:	orr	ip, ip, r5, lsr #31
   14b90:	lsl	r5, r5, #1
   14b94:	adc	r7, r7, r0
   14b98:	orr	r8, r5, r8, lsr #31
   14b9c:	adds	r1, r1, ip
   14ba0:	adc	r7, r7, r8
   14ba4:	ldr	r5, [sp, #140]	; 0x8c
   14ba8:	eor	r2, r2, r7
   14bac:	adds	r0, r5, r2
   14bb0:	ldr	r5, [sp, #236]	; 0xec
   14bb4:	eor	ip, ip, r0
   14bb8:	eor	lr, r1, r5
   14bbc:	ldr	r5, [sp, #144]	; 0x90
   14bc0:	ldr	r4, [sp, #52]	; 0x34
   14bc4:	adc	r5, r5, lr
   14bc8:	eor	r8, r8, r5
   14bcc:	adds	r1, r4, r1
   14bd0:	lsr	sl, ip, #24
   14bd4:	ldr	r4, [sp, #56]	; 0x38
   14bd8:	orr	sl, sl, r8, lsl #8
   14bdc:	lsr	r8, r8, #24
   14be0:	adc	r7, r4, r7
   14be4:	orr	r4, r8, ip, lsl #8
   14be8:	adds	ip, r1, sl
   14bec:	adc	r9, r7, r4
   14bf0:	eor	r2, r2, ip
   14bf4:	eor	lr, lr, r9
   14bf8:	str	ip, [sp, #196]	; 0xc4
   14bfc:	str	r9, [sp, #200]	; 0xc8
   14c00:	ldr	ip, [sp, #256]	; 0x100
   14c04:	lsr	r9, r2, #16
   14c08:	ldr	r1, [sp, #152]	; 0x98
   14c0c:	str	r4, [sp, #220]	; 0xdc
   14c10:	orr	r4, r9, lr, lsl #16
   14c14:	lsr	lr, lr, #16
   14c18:	adds	r0, r0, r4
   14c1c:	eor	r1, r1, ip
   14c20:	orr	r2, lr, r2, lsl #16
   14c24:	ldr	r7, [sp, #156]	; 0x9c
   14c28:	ldr	ip, [sp, #260]	; 0x104
   14c2c:	adc	r5, r5, r2
   14c30:	ldr	lr, [sp, #204]	; 0xcc
   14c34:	str	r2, [sp, #256]	; 0x100
   14c38:	ldr	r2, [sp, #92]	; 0x5c
   14c3c:	eor	ip, r7, ip
   14c40:	adds	lr, r2, lr
   14c44:	str	r4, [sp, #236]	; 0xec
   14c48:	ldr	r2, [sp, #224]	; 0xe0
   14c4c:	ldr	r4, [sp, #96]	; 0x60
   14c50:	lsl	r7, r1, #1
   14c54:	orr	r7, r7, ip, lsr #31
   14c58:	lsl	ip, ip, #1
   14c5c:	adc	r8, r4, r2
   14c60:	orr	ip, ip, r1, lsr #31
   14c64:	adds	lr, lr, r7
   14c68:	ldr	r1, [sp, #264]	; 0x108
   14c6c:	adc	r9, r8, ip
   14c70:	eor	r8, r9, r1
   14c74:	ldr	r1, [sp, #244]	; 0xf4
   14c78:	str	r5, [sp, #140]	; 0x8c
   14c7c:	ldr	r5, [sp, #148]	; 0x94
   14c80:	eor	r2, lr, r1
   14c84:	adds	r1, fp, r8
   14c88:	adc	r4, r5, r2
   14c8c:	eor	r7, r7, r1
   14c90:	ldr	r5, [sp, #12]
   14c94:	eor	ip, ip, r4
   14c98:	adds	lr, r5, lr
   14c9c:	lsr	fp, r7, #24
   14ca0:	ldr	r5, [sp, #16]
   14ca4:	orr	fp, fp, ip, lsl #8
   14ca8:	adc	r9, r5, r9
   14cac:	lsr	ip, ip, #24
   14cb0:	adds	lr, lr, fp
   14cb4:	orr	r5, ip, r7, lsl #8
   14cb8:	eor	r8, r8, lr
   14cbc:	str	lr, [sp, #204]	; 0xcc
   14cc0:	ldr	lr, [sp, #168]	; 0xa8
   14cc4:	adc	r9, r9, r5
   14cc8:	ldr	ip, [sp, #172]	; 0xac
   14ccc:	eor	r6, r6, lr
   14cd0:	eor	r2, r2, r9
   14cd4:	eor	ip, ip, r3
   14cd8:	lsr	lr, r8, #16
   14cdc:	orr	lr, lr, r2, lsl #16
   14ce0:	lsl	r3, r6, #1
   14ce4:	lsr	r2, r2, #16
   14ce8:	orr	r7, r2, r8, lsl #16
   14cec:	str	r5, [sp, #148]	; 0x94
   14cf0:	lsl	r8, ip, #1
   14cf4:	orr	ip, r3, ip, lsr #31
   14cf8:	ldr	r3, [sp, #136]	; 0x88
   14cfc:	ldr	r2, [sp, #208]	; 0xd0
   14d00:	adds	r1, r1, lr
   14d04:	orr	r8, r8, r6, lsr #31
   14d08:	ldr	r5, [sp, #124]	; 0x7c
   14d0c:	ldr	r6, [sp, #212]	; 0xd4
   14d10:	adc	r4, r4, r7
   14d14:	adds	r2, r3, r2
   14d18:	adc	r6, r5, r6
   14d1c:	adds	r2, r2, ip
   14d20:	adc	r6, r6, r8
   14d24:	eor	r3, r6, r7
   14d28:	ldr	r5, [sp, #140]	; 0x8c
   14d2c:	adds	r7, r0, r3
   14d30:	eor	lr, lr, r2
   14d34:	adc	r5, r5, lr
   14d38:	eor	ip, ip, r7
   14d3c:	str	r5, [sp, #144]	; 0x90
   14d40:	eor	r8, r8, r5
   14d44:	ldr	r5, [sp, #28]
   14d48:	eor	r0, r0, sl
   14d4c:	adds	r2, r5, r2
   14d50:	lsr	r5, ip, #24
   14d54:	orr	r5, r5, r8, lsl #8
   14d58:	lsr	r8, r8, #24
   14d5c:	str	r5, [sp, #180]	; 0xb4
   14d60:	orr	r8, r8, ip, lsl #8
   14d64:	mov	ip, r8
   14d68:	ldr	r5, [sp, #32]
   14d6c:	ldr	r8, [sp, #180]	; 0xb4
   14d70:	adc	r6, r5, r6
   14d74:	adds	r8, r2, r8
   14d78:	adc	r6, r6, ip
   14d7c:	eor	r3, r3, r8
   14d80:	eor	lr, lr, r6
   14d84:	ldr	r5, [sp, #140]	; 0x8c
   14d88:	str	r8, [sp, #208]	; 0xd0
   14d8c:	lsr	r2, r3, #16
   14d90:	ldr	r8, [sp, #220]	; 0xdc
   14d94:	orr	r2, r2, lr, lsl #16
   14d98:	lsr	lr, lr, #16
   14d9c:	eor	r5, r5, r8
   14da0:	orr	r3, lr, r3, lsl #16
   14da4:	ldr	r8, [sp, #144]	; 0x90
   14da8:	ldr	lr, [sp, #216]	; 0xd8
   14dac:	str	ip, [sp, #244]	; 0xf4
   14db0:	ldr	ip, [sp, #100]	; 0x64
   14db4:	adds	sl, r7, r2
   14db8:	mov	r7, r3
   14dbc:	lsl	r3, r0, #1
   14dc0:	adc	r8, r8, r7
   14dc4:	str	r2, [sp, #260]	; 0x104
   14dc8:	str	sl, [sp, #140]	; 0x8c
   14dcc:	adds	r2, ip, lr
   14dd0:	lsl	sl, r5, #1
   14dd4:	ldr	ip, [sp, #228]	; 0xe4
   14dd8:	orr	r5, r3, r5, lsr #31
   14ddc:	ldr	r3, [sp, #104]	; 0x68
   14de0:	orr	r0, sl, r0, lsr #31
   14de4:	adc	ip, r3, ip
   14de8:	str	r6, [sp, #212]	; 0xd4
   14dec:	adds	r2, r2, r5
   14df0:	ldr	r6, [sp, #248]	; 0xf8
   14df4:	adc	ip, ip, r0
   14df8:	str	r8, [sp, #144]	; 0x90
   14dfc:	ldr	r8, [sp, #232]	; 0xe8
   14e00:	eor	r3, ip, r6
   14e04:	adds	r6, r1, r3
   14e08:	eor	lr, r2, r8
   14e0c:	str	r7, [sp, #264]	; 0x108
   14e10:	ldr	r8, [sp, #108]	; 0x6c
   14e14:	eor	r7, r6, r5
   14e18:	adc	r5, r4, lr
   14e1c:	eor	r0, r0, r5
   14e20:	adds	r2, r8, r2
   14e24:	lsr	r8, r7, #24
   14e28:	orr	sl, r8, r0, lsl #8
   14e2c:	mov	r8, sl
   14e30:	lsr	r0, r0, #24
   14e34:	ldr	sl, [sp, #112]	; 0x70
   14e38:	orr	r0, r0, r7, lsl #8
   14e3c:	adc	ip, sl, ip
   14e40:	mov	sl, r0
   14e44:	adds	r0, r2, r8
   14e48:	adc	r7, ip, sl
   14e4c:	eor	r3, r3, r0
   14e50:	eor	lr, lr, r7
   14e54:	str	r0, [sp, #216]	; 0xd8
   14e58:	str	sl, [sp, #232]	; 0xe8
   14e5c:	str	r7, [sp, #220]	; 0xdc
   14e60:	lsr	ip, r3, #16
   14e64:	str	r8, [sp, #228]	; 0xe4
   14e68:	ldr	r8, [sp, #148]	; 0x94
   14e6c:	orr	ip, ip, lr, lsl #16
   14e70:	eor	fp, fp, r1
   14e74:	eor	r4, r4, r8
   14e78:	adds	r1, r6, ip
   14e7c:	ldr	r8, [sp, #68]	; 0x44
   14e80:	ldr	r6, [sp, #196]	; 0xc4
   14e84:	lsr	lr, lr, #16
   14e88:	orr	r3, lr, r3, lsl #16
   14e8c:	adc	r5, r5, r3
   14e90:	ldr	sl, [sp, #72]	; 0x48
   14e94:	adds	r2, r8, r6
   14e98:	str	r1, [sp, #148]	; 0x94
   14e9c:	ldr	r6, [sp, #200]	; 0xc8
   14ea0:	lsl	r1, fp, #1
   14ea4:	lsl	r0, r4, #1
   14ea8:	orr	r4, r1, r4, lsr #31
   14eac:	adc	r7, sl, r6
   14eb0:	orr	r0, r0, fp, lsr #31
   14eb4:	adds	r2, r2, r4
   14eb8:	ldr	r1, [sp, #268]	; 0x10c
   14ebc:	adc	r7, r7, r0
   14ec0:	ldr	r6, [sp, #160]	; 0xa0
   14ec4:	ldr	lr, [sp, #252]	; 0xfc
   14ec8:	eor	r1, r7, r1
   14ecc:	ldr	r8, [sp, #164]	; 0xa4
   14ed0:	adds	r6, r6, r1
   14ed4:	eor	lr, r2, lr
   14ed8:	eor	r4, r4, r6
   14edc:	str	r5, [sp, #152]	; 0x98
   14ee0:	adc	r5, r8, lr
   14ee4:	eor	r0, r0, r5
   14ee8:	ldr	fp, [sp, #80]	; 0x50
   14eec:	lsr	r8, r4, #24
   14ef0:	adds	r2, fp, r2
   14ef4:	ldr	sl, [sp, #84]	; 0x54
   14ef8:	orr	fp, r8, r0, lsl #8
   14efc:	lsr	r0, r0, #24
   14f00:	orr	r4, r0, r4, lsl #8
   14f04:	adc	r7, sl, r7
   14f08:	mov	r0, r4
   14f0c:	adds	r4, r2, fp
   14f10:	str	fp, [sp, #248]	; 0xf8
   14f14:	ldr	r2, [sp, #160]	; 0xa0
   14f18:	adc	fp, r7, r0
   14f1c:	str	r0, [sp, #252]	; 0xfc
   14f20:	ldr	r0, [sp, #176]	; 0xb0
   14f24:	eor	r1, r1, r4
   14f28:	eor	lr, lr, fp
   14f2c:	str	fp, [sp, #200]	; 0xc8
   14f30:	eor	fp, r2, r0
   14f34:	ldr	r2, [sp, #164]	; 0xa4
   14f38:	ldr	r0, [sp, #240]	; 0xf0
   14f3c:	str	r4, [sp, #196]	; 0xc4
   14f40:	lsr	r4, r1, #16
   14f44:	eor	sl, r2, r0
   14f48:	orr	r4, r4, lr, lsl #16
   14f4c:	lsr	lr, lr, #16
   14f50:	orr	r1, lr, r1, lsl #16
   14f54:	lsl	r2, fp, #1
   14f58:	ldr	r0, [sp, #44]	; 0x2c
   14f5c:	ldr	lr, [sp, #204]	; 0xcc
   14f60:	adds	r6, r6, r4
   14f64:	lsl	r7, sl, #1
   14f68:	orr	sl, r2, sl, lsr #31
   14f6c:	ldr	r2, [sp, #48]	; 0x30
   14f70:	str	r6, [sp, #156]	; 0x9c
   14f74:	adc	r6, r5, r1
   14f78:	adds	lr, r0, lr
   14f7c:	adc	r8, r2, r9
   14f80:	orr	r7, r7, fp, lsr #31
   14f84:	adds	lr, lr, sl
   14f88:	ldr	r2, [sp, #256]	; 0x100
   14f8c:	adc	r8, r8, r7
   14f90:	ldr	r0, [sp, #168]	; 0xa8
   14f94:	ldr	r9, [sp, #236]	; 0xec
   14f98:	eor	r2, r8, r2
   14f9c:	str	r6, [sp, #160]	; 0xa0
   14fa0:	ldr	r6, [sp, #172]	; 0xac
   14fa4:	adds	r0, r0, r2
   14fa8:	eor	r9, lr, r9
   14fac:	eor	sl, sl, r0
   14fb0:	adc	r6, r6, r9
   14fb4:	ldr	fp, [sp, #116]	; 0x74
   14fb8:	eor	r7, r7, r6
   14fbc:	adds	lr, fp, lr
   14fc0:	lsr	r5, sl, #24
   14fc4:	ldr	fp, [sp, #120]	; 0x78
   14fc8:	orr	r5, r5, r7, lsl #8
   14fcc:	lsr	r7, r7, #24
   14fd0:	adc	r8, fp, r8
   14fd4:	orr	r7, r7, sl, lsl #8
   14fd8:	adds	lr, lr, r5
   14fdc:	str	lr, [sp, #204]	; 0xcc
   14fe0:	eor	r2, r2, lr
   14fe4:	adc	lr, r8, r7
   14fe8:	eor	r9, r9, lr
   14fec:	str	lr, [sp, #224]	; 0xe0
   14ff0:	lsr	lr, r2, #16
   14ff4:	orr	sl, lr, r9, lsl #16
   14ff8:	lsr	r9, r9, #16
   14ffc:	adds	r0, r0, sl
   15000:	orr	r2, r9, r2, lsl #16
   15004:	adc	r6, r6, r2
   15008:	eor	r5, r5, r0
   1500c:	eor	r7, r7, r6
   15010:	ldr	r9, [sp, #36]	; 0x24
   15014:	ldr	lr, [sp, #208]	; 0xd0
   15018:	lsl	r8, r5, #1
   1501c:	adds	lr, r9, lr
   15020:	str	sl, [sp, #236]	; 0xec
   15024:	lsl	r9, r7, #1
   15028:	ldr	sl, [sp, #212]	; 0xd4
   1502c:	orr	r7, r8, r7, lsr #31
   15030:	ldr	r8, [sp, #40]	; 0x28
   15034:	orr	r5, r9, r5, lsr #31
   15038:	adc	r8, r8, sl
   1503c:	adds	lr, lr, r7
   15040:	adc	r8, r8, r5
   15044:	ldr	r9, [sp, #156]	; 0x9c
   15048:	eor	r3, r3, r8
   1504c:	ldr	sl, [sp, #160]	; 0xa0
   15050:	adds	r9, r9, r3
   15054:	eor	ip, ip, lr
   15058:	adc	sl, sl, ip
   1505c:	eor	r7, r7, r9
   15060:	ldr	fp, [sp, #108]	; 0x6c
   15064:	eor	r5, r5, sl
   15068:	adds	lr, fp, lr
   1506c:	lsr	fp, r7, #24
   15070:	orr	fp, fp, r5, lsl #8
   15074:	str	fp, [sp, #176]	; 0xb0
   15078:	lsr	r5, r5, #24
   1507c:	orr	r7, r5, r7, lsl #8
   15080:	ldr	fp, [sp, #112]	; 0x70
   15084:	ldr	r5, [sp, #176]	; 0xb0
   15088:	adc	r8, fp, r8
   1508c:	adds	r5, lr, r5
   15090:	adc	r8, r8, r7
   15094:	ldr	lr, [sp, #140]	; 0x8c
   15098:	str	r7, [sp, #240]	; 0xf0
   1509c:	ldr	r7, [sp, #180]	; 0xb4
   150a0:	eor	r3, r3, r5
   150a4:	eor	fp, lr, r7
   150a8:	ldr	r7, [sp, #244]	; 0xf4
   150ac:	ldr	lr, [sp, #144]	; 0x90
   150b0:	eor	ip, ip, r8
   150b4:	str	r8, [sp, #212]	; 0xd4
   150b8:	eor	r8, lr, r7
   150bc:	lsr	lr, r3, #16
   150c0:	orr	r7, lr, ip, lsl #16
   150c4:	lsr	ip, ip, #16
   150c8:	adds	r9, r9, r7
   150cc:	orr	ip, ip, r3, lsl #16
   150d0:	adc	r3, sl, ip
   150d4:	str	ip, [sp, #256]	; 0x100
   150d8:	str	r3, [sp, #164]	; 0xa4
   150dc:	ldr	ip, [sp, #68]	; 0x44
   150e0:	ldr	r3, [sp, #216]	; 0xd8
   150e4:	ldr	sl, [sp, #72]	; 0x48
   150e8:	adds	lr, ip, r3
   150ec:	ldr	ip, [sp, #220]	; 0xdc
   150f0:	lsl	r3, fp, #1
   150f4:	orr	r3, r3, r8, lsr #31
   150f8:	lsl	r8, r8, #1
   150fc:	adc	ip, sl, ip
   15100:	orr	fp, r8, fp, lsr #31
   15104:	adds	lr, lr, r3
   15108:	adc	ip, ip, fp
   1510c:	eor	r1, r1, ip
   15110:	adds	r0, r0, r1
   15114:	eor	r4, r4, lr
   15118:	eor	r3, r3, r0
   1511c:	str	r9, [sp, #180]	; 0xb4
   15120:	adc	r9, r6, r4
   15124:	ldr	r6, [sp, #92]	; 0x5c
   15128:	eor	fp, fp, r9
   1512c:	adds	lr, r6, lr
   15130:	ldr	r8, [sp, #96]	; 0x60
   15134:	lsr	r6, r3, #24
   15138:	orr	r6, r6, fp, lsl #8
   1513c:	lsr	fp, fp, #24
   15140:	orr	r3, fp, r3, lsl #8
   15144:	adc	ip, r8, ip
   15148:	adds	r8, lr, r6
   1514c:	adc	ip, ip, r3
   15150:	eor	r4, r4, ip
   15154:	ldr	lr, [sp, #148]	; 0x94
   15158:	str	r5, [sp, #208]	; 0xd0
   1515c:	str	r7, [sp, #244]	; 0xf4
   15160:	str	r8, [sp, #216]	; 0xd8
   15164:	str	ip, [sp, #220]	; 0xdc
   15168:	ldr	ip, [sp, #228]	; 0xe4
   1516c:	eor	r1, r1, r8
   15170:	ldr	r7, [sp, #152]	; 0x98
   15174:	eor	r8, lr, ip
   15178:	ldr	ip, [sp, #232]	; 0xe8
   1517c:	ldr	fp, [sp, #20]
   15180:	eor	r5, r7, ip
   15184:	lsr	ip, r1, #16
   15188:	orr	ip, ip, r4, lsl #16
   1518c:	lsr	r4, r4, #16
   15190:	adds	r0, r0, ip
   15194:	orr	r1, r4, r1, lsl #16
   15198:	str	ip, [sp, #228]	; 0xe4
   1519c:	ldr	ip, [sp, #196]	; 0xc4
   151a0:	str	r1, [sp, #232]	; 0xe8
   151a4:	adc	r1, r9, r1
   151a8:	ldr	lr, [sp, #24]
   151ac:	str	r0, [sp, #168]	; 0xa8
   151b0:	str	r1, [sp, #172]	; 0xac
   151b4:	ldr	r0, [sp, #200]	; 0xc8
   151b8:	adds	r1, fp, ip
   151bc:	lsl	ip, r8, #1
   151c0:	orr	ip, ip, r5, lsr #31
   151c4:	lsl	r5, r5, #1
   151c8:	adc	r7, lr, r0
   151cc:	orr	r8, r5, r8, lsr #31
   151d0:	adds	r1, r1, ip
   151d4:	adc	r7, r7, r8
   151d8:	ldr	r4, [sp, #236]	; 0xec
   151dc:	ldr	r0, [sp, #140]	; 0x8c
   151e0:	eor	r2, r2, r7
   151e4:	ldr	r9, [sp, #144]	; 0x90
   151e8:	adds	r0, r0, r2
   151ec:	eor	lr, r1, r4
   151f0:	adc	r5, r9, lr
   151f4:	eor	ip, ip, r0
   151f8:	eor	r8, r8, r5
   151fc:	ldr	r9, [sp, #100]	; 0x64
   15200:	lsr	sl, ip, #24
   15204:	ldr	r4, [sp, #104]	; 0x68
   15208:	adds	r1, r9, r1
   1520c:	orr	r9, sl, r8, lsl #8
   15210:	lsr	r8, r8, #24
   15214:	adc	r7, r4, r7
   15218:	adds	sl, r1, r9
   1521c:	orr	r4, r8, ip, lsl #8
   15220:	eor	r2, r2, sl
   15224:	ldr	ip, [sp, #248]	; 0xf8
   15228:	str	r9, [sp, #140]	; 0x8c
   1522c:	str	r4, [sp, #236]	; 0xec
   15230:	ldr	r9, [sp, #156]	; 0x9c
   15234:	adc	r4, r7, r4
   15238:	eor	lr, lr, r4
   1523c:	eor	r1, r9, ip
   15240:	lsr	r9, r2, #16
   15244:	orr	r9, r9, lr, lsl #16
   15248:	ldr	r8, [sp, #160]	; 0xa0
   1524c:	ldr	ip, [sp, #252]	; 0xfc
   15250:	adds	r0, r0, r9
   15254:	ldr	fp, [sp, #80]	; 0x50
   15258:	lsr	lr, lr, #16
   1525c:	str	r9, [sp, #248]	; 0xf8
   15260:	ldr	r9, [sp, #204]	; 0xcc
   15264:	orr	r2, lr, r2, lsl #16
   15268:	eor	ip, r8, ip
   1526c:	adc	r5, r5, r2
   15270:	str	r4, [sp, #200]	; 0xc8
   15274:	adds	lr, fp, r9
   15278:	ldr	r4, [sp, #84]	; 0x54
   1527c:	ldr	r9, [sp, #224]	; 0xe0
   15280:	lsl	r7, r1, #1
   15284:	orr	r7, r7, ip, lsr #31
   15288:	lsl	ip, ip, #1
   1528c:	adc	r8, r4, r9
   15290:	orr	ip, ip, r1, lsr #31
   15294:	adds	lr, lr, r7
   15298:	ldr	r1, [sp, #264]	; 0x108
   1529c:	adc	r9, r8, ip
   152a0:	eor	r8, r9, r1
   152a4:	ldr	r1, [sp, #260]	; 0x104
   152a8:	str	sl, [sp, #196]	; 0xc4
   152ac:	str	r2, [sp, #252]	; 0xfc
   152b0:	eor	r2, lr, r1
   152b4:	ldr	r1, [sp, #148]	; 0x94
   152b8:	ldr	sl, [sp, #152]	; 0x98
   152bc:	adds	r1, r1, r8
   152c0:	adc	r4, sl, r2
   152c4:	eor	r7, r7, r1
   152c8:	ldr	sl, [sp, #44]	; 0x2c
   152cc:	eor	ip, ip, r4
   152d0:	adds	lr, sl, lr
   152d4:	lsr	fp, r7, #24
   152d8:	ldr	sl, [sp, #48]	; 0x30
   152dc:	orr	fp, fp, ip, lsl #8
   152e0:	adc	r9, sl, r9
   152e4:	lsr	ip, ip, #24
   152e8:	adds	lr, lr, fp
   152ec:	orr	r7, ip, r7, lsl #8
   152f0:	eor	r8, r8, lr
   152f4:	str	lr, [sp, #204]	; 0xcc
   152f8:	ldr	lr, [sp, #168]	; 0xa8
   152fc:	adc	r9, r9, r7
   15300:	str	r7, [sp, #148]	; 0x94
   15304:	ldr	r7, [sp, #172]	; 0xac
   15308:	eor	r6, r6, lr
   1530c:	eor	r2, r2, r9
   15310:	eor	ip, r7, r3
   15314:	lsr	lr, r8, #16
   15318:	orr	lr, lr, r2, lsl #16
   1531c:	lsl	r3, r6, #1
   15320:	lsr	r2, r2, #16
   15324:	orr	r7, r2, r8, lsl #16
   15328:	ldr	r2, [sp, #208]	; 0xd0
   1532c:	lsl	r8, ip, #1
   15330:	orr	ip, r3, ip, lsr #31
   15334:	ldr	r3, [sp, #52]	; 0x34
   15338:	adds	r1, r1, lr
   1533c:	adc	r4, r4, r7
   15340:	orr	r8, r8, r6, lsr #31
   15344:	adds	r2, r3, r2
   15348:	ldr	r6, [sp, #56]	; 0x38
   1534c:	ldr	r3, [sp, #212]	; 0xd4
   15350:	eor	fp, fp, r1
   15354:	adc	r6, r6, r3
   15358:	adds	r2, r2, ip
   1535c:	adc	r6, r6, r8
   15360:	eor	r3, r6, r7
   15364:	adds	r7, r0, r3
   15368:	eor	lr, lr, r2
   1536c:	adc	sl, r5, lr
   15370:	eor	ip, ip, r7
   15374:	str	sl, [sp, #144]	; 0x90
   15378:	eor	r8, r8, sl
   1537c:	ldr	sl, [sp, #116]	; 0x74
   15380:	adds	r2, sl, r2
   15384:	lsr	sl, ip, #24
   15388:	orr	sl, sl, r8, lsl #8
   1538c:	lsr	r8, r8, #24
   15390:	str	sl, [sp, #160]	; 0xa0
   15394:	orr	r8, r8, ip, lsl #8
   15398:	mov	ip, r8
   1539c:	ldr	sl, [sp, #120]	; 0x78
   153a0:	ldr	r8, [sp, #160]	; 0xa0
   153a4:	adc	r6, sl, r6
   153a8:	adds	r2, r2, r8
   153ac:	adc	r6, r6, ip
   153b0:	eor	r3, r3, r2
   153b4:	str	r2, [sp, #208]	; 0xd0
   153b8:	ldr	r2, [sp, #140]	; 0x8c
   153bc:	eor	lr, lr, r6
   153c0:	eor	r0, r0, r2
   153c4:	str	r6, [sp, #212]	; 0xd4
   153c8:	lsr	r2, r3, #16
   153cc:	ldr	r6, [sp, #236]	; 0xec
   153d0:	orr	r8, r2, lr, lsl #16
   153d4:	eor	r5, r5, r6
   153d8:	lsr	lr, lr, #16
   153dc:	adds	r6, r7, r8
   153e0:	orr	r3, lr, r3, lsl #16
   153e4:	str	r6, [sp, #140]	; 0x8c
   153e8:	ldr	r6, [sp, #144]	; 0x90
   153ec:	str	ip, [sp, #260]	; 0x104
   153f0:	mov	ip, r3
   153f4:	adc	r6, r6, ip
   153f8:	str	r8, [sp, #236]	; 0xec
   153fc:	str	ip, [sp, #264]	; 0x108
   15400:	ldr	r8, [sp, #216]	; 0xd8
   15404:	ldr	ip, [sp, #76]	; 0x4c
   15408:	lsl	r3, r0, #1
   1540c:	adds	r2, ip, r8
   15410:	ldr	r8, [sp, #4]
   15414:	ldr	ip, [sp, #220]	; 0xdc
   15418:	lsl	sl, r5, #1
   1541c:	orr	r5, r3, r5, lsr #31
   15420:	adc	ip, r8, ip
   15424:	orr	r0, sl, r0, lsr #31
   15428:	adds	r2, r2, r5
   1542c:	ldr	r3, [sp, #256]	; 0x100
   15430:	adc	ip, ip, r0
   15434:	str	r6, [sp, #144]	; 0x90
   15438:	ldr	lr, [sp, #244]	; 0xf4
   1543c:	eor	r3, ip, r3
   15440:	adds	r6, r1, r3
   15444:	eor	lr, r2, lr
   15448:	eor	r7, r6, r5
   1544c:	ldr	r8, [sp, #60]	; 0x3c
   15450:	adc	r5, r4, lr
   15454:	eor	r0, r0, r5
   15458:	adds	r2, r8, r2
   1545c:	lsr	r8, r7, #24
   15460:	orr	r8, r8, r0, lsl #8
   15464:	mov	sl, r8
   15468:	lsr	r0, r0, #24
   1546c:	ldr	r8, [sp, #64]	; 0x40
   15470:	orr	r0, r0, r7, lsl #8
   15474:	adc	ip, r8, ip
   15478:	mov	r8, r0
   1547c:	adds	r0, r2, sl
   15480:	adc	ip, ip, r8
   15484:	eor	r3, r3, r0
   15488:	eor	lr, lr, ip
   1548c:	ldr	r7, [sp, #148]	; 0x94
   15490:	str	ip, [sp, #220]	; 0xdc
   15494:	lsr	ip, r3, #16
   15498:	orr	ip, ip, lr, lsl #16
   1549c:	lsr	lr, lr, #16
   154a0:	eor	r4, r4, r7
   154a4:	orr	r3, lr, r3, lsl #16
   154a8:	ldr	r2, [sp, #12]
   154ac:	ldr	lr, [sp, #196]	; 0xc4
   154b0:	adds	r7, r6, ip
   154b4:	lsl	r1, fp, #1
   154b8:	str	r0, [sp, #216]	; 0xd8
   154bc:	str	r7, [sp, #224]	; 0xe0
   154c0:	lsl	r0, r4, #1
   154c4:	adc	r7, r5, r3
   154c8:	orr	r4, r1, r4, lsr #31
   154cc:	adds	r2, r2, lr
   154d0:	ldr	r1, [sp, #16]
   154d4:	ldr	lr, [sp, #200]	; 0xc8
   154d8:	orr	r0, r0, fp, lsr #31
   154dc:	str	r7, [sp, #148]	; 0x94
   154e0:	adc	r7, r1, lr
   154e4:	adds	r2, r2, r4
   154e8:	ldr	r1, [sp, #232]	; 0xe8
   154ec:	adc	r7, r7, r0
   154f0:	ldr	lr, [sp, #228]	; 0xe4
   154f4:	str	sl, [sp, #244]	; 0xf4
   154f8:	ldr	sl, [sp, #180]	; 0xb4
   154fc:	eor	r1, r7, r1
   15500:	str	r8, [sp, #256]	; 0x100
   15504:	ldr	r8, [sp, #164]	; 0xa4
   15508:	adds	r6, sl, r1
   1550c:	eor	lr, r2, lr
   15510:	adc	r5, r8, lr
   15514:	eor	r4, r4, r6
   15518:	ldr	r8, [sp, #136]	; 0x88
   1551c:	eor	r0, r0, r5
   15520:	adds	r2, r8, r2
   15524:	lsr	r8, r4, #24
   15528:	orr	fp, r8, r0, lsl #8
   1552c:	ldr	r8, [sp, #124]	; 0x7c
   15530:	lsr	r0, r0, #24
   15534:	orr	r4, r0, r4, lsl #8
   15538:	mov	r0, r4
   1553c:	adc	r7, r8, r7
   15540:	adds	r4, r2, fp
   15544:	adc	r7, r7, r0
   15548:	eor	r1, r1, r4
   1554c:	eor	lr, lr, r7
   15550:	str	r0, [sp, #232]	; 0xe8
   15554:	ldr	r0, [sp, #176]	; 0xb0
   15558:	str	r4, [sp, #180]	; 0xb4
   1555c:	lsr	r4, r1, #16
   15560:	ldr	r2, [sp, #164]	; 0xa4
   15564:	orr	r4, r4, lr, lsl #16
   15568:	str	fp, [sp, #228]	; 0xe4
   1556c:	lsr	lr, lr, #16
   15570:	eor	fp, sl, r0
   15574:	ldr	r0, [sp, #240]	; 0xf0
   15578:	orr	r1, lr, r1, lsl #16
   1557c:	str	r7, [sp, #196]	; 0xc4
   15580:	adds	r7, r6, r4
   15584:	eor	sl, r2, r0
   15588:	adc	r5, r5, r1
   1558c:	ldr	r0, [sp, #28]
   15590:	ldr	lr, [sp, #204]	; 0xcc
   15594:	lsl	r2, fp, #1
   15598:	str	r5, [sp, #156]	; 0x9c
   1559c:	ldr	r5, [sp, #32]
   155a0:	adds	lr, r0, lr
   155a4:	str	r7, [sp, #152]	; 0x98
   155a8:	lsl	r7, sl, #1
   155ac:	orr	sl, r2, sl, lsr #31
   155b0:	adc	r8, r5, r9
   155b4:	ldr	r2, [sp, #252]	; 0xfc
   155b8:	adds	lr, lr, sl
   155bc:	orr	r7, r7, fp, lsr #31
   155c0:	adc	r8, r8, r7
   155c4:	ldr	r9, [sp, #248]	; 0xf8
   155c8:	ldr	r0, [sp, #168]	; 0xa8
   155cc:	eor	r2, r8, r2
   155d0:	ldr	r6, [sp, #172]	; 0xac
   155d4:	adds	r0, r0, r2
   155d8:	eor	r9, lr, r9
   155dc:	eor	sl, sl, r0
   155e0:	adc	r6, r6, r9
   155e4:	ldr	fp, [sp, #8]
   155e8:	eor	r7, r7, r6
   155ec:	adds	lr, fp, lr
   155f0:	lsr	r5, sl, #24
   155f4:	ldr	fp, [sp, #88]	; 0x58
   155f8:	orr	r5, r5, r7, lsl #8
   155fc:	lsr	r7, r7, #24
   15600:	adc	r8, fp, r8
   15604:	orr	r7, r7, sl, lsl #8
   15608:	adds	lr, lr, r5
   1560c:	adc	sl, r8, r7
   15610:	eor	r2, r2, lr
   15614:	eor	r9, r9, sl
   15618:	str	lr, [sp, #176]	; 0xb0
   1561c:	lsr	lr, r2, #16
   15620:	orr	lr, lr, r9, lsl #16
   15624:	lsr	r9, r9, #16
   15628:	adds	r0, r0, lr
   1562c:	orr	r2, r9, r2, lsl #16
   15630:	adc	r6, r6, r2
   15634:	eor	r5, r5, r0
   15638:	eor	r7, r7, r6
   1563c:	ldr	r9, [sp, #108]	; 0x6c
   15640:	str	lr, [sp, #240]	; 0xf0
   15644:	ldr	lr, [sp, #208]	; 0xd0
   15648:	ldr	fp, [sp, #212]	; 0xd4
   1564c:	lsl	r8, r5, #1
   15650:	str	sl, [sp, #200]	; 0xc8
   15654:	ldr	sl, [sp, #112]	; 0x70
   15658:	adds	lr, r9, lr
   1565c:	lsl	r9, r7, #1
   15660:	orr	r7, r8, r7, lsr #31
   15664:	orr	r5, r9, r5, lsr #31
   15668:	adc	r8, sl, fp
   1566c:	adds	lr, lr, r7
   15670:	adc	r8, r8, r5
   15674:	ldr	r9, [sp, #152]	; 0x98
   15678:	eor	r3, r3, r8
   1567c:	ldr	sl, [sp, #156]	; 0x9c
   15680:	adds	r9, r9, r3
   15684:	eor	ip, ip, lr
   15688:	adc	sl, sl, ip
   1568c:	eor	r7, r7, r9
   15690:	ldr	fp, [sp, #60]	; 0x3c
   15694:	eor	r5, r5, sl
   15698:	adds	lr, fp, lr
   1569c:	lsr	fp, r7, #24
   156a0:	orr	fp, fp, r5, lsl #8
   156a4:	str	fp, [sp, #172]	; 0xac
   156a8:	lsr	r5, r5, #24
   156ac:	ldr	fp, [sp, #64]	; 0x40
   156b0:	orr	r7, r5, r7, lsl #8
   156b4:	ldr	r5, [sp, #172]	; 0xac
   156b8:	adc	r8, fp, r8
   156bc:	adds	r5, lr, r5
   156c0:	str	r7, [sp, #248]	; 0xf8
   156c4:	adc	r7, r8, r7
   156c8:	ldr	lr, [sp, #160]	; 0xa0
   156cc:	eor	ip, ip, r7
   156d0:	str	r7, [sp, #208]	; 0xd0
   156d4:	ldr	r7, [sp, #140]	; 0x8c
   156d8:	eor	r3, r3, r5
   156dc:	eor	fp, r7, lr
   156e0:	ldr	lr, [sp, #260]	; 0x104
   156e4:	ldr	r7, [sp, #144]	; 0x90
   156e8:	str	r5, [sp, #204]	; 0xcc
   156ec:	eor	r8, r7, lr
   156f0:	lsr	lr, r3, #16
   156f4:	orr	lr, lr, ip, lsl #16
   156f8:	lsr	ip, ip, #16
   156fc:	adds	r9, r9, lr
   15700:	orr	r3, ip, r3, lsl #16
   15704:	str	lr, [sp, #252]	; 0xfc
   15708:	ldr	ip, [sp, #28]
   1570c:	ldr	lr, [sp, #216]	; 0xd8
   15710:	str	r9, [sp, #212]	; 0xd4
   15714:	adc	r9, sl, r3
   15718:	str	r3, [sp, #260]	; 0x104
   1571c:	adds	lr, ip, lr
   15720:	str	r9, [sp, #160]	; 0xa0
   15724:	lsl	r3, fp, #1
   15728:	ldr	r5, [sp, #32]
   1572c:	ldr	ip, [sp, #220]	; 0xdc
   15730:	orr	r3, r3, r8, lsr #31
   15734:	lsl	r8, r8, #1
   15738:	adc	ip, r5, ip
   1573c:	orr	fp, r8, fp, lsr #31
   15740:	adds	lr, lr, r3
   15744:	adc	ip, ip, fp
   15748:	eor	r1, r1, ip
   1574c:	adds	r0, r0, r1
   15750:	eor	r4, r4, lr
   15754:	adc	r9, r6, r4
   15758:	eor	r3, r3, r0
   1575c:	eor	fp, fp, r9
   15760:	ldr	r7, [sp, #12]
   15764:	ldr	r5, [sp, #16]
   15768:	lsr	r6, r3, #24
   1576c:	adds	lr, r7, lr
   15770:	orr	r6, r6, fp, lsl #8
   15774:	lsr	fp, fp, #24
   15778:	orr	r3, fp, r3, lsl #8
   1577c:	adc	ip, r5, ip
   15780:	adds	r8, lr, r6
   15784:	adc	ip, ip, r3
   15788:	eor	r1, r1, r8
   1578c:	eor	r4, r4, ip
   15790:	ldr	fp, [sp, #224]	; 0xe0
   15794:	ldr	lr, [sp, #244]	; 0xf4
   15798:	str	ip, [sp, #220]	; 0xdc
   1579c:	lsr	ip, r1, #16
   157a0:	orr	ip, ip, r4, lsl #16
   157a4:	lsr	r4, r4, #16
   157a8:	adds	r0, r0, ip
   157ac:	orr	r1, r4, r1, lsl #16
   157b0:	str	r8, [sp, #216]	; 0xd8
   157b4:	ldr	r5, [sp, #148]	; 0x94
   157b8:	eor	r8, fp, lr
   157bc:	ldr	lr, [sp, #256]	; 0x100
   157c0:	str	r1, [sp, #256]	; 0x100
   157c4:	adc	r1, r9, r1
   157c8:	eor	r5, r5, lr
   157cc:	str	r1, [sp, #168]	; 0xa8
   157d0:	ldr	lr, [sp, #180]	; 0xb4
   157d4:	ldr	r1, [sp, #136]	; 0x88
   157d8:	str	ip, [sp, #244]	; 0xf4
   157dc:	adds	r1, r1, lr
   157e0:	str	r0, [sp, #164]	; 0xa4
   157e4:	ldr	lr, [sp, #124]	; 0x7c
   157e8:	ldr	r0, [sp, #196]	; 0xc4
   157ec:	lsl	ip, r8, #1
   157f0:	orr	ip, ip, r5, lsr #31
   157f4:	lsl	r5, r5, #1
   157f8:	adc	r7, lr, r0
   157fc:	orr	r8, r5, r8, lsr #31
   15800:	adds	r1, r1, ip
   15804:	adc	r7, r7, r8
   15808:	ldr	r5, [sp, #240]	; 0xf0
   1580c:	ldr	r0, [sp, #140]	; 0x8c
   15810:	eor	r2, r2, r7
   15814:	ldr	r9, [sp, #144]	; 0x90
   15818:	adds	r0, r0, r2
   1581c:	eor	lr, r1, r5
   15820:	adc	r5, r9, lr
   15824:	eor	ip, ip, r0
   15828:	eor	r8, r8, r5
   1582c:	ldr	r9, [sp, #116]	; 0x74
   15830:	ldr	r4, [sp, #120]	; 0x78
   15834:	lsr	sl, ip, #24
   15838:	orr	sl, sl, r8, lsl #8
   1583c:	adds	r1, r9, r1
   15840:	lsr	r8, r8, #24
   15844:	adc	r7, r4, r7
   15848:	adds	r9, r1, sl
   1584c:	orr	r4, r8, ip, lsl #8
   15850:	adc	r7, r7, r4
   15854:	eor	r2, r2, r9
   15858:	eor	lr, lr, r7
   1585c:	str	r7, [sp, #196]	; 0xc4
   15860:	ldr	r1, [sp, #152]	; 0x98
   15864:	ldr	r7, [sp, #228]	; 0xe4
   15868:	str	r9, [sp, #180]	; 0xb4
   1586c:	lsr	r9, r2, #16
   15870:	eor	r1, r1, r7
   15874:	str	r4, [sp, #224]	; 0xe0
   15878:	ldr	r7, [sp, #232]	; 0xe8
   1587c:	orr	r4, r9, lr, lsl #16
   15880:	ldr	ip, [sp, #156]	; 0x9c
   15884:	lsr	lr, lr, #16
   15888:	orr	r2, lr, r2, lsl #16
   1588c:	adds	r0, r0, r4
   15890:	eor	ip, ip, r7
   15894:	str	r2, [sp, #232]	; 0xe8
   15898:	str	r4, [sp, #228]	; 0xe4
   1589c:	ldr	r4, [sp, #52]	; 0x34
   158a0:	ldr	lr, [sp, #176]	; 0xb0
   158a4:	adc	r5, r5, r2
   158a8:	ldr	r9, [sp, #200]	; 0xc8
   158ac:	ldr	r2, [sp, #56]	; 0x38
   158b0:	lsl	r7, r1, #1
   158b4:	orr	r7, r7, ip, lsr #31
   158b8:	adds	lr, r4, lr
   158bc:	lsl	ip, ip, #1
   158c0:	adc	r8, r2, r9
   158c4:	orr	ip, ip, r1, lsr #31
   158c8:	adds	lr, lr, r7
   158cc:	ldr	r1, [sp, #264]	; 0x108
   158d0:	adc	r9, r8, ip
   158d4:	eor	r8, r9, r1
   158d8:	ldr	r1, [sp, #236]	; 0xec
   158dc:	adds	fp, fp, r8
   158e0:	eor	r2, lr, r1
   158e4:	ldr	r1, [sp, #148]	; 0x94
   158e8:	eor	r7, r7, fp
   158ec:	adc	r4, r1, r2
   158f0:	ldr	r1, [sp, #92]	; 0x5c
   158f4:	eor	ip, ip, r4
   158f8:	str	fp, [sp, #140]	; 0x8c
   158fc:	adds	lr, r1, lr
   15900:	lsr	fp, r7, #24
   15904:	ldr	r1, [sp, #96]	; 0x60
   15908:	orr	fp, fp, ip, lsl #8
   1590c:	lsr	ip, ip, #24
   15910:	adc	r9, r1, r9
   15914:	adds	lr, lr, fp
   15918:	orr	r1, ip, r7, lsl #8
   1591c:	adc	r9, r9, r1
   15920:	str	r1, [sp, #152]	; 0x98
   15924:	ldr	r1, [sp, #164]	; 0xa4
   15928:	eor	r8, r8, lr
   1592c:	eor	r6, r6, r1
   15930:	ldr	r1, [sp, #168]	; 0xa8
   15934:	eor	r2, r2, r9
   15938:	eor	ip, r1, r3
   1593c:	str	lr, [sp, #200]	; 0xc8
   15940:	ldr	r3, [sp, #140]	; 0x8c
   15944:	lsr	lr, r8, #16
   15948:	orr	lr, lr, r2, lsl #16
   1594c:	adds	r1, r3, lr
   15950:	lsr	r2, r2, #16
   15954:	lsl	r3, r6, #1
   15958:	orr	r7, r2, r8, lsl #16
   1595c:	ldr	r2, [sp, #204]	; 0xcc
   15960:	lsl	r8, ip, #1
   15964:	orr	ip, r3, ip, lsr #31
   15968:	ldr	r3, [sp, #20]
   1596c:	adc	r4, r4, r7
   15970:	orr	r8, r8, r6, lsr #31
   15974:	adds	r2, r3, r2
   15978:	ldr	r6, [sp, #24]
   1597c:	ldr	r3, [sp, #208]	; 0xd0
   15980:	str	r1, [sp, #148]	; 0x94
   15984:	adc	r6, r6, r3
   15988:	adds	r2, r2, ip
   1598c:	adc	r6, r6, r8
   15990:	eor	r3, r6, r7
   15994:	adds	r7, r0, r3
   15998:	eor	lr, lr, r2
   1599c:	adc	r1, r5, lr
   159a0:	eor	ip, ip, r7
   159a4:	str	r1, [sp, #144]	; 0x90
   159a8:	eor	r8, r8, r1
   159ac:	ldr	r1, [sp, #76]	; 0x4c
   159b0:	eor	r0, r0, sl
   159b4:	adds	r2, r1, r2
   159b8:	lsr	r1, ip, #24
   159bc:	orr	r1, r1, r8, lsl #8
   159c0:	str	r1, [sp, #176]	; 0xb0
   159c4:	lsr	r8, r8, #24
   159c8:	orr	ip, r8, ip, lsl #8
   159cc:	ldr	r1, [sp, #4]
   159d0:	ldr	r8, [sp, #176]	; 0xb0
   159d4:	adc	r6, r1, r6
   159d8:	adds	r2, r2, r8
   159dc:	adc	r6, r6, ip
   159e0:	eor	r3, r3, r2
   159e4:	eor	lr, lr, r6
   159e8:	str	r2, [sp, #204]	; 0xcc
   159ec:	lsr	r2, r3, #16
   159f0:	orr	sl, r2, lr, lsl #16
   159f4:	lsr	lr, lr, #16
   159f8:	orr	r3, lr, r3, lsl #16
   159fc:	str	r6, [sp, #208]	; 0xd0
   15a00:	ldr	r6, [sp, #224]	; 0xe0
   15a04:	adds	r8, r7, sl
   15a08:	mov	r7, r3
   15a0c:	eor	r5, r5, r6
   15a10:	str	ip, [sp, #236]	; 0xec
   15a14:	str	sl, [sp, #240]	; 0xf0
   15a18:	str	r8, [sp, #140]	; 0x8c
   15a1c:	ldr	r6, [sp, #144]	; 0x90
   15a20:	str	r7, [sp, #264]	; 0x108
   15a24:	ldr	ip, [sp, #216]	; 0xd8
   15a28:	ldr	lr, [sp, #68]	; 0x44
   15a2c:	adc	r6, r6, r7
   15a30:	lsl	r3, r0, #1
   15a34:	adds	r2, lr, ip
   15a38:	ldr	r7, [sp, #72]	; 0x48
   15a3c:	ldr	ip, [sp, #220]	; 0xdc
   15a40:	lsl	sl, r5, #1
   15a44:	orr	r5, r3, r5, lsr #31
   15a48:	adc	ip, r7, ip
   15a4c:	orr	r0, sl, r0, lsr #31
   15a50:	adds	r2, r2, r5
   15a54:	ldr	r3, [sp, #260]	; 0x104
   15a58:	ldr	r1, [sp, #148]	; 0x94
   15a5c:	adc	ip, ip, r0
   15a60:	ldr	lr, [sp, #252]	; 0xfc
   15a64:	eor	r3, ip, r3
   15a68:	eor	lr, r2, lr
   15a6c:	str	r6, [sp, #144]	; 0x90
   15a70:	adds	r6, r1, r3
   15a74:	eor	r7, r6, r5
   15a78:	adc	r5, r4, lr
   15a7c:	eor	r0, r0, r5
   15a80:	ldr	sl, [sp, #44]	; 0x2c
   15a84:	lsr	r8, r7, #24
   15a88:	orr	r8, r8, r0, lsl #8
   15a8c:	adds	r2, sl, r2
   15a90:	mov	sl, r8
   15a94:	ldr	r8, [sp, #48]	; 0x30
   15a98:	lsr	r0, r0, #24
   15a9c:	orr	r0, r0, r7, lsl #8
   15aa0:	adc	ip, r8, ip
   15aa4:	adds	r8, r2, sl
   15aa8:	adc	ip, ip, r0
   15aac:	eor	r3, r3, r8
   15ab0:	eor	lr, lr, ip
   15ab4:	str	ip, [sp, #220]	; 0xdc
   15ab8:	lsr	ip, r3, #16
   15abc:	orr	ip, ip, lr, lsl #16
   15ac0:	str	sl, [sp, #252]	; 0xfc
   15ac4:	lsr	lr, lr, #16
   15ac8:	ldr	sl, [sp, #152]	; 0x98
   15acc:	adds	r6, r6, ip
   15ad0:	eor	fp, fp, r1
   15ad4:	orr	r3, lr, r3, lsl #16
   15ad8:	adc	r5, r5, r3
   15adc:	eor	r4, r4, sl
   15ae0:	ldr	lr, [sp, #8]
   15ae4:	ldr	r2, [sp, #180]	; 0xb4
   15ae8:	lsl	r1, fp, #1
   15aec:	str	r8, [sp, #216]	; 0xd8
   15af0:	str	r5, [sp, #148]	; 0x94
   15af4:	ldr	r8, [sp, #196]	; 0xc4
   15af8:	ldr	r5, [sp, #88]	; 0x58
   15afc:	adds	r2, lr, r2
   15b00:	str	r0, [sp, #260]	; 0x104
   15b04:	lsl	r0, r4, #1
   15b08:	orr	r4, r1, r4, lsr #31
   15b0c:	adc	r7, r5, r8
   15b10:	orr	r0, r0, fp, lsr #31
   15b14:	adds	r2, r2, r4
   15b18:	str	r6, [sp, #224]	; 0xe0
   15b1c:	ldr	r6, [sp, #256]	; 0x100
   15b20:	adc	r7, r7, r0
   15b24:	ldr	fp, [sp, #212]	; 0xd4
   15b28:	ldr	lr, [sp, #244]	; 0xf4
   15b2c:	eor	r1, r7, r6
   15b30:	ldr	r8, [sp, #160]	; 0xa0
   15b34:	adds	r6, fp, r1
   15b38:	eor	lr, r2, lr
   15b3c:	adc	r5, r8, lr
   15b40:	eor	r4, r4, r6
   15b44:	ldr	r8, [sp, #36]	; 0x24
   15b48:	eor	r0, r0, r5
   15b4c:	adds	r2, r8, r2
   15b50:	lsr	r8, r4, #24
   15b54:	orr	sl, r8, r0, lsl #8
   15b58:	mov	r8, sl
   15b5c:	lsr	r0, r0, #24
   15b60:	ldr	sl, [sp, #40]	; 0x28
   15b64:	orr	r0, r0, r4, lsl #8
   15b68:	adc	r7, sl, r7
   15b6c:	mov	sl, r0
   15b70:	adds	r0, r2, r8
   15b74:	eor	r1, r1, r0
   15b78:	str	r0, [sp, #180]	; 0xb4
   15b7c:	ldr	r0, [sp, #172]	; 0xac
   15b80:	adc	r7, r7, sl
   15b84:	eor	fp, fp, r0
   15b88:	eor	lr, lr, r7
   15b8c:	str	r8, [sp, #244]	; 0xf4
   15b90:	str	sl, [sp, #256]	; 0x100
   15b94:	str	r7, [sp, #196]	; 0xc4
   15b98:	ldr	r2, [sp, #160]	; 0xa0
   15b9c:	ldr	r0, [sp, #248]	; 0xf8
   15ba0:	lsr	r4, r1, #16
   15ba4:	eor	sl, r2, r0
   15ba8:	orr	r2, r4, lr, lsl #16
   15bac:	adds	r6, r6, r2
   15bb0:	lsr	lr, lr, #16
   15bb4:	str	r6, [sp, #152]	; 0x98
   15bb8:	orr	r1, lr, r1, lsl #16
   15bbc:	ldr	r6, [sp, #80]	; 0x50
   15bc0:	ldr	lr, [sp, #200]	; 0xc8
   15bc4:	str	r2, [sp, #172]	; 0xac
   15bc8:	lsl	r2, fp, #1
   15bcc:	lsl	r7, sl, #1
   15bd0:	orr	sl, r2, sl, lsr #31
   15bd4:	ldr	r2, [sp, #84]	; 0x54
   15bd8:	adc	r5, r5, r1
   15bdc:	adds	lr, r6, lr
   15be0:	adc	r8, r2, r9
   15be4:	orr	r7, r7, fp, lsr #31
   15be8:	adds	lr, lr, sl
   15bec:	ldr	r2, [sp, #232]	; 0xe8
   15bf0:	adc	r8, r8, r7
   15bf4:	ldr	r4, [sp, #228]	; 0xe4
   15bf8:	ldr	r0, [sp, #164]	; 0xa4
   15bfc:	eor	r2, r8, r2
   15c00:	ldr	r6, [sp, #168]	; 0xa8
   15c04:	adds	r0, r0, r2
   15c08:	eor	r9, lr, r4
   15c0c:	eor	sl, sl, r0
   15c10:	adc	r6, r6, r9
   15c14:	ldr	fp, [sp, #100]	; 0x64
   15c18:	eor	r7, r7, r6
   15c1c:	str	r5, [sp, #156]	; 0x9c
   15c20:	ldr	r4, [sp, #104]	; 0x68
   15c24:	lsr	r5, sl, #24
   15c28:	adds	lr, fp, lr
   15c2c:	orr	r5, r5, r7, lsl #8
   15c30:	lsr	r7, r7, #24
   15c34:	adc	r8, r4, r8
   15c38:	orr	r7, r7, sl, lsl #8
   15c3c:	adds	lr, lr, r5
   15c40:	adc	r4, r8, r7
   15c44:	eor	r2, r2, lr
   15c48:	eor	r9, r9, r4
   15c4c:	str	lr, [sp, #200]	; 0xc8
   15c50:	lsr	lr, r2, #16
   15c54:	orr	lr, lr, r9, lsl #16
   15c58:	lsr	r9, r9, #16
   15c5c:	adds	r0, r0, lr
   15c60:	orr	r2, r9, r2, lsl #16
   15c64:	adc	r6, r6, r2
   15c68:	eor	r5, r5, r0
   15c6c:	eor	r7, r7, r6
   15c70:	ldr	r9, [sp, #116]	; 0x74
   15c74:	str	lr, [sp, #228]	; 0xe4
   15c78:	ldr	lr, [sp, #204]	; 0xcc
   15c7c:	lsl	r8, r5, #1
   15c80:	adds	lr, r9, lr
   15c84:	str	r4, [sp, #212]	; 0xd4
   15c88:	lsl	r9, r7, #1
   15c8c:	ldr	r4, [sp, #208]	; 0xd0
   15c90:	orr	r7, r8, r7, lsr #31
   15c94:	ldr	r8, [sp, #120]	; 0x78
   15c98:	orr	r5, r9, r5, lsr #31
   15c9c:	adc	r8, r8, r4
   15ca0:	adds	lr, lr, r7
   15ca4:	adc	r8, r8, r5
   15ca8:	ldr	r4, [sp, #152]	; 0x98
   15cac:	eor	r3, r3, r8
   15cb0:	adds	r9, r4, r3
   15cb4:	ldr	r4, [sp, #156]	; 0x9c
   15cb8:	eor	ip, ip, lr
   15cbc:	adc	sl, r4, ip
   15cc0:	eor	r7, r7, r9
   15cc4:	eor	r5, r5, sl
   15cc8:	adds	lr, fp, lr
   15ccc:	lsr	fp, r7, #24
   15cd0:	orr	fp, fp, r5, lsl #8
   15cd4:	ldr	r4, [sp, #104]	; 0x68
   15cd8:	lsr	r5, r5, #24
   15cdc:	orr	r5, r5, r7, lsl #8
   15ce0:	mov	r7, r5
   15ce4:	adc	r8, r4, r8
   15ce8:	adds	r5, lr, fp
   15cec:	adc	r4, r8, r7
   15cf0:	eor	ip, ip, r4
   15cf4:	str	r7, [sp, #248]	; 0xf8
   15cf8:	str	r4, [sp, #208]	; 0xd0
   15cfc:	ldr	r7, [sp, #176]	; 0xb0
   15d00:	ldr	r4, [sp, #140]	; 0x8c
   15d04:	eor	r3, r3, r5
   15d08:	ldr	lr, [sp, #144]	; 0x90
   15d0c:	str	fp, [sp, #232]	; 0xe8
   15d10:	eor	fp, r4, r7
   15d14:	ldr	r7, [sp, #236]	; 0xec
   15d18:	str	r5, [sp, #204]	; 0xcc
   15d1c:	eor	r8, lr, r7
   15d20:	lsr	lr, r3, #16
   15d24:	orr	r7, lr, ip, lsl #16
   15d28:	lsr	ip, ip, #16
   15d2c:	adds	r9, r9, r7
   15d30:	orr	r3, ip, r3, lsl #16
   15d34:	str	r7, [sp, #236]	; 0xec
   15d38:	str	r9, [sp, #160]	; 0xa0
   15d3c:	adc	r9, sl, r3
   15d40:	str	r3, [sp, #268]	; 0x10c
   15d44:	str	r9, [sp, #164]	; 0xa4
   15d48:	ldr	r3, [sp, #216]	; 0xd8
   15d4c:	ldr	r9, [sp, #76]	; 0x4c
   15d50:	ldr	r5, [sp, #220]	; 0xdc
   15d54:	adds	lr, r9, r3
   15d58:	ldr	r7, [sp, #4]
   15d5c:	lsl	r3, fp, #1
   15d60:	orr	r3, r3, r8, lsr #31
   15d64:	lsl	r8, r8, #1
   15d68:	adc	ip, r7, r5
   15d6c:	orr	fp, r8, fp, lsr #31
   15d70:	adds	lr, lr, r3
   15d74:	adc	ip, ip, fp
   15d78:	ldr	r4, [sp, #172]	; 0xac
   15d7c:	eor	r1, r1, ip
   15d80:	adds	r0, r0, r1
   15d84:	eor	r4, r4, lr
   15d88:	adc	r9, r6, r4
   15d8c:	eor	r3, r3, r0
   15d90:	eor	fp, fp, r9
   15d94:	ldr	r7, [sp, #136]	; 0x88
   15d98:	ldr	r5, [sp, #124]	; 0x7c
   15d9c:	lsr	r6, r3, #24
   15da0:	adds	lr, r7, lr
   15da4:	orr	r6, r6, fp, lsl #8
   15da8:	lsr	fp, fp, #24
   15dac:	orr	r3, fp, r3, lsl #8
   15db0:	adc	ip, r5, ip
   15db4:	adds	r8, lr, r6
   15db8:	adc	ip, ip, r3
   15dbc:	ldr	fp, [sp, #224]	; 0xe0
   15dc0:	eor	r4, r4, ip
   15dc4:	str	ip, [sp, #220]	; 0xdc
   15dc8:	ldr	ip, [sp, #252]	; 0xfc
   15dcc:	eor	r1, r1, r8
   15dd0:	ldr	lr, [sp, #148]	; 0x94
   15dd4:	str	r8, [sp, #216]	; 0xd8
   15dd8:	eor	r8, fp, ip
   15ddc:	ldr	ip, [sp, #260]	; 0x104
   15de0:	ldr	r7, [sp, #112]	; 0x70
   15de4:	eor	r5, lr, ip
   15de8:	lsr	ip, r1, #16
   15dec:	orr	ip, ip, r4, lsl #16
   15df0:	lsr	r4, r4, #16
   15df4:	adds	r0, r0, ip
   15df8:	orr	r1, r4, r1, lsl #16
   15dfc:	str	r1, [sp, #252]	; 0xfc
   15e00:	adc	r1, r9, r1
   15e04:	str	r0, [sp, #168]	; 0xa8
   15e08:	str	r1, [sp, #172]	; 0xac
   15e0c:	ldr	r0, [sp, #108]	; 0x6c
   15e10:	ldr	r1, [sp, #180]	; 0xb4
   15e14:	ldr	r9, [sp, #196]	; 0xc4
   15e18:	str	ip, [sp, #224]	; 0xe0
   15e1c:	lsl	ip, r8, #1
   15e20:	adds	r1, r0, r1
   15e24:	orr	ip, ip, r5, lsr #31
   15e28:	lsl	r5, r5, #1
   15e2c:	adc	r7, r7, r9
   15e30:	orr	r8, r5, r8, lsr #31
   15e34:	adds	r1, r1, ip
   15e38:	adc	r7, r7, r8
   15e3c:	ldr	r4, [sp, #140]	; 0x8c
   15e40:	ldr	r9, [sp, #228]	; 0xe4
   15e44:	eor	r2, r2, r7
   15e48:	adds	r0, r4, r2
   15e4c:	ldr	r4, [sp, #144]	; 0x90
   15e50:	eor	lr, r1, r9
   15e54:	adc	r5, r4, lr
   15e58:	eor	ip, ip, r0
   15e5c:	eor	r8, r8, r5
   15e60:	ldr	r4, [sp, #28]
   15e64:	ldr	r9, [sp, #32]
   15e68:	lsr	sl, ip, #24
   15e6c:	orr	sl, sl, r8, lsl #8
   15e70:	adds	r1, r4, r1
   15e74:	lsr	r8, r8, #24
   15e78:	adc	r7, r9, r7
   15e7c:	adds	r1, r1, sl
   15e80:	orr	r9, r8, ip, lsl #8
   15e84:	adc	ip, r7, r9
   15e88:	eor	r2, r2, r1
   15e8c:	eor	lr, lr, ip
   15e90:	str	r9, [sp, #228]	; 0xe4
   15e94:	str	ip, [sp, #196]	; 0xc4
   15e98:	str	r1, [sp, #180]	; 0xb4
   15e9c:	ldr	r1, [sp, #152]	; 0x98
   15ea0:	ldr	ip, [sp, #244]	; 0xf4
   15ea4:	ldr	r8, [sp, #156]	; 0x9c
   15ea8:	eor	r1, r1, ip
   15eac:	ldr	ip, [sp, #256]	; 0x100
   15eb0:	lsr	r9, r2, #16
   15eb4:	eor	ip, r8, ip
   15eb8:	orr	r8, r9, lr, lsl #16
   15ebc:	adds	r0, r0, r8
   15ec0:	lsr	lr, lr, #16
   15ec4:	str	r0, [sp, #140]	; 0x8c
   15ec8:	orr	r0, lr, r2, lsl #16
   15ecc:	adc	r5, r5, r0
   15ed0:	ldr	r2, [sp, #200]	; 0xc8
   15ed4:	str	r0, [sp, #256]	; 0x100
   15ed8:	ldr	r0, [sp, #44]	; 0x2c
   15edc:	str	r8, [sp, #244]	; 0xf4
   15ee0:	adds	lr, r0, r2
   15ee4:	lsl	r7, r1, #1
   15ee8:	ldr	r2, [sp, #48]	; 0x30
   15eec:	ldr	r8, [sp, #212]	; 0xd4
   15ef0:	orr	r7, r7, ip, lsr #31
   15ef4:	lsl	ip, ip, #1
   15ef8:	adc	r8, r2, r8
   15efc:	ldr	r0, [sp, #240]	; 0xf0
   15f00:	adds	lr, lr, r7
   15f04:	orr	ip, ip, r1, lsr #31
   15f08:	ldr	r2, [sp, #264]	; 0x108
   15f0c:	adc	r9, r8, ip
   15f10:	eor	r8, r9, r2
   15f14:	eor	r2, lr, r0
   15f18:	ldr	r0, [sp, #148]	; 0x94
   15f1c:	adds	r1, fp, r8
   15f20:	adc	r4, r0, r2
   15f24:	ldr	r0, [sp, #8]
   15f28:	eor	r7, r7, r1
   15f2c:	eor	ip, ip, r4
   15f30:	adds	lr, r0, lr
   15f34:	ldr	r0, [sp, #88]	; 0x58
   15f38:	lsr	fp, r7, #24
   15f3c:	orr	fp, fp, ip, lsl #8
   15f40:	adc	r9, r0, r9
   15f44:	lsr	ip, ip, #24
   15f48:	ldr	r0, [sp, #168]	; 0xa8
   15f4c:	adds	lr, lr, fp
   15f50:	orr	r7, ip, r7, lsl #8
   15f54:	adc	r9, r9, r7
   15f58:	eor	r6, r6, r0
   15f5c:	eor	r8, r8, lr
   15f60:	ldr	r0, [sp, #172]	; 0xac
   15f64:	eor	r2, r2, r9
   15f68:	eor	ip, r0, r3
   15f6c:	str	lr, [sp, #200]	; 0xc8
   15f70:	lsr	lr, r8, #16
   15f74:	orr	lr, lr, r2, lsl #16
   15f78:	lsl	r3, r6, #1
   15f7c:	lsr	r2, r2, #16
   15f80:	ldr	r0, [sp, #60]	; 0x3c
   15f84:	str	r7, [sp, #148]	; 0x94
   15f88:	orr	r7, r2, r8, lsl #16
   15f8c:	lsl	r8, ip, #1
   15f90:	orr	ip, r3, ip, lsr #31
   15f94:	ldr	r3, [sp, #204]	; 0xcc
   15f98:	adds	r1, r1, lr
   15f9c:	adc	r4, r4, r7
   15fa0:	orr	r8, r8, r6, lsr #31
   15fa4:	adds	r2, r0, r3
   15fa8:	ldr	r6, [sp, #208]	; 0xd0
   15fac:	ldr	r3, [sp, #64]	; 0x40
   15fb0:	ldr	r0, [sp, #140]	; 0x8c
   15fb4:	adc	r6, r3, r6
   15fb8:	adds	r2, r2, ip
   15fbc:	adc	r6, r6, r8
   15fc0:	eor	r3, r6, r7
   15fc4:	adds	r7, r0, r3
   15fc8:	eor	lr, lr, r2
   15fcc:	adc	r0, r5, lr
   15fd0:	eor	ip, ip, r7
   15fd4:	eor	r8, r8, r0
   15fd8:	str	r0, [sp, #144]	; 0x90
   15fdc:	ldr	r0, [sp, #20]
   15fe0:	eor	fp, fp, r1
   15fe4:	adds	r2, r0, r2
   15fe8:	lsr	r0, ip, #24
   15fec:	orr	r0, r0, r8, lsl #8
   15ff0:	str	r0, [sp, #176]	; 0xb0
   15ff4:	lsr	r8, r8, #24
   15ff8:	orr	ip, r8, ip, lsl #8
   15ffc:	ldr	r0, [sp, #24]
   16000:	ldr	r8, [sp, #176]	; 0xb0
   16004:	adc	r6, r0, r6
   16008:	adds	r2, r2, r8
   1600c:	adc	r6, r6, ip
   16010:	str	r2, [sp, #204]	; 0xcc
   16014:	str	ip, [sp, #240]	; 0xf0
   16018:	str	r6, [sp, #208]	; 0xd0
   1601c:	ldr	r0, [sp, #140]	; 0x8c
   16020:	eor	r3, r3, r2
   16024:	eor	lr, lr, r6
   16028:	eor	r0, r0, sl
   1602c:	ldr	sl, [sp, #228]	; 0xe4
   16030:	lsr	r2, r3, #16
   16034:	eor	r5, r5, sl
   16038:	orr	sl, r2, lr, lsl #16
   1603c:	str	sl, [sp, #228]	; 0xe4
   16040:	lsr	lr, lr, #16
   16044:	adds	sl, r7, sl
   16048:	orr	r3, lr, r3, lsl #16
   1604c:	str	sl, [sp, #140]	; 0x8c
   16050:	ldr	sl, [sp, #144]	; 0x90
   16054:	mov	r6, r3
   16058:	ldr	ip, [sp, #12]
   1605c:	ldr	r2, [sp, #216]	; 0xd8
   16060:	adc	sl, sl, r6
   16064:	lsl	r3, r0, #1
   16068:	adds	r2, ip, r2
   1606c:	str	sl, [sp, #144]	; 0x90
   16070:	ldr	ip, [sp, #220]	; 0xdc
   16074:	lsl	sl, r5, #1
   16078:	orr	r5, r3, r5, lsr #31
   1607c:	ldr	r3, [sp, #16]
   16080:	orr	r0, sl, r0, lsr #31
   16084:	adc	ip, r3, ip
   16088:	adds	r2, r2, r5
   1608c:	ldr	r3, [sp, #268]	; 0x10c
   16090:	adc	ip, ip, r0
   16094:	ldr	lr, [sp, #236]	; 0xec
   16098:	eor	r3, ip, r3
   1609c:	eor	lr, r2, lr
   160a0:	str	r6, [sp, #260]	; 0x104
   160a4:	adds	r6, r1, r3
   160a8:	eor	r7, r6, r5
   160ac:	adc	r5, r4, lr
   160b0:	eor	r0, r0, r5
   160b4:	ldr	sl, [sp, #52]	; 0x34
   160b8:	lsr	r8, r7, #24
   160bc:	orr	r8, r8, r0, lsl #8
   160c0:	adds	r2, sl, r2
   160c4:	lsr	r0, r0, #24
   160c8:	mov	sl, r8
   160cc:	ldr	r8, [sp, #56]	; 0x38
   160d0:	orr	r7, r0, r7, lsl #8
   160d4:	adc	ip, r8, ip
   160d8:	mov	r8, r7
   160dc:	adds	r7, r2, sl
   160e0:	adc	r2, ip, r8
   160e4:	eor	r3, r3, r7
   160e8:	eor	lr, lr, r2
   160ec:	str	r2, [sp, #216]	; 0xd8
   160f0:	lsr	ip, r3, #16
   160f4:	ldr	r2, [sp, #148]	; 0x94
   160f8:	orr	ip, ip, lr, lsl #16
   160fc:	adds	r1, r6, ip
   16100:	eor	r4, r4, r2
   16104:	ldr	r6, [sp, #80]	; 0x50
   16108:	lsr	lr, lr, #16
   1610c:	str	r1, [sp, #148]	; 0x94
   16110:	ldr	r2, [sp, #180]	; 0xb4
   16114:	lsl	r1, fp, #1
   16118:	orr	r3, lr, r3, lsl #16
   1611c:	lsl	r0, r4, #1
   16120:	ldr	lr, [sp, #196]	; 0xc4
   16124:	orr	r4, r1, r4, lsr #31
   16128:	ldr	r1, [sp, #84]	; 0x54
   1612c:	adc	r5, r5, r3
   16130:	adds	r2, r6, r2
   16134:	orr	r0, r0, fp, lsr #31
   16138:	ldr	r6, [sp, #252]	; 0xfc
   1613c:	str	r7, [sp, #212]	; 0xd4
   16140:	adc	r7, r1, lr
   16144:	adds	r2, r2, r4
   16148:	adc	r7, r7, r0
   1614c:	eor	r1, r7, r6
   16150:	ldr	lr, [sp, #224]	; 0xe0
   16154:	ldr	r6, [sp, #160]	; 0xa0
   16158:	str	sl, [sp, #236]	; 0xec
   1615c:	ldr	sl, [sp, #164]	; 0xa4
   16160:	adds	r6, r6, r1
   16164:	eor	lr, r2, lr
   16168:	eor	r4, r4, r6
   1616c:	str	r5, [sp, #152]	; 0x98
   16170:	adc	r5, sl, lr
   16174:	eor	r0, r0, r5
   16178:	str	r8, [sp, #264]	; 0x108
   1617c:	lsr	r8, r4, #24
   16180:	ldr	sl, [sp, #68]	; 0x44
   16184:	orr	fp, r8, r0, lsl #8
   16188:	mov	r8, fp
   1618c:	lsr	r0, r0, #24
   16190:	ldr	fp, [sp, #72]	; 0x48
   16194:	adds	r2, sl, r2
   16198:	orr	r4, r0, r4, lsl #8
   1619c:	adc	r7, fp, r7
   161a0:	mov	fp, r4
   161a4:	adds	r4, r2, r8
   161a8:	str	r8, [sp, #252]	; 0xfc
   161ac:	eor	r1, r1, r4
   161b0:	ldr	r2, [sp, #232]	; 0xe8
   161b4:	str	r4, [sp, #196]	; 0xc4
   161b8:	str	fp, [sp, #268]	; 0x10c
   161bc:	ldr	r4, [sp, #160]	; 0xa0
   161c0:	adc	fp, r7, fp
   161c4:	eor	lr, lr, fp
   161c8:	str	fp, [sp, #220]	; 0xdc
   161cc:	eor	fp, r4, r2
   161d0:	lsr	r4, r1, #16
   161d4:	ldr	r2, [sp, #248]	; 0xf8
   161d8:	orr	r4, r4, lr, lsl #16
   161dc:	ldr	sl, [sp, #164]	; 0xa4
   161e0:	lsr	lr, lr, #16
   161e4:	adds	r6, r6, r4
   161e8:	orr	r1, lr, r1, lsl #16
   161ec:	adc	lr, r5, r1
   161f0:	eor	sl, sl, r2
   161f4:	str	lr, [sp, #160]	; 0xa0
   161f8:	lsl	r2, fp, #1
   161fc:	ldr	r8, [sp, #36]	; 0x24
   16200:	ldr	lr, [sp, #200]	; 0xc8
   16204:	lsl	r7, sl, #1
   16208:	orr	sl, r2, sl, lsr #31
   1620c:	ldr	r2, [sp, #40]	; 0x28
   16210:	adds	lr, r8, lr
   16214:	adc	r8, r2, r9
   16218:	orr	r7, r7, fp, lsr #31
   1621c:	adds	lr, lr, sl
   16220:	ldr	r2, [sp, #256]	; 0x100
   16224:	adc	r8, r8, r7
   16228:	str	r6, [sp, #156]	; 0x9c
   1622c:	ldr	r6, [sp, #168]	; 0xa8
   16230:	eor	r2, r8, r2
   16234:	ldr	r5, [sp, #244]	; 0xf4
   16238:	adds	r0, r6, r2
   1623c:	ldr	r6, [sp, #172]	; 0xac
   16240:	eor	r9, lr, r5
   16244:	eor	sl, sl, r0
   16248:	adc	r6, r6, r9
   1624c:	ldr	fp, [sp, #92]	; 0x5c
   16250:	eor	r7, r7, r6
   16254:	adds	lr, fp, lr
   16258:	lsr	r5, sl, #24
   1625c:	ldr	fp, [sp, #96]	; 0x60
   16260:	orr	r5, r5, r7, lsl #8
   16264:	lsr	r7, r7, #24
   16268:	adc	r8, fp, r8
   1626c:	orr	r7, r7, sl, lsl #8
   16270:	adds	lr, lr, r5
   16274:	adc	r8, r8, r7
   16278:	eor	r2, r2, lr
   1627c:	eor	r9, r9, r8
   16280:	str	lr, [sp, #200]	; 0xc8
   16284:	lsr	lr, r2, #16
   16288:	orr	lr, lr, r9, lsl #16
   1628c:	lsr	r9, r9, #16
   16290:	adds	r0, r0, lr
   16294:	orr	r2, r9, r2, lsl #16
   16298:	adc	r6, r6, r2
   1629c:	eor	r5, r5, r0
   162a0:	ldr	r9, [sp, #204]	; 0xcc
   162a4:	eor	r7, r7, r6
   162a8:	str	lr, [sp, #232]	; 0xe8
   162ac:	ldr	lr, [sp, #68]	; 0x44
   162b0:	ldr	fp, [sp, #72]	; 0x48
   162b4:	ldr	sl, [sp, #208]	; 0xd0
   162b8:	str	r8, [sp, #224]	; 0xe0
   162bc:	lsl	r8, r5, #1
   162c0:	adds	lr, lr, r9
   162c4:	lsl	r9, r7, #1
   162c8:	orr	r7, r8, r7, lsr #31
   162cc:	orr	r5, r9, r5, lsr #31
   162d0:	adc	r8, fp, sl
   162d4:	adds	lr, lr, r7
   162d8:	adc	r8, r8, r5
   162dc:	ldr	r9, [sp, #156]	; 0x9c
   162e0:	eor	r3, r3, r8
   162e4:	ldr	sl, [sp, #160]	; 0xa0
   162e8:	adds	r9, r9, r3
   162ec:	eor	ip, ip, lr
   162f0:	adc	sl, sl, ip
   162f4:	eor	r7, r7, r9
   162f8:	ldr	fp, [sp, #12]
   162fc:	eor	r5, r5, sl
   16300:	adds	lr, fp, lr
   16304:	lsr	fp, r7, #24
   16308:	orr	fp, fp, r5, lsl #8
   1630c:	lsr	r5, r5, #24
   16310:	str	fp, [sp, #180]	; 0xb4
   16314:	orr	r5, r5, r7, lsl #8
   16318:	mov	r7, r5
   1631c:	ldr	fp, [sp, #16]
   16320:	ldr	r5, [sp, #180]	; 0xb4
   16324:	adc	r8, fp, r8
   16328:	adds	r5, lr, r5
   1632c:	adc	lr, r8, r7
   16330:	eor	r3, r3, r5
   16334:	eor	ip, ip, lr
   16338:	str	r5, [sp, #204]	; 0xcc
   1633c:	str	r7, [sp, #244]	; 0xf4
   16340:	ldr	r5, [sp, #176]	; 0xb0
   16344:	str	lr, [sp, #208]	; 0xd0
   16348:	ldr	lr, [sp, #140]	; 0x8c
   1634c:	ldr	r7, [sp, #144]	; 0x90
   16350:	eor	fp, lr, r5
   16354:	ldr	r5, [sp, #240]	; 0xf0
   16358:	lsr	lr, r3, #16
   1635c:	eor	r8, r7, r5
   16360:	orr	r5, lr, ip, lsl #16
   16364:	lsr	ip, ip, #16
   16368:	adds	r9, r9, r5
   1636c:	orr	r3, ip, r3, lsl #16
   16370:	adc	ip, sl, r3
   16374:	str	r3, [sp, #248]	; 0xf8
   16378:	str	ip, [sp, #164]	; 0xa4
   1637c:	ldr	r3, [sp, #136]	; 0x88
   16380:	ldr	ip, [sp, #212]	; 0xd4
   16384:	str	r5, [sp, #240]	; 0xf0
   16388:	adds	lr, r3, ip
   1638c:	ldr	r5, [sp, #216]	; 0xd8
   16390:	lsl	r3, fp, #1
   16394:	ldr	ip, [sp, #124]	; 0x7c
   16398:	orr	r3, r3, r8, lsr #31
   1639c:	lsl	r8, r8, #1
   163a0:	adc	ip, ip, r5
   163a4:	orr	fp, r8, fp, lsr #31
   163a8:	adds	lr, lr, r3
   163ac:	adc	ip, ip, fp
   163b0:	eor	r1, r1, ip
   163b4:	adds	r0, r0, r1
   163b8:	eor	r4, r4, lr
   163bc:	eor	r3, r3, r0
   163c0:	str	r9, [sp, #176]	; 0xb0
   163c4:	adc	r9, r6, r4
   163c8:	eor	fp, fp, r9
   163cc:	ldr	r5, [sp, #8]
   163d0:	ldr	r7, [sp, #88]	; 0x58
   163d4:	lsr	r6, r3, #24
   163d8:	adds	lr, r5, lr
   163dc:	orr	r6, r6, fp, lsl #8
   163e0:	lsr	fp, fp, #24
   163e4:	orr	r3, fp, r3, lsl #8
   163e8:	adc	ip, r7, ip
   163ec:	adds	r7, lr, r6
   163f0:	adc	ip, ip, r3
   163f4:	eor	r4, r4, ip
   163f8:	ldr	lr, [sp, #148]	; 0x94
   163fc:	str	ip, [sp, #216]	; 0xd8
   16400:	ldr	ip, [sp, #236]	; 0xec
   16404:	eor	r1, r1, r7
   16408:	eor	r8, lr, ip
   1640c:	ldr	r5, [sp, #152]	; 0x98
   16410:	ldr	ip, [sp, #264]	; 0x108
   16414:	str	r7, [sp, #212]	; 0xd4
   16418:	eor	r5, r5, ip
   1641c:	lsr	ip, r1, #16
   16420:	orr	ip, ip, r4, lsl #16
   16424:	adds	r0, r0, ip
   16428:	ldr	r7, [sp, #196]	; 0xc4
   1642c:	lsr	r4, r4, #16
   16430:	str	ip, [sp, #236]	; 0xec
   16434:	ldr	ip, [sp, #100]	; 0x64
   16438:	orr	r1, r4, r1, lsl #16
   1643c:	str	r0, [sp, #168]	; 0xa8
   16440:	str	r1, [sp, #256]	; 0x100
   16444:	adc	r0, r9, r1
   16448:	ldr	r4, [sp, #104]	; 0x68
   1644c:	adds	r1, ip, r7
   16450:	lsl	ip, r8, #1
   16454:	ldr	r7, [sp, #220]	; 0xdc
   16458:	orr	ip, ip, r5, lsr #31
   1645c:	lsl	r5, r5, #1
   16460:	adc	r7, r4, r7
   16464:	orr	r8, r5, r8, lsr #31
   16468:	adds	r1, r1, ip
   1646c:	adc	r7, r7, r8
   16470:	ldr	lr, [sp, #140]	; 0x8c
   16474:	ldr	r9, [sp, #232]	; 0xe8
   16478:	eor	r2, r2, r7
   1647c:	ldr	r5, [sp, #144]	; 0x90
   16480:	str	r0, [sp, #172]	; 0xac
   16484:	adds	r0, lr, r2
   16488:	eor	lr, r1, r9
   1648c:	eor	ip, ip, r0
   16490:	adc	r5, r5, lr
   16494:	ldr	r4, [sp, #44]	; 0x2c
   16498:	eor	r8, r8, r5
   1649c:	ldr	r9, [sp, #48]	; 0x30
   164a0:	lsr	sl, ip, #24
   164a4:	adds	r1, r4, r1
   164a8:	orr	sl, sl, r8, lsl #8
   164ac:	lsr	r8, r8, #24
   164b0:	orr	r4, r8, ip, lsl #8
   164b4:	adc	r7, r9, r7
   164b8:	adds	r9, r1, sl
   164bc:	adc	ip, r7, r4
   164c0:	eor	lr, lr, ip
   164c4:	ldr	r7, [sp, #156]	; 0x9c
   164c8:	str	ip, [sp, #220]	; 0xdc
   164cc:	ldr	ip, [sp, #252]	; 0xfc
   164d0:	eor	r2, r2, r9
   164d4:	eor	r1, r7, ip
   164d8:	ldr	r7, [sp, #160]	; 0xa0
   164dc:	ldr	ip, [sp, #268]	; 0x10c
   164e0:	str	r9, [sp, #196]	; 0xc4
   164e4:	lsr	r9, r2, #16
   164e8:	eor	ip, r7, ip
   164ec:	orr	r7, r9, lr, lsl #16
   164f0:	lsr	lr, lr, #16
   164f4:	adds	r0, r0, r7
   164f8:	orr	r2, lr, r2, lsl #16
   164fc:	ldr	fp, [sp, #20]
   16500:	ldr	lr, [sp, #200]	; 0xc8
   16504:	adc	r5, r5, r2
   16508:	str	r7, [sp, #252]	; 0xfc
   1650c:	str	r2, [sp, #264]	; 0x108
   16510:	lsl	r7, r1, #1
   16514:	ldr	r2, [sp, #24]
   16518:	ldr	r8, [sp, #224]	; 0xe0
   1651c:	orr	r7, r7, ip, lsr #31
   16520:	adds	lr, fp, lr
   16524:	lsl	ip, ip, #1
   16528:	adc	r8, r2, r8
   1652c:	orr	ip, ip, r1, lsr #31
   16530:	adds	lr, lr, r7
   16534:	ldr	r2, [sp, #260]	; 0x104
   16538:	ldr	r1, [sp, #228]	; 0xe4
   1653c:	adc	r9, r8, ip
   16540:	eor	r8, r9, r2
   16544:	eor	r2, lr, r1
   16548:	ldr	r1, [sp, #148]	; 0x94
   1654c:	str	r4, [sp, #232]	; 0xe8
   16550:	ldr	r4, [sp, #152]	; 0x98
   16554:	adds	r1, r1, r8
   16558:	adc	r4, r4, r2
   1655c:	eor	r7, r7, r1
   16560:	str	sl, [sp, #140]	; 0x8c
   16564:	ldr	sl, [sp, #80]	; 0x50
   16568:	eor	ip, ip, r4
   1656c:	adds	lr, sl, lr
   16570:	lsr	fp, r7, #24
   16574:	ldr	sl, [sp, #84]	; 0x54
   16578:	orr	fp, fp, ip, lsl #8
   1657c:	lsr	ip, ip, #24
   16580:	adc	r9, sl, r9
   16584:	adds	lr, lr, fp
   16588:	orr	sl, ip, r7, lsl #8
   1658c:	ldr	r7, [sp, #168]	; 0xa8
   16590:	adc	r9, r9, sl
   16594:	eor	r8, r8, lr
   16598:	str	sl, [sp, #148]	; 0x94
   1659c:	ldr	sl, [sp, #172]	; 0xac
   165a0:	eor	r6, r6, r7
   165a4:	eor	r2, r2, r9
   165a8:	eor	ip, sl, r3
   165ac:	str	lr, [sp, #200]	; 0xc8
   165b0:	lsr	lr, r8, #16
   165b4:	orr	lr, lr, r2, lsl #16
   165b8:	lsl	r3, r6, #1
   165bc:	lsr	r2, r2, #16
   165c0:	orr	r7, r2, r8, lsl #16
   165c4:	lsl	r8, ip, #1
   165c8:	ldr	r2, [sp, #204]	; 0xcc
   165cc:	orr	ip, r3, ip, lsr #31
   165d0:	ldr	r3, [sp, #108]	; 0x6c
   165d4:	adds	r1, r1, lr
   165d8:	adc	r4, r4, r7
   165dc:	orr	r8, r8, r6, lsr #31
   165e0:	adds	r2, r3, r2
   165e4:	ldr	r6, [sp, #112]	; 0x70
   165e8:	ldr	r3, [sp, #208]	; 0xd0
   165ec:	eor	fp, fp, r1
   165f0:	adc	r6, r6, r3
   165f4:	adds	r2, r2, ip
   165f8:	adc	r6, r6, r8
   165fc:	eor	r3, r6, r7
   16600:	adds	r7, r0, r3
   16604:	eor	lr, lr, r2
   16608:	adc	sl, r5, lr
   1660c:	eor	ip, ip, r7
   16610:	eor	r8, r8, sl
   16614:	str	sl, [sp, #144]	; 0x90
   16618:	ldr	sl, [sp, #36]	; 0x24
   1661c:	adds	r2, sl, r2
   16620:	lsr	sl, ip, #24
   16624:	orr	sl, sl, r8, lsl #8
   16628:	lsr	r8, r8, #24
   1662c:	orr	r8, r8, ip, lsl #8
   16630:	str	sl, [sp, #160]	; 0xa0
   16634:	mov	ip, r8
   16638:	ldr	sl, [sp, #40]	; 0x28
   1663c:	ldr	r8, [sp, #160]	; 0xa0
   16640:	adc	r6, sl, r6
   16644:	adds	r8, r2, r8
   16648:	adc	r6, r6, ip
   1664c:	eor	r3, r3, r8
   16650:	eor	lr, lr, r6
   16654:	ldr	sl, [sp, #140]	; 0x8c
   16658:	str	r6, [sp, #208]	; 0xd0
   1665c:	lsr	r2, r3, #16
   16660:	ldr	r6, [sp, #232]	; 0xe8
   16664:	orr	r2, r2, lr, lsl #16
   16668:	lsr	lr, lr, #16
   1666c:	eor	r0, r0, sl
   16670:	eor	r5, r5, r6
   16674:	orr	r3, lr, r3, lsl #16
   16678:	adds	r6, r7, r2
   1667c:	ldr	lr, [sp, #212]	; 0xd4
   16680:	str	r8, [sp, #204]	; 0xcc
   16684:	str	ip, [sp, #228]	; 0xe4
   16688:	ldr	r8, [sp, #144]	; 0x90
   1668c:	ldr	ip, [sp, #116]	; 0x74
   16690:	str	r6, [sp, #140]	; 0x8c
   16694:	mov	r6, r3
   16698:	adc	r8, r8, r6
   1669c:	lsl	r3, r0, #1
   166a0:	str	r2, [sp, #232]	; 0xe8
   166a4:	adds	r2, ip, lr
   166a8:	ldr	lr, [sp, #216]	; 0xd8
   166ac:	ldr	ip, [sp, #120]	; 0x78
   166b0:	lsl	sl, r5, #1
   166b4:	orr	r5, r3, r5, lsr #31
   166b8:	adc	ip, ip, lr
   166bc:	orr	r0, sl, r0, lsr #31
   166c0:	adds	r2, r2, r5
   166c4:	str	r6, [sp, #260]	; 0x104
   166c8:	ldr	r6, [sp, #248]	; 0xf8
   166cc:	adc	ip, ip, r0
   166d0:	ldr	lr, [sp, #240]	; 0xf0
   166d4:	eor	r3, ip, r6
   166d8:	adds	r6, r1, r3
   166dc:	eor	lr, r2, lr
   166e0:	eor	r7, r6, r5
   166e4:	str	r8, [sp, #144]	; 0x90
   166e8:	adc	r5, r4, lr
   166ec:	ldr	r8, [sp, #76]	; 0x4c
   166f0:	eor	r0, r0, r5
   166f4:	adds	r2, r8, r2
   166f8:	lsr	r8, r7, #24
   166fc:	orr	sl, r8, r0, lsl #8
   16700:	ldr	r8, [sp, #4]
   16704:	lsr	r0, r0, #24
   16708:	orr	r0, r0, r7, lsl #8
   1670c:	adc	ip, r8, ip
   16710:	mov	r7, r0
   16714:	adds	r0, r2, sl
   16718:	eor	r3, r3, r0
   1671c:	str	r7, [sp, #248]	; 0xf8
   16720:	adc	r7, ip, r7
   16724:	eor	lr, lr, r7
   16728:	lsr	ip, r3, #16
   1672c:	orr	ip, ip, lr, lsl #16
   16730:	str	r0, [sp, #212]	; 0xd4
   16734:	lsr	lr, lr, #16
   16738:	ldr	r0, [sp, #148]	; 0x94
   1673c:	adds	r1, r6, ip
   16740:	orr	r3, lr, r3, lsl #16
   16744:	ldr	r6, [sp, #196]	; 0xc4
   16748:	ldr	lr, [sp, #28]
   1674c:	adc	r5, r5, r3
   16750:	eor	r4, r4, r0
   16754:	adds	r2, lr, r6
   16758:	str	r1, [sp, #224]	; 0xe0
   1675c:	ldr	r6, [sp, #220]	; 0xdc
   16760:	lsl	r1, fp, #1
   16764:	str	r5, [sp, #148]	; 0x94
   16768:	ldr	r5, [sp, #32]
   1676c:	lsl	r0, r4, #1
   16770:	orr	r4, r1, r4, lsr #31
   16774:	orr	r0, r0, fp, lsr #31
   16778:	str	r7, [sp, #216]	; 0xd8
   1677c:	ldr	r1, [sp, #256]	; 0x100
   16780:	adc	r7, r5, r6
   16784:	adds	r2, r2, r4
   16788:	adc	r7, r7, r0
   1678c:	str	sl, [sp, #240]	; 0xf0
   16790:	ldr	sl, [sp, #176]	; 0xb0
   16794:	ldr	lr, [sp, #236]	; 0xec
   16798:	eor	r1, r7, r1
   1679c:	ldr	r5, [sp, #164]	; 0xa4
   167a0:	adds	r6, sl, r1
   167a4:	eor	lr, r2, lr
   167a8:	adc	r5, r5, lr
   167ac:	eor	r4, r4, r6
   167b0:	ldr	r8, [sp, #52]	; 0x34
   167b4:	eor	r0, r0, r5
   167b8:	adds	r2, r8, r2
   167bc:	lsr	r8, r4, #24
   167c0:	orr	fp, r8, r0, lsl #8
   167c4:	ldr	r8, [sp, #56]	; 0x38
   167c8:	lsr	r0, r0, #24
   167cc:	orr	r4, r0, r4, lsl #8
   167d0:	adc	r7, r8, r7
   167d4:	mov	r0, r4
   167d8:	adds	r4, r2, fp
   167dc:	eor	r1, r1, r4
   167e0:	ldr	r2, [sp, #180]	; 0xb4
   167e4:	str	r4, [sp, #176]	; 0xb0
   167e8:	adc	r4, r7, r0
   167ec:	eor	lr, lr, r4
   167f0:	str	fp, [sp, #236]	; 0xec
   167f4:	str	r0, [sp, #256]	; 0x100
   167f8:	eor	fp, sl, r2
   167fc:	ldr	r0, [sp, #164]	; 0xa4
   16800:	ldr	r2, [sp, #244]	; 0xf4
   16804:	str	r4, [sp, #196]	; 0xc4
   16808:	lsr	r4, r1, #16
   1680c:	orr	r4, r4, lr, lsl #16
   16810:	adds	r6, r6, r4
   16814:	eor	sl, r0, r2
   16818:	lsr	lr, lr, #16
   1681c:	str	r6, [sp, #152]	; 0x98
   16820:	orr	r1, lr, r1, lsl #16
   16824:	lsl	r2, fp, #1
   16828:	ldr	r6, [sp, #92]	; 0x5c
   1682c:	ldr	lr, [sp, #200]	; 0xc8
   16830:	lsl	r7, sl, #1
   16834:	orr	sl, r2, sl, lsr #31
   16838:	ldr	r2, [sp, #96]	; 0x60
   1683c:	adc	r5, r5, r1
   16840:	adds	lr, r6, lr
   16844:	adc	r8, r2, r9
   16848:	orr	r7, r7, fp, lsr #31
   1684c:	adds	lr, lr, sl
   16850:	ldr	r2, [sp, #264]	; 0x108
   16854:	adc	r8, r8, r7
   16858:	ldr	r9, [sp, #168]	; 0xa8
   1685c:	eor	r2, r8, r2
   16860:	adds	r0, r9, r2
   16864:	ldr	r9, [sp, #252]	; 0xfc
   16868:	str	r5, [sp, #156]	; 0x9c
   1686c:	ldr	r5, [sp, #172]	; 0xac
   16870:	eor	r9, lr, r9
   16874:	adc	r6, r5, r9
   16878:	eor	sl, sl, r0
   1687c:	ldr	fp, [sp, #60]	; 0x3c
   16880:	eor	r7, r7, r6
   16884:	adds	lr, fp, lr
   16888:	lsr	r5, sl, #24
   1688c:	ldr	fp, [sp, #64]	; 0x40
   16890:	orr	r5, r5, r7, lsl #8
   16894:	lsr	r7, r7, #24
   16898:	adc	r8, fp, r8
   1689c:	orr	r7, r7, sl, lsl #8
   168a0:	adds	lr, lr, r5
   168a4:	eor	r2, r2, lr
   168a8:	str	lr, [sp, #172]	; 0xac
   168ac:	adc	lr, r8, r7
   168b0:	eor	r9, r9, lr
   168b4:	str	lr, [sp, #180]	; 0xb4
   168b8:	lsr	lr, r2, #16
   168bc:	orr	sl, lr, r9, lsl #16
   168c0:	lsr	r9, r9, #16
   168c4:	adds	r0, r0, sl
   168c8:	orr	r2, r9, r2, lsl #16
   168cc:	adc	r6, r6, r2
   168d0:	eor	r5, r5, r0
   168d4:	eor	r7, r7, r6
   168d8:	ldr	r9, [sp, #92]	; 0x5c
   168dc:	ldr	lr, [sp, #204]	; 0xcc
   168e0:	lsl	r8, r5, #1
   168e4:	adds	lr, r9, lr
   168e8:	str	sl, [sp, #244]	; 0xf4
   168ec:	lsl	r9, r7, #1
   168f0:	ldr	sl, [sp, #96]	; 0x60
   168f4:	orr	r7, r8, r7, lsr #31
   168f8:	ldr	r8, [sp, #208]	; 0xd0
   168fc:	orr	r5, r9, r5, lsr #31
   16900:	adc	r8, sl, r8
   16904:	adds	lr, lr, r7
   16908:	adc	r8, r8, r5
   1690c:	ldr	r9, [sp, #152]	; 0x98
   16910:	eor	r3, r3, r8
   16914:	ldr	sl, [sp, #156]	; 0x9c
   16918:	adds	r9, r9, r3
   1691c:	eor	ip, ip, lr
   16920:	ldr	fp, [sp, #36]	; 0x24
   16924:	adc	sl, sl, ip
   16928:	eor	r7, r7, r9
   1692c:	eor	r5, r5, sl
   16930:	adds	lr, fp, lr
   16934:	lsr	fp, r7, #24
   16938:	orr	fp, fp, r5, lsl #8
   1693c:	str	fp, [sp, #168]	; 0xa8
   16940:	lsr	r5, r5, #24
   16944:	ldr	fp, [sp, #40]	; 0x28
   16948:	orr	r7, r5, r7, lsl #8
   1694c:	ldr	r5, [sp, #168]	; 0xa8
   16950:	adc	r8, fp, r8
   16954:	adds	r5, lr, r5
   16958:	str	r7, [sp, #252]	; 0xfc
   1695c:	adc	r7, r8, r7
   16960:	ldr	lr, [sp, #160]	; 0xa0
   16964:	eor	ip, ip, r7
   16968:	str	r7, [sp, #204]	; 0xcc
   1696c:	ldr	r7, [sp, #140]	; 0x8c
   16970:	eor	r3, r3, r5
   16974:	eor	fp, r7, lr
   16978:	str	r5, [sp, #200]	; 0xc8
   1697c:	ldr	lr, [sp, #228]	; 0xe4
   16980:	ldr	r5, [sp, #144]	; 0x90
   16984:	ldr	r7, [sp, #56]	; 0x38
   16988:	eor	r8, r5, lr
   1698c:	lsr	lr, r3, #16
   16990:	orr	lr, lr, ip, lsl #16
   16994:	lsr	ip, ip, #16
   16998:	adds	r9, r9, lr
   1699c:	orr	ip, ip, r3, lsl #16
   169a0:	adc	r3, sl, ip
   169a4:	str	r9, [sp, #208]	; 0xd0
   169a8:	str	r3, [sp, #220]	; 0xdc
   169ac:	ldr	r9, [sp, #212]	; 0xd4
   169b0:	ldr	r3, [sp, #80]	; 0x50
   169b4:	str	lr, [sp, #228]	; 0xe4
   169b8:	str	ip, [sp, #264]	; 0x108
   169bc:	adds	lr, r3, r9
   169c0:	ldr	ip, [sp, #84]	; 0x54
   169c4:	ldr	r9, [sp, #216]	; 0xd8
   169c8:	lsl	r3, fp, #1
   169cc:	orr	r3, r3, r8, lsr #31
   169d0:	lsl	r8, r8, #1
   169d4:	adc	ip, ip, r9
   169d8:	orr	fp, r8, fp, lsr #31
   169dc:	adds	lr, lr, r3
   169e0:	adc	ip, ip, fp
   169e4:	eor	r1, r1, ip
   169e8:	adds	r0, r0, r1
   169ec:	eor	r4, r4, lr
   169f0:	adc	r9, r6, r4
   169f4:	eor	r3, r3, r0
   169f8:	ldr	r6, [sp, #52]	; 0x34
   169fc:	eor	fp, fp, r9
   16a00:	adds	lr, r6, lr
   16a04:	lsr	r6, r3, #24
   16a08:	orr	r6, r6, fp, lsl #8
   16a0c:	lsr	fp, fp, #24
   16a10:	orr	r3, fp, r3, lsl #8
   16a14:	ldr	fp, [sp, #224]	; 0xe0
   16a18:	ldr	sl, [sp, #240]	; 0xf0
   16a1c:	adc	ip, r7, ip
   16a20:	adds	r8, lr, r6
   16a24:	adc	ip, ip, r3
   16a28:	eor	r1, r1, r8
   16a2c:	str	r8, [sp, #212]	; 0xd4
   16a30:	mov	r8, fp
   16a34:	eor	r4, r4, ip
   16a38:	eor	r8, r8, sl
   16a3c:	ldr	lr, [sp, #148]	; 0x94
   16a40:	ldr	sl, [sp, #248]	; 0xf8
   16a44:	str	ip, [sp, #216]	; 0xd8
   16a48:	lsr	ip, r1, #16
   16a4c:	eor	r5, lr, sl
   16a50:	orr	sl, ip, r4, lsl #16
   16a54:	lsr	r4, r4, #16
   16a58:	adds	r0, r0, sl
   16a5c:	orr	r1, r4, r1, lsl #16
   16a60:	adc	r9, r9, r1
   16a64:	ldr	ip, [sp, #76]	; 0x4c
   16a68:	str	sl, [sp, #240]	; 0xf0
   16a6c:	str	r0, [sp, #160]	; 0xa0
   16a70:	str	r9, [sp, #164]	; 0xa4
   16a74:	str	r1, [sp, #248]	; 0xf8
   16a78:	ldr	r1, [sp, #176]	; 0xb0
   16a7c:	ldr	r9, [sp, #196]	; 0xc4
   16a80:	adds	r1, ip, r1
   16a84:	ldr	r7, [sp, #4]
   16a88:	lsl	ip, r8, #1
   16a8c:	orr	ip, ip, r5, lsr #31
   16a90:	lsl	r5, r5, #1
   16a94:	adc	r7, r7, r9
   16a98:	orr	r8, r5, r8, lsr #31
   16a9c:	adds	r1, r1, ip
   16aa0:	adc	r7, r7, r8
   16aa4:	ldr	lr, [sp, #140]	; 0x8c
   16aa8:	ldr	r9, [sp, #244]	; 0xf4
   16aac:	eor	r2, r2, r7
   16ab0:	ldr	r5, [sp, #144]	; 0x90
   16ab4:	adds	r0, lr, r2
   16ab8:	eor	lr, r1, r9
   16abc:	eor	ip, ip, r0
   16ac0:	adc	r5, r5, lr
   16ac4:	ldr	sl, [sp, #68]	; 0x44
   16ac8:	eor	r8, r8, r5
   16acc:	adds	r1, sl, r1
   16ad0:	ldr	r9, [sp, #72]	; 0x48
   16ad4:	lsr	sl, ip, #24
   16ad8:	orr	sl, sl, r8, lsl #8
   16adc:	lsr	r8, r8, #24
   16ae0:	orr	r4, r8, ip, lsl #8
   16ae4:	adc	r7, r9, r7
   16ae8:	adds	r9, r1, sl
   16aec:	adc	r1, r7, r4
   16af0:	ldr	r8, [sp, #236]	; 0xec
   16af4:	eor	lr, lr, r1
   16af8:	eor	r2, r2, r9
   16afc:	str	r1, [sp, #196]	; 0xc4
   16b00:	ldr	r1, [sp, #152]	; 0x98
   16b04:	str	sl, [sp, #140]	; 0x8c
   16b08:	eor	r1, r1, r8
   16b0c:	ldr	sl, [sp, #156]	; 0x9c
   16b10:	ldr	r8, [sp, #256]	; 0x100
   16b14:	str	r9, [sp, #176]	; 0xb0
   16b18:	lsr	r9, r2, #16
   16b1c:	str	r4, [sp, #224]	; 0xe0
   16b20:	orr	r4, r9, lr, lsl #16
   16b24:	lsr	lr, lr, #16
   16b28:	eor	ip, sl, r8
   16b2c:	orr	r2, lr, r2, lsl #16
   16b30:	ldr	r8, [sp, #172]	; 0xac
   16b34:	ldr	lr, [sp, #28]
   16b38:	adds	r0, r0, r4
   16b3c:	adc	r5, r5, r2
   16b40:	str	r4, [sp, #236]	; 0xec
   16b44:	adds	lr, lr, r8
   16b48:	ldr	r4, [sp, #32]
   16b4c:	ldr	r8, [sp, #180]	; 0xb4
   16b50:	lsl	r7, r1, #1
   16b54:	orr	r7, r7, ip, lsr #31
   16b58:	lsl	ip, ip, #1
   16b5c:	adc	r8, r4, r8
   16b60:	orr	ip, ip, r1, lsr #31
   16b64:	adds	lr, lr, r7
   16b68:	ldr	r1, [sp, #260]	; 0x104
   16b6c:	adc	r9, r8, ip
   16b70:	str	r2, [sp, #244]	; 0xf4
   16b74:	ldr	r2, [sp, #232]	; 0xe8
   16b78:	ldr	sl, [sp, #148]	; 0x94
   16b7c:	eor	r8, r9, r1
   16b80:	adds	r1, fp, r8
   16b84:	eor	r2, lr, r2
   16b88:	adc	r4, sl, r2
   16b8c:	eor	r7, r7, r1
   16b90:	ldr	sl, [sp, #60]	; 0x3c
   16b94:	eor	ip, ip, r4
   16b98:	adds	lr, sl, lr
   16b9c:	lsr	fp, r7, #24
   16ba0:	ldr	sl, [sp, #64]	; 0x40
   16ba4:	orr	fp, fp, ip, lsl #8
   16ba8:	adc	r9, sl, r9
   16bac:	lsr	ip, ip, #24
   16bb0:	adds	lr, lr, fp
   16bb4:	orr	r7, ip, r7, lsl #8
   16bb8:	eor	r8, r8, lr
   16bbc:	str	lr, [sp, #180]	; 0xb4
   16bc0:	ldr	lr, [sp, #160]	; 0xa0
   16bc4:	adc	r9, r9, r7
   16bc8:	ldr	sl, [sp, #164]	; 0xa4
   16bcc:	eor	r6, r6, lr
   16bd0:	eor	r2, r2, r9
   16bd4:	eor	ip, sl, r3
   16bd8:	lsr	lr, r8, #16
   16bdc:	orr	lr, lr, r2, lsl #16
   16be0:	lsl	r3, r6, #1
   16be4:	lsr	r2, r2, #16
   16be8:	str	r7, [sp, #148]	; 0x94
   16bec:	orr	r7, r2, r8, lsl #16
   16bf0:	lsl	r8, ip, #1
   16bf4:	ldr	r2, [sp, #12]
   16bf8:	orr	ip, r3, ip, lsr #31
   16bfc:	ldr	r3, [sp, #200]	; 0xc8
   16c00:	adds	r1, r1, lr
   16c04:	adc	r4, r4, r7
   16c08:	orr	r8, r8, r6, lsr #31
   16c0c:	adds	r2, r2, r3
   16c10:	ldr	r6, [sp, #204]	; 0xcc
   16c14:	ldr	r3, [sp, #16]
   16c18:	eor	fp, fp, r1
   16c1c:	adc	r6, r3, r6
   16c20:	adds	r2, r2, ip
   16c24:	adc	r6, r6, r8
   16c28:	eor	r3, r6, r7
   16c2c:	adds	r7, r0, r3
   16c30:	eor	lr, lr, r2
   16c34:	adc	sl, r5, lr
   16c38:	eor	ip, ip, r7
   16c3c:	str	sl, [sp, #144]	; 0x90
   16c40:	eor	r8, r8, sl
   16c44:	ldr	sl, [sp, #100]	; 0x64
   16c48:	adds	r2, sl, r2
   16c4c:	lsr	sl, ip, #24
   16c50:	orr	sl, sl, r8, lsl #8
   16c54:	lsr	r8, r8, #24
   16c58:	str	sl, [sp, #172]	; 0xac
   16c5c:	orr	r8, r8, ip, lsl #8
   16c60:	mov	ip, r8
   16c64:	ldr	sl, [sp, #104]	; 0x68
   16c68:	ldr	r8, [sp, #172]	; 0xac
   16c6c:	adc	r6, sl, r6
   16c70:	adds	r8, r2, r8
   16c74:	adc	r6, r6, ip
   16c78:	eor	r3, r3, r8
   16c7c:	ldr	sl, [sp, #140]	; 0x8c
   16c80:	eor	lr, lr, r6
   16c84:	str	r6, [sp, #204]	; 0xcc
   16c88:	ldr	r6, [sp, #224]	; 0xe0
   16c8c:	lsr	r2, r3, #16
   16c90:	eor	r0, r0, sl
   16c94:	eor	r5, r5, r6
   16c98:	orr	r6, r2, lr, lsl #16
   16c9c:	adds	r7, r7, r6
   16ca0:	ldr	r2, [sp, #212]	; 0xd4
   16ca4:	str	r8, [sp, #200]	; 0xc8
   16ca8:	lsr	lr, lr, #16
   16cac:	ldr	r8, [sp, #8]
   16cb0:	str	r6, [sp, #256]	; 0x100
   16cb4:	ldr	r6, [sp, #144]	; 0x90
   16cb8:	str	r7, [sp, #140]	; 0x8c
   16cbc:	orr	r7, lr, r3, lsl #16
   16cc0:	lsl	r3, r0, #1
   16cc4:	adc	r6, r6, r7
   16cc8:	lsl	sl, r5, #1
   16ccc:	adds	r2, r8, r2
   16cd0:	orr	r5, r3, r5, lsr #31
   16cd4:	ldr	r8, [sp, #216]	; 0xd8
   16cd8:	ldr	r3, [sp, #88]	; 0x58
   16cdc:	orr	r0, sl, r0, lsr #31
   16ce0:	str	ip, [sp, #232]	; 0xe8
   16ce4:	adc	ip, r3, r8
   16ce8:	adds	r2, r2, r5
   16cec:	ldr	r8, [sp, #264]	; 0x108
   16cf0:	adc	ip, ip, r0
   16cf4:	ldr	lr, [sp, #228]	; 0xe4
   16cf8:	eor	r3, ip, r8
   16cfc:	eor	lr, r2, lr
   16d00:	str	r6, [sp, #144]	; 0x90
   16d04:	adds	r6, r1, r3
   16d08:	ldr	r8, [sp, #136]	; 0x88
   16d0c:	str	r7, [sp, #260]	; 0x104
   16d10:	eor	r7, r6, r5
   16d14:	adc	r5, r4, lr
   16d18:	eor	r0, r0, r5
   16d1c:	adds	r2, r8, r2
   16d20:	lsr	r8, r7, #24
   16d24:	orr	r8, r8, r0, lsl #8
   16d28:	mov	sl, r8
   16d2c:	lsr	r0, r0, #24
   16d30:	ldr	r8, [sp, #124]	; 0x7c
   16d34:	orr	r0, r0, r7, lsl #8
   16d38:	adc	ip, r8, ip
   16d3c:	mov	r8, r0
   16d40:	adds	r0, r2, sl
   16d44:	adc	ip, ip, r8
   16d48:	eor	r3, r3, r0
   16d4c:	eor	lr, lr, ip
   16d50:	str	ip, [sp, #216]	; 0xd8
   16d54:	lsr	ip, r3, #16
   16d58:	orr	ip, ip, lr, lsl #16
   16d5c:	str	r8, [sp, #268]	; 0x10c
   16d60:	lsr	lr, lr, #16
   16d64:	ldr	r8, [sp, #148]	; 0x94
   16d68:	adds	r2, r6, ip
   16d6c:	orr	r3, lr, r3, lsl #16
   16d70:	eor	r4, r4, r8
   16d74:	str	sl, [sp, #264]	; 0x108
   16d78:	str	r0, [sp, #212]	; 0xd4
   16d7c:	str	r2, [sp, #224]	; 0xe0
   16d80:	str	r3, [sp, #228]	; 0xe4
   16d84:	adc	r3, r5, r3
   16d88:	lsl	r1, fp, #1
   16d8c:	str	r3, [sp, #148]	; 0x94
   16d90:	ldr	r2, [sp, #176]	; 0xb0
   16d94:	ldr	r3, [sp, #44]	; 0x2c
   16d98:	ldr	lr, [sp, #196]	; 0xc4
   16d9c:	lsl	r0, r4, #1
   16da0:	orr	r4, r1, r4, lsr #31
   16da4:	ldr	r1, [sp, #48]	; 0x30
   16da8:	adds	r2, r3, r2
   16dac:	adc	r7, r1, lr
   16db0:	orr	r0, r0, fp, lsr #31
   16db4:	adds	r2, r2, r4
   16db8:	ldr	r1, [sp, #248]	; 0xf8
   16dbc:	ldr	r3, [sp, #208]	; 0xd0
   16dc0:	adc	r7, r7, r0
   16dc4:	ldr	r5, [sp, #240]	; 0xf0
   16dc8:	ldr	sl, [sp, #220]	; 0xdc
   16dcc:	eor	r1, r7, r1
   16dd0:	adds	r6, r3, r1
   16dd4:	eor	lr, r2, r5
   16dd8:	adc	r5, sl, lr
   16ddc:	eor	r4, r4, r6
   16de0:	ldr	r8, [sp, #108]	; 0x6c
   16de4:	eor	r0, r0, r5
   16de8:	adds	r2, r8, r2
   16dec:	lsr	r8, r4, #24
   16df0:	orr	fp, r8, r0, lsl #8
   16df4:	ldr	r8, [sp, #112]	; 0x70
   16df8:	lsr	r0, r0, #24
   16dfc:	orr	r4, r0, r4, lsl #8
   16e00:	adc	r7, r8, r7
   16e04:	mov	r0, r4
   16e08:	adds	r4, r2, fp
   16e0c:	adc	r2, r7, r0
   16e10:	eor	r1, r1, r4
   16e14:	eor	lr, lr, r2
   16e18:	str	r0, [sp, #248]	; 0xf8
   16e1c:	ldr	r0, [sp, #168]	; 0xa8
   16e20:	str	r4, [sp, #196]	; 0xc4
   16e24:	lsr	r4, r1, #16
   16e28:	orr	r4, r4, lr, lsl #16
   16e2c:	str	fp, [sp, #240]	; 0xf0
   16e30:	lsr	lr, lr, #16
   16e34:	eor	fp, r3, r0
   16e38:	ldr	r0, [sp, #252]	; 0xfc
   16e3c:	adds	r7, r6, r4
   16e40:	orr	r1, lr, r1, lsl #16
   16e44:	adc	r5, r5, r1
   16e48:	eor	sl, sl, r0
   16e4c:	ldr	lr, [sp, #180]	; 0xb4
   16e50:	str	r2, [sp, #208]	; 0xd0
   16e54:	str	r5, [sp, #156]	; 0x9c
   16e58:	lsl	r2, fp, #1
   16e5c:	ldr	r5, [sp, #116]	; 0x74
   16e60:	str	r7, [sp, #152]	; 0x98
   16e64:	lsl	r7, sl, #1
   16e68:	orr	sl, r2, sl, lsr #31
   16e6c:	ldr	r2, [sp, #120]	; 0x78
   16e70:	adds	lr, r5, lr
   16e74:	adc	r8, r2, r9
   16e78:	ldr	r5, [sp, #236]	; 0xec
   16e7c:	adds	lr, lr, sl
   16e80:	orr	r7, r7, fp, lsr #31
   16e84:	ldr	r2, [sp, #244]	; 0xf4
   16e88:	adc	r8, r8, r7
   16e8c:	ldr	r0, [sp, #160]	; 0xa0
   16e90:	eor	r9, lr, r5
   16e94:	eor	r2, r8, r2
   16e98:	ldr	r5, [sp, #164]	; 0xa4
   16e9c:	adds	r0, r0, r2
   16ea0:	adc	r6, r5, r9
   16ea4:	eor	sl, sl, r0
   16ea8:	ldr	fp, [sp, #20]
   16eac:	eor	r7, r7, r6
   16eb0:	ldr	r3, [sp, #24]
   16eb4:	lsr	r5, sl, #24
   16eb8:	adds	lr, fp, lr
   16ebc:	orr	r5, r5, r7, lsl #8
   16ec0:	lsr	r7, r7, #24
   16ec4:	adc	r8, r3, r8
   16ec8:	orr	r7, r7, sl, lsl #8
   16ecc:	adds	lr, lr, r5
   16ed0:	eor	r2, r2, lr
   16ed4:	str	lr, [sp, #180]	; 0xb4
   16ed8:	adc	lr, r8, r7
   16edc:	eor	r9, r9, lr
   16ee0:	str	lr, [sp, #220]	; 0xdc
   16ee4:	lsr	lr, r2, #16
   16ee8:	orr	r3, lr, r9, lsl #16
   16eec:	lsr	r9, r9, #16
   16ef0:	adds	r0, r0, r3
   16ef4:	orr	r2, r9, r2, lsl #16
   16ef8:	adc	r6, r6, r2
   16efc:	eor	r5, r5, r0
   16f00:	eor	r7, r7, r6
   16f04:	lsl	r8, r5, #1
   16f08:	ldr	lr, [sp, #200]	; 0xc8
   16f0c:	lsl	r9, r7, #1
   16f10:	str	r3, [sp, #236]	; 0xec
   16f14:	orr	r7, r8, r7, lsr #31
   16f18:	ldr	r8, [sp, #24]
   16f1c:	ldr	r3, [sp, #204]	; 0xcc
   16f20:	adds	lr, fp, lr
   16f24:	adc	r8, r8, r3
   16f28:	orr	r5, r9, r5, lsr #31
   16f2c:	adds	lr, lr, r7
   16f30:	ldr	r3, [sp, #228]	; 0xe4
   16f34:	adc	r8, r8, r5
   16f38:	ldr	r9, [sp, #152]	; 0x98
   16f3c:	eor	r3, r3, r8
   16f40:	ldr	sl, [sp, #156]	; 0x9c
   16f44:	adds	r9, r9, r3
   16f48:	eor	ip, ip, lr
   16f4c:	adc	sl, sl, ip
   16f50:	eor	r7, r7, r9
   16f54:	ldr	fp, [sp, #28]
   16f58:	eor	r5, r5, sl
   16f5c:	adds	lr, fp, lr
   16f60:	lsr	fp, r7, #24
   16f64:	orr	fp, fp, r5, lsl #8
   16f68:	lsr	r5, r5, #24
   16f6c:	str	fp, [sp, #176]	; 0xb0
   16f70:	orr	r5, r5, r7, lsl #8
   16f74:	ldr	fp, [sp, #32]
   16f78:	mov	r7, r5
   16f7c:	ldr	r5, [sp, #176]	; 0xb0
   16f80:	adc	r8, fp, r8
   16f84:	adds	r5, lr, r5
   16f88:	eor	r3, r3, r5
   16f8c:	ldr	lr, [sp, #140]	; 0x8c
   16f90:	str	r5, [sp, #200]	; 0xc8
   16f94:	ldr	r5, [sp, #172]	; 0xac
   16f98:	str	r7, [sp, #244]	; 0xf4
   16f9c:	eor	fp, lr, r5
   16fa0:	adc	r7, r8, r7
   16fa4:	ldr	r5, [sp, #232]	; 0xe8
   16fa8:	ldr	lr, [sp, #144]	; 0x90
   16fac:	eor	ip, ip, r7
   16fb0:	eor	r8, lr, r5
   16fb4:	lsr	lr, r3, #16
   16fb8:	orr	r5, lr, ip, lsl #16
   16fbc:	adds	r9, r9, r5
   16fc0:	lsr	ip, ip, #16
   16fc4:	str	r5, [sp, #232]	; 0xe8
   16fc8:	str	r9, [sp, #228]	; 0xe4
   16fcc:	ldr	r5, [sp, #212]	; 0xd4
   16fd0:	orr	r9, ip, r3, lsl #16
   16fd4:	ldr	ip, [sp, #36]	; 0x24
   16fd8:	str	r9, [sp, #252]	; 0xfc
   16fdc:	adc	r9, sl, r9
   16fe0:	str	r9, [sp, #160]	; 0xa0
   16fe4:	adds	lr, ip, r5
   16fe8:	ldr	r9, [sp, #216]	; 0xd8
   16fec:	ldr	r5, [sp, #40]	; 0x28
   16ff0:	lsl	r3, fp, #1
   16ff4:	orr	r3, r3, r8, lsr #31
   16ff8:	lsl	r8, r8, #1
   16ffc:	adc	ip, r5, r9
   17000:	orr	fp, r8, fp, lsr #31
   17004:	adds	lr, lr, r3
   17008:	adc	ip, ip, fp
   1700c:	eor	r1, r1, ip
   17010:	adds	r0, r0, r1
   17014:	eor	r4, r4, lr
   17018:	adc	r9, r6, r4
   1701c:	eor	r3, r3, r0
   17020:	ldr	r6, [sp, #44]	; 0x2c
   17024:	eor	fp, fp, r9
   17028:	adds	lr, r6, lr
   1702c:	ldr	sl, [sp, #48]	; 0x30
   17030:	lsr	r6, r3, #24
   17034:	orr	r6, r6, fp, lsl #8
   17038:	lsr	fp, fp, #24
   1703c:	orr	r3, fp, r3, lsl #8
   17040:	adc	ip, sl, ip
   17044:	adds	fp, lr, r6
   17048:	adc	ip, ip, r3
   1704c:	eor	r1, r1, fp
   17050:	eor	r4, r4, ip
   17054:	str	ip, [sp, #216]	; 0xd8
   17058:	lsr	ip, r1, #16
   1705c:	orr	sl, ip, r4, lsl #16
   17060:	ldr	r5, [sp, #264]	; 0x108
   17064:	str	fp, [sp, #212]	; 0xd4
   17068:	lsr	r4, r4, #16
   1706c:	ldr	fp, [sp, #224]	; 0xe0
   17070:	adds	r0, r0, sl
   17074:	orr	r1, r4, r1, lsl #16
   17078:	eor	r8, fp, r5
   1707c:	ldr	lr, [sp, #148]	; 0x94
   17080:	str	r7, [sp, #204]	; 0xcc
   17084:	ldr	r5, [sp, #268]	; 0x10c
   17088:	str	sl, [sp, #264]	; 0x108
   1708c:	str	r1, [sp, #268]	; 0x10c
   17090:	adc	r1, r9, r1
   17094:	str	r0, [sp, #164]	; 0xa4
   17098:	str	r1, [sp, #168]	; 0xa8
   1709c:	ldr	r0, [sp, #196]	; 0xc4
   170a0:	ldr	r1, [sp, #52]	; 0x34
   170a4:	eor	r5, lr, r5
   170a8:	adds	r1, r1, r0
   170ac:	ldr	r7, [sp, #208]	; 0xd0
   170b0:	ldr	r0, [sp, #56]	; 0x38
   170b4:	lsl	lr, r8, #1
   170b8:	orr	lr, lr, r5, lsr #31
   170bc:	lsl	r5, r5, #1
   170c0:	adc	r7, r0, r7
   170c4:	orr	r8, r5, r8, lsr #31
   170c8:	adds	r1, r1, lr
   170cc:	adc	r7, r7, r8
   170d0:	ldr	r0, [sp, #140]	; 0x8c
   170d4:	eor	r2, r2, r7
   170d8:	adds	ip, r0, r2
   170dc:	ldr	r0, [sp, #236]	; 0xec
   170e0:	ldr	r4, [sp, #144]	; 0x90
   170e4:	eor	r0, r1, r0
   170e8:	adc	r5, r4, r0
   170ec:	eor	lr, lr, ip
   170f0:	eor	r8, r8, r5
   170f4:	ldr	sl, [sp, #60]	; 0x3c
   170f8:	ldr	r4, [sp, #64]	; 0x40
   170fc:	lsr	r9, lr, #24
   17100:	adds	r1, sl, r1
   17104:	orr	r9, r9, r8, lsl #8
   17108:	lsr	r8, r8, #24
   1710c:	orr	r8, r8, lr, lsl #8
   17110:	adc	r7, r4, r7
   17114:	adds	r1, r1, r9
   17118:	adc	r7, r7, r8
   1711c:	ldr	r4, [sp, #240]	; 0xf0
   17120:	eor	r2, r2, r1
   17124:	ldr	lr, [sp, #152]	; 0x98
   17128:	eor	r0, r0, r7
   1712c:	str	r1, [sp, #196]	; 0xc4
   17130:	eor	r1, lr, r4
   17134:	lsr	r4, r2, #16
   17138:	orr	r4, r4, r0, lsl #16
   1713c:	lsr	r0, r0, #16
   17140:	adds	ip, ip, r4
   17144:	orr	r2, r0, r2, lsl #16
   17148:	str	r7, [sp, #208]	; 0xd0
   1714c:	ldr	lr, [sp, #248]	; 0xf8
   17150:	ldr	r7, [sp, #156]	; 0x9c
   17154:	adc	r5, r5, r2
   17158:	ldr	r0, [sp, #180]	; 0xb4
   1715c:	str	r2, [sp, #240]	; 0xf0
   17160:	ldr	r2, [sp, #68]	; 0x44
   17164:	eor	lr, r7, lr
   17168:	str	r4, [sp, #236]	; 0xec
   1716c:	lsl	r7, r1, #1
   17170:	adds	r4, r2, r0
   17174:	ldr	r2, [sp, #72]	; 0x48
   17178:	ldr	r0, [sp, #220]	; 0xdc
   1717c:	orr	r7, r7, lr, lsr #31
   17180:	lsl	lr, lr, #1
   17184:	orr	lr, lr, r1, lsr #31
   17188:	str	r8, [sp, #144]	; 0x90
   1718c:	ldr	r1, [sp, #260]	; 0x104
   17190:	adc	r8, r2, r0
   17194:	str	r5, [sp, #140]	; 0x8c
   17198:	adds	r4, r4, r7
   1719c:	ldr	r5, [sp, #256]	; 0x100
   171a0:	adc	sl, r8, lr
   171a4:	eor	r8, sl, r1
   171a8:	eor	r1, r4, r5
   171ac:	ldr	r5, [sp, #148]	; 0x94
   171b0:	adds	r0, fp, r8
   171b4:	adc	r2, r5, r1
   171b8:	eor	r7, r7, r0
   171bc:	ldr	r5, [sp, #76]	; 0x4c
   171c0:	eor	lr, lr, r2
   171c4:	adds	r4, r5, r4
   171c8:	lsr	fp, r7, #24
   171cc:	ldr	r5, [sp, #4]
   171d0:	orr	fp, fp, lr, lsl #8
   171d4:	lsr	lr, lr, #24
   171d8:	adc	sl, r5, sl
   171dc:	orr	lr, lr, r7, lsl #8
   171e0:	adds	r4, r4, fp
   171e4:	str	r4, [sp, #180]	; 0xb4
   171e8:	str	lr, [sp, #148]	; 0x94
   171ec:	adc	lr, sl, lr
   171f0:	eor	r1, r1, lr
   171f4:	str	lr, [sp, #220]	; 0xdc
   171f8:	ldr	lr, [sp, #164]	; 0xa4
   171fc:	eor	r8, r8, r4
   17200:	eor	r6, r6, lr
   17204:	ldr	lr, [sp, #168]	; 0xa8
   17208:	lsr	r4, r8, #16
   1720c:	eor	lr, lr, r3
   17210:	orr	r4, r4, r1, lsl #16
   17214:	lsr	r1, r1, #16
   17218:	orr	r7, r1, r8, lsl #16
   1721c:	ldr	r5, [sp, #200]	; 0xc8
   17220:	ldr	r1, [sp, #80]	; 0x50
   17224:	adds	r0, r0, r4
   17228:	lsl	r8, lr, #1
   1722c:	adc	r2, r2, r7
   17230:	lsl	r3, r6, #1
   17234:	adds	r1, r1, r5
   17238:	orr	r8, r8, r6, lsr #31
   1723c:	ldr	r5, [sp, #204]	; 0xcc
   17240:	ldr	r6, [sp, #84]	; 0x54
   17244:	orr	lr, r3, lr, lsr #31
   17248:	adc	r6, r6, r5
   1724c:	adds	r1, r1, lr
   17250:	adc	r6, r6, r8
   17254:	ldr	r5, [sp, #140]	; 0x8c
   17258:	eor	r3, r6, r7
   1725c:	adds	r7, ip, r3
   17260:	eor	r4, r4, r1
   17264:	adc	sl, r5, r4
   17268:	eor	lr, lr, r7
   1726c:	ldr	r5, [sp, #8]
   17270:	eor	r8, r8, sl
   17274:	adds	r1, r5, r1
   17278:	lsr	r5, lr, #24
   1727c:	orr	r5, r5, r8, lsl #8
   17280:	str	r5, [sp, #172]	; 0xac
   17284:	ldr	r5, [sp, #88]	; 0x58
   17288:	lsr	r8, r8, #24
   1728c:	adc	r6, r5, r6
   17290:	ldr	r5, [sp, #172]	; 0xac
   17294:	orr	lr, r8, lr, lsl #8
   17298:	adds	r1, r1, r5
   1729c:	adc	r8, r6, lr
   172a0:	eor	r3, r3, r1
   172a4:	ldr	r6, [sp, #144]	; 0x90
   172a8:	eor	r4, r4, r8
   172ac:	ldr	r5, [sp, #140]	; 0x8c
   172b0:	str	r1, [sp, #200]	; 0xc8
   172b4:	lsr	r1, r3, #16
   172b8:	eor	r5, r5, r6
   172bc:	orr	r6, r1, r4, lsl #16
   172c0:	str	r6, [sp, #256]	; 0x100
   172c4:	lsr	r4, r4, #16
   172c8:	adds	r6, r7, r6
   172cc:	eor	r9, r9, ip
   172d0:	orr	r3, r4, r3, lsl #16
   172d4:	str	r6, [sp, #140]	; 0x8c
   172d8:	ldr	r4, [sp, #212]	; 0xd4
   172dc:	ldr	r6, [sp, #92]	; 0x5c
   172e0:	str	r3, [sp, #260]	; 0x104
   172e4:	adc	r3, sl, r3
   172e8:	lsl	r1, r9, #1
   172ec:	ldr	sl, [sp, #96]	; 0x60
   172f0:	str	r3, [sp, #144]	; 0x90
   172f4:	adds	r3, r6, r4
   172f8:	ldr	r4, [sp, #216]	; 0xd8
   172fc:	str	lr, [sp, #248]	; 0xf8
   17300:	lsl	lr, r5, #1
   17304:	orr	r5, r1, r5, lsr #31
   17308:	adc	ip, sl, r4
   1730c:	orr	r9, lr, r9, lsr #31
   17310:	adds	r3, r3, r5
   17314:	ldr	lr, [sp, #252]	; 0xfc
   17318:	adc	r1, ip, r9
   1731c:	eor	ip, r1, lr
   17320:	ldr	lr, [sp, #232]	; 0xe8
   17324:	adds	r4, r0, ip
   17328:	eor	lr, r3, lr
   1732c:	adc	r6, r2, lr
   17330:	eor	r5, r5, r4
   17334:	ldr	r7, [sp, #100]	; 0x64
   17338:	eor	r9, r9, r6
   1733c:	adds	r3, r7, r3
   17340:	lsr	r7, r5, #24
   17344:	orr	sl, r7, r9, lsl #8
   17348:	mov	r7, sl
   1734c:	ldr	sl, [sp, #104]	; 0x68
   17350:	lsr	r9, r9, #24
   17354:	orr	r9, r9, r5, lsl #8
   17358:	adc	r1, sl, r1
   1735c:	adds	sl, r3, r7
   17360:	adc	r3, r1, r9
   17364:	eor	ip, ip, sl
   17368:	eor	fp, fp, r0
   1736c:	str	r8, [sp, #204]	; 0xcc
   17370:	str	r7, [sp, #232]	; 0xe8
   17374:	str	sl, [sp, #212]	; 0xd4
   17378:	str	r9, [sp, #252]	; 0xfc
   1737c:	str	r3, [sp, #216]	; 0xd8
   17380:	eor	r3, r3, lr
   17384:	ldr	r0, [sp, #148]	; 0x94
   17388:	lsr	lr, ip, #16
   1738c:	eor	r7, r2, r0
   17390:	orr	lr, lr, r3, lsl #16
   17394:	lsr	r2, r3, #16
   17398:	adds	r0, r4, lr
   1739c:	orr	r2, r2, ip, lsl #16
   173a0:	ldr	r4, [sp, #108]	; 0x6c
   173a4:	str	r0, [sp, #224]	; 0xe0
   173a8:	adc	r0, r6, r2
   173ac:	ldr	r6, [sp, #196]	; 0xc4
   173b0:	lsl	ip, fp, #1
   173b4:	orr	ip, ip, r7, lsr #31
   173b8:	str	r0, [sp, #148]	; 0x94
   173bc:	lsl	r3, r7, #1
   173c0:	adds	r0, r4, r6
   173c4:	ldr	r7, [sp, #208]	; 0xd0
   173c8:	ldr	r6, [sp, #112]	; 0x70
   173cc:	orr	r3, r3, fp, lsr #31
   173d0:	adc	r7, r6, r7
   173d4:	ldr	r4, [sp, #268]	; 0x10c
   173d8:	adds	r0, r0, ip
   173dc:	adc	r7, r7, r3
   173e0:	ldr	r8, [sp, #228]	; 0xe4
   173e4:	eor	r1, r7, r4
   173e8:	ldr	r4, [sp, #264]	; 0x108
   173ec:	ldr	r6, [sp, #160]	; 0xa0
   173f0:	adds	r5, r8, r1
   173f4:	eor	r4, r0, r4
   173f8:	adc	r6, r6, r4
   173fc:	eor	ip, ip, r5
   17400:	eor	r3, r3, r6
   17404:	ldr	fp, [sp, #116]	; 0x74
   17408:	lsr	r9, ip, #24
   1740c:	adds	r0, fp, r0
   17410:	ldr	sl, [sp, #120]	; 0x78
   17414:	orr	fp, r9, r3, lsl #8
   17418:	lsr	r3, r3, #24
   1741c:	orr	ip, r3, ip, lsl #8
   17420:	mov	r9, ip
   17424:	adc	r7, sl, r7
   17428:	adds	ip, r0, fp
   1742c:	adc	r7, r7, r9
   17430:	eor	r1, r1, ip
   17434:	str	ip, [sp, #196]	; 0xc4
   17438:	ldr	ip, [sp, #176]	; 0xb0
   1743c:	eor	r4, r4, r7
   17440:	ldr	r0, [sp, #160]	; 0xa0
   17444:	str	r9, [sp, #264]	; 0x108
   17448:	eor	r9, r8, ip
   1744c:	ldr	r8, [sp, #244]	; 0xf4
   17450:	lsr	ip, r1, #16
   17454:	orr	ip, ip, r4, lsl #16
   17458:	lsr	r4, r4, #16
   1745c:	eor	sl, r0, r8
   17460:	orr	r3, r4, r1, lsl #16
   17464:	adds	r5, r5, ip
   17468:	ldr	r1, [sp, #136]	; 0x88
   1746c:	str	r7, [sp, #208]	; 0xd0
   17470:	ldr	r7, [sp, #180]	; 0xb4
   17474:	ldr	r0, [sp, #220]	; 0xdc
   17478:	str	fp, [sp, #228]	; 0xe4
   1747c:	str	r5, [sp, #152]	; 0x98
   17480:	lsl	fp, r9, #1
   17484:	adc	r5, r6, r3
   17488:	str	r3, [sp, #176]	; 0xb0
   1748c:	ldr	r3, [sp, #124]	; 0x7c
   17490:	adds	r4, r1, r7
   17494:	orr	fp, fp, sl, lsr #31
   17498:	ldr	r8, [sp, #236]	; 0xec
   1749c:	lsl	r7, sl, #1
   174a0:	orr	r7, r7, r9, lsr #31
   174a4:	adc	sl, r3, r0
   174a8:	ldr	r6, [sp, #240]	; 0xf0
   174ac:	adds	r4, r4, fp
   174b0:	adc	sl, sl, r7
   174b4:	eor	r9, r4, r8
   174b8:	ldr	r8, [sp, #164]	; 0xa4
   174bc:	eor	r3, sl, r6
   174c0:	adds	r0, r8, r3
   174c4:	ldr	r8, [sp, #168]	; 0xa8
   174c8:	eor	fp, fp, r0
   174cc:	adc	r6, r8, r9
   174d0:	ldr	r8, [sp, #12]
   174d4:	eor	r7, r7, r6
   174d8:	adds	r4, r8, r4
   174dc:	str	r5, [sp, #156]	; 0x9c
   174e0:	ldr	r8, [sp, #16]
   174e4:	lsr	r5, fp, #24
   174e8:	orr	r5, r5, r7, lsl #8
   174ec:	lsr	r7, r7, #24
   174f0:	adc	sl, r8, sl
   174f4:	orr	r7, r7, fp, lsl #8
   174f8:	adds	r8, r4, r5
   174fc:	adc	r4, sl, r7
   17500:	eor	r3, r3, r8
   17504:	eor	r9, r9, r4
   17508:	str	r4, [sp, #160]	; 0xa0
   1750c:	lsr	r4, r3, #16
   17510:	str	r8, [sp, #136]	; 0x88
   17514:	orr	r8, r4, r9, lsl #16
   17518:	lsr	r9, r9, #16
   1751c:	adds	r0, r0, r8
   17520:	orr	r3, r9, r3, lsl #16
   17524:	adc	r6, r6, r3
   17528:	eor	r5, r5, r0
   1752c:	str	r8, [sp, #168]	; 0xa8
   17530:	ldr	r8, [sp, #200]	; 0xc8
   17534:	eor	r7, r7, r6
   17538:	adds	r4, r1, r8
   1753c:	ldr	fp, [sp, #124]	; 0x7c
   17540:	lsl	sl, r5, #1
   17544:	ldr	r8, [sp, #204]	; 0xcc
   17548:	lsl	r9, r7, #1
   1754c:	orr	r7, sl, r7, lsr #31
   17550:	adc	r8, fp, r8
   17554:	orr	r5, r9, r5, lsr #31
   17558:	adds	r4, r4, r7
   1755c:	adc	r8, r8, r5
   17560:	ldr	fp, [sp, #152]	; 0x98
   17564:	eor	r2, r2, r8
   17568:	adds	r9, fp, r2
   1756c:	ldr	fp, [sp, #156]	; 0x9c
   17570:	eor	lr, lr, r4
   17574:	adc	sl, fp, lr
   17578:	eor	r7, r7, r9
   1757c:	ldr	r1, [sp, #92]	; 0x5c
   17580:	eor	r5, r5, sl
   17584:	lsr	fp, r7, #24
   17588:	adds	r4, r1, r4
   1758c:	orr	r1, fp, r5, lsl #8
   17590:	mov	fp, r1
   17594:	ldr	r1, [sp, #96]	; 0x60
   17598:	lsr	r5, r5, #24
   1759c:	orr	r5, r5, r7, lsl #8
   175a0:	adc	r8, r1, r8
   175a4:	adds	r7, r4, fp
   175a8:	adc	r8, r8, r5
   175ac:	ldr	r4, [sp, #172]	; 0xac
   175b0:	eor	r2, r2, r7
   175b4:	eor	lr, lr, r8
   175b8:	str	r8, [sp, #96]	; 0x60
   175bc:	ldr	r8, [sp, #140]	; 0x8c
   175c0:	str	fp, [sp, #180]	; 0xb4
   175c4:	eor	fp, r8, r4
   175c8:	lsr	r4, r2, #16
   175cc:	orr	r1, r4, lr, lsl #16
   175d0:	lsr	lr, lr, #16
   175d4:	orr	r2, lr, r2, lsl #16
   175d8:	adds	r4, r9, r1
   175dc:	mov	lr, r2
   175e0:	str	r7, [sp, #92]	; 0x5c
   175e4:	ldr	r8, [sp, #248]	; 0xf8
   175e8:	ldr	r7, [sp, #144]	; 0x90
   175ec:	str	lr, [sp, #204]	; 0xcc
   175f0:	adc	lr, sl, lr
   175f4:	ldr	r9, [sp, #52]	; 0x34
   175f8:	str	lr, [sp, #164]	; 0xa4
   175fc:	ldr	lr, [sp, #212]	; 0xd4
   17600:	eor	r8, r7, r8
   17604:	adds	lr, r9, lr
   17608:	str	r4, [sp, #124]	; 0x7c
   1760c:	ldr	r9, [sp, #56]	; 0x38
   17610:	lsl	r2, fp, #1
   17614:	ldr	r4, [sp, #216]	; 0xd8
   17618:	orr	r2, r2, r8, lsr #31
   1761c:	lsl	r8, r8, #1
   17620:	adc	r4, r9, r4
   17624:	orr	fp, r8, fp, lsr #31
   17628:	adds	lr, lr, r2
   1762c:	str	r1, [sp, #172]	; 0xac
   17630:	ldr	r1, [sp, #176]	; 0xb0
   17634:	adc	r4, r4, fp
   17638:	eor	r1, r1, r4
   1763c:	adds	r0, r0, r1
   17640:	eor	ip, ip, lr
   17644:	adc	r6, r6, ip
   17648:	ldr	r9, [sp, #80]	; 0x50
   1764c:	eor	r2, r2, r0
   17650:	eor	fp, fp, r6
   17654:	adds	lr, r9, lr
   17658:	lsr	r7, r2, #24
   1765c:	ldr	r9, [sp, #84]	; 0x54
   17660:	orr	r7, r7, fp, lsl #8
   17664:	lsr	fp, fp, #24
   17668:	adc	r4, r9, r4
   1766c:	orr	r2, fp, r2, lsl #8
   17670:	adds	sl, lr, r7
   17674:	adc	lr, r4, r2
   17678:	str	r5, [sp, #200]	; 0xc8
   1767c:	str	sl, [sp, #80]	; 0x50
   17680:	str	lr, [sp, #84]	; 0x54
   17684:	ldr	fp, [sp, #224]	; 0xe0
   17688:	ldr	r9, [sp, #232]	; 0xe8
   1768c:	eor	r1, r1, sl
   17690:	eor	ip, ip, lr
   17694:	mov	lr, fp
   17698:	eor	lr, lr, r9
   1769c:	ldr	sl, [sp, #148]	; 0x94
   176a0:	ldr	r9, [sp, #252]	; 0xfc
   176a4:	lsr	r4, r1, #16
   176a8:	eor	r5, sl, r9
   176ac:	orr	r9, r4, ip, lsl #16
   176b0:	adds	r0, r0, r9
   176b4:	ldr	r4, [sp, #196]	; 0xc4
   176b8:	str	r9, [sp, #176]	; 0xb0
   176bc:	lsr	ip, ip, #16
   176c0:	ldr	r9, [sp, #8]
   176c4:	orr	ip, ip, r1, lsl #16
   176c8:	adc	r6, r6, ip
   176cc:	str	r0, [sp, #52]	; 0x34
   176d0:	lsl	r1, lr, #1
   176d4:	adds	r0, r9, r4
   176d8:	ldr	r9, [sp, #88]	; 0x58
   176dc:	ldr	r4, [sp, #208]	; 0xd0
   176e0:	orr	r1, r1, r5, lsr #31
   176e4:	lsl	r5, r5, #1
   176e8:	orr	lr, r5, lr, lsr #31
   176ec:	adc	r4, r9, r4
   176f0:	adds	r9, r0, r1
   176f4:	adc	r4, r4, lr
   176f8:	ldr	r8, [sp, #140]	; 0x8c
   176fc:	str	r6, [sp, #56]	; 0x38
   17700:	ldr	r6, [sp, #168]	; 0xa8
   17704:	eor	r3, r3, r4
   17708:	ldr	r0, [sp, #144]	; 0x90
   1770c:	str	ip, [sp, #212]	; 0xd4
   17710:	eor	ip, r9, r6
   17714:	adds	r6, r8, r3
   17718:	adc	r0, r0, ip
   1771c:	eor	r1, r1, r6
   17720:	ldr	r5, [sp, #12]
   17724:	eor	lr, lr, r0
   17728:	adds	r9, r5, r9
   1772c:	lsr	r8, r1, #24
   17730:	ldr	r5, [sp, #16]
   17734:	orr	r8, r8, lr, lsl #8
   17738:	adc	r4, r5, r4
   1773c:	lsr	lr, lr, #24
   17740:	adds	r9, r9, r8
   17744:	orr	r5, lr, r1, lsl #8
   17748:	eor	r3, r3, r9
   1774c:	ldr	lr, [sp, #152]	; 0x98
   17750:	str	r9, [sp, #88]	; 0x58
   17754:	ldr	r9, [sp, #228]	; 0xe4
   17758:	adc	r4, r4, r5
   1775c:	eor	ip, ip, r4
   17760:	str	r5, [sp, #12]
   17764:	eor	r5, lr, r9
   17768:	ldr	r9, [sp, #264]	; 0x108
   1776c:	ldr	lr, [sp, #156]	; 0x9c
   17770:	lsr	r1, r3, #16
   17774:	eor	lr, lr, r9
   17778:	orr	r9, r1, ip, lsl #16
   1777c:	lsr	ip, ip, #16
   17780:	mov	sl, r9
   17784:	orr	r3, ip, r3, lsl #16
   17788:	ldr	r1, [sp, #116]	; 0x74
   1778c:	ldr	ip, [sp, #136]	; 0x88
   17790:	adds	r6, r6, sl
   17794:	adc	r0, r0, r3
   17798:	str	r4, [sp, #140]	; 0x8c
   1779c:	lsl	r9, r5, #1
   177a0:	ldr	r4, [sp, #160]	; 0xa0
   177a4:	str	r3, [sp, #152]	; 0x98
   177a8:	adds	r3, r1, ip
   177ac:	ldr	r1, [sp, #120]	; 0x78
   177b0:	orr	r9, r9, lr, lsr #31
   177b4:	lsl	lr, lr, #1
   177b8:	adc	ip, r1, r4
   177bc:	orr	lr, lr, r5, lsr #31
   177c0:	adds	r3, r3, r9
   177c4:	ldr	r1, [sp, #260]	; 0x104
   177c8:	adc	ip, ip, lr
   177cc:	str	sl, [sp, #144]	; 0x90
   177d0:	str	r0, [sp, #8]
   177d4:	eor	sl, ip, r1
   177d8:	ldr	r1, [sp, #256]	; 0x100
   177dc:	adds	r5, fp, sl
   177e0:	eor	r4, r3, r1
   177e4:	ldr	r1, [sp, #148]	; 0x94
   177e8:	eor	r9, r9, r5
   177ec:	adc	r1, r1, r4
   177f0:	ldr	r0, [sp, #68]	; 0x44
   177f4:	eor	lr, lr, r1
   177f8:	adds	r3, r0, r3
   177fc:	lsr	fp, r9, #24
   17800:	ldr	r0, [sp, #72]	; 0x48
   17804:	orr	fp, fp, lr, lsl #8
   17808:	lsr	lr, lr, #24
   1780c:	adc	ip, r0, ip
   17810:	adds	r3, r3, fp
   17814:	orr	r0, lr, r9, lsl #8
   17818:	eor	sl, sl, r3
   1781c:	adc	ip, ip, r0
   17820:	str	r3, [sp, #68]	; 0x44
   17824:	ldr	r3, [sp, #52]	; 0x34
   17828:	str	ip, [sp, #72]	; 0x48
   1782c:	eor	ip, ip, r4
   17830:	eor	r7, r7, r3
   17834:	lsr	r4, sl, #16
   17838:	ldr	r3, [sp, #56]	; 0x38
   1783c:	orr	r9, r4, ip, lsl #16
   17840:	ldr	lr, [sp, #28]
   17844:	str	r0, [sp, #116]	; 0x74
   17848:	lsr	ip, ip, #16
   1784c:	ldr	r0, [sp, #92]	; 0x5c
   17850:	adds	r5, r5, r9
   17854:	eor	r2, r2, r3
   17858:	orr	ip, ip, sl, lsl #16
   1785c:	adc	r1, r1, ip
   17860:	ldr	r4, [sp, #32]
   17864:	adds	r3, lr, r0
   17868:	str	fp, [sp, #16]
   1786c:	ldr	lr, [sp, #96]	; 0x60
   17870:	lsl	fp, r7, #1
   17874:	orr	fp, fp, r2, lsr #31
   17878:	lsl	r2, r2, #1
   1787c:	adc	lr, r4, lr
   17880:	orr	r2, r2, r7, lsr #31
   17884:	adds	r3, r3, fp
   17888:	adc	lr, lr, r2
   1788c:	eor	ip, ip, lr
   17890:	ldr	r0, [sp, #8]
   17894:	eor	r4, r3, r9
   17898:	adds	r9, r6, ip
   1789c:	adc	sl, r0, r4
   178a0:	eor	r7, r9, fp
   178a4:	eor	r2, r2, sl
   178a8:	ldr	r0, [sp, #108]	; 0x6c
   178ac:	lsr	fp, r7, #24
   178b0:	adds	r3, r0, r3
   178b4:	orr	r0, fp, r2, lsl #8
   178b8:	mov	fp, r0
   178bc:	lsr	r2, r2, #24
   178c0:	ldr	r0, [sp, #112]	; 0x70
   178c4:	orr	r2, r2, r7, lsl #8
   178c8:	adc	lr, r0, lr
   178cc:	mov	r0, r2
   178d0:	adds	r2, r3, fp
   178d4:	str	r2, [sp, #128]	; 0x80
   178d8:	adc	r2, lr, r0
   178dc:	str	r2, [sp, #132]	; 0x84
   178e0:	ldrd	r2, [sp, #128]	; 0x80
   178e4:	eor	r8, r8, r6
   178e8:	str	r0, [sp, #92]	; 0x5c
   178ec:	eor	ip, ip, r2
   178f0:	ldr	r6, [sp, #12]
   178f4:	eor	r4, r4, r3
   178f8:	ldr	r0, [sp, #8]
   178fc:	lsr	r3, ip, #16
   17900:	eor	r0, r0, r6
   17904:	orr	r6, r3, r4, lsl #16
   17908:	lsr	r4, r4, #16
   1790c:	orr	r2, r4, ip, lsl #16
   17910:	str	r6, [sp, #520]	; 0x208
   17914:	adds	r6, r9, r6
   17918:	str	r2, [sp, #524]	; 0x20c
   1791c:	adc	r2, sl, r2
   17920:	str	fp, [sp, #28]
   17924:	str	r2, [sp, #484]	; 0x1e4
   17928:	ldr	fp, [sp, #20]
   1792c:	ldr	r2, [sp, #80]	; 0x50
   17930:	str	r6, [sp, #12]
   17934:	lsl	r6, r8, #1
   17938:	adds	lr, fp, r2
   1793c:	orr	r6, r6, r0, lsr #31
   17940:	ldr	r3, [sp, #24]
   17944:	lsl	fp, r0, #1
   17948:	ldr	r0, [sp, #84]	; 0x54
   1794c:	orr	fp, fp, r8, lsr #31
   17950:	ldr	r9, [sp, #204]	; 0xcc
   17954:	adc	ip, r3, r0
   17958:	adds	lr, lr, r6
   1795c:	adc	ip, ip, fp
   17960:	ldr	r0, [sp, #172]	; 0xac
   17964:	eor	r2, ip, r9
   17968:	eor	r3, lr, r0
   1796c:	adds	r0, r5, r2
   17970:	adc	r4, r1, r3
   17974:	eor	r6, r6, r0
   17978:	ldr	r8, [sp, #36]	; 0x24
   1797c:	eor	fp, fp, r4
   17980:	lsr	r7, r6, #24
   17984:	adds	lr, r8, lr
   17988:	orr	r8, r7, fp, lsl #8
   1798c:	ldr	r7, [sp, #40]	; 0x28
   17990:	lsr	fp, fp, #24
   17994:	adc	ip, r7, ip
   17998:	orr	fp, fp, r6, lsl #8
   1799c:	adds	r7, lr, r8
   179a0:	ldr	r6, [sp, #16]
   179a4:	adc	lr, ip, fp
   179a8:	eor	r2, r2, r7
   179ac:	eor	ip, r5, r6
   179b0:	eor	r3, r3, lr
   179b4:	ldr	r6, [sp, #116]	; 0x74
   179b8:	lsr	r5, r2, #16
   179bc:	str	lr, [sp, #412]	; 0x19c
   179c0:	eor	lr, r1, r6
   179c4:	orr	r6, r5, r3, lsl #16
   179c8:	adds	r0, r0, r6
   179cc:	lsr	r3, r3, #16
   179d0:	str	r6, [sp, #496]	; 0x1f0
   179d4:	str	r0, [sp, #16]
   179d8:	ldr	r6, [sp, #88]	; 0x58
   179dc:	orr	r0, r3, r2, lsl #16
   179e0:	ldr	r1, [sp, #100]	; 0x64
   179e4:	lsl	r5, ip, #1
   179e8:	str	r0, [sp, #500]	; 0x1f4
   179ec:	adc	r0, r4, r0
   179f0:	str	r8, [sp, #20]
   179f4:	adds	r1, r1, r6
   179f8:	ldr	r8, [sp, #140]	; 0x8c
   179fc:	str	r0, [sp, #492]	; 0x1ec
   17a00:	lsl	r6, lr, #1
   17a04:	orr	r0, r5, lr, lsr #31
   17a08:	ldr	lr, [sp, #104]	; 0x68
   17a0c:	orr	r6, r6, ip, lsr #31
   17a10:	adc	r4, lr, r8
   17a14:	ldr	r9, [sp, #176]	; 0xb0
   17a18:	adds	r1, r1, r0
   17a1c:	ldr	lr, [sp, #212]	; 0xd4
   17a20:	adc	r4, r4, r6
   17a24:	ldr	r8, [sp, #124]	; 0x7c
   17a28:	eor	ip, r1, r9
   17a2c:	eor	lr, r4, lr
   17a30:	ldr	r9, [sp, #164]	; 0xa4
   17a34:	adds	r3, r8, lr
   17a38:	adc	r2, r9, ip
   17a3c:	eor	r5, r3, r0
   17a40:	str	r7, [sp, #32]
   17a44:	ldr	r7, [sp, #76]	; 0x4c
   17a48:	eor	r6, r6, r2
   17a4c:	adds	r1, r7, r1
   17a50:	lsr	r0, r5, #24
   17a54:	ldr	r7, [sp, #4]
   17a58:	orr	r0, r0, r6, lsl #8
   17a5c:	lsr	r6, r6, #24
   17a60:	orr	r6, r6, r5, lsl #8
   17a64:	adc	r4, r7, r4
   17a68:	adds	r7, r1, r0
   17a6c:	adc	r4, r4, r6
   17a70:	eor	lr, lr, r7
   17a74:	eor	ip, ip, r4
   17a78:	ldr	r5, [sp, #200]	; 0xc8
   17a7c:	str	r4, [sp, #420]	; 0x1a4
   17a80:	lsr	r4, lr, #16
   17a84:	str	r7, [sp, #36]	; 0x24
   17a88:	eor	r7, r9, r5
   17a8c:	orr	r9, r4, ip, lsl #16
   17a90:	lsr	ip, ip, #16
   17a94:	adds	r3, r3, r9
   17a98:	ldr	r1, [sp, #180]	; 0xb4
   17a9c:	str	r9, [sp, #504]	; 0x1f8
   17aa0:	orr	r9, ip, lr, lsl #16
   17aa4:	adc	r2, r2, r9
   17aa8:	eor	r1, r8, r1
   17aac:	ldr	ip, [sp, #60]	; 0x3c
   17ab0:	str	r3, [sp, #4]
   17ab4:	str	r9, [sp, #508]	; 0x1fc
   17ab8:	str	r2, [sp, #8]
   17abc:	ldr	r5, [sp, #68]	; 0x44
   17ac0:	lsl	sl, r1, #1
   17ac4:	adds	r8, ip, r5
   17ac8:	ldr	ip, [sp, #64]	; 0x40
   17acc:	ldr	r5, [sp, #72]	; 0x48
   17ad0:	orr	sl, sl, r7, lsr #31
   17ad4:	lsl	r4, r7, #1
   17ad8:	adc	r9, ip, r5
   17adc:	orr	r4, r4, r1, lsr #31
   17ae0:	adds	r8, r8, sl
   17ae4:	ldr	lr, [sp, #152]	; 0x98
   17ae8:	adc	r9, r9, r4
   17aec:	ldr	r1, [sp, #52]	; 0x34
   17af0:	eor	r5, r9, lr
   17af4:	ldr	ip, [sp, #144]	; 0x90
   17af8:	adds	r7, r1, r5
   17afc:	ldr	r1, [sp, #56]	; 0x38
   17b00:	eor	ip, r8, ip
   17b04:	adc	lr, r1, ip
   17b08:	eor	sl, sl, r7
   17b0c:	ldr	r3, [sp, #44]	; 0x2c
   17b10:	eor	r4, r4, lr
   17b14:	adds	r8, r3, r8
   17b18:	lsr	r1, sl, #24
   17b1c:	ldr	r3, [sp, #48]	; 0x30
   17b20:	orr	r1, r1, r4, lsl #8
   17b24:	lsr	r4, r4, #24
   17b28:	adc	r9, r3, r9
   17b2c:	orr	r4, r4, sl, lsl #8
   17b30:	adds	sl, r8, r1
   17b34:	adc	r9, r9, r4
   17b38:	eor	r5, r5, sl
   17b3c:	eor	ip, ip, r9
   17b40:	lsr	r8, r5, #16
   17b44:	orr	r3, r8, ip, lsl #16
   17b48:	lsr	ip, ip, #16
   17b4c:	adds	r7, r7, r3
   17b50:	orr	r5, ip, r5, lsl #16
   17b54:	adc	lr, lr, r5
   17b58:	str	lr, [sp, #476]	; 0x1dc
   17b5c:	str	r3, [sp, #512]	; 0x200
   17b60:	ldr	lr, [sp, #484]	; 0x1e4
   17b64:	ldr	r3, [sp, #92]	; 0x5c
   17b68:	ldr	ip, [sp, #12]
   17b6c:	eor	lr, lr, r3
   17b70:	ldr	r3, [sp, #28]
   17b74:	ldr	r8, [sp, #20]
   17b78:	str	sl, [sp, #40]	; 0x28
   17b7c:	eor	sl, ip, r3
   17b80:	ldr	ip, [sp, #16]
   17b84:	ldr	r2, [sp, #492]	; 0x1ec
   17b88:	ldr	r3, [sp, #4]
   17b8c:	eor	ip, ip, r8
   17b90:	ldr	r8, [sp, #476]	; 0x1dc
   17b94:	eor	fp, fp, r2
   17b98:	eor	r0, r0, r3
   17b9c:	ldr	r2, [sp, #8]
   17ba0:	eor	r4, r4, r8
   17ba4:	eor	r1, r1, r7
   17ba8:	lsl	r8, sl, #1
   17bac:	eor	r6, r6, r2
   17bb0:	str	lr, [sp, #28]
   17bb4:	mov	r2, r8
   17bb8:	lsl	r8, lr, #1
   17bbc:	lsl	lr, r0, #1
   17bc0:	str	lr, [sp, #20]
   17bc4:	lsl	lr, r1, #1
   17bc8:	str	lr, [sp, #24]
   17bcc:	ldr	lr, [sp, #28]
   17bd0:	mov	r3, r8
   17bd4:	lsl	r8, ip, #1
   17bd8:	orr	lr, r2, lr, lsr #31
   17bdc:	orr	r8, r8, fp, lsr #31
   17be0:	lsl	r2, fp, #1
   17be4:	lsl	fp, r6, #1
   17be8:	orr	r0, fp, r0, lsr #31
   17bec:	ldr	fp, [sp, #20]
   17bf0:	orr	sl, r3, sl, lsr #31
   17bf4:	orr	r6, fp, r6, lsr #31
   17bf8:	lsl	fp, r4, #1
   17bfc:	orr	r1, fp, r1, lsr #31
   17c00:	ldr	fp, [sp, #24]
   17c04:	orr	ip, r2, ip, lsr #31
   17c08:	ldrd	r2, [sp, #128]	; 0x80
   17c0c:	orr	r4, fp, r4, lsr #31
   17c10:	add	fp, sp, #400	; 0x190
   17c14:	strd	r2, [fp]
   17c18:	ldr	r3, [sp, #12]
   17c1c:	str	r3, [sp, #480]	; 0x1e0
   17c20:	ldr	r3, [sp, #32]
   17c24:	str	sl, [sp, #444]	; 0x1bc
   17c28:	str	r3, [sp, #408]	; 0x198
   17c2c:	ldr	r3, [sp, #16]
   17c30:	ldr	r2, [sp, #8]
   17c34:	str	r3, [sp, #488]	; 0x1e8
   17c38:	ldr	r3, [sp, #36]	; 0x24
   17c3c:	ldr	sl, [sp, #40]	; 0x28
   17c40:	str	r3, [sp, #416]	; 0x1a0
   17c44:	ldr	r3, [sp, #4]
   17c48:	str	lr, [sp, #440]	; 0x1b8
   17c4c:	str	ip, [sp, #452]	; 0x1c4
   17c50:	str	r6, [sp, #456]	; 0x1c8
   17c54:	str	r5, [sp, #516]	; 0x204
   17c58:	str	r1, [sp, #436]	; 0x1b4
   17c5c:	str	r4, [sp, #432]	; 0x1b0
   17c60:	str	r2, [sp, #468]	; 0x1d4
   17c64:	str	r3, [sp, #464]	; 0x1d0
   17c68:	str	r8, [sp, #448]	; 0x1c0
   17c6c:	str	r0, [sp, #460]	; 0x1cc
   17c70:	str	r9, [sp, #428]	; 0x1ac
   17c74:	str	sl, [sp, #424]	; 0x1a8
   17c78:	str	r7, [sp, #472]	; 0x1d8
   17c7c:	ldr	r6, [sp, #184]	; 0xb8
   17c80:	ldrd	r4, [sp, #128]	; 0x80
   17c84:	ldr	lr, [sp, #188]	; 0xbc
   17c88:	ldr	r1, [sp, #192]	; 0xc0
   17c8c:	mov	ip, r3
   17c90:	b	17ca0 <__assert_fail@plt+0x6ab8>
   17c94:	ldrd	r4, [lr, #8]!
   17c98:	ldr	ip, [lr, #64]	; 0x40
   17c9c:	ldr	r2, [lr, #68]	; 0x44
   17ca0:	ldr	r0, [r1, #8]!
   17ca4:	eor	ip, ip, r4
   17ca8:	eor	r2, r2, r5
   17cac:	ldr	r3, [r1, #4]
   17cb0:	eor	r0, r0, ip
   17cb4:	eor	r3, r3, r2
   17cb8:	cmp	r6, r1
   17cbc:	stm	r1, {r0, r3}
   17cc0:	bne	17c94 <__assert_fail@plt+0x6aac>
   17cc4:	ldr	r3, [pc, #24]	; 17ce4 <__assert_fail@plt+0x6afc>
   17cc8:	ldr	r2, [sp, #532]	; 0x214
   17ccc:	ldr	r3, [r3]
   17cd0:	cmp	r2, r3
   17cd4:	bne	17ce0 <__assert_fail@plt+0x6af8>
   17cd8:	add	sp, sp, #540	; 0x21c
   17cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ce0:	bl	10fd8 <__stack_chk_fail@plt>
   17ce4:	andeq	lr, r2, r8, lsl #30
   17ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cec:	add	fp, r0, #96	; 0x60
   17cf0:	ldr	sl, [r0, #224]	; 0xe0
   17cf4:	mov	r4, r0
   17cf8:	rsb	r5, sl, #128	; 0x80
   17cfc:	cmp	r5, r2
   17d00:	sub	sp, sp, #20
   17d04:	mov	r8, r2
   17d08:	add	r0, fp, sl
   17d0c:	mov	r9, r1
   17d10:	bcc	17d34 <__assert_fail@plt+0x6b4c>
   17d14:	mov	r2, r8
   17d18:	mov	r1, r9
   17d1c:	bl	10f90 <memcpy@plt>
   17d20:	ldr	r3, [r4, #224]	; 0xe0
   17d24:	add	r8, r3, r8
   17d28:	str	r8, [r4, #224]	; 0xe0
   17d2c:	add	sp, sp, #20
   17d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d34:	mov	r3, #0
   17d38:	mov	r2, r5
   17d3c:	str	r3, [r4, #224]	; 0xe0
   17d40:	bl	10f90 <memcpy@plt>
   17d44:	ldr	r3, [r4, #64]	; 0x40
   17d48:	ldr	r2, [r4, #68]	; 0x44
   17d4c:	adds	r3, r3, #128	; 0x80
   17d50:	str	r3, [sp]
   17d54:	adc	r3, r2, #0
   17d58:	str	r3, [sp, #4]
   17d5c:	ldrd	r0, [sp]
   17d60:	ldrd	r2, [r4, #72]	; 0x48
   17d64:	sub	r8, r8, #128	; 0x80
   17d68:	cmp	r1, #0
   17d6c:	cmpeq	r0, #127	; 0x7f
   17d70:	movls	r1, #1
   17d74:	movhi	r1, #0
   17d78:	adds	r6, r2, r1
   17d7c:	adc	r7, r3, #0
   17d80:	ldrd	r0, [sp]
   17d84:	mov	r2, r6
   17d88:	mov	r3, r7
   17d8c:	strd	r0, [r4, #64]	; 0x40
   17d90:	strd	r2, [r4, #72]	; 0x48
   17d94:	mov	r1, fp
   17d98:	mov	r0, r4
   17d9c:	add	r8, sl, r8
   17da0:	bl	12f68 <__assert_fail@plt+0x1d80>
   17da4:	cmp	r8, #128	; 0x80
   17da8:	add	r5, r9, r5
   17dac:	bls	17e3c <__assert_fail@plt+0x6c54>
   17db0:	sub	sl, r8, #129	; 0x81
   17db4:	str	fp, [sp, #8]
   17db8:	lsr	sl, sl, #7
   17dbc:	add	r9, sl, #1
   17dc0:	str	sl, [sp]
   17dc4:	add	r9, r5, r9, lsl #7
   17dc8:	ldr	r3, [r4, #64]	; 0x40
   17dcc:	ldr	r2, [r4, #68]	; 0x44
   17dd0:	adds	r6, r3, #128	; 0x80
   17dd4:	adc	r7, r2, #0
   17dd8:	cmp	r7, #0
   17ddc:	ldrd	r2, [r4, #72]	; 0x48
   17de0:	cmpeq	r6, #127	; 0x7f
   17de4:	movls	r1, #1
   17de8:	movhi	r1, #0
   17dec:	adds	sl, r2, r1
   17df0:	adc	fp, r3, #0
   17df4:	mov	r2, sl
   17df8:	mov	r3, fp
   17dfc:	mov	r1, r5
   17e00:	strd	r6, [r4, #64]	; 0x40
   17e04:	strd	r2, [r4, #72]	; 0x48
   17e08:	mov	r0, r4
   17e0c:	add	r5, r5, #128	; 0x80
   17e10:	bl	12f68 <__assert_fail@plt+0x1d80>
   17e14:	cmp	r9, r5
   17e18:	bne	17dc8 <__assert_fail@plt+0x6be0>
   17e1c:	ldr	sl, [sp]
   17e20:	ldr	fp, [sp, #8]
   17e24:	ldr	r0, [r4, #224]	; 0xe0
   17e28:	rsb	sl, sl, sl, lsl #25
   17e2c:	sub	r8, r8, #128	; 0x80
   17e30:	add	r8, r8, sl, lsl #7
   17e34:	add	r0, fp, r0
   17e38:	b	17d14 <__assert_fail@plt+0x6b2c>
   17e3c:	ldr	r0, [r4, #224]	; 0xe0
   17e40:	mov	r9, r5
   17e44:	add	r0, fp, r0
   17e48:	b	17d14 <__assert_fail@plt+0x6b2c>
   17e4c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e50:	mov	r2, #240	; 0xf0
   17e54:	mov	r4, r0
   17e58:	mov	r5, r1
   17e5c:	mov	r1, #0
   17e60:	bl	1111c <memset@plt>
   17e64:	sub	r0, r4, #8
   17e68:	ldr	r2, [pc, #152]	; 17f08 <__assert_fail@plt+0x6d20>
   17e6c:	add	r7, pc, #140	; 0x8c
   17e70:	ldrd	r6, [r7]
   17e74:	mov	r3, r0
   17e78:	add	ip, r4, #56	; 0x38
   17e7c:	b	17e84 <__assert_fail@plt+0x6c9c>
   17e80:	ldrd	r6, [r2, #8]!
   17e84:	strd	r6, [r3, #8]!
   17e88:	cmp	r3, ip
   17e8c:	bne	17e80 <__assert_fail@plt+0x6c98>
   17e90:	mov	r3, r5
   17e94:	ldrb	fp, [r3, #1]
   17e98:	ldrb	sl, [r3, #5]
   17e9c:	ldrb	r8, [r3, #6]
   17ea0:	ldrb	r1, [r3]
   17ea4:	ldrb	r9, [r3, #2]
   17ea8:	ldrb	r2, [r3, #4]
   17eac:	ldr	lr, [r0, #8]!
   17eb0:	ldrb	r7, [r3, #3]
   17eb4:	ldrb	r6, [r3, #7]
   17eb8:	orr	r1, r1, fp, lsl #8
   17ebc:	orr	r2, r2, sl, lsl #8
   17ec0:	orr	r2, r2, r8, lsl #16
   17ec4:	orr	r1, r1, r9, lsl #16
   17ec8:	ldr	r8, [r0, #4]
   17ecc:	orr	r1, r1, r7, lsl #24
   17ed0:	orr	r2, r2, r6, lsl #24
   17ed4:	eor	r1, r1, lr
   17ed8:	eor	r2, r2, r8
   17edc:	cmp	r0, ip
   17ee0:	str	r1, [r0]
   17ee4:	add	r3, r3, #8
   17ee8:	str	r2, [r0, #4]
   17eec:	bne	17e94 <__assert_fail@plt+0x6cac>
   17ef0:	ldrb	r3, [r5]
   17ef4:	mov	r0, #0
   17ef8:	str	r3, [r4, #228]	; 0xe4
   17efc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f00:	vtbl.8	d12, {d12-d13}, d8
   17f04:	bvs	2918a8 <optarg@@GLIBC_2.4+0x262720>
   17f08:	andeq	sp, r1, r8, ror #23
   17f0c:	push	{r4, lr}
   17f10:	sub	r2, r1, #1
   17f14:	ldr	r4, [pc, #144]	; 17fac <__assert_fail@plt+0x6dc4>
   17f18:	sub	sp, sp, #72	; 0x48
   17f1c:	cmp	r2, #63	; 0x3f
   17f20:	ldr	r3, [r4]
   17f24:	str	r3, [sp, #68]	; 0x44
   17f28:	bhi	17fa0 <__assert_fail@plt+0x6db8>
   17f2c:	ldr	r3, [pc, #124]	; 17fb0 <__assert_fail@plt+0x6dc8>
   17f30:	strb	r1, [sp, #4]
   17f34:	strh	r3, [sp, #6]
   17f38:	add	r1, sp, #4
   17f3c:	mov	r3, #0
   17f40:	str	r3, [sp, #26]
   17f44:	strb	r3, [sp, #5]
   17f48:	str	r3, [sp, #8]
   17f4c:	str	r3, [sp, #12]
   17f50:	str	r3, [sp, #16]
   17f54:	strh	r3, [sp, #20]
   17f58:	str	r3, [sp, #22]
   17f5c:	str	r3, [sp, #30]
   17f60:	strh	r3, [sp, #34]	; 0x22
   17f64:	str	r3, [sp, #36]	; 0x24
   17f68:	str	r3, [sp, #52]	; 0x34
   17f6c:	str	r3, [sp, #40]	; 0x28
   17f70:	str	r3, [sp, #44]	; 0x2c
   17f74:	str	r3, [sp, #48]	; 0x30
   17f78:	str	r3, [sp, #56]	; 0x38
   17f7c:	str	r3, [sp, #60]	; 0x3c
   17f80:	str	r3, [sp, #64]	; 0x40
   17f84:	bl	17e4c <__assert_fail@plt+0x6c64>
   17f88:	ldr	r2, [sp, #68]	; 0x44
   17f8c:	ldr	r3, [r4]
   17f90:	cmp	r2, r3
   17f94:	bne	17fa8 <__assert_fail@plt+0x6dc0>
   17f98:	add	sp, sp, #72	; 0x48
   17f9c:	pop	{r4, pc}
   17fa0:	mvn	r0, #0
   17fa4:	b	17f88 <__assert_fail@plt+0x6da0>
   17fa8:	bl	10fd8 <__stack_chk_fail@plt>
   17fac:	andeq	lr, r2, r8, lsl #30
   17fb0:	andeq	r0, r0, r1, lsl #2
   17fb4:	push	{r4, r5, r6, r7, r8, lr}
   17fb8:	sub	lr, r1, #1
   17fbc:	ldr	r6, [pc, #272]	; 180d4 <__assert_fail@plt+0x6eec>
   17fc0:	sub	sp, sp, #200	; 0xc8
   17fc4:	cmp	lr, #63	; 0x3f
   17fc8:	ldr	ip, [r6]
   17fcc:	str	ip, [sp, #196]	; 0xc4
   17fd0:	bhi	180c8 <__assert_fail@plt+0x6ee0>
   17fd4:	mov	r7, r2
   17fd8:	sub	r4, r3, #1
   17fdc:	clz	r2, r2
   17fe0:	lsr	r2, r2, #5
   17fe4:	cmp	r4, #63	; 0x3f
   17fe8:	movls	r4, r2
   17fec:	orrhi	r4, r2, #1
   17ff0:	cmp	r4, #0
   17ff4:	mov	r5, r3
   17ff8:	bne	180c8 <__assert_fail@plt+0x6ee0>
   17ffc:	ldr	r3, [pc, #212]	; 180d8 <__assert_fail@plt+0x6ef0>
   18000:	strb	r1, [sp, #4]
   18004:	add	r1, sp, #4
   18008:	mov	r8, r0
   1800c:	strb	r5, [sp, #5]
   18010:	str	r4, [sp, #8]
   18014:	str	r4, [sp, #12]
   18018:	str	r4, [sp, #16]
   1801c:	strh	r4, [sp, #20]
   18020:	str	r4, [sp, #22]
   18024:	str	r4, [sp, #36]	; 0x24
   18028:	str	r4, [sp, #52]	; 0x34
   1802c:	strh	r3, [sp, #6]
   18030:	str	r4, [sp, #26]
   18034:	str	r4, [sp, #30]
   18038:	strh	r4, [sp, #34]	; 0x22
   1803c:	str	r4, [sp, #40]	; 0x28
   18040:	str	r4, [sp, #44]	; 0x2c
   18044:	str	r4, [sp, #48]	; 0x30
   18048:	str	r4, [sp, #56]	; 0x38
   1804c:	str	r4, [sp, #60]	; 0x3c
   18050:	str	r4, [sp, #64]	; 0x40
   18054:	bl	17e4c <__assert_fail@plt+0x6c64>
   18058:	cmp	r0, #0
   1805c:	blt	180c8 <__assert_fail@plt+0x6ee0>
   18060:	mov	r2, #128	; 0x80
   18064:	mov	r1, r4
   18068:	add	r0, sp, #68	; 0x44
   1806c:	bl	1111c <memset@plt>
   18070:	mov	r3, #128	; 0x80
   18074:	mov	r2, r5
   18078:	mov	r1, r7
   1807c:	add	r0, sp, #68	; 0x44
   18080:	bl	11008 <__memcpy_chk@plt>
   18084:	mov	r0, r8
   18088:	add	r1, sp, #68	; 0x44
   1808c:	mov	r2, #128	; 0x80
   18090:	bl	17ce8 <__assert_fail@plt+0x6b00>
   18094:	ldr	r3, [pc, #64]	; 180dc <__assert_fail@plt+0x6ef4>
   18098:	add	r0, sp, #68	; 0x44
   1809c:	mov	r2, #128	; 0x80
   180a0:	ldr	r3, [r3]
   180a4:	mov	r1, r4
   180a8:	blx	r3
   180ac:	mov	r0, r4
   180b0:	ldr	r2, [sp, #196]	; 0xc4
   180b4:	ldr	r3, [r6]
   180b8:	cmp	r2, r3
   180bc:	bne	180d0 <__assert_fail@plt+0x6ee8>
   180c0:	add	sp, sp, #200	; 0xc8
   180c4:	pop	{r4, r5, r6, r7, r8, pc}
   180c8:	mvn	r0, #0
   180cc:	b	180b0 <__assert_fail@plt+0x6ec8>
   180d0:	bl	10fd8 <__stack_chk_fail@plt>
   180d4:	andeq	lr, r2, r8, lsl #30
   180d8:	andeq	r0, r0, r1, lsl #2
   180dc:	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
   180e0:	cmp	r2, #0
   180e4:	beq	180f8 <__assert_fail@plt+0x6f10>
   180e8:	push	{r4, lr}
   180ec:	bl	17ce8 <__assert_fail@plt+0x6b00>
   180f0:	mov	r0, #0
   180f4:	pop	{r4, pc}
   180f8:	mov	r0, #0
   180fc:	bx	lr
   18100:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18104:	sub	sp, sp, #80	; 0x50
   18108:	ldr	r6, [pc, #352]	; 18270 <__assert_fail@plt+0x7088>
   1810c:	mov	r7, r1
   18110:	mov	sl, r0
   18114:	ldr	r3, [r6]
   18118:	mov	r4, r2
   1811c:	add	r0, sp, #12
   18120:	mov	r2, #64	; 0x40
   18124:	mov	r1, #0
   18128:	str	r3, [sp, #76]	; 0x4c
   1812c:	bl	1111c <memset@plt>
   18130:	cmp	r7, #0
   18134:	beq	18264 <__assert_fail@plt+0x707c>
   18138:	ldr	r3, [sl, #228]	; 0xe4
   1813c:	cmp	r3, r4
   18140:	bhi	18264 <__assert_fail@plt+0x707c>
   18144:	ldrd	r2, [sl, #80]	; 0x50
   18148:	orrs	r3, r2, r3
   1814c:	bne	18264 <__assert_fail@plt+0x707c>
   18150:	ldrd	r0, [sl, #72]	; 0x48
   18154:	ldr	r2, [sl, #224]	; 0xe0
   18158:	mov	r5, #0
   1815c:	strd	r0, [sp]
   18160:	ldrd	r0, [sl, #64]	; 0x40
   18164:	ldrb	r3, [sl, #232]	; 0xe8
   18168:	add	r4, sl, #96	; 0x60
   1816c:	adds	r8, r2, r0
   18170:	adcs	r9, r5, r1
   18174:	ldrd	r0, [sp]
   18178:	movcs	ip, #1
   1817c:	movcc	ip, #0
   18180:	adds	r0, r0, ip
   18184:	adc	r1, r1, #0
   18188:	cmp	r3, #0
   1818c:	strd	r0, [sl, #72]	; 0x48
   18190:	mvnne	r0, #0
   18194:	mvnne	r1, #0
   18198:	strd	r8, [sl, #64]	; 0x40
   1819c:	strdne	r0, [sl, #88]	; 0x58
   181a0:	mvn	r0, #0
   181a4:	mvn	r1, #0
   181a8:	add	r8, sl, #56	; 0x38
   181ac:	strd	r0, [sl, #80]	; 0x50
   181b0:	add	r0, r4, r2
   181b4:	mov	r1, #0
   181b8:	rsb	r2, r2, #128	; 0x80
   181bc:	bl	1111c <memset@plt>
   181c0:	mov	r0, sl
   181c4:	mov	r1, r4
   181c8:	bl	12f68 <__assert_fail@plt+0x1d80>
   181cc:	sub	r0, sl, #8
   181d0:	add	r3, sp, #12
   181d4:	ldr	r2, [r0, #8]!
   181d8:	add	r3, r3, #8
   181dc:	strb	r2, [r3, #-8]
   181e0:	ldr	r1, [r0, #4]
   181e4:	lsr	lr, r2, #8
   181e8:	lsr	ip, r2, #16
   181ec:	lsr	r5, r1, #8
   181f0:	lsr	r4, r1, #16
   181f4:	strb	r1, [r3, #-4]
   181f8:	lsr	r2, r2, #24
   181fc:	lsr	r1, r1, #24
   18200:	cmp	r0, r8
   18204:	strb	r5, [r3, #-3]
   18208:	strb	r4, [r3, #-2]
   1820c:	strb	r1, [r3, #-1]
   18210:	strb	lr, [r3, #-7]
   18214:	strb	ip, [r3, #-6]
   18218:	strb	r2, [r3, #-5]
   1821c:	bne	181d4 <__assert_fail@plt+0x6fec>
   18220:	ldr	r2, [sl, #228]	; 0xe4
   18224:	add	r1, sp, #12
   18228:	mov	r0, r7
   1822c:	bl	10f90 <memcpy@plt>
   18230:	ldr	r3, [pc, #60]	; 18274 <__assert_fail@plt+0x708c>
   18234:	add	r0, sp, #12
   18238:	mov	r2, #64	; 0x40
   1823c:	ldr	r3, [r3]
   18240:	mov	r1, #0
   18244:	blx	r3
   18248:	mov	r0, #0
   1824c:	ldr	r2, [sp, #76]	; 0x4c
   18250:	ldr	r3, [r6]
   18254:	cmp	r2, r3
   18258:	bne	1826c <__assert_fail@plt+0x7084>
   1825c:	add	sp, sp, #80	; 0x50
   18260:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18264:	mvn	r0, #0
   18268:	b	1824c <__assert_fail@plt+0x7064>
   1826c:	bl	10fd8 <__stack_chk_fail@plt>
   18270:	andeq	lr, r2, r8, lsl #30
   18274:	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
   18278:	push	{r4, r5, r6, r7, r8, r9, lr}
   1827c:	adds	ip, r3, #0
   18280:	ldr	r4, [pc, #220]	; 18364 <__assert_fail@plt+0x717c>
   18284:	movne	ip, #1
   18288:	cmp	r2, #0
   1828c:	movne	ip, #0
   18290:	cmp	r0, #0
   18294:	sub	sp, sp, #252	; 0xfc
   18298:	moveq	ip, #1
   1829c:	ldr	lr, [r4]
   182a0:	cmp	ip, #0
   182a4:	mov	r8, r2
   182a8:	mov	r6, r3
   182ac:	str	lr, [sp, #244]	; 0xf4
   182b0:	ldr	r2, [sp, #280]	; 0x118
   182b4:	ldr	r3, [sp, #284]	; 0x11c
   182b8:	bne	18358 <__assert_fail@plt+0x7170>
   182bc:	mov	r7, r0
   182c0:	adds	r0, r3, #0
   182c4:	movne	r0, #1
   182c8:	cmp	r2, #0
   182cc:	movne	r0, #0
   182d0:	cmp	r0, #0
   182d4:	bne	18358 <__assert_fail@plt+0x7170>
   182d8:	sub	r0, r1, #1
   182dc:	cmp	r3, #64	; 0x40
   182e0:	cmpls	r0, #63	; 0x3f
   182e4:	mov	r5, r1
   182e8:	bhi	18358 <__assert_fail@plt+0x7170>
   182ec:	mov	r9, sp
   182f0:	cmp	r3, #0
   182f4:	mov	r0, r9
   182f8:	bne	1834c <__assert_fail@plt+0x7164>
   182fc:	bl	17f0c <__assert_fail@plt+0x6d24>
   18300:	cmp	r0, #0
   18304:	blt	18358 <__assert_fail@plt+0x7170>
   18308:	cmp	r6, #0
   1830c:	beq	18320 <__assert_fail@plt+0x7138>
   18310:	mov	r2, r6
   18314:	mov	r1, r8
   18318:	mov	r0, r9
   1831c:	bl	17ce8 <__assert_fail@plt+0x6b00>
   18320:	mov	r2, r5
   18324:	mov	r1, r7
   18328:	mov	r0, r9
   1832c:	bl	18100 <__assert_fail@plt+0x6f18>
   18330:	mov	r0, #0
   18334:	ldr	r2, [sp, #244]	; 0xf4
   18338:	ldr	r3, [r4]
   1833c:	cmp	r2, r3
   18340:	bne	18360 <__assert_fail@plt+0x7178>
   18344:	add	sp, sp, #252	; 0xfc
   18348:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1834c:	bl	17fb4 <__assert_fail@plt+0x6dcc>
   18350:	cmp	r0, #0
   18354:	bge	18308 <__assert_fail@plt+0x7120>
   18358:	mvn	r0, #0
   1835c:	b	18334 <__assert_fail@plt+0x714c>
   18360:	bl	10fd8 <__stack_chk_fail@plt>
   18364:	andeq	lr, r2, r8, lsl #30
   18368:	b	18278 <__assert_fail@plt+0x7090>
   1836c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18370:	sub	sp, sp, #252	; 0xfc
   18374:	ldr	r7, [pc, #240]	; 1846c <__assert_fail@plt+0x7284>
   18378:	mov	r5, r0
   1837c:	mov	r0, #32768	; 0x8000
   18380:	ldr	r3, [r7]
   18384:	mov	r9, r1
   18388:	mov	r8, r2
   1838c:	str	r3, [sp, #244]	; 0xf4
   18390:	bl	11068 <malloc@plt>
   18394:	subs	r6, r0, #0
   18398:	beq	18460 <__assert_fail@plt+0x7278>
   1839c:	mov	r0, sp
   183a0:	mov	r1, r8
   183a4:	bl	17f0c <__assert_fail@plt+0x6d24>
   183a8:	mov	r4, #0
   183ac:	b	183c8 <__assert_fail@plt+0x71e0>
   183b0:	cmp	r0, #0
   183b4:	mov	r0, r5
   183b8:	beq	183fc <__assert_fail@plt+0x7214>
   183bc:	bl	110c8 <feof@plt>
   183c0:	cmp	r0, #0
   183c4:	bne	1840c <__assert_fail@plt+0x7224>
   183c8:	rsb	r2, r4, #32768	; 0x8000
   183cc:	add	r0, r6, r4
   183d0:	mov	r3, r5
   183d4:	mov	r1, #1
   183d8:	bl	11038 <fread@plt>
   183dc:	add	r4, r4, r0
   183e0:	cmp	r4, #32768	; 0x8000
   183e4:	bne	183b0 <__assert_fail@plt+0x71c8>
   183e8:	mov	r2, r4
   183ec:	mov	r1, r6
   183f0:	mov	r0, sp
   183f4:	bl	180e0 <__assert_fail@plt+0x6ef8>
   183f8:	b	183a8 <__assert_fail@plt+0x71c0>
   183fc:	bl	10f78 <ferror@plt>
   18400:	cmp	r0, #0
   18404:	mvnne	r4, #0
   18408:	bne	18428 <__assert_fail@plt+0x7240>
   1840c:	cmp	r4, #0
   18410:	bne	1844c <__assert_fail@plt+0x7264>
   18414:	mov	r2, r8
   18418:	mov	r1, r9
   1841c:	mov	r0, sp
   18420:	bl	18100 <__assert_fail@plt+0x6f18>
   18424:	mov	r4, #0
   18428:	mov	r0, r6
   1842c:	bl	10f6c <free@plt>
   18430:	ldr	r2, [sp, #244]	; 0xf4
   18434:	ldr	r3, [r7]
   18438:	mov	r0, r4
   1843c:	cmp	r2, r3
   18440:	bne	18468 <__assert_fail@plt+0x7280>
   18444:	add	sp, sp, #252	; 0xfc
   18448:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1844c:	mov	r2, r4
   18450:	mov	r1, r6
   18454:	mov	r0, sp
   18458:	bl	180e0 <__assert_fail@plt+0x6ef8>
   1845c:	b	18414 <__assert_fail@plt+0x722c>
   18460:	mvn	r4, #0
   18464:	b	18430 <__assert_fail@plt+0x7248>
   18468:	bl	10fd8 <__stack_chk_fail@plt>
   1846c:	andeq	lr, r2, r8, lsl #30
   18470:	mov	r0, #1
   18474:	b	12b84 <__assert_fail@plt+0x199c>
   18478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1847c:	mov	r5, r1
   18480:	sub	sp, sp, #12
   18484:	mov	r4, r2
   18488:	str	r2, [sp]
   1848c:	mov	r7, r3
   18490:	mov	sl, r0
   18494:	bl	110e0 <strlen@plt>
   18498:	ldr	fp, [r5]
   1849c:	cmp	fp, #0
   184a0:	beq	18564 <__assert_fail@plt+0x737c>
   184a4:	mov	r6, #0
   184a8:	mov	r8, r0
   184ac:	str	r6, [sp, #4]
   184b0:	mvn	r9, #0
   184b4:	b	184e0 <__assert_fail@plt+0x72f8>
   184b8:	bl	10fc0 <memcmp@plt>
   184bc:	ldr	r3, [sp, #4]
   184c0:	cmp	r0, #0
   184c4:	movne	r3, #1
   184c8:	str	r3, [sp, #4]
   184cc:	ldr	fp, [r5, #4]!
   184d0:	add	r6, r6, #1
   184d4:	cmp	fp, #0
   184d8:	add	r4, r4, r7
   184dc:	beq	1853c <__assert_fail@plt+0x7354>
   184e0:	mov	r2, r8
   184e4:	mov	r1, sl
   184e8:	mov	r0, fp
   184ec:	bl	111b8 <strncmp@plt>
   184f0:	cmp	r0, #0
   184f4:	mov	r0, fp
   184f8:	bne	184cc <__assert_fail@plt+0x72e4>
   184fc:	bl	110e0 <strlen@plt>
   18500:	ldr	r3, [sp]
   18504:	mov	r2, r7
   18508:	mov	r1, r4
   1850c:	cmp	r0, r8
   18510:	mla	r0, r7, r9, r3
   18514:	beq	18554 <__assert_fail@plt+0x736c>
   18518:	cmn	r9, #1
   1851c:	moveq	r9, r6
   18520:	beq	184cc <__assert_fail@plt+0x72e4>
   18524:	ldr	r3, [sp]
   18528:	cmp	r3, #0
   1852c:	bne	184b8 <__assert_fail@plt+0x72d0>
   18530:	mov	r3, #1
   18534:	str	r3, [sp, #4]
   18538:	b	184cc <__assert_fail@plt+0x72e4>
   1853c:	ldr	r3, [sp, #4]
   18540:	cmp	r3, #0
   18544:	mvnne	r9, #1
   18548:	mov	r0, r9
   1854c:	add	sp, sp, #12
   18550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18554:	mov	r9, r6
   18558:	mov	r0, r9
   1855c:	add	sp, sp, #12
   18560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18564:	mvn	r9, #0
   18568:	b	18548 <__assert_fail@plt+0x7360>
   1856c:	cmn	r2, #1
   18570:	push	{r4, r5, r6, lr}
   18574:	mov	r2, #5
   18578:	sub	sp, sp, #8
   1857c:	mov	r5, r1
   18580:	mov	r6, r0
   18584:	ldreq	r1, [pc, #76]	; 185d8 <__assert_fail@plt+0x73f0>
   18588:	ldrne	r1, [pc, #76]	; 185dc <__assert_fail@plt+0x73f4>
   1858c:	mov	r0, #0
   18590:	bl	10fcc <dcgettext@plt>
   18594:	mov	r2, r5
   18598:	mov	r1, #8
   1859c:	mov	r4, r0
   185a0:	mov	r0, #0
   185a4:	bl	1a864 <__assert_fail@plt+0x967c>
   185a8:	mov	r1, r6
   185ac:	mov	r5, r0
   185b0:	mov	r0, #1
   185b4:	bl	1abb0 <__assert_fail@plt+0x99c8>
   185b8:	mov	r1, #0
   185bc:	mov	r3, r5
   185c0:	mov	r2, r4
   185c4:	str	r0, [sp]
   185c8:	mov	r0, r1
   185cc:	bl	1105c <error@plt>
   185d0:	add	sp, sp, #8
   185d4:	pop	{r4, r5, r6, pc}
   185d8:	andeq	sp, r1, r0, lsr ip
   185dc:	andeq	sp, r1, ip, asr #24
   185e0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e4:	mov	r6, r0
   185e8:	ldr	sl, [pc, #224]	; 186d0 <__assert_fail@plt+0x74e8>
   185ec:	mov	r4, r1
   185f0:	mov	r7, r2
   185f4:	ldr	r1, [pc, #216]	; 186d4 <__assert_fail@plt+0x74ec>
   185f8:	mov	r2, #5
   185fc:	mov	r0, #0
   18600:	bl	10fcc <dcgettext@plt>
   18604:	ldr	r1, [sl]
   18608:	bl	10f24 <fputs_unlocked@plt>
   1860c:	ldr	fp, [r6]
   18610:	cmp	fp, #0
   18614:	movne	r9, #0
   18618:	movne	r5, r9
   1861c:	bne	18658 <__assert_fail@plt+0x7470>
   18620:	b	1869c <__assert_fail@plt+0x74b4>
   18624:	mov	r0, fp
   18628:	bl	1abc0 <__assert_fail@plt+0x99d8>
   1862c:	ldr	r2, [pc, #164]	; 186d8 <__assert_fail@plt+0x74f0>
   18630:	mov	r1, #1
   18634:	mov	r9, r4
   18638:	mov	r3, r0
   1863c:	mov	r0, r8
   18640:	bl	11140 <__fprintf_chk@plt>
   18644:	ldr	fp, [r6, #4]!
   18648:	add	r5, r5, #1
   1864c:	cmp	fp, #0
   18650:	add	r4, r4, r7
   18654:	beq	1869c <__assert_fail@plt+0x74b4>
   18658:	cmp	r5, #0
   1865c:	mov	r1, r4
   18660:	mov	r2, r7
   18664:	mov	r0, r9
   18668:	ldr	r8, [sl]
   1866c:	beq	18624 <__assert_fail@plt+0x743c>
   18670:	bl	10fc0 <memcmp@plt>
   18674:	cmp	r0, #0
   18678:	bne	18624 <__assert_fail@plt+0x743c>
   1867c:	mov	r0, fp
   18680:	bl	1abc0 <__assert_fail@plt+0x99d8>
   18684:	ldr	r2, [pc, #80]	; 186dc <__assert_fail@plt+0x74f4>
   18688:	mov	r1, #1
   1868c:	mov	r3, r0
   18690:	mov	r0, r8
   18694:	bl	11140 <__fprintf_chk@plt>
   18698:	b	18644 <__assert_fail@plt+0x745c>
   1869c:	ldr	r0, [sl]
   186a0:	ldr	r3, [r0, #20]
   186a4:	ldr	r2, [r0, #24]
   186a8:	cmp	r3, r2
   186ac:	bcs	186c4 <__assert_fail@plt+0x74dc>
   186b0:	add	r1, r3, #1
   186b4:	mov	r2, #10
   186b8:	str	r1, [r0, #20]
   186bc:	strb	r2, [r3]
   186c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186c4:	mov	r1, #10
   186c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186cc:	b	11170 <__overflow@plt>
   186d0:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   186d4:	andeq	sp, r1, ip, ror #24
   186d8:	andeq	sp, r1, r4, lsl #25
   186dc:	andeq	sp, r1, ip, lsl #25
   186e0:	push	{r4, r5, r6, r7, r8, lr}
   186e4:	mov	r6, r1
   186e8:	mov	r4, r2
   186ec:	mov	r5, r3
   186f0:	mov	r7, r0
   186f4:	ldr	r3, [sp, #24]
   186f8:	mov	r2, r5
   186fc:	mov	r1, r4
   18700:	mov	r0, r6
   18704:	bl	18478 <__assert_fail@plt+0x7290>
   18708:	cmp	r0, #0
   1870c:	popge	{r4, r5, r6, r7, r8, pc}
   18710:	mov	r2, r0
   18714:	mov	r1, r6
   18718:	mov	r0, r7
   1871c:	bl	1856c <__assert_fail@plt+0x7384>
   18720:	mov	r0, r4
   18724:	ldr	r2, [sp, #24]
   18728:	mov	r1, r5
   1872c:	bl	185e0 <__assert_fail@plt+0x73f8>
   18730:	ldr	r3, [sp, #28]
   18734:	blx	r3
   18738:	mvn	r0, #0
   1873c:	pop	{r4, r5, r6, r7, r8, pc}
   18740:	push	{r4, r5, r6, r7, r8, lr}
   18744:	ldr	r7, [r1]
   18748:	cmp	r7, #0
   1874c:	beq	1878c <__assert_fail@plt+0x75a4>
   18750:	mov	r6, r3
   18754:	mov	r8, r0
   18758:	mov	r4, r2
   1875c:	mov	r5, r1
   18760:	b	18770 <__assert_fail@plt+0x7588>
   18764:	ldr	r7, [r5, #4]!
   18768:	cmp	r7, #0
   1876c:	beq	1878c <__assert_fail@plt+0x75a4>
   18770:	mov	r1, r4
   18774:	mov	r2, r6
   18778:	mov	r0, r8
   1877c:	bl	10fc0 <memcmp@plt>
   18780:	add	r4, r4, r6
   18784:	cmp	r0, #0
   18788:	bne	18764 <__assert_fail@plt+0x757c>
   1878c:	mov	r0, r7
   18790:	pop	{r4, r5, r6, r7, r8, pc}
   18794:	ldr	r3, [pc, #4]	; 187a0 <__assert_fail@plt+0x75b8>
   18798:	str	r0, [r3]
   1879c:	bx	lr
   187a0:			; <UNDEFINED> instruction: 0x0002f1b0
   187a4:	ldr	r3, [pc, #4]	; 187b0 <__assert_fail@plt+0x75c8>
   187a8:	strb	r0, [r3, #4]
   187ac:	bx	lr
   187b0:			; <UNDEFINED> instruction: 0x0002f1b0
   187b4:	ldr	r3, [pc, #180]	; 18870 <__assert_fail@plt+0x7688>
   187b8:	push	{r4, r5, r6, lr}
   187bc:	sub	sp, sp, #8
   187c0:	ldr	r0, [r3]
   187c4:	bl	1c8dc <__assert_fail@plt+0xb6f4>
   187c8:	cmp	r0, #0
   187cc:	beq	187f4 <__assert_fail@plt+0x760c>
   187d0:	bl	110f8 <__errno_location@plt>
   187d4:	ldr	r5, [pc, #152]	; 18874 <__assert_fail@plt+0x768c>
   187d8:	ldrb	r3, [r5, #4]
   187dc:	cmp	r3, #0
   187e0:	mov	r4, r0
   187e4:	beq	18810 <__assert_fail@plt+0x7628>
   187e8:	ldr	r3, [r0]
   187ec:	cmp	r3, #32
   187f0:	bne	18810 <__assert_fail@plt+0x7628>
   187f4:	ldr	r3, [pc, #124]	; 18878 <__assert_fail@plt+0x7690>
   187f8:	ldr	r0, [r3]
   187fc:	bl	1c8dc <__assert_fail@plt+0xb6f4>
   18800:	cmp	r0, #0
   18804:	bne	18850 <__assert_fail@plt+0x7668>
   18808:	add	sp, sp, #8
   1880c:	pop	{r4, r5, r6, pc}
   18810:	mov	r2, #5
   18814:	ldr	r1, [pc, #96]	; 1887c <__assert_fail@plt+0x7694>
   18818:	mov	r0, #0
   1881c:	bl	10fcc <dcgettext@plt>
   18820:	mov	r6, r0
   18824:	ldr	r0, [r5]
   18828:	cmp	r0, #0
   1882c:	beq	1885c <__assert_fail@plt+0x7674>
   18830:	ldr	r4, [r4]
   18834:	bl	1a9e0 <__assert_fail@plt+0x97f8>
   18838:	mov	r1, r4
   1883c:	str	r6, [sp]
   18840:	ldr	r2, [pc, #56]	; 18880 <__assert_fail@plt+0x7698>
   18844:	mov	r3, r0
   18848:	mov	r0, #0
   1884c:	bl	1105c <error@plt>
   18850:	ldr	r3, [pc, #44]	; 18884 <__assert_fail@plt+0x769c>
   18854:	ldr	r0, [r3]
   18858:	bl	10f84 <_exit@plt>
   1885c:	mov	r3, r6
   18860:	ldr	r1, [r4]
   18864:	ldr	r2, [pc, #28]	; 18888 <__assert_fail@plt+0x76a0>
   18868:	bl	1105c <error@plt>
   1886c:	b	18850 <__assert_fail@plt+0x7668>
   18870:	andeq	pc, r2, r4, lsl #3
   18874:			; <UNDEFINED> instruction: 0x0002f1b0
   18878:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   1887c:	muleq	r1, r4, ip
   18880:	andeq	sp, r1, r0, lsr #25
   18884:	andeq	pc, r2, r4, lsr #2
   18888:	andeq	sp, r1, r4, asr #12
   1888c:	b	10f54 <posix_fadvise64@plt>
   18890:	cmp	r0, #0
   18894:	bxeq	lr
   18898:	push	{r4, lr}
   1889c:	sub	sp, sp, #16
   188a0:	mov	r4, r1
   188a4:	bl	11134 <fileno@plt>
   188a8:	mov	r2, #0
   188ac:	mov	r3, #0
   188b0:	str	r4, [sp, #8]
   188b4:	strd	r2, [sp]
   188b8:	bl	10f54 <posix_fadvise64@plt>
   188bc:	add	sp, sp, #16
   188c0:	pop	{r4, pc}
   188c4:	push	{r4, r5, r6, lr}
   188c8:	mov	r5, r1
   188cc:	bl	111a0 <fopen64@plt>
   188d0:	subs	r4, r0, #0
   188d4:	beq	188e4 <__assert_fail@plt+0x76fc>
   188d8:	bl	11134 <fileno@plt>
   188dc:	cmp	r0, #2
   188e0:	bls	188ec <__assert_fail@plt+0x7704>
   188e4:	mov	r0, r4
   188e8:	pop	{r4, r5, r6, pc}
   188ec:	bl	1abd8 <__assert_fail@plt+0x99f0>
   188f0:	subs	r6, r0, #0
   188f4:	blt	1893c <__assert_fail@plt+0x7754>
   188f8:	mov	r0, r4
   188fc:	bl	1c570 <__assert_fail@plt+0xb388>
   18900:	cmp	r0, #0
   18904:	bne	1891c <__assert_fail@plt+0x7734>
   18908:	mov	r1, r5
   1890c:	mov	r0, r6
   18910:	bl	10f0c <fdopen@plt>
   18914:	subs	r4, r0, #0
   18918:	bne	188e4 <__assert_fail@plt+0x76fc>
   1891c:	bl	110f8 <__errno_location@plt>
   18920:	mov	r4, #0
   18924:	mov	r5, r0
   18928:	mov	r0, r6
   1892c:	ldr	r6, [r5]
   18930:	bl	111d0 <close@plt>
   18934:	str	r6, [r5]
   18938:	b	188e4 <__assert_fail@plt+0x76fc>
   1893c:	bl	110f8 <__errno_location@plt>
   18940:	mov	r5, r0
   18944:	mov	r0, r4
   18948:	ldr	r6, [r5]
   1894c:	mov	r4, #0
   18950:	bl	1c570 <__assert_fail@plt+0xb388>
   18954:	str	r6, [r5]
   18958:	b	188e4 <__assert_fail@plt+0x76fc>
   1895c:	push	{r4, r5, r6, lr}
   18960:	subs	r4, r0, #0
   18964:	beq	189d8 <__assert_fail@plt+0x77f0>
   18968:	mov	r1, #47	; 0x2f
   1896c:	bl	11188 <strrchr@plt>
   18970:	subs	r5, r0, #0
   18974:	beq	189c4 <__assert_fail@plt+0x77dc>
   18978:	add	r6, r5, #1
   1897c:	sub	r3, r6, r4
   18980:	cmp	r3, #6
   18984:	ble	189c4 <__assert_fail@plt+0x77dc>
   18988:	mov	r2, #7
   1898c:	ldr	r1, [pc, #96]	; 189f4 <__assert_fail@plt+0x780c>
   18990:	sub	r0, r5, #6
   18994:	bl	111b8 <strncmp@plt>
   18998:	cmp	r0, #0
   1899c:	bne	189c4 <__assert_fail@plt+0x77dc>
   189a0:	mov	r2, #3
   189a4:	ldr	r1, [pc, #76]	; 189f8 <__assert_fail@plt+0x7810>
   189a8:	mov	r0, r6
   189ac:	bl	111b8 <strncmp@plt>
   189b0:	cmp	r0, #0
   189b4:	movne	r4, r6
   189b8:	ldreq	r3, [pc, #60]	; 189fc <__assert_fail@plt+0x7814>
   189bc:	addeq	r4, r5, #4
   189c0:	streq	r4, [r3]
   189c4:	ldr	r2, [pc, #52]	; 18a00 <__assert_fail@plt+0x7818>
   189c8:	ldr	r3, [pc, #52]	; 18a04 <__assert_fail@plt+0x781c>
   189cc:	str	r4, [r2]
   189d0:	str	r4, [r3]
   189d4:	pop	{r4, r5, r6, pc}
   189d8:	ldr	r3, [pc, #40]	; 18a08 <__assert_fail@plt+0x7820>
   189dc:	mov	r2, #55	; 0x37
   189e0:	mov	r1, #1
   189e4:	ldr	r3, [r3]
   189e8:	ldr	r0, [pc, #28]	; 18a0c <__assert_fail@plt+0x7824>
   189ec:	bl	11014 <fwrite@plt>
   189f0:	bl	111c4 <abort@plt>
   189f4:	andeq	sp, r1, r0, ror #25
   189f8:	andeq	sp, r1, r8, ror #25
   189fc:	andeq	pc, r2, r8, ror #2
   18a00:			; <UNDEFINED> instruction: 0x0002f1b8
   18a04:	andeq	pc, r2, ip, ror #2
   18a08:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   18a0c:	andeq	sp, r1, r8, lsr #25
   18a10:	push	{r4, lr}
   18a14:	mov	r2, #48	; 0x30
   18a18:	mov	r4, r1
   18a1c:	mov	r1, #0
   18a20:	bl	1111c <memset@plt>
   18a24:	cmp	r4, #10
   18a28:	beq	18a34 <__assert_fail@plt+0x784c>
   18a2c:	str	r4, [r0]
   18a30:	pop	{r4, pc}
   18a34:	bl	111c4 <abort@plt>
   18a38:	push	{r4, r5, r6, lr}
   18a3c:	mov	r2, #5
   18a40:	mov	r5, r0
   18a44:	mov	r6, r1
   18a48:	mov	r1, r0
   18a4c:	mov	r0, #0
   18a50:	bl	10fcc <dcgettext@plt>
   18a54:	cmp	r5, r0
   18a58:	mov	r4, r0
   18a5c:	beq	18a68 <__assert_fail@plt+0x7880>
   18a60:	mov	r0, r4
   18a64:	pop	{r4, r5, r6, pc}
   18a68:	bl	1c99c <__assert_fail@plt+0xb7b4>
   18a6c:	ldrb	r3, [r0]
   18a70:	bic	r3, r3, #32
   18a74:	cmp	r3, #85	; 0x55
   18a78:	bne	18ad8 <__assert_fail@plt+0x78f0>
   18a7c:	ldrb	r3, [r0, #1]
   18a80:	bic	r3, r3, #32
   18a84:	cmp	r3, #84	; 0x54
   18a88:	bne	18b50 <__assert_fail@plt+0x7968>
   18a8c:	ldrb	r3, [r0, #2]
   18a90:	bic	r3, r3, #32
   18a94:	cmp	r3, #70	; 0x46
   18a98:	bne	18b50 <__assert_fail@plt+0x7968>
   18a9c:	ldrb	r3, [r0, #3]
   18aa0:	cmp	r3, #45	; 0x2d
   18aa4:	bne	18b50 <__assert_fail@plt+0x7968>
   18aa8:	ldrb	r3, [r0, #4]
   18aac:	cmp	r3, #56	; 0x38
   18ab0:	bne	18b50 <__assert_fail@plt+0x7968>
   18ab4:	ldrb	r3, [r0, #5]
   18ab8:	cmp	r3, #0
   18abc:	bne	18b50 <__assert_fail@plt+0x7968>
   18ac0:	ldrb	r2, [r4]
   18ac4:	ldr	r3, [pc, #156]	; 18b68 <__assert_fail@plt+0x7980>
   18ac8:	ldr	r4, [pc, #156]	; 18b6c <__assert_fail@plt+0x7984>
   18acc:	cmp	r2, #96	; 0x60
   18ad0:	movne	r4, r3
   18ad4:	b	18a60 <__assert_fail@plt+0x7878>
   18ad8:	cmp	r3, #71	; 0x47
   18adc:	bne	18b50 <__assert_fail@plt+0x7968>
   18ae0:	ldrb	r3, [r0, #1]
   18ae4:	bic	r3, r3, #32
   18ae8:	cmp	r3, #66	; 0x42
   18aec:	bne	18b50 <__assert_fail@plt+0x7968>
   18af0:	ldrb	r3, [r0, #2]
   18af4:	cmp	r3, #49	; 0x31
   18af8:	bne	18b50 <__assert_fail@plt+0x7968>
   18afc:	ldrb	r3, [r0, #3]
   18b00:	cmp	r3, #56	; 0x38
   18b04:	bne	18b50 <__assert_fail@plt+0x7968>
   18b08:	ldrb	r3, [r0, #4]
   18b0c:	cmp	r3, #48	; 0x30
   18b10:	bne	18b50 <__assert_fail@plt+0x7968>
   18b14:	ldrb	r3, [r0, #5]
   18b18:	cmp	r3, #51	; 0x33
   18b1c:	bne	18b50 <__assert_fail@plt+0x7968>
   18b20:	ldrb	r3, [r0, #6]
   18b24:	cmp	r3, #48	; 0x30
   18b28:	bne	18b50 <__assert_fail@plt+0x7968>
   18b2c:	ldrb	r3, [r0, #7]
   18b30:	cmp	r3, #0
   18b34:	bne	18b50 <__assert_fail@plt+0x7968>
   18b38:	ldrb	r2, [r4]
   18b3c:	ldr	r3, [pc, #44]	; 18b70 <__assert_fail@plt+0x7988>
   18b40:	ldr	r4, [pc, #44]	; 18b74 <__assert_fail@plt+0x798c>
   18b44:	cmp	r2, #96	; 0x60
   18b48:	movne	r4, r3
   18b4c:	b	18a60 <__assert_fail@plt+0x7878>
   18b50:	ldr	r3, [pc, #32]	; 18b78 <__assert_fail@plt+0x7990>
   18b54:	ldr	r4, [pc, #32]	; 18b7c <__assert_fail@plt+0x7994>
   18b58:	cmp	r6, #9
   18b5c:	movne	r4, r3
   18b60:	mov	r0, r4
   18b64:	pop	{r4, r5, r6, pc}
   18b68:	andeq	sp, r1, r4, asr #26
   18b6c:	andeq	sp, r1, r0, asr sp
   18b70:	andeq	sp, r1, r8, asr #26
   18b74:	andeq	sp, r1, ip, asr #26
   18b78:	andeq	sp, r1, r4, asr sp
   18b7c:	andeq	sp, r1, r0, asr #26
   18b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b84:	sub	sp, sp, #124	; 0x7c
   18b88:	ldr	ip, [pc, #3576]	; 19988 <__assert_fail@plt+0x87a0>
   18b8c:	str	r3, [sp, #24]
   18b90:	ldr	r3, [sp, #168]	; 0xa8
   18b94:	ldr	ip, [ip]
   18b98:	str	r3, [sp, #56]	; 0x38
   18b9c:	ldr	r3, [sp, #172]	; 0xac
   18ba0:	ldr	r8, [sp, #160]	; 0xa0
   18ba4:	str	r3, [sp, #80]	; 0x50
   18ba8:	ldr	r3, [sp, #176]	; 0xb0
   18bac:	mov	fp, r0
   18bb0:	str	r3, [sp, #76]	; 0x4c
   18bb4:	mov	sl, r1
   18bb8:	str	r2, [sp, #36]	; 0x24
   18bbc:	str	ip, [sp, #116]	; 0x74
   18bc0:	bl	1102c <__ctype_get_mb_cur_max@plt>
   18bc4:	ldr	r3, [sp, #164]	; 0xa4
   18bc8:	ands	r4, r3, #2
   18bcc:	movne	r3, #1
   18bd0:	moveq	r3, #0
   18bd4:	str	r3, [sp, #32]
   18bd8:	str	r0, [sp, #64]	; 0x40
   18bdc:	cmp	r8, #10
   18be0:	ldrls	pc, [pc, r8, lsl #2]
   18be4:	b	1a394 <__assert_fail@plt+0x91ac>
   18be8:	ldrdeq	r8, [r1], -ip
   18bec:	andeq	r9, r1, r4, ror r0
   18bf0:	andeq	r9, r1, r4, ror r6
   18bf4:	muleq	r1, r4, r0
   18bf8:	andeq	r8, r1, r8, asr #30
   18bfc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   18c00:	andeq	r9, r1, ip
   18c04:	andeq	r9, r1, r4, asr #32
   18c08:	andeq	r8, r1, r4, lsl ip
   18c0c:	andeq	r8, r1, r4, lsl ip
   18c10:	andeq	r8, r1, r4, lsl ip
   18c14:	cmp	r8, #10
   18c18:	beq	18c3c <__assert_fail@plt+0x7a54>
   18c1c:	mov	r1, r8
   18c20:	ldr	r0, [pc, #3428]	; 1998c <__assert_fail@plt+0x87a4>
   18c24:	bl	18a38 <__assert_fail@plt+0x7850>
   18c28:	mov	r1, r8
   18c2c:	str	r0, [sp, #80]	; 0x50
   18c30:	ldr	r0, [pc, #3420]	; 19994 <__assert_fail@plt+0x87ac>
   18c34:	bl	18a38 <__assert_fail@plt+0x7850>
   18c38:	str	r0, [sp, #76]	; 0x4c
   18c3c:	cmp	r4, #0
   18c40:	movne	r4, #0
   18c44:	beq	1a054 <__assert_fail@plt+0x8e6c>
   18c48:	ldr	r7, [sp, #76]	; 0x4c
   18c4c:	mov	r5, #0
   18c50:	mov	r6, #1
   18c54:	mov	r0, r7
   18c58:	str	r6, [sp, #40]	; 0x28
   18c5c:	str	r5, [sp, #68]	; 0x44
   18c60:	bl	110e0 <strlen@plt>
   18c64:	str	r6, [sp, #28]
   18c68:	str	r5, [sp, #44]	; 0x2c
   18c6c:	str	r5, [sp, #72]	; 0x48
   18c70:	str	r7, [sp, #60]	; 0x3c
   18c74:	str	r0, [sp, #52]	; 0x34
   18c78:	str	r8, [sp, #160]	; 0xa0
   18c7c:	mov	r8, fp
   18c80:	ldr	fp, [sp, #160]	; 0xa0
   18c84:	mov	r9, #0
   18c88:	ldr	r3, [sp, #24]
   18c8c:	cmn	r3, #1
   18c90:	beq	191f8 <__assert_fail@plt+0x8010>
   18c94:	ldr	r3, [sp, #24]
   18c98:	subs	r6, r3, r9
   18c9c:	movne	r6, #1
   18ca0:	cmp	r6, #0
   18ca4:	beq	19210 <__assert_fail@plt+0x8028>
   18ca8:	ldr	r7, [sp, #28]
   18cac:	ldr	r0, [sp, #36]	; 0x24
   18cb0:	cmp	fp, #2
   18cb4:	moveq	r7, #0
   18cb8:	andne	r7, r7, #1
   18cbc:	add	r3, r0, r9
   18cc0:	cmp	r7, #0
   18cc4:	str	r3, [sp, #48]	; 0x30
   18cc8:	beq	196b4 <__assert_fail@plt+0x84cc>
   18ccc:	ldr	r2, [sp, #52]	; 0x34
   18cd0:	cmp	r2, #0
   18cd4:	beq	19998 <__assert_fail@plt+0x87b0>
   18cd8:	ldr	r1, [sp, #24]
   18cdc:	cmp	r2, #1
   18ce0:	mov	r3, r2
   18ce4:	movls	r3, #0
   18ce8:	movhi	r3, #1
   18cec:	cmn	r1, #1
   18cf0:	movne	r3, #0
   18cf4:	cmp	r3, #0
   18cf8:	add	r5, r9, r2
   18cfc:	beq	18d08 <__assert_fail@plt+0x7b20>
   18d00:	bl	110e0 <strlen@plt>
   18d04:	str	r0, [sp, #24]
   18d08:	ldr	r3, [sp, #24]
   18d0c:	cmp	r5, r3
   18d10:	bhi	19998 <__assert_fail@plt+0x87b0>
   18d14:	ldr	r2, [sp, #52]	; 0x34
   18d18:	ldr	r1, [sp, #60]	; 0x3c
   18d1c:	ldr	r0, [sp, #48]	; 0x30
   18d20:	bl	10fc0 <memcmp@plt>
   18d24:	cmp	r0, #0
   18d28:	bne	19998 <__assert_fail@plt+0x87b0>
   18d2c:	ldr	r3, [sp, #32]
   18d30:	cmp	r3, #0
   18d34:	bne	1a254 <__assert_fail@plt+0x906c>
   18d38:	ldr	r3, [sp, #48]	; 0x30
   18d3c:	ldrb	r5, [r3]
   18d40:	cmp	r5, #126	; 0x7e
   18d44:	ldrls	pc, [pc, r5, lsl #2]
   18d48:	b	19618 <__assert_fail@plt+0x8430>
   18d4c:	andeq	r9, r1, r4, lsl #10
   18d50:	andeq	r9, r1, r8, lsl r6
   18d54:	andeq	r9, r1, r8, lsl r6
   18d58:	andeq	r9, r1, r8, lsl r6
   18d5c:	andeq	r9, r1, r8, lsl r6
   18d60:	andeq	r9, r1, r8, lsl r6
   18d64:	andeq	r9, r1, r8, lsl r6
   18d68:	ldrdeq	r9, [r1], -r0
   18d6c:	andeq	r9, r1, r0, asr #11
   18d70:	andeq	r9, r1, r0, asr #9
   18d74:	andeq	r9, r1, r8, lsl #9
   18d78:	andeq	r9, r1, r0, ror #9
   18d7c:	andeq	r9, r1, r8, asr #9
   18d80:	strdeq	r9, [r1], -r8
   18d84:	andeq	r9, r1, r8, lsl r6
   18d88:	andeq	r9, r1, r8, lsl r6
   18d8c:	andeq	r9, r1, r8, lsl r6
   18d90:	andeq	r9, r1, r8, lsl r6
   18d94:	andeq	r9, r1, r8, lsl r6
   18d98:	andeq	r9, r1, r8, lsl r6
   18d9c:	andeq	r9, r1, r8, lsl r6
   18da0:	andeq	r9, r1, r8, lsl r6
   18da4:	andeq	r9, r1, r8, lsl r6
   18da8:	andeq	r9, r1, r8, lsl r6
   18dac:	andeq	r9, r1, r8, lsl r6
   18db0:	andeq	r9, r1, r8, lsl r6
   18db4:	andeq	r9, r1, r8, lsl r6
   18db8:	andeq	r9, r1, r8, lsl r6
   18dbc:	andeq	r9, r1, r8, lsl r6
   18dc0:	andeq	r9, r1, r8, lsl r6
   18dc4:	andeq	r9, r1, r8, lsl r6
   18dc8:	andeq	r9, r1, r8, lsl r6
   18dcc:	ldrdeq	r9, [r1], -r8
   18dd0:	andeq	r9, r1, ip, ror #9
   18dd4:	andeq	r9, r1, ip, ror #9
   18dd8:	strdeq	r9, [r1], -r0
   18ddc:	andeq	r9, r1, ip, ror #9
   18de0:	andeq	r9, r1, ip, lsl #12
   18de4:	andeq	r9, r1, ip, ror #9
   18de8:	andeq	r9, r1, ip, lsr #6
   18dec:	andeq	r9, r1, ip, ror #9
   18df0:	andeq	r9, r1, ip, ror #9
   18df4:	andeq	r9, r1, ip, ror #9
   18df8:	andeq	r9, r1, ip, lsl #12
   18dfc:	andeq	r9, r1, ip, lsl #12
   18e00:	andeq	r9, r1, ip, lsl #12
   18e04:	andeq	r9, r1, ip, lsl #12
   18e08:	andeq	r9, r1, ip, lsl #12
   18e0c:	andeq	r9, r1, ip, lsl #12
   18e10:	andeq	r9, r1, ip, lsl #12
   18e14:	andeq	r9, r1, ip, lsl #12
   18e18:	andeq	r9, r1, ip, lsl #12
   18e1c:	andeq	r9, r1, ip, lsl #12
   18e20:	andeq	r9, r1, ip, lsl #12
   18e24:	andeq	r9, r1, ip, lsl #12
   18e28:	andeq	r9, r1, ip, lsl #12
   18e2c:	andeq	r9, r1, ip, lsl #12
   18e30:	andeq	r9, r1, ip, lsl #12
   18e34:	andeq	r9, r1, ip, lsl #12
   18e38:	andeq	r9, r1, ip, ror #9
   18e3c:	andeq	r9, r1, ip, ror #9
   18e40:	andeq	r9, r1, ip, ror #9
   18e44:	andeq	r9, r1, ip, ror #9
   18e48:	andeq	r9, r1, r0, lsl #6
   18e4c:	andeq	r9, r1, r8, lsl r6
   18e50:	andeq	r9, r1, ip, lsl #12
   18e54:	andeq	r9, r1, ip, lsl #12
   18e58:	andeq	r9, r1, ip, lsl #12
   18e5c:	andeq	r9, r1, ip, lsl #12
   18e60:	andeq	r9, r1, ip, lsl #12
   18e64:	andeq	r9, r1, ip, lsl #12
   18e68:	andeq	r9, r1, ip, lsl #12
   18e6c:	andeq	r9, r1, ip, lsl #12
   18e70:	andeq	r9, r1, ip, lsl #12
   18e74:	andeq	r9, r1, ip, lsl #12
   18e78:	andeq	r9, r1, ip, lsl #12
   18e7c:	andeq	r9, r1, ip, lsl #12
   18e80:	andeq	r9, r1, ip, lsl #12
   18e84:	andeq	r9, r1, ip, lsl #12
   18e88:	andeq	r9, r1, ip, lsl #12
   18e8c:	andeq	r9, r1, ip, lsl #12
   18e90:	andeq	r9, r1, ip, lsl #12
   18e94:	andeq	r9, r1, ip, lsl #12
   18e98:	andeq	r9, r1, ip, lsl #12
   18e9c:	andeq	r9, r1, ip, lsl #12
   18ea0:	andeq	r9, r1, ip, lsl #12
   18ea4:	andeq	r9, r1, ip, lsl #12
   18ea8:	andeq	r9, r1, ip, lsl #12
   18eac:	andeq	r9, r1, ip, lsl #12
   18eb0:	andeq	r9, r1, ip, lsl #12
   18eb4:	andeq	r9, r1, ip, lsl #12
   18eb8:	andeq	r9, r1, ip, ror #9
   18ebc:			; <UNDEFINED> instruction: 0x000192b8
   18ec0:	andeq	r9, r1, ip, lsl #12
   18ec4:	andeq	r9, r1, ip, ror #9
   18ec8:	andeq	r9, r1, ip, lsl #12
   18ecc:	andeq	r9, r1, ip, ror #9
   18ed0:	andeq	r9, r1, ip, lsl #12
   18ed4:	andeq	r9, r1, ip, lsl #12
   18ed8:	andeq	r9, r1, ip, lsl #12
   18edc:	andeq	r9, r1, ip, lsl #12
   18ee0:	andeq	r9, r1, ip, lsl #12
   18ee4:	andeq	r9, r1, ip, lsl #12
   18ee8:	andeq	r9, r1, ip, lsl #12
   18eec:	andeq	r9, r1, ip, lsl #12
   18ef0:	andeq	r9, r1, ip, lsl #12
   18ef4:	andeq	r9, r1, ip, lsl #12
   18ef8:	andeq	r9, r1, ip, lsl #12
   18efc:	andeq	r9, r1, ip, lsl #12
   18f00:	andeq	r9, r1, ip, lsl #12
   18f04:	andeq	r9, r1, ip, lsl #12
   18f08:	andeq	r9, r1, ip, lsl #12
   18f0c:	andeq	r9, r1, ip, lsl #12
   18f10:	andeq	r9, r1, ip, lsl #12
   18f14:	andeq	r9, r1, ip, lsl #12
   18f18:	andeq	r9, r1, ip, lsl #12
   18f1c:	andeq	r9, r1, ip, lsl #12
   18f20:	andeq	r9, r1, ip, lsl #12
   18f24:	andeq	r9, r1, ip, lsl #12
   18f28:	andeq	r9, r1, ip, lsl #12
   18f2c:	andeq	r9, r1, ip, lsl #12
   18f30:	andeq	r9, r1, ip, lsl #12
   18f34:	andeq	r9, r1, ip, lsl #12
   18f38:	ldrdeq	r9, [r1], -r0
   18f3c:	andeq	r9, r1, ip, ror #9
   18f40:	ldrdeq	r9, [r1], -r0
   18f44:	strdeq	r9, [r1], -r0
   18f48:	cmp	r4, #0
   18f4c:	moveq	r3, #1
   18f50:	streq	r3, [sp, #28]
   18f54:	beq	19680 <__assert_fail@plt+0x8498>
   18f58:	mov	r3, #0
   18f5c:	mov	r4, r3
   18f60:	mov	r2, #1
   18f64:	str	r2, [sp, #40]	; 0x28
   18f68:	str	r3, [sp, #68]	; 0x44
   18f6c:	str	r2, [sp, #32]
   18f70:	str	r2, [sp, #52]	; 0x34
   18f74:	ldr	r3, [pc, #2584]	; 19994 <__assert_fail@plt+0x87ac>
   18f78:	str	r4, [sp, #44]	; 0x2c
   18f7c:	str	r4, [sp, #72]	; 0x48
   18f80:	str	r4, [sp, #28]
   18f84:	str	r3, [sp, #60]	; 0x3c
   18f88:	mov	r8, #2
   18f8c:	b	18c78 <__assert_fail@plt+0x7a90>
   18f90:	cmp	r4, #0
   18f94:	bne	1a220 <__assert_fail@plt+0x9038>
   18f98:	cmp	sl, #0
   18f9c:	beq	19fe0 <__assert_fail@plt+0x8df8>
   18fa0:	mov	r3, #34	; 0x22
   18fa4:	strb	r3, [fp]
   18fa8:	ldr	r3, [pc, #2528]	; 19990 <__assert_fail@plt+0x87a8>
   18fac:	mov	r1, r4
   18fb0:	mov	r2, #1
   18fb4:	str	r4, [sp, #68]	; 0x44
   18fb8:	str	r2, [sp, #40]	; 0x28
   18fbc:	mov	r4, r2
   18fc0:	str	r1, [sp, #44]	; 0x2c
   18fc4:	str	r1, [sp, #72]	; 0x48
   18fc8:	str	r1, [sp, #32]
   18fcc:	str	r2, [sp, #28]
   18fd0:	str	r2, [sp, #52]	; 0x34
   18fd4:	str	r3, [sp, #60]	; 0x3c
   18fd8:	b	18c78 <__assert_fail@plt+0x7a90>
   18fdc:	mov	r3, #0
   18fe0:	str	r3, [sp, #68]	; 0x44
   18fe4:	str	r3, [sp, #44]	; 0x2c
   18fe8:	str	r3, [sp, #32]
   18fec:	str	r3, [sp, #28]
   18ff0:	str	r3, [sp, #60]	; 0x3c
   18ff4:	mov	r3, #1
   18ff8:	str	r8, [sp, #72]	; 0x48
   18ffc:	str	r8, [sp, #52]	; 0x34
   19000:	mov	r4, r8
   19004:	str	r3, [sp, #40]	; 0x28
   19008:	b	18c78 <__assert_fail@plt+0x7a90>
   1900c:	mov	r3, #1
   19010:	str	r3, [sp, #40]	; 0x28
   19014:	str	r3, [sp, #32]
   19018:	str	r3, [sp, #28]
   1901c:	str	r3, [sp, #52]	; 0x34
   19020:	ldr	r3, [pc, #2408]	; 19990 <__assert_fail@plt+0x87a8>
   19024:	mov	r2, #0
   19028:	mov	r4, r2
   1902c:	str	r2, [sp, #68]	; 0x44
   19030:	str	r2, [sp, #44]	; 0x2c
   19034:	str	r2, [sp, #72]	; 0x48
   19038:	str	r3, [sp, #60]	; 0x3c
   1903c:	mov	r8, #5
   19040:	b	18c78 <__assert_fail@plt+0x7a90>
   19044:	mov	r3, #0
   19048:	mov	r2, #1
   1904c:	str	r2, [sp, #40]	; 0x28
   19050:	mov	r4, r3
   19054:	str	r3, [sp, #68]	; 0x44
   19058:	str	r2, [sp, #28]
   1905c:	str	r3, [sp, #44]	; 0x2c
   19060:	str	r3, [sp, #72]	; 0x48
   19064:	str	r3, [sp, #32]
   19068:	str	r3, [sp, #52]	; 0x34
   1906c:	str	r3, [sp, #60]	; 0x3c
   19070:	b	18c78 <__assert_fail@plt+0x7a90>
   19074:	mov	r2, #1
   19078:	mov	r3, #0
   1907c:	str	r2, [sp, #40]	; 0x28
   19080:	mov	r4, r3
   19084:	str	r3, [sp, #68]	; 0x44
   19088:	str	r8, [sp, #52]	; 0x34
   1908c:	str	r2, [sp, #32]
   19090:	b	18f74 <__assert_fail@plt+0x7d8c>
   19094:	mov	r3, #1
   19098:	str	r3, [sp, #40]	; 0x28
   1909c:	str	r3, [sp, #32]
   190a0:	str	r3, [sp, #28]
   190a4:	str	r3, [sp, #52]	; 0x34
   190a8:	ldr	r3, [pc, #2276]	; 19994 <__assert_fail@plt+0x87ac>
   190ac:	mov	r2, #0
   190b0:	mov	r4, r2
   190b4:	str	r2, [sp, #68]	; 0x44
   190b8:	str	r2, [sp, #44]	; 0x2c
   190bc:	str	r2, [sp, #72]	; 0x48
   190c0:	str	r3, [sp, #60]	; 0x3c
   190c4:	mov	r8, #2
   190c8:	b	18c78 <__assert_fail@plt+0x7a90>
   190cc:	mov	r7, #0
   190d0:	ldr	r3, [sp, #24]
   190d4:	cmn	r3, #1
   190d8:	beq	19c14 <__assert_fail@plt+0x8a2c>
   190dc:	ldr	r3, [sp, #24]
   190e0:	subs	r3, r3, #1
   190e4:	movne	r3, #1
   190e8:	cmp	r3, #0
   190ec:	sub	r2, fp, #2
   190f0:	clz	r2, r2
   190f4:	lsr	r2, r2, #5
   190f8:	bne	192f4 <__assert_fail@plt+0x810c>
   190fc:	cmp	r9, #0
   19100:	bne	192f4 <__assert_fail@plt+0x810c>
   19104:	ldr	r3, [sp, #32]
   19108:	tst	r3, r2
   1910c:	bne	19414 <__assert_fail@plt+0x822c>
   19110:	ldr	r3, [sp, #28]
   19114:	eor	r3, r3, #1
   19118:	orr	r3, r2, r3
   1911c:	ldr	r2, [sp, #32]
   19120:	eor	r3, r3, #1
   19124:	orrs	r3, r2, r3
   19128:	beq	19158 <__assert_fail@plt+0x7f70>
   1912c:	mov	r3, #0
   19130:	ldr	r1, [sp, #56]	; 0x38
   19134:	cmp	r1, #0
   19138:	beq	19158 <__assert_fail@plt+0x7f70>
   1913c:	lsr	r2, r5, #5
   19140:	and	r0, r5, #31
   19144:	uxtb	r2, r2
   19148:	ldr	r1, [r1, r2, lsl #2]
   1914c:	lsr	r2, r1, r0
   19150:	tst	r2, #1
   19154:	bne	19160 <__assert_fail@plt+0x7f78>
   19158:	cmp	r7, #0
   1915c:	beq	193b0 <__assert_fail@plt+0x81c8>
   19160:	sub	r2, fp, #2
   19164:	clz	r2, r2
   19168:	lsr	r2, r2, #5
   1916c:	ldr	r3, [sp, #32]
   19170:	cmp	r3, #0
   19174:	bne	194a0 <__assert_fail@plt+0x82b8>
   19178:	ldr	r3, [sp, #44]	; 0x2c
   1917c:	eor	r3, r3, #1
   19180:	ands	r3, r2, r3
   19184:	beq	191bc <__assert_fail@plt+0x7fd4>
   19188:	cmp	sl, r4
   1918c:	movhi	r2, #39	; 0x27
   19190:	strbhi	r2, [r8, r4]
   19194:	add	r2, r4, #1
   19198:	cmp	r2, sl
   1919c:	movcc	r1, #36	; 0x24
   191a0:	strbcc	r1, [r8, r2]
   191a4:	add	r2, r4, #2
   191a8:	cmp	r2, sl
   191ac:	add	r4, r4, #3
   191b0:	movcc	r1, #39	; 0x27
   191b4:	strbcc	r1, [r8, r2]
   191b8:	str	r3, [sp, #44]	; 0x2c
   191bc:	cmp	r4, sl
   191c0:	movcc	r3, #92	; 0x5c
   191c4:	strbcc	r3, [r8, r4]
   191c8:	add	r9, r9, #1
   191cc:	add	r4, r4, #1
   191d0:	cmp	r4, sl
   191d4:	ldr	r3, [sp, #40]	; 0x28
   191d8:	strbcc	r5, [r8, r4]
   191dc:	cmp	r6, #0
   191e0:	moveq	r3, #0
   191e4:	str	r3, [sp, #40]	; 0x28
   191e8:	ldr	r3, [sp, #24]
   191ec:	add	r4, r4, #1
   191f0:	cmn	r3, #1
   191f4:	bne	18c94 <__assert_fail@plt+0x7aac>
   191f8:	ldr	r3, [sp, #36]	; 0x24
   191fc:	ldrb	r6, [r3, r9]
   19200:	adds	r6, r6, #0
   19204:	movne	r6, #1
   19208:	cmp	r6, #0
   1920c:	bne	18ca8 <__assert_fail@plt+0x7ac0>
   19210:	str	fp, [sp, #160]	; 0xa0
   19214:	mov	fp, r8
   19218:	ldr	r8, [sp, #160]	; 0xa0
   1921c:	ldr	r1, [sp, #32]
   19220:	cmp	r4, #0
   19224:	sub	r2, r8, #2
   19228:	clz	r2, r2
   1922c:	lsr	r2, r2, #5
   19230:	andeq	r3, r2, r1
   19234:	movne	r3, #0
   19238:	cmp	r3, #0
   1923c:	bne	1a328 <__assert_fail@plt+0x9140>
   19240:	eor	r3, r1, #1
   19244:	ands	r2, r2, r3
   19248:	beq	1a264 <__assert_fail@plt+0x907c>
   1924c:	ldr	r3, [sp, #68]	; 0x44
   19250:	cmp	r3, #0
   19254:	beq	1a268 <__assert_fail@plt+0x9080>
   19258:	ldr	r3, [sp, #40]	; 0x28
   1925c:	cmp	r3, #0
   19260:	bne	1a2e4 <__assert_fail@plt+0x90fc>
   19264:	ldr	r3, [sp, #72]	; 0x48
   19268:	adds	r3, r3, #0
   1926c:	movne	r3, #1
   19270:	cmp	sl, #0
   19274:	movne	r3, #0
   19278:	cmp	r3, #0
   1927c:	ldreq	r2, [sp, #68]	; 0x44
   19280:	beq	1a268 <__assert_fail@plt+0x9080>
   19284:	ldr	sl, [sp, #72]	; 0x48
   19288:	str	r3, [sp, #68]	; 0x44
   1928c:	ldr	r3, [pc, #1792]	; 19994 <__assert_fail@plt+0x87ac>
   19290:	mov	r2, #39	; 0x27
   19294:	mov	r4, #1
   19298:	str	r3, [sp, #60]	; 0x3c
   1929c:	mov	r3, #0
   192a0:	strb	r2, [fp]
   192a4:	str	r4, [sp, #52]	; 0x34
   192a8:	mov	r8, #2
   192ac:	str	r3, [sp, #32]
   192b0:	b	18c78 <__assert_fail@plt+0x7a90>
   192b4:	mov	r7, #0
   192b8:	cmp	fp, #2
   192bc:	beq	19bf4 <__assert_fail@plt+0x8a0c>
   192c0:	ldr	r3, [sp, #52]	; 0x34
   192c4:	ldr	r2, [sp, #28]
   192c8:	ldr	r1, [sp, #32]
   192cc:	cmp	r3, #0
   192d0:	andne	r2, r2, r1
   192d4:	moveq	r2, #0
   192d8:	cmp	r2, #0
   192dc:	moveq	r5, #92	; 0x5c
   192e0:	moveq	r3, r5
   192e4:	bne	19c00 <__assert_fail@plt+0x8a18>
   192e8:	ldr	r1, [sp, #28]
   192ec:	cmp	r1, #0
   192f0:	bne	1a370 <__assert_fail@plt+0x9188>
   192f4:	mov	r6, #0
   192f8:	b	19110 <__assert_fail@plt+0x7f28>
   192fc:	mov	r7, #0
   19300:	cmp	fp, #2
   19304:	beq	19c64 <__assert_fail@plt+0x8a7c>
   19308:	cmp	fp, #5
   1930c:	beq	19c28 <__assert_fail@plt+0x8a40>
   19310:	sub	r2, fp, #2
   19314:	mov	r6, #0
   19318:	clz	r2, r2
   1931c:	mov	r5, #63	; 0x3f
   19320:	lsr	r2, r2, #5
   19324:	b	19110 <__assert_fail@plt+0x7f28>
   19328:	mov	r7, #0
   1932c:	cmp	fp, #2
   19330:	strne	r6, [sp, #68]	; 0x44
   19334:	movne	r2, #0
   19338:	movne	r5, #39	; 0x27
   1933c:	bne	19110 <__assert_fail@plt+0x7f28>
   19340:	ldr	r3, [sp, #32]
   19344:	cmp	r3, #0
   19348:	bne	1a044 <__assert_fail@plt+0x8e5c>
   1934c:	cmp	sl, #0
   19350:	ldr	r3, [sp, #72]	; 0x48
   19354:	clz	r3, r3
   19358:	lsr	r3, r3, #5
   1935c:	moveq	r3, #0
   19360:	cmp	r3, #0
   19364:	bne	19f78 <__assert_fail@plt+0x8d90>
   19368:	cmp	sl, r4
   1936c:	movhi	r3, #39	; 0x27
   19370:	strbhi	r3, [r8, r4]
   19374:	add	r3, r4, #1
   19378:	cmp	sl, r3
   1937c:	movhi	r2, #92	; 0x5c
   19380:	strbhi	r2, [r8, r3]
   19384:	add	r3, r4, #2
   19388:	cmp	sl, r3
   1938c:	movhi	r2, #39	; 0x27
   19390:	strbhi	r2, [r8, r3]
   19394:	mov	r3, #0
   19398:	cmp	r7, #0
   1939c:	add	r4, r4, #3
   193a0:	str	r3, [sp, #44]	; 0x2c
   193a4:	str	r6, [sp, #68]	; 0x44
   193a8:	mov	r5, #39	; 0x27
   193ac:	bne	19160 <__assert_fail@plt+0x7f78>
   193b0:	ldr	r2, [sp, #44]	; 0x2c
   193b4:	eor	r3, r3, #1
   193b8:	and	r3, r3, r2
   193bc:	add	r9, r9, #1
   193c0:	uxtb	r3, r3
   193c4:	cmp	r3, #0
   193c8:	beq	191d0 <__assert_fail@plt+0x7fe8>
   193cc:	cmp	sl, r4
   193d0:	movhi	r3, #39	; 0x27
   193d4:	strbhi	r3, [r8, r4]
   193d8:	add	r3, r4, #1
   193dc:	cmp	sl, r3
   193e0:	movhi	r2, #39	; 0x27
   193e4:	strbhi	r2, [r8, r3]
   193e8:	mov	r3, #0
   193ec:	add	r4, r4, #2
   193f0:	str	r3, [sp, #44]	; 0x2c
   193f4:	b	191d0 <__assert_fail@plt+0x7fe8>
   193f8:	mov	r3, #114	; 0x72
   193fc:	ldr	r1, [sp, #32]
   19400:	sub	r2, fp, #2
   19404:	clz	r2, r2
   19408:	lsr	r2, r2, #5
   1940c:	tst	r2, r1
   19410:	beq	192e8 <__assert_fail@plt+0x8100>
   19414:	mov	fp, r8
   19418:	mov	r8, #2
   1941c:	ldr	r3, [sp, #28]
   19420:	cmp	r3, #0
   19424:	movne	r8, #4
   19428:	ldr	r3, [sp, #164]	; 0xa4
   1942c:	mov	ip, #0
   19430:	bic	r3, r3, #2
   19434:	str	r3, [sp, #4]
   19438:	ldr	r3, [sp, #76]	; 0x4c
   1943c:	str	r8, [sp]
   19440:	str	r3, [sp, #16]
   19444:	ldr	r3, [sp, #80]	; 0x50
   19448:	ldr	r2, [sp, #36]	; 0x24
   1944c:	str	r3, [sp, #12]
   19450:	mov	r1, sl
   19454:	ldr	r3, [sp, #24]
   19458:	mov	r0, fp
   1945c:	str	ip, [sp, #8]
   19460:	bl	18b80 <__assert_fail@plt+0x7998>
   19464:	mov	r4, r0
   19468:	ldr	r3, [pc, #1304]	; 19988 <__assert_fail@plt+0x87a0>
   1946c:	ldr	r2, [sp, #116]	; 0x74
   19470:	mov	r0, r4
   19474:	ldr	r3, [r3]
   19478:	cmp	r2, r3
   1947c:	bne	1a36c <__assert_fail@plt+0x9184>
   19480:	add	sp, sp, #124	; 0x7c
   19484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19488:	mov	r5, #110	; 0x6e
   1948c:	ldr	r3, [sp, #32]
   19490:	mov	r2, #0
   19494:	cmp	r3, #0
   19498:	mov	r6, r2
   1949c:	beq	19178 <__assert_fail@plt+0x7f90>
   194a0:	str	fp, [sp, #160]	; 0xa0
   194a4:	mov	fp, r8
   194a8:	ldr	r8, [sp, #160]	; 0xa0
   194ac:	mov	r3, r2
   194b0:	ldr	r2, [sp, #28]
   194b4:	and	r2, r2, r3
   194b8:	str	r2, [sp, #28]
   194bc:	b	1941c <__assert_fail@plt+0x8234>
   194c0:	mov	r5, #116	; 0x74
   194c4:	b	1948c <__assert_fail@plt+0x82a4>
   194c8:	mov	r5, #102	; 0x66
   194cc:	ldr	r3, [sp, #32]
   194d0:	cmp	r3, #0
   194d4:	bne	1a080 <__assert_fail@plt+0x8e98>
   194d8:	mov	r6, #0
   194dc:	b	191bc <__assert_fail@plt+0x7fd4>
   194e0:	mov	r5, #118	; 0x76
   194e4:	b	194cc <__assert_fail@plt+0x82e4>
   194e8:	mov	r7, #0
   194ec:	mov	r6, #0
   194f0:	b	1912c <__assert_fail@plt+0x7f44>
   194f4:	ldr	r3, [sp, #32]
   194f8:	cmp	r3, #0
   194fc:	bne	1a2c4 <__assert_fail@plt+0x90dc>
   19500:	mov	r7, r3
   19504:	ldr	r3, [sp, #44]	; 0x2c
   19508:	sub	r2, fp, #2
   1950c:	eor	r3, r3, #1
   19510:	clz	r2, r2
   19514:	lsr	r2, r2, #5
   19518:	ands	r3, r2, r3
   1951c:	beq	19f64 <__assert_fail@plt+0x8d7c>
   19520:	cmp	sl, r4
   19524:	movhi	r1, #39	; 0x27
   19528:	strbhi	r1, [r8, r4]
   1952c:	add	r1, r4, #1
   19530:	cmp	sl, r1
   19534:	movhi	r0, #36	; 0x24
   19538:	strbhi	r0, [r8, r1]
   1953c:	add	r1, r4, #2
   19540:	cmp	sl, r1
   19544:	movhi	r0, #39	; 0x27
   19548:	strbhi	r0, [r8, r1]
   1954c:	add	r1, r4, #3
   19550:	cmp	sl, r1
   19554:	bls	19fc4 <__assert_fail@plt+0x8ddc>
   19558:	mov	r4, r1
   1955c:	mov	r1, #92	; 0x5c
   19560:	strb	r1, [r8, r4]
   19564:	mov	r1, r4
   19568:	str	r3, [sp, #44]	; 0x2c
   1956c:	cmp	fp, #2
   19570:	add	r4, r4, #1
   19574:	beq	1a00c <__assert_fail@plt+0x8e24>
   19578:	ldr	r0, [sp, #24]
   1957c:	add	r3, r9, #1
   19580:	cmp	r3, r0
   19584:	bcs	1959c <__assert_fail@plt+0x83b4>
   19588:	ldr	r0, [sp, #36]	; 0x24
   1958c:	ldrb	r3, [r0, r3]
   19590:	sub	r3, r3, #48	; 0x30
   19594:	cmp	r3, #9
   19598:	bls	1a01c <__assert_fail@plt+0x8e34>
   1959c:	mov	r5, #48	; 0x30
   195a0:	ldr	r3, [sp, #28]
   195a4:	eor	r3, r3, #1
   195a8:	orrs	r2, r2, r3
   195ac:	mov	r3, r6
   195b0:	moveq	r6, r2
   195b4:	beq	19130 <__assert_fail@plt+0x7f48>
   195b8:	mov	r6, #0
   195bc:	b	19158 <__assert_fail@plt+0x7f70>
   195c0:	mov	r2, #0
   195c4:	mov	r6, r2
   195c8:	mov	r5, #98	; 0x62
   195cc:	b	19178 <__assert_fail@plt+0x7f90>
   195d0:	mov	r5, #97	; 0x61
   195d4:	b	194d8 <__assert_fail@plt+0x82f0>
   195d8:	mov	r3, r7
   195dc:	mov	r6, r7
   195e0:	mov	r2, #0
   195e4:	mov	r7, r3
   195e8:	mov	r5, #32
   195ec:	b	19110 <__assert_fail@plt+0x7f28>
   195f0:	cmp	r9, #0
   195f4:	mov	r3, r7
   195f8:	bne	19bc0 <__assert_fail@plt+0x89d8>
   195fc:	mov	r6, r7
   19600:	mov	r2, r9
   19604:	mov	r7, r3
   19608:	b	19110 <__assert_fail@plt+0x7f28>
   1960c:	mov	r6, r7
   19610:	b	1912c <__assert_fail@plt+0x7f44>
   19614:	mov	r7, #0
   19618:	ldr	r3, [sp, #64]	; 0x40
   1961c:	cmp	r3, #1
   19620:	bne	19c7c <__assert_fail@plt+0x8a94>
   19624:	bl	110b0 <__ctype_b_loc@plt>
   19628:	ldr	r2, [sp, #64]	; 0x40
   1962c:	sxth	r3, r5
   19630:	mov	ip, r2
   19634:	lsl	r3, r3, #1
   19638:	ldr	r2, [r0]
   1963c:	ldrh	r3, [r2, r3]
   19640:	and	r3, r3, #16384	; 0x4000
   19644:	cmp	r3, #0
   19648:	ldr	r3, [sp, #28]
   1964c:	movne	r6, #1
   19650:	moveq	r6, #0
   19654:	movne	r2, #0
   19658:	andeq	r2, r3, #1
   1965c:	cmp	r2, #0
   19660:	bne	19f8c <__assert_fail@plt+0x8da4>
   19664:	sub	r2, fp, #2
   19668:	clz	r2, r2
   1966c:	lsr	r2, r2, #5
   19670:	b	19110 <__assert_fail@plt+0x7f28>
   19674:	cmp	r4, #0
   19678:	bne	1a338 <__assert_fail@plt+0x9150>
   1967c:	str	r4, [sp, #28]
   19680:	cmp	sl, #0
   19684:	bne	1a37c <__assert_fail@plt+0x9194>
   19688:	ldr	r3, [pc, #772]	; 19994 <__assert_fail@plt+0x87ac>
   1968c:	mov	r4, #1
   19690:	str	r4, [sp, #40]	; 0x28
   19694:	str	r3, [sp, #60]	; 0x3c
   19698:	str	r4, [sp, #52]	; 0x34
   1969c:	str	sl, [sp, #72]	; 0x48
   196a0:	str	sl, [sp, #68]	; 0x44
   196a4:	str	sl, [sp, #44]	; 0x2c
   196a8:	str	sl, [sp, #32]
   196ac:	mov	r8, #2
   196b0:	b	18c78 <__assert_fail@plt+0x7a90>
   196b4:	ldr	r3, [sp, #36]	; 0x24
   196b8:	ldrb	r5, [r3, r9]
   196bc:	cmp	r5, #126	; 0x7e
   196c0:	ldrls	pc, [pc, r5, lsl #2]
   196c4:	b	19618 <__assert_fail@plt+0x8430>
   196c8:	strdeq	r9, [r1], -ip
   196cc:	andeq	r9, r1, r8, lsl r6
   196d0:	andeq	r9, r1, r8, lsl r6
   196d4:	andeq	r9, r1, r8, lsl r6
   196d8:	andeq	r9, r1, r8, lsl r6
   196dc:	andeq	r9, r1, r8, lsl r6
   196e0:	andeq	r9, r1, r8, lsl r6
   196e4:	andeq	r9, r1, r8, ror #17
   196e8:	ldrdeq	r9, [r1], -r4
   196ec:	andeq	r9, r1, ip, asr #17
   196f0:	andeq	r9, r1, r4, asr #17
   196f4:	andeq	r9, r1, r4, ror r9
   196f8:	andeq	r9, r1, r0, ror #18
   196fc:	strdeq	r9, [r1], -r8
   19700:	andeq	r9, r1, r8, lsl r6
   19704:	andeq	r9, r1, r8, lsl r6
   19708:	andeq	r9, r1, r8, lsl r6
   1970c:	andeq	r9, r1, r8, lsl r6
   19710:	andeq	r9, r1, r8, lsl r6
   19714:	andeq	r9, r1, r8, lsl r6
   19718:	andeq	r9, r1, r8, lsl r6
   1971c:	andeq	r9, r1, r8, lsl r6
   19720:	andeq	r9, r1, r8, lsl r6
   19724:	andeq	r9, r1, r8, lsl r6
   19728:	andeq	r9, r1, r8, lsl r6
   1972c:	andeq	r9, r1, r8, lsl r6
   19730:	andeq	r9, r1, r8, lsl r6
   19734:	andeq	r9, r1, r8, lsl r6
   19738:	andeq	r9, r1, r8, lsl r6
   1973c:	andeq	r9, r1, r8, lsl r6
   19740:	andeq	r9, r1, r8, lsl r6
   19744:	andeq	r9, r1, r8, lsl r6
   19748:	andeq	r9, r1, r0, asr r9
   1974c:	andeq	r9, r1, ip, lsr r9
   19750:	andeq	r9, r1, ip, lsr r9
   19754:	andeq	r9, r1, ip, lsr #18
   19758:	andeq	r9, r1, ip, lsr r9
   1975c:	andeq	r9, r1, r4, ror #12
   19760:	andeq	r9, r1, ip, lsr r9
   19764:	andeq	r9, r1, ip, lsr #6
   19768:	andeq	r9, r1, ip, lsr r9
   1976c:	andeq	r9, r1, ip, lsr r9
   19770:	andeq	r9, r1, ip, lsr r9
   19774:	andeq	r9, r1, r4, ror #12
   19778:	andeq	r9, r1, r4, ror #12
   1977c:	andeq	r9, r1, r4, ror #12
   19780:	andeq	r9, r1, r4, ror #12
   19784:	andeq	r9, r1, r4, ror #12
   19788:	andeq	r9, r1, r4, ror #12
   1978c:	andeq	r9, r1, r4, ror #12
   19790:	andeq	r9, r1, r4, ror #12
   19794:	andeq	r9, r1, r4, ror #12
   19798:	andeq	r9, r1, r4, ror #12
   1979c:	andeq	r9, r1, r4, ror #12
   197a0:	andeq	r9, r1, r4, ror #12
   197a4:	andeq	r9, r1, r4, ror #12
   197a8:	andeq	r9, r1, r4, ror #12
   197ac:	andeq	r9, r1, r4, ror #12
   197b0:	andeq	r9, r1, r4, ror #12
   197b4:	andeq	r9, r1, ip, lsr r9
   197b8:	andeq	r9, r1, ip, lsr r9
   197bc:	andeq	r9, r1, ip, lsr r9
   197c0:	andeq	r9, r1, ip, lsr r9
   197c4:	andeq	r9, r1, r0, lsl #6
   197c8:	andeq	r9, r1, r8, lsl r6
   197cc:	andeq	r9, r1, r4, ror #12
   197d0:	andeq	r9, r1, r4, ror #12
   197d4:	andeq	r9, r1, r4, ror #12
   197d8:	andeq	r9, r1, r4, ror #12
   197dc:	andeq	r9, r1, r4, ror #12
   197e0:	andeq	r9, r1, r4, ror #12
   197e4:	andeq	r9, r1, r4, ror #12
   197e8:	andeq	r9, r1, r4, ror #12
   197ec:	andeq	r9, r1, r4, ror #12
   197f0:	andeq	r9, r1, r4, ror #12
   197f4:	andeq	r9, r1, r4, ror #12
   197f8:	andeq	r9, r1, r4, ror #12
   197fc:	andeq	r9, r1, r4, ror #12
   19800:	andeq	r9, r1, r4, ror #12
   19804:	andeq	r9, r1, r4, ror #12
   19808:	andeq	r9, r1, r4, ror #12
   1980c:	andeq	r9, r1, r4, ror #12
   19810:	andeq	r9, r1, r4, ror #12
   19814:	andeq	r9, r1, r4, ror #12
   19818:	andeq	r9, r1, r4, ror #12
   1981c:	andeq	r9, r1, r4, ror #12
   19820:	andeq	r9, r1, r4, ror #12
   19824:	andeq	r9, r1, r4, ror #12
   19828:	andeq	r9, r1, r4, ror #12
   1982c:	andeq	r9, r1, r4, ror #12
   19830:	andeq	r9, r1, r4, ror #12
   19834:	andeq	r9, r1, ip, lsr r9
   19838:			; <UNDEFINED> instruction: 0x000192b8
   1983c:	andeq	r9, r1, r4, ror #12
   19840:	andeq	r9, r1, ip, lsr r9
   19844:	andeq	r9, r1, r4, ror #12
   19848:	andeq	r9, r1, ip, lsr r9
   1984c:	andeq	r9, r1, r4, ror #12
   19850:	andeq	r9, r1, r4, ror #12
   19854:	andeq	r9, r1, r4, ror #12
   19858:	andeq	r9, r1, r4, ror #12
   1985c:	andeq	r9, r1, r4, ror #12
   19860:	andeq	r9, r1, r4, ror #12
   19864:	andeq	r9, r1, r4, ror #12
   19868:	andeq	r9, r1, r4, ror #12
   1986c:	andeq	r9, r1, r4, ror #12
   19870:	andeq	r9, r1, r4, ror #12
   19874:	andeq	r9, r1, r4, ror #12
   19878:	andeq	r9, r1, r4, ror #12
   1987c:	andeq	r9, r1, r4, ror #12
   19880:	andeq	r9, r1, r4, ror #12
   19884:	andeq	r9, r1, r4, ror #12
   19888:	andeq	r9, r1, r4, ror #12
   1988c:	andeq	r9, r1, r4, ror #12
   19890:	andeq	r9, r1, r4, ror #12
   19894:	andeq	r9, r1, r4, ror #12
   19898:	andeq	r9, r1, r4, ror #12
   1989c:	andeq	r9, r1, r4, ror #12
   198a0:	andeq	r9, r1, r4, ror #12
   198a4:	andeq	r9, r1, r4, ror #12
   198a8:	andeq	r9, r1, r4, ror #12
   198ac:	andeq	r9, r1, r4, ror #12
   198b0:	andeq	r9, r1, r4, ror #12
   198b4:	ldrdeq	r9, [r1], -r0
   198b8:	andeq	r9, r1, ip, lsr r9
   198bc:	ldrdeq	r9, [r1], -r0
   198c0:	andeq	r9, r1, ip, lsr #18
   198c4:	mov	r3, #110	; 0x6e
   198c8:	b	193fc <__assert_fail@plt+0x8214>
   198cc:	mov	r3, #116	; 0x74
   198d0:	b	193fc <__assert_fail@plt+0x8214>
   198d4:	sub	r2, fp, #2
   198d8:	mov	r3, #98	; 0x62
   198dc:	clz	r2, r2
   198e0:	lsr	r2, r2, #5
   198e4:	b	192e8 <__assert_fail@plt+0x8100>
   198e8:	sub	r2, fp, #2
   198ec:	mov	r3, #97	; 0x61
   198f0:	clz	r2, r2
   198f4:	lsr	r2, r2, #5
   198f8:	b	192e8 <__assert_fail@plt+0x8100>
   198fc:	ldr	r3, [sp, #28]
   19900:	cmp	r3, #0
   19904:	bne	194f4 <__assert_fail@plt+0x830c>
   19908:	ldr	r3, [sp, #164]	; 0xa4
   1990c:	tst	r3, #1
   19910:	bne	19f84 <__assert_fail@plt+0x8d9c>
   19914:	ldr	r6, [sp, #28]
   19918:	sub	r2, fp, #2
   1991c:	mov	r7, r6
   19920:	clz	r2, r2
   19924:	lsr	r2, r2, #5
   19928:	b	19110 <__assert_fail@plt+0x7f28>
   1992c:	sub	r2, fp, #2
   19930:	clz	r2, r2
   19934:	lsr	r2, r2, #5
   19938:	b	190fc <__assert_fail@plt+0x7f14>
   1993c:	sub	r2, fp, #2
   19940:	mov	r6, #0
   19944:	clz	r2, r2
   19948:	lsr	r2, r2, #5
   1994c:	b	19104 <__assert_fail@plt+0x7f1c>
   19950:	sub	r2, fp, #2
   19954:	clz	r2, r2
   19958:	lsr	r2, r2, #5
   1995c:	b	19104 <__assert_fail@plt+0x7f1c>
   19960:	sub	r2, fp, #2
   19964:	mov	r3, #102	; 0x66
   19968:	clz	r2, r2
   1996c:	lsr	r2, r2, #5
   19970:	b	192e8 <__assert_fail@plt+0x8100>
   19974:	sub	r2, fp, #2
   19978:	mov	r3, #118	; 0x76
   1997c:	clz	r2, r2
   19980:	lsr	r2, r2, #5
   19984:	b	192e8 <__assert_fail@plt+0x8100>
   19988:	andeq	lr, r2, r8, lsl #30
   1998c:	andeq	sp, r1, r8, asr sp
   19990:	andeq	sp, r1, r0, asr #26
   19994:	andeq	sp, r1, r4, asr sp
   19998:	ldr	r3, [sp, #48]	; 0x30
   1999c:	ldrb	r5, [r3]
   199a0:	cmp	r5, #126	; 0x7e
   199a4:	ldrls	pc, [pc, r5, lsl #2]
   199a8:	b	19614 <__assert_fail@plt+0x842c>
   199ac:	strdeq	r9, [r1], -r4
   199b0:	andeq	r9, r1, r4, lsl r6
   199b4:	andeq	r9, r1, r4, lsl r6
   199b8:	andeq	r9, r1, r4, lsl r6
   199bc:	andeq	r9, r1, r4, lsl r6
   199c0:	andeq	r9, r1, r4, lsl r6
   199c4:	andeq	r9, r1, r4, lsl r6
   199c8:	andeq	r9, r1, ip, ror #23
   199cc:	andeq	r9, r1, r4, ror #23
   199d0:	andeq	r9, r1, r0, asr #9
   199d4:	andeq	r9, r1, r8, lsl #9
   199d8:	andeq	r9, r1, r0, ror #9
   199dc:	andeq	r9, r1, r8, asr #9
   199e0:	ldrdeq	r9, [r1], -r8
   199e4:	andeq	r9, r1, r4, lsl r6
   199e8:	andeq	r9, r1, r4, lsl r6
   199ec:	andeq	r9, r1, r4, lsl r6
   199f0:	andeq	r9, r1, r4, lsl r6
   199f4:	andeq	r9, r1, r4, lsl r6
   199f8:	andeq	r9, r1, r4, lsl r6
   199fc:	andeq	r9, r1, r4, lsl r6
   19a00:	andeq	r9, r1, r4, lsl r6
   19a04:	andeq	r9, r1, r4, lsl r6
   19a08:	andeq	r9, r1, r4, lsl r6
   19a0c:	andeq	r9, r1, r4, lsl r6
   19a10:	andeq	r9, r1, r4, lsl r6
   19a14:	andeq	r9, r1, r4, lsl r6
   19a18:	andeq	r9, r1, r4, lsl r6
   19a1c:	andeq	r9, r1, r4, lsl r6
   19a20:	andeq	r9, r1, r4, lsl r6
   19a24:	andeq	r9, r1, r4, lsl r6
   19a28:	andeq	r9, r1, r4, lsl r6
   19a2c:	ldrdeq	r9, [r1], -r0
   19a30:	andeq	r9, r1, r8, ror #9
   19a34:	andeq	r9, r1, r8, ror #9
   19a38:			; <UNDEFINED> instruction: 0x00019bb4
   19a3c:	andeq	r9, r1, r8, ror #9
   19a40:	andeq	r9, r1, r8, lsr #23
   19a44:	andeq	r9, r1, r8, ror #9
   19a48:	andeq	r9, r1, r8, lsr #6
   19a4c:	andeq	r9, r1, r8, ror #9
   19a50:	andeq	r9, r1, r8, ror #9
   19a54:	andeq	r9, r1, r8, ror #9
   19a58:	andeq	r9, r1, r8, lsr #23
   19a5c:	andeq	r9, r1, r8, lsr #23
   19a60:	andeq	r9, r1, r8, lsr #23
   19a64:	andeq	r9, r1, r8, lsr #23
   19a68:	andeq	r9, r1, r8, lsr #23
   19a6c:	andeq	r9, r1, r8, lsr #23
   19a70:	andeq	r9, r1, r8, lsr #23
   19a74:	andeq	r9, r1, r8, lsr #23
   19a78:	andeq	r9, r1, r8, lsr #23
   19a7c:	andeq	r9, r1, r8, lsr #23
   19a80:	andeq	r9, r1, r8, lsr #23
   19a84:	andeq	r9, r1, r8, lsr #23
   19a88:	andeq	r9, r1, r8, lsr #23
   19a8c:	andeq	r9, r1, r8, lsr #23
   19a90:	andeq	r9, r1, r8, lsr #23
   19a94:	andeq	r9, r1, r8, lsr #23
   19a98:	andeq	r9, r1, r8, ror #9
   19a9c:	andeq	r9, r1, r8, ror #9
   19aa0:	andeq	r9, r1, r8, ror #9
   19aa4:	andeq	r9, r1, r8, ror #9
   19aa8:	strdeq	r9, [r1], -ip
   19aac:	andeq	r9, r1, r4, lsl r6
   19ab0:	andeq	r9, r1, r8, lsr #23
   19ab4:	andeq	r9, r1, r8, lsr #23
   19ab8:	andeq	r9, r1, r8, lsr #23
   19abc:	andeq	r9, r1, r8, lsr #23
   19ac0:	andeq	r9, r1, r8, lsr #23
   19ac4:	andeq	r9, r1, r8, lsr #23
   19ac8:	andeq	r9, r1, r8, lsr #23
   19acc:	andeq	r9, r1, r8, lsr #23
   19ad0:	andeq	r9, r1, r8, lsr #23
   19ad4:	andeq	r9, r1, r8, lsr #23
   19ad8:	andeq	r9, r1, r8, lsr #23
   19adc:	andeq	r9, r1, r8, lsr #23
   19ae0:	andeq	r9, r1, r8, lsr #23
   19ae4:	andeq	r9, r1, r8, lsr #23
   19ae8:	andeq	r9, r1, r8, lsr #23
   19aec:	andeq	r9, r1, r8, lsr #23
   19af0:	andeq	r9, r1, r8, lsr #23
   19af4:	andeq	r9, r1, r8, lsr #23
   19af8:	andeq	r9, r1, r8, lsr #23
   19afc:	andeq	r9, r1, r8, lsr #23
   19b00:	andeq	r9, r1, r8, lsr #23
   19b04:	andeq	r9, r1, r8, lsr #23
   19b08:	andeq	r9, r1, r8, lsr #23
   19b0c:	andeq	r9, r1, r8, lsr #23
   19b10:	andeq	r9, r1, r8, lsr #23
   19b14:	andeq	r9, r1, r8, lsr #23
   19b18:	andeq	r9, r1, r8, ror #9
   19b1c:			; <UNDEFINED> instruction: 0x000192b4
   19b20:	andeq	r9, r1, r8, lsr #23
   19b24:	andeq	r9, r1, r8, ror #9
   19b28:	andeq	r9, r1, r8, lsr #23
   19b2c:	andeq	r9, r1, r8, ror #9
   19b30:	andeq	r9, r1, r8, lsr #23
   19b34:	andeq	r9, r1, r8, lsr #23
   19b38:	andeq	r9, r1, r8, lsr #23
   19b3c:	andeq	r9, r1, r8, lsr #23
   19b40:	andeq	r9, r1, r8, lsr #23
   19b44:	andeq	r9, r1, r8, lsr #23
   19b48:	andeq	r9, r1, r8, lsr #23
   19b4c:	andeq	r9, r1, r8, lsr #23
   19b50:	andeq	r9, r1, r8, lsr #23
   19b54:	andeq	r9, r1, r8, lsr #23
   19b58:	andeq	r9, r1, r8, lsr #23
   19b5c:	andeq	r9, r1, r8, lsr #23
   19b60:	andeq	r9, r1, r8, lsr #23
   19b64:	andeq	r9, r1, r8, lsr #23
   19b68:	andeq	r9, r1, r8, lsr #23
   19b6c:	andeq	r9, r1, r8, lsr #23
   19b70:	andeq	r9, r1, r8, lsr #23
   19b74:	andeq	r9, r1, r8, lsr #23
   19b78:	andeq	r9, r1, r8, lsr #23
   19b7c:	andeq	r9, r1, r8, lsr #23
   19b80:	andeq	r9, r1, r8, lsr #23
   19b84:	andeq	r9, r1, r8, lsr #23
   19b88:	andeq	r9, r1, r8, lsr #23
   19b8c:	andeq	r9, r1, r8, lsr #23
   19b90:	andeq	r9, r1, r8, lsr #23
   19b94:	andeq	r9, r1, r8, lsr #23
   19b98:	andeq	r9, r1, ip, asr #1
   19b9c:	andeq	r9, r1, r8, ror #9
   19ba0:	andeq	r9, r1, ip, asr #1
   19ba4:			; <UNDEFINED> instruction: 0x00019bb4
   19ba8:	mov	r6, r7
   19bac:	mov	r7, #0
   19bb0:	b	1912c <__assert_fail@plt+0x7f44>
   19bb4:	cmp	r9, #0
   19bb8:	mov	r3, #0
   19bbc:	beq	195fc <__assert_fail@plt+0x8414>
   19bc0:	mov	r6, #0
   19bc4:	mov	r7, r3
   19bc8:	mov	r3, r6
   19bcc:	b	19130 <__assert_fail@plt+0x7f48>
   19bd0:	mov	r3, #0
   19bd4:	b	195dc <__assert_fail@plt+0x83f4>
   19bd8:	mov	r7, #0
   19bdc:	mov	r3, #114	; 0x72
   19be0:	b	193fc <__assert_fail@plt+0x8214>
   19be4:	mov	r5, #98	; 0x62
   19be8:	b	1948c <__assert_fail@plt+0x82a4>
   19bec:	mov	r5, #97	; 0x61
   19bf0:	b	194cc <__assert_fail@plt+0x82e4>
   19bf4:	ldr	r3, [sp, #32]
   19bf8:	cmp	r3, #0
   19bfc:	bne	1a044 <__assert_fail@plt+0x8e5c>
   19c00:	add	r9, r9, #1
   19c04:	ldr	r3, [sp, #44]	; 0x2c
   19c08:	mov	r6, #0
   19c0c:	mov	r5, #92	; 0x5c
   19c10:	b	193c4 <__assert_fail@plt+0x81dc>
   19c14:	ldr	r3, [sp, #36]	; 0x24
   19c18:	ldrb	r3, [r3, #1]
   19c1c:	adds	r3, r3, #0
   19c20:	movne	r3, #1
   19c24:	b	190e8 <__assert_fail@plt+0x7f00>
   19c28:	ldr	r3, [sp, #164]	; 0xa4
   19c2c:	ands	r3, r3, #4
   19c30:	beq	19c54 <__assert_fail@plt+0x8a6c>
   19c34:	ldr	r2, [sp, #24]
   19c38:	add	r3, r9, #2
   19c3c:	cmp	r3, r2
   19c40:	bcs	19c54 <__assert_fail@plt+0x8a6c>
   19c44:	ldr	r2, [sp, #48]	; 0x30
   19c48:	ldrb	r5, [r2, #1]
   19c4c:	cmp	r5, #63	; 0x3f
   19c50:	beq	1a0b8 <__assert_fail@plt+0x8ed0>
   19c54:	mov	r2, #0
   19c58:	mov	r6, r2
   19c5c:	mov	r5, #63	; 0x3f
   19c60:	b	19110 <__assert_fail@plt+0x7f28>
   19c64:	ldr	r3, [sp, #32]
   19c68:	cmp	r3, #0
   19c6c:	bne	1a044 <__assert_fail@plt+0x8e5c>
   19c70:	mov	r6, r3
   19c74:	mov	r5, #63	; 0x3f
   19c78:	b	19158 <__assert_fail@plt+0x7f70>
   19c7c:	ldr	r3, [sp, #24]
   19c80:	cmn	r3, #1
   19c84:	mov	r3, #0
   19c88:	str	r3, [sp, #108]	; 0x6c
   19c8c:	str	r3, [sp, #112]	; 0x70
   19c90:	bne	19ca0 <__assert_fail@plt+0x8ab8>
   19c94:	ldr	r0, [sp, #36]	; 0x24
   19c98:	bl	110e0 <strlen@plt>
   19c9c:	str	r0, [sp, #24]
   19ca0:	mov	r3, #0
   19ca4:	str	sl, [sp, #88]	; 0x58
   19ca8:	ldr	sl, [sp, #36]	; 0x24
   19cac:	str	r5, [sp, #92]	; 0x5c
   19cb0:	mov	r5, r3
   19cb4:	str	r7, [sp, #96]	; 0x60
   19cb8:	str	r4, [sp, #100]	; 0x64
   19cbc:	str	r8, [sp, #84]	; 0x54
   19cc0:	ldr	r3, [sp, #24]
   19cc4:	add	r4, r9, r5
   19cc8:	add	r7, sl, r4
   19ccc:	sub	r2, r3, r4
   19cd0:	mov	r1, r7
   19cd4:	add	r3, sp, #108	; 0x6c
   19cd8:	add	r0, sp, #104	; 0x68
   19cdc:	bl	1c85c <__assert_fail@plt+0xb674>
   19ce0:	subs	r8, r0, #0
   19ce4:	beq	19d34 <__assert_fail@plt+0x8b4c>
   19ce8:	cmn	r8, #1
   19cec:	beq	1a094 <__assert_fail@plt+0x8eac>
   19cf0:	cmn	r8, #2
   19cf4:	beq	1a1b4 <__assert_fail@plt+0x8fcc>
   19cf8:	ldr	r3, [sp, #32]
   19cfc:	cmp	fp, #2
   19d00:	movne	r3, #0
   19d04:	andeq	r3, r3, #1
   19d08:	cmp	r3, #0
   19d0c:	bne	19e94 <__assert_fail@plt+0x8cac>
   19d10:	ldr	r0, [sp, #104]	; 0x68
   19d14:	bl	10ffc <iswprint@plt>
   19d18:	add	r5, r5, r8
   19d1c:	cmp	r0, #0
   19d20:	add	r0, sp, #108	; 0x6c
   19d24:	moveq	r6, #0
   19d28:	bl	10fa8 <mbsinit@plt>
   19d2c:	cmp	r0, #0
   19d30:	beq	19cc0 <__assert_fail@plt+0x8ad8>
   19d34:	ldr	r3, [sp, #28]
   19d38:	mov	ip, r5
   19d3c:	eor	r2, r6, #1
   19d40:	ldr	r5, [sp, #92]	; 0x5c
   19d44:	ldr	r7, [sp, #96]	; 0x60
   19d48:	ldr	r4, [sp, #100]	; 0x64
   19d4c:	ldr	r8, [sp, #84]	; 0x54
   19d50:	ldr	sl, [sp, #88]	; 0x58
   19d54:	and	r2, r2, r3
   19d58:	cmp	ip, #1
   19d5c:	bls	1965c <__assert_fail@plt+0x8474>
   19d60:	add	r1, ip, r9
   19d64:	ldr	lr, [sp, #48]	; 0x30
   19d68:	mov	r0, #0
   19d6c:	str	r6, [sp, #48]	; 0x30
   19d70:	mov	ip, #39	; 0x27
   19d74:	ldr	r6, [sp, #44]	; 0x2c
   19d78:	b	19e30 <__assert_fail@plt+0x8c48>
   19d7c:	ldr	r0, [sp, #32]
   19d80:	sub	r3, fp, #2
   19d84:	cmp	r0, #0
   19d88:	clz	r3, r3
   19d8c:	lsr	r3, r3, #5
   19d90:	bne	19f98 <__assert_fail@plt+0x8db0>
   19d94:	eor	r0, r6, #1
   19d98:	ands	r3, r3, r0
   19d9c:	beq	19dcc <__assert_fail@plt+0x8be4>
   19da0:	add	r0, r4, #1
   19da4:	cmp	sl, r4
   19da8:	strbhi	ip, [r8, r4]
   19dac:	cmp	sl, r0
   19db0:	movhi	r6, #36	; 0x24
   19db4:	strbhi	r6, [r8, r0]
   19db8:	add	r0, r4, #2
   19dbc:	mov	r6, r3
   19dc0:	add	r4, r4, #3
   19dc4:	cmp	sl, r0
   19dc8:	strbhi	ip, [r8, r0]
   19dcc:	cmp	sl, r4
   19dd0:	movhi	r3, #92	; 0x5c
   19dd4:	strbhi	r3, [r8, r4]
   19dd8:	add	r3, r4, #1
   19ddc:	cmp	sl, r3
   19de0:	lsrhi	r0, r5, #6
   19de4:	addhi	r0, r0, #48	; 0x30
   19de8:	strbhi	r0, [r8, r3]
   19dec:	add	r0, r4, #2
   19df0:	cmp	sl, r0
   19df4:	lsrhi	r3, r5, #3
   19df8:	andhi	r3, r3, #7
   19dfc:	addhi	r3, r3, #48	; 0x30
   19e00:	add	r9, r9, #1
   19e04:	strbhi	r3, [r8, r0]
   19e08:	and	r5, r5, #7
   19e0c:	cmp	r9, r1
   19e10:	add	r5, r5, #48	; 0x30
   19e14:	add	r4, r4, #3
   19e18:	bcs	19fb8 <__assert_fail@plt+0x8dd0>
   19e1c:	mov	r0, r2
   19e20:	cmp	sl, r4
   19e24:	strbhi	r5, [r8, r4]
   19e28:	ldrb	r5, [lr, #1]!
   19e2c:	add	r4, r4, #1
   19e30:	cmp	r2, #0
   19e34:	bne	19d7c <__assert_fail@plt+0x8b94>
   19e38:	eor	r3, r0, #1
   19e3c:	and	r3, r3, r6
   19e40:	cmp	r7, #0
   19e44:	uxtb	r3, r3
   19e48:	beq	19e5c <__assert_fail@plt+0x8c74>
   19e4c:	cmp	sl, r4
   19e50:	movhi	r7, #92	; 0x5c
   19e54:	strbhi	r7, [r8, r4]
   19e58:	add	r4, r4, #1
   19e5c:	add	r9, r9, #1
   19e60:	cmp	r9, r1
   19e64:	bcs	19fac <__assert_fail@plt+0x8dc4>
   19e68:	cmp	r3, #0
   19e6c:	beq	19fd8 <__assert_fail@plt+0x8df0>
   19e70:	cmp	sl, r4
   19e74:	add	r3, r4, #1
   19e78:	strbhi	ip, [r8, r4]
   19e7c:	mov	r7, #0
   19e80:	cmp	sl, r3
   19e84:	strbhi	ip, [r8, r3]
   19e88:	add	r4, r4, #2
   19e8c:	mov	r6, r7
   19e90:	b	19e20 <__assert_fail@plt+0x8c38>
   19e94:	cmp	r8, #1
   19e98:	beq	19d10 <__assert_fail@plt+0x8b28>
   19e9c:	add	r1, r4, #1
   19ea0:	add	r3, sl, r8
   19ea4:	add	r1, sl, r1
   19ea8:	add	r4, r3, r4
   19eac:	ldrb	r3, [r1], #1
   19eb0:	sub	r3, r3, #91	; 0x5b
   19eb4:	cmp	r3, #33	; 0x21
   19eb8:	ldrls	pc, [pc, r3, lsl #2]
   19ebc:	b	19f48 <__assert_fail@plt+0x8d60>
   19ec0:	andeq	r9, r1, r4, asr pc
   19ec4:	andeq	r9, r1, r4, asr pc
   19ec8:	andeq	r9, r1, r8, asr #30
   19ecc:	andeq	r9, r1, r4, asr pc
   19ed0:	andeq	r9, r1, r8, asr #30
   19ed4:	andeq	r9, r1, r4, asr pc
   19ed8:	andeq	r9, r1, r8, asr #30
   19edc:	andeq	r9, r1, r8, asr #30
   19ee0:	andeq	r9, r1, r8, asr #30
   19ee4:	andeq	r9, r1, r8, asr #30
   19ee8:	andeq	r9, r1, r8, asr #30
   19eec:	andeq	r9, r1, r8, asr #30
   19ef0:	andeq	r9, r1, r8, asr #30
   19ef4:	andeq	r9, r1, r8, asr #30
   19ef8:	andeq	r9, r1, r8, asr #30
   19efc:	andeq	r9, r1, r8, asr #30
   19f00:	andeq	r9, r1, r8, asr #30
   19f04:	andeq	r9, r1, r8, asr #30
   19f08:	andeq	r9, r1, r8, asr #30
   19f0c:	andeq	r9, r1, r8, asr #30
   19f10:	andeq	r9, r1, r8, asr #30
   19f14:	andeq	r9, r1, r8, asr #30
   19f18:	andeq	r9, r1, r8, asr #30
   19f1c:	andeq	r9, r1, r8, asr #30
   19f20:	andeq	r9, r1, r8, asr #30
   19f24:	andeq	r9, r1, r8, asr #30
   19f28:	andeq	r9, r1, r8, asr #30
   19f2c:	andeq	r9, r1, r8, asr #30
   19f30:	andeq	r9, r1, r8, asr #30
   19f34:	andeq	r9, r1, r8, asr #30
   19f38:	andeq	r9, r1, r8, asr #30
   19f3c:	andeq	r9, r1, r8, asr #30
   19f40:	andeq	r9, r1, r8, asr #30
   19f44:	andeq	r9, r1, r4, asr pc
   19f48:	cmp	r4, r1
   19f4c:	bne	19eac <__assert_fail@plt+0x8cc4>
   19f50:	b	19d10 <__assert_fail@plt+0x8b28>
   19f54:	ldr	fp, [sp, #84]	; 0x54
   19f58:	ldr	sl, [sp, #88]	; 0x58
   19f5c:	mov	r8, #2
   19f60:	b	1941c <__assert_fail@plt+0x8234>
   19f64:	cmp	sl, r4
   19f68:	movls	r1, r4
   19f6c:	bls	1956c <__assert_fail@plt+0x8384>
   19f70:	ldr	r3, [sp, #44]	; 0x2c
   19f74:	b	1955c <__assert_fail@plt+0x8374>
   19f78:	str	sl, [sp, #72]	; 0x48
   19f7c:	ldr	sl, [sp, #32]
   19f80:	b	19394 <__assert_fail@plt+0x81ac>
   19f84:	add	r9, r9, #1
   19f88:	b	18c88 <__assert_fail@plt+0x7aa0>
   19f8c:	ldr	r2, [sp, #28]
   19f90:	mov	r6, #0
   19f94:	b	19d60 <__assert_fail@plt+0x8b78>
   19f98:	str	fp, [sp, #160]	; 0xa0
   19f9c:	str	r3, [sp, #28]
   19fa0:	mov	fp, r8
   19fa4:	ldr	r8, [sp, #160]	; 0xa0
   19fa8:	b	1941c <__assert_fail@plt+0x8234>
   19fac:	str	r6, [sp, #44]	; 0x2c
   19fb0:	ldr	r6, [sp, #48]	; 0x30
   19fb4:	b	193c4 <__assert_fail@plt+0x81dc>
   19fb8:	str	r6, [sp, #44]	; 0x2c
   19fbc:	ldr	r6, [sp, #48]	; 0x30
   19fc0:	b	191d0 <__assert_fail@plt+0x7fe8>
   19fc4:	add	r4, r4, #4
   19fc8:	str	r3, [sp, #44]	; 0x2c
   19fcc:	mov	r6, #0
   19fd0:	mov	r5, #48	; 0x30
   19fd4:	b	19158 <__assert_fail@plt+0x7f70>
   19fd8:	mov	r7, r3
   19fdc:	b	19e20 <__assert_fail@plt+0x8c38>
   19fe0:	ldr	r3, [pc, #-1624]	; 19990 <__assert_fail@plt+0x87a8>
   19fe4:	mov	r4, #1
   19fe8:	str	r4, [sp, #40]	; 0x28
   19fec:	str	r4, [sp, #28]
   19ff0:	str	r4, [sp, #52]	; 0x34
   19ff4:	str	sl, [sp, #72]	; 0x48
   19ff8:	str	sl, [sp, #68]	; 0x44
   19ffc:	str	sl, [sp, #44]	; 0x2c
   1a000:	str	sl, [sp, #32]
   1a004:	str	r3, [sp, #60]	; 0x3c
   1a008:	b	18c78 <__assert_fail@plt+0x7a90>
   1a00c:	mov	r3, r6
   1a010:	mov	r5, #48	; 0x30
   1a014:	mov	r6, #0
   1a018:	b	19158 <__assert_fail@plt+0x7f70>
   1a01c:	cmp	sl, r4
   1a020:	movhi	r3, #48	; 0x30
   1a024:	strbhi	r3, [r8, r4]
   1a028:	add	r3, r1, #2
   1a02c:	cmp	sl, r3
   1a030:	movhi	r0, #48	; 0x30
   1a034:	strbhi	r0, [r8, r3]
   1a038:	add	r4, r1, #3
   1a03c:	mov	r5, #48	; 0x30
   1a040:	b	195a0 <__assert_fail@plt+0x83b8>
   1a044:	str	fp, [sp, #160]	; 0xa0
   1a048:	mov	fp, r8
   1a04c:	ldr	r8, [sp, #160]	; 0xa0
   1a050:	b	1941c <__assert_fail@plt+0x8234>
   1a054:	ldr	r2, [sp, #80]	; 0x50
   1a058:	ldrb	r3, [r2]
   1a05c:	cmp	r3, #0
   1a060:	beq	18c48 <__assert_fail@plt+0x7a60>
   1a064:	cmp	sl, r4
   1a068:	strbhi	r3, [fp, r4]
   1a06c:	ldrb	r3, [r2, #1]!
   1a070:	add	r4, r4, #1
   1a074:	cmp	r3, #0
   1a078:	bne	1a064 <__assert_fail@plt+0x8e7c>
   1a07c:	b	18c48 <__assert_fail@plt+0x7a60>
   1a080:	str	fp, [sp, #160]	; 0xa0
   1a084:	mov	r3, #0
   1a088:	mov	fp, r8
   1a08c:	ldr	r8, [sp, #160]	; 0xa0
   1a090:	b	194b0 <__assert_fail@plt+0x82c8>
   1a094:	mov	ip, r5
   1a098:	ldr	r7, [sp, #96]	; 0x60
   1a09c:	ldr	r5, [sp, #92]	; 0x5c
   1a0a0:	ldr	r4, [sp, #100]	; 0x64
   1a0a4:	ldr	r8, [sp, #84]	; 0x54
   1a0a8:	ldr	sl, [sp, #88]	; 0x58
   1a0ac:	ldr	r2, [sp, #28]
   1a0b0:	mov	r6, #0
   1a0b4:	b	19d58 <__assert_fail@plt+0x8b70>
   1a0b8:	ldr	r2, [sp, #36]	; 0x24
   1a0bc:	ldrb	r1, [r2, r3]
   1a0c0:	sub	r2, r1, #33	; 0x21
   1a0c4:	cmp	r2, #29
   1a0c8:	ldrls	pc, [pc, r2, lsl #2]
   1a0cc:	b	1a1a8 <__assert_fail@plt+0x8fc0>
   1a0d0:	andeq	sl, r1, r8, asr #2
   1a0d4:	andeq	sl, r1, r8, lsr #3
   1a0d8:	andeq	sl, r1, r8, lsr #3
   1a0dc:	andeq	sl, r1, r8, lsr #3
   1a0e0:	andeq	sl, r1, r8, lsr #3
   1a0e4:	andeq	sl, r1, r8, lsr #3
   1a0e8:	andeq	sl, r1, r8, asr #2
   1a0ec:	andeq	sl, r1, r8, asr #2
   1a0f0:	andeq	sl, r1, r8, asr #2
   1a0f4:	andeq	sl, r1, r8, lsr #3
   1a0f8:	andeq	sl, r1, r8, lsr #3
   1a0fc:	andeq	sl, r1, r8, lsr #3
   1a100:	andeq	sl, r1, r8, asr #2
   1a104:	andeq	sl, r1, r8, lsr #3
   1a108:	andeq	sl, r1, r8, asr #2
   1a10c:	andeq	sl, r1, r8, lsr #3
   1a110:	andeq	sl, r1, r8, lsr #3
   1a114:	andeq	sl, r1, r8, lsr #3
   1a118:	andeq	sl, r1, r8, lsr #3
   1a11c:	andeq	sl, r1, r8, lsr #3
   1a120:	andeq	sl, r1, r8, lsr #3
   1a124:	andeq	sl, r1, r8, lsr #3
   1a128:	andeq	sl, r1, r8, lsr #3
   1a12c:	andeq	sl, r1, r8, lsr #3
   1a130:	andeq	sl, r1, r8, lsr #3
   1a134:	andeq	sl, r1, r8, lsr #3
   1a138:	andeq	sl, r1, r8, lsr #3
   1a13c:	andeq	sl, r1, r8, asr #2
   1a140:	andeq	sl, r1, r8, asr #2
   1a144:	andeq	sl, r1, r8, asr #2
   1a148:	ldr	r2, [sp, #32]
   1a14c:	cmp	r2, #0
   1a150:	bne	1a254 <__assert_fail@plt+0x906c>
   1a154:	cmp	sl, r4
   1a158:	movhi	r2, #63	; 0x3f
   1a15c:	strbhi	r2, [r8, r4]
   1a160:	add	r2, r4, #1
   1a164:	cmp	sl, r2
   1a168:	movhi	r0, #34	; 0x22
   1a16c:	strbhi	r0, [r8, r2]
   1a170:	add	r2, r4, #2
   1a174:	cmp	sl, r2
   1a178:	movhi	r0, #34	; 0x22
   1a17c:	strbhi	r0, [r8, r2]
   1a180:	add	r2, r4, #3
   1a184:	cmp	sl, r2
   1a188:	movhi	r0, #63	; 0x3f
   1a18c:	strbhi	r0, [r8, r2]
   1a190:	mov	r2, #0
   1a194:	add	r4, r4, #4
   1a198:	mov	r5, r1
   1a19c:	mov	r9, r3
   1a1a0:	mov	r6, r2
   1a1a4:	b	195a0 <__assert_fail@plt+0x83b8>
   1a1a8:	mov	r2, #0
   1a1ac:	mov	r6, r2
   1a1b0:	b	19110 <__assert_fail@plt+0x7f28>
   1a1b4:	ldr	r0, [sp, #24]
   1a1b8:	mov	r1, r4
   1a1bc:	cmp	r1, r0
   1a1c0:	mov	r2, r7
   1a1c4:	mov	r3, r5
   1a1c8:	mov	ip, r5
   1a1cc:	ldr	r7, [sp, #96]	; 0x60
   1a1d0:	ldr	r5, [sp, #92]	; 0x5c
   1a1d4:	ldr	r4, [sp, #100]	; 0x64
   1a1d8:	ldr	r8, [sp, #84]	; 0x54
   1a1dc:	ldr	sl, [sp, #88]	; 0x58
   1a1e0:	bcs	1a214 <__assert_fail@plt+0x902c>
   1a1e4:	ldrb	r6, [r2]
   1a1e8:	cmp	r6, #0
   1a1ec:	bne	1a200 <__assert_fail@plt+0x9018>
   1a1f0:	b	1a330 <__assert_fail@plt+0x9148>
   1a1f4:	ldrb	r6, [r2, #1]!
   1a1f8:	cmp	r6, #0
   1a1fc:	beq	1a2b8 <__assert_fail@plt+0x90d0>
   1a200:	add	r3, r3, #1
   1a204:	add	r1, r9, r3
   1a208:	cmp	r1, r0
   1a20c:	bcc	1a1f4 <__assert_fail@plt+0x900c>
   1a210:	mov	ip, r3
   1a214:	ldr	r2, [sp, #28]
   1a218:	mov	r6, #0
   1a21c:	b	19d58 <__assert_fail@plt+0x8b70>
   1a220:	mov	r3, #1
   1a224:	str	r3, [sp, #40]	; 0x28
   1a228:	str	r3, [sp, #32]
   1a22c:	str	r3, [sp, #28]
   1a230:	str	r3, [sp, #52]	; 0x34
   1a234:	ldr	r3, [pc, #-2220]	; 19990 <__assert_fail@plt+0x87a8>
   1a238:	mov	r2, #0
   1a23c:	str	r2, [sp, #68]	; 0x44
   1a240:	str	r2, [sp, #44]	; 0x2c
   1a244:	str	r2, [sp, #72]	; 0x48
   1a248:	mov	r4, r2
   1a24c:	str	r3, [sp, #60]	; 0x3c
   1a250:	b	18c78 <__assert_fail@plt+0x7a90>
   1a254:	str	fp, [sp, #160]	; 0xa0
   1a258:	mov	fp, r8
   1a25c:	ldr	r8, [sp, #160]	; 0xa0
   1a260:	b	19428 <__assert_fail@plt+0x8240>
   1a264:	mov	r2, r3
   1a268:	ldr	r3, [sp, #60]	; 0x3c
   1a26c:	cmp	r3, #0
   1a270:	moveq	r2, #0
   1a274:	andne	r2, r2, #1
   1a278:	cmp	r2, #0
   1a27c:	beq	1a2a8 <__assert_fail@plt+0x90c0>
   1a280:	mov	r2, r3
   1a284:	ldrb	r3, [r3]
   1a288:	cmp	r3, #0
   1a28c:	beq	1a2a8 <__assert_fail@plt+0x90c0>
   1a290:	cmp	sl, r4
   1a294:	strbhi	r3, [fp, r4]
   1a298:	ldrb	r3, [r2, #1]!
   1a29c:	add	r4, r4, #1
   1a2a0:	cmp	r3, #0
   1a2a4:	bne	1a290 <__assert_fail@plt+0x90a8>
   1a2a8:	cmp	sl, r4
   1a2ac:	movhi	r3, #0
   1a2b0:	strbhi	r3, [fp, r4]
   1a2b4:	b	19468 <__assert_fail@plt+0x8280>
   1a2b8:	mov	ip, r3
   1a2bc:	ldr	r2, [sp, #28]
   1a2c0:	b	19d58 <__assert_fail@plt+0x8b70>
   1a2c4:	str	fp, [sp, #160]	; 0xa0
   1a2c8:	mov	fp, r8
   1a2cc:	ldr	r8, [sp, #160]	; 0xa0
   1a2d0:	sub	r3, r8, #2
   1a2d4:	clz	r3, r3
   1a2d8:	lsr	r3, r3, #5
   1a2dc:	str	r3, [sp, #28]
   1a2e0:	b	1941c <__assert_fail@plt+0x8234>
   1a2e4:	ldr	r3, [sp, #76]	; 0x4c
   1a2e8:	mov	ip, #5
   1a2ec:	str	r3, [sp, #16]
   1a2f0:	ldr	r3, [sp, #80]	; 0x50
   1a2f4:	ldr	r2, [sp, #36]	; 0x24
   1a2f8:	str	r3, [sp, #12]
   1a2fc:	ldr	r3, [sp, #56]	; 0x38
   1a300:	ldr	r1, [sp, #72]	; 0x48
   1a304:	str	r3, [sp, #8]
   1a308:	ldr	r3, [sp, #164]	; 0xa4
   1a30c:	mov	r0, fp
   1a310:	str	r3, [sp, #4]
   1a314:	str	ip, [sp]
   1a318:	ldr	r3, [sp, #24]
   1a31c:	bl	18b80 <__assert_fail@plt+0x7998>
   1a320:	mov	r4, r0
   1a324:	b	19468 <__assert_fail@plt+0x8280>
   1a328:	mov	r8, #2
   1a32c:	b	1941c <__assert_fail@plt+0x8234>
   1a330:	ldr	r2, [sp, #28]
   1a334:	b	19d58 <__assert_fail@plt+0x8b70>
   1a338:	mov	r3, #0
   1a33c:	str	r3, [sp, #68]	; 0x44
   1a340:	str	r3, [sp, #44]	; 0x2c
   1a344:	str	r3, [sp, #72]	; 0x48
   1a348:	str	r3, [sp, #28]
   1a34c:	mov	r4, r3
   1a350:	ldr	r3, [pc, #-2500]	; 19994 <__assert_fail@plt+0x87ac>
   1a354:	mov	r2, #1
   1a358:	str	r2, [sp, #40]	; 0x28
   1a35c:	str	r2, [sp, #32]
   1a360:	str	r2, [sp, #52]	; 0x34
   1a364:	str	r3, [sp, #60]	; 0x3c
   1a368:	b	18c78 <__assert_fail@plt+0x7a90>
   1a36c:	bl	10fd8 <__stack_chk_fail@plt>
   1a370:	mov	r5, r3
   1a374:	mov	r6, #0
   1a378:	b	1916c <__assert_fail@plt+0x7f84>
   1a37c:	mov	r3, #0
   1a380:	mov	r2, #1
   1a384:	str	r3, [sp, #44]	; 0x2c
   1a388:	str	r3, [sp, #72]	; 0x48
   1a38c:	str	r2, [sp, #40]	; 0x28
   1a390:	b	19288 <__assert_fail@plt+0x80a0>
   1a394:	bl	111c4 <abort@plt>
   1a398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a39c:	sub	sp, sp, #44	; 0x2c
   1a3a0:	mov	r6, r0
   1a3a4:	mov	r4, r3
   1a3a8:	mov	sl, r1
   1a3ac:	mov	fp, r2
   1a3b0:	bl	110f8 <__errno_location@plt>
   1a3b4:	ldr	r7, [pc, #364]	; 1a528 <__assert_fail@plt+0x9340>
   1a3b8:	cmp	r6, #0
   1a3bc:	ldr	r5, [r7]
   1a3c0:	ldr	r3, [r0]
   1a3c4:	str	r3, [sp, #24]
   1a3c8:	blt	1a524 <__assert_fail@plt+0x933c>
   1a3cc:	ldr	r3, [r7, #4]
   1a3d0:	mov	r8, r0
   1a3d4:	cmp	r3, r6
   1a3d8:	bgt	1a424 <__assert_fail@plt+0x923c>
   1a3dc:	cmn	r6, #-268435454	; 0xf0000002
   1a3e0:	bgt	1a520 <__assert_fail@plt+0x9338>
   1a3e4:	add	r9, r6, #1
   1a3e8:	add	r3, r7, #8
   1a3ec:	cmp	r5, r3
   1a3f0:	lsl	r1, r9, #3
   1a3f4:	beq	1a500 <__assert_fail@plt+0x9318>
   1a3f8:	mov	r0, r5
   1a3fc:	bl	1b198 <__assert_fail@plt+0x9fb0>
   1a400:	mov	r5, r0
   1a404:	str	r0, [r7]
   1a408:	ldr	r0, [r7, #4]
   1a40c:	mov	r1, #0
   1a410:	sub	r2, r9, r0
   1a414:	add	r0, r5, r0, lsl #3
   1a418:	lsl	r2, r2, #3
   1a41c:	bl	1111c <memset@plt>
   1a420:	str	r9, [r7, #4]
   1a424:	add	r3, r5, r6, lsl #3
   1a428:	ldr	r1, [r4, #4]
   1a42c:	ldr	r7, [r3, #4]
   1a430:	ldr	r9, [r5, r6, lsl #3]
   1a434:	ldr	r2, [r4, #40]	; 0x28
   1a438:	ldr	ip, [r4, #44]	; 0x2c
   1a43c:	str	r3, [sp, #28]
   1a440:	ldr	r3, [r4]
   1a444:	orr	r1, r1, #1
   1a448:	add	lr, r4, #8
   1a44c:	str	r1, [sp, #36]	; 0x24
   1a450:	str	r1, [sp, #4]
   1a454:	str	r2, [sp, #12]
   1a458:	str	r3, [sp]
   1a45c:	mov	r0, r7
   1a460:	mov	r1, r9
   1a464:	str	ip, [sp, #16]
   1a468:	str	lr, [sp, #8]
   1a46c:	mov	r3, fp
   1a470:	mov	r2, sl
   1a474:	str	lr, [sp, #32]
   1a478:	bl	18b80 <__assert_fail@plt+0x7998>
   1a47c:	cmp	r9, r0
   1a480:	bhi	1a4ec <__assert_fail@plt+0x9304>
   1a484:	ldr	r3, [pc, #160]	; 1a52c <__assert_fail@plt+0x9344>
   1a488:	add	r9, r0, #1
   1a48c:	cmp	r7, r3
   1a490:	str	r9, [r5, r6, lsl #3]
   1a494:	beq	1a4a0 <__assert_fail@plt+0x92b8>
   1a498:	mov	r0, r7
   1a49c:	bl	10f6c <free@plt>
   1a4a0:	mov	r0, r9
   1a4a4:	bl	1b13c <__assert_fail@plt+0x9f54>
   1a4a8:	ldr	lr, [sp, #28]
   1a4ac:	ldr	ip, [r4, #44]	; 0x2c
   1a4b0:	ldr	r5, [r4, #40]	; 0x28
   1a4b4:	mov	r3, fp
   1a4b8:	mov	r2, sl
   1a4bc:	mov	r1, r9
   1a4c0:	str	r0, [lr, #4]
   1a4c4:	ldr	lr, [r4]
   1a4c8:	ldr	r4, [sp, #32]
   1a4cc:	str	ip, [sp, #16]
   1a4d0:	str	r4, [sp, #8]
   1a4d4:	ldr	r4, [sp, #36]	; 0x24
   1a4d8:	str	r5, [sp, #12]
   1a4dc:	str	r4, [sp, #4]
   1a4e0:	str	lr, [sp]
   1a4e4:	mov	r7, r0
   1a4e8:	bl	18b80 <__assert_fail@plt+0x7998>
   1a4ec:	ldr	r3, [sp, #24]
   1a4f0:	mov	r0, r7
   1a4f4:	str	r3, [r8]
   1a4f8:	add	sp, sp, #44	; 0x2c
   1a4fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a500:	mov	r0, #0
   1a504:	bl	1b198 <__assert_fail@plt+0x9fb0>
   1a508:	ldr	r3, [pc, #32]	; 1a530 <__assert_fail@plt+0x9348>
   1a50c:	mov	r5, r0
   1a510:	ldm	r3, {r0, r1}
   1a514:	str	r5, [r7]
   1a518:	stm	r5, {r0, r1}
   1a51c:	b	1a408 <__assert_fail@plt+0x9220>
   1a520:	bl	1b384 <__assert_fail@plt+0xa19c>
   1a524:	bl	111c4 <abort@plt>
   1a528:	andeq	pc, r2, r8, lsr #2
   1a52c:			; <UNDEFINED> instruction: 0x0002f1bc
   1a530:	andeq	pc, r2, r0, lsr r1	; <UNPREDICTABLE>
   1a534:	push	{r4, r5, r6, lr}
   1a538:	mov	r5, r0
   1a53c:	bl	110f8 <__errno_location@plt>
   1a540:	cmp	r5, #0
   1a544:	mov	r1, #48	; 0x30
   1a548:	mov	r4, r0
   1a54c:	ldr	r0, [pc, #16]	; 1a564 <__assert_fail@plt+0x937c>
   1a550:	ldr	r6, [r4]
   1a554:	movne	r0, r5
   1a558:	bl	1b344 <__assert_fail@plt+0xa15c>
   1a55c:	str	r6, [r4]
   1a560:	pop	{r4, r5, r6, pc}
   1a564:			; <UNDEFINED> instruction: 0x0002f2bc
   1a568:	ldr	r3, [pc, #12]	; 1a57c <__assert_fail@plt+0x9394>
   1a56c:	cmp	r0, #0
   1a570:	moveq	r0, r3
   1a574:	ldr	r0, [r0]
   1a578:	bx	lr
   1a57c:			; <UNDEFINED> instruction: 0x0002f2bc
   1a580:	ldr	r3, [pc, #12]	; 1a594 <__assert_fail@plt+0x93ac>
   1a584:	cmp	r0, #0
   1a588:	moveq	r0, r3
   1a58c:	str	r1, [r0]
   1a590:	bx	lr
   1a594:			; <UNDEFINED> instruction: 0x0002f2bc
   1a598:	ldr	r3, [pc, #52]	; 1a5d4 <__assert_fail@plt+0x93ec>
   1a59c:	cmp	r0, #0
   1a5a0:	moveq	r0, r3
   1a5a4:	add	r3, r0, #8
   1a5a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a5ac:	lsr	lr, r1, #5
   1a5b0:	and	r1, r1, #31
   1a5b4:	ldr	ip, [r3, lr, lsl #2]
   1a5b8:	lsr	r0, ip, r1
   1a5bc:	eor	r2, r2, r0
   1a5c0:	and	r2, r2, #1
   1a5c4:	and	r0, r0, #1
   1a5c8:	eor	r1, ip, r2, lsl r1
   1a5cc:	str	r1, [r3, lr, lsl #2]
   1a5d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5d4:			; <UNDEFINED> instruction: 0x0002f2bc
   1a5d8:	ldr	r3, [pc, #16]	; 1a5f0 <__assert_fail@plt+0x9408>
   1a5dc:	cmp	r0, #0
   1a5e0:	movne	r3, r0
   1a5e4:	ldr	r0, [r3, #4]
   1a5e8:	str	r1, [r3, #4]
   1a5ec:	bx	lr
   1a5f0:			; <UNDEFINED> instruction: 0x0002f2bc
   1a5f4:	ldr	r3, [pc, #44]	; 1a628 <__assert_fail@plt+0x9440>
   1a5f8:	cmp	r0, #0
   1a5fc:	moveq	r0, r3
   1a600:	mov	ip, #10
   1a604:	cmp	r2, #0
   1a608:	cmpne	r1, #0
   1a60c:	str	ip, [r0]
   1a610:	beq	1a620 <__assert_fail@plt+0x9438>
   1a614:	str	r1, [r0, #40]	; 0x28
   1a618:	str	r2, [r0, #44]	; 0x2c
   1a61c:	bx	lr
   1a620:	push	{r4, lr}
   1a624:	bl	111c4 <abort@plt>
   1a628:			; <UNDEFINED> instruction: 0x0002f2bc
   1a62c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a630:	sub	sp, sp, #24
   1a634:	ldr	ip, [pc, #108]	; 1a6a8 <__assert_fail@plt+0x94c0>
   1a638:	ldr	r4, [sp, #56]	; 0x38
   1a63c:	mov	r9, r2
   1a640:	cmp	r4, #0
   1a644:	moveq	r4, ip
   1a648:	mov	sl, r3
   1a64c:	mov	r7, r0
   1a650:	mov	r8, r1
   1a654:	bl	110f8 <__errno_location@plt>
   1a658:	ldr	r3, [r4, #44]	; 0x2c
   1a65c:	mov	r1, r8
   1a660:	ldr	r6, [r0]
   1a664:	str	r3, [sp, #16]
   1a668:	ldr	r2, [r4, #40]	; 0x28
   1a66c:	add	r3, r4, #8
   1a670:	str	r3, [sp, #8]
   1a674:	str	r2, [sp, #12]
   1a678:	ldr	r2, [r4, #4]
   1a67c:	mov	r5, r0
   1a680:	str	r2, [sp, #4]
   1a684:	ldr	ip, [r4]
   1a688:	mov	r3, sl
   1a68c:	mov	r2, r9
   1a690:	mov	r0, r7
   1a694:	str	ip, [sp]
   1a698:	bl	18b80 <__assert_fail@plt+0x7998>
   1a69c:	str	r6, [r5]
   1a6a0:	add	sp, sp, #24
   1a6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a6a8:			; <UNDEFINED> instruction: 0x0002f2bc
   1a6ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6b0:	cmp	r3, #0
   1a6b4:	sub	sp, sp, #44	; 0x2c
   1a6b8:	ldr	r4, [pc, #192]	; 1a780 <__assert_fail@plt+0x9598>
   1a6bc:	mov	r6, r2
   1a6c0:	movne	r4, r3
   1a6c4:	mov	r9, r1
   1a6c8:	mov	r8, r0
   1a6cc:	bl	110f8 <__errno_location@plt>
   1a6d0:	ldr	r3, [r4, #44]	; 0x2c
   1a6d4:	ldr	r5, [r4, #4]
   1a6d8:	add	sl, r4, #8
   1a6dc:	cmp	r6, #0
   1a6e0:	orreq	r5, r5, #1
   1a6e4:	mov	r1, #0
   1a6e8:	ldr	r2, [r0]
   1a6ec:	str	r3, [sp, #16]
   1a6f0:	ldr	r3, [r4, #40]	; 0x28
   1a6f4:	stmib	sp, {r5, sl}
   1a6f8:	str	r3, [sp, #12]
   1a6fc:	ldr	r3, [r4]
   1a700:	mov	r7, r0
   1a704:	str	r2, [sp, #28]
   1a708:	str	r3, [sp]
   1a70c:	mov	r2, r8
   1a710:	mov	r3, r9
   1a714:	mov	r0, r1
   1a718:	bl	18b80 <__assert_fail@plt+0x7998>
   1a71c:	add	r1, r0, #1
   1a720:	mov	fp, r0
   1a724:	mov	r0, r1
   1a728:	str	r1, [sp, #36]	; 0x24
   1a72c:	bl	1b13c <__assert_fail@plt+0x9f54>
   1a730:	ldr	r3, [r4, #44]	; 0x2c
   1a734:	mov	r2, r8
   1a738:	str	r3, [sp, #16]
   1a73c:	ldr	r3, [r4, #40]	; 0x28
   1a740:	str	r5, [sp, #4]
   1a744:	str	r3, [sp, #12]
   1a748:	str	sl, [sp, #8]
   1a74c:	ldr	ip, [r4]
   1a750:	ldr	r1, [sp, #36]	; 0x24
   1a754:	mov	r3, r9
   1a758:	str	ip, [sp]
   1a75c:	str	r0, [sp, #32]
   1a760:	bl	18b80 <__assert_fail@plt+0x7998>
   1a764:	ldr	r2, [sp, #28]
   1a768:	cmp	r6, #0
   1a76c:	str	r2, [r7]
   1a770:	ldr	r0, [sp, #32]
   1a774:	strne	fp, [r6]
   1a778:	add	sp, sp, #44	; 0x2c
   1a77c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a780:			; <UNDEFINED> instruction: 0x0002f2bc
   1a784:	mov	r3, r2
   1a788:	mov	r2, #0
   1a78c:	b	1a6ac <__assert_fail@plt+0x94c4>
   1a790:	push	{r4, r5, r6, r7, r8, lr}
   1a794:	ldr	r6, [pc, #112]	; 1a80c <__assert_fail@plt+0x9624>
   1a798:	ldr	r3, [r6, #4]
   1a79c:	ldr	r7, [r6]
   1a7a0:	cmp	r3, #1
   1a7a4:	ble	1a7c8 <__assert_fail@plt+0x95e0>
   1a7a8:	sub	r5, r7, #8
   1a7ac:	add	r5, r5, r3, lsl #3
   1a7b0:	mov	r4, r7
   1a7b4:	ldr	r0, [r4, #12]
   1a7b8:	add	r4, r4, #8
   1a7bc:	bl	10f6c <free@plt>
   1a7c0:	cmp	r4, r5
   1a7c4:	bne	1a7b4 <__assert_fail@plt+0x95cc>
   1a7c8:	ldr	r0, [r7, #4]
   1a7cc:	ldr	r4, [pc, #60]	; 1a810 <__assert_fail@plt+0x9628>
   1a7d0:	cmp	r0, r4
   1a7d4:	beq	1a7e8 <__assert_fail@plt+0x9600>
   1a7d8:	bl	10f6c <free@plt>
   1a7dc:	mov	r3, #256	; 0x100
   1a7e0:	str	r4, [r6, #12]
   1a7e4:	str	r3, [r6, #8]
   1a7e8:	ldr	r4, [pc, #36]	; 1a814 <__assert_fail@plt+0x962c>
   1a7ec:	cmp	r7, r4
   1a7f0:	beq	1a800 <__assert_fail@plt+0x9618>
   1a7f4:	mov	r0, r7
   1a7f8:	bl	10f6c <free@plt>
   1a7fc:	str	r4, [r6]
   1a800:	mov	r3, #1
   1a804:	str	r3, [r6, #4]
   1a808:	pop	{r4, r5, r6, r7, r8, pc}
   1a80c:	andeq	pc, r2, r8, lsr #2
   1a810:			; <UNDEFINED> instruction: 0x0002f1bc
   1a814:	andeq	pc, r2, r0, lsr r1	; <UNPREDICTABLE>
   1a818:	ldr	r3, [pc, #4]	; 1a824 <__assert_fail@plt+0x963c>
   1a81c:	mvn	r2, #0
   1a820:	b	1a398 <__assert_fail@plt+0x91b0>
   1a824:			; <UNDEFINED> instruction: 0x0002f2bc
   1a828:	ldr	r3, [pc]	; 1a830 <__assert_fail@plt+0x9648>
   1a82c:	b	1a398 <__assert_fail@plt+0x91b0>
   1a830:			; <UNDEFINED> instruction: 0x0002f2bc
   1a834:	mov	r1, r0
   1a838:	ldr	r3, [pc, #8]	; 1a848 <__assert_fail@plt+0x9660>
   1a83c:	mvn	r2, #0
   1a840:	mov	r0, #0
   1a844:	b	1a398 <__assert_fail@plt+0x91b0>
   1a848:			; <UNDEFINED> instruction: 0x0002f2bc
   1a84c:	mov	r2, r1
   1a850:	ldr	r3, [pc, #8]	; 1a860 <__assert_fail@plt+0x9678>
   1a854:	mov	r1, r0
   1a858:	mov	r0, #0
   1a85c:	b	1a398 <__assert_fail@plt+0x91b0>
   1a860:			; <UNDEFINED> instruction: 0x0002f2bc
   1a864:	push	{r4, r5, r6, lr}
   1a868:	sub	sp, sp, #56	; 0x38
   1a86c:	ldr	r4, [pc, #68]	; 1a8b8 <__assert_fail@plt+0x96d0>
   1a870:	mov	r6, r2
   1a874:	mov	r5, r0
   1a878:	ldr	r3, [r4]
   1a87c:	add	r0, sp, #4
   1a880:	str	r3, [sp, #52]	; 0x34
   1a884:	bl	18a10 <__assert_fail@plt+0x7828>
   1a888:	add	r3, sp, #4
   1a88c:	mvn	r2, #0
   1a890:	mov	r1, r6
   1a894:	mov	r0, r5
   1a898:	bl	1a398 <__assert_fail@plt+0x91b0>
   1a89c:	ldr	r2, [sp, #52]	; 0x34
   1a8a0:	ldr	r3, [r4]
   1a8a4:	cmp	r2, r3
   1a8a8:	bne	1a8b4 <__assert_fail@plt+0x96cc>
   1a8ac:	add	sp, sp, #56	; 0x38
   1a8b0:	pop	{r4, r5, r6, pc}
   1a8b4:	bl	10fd8 <__stack_chk_fail@plt>
   1a8b8:	andeq	lr, r2, r8, lsl #30
   1a8bc:	push	{r4, r5, r6, r7, lr}
   1a8c0:	sub	sp, sp, #60	; 0x3c
   1a8c4:	ldr	r4, [pc, #72]	; 1a914 <__assert_fail@plt+0x972c>
   1a8c8:	mov	r6, r2
   1a8cc:	mov	r7, r3
   1a8d0:	ldr	ip, [r4]
   1a8d4:	mov	r5, r0
   1a8d8:	add	r0, sp, #4
   1a8dc:	str	ip, [sp, #52]	; 0x34
   1a8e0:	bl	18a10 <__assert_fail@plt+0x7828>
   1a8e4:	add	r3, sp, #4
   1a8e8:	mov	r2, r7
   1a8ec:	mov	r1, r6
   1a8f0:	mov	r0, r5
   1a8f4:	bl	1a398 <__assert_fail@plt+0x91b0>
   1a8f8:	ldr	r2, [sp, #52]	; 0x34
   1a8fc:	ldr	r3, [r4]
   1a900:	cmp	r2, r3
   1a904:	bne	1a910 <__assert_fail@plt+0x9728>
   1a908:	add	sp, sp, #60	; 0x3c
   1a90c:	pop	{r4, r5, r6, r7, pc}
   1a910:	bl	10fd8 <__stack_chk_fail@plt>
   1a914:	andeq	lr, r2, r8, lsl #30
   1a918:	mov	r2, r1
   1a91c:	mov	r1, r0
   1a920:	mov	r0, #0
   1a924:	b	1a864 <__assert_fail@plt+0x967c>
   1a928:	mov	r3, r2
   1a92c:	mov	r2, r1
   1a930:	mov	r1, r0
   1a934:	mov	r0, #0
   1a938:	b	1a8bc <__assert_fail@plt+0x96d4>
   1a93c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a940:	mov	r4, r2
   1a944:	ldr	lr, [pc, #128]	; 1a9cc <__assert_fail@plt+0x97e4>
   1a948:	mov	r8, r0
   1a94c:	mov	r9, r1
   1a950:	ldm	lr!, {r0, r1, r2, r3}
   1a954:	sub	sp, sp, #60	; 0x3c
   1a958:	add	ip, sp, #4
   1a95c:	lsr	r6, r4, #5
   1a960:	stmia	ip!, {r0, r1, r2, r3}
   1a964:	add	r7, sp, #12
   1a968:	ldm	lr!, {r0, r1, r2, r3}
   1a96c:	and	r4, r4, #31
   1a970:	ldr	r5, [pc, #88]	; 1a9d0 <__assert_fail@plt+0x97e8>
   1a974:	stmia	ip!, {r0, r1, r2, r3}
   1a978:	ldm	lr, {r0, r1, r2, r3}
   1a97c:	stm	ip, {r0, r1, r2, r3}
   1a980:	mov	r2, r9
   1a984:	ldr	r3, [r7, r6, lsl #2]
   1a988:	ldr	ip, [r5]
   1a98c:	mov	r1, r8
   1a990:	mvn	r0, r3, lsr r4
   1a994:	and	r0, r0, #1
   1a998:	str	ip, [sp, #52]	; 0x34
   1a99c:	eor	r4, r3, r0, lsl r4
   1a9a0:	add	r3, sp, #4
   1a9a4:	mov	r0, #0
   1a9a8:	str	r4, [r7, r6, lsl #2]
   1a9ac:	bl	1a398 <__assert_fail@plt+0x91b0>
   1a9b0:	ldr	r2, [sp, #52]	; 0x34
   1a9b4:	ldr	r3, [r5]
   1a9b8:	cmp	r2, r3
   1a9bc:	bne	1a9c8 <__assert_fail@plt+0x97e0>
   1a9c0:	add	sp, sp, #60	; 0x3c
   1a9c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a9c8:	bl	10fd8 <__stack_chk_fail@plt>
   1a9cc:			; <UNDEFINED> instruction: 0x0002f2bc
   1a9d0:	andeq	lr, r2, r8, lsl #30
   1a9d4:	mov	r2, r1
   1a9d8:	mvn	r1, #0
   1a9dc:	b	1a93c <__assert_fail@plt+0x9754>
   1a9e0:	mov	r2, #58	; 0x3a
   1a9e4:	mvn	r1, #0
   1a9e8:	b	1a93c <__assert_fail@plt+0x9754>
   1a9ec:	mov	r2, #58	; 0x3a
   1a9f0:	b	1a93c <__assert_fail@plt+0x9754>
   1a9f4:	push	{r4, r5, r6, r7, r8, lr}
   1a9f8:	sub	sp, sp, #104	; 0x68
   1a9fc:	ldr	r5, [pc, #120]	; 1aa7c <__assert_fail@plt+0x9894>
   1aa00:	mov	r6, r0
   1aa04:	mov	r0, sp
   1aa08:	ldr	r3, [r5]
   1aa0c:	mov	r7, r2
   1aa10:	str	r3, [sp, #100]	; 0x64
   1aa14:	bl	18a10 <__assert_fail@plt+0x7828>
   1aa18:	mov	ip, sp
   1aa1c:	add	lr, sp, #52	; 0x34
   1aa20:	ldm	ip!, {r0, r1, r2, r3}
   1aa24:	stmia	lr!, {r0, r1, r2, r3}
   1aa28:	ldm	ip!, {r0, r1, r2, r3}
   1aa2c:	ldr	r8, [sp, #64]	; 0x40
   1aa30:	stmia	lr!, {r0, r1, r2, r3}
   1aa34:	mvn	r4, r8
   1aa38:	ldm	ip, {r0, r1, r2, r3}
   1aa3c:	and	ip, r4, #67108864	; 0x4000000
   1aa40:	eor	ip, ip, r8
   1aa44:	str	ip, [sp, #64]	; 0x40
   1aa48:	stm	lr, {r0, r1, r2, r3}
   1aa4c:	add	r3, sp, #52	; 0x34
   1aa50:	mvn	r2, #0
   1aa54:	mov	r1, r7
   1aa58:	mov	r0, r6
   1aa5c:	bl	1a398 <__assert_fail@plt+0x91b0>
   1aa60:	ldr	r2, [sp, #100]	; 0x64
   1aa64:	ldr	r3, [r5]
   1aa68:	cmp	r2, r3
   1aa6c:	bne	1aa78 <__assert_fail@plt+0x9890>
   1aa70:	add	sp, sp, #104	; 0x68
   1aa74:	pop	{r4, r5, r6, r7, r8, pc}
   1aa78:	bl	10fd8 <__stack_chk_fail@plt>
   1aa7c:	andeq	lr, r2, r8, lsl #30
   1aa80:	push	{r4, r5, r6, r7, r8, r9, lr}
   1aa84:	mov	r6, r1
   1aa88:	ldr	lr, [pc, #132]	; 1ab14 <__assert_fail@plt+0x992c>
   1aa8c:	mov	r5, r2
   1aa90:	mov	r8, r0
   1aa94:	mov	r9, r3
   1aa98:	ldm	lr!, {r0, r1, r2, r3}
   1aa9c:	sub	sp, sp, #60	; 0x3c
   1aaa0:	add	ip, sp, #4
   1aaa4:	ldr	r4, [pc, #108]	; 1ab18 <__assert_fail@plt+0x9930>
   1aaa8:	stmia	ip!, {r0, r1, r2, r3}
   1aaac:	mov	r7, #10
   1aab0:	ldm	lr!, {r0, r1, r2, r3}
   1aab4:	cmp	r5, #0
   1aab8:	cmpne	r6, #0
   1aabc:	str	r7, [sp, #4]
   1aac0:	stmia	ip!, {r0, r1, r2, r3}
   1aac4:	ldm	lr, {r0, r1, r2, r3}
   1aac8:	ldr	lr, [r4]
   1aacc:	stm	ip, {r0, r1, r2, r3}
   1aad0:	str	lr, [sp, #52]	; 0x34
   1aad4:	beq	1ab10 <__assert_fail@plt+0x9928>
   1aad8:	add	r3, sp, #4
   1aadc:	ldr	r2, [sp, #88]	; 0x58
   1aae0:	mov	r1, r9
   1aae4:	mov	r0, r8
   1aae8:	str	r6, [sp, #44]	; 0x2c
   1aaec:	str	r5, [sp, #48]	; 0x30
   1aaf0:	bl	1a398 <__assert_fail@plt+0x91b0>
   1aaf4:	ldr	r2, [sp, #52]	; 0x34
   1aaf8:	ldr	r3, [r4]
   1aafc:	cmp	r2, r3
   1ab00:	bne	1ab0c <__assert_fail@plt+0x9924>
   1ab04:	add	sp, sp, #60	; 0x3c
   1ab08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ab0c:	bl	10fd8 <__stack_chk_fail@plt>
   1ab10:	bl	111c4 <abort@plt>
   1ab14:			; <UNDEFINED> instruction: 0x0002f2bc
   1ab18:	andeq	lr, r2, r8, lsl #30
   1ab1c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab20:	sub	sp, sp, #12
   1ab24:	mvn	ip, #0
   1ab28:	str	ip, [sp]
   1ab2c:	bl	1aa80 <__assert_fail@plt+0x9898>
   1ab30:	add	sp, sp, #12
   1ab34:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab38:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab3c:	sub	sp, sp, #12
   1ab40:	mvn	ip, #0
   1ab44:	mov	r3, r2
   1ab48:	str	ip, [sp]
   1ab4c:	mov	r2, r1
   1ab50:	mov	r1, r0
   1ab54:	mov	r0, #0
   1ab58:	bl	1aa80 <__assert_fail@plt+0x9898>
   1ab5c:	add	sp, sp, #12
   1ab60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab64:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab68:	sub	sp, sp, #12
   1ab6c:	str	r3, [sp]
   1ab70:	mov	r3, r2
   1ab74:	mov	r2, r1
   1ab78:	mov	r1, r0
   1ab7c:	mov	r0, #0
   1ab80:	bl	1aa80 <__assert_fail@plt+0x9898>
   1ab84:	add	sp, sp, #12
   1ab88:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab8c:	ldr	r3, [pc]	; 1ab94 <__assert_fail@plt+0x99ac>
   1ab90:	b	1a398 <__assert_fail@plt+0x91b0>
   1ab94:	andeq	pc, r2, r8, lsr r1	; <UNPREDICTABLE>
   1ab98:	mov	r2, r1
   1ab9c:	ldr	r3, [pc, #8]	; 1abac <__assert_fail@plt+0x99c4>
   1aba0:	mov	r1, r0
   1aba4:	mov	r0, #0
   1aba8:	b	1a398 <__assert_fail@plt+0x91b0>
   1abac:	andeq	pc, r2, r8, lsr r1	; <UNPREDICTABLE>
   1abb0:	ldr	r3, [pc, #4]	; 1abbc <__assert_fail@plt+0x99d4>
   1abb4:	mvn	r2, #0
   1abb8:	b	1a398 <__assert_fail@plt+0x91b0>
   1abbc:	andeq	pc, r2, r8, lsr r1	; <UNPREDICTABLE>
   1abc0:	mov	r1, r0
   1abc4:	ldr	r3, [pc, #8]	; 1abd4 <__assert_fail@plt+0x99ec>
   1abc8:	mvn	r2, #0
   1abcc:	mov	r0, #0
   1abd0:	b	1a398 <__assert_fail@plt+0x91b0>
   1abd4:	andeq	pc, r2, r8, lsr r1	; <UNPREDICTABLE>
   1abd8:	mov	r2, #3
   1abdc:	mov	r1, #0
   1abe0:	b	1c610 <__assert_fail@plt+0xb428>
   1abe4:	push	{r4, r5, r6, lr}
   1abe8:	sub	sp, sp, #32
   1abec:	cmp	r1, #0
   1abf0:	mov	r5, r0
   1abf4:	ldr	r4, [sp, #48]	; 0x30
   1abf8:	ldr	r6, [sp, #52]	; 0x34
   1abfc:	beq	1ac8c <__assert_fail@plt+0x9aa4>
   1ac00:	strd	r2, [sp]
   1ac04:	mov	r3, r1
   1ac08:	ldr	r2, [pc, #828]	; 1af4c <__assert_fail@plt+0x9d64>
   1ac0c:	mov	r1, #1
   1ac10:	bl	11140 <__fprintf_chk@plt>
   1ac14:	mov	r2, #5
   1ac18:	ldr	r1, [pc, #816]	; 1af50 <__assert_fail@plt+0x9d68>
   1ac1c:	mov	r0, #0
   1ac20:	bl	10fcc <dcgettext@plt>
   1ac24:	ldr	r3, [pc, #808]	; 1af54 <__assert_fail@plt+0x9d6c>
   1ac28:	ldr	r2, [pc, #808]	; 1af58 <__assert_fail@plt+0x9d70>
   1ac2c:	str	r3, [sp]
   1ac30:	mov	r1, #1
   1ac34:	mov	r3, r0
   1ac38:	mov	r0, r5
   1ac3c:	bl	11140 <__fprintf_chk@plt>
   1ac40:	ldr	r1, [pc, #788]	; 1af5c <__assert_fail@plt+0x9d74>
   1ac44:	mov	r2, #5
   1ac48:	mov	r0, #0
   1ac4c:	bl	10fcc <dcgettext@plt>
   1ac50:	mov	r1, r5
   1ac54:	bl	10f24 <fputs_unlocked@plt>
   1ac58:	cmp	r6, #9
   1ac5c:	ldrls	pc, [pc, r6, lsl #2]
   1ac60:	b	1af3c <__assert_fail@plt+0x9d54>
   1ac64:	andeq	sl, r1, r8, asr #30
   1ac68:	andeq	sl, r1, r0, lsl sp
   1ac6c:	andeq	sl, r1, ip, lsr sp
   1ac70:	andeq	sl, r1, r0, ror sp
   1ac74:	andeq	sl, r1, ip, lsr #27
   1ac78:	andeq	sl, r1, ip, ror #27
   1ac7c:	andeq	sl, r1, r4, lsr lr
   1ac80:	andeq	sl, r1, r4, lsl #29
   1ac84:	ldrdeq	sl, [r1], -ip
   1ac88:	andeq	sl, r1, r4, lsr #25
   1ac8c:	str	r3, [sp]
   1ac90:	mov	r1, #1
   1ac94:	mov	r3, r2
   1ac98:	ldr	r2, [pc, #704]	; 1af60 <__assert_fail@plt+0x9d78>
   1ac9c:	bl	11140 <__fprintf_chk@plt>
   1aca0:	b	1ac14 <__assert_fail@plt+0x9a2c>
   1aca4:	ldr	r1, [pc, #696]	; 1af64 <__assert_fail@plt+0x9d7c>
   1aca8:	mov	r2, #5
   1acac:	mov	r0, #0
   1acb0:	bl	10fcc <dcgettext@plt>
   1acb4:	ldr	r2, [r4, #32]
   1acb8:	ldr	r3, [r4, #28]
   1acbc:	ldr	r1, [r4, #24]
   1acc0:	str	r2, [sp, #28]
   1acc4:	ldr	r2, [r4, #20]
   1acc8:	str	r3, [sp, #24]
   1accc:	ldr	r3, [r4, #16]
   1acd0:	str	r1, [sp, #20]
   1acd4:	ldr	r1, [r4, #12]
   1acd8:	str	r2, [sp, #16]
   1acdc:	ldr	r2, [r4, #8]
   1ace0:	str	r3, [sp, #12]
   1ace4:	ldr	r3, [r4, #4]
   1ace8:	str	r1, [sp, #8]
   1acec:	str	r2, [sp, #4]
   1acf0:	str	r3, [sp]
   1acf4:	mov	r1, #1
   1acf8:	ldr	r3, [r4]
   1acfc:	mov	r2, r0
   1ad00:	mov	r0, r5
   1ad04:	bl	11140 <__fprintf_chk@plt>
   1ad08:	add	sp, sp, #32
   1ad0c:	pop	{r4, r5, r6, pc}
   1ad10:	mov	r2, #5
   1ad14:	ldr	r1, [pc, #588]	; 1af68 <__assert_fail@plt+0x9d80>
   1ad18:	mov	r0, #0
   1ad1c:	bl	10fcc <dcgettext@plt>
   1ad20:	ldr	r3, [r4]
   1ad24:	mov	r1, #1
   1ad28:	mov	r2, r0
   1ad2c:	mov	r0, r5
   1ad30:	add	sp, sp, #32
   1ad34:	pop	{r4, r5, r6, lr}
   1ad38:	b	11140 <__fprintf_chk@plt>
   1ad3c:	mov	r2, #5
   1ad40:	ldr	r1, [pc, #548]	; 1af6c <__assert_fail@plt+0x9d84>
   1ad44:	mov	r0, #0
   1ad48:	bl	10fcc <dcgettext@plt>
   1ad4c:	ldr	r2, [r4, #4]
   1ad50:	ldr	r3, [r4]
   1ad54:	mov	r1, #1
   1ad58:	str	r2, [sp, #48]	; 0x30
   1ad5c:	mov	r2, r0
   1ad60:	mov	r0, r5
   1ad64:	add	sp, sp, #32
   1ad68:	pop	{r4, r5, r6, lr}
   1ad6c:	b	11140 <__fprintf_chk@plt>
   1ad70:	mov	r2, #5
   1ad74:	ldr	r1, [pc, #500]	; 1af70 <__assert_fail@plt+0x9d88>
   1ad78:	mov	r0, #0
   1ad7c:	bl	10fcc <dcgettext@plt>
   1ad80:	ldr	r2, [r4, #8]
   1ad84:	ldr	r3, [r4, #4]
   1ad88:	mov	r1, #1
   1ad8c:	str	r2, [sp, #52]	; 0x34
   1ad90:	str	r3, [sp, #48]	; 0x30
   1ad94:	ldr	r3, [r4]
   1ad98:	mov	r2, r0
   1ad9c:	mov	r0, r5
   1ada0:	add	sp, sp, #32
   1ada4:	pop	{r4, r5, r6, lr}
   1ada8:	b	11140 <__fprintf_chk@plt>
   1adac:	mov	r2, #5
   1adb0:	ldr	r1, [pc, #444]	; 1af74 <__assert_fail@plt+0x9d8c>
   1adb4:	mov	r0, #0
   1adb8:	bl	10fcc <dcgettext@plt>
   1adbc:	ldr	r1, [r4, #12]
   1adc0:	ldr	r2, [r4, #8]
   1adc4:	ldr	r3, [r4, #4]
   1adc8:	str	r1, [sp, #8]
   1adcc:	str	r2, [sp, #4]
   1add0:	str	r3, [sp]
   1add4:	mov	r1, #1
   1add8:	ldr	r3, [r4]
   1addc:	mov	r2, r0
   1ade0:	mov	r0, r5
   1ade4:	bl	11140 <__fprintf_chk@plt>
   1ade8:	b	1ad08 <__assert_fail@plt+0x9b20>
   1adec:	mov	r2, #5
   1adf0:	ldr	r1, [pc, #384]	; 1af78 <__assert_fail@plt+0x9d90>
   1adf4:	mov	r0, #0
   1adf8:	bl	10fcc <dcgettext@plt>
   1adfc:	ldr	r3, [r4, #16]
   1ae00:	ldr	r1, [r4, #12]
   1ae04:	ldr	r2, [r4, #8]
   1ae08:	str	r3, [sp, #12]
   1ae0c:	ldr	r3, [r4, #4]
   1ae10:	str	r1, [sp, #8]
   1ae14:	str	r2, [sp, #4]
   1ae18:	str	r3, [sp]
   1ae1c:	mov	r1, #1
   1ae20:	ldr	r3, [r4]
   1ae24:	mov	r2, r0
   1ae28:	mov	r0, r5
   1ae2c:	bl	11140 <__fprintf_chk@plt>
   1ae30:	b	1ad08 <__assert_fail@plt+0x9b20>
   1ae34:	mov	r2, #5
   1ae38:	ldr	r1, [pc, #316]	; 1af7c <__assert_fail@plt+0x9d94>
   1ae3c:	mov	r0, #0
   1ae40:	bl	10fcc <dcgettext@plt>
   1ae44:	ldr	r2, [r4, #20]
   1ae48:	ldr	r3, [r4, #16]
   1ae4c:	ldr	r1, [r4, #12]
   1ae50:	str	r2, [sp, #16]
   1ae54:	ldr	r2, [r4, #8]
   1ae58:	str	r3, [sp, #12]
   1ae5c:	ldr	r3, [r4, #4]
   1ae60:	str	r1, [sp, #8]
   1ae64:	str	r2, [sp, #4]
   1ae68:	str	r3, [sp]
   1ae6c:	mov	r1, #1
   1ae70:	ldr	r3, [r4]
   1ae74:	mov	r2, r0
   1ae78:	mov	r0, r5
   1ae7c:	bl	11140 <__fprintf_chk@plt>
   1ae80:	b	1ad08 <__assert_fail@plt+0x9b20>
   1ae84:	mov	r2, #5
   1ae88:	ldr	r1, [pc, #240]	; 1af80 <__assert_fail@plt+0x9d98>
   1ae8c:	mov	r0, #0
   1ae90:	bl	10fcc <dcgettext@plt>
   1ae94:	ldr	r1, [r4, #24]
   1ae98:	ldr	r2, [r4, #20]
   1ae9c:	ldr	r3, [r4, #16]
   1aea0:	str	r1, [sp, #20]
   1aea4:	ldr	r1, [r4, #12]
   1aea8:	str	r2, [sp, #16]
   1aeac:	ldr	r2, [r4, #8]
   1aeb0:	str	r3, [sp, #12]
   1aeb4:	ldr	r3, [r4, #4]
   1aeb8:	str	r1, [sp, #8]
   1aebc:	str	r2, [sp, #4]
   1aec0:	str	r3, [sp]
   1aec4:	mov	r1, #1
   1aec8:	ldr	r3, [r4]
   1aecc:	mov	r2, r0
   1aed0:	mov	r0, r5
   1aed4:	bl	11140 <__fprintf_chk@plt>
   1aed8:	b	1ad08 <__assert_fail@plt+0x9b20>
   1aedc:	mov	r2, #5
   1aee0:	ldr	r1, [pc, #156]	; 1af84 <__assert_fail@plt+0x9d9c>
   1aee4:	mov	r0, #0
   1aee8:	bl	10fcc <dcgettext@plt>
   1aeec:	ldr	r3, [r4, #28]
   1aef0:	ldr	r1, [r4, #24]
   1aef4:	ldr	r2, [r4, #20]
   1aef8:	str	r3, [sp, #24]
   1aefc:	ldr	r3, [r4, #16]
   1af00:	str	r1, [sp, #20]
   1af04:	ldr	r1, [r4, #12]
   1af08:	str	r2, [sp, #16]
   1af0c:	ldr	r2, [r4, #8]
   1af10:	str	r3, [sp, #12]
   1af14:	ldr	r3, [r4, #4]
   1af18:	str	r1, [sp, #8]
   1af1c:	str	r2, [sp, #4]
   1af20:	str	r3, [sp]
   1af24:	mov	r1, #1
   1af28:	ldr	r3, [r4]
   1af2c:	mov	r2, r0
   1af30:	mov	r0, r5
   1af34:	bl	11140 <__fprintf_chk@plt>
   1af38:	b	1ad08 <__assert_fail@plt+0x9b20>
   1af3c:	mov	r2, #5
   1af40:	ldr	r1, [pc, #64]	; 1af88 <__assert_fail@plt+0x9da0>
   1af44:	b	1acac <__assert_fail@plt+0x9ac4>
   1af48:	bl	111c4 <abort@plt>
   1af4c:	andeq	sp, r1, r0, asr #27
   1af50:	ldrdeq	sp, [r1], -r4
   1af54:	andeq	r0, r0, r2, ror #15
   1af58:	andeq	lr, r1, r8, lsr #1
   1af5c:	ldrdeq	sp, [r1], -r8
   1af60:	andeq	sp, r1, ip, asr #27
   1af64:			; <UNDEFINED> instruction: 0x0001dfb0
   1af68:	andeq	sp, r1, r4, lsr #29
   1af6c:			; <UNDEFINED> instruction: 0x0001deb4
   1af70:	andeq	sp, r1, ip, asr #29
   1af74:	andeq	sp, r1, r8, ror #29
   1af78:	andeq	sp, r1, r8, lsl #30
   1af7c:	andeq	sp, r1, ip, lsr #30
   1af80:	andeq	sp, r1, r4, asr pc
   1af84:	andeq	sp, r1, r0, lsl #31
   1af88:	andeq	sp, r1, r4, ror #31
   1af8c:	push	{r4, r5, lr}
   1af90:	sub	sp, sp, #12
   1af94:	ldr	r5, [sp, #24]
   1af98:	ldr	ip, [r5]
   1af9c:	cmp	ip, #0
   1afa0:	beq	1afbc <__assert_fail@plt+0x9dd4>
   1afa4:	mov	lr, r5
   1afa8:	mov	ip, #0
   1afac:	ldr	r4, [lr, #4]!
   1afb0:	add	ip, ip, #1
   1afb4:	cmp	r4, #0
   1afb8:	bne	1afac <__assert_fail@plt+0x9dc4>
   1afbc:	stm	sp, {r5, ip}
   1afc0:	bl	1abe4 <__assert_fail@plt+0x99fc>
   1afc4:	add	sp, sp, #12
   1afc8:	pop	{r4, r5, pc}
   1afcc:	push	{r4, r5, r6, lr}
   1afd0:	sub	sp, sp, #56	; 0x38
   1afd4:	ldr	r6, [pc, #88]	; 1b034 <__assert_fail@plt+0x9e4c>
   1afd8:	ldr	r5, [sp, #72]	; 0x48
   1afdc:	add	r4, sp, #8
   1afe0:	ldr	ip, [r6]
   1afe4:	str	ip, [sp, #52]	; 0x34
   1afe8:	mov	ip, #0
   1afec:	ldr	lr, [r5], #4
   1aff0:	cmp	lr, #0
   1aff4:	str	lr, [r4, #4]!
   1aff8:	beq	1b008 <__assert_fail@plt+0x9e20>
   1affc:	add	ip, ip, #1
   1b000:	cmp	ip, #10
   1b004:	bne	1afec <__assert_fail@plt+0x9e04>
   1b008:	add	lr, sp, #12
   1b00c:	str	ip, [sp, #4]
   1b010:	str	lr, [sp]
   1b014:	bl	1abe4 <__assert_fail@plt+0x99fc>
   1b018:	ldr	r2, [sp, #52]	; 0x34
   1b01c:	ldr	r3, [r6]
   1b020:	cmp	r2, r3
   1b024:	bne	1b030 <__assert_fail@plt+0x9e48>
   1b028:	add	sp, sp, #56	; 0x38
   1b02c:	pop	{r4, r5, r6, pc}
   1b030:	bl	10fd8 <__stack_chk_fail@plt>
   1b034:	andeq	lr, r2, r8, lsl #30
   1b038:	push	{r3}		; (str r3, [sp, #-4]!)
   1b03c:	mov	ip, #0
   1b040:	push	{r4, r5, r6, lr}
   1b044:	sub	sp, sp, #60	; 0x3c
   1b048:	ldr	r6, [pc, #100]	; 1b0b4 <__assert_fail@plt+0x9ecc>
   1b04c:	add	r5, sp, #8
   1b050:	add	r4, sp, #80	; 0x50
   1b054:	ldr	r3, [r6]
   1b058:	str	r4, [sp, #8]
   1b05c:	str	r3, [sp, #52]	; 0x34
   1b060:	ldr	r3, [sp, #76]	; 0x4c
   1b064:	ldr	lr, [r4], #4
   1b068:	cmp	lr, #0
   1b06c:	str	lr, [r5, #4]!
   1b070:	beq	1b080 <__assert_fail@plt+0x9e98>
   1b074:	add	ip, ip, #1
   1b078:	cmp	ip, #10
   1b07c:	bne	1b064 <__assert_fail@plt+0x9e7c>
   1b080:	add	lr, sp, #12
   1b084:	str	ip, [sp, #4]
   1b088:	str	lr, [sp]
   1b08c:	bl	1abe4 <__assert_fail@plt+0x99fc>
   1b090:	ldr	r2, [sp, #52]	; 0x34
   1b094:	ldr	r3, [r6]
   1b098:	cmp	r2, r3
   1b09c:	bne	1b0b0 <__assert_fail@plt+0x9ec8>
   1b0a0:	add	sp, sp, #60	; 0x3c
   1b0a4:	pop	{r4, r5, r6, lr}
   1b0a8:	add	sp, sp, #4
   1b0ac:	bx	lr
   1b0b0:	bl	10fd8 <__stack_chk_fail@plt>
   1b0b4:	andeq	lr, r2, r8, lsl #30
   1b0b8:	push	{r4, lr}
   1b0bc:	mov	r2, #5
   1b0c0:	ldr	r1, [pc, #88]	; 1b120 <__assert_fail@plt+0x9f38>
   1b0c4:	mov	r0, #0
   1b0c8:	bl	10fcc <dcgettext@plt>
   1b0cc:	ldr	r2, [pc, #80]	; 1b124 <__assert_fail@plt+0x9f3c>
   1b0d0:	mov	r1, r0
   1b0d4:	mov	r0, #1
   1b0d8:	bl	11128 <__printf_chk@plt>
   1b0dc:	mov	r2, #5
   1b0e0:	ldr	r1, [pc, #64]	; 1b128 <__assert_fail@plt+0x9f40>
   1b0e4:	mov	r0, #0
   1b0e8:	bl	10fcc <dcgettext@plt>
   1b0ec:	ldr	r3, [pc, #56]	; 1b12c <__assert_fail@plt+0x9f44>
   1b0f0:	ldr	r2, [pc, #56]	; 1b130 <__assert_fail@plt+0x9f48>
   1b0f4:	mov	r1, r0
   1b0f8:	mov	r0, #1
   1b0fc:	bl	11128 <__printf_chk@plt>
   1b100:	ldr	r1, [pc, #44]	; 1b134 <__assert_fail@plt+0x9f4c>
   1b104:	mov	r2, #5
   1b108:	mov	r0, #0
   1b10c:	bl	10fcc <dcgettext@plt>
   1b110:	ldr	r3, [pc, #32]	; 1b138 <__assert_fail@plt+0x9f50>
   1b114:	pop	{r4, lr}
   1b118:	ldr	r1, [r3]
   1b11c:	b	10f24 <fputs_unlocked@plt>
   1b120:	andeq	lr, r1, r0, lsr #32
   1b124:	andeq	lr, r1, r8, lsr r0
   1b128:	andeq	lr, r1, r0, asr r0
   1b12c:	andeq	sp, r1, r8, lsr r5
   1b130:	andeq	sp, r1, r0, ror #10
   1b134:	andeq	lr, r1, r4, rrx
   1b138:	andeq	pc, r2, r4, lsl #3
   1b13c:	push	{r4, lr}
   1b140:	mov	r4, r0
   1b144:	bl	11068 <malloc@plt>
   1b148:	adds	r4, r4, #0
   1b14c:	movne	r4, #1
   1b150:	cmp	r0, #0
   1b154:	movne	r4, #0
   1b158:	cmp	r4, #0
   1b15c:	popeq	{r4, pc}
   1b160:	bl	1b384 <__assert_fail@plt+0xa19c>
   1b164:	push	{r4, r5, r6, lr}
   1b168:	umull	r4, r5, r0, r1
   1b16c:	adds	r3, r5, #0
   1b170:	movne	r3, #1
   1b174:	cmp	r4, #0
   1b178:	blt	1b190 <__assert_fail@plt+0x9fa8>
   1b17c:	cmp	r3, #0
   1b180:	bne	1b190 <__assert_fail@plt+0x9fa8>
   1b184:	mul	r0, r1, r0
   1b188:	pop	{r4, r5, r6, lr}
   1b18c:	b	1b13c <__assert_fail@plt+0x9f54>
   1b190:	bl	1b384 <__assert_fail@plt+0xa19c>
   1b194:	b	1b13c <__assert_fail@plt+0x9f54>
   1b198:	adds	r3, r0, #0
   1b19c:	movne	r3, #1
   1b1a0:	cmp	r1, #0
   1b1a4:	movne	r3, #0
   1b1a8:	cmp	r3, #0
   1b1ac:	push	{r4, lr}
   1b1b0:	bne	1b1d8 <__assert_fail@plt+0x9ff0>
   1b1b4:	mov	r4, r1
   1b1b8:	bl	10fe4 <realloc@plt>
   1b1bc:	adds	r4, r4, #0
   1b1c0:	movne	r4, #1
   1b1c4:	cmp	r0, #0
   1b1c8:	movne	r4, #0
   1b1cc:	cmp	r4, #0
   1b1d0:	popeq	{r4, pc}
   1b1d4:	bl	1b384 <__assert_fail@plt+0xa19c>
   1b1d8:	bl	10f6c <free@plt>
   1b1dc:	mov	r0, #0
   1b1e0:	pop	{r4, pc}
   1b1e4:	push	{r4, r5, r6, lr}
   1b1e8:	umull	r4, r5, r1, r2
   1b1ec:	adds	r3, r5, #0
   1b1f0:	movne	r3, #1
   1b1f4:	cmp	r4, #0
   1b1f8:	blt	1b210 <__assert_fail@plt+0xa028>
   1b1fc:	cmp	r3, #0
   1b200:	bne	1b210 <__assert_fail@plt+0xa028>
   1b204:	mul	r1, r2, r1
   1b208:	pop	{r4, r5, r6, lr}
   1b20c:	b	1b198 <__assert_fail@plt+0x9fb0>
   1b210:	bl	1b384 <__assert_fail@plt+0xa19c>
   1b214:	push	{r4, r5, r6, r7, r8, lr}
   1b218:	subs	r7, r0, #0
   1b21c:	mov	r6, r1
   1b220:	mov	r5, r2
   1b224:	ldr	r4, [r1]
   1b228:	beq	1b25c <__assert_fail@plt+0xa074>
   1b22c:	mov	r1, r2
   1b230:	ldr	r0, [pc, #104]	; 1b2a0 <__assert_fail@plt+0xa0b8>
   1b234:	bl	1c9d0 <__assert_fail@plt+0xb7e8>
   1b238:	cmp	r0, r4
   1b23c:	bls	1b280 <__assert_fail@plt+0xa098>
   1b240:	add	r3, r4, #1
   1b244:	add	r4, r3, r4, lsr #1
   1b248:	str	r4, [r6]
   1b24c:	mul	r1, r5, r4
   1b250:	mov	r0, r7
   1b254:	pop	{r4, r5, r6, r7, r8, lr}
   1b258:	b	1b198 <__assert_fail@plt+0x9fb0>
   1b25c:	cmp	r4, #0
   1b260:	beq	1b284 <__assert_fail@plt+0xa09c>
   1b264:	umull	r0, r1, r4, r5
   1b268:	adds	r3, r1, #0
   1b26c:	movne	r3, #1
   1b270:	cmp	r0, #0
   1b274:	blt	1b280 <__assert_fail@plt+0xa098>
   1b278:	cmp	r3, #0
   1b27c:	beq	1b248 <__assert_fail@plt+0xa060>
   1b280:	bl	1b384 <__assert_fail@plt+0xa19c>
   1b284:	mov	r1, r2
   1b288:	mov	r0, #64	; 0x40
   1b28c:	bl	1c9d0 <__assert_fail@plt+0xb7e8>
   1b290:	cmp	r5, #64	; 0x40
   1b294:	movls	r4, r0
   1b298:	addhi	r4, r0, #1
   1b29c:	b	1b264 <__assert_fail@plt+0xa07c>
   1b2a0:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1b2a4:	cmp	r0, #0
   1b2a8:	ldr	r3, [r1]
   1b2ac:	beq	1b2d0 <__assert_fail@plt+0xa0e8>
   1b2b0:	ldr	r2, [pc, #60]	; 1b2f4 <__assert_fail@plt+0xa10c>
   1b2b4:	cmp	r3, r2
   1b2b8:	bhi	1b2ec <__assert_fail@plt+0xa104>
   1b2bc:	add	r2, r3, #1
   1b2c0:	add	r3, r2, r3, lsr #1
   1b2c4:	str	r3, [r1]
   1b2c8:	mov	r1, r3
   1b2cc:	b	1b198 <__assert_fail@plt+0x9fb0>
   1b2d0:	cmp	r3, #0
   1b2d4:	bne	1b2e8 <__assert_fail@plt+0xa100>
   1b2d8:	mov	r3, #64	; 0x40
   1b2dc:	str	r3, [r1]
   1b2e0:	mov	r1, r3
   1b2e4:	b	1b198 <__assert_fail@plt+0x9fb0>
   1b2e8:	bge	1b2c4 <__assert_fail@plt+0xa0dc>
   1b2ec:	push	{r4, lr}
   1b2f0:	bl	1b384 <__assert_fail@plt+0xa19c>
   1b2f4:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   1b2f8:	push	{r4, lr}
   1b2fc:	mov	r4, r0
   1b300:	bl	1b13c <__assert_fail@plt+0x9f54>
   1b304:	mov	r2, r4
   1b308:	mov	r1, #0
   1b30c:	pop	{r4, lr}
   1b310:	b	1111c <memset@plt>
   1b314:	push	{r4, r5, r6, lr}
   1b318:	umull	r4, r5, r0, r1
   1b31c:	adds	r3, r5, #0
   1b320:	movne	r3, #1
   1b324:	cmp	r4, #0
   1b328:	blt	1b340 <__assert_fail@plt+0xa158>
   1b32c:	cmp	r3, #0
   1b330:	bne	1b340 <__assert_fail@plt+0xa158>
   1b334:	bl	10f18 <calloc@plt>
   1b338:	cmp	r0, #0
   1b33c:	popne	{r4, r5, r6, pc}
   1b340:	bl	1b384 <__assert_fail@plt+0xa19c>
   1b344:	push	{r4, r5, r6, lr}
   1b348:	mov	r4, r1
   1b34c:	mov	r5, r0
   1b350:	mov	r0, r1
   1b354:	bl	1b13c <__assert_fail@plt+0x9f54>
   1b358:	mov	r2, r4
   1b35c:	mov	r1, r5
   1b360:	pop	{r4, r5, r6, lr}
   1b364:	b	10f90 <memcpy@plt>
   1b368:	push	{r4, lr}
   1b36c:	mov	r4, r0
   1b370:	bl	110e0 <strlen@plt>
   1b374:	add	r1, r0, #1
   1b378:	mov	r0, r4
   1b37c:	pop	{r4, lr}
   1b380:	b	1b344 <__assert_fail@plt+0xa15c>
   1b384:	ldr	r3, [pc, #44]	; 1b3b8 <__assert_fail@plt+0xa1d0>
   1b388:	push	{r4, lr}
   1b38c:	mov	r2, #5
   1b390:	ldr	r1, [pc, #36]	; 1b3bc <__assert_fail@plt+0xa1d4>
   1b394:	mov	r0, #0
   1b398:	ldr	r4, [r3]
   1b39c:	bl	10fcc <dcgettext@plt>
   1b3a0:	ldr	r2, [pc, #24]	; 1b3c0 <__assert_fail@plt+0xa1d8>
   1b3a4:	mov	r1, #0
   1b3a8:	mov	r3, r0
   1b3ac:	mov	r0, r4
   1b3b0:	bl	1105c <error@plt>
   1b3b4:	bl	111c4 <abort@plt>
   1b3b8:	andeq	pc, r2, r4, lsr #2
   1b3bc:	ldrdeq	lr, [r1], -r8
   1b3c0:	andeq	sp, r1, r4, asr #12
   1b3c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3c8:	sub	sp, sp, #36	; 0x24
   1b3cc:	ldr	r6, [pc, #312]	; 1b50c <__assert_fail@plt+0xa324>
   1b3d0:	ldr	lr, [sp, #80]	; 0x50
   1b3d4:	mov	r8, r2
   1b3d8:	ldr	ip, [r6]
   1b3dc:	mov	r2, r1
   1b3e0:	mov	r9, r3
   1b3e4:	str	lr, [sp]
   1b3e8:	add	r3, sp, #16
   1b3ec:	mov	r1, #0
   1b3f0:	str	ip, [sp, #28]
   1b3f4:	mov	r7, r0
   1b3f8:	ldr	sl, [sp, #84]	; 0x54
   1b3fc:	ldr	r5, [sp, #88]	; 0x58
   1b400:	bl	1bb68 <__assert_fail@plt+0xa980>
   1b404:	subs	fp, r0, #0
   1b408:	bne	1b4c8 <__assert_fail@plt+0xa2e0>
   1b40c:	ldrd	r2, [sp, #16]
   1b410:	cmp	r3, r9
   1b414:	cmpeq	r2, r8
   1b418:	ldrd	r8, [sp, #72]	; 0x48
   1b41c:	movcc	r1, #1
   1b420:	movcs	r1, #0
   1b424:	cmp	r3, r9
   1b428:	cmpeq	r2, r8
   1b42c:	orrhi	r1, r1, #1
   1b430:	cmp	r1, #0
   1b434:	beq	1b48c <__assert_fail@plt+0xa2a4>
   1b438:	strd	r2, [sp, #8]
   1b43c:	bl	110f8 <__errno_location@plt>
   1b440:	ldrd	r2, [sp, #8]
   1b444:	mov	r9, #0
   1b448:	mvn	r8, #-1073741824	; 0xc0000000
   1b44c:	cmp	r3, r9
   1b450:	cmpeq	r2, r8
   1b454:	bls	1b4f4 <__assert_fail@plt+0xa30c>
   1b458:	mov	r4, #75	; 0x4b
   1b45c:	cmp	r5, #0
   1b460:	str	r4, [r0]
   1b464:	beq	1b4c0 <__assert_fail@plt+0xa2d8>
   1b468:	mov	r0, r7
   1b46c:	bl	1abc0 <__assert_fail@plt+0x99d8>
   1b470:	mov	r3, sl
   1b474:	ldr	r2, [pc, #148]	; 1b510 <__assert_fail@plt+0xa328>
   1b478:	mov	r1, r4
   1b47c:	str	r0, [sp]
   1b480:	mov	r0, r5
   1b484:	bl	1105c <error@plt>
   1b488:	ldrd	r2, [sp, #16]
   1b48c:	ldr	lr, [sp, #28]
   1b490:	ldr	ip, [r6]
   1b494:	mov	r0, r2
   1b498:	cmp	lr, ip
   1b49c:	mov	r1, r3
   1b4a0:	bne	1b508 <__assert_fail@plt+0xa320>
   1b4a4:	add	sp, sp, #36	; 0x24
   1b4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4ac:	mov	r4, #0
   1b4b0:	cmp	r5, #0
   1b4b4:	str	r4, [r0]
   1b4b8:	bne	1b468 <__assert_fail@plt+0xa280>
   1b4bc:	mov	r4, r5
   1b4c0:	mov	r5, #1
   1b4c4:	b	1b468 <__assert_fail@plt+0xa280>
   1b4c8:	bl	110f8 <__errno_location@plt>
   1b4cc:	cmp	fp, #1
   1b4d0:	beq	1b458 <__assert_fail@plt+0xa270>
   1b4d4:	cmp	fp, #3
   1b4d8:	beq	1b4ac <__assert_fail@plt+0xa2c4>
   1b4dc:	ldr	r4, [r0]
   1b4e0:	cmp	r5, #0
   1b4e4:	moveq	r5, #1
   1b4e8:	cmp	r4, #22
   1b4ec:	moveq	r4, #0
   1b4f0:	b	1b468 <__assert_fail@plt+0xa280>
   1b4f4:	mov	r4, #34	; 0x22
   1b4f8:	cmp	r5, #0
   1b4fc:	str	r4, [r0]
   1b500:	bne	1b468 <__assert_fail@plt+0xa280>
   1b504:	b	1b4c0 <__assert_fail@plt+0xa2d8>
   1b508:	bl	10fd8 <__stack_chk_fail@plt>
   1b50c:	andeq	lr, r2, r8, lsl #30
   1b510:	andeq	sp, r1, r0, lsr #25
   1b514:	mov	r1, #10
   1b518:	b	1b3c4 <__assert_fail@plt+0xa1dc>
   1b51c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b520:	cmp	r2, #36	; 0x24
   1b524:	ldr	r7, [pc, #1580]	; 1bb58 <__assert_fail@plt+0xa970>
   1b528:	sub	sp, sp, #20
   1b52c:	mov	fp, r2
   1b530:	ldr	r2, [r7]
   1b534:	ldr	r9, [sp, #56]	; 0x38
   1b538:	str	r2, [sp, #12]
   1b53c:	bhi	1bb40 <__assert_fail@plt+0xa958>
   1b540:	cmp	r1, #0
   1b544:	mov	r6, r1
   1b548:	mov	r5, r0
   1b54c:	mov	sl, r3
   1b550:	addeq	r6, sp, #8
   1b554:	bl	110f8 <__errno_location@plt>
   1b558:	mov	r3, #0
   1b55c:	str	r3, [r0]
   1b560:	mov	r8, r0
   1b564:	bl	110b0 <__ctype_b_loc@plt>
   1b568:	ldrb	r3, [r5]
   1b56c:	mov	r1, r5
   1b570:	ldr	ip, [r0]
   1b574:	b	1b57c <__assert_fail@plt+0xa394>
   1b578:	ldrb	r3, [r1, #1]!
   1b57c:	lsl	r2, r3, #1
   1b580:	ldrh	r0, [ip, r2]
   1b584:	ands	r4, r0, #8192	; 0x2000
   1b588:	bne	1b578 <__assert_fail@plt+0xa390>
   1b58c:	cmp	r3, #45	; 0x2d
   1b590:	beq	1b61c <__assert_fail@plt+0xa434>
   1b594:	mov	r2, fp
   1b598:	mov	r1, r6
   1b59c:	mov	r0, r5
   1b5a0:	bl	110d4 <strtoul@plt>
   1b5a4:	ldr	r3, [r6]
   1b5a8:	cmp	r3, r5
   1b5ac:	mov	fp, r0
   1b5b0:	beq	1b604 <__assert_fail@plt+0xa41c>
   1b5b4:	ldr	r4, [r8]
   1b5b8:	cmp	r4, #0
   1b5bc:	bne	1b5f4 <__assert_fail@plt+0xa40c>
   1b5c0:	cmp	r9, #0
   1b5c4:	beq	1b5d4 <__assert_fail@plt+0xa3ec>
   1b5c8:	ldrb	r5, [r3]
   1b5cc:	cmp	r5, #0
   1b5d0:	bne	1b98c <__assert_fail@plt+0xa7a4>
   1b5d4:	str	fp, [sl]
   1b5d8:	ldr	r2, [sp, #12]
   1b5dc:	ldr	r3, [r7]
   1b5e0:	mov	r0, r4
   1b5e4:	cmp	r2, r3
   1b5e8:	bne	1bb54 <__assert_fail@plt+0xa96c>
   1b5ec:	add	sp, sp, #20
   1b5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5f4:	cmp	r4, #34	; 0x22
   1b5f8:	bne	1b61c <__assert_fail@plt+0xa434>
   1b5fc:	mov	r4, #1
   1b600:	b	1b5c0 <__assert_fail@plt+0xa3d8>
   1b604:	cmp	r9, #0
   1b608:	str	r3, [sp, #4]
   1b60c:	beq	1b61c <__assert_fail@plt+0xa434>
   1b610:	ldrb	r5, [r5]
   1b614:	cmp	r5, #0
   1b618:	bne	1b624 <__assert_fail@plt+0xa43c>
   1b61c:	mov	r4, #4
   1b620:	b	1b5d8 <__assert_fail@plt+0xa3f0>
   1b624:	mov	r1, r5
   1b628:	mov	r0, r9
   1b62c:	bl	110ec <strchr@plt>
   1b630:	ldr	r3, [sp, #4]
   1b634:	cmp	r0, #0
   1b638:	movne	fp, #1
   1b63c:	beq	1b61c <__assert_fail@plt+0xa434>
   1b640:	sub	r8, r5, #69	; 0x45
   1b644:	cmp	r8, #47	; 0x2f
   1b648:	ldrls	pc, [pc, r8, lsl #2]
   1b64c:	b	1b814 <__assert_fail@plt+0xa62c>
   1b650:	andeq	fp, r1, r0, lsl r7
   1b654:	andeq	fp, r1, r4, lsl r8
   1b658:	andeq	fp, r1, r0, lsl r7
   1b65c:	andeq	fp, r1, r4, lsl r8
   1b660:	andeq	fp, r1, r4, lsl r8
   1b664:	andeq	fp, r1, r4, lsl r8
   1b668:	andeq	fp, r1, r0, lsl r7
   1b66c:	andeq	fp, r1, r4, lsl r8
   1b670:	andeq	fp, r1, r0, lsl r7
   1b674:	andeq	fp, r1, r4, lsl r8
   1b678:	andeq	fp, r1, r4, lsl r8
   1b67c:	andeq	fp, r1, r0, lsl r7
   1b680:	andeq	fp, r1, r4, lsl r8
   1b684:	andeq	fp, r1, r4, lsl r8
   1b688:	andeq	fp, r1, r4, lsl r8
   1b68c:	andeq	fp, r1, r0, lsl r7
   1b690:	andeq	fp, r1, r4, lsl r8
   1b694:	andeq	fp, r1, r4, lsl r8
   1b698:	andeq	fp, r1, r4, lsl r8
   1b69c:	andeq	fp, r1, r4, lsl r8
   1b6a0:	andeq	fp, r1, r0, lsl r7
   1b6a4:	andeq	fp, r1, r0, lsl r7
   1b6a8:	andeq	fp, r1, r4, lsl r8
   1b6ac:	andeq	fp, r1, r4, lsl r8
   1b6b0:	andeq	fp, r1, r4, lsl r8
   1b6b4:	andeq	fp, r1, r4, lsl r8
   1b6b8:	andeq	fp, r1, r4, lsl r8
   1b6bc:	andeq	fp, r1, r4, lsl r8
   1b6c0:	andeq	fp, r1, r4, lsl r8
   1b6c4:	andeq	fp, r1, r4, lsl r8
   1b6c8:	andeq	fp, r1, r4, lsl r8
   1b6cc:	andeq	fp, r1, r4, lsl r8
   1b6d0:	andeq	fp, r1, r4, lsl r8
   1b6d4:	andeq	fp, r1, r4, lsl r8
   1b6d8:	andeq	fp, r1, r0, lsl r7
   1b6dc:	andeq	fp, r1, r4, lsl r8
   1b6e0:	andeq	fp, r1, r4, lsl r8
   1b6e4:	andeq	fp, r1, r4, lsl r8
   1b6e8:	andeq	fp, r1, r0, lsl r7
   1b6ec:	andeq	fp, r1, r4, lsl r8
   1b6f0:	andeq	fp, r1, r0, lsl r7
   1b6f4:	andeq	fp, r1, r4, lsl r8
   1b6f8:	andeq	fp, r1, r4, lsl r8
   1b6fc:	andeq	fp, r1, r4, lsl r8
   1b700:	andeq	fp, r1, r4, lsl r8
   1b704:	andeq	fp, r1, r4, lsl r8
   1b708:	andeq	fp, r1, r4, lsl r8
   1b70c:	andeq	fp, r1, r0, lsl r7
   1b710:	mov	r0, r9
   1b714:	mov	r1, #48	; 0x30
   1b718:	str	r3, [sp, #4]
   1b71c:	bl	110ec <strchr@plt>
   1b720:	ldr	r3, [sp, #4]
   1b724:	cmp	r0, #0
   1b728:	beq	1b814 <__assert_fail@plt+0xa62c>
   1b72c:	ldrb	r2, [r3, #1]
   1b730:	cmp	r2, #68	; 0x44
   1b734:	beq	1bb2c <__assert_fail@plt+0xa944>
   1b738:	cmp	r2, #105	; 0x69
   1b73c:	beq	1b9b4 <__assert_fail@plt+0xa7cc>
   1b740:	cmp	r2, #66	; 0x42
   1b744:	beq	1bb2c <__assert_fail@plt+0xa944>
   1b748:	cmp	r8, #47	; 0x2f
   1b74c:	ldrls	pc, [pc, r8, lsl #2]
   1b750:	b	1b9a8 <__assert_fail@plt+0xa7c0>
   1b754:	andeq	fp, r1, r4, ror #21
   1b758:	andeq	fp, r1, r8, lsr #19
   1b75c:	andeq	fp, r1, r4, lsl #18
   1b760:	andeq	fp, r1, r8, lsr #19
   1b764:	andeq	fp, r1, r8, lsr #19
   1b768:	andeq	fp, r1, r8, lsr #19
   1b76c:	andeq	fp, r1, r0, ror r9
   1b770:	andeq	fp, r1, r8, lsr #19
   1b774:			; <UNDEFINED> instruction: 0x0001bab4
   1b778:	andeq	fp, r1, r8, lsr #19
   1b77c:	andeq	fp, r1, r8, lsr #19
   1b780:	andeq	fp, r1, r4, lsl #21
   1b784:	andeq	fp, r1, r8, lsr #19
   1b788:	andeq	fp, r1, r8, lsr #19
   1b78c:	andeq	fp, r1, r8, lsr #19
   1b790:	andeq	fp, r1, r4, asr sl
   1b794:	andeq	fp, r1, r8, lsr #19
   1b798:	andeq	fp, r1, r8, lsr #19
   1b79c:	andeq	fp, r1, r8, lsr #19
   1b7a0:	andeq	fp, r1, r8, lsr #19
   1b7a4:	andeq	fp, r1, r4, lsr #20
   1b7a8:	strdeq	fp, [r1], -r0
   1b7ac:	andeq	fp, r1, r8, lsr #19
   1b7b0:	andeq	fp, r1, r8, lsr #19
   1b7b4:	andeq	fp, r1, r8, lsr #19
   1b7b8:	andeq	fp, r1, r8, lsr #19
   1b7bc:	andeq	fp, r1, r8, lsr #19
   1b7c0:	andeq	fp, r1, r8, lsr #19
   1b7c4:	andeq	fp, r1, r8, lsr #19
   1b7c8:	ldrdeq	fp, [r1], -ip
   1b7cc:	andeq	fp, r1, r4, lsr #22
   1b7d0:	andeq	fp, r1, r8, lsr #19
   1b7d4:	andeq	fp, r1, r8, lsr #19
   1b7d8:	andeq	fp, r1, r8, lsr #19
   1b7dc:	andeq	fp, r1, r4, lsl #18
   1b7e0:	andeq	fp, r1, r8, lsr #19
   1b7e4:	andeq	fp, r1, r8, lsr #19
   1b7e8:	andeq	fp, r1, r8, lsr #19
   1b7ec:	andeq	fp, r1, r0, ror r9
   1b7f0:	andeq	fp, r1, r8, lsr #19
   1b7f4:			; <UNDEFINED> instruction: 0x0001bab4
   1b7f8:	andeq	fp, r1, r8, lsr #19
   1b7fc:	andeq	fp, r1, r8, lsr #19
   1b800:	andeq	fp, r1, r8, lsr #19
   1b804:	andeq	fp, r1, r8, lsr #19
   1b808:	andeq	fp, r1, r8, lsr #19
   1b80c:	andeq	fp, r1, r8, lsr #19
   1b810:	andeq	fp, r1, r4, asr sl
   1b814:	mov	r1, #1
   1b818:	mov	r2, #1024	; 0x400
   1b81c:	sub	r5, r5, #66	; 0x42
   1b820:	cmp	r5, #53	; 0x35
   1b824:	ldrls	pc, [pc, r5, lsl #2]
   1b828:	b	1b9a8 <__assert_fail@plt+0xa7c0>
   1b82c:	andeq	fp, r1, r4, lsl fp
   1b830:	andeq	fp, r1, r8, lsr #19
   1b834:	andeq	fp, r1, r8, lsr #19
   1b838:	andeq	fp, r1, ip, ror #21
   1b83c:	andeq	fp, r1, r8, lsr #19
   1b840:	andeq	fp, r1, ip, lsl #18
   1b844:	andeq	fp, r1, r8, lsr #19
   1b848:	andeq	fp, r1, r8, lsr #19
   1b84c:	andeq	fp, r1, r8, lsr #19
   1b850:	andeq	fp, r1, r8, ror r9
   1b854:	andeq	fp, r1, r8, lsr #19
   1b858:			; <UNDEFINED> instruction: 0x0001babc
   1b85c:	andeq	fp, r1, r8, lsr #19
   1b860:	andeq	fp, r1, r8, lsr #19
   1b864:	andeq	fp, r1, ip, lsl #21
   1b868:	andeq	fp, r1, r8, lsr #19
   1b86c:	andeq	fp, r1, r8, lsr #19
   1b870:	andeq	fp, r1, r8, lsr #19
   1b874:	andeq	fp, r1, ip, asr sl
   1b878:	andeq	fp, r1, r8, lsr #19
   1b87c:	andeq	fp, r1, r8, lsr #19
   1b880:	andeq	fp, r1, r8, lsr #19
   1b884:	andeq	fp, r1, r8, lsr #19
   1b888:	andeq	fp, r1, ip, lsr #20
   1b88c:	strdeq	fp, [r1], -r8
   1b890:	andeq	fp, r1, r8, lsr #19
   1b894:	andeq	fp, r1, r8, lsr #19
   1b898:	andeq	fp, r1, r8, lsr #19
   1b89c:	andeq	fp, r1, r8, lsr #19
   1b8a0:	andeq	fp, r1, r8, lsr #19
   1b8a4:	andeq	fp, r1, r8, lsr #19
   1b8a8:	andeq	fp, r1, r8, lsr #19
   1b8ac:	andeq	fp, r1, r0, ror #19
   1b8b0:	andeq	fp, r1, r8, asr r9
   1b8b4:	andeq	fp, r1, r8, lsr #19
   1b8b8:	andeq	fp, r1, r8, lsr #19
   1b8bc:	andeq	fp, r1, r8, lsr #19
   1b8c0:	andeq	fp, r1, ip, lsl #18
   1b8c4:	andeq	fp, r1, r8, lsr #19
   1b8c8:	andeq	fp, r1, r8, lsr #19
   1b8cc:	andeq	fp, r1, r8, lsr #19
   1b8d0:	andeq	fp, r1, r8, ror r9
   1b8d4:	andeq	fp, r1, r8, lsr #19
   1b8d8:			; <UNDEFINED> instruction: 0x0001babc
   1b8dc:	andeq	fp, r1, r8, lsr #19
   1b8e0:	andeq	fp, r1, r8, lsr #19
   1b8e4:	andeq	fp, r1, r8, lsr #19
   1b8e8:	andeq	fp, r1, r8, lsr #19
   1b8ec:	andeq	fp, r1, r8, lsr #19
   1b8f0:	andeq	fp, r1, r8, lsr #19
   1b8f4:	andeq	fp, r1, ip, asr sl
   1b8f8:	andeq	fp, r1, r8, lsr #19
   1b8fc:	andeq	fp, r1, r8, lsr #19
   1b900:	andeq	fp, r1, ip, asr #19
   1b904:	mov	r1, #1
   1b908:	mov	r2, #1024	; 0x400
   1b90c:	umull	ip, r0, r2, fp
   1b910:	adds	r0, r0, #0
   1b914:	movne	r0, #1
   1b918:	cmp	r0, #0
   1b91c:	bne	1bb38 <__assert_fail@plt+0xa950>
   1b920:	mul	fp, r2, fp
   1b924:	umull	ip, r0, r2, fp
   1b928:	adds	r0, r0, #0
   1b92c:	movne	r0, #1
   1b930:	cmp	r0, #0
   1b934:	bne	1bb38 <__assert_fail@plt+0xa950>
   1b938:	mul	fp, r2, fp
   1b93c:	umull	ip, r0, r2, fp
   1b940:	adds	r0, r0, #0
   1b944:	movne	r0, #1
   1b948:	cmp	r0, #0
   1b94c:	muleq	fp, r2, fp
   1b950:	bne	1bb38 <__assert_fail@plt+0xa950>
   1b954:	orr	r4, r4, r0
   1b958:	add	r2, r3, r1
   1b95c:	str	r2, [r6]
   1b960:	ldrb	r3, [r3, r1]
   1b964:	cmp	r3, #0
   1b968:	orrne	r4, r4, #2
   1b96c:	b	1b5d4 <__assert_fail@plt+0xa3ec>
   1b970:	mov	r1, #1
   1b974:	mov	r2, #1024	; 0x400
   1b978:	umull	ip, r0, r2, fp
   1b97c:	cmp	r0, #0
   1b980:	bne	1bad8 <__assert_fail@plt+0xa8f0>
   1b984:	mul	fp, r2, fp
   1b988:	b	1b958 <__assert_fail@plt+0xa770>
   1b98c:	mov	r1, r5
   1b990:	mov	r0, r9
   1b994:	str	r3, [sp, #4]
   1b998:	bl	110ec <strchr@plt>
   1b99c:	ldr	r3, [sp, #4]
   1b9a0:	cmp	r0, #0
   1b9a4:	bne	1b640 <__assert_fail@plt+0xa458>
   1b9a8:	str	fp, [sl]
   1b9ac:	orr	r4, r4, #2
   1b9b0:	b	1b5d8 <__assert_fail@plt+0xa3f0>
   1b9b4:	ldrb	r1, [r3, #2]
   1b9b8:	mov	r2, #1024	; 0x400
   1b9bc:	cmp	r1, #66	; 0x42
   1b9c0:	movne	r1, #1
   1b9c4:	moveq	r1, #3
   1b9c8:	b	1b81c <__assert_fail@plt+0xa634>
   1b9cc:	cmp	fp, #0
   1b9d0:	blt	1bad8 <__assert_fail@plt+0xa8f0>
   1b9d4:	lsl	fp, fp, #1
   1b9d8:	b	1b958 <__assert_fail@plt+0xa770>
   1b9dc:	mov	r1, #1
   1b9e0:	lsrs	r2, fp, #23
   1b9e4:	bne	1bad8 <__assert_fail@plt+0xa8f0>
   1b9e8:	lsl	fp, fp, #9
   1b9ec:	b	1b958 <__assert_fail@plt+0xa770>
   1b9f0:	mov	r1, #1
   1b9f4:	mov	r2, #1024	; 0x400
   1b9f8:	mov	r0, #7
   1b9fc:	mov	lr, #0
   1ba00:	umull	r5, ip, r2, fp
   1ba04:	cmp	ip, #0
   1ba08:	movne	lr, #1
   1ba0c:	muleq	fp, r2, fp
   1ba10:	mvnne	fp, #0
   1ba14:	subs	r0, r0, #1
   1ba18:	bne	1ba00 <__assert_fail@plt+0xa818>
   1ba1c:	orr	r4, r4, lr
   1ba20:	b	1b958 <__assert_fail@plt+0xa770>
   1ba24:	mov	r1, #1
   1ba28:	mov	r2, #1024	; 0x400
   1ba2c:	mov	r0, #8
   1ba30:	mov	lr, #0
   1ba34:	umull	r5, ip, r2, fp
   1ba38:	cmp	ip, #0
   1ba3c:	movne	lr, #1
   1ba40:	muleq	fp, r2, fp
   1ba44:	mvnne	fp, #0
   1ba48:	subs	r0, r0, #1
   1ba4c:	bne	1ba34 <__assert_fail@plt+0xa84c>
   1ba50:	b	1ba1c <__assert_fail@plt+0xa834>
   1ba54:	mov	r1, #1
   1ba58:	mov	r2, #1024	; 0x400
   1ba5c:	mov	r0, #4
   1ba60:	mov	lr, #0
   1ba64:	umull	r5, ip, r2, fp
   1ba68:	cmp	ip, #0
   1ba6c:	movne	lr, #1
   1ba70:	muleq	fp, r2, fp
   1ba74:	mvnne	fp, #0
   1ba78:	subs	r0, r0, #1
   1ba7c:	bne	1ba64 <__assert_fail@plt+0xa87c>
   1ba80:	b	1ba1c <__assert_fail@plt+0xa834>
   1ba84:	mov	r1, #1
   1ba88:	mov	r2, #1024	; 0x400
   1ba8c:	mov	r0, #5
   1ba90:	mov	lr, #0
   1ba94:	umull	r5, ip, r2, fp
   1ba98:	cmp	ip, #0
   1ba9c:	movne	lr, #1
   1baa0:	muleq	fp, r2, fp
   1baa4:	mvnne	fp, #0
   1baa8:	subs	r0, r0, #1
   1baac:	bne	1ba94 <__assert_fail@plt+0xa8ac>
   1bab0:	b	1ba1c <__assert_fail@plt+0xa834>
   1bab4:	mov	r1, #1
   1bab8:	mov	r2, #1024	; 0x400
   1babc:	umull	ip, r0, r2, fp
   1bac0:	cmp	r0, #0
   1bac4:	bne	1bad8 <__assert_fail@plt+0xa8f0>
   1bac8:	mul	fp, r2, fp
   1bacc:	umull	ip, r0, r2, fp
   1bad0:	cmp	r0, #0
   1bad4:	beq	1b984 <__assert_fail@plt+0xa79c>
   1bad8:	mov	r4, #1
   1badc:	mvn	fp, #0
   1bae0:	b	1b958 <__assert_fail@plt+0xa770>
   1bae4:	mov	r1, #1
   1bae8:	mov	r2, #1024	; 0x400
   1baec:	mov	r0, #6
   1baf0:	mov	lr, #0
   1baf4:	umull	r5, ip, r2, fp
   1baf8:	cmp	ip, #0
   1bafc:	movne	lr, #1
   1bb00:	muleq	fp, r2, fp
   1bb04:	mvnne	fp, #0
   1bb08:	subs	r0, r0, #1
   1bb0c:	bne	1baf4 <__assert_fail@plt+0xa90c>
   1bb10:	b	1ba1c <__assert_fail@plt+0xa834>
   1bb14:	lsrs	r2, fp, #22
   1bb18:	bne	1bad8 <__assert_fail@plt+0xa8f0>
   1bb1c:	lsl	fp, fp, #10
   1bb20:	b	1b958 <__assert_fail@plt+0xa770>
   1bb24:	mov	r1, #1
   1bb28:	b	1b958 <__assert_fail@plt+0xa770>
   1bb2c:	mov	r1, #2
   1bb30:	mov	r2, #1000	; 0x3e8
   1bb34:	b	1b81c <__assert_fail@plt+0xa634>
   1bb38:	mvn	fp, #0
   1bb3c:	b	1b954 <__assert_fail@plt+0xa76c>
   1bb40:	ldr	r3, [pc, #20]	; 1bb5c <__assert_fail@plt+0xa974>
   1bb44:	mov	r2, #96	; 0x60
   1bb48:	ldr	r1, [pc, #16]	; 1bb60 <__assert_fail@plt+0xa978>
   1bb4c:	ldr	r0, [pc, #16]	; 1bb64 <__assert_fail@plt+0xa97c>
   1bb50:	bl	111e8 <__assert_fail@plt>
   1bb54:	bl	10fd8 <__stack_chk_fail@plt>
   1bb58:	andeq	lr, r2, r8, lsl #30
   1bb5c:	andeq	lr, r1, ip, ror #1
   1bb60:	strdeq	lr, [r1], -r8
   1bb64:	andeq	lr, r1, r8, lsl #2
   1bb68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb6c:	sub	sp, sp, #36	; 0x24
   1bb70:	ldr	r5, [pc, #2536]	; 1c560 <__assert_fail@plt+0xb378>
   1bb74:	mov	r9, r2
   1bb78:	cmp	r2, #36	; 0x24
   1bb7c:	str	r3, [sp, #12]
   1bb80:	ldr	r2, [r5]
   1bb84:	ldr	r3, [sp, #72]	; 0x48
   1bb88:	str	r2, [sp, #28]
   1bb8c:	str	r3, [sp]
   1bb90:	bhi	1c54c <__assert_fail@plt+0xb364>
   1bb94:	cmp	r1, #0
   1bb98:	mov	r4, r1
   1bb9c:	mov	r6, r0
   1bba0:	addeq	r4, sp, #24
   1bba4:	bl	110f8 <__errno_location@plt>
   1bba8:	mov	r3, #0
   1bbac:	str	r3, [r0]
   1bbb0:	mov	r7, r0
   1bbb4:	bl	110b0 <__ctype_b_loc@plt>
   1bbb8:	ldrb	r3, [r6]
   1bbbc:	mov	r1, r6
   1bbc0:	ldr	r0, [r0]
   1bbc4:	b	1bbcc <__assert_fail@plt+0xa9e4>
   1bbc8:	ldrb	r3, [r1, #1]!
   1bbcc:	lsl	r2, r3, #1
   1bbd0:	ldrh	r8, [r0, r2]
   1bbd4:	ands	r8, r8, #8192	; 0x2000
   1bbd8:	bne	1bbc8 <__assert_fail@plt+0xa9e0>
   1bbdc:	cmp	r3, #45	; 0x2d
   1bbe0:	beq	1bc7c <__assert_fail@plt+0xaa94>
   1bbe4:	mov	r2, r9
   1bbe8:	mov	r3, r8
   1bbec:	mov	r1, r4
   1bbf0:	mov	r0, r6
   1bbf4:	bl	10f9c <__strtoull_internal@plt>
   1bbf8:	ldr	r9, [r4]
   1bbfc:	cmp	r9, r6
   1bc00:	mov	sl, r0
   1bc04:	mov	fp, r1
   1bc08:	beq	1bc64 <__assert_fail@plt+0xaa7c>
   1bc0c:	ldr	r8, [r7]
   1bc10:	cmp	r8, #0
   1bc14:	bne	1bc54 <__assert_fail@plt+0xaa6c>
   1bc18:	ldr	r3, [sp]
   1bc1c:	cmp	r3, #0
   1bc20:	beq	1bc30 <__assert_fail@plt+0xaa48>
   1bc24:	ldrb	r6, [r9]
   1bc28:	cmp	r6, #0
   1bc2c:	bne	1c004 <__assert_fail@plt+0xae1c>
   1bc30:	ldr	r3, [sp, #12]
   1bc34:	strd	sl, [r3]
   1bc38:	ldr	r2, [sp, #28]
   1bc3c:	ldr	r3, [r5]
   1bc40:	mov	r0, r8
   1bc44:	cmp	r2, r3
   1bc48:	bne	1c548 <__assert_fail@plt+0xb360>
   1bc4c:	add	sp, sp, #36	; 0x24
   1bc50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc54:	cmp	r8, #34	; 0x22
   1bc58:	bne	1bc7c <__assert_fail@plt+0xaa94>
   1bc5c:	mov	r8, #1
   1bc60:	b	1bc18 <__assert_fail@plt+0xaa30>
   1bc64:	ldr	r0, [sp]
   1bc68:	cmp	r0, #0
   1bc6c:	beq	1bc7c <__assert_fail@plt+0xaa94>
   1bc70:	ldrb	r6, [r6]
   1bc74:	cmp	r6, #0
   1bc78:	bne	1bc84 <__assert_fail@plt+0xaa9c>
   1bc7c:	mov	r8, #4
   1bc80:	b	1bc38 <__assert_fail@plt+0xaa50>
   1bc84:	mov	r1, r6
   1bc88:	bl	110ec <strchr@plt>
   1bc8c:	cmp	r0, #0
   1bc90:	movne	sl, #1
   1bc94:	movne	fp, #0
   1bc98:	beq	1bc7c <__assert_fail@plt+0xaa94>
   1bc9c:	sub	r7, r6, #69	; 0x45
   1bca0:	cmp	r7, #47	; 0x2f
   1bca4:	ldrls	pc, [pc, r7, lsl #2]
   1bca8:	b	1be68 <__assert_fail@plt+0xac80>
   1bcac:	andeq	fp, r1, ip, ror #26
   1bcb0:	andeq	fp, r1, r8, ror #28
   1bcb4:	andeq	fp, r1, ip, ror #26
   1bcb8:	andeq	fp, r1, r8, ror #28
   1bcbc:	andeq	fp, r1, r8, ror #28
   1bcc0:	andeq	fp, r1, r8, ror #28
   1bcc4:	andeq	fp, r1, ip, ror #26
   1bcc8:	andeq	fp, r1, r8, ror #28
   1bccc:	andeq	fp, r1, ip, ror #26
   1bcd0:	andeq	fp, r1, r8, ror #28
   1bcd4:	andeq	fp, r1, r8, ror #28
   1bcd8:	andeq	fp, r1, ip, ror #26
   1bcdc:	andeq	fp, r1, r8, ror #28
   1bce0:	andeq	fp, r1, r8, ror #28
   1bce4:	andeq	fp, r1, r8, ror #28
   1bce8:	andeq	fp, r1, ip, ror #26
   1bcec:	andeq	fp, r1, r8, ror #28
   1bcf0:	andeq	fp, r1, r8, ror #28
   1bcf4:	andeq	fp, r1, r8, ror #28
   1bcf8:	andeq	fp, r1, r8, ror #28
   1bcfc:	andeq	fp, r1, ip, ror #26
   1bd00:	andeq	fp, r1, ip, ror #26
   1bd04:	andeq	fp, r1, r8, ror #28
   1bd08:	andeq	fp, r1, r8, ror #28
   1bd0c:	andeq	fp, r1, r8, ror #28
   1bd10:	andeq	fp, r1, r8, ror #28
   1bd14:	andeq	fp, r1, r8, ror #28
   1bd18:	andeq	fp, r1, r8, ror #28
   1bd1c:	andeq	fp, r1, r8, ror #28
   1bd20:	andeq	fp, r1, r8, ror #28
   1bd24:	andeq	fp, r1, r8, ror #28
   1bd28:	andeq	fp, r1, r8, ror #28
   1bd2c:	andeq	fp, r1, r8, ror #28
   1bd30:	andeq	fp, r1, r8, ror #28
   1bd34:	andeq	fp, r1, ip, ror #26
   1bd38:	andeq	fp, r1, r8, ror #28
   1bd3c:	andeq	fp, r1, r8, ror #28
   1bd40:	andeq	fp, r1, r8, ror #28
   1bd44:	andeq	fp, r1, ip, ror #26
   1bd48:	andeq	fp, r1, r8, ror #28
   1bd4c:	andeq	fp, r1, ip, ror #26
   1bd50:	andeq	fp, r1, r8, ror #28
   1bd54:	andeq	fp, r1, r8, ror #28
   1bd58:	andeq	fp, r1, r8, ror #28
   1bd5c:	andeq	fp, r1, r8, ror #28
   1bd60:	andeq	fp, r1, r8, ror #28
   1bd64:	andeq	fp, r1, r8, ror #28
   1bd68:	andeq	fp, r1, ip, ror #26
   1bd6c:	ldr	r0, [sp]
   1bd70:	mov	r1, #48	; 0x30
   1bd74:	bl	110ec <strchr@plt>
   1bd78:	cmp	r0, #0
   1bd7c:	beq	1be68 <__assert_fail@plt+0xac80>
   1bd80:	ldrb	r3, [r9, #1]
   1bd84:	cmp	r3, #68	; 0x44
   1bd88:	beq	1c448 <__assert_fail@plt+0xb260>
   1bd8c:	cmp	r3, #105	; 0x69
   1bd90:	beq	1c028 <__assert_fail@plt+0xae40>
   1bd94:	cmp	r3, #66	; 0x42
   1bd98:	beq	1c448 <__assert_fail@plt+0xb260>
   1bd9c:	cmp	r7, #47	; 0x2f
   1bda0:	ldrls	pc, [pc, r7, lsl #2]
   1bda4:	b	1c018 <__assert_fail@plt+0xae30>
   1bda8:	andeq	ip, r1, ip, lsr #8
   1bdac:	andeq	ip, r1, r8, lsl r0
   1bdb0:	andeq	ip, r1, ip, lsl r4
   1bdb4:	andeq	ip, r1, r8, lsl r0
   1bdb8:	andeq	ip, r1, r8, lsl r0
   1bdbc:	andeq	ip, r1, r8, lsl r0
   1bdc0:	andeq	ip, r1, ip, lsl #8
   1bdc4:	andeq	ip, r1, r8, lsl r0
   1bdc8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bdcc:	andeq	ip, r1, r8, lsl r0
   1bdd0:	andeq	ip, r1, r8, lsl r0
   1bdd4:	andeq	ip, r1, ip, ror #7
   1bdd8:	andeq	ip, r1, r8, lsl r0
   1bddc:	andeq	ip, r1, r8, lsl r0
   1bde0:	andeq	ip, r1, r8, lsl r0
   1bde4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bde8:	andeq	ip, r1, r8, lsl r0
   1bdec:	andeq	ip, r1, r8, lsl r0
   1bdf0:	andeq	ip, r1, r8, lsl r0
   1bdf4:	andeq	ip, r1, r8, lsl r0
   1bdf8:	andeq	ip, r1, ip, asr #7
   1bdfc:			; <UNDEFINED> instruction: 0x0001c3bc
   1be00:	andeq	ip, r1, r8, lsl r0
   1be04:	andeq	ip, r1, r8, lsl r0
   1be08:	andeq	ip, r1, r8, lsl r0
   1be0c:	andeq	ip, r1, r8, lsl r0
   1be10:	andeq	ip, r1, r8, lsl r0
   1be14:	andeq	ip, r1, r8, lsl r0
   1be18:	andeq	ip, r1, r8, lsl r0
   1be1c:	andeq	ip, r1, r4, rrx
   1be20:			; <UNDEFINED> instruction: 0x0001c3b4
   1be24:	andeq	ip, r1, r8, lsl r0
   1be28:	andeq	ip, r1, r8, lsl r0
   1be2c:	andeq	ip, r1, r8, lsl r0
   1be30:	andeq	ip, r1, ip, lsl r4
   1be34:	andeq	ip, r1, r8, lsl r0
   1be38:	andeq	ip, r1, r8, lsl r0
   1be3c:	andeq	ip, r1, r8, lsl r0
   1be40:	andeq	ip, r1, ip, lsl #8
   1be44:	andeq	ip, r1, r8, lsl r0
   1be48:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1be4c:	andeq	ip, r1, r8, lsl r0
   1be50:	andeq	ip, r1, r8, lsl r0
   1be54:	andeq	ip, r1, r8, lsl r0
   1be58:	andeq	ip, r1, r8, lsl r0
   1be5c:	andeq	ip, r1, r8, lsl r0
   1be60:	andeq	ip, r1, r8, lsl r0
   1be64:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1be68:	mov	lr, #1
   1be6c:	mov	r0, #1024	; 0x400
   1be70:	sub	r6, r6, #66	; 0x42
   1be74:	cmp	r6, #53	; 0x35
   1be78:	ldrls	pc, [pc, r6, lsl #2]
   1be7c:	b	1c018 <__assert_fail@plt+0xae30>
   1be80:	andeq	ip, r1, ip, lsl #1
   1be84:	andeq	ip, r1, r8, lsl r0
   1be88:	andeq	ip, r1, r8, lsl r0
   1be8c:	strheq	ip, [r1], -r0
   1be90:	andeq	ip, r1, r8, lsl r0
   1be94:	andeq	fp, r1, r8, asr pc
   1be98:	andeq	ip, r1, r8, lsl r0
   1be9c:	andeq	ip, r1, r8, lsl r0
   1bea0:	andeq	ip, r1, r8, lsl r0
   1bea4:	andeq	ip, r1, r8, lsr #3
   1bea8:	andeq	ip, r1, r8, lsl r0
   1beac:	andeq	ip, r1, ip, asr #6
   1beb0:	andeq	ip, r1, r8, lsl r0
   1beb4:	andeq	ip, r1, r8, lsl r0
   1beb8:	ldrdeq	ip, [r1], -r0
   1bebc:	andeq	ip, r1, r8, lsl r0
   1bec0:	andeq	ip, r1, r8, lsl r0
   1bec4:	andeq	ip, r1, r8, lsl r0
   1bec8:	andeq	ip, r1, r4, asr r2
   1becc:	andeq	ip, r1, r8, lsl r0
   1bed0:	andeq	ip, r1, r8, lsl r0
   1bed4:	andeq	ip, r1, r8, lsl r0
   1bed8:	andeq	ip, r1, r8, lsl r0
   1bedc:	ldrdeq	ip, [r1], -r8
   1bee0:	andeq	ip, r1, ip, lsr #2
   1bee4:	andeq	ip, r1, r8, lsl r0
   1bee8:	andeq	ip, r1, r8, lsl r0
   1beec:	andeq	ip, r1, r8, lsl r0
   1bef0:	andeq	ip, r1, r8, lsl r0
   1bef4:	andeq	ip, r1, r8, lsl r0
   1bef8:	andeq	ip, r1, r8, lsl r0
   1befc:	andeq	ip, r1, r8, lsl r0
   1bf00:	andeq	ip, r1, r8, rrx
   1bf04:	andeq	fp, r1, ip, ror #31
   1bf08:	andeq	ip, r1, r8, lsl r0
   1bf0c:	andeq	ip, r1, r8, lsl r0
   1bf10:	andeq	ip, r1, r8, lsl r0
   1bf14:	andeq	fp, r1, r8, asr pc
   1bf18:	andeq	ip, r1, r8, lsl r0
   1bf1c:	andeq	ip, r1, r8, lsl r0
   1bf20:	andeq	ip, r1, r8, lsl r0
   1bf24:	andeq	ip, r1, r8, lsr #3
   1bf28:	andeq	ip, r1, r8, lsl r0
   1bf2c:	andeq	ip, r1, ip, asr #6
   1bf30:	andeq	ip, r1, r8, lsl r0
   1bf34:	andeq	ip, r1, r8, lsl r0
   1bf38:	andeq	ip, r1, r8, lsl r0
   1bf3c:	andeq	ip, r1, r8, lsl r0
   1bf40:	andeq	ip, r1, r8, lsl r0
   1bf44:	andeq	ip, r1, r8, lsl r0
   1bf48:	andeq	ip, r1, r4, asr r2
   1bf4c:	andeq	ip, r1, r8, lsl r0
   1bf50:	andeq	ip, r1, r8, lsl r0
   1bf54:	andeq	ip, r1, r0, asr #32
   1bf58:	asr	r1, r0, #31
   1bf5c:	mov	r2, #0
   1bf60:	mov	r3, #0
   1bf64:	cmp	fp, #0
   1bf68:	strd	r2, [sp]
   1bf6c:	bne	1c48c <__assert_fail@plt+0xb2a4>
   1bf70:	ldrd	r2, [sp]
   1bf74:	orrs	r3, r2, r3
   1bf78:	bne	1c47c <__assert_fail@plt+0xb294>
   1bf7c:	mul	r3, sl, r1
   1bf80:	umull	r6, r7, sl, r0
   1bf84:	mla	r3, r0, fp, r3
   1bf88:	ldrd	sl, [sp]
   1bf8c:	add	ip, r3, r7
   1bf90:	cmp	ip, #0
   1bf94:	mov	r7, ip
   1bf98:	bne	1c520 <__assert_fail@plt+0xb338>
   1bf9c:	orrs	r3, sl, fp
   1bfa0:	bne	1c47c <__assert_fail@plt+0xb294>
   1bfa4:	umull	r2, r3, r6, r0
   1bfa8:	mul	ip, r6, r1
   1bfac:	strd	r2, [sp]
   1bfb0:	mla	r3, r0, r7, ip
   1bfb4:	ldr	r2, [sp, #4]
   1bfb8:	add	ip, r3, r2
   1bfbc:	cmp	ip, #0
   1bfc0:	str	ip, [sp, #4]
   1bfc4:	bne	1c4fc <__assert_fail@plt+0xb314>
   1bfc8:	orrs	r3, sl, fp
   1bfcc:	bne	1c47c <__assert_fail@plt+0xb294>
   1bfd0:	ldrd	r6, [sp]
   1bfd4:	mov	r3, #0
   1bfd8:	mul	r2, r6, r1
   1bfdc:	umull	sl, fp, r6, r0
   1bfe0:	mla	r2, r0, r7, r2
   1bfe4:	add	fp, r2, fp
   1bfe8:	orr	r8, r8, r3
   1bfec:	add	r3, r9, lr
   1bff0:	str	r3, [r4]
   1bff4:	ldrb	r3, [r9, lr]
   1bff8:	cmp	r3, #0
   1bffc:	orrne	r8, r8, #2
   1c000:	b	1bc30 <__assert_fail@plt+0xaa48>
   1c004:	mov	r1, r6
   1c008:	ldr	r0, [sp]
   1c00c:	bl	110ec <strchr@plt>
   1c010:	cmp	r0, #0
   1c014:	bne	1bc9c <__assert_fail@plt+0xaab4>
   1c018:	ldr	r3, [sp, #12]
   1c01c:	orr	r8, r8, #2
   1c020:	strd	sl, [r3]
   1c024:	b	1bc38 <__assert_fail@plt+0xaa50>
   1c028:	ldrb	r3, [r9, #2]
   1c02c:	mov	r0, #1024	; 0x400
   1c030:	cmp	r3, #66	; 0x42
   1c034:	movne	lr, #1
   1c038:	moveq	lr, #3
   1c03c:	b	1be70 <__assert_fail@plt+0xac88>
   1c040:	lsr	r3, fp, #31
   1c044:	adds	sl, sl, sl
   1c048:	adc	fp, fp, fp
   1c04c:	cmp	r3, #0
   1c050:	beq	1bfec <__assert_fail@plt+0xae04>
   1c054:	mov	r8, #1
   1c058:	mvn	sl, #0
   1c05c:	mvn	fp, #0
   1c060:	b	1bfec <__assert_fail@plt+0xae04>
   1c064:	mov	lr, #1
   1c068:	lsr	r3, fp, #23
   1c06c:	cmp	r3, #0
   1c070:	bne	1c054 <__assert_fail@plt+0xae6c>
   1c074:	lsl	r3, fp, #9
   1c078:	orr	r3, r3, sl, lsr #23
   1c07c:	lsl	r2, sl, #9
   1c080:	mov	sl, r2
   1c084:	mov	fp, r3
   1c088:	b	1bfec <__assert_fail@plt+0xae04>
   1c08c:	lsr	r3, fp, #22
   1c090:	cmp	r3, #0
   1c094:	bne	1c054 <__assert_fail@plt+0xae6c>
   1c098:	lsl	r3, fp, #10
   1c09c:	orr	r3, r3, sl, lsr #22
   1c0a0:	lsl	r2, sl, #10
   1c0a4:	mov	sl, r2
   1c0a8:	mov	fp, r3
   1c0ac:	b	1bfec <__assert_fail@plt+0xae04>
   1c0b0:	mov	r6, r0
   1c0b4:	asr	r7, r0, #31
   1c0b8:	mov	r3, #0
   1c0bc:	mov	ip, #6
   1c0c0:	str	r3, [sp]
   1c0c4:	strd	r4, [sp, #16]
   1c0c8:	b	1c0f8 <__assert_fail@plt+0xaf10>
   1c0cc:	orrs	r3, r2, r3
   1c0d0:	movne	r3, #1
   1c0d4:	muleq	r3, sl, r7
   1c0d8:	strne	r3, [sp]
   1c0dc:	mlaeq	r3, r6, fp, r3
   1c0e0:	umulleq	sl, fp, sl, r6
   1c0e4:	mvnne	sl, #0
   1c0e8:	addeq	fp, r3, fp
   1c0ec:	mvnne	fp, #0
   1c0f0:	subs	ip, ip, #1
   1c0f4:	beq	1c43c <__assert_fail@plt+0xb254>
   1c0f8:	cmp	fp, #0
   1c0fc:	mov	r2, #0
   1c100:	mov	r3, #0
   1c104:	beq	1c0cc <__assert_fail@plt+0xaee4>
   1c108:	umull	r0, r1, sl, r6
   1c10c:	mov	r5, #0
   1c110:	mov	r0, r1
   1c114:	mov	r1, r5
   1c118:	umlal	r0, r1, fp, r6
   1c11c:	cmp	r1, r5
   1c120:	movne	r2, #1
   1c124:	movne	r3, #0
   1c128:	b	1c0cc <__assert_fail@plt+0xaee4>
   1c12c:	mov	r6, r0
   1c130:	asr	r7, r0, #31
   1c134:	mov	r3, #0
   1c138:	mov	ip, #7
   1c13c:	str	r3, [sp]
   1c140:	strd	r4, [sp, #16]
   1c144:	b	1c174 <__assert_fail@plt+0xaf8c>
   1c148:	orrs	r3, r2, r3
   1c14c:	movne	r3, #1
   1c150:	muleq	r3, sl, r7
   1c154:	strne	r3, [sp]
   1c158:	mlaeq	r3, r6, fp, r3
   1c15c:	umulleq	sl, fp, sl, r6
   1c160:	mvnne	sl, #0
   1c164:	addeq	fp, r3, fp
   1c168:	mvnne	fp, #0
   1c16c:	subs	ip, ip, #1
   1c170:	beq	1c43c <__assert_fail@plt+0xb254>
   1c174:	cmp	fp, #0
   1c178:	mov	r2, #0
   1c17c:	mov	r3, #0
   1c180:	beq	1c148 <__assert_fail@plt+0xaf60>
   1c184:	umull	r0, r1, sl, r6
   1c188:	mov	r5, #0
   1c18c:	mov	r0, r1
   1c190:	mov	r1, r5
   1c194:	umlal	r0, r1, fp, r6
   1c198:	cmp	r1, r5
   1c19c:	movne	r2, #1
   1c1a0:	movne	r3, #0
   1c1a4:	b	1c148 <__assert_fail@plt+0xaf60>
   1c1a8:	asr	r1, r0, #31
   1c1ac:	cmp	fp, #0
   1c1b0:	mov	r6, #0
   1c1b4:	mov	r7, #0
   1c1b8:	bne	1c454 <__assert_fail@plt+0xb26c>
   1c1bc:	orrs	r3, r6, r7
   1c1c0:	bne	1c054 <__assert_fail@plt+0xae6c>
   1c1c4:	mul	r3, sl, r1
   1c1c8:	mla	r3, r0, fp, r3
   1c1cc:	umull	sl, fp, sl, r0
   1c1d0:	add	fp, r3, fp
   1c1d4:	b	1bfec <__assert_fail@plt+0xae04>
   1c1d8:	mov	r6, r0
   1c1dc:	asr	r7, r0, #31
   1c1e0:	mov	r3, #0
   1c1e4:	mov	ip, #8
   1c1e8:	str	r3, [sp]
   1c1ec:	strd	r4, [sp, #16]
   1c1f0:	b	1c220 <__assert_fail@plt+0xb038>
   1c1f4:	orrs	r3, r2, r3
   1c1f8:	movne	r3, #1
   1c1fc:	muleq	r3, sl, r7
   1c200:	strne	r3, [sp]
   1c204:	mlaeq	r3, r6, fp, r3
   1c208:	umulleq	sl, fp, sl, r6
   1c20c:	mvnne	sl, #0
   1c210:	addeq	fp, r3, fp
   1c214:	mvnne	fp, #0
   1c218:	subs	ip, ip, #1
   1c21c:	beq	1c43c <__assert_fail@plt+0xb254>
   1c220:	cmp	fp, #0
   1c224:	mov	r2, #0
   1c228:	mov	r3, #0
   1c22c:	beq	1c1f4 <__assert_fail@plt+0xb00c>
   1c230:	umull	r0, r1, sl, r6
   1c234:	mov	r5, #0
   1c238:	mov	r0, r1
   1c23c:	mov	r1, r5
   1c240:	umlal	r0, r1, fp, r6
   1c244:	cmp	r1, r5
   1c248:	movne	r2, #1
   1c24c:	movne	r3, #0
   1c250:	b	1c1f4 <__assert_fail@plt+0xb00c>
   1c254:	mov	r6, r0
   1c258:	asr	r7, r0, #31
   1c25c:	mov	r3, #0
   1c260:	mov	ip, #4
   1c264:	str	r3, [sp]
   1c268:	strd	r4, [sp, #16]
   1c26c:	b	1c29c <__assert_fail@plt+0xb0b4>
   1c270:	orrs	r3, r2, r3
   1c274:	movne	r3, #1
   1c278:	muleq	r3, sl, r7
   1c27c:	strne	r3, [sp]
   1c280:	mlaeq	r3, r6, fp, r3
   1c284:	umulleq	sl, fp, sl, r6
   1c288:	mvnne	sl, #0
   1c28c:	addeq	fp, r3, fp
   1c290:	mvnne	fp, #0
   1c294:	subs	ip, ip, #1
   1c298:	beq	1c43c <__assert_fail@plt+0xb254>
   1c29c:	cmp	fp, #0
   1c2a0:	mov	r2, #0
   1c2a4:	mov	r3, #0
   1c2a8:	beq	1c270 <__assert_fail@plt+0xb088>
   1c2ac:	umull	r0, r1, sl, r6
   1c2b0:	mov	r5, #0
   1c2b4:	mov	r0, r1
   1c2b8:	mov	r1, r5
   1c2bc:	umlal	r0, r1, fp, r6
   1c2c0:	cmp	r1, r5
   1c2c4:	movne	r2, #1
   1c2c8:	movne	r3, #0
   1c2cc:	b	1c270 <__assert_fail@plt+0xb088>
   1c2d0:	mov	r6, r0
   1c2d4:	asr	r7, r0, #31
   1c2d8:	mov	r3, #0
   1c2dc:	mov	ip, #5
   1c2e0:	str	r3, [sp]
   1c2e4:	strd	r4, [sp, #16]
   1c2e8:	b	1c318 <__assert_fail@plt+0xb130>
   1c2ec:	orrs	r3, r2, r3
   1c2f0:	movne	r3, #1
   1c2f4:	muleq	r3, sl, r7
   1c2f8:	strne	r3, [sp]
   1c2fc:	mlaeq	r3, r6, fp, r3
   1c300:	umulleq	sl, fp, sl, r6
   1c304:	mvnne	sl, #0
   1c308:	addeq	fp, r3, fp
   1c30c:	mvnne	fp, #0
   1c310:	subs	ip, ip, #1
   1c314:	beq	1c43c <__assert_fail@plt+0xb254>
   1c318:	cmp	fp, #0
   1c31c:	mov	r2, #0
   1c320:	mov	r3, #0
   1c324:	beq	1c2ec <__assert_fail@plt+0xb104>
   1c328:	umull	r0, r1, sl, r6
   1c32c:	mov	r5, #0
   1c330:	mov	r0, r1
   1c334:	mov	r1, r5
   1c338:	umlal	r0, r1, fp, r6
   1c33c:	cmp	r1, r5
   1c340:	movne	r2, #1
   1c344:	movne	r3, #0
   1c348:	b	1c2ec <__assert_fail@plt+0xb104>
   1c34c:	asr	r1, r0, #31
   1c350:	cmp	fp, #0
   1c354:	mov	r6, #0
   1c358:	mov	r7, #0
   1c35c:	bne	1c4b0 <__assert_fail@plt+0xb2c8>
   1c360:	orrs	r3, r6, r7
   1c364:	bne	1c054 <__assert_fail@plt+0xae6c>
   1c368:	umull	r2, r3, sl, r0
   1c36c:	mul	ip, sl, r1
   1c370:	strd	r2, [sp]
   1c374:	mla	r3, r0, fp, ip
   1c378:	ldr	r2, [sp, #4]
   1c37c:	mov	sl, r6
   1c380:	add	ip, r3, r2
   1c384:	cmp	ip, #0
   1c388:	mov	fp, r7
   1c38c:	str	ip, [sp, #4]
   1c390:	bne	1c4d8 <__assert_fail@plt+0xb2f0>
   1c394:	orrs	r3, sl, fp
   1c398:	bne	1c054 <__assert_fail@plt+0xae6c>
   1c39c:	ldrd	r6, [sp]
   1c3a0:	mul	r3, r6, r1
   1c3a4:	umull	sl, fp, r6, r0
   1c3a8:	mla	r0, r0, r7, r3
   1c3ac:	add	fp, r0, fp
   1c3b0:	b	1bfec <__assert_fail@plt+0xae04>
   1c3b4:	mov	lr, #1
   1c3b8:	b	1bfec <__assert_fail@plt+0xae04>
   1c3bc:	mov	lr, #1
   1c3c0:	mov	r6, #1024	; 0x400
   1c3c4:	mov	r7, #0
   1c3c8:	b	1c134 <__assert_fail@plt+0xaf4c>
   1c3cc:	mov	lr, #1
   1c3d0:	mov	r6, #1024	; 0x400
   1c3d4:	mov	r7, #0
   1c3d8:	b	1c1e0 <__assert_fail@plt+0xaff8>
   1c3dc:	mov	lr, #1
   1c3e0:	mov	r6, #1024	; 0x400
   1c3e4:	mov	r7, #0
   1c3e8:	b	1c25c <__assert_fail@plt+0xb074>
   1c3ec:	mov	lr, #1
   1c3f0:	mov	r6, #1024	; 0x400
   1c3f4:	mov	r7, #0
   1c3f8:	b	1c2d8 <__assert_fail@plt+0xb0f0>
   1c3fc:	mov	lr, #1
   1c400:	mov	r0, #1024	; 0x400
   1c404:	mov	r1, #0
   1c408:	b	1c350 <__assert_fail@plt+0xb168>
   1c40c:	mov	lr, #1
   1c410:	mov	r0, #1024	; 0x400
   1c414:	mov	r1, #0
   1c418:	b	1c1ac <__assert_fail@plt+0xafc4>
   1c41c:	mov	lr, #1
   1c420:	mov	r0, #1024	; 0x400
   1c424:	mov	r1, #0
   1c428:	b	1bf5c <__assert_fail@plt+0xad74>
   1c42c:	mov	lr, #1
   1c430:	mov	r6, #1024	; 0x400
   1c434:	mov	r7, #0
   1c438:	b	1c0b8 <__assert_fail@plt+0xaed0>
   1c43c:	ldrd	r4, [sp, #16]
   1c440:	ldr	r3, [sp]
   1c444:	b	1bfe8 <__assert_fail@plt+0xae00>
   1c448:	mov	lr, #2
   1c44c:	mov	r0, #1000	; 0x3e8
   1c450:	b	1be70 <__assert_fail@plt+0xac88>
   1c454:	umull	r2, r3, sl, r0
   1c458:	str	r3, [sp]
   1c45c:	mov	r3, #0
   1c460:	str	r3, [sp, #4]
   1c464:	ldrd	r2, [sp]
   1c468:	umlal	r2, r3, fp, r0
   1c46c:	cmp	r3, #0
   1c470:	movne	r6, #1
   1c474:	movne	r7, #0
   1c478:	b	1c1bc <__assert_fail@plt+0xafd4>
   1c47c:	mov	r3, #1
   1c480:	mvn	sl, #0
   1c484:	mvn	fp, #0
   1c488:	b	1bfe8 <__assert_fail@plt+0xae00>
   1c48c:	umull	r2, r3, sl, r0
   1c490:	mov	r7, #0
   1c494:	mov	r6, r3
   1c498:	umlal	r6, r7, fp, r0
   1c49c:	cmp	r7, #0
   1c4a0:	movne	r2, #1
   1c4a4:	movne	r3, #0
   1c4a8:	strdne	r2, [sp]
   1c4ac:	b	1bf70 <__assert_fail@plt+0xad88>
   1c4b0:	umull	r2, r3, sl, r0
   1c4b4:	str	r3, [sp]
   1c4b8:	mov	r3, #0
   1c4bc:	str	r3, [sp, #4]
   1c4c0:	ldrd	r2, [sp]
   1c4c4:	umlal	r2, r3, fp, r0
   1c4c8:	cmp	r3, #0
   1c4cc:	movne	r6, #1
   1c4d0:	movne	r7, #0
   1c4d4:	b	1c360 <__assert_fail@plt+0xb178>
   1c4d8:	ldr	r3, [sp]
   1c4dc:	mov	r7, #0
   1c4e0:	umull	r2, r3, r3, r0
   1c4e4:	mov	r6, r3
   1c4e8:	umlal	r6, r7, ip, r0
   1c4ec:	cmp	r7, #0
   1c4f0:	movne	sl, #1
   1c4f4:	movne	fp, #0
   1c4f8:	b	1c394 <__assert_fail@plt+0xb1ac>
   1c4fc:	ldr	r3, [sp]
   1c500:	mov	r7, #0
   1c504:	umull	r2, r3, r3, r0
   1c508:	mov	r6, r3
   1c50c:	umlal	r6, r7, ip, r0
   1c510:	cmp	r7, #0
   1c514:	movne	sl, #1
   1c518:	movne	fp, #0
   1c51c:	b	1bfc8 <__assert_fail@plt+0xade0>
   1c520:	umull	r2, r3, r6, r0
   1c524:	str	r3, [sp]
   1c528:	mov	r3, #0
   1c52c:	str	r3, [sp, #4]
   1c530:	ldrd	r2, [sp]
   1c534:	umlal	r2, r3, ip, r0
   1c538:	cmp	r3, #0
   1c53c:	movne	sl, #1
   1c540:	movne	fp, #0
   1c544:	b	1bf9c <__assert_fail@plt+0xadb4>
   1c548:	bl	10fd8 <__stack_chk_fail@plt>
   1c54c:	ldr	r3, [pc, #16]	; 1c564 <__assert_fail@plt+0xb37c>
   1c550:	mov	r2, #96	; 0x60
   1c554:	ldr	r1, [pc, #12]	; 1c568 <__assert_fail@plt+0xb380>
   1c558:	ldr	r0, [pc, #12]	; 1c56c <__assert_fail@plt+0xb384>
   1c55c:	bl	111e8 <__assert_fail@plt>
   1c560:	andeq	lr, r2, r8, lsl #30
   1c564:	andeq	lr, r1, r0, lsr r1
   1c568:	strdeq	lr, [r1], -r8
   1c56c:	andeq	lr, r1, r8, lsl #2
   1c570:	push	{r4, r5, lr}
   1c574:	sub	sp, sp, #12
   1c578:	mov	r4, r0
   1c57c:	bl	11134 <fileno@plt>
   1c580:	cmp	r0, #0
   1c584:	mov	r0, r4
   1c588:	blt	1c604 <__assert_fail@plt+0xb41c>
   1c58c:	bl	11080 <__freading@plt>
   1c590:	cmp	r0, #0
   1c594:	bne	1c5d0 <__assert_fail@plt+0xb3e8>
   1c598:	mov	r0, r4
   1c59c:	bl	1c75c <__assert_fail@plt+0xb574>
   1c5a0:	cmp	r0, #0
   1c5a4:	beq	1c600 <__assert_fail@plt+0xb418>
   1c5a8:	bl	110f8 <__errno_location@plt>
   1c5ac:	mov	r5, r0
   1c5b0:	mov	r0, r4
   1c5b4:	ldr	r4, [r5]
   1c5b8:	bl	1114c <fclose@plt>
   1c5bc:	cmp	r4, #0
   1c5c0:	mvnne	r0, #0
   1c5c4:	strne	r4, [r5]
   1c5c8:	add	sp, sp, #12
   1c5cc:	pop	{r4, r5, pc}
   1c5d0:	mov	r0, r4
   1c5d4:	bl	11134 <fileno@plt>
   1c5d8:	mov	r3, #1
   1c5dc:	str	r3, [sp]
   1c5e0:	mov	r2, #0
   1c5e4:	mov	r3, #0
   1c5e8:	bl	11020 <lseek64@plt>
   1c5ec:	mvn	r3, #0
   1c5f0:	mvn	r2, #0
   1c5f4:	cmp	r1, r3
   1c5f8:	cmpeq	r0, r2
   1c5fc:	bne	1c598 <__assert_fail@plt+0xb3b0>
   1c600:	mov	r0, r4
   1c604:	add	sp, sp, #12
   1c608:	pop	{r4, r5, lr}
   1c60c:	b	1114c <fclose@plt>
   1c610:	push	{r1, r2, r3}
   1c614:	push	{r4, r5, r6, r7, r8, lr}
   1c618:	sub	sp, sp, #12
   1c61c:	ldr	r4, [pc, #300]	; 1c750 <__assert_fail@plt+0xb568>
   1c620:	ldr	r3, [pc, #300]	; 1c754 <__assert_fail@plt+0xb56c>
   1c624:	ldr	r1, [sp, #36]	; 0x24
   1c628:	ldr	r2, [r4]
   1c62c:	cmp	r1, r3
   1c630:	add	r3, sp, #40	; 0x28
   1c634:	str	r2, [sp, #4]
   1c638:	str	r3, [sp]
   1c63c:	bne	1c708 <__assert_fail@plt+0xb520>
   1c640:	ldr	r6, [pc, #272]	; 1c758 <__assert_fail@plt+0xb570>
   1c644:	add	r3, sp, #44	; 0x2c
   1c648:	str	r3, [sp]
   1c64c:	ldr	r3, [r6]
   1c650:	ldr	r7, [sp, #40]	; 0x28
   1c654:	cmp	r3, #0
   1c658:	blt	1c69c <__assert_fail@plt+0xb4b4>
   1c65c:	mov	r2, r7
   1c660:	mov	r8, r0
   1c664:	bl	11164 <fcntl64@plt>
   1c668:	subs	r5, r0, #0
   1c66c:	blt	1c718 <__assert_fail@plt+0xb530>
   1c670:	mov	r3, #1
   1c674:	str	r3, [r6]
   1c678:	ldr	r2, [sp, #4]
   1c67c:	ldr	r3, [r4]
   1c680:	mov	r0, r5
   1c684:	cmp	r2, r3
   1c688:	bne	1c74c <__assert_fail@plt+0xb564>
   1c68c:	add	sp, sp, #12
   1c690:	pop	{r4, r5, r6, r7, r8, lr}
   1c694:	add	sp, sp, #12
   1c698:	bx	lr
   1c69c:	mov	r2, r7
   1c6a0:	mov	r1, #0
   1c6a4:	bl	1c610 <__assert_fail@plt+0xb428>
   1c6a8:	subs	r5, r0, #0
   1c6ac:	blt	1c678 <__assert_fail@plt+0xb490>
   1c6b0:	ldr	r3, [r6]
   1c6b4:	cmn	r3, #1
   1c6b8:	bne	1c678 <__assert_fail@plt+0xb490>
   1c6bc:	mov	r1, #1
   1c6c0:	mov	r0, r5
   1c6c4:	bl	11164 <fcntl64@plt>
   1c6c8:	subs	r2, r0, #0
   1c6cc:	blt	1c6e8 <__assert_fail@plt+0xb500>
   1c6d0:	orr	r2, r2, #1
   1c6d4:	mov	r1, #2
   1c6d8:	mov	r0, r5
   1c6dc:	bl	11164 <fcntl64@plt>
   1c6e0:	cmn	r0, #1
   1c6e4:	bne	1c678 <__assert_fail@plt+0xb490>
   1c6e8:	bl	110f8 <__errno_location@plt>
   1c6ec:	mov	r6, r0
   1c6f0:	mov	r0, r5
   1c6f4:	ldr	r7, [r6]
   1c6f8:	mvn	r5, #0
   1c6fc:	bl	111d0 <close@plt>
   1c700:	str	r7, [r6]
   1c704:	b	1c678 <__assert_fail@plt+0xb490>
   1c708:	ldr	r2, [sp, #40]	; 0x28
   1c70c:	bl	11164 <fcntl64@plt>
   1c710:	mov	r5, r0
   1c714:	b	1c678 <__assert_fail@plt+0xb490>
   1c718:	bl	110f8 <__errno_location@plt>
   1c71c:	ldr	r3, [r0]
   1c720:	cmp	r3, #22
   1c724:	bne	1c670 <__assert_fail@plt+0xb488>
   1c728:	mov	r2, r7
   1c72c:	mov	r0, r8
   1c730:	mov	r1, #0
   1c734:	bl	1c610 <__assert_fail@plt+0xb428>
   1c738:	subs	r5, r0, #0
   1c73c:	mvnge	r3, #0
   1c740:	strge	r3, [r6]
   1c744:	bge	1c6bc <__assert_fail@plt+0xb4d4>
   1c748:	b	1c678 <__assert_fail@plt+0xb490>
   1c74c:	bl	10fd8 <__stack_chk_fail@plt>
   1c750:	andeq	lr, r2, r8, lsl #30
   1c754:	andeq	r0, r0, r6, lsl #8
   1c758:	andeq	pc, r2, ip, ror #5
   1c75c:	push	{r4, lr}
   1c760:	subs	r4, r0, #0
   1c764:	sub	sp, sp, #8
   1c768:	beq	1c784 <__assert_fail@plt+0xb59c>
   1c76c:	bl	11080 <__freading@plt>
   1c770:	cmp	r0, #0
   1c774:	beq	1c784 <__assert_fail@plt+0xb59c>
   1c778:	ldr	r3, [r4]
   1c77c:	tst	r3, #256	; 0x100
   1c780:	bne	1c794 <__assert_fail@plt+0xb5ac>
   1c784:	mov	r0, r4
   1c788:	add	sp, sp, #8
   1c78c:	pop	{r4, lr}
   1c790:	b	10f60 <fflush@plt>
   1c794:	mov	r3, #1
   1c798:	str	r3, [sp]
   1c79c:	mov	r2, #0
   1c7a0:	mov	r3, #0
   1c7a4:	mov	r0, r4
   1c7a8:	bl	1c7bc <__assert_fail@plt+0xb5d4>
   1c7ac:	mov	r0, r4
   1c7b0:	add	sp, sp, #8
   1c7b4:	pop	{r4, lr}
   1c7b8:	b	10f60 <fflush@plt>
   1c7bc:	push	{r4, r5, r6, r7, r8, lr}
   1c7c0:	sub	sp, sp, #8
   1c7c4:	ldmib	r0, {ip, lr}
   1c7c8:	mov	r4, r0
   1c7cc:	ldr	r5, [sp, #32]
   1c7d0:	cmp	lr, ip
   1c7d4:	beq	1c7ec <__assert_fail@plt+0xb604>
   1c7d8:	str	r5, [sp, #32]
   1c7dc:	mov	r0, r4
   1c7e0:	add	sp, sp, #8
   1c7e4:	pop	{r4, r5, r6, r7, r8, lr}
   1c7e8:	b	11158 <fseeko64@plt>
   1c7ec:	ldr	lr, [r0, #20]
   1c7f0:	ldr	ip, [r0, #16]
   1c7f4:	cmp	lr, ip
   1c7f8:	bne	1c7d8 <__assert_fail@plt+0xb5f0>
   1c7fc:	ldr	r8, [r0, #36]	; 0x24
   1c800:	cmp	r8, #0
   1c804:	bne	1c7d8 <__assert_fail@plt+0xb5f0>
   1c808:	mov	r6, r2
   1c80c:	mov	r7, r3
   1c810:	bl	11134 <fileno@plt>
   1c814:	mov	r2, r6
   1c818:	mov	r3, r7
   1c81c:	str	r5, [sp]
   1c820:	bl	11020 <lseek64@plt>
   1c824:	mvn	r3, #0
   1c828:	mvn	r2, #0
   1c82c:	cmp	r1, r3
   1c830:	cmpeq	r0, r2
   1c834:	beq	1c854 <__assert_fail@plt+0xb66c>
   1c838:	ldr	r3, [r4]
   1c83c:	strd	r0, [r4, #80]	; 0x50
   1c840:	mov	r0, r8
   1c844:	bic	r3, r3, #16
   1c848:	str	r3, [r4]
   1c84c:	add	sp, sp, #8
   1c850:	pop	{r4, r5, r6, r7, r8, pc}
   1c854:	mvn	r0, #0
   1c858:	b	1c84c <__assert_fail@plt+0xb664>
   1c85c:	push	{r4, r5, r6, r7, r8, lr}
   1c860:	subs	r7, r0, #0
   1c864:	ldr	r5, [pc, #108]	; 1c8d8 <__assert_fail@plt+0xb6f0>
   1c868:	sub	sp, sp, #8
   1c86c:	mov	r8, r1
   1c870:	ldr	r1, [r5]
   1c874:	moveq	r7, sp
   1c878:	str	r1, [sp, #4]
   1c87c:	mov	r0, r7
   1c880:	mov	r1, r8
   1c884:	mov	r6, r2
   1c888:	bl	11050 <mbrtowc@plt>
   1c88c:	cmp	r6, #0
   1c890:	cmnne	r0, #3
   1c894:	mov	r4, r0
   1c898:	bhi	1c8b8 <__assert_fail@plt+0xb6d0>
   1c89c:	ldr	r2, [sp, #4]
   1c8a0:	ldr	r3, [r5]
   1c8a4:	mov	r0, r4
   1c8a8:	cmp	r2, r3
   1c8ac:	bne	1c8d4 <__assert_fail@plt+0xb6ec>
   1c8b0:	add	sp, sp, #8
   1c8b4:	pop	{r4, r5, r6, r7, r8, pc}
   1c8b8:	mov	r0, #0
   1c8bc:	bl	1c950 <__assert_fail@plt+0xb768>
   1c8c0:	cmp	r0, #0
   1c8c4:	moveq	r4, #1
   1c8c8:	ldrbeq	r3, [r8]
   1c8cc:	streq	r3, [r7]
   1c8d0:	b	1c89c <__assert_fail@plt+0xb6b4>
   1c8d4:	bl	10fd8 <__stack_chk_fail@plt>
   1c8d8:	andeq	lr, r2, r8, lsl #30
   1c8dc:	push	{r4, r5, r6, lr}
   1c8e0:	mov	r4, r0
   1c8e4:	bl	11044 <__fpending@plt>
   1c8e8:	ldr	r5, [r4]
   1c8ec:	and	r5, r5, #32
   1c8f0:	mov	r6, r0
   1c8f4:	mov	r0, r4
   1c8f8:	bl	1c570 <__assert_fail@plt+0xb388>
   1c8fc:	cmp	r5, #0
   1c900:	mov	r4, r0
   1c904:	bne	1c930 <__assert_fail@plt+0xb748>
   1c908:	cmp	r0, #0
   1c90c:	beq	1c928 <__assert_fail@plt+0xb740>
   1c910:	cmp	r6, #0
   1c914:	bne	1c948 <__assert_fail@plt+0xb760>
   1c918:	bl	110f8 <__errno_location@plt>
   1c91c:	ldr	r4, [r0]
   1c920:	subs	r4, r4, #9
   1c924:	mvnne	r4, #0
   1c928:	mov	r0, r4
   1c92c:	pop	{r4, r5, r6, pc}
   1c930:	cmp	r0, #0
   1c934:	bne	1c948 <__assert_fail@plt+0xb760>
   1c938:	bl	110f8 <__errno_location@plt>
   1c93c:	str	r4, [r0]
   1c940:	mvn	r4, #0
   1c944:	b	1c928 <__assert_fail@plt+0xb740>
   1c948:	mvn	r4, #0
   1c94c:	b	1c928 <__assert_fail@plt+0xb740>
   1c950:	push	{r4, lr}
   1c954:	mov	r1, #0
   1c958:	bl	1117c <setlocale@plt>
   1c95c:	subs	r4, r0, #0
   1c960:	beq	1c98c <__assert_fail@plt+0xb7a4>
   1c964:	ldr	r1, [pc, #40]	; 1c994 <__assert_fail@plt+0xb7ac>
   1c968:	bl	10f48 <strcmp@plt>
   1c96c:	cmp	r0, #0
   1c970:	popeq	{r4, pc}
   1c974:	mov	r0, r4
   1c978:	ldr	r1, [pc, #24]	; 1c998 <__assert_fail@plt+0xb7b0>
   1c97c:	bl	10f48 <strcmp@plt>
   1c980:	adds	r0, r0, #0
   1c984:	movne	r0, #1
   1c988:	pop	{r4, pc}
   1c98c:	mov	r0, #1
   1c990:	pop	{r4, pc}
   1c994:	andeq	lr, r1, ip, lsr r1
   1c998:	andeq	lr, r1, r0, asr #2
   1c99c:	push	{r4, lr}
   1c9a0:	mov	r0, #14
   1c9a4:	bl	11194 <nl_langinfo@plt>
   1c9a8:	cmp	r0, #0
   1c9ac:	beq	1c9c4 <__assert_fail@plt+0xb7dc>
   1c9b0:	ldrb	r2, [r0]
   1c9b4:	ldr	r3, [pc, #16]	; 1c9cc <__assert_fail@plt+0xb7e4>
   1c9b8:	cmp	r2, #0
   1c9bc:	moveq	r0, r3
   1c9c0:	pop	{r4, pc}
   1c9c4:	ldr	r0, [pc]	; 1c9cc <__assert_fail@plt+0xb7e4>
   1c9c8:	pop	{r4, pc}
   1c9cc:	andeq	lr, r1, r8, asr #2
   1c9d0:	subs	r2, r1, #1
   1c9d4:	bxeq	lr
   1c9d8:	bcc	1cbb0 <__assert_fail@plt+0xb9c8>
   1c9dc:	cmp	r0, r1
   1c9e0:	bls	1cb94 <__assert_fail@plt+0xb9ac>
   1c9e4:	tst	r1, r2
   1c9e8:	beq	1cba0 <__assert_fail@plt+0xb9b8>
   1c9ec:	clz	r3, r0
   1c9f0:	clz	r2, r1
   1c9f4:	sub	r3, r2, r3
   1c9f8:	rsbs	r3, r3, #31
   1c9fc:	addne	r3, r3, r3, lsl #1
   1ca00:	mov	r2, #0
   1ca04:	addne	pc, pc, r3, lsl #2
   1ca08:	nop			; (mov r0, r0)
   1ca0c:	cmp	r0, r1, lsl #31
   1ca10:	adc	r2, r2, r2
   1ca14:	subcs	r0, r0, r1, lsl #31
   1ca18:	cmp	r0, r1, lsl #30
   1ca1c:	adc	r2, r2, r2
   1ca20:	subcs	r0, r0, r1, lsl #30
   1ca24:	cmp	r0, r1, lsl #29
   1ca28:	adc	r2, r2, r2
   1ca2c:	subcs	r0, r0, r1, lsl #29
   1ca30:	cmp	r0, r1, lsl #28
   1ca34:	adc	r2, r2, r2
   1ca38:	subcs	r0, r0, r1, lsl #28
   1ca3c:	cmp	r0, r1, lsl #27
   1ca40:	adc	r2, r2, r2
   1ca44:	subcs	r0, r0, r1, lsl #27
   1ca48:	cmp	r0, r1, lsl #26
   1ca4c:	adc	r2, r2, r2
   1ca50:	subcs	r0, r0, r1, lsl #26
   1ca54:	cmp	r0, r1, lsl #25
   1ca58:	adc	r2, r2, r2
   1ca5c:	subcs	r0, r0, r1, lsl #25
   1ca60:	cmp	r0, r1, lsl #24
   1ca64:	adc	r2, r2, r2
   1ca68:	subcs	r0, r0, r1, lsl #24
   1ca6c:	cmp	r0, r1, lsl #23
   1ca70:	adc	r2, r2, r2
   1ca74:	subcs	r0, r0, r1, lsl #23
   1ca78:	cmp	r0, r1, lsl #22
   1ca7c:	adc	r2, r2, r2
   1ca80:	subcs	r0, r0, r1, lsl #22
   1ca84:	cmp	r0, r1, lsl #21
   1ca88:	adc	r2, r2, r2
   1ca8c:	subcs	r0, r0, r1, lsl #21
   1ca90:	cmp	r0, r1, lsl #20
   1ca94:	adc	r2, r2, r2
   1ca98:	subcs	r0, r0, r1, lsl #20
   1ca9c:	cmp	r0, r1, lsl #19
   1caa0:	adc	r2, r2, r2
   1caa4:	subcs	r0, r0, r1, lsl #19
   1caa8:	cmp	r0, r1, lsl #18
   1caac:	adc	r2, r2, r2
   1cab0:	subcs	r0, r0, r1, lsl #18
   1cab4:	cmp	r0, r1, lsl #17
   1cab8:	adc	r2, r2, r2
   1cabc:	subcs	r0, r0, r1, lsl #17
   1cac0:	cmp	r0, r1, lsl #16
   1cac4:	adc	r2, r2, r2
   1cac8:	subcs	r0, r0, r1, lsl #16
   1cacc:	cmp	r0, r1, lsl #15
   1cad0:	adc	r2, r2, r2
   1cad4:	subcs	r0, r0, r1, lsl #15
   1cad8:	cmp	r0, r1, lsl #14
   1cadc:	adc	r2, r2, r2
   1cae0:	subcs	r0, r0, r1, lsl #14
   1cae4:	cmp	r0, r1, lsl #13
   1cae8:	adc	r2, r2, r2
   1caec:	subcs	r0, r0, r1, lsl #13
   1caf0:	cmp	r0, r1, lsl #12
   1caf4:	adc	r2, r2, r2
   1caf8:	subcs	r0, r0, r1, lsl #12
   1cafc:	cmp	r0, r1, lsl #11
   1cb00:	adc	r2, r2, r2
   1cb04:	subcs	r0, r0, r1, lsl #11
   1cb08:	cmp	r0, r1, lsl #10
   1cb0c:	adc	r2, r2, r2
   1cb10:	subcs	r0, r0, r1, lsl #10
   1cb14:	cmp	r0, r1, lsl #9
   1cb18:	adc	r2, r2, r2
   1cb1c:	subcs	r0, r0, r1, lsl #9
   1cb20:	cmp	r0, r1, lsl #8
   1cb24:	adc	r2, r2, r2
   1cb28:	subcs	r0, r0, r1, lsl #8
   1cb2c:	cmp	r0, r1, lsl #7
   1cb30:	adc	r2, r2, r2
   1cb34:	subcs	r0, r0, r1, lsl #7
   1cb38:	cmp	r0, r1, lsl #6
   1cb3c:	adc	r2, r2, r2
   1cb40:	subcs	r0, r0, r1, lsl #6
   1cb44:	cmp	r0, r1, lsl #5
   1cb48:	adc	r2, r2, r2
   1cb4c:	subcs	r0, r0, r1, lsl #5
   1cb50:	cmp	r0, r1, lsl #4
   1cb54:	adc	r2, r2, r2
   1cb58:	subcs	r0, r0, r1, lsl #4
   1cb5c:	cmp	r0, r1, lsl #3
   1cb60:	adc	r2, r2, r2
   1cb64:	subcs	r0, r0, r1, lsl #3
   1cb68:	cmp	r0, r1, lsl #2
   1cb6c:	adc	r2, r2, r2
   1cb70:	subcs	r0, r0, r1, lsl #2
   1cb74:	cmp	r0, r1, lsl #1
   1cb78:	adc	r2, r2, r2
   1cb7c:	subcs	r0, r0, r1, lsl #1
   1cb80:	cmp	r0, r1
   1cb84:	adc	r2, r2, r2
   1cb88:	subcs	r0, r0, r1
   1cb8c:	mov	r0, r2
   1cb90:	bx	lr
   1cb94:	moveq	r0, #1
   1cb98:	movne	r0, #0
   1cb9c:	bx	lr
   1cba0:	clz	r2, r1
   1cba4:	rsb	r2, r2, #31
   1cba8:	lsr	r0, r0, r2
   1cbac:	bx	lr
   1cbb0:	cmp	r0, #0
   1cbb4:	mvnne	r0, #0
   1cbb8:	b	1cc18 <__assert_fail@plt+0xba30>
   1cbbc:	cmp	r1, #0
   1cbc0:	beq	1cbb0 <__assert_fail@plt+0xb9c8>
   1cbc4:	push	{r0, r1, lr}
   1cbc8:	bl	1c9d0 <__assert_fail@plt+0xb7e8>
   1cbcc:	pop	{r1, r2, lr}
   1cbd0:	mul	r3, r2, r0
   1cbd4:	sub	r1, r1, r3
   1cbd8:	bx	lr
   1cbdc:	cmp	r3, #0
   1cbe0:	cmpeq	r2, #0
   1cbe4:	bne	1cbfc <__assert_fail@plt+0xba14>
   1cbe8:	cmp	r1, #0
   1cbec:	cmpeq	r0, #0
   1cbf0:	mvnne	r1, #0
   1cbf4:	mvnne	r0, #0
   1cbf8:	b	1cc18 <__assert_fail@plt+0xba30>
   1cbfc:	sub	sp, sp, #8
   1cc00:	push	{sp, lr}
   1cc04:	bl	1cc28 <__assert_fail@plt+0xba40>
   1cc08:	ldr	lr, [sp, #4]
   1cc0c:	add	sp, sp, #8
   1cc10:	pop	{r2, r3}
   1cc14:	bx	lr
   1cc18:	push	{r1, lr}
   1cc1c:	mov	r0, #8
   1cc20:	bl	10f30 <raise@plt>
   1cc24:	pop	{r1, pc}
   1cc28:	cmp	r1, r3
   1cc2c:	cmpeq	r0, r2
   1cc30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc34:	mov	r4, r0
   1cc38:	movcc	r0, #0
   1cc3c:	mov	r5, r1
   1cc40:	ldr	lr, [sp, #36]	; 0x24
   1cc44:	movcc	r1, r0
   1cc48:	bcc	1cd44 <__assert_fail@plt+0xbb5c>
   1cc4c:	cmp	r3, #0
   1cc50:	clzeq	ip, r2
   1cc54:	clzne	ip, r3
   1cc58:	addeq	ip, ip, #32
   1cc5c:	cmp	r5, #0
   1cc60:	clzeq	r1, r4
   1cc64:	addeq	r1, r1, #32
   1cc68:	clzne	r1, r5
   1cc6c:	sub	ip, ip, r1
   1cc70:	sub	sl, ip, #32
   1cc74:	lsl	r9, r3, ip
   1cc78:	rsb	fp, ip, #32
   1cc7c:	orr	r9, r9, r2, lsl sl
   1cc80:	orr	r9, r9, r2, lsr fp
   1cc84:	lsl	r8, r2, ip
   1cc88:	cmp	r5, r9
   1cc8c:	cmpeq	r4, r8
   1cc90:	movcc	r0, #0
   1cc94:	movcc	r1, r0
   1cc98:	bcc	1ccb4 <__assert_fail@plt+0xbacc>
   1cc9c:	mov	r0, #1
   1cca0:	subs	r4, r4, r8
   1cca4:	lsl	r1, r0, sl
   1cca8:	orr	r1, r1, r0, lsr fp
   1ccac:	lsl	r0, r0, ip
   1ccb0:	sbc	r5, r5, r9
   1ccb4:	cmp	ip, #0
   1ccb8:	beq	1cd44 <__assert_fail@plt+0xbb5c>
   1ccbc:	lsr	r6, r8, #1
   1ccc0:	orr	r6, r6, r9, lsl #31
   1ccc4:	lsr	r7, r9, #1
   1ccc8:	mov	r2, ip
   1cccc:	b	1ccf0 <__assert_fail@plt+0xbb08>
   1ccd0:	subs	r3, r4, r6
   1ccd4:	sbc	r8, r5, r7
   1ccd8:	adds	r3, r3, r3
   1ccdc:	adc	r8, r8, r8
   1cce0:	adds	r4, r3, #1
   1cce4:	adc	r5, r8, #0
   1cce8:	subs	r2, r2, #1
   1ccec:	beq	1cd0c <__assert_fail@plt+0xbb24>
   1ccf0:	cmp	r5, r7
   1ccf4:	cmpeq	r4, r6
   1ccf8:	bcs	1ccd0 <__assert_fail@plt+0xbae8>
   1ccfc:	adds	r4, r4, r4
   1cd00:	adc	r5, r5, r5
   1cd04:	subs	r2, r2, #1
   1cd08:	bne	1ccf0 <__assert_fail@plt+0xbb08>
   1cd0c:	lsr	r3, r4, ip
   1cd10:	orr	r3, r3, r5, lsl fp
   1cd14:	lsr	r2, r5, ip
   1cd18:	orr	r3, r3, r5, lsr sl
   1cd1c:	adds	r0, r0, r4
   1cd20:	mov	r4, r3
   1cd24:	lsl	r3, r2, ip
   1cd28:	orr	r3, r3, r4, lsl sl
   1cd2c:	lsl	ip, r4, ip
   1cd30:	orr	r3, r3, r4, lsr fp
   1cd34:	adc	r1, r1, r5
   1cd38:	subs	r0, r0, ip
   1cd3c:	mov	r5, r2
   1cd40:	sbc	r1, r1, r3
   1cd44:	cmp	lr, #0
   1cd48:	strdne	r4, [lr]
   1cd4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cd54:	mov	r7, r0
   1cd58:	ldr	r6, [pc, #72]	; 1cda8 <__assert_fail@plt+0xbbc0>
   1cd5c:	ldr	r5, [pc, #72]	; 1cdac <__assert_fail@plt+0xbbc4>
   1cd60:	add	r6, pc, r6
   1cd64:	add	r5, pc, r5
   1cd68:	sub	r6, r6, r5
   1cd6c:	mov	r8, r1
   1cd70:	mov	r9, r2
   1cd74:	bl	10eec <fdopen@plt-0x20>
   1cd78:	asrs	r6, r6, #2
   1cd7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cd80:	mov	r4, #0
   1cd84:	add	r4, r4, #1
   1cd88:	ldr	r3, [r5], #4
   1cd8c:	mov	r2, r9
   1cd90:	mov	r1, r8
   1cd94:	mov	r0, r7
   1cd98:	blx	r3
   1cd9c:	cmp	r6, r4
   1cda0:	bne	1cd84 <__assert_fail@plt+0xbb9c>
   1cda4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cda8:	muleq	r1, ip, r1
   1cdac:	muleq	r1, r4, r1
   1cdb0:	bx	lr
   1cdb4:	ldr	r3, [pc, #12]	; 1cdc8 <__assert_fail@plt+0xbbe0>
   1cdb8:	mov	r1, #0
   1cdbc:	add	r3, pc, r3
   1cdc0:	ldr	r2, [r3]
   1cdc4:	b	11104 <__cxa_atexit@plt>
   1cdc8:	andeq	r2, r1, r8, asr #6

Disassembly of section .fini:

0001cdcc <.fini>:
   1cdcc:	push	{r3, lr}
   1cdd0:	pop	{r3, pc}
