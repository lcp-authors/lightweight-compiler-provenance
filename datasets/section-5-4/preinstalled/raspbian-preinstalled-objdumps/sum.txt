
raspbian-preinstalled/sum:     file format elf32-littlearm


Disassembly of section .init:

00010e28 <.init>:
   10e28:	push	{r3, lr}
   10e2c:	bl	1135c <__assert_fail@plt+0x25c>
   10e30:	pop	{r3, pc}

Disassembly of section .plt:

00010e34 <calloc@plt-0x14>:
   10e34:	push	{lr}		; (str lr, [sp, #-4]!)
   10e38:	ldr	lr, [pc, #4]	; 10e44 <calloc@plt-0x4>
   10e3c:	add	lr, pc, lr
   10e40:	ldr	pc, [lr, #8]!
   10e44:			; <UNDEFINED> instruction: 0x000171bc

00010e48 <calloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #444]!	; 0x1bc

00010e54 <fputs_unlocked@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #436]!	; 0x1b4

00010e60 <raise@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #428]!	; 0x1ac

00010e6c <strcmp@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #420]!	; 0x1a4

00010e78 <posix_fadvise64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #412]!	; 0x19c

00010e84 <read@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #404]!	; 0x194

00010e90 <fflush@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #396]!	; 0x18c

00010e9c <memmove@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #388]!	; 0x184

00010ea8 <free@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #380]!	; 0x17c

00010eb4 <_exit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #372]!	; 0x174

00010ec0 <memcpy@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #364]!	; 0x16c

00010ecc <__strtoull_internal@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #356]!	; 0x164

00010ed8 <mbsinit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #348]!	; 0x15c

00010ee4 <memcmp@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #340]!	; 0x154

00010ef0 <dcgettext@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #332]!	; 0x14c

00010efc <__stack_chk_fail@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #324]!	; 0x144

00010f08 <realloc@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #316]!	; 0x13c

00010f14 <textdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #308]!	; 0x134

00010f20 <iswprint@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #300]!	; 0x12c

00010f2c <__memcpy_chk@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #292]!	; 0x124

00010f38 <fwrite@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #284]!	; 0x11c

00010f44 <lseek64@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #276]!	; 0x114

00010f50 <__ctype_get_mb_cur_max@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #268]!	; 0x10c

00010f5c <__fpending@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #260]!	; 0x104

00010f68 <mbrtowc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #252]!	; 0xfc

00010f74 <error@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #244]!	; 0xf4

00010f80 <open64@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #236]!	; 0xec

00010f8c <getenv@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #228]!	; 0xe4

00010f98 <malloc@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #220]!	; 0xdc

00010fa4 <__libc_start_main@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #212]!	; 0xd4

00010fb0 <__freading@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #204]!	; 0xcc

00010fbc <__gmon_start__@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #196]!	; 0xc4

00010fc8 <getopt_long@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #188]!	; 0xbc

00010fd4 <__ctype_b_loc@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #180]!	; 0xb4

00010fe0 <exit@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #172]!	; 0xac

00010fec <strlen@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #164]!	; 0xa4

00010ff8 <strchr@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #156]!	; 0x9c

00011004 <__errno_location@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #148]!	; 0x94

00011010 <__sprintf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #140]!	; 0x8c

0001101c <__cxa_atexit@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #132]!	; 0x84

00011028 <setvbuf@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #124]!	; 0x7c

00011034 <memset@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #116]!	; 0x74

00011040 <__printf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #108]!	; 0x6c

0001104c <fileno@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #100]!	; 0x64

00011058 <__fprintf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #92]!	; 0x5c

00011064 <fclose@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #84]!	; 0x54

00011070 <fseeko64@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #76]!	; 0x4c

0001107c <__uflow@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #68]!	; 0x44

00011088 <__overflow@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #60]!	; 0x3c

00011094 <setlocale@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #52]!	; 0x34

000110a0 <strrchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #44]!	; 0x2c

000110ac <nl_langinfo@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #36]!	; 0x24

000110b8 <localeconv@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #28]!

000110c4 <fopen64@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #20]!

000110d0 <bindtextdomain@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #12]!

000110dc <strncmp@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4]!

000110e8 <abort@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #4092]!	; 0xffc

000110f4 <close@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #4084]!	; 0xff4

00011100 <__assert_fail@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

00011110 <.text>:
   11110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11114:	mov	r7, r0
   11118:	sub	sp, sp, #20
   1111c:	ldr	r0, [r1]
   11120:	mov	r6, r1
   11124:	bl	128f8 <__assert_fail@plt+0x17f8>
   11128:	ldr	r1, [pc, #420]	; 112d4 <__assert_fail@plt+0x1d4>
   1112c:	mov	r0, #6
   11130:	bl	11094 <setlocale@plt>
   11134:	ldr	r1, [pc, #412]	; 112d8 <__assert_fail@plt+0x1d8>
   11138:	ldr	r0, [pc, #412]	; 112dc <__assert_fail@plt+0x1dc>
   1113c:	bl	110d0 <bindtextdomain@plt>
   11140:	ldr	fp, [pc, #408]	; 112e0 <__assert_fail@plt+0x1e0>
   11144:	ldr	r0, [pc, #400]	; 112dc <__assert_fail@plt+0x1dc>
   11148:	bl	10f14 <textdomain@plt>
   1114c:	ldr	r0, [pc, #400]	; 112e4 <__assert_fail@plt+0x1e4>
   11150:	bl	16be4 <__assert_fail@plt+0x5ae4>
   11154:	mov	r3, #0
   11158:	mov	r1, r3
   1115c:	ldr	r0, [fp]
   11160:	mov	r2, #1
   11164:	bl	11028 <setvbuf@plt>
   11168:	ldr	r5, [pc, #376]	; 112e8 <__assert_fail@plt+0x1e8>
   1116c:	ldr	r3, [pc, #376]	; 112ec <__assert_fail@plt+0x1ec>
   11170:	ldr	r9, [pc, #376]	; 112f0 <__assert_fail@plt+0x1f0>
   11174:	ldr	r8, [pc, #376]	; 112f4 <__assert_fail@plt+0x1f4>
   11178:	ldr	sl, [pc, #376]	; 112f8 <__assert_fail@plt+0x1f8>
   1117c:	mov	r4, #0
   11180:	strb	r4, [r3]
   11184:	str	r4, [sp]
   11188:	mov	r3, r9
   1118c:	mov	r2, r8
   11190:	mov	r1, r6
   11194:	mov	r0, r7
   11198:	bl	10fc8 <getopt_long@plt>
   1119c:	cmn	r0, #1
   111a0:	beq	1120c <__assert_fail@plt+0x10c>
   111a4:	cmn	r0, #2
   111a8:	beq	112cc <__assert_fail@plt+0x1cc>
   111ac:	ble	111c0 <__assert_fail@plt+0xc0>
   111b0:	cmp	r0, #114	; 0x72
   111b4:	bne	111fc <__assert_fail@plt+0xfc>
   111b8:	ldr	r5, [pc, #296]	; 112e8 <__assert_fail@plt+0x1e8>
   111bc:	b	11184 <__assert_fail@plt+0x84>
   111c0:	cmn	r0, #3
   111c4:	bne	112c4 <__assert_fail@plt+0x1c4>
   111c8:	ldr	r3, [pc, #300]	; 112fc <__assert_fail@plt+0x1fc>
   111cc:	ldr	r1, [pc, #300]	; 11300 <__assert_fail@plt+0x200>
   111d0:	ldr	r2, [pc, #300]	; 11304 <__assert_fail@plt+0x204>
   111d4:	str	r4, [sp, #8]
   111d8:	ldr	r0, [fp]
   111dc:	ldr	r3, [r3]
   111e0:	str	r1, [sp, #4]
   111e4:	str	r2, [sp]
   111e8:	ldr	r1, [pc, #280]	; 11308 <__assert_fail@plt+0x208>
   111ec:	ldr	r2, [pc, #280]	; 1130c <__assert_fail@plt+0x20c>
   111f0:	bl	15030 <__assert_fail@plt+0x3f30>
   111f4:	mov	r0, #0
   111f8:	bl	10fe0 <exit@plt>
   111fc:	cmp	r0, #115	; 0x73
   11200:	bne	112c4 <__assert_fail@plt+0x1c4>
   11204:	mov	r5, sl
   11208:	b	11184 <__assert_fail@plt+0x84>
   1120c:	ldr	r9, [pc, #252]	; 11310 <__assert_fail@plt+0x210>
   11210:	ldr	r8, [r9]
   11214:	sub	r8, r7, r8
   11218:	cmp	r8, #0
   1121c:	movgt	r4, #1
   11220:	bgt	11274 <__assert_fail@plt+0x174>
   11224:	mov	r1, r8
   11228:	ldr	r0, [pc, #228]	; 11314 <__assert_fail@plt+0x214>
   1122c:	blx	r5
   11230:	mov	r4, r0
   11234:	ldr	r3, [pc, #176]	; 112ec <__assert_fail@plt+0x1ec>
   11238:	ldrb	r3, [r3]
   1123c:	cmp	r3, #0
   11240:	bne	11284 <__assert_fail@plt+0x184>
   11244:	eor	r0, r4, #1
   11248:	uxtb	r0, r0
   1124c:	add	sp, sp, #20
   11250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11254:	ldr	r0, [r6, r3, lsl #2]
   11258:	mov	r1, r8
   1125c:	blx	r5
   11260:	ldr	r3, [r9]
   11264:	add	r3, r3, #1
   11268:	str	r3, [r9]
   1126c:	and	r4, r4, r0
   11270:	uxtb	r4, r4
   11274:	ldr	r3, [r9]
   11278:	cmp	r3, r7
   1127c:	blt	11254 <__assert_fail@plt+0x154>
   11280:	b	11234 <__assert_fail@plt+0x134>
   11284:	ldr	r3, [pc, #140]	; 11318 <__assert_fail@plt+0x218>
   11288:	ldr	r0, [r3]
   1128c:	bl	15dc4 <__assert_fail@plt+0x4cc4>
   11290:	cmn	r0, #1
   11294:	bne	11244 <__assert_fail@plt+0x144>
   11298:	bl	11004 <__errno_location@plt>
   1129c:	ldr	r2, [pc, #112]	; 11314 <__assert_fail@plt+0x214>
   112a0:	mov	r1, #3
   112a4:	ldr	r4, [r0]
   112a8:	mov	r0, #0
   112ac:	bl	14990 <__assert_fail@plt+0x3890>
   112b0:	mov	r1, r4
   112b4:	ldr	r2, [pc, #96]	; 1131c <__assert_fail@plt+0x21c>
   112b8:	mov	r3, r0
   112bc:	mov	r0, #1
   112c0:	bl	10f74 <error@plt>
   112c4:	mov	r0, #1
   112c8:	bl	118f4 <__assert_fail@plt+0x7f4>
   112cc:	mov	r0, #0
   112d0:	bl	118f4 <__assert_fail@plt+0x7f4>
   112d4:	andeq	r6, r1, r4, ror #25
   112d8:	andeq	r6, r1, r4, lsr #30
   112dc:	andeq	r6, r1, r8, ror lr
   112e0:	andeq	r8, r2, ip, ror #2
   112e4:	andeq	r1, r1, ip, lsr #24
   112e8:	andeq	r1, r1, r8, ror r6
   112ec:	andeq	r8, r2, r1, ror r1
   112f0:	andeq	r6, r1, r0, asr #24
   112f4:	andeq	r6, r1, ip, asr pc
   112f8:	andeq	r1, r1, r0, lsl r4
   112fc:	andeq	r8, r2, r4, lsl #2
   11300:	andeq	r6, r1, r8, lsr pc
   11304:	andeq	r6, r1, r8, asr #30
   11308:	muleq	r1, r8, ip
   1130c:	andeq	r6, r1, r4, ror lr
   11310:	andeq	r8, r2, r8, asr r1
   11314:	andeq	r6, r1, r0, lsl #25
   11318:	andeq	r8, r2, r8, ror #2
   1131c:	strdeq	r6, [r1], -ip
   11320:	mov	fp, #0
   11324:	mov	lr, #0
   11328:	pop	{r1}		; (ldr r1, [sp], #4)
   1132c:	mov	r2, sp
   11330:	push	{r2}		; (str r2, [sp, #-4]!)
   11334:	push	{r0}		; (str r0, [sp, #-4]!)
   11338:	ldr	ip, [pc, #16]	; 11350 <__assert_fail@plt+0x250>
   1133c:	push	{ip}		; (str ip, [sp, #-4]!)
   11340:	ldr	r0, [pc, #12]	; 11354 <__assert_fail@plt+0x254>
   11344:	ldr	r3, [pc, #12]	; 11358 <__assert_fail@plt+0x258>
   11348:	bl	10fa4 <__libc_start_main@plt>
   1134c:	bl	110e8 <abort@plt>
   11350:	andeq	r6, r1, r0, ror #23
   11354:	andeq	r1, r1, r0, lsl r1
   11358:	andeq	r6, r1, r0, lsl #23
   1135c:	ldr	r3, [pc, #20]	; 11378 <__assert_fail@plt+0x278>
   11360:	ldr	r2, [pc, #20]	; 1137c <__assert_fail@plt+0x27c>
   11364:	add	r3, pc, r3
   11368:	ldr	r2, [r3, r2]
   1136c:	cmp	r2, #0
   11370:	bxeq	lr
   11374:	b	10fbc <__gmon_start__@plt>
   11378:	muleq	r1, r4, ip
   1137c:	strdeq	r0, [r0], -r8
   11380:	ldr	r0, [pc, #24]	; 113a0 <__assert_fail@plt+0x2a0>
   11384:	ldr	r3, [pc, #24]	; 113a4 <__assert_fail@plt+0x2a4>
   11388:	cmp	r3, r0
   1138c:	bxeq	lr
   11390:	ldr	r3, [pc, #16]	; 113a8 <__assert_fail@plt+0x2a8>
   11394:	cmp	r3, #0
   11398:	bxeq	lr
   1139c:	bx	r3
   113a0:	andeq	r8, r2, r0, asr r1
   113a4:	andeq	r8, r2, r0, asr r1
   113a8:	andeq	r0, r0, r0
   113ac:	ldr	r0, [pc, #36]	; 113d8 <__assert_fail@plt+0x2d8>
   113b0:	ldr	r1, [pc, #36]	; 113dc <__assert_fail@plt+0x2dc>
   113b4:	sub	r1, r1, r0
   113b8:	asr	r1, r1, #2
   113bc:	add	r1, r1, r1, lsr #31
   113c0:	asrs	r1, r1, #1
   113c4:	bxeq	lr
   113c8:	ldr	r3, [pc, #16]	; 113e0 <__assert_fail@plt+0x2e0>
   113cc:	cmp	r3, #0
   113d0:	bxeq	lr
   113d4:	bx	r3
   113d8:	andeq	r8, r2, r0, asr r1
   113dc:	andeq	r8, r2, r0, asr r1
   113e0:	andeq	r0, r0, r0
   113e4:	push	{r4, lr}
   113e8:	ldr	r4, [pc, #24]	; 11408 <__assert_fail@plt+0x308>
   113ec:	ldrb	r3, [r4]
   113f0:	cmp	r3, #0
   113f4:	popne	{r4, pc}
   113f8:	bl	11380 <__assert_fail@plt+0x280>
   113fc:	mov	r3, #1
   11400:	strb	r3, [r4]
   11404:	pop	{r4, pc}
   11408:	andeq	r8, r2, r0, ror r1
   1140c:	b	113ac <__assert_fail@plt+0x2ac>
   11410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11414:	sub	sp, sp, #8832	; 0x2280
   11418:	ldr	r9, [pc, #572]	; 1165c <__assert_fail@plt+0x55c>
   1141c:	sub	sp, sp, #44	; 0x2c
   11420:	add	r2, sp, #8832	; 0x2280
   11424:	ldr	r3, [r9]
   11428:	add	r2, r2, #36	; 0x24
   1142c:	str	r1, [sp, #20]
   11430:	ldr	r1, [pc, #552]	; 11660 <__assert_fail@plt+0x560>
   11434:	mov	sl, r0
   11438:	str	r3, [r2]
   1143c:	bl	10e6c <strcmp@plt>
   11440:	subs	r8, r0, #0
   11444:	bne	115b4 <__assert_fail@plt+0x4b4>
   11448:	ldr	r3, [pc, #532]	; 11664 <__assert_fail@plt+0x564>
   1144c:	mov	r5, r8
   11450:	mov	r2, #1
   11454:	strb	r2, [r3]
   11458:	mov	fp, #0
   1145c:	mov	r6, #0
   11460:	mov	r7, #0
   11464:	mov	r2, #8192	; 0x2000
   11468:	add	r1, sp, #676	; 0x2a4
   1146c:	mov	r0, r5
   11470:	bl	14b74 <__assert_fail@plt+0x3a74>
   11474:	subs	r4, r0, #0
   11478:	beq	114a8 <__assert_fail@plt+0x3a8>
   1147c:	cmn	r4, #1
   11480:	beq	1156c <__assert_fail@plt+0x46c>
   11484:	add	r2, sp, #676	; 0x2a4
   11488:	add	r0, r2, r4
   1148c:	ldrb	r1, [r2], #1
   11490:	cmp	r2, r0
   11494:	add	fp, fp, r1
   11498:	bne	1148c <__assert_fail@plt+0x38c>
   1149c:	adds	r6, r6, r4
   114a0:	adc	r7, r7, #0
   114a4:	b	11464 <__assert_fail@plt+0x364>
   114a8:	cmp	r8, #0
   114ac:	beq	114c0 <__assert_fail@plt+0x3c0>
   114b0:	mov	r0, r5
   114b4:	bl	110f4 <close@plt>
   114b8:	cmp	r0, #0
   114bc:	bne	11600 <__assert_fail@plt+0x500>
   114c0:	lsr	ip, fp, #16
   114c4:	uxtah	ip, ip, fp
   114c8:	mov	r2, #512	; 0x200
   114cc:	mov	r3, #0
   114d0:	mov	r4, #1
   114d4:	mov	r5, #0
   114d8:	asr	lr, ip, #16
   114dc:	strd	r2, [sp, #8]
   114e0:	mov	r0, r6
   114e4:	mov	r1, r7
   114e8:	mov	r3, #0
   114ec:	add	r2, sp, #24
   114f0:	strd	r4, [sp]
   114f4:	uxtah	r6, lr, ip
   114f8:	bl	11d40 <__assert_fail@plt+0xc40>
   114fc:	mov	r2, r6
   11500:	ldr	r1, [pc, #352]	; 11668 <__assert_fail@plt+0x568>
   11504:	mov	r3, r0
   11508:	mov	r0, #1
   1150c:	bl	11040 <__printf_chk@plt>
   11510:	ldr	r3, [sp, #20]
   11514:	cmp	r3, #0
   11518:	bne	11634 <__assert_fail@plt+0x534>
   1151c:	ldr	r3, [pc, #328]	; 1166c <__assert_fail@plt+0x56c>
   11520:	ldr	r0, [r3]
   11524:	ldr	r3, [r0, #20]
   11528:	ldr	r2, [r0, #24]
   1152c:	cmp	r3, r2
   11530:	bcs	11648 <__assert_fail@plt+0x548>
   11534:	add	r1, r3, #1
   11538:	str	r1, [r0, #20]
   1153c:	mov	r0, #1
   11540:	mov	r2, #10
   11544:	strb	r2, [r3]
   11548:	add	r3, sp, #8832	; 0x2280
   1154c:	add	r3, r3, #36	; 0x24
   11550:	ldr	r2, [r3]
   11554:	ldr	r3, [r9]
   11558:	cmp	r2, r3
   1155c:	bne	11658 <__assert_fail@plt+0x558>
   11560:	add	sp, sp, #8832	; 0x2280
   11564:	add	sp, sp, #44	; 0x2c
   11568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1156c:	bl	11004 <__errno_location@plt>
   11570:	mov	r2, sl
   11574:	mov	r1, #3
   11578:	ldr	r4, [r0]
   1157c:	mov	r0, #0
   11580:	bl	14990 <__assert_fail@plt+0x3890>
   11584:	mov	r1, r4
   11588:	ldr	r2, [pc, #224]	; 11670 <__assert_fail@plt+0x570>
   1158c:	mov	r3, r0
   11590:	mov	r0, #0
   11594:	bl	10f74 <error@plt>
   11598:	cmp	r8, #0
   1159c:	moveq	r0, r8
   115a0:	beq	11548 <__assert_fail@plt+0x448>
   115a4:	mov	r0, r5
   115a8:	bl	110f4 <close@plt>
   115ac:	mov	r0, #0
   115b0:	b	11548 <__assert_fail@plt+0x448>
   115b4:	mov	r1, #0
   115b8:	mov	r0, sl
   115bc:	bl	10f80 <open64@plt>
   115c0:	cmn	r0, #1
   115c4:	mov	r5, r0
   115c8:	bne	11458 <__assert_fail@plt+0x358>
   115cc:	bl	11004 <__errno_location@plt>
   115d0:	mov	r2, sl
   115d4:	mov	r1, #3
   115d8:	ldr	r4, [r0]
   115dc:	mov	r0, #0
   115e0:	bl	14990 <__assert_fail@plt+0x3890>
   115e4:	mov	r1, r4
   115e8:	ldr	r2, [pc, #128]	; 11670 <__assert_fail@plt+0x570>
   115ec:	mov	r3, r0
   115f0:	mov	r0, #0
   115f4:	bl	10f74 <error@plt>
   115f8:	mov	r0, #0
   115fc:	b	11548 <__assert_fail@plt+0x448>
   11600:	bl	11004 <__errno_location@plt>
   11604:	mov	r2, sl
   11608:	mov	r1, #3
   1160c:	ldr	r5, [r0]
   11610:	mov	r0, r4
   11614:	bl	14990 <__assert_fail@plt+0x3890>
   11618:	mov	r1, r5
   1161c:	ldr	r2, [pc, #76]	; 11670 <__assert_fail@plt+0x570>
   11620:	mov	r3, r0
   11624:	mov	r0, r4
   11628:	bl	10f74 <error@plt>
   1162c:	mov	r0, r4
   11630:	b	11548 <__assert_fail@plt+0x448>
   11634:	mov	r2, sl
   11638:	ldr	r1, [pc, #52]	; 11674 <__assert_fail@plt+0x574>
   1163c:	mov	r0, #1
   11640:	bl	11040 <__printf_chk@plt>
   11644:	b	1151c <__assert_fail@plt+0x41c>
   11648:	mov	r1, #10
   1164c:	bl	11088 <__overflow@plt>
   11650:	mov	r0, #1
   11654:	b	11548 <__assert_fail@plt+0x448>
   11658:	bl	10efc <__stack_chk_fail@plt>
   1165c:	andeq	r7, r2, r8, lsl #30
   11660:	andeq	r6, r1, r0, lsl #25
   11664:	andeq	r8, r2, r1, ror r1
   11668:	andeq	r6, r1, r4, lsl #25
   1166c:	andeq	r8, r2, ip, ror #2
   11670:	strdeq	r6, [r1], -ip
   11674:	andeq	r7, r1, r4, ror #10
   11678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1167c:	sub	sp, sp, #684	; 0x2ac
   11680:	ldr	r5, [pc, #584]	; 118d0 <__assert_fail@plt+0x7d0>
   11684:	mov	r7, r1
   11688:	ldr	r1, [pc, #580]	; 118d4 <__assert_fail@plt+0x7d4>
   1168c:	ldr	r3, [r5]
   11690:	mov	r6, r0
   11694:	str	r3, [sp, #676]	; 0x2a4
   11698:	bl	10e6c <strcmp@plt>
   1169c:	subs	r9, r0, #0
   116a0:	bne	117e8 <__assert_fail@plt+0x6e8>
   116a4:	ldr	r1, [pc, #556]	; 118d8 <__assert_fail@plt+0x7d8>
   116a8:	ldr	r3, [pc, #556]	; 118dc <__assert_fail@plt+0x7dc>
   116ac:	mov	r2, #1
   116b0:	ldr	r8, [r1]
   116b4:	strb	r2, [r3]
   116b8:	mov	r1, #2
   116bc:	mov	sl, #0
   116c0:	mov	r0, r8
   116c4:	bl	11d08 <__assert_fail@plt+0xc08>
   116c8:	mov	fp, sl
   116cc:	ldr	r1, [r8, #8]
   116d0:	ldr	r3, [r8, #4]
   116d4:	mov	r4, sl
   116d8:	b	11708 <__assert_fail@plt+0x608>
   116dc:	add	r2, r3, #1
   116e0:	str	r2, [r8, #4]
   116e4:	ldrb	r0, [r3]
   116e8:	lsl	r3, r4, #15
   116ec:	adds	sl, sl, #1
   116f0:	uxth	r3, r3
   116f4:	add	r4, r3, r4, lsr #1
   116f8:	add	r4, r4, r0
   116fc:	adc	fp, fp, #0
   11700:	mov	r3, r2
   11704:	uxth	r4, r4
   11708:	cmp	r1, r3
   1170c:	bhi	116dc <__assert_fail@plt+0x5dc>
   11710:	mov	r0, r8
   11714:	bl	1107c <__uflow@plt>
   11718:	cmn	r0, #1
   1171c:	bne	118c0 <__assert_fail@plt+0x7c0>
   11720:	ldr	r0, [r8]
   11724:	ands	r3, r0, #32
   11728:	str	r3, [sp, #20]
   1172c:	bne	11868 <__assert_fail@plt+0x768>
   11730:	cmp	r9, #0
   11734:	beq	11748 <__assert_fail@plt+0x648>
   11738:	mov	r0, r8
   1173c:	bl	15dc4 <__assert_fail@plt+0x4cc4>
   11740:	cmp	r0, #0
   11744:	bne	11830 <__assert_fail@plt+0x730>
   11748:	mov	r2, #1
   1174c:	mov	r3, #0
   11750:	mov	r8, #1024	; 0x400
   11754:	mov	r9, #0
   11758:	strd	r2, [sp]
   1175c:	mov	r1, fp
   11760:	mov	r3, #0
   11764:	add	r2, sp, #24
   11768:	mov	r0, sl
   1176c:	strd	r8, [sp, #8]
   11770:	bl	11d40 <__assert_fail@plt+0xc40>
   11774:	mov	r2, r4
   11778:	ldr	r1, [pc, #352]	; 118e0 <__assert_fail@plt+0x7e0>
   1177c:	mov	r3, r0
   11780:	mov	r0, #1
   11784:	bl	11040 <__printf_chk@plt>
   11788:	cmp	r7, #1
   1178c:	bgt	117d4 <__assert_fail@plt+0x6d4>
   11790:	ldr	r3, [pc, #332]	; 118e4 <__assert_fail@plt+0x7e4>
   11794:	ldr	r0, [r3]
   11798:	ldr	r3, [r0, #20]
   1179c:	ldr	r2, [r0, #24]
   117a0:	cmp	r3, r2
   117a4:	bcs	118b0 <__assert_fail@plt+0x7b0>
   117a8:	add	r1, r3, #1
   117ac:	str	r1, [r0, #20]
   117b0:	mov	r0, #1
   117b4:	mov	r2, #10
   117b8:	strb	r2, [r3]
   117bc:	ldr	r2, [sp, #676]	; 0x2a4
   117c0:	ldr	r3, [r5]
   117c4:	cmp	r2, r3
   117c8:	bne	118cc <__assert_fail@plt+0x7cc>
   117cc:	add	sp, sp, #684	; 0x2ac
   117d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117d4:	mov	r2, r6
   117d8:	ldr	r1, [pc, #264]	; 118e8 <__assert_fail@plt+0x7e8>
   117dc:	mov	r0, #1
   117e0:	bl	11040 <__printf_chk@plt>
   117e4:	b	11790 <__assert_fail@plt+0x690>
   117e8:	ldr	r1, [pc, #252]	; 118ec <__assert_fail@plt+0x7ec>
   117ec:	mov	r0, r6
   117f0:	bl	110c4 <fopen64@plt>
   117f4:	subs	r8, r0, #0
   117f8:	bne	116b8 <__assert_fail@plt+0x5b8>
   117fc:	bl	11004 <__errno_location@plt>
   11800:	mov	r2, r6
   11804:	mov	r1, #3
   11808:	ldr	r4, [r0]
   1180c:	mov	r0, r8
   11810:	bl	14990 <__assert_fail@plt+0x3890>
   11814:	mov	r1, r4
   11818:	ldr	r2, [pc, #208]	; 118f0 <__assert_fail@plt+0x7f0>
   1181c:	mov	r3, r0
   11820:	mov	r0, r8
   11824:	bl	10f74 <error@plt>
   11828:	mov	r0, r8
   1182c:	b	117bc <__assert_fail@plt+0x6bc>
   11830:	bl	11004 <__errno_location@plt>
   11834:	mov	r2, r6
   11838:	ldr	r6, [sp, #20]
   1183c:	mov	r1, #3
   11840:	ldr	r4, [r0]
   11844:	mov	r0, r6
   11848:	bl	14990 <__assert_fail@plt+0x3890>
   1184c:	mov	r1, r4
   11850:	ldr	r2, [pc, #152]	; 118f0 <__assert_fail@plt+0x7f0>
   11854:	mov	r3, r0
   11858:	mov	r0, r6
   1185c:	bl	10f74 <error@plt>
   11860:	mov	r0, r6
   11864:	b	117bc <__assert_fail@plt+0x6bc>
   11868:	bl	11004 <__errno_location@plt>
   1186c:	mov	r2, r6
   11870:	mov	r1, #3
   11874:	ldr	r4, [r0]
   11878:	mov	r0, #0
   1187c:	bl	14990 <__assert_fail@plt+0x3890>
   11880:	mov	r1, r4
   11884:	ldr	r2, [pc, #100]	; 118f0 <__assert_fail@plt+0x7f0>
   11888:	mov	r3, r0
   1188c:	mov	r0, #0
   11890:	bl	10f74 <error@plt>
   11894:	cmp	r9, #0
   11898:	moveq	r0, r9
   1189c:	beq	117bc <__assert_fail@plt+0x6bc>
   118a0:	mov	r0, r8
   118a4:	bl	15dc4 <__assert_fail@plt+0x4cc4>
   118a8:	mov	r0, #0
   118ac:	b	117bc <__assert_fail@plt+0x6bc>
   118b0:	mov	r1, #10
   118b4:	bl	11088 <__overflow@plt>
   118b8:	mov	r0, #1
   118bc:	b	117bc <__assert_fail@plt+0x6bc>
   118c0:	ldr	r1, [r8, #8]
   118c4:	ldr	r2, [r8, #4]
   118c8:	b	116e8 <__assert_fail@plt+0x5e8>
   118cc:	bl	10efc <__stack_chk_fail@plt>
   118d0:	andeq	r7, r2, r8, lsl #30
   118d4:	andeq	r6, r1, r0, lsl #25
   118d8:	andeq	r8, r2, r8, ror #2
   118dc:	andeq	r8, r2, r1, ror r1
   118e0:	andeq	r6, r1, ip, lsl #25
   118e4:	andeq	r8, r2, ip, ror #2
   118e8:	andeq	r7, r1, r4, ror #10
   118ec:	andeq	r6, r1, r8, asr pc
   118f0:	strdeq	r6, [r1], -ip
   118f4:	ldr	r3, [pc, #696]	; 11bb4 <__assert_fail@plt+0xab4>
   118f8:	push	{r7, lr}
   118fc:	sub	sp, sp, #64	; 0x40
   11900:	ldr	r3, [r3]
   11904:	subs	r4, r0, #0
   11908:	str	r3, [sp, #60]	; 0x3c
   1190c:	beq	11948 <__assert_fail@plt+0x848>
   11910:	ldr	r3, [pc, #672]	; 11bb8 <__assert_fail@plt+0xab8>
   11914:	mov	r2, #5
   11918:	ldr	r1, [pc, #668]	; 11bbc <__assert_fail@plt+0xabc>
   1191c:	mov	r0, #0
   11920:	ldr	r5, [r3]
   11924:	bl	10ef0 <dcgettext@plt>
   11928:	ldr	r3, [pc, #656]	; 11bc0 <__assert_fail@plt+0xac0>
   1192c:	mov	r1, #1
   11930:	ldr	r3, [r3]
   11934:	mov	r2, r0
   11938:	mov	r0, r5
   1193c:	bl	11058 <__fprintf_chk@plt>
   11940:	mov	r0, r4
   11944:	bl	10fe0 <exit@plt>
   11948:	mov	r2, #5
   1194c:	ldr	r1, [pc, #624]	; 11bc4 <__assert_fail@plt+0xac4>
   11950:	bl	10ef0 <dcgettext@plt>
   11954:	ldr	r3, [pc, #612]	; 11bc0 <__assert_fail@plt+0xac0>
   11958:	ldr	r5, [pc, #616]	; 11bc8 <__assert_fail@plt+0xac8>
   1195c:	ldr	r2, [r3]
   11960:	mov	r1, r0
   11964:	mov	r0, #1
   11968:	bl	11040 <__printf_chk@plt>
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #596]	; 11bcc <__assert_fail@plt+0xacc>
   11974:	mov	r0, r4
   11978:	bl	10ef0 <dcgettext@plt>
   1197c:	ldr	r1, [r5]
   11980:	bl	10e54 <fputs_unlocked@plt>
   11984:	mov	r2, #5
   11988:	ldr	r1, [pc, #576]	; 11bd0 <__assert_fail@plt+0xad0>
   1198c:	mov	r0, r4
   11990:	bl	10ef0 <dcgettext@plt>
   11994:	ldr	r1, [r5]
   11998:	bl	10e54 <fputs_unlocked@plt>
   1199c:	mov	r2, #5
   119a0:	ldr	r1, [pc, #556]	; 11bd4 <__assert_fail@plt+0xad4>
   119a4:	mov	r0, r4
   119a8:	bl	10ef0 <dcgettext@plt>
   119ac:	ldr	r1, [r5]
   119b0:	bl	10e54 <fputs_unlocked@plt>
   119b4:	mov	r2, #5
   119b8:	ldr	r1, [pc, #536]	; 11bd8 <__assert_fail@plt+0xad8>
   119bc:	mov	r0, r4
   119c0:	bl	10ef0 <dcgettext@plt>
   119c4:	ldr	r1, [r5]
   119c8:	bl	10e54 <fputs_unlocked@plt>
   119cc:	mov	r2, #5
   119d0:	ldr	r1, [pc, #516]	; 11bdc <__assert_fail@plt+0xadc>
   119d4:	mov	r0, r4
   119d8:	bl	10ef0 <dcgettext@plt>
   119dc:	ldr	r1, [r5]
   119e0:	bl	10e54 <fputs_unlocked@plt>
   119e4:	ldr	lr, [pc, #500]	; 11be0 <__assert_fail@plt+0xae0>
   119e8:	add	ip, sp, #4
   119ec:	ldm	lr!, {r0, r1, r2, r3}
   119f0:	stmia	ip!, {r0, r1, r2, r3}
   119f4:	ldm	lr!, {r0, r1, r2, r3}
   119f8:	ldr	r6, [sp, #4]
   119fc:	stmia	ip!, {r0, r1, r2, r3}
   11a00:	cmp	r6, #0
   11a04:	ldm	lr!, {r0, r1, r2, r3}
   11a08:	addeq	r5, sp, #4
   11a0c:	stmia	ip!, {r0, r1, r2, r3}
   11a10:	ldm	lr, {r0, r1}
   11a14:	stm	ip, {r0, r1}
   11a18:	beq	11a48 <__assert_fail@plt+0x948>
   11a1c:	ldr	r7, [pc, #448]	; 11be4 <__assert_fail@plt+0xae4>
   11a20:	add	r5, sp, #4
   11a24:	b	11a34 <__assert_fail@plt+0x934>
   11a28:	ldr	r6, [r5, #8]!
   11a2c:	cmp	r6, #0
   11a30:	beq	11a48 <__assert_fail@plt+0x948>
   11a34:	mov	r1, r6
   11a38:	mov	r0, r7
   11a3c:	bl	10e6c <strcmp@plt>
   11a40:	cmp	r0, #0
   11a44:	bne	11a28 <__assert_fail@plt+0x928>
   11a48:	ldr	r5, [r5, #4]
   11a4c:	mov	r2, #5
   11a50:	cmp	r5, #0
   11a54:	ldr	r1, [pc, #396]	; 11be8 <__assert_fail@plt+0xae8>
   11a58:	beq	11b00 <__assert_fail@plt+0xa00>
   11a5c:	mov	r0, #0
   11a60:	bl	10ef0 <dcgettext@plt>
   11a64:	ldr	r3, [pc, #384]	; 11bec <__assert_fail@plt+0xaec>
   11a68:	ldr	r2, [pc, #384]	; 11bf0 <__assert_fail@plt+0xaf0>
   11a6c:	mov	r1, r0
   11a70:	mov	r0, #1
   11a74:	bl	11040 <__printf_chk@plt>
   11a78:	mov	r1, #0
   11a7c:	mov	r0, #5
   11a80:	bl	11094 <setlocale@plt>
   11a84:	cmp	r0, #0
   11a88:	ldreq	r6, [pc, #340]	; 11be4 <__assert_fail@plt+0xae4>
   11a8c:	beq	11aa8 <__assert_fail@plt+0x9a8>
   11a90:	mov	r2, #3
   11a94:	ldr	r1, [pc, #344]	; 11bf4 <__assert_fail@plt+0xaf4>
   11a98:	bl	110dc <strncmp@plt>
   11a9c:	ldr	r6, [pc, #320]	; 11be4 <__assert_fail@plt+0xae4>
   11aa0:	cmp	r0, #0
   11aa4:	bne	11b90 <__assert_fail@plt+0xa90>
   11aa8:	mov	r2, #5
   11aac:	ldr	r1, [pc, #324]	; 11bf8 <__assert_fail@plt+0xaf8>
   11ab0:	mov	r0, #0
   11ab4:	bl	10ef0 <dcgettext@plt>
   11ab8:	ldr	r3, [pc, #292]	; 11be4 <__assert_fail@plt+0xae4>
   11abc:	ldr	r2, [pc, #296]	; 11bec <__assert_fail@plt+0xaec>
   11ac0:	mov	r1, r0
   11ac4:	mov	r0, #1
   11ac8:	bl	11040 <__printf_chk@plt>
   11acc:	mov	r2, #5
   11ad0:	ldr	r1, [pc, #292]	; 11bfc <__assert_fail@plt+0xafc>
   11ad4:	mov	r0, #0
   11ad8:	bl	10ef0 <dcgettext@plt>
   11adc:	ldr	r2, [pc, #284]	; 11c00 <__assert_fail@plt+0xb00>
   11ae0:	cmp	r5, r6
   11ae4:	ldr	r3, [pc, #280]	; 11c04 <__assert_fail@plt+0xb04>
   11ae8:	movne	r3, r2
   11aec:	mov	r1, r0
   11af0:	mov	r2, r5
   11af4:	mov	r0, #1
   11af8:	bl	11040 <__printf_chk@plt>
   11afc:	b	11940 <__assert_fail@plt+0x840>
   11b00:	mov	r0, r5
   11b04:	bl	10ef0 <dcgettext@plt>
   11b08:	ldr	r3, [pc, #220]	; 11bec <__assert_fail@plt+0xaec>
   11b0c:	ldr	r2, [pc, #220]	; 11bf0 <__assert_fail@plt+0xaf0>
   11b10:	mov	r1, r0
   11b14:	mov	r0, #1
   11b18:	bl	11040 <__printf_chk@plt>
   11b1c:	mov	r1, r5
   11b20:	mov	r0, #5
   11b24:	bl	11094 <setlocale@plt>
   11b28:	cmp	r0, #0
   11b2c:	beq	11b44 <__assert_fail@plt+0xa44>
   11b30:	mov	r2, #3
   11b34:	ldr	r1, [pc, #184]	; 11bf4 <__assert_fail@plt+0xaf4>
   11b38:	bl	110dc <strncmp@plt>
   11b3c:	cmp	r0, #0
   11b40:	bne	11b88 <__assert_fail@plt+0xa88>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #168]	; 11bf8 <__assert_fail@plt+0xaf8>
   11b4c:	mov	r0, #0
   11b50:	bl	10ef0 <dcgettext@plt>
   11b54:	ldr	r3, [pc, #136]	; 11be4 <__assert_fail@plt+0xae4>
   11b58:	ldr	r2, [pc, #140]	; 11bec <__assert_fail@plt+0xaec>
   11b5c:	mov	r5, r3
   11b60:	mov	r1, r0
   11b64:	mov	r0, #1
   11b68:	bl	11040 <__printf_chk@plt>
   11b6c:	ldr	r1, [pc, #136]	; 11bfc <__assert_fail@plt+0xafc>
   11b70:	mov	r2, #5
   11b74:	mov	r0, #0
   11b78:	bl	10ef0 <dcgettext@plt>
   11b7c:	ldr	r3, [pc, #128]	; 11c04 <__assert_fail@plt+0xb04>
   11b80:	mov	r1, r0
   11b84:	b	11af0 <__assert_fail@plt+0x9f0>
   11b88:	ldr	r6, [pc, #84]	; 11be4 <__assert_fail@plt+0xae4>
   11b8c:	mov	r5, r6
   11b90:	mov	r2, #5
   11b94:	ldr	r1, [pc, #108]	; 11c08 <__assert_fail@plt+0xb08>
   11b98:	mov	r0, #0
   11b9c:	bl	10ef0 <dcgettext@plt>
   11ba0:	ldr	r2, [pc, #60]	; 11be4 <__assert_fail@plt+0xae4>
   11ba4:	mov	r1, r0
   11ba8:	mov	r0, #1
   11bac:	bl	11040 <__printf_chk@plt>
   11bb0:	b	11aa8 <__assert_fail@plt+0x9a8>
   11bb4:	andeq	r7, r2, r8, lsl #30
   11bb8:	andeq	r8, r2, r0, ror #2
   11bbc:	muleq	r1, ip, ip
   11bc0:	andeq	r8, r2, ip, ror r1
   11bc4:	andeq	r6, r1, r4, asr #25
   11bc8:	andeq	r8, r2, ip, ror #2
   11bcc:	andeq	r6, r1, r8, ror #25
   11bd0:	andeq	r6, r1, r8, lsl sp
   11bd4:	andeq	r6, r1, r0, asr sp
   11bd8:	andeq	r6, r1, ip, asr #27
   11bdc:	strdeq	r6, [r1], -ip
   11be0:	andeq	r6, r1, r8, lsl #24
   11be4:	muleq	r1, r8, ip
   11be8:	andeq	r6, r1, r4, lsr lr
   11bec:	andeq	r6, r1, ip, asr #28
   11bf0:	andeq	r6, r1, r4, ror lr
   11bf4:	andeq	r6, r1, r4, lsl #29
   11bf8:	ldrdeq	r6, [r1], -r0
   11bfc:	strdeq	r6, [r1], -r0
   11c00:	andeq	r6, r1, r4, ror #25
   11c04:	andeq	r6, r1, r8, ror #30
   11c08:	andeq	r6, r1, r8, lsl #29
   11c0c:	ldr	r3, [pc, #4]	; 11c18 <__assert_fail@plt+0xb18>
   11c10:	str	r0, [r3]
   11c14:	bx	lr
   11c18:	andeq	r8, r2, r4, ror r1
   11c1c:	ldr	r3, [pc, #4]	; 11c28 <__assert_fail@plt+0xb28>
   11c20:	strb	r0, [r3, #4]
   11c24:	bx	lr
   11c28:	andeq	r8, r2, r4, ror r1
   11c2c:	ldr	r3, [pc, #180]	; 11ce8 <__assert_fail@plt+0xbe8>
   11c30:	push	{r4, r5, r6, lr}
   11c34:	sub	sp, sp, #8
   11c38:	ldr	r0, [r3]
   11c3c:	bl	16308 <__assert_fail@plt+0x5208>
   11c40:	cmp	r0, #0
   11c44:	beq	11c6c <__assert_fail@plt+0xb6c>
   11c48:	bl	11004 <__errno_location@plt>
   11c4c:	ldr	r5, [pc, #152]	; 11cec <__assert_fail@plt+0xbec>
   11c50:	ldrb	r3, [r5, #4]
   11c54:	cmp	r3, #0
   11c58:	mov	r4, r0
   11c5c:	beq	11c88 <__assert_fail@plt+0xb88>
   11c60:	ldr	r3, [r0]
   11c64:	cmp	r3, #32
   11c68:	bne	11c88 <__assert_fail@plt+0xb88>
   11c6c:	ldr	r3, [pc, #124]	; 11cf0 <__assert_fail@plt+0xbf0>
   11c70:	ldr	r0, [r3]
   11c74:	bl	16308 <__assert_fail@plt+0x5208>
   11c78:	cmp	r0, #0
   11c7c:	bne	11cc8 <__assert_fail@plt+0xbc8>
   11c80:	add	sp, sp, #8
   11c84:	pop	{r4, r5, r6, pc}
   11c88:	mov	r2, #5
   11c8c:	ldr	r1, [pc, #96]	; 11cf4 <__assert_fail@plt+0xbf4>
   11c90:	mov	r0, #0
   11c94:	bl	10ef0 <dcgettext@plt>
   11c98:	mov	r6, r0
   11c9c:	ldr	r0, [r5]
   11ca0:	cmp	r0, #0
   11ca4:	beq	11cd4 <__assert_fail@plt+0xbd4>
   11ca8:	ldr	r4, [r4]
   11cac:	bl	1497c <__assert_fail@plt+0x387c>
   11cb0:	mov	r1, r4
   11cb4:	str	r6, [sp]
   11cb8:	ldr	r2, [pc, #56]	; 11cf8 <__assert_fail@plt+0xbf8>
   11cbc:	mov	r3, r0
   11cc0:	mov	r0, #0
   11cc4:	bl	10f74 <error@plt>
   11cc8:	ldr	r3, [pc, #44]	; 11cfc <__assert_fail@plt+0xbfc>
   11ccc:	ldr	r0, [r3]
   11cd0:	bl	10eb4 <_exit@plt>
   11cd4:	mov	r3, r6
   11cd8:	ldr	r1, [r4]
   11cdc:	ldr	r2, [pc, #28]	; 11d00 <__assert_fail@plt+0xc00>
   11ce0:	bl	10f74 <error@plt>
   11ce4:	b	11cc8 <__assert_fail@plt+0xbc8>
   11ce8:	andeq	r8, r2, ip, ror #2
   11cec:	andeq	r8, r2, r4, ror r1
   11cf0:	andeq	r8, r2, r0, ror #2
   11cf4:	andeq	r6, r1, ip, ror #31
   11cf8:	strdeq	r6, [r1], -r8
   11cfc:	andeq	r8, r2, r8, lsl #2
   11d00:	strdeq	r6, [r1], -ip
   11d04:	b	10e78 <posix_fadvise64@plt>
   11d08:	cmp	r0, #0
   11d0c:	bxeq	lr
   11d10:	push	{r4, lr}
   11d14:	sub	sp, sp, #16
   11d18:	mov	r4, r1
   11d1c:	bl	1104c <fileno@plt>
   11d20:	mov	r2, #0
   11d24:	mov	r3, #0
   11d28:	str	r4, [sp, #8]
   11d2c:	strd	r2, [sp]
   11d30:	bl	10e78 <posix_fadvise64@plt>
   11d34:	add	sp, sp, #16
   11d38:	pop	{r4, pc}
   11d3c:	andeq	r0, r0, r0
   11d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d44:	vpush	{d8-d9}
   11d48:	mov	r8, r3
   11d4c:	ands	r3, r3, #32
   11d50:	mov	r5, r2
   11d54:	sub	sp, sp, #124	; 0x7c
   11d58:	mov	r7, r1
   11d5c:	str	r3, [sp, #32]
   11d60:	ldr	r3, [pc, #1360]	; 122b8 <__assert_fail@plt+0x11b8>
   11d64:	str	r2, [sp, #24]
   11d68:	movne	r2, #1024	; 0x400
   11d6c:	ldr	r3, [r3]
   11d70:	moveq	r2, #1000	; 0x3e8
   11d74:	str	r2, [sp, #28]
   11d78:	str	r3, [sp, #116]	; 0x74
   11d7c:	mov	r6, r0
   11d80:	bl	110b8 <localeconv@plt>
   11d84:	add	r3, r5, #644	; 0x284
   11d88:	str	r3, [sp, #48]	; 0x30
   11d8c:	add	r3, r3, #3
   11d90:	str	r3, [sp, #12]
   11d94:	ldr	r2, [r0]
   11d98:	mov	r4, r0
   11d9c:	mov	r0, r2
   11da0:	mov	r5, r2
   11da4:	bl	10fec <strlen@plt>
   11da8:	ldr	r9, [r4, #4]
   11dac:	ldr	r3, [pc, #1288]	; 122bc <__assert_fail@plt+0x11bc>
   11db0:	sub	r2, r0, #1
   11db4:	cmp	r2, #16
   11db8:	movcc	r3, r5
   11dbc:	mov	fp, r0
   11dc0:	mov	r0, r9
   11dc4:	movcs	fp, #1
   11dc8:	str	r3, [sp, #36]	; 0x24
   11dcc:	bl	10fec <strlen@plt>
   11dd0:	ldr	r3, [pc, #1256]	; 122c0 <__assert_fail@plt+0x11c0>
   11dd4:	and	r2, r8, #3
   11dd8:	str	r2, [sp, #16]
   11ddc:	ldr	sl, [r4, #8]
   11de0:	cmp	r0, #16
   11de4:	movhi	r9, r3
   11de8:	ldrd	r0, [sp, #176]	; 0xb0
   11dec:	ldrd	r2, [sp, #184]	; 0xb8
   11df0:	cmp	r3, r1
   11df4:	cmpeq	r2, r0
   11df8:	bhi	12090 <__assert_fail@plt+0xf90>
   11dfc:	bl	169c8 <__assert_fail@plt+0x58c8>
   11e00:	orrs	r3, r2, r3
   11e04:	bne	11e38 <__assert_fail@plt+0xd38>
   11e08:	mul	r2, r0, r7
   11e0c:	umull	r4, r5, r0, r6
   11e10:	mla	r2, r6, r1, r2
   11e14:	mov	r3, r1
   11e18:	add	r5, r2, r5
   11e1c:	mov	r1, r5
   11e20:	mov	r2, r0
   11e24:	mov	r0, r4
   11e28:	bl	169c8 <__assert_fail@plt+0x58c8>
   11e2c:	cmp	r1, r7
   11e30:	cmpeq	r0, r6
   11e34:	beq	123f4 <__assert_fail@plt+0x12f4>
   11e38:	ldrd	r0, [sp, #176]	; 0xb0
   11e3c:	bl	16954 <__assert_fail@plt+0x5854>
   11e40:	vmov	d9, r0, r1
   11e44:	ldrd	r0, [sp, #184]	; 0xb8
   11e48:	bl	16954 <__assert_fail@plt+0x5854>
   11e4c:	vmov	d7, r0, r1
   11e50:	mov	r0, r6
   11e54:	mov	r1, r7
   11e58:	vdiv.f64	d8, d9, d7
   11e5c:	bl	16954 <__assert_fail@plt+0x5854>
   11e60:	tst	r8, #16
   11e64:	vmov	d7, r0, r1
   11e68:	vmul.f64	d8, d8, d7
   11e6c:	beq	11fd8 <__assert_fail@plt+0xed8>
   11e70:	vldr	s15, [sp, #28]
   11e74:	mov	r6, #0
   11e78:	vcvt.f64.s32	d6, s15
   11e7c:	vmov.f64	d7, d6
   11e80:	vmov.f64	d5, d7
   11e84:	vmul.f64	d7, d7, d6
   11e88:	add	r6, r6, #1
   11e8c:	vcmpe.f64	d7, d8
   11e90:	vmrs	APSR_nzcv, fpscr
   11e94:	bhi	11ea0 <__assert_fail@plt+0xda0>
   11e98:	cmp	r6, #8
   11e9c:	bne	11e80 <__assert_fail@plt+0xd80>
   11ea0:	ldr	r3, [sp, #32]
   11ea4:	clz	r4, r3
   11ea8:	ldr	r3, [sp, #16]
   11eac:	lsr	r4, r4, #5
   11eb0:	add	fp, fp, #1
   11eb4:	add	r4, r4, #1
   11eb8:	cmp	r3, #1
   11ebc:	vdiv.f64	d9, d8, d5
   11ec0:	add	r4, r4, fp
   11ec4:	beq	124b0 <__assert_fail@plt+0x13b0>
   11ec8:	vldr	d7, [pc, #984]	; 122a8 <__assert_fail@plt+0x11a8>
   11ecc:	vcmpe.f64	d9, d7
   11ed0:	vmrs	APSR_nzcv, fpscr
   11ed4:	vmovpl.f64	d7, d9
   11ed8:	bpl	11f1c <__assert_fail@plt+0xe1c>
   11edc:	vmov	r0, r1, d9
   11ee0:	bl	16a18 <__assert_fail@plt+0x5918>
   11ee4:	mov	r5, r0
   11ee8:	mov	r7, r1
   11eec:	bl	16954 <__assert_fail@plt+0x5854>
   11ef0:	ldr	r3, [sp, #16]
   11ef4:	cmp	r3, #0
   11ef8:	vmov	d7, r0, r1
   11efc:	bne	11f1c <__assert_fail@plt+0xe1c>
   11f00:	vcmp.f64	d9, d7
   11f04:	vmrs	APSR_nzcv, fpscr
   11f08:	beq	11f1c <__assert_fail@plt+0xe1c>
   11f0c:	adds	r0, r5, #1
   11f10:	adc	r1, r7, #0
   11f14:	bl	16954 <__assert_fail@plt+0x5854>
   11f18:	vmov	d7, r0, r1
   11f1c:	ldr	r5, [sp, #24]
   11f20:	vstr	d7, [sp]
   11f24:	ldr	r3, [pc, #928]	; 122cc <__assert_fail@plt+0x11cc>
   11f28:	mvn	r2, #0
   11f2c:	mov	r1, #1
   11f30:	mov	r0, r5
   11f34:	bl	11010 <__sprintf_chk@plt>
   11f38:	mov	r0, r5
   11f3c:	bl	10fec <strlen@plt>
   11f40:	cmp	r0, r4
   11f44:	bls	1238c <__assert_fail@plt+0x128c>
   11f48:	vldr	d7, [pc, #864]	; 122b0 <__assert_fail@plt+0x11b0>
   11f4c:	vmul.f64	d9, d9, d7
   11f50:	vldr	d7, [pc, #848]	; 122a8 <__assert_fail@plt+0x11a8>
   11f54:	vcmpe.f64	d9, d7
   11f58:	vmrs	APSR_nzcv, fpscr
   11f5c:	bpl	11fa4 <__assert_fail@plt+0xea4>
   11f60:	vmov	r0, r1, d9
   11f64:	bl	16a18 <__assert_fail@plt+0x5918>
   11f68:	mov	r4, r0
   11f6c:	mov	r5, r1
   11f70:	bl	16954 <__assert_fail@plt+0x5854>
   11f74:	ldr	r3, [sp, #16]
   11f78:	cmp	r3, #0
   11f7c:	vmov	d7, r0, r1
   11f80:	bne	11fa0 <__assert_fail@plt+0xea0>
   11f84:	vcmp.f64	d9, d7
   11f88:	vmrs	APSR_nzcv, fpscr
   11f8c:	beq	11fa0 <__assert_fail@plt+0xea0>
   11f90:	adds	r0, r4, #1
   11f94:	adc	r1, r5, #0
   11f98:	bl	16954 <__assert_fail@plt+0x5854>
   11f9c:	vmov	d7, r0, r1
   11fa0:	vmov.f64	d9, d7
   11fa4:	vldr	d6, [pc, #772]	; 122b0 <__assert_fail@plt+0x11b0>
   11fa8:	ldr	r4, [sp, #24]
   11fac:	ldr	r3, [pc, #784]	; 122c4 <__assert_fail@plt+0x11c4>
   11fb0:	mvn	r2, #0
   11fb4:	vdiv.f64	d7, d9, d6
   11fb8:	mov	r1, #1
   11fbc:	mov	r0, r4
   11fc0:	vstr	d7, [sp]
   11fc4:	bl	11010 <__sprintf_chk@plt>
   11fc8:	mov	r0, r4
   11fcc:	bl	10fec <strlen@plt>
   11fd0:	mov	r7, r0
   11fd4:	b	12020 <__assert_fail@plt+0xf20>
   11fd8:	and	r6, r8, #3
   11fdc:	cmp	r6, #1
   11fe0:	beq	11ff4 <__assert_fail@plt+0xef4>
   11fe4:	vldr	d7, [pc, #700]	; 122a8 <__assert_fail@plt+0x11a8>
   11fe8:	vcmpe.f64	d8, d7
   11fec:	vmrs	APSR_nzcv, fpscr
   11ff0:	bmi	123b0 <__assert_fail@plt+0x12b0>
   11ff4:	ldr	r4, [sp, #24]
   11ff8:	ldr	r3, [pc, #708]	; 122c4 <__assert_fail@plt+0x11c4>
   11ffc:	mvn	r2, #0
   12000:	mov	r1, #1
   12004:	vstr	d8, [sp]
   12008:	mov	r0, r4
   1200c:	bl	11010 <__sprintf_chk@plt>
   12010:	mov	r0, r4
   12014:	bl	10fec <strlen@plt>
   12018:	mvn	r6, #0
   1201c:	mov	r7, r0
   12020:	ldr	r3, [sp, #12]
   12024:	mov	r2, r0
   12028:	sub	fp, r3, r0
   1202c:	mov	r0, fp
   12030:	ldr	r1, [sp, #24]
   12034:	add	r7, fp, r7
   12038:	bl	10e9c <memmove@plt>
   1203c:	tst	r8, #4
   12040:	bne	12200 <__assert_fail@plt+0x1100>
   12044:	tst	r8, #128	; 0x80
   12048:	beq	12060 <__assert_fail@plt+0xf60>
   1204c:	cmn	r6, #1
   12050:	beq	122d0 <__assert_fail@plt+0x11d0>
   12054:	and	r3, r8, #256	; 0x100
   12058:	orrs	r2, r3, r6
   1205c:	bne	12538 <__assert_fail@plt+0x1438>
   12060:	ldr	r2, [sp, #12]
   12064:	mov	r3, #0
   12068:	mov	r0, fp
   1206c:	strb	r3, [r2]
   12070:	ldr	r3, [pc, #576]	; 122b8 <__assert_fail@plt+0x11b8>
   12074:	ldr	r2, [sp, #116]	; 0x74
   12078:	ldr	r3, [r3]
   1207c:	cmp	r2, r3
   12080:	bne	12704 <__assert_fail@plt+0x1604>
   12084:	add	sp, sp, #124	; 0x7c
   12088:	vpop	{d8-d9}
   1208c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12090:	ldrd	r2, [sp, #176]	; 0xb0
   12094:	orrs	r3, r2, r3
   12098:	beq	11e38 <__assert_fail@plt+0xd38>
   1209c:	ldrd	r2, [sp, #176]	; 0xb0
   120a0:	ldrd	r0, [sp, #184]	; 0xb8
   120a4:	bl	169c8 <__assert_fail@plt+0x58c8>
   120a8:	orrs	r3, r2, r3
   120ac:	mov	r4, r0
   120b0:	mov	r5, r1
   120b4:	bne	11e38 <__assert_fail@plt+0xd38>
   120b8:	mov	r0, r6
   120bc:	mov	r1, r7
   120c0:	mov	r2, r4
   120c4:	mov	r3, r5
   120c8:	bl	169c8 <__assert_fail@plt+0x58c8>
   120cc:	strd	r0, [sp, #52]	; 0x34
   120d0:	lsl	r0, r2, #2
   120d4:	lsl	r1, r3, #2
   120d8:	adds	r0, r0, r2
   120dc:	orr	r1, r1, r2, lsr #30
   120e0:	adc	r1, r1, r3
   120e4:	adds	r0, r0, r0
   120e8:	adc	r1, r1, r1
   120ec:	mov	r2, r4
   120f0:	mov	r3, r5
   120f4:	bl	169c8 <__assert_fail@plt+0x58c8>
   120f8:	adds	r1, r2, r2
   120fc:	adc	r3, r3, r3
   12100:	str	r3, [sp, #44]	; 0x2c
   12104:	str	r1, [sp, #40]	; 0x28
   12108:	ldrd	r6, [sp, #40]	; 0x28
   1210c:	mov	r3, r5
   12110:	mov	lr, r0
   12114:	cmp	r5, r7
   12118:	cmpeq	r4, r6
   1211c:	ldrd	r4, [sp, #52]	; 0x34
   12120:	bls	12524 <__assert_fail@plt+0x1424>
   12124:	mov	r3, r6
   12128:	orrs	r3, r3, r7
   1212c:	movne	r3, #1
   12130:	moveq	r3, #0
   12134:	mov	ip, r3
   12138:	ands	r3, r8, #16
   1213c:	str	r3, [sp, #52]	; 0x34
   12140:	beq	1240c <__assert_fail@plt+0x130c>
   12144:	ldr	r1, [sp, #28]
   12148:	mov	r3, #0
   1214c:	mov	r2, r1
   12150:	cmp	r3, r5
   12154:	cmpeq	r1, r4
   12158:	strd	r2, [sp, #40]	; 0x28
   1215c:	mov	r6, #0
   12160:	bhi	12410 <__assert_fail@plt+0x1310>
   12164:	str	r9, [sp, #56]	; 0x38
   12168:	str	r8, [sp, #68]	; 0x44
   1216c:	mov	r7, ip
   12170:	str	fp, [sp, #60]	; 0x3c
   12174:	mov	r9, r1
   12178:	str	sl, [sp, #64]	; 0x40
   1217c:	mov	r8, lr
   12180:	b	121a8 <__assert_fail@plt+0x10a8>
   12184:	adds	r7, r7, #0
   12188:	movne	r7, #1
   1218c:	ldrd	r2, [sp, #40]	; 0x28
   12190:	add	r6, r6, #1
   12194:	cmp	r3, fp
   12198:	cmpeq	r2, sl
   1219c:	bhi	125a8 <__assert_fail@plt+0x14a8>
   121a0:	cmp	r6, #8
   121a4:	beq	12570 <__assert_fail@plt+0x1470>
   121a8:	mov	r0, r4
   121ac:	mov	r1, r5
   121b0:	ldrd	r2, [sp, #40]	; 0x28
   121b4:	bl	169c8 <__assert_fail@plt+0x58c8>
   121b8:	add	r2, r2, r2, lsl #2
   121bc:	mov	sl, r0
   121c0:	mov	fp, r1
   121c4:	add	r0, r8, r2, lsl #1
   121c8:	mov	r1, r9
   121cc:	bl	165e8 <__assert_fail@plt+0x54e8>
   121d0:	asr	r3, r7, #1
   121d4:	mov	r4, sl
   121d8:	mov	r5, fp
   121dc:	add	r1, r3, r1, lsl #1
   121e0:	cmp	r9, r1
   121e4:	mov	r8, r0
   121e8:	add	r7, r7, r1
   121ec:	bhi	12184 <__assert_fail@plt+0x1084>
   121f0:	cmp	r9, r7
   121f4:	movcc	r7, #3
   121f8:	movcs	r7, #2
   121fc:	b	1218c <__assert_fail@plt+0x108c>
   12200:	mov	r0, r9
   12204:	bl	10fec <strlen@plt>
   12208:	sub	r4, r7, fp
   1220c:	add	r3, sp, #72	; 0x48
   12210:	mov	r1, fp
   12214:	mov	r2, r4
   12218:	mvn	r5, #0
   1221c:	str	r0, [sp, #16]
   12220:	mov	r0, r3
   12224:	mov	r3, #41	; 0x29
   12228:	bl	10f2c <__memcpy_chk@plt>
   1222c:	ldr	fp, [sp, #16]
   12230:	ldrb	r3, [sl]
   12234:	cmp	r3, #0
   12238:	beq	1224c <__assert_fail@plt+0x114c>
   1223c:	cmp	r3, #255	; 0xff
   12240:	movne	r5, r3
   12244:	moveq	r5, r4
   12248:	add	sl, sl, #1
   1224c:	cmp	r5, r4
   12250:	bls	1226c <__assert_fail@plt+0x116c>
   12254:	sub	fp, r7, r4
   12258:	mov	r2, r4
   1225c:	add	r1, sp, #72	; 0x48
   12260:	mov	r0, fp
   12264:	bl	10ec0 <memcpy@plt>
   12268:	b	12044 <__assert_fail@plt+0xf44>
   1226c:	sub	r4, r4, r5
   12270:	add	r3, sp, #72	; 0x48
   12274:	sub	r7, r7, r5
   12278:	add	r1, r3, r4
   1227c:	mov	r0, r7
   12280:	mov	r2, r5
   12284:	bl	10ec0 <memcpy@plt>
   12288:	cmp	r4, #0
   1228c:	beq	12708 <__assert_fail@plt+0x1608>
   12290:	sub	r7, r7, fp
   12294:	mov	r0, r7
   12298:	mov	r2, fp
   1229c:	mov	r1, r9
   122a0:	bl	10ec0 <memcpy@plt>
   122a4:	b	12230 <__assert_fail@plt+0x1130>
   122a8:	andeq	r0, r0, r0
   122ac:	mvnsmi	r0, #0
   122b0:	andeq	r0, r0, r0
   122b4:	eormi	r0, r4, r0
   122b8:	andeq	r7, r2, r8, lsl #30
   122bc:	andeq	r7, r1, r0, lsr #32
   122c0:	andeq	r6, r1, r4, ror #25
   122c4:	andeq	r7, r1, r4, lsr #32
   122c8:	andeq	r7, r1, r0
   122cc:	andeq	r7, r1, ip, lsr #32
   122d0:	ldrd	r2, [sp, #184]	; 0xb8
   122d4:	cmp	r3, #0
   122d8:	cmpeq	r2, #1
   122dc:	bls	12568 <__assert_fail@plt+0x1468>
   122e0:	ldr	r1, [sp, #28]
   122e4:	ldrd	r4, [sp, #184]	; 0xb8
   122e8:	mov	r6, #1
   122ec:	mov	r2, #1
   122f0:	mov	r3, #0
   122f4:	mul	r0, r1, r3
   122f8:	umull	r2, r3, r2, r1
   122fc:	add	r3, r0, r3
   12300:	cmp	r5, r3
   12304:	cmpeq	r4, r2
   12308:	bls	12318 <__assert_fail@plt+0x1218>
   1230c:	add	r6, r6, #1
   12310:	cmp	r6, #8
   12314:	bne	122f4 <__assert_fail@plt+0x11f4>
   12318:	tst	r8, #64	; 0x40
   1231c:	and	r3, r8, #256	; 0x100
   12320:	beq	12340 <__assert_fail@plt+0x1240>
   12324:	ldr	r1, [sp, #24]
   12328:	add	r2, r1, #648	; 0x288
   1232c:	str	r2, [sp, #12]
   12330:	mov	r2, #32
   12334:	strb	r2, [r1, #647]	; 0x287
   12338:	cmp	r6, #0
   1233c:	beq	12710 <__assert_fail@plt+0x1610>
   12340:	ldr	r0, [sp, #32]
   12344:	cmp	r6, #1
   12348:	cmpeq	r0, #0
   1234c:	beq	1258c <__assert_fail@plt+0x148c>
   12350:	ldr	r1, [pc, #-144]	; 122c8 <__assert_fail@plt+0x11c8>
   12354:	cmp	r3, #0
   12358:	ldr	r2, [sp, #12]
   1235c:	ldrb	r3, [r1, r6]
   12360:	strb	r3, [r2], #1
   12364:	beq	125a0 <__assert_fail@plt+0x14a0>
   12368:	cmp	r0, #0
   1236c:	movne	r3, #105	; 0x69
   12370:	ldrne	r2, [sp, #12]
   12374:	strbne	r3, [r2, #1]
   12378:	addne	r2, r2, #2
   1237c:	mov	r3, #66	; 0x42
   12380:	strb	r3, [r2], #1
   12384:	str	r2, [sp, #12]
   12388:	b	12060 <__assert_fail@plt+0xf60>
   1238c:	tst	r8, #8
   12390:	beq	123a8 <__assert_fail@plt+0x12a8>
   12394:	ldr	r3, [sp, #24]
   12398:	add	r3, r3, r0
   1239c:	ldrb	r3, [r3, #-1]
   123a0:	cmp	r3, #48	; 0x30
   123a4:	beq	12660 <__assert_fail@plt+0x1560>
   123a8:	sub	r7, r0, fp
   123ac:	b	12020 <__assert_fail@plt+0xf20>
   123b0:	vmov	r0, r1, d8
   123b4:	bl	16a18 <__assert_fail@plt+0x5918>
   123b8:	mov	r4, r0
   123bc:	mov	r5, r1
   123c0:	bl	16954 <__assert_fail@plt+0x5854>
   123c4:	cmp	r6, #0
   123c8:	vmov	d7, r0, r1
   123cc:	bne	123ec <__assert_fail@plt+0x12ec>
   123d0:	vcmp.f64	d8, d7
   123d4:	vmrs	APSR_nzcv, fpscr
   123d8:	beq	123ec <__assert_fail@plt+0x12ec>
   123dc:	adds	r0, r4, #1
   123e0:	adc	r1, r5, #0
   123e4:	bl	16954 <__assert_fail@plt+0x5854>
   123e8:	vmov	d7, r0, r1
   123ec:	vmov.f64	d8, d7
   123f0:	b	11ff4 <__assert_fail@plt+0xef4>
   123f4:	mov	r3, #0
   123f8:	mov	ip, r3
   123fc:	mov	lr, r3
   12400:	ands	r3, r8, #16
   12404:	str	r3, [sp, #52]	; 0x34
   12408:	bne	12144 <__assert_fail@plt+0x1044>
   1240c:	mvn	r6, #0
   12410:	ldr	r3, [sp, #16]
   12414:	cmp	r3, #1
   12418:	ldrne	r7, [sp, #12]
   1241c:	beq	124e8 <__assert_fail@plt+0x13e8>
   12420:	ldr	r3, [sp, #16]
   12424:	cmp	r3, #0
   12428:	bne	12460 <__assert_fail@plt+0x1360>
   1242c:	add	r3, lr, ip
   12430:	cmp	r3, #0
   12434:	ble	12460 <__assert_fail@plt+0x1360>
   12438:	ldr	r3, [sp, #52]	; 0x34
   1243c:	adds	r4, r4, #1
   12440:	adc	r5, r5, #0
   12444:	cmp	r3, #0
   12448:	beq	12460 <__assert_fail@plt+0x1360>
   1244c:	ldr	r2, [sp, #28]
   12450:	mov	r3, #0
   12454:	cmp	r3, r5
   12458:	cmpeq	r2, r4
   1245c:	beq	12544 <__assert_fail@plt+0x1444>
   12460:	mov	fp, r7
   12464:	b	12470 <__assert_fail@plt+0x1370>
   12468:	mov	r4, r0
   1246c:	mov	r5, r1
   12470:	mov	r2, #10
   12474:	mov	r3, #0
   12478:	mov	r0, r4
   1247c:	mov	r1, r5
   12480:	bl	169c8 <__assert_fail@plt+0x58c8>
   12484:	mov	r0, r4
   12488:	mov	r1, r5
   1248c:	mov	r3, #0
   12490:	add	r2, r2, #48	; 0x30
   12494:	strb	r2, [fp, #-1]!
   12498:	mov	r2, #10
   1249c:	bl	169c8 <__assert_fail@plt+0x58c8>
   124a0:	cmp	r5, #0
   124a4:	cmpeq	r4, #9
   124a8:	bhi	12468 <__assert_fail@plt+0x1368>
   124ac:	b	1203c <__assert_fail@plt+0xf3c>
   124b0:	ldr	r5, [sp, #24]
   124b4:	ldr	r3, [pc, #-496]	; 122cc <__assert_fail@plt+0x11cc>
   124b8:	mvn	r2, #0
   124bc:	ldr	r1, [sp, #16]
   124c0:	vstr	d9, [sp]
   124c4:	mov	r0, r5
   124c8:	bl	11010 <__sprintf_chk@plt>
   124cc:	mov	r0, r5
   124d0:	bl	10fec <strlen@plt>
   124d4:	cmp	r0, r4
   124d8:	bls	1238c <__assert_fail@plt+0x128c>
   124dc:	vldr	d7, [pc, #572]	; 12720 <__assert_fail@plt+0x1620>
   124e0:	vmul.f64	d9, d9, d7
   124e4:	b	11fa4 <__assert_fail@plt+0xea4>
   124e8:	and	r3, r4, #1
   124ec:	str	r3, [sp, #16]
   124f0:	mov	r3, #0
   124f4:	str	r3, [sp, #20]
   124f8:	ldrd	r2, [sp, #16]
   124fc:	ldr	r7, [sp, #12]
   12500:	adds	r2, r2, ip
   12504:	adc	r3, r3, ip, asr #31
   12508:	orr	r2, r2, r3
   1250c:	mov	r3, lr
   12510:	cmp	r2, #0
   12514:	addne	r3, r3, #1
   12518:	cmp	r3, #5
   1251c:	bgt	12438 <__assert_fail@plt+0x1338>
   12520:	b	12460 <__assert_fail@plt+0x1360>
   12524:	movcs	r3, #2
   12528:	movcs	ip, r3
   1252c:	movcc	r3, #3
   12530:	movcc	ip, r3
   12534:	b	12138 <__assert_fail@plt+0x1038>
   12538:	tst	r8, #64	; 0x40
   1253c:	beq	12338 <__assert_fail@plt+0x1238>
   12540:	b	12324 <__assert_fail@plt+0x1224>
   12544:	cmp	r6, #8
   12548:	beq	12460 <__assert_fail@plt+0x1360>
   1254c:	tst	r8, #8
   12550:	add	r6, r6, #1
   12554:	beq	126d0 <__assert_fail@plt+0x15d0>
   12558:	mov	r3, #49	; 0x31
   1255c:	strb	r3, [r7, #-1]
   12560:	sub	fp, r7, #1
   12564:	b	1203c <__assert_fail@plt+0xf3c>
   12568:	mov	r6, #0
   1256c:	b	12054 <__assert_fail@plt+0xf54>
   12570:	mov	lr, r8
   12574:	ldr	r9, [sp, #56]	; 0x38
   12578:	mov	ip, r7
   1257c:	ldr	fp, [sp, #60]	; 0x3c
   12580:	ldr	sl, [sp, #64]	; 0x40
   12584:	ldr	r8, [sp, #68]	; 0x44
   12588:	b	12410 <__assert_fail@plt+0x1310>
   1258c:	ldr	r2, [sp, #12]
   12590:	cmp	r3, #0
   12594:	mov	r3, #107	; 0x6b
   12598:	strb	r3, [r2], #1
   1259c:	bne	1237c <__assert_fail@plt+0x127c>
   125a0:	str	r2, [sp, #12]
   125a4:	b	12060 <__assert_fail@plt+0xf60>
   125a8:	mov	r3, fp
   125ac:	mov	r2, sl
   125b0:	cmp	r3, #0
   125b4:	cmpeq	r2, #9
   125b8:	mov	lr, r8
   125bc:	ldr	r9, [sp, #56]	; 0x38
   125c0:	mov	ip, r7
   125c4:	strd	r2, [sp, #40]	; 0x28
   125c8:	ldr	fp, [sp, #60]	; 0x3c
   125cc:	ldr	sl, [sp, #64]	; 0x40
   125d0:	ldr	r8, [sp, #68]	; 0x44
   125d4:	bhi	12410 <__assert_fail@plt+0x1310>
   125d8:	ldr	r3, [sp, #16]
   125dc:	cmp	r3, #1
   125e0:	beq	1268c <__assert_fail@plt+0x158c>
   125e4:	ldr	r2, [sp, #16]
   125e8:	adds	r3, r7, #0
   125ec:	movne	r3, #1
   125f0:	cmp	r2, #0
   125f4:	movne	r3, #0
   125f8:	cmp	r3, #0
   125fc:	bne	12678 <__assert_fail@plt+0x1578>
   12600:	cmp	r0, #0
   12604:	addne	r3, r0, #48	; 0x30
   12608:	uxtbne	r3, r3
   1260c:	bne	1261c <__assert_fail@plt+0x151c>
   12610:	tst	r8, #8
   12614:	bne	126a4 <__assert_fail@plt+0x15a4>
   12618:	mov	r3, #48	; 0x30
   1261c:	ldr	r2, [sp, #48]	; 0x30
   12620:	ldr	r1, [sp, #36]	; 0x24
   12624:	add	r7, r2, #2
   12628:	ldr	r2, [sp, #24]
   1262c:	sub	r7, r7, fp
   12630:	mov	r0, r7
   12634:	strb	r3, [r2, #646]	; 0x286
   12638:	mov	r2, fp
   1263c:	bl	10ec0 <memcpy@plt>
   12640:	mov	r3, #0
   12644:	mov	ip, r3
   12648:	ldr	r3, [sp, #16]
   1264c:	cmp	r3, #1
   12650:	beq	12460 <__assert_fail@plt+0x1360>
   12654:	mov	r3, #0
   12658:	mov	lr, r3
   1265c:	b	12420 <__assert_fail@plt+0x1320>
   12660:	vldr	d7, [pc, #184]	; 12720 <__assert_fail@plt+0x1620>
   12664:	ldr	r3, [sp, #16]
   12668:	cmp	r3, #1
   1266c:	vmul.f64	d9, d9, d7
   12670:	bne	11f50 <__assert_fail@plt+0xe50>
   12674:	b	11fa4 <__assert_fail@plt+0xea4>
   12678:	cmp	r0, #9
   1267c:	beq	126ac <__assert_fail@plt+0x15ac>
   12680:	add	r3, r0, #49	; 0x31
   12684:	uxtb	r3, r3
   12688:	b	1261c <__assert_fail@plt+0x151c>
   1268c:	and	r3, r0, #1
   12690:	add	r3, r3, r7
   12694:	cmp	r3, #2
   12698:	movle	r3, #0
   1269c:	movgt	r3, #1
   126a0:	b	125f8 <__assert_fail@plt+0x14f8>
   126a4:	ldr	r7, [sp, #12]
   126a8:	b	12648 <__assert_fail@plt+0x1548>
   126ac:	ldrd	r2, [sp, #40]	; 0x28
   126b0:	adds	r4, r2, #1
   126b4:	adc	r5, r3, #0
   126b8:	cmp	r5, #0
   126bc:	cmpeq	r4, #10
   126c0:	beq	126f4 <__assert_fail@plt+0x15f4>
   126c4:	mov	r3, #0
   126c8:	mov	ip, r3
   126cc:	b	12610 <__assert_fail@plt+0x1510>
   126d0:	mov	r2, #48	; 0x30
   126d4:	mvn	r3, fp
   126d8:	strb	r2, [r7, #-1]
   126dc:	add	r7, r7, r3
   126e0:	ldr	r1, [sp, #36]	; 0x24
   126e4:	mov	r2, fp
   126e8:	mov	r0, r7
   126ec:	bl	10ec0 <memcpy@plt>
   126f0:	b	12558 <__assert_fail@plt+0x1458>
   126f4:	mov	r3, #0
   126f8:	ldr	r7, [sp, #12]
   126fc:	mov	ip, r3
   12700:	b	12648 <__assert_fail@plt+0x1548>
   12704:	bl	10efc <__stack_chk_fail@plt>
   12708:	mov	fp, r7
   1270c:	b	12044 <__assert_fail@plt+0xf44>
   12710:	cmp	r3, #0
   12714:	ldrne	r2, [sp, #12]
   12718:	bne	1237c <__assert_fail@plt+0x127c>
   1271c:	b	12060 <__assert_fail@plt+0xf60>
   12720:	andeq	r0, r0, r0
   12724:	eormi	r0, r4, r0
   12728:	push	{r4, r5, r6, r7, r8, r9, lr}
   1272c:	sub	sp, sp, #20
   12730:	ldr	r6, [pc, #424]	; 128e0 <__assert_fail@plt+0x17e0>
   12734:	subs	r4, r0, #0
   12738:	mov	r9, r1
   1273c:	ldr	r3, [r6]
   12740:	mov	r7, r2
   12744:	str	r3, [sp, #12]
   12748:	beq	12858 <__assert_fail@plt+0x1758>
   1274c:	ldrb	r3, [r4]
   12750:	ldr	r5, [pc, #396]	; 128e4 <__assert_fail@plt+0x17e4>
   12754:	cmp	r3, #39	; 0x27
   12758:	addeq	r4, r4, #1
   1275c:	mov	r3, #4
   12760:	add	r2, r5, #12
   12764:	add	r1, r5, #20
   12768:	mov	r0, r4
   1276c:	moveq	r8, #4
   12770:	movne	r8, #0
   12774:	bl	15fec <__assert_fail@plt+0x4eec>
   12778:	cmp	r0, #0
   1277c:	blt	127b8 <__assert_fail@plt+0x16b8>
   12780:	add	r5, r5, r0, lsl #2
   12784:	mov	r2, #1
   12788:	ldr	r1, [r5, #12]
   1278c:	mov	r3, #0
   12790:	mov	r0, #0
   12794:	orr	r8, r8, r1
   12798:	strd	r2, [r7]
   1279c:	str	r8, [r9]
   127a0:	ldr	r2, [sp, #12]
   127a4:	ldr	r3, [r6]
   127a8:	cmp	r2, r3
   127ac:	bne	128dc <__assert_fail@plt+0x17dc>
   127b0:	add	sp, sp, #20
   127b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   127b8:	ldr	r2, [pc, #296]	; 128e8 <__assert_fail@plt+0x17e8>
   127bc:	mov	r3, r7
   127c0:	str	r2, [sp]
   127c4:	add	r1, sp, #8
   127c8:	mov	r2, #0
   127cc:	mov	r0, r4
   127d0:	bl	153bc <__assert_fail@plt+0x42bc>
   127d4:	cmp	r0, #0
   127d8:	bne	12820 <__assert_fail@plt+0x1720>
   127dc:	ldrb	r3, [r4]
   127e0:	sub	r3, r3, #48	; 0x30
   127e4:	cmp	r3, #9
   127e8:	bls	12814 <__assert_fail@plt+0x1714>
   127ec:	ldr	r2, [sp, #8]
   127f0:	cmp	r4, r2
   127f4:	bne	12804 <__assert_fail@plt+0x1704>
   127f8:	b	128b0 <__assert_fail@plt+0x17b0>
   127fc:	cmp	r2, r4
   12800:	beq	128b0 <__assert_fail@plt+0x17b0>
   12804:	ldrb	r3, [r4, #1]!
   12808:	sub	r3, r3, #48	; 0x30
   1280c:	cmp	r3, #9
   12810:	bhi	127fc <__assert_fail@plt+0x16fc>
   12814:	ldrd	r2, [r7]
   12818:	str	r8, [r9]
   1281c:	b	1282c <__assert_fail@plt+0x172c>
   12820:	mov	r3, #0
   12824:	str	r3, [r9]
   12828:	ldrd	r2, [r7]
   1282c:	orrs	r3, r2, r3
   12830:	bne	127a0 <__assert_fail@plt+0x16a0>
   12834:	ldr	r0, [pc, #176]	; 128ec <__assert_fail@plt+0x17ec>
   12838:	bl	10f8c <getenv@plt>
   1283c:	mov	r3, #0
   12840:	cmp	r0, #0
   12844:	moveq	r2, #1024	; 0x400
   12848:	movne	r2, #512	; 0x200
   1284c:	mov	r0, #4
   12850:	strd	r2, [r7]
   12854:	b	127a0 <__assert_fail@plt+0x16a0>
   12858:	ldr	r0, [pc, #144]	; 128f0 <__assert_fail@plt+0x17f0>
   1285c:	bl	10f8c <getenv@plt>
   12860:	subs	r4, r0, #0
   12864:	bne	1274c <__assert_fail@plt+0x164c>
   12868:	ldr	r0, [pc, #132]	; 128f4 <__assert_fail@plt+0x17f4>
   1286c:	bl	10f8c <getenv@plt>
   12870:	subs	r4, r0, #0
   12874:	bne	1274c <__assert_fail@plt+0x164c>
   12878:	ldr	r0, [pc, #108]	; 128ec <__assert_fail@plt+0x17ec>
   1287c:	bl	10f8c <getenv@plt>
   12880:	subs	r3, r0, #0
   12884:	moveq	r4, #1024	; 0x400
   12888:	moveq	r5, #0
   1288c:	movne	r2, #512	; 0x200
   12890:	movne	r3, #0
   12894:	strdeq	r4, [r7]
   12898:	strdne	r2, [r7]
   1289c:	moveq	r0, r3
   128a0:	streq	r3, [r9]
   128a4:	movne	r0, r4
   128a8:	strne	r4, [r9]
   128ac:	b	127a0 <__assert_fail@plt+0x16a0>
   128b0:	ldrb	r3, [r2, #-1]
   128b4:	cmp	r3, #66	; 0x42
   128b8:	orrne	r8, r8, #128	; 0x80
   128bc:	beq	128c8 <__assert_fail@plt+0x17c8>
   128c0:	orr	r8, r8, #32
   128c4:	b	12814 <__assert_fail@plt+0x1714>
   128c8:	ldrb	r3, [r2, #-2]
   128cc:	orr	r8, r8, #384	; 0x180
   128d0:	cmp	r3, #105	; 0x69
   128d4:	bne	12814 <__assert_fail@plt+0x1714>
   128d8:	b	128c0 <__assert_fail@plt+0x17c0>
   128dc:	bl	10efc <__stack_chk_fail@plt>
   128e0:	andeq	r7, r2, r8, lsl #30
   128e4:	andeq	r7, r1, r0
   128e8:	andeq	r7, r1, ip, asr r0
   128ec:	andeq	r7, r1, ip, asr #32
   128f0:	andeq	r7, r1, r4, lsr r0
   128f4:	andeq	r7, r1, r0, asr #32
   128f8:	push	{r4, r5, r6, lr}
   128fc:	subs	r4, r0, #0
   12900:	beq	12974 <__assert_fail@plt+0x1874>
   12904:	mov	r1, #47	; 0x2f
   12908:	bl	110a0 <strrchr@plt>
   1290c:	subs	r5, r0, #0
   12910:	beq	12960 <__assert_fail@plt+0x1860>
   12914:	add	r6, r5, #1
   12918:	sub	r3, r6, r4
   1291c:	cmp	r3, #6
   12920:	ble	12960 <__assert_fail@plt+0x1860>
   12924:	mov	r2, #7
   12928:	ldr	r1, [pc, #96]	; 12990 <__assert_fail@plt+0x1890>
   1292c:	sub	r0, r5, #6
   12930:	bl	110dc <strncmp@plt>
   12934:	cmp	r0, #0
   12938:	bne	12960 <__assert_fail@plt+0x1860>
   1293c:	mov	r2, #3
   12940:	ldr	r1, [pc, #76]	; 12994 <__assert_fail@plt+0x1894>
   12944:	mov	r0, r6
   12948:	bl	110dc <strncmp@plt>
   1294c:	cmp	r0, #0
   12950:	movne	r4, r6
   12954:	ldreq	r3, [pc, #60]	; 12998 <__assert_fail@plt+0x1898>
   12958:	addeq	r4, r5, #4
   1295c:	streq	r4, [r3]
   12960:	ldr	r2, [pc, #52]	; 1299c <__assert_fail@plt+0x189c>
   12964:	ldr	r3, [pc, #52]	; 129a0 <__assert_fail@plt+0x18a0>
   12968:	str	r4, [r2]
   1296c:	str	r4, [r3]
   12970:	pop	{r4, r5, r6, pc}
   12974:	ldr	r3, [pc, #40]	; 129a4 <__assert_fail@plt+0x18a4>
   12978:	mov	r2, #55	; 0x37
   1297c:	mov	r1, #1
   12980:	ldr	r3, [r3]
   12984:	ldr	r0, [pc, #28]	; 129a8 <__assert_fail@plt+0x18a8>
   12988:	bl	10f38 <fwrite@plt>
   1298c:	bl	110e8 <abort@plt>
   12990:	strheq	r7, [r1], -ip
   12994:	andeq	r7, r1, r4, asr #1
   12998:	andeq	r8, r2, r0, asr r1
   1299c:	andeq	r8, r2, ip, ror r1
   129a0:	andeq	r8, r2, r4, asr r1
   129a4:	andeq	r8, r2, r0, ror #2
   129a8:	andeq	r7, r1, r4, lsl #1
   129ac:	push	{r4, lr}
   129b0:	mov	r2, #48	; 0x30
   129b4:	mov	r4, r1
   129b8:	mov	r1, #0
   129bc:	bl	11034 <memset@plt>
   129c0:	cmp	r4, #10
   129c4:	beq	129d0 <__assert_fail@plt+0x18d0>
   129c8:	str	r4, [r0]
   129cc:	pop	{r4, pc}
   129d0:	bl	110e8 <abort@plt>
   129d4:	push	{r4, r5, r6, lr}
   129d8:	mov	r2, #5
   129dc:	mov	r5, r0
   129e0:	mov	r6, r1
   129e4:	mov	r1, r0
   129e8:	mov	r0, #0
   129ec:	bl	10ef0 <dcgettext@plt>
   129f0:	cmp	r5, r0
   129f4:	mov	r4, r0
   129f8:	beq	12a04 <__assert_fail@plt+0x1904>
   129fc:	mov	r0, r4
   12a00:	pop	{r4, r5, r6, pc}
   12a04:	bl	163c8 <__assert_fail@plt+0x52c8>
   12a08:	ldrb	r3, [r0]
   12a0c:	bic	r3, r3, #32
   12a10:	cmp	r3, #85	; 0x55
   12a14:	bne	12a74 <__assert_fail@plt+0x1974>
   12a18:	ldrb	r3, [r0, #1]
   12a1c:	bic	r3, r3, #32
   12a20:	cmp	r3, #84	; 0x54
   12a24:	bne	12aec <__assert_fail@plt+0x19ec>
   12a28:	ldrb	r3, [r0, #2]
   12a2c:	bic	r3, r3, #32
   12a30:	cmp	r3, #70	; 0x46
   12a34:	bne	12aec <__assert_fail@plt+0x19ec>
   12a38:	ldrb	r3, [r0, #3]
   12a3c:	cmp	r3, #45	; 0x2d
   12a40:	bne	12aec <__assert_fail@plt+0x19ec>
   12a44:	ldrb	r3, [r0, #4]
   12a48:	cmp	r3, #56	; 0x38
   12a4c:	bne	12aec <__assert_fail@plt+0x19ec>
   12a50:	ldrb	r3, [r0, #5]
   12a54:	cmp	r3, #0
   12a58:	bne	12aec <__assert_fail@plt+0x19ec>
   12a5c:	ldrb	r2, [r4]
   12a60:	ldr	r3, [pc, #156]	; 12b04 <__assert_fail@plt+0x1a04>
   12a64:	ldr	r4, [pc, #156]	; 12b08 <__assert_fail@plt+0x1a08>
   12a68:	cmp	r2, #96	; 0x60
   12a6c:	movne	r4, r3
   12a70:	b	129fc <__assert_fail@plt+0x18fc>
   12a74:	cmp	r3, #71	; 0x47
   12a78:	bne	12aec <__assert_fail@plt+0x19ec>
   12a7c:	ldrb	r3, [r0, #1]
   12a80:	bic	r3, r3, #32
   12a84:	cmp	r3, #66	; 0x42
   12a88:	bne	12aec <__assert_fail@plt+0x19ec>
   12a8c:	ldrb	r3, [r0, #2]
   12a90:	cmp	r3, #49	; 0x31
   12a94:	bne	12aec <__assert_fail@plt+0x19ec>
   12a98:	ldrb	r3, [r0, #3]
   12a9c:	cmp	r3, #56	; 0x38
   12aa0:	bne	12aec <__assert_fail@plt+0x19ec>
   12aa4:	ldrb	r3, [r0, #4]
   12aa8:	cmp	r3, #48	; 0x30
   12aac:	bne	12aec <__assert_fail@plt+0x19ec>
   12ab0:	ldrb	r3, [r0, #5]
   12ab4:	cmp	r3, #51	; 0x33
   12ab8:	bne	12aec <__assert_fail@plt+0x19ec>
   12abc:	ldrb	r3, [r0, #6]
   12ac0:	cmp	r3, #48	; 0x30
   12ac4:	bne	12aec <__assert_fail@plt+0x19ec>
   12ac8:	ldrb	r3, [r0, #7]
   12acc:	cmp	r3, #0
   12ad0:	bne	12aec <__assert_fail@plt+0x19ec>
   12ad4:	ldrb	r2, [r4]
   12ad8:	ldr	r3, [pc, #44]	; 12b0c <__assert_fail@plt+0x1a0c>
   12adc:	ldr	r4, [pc, #44]	; 12b10 <__assert_fail@plt+0x1a10>
   12ae0:	cmp	r2, #96	; 0x60
   12ae4:	movne	r4, r3
   12ae8:	b	129fc <__assert_fail@plt+0x18fc>
   12aec:	ldr	r3, [pc, #32]	; 12b14 <__assert_fail@plt+0x1a14>
   12af0:	ldr	r4, [pc, #32]	; 12b18 <__assert_fail@plt+0x1a18>
   12af4:	cmp	r6, #9
   12af8:	movne	r4, r3
   12afc:	mov	r0, r4
   12b00:	pop	{r4, r5, r6, pc}
   12b04:	andeq	r7, r1, r0, lsr #2
   12b08:	andeq	r7, r1, ip, lsr #2
   12b0c:	andeq	r7, r1, r4, lsr #2
   12b10:	andeq	r7, r1, r8, lsr #2
   12b14:	andeq	r7, r1, r0, lsr r1
   12b18:	andeq	r7, r1, ip, lsl r1
   12b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b20:	sub	sp, sp, #124	; 0x7c
   12b24:	ldr	ip, [pc, #3576]	; 13924 <__assert_fail@plt+0x2824>
   12b28:	str	r3, [sp, #24]
   12b2c:	ldr	r3, [sp, #168]	; 0xa8
   12b30:	ldr	ip, [ip]
   12b34:	str	r3, [sp, #56]	; 0x38
   12b38:	ldr	r3, [sp, #172]	; 0xac
   12b3c:	ldr	r8, [sp, #160]	; 0xa0
   12b40:	str	r3, [sp, #80]	; 0x50
   12b44:	ldr	r3, [sp, #176]	; 0xb0
   12b48:	mov	fp, r0
   12b4c:	str	r3, [sp, #76]	; 0x4c
   12b50:	mov	sl, r1
   12b54:	str	r2, [sp, #36]	; 0x24
   12b58:	str	ip, [sp, #116]	; 0x74
   12b5c:	bl	10f50 <__ctype_get_mb_cur_max@plt>
   12b60:	ldr	r3, [sp, #164]	; 0xa4
   12b64:	ands	r4, r3, #2
   12b68:	movne	r3, #1
   12b6c:	moveq	r3, #0
   12b70:	str	r3, [sp, #32]
   12b74:	str	r0, [sp, #64]	; 0x40
   12b78:	cmp	r8, #10
   12b7c:	ldrls	pc, [pc, r8, lsl #2]
   12b80:	b	14330 <__assert_fail@plt+0x3230>
   12b84:	andeq	r2, r1, r8, ror pc
   12b88:	andeq	r3, r1, r0, lsl r0
   12b8c:	andeq	r3, r1, r0, lsl r6
   12b90:	andeq	r3, r1, r0, lsr r0
   12b94:	andeq	r2, r1, r4, ror #29
   12b98:	andeq	r2, r1, ip, lsr #30
   12b9c:	andeq	r2, r1, r8, lsr #31
   12ba0:	andeq	r2, r1, r0, ror #31
   12ba4:			; <UNDEFINED> instruction: 0x00012bb0
   12ba8:			; <UNDEFINED> instruction: 0x00012bb0
   12bac:			; <UNDEFINED> instruction: 0x00012bb0
   12bb0:	cmp	r8, #10
   12bb4:	beq	12bd8 <__assert_fail@plt+0x1ad8>
   12bb8:	mov	r1, r8
   12bbc:	ldr	r0, [pc, #3428]	; 13928 <__assert_fail@plt+0x2828>
   12bc0:	bl	129d4 <__assert_fail@plt+0x18d4>
   12bc4:	mov	r1, r8
   12bc8:	str	r0, [sp, #80]	; 0x50
   12bcc:	ldr	r0, [pc, #3420]	; 13930 <__assert_fail@plt+0x2830>
   12bd0:	bl	129d4 <__assert_fail@plt+0x18d4>
   12bd4:	str	r0, [sp, #76]	; 0x4c
   12bd8:	cmp	r4, #0
   12bdc:	movne	r4, #0
   12be0:	beq	13ff0 <__assert_fail@plt+0x2ef0>
   12be4:	ldr	r7, [sp, #76]	; 0x4c
   12be8:	mov	r5, #0
   12bec:	mov	r6, #1
   12bf0:	mov	r0, r7
   12bf4:	str	r6, [sp, #40]	; 0x28
   12bf8:	str	r5, [sp, #68]	; 0x44
   12bfc:	bl	10fec <strlen@plt>
   12c00:	str	r6, [sp, #28]
   12c04:	str	r5, [sp, #44]	; 0x2c
   12c08:	str	r5, [sp, #72]	; 0x48
   12c0c:	str	r7, [sp, #60]	; 0x3c
   12c10:	str	r0, [sp, #52]	; 0x34
   12c14:	str	r8, [sp, #160]	; 0xa0
   12c18:	mov	r8, fp
   12c1c:	ldr	fp, [sp, #160]	; 0xa0
   12c20:	mov	r9, #0
   12c24:	ldr	r3, [sp, #24]
   12c28:	cmn	r3, #1
   12c2c:	beq	13194 <__assert_fail@plt+0x2094>
   12c30:	ldr	r3, [sp, #24]
   12c34:	subs	r6, r3, r9
   12c38:	movne	r6, #1
   12c3c:	cmp	r6, #0
   12c40:	beq	131ac <__assert_fail@plt+0x20ac>
   12c44:	ldr	r7, [sp, #28]
   12c48:	ldr	r0, [sp, #36]	; 0x24
   12c4c:	cmp	fp, #2
   12c50:	moveq	r7, #0
   12c54:	andne	r7, r7, #1
   12c58:	add	r3, r0, r9
   12c5c:	cmp	r7, #0
   12c60:	str	r3, [sp, #48]	; 0x30
   12c64:	beq	13650 <__assert_fail@plt+0x2550>
   12c68:	ldr	r2, [sp, #52]	; 0x34
   12c6c:	cmp	r2, #0
   12c70:	beq	13934 <__assert_fail@plt+0x2834>
   12c74:	ldr	r1, [sp, #24]
   12c78:	cmp	r2, #1
   12c7c:	mov	r3, r2
   12c80:	movls	r3, #0
   12c84:	movhi	r3, #1
   12c88:	cmn	r1, #1
   12c8c:	movne	r3, #0
   12c90:	cmp	r3, #0
   12c94:	add	r5, r9, r2
   12c98:	beq	12ca4 <__assert_fail@plt+0x1ba4>
   12c9c:	bl	10fec <strlen@plt>
   12ca0:	str	r0, [sp, #24]
   12ca4:	ldr	r3, [sp, #24]
   12ca8:	cmp	r5, r3
   12cac:	bhi	13934 <__assert_fail@plt+0x2834>
   12cb0:	ldr	r2, [sp, #52]	; 0x34
   12cb4:	ldr	r1, [sp, #60]	; 0x3c
   12cb8:	ldr	r0, [sp, #48]	; 0x30
   12cbc:	bl	10ee4 <memcmp@plt>
   12cc0:	cmp	r0, #0
   12cc4:	bne	13934 <__assert_fail@plt+0x2834>
   12cc8:	ldr	r3, [sp, #32]
   12ccc:	cmp	r3, #0
   12cd0:	bne	141f0 <__assert_fail@plt+0x30f0>
   12cd4:	ldr	r3, [sp, #48]	; 0x30
   12cd8:	ldrb	r5, [r3]
   12cdc:	cmp	r5, #126	; 0x7e
   12ce0:	ldrls	pc, [pc, r5, lsl #2]
   12ce4:	b	135b4 <__assert_fail@plt+0x24b4>
   12ce8:	andeq	r3, r1, r0, lsr #9
   12cec:			; <UNDEFINED> instruction: 0x000135b4
   12cf0:			; <UNDEFINED> instruction: 0x000135b4
   12cf4:			; <UNDEFINED> instruction: 0x000135b4
   12cf8:			; <UNDEFINED> instruction: 0x000135b4
   12cfc:			; <UNDEFINED> instruction: 0x000135b4
   12d00:			; <UNDEFINED> instruction: 0x000135b4
   12d04:	andeq	r3, r1, ip, ror #10
   12d08:	andeq	r3, r1, ip, asr r5
   12d0c:	andeq	r3, r1, ip, asr r4
   12d10:	andeq	r3, r1, r4, lsr #8
   12d14:	andeq	r3, r1, ip, ror r4
   12d18:	andeq	r3, r1, r4, ror #8
   12d1c:	muleq	r1, r4, r3
   12d20:			; <UNDEFINED> instruction: 0x000135b4
   12d24:			; <UNDEFINED> instruction: 0x000135b4
   12d28:			; <UNDEFINED> instruction: 0x000135b4
   12d2c:			; <UNDEFINED> instruction: 0x000135b4
   12d30:			; <UNDEFINED> instruction: 0x000135b4
   12d34:			; <UNDEFINED> instruction: 0x000135b4
   12d38:			; <UNDEFINED> instruction: 0x000135b4
   12d3c:			; <UNDEFINED> instruction: 0x000135b4
   12d40:			; <UNDEFINED> instruction: 0x000135b4
   12d44:			; <UNDEFINED> instruction: 0x000135b4
   12d48:			; <UNDEFINED> instruction: 0x000135b4
   12d4c:			; <UNDEFINED> instruction: 0x000135b4
   12d50:			; <UNDEFINED> instruction: 0x000135b4
   12d54:			; <UNDEFINED> instruction: 0x000135b4
   12d58:			; <UNDEFINED> instruction: 0x000135b4
   12d5c:			; <UNDEFINED> instruction: 0x000135b4
   12d60:			; <UNDEFINED> instruction: 0x000135b4
   12d64:			; <UNDEFINED> instruction: 0x000135b4
   12d68:	andeq	r3, r1, r4, ror r5
   12d6c:	andeq	r3, r1, r8, lsl #9
   12d70:	andeq	r3, r1, r8, lsl #9
   12d74:	andeq	r3, r1, ip, lsl #11
   12d78:	andeq	r3, r1, r8, lsl #9
   12d7c:	andeq	r3, r1, r8, lsr #11
   12d80:	andeq	r3, r1, r8, lsl #9
   12d84:	andeq	r3, r1, r8, asr #5
   12d88:	andeq	r3, r1, r8, lsl #9
   12d8c:	andeq	r3, r1, r8, lsl #9
   12d90:	andeq	r3, r1, r8, lsl #9
   12d94:	andeq	r3, r1, r8, lsr #11
   12d98:	andeq	r3, r1, r8, lsr #11
   12d9c:	andeq	r3, r1, r8, lsr #11
   12da0:	andeq	r3, r1, r8, lsr #11
   12da4:	andeq	r3, r1, r8, lsr #11
   12da8:	andeq	r3, r1, r8, lsr #11
   12dac:	andeq	r3, r1, r8, lsr #11
   12db0:	andeq	r3, r1, r8, lsr #11
   12db4:	andeq	r3, r1, r8, lsr #11
   12db8:	andeq	r3, r1, r8, lsr #11
   12dbc:	andeq	r3, r1, r8, lsr #11
   12dc0:	andeq	r3, r1, r8, lsr #11
   12dc4:	andeq	r3, r1, r8, lsr #11
   12dc8:	andeq	r3, r1, r8, lsr #11
   12dcc:	andeq	r3, r1, r8, lsr #11
   12dd0:	andeq	r3, r1, r8, lsr #11
   12dd4:	andeq	r3, r1, r8, lsl #9
   12dd8:	andeq	r3, r1, r8, lsl #9
   12ddc:	andeq	r3, r1, r8, lsl #9
   12de0:	andeq	r3, r1, r8, lsl #9
   12de4:	muleq	r1, ip, r2
   12de8:			; <UNDEFINED> instruction: 0x000135b4
   12dec:	andeq	r3, r1, r8, lsr #11
   12df0:	andeq	r3, r1, r8, lsr #11
   12df4:	andeq	r3, r1, r8, lsr #11
   12df8:	andeq	r3, r1, r8, lsr #11
   12dfc:	andeq	r3, r1, r8, lsr #11
   12e00:	andeq	r3, r1, r8, lsr #11
   12e04:	andeq	r3, r1, r8, lsr #11
   12e08:	andeq	r3, r1, r8, lsr #11
   12e0c:	andeq	r3, r1, r8, lsr #11
   12e10:	andeq	r3, r1, r8, lsr #11
   12e14:	andeq	r3, r1, r8, lsr #11
   12e18:	andeq	r3, r1, r8, lsr #11
   12e1c:	andeq	r3, r1, r8, lsr #11
   12e20:	andeq	r3, r1, r8, lsr #11
   12e24:	andeq	r3, r1, r8, lsr #11
   12e28:	andeq	r3, r1, r8, lsr #11
   12e2c:	andeq	r3, r1, r8, lsr #11
   12e30:	andeq	r3, r1, r8, lsr #11
   12e34:	andeq	r3, r1, r8, lsr #11
   12e38:	andeq	r3, r1, r8, lsr #11
   12e3c:	andeq	r3, r1, r8, lsr #11
   12e40:	andeq	r3, r1, r8, lsr #11
   12e44:	andeq	r3, r1, r8, lsr #11
   12e48:	andeq	r3, r1, r8, lsr #11
   12e4c:	andeq	r3, r1, r8, lsr #11
   12e50:	andeq	r3, r1, r8, lsr #11
   12e54:	andeq	r3, r1, r8, lsl #9
   12e58:	andeq	r3, r1, r4, asr r2
   12e5c:	andeq	r3, r1, r8, lsr #11
   12e60:	andeq	r3, r1, r8, lsl #9
   12e64:	andeq	r3, r1, r8, lsr #11
   12e68:	andeq	r3, r1, r8, lsl #9
   12e6c:	andeq	r3, r1, r8, lsr #11
   12e70:	andeq	r3, r1, r8, lsr #11
   12e74:	andeq	r3, r1, r8, lsr #11
   12e78:	andeq	r3, r1, r8, lsr #11
   12e7c:	andeq	r3, r1, r8, lsr #11
   12e80:	andeq	r3, r1, r8, lsr #11
   12e84:	andeq	r3, r1, r8, lsr #11
   12e88:	andeq	r3, r1, r8, lsr #11
   12e8c:	andeq	r3, r1, r8, lsr #11
   12e90:	andeq	r3, r1, r8, lsr #11
   12e94:	andeq	r3, r1, r8, lsr #11
   12e98:	andeq	r3, r1, r8, lsr #11
   12e9c:	andeq	r3, r1, r8, lsr #11
   12ea0:	andeq	r3, r1, r8, lsr #11
   12ea4:	andeq	r3, r1, r8, lsr #11
   12ea8:	andeq	r3, r1, r8, lsr #11
   12eac:	andeq	r3, r1, r8, lsr #11
   12eb0:	andeq	r3, r1, r8, lsr #11
   12eb4:	andeq	r3, r1, r8, lsr #11
   12eb8:	andeq	r3, r1, r8, lsr #11
   12ebc:	andeq	r3, r1, r8, lsr #11
   12ec0:	andeq	r3, r1, r8, lsr #11
   12ec4:	andeq	r3, r1, r8, lsr #11
   12ec8:	andeq	r3, r1, r8, lsr #11
   12ecc:	andeq	r3, r1, r8, lsr #11
   12ed0:	andeq	r3, r1, r8, lsr #11
   12ed4:	andeq	r3, r1, ip, rrx
   12ed8:	andeq	r3, r1, r8, lsl #9
   12edc:	andeq	r3, r1, ip, rrx
   12ee0:	andeq	r3, r1, ip, lsl #11
   12ee4:	cmp	r4, #0
   12ee8:	moveq	r3, #1
   12eec:	streq	r3, [sp, #28]
   12ef0:	beq	1361c <__assert_fail@plt+0x251c>
   12ef4:	mov	r3, #0
   12ef8:	mov	r4, r3
   12efc:	mov	r2, #1
   12f00:	str	r2, [sp, #40]	; 0x28
   12f04:	str	r3, [sp, #68]	; 0x44
   12f08:	str	r2, [sp, #32]
   12f0c:	str	r2, [sp, #52]	; 0x34
   12f10:	ldr	r3, [pc, #2584]	; 13930 <__assert_fail@plt+0x2830>
   12f14:	str	r4, [sp, #44]	; 0x2c
   12f18:	str	r4, [sp, #72]	; 0x48
   12f1c:	str	r4, [sp, #28]
   12f20:	str	r3, [sp, #60]	; 0x3c
   12f24:	mov	r8, #2
   12f28:	b	12c14 <__assert_fail@plt+0x1b14>
   12f2c:	cmp	r4, #0
   12f30:	bne	141bc <__assert_fail@plt+0x30bc>
   12f34:	cmp	sl, #0
   12f38:	beq	13f7c <__assert_fail@plt+0x2e7c>
   12f3c:	mov	r3, #34	; 0x22
   12f40:	strb	r3, [fp]
   12f44:	ldr	r3, [pc, #2528]	; 1392c <__assert_fail@plt+0x282c>
   12f48:	mov	r1, r4
   12f4c:	mov	r2, #1
   12f50:	str	r4, [sp, #68]	; 0x44
   12f54:	str	r2, [sp, #40]	; 0x28
   12f58:	mov	r4, r2
   12f5c:	str	r1, [sp, #44]	; 0x2c
   12f60:	str	r1, [sp, #72]	; 0x48
   12f64:	str	r1, [sp, #32]
   12f68:	str	r2, [sp, #28]
   12f6c:	str	r2, [sp, #52]	; 0x34
   12f70:	str	r3, [sp, #60]	; 0x3c
   12f74:	b	12c14 <__assert_fail@plt+0x1b14>
   12f78:	mov	r3, #0
   12f7c:	str	r3, [sp, #68]	; 0x44
   12f80:	str	r3, [sp, #44]	; 0x2c
   12f84:	str	r3, [sp, #32]
   12f88:	str	r3, [sp, #28]
   12f8c:	str	r3, [sp, #60]	; 0x3c
   12f90:	mov	r3, #1
   12f94:	str	r8, [sp, #72]	; 0x48
   12f98:	str	r8, [sp, #52]	; 0x34
   12f9c:	mov	r4, r8
   12fa0:	str	r3, [sp, #40]	; 0x28
   12fa4:	b	12c14 <__assert_fail@plt+0x1b14>
   12fa8:	mov	r3, #1
   12fac:	str	r3, [sp, #40]	; 0x28
   12fb0:	str	r3, [sp, #32]
   12fb4:	str	r3, [sp, #28]
   12fb8:	str	r3, [sp, #52]	; 0x34
   12fbc:	ldr	r3, [pc, #2408]	; 1392c <__assert_fail@plt+0x282c>
   12fc0:	mov	r2, #0
   12fc4:	mov	r4, r2
   12fc8:	str	r2, [sp, #68]	; 0x44
   12fcc:	str	r2, [sp, #44]	; 0x2c
   12fd0:	str	r2, [sp, #72]	; 0x48
   12fd4:	str	r3, [sp, #60]	; 0x3c
   12fd8:	mov	r8, #5
   12fdc:	b	12c14 <__assert_fail@plt+0x1b14>
   12fe0:	mov	r3, #0
   12fe4:	mov	r2, #1
   12fe8:	str	r2, [sp, #40]	; 0x28
   12fec:	mov	r4, r3
   12ff0:	str	r3, [sp, #68]	; 0x44
   12ff4:	str	r2, [sp, #28]
   12ff8:	str	r3, [sp, #44]	; 0x2c
   12ffc:	str	r3, [sp, #72]	; 0x48
   13000:	str	r3, [sp, #32]
   13004:	str	r3, [sp, #52]	; 0x34
   13008:	str	r3, [sp, #60]	; 0x3c
   1300c:	b	12c14 <__assert_fail@plt+0x1b14>
   13010:	mov	r2, #1
   13014:	mov	r3, #0
   13018:	str	r2, [sp, #40]	; 0x28
   1301c:	mov	r4, r3
   13020:	str	r3, [sp, #68]	; 0x44
   13024:	str	r8, [sp, #52]	; 0x34
   13028:	str	r2, [sp, #32]
   1302c:	b	12f10 <__assert_fail@plt+0x1e10>
   13030:	mov	r3, #1
   13034:	str	r3, [sp, #40]	; 0x28
   13038:	str	r3, [sp, #32]
   1303c:	str	r3, [sp, #28]
   13040:	str	r3, [sp, #52]	; 0x34
   13044:	ldr	r3, [pc, #2276]	; 13930 <__assert_fail@plt+0x2830>
   13048:	mov	r2, #0
   1304c:	mov	r4, r2
   13050:	str	r2, [sp, #68]	; 0x44
   13054:	str	r2, [sp, #44]	; 0x2c
   13058:	str	r2, [sp, #72]	; 0x48
   1305c:	str	r3, [sp, #60]	; 0x3c
   13060:	mov	r8, #2
   13064:	b	12c14 <__assert_fail@plt+0x1b14>
   13068:	mov	r7, #0
   1306c:	ldr	r3, [sp, #24]
   13070:	cmn	r3, #1
   13074:	beq	13bb0 <__assert_fail@plt+0x2ab0>
   13078:	ldr	r3, [sp, #24]
   1307c:	subs	r3, r3, #1
   13080:	movne	r3, #1
   13084:	cmp	r3, #0
   13088:	sub	r2, fp, #2
   1308c:	clz	r2, r2
   13090:	lsr	r2, r2, #5
   13094:	bne	13290 <__assert_fail@plt+0x2190>
   13098:	cmp	r9, #0
   1309c:	bne	13290 <__assert_fail@plt+0x2190>
   130a0:	ldr	r3, [sp, #32]
   130a4:	tst	r3, r2
   130a8:	bne	133b0 <__assert_fail@plt+0x22b0>
   130ac:	ldr	r3, [sp, #28]
   130b0:	eor	r3, r3, #1
   130b4:	orr	r3, r2, r3
   130b8:	ldr	r2, [sp, #32]
   130bc:	eor	r3, r3, #1
   130c0:	orrs	r3, r2, r3
   130c4:	beq	130f4 <__assert_fail@plt+0x1ff4>
   130c8:	mov	r3, #0
   130cc:	ldr	r1, [sp, #56]	; 0x38
   130d0:	cmp	r1, #0
   130d4:	beq	130f4 <__assert_fail@plt+0x1ff4>
   130d8:	lsr	r2, r5, #5
   130dc:	and	r0, r5, #31
   130e0:	uxtb	r2, r2
   130e4:	ldr	r1, [r1, r2, lsl #2]
   130e8:	lsr	r2, r1, r0
   130ec:	tst	r2, #1
   130f0:	bne	130fc <__assert_fail@plt+0x1ffc>
   130f4:	cmp	r7, #0
   130f8:	beq	1334c <__assert_fail@plt+0x224c>
   130fc:	sub	r2, fp, #2
   13100:	clz	r2, r2
   13104:	lsr	r2, r2, #5
   13108:	ldr	r3, [sp, #32]
   1310c:	cmp	r3, #0
   13110:	bne	1343c <__assert_fail@plt+0x233c>
   13114:	ldr	r3, [sp, #44]	; 0x2c
   13118:	eor	r3, r3, #1
   1311c:	ands	r3, r2, r3
   13120:	beq	13158 <__assert_fail@plt+0x2058>
   13124:	cmp	sl, r4
   13128:	movhi	r2, #39	; 0x27
   1312c:	strbhi	r2, [r8, r4]
   13130:	add	r2, r4, #1
   13134:	cmp	r2, sl
   13138:	movcc	r1, #36	; 0x24
   1313c:	strbcc	r1, [r8, r2]
   13140:	add	r2, r4, #2
   13144:	cmp	r2, sl
   13148:	add	r4, r4, #3
   1314c:	movcc	r1, #39	; 0x27
   13150:	strbcc	r1, [r8, r2]
   13154:	str	r3, [sp, #44]	; 0x2c
   13158:	cmp	r4, sl
   1315c:	movcc	r3, #92	; 0x5c
   13160:	strbcc	r3, [r8, r4]
   13164:	add	r9, r9, #1
   13168:	add	r4, r4, #1
   1316c:	cmp	r4, sl
   13170:	ldr	r3, [sp, #40]	; 0x28
   13174:	strbcc	r5, [r8, r4]
   13178:	cmp	r6, #0
   1317c:	moveq	r3, #0
   13180:	str	r3, [sp, #40]	; 0x28
   13184:	ldr	r3, [sp, #24]
   13188:	add	r4, r4, #1
   1318c:	cmn	r3, #1
   13190:	bne	12c30 <__assert_fail@plt+0x1b30>
   13194:	ldr	r3, [sp, #36]	; 0x24
   13198:	ldrb	r6, [r3, r9]
   1319c:	adds	r6, r6, #0
   131a0:	movne	r6, #1
   131a4:	cmp	r6, #0
   131a8:	bne	12c44 <__assert_fail@plt+0x1b44>
   131ac:	str	fp, [sp, #160]	; 0xa0
   131b0:	mov	fp, r8
   131b4:	ldr	r8, [sp, #160]	; 0xa0
   131b8:	ldr	r1, [sp, #32]
   131bc:	cmp	r4, #0
   131c0:	sub	r2, r8, #2
   131c4:	clz	r2, r2
   131c8:	lsr	r2, r2, #5
   131cc:	andeq	r3, r2, r1
   131d0:	movne	r3, #0
   131d4:	cmp	r3, #0
   131d8:	bne	142c4 <__assert_fail@plt+0x31c4>
   131dc:	eor	r3, r1, #1
   131e0:	ands	r2, r2, r3
   131e4:	beq	14200 <__assert_fail@plt+0x3100>
   131e8:	ldr	r3, [sp, #68]	; 0x44
   131ec:	cmp	r3, #0
   131f0:	beq	14204 <__assert_fail@plt+0x3104>
   131f4:	ldr	r3, [sp, #40]	; 0x28
   131f8:	cmp	r3, #0
   131fc:	bne	14280 <__assert_fail@plt+0x3180>
   13200:	ldr	r3, [sp, #72]	; 0x48
   13204:	adds	r3, r3, #0
   13208:	movne	r3, #1
   1320c:	cmp	sl, #0
   13210:	movne	r3, #0
   13214:	cmp	r3, #0
   13218:	ldreq	r2, [sp, #68]	; 0x44
   1321c:	beq	14204 <__assert_fail@plt+0x3104>
   13220:	ldr	sl, [sp, #72]	; 0x48
   13224:	str	r3, [sp, #68]	; 0x44
   13228:	ldr	r3, [pc, #1792]	; 13930 <__assert_fail@plt+0x2830>
   1322c:	mov	r2, #39	; 0x27
   13230:	mov	r4, #1
   13234:	str	r3, [sp, #60]	; 0x3c
   13238:	mov	r3, #0
   1323c:	strb	r2, [fp]
   13240:	str	r4, [sp, #52]	; 0x34
   13244:	mov	r8, #2
   13248:	str	r3, [sp, #32]
   1324c:	b	12c14 <__assert_fail@plt+0x1b14>
   13250:	mov	r7, #0
   13254:	cmp	fp, #2
   13258:	beq	13b90 <__assert_fail@plt+0x2a90>
   1325c:	ldr	r3, [sp, #52]	; 0x34
   13260:	ldr	r2, [sp, #28]
   13264:	ldr	r1, [sp, #32]
   13268:	cmp	r3, #0
   1326c:	andne	r2, r2, r1
   13270:	moveq	r2, #0
   13274:	cmp	r2, #0
   13278:	moveq	r5, #92	; 0x5c
   1327c:	moveq	r3, r5
   13280:	bne	13b9c <__assert_fail@plt+0x2a9c>
   13284:	ldr	r1, [sp, #28]
   13288:	cmp	r1, #0
   1328c:	bne	1430c <__assert_fail@plt+0x320c>
   13290:	mov	r6, #0
   13294:	b	130ac <__assert_fail@plt+0x1fac>
   13298:	mov	r7, #0
   1329c:	cmp	fp, #2
   132a0:	beq	13c00 <__assert_fail@plt+0x2b00>
   132a4:	cmp	fp, #5
   132a8:	beq	13bc4 <__assert_fail@plt+0x2ac4>
   132ac:	sub	r2, fp, #2
   132b0:	mov	r6, #0
   132b4:	clz	r2, r2
   132b8:	mov	r5, #63	; 0x3f
   132bc:	lsr	r2, r2, #5
   132c0:	b	130ac <__assert_fail@plt+0x1fac>
   132c4:	mov	r7, #0
   132c8:	cmp	fp, #2
   132cc:	strne	r6, [sp, #68]	; 0x44
   132d0:	movne	r2, #0
   132d4:	movne	r5, #39	; 0x27
   132d8:	bne	130ac <__assert_fail@plt+0x1fac>
   132dc:	ldr	r3, [sp, #32]
   132e0:	cmp	r3, #0
   132e4:	bne	13fe0 <__assert_fail@plt+0x2ee0>
   132e8:	cmp	sl, #0
   132ec:	ldr	r3, [sp, #72]	; 0x48
   132f0:	clz	r3, r3
   132f4:	lsr	r3, r3, #5
   132f8:	moveq	r3, #0
   132fc:	cmp	r3, #0
   13300:	bne	13f14 <__assert_fail@plt+0x2e14>
   13304:	cmp	sl, r4
   13308:	movhi	r3, #39	; 0x27
   1330c:	strbhi	r3, [r8, r4]
   13310:	add	r3, r4, #1
   13314:	cmp	sl, r3
   13318:	movhi	r2, #92	; 0x5c
   1331c:	strbhi	r2, [r8, r3]
   13320:	add	r3, r4, #2
   13324:	cmp	sl, r3
   13328:	movhi	r2, #39	; 0x27
   1332c:	strbhi	r2, [r8, r3]
   13330:	mov	r3, #0
   13334:	cmp	r7, #0
   13338:	add	r4, r4, #3
   1333c:	str	r3, [sp, #44]	; 0x2c
   13340:	str	r6, [sp, #68]	; 0x44
   13344:	mov	r5, #39	; 0x27
   13348:	bne	130fc <__assert_fail@plt+0x1ffc>
   1334c:	ldr	r2, [sp, #44]	; 0x2c
   13350:	eor	r3, r3, #1
   13354:	and	r3, r3, r2
   13358:	add	r9, r9, #1
   1335c:	uxtb	r3, r3
   13360:	cmp	r3, #0
   13364:	beq	1316c <__assert_fail@plt+0x206c>
   13368:	cmp	sl, r4
   1336c:	movhi	r3, #39	; 0x27
   13370:	strbhi	r3, [r8, r4]
   13374:	add	r3, r4, #1
   13378:	cmp	sl, r3
   1337c:	movhi	r2, #39	; 0x27
   13380:	strbhi	r2, [r8, r3]
   13384:	mov	r3, #0
   13388:	add	r4, r4, #2
   1338c:	str	r3, [sp, #44]	; 0x2c
   13390:	b	1316c <__assert_fail@plt+0x206c>
   13394:	mov	r3, #114	; 0x72
   13398:	ldr	r1, [sp, #32]
   1339c:	sub	r2, fp, #2
   133a0:	clz	r2, r2
   133a4:	lsr	r2, r2, #5
   133a8:	tst	r2, r1
   133ac:	beq	13284 <__assert_fail@plt+0x2184>
   133b0:	mov	fp, r8
   133b4:	mov	r8, #2
   133b8:	ldr	r3, [sp, #28]
   133bc:	cmp	r3, #0
   133c0:	movne	r8, #4
   133c4:	ldr	r3, [sp, #164]	; 0xa4
   133c8:	mov	ip, #0
   133cc:	bic	r3, r3, #2
   133d0:	str	r3, [sp, #4]
   133d4:	ldr	r3, [sp, #76]	; 0x4c
   133d8:	str	r8, [sp]
   133dc:	str	r3, [sp, #16]
   133e0:	ldr	r3, [sp, #80]	; 0x50
   133e4:	ldr	r2, [sp, #36]	; 0x24
   133e8:	str	r3, [sp, #12]
   133ec:	mov	r1, sl
   133f0:	ldr	r3, [sp, #24]
   133f4:	mov	r0, fp
   133f8:	str	ip, [sp, #8]
   133fc:	bl	12b1c <__assert_fail@plt+0x1a1c>
   13400:	mov	r4, r0
   13404:	ldr	r3, [pc, #1304]	; 13924 <__assert_fail@plt+0x2824>
   13408:	ldr	r2, [sp, #116]	; 0x74
   1340c:	mov	r0, r4
   13410:	ldr	r3, [r3]
   13414:	cmp	r2, r3
   13418:	bne	14308 <__assert_fail@plt+0x3208>
   1341c:	add	sp, sp, #124	; 0x7c
   13420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13424:	mov	r5, #110	; 0x6e
   13428:	ldr	r3, [sp, #32]
   1342c:	mov	r2, #0
   13430:	cmp	r3, #0
   13434:	mov	r6, r2
   13438:	beq	13114 <__assert_fail@plt+0x2014>
   1343c:	str	fp, [sp, #160]	; 0xa0
   13440:	mov	fp, r8
   13444:	ldr	r8, [sp, #160]	; 0xa0
   13448:	mov	r3, r2
   1344c:	ldr	r2, [sp, #28]
   13450:	and	r2, r2, r3
   13454:	str	r2, [sp, #28]
   13458:	b	133b8 <__assert_fail@plt+0x22b8>
   1345c:	mov	r5, #116	; 0x74
   13460:	b	13428 <__assert_fail@plt+0x2328>
   13464:	mov	r5, #102	; 0x66
   13468:	ldr	r3, [sp, #32]
   1346c:	cmp	r3, #0
   13470:	bne	1401c <__assert_fail@plt+0x2f1c>
   13474:	mov	r6, #0
   13478:	b	13158 <__assert_fail@plt+0x2058>
   1347c:	mov	r5, #118	; 0x76
   13480:	b	13468 <__assert_fail@plt+0x2368>
   13484:	mov	r7, #0
   13488:	mov	r6, #0
   1348c:	b	130c8 <__assert_fail@plt+0x1fc8>
   13490:	ldr	r3, [sp, #32]
   13494:	cmp	r3, #0
   13498:	bne	14260 <__assert_fail@plt+0x3160>
   1349c:	mov	r7, r3
   134a0:	ldr	r3, [sp, #44]	; 0x2c
   134a4:	sub	r2, fp, #2
   134a8:	eor	r3, r3, #1
   134ac:	clz	r2, r2
   134b0:	lsr	r2, r2, #5
   134b4:	ands	r3, r2, r3
   134b8:	beq	13f00 <__assert_fail@plt+0x2e00>
   134bc:	cmp	sl, r4
   134c0:	movhi	r1, #39	; 0x27
   134c4:	strbhi	r1, [r8, r4]
   134c8:	add	r1, r4, #1
   134cc:	cmp	sl, r1
   134d0:	movhi	r0, #36	; 0x24
   134d4:	strbhi	r0, [r8, r1]
   134d8:	add	r1, r4, #2
   134dc:	cmp	sl, r1
   134e0:	movhi	r0, #39	; 0x27
   134e4:	strbhi	r0, [r8, r1]
   134e8:	add	r1, r4, #3
   134ec:	cmp	sl, r1
   134f0:	bls	13f60 <__assert_fail@plt+0x2e60>
   134f4:	mov	r4, r1
   134f8:	mov	r1, #92	; 0x5c
   134fc:	strb	r1, [r8, r4]
   13500:	mov	r1, r4
   13504:	str	r3, [sp, #44]	; 0x2c
   13508:	cmp	fp, #2
   1350c:	add	r4, r4, #1
   13510:	beq	13fa8 <__assert_fail@plt+0x2ea8>
   13514:	ldr	r0, [sp, #24]
   13518:	add	r3, r9, #1
   1351c:	cmp	r3, r0
   13520:	bcs	13538 <__assert_fail@plt+0x2438>
   13524:	ldr	r0, [sp, #36]	; 0x24
   13528:	ldrb	r3, [r0, r3]
   1352c:	sub	r3, r3, #48	; 0x30
   13530:	cmp	r3, #9
   13534:	bls	13fb8 <__assert_fail@plt+0x2eb8>
   13538:	mov	r5, #48	; 0x30
   1353c:	ldr	r3, [sp, #28]
   13540:	eor	r3, r3, #1
   13544:	orrs	r2, r2, r3
   13548:	mov	r3, r6
   1354c:	moveq	r6, r2
   13550:	beq	130cc <__assert_fail@plt+0x1fcc>
   13554:	mov	r6, #0
   13558:	b	130f4 <__assert_fail@plt+0x1ff4>
   1355c:	mov	r2, #0
   13560:	mov	r6, r2
   13564:	mov	r5, #98	; 0x62
   13568:	b	13114 <__assert_fail@plt+0x2014>
   1356c:	mov	r5, #97	; 0x61
   13570:	b	13474 <__assert_fail@plt+0x2374>
   13574:	mov	r3, r7
   13578:	mov	r6, r7
   1357c:	mov	r2, #0
   13580:	mov	r7, r3
   13584:	mov	r5, #32
   13588:	b	130ac <__assert_fail@plt+0x1fac>
   1358c:	cmp	r9, #0
   13590:	mov	r3, r7
   13594:	bne	13b5c <__assert_fail@plt+0x2a5c>
   13598:	mov	r6, r7
   1359c:	mov	r2, r9
   135a0:	mov	r7, r3
   135a4:	b	130ac <__assert_fail@plt+0x1fac>
   135a8:	mov	r6, r7
   135ac:	b	130c8 <__assert_fail@plt+0x1fc8>
   135b0:	mov	r7, #0
   135b4:	ldr	r3, [sp, #64]	; 0x40
   135b8:	cmp	r3, #1
   135bc:	bne	13c18 <__assert_fail@plt+0x2b18>
   135c0:	bl	10fd4 <__ctype_b_loc@plt>
   135c4:	ldr	r2, [sp, #64]	; 0x40
   135c8:	sxth	r3, r5
   135cc:	mov	ip, r2
   135d0:	lsl	r3, r3, #1
   135d4:	ldr	r2, [r0]
   135d8:	ldrh	r3, [r2, r3]
   135dc:	and	r3, r3, #16384	; 0x4000
   135e0:	cmp	r3, #0
   135e4:	ldr	r3, [sp, #28]
   135e8:	movne	r6, #1
   135ec:	moveq	r6, #0
   135f0:	movne	r2, #0
   135f4:	andeq	r2, r3, #1
   135f8:	cmp	r2, #0
   135fc:	bne	13f28 <__assert_fail@plt+0x2e28>
   13600:	sub	r2, fp, #2
   13604:	clz	r2, r2
   13608:	lsr	r2, r2, #5
   1360c:	b	130ac <__assert_fail@plt+0x1fac>
   13610:	cmp	r4, #0
   13614:	bne	142d4 <__assert_fail@plt+0x31d4>
   13618:	str	r4, [sp, #28]
   1361c:	cmp	sl, #0
   13620:	bne	14318 <__assert_fail@plt+0x3218>
   13624:	ldr	r3, [pc, #772]	; 13930 <__assert_fail@plt+0x2830>
   13628:	mov	r4, #1
   1362c:	str	r4, [sp, #40]	; 0x28
   13630:	str	r3, [sp, #60]	; 0x3c
   13634:	str	r4, [sp, #52]	; 0x34
   13638:	str	sl, [sp, #72]	; 0x48
   1363c:	str	sl, [sp, #68]	; 0x44
   13640:	str	sl, [sp, #44]	; 0x2c
   13644:	str	sl, [sp, #32]
   13648:	mov	r8, #2
   1364c:	b	12c14 <__assert_fail@plt+0x1b14>
   13650:	ldr	r3, [sp, #36]	; 0x24
   13654:	ldrb	r5, [r3, r9]
   13658:	cmp	r5, #126	; 0x7e
   1365c:	ldrls	pc, [pc, r5, lsl #2]
   13660:	b	135b4 <__assert_fail@plt+0x24b4>
   13664:	muleq	r1, r8, r8
   13668:			; <UNDEFINED> instruction: 0x000135b4
   1366c:			; <UNDEFINED> instruction: 0x000135b4
   13670:			; <UNDEFINED> instruction: 0x000135b4
   13674:			; <UNDEFINED> instruction: 0x000135b4
   13678:			; <UNDEFINED> instruction: 0x000135b4
   1367c:			; <UNDEFINED> instruction: 0x000135b4
   13680:	andeq	r3, r1, r4, lsl #17
   13684:	andeq	r3, r1, r0, ror r8
   13688:	andeq	r3, r1, r8, ror #16
   1368c:	andeq	r3, r1, r0, ror #16
   13690:	andeq	r3, r1, r0, lsl r9
   13694:	strdeq	r3, [r1], -ip
   13698:	muleq	r1, r4, r3
   1369c:			; <UNDEFINED> instruction: 0x000135b4
   136a0:			; <UNDEFINED> instruction: 0x000135b4
   136a4:			; <UNDEFINED> instruction: 0x000135b4
   136a8:			; <UNDEFINED> instruction: 0x000135b4
   136ac:			; <UNDEFINED> instruction: 0x000135b4
   136b0:			; <UNDEFINED> instruction: 0x000135b4
   136b4:			; <UNDEFINED> instruction: 0x000135b4
   136b8:			; <UNDEFINED> instruction: 0x000135b4
   136bc:			; <UNDEFINED> instruction: 0x000135b4
   136c0:			; <UNDEFINED> instruction: 0x000135b4
   136c4:			; <UNDEFINED> instruction: 0x000135b4
   136c8:			; <UNDEFINED> instruction: 0x000135b4
   136cc:			; <UNDEFINED> instruction: 0x000135b4
   136d0:			; <UNDEFINED> instruction: 0x000135b4
   136d4:			; <UNDEFINED> instruction: 0x000135b4
   136d8:			; <UNDEFINED> instruction: 0x000135b4
   136dc:			; <UNDEFINED> instruction: 0x000135b4
   136e0:			; <UNDEFINED> instruction: 0x000135b4
   136e4:	andeq	r3, r1, ip, ror #17
   136e8:	ldrdeq	r3, [r1], -r8
   136ec:	ldrdeq	r3, [r1], -r8
   136f0:	andeq	r3, r1, r8, asr #17
   136f4:	ldrdeq	r3, [r1], -r8
   136f8:	andeq	r3, r1, r0, lsl #12
   136fc:	ldrdeq	r3, [r1], -r8
   13700:	andeq	r3, r1, r8, asr #5
   13704:	ldrdeq	r3, [r1], -r8
   13708:	ldrdeq	r3, [r1], -r8
   1370c:	ldrdeq	r3, [r1], -r8
   13710:	andeq	r3, r1, r0, lsl #12
   13714:	andeq	r3, r1, r0, lsl #12
   13718:	andeq	r3, r1, r0, lsl #12
   1371c:	andeq	r3, r1, r0, lsl #12
   13720:	andeq	r3, r1, r0, lsl #12
   13724:	andeq	r3, r1, r0, lsl #12
   13728:	andeq	r3, r1, r0, lsl #12
   1372c:	andeq	r3, r1, r0, lsl #12
   13730:	andeq	r3, r1, r0, lsl #12
   13734:	andeq	r3, r1, r0, lsl #12
   13738:	andeq	r3, r1, r0, lsl #12
   1373c:	andeq	r3, r1, r0, lsl #12
   13740:	andeq	r3, r1, r0, lsl #12
   13744:	andeq	r3, r1, r0, lsl #12
   13748:	andeq	r3, r1, r0, lsl #12
   1374c:	andeq	r3, r1, r0, lsl #12
   13750:	ldrdeq	r3, [r1], -r8
   13754:	ldrdeq	r3, [r1], -r8
   13758:	ldrdeq	r3, [r1], -r8
   1375c:	ldrdeq	r3, [r1], -r8
   13760:	muleq	r1, ip, r2
   13764:			; <UNDEFINED> instruction: 0x000135b4
   13768:	andeq	r3, r1, r0, lsl #12
   1376c:	andeq	r3, r1, r0, lsl #12
   13770:	andeq	r3, r1, r0, lsl #12
   13774:	andeq	r3, r1, r0, lsl #12
   13778:	andeq	r3, r1, r0, lsl #12
   1377c:	andeq	r3, r1, r0, lsl #12
   13780:	andeq	r3, r1, r0, lsl #12
   13784:	andeq	r3, r1, r0, lsl #12
   13788:	andeq	r3, r1, r0, lsl #12
   1378c:	andeq	r3, r1, r0, lsl #12
   13790:	andeq	r3, r1, r0, lsl #12
   13794:	andeq	r3, r1, r0, lsl #12
   13798:	andeq	r3, r1, r0, lsl #12
   1379c:	andeq	r3, r1, r0, lsl #12
   137a0:	andeq	r3, r1, r0, lsl #12
   137a4:	andeq	r3, r1, r0, lsl #12
   137a8:	andeq	r3, r1, r0, lsl #12
   137ac:	andeq	r3, r1, r0, lsl #12
   137b0:	andeq	r3, r1, r0, lsl #12
   137b4:	andeq	r3, r1, r0, lsl #12
   137b8:	andeq	r3, r1, r0, lsl #12
   137bc:	andeq	r3, r1, r0, lsl #12
   137c0:	andeq	r3, r1, r0, lsl #12
   137c4:	andeq	r3, r1, r0, lsl #12
   137c8:	andeq	r3, r1, r0, lsl #12
   137cc:	andeq	r3, r1, r0, lsl #12
   137d0:	ldrdeq	r3, [r1], -r8
   137d4:	andeq	r3, r1, r4, asr r2
   137d8:	andeq	r3, r1, r0, lsl #12
   137dc:	ldrdeq	r3, [r1], -r8
   137e0:	andeq	r3, r1, r0, lsl #12
   137e4:	ldrdeq	r3, [r1], -r8
   137e8:	andeq	r3, r1, r0, lsl #12
   137ec:	andeq	r3, r1, r0, lsl #12
   137f0:	andeq	r3, r1, r0, lsl #12
   137f4:	andeq	r3, r1, r0, lsl #12
   137f8:	andeq	r3, r1, r0, lsl #12
   137fc:	andeq	r3, r1, r0, lsl #12
   13800:	andeq	r3, r1, r0, lsl #12
   13804:	andeq	r3, r1, r0, lsl #12
   13808:	andeq	r3, r1, r0, lsl #12
   1380c:	andeq	r3, r1, r0, lsl #12
   13810:	andeq	r3, r1, r0, lsl #12
   13814:	andeq	r3, r1, r0, lsl #12
   13818:	andeq	r3, r1, r0, lsl #12
   1381c:	andeq	r3, r1, r0, lsl #12
   13820:	andeq	r3, r1, r0, lsl #12
   13824:	andeq	r3, r1, r0, lsl #12
   13828:	andeq	r3, r1, r0, lsl #12
   1382c:	andeq	r3, r1, r0, lsl #12
   13830:	andeq	r3, r1, r0, lsl #12
   13834:	andeq	r3, r1, r0, lsl #12
   13838:	andeq	r3, r1, r0, lsl #12
   1383c:	andeq	r3, r1, r0, lsl #12
   13840:	andeq	r3, r1, r0, lsl #12
   13844:	andeq	r3, r1, r0, lsl #12
   13848:	andeq	r3, r1, r0, lsl #12
   1384c:	andeq	r3, r1, r0, lsl #12
   13850:	andeq	r3, r1, ip, rrx
   13854:	ldrdeq	r3, [r1], -r8
   13858:	andeq	r3, r1, ip, rrx
   1385c:	andeq	r3, r1, r8, asr #17
   13860:	mov	r3, #110	; 0x6e
   13864:	b	13398 <__assert_fail@plt+0x2298>
   13868:	mov	r3, #116	; 0x74
   1386c:	b	13398 <__assert_fail@plt+0x2298>
   13870:	sub	r2, fp, #2
   13874:	mov	r3, #98	; 0x62
   13878:	clz	r2, r2
   1387c:	lsr	r2, r2, #5
   13880:	b	13284 <__assert_fail@plt+0x2184>
   13884:	sub	r2, fp, #2
   13888:	mov	r3, #97	; 0x61
   1388c:	clz	r2, r2
   13890:	lsr	r2, r2, #5
   13894:	b	13284 <__assert_fail@plt+0x2184>
   13898:	ldr	r3, [sp, #28]
   1389c:	cmp	r3, #0
   138a0:	bne	13490 <__assert_fail@plt+0x2390>
   138a4:	ldr	r3, [sp, #164]	; 0xa4
   138a8:	tst	r3, #1
   138ac:	bne	13f20 <__assert_fail@plt+0x2e20>
   138b0:	ldr	r6, [sp, #28]
   138b4:	sub	r2, fp, #2
   138b8:	mov	r7, r6
   138bc:	clz	r2, r2
   138c0:	lsr	r2, r2, #5
   138c4:	b	130ac <__assert_fail@plt+0x1fac>
   138c8:	sub	r2, fp, #2
   138cc:	clz	r2, r2
   138d0:	lsr	r2, r2, #5
   138d4:	b	13098 <__assert_fail@plt+0x1f98>
   138d8:	sub	r2, fp, #2
   138dc:	mov	r6, #0
   138e0:	clz	r2, r2
   138e4:	lsr	r2, r2, #5
   138e8:	b	130a0 <__assert_fail@plt+0x1fa0>
   138ec:	sub	r2, fp, #2
   138f0:	clz	r2, r2
   138f4:	lsr	r2, r2, #5
   138f8:	b	130a0 <__assert_fail@plt+0x1fa0>
   138fc:	sub	r2, fp, #2
   13900:	mov	r3, #102	; 0x66
   13904:	clz	r2, r2
   13908:	lsr	r2, r2, #5
   1390c:	b	13284 <__assert_fail@plt+0x2184>
   13910:	sub	r2, fp, #2
   13914:	mov	r3, #118	; 0x76
   13918:	clz	r2, r2
   1391c:	lsr	r2, r2, #5
   13920:	b	13284 <__assert_fail@plt+0x2184>
   13924:	andeq	r7, r2, r8, lsl #30
   13928:	andeq	r7, r1, r4, lsr r1
   1392c:	andeq	r7, r1, ip, lsl r1
   13930:	andeq	r7, r1, r0, lsr r1
   13934:	ldr	r3, [sp, #48]	; 0x30
   13938:	ldrb	r5, [r3]
   1393c:	cmp	r5, #126	; 0x7e
   13940:	ldrls	pc, [pc, r5, lsl #2]
   13944:	b	135b0 <__assert_fail@plt+0x24b0>
   13948:	muleq	r1, r0, r4
   1394c:			; <UNDEFINED> instruction: 0x000135b0
   13950:			; <UNDEFINED> instruction: 0x000135b0
   13954:			; <UNDEFINED> instruction: 0x000135b0
   13958:			; <UNDEFINED> instruction: 0x000135b0
   1395c:			; <UNDEFINED> instruction: 0x000135b0
   13960:			; <UNDEFINED> instruction: 0x000135b0
   13964:	andeq	r3, r1, r8, lsl #23
   13968:	andeq	r3, r1, r0, lsl #23
   1396c:	andeq	r3, r1, ip, asr r4
   13970:	andeq	r3, r1, r4, lsr #8
   13974:	andeq	r3, r1, ip, ror r4
   13978:	andeq	r3, r1, r4, ror #8
   1397c:	andeq	r3, r1, r4, ror fp
   13980:			; <UNDEFINED> instruction: 0x000135b0
   13984:			; <UNDEFINED> instruction: 0x000135b0
   13988:			; <UNDEFINED> instruction: 0x000135b0
   1398c:			; <UNDEFINED> instruction: 0x000135b0
   13990:			; <UNDEFINED> instruction: 0x000135b0
   13994:			; <UNDEFINED> instruction: 0x000135b0
   13998:			; <UNDEFINED> instruction: 0x000135b0
   1399c:			; <UNDEFINED> instruction: 0x000135b0
   139a0:			; <UNDEFINED> instruction: 0x000135b0
   139a4:			; <UNDEFINED> instruction: 0x000135b0
   139a8:			; <UNDEFINED> instruction: 0x000135b0
   139ac:			; <UNDEFINED> instruction: 0x000135b0
   139b0:			; <UNDEFINED> instruction: 0x000135b0
   139b4:			; <UNDEFINED> instruction: 0x000135b0
   139b8:			; <UNDEFINED> instruction: 0x000135b0
   139bc:			; <UNDEFINED> instruction: 0x000135b0
   139c0:			; <UNDEFINED> instruction: 0x000135b0
   139c4:			; <UNDEFINED> instruction: 0x000135b0
   139c8:	andeq	r3, r1, ip, ror #22
   139cc:	andeq	r3, r1, r4, lsl #9
   139d0:	andeq	r3, r1, r4, lsl #9
   139d4:	andeq	r3, r1, r0, asr fp
   139d8:	andeq	r3, r1, r4, lsl #9
   139dc:	andeq	r3, r1, r4, asr #22
   139e0:	andeq	r3, r1, r4, lsl #9
   139e4:	andeq	r3, r1, r4, asr #5
   139e8:	andeq	r3, r1, r4, lsl #9
   139ec:	andeq	r3, r1, r4, lsl #9
   139f0:	andeq	r3, r1, r4, lsl #9
   139f4:	andeq	r3, r1, r4, asr #22
   139f8:	andeq	r3, r1, r4, asr #22
   139fc:	andeq	r3, r1, r4, asr #22
   13a00:	andeq	r3, r1, r4, asr #22
   13a04:	andeq	r3, r1, r4, asr #22
   13a08:	andeq	r3, r1, r4, asr #22
   13a0c:	andeq	r3, r1, r4, asr #22
   13a10:	andeq	r3, r1, r4, asr #22
   13a14:	andeq	r3, r1, r4, asr #22
   13a18:	andeq	r3, r1, r4, asr #22
   13a1c:	andeq	r3, r1, r4, asr #22
   13a20:	andeq	r3, r1, r4, asr #22
   13a24:	andeq	r3, r1, r4, asr #22
   13a28:	andeq	r3, r1, r4, asr #22
   13a2c:	andeq	r3, r1, r4, asr #22
   13a30:	andeq	r3, r1, r4, asr #22
   13a34:	andeq	r3, r1, r4, lsl #9
   13a38:	andeq	r3, r1, r4, lsl #9
   13a3c:	andeq	r3, r1, r4, lsl #9
   13a40:	andeq	r3, r1, r4, lsl #9
   13a44:	muleq	r1, r8, r2
   13a48:			; <UNDEFINED> instruction: 0x000135b0
   13a4c:	andeq	r3, r1, r4, asr #22
   13a50:	andeq	r3, r1, r4, asr #22
   13a54:	andeq	r3, r1, r4, asr #22
   13a58:	andeq	r3, r1, r4, asr #22
   13a5c:	andeq	r3, r1, r4, asr #22
   13a60:	andeq	r3, r1, r4, asr #22
   13a64:	andeq	r3, r1, r4, asr #22
   13a68:	andeq	r3, r1, r4, asr #22
   13a6c:	andeq	r3, r1, r4, asr #22
   13a70:	andeq	r3, r1, r4, asr #22
   13a74:	andeq	r3, r1, r4, asr #22
   13a78:	andeq	r3, r1, r4, asr #22
   13a7c:	andeq	r3, r1, r4, asr #22
   13a80:	andeq	r3, r1, r4, asr #22
   13a84:	andeq	r3, r1, r4, asr #22
   13a88:	andeq	r3, r1, r4, asr #22
   13a8c:	andeq	r3, r1, r4, asr #22
   13a90:	andeq	r3, r1, r4, asr #22
   13a94:	andeq	r3, r1, r4, asr #22
   13a98:	andeq	r3, r1, r4, asr #22
   13a9c:	andeq	r3, r1, r4, asr #22
   13aa0:	andeq	r3, r1, r4, asr #22
   13aa4:	andeq	r3, r1, r4, asr #22
   13aa8:	andeq	r3, r1, r4, asr #22
   13aac:	andeq	r3, r1, r4, asr #22
   13ab0:	andeq	r3, r1, r4, asr #22
   13ab4:	andeq	r3, r1, r4, lsl #9
   13ab8:	andeq	r3, r1, r0, asr r2
   13abc:	andeq	r3, r1, r4, asr #22
   13ac0:	andeq	r3, r1, r4, lsl #9
   13ac4:	andeq	r3, r1, r4, asr #22
   13ac8:	andeq	r3, r1, r4, lsl #9
   13acc:	andeq	r3, r1, r4, asr #22
   13ad0:	andeq	r3, r1, r4, asr #22
   13ad4:	andeq	r3, r1, r4, asr #22
   13ad8:	andeq	r3, r1, r4, asr #22
   13adc:	andeq	r3, r1, r4, asr #22
   13ae0:	andeq	r3, r1, r4, asr #22
   13ae4:	andeq	r3, r1, r4, asr #22
   13ae8:	andeq	r3, r1, r4, asr #22
   13aec:	andeq	r3, r1, r4, asr #22
   13af0:	andeq	r3, r1, r4, asr #22
   13af4:	andeq	r3, r1, r4, asr #22
   13af8:	andeq	r3, r1, r4, asr #22
   13afc:	andeq	r3, r1, r4, asr #22
   13b00:	andeq	r3, r1, r4, asr #22
   13b04:	andeq	r3, r1, r4, asr #22
   13b08:	andeq	r3, r1, r4, asr #22
   13b0c:	andeq	r3, r1, r4, asr #22
   13b10:	andeq	r3, r1, r4, asr #22
   13b14:	andeq	r3, r1, r4, asr #22
   13b18:	andeq	r3, r1, r4, asr #22
   13b1c:	andeq	r3, r1, r4, asr #22
   13b20:	andeq	r3, r1, r4, asr #22
   13b24:	andeq	r3, r1, r4, asr #22
   13b28:	andeq	r3, r1, r4, asr #22
   13b2c:	andeq	r3, r1, r4, asr #22
   13b30:	andeq	r3, r1, r4, asr #22
   13b34:	andeq	r3, r1, r8, rrx
   13b38:	andeq	r3, r1, r4, lsl #9
   13b3c:	andeq	r3, r1, r8, rrx
   13b40:	andeq	r3, r1, r0, asr fp
   13b44:	mov	r6, r7
   13b48:	mov	r7, #0
   13b4c:	b	130c8 <__assert_fail@plt+0x1fc8>
   13b50:	cmp	r9, #0
   13b54:	mov	r3, #0
   13b58:	beq	13598 <__assert_fail@plt+0x2498>
   13b5c:	mov	r6, #0
   13b60:	mov	r7, r3
   13b64:	mov	r3, r6
   13b68:	b	130cc <__assert_fail@plt+0x1fcc>
   13b6c:	mov	r3, #0
   13b70:	b	13578 <__assert_fail@plt+0x2478>
   13b74:	mov	r7, #0
   13b78:	mov	r3, #114	; 0x72
   13b7c:	b	13398 <__assert_fail@plt+0x2298>
   13b80:	mov	r5, #98	; 0x62
   13b84:	b	13428 <__assert_fail@plt+0x2328>
   13b88:	mov	r5, #97	; 0x61
   13b8c:	b	13468 <__assert_fail@plt+0x2368>
   13b90:	ldr	r3, [sp, #32]
   13b94:	cmp	r3, #0
   13b98:	bne	13fe0 <__assert_fail@plt+0x2ee0>
   13b9c:	add	r9, r9, #1
   13ba0:	ldr	r3, [sp, #44]	; 0x2c
   13ba4:	mov	r6, #0
   13ba8:	mov	r5, #92	; 0x5c
   13bac:	b	13360 <__assert_fail@plt+0x2260>
   13bb0:	ldr	r3, [sp, #36]	; 0x24
   13bb4:	ldrb	r3, [r3, #1]
   13bb8:	adds	r3, r3, #0
   13bbc:	movne	r3, #1
   13bc0:	b	13084 <__assert_fail@plt+0x1f84>
   13bc4:	ldr	r3, [sp, #164]	; 0xa4
   13bc8:	ands	r3, r3, #4
   13bcc:	beq	13bf0 <__assert_fail@plt+0x2af0>
   13bd0:	ldr	r2, [sp, #24]
   13bd4:	add	r3, r9, #2
   13bd8:	cmp	r3, r2
   13bdc:	bcs	13bf0 <__assert_fail@plt+0x2af0>
   13be0:	ldr	r2, [sp, #48]	; 0x30
   13be4:	ldrb	r5, [r2, #1]
   13be8:	cmp	r5, #63	; 0x3f
   13bec:	beq	14054 <__assert_fail@plt+0x2f54>
   13bf0:	mov	r2, #0
   13bf4:	mov	r6, r2
   13bf8:	mov	r5, #63	; 0x3f
   13bfc:	b	130ac <__assert_fail@plt+0x1fac>
   13c00:	ldr	r3, [sp, #32]
   13c04:	cmp	r3, #0
   13c08:	bne	13fe0 <__assert_fail@plt+0x2ee0>
   13c0c:	mov	r6, r3
   13c10:	mov	r5, #63	; 0x3f
   13c14:	b	130f4 <__assert_fail@plt+0x1ff4>
   13c18:	ldr	r3, [sp, #24]
   13c1c:	cmn	r3, #1
   13c20:	mov	r3, #0
   13c24:	str	r3, [sp, #108]	; 0x6c
   13c28:	str	r3, [sp, #112]	; 0x70
   13c2c:	bne	13c3c <__assert_fail@plt+0x2b3c>
   13c30:	ldr	r0, [sp, #36]	; 0x24
   13c34:	bl	10fec <strlen@plt>
   13c38:	str	r0, [sp, #24]
   13c3c:	mov	r3, #0
   13c40:	str	sl, [sp, #88]	; 0x58
   13c44:	ldr	sl, [sp, #36]	; 0x24
   13c48:	str	r5, [sp, #92]	; 0x5c
   13c4c:	mov	r5, r3
   13c50:	str	r7, [sp, #96]	; 0x60
   13c54:	str	r4, [sp, #100]	; 0x64
   13c58:	str	r8, [sp, #84]	; 0x54
   13c5c:	ldr	r3, [sp, #24]
   13c60:	add	r4, r9, r5
   13c64:	add	r7, sl, r4
   13c68:	sub	r2, r3, r4
   13c6c:	mov	r1, r7
   13c70:	add	r3, sp, #108	; 0x6c
   13c74:	add	r0, sp, #104	; 0x68
   13c78:	bl	15f64 <__assert_fail@plt+0x4e64>
   13c7c:	subs	r8, r0, #0
   13c80:	beq	13cd0 <__assert_fail@plt+0x2bd0>
   13c84:	cmn	r8, #1
   13c88:	beq	14030 <__assert_fail@plt+0x2f30>
   13c8c:	cmn	r8, #2
   13c90:	beq	14150 <__assert_fail@plt+0x3050>
   13c94:	ldr	r3, [sp, #32]
   13c98:	cmp	fp, #2
   13c9c:	movne	r3, #0
   13ca0:	andeq	r3, r3, #1
   13ca4:	cmp	r3, #0
   13ca8:	bne	13e30 <__assert_fail@plt+0x2d30>
   13cac:	ldr	r0, [sp, #104]	; 0x68
   13cb0:	bl	10f20 <iswprint@plt>
   13cb4:	add	r5, r5, r8
   13cb8:	cmp	r0, #0
   13cbc:	add	r0, sp, #108	; 0x6c
   13cc0:	moveq	r6, #0
   13cc4:	bl	10ed8 <mbsinit@plt>
   13cc8:	cmp	r0, #0
   13ccc:	beq	13c5c <__assert_fail@plt+0x2b5c>
   13cd0:	ldr	r3, [sp, #28]
   13cd4:	mov	ip, r5
   13cd8:	eor	r2, r6, #1
   13cdc:	ldr	r5, [sp, #92]	; 0x5c
   13ce0:	ldr	r7, [sp, #96]	; 0x60
   13ce4:	ldr	r4, [sp, #100]	; 0x64
   13ce8:	ldr	r8, [sp, #84]	; 0x54
   13cec:	ldr	sl, [sp, #88]	; 0x58
   13cf0:	and	r2, r2, r3
   13cf4:	cmp	ip, #1
   13cf8:	bls	135f8 <__assert_fail@plt+0x24f8>
   13cfc:	add	r1, ip, r9
   13d00:	ldr	lr, [sp, #48]	; 0x30
   13d04:	mov	r0, #0
   13d08:	str	r6, [sp, #48]	; 0x30
   13d0c:	mov	ip, #39	; 0x27
   13d10:	ldr	r6, [sp, #44]	; 0x2c
   13d14:	b	13dcc <__assert_fail@plt+0x2ccc>
   13d18:	ldr	r0, [sp, #32]
   13d1c:	sub	r3, fp, #2
   13d20:	cmp	r0, #0
   13d24:	clz	r3, r3
   13d28:	lsr	r3, r3, #5
   13d2c:	bne	13f34 <__assert_fail@plt+0x2e34>
   13d30:	eor	r0, r6, #1
   13d34:	ands	r3, r3, r0
   13d38:	beq	13d68 <__assert_fail@plt+0x2c68>
   13d3c:	add	r0, r4, #1
   13d40:	cmp	sl, r4
   13d44:	strbhi	ip, [r8, r4]
   13d48:	cmp	sl, r0
   13d4c:	movhi	r6, #36	; 0x24
   13d50:	strbhi	r6, [r8, r0]
   13d54:	add	r0, r4, #2
   13d58:	mov	r6, r3
   13d5c:	add	r4, r4, #3
   13d60:	cmp	sl, r0
   13d64:	strbhi	ip, [r8, r0]
   13d68:	cmp	sl, r4
   13d6c:	movhi	r3, #92	; 0x5c
   13d70:	strbhi	r3, [r8, r4]
   13d74:	add	r3, r4, #1
   13d78:	cmp	sl, r3
   13d7c:	lsrhi	r0, r5, #6
   13d80:	addhi	r0, r0, #48	; 0x30
   13d84:	strbhi	r0, [r8, r3]
   13d88:	add	r0, r4, #2
   13d8c:	cmp	sl, r0
   13d90:	lsrhi	r3, r5, #3
   13d94:	andhi	r3, r3, #7
   13d98:	addhi	r3, r3, #48	; 0x30
   13d9c:	add	r9, r9, #1
   13da0:	strbhi	r3, [r8, r0]
   13da4:	and	r5, r5, #7
   13da8:	cmp	r9, r1
   13dac:	add	r5, r5, #48	; 0x30
   13db0:	add	r4, r4, #3
   13db4:	bcs	13f54 <__assert_fail@plt+0x2e54>
   13db8:	mov	r0, r2
   13dbc:	cmp	sl, r4
   13dc0:	strbhi	r5, [r8, r4]
   13dc4:	ldrb	r5, [lr, #1]!
   13dc8:	add	r4, r4, #1
   13dcc:	cmp	r2, #0
   13dd0:	bne	13d18 <__assert_fail@plt+0x2c18>
   13dd4:	eor	r3, r0, #1
   13dd8:	and	r3, r3, r6
   13ddc:	cmp	r7, #0
   13de0:	uxtb	r3, r3
   13de4:	beq	13df8 <__assert_fail@plt+0x2cf8>
   13de8:	cmp	sl, r4
   13dec:	movhi	r7, #92	; 0x5c
   13df0:	strbhi	r7, [r8, r4]
   13df4:	add	r4, r4, #1
   13df8:	add	r9, r9, #1
   13dfc:	cmp	r9, r1
   13e00:	bcs	13f48 <__assert_fail@plt+0x2e48>
   13e04:	cmp	r3, #0
   13e08:	beq	13f74 <__assert_fail@plt+0x2e74>
   13e0c:	cmp	sl, r4
   13e10:	add	r3, r4, #1
   13e14:	strbhi	ip, [r8, r4]
   13e18:	mov	r7, #0
   13e1c:	cmp	sl, r3
   13e20:	strbhi	ip, [r8, r3]
   13e24:	add	r4, r4, #2
   13e28:	mov	r6, r7
   13e2c:	b	13dbc <__assert_fail@plt+0x2cbc>
   13e30:	cmp	r8, #1
   13e34:	beq	13cac <__assert_fail@plt+0x2bac>
   13e38:	add	r1, r4, #1
   13e3c:	add	r3, sl, r8
   13e40:	add	r1, sl, r1
   13e44:	add	r4, r3, r4
   13e48:	ldrb	r3, [r1], #1
   13e4c:	sub	r3, r3, #91	; 0x5b
   13e50:	cmp	r3, #33	; 0x21
   13e54:	ldrls	pc, [pc, r3, lsl #2]
   13e58:	b	13ee4 <__assert_fail@plt+0x2de4>
   13e5c:	strdeq	r3, [r1], -r0
   13e60:	strdeq	r3, [r1], -r0
   13e64:	andeq	r3, r1, r4, ror #29
   13e68:	strdeq	r3, [r1], -r0
   13e6c:	andeq	r3, r1, r4, ror #29
   13e70:	strdeq	r3, [r1], -r0
   13e74:	andeq	r3, r1, r4, ror #29
   13e78:	andeq	r3, r1, r4, ror #29
   13e7c:	andeq	r3, r1, r4, ror #29
   13e80:	andeq	r3, r1, r4, ror #29
   13e84:	andeq	r3, r1, r4, ror #29
   13e88:	andeq	r3, r1, r4, ror #29
   13e8c:	andeq	r3, r1, r4, ror #29
   13e90:	andeq	r3, r1, r4, ror #29
   13e94:	andeq	r3, r1, r4, ror #29
   13e98:	andeq	r3, r1, r4, ror #29
   13e9c:	andeq	r3, r1, r4, ror #29
   13ea0:	andeq	r3, r1, r4, ror #29
   13ea4:	andeq	r3, r1, r4, ror #29
   13ea8:	andeq	r3, r1, r4, ror #29
   13eac:	andeq	r3, r1, r4, ror #29
   13eb0:	andeq	r3, r1, r4, ror #29
   13eb4:	andeq	r3, r1, r4, ror #29
   13eb8:	andeq	r3, r1, r4, ror #29
   13ebc:	andeq	r3, r1, r4, ror #29
   13ec0:	andeq	r3, r1, r4, ror #29
   13ec4:	andeq	r3, r1, r4, ror #29
   13ec8:	andeq	r3, r1, r4, ror #29
   13ecc:	andeq	r3, r1, r4, ror #29
   13ed0:	andeq	r3, r1, r4, ror #29
   13ed4:	andeq	r3, r1, r4, ror #29
   13ed8:	andeq	r3, r1, r4, ror #29
   13edc:	andeq	r3, r1, r4, ror #29
   13ee0:	strdeq	r3, [r1], -r0
   13ee4:	cmp	r4, r1
   13ee8:	bne	13e48 <__assert_fail@plt+0x2d48>
   13eec:	b	13cac <__assert_fail@plt+0x2bac>
   13ef0:	ldr	fp, [sp, #84]	; 0x54
   13ef4:	ldr	sl, [sp, #88]	; 0x58
   13ef8:	mov	r8, #2
   13efc:	b	133b8 <__assert_fail@plt+0x22b8>
   13f00:	cmp	sl, r4
   13f04:	movls	r1, r4
   13f08:	bls	13508 <__assert_fail@plt+0x2408>
   13f0c:	ldr	r3, [sp, #44]	; 0x2c
   13f10:	b	134f8 <__assert_fail@plt+0x23f8>
   13f14:	str	sl, [sp, #72]	; 0x48
   13f18:	ldr	sl, [sp, #32]
   13f1c:	b	13330 <__assert_fail@plt+0x2230>
   13f20:	add	r9, r9, #1
   13f24:	b	12c24 <__assert_fail@plt+0x1b24>
   13f28:	ldr	r2, [sp, #28]
   13f2c:	mov	r6, #0
   13f30:	b	13cfc <__assert_fail@plt+0x2bfc>
   13f34:	str	fp, [sp, #160]	; 0xa0
   13f38:	str	r3, [sp, #28]
   13f3c:	mov	fp, r8
   13f40:	ldr	r8, [sp, #160]	; 0xa0
   13f44:	b	133b8 <__assert_fail@plt+0x22b8>
   13f48:	str	r6, [sp, #44]	; 0x2c
   13f4c:	ldr	r6, [sp, #48]	; 0x30
   13f50:	b	13360 <__assert_fail@plt+0x2260>
   13f54:	str	r6, [sp, #44]	; 0x2c
   13f58:	ldr	r6, [sp, #48]	; 0x30
   13f5c:	b	1316c <__assert_fail@plt+0x206c>
   13f60:	add	r4, r4, #4
   13f64:	str	r3, [sp, #44]	; 0x2c
   13f68:	mov	r6, #0
   13f6c:	mov	r5, #48	; 0x30
   13f70:	b	130f4 <__assert_fail@plt+0x1ff4>
   13f74:	mov	r7, r3
   13f78:	b	13dbc <__assert_fail@plt+0x2cbc>
   13f7c:	ldr	r3, [pc, #-1624]	; 1392c <__assert_fail@plt+0x282c>
   13f80:	mov	r4, #1
   13f84:	str	r4, [sp, #40]	; 0x28
   13f88:	str	r4, [sp, #28]
   13f8c:	str	r4, [sp, #52]	; 0x34
   13f90:	str	sl, [sp, #72]	; 0x48
   13f94:	str	sl, [sp, #68]	; 0x44
   13f98:	str	sl, [sp, #44]	; 0x2c
   13f9c:	str	sl, [sp, #32]
   13fa0:	str	r3, [sp, #60]	; 0x3c
   13fa4:	b	12c14 <__assert_fail@plt+0x1b14>
   13fa8:	mov	r3, r6
   13fac:	mov	r5, #48	; 0x30
   13fb0:	mov	r6, #0
   13fb4:	b	130f4 <__assert_fail@plt+0x1ff4>
   13fb8:	cmp	sl, r4
   13fbc:	movhi	r3, #48	; 0x30
   13fc0:	strbhi	r3, [r8, r4]
   13fc4:	add	r3, r1, #2
   13fc8:	cmp	sl, r3
   13fcc:	movhi	r0, #48	; 0x30
   13fd0:	strbhi	r0, [r8, r3]
   13fd4:	add	r4, r1, #3
   13fd8:	mov	r5, #48	; 0x30
   13fdc:	b	1353c <__assert_fail@plt+0x243c>
   13fe0:	str	fp, [sp, #160]	; 0xa0
   13fe4:	mov	fp, r8
   13fe8:	ldr	r8, [sp, #160]	; 0xa0
   13fec:	b	133b8 <__assert_fail@plt+0x22b8>
   13ff0:	ldr	r2, [sp, #80]	; 0x50
   13ff4:	ldrb	r3, [r2]
   13ff8:	cmp	r3, #0
   13ffc:	beq	12be4 <__assert_fail@plt+0x1ae4>
   14000:	cmp	sl, r4
   14004:	strbhi	r3, [fp, r4]
   14008:	ldrb	r3, [r2, #1]!
   1400c:	add	r4, r4, #1
   14010:	cmp	r3, #0
   14014:	bne	14000 <__assert_fail@plt+0x2f00>
   14018:	b	12be4 <__assert_fail@plt+0x1ae4>
   1401c:	str	fp, [sp, #160]	; 0xa0
   14020:	mov	r3, #0
   14024:	mov	fp, r8
   14028:	ldr	r8, [sp, #160]	; 0xa0
   1402c:	b	1344c <__assert_fail@plt+0x234c>
   14030:	mov	ip, r5
   14034:	ldr	r7, [sp, #96]	; 0x60
   14038:	ldr	r5, [sp, #92]	; 0x5c
   1403c:	ldr	r4, [sp, #100]	; 0x64
   14040:	ldr	r8, [sp, #84]	; 0x54
   14044:	ldr	sl, [sp, #88]	; 0x58
   14048:	ldr	r2, [sp, #28]
   1404c:	mov	r6, #0
   14050:	b	13cf4 <__assert_fail@plt+0x2bf4>
   14054:	ldr	r2, [sp, #36]	; 0x24
   14058:	ldrb	r1, [r2, r3]
   1405c:	sub	r2, r1, #33	; 0x21
   14060:	cmp	r2, #29
   14064:	ldrls	pc, [pc, r2, lsl #2]
   14068:	b	14144 <__assert_fail@plt+0x3044>
   1406c:	andeq	r4, r1, r4, ror #1
   14070:	andeq	r4, r1, r4, asr #2
   14074:	andeq	r4, r1, r4, asr #2
   14078:	andeq	r4, r1, r4, asr #2
   1407c:	andeq	r4, r1, r4, asr #2
   14080:	andeq	r4, r1, r4, asr #2
   14084:	andeq	r4, r1, r4, ror #1
   14088:	andeq	r4, r1, r4, ror #1
   1408c:	andeq	r4, r1, r4, ror #1
   14090:	andeq	r4, r1, r4, asr #2
   14094:	andeq	r4, r1, r4, asr #2
   14098:	andeq	r4, r1, r4, asr #2
   1409c:	andeq	r4, r1, r4, ror #1
   140a0:	andeq	r4, r1, r4, asr #2
   140a4:	andeq	r4, r1, r4, ror #1
   140a8:	andeq	r4, r1, r4, asr #2
   140ac:	andeq	r4, r1, r4, asr #2
   140b0:	andeq	r4, r1, r4, asr #2
   140b4:	andeq	r4, r1, r4, asr #2
   140b8:	andeq	r4, r1, r4, asr #2
   140bc:	andeq	r4, r1, r4, asr #2
   140c0:	andeq	r4, r1, r4, asr #2
   140c4:	andeq	r4, r1, r4, asr #2
   140c8:	andeq	r4, r1, r4, asr #2
   140cc:	andeq	r4, r1, r4, asr #2
   140d0:	andeq	r4, r1, r4, asr #2
   140d4:	andeq	r4, r1, r4, asr #2
   140d8:	andeq	r4, r1, r4, ror #1
   140dc:	andeq	r4, r1, r4, ror #1
   140e0:	andeq	r4, r1, r4, ror #1
   140e4:	ldr	r2, [sp, #32]
   140e8:	cmp	r2, #0
   140ec:	bne	141f0 <__assert_fail@plt+0x30f0>
   140f0:	cmp	sl, r4
   140f4:	movhi	r2, #63	; 0x3f
   140f8:	strbhi	r2, [r8, r4]
   140fc:	add	r2, r4, #1
   14100:	cmp	sl, r2
   14104:	movhi	r0, #34	; 0x22
   14108:	strbhi	r0, [r8, r2]
   1410c:	add	r2, r4, #2
   14110:	cmp	sl, r2
   14114:	movhi	r0, #34	; 0x22
   14118:	strbhi	r0, [r8, r2]
   1411c:	add	r2, r4, #3
   14120:	cmp	sl, r2
   14124:	movhi	r0, #63	; 0x3f
   14128:	strbhi	r0, [r8, r2]
   1412c:	mov	r2, #0
   14130:	add	r4, r4, #4
   14134:	mov	r5, r1
   14138:	mov	r9, r3
   1413c:	mov	r6, r2
   14140:	b	1353c <__assert_fail@plt+0x243c>
   14144:	mov	r2, #0
   14148:	mov	r6, r2
   1414c:	b	130ac <__assert_fail@plt+0x1fac>
   14150:	ldr	r0, [sp, #24]
   14154:	mov	r1, r4
   14158:	cmp	r1, r0
   1415c:	mov	r2, r7
   14160:	mov	r3, r5
   14164:	mov	ip, r5
   14168:	ldr	r7, [sp, #96]	; 0x60
   1416c:	ldr	r5, [sp, #92]	; 0x5c
   14170:	ldr	r4, [sp, #100]	; 0x64
   14174:	ldr	r8, [sp, #84]	; 0x54
   14178:	ldr	sl, [sp, #88]	; 0x58
   1417c:	bcs	141b0 <__assert_fail@plt+0x30b0>
   14180:	ldrb	r6, [r2]
   14184:	cmp	r6, #0
   14188:	bne	1419c <__assert_fail@plt+0x309c>
   1418c:	b	142cc <__assert_fail@plt+0x31cc>
   14190:	ldrb	r6, [r2, #1]!
   14194:	cmp	r6, #0
   14198:	beq	14254 <__assert_fail@plt+0x3154>
   1419c:	add	r3, r3, #1
   141a0:	add	r1, r9, r3
   141a4:	cmp	r1, r0
   141a8:	bcc	14190 <__assert_fail@plt+0x3090>
   141ac:	mov	ip, r3
   141b0:	ldr	r2, [sp, #28]
   141b4:	mov	r6, #0
   141b8:	b	13cf4 <__assert_fail@plt+0x2bf4>
   141bc:	mov	r3, #1
   141c0:	str	r3, [sp, #40]	; 0x28
   141c4:	str	r3, [sp, #32]
   141c8:	str	r3, [sp, #28]
   141cc:	str	r3, [sp, #52]	; 0x34
   141d0:	ldr	r3, [pc, #-2220]	; 1392c <__assert_fail@plt+0x282c>
   141d4:	mov	r2, #0
   141d8:	str	r2, [sp, #68]	; 0x44
   141dc:	str	r2, [sp, #44]	; 0x2c
   141e0:	str	r2, [sp, #72]	; 0x48
   141e4:	mov	r4, r2
   141e8:	str	r3, [sp, #60]	; 0x3c
   141ec:	b	12c14 <__assert_fail@plt+0x1b14>
   141f0:	str	fp, [sp, #160]	; 0xa0
   141f4:	mov	fp, r8
   141f8:	ldr	r8, [sp, #160]	; 0xa0
   141fc:	b	133c4 <__assert_fail@plt+0x22c4>
   14200:	mov	r2, r3
   14204:	ldr	r3, [sp, #60]	; 0x3c
   14208:	cmp	r3, #0
   1420c:	moveq	r2, #0
   14210:	andne	r2, r2, #1
   14214:	cmp	r2, #0
   14218:	beq	14244 <__assert_fail@plt+0x3144>
   1421c:	mov	r2, r3
   14220:	ldrb	r3, [r3]
   14224:	cmp	r3, #0
   14228:	beq	14244 <__assert_fail@plt+0x3144>
   1422c:	cmp	sl, r4
   14230:	strbhi	r3, [fp, r4]
   14234:	ldrb	r3, [r2, #1]!
   14238:	add	r4, r4, #1
   1423c:	cmp	r3, #0
   14240:	bne	1422c <__assert_fail@plt+0x312c>
   14244:	cmp	sl, r4
   14248:	movhi	r3, #0
   1424c:	strbhi	r3, [fp, r4]
   14250:	b	13404 <__assert_fail@plt+0x2304>
   14254:	mov	ip, r3
   14258:	ldr	r2, [sp, #28]
   1425c:	b	13cf4 <__assert_fail@plt+0x2bf4>
   14260:	str	fp, [sp, #160]	; 0xa0
   14264:	mov	fp, r8
   14268:	ldr	r8, [sp, #160]	; 0xa0
   1426c:	sub	r3, r8, #2
   14270:	clz	r3, r3
   14274:	lsr	r3, r3, #5
   14278:	str	r3, [sp, #28]
   1427c:	b	133b8 <__assert_fail@plt+0x22b8>
   14280:	ldr	r3, [sp, #76]	; 0x4c
   14284:	mov	ip, #5
   14288:	str	r3, [sp, #16]
   1428c:	ldr	r3, [sp, #80]	; 0x50
   14290:	ldr	r2, [sp, #36]	; 0x24
   14294:	str	r3, [sp, #12]
   14298:	ldr	r3, [sp, #56]	; 0x38
   1429c:	ldr	r1, [sp, #72]	; 0x48
   142a0:	str	r3, [sp, #8]
   142a4:	ldr	r3, [sp, #164]	; 0xa4
   142a8:	mov	r0, fp
   142ac:	str	r3, [sp, #4]
   142b0:	str	ip, [sp]
   142b4:	ldr	r3, [sp, #24]
   142b8:	bl	12b1c <__assert_fail@plt+0x1a1c>
   142bc:	mov	r4, r0
   142c0:	b	13404 <__assert_fail@plt+0x2304>
   142c4:	mov	r8, #2
   142c8:	b	133b8 <__assert_fail@plt+0x22b8>
   142cc:	ldr	r2, [sp, #28]
   142d0:	b	13cf4 <__assert_fail@plt+0x2bf4>
   142d4:	mov	r3, #0
   142d8:	str	r3, [sp, #68]	; 0x44
   142dc:	str	r3, [sp, #44]	; 0x2c
   142e0:	str	r3, [sp, #72]	; 0x48
   142e4:	str	r3, [sp, #28]
   142e8:	mov	r4, r3
   142ec:	ldr	r3, [pc, #-2500]	; 13930 <__assert_fail@plt+0x2830>
   142f0:	mov	r2, #1
   142f4:	str	r2, [sp, #40]	; 0x28
   142f8:	str	r2, [sp, #32]
   142fc:	str	r2, [sp, #52]	; 0x34
   14300:	str	r3, [sp, #60]	; 0x3c
   14304:	b	12c14 <__assert_fail@plt+0x1b14>
   14308:	bl	10efc <__stack_chk_fail@plt>
   1430c:	mov	r5, r3
   14310:	mov	r6, #0
   14314:	b	13108 <__assert_fail@plt+0x2008>
   14318:	mov	r3, #0
   1431c:	mov	r2, #1
   14320:	str	r3, [sp, #44]	; 0x2c
   14324:	str	r3, [sp, #72]	; 0x48
   14328:	str	r2, [sp, #40]	; 0x28
   1432c:	b	13224 <__assert_fail@plt+0x2124>
   14330:	bl	110e8 <abort@plt>
   14334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14338:	sub	sp, sp, #44	; 0x2c
   1433c:	mov	r6, r0
   14340:	mov	r4, r3
   14344:	mov	sl, r1
   14348:	mov	fp, r2
   1434c:	bl	11004 <__errno_location@plt>
   14350:	ldr	r7, [pc, #364]	; 144c4 <__assert_fail@plt+0x33c4>
   14354:	cmp	r6, #0
   14358:	ldr	r5, [r7]
   1435c:	ldr	r3, [r0]
   14360:	str	r3, [sp, #24]
   14364:	blt	144c0 <__assert_fail@plt+0x33c0>
   14368:	ldr	r3, [r7, #4]
   1436c:	mov	r8, r0
   14370:	cmp	r3, r6
   14374:	bgt	143c0 <__assert_fail@plt+0x32c0>
   14378:	cmn	r6, #-268435454	; 0xf0000002
   1437c:	bgt	144bc <__assert_fail@plt+0x33bc>
   14380:	add	r9, r6, #1
   14384:	add	r3, r7, #8
   14388:	cmp	r5, r3
   1438c:	lsl	r1, r9, #3
   14390:	beq	1449c <__assert_fail@plt+0x339c>
   14394:	mov	r0, r5
   14398:	bl	15190 <__assert_fail@plt+0x4090>
   1439c:	mov	r5, r0
   143a0:	str	r0, [r7]
   143a4:	ldr	r0, [r7, #4]
   143a8:	mov	r1, #0
   143ac:	sub	r2, r9, r0
   143b0:	add	r0, r5, r0, lsl #3
   143b4:	lsl	r2, r2, #3
   143b8:	bl	11034 <memset@plt>
   143bc:	str	r9, [r7, #4]
   143c0:	add	r3, r5, r6, lsl #3
   143c4:	ldr	r1, [r4, #4]
   143c8:	ldr	r7, [r3, #4]
   143cc:	ldr	r9, [r5, r6, lsl #3]
   143d0:	ldr	r2, [r4, #40]	; 0x28
   143d4:	ldr	ip, [r4, #44]	; 0x2c
   143d8:	str	r3, [sp, #28]
   143dc:	ldr	r3, [r4]
   143e0:	orr	r1, r1, #1
   143e4:	add	lr, r4, #8
   143e8:	str	r1, [sp, #36]	; 0x24
   143ec:	str	r1, [sp, #4]
   143f0:	str	r2, [sp, #12]
   143f4:	str	r3, [sp]
   143f8:	mov	r0, r7
   143fc:	mov	r1, r9
   14400:	str	ip, [sp, #16]
   14404:	str	lr, [sp, #8]
   14408:	mov	r3, fp
   1440c:	mov	r2, sl
   14410:	str	lr, [sp, #32]
   14414:	bl	12b1c <__assert_fail@plt+0x1a1c>
   14418:	cmp	r9, r0
   1441c:	bhi	14488 <__assert_fail@plt+0x3388>
   14420:	ldr	r3, [pc, #160]	; 144c8 <__assert_fail@plt+0x33c8>
   14424:	add	r9, r0, #1
   14428:	cmp	r7, r3
   1442c:	str	r9, [r5, r6, lsl #3]
   14430:	beq	1443c <__assert_fail@plt+0x333c>
   14434:	mov	r0, r7
   14438:	bl	10ea8 <free@plt>
   1443c:	mov	r0, r9
   14440:	bl	15134 <__assert_fail@plt+0x4034>
   14444:	ldr	lr, [sp, #28]
   14448:	ldr	ip, [r4, #44]	; 0x2c
   1444c:	ldr	r5, [r4, #40]	; 0x28
   14450:	mov	r3, fp
   14454:	mov	r2, sl
   14458:	mov	r1, r9
   1445c:	str	r0, [lr, #4]
   14460:	ldr	lr, [r4]
   14464:	ldr	r4, [sp, #32]
   14468:	str	ip, [sp, #16]
   1446c:	str	r4, [sp, #8]
   14470:	ldr	r4, [sp, #36]	; 0x24
   14474:	str	r5, [sp, #12]
   14478:	str	r4, [sp, #4]
   1447c:	str	lr, [sp]
   14480:	mov	r7, r0
   14484:	bl	12b1c <__assert_fail@plt+0x1a1c>
   14488:	ldr	r3, [sp, #24]
   1448c:	mov	r0, r7
   14490:	str	r3, [r8]
   14494:	add	sp, sp, #44	; 0x2c
   14498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1449c:	mov	r0, #0
   144a0:	bl	15190 <__assert_fail@plt+0x4090>
   144a4:	ldr	r3, [pc, #32]	; 144cc <__assert_fail@plt+0x33cc>
   144a8:	mov	r5, r0
   144ac:	ldm	r3, {r0, r1}
   144b0:	str	r5, [r7]
   144b4:	stm	r5, {r0, r1}
   144b8:	b	143a4 <__assert_fail@plt+0x32a4>
   144bc:	bl	1537c <__assert_fail@plt+0x427c>
   144c0:	bl	110e8 <abort@plt>
   144c4:	andeq	r8, r2, ip, lsl #2
   144c8:	andeq	r8, r2, r0, lsl #3
   144cc:	andeq	r8, r2, r4, lsl r1
   144d0:	push	{r4, r5, r6, lr}
   144d4:	mov	r5, r0
   144d8:	bl	11004 <__errno_location@plt>
   144dc:	cmp	r5, #0
   144e0:	mov	r1, #48	; 0x30
   144e4:	mov	r4, r0
   144e8:	ldr	r0, [pc, #16]	; 14500 <__assert_fail@plt+0x3400>
   144ec:	ldr	r6, [r4]
   144f0:	movne	r0, r5
   144f4:	bl	1533c <__assert_fail@plt+0x423c>
   144f8:	str	r6, [r4]
   144fc:	pop	{r4, r5, r6, pc}
   14500:	andeq	r8, r2, r0, lsl #5
   14504:	ldr	r3, [pc, #12]	; 14518 <__assert_fail@plt+0x3418>
   14508:	cmp	r0, #0
   1450c:	moveq	r0, r3
   14510:	ldr	r0, [r0]
   14514:	bx	lr
   14518:	andeq	r8, r2, r0, lsl #5
   1451c:	ldr	r3, [pc, #12]	; 14530 <__assert_fail@plt+0x3430>
   14520:	cmp	r0, #0
   14524:	moveq	r0, r3
   14528:	str	r1, [r0]
   1452c:	bx	lr
   14530:	andeq	r8, r2, r0, lsl #5
   14534:	ldr	r3, [pc, #52]	; 14570 <__assert_fail@plt+0x3470>
   14538:	cmp	r0, #0
   1453c:	moveq	r0, r3
   14540:	add	r3, r0, #8
   14544:	push	{lr}		; (str lr, [sp, #-4]!)
   14548:	lsr	lr, r1, #5
   1454c:	and	r1, r1, #31
   14550:	ldr	ip, [r3, lr, lsl #2]
   14554:	lsr	r0, ip, r1
   14558:	eor	r2, r2, r0
   1455c:	and	r2, r2, #1
   14560:	and	r0, r0, #1
   14564:	eor	r1, ip, r2, lsl r1
   14568:	str	r1, [r3, lr, lsl #2]
   1456c:	pop	{pc}		; (ldr pc, [sp], #4)
   14570:	andeq	r8, r2, r0, lsl #5
   14574:	ldr	r3, [pc, #16]	; 1458c <__assert_fail@plt+0x348c>
   14578:	cmp	r0, #0
   1457c:	movne	r3, r0
   14580:	ldr	r0, [r3, #4]
   14584:	str	r1, [r3, #4]
   14588:	bx	lr
   1458c:	andeq	r8, r2, r0, lsl #5
   14590:	ldr	r3, [pc, #44]	; 145c4 <__assert_fail@plt+0x34c4>
   14594:	cmp	r0, #0
   14598:	moveq	r0, r3
   1459c:	mov	ip, #10
   145a0:	cmp	r2, #0
   145a4:	cmpne	r1, #0
   145a8:	str	ip, [r0]
   145ac:	beq	145bc <__assert_fail@plt+0x34bc>
   145b0:	str	r1, [r0, #40]	; 0x28
   145b4:	str	r2, [r0, #44]	; 0x2c
   145b8:	bx	lr
   145bc:	push	{r4, lr}
   145c0:	bl	110e8 <abort@plt>
   145c4:	andeq	r8, r2, r0, lsl #5
   145c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   145cc:	sub	sp, sp, #24
   145d0:	ldr	ip, [pc, #108]	; 14644 <__assert_fail@plt+0x3544>
   145d4:	ldr	r4, [sp, #56]	; 0x38
   145d8:	mov	r9, r2
   145dc:	cmp	r4, #0
   145e0:	moveq	r4, ip
   145e4:	mov	sl, r3
   145e8:	mov	r7, r0
   145ec:	mov	r8, r1
   145f0:	bl	11004 <__errno_location@plt>
   145f4:	ldr	r3, [r4, #44]	; 0x2c
   145f8:	mov	r1, r8
   145fc:	ldr	r6, [r0]
   14600:	str	r3, [sp, #16]
   14604:	ldr	r2, [r4, #40]	; 0x28
   14608:	add	r3, r4, #8
   1460c:	str	r3, [sp, #8]
   14610:	str	r2, [sp, #12]
   14614:	ldr	r2, [r4, #4]
   14618:	mov	r5, r0
   1461c:	str	r2, [sp, #4]
   14620:	ldr	ip, [r4]
   14624:	mov	r3, sl
   14628:	mov	r2, r9
   1462c:	mov	r0, r7
   14630:	str	ip, [sp]
   14634:	bl	12b1c <__assert_fail@plt+0x1a1c>
   14638:	str	r6, [r5]
   1463c:	add	sp, sp, #24
   14640:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14644:	andeq	r8, r2, r0, lsl #5
   14648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1464c:	cmp	r3, #0
   14650:	sub	sp, sp, #44	; 0x2c
   14654:	ldr	r4, [pc, #192]	; 1471c <__assert_fail@plt+0x361c>
   14658:	mov	r6, r2
   1465c:	movne	r4, r3
   14660:	mov	r9, r1
   14664:	mov	r8, r0
   14668:	bl	11004 <__errno_location@plt>
   1466c:	ldr	r3, [r4, #44]	; 0x2c
   14670:	ldr	r5, [r4, #4]
   14674:	add	sl, r4, #8
   14678:	cmp	r6, #0
   1467c:	orreq	r5, r5, #1
   14680:	mov	r1, #0
   14684:	ldr	r2, [r0]
   14688:	str	r3, [sp, #16]
   1468c:	ldr	r3, [r4, #40]	; 0x28
   14690:	stmib	sp, {r5, sl}
   14694:	str	r3, [sp, #12]
   14698:	ldr	r3, [r4]
   1469c:	mov	r7, r0
   146a0:	str	r2, [sp, #28]
   146a4:	str	r3, [sp]
   146a8:	mov	r2, r8
   146ac:	mov	r3, r9
   146b0:	mov	r0, r1
   146b4:	bl	12b1c <__assert_fail@plt+0x1a1c>
   146b8:	add	r1, r0, #1
   146bc:	mov	fp, r0
   146c0:	mov	r0, r1
   146c4:	str	r1, [sp, #36]	; 0x24
   146c8:	bl	15134 <__assert_fail@plt+0x4034>
   146cc:	ldr	r3, [r4, #44]	; 0x2c
   146d0:	mov	r2, r8
   146d4:	str	r3, [sp, #16]
   146d8:	ldr	r3, [r4, #40]	; 0x28
   146dc:	str	r5, [sp, #4]
   146e0:	str	r3, [sp, #12]
   146e4:	str	sl, [sp, #8]
   146e8:	ldr	ip, [r4]
   146ec:	ldr	r1, [sp, #36]	; 0x24
   146f0:	mov	r3, r9
   146f4:	str	ip, [sp]
   146f8:	str	r0, [sp, #32]
   146fc:	bl	12b1c <__assert_fail@plt+0x1a1c>
   14700:	ldr	r2, [sp, #28]
   14704:	cmp	r6, #0
   14708:	str	r2, [r7]
   1470c:	ldr	r0, [sp, #32]
   14710:	strne	fp, [r6]
   14714:	add	sp, sp, #44	; 0x2c
   14718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1471c:	andeq	r8, r2, r0, lsl #5
   14720:	mov	r3, r2
   14724:	mov	r2, #0
   14728:	b	14648 <__assert_fail@plt+0x3548>
   1472c:	push	{r4, r5, r6, r7, r8, lr}
   14730:	ldr	r6, [pc, #112]	; 147a8 <__assert_fail@plt+0x36a8>
   14734:	ldr	r3, [r6, #4]
   14738:	ldr	r7, [r6]
   1473c:	cmp	r3, #1
   14740:	ble	14764 <__assert_fail@plt+0x3664>
   14744:	sub	r5, r7, #8
   14748:	add	r5, r5, r3, lsl #3
   1474c:	mov	r4, r7
   14750:	ldr	r0, [r4, #12]
   14754:	add	r4, r4, #8
   14758:	bl	10ea8 <free@plt>
   1475c:	cmp	r4, r5
   14760:	bne	14750 <__assert_fail@plt+0x3650>
   14764:	ldr	r0, [r7, #4]
   14768:	ldr	r4, [pc, #60]	; 147ac <__assert_fail@plt+0x36ac>
   1476c:	cmp	r0, r4
   14770:	beq	14784 <__assert_fail@plt+0x3684>
   14774:	bl	10ea8 <free@plt>
   14778:	mov	r3, #256	; 0x100
   1477c:	str	r4, [r6, #12]
   14780:	str	r3, [r6, #8]
   14784:	ldr	r4, [pc, #36]	; 147b0 <__assert_fail@plt+0x36b0>
   14788:	cmp	r7, r4
   1478c:	beq	1479c <__assert_fail@plt+0x369c>
   14790:	mov	r0, r7
   14794:	bl	10ea8 <free@plt>
   14798:	str	r4, [r6]
   1479c:	mov	r3, #1
   147a0:	str	r3, [r6, #4]
   147a4:	pop	{r4, r5, r6, r7, r8, pc}
   147a8:	andeq	r8, r2, ip, lsl #2
   147ac:	andeq	r8, r2, r0, lsl #3
   147b0:	andeq	r8, r2, r4, lsl r1
   147b4:	ldr	r3, [pc, #4]	; 147c0 <__assert_fail@plt+0x36c0>
   147b8:	mvn	r2, #0
   147bc:	b	14334 <__assert_fail@plt+0x3234>
   147c0:	andeq	r8, r2, r0, lsl #5
   147c4:	ldr	r3, [pc]	; 147cc <__assert_fail@plt+0x36cc>
   147c8:	b	14334 <__assert_fail@plt+0x3234>
   147cc:	andeq	r8, r2, r0, lsl #5
   147d0:	mov	r1, r0
   147d4:	ldr	r3, [pc, #8]	; 147e4 <__assert_fail@plt+0x36e4>
   147d8:	mvn	r2, #0
   147dc:	mov	r0, #0
   147e0:	b	14334 <__assert_fail@plt+0x3234>
   147e4:	andeq	r8, r2, r0, lsl #5
   147e8:	mov	r2, r1
   147ec:	ldr	r3, [pc, #8]	; 147fc <__assert_fail@plt+0x36fc>
   147f0:	mov	r1, r0
   147f4:	mov	r0, #0
   147f8:	b	14334 <__assert_fail@plt+0x3234>
   147fc:	andeq	r8, r2, r0, lsl #5
   14800:	push	{r4, r5, r6, lr}
   14804:	sub	sp, sp, #56	; 0x38
   14808:	ldr	r4, [pc, #68]	; 14854 <__assert_fail@plt+0x3754>
   1480c:	mov	r6, r2
   14810:	mov	r5, r0
   14814:	ldr	r3, [r4]
   14818:	add	r0, sp, #4
   1481c:	str	r3, [sp, #52]	; 0x34
   14820:	bl	129ac <__assert_fail@plt+0x18ac>
   14824:	add	r3, sp, #4
   14828:	mvn	r2, #0
   1482c:	mov	r1, r6
   14830:	mov	r0, r5
   14834:	bl	14334 <__assert_fail@plt+0x3234>
   14838:	ldr	r2, [sp, #52]	; 0x34
   1483c:	ldr	r3, [r4]
   14840:	cmp	r2, r3
   14844:	bne	14850 <__assert_fail@plt+0x3750>
   14848:	add	sp, sp, #56	; 0x38
   1484c:	pop	{r4, r5, r6, pc}
   14850:	bl	10efc <__stack_chk_fail@plt>
   14854:	andeq	r7, r2, r8, lsl #30
   14858:	push	{r4, r5, r6, r7, lr}
   1485c:	sub	sp, sp, #60	; 0x3c
   14860:	ldr	r4, [pc, #72]	; 148b0 <__assert_fail@plt+0x37b0>
   14864:	mov	r6, r2
   14868:	mov	r7, r3
   1486c:	ldr	ip, [r4]
   14870:	mov	r5, r0
   14874:	add	r0, sp, #4
   14878:	str	ip, [sp, #52]	; 0x34
   1487c:	bl	129ac <__assert_fail@plt+0x18ac>
   14880:	add	r3, sp, #4
   14884:	mov	r2, r7
   14888:	mov	r1, r6
   1488c:	mov	r0, r5
   14890:	bl	14334 <__assert_fail@plt+0x3234>
   14894:	ldr	r2, [sp, #52]	; 0x34
   14898:	ldr	r3, [r4]
   1489c:	cmp	r2, r3
   148a0:	bne	148ac <__assert_fail@plt+0x37ac>
   148a4:	add	sp, sp, #60	; 0x3c
   148a8:	pop	{r4, r5, r6, r7, pc}
   148ac:	bl	10efc <__stack_chk_fail@plt>
   148b0:	andeq	r7, r2, r8, lsl #30
   148b4:	mov	r2, r1
   148b8:	mov	r1, r0
   148bc:	mov	r0, #0
   148c0:	b	14800 <__assert_fail@plt+0x3700>
   148c4:	mov	r3, r2
   148c8:	mov	r2, r1
   148cc:	mov	r1, r0
   148d0:	mov	r0, #0
   148d4:	b	14858 <__assert_fail@plt+0x3758>
   148d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   148dc:	mov	r4, r2
   148e0:	ldr	lr, [pc, #128]	; 14968 <__assert_fail@plt+0x3868>
   148e4:	mov	r8, r0
   148e8:	mov	r9, r1
   148ec:	ldm	lr!, {r0, r1, r2, r3}
   148f0:	sub	sp, sp, #60	; 0x3c
   148f4:	add	ip, sp, #4
   148f8:	lsr	r6, r4, #5
   148fc:	stmia	ip!, {r0, r1, r2, r3}
   14900:	add	r7, sp, #12
   14904:	ldm	lr!, {r0, r1, r2, r3}
   14908:	and	r4, r4, #31
   1490c:	ldr	r5, [pc, #88]	; 1496c <__assert_fail@plt+0x386c>
   14910:	stmia	ip!, {r0, r1, r2, r3}
   14914:	ldm	lr, {r0, r1, r2, r3}
   14918:	stm	ip, {r0, r1, r2, r3}
   1491c:	mov	r2, r9
   14920:	ldr	r3, [r7, r6, lsl #2]
   14924:	ldr	ip, [r5]
   14928:	mov	r1, r8
   1492c:	mvn	r0, r3, lsr r4
   14930:	and	r0, r0, #1
   14934:	str	ip, [sp, #52]	; 0x34
   14938:	eor	r4, r3, r0, lsl r4
   1493c:	add	r3, sp, #4
   14940:	mov	r0, #0
   14944:	str	r4, [r7, r6, lsl #2]
   14948:	bl	14334 <__assert_fail@plt+0x3234>
   1494c:	ldr	r2, [sp, #52]	; 0x34
   14950:	ldr	r3, [r5]
   14954:	cmp	r2, r3
   14958:	bne	14964 <__assert_fail@plt+0x3864>
   1495c:	add	sp, sp, #60	; 0x3c
   14960:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14964:	bl	10efc <__stack_chk_fail@plt>
   14968:	andeq	r8, r2, r0, lsl #5
   1496c:	andeq	r7, r2, r8, lsl #30
   14970:	mov	r2, r1
   14974:	mvn	r1, #0
   14978:	b	148d8 <__assert_fail@plt+0x37d8>
   1497c:	mov	r2, #58	; 0x3a
   14980:	mvn	r1, #0
   14984:	b	148d8 <__assert_fail@plt+0x37d8>
   14988:	mov	r2, #58	; 0x3a
   1498c:	b	148d8 <__assert_fail@plt+0x37d8>
   14990:	push	{r4, r5, r6, r7, r8, lr}
   14994:	sub	sp, sp, #104	; 0x68
   14998:	ldr	r5, [pc, #120]	; 14a18 <__assert_fail@plt+0x3918>
   1499c:	mov	r6, r0
   149a0:	mov	r0, sp
   149a4:	ldr	r3, [r5]
   149a8:	mov	r7, r2
   149ac:	str	r3, [sp, #100]	; 0x64
   149b0:	bl	129ac <__assert_fail@plt+0x18ac>
   149b4:	mov	ip, sp
   149b8:	add	lr, sp, #52	; 0x34
   149bc:	ldm	ip!, {r0, r1, r2, r3}
   149c0:	stmia	lr!, {r0, r1, r2, r3}
   149c4:	ldm	ip!, {r0, r1, r2, r3}
   149c8:	ldr	r8, [sp, #64]	; 0x40
   149cc:	stmia	lr!, {r0, r1, r2, r3}
   149d0:	mvn	r4, r8
   149d4:	ldm	ip, {r0, r1, r2, r3}
   149d8:	and	ip, r4, #67108864	; 0x4000000
   149dc:	eor	ip, ip, r8
   149e0:	str	ip, [sp, #64]	; 0x40
   149e4:	stm	lr, {r0, r1, r2, r3}
   149e8:	add	r3, sp, #52	; 0x34
   149ec:	mvn	r2, #0
   149f0:	mov	r1, r7
   149f4:	mov	r0, r6
   149f8:	bl	14334 <__assert_fail@plt+0x3234>
   149fc:	ldr	r2, [sp, #100]	; 0x64
   14a00:	ldr	r3, [r5]
   14a04:	cmp	r2, r3
   14a08:	bne	14a14 <__assert_fail@plt+0x3914>
   14a0c:	add	sp, sp, #104	; 0x68
   14a10:	pop	{r4, r5, r6, r7, r8, pc}
   14a14:	bl	10efc <__stack_chk_fail@plt>
   14a18:	andeq	r7, r2, r8, lsl #30
   14a1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14a20:	mov	r6, r1
   14a24:	ldr	lr, [pc, #132]	; 14ab0 <__assert_fail@plt+0x39b0>
   14a28:	mov	r5, r2
   14a2c:	mov	r8, r0
   14a30:	mov	r9, r3
   14a34:	ldm	lr!, {r0, r1, r2, r3}
   14a38:	sub	sp, sp, #60	; 0x3c
   14a3c:	add	ip, sp, #4
   14a40:	ldr	r4, [pc, #108]	; 14ab4 <__assert_fail@plt+0x39b4>
   14a44:	stmia	ip!, {r0, r1, r2, r3}
   14a48:	mov	r7, #10
   14a4c:	ldm	lr!, {r0, r1, r2, r3}
   14a50:	cmp	r5, #0
   14a54:	cmpne	r6, #0
   14a58:	str	r7, [sp, #4]
   14a5c:	stmia	ip!, {r0, r1, r2, r3}
   14a60:	ldm	lr, {r0, r1, r2, r3}
   14a64:	ldr	lr, [r4]
   14a68:	stm	ip, {r0, r1, r2, r3}
   14a6c:	str	lr, [sp, #52]	; 0x34
   14a70:	beq	14aac <__assert_fail@plt+0x39ac>
   14a74:	add	r3, sp, #4
   14a78:	ldr	r2, [sp, #88]	; 0x58
   14a7c:	mov	r1, r9
   14a80:	mov	r0, r8
   14a84:	str	r6, [sp, #44]	; 0x2c
   14a88:	str	r5, [sp, #48]	; 0x30
   14a8c:	bl	14334 <__assert_fail@plt+0x3234>
   14a90:	ldr	r2, [sp, #52]	; 0x34
   14a94:	ldr	r3, [r4]
   14a98:	cmp	r2, r3
   14a9c:	bne	14aa8 <__assert_fail@plt+0x39a8>
   14aa0:	add	sp, sp, #60	; 0x3c
   14aa4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14aa8:	bl	10efc <__stack_chk_fail@plt>
   14aac:	bl	110e8 <abort@plt>
   14ab0:	andeq	r8, r2, r0, lsl #5
   14ab4:	andeq	r7, r2, r8, lsl #30
   14ab8:	push	{lr}		; (str lr, [sp, #-4]!)
   14abc:	sub	sp, sp, #12
   14ac0:	mvn	ip, #0
   14ac4:	str	ip, [sp]
   14ac8:	bl	14a1c <__assert_fail@plt+0x391c>
   14acc:	add	sp, sp, #12
   14ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ad8:	sub	sp, sp, #12
   14adc:	mvn	ip, #0
   14ae0:	mov	r3, r2
   14ae4:	str	ip, [sp]
   14ae8:	mov	r2, r1
   14aec:	mov	r1, r0
   14af0:	mov	r0, #0
   14af4:	bl	14a1c <__assert_fail@plt+0x391c>
   14af8:	add	sp, sp, #12
   14afc:	pop	{pc}		; (ldr pc, [sp], #4)
   14b00:	push	{lr}		; (str lr, [sp, #-4]!)
   14b04:	sub	sp, sp, #12
   14b08:	str	r3, [sp]
   14b0c:	mov	r3, r2
   14b10:	mov	r2, r1
   14b14:	mov	r1, r0
   14b18:	mov	r0, #0
   14b1c:	bl	14a1c <__assert_fail@plt+0x391c>
   14b20:	add	sp, sp, #12
   14b24:	pop	{pc}		; (ldr pc, [sp], #4)
   14b28:	ldr	r3, [pc]	; 14b30 <__assert_fail@plt+0x3a30>
   14b2c:	b	14334 <__assert_fail@plt+0x3234>
   14b30:	andeq	r8, r2, ip, lsl r1
   14b34:	mov	r2, r1
   14b38:	ldr	r3, [pc, #8]	; 14b48 <__assert_fail@plt+0x3a48>
   14b3c:	mov	r1, r0
   14b40:	mov	r0, #0
   14b44:	b	14334 <__assert_fail@plt+0x3234>
   14b48:	andeq	r8, r2, ip, lsl r1
   14b4c:	ldr	r3, [pc, #4]	; 14b58 <__assert_fail@plt+0x3a58>
   14b50:	mvn	r2, #0
   14b54:	b	14334 <__assert_fail@plt+0x3234>
   14b58:	andeq	r8, r2, ip, lsl r1
   14b5c:	mov	r1, r0
   14b60:	ldr	r3, [pc, #8]	; 14b70 <__assert_fail@plt+0x3a70>
   14b64:	mvn	r2, #0
   14b68:	mov	r0, #0
   14b6c:	b	14334 <__assert_fail@plt+0x3234>
   14b70:	andeq	r8, r2, ip, lsl r1
   14b74:	push	{r4, r5, r6, r7, r8, lr}
   14b78:	mov	r8, r0
   14b7c:	ldr	r5, [pc, #84]	; 14bd8 <__assert_fail@plt+0x3ad8>
   14b80:	mov	r7, r1
   14b84:	mov	r4, r2
   14b88:	mov	r2, r4
   14b8c:	mov	r1, r7
   14b90:	mov	r0, r8
   14b94:	bl	10e84 <read@plt>
   14b98:	subs	r6, r0, #0
   14b9c:	bge	14bd0 <__assert_fail@plt+0x3ad0>
   14ba0:	bl	11004 <__errno_location@plt>
   14ba4:	ldr	r3, [r0]
   14ba8:	cmp	r3, #4
   14bac:	beq	14b88 <__assert_fail@plt+0x3a88>
   14bb0:	cmp	r4, r5
   14bb4:	movls	r2, #0
   14bb8:	movhi	r2, #1
   14bbc:	cmp	r3, #22
   14bc0:	movne	r2, #0
   14bc4:	cmp	r2, #0
   14bc8:	mov	r4, r5
   14bcc:	bne	14b88 <__assert_fail@plt+0x3a88>
   14bd0:	mov	r0, r6
   14bd4:	pop	{r4, r5, r6, r7, r8, pc}
   14bd8:	svcvc	0x00f00000	; IMB
   14bdc:	push	{r4, r5, r6, lr}
   14be0:	sub	sp, sp, #32
   14be4:	cmp	r1, #0
   14be8:	mov	r5, r0
   14bec:	ldr	r4, [sp, #48]	; 0x30
   14bf0:	ldr	r6, [sp, #52]	; 0x34
   14bf4:	beq	14c84 <__assert_fail@plt+0x3b84>
   14bf8:	strd	r2, [sp]
   14bfc:	mov	r3, r1
   14c00:	ldr	r2, [pc, #828]	; 14f44 <__assert_fail@plt+0x3e44>
   14c04:	mov	r1, #1
   14c08:	bl	11058 <__fprintf_chk@plt>
   14c0c:	mov	r2, #5
   14c10:	ldr	r1, [pc, #816]	; 14f48 <__assert_fail@plt+0x3e48>
   14c14:	mov	r0, #0
   14c18:	bl	10ef0 <dcgettext@plt>
   14c1c:	ldr	r3, [pc, #808]	; 14f4c <__assert_fail@plt+0x3e4c>
   14c20:	ldr	r2, [pc, #808]	; 14f50 <__assert_fail@plt+0x3e50>
   14c24:	str	r3, [sp]
   14c28:	mov	r1, #1
   14c2c:	mov	r3, r0
   14c30:	mov	r0, r5
   14c34:	bl	11058 <__fprintf_chk@plt>
   14c38:	ldr	r1, [pc, #788]	; 14f54 <__assert_fail@plt+0x3e54>
   14c3c:	mov	r2, #5
   14c40:	mov	r0, #0
   14c44:	bl	10ef0 <dcgettext@plt>
   14c48:	mov	r1, r5
   14c4c:	bl	10e54 <fputs_unlocked@plt>
   14c50:	cmp	r6, #9
   14c54:	ldrls	pc, [pc, r6, lsl #2]
   14c58:	b	14f34 <__assert_fail@plt+0x3e34>
   14c5c:	andeq	r4, r1, r0, asr #30
   14c60:	andeq	r4, r1, r8, lsl #26
   14c64:	andeq	r4, r1, r4, lsr sp
   14c68:	andeq	r4, r1, r8, ror #26
   14c6c:	andeq	r4, r1, r4, lsr #27
   14c70:	andeq	r4, r1, r4, ror #27
   14c74:	andeq	r4, r1, ip, lsr #28
   14c78:	andeq	r4, r1, ip, ror lr
   14c7c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c80:	muleq	r1, ip, ip
   14c84:	str	r3, [sp]
   14c88:	mov	r1, #1
   14c8c:	mov	r3, r2
   14c90:	ldr	r2, [pc, #704]	; 14f58 <__assert_fail@plt+0x3e58>
   14c94:	bl	11058 <__fprintf_chk@plt>
   14c98:	b	14c0c <__assert_fail@plt+0x3b0c>
   14c9c:	ldr	r1, [pc, #696]	; 14f5c <__assert_fail@plt+0x3e5c>
   14ca0:	mov	r2, #5
   14ca4:	mov	r0, #0
   14ca8:	bl	10ef0 <dcgettext@plt>
   14cac:	ldr	r2, [r4, #32]
   14cb0:	ldr	r3, [r4, #28]
   14cb4:	ldr	r1, [r4, #24]
   14cb8:	str	r2, [sp, #28]
   14cbc:	ldr	r2, [r4, #20]
   14cc0:	str	r3, [sp, #24]
   14cc4:	ldr	r3, [r4, #16]
   14cc8:	str	r1, [sp, #20]
   14ccc:	ldr	r1, [r4, #12]
   14cd0:	str	r2, [sp, #16]
   14cd4:	ldr	r2, [r4, #8]
   14cd8:	str	r3, [sp, #12]
   14cdc:	ldr	r3, [r4, #4]
   14ce0:	str	r1, [sp, #8]
   14ce4:	str	r2, [sp, #4]
   14ce8:	str	r3, [sp]
   14cec:	mov	r1, #1
   14cf0:	ldr	r3, [r4]
   14cf4:	mov	r2, r0
   14cf8:	mov	r0, r5
   14cfc:	bl	11058 <__fprintf_chk@plt>
   14d00:	add	sp, sp, #32
   14d04:	pop	{r4, r5, r6, pc}
   14d08:	mov	r2, #5
   14d0c:	ldr	r1, [pc, #588]	; 14f60 <__assert_fail@plt+0x3e60>
   14d10:	mov	r0, #0
   14d14:	bl	10ef0 <dcgettext@plt>
   14d18:	ldr	r3, [r4]
   14d1c:	mov	r1, #1
   14d20:	mov	r2, r0
   14d24:	mov	r0, r5
   14d28:	add	sp, sp, #32
   14d2c:	pop	{r4, r5, r6, lr}
   14d30:	b	11058 <__fprintf_chk@plt>
   14d34:	mov	r2, #5
   14d38:	ldr	r1, [pc, #548]	; 14f64 <__assert_fail@plt+0x3e64>
   14d3c:	mov	r0, #0
   14d40:	bl	10ef0 <dcgettext@plt>
   14d44:	ldr	r2, [r4, #4]
   14d48:	ldr	r3, [r4]
   14d4c:	mov	r1, #1
   14d50:	str	r2, [sp, #48]	; 0x30
   14d54:	mov	r2, r0
   14d58:	mov	r0, r5
   14d5c:	add	sp, sp, #32
   14d60:	pop	{r4, r5, r6, lr}
   14d64:	b	11058 <__fprintf_chk@plt>
   14d68:	mov	r2, #5
   14d6c:	ldr	r1, [pc, #500]	; 14f68 <__assert_fail@plt+0x3e68>
   14d70:	mov	r0, #0
   14d74:	bl	10ef0 <dcgettext@plt>
   14d78:	ldr	r2, [r4, #8]
   14d7c:	ldr	r3, [r4, #4]
   14d80:	mov	r1, #1
   14d84:	str	r2, [sp, #52]	; 0x34
   14d88:	str	r3, [sp, #48]	; 0x30
   14d8c:	ldr	r3, [r4]
   14d90:	mov	r2, r0
   14d94:	mov	r0, r5
   14d98:	add	sp, sp, #32
   14d9c:	pop	{r4, r5, r6, lr}
   14da0:	b	11058 <__fprintf_chk@plt>
   14da4:	mov	r2, #5
   14da8:	ldr	r1, [pc, #444]	; 14f6c <__assert_fail@plt+0x3e6c>
   14dac:	mov	r0, #0
   14db0:	bl	10ef0 <dcgettext@plt>
   14db4:	ldr	r1, [r4, #12]
   14db8:	ldr	r2, [r4, #8]
   14dbc:	ldr	r3, [r4, #4]
   14dc0:	str	r1, [sp, #8]
   14dc4:	str	r2, [sp, #4]
   14dc8:	str	r3, [sp]
   14dcc:	mov	r1, #1
   14dd0:	ldr	r3, [r4]
   14dd4:	mov	r2, r0
   14dd8:	mov	r0, r5
   14ddc:	bl	11058 <__fprintf_chk@plt>
   14de0:	b	14d00 <__assert_fail@plt+0x3c00>
   14de4:	mov	r2, #5
   14de8:	ldr	r1, [pc, #384]	; 14f70 <__assert_fail@plt+0x3e70>
   14dec:	mov	r0, #0
   14df0:	bl	10ef0 <dcgettext@plt>
   14df4:	ldr	r3, [r4, #16]
   14df8:	ldr	r1, [r4, #12]
   14dfc:	ldr	r2, [r4, #8]
   14e00:	str	r3, [sp, #12]
   14e04:	ldr	r3, [r4, #4]
   14e08:	str	r1, [sp, #8]
   14e0c:	str	r2, [sp, #4]
   14e10:	str	r3, [sp]
   14e14:	mov	r1, #1
   14e18:	ldr	r3, [r4]
   14e1c:	mov	r2, r0
   14e20:	mov	r0, r5
   14e24:	bl	11058 <__fprintf_chk@plt>
   14e28:	b	14d00 <__assert_fail@plt+0x3c00>
   14e2c:	mov	r2, #5
   14e30:	ldr	r1, [pc, #316]	; 14f74 <__assert_fail@plt+0x3e74>
   14e34:	mov	r0, #0
   14e38:	bl	10ef0 <dcgettext@plt>
   14e3c:	ldr	r2, [r4, #20]
   14e40:	ldr	r3, [r4, #16]
   14e44:	ldr	r1, [r4, #12]
   14e48:	str	r2, [sp, #16]
   14e4c:	ldr	r2, [r4, #8]
   14e50:	str	r3, [sp, #12]
   14e54:	ldr	r3, [r4, #4]
   14e58:	str	r1, [sp, #8]
   14e5c:	str	r2, [sp, #4]
   14e60:	str	r3, [sp]
   14e64:	mov	r1, #1
   14e68:	ldr	r3, [r4]
   14e6c:	mov	r2, r0
   14e70:	mov	r0, r5
   14e74:	bl	11058 <__fprintf_chk@plt>
   14e78:	b	14d00 <__assert_fail@plt+0x3c00>
   14e7c:	mov	r2, #5
   14e80:	ldr	r1, [pc, #240]	; 14f78 <__assert_fail@plt+0x3e78>
   14e84:	mov	r0, #0
   14e88:	bl	10ef0 <dcgettext@plt>
   14e8c:	ldr	r1, [r4, #24]
   14e90:	ldr	r2, [r4, #20]
   14e94:	ldr	r3, [r4, #16]
   14e98:	str	r1, [sp, #20]
   14e9c:	ldr	r1, [r4, #12]
   14ea0:	str	r2, [sp, #16]
   14ea4:	ldr	r2, [r4, #8]
   14ea8:	str	r3, [sp, #12]
   14eac:	ldr	r3, [r4, #4]
   14eb0:	str	r1, [sp, #8]
   14eb4:	str	r2, [sp, #4]
   14eb8:	str	r3, [sp]
   14ebc:	mov	r1, #1
   14ec0:	ldr	r3, [r4]
   14ec4:	mov	r2, r0
   14ec8:	mov	r0, r5
   14ecc:	bl	11058 <__fprintf_chk@plt>
   14ed0:	b	14d00 <__assert_fail@plt+0x3c00>
   14ed4:	mov	r2, #5
   14ed8:	ldr	r1, [pc, #156]	; 14f7c <__assert_fail@plt+0x3e7c>
   14edc:	mov	r0, #0
   14ee0:	bl	10ef0 <dcgettext@plt>
   14ee4:	ldr	r3, [r4, #28]
   14ee8:	ldr	r1, [r4, #24]
   14eec:	ldr	r2, [r4, #20]
   14ef0:	str	r3, [sp, #24]
   14ef4:	ldr	r3, [r4, #16]
   14ef8:	str	r1, [sp, #20]
   14efc:	ldr	r1, [r4, #12]
   14f00:	str	r2, [sp, #16]
   14f04:	ldr	r2, [r4, #8]
   14f08:	str	r3, [sp, #12]
   14f0c:	ldr	r3, [r4, #4]
   14f10:	str	r1, [sp, #8]
   14f14:	str	r2, [sp, #4]
   14f18:	str	r3, [sp]
   14f1c:	mov	r1, #1
   14f20:	ldr	r3, [r4]
   14f24:	mov	r2, r0
   14f28:	mov	r0, r5
   14f2c:	bl	11058 <__fprintf_chk@plt>
   14f30:	b	14d00 <__assert_fail@plt+0x3c00>
   14f34:	mov	r2, #5
   14f38:	ldr	r1, [pc, #64]	; 14f80 <__assert_fail@plt+0x3e80>
   14f3c:	b	14ca4 <__assert_fail@plt+0x3ba4>
   14f40:	bl	110e8 <abort@plt>
   14f44:	muleq	r1, ip, r1
   14f48:			; <UNDEFINED> instruction: 0x000171b0
   14f4c:	andeq	r0, r0, r2, ror #15
   14f50:	andeq	r7, r1, r4, lsl #9
   14f54:			; <UNDEFINED> instruction: 0x000171b4
   14f58:	andeq	r7, r1, r8, lsr #3
   14f5c:	andeq	r7, r1, ip, lsl #7
   14f60:	andeq	r7, r1, r0, lsl #5
   14f64:	muleq	r1, r0, r2
   14f68:	andeq	r7, r1, r8, lsr #5
   14f6c:	andeq	r7, r1, r4, asr #5
   14f70:	andeq	r7, r1, r4, ror #5
   14f74:	andeq	r7, r1, r8, lsl #6
   14f78:	andeq	r7, r1, r0, lsr r3
   14f7c:	andeq	r7, r1, ip, asr r3
   14f80:	andeq	r7, r1, r0, asr #7
   14f84:	push	{r4, r5, lr}
   14f88:	sub	sp, sp, #12
   14f8c:	ldr	r5, [sp, #24]
   14f90:	ldr	ip, [r5]
   14f94:	cmp	ip, #0
   14f98:	beq	14fb4 <__assert_fail@plt+0x3eb4>
   14f9c:	mov	lr, r5
   14fa0:	mov	ip, #0
   14fa4:	ldr	r4, [lr, #4]!
   14fa8:	add	ip, ip, #1
   14fac:	cmp	r4, #0
   14fb0:	bne	14fa4 <__assert_fail@plt+0x3ea4>
   14fb4:	stm	sp, {r5, ip}
   14fb8:	bl	14bdc <__assert_fail@plt+0x3adc>
   14fbc:	add	sp, sp, #12
   14fc0:	pop	{r4, r5, pc}
   14fc4:	push	{r4, r5, r6, lr}
   14fc8:	sub	sp, sp, #56	; 0x38
   14fcc:	ldr	r6, [pc, #88]	; 1502c <__assert_fail@plt+0x3f2c>
   14fd0:	ldr	r5, [sp, #72]	; 0x48
   14fd4:	add	r4, sp, #8
   14fd8:	ldr	ip, [r6]
   14fdc:	str	ip, [sp, #52]	; 0x34
   14fe0:	mov	ip, #0
   14fe4:	ldr	lr, [r5], #4
   14fe8:	cmp	lr, #0
   14fec:	str	lr, [r4, #4]!
   14ff0:	beq	15000 <__assert_fail@plt+0x3f00>
   14ff4:	add	ip, ip, #1
   14ff8:	cmp	ip, #10
   14ffc:	bne	14fe4 <__assert_fail@plt+0x3ee4>
   15000:	add	lr, sp, #12
   15004:	str	ip, [sp, #4]
   15008:	str	lr, [sp]
   1500c:	bl	14bdc <__assert_fail@plt+0x3adc>
   15010:	ldr	r2, [sp, #52]	; 0x34
   15014:	ldr	r3, [r6]
   15018:	cmp	r2, r3
   1501c:	bne	15028 <__assert_fail@plt+0x3f28>
   15020:	add	sp, sp, #56	; 0x38
   15024:	pop	{r4, r5, r6, pc}
   15028:	bl	10efc <__stack_chk_fail@plt>
   1502c:	andeq	r7, r2, r8, lsl #30
   15030:	push	{r3}		; (str r3, [sp, #-4]!)
   15034:	mov	ip, #0
   15038:	push	{r4, r5, r6, lr}
   1503c:	sub	sp, sp, #60	; 0x3c
   15040:	ldr	r6, [pc, #100]	; 150ac <__assert_fail@plt+0x3fac>
   15044:	add	r5, sp, #8
   15048:	add	r4, sp, #80	; 0x50
   1504c:	ldr	r3, [r6]
   15050:	str	r4, [sp, #8]
   15054:	str	r3, [sp, #52]	; 0x34
   15058:	ldr	r3, [sp, #76]	; 0x4c
   1505c:	ldr	lr, [r4], #4
   15060:	cmp	lr, #0
   15064:	str	lr, [r5, #4]!
   15068:	beq	15078 <__assert_fail@plt+0x3f78>
   1506c:	add	ip, ip, #1
   15070:	cmp	ip, #10
   15074:	bne	1505c <__assert_fail@plt+0x3f5c>
   15078:	add	lr, sp, #12
   1507c:	str	ip, [sp, #4]
   15080:	str	lr, [sp]
   15084:	bl	14bdc <__assert_fail@plt+0x3adc>
   15088:	ldr	r2, [sp, #52]	; 0x34
   1508c:	ldr	r3, [r6]
   15090:	cmp	r2, r3
   15094:	bne	150a8 <__assert_fail@plt+0x3fa8>
   15098:	add	sp, sp, #60	; 0x3c
   1509c:	pop	{r4, r5, r6, lr}
   150a0:	add	sp, sp, #4
   150a4:	bx	lr
   150a8:	bl	10efc <__stack_chk_fail@plt>
   150ac:	andeq	r7, r2, r8, lsl #30
   150b0:	push	{r4, lr}
   150b4:	mov	r2, #5
   150b8:	ldr	r1, [pc, #88]	; 15118 <__assert_fail@plt+0x4018>
   150bc:	mov	r0, #0
   150c0:	bl	10ef0 <dcgettext@plt>
   150c4:	ldr	r2, [pc, #80]	; 1511c <__assert_fail@plt+0x401c>
   150c8:	mov	r1, r0
   150cc:	mov	r0, #1
   150d0:	bl	11040 <__printf_chk@plt>
   150d4:	mov	r2, #5
   150d8:	ldr	r1, [pc, #64]	; 15120 <__assert_fail@plt+0x4020>
   150dc:	mov	r0, #0
   150e0:	bl	10ef0 <dcgettext@plt>
   150e4:	ldr	r3, [pc, #56]	; 15124 <__assert_fail@plt+0x4024>
   150e8:	ldr	r2, [pc, #56]	; 15128 <__assert_fail@plt+0x4028>
   150ec:	mov	r1, r0
   150f0:	mov	r0, #1
   150f4:	bl	11040 <__printf_chk@plt>
   150f8:	ldr	r1, [pc, #44]	; 1512c <__assert_fail@plt+0x402c>
   150fc:	mov	r2, #5
   15100:	mov	r0, #0
   15104:	bl	10ef0 <dcgettext@plt>
   15108:	ldr	r3, [pc, #32]	; 15130 <__assert_fail@plt+0x4030>
   1510c:	pop	{r4, lr}
   15110:	ldr	r1, [r3]
   15114:	b	10e54 <fputs_unlocked@plt>
   15118:	strdeq	r7, [r1], -ip
   1511c:	andeq	r7, r1, r4, lsl r4
   15120:	andeq	r7, r1, ip, lsr #8
   15124:	andeq	r6, r1, ip, asr #28
   15128:	andeq	r6, r1, r4, ror lr
   1512c:	andeq	r7, r1, r0, asr #8
   15130:	andeq	r8, r2, ip, ror #2
   15134:	push	{r4, lr}
   15138:	mov	r4, r0
   1513c:	bl	10f98 <malloc@plt>
   15140:	adds	r4, r4, #0
   15144:	movne	r4, #1
   15148:	cmp	r0, #0
   1514c:	movne	r4, #0
   15150:	cmp	r4, #0
   15154:	popeq	{r4, pc}
   15158:	bl	1537c <__assert_fail@plt+0x427c>
   1515c:	push	{r4, r5, r6, lr}
   15160:	umull	r4, r5, r0, r1
   15164:	adds	r3, r5, #0
   15168:	movne	r3, #1
   1516c:	cmp	r4, #0
   15170:	blt	15188 <__assert_fail@plt+0x4088>
   15174:	cmp	r3, #0
   15178:	bne	15188 <__assert_fail@plt+0x4088>
   1517c:	mul	r0, r1, r0
   15180:	pop	{r4, r5, r6, lr}
   15184:	b	15134 <__assert_fail@plt+0x4034>
   15188:	bl	1537c <__assert_fail@plt+0x427c>
   1518c:	b	15134 <__assert_fail@plt+0x4034>
   15190:	adds	r3, r0, #0
   15194:	movne	r3, #1
   15198:	cmp	r1, #0
   1519c:	movne	r3, #0
   151a0:	cmp	r3, #0
   151a4:	push	{r4, lr}
   151a8:	bne	151d0 <__assert_fail@plt+0x40d0>
   151ac:	mov	r4, r1
   151b0:	bl	10f08 <realloc@plt>
   151b4:	adds	r4, r4, #0
   151b8:	movne	r4, #1
   151bc:	cmp	r0, #0
   151c0:	movne	r4, #0
   151c4:	cmp	r4, #0
   151c8:	popeq	{r4, pc}
   151cc:	bl	1537c <__assert_fail@plt+0x427c>
   151d0:	bl	10ea8 <free@plt>
   151d4:	mov	r0, #0
   151d8:	pop	{r4, pc}
   151dc:	push	{r4, r5, r6, lr}
   151e0:	umull	r4, r5, r1, r2
   151e4:	adds	r3, r5, #0
   151e8:	movne	r3, #1
   151ec:	cmp	r4, #0
   151f0:	blt	15208 <__assert_fail@plt+0x4108>
   151f4:	cmp	r3, #0
   151f8:	bne	15208 <__assert_fail@plt+0x4108>
   151fc:	mul	r1, r2, r1
   15200:	pop	{r4, r5, r6, lr}
   15204:	b	15190 <__assert_fail@plt+0x4090>
   15208:	bl	1537c <__assert_fail@plt+0x427c>
   1520c:	push	{r4, r5, r6, r7, r8, lr}
   15210:	subs	r7, r0, #0
   15214:	mov	r6, r1
   15218:	mov	r5, r2
   1521c:	ldr	r4, [r1]
   15220:	beq	15254 <__assert_fail@plt+0x4154>
   15224:	mov	r1, r2
   15228:	ldr	r0, [pc, #104]	; 15298 <__assert_fail@plt+0x4198>
   1522c:	bl	163fc <__assert_fail@plt+0x52fc>
   15230:	cmp	r0, r4
   15234:	bls	15278 <__assert_fail@plt+0x4178>
   15238:	add	r3, r4, #1
   1523c:	add	r4, r3, r4, lsr #1
   15240:	str	r4, [r6]
   15244:	mul	r1, r5, r4
   15248:	mov	r0, r7
   1524c:	pop	{r4, r5, r6, r7, r8, lr}
   15250:	b	15190 <__assert_fail@plt+0x4090>
   15254:	cmp	r4, #0
   15258:	beq	1527c <__assert_fail@plt+0x417c>
   1525c:	umull	r0, r1, r4, r5
   15260:	adds	r3, r1, #0
   15264:	movne	r3, #1
   15268:	cmp	r0, #0
   1526c:	blt	15278 <__assert_fail@plt+0x4178>
   15270:	cmp	r3, #0
   15274:	beq	15240 <__assert_fail@plt+0x4140>
   15278:	bl	1537c <__assert_fail@plt+0x427c>
   1527c:	mov	r1, r2
   15280:	mov	r0, #64	; 0x40
   15284:	bl	163fc <__assert_fail@plt+0x52fc>
   15288:	cmp	r5, #64	; 0x40
   1528c:	movls	r4, r0
   15290:	addhi	r4, r0, #1
   15294:	b	1525c <__assert_fail@plt+0x415c>
   15298:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1529c:	cmp	r0, #0
   152a0:	ldr	r3, [r1]
   152a4:	beq	152c8 <__assert_fail@plt+0x41c8>
   152a8:	ldr	r2, [pc, #60]	; 152ec <__assert_fail@plt+0x41ec>
   152ac:	cmp	r3, r2
   152b0:	bhi	152e4 <__assert_fail@plt+0x41e4>
   152b4:	add	r2, r3, #1
   152b8:	add	r3, r2, r3, lsr #1
   152bc:	str	r3, [r1]
   152c0:	mov	r1, r3
   152c4:	b	15190 <__assert_fail@plt+0x4090>
   152c8:	cmp	r3, #0
   152cc:	bne	152e0 <__assert_fail@plt+0x41e0>
   152d0:	mov	r3, #64	; 0x40
   152d4:	str	r3, [r1]
   152d8:	mov	r1, r3
   152dc:	b	15190 <__assert_fail@plt+0x4090>
   152e0:	bge	152bc <__assert_fail@plt+0x41bc>
   152e4:	push	{r4, lr}
   152e8:	bl	1537c <__assert_fail@plt+0x427c>
   152ec:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   152f0:	push	{r4, lr}
   152f4:	mov	r4, r0
   152f8:	bl	15134 <__assert_fail@plt+0x4034>
   152fc:	mov	r2, r4
   15300:	mov	r1, #0
   15304:	pop	{r4, lr}
   15308:	b	11034 <memset@plt>
   1530c:	push	{r4, r5, r6, lr}
   15310:	umull	r4, r5, r0, r1
   15314:	adds	r3, r5, #0
   15318:	movne	r3, #1
   1531c:	cmp	r4, #0
   15320:	blt	15338 <__assert_fail@plt+0x4238>
   15324:	cmp	r3, #0
   15328:	bne	15338 <__assert_fail@plt+0x4238>
   1532c:	bl	10e48 <calloc@plt>
   15330:	cmp	r0, #0
   15334:	popne	{r4, r5, r6, pc}
   15338:	bl	1537c <__assert_fail@plt+0x427c>
   1533c:	push	{r4, r5, r6, lr}
   15340:	mov	r4, r1
   15344:	mov	r5, r0
   15348:	mov	r0, r1
   1534c:	bl	15134 <__assert_fail@plt+0x4034>
   15350:	mov	r2, r4
   15354:	mov	r1, r5
   15358:	pop	{r4, r5, r6, lr}
   1535c:	b	10ec0 <memcpy@plt>
   15360:	push	{r4, lr}
   15364:	mov	r4, r0
   15368:	bl	10fec <strlen@plt>
   1536c:	add	r1, r0, #1
   15370:	mov	r0, r4
   15374:	pop	{r4, lr}
   15378:	b	1533c <__assert_fail@plt+0x423c>
   1537c:	ldr	r3, [pc, #44]	; 153b0 <__assert_fail@plt+0x42b0>
   15380:	push	{r4, lr}
   15384:	mov	r2, #5
   15388:	ldr	r1, [pc, #36]	; 153b4 <__assert_fail@plt+0x42b4>
   1538c:	mov	r0, #0
   15390:	ldr	r4, [r3]
   15394:	bl	10ef0 <dcgettext@plt>
   15398:	ldr	r2, [pc, #24]	; 153b8 <__assert_fail@plt+0x42b8>
   1539c:	mov	r1, #0
   153a0:	mov	r3, r0
   153a4:	mov	r0, r4
   153a8:	bl	10f74 <error@plt>
   153ac:	bl	110e8 <abort@plt>
   153b0:	andeq	r8, r2, r8, lsl #2
   153b4:			; <UNDEFINED> instruction: 0x000174b4
   153b8:	strdeq	r6, [r1], -ip
   153bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c0:	sub	sp, sp, #36	; 0x24
   153c4:	ldr	r5, [pc, #2536]	; 15db4 <__assert_fail@plt+0x4cb4>
   153c8:	mov	r9, r2
   153cc:	cmp	r2, #36	; 0x24
   153d0:	str	r3, [sp, #12]
   153d4:	ldr	r2, [r5]
   153d8:	ldr	r3, [sp, #72]	; 0x48
   153dc:	str	r2, [sp, #28]
   153e0:	str	r3, [sp]
   153e4:	bhi	15da0 <__assert_fail@plt+0x4ca0>
   153e8:	cmp	r1, #0
   153ec:	mov	r4, r1
   153f0:	mov	r6, r0
   153f4:	addeq	r4, sp, #24
   153f8:	bl	11004 <__errno_location@plt>
   153fc:	mov	r3, #0
   15400:	str	r3, [r0]
   15404:	mov	r7, r0
   15408:	bl	10fd4 <__ctype_b_loc@plt>
   1540c:	ldrb	r3, [r6]
   15410:	mov	r1, r6
   15414:	ldr	r0, [r0]
   15418:	b	15420 <__assert_fail@plt+0x4320>
   1541c:	ldrb	r3, [r1, #1]!
   15420:	lsl	r2, r3, #1
   15424:	ldrh	r8, [r0, r2]
   15428:	ands	r8, r8, #8192	; 0x2000
   1542c:	bne	1541c <__assert_fail@plt+0x431c>
   15430:	cmp	r3, #45	; 0x2d
   15434:	beq	154d0 <__assert_fail@plt+0x43d0>
   15438:	mov	r2, r9
   1543c:	mov	r3, r8
   15440:	mov	r1, r4
   15444:	mov	r0, r6
   15448:	bl	10ecc <__strtoull_internal@plt>
   1544c:	ldr	r9, [r4]
   15450:	cmp	r9, r6
   15454:	mov	sl, r0
   15458:	mov	fp, r1
   1545c:	beq	154b8 <__assert_fail@plt+0x43b8>
   15460:	ldr	r8, [r7]
   15464:	cmp	r8, #0
   15468:	bne	154a8 <__assert_fail@plt+0x43a8>
   1546c:	ldr	r3, [sp]
   15470:	cmp	r3, #0
   15474:	beq	15484 <__assert_fail@plt+0x4384>
   15478:	ldrb	r6, [r9]
   1547c:	cmp	r6, #0
   15480:	bne	15858 <__assert_fail@plt+0x4758>
   15484:	ldr	r3, [sp, #12]
   15488:	strd	sl, [r3]
   1548c:	ldr	r2, [sp, #28]
   15490:	ldr	r3, [r5]
   15494:	mov	r0, r8
   15498:	cmp	r2, r3
   1549c:	bne	15d9c <__assert_fail@plt+0x4c9c>
   154a0:	add	sp, sp, #36	; 0x24
   154a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154a8:	cmp	r8, #34	; 0x22
   154ac:	bne	154d0 <__assert_fail@plt+0x43d0>
   154b0:	mov	r8, #1
   154b4:	b	1546c <__assert_fail@plt+0x436c>
   154b8:	ldr	r0, [sp]
   154bc:	cmp	r0, #0
   154c0:	beq	154d0 <__assert_fail@plt+0x43d0>
   154c4:	ldrb	r6, [r6]
   154c8:	cmp	r6, #0
   154cc:	bne	154d8 <__assert_fail@plt+0x43d8>
   154d0:	mov	r8, #4
   154d4:	b	1548c <__assert_fail@plt+0x438c>
   154d8:	mov	r1, r6
   154dc:	bl	10ff8 <strchr@plt>
   154e0:	cmp	r0, #0
   154e4:	movne	sl, #1
   154e8:	movne	fp, #0
   154ec:	beq	154d0 <__assert_fail@plt+0x43d0>
   154f0:	sub	r7, r6, #69	; 0x45
   154f4:	cmp	r7, #47	; 0x2f
   154f8:	ldrls	pc, [pc, r7, lsl #2]
   154fc:	b	156bc <__assert_fail@plt+0x45bc>
   15500:	andeq	r5, r1, r0, asr #11
   15504:			; <UNDEFINED> instruction: 0x000156bc
   15508:	andeq	r5, r1, r0, asr #11
   1550c:			; <UNDEFINED> instruction: 0x000156bc
   15510:			; <UNDEFINED> instruction: 0x000156bc
   15514:			; <UNDEFINED> instruction: 0x000156bc
   15518:	andeq	r5, r1, r0, asr #11
   1551c:			; <UNDEFINED> instruction: 0x000156bc
   15520:	andeq	r5, r1, r0, asr #11
   15524:			; <UNDEFINED> instruction: 0x000156bc
   15528:			; <UNDEFINED> instruction: 0x000156bc
   1552c:	andeq	r5, r1, r0, asr #11
   15530:			; <UNDEFINED> instruction: 0x000156bc
   15534:			; <UNDEFINED> instruction: 0x000156bc
   15538:			; <UNDEFINED> instruction: 0x000156bc
   1553c:	andeq	r5, r1, r0, asr #11
   15540:			; <UNDEFINED> instruction: 0x000156bc
   15544:			; <UNDEFINED> instruction: 0x000156bc
   15548:			; <UNDEFINED> instruction: 0x000156bc
   1554c:			; <UNDEFINED> instruction: 0x000156bc
   15550:	andeq	r5, r1, r0, asr #11
   15554:	andeq	r5, r1, r0, asr #11
   15558:			; <UNDEFINED> instruction: 0x000156bc
   1555c:			; <UNDEFINED> instruction: 0x000156bc
   15560:			; <UNDEFINED> instruction: 0x000156bc
   15564:			; <UNDEFINED> instruction: 0x000156bc
   15568:			; <UNDEFINED> instruction: 0x000156bc
   1556c:			; <UNDEFINED> instruction: 0x000156bc
   15570:			; <UNDEFINED> instruction: 0x000156bc
   15574:			; <UNDEFINED> instruction: 0x000156bc
   15578:			; <UNDEFINED> instruction: 0x000156bc
   1557c:			; <UNDEFINED> instruction: 0x000156bc
   15580:			; <UNDEFINED> instruction: 0x000156bc
   15584:			; <UNDEFINED> instruction: 0x000156bc
   15588:	andeq	r5, r1, r0, asr #11
   1558c:			; <UNDEFINED> instruction: 0x000156bc
   15590:			; <UNDEFINED> instruction: 0x000156bc
   15594:			; <UNDEFINED> instruction: 0x000156bc
   15598:	andeq	r5, r1, r0, asr #11
   1559c:			; <UNDEFINED> instruction: 0x000156bc
   155a0:	andeq	r5, r1, r0, asr #11
   155a4:			; <UNDEFINED> instruction: 0x000156bc
   155a8:			; <UNDEFINED> instruction: 0x000156bc
   155ac:			; <UNDEFINED> instruction: 0x000156bc
   155b0:			; <UNDEFINED> instruction: 0x000156bc
   155b4:			; <UNDEFINED> instruction: 0x000156bc
   155b8:			; <UNDEFINED> instruction: 0x000156bc
   155bc:	andeq	r5, r1, r0, asr #11
   155c0:	ldr	r0, [sp]
   155c4:	mov	r1, #48	; 0x30
   155c8:	bl	10ff8 <strchr@plt>
   155cc:	cmp	r0, #0
   155d0:	beq	156bc <__assert_fail@plt+0x45bc>
   155d4:	ldrb	r3, [r9, #1]
   155d8:	cmp	r3, #68	; 0x44
   155dc:	beq	15c9c <__assert_fail@plt+0x4b9c>
   155e0:	cmp	r3, #105	; 0x69
   155e4:	beq	1587c <__assert_fail@plt+0x477c>
   155e8:	cmp	r3, #66	; 0x42
   155ec:	beq	15c9c <__assert_fail@plt+0x4b9c>
   155f0:	cmp	r7, #47	; 0x2f
   155f4:	ldrls	pc, [pc, r7, lsl #2]
   155f8:	b	1586c <__assert_fail@plt+0x476c>
   155fc:	andeq	r5, r1, r0, lsl #25
   15600:	andeq	r5, r1, ip, ror #16
   15604:	andeq	r5, r1, r0, ror ip
   15608:	andeq	r5, r1, ip, ror #16
   1560c:	andeq	r5, r1, ip, ror #16
   15610:	andeq	r5, r1, ip, ror #16
   15614:	andeq	r5, r1, r0, ror #24
   15618:	andeq	r5, r1, ip, ror #16
   1561c:	andeq	r5, r1, r0, asr ip
   15620:	andeq	r5, r1, ip, ror #16
   15624:	andeq	r5, r1, ip, ror #16
   15628:	andeq	r5, r1, r0, asr #24
   1562c:	andeq	r5, r1, ip, ror #16
   15630:	andeq	r5, r1, ip, ror #16
   15634:	andeq	r5, r1, ip, ror #16
   15638:	andeq	r5, r1, r0, lsr ip
   1563c:	andeq	r5, r1, ip, ror #16
   15640:	andeq	r5, r1, ip, ror #16
   15644:	andeq	r5, r1, ip, ror #16
   15648:	andeq	r5, r1, ip, ror #16
   1564c:	andeq	r5, r1, r0, lsr #24
   15650:	andeq	r5, r1, r0, lsl ip
   15654:	andeq	r5, r1, ip, ror #16
   15658:	andeq	r5, r1, ip, ror #16
   1565c:	andeq	r5, r1, ip, ror #16
   15660:	andeq	r5, r1, ip, ror #16
   15664:	andeq	r5, r1, ip, ror #16
   15668:	andeq	r5, r1, ip, ror #16
   1566c:	andeq	r5, r1, ip, ror #16
   15670:			; <UNDEFINED> instruction: 0x000158b8
   15674:	andeq	r5, r1, r8, lsl #24
   15678:	andeq	r5, r1, ip, ror #16
   1567c:	andeq	r5, r1, ip, ror #16
   15680:	andeq	r5, r1, ip, ror #16
   15684:	andeq	r5, r1, r0, ror ip
   15688:	andeq	r5, r1, ip, ror #16
   1568c:	andeq	r5, r1, ip, ror #16
   15690:	andeq	r5, r1, ip, ror #16
   15694:	andeq	r5, r1, r0, ror #24
   15698:	andeq	r5, r1, ip, ror #16
   1569c:	andeq	r5, r1, r0, asr ip
   156a0:	andeq	r5, r1, ip, ror #16
   156a4:	andeq	r5, r1, ip, ror #16
   156a8:	andeq	r5, r1, ip, ror #16
   156ac:	andeq	r5, r1, ip, ror #16
   156b0:	andeq	r5, r1, ip, ror #16
   156b4:	andeq	r5, r1, ip, ror #16
   156b8:	andeq	r5, r1, r0, lsr ip
   156bc:	mov	lr, #1
   156c0:	mov	r0, #1024	; 0x400
   156c4:	sub	r6, r6, #66	; 0x42
   156c8:	cmp	r6, #53	; 0x35
   156cc:	ldrls	pc, [pc, r6, lsl #2]
   156d0:	b	1586c <__assert_fail@plt+0x476c>
   156d4:	andeq	r5, r1, r0, ror #17
   156d8:	andeq	r5, r1, ip, ror #16
   156dc:	andeq	r5, r1, ip, ror #16
   156e0:	andeq	r5, r1, r4, lsl #18
   156e4:	andeq	r5, r1, ip, ror #16
   156e8:	andeq	r5, r1, ip, lsr #15
   156ec:	andeq	r5, r1, ip, ror #16
   156f0:	andeq	r5, r1, ip, ror #16
   156f4:	andeq	r5, r1, ip, ror #16
   156f8:	strdeq	r5, [r1], -ip
   156fc:	andeq	r5, r1, ip, ror #16
   15700:	andeq	r5, r1, r0, lsr #23
   15704:	andeq	r5, r1, ip, ror #16
   15708:	andeq	r5, r1, ip, ror #16
   1570c:	andeq	r5, r1, r4, lsr #22
   15710:	andeq	r5, r1, ip, ror #16
   15714:	andeq	r5, r1, ip, ror #16
   15718:	andeq	r5, r1, ip, ror #16
   1571c:	andeq	r5, r1, r8, lsr #21
   15720:	andeq	r5, r1, ip, ror #16
   15724:	andeq	r5, r1, ip, ror #16
   15728:	andeq	r5, r1, ip, ror #16
   1572c:	andeq	r5, r1, ip, ror #16
   15730:	andeq	r5, r1, ip, lsr #20
   15734:	andeq	r5, r1, r0, lsl #19
   15738:	andeq	r5, r1, ip, ror #16
   1573c:	andeq	r5, r1, ip, ror #16
   15740:	andeq	r5, r1, ip, ror #16
   15744:	andeq	r5, r1, ip, ror #16
   15748:	andeq	r5, r1, ip, ror #16
   1574c:	andeq	r5, r1, ip, ror #16
   15750:	andeq	r5, r1, ip, ror #16
   15754:			; <UNDEFINED> instruction: 0x000158bc
   15758:	andeq	r5, r1, r0, asr #16
   1575c:	andeq	r5, r1, ip, ror #16
   15760:	andeq	r5, r1, ip, ror #16
   15764:	andeq	r5, r1, ip, ror #16
   15768:	andeq	r5, r1, ip, lsr #15
   1576c:	andeq	r5, r1, ip, ror #16
   15770:	andeq	r5, r1, ip, ror #16
   15774:	andeq	r5, r1, ip, ror #16
   15778:	strdeq	r5, [r1], -ip
   1577c:	andeq	r5, r1, ip, ror #16
   15780:	andeq	r5, r1, r0, lsr #23
   15784:	andeq	r5, r1, ip, ror #16
   15788:	andeq	r5, r1, ip, ror #16
   1578c:	andeq	r5, r1, ip, ror #16
   15790:	andeq	r5, r1, ip, ror #16
   15794:	andeq	r5, r1, ip, ror #16
   15798:	andeq	r5, r1, ip, ror #16
   1579c:	andeq	r5, r1, r8, lsr #21
   157a0:	andeq	r5, r1, ip, ror #16
   157a4:	andeq	r5, r1, ip, ror #16
   157a8:	muleq	r1, r4, r8
   157ac:	asr	r1, r0, #31
   157b0:	mov	r2, #0
   157b4:	mov	r3, #0
   157b8:	cmp	fp, #0
   157bc:	strd	r2, [sp]
   157c0:	bne	15ce0 <__assert_fail@plt+0x4be0>
   157c4:	ldrd	r2, [sp]
   157c8:	orrs	r3, r2, r3
   157cc:	bne	15cd0 <__assert_fail@plt+0x4bd0>
   157d0:	mul	r3, sl, r1
   157d4:	umull	r6, r7, sl, r0
   157d8:	mla	r3, r0, fp, r3
   157dc:	ldrd	sl, [sp]
   157e0:	add	ip, r3, r7
   157e4:	cmp	ip, #0
   157e8:	mov	r7, ip
   157ec:	bne	15d74 <__assert_fail@plt+0x4c74>
   157f0:	orrs	r3, sl, fp
   157f4:	bne	15cd0 <__assert_fail@plt+0x4bd0>
   157f8:	umull	r2, r3, r6, r0
   157fc:	mul	ip, r6, r1
   15800:	strd	r2, [sp]
   15804:	mla	r3, r0, r7, ip
   15808:	ldr	r2, [sp, #4]
   1580c:	add	ip, r3, r2
   15810:	cmp	ip, #0
   15814:	str	ip, [sp, #4]
   15818:	bne	15d50 <__assert_fail@plt+0x4c50>
   1581c:	orrs	r3, sl, fp
   15820:	bne	15cd0 <__assert_fail@plt+0x4bd0>
   15824:	ldrd	r6, [sp]
   15828:	mov	r3, #0
   1582c:	mul	r2, r6, r1
   15830:	umull	sl, fp, r6, r0
   15834:	mla	r2, r0, r7, r2
   15838:	add	fp, r2, fp
   1583c:	orr	r8, r8, r3
   15840:	add	r3, r9, lr
   15844:	str	r3, [r4]
   15848:	ldrb	r3, [r9, lr]
   1584c:	cmp	r3, #0
   15850:	orrne	r8, r8, #2
   15854:	b	15484 <__assert_fail@plt+0x4384>
   15858:	mov	r1, r6
   1585c:	ldr	r0, [sp]
   15860:	bl	10ff8 <strchr@plt>
   15864:	cmp	r0, #0
   15868:	bne	154f0 <__assert_fail@plt+0x43f0>
   1586c:	ldr	r3, [sp, #12]
   15870:	orr	r8, r8, #2
   15874:	strd	sl, [r3]
   15878:	b	1548c <__assert_fail@plt+0x438c>
   1587c:	ldrb	r3, [r9, #2]
   15880:	mov	r0, #1024	; 0x400
   15884:	cmp	r3, #66	; 0x42
   15888:	movne	lr, #1
   1588c:	moveq	lr, #3
   15890:	b	156c4 <__assert_fail@plt+0x45c4>
   15894:	lsr	r3, fp, #31
   15898:	adds	sl, sl, sl
   1589c:	adc	fp, fp, fp
   158a0:	cmp	r3, #0
   158a4:	beq	15840 <__assert_fail@plt+0x4740>
   158a8:	mov	r8, #1
   158ac:	mvn	sl, #0
   158b0:	mvn	fp, #0
   158b4:	b	15840 <__assert_fail@plt+0x4740>
   158b8:	mov	lr, #1
   158bc:	lsr	r3, fp, #23
   158c0:	cmp	r3, #0
   158c4:	bne	158a8 <__assert_fail@plt+0x47a8>
   158c8:	lsl	r3, fp, #9
   158cc:	orr	r3, r3, sl, lsr #23
   158d0:	lsl	r2, sl, #9
   158d4:	mov	sl, r2
   158d8:	mov	fp, r3
   158dc:	b	15840 <__assert_fail@plt+0x4740>
   158e0:	lsr	r3, fp, #22
   158e4:	cmp	r3, #0
   158e8:	bne	158a8 <__assert_fail@plt+0x47a8>
   158ec:	lsl	r3, fp, #10
   158f0:	orr	r3, r3, sl, lsr #22
   158f4:	lsl	r2, sl, #10
   158f8:	mov	sl, r2
   158fc:	mov	fp, r3
   15900:	b	15840 <__assert_fail@plt+0x4740>
   15904:	mov	r6, r0
   15908:	asr	r7, r0, #31
   1590c:	mov	r3, #0
   15910:	mov	ip, #6
   15914:	str	r3, [sp]
   15918:	strd	r4, [sp, #16]
   1591c:	b	1594c <__assert_fail@plt+0x484c>
   15920:	orrs	r3, r2, r3
   15924:	movne	r3, #1
   15928:	muleq	r3, sl, r7
   1592c:	strne	r3, [sp]
   15930:	mlaeq	r3, r6, fp, r3
   15934:	umulleq	sl, fp, sl, r6
   15938:	mvnne	sl, #0
   1593c:	addeq	fp, r3, fp
   15940:	mvnne	fp, #0
   15944:	subs	ip, ip, #1
   15948:	beq	15c90 <__assert_fail@plt+0x4b90>
   1594c:	cmp	fp, #0
   15950:	mov	r2, #0
   15954:	mov	r3, #0
   15958:	beq	15920 <__assert_fail@plt+0x4820>
   1595c:	umull	r0, r1, sl, r6
   15960:	mov	r5, #0
   15964:	mov	r0, r1
   15968:	mov	r1, r5
   1596c:	umlal	r0, r1, fp, r6
   15970:	cmp	r1, r5
   15974:	movne	r2, #1
   15978:	movne	r3, #0
   1597c:	b	15920 <__assert_fail@plt+0x4820>
   15980:	mov	r6, r0
   15984:	asr	r7, r0, #31
   15988:	mov	r3, #0
   1598c:	mov	ip, #7
   15990:	str	r3, [sp]
   15994:	strd	r4, [sp, #16]
   15998:	b	159c8 <__assert_fail@plt+0x48c8>
   1599c:	orrs	r3, r2, r3
   159a0:	movne	r3, #1
   159a4:	muleq	r3, sl, r7
   159a8:	strne	r3, [sp]
   159ac:	mlaeq	r3, r6, fp, r3
   159b0:	umulleq	sl, fp, sl, r6
   159b4:	mvnne	sl, #0
   159b8:	addeq	fp, r3, fp
   159bc:	mvnne	fp, #0
   159c0:	subs	ip, ip, #1
   159c4:	beq	15c90 <__assert_fail@plt+0x4b90>
   159c8:	cmp	fp, #0
   159cc:	mov	r2, #0
   159d0:	mov	r3, #0
   159d4:	beq	1599c <__assert_fail@plt+0x489c>
   159d8:	umull	r0, r1, sl, r6
   159dc:	mov	r5, #0
   159e0:	mov	r0, r1
   159e4:	mov	r1, r5
   159e8:	umlal	r0, r1, fp, r6
   159ec:	cmp	r1, r5
   159f0:	movne	r2, #1
   159f4:	movne	r3, #0
   159f8:	b	1599c <__assert_fail@plt+0x489c>
   159fc:	asr	r1, r0, #31
   15a00:	cmp	fp, #0
   15a04:	mov	r6, #0
   15a08:	mov	r7, #0
   15a0c:	bne	15ca8 <__assert_fail@plt+0x4ba8>
   15a10:	orrs	r3, r6, r7
   15a14:	bne	158a8 <__assert_fail@plt+0x47a8>
   15a18:	mul	r3, sl, r1
   15a1c:	mla	r3, r0, fp, r3
   15a20:	umull	sl, fp, sl, r0
   15a24:	add	fp, r3, fp
   15a28:	b	15840 <__assert_fail@plt+0x4740>
   15a2c:	mov	r6, r0
   15a30:	asr	r7, r0, #31
   15a34:	mov	r3, #0
   15a38:	mov	ip, #8
   15a3c:	str	r3, [sp]
   15a40:	strd	r4, [sp, #16]
   15a44:	b	15a74 <__assert_fail@plt+0x4974>
   15a48:	orrs	r3, r2, r3
   15a4c:	movne	r3, #1
   15a50:	muleq	r3, sl, r7
   15a54:	strne	r3, [sp]
   15a58:	mlaeq	r3, r6, fp, r3
   15a5c:	umulleq	sl, fp, sl, r6
   15a60:	mvnne	sl, #0
   15a64:	addeq	fp, r3, fp
   15a68:	mvnne	fp, #0
   15a6c:	subs	ip, ip, #1
   15a70:	beq	15c90 <__assert_fail@plt+0x4b90>
   15a74:	cmp	fp, #0
   15a78:	mov	r2, #0
   15a7c:	mov	r3, #0
   15a80:	beq	15a48 <__assert_fail@plt+0x4948>
   15a84:	umull	r0, r1, sl, r6
   15a88:	mov	r5, #0
   15a8c:	mov	r0, r1
   15a90:	mov	r1, r5
   15a94:	umlal	r0, r1, fp, r6
   15a98:	cmp	r1, r5
   15a9c:	movne	r2, #1
   15aa0:	movne	r3, #0
   15aa4:	b	15a48 <__assert_fail@plt+0x4948>
   15aa8:	mov	r6, r0
   15aac:	asr	r7, r0, #31
   15ab0:	mov	r3, #0
   15ab4:	mov	ip, #4
   15ab8:	str	r3, [sp]
   15abc:	strd	r4, [sp, #16]
   15ac0:	b	15af0 <__assert_fail@plt+0x49f0>
   15ac4:	orrs	r3, r2, r3
   15ac8:	movne	r3, #1
   15acc:	muleq	r3, sl, r7
   15ad0:	strne	r3, [sp]
   15ad4:	mlaeq	r3, r6, fp, r3
   15ad8:	umulleq	sl, fp, sl, r6
   15adc:	mvnne	sl, #0
   15ae0:	addeq	fp, r3, fp
   15ae4:	mvnne	fp, #0
   15ae8:	subs	ip, ip, #1
   15aec:	beq	15c90 <__assert_fail@plt+0x4b90>
   15af0:	cmp	fp, #0
   15af4:	mov	r2, #0
   15af8:	mov	r3, #0
   15afc:	beq	15ac4 <__assert_fail@plt+0x49c4>
   15b00:	umull	r0, r1, sl, r6
   15b04:	mov	r5, #0
   15b08:	mov	r0, r1
   15b0c:	mov	r1, r5
   15b10:	umlal	r0, r1, fp, r6
   15b14:	cmp	r1, r5
   15b18:	movne	r2, #1
   15b1c:	movne	r3, #0
   15b20:	b	15ac4 <__assert_fail@plt+0x49c4>
   15b24:	mov	r6, r0
   15b28:	asr	r7, r0, #31
   15b2c:	mov	r3, #0
   15b30:	mov	ip, #5
   15b34:	str	r3, [sp]
   15b38:	strd	r4, [sp, #16]
   15b3c:	b	15b6c <__assert_fail@plt+0x4a6c>
   15b40:	orrs	r3, r2, r3
   15b44:	movne	r3, #1
   15b48:	muleq	r3, sl, r7
   15b4c:	strne	r3, [sp]
   15b50:	mlaeq	r3, r6, fp, r3
   15b54:	umulleq	sl, fp, sl, r6
   15b58:	mvnne	sl, #0
   15b5c:	addeq	fp, r3, fp
   15b60:	mvnne	fp, #0
   15b64:	subs	ip, ip, #1
   15b68:	beq	15c90 <__assert_fail@plt+0x4b90>
   15b6c:	cmp	fp, #0
   15b70:	mov	r2, #0
   15b74:	mov	r3, #0
   15b78:	beq	15b40 <__assert_fail@plt+0x4a40>
   15b7c:	umull	r0, r1, sl, r6
   15b80:	mov	r5, #0
   15b84:	mov	r0, r1
   15b88:	mov	r1, r5
   15b8c:	umlal	r0, r1, fp, r6
   15b90:	cmp	r1, r5
   15b94:	movne	r2, #1
   15b98:	movne	r3, #0
   15b9c:	b	15b40 <__assert_fail@plt+0x4a40>
   15ba0:	asr	r1, r0, #31
   15ba4:	cmp	fp, #0
   15ba8:	mov	r6, #0
   15bac:	mov	r7, #0
   15bb0:	bne	15d04 <__assert_fail@plt+0x4c04>
   15bb4:	orrs	r3, r6, r7
   15bb8:	bne	158a8 <__assert_fail@plt+0x47a8>
   15bbc:	umull	r2, r3, sl, r0
   15bc0:	mul	ip, sl, r1
   15bc4:	strd	r2, [sp]
   15bc8:	mla	r3, r0, fp, ip
   15bcc:	ldr	r2, [sp, #4]
   15bd0:	mov	sl, r6
   15bd4:	add	ip, r3, r2
   15bd8:	cmp	ip, #0
   15bdc:	mov	fp, r7
   15be0:	str	ip, [sp, #4]
   15be4:	bne	15d2c <__assert_fail@plt+0x4c2c>
   15be8:	orrs	r3, sl, fp
   15bec:	bne	158a8 <__assert_fail@plt+0x47a8>
   15bf0:	ldrd	r6, [sp]
   15bf4:	mul	r3, r6, r1
   15bf8:	umull	sl, fp, r6, r0
   15bfc:	mla	r0, r0, r7, r3
   15c00:	add	fp, r0, fp
   15c04:	b	15840 <__assert_fail@plt+0x4740>
   15c08:	mov	lr, #1
   15c0c:	b	15840 <__assert_fail@plt+0x4740>
   15c10:	mov	lr, #1
   15c14:	mov	r6, #1024	; 0x400
   15c18:	mov	r7, #0
   15c1c:	b	15988 <__assert_fail@plt+0x4888>
   15c20:	mov	lr, #1
   15c24:	mov	r6, #1024	; 0x400
   15c28:	mov	r7, #0
   15c2c:	b	15a34 <__assert_fail@plt+0x4934>
   15c30:	mov	lr, #1
   15c34:	mov	r6, #1024	; 0x400
   15c38:	mov	r7, #0
   15c3c:	b	15ab0 <__assert_fail@plt+0x49b0>
   15c40:	mov	lr, #1
   15c44:	mov	r6, #1024	; 0x400
   15c48:	mov	r7, #0
   15c4c:	b	15b2c <__assert_fail@plt+0x4a2c>
   15c50:	mov	lr, #1
   15c54:	mov	r0, #1024	; 0x400
   15c58:	mov	r1, #0
   15c5c:	b	15ba4 <__assert_fail@plt+0x4aa4>
   15c60:	mov	lr, #1
   15c64:	mov	r0, #1024	; 0x400
   15c68:	mov	r1, #0
   15c6c:	b	15a00 <__assert_fail@plt+0x4900>
   15c70:	mov	lr, #1
   15c74:	mov	r0, #1024	; 0x400
   15c78:	mov	r1, #0
   15c7c:	b	157b0 <__assert_fail@plt+0x46b0>
   15c80:	mov	lr, #1
   15c84:	mov	r6, #1024	; 0x400
   15c88:	mov	r7, #0
   15c8c:	b	1590c <__assert_fail@plt+0x480c>
   15c90:	ldrd	r4, [sp, #16]
   15c94:	ldr	r3, [sp]
   15c98:	b	1583c <__assert_fail@plt+0x473c>
   15c9c:	mov	lr, #2
   15ca0:	mov	r0, #1000	; 0x3e8
   15ca4:	b	156c4 <__assert_fail@plt+0x45c4>
   15ca8:	umull	r2, r3, sl, r0
   15cac:	str	r3, [sp]
   15cb0:	mov	r3, #0
   15cb4:	str	r3, [sp, #4]
   15cb8:	ldrd	r2, [sp]
   15cbc:	umlal	r2, r3, fp, r0
   15cc0:	cmp	r3, #0
   15cc4:	movne	r6, #1
   15cc8:	movne	r7, #0
   15ccc:	b	15a10 <__assert_fail@plt+0x4910>
   15cd0:	mov	r3, #1
   15cd4:	mvn	sl, #0
   15cd8:	mvn	fp, #0
   15cdc:	b	1583c <__assert_fail@plt+0x473c>
   15ce0:	umull	r2, r3, sl, r0
   15ce4:	mov	r7, #0
   15ce8:	mov	r6, r3
   15cec:	umlal	r6, r7, fp, r0
   15cf0:	cmp	r7, #0
   15cf4:	movne	r2, #1
   15cf8:	movne	r3, #0
   15cfc:	strdne	r2, [sp]
   15d00:	b	157c4 <__assert_fail@plt+0x46c4>
   15d04:	umull	r2, r3, sl, r0
   15d08:	str	r3, [sp]
   15d0c:	mov	r3, #0
   15d10:	str	r3, [sp, #4]
   15d14:	ldrd	r2, [sp]
   15d18:	umlal	r2, r3, fp, r0
   15d1c:	cmp	r3, #0
   15d20:	movne	r6, #1
   15d24:	movne	r7, #0
   15d28:	b	15bb4 <__assert_fail@plt+0x4ab4>
   15d2c:	ldr	r3, [sp]
   15d30:	mov	r7, #0
   15d34:	umull	r2, r3, r3, r0
   15d38:	mov	r6, r3
   15d3c:	umlal	r6, r7, ip, r0
   15d40:	cmp	r7, #0
   15d44:	movne	sl, #1
   15d48:	movne	fp, #0
   15d4c:	b	15be8 <__assert_fail@plt+0x4ae8>
   15d50:	ldr	r3, [sp]
   15d54:	mov	r7, #0
   15d58:	umull	r2, r3, r3, r0
   15d5c:	mov	r6, r3
   15d60:	umlal	r6, r7, ip, r0
   15d64:	cmp	r7, #0
   15d68:	movne	sl, #1
   15d6c:	movne	fp, #0
   15d70:	b	1581c <__assert_fail@plt+0x471c>
   15d74:	umull	r2, r3, r6, r0
   15d78:	str	r3, [sp]
   15d7c:	mov	r3, #0
   15d80:	str	r3, [sp, #4]
   15d84:	ldrd	r2, [sp]
   15d88:	umlal	r2, r3, ip, r0
   15d8c:	cmp	r3, #0
   15d90:	movne	sl, #1
   15d94:	movne	fp, #0
   15d98:	b	157f0 <__assert_fail@plt+0x46f0>
   15d9c:	bl	10efc <__stack_chk_fail@plt>
   15da0:	ldr	r3, [pc, #16]	; 15db8 <__assert_fail@plt+0x4cb8>
   15da4:	mov	r2, #96	; 0x60
   15da8:	ldr	r1, [pc, #12]	; 15dbc <__assert_fail@plt+0x4cbc>
   15dac:	ldr	r0, [pc, #12]	; 15dc0 <__assert_fail@plt+0x4cc0>
   15db0:	bl	11100 <__assert_fail@plt>
   15db4:	andeq	r7, r2, r8, lsl #30
   15db8:	andeq	r7, r1, r8, asr #9
   15dbc:	ldrdeq	r7, [r1], -r4
   15dc0:	andeq	r7, r1, r4, ror #9
   15dc4:	push	{r4, r5, lr}
   15dc8:	sub	sp, sp, #12
   15dcc:	mov	r4, r0
   15dd0:	bl	1104c <fileno@plt>
   15dd4:	cmp	r0, #0
   15dd8:	mov	r0, r4
   15ddc:	blt	15e58 <__assert_fail@plt+0x4d58>
   15de0:	bl	10fb0 <__freading@plt>
   15de4:	cmp	r0, #0
   15de8:	bne	15e24 <__assert_fail@plt+0x4d24>
   15dec:	mov	r0, r4
   15df0:	bl	15e64 <__assert_fail@plt+0x4d64>
   15df4:	cmp	r0, #0
   15df8:	beq	15e54 <__assert_fail@plt+0x4d54>
   15dfc:	bl	11004 <__errno_location@plt>
   15e00:	mov	r5, r0
   15e04:	mov	r0, r4
   15e08:	ldr	r4, [r5]
   15e0c:	bl	11064 <fclose@plt>
   15e10:	cmp	r4, #0
   15e14:	mvnne	r0, #0
   15e18:	strne	r4, [r5]
   15e1c:	add	sp, sp, #12
   15e20:	pop	{r4, r5, pc}
   15e24:	mov	r0, r4
   15e28:	bl	1104c <fileno@plt>
   15e2c:	mov	r3, #1
   15e30:	str	r3, [sp]
   15e34:	mov	r2, #0
   15e38:	mov	r3, #0
   15e3c:	bl	10f44 <lseek64@plt>
   15e40:	mvn	r3, #0
   15e44:	mvn	r2, #0
   15e48:	cmp	r1, r3
   15e4c:	cmpeq	r0, r2
   15e50:	bne	15dec <__assert_fail@plt+0x4cec>
   15e54:	mov	r0, r4
   15e58:	add	sp, sp, #12
   15e5c:	pop	{r4, r5, lr}
   15e60:	b	11064 <fclose@plt>
   15e64:	push	{r4, lr}
   15e68:	subs	r4, r0, #0
   15e6c:	sub	sp, sp, #8
   15e70:	beq	15e8c <__assert_fail@plt+0x4d8c>
   15e74:	bl	10fb0 <__freading@plt>
   15e78:	cmp	r0, #0
   15e7c:	beq	15e8c <__assert_fail@plt+0x4d8c>
   15e80:	ldr	r3, [r4]
   15e84:	tst	r3, #256	; 0x100
   15e88:	bne	15e9c <__assert_fail@plt+0x4d9c>
   15e8c:	mov	r0, r4
   15e90:	add	sp, sp, #8
   15e94:	pop	{r4, lr}
   15e98:	b	10e90 <fflush@plt>
   15e9c:	mov	r3, #1
   15ea0:	str	r3, [sp]
   15ea4:	mov	r2, #0
   15ea8:	mov	r3, #0
   15eac:	mov	r0, r4
   15eb0:	bl	15ec4 <__assert_fail@plt+0x4dc4>
   15eb4:	mov	r0, r4
   15eb8:	add	sp, sp, #8
   15ebc:	pop	{r4, lr}
   15ec0:	b	10e90 <fflush@plt>
   15ec4:	push	{r4, r5, r6, r7, r8, lr}
   15ec8:	sub	sp, sp, #8
   15ecc:	ldmib	r0, {ip, lr}
   15ed0:	mov	r4, r0
   15ed4:	ldr	r5, [sp, #32]
   15ed8:	cmp	lr, ip
   15edc:	beq	15ef4 <__assert_fail@plt+0x4df4>
   15ee0:	str	r5, [sp, #32]
   15ee4:	mov	r0, r4
   15ee8:	add	sp, sp, #8
   15eec:	pop	{r4, r5, r6, r7, r8, lr}
   15ef0:	b	11070 <fseeko64@plt>
   15ef4:	ldr	lr, [r0, #20]
   15ef8:	ldr	ip, [r0, #16]
   15efc:	cmp	lr, ip
   15f00:	bne	15ee0 <__assert_fail@plt+0x4de0>
   15f04:	ldr	r8, [r0, #36]	; 0x24
   15f08:	cmp	r8, #0
   15f0c:	bne	15ee0 <__assert_fail@plt+0x4de0>
   15f10:	mov	r6, r2
   15f14:	mov	r7, r3
   15f18:	bl	1104c <fileno@plt>
   15f1c:	mov	r2, r6
   15f20:	mov	r3, r7
   15f24:	str	r5, [sp]
   15f28:	bl	10f44 <lseek64@plt>
   15f2c:	mvn	r3, #0
   15f30:	mvn	r2, #0
   15f34:	cmp	r1, r3
   15f38:	cmpeq	r0, r2
   15f3c:	beq	15f5c <__assert_fail@plt+0x4e5c>
   15f40:	ldr	r3, [r4]
   15f44:	strd	r0, [r4, #80]	; 0x50
   15f48:	mov	r0, r8
   15f4c:	bic	r3, r3, #16
   15f50:	str	r3, [r4]
   15f54:	add	sp, sp, #8
   15f58:	pop	{r4, r5, r6, r7, r8, pc}
   15f5c:	mvn	r0, #0
   15f60:	b	15f54 <__assert_fail@plt+0x4e54>
   15f64:	push	{r4, r5, r6, r7, r8, lr}
   15f68:	subs	r7, r0, #0
   15f6c:	ldr	r5, [pc, #108]	; 15fe0 <__assert_fail@plt+0x4ee0>
   15f70:	sub	sp, sp, #8
   15f74:	mov	r8, r1
   15f78:	ldr	r1, [r5]
   15f7c:	moveq	r7, sp
   15f80:	str	r1, [sp, #4]
   15f84:	mov	r0, r7
   15f88:	mov	r1, r8
   15f8c:	mov	r6, r2
   15f90:	bl	10f68 <mbrtowc@plt>
   15f94:	cmp	r6, #0
   15f98:	cmnne	r0, #3
   15f9c:	mov	r4, r0
   15fa0:	bhi	15fc0 <__assert_fail@plt+0x4ec0>
   15fa4:	ldr	r2, [sp, #4]
   15fa8:	ldr	r3, [r5]
   15fac:	mov	r0, r4
   15fb0:	cmp	r2, r3
   15fb4:	bne	15fdc <__assert_fail@plt+0x4edc>
   15fb8:	add	sp, sp, #8
   15fbc:	pop	{r4, r5, r6, r7, r8, pc}
   15fc0:	mov	r0, #0
   15fc4:	bl	1637c <__assert_fail@plt+0x527c>
   15fc8:	cmp	r0, #0
   15fcc:	moveq	r4, #1
   15fd0:	ldrbeq	r3, [r8]
   15fd4:	streq	r3, [r7]
   15fd8:	b	15fa4 <__assert_fail@plt+0x4ea4>
   15fdc:	bl	10efc <__stack_chk_fail@plt>
   15fe0:	andeq	r7, r2, r8, lsl #30
   15fe4:	mov	r0, #1
   15fe8:	b	118f4 <__assert_fail@plt+0x7f4>
   15fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff0:	mov	r5, r1
   15ff4:	sub	sp, sp, #12
   15ff8:	mov	r4, r2
   15ffc:	str	r2, [sp]
   16000:	mov	r7, r3
   16004:	mov	sl, r0
   16008:	bl	10fec <strlen@plt>
   1600c:	ldr	fp, [r5]
   16010:	cmp	fp, #0
   16014:	beq	160d8 <__assert_fail@plt+0x4fd8>
   16018:	mov	r6, #0
   1601c:	mov	r8, r0
   16020:	str	r6, [sp, #4]
   16024:	mvn	r9, #0
   16028:	b	16054 <__assert_fail@plt+0x4f54>
   1602c:	bl	10ee4 <memcmp@plt>
   16030:	ldr	r3, [sp, #4]
   16034:	cmp	r0, #0
   16038:	movne	r3, #1
   1603c:	str	r3, [sp, #4]
   16040:	ldr	fp, [r5, #4]!
   16044:	add	r6, r6, #1
   16048:	cmp	fp, #0
   1604c:	add	r4, r4, r7
   16050:	beq	160b0 <__assert_fail@plt+0x4fb0>
   16054:	mov	r2, r8
   16058:	mov	r1, sl
   1605c:	mov	r0, fp
   16060:	bl	110dc <strncmp@plt>
   16064:	cmp	r0, #0
   16068:	mov	r0, fp
   1606c:	bne	16040 <__assert_fail@plt+0x4f40>
   16070:	bl	10fec <strlen@plt>
   16074:	ldr	r3, [sp]
   16078:	mov	r2, r7
   1607c:	mov	r1, r4
   16080:	cmp	r0, r8
   16084:	mla	r0, r7, r9, r3
   16088:	beq	160c8 <__assert_fail@plt+0x4fc8>
   1608c:	cmn	r9, #1
   16090:	moveq	r9, r6
   16094:	beq	16040 <__assert_fail@plt+0x4f40>
   16098:	ldr	r3, [sp]
   1609c:	cmp	r3, #0
   160a0:	bne	1602c <__assert_fail@plt+0x4f2c>
   160a4:	mov	r3, #1
   160a8:	str	r3, [sp, #4]
   160ac:	b	16040 <__assert_fail@plt+0x4f40>
   160b0:	ldr	r3, [sp, #4]
   160b4:	cmp	r3, #0
   160b8:	mvnne	r9, #1
   160bc:	mov	r0, r9
   160c0:	add	sp, sp, #12
   160c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160c8:	mov	r9, r6
   160cc:	mov	r0, r9
   160d0:	add	sp, sp, #12
   160d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160d8:	mvn	r9, #0
   160dc:	b	160bc <__assert_fail@plt+0x4fbc>
   160e0:	cmn	r2, #1
   160e4:	push	{r4, r5, r6, lr}
   160e8:	mov	r2, #5
   160ec:	sub	sp, sp, #8
   160f0:	mov	r5, r1
   160f4:	mov	r6, r0
   160f8:	ldreq	r1, [pc, #76]	; 1614c <__assert_fail@plt+0x504c>
   160fc:	ldrne	r1, [pc, #76]	; 16150 <__assert_fail@plt+0x5050>
   16100:	mov	r0, #0
   16104:	bl	10ef0 <dcgettext@plt>
   16108:	mov	r2, r5
   1610c:	mov	r1, #8
   16110:	mov	r4, r0
   16114:	mov	r0, #0
   16118:	bl	14800 <__assert_fail@plt+0x3700>
   1611c:	mov	r1, r6
   16120:	mov	r5, r0
   16124:	mov	r0, #1
   16128:	bl	14b4c <__assert_fail@plt+0x3a4c>
   1612c:	mov	r1, #0
   16130:	mov	r3, r5
   16134:	mov	r2, r4
   16138:	str	r0, [sp]
   1613c:	mov	r0, r1
   16140:	bl	10f74 <error@plt>
   16144:	add	sp, sp, #8
   16148:	pop	{r4, r5, r6, pc}
   1614c:	andeq	r7, r1, ip, lsl #10
   16150:	andeq	r7, r1, r8, lsr #10
   16154:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16158:	mov	r6, r0
   1615c:	ldr	sl, [pc, #224]	; 16244 <__assert_fail@plt+0x5144>
   16160:	mov	r4, r1
   16164:	mov	r7, r2
   16168:	ldr	r1, [pc, #216]	; 16248 <__assert_fail@plt+0x5148>
   1616c:	mov	r2, #5
   16170:	mov	r0, #0
   16174:	bl	10ef0 <dcgettext@plt>
   16178:	ldr	r1, [sl]
   1617c:	bl	10e54 <fputs_unlocked@plt>
   16180:	ldr	fp, [r6]
   16184:	cmp	fp, #0
   16188:	movne	r9, #0
   1618c:	movne	r5, r9
   16190:	bne	161cc <__assert_fail@plt+0x50cc>
   16194:	b	16210 <__assert_fail@plt+0x5110>
   16198:	mov	r0, fp
   1619c:	bl	14b5c <__assert_fail@plt+0x3a5c>
   161a0:	ldr	r2, [pc, #164]	; 1624c <__assert_fail@plt+0x514c>
   161a4:	mov	r1, #1
   161a8:	mov	r9, r4
   161ac:	mov	r3, r0
   161b0:	mov	r0, r8
   161b4:	bl	11058 <__fprintf_chk@plt>
   161b8:	ldr	fp, [r6, #4]!
   161bc:	add	r5, r5, #1
   161c0:	cmp	fp, #0
   161c4:	add	r4, r4, r7
   161c8:	beq	16210 <__assert_fail@plt+0x5110>
   161cc:	cmp	r5, #0
   161d0:	mov	r1, r4
   161d4:	mov	r2, r7
   161d8:	mov	r0, r9
   161dc:	ldr	r8, [sl]
   161e0:	beq	16198 <__assert_fail@plt+0x5098>
   161e4:	bl	10ee4 <memcmp@plt>
   161e8:	cmp	r0, #0
   161ec:	bne	16198 <__assert_fail@plt+0x5098>
   161f0:	mov	r0, fp
   161f4:	bl	14b5c <__assert_fail@plt+0x3a5c>
   161f8:	ldr	r2, [pc, #80]	; 16250 <__assert_fail@plt+0x5150>
   161fc:	mov	r1, #1
   16200:	mov	r3, r0
   16204:	mov	r0, r8
   16208:	bl	11058 <__fprintf_chk@plt>
   1620c:	b	161b8 <__assert_fail@plt+0x50b8>
   16210:	ldr	r0, [sl]
   16214:	ldr	r3, [r0, #20]
   16218:	ldr	r2, [r0, #24]
   1621c:	cmp	r3, r2
   16220:	bcs	16238 <__assert_fail@plt+0x5138>
   16224:	add	r1, r3, #1
   16228:	mov	r2, #10
   1622c:	str	r1, [r0, #20]
   16230:	strb	r2, [r3]
   16234:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16238:	mov	r1, #10
   1623c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16240:	b	11088 <__overflow@plt>
   16244:	andeq	r8, r2, r0, ror #2
   16248:	andeq	r7, r1, r8, asr #10
   1624c:	andeq	r7, r1, r0, ror #10
   16250:	andeq	r7, r1, r8, ror #10
   16254:	push	{r4, r5, r6, r7, r8, lr}
   16258:	mov	r6, r1
   1625c:	mov	r4, r2
   16260:	mov	r5, r3
   16264:	mov	r7, r0
   16268:	ldr	r3, [sp, #24]
   1626c:	mov	r2, r5
   16270:	mov	r1, r4
   16274:	mov	r0, r6
   16278:	bl	15fec <__assert_fail@plt+0x4eec>
   1627c:	cmp	r0, #0
   16280:	popge	{r4, r5, r6, r7, r8, pc}
   16284:	mov	r2, r0
   16288:	mov	r1, r6
   1628c:	mov	r0, r7
   16290:	bl	160e0 <__assert_fail@plt+0x4fe0>
   16294:	mov	r0, r4
   16298:	ldr	r2, [sp, #24]
   1629c:	mov	r1, r5
   162a0:	bl	16154 <__assert_fail@plt+0x5054>
   162a4:	ldr	r3, [sp, #28]
   162a8:	blx	r3
   162ac:	mvn	r0, #0
   162b0:	pop	{r4, r5, r6, r7, r8, pc}
   162b4:	push	{r4, r5, r6, r7, r8, lr}
   162b8:	ldr	r7, [r1]
   162bc:	cmp	r7, #0
   162c0:	beq	16300 <__assert_fail@plt+0x5200>
   162c4:	mov	r6, r3
   162c8:	mov	r8, r0
   162cc:	mov	r4, r2
   162d0:	mov	r5, r1
   162d4:	b	162e4 <__assert_fail@plt+0x51e4>
   162d8:	ldr	r7, [r5, #4]!
   162dc:	cmp	r7, #0
   162e0:	beq	16300 <__assert_fail@plt+0x5200>
   162e4:	mov	r1, r4
   162e8:	mov	r2, r6
   162ec:	mov	r0, r8
   162f0:	bl	10ee4 <memcmp@plt>
   162f4:	add	r4, r4, r6
   162f8:	cmp	r0, #0
   162fc:	bne	162d8 <__assert_fail@plt+0x51d8>
   16300:	mov	r0, r7
   16304:	pop	{r4, r5, r6, r7, r8, pc}
   16308:	push	{r4, r5, r6, lr}
   1630c:	mov	r4, r0
   16310:	bl	10f5c <__fpending@plt>
   16314:	ldr	r5, [r4]
   16318:	and	r5, r5, #32
   1631c:	mov	r6, r0
   16320:	mov	r0, r4
   16324:	bl	15dc4 <__assert_fail@plt+0x4cc4>
   16328:	cmp	r5, #0
   1632c:	mov	r4, r0
   16330:	bne	1635c <__assert_fail@plt+0x525c>
   16334:	cmp	r0, #0
   16338:	beq	16354 <__assert_fail@plt+0x5254>
   1633c:	cmp	r6, #0
   16340:	bne	16374 <__assert_fail@plt+0x5274>
   16344:	bl	11004 <__errno_location@plt>
   16348:	ldr	r4, [r0]
   1634c:	subs	r4, r4, #9
   16350:	mvnne	r4, #0
   16354:	mov	r0, r4
   16358:	pop	{r4, r5, r6, pc}
   1635c:	cmp	r0, #0
   16360:	bne	16374 <__assert_fail@plt+0x5274>
   16364:	bl	11004 <__errno_location@plt>
   16368:	str	r4, [r0]
   1636c:	mvn	r4, #0
   16370:	b	16354 <__assert_fail@plt+0x5254>
   16374:	mvn	r4, #0
   16378:	b	16354 <__assert_fail@plt+0x5254>
   1637c:	push	{r4, lr}
   16380:	mov	r1, #0
   16384:	bl	11094 <setlocale@plt>
   16388:	subs	r4, r0, #0
   1638c:	beq	163b8 <__assert_fail@plt+0x52b8>
   16390:	ldr	r1, [pc, #40]	; 163c0 <__assert_fail@plt+0x52c0>
   16394:	bl	10e6c <strcmp@plt>
   16398:	cmp	r0, #0
   1639c:	popeq	{r4, pc}
   163a0:	mov	r0, r4
   163a4:	ldr	r1, [pc, #24]	; 163c4 <__assert_fail@plt+0x52c4>
   163a8:	bl	10e6c <strcmp@plt>
   163ac:	adds	r0, r0, #0
   163b0:	movne	r0, #1
   163b4:	pop	{r4, pc}
   163b8:	mov	r0, #1
   163bc:	pop	{r4, pc}
   163c0:	andeq	r7, r1, r0, ror r5
   163c4:	andeq	r7, r1, r4, ror r5
   163c8:	push	{r4, lr}
   163cc:	mov	r0, #14
   163d0:	bl	110ac <nl_langinfo@plt>
   163d4:	cmp	r0, #0
   163d8:	beq	163f0 <__assert_fail@plt+0x52f0>
   163dc:	ldrb	r2, [r0]
   163e0:	ldr	r3, [pc, #16]	; 163f8 <__assert_fail@plt+0x52f8>
   163e4:	cmp	r2, #0
   163e8:	moveq	r0, r3
   163ec:	pop	{r4, pc}
   163f0:	ldr	r0, [pc]	; 163f8 <__assert_fail@plt+0x52f8>
   163f4:	pop	{r4, pc}
   163f8:	andeq	r7, r1, ip, ror r5
   163fc:	subs	r2, r1, #1
   16400:	bxeq	lr
   16404:	bcc	165dc <__assert_fail@plt+0x54dc>
   16408:	cmp	r0, r1
   1640c:	bls	165c0 <__assert_fail@plt+0x54c0>
   16410:	tst	r1, r2
   16414:	beq	165cc <__assert_fail@plt+0x54cc>
   16418:	clz	r3, r0
   1641c:	clz	r2, r1
   16420:	sub	r3, r2, r3
   16424:	rsbs	r3, r3, #31
   16428:	addne	r3, r3, r3, lsl #1
   1642c:	mov	r2, #0
   16430:	addne	pc, pc, r3, lsl #2
   16434:	nop			; (mov r0, r0)
   16438:	cmp	r0, r1, lsl #31
   1643c:	adc	r2, r2, r2
   16440:	subcs	r0, r0, r1, lsl #31
   16444:	cmp	r0, r1, lsl #30
   16448:	adc	r2, r2, r2
   1644c:	subcs	r0, r0, r1, lsl #30
   16450:	cmp	r0, r1, lsl #29
   16454:	adc	r2, r2, r2
   16458:	subcs	r0, r0, r1, lsl #29
   1645c:	cmp	r0, r1, lsl #28
   16460:	adc	r2, r2, r2
   16464:	subcs	r0, r0, r1, lsl #28
   16468:	cmp	r0, r1, lsl #27
   1646c:	adc	r2, r2, r2
   16470:	subcs	r0, r0, r1, lsl #27
   16474:	cmp	r0, r1, lsl #26
   16478:	adc	r2, r2, r2
   1647c:	subcs	r0, r0, r1, lsl #26
   16480:	cmp	r0, r1, lsl #25
   16484:	adc	r2, r2, r2
   16488:	subcs	r0, r0, r1, lsl #25
   1648c:	cmp	r0, r1, lsl #24
   16490:	adc	r2, r2, r2
   16494:	subcs	r0, r0, r1, lsl #24
   16498:	cmp	r0, r1, lsl #23
   1649c:	adc	r2, r2, r2
   164a0:	subcs	r0, r0, r1, lsl #23
   164a4:	cmp	r0, r1, lsl #22
   164a8:	adc	r2, r2, r2
   164ac:	subcs	r0, r0, r1, lsl #22
   164b0:	cmp	r0, r1, lsl #21
   164b4:	adc	r2, r2, r2
   164b8:	subcs	r0, r0, r1, lsl #21
   164bc:	cmp	r0, r1, lsl #20
   164c0:	adc	r2, r2, r2
   164c4:	subcs	r0, r0, r1, lsl #20
   164c8:	cmp	r0, r1, lsl #19
   164cc:	adc	r2, r2, r2
   164d0:	subcs	r0, r0, r1, lsl #19
   164d4:	cmp	r0, r1, lsl #18
   164d8:	adc	r2, r2, r2
   164dc:	subcs	r0, r0, r1, lsl #18
   164e0:	cmp	r0, r1, lsl #17
   164e4:	adc	r2, r2, r2
   164e8:	subcs	r0, r0, r1, lsl #17
   164ec:	cmp	r0, r1, lsl #16
   164f0:	adc	r2, r2, r2
   164f4:	subcs	r0, r0, r1, lsl #16
   164f8:	cmp	r0, r1, lsl #15
   164fc:	adc	r2, r2, r2
   16500:	subcs	r0, r0, r1, lsl #15
   16504:	cmp	r0, r1, lsl #14
   16508:	adc	r2, r2, r2
   1650c:	subcs	r0, r0, r1, lsl #14
   16510:	cmp	r0, r1, lsl #13
   16514:	adc	r2, r2, r2
   16518:	subcs	r0, r0, r1, lsl #13
   1651c:	cmp	r0, r1, lsl #12
   16520:	adc	r2, r2, r2
   16524:	subcs	r0, r0, r1, lsl #12
   16528:	cmp	r0, r1, lsl #11
   1652c:	adc	r2, r2, r2
   16530:	subcs	r0, r0, r1, lsl #11
   16534:	cmp	r0, r1, lsl #10
   16538:	adc	r2, r2, r2
   1653c:	subcs	r0, r0, r1, lsl #10
   16540:	cmp	r0, r1, lsl #9
   16544:	adc	r2, r2, r2
   16548:	subcs	r0, r0, r1, lsl #9
   1654c:	cmp	r0, r1, lsl #8
   16550:	adc	r2, r2, r2
   16554:	subcs	r0, r0, r1, lsl #8
   16558:	cmp	r0, r1, lsl #7
   1655c:	adc	r2, r2, r2
   16560:	subcs	r0, r0, r1, lsl #7
   16564:	cmp	r0, r1, lsl #6
   16568:	adc	r2, r2, r2
   1656c:	subcs	r0, r0, r1, lsl #6
   16570:	cmp	r0, r1, lsl #5
   16574:	adc	r2, r2, r2
   16578:	subcs	r0, r0, r1, lsl #5
   1657c:	cmp	r0, r1, lsl #4
   16580:	adc	r2, r2, r2
   16584:	subcs	r0, r0, r1, lsl #4
   16588:	cmp	r0, r1, lsl #3
   1658c:	adc	r2, r2, r2
   16590:	subcs	r0, r0, r1, lsl #3
   16594:	cmp	r0, r1, lsl #2
   16598:	adc	r2, r2, r2
   1659c:	subcs	r0, r0, r1, lsl #2
   165a0:	cmp	r0, r1, lsl #1
   165a4:	adc	r2, r2, r2
   165a8:	subcs	r0, r0, r1, lsl #1
   165ac:	cmp	r0, r1
   165b0:	adc	r2, r2, r2
   165b4:	subcs	r0, r0, r1
   165b8:	mov	r0, r2
   165bc:	bx	lr
   165c0:	moveq	r0, #1
   165c4:	movne	r0, #0
   165c8:	bx	lr
   165cc:	clz	r2, r1
   165d0:	rsb	r2, r2, #31
   165d4:	lsr	r0, r0, r2
   165d8:	bx	lr
   165dc:	cmp	r0, #0
   165e0:	mvnne	r0, #0
   165e4:	b	16a04 <__assert_fail@plt+0x5904>
   165e8:	cmp	r1, #0
   165ec:	beq	165dc <__assert_fail@plt+0x54dc>
   165f0:	push	{r0, r1, lr}
   165f4:	bl	163fc <__assert_fail@plt+0x52fc>
   165f8:	pop	{r1, r2, lr}
   165fc:	mul	r3, r2, r0
   16600:	sub	r1, r1, r3
   16604:	bx	lr
   16608:	eor	r1, r1, #-2147483648	; 0x80000000
   1660c:	b	16614 <__assert_fail@plt+0x5514>
   16610:	eor	r3, r3, #-2147483648	; 0x80000000
   16614:	push	{r4, r5, lr}
   16618:	lsl	r4, r1, #1
   1661c:	lsl	r5, r3, #1
   16620:	teq	r4, r5
   16624:	teqeq	r0, r2
   16628:	orrsne	ip, r4, r0
   1662c:	orrsne	ip, r5, r2
   16630:	mvnsne	ip, r4, asr #21
   16634:	mvnsne	ip, r5, asr #21
   16638:	beq	16824 <__assert_fail@plt+0x5724>
   1663c:	lsr	r4, r4, #21
   16640:	rsbs	r5, r4, r5, lsr #21
   16644:	rsblt	r5, r5, #0
   16648:	ble	16668 <__assert_fail@plt+0x5568>
   1664c:	add	r4, r4, r5
   16650:	eor	r2, r0, r2
   16654:	eor	r3, r1, r3
   16658:	eor	r0, r2, r0
   1665c:	eor	r1, r3, r1
   16660:	eor	r2, r0, r2
   16664:	eor	r3, r1, r3
   16668:	cmp	r5, #54	; 0x36
   1666c:	pophi	{r4, r5, pc}
   16670:	tst	r1, #-2147483648	; 0x80000000
   16674:	lsl	r1, r1, #12
   16678:	mov	ip, #1048576	; 0x100000
   1667c:	orr	r1, ip, r1, lsr #12
   16680:	beq	1668c <__assert_fail@plt+0x558c>
   16684:	rsbs	r0, r0, #0
   16688:	rsc	r1, r1, #0
   1668c:	tst	r3, #-2147483648	; 0x80000000
   16690:	lsl	r3, r3, #12
   16694:	orr	r3, ip, r3, lsr #12
   16698:	beq	166a4 <__assert_fail@plt+0x55a4>
   1669c:	rsbs	r2, r2, #0
   166a0:	rsc	r3, r3, #0
   166a4:	teq	r4, r5
   166a8:	beq	1680c <__assert_fail@plt+0x570c>
   166ac:	sub	r4, r4, #1
   166b0:	rsbs	lr, r5, #32
   166b4:	blt	166d0 <__assert_fail@plt+0x55d0>
   166b8:	lsl	ip, r2, lr
   166bc:	adds	r0, r0, r2, lsr r5
   166c0:	adc	r1, r1, #0
   166c4:	adds	r0, r0, r3, lsl lr
   166c8:	adcs	r1, r1, r3, asr r5
   166cc:	b	166ec <__assert_fail@plt+0x55ec>
   166d0:	sub	r5, r5, #32
   166d4:	add	lr, lr, #32
   166d8:	cmp	r2, #1
   166dc:	lsl	ip, r3, lr
   166e0:	orrcs	ip, ip, #2
   166e4:	adds	r0, r0, r3, asr r5
   166e8:	adcs	r1, r1, r3, asr #31
   166ec:	and	r5, r1, #-2147483648	; 0x80000000
   166f0:	bpl	16700 <__assert_fail@plt+0x5600>
   166f4:	rsbs	ip, ip, #0
   166f8:	rscs	r0, r0, #0
   166fc:	rsc	r1, r1, #0
   16700:	cmp	r1, #1048576	; 0x100000
   16704:	bcc	16744 <__assert_fail@plt+0x5644>
   16708:	cmp	r1, #2097152	; 0x200000
   1670c:	bcc	1672c <__assert_fail@plt+0x562c>
   16710:	lsrs	r1, r1, #1
   16714:	rrxs	r0, r0
   16718:	rrx	ip, ip
   1671c:	add	r4, r4, #1
   16720:	lsl	r2, r4, #21
   16724:	cmn	r2, #4194304	; 0x400000
   16728:	bcs	16884 <__assert_fail@plt+0x5784>
   1672c:	cmp	ip, #-2147483648	; 0x80000000
   16730:	lsrseq	ip, r0, #1
   16734:	adcs	r0, r0, #0
   16738:	adc	r1, r1, r4, lsl #20
   1673c:	orr	r1, r1, r5
   16740:	pop	{r4, r5, pc}
   16744:	lsls	ip, ip, #1
   16748:	adcs	r0, r0, r0
   1674c:	adc	r1, r1, r1
   16750:	tst	r1, #1048576	; 0x100000
   16754:	sub	r4, r4, #1
   16758:	bne	1672c <__assert_fail@plt+0x562c>
   1675c:	teq	r1, #0
   16760:	moveq	r1, r0
   16764:	moveq	r0, #0
   16768:	clz	r3, r1
   1676c:	addeq	r3, r3, #32
   16770:	sub	r3, r3, #11
   16774:	subs	r2, r3, #32
   16778:	bge	1679c <__assert_fail@plt+0x569c>
   1677c:	adds	r2, r2, #12
   16780:	ble	16798 <__assert_fail@plt+0x5698>
   16784:	add	ip, r2, #20
   16788:	rsb	r2, r2, #12
   1678c:	lsl	r0, r1, ip
   16790:	lsr	r1, r1, r2
   16794:	b	167ac <__assert_fail@plt+0x56ac>
   16798:	add	r2, r2, #20
   1679c:	rsble	ip, r2, #32
   167a0:	lsl	r1, r1, r2
   167a4:	orrle	r1, r1, r0, lsr ip
   167a8:	lslle	r0, r0, r2
   167ac:	subs	r4, r4, r3
   167b0:	addge	r1, r1, r4, lsl #20
   167b4:	orrge	r1, r1, r5
   167b8:	popge	{r4, r5, pc}
   167bc:	mvn	r4, r4
   167c0:	subs	r4, r4, #31
   167c4:	bge	16800 <__assert_fail@plt+0x5700>
   167c8:	adds	r4, r4, #12
   167cc:	bgt	167e8 <__assert_fail@plt+0x56e8>
   167d0:	add	r4, r4, #20
   167d4:	rsb	r2, r4, #32
   167d8:	lsr	r0, r0, r4
   167dc:	orr	r0, r0, r1, lsl r2
   167e0:	orr	r1, r5, r1, lsr r4
   167e4:	pop	{r4, r5, pc}
   167e8:	rsb	r4, r4, #12
   167ec:	rsb	r2, r4, #32
   167f0:	lsr	r0, r0, r2
   167f4:	orr	r0, r0, r1, lsl r4
   167f8:	mov	r1, r5
   167fc:	pop	{r4, r5, pc}
   16800:	lsr	r0, r1, r4
   16804:	mov	r1, r5
   16808:	pop	{r4, r5, pc}
   1680c:	teq	r4, #0
   16810:	eor	r3, r3, #1048576	; 0x100000
   16814:	eoreq	r1, r1, #1048576	; 0x100000
   16818:	addeq	r4, r4, #1
   1681c:	subne	r5, r5, #1
   16820:	b	166ac <__assert_fail@plt+0x55ac>
   16824:	mvns	ip, r4, asr #21
   16828:	mvnsne	ip, r5, asr #21
   1682c:	beq	16894 <__assert_fail@plt+0x5794>
   16830:	teq	r4, r5
   16834:	teqeq	r0, r2
   16838:	beq	1684c <__assert_fail@plt+0x574c>
   1683c:	orrs	ip, r4, r0
   16840:	moveq	r1, r3
   16844:	moveq	r0, r2
   16848:	pop	{r4, r5, pc}
   1684c:	teq	r1, r3
   16850:	movne	r1, #0
   16854:	movne	r0, #0
   16858:	popne	{r4, r5, pc}
   1685c:	lsrs	ip, r4, #21
   16860:	bne	16874 <__assert_fail@plt+0x5774>
   16864:	lsls	r0, r0, #1
   16868:	adcs	r1, r1, r1
   1686c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16870:	pop	{r4, r5, pc}
   16874:	adds	r4, r4, #4194304	; 0x400000
   16878:	addcc	r1, r1, #1048576	; 0x100000
   1687c:	popcc	{r4, r5, pc}
   16880:	and	r5, r1, #-2147483648	; 0x80000000
   16884:	orr	r1, r5, #2130706432	; 0x7f000000
   16888:	orr	r1, r1, #15728640	; 0xf00000
   1688c:	mov	r0, #0
   16890:	pop	{r4, r5, pc}
   16894:	mvns	ip, r4, asr #21
   16898:	movne	r1, r3
   1689c:	movne	r0, r2
   168a0:	mvnseq	ip, r5, asr #21
   168a4:	movne	r3, r1
   168a8:	movne	r2, r0
   168ac:	orrs	r4, r0, r1, lsl #12
   168b0:	orrseq	r5, r2, r3, lsl #12
   168b4:	teqeq	r1, r3
   168b8:	orrne	r1, r1, #524288	; 0x80000
   168bc:	pop	{r4, r5, pc}
   168c0:	teq	r0, #0
   168c4:	moveq	r1, #0
   168c8:	bxeq	lr
   168cc:	push	{r4, r5, lr}
   168d0:	mov	r4, #1024	; 0x400
   168d4:	add	r4, r4, #50	; 0x32
   168d8:	mov	r5, #0
   168dc:	mov	r1, #0
   168e0:	b	1675c <__assert_fail@plt+0x565c>
   168e4:	teq	r0, #0
   168e8:	moveq	r1, #0
   168ec:	bxeq	lr
   168f0:	push	{r4, r5, lr}
   168f4:	mov	r4, #1024	; 0x400
   168f8:	add	r4, r4, #50	; 0x32
   168fc:	ands	r5, r0, #-2147483648	; 0x80000000
   16900:	rsbmi	r0, r0, #0
   16904:	mov	r1, #0
   16908:	b	1675c <__assert_fail@plt+0x565c>
   1690c:	lsls	r2, r0, #1
   16910:	asr	r1, r2, #3
   16914:	rrx	r1, r1
   16918:	lsl	r0, r2, #28
   1691c:	andsne	r3, r2, #-16777216	; 0xff000000
   16920:	teqne	r3, #-16777216	; 0xff000000
   16924:	eorne	r1, r1, #939524096	; 0x38000000
   16928:	bxne	lr
   1692c:	bics	r2, r2, #-16777216	; 0xff000000
   16930:	bxeq	lr
   16934:	teq	r3, #-16777216	; 0xff000000
   16938:	orreq	r1, r1, #524288	; 0x80000
   1693c:	bxeq	lr
   16940:	push	{r4, r5, lr}
   16944:	mov	r4, #896	; 0x380
   16948:	and	r5, r1, #-2147483648	; 0x80000000
   1694c:	bic	r1, r1, #-2147483648	; 0x80000000
   16950:	b	1675c <__assert_fail@plt+0x565c>
   16954:	orrs	r2, r0, r1
   16958:	bxeq	lr
   1695c:	push	{r4, r5, lr}
   16960:	mov	r5, #0
   16964:	b	16984 <__assert_fail@plt+0x5884>
   16968:	orrs	r2, r0, r1
   1696c:	bxeq	lr
   16970:	push	{r4, r5, lr}
   16974:	ands	r5, r1, #-2147483648	; 0x80000000
   16978:	bpl	16984 <__assert_fail@plt+0x5884>
   1697c:	rsbs	r0, r0, #0
   16980:	rsc	r1, r1, #0
   16984:	mov	r4, #1024	; 0x400
   16988:	add	r4, r4, #50	; 0x32
   1698c:	lsrs	ip, r1, #22
   16990:	beq	16700 <__assert_fail@plt+0x5600>
   16994:	mov	r2, #3
   16998:	lsrs	ip, ip, #3
   1699c:	addne	r2, r2, #3
   169a0:	lsrs	ip, ip, #3
   169a4:	addne	r2, r2, #3
   169a8:	add	r2, r2, ip, lsr #3
   169ac:	rsb	r3, r2, #32
   169b0:	lsl	ip, r0, r3
   169b4:	lsr	r0, r0, r2
   169b8:	orr	r0, r0, r1, lsl r3
   169bc:	lsr	r1, r1, r2
   169c0:	add	r4, r4, r2
   169c4:	b	16700 <__assert_fail@plt+0x5600>
   169c8:	cmp	r3, #0
   169cc:	cmpeq	r2, #0
   169d0:	bne	169e8 <__assert_fail@plt+0x58e8>
   169d4:	cmp	r1, #0
   169d8:	cmpeq	r0, #0
   169dc:	mvnne	r1, #0
   169e0:	mvnne	r0, #0
   169e4:	b	16a04 <__assert_fail@plt+0x5904>
   169e8:	sub	sp, sp, #8
   169ec:	push	{sp, lr}
   169f0:	bl	16a58 <__assert_fail@plt+0x5958>
   169f4:	ldr	lr, [sp, #4]
   169f8:	add	sp, sp, #8
   169fc:	pop	{r2, r3}
   16a00:	bx	lr
   16a04:	push	{r1, lr}
   16a08:	mov	r0, #8
   16a0c:	bl	10e60 <raise@plt>
   16a10:	pop	{r1, pc}
   16a14:	andeq	r0, r0, r0
   16a18:	vmov	d6, r0, r1
   16a1c:	vldr	d7, [pc, #36]	; 16a48 <__assert_fail@plt+0x5948>
   16a20:	vldr	d5, [pc, #40]	; 16a50 <__assert_fail@plt+0x5950>
   16a24:	vmul.f64	d7, d6, d7
   16a28:	vcvt.u32.f64	s14, d7
   16a2c:	vcvt.f64.u32	d4, s14
   16a30:	vmov	r1, s14
   16a34:	vmls.f64	d6, d4, d5
   16a38:	vcvt.u32.f64	s15, d6
   16a3c:	vmov	r0, s15
   16a40:	bx	lr
   16a44:	nop			; (mov r0, r0)
   16a48:	andeq	r0, r0, r0
   16a4c:	ldclcc	0, cr0, [r0]
   16a50:	andeq	r0, r0, r0
   16a54:	mvnsmi	r0, r0
   16a58:	cmp	r1, r3
   16a5c:	cmpeq	r0, r2
   16a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a64:	mov	r4, r0
   16a68:	movcc	r0, #0
   16a6c:	mov	r5, r1
   16a70:	ldr	lr, [sp, #36]	; 0x24
   16a74:	movcc	r1, r0
   16a78:	bcc	16b74 <__assert_fail@plt+0x5a74>
   16a7c:	cmp	r3, #0
   16a80:	clzeq	ip, r2
   16a84:	clzne	ip, r3
   16a88:	addeq	ip, ip, #32
   16a8c:	cmp	r5, #0
   16a90:	clzeq	r1, r4
   16a94:	addeq	r1, r1, #32
   16a98:	clzne	r1, r5
   16a9c:	sub	ip, ip, r1
   16aa0:	sub	sl, ip, #32
   16aa4:	lsl	r9, r3, ip
   16aa8:	rsb	fp, ip, #32
   16aac:	orr	r9, r9, r2, lsl sl
   16ab0:	orr	r9, r9, r2, lsr fp
   16ab4:	lsl	r8, r2, ip
   16ab8:	cmp	r5, r9
   16abc:	cmpeq	r4, r8
   16ac0:	movcc	r0, #0
   16ac4:	movcc	r1, r0
   16ac8:	bcc	16ae4 <__assert_fail@plt+0x59e4>
   16acc:	mov	r0, #1
   16ad0:	subs	r4, r4, r8
   16ad4:	lsl	r1, r0, sl
   16ad8:	orr	r1, r1, r0, lsr fp
   16adc:	lsl	r0, r0, ip
   16ae0:	sbc	r5, r5, r9
   16ae4:	cmp	ip, #0
   16ae8:	beq	16b74 <__assert_fail@plt+0x5a74>
   16aec:	lsr	r6, r8, #1
   16af0:	orr	r6, r6, r9, lsl #31
   16af4:	lsr	r7, r9, #1
   16af8:	mov	r2, ip
   16afc:	b	16b20 <__assert_fail@plt+0x5a20>
   16b00:	subs	r3, r4, r6
   16b04:	sbc	r8, r5, r7
   16b08:	adds	r3, r3, r3
   16b0c:	adc	r8, r8, r8
   16b10:	adds	r4, r3, #1
   16b14:	adc	r5, r8, #0
   16b18:	subs	r2, r2, #1
   16b1c:	beq	16b3c <__assert_fail@plt+0x5a3c>
   16b20:	cmp	r5, r7
   16b24:	cmpeq	r4, r6
   16b28:	bcs	16b00 <__assert_fail@plt+0x5a00>
   16b2c:	adds	r4, r4, r4
   16b30:	adc	r5, r5, r5
   16b34:	subs	r2, r2, #1
   16b38:	bne	16b20 <__assert_fail@plt+0x5a20>
   16b3c:	lsr	r3, r4, ip
   16b40:	orr	r3, r3, r5, lsl fp
   16b44:	lsr	r2, r5, ip
   16b48:	orr	r3, r3, r5, lsr sl
   16b4c:	adds	r0, r0, r4
   16b50:	mov	r4, r3
   16b54:	lsl	r3, r2, ip
   16b58:	orr	r3, r3, r4, lsl sl
   16b5c:	lsl	ip, r4, ip
   16b60:	orr	r3, r3, r4, lsr fp
   16b64:	adc	r1, r1, r5
   16b68:	subs	r0, r0, ip
   16b6c:	mov	r5, r2
   16b70:	sbc	r1, r1, r3
   16b74:	cmp	lr, #0
   16b78:	strdne	r4, [lr]
   16b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b84:	mov	r7, r0
   16b88:	ldr	r6, [pc, #72]	; 16bd8 <__assert_fail@plt+0x5ad8>
   16b8c:	ldr	r5, [pc, #72]	; 16bdc <__assert_fail@plt+0x5adc>
   16b90:	add	r6, pc, r6
   16b94:	add	r5, pc, r5
   16b98:	sub	r6, r6, r5
   16b9c:	mov	r8, r1
   16ba0:	mov	r9, r2
   16ba4:	bl	10e28 <calloc@plt-0x20>
   16ba8:	asrs	r6, r6, #2
   16bac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bb0:	mov	r4, #0
   16bb4:	add	r4, r4, #1
   16bb8:	ldr	r3, [r5], #4
   16bbc:	mov	r2, r9
   16bc0:	mov	r1, r8
   16bc4:	mov	r0, r7
   16bc8:	blx	r3
   16bcc:	cmp	r6, r4
   16bd0:	bne	16bb4 <__assert_fail@plt+0x5ab4>
   16bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bd8:	andeq	r1, r1, ip, ror #6
   16bdc:	andeq	r1, r1, r4, ror #6
   16be0:	bx	lr
   16be4:	ldr	r3, [pc, #12]	; 16bf8 <__assert_fail@plt+0x5af8>
   16be8:	mov	r1, #0
   16bec:	add	r3, pc, r3
   16bf0:	ldr	r2, [r3]
   16bf4:	b	1101c <__cxa_atexit@plt>
   16bf8:	andeq	r1, r1, ip, lsl #10

Disassembly of section .fini:

00016bfc <.fini>:
   16bfc:	push	{r3, lr}
   16c00:	pop	{r3, pc}
