
raspbian-preinstalled/dc:     file format elf32-littlearm


Disassembly of section .init:

00010b04 <.init>:
   10b04:	push	{r3, lr}
   10b08:	bl	1103c <__assert_fail@plt+0x2fc>
   10b0c:	pop	{r3, pc}

Disassembly of section .plt:

00010b10 <raise@plt-0x14>:
   10b10:	push	{lr}		; (str lr, [sp, #-4]!)
   10b14:	ldr	lr, [pc, #4]	; 10b20 <raise@plt-0x4>
   10b18:	add	lr, pc, lr
   10b1c:	ldr	pc, [lr, #8]!
   10b20:	andeq	r8, r1, r4, lsl r4

00010b24 <raise@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #24, 20	; 0x18000
   10b2c:	ldr	pc, [ip, #1044]!	; 0x414

00010b30 <strcmp@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #24, 20	; 0x18000
   10b38:	ldr	pc, [ip, #1036]!	; 0x40c

00010b3c <strtol@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #24, 20	; 0x18000
   10b44:	ldr	pc, [ip, #1028]!	; 0x404

00010b48 <getpwuid@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #24, 20	; 0x18000
   10b50:	ldr	pc, [ip, #1020]!	; 0x3fc

00010b54 <fopen@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #24, 20	; 0x18000
   10b5c:	ldr	pc, [ip, #1012]!	; 0x3f4

00010b60 <fflush@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #24, 20	; 0x18000
   10b68:	ldr	pc, [ip, #1004]!	; 0x3ec

00010b6c <getuid@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #24, 20	; 0x18000
   10b74:	ldr	pc, [ip, #996]!	; 0x3e4

00010b78 <free@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #24, 20	; 0x18000
   10b80:	ldr	pc, [ip, #988]!	; 0x3dc

00010b84 <ferror@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #24, 20	; 0x18000
   10b8c:	ldr	pc, [ip, #980]!	; 0x3d4

00010b90 <memcpy@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #24, 20	; 0x18000
   10b98:	ldr	pc, [ip, #972]!	; 0x3cc

00010b9c <signal@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #24, 20	; 0x18000
   10ba4:	ldr	pc, [ip, #964]!	; 0x3c4

00010ba8 <_IO_getc@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #24, 20	; 0x18000
   10bb0:	ldr	pc, [ip, #956]!	; 0x3bc

00010bb4 <__stack_chk_fail@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #24, 20	; 0x18000
   10bbc:	ldr	pc, [ip, #948]!	; 0x3b4

00010bc0 <realloc@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #24, 20	; 0x18000
   10bc8:	ldr	pc, [ip, #940]!	; 0x3ac

00010bcc <perror@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #24, 20	; 0x18000
   10bd4:	ldr	pc, [ip, #932]!	; 0x3a4

00010bd8 <_IO_putc@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #24, 20	; 0x18000
   10be0:	ldr	pc, [ip, #924]!	; 0x39c

00010be4 <fwrite@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #24, 20	; 0x18000
   10bec:	ldr	pc, [ip, #916]!	; 0x394

00010bf0 <getenv@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #24, 20	; 0x18000
   10bf8:	ldr	pc, [ip, #908]!	; 0x38c

00010bfc <puts@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #24, 20	; 0x18000
   10c04:	ldr	pc, [ip, #900]!	; 0x384

00010c08 <malloc@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #24, 20	; 0x18000
   10c10:	ldr	pc, [ip, #892]!	; 0x37c

00010c14 <__libc_start_main@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #24, 20	; 0x18000
   10c1c:	ldr	pc, [ip, #884]!	; 0x374

00010c20 <system@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #24, 20	; 0x18000
   10c28:	ldr	pc, [ip, #876]!	; 0x36c

00010c2c <__fxstat@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #24, 20	; 0x18000
   10c34:	ldr	pc, [ip, #868]!	; 0x364

00010c38 <__vfprintf_chk@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #24, 20	; 0x18000
   10c40:	ldr	pc, [ip, #860]!	; 0x35c

00010c44 <__gmon_start__@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #24, 20	; 0x18000
   10c4c:	ldr	pc, [ip, #852]!	; 0x354

00010c50 <getopt_long@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #24, 20	; 0x18000
   10c58:	ldr	pc, [ip, #844]!	; 0x34c

00010c5c <__ctype_b_loc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #24, 20	; 0x18000
   10c64:	ldr	pc, [ip, #836]!	; 0x344

00010c68 <exit@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #24, 20	; 0x18000
   10c70:	ldr	pc, [ip, #828]!	; 0x33c

00010c74 <strlen@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #24, 20	; 0x18000
   10c7c:	ldr	pc, [ip, #820]!	; 0x334

00010c80 <strchr@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #24, 20	; 0x18000
   10c88:	ldr	pc, [ip, #812]!	; 0x32c

00010c8c <ungetc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #24, 20	; 0x18000
   10c94:	ldr	pc, [ip, #804]!	; 0x324

00010c98 <__errno_location@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #24, 20	; 0x18000
   10ca0:	ldr	pc, [ip, #796]!	; 0x31c

00010ca4 <__sprintf_chk@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #24, 20	; 0x18000
   10cac:	ldr	pc, [ip, #788]!	; 0x314

00010cb0 <memset@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #24, 20	; 0x18000
   10cb8:	ldr	pc, [ip, #780]!	; 0x30c

00010cbc <strncpy@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #24, 20	; 0x18000
   10cc4:	ldr	pc, [ip, #772]!	; 0x304

00010cc8 <__printf_chk@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #764]!	; 0x2fc

00010cd4 <fileno@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #756]!	; 0x2f4

00010ce0 <__fprintf_chk@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #748]!	; 0x2ec

00010cec <memchr@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #740]!	; 0x2e4

00010cf8 <fclose@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #732]!	; 0x2dc

00010d04 <strrchr@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d10 <fputc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #716]!	; 0x2cc

00010d1c <isatty@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #708]!	; 0x2c4

00010d28 <abort@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #700]!	; 0x2bc

00010d34 <__snprintf_chk@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #692]!	; 0x2b4

00010d40 <__assert_fail@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #684]!	; 0x2ac

Disassembly of section .text:

00010d4c <.text>:
   10d4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d50:	sub	sp, sp, #24
   10d54:	ldr	r6, [pc, #604]	; 10fb8 <__assert_fail@plt+0x278>
   10d58:	ldr	r5, [r1]
   10d5c:	mov	r4, r1
   10d60:	ldr	r3, [r6]
   10d64:	mov	r1, #47	; 0x2f
   10d68:	mov	r7, r0
   10d6c:	mov	r0, r5
   10d70:	str	r3, [sp, #20]
   10d74:	bl	10d04 <strrchr@plt>
   10d78:	ldr	r3, [pc, #572]	; 10fbc <__assert_fail@plt+0x27c>
   10d7c:	cmp	r0, #0
   10d80:	addne	r5, r0, #1
   10d84:	str	r5, [r3]
   10d88:	bl	14430 <__assert_fail@plt+0x36f0>
   10d8c:	bl	14928 <__assert_fail@plt+0x3be8>
   10d90:	bl	12d38 <__assert_fail@plt+0x1ff8>
   10d94:	bl	13924 <__assert_fail@plt+0x2be4>
   10d98:	ldr	r0, [pc, #544]	; 10fc0 <__assert_fail@plt+0x280>
   10d9c:	bl	10bf0 <getenv@plt>
   10da0:	subs	r5, r0, #0
   10da4:	beq	10f4c <__assert_fail@plt+0x20c>
   10da8:	mov	r0, r5
   10dac:	bl	10c74 <strlen@plt>
   10db0:	add	r0, r0, #8
   10db4:	bl	10c08 <malloc@plt>
   10db8:	str	r5, [sp]
   10dbc:	ldr	r3, [pc, #512]	; 10fc4 <__assert_fail@plt+0x284>
   10dc0:	mvn	r2, #0
   10dc4:	mov	r1, #1
   10dc8:	mov	r8, r0
   10dcc:	bl	10ca4 <__sprintf_chk@plt>
   10dd0:	mov	r0, r8
   10dd4:	ldr	r1, [pc, #492]	; 10fc8 <__assert_fail@plt+0x288>
   10dd8:	bl	10b54 <fopen@plt>
   10ddc:	subs	r5, r0, #0
   10de0:	beq	10df8 <__assert_fail@plt+0xb8>
   10de4:	bl	127b8 <__assert_fail@plt+0x1a78>
   10de8:	cmp	r0, #0
   10dec:	bne	10fb0 <__assert_fail@plt+0x270>
   10df0:	mov	r0, r5
   10df4:	bl	10cf8 <fclose@plt>
   10df8:	ldr	r8, [pc, #460]	; 10fcc <__assert_fail@plt+0x28c>
   10dfc:	ldr	r5, [pc, #460]	; 10fd0 <__assert_fail@plt+0x290>
   10e00:	ldr	r9, [pc, #460]	; 10fd4 <__assert_fail@plt+0x294>
   10e04:	mov	sl, #0
   10e08:	mov	r3, #0
   10e0c:	str	r3, [sp]
   10e10:	mov	r2, r5
   10e14:	mov	r3, r8
   10e18:	mov	r1, r4
   10e1c:	mov	r0, r7
   10e20:	bl	10c50 <getopt_long@plt>
   10e24:	cmn	r0, #1
   10e28:	beq	10f5c <__assert_fail@plt+0x21c>
   10e2c:	sub	r0, r0, #86	; 0x56
   10e30:	cmp	r0, #18
   10e34:	ldrls	pc, [pc, r0, lsl #2]
   10e38:	b	10f38 <__assert_fail@plt+0x1f8>
   10e3c:	strdeq	r0, [r1], -r8
   10e40:	andeq	r0, r1, r8, lsr pc
   10e44:	andeq	r0, r1, r8, lsr pc
   10e48:	andeq	r0, r1, r8, lsr pc
   10e4c:	andeq	r0, r1, r8, lsr pc
   10e50:	andeq	r0, r1, r8, lsr pc
   10e54:	andeq	r0, r1, r8, lsr pc
   10e58:	andeq	r0, r1, r8, lsr pc
   10e5c:	andeq	r0, r1, r8, lsr pc
   10e60:	andeq	r0, r1, r8, lsr pc
   10e64:	andeq	r0, r1, r8, lsr pc
   10e68:	andeq	r0, r1, r8, lsr pc
   10e6c:	andeq	r0, r1, r8, lsr pc
   10e70:	andeq	r0, r1, r8, lsr pc
   10e74:	andeq	r0, r1, r8, lsr pc
   10e78:	andeq	r0, r1, r0, asr #29
   10e7c:			; <UNDEFINED> instruction: 0x00010eb0
   10e80:	andeq	r0, r1, r8, lsr pc
   10e84:	andeq	r0, r1, r8, lsl #29
   10e88:	ldr	r3, [pc, #328]	; 10fd8 <__assert_fail@plt+0x298>
   10e8c:	ldr	r0, [r3]
   10e90:	bl	110f0 <__assert_fail@plt+0x3b0>
   10e94:	bl	11300 <__assert_fail@plt+0x5c0>
   10e98:	ldr	r2, [sp, #20]
   10e9c:	ldr	r3, [r6]
   10ea0:	cmp	r2, r3
   10ea4:	bne	10fac <__assert_fail@plt+0x26c>
   10ea8:	add	sp, sp, #24
   10eac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10eb0:	ldr	r0, [r9]
   10eb4:	bl	1113c <__assert_fail@plt+0x3fc>
   10eb8:	mov	sl, #1
   10ebc:	b	10e08 <__assert_fail@plt+0xc8>
   10ec0:	ldr	sl, [r9]
   10ec4:	mov	r0, sl
   10ec8:	bl	10c74 <strlen@plt>
   10ecc:	mov	r1, sl
   10ed0:	mov	r2, r0
   10ed4:	add	r0, sp, #12
   10ed8:	bl	14794 <__assert_fail@plt+0x3a54>
   10edc:	add	r0, sp, #12
   10ee0:	bl	1277c <__assert_fail@plt+0x1a3c>
   10ee4:	cmp	r0, #0
   10ee8:	bne	10e94 <__assert_fail@plt+0x154>
   10eec:	add	r0, sp, #16
   10ef0:	bl	14714 <__assert_fail@plt+0x39d4>
   10ef4:	b	10eb8 <__assert_fail@plt+0x178>
   10ef8:	ldr	r2, [pc, #220]	; 10fdc <__assert_fail@plt+0x29c>
   10efc:	ldr	r3, [pc, #220]	; 10fe0 <__assert_fail@plt+0x2a0>
   10f00:	str	r2, [sp]
   10f04:	ldr	r1, [pc, #216]	; 10fe4 <__assert_fail@plt+0x2a4>
   10f08:	ldr	r2, [pc, #216]	; 10fe8 <__assert_fail@plt+0x2a8>
   10f0c:	mov	r0, #1
   10f10:	bl	10cc8 <__printf_chk@plt>
   10f14:	ldr	r2, [pc, #208]	; 10fec <__assert_fail@plt+0x2ac>
   10f18:	ldr	r1, [pc, #208]	; 10ff0 <__assert_fail@plt+0x2b0>
   10f1c:	mov	r0, #1
   10f20:	bl	10cc8 <__printf_chk@plt>
   10f24:	ldr	r3, [pc, #172]	; 10fd8 <__assert_fail@plt+0x298>
   10f28:	ldr	r0, [r3]
   10f2c:	bl	17a38 <__assert_fail@plt+0x6cf8>
   10f30:	bl	11300 <__assert_fail@plt+0x5c0>
   10f34:	b	10e98 <__assert_fail@plt+0x158>
   10f38:	ldr	r3, [pc, #180]	; 10ff4 <__assert_fail@plt+0x2b4>
   10f3c:	ldr	r0, [r3]
   10f40:	bl	110f0 <__assert_fail@plt+0x3b0>
   10f44:	mov	r0, #1
   10f48:	b	10e98 <__assert_fail@plt+0x158>
   10f4c:	bl	10b6c <getuid@plt>
   10f50:	bl	10b48 <getpwuid@plt>
   10f54:	ldr	r5, [r0, #20]
   10f58:	b	10da8 <__assert_fail@plt+0x68>
   10f5c:	ldr	r5, [pc, #148]	; 10ff8 <__assert_fail@plt+0x2b8>
   10f60:	b	10f7c <__assert_fail@plt+0x23c>
   10f64:	ldr	r0, [r4, r3, lsl #2]
   10f68:	bl	1113c <__assert_fail@plt+0x3fc>
   10f6c:	ldr	r3, [r5]
   10f70:	mov	sl, #1
   10f74:	add	r3, r3, sl
   10f78:	str	r3, [r5]
   10f7c:	ldr	r3, [r5]
   10f80:	cmp	r3, r7
   10f84:	blt	10f64 <__assert_fail@plt+0x224>
   10f88:	cmp	sl, #0
   10f8c:	bne	10e94 <__assert_fail@plt+0x154>
   10f90:	ldr	r3, [pc, #100]	; 10ffc <__assert_fail@plt+0x2bc>
   10f94:	ldr	r0, [r3]
   10f98:	bl	127b8 <__assert_fail@plt+0x1a78>
   10f9c:	cmp	r0, #0
   10fa0:	beq	10e94 <__assert_fail@plt+0x154>
   10fa4:	mov	r0, #1
   10fa8:	b	10e98 <__assert_fail@plt+0x158>
   10fac:	bl	10bb4 <__stack_chk_fail@plt>
   10fb0:	mov	r0, #1
   10fb4:	bl	10c68 <exit@plt>
   10fb8:	andeq	r8, r2, r0, lsr lr
   10fbc:	andeq	r9, r2, r4, ror r4
   10fc0:	ldrdeq	r8, [r1], -r0
   10fc4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   10fc8:	andeq	r8, r1, r0, lsr #1
   10fcc:	andeq	r7, r1, r8, lsr #30
   10fd0:	andeq	r8, r1, r0, lsr r3
   10fd4:	andeq	r9, r2, r8, lsr r0
   10fd8:	andeq	r9, r2, r4, lsr r0
   10fdc:	andeq	r8, r1, r4, lsl #4
   10fe0:	andeq	r8, r1, r4, ror #3
   10fe4:	strdeq	r8, [r1], -r0
   10fe8:	andeq	r8, r1, ip, ror #3
   10fec:	andeq	r8, r1, ip, lsl #4
   10ff0:	andeq	r8, r1, r4, ror r2
   10ff4:	andeq	r9, r2, r8, lsr #32
   10ff8:	andeq	r9, r2, r0, lsr #32
   10ffc:	andeq	r9, r2, r0, lsr r0
   11000:	mov	fp, #0
   11004:	mov	lr, #0
   11008:	pop	{r1}		; (ldr r1, [sp], #4)
   1100c:	mov	r2, sp
   11010:	push	{r2}		; (str r2, [sp, #-4]!)
   11014:	push	{r0}		; (str r0, [sp, #-4]!)
   11018:	ldr	ip, [pc, #16]	; 11030 <__assert_fail@plt+0x2f0>
   1101c:	push	{ip}		; (str ip, [sp, #-4]!)
   11020:	ldr	r0, [pc, #12]	; 11034 <__assert_fail@plt+0x2f4>
   11024:	ldr	r3, [pc, #12]	; 11038 <__assert_fail@plt+0x2f8>
   11028:	bl	10c14 <__libc_start_main@plt>
   1102c:	bl	10d28 <abort@plt>
   11030:	andeq	r7, r1, r8, lsl pc
   11034:	andeq	r0, r1, ip, asr #26
   11038:			; <UNDEFINED> instruction: 0x00017eb8
   1103c:	ldr	r3, [pc, #20]	; 11058 <__assert_fail@plt+0x318>
   11040:	ldr	r2, [pc, #20]	; 1105c <__assert_fail@plt+0x31c>
   11044:	add	r3, pc, r3
   11048:	ldr	r2, [r3, r2]
   1104c:	cmp	r2, #0
   11050:	bxeq	lr
   11054:	b	10c44 <__gmon_start__@plt>
   11058:	andeq	r7, r1, r8, ror #29
   1105c:	andeq	r0, r0, r4, asr #1
   11060:	ldr	r0, [pc, #24]	; 11080 <__assert_fail@plt+0x340>
   11064:	ldr	r3, [pc, #24]	; 11084 <__assert_fail@plt+0x344>
   11068:	cmp	r3, r0
   1106c:	bxeq	lr
   11070:	ldr	r3, [pc, #16]	; 11088 <__assert_fail@plt+0x348>
   11074:	cmp	r3, #0
   11078:	bxeq	lr
   1107c:	bx	r3
   11080:	andeq	r9, r2, ip, lsl r0
   11084:	andeq	r9, r2, ip, lsl r0
   11088:	andeq	r0, r0, r0
   1108c:	ldr	r0, [pc, #36]	; 110b8 <__assert_fail@plt+0x378>
   11090:	ldr	r1, [pc, #36]	; 110bc <__assert_fail@plt+0x37c>
   11094:	sub	r1, r1, r0
   11098:	asr	r1, r1, #2
   1109c:	add	r1, r1, r1, lsr #31
   110a0:	asrs	r1, r1, #1
   110a4:	bxeq	lr
   110a8:	ldr	r3, [pc, #16]	; 110c0 <__assert_fail@plt+0x380>
   110ac:	cmp	r3, #0
   110b0:	bxeq	lr
   110b4:	bx	r3
   110b8:	andeq	r9, r2, ip, lsl r0
   110bc:	andeq	r9, r2, ip, lsl r0
   110c0:	andeq	r0, r0, r0
   110c4:	push	{r4, lr}
   110c8:	ldr	r4, [pc, #24]	; 110e8 <__assert_fail@plt+0x3a8>
   110cc:	ldrb	r3, [r4]
   110d0:	cmp	r3, #0
   110d4:	popne	{r4, pc}
   110d8:	bl	11060 <__assert_fail@plt+0x320>
   110dc:	mov	r3, #1
   110e0:	strb	r3, [r4]
   110e4:	pop	{r4, pc}
   110e8:	andeq	r9, r2, ip, lsr r0
   110ec:	b	1108c <__assert_fail@plt+0x34c>
   110f0:	ldr	r3, [pc, #52]	; 1112c <__assert_fail@plt+0x3ec>
   110f4:	push	{r4, lr}
   110f8:	mov	r1, #1
   110fc:	ldr	r2, [pc, #44]	; 11130 <__assert_fail@plt+0x3f0>
   11100:	ldr	r3, [r3]
   11104:	mov	r4, r0
   11108:	bl	10ce0 <__fprintf_chk@plt>
   1110c:	ldr	r0, [pc, #32]	; 11134 <__assert_fail@plt+0x3f4>
   11110:	bl	10bfc <puts@plt>
   11114:	ldr	r3, [pc, #28]	; 11138 <__assert_fail@plt+0x3f8>
   11118:	ldr	r0, [r3]
   1111c:	bl	17a38 <__assert_fail@plt+0x6cf8>
   11120:	mov	r0, r4
   11124:	pop	{r4, lr}
   11128:	b	17a38 <__assert_fail@plt+0x6cf8>
   1112c:	andeq	r9, r2, r4, ror r4
   11130:	andeq	r7, r1, r8, ror pc
   11134:	andeq	r8, r1, r4, ror r0
   11138:	andeq	r9, r2, r4, lsr r0
   1113c:	push	{r4, r5, r6, lr}
   11140:	sub	sp, sp, #104	; 0x68
   11144:	ldr	r5, [pc, #392]	; 112d4 <__assert_fail@plt+0x594>
   11148:	ldr	r1, [pc, #392]	; 112d8 <__assert_fail@plt+0x598>
   1114c:	mov	r6, r0
   11150:	ldr	r3, [r5]
   11154:	str	r3, [sp, #100]	; 0x64
   11158:	bl	10b30 <strcmp@plt>
   1115c:	cmp	r0, #0
   11160:	bne	111fc <__assert_fail@plt+0x4bc>
   11164:	ldr	r3, [pc, #368]	; 112dc <__assert_fail@plt+0x59c>
   11168:	ldr	r4, [r3]
   1116c:	mov	r0, r4
   11170:	bl	10cd4 <fileno@plt>
   11174:	add	r2, sp, #8
   11178:	mov	r1, r0
   1117c:	mov	r0, #3
   11180:	bl	10c2c <__fxstat@plt>
   11184:	cmn	r0, #1
   11188:	beq	11258 <__assert_fail@plt+0x518>
   1118c:	ldr	r2, [sp, #24]
   11190:	and	r3, r2, #61440	; 0xf000
   11194:	cmp	r3, #16384	; 0x4000
   11198:	beq	11280 <__assert_fail@plt+0x540>
   1119c:	cmp	r3, #24576	; 0x6000
   111a0:	beq	11234 <__assert_fail@plt+0x4f4>
   111a4:	sub	r3, r3, #4096	; 0x1000
   111a8:	bic	r3, r3, #4096	; 0x1000
   111ac:	and	r2, r2, #45056	; 0xb000
   111b0:	cmp	r3, #0
   111b4:	cmpne	r2, #32768	; 0x8000
   111b8:	bne	112a4 <__assert_fail@plt+0x564>
   111bc:	mov	r0, r4
   111c0:	bl	127b8 <__assert_fail@plt+0x1a78>
   111c4:	cmp	r0, #0
   111c8:	bne	112cc <__assert_fail@plt+0x58c>
   111cc:	ldr	r3, [pc, #264]	; 112dc <__assert_fail@plt+0x59c>
   111d0:	ldr	r3, [r3]
   111d4:	cmp	r3, r4
   111d8:	beq	111e4 <__assert_fail@plt+0x4a4>
   111dc:	mov	r0, r4
   111e0:	bl	10cf8 <fclose@plt>
   111e4:	ldr	r2, [sp, #100]	; 0x64
   111e8:	ldr	r3, [r5]
   111ec:	cmp	r2, r3
   111f0:	bne	112c8 <__assert_fail@plt+0x588>
   111f4:	add	sp, sp, #104	; 0x68
   111f8:	pop	{r4, r5, r6, pc}
   111fc:	ldr	r1, [pc, #220]	; 112e0 <__assert_fail@plt+0x5a0>
   11200:	mov	r0, r6
   11204:	bl	10b54 <fopen@plt>
   11208:	subs	r4, r0, #0
   1120c:	bne	1116c <__assert_fail@plt+0x42c>
   11210:	ldr	r2, [pc, #204]	; 112e4 <__assert_fail@plt+0x5a4>
   11214:	ldr	r3, [pc, #204]	; 112e8 <__assert_fail@plt+0x5a8>
   11218:	str	r6, [sp]
   1121c:	mov	r1, #1
   11220:	ldr	r3, [r3]
   11224:	ldr	r0, [r2]
   11228:	ldr	r2, [pc, #188]	; 112ec <__assert_fail@plt+0x5ac>
   1122c:	bl	10ce0 <__fprintf_chk@plt>
   11230:	b	111e4 <__assert_fail@plt+0x4a4>
   11234:	ldr	r2, [pc, #168]	; 112e4 <__assert_fail@plt+0x5a4>
   11238:	ldr	r3, [pc, #168]	; 112e8 <__assert_fail@plt+0x5a8>
   1123c:	str	r6, [sp]
   11240:	mov	r1, #1
   11244:	ldr	r3, [r3]
   11248:	ldr	r0, [r2]
   1124c:	ldr	r2, [pc, #156]	; 112f0 <__assert_fail@plt+0x5b0>
   11250:	bl	10ce0 <__fprintf_chk@plt>
   11254:	b	111cc <__assert_fail@plt+0x48c>
   11258:	ldr	r1, [pc, #132]	; 112e4 <__assert_fail@plt+0x5a4>
   1125c:	ldr	r3, [pc, #132]	; 112e8 <__assert_fail@plt+0x5a8>
   11260:	ldr	r2, [pc, #140]	; 112f4 <__assert_fail@plt+0x5b4>
   11264:	ldr	r0, [r1]
   11268:	ldr	r3, [r3]
   1126c:	mov	r1, #1
   11270:	bl	10ce0 <__fprintf_chk@plt>
   11274:	mov	r0, r6
   11278:	bl	10bcc <perror@plt>
   1127c:	b	111cc <__assert_fail@plt+0x48c>
   11280:	ldr	r2, [pc, #92]	; 112e4 <__assert_fail@plt+0x5a4>
   11284:	ldr	r3, [pc, #92]	; 112e8 <__assert_fail@plt+0x5a8>
   11288:	str	r6, [sp]
   1128c:	mov	r1, #1
   11290:	ldr	r3, [r3]
   11294:	ldr	r0, [r2]
   11298:	ldr	r2, [pc, #88]	; 112f8 <__assert_fail@plt+0x5b8>
   1129c:	bl	10ce0 <__fprintf_chk@plt>
   112a0:	b	111cc <__assert_fail@plt+0x48c>
   112a4:	ldr	r2, [pc, #56]	; 112e4 <__assert_fail@plt+0x5a4>
   112a8:	ldr	r3, [pc, #56]	; 112e8 <__assert_fail@plt+0x5a8>
   112ac:	str	r6, [sp]
   112b0:	mov	r1, #1
   112b4:	ldr	r3, [r3]
   112b8:	ldr	r0, [r2]
   112bc:	ldr	r2, [pc, #56]	; 112fc <__assert_fail@plt+0x5bc>
   112c0:	bl	10ce0 <__fprintf_chk@plt>
   112c4:	b	111cc <__assert_fail@plt+0x48c>
   112c8:	bl	10bb4 <__stack_chk_fail@plt>
   112cc:	mov	r0, #1
   112d0:	bl	10c68 <exit@plt>
   112d4:	andeq	r8, r2, r0, lsr lr
   112d8:	muleq	r1, ip, r0
   112dc:	andeq	r9, r2, r0, lsr r0
   112e0:	andeq	r8, r1, r0, lsr #1
   112e4:	andeq	r9, r2, r8, lsr #32
   112e8:	andeq	r9, r2, r4, ror r4
   112ec:	andeq	r8, r1, r4, lsr #1
   112f0:	andeq	r8, r1, ip, lsl #2
   112f4:	andeq	r8, r1, r0, asr #1
   112f8:	ldrdeq	r8, [r1], -ip
   112fc:	andeq	r8, r1, r4, asr #2
   11300:	push	{r4, r5, r6, lr}
   11304:	ldr	r4, [pc, #156]	; 113a8 <__assert_fail@plt+0x668>
   11308:	ldr	r0, [r4]
   1130c:	bl	10b84 <ferror@plt>
   11310:	cmp	r0, #0
   11314:	bne	11370 <__assert_fail@plt+0x630>
   11318:	ldr	r0, [r4]
   1131c:	bl	10b60 <fflush@plt>
   11320:	cmp	r0, #0
   11324:	ldrne	r5, [pc, #128]	; 113ac <__assert_fail@plt+0x66c>
   11328:	beq	1138c <__assert_fail@plt+0x64c>
   1132c:	ldr	r3, [pc, #124]	; 113b0 <__assert_fail@plt+0x670>
   11330:	ldr	r4, [pc, #124]	; 113b4 <__assert_fail@plt+0x674>
   11334:	ldr	r2, [pc, #124]	; 113b8 <__assert_fail@plt+0x678>
   11338:	ldr	r3, [r3]
   1133c:	mov	r1, #1
   11340:	ldr	r0, [r4]
   11344:	bl	10ce0 <__fprintf_chk@plt>
   11348:	mov	r0, r5
   1134c:	bl	10bcc <perror@plt>
   11350:	mov	r5, #1
   11354:	ldr	r0, [r4]
   11358:	bl	10b84 <ferror@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11378 <__assert_fail@plt+0x638>
   11364:	mov	r5, #1
   11368:	mov	r0, r5
   1136c:	pop	{r4, r5, r6, pc}
   11370:	ldr	r5, [pc, #68]	; 113bc <__assert_fail@plt+0x67c>
   11374:	b	1132c <__assert_fail@plt+0x5ec>
   11378:	ldr	r0, [r4]
   1137c:	bl	10cf8 <fclose@plt>
   11380:	cmp	r0, #0
   11384:	bne	11364 <__assert_fail@plt+0x624>
   11388:	b	11368 <__assert_fail@plt+0x628>
   1138c:	ldr	r0, [r4]
   11390:	bl	10cf8 <fclose@plt>
   11394:	subs	r5, r0, #0
   11398:	ldreq	r4, [pc, #20]	; 113b4 <__assert_fail@plt+0x674>
   1139c:	ldrne	r5, [pc, #28]	; 113c0 <__assert_fail@plt+0x680>
   113a0:	bne	1132c <__assert_fail@plt+0x5ec>
   113a4:	b	11354 <__assert_fail@plt+0x614>
   113a8:	andeq	r9, r2, r4, lsr r0
   113ac:	muleq	r1, r8, r1
   113b0:	andeq	r9, r2, r4, ror r4
   113b4:	andeq	r9, r2, r8, lsr #32
   113b8:	andeq	r8, r1, r8, asr #3
   113bc:	andeq	r8, r1, r0, lsl #3
   113c0:			; <UNDEFINED> instruction: 0x000181b0
   113c4:	ldr	r1, [pc, #32]	; 113ec <__assert_fail@plt+0x6ac>
   113c8:	ldr	r3, [pc, #32]	; 113f0 <__assert_fail@plt+0x6b0>
   113cc:	push	{r4, lr}
   113d0:	ldr	r0, [r1]
   113d4:	ldr	r2, [pc, #24]	; 113f4 <__assert_fail@plt+0x6b4>
   113d8:	ldr	r3, [r3]
   113dc:	mov	r1, #1
   113e0:	bl	10ce0 <__fprintf_chk@plt>
   113e4:	mov	r0, #1
   113e8:	bl	10c68 <exit@plt>
   113ec:	andeq	r9, r2, r8, lsr #32
   113f0:	andeq	r9, r2, r4, ror r4
   113f4:	andeq	r8, r1, ip, asr r3
   113f8:	push	{r4, lr}
   113fc:	bl	10c08 <malloc@plt>
   11400:	cmp	r0, #0
   11404:	popne	{r4, pc}
   11408:	bl	113c4 <__assert_fail@plt+0x684>
   1140c:	push	{r4, r5, r6, lr}
   11410:	sub	sp, sp, #8
   11414:	mov	r4, r1
   11418:	mov	r5, r0
   1141c:	mov	r6, r2
   11420:	bl	10c5c <__ctype_b_loc@plt>
   11424:	lsl	r3, r4, #1
   11428:	ldr	r1, [r0]
   1142c:	ldrsh	r3, [r1, r3]
   11430:	cmp	r3, #0
   11434:	blt	11460 <__assert_fail@plt+0x720>
   11438:	str	r6, [sp]
   1143c:	mov	r3, r4
   11440:	ldr	r2, [pc, #64]	; 11488 <__assert_fail@plt+0x748>
   11444:	mov	r1, #1
   11448:	mov	r0, r5
   1144c:	bl	10ce0 <__fprintf_chk@plt>
   11450:	mov	r0, r5
   11454:	add	sp, sp, #8
   11458:	pop	{r4, r5, r6, lr}
   1145c:	b	17a38 <__assert_fail@plt+0x6cf8>
   11460:	stm	sp, {r4, r6}
   11464:	mov	r3, r4
   11468:	ldr	r2, [pc, #28]	; 1148c <__assert_fail@plt+0x74c>
   1146c:	mov	r1, #1
   11470:	mov	r0, r5
   11474:	bl	10ce0 <__fprintf_chk@plt>
   11478:	mov	r0, r5
   1147c:	add	sp, sp, #8
   11480:	pop	{r4, r5, r6, lr}
   11484:	b	17a38 <__assert_fail@plt+0x6cf8>
   11488:	andeq	r8, r1, r0, lsl #7
   1148c:	andeq	r8, r1, r0, ror r3
   11490:	ldr	r4, [pc, #80]	; 114e8 <__assert_fail@plt+0x7a8>
   11494:	ldr	r3, [pc, #80]	; 114ec <__assert_fail@plt+0x7ac>
   11498:	push	{lr}		; (str lr, [sp, #-4]!)
   1149c:	sub	sp, sp, #12
   114a0:	ldr	r2, [r4]
   114a4:	subs	r5, r1, #0
   114a8:	ldr	r3, [r3]
   114ac:	str	r0, [sp]
   114b0:	mov	r0, r2
   114b4:	blt	114d8 <__assert_fail@plt+0x798>
   114b8:	ldr	r2, [pc, #48]	; 114f0 <__assert_fail@plt+0x7b0>
   114bc:	mov	r1, #1
   114c0:	bl	10ce0 <__fprintf_chk@plt>
   114c4:	mov	r1, r5
   114c8:	ldr	r0, [r4]
   114cc:	ldr	r2, [pc, #32]	; 114f4 <__assert_fail@plt+0x7b4>
   114d0:	bl	1140c <__assert_fail@plt+0x6cc>
   114d4:	bl	10d28 <abort@plt>
   114d8:	ldr	r2, [pc, #24]	; 114f8 <__assert_fail@plt+0x7b8>
   114dc:	mov	r1, #1
   114e0:	bl	10ce0 <__fprintf_chk@plt>
   114e4:	b	114d4 <__assert_fail@plt+0x794>
   114e8:	andeq	r9, r2, r8, lsr #32
   114ec:	andeq	r9, r2, r4, ror r4
   114f0:	muleq	r1, r8, r3
   114f4:	andeq	r8, r1, r8, lsr #7
   114f8:	andeq	r8, r1, r8, lsl #7
   114fc:	push	{r4, r5, r6, r7, r8, lr}
   11500:	mov	r1, #10
   11504:	mov	r5, r0
   11508:	bl	10c80 <strchr@plt>
   1150c:	subs	r4, r0, #0
   11510:	beq	11554 <__assert_fail@plt+0x814>
   11514:	sub	r6, r4, r5
   11518:	add	r0, r6, #1
   1151c:	bl	10c08 <malloc@plt>
   11520:	subs	r7, r0, #0
   11524:	beq	1156c <__assert_fail@plt+0x82c>
   11528:	mov	r1, r5
   1152c:	mov	r2, r6
   11530:	bl	10cbc <strncpy@plt>
   11534:	mov	r3, #0
   11538:	strb	r3, [r7, r6]
   1153c:	mov	r0, r7
   11540:	bl	10c20 <system@plt>
   11544:	mov	r0, r7
   11548:	bl	10b78 <free@plt>
   1154c:	add	r0, r4, #1
   11550:	pop	{r4, r5, r6, r7, r8, pc}
   11554:	mov	r0, r5
   11558:	bl	10c20 <system@plt>
   1155c:	mov	r0, r5
   11560:	bl	10c74 <strlen@plt>
   11564:	add	r0, r5, r0
   11568:	pop	{r4, r5, r6, r7, r8, pc}
   1156c:	bl	113c4 <__assert_fail@plt+0x684>
   11570:	push	{r4, r5, lr}
   11574:	sub	sp, sp, #12
   11578:	add	ip, sp, #8
   1157c:	mov	r5, r3
   11580:	stmdb	ip, {r0, r1}
   11584:	ldr	ip, [sp]
   11588:	ldr	r0, [sp, #4]
   1158c:	cmp	ip, #1
   11590:	ldr	r1, [sp, #24]
   11594:	beq	115dc <__assert_fail@plt+0x89c>
   11598:	cmp	ip, #2
   1159c:	bne	115f0 <__assert_fail@plt+0x8b0>
   115a0:	bl	14744 <__assert_fail@plt+0x3a04>
   115a4:	ldr	r4, [pc, #80]	; 115fc <__assert_fail@plt+0x8bc>
   115a8:	cmp	r5, #1
   115ac:	ldr	r0, [r4]
   115b0:	beq	115c0 <__assert_fail@plt+0x880>
   115b4:	add	sp, sp, #12
   115b8:	pop	{r4, r5, lr}
   115bc:	b	10b60 <fflush@plt>
   115c0:	mov	r1, r0
   115c4:	mov	r0, #10
   115c8:	bl	10bd8 <_IO_putc@plt>
   115cc:	ldr	r0, [r4]
   115d0:	add	sp, sp, #12
   115d4:	pop	{r4, r5, lr}
   115d8:	b	10b60 <fflush@plt>
   115dc:	mov	lr, r2
   115e0:	mov	r2, r1
   115e4:	mov	r1, lr
   115e8:	bl	14434 <__assert_fail@plt+0x36f4>
   115ec:	b	115a4 <__assert_fail@plt+0x864>
   115f0:	mvn	r1, #0
   115f4:	ldr	r0, [pc, #4]	; 11600 <__assert_fail@plt+0x8c0>
   115f8:	bl	11490 <__assert_fail@plt+0x750>
   115fc:	andeq	r9, r2, r4, lsr r0
   11600:			; <UNDEFINED> instruction: 0x000183b8
   11604:	push	{r4, r5, lr}
   11608:	sub	sp, sp, #20
   1160c:	ldr	r4, [pc, #100]	; 11678 <__assert_fail@plt+0x938>
   11610:	mov	r3, sp
   11614:	stm	r3, {r1, r2}
   11618:	mov	r3, r1
   1161c:	ldr	r2, [r4]
   11620:	sub	r1, r1, #1
   11624:	cmp	r1, #1
   11628:	str	r2, [sp, #12]
   1162c:	ldr	r1, [sp, #4]
   11630:	bhi	11668 <__assert_fail@plt+0x928>
   11634:	cmp	r3, #1
   11638:	mov	r5, r0
   1163c:	beq	11660 <__assert_fail@plt+0x920>
   11640:	bl	146f8 <__assert_fail@plt+0x39b8>
   11644:	ldr	r2, [sp, #12]
   11648:	ldr	r3, [r4]
   1164c:	mov	r0, r5
   11650:	cmp	r2, r3
   11654:	bne	11674 <__assert_fail@plt+0x934>
   11658:	add	sp, sp, #20
   1165c:	pop	{r4, r5, pc}
   11660:	bl	145b0 <__assert_fail@plt+0x3870>
   11664:	b	11644 <__assert_fail@plt+0x904>
   11668:	mvn	r1, #0
   1166c:	ldr	r0, [pc, #8]	; 1167c <__assert_fail@plt+0x93c>
   11670:	bl	11490 <__assert_fail@plt+0x750>
   11674:	bl	10bb4 <__stack_chk_fail@plt>
   11678:	andeq	r8, r2, r0, lsr lr
   1167c:	ldrdeq	r8, [r1], -r0
   11680:	ldr	r2, [pc, #24]	; 116a0 <__assert_fail@plt+0x960>
   11684:	ldr	r3, [r2]
   11688:	ldrb	r0, [r3]
   1168c:	cmp	r0, #0
   11690:	addne	r3, r3, #1
   11694:	strne	r3, [r2]
   11698:	mvneq	r0, #0
   1169c:	bx	lr
   116a0:	andeq	r9, r2, r0, asr #32
   116a4:	push	{r4, r5, r6, r7, r8, lr}
   116a8:	mov	r6, r1
   116ac:	ldr	r4, [pc, #2824]	; 121bc <__assert_fail@plt+0x147c>
   116b0:	sub	sp, sp, #104	; 0x68
   116b4:	sub	r3, r0, #9
   116b8:	ldr	r1, [r4]
   116bc:	str	r1, [sp, #100]	; 0x64
   116c0:	cmp	r3, #117	; 0x75
   116c4:	ldrls	pc, [pc, r3, lsl #2]
   116c8:	b	11fac <__assert_fail@plt+0x126c>
   116cc:	andeq	r1, r1, r8, ror #17
   116d0:	andeq	r1, r1, r8, ror #17
   116d4:	andeq	r1, r1, ip, lsr #31
   116d8:	andeq	r1, r1, ip, lsr #31
   116dc:	andeq	r1, r1, ip, lsr #31
   116e0:	andeq	r1, r1, ip, lsr #31
   116e4:	andeq	r1, r1, ip, lsr #31
   116e8:	andeq	r1, r1, ip, lsr #31
   116ec:	andeq	r1, r1, ip, lsr #31
   116f0:	andeq	r1, r1, ip, lsr #31
   116f4:	andeq	r1, r1, ip, lsr #31
   116f8:	andeq	r1, r1, ip, lsr #31
   116fc:	andeq	r1, r1, ip, lsr #31
   11700:	andeq	r1, r1, ip, lsr #31
   11704:	andeq	r1, r1, ip, lsr #31
   11708:	andeq	r1, r1, ip, lsr #31
   1170c:	andeq	r1, r1, ip, lsr #31
   11710:	andeq	r1, r1, ip, lsr #31
   11714:	andeq	r1, r1, ip, lsr #31
   11718:	andeq	r1, r1, ip, lsr #31
   1171c:	andeq	r1, r1, ip, lsr #31
   11720:	andeq	r1, r1, ip, lsr #31
   11724:	andeq	r1, r1, ip, lsr #31
   11728:	andeq	r1, r1, r8, ror #17
   1172c:	andeq	r1, r1, r4, lsl sp
   11730:	andeq	r1, r1, ip, lsr #31
   11734:	andeq	r1, r1, ip, lsl #26
   11738:	andeq	r1, r1, ip, lsr #31
   1173c:	strdeq	r1, [r1], -r4
   11740:	andeq	r1, r1, ip, lsr #31
   11744:	andeq	r1, r1, ip, lsr #31
   11748:	andeq	r1, r1, ip, lsr #31
   1174c:	andeq	r1, r1, ip, lsr #31
   11750:	ldrdeq	r1, [r1], -ip
   11754:	andeq	r1, r1, r0, asr #26
   11758:	andeq	r1, r1, ip, lsr #31
   1175c:	andeq	r1, r1, r8, lsr #26
   11760:	andeq	r1, r1, r8, asr sp
   11764:	andeq	r1, r1, r4, asr #25
   11768:	andeq	r1, r1, r8, asr sp
   1176c:	andeq	r1, r1, r8, asr sp
   11770:	andeq	r1, r1, r8, asr sp
   11774:	andeq	r1, r1, r8, asr sp
   11778:	andeq	r1, r1, r8, asr sp
   1177c:	andeq	r1, r1, r8, asr sp
   11780:	andeq	r1, r1, r8, asr sp
   11784:	andeq	r1, r1, r8, asr sp
   11788:	andeq	r1, r1, r8, asr sp
   1178c:	andeq	r1, r1, r8, asr sp
   11790:	andeq	r1, r1, r8, lsl #25
   11794:	andeq	r1, r1, ip, lsr ip
   11798:	andeq	r1, r1, ip, lsl #24
   1179c:	ldrdeq	r1, [r1], -ip
   117a0:	andeq	r1, r1, r4, lsr #23
   117a4:	andeq	r1, r1, r4, asr #22
   117a8:	andeq	r1, r1, ip, lsr #31
   117ac:	andeq	r1, r1, r8, asr sp
   117b0:	andeq	r1, r1, r8, asr sp
   117b4:	andeq	r1, r1, r8, asr sp
   117b8:	andeq	r1, r1, r8, asr sp
   117bc:	andeq	r1, r1, r8, asr sp
   117c0:	andeq	r1, r1, r8, asr sp
   117c4:	andeq	r1, r1, ip, lsr #31
   117c8:	andeq	r1, r1, ip, lsr #31
   117cc:	andeq	r1, r1, r0, lsr #22
   117d0:	andeq	r1, r1, ip, lsr #31
   117d4:	strdeq	r1, [r1], -ip
   117d8:	andeq	r1, r1, r0, ror #30
   117dc:	andeq	r1, r1, ip, lsr #31
   117e0:	andeq	r1, r1, ip, lsr #31
   117e4:	andeq	r1, r1, r4, asr pc
   117e8:	andeq	r1, r1, r8, lsl #30
   117ec:	andeq	r1, r1, r8, lsr #29
   117f0:	andeq	r1, r1, r4, lsl #31
   117f4:	andeq	r1, r1, r4, asr #27
   117f8:	andeq	r1, r1, ip, lsr #31
   117fc:	andeq	r1, r1, ip, lsr #31
   11800:	andeq	r1, r1, ip, lsr #31
   11804:	andeq	r1, r1, ip, lsr #31
   11808:	andeq	r1, r1, r0, lsr #27
   1180c:	andeq	r1, r1, ip, lsr #31
   11810:	andeq	r1, r1, r0, ror #26
   11814:	andeq	r1, r1, ip, ror #28
   11818:	andeq	r1, r1, ip, lsr #31
   1181c:	andeq	r1, r1, ip, lsr #31
   11820:	andeq	r1, r1, r4, asr lr
   11824:	andeq	r1, r1, r8, asr sp
   11828:	andeq	r1, r1, ip, lsr #31
   1182c:	andeq	r1, r1, r0, lsl #28
   11830:	andeq	r1, r1, ip, lsr #31
   11834:	strdeq	r1, [r1], -r4
   11838:	andeq	r1, r1, r4, ror lr
   1183c:	andeq	r1, r1, ip, lsr #31
   11840:	andeq	r1, r1, r8, ror #21
   11844:	andeq	r1, r1, ip, lsr #31
   11848:	andeq	r1, r1, ip, lsr #31
   1184c:	muleq	r1, r8, sl
   11850:	andeq	r1, r1, ip, lsr #31
   11854:	andeq	r1, r1, ip, ror #20
   11858:	andeq	r1, r1, ip, lsr sl
   1185c:	andeq	r1, r1, ip, lsr #31
   11860:	andeq	r1, r1, r8, lsl #20
   11864:	ldrdeq	r1, [r1], -ip
   11868:	andeq	r1, r1, r8, lsr #19
   1186c:	muleq	r1, r0, r9
   11870:	andeq	r1, r1, r0, lsl #19
   11874:	andeq	r1, r1, ip, asr r9
   11878:	andeq	r1, r1, ip, lsr #31
   1187c:	andeq	r1, r1, ip, lsr #31
   11880:	andeq	r1, r1, r4, lsr #17
   11884:	andeq	r1, r1, ip, lsr #31
   11888:	andeq	r1, r1, r4, asr r9
   1188c:	andeq	r1, r1, ip, lsr #31
   11890:	andeq	r1, r1, r4, lsr r9
   11894:	andeq	r1, r1, ip, lsr #31
   11898:	andeq	r1, r1, ip, lsl r9
   1189c:	andeq	r1, r1, ip, lsr #31
   118a0:	andeq	r1, r1, r4, lsl #18
   118a4:	add	r5, sp, #68	; 0x44
   118a8:	mov	r0, r5
   118ac:	bl	130f4 <__assert_fail@plt+0x23b4>
   118b0:	cmp	r0, #0
   118b4:	bne	118e8 <__assert_fail@plt+0xba8>
   118b8:	ldr	r3, [sp, #68]	; 0x44
   118bc:	cmp	r3, #1
   118c0:	beq	12064 <__assert_fail@plt+0x1324>
   118c4:	ldr	r3, [pc, #2292]	; 121c0 <__assert_fail@plt+0x1480>
   118c8:	ldr	r5, [pc, #2292]	; 121c4 <__assert_fail@plt+0x1484>
   118cc:	ldr	r2, [pc, #2292]	; 121c8 <__assert_fail@plt+0x1488>
   118d0:	ldr	r3, [r3]
   118d4:	ldr	r0, [r5]
   118d8:	mov	r1, #1
   118dc:	bl	10ce0 <__fprintf_chk@plt>
   118e0:	ldr	r0, [r5]
   118e4:	bl	17a38 <__assert_fail@plt+0x6cf8>
   118e8:	mov	r0, #0
   118ec:	ldr	r2, [sp, #100]	; 0x64
   118f0:	ldr	r3, [r4]
   118f4:	cmp	r2, r3
   118f8:	bne	121b8 <__assert_fail@plt+0x1478>
   118fc:	add	sp, sp, #104	; 0x68
   11900:	pop	{r4, r5, r6, r7, r8, pc}
   11904:	ldr	r3, [pc, #2240]	; 121cc <__assert_fail@plt+0x148c>
   11908:	ldr	r0, [pc, #2240]	; 121d0 <__assert_fail@plt+0x1490>
   1190c:	ldr	r1, [r3, #4]
   11910:	bl	132c4 <__assert_fail@plt+0x2584>
   11914:	mov	r0, #0
   11918:	b	118ec <__assert_fail@plt+0xbac>
   1191c:	ldr	r3, [pc, #2216]	; 121cc <__assert_fail@plt+0x148c>
   11920:	ldr	r0, [pc, #2220]	; 121d4 <__assert_fail@plt+0x1494>
   11924:	ldr	r1, [r3, #4]
   11928:	bl	134f4 <__assert_fail@plt+0x27b4>
   1192c:	mov	r0, #0
   11930:	b	118ec <__assert_fail@plt+0xbac>
   11934:	bl	137a4 <__assert_fail@plt+0x2a64>
   11938:	add	r5, sp, #44	; 0x2c
   1193c:	mov	r1, r0
   11940:	mov	r0, r5
   11944:	bl	140b8 <__assert_fail@plt+0x3378>
   11948:	ldm	r5, {r0, r1}
   1194c:	bl	12ddc <__assert_fail@plt+0x209c>
   11950:	b	118e8 <__assert_fail@plt+0xba8>
   11954:	mov	r0, #3
   11958:	b	118ec <__assert_fail@plt+0xbac>
   1195c:	cmn	r6, #1
   11960:	beq	11b9c <__assert_fail@plt+0xe5c>
   11964:	add	r5, sp, #68	; 0x44
   11968:	mov	r0, r5
   1196c:	bl	130f4 <__assert_fail@plt+0x23b4>
   11970:	cmp	r0, #0
   11974:	beq	12004 <__assert_fail@plt+0x12c4>
   11978:	mov	r0, #1
   1197c:	b	118ec <__assert_fail@plt+0xbac>
   11980:	mov	r0, #2
   11984:	bl	1371c <__assert_fail@plt+0x29dc>
   11988:	mov	r0, #0
   1198c:	b	118ec <__assert_fail@plt+0xbac>
   11990:	ldr	r3, [pc, #2100]	; 121cc <__assert_fail@plt+0x148c>
   11994:	mov	r6, #1
   11998:	mov	r7, #0
   1199c:	mov	r0, #4
   119a0:	strd	r6, [r3, #8]
   119a4:	b	118ec <__assert_fail@plt+0xbac>
   119a8:	add	r6, sp, #68	; 0x44
   119ac:	mov	r0, r6
   119b0:	bl	12ea0 <__assert_fail@plt+0x2160>
   119b4:	subs	r5, r0, #0
   119b8:	bne	118e8 <__assert_fail@plt+0xba8>
   119bc:	ldr	r2, [pc, #2068]	; 121d8 <__assert_fail@plt+0x1498>
   119c0:	mov	r3, #1
   119c4:	str	r3, [sp]
   119c8:	ldm	r6, {r0, r1}
   119cc:	ldr	r2, [r2, #4]
   119d0:	bl	11570 <__assert_fail@plt+0x830>
   119d4:	mov	r0, r5
   119d8:	b	118ec <__assert_fail@plt+0xbac>
   119dc:	add	r0, sp, #68	; 0x44
   119e0:	bl	130f4 <__assert_fail@plt+0x23b4>
   119e4:	subs	r5, r0, #0
   119e8:	bne	118e8 <__assert_fail@plt+0xba8>
   119ec:	ldr	r3, [sp, #68]	; 0x44
   119f0:	cmp	r3, #1
   119f4:	beq	12018 <__assert_fail@plt+0x12d8>
   119f8:	ldr	r3, [pc, #1984]	; 121c0 <__assert_fail@plt+0x1480>
   119fc:	ldr	r5, [pc, #1984]	; 121c4 <__assert_fail@plt+0x1484>
   11a00:	ldr	r2, [pc, #2004]	; 121dc <__assert_fail@plt+0x149c>
   11a04:	b	118d0 <__assert_fail@plt+0xb90>
   11a08:	add	r6, sp, #68	; 0x44
   11a0c:	mov	r0, r6
   11a10:	bl	130f4 <__assert_fail@plt+0x23b4>
   11a14:	subs	r5, r0, #0
   11a18:	bne	118e8 <__assert_fail@plt+0xba8>
   11a1c:	ldr	r2, [pc, #1972]	; 121d8 <__assert_fail@plt+0x1498>
   11a20:	str	r5, [sp]
   11a24:	mov	r3, r5
   11a28:	ldm	r6, {r0, r1}
   11a2c:	ldr	r2, [r2, #4]
   11a30:	bl	11570 <__assert_fail@plt+0x830>
   11a34:	mov	r0, r5
   11a38:	b	118ec <__assert_fail@plt+0xbac>
   11a3c:	cmn	r6, #1
   11a40:	beq	11b9c <__assert_fail@plt+0xe5c>
   11a44:	add	r5, sp, #68	; 0x44
   11a48:	mov	r0, r6
   11a4c:	mov	r1, r5
   11a50:	bl	12f30 <__assert_fail@plt+0x21f0>
   11a54:	cmp	r0, #0
   11a58:	bne	11978 <__assert_fail@plt+0xc38>
   11a5c:	ldm	r5, {r0, r1}
   11a60:	bl	12ddc <__assert_fail@plt+0x209c>
   11a64:	mov	r0, #1
   11a68:	b	118ec <__assert_fail@plt+0xbac>
   11a6c:	add	r0, sp, #68	; 0x44
   11a70:	bl	130f4 <__assert_fail@plt+0x23b4>
   11a74:	subs	r5, r0, #0
   11a78:	bne	118e8 <__assert_fail@plt+0xba8>
   11a7c:	ldr	r3, [sp, #68]	; 0x44
   11a80:	cmp	r3, #1
   11a84:	beq	12040 <__assert_fail@plt+0x1300>
   11a88:	ldr	r3, [pc, #1840]	; 121c0 <__assert_fail@plt+0x1480>
   11a8c:	ldr	r5, [pc, #1840]	; 121c4 <__assert_fail@plt+0x1484>
   11a90:	ldr	r2, [pc, #1864]	; 121e0 <__assert_fail@plt+0x14a0>
   11a94:	b	118d0 <__assert_fail@plt+0xb90>
   11a98:	add	r0, sp, #68	; 0x44
   11a9c:	bl	130f4 <__assert_fail@plt+0x23b4>
   11aa0:	subs	r5, r0, #0
   11aa4:	bne	118e8 <__assert_fail@plt+0xba8>
   11aa8:	ldr	r3, [sp, #68]	; 0x44
   11aac:	cmp	r3, #1
   11ab0:	beq	12150 <__assert_fail@plt+0x1410>
   11ab4:	ldr	r5, [pc, #1800]	; 121c4 <__assert_fail@plt+0x1484>
   11ab8:	ldr	r3, [pc, #1792]	; 121c0 <__assert_fail@plt+0x1480>
   11abc:	mov	r2, #16
   11ac0:	ldr	r0, [r5]
   11ac4:	ldr	r3, [r3]
   11ac8:	mov	r1, #1
   11acc:	str	r2, [sp]
   11ad0:	ldr	r2, [pc, #1804]	; 121e4 <__assert_fail@plt+0x14a4>
   11ad4:	bl	10ce0 <__fprintf_chk@plt>
   11ad8:	ldr	r0, [r5]
   11adc:	bl	17a38 <__assert_fail@plt+0x6cf8>
   11ae0:	mov	r0, #0
   11ae4:	b	118ec <__assert_fail@plt+0xbac>
   11ae8:	ldr	r3, [pc, #1768]	; 121d8 <__assert_fail@plt+0x1498>
   11aec:	ldr	r0, [r3, #4]
   11af0:	bl	13860 <__assert_fail@plt+0x2b20>
   11af4:	mov	r0, #0
   11af8:	b	118ec <__assert_fail@plt+0xbac>
   11afc:	ldr	r3, [pc, #1736]	; 121cc <__assert_fail@plt+0x148c>
   11b00:	add	r5, sp, #60	; 0x3c
   11b04:	ldr	r1, [r3, #4]
   11b08:	mov	r0, r5
   11b0c:	bl	140b8 <__assert_fail@plt+0x3378>
   11b10:	ldm	r5, {r0, r1}
   11b14:	bl	12ddc <__assert_fail@plt+0x209c>
   11b18:	mov	r0, #0
   11b1c:	b	118ec <__assert_fail@plt+0xbac>
   11b20:	ldr	r3, [pc, #1712]	; 121d8 <__assert_fail@plt+0x1498>
   11b24:	add	r5, sp, #52	; 0x34
   11b28:	mov	r0, r5
   11b2c:	ldr	r1, [r3, #8]
   11b30:	bl	140b8 <__assert_fail@plt+0x3378>
   11b34:	ldm	r5, {r0, r1}
   11b38:	bl	12ddc <__assert_fail@plt+0x209c>
   11b3c:	mov	r0, #0
   11b40:	b	118ec <__assert_fail@plt+0xbac>
   11b44:	ldr	r5, [pc, #1676]	; 121d8 <__assert_fail@plt+0x1498>
   11b48:	ldr	r6, [pc, #1688]	; 121e8 <__assert_fail@plt+0x14a8>
   11b4c:	ldr	r0, [r5]
   11b50:	ldr	r1, [r6]
   11b54:	cmn	r0, #1
   11b58:	beq	11b6c <__assert_fail@plt+0xe2c>
   11b5c:	bl	10c8c <ungetc@plt>
   11b60:	ldr	r1, [r6]
   11b64:	mvn	r3, #0
   11b68:	str	r3, [r5]
   11b6c:	add	r5, sp, #16
   11b70:	mov	r3, #10
   11b74:	mov	r0, r5
   11b78:	mov	r2, r3
   11b7c:	bl	147f4 <__assert_fail@plt+0x3ab4>
   11b80:	ldm	r5, {r0, r1}
   11b84:	add	r5, sp, #68	; 0x44
   11b88:	stm	r5, {r0, r1}
   11b8c:	ldr	r0, [r6]
   11b90:	bl	10b84 <ferror@plt>
   11b94:	cmp	r0, #0
   11b98:	beq	11ff4 <__assert_fail@plt+0x12b4>
   11b9c:	mov	r0, #10
   11ba0:	b	118ec <__assert_fail@plt+0xbac>
   11ba4:	cmn	r6, #1
   11ba8:	str	r2, [sp, #12]
   11bac:	beq	11b9c <__assert_fail@plt+0xe5c>
   11bb0:	bl	13408 <__assert_fail@plt+0x26c8>
   11bb4:	ldr	r2, [sp, #12]
   11bb8:	clz	r2, r2
   11bbc:	lsr	r2, r2, #5
   11bc0:	cmp	r0, #0
   11bc4:	movgt	r0, #0
   11bc8:	movle	r0, #1
   11bcc:	cmp	r0, r2
   11bd0:	beq	11978 <__assert_fail@plt+0xc38>
   11bd4:	mov	r0, #2
   11bd8:	b	118ec <__assert_fail@plt+0xbac>
   11bdc:	cmn	r6, #1
   11be0:	str	r2, [sp, #12]
   11be4:	beq	11b9c <__assert_fail@plt+0xe5c>
   11be8:	bl	13408 <__assert_fail@plt+0x26c8>
   11bec:	ldr	r2, [sp, #12]
   11bf0:	clz	r2, r2
   11bf4:	lsr	r2, r2, #5
   11bf8:	adds	r0, r0, #0
   11bfc:	movne	r0, #1
   11c00:	cmp	r0, r2
   11c04:	beq	11978 <__assert_fail@plt+0xc38>
   11c08:	b	11bd4 <__assert_fail@plt+0xe94>
   11c0c:	cmn	r6, #1
   11c10:	beq	11b9c <__assert_fail@plt+0xe5c>
   11c14:	str	r2, [sp, #12]
   11c18:	bl	13408 <__assert_fail@plt+0x26c8>
   11c1c:	ldr	r2, [sp, #12]
   11c20:	clz	r2, r2
   11c24:	lsr	r2, r2, #5
   11c28:	mvn	r0, r0
   11c2c:	lsr	r0, r0, #31
   11c30:	cmp	r2, r0
   11c34:	beq	11978 <__assert_fail@plt+0xc38>
   11c38:	b	11bd4 <__assert_fail@plt+0xe94>
   11c3c:	cmn	r6, #1
   11c40:	beq	11b9c <__assert_fail@plt+0xe5c>
   11c44:	add	r0, sp, #68	; 0x44
   11c48:	bl	130f4 <__assert_fail@plt+0x23b4>
   11c4c:	subs	r1, r0, #0
   11c50:	bne	11978 <__assert_fail@plt+0xc38>
   11c54:	ldr	r5, [sp, #68]	; 0x44
   11c58:	cmp	r5, #1
   11c5c:	beq	120c4 <__assert_fail@plt+0x1384>
   11c60:	ldr	r5, [pc, #1372]	; 121c4 <__assert_fail@plt+0x1484>
   11c64:	ldr	r3, [pc, #1364]	; 121c0 <__assert_fail@plt+0x1480>
   11c68:	ldr	r2, [pc, #1404]	; 121ec <__assert_fail@plt+0x14ac>
   11c6c:	ldr	r0, [r5]
   11c70:	ldr	r3, [r3]
   11c74:	mov	r1, #1
   11c78:	bl	10ce0 <__fprintf_chk@plt>
   11c7c:	ldr	r0, [r5]
   11c80:	bl	17a38 <__assert_fail@plt+0x6cf8>
   11c84:	b	11978 <__assert_fail@plt+0xc38>
   11c88:	cmn	r6, #1
   11c8c:	beq	11b9c <__assert_fail@plt+0xe5c>
   11c90:	add	r7, sp, #68	; 0x44
   11c94:	mov	r0, r7
   11c98:	bl	130f4 <__assert_fail@plt+0x23b4>
   11c9c:	subs	r1, r0, #0
   11ca0:	bne	11978 <__assert_fail@plt+0xc38>
   11ca4:	ldr	r5, [sp, #68]	; 0x44
   11ca8:	cmp	r5, #1
   11cac:	beq	1217c <__assert_fail@plt+0x143c>
   11cb0:	mov	r0, r7
   11cb4:	bl	130f4 <__assert_fail@plt+0x23b4>
   11cb8:	cmp	r0, #0
   11cbc:	beq	11c60 <__assert_fail@plt+0xf20>
   11cc0:	b	11978 <__assert_fail@plt+0xc38>
   11cc4:	ldr	r3, [pc, #1280]	; 121cc <__assert_fail@plt+0x148c>
   11cc8:	ldr	r0, [pc, #1312]	; 121f0 <__assert_fail@plt+0x14b0>
   11ccc:	ldr	r1, [r3, #4]
   11cd0:	bl	1319c <__assert_fail@plt+0x245c>
   11cd4:	mov	r0, #0
   11cd8:	b	118ec <__assert_fail@plt+0xbac>
   11cdc:	ldr	r3, [pc, #1256]	; 121cc <__assert_fail@plt+0x148c>
   11ce0:	ldr	r0, [pc, #1292]	; 121f4 <__assert_fail@plt+0x14b4>
   11ce4:	ldr	r1, [r3, #4]
   11ce8:	bl	1319c <__assert_fail@plt+0x245c>
   11cec:	mov	r0, #0
   11cf0:	b	118ec <__assert_fail@plt+0xbac>
   11cf4:	ldr	r3, [pc, #1232]	; 121cc <__assert_fail@plt+0x148c>
   11cf8:	ldr	r0, [pc, #1272]	; 121f8 <__assert_fail@plt+0x14b8>
   11cfc:	ldr	r1, [r3, #4]
   11d00:	bl	1319c <__assert_fail@plt+0x245c>
   11d04:	mov	r0, #0
   11d08:	b	118ec <__assert_fail@plt+0xbac>
   11d0c:	mov	r0, #8
   11d10:	b	118ec <__assert_fail@plt+0xbac>
   11d14:	sub	r6, r6, #60	; 0x3c
   11d18:	cmp	r6, #2
   11d1c:	movhi	r0, #7
   11d20:	movls	r0, #9
   11d24:	b	118ec <__assert_fail@plt+0xbac>
   11d28:	ldr	r3, [pc, #1180]	; 121cc <__assert_fail@plt+0x148c>
   11d2c:	ldr	r0, [pc, #1224]	; 121fc <__assert_fail@plt+0x14bc>
   11d30:	ldr	r1, [r3, #4]
   11d34:	bl	1319c <__assert_fail@plt+0x245c>
   11d38:	mov	r0, #0
   11d3c:	b	118ec <__assert_fail@plt+0xbac>
   11d40:	ldr	r3, [pc, #1156]	; 121cc <__assert_fail@plt+0x148c>
   11d44:	ldr	r0, [pc, #1204]	; 12200 <__assert_fail@plt+0x14c0>
   11d48:	ldr	r1, [r3, #4]
   11d4c:	bl	1319c <__assert_fail@plt+0x245c>
   11d50:	mov	r0, #0
   11d54:	b	118ec <__assert_fail@plt+0xbac>
   11d58:	mov	r0, #5
   11d5c:	b	118ec <__assert_fail@plt+0xbac>
   11d60:	add	r6, sp, #68	; 0x44
   11d64:	mov	r0, r6
   11d68:	bl	130f4 <__assert_fail@plt+0x23b4>
   11d6c:	subs	r5, r0, #0
   11d70:	bne	118e8 <__assert_fail@plt+0xba8>
   11d74:	mov	r2, r5
   11d78:	ldm	r6, {r0, r1}
   11d7c:	bl	137d8 <__assert_fail@plt+0x2a98>
   11d80:	add	r6, sp, #84	; 0x54
   11d84:	mov	r1, r0
   11d88:	mov	r0, r6
   11d8c:	bl	140b8 <__assert_fail@plt+0x3378>
   11d90:	ldm	r6, {r0, r1}
   11d94:	bl	12ddc <__assert_fail@plt+0x209c>
   11d98:	mov	r0, r5
   11d9c:	b	118ec <__assert_fail@plt+0xbac>
   11da0:	add	r0, sp, #68	; 0x44
   11da4:	bl	130f4 <__assert_fail@plt+0x23b4>
   11da8:	subs	r1, r0, #0
   11dac:	bne	118e8 <__assert_fail@plt+0xba8>
   11db0:	ldr	r3, [sp, #68]	; 0x44
   11db4:	cmp	r3, #1
   11db8:	beq	12104 <__assert_fail@plt+0x13c4>
   11dbc:	add	r5, sp, #76	; 0x4c
   11dc0:	b	11940 <__assert_fail@plt+0xc00>
   11dc4:	cmn	r6, #1
   11dc8:	beq	11b9c <__assert_fail@plt+0xe5c>
   11dcc:	add	r5, sp, #68	; 0x44
   11dd0:	mov	r0, r5
   11dd4:	bl	130f4 <__assert_fail@plt+0x23b4>
   11dd8:	cmp	r0, #0
   11ddc:	bne	11978 <__assert_fail@plt+0xc38>
   11de0:	mov	r0, r6
   11de4:	ldm	r5, {r1, r2}
   11de8:	bl	12e4c <__assert_fail@plt+0x210c>
   11dec:	mov	r0, #1
   11df0:	b	118ec <__assert_fail@plt+0xbac>
   11df4:	bl	12d58 <__assert_fail@plt+0x2018>
   11df8:	mov	r0, #0
   11dfc:	b	118ec <__assert_fail@plt+0xbac>
   11e00:	add	r0, sp, #68	; 0x44
   11e04:	bl	130f4 <__assert_fail@plt+0x23b4>
   11e08:	subs	r1, r0, #0
   11e0c:	bne	118e8 <__assert_fail@plt+0xba8>
   11e10:	ldr	r3, [sp, #68]	; 0x44
   11e14:	cmp	r3, #1
   11e18:	beq	12114 <__assert_fail@plt+0x13d4>
   11e1c:	cmp	r3, #2
   11e20:	beq	120a8 <__assert_fail@plt+0x1368>
   11e24:	mvn	r1, #0
   11e28:	ldr	r0, [pc, #980]	; 12204 <__assert_fail@plt+0x14c4>
   11e2c:	bl	11490 <__assert_fail@plt+0x750>
   11e30:	add	r5, sp, #28
   11e34:	mov	r0, r5
   11e38:	mov	r2, #1
   11e3c:	add	r1, sp, #92	; 0x5c
   11e40:	bl	14794 <__assert_fail@plt+0x3a54>
   11e44:	ldm	r5, {r0, r1}
   11e48:	bl	12ddc <__assert_fail@plt+0x209c>
   11e4c:	mov	r0, #0
   11e50:	b	118ec <__assert_fail@plt+0xbac>
   11e54:	ldr	r3, [pc, #880]	; 121cc <__assert_fail@plt+0x148c>
   11e58:	ldr	r0, [pc, #936]	; 12208 <__assert_fail@plt+0x14c8>
   11e5c:	ldr	r1, [r3, #4]
   11e60:	bl	1319c <__assert_fail@plt+0x245c>
   11e64:	mov	r0, #0
   11e68:	b	118ec <__assert_fail@plt+0xbac>
   11e6c:	mov	r0, #6
   11e70:	b	118ec <__assert_fail@plt+0xbac>
   11e74:	add	r6, sp, #68	; 0x44
   11e78:	mov	r0, r6
   11e7c:	bl	12ea0 <__assert_fail@plt+0x2160>
   11e80:	subs	r5, r0, #0
   11e84:	bne	118e8 <__assert_fail@plt+0xba8>
   11e88:	add	r7, sp, #36	; 0x24
   11e8c:	ldm	r6, {r1, r2}
   11e90:	mov	r0, r7
   11e94:	bl	11604 <__assert_fail@plt+0x8c4>
   11e98:	ldm	r7, {r0, r1}
   11e9c:	bl	12ddc <__assert_fail@plt+0x209c>
   11ea0:	mov	r0, r5
   11ea4:	b	118ec <__assert_fail@plt+0xbac>
   11ea8:	add	r0, sp, #68	; 0x44
   11eac:	bl	130f4 <__assert_fail@plt+0x23b4>
   11eb0:	subs	r1, r0, #0
   11eb4:	bne	118e8 <__assert_fail@plt+0xba8>
   11eb8:	ldr	r6, [pc, #780]	; 121cc <__assert_fail@plt+0x148c>
   11ebc:	ldr	r2, [sp, #68]	; 0x44
   11ec0:	mov	r3, #1
   11ec4:	cmp	r2, r3
   11ec8:	str	r1, [r6, #8]
   11ecc:	str	r3, [r6, #12]
   11ed0:	beq	12130 <__assert_fail@plt+0x13f0>
   11ed4:	ldr	r7, [pc, #744]	; 121c4 <__assert_fail@plt+0x1484>
   11ed8:	ldr	r3, [pc, #736]	; 121c0 <__assert_fail@plt+0x1480>
   11edc:	mov	r5, #0
   11ee0:	ldr	r2, [pc, #804]	; 1220c <__assert_fail@plt+0x14cc>
   11ee4:	ldr	r3, [r3]
   11ee8:	mov	r1, #1
   11eec:	ldr	r0, [r7]
   11ef0:	str	r5, [r6, #8]
   11ef4:	bl	10ce0 <__fprintf_chk@plt>
   11ef8:	ldr	r0, [r7]
   11efc:	bl	17a38 <__assert_fail@plt+0x6cf8>
   11f00:	mov	r0, r5
   11f04:	b	118ec <__assert_fail@plt+0xbac>
   11f08:	add	r0, sp, #68	; 0x44
   11f0c:	bl	130f4 <__assert_fail@plt+0x23b4>
   11f10:	subs	r1, r0, #0
   11f14:	bne	11f38 <__assert_fail@plt+0x11f8>
   11f18:	ldr	r3, [sp, #68]	; 0x44
   11f1c:	cmp	r3, #1
   11f20:	beq	12124 <__assert_fail@plt+0x13e4>
   11f24:	cmp	r3, #2
   11f28:	beq	1209c <__assert_fail@plt+0x135c>
   11f2c:	mvn	r1, #0
   11f30:	ldr	r0, [pc, #716]	; 12204 <__assert_fail@plt+0x14c4>
   11f34:	bl	11490 <__assert_fail@plt+0x750>
   11f38:	ldr	r5, [pc, #720]	; 12210 <__assert_fail@plt+0x14d0>
   11f3c:	ldr	r0, [r5]
   11f40:	bl	10b60 <fflush@plt>
   11f44:	ldr	r0, [r5]
   11f48:	bl	17a38 <__assert_fail@plt+0x6cf8>
   11f4c:	mov	r0, #0
   11f50:	b	118ec <__assert_fail@plt+0xbac>
   11f54:	ldr	r3, [pc, #636]	; 121d8 <__assert_fail@plt+0x1498>
   11f58:	add	r5, sp, #68	; 0x44
   11f5c:	b	11b04 <__assert_fail@plt+0xdc4>
   11f60:	cmn	r6, #1
   11f64:	beq	11b9c <__assert_fail@plt+0xe5c>
   11f68:	add	r5, sp, #68	; 0x44
   11f6c:	mov	r0, r6
   11f70:	mov	r1, r5
   11f74:	bl	1365c <__assert_fail@plt+0x291c>
   11f78:	cmp	r0, #0
   11f7c:	bne	11978 <__assert_fail@plt+0xc38>
   11f80:	b	11a5c <__assert_fail@plt+0xd1c>
   11f84:	add	r0, sp, #68	; 0x44
   11f88:	bl	130f4 <__assert_fail@plt+0x23b4>
   11f8c:	cmp	r0, #0
   11f90:	bne	118e8 <__assert_fail@plt+0xba8>
   11f94:	ldr	r3, [sp, #68]	; 0x44
   11f98:	cmp	r3, #1
   11f9c:	beq	120f4 <__assert_fail@plt+0x13b4>
   11fa0:	bl	1371c <__assert_fail@plt+0x29dc>
   11fa4:	mov	r0, #0
   11fa8:	b	118ec <__assert_fail@plt+0xbac>
   11fac:	ldr	r7, [pc, #528]	; 121c4 <__assert_fail@plt+0x1484>
   11fb0:	ldr	r3, [pc, #520]	; 121c0 <__assert_fail@plt+0x1480>
   11fb4:	ldr	r6, [pc, #596]	; 12210 <__assert_fail@plt+0x14d0>
   11fb8:	mov	r5, r0
   11fbc:	ldr	r3, [r3]
   11fc0:	ldr	r2, [pc, #588]	; 12214 <__assert_fail@plt+0x14d4>
   11fc4:	mov	r1, #1
   11fc8:	ldr	r0, [r7]
   11fcc:	bl	10ce0 <__fprintf_chk@plt>
   11fd0:	ldr	r0, [r7]
   11fd4:	bl	17a38 <__assert_fail@plt+0x6cf8>
   11fd8:	ldr	r0, [r6]
   11fdc:	mov	r1, r5
   11fe0:	ldr	r2, [pc, #560]	; 12218 <__assert_fail@plt+0x14d8>
   11fe4:	bl	1140c <__assert_fail@plt+0x6cc>
   11fe8:	ldr	r0, [r6]
   11fec:	bl	17a38 <__assert_fail@plt+0x6cf8>
   11ff0:	b	118e8 <__assert_fail@plt+0xba8>
   11ff4:	ldm	r5, {r0, r1}
   11ff8:	bl	12ddc <__assert_fail@plt+0x209c>
   11ffc:	mov	r0, #3
   12000:	b	118ec <__assert_fail@plt+0xbac>
   12004:	mov	r0, r6
   12008:	ldm	r5, {r1, r2}
   1200c:	bl	13014 <__assert_fail@plt+0x22d4>
   12010:	mov	r0, #1
   12014:	b	118ec <__assert_fail@plt+0xbac>
   12018:	mov	r1, r5
   1201c:	ldr	r0, [sp, #72]	; 0x48
   12020:	bl	14040 <__assert_fail@plt+0x3300>
   12024:	cmp	r0, #1
   12028:	mov	r3, r0
   1202c:	ble	119f8 <__assert_fail@plt+0xcb8>
   12030:	ldr	r2, [pc, #416]	; 121d8 <__assert_fail@plt+0x1498>
   12034:	mov	r0, r5
   12038:	str	r3, [r2, #4]
   1203c:	b	118ec <__assert_fail@plt+0xbac>
   12040:	mov	r1, r5
   12044:	ldr	r0, [sp, #72]	; 0x48
   12048:	bl	14040 <__assert_fail@plt+0x3300>
   1204c:	subs	r3, r0, #0
   12050:	blt	11a88 <__assert_fail@plt+0xd48>
   12054:	ldr	r2, [pc, #368]	; 121cc <__assert_fail@plt+0x148c>
   12058:	mov	r0, r5
   1205c:	str	r3, [r2, #4]
   12060:	b	118ec <__assert_fail@plt+0xbac>
   12064:	ldr	r3, [pc, #352]	; 121cc <__assert_fail@plt+0x148c>
   12068:	add	r2, sp, #92	; 0x5c
   1206c:	ldr	r0, [sp, #72]	; 0x48
   12070:	ldr	r1, [r3, #4]
   12074:	bl	13f94 <__assert_fail@plt+0x3254>
   12078:	cmp	r0, #0
   1207c:	bne	118e8 <__assert_fail@plt+0xba8>
   12080:	add	r0, sp, #72	; 0x48
   12084:	bl	145ac <__assert_fail@plt+0x386c>
   12088:	ldr	r3, [sp, #92]	; 0x5c
   1208c:	str	r3, [sp, #72]	; 0x48
   12090:	ldm	r5, {r0, r1}
   12094:	bl	12ddc <__assert_fail@plt+0x209c>
   12098:	b	118e8 <__assert_fail@plt+0xba8>
   1209c:	ldr	r0, [sp, #72]	; 0x48
   120a0:	bl	14744 <__assert_fail@plt+0x3a04>
   120a4:	b	11f38 <__assert_fail@plt+0x11f8>
   120a8:	ldr	r0, [sp, #72]	; 0x48
   120ac:	bl	14918 <__assert_fail@plt+0x3bd8>
   120b0:	ldrb	r3, [r0]
   120b4:	add	r0, sp, #72	; 0x48
   120b8:	strb	r3, [sp, #92]	; 0x5c
   120bc:	bl	14714 <__assert_fail@plt+0x39d4>
   120c0:	b	11e30 <__assert_fail@plt+0x10f0>
   120c4:	ldr	r0, [sp, #72]	; 0x48
   120c8:	bl	14040 <__assert_fail@plt+0x3300>
   120cc:	subs	r2, r0, #0
   120d0:	blt	11c60 <__assert_fail@plt+0xf20>
   120d4:	add	r7, sp, #92	; 0x5c
   120d8:	mov	r1, r6
   120dc:	mov	r0, r7
   120e0:	bl	13a34 <__assert_fail@plt+0x2cf4>
   120e4:	ldm	r7, {r0, r1}
   120e8:	bl	12ddc <__assert_fail@plt+0x209c>
   120ec:	mov	r0, r5
   120f0:	b	118ec <__assert_fail@plt+0xbac>
   120f4:	mov	r1, r0
   120f8:	ldr	r0, [sp, #72]	; 0x48
   120fc:	bl	14040 <__assert_fail@plt+0x3300>
   12100:	b	11fa0 <__assert_fail@plt+0x1260>
   12104:	ldr	r0, [sp, #72]	; 0x48
   12108:	bl	14404 <__assert_fail@plt+0x36c4>
   1210c:	mov	r1, r0
   12110:	b	11dbc <__assert_fail@plt+0x107c>
   12114:	ldr	r0, [sp, #72]	; 0x48
   12118:	bl	14040 <__assert_fail@plt+0x3300>
   1211c:	strb	r0, [sp, #92]	; 0x5c
   12120:	b	11e30 <__assert_fail@plt+0x10f0>
   12124:	ldr	r0, [sp, #72]	; 0x48
   12128:	bl	1447c <__assert_fail@plt+0x373c>
   1212c:	b	11f38 <__assert_fail@plt+0x11f8>
   12130:	ldr	r0, [sp, #72]	; 0x48
   12134:	bl	14040 <__assert_fail@plt+0x3300>
   12138:	cmp	r0, #0
   1213c:	sub	r0, r0, #1
   12140:	str	r0, [r6, #8]
   12144:	movgt	r0, #4
   12148:	bgt	118ec <__assert_fail@plt+0xbac>
   1214c:	b	11ed4 <__assert_fail@plt+0x1194>
   12150:	mov	r1, r5
   12154:	ldr	r0, [sp, #72]	; 0x48
   12158:	bl	14040 <__assert_fail@plt+0x3300>
   1215c:	sub	r3, r0, #2
   12160:	cmp	r3, #14
   12164:	mov	r2, r0
   12168:	bhi	11ab4 <__assert_fail@plt+0xd74>
   1216c:	ldr	r3, [pc, #100]	; 121d8 <__assert_fail@plt+0x1498>
   12170:	mov	r0, r5
   12174:	str	r2, [r3, #8]
   12178:	b	118ec <__assert_fail@plt+0xbac>
   1217c:	ldr	r0, [sp, #72]	; 0x48
   12180:	bl	14040 <__assert_fail@plt+0x3300>
   12184:	mov	r8, r0
   12188:	mov	r0, r7
   1218c:	bl	130f4 <__assert_fail@plt+0x23b4>
   12190:	cmp	r0, #0
   12194:	bne	11978 <__assert_fail@plt+0xc38>
   12198:	cmp	r8, #0
   1219c:	blt	11c60 <__assert_fail@plt+0xf20>
   121a0:	mov	r0, r6
   121a4:	mov	r1, r8
   121a8:	ldm	r7, {r2, r3}
   121ac:	bl	13928 <__assert_fail@plt+0x2be8>
   121b0:	mov	r0, r5
   121b4:	b	118ec <__assert_fail@plt+0xbac>
   121b8:	bl	10bb4 <__stack_chk_fail@plt>
   121bc:	andeq	r8, r2, r0, lsr lr
   121c0:	andeq	r9, r2, r4, ror r4
   121c4:	andeq	r9, r2, r8, lsr #32
   121c8:	muleq	r1, r8, r4
   121cc:	andeq	r9, r2, r0, asr #32
   121d0:	ldrdeq	r3, [r1], -r8
   121d4:	andeq	r3, r1, ip, asr #29
   121d8:	andeq	r9, r2, r8
   121dc:	andeq	r8, r1, r4, ror #8
   121e0:	andeq	r8, r1, ip, lsr r4
   121e4:	strdeq	r8, [r1], -ip
   121e8:	andeq	r9, r2, r0, lsr r0
   121ec:	andeq	r8, r1, ip, ror #9
   121f0:	andeq	r3, r1, r8, ror #26
   121f4:	andeq	r3, r1, r0, lsr sp
   121f8:	andeq	r3, r1, ip, asr lr
   121fc:	strdeq	r3, [r1], -ip
   12200:	andeq	r3, r1, r8, asr #25
   12204:	andeq	r8, r1, ip, ror #7
   12208:	andeq	r3, r1, ip, asr pc
   1220c:	andeq	r8, r1, r4, asr #9
   12210:	andeq	r9, r2, r4, lsr r0
   12214:	andeq	r8, r1, r8, asr #3
   12218:	andeq	r8, r1, ip, lsl r5
   1221c:	push	{r4, lr}
   12220:	ldr	r1, [pc, #16]	; 12238 <__assert_fail@plt+0x14f8>
   12224:	bl	10b9c <signal@plt>
   12228:	ldr	r3, [pc, #12]	; 1223c <__assert_fail@plt+0x14fc>
   1222c:	mov	r2, #1
   12230:	str	r2, [r3, #16]
   12234:	pop	{r4, pc}
   12238:	andeq	r2, r1, ip, lsl r2
   1223c:	andeq	r9, r2, r0, asr #32
   12240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12244:	sub	sp, sp, #36	; 0x24
   12248:	ldr	r7, [pc, #1208]	; 12708 <__assert_fail@plt+0x19c8>
   1224c:	ldr	r2, [r0]
   12250:	ldr	r3, [r7]
   12254:	cmp	r2, #2
   12258:	str	r3, [sp, #28]
   1225c:	beq	122a4 <__assert_fail@plt+0x1564>
   12260:	ldr	r4, [pc, #1188]	; 1270c <__assert_fail@plt+0x19cc>
   12264:	ldr	r3, [pc, #1188]	; 12710 <__assert_fail@plt+0x19d0>
   12268:	ldr	r2, [pc, #1188]	; 12714 <__assert_fail@plt+0x19d4>
   1226c:	mov	r1, #1
   12270:	ldr	r3, [r3]
   12274:	ldr	r0, [r4]
   12278:	bl	10ce0 <__fprintf_chk@plt>
   1227c:	ldr	r0, [r4]
   12280:	bl	17a38 <__assert_fail@plt+0x6cf8>
   12284:	mov	r9, #0
   12288:	ldr	r2, [sp, #28]
   1228c:	ldr	r3, [r7]
   12290:	mov	r0, r9
   12294:	cmp	r2, r3
   12298:	bne	126fc <__assert_fail@plt+0x19bc>
   1229c:	add	sp, sp, #36	; 0x24
   122a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a4:	ldr	r6, [pc, #1132]	; 12718 <__assert_fail@plt+0x19d8>
   122a8:	mov	r3, #0
   122ac:	mov	r8, r0
   122b0:	ldr	r0, [r0, #4]
   122b4:	str	r3, [r6, #16]
   122b8:	bl	14918 <__assert_fail@plt+0x3bd8>
   122bc:	mov	r4, r0
   122c0:	ldr	r0, [r8, #4]
   122c4:	bl	14920 <__assert_fail@plt+0x3be0>
   122c8:	add	r5, r4, r0
   122cc:	cmp	r4, r5
   122d0:	bcs	12360 <__assert_fail@plt+0x1620>
   122d4:	ldr	r2, [r6, #16]
   122d8:	cmp	r2, #0
   122dc:	bne	12360 <__assert_fail@plt+0x1620>
   122e0:	mov	sl, #1
   122e4:	add	fp, r4, #1
   122e8:	mvn	r1, #0
   122ec:	cmp	fp, r5
   122f0:	ldrb	r0, [r4]
   122f4:	str	r1, [sp]
   122f8:	bcs	125bc <__assert_fail@plt+0x187c>
   122fc:	ldrb	r3, [r4, #1]
   12300:	mov	r1, r3
   12304:	str	r3, [sp]
   12308:	bl	116a4 <__assert_fail@plt+0x964>
   1230c:	sub	r0, r0, #1
   12310:	cmp	r0, #9
   12314:	ldrls	pc, [pc, r0, lsl #2]
   12318:	b	12700 <__assert_fail@plt+0x19c0>
   1231c:	ldrdeq	r2, [r1], -ip
   12320:	muleq	r1, r0, r5
   12324:	andeq	r2, r1, r8, ror #6
   12328:	andeq	r2, r1, r4, ror r5
   1232c:	andeq	r2, r1, r0, lsr r5
   12330:	andeq	r2, r1, ip, lsr r4
   12334:	andeq	r2, r1, r8, lsr #8
   12338:			; <UNDEFINED> instruction: 0x000124b8
   1233c:	andeq	r2, r1, r4, asr #6
   12340:	strdeq	r2, [r1], -r4
   12344:	mov	r4, fp
   12348:	mov	r2, #1
   1234c:	cmp	r4, r5
   12350:	bcs	12360 <__assert_fail@plt+0x1620>
   12354:	ldr	r3, [r6, #16]
   12358:	cmp	r3, #0
   1235c:	beq	122e4 <__assert_fail@plt+0x15a4>
   12360:	mov	r9, #0
   12364:	b	12288 <__assert_fail@plt+0x1548>
   12368:	add	r9, sp, #4
   1236c:	cmp	fp, r5
   12370:	bcs	126d8 <__assert_fail@plt+0x1998>
   12374:	ldrb	r3, [fp]
   12378:	cmp	r3, #32
   1237c:	cmpne	r3, #35	; 0x23
   12380:	moveq	r2, #1
   12384:	movne	r2, #0
   12388:	sub	r1, r3, #9
   1238c:	cmp	r1, #1
   12390:	orrls	r2, r2, #1
   12394:	cmp	r2, #0
   12398:	beq	12648 <__assert_fail@plt+0x1908>
   1239c:	cmp	r3, #35	; 0x23
   123a0:	add	r0, fp, #1
   123a4:	beq	1262c <__assert_fail@plt+0x18ec>
   123a8:	mov	r3, r0
   123ac:	b	123e4 <__assert_fail@plt+0x16a4>
   123b0:	ldrb	r2, [r3], #1
   123b4:	cmp	r2, #35	; 0x23
   123b8:	cmpne	r2, #32
   123bc:	moveq	r1, #1
   123c0:	movne	r1, #0
   123c4:	sub	r0, r2, #9
   123c8:	cmp	r0, #1
   123cc:	orrls	r1, r1, #1
   123d0:	cmp	r1, #0
   123d4:	beq	1264c <__assert_fail@plt+0x190c>
   123d8:	cmp	r2, #35	; 0x23
   123dc:	mov	r0, r3
   123e0:	beq	1262c <__assert_fail@plt+0x18ec>
   123e4:	cmp	r5, r3
   123e8:	mov	r4, r3
   123ec:	bne	123b0 <__assert_fail@plt+0x1670>
   123f0:	mov	r0, r9
   123f4:	bl	130f4 <__assert_fail@plt+0x23b4>
   123f8:	cmp	r0, #0
   123fc:	bne	12360 <__assert_fail@plt+0x1620>
   12400:	ldr	r3, [sp, #4]
   12404:	cmp	r3, #1
   12408:	beq	124a8 <__assert_fail@plt+0x1768>
   1240c:	cmp	r3, #2
   12410:	beq	12664 <__assert_fail@plt+0x1924>
   12414:	mvn	r1, #0
   12418:	ldr	r0, [pc, #764]	; 1271c <__assert_fail@plt+0x19dc>
   1241c:	bl	11490 <__assert_fail@plt+0x750>
   12420:	mov	r2, #0
   12424:	b	1234c <__assert_fail@plt+0x160c>
   12428:	mov	r0, fp
   1242c:	bl	114fc <__assert_fail@plt+0x7bc>
   12430:	mov	r2, #0
   12434:	mov	r4, r0
   12438:	b	1234c <__assert_fail@plt+0x160c>
   1243c:	cmp	fp, r5
   12440:	movcs	r4, fp
   12444:	movcs	r2, #0
   12448:	bcs	12498 <__assert_fail@plt+0x1758>
   1244c:	mov	r3, fp
   12450:	mov	r1, #1
   12454:	ldrb	r2, [r3], #1
   12458:	cmp	r2, #93	; 0x5d
   1245c:	subeq	r1, r1, #1
   12460:	beq	1246c <__assert_fail@plt+0x172c>
   12464:	cmp	r2, #91	; 0x5b
   12468:	addeq	r1, r1, #1
   1246c:	cmp	r3, r5
   12470:	movcs	r2, #0
   12474:	movcc	r2, #1
   12478:	cmp	r1, #0
   1247c:	movle	r2, #0
   12480:	cmp	r2, #0
   12484:	mov	r4, r3
   12488:	bne	12454 <__assert_fail@plt+0x1714>
   1248c:	cmp	r1, #0
   12490:	sub	r2, r3, fp
   12494:	subeq	r2, r2, #1
   12498:	add	r9, sp, #20
   1249c:	mov	r1, fp
   124a0:	mov	r0, r9
   124a4:	bl	14794 <__assert_fail@plt+0x3a54>
   124a8:	ldm	r9, {r0, r1}
   124ac:	bl	12ddc <__assert_fail@plt+0x209c>
   124b0:	mov	r2, #0
   124b4:	b	1234c <__assert_fail@plt+0x160c>
   124b8:	sub	r2, r5, fp
   124bc:	mov	r0, fp
   124c0:	mov	r1, #10
   124c4:	bl	10cec <memchr@plt>
   124c8:	cmp	r0, #0
   124cc:	beq	12360 <__assert_fail@plt+0x1620>
   124d0:	add	r4, r0, #1
   124d4:	mov	r2, #0
   124d8:	b	1234c <__assert_fail@plt+0x160c>
   124dc:	ldr	r3, [sp]
   124e0:	cmn	r3, #1
   124e4:	beq	125f8 <__assert_fail@plt+0x18b8>
   124e8:	add	r4, r4, #2
   124ec:	mov	r2, #0
   124f0:	b	1234c <__assert_fail@plt+0x160c>
   124f4:	ldr	r3, [pc, #548]	; 12720 <__assert_fail@plt+0x19e0>
   124f8:	ldr	r0, [r3]
   124fc:	bl	10b84 <ferror@plt>
   12500:	ldr	r3, [pc, #520]	; 12710 <__assert_fail@plt+0x19d0>
   12504:	subs	r9, r0, #0
   12508:	bne	12604 <__assert_fail@plt+0x18c4>
   1250c:	ldr	r4, [pc, #504]	; 1270c <__assert_fail@plt+0x19cc>
   12510:	ldr	r2, [pc, #524]	; 12724 <__assert_fail@plt+0x19e4>
   12514:	ldr	r3, [r3]
   12518:	ldr	r0, [r4]
   1251c:	mov	r1, #1
   12520:	bl	10ce0 <__fprintf_chk@plt>
   12524:	ldr	r0, [r4]
   12528:	bl	17a38 <__assert_fail@plt+0x6cf8>
   1252c:	b	12288 <__assert_fail@plt+0x1548>
   12530:	ldr	r2, [pc, #496]	; 12728 <__assert_fail@plt+0x19e8>
   12534:	add	r9, sp, #12
   12538:	mov	r3, sp
   1253c:	mov	r0, r9
   12540:	ldr	r2, [r2, #8]
   12544:	ldr	r1, [pc, #480]	; 1272c <__assert_fail@plt+0x19ec>
   12548:	str	r4, [r6]
   1254c:	bl	14120 <__assert_fail@plt+0x33e0>
   12550:	ldm	r9, {r0, r1}
   12554:	bl	12ddc <__assert_fail@plt+0x209c>
   12558:	ldr	r3, [sp]
   1255c:	ldr	r4, [r6]
   12560:	cmn	r3, #1
   12564:	beq	124b0 <__assert_fail@plt+0x1770>
   12568:	sub	r4, r4, #1
   1256c:	mov	r2, #0
   12570:	b	1234c <__assert_fail@plt+0x160c>
   12574:	ldr	r2, [r6, #8]
   12578:	cmp	r2, sl
   1257c:	bge	126ec <__assert_fail@plt+0x19ac>
   12580:	sub	sl, sl, r2
   12584:	mov	r4, fp
   12588:	mov	r2, #0
   1258c:	b	1234c <__assert_fail@plt+0x160c>
   12590:	add	r9, sp, #4
   12594:	mov	r1, r9
   12598:	ldr	r0, [sp]
   1259c:	bl	12f30 <__assert_fail@plt+0x21f0>
   125a0:	add	r4, r4, #2
   125a4:	cmp	r0, #0
   125a8:	bne	124b0 <__assert_fail@plt+0x1770>
   125ac:	ldm	r9, {r0, r1}
   125b0:	mov	fp, r4
   125b4:	bl	12ddc <__assert_fail@plt+0x209c>
   125b8:	b	1236c <__assert_fail@plt+0x162c>
   125bc:	bl	116a4 <__assert_fail@plt+0x964>
   125c0:	sub	r0, r0, #1
   125c4:	cmp	r0, #9
   125c8:	ldrls	pc, [pc, r0, lsl #2]
   125cc:	b	12360 <__assert_fail@plt+0x1620>
   125d0:	ldrdeq	r2, [r1], -ip
   125d4:	muleq	r1, r0, r5
   125d8:	andeq	r2, r1, r8, ror #6
   125dc:	andeq	r2, r1, r4, ror r5
   125e0:	andeq	r2, r1, r0, lsr r5
   125e4:	andeq	r2, r1, ip, lsr r4
   125e8:	andeq	r2, r1, r8, lsr #8
   125ec:			; <UNDEFINED> instruction: 0x000124b8
   125f0:	andeq	r2, r1, r4, asr #6
   125f4:	strdeq	r2, [r1], -r4
   125f8:	mov	r4, fp
   125fc:	mov	r2, #0
   12600:	b	1234c <__assert_fail@plt+0x160c>
   12604:	ldr	r1, [pc, #256]	; 1270c <__assert_fail@plt+0x19cc>
   12608:	ldr	r2, [pc, #288]	; 12730 <__assert_fail@plt+0x19f0>
   1260c:	ldr	r3, [r3]
   12610:	ldr	r0, [r1]
   12614:	mov	r1, #1
   12618:	bl	10ce0 <__fprintf_chk@plt>
   1261c:	ldr	r0, [pc, #272]	; 12734 <__assert_fail@plt+0x19f4>
   12620:	bl	10bcc <perror@plt>
   12624:	mov	r9, #2
   12628:	b	12288 <__assert_fail@plt+0x1548>
   1262c:	sub	r2, r5, r0
   12630:	mov	r1, #10
   12634:	bl	10cec <memchr@plt>
   12638:	cmp	r0, #0
   1263c:	addne	fp, r0, #1
   12640:	moveq	fp, r5
   12644:	b	1236c <__assert_fail@plt+0x162c>
   12648:	mov	r4, fp
   1264c:	mov	r0, r9
   12650:	bl	130f4 <__assert_fail@plt+0x23b4>
   12654:	cmp	r0, #0
   12658:	beq	12400 <__assert_fail@plt+0x16c0>
   1265c:	mov	r2, #0
   12660:	b	12354 <__assert_fail@plt+0x1614>
   12664:	cmp	r5, r4
   12668:	beq	126a4 <__assert_fail@plt+0x1964>
   1266c:	mov	r0, r9
   12670:	bl	12240 <__assert_fail@plt+0x1500>
   12674:	ldr	r3, [sp, #4]
   12678:	cmp	r3, #2
   1267c:	mov	r9, r0
   12680:	beq	126e0 <__assert_fail@plt+0x19a0>
   12684:	cmp	r9, #4
   12688:	bne	124b0 <__assert_fail@plt+0x1770>
   1268c:	ldr	r3, [r6, #8]
   12690:	cmp	r3, #0
   12694:	subgt	r3, r3, #1
   12698:	strgt	r3, [r6, #8]
   1269c:	ble	12360 <__assert_fail@plt+0x1620>
   126a0:	b	12288 <__assert_fail@plt+0x1548>
   126a4:	add	r0, r8, #4
   126a8:	bl	14714 <__assert_fail@plt+0x39d4>
   126ac:	ldm	r9, {r0, r1}
   126b0:	add	sl, sl, #1
   126b4:	stm	r8, {r0, r1}
   126b8:	mov	r0, r1
   126bc:	bl	14918 <__assert_fail@plt+0x3bd8>
   126c0:	mov	r4, r0
   126c4:	ldr	r0, [r8, #4]
   126c8:	bl	14920 <__assert_fail@plt+0x3be0>
   126cc:	mov	r2, #0
   126d0:	add	r5, r4, r0
   126d4:	b	1234c <__assert_fail@plt+0x160c>
   126d8:	mov	r4, fp
   126dc:	b	123f0 <__assert_fail@plt+0x16b0>
   126e0:	add	r0, sp, #8
   126e4:	bl	14714 <__assert_fail@plt+0x39d4>
   126e8:	b	12684 <__assert_fail@plt+0x1944>
   126ec:	sub	r2, r2, sl
   126f0:	str	r2, [r6, #8]
   126f4:	mov	r9, #4
   126f8:	b	12288 <__assert_fail@plt+0x1548>
   126fc:	bl	10bb4 <__stack_chk_fail@plt>
   12700:	mov	r4, fp
   12704:	b	1265c <__assert_fail@plt+0x191c>
   12708:	andeq	r8, r2, r0, lsr lr
   1270c:	andeq	r9, r2, r8, lsr #32
   12710:	andeq	r9, r2, r4, ror r4
   12714:	andeq	r8, r1, ip, lsr #10
   12718:	andeq	r9, r2, r0, asr #32
   1271c:	andeq	r8, r1, ip, ror #7
   12720:	andeq	r9, r2, r0, lsr r0
   12724:	andeq	r8, r1, ip, ror #10
   12728:	andeq	r9, r2, r8
   1272c:	andeq	r1, r1, r0, lsl #13
   12730:	andeq	r8, r1, r8, asr #3
   12734:	andeq	r8, r1, r8, asr r5
   12738:	push	{r4, r5, r6, lr}
   1273c:	ldr	r5, [pc, #52]	; 12778 <__assert_fail@plt+0x1a38>
   12740:	ldr	r4, [r5, #20]
   12744:	cmn	r4, #1
   12748:	beq	1275c <__assert_fail@plt+0x1a1c>
   1274c:	mvn	r3, #0
   12750:	str	r3, [r5, #20]
   12754:	mov	r0, r4
   12758:	pop	{r4, r5, r6, pc}
   1275c:	ldr	r0, [r5, #24]
   12760:	bl	10ba8 <_IO_getc@plt>
   12764:	mov	r4, r0
   12768:	ldr	r0, [r5, #24]
   1276c:	bl	17a14 <__assert_fail@plt+0x6cd4>
   12770:	mov	r0, r4
   12774:	pop	{r4, r5, r6, pc}
   12778:	andeq	r9, r2, r0, asr #32
   1277c:	push	{r4, lr}
   12780:	bl	12240 <__assert_fail@plt+0x1500>
   12784:	cmp	r0, #0
   12788:	popeq	{r4, pc}
   1278c:	cmp	r0, #4
   12790:	bne	127ac <__assert_fail@plt+0x1a6c>
   12794:	ldr	r3, [pc, #24]	; 127b4 <__assert_fail@plt+0x1a74>
   12798:	ldr	r3, [r3, #12]
   1279c:	cmp	r3, #1
   127a0:	movne	r0, #2
   127a4:	moveq	r0, #0
   127a8:	pop	{r4, pc}
   127ac:	mov	r0, #2
   127b0:	pop	{r4, pc}
   127b4:	andeq	r9, r2, r0, asr #32
   127b8:	ldr	r3, [pc, #1344]	; 12d00 <__assert_fail@plt+0x1fc0>
   127bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c0:	sub	sp, sp, #36	; 0x24
   127c4:	ldr	r3, [r3]
   127c8:	mov	r4, r0
   127cc:	mov	r1, #1
   127d0:	mov	r0, #2
   127d4:	str	r3, [sp, #28]
   127d8:	bl	10b9c <signal@plt>
   127dc:	ldr	fp, [pc, #1312]	; 12d04 <__assert_fail@plt+0x1fc4>
   127e0:	ldr	r9, [pc, #1312]	; 12d08 <__assert_fail@plt+0x1fc8>
   127e4:	mov	r1, r0
   127e8:	mov	sl, r0
   127ec:	mov	r0, #2
   127f0:	bl	10b9c <signal@plt>
   127f4:	mov	r0, r4
   127f8:	bl	10cd4 <fileno@plt>
   127fc:	bl	10d1c <isatty@plt>
   12800:	mvn	r3, #0
   12804:	str	r3, [fp]
   12808:	cmp	r0, #0
   1280c:	mov	r0, r4
   12810:	moveq	r9, sl
   12814:	bl	10ba8 <_IO_getc@plt>
   12818:	cmn	r0, #1
   1281c:	beq	129a8 <__assert_fail@plt+0x1c68>
   12820:	ldr	r7, [pc, #1252]	; 12d0c <__assert_fail@plt+0x1fcc>
   12824:	mov	r5, r0
   12828:	mov	r8, #0
   1282c:	mov	r0, r4
   12830:	bl	10ba8 <_IO_getc@plt>
   12834:	str	r0, [sp, #8]
   12838:	ldr	r0, [r7]
   1283c:	bl	17a14 <__assert_fail@plt+0x6cd4>
   12840:	ldr	r3, [r7]
   12844:	mov	r1, r9
   12848:	cmp	r3, r4
   1284c:	mov	r0, #2
   12850:	ldreq	r3, [sp, #8]
   12854:	streq	r3, [fp]
   12858:	bl	10b9c <signal@plt>
   1285c:	mov	r2, r8
   12860:	ldr	r1, [sp, #8]
   12864:	mov	r0, r5
   12868:	bl	116a4 <__assert_fail@plt+0x964>
   1286c:	cmp	r0, #10
   12870:	ldrls	pc, [pc, r0, lsl #2]
   12874:	b	12958 <__assert_fail@plt+0x1c18>
   12878:	andeq	r2, r1, r8, asr #19
   1287c:	andeq	r2, r1, r0, ror #18
   12880:	andeq	r2, r1, r0, lsr #18
   12884:	andeq	r2, r1, r4, lsr #17
   12888:	andeq	r2, r1, r0, lsl #23
   1288c:	andeq	r2, r1, r0, lsr fp
   12890:	ldrdeq	r2, [r1], -r4
   12894:	andeq	r2, r1, r8, ror #20
   12898:	andeq	r2, r1, ip, ror #23
   1289c:	andeq	r2, r1, ip, asr sl
   128a0:	andeq	r2, r1, r4, lsl #20
   128a4:	add	r5, sp, #12
   128a8:	ldr	r2, [fp]
   128ac:	ldr	r3, [sp, #8]
   128b0:	cmp	r2, r3
   128b4:	beq	128c4 <__assert_fail@plt+0x1b84>
   128b8:	ldr	r3, [r7]
   128bc:	cmp	r3, r4
   128c0:	beq	12cc8 <__assert_fail@plt+0x1f88>
   128c4:	mov	r0, r5
   128c8:	bl	130f4 <__assert_fail@plt+0x23b4>
   128cc:	subs	r8, r0, #0
   128d0:	bne	12958 <__assert_fail@plt+0x1c18>
   128d4:	ldr	r3, [sp, #12]
   128d8:	cmp	r3, #1
   128dc:	beq	12ce0 <__assert_fail@plt+0x1fa0>
   128e0:	cmp	r3, #2
   128e4:	beq	12c70 <__assert_fail@plt+0x1f30>
   128e8:	ldr	r6, [pc, #1056]	; 12d10 <__assert_fail@plt+0x1fd0>
   128ec:	mvn	r1, #0
   128f0:	ldr	r0, [pc, #1052]	; 12d14 <__assert_fail@plt+0x1fd4>
   128f4:	bl	11490 <__assert_fail@plt+0x750>
   128f8:	ldr	r3, [r6, #16]
   128fc:	cmp	r3, #0
   12900:	beq	12988 <__assert_fail@plt+0x1c48>
   12904:	ldr	r3, [pc, #1036]	; 12d18 <__assert_fail@plt+0x1fd8>
   12908:	mov	r2, #12
   1290c:	mov	r1, #1
   12910:	ldr	r3, [r3]
   12914:	ldr	r0, [pc, #1024]	; 12d1c <__assert_fail@plt+0x1fdc>
   12918:	bl	10be4 <fwrite@plt>
   1291c:	b	12988 <__assert_fail@plt+0x1c48>
   12920:	mov	r0, r4
   12924:	ldr	r6, [sp, #8]
   12928:	bl	10ba8 <_IO_getc@plt>
   1292c:	add	r5, sp, #12
   12930:	str	r0, [sp, #8]
   12934:	mov	r0, r4
   12938:	bl	17a14 <__assert_fail@plt+0x6cd4>
   1293c:	ldr	r3, [sp, #8]
   12940:	mov	r0, r6
   12944:	mov	r1, r5
   12948:	str	r3, [fp]
   1294c:	bl	12f30 <__assert_fail@plt+0x21f0>
   12950:	cmp	r0, #0
   12954:	beq	12c34 <__assert_fail@plt+0x1ef4>
   12958:	ldr	r6, [pc, #944]	; 12d10 <__assert_fail@plt+0x1fd0>
   1295c:	b	12b78 <__assert_fail@plt+0x1e38>
   12960:	mov	r0, r4
   12964:	bl	10ba8 <_IO_getc@plt>
   12968:	mov	r8, #0
   1296c:	ldr	r6, [pc, #924]	; 12d10 <__assert_fail@plt+0x1fd0>
   12970:	str	r0, [sp, #8]
   12974:	mov	r0, r4
   12978:	bl	17a14 <__assert_fail@plt+0x6cd4>
   1297c:	ldr	r3, [r6, #16]
   12980:	cmp	r3, #0
   12984:	bne	12904 <__assert_fail@plt+0x1bc4>
   12988:	mov	r3, #0
   1298c:	mov	r1, sl
   12990:	mov	r0, #2
   12994:	str	r3, [r6, #16]
   12998:	bl	10b9c <signal@plt>
   1299c:	ldr	r5, [sp, #8]
   129a0:	cmn	r5, #1
   129a4:	bne	1282c <__assert_fail@plt+0x1aec>
   129a8:	mov	r0, r4
   129ac:	bl	10b84 <ferror@plt>
   129b0:	subs	r4, r0, #0
   129b4:	bne	12a14 <__assert_fail@plt+0x1cd4>
   129b8:	mov	r1, sl
   129bc:	mov	r0, #2
   129c0:	bl	10b9c <signal@plt>
   129c4:	b	12a3c <__assert_fail@plt+0x1cfc>
   129c8:	ldr	r2, [fp]
   129cc:	ldr	r3, [sp, #8]
   129d0:	cmp	r2, r3
   129d4:	beq	12958 <__assert_fail@plt+0x1c18>
   129d8:	ldr	r3, [r7]
   129dc:	cmp	r3, r4
   129e0:	bne	12958 <__assert_fail@plt+0x1c18>
   129e4:	mov	r0, r4
   129e8:	bl	10ba8 <_IO_getc@plt>
   129ec:	mov	r8, #0
   129f0:	ldr	r6, [pc, #792]	; 12d10 <__assert_fail@plt+0x1fd0>
   129f4:	str	r0, [sp, #8]
   129f8:	ldr	r0, [r7]
   129fc:	bl	17a14 <__assert_fail@plt+0x6cd4>
   12a00:	b	1297c <__assert_fail@plt+0x1c3c>
   12a04:	mov	r0, r4
   12a08:	bl	10b84 <ferror@plt>
   12a0c:	cmp	r0, #0
   12a10:	beq	12c40 <__assert_fail@plt+0x1f00>
   12a14:	ldr	r1, [pc, #764]	; 12d18 <__assert_fail@plt+0x1fd8>
   12a18:	ldr	r3, [pc, #768]	; 12d20 <__assert_fail@plt+0x1fe0>
   12a1c:	ldr	r2, [pc, #768]	; 12d24 <__assert_fail@plt+0x1fe4>
   12a20:	ldr	r0, [r1]
   12a24:	ldr	r3, [r3]
   12a28:	mov	r1, #1
   12a2c:	bl	10ce0 <__fprintf_chk@plt>
   12a30:	ldr	r0, [pc, #752]	; 12d28 <__assert_fail@plt+0x1fe8>
   12a34:	bl	10bcc <perror@plt>
   12a38:	mov	r4, #2
   12a3c:	ldr	r3, [pc, #700]	; 12d00 <__assert_fail@plt+0x1fc0>
   12a40:	ldr	r2, [sp, #28]
   12a44:	mov	r0, r4
   12a48:	ldr	r3, [r3]
   12a4c:	cmp	r2, r3
   12a50:	bne	12cfc <__assert_fail@plt+0x1fbc>
   12a54:	add	sp, sp, #36	; 0x24
   12a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a5c:	mov	r8, #1
   12a60:	ldr	r6, [pc, #680]	; 12d10 <__assert_fail@plt+0x1fd0>
   12a64:	b	1297c <__assert_fail@plt+0x1c3c>
   12a68:	mov	r1, r4
   12a6c:	ldr	r0, [sp, #8]
   12a70:	bl	10c8c <ungetc@plt>
   12a74:	mov	r5, sp
   12a78:	mov	r3, #10
   12a7c:	mov	r0, r5
   12a80:	mov	r2, r3
   12a84:	mov	r1, r4
   12a88:	bl	147f4 <__assert_fail@plt+0x3ab4>
   12a8c:	ldm	r5, {r0, r1}
   12a90:	add	r5, sp, #12
   12a94:	stm	r5, {r0, r1}
   12a98:	mov	r0, r4
   12a9c:	bl	10b84 <ferror@plt>
   12aa0:	subs	r8, r0, #0
   12aa4:	bne	12a14 <__assert_fail@plt+0x1cd4>
   12aa8:	add	r5, sp, #32
   12aac:	ldr	r6, [pc, #604]	; 12d10 <__assert_fail@plt+0x1fd0>
   12ab0:	ldr	r0, [r5, #-16]!
   12ab4:	bl	14918 <__assert_fail@plt+0x3bd8>
   12ab8:	bl	114fc <__assert_fail@plt+0x7bc>
   12abc:	mov	r0, r5
   12ac0:	bl	14714 <__assert_fail@plt+0x39d4>
   12ac4:	mov	r0, r4
   12ac8:	bl	10ba8 <_IO_getc@plt>
   12acc:	str	r0, [sp, #8]
   12ad0:	b	1297c <__assert_fail@plt+0x1c3c>
   12ad4:	mov	r5, sp
   12ad8:	mov	r1, r4
   12adc:	ldr	r0, [sp, #8]
   12ae0:	bl	10c8c <ungetc@plt>
   12ae4:	mov	r0, r5
   12ae8:	mov	r3, #93	; 0x5d
   12aec:	mov	r2, #91	; 0x5b
   12af0:	mov	r1, r4
   12af4:	bl	147f4 <__assert_fail@plt+0x3ab4>
   12af8:	ldm	r5, {r0, r1}
   12afc:	add	r5, sp, #12
   12b00:	stm	r5, {r0, r1}
   12b04:	mov	r0, r4
   12b08:	bl	10b84 <ferror@plt>
   12b0c:	subs	r8, r0, #0
   12b10:	bne	12a14 <__assert_fail@plt+0x1cd4>
   12b14:	ldm	r5, {r0, r1}
   12b18:	bl	12ddc <__assert_fail@plt+0x209c>
   12b1c:	mov	r0, r4
   12b20:	bl	10ba8 <_IO_getc@plt>
   12b24:	ldr	r6, [pc, #484]	; 12d10 <__assert_fail@plt+0x1fd0>
   12b28:	str	r0, [sp, #8]
   12b2c:	b	1297c <__assert_fail@plt+0x1c3c>
   12b30:	ldr	r6, [pc, #472]	; 12d10 <__assert_fail@plt+0x1fd0>
   12b34:	mov	r1, r4
   12b38:	add	r8, sp, #20
   12b3c:	ldr	r0, [sp, #8]
   12b40:	str	r4, [r6, #24]
   12b44:	str	r5, [r6, #20]
   12b48:	bl	10c8c <ungetc@plt>
   12b4c:	add	r3, sp, #8
   12b50:	ldr	r2, [fp, #8]
   12b54:	mov	r0, r8
   12b58:	ldr	r1, [pc, #460]	; 12d2c <__assert_fail@plt+0x1fec>
   12b5c:	bl	14120 <__assert_fail@plt+0x33e0>
   12b60:	ldm	r8, {r0, r1}
   12b64:	bl	12ddc <__assert_fail@plt+0x209c>
   12b68:	mov	r0, r4
   12b6c:	bl	10b84 <ferror@plt>
   12b70:	cmp	r0, #0
   12b74:	bne	12a14 <__assert_fail@plt+0x1cd4>
   12b78:	mov	r8, #0
   12b7c:	b	1297c <__assert_fail@plt+0x1c3c>
   12b80:	ldr	r6, [pc, #392]	; 12d10 <__assert_fail@plt+0x1fd0>
   12b84:	ldr	r1, [r6, #12]
   12b88:	cmp	r1, #1
   12b8c:	bne	12c5c <__assert_fail@plt+0x1f1c>
   12b90:	ldr	r0, [pc, #384]	; 12d18 <__assert_fail@plt+0x1fd8>
   12b94:	ldr	r3, [pc, #388]	; 12d20 <__assert_fail@plt+0x1fe0>
   12b98:	mov	r5, r0
   12b9c:	ldr	r2, [pc, #396]	; 12d30 <__assert_fail@plt+0x1ff0>
   12ba0:	ldr	r3, [r3]
   12ba4:	ldr	r0, [r0]
   12ba8:	bl	10ce0 <__fprintf_chk@plt>
   12bac:	ldr	r0, [r5]
   12bb0:	bl	17a38 <__assert_fail@plt+0x6cf8>
   12bb4:	ldr	r2, [fp]
   12bb8:	ldr	r3, [sp, #8]
   12bbc:	cmp	r2, r3
   12bc0:	beq	12b78 <__assert_fail@plt+0x1e38>
   12bc4:	ldr	r3, [r7]
   12bc8:	cmp	r3, r4
   12bcc:	bne	12b78 <__assert_fail@plt+0x1e38>
   12bd0:	mov	r0, r4
   12bd4:	bl	10ba8 <_IO_getc@plt>
   12bd8:	mov	r8, #0
   12bdc:	str	r0, [sp, #8]
   12be0:	ldr	r0, [r7]
   12be4:	bl	17a14 <__assert_fail@plt+0x6cd4>
   12be8:	b	1297c <__assert_fail@plt+0x1c3c>
   12bec:	ldr	r0, [sp, #8]
   12bf0:	cmp	r0, #10
   12bf4:	cmnne	r0, #1
   12bf8:	beq	12c14 <__assert_fail@plt+0x1ed4>
   12bfc:	mov	r0, r4
   12c00:	bl	10ba8 <_IO_getc@plt>
   12c04:	cmp	r0, #10
   12c08:	cmnne	r0, #1
   12c0c:	str	r0, [sp, #8]
   12c10:	bne	12bfc <__assert_fail@plt+0x1ebc>
   12c14:	cmn	r0, #1
   12c18:	beq	12958 <__assert_fail@plt+0x1c18>
   12c1c:	mov	r0, r4
   12c20:	bl	10ba8 <_IO_getc@plt>
   12c24:	mov	r8, #0
   12c28:	ldr	r6, [pc, #224]	; 12d10 <__assert_fail@plt+0x1fd0>
   12c2c:	str	r0, [sp, #8]
   12c30:	b	1297c <__assert_fail@plt+0x1c3c>
   12c34:	ldm	r5, {r0, r1}
   12c38:	bl	12ddc <__assert_fail@plt+0x209c>
   12c3c:	b	128a8 <__assert_fail@plt+0x1b68>
   12c40:	ldr	r1, [pc, #208]	; 12d18 <__assert_fail@plt+0x1fd8>
   12c44:	ldr	r3, [pc, #212]	; 12d20 <__assert_fail@plt+0x1fe0>
   12c48:	ldr	r2, [pc, #228]	; 12d34 <__assert_fail@plt+0x1ff4>
   12c4c:	ldr	r0, [r1]
   12c50:	ldr	r3, [r3]
   12c54:	mov	r1, #1
   12c58:	bl	10ce0 <__fprintf_chk@plt>
   12c5c:	mov	r1, sl
   12c60:	mov	r0, #2
   12c64:	bl	10b9c <signal@plt>
   12c68:	mov	r4, #2
   12c6c:	b	12a3c <__assert_fail@plt+0x1cfc>
   12c70:	mov	r0, r5
   12c74:	bl	12240 <__assert_fail@plt+0x1500>
   12c78:	ldr	r3, [sp, #12]
   12c7c:	cmp	r3, #2
   12c80:	mov	r5, r0
   12c84:	beq	12cf0 <__assert_fail@plt+0x1fb0>
   12c88:	cmp	r5, #4
   12c8c:	bne	12958 <__assert_fail@plt+0x1c18>
   12c90:	ldr	r6, [pc, #120]	; 12d10 <__assert_fail@plt+0x1fd0>
   12c94:	ldr	r1, [r6, #12]
   12c98:	cmp	r1, #1
   12c9c:	bne	12c5c <__assert_fail@plt+0x1f1c>
   12ca0:	ldr	r0, [pc, #112]	; 12d18 <__assert_fail@plt+0x1fd8>
   12ca4:	ldr	r3, [pc, #116]	; 12d20 <__assert_fail@plt+0x1fe0>
   12ca8:	mov	r5, r0
   12cac:	ldr	r2, [pc, #124]	; 12d30 <__assert_fail@plt+0x1ff0>
   12cb0:	ldr	r3, [r3]
   12cb4:	ldr	r0, [r0]
   12cb8:	bl	10ce0 <__fprintf_chk@plt>
   12cbc:	ldr	r0, [r5]
   12cc0:	bl	17a38 <__assert_fail@plt+0x6cf8>
   12cc4:	b	1297c <__assert_fail@plt+0x1c3c>
   12cc8:	mov	r0, r4
   12ccc:	bl	10ba8 <_IO_getc@plt>
   12cd0:	str	r0, [sp, #8]
   12cd4:	ldr	r0, [r7]
   12cd8:	bl	17a14 <__assert_fail@plt+0x6cd4>
   12cdc:	b	128c4 <__assert_fail@plt+0x1b84>
   12ce0:	ldm	r5, {r0, r1}
   12ce4:	bl	12ddc <__assert_fail@plt+0x209c>
   12ce8:	ldr	r6, [pc, #32]	; 12d10 <__assert_fail@plt+0x1fd0>
   12cec:	b	1297c <__assert_fail@plt+0x1c3c>
   12cf0:	add	r0, sp, #16
   12cf4:	bl	14714 <__assert_fail@plt+0x39d4>
   12cf8:	b	12c88 <__assert_fail@plt+0x1f48>
   12cfc:	bl	10bb4 <__stack_chk_fail@plt>
   12d00:	andeq	r8, r2, r0, lsr lr
   12d04:	andeq	r9, r2, r8
   12d08:	andeq	r2, r1, ip, lsl r2
   12d0c:	andeq	r9, r2, r0, lsr r0
   12d10:	andeq	r9, r2, r0, asr #32
   12d14:	andeq	r8, r1, ip, ror #7
   12d18:	andeq	r9, r2, r8, lsr #32
   12d1c:	andeq	r8, r1, r0, ror #11
   12d20:	andeq	r9, r2, r4, ror r4
   12d24:	andeq	r8, r1, r8, asr #3
   12d28:			; <UNDEFINED> instruction: 0x000185b8
   12d2c:	andeq	r2, r1, r8, lsr r7
   12d30:	andeq	r8, r1, r0, lsl #11
   12d34:	andeq	r8, r1, ip, asr #11
   12d38:	ldr	r3, [pc, #20]	; 12d54 <__assert_fail@plt+0x2014>
   12d3c:	mov	r1, #0
   12d40:	add	r2, r3, #1024	; 0x400
   12d44:	str	r1, [r3, #4]!
   12d48:	cmp	r3, r2
   12d4c:	bne	12d44 <__assert_fail@plt+0x2004>
   12d50:	bx	lr
   12d54:	andeq	r9, r2, r8, asr r0
   12d58:	push	{r4, r5, r6, r7, r8, lr}
   12d5c:	ldr	r7, [pc, #112]	; 12dd4 <__assert_fail@plt+0x2094>
   12d60:	ldr	r4, [r7, #1024]	; 0x400
   12d64:	cmp	r4, #0
   12d68:	beq	12dc8 <__assert_fail@plt+0x2088>
   12d6c:	ldr	r6, [pc, #100]	; 12dd8 <__assert_fail@plt+0x2098>
   12d70:	b	12d90 <__assert_fail@plt+0x2050>
   12d74:	bl	11490 <__assert_fail@plt+0x750>
   12d78:	ldr	r0, [r4, #8]
   12d7c:	bl	13ad0 <__assert_fail@plt+0x2d90>
   12d80:	mov	r0, r4
   12d84:	bl	10b78 <free@plt>
   12d88:	subs	r4, r5, #0
   12d8c:	beq	12dc8 <__assert_fail@plt+0x2088>
   12d90:	ldr	r3, [r4]
   12d94:	mvn	r1, #0
   12d98:	cmp	r3, #1
   12d9c:	mov	r0, r6
   12da0:	ldr	r5, [r4, #12]
   12da4:	beq	12dbc <__assert_fail@plt+0x207c>
   12da8:	cmp	r3, #2
   12dac:	bne	12d74 <__assert_fail@plt+0x2034>
   12db0:	add	r0, r4, #4
   12db4:	bl	14714 <__assert_fail@plt+0x39d4>
   12db8:	b	12d78 <__assert_fail@plt+0x2038>
   12dbc:	add	r0, r4, #4
   12dc0:	bl	145ac <__assert_fail@plt+0x386c>
   12dc4:	b	12d78 <__assert_fail@plt+0x2038>
   12dc8:	mov	r3, #0
   12dcc:	str	r3, [r7, #1024]	; 0x400
   12dd0:	pop	{r4, r5, r6, r7, r8, pc}
   12dd4:	andeq	r9, r2, ip, asr r0
   12dd8:	strdeq	r8, [r1], -r0
   12ddc:	push	{r4, r5, lr}
   12de0:	sub	sp, sp, #12
   12de4:	mov	r5, sp
   12de8:	stm	r5, {r0, r1}
   12dec:	mov	r0, #16
   12df0:	bl	113f8 <__assert_fail@plt+0x6b8>
   12df4:	ldr	r2, [sp]
   12df8:	mov	r3, #0
   12dfc:	sub	r2, r2, #1
   12e00:	cmp	r2, #1
   12e04:	mov	r4, r0
   12e08:	str	r3, [r0]
   12e0c:	str	r3, [r0, #8]
   12e10:	str	r3, [r0, #12]
   12e14:	bls	12e24 <__assert_fail@plt+0x20e4>
   12e18:	mvn	r1, #0
   12e1c:	ldr	r0, [pc, #32]	; 12e44 <__assert_fail@plt+0x2104>
   12e20:	bl	11490 <__assert_fail@plt+0x750>
   12e24:	ldr	r3, [pc, #28]	; 12e48 <__assert_fail@plt+0x2108>
   12e28:	ldm	r5, {r0, r1}
   12e2c:	ldr	r2, [r3, #1024]	; 0x400
   12e30:	stm	r4, {r0, r1}
   12e34:	str	r2, [r4, #12]
   12e38:	str	r4, [r3, #1024]	; 0x400
   12e3c:	add	sp, sp, #12
   12e40:	pop	{r4, r5, pc}
   12e44:	strdeq	r8, [r1], -ip
   12e48:	andeq	r9, r2, ip, asr r0
   12e4c:	push	{r4, r5, lr}
   12e50:	sub	sp, sp, #12
   12e54:	mov	r5, sp
   12e58:	mov	r4, r0
   12e5c:	mov	r0, #16
   12e60:	stm	r5, {r1, r2}
   12e64:	bl	113f8 <__assert_fail@plt+0x6b8>
   12e68:	ldr	ip, [pc, #44]	; 12e9c <__assert_fail@plt+0x215c>
   12e6c:	uxtb	r2, r4
   12e70:	mov	lr, #0
   12e74:	mov	r3, r0
   12e78:	ldm	r5, {r0, r1}
   12e7c:	str	lr, [r3, #12]
   12e80:	stm	r3, {r0, r1}
   12e84:	ldr	r1, [ip, r2, lsl #2]
   12e88:	str	lr, [r3, #8]
   12e8c:	str	r1, [r3, #12]
   12e90:	str	r3, [ip, r2, lsl #2]
   12e94:	add	sp, sp, #12
   12e98:	pop	{r4, r5, pc}
   12e9c:	andeq	r9, r2, ip, asr r0
   12ea0:	push	{r4, r5, r6, lr}
   12ea4:	ldr	r5, [pc, #112]	; 12f1c <__assert_fail@plt+0x21dc>
   12ea8:	ldr	r3, [r5, #1024]	; 0x400
   12eac:	cmp	r3, #0
   12eb0:	beq	12ef0 <__assert_fail@plt+0x21b0>
   12eb4:	ldr	r2, [r3]
   12eb8:	mov	r4, r0
   12ebc:	sub	r2, r2, #1
   12ec0:	cmp	r2, #1
   12ec4:	bhi	12edc <__assert_fail@plt+0x219c>
   12ec8:	ldm	r3, {r0, r1}
   12ecc:	mov	r3, #0
   12ed0:	stm	r4, {r0, r1}
   12ed4:	mov	r0, r3
   12ed8:	pop	{r4, r5, r6, pc}
   12edc:	mvn	r1, #0
   12ee0:	ldr	r0, [pc, #56]	; 12f20 <__assert_fail@plt+0x21e0>
   12ee4:	bl	11490 <__assert_fail@plt+0x750>
   12ee8:	ldr	r3, [r5, #1024]	; 0x400
   12eec:	b	12ec8 <__assert_fail@plt+0x2188>
   12ef0:	ldr	r4, [pc, #44]	; 12f24 <__assert_fail@plt+0x21e4>
   12ef4:	ldr	r3, [pc, #44]	; 12f28 <__assert_fail@plt+0x21e8>
   12ef8:	ldr	r2, [pc, #44]	; 12f2c <__assert_fail@plt+0x21ec>
   12efc:	mov	r1, #1
   12f00:	ldr	r3, [r3]
   12f04:	ldr	r0, [r4]
   12f08:	bl	10ce0 <__fprintf_chk@plt>
   12f0c:	ldr	r0, [r4]
   12f10:	bl	17a38 <__assert_fail@plt+0x6cf8>
   12f14:	mov	r3, #2
   12f18:	b	12ed4 <__assert_fail@plt+0x2194>
   12f1c:	andeq	r9, r2, ip, asr r0
   12f20:	andeq	r8, r1, ip, ror #7
   12f24:	andeq	r9, r2, r8, lsr #32
   12f28:	andeq	r9, r2, r4, ror r4
   12f2c:	andeq	r8, r1, r4, lsl r6
   12f30:	ldr	r3, [pc, #196]	; 12ffc <__assert_fail@plt+0x22bc>
   12f34:	push	{r4, r5, r6, r7, lr}
   12f38:	uxtb	r7, r0
   12f3c:	ldr	r5, [pc, #188]	; 13000 <__assert_fail@plt+0x22c0>
   12f40:	ldr	r4, [r3, r7, lsl #2]
   12f44:	sub	sp, sp, #20
   12f48:	ldr	r3, [r5]
   12f4c:	cmp	r4, #0
   12f50:	mov	r6, r1
   12f54:	str	r3, [sp, #12]
   12f58:	beq	12fdc <__assert_fail@plt+0x229c>
   12f5c:	ldr	r3, [r4]
   12f60:	cmp	r3, #0
   12f64:	beq	12fa0 <__assert_fail@plt+0x2260>
   12f68:	mov	r7, sp
   12f6c:	ldm	r4, {r1, r2}
   12f70:	mov	r0, r7
   12f74:	bl	11604 <__assert_fail@plt+0x8c4>
   12f78:	ldm	r7, {r0, r1}
   12f7c:	mov	r4, #0
   12f80:	stm	r6, {r0, r1}
   12f84:	ldr	r2, [sp, #12]
   12f88:	ldr	r3, [r5]
   12f8c:	mov	r0, r4
   12f90:	cmp	r2, r3
   12f94:	bne	12ff8 <__assert_fail@plt+0x22b8>
   12f98:	add	sp, sp, #20
   12f9c:	pop	{r4, r5, r6, r7, pc}
   12fa0:	ldr	r4, [pc, #92]	; 13004 <__assert_fail@plt+0x22c4>
   12fa4:	ldr	r3, [pc, #92]	; 13008 <__assert_fail@plt+0x22c8>
   12fa8:	ldr	r2, [pc, #92]	; 1300c <__assert_fail@plt+0x22cc>
   12fac:	mov	r1, #1
   12fb0:	ldr	r3, [r3]
   12fb4:	ldr	r0, [r4]
   12fb8:	bl	10ce0 <__fprintf_chk@plt>
   12fbc:	ldr	r0, [r4]
   12fc0:	bl	17a38 <__assert_fail@plt+0x6cf8>
   12fc4:	ldr	r0, [r4]
   12fc8:	mov	r1, r7
   12fcc:	ldr	r2, [pc, #60]	; 13010 <__assert_fail@plt+0x22d0>
   12fd0:	bl	1140c <__assert_fail@plt+0x6cc>
   12fd4:	mov	r4, #2
   12fd8:	b	12f84 <__assert_fail@plt+0x2244>
   12fdc:	mov	r7, sp
   12fe0:	mov	r0, r7
   12fe4:	mov	r1, r4
   12fe8:	bl	140b8 <__assert_fail@plt+0x3378>
   12fec:	ldm	r7, {r0, r1}
   12ff0:	stm	r6, {r0, r1}
   12ff4:	b	12f84 <__assert_fail@plt+0x2244>
   12ff8:	bl	10bb4 <__stack_chk_fail@plt>
   12ffc:	andeq	r9, r2, ip, asr r0
   13000:	andeq	r8, r2, r0, lsr lr
   13004:	andeq	r9, r2, r8, lsr #32
   13008:	andeq	r9, r2, r4, ror r4
   1300c:	andeq	r8, r1, r8, lsr #12
   13010:	andeq	r8, r1, ip, lsr r6
   13014:	push	{r4, r5, r6, lr}
   13018:	uxtb	r5, r0
   1301c:	ldr	r6, [pc, #200]	; 130ec <__assert_fail@plt+0x23ac>
   13020:	sub	sp, sp, #8
   13024:	mov	r4, sp
   13028:	ldr	r3, [r6, r5, lsl #2]
   1302c:	stm	r4, {r1, r2}
   13030:	cmp	r3, #0
   13034:	beq	13084 <__assert_fail@plt+0x2344>
   13038:	ldr	r2, [r3]
   1303c:	cmp	r2, #1
   13040:	beq	130b4 <__assert_fail@plt+0x2374>
   13044:	cmp	r2, #2
   13048:	beq	130d0 <__assert_fail@plt+0x2390>
   1304c:	cmp	r2, #0
   13050:	bne	13064 <__assert_fail@plt+0x2324>
   13054:	ldm	r4, {r0, r1}
   13058:	stm	r3, {r0, r1}
   1305c:	add	sp, sp, #8
   13060:	pop	{r4, r5, r6, pc}
   13064:	mov	r1, r5
   13068:	ldr	r0, [pc, #128]	; 130f0 <__assert_fail@plt+0x23b0>
   1306c:	bl	11490 <__assert_fail@plt+0x750>
   13070:	ldr	r3, [r6, r5, lsl #2]
   13074:	ldm	r4, {r0, r1}
   13078:	stm	r3, {r0, r1}
   1307c:	add	sp, sp, #8
   13080:	pop	{r4, r5, r6, pc}
   13084:	mov	r0, #16
   13088:	bl	113f8 <__assert_fail@plt+0x6b8>
   1308c:	mov	r2, #0
   13090:	str	r2, [r0]
   13094:	str	r2, [r0, #8]
   13098:	str	r2, [r0, #12]
   1309c:	mov	r3, r0
   130a0:	str	r0, [r6, r5, lsl #2]
   130a4:	ldm	r4, {r0, r1}
   130a8:	stm	r3, {r0, r1}
   130ac:	add	sp, sp, #8
   130b0:	pop	{r4, r5, r6, pc}
   130b4:	add	r0, r3, #4
   130b8:	bl	145ac <__assert_fail@plt+0x386c>
   130bc:	ldr	r3, [r6, r5, lsl #2]
   130c0:	ldm	r4, {r0, r1}
   130c4:	stm	r3, {r0, r1}
   130c8:	add	sp, sp, #8
   130cc:	pop	{r4, r5, r6, pc}
   130d0:	add	r0, r3, #4
   130d4:	bl	14714 <__assert_fail@plt+0x39d4>
   130d8:	ldr	r3, [r6, r5, lsl #2]
   130dc:	ldm	r4, {r0, r1}
   130e0:	stm	r3, {r0, r1}
   130e4:	add	sp, sp, #8
   130e8:	pop	{r4, r5, r6, pc}
   130ec:	andeq	r9, r2, ip, asr r0
   130f0:	andeq	r8, r1, r0, ror r0
   130f4:	push	{r4, r5, r6, lr}
   130f8:	ldr	r5, [pc, #136]	; 13188 <__assert_fail@plt+0x2448>
   130fc:	ldr	r4, [r5, #1024]	; 0x400
   13100:	cmp	r4, #0
   13104:	beq	1315c <__assert_fail@plt+0x241c>
   13108:	ldr	r3, [r4]
   1310c:	cmp	r3, #0
   13110:	beq	1315c <__assert_fail@plt+0x241c>
   13114:	sub	r3, r3, #1
   13118:	cmp	r3, #1
   1311c:	mov	r6, r0
   13120:	bhi	1314c <__assert_fail@plt+0x240c>
   13124:	ldm	r4, {r0, r1}
   13128:	ldr	r3, [r4, #12]
   1312c:	stm	r6, {r0, r1}
   13130:	ldr	r0, [r4, #8]
   13134:	str	r3, [r5, #1024]	; 0x400
   13138:	bl	13ad0 <__assert_fail@plt+0x2d90>
   1313c:	mov	r0, r4
   13140:	bl	10b78 <free@plt>
   13144:	mov	r0, #0
   13148:	pop	{r4, r5, r6, pc}
   1314c:	mvn	r1, #0
   13150:	ldr	r0, [pc, #52]	; 1318c <__assert_fail@plt+0x244c>
   13154:	bl	11490 <__assert_fail@plt+0x750>
   13158:	b	13124 <__assert_fail@plt+0x23e4>
   1315c:	ldr	r4, [pc, #44]	; 13190 <__assert_fail@plt+0x2450>
   13160:	ldr	r3, [pc, #44]	; 13194 <__assert_fail@plt+0x2454>
   13164:	ldr	r2, [pc, #44]	; 13198 <__assert_fail@plt+0x2458>
   13168:	mov	r1, #1
   1316c:	ldr	r3, [r3]
   13170:	ldr	r0, [r4]
   13174:	bl	10ce0 <__fprintf_chk@plt>
   13178:	ldr	r0, [r4]
   1317c:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13180:	mov	r0, #2
   13184:	pop	{r4, r5, r6, pc}
   13188:	andeq	r9, r2, ip, asr r0
   1318c:	andeq	r8, r1, ip, ror #7
   13190:	andeq	r9, r2, r8, lsr #32
   13194:	andeq	r9, r2, r4, ror r4
   13198:	andeq	r8, r1, r4, lsl r6
   1319c:	ldr	r3, [pc, #264]	; 132ac <__assert_fail@plt+0x256c>
   131a0:	push	{r4, r5, r6, r7, r8, lr}
   131a4:	mov	r5, r0
   131a8:	ldr	r4, [pc, #256]	; 132b0 <__assert_fail@plt+0x2570>
   131ac:	ldr	r3, [r3, #1024]	; 0x400
   131b0:	sub	sp, sp, #40	; 0x28
   131b4:	ldr	r0, [r4]
   131b8:	cmp	r3, #0
   131bc:	str	r0, [sp, #36]	; 0x24
   131c0:	beq	13224 <__assert_fail@plt+0x24e4>
   131c4:	ldr	r0, [r3, #12]
   131c8:	cmp	r0, #0
   131cc:	beq	13224 <__assert_fail@plt+0x24e4>
   131d0:	ldr	r3, [r3]
   131d4:	cmp	r3, #1
   131d8:	bne	131e8 <__assert_fail@plt+0x24a8>
   131dc:	ldr	r6, [r0]
   131e0:	cmp	r6, #1
   131e4:	beq	13234 <__assert_fail@plt+0x24f4>
   131e8:	ldr	r3, [pc, #196]	; 132b4 <__assert_fail@plt+0x2574>
   131ec:	ldr	r5, [pc, #196]	; 132b8 <__assert_fail@plt+0x2578>
   131f0:	ldr	r2, [pc, #196]	; 132bc <__assert_fail@plt+0x257c>
   131f4:	ldr	r3, [r3]
   131f8:	ldr	r0, [r5]
   131fc:	mov	r1, #1
   13200:	bl	10ce0 <__fprintf_chk@plt>
   13204:	ldr	r0, [r5]
   13208:	bl	17a38 <__assert_fail@plt+0x6cf8>
   1320c:	ldr	r2, [sp, #36]	; 0x24
   13210:	ldr	r3, [r4]
   13214:	cmp	r2, r3
   13218:	bne	132a8 <__assert_fail@plt+0x2568>
   1321c:	add	sp, sp, #40	; 0x28
   13220:	pop	{r4, r5, r6, r7, r8, pc}
   13224:	ldr	r3, [pc, #136]	; 132b4 <__assert_fail@plt+0x2574>
   13228:	ldr	r5, [pc, #136]	; 132b8 <__assert_fail@plt+0x2578>
   1322c:	ldr	r2, [pc, #140]	; 132c0 <__assert_fail@plt+0x2580>
   13230:	b	131f4 <__assert_fail@plt+0x24b4>
   13234:	add	r7, sp, #20
   13238:	mov	r0, r7
   1323c:	add	r8, sp, #12
   13240:	str	r1, [sp, #4]
   13244:	bl	130f4 <__assert_fail@plt+0x23b4>
   13248:	mov	r0, r8
   1324c:	bl	130f4 <__assert_fail@plt+0x23b4>
   13250:	ldr	r1, [sp, #4]
   13254:	add	r3, sp, #32
   13258:	mov	r2, r1
   1325c:	ldr	r0, [sp, #16]
   13260:	ldr	r1, [sp, #24]
   13264:	blx	r5
   13268:	add	r3, sp, #28
   1326c:	cmp	r0, #0
   13270:	bne	13294 <__assert_fail@plt+0x2554>
   13274:	str	r6, [sp, #28]
   13278:	ldm	r3, {r0, r1}
   1327c:	bl	12ddc <__assert_fail@plt+0x209c>
   13280:	add	r0, sp, #16
   13284:	bl	145ac <__assert_fail@plt+0x386c>
   13288:	add	r0, sp, #24
   1328c:	bl	145ac <__assert_fail@plt+0x386c>
   13290:	b	1320c <__assert_fail@plt+0x24cc>
   13294:	ldm	r8, {r0, r1}
   13298:	bl	12ddc <__assert_fail@plt+0x209c>
   1329c:	ldm	r7, {r0, r1}
   132a0:	bl	12ddc <__assert_fail@plt+0x209c>
   132a4:	b	1320c <__assert_fail@plt+0x24cc>
   132a8:	bl	10bb4 <__stack_chk_fail@plt>
   132ac:	andeq	r9, r2, ip, asr r0
   132b0:	andeq	r8, r2, r0, lsr lr
   132b4:	andeq	r9, r2, r4, ror r4
   132b8:	andeq	r9, r2, r8, lsr #32
   132bc:	andeq	r8, r1, ip, asr r6
   132c0:	andeq	r8, r1, r4, lsl r6
   132c4:	ldr	r3, [pc, #292]	; 133f0 <__assert_fail@plt+0x26b0>
   132c8:	push	{r4, r5, r6, r7, r8, lr}
   132cc:	mov	r5, r0
   132d0:	ldr	r4, [pc, #284]	; 133f4 <__assert_fail@plt+0x26b4>
   132d4:	ldr	r3, [r3, #1024]	; 0x400
   132d8:	sub	sp, sp, #56	; 0x38
   132dc:	ldr	r0, [r4]
   132e0:	cmp	r3, #0
   132e4:	str	r0, [sp, #52]	; 0x34
   132e8:	beq	1334c <__assert_fail@plt+0x260c>
   132ec:	ldr	r0, [r3, #12]
   132f0:	cmp	r0, #0
   132f4:	beq	1334c <__assert_fail@plt+0x260c>
   132f8:	ldr	r3, [r3]
   132fc:	cmp	r3, #1
   13300:	bne	13310 <__assert_fail@plt+0x25d0>
   13304:	ldr	r6, [r0]
   13308:	cmp	r6, #1
   1330c:	beq	1335c <__assert_fail@plt+0x261c>
   13310:	ldr	r3, [pc, #224]	; 133f8 <__assert_fail@plt+0x26b8>
   13314:	ldr	r5, [pc, #224]	; 133fc <__assert_fail@plt+0x26bc>
   13318:	ldr	r2, [pc, #224]	; 13400 <__assert_fail@plt+0x26c0>
   1331c:	ldr	r3, [r3]
   13320:	ldr	r0, [r5]
   13324:	mov	r1, #1
   13328:	bl	10ce0 <__fprintf_chk@plt>
   1332c:	ldr	r0, [r5]
   13330:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13334:	ldr	r2, [sp, #52]	; 0x34
   13338:	ldr	r3, [r4]
   1333c:	cmp	r2, r3
   13340:	bne	133ec <__assert_fail@plt+0x26ac>
   13344:	add	sp, sp, #56	; 0x38
   13348:	pop	{r4, r5, r6, r7, r8, pc}
   1334c:	ldr	r3, [pc, #164]	; 133f8 <__assert_fail@plt+0x26b8>
   13350:	ldr	r5, [pc, #164]	; 133fc <__assert_fail@plt+0x26bc>
   13354:	ldr	r2, [pc, #168]	; 13404 <__assert_fail@plt+0x26c4>
   13358:	b	1331c <__assert_fail@plt+0x25dc>
   1335c:	add	r7, sp, #28
   13360:	mov	r0, r7
   13364:	add	r8, sp, #20
   13368:	str	r1, [sp, #12]
   1336c:	bl	130f4 <__assert_fail@plt+0x23b4>
   13370:	mov	r0, r8
   13374:	bl	130f4 <__assert_fail@plt+0x23b4>
   13378:	ldr	r1, [sp, #12]
   1337c:	ldr	ip, [sp, #32]
   13380:	add	r3, sp, #48	; 0x30
   13384:	mov	r2, r1
   13388:	str	r3, [sp]
   1338c:	ldr	r0, [sp, #24]
   13390:	add	r3, sp, #40	; 0x28
   13394:	mov	r1, ip
   13398:	blx	r5
   1339c:	add	r3, sp, #36	; 0x24
   133a0:	add	r5, sp, #44	; 0x2c
   133a4:	cmp	r0, #0
   133a8:	bne	133d8 <__assert_fail@plt+0x2698>
   133ac:	str	r6, [sp, #36]	; 0x24
   133b0:	ldm	r3, {r0, r1}
   133b4:	bl	12ddc <__assert_fail@plt+0x209c>
   133b8:	str	r6, [sp, #44]	; 0x2c
   133bc:	ldm	r5, {r0, r1}
   133c0:	bl	12ddc <__assert_fail@plt+0x209c>
   133c4:	add	r0, sp, #24
   133c8:	bl	145ac <__assert_fail@plt+0x386c>
   133cc:	add	r0, sp, #32
   133d0:	bl	145ac <__assert_fail@plt+0x386c>
   133d4:	b	13334 <__assert_fail@plt+0x25f4>
   133d8:	ldm	r8, {r0, r1}
   133dc:	bl	12ddc <__assert_fail@plt+0x209c>
   133e0:	ldm	r7, {r0, r1}
   133e4:	bl	12ddc <__assert_fail@plt+0x209c>
   133e8:	b	13334 <__assert_fail@plt+0x25f4>
   133ec:	bl	10bb4 <__stack_chk_fail@plt>
   133f0:	andeq	r9, r2, ip, asr r0
   133f4:	andeq	r8, r2, r0, lsr lr
   133f8:	andeq	r9, r2, r4, ror r4
   133fc:	andeq	r9, r2, r8, lsr #32
   13400:	andeq	r8, r1, ip, asr r6
   13404:	andeq	r8, r1, r4, lsl r6
   13408:	ldr	r3, [pc, #204]	; 134dc <__assert_fail@plt+0x279c>
   1340c:	push	{r4, r5, lr}
   13410:	sub	sp, sp, #28
   13414:	ldr	r4, [pc, #196]	; 134e0 <__assert_fail@plt+0x27a0>
   13418:	ldr	r3, [r3, #1024]	; 0x400
   1341c:	ldr	r2, [r4]
   13420:	cmp	r3, #0
   13424:	str	r2, [sp, #20]
   13428:	beq	13494 <__assert_fail@plt+0x2754>
   1342c:	ldr	r2, [r3, #12]
   13430:	cmp	r2, #0
   13434:	beq	13494 <__assert_fail@plt+0x2754>
   13438:	ldr	r3, [r3]
   1343c:	cmp	r3, #1
   13440:	bne	13450 <__assert_fail@plt+0x2710>
   13444:	ldr	r3, [r2]
   13448:	cmp	r3, #1
   1344c:	beq	134a4 <__assert_fail@plt+0x2764>
   13450:	ldr	r3, [pc, #140]	; 134e4 <__assert_fail@plt+0x27a4>
   13454:	ldr	r5, [pc, #140]	; 134e8 <__assert_fail@plt+0x27a8>
   13458:	ldr	r2, [pc, #140]	; 134ec <__assert_fail@plt+0x27ac>
   1345c:	ldr	r3, [r3]
   13460:	ldr	r0, [r5]
   13464:	mov	r1, #1
   13468:	bl	10ce0 <__fprintf_chk@plt>
   1346c:	ldr	r0, [r5]
   13470:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13474:	mov	r5, #0
   13478:	ldr	r2, [sp, #20]
   1347c:	ldr	r3, [r4]
   13480:	mov	r0, r5
   13484:	cmp	r2, r3
   13488:	bne	134d8 <__assert_fail@plt+0x2798>
   1348c:	add	sp, sp, #28
   13490:	pop	{r4, r5, pc}
   13494:	ldr	r3, [pc, #72]	; 134e4 <__assert_fail@plt+0x27a4>
   13498:	ldr	r5, [pc, #72]	; 134e8 <__assert_fail@plt+0x27a8>
   1349c:	ldr	r2, [pc, #76]	; 134f0 <__assert_fail@plt+0x27b0>
   134a0:	b	1345c <__assert_fail@plt+0x271c>
   134a4:	add	r0, sp, #12
   134a8:	bl	130f4 <__assert_fail@plt+0x23b4>
   134ac:	add	r0, sp, #4
   134b0:	bl	130f4 <__assert_fail@plt+0x23b4>
   134b4:	ldr	r1, [sp, #8]
   134b8:	ldr	r0, [sp, #16]
   134bc:	bl	1403c <__assert_fail@plt+0x32fc>
   134c0:	mov	r5, r0
   134c4:	add	r0, sp, #8
   134c8:	bl	145ac <__assert_fail@plt+0x386c>
   134cc:	add	r0, sp, #16
   134d0:	bl	145ac <__assert_fail@plt+0x386c>
   134d4:	b	13478 <__assert_fail@plt+0x2738>
   134d8:	bl	10bb4 <__stack_chk_fail@plt>
   134dc:	andeq	r9, r2, ip, asr r0
   134e0:	andeq	r8, r2, r0, lsr lr
   134e4:	andeq	r9, r2, r4, ror r4
   134e8:	andeq	r9, r2, r8, lsr #32
   134ec:	andeq	r8, r1, ip, asr r6
   134f0:	andeq	r8, r1, r4, lsl r6
   134f4:	ldr	r3, [pc, #328]	; 13644 <__assert_fail@plt+0x2904>
   134f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   134fc:	mov	r5, r0
   13500:	ldr	r4, [pc, #320]	; 13648 <__assert_fail@plt+0x2908>
   13504:	ldr	r2, [r3, #1024]	; 0x400
   13508:	sub	sp, sp, #60	; 0x3c
   1350c:	ldr	r0, [r4]
   13510:	cmp	r2, #0
   13514:	str	r0, [sp, #52]	; 0x34
   13518:	beq	1355c <__assert_fail@plt+0x281c>
   1351c:	ldr	r0, [r2, #12]
   13520:	cmp	r0, #0
   13524:	beq	1355c <__assert_fail@plt+0x281c>
   13528:	ldr	ip, [r0, #12]
   1352c:	cmp	ip, #0
   13530:	beq	1355c <__assert_fail@plt+0x281c>
   13534:	ldr	r3, [r2]
   13538:	cmp	r3, #1
   1353c:	bne	1354c <__assert_fail@plt+0x280c>
   13540:	ldr	r3, [r0]
   13544:	cmp	r3, #1
   13548:	beq	13598 <__assert_fail@plt+0x2858>
   1354c:	ldr	r3, [pc, #248]	; 1364c <__assert_fail@plt+0x290c>
   13550:	ldr	r5, [pc, #248]	; 13650 <__assert_fail@plt+0x2910>
   13554:	ldr	r2, [pc, #248]	; 13654 <__assert_fail@plt+0x2914>
   13558:	b	13568 <__assert_fail@plt+0x2828>
   1355c:	ldr	r3, [pc, #232]	; 1364c <__assert_fail@plt+0x290c>
   13560:	ldr	r5, [pc, #232]	; 13650 <__assert_fail@plt+0x2910>
   13564:	ldr	r2, [pc, #236]	; 13658 <__assert_fail@plt+0x2918>
   13568:	ldr	r3, [r3]
   1356c:	ldr	r0, [r5]
   13570:	mov	r1, #1
   13574:	bl	10ce0 <__fprintf_chk@plt>
   13578:	ldr	r0, [r5]
   1357c:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13580:	ldr	r2, [sp, #52]	; 0x34
   13584:	ldr	r3, [r4]
   13588:	cmp	r2, r3
   1358c:	bne	13640 <__assert_fail@plt+0x2900>
   13590:	add	sp, sp, #60	; 0x3c
   13594:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13598:	ldr	r6, [ip]
   1359c:	cmp	r6, #1
   135a0:	bne	1354c <__assert_fail@plt+0x280c>
   135a4:	add	r7, sp, #36	; 0x24
   135a8:	mov	r0, r7
   135ac:	add	r8, sp, #28
   135b0:	str	r1, [sp, #12]
   135b4:	add	r9, sp, #20
   135b8:	bl	130f4 <__assert_fail@plt+0x23b4>
   135bc:	mov	r0, r8
   135c0:	bl	130f4 <__assert_fail@plt+0x23b4>
   135c4:	mov	r0, r9
   135c8:	bl	130f4 <__assert_fail@plt+0x23b4>
   135cc:	ldr	r1, [sp, #12]
   135d0:	ldr	lr, [sp, #32]
   135d4:	add	ip, sp, #48	; 0x30
   135d8:	mov	r3, r1
   135dc:	ldr	r2, [sp, #40]	; 0x28
   135e0:	ldr	r0, [sp, #24]
   135e4:	mov	r1, lr
   135e8:	str	ip, [sp]
   135ec:	blx	r5
   135f0:	add	r3, sp, #44	; 0x2c
   135f4:	cmp	r0, #0
   135f8:	bne	13624 <__assert_fail@plt+0x28e4>
   135fc:	str	r6, [sp, #44]	; 0x2c
   13600:	ldm	r3, {r0, r1}
   13604:	bl	12ddc <__assert_fail@plt+0x209c>
   13608:	add	r0, sp, #24
   1360c:	bl	145ac <__assert_fail@plt+0x386c>
   13610:	add	r0, sp, #32
   13614:	bl	145ac <__assert_fail@plt+0x386c>
   13618:	add	r0, sp, #40	; 0x28
   1361c:	bl	145ac <__assert_fail@plt+0x386c>
   13620:	b	13580 <__assert_fail@plt+0x2840>
   13624:	ldm	r9, {r0, r1}
   13628:	bl	12ddc <__assert_fail@plt+0x209c>
   1362c:	ldm	r8, {r0, r1}
   13630:	bl	12ddc <__assert_fail@plt+0x209c>
   13634:	ldm	r7, {r0, r1}
   13638:	bl	12ddc <__assert_fail@plt+0x209c>
   1363c:	b	13580 <__assert_fail@plt+0x2840>
   13640:	bl	10bb4 <__stack_chk_fail@plt>
   13644:	andeq	r9, r2, ip, asr r0
   13648:	andeq	r8, r2, r0, lsr lr
   1364c:	andeq	r9, r2, r4, ror r4
   13650:	andeq	r9, r2, r8, lsr #32
   13654:	andeq	r8, r1, ip, asr r6
   13658:	andeq	r8, r1, r4, lsl r6
   1365c:	push	{r4, r5, r6, r7, r8, lr}
   13660:	uxtb	r5, r0
   13664:	ldr	r6, [pc, #152]	; 13704 <__assert_fail@plt+0x29c4>
   13668:	ldr	r4, [r6, r5, lsl #2]
   1366c:	cmp	r4, #0
   13670:	beq	136c8 <__assert_fail@plt+0x2988>
   13674:	ldr	r3, [r4]
   13678:	cmp	r3, #0
   1367c:	beq	136c8 <__assert_fail@plt+0x2988>
   13680:	sub	r3, r3, #1
   13684:	cmp	r3, #1
   13688:	mov	r7, r1
   1368c:	bhi	136b8 <__assert_fail@plt+0x2978>
   13690:	ldm	r4, {r0, r1}
   13694:	ldr	r3, [r4, #12]
   13698:	stm	r7, {r0, r1}
   1369c:	ldr	r0, [r4, #8]
   136a0:	str	r3, [r6, r5, lsl #2]
   136a4:	bl	13ad0 <__assert_fail@plt+0x2d90>
   136a8:	mov	r0, r4
   136ac:	bl	10b78 <free@plt>
   136b0:	mov	r0, #0
   136b4:	pop	{r4, r5, r6, r7, r8, pc}
   136b8:	mov	r1, r5
   136bc:	ldr	r0, [pc, #68]	; 13708 <__assert_fail@plt+0x29c8>
   136c0:	bl	11490 <__assert_fail@plt+0x750>
   136c4:	b	13690 <__assert_fail@plt+0x2950>
   136c8:	ldr	r4, [pc, #60]	; 1370c <__assert_fail@plt+0x29cc>
   136cc:	ldr	r3, [pc, #60]	; 13710 <__assert_fail@plt+0x29d0>
   136d0:	ldr	r2, [pc, #60]	; 13714 <__assert_fail@plt+0x29d4>
   136d4:	mov	r1, #1
   136d8:	ldr	r3, [r3]
   136dc:	ldr	r0, [r4]
   136e0:	bl	10ce0 <__fprintf_chk@plt>
   136e4:	ldr	r0, [r4]
   136e8:	bl	17a38 <__assert_fail@plt+0x6cf8>
   136ec:	ldr	r0, [r4]
   136f0:	mov	r1, r5
   136f4:	ldr	r2, [pc, #28]	; 13718 <__assert_fail@plt+0x29d8>
   136f8:	bl	1140c <__assert_fail@plt+0x6cc>
   136fc:	mov	r0, #2
   13700:	pop	{r4, r5, r6, r7, r8, pc}
   13704:	andeq	r9, r2, ip, asr r0
   13708:	muleq	r1, r4, r6
   1370c:	andeq	r9, r2, r8, lsr #32
   13710:	andeq	r9, r2, r4, ror r4
   13714:	andeq	r8, r1, r4, ror r6
   13718:	andeq	r8, r1, r8, lsl #13
   1371c:	push	{r4, lr}
   13720:	eor	r3, r0, r0, asr #31
   13724:	ldr	r4, [pc, #116]	; 137a0 <__assert_fail@plt+0x2a60>
   13728:	sub	r3, r3, r0, asr #31
   1372c:	cmp	r3, #1
   13730:	ldr	lr, [r4, #1024]	; 0x400
   13734:	movgt	ip, #0
   13738:	movle	ip, #1
   1373c:	cmp	lr, #0
   13740:	moveq	ip, #1
   13744:	cmp	ip, #0
   13748:	moveq	r2, lr
   1374c:	popne	{r4, pc}
   13750:	ldr	r1, [r2, #12]
   13754:	cmp	r1, #0
   13758:	beq	13778 <__assert_fail@plt+0x2a38>
   1375c:	subs	r3, r3, #1
   13760:	beq	13778 <__assert_fail@plt+0x2a38>
   13764:	mov	ip, r2
   13768:	mov	r2, r1
   1376c:	ldr	r1, [r2, #12]
   13770:	cmp	r1, #0
   13774:	bne	1375c <__assert_fail@plt+0x2a1c>
   13778:	cmp	ip, #0
   1377c:	popeq	{r4, pc}
   13780:	cmp	r0, #0
   13784:	strgt	r1, [ip, #12]
   13788:	ldrle	r3, [lr, #12]
   1378c:	strgt	r2, [r4, #1024]	; 0x400
   13790:	strle	r1, [lr, #12]
   13794:	strle	r3, [r4, #1024]	; 0x400
   13798:	str	lr, [r2, #12]
   1379c:	pop	{r4, pc}
   137a0:	andeq	r9, r2, ip, asr r0
   137a4:	ldr	r3, [pc, #40]	; 137d4 <__assert_fail@plt+0x2a94>
   137a8:	ldr	r3, [r3, #1024]	; 0x400
   137ac:	cmp	r3, #0
   137b0:	beq	137cc <__assert_fail@plt+0x2a8c>
   137b4:	mov	r0, #0
   137b8:	ldr	r3, [r3, #12]
   137bc:	add	r0, r0, #1
   137c0:	cmp	r3, #0
   137c4:	bne	137b8 <__assert_fail@plt+0x2a78>
   137c8:	bx	lr
   137cc:	mov	r0, r3
   137d0:	bx	lr
   137d4:	andeq	r9, r2, ip, asr r0
   137d8:	push	{r4, r5, lr}
   137dc:	sub	sp, sp, #12
   137e0:	add	r3, sp, #8
   137e4:	mov	r5, r2
   137e8:	stmdb	r3, {r0, r1}
   137ec:	ldr	r3, [sp]
   137f0:	cmp	r3, #1
   137f4:	beq	1383c <__assert_fail@plt+0x2afc>
   137f8:	cmp	r3, #2
   137fc:	beq	1381c <__assert_fail@plt+0x2adc>
   13800:	mvn	r1, #0
   13804:	ldr	r0, [pc, #80]	; 1385c <__assert_fail@plt+0x2b1c>
   13808:	bl	11490 <__assert_fail@plt+0x750>
   1380c:	mov	r4, #0
   13810:	mov	r0, r4
   13814:	add	sp, sp, #12
   13818:	pop	{r4, r5, pc}
   1381c:	ldr	r0, [sp, #4]
   13820:	bl	14920 <__assert_fail@plt+0x3be0>
   13824:	cmp	r5, #0
   13828:	mov	r4, r0
   1382c:	bne	13810 <__assert_fail@plt+0x2ad0>
   13830:	add	r0, sp, #4
   13834:	bl	14714 <__assert_fail@plt+0x39d4>
   13838:	b	13810 <__assert_fail@plt+0x2ad0>
   1383c:	ldr	r0, [sp, #4]
   13840:	bl	143c0 <__assert_fail@plt+0x3680>
   13844:	cmp	r5, #0
   13848:	mov	r4, r0
   1384c:	bne	13810 <__assert_fail@plt+0x2ad0>
   13850:	add	r0, sp, #4
   13854:	bl	145ac <__assert_fail@plt+0x386c>
   13858:	b	13810 <__assert_fail@plt+0x2ad0>
   1385c:	muleq	r1, ip, r6
   13860:	ldr	r3, [pc, #64]	; 138a8 <__assert_fail@plt+0x2b68>
   13864:	push	{r4, r5, r6, lr}
   13868:	sub	sp, sp, #8
   1386c:	ldr	r4, [r3, #1024]	; 0x400
   13870:	cmp	r4, #0
   13874:	beq	138a0 <__assert_fail@plt+0x2b60>
   13878:	mov	r5, r0
   1387c:	mov	r6, #1
   13880:	str	r6, [sp]
   13884:	mov	r3, #1
   13888:	ldm	r4, {r0, r1}
   1388c:	mov	r2, r5
   13890:	bl	11570 <__assert_fail@plt+0x830>
   13894:	ldr	r4, [r4, #12]
   13898:	cmp	r4, #0
   1389c:	bne	13880 <__assert_fail@plt+0x2b40>
   138a0:	add	sp, sp, #8
   138a4:	pop	{r4, r5, r6, pc}
   138a8:	andeq	r9, r2, ip, asr r0
   138ac:	ldr	r3, [pc, #16]	; 138c4 <__assert_fail@plt+0x2b84>
   138b0:	uxtb	r0, r0
   138b4:	ldr	r0, [r3, r0, lsl #2]
   138b8:	cmp	r0, #0
   138bc:	ldrne	r0, [r0, #8]
   138c0:	bx	lr
   138c4:	andeq	r9, r2, ip, asr r0
   138c8:	push	{r4, r5, lr}
   138cc:	uxtb	r5, r0
   138d0:	ldr	r4, [pc, #72]	; 13920 <__assert_fail@plt+0x2be0>
   138d4:	sub	sp, sp, #12
   138d8:	ldr	r0, [r4, r5, lsl #2]
   138dc:	cmp	r0, #0
   138e0:	beq	138f0 <__assert_fail@plt+0x2bb0>
   138e4:	str	r1, [r0, #8]
   138e8:	add	sp, sp, #12
   138ec:	pop	{r4, r5, pc}
   138f0:	mov	r0, #16
   138f4:	str	r1, [sp, #4]
   138f8:	bl	113f8 <__assert_fail@plt+0x6b8>
   138fc:	ldr	r1, [sp, #4]
   13900:	mov	r3, #0
   13904:	str	r3, [r0, #8]
   13908:	str	r3, [r0]
   1390c:	str	r3, [r0, #12]
   13910:	str	r0, [r4, r5, lsl #2]
   13914:	str	r1, [r0, #8]
   13918:	add	sp, sp, #12
   1391c:	pop	{r4, r5, pc}
   13920:	andeq	r9, r2, ip, asr r0
   13924:	bx	lr
   13928:	push	{r4, r5, r6, r7, r8, lr}
   1392c:	sub	sp, sp, #8
   13930:	mov	r7, sp
   13934:	mov	r6, r1
   13938:	stm	r7, {r2, r3}
   1393c:	mov	r8, r0
   13940:	bl	138ac <__assert_fail@plt+0x2b6c>
   13944:	subs	r5, r0, #0
   13948:	beq	139e8 <__assert_fail@plt+0x2ca8>
   1394c:	ldr	r3, [r5]
   13950:	cmp	r6, r3
   13954:	bgt	1396c <__assert_fail@plt+0x2c2c>
   13958:	b	139e4 <__assert_fail@plt+0x2ca4>
   1395c:	ldr	r3, [r4]
   13960:	cmp	r3, r6
   13964:	bge	139a4 <__assert_fail@plt+0x2c64>
   13968:	mov	r5, r4
   1396c:	ldr	r4, [r5, #12]
   13970:	cmp	r4, #0
   13974:	bne	1395c <__assert_fail@plt+0x2c1c>
   13978:	mov	r0, #16
   1397c:	bl	113f8 <__assert_fail@plt+0x6b8>
   13980:	mov	r2, r0
   13984:	ldm	r7, {r0, r1}
   13988:	mov	r3, r2
   1398c:	str	r6, [r3], #4
   13990:	stm	r3, {r0, r1}
   13994:	str	r4, [r2, #12]
   13998:	str	r2, [r5, #12]
   1399c:	add	sp, sp, #8
   139a0:	pop	{r4, r5, r6, r7, r8, pc}
   139a4:	bne	13978 <__assert_fail@plt+0x2c38>
   139a8:	ldr	r3, [r4, #4]
   139ac:	cmp	r3, #1
   139b0:	beq	13a1c <__assert_fail@plt+0x2cdc>
   139b4:	cmp	r3, #2
   139b8:	beq	139d8 <__assert_fail@plt+0x2c98>
   139bc:	mov	r1, r8
   139c0:	ldr	r0, [pc, #104]	; 13a30 <__assert_fail@plt+0x2cf0>
   139c4:	bl	11490 <__assert_fail@plt+0x750>
   139c8:	ldm	r7, {r0, r1}
   139cc:	stmib	r4, {r0, r1}
   139d0:	add	sp, sp, #8
   139d4:	pop	{r4, r5, r6, r7, r8, pc}
   139d8:	add	r0, r4, #8
   139dc:	bl	14714 <__assert_fail@plt+0x39d4>
   139e0:	b	139c8 <__assert_fail@plt+0x2c88>
   139e4:	beq	13a28 <__assert_fail@plt+0x2ce8>
   139e8:	mov	r0, #16
   139ec:	bl	113f8 <__assert_fail@plt+0x6b8>
   139f0:	mov	r3, r0
   139f4:	ldm	r7, {r0, r1}
   139f8:	mov	r2, r3
   139fc:	str	r6, [r2], #4
   13a00:	stm	r2, {r0, r1}
   13a04:	str	r5, [r3, #12]
   13a08:	mov	r1, r3
   13a0c:	mov	r0, r8
   13a10:	add	sp, sp, #8
   13a14:	pop	{r4, r5, r6, r7, r8, lr}
   13a18:	b	138c8 <__assert_fail@plt+0x2b88>
   13a1c:	add	r0, r4, #8
   13a20:	bl	145ac <__assert_fail@plt+0x386c>
   13a24:	b	139c8 <__assert_fail@plt+0x2c88>
   13a28:	mov	r4, r5
   13a2c:	b	139a8 <__assert_fail@plt+0x2c68>
   13a30:	andeq	r8, r1, ip, lsr #13
   13a34:	push	{r4, r5, r6, lr}
   13a38:	sub	sp, sp, #8
   13a3c:	ldr	r6, [pc, #136]	; 13acc <__assert_fail@plt+0x2d8c>
   13a40:	mov	r5, r0
   13a44:	mov	r0, r1
   13a48:	ldr	r3, [r6]
   13a4c:	mov	r4, r2
   13a50:	str	r3, [sp, #4]
   13a54:	bl	138ac <__assert_fail@plt+0x2b6c>
   13a58:	cmp	r0, #0
   13a5c:	beq	13a88 <__assert_fail@plt+0x2d48>
   13a60:	ldr	r3, [r0]
   13a64:	cmp	r4, r3
   13a68:	bgt	13a7c <__assert_fail@plt+0x2d3c>
   13a6c:	b	13ab0 <__assert_fail@plt+0x2d70>
   13a70:	ldr	r3, [r0]
   13a74:	cmp	r3, r4
   13a78:	bge	13ab0 <__assert_fail@plt+0x2d70>
   13a7c:	ldr	r0, [r0, #12]
   13a80:	cmp	r0, #0
   13a84:	bne	13a70 <__assert_fail@plt+0x2d30>
   13a88:	mov	r1, #0
   13a8c:	mov	r0, r5
   13a90:	bl	140b8 <__assert_fail@plt+0x3378>
   13a94:	ldr	r2, [sp, #4]
   13a98:	ldr	r3, [r6]
   13a9c:	mov	r0, r5
   13aa0:	cmp	r2, r3
   13aa4:	bne	13ac8 <__assert_fail@plt+0x2d88>
   13aa8:	add	sp, sp, #8
   13aac:	pop	{r4, r5, r6, pc}
   13ab0:	cmp	r3, r4
   13ab4:	bne	13a88 <__assert_fail@plt+0x2d48>
   13ab8:	ldmib	r0, {r1, r2}
   13abc:	mov	r0, r5
   13ac0:	bl	11604 <__assert_fail@plt+0x8c4>
   13ac4:	b	13a94 <__assert_fail@plt+0x2d54>
   13ac8:	bl	10bb4 <__stack_chk_fail@plt>
   13acc:	andeq	r8, r2, r0, lsr lr
   13ad0:	push	{r4, r5, r6, lr}
   13ad4:	subs	r4, r0, #0
   13ad8:	popeq	{r4, r5, r6, pc}
   13adc:	ldr	r6, [pc, #76]	; 13b30 <__assert_fail@plt+0x2df0>
   13ae0:	b	13af8 <__assert_fail@plt+0x2db8>
   13ae4:	bl	11490 <__assert_fail@plt+0x750>
   13ae8:	mov	r0, r4
   13aec:	bl	10b78 <free@plt>
   13af0:	subs	r4, r5, #0
   13af4:	popeq	{r4, r5, r6, pc}
   13af8:	ldr	r3, [r4, #4]
   13afc:	mvn	r1, #0
   13b00:	cmp	r3, #1
   13b04:	mov	r0, r6
   13b08:	ldr	r5, [r4, #12]
   13b0c:	beq	13b24 <__assert_fail@plt+0x2de4>
   13b10:	cmp	r3, #2
   13b14:	bne	13ae4 <__assert_fail@plt+0x2da4>
   13b18:	add	r0, r4, #8
   13b1c:	bl	14714 <__assert_fail@plt+0x39d4>
   13b20:	b	13ae8 <__assert_fail@plt+0x2da8>
   13b24:	add	r0, r4, #8
   13b28:	bl	145ac <__assert_fail@plt+0x386c>
   13b2c:	b	13ae8 <__assert_fail@plt+0x2da8>
   13b30:	strdeq	r8, [r1], -r0
   13b34:	push	{r4, r5, r6, r7, r8, r9, lr}
   13b38:	sub	sp, sp, #12
   13b3c:	ldr	r4, [pc, #364]	; 13cb0 <__assert_fail@plt+0x2f70>
   13b40:	subs	r6, r0, #0
   13b44:	ldr	r3, [r4]
   13b48:	str	r3, [sp, #4]
   13b4c:	beq	13bc8 <__assert_fail@plt+0x2e88>
   13b50:	ldr	r7, [pc, #348]	; 13cb4 <__assert_fail@plt+0x2f74>
   13b54:	ldr	r5, [r7]
   13b58:	cmp	r5, #0
   13b5c:	blt	13bd4 <__assert_fail@plt+0x2e94>
   13b60:	movne	r2, #1
   13b64:	moveq	r2, #0
   13b68:	ldr	r8, [pc, #328]	; 13cb8 <__assert_fail@plt+0x2f78>
   13b6c:	ldr	r7, [pc, #328]	; 13cbc <__assert_fail@plt+0x2f7c>
   13b70:	ldr	r3, [r8]
   13b74:	ldr	r1, [r7]
   13b78:	add	r3, r3, #1
   13b7c:	cmp	r3, r5
   13b80:	movlt	r5, #0
   13b84:	andge	r5, r2, #1
   13b88:	cmp	r5, #0
   13b8c:	str	r3, [r8]
   13b90:	bne	13c88 <__assert_fail@plt+0x2f48>
   13b94:	mov	r0, r6
   13b98:	bl	10bd8 <_IO_putc@plt>
   13b9c:	ldr	r0, [r7]
   13ba0:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13ba4:	ldr	r3, [pc, #276]	; 13cc0 <__assert_fail@plt+0x2f80>
   13ba8:	ldr	r0, [r3]
   13bac:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13bb0:	ldr	r2, [sp, #4]
   13bb4:	ldr	r3, [r4]
   13bb8:	cmp	r2, r3
   13bbc:	bne	13cac <__assert_fail@plt+0x2f6c>
   13bc0:	add	sp, sp, #12
   13bc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13bc8:	ldr	r3, [pc, #232]	; 13cb8 <__assert_fail@plt+0x2f78>
   13bcc:	str	r6, [r3]
   13bd0:	b	13bb0 <__assert_fail@plt+0x2e70>
   13bd4:	ldr	r0, [pc, #232]	; 13cc4 <__assert_fail@plt+0x2f84>
   13bd8:	bl	10bf0 <getenv@plt>
   13bdc:	mov	r5, #70	; 0x46
   13be0:	str	r5, [r7]
   13be4:	mov	r9, r0
   13be8:	bl	10c98 <__errno_location@plt>
   13bec:	mov	r2, #0
   13bf0:	cmp	r9, #0
   13bf4:	str	r2, [r0]
   13bf8:	mov	r8, r0
   13bfc:	moveq	r2, #1
   13c00:	beq	13b68 <__assert_fail@plt+0x2e28>
   13c04:	mov	r1, sp
   13c08:	mov	r0, r9
   13c0c:	bl	10b3c <strtol@plt>
   13c10:	mov	r5, r0
   13c14:	str	r0, [r7]
   13c18:	bl	10c5c <__ctype_b_loc@plt>
   13c1c:	ldr	r3, [sp]
   13c20:	ldr	r0, [r0]
   13c24:	b	13c2c <__assert_fail@plt+0x2eec>
   13c28:	str	r3, [sp]
   13c2c:	ldrb	r2, [r3], #1
   13c30:	lsl	r1, r2, #1
   13c34:	ldrh	r1, [r0, r1]
   13c38:	tst	r1, #8192	; 0x2000
   13c3c:	bne	13c28 <__assert_fail@plt+0x2ee8>
   13c40:	cmp	r2, #0
   13c44:	bne	13c78 <__assert_fail@plt+0x2f38>
   13c48:	ldr	r2, [r8]
   13c4c:	sub	r3, r5, #1
   13c50:	cmp	r2, #0
   13c54:	clz	r3, r3
   13c58:	lsr	r3, r3, #5
   13c5c:	orr	r3, r3, r5, lsr #31
   13c60:	movne	r3, #1
   13c64:	cmp	r3, #0
   13c68:	bne	13c78 <__assert_fail@plt+0x2f38>
   13c6c:	adds	r2, r5, #0
   13c70:	movne	r2, #1
   13c74:	b	13b68 <__assert_fail@plt+0x2e28>
   13c78:	mov	r5, #70	; 0x46
   13c7c:	str	r5, [r7]
   13c80:	mov	r2, #1
   13c84:	b	13b68 <__assert_fail@plt+0x2e28>
   13c88:	mov	r0, #92	; 0x5c
   13c8c:	bl	10bd8 <_IO_putc@plt>
   13c90:	ldr	r1, [r7]
   13c94:	mov	r0, #10
   13c98:	bl	10bd8 <_IO_putc@plt>
   13c9c:	mov	r3, #1
   13ca0:	ldr	r1, [r7]
   13ca4:	str	r3, [r8]
   13ca8:	b	13b94 <__assert_fail@plt+0x2e54>
   13cac:	bl	10bb4 <__stack_chk_fail@plt>
   13cb0:	andeq	r8, r2, r0, lsr lr
   13cb4:	andeq	r9, r2, r4, lsl r0
   13cb8:	andeq	r9, r2, r0, ror #8
   13cbc:	andeq	r9, r2, r4, lsr r0
   13cc0:	andeq	r9, r2, r8, lsr #32
   13cc4:			; <UNDEFINED> instruction: 0x000186b8
   13cc8:	push	{r4, r5, r6, lr}
   13ccc:	mov	r4, r3
   13cd0:	mov	r5, r0
   13cd4:	mov	r6, r1
   13cd8:	mov	r0, r3
   13cdc:	bl	15314 <__assert_fail@plt+0x45d4>
   13ce0:	mov	r0, r5
   13ce4:	mov	r2, r4
   13ce8:	mov	r1, r6
   13cec:	mov	r3, #0
   13cf0:	bl	15da0 <__assert_fail@plt+0x5060>
   13cf4:	mov	r0, #0
   13cf8:	pop	{r4, r5, r6, pc}
   13cfc:	push	{r4, r5, r6, lr}
   13d00:	mov	r4, r3
   13d04:	mov	r5, r0
   13d08:	mov	r6, r1
   13d0c:	mov	r0, r3
   13d10:	bl	15314 <__assert_fail@plt+0x45d4>
   13d14:	mov	r0, r5
   13d18:	mov	r2, r4
   13d1c:	mov	r1, r6
   13d20:	mov	r3, #0
   13d24:	bl	1545c <__assert_fail@plt+0x471c>
   13d28:	mov	r0, #0
   13d2c:	pop	{r4, r5, r6, pc}
   13d30:	push	{r4, r5, r6, r7, r8, lr}
   13d34:	mov	r4, r3
   13d38:	mov	r7, r2
   13d3c:	mov	r5, r0
   13d40:	mov	r6, r1
   13d44:	mov	r0, r3
   13d48:	bl	15314 <__assert_fail@plt+0x45d4>
   13d4c:	mov	r0, r5
   13d50:	mov	r3, r7
   13d54:	mov	r2, r4
   13d58:	mov	r1, r6
   13d5c:	bl	15e88 <__assert_fail@plt+0x5148>
   13d60:	mov	r0, #0
   13d64:	pop	{r4, r5, r6, r7, r8, pc}
   13d68:	push	{r4, r5, r6, r7, r8, lr}
   13d6c:	mov	r4, r3
   13d70:	mov	r7, r2
   13d74:	mov	r5, r0
   13d78:	mov	r6, r1
   13d7c:	mov	r0, r3
   13d80:	bl	15314 <__assert_fail@plt+0x45d4>
   13d84:	mov	r3, r7
   13d88:	mov	r2, r4
   13d8c:	mov	r1, r6
   13d90:	mov	r0, r5
   13d94:	bl	16004 <__assert_fail@plt+0x52c4>
   13d98:	cmp	r0, #0
   13d9c:	popeq	{r4, r5, r6, r7, r8, pc}
   13da0:	ldr	r4, [pc, #36]	; 13dcc <__assert_fail@plt+0x308c>
   13da4:	ldr	r3, [pc, #36]	; 13dd0 <__assert_fail@plt+0x3090>
   13da8:	ldr	r2, [pc, #36]	; 13dd4 <__assert_fail@plt+0x3094>
   13dac:	mov	r1, #1
   13db0:	ldr	r3, [r3]
   13db4:	ldr	r0, [r4]
   13db8:	bl	10ce0 <__fprintf_chk@plt>
   13dbc:	ldr	r0, [r4]
   13dc0:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13dc4:	mov	r0, #1
   13dc8:	pop	{r4, r5, r6, r7, r8, pc}
   13dcc:	andeq	r9, r2, r8, lsr #32
   13dd0:	andeq	r9, r2, r4, ror r4
   13dd4:	andeq	r8, r1, r8, asr #13
   13dd8:	push	{r4, r5, r6, r7, lr}
   13ddc:	sub	sp, sp, #12
   13de0:	mov	r5, r0
   13de4:	mov	r0, r3
   13de8:	mov	r4, r3
   13dec:	mov	r7, r2
   13df0:	mov	r6, r1
   13df4:	bl	15314 <__assert_fail@plt+0x45d4>
   13df8:	ldr	r0, [sp, #32]
   13dfc:	bl	15314 <__assert_fail@plt+0x45d4>
   13e00:	str	r7, [sp]
   13e04:	mov	r2, r4
   13e08:	mov	r1, r6
   13e0c:	mov	r0, r5
   13e10:	ldr	r3, [sp, #32]
   13e14:	bl	16678 <__assert_fail@plt+0x5938>
   13e18:	cmp	r0, #0
   13e1c:	beq	13e48 <__assert_fail@plt+0x3108>
   13e20:	ldr	r4, [pc, #40]	; 13e50 <__assert_fail@plt+0x3110>
   13e24:	ldr	r3, [pc, #40]	; 13e54 <__assert_fail@plt+0x3114>
   13e28:	ldr	r2, [pc, #40]	; 13e58 <__assert_fail@plt+0x3118>
   13e2c:	mov	r1, #1
   13e30:	ldr	r3, [r3]
   13e34:	ldr	r0, [r4]
   13e38:	bl	10ce0 <__fprintf_chk@plt>
   13e3c:	ldr	r0, [r4]
   13e40:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13e44:	mov	r0, #1
   13e48:	add	sp, sp, #12
   13e4c:	pop	{r4, r5, r6, r7, pc}
   13e50:	andeq	r9, r2, r8, lsr #32
   13e54:	andeq	r9, r2, r4, ror r4
   13e58:	andeq	r8, r1, r8, asr #13
   13e5c:	push	{r4, r5, r6, r7, r8, lr}
   13e60:	mov	r4, r3
   13e64:	mov	r7, r2
   13e68:	mov	r5, r0
   13e6c:	mov	r6, r1
   13e70:	mov	r0, r3
   13e74:	bl	15314 <__assert_fail@plt+0x45d4>
   13e78:	mov	r3, r7
   13e7c:	mov	r2, r4
   13e80:	mov	r1, r6
   13e84:	mov	r0, r5
   13e88:	bl	167e0 <__assert_fail@plt+0x5aa0>
   13e8c:	cmp	r0, #0
   13e90:	popeq	{r4, r5, r6, r7, r8, pc}
   13e94:	ldr	r4, [pc, #36]	; 13ec0 <__assert_fail@plt+0x3180>
   13e98:	ldr	r3, [pc, #36]	; 13ec4 <__assert_fail@plt+0x3184>
   13e9c:	ldr	r2, [pc, #36]	; 13ec8 <__assert_fail@plt+0x3188>
   13ea0:	mov	r1, #1
   13ea4:	ldr	r3, [r3]
   13ea8:	ldr	r0, [r4]
   13eac:	bl	10ce0 <__fprintf_chk@plt>
   13eb0:	ldr	r0, [r4]
   13eb4:	bl	17a38 <__assert_fail@plt+0x6cf8>
   13eb8:	mov	r0, #1
   13ebc:	pop	{r4, r5, r6, r7, r8, pc}
   13ec0:	andeq	r9, r2, r8, lsr #32
   13ec4:	andeq	r9, r2, r4, ror r4
   13ec8:	ldrdeq	r8, [r1], -ip
   13ecc:	push	{r4, r5, r6, r7, lr}
   13ed0:	sub	sp, sp, #12
   13ed4:	mov	r7, r3
   13ed8:	mov	r5, r0
   13edc:	mov	r6, r1
   13ee0:	mov	r4, r2
   13ee4:	ldr	r0, [sp, #32]
   13ee8:	bl	15314 <__assert_fail@plt+0x45d4>
   13eec:	str	r7, [sp]
   13ef0:	mov	r1, r6
   13ef4:	mov	r0, r5
   13ef8:	ldr	r3, [sp, #32]
   13efc:	mov	r2, r4
   13f00:	bl	16800 <__assert_fail@plt+0x5ac0>
   13f04:	cmp	r0, #0
   13f08:	bne	13f14 <__assert_fail@plt+0x31d4>
   13f0c:	add	sp, sp, #12
   13f10:	pop	{r4, r5, r6, r7, pc}
   13f14:	mov	r0, r4
   13f18:	bl	15370 <__assert_fail@plt+0x4630>
   13f1c:	cmp	r0, #0
   13f20:	moveq	r0, #1
   13f24:	beq	13f0c <__assert_fail@plt+0x31cc>
   13f28:	ldr	r1, [pc, #32]	; 13f50 <__assert_fail@plt+0x3210>
   13f2c:	ldr	r3, [pc, #32]	; 13f54 <__assert_fail@plt+0x3214>
   13f30:	ldr	r2, [pc, #32]	; 13f58 <__assert_fail@plt+0x3218>
   13f34:	ldr	r0, [r1]
   13f38:	ldr	r3, [r3]
   13f3c:	mov	r1, #1
   13f40:	bl	10ce0 <__fprintf_chk@plt>
   13f44:	mov	r0, #1
   13f48:	add	sp, sp, #12
   13f4c:	pop	{r4, r5, r6, r7, pc}
   13f50:	andeq	r9, r2, r8, lsr #32
   13f54:	andeq	r9, r2, r4, ror r4
   13f58:	ldrdeq	r8, [r1], -ip
   13f5c:	push	{r4, r5, r6, r7, r8, lr}
   13f60:	mov	r4, r3
   13f64:	mov	r7, r2
   13f68:	mov	r5, r0
   13f6c:	mov	r6, r1
   13f70:	mov	r0, r3
   13f74:	bl	15314 <__assert_fail@plt+0x45d4>
   13f78:	mov	r0, r5
   13f7c:	mov	r3, r7
   13f80:	mov	r2, r4
   13f84:	mov	r1, r6
   13f88:	bl	16c04 <__assert_fail@plt+0x5ec4>
   13f8c:	mov	r0, #0
   13f90:	pop	{r4, r5, r6, r7, r8, pc}
   13f94:	push	{r4, r5, r6, r7, lr}
   13f98:	sub	sp, sp, #12
   13f9c:	ldr	r5, [pc, #136]	; 1402c <__assert_fail@plt+0x32ec>
   13fa0:	mov	r6, r1
   13fa4:	mov	r7, r2
   13fa8:	ldr	r3, [r5]
   13fac:	add	r4, sp, #8
   13fb0:	str	r3, [sp, #4]
   13fb4:	bl	15304 <__assert_fail@plt+0x45c4>
   13fb8:	mov	r1, r6
   13fbc:	str	r0, [r4, #-8]!
   13fc0:	mov	r0, r4
   13fc4:	bl	16f68 <__assert_fail@plt+0x6228>
   13fc8:	cmp	r0, #0
   13fcc:	beq	13ff4 <__assert_fail@plt+0x32b4>
   13fd0:	ldr	r3, [sp]
   13fd4:	mov	r0, #0
   13fd8:	str	r3, [r7]
   13fdc:	ldr	r2, [sp, #4]
   13fe0:	ldr	r3, [r5]
   13fe4:	cmp	r2, r3
   13fe8:	bne	14028 <__assert_fail@plt+0x32e8>
   13fec:	add	sp, sp, #12
   13ff0:	pop	{r4, r5, r6, r7, pc}
   13ff4:	ldr	r6, [pc, #52]	; 14030 <__assert_fail@plt+0x32f0>
   13ff8:	ldr	r3, [pc, #52]	; 14034 <__assert_fail@plt+0x32f4>
   13ffc:	ldr	r2, [pc, #52]	; 14038 <__assert_fail@plt+0x32f8>
   14000:	mov	r1, #1
   14004:	ldr	r3, [r3]
   14008:	ldr	r0, [r6]
   1400c:	bl	10ce0 <__fprintf_chk@plt>
   14010:	ldr	r0, [r6]
   14014:	bl	17a38 <__assert_fail@plt+0x6cf8>
   14018:	mov	r0, r4
   1401c:	bl	1523c <__assert_fail@plt+0x44fc>
   14020:	mov	r0, #1
   14024:	b	13fdc <__assert_fail@plt+0x329c>
   14028:	bl	10bb4 <__stack_chk_fail@plt>
   1402c:	andeq	r8, r2, r0, lsr lr
   14030:	andeq	r9, r2, r8, lsr #32
   14034:	andeq	r9, r2, r4, ror r4
   14038:	strdeq	r8, [r1], -r4
   1403c:	b	15334 <__assert_fail@plt+0x45f4>
   14040:	push	{r4, r5, lr}
   14044:	sub	sp, sp, #12
   14048:	mov	r5, r1
   1404c:	str	r0, [sp, #4]
   14050:	bl	16b98 <__assert_fail@plt+0x5e58>
   14054:	subs	r4, r0, #0
   14058:	beq	14078 <__assert_fail@plt+0x3338>
   1405c:	cmp	r5, #0
   14060:	bne	1406c <__assert_fail@plt+0x332c>
   14064:	add	r0, sp, #4
   14068:	bl	1523c <__assert_fail@plt+0x44fc>
   1406c:	mov	r0, r4
   14070:	add	sp, sp, #12
   14074:	pop	{r4, r5, pc}
   14078:	ldr	r0, [sp, #4]
   1407c:	bl	15370 <__assert_fail@plt+0x4630>
   14080:	cmp	r0, #0
   14084:	bne	1405c <__assert_fail@plt+0x331c>
   14088:	ldr	r1, [pc, #28]	; 140ac <__assert_fail@plt+0x336c>
   1408c:	ldr	r3, [pc, #28]	; 140b0 <__assert_fail@plt+0x3370>
   14090:	ldr	r2, [pc, #28]	; 140b4 <__assert_fail@plt+0x3374>
   14094:	ldr	r0, [r1]
   14098:	ldr	r3, [r3]
   1409c:	mov	r1, #1
   140a0:	bl	10ce0 <__fprintf_chk@plt>
   140a4:	mvn	r4, #0
   140a8:	b	1405c <__assert_fail@plt+0x331c>
   140ac:	andeq	r9, r2, r8, lsr #32
   140b0:	andeq	r9, r2, r4, ror r4
   140b4:	andeq	r8, r1, r8, lsl r7
   140b8:	push	{r4, r5, r6, lr}
   140bc:	sub	sp, sp, #16
   140c0:	ldr	r5, [pc, #84]	; 1411c <__assert_fail@plt+0x33dc>
   140c4:	mov	r6, r1
   140c8:	mov	r4, r0
   140cc:	ldr	r3, [r5]
   140d0:	add	r0, sp, #8
   140d4:	str	r3, [sp, #12]
   140d8:	bl	15314 <__assert_fail@plt+0x45d4>
   140dc:	mov	r1, r6
   140e0:	add	r0, sp, #8
   140e4:	add	r6, sp, #4
   140e8:	bl	16df8 <__assert_fail@plt+0x60b8>
   140ec:	mov	r3, #1
   140f0:	str	r3, [sp, #4]
   140f4:	ldr	r2, [sp, #12]
   140f8:	ldm	r6, {r0, r1}
   140fc:	ldr	r3, [r5]
   14100:	cmp	r2, r3
   14104:	stm	r4, {r0, r1}
   14108:	bne	14118 <__assert_fail@plt+0x33d8>
   1410c:	mov	r0, r4
   14110:	add	sp, sp, #16
   14114:	pop	{r4, r5, r6, pc}
   14118:	bl	10bb4 <__stack_chk_fail@plt>
   1411c:	andeq	r8, r2, r0, lsr lr
   14120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14124:	sub	sp, sp, #36	; 0x24
   14128:	ldr	sl, [pc, #644]	; 143b4 <__assert_fail@plt+0x3674>
   1412c:	mov	r9, r0
   14130:	add	r0, sp, #20
   14134:	ldr	ip, [sl]
   14138:	mov	r4, r2
   1413c:	str	ip, [sp, #28]
   14140:	mov	r7, r1
   14144:	str	r3, [sp, #4]
   14148:	bl	15314 <__assert_fail@plt+0x45d4>
   1414c:	add	r0, sp, #16
   14150:	bl	15314 <__assert_fail@plt+0x45d4>
   14154:	add	r0, sp, #8
   14158:	bl	15314 <__assert_fail@plt+0x45d4>
   1415c:	ldr	r3, [pc, #596]	; 143b8 <__assert_fail@plt+0x3678>
   14160:	ldr	r0, [r3]
   14164:	bl	15304 <__assert_fail@plt+0x45c4>
   14168:	mov	r1, r4
   1416c:	str	r0, [sp, #12]
   14170:	add	r0, sp, #8
   14174:	bl	16df8 <__assert_fail@plt+0x60b8>
   14178:	blx	r7
   1417c:	mov	r8, r0
   14180:	bl	10c5c <__ctype_b_loc@plt>
   14184:	mov	r6, r0
   14188:	b	14194 <__assert_fail@plt+0x3454>
   1418c:	blx	r7
   14190:	mov	r8, r0
   14194:	ldr	r2, [r6]
   14198:	lsl	r3, r8, #1
   1419c:	ldrh	r4, [r2, r3]
   141a0:	tst	r4, #8192	; 0x2000
   141a4:	bne	1418c <__assert_fail@plt+0x344c>
   141a8:	cmp	r8, #45	; 0x2d
   141ac:	cmpne	r8, #95	; 0x5f
   141b0:	moveq	r3, #1
   141b4:	movne	r3, #0
   141b8:	bne	1438c <__assert_fail@plt+0x364c>
   141bc:	blx	r7
   141c0:	mov	r5, r0
   141c4:	ldr	r2, [r6]
   141c8:	lsl	r3, r5, #1
   141cc:	ldrh	r4, [r2, r3]
   141d0:	tst	r4, #8192	; 0x2000
   141d4:	bne	141bc <__assert_fail@plt+0x347c>
   141d8:	b	14228 <__assert_fail@plt+0x34e8>
   141dc:	sub	r4, r5, #55	; 0x37
   141e0:	blx	r7
   141e4:	mov	r1, r4
   141e8:	mov	r5, r0
   141ec:	add	r0, sp, #20
   141f0:	bl	16df8 <__assert_fail@plt+0x60b8>
   141f4:	mov	r3, #0
   141f8:	add	r2, sp, #12
   141fc:	ldr	r1, [sp, #8]
   14200:	ldr	r0, [sp, #12]
   14204:	bl	15e88 <__assert_fail@plt+0x5148>
   14208:	mov	r3, #0
   1420c:	add	r2, sp, #12
   14210:	ldr	r1, [sp, #20]
   14214:	ldr	r0, [sp, #12]
   14218:	bl	15da0 <__assert_fail@plt+0x5060>
   1421c:	ldr	r2, [r6]
   14220:	lsl	r3, r5, #1
   14224:	ldrh	r4, [r2, r3]
   14228:	ands	r4, r4, #2048	; 0x800
   1422c:	subne	r4, r5, #48	; 0x30
   14230:	bne	141e0 <__assert_fail@plt+0x34a0>
   14234:	sub	r3, r5, #65	; 0x41
   14238:	cmp	r3, #5
   1423c:	bls	141dc <__assert_fail@plt+0x349c>
   14240:	cmp	r5, #46	; 0x2e
   14244:	beq	142bc <__assert_fail@plt+0x357c>
   14248:	cmp	r8, #0
   1424c:	bne	142a0 <__assert_fail@plt+0x3560>
   14250:	add	r0, sp, #20
   14254:	bl	1523c <__assert_fail@plt+0x44fc>
   14258:	add	r0, sp, #16
   1425c:	bl	1523c <__assert_fail@plt+0x44fc>
   14260:	add	r0, sp, #8
   14264:	bl	1523c <__assert_fail@plt+0x44fc>
   14268:	ldr	r3, [sp, #4]
   1426c:	ldr	r1, [sp, #28]
   14270:	cmp	r3, #0
   14274:	strne	r5, [r3]
   14278:	ldr	r3, [sl]
   1427c:	ldr	r2, [sp, #12]
   14280:	cmp	r1, r3
   14284:	mov	r3, #1
   14288:	str	r2, [r9, #4]
   1428c:	str	r3, [r9]
   14290:	mov	r0, r9
   14294:	bne	143b0 <__assert_fail@plt+0x3670>
   14298:	add	sp, sp, #36	; 0x24
   1429c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a0:	ldr	r3, [pc, #272]	; 143b8 <__assert_fail@plt+0x3678>
   142a4:	add	r2, sp, #12
   142a8:	ldr	r1, [sp, #12]
   142ac:	ldr	r0, [r3]
   142b0:	mov	r3, #0
   142b4:	bl	1545c <__assert_fail@plt+0x471c>
   142b8:	b	14250 <__assert_fail@plt+0x3510>
   142bc:	add	r0, sp, #16
   142c0:	bl	1523c <__assert_fail@plt+0x44fc>
   142c4:	add	r0, sp, #20
   142c8:	bl	1523c <__assert_fail@plt+0x44fc>
   142cc:	ldr	r3, [pc, #232]	; 143bc <__assert_fail@plt+0x367c>
   142d0:	ldr	r0, [r3]
   142d4:	bl	15304 <__assert_fail@plt+0x45c4>
   142d8:	ldr	r3, [pc, #216]	; 143b8 <__assert_fail@plt+0x3678>
   142dc:	str	r0, [sp, #24]
   142e0:	ldr	r0, [r3]
   142e4:	bl	15304 <__assert_fail@plt+0x45c4>
   142e8:	str	r0, [sp, #16]
   142ec:	b	14338 <__assert_fail@plt+0x35f8>
   142f0:	sub	r1, r0, #55	; 0x37
   142f4:	add	r0, sp, #20
   142f8:	bl	16df8 <__assert_fail@plt+0x60b8>
   142fc:	mov	r3, #0
   14300:	add	r2, sp, #16
   14304:	ldr	r1, [sp, #8]
   14308:	ldr	r0, [sp, #16]
   1430c:	bl	15e88 <__assert_fail@plt+0x5148>
   14310:	ldrd	r0, [sp, #16]
   14314:	mov	r3, #0
   14318:	add	r2, sp, #16
   1431c:	bl	15da0 <__assert_fail@plt+0x5060>
   14320:	mov	r3, #0
   14324:	add	r2, sp, #24
   14328:	ldr	r1, [sp, #8]
   1432c:	ldr	r0, [sp, #24]
   14330:	add	r4, r4, #1
   14334:	bl	15e88 <__assert_fail@plt+0x5148>
   14338:	blx	r7
   1433c:	ldr	r2, [r6]
   14340:	lsl	r3, r0, #1
   14344:	mov	r5, r0
   14348:	ldrh	r3, [r2, r3]
   1434c:	ands	fp, r3, #2048	; 0x800
   14350:	subne	r1, r0, #48	; 0x30
   14354:	bne	142f4 <__assert_fail@plt+0x35b4>
   14358:	sub	r3, r0, #65	; 0x41
   1435c:	cmp	r3, #5
   14360:	bls	142f0 <__assert_fail@plt+0x35b0>
   14364:	mov	r3, r4
   14368:	add	r2, sp, #16
   1436c:	ldr	r1, [sp, #24]
   14370:	ldr	r0, [sp, #16]
   14374:	bl	16004 <__assert_fail@plt+0x52c4>
   14378:	mov	r3, fp
   1437c:	add	r2, sp, #12
   14380:	ldrd	r0, [sp, #12]
   14384:	bl	15da0 <__assert_fail@plt+0x5060>
   14388:	b	14248 <__assert_fail@plt+0x3508>
   1438c:	cmp	r8, #43	; 0x2b
   14390:	bne	143a4 <__assert_fail@plt+0x3664>
   14394:	mov	r8, r3
   14398:	blx	r7
   1439c:	mov	r5, r0
   143a0:	b	141c4 <__assert_fail@plt+0x3484>
   143a4:	mov	r5, r8
   143a8:	mov	r8, r3
   143ac:	b	14228 <__assert_fail@plt+0x34e8>
   143b0:	bl	10bb4 <__stack_chk_fail@plt>
   143b4:	andeq	r8, r2, r0, lsr lr
   143b8:	andeq	r9, r2, r0, lsl #9
   143bc:	andeq	r9, r2, r8, ror r4
   143c0:	ldr	r3, [r0, #4]
   143c4:	ldr	r1, [r0, #8]
   143c8:	ldr	r2, [r0, #24]
   143cc:	add	r0, r3, r1
   143d0:	cmp	r0, #1
   143d4:	bxle	lr
   143d8:	ldrb	r3, [r2]
   143dc:	cmp	r3, #0
   143e0:	bxne	lr
   143e4:	mov	r3, r2
   143e8:	sub	r0, r0, #1
   143ec:	cmp	r0, #1
   143f0:	bxeq	lr
   143f4:	ldrb	r2, [r3, #1]!
   143f8:	cmp	r2, #0
   143fc:	beq	143e8 <__assert_fail@plt+0x36a8>
   14400:	bx	lr
   14404:	push	{r4, lr}
   14408:	sub	sp, sp, #8
   1440c:	cmp	r1, #0
   14410:	str	r0, [sp, #4]
   14414:	ldr	r4, [r0, #8]
   14418:	bne	14424 <__assert_fail@plt+0x36e4>
   1441c:	add	r0, sp, #4
   14420:	bl	1523c <__assert_fail@plt+0x44fc>
   14424:	mov	r0, r4
   14428:	add	sp, sp, #8
   1442c:	pop	{r4, pc}
   14430:	b	1529c <__assert_fail@plt+0x455c>
   14434:	push	{r4, lr}
   14438:	mov	ip, #0
   1443c:	ldr	lr, [pc, #48]	; 14474 <__assert_fail@plt+0x3734>
   14440:	sub	sp, sp, #8
   14444:	mov	r4, r2
   14448:	mov	r3, ip
   1444c:	ldr	r2, [pc, #36]	; 14478 <__assert_fail@plt+0x3738>
   14450:	str	r0, [sp, #4]
   14454:	str	ip, [lr]
   14458:	bl	172a8 <__assert_fail@plt+0x6568>
   1445c:	cmp	r4, #0
   14460:	bne	1446c <__assert_fail@plt+0x372c>
   14464:	add	r0, sp, #4
   14468:	bl	1523c <__assert_fail@plt+0x44fc>
   1446c:	add	sp, sp, #8
   14470:	pop	{r4, pc}
   14474:	andeq	r9, r2, r0, ror #8
   14478:	andeq	r3, r1, r4, lsr fp
   1447c:	push	{r4, r5, r6, r7, lr}
   14480:	sub	sp, sp, #36	; 0x24
   14484:	ldr	r7, [pc, #276]	; 145a0 <__assert_fail@plt+0x3860>
   14488:	str	r0, [sp, #12]
   1448c:	add	r0, sp, #16
   14490:	ldr	r3, [r7]
   14494:	mov	r4, r1
   14498:	str	r3, [sp, #28]
   1449c:	bl	15314 <__assert_fail@plt+0x45d4>
   144a0:	add	r0, sp, #20
   144a4:	bl	15314 <__assert_fail@plt+0x45d4>
   144a8:	add	r0, sp, #24
   144ac:	bl	15314 <__assert_fail@plt+0x45d4>
   144b0:	ldr	r1, [pc, #236]	; 145a4 <__assert_fail@plt+0x3864>
   144b4:	add	r2, sp, #16
   144b8:	mov	r3, #0
   144bc:	ldr	r1, [r1]
   144c0:	ldr	r0, [sp, #12]
   144c4:	bl	16004 <__assert_fail@plt+0x52c4>
   144c8:	ldr	r3, [sp, #16]
   144cc:	mov	r2, #0
   144d0:	cmp	r4, #0
   144d4:	str	r2, [r3]
   144d8:	beq	14590 <__assert_fail@plt+0x3850>
   144dc:	mov	r1, #256	; 0x100
   144e0:	add	r0, sp, #20
   144e4:	bl	16df8 <__assert_fail@plt+0x60b8>
   144e8:	mov	r5, #0
   144ec:	mov	r6, r5
   144f0:	ldrd	r0, [sp, #16]
   144f4:	add	r3, sp, #24
   144f8:	add	r2, sp, #16
   144fc:	str	r6, [sp]
   14500:	bl	16678 <__assert_fail@plt+0x5938>
   14504:	mov	r0, #8
   14508:	bl	113f8 <__assert_fail@plt+0x6b8>
   1450c:	mov	r4, r0
   14510:	ldr	r0, [sp, #24]
   14514:	bl	16b98 <__assert_fail@plt+0x5e58>
   14518:	str	r5, [r4, #4]
   1451c:	mov	r5, r4
   14520:	str	r0, [r4]
   14524:	ldr	r0, [sp, #16]
   14528:	bl	15370 <__assert_fail@plt+0x4630>
   1452c:	cmp	r0, #0
   14530:	beq	144f0 <__assert_fail@plt+0x37b0>
   14534:	ldr	r6, [pc, #108]	; 145a8 <__assert_fail@plt+0x3868>
   14538:	ldr	r1, [r6]
   1453c:	ldr	r0, [r4]
   14540:	bl	10bd8 <_IO_putc@plt>
   14544:	ldr	r0, [r6]
   14548:	bl	17a38 <__assert_fail@plt+0x6cf8>
   1454c:	ldr	r5, [r4, #4]
   14550:	mov	r0, r4
   14554:	bl	10b78 <free@plt>
   14558:	subs	r4, r5, #0
   1455c:	bne	14538 <__assert_fail@plt+0x37f8>
   14560:	add	r0, sp, #24
   14564:	bl	1523c <__assert_fail@plt+0x44fc>
   14568:	add	r0, sp, #20
   1456c:	bl	1523c <__assert_fail@plt+0x44fc>
   14570:	add	r0, sp, #16
   14574:	bl	1523c <__assert_fail@plt+0x44fc>
   14578:	ldr	r2, [sp, #28]
   1457c:	ldr	r3, [r7]
   14580:	cmp	r2, r3
   14584:	bne	1459c <__assert_fail@plt+0x385c>
   14588:	add	sp, sp, #36	; 0x24
   1458c:	pop	{r4, r5, r6, r7, pc}
   14590:	add	r0, sp, #12
   14594:	bl	1523c <__assert_fail@plt+0x44fc>
   14598:	b	144dc <__assert_fail@plt+0x379c>
   1459c:	bl	10bb4 <__stack_chk_fail@plt>
   145a0:	andeq	r8, r2, r0, lsr lr
   145a4:	andeq	r9, r2, r8, ror r4
   145a8:	andeq	r9, r2, r4, lsr r0
   145ac:	b	1523c <__assert_fail@plt+0x44fc>
   145b0:	ldr	r3, [r1, #12]
   145b4:	mov	ip, #1
   145b8:	add	r3, r3, ip
   145bc:	str	r3, [r1, #12]
   145c0:	str	r1, [r0, #4]
   145c4:	str	ip, [r0]
   145c8:	bx	lr
   145cc:	b	113c4 <__assert_fail@plt+0x684>
   145d0:	push	{r0, r1, r2, r3}
   145d4:	mov	r2, #15
   145d8:	push	{r4, r5, r6, lr}
   145dc:	sub	sp, sp, #8
   145e0:	ldr	r5, [pc, #112]	; 14658 <__assert_fail@plt+0x3918>
   145e4:	ldr	r4, [pc, #112]	; 1465c <__assert_fail@plt+0x391c>
   145e8:	ldr	r6, [sp, #24]
   145ec:	ldr	ip, [r5]
   145f0:	ldr	r3, [r4]
   145f4:	mov	r1, #1
   145f8:	ldr	r0, [pc, #96]	; 14660 <__assert_fail@plt+0x3920>
   145fc:	str	ip, [sp, #4]
   14600:	bl	10be4 <fwrite@plt>
   14604:	add	ip, sp, #28
   14608:	mov	r2, r6
   1460c:	mov	r3, ip
   14610:	mov	r1, #1
   14614:	ldr	r0, [r4]
   14618:	str	ip, [sp]
   1461c:	bl	10c38 <__vfprintf_chk@plt>
   14620:	ldr	r1, [r4]
   14624:	mov	r0, #10
   14628:	bl	10d10 <fputc@plt>
   1462c:	ldr	r0, [r4]
   14630:	bl	17a38 <__assert_fail@plt+0x6cf8>
   14634:	ldr	r2, [sp, #4]
   14638:	ldr	r3, [r5]
   1463c:	cmp	r2, r3
   14640:	bne	14654 <__assert_fail@plt+0x3914>
   14644:	add	sp, sp, #8
   14648:	pop	{r4, r5, r6, lr}
   1464c:	add	sp, sp, #16
   14650:	bx	lr
   14654:	bl	10bb4 <__stack_chk_fail@plt>
   14658:	andeq	r8, r2, r0, lsr lr
   1465c:	andeq	r9, r2, r8, lsr #32
   14660:	andeq	r8, r1, r8, asr #14
   14664:	push	{r0, r1, r2, r3}
   14668:	mov	r2, #17
   1466c:	push	{r4, r5, r6, lr}
   14670:	sub	sp, sp, #8
   14674:	ldr	r5, [pc, #112]	; 146ec <__assert_fail@plt+0x39ac>
   14678:	ldr	r4, [pc, #112]	; 146f0 <__assert_fail@plt+0x39b0>
   1467c:	ldr	r6, [sp, #24]
   14680:	ldr	ip, [r5]
   14684:	ldr	r3, [r4]
   14688:	mov	r1, #1
   1468c:	ldr	r0, [pc, #96]	; 146f4 <__assert_fail@plt+0x39b4>
   14690:	str	ip, [sp, #4]
   14694:	bl	10be4 <fwrite@plt>
   14698:	add	ip, sp, #28
   1469c:	mov	r2, r6
   146a0:	mov	r3, ip
   146a4:	mov	r1, #1
   146a8:	ldr	r0, [r4]
   146ac:	str	ip, [sp]
   146b0:	bl	10c38 <__vfprintf_chk@plt>
   146b4:	ldr	r1, [r4]
   146b8:	mov	r0, #10
   146bc:	bl	10d10 <fputc@plt>
   146c0:	ldr	r0, [r4]
   146c4:	bl	17a38 <__assert_fail@plt+0x6cf8>
   146c8:	ldr	r2, [sp, #4]
   146cc:	ldr	r3, [r5]
   146d0:	cmp	r2, r3
   146d4:	bne	146e8 <__assert_fail@plt+0x39a8>
   146d8:	add	sp, sp, #8
   146dc:	pop	{r4, r5, r6, lr}
   146e0:	add	sp, sp, #16
   146e4:	bx	lr
   146e8:	bl	10bb4 <__stack_chk_fail@plt>
   146ec:	andeq	r8, r2, r0, lsr lr
   146f0:	andeq	r9, r2, r8, lsr #32
   146f4:	andeq	r8, r1, r8, asr r7
   146f8:	ldr	r3, [r1, #8]
   146fc:	mov	ip, #2
   14700:	add	r3, r3, #1
   14704:	str	r3, [r1, #8]
   14708:	str	r1, [r0, #4]
   1470c:	str	ip, [r0]
   14710:	bx	lr
   14714:	push	{r4, lr}
   14718:	ldr	r4, [r0]
   1471c:	ldr	r3, [r4, #8]
   14720:	sub	r3, r3, #1
   14724:	cmp	r3, #0
   14728:	str	r3, [r4, #8]
   1472c:	popgt	{r4, pc}
   14730:	ldr	r0, [r4]
   14734:	bl	10b78 <free@plt>
   14738:	mov	r0, r4
   1473c:	pop	{r4, lr}
   14740:	b	10b78 <free@plt>
   14744:	push	{r4, r5, lr}
   14748:	mov	r3, r0
   1474c:	ldr	r4, [pc, #60]	; 14790 <__assert_fail@plt+0x3a50>
   14750:	sub	sp, sp, #12
   14754:	mov	r5, r1
   14758:	str	r0, [sp, #4]
   1475c:	ldr	r1, [r3, #4]
   14760:	mov	r2, #1
   14764:	ldr	r3, [r4]
   14768:	ldr	r0, [r0]
   1476c:	bl	10be4 <fwrite@plt>
   14770:	ldr	r0, [r4]
   14774:	bl	17a38 <__assert_fail@plt+0x6cf8>
   14778:	cmp	r5, #0
   1477c:	bne	14788 <__assert_fail@plt+0x3a48>
   14780:	add	r0, sp, #4
   14784:	bl	14714 <__assert_fail@plt+0x39d4>
   14788:	add	sp, sp, #12
   1478c:	pop	{r4, r5, pc}
   14790:	andeq	r9, r2, r4, lsr r0
   14794:	push	{r4, r5, r6, r7, r8, lr}
   14798:	mov	r6, r0
   1479c:	mov	r0, #12
   147a0:	mov	r5, r2
   147a4:	mov	r7, r1
   147a8:	bl	113f8 <__assert_fail@plt+0x6b8>
   147ac:	mov	r4, r0
   147b0:	add	r0, r5, #1
   147b4:	bl	113f8 <__assert_fail@plt+0x6b8>
   147b8:	mov	r1, r7
   147bc:	mov	r2, r5
   147c0:	str	r0, [r4]
   147c4:	bl	10b90 <memcpy@plt>
   147c8:	ldr	r1, [r4]
   147cc:	mov	r0, #0
   147d0:	mov	r3, #1
   147d4:	mov	r2, #2
   147d8:	strb	r0, [r1, r5]
   147dc:	str	r4, [r6, #4]
   147e0:	str	r2, [r6]
   147e4:	str	r5, [r4, #4]
   147e8:	str	r3, [r4, #8]
   147ec:	mov	r0, r6
   147f0:	pop	{r4, r5, r6, r7, r8, pc}
   147f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147f8:	sub	sp, sp, #20
   147fc:	ldr	r6, [pc, #268]	; 14910 <__assert_fail@plt+0x3bd0>
   14800:	str	r0, [sp, #4]
   14804:	ldr	r0, [pc, #264]	; 14914 <__assert_fail@plt+0x3bd4>
   14808:	ldr	r4, [r6]
   1480c:	mov	r8, r1
   14810:	ldr	r0, [r0]
   14814:	cmp	r4, #0
   14818:	mov	sl, r2
   1481c:	mov	r9, r3
   14820:	str	r0, [sp, #12]
   14824:	beq	148f0 <__assert_fail@plt+0x3bb0>
   14828:	ldr	r5, [r6, #4]
   1482c:	mov	r7, #1
   14830:	add	r5, r4, r5
   14834:	b	14850 <__assert_fail@plt+0x3b10>
   14838:	cmp	fp, sl
   1483c:	addeq	r7, r7, #1
   14840:	cmp	r4, r5
   14844:	bcs	148b0 <__assert_fail@plt+0x3b70>
   14848:	strb	fp, [r4]
   1484c:	add	r4, r4, #1
   14850:	mov	r0, r8
   14854:	bl	10ba8 <_IO_getc@plt>
   14858:	cmn	r0, #1
   1485c:	mov	fp, r0
   14860:	beq	14874 <__assert_fail@plt+0x3b34>
   14864:	cmp	r0, r9
   14868:	bne	14838 <__assert_fail@plt+0x3af8>
   1486c:	subs	r7, r7, #1
   14870:	bne	14838 <__assert_fail@plt+0x3af8>
   14874:	mov	r0, r8
   14878:	bl	17a14 <__assert_fail@plt+0x6cd4>
   1487c:	ldr	r5, [sp, #4]
   14880:	ldr	r1, [r6]
   14884:	mov	r0, r5
   14888:	sub	r2, r4, r1
   1488c:	bl	14794 <__assert_fail@plt+0x3a54>
   14890:	ldr	r3, [pc, #124]	; 14914 <__assert_fail@plt+0x3bd4>
   14894:	ldr	r2, [sp, #12]
   14898:	mov	r0, r5
   1489c:	ldr	r3, [r3]
   148a0:	cmp	r2, r3
   148a4:	bne	1490c <__assert_fail@plt+0x3bcc>
   148a8:	add	sp, sp, #20
   148ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148b0:	ldm	r6, {r2, r5}
   148b4:	add	r5, r5, #2048	; 0x800
   148b8:	mov	r1, r5
   148bc:	mov	r0, r2
   148c0:	str	r5, [r6, #4]
   148c4:	sub	r4, r4, r2
   148c8:	bl	10bc0 <realloc@plt>
   148cc:	cmp	r0, #0
   148d0:	str	r0, [r6]
   148d4:	beq	148e4 <__assert_fail@plt+0x3ba4>
   148d8:	add	r4, r0, r4
   148dc:	add	r5, r0, r5
   148e0:	b	14848 <__assert_fail@plt+0x3b08>
   148e4:	bl	113c4 <__assert_fail@plt+0x684>
   148e8:	ldm	r6, {r0, r5}
   148ec:	b	148d8 <__assert_fail@plt+0x3b98>
   148f0:	mov	r3, #2016	; 0x7e0
   148f4:	mov	r0, r3
   148f8:	str	r3, [r6, #4]
   148fc:	bl	113f8 <__assert_fail@plt+0x6b8>
   14900:	mov	r4, r0
   14904:	str	r0, [r6]
   14908:	b	14828 <__assert_fail@plt+0x3ae8>
   1490c:	bl	10bb4 <__stack_chk_fail@plt>
   14910:	andeq	r9, r2, r8, ror #8
   14914:	andeq	r8, r2, r0, lsr lr
   14918:	ldr	r0, [r0]
   1491c:	bx	lr
   14920:	ldr	r0, [r0, #4]
   14924:	bx	lr
   14928:	bx	lr
   1492c:	push	{r4, r5, r6, r7, r8, lr}
   14930:	subs	r8, r2, #0
   14934:	beq	149a0 <__assert_fail@plt+0x3c60>
   14938:	cmp	r8, #1
   1493c:	beq	149b4 <__assert_fail@plt+0x3c74>
   14940:	cmp	r1, #0
   14944:	sub	r4, r1, #1
   14948:	add	r3, r3, r4
   1494c:	add	r4, r0, r4
   14950:	pople	{r4, r5, r6, r7, r8, pc}
   14954:	ldr	r2, [pc, #108]	; 149c8 <__assert_fail@plt+0x3c88>
   14958:	sub	r0, r0, #1
   1495c:	mov	r5, r3
   14960:	mov	r6, #0
   14964:	ldrb	ip, [r4], #-1
   14968:	cmp	r0, r4
   1496c:	mla	ip, r8, ip, r6
   14970:	smull	r6, r7, ip, r2
   14974:	asr	lr, ip, #31
   14978:	rsb	lr, lr, r7, asr #2
   1497c:	mov	r6, lr
   14980:	add	lr, lr, lr, lsl #2
   14984:	sub	ip, ip, lr, lsl #1
   14988:	strb	ip, [r5], #-1
   1498c:	bne	14964 <__assert_fail@plt+0x3c24>
   14990:	cmp	r6, #0
   14994:	rsb	r1, r1, #0
   14998:	strbne	r6, [r3, r1]
   1499c:	pop	{r4, r5, r6, r7, r8, pc}
   149a0:	mov	r2, r1
   149a4:	mov	r0, r3
   149a8:	mov	r1, r8
   149ac:	pop	{r4, r5, r6, r7, r8, lr}
   149b0:	b	10cb0 <memset@plt>
   149b4:	mov	r2, r1
   149b8:	pop	{r4, r5, r6, r7, r8, lr}
   149bc:	mov	r1, r0
   149c0:	mov	r0, r3
   149c4:	b	10b90 <memcpy@plt>
   149c8:	strbtvs	r6, [r6], -r7, ror #12
   149cc:	push	{r4, r5, r6, lr}
   149d0:	ldrb	ip, [r2]
   149d4:	ldmib	r0, {r5, r6}
   149d8:	ldr	lr, [sp, #16]
   149dc:	cmp	ip, #0
   149e0:	subeq	r4, r1, #1
   149e4:	movne	r4, r1
   149e8:	add	ip, r4, r3
   149ec:	add	r5, r5, r6
   149f0:	cmp	r5, ip
   149f4:	blt	14b4c <__assert_fail@plt+0x3e0c>
   149f8:	mvn	r3, r3
   149fc:	ldr	ip, [r0, #24]
   14a00:	add	r5, r5, r3
   14a04:	sub	r1, r1, #1
   14a08:	cmp	lr, #0
   14a0c:	rsb	r4, r4, #0
   14a10:	add	ip, ip, r5
   14a14:	add	r2, r2, r1
   14a18:	bne	14ab4 <__assert_fail@plt+0x3d74>
   14a1c:	mov	r1, lr
   14a20:	add	r5, r2, r4
   14a24:	mov	lr, ip
   14a28:	b	14a5c <__assert_fail@plt+0x3d1c>
   14a2c:	ldrsb	r3, [r2], #-1
   14a30:	ldrb	r0, [lr], #-1
   14a34:	add	r3, r3, r1
   14a38:	add	r3, r3, r0
   14a3c:	uxtb	r3, r3
   14a40:	sxtb	r1, r3
   14a44:	cmp	r1, #9
   14a48:	strble	r1, [lr, #1]
   14a4c:	movgt	r1, #1
   14a50:	movle	r1, #0
   14a54:	subgt	r0, r3, #10
   14a58:	strbgt	r0, [lr, #1]
   14a5c:	cmp	r2, r5
   14a60:	bne	14a2c <__assert_fail@plt+0x3cec>
   14a64:	cmp	r1, #0
   14a68:	add	r2, ip, r4
   14a6c:	popeq	{r4, r5, r6, pc}
   14a70:	ldrb	r3, [ip, r4]
   14a74:	add	r3, r3, #1
   14a78:	uxtb	r3, r3
   14a7c:	sxtb	r1, r3
   14a80:	cmp	r1, #9
   14a84:	strb	r1, [ip, r4]
   14a88:	pople	{r4, r5, r6, pc}
   14a8c:	sub	r3, r3, #10
   14a90:	strb	r3, [r2], #-1
   14a94:	ldrb	r3, [r2]
   14a98:	add	r3, r3, #1
   14a9c:	uxtb	r3, r3
   14aa0:	sxtb	r1, r3
   14aa4:	cmp	r1, #9
   14aa8:	strb	r1, [r2]
   14aac:	bgt	14a8c <__assert_fail@plt+0x3d4c>
   14ab0:	pop	{r4, r5, r6, pc}
   14ab4:	add	r6, r2, r4
   14ab8:	mov	r3, ip
   14abc:	mov	r5, #0
   14ac0:	b	14af4 <__assert_fail@plt+0x3db4>
   14ac4:	ldrsb	r0, [r2], #-1
   14ac8:	ldrb	r1, [r3], #-1
   14acc:	add	r0, r0, r5
   14ad0:	sub	r1, r1, r0
   14ad4:	uxtb	r1, r1
   14ad8:	sxtb	r0, r1
   14adc:	cmp	r0, #0
   14ae0:	movge	r5, #0
   14ae4:	movlt	r5, lr
   14ae8:	addlt	r1, r1, #10
   14aec:	strbge	r0, [r3, #1]
   14af0:	strblt	r1, [r3, #1]
   14af4:	cmp	r2, r6
   14af8:	bne	14ac4 <__assert_fail@plt+0x3d84>
   14afc:	cmp	r5, #0
   14b00:	add	r2, ip, r4
   14b04:	popeq	{r4, r5, r6, pc}
   14b08:	ldrb	r3, [ip, r4]
   14b0c:	sub	r3, r3, #1
   14b10:	uxtb	r3, r3
   14b14:	sxtb	r1, r3
   14b18:	cmp	r1, #0
   14b1c:	strb	r1, [ip, r4]
   14b20:	popge	{r4, r5, r6, pc}
   14b24:	add	r3, r3, #10
   14b28:	strb	r3, [r2], #-1
   14b2c:	ldrb	r3, [r2]
   14b30:	sub	r3, r3, #1
   14b34:	uxtb	r3, r3
   14b38:	sxtb	r1, r3
   14b3c:	cmp	r1, #0
   14b40:	strb	r1, [r2]
   14b44:	blt	14b24 <__assert_fail@plt+0x3de4>
   14b48:	pop	{r4, r5, r6, pc}
   14b4c:	ldr	r3, [pc, #12]	; 14b60 <__assert_fail@plt+0x3e20>
   14b50:	ldr	r2, [pc, #12]	; 14b64 <__assert_fail@plt+0x3e24>
   14b54:	ldr	r1, [pc, #12]	; 14b68 <__assert_fail@plt+0x3e28>
   14b58:	ldr	r0, [pc, #12]	; 14b6c <__assert_fail@plt+0x3e2c>
   14b5c:	bl	10d40 <__assert_fail@plt>
   14b60:	andeq	r8, r1, ip, ror #14
   14b64:	andeq	r0, r0, sl, lsr #5
   14b68:	muleq	r1, r4, r7
   14b6c:	andeq	r8, r1, r0, lsr #15
   14b70:	ldr	r3, [pc, #108]	; 14be4 <__assert_fail@plt+0x3ea4>
   14b74:	push	{r4, r5, lr}
   14b78:	mov	r5, r0
   14b7c:	ldr	r0, [r3]
   14b80:	sub	sp, sp, #12
   14b84:	cmp	r0, #0
   14b88:	beq	14bbc <__assert_fail@plt+0x3e7c>
   14b8c:	ldr	r2, [r0, #16]
   14b90:	str	r2, [r3]
   14b94:	mov	r3, #0
   14b98:	mov	r2, #1
   14b9c:	str	r5, [r0, #4]
   14ba0:	str	r1, [r0, #24]
   14ba4:	str	r3, [r0]
   14ba8:	str	r3, [r0, #8]
   14bac:	str	r3, [r0, #20]
   14bb0:	str	r2, [r0, #12]
   14bb4:	add	sp, sp, #12
   14bb8:	pop	{r4, r5, pc}
   14bbc:	mov	r0, #28
   14bc0:	str	r1, [sp, #4]
   14bc4:	bl	10c08 <malloc@plt>
   14bc8:	ldr	r1, [sp, #4]
   14bcc:	cmp	r0, #0
   14bd0:	mov	r4, r0
   14bd4:	bne	14b94 <__assert_fail@plt+0x3e54>
   14bd8:	bl	145cc <__assert_fail@plt+0x388c>
   14bdc:	str	r4, [r4]
   14be0:	udf	#0
   14be4:	andeq	r9, r2, r0, ror r4
   14be8:	ldr	r3, [r0, #4]
   14bec:	ldr	ip, [r1, #4]
   14bf0:	push	{r4, r5, r6, r7, r8, lr}
   14bf4:	cmp	r3, ip
   14bf8:	beq	14c54 <__assert_fail@plt+0x3f14>
   14bfc:	bgt	14c34 <__assert_fail@plt+0x3ef4>
   14c00:	cmp	r2, #0
   14c04:	beq	14d2c <__assert_fail@plt+0x3fec>
   14c08:	ldr	r3, [r0]
   14c0c:	cmp	r3, #0
   14c10:	movne	r3, #1
   14c14:	mvneq	r3, #0
   14c18:	mov	r0, r3
   14c1c:	pop	{r4, r5, r6, r7, r8, pc}
   14c20:	beq	14cb4 <__assert_fail@plt+0x3f74>
   14c24:	ldrb	lr, [r5]
   14c28:	ldrb	r4, [r7]
   14c2c:	cmp	r4, lr
   14c30:	bcs	14c00 <__assert_fail@plt+0x3ec0>
   14c34:	cmp	r2, #0
   14c38:	beq	14ce4 <__assert_fail@plt+0x3fa4>
   14c3c:	ldr	r3, [r0]
   14c40:	cmp	r3, #0
   14c44:	mvnne	r3, #0
   14c48:	moveq	r3, #1
   14c4c:	mov	r0, r3
   14c50:	pop	{r4, r5, r6, r7, r8, pc}
   14c54:	ldr	r8, [r0, #8]
   14c58:	ldr	r6, [r1, #8]
   14c5c:	ldr	r7, [r1, #24]
   14c60:	cmp	r8, r6
   14c64:	addle	r3, r3, r8
   14c68:	addgt	r3, r3, r6
   14c6c:	cmp	r3, #0
   14c70:	ldr	r5, [r0, #24]
   14c74:	ble	14c20 <__assert_fail@plt+0x3ee0>
   14c78:	ldrb	lr, [r5]
   14c7c:	ldrb	r4, [r7]
   14c80:	cmp	r4, lr
   14c84:	bne	14c2c <__assert_fail@plt+0x3eec>
   14c88:	add	ip, r5, #1
   14c8c:	add	r1, r7, #1
   14c90:	b	14ca4 <__assert_fail@plt+0x3f64>
   14c94:	ldrb	lr, [ip], #1
   14c98:	ldrb	r4, [r1], #1
   14c9c:	cmp	lr, r4
   14ca0:	bne	14c2c <__assert_fail@plt+0x3eec>
   14ca4:	subs	r3, r3, #1
   14ca8:	mov	r5, ip
   14cac:	mov	r7, r1
   14cb0:	bne	14c94 <__assert_fail@plt+0x3f54>
   14cb4:	cmp	r8, r6
   14cb8:	beq	14d24 <__assert_fail@plt+0x3fe4>
   14cbc:	ble	14cf0 <__assert_fail@plt+0x3fb0>
   14cc0:	sub	r3, r8, r6
   14cc4:	add	r6, r5, r3
   14cc8:	b	14cd4 <__assert_fail@plt+0x3f94>
   14ccc:	cmp	r5, r6
   14cd0:	beq	14c18 <__assert_fail@plt+0x3ed8>
   14cd4:	ldrb	r3, [r5], #1
   14cd8:	cmp	r3, #0
   14cdc:	beq	14ccc <__assert_fail@plt+0x3f8c>
   14ce0:	b	14c34 <__assert_fail@plt+0x3ef4>
   14ce4:	mov	r3, #1
   14ce8:	mov	r0, r3
   14cec:	pop	{r4, r5, r6, r7, r8, pc}
   14cf0:	subs	r3, r6, r8
   14cf4:	beq	14c18 <__assert_fail@plt+0x3ed8>
   14cf8:	ldrb	ip, [r7]
   14cfc:	add	r1, r7, #1
   14d00:	cmp	ip, #0
   14d04:	addeq	r3, r7, r3
   14d08:	beq	14d1c <__assert_fail@plt+0x3fdc>
   14d0c:	b	14c00 <__assert_fail@plt+0x3ec0>
   14d10:	ldrb	ip, [r1], #1
   14d14:	cmp	ip, #0
   14d18:	bne	14c00 <__assert_fail@plt+0x3ec0>
   14d1c:	cmp	r3, r1
   14d20:	bne	14d10 <__assert_fail@plt+0x3fd0>
   14d24:	mov	r3, #0
   14d28:	b	14c18 <__assert_fail@plt+0x3ed8>
   14d2c:	mvn	r3, #0
   14d30:	b	14c18 <__assert_fail@plt+0x3ed8>
   14d34:	ldr	r3, [pc, #160]	; 14ddc <__assert_fail@plt+0x409c>
   14d38:	push	{r4, r5, r6, lr}
   14d3c:	mov	r6, r0
   14d40:	ldr	r4, [r3]
   14d44:	sub	sp, sp, #8
   14d48:	cmp	r4, #0
   14d4c:	beq	14db0 <__assert_fail@plt+0x4070>
   14d50:	ldr	r2, [r4, #16]
   14d54:	str	r2, [r3]
   14d58:	add	r5, r6, r1
   14d5c:	mov	r2, #0
   14d60:	mov	r3, #1
   14d64:	str	r6, [r4, #4]
   14d68:	str	r1, [r4, #8]
   14d6c:	mov	r0, r5
   14d70:	str	r2, [r4]
   14d74:	str	r3, [r4, #12]
   14d78:	bl	10c08 <malloc@plt>
   14d7c:	cmp	r0, #0
   14d80:	str	r0, [r4, #20]
   14d84:	beq	14da4 <__assert_fail@plt+0x4064>
   14d88:	str	r0, [r4, #24]
   14d8c:	mov	r2, r5
   14d90:	mov	r1, #0
   14d94:	bl	10cb0 <memset@plt>
   14d98:	mov	r0, r4
   14d9c:	add	sp, sp, #8
   14da0:	pop	{r4, r5, r6, pc}
   14da4:	bl	145cc <__assert_fail@plt+0x388c>
   14da8:	ldr	r0, [r4, #20]
   14dac:	b	14d88 <__assert_fail@plt+0x4048>
   14db0:	mov	r0, #28
   14db4:	str	r1, [sp, #4]
   14db8:	bl	10c08 <malloc@plt>
   14dbc:	ldr	r1, [sp, #4]
   14dc0:	cmp	r0, #0
   14dc4:	mov	r5, r0
   14dc8:	mov	r4, r0
   14dcc:	bne	14d58 <__assert_fail@plt+0x4018>
   14dd0:	bl	145cc <__assert_fail@plt+0x388c>
   14dd4:	str	r5, [r5]
   14dd8:	udf	#0
   14ddc:	andeq	r9, r2, r0, ror r4
   14de0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14de4:	mov	r6, r1
   14de8:	ldr	r1, [r0, #8]
   14dec:	ldr	r4, [r6, #8]
   14df0:	ldr	r8, [r6, #4]
   14df4:	ldr	r3, [r0, #4]
   14df8:	cmp	r4, r1
   14dfc:	movlt	r4, r1
   14e00:	cmp	r8, r3
   14e04:	movlt	r8, r3
   14e08:	add	r8, r8, #1
   14e0c:	cmp	r4, r2
   14e10:	mov	r5, r2
   14e14:	movge	r1, r4
   14e18:	movlt	r1, r2
   14e1c:	mov	r7, r0
   14e20:	mov	r0, r8
   14e24:	bl	14d34 <__assert_fail@plt+0x3ff4>
   14e28:	cmp	r4, r5
   14e2c:	bge	14e54 <__assert_fail@plt+0x4114>
   14e30:	ldr	r1, [r0, #24]
   14e34:	add	r3, r4, r8
   14e38:	sub	r5, r5, r4
   14e3c:	add	r3, r1, r3
   14e40:	add	r5, r3, r5
   14e44:	mov	r2, #0
   14e48:	strb	r2, [r3], #1
   14e4c:	cmp	r5, r3
   14e50:	bne	14e48 <__assert_fail@plt+0x4108>
   14e54:	ldmib	r7, {r1, r3}
   14e58:	ldr	r9, [r6, #8]
   14e5c:	ldr	ip, [r6, #4]
   14e60:	sub	r4, r4, #1
   14e64:	ldr	lr, [r0, #24]
   14e68:	add	r4, r4, r8
   14e6c:	add	r1, r1, r3
   14e70:	ldr	r5, [r7, #24]
   14e74:	add	ip, ip, r9
   14e78:	ldr	r2, [r6, #24]
   14e7c:	sub	r8, r1, #1
   14e80:	add	lr, lr, r4
   14e84:	cmp	r3, r9
   14e88:	sub	r4, ip, #1
   14e8c:	add	r5, r5, r8
   14e90:	add	r2, r2, r4
   14e94:	beq	14ecc <__assert_fail@plt+0x418c>
   14e98:	ble	14fd8 <__assert_fail@plt+0x4298>
   14e9c:	sub	r3, r9, r3
   14ea0:	add	r4, r5, r3
   14ea4:	add	r1, lr, #1
   14ea8:	ldrb	ip, [r5], #-1
   14eac:	cmp	r4, r5
   14eb0:	strb	ip, [r1, #-1]!
   14eb4:	bne	14ea8 <__assert_fail@plt+0x4168>
   14eb8:	ldr	r1, [r7, #4]
   14ebc:	ldr	ip, [r6, #4]
   14ec0:	add	r1, r1, r9
   14ec4:	add	ip, ip, r9
   14ec8:	add	lr, lr, r3
   14ecc:	cmp	ip, #0
   14ed0:	cmpgt	r1, #0
   14ed4:	movgt	r4, #1
   14ed8:	movle	r4, #0
   14edc:	ble	14f28 <__assert_fail@plt+0x41e8>
   14ee0:	mov	r4, #0
   14ee4:	ldrb	r6, [r2], #-1
   14ee8:	ldrb	r3, [r5], #-1
   14eec:	sub	r1, r1, #1
   14ef0:	sub	ip, ip, #1
   14ef4:	add	r3, r3, r6
   14ef8:	add	r3, r3, r4
   14efc:	mov	r4, #1
   14f00:	uxtb	r3, r3
   14f04:	cmp	r3, #9
   14f08:	sub	r6, r3, #10
   14f0c:	strbls	r3, [lr]
   14f10:	strbhi	r6, [lr]
   14f14:	movls	r4, #0
   14f18:	cmp	r1, #0
   14f1c:	cmpgt	ip, #0
   14f20:	sub	lr, lr, #1
   14f24:	bgt	14ee4 <__assert_fail@plt+0x41a4>
   14f28:	cmp	r1, #0
   14f2c:	moveq	r1, ip
   14f30:	movne	r2, r5
   14f34:	cmp	r1, #0
   14f38:	ble	14f78 <__assert_fail@plt+0x4238>
   14f3c:	sub	r6, r2, r1
   14f40:	mov	ip, lr
   14f44:	ldrb	r3, [r2], #-1
   14f48:	sub	ip, ip, #1
   14f4c:	add	r3, r3, r4
   14f50:	mov	r4, #1
   14f54:	uxtb	r3, r3
   14f58:	cmp	r3, #9
   14f5c:	sub	r5, r3, #10
   14f60:	strbls	r3, [ip, #1]
   14f64:	strbhi	r5, [ip, #1]
   14f68:	movls	r4, #0
   14f6c:	cmp	r2, r6
   14f70:	bne	14f44 <__assert_fail@plt+0x4204>
   14f74:	sub	lr, lr, r1
   14f78:	cmp	r4, #1
   14f7c:	ldrbeq	r3, [lr]
   14f80:	addeq	r3, r3, #1
   14f84:	strbeq	r3, [lr]
   14f88:	ldr	r3, [r0, #24]
   14f8c:	ldrb	r2, [r3]
   14f90:	cmp	r2, #0
   14f94:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f98:	ldr	ip, [r0, #4]
   14f9c:	cmp	ip, #1
   14fa0:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fa4:	sub	r2, ip, #1
   14fa8:	add	ip, r3, ip
   14fac:	add	r3, r3, #1
   14fb0:	str	r3, [r0, #24]
   14fb4:	str	r2, [r0, #4]
   14fb8:	ldrb	r1, [r3]
   14fbc:	sub	r2, r2, #1
   14fc0:	add	r3, r3, #1
   14fc4:	cmp	r1, #0
   14fc8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fcc:	cmp	ip, r3
   14fd0:	bne	14fb0 <__assert_fail@plt+0x4270>
   14fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fd8:	sublt	r9, r3, r9
   14fdc:	addlt	r4, r2, r9
   14fe0:	addlt	r1, lr, #1
   14fe4:	bge	14ecc <__assert_fail@plt+0x418c>
   14fe8:	ldrb	ip, [r2], #-1
   14fec:	cmp	r4, r2
   14ff0:	strb	ip, [r1, #-1]!
   14ff4:	bne	14fe8 <__assert_fail@plt+0x42a8>
   14ff8:	ldr	r1, [r7, #4]
   14ffc:	ldr	ip, [r6, #4]
   15000:	add	r1, r1, r3
   15004:	add	ip, ip, r3
   15008:	add	lr, lr, r9
   1500c:	b	14ecc <__assert_fail@plt+0x418c>
   15010:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15014:	mov	r7, r1
   15018:	ldr	r1, [r0, #4]
   1501c:	ldmib	r7, {r5, r6}
   15020:	ldr	r3, [r0, #8]
   15024:	mov	fp, r2
   15028:	cmp	r5, r1
   1502c:	movlt	r4, r1
   15030:	movge	r4, r5
   15034:	cmp	r6, r3
   15038:	movge	r9, r6
   1503c:	movlt	r9, r3
   15040:	cmp	r5, r1
   15044:	movge	r5, r1
   15048:	cmp	r6, r3
   1504c:	movge	r6, r3
   15050:	cmp	r9, r2
   15054:	movge	r1, r9
   15058:	movlt	r1, r2
   1505c:	mov	r8, r0
   15060:	mov	r0, r4
   15064:	bl	14d34 <__assert_fail@plt+0x3ff4>
   15068:	cmp	r9, fp
   1506c:	add	sl, r4, r9
   15070:	bge	15094 <__assert_fail@plt+0x4354>
   15074:	ldr	r3, [r0, #24]
   15078:	sub	r9, fp, r9
   1507c:	add	r3, r3, sl
   15080:	add	r9, r3, r9
   15084:	mov	r2, #0
   15088:	strb	r2, [r3], #1
   1508c:	cmp	r9, r3
   15090:	bne	15088 <__assert_fail@plt+0x4348>
   15094:	ldmib	r8, {r1, r3}
   15098:	ldr	r9, [r7, #8]
   1509c:	ldr	lr, [r7, #4]
   150a0:	add	r1, r3, r1
   150a4:	ldr	ip, [r8, #24]
   150a8:	sub	r1, r1, #1
   150ac:	add	lr, r9, lr
   150b0:	ldr	r7, [r7, #24]
   150b4:	ldr	r2, [r0, #24]
   150b8:	sub	lr, lr, #1
   150bc:	add	ip, ip, r1
   150c0:	cmp	r3, r6
   150c4:	sub	r1, sl, #1
   150c8:	add	lr, r7, lr
   150cc:	add	r1, r2, r1
   150d0:	beq	151e0 <__assert_fail@plt+0x44a0>
   150d4:	sub	r7, r3, r6
   150d8:	cmp	r7, #0
   150dc:	ble	15234 <__assert_fail@plt+0x44f4>
   150e0:	add	r2, r2, sl
   150e4:	sub	r9, ip, r7
   150e8:	mov	r3, ip
   150ec:	ldrb	r8, [r3], #-1
   150f0:	cmp	r9, r3
   150f4:	strb	r8, [r2, #-1]!
   150f8:	bne	150ec <__assert_fail@plt+0x43ac>
   150fc:	rsb	r3, r7, #0
   15100:	add	ip, ip, r3
   15104:	add	r1, r1, r3
   15108:	mov	r2, #0
   1510c:	add	r6, r5, r6
   15110:	cmp	r6, #0
   15114:	ble	15150 <__assert_fail@plt+0x4410>
   15118:	rsb	r6, r6, #0
   1511c:	add	r9, r1, r6
   15120:	mov	r7, ip
   15124:	ldrb	r3, [r7], #-1
   15128:	ldrb	r8, [lr], #-1
   1512c:	sub	r3, r3, r8
   15130:	subs	r3, r3, r2
   15134:	addmi	r3, r3, #10
   15138:	mov	r2, #0
   1513c:	strb	r3, [r1], #-1
   15140:	movmi	r2, #1
   15144:	cmp	r9, r1
   15148:	bne	15124 <__assert_fail@plt+0x43e4>
   1514c:	add	ip, ip, r6
   15150:	cmp	r4, r5
   15154:	beq	15190 <__assert_fail@plt+0x4450>
   15158:	sub	r4, r4, r5
   1515c:	cmp	r4, #0
   15160:	ble	15190 <__assert_fail@plt+0x4450>
   15164:	sub	r4, ip, r4
   15168:	ldrb	r3, [ip], #-1
   1516c:	sub	r2, r3, r2
   15170:	cmn	r2, #1
   15174:	uxtbne	r3, r2
   15178:	moveq	r3, #9
   1517c:	movne	r2, #0
   15180:	moveq	r2, #1
   15184:	cmp	r4, ip
   15188:	strb	r3, [r1], #-1
   1518c:	bne	15168 <__assert_fail@plt+0x4428>
   15190:	ldr	r3, [r0, #24]
   15194:	ldrb	r2, [r3]
   15198:	cmp	r2, #0
   1519c:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a0:	ldr	ip, [r0, #4]
   151a4:	cmp	ip, #1
   151a8:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151ac:	sub	r2, ip, #1
   151b0:	add	ip, r3, ip
   151b4:	add	r3, r3, #1
   151b8:	str	r3, [r0, #24]
   151bc:	str	r2, [r0, #4]
   151c0:	ldrb	r1, [r3]
   151c4:	sub	r2, r2, #1
   151c8:	add	r3, r3, #1
   151cc:	cmp	r1, #0
   151d0:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d4:	cmp	ip, r3
   151d8:	bne	151b8 <__assert_fail@plt+0x4478>
   151dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151e0:	sub	r9, r9, r6
   151e4:	cmp	r9, #0
   151e8:	ble	15234 <__assert_fail@plt+0x44f4>
   151ec:	sub	sl, r1, r9
   151f0:	mov	r7, r1
   151f4:	mov	r8, lr
   151f8:	mov	r2, #0
   151fc:	ldrb	r3, [r8], #-1
   15200:	rsb	r3, r3, #0
   15204:	subs	r2, r3, r2
   15208:	mov	r3, r2
   1520c:	addne	r3, r2, #10
   15210:	movne	r2, #1
   15214:	uxtbne	r3, r3
   15218:	strb	r3, [r7], #-1
   1521c:	cmp	sl, r7
   15220:	bne	151fc <__assert_fail@plt+0x44bc>
   15224:	rsb	r9, r9, #0
   15228:	add	lr, lr, r9
   1522c:	add	r1, r1, r9
   15230:	b	1510c <__assert_fail@plt+0x43cc>
   15234:	mov	r2, #0
   15238:	b	1510c <__assert_fail@plt+0x43cc>
   1523c:	ldr	r3, [r0]
   15240:	cmp	r3, #0
   15244:	bxeq	lr
   15248:	ldr	r2, [r3, #12]
   1524c:	push	{r4, lr}
   15250:	sub	r2, r2, #1
   15254:	cmp	r2, #0
   15258:	mov	r4, r0
   1525c:	str	r2, [r3, #12]
   15260:	bne	1528c <__assert_fail@plt+0x454c>
   15264:	ldr	r0, [r3, #20]
   15268:	cmp	r0, #0
   1526c:	beq	15278 <__assert_fail@plt+0x4538>
   15270:	bl	10b78 <free@plt>
   15274:	ldr	r3, [r4]
   15278:	ldr	r2, [pc, #24]	; 15298 <__assert_fail@plt+0x4558>
   1527c:	ldr	r1, [r2]
   15280:	str	r1, [r3, #16]
   15284:	ldr	r3, [r4]
   15288:	str	r3, [r2]
   1528c:	mov	r3, #0
   15290:	str	r3, [r4]
   15294:	pop	{r4, pc}
   15298:	andeq	r9, r2, r0, ror r4
   1529c:	push	{r4, lr}
   152a0:	mov	r1, #0
   152a4:	mov	r0, #1
   152a8:	bl	14d34 <__assert_fail@plt+0x3ff4>
   152ac:	ldr	r3, [pc, #68]	; 152f8 <__assert_fail@plt+0x45b8>
   152b0:	mov	r1, #0
   152b4:	str	r0, [r3]
   152b8:	mov	r0, #1
   152bc:	bl	14d34 <__assert_fail@plt+0x3ff4>
   152c0:	ldr	r1, [pc, #52]	; 152fc <__assert_fail@plt+0x45bc>
   152c4:	mov	r3, #1
   152c8:	ldr	r2, [r0, #24]
   152cc:	str	r0, [r1]
   152d0:	mov	r0, r3
   152d4:	strb	r3, [r2]
   152d8:	mov	r1, #0
   152dc:	bl	14d34 <__assert_fail@plt+0x3ff4>
   152e0:	ldr	r1, [pc, #24]	; 15300 <__assert_fail@plt+0x45c0>
   152e4:	mov	r2, #2
   152e8:	ldr	r3, [r0, #24]
   152ec:	str	r0, [r1]
   152f0:	strb	r2, [r3]
   152f4:	pop	{r4, pc}
   152f8:	andeq	r9, r2, r0, lsl #9
   152fc:	andeq	r9, r2, r8, ror r4
   15300:	andeq	r9, r2, ip, ror r4
   15304:	ldr	r3, [r0, #12]
   15308:	add	r3, r3, #1
   1530c:	str	r3, [r0, #12]
   15310:	bx	lr
   15314:	ldr	r3, [pc, #20]	; 15330 <__assert_fail@plt+0x45f0>
   15318:	ldr	r3, [r3]
   1531c:	ldr	r2, [r3, #12]
   15320:	add	r2, r2, #1
   15324:	str	r2, [r3, #12]
   15328:	str	r3, [r0]
   1532c:	bx	lr
   15330:	andeq	r9, r2, r0, lsl #9
   15334:	ldr	r3, [r0]
   15338:	ldr	r2, [r1]
   1533c:	cmp	r3, r2
   15340:	beq	15354 <__assert_fail@plt+0x4614>
   15344:	cmp	r3, #0
   15348:	moveq	r0, #1
   1534c:	mvnne	r0, #0
   15350:	bx	lr
   15354:	mov	r2, #1
   15358:	b	14be8 <__assert_fail@plt+0x3ea8>
   1535c:	ldr	r0, [r0]
   15360:	sub	r0, r0, #1
   15364:	clz	r0, r0
   15368:	lsr	r0, r0, #5
   1536c:	bx	lr
   15370:	ldr	r3, [pc, #100]	; 153dc <__assert_fail@plt+0x469c>
   15374:	ldr	r3, [r3]
   15378:	cmp	r3, r0
   1537c:	beq	153cc <__assert_fail@plt+0x468c>
   15380:	ldr	r3, [r0, #4]
   15384:	ldr	r1, [r0, #8]
   15388:	ldr	r2, [r0, #24]
   1538c:	add	r3, r3, r1
   15390:	cmp	r3, #0
   15394:	ble	153c0 <__assert_fail@plt+0x4680>
   15398:	ldrb	r0, [r2]
   1539c:	add	r2, r2, #1
   153a0:	cmp	r0, #0
   153a4:	beq	153b8 <__assert_fail@plt+0x4678>
   153a8:	b	153d4 <__assert_fail@plt+0x4694>
   153ac:	ldrb	r1, [r2], #1
   153b0:	cmp	r1, #0
   153b4:	bxne	lr
   153b8:	subs	r3, r3, #1
   153bc:	bne	153ac <__assert_fail@plt+0x466c>
   153c0:	clz	r0, r3
   153c4:	lsr	r0, r0, #5
   153c8:	bx	lr
   153cc:	mov	r0, #1
   153d0:	bx	lr
   153d4:	mov	r0, #0
   153d8:	bx	lr
   153dc:	andeq	r9, r2, r0, lsl #9
   153e0:	ldmib	r0, {r3, ip}
   153e4:	ldr	r2, [r0, #24]
   153e8:	cmp	r1, ip
   153ec:	addle	r1, r3, r1
   153f0:	addgt	r1, r3, ip
   153f4:	cmp	r1, #0
   153f8:	ble	15450 <__assert_fail@plt+0x4710>
   153fc:	ldrb	r0, [r2]
   15400:	add	r3, r2, #1
   15404:	cmp	r0, #0
   15408:	beq	1541c <__assert_fail@plt+0x46dc>
   1540c:	b	1542c <__assert_fail@plt+0x46ec>
   15410:	ldrb	r2, [r3], #1
   15414:	cmp	r2, #0
   15418:	bne	1542c <__assert_fail@plt+0x46ec>
   1541c:	subs	r1, r1, #1
   15420:	bne	15410 <__assert_fail@plt+0x46d0>
   15424:	mov	r0, #1
   15428:	bx	lr
   1542c:	cmp	r1, #1
   15430:	beq	1543c <__assert_fail@plt+0x46fc>
   15434:	mov	r0, #0
   15438:	bx	lr
   1543c:	ldrb	r0, [r3, #-1]
   15440:	sub	r0, r0, #1
   15444:	clz	r0, r0
   15448:	lsr	r0, r0, #5
   1544c:	bx	lr
   15450:	moveq	r0, #1
   15454:	movne	r0, #0
   15458:	bx	lr
   1545c:	push	{r4, r5, r6, r7, r8, lr}
   15460:	mov	r5, r0
   15464:	ldr	lr, [r0]
   15468:	ldr	ip, [r1]
   1546c:	mov	r4, r2
   15470:	cmp	lr, ip
   15474:	mov	r6, r3
   15478:	bne	154b4 <__assert_fail@plt+0x4774>
   1547c:	mov	r2, #0
   15480:	mov	r7, r1
   15484:	bl	14be8 <__assert_fail@plt+0x3ea8>
   15488:	subs	r8, r0, #0
   1548c:	beq	154cc <__assert_fail@plt+0x478c>
   15490:	cmp	r8, #1
   15494:	beq	15530 <__assert_fail@plt+0x47f0>
   15498:	cmn	r8, #1
   1549c:	movne	r6, #0
   154a0:	beq	15508 <__assert_fail@plt+0x47c8>
   154a4:	mov	r0, r4
   154a8:	bl	1523c <__assert_fail@plt+0x44fc>
   154ac:	str	r6, [r4]
   154b0:	pop	{r4, r5, r6, r7, r8, pc}
   154b4:	mov	r2, r3
   154b8:	bl	14de0 <__assert_fail@plt+0x40a0>
   154bc:	ldr	r3, [r5]
   154c0:	mov	r6, r0
   154c4:	str	r3, [r0]
   154c8:	b	154a4 <__assert_fail@plt+0x4764>
   154cc:	ldr	r3, [r7, #8]
   154d0:	ldr	r5, [r5, #8]
   154d4:	cmp	r6, r3
   154d8:	movlt	r6, r3
   154dc:	cmp	r6, r5
   154e0:	movge	r5, r6
   154e4:	mov	r1, r5
   154e8:	mov	r0, #1
   154ec:	bl	14d34 <__assert_fail@plt+0x3ff4>
   154f0:	add	r2, r5, #1
   154f4:	mov	r1, r8
   154f8:	mov	r6, r0
   154fc:	ldr	r0, [r0, #24]
   15500:	bl	10cb0 <memset@plt>
   15504:	b	154a4 <__assert_fail@plt+0x4764>
   15508:	mov	r2, r6
   1550c:	mov	r1, r5
   15510:	mov	r0, r7
   15514:	bl	15010 <__assert_fail@plt+0x42d0>
   15518:	ldr	r3, [r7]
   1551c:	clz	r3, r3
   15520:	lsr	r3, r3, #5
   15524:	mov	r6, r0
   15528:	str	r3, [r0]
   1552c:	b	154a4 <__assert_fail@plt+0x4764>
   15530:	mov	r2, r6
   15534:	mov	r1, r7
   15538:	mov	r0, r5
   1553c:	bl	15010 <__assert_fail@plt+0x42d0>
   15540:	ldr	r3, [r5]
   15544:	mov	r6, r0
   15548:	str	r3, [r0]
   1554c:	b	154a4 <__assert_fail@plt+0x4764>
   15550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15554:	mov	r4, r3
   15558:	ldr	ip, [pc, #2096]	; 15d90 <__assert_fail@plt+0x5050>
   1555c:	add	r5, r1, r4
   15560:	mov	r9, r1
   15564:	ldr	r1, [pc, #2088]	; 15d94 <__assert_fail@plt+0x5054>
   15568:	ldr	r3, [ip]
   1556c:	sub	sp, sp, #76	; 0x4c
   15570:	ldr	r1, [r1]
   15574:	cmp	r5, r3
   15578:	mov	r6, r0
   1557c:	mov	sl, r2
   15580:	str	r1, [sp, #68]	; 0x44
   15584:	ldr	r8, [sp, #112]	; 0x70
   15588:	blt	155a8 <__assert_fail@plt+0x4868>
   1558c:	cmp	r3, #0
   15590:	add	r2, r3, #3
   15594:	movlt	r3, r2
   15598:	asr	r3, r3, #2
   1559c:	cmp	r3, r9
   155a0:	cmple	r3, r4
   155a4:	ble	156c0 <__assert_fail@plt+0x4980>
   155a8:	mov	r1, #0
   155ac:	add	r0, r5, #1
   155b0:	bl	14d34 <__assert_fail@plt+0x3ff4>
   155b4:	ldr	r3, [sl, #24]
   155b8:	sub	lr, r4, #1
   155bc:	add	lr, r3, lr
   155c0:	cmp	r5, #0
   155c4:	sub	r3, r9, #1
   155c8:	str	r3, [sp, #28]
   155cc:	ldr	r2, [r0, #24]
   155d0:	str	r0, [r8]
   155d4:	add	r2, r2, r5
   155d8:	str	r2, [sp, #24]
   155dc:	ldr	r8, [r6, #24]
   155e0:	mov	r0, #0
   155e4:	ble	1569c <__assert_fail@plt+0x495c>
   155e8:	sub	r3, r4, #2
   155ec:	ldr	sl, [pc, #1956]	; 15d98 <__assert_fail@plt+0x5058>
   155f0:	add	r3, r3, r9
   155f4:	mov	r7, r0
   155f8:	mov	fp, r8
   155fc:	mov	r9, r2
   15600:	str	r3, [sp, #16]
   15604:	rsb	r3, r4, #1
   15608:	str	r3, [sp, #20]
   1560c:	sub	r3, r7, r4
   15610:	cmn	r3, #1
   15614:	ldrge	r3, [sp, #16]
   15618:	ldrlt	r2, [sp, #28]
   1561c:	subge	r2, r3, r7
   15620:	cmp	r4, r7
   15624:	rsbgt	r3, r7, #0
   15628:	ldrle	r3, [sp, #20]
   1562c:	add	r2, r8, r2
   15630:	add	r3, lr, r3
   15634:	cmp	r2, fp
   15638:	cmpcs	lr, r3
   1563c:	bcc	15658 <__assert_fail@plt+0x4918>
   15640:	ldrb	ip, [r2], #-1
   15644:	ldrb	r1, [r3], #1
   15648:	cmp	lr, r3
   1564c:	cmpcs	r2, fp
   15650:	mla	r0, ip, r1, r0
   15654:	bcs	15640 <__assert_fail@plt+0x4900>
   15658:	smull	r2, r3, r0, sl
   1565c:	add	r7, r7, #1
   15660:	strd	r2, [sp, #8]
   15664:	ldr	r3, [sp, #12]
   15668:	asr	r2, r0, #31
   1566c:	cmp	r5, r7
   15670:	rsb	r3, r2, r3, asr #2
   15674:	add	r2, r3, r3, lsl #2
   15678:	sub	r0, r0, r2, lsl #1
   1567c:	strb	r0, [r9], #-1
   15680:	mov	r0, r3
   15684:	ldrne	fp, [r6, #24]
   15688:	bne	1560c <__assert_fail@plt+0x48cc>
   1568c:	ldr	r3, [sp, #24]
   15690:	uxtb	r0, r0
   15694:	sub	r3, r3, r5
   15698:	str	r3, [sp, #24]
   1569c:	ldr	r3, [sp, #24]
   156a0:	strb	r0, [r3]
   156a4:	ldr	r3, [pc, #1768]	; 15d94 <__assert_fail@plt+0x5054>
   156a8:	ldr	r2, [sp, #68]	; 0x44
   156ac:	ldr	r3, [r3]
   156b0:	cmp	r2, r3
   156b4:	bne	15d8c <__assert_fail@plt+0x504c>
   156b8:	add	sp, sp, #76	; 0x4c
   156bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156c0:	cmp	r9, r4
   156c4:	movge	r7, r9
   156c8:	movlt	r7, r4
   156cc:	add	r7, r7, #1
   156d0:	ldr	r1, [r0, #24]
   156d4:	add	r7, r7, r7, lsr #31
   156d8:	asr	r7, r7, #1
   156dc:	cmp	r9, r7
   156e0:	blt	15b20 <__assert_fail@plt+0x4de0>
   156e4:	sub	r9, r9, r7
   156e8:	mov	r0, r9
   156ec:	bl	14b70 <__assert_fail@plt+0x3e30>
   156f0:	ldr	r1, [r6, #24]
   156f4:	ldr	r6, [pc, #1696]	; 15d9c <__assert_fail@plt+0x505c>
   156f8:	add	r1, r1, r9
   156fc:	str	r0, [sp, #36]	; 0x24
   15700:	mov	r0, r7
   15704:	bl	14b70 <__assert_fail@plt+0x3e30>
   15708:	cmp	r4, r7
   1570c:	ldr	r1, [sl, #24]
   15710:	str	r0, [sp, #32]
   15714:	bge	15b50 <__assert_fail@plt+0x4e10>
   15718:	ldr	r3, [r6]
   1571c:	mov	r0, r4
   15720:	str	r3, [sp, #44]	; 0x2c
   15724:	ldr	r2, [r3, #12]
   15728:	add	r2, r2, #1
   1572c:	str	r2, [r3, #12]
   15730:	bl	14b70 <__assert_fail@plt+0x3e30>
   15734:	mov	r2, r0
   15738:	str	r0, [sp, #40]	; 0x28
   1573c:	ldr	r0, [sp, #36]	; 0x24
   15740:	ldr	r3, [r0, #24]
   15744:	ldrb	r1, [r3]
   15748:	cmp	r1, #0
   1574c:	bne	15790 <__assert_fail@plt+0x4a50>
   15750:	ldr	lr, [r0, #4]
   15754:	cmp	lr, #1
   15758:	ble	15790 <__assert_fail@plt+0x4a50>
   1575c:	sub	r1, lr, #1
   15760:	add	lr, r3, lr
   15764:	add	r3, r3, #1
   15768:	b	15778 <__assert_fail@plt+0x4a38>
   1576c:	cmp	lr, r3
   15770:	sub	r1, r1, #1
   15774:	beq	15790 <__assert_fail@plt+0x4a50>
   15778:	str	r3, [r0, #24]
   1577c:	str	r1, [r0, #4]
   15780:	ldrb	ip, [r3]
   15784:	add	r3, r3, #1
   15788:	cmp	ip, #0
   1578c:	beq	1576c <__assert_fail@plt+0x4a2c>
   15790:	ldr	r1, [sp, #32]
   15794:	ldr	r3, [r1, #24]
   15798:	ldrb	ip, [r3]
   1579c:	cmp	ip, #0
   157a0:	bne	157e4 <__assert_fail@plt+0x4aa4>
   157a4:	ldr	r4, [r1, #4]
   157a8:	cmp	r4, #1
   157ac:	ble	157e4 <__assert_fail@plt+0x4aa4>
   157b0:	sub	ip, r4, #1
   157b4:	add	r4, r3, r4
   157b8:	add	r3, r3, #1
   157bc:	b	157cc <__assert_fail@plt+0x4a8c>
   157c0:	cmp	r4, r3
   157c4:	sub	ip, ip, #1
   157c8:	beq	157e4 <__assert_fail@plt+0x4aa4>
   157cc:	str	r3, [r1, #24]
   157d0:	str	ip, [r1, #4]
   157d4:	ldrb	lr, [r3]
   157d8:	add	r3, r3, #1
   157dc:	cmp	lr, #0
   157e0:	beq	157c0 <__assert_fail@plt+0x4a80>
   157e4:	ldr	lr, [sp, #44]	; 0x2c
   157e8:	ldr	r3, [lr, #24]
   157ec:	ldrb	ip, [r3]
   157f0:	cmp	ip, #0
   157f4:	bne	15838 <__assert_fail@plt+0x4af8>
   157f8:	ldr	r9, [lr, #4]
   157fc:	cmp	r9, #1
   15800:	ble	15838 <__assert_fail@plt+0x4af8>
   15804:	sub	ip, r9, #1
   15808:	add	r9, r3, r9
   1580c:	add	r3, r3, #1
   15810:	b	15820 <__assert_fail@plt+0x4ae0>
   15814:	cmp	r9, r3
   15818:	sub	ip, ip, #1
   1581c:	beq	15838 <__assert_fail@plt+0x4af8>
   15820:	str	r3, [lr, #24]
   15824:	str	ip, [lr, #4]
   15828:	ldrb	r4, [r3]
   1582c:	add	r3, r3, #1
   15830:	cmp	r4, #0
   15834:	beq	15814 <__assert_fail@plt+0x4ad4>
   15838:	ldr	r3, [r2, #24]
   1583c:	ldrb	ip, [r3]
   15840:	cmp	ip, #0
   15844:	bne	15888 <__assert_fail@plt+0x4b48>
   15848:	ldr	r9, [r2, #4]
   1584c:	cmp	r9, #1
   15850:	ble	15888 <__assert_fail@plt+0x4b48>
   15854:	sub	ip, r9, #1
   15858:	add	r9, r3, r9
   1585c:	add	r3, r3, #1
   15860:	b	15870 <__assert_fail@plt+0x4b30>
   15864:	cmp	r9, r3
   15868:	sub	ip, ip, #1
   1586c:	beq	15888 <__assert_fail@plt+0x4b48>
   15870:	str	r3, [r2, #24]
   15874:	str	ip, [r2, #4]
   15878:	ldrb	r4, [r3]
   1587c:	add	r3, r3, #1
   15880:	cmp	r4, #0
   15884:	beq	15864 <__assert_fail@plt+0x4b24>
   15888:	ldr	ip, [r6]
   1588c:	cmp	r0, ip
   15890:	beq	158d0 <__assert_fail@plt+0x4b90>
   15894:	ldmib	r0, {r3, r4}
   15898:	ldr	r2, [r0, #24]
   1589c:	add	r3, r3, r4
   158a0:	cmp	r3, #0
   158a4:	ble	15bd8 <__assert_fail@plt+0x4e98>
   158a8:	ldrb	r4, [r2]
   158ac:	add	r2, r2, #1
   158b0:	cmp	r4, #0
   158b4:	beq	158c8 <__assert_fail@plt+0x4b88>
   158b8:	b	15bdc <__assert_fail@plt+0x4e9c>
   158bc:	ldrb	r4, [r2], #1
   158c0:	cmp	r4, #0
   158c4:	bne	15bdc <__assert_fail@plt+0x4e9c>
   158c8:	subs	r3, r3, #1
   158cc:	bne	158bc <__assert_fail@plt+0x4b7c>
   158d0:	ldr	r3, [ip, #12]
   158d4:	add	sl, sp, #60	; 0x3c
   158d8:	add	r3, r3, #2
   158dc:	str	r3, [ip, #12]
   158e0:	mov	r2, sl
   158e4:	mov	r3, #0
   158e8:	str	ip, [sp, #60]	; 0x3c
   158ec:	str	ip, [sp, #64]	; 0x40
   158f0:	bl	1545c <__assert_fail@plt+0x471c>
   158f4:	ldr	ip, [sp, #60]	; 0x3c
   158f8:	add	fp, sp, #64	; 0x40
   158fc:	mov	r3, #0
   15900:	ldr	ip, [ip, #4]
   15904:	mov	r2, fp
   15908:	ldrd	r0, [sp, #40]	; 0x28
   1590c:	str	ip, [sp, #20]
   15910:	bl	1545c <__assert_fail@plt+0x471c>
   15914:	ldr	r3, [sp, #64]	; 0x40
   15918:	ldr	r3, [r3, #4]
   1591c:	str	r3, [sp, #16]
   15920:	ldr	r3, [r6]
   15924:	mov	r2, #1
   15928:	str	r2, [sp, #8]
   1592c:	ldr	r2, [r3, #12]
   15930:	add	r9, sp, #72	; 0x48
   15934:	add	r2, r2, #1
   15938:	str	r3, [r9, #-24]!	; 0xffffffe8
   1593c:	str	r2, [r3, #12]
   15940:	ldr	r0, [sp, #60]	; 0x3c
   15944:	cmp	r0, r3
   15948:	beq	1598c <__assert_fail@plt+0x4c4c>
   1594c:	ldr	ip, [r0, #4]
   15950:	ldr	r2, [r0, #8]
   15954:	ldr	r1, [r0, #24]
   15958:	add	r2, ip, r2
   1595c:	cmp	r2, #0
   15960:	ble	15ca8 <__assert_fail@plt+0x4f68>
   15964:	ldrb	ip, [r1]
   15968:	add	r1, r1, #1
   1596c:	cmp	ip, #0
   15970:	beq	15984 <__assert_fail@plt+0x4c44>
   15974:	b	15cac <__assert_fail@plt+0x4f6c>
   15978:	ldrb	ip, [r1], #1
   1597c:	cmp	ip, #0
   15980:	bne	15cac <__assert_fail@plt+0x4f6c>
   15984:	subs	r2, r2, #1
   15988:	bne	15978 <__assert_fail@plt+0x4c38>
   1598c:	ldr	r2, [r3, #12]
   15990:	add	r4, sp, #72	; 0x48
   15994:	add	r2, r2, #1
   15998:	str	r2, [r3, #12]
   1599c:	str	r3, [r4, #-20]!	; 0xffffffec
   159a0:	ldr	r0, [sp, #32]
   159a4:	cmp	r0, r3
   159a8:	beq	159f4 <__assert_fail@plt+0x4cb4>
   159ac:	ldr	r2, [r0, #4]
   159b0:	ldr	r1, [r0, #24]
   159b4:	mov	ip, r2
   159b8:	str	r2, [sp, #16]
   159bc:	ldr	r2, [r0, #8]
   159c0:	add	r2, ip, r2
   159c4:	cmp	r2, #0
   159c8:	ble	15b7c <__assert_fail@plt+0x4e3c>
   159cc:	ldrb	ip, [r1]
   159d0:	add	r1, r1, #1
   159d4:	cmp	ip, #0
   159d8:	beq	159ec <__assert_fail@plt+0x4cac>
   159dc:	b	15b80 <__assert_fail@plt+0x4e40>
   159e0:	ldrb	ip, [r1], #1
   159e4:	cmp	ip, #0
   159e8:	bne	15b80 <__assert_fail@plt+0x4e40>
   159ec:	subs	r2, r2, #1
   159f0:	bne	159e0 <__assert_fail@plt+0x4ca0>
   159f4:	ldr	r2, [r3, #12]
   159f8:	add	r6, sp, #72	; 0x48
   159fc:	add	r2, r2, #1
   15a00:	str	r2, [r3, #12]
   15a04:	str	r3, [r6, #-16]!
   15a08:	add	r0, r5, #1
   15a0c:	mov	r1, #0
   15a10:	bl	14d34 <__assert_fail@plt+0x3ff4>
   15a14:	ldr	r2, [sp, #8]
   15a18:	cmp	r2, #0
   15a1c:	mov	r3, r0
   15a20:	str	r0, [r8]
   15a24:	bne	15a64 <__assert_fail@plt+0x4d24>
   15a28:	ldr	r1, [sp, #48]	; 0x30
   15a2c:	ldr	r5, [sp, #8]
   15a30:	lsl	r3, r7, #1
   15a34:	ldr	r2, [r1, #24]
   15a38:	ldr	r1, [r1, #4]
   15a3c:	str	r5, [sp]
   15a40:	bl	149cc <__assert_fail@plt+0x3c8c>
   15a44:	ldr	r1, [sp, #48]	; 0x30
   15a48:	ldr	r0, [r8]
   15a4c:	mov	r3, r7
   15a50:	ldr	r2, [r1, #24]
   15a54:	ldr	r1, [r1, #4]
   15a58:	str	r5, [sp]
   15a5c:	bl	149cc <__assert_fail@plt+0x3c8c>
   15a60:	ldr	r3, [r8]
   15a64:	ldr	r1, [sp, #56]	; 0x38
   15a68:	mov	r5, #0
   15a6c:	mov	r0, r3
   15a70:	ldr	r2, [r1, #24]
   15a74:	mov	r3, r7
   15a78:	ldr	r1, [r1, #4]
   15a7c:	str	r5, [sp]
   15a80:	bl	149cc <__assert_fail@plt+0x3c8c>
   15a84:	ldr	r1, [sp, #56]	; 0x38
   15a88:	ldr	r0, [r8]
   15a8c:	mov	r3, r5
   15a90:	ldr	r2, [r1, #24]
   15a94:	ldr	r1, [r1, #4]
   15a98:	str	r5, [sp]
   15a9c:	bl	149cc <__assert_fail@plt+0x3c8c>
   15aa0:	ldr	r1, [sp, #60]	; 0x3c
   15aa4:	ldr	r2, [sp, #64]	; 0x40
   15aa8:	ldr	r3, [sp, #52]	; 0x34
   15aac:	ldr	ip, [r1]
   15ab0:	ldr	lr, [r2]
   15ab4:	ldr	r1, [r3, #4]
   15ab8:	subs	ip, ip, lr
   15abc:	movne	ip, #1
   15ac0:	ldr	r2, [r3, #24]
   15ac4:	ldr	r0, [r8]
   15ac8:	mov	r3, r7
   15acc:	str	ip, [sp]
   15ad0:	bl	149cc <__assert_fail@plt+0x3c8c>
   15ad4:	add	r0, sp, #36	; 0x24
   15ad8:	bl	1523c <__assert_fail@plt+0x44fc>
   15adc:	add	r0, sp, #32
   15ae0:	bl	1523c <__assert_fail@plt+0x44fc>
   15ae4:	add	r0, sp, #44	; 0x2c
   15ae8:	bl	1523c <__assert_fail@plt+0x44fc>
   15aec:	mov	r0, r9
   15af0:	bl	1523c <__assert_fail@plt+0x44fc>
   15af4:	add	r0, sp, #40	; 0x28
   15af8:	bl	1523c <__assert_fail@plt+0x44fc>
   15afc:	mov	r0, r4
   15b00:	bl	1523c <__assert_fail@plt+0x44fc>
   15b04:	mov	r0, r6
   15b08:	bl	1523c <__assert_fail@plt+0x44fc>
   15b0c:	mov	r0, sl
   15b10:	bl	1523c <__assert_fail@plt+0x44fc>
   15b14:	mov	r0, fp
   15b18:	bl	1523c <__assert_fail@plt+0x44fc>
   15b1c:	b	156a4 <__assert_fail@plt+0x4964>
   15b20:	ldr	r6, [pc, #628]	; 15d9c <__assert_fail@plt+0x505c>
   15b24:	mov	r0, r9
   15b28:	ldr	r3, [r6]
   15b2c:	str	r3, [sp, #36]	; 0x24
   15b30:	ldr	r2, [r3, #12]
   15b34:	add	r2, r2, #1
   15b38:	str	r2, [r3, #12]
   15b3c:	bl	14b70 <__assert_fail@plt+0x3e30>
   15b40:	cmp	r4, r7
   15b44:	ldr	r1, [sl, #24]
   15b48:	str	r0, [sp, #32]
   15b4c:	blt	15718 <__assert_fail@plt+0x49d8>
   15b50:	sub	r4, r4, r7
   15b54:	mov	r0, r4
   15b58:	bl	14b70 <__assert_fail@plt+0x3e30>
   15b5c:	ldr	r1, [sl, #24]
   15b60:	add	r1, r1, r4
   15b64:	str	r0, [sp, #44]	; 0x2c
   15b68:	mov	r0, r7
   15b6c:	bl	14b70 <__assert_fail@plt+0x3e30>
   15b70:	mov	r2, r0
   15b74:	str	r0, [sp, #40]	; 0x28
   15b78:	b	1573c <__assert_fail@plt+0x49fc>
   15b7c:	beq	159f4 <__assert_fail@plt+0x4cb4>
   15b80:	ldr	r2, [sp, #40]	; 0x28
   15b84:	cmp	r2, r3
   15b88:	beq	159f4 <__assert_fail@plt+0x4cb4>
   15b8c:	ldr	r1, [r2, #4]
   15b90:	ldr	ip, [r2, #24]
   15b94:	mov	lr, r1
   15b98:	str	r1, [sp, #20]
   15b9c:	ldr	r1, [r2, #8]
   15ba0:	add	r1, lr, r1
   15ba4:	cmp	r1, #0
   15ba8:	ble	15d1c <__assert_fail@plt+0x4fdc>
   15bac:	ldrb	lr, [ip]
   15bb0:	add	ip, ip, #1
   15bb4:	cmp	lr, #0
   15bb8:	beq	15bcc <__assert_fail@plt+0x4e8c>
   15bbc:	b	15d20 <__assert_fail@plt+0x4fe0>
   15bc0:	ldrb	lr, [ip], #1
   15bc4:	cmp	lr, #0
   15bc8:	bne	15d20 <__assert_fail@plt+0x4fe0>
   15bcc:	subs	r1, r1, #1
   15bd0:	bne	15bc0 <__assert_fail@plt+0x4e80>
   15bd4:	b	159f4 <__assert_fail@plt+0x4cb4>
   15bd8:	beq	158d0 <__assert_fail@plt+0x4b90>
   15bdc:	cmp	lr, ip
   15be0:	beq	158d0 <__assert_fail@plt+0x4b90>
   15be4:	ldr	r4, [lr, #4]
   15be8:	ldr	r2, [lr, #8]
   15bec:	ldr	r3, [lr, #24]
   15bf0:	add	r4, r4, r2
   15bf4:	cmp	r4, #0
   15bf8:	ble	15c24 <__assert_fail@plt+0x4ee4>
   15bfc:	ldrb	r2, [r3]
   15c00:	add	r3, r3, #1
   15c04:	cmp	r2, #0
   15c08:	beq	15c1c <__assert_fail@plt+0x4edc>
   15c0c:	b	15d38 <__assert_fail@plt+0x4ff8>
   15c10:	ldrb	r2, [r3], #1
   15c14:	cmp	r2, #0
   15c18:	bne	15d38 <__assert_fail@plt+0x4ff8>
   15c1c:	subs	r4, r4, #1
   15c20:	bne	15c10 <__assert_fail@plt+0x4ed0>
   15c24:	ldr	r3, [ip, #12]
   15c28:	add	sl, sp, #60	; 0x3c
   15c2c:	add	r3, r3, #2
   15c30:	str	r3, [ip, #12]
   15c34:	mov	r2, sl
   15c38:	mov	r3, #0
   15c3c:	str	ip, [sp, #60]	; 0x3c
   15c40:	str	ip, [sp, #64]	; 0x40
   15c44:	bl	1545c <__assert_fail@plt+0x471c>
   15c48:	ldr	ip, [sp, #60]	; 0x3c
   15c4c:	add	fp, sp, #64	; 0x40
   15c50:	mov	r3, #0
   15c54:	ldr	ip, [ip, #4]
   15c58:	mov	r2, fp
   15c5c:	ldrd	r0, [sp, #40]	; 0x28
   15c60:	str	ip, [sp, #20]
   15c64:	bl	1545c <__assert_fail@plt+0x471c>
   15c68:	ldr	r3, [sp, #64]	; 0x40
   15c6c:	cmp	r4, #0
   15c70:	ldr	r3, [r3, #4]
   15c74:	str	r3, [sp, #16]
   15c78:	beq	15920 <__assert_fail@plt+0x4be0>
   15c7c:	ldr	r2, [sp, #44]	; 0x2c
   15c80:	ldr	r0, [sp, #36]	; 0x24
   15c84:	add	r9, sp, #48	; 0x30
   15c88:	ldr	r3, [r2, #4]
   15c8c:	ldr	r1, [r0, #4]
   15c90:	str	r9, [sp]
   15c94:	bl	15550 <__assert_fail@plt+0x4810>
   15c98:	mov	r2, #0
   15c9c:	ldr	r3, [r6]
   15ca0:	str	r2, [sp, #8]
   15ca4:	b	15940 <__assert_fail@plt+0x4c00>
   15ca8:	beq	1598c <__assert_fail@plt+0x4c4c>
   15cac:	ldr	r2, [sp, #64]	; 0x40
   15cb0:	cmp	r2, r3
   15cb4:	beq	1598c <__assert_fail@plt+0x4c4c>
   15cb8:	ldr	lr, [r2, #4]
   15cbc:	ldr	r1, [r2, #8]
   15cc0:	ldr	ip, [r2, #24]
   15cc4:	add	r1, lr, r1
   15cc8:	cmp	r1, #0
   15ccc:	ble	15cfc <__assert_fail@plt+0x4fbc>
   15cd0:	ldrb	lr, [ip]
   15cd4:	add	ip, ip, #1
   15cd8:	cmp	lr, #0
   15cdc:	beq	15cf0 <__assert_fail@plt+0x4fb0>
   15ce0:	b	15d00 <__assert_fail@plt+0x4fc0>
   15ce4:	ldrb	lr, [ip], #1
   15ce8:	cmp	lr, #0
   15cec:	bne	15d00 <__assert_fail@plt+0x4fc0>
   15cf0:	subs	r1, r1, #1
   15cf4:	bne	15ce4 <__assert_fail@plt+0x4fa4>
   15cf8:	b	1598c <__assert_fail@plt+0x4c4c>
   15cfc:	beq	1598c <__assert_fail@plt+0x4c4c>
   15d00:	add	r4, sp, #52	; 0x34
   15d04:	ldr	r3, [sp, #16]
   15d08:	ldr	r1, [sp, #20]
   15d0c:	str	r4, [sp]
   15d10:	bl	15550 <__assert_fail@plt+0x4810>
   15d14:	ldr	r3, [r6]
   15d18:	b	159a0 <__assert_fail@plt+0x4c60>
   15d1c:	beq	159f4 <__assert_fail@plt+0x4cb4>
   15d20:	add	r6, sp, #56	; 0x38
   15d24:	ldr	r3, [sp, #20]
   15d28:	ldr	r1, [sp, #16]
   15d2c:	str	r6, [sp]
   15d30:	bl	15550 <__assert_fail@plt+0x4810>
   15d34:	b	15a08 <__assert_fail@plt+0x4cc8>
   15d38:	ldr	r3, [ip, #12]
   15d3c:	add	sl, sp, #60	; 0x3c
   15d40:	add	r3, r3, #2
   15d44:	str	r3, [ip, #12]
   15d48:	mov	r2, sl
   15d4c:	mov	r3, #0
   15d50:	str	ip, [sp, #60]	; 0x3c
   15d54:	str	ip, [sp, #64]	; 0x40
   15d58:	bl	1545c <__assert_fail@plt+0x471c>
   15d5c:	ldr	ip, [sp, #60]	; 0x3c
   15d60:	add	fp, sp, #64	; 0x40
   15d64:	mov	r3, #0
   15d68:	ldr	ip, [ip, #4]
   15d6c:	mov	r2, fp
   15d70:	ldrd	r0, [sp, #40]	; 0x28
   15d74:	str	ip, [sp, #20]
   15d78:	bl	1545c <__assert_fail@plt+0x471c>
   15d7c:	ldr	r3, [sp, #64]	; 0x40
   15d80:	ldr	r3, [r3, #4]
   15d84:	str	r3, [sp, #16]
   15d88:	b	15c7c <__assert_fail@plt+0x4f3c>
   15d8c:	bl	10bb4 <__stack_chk_fail@plt>
   15d90:	andeq	r9, r2, r8, lsl r0
   15d94:	andeq	r8, r2, r0, lsr lr
   15d98:	strbtvs	r6, [r6], -r7, ror #12
   15d9c:	andeq	r9, r2, r0, lsl #9
   15da0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15da4:	mov	r6, r0
   15da8:	ldr	lr, [r0]
   15dac:	ldr	ip, [r1]
   15db0:	mov	r5, r2
   15db4:	cmp	lr, ip
   15db8:	mov	r4, r3
   15dbc:	beq	15e70 <__assert_fail@plt+0x5130>
   15dc0:	mov	r2, #0
   15dc4:	mov	r7, r1
   15dc8:	bl	14be8 <__assert_fail@plt+0x3ea8>
   15dcc:	subs	r9, r0, #0
   15dd0:	beq	15e34 <__assert_fail@plt+0x50f4>
   15dd4:	cmp	r9, #1
   15dd8:	beq	15e14 <__assert_fail@plt+0x50d4>
   15ddc:	cmn	r9, #1
   15de0:	movne	r8, #0
   15de4:	bne	15e04 <__assert_fail@plt+0x50c4>
   15de8:	mov	r2, r4
   15dec:	mov	r1, r6
   15df0:	mov	r0, r7
   15df4:	bl	15010 <__assert_fail@plt+0x42d0>
   15df8:	ldr	r3, [r7]
   15dfc:	mov	r8, r0
   15e00:	str	r3, [r0]
   15e04:	mov	r0, r5
   15e08:	bl	1523c <__assert_fail@plt+0x44fc>
   15e0c:	str	r8, [r5]
   15e10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e14:	mov	r2, r4
   15e18:	mov	r1, r7
   15e1c:	mov	r0, r6
   15e20:	bl	15010 <__assert_fail@plt+0x42d0>
   15e24:	ldr	r3, [r6]
   15e28:	mov	r8, r0
   15e2c:	str	r3, [r0]
   15e30:	b	15e04 <__assert_fail@plt+0x50c4>
   15e34:	ldr	r3, [r7, #8]
   15e38:	ldr	r2, [r6, #8]
   15e3c:	cmp	r4, r3
   15e40:	movlt	r4, r3
   15e44:	cmp	r4, r2
   15e48:	movlt	r4, r2
   15e4c:	mov	r1, r4
   15e50:	mov	r0, #1
   15e54:	bl	14d34 <__assert_fail@plt+0x3ff4>
   15e58:	add	r2, r4, #1
   15e5c:	mov	r1, r9
   15e60:	mov	r8, r0
   15e64:	ldr	r0, [r0, #24]
   15e68:	bl	10cb0 <memset@plt>
   15e6c:	b	15e04 <__assert_fail@plt+0x50c4>
   15e70:	mov	r2, r3
   15e74:	bl	14de0 <__assert_fail@plt+0x40a0>
   15e78:	ldr	r3, [r6]
   15e7c:	mov	r8, r0
   15e80:	str	r3, [r0]
   15e84:	b	15e04 <__assert_fail@plt+0x50c4>
   15e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e8c:	mov	r9, r1
   15e90:	ldr	r6, [r1, #8]
   15e94:	ldr	r4, [r0, #8]
   15e98:	cmp	r6, r3
   15e9c:	ldr	r7, [pc, #344]	; 15ffc <__assert_fail@plt+0x52bc>
   15ea0:	movge	r5, r6
   15ea4:	movlt	r5, r3
   15ea8:	ldr	r1, [r0, #4]
   15eac:	ldr	r3, [r9, #4]
   15eb0:	sub	sp, sp, #20
   15eb4:	cmp	r5, r4
   15eb8:	add	sl, r4, r6
   15ebc:	movlt	r5, r4
   15ec0:	add	r6, r6, r3
   15ec4:	add	r4, r4, r1
   15ec8:	ldr	ip, [r7]
   15ecc:	add	lr, sp, #8
   15ed0:	cmp	r5, sl
   15ed4:	mov	r1, r4
   15ed8:	mov	r3, r6
   15edc:	mov	r8, r2
   15ee0:	str	lr, [sp]
   15ee4:	mov	r2, r9
   15ee8:	movge	r5, sl
   15eec:	mov	fp, r0
   15ef0:	str	ip, [sp, #12]
   15ef4:	bl	15550 <__assert_fail@plt+0x4810>
   15ef8:	ldr	r1, [sp, #8]
   15efc:	ldr	r3, [fp]
   15f00:	ldr	r0, [r9]
   15f04:	ldr	r2, [r1, #20]
   15f08:	add	r4, r4, r6
   15f0c:	subs	r3, r3, r0
   15f10:	add	r4, r4, #1
   15f14:	movne	r3, #1
   15f18:	sub	sl, r4, sl
   15f1c:	str	r3, [r1]
   15f20:	str	r5, [r1, #8]
   15f24:	str	sl, [r1, #4]
   15f28:	str	r2, [r1, #24]
   15f2c:	ldrb	r3, [r2]
   15f30:	cmp	r3, #0
   15f34:	bne	15f78 <__assert_fail@plt+0x5238>
   15f38:	cmp	sl, #1
   15f3c:	ble	15f78 <__assert_fail@plt+0x5238>
   15f40:	sub	r0, sl, #1
   15f44:	add	r3, r2, #1
   15f48:	add	sl, r2, sl
   15f4c:	b	15f5c <__assert_fail@plt+0x521c>
   15f50:	cmp	r3, sl
   15f54:	sub	r0, r0, #1
   15f58:	beq	15f78 <__assert_fail@plt+0x5238>
   15f5c:	str	r3, [r1, #24]
   15f60:	str	r0, [r1, #4]
   15f64:	ldrb	ip, [r3]
   15f68:	mov	r2, r3
   15f6c:	add	r3, r3, #1
   15f70:	cmp	ip, #0
   15f74:	beq	15f50 <__assert_fail@plt+0x5210>
   15f78:	ldr	r3, [pc, #128]	; 16000 <__assert_fail@plt+0x52c0>
   15f7c:	ldr	r3, [r3]
   15f80:	cmp	r1, r3
   15f84:	beq	15fc0 <__assert_fail@plt+0x5280>
   15f88:	ldr	r3, [r1, #4]
   15f8c:	add	r5, r5, r3
   15f90:	cmp	r5, #0
   15f94:	ble	15ff0 <__assert_fail@plt+0x52b0>
   15f98:	ldrb	r3, [r2]
   15f9c:	add	r2, r2, #1
   15fa0:	cmp	r3, #0
   15fa4:	beq	15fb8 <__assert_fail@plt+0x5278>
   15fa8:	b	15fc8 <__assert_fail@plt+0x5288>
   15fac:	ldrb	r3, [r2], #1
   15fb0:	cmp	r3, #0
   15fb4:	bne	15fc8 <__assert_fail@plt+0x5288>
   15fb8:	subs	r5, r5, #1
   15fbc:	bne	15fac <__assert_fail@plt+0x526c>
   15fc0:	mov	r3, #0
   15fc4:	str	r3, [r1]
   15fc8:	mov	r0, r8
   15fcc:	bl	1523c <__assert_fail@plt+0x44fc>
   15fd0:	ldr	r3, [sp, #8]
   15fd4:	ldr	r2, [sp, #12]
   15fd8:	str	r3, [r8]
   15fdc:	ldr	r3, [r7]
   15fe0:	cmp	r2, r3
   15fe4:	bne	15ff8 <__assert_fail@plt+0x52b8>
   15fe8:	add	sp, sp, #20
   15fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ff0:	beq	15fc0 <__assert_fail@plt+0x5280>
   15ff4:	b	15fc8 <__assert_fail@plt+0x5288>
   15ff8:	bl	10bb4 <__stack_chk_fail@plt>
   15ffc:	andeq	r8, r2, r0, lsr lr
   16000:	andeq	r9, r2, r0, lsl #9
   16004:	ldr	ip, [pc, #1636]	; 16670 <__assert_fail@plt+0x5930>
   16008:	ldr	ip, [ip]
   1600c:	cmp	r1, ip
   16010:	beq	16660 <__assert_fail@plt+0x5920>
   16014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16018:	sub	sp, sp, #44	; 0x2c
   1601c:	ldmib	r1, {r4, ip}
   16020:	mov	r8, r3
   16024:	str	r2, [sp, #28]
   16028:	add	r7, r4, ip
   1602c:	cmp	r7, #0
   16030:	str	r0, [sp, #4]
   16034:	str	r1, [sp, #16]
   16038:	ldr	lr, [r1, #24]
   1603c:	mov	r3, r7
   16040:	ble	16078 <__assert_fail@plt+0x5338>
   16044:	ldrb	r1, [lr]
   16048:	add	r2, lr, #1
   1604c:	cmp	r1, #0
   16050:	beq	16064 <__assert_fail@plt+0x5324>
   16054:	b	1607c <__assert_fail@plt+0x533c>
   16058:	ldrb	r1, [r2], #1
   1605c:	cmp	r1, #0
   16060:	bne	164e4 <__assert_fail@plt+0x57a4>
   16064:	subs	r3, r3, #1
   16068:	bne	16058 <__assert_fail@plt+0x5318>
   1606c:	mvn	r0, #0
   16070:	add	sp, sp, #44	; 0x2c
   16074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16078:	beq	1606c <__assert_fail@plt+0x532c>
   1607c:	ldr	r3, [sp, #4]
   16080:	cmp	ip, #0
   16084:	cmpeq	r4, #1
   16088:	ldr	r0, [r3, #4]
   1608c:	beq	164f0 <__assert_fail@plt+0x57b0>
   16090:	sub	r7, r7, #1
   16094:	cmp	ip, #0
   16098:	mov	r6, r4
   1609c:	add	r1, lr, r7
   160a0:	beq	160d8 <__assert_fail@plt+0x5398>
   160a4:	ldrb	r2, [lr, r7]
   160a8:	sub	r3, r1, #1
   160ac:	cmp	r2, #0
   160b0:	bne	16650 <__assert_fail@plt+0x5910>
   160b4:	sub	lr, r1, ip
   160b8:	sub	r1, ip, r1
   160bc:	b	160cc <__assert_fail@plt+0x538c>
   160c0:	ldrb	r2, [r3], #-1
   160c4:	cmp	r2, #0
   160c8:	bne	160dc <__assert_fail@plt+0x539c>
   160cc:	cmp	r3, lr
   160d0:	add	r4, r3, r1
   160d4:	bne	160c0 <__assert_fail@plt+0x5380>
   160d8:	mov	r4, #0
   160dc:	ldr	r3, [sp, #4]
   160e0:	add	r9, r0, r4
   160e4:	ldr	r5, [r3, #8]
   160e8:	sub	sl, r5, r4
   160ec:	cmp	r8, sl
   160f0:	subgt	r3, r8, sl
   160f4:	movle	r3, #0
   160f8:	str	r3, [sp, #12]
   160fc:	ldr	r3, [sp, #12]
   16100:	add	r5, r5, r0
   16104:	add	r7, r5, #2
   16108:	add	r7, r7, r3
   1610c:	mov	r0, r7
   16110:	bl	10c08 <malloc@plt>
   16114:	subs	r3, r0, #0
   16118:	str	r3, [sp, #8]
   1611c:	beq	16588 <__assert_fail@plt+0x5848>
   16120:	add	r4, r4, r6
   16124:	ldr	r6, [sp, #8]
   16128:	mov	r2, r7
   1612c:	mov	r1, #0
   16130:	mov	r0, r6
   16134:	bl	10cb0 <memset@plt>
   16138:	ldr	r3, [sp, #4]
   1613c:	mov	r2, r5
   16140:	add	r0, r6, #1
   16144:	ldr	r1, [r3, #24]
   16148:	add	r5, r4, #1
   1614c:	bl	10b90 <memcpy@plt>
   16150:	mov	r0, r5
   16154:	bl	10c08 <malloc@plt>
   16158:	subs	r3, r0, #0
   1615c:	str	r3, [sp, #20]
   16160:	beq	165b4 <__assert_fail@plt+0x5874>
   16164:	ldr	r3, [sp, #16]
   16168:	ldr	r6, [sp, #20]
   1616c:	mov	r2, r4
   16170:	ldr	r1, [r3, #24]
   16174:	mov	r0, r6
   16178:	bl	10b90 <memcpy@plt>
   1617c:	mov	r3, #0
   16180:	strb	r3, [r6, r4]
   16184:	ldrb	r3, [r6]
   16188:	cmp	r3, #0
   1618c:	addeq	r3, r6, #1
   16190:	beq	1619c <__assert_fail@plt+0x545c>
   16194:	b	165bc <__assert_fail@plt+0x587c>
   16198:	mov	r4, r7
   1619c:	mov	r6, r3
   161a0:	sub	r7, r4, #1
   161a4:	ldrb	r2, [r6]
   161a8:	add	r3, r3, #1
   161ac:	cmp	r2, #0
   161b0:	beq	16198 <__assert_fail@plt+0x5458>
   161b4:	add	fp, r8, r9
   161b8:	cmp	fp, r7
   161bc:	bcc	163b4 <__assert_fail@plt+0x5674>
   161c0:	cmp	r9, r7
   161c4:	add	r2, r8, #1
   161c8:	addcs	r2, r2, r9
   161cc:	subcs	r2, r2, r7
   161d0:	subcs	r0, r2, r8
   161d4:	movcc	r0, #1
   161d8:	mov	r1, r8
   161dc:	str	r2, [sp, #24]
   161e0:	bl	14d34 <__assert_fail@plt+0x3ff4>
   161e4:	ldr	r2, [sp, #24]
   161e8:	mov	r1, #0
   161ec:	mov	r5, r0
   161f0:	ldr	r0, [r0, #24]
   161f4:	bl	10cb0 <memset@plt>
   161f8:	mov	r0, r4
   161fc:	bl	10c08 <malloc@plt>
   16200:	subs	r3, r0, #0
   16204:	str	r3, [sp, #24]
   16208:	beq	16668 <__assert_fail@plt+0x5928>
   1620c:	ldrb	r3, [r6]
   16210:	mov	r0, #10
   16214:	add	r1, r3, #1
   16218:	str	r3, [sp, #32]
   1621c:	bl	17c68 <__assert_fail@plt+0x6f28>
   16220:	ldr	r3, [sp, #32]
   16224:	cmp	r0, #1
   16228:	mov	r8, r0
   1622c:	beq	16268 <__assert_fail@plt+0x5528>
   16230:	ldr	r3, [sp, #12]
   16234:	ldr	r0, [sp, #8]
   16238:	add	r1, sl, r9
   1623c:	add	r1, r1, #1
   16240:	add	r1, r1, r3
   16244:	mov	r2, r8
   16248:	mov	r3, r0
   1624c:	bl	1492c <__assert_fail@plt+0x3bec>
   16250:	mov	r3, r6
   16254:	mov	r2, r8
   16258:	mov	r1, r7
   1625c:	mov	r0, r6
   16260:	bl	1492c <__assert_fail@plt+0x3bec>
   16264:	ldrb	r3, [r6]
   16268:	ldr	r2, [r5, #24]
   1626c:	cmp	r9, r7
   16270:	subcc	r9, r7, r9
   16274:	mov	r1, r2
   16278:	addcc	r2, r2, r9
   1627c:	movcc	r1, r2
   16280:	sub	r2, fp, r7
   16284:	str	r4, [sp, #32]
   16288:	str	r5, [sp, #36]	; 0x24
   1628c:	str	r2, [sp, #12]
   16290:	ldr	r9, [sp, #8]
   16294:	mov	sl, r1
   16298:	mov	r4, r1
   1629c:	mov	r5, r3
   162a0:	b	162bc <__assert_fail@plt+0x557c>
   162a4:	ldr	r2, [sp, #12]
   162a8:	strb	r8, [sl], #1
   162ac:	sub	r3, sl, r4
   162b0:	cmp	r2, r3
   162b4:	bcc	164dc <__assert_fail@plt+0x579c>
   162b8:	ldrb	r5, [r6]
   162bc:	ldrb	r2, [r9]
   162c0:	ldrb	r1, [r9, #1]!
   162c4:	mov	fp, #10
   162c8:	cmp	r2, r5
   162cc:	smlabb	fp, fp, r2, r1
   162d0:	moveq	r8, #9
   162d4:	beq	162e8 <__assert_fail@plt+0x55a8>
   162d8:	mov	r1, r5
   162dc:	mov	r0, fp
   162e0:	bl	17c68 <__assert_fail@plt+0x6f28>
   162e4:	mov	r8, r0
   162e8:	mul	ip, r8, r5
   162ec:	ldrb	lr, [r6, #1]
   162f0:	sub	r2, fp, ip
   162f4:	ldrb	r0, [r9, #1]
   162f8:	add	r2, r2, r2, lsl #2
   162fc:	mul	r1, r8, lr
   16300:	add	r2, r0, r2, lsl #1
   16304:	cmp	r1, r2
   16308:	bls	16330 <__assert_fail@plt+0x55f0>
   1630c:	sub	r3, ip, r5
   16310:	sub	fp, fp, r3
   16314:	sub	r1, r1, lr
   16318:	add	fp, fp, fp, lsl #2
   1631c:	sub	r3, r8, #1
   16320:	add	fp, r0, fp, lsl #1
   16324:	cmp	fp, r1
   16328:	subcc	r8, r8, #2
   1632c:	movcs	r8, r3
   16330:	cmp	r8, #0
   16334:	beq	162a4 <__assert_fail@plt+0x5564>
   16338:	ldr	r5, [sp, #24]
   1633c:	mov	r1, #0
   16340:	mov	r3, r5
   16344:	mov	r0, r6
   16348:	strb	r1, [r3], #1
   1634c:	mov	r2, r8
   16350:	mov	r1, r7
   16354:	bl	1492c <__assert_fail@plt+0x3bec>
   16358:	ldr	r3, [sp, #32]
   1635c:	add	r0, r5, r7
   16360:	cmp	r3, #0
   16364:	beq	163ac <__assert_fail@plt+0x566c>
   16368:	ldr	r3, [sp, #32]
   1636c:	add	fp, r7, r9
   16370:	mov	ip, fp
   16374:	sub	lr, r0, r3
   16378:	mov	r1, #0
   1637c:	ldrb	r3, [ip, #-1]!
   16380:	ldrb	r2, [r0], #-1
   16384:	sub	r3, r3, r2
   16388:	subs	r3, r3, r1
   1638c:	addmi	r3, r3, #10
   16390:	mov	r1, #0
   16394:	movmi	r1, #1
   16398:	cmp	r0, lr
   1639c:	strb	r3, [ip]
   163a0:	bne	1637c <__assert_fail@plt+0x563c>
   163a4:	cmp	r1, #1
   163a8:	beq	165d8 <__assert_fail@plt+0x5898>
   163ac:	uxtb	r8, r8
   163b0:	b	162a4 <__assert_fail@plt+0x5564>
   163b4:	mov	r1, r8
   163b8:	mov	r0, #1
   163bc:	bl	14d34 <__assert_fail@plt+0x3ff4>
   163c0:	add	r2, r8, #1
   163c4:	mov	r1, #0
   163c8:	mov	r5, r0
   163cc:	ldr	r0, [r0, #24]
   163d0:	bl	10cb0 <memset@plt>
   163d4:	mov	r0, r4
   163d8:	bl	10c08 <malloc@plt>
   163dc:	subs	r3, r0, #0
   163e0:	str	r3, [sp, #24]
   163e4:	bne	163ec <__assert_fail@plt+0x56ac>
   163e8:	bl	145cc <__assert_fail@plt+0x388c>
   163ec:	ldr	r2, [sp, #16]
   163f0:	ldr	r3, [sp, #4]
   163f4:	ldr	r1, [r2]
   163f8:	ldr	r2, [pc, #624]	; 16670 <__assert_fail@plt+0x5930>
   163fc:	ldr	r3, [r3]
   16400:	ldr	r2, [r2]
   16404:	subs	r3, r3, r1
   16408:	movne	r3, #1
   1640c:	cmp	r2, r5
   16410:	str	r3, [r5]
   16414:	ldr	r3, [r5, #24]
   16418:	beq	16454 <__assert_fail@plt+0x5714>
   1641c:	ldmib	r5, {r1, r2}
   16420:	add	r2, r2, r1
   16424:	cmp	r2, #0
   16428:	ble	16658 <__assert_fail@plt+0x5918>
   1642c:	ldrb	r0, [r3]
   16430:	add	r1, r3, #1
   16434:	cmp	r0, #0
   16438:	beq	1644c <__assert_fail@plt+0x570c>
   1643c:	b	164a8 <__assert_fail@plt+0x5768>
   16440:	ldrb	r0, [r1], #1
   16444:	cmp	r0, #0
   16448:	bne	16468 <__assert_fail@plt+0x5728>
   1644c:	subs	r2, r2, #1
   16450:	bne	16440 <__assert_fail@plt+0x5700>
   16454:	mov	r2, #0
   16458:	str	r2, [r5]
   1645c:	ldrb	r2, [r3]
   16460:	cmp	r2, #0
   16464:	bne	164a8 <__assert_fail@plt+0x5768>
   16468:	ldr	r0, [r5, #4]
   1646c:	cmp	r0, #1
   16470:	ble	164a8 <__assert_fail@plt+0x5768>
   16474:	sub	r2, r0, #1
   16478:	add	r0, r3, r0
   1647c:	add	r3, r3, #1
   16480:	b	1648c <__assert_fail@plt+0x574c>
   16484:	cmp	r0, r3
   16488:	beq	164a8 <__assert_fail@plt+0x5768>
   1648c:	str	r3, [r5, #24]
   16490:	str	r2, [r5, #4]
   16494:	ldrb	r1, [r3]
   16498:	sub	r2, r2, #1
   1649c:	add	r3, r3, #1
   164a0:	cmp	r1, #0
   164a4:	beq	16484 <__assert_fail@plt+0x5744>
   164a8:	ldr	r4, [sp, #28]
   164ac:	mov	r0, r4
   164b0:	bl	1523c <__assert_fail@plt+0x44fc>
   164b4:	ldr	r0, [sp, #24]
   164b8:	str	r5, [r4]
   164bc:	bl	10b78 <free@plt>
   164c0:	ldr	r0, [sp, #8]
   164c4:	bl	10b78 <free@plt>
   164c8:	ldr	r0, [sp, #20]
   164cc:	bl	10b78 <free@plt>
   164d0:	mov	r0, #0
   164d4:	add	sp, sp, #44	; 0x2c
   164d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164dc:	ldr	r5, [sp, #36]	; 0x24
   164e0:	b	163ec <__assert_fail@plt+0x56ac>
   164e4:	ldr	r3, [sp, #4]
   164e8:	ldr	r0, [r3, #4]
   164ec:	b	16090 <__assert_fail@plt+0x5350>
   164f0:	ldrb	r3, [lr]
   164f4:	cmp	r3, #1
   164f8:	movne	r6, #1
   164fc:	bne	160d8 <__assert_fail@plt+0x5398>
   16500:	mov	r1, r8
   16504:	bl	14d34 <__assert_fail@plt+0x3ff4>
   16508:	ldr	r6, [sp, #4]
   1650c:	ldr	r4, [sp, #16]
   16510:	ldr	r3, [r6]
   16514:	ldr	r1, [r4]
   16518:	ldr	r2, [r6, #4]
   1651c:	subs	r3, r3, r1
   16520:	movne	r3, #1
   16524:	mov	r1, #0
   16528:	mov	r5, r0
   1652c:	ldr	r0, [r0, #24]
   16530:	str	r3, [r5]
   16534:	add	r0, r0, r2
   16538:	mov	r2, r8
   1653c:	bl	10cb0 <memset@plt>
   16540:	ldr	r3, [r6, #4]
   16544:	ldr	r2, [r6, #8]
   16548:	ldr	r1, [r6, #24]
   1654c:	cmp	r8, r2
   16550:	addle	r2, r3, r8
   16554:	addgt	r2, r3, r2
   16558:	ldr	r0, [r5, #24]
   1655c:	bl	10b90 <memcpy@plt>
   16560:	ldr	r9, [sp, #28]
   16564:	mov	r0, r9
   16568:	bl	1523c <__assert_fail@plt+0x44fc>
   1656c:	mov	r3, r4
   16570:	ldmib	r4, {r4, ip}
   16574:	ldr	lr, [r3, #24]
   16578:	ldr	r0, [r6, #4]
   1657c:	add	r7, r4, ip
   16580:	str	r5, [r9]
   16584:	b	16090 <__assert_fail@plt+0x5350>
   16588:	bl	145cc <__assert_fail@plt+0x388c>
   1658c:	ldr	r3, [sp, #4]
   16590:	ldr	r2, [sp, #16]
   16594:	ldr	r5, [r3, #4]
   16598:	ldr	r3, [r3, #8]
   1659c:	ldr	r6, [r2, #4]
   165a0:	add	r5, r5, r3
   165a4:	ldr	r3, [sp, #12]
   165a8:	add	r7, r5, #2
   165ac:	add	r7, r7, r3
   165b0:	b	16120 <__assert_fail@plt+0x53e0>
   165b4:	bl	145cc <__assert_fail@plt+0x388c>
   165b8:	b	16164 <__assert_fail@plt+0x5424>
   165bc:	mov	r7, r4
   165c0:	add	fp, r8, r9
   165c4:	cmp	fp, r7
   165c8:	ldr	r6, [sp, #20]
   165cc:	mov	r4, r5
   165d0:	bcs	161c0 <__assert_fail@plt+0x5480>
   165d4:	b	163b4 <__assert_fail@plt+0x5674>
   165d8:	sub	r8, r8, #1
   165dc:	sub	r1, r7, #1
   165e0:	cmp	r7, #0
   165e4:	uxtb	r8, r8
   165e8:	add	r1, r6, r1
   165ec:	beq	162a4 <__assert_fail@plt+0x5564>
   165f0:	sub	ip, r6, #1
   165f4:	mov	r0, #0
   165f8:	ldrb	r3, [fp, #-1]!
   165fc:	ldrb	r2, [r1], #-1
   16600:	add	r3, r3, r2
   16604:	add	r3, r3, r0
   16608:	cmp	r3, #9
   1660c:	subhi	r3, r3, #10
   16610:	mov	r0, #0
   16614:	movhi	r0, #1
   16618:	cmp	r1, ip
   1661c:	strb	r3, [fp]
   16620:	bne	165f8 <__assert_fail@plt+0x58b8>
   16624:	cmp	r0, #1
   16628:	bne	162a4 <__assert_fail@plt+0x5564>
   1662c:	ldrb	r1, [r9, #-1]
   16630:	ldr	r3, [pc, #60]	; 16674 <__assert_fail@plt+0x5934>
   16634:	add	r1, r1, #1
   16638:	umull	r2, r3, r1, r3
   1663c:	lsr	r3, r3, #3
   16640:	add	r3, r3, r3, lsl #2
   16644:	sub	r1, r1, r3, lsl #1
   16648:	strb	r1, [r9, #-1]
   1664c:	b	162a4 <__assert_fail@plt+0x5564>
   16650:	mov	r4, ip
   16654:	b	160dc <__assert_fail@plt+0x539c>
   16658:	beq	16454 <__assert_fail@plt+0x5714>
   1665c:	b	1645c <__assert_fail@plt+0x571c>
   16660:	mvn	r0, #0
   16664:	bx	lr
   16668:	bl	145cc <__assert_fail@plt+0x388c>
   1666c:	b	1620c <__assert_fail@plt+0x54cc>
   16670:	andeq	r9, r2, r0, lsl #9
   16674:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16678:	ldr	ip, [pc, #344]	; 167d8 <__assert_fail@plt+0x5a98>
   1667c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16680:	mov	r4, r1
   16684:	ldr	r7, [pc, #336]	; 167dc <__assert_fail@plt+0x5a9c>
   16688:	ldr	ip, [ip]
   1668c:	sub	sp, sp, #12
   16690:	ldr	r1, [r7]
   16694:	cmp	r4, ip
   16698:	mov	r8, r3
   1669c:	str	r1, [sp, #4]
   166a0:	ldr	r3, [sp, #48]	; 0x30
   166a4:	beq	166ec <__assert_fail@plt+0x59ac>
   166a8:	mov	r5, r2
   166ac:	ldmib	r4, {r2, lr}
   166b0:	mov	r6, r0
   166b4:	ldr	r1, [r4, #24]
   166b8:	add	r2, lr, r2
   166bc:	cmp	r2, #0
   166c0:	ble	166f4 <__assert_fail@plt+0x59b4>
   166c4:	ldrb	r0, [r1]
   166c8:	add	r1, r1, #1
   166cc:	cmp	r0, #0
   166d0:	beq	166e4 <__assert_fail@plt+0x59a4>
   166d4:	b	166f8 <__assert_fail@plt+0x59b8>
   166d8:	ldrb	r0, [r1], #1
   166dc:	cmp	r0, #0
   166e0:	bne	166f8 <__assert_fail@plt+0x59b8>
   166e4:	subs	r2, r2, #1
   166e8:	bne	166d8 <__assert_fail@plt+0x5998>
   166ec:	mvn	r0, #0
   166f0:	b	16784 <__assert_fail@plt+0x5a44>
   166f4:	beq	166ec <__assert_fail@plt+0x59ac>
   166f8:	ldr	r2, [ip, #12]
   166fc:	ldr	sl, [r6, #8]
   16700:	add	r9, sp, #8
   16704:	add	lr, r3, lr
   16708:	add	r2, r2, #1
   1670c:	cmp	lr, sl
   16710:	str	r2, [ip, #12]
   16714:	str	ip, [r9, #-8]!
   16718:	mov	r1, r4
   1671c:	mov	r2, r9
   16720:	mov	r0, r6
   16724:	movge	sl, lr
   16728:	bl	16004 <__assert_fail@plt+0x52c4>
   1672c:	cmp	r5, #0
   16730:	beq	1679c <__assert_fail@plt+0x5a5c>
   16734:	ldr	fp, [sp]
   16738:	mov	r1, r4
   1673c:	mov	r0, fp
   16740:	ldr	r2, [fp, #12]
   16744:	mov	r3, sl
   16748:	add	r2, r2, #1
   1674c:	str	r2, [fp, #12]
   16750:	mov	r2, r9
   16754:	bl	15e88 <__assert_fail@plt+0x5148>
   16758:	mov	r3, sl
   1675c:	mov	r2, r8
   16760:	ldr	r1, [sp]
   16764:	mov	r0, r6
   16768:	bl	1545c <__assert_fail@plt+0x471c>
   1676c:	mov	r0, r9
   16770:	bl	1523c <__assert_fail@plt+0x44fc>
   16774:	mov	r0, r5
   16778:	bl	1523c <__assert_fail@plt+0x44fc>
   1677c:	mov	r0, #0
   16780:	str	fp, [r5]
   16784:	ldr	r2, [sp, #4]
   16788:	ldr	r3, [r7]
   1678c:	cmp	r2, r3
   16790:	bne	167d4 <__assert_fail@plt+0x5a94>
   16794:	add	sp, sp, #12
   16798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1679c:	mov	r1, r4
   167a0:	mov	r3, sl
   167a4:	mov	r2, r9
   167a8:	ldr	r0, [sp]
   167ac:	bl	15e88 <__assert_fail@plt+0x5148>
   167b0:	mov	r3, sl
   167b4:	mov	r2, r8
   167b8:	mov	r0, r6
   167bc:	ldr	r1, [sp]
   167c0:	bl	1545c <__assert_fail@plt+0x471c>
   167c4:	mov	r0, r9
   167c8:	bl	1523c <__assert_fail@plt+0x44fc>
   167cc:	mov	r0, r5
   167d0:	b	16784 <__assert_fail@plt+0x5a44>
   167d4:	bl	10bb4 <__stack_chk_fail@plt>
   167d8:	andeq	r9, r2, r0, lsl #9
   167dc:	andeq	r8, r2, r0, lsr lr
   167e0:	push	{lr}		; (str lr, [sp, #-4]!)
   167e4:	sub	sp, sp, #12
   167e8:	str	r3, [sp]
   167ec:	mov	r3, r2
   167f0:	mov	r2, #0
   167f4:	bl	16678 <__assert_fail@plt+0x5938>
   167f8:	add	sp, sp, #12
   167fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16804:	mov	r6, r2
   16808:	ldr	r4, [pc, #692]	; 16ac4 <__assert_fail@plt+0x5d84>
   1680c:	ldr	r2, [pc, #692]	; 16ac8 <__assert_fail@plt+0x5d88>
   16810:	sub	sp, sp, #44	; 0x2c
   16814:	ldr	ip, [r4]
   16818:	ldr	r2, [r2]
   1681c:	cmp	r6, ip
   16820:	str	r3, [sp, #12]
   16824:	str	r2, [sp, #36]	; 0x24
   16828:	ldr	r8, [sp, #80]	; 0x50
   1682c:	beq	16870 <__assert_fail@plt+0x5b30>
   16830:	mov	r5, r0
   16834:	ldmib	r6, {r0, r3}
   16838:	ldr	r2, [r6, #24]
   1683c:	add	r3, r3, r0
   16840:	cmp	r3, #0
   16844:	ble	16878 <__assert_fail@plt+0x5b38>
   16848:	ldrb	r0, [r2]
   1684c:	add	r2, r2, #1
   16850:	cmp	r0, #0
   16854:	beq	16868 <__assert_fail@plt+0x5b28>
   16858:	b	1687c <__assert_fail@plt+0x5b3c>
   1685c:	ldrb	r0, [r2], #1
   16860:	cmp	r0, #0
   16864:	bne	1687c <__assert_fail@plt+0x5b3c>
   16868:	subs	r3, r3, #1
   1686c:	bne	1685c <__assert_fail@plt+0x5b1c>
   16870:	mvn	r0, #0
   16874:	b	16988 <__assert_fail@plt+0x5c48>
   16878:	beq	16870 <__assert_fail@plt+0x5b30>
   1687c:	ldr	r3, [r1]
   16880:	cmp	r3, #1
   16884:	beq	16870 <__assert_fail@plt+0x5b30>
   16888:	ldr	r3, [r5, #12]
   1688c:	ldr	r7, [pc, #568]	; 16acc <__assert_fail@plt+0x5d8c>
   16890:	add	r3, r3, #1
   16894:	str	r3, [r5, #12]
   16898:	ldr	r2, [r7]
   1689c:	ldr	r3, [r1, #12]
   168a0:	ldr	r0, [r5, #8]
   168a4:	add	r3, r3, #1
   168a8:	str	r3, [r1, #12]
   168ac:	ldr	r3, [r2, #12]
   168b0:	cmp	r0, #0
   168b4:	add	r3, r3, #1
   168b8:	str	r3, [r2, #12]
   168bc:	ldr	r3, [ip, #12]
   168c0:	str	r5, [sp, #20]
   168c4:	add	r3, r3, #1
   168c8:	str	r1, [sp, #24]
   168cc:	str	ip, [sp, #28]
   168d0:	str	r2, [sp, #32]
   168d4:	str	r3, [ip, #12]
   168d8:	bne	16ab0 <__assert_fail@plt+0x5d70>
   168dc:	ldr	r3, [r1, #8]
   168e0:	cmp	r3, #0
   168e4:	addeq	r9, sp, #24
   168e8:	bne	16a8c <__assert_fail@plt+0x5d4c>
   168ec:	ldr	r3, [r6, #8]
   168f0:	cmp	r3, #0
   168f4:	bne	16a80 <__assert_fail@plt+0x5d40>
   168f8:	ldr	r7, [r5, #8]
   168fc:	ldr	r0, [sp, #24]
   16900:	ldr	r3, [r4]
   16904:	cmp	r8, r7
   16908:	movge	r7, r8
   1690c:	cmp	r0, r3
   16910:	add	r5, sp, #20
   16914:	ldrne	fp, [pc, #436]	; 16ad0 <__assert_fail@plt+0x5d90>
   16918:	movne	sl, #0
   1691c:	beq	16960 <__assert_fail@plt+0x5c20>
   16920:	ldr	r3, [r0, #4]
   16924:	ldr	r1, [r0, #8]
   16928:	ldr	r2, [r0, #24]
   1692c:	add	r3, r3, r1
   16930:	cmp	r3, #0
   16934:	ble	169a4 <__assert_fail@plt+0x5c64>
   16938:	ldrb	r1, [r2]
   1693c:	add	r2, r2, #1
   16940:	cmp	r1, #0
   16944:	beq	16958 <__assert_fail@plt+0x5c18>
   16948:	b	169a8 <__assert_fail@plt+0x5c68>
   1694c:	ldrb	r1, [r2], #1
   16950:	cmp	r1, #0
   16954:	bne	169a8 <__assert_fail@plt+0x5c68>
   16958:	subs	r3, r3, #1
   1695c:	bne	1694c <__assert_fail@plt+0x5c0c>
   16960:	mov	r0, r5
   16964:	bl	1523c <__assert_fail@plt+0x44fc>
   16968:	mov	r0, r9
   1696c:	bl	1523c <__assert_fail@plt+0x44fc>
   16970:	ldr	r4, [sp, #12]
   16974:	mov	r0, r4
   16978:	bl	1523c <__assert_fail@plt+0x44fc>
   1697c:	ldr	r3, [sp, #32]
   16980:	mov	r0, #0
   16984:	str	r3, [r4]
   16988:	ldr	r3, [pc, #312]	; 16ac8 <__assert_fail@plt+0x5d88>
   1698c:	ldr	r2, [sp, #36]	; 0x24
   16990:	ldr	r3, [r3]
   16994:	cmp	r2, r3
   16998:	bne	16ac0 <__assert_fail@plt+0x5d80>
   1699c:	add	sp, sp, #44	; 0x2c
   169a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169a4:	beq	16960 <__assert_fail@plt+0x5c20>
   169a8:	ldr	r1, [fp]
   169ac:	add	r3, sp, #28
   169b0:	mov	r2, r9
   169b4:	str	sl, [sp]
   169b8:	bl	16678 <__assert_fail@plt+0x5938>
   169bc:	ldr	r2, [sp, #28]
   169c0:	ldr	r3, [r4]
   169c4:	cmp	r2, r3
   169c8:	beq	16a0c <__assert_fail@plt+0x5ccc>
   169cc:	ldr	r3, [r2, #4]
   169d0:	ldr	r1, [r2, #8]
   169d4:	ldr	r2, [r2, #24]
   169d8:	add	r3, r3, r1
   169dc:	cmp	r3, #0
   169e0:	ble	16a4c <__assert_fail@plt+0x5d0c>
   169e4:	ldrb	r1, [r2]
   169e8:	add	r2, r2, #1
   169ec:	cmp	r1, #0
   169f0:	beq	16a04 <__assert_fail@plt+0x5cc4>
   169f4:	b	16a50 <__assert_fail@plt+0x5d10>
   169f8:	ldrb	r1, [r2], #1
   169fc:	cmp	r1, #0
   16a00:	bne	16a50 <__assert_fail@plt+0x5d10>
   16a04:	subs	r3, r3, #1
   16a08:	bne	169f8 <__assert_fail@plt+0x5cb8>
   16a0c:	ldr	r1, [sp, #20]
   16a10:	mov	r3, r7
   16a14:	mov	r0, r1
   16a18:	mov	r2, r5
   16a1c:	bl	15e88 <__assert_fail@plt+0x5148>
   16a20:	mov	r3, r5
   16a24:	ldr	r0, [sp, #20]
   16a28:	str	r8, [sp]
   16a2c:	mov	r2, #0
   16a30:	mov	r1, r6
   16a34:	bl	16678 <__assert_fail@plt+0x5938>
   16a38:	ldr	r0, [sp, #24]
   16a3c:	ldr	r3, [r4]
   16a40:	cmp	r0, r3
   16a44:	bne	16920 <__assert_fail@plt+0x5be0>
   16a48:	b	16960 <__assert_fail@plt+0x5c20>
   16a4c:	beq	16a0c <__assert_fail@plt+0x5ccc>
   16a50:	add	r2, sp, #32
   16a54:	mov	r3, r7
   16a58:	ldr	r1, [sp, #20]
   16a5c:	ldr	r0, [sp, #32]
   16a60:	bl	15e88 <__assert_fail@plt+0x5148>
   16a64:	ldr	r0, [sp, #32]
   16a68:	add	r3, sp, #32
   16a6c:	str	r8, [sp]
   16a70:	mov	r2, #0
   16a74:	mov	r1, r6
   16a78:	bl	16678 <__assert_fail@plt+0x5938>
   16a7c:	b	16a0c <__assert_fail@plt+0x5ccc>
   16a80:	ldr	r0, [pc, #76]	; 16ad4 <__assert_fail@plt+0x5d94>
   16a84:	bl	14664 <__assert_fail@plt+0x3924>
   16a88:	b	168f8 <__assert_fail@plt+0x5bb8>
   16a8c:	ldr	r0, [pc, #68]	; 16ad8 <__assert_fail@plt+0x5d98>
   16a90:	add	r9, sp, #24
   16a94:	bl	14664 <__assert_fail@plt+0x3924>
   16a98:	ldr	r1, [r7]
   16a9c:	mov	r2, r9
   16aa0:	mov	r3, #0
   16aa4:	ldr	r0, [sp, #24]
   16aa8:	bl	16004 <__assert_fail@plt+0x52c4>
   16aac:	b	168ec <__assert_fail@plt+0x5bac>
   16ab0:	ldr	r0, [pc, #36]	; 16adc <__assert_fail@plt+0x5d9c>
   16ab4:	bl	14664 <__assert_fail@plt+0x3924>
   16ab8:	ldr	r1, [sp, #24]
   16abc:	b	168dc <__assert_fail@plt+0x5b9c>
   16ac0:	bl	10bb4 <__stack_chk_fail@plt>
   16ac4:	andeq	r9, r2, r0, lsl #9
   16ac8:	andeq	r8, r2, r0, lsr lr
   16acc:	andeq	r9, r2, r8, ror r4
   16ad0:	andeq	r9, r2, ip, ror r4
   16ad4:	andeq	r8, r1, r0, lsl #16
   16ad8:	andeq	r8, r1, r4, ror #15
   16adc:	andeq	r8, r1, ip, asr #15
   16ae0:	push	{r4, r5, r6, r7, lr}
   16ae4:	cmp	r2, #0
   16ae8:	ldr	r7, [pc, #160]	; 16b90 <__assert_fail@plt+0x5e50>
   16aec:	sub	sp, sp, #60	; 0x3c
   16af0:	mov	r5, r0
   16af4:	ldr	r2, [r7]
   16af8:	mov	r4, r1
   16afc:	mov	r6, r3
   16b00:	str	r2, [sp, #52]	; 0x34
   16b04:	beq	16b10 <__assert_fail@plt+0x5dd0>
   16b08:	mov	r0, #32
   16b0c:	blx	r3
   16b10:	ldr	r2, [pc, #124]	; 16b94 <__assert_fail@plt+0x5e54>
   16b14:	mov	r3, #40	; 0x28
   16b18:	mov	r1, r3
   16b1c:	stm	sp, {r2, r5}
   16b20:	add	r0, sp, #12
   16b24:	mov	r2, #1
   16b28:	bl	10d34 <__snprintf_chk@plt>
   16b2c:	add	r0, sp, #12
   16b30:	bl	10c74 <strlen@plt>
   16b34:	cmp	r0, r4
   16b38:	mov	r5, r0
   16b3c:	bge	16b54 <__assert_fail@plt+0x5e14>
   16b40:	sub	r4, r4, #1
   16b44:	mov	r0, #48	; 0x30
   16b48:	blx	r6
   16b4c:	cmp	r5, r4
   16b50:	bne	16b40 <__assert_fail@plt+0x5e00>
   16b54:	cmp	r5, #0
   16b58:	beq	16b74 <__assert_fail@plt+0x5e34>
   16b5c:	add	r4, sp, #12
   16b60:	add	r5, r4, r5
   16b64:	ldrb	r0, [r4], #1
   16b68:	blx	r6
   16b6c:	cmp	r5, r4
   16b70:	bne	16b64 <__assert_fail@plt+0x5e24>
   16b74:	ldr	r2, [sp, #52]	; 0x34
   16b78:	ldr	r3, [r7]
   16b7c:	cmp	r2, r3
   16b80:	bne	16b8c <__assert_fail@plt+0x5e4c>
   16b84:	add	sp, sp, #60	; 0x3c
   16b88:	pop	{r4, r5, r6, r7, pc}
   16b8c:	bl	10bb4 <__stack_chk_fail@plt>
   16b90:	andeq	r8, r2, r0, lsr lr
   16b94:	andeq	r8, r1, ip, lsl r8
   16b98:	ldr	r3, [r0, #4]
   16b9c:	push	{lr}		; (str lr, [sp, #-4]!)
   16ba0:	cmp	r3, #0
   16ba4:	mov	lr, r0
   16ba8:	ldr	r2, [r0, #24]
   16bac:	movle	r0, #0
   16bb0:	ble	16bf0 <__assert_fail@plt+0x5eb0>
   16bb4:	ldr	ip, [pc, #68]	; 16c00 <__assert_fail@plt+0x5ec0>
   16bb8:	mov	r0, #0
   16bbc:	ldrb	r1, [r2], #1
   16bc0:	add	r0, r0, r0, lsl #2
   16bc4:	sub	r3, r3, #1
   16bc8:	add	r0, r1, r0, lsl #1
   16bcc:	cmp	r3, #0
   16bd0:	movgt	r1, #1
   16bd4:	movle	r1, #0
   16bd8:	cmp	r0, ip
   16bdc:	movgt	r1, #0
   16be0:	cmp	r1, #0
   16be4:	bne	16bbc <__assert_fail@plt+0x5e7c>
   16be8:	cmp	r3, #0
   16bec:	movgt	r0, #0
   16bf0:	ldr	r3, [lr]
   16bf4:	cmp	r3, #0
   16bf8:	rsbne	r0, r0, #0
   16bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16c00:	stcleq	12, cr12, [ip], {204}	; 0xcc
   16c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c08:	mov	r5, r1
   16c0c:	ldr	sl, [pc, #468]	; 16de8 <__assert_fail@plt+0x60a8>
   16c10:	ldr	ip, [r1, #8]
   16c14:	sub	sp, sp, #28
   16c18:	mov	r1, r0
   16c1c:	ldr	r0, [sl]
   16c20:	cmp	ip, #0
   16c24:	mov	r9, r2
   16c28:	mov	r7, r3
   16c2c:	str	r0, [sp, #20]
   16c30:	bne	16dd0 <__assert_fail@plt+0x6090>
   16c34:	mov	r0, r5
   16c38:	str	r1, [sp, #4]
   16c3c:	bl	16b98 <__assert_fail@plt+0x5e58>
   16c40:	ldr	r1, [sp, #4]
   16c44:	subs	r4, r0, #0
   16c48:	bne	16ca8 <__assert_fail@plt+0x5f68>
   16c4c:	ldr	r3, [r5, #4]
   16c50:	cmp	r3, #1
   16c54:	bgt	16c68 <__assert_fail@plt+0x5f28>
   16c58:	ldr	r3, [r5, #24]
   16c5c:	ldrb	r3, [r3]
   16c60:	cmp	r3, #0
   16c64:	beq	16c70 <__assert_fail@plt+0x5f30>
   16c68:	ldr	r0, [pc, #380]	; 16dec <__assert_fail@plt+0x60ac>
   16c6c:	bl	145d0 <__assert_fail@plt+0x3890>
   16c70:	mov	r0, r9
   16c74:	bl	1523c <__assert_fail@plt+0x44fc>
   16c78:	ldr	r3, [pc, #368]	; 16df0 <__assert_fail@plt+0x60b0>
   16c7c:	ldr	r3, [r3]
   16c80:	ldr	r2, [r3, #12]
   16c84:	add	r2, r2, #1
   16c88:	str	r2, [r3, #12]
   16c8c:	str	r3, [r9]
   16c90:	ldr	r2, [sp, #20]
   16c94:	ldr	r3, [sl]
   16c98:	cmp	r2, r3
   16c9c:	bne	16de4 <__assert_fail@plt+0x60a4>
   16ca0:	add	sp, sp, #28
   16ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ca8:	ldr	r5, [r1, #8]
   16cac:	blt	16da4 <__assert_fail@plt+0x6064>
   16cb0:	mul	r3, r4, r5
   16cb4:	cmp	r5, r7
   16cb8:	movge	r7, r5
   16cbc:	cmp	r3, r7
   16cc0:	movcc	r7, r3
   16cc4:	mov	fp, #0
   16cc8:	ldr	r3, [r1, #12]
   16ccc:	tst	r4, #1
   16cd0:	add	r3, r3, #1
   16cd4:	add	r6, sp, #16
   16cd8:	str	r1, [sp, #16]
   16cdc:	str	r3, [r1, #12]
   16ce0:	bne	16d0c <__assert_fail@plt+0x5fcc>
   16ce4:	lsl	r5, r5, #1
   16ce8:	mov	r0, r1
   16cec:	lsr	r4, r4, #1
   16cf0:	mov	r3, r5
   16cf4:	mov	r2, r6
   16cf8:	bl	15e88 <__assert_fail@plt+0x5148>
   16cfc:	tst	r4, #1
   16d00:	ldr	r1, [sp, #16]
   16d04:	beq	16ce4 <__assert_fail@plt+0x5fa4>
   16d08:	ldr	r3, [r1, #12]
   16d0c:	add	r3, r3, #1
   16d10:	lsrs	r4, r4, #1
   16d14:	str	r3, [r1, #12]
   16d18:	str	r1, [sp, #12]
   16d1c:	beq	16d6c <__assert_fail@plt+0x602c>
   16d20:	mov	r8, r5
   16d24:	b	16d34 <__assert_fail@plt+0x5ff4>
   16d28:	lsrs	r4, r4, #1
   16d2c:	beq	16d6c <__assert_fail@plt+0x602c>
   16d30:	ldr	r1, [sp, #16]
   16d34:	lsl	r5, r5, #1
   16d38:	mov	r3, r5
   16d3c:	mov	r2, r6
   16d40:	mov	r0, r1
   16d44:	bl	15e88 <__assert_fail@plt+0x5148>
   16d48:	tst	r4, #1
   16d4c:	beq	16d28 <__assert_fail@plt+0x5fe8>
   16d50:	add	r8, r8, r5
   16d54:	mov	r3, r8
   16d58:	add	r2, sp, #12
   16d5c:	ldrd	r0, [sp, #12]
   16d60:	bl	15e88 <__assert_fail@plt+0x5148>
   16d64:	lsrs	r4, r4, #1
   16d68:	bne	16d30 <__assert_fail@plt+0x5ff0>
   16d6c:	cmp	fp, #0
   16d70:	beq	16db0 <__assert_fail@plt+0x6070>
   16d74:	ldr	r1, [pc, #116]	; 16df0 <__assert_fail@plt+0x60b0>
   16d78:	add	r4, sp, #24
   16d7c:	mov	r3, r7
   16d80:	ldr	r0, [r1]
   16d84:	ldr	r1, [r4, #-12]!
   16d88:	mov	r2, r9
   16d8c:	bl	16004 <__assert_fail@plt+0x52c4>
   16d90:	mov	r0, r4
   16d94:	bl	1523c <__assert_fail@plt+0x44fc>
   16d98:	mov	r0, r6
   16d9c:	bl	1523c <__assert_fail@plt+0x44fc>
   16da0:	b	16c90 <__assert_fail@plt+0x5f50>
   16da4:	rsb	r4, r4, #0
   16da8:	mov	fp, #1
   16dac:	b	16cc8 <__assert_fail@plt+0x5f88>
   16db0:	mov	r0, r9
   16db4:	bl	1523c <__assert_fail@plt+0x44fc>
   16db8:	ldr	r3, [sp, #12]
   16dbc:	str	r3, [r9]
   16dc0:	ldr	r2, [r3, #8]
   16dc4:	cmp	r2, r7
   16dc8:	strgt	r7, [r3, #8]
   16dcc:	b	16d98 <__assert_fail@plt+0x6058>
   16dd0:	ldr	r0, [pc, #28]	; 16df4 <__assert_fail@plt+0x60b4>
   16dd4:	str	r1, [sp, #4]
   16dd8:	bl	14664 <__assert_fail@plt+0x3924>
   16ddc:	ldr	r1, [sp, #4]
   16de0:	b	16c34 <__assert_fail@plt+0x5ef4>
   16de4:	bl	10bb4 <__stack_chk_fail@plt>
   16de8:	andeq	r8, r2, r0, lsr lr
   16dec:	andeq	r8, r1, r0, lsr #16
   16df0:	andeq	r9, r2, r8, ror r4
   16df4:	andeq	r8, r1, r4, ror #15
   16df8:	push	{r4, r5, r6, r7, r8, r9, lr}
   16dfc:	sub	sp, sp, #44	; 0x2c
   16e00:	ldr	r7, [pc, #340]	; 16f5c <__assert_fail@plt+0x621c>
   16e04:	cmp	r1, #0
   16e08:	mov	r8, r0
   16e0c:	ldr	r3, [r7]
   16e10:	str	r3, [sp, #36]	; 0x24
   16e14:	blt	16ee8 <__assert_fail@plt+0x61a8>
   16e18:	ldr	r2, [pc, #320]	; 16f60 <__assert_fail@plt+0x6220>
   16e1c:	asr	r5, r1, #31
   16e20:	smull	r2, r3, r1, r2
   16e24:	rsb	r5, r5, r3, asr #2
   16e28:	subs	r6, r5, #0
   16e2c:	add	r5, r5, r5, lsl #2
   16e30:	sub	r1, r1, r5, lsl #1
   16e34:	uxtb	r5, r1
   16e38:	strb	r5, [sp, #4]
   16e3c:	movne	r5, #0
   16e40:	beq	16f38 <__assert_fail@plt+0x61f8>
   16e44:	ldr	lr, [pc, #276]	; 16f60 <__assert_fail@plt+0x6220>
   16e48:	add	r4, sp, #5
   16e4c:	add	ip, sp, #4
   16e50:	smull	r0, r1, r6, lr
   16e54:	asr	r3, r6, #31
   16e58:	rsb	r3, r3, r1, asr #2
   16e5c:	add	r2, r3, r3, lsl #2
   16e60:	sub	r2, r6, r2, lsl #1
   16e64:	subs	r6, r3, #0
   16e68:	strb	r2, [r4], #1
   16e6c:	sub	r9, r4, ip
   16e70:	bne	16e50 <__assert_fail@plt+0x6110>
   16e74:	mov	r0, r8
   16e78:	bl	1523c <__assert_fail@plt+0x44fc>
   16e7c:	mov	r1, r6
   16e80:	mov	r0, r9
   16e84:	bl	14d34 <__assert_fail@plt+0x3ff4>
   16e88:	cmp	r5, #0
   16e8c:	movne	r3, #1
   16e90:	sub	r6, r9, #1
   16e94:	str	r0, [r8]
   16e98:	strne	r3, [r0]
   16e9c:	cmp	r9, #0
   16ea0:	ldr	r3, [r0, #24]
   16ea4:	ble	16ed0 <__assert_fail@plt+0x6190>
   16ea8:	ldrb	r5, [r4, #-1]
   16eac:	add	r6, r6, #2
   16eb0:	sub	r6, r6, r4
   16eb4:	sub	r4, r4, #2
   16eb8:	b	16ec0 <__assert_fail@plt+0x6180>
   16ebc:	ldrb	r5, [r4], #-1
   16ec0:	add	r2, r6, r4
   16ec4:	cmp	r2, #0
   16ec8:	strb	r5, [r3], #1
   16ecc:	bgt	16ebc <__assert_fail@plt+0x617c>
   16ed0:	ldr	r2, [sp, #36]	; 0x24
   16ed4:	ldr	r3, [r7]
   16ed8:	cmp	r2, r3
   16edc:	bne	16f58 <__assert_fail@plt+0x6218>
   16ee0:	add	sp, sp, #44	; 0x2c
   16ee4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ee8:	ldr	r2, [pc, #116]	; 16f64 <__assert_fail@plt+0x6224>
   16eec:	rsb	r1, r1, #0
   16ef0:	umull	r2, r3, r1, r2
   16ef4:	lsr	r3, r3, #3
   16ef8:	subs	r6, r3, #0
   16efc:	add	r3, r3, r3, lsl #2
   16f00:	movne	r5, #1
   16f04:	sub	r1, r1, r3, lsl #1
   16f08:	strb	r1, [sp, #4]
   16f0c:	bne	16e44 <__assert_fail@plt+0x6104>
   16f10:	bl	1523c <__assert_fail@plt+0x44fc>
   16f14:	mov	r1, r6
   16f18:	mov	r0, #1
   16f1c:	bl	14d34 <__assert_fail@plt+0x3ff4>
   16f20:	mov	r2, #1
   16f24:	add	r4, sp, #5
   16f28:	str	r0, [r8]
   16f2c:	ldr	r3, [r0, #24]
   16f30:	str	r2, [r0]
   16f34:	b	16ea8 <__assert_fail@plt+0x6168>
   16f38:	bl	1523c <__assert_fail@plt+0x44fc>
   16f3c:	mov	r1, r6
   16f40:	mov	r0, #1
   16f44:	bl	14d34 <__assert_fail@plt+0x3ff4>
   16f48:	add	r4, sp, #5
   16f4c:	str	r0, [r8]
   16f50:	ldr	r3, [r0, #24]
   16f54:	b	16eac <__assert_fail@plt+0x616c>
   16f58:	bl	10bb4 <__stack_chk_fail@plt>
   16f5c:	andeq	r8, r2, r0, lsr lr
   16f60:	strbtvs	r6, [r6], -r7, ror #12
   16f64:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f6c:	sub	sp, sp, #36	; 0x24
   16f70:	ldr	r8, [pc, #804]	; 1729c <__assert_fail@plt+0x655c>
   16f74:	ldr	r5, [r0]
   16f78:	ldr	fp, [pc, #800]	; 172a0 <__assert_fail@plt+0x6560>
   16f7c:	ldr	r4, [r8]
   16f80:	ldr	r3, [r5]
   16f84:	ldr	r2, [fp]
   16f88:	ldr	r7, [r4]
   16f8c:	mov	r6, r0
   16f90:	cmp	r7, r3
   16f94:	mov	r9, r1
   16f98:	str	r2, [sp, #28]
   16f9c:	beq	170fc <__assert_fail@plt+0x63bc>
   16fa0:	cmp	r3, #0
   16fa4:	bne	170e0 <__assert_fail@plt+0x63a0>
   16fa8:	ldr	r3, [pc, #756]	; 172a4 <__assert_fail@plt+0x6564>
   16fac:	str	r3, [sp, #4]
   16fb0:	ldr	r1, [r3]
   16fb4:	ldr	r3, [r1]
   16fb8:	cmp	r3, #0
   16fbc:	bne	171e8 <__assert_fail@plt+0x64a8>
   16fc0:	mov	r2, #1
   16fc4:	mov	r0, r5
   16fc8:	bl	14be8 <__assert_fail@plt+0x3ea8>
   16fcc:	subs	r7, r0, #0
   16fd0:	beq	17284 <__assert_fail@plt+0x6544>
   16fd4:	ldr	r3, [r4, #12]
   16fd8:	ldr	r2, [r5, #8]
   16fdc:	add	r3, r3, #3
   16fe0:	mov	r1, #1
   16fe4:	cmp	r9, r2
   16fe8:	str	r3, [r4, #12]
   16fec:	mov	r0, r1
   16ff0:	movlt	r9, r2
   16ff4:	str	r4, [sp, #12]
   16ff8:	str	r4, [sp, #16]
   16ffc:	str	r4, [sp, #24]
   17000:	bl	14d34 <__assert_fail@plt+0x3ff4>
   17004:	mov	r2, #5
   17008:	cmp	r7, #0
   1700c:	ldr	r3, [r0, #24]
   17010:	str	r0, [sp, #20]
   17014:	strb	r2, [r3, #1]
   17018:	bge	17228 <__assert_fail@plt+0x64e8>
   1701c:	ldr	r3, [sp, #4]
   17020:	ldr	r1, [r6]
   17024:	add	r5, sp, #32
   17028:	ldr	r3, [r3]
   1702c:	add	r8, sp, #16
   17030:	ldr	r4, [r1, #8]
   17034:	ldr	r2, [r3, #12]
   17038:	str	r3, [r5, #-20]!	; 0xffffffec
   1703c:	add	r2, r2, #1
   17040:	str	r2, [r3, #12]
   17044:	add	r7, r4, #1
   17048:	add	sl, r9, #1
   1704c:	mov	r0, r8
   17050:	bl	1523c <__assert_fail@plt+0x44fc>
   17054:	ldr	r2, [sp, #12]
   17058:	mov	r3, r4
   1705c:	mov	r1, r2
   17060:	ldr	r0, [r2, #12]
   17064:	str	r2, [sp, #16]
   17068:	add	r0, r0, #1
   1706c:	str	r0, [r2, #12]
   17070:	mov	r2, r5
   17074:	ldr	r0, [r6]
   17078:	bl	16004 <__assert_fail@plt+0x52c4>
   1707c:	ldrd	r0, [sp, #12]
   17080:	mov	r3, #0
   17084:	mov	r2, r5
   17088:	bl	15da0 <__assert_fail@plt+0x5060>
   1708c:	mov	r3, r4
   17090:	mov	r2, r5
   17094:	ldr	r1, [sp, #20]
   17098:	ldr	r0, [sp, #12]
   1709c:	bl	15e88 <__assert_fail@plt+0x5148>
   170a0:	ldrd	r0, [sp, #12]
   170a4:	mov	r3, r7
   170a8:	add	r2, sp, #24
   170ac:	bl	1545c <__assert_fail@plt+0x471c>
   170b0:	mov	r1, r4
   170b4:	ldr	r0, [sp, #24]
   170b8:	bl	153e0 <__assert_fail@plt+0x46a0>
   170bc:	cmp	r0, #0
   170c0:	beq	1704c <__assert_fail@plt+0x630c>
   170c4:	cmp	r4, r9
   170c8:	bgt	171a0 <__assert_fail@plt+0x6460>
   170cc:	add	r4, r4, r4, lsl #1
   170d0:	cmp	sl, r4
   170d4:	movlt	r4, sl
   170d8:	add	r7, r4, #1
   170dc:	b	1704c <__assert_fail@plt+0x630c>
   170e0:	mov	r0, #0
   170e4:	ldr	r2, [sp, #28]
   170e8:	ldr	r3, [fp]
   170ec:	cmp	r2, r3
   170f0:	bne	17298 <__assert_fail@plt+0x6558>
   170f4:	add	sp, sp, #36	; 0x24
   170f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170fc:	mov	r2, #1
   17100:	mov	r1, r4
   17104:	mov	r0, r5
   17108:	bl	14be8 <__assert_fail@plt+0x3ea8>
   1710c:	cmp	r0, #0
   17110:	blt	170e0 <__assert_fail@plt+0x63a0>
   17114:	bne	1713c <__assert_fail@plt+0x63fc>
   17118:	mov	r0, r6
   1711c:	bl	1523c <__assert_fail@plt+0x44fc>
   17120:	ldr	r3, [r8]
   17124:	ldr	r2, [r3, #12]
   17128:	mov	r0, #1
   1712c:	add	r2, r2, r0
   17130:	str	r2, [r3, #12]
   17134:	str	r3, [r6]
   17138:	b	170e4 <__assert_fail@plt+0x63a4>
   1713c:	ldr	r3, [pc, #352]	; 172a4 <__assert_fail@plt+0x6564>
   17140:	str	r3, [sp, #4]
   17144:	ldr	r1, [r3]
   17148:	ldr	r3, [r1]
   1714c:	cmp	r7, r3
   17150:	beq	16fc0 <__assert_fail@plt+0x6280>
   17154:	ldr	r2, [r5, #8]
   17158:	ldr	r3, [r4, #12]
   1715c:	cmp	r9, r2
   17160:	movlt	r9, r2
   17164:	cmp	r7, #0
   17168:	add	r3, r3, #3
   1716c:	beq	171fc <__assert_fail@plt+0x64bc>
   17170:	mov	r1, #1
   17174:	str	r3, [r4, #12]
   17178:	mov	r0, r1
   1717c:	str	r4, [sp, #12]
   17180:	str	r4, [sp, #16]
   17184:	str	r4, [sp, #24]
   17188:	bl	14d34 <__assert_fail@plt+0x3ff4>
   1718c:	mov	r2, #5
   17190:	ldr	r3, [r0, #24]
   17194:	str	r0, [sp, #20]
   17198:	strb	r2, [r3, #1]
   1719c:	b	1701c <__assert_fail@plt+0x62dc>
   171a0:	mov	r0, r6
   171a4:	bl	1523c <__assert_fail@plt+0x44fc>
   171a8:	ldr	r1, [sp, #4]
   171ac:	mov	r3, r9
   171b0:	mov	r2, r6
   171b4:	ldr	r1, [r1]
   171b8:	ldr	r0, [sp, #12]
   171bc:	bl	16004 <__assert_fail@plt+0x52c4>
   171c0:	mov	r0, r5
   171c4:	bl	1523c <__assert_fail@plt+0x44fc>
   171c8:	mov	r0, r8
   171cc:	bl	1523c <__assert_fail@plt+0x44fc>
   171d0:	add	r0, sp, #20
   171d4:	bl	1523c <__assert_fail@plt+0x44fc>
   171d8:	add	r0, sp, #24
   171dc:	bl	1523c <__assert_fail@plt+0x44fc>
   171e0:	mov	r0, #1
   171e4:	b	170e4 <__assert_fail@plt+0x63a4>
   171e8:	ldr	r2, [r5, #8]
   171ec:	ldr	r3, [r4, #12]
   171f0:	cmp	r9, r2
   171f4:	movlt	r9, r2
   171f8:	add	r3, r3, #3
   171fc:	mov	r1, #1
   17200:	str	r3, [r4, #12]
   17204:	mov	r0, r1
   17208:	str	r4, [sp, #12]
   1720c:	str	r4, [sp, #16]
   17210:	str	r4, [sp, #24]
   17214:	bl	14d34 <__assert_fail@plt+0x3ff4>
   17218:	mov	r2, #5
   1721c:	ldr	r3, [r0, #24]
   17220:	str	r0, [sp, #20]
   17224:	strb	r2, [r3, #1]
   17228:	add	r5, sp, #12
   1722c:	mov	r0, r5
   17230:	mov	r1, #10
   17234:	bl	16df8 <__assert_fail@plt+0x60b8>
   17238:	ldr	r3, [r6]
   1723c:	add	r8, sp, #16
   17240:	mov	r0, r8
   17244:	ldr	r1, [r3, #4]
   17248:	bl	16df8 <__assert_fail@plt+0x60b8>
   1724c:	ldrd	r0, [sp, #16]
   17250:	mov	r2, r8
   17254:	mov	r3, #0
   17258:	bl	15e88 <__assert_fail@plt+0x5148>
   1725c:	ldr	r1, [sp, #16]
   17260:	mov	r3, #0
   17264:	mov	r2, r5
   17268:	str	r3, [r1, #8]
   1726c:	ldr	r0, [sp, #12]
   17270:	bl	16c04 <__assert_fail@plt+0x5ec4>
   17274:	mov	r0, r8
   17278:	bl	1523c <__assert_fail@plt+0x44fc>
   1727c:	mov	r4, #3
   17280:	b	17044 <__assert_fail@plt+0x6304>
   17284:	mov	r0, r6
   17288:	bl	1523c <__assert_fail@plt+0x44fc>
   1728c:	ldr	r3, [sp, #4]
   17290:	ldr	r3, [r3]
   17294:	b	17124 <__assert_fail@plt+0x63e4>
   17298:	bl	10bb4 <__stack_chk_fail@plt>
   1729c:	andeq	r9, r2, r0, lsl #9
   172a0:	andeq	r8, r2, r0, lsr lr
   172a4:	andeq	r9, r2, r8, ror r4
   172a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172ac:	mov	r4, r0
   172b0:	ldr	r8, [pc, #1208]	; 17770 <__assert_fail@plt+0x6a30>
   172b4:	ldr	r0, [r0]
   172b8:	sub	sp, sp, #60	; 0x3c
   172bc:	mov	r9, r1
   172c0:	ldr	r1, [r8]
   172c4:	cmp	r0, #1
   172c8:	mov	r5, r2
   172cc:	mov	r6, r3
   172d0:	str	r1, [sp, #52]	; 0x34
   172d4:	bne	172e0 <__assert_fail@plt+0x65a0>
   172d8:	mov	r0, #45	; 0x2d
   172dc:	blx	r2
   172e0:	ldr	r7, [pc, #1164]	; 17774 <__assert_fail@plt+0x6a34>
   172e4:	ldr	r0, [r7]
   172e8:	cmp	r4, r0
   172ec:	bne	17310 <__assert_fail@plt+0x65d0>
   172f0:	mov	r0, #48	; 0x30
   172f4:	blx	r5
   172f8:	ldr	r2, [sp, #52]	; 0x34
   172fc:	ldr	r3, [r8]
   17300:	cmp	r2, r3
   17304:	bne	17754 <__assert_fail@plt+0x6a14>
   17308:	add	sp, sp, #60	; 0x3c
   1730c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17310:	ldmib	r4, {fp, lr}
   17314:	ldr	sl, [r4, #24]
   17318:	add	ip, fp, lr
   1731c:	cmp	ip, #0
   17320:	ble	1773c <__assert_fail@plt+0x69fc>
   17324:	ldrb	r3, [sl]
   17328:	add	r2, sl, #1
   1732c:	cmp	r3, #0
   17330:	bne	1734c <__assert_fail@plt+0x660c>
   17334:	mov	r3, ip
   17338:	subs	r3, r3, #1
   1733c:	beq	172f0 <__assert_fail@plt+0x65b0>
   17340:	ldrb	r1, [r2], #1
   17344:	cmp	r1, #0
   17348:	beq	17338 <__assert_fail@plt+0x65f8>
   1734c:	cmp	r9, #10
   17350:	beq	1762c <__assert_fail@plt+0x68ec>
   17354:	cmp	r6, #0
   17358:	beq	17374 <__assert_fail@plt+0x6634>
   1735c:	cmp	ip, #0
   17360:	ble	1774c <__assert_fail@plt+0x6a0c>
   17364:	ldrb	r3, [sl]
   17368:	add	sl, sl, #1
   1736c:	cmp	r3, #0
   17370:	beq	175a4 <__assert_fail@plt+0x6864>
   17374:	ldr	r3, [r0, #12]
   17378:	add	fp, sp, #56	; 0x38
   1737c:	add	r3, r3, #1
   17380:	str	r3, [r0, #12]
   17384:	ldr	r3, [pc, #1004]	; 17778 <__assert_fail@plt+0x6a38>
   17388:	str	r0, [fp, #-28]!	; 0xffffffe4
   1738c:	mov	r0, r4
   17390:	ldr	r1, [r3]
   17394:	mov	r2, fp
   17398:	mov	r3, #0
   1739c:	bl	16004 <__assert_fail@plt+0x52c4>
   173a0:	ldr	ip, [r7]
   173a4:	add	r2, sp, #32
   173a8:	mov	r3, #0
   173ac:	ldr	r1, [ip, #12]
   173b0:	mov	r0, r4
   173b4:	add	r1, r1, #3
   173b8:	str	r1, [ip, #12]
   173bc:	ldr	r1, [sp, #28]
   173c0:	str	ip, [sp, #32]
   173c4:	str	ip, [sp, #40]	; 0x28
   173c8:	str	ip, [sp, #36]	; 0x24
   173cc:	bl	1545c <__assert_fail@plt+0x471c>
   173d0:	ldrd	r2, [sp, #28]
   173d4:	mov	sl, #0
   173d8:	add	r0, sp, #36	; 0x24
   173dc:	str	sl, [r2]
   173e0:	mov	r1, r9
   173e4:	str	sl, [r3]
   173e8:	bl	16df8 <__assert_fail@plt+0x60b8>
   173ec:	ldr	r3, [r7]
   173f0:	add	r0, sp, #56	; 0x38
   173f4:	sub	r1, r9, #1
   173f8:	ldr	r2, [r3, #12]
   173fc:	str	r3, [r0, #-8]!
   17400:	add	r2, r2, #1
   17404:	str	r2, [r3, #12]
   17408:	str	r0, [sp, #16]
   1740c:	bl	16df8 <__assert_fail@plt+0x60b8>
   17410:	ldr	r3, [r7]
   17414:	ldr	r0, [sp, #28]
   17418:	cmp	r3, r0
   1741c:	add	r3, sp, #40	; 0x28
   17420:	str	r3, [sp, #12]
   17424:	beq	174a0 <__assert_fail@plt+0x6760>
   17428:	ldr	r3, [r0, #4]
   1742c:	ldr	r1, [r0, #8]
   17430:	ldr	r2, [r0, #24]
   17434:	add	r3, r3, r1
   17438:	cmp	r3, #0
   1743c:	ble	175bc <__assert_fail@plt+0x687c>
   17440:	ldrb	r1, [r2]
   17444:	add	r2, r2, #1
   17448:	cmp	r1, #0
   1744c:	beq	17460 <__assert_fail@plt+0x6720>
   17450:	b	175c0 <__assert_fail@plt+0x6880>
   17454:	ldrb	r1, [r2], #1
   17458:	cmp	r1, #0
   1745c:	bne	175c0 <__assert_fail@plt+0x6880>
   17460:	subs	r3, r3, #1
   17464:	bne	17454 <__assert_fail@plt+0x6714>
   17468:	cmp	sl, #0
   1746c:	beq	174a0 <__assert_fail@plt+0x6760>
   17470:	mov	r6, sl
   17474:	ldr	sl, [pc, #768]	; 1777c <__assert_fail@plt+0x6a3c>
   17478:	cmp	r9, #16
   1747c:	ldm	r6, {r0, r7}
   17480:	bgt	17724 <__assert_fail@plt+0x69e4>
   17484:	add	r0, sl, r0
   17488:	ldrb	r0, [r0, #20]
   1748c:	blx	r5
   17490:	mov	r0, r6
   17494:	bl	10b78 <free@plt>
   17498:	subs	r6, r7, #0
   1749c:	bne	17478 <__assert_fail@plt+0x6738>
   174a0:	ldr	r3, [r4, #8]
   174a4:	cmp	r3, #0
   174a8:	ble	1756c <__assert_fail@plt+0x682c>
   174ac:	mov	r0, #46	; 0x2e
   174b0:	blx	r5
   174b4:	ldr	r3, [pc, #700]	; 17778 <__assert_fail@plt+0x6a38>
   174b8:	ldr	r2, [r3]
   174bc:	ldr	r3, [r4, #8]
   174c0:	str	r2, [sp, #44]	; 0x2c
   174c4:	ldr	r1, [r2, #12]
   174c8:	ldr	r0, [r2, #4]
   174cc:	add	r1, r1, #1
   174d0:	cmp	r0, r3
   174d4:	str	r1, [r2, #12]
   174d8:	addgt	r7, sp, #44	; 0x2c
   174dc:	bgt	17564 <__assert_fail@plt+0x6824>
   174e0:	ldr	sl, [pc, #660]	; 1777c <__assert_fail@plt+0x6a3c>
   174e4:	add	r7, sp, #44	; 0x2c
   174e8:	mov	r2, #0
   174ec:	str	r2, [sp, #20]
   174f0:	add	r2, sp, #32
   174f4:	ldrd	r0, [sp, #32]
   174f8:	bl	15e88 <__assert_fail@plt+0x5148>
   174fc:	ldr	r0, [sp, #32]
   17500:	bl	16b98 <__assert_fail@plt+0x5e58>
   17504:	mov	r1, r0
   17508:	mov	r6, r0
   1750c:	mov	r0, fp
   17510:	bl	16df8 <__assert_fail@plt+0x60b8>
   17514:	mov	r3, #0
   17518:	add	r2, sp, #32
   1751c:	ldr	r1, [sp, #28]
   17520:	ldr	r0, [sp, #32]
   17524:	bl	1545c <__assert_fail@plt+0x471c>
   17528:	cmp	r9, #16
   1752c:	bgt	17700 <__assert_fail@plt+0x69c0>
   17530:	add	r6, sl, r6
   17534:	ldrb	r0, [r6, #20]
   17538:	blx	r5
   1753c:	mov	r3, #0
   17540:	mov	r2, r7
   17544:	ldr	r1, [sp, #36]	; 0x24
   17548:	ldr	r0, [sp, #44]	; 0x2c
   1754c:	bl	15e88 <__assert_fail@plt+0x5148>
   17550:	ldr	r2, [sp, #44]	; 0x2c
   17554:	ldr	r3, [r4, #8]
   17558:	ldr	r2, [r2, #4]
   1755c:	cmp	r2, r3
   17560:	ble	174f0 <__assert_fail@plt+0x67b0>
   17564:	mov	r0, r7
   17568:	bl	1523c <__assert_fail@plt+0x44fc>
   1756c:	mov	r0, fp
   17570:	bl	1523c <__assert_fail@plt+0x44fc>
   17574:	add	r0, sp, #32
   17578:	bl	1523c <__assert_fail@plt+0x44fc>
   1757c:	add	r0, sp, #36	; 0x24
   17580:	bl	1523c <__assert_fail@plt+0x44fc>
   17584:	ldr	r0, [sp, #12]
   17588:	bl	1523c <__assert_fail@plt+0x44fc>
   1758c:	ldr	r0, [sp, #16]
   17590:	bl	1523c <__assert_fail@plt+0x44fc>
   17594:	b	172f8 <__assert_fail@plt+0x65b8>
   17598:	ldrb	r3, [sl], #1
   1759c:	cmp	r3, #0
   175a0:	bne	17374 <__assert_fail@plt+0x6634>
   175a4:	subs	ip, ip, #1
   175a8:	bne	17598 <__assert_fail@plt+0x6858>
   175ac:	mov	r0, #48	; 0x30
   175b0:	blx	r5
   175b4:	ldr	r0, [r7]
   175b8:	b	17374 <__assert_fail@plt+0x6634>
   175bc:	beq	17468 <__assert_fail@plt+0x6728>
   175c0:	mov	r3, #0
   175c4:	ldr	r1, [sp, #36]	; 0x24
   175c8:	str	r3, [sp]
   175cc:	mov	r2, #0
   175d0:	ldr	r3, [sp, #12]
   175d4:	bl	16678 <__assert_fail@plt+0x5938>
   175d8:	mov	r0, #8
   175dc:	bl	10c08 <malloc@plt>
   175e0:	subs	r6, r0, #0
   175e4:	beq	17624 <__assert_fail@plt+0x68e4>
   175e8:	ldr	r0, [sp, #40]	; 0x28
   175ec:	bl	16b98 <__assert_fail@plt+0x5e58>
   175f0:	str	sl, [r6, #4]
   175f4:	mov	r3, #0
   175f8:	mov	r2, fp
   175fc:	ldr	r1, [sp, #36]	; 0x24
   17600:	mov	sl, r6
   17604:	str	r0, [r6]
   17608:	ldr	r0, [sp, #28]
   1760c:	bl	16004 <__assert_fail@plt+0x52c4>
   17610:	ldr	r0, [sp, #28]
   17614:	ldr	r3, [r7]
   17618:	cmp	r0, r3
   1761c:	bne	17428 <__assert_fail@plt+0x66e8>
   17620:	b	17474 <__assert_fail@plt+0x6734>
   17624:	bl	145cc <__assert_fail@plt+0x388c>
   17628:	b	175e8 <__assert_fail@plt+0x68a8>
   1762c:	cmp	fp, #1
   17630:	ble	176ac <__assert_fail@plt+0x696c>
   17634:	add	fp, sl, fp
   17638:	ldrb	r0, [sl], #1
   1763c:	add	r0, r0, #48	; 0x30
   17640:	blx	r5
   17644:	cmp	sl, fp
   17648:	bne	17638 <__assert_fail@plt+0x68f8>
   1764c:	cmp	r6, #0
   17650:	beq	17668 <__assert_fail@plt+0x6928>
   17654:	ldr	r3, [r7]
   17658:	cmp	r4, r3
   1765c:	bne	17760 <__assert_fail@plt+0x6a20>
   17660:	mov	r0, #48	; 0x30
   17664:	blx	r5
   17668:	ldr	lr, [r4, #8]
   1766c:	cmp	lr, #0
   17670:	ble	172f8 <__assert_fail@plt+0x65b8>
   17674:	mov	r0, #46	; 0x2e
   17678:	blx	r5
   1767c:	ldr	r3, [r4, #8]
   17680:	cmp	r3, #0
   17684:	ble	172f8 <__assert_fail@plt+0x65b8>
   17688:	mov	r6, fp
   1768c:	ldrb	r0, [r6], #1
   17690:	add	r0, r0, #48	; 0x30
   17694:	blx	r5
   17698:	ldr	r2, [r4, #8]
   1769c:	sub	r3, r6, fp
   176a0:	cmp	r2, r3
   176a4:	bgt	1768c <__assert_fail@plt+0x694c>
   176a8:	b	172f8 <__assert_fail@plt+0x65b8>
   176ac:	ldrb	r3, [sl]
   176b0:	cmp	r3, #0
   176b4:	beq	17744 <__assert_fail@plt+0x6a04>
   176b8:	cmp	fp, #0
   176bc:	movle	fp, sl
   176c0:	bgt	17634 <__assert_fail@plt+0x68f4>
   176c4:	cmp	r6, #0
   176c8:	beq	1766c <__assert_fail@plt+0x692c>
   176cc:	cmp	ip, #0
   176d0:	ble	17758 <__assert_fail@plt+0x6a18>
   176d4:	ldrb	r3, [sl]
   176d8:	add	sl, sl, #1
   176dc:	cmp	r3, #0
   176e0:	beq	176f4 <__assert_fail@plt+0x69b4>
   176e4:	b	1766c <__assert_fail@plt+0x692c>
   176e8:	ldrb	r3, [sl], #1
   176ec:	cmp	r3, #0
   176f0:	bne	1766c <__assert_fail@plt+0x692c>
   176f4:	subs	ip, ip, #1
   176f8:	bne	176e8 <__assert_fail@plt+0x69a8>
   176fc:	b	17660 <__assert_fail@plt+0x6920>
   17700:	ldr	r3, [sp, #48]	; 0x30
   17704:	ldr	r2, [sp, #20]
   17708:	mov	r0, r6
   1770c:	ldr	r1, [r3, #4]
   17710:	mov	r3, r5
   17714:	bl	16ae0 <__assert_fail@plt+0x5da0>
   17718:	mov	r3, #1
   1771c:	str	r3, [sp, #20]
   17720:	b	1753c <__assert_fail@plt+0x67fc>
   17724:	ldr	r2, [sp, #48]	; 0x30
   17728:	mov	r3, r5
   1772c:	ldr	r1, [r2, #4]
   17730:	mov	r2, #1
   17734:	bl	16ae0 <__assert_fail@plt+0x5da0>
   17738:	b	17490 <__assert_fail@plt+0x6750>
   1773c:	bne	1734c <__assert_fail@plt+0x660c>
   17740:	b	172f0 <__assert_fail@plt+0x65b0>
   17744:	add	fp, sl, #1
   17748:	b	176c4 <__assert_fail@plt+0x6984>
   1774c:	beq	175ac <__assert_fail@plt+0x686c>
   17750:	b	17374 <__assert_fail@plt+0x6634>
   17754:	bl	10bb4 <__stack_chk_fail@plt>
   17758:	beq	17660 <__assert_fail@plt+0x6920>
   1775c:	b	1766c <__assert_fail@plt+0x692c>
   17760:	ldmib	r4, {ip, lr}
   17764:	ldr	sl, [r4, #24]
   17768:	add	ip, lr, ip
   1776c:	b	176cc <__assert_fail@plt+0x698c>
   17770:	andeq	r8, r2, r0, lsr lr
   17774:	andeq	r9, r2, r0, lsl #9
   17778:	andeq	r9, r2, r8, ror r4
   1777c:	andeq	r8, r1, ip, ror #14
   17780:	push	{r4, r5, r6, r7, lr}
   17784:	mov	r5, r0
   17788:	ldr	r7, [r0]
   1778c:	ldr	r4, [r0, #8]
   17790:	ldr	r6, [r5, #4]
   17794:	adds	r0, r7, #0
   17798:	movne	r0, #1
   1779c:	cmp	r4, #0
   177a0:	addgt	r3, r4, r6
   177a4:	addgt	r3, r3, #2
   177a8:	addle	r3, r6, #1
   177ac:	sub	sp, sp, #12
   177b0:	add	r0, r3, r0
   177b4:	bl	10c08 <malloc@plt>
   177b8:	cmp	r0, #0
   177bc:	beq	1784c <__assert_fail@plt+0x6b0c>
   177c0:	cmp	r7, #0
   177c4:	movne	r3, #45	; 0x2d
   177c8:	addne	r2, r0, #1
   177cc:	moveq	r2, r0
   177d0:	strbne	r3, [r0]
   177d4:	cmp	r6, #0
   177d8:	ldr	ip, [r5, #24]
   177dc:	movle	lr, r2
   177e0:	ble	17804 <__assert_fail@plt+0x6ac4>
   177e4:	add	lr, r2, r6
   177e8:	mov	r1, ip
   177ec:	ldrb	r3, [r1], #1
   177f0:	add	r3, r3, #48	; 0x30
   177f4:	strb	r3, [r2], #1
   177f8:	cmp	r2, lr
   177fc:	bne	177ec <__assert_fail@plt+0x6aac>
   17800:	add	ip, ip, r6
   17804:	cmp	r4, #0
   17808:	ble	1783c <__assert_fail@plt+0x6afc>
   1780c:	add	r5, lr, #1
   17810:	add	r1, r4, #1
   17814:	mov	r2, r5
   17818:	add	r1, lr, r1
   1781c:	mov	r3, #46	; 0x2e
   17820:	strb	r3, [lr]
   17824:	ldrb	r3, [ip], #1
   17828:	add	r3, r3, #48	; 0x30
   1782c:	strb	r3, [r2], #1
   17830:	cmp	r1, r2
   17834:	bne	17824 <__assert_fail@plt+0x6ae4>
   17838:	add	lr, r5, r4
   1783c:	mov	r3, #0
   17840:	strb	r3, [lr]
   17844:	add	sp, sp, #12
   17848:	pop	{r4, r5, r6, r7, pc}
   1784c:	str	r0, [sp, #4]
   17850:	bl	145cc <__assert_fail@plt+0x388c>
   17854:	ldr	r4, [r5, #8]
   17858:	ldr	r6, [r5, #4]
   1785c:	ldr	r0, [sp, #4]
   17860:	b	177c0 <__assert_fail@plt+0x6a80>
   17864:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17868:	mov	r6, r1
   1786c:	mov	r5, r2
   17870:	mov	r7, r0
   17874:	bl	1523c <__assert_fail@plt+0x44fc>
   17878:	ldrb	r4, [r6]
   1787c:	sub	r3, r4, #43	; 0x2b
   17880:	tst	r3, #253	; 0xfd
   17884:	addeq	r9, r6, #1
   17888:	ldrbeq	r4, [r6, #1]
   1788c:	movne	r9, r6
   17890:	b	17898 <__assert_fail@plt+0x6b58>
   17894:	ldrb	r4, [r9, #1]!
   17898:	cmp	r4, #48	; 0x30
   1789c:	beq	17894 <__assert_fail@plt+0x6b54>
   178a0:	bl	10c5c <__ctype_b_loc@plt>
   178a4:	mov	r2, r9
   178a8:	ldr	r1, [r0]
   178ac:	b	178b4 <__assert_fail@plt+0x6b74>
   178b0:	ldrb	r4, [r2, #1]!
   178b4:	lsl	r3, r4, #1
   178b8:	sub	r8, r2, r9
   178bc:	ldrh	r3, [r1, r3]
   178c0:	ands	r3, r3, #2048	; 0x800
   178c4:	bne	178b0 <__assert_fail@plt+0x6b70>
   178c8:	cmp	r4, #46	; 0x2e
   178cc:	beq	1799c <__assert_fail@plt+0x6c5c>
   178d0:	cmp	r4, #0
   178d4:	bne	17980 <__assert_fail@plt+0x6c40>
   178d8:	cmn	r8, r3
   178dc:	beq	17980 <__assert_fail@plt+0x6c40>
   178e0:	cmp	r5, r3
   178e4:	movge	r5, r3
   178e8:	cmp	r8, #0
   178ec:	moveq	r4, #1
   178f0:	moveq	r8, r4
   178f4:	mov	r1, r5
   178f8:	mov	r0, r8
   178fc:	bl	14d34 <__assert_fail@plt+0x3ff4>
   17900:	str	r0, [r7]
   17904:	ldrb	r3, [r6]
   17908:	cmp	r3, #45	; 0x2d
   1790c:	beq	179d0 <__assert_fail@plt+0x6c90>
   17910:	mov	r3, #0
   17914:	str	r3, [r0]
   17918:	ldrb	r3, [r6]
   1791c:	cmp	r3, #43	; 0x2b
   17920:	ldrbeq	r3, [r6, #1]
   17924:	addeq	r6, r6, #1
   17928:	cmp	r3, #48	; 0x30
   1792c:	bne	1793c <__assert_fail@plt+0x6bfc>
   17930:	ldrb	r3, [r6, #1]!
   17934:	cmp	r3, #48	; 0x30
   17938:	beq	17930 <__assert_fail@plt+0x6bf0>
   1793c:	cmp	r4, #0
   17940:	ldr	r1, [r0, #24]
   17944:	beq	179e4 <__assert_fail@plt+0x6ca4>
   17948:	cmp	r5, #0
   1794c:	mov	r3, #0
   17950:	strb	r3, [r1]
   17954:	add	r8, r1, #1
   17958:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   1795c:	add	r3, r5, #1
   17960:	add	r3, r6, r3
   17964:	add	r6, r6, #1
   17968:	ldrb	r2, [r6], #1
   1796c:	sub	r2, r2, #48	; 0x30
   17970:	cmp	r6, r3
   17974:	strb	r2, [r8], #1
   17978:	bne	17968 <__assert_fail@plt+0x6c28>
   1797c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17980:	ldr	r3, [pc, #136]	; 17a10 <__assert_fail@plt+0x6cd0>
   17984:	ldr	r3, [r3]
   17988:	ldr	r2, [r3, #12]
   1798c:	add	r2, r2, #1
   17990:	str	r2, [r3, #12]
   17994:	str	r3, [r7]
   17998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1799c:	ldrb	r4, [r2, #1]
   179a0:	add	r0, r2, #1
   179a4:	lsl	r3, r4, #1
   179a8:	ldrh	r3, [r1, r3]
   179ac:	ands	r3, r3, #2048	; 0x800
   179b0:	beq	178d0 <__assert_fail@plt+0x6b90>
   179b4:	sub	r3, r0, r2
   179b8:	ldrb	r4, [r0, #1]!
   179bc:	lsl	ip, r4, #1
   179c0:	ldrh	ip, [r1, ip]
   179c4:	tst	ip, #2048	; 0x800
   179c8:	bne	179b4 <__assert_fail@plt+0x6c74>
   179cc:	b	178d0 <__assert_fail@plt+0x6b90>
   179d0:	mov	r3, #1
   179d4:	str	r3, [r0]
   179d8:	add	r6, r6, #1
   179dc:	ldrb	r3, [r6]
   179e0:	b	17928 <__assert_fail@plt+0x6be8>
   179e4:	add	r0, r6, r8
   179e8:	mov	r2, r1
   179ec:	ldrb	r3, [r6], #1
   179f0:	sub	r3, r3, #48	; 0x30
   179f4:	cmp	r6, r0
   179f8:	strb	r3, [r2], #1
   179fc:	bne	179ec <__assert_fail@plt+0x6cac>
   17a00:	cmp	r5, #0
   17a04:	add	r8, r1, r8
   17a08:	bgt	1795c <__assert_fail@plt+0x6c1c>
   17a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a10:	andeq	r9, r2, r0, lsl #9
   17a14:	push	{r4, lr}
   17a18:	bl	10b84 <ferror@plt>
   17a1c:	cmp	r0, #0
   17a20:	popeq	{r4, pc}
   17a24:	ldr	r0, [pc, #8]	; 17a34 <__assert_fail@plt+0x6cf4>
   17a28:	bl	10bcc <perror@plt>
   17a2c:	mov	r0, #1
   17a30:	bl	10c68 <exit@plt>
   17a34:	andeq	r8, r1, ip, lsr r8
   17a38:	push	{r4, lr}
   17a3c:	bl	10b84 <ferror@plt>
   17a40:	cmp	r0, #0
   17a44:	popeq	{r4, pc}
   17a48:	ldr	r0, [pc, #8]	; 17a58 <__assert_fail@plt+0x6d18>
   17a4c:	bl	10bcc <perror@plt>
   17a50:	mov	r0, #1
   17a54:	bl	10c68 <exit@plt>
   17a58:	andeq	r8, r1, ip, asr r8
   17a5c:	subs	r2, r1, #1
   17a60:	bxeq	lr
   17a64:	bcc	17c3c <__assert_fail@plt+0x6efc>
   17a68:	cmp	r0, r1
   17a6c:	bls	17c20 <__assert_fail@plt+0x6ee0>
   17a70:	tst	r1, r2
   17a74:	beq	17c2c <__assert_fail@plt+0x6eec>
   17a78:	clz	r3, r0
   17a7c:	clz	r2, r1
   17a80:	sub	r3, r2, r3
   17a84:	rsbs	r3, r3, #31
   17a88:	addne	r3, r3, r3, lsl #1
   17a8c:	mov	r2, #0
   17a90:	addne	pc, pc, r3, lsl #2
   17a94:	nop			; (mov r0, r0)
   17a98:	cmp	r0, r1, lsl #31
   17a9c:	adc	r2, r2, r2
   17aa0:	subcs	r0, r0, r1, lsl #31
   17aa4:	cmp	r0, r1, lsl #30
   17aa8:	adc	r2, r2, r2
   17aac:	subcs	r0, r0, r1, lsl #30
   17ab0:	cmp	r0, r1, lsl #29
   17ab4:	adc	r2, r2, r2
   17ab8:	subcs	r0, r0, r1, lsl #29
   17abc:	cmp	r0, r1, lsl #28
   17ac0:	adc	r2, r2, r2
   17ac4:	subcs	r0, r0, r1, lsl #28
   17ac8:	cmp	r0, r1, lsl #27
   17acc:	adc	r2, r2, r2
   17ad0:	subcs	r0, r0, r1, lsl #27
   17ad4:	cmp	r0, r1, lsl #26
   17ad8:	adc	r2, r2, r2
   17adc:	subcs	r0, r0, r1, lsl #26
   17ae0:	cmp	r0, r1, lsl #25
   17ae4:	adc	r2, r2, r2
   17ae8:	subcs	r0, r0, r1, lsl #25
   17aec:	cmp	r0, r1, lsl #24
   17af0:	adc	r2, r2, r2
   17af4:	subcs	r0, r0, r1, lsl #24
   17af8:	cmp	r0, r1, lsl #23
   17afc:	adc	r2, r2, r2
   17b00:	subcs	r0, r0, r1, lsl #23
   17b04:	cmp	r0, r1, lsl #22
   17b08:	adc	r2, r2, r2
   17b0c:	subcs	r0, r0, r1, lsl #22
   17b10:	cmp	r0, r1, lsl #21
   17b14:	adc	r2, r2, r2
   17b18:	subcs	r0, r0, r1, lsl #21
   17b1c:	cmp	r0, r1, lsl #20
   17b20:	adc	r2, r2, r2
   17b24:	subcs	r0, r0, r1, lsl #20
   17b28:	cmp	r0, r1, lsl #19
   17b2c:	adc	r2, r2, r2
   17b30:	subcs	r0, r0, r1, lsl #19
   17b34:	cmp	r0, r1, lsl #18
   17b38:	adc	r2, r2, r2
   17b3c:	subcs	r0, r0, r1, lsl #18
   17b40:	cmp	r0, r1, lsl #17
   17b44:	adc	r2, r2, r2
   17b48:	subcs	r0, r0, r1, lsl #17
   17b4c:	cmp	r0, r1, lsl #16
   17b50:	adc	r2, r2, r2
   17b54:	subcs	r0, r0, r1, lsl #16
   17b58:	cmp	r0, r1, lsl #15
   17b5c:	adc	r2, r2, r2
   17b60:	subcs	r0, r0, r1, lsl #15
   17b64:	cmp	r0, r1, lsl #14
   17b68:	adc	r2, r2, r2
   17b6c:	subcs	r0, r0, r1, lsl #14
   17b70:	cmp	r0, r1, lsl #13
   17b74:	adc	r2, r2, r2
   17b78:	subcs	r0, r0, r1, lsl #13
   17b7c:	cmp	r0, r1, lsl #12
   17b80:	adc	r2, r2, r2
   17b84:	subcs	r0, r0, r1, lsl #12
   17b88:	cmp	r0, r1, lsl #11
   17b8c:	adc	r2, r2, r2
   17b90:	subcs	r0, r0, r1, lsl #11
   17b94:	cmp	r0, r1, lsl #10
   17b98:	adc	r2, r2, r2
   17b9c:	subcs	r0, r0, r1, lsl #10
   17ba0:	cmp	r0, r1, lsl #9
   17ba4:	adc	r2, r2, r2
   17ba8:	subcs	r0, r0, r1, lsl #9
   17bac:	cmp	r0, r1, lsl #8
   17bb0:	adc	r2, r2, r2
   17bb4:	subcs	r0, r0, r1, lsl #8
   17bb8:	cmp	r0, r1, lsl #7
   17bbc:	adc	r2, r2, r2
   17bc0:	subcs	r0, r0, r1, lsl #7
   17bc4:	cmp	r0, r1, lsl #6
   17bc8:	adc	r2, r2, r2
   17bcc:	subcs	r0, r0, r1, lsl #6
   17bd0:	cmp	r0, r1, lsl #5
   17bd4:	adc	r2, r2, r2
   17bd8:	subcs	r0, r0, r1, lsl #5
   17bdc:	cmp	r0, r1, lsl #4
   17be0:	adc	r2, r2, r2
   17be4:	subcs	r0, r0, r1, lsl #4
   17be8:	cmp	r0, r1, lsl #3
   17bec:	adc	r2, r2, r2
   17bf0:	subcs	r0, r0, r1, lsl #3
   17bf4:	cmp	r0, r1, lsl #2
   17bf8:	adc	r2, r2, r2
   17bfc:	subcs	r0, r0, r1, lsl #2
   17c00:	cmp	r0, r1, lsl #1
   17c04:	adc	r2, r2, r2
   17c08:	subcs	r0, r0, r1, lsl #1
   17c0c:	cmp	r0, r1
   17c10:	adc	r2, r2, r2
   17c14:	subcs	r0, r0, r1
   17c18:	mov	r0, r2
   17c1c:	bx	lr
   17c20:	moveq	r0, #1
   17c24:	movne	r0, #0
   17c28:	bx	lr
   17c2c:	clz	r2, r1
   17c30:	rsb	r2, r2, #31
   17c34:	lsr	r0, r0, r2
   17c38:	bx	lr
   17c3c:	cmp	r0, #0
   17c40:	mvnne	r0, #0
   17c44:	b	17ea8 <__assert_fail@plt+0x7168>
   17c48:	cmp	r1, #0
   17c4c:	beq	17c3c <__assert_fail@plt+0x6efc>
   17c50:	push	{r0, r1, lr}
   17c54:	bl	17a5c <__assert_fail@plt+0x6d1c>
   17c58:	pop	{r1, r2, lr}
   17c5c:	mul	r3, r2, r0
   17c60:	sub	r1, r1, r3
   17c64:	bx	lr
   17c68:	cmp	r1, #0
   17c6c:	beq	17e78 <__assert_fail@plt+0x7138>
   17c70:	eor	ip, r0, r1
   17c74:	rsbmi	r1, r1, #0
   17c78:	subs	r2, r1, #1
   17c7c:	beq	17e44 <__assert_fail@plt+0x7104>
   17c80:	movs	r3, r0
   17c84:	rsbmi	r3, r0, #0
   17c88:	cmp	r3, r1
   17c8c:	bls	17e50 <__assert_fail@plt+0x7110>
   17c90:	tst	r1, r2
   17c94:	beq	17e60 <__assert_fail@plt+0x7120>
   17c98:	clz	r2, r3
   17c9c:	clz	r0, r1
   17ca0:	sub	r2, r0, r2
   17ca4:	rsbs	r2, r2, #31
   17ca8:	addne	r2, r2, r2, lsl #1
   17cac:	mov	r0, #0
   17cb0:	addne	pc, pc, r2, lsl #2
   17cb4:	nop			; (mov r0, r0)
   17cb8:	cmp	r3, r1, lsl #31
   17cbc:	adc	r0, r0, r0
   17cc0:	subcs	r3, r3, r1, lsl #31
   17cc4:	cmp	r3, r1, lsl #30
   17cc8:	adc	r0, r0, r0
   17ccc:	subcs	r3, r3, r1, lsl #30
   17cd0:	cmp	r3, r1, lsl #29
   17cd4:	adc	r0, r0, r0
   17cd8:	subcs	r3, r3, r1, lsl #29
   17cdc:	cmp	r3, r1, lsl #28
   17ce0:	adc	r0, r0, r0
   17ce4:	subcs	r3, r3, r1, lsl #28
   17ce8:	cmp	r3, r1, lsl #27
   17cec:	adc	r0, r0, r0
   17cf0:	subcs	r3, r3, r1, lsl #27
   17cf4:	cmp	r3, r1, lsl #26
   17cf8:	adc	r0, r0, r0
   17cfc:	subcs	r3, r3, r1, lsl #26
   17d00:	cmp	r3, r1, lsl #25
   17d04:	adc	r0, r0, r0
   17d08:	subcs	r3, r3, r1, lsl #25
   17d0c:	cmp	r3, r1, lsl #24
   17d10:	adc	r0, r0, r0
   17d14:	subcs	r3, r3, r1, lsl #24
   17d18:	cmp	r3, r1, lsl #23
   17d1c:	adc	r0, r0, r0
   17d20:	subcs	r3, r3, r1, lsl #23
   17d24:	cmp	r3, r1, lsl #22
   17d28:	adc	r0, r0, r0
   17d2c:	subcs	r3, r3, r1, lsl #22
   17d30:	cmp	r3, r1, lsl #21
   17d34:	adc	r0, r0, r0
   17d38:	subcs	r3, r3, r1, lsl #21
   17d3c:	cmp	r3, r1, lsl #20
   17d40:	adc	r0, r0, r0
   17d44:	subcs	r3, r3, r1, lsl #20
   17d48:	cmp	r3, r1, lsl #19
   17d4c:	adc	r0, r0, r0
   17d50:	subcs	r3, r3, r1, lsl #19
   17d54:	cmp	r3, r1, lsl #18
   17d58:	adc	r0, r0, r0
   17d5c:	subcs	r3, r3, r1, lsl #18
   17d60:	cmp	r3, r1, lsl #17
   17d64:	adc	r0, r0, r0
   17d68:	subcs	r3, r3, r1, lsl #17
   17d6c:	cmp	r3, r1, lsl #16
   17d70:	adc	r0, r0, r0
   17d74:	subcs	r3, r3, r1, lsl #16
   17d78:	cmp	r3, r1, lsl #15
   17d7c:	adc	r0, r0, r0
   17d80:	subcs	r3, r3, r1, lsl #15
   17d84:	cmp	r3, r1, lsl #14
   17d88:	adc	r0, r0, r0
   17d8c:	subcs	r3, r3, r1, lsl #14
   17d90:	cmp	r3, r1, lsl #13
   17d94:	adc	r0, r0, r0
   17d98:	subcs	r3, r3, r1, lsl #13
   17d9c:	cmp	r3, r1, lsl #12
   17da0:	adc	r0, r0, r0
   17da4:	subcs	r3, r3, r1, lsl #12
   17da8:	cmp	r3, r1, lsl #11
   17dac:	adc	r0, r0, r0
   17db0:	subcs	r3, r3, r1, lsl #11
   17db4:	cmp	r3, r1, lsl #10
   17db8:	adc	r0, r0, r0
   17dbc:	subcs	r3, r3, r1, lsl #10
   17dc0:	cmp	r3, r1, lsl #9
   17dc4:	adc	r0, r0, r0
   17dc8:	subcs	r3, r3, r1, lsl #9
   17dcc:	cmp	r3, r1, lsl #8
   17dd0:	adc	r0, r0, r0
   17dd4:	subcs	r3, r3, r1, lsl #8
   17dd8:	cmp	r3, r1, lsl #7
   17ddc:	adc	r0, r0, r0
   17de0:	subcs	r3, r3, r1, lsl #7
   17de4:	cmp	r3, r1, lsl #6
   17de8:	adc	r0, r0, r0
   17dec:	subcs	r3, r3, r1, lsl #6
   17df0:	cmp	r3, r1, lsl #5
   17df4:	adc	r0, r0, r0
   17df8:	subcs	r3, r3, r1, lsl #5
   17dfc:	cmp	r3, r1, lsl #4
   17e00:	adc	r0, r0, r0
   17e04:	subcs	r3, r3, r1, lsl #4
   17e08:	cmp	r3, r1, lsl #3
   17e0c:	adc	r0, r0, r0
   17e10:	subcs	r3, r3, r1, lsl #3
   17e14:	cmp	r3, r1, lsl #2
   17e18:	adc	r0, r0, r0
   17e1c:	subcs	r3, r3, r1, lsl #2
   17e20:	cmp	r3, r1, lsl #1
   17e24:	adc	r0, r0, r0
   17e28:	subcs	r3, r3, r1, lsl #1
   17e2c:	cmp	r3, r1
   17e30:	adc	r0, r0, r0
   17e34:	subcs	r3, r3, r1
   17e38:	cmp	ip, #0
   17e3c:	rsbmi	r0, r0, #0
   17e40:	bx	lr
   17e44:	teq	ip, r0
   17e48:	rsbmi	r0, r0, #0
   17e4c:	bx	lr
   17e50:	movcc	r0, #0
   17e54:	asreq	r0, ip, #31
   17e58:	orreq	r0, r0, #1
   17e5c:	bx	lr
   17e60:	clz	r2, r1
   17e64:	rsb	r2, r2, #31
   17e68:	cmp	ip, #0
   17e6c:	lsr	r0, r3, r2
   17e70:	rsbmi	r0, r0, #0
   17e74:	bx	lr
   17e78:	cmp	r0, #0
   17e7c:	mvngt	r0, #-2147483648	; 0x80000000
   17e80:	movlt	r0, #-2147483648	; 0x80000000
   17e84:	b	17ea8 <__assert_fail@plt+0x7168>
   17e88:	cmp	r1, #0
   17e8c:	beq	17e78 <__assert_fail@plt+0x7138>
   17e90:	push	{r0, r1, lr}
   17e94:	bl	17c70 <__assert_fail@plt+0x6f30>
   17e98:	pop	{r1, r2, lr}
   17e9c:	mul	r3, r2, r0
   17ea0:	sub	r1, r1, r3
   17ea4:	bx	lr
   17ea8:	push	{r1, lr}
   17eac:	mov	r0, #8
   17eb0:	bl	10b24 <raise@plt>
   17eb4:	pop	{r1, pc}
   17eb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17ebc:	mov	r7, r0
   17ec0:	ldr	r6, [pc, #72]	; 17f10 <__assert_fail@plt+0x71d0>
   17ec4:	ldr	r5, [pc, #72]	; 17f14 <__assert_fail@plt+0x71d4>
   17ec8:	add	r6, pc, r6
   17ecc:	add	r5, pc, r5
   17ed0:	sub	r6, r6, r5
   17ed4:	mov	r8, r1
   17ed8:	mov	r9, r2
   17edc:	bl	10b04 <raise@plt-0x20>
   17ee0:	asrs	r6, r6, #2
   17ee4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ee8:	mov	r4, #0
   17eec:	add	r4, r4, #1
   17ef0:	ldr	r3, [r5], #4
   17ef4:	mov	r2, r9
   17ef8:	mov	r1, r8
   17efc:	mov	r0, r7
   17f00:	blx	r3
   17f04:	cmp	r6, r4
   17f08:	bne	17eec <__assert_fail@plt+0x71ac>
   17f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f10:	andeq	r0, r1, ip, asr pc
   17f14:	andeq	r0, r1, r4, asr pc
   17f18:	bx	lr

Disassembly of section .fini:

00017f1c <.fini>:
   17f1c:	push	{r3, lr}
   17f20:	pop	{r3, pc}
