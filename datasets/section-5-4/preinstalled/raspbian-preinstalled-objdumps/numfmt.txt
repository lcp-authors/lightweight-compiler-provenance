
raspbian-preinstalled/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00010ea4 <.init>:
   10ea4:	push	{r3, lr}
   10ea8:	bl	11ee8 <__assert_fail@plt+0xd54>
   10eac:	pop	{r3, pc}

Disassembly of section .plt:

00010eb0 <calloc@plt-0x14>:
   10eb0:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb4:	ldr	lr, [pc, #4]	; 10ec0 <calloc@plt-0x4>
   10eb8:	add	lr, pc, lr
   10ebc:	ldr	pc, [lr, #8]!
   10ec0:	andeq	fp, r1, r0, asr #2

00010ec4 <calloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #110592	; 0x1b000
   10ecc:	ldr	pc, [ip, #320]!	; 0x140

00010ed0 <fputs_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #110592	; 0x1b000
   10ed8:	ldr	pc, [ip, #312]!	; 0x138

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #110592	; 0x1b000
   10ee4:	ldr	pc, [ip, #304]!	; 0x130

00010ee8 <__strncat_chk@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #110592	; 0x1b000
   10ef0:	ldr	pc, [ip, #296]!	; 0x128

00010ef4 <strcmp@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #110592	; 0x1b000
   10efc:	ldr	pc, [ip, #288]!	; 0x120

00010f00 <strtol@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #110592	; 0x1b000
   10f08:	ldr	pc, [ip, #280]!	; 0x118

00010f0c <fflush@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #110592	; 0x1b000
   10f14:	ldr	pc, [ip, #272]!	; 0x110

00010f18 <wcwidth@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #110592	; 0x1b000
   10f20:	ldr	pc, [ip, #264]!	; 0x108

00010f24 <memmove@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #110592	; 0x1b000
   10f2c:	ldr	pc, [ip, #256]!	; 0x100

00010f30 <free@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #110592	; 0x1b000
   10f38:	ldr	pc, [ip, #248]!	; 0xf8

00010f3c <strndup@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #110592	; 0x1b000
   10f44:	ldr	pc, [ip, #240]!	; 0xf0

00010f48 <_exit@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #110592	; 0x1b000
   10f50:	ldr	pc, [ip, #232]!	; 0xe8

00010f54 <memcpy@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #110592	; 0x1b000
   10f5c:	ldr	pc, [ip, #224]!	; 0xe0

00010f60 <__strtoull_internal@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #110592	; 0x1b000
   10f68:	ldr	pc, [ip, #216]!	; 0xd8

00010f6c <mbsinit@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #110592	; 0x1b000
   10f74:	ldr	pc, [ip, #208]!	; 0xd0

00010f78 <memcmp@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #110592	; 0x1b000
   10f80:	ldr	pc, [ip, #200]!	; 0xc8

00010f84 <dcgettext@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #110592	; 0x1b000
   10f8c:	ldr	pc, [ip, #192]!	; 0xc0

00010f90 <__stack_chk_fail@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #110592	; 0x1b000
   10f98:	ldr	pc, [ip, #184]!	; 0xb8

00010f9c <realloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #110592	; 0x1b000
   10fa4:	ldr	pc, [ip, #176]!	; 0xb0

00010fa8 <textdomain@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #110592	; 0x1b000
   10fb0:	ldr	pc, [ip, #168]!	; 0xa8

00010fb4 <iswprint@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #110592	; 0x1b000
   10fbc:	ldr	pc, [ip, #160]!	; 0xa0

00010fc0 <fwrite@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #110592	; 0x1b000
   10fc8:	ldr	pc, [ip, #152]!	; 0x98

00010fcc <lseek64@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #110592	; 0x1b000
   10fd4:	ldr	pc, [ip, #144]!	; 0x90

00010fd8 <__ctype_get_mb_cur_max@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #110592	; 0x1b000
   10fe0:	ldr	pc, [ip, #136]!	; 0x88

00010fe4 <strcpy@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #110592	; 0x1b000
   10fec:	ldr	pc, [ip, #128]!	; 0x80

00010ff0 <__fpending@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #110592	; 0x1b000
   10ff8:	ldr	pc, [ip, #120]!	; 0x78

00010ffc <mbrtowc@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #110592	; 0x1b000
   11004:	ldr	pc, [ip, #112]!	; 0x70

00011008 <wcstombs@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #110592	; 0x1b000
   11010:	ldr	pc, [ip, #104]!	; 0x68

00011014 <error@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #110592	; 0x1b000
   1101c:	ldr	pc, [ip, #96]!	; 0x60

00011020 <malloc@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #110592	; 0x1b000
   11028:	ldr	pc, [ip, #88]!	; 0x58

0001102c <__libc_start_main@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #110592	; 0x1b000
   11034:	ldr	pc, [ip, #80]!	; 0x50

00011038 <__freading@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #110592	; 0x1b000
   11040:	ldr	pc, [ip, #72]!	; 0x48

00011044 <__gmon_start__@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #110592	; 0x1b000
   1104c:	ldr	pc, [ip, #64]!	; 0x40

00011050 <mempcpy@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #110592	; 0x1b000
   11058:	ldr	pc, [ip, #56]!	; 0x38

0001105c <getopt_long@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #110592	; 0x1b000
   11064:	ldr	pc, [ip, #48]!	; 0x30

00011068 <__ctype_b_loc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #110592	; 0x1b000
   11070:	ldr	pc, [ip, #40]!	; 0x28

00011074 <exit@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #110592	; 0x1b000
   1107c:	ldr	pc, [ip, #32]!

00011080 <strlen@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #110592	; 0x1b000
   11088:	ldr	pc, [ip, #24]!

0001108c <strchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #110592	; 0x1b000
   11094:	ldr	pc, [ip, #16]!

00011098 <__errno_location@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #110592	; 0x1b000
   110a0:	ldr	pc, [ip, #8]!

000110a4 <__cxa_atexit@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #110592	; 0x1b000
   110ac:	ldr	pc, [ip, #0]!

000110b0 <memset@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #4088]!	; 0xff8

000110bc <__printf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #4080]!	; 0xff0

000110c8 <fileno@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110d4 <__fprintf_chk@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e0 <fclose@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #4056]!	; 0xfd8

000110ec <fseeko64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #4048]!	; 0xfd0

000110f8 <__overflow@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #4040]!	; 0xfc8

00011104 <setlocale@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #4032]!	; 0xfc0

00011110 <wcswidth@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #4024]!	; 0xfb8

0001111c <strrchr@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #4016]!	; 0xfb0

00011128 <nl_langinfo@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #4008]!	; 0xfa8

00011134 <mbstowcs@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011140 <qsort@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3992]!	; 0xf98

0001114c <bindtextdomain@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3984]!	; 0xf90

00011158 <getdelim@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3976]!	; 0xf88

00011164 <strncmp@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3968]!	; 0xf80

00011170 <abort@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3960]!	; 0xf78

0001117c <__snprintf_chk@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3952]!	; 0xf70

00011188 <strspn@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3944]!	; 0xf68

00011194 <__assert_fail@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3936]!	; 0xf60

Disassembly of section .text:

000111a0 <.text>:
   111a0:	ldr	r3, [pc, #3088]	; 11db8 <__assert_fail@plt+0xc24>
   111a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111a8:	sub	sp, sp, #60	; 0x3c
   111ac:	ldr	r3, [r3]
   111b0:	mov	r7, r0
   111b4:	ldr	r0, [r1]
   111b8:	str	r3, [sp, #52]	; 0x34
   111bc:	mov	r6, r1
   111c0:	bl	14e00 <__assert_fail@plt+0x3c6c>
   111c4:	ldr	r1, [pc, #3056]	; 11dbc <__assert_fail@plt+0xc28>
   111c8:	mov	r0, #6
   111cc:	bl	11104 <setlocale@plt>
   111d0:	ldr	r1, [pc, #3048]	; 11dc0 <__assert_fail@plt+0xc2c>
   111d4:	ldr	r4, [pc, #3048]	; 11dc4 <__assert_fail@plt+0xc30>
   111d8:	str	r0, [sp, #28]
   111dc:	ldr	r0, [pc, #3044]	; 11dc8 <__assert_fail@plt+0xc34>
   111e0:	bl	1114c <bindtextdomain@plt>
   111e4:	ldr	r0, [pc, #3036]	; 11dc8 <__assert_fail@plt+0xc34>
   111e8:	bl	10fa8 <textdomain@plt>
   111ec:	mov	r0, #65536	; 0x10000
   111f0:	bl	11128 <nl_langinfo@plt>
   111f4:	cmp	r0, #0
   111f8:	str	r0, [r4, #4]
   111fc:	beq	112dc <__assert_fail@plt+0x148>
   11200:	ldrb	r3, [r0]
   11204:	cmp	r3, #0
   11208:	beq	112dc <__assert_fail@plt+0x148>
   1120c:	ldr	r0, [r4, #4]
   11210:	bl	11080 <strlen@plt>
   11214:	ldr	r3, [pc, #2992]	; 11dcc <__assert_fail@plt+0xc38>
   11218:	ldr	r9, [pc, #2992]	; 11dd0 <__assert_fail@plt+0xc3c>
   1121c:	ldr	sl, [pc, #2992]	; 11dd4 <__assert_fail@plt+0xc40>
   11220:	ldr	fp, [pc, #2992]	; 11dd8 <__assert_fail@plt+0xc44>
   11224:	add	r8, r3, #180	; 0xb4
   11228:	str	r0, [r4]
   1122c:	ldr	r0, [pc, #2984]	; 11ddc <__assert_fail@plt+0xc48>
   11230:	bl	196c4 <__assert_fail@plt+0x8530>
   11234:	mov	r5, #0
   11238:	str	r5, [sp]
   1123c:	mov	r3, r8
   11240:	mov	r2, r9
   11244:	mov	r1, r6
   11248:	mov	r0, r7
   1124c:	bl	1105c <getopt_long@plt>
   11250:	cmn	r0, #1
   11254:	beq	115a4 <__assert_fail@plt+0x410>
   11258:	cmp	r0, #260	; 0x104
   1125c:	beq	114a0 <__assert_fail@plt+0x30c>
   11260:	ble	11334 <__assert_fail@plt+0x1a0>
   11264:	ldr	r3, [pc, #2932]	; 11de0 <__assert_fail@plt+0xc4c>
   11268:	cmp	r0, r3
   1126c:	beq	11494 <__assert_fail@plt+0x300>
   11270:	bgt	11310 <__assert_fail@plt+0x17c>
   11274:	sub	r3, r3, #3
   11278:	cmp	r0, r3
   1127c:	beq	1154c <__assert_fail@plt+0x3b8>
   11280:	blt	11540 <__assert_fail@plt+0x3ac>
   11284:	add	r3, r3, #1
   11288:	cmp	r0, r3
   1128c:	bne	112e8 <__assert_fail@plt+0x154>
   11290:	ldr	r3, [pc, #2852]	; 11dbc <__assert_fail@plt+0xc28>
   11294:	mov	r1, r5
   11298:	str	r3, [sp]
   1129c:	mov	r2, #10
   112a0:	ldr	r3, [pc, #2876]	; 11de4 <__assert_fail@plt+0xc50>
   112a4:	ldr	r0, [sl]
   112a8:	bl	17870 <__assert_fail@plt+0x66dc>
   112ac:	cmp	r0, #0
   112b0:	bne	11d48 <__assert_fail@plt+0xbb4>
   112b4:	ldr	r2, [r4, #28]
   112b8:	cmp	r2, #0
   112bc:	beq	11d48 <__assert_fail@plt+0xbb4>
   112c0:	bge	11234 <__assert_fail@plt+0xa0>
   112c4:	ldr	r3, [pc, #2844]	; 11de8 <__assert_fail@plt+0xc54>
   112c8:	rsb	r2, r2, #0
   112cc:	mov	r1, #0
   112d0:	str	r2, [r4, #28]
   112d4:	str	r1, [r3, #32]
   112d8:	b	11234 <__assert_fail@plt+0xa0>
   112dc:	ldr	r3, [pc, #2824]	; 11dec <__assert_fail@plt+0xc58>
   112e0:	str	r3, [r4, #4]
   112e4:	b	1120c <__assert_fail@plt+0x78>
   112e8:	cmp	r0, #264	; 0x108
   112ec:	bne	11478 <__assert_fail@plt+0x2e4>
   112f0:	ldr	r3, [pc, #2808]	; 11df0 <__assert_fail@plt+0xc5c>
   112f4:	ldr	r3, [r3]
   112f8:	cmp	r3, #0
   112fc:	bne	11d54 <__assert_fail@plt+0xbc0>
   11300:	mov	r1, #1
   11304:	ldr	r0, [sl]
   11308:	bl	13f3c <__assert_fail@plt+0x2da8>
   1130c:	b	11234 <__assert_fail@plt+0xa0>
   11310:	ldr	r3, [pc, #2780]	; 11df4 <__assert_fail@plt+0xc60>
   11314:	cmp	r0, r3
   11318:	beq	114ec <__assert_fail@plt+0x358>
   1131c:	blt	114dc <__assert_fail@plt+0x348>
   11320:	cmp	r0, #268	; 0x10c
   11324:	bne	11394 <__assert_fail@plt+0x200>
   11328:	ldr	r3, [sl]
   1132c:	str	r3, [r4, #72]	; 0x48
   11330:	b	11234 <__assert_fail@plt+0xa0>
   11334:	cmp	r0, #122	; 0x7a
   11338:	beq	11558 <__assert_fail@plt+0x3c4>
   1133c:	ble	11438 <__assert_fail@plt+0x2a4>
   11340:	ldr	r3, [pc, #2736]	; 11df8 <__assert_fail@plt+0xc64>
   11344:	cmp	r0, r3
   11348:	beq	11480 <__assert_fail@plt+0x2ec>
   1134c:	ble	113f8 <__assert_fail@plt+0x264>
   11350:	ldr	r3, [pc, #2724]	; 11dfc <__assert_fail@plt+0xc68>
   11354:	cmp	r0, r3
   11358:	bne	113d8 <__assert_fail@plt+0x244>
   1135c:	ldr	r2, [fp]
   11360:	ldr	r3, [pc, #2712]	; 11e00 <__assert_fail@plt+0xc6c>
   11364:	mov	r1, #4
   11368:	str	r2, [sp, #4]
   1136c:	str	r1, [sp]
   11370:	add	r2, r3, #16
   11374:	ldr	r1, [sl]
   11378:	ldr	r0, [pc, #2692]	; 11e04 <__assert_fail@plt+0xc70>
   1137c:	bl	14860 <__assert_fail@plt+0x36cc>
   11380:	ldr	r3, [pc, #2628]	; 11dcc <__assert_fail@plt+0xc38>
   11384:	add	r0, r3, r0, lsl #2
   11388:	ldr	r3, [r0, #528]	; 0x210
   1138c:	str	r3, [r4, #44]	; 0x2c
   11390:	b	11234 <__assert_fail@plt+0xa0>
   11394:	add	r3, r3, #2
   11398:	cmp	r0, r3
   1139c:	bne	11478 <__assert_fail@plt+0x2e4>
   113a0:	ldr	r2, [fp]
   113a4:	ldr	r3, [pc, #2652]	; 11e08 <__assert_fail@plt+0xc74>
   113a8:	mov	r1, #4
   113ac:	str	r2, [sp, #4]
   113b0:	str	r1, [sp]
   113b4:	add	r2, r3, #16
   113b8:	ldr	r1, [sl]
   113bc:	ldr	r0, [pc, #2632]	; 11e0c <__assert_fail@plt+0xc78>
   113c0:	bl	14860 <__assert_fail@plt+0x36cc>
   113c4:	ldr	r3, [pc, #2560]	; 11dcc <__assert_fail@plt+0xc38>
   113c8:	add	r0, r3, r0, lsl #2
   113cc:	ldr	r3, [r0, #608]	; 0x260
   113d0:	str	r3, [r4, #36]	; 0x24
   113d4:	b	11234 <__assert_fail@plt+0xa0>
   113d8:	add	r3, r3, #1
   113dc:	cmp	r0, r3
   113e0:	bne	11478 <__assert_fail@plt+0x2e4>
   113e4:	ldr	r0, [sl]
   113e8:	bl	11fa0 <__assert_fail@plt+0xe0c>
   113ec:	ldr	r3, [pc, #2548]	; 11de8 <__assert_fail@plt+0xc54>
   113f0:	strd	r0, [r3, #16]
   113f4:	b	11234 <__assert_fail@plt+0xa0>
   113f8:	cmp	r0, #256	; 0x100
   113fc:	bne	11478 <__assert_fail@plt+0x2e4>
   11400:	ldr	r2, [fp]
   11404:	ldr	r3, [pc, #2564]	; 11e10 <__assert_fail@plt+0xc7c>
   11408:	mov	r1, #4
   1140c:	str	r2, [sp, #4]
   11410:	str	r1, [sp]
   11414:	add	r2, r3, #20
   11418:	ldr	r1, [sl]
   1141c:	ldr	r0, [pc, #2544]	; 11e14 <__assert_fail@plt+0xc80>
   11420:	bl	14860 <__assert_fail@plt+0x36cc>
   11424:	ldr	r3, [pc, #2464]	; 11dcc <__assert_fail@plt+0xc38>
   11428:	add	r0, r3, r0, lsl #2
   1142c:	ldr	r3, [r0, #484]	; 0x1e4
   11430:	str	r3, [r4, #32]
   11434:	b	11234 <__assert_fail@plt+0xa0>
   11438:	cmn	r0, #2
   1143c:	beq	11ce8 <__assert_fail@plt+0xb54>
   11440:	cmp	r0, #100	; 0x64
   11444:	bne	11470 <__assert_fail@plt+0x2dc>
   11448:	ldr	r3, [sl]
   1144c:	ldrb	r2, [r3]
   11450:	cmp	r2, #0
   11454:	beq	11464 <__assert_fail@plt+0x2d0>
   11458:	ldrb	r3, [r3, #1]
   1145c:	cmp	r3, #0
   11460:	bne	11d0c <__assert_fail@plt+0xb78>
   11464:	ldr	r3, [pc, #2428]	; 11de8 <__assert_fail@plt+0xc54>
   11468:	str	r2, [r3, #36]	; 0x24
   1146c:	b	11234 <__assert_fail@plt+0xa0>
   11470:	cmn	r0, #3
   11474:	beq	11564 <__assert_fail@plt+0x3d0>
   11478:	mov	r0, #1
   1147c:	bl	13868 <__assert_fail@plt+0x26d4>
   11480:	ldr	r0, [sl]
   11484:	bl	11fa0 <__assert_fail@plt+0xe0c>
   11488:	ldr	r3, [pc, #2392]	; 11de8 <__assert_fail@plt+0xc54>
   1148c:	strd	r0, [r3, #8]
   11490:	b	11234 <__assert_fail@plt+0xa0>
   11494:	mov	r3, #1
   11498:	strb	r3, [r4, #40]	; 0x28
   1149c:	b	11234 <__assert_fail@plt+0xa0>
   114a0:	mov	r3, #4
   114a4:	ldr	r2, [fp]
   114a8:	str	r3, [sp]
   114ac:	ldr	r3, [pc, #2404]	; 11e18 <__assert_fail@plt+0xc84>
   114b0:	str	r2, [sp, #4]
   114b4:	ldr	r0, [pc, #2400]	; 11e1c <__assert_fail@plt+0xc88>
   114b8:	add	r2, r3, #20
   114bc:	ldr	r1, [sl]
   114c0:	bl	14860 <__assert_fail@plt+0x36cc>
   114c4:	ldr	r2, [pc, #2304]	; 11dcc <__assert_fail@plt+0xc38>
   114c8:	ldr	r3, [pc, #2328]	; 11de8 <__assert_fail@plt+0xc54>
   114cc:	add	r0, r2, r0, lsl #2
   114d0:	ldr	r2, [r0, #564]	; 0x234
   114d4:	str	r2, [r3, #28]
   114d8:	b	11234 <__assert_fail@plt+0xa0>
   114dc:	mov	r3, #1
   114e0:	strb	r3, [r4, #20]
   114e4:	strb	r3, [r4, #40]	; 0x28
   114e8:	b	11234 <__assert_fail@plt+0xa0>
   114ec:	ldr	r0, [sl]
   114f0:	cmp	r0, #0
   114f4:	beq	11594 <__assert_fail@plt+0x400>
   114f8:	ldr	r3, [pc, #2236]	; 11dbc <__assert_fail@plt+0xc28>
   114fc:	mov	r1, r5
   11500:	str	r3, [sp]
   11504:	mov	r2, #10
   11508:	ldr	r3, [pc, #2320]	; 11e20 <__assert_fail@plt+0xc8c>
   1150c:	bl	180bc <__assert_fail@plt+0x6f28>
   11510:	cmp	r0, #0
   11514:	bne	11524 <__assert_fail@plt+0x390>
   11518:	ldrd	r2, [r4, #64]	; 0x40
   1151c:	orrs	r3, r2, r3
   11520:	bne	11234 <__assert_fail@plt+0xa0>
   11524:	ldr	r1, [pc, #2296]	; 11e24 <__assert_fail@plt+0xc90>
   11528:	mov	r2, #5
   1152c:	mov	r0, #0
   11530:	bl	10f84 <dcgettext@plt>
   11534:	mov	r4, r0
   11538:	ldr	r0, [sl]
   1153c:	b	11c7c <__assert_fail@plt+0xae8>
   11540:	ldr	r3, [sl]
   11544:	str	r3, [r4, #16]
   11548:	b	11234 <__assert_fail@plt+0xa0>
   1154c:	mov	r3, #1
   11550:	str	r3, [r4, #48]	; 0x30
   11554:	b	11234 <__assert_fail@plt+0xa0>
   11558:	ldr	r3, [pc, #2184]	; 11de8 <__assert_fail@plt+0xc54>
   1155c:	strb	r5, [r3, #40]	; 0x28
   11560:	b	11234 <__assert_fail@plt+0xa0>
   11564:	ldr	r1, [pc, #2236]	; 11e28 <__assert_fail@plt+0xc94>
   11568:	ldr	r3, [pc, #2236]	; 11e2c <__assert_fail@plt+0xc98>
   1156c:	ldr	r2, [pc, #2236]	; 11e30 <__assert_fail@plt+0xc9c>
   11570:	str	r5, [sp, #4]
   11574:	ldr	r0, [r1]
   11578:	ldr	r3, [r3]
   1157c:	ldr	r1, [pc, #2224]	; 11e34 <__assert_fail@plt+0xca0>
   11580:	str	r2, [sp]
   11584:	ldr	r2, [pc, #2220]	; 11e38 <__assert_fail@plt+0xca4>
   11588:	bl	174d0 <__assert_fail@plt+0x633c>
   1158c:	mov	r0, r5
   11590:	bl	11074 <exit@plt>
   11594:	mov	r2, #1
   11598:	mov	r3, #0
   1159c:	strd	r2, [r4, #64]	; 0x40
   115a0:	b	11234 <__assert_fail@plt+0xa0>
   115a4:	ldr	r3, [r4, #72]	; 0x48
   115a8:	cmp	r3, #0
   115ac:	beq	115c4 <__assert_fail@plt+0x430>
   115b0:	ldr	r3, [r4, #48]	; 0x30
   115b4:	cmp	r3, #0
   115b8:	movne	r2, #5
   115bc:	ldrne	r1, [pc, #2168]	; 11e3c <__assert_fail@plt+0xca8>
   115c0:	bne	11d14 <__assert_fail@plt+0xb80>
   115c4:	ldrb	r3, [r4, #40]	; 0x28
   115c8:	ldr	r2, [sp, #28]
   115cc:	cmp	r2, #0
   115d0:	movne	r3, #0
   115d4:	andeq	r3, r3, #1
   115d8:	cmp	r3, #0
   115dc:	bne	11c94 <__assert_fail@plt+0xb00>
   115e0:	ldrb	r3, [r4, #40]	; 0x28
   115e4:	cmp	r3, #0
   115e8:	beq	11640 <__assert_fail@plt+0x4ac>
   115ec:	ldr	r2, [r4, #32]
   115f0:	ldr	r3, [r4, #44]	; 0x2c
   115f4:	orrs	r3, r2, r3
   115f8:	bne	11640 <__assert_fail@plt+0x4ac>
   115fc:	ldr	r3, [r4, #48]	; 0x30
   11600:	ldr	r5, [r4, #72]	; 0x48
   11604:	cmp	r3, #0
   11608:	bne	11b04 <__assert_fail@plt+0x970>
   1160c:	ldr	r3, [r4, #28]
   11610:	cmp	r3, #0
   11614:	bne	11cd0 <__assert_fail@plt+0xb3c>
   11618:	cmp	r5, #0
   1161c:	bne	1164c <__assert_fail@plt+0x4b8>
   11620:	mov	r2, #5
   11624:	ldr	r1, [pc, #2068]	; 11e40 <__assert_fail@plt+0xcac>
   11628:	mov	r0, r5
   1162c:	bl	10f84 <dcgettext@plt>
   11630:	mov	r1, r5
   11634:	mov	r2, r0
   11638:	mov	r0, r5
   1163c:	bl	11014 <error@plt>
   11640:	ldr	r5, [r4, #72]	; 0x48
   11644:	cmp	r5, #0
   11648:	beq	11768 <__assert_fail@plt+0x5d4>
   1164c:	mov	r3, #0
   11650:	mov	r8, r3
   11654:	str	r3, [sp, #48]	; 0x30
   11658:	b	11670 <__assert_fail@plt+0x4dc>
   1165c:	cmp	r9, #0
   11660:	beq	11cf0 <__assert_fail@plt+0xb5c>
   11664:	mov	r2, #1
   11668:	add	r3, r3, r2
   1166c:	add	r8, r8, #1
   11670:	ldrb	r9, [r5, r3]
   11674:	cmp	r9, #37	; 0x25
   11678:	bne	1165c <__assert_fail@plt+0x4c8>
   1167c:	add	fp, r3, #1
   11680:	ldrb	r2, [r5, fp]
   11684:	cmp	r2, #37	; 0x25
   11688:	bne	11988 <__assert_fail@plt+0x7f4>
   1168c:	mov	r2, #2
   11690:	b	11668 <__assert_fail@plt+0x4d4>
   11694:	cmp	r8, #0
   11698:	beq	11b4c <__assert_fail@plt+0x9b8>
   1169c:	mov	r1, r8
   116a0:	mov	r0, r5
   116a4:	bl	1785c <__assert_fail@plt+0x66c8>
   116a8:	ldrb	r3, [r9]
   116ac:	cmp	r3, #0
   116b0:	str	r0, [r4, #56]	; 0x38
   116b4:	bne	11b4c <__assert_fail@plt+0x9b8>
   116b8:	ldrb	r3, [r4, #20]
   116bc:	cmp	r3, #0
   116c0:	beq	11768 <__assert_fail@plt+0x5d4>
   116c4:	ldr	r3, [pc, #1912]	; 11e44 <__assert_fail@plt+0xcb0>
   116c8:	mov	r1, r5
   116cc:	mov	r0, #0
   116d0:	ldr	fp, [r3]
   116d4:	bl	17054 <__assert_fail@plt+0x5ec0>
   116d8:	ldr	r9, [pc, #1800]	; 11de8 <__assert_fail@plt+0xc54>
   116dc:	ldr	r1, [r4, #56]	; 0x38
   116e0:	ldr	sl, [pc, #1748]	; 11dbc <__assert_fail@plt+0xc28>
   116e4:	cmp	r1, #0
   116e8:	ldr	r2, [pc, #1880]	; 11e48 <__assert_fail@plt+0xcb4>
   116ec:	ldr	ip, [r4, #48]	; 0x30
   116f0:	moveq	r1, sl
   116f4:	ldr	r8, [pc, #1872]	; 11e4c <__assert_fail@plt+0xcb8>
   116f8:	ldr	r5, [pc, #1872]	; 11e50 <__assert_fail@plt+0xcbc>
   116fc:	str	r0, [sp, #32]
   11700:	ldr	r0, [r9, #32]
   11704:	ldr	r9, [r4, #28]
   11708:	cmp	r0, #0
   1170c:	movne	r8, r2
   11710:	ldr	r2, [pc, #1852]	; 11e54 <__assert_fail@plt+0xcc0>
   11714:	cmp	ip, #0
   11718:	mov	r0, #1
   1171c:	moveq	r5, r2
   11720:	bl	17054 <__assert_fail@plt+0x5ec0>
   11724:	ldr	r1, [r4, #60]	; 0x3c
   11728:	cmp	r1, #0
   1172c:	moveq	r1, sl
   11730:	str	r0, [sp, #28]
   11734:	mov	r0, #2
   11738:	bl	17054 <__assert_fail@plt+0x5ec0>
   1173c:	ldr	r2, [sp, #28]
   11740:	str	r8, [sp, #8]
   11744:	str	r2, [sp, #12]
   11748:	str	r5, [sp]
   1174c:	str	r9, [sp, #4]
   11750:	ldr	r3, [sp, #32]
   11754:	ldr	r2, [pc, #1788]	; 11e58 <__assert_fail@plt+0xcc4>
   11758:	mov	r1, #1
   1175c:	str	r0, [sp, #16]
   11760:	mov	r0, fp
   11764:	bl	110d4 <__fprintf_chk@plt>
   11768:	ldr	r3, [r4, #48]	; 0x30
   1176c:	cmp	r3, #0
   11770:	bne	11930 <__assert_fail@plt+0x79c>
   11774:	ldr	r0, [r4, #28]
   11778:	ldr	r3, [r4, #8]
   1177c:	cmp	r0, r3
   11780:	bcs	11928 <__assert_fail@plt+0x794>
   11784:	ldr	r3, [r4, #28]
   11788:	ldr	r2, [r4, #36]	; 0x24
   1178c:	cmp	r3, #0
   11790:	movne	r3, #0
   11794:	ldreq	r9, [pc, #1612]	; 11de8 <__assert_fail@plt+0xc54>
   11798:	ldr	r8, [pc, #1724]	; 11e5c <__assert_fail@plt+0xcc8>
   1179c:	ldreq	r3, [r9, #36]	; 0x24
   117a0:	ldr	r1, [r8]
   117a4:	subeq	r3, r3, #256	; 0x100
   117a8:	clzeq	r3, r3
   117ac:	lsreq	r3, r3, #5
   117b0:	cmp	r2, #0
   117b4:	str	r3, [r4, #24]
   117b8:	ldrne	r9, [pc, #1576]	; 11de8 <__assert_fail@plt+0xc54>
   117bc:	movne	r3, #0
   117c0:	strne	r3, [r9]
   117c4:	cmp	r1, r7
   117c8:	blt	118e4 <__assert_fail@plt+0x750>
   117cc:	ldrd	r2, [r4, #64]	; 0x40
   117d0:	mov	r1, #0
   117d4:	str	r1, [sp, #44]	; 0x2c
   117d8:	subs	r0, r2, #1
   117dc:	str	r0, [r4, #64]	; 0x40
   117e0:	sbc	r0, r3, #0
   117e4:	orrs	r3, r2, r3
   117e8:	ldr	r9, [pc, #1528]	; 11de8 <__assert_fail@plt+0xc54>
   117ec:	add	sl, sp, #48	; 0x30
   117f0:	ldr	r6, [pc, #1640]	; 11e60 <__assert_fail@plt+0xccc>
   117f4:	add	r7, sp, #44	; 0x2c
   117f8:	str	r0, [r4, #68]	; 0x44
   117fc:	str	r1, [sp, #48]	; 0x30
   11800:	ldrne	r5, [pc, #1568]	; 11e28 <__assert_fail@plt+0xc94>
   11804:	bne	11830 <__assert_fail@plt+0x69c>
   11808:	b	1184c <__assert_fail@plt+0x6b8>
   1180c:	ldr	r1, [r5]
   11810:	ldr	r0, [sp, #44]	; 0x2c
   11814:	bl	10ed0 <fputs_unlocked@plt>
   11818:	ldrd	r2, [r4, #64]	; 0x40
   1181c:	subs	r0, r2, #1
   11820:	sbc	r1, r3, #0
   11824:	orrs	r3, r2, r3
   11828:	strd	r0, [r4, #64]	; 0x40
   1182c:	beq	1184c <__assert_fail@plt+0x6b8>
   11830:	ldr	r3, [r6]
   11834:	ldrb	r2, [r9, #40]	; 0x28
   11838:	mov	r1, sl
   1183c:	mov	r0, r7
   11840:	bl	11158 <getdelim@plt>
   11844:	cmp	r0, #0
   11848:	bgt	1180c <__assert_fail@plt+0x678>
   1184c:	mov	r5, #1
   11850:	mov	r8, #0
   11854:	b	11884 <__assert_fail@plt+0x6f0>
   11858:	ldr	r0, [sp, #44]	; 0x2c
   1185c:	sub	r3, r3, #1
   11860:	ldrb	r2, [r9, #40]	; 0x28
   11864:	ldrb	r1, [r0, r3]
   11868:	cmp	r1, r2
   1186c:	strbeq	r8, [r0, r3]
   11870:	moveq	r1, #1
   11874:	movne	r1, #0
   11878:	ldreq	r0, [sp, #44]	; 0x2c
   1187c:	bl	13698 <__assert_fail@plt+0x2504>
   11880:	and	r5, r5, r0
   11884:	ldr	r3, [r6]
   11888:	ldrb	r2, [r9, #40]	; 0x28
   1188c:	mov	r1, sl
   11890:	mov	r0, r7
   11894:	bl	11158 <getdelim@plt>
   11898:	subs	r3, r0, #0
   1189c:	bgt	11858 <__assert_fail@plt+0x6c4>
   118a0:	ldr	r3, [r6]
   118a4:	ldr	r3, [r3]
   118a8:	tst	r3, #32
   118ac:	bne	11b80 <__assert_fail@plt+0x9ec>
   118b0:	ldrb	r3, [r4, #40]	; 0x28
   118b4:	cmp	r3, #0
   118b8:	beq	11ab4 <__assert_fail@plt+0x920>
   118bc:	cmp	r5, #0
   118c0:	beq	11b5c <__assert_fail@plt+0x9c8>
   118c4:	mov	r0, #0
   118c8:	ldr	r3, [pc, #1256]	; 11db8 <__assert_fail@plt+0xc24>
   118cc:	ldr	r2, [sp, #52]	; 0x34
   118d0:	ldr	r3, [r3]
   118d4:	cmp	r2, r3
   118d8:	bne	11db4 <__assert_fail@plt+0xc20>
   118dc:	add	sp, sp, #60	; 0x3c
   118e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118e4:	ldrb	r3, [r4, #40]	; 0x28
   118e8:	cmp	r3, #0
   118ec:	beq	118fc <__assert_fail@plt+0x768>
   118f0:	ldrd	r2, [r4, #64]	; 0x40
   118f4:	orrs	r3, r2, r3
   118f8:	bne	11ad4 <__assert_fail@plt+0x940>
   118fc:	mov	r5, #1
   11900:	ldr	r0, [r6, r1, lsl #2]
   11904:	mov	r1, #1
   11908:	bl	13698 <__assert_fail@plt+0x2504>
   1190c:	ldr	r1, [r8]
   11910:	add	r1, r1, #1
   11914:	cmp	r1, r7
   11918:	str	r1, [r8]
   1191c:	and	r5, r5, r0
   11920:	blt	11900 <__assert_fail@plt+0x76c>
   11924:	b	118b0 <__assert_fail@plt+0x71c>
   11928:	bl	1222c <__assert_fail@plt+0x1098>
   1192c:	b	11784 <__assert_fail@plt+0x5f0>
   11930:	ldr	r3, [r4, #44]	; 0x2c
   11934:	cmp	r3, #0
   11938:	movne	r2, #5
   1193c:	ldrne	r1, [pc, #1312]	; 11e64 <__assert_fail@plt+0xcd0>
   11940:	bne	11d14 <__assert_fail@plt+0xb80>
   11944:	ldrb	r3, [r4, #40]	; 0x28
   11948:	cmp	r3, #0
   1194c:	beq	11774 <__assert_fail@plt+0x5e0>
   11950:	ldr	r0, [pc, #1296]	; 11e68 <__assert_fail@plt+0xcd4>
   11954:	bl	11128 <nl_langinfo@plt>
   11958:	ldrb	r5, [r0]
   1195c:	cmp	r5, #0
   11960:	bne	11774 <__assert_fail@plt+0x5e0>
   11964:	mov	r2, #5
   11968:	ldr	r1, [pc, #1276]	; 11e6c <__assert_fail@plt+0xcd8>
   1196c:	mov	r0, r5
   11970:	bl	10f84 <dcgettext@plt>
   11974:	mov	r1, r5
   11978:	mov	r2, r0
   1197c:	mov	r0, r5
   11980:	bl	11014 <error@plt>
   11984:	b	11774 <__assert_fail@plt+0x5e0>
   11988:	mov	r3, #0
   1198c:	ldr	sl, [pc, #1244]	; 11e70 <__assert_fail@plt+0xcdc>
   11990:	str	r3, [sp, #28]
   11994:	add	r3, r5, fp
   11998:	mov	r0, r3
   1199c:	mov	r1, sl
   119a0:	bl	11188 <strspn@plt>
   119a4:	add	fp, fp, r0
   119a8:	add	r3, r5, fp
   119ac:	ldrb	r2, [r5, fp]
   119b0:	cmp	r2, #39	; 0x27
   119b4:	beq	11a8c <__assert_fail@plt+0x8f8>
   119b8:	cmp	r2, #48	; 0x30
   119bc:	beq	11aa0 <__assert_fail@plt+0x90c>
   119c0:	cmp	r0, #0
   119c4:	bne	11998 <__assert_fail@plt+0x804>
   119c8:	mov	r9, r0
   119cc:	str	r3, [sp, #32]
   119d0:	bl	11098 <__errno_location@plt>
   119d4:	ldr	r3, [sp, #32]
   119d8:	add	sl, sp, #48	; 0x30
   119dc:	mov	r2, #10
   119e0:	mov	r1, sl
   119e4:	str	r3, [sp, #36]	; 0x24
   119e8:	mov	fp, r0
   119ec:	str	r9, [r0]
   119f0:	mov	r0, r3
   119f4:	bl	10f00 <strtol@plt>
   119f8:	ldr	r2, [fp]
   119fc:	ldr	r3, [sp, #36]	; 0x24
   11a00:	cmp	r2, #34	; 0x22
   11a04:	str	r0, [sp, #32]
   11a08:	beq	11d98 <__assert_fail@plt+0xc04>
   11a0c:	ldr	r2, [sp, #48]	; 0x30
   11a10:	ldr	r1, [sp, #32]
   11a14:	cmp	r2, r3
   11a18:	cmpne	r1, #0
   11a1c:	bne	11b10 <__assert_fail@plt+0x97c>
   11a20:	ldrb	r9, [r2]
   11a24:	sub	r2, r2, r5
   11a28:	cmp	r9, #0
   11a2c:	beq	11d7c <__assert_fail@plt+0xbe8>
   11a30:	cmp	r9, #46	; 0x2e
   11a34:	beq	11bf4 <__assert_fail@plt+0xa60>
   11a38:	ldrb	r3, [r5, r2]
   11a3c:	cmp	r3, #102	; 0x66
   11a40:	bne	11d60 <__assert_fail@plt+0xbcc>
   11a44:	add	r1, r2, #1
   11a48:	add	r9, r5, r1
   11a4c:	ldrb	r3, [r5, r1]
   11a50:	cmp	r3, #0
   11a54:	bne	11a68 <__assert_fail@plt+0x8d4>
   11a58:	b	11cdc <__assert_fail@plt+0xb48>
   11a5c:	cmp	r3, #0
   11a60:	mov	r1, r2
   11a64:	beq	11694 <__assert_fail@plt+0x500>
   11a68:	add	r2, r1, #1
   11a6c:	cmp	r3, #37	; 0x25
   11a70:	ldrb	r3, [r5, r2]
   11a74:	bne	11a5c <__assert_fail@plt+0x8c8>
   11a78:	cmp	r3, #37	; 0x25
   11a7c:	bne	11d2c <__assert_fail@plt+0xb98>
   11a80:	add	r2, r1, #2
   11a84:	ldrb	r3, [r5, r2]
   11a88:	b	11a5c <__assert_fail@plt+0x8c8>
   11a8c:	mov	r3, #1
   11a90:	add	fp, fp, #1
   11a94:	str	r3, [r4, #48]	; 0x30
   11a98:	add	r3, r5, fp
   11a9c:	b	11998 <__assert_fail@plt+0x804>
   11aa0:	add	fp, fp, #1
   11aa4:	mov	r2, #1
   11aa8:	add	r3, r5, fp
   11aac:	str	r2, [sp, #28]
   11ab0:	b	11998 <__assert_fail@plt+0x804>
   11ab4:	cmp	r5, #0
   11ab8:	bne	118c4 <__assert_fail@plt+0x730>
   11abc:	ldr	r3, [r4, #36]	; 0x24
   11ac0:	sub	r3, r3, #2
   11ac4:	cmp	r3, #1
   11ac8:	movhi	r0, #2
   11acc:	bls	118c4 <__assert_fail@plt+0x730>
   11ad0:	b	118c8 <__assert_fail@plt+0x734>
   11ad4:	mov	r2, #5
   11ad8:	ldr	r1, [pc, #916]	; 11e74 <__assert_fail@plt+0xce0>
   11adc:	mov	r0, #0
   11ae0:	bl	10f84 <dcgettext@plt>
   11ae4:	mov	r1, #0
   11ae8:	mov	r2, r0
   11aec:	mov	r0, r1
   11af0:	bl	11014 <error@plt>
   11af4:	ldr	r1, [r8]
   11af8:	cmp	r7, r1
   11afc:	ble	118c4 <__assert_fail@plt+0x730>
   11b00:	b	118fc <__assert_fail@plt+0x768>
   11b04:	cmp	r5, #0
   11b08:	bne	1164c <__assert_fail@plt+0x4b8>
   11b0c:	b	11944 <__assert_fail@plt+0x7b0>
   11b10:	ldrb	r3, [r4, #40]	; 0x28
   11b14:	cmp	r3, #0
   11b18:	beq	11bd0 <__assert_fail@plt+0xa3c>
   11b1c:	ldr	r3, [r4, #28]
   11b20:	cmp	r3, #0
   11b24:	beq	11bd0 <__assert_fail@plt+0xa3c>
   11b28:	ldr	r3, [sp, #28]
   11b2c:	eor	r3, r3, #1
   11b30:	cmp	r1, #0
   11b34:	orrle	r3, r3, #1
   11b38:	cmp	r3, #0
   11b3c:	bne	11bac <__assert_fail@plt+0xa18>
   11b40:	ldr	r3, [sp, #32]
   11b44:	str	r3, [r4, #52]	; 0x34
   11b48:	b	11a20 <__assert_fail@plt+0x88c>
   11b4c:	mov	r0, r9
   11b50:	bl	17800 <__assert_fail@plt+0x666c>
   11b54:	str	r0, [r4, #60]	; 0x3c
   11b58:	b	116b8 <__assert_fail@plt+0x524>
   11b5c:	mov	r2, #5
   11b60:	ldr	r1, [pc, #784]	; 11e78 <__assert_fail@plt+0xce4>
   11b64:	mov	r0, r5
   11b68:	bl	10f84 <dcgettext@plt>
   11b6c:	mov	r1, r5
   11b70:	mov	r2, r0
   11b74:	mov	r0, r5
   11b78:	bl	11014 <error@plt>
   11b7c:	b	11abc <__assert_fail@plt+0x928>
   11b80:	bl	11098 <__errno_location@plt>
   11b84:	mov	r2, #5
   11b88:	ldr	r1, [pc, #748]	; 11e7c <__assert_fail@plt+0xce8>
   11b8c:	ldr	r6, [r0]
   11b90:	mov	r0, #0
   11b94:	bl	10f84 <dcgettext@plt>
   11b98:	mov	r1, r6
   11b9c:	mov	r2, r0
   11ba0:	mov	r0, #0
   11ba4:	bl	11014 <error@plt>
   11ba8:	b	118b0 <__assert_fail@plt+0x71c>
   11bac:	mov	r2, #5
   11bb0:	ldr	r1, [pc, #712]	; 11e80 <__assert_fail@plt+0xcec>
   11bb4:	mov	r0, r9
   11bb8:	bl	10f84 <dcgettext@plt>
   11bbc:	mov	r1, r9
   11bc0:	mov	r2, r0
   11bc4:	mov	r0, r9
   11bc8:	bl	11014 <error@plt>
   11bcc:	ldr	r2, [sp, #48]	; 0x30
   11bd0:	ldr	r3, [sp, #32]
   11bd4:	cmp	r3, #0
   11bd8:	blt	11cb8 <__assert_fail@plt+0xb24>
   11bdc:	ldr	r3, [sp, #28]
   11be0:	cmp	r3, #0
   11be4:	bne	11b40 <__assert_fail@plt+0x9ac>
   11be8:	ldr	r3, [sp, #32]
   11bec:	str	r3, [r4, #28]
   11bf0:	b	11a20 <__assert_fail@plt+0x88c>
   11bf4:	add	r3, r2, #1
   11bf8:	mov	r2, r3
   11bfc:	mov	r3, #0
   11c00:	mov	r1, sl
   11c04:	add	r0, r5, r2
   11c08:	str	r3, [fp]
   11c0c:	mov	sl, r2
   11c10:	mov	r2, #10
   11c14:	bl	10f00 <strtol@plt>
   11c18:	ldr	r3, [fp]
   11c1c:	ldr	r9, [pc, #452]	; 11de8 <__assert_fail@plt+0xc54>
   11c20:	sub	r3, r3, #34	; 0x22
   11c24:	clz	r3, r3
   11c28:	lsr	r3, r3, #5
   11c2c:	orrs	r3, r3, r0, lsr #31
   11c30:	str	r0, [r9, #24]
   11c34:	bne	11c64 <__assert_fail@plt+0xad0>
   11c38:	bl	11068 <__ctype_b_loc@plt>
   11c3c:	ldrb	r2, [r5, sl]
   11c40:	lsl	r3, r2, #1
   11c44:	ldr	r1, [r0]
   11c48:	ldrh	r3, [r1, r3]
   11c4c:	cmp	r2, #43	; 0x2b
   11c50:	orreq	r3, r3, #1
   11c54:	tst	r3, #1
   11c58:	ldreq	r2, [sp, #48]	; 0x30
   11c5c:	subeq	r2, r2, r5
   11c60:	beq	11a38 <__assert_fail@plt+0x8a4>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #532]	; 11e84 <__assert_fail@plt+0xcf0>
   11c6c:	mov	r0, #0
   11c70:	bl	10f84 <dcgettext@plt>
   11c74:	mov	r4, r0
   11c78:	mov	r0, r5
   11c7c:	bl	17064 <__assert_fail@plt+0x5ed0>
   11c80:	mov	r2, r4
   11c84:	mov	r1, #0
   11c88:	mov	r3, r0
   11c8c:	mov	r0, #1
   11c90:	bl	11014 <error@plt>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #488]	; 11e88 <__assert_fail@plt+0xcf4>
   11c9c:	mov	r0, #0
   11ca0:	bl	10f84 <dcgettext@plt>
   11ca4:	mov	r1, #0
   11ca8:	mov	r2, r0
   11cac:	mov	r0, r1
   11cb0:	bl	11014 <error@plt>
   11cb4:	b	115e0 <__assert_fail@plt+0x44c>
   11cb8:	ldr	r9, [pc, #296]	; 11de8 <__assert_fail@plt+0xc54>
   11cbc:	rsb	r1, r3, #0
   11cc0:	mov	r3, #0
   11cc4:	str	r1, [r4, #28]
   11cc8:	str	r3, [r9, #32]
   11ccc:	b	11a20 <__assert_fail@plt+0x88c>
   11cd0:	cmp	r5, #0
   11cd4:	bne	1164c <__assert_fail@plt+0x4b8>
   11cd8:	b	11774 <__assert_fail@plt+0x5e0>
   11cdc:	cmp	r8, #0
   11ce0:	beq	116b8 <__assert_fail@plt+0x524>
   11ce4:	b	1169c <__assert_fail@plt+0x508>
   11ce8:	mov	r0, r5
   11cec:	bl	13868 <__assert_fail@plt+0x26d4>
   11cf0:	mov	r2, #5
   11cf4:	ldr	r1, [pc, #400]	; 11e8c <__assert_fail@plt+0xcf8>
   11cf8:	mov	r0, r9
   11cfc:	bl	10f84 <dcgettext@plt>
   11d00:	mov	r4, r0
   11d04:	mov	r0, r5
   11d08:	b	11c7c <__assert_fail@plt+0xae8>
   11d0c:	ldr	r1, [pc, #380]	; 11e90 <__assert_fail@plt+0xcfc>
   11d10:	mov	r2, #5
   11d14:	mov	r0, #0
   11d18:	bl	10f84 <dcgettext@plt>
   11d1c:	mov	r1, #0
   11d20:	mov	r2, r0
   11d24:	mov	r0, #1
   11d28:	bl	11014 <error@plt>
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #348]	; 11e94 <__assert_fail@plt+0xd00>
   11d34:	mov	r0, #0
   11d38:	bl	10f84 <dcgettext@plt>
   11d3c:	mov	r4, r0
   11d40:	mov	r0, r5
   11d44:	b	11c7c <__assert_fail@plt+0xae8>
   11d48:	mov	r2, #5
   11d4c:	ldr	r1, [pc, #324]	; 11e98 <__assert_fail@plt+0xd04>
   11d50:	b	1152c <__assert_fail@plt+0x398>
   11d54:	mov	r2, #5
   11d58:	ldr	r1, [pc, #316]	; 11e9c <__assert_fail@plt+0xd08>
   11d5c:	b	11d14 <__assert_fail@plt+0xb80>
   11d60:	mov	r2, #5
   11d64:	ldr	r1, [pc, #308]	; 11ea0 <__assert_fail@plt+0xd0c>
   11d68:	mov	r0, #0
   11d6c:	bl	10f84 <dcgettext@plt>
   11d70:	mov	r4, r0
   11d74:	mov	r0, r5
   11d78:	b	11c7c <__assert_fail@plt+0xae8>
   11d7c:	mov	r2, #5
   11d80:	ldr	r1, [pc, #284]	; 11ea4 <__assert_fail@plt+0xd10>
   11d84:	mov	r0, r9
   11d88:	bl	10f84 <dcgettext@plt>
   11d8c:	mov	r4, r0
   11d90:	mov	r0, r5
   11d94:	b	11c7c <__assert_fail@plt+0xae8>
   11d98:	mov	r2, #5
   11d9c:	ldr	r1, [pc, #260]	; 11ea8 <__assert_fail@plt+0xd14>
   11da0:	mov	r0, r9
   11da4:	bl	10f84 <dcgettext@plt>
   11da8:	mov	r4, r0
   11dac:	mov	r0, r5
   11db0:	b	11c7c <__assert_fail@plt+0xae8>
   11db4:	bl	10f90 <__stack_chk_fail@plt>
   11db8:	andeq	fp, r2, r8, lsl #30
   11dbc:	andeq	sl, r1, r4, lsr #18
   11dc0:	andeq	fp, r1, r4, lsl r0
   11dc4:			; <UNDEFINED> instruction: 0x0002c1b0
   11dc8:	andeq	sl, r1, r0, asr pc
   11dcc:	andeq	r9, r1, r8, ror #13
   11dd0:	andeq	fp, r1, ip, lsr #32
   11dd4:	andeq	ip, r2, r8, lsr #3
   11dd8:	andeq	ip, r2, r0, asr #2
   11ddc:	andeq	r4, r1, r4, lsr r9
   11de0:	andeq	r0, r0, r9, lsl #2
   11de4:	andeq	ip, r2, ip, asr #3
   11de8:	andeq	ip, r2, r0, lsl r1
   11dec:	andeq	fp, r1, r8, lsr #32
   11df0:	andeq	ip, r2, r4, asr #6
   11df4:	andeq	r0, r0, fp, lsl #2
   11df8:	andeq	r0, r0, r1, lsl #2
   11dfc:	andeq	r0, r0, r2, lsl #2
   11e00:	strdeq	r9, [r1], -r8
   11e04:	andeq	fp, r1, r8, lsr r0
   11e08:	andeq	r9, r1, r8, asr #18
   11e0c:	andeq	fp, r1, r8, asr #1
   11e10:	andeq	r9, r1, ip, asr #17
   11e14:	andeq	fp, r1, r0, lsr r0
   11e18:	andeq	r9, r1, ip, lsl r9
   11e1c:	andeq	fp, r1, r0, asr #32
   11e20:	strdeq	ip, [r2], -r0
   11e24:	strheq	fp, [r1], -r0
   11e28:	andeq	ip, r2, r4, lsr #3
   11e2c:	andeq	ip, r2, ip, lsr r1
   11e30:	ldrdeq	fp, [r1], -r4
   11e34:	andeq	r9, r1, ip, lsr lr
   11e38:	andeq	sl, r1, ip, asr #30
   11e3c:	andeq	fp, r1, r4, ror #1
   11e40:	andeq	fp, r1, r8, lsr #2
   11e44:	muleq	r2, r8, r1
   11e48:	andeq	fp, r1, ip
   11e4c:	andeq	fp, r1, r4
   11e50:	strdeq	sl, [r1], -ip
   11e54:	andeq	fp, r1, r0
   11e58:	andeq	fp, r1, r4, asr r2
   11e5c:	muleq	r2, r0, r1
   11e60:	andeq	ip, r2, r0, lsr #3
   11e64:	andeq	fp, r1, r0, asr #5
   11e68:	andeq	r0, r1, r1
   11e6c:	andeq	fp, r1, r8, ror #5
   11e70:	andeq	fp, r1, r8, ror #2
   11e74:	andeq	fp, r1, r0, lsl r3
   11e78:	andeq	fp, r1, r0, asr r3
   11e7c:	andeq	fp, r1, ip, lsr r3
   11e80:	muleq	r1, r0, r1
   11e84:	ldrdeq	fp, [r1], -r0
   11e88:	andeq	fp, r1, r0, lsl r1
   11e8c:	andeq	fp, r1, r8, asr #2
   11e90:	andeq	fp, r1, r4, lsl #1
   11e94:	andeq	fp, r1, ip, lsr #4
   11e98:	andeq	fp, r1, r8, asr #32
   11e9c:	andeq	fp, r1, r4, rrx
   11ea0:	strdeq	fp, [r1], -r0
   11ea4:			; <UNDEFINED> instruction: 0x0001b1b8
   11ea8:	andeq	fp, r1, ip, ror #2
   11eac:	mov	fp, #0
   11eb0:	mov	lr, #0
   11eb4:	pop	{r1}		; (ldr r1, [sp], #4)
   11eb8:	mov	r2, sp
   11ebc:	push	{r2}		; (str r2, [sp, #-4]!)
   11ec0:	push	{r0}		; (str r0, [sp, #-4]!)
   11ec4:	ldr	ip, [pc, #16]	; 11edc <__assert_fail@plt+0xd48>
   11ec8:	push	{ip}		; (str ip, [sp, #-4]!)
   11ecc:	ldr	r0, [pc, #12]	; 11ee0 <__assert_fail@plt+0xd4c>
   11ed0:	ldr	r3, [pc, #12]	; 11ee4 <__assert_fail@plt+0xd50>
   11ed4:	bl	1102c <__libc_start_main@plt>
   11ed8:	bl	11170 <abort@plt>
   11edc:	andeq	r9, r1, r0, asr #13
   11ee0:	andeq	r1, r1, r0, lsr #3
   11ee4:	andeq	r9, r1, r0, ror #12
   11ee8:	ldr	r3, [pc, #20]	; 11f04 <__assert_fail@plt+0xd70>
   11eec:	ldr	r2, [pc, #20]	; 11f08 <__assert_fail@plt+0xd74>
   11ef0:	add	r3, pc, r3
   11ef4:	ldr	r2, [r3, r2]
   11ef8:	cmp	r2, #0
   11efc:	bxeq	lr
   11f00:	b	11044 <__gmon_start__@plt>
   11f04:	andeq	sl, r1, r8, lsl #2
   11f08:	andeq	r0, r0, r0, lsl #2
   11f0c:	ldr	r0, [pc, #24]	; 11f2c <__assert_fail@plt+0xd98>
   11f10:	ldr	r3, [pc, #24]	; 11f30 <__assert_fail@plt+0xd9c>
   11f14:	cmp	r3, r0
   11f18:	bxeq	lr
   11f1c:	ldr	r3, [pc, #16]	; 11f34 <__assert_fail@plt+0xda0>
   11f20:	cmp	r3, #0
   11f24:	bxeq	lr
   11f28:	bx	r3
   11f2c:	andeq	ip, r2, r8, lsl #3
   11f30:	andeq	ip, r2, r8, lsl #3
   11f34:	andeq	r0, r0, r0
   11f38:	ldr	r0, [pc, #36]	; 11f64 <__assert_fail@plt+0xdd0>
   11f3c:	ldr	r1, [pc, #36]	; 11f68 <__assert_fail@plt+0xdd4>
   11f40:	sub	r1, r1, r0
   11f44:	asr	r1, r1, #2
   11f48:	add	r1, r1, r1, lsr #31
   11f4c:	asrs	r1, r1, #1
   11f50:	bxeq	lr
   11f54:	ldr	r3, [pc, #16]	; 11f6c <__assert_fail@plt+0xdd8>
   11f58:	cmp	r3, #0
   11f5c:	bxeq	lr
   11f60:	bx	r3
   11f64:	andeq	ip, r2, r8, lsl #3
   11f68:	andeq	ip, r2, r8, lsl #3
   11f6c:	andeq	r0, r0, r0
   11f70:	push	{r4, lr}
   11f74:	ldr	r4, [pc, #24]	; 11f94 <__assert_fail@plt+0xe00>
   11f78:	ldrb	r3, [r4]
   11f7c:	cmp	r3, #0
   11f80:	popne	{r4, pc}
   11f84:	bl	11f0c <__assert_fail@plt+0xd78>
   11f88:	mov	r3, #1
   11f8c:	strb	r3, [r4]
   11f90:	pop	{r4, pc}
   11f94:	andeq	ip, r2, ip, lsr #3
   11f98:	b	11f38 <__assert_fail@plt+0xda4>
   11f9c:	andeq	r0, r0, r0
   11fa0:	push	{r4, r5, r6, r7, r8, r9, lr}
   11fa4:	sub	sp, sp, #36	; 0x24
   11fa8:	ldr	r7, [pc, #364]	; 1211c <__assert_fail@plt+0xf88>
   11fac:	mov	r8, r0
   11fb0:	mov	r6, #0
   11fb4:	ldr	r3, [r7]
   11fb8:	str	r3, [sp, #28]
   11fbc:	bl	11080 <strlen@plt>
   11fc0:	str	r6, [sp, #12]
   11fc4:	subs	r4, r0, #0
   11fc8:	beq	12044 <__assert_fail@plt+0xeb0>
   11fcc:	sub	r5, r4, #1
   11fd0:	ldrb	r3, [r8, r5]
   11fd4:	sub	r3, r3, #48	; 0x30
   11fd8:	cmp	r3, #9
   11fdc:	bls	120b4 <__assert_fail@plt+0xf20>
   11fe0:	add	r0, r4, #2
   11fe4:	bl	175d4 <__assert_fail@plt+0x6440>
   11fe8:	mov	r2, r4
   11fec:	mov	r1, r8
   11ff0:	add	r9, r0, r5
   11ff4:	str	r9, [sp, #12]
   11ff8:	bl	10f54 <memcpy@plt>
   11ffc:	cmp	r4, #1
   12000:	ldrb	r1, [r0, r5]
   12004:	mov	r3, r0
   12008:	sub	r2, r1, #105	; 0x69
   1200c:	clz	r2, r2
   12010:	lsr	r2, r2, #5
   12014:	moveq	r2, #0
   12018:	cmp	r2, r6
   1201c:	bne	120c0 <__assert_fail@plt+0xf2c>
   12020:	mov	r2, #66	; 0x42
   12024:	add	r1, r9, #2
   12028:	strb	r2, [r9, #1]
   1202c:	mov	r2, #0
   12030:	strb	r2, [r9, #2]
   12034:	str	r1, [sp, #12]
   12038:	mov	r6, r3
   1203c:	ldr	r2, [pc, #220]	; 12120 <__assert_fail@plt+0xf8c>
   12040:	b	12050 <__assert_fail@plt+0xebc>
   12044:	ldr	r2, [pc, #216]	; 12124 <__assert_fail@plt+0xf90>
   12048:	mov	r6, r4
   1204c:	mov	r3, r8
   12050:	str	r2, [sp]
   12054:	mov	r0, r3
   12058:	mov	r2, #10
   1205c:	add	r3, sp, #16
   12060:	add	r1, sp, #12
   12064:	bl	180bc <__assert_fail@plt+0x6f28>
   12068:	cmp	r0, #0
   1206c:	bne	120e0 <__assert_fail@plt+0xf4c>
   12070:	ldr	r3, [sp, #12]
   12074:	ldrb	r3, [r3]
   12078:	cmp	r3, #0
   1207c:	bne	120e0 <__assert_fail@plt+0xf4c>
   12080:	ldrd	r4, [sp, #16]
   12084:	orrs	r3, r4, r5
   12088:	beq	120e0 <__assert_fail@plt+0xf4c>
   1208c:	mov	r0, r6
   12090:	bl	10f30 <free@plt>
   12094:	ldr	r2, [sp, #28]
   12098:	ldr	r3, [r7]
   1209c:	mov	r0, r4
   120a0:	cmp	r2, r3
   120a4:	mov	r1, r5
   120a8:	bne	12118 <__assert_fail@plt+0xf84>
   120ac:	add	sp, sp, #36	; 0x24
   120b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   120b4:	ldr	r2, [pc, #104]	; 12124 <__assert_fail@plt+0xf90>
   120b8:	mov	r3, r8
   120bc:	b	12050 <__assert_fail@plt+0xebc>
   120c0:	ldrb	r2, [r9, #-1]
   120c4:	sub	r2, r2, #48	; 0x30
   120c8:	cmp	r2, #9
   120cc:	bls	12020 <__assert_fail@plt+0xe8c>
   120d0:	strb	r6, [r9]
   120d4:	ldr	r2, [pc, #72]	; 12124 <__assert_fail@plt+0xf90>
   120d8:	mov	r6, r0
   120dc:	b	12050 <__assert_fail@plt+0xebc>
   120e0:	mov	r0, r6
   120e4:	bl	10f30 <free@plt>
   120e8:	mov	r2, #5
   120ec:	ldr	r1, [pc, #52]	; 12128 <__assert_fail@plt+0xf94>
   120f0:	mov	r0, #0
   120f4:	bl	10f84 <dcgettext@plt>
   120f8:	mov	r4, r0
   120fc:	mov	r0, r8
   12100:	bl	17064 <__assert_fail@plt+0x5ed0>
   12104:	mov	r2, r4
   12108:	mov	r1, #0
   1210c:	mov	r3, r0
   12110:	mov	r0, #1
   12114:	bl	11014 <error@plt>
   12118:	bl	10f90 <__stack_chk_fail@plt>
   1211c:	andeq	fp, r2, r8, lsl #30
   12120:	andeq	r9, r1, r8, ror r9
   12124:	andeq	r9, r1, ip, ror #18
   12128:	andeq	r9, r1, r4, lsl #19
   1212c:	push	{r4, r5, r6, lr}
   12130:	mov	r5, r1
   12134:	ldr	r1, [r0]
   12138:	mov	r4, r2
   1213c:	cmp	r1, #0
   12140:	beq	121d0 <__assert_fail@plt+0x103c>
   12144:	ldrb	r3, [r1]
   12148:	sub	r2, r3, #48	; 0x30
   1214c:	cmp	r2, #9
   12150:	bhi	121d0 <__assert_fail@plt+0x103c>
   12154:	vldr	d6, [pc, #188]	; 12218 <__assert_fail@plt+0x1084>
   12158:	vldr	d5, [pc, #192]	; 12220 <__assert_fail@plt+0x108c>
   1215c:	mov	ip, r0
   12160:	mov	r0, #0
   12164:	add	r1, r1, #1
   12168:	mov	lr, r0
   1216c:	vcmp.f64	d6, #0.0
   12170:	vmrs	APSR_nzcv, fpscr
   12174:	movne	r2, #1
   12178:	moveq	r2, #0
   1217c:	subs	r3, r3, #48	; 0x30
   12180:	movne	r2, #1
   12184:	cmp	r2, #0
   12188:	addne	lr, lr, #1
   1218c:	cmp	lr, #15
   12190:	bls	121a0 <__assert_fail@plt+0x100c>
   12194:	cmp	lr, #27
   12198:	mov	r0, #1
   1219c:	bhi	1220c <__assert_fail@plt+0x1078>
   121a0:	vmov	s15, r3
   121a4:	cmp	r1, #0
   121a8:	str	r1, [ip]
   121ac:	vcvt.f64.s32	d7, s15
   121b0:	vmla.f64	d7, d6, d5
   121b4:	vmov.f64	d6, d7
   121b8:	beq	121f0 <__assert_fail@plt+0x105c>
   121bc:	ldrb	r3, [r1], #1
   121c0:	sub	r2, r3, #48	; 0x30
   121c4:	cmp	r2, #9
   121c8:	bhi	121f0 <__assert_fail@plt+0x105c>
   121cc:	b	1216c <__assert_fail@plt+0xfd8>
   121d0:	ldr	r3, [pc, #80]	; 12228 <__assert_fail@plt+0x1094>
   121d4:	mov	r0, r1
   121d8:	ldr	r2, [r3]
   121dc:	ldr	r1, [r3, #4]
   121e0:	bl	11164 <strncmp@plt>
   121e4:	cmp	r0, #0
   121e8:	bne	12204 <__assert_fail@plt+0x1070>
   121ec:	vldr	d6, [pc, #36]	; 12218 <__assert_fail@plt+0x1084>
   121f0:	ldrb	r3, [r4]
   121f4:	cmp	r3, #0
   121f8:	vnegne.f64	d6, d6
   121fc:	vstr	d6, [r5]
   12200:	pop	{r4, r5, r6, pc}
   12204:	mov	r0, #3
   12208:	pop	{r4, r5, r6, pc}
   1220c:	mov	r0, #2
   12210:	pop	{r4, r5, r6, pc}
   12214:	nop			; (mov r0, r0)
	...
   12224:	eormi	r0, r4, r0
   12228:			; <UNDEFINED> instruction: 0x0002c1b0
   1222c:	push	{r4, lr}
   12230:	add	r3, r0, #1
   12234:	ldr	r4, [pc, #20]	; 12250 <__assert_fail@plt+0x10bc>
   12238:	mov	r1, r3
   1223c:	ldr	r0, [r4, #12]
   12240:	str	r3, [r4, #8]
   12244:	bl	17630 <__assert_fail@plt+0x649c>
   12248:	str	r0, [r4, #12]
   1224c:	pop	{r4, pc}
   12250:			; <UNDEFINED> instruction: 0x0002c1b0
   12254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12258:	vpush	{d8-d11}
   1225c:	ldr	r1, [pc, #2124]	; 12ab0 <__assert_fail@plt+0x191c>
   12260:	ldr	fp, [pc, #2124]	; 12ab4 <__assert_fail@plt+0x1920>
   12264:	mov	r8, r0
   12268:	ldr	ip, [r1]
   1226c:	sub	sp, sp, #284	; 0x11c
   12270:	ldr	r1, [fp]
   12274:	cmp	ip, #0
   12278:	mov	r4, r2
   1227c:	mov	r5, r3
   12280:	str	r1, [sp, #276]	; 0x114
   12284:	beq	122fc <__assert_fail@plt+0x1168>
   12288:	ldrd	r2, [ip]
   1228c:	mvn	r1, #0
   12290:	mvn	r0, #0
   12294:	cmp	r3, r1
   12298:	cmpeq	r2, r0
   1229c:	beq	122cc <__assert_fail@plt+0x1138>
   122a0:	cmp	r5, r3
   122a4:	cmpeq	r4, r2
   122a8:	bcc	122bc <__assert_fail@plt+0x1128>
   122ac:	ldrd	r2, [ip, #8]
   122b0:	cmp	r5, r3
   122b4:	cmpeq	r4, r2
   122b8:	bls	12308 <__assert_fail@plt+0x1174>
   122bc:	ldrd	r2, [ip, #16]!
   122c0:	cmp	r3, r1
   122c4:	cmpeq	r2, r0
   122c8:	bne	122a0 <__assert_fail@plt+0x110c>
   122cc:	ldr	r3, [pc, #2020]	; 12ab8 <__assert_fail@plt+0x1924>
   122d0:	mov	r0, r8
   122d4:	ldr	r1, [r3]
   122d8:	bl	10ed0 <fputs_unlocked@plt>
   122dc:	mov	r0, #1
   122e0:	ldr	r2, [sp, #276]	; 0x114
   122e4:	ldr	r3, [fp]
   122e8:	cmp	r2, r3
   122ec:	bne	135c0 <__assert_fail@plt+0x242c>
   122f0:	add	sp, sp, #284	; 0x11c
   122f4:	vpop	{d8-d11}
   122f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122fc:	cmp	r3, #0
   12300:	cmpeq	r2, #1
   12304:	bne	122cc <__assert_fail@plt+0x1138>
   12308:	ldr	r7, [pc, #1964]	; 12abc <__assert_fail@plt+0x1928>
   1230c:	ldr	r6, [r7, #16]
   12310:	cmp	r6, #0
   12314:	beq	1235c <__assert_fail@plt+0x11c8>
   12318:	mov	r0, r8
   1231c:	bl	11080 <strlen@plt>
   12320:	mov	r9, r0
   12324:	mov	r0, r6
   12328:	bl	11080 <strlen@plt>
   1232c:	cmp	r9, r0
   12330:	bls	1235c <__assert_fail@plt+0x11c8>
   12334:	sub	r9, r9, r0
   12338:	add	r1, r8, r9
   1233c:	mov	r0, r6
   12340:	bl	10ef4 <strcmp@plt>
   12344:	ldrb	r3, [r7, #20]
   12348:	cmp	r0, #0
   1234c:	bne	129f4 <__assert_fail@plt+0x1860>
   12350:	cmp	r3, #0
   12354:	strb	r0, [r8, r9]
   12358:	bne	12c84 <__assert_fail@plt+0x1af0>
   1235c:	ldrb	r9, [r8]
   12360:	cmp	r9, #0
   12364:	beq	12cac <__assert_fail@plt+0x1b18>
   12368:	bl	11068 <__ctype_b_loc@plt>
   1236c:	mov	r6, r8
   12370:	ldr	r2, [r0]
   12374:	b	12384 <__assert_fail@plt+0x11f0>
   12378:	ldrb	r9, [r6, #1]!
   1237c:	cmp	r9, #0
   12380:	beq	12394 <__assert_fail@plt+0x1200>
   12384:	lsl	r9, r9, #1
   12388:	ldrh	r3, [r2, r9]
   1238c:	tst	r3, #1
   12390:	bne	12378 <__assert_fail@plt+0x11e4>
   12394:	ldr	r3, [r7, #24]
   12398:	cmp	r3, #0
   1239c:	beq	12648 <__assert_fail@plt+0x14b4>
   123a0:	cmp	r4, #1
   123a4:	cmple	r8, r6
   123a8:	moveq	r4, #0
   123ac:	movne	r4, #1
   123b0:	streq	r4, [r7, #28]
   123b4:	beq	123d4 <__assert_fail@plt+0x1240>
   123b8:	mov	r0, r8
   123bc:	bl	11080 <strlen@plt>
   123c0:	ldr	r2, [r7, #8]
   123c4:	cmp	r0, r2
   123c8:	str	r0, [r7, #28]
   123cc:	bcc	123d4 <__assert_fail@plt+0x1240>
   123d0:	bl	1222c <__assert_fail@plt+0x1098>
   123d4:	ldrb	r3, [r7, #20]
   123d8:	cmp	r3, #0
   123dc:	bne	12630 <__assert_fail@plt+0x149c>
   123e0:	ldr	sl, [r7, #32]
   123e4:	mov	r2, #0
   123e8:	sub	r1, sl, #3
   123ec:	cmp	r1, #2
   123f0:	mov	r3, #0
   123f4:	movcc	r1, #1024	; 0x400
   123f8:	movcs	r1, #1000	; 0x3e8
   123fc:	str	r1, [sp, #24]
   12400:	strd	r2, [sp, #64]	; 0x40
   12404:	ldrb	r3, [r6]
   12408:	add	r2, sp, #54	; 0x36
   1240c:	add	r1, sp, #64	; 0x40
   12410:	cmp	r3, #45	; 0x2d
   12414:	moveq	r0, #1
   12418:	movne	r0, #0
   1241c:	addeq	r3, r6, #1
   12420:	movne	r3, r6
   12424:	strb	r0, [sp, #54]	; 0x36
   12428:	add	r0, sp, #56	; 0x38
   1242c:	str	r3, [sp, #56]	; 0x38
   12430:	bl	1212c <__assert_fail@plt+0xf98>
   12434:	cmp	r0, #1
   12438:	mov	r9, r0
   1243c:	bhi	12788 <__assert_fail@plt+0x15f4>
   12440:	ldr	r5, [sp, #56]	; 0x38
   12444:	ldr	r4, [r7]
   12448:	mov	r0, r5
   1244c:	mov	r2, r4
   12450:	ldr	r1, [r7, #4]
   12454:	bl	11164 <strncmp@plt>
   12458:	cmp	r0, #0
   1245c:	beq	126c4 <__assert_fail@plt+0x1530>
   12460:	mov	r4, #0
   12464:	ldrb	r3, [r7, #20]
   12468:	cmp	r3, #0
   1246c:	bne	129d0 <__assert_fail@plt+0x183c>
   12470:	ldr	r3, [sp, #56]	; 0x38
   12474:	str	r3, [sp, #32]
   12478:	ldrb	r2, [r3]
   1247c:	cmp	r2, #0
   12480:	beq	129b8 <__assert_fail@plt+0x1824>
   12484:	str	r2, [sp, #40]	; 0x28
   12488:	bl	11068 <__ctype_b_loc@plt>
   1248c:	ldr	r3, [sp, #32]
   12490:	ldr	r2, [sp, #40]	; 0x28
   12494:	ldr	r0, [r0]
   12498:	b	124a8 <__assert_fail@plt+0x1314>
   1249c:	add	r3, r3, #1
   124a0:	str	r3, [sp, #56]	; 0x38
   124a4:	ldrb	r2, [r3]
   124a8:	lsl	r1, r2, #1
   124ac:	ldrh	r1, [r0, r1]
   124b0:	ands	r1, r1, #1
   124b4:	bne	1249c <__assert_fail@plt+0x1308>
   124b8:	mov	r5, r1
   124bc:	ldr	r0, [pc, #1532]	; 12ac0 <__assert_fail@plt+0x192c>
   124c0:	mov	r1, r2
   124c4:	str	r3, [sp, #40]	; 0x28
   124c8:	str	r2, [sp, #32]
   124cc:	bl	1108c <strchr@plt>
   124d0:	cmp	r0, #0
   124d4:	beq	13220 <__assert_fail@plt+0x208c>
   124d8:	cmp	sl, #0
   124dc:	beq	1320c <__assert_fail@plt+0x2078>
   124e0:	ldr	r2, [sp, #32]
   124e4:	ldr	r3, [sp, #40]	; 0x28
   124e8:	sub	r2, r2, #69	; 0x45
   124ec:	uxtb	r2, r2
   124f0:	cmp	r2, #21
   124f4:	ldrls	r1, [pc, #1480]	; 12ac4 <__assert_fail@plt+0x1930>
   124f8:	ldrls	r5, [r1, r2, lsl #2]
   124fc:	add	r2, r3, #1
   12500:	cmp	sl, #1
   12504:	str	r2, [sp, #56]	; 0x38
   12508:	beq	131f0 <__assert_fail@plt+0x205c>
   1250c:	cmp	sl, #4
   12510:	beq	12b98 <__assert_fail@plt+0x1a04>
   12514:	vldr	s15, [sp, #24]
   12518:	ldrb	r2, [r7, #20]
   1251c:	vcvt.f64.s32	d7, s15
   12520:	cmp	r5, #0
   12524:	mov	r4, r5
   12528:	beq	129c8 <__assert_fail@plt+0x1834>
   1252c:	subs	r4, r5, #1
   12530:	vmov.f64	d8, d7
   12534:	beq	13218 <__assert_fail@plt+0x2084>
   12538:	subs	r4, r4, #1
   1253c:	vmul.f64	d8, d8, d7
   12540:	bne	12538 <__assert_fail@plt+0x13a4>
   12544:	cmp	r2, #0
   12548:	bne	12b04 <__assert_fail@plt+0x1970>
   1254c:	vldr	d7, [sp, #64]	; 0x40
   12550:	vmul.f64	d7, d7, d8
   12554:	vstr	d7, [sp, #64]	; 0x40
   12558:	ldr	r3, [sp, #56]	; 0x38
   1255c:	cmp	r3, #0
   12560:	beq	12768 <__assert_fail@plt+0x15d4>
   12564:	ldrb	r3, [r3]
   12568:	cmp	r3, #0
   1256c:	beq	12768 <__assert_fail@plt+0x15d4>
   12570:	ldr	r3, [r7, #36]	; 0x24
   12574:	cmp	r3, #3
   12578:	beq	12b58 <__assert_fail@plt+0x19c4>
   1257c:	ldr	r5, [pc, #1384]	; 12aec <__assert_fail@plt+0x1958>
   12580:	mov	r2, #5
   12584:	ldr	r1, [pc, #1340]	; 12ac8 <__assert_fail@plt+0x1934>
   12588:	mov	r0, #0
   1258c:	ldr	sl, [r5]
   12590:	bl	10f84 <dcgettext@plt>
   12594:	mov	r1, r6
   12598:	mov	r9, r0
   1259c:	mov	r0, #0
   125a0:	bl	17054 <__assert_fail@plt+0x5ec0>
   125a4:	ldr	r1, [sp, #56]	; 0x38
   125a8:	mov	r6, r0
   125ac:	mov	r0, #1
   125b0:	bl	17054 <__assert_fail@plt+0x5ec0>
   125b4:	mov	r2, r9
   125b8:	mov	r3, r6
   125bc:	mov	r1, #0
   125c0:	mov	r9, #5
   125c4:	str	r0, [sp]
   125c8:	mov	r0, sl
   125cc:	bl	11014 <error@plt>
   125d0:	ldrd	r0, [r5, #8]
   125d4:	ldrd	r2, [r5, #16]
   125d8:	vldr	d8, [sp, #64]	; 0x40
   125dc:	cmp	r1, #0
   125e0:	cmpeq	r0, #1
   125e4:	beq	127ac <__assert_fail@plt+0x1618>
   125e8:	strd	r2, [sp, #24]
   125ec:	bl	19570 <__assert_fail@plt+0x83dc>
   125f0:	ldrd	r2, [sp, #24]
   125f4:	vmov	d7, r0, r1
   125f8:	mov	r0, r2
   125fc:	mov	r1, r3
   12600:	vmul.f64	d9, d7, d8
   12604:	bl	19570 <__assert_fail@plt+0x83dc>
   12608:	vmov	d7, r0, r1
   1260c:	vdiv.f64	d8, d9, d7
   12610:	cmp	r9, #1
   12614:	bls	127bc <__assert_fail@plt+0x1628>
   12618:	ldr	r3, [pc, #1176]	; 12ab8 <__assert_fail@plt+0x1924>
   1261c:	mov	r0, r8
   12620:	ldr	r1, [r3]
   12624:	bl	10ed0 <fputs_unlocked@plt>
   12628:	mov	r0, #0
   1262c:	b	122e0 <__assert_fail@plt+0x114c>
   12630:	ldr	r1, [pc, #1192]	; 12ae0 <__assert_fail@plt+0x194c>
   12634:	ldr	r3, [r7, #28]
   12638:	ldr	r2, [pc, #1164]	; 12acc <__assert_fail@plt+0x1938>
   1263c:	ldr	r0, [r1]
   12640:	mov	r1, #1
   12644:	bl	110d4 <__fprintf_chk@plt>
   12648:	ldr	sl, [r7, #32]
   1264c:	ldrb	r1, [r7, #20]
   12650:	sub	r0, sl, #3
   12654:	cmp	r0, #2
   12658:	movcc	r0, #1024	; 0x400
   1265c:	movcs	r0, #1000	; 0x3e8
   12660:	mov	r2, #0
   12664:	mov	r3, #0
   12668:	str	r0, [sp, #24]
   1266c:	cmp	r1, #0
   12670:	mov	r0, #0
   12674:	strd	r2, [sp, #64]	; 0x40
   12678:	str	r0, [sp, #56]	; 0x38
   1267c:	beq	12404 <__assert_fail@plt+0x1270>
   12680:	ldr	r3, [pc, #1112]	; 12ae0 <__assert_fail@plt+0x194c>
   12684:	mov	r1, r6
   12688:	ldr	r4, [r3]
   1268c:	bl	17054 <__assert_fail@plt+0x5ec0>
   12690:	ldr	r1, [r7, #4]
   12694:	mov	r5, r0
   12698:	mov	r0, #1
   1269c:	bl	17054 <__assert_fail@plt+0x5ec0>
   126a0:	mov	r2, #15
   126a4:	str	r2, [sp, #4]
   126a8:	mov	r3, r5
   126ac:	ldr	r2, [pc, #1052]	; 12ad0 <__assert_fail@plt+0x193c>
   126b0:	mov	r1, #1
   126b4:	str	r0, [sp]
   126b8:	mov	r0, r4
   126bc:	bl	110d4 <__fprintf_chk@plt>
   126c0:	b	12404 <__assert_fail@plt+0x1270>
   126c4:	vldr	d7, [pc, #924]	; 12a68 <__assert_fail@plt+0x18d4>
   126c8:	add	r3, r5, r4
   126cc:	str	r3, [sp, #56]	; 0x38
   126d0:	add	r1, sp, #72	; 0x48
   126d4:	vstr	d7, [sp, #72]	; 0x48
   126d8:	ldrb	r2, [r5, r4]
   126dc:	cmp	r2, #45	; 0x2d
   126e0:	moveq	r0, #1
   126e4:	addeq	r3, r3, #1
   126e8:	strb	r0, [sp, #55]	; 0x37
   126ec:	add	r2, sp, #55	; 0x37
   126f0:	add	r0, sp, #60	; 0x3c
   126f4:	str	r3, [sp, #60]	; 0x3c
   126f8:	bl	1212c <__assert_fail@plt+0xf98>
   126fc:	cmp	r0, #1
   12700:	bhi	12784 <__assert_fail@plt+0x15f0>
   12704:	ldrb	r3, [sp, #55]	; 0x37
   12708:	moveq	r9, r0
   1270c:	cmp	r3, #0
   12710:	bne	12d44 <__assert_fail@plt+0x1bb0>
   12714:	ldr	r2, [sp, #60]	; 0x3c
   12718:	ldr	r4, [sp, #56]	; 0x38
   1271c:	vldr	d5, [sp, #72]	; 0x48
   12720:	subs	r4, r2, r4
   12724:	beq	12748 <__assert_fail@plt+0x15b4>
   12728:	vldr	d7, [pc, #832]	; 12a70 <__assert_fail@plt+0x18dc>
   1272c:	subs	r3, r4, #1
   12730:	vmovne.f64	d6, d7
   12734:	beq	12744 <__assert_fail@plt+0x15b0>
   12738:	subs	r3, r3, #1
   1273c:	vmul.f64	d7, d7, d6
   12740:	bne	12738 <__assert_fail@plt+0x15a4>
   12744:	vdiv.f64	d5, d5, d7
   12748:	ldrb	r3, [sp, #54]	; 0x36
   1274c:	vldr	d7, [sp, #64]	; 0x40
   12750:	str	r2, [sp, #56]	; 0x38
   12754:	cmp	r3, #0
   12758:	vsubne.f64	d5, d7, d5
   1275c:	vaddeq.f64	d5, d5, d7
   12760:	vstr	d5, [sp, #64]	; 0x40
   12764:	b	12464 <__assert_fail@plt+0x12d0>
   12768:	cmp	r9, #1
   1276c:	bne	1277c <__assert_fail@plt+0x15e8>
   12770:	ldrb	r3, [r7, #40]	; 0x28
   12774:	cmp	r3, #0
   12778:	bne	12b64 <__assert_fail@plt+0x19d0>
   1277c:	ldr	r5, [pc, #872]	; 12aec <__assert_fail@plt+0x1958>
   12780:	b	125d0 <__assert_fail@plt+0x143c>
   12784:	mov	r9, r0
   12788:	sub	r3, r9, #2
   1278c:	cmp	r3, #4
   12790:	ldrls	pc, [pc, r3, lsl #2]
   12794:	b	1361c <__assert_fail@plt+0x2488>
   12798:			; <UNDEFINED> instruction: 0x00012bbc
   1279c:	andeq	r2, r1, r4, asr #26
   127a0:	ldrdeq	r2, [r1], -r4
   127a4:	andeq	r2, r1, r8, asr #23
   127a8:	andeq	r2, r1, r0, ror #23
   127ac:	cmp	r3, #0
   127b0:	cmpeq	r2, #1
   127b4:	bne	125e8 <__assert_fail@plt+0x1454>
   127b8:	b	12610 <__assert_fail@plt+0x147c>
   127bc:	vldr	d7, [pc, #692]	; 12a78 <__assert_fail@plt+0x18e4>
   127c0:	ldr	r3, [r5, #24]
   127c4:	cmn	r3, #1
   127c8:	vcmpe.f64	d8, d7
   127cc:	movne	r4, r3
   127d0:	vmrs	APSR_nzcv, fpscr
   127d4:	blt	12874 <__assert_fail@plt+0x16e0>
   127d8:	vldr	d7, [pc, #672]	; 12a80 <__assert_fail@plt+0x18ec>
   127dc:	vcmpe.f64	d8, d7
   127e0:	vmrs	APSR_nzcv, fpscr
   127e4:	bhi	12874 <__assert_fail@plt+0x16e0>
   127e8:	vmov.f64	d7, d8
   127ec:	vldr	d6, [pc, #636]	; 12a70 <__assert_fail@plt+0x18dc>
   127f0:	mov	r3, #0
   127f4:	b	12800 <__assert_fail@plt+0x166c>
   127f8:	vdiv.f64	d7, d7, d6
   127fc:	add	r3, r3, #1
   12800:	vcmpe.f64	d7, #0.0
   12804:	vmrs	APSR_nzcv, fpscr
   12808:	vnegmi.f64	d5, d7
   1280c:	vmovpl.f64	d5, d7
   12810:	vcmpe.f64	d5, d6
   12814:	vmrs	APSR_nzcv, fpscr
   12818:	bge	127f8 <__assert_fail@plt+0x1664>
   1281c:	ldr	r2, [r7, #44]	; 0x2c
   12820:	subs	r6, r2, #0
   12824:	bne	12834 <__assert_fail@plt+0x16a0>
   12828:	add	r2, r3, r4
   1282c:	cmp	r2, #15
   12830:	bhi	12cfc <__assert_fail@plt+0x1b68>
   12834:	cmp	r3, #26
   12838:	bls	12888 <__assert_fail@plt+0x16f4>
   1283c:	ldr	r3, [r7, #36]	; 0x24
   12840:	cmp	r3, #3
   12844:	beq	12618 <__assert_fail@plt+0x1484>
   12848:	mov	r2, #5
   1284c:	ldr	r1, [pc, #640]	; 12ad4 <__assert_fail@plt+0x1940>
   12850:	mov	r0, #0
   12854:	ldr	r4, [r5]
   12858:	bl	10f84 <dcgettext@plt>
   1285c:	vstr	d8, [sp]
   12860:	mov	r1, #0
   12864:	mov	r2, r0
   12868:	mov	r0, r4
   1286c:	bl	11014 <error@plt>
   12870:	b	12618 <__assert_fail@plt+0x1484>
   12874:	ldr	r3, [r7, #44]	; 0x2c
   12878:	subs	r6, r3, #0
   1287c:	bne	12888 <__assert_fail@plt+0x16f4>
   12880:	cmp	r4, #15
   12884:	bhi	12cfc <__assert_fail@plt+0x1b68>
   12888:	ldr	sl, [r7, #48]	; 0x30
   1288c:	mov	r3, #37	; 0x25
   12890:	cmp	sl, #0
   12894:	strb	r3, [sp, #84]	; 0x54
   12898:	movne	r3, #39	; 0x27
   1289c:	strbne	r3, [sp, #85]	; 0x55
   128a0:	ldr	r3, [r7, #52]	; 0x34
   128a4:	addne	r8, sp, #86	; 0x56
   128a8:	addeq	r8, sp, #85	; 0x55
   128ac:	cmp	r3, #0
   128b0:	ldr	r9, [r5, #28]
   128b4:	bne	12cd8 <__assert_fail@plt+0x1b44>
   128b8:	ldrb	r3, [r7, #20]
   128bc:	cmp	r3, #0
   128c0:	str	r3, [sp, #24]
   128c4:	bne	12cb4 <__assert_fail@plt+0x1b20>
   128c8:	cmp	r6, #0
   128cc:	beq	12c14 <__assert_fail@plt+0x1a80>
   128d0:	vldr	d6, [pc, #416]	; 12a78 <__assert_fail@plt+0x18e4>
   128d4:	vldr	d10, [pc, #428]	; 12a88 <__assert_fail@plt+0x18f4>
   128d8:	vldr	d7, [pc, #432]	; 12a90 <__assert_fail@plt+0x18fc>
   128dc:	sub	r3, r6, #3
   128e0:	vcmpe.f64	d8, d6
   128e4:	cmp	r3, #2
   128e8:	vmovcs.f64	d10, d7
   128ec:	vmrs	APSR_nzcv, fpscr
   128f0:	vmovlt.f64	d9, d8
   128f4:	movlt	r4, #0
   128f8:	blt	12914 <__assert_fail@plt+0x1780>
   128fc:	vldr	d7, [pc, #380]	; 12a80 <__assert_fail@plt+0x18ec>
   12900:	vmov.f64	d9, d8
   12904:	mov	r4, #0
   12908:	vcmpe.f64	d8, d7
   1290c:	vmrs	APSR_nzcv, fpscr
   12910:	bls	12bf4 <__assert_fail@plt+0x1a60>
   12914:	ldr	r3, [sp, #24]
   12918:	cmp	r3, #0
   1291c:	bne	13484 <__assert_fail@plt+0x22f0>
   12920:	ldr	sl, [r5, #24]
   12924:	cmn	sl, #1
   12928:	beq	133c8 <__assert_fail@plt+0x2234>
   1292c:	add	r3, r4, r4, lsl #1
   12930:	cmp	r3, sl
   12934:	movcs	r3, sl
   12938:	cmp	r3, #0
   1293c:	str	r3, [sp, #32]
   12940:	beq	1325c <__assert_fail@plt+0x20c8>
   12944:	ldr	r3, [sp, #32]
   12948:	subs	r3, r3, #1
   1294c:	beq	133e8 <__assert_fail@plt+0x2254>
   12950:	vldr	d7, [pc, #280]	; 12a70 <__assert_fail@plt+0x18dc>
   12954:	mov	r2, r3
   12958:	vmov.f64	d6, d7
   1295c:	subs	r2, r2, #1
   12960:	vmul.f64	d7, d7, d6
   12964:	bne	1295c <__assert_fail@plt+0x17c8>
   12968:	vmul.f64	d9, d9, d7
   1296c:	vldr	d7, [pc, #292]	; 12a98 <__assert_fail@plt+0x1904>
   12970:	str	r3, [sp, #40]	; 0x28
   12974:	vldr	d11, [pc, #292]	; 12aa0 <__assert_fail@plt+0x190c>
   12978:	vmul.f64	d7, d9, d7
   1297c:	vmov	r0, r1, d7
   12980:	bl	195f4 <__assert_fail@plt+0x8460>
   12984:	bl	19584 <__assert_fail@plt+0x83f0>
   12988:	ldr	r3, [sp, #40]	; 0x28
   1298c:	vmov	d7, r0, r1
   12990:	vmul.f64	d11, d7, d11
   12994:	vsub.f64	d9, d9, d11
   12998:	cmp	r9, #4
   1299c:	ldrls	pc, [pc, r9, lsl #2]
   129a0:	b	13628 <__assert_fail@plt+0x2494>
   129a4:	andeq	r2, r1, r4, ror #30
   129a8:	strheq	r3, [r1], -r4
   129ac:	andeq	r3, r1, r0, asr #3
   129b0:	ldrdeq	r3, [r1], -r0
   129b4:	muleq	r1, r0, r1
   129b8:	cmp	sl, #4
   129bc:	beq	12a18 <__assert_fail@plt+0x1884>
   129c0:	mov	r5, r2
   129c4:	ldrb	r2, [r7, #20]
   129c8:	vldr	d8, [pc, #216]	; 12aa8 <__assert_fail@plt+0x1914>
   129cc:	b	12544 <__assert_fail@plt+0x13b0>
   129d0:	ldrd	r2, [sp, #64]	; 0x40
   129d4:	ldr	r1, [pc, #260]	; 12ae0 <__assert_fail@plt+0x194c>
   129d8:	str	r4, [sp, #8]
   129dc:	ldr	r0, [r1]
   129e0:	strd	r2, [sp]
   129e4:	mov	r1, #1
   129e8:	ldr	r2, [pc, #232]	; 12ad8 <__assert_fail@plt+0x1944>
   129ec:	bl	110d4 <__fprintf_chk@plt>
   129f0:	b	12470 <__assert_fail@plt+0x12dc>
   129f4:	cmp	r3, #0
   129f8:	beq	1235c <__assert_fail@plt+0x11c8>
   129fc:	ldr	r3, [pc, #220]	; 12ae0 <__assert_fail@plt+0x194c>
   12a00:	mov	r2, #22
   12a04:	mov	r1, #1
   12a08:	ldr	r3, [r3]
   12a0c:	ldr	r0, [pc, #200]	; 12adc <__assert_fail@plt+0x1948>
   12a10:	bl	10fc0 <fwrite@plt>
   12a14:	b	1235c <__assert_fail@plt+0x11c8>
   12a18:	ldr	r1, [pc, #224]	; 12b00 <__assert_fail@plt+0x196c>
   12a1c:	mov	r9, #6
   12a20:	ldr	r3, [r7, #36]	; 0x24
   12a24:	ldr	r5, [pc, #192]	; 12aec <__assert_fail@plt+0x1958>
   12a28:	cmp	r3, #3
   12a2c:	beq	125d0 <__assert_fail@plt+0x143c>
   12a30:	mov	r2, #5
   12a34:	mov	r0, #0
   12a38:	ldr	sl, [r5]
   12a3c:	bl	10f84 <dcgettext@plt>
   12a40:	str	r0, [sp, #24]
   12a44:	mov	r0, r6
   12a48:	bl	17064 <__assert_fail@plt+0x5ed0>
   12a4c:	ldr	r2, [sp, #24]
   12a50:	mov	r1, #0
   12a54:	mov	r3, r0
   12a58:	mov	r0, sl
   12a5c:	bl	11014 <error@plt>
   12a60:	b	125d0 <__assert_fail@plt+0x143c>
   12a64:	nop			; (mov r0, r0)
	...
   12a74:	eormi	r0, r4, r0
   12a78:			; <UNDEFINED> instruction: 0xffffffff
   12a7c:			; <UNDEFINED> instruction: 0xffefffff
   12a80:			; <UNDEFINED> instruction: 0xffffffff
   12a84:	svcvc	0x00efffff
   12a88:	andeq	r0, r0, r0
   12a8c:	addsmi	r0, r0, r0
   12a90:	andeq	r0, r0, r0
   12a94:	addmi	r4, pc, r0
   12a98:	andeq	r0, r0, r0
   12a9c:	stccc	0, cr0, [r0], {-0}
   12aa0:	andeq	r0, r0, r0
   12aa4:	mvnmi	r0, #0
   12aa8:	andeq	r0, r0, r0
   12aac:	svccc	0x00f00000	; IMB
   12ab0:	andeq	ip, r2, r0, asr #6
   12ab4:	andeq	fp, r2, r8, lsl #30
   12ab8:	andeq	ip, r2, r4, lsr #3
   12abc:			; <UNDEFINED> instruction: 0x0002c1b0
   12ac0:	andeq	r9, r1, ip, ror #18
   12ac4:	andeq	r9, r1, r8, ror #13
   12ac8:	andeq	r9, r1, r4, lsl ip
   12acc:	andeq	r9, r1, r8, ror #21
   12ad0:	andeq	r9, r1, r0, lsl fp
   12ad4:	andeq	r9, r1, ip, ror #25
   12ad8:	andeq	r9, r1, r0, ror fp
   12adc:	ldrdeq	r9, [r1], -r0
   12ae0:	muleq	r2, r8, r1
   12ae4:	ldrdeq	r9, [r1], -r8
   12ae8:	strdeq	r9, [r1], -r4
   12aec:	andeq	ip, r2, r0, lsl r1
   12af0:	andeq	r9, r1, r4, lsr ip
   12af4:	andeq	r9, r1, r4, lsr sl
   12af8:	andeq	r9, r1, ip, asr #19
   12afc:	strdeq	r9, [r1], -ip
   12b00:	muleq	r1, ip, r9
   12b04:	vstr	d8, [sp, #8]
   12b08:	ldr	sl, [pc, #-48]	; 12ae0 <__assert_fail@plt+0x194c>
   12b0c:	str	r5, [sp]
   12b10:	ldr	r3, [sp, #24]
   12b14:	ldr	r0, [sl]
   12b18:	ldr	r2, [pc, #-60]	; 12ae4 <__assert_fail@plt+0x1950>
   12b1c:	mov	r1, #1
   12b20:	bl	110d4 <__fprintf_chk@plt>
   12b24:	vldr	d7, [sp, #64]	; 0x40
   12b28:	ldrb	r3, [r7, #20]
   12b2c:	vmul.f64	d8, d8, d7
   12b30:	cmp	r3, #0
   12b34:	vstr	d8, [sp, #64]	; 0x40
   12b38:	beq	12558 <__assert_fail@plt+0x13c4>
   12b3c:	vstr	d8, [sp, #8]
   12b40:	vstr	d8, [sp]
   12b44:	ldr	r2, [pc, #-100]	; 12ae8 <__assert_fail@plt+0x1954>
   12b48:	mov	r1, #1
   12b4c:	ldr	r0, [sl]
   12b50:	bl	110d4 <__fprintf_chk@plt>
   12b54:	b	12558 <__assert_fail@plt+0x13c4>
   12b58:	mov	r9, #5
   12b5c:	ldr	r5, [pc, #-120]	; 12aec <__assert_fail@plt+0x1958>
   12b60:	b	125d0 <__assert_fail@plt+0x143c>
   12b64:	mov	r2, #5
   12b68:	ldr	r1, [pc, #-128]	; 12af0 <__assert_fail@plt+0x195c>
   12b6c:	mov	r0, #0
   12b70:	bl	10f84 <dcgettext@plt>
   12b74:	mov	r5, r0
   12b78:	mov	r0, r6
   12b7c:	bl	17064 <__assert_fail@plt+0x5ed0>
   12b80:	mov	r1, #0
   12b84:	mov	r2, r5
   12b88:	mov	r3, r0
   12b8c:	mov	r0, r1
   12b90:	bl	11014 <error@plt>
   12b94:	b	1277c <__assert_fail@plt+0x15e8>
   12b98:	ldrb	r2, [r3, #1]
   12b9c:	cmp	r2, #105	; 0x69
   12ba0:	bne	135c4 <__assert_fail@plt+0x2430>
   12ba4:	vldr	s15, [sp, #24]
   12ba8:	add	r3, r3, #2
   12bac:	ldrb	r2, [r7, #20]
   12bb0:	str	r3, [sp, #56]	; 0x38
   12bb4:	vcvt.f64.s32	d7, s15
   12bb8:	b	12520 <__assert_fail@plt+0x138c>
   12bbc:	mov	r4, #0
   12bc0:	ldr	r1, [pc, #-212]	; 12af4 <__assert_fail@plt+0x1960>
   12bc4:	b	12a20 <__assert_fail@plt+0x188c>
   12bc8:	ldr	r1, [pc, #-216]	; 12af8 <__assert_fail@plt+0x1964>
   12bcc:	mov	r4, #0
   12bd0:	b	12a20 <__assert_fail@plt+0x188c>
   12bd4:	mov	r4, #0
   12bd8:	ldr	r1, [pc, #-228]	; 12afc <__assert_fail@plt+0x1968>
   12bdc:	b	12a20 <__assert_fail@plt+0x188c>
   12be0:	mov	r4, #0
   12be4:	ldr	r1, [pc, #-236]	; 12b00 <__assert_fail@plt+0x196c>
   12be8:	b	12a20 <__assert_fail@plt+0x188c>
   12bec:	vdiv.f64	d9, d9, d10
   12bf0:	add	r4, r4, #1
   12bf4:	vcmpe.f64	d9, #0.0
   12bf8:	vmrs	APSR_nzcv, fpscr
   12bfc:	vnegmi.f64	d7, d9
   12c00:	vmovpl.f64	d7, d9
   12c04:	vcmpe.f64	d7, d10
   12c08:	vmrs	APSR_nzcv, fpscr
   12c0c:	bge	12bec <__assert_fail@plt+0x1a58>
   12c10:	b	12914 <__assert_fail@plt+0x1780>
   12c14:	cmp	r4, #0
   12c18:	beq	13340 <__assert_fail@plt+0x21ac>
   12c1c:	subs	r6, r4, #1
   12c20:	vldr	d9, [pc, #752]	; 12f18 <__assert_fail@plt+0x1d84>
   12c24:	beq	13554 <__assert_fail@plt+0x23c0>
   12c28:	vmov.f64	d6, d9
   12c2c:	mov	r3, r6
   12c30:	subs	r3, r3, #1
   12c34:	vmul.f64	d9, d9, d6
   12c38:	bne	12c30 <__assert_fail@plt+0x1a9c>
   12c3c:	vmul.f64	d9, d9, d8
   12c40:	vldr	d7, [pc, #728]	; 12f20 <__assert_fail@plt+0x1d8c>
   12c44:	vldr	d10, [pc, #732]	; 12f28 <__assert_fail@plt+0x1d94>
   12c48:	vmul.f64	d7, d9, d7
   12c4c:	vmov	r0, r1, d7
   12c50:	bl	195f4 <__assert_fail@plt+0x8460>
   12c54:	bl	19584 <__assert_fail@plt+0x83f0>
   12c58:	vmov	d7, r0, r1
   12c5c:	vmul.f64	d10, d7, d10
   12c60:	vsub.f64	d9, d9, d10
   12c64:	cmp	r9, #4
   12c68:	ldrls	pc, [pc, r9, lsl #2]
   12c6c:	b	13630 <__assert_fail@plt+0x249c>
   12c70:	andeq	r2, r1, r0, ror #26
   12c74:	andeq	r3, r1, r0, lsl #2
   12c78:	andeq	r2, r1, r4, asr sp
   12c7c:	andeq	r3, r1, r4, ror r1
   12c80:	andeq	r3, r1, ip, asr #2
   12c84:	ldr	r3, [pc, #676]	; 12f30 <__assert_fail@plt+0x1d9c>
   12c88:	mov	r0, r6
   12c8c:	ldr	r6, [r3]
   12c90:	bl	17064 <__assert_fail@plt+0x5ed0>
   12c94:	ldr	r2, [pc, #664]	; 12f34 <__assert_fail@plt+0x1da0>
   12c98:	mov	r1, #1
   12c9c:	mov	r3, r0
   12ca0:	mov	r0, r6
   12ca4:	bl	110d4 <__fprintf_chk@plt>
   12ca8:	b	1235c <__assert_fail@plt+0x11c8>
   12cac:	mov	r6, r8
   12cb0:	b	12394 <__assert_fail@plt+0x1200>
   12cb4:	ldr	r3, [pc, #628]	; 12f30 <__assert_fail@plt+0x1d9c>
   12cb8:	mov	r2, #17
   12cbc:	mov	r1, #1
   12cc0:	ldr	r3, [r3]
   12cc4:	ldr	r0, [pc, #620]	; 12f38 <__assert_fail@plt+0x1da4>
   12cc8:	bl	10fc0 <fwrite@plt>
   12ccc:	ldrb	r3, [r7, #20]
   12cd0:	str	r3, [sp, #24]
   12cd4:	b	128c8 <__assert_fail@plt+0x1734>
   12cd8:	ldr	r2, [pc, #604]	; 12f3c <__assert_fail@plt+0x1da8>
   12cdc:	mov	r0, r8
   12ce0:	mov	r1, #62	; 0x3e
   12ce4:	strd	r2, [sp]
   12ce8:	mov	r3, #63	; 0x3f
   12cec:	mov	r2, #1
   12cf0:	bl	1117c <__snprintf_chk@plt>
   12cf4:	add	r8, r8, r0
   12cf8:	b	128b8 <__assert_fail@plt+0x1724>
   12cfc:	ldr	r3, [r7, #36]	; 0x24
   12d00:	cmp	r3, #3
   12d04:	beq	12618 <__assert_fail@plt+0x1484>
   12d08:	cmp	r4, #0
   12d0c:	mov	r2, #5
   12d10:	ldr	r5, [r5]
   12d14:	beq	134c4 <__assert_fail@plt+0x2330>
   12d18:	ldr	r1, [pc, #544]	; 12f40 <__assert_fail@plt+0x1dac>
   12d1c:	mov	r0, #0
   12d20:	bl	10f84 <dcgettext@plt>
   12d24:	mov	r1, #0
   12d28:	str	r4, [sp, #8]
   12d2c:	vstr	d8, [sp]
   12d30:	str	r1, [sp, #12]
   12d34:	mov	r2, r0
   12d38:	mov	r0, r5
   12d3c:	bl	11014 <error@plt>
   12d40:	b	12618 <__assert_fail@plt+0x1484>
   12d44:	mov	r4, #0
   12d48:	mov	r9, #3
   12d4c:	ldr	r1, [pc, #496]	; 12f44 <__assert_fail@plt+0x1db0>
   12d50:	b	12a20 <__assert_fail@plt+0x188c>
   12d54:	vcmpe.f64	d9, #0.0
   12d58:	vmrs	APSR_nzcv, fpscr
   12d5c:	bmi	13100 <__assert_fail@plt+0x1f6c>
   12d60:	vmov	r0, r1, d9
   12d64:	bl	195f4 <__assert_fail@plt+0x8460>
   12d68:	mov	r6, r0
   12d6c:	mov	r9, r1
   12d70:	bl	19584 <__assert_fail@plt+0x83f0>
   12d74:	vmov	d7, r0, r1
   12d78:	vcmpe.f64	d7, d9
   12d7c:	vmrs	APSR_nzcv, fpscr
   12d80:	bpl	12d94 <__assert_fail@plt+0x1c00>
   12d84:	adds	r0, r6, #1
   12d88:	adc	r1, r9, #0
   12d8c:	bl	19584 <__assert_fail@plt+0x83f0>
   12d90:	vmov	d7, r0, r1
   12d94:	cmp	r4, #0
   12d98:	vadd.f64	d10, d10, d7
   12d9c:	beq	12dc0 <__assert_fail@plt+0x1c2c>
   12da0:	subs	r6, r4, #1
   12da4:	beq	135b8 <__assert_fail@plt+0x2424>
   12da8:	vldr	d7, [pc, #360]	; 12f18 <__assert_fail@plt+0x1d84>
   12dac:	vmov.f64	d6, d7
   12db0:	subs	r6, r6, #1
   12db4:	vmul.f64	d7, d7, d6
   12db8:	bne	12db0 <__assert_fail@plt+0x1c1c>
   12dbc:	vdiv.f64	d10, d10, d7
   12dc0:	ldr	r3, [sp, #24]
   12dc4:	cmp	r3, #0
   12dc8:	beq	12df4 <__assert_fail@plt+0x1c60>
   12dcc:	vstr	d10, [sp]
   12dd0:	ldr	r1, [pc, #344]	; 12f30 <__assert_fail@plt+0x1d9c>
   12dd4:	ldr	r3, [pc, #364]	; 12f48 <__assert_fail@plt+0x1db4>
   12dd8:	cmp	sl, #0
   12ddc:	ldr	r2, [pc, #360]	; 12f4c <__assert_fail@plt+0x1db8>
   12de0:	ldr	r0, [r1]
   12de4:	moveq	r2, r3
   12de8:	mov	r1, #1
   12dec:	mov	r3, r4
   12df0:	bl	110d4 <__fprintf_chk@plt>
   12df4:	ldr	r3, [pc, #340]	; 12f50 <__assert_fail@plt+0x1dbc>
   12df8:	add	r1, sp, #84	; 0x54
   12dfc:	add	r9, sp, #148	; 0x94
   12e00:	ldrb	r2, [r3, #4]
   12e04:	ldr	r0, [r3]
   12e08:	mov	r3, #128	; 0x80
   12e0c:	vstr	d10, [sp, #8]
   12e10:	str	r4, [sp, #4]
   12e14:	str	r0, [r8]
   12e18:	str	r1, [sp]
   12e1c:	mov	r0, r9
   12e20:	strb	r2, [r8, #4]
   12e24:	mov	r1, r3
   12e28:	mov	r2, #1
   12e2c:	bl	1117c <__snprintf_chk@plt>
   12e30:	cmp	r0, #127	; 0x7f
   12e34:	bhi	135d4 <__assert_fail@plt+0x2440>
   12e38:	ldr	r4, [r7, #16]
   12e3c:	ldrb	r6, [r7, #20]
   12e40:	cmp	r4, #0
   12e44:	beq	12e64 <__assert_fail@plt+0x1cd0>
   12e48:	mov	r0, r9
   12e4c:	bl	11080 <strlen@plt>
   12e50:	mov	r1, r4
   12e54:	mov	r3, #128	; 0x80
   12e58:	rsb	r2, r0, #127	; 0x7f
   12e5c:	mov	r0, r9
   12e60:	bl	10ee8 <__strncat_chk@plt>
   12e64:	cmp	r6, #0
   12e68:	beq	12e94 <__assert_fail@plt+0x1d00>
   12e6c:	ldr	r3, [pc, #188]	; 12f30 <__assert_fail@plt+0x1d9c>
   12e70:	mov	r0, r9
   12e74:	ldr	r4, [r3]
   12e78:	bl	17064 <__assert_fail@plt+0x5ed0>
   12e7c:	vstr	d8, [sp]
   12e80:	ldr	r2, [pc, #204]	; 12f54 <__assert_fail@plt+0x1dc0>
   12e84:	mov	r1, #1
   12e88:	str	r0, [sp, #8]
   12e8c:	mov	r0, r4
   12e90:	bl	110d4 <__fprintf_chk@plt>
   12e94:	ldr	r4, [r7, #28]
   12e98:	mov	r0, r9
   12e9c:	bl	11080 <strlen@plt>
   12ea0:	cmp	r4, #0
   12ea4:	ldr	r2, [r7, #8]
   12ea8:	beq	12eb4 <__assert_fail@plt+0x1d20>
   12eac:	cmp	r4, r0
   12eb0:	bhi	132e4 <__assert_fail@plt+0x2150>
   12eb4:	add	r0, r0, #1
   12eb8:	cmp	r0, r2
   12ebc:	bcc	12ec4 <__assert_fail@plt+0x1d30>
   12ec0:	bl	1222c <__assert_fail@plt+0x1098>
   12ec4:	ldr	r4, [pc, #140]	; 12f58 <__assert_fail@plt+0x1dc4>
   12ec8:	mov	r1, r9
   12ecc:	ldr	r0, [r7, #12]
   12ed0:	bl	10fe4 <strcpy@plt>
   12ed4:	ldr	r1, [r4]
   12ed8:	ldr	r0, [r7, #56]	; 0x38
   12edc:	cmp	r0, #0
   12ee0:	beq	12eec <__assert_fail@plt+0x1d58>
   12ee4:	bl	10ed0 <fputs_unlocked@plt>
   12ee8:	ldr	r1, [r4]
   12eec:	ldr	r0, [r7, #12]
   12ef0:	bl	10ed0 <fputs_unlocked@plt>
   12ef4:	ldr	r0, [r7, #60]	; 0x3c
   12ef8:	cmp	r0, #0
   12efc:	moveq	r0, #1
   12f00:	beq	122e0 <__assert_fail@plt+0x114c>
   12f04:	ldr	r1, [r4]
   12f08:	bl	10ed0 <fputs_unlocked@plt>
   12f0c:	mov	r0, #1
   12f10:	b	122e0 <__assert_fail@plt+0x114c>
   12f14:	nop			; (mov r0, r0)
   12f18:	andeq	r0, r0, r0
   12f1c:	eormi	r0, r4, r0
   12f20:	andeq	r0, r0, r0
   12f24:	stccc	0, cr0, [r0], {-0}
   12f28:	andeq	r0, r0, r0
   12f2c:	mvnmi	r0, #0
   12f30:	muleq	r2, r8, r1
   12f34:			; <UNDEFINED> instruction: 0x00019abc
   12f38:	andeq	r9, r1, r8, lsr sp
   12f3c:	andeq	r9, r1, r0, lsr sp
   12f40:	andeq	r9, r1, r4, ror #24
   12f44:	andeq	r9, r1, r8, ror #19
   12f48:	andeq	r9, r1, ip, lsl #21
   12f4c:	andeq	r9, r1, r8, asr sl
   12f50:	andeq	r9, r1, ip, asr #26
   12f54:	strdeq	r9, [r1], -r0
   12f58:	andeq	ip, r2, r4, lsr #3
   12f5c:	mov	r3, #1
   12f60:	str	r3, [sp, #32]
   12f64:	vmov	r0, r1, d9
   12f68:	bl	195f4 <__assert_fail@plt+0x8460>
   12f6c:	mov	r9, r0
   12f70:	str	r1, [sp, #40]	; 0x28
   12f74:	bl	19584 <__assert_fail@plt+0x83f0>
   12f78:	vmov	d7, r0, r1
   12f7c:	vcmpe.f64	d7, d9
   12f80:	vmrs	APSR_nzcv, fpscr
   12f84:	bpl	12f9c <__assert_fail@plt+0x1e08>
   12f88:	ldr	r3, [sp, #40]	; 0x28
   12f8c:	adds	r0, r9, #1
   12f90:	adc	r1, r3, #0
   12f94:	bl	19584 <__assert_fail@plt+0x83f0>
   12f98:	vmov	d7, r0, r1
   12f9c:	ldr	r3, [sp, #32]
   12fa0:	vadd.f64	d11, d7, d11
   12fa4:	cmp	r3, #0
   12fa8:	beq	12fd0 <__assert_fail@plt+0x1e3c>
   12fac:	ldr	r3, [sp, #32]
   12fb0:	subs	r3, r3, #1
   12fb4:	beq	135b0 <__assert_fail@plt+0x241c>
   12fb8:	vldr	d7, [pc, #968]	; 13388 <__assert_fail@plt+0x21f4>
   12fbc:	vmov.f64	d6, d7
   12fc0:	subs	r3, r3, #1
   12fc4:	vmul.f64	d7, d7, d6
   12fc8:	bne	12fc0 <__assert_fail@plt+0x1e2c>
   12fcc:	vdiv.f64	d11, d11, d7
   12fd0:	vcmpe.f64	d11, #0.0
   12fd4:	vmrs	APSR_nzcv, fpscr
   12fd8:	bmi	1322c <__assert_fail@plt+0x2098>
   12fdc:	vcmpe.f64	d11, d10
   12fe0:	vmrs	APSR_nzcv, fpscr
   12fe4:	blt	12ff0 <__assert_fail@plt+0x1e5c>
   12fe8:	vdiv.f64	d11, d11, d10
   12fec:	add	r4, r4, #1
   12ff0:	vcmp.f64	d11, #0.0
   12ff4:	vmrs	APSR_nzcv, fpscr
   12ff8:	moveq	r9, #0
   12ffc:	bne	134b0 <__assert_fail@plt+0x231c>
   13000:	ldr	r3, [sp, #24]
   13004:	cmp	r3, #0
   13008:	bne	13434 <__assert_fail@plt+0x22a0>
   1300c:	ldr	r3, [pc, #924]	; 133b0 <__assert_fail@plt+0x221c>
   13010:	cmn	sl, #1
   13014:	moveq	sl, r9
   13018:	cmp	r4, #8
   1301c:	ldrb	r2, [r3, #6]
   13020:	ldrh	r1, [r3, #4]
   13024:	ldr	r0, [r3]
   13028:	ldrls	r3, [pc, #900]	; 133b4 <__assert_fail@plt+0x2220>
   1302c:	strb	r2, [r8, #6]
   13030:	addls	r3, r3, r4, lsl #2
   13034:	ldrhi	r2, [pc, #892]	; 133b8 <__assert_fail@plt+0x2224>
   13038:	ldrls	r2, [r3, #88]	; 0x58
   1303c:	add	r9, sp, #148	; 0x94
   13040:	add	r3, sp, #84	; 0x54
   13044:	strh	r1, [r8, #4]
   13048:	str	r0, [r8]
   1304c:	mov	r1, #127	; 0x7f
   13050:	str	r2, [sp, #16]
   13054:	str	r3, [sp]
   13058:	vstr	d11, [sp, #8]
   1305c:	str	sl, [sp, #4]
   13060:	mov	r0, r9
   13064:	mov	r3, #128	; 0x80
   13068:	mov	r2, #1
   1306c:	bl	1117c <__snprintf_chk@plt>
   13070:	cmp	r0, #126	; 0x7e
   13074:	bhi	135f8 <__assert_fail@plt+0x2464>
   13078:	cmp	r4, #0
   1307c:	sub	r6, r6, #4
   13080:	clz	r6, r6
   13084:	lsr	r6, r6, #5
   13088:	moveq	r6, #0
   1308c:	cmp	r6, #0
   13090:	bne	1353c <__assert_fail@plt+0x23a8>
   13094:	ldrb	r6, [r7, #20]
   13098:	cmp	r6, #0
   1309c:	bne	1345c <__assert_fail@plt+0x22c8>
   130a0:	ldr	r4, [r7, #16]
   130a4:	cmp	r4, #0
   130a8:	bne	12e48 <__assert_fail@plt+0x1cb4>
   130ac:	b	12e94 <__assert_fail@plt+0x1d00>
   130b0:	str	r9, [sp, #32]
   130b4:	vneg.f64	d9, d9
   130b8:	vmov	r0, r1, d9
   130bc:	bl	195f4 <__assert_fail@plt+0x8460>
   130c0:	mov	r2, r0
   130c4:	mov	r3, r1
   130c8:	strd	r2, [sp, #40]	; 0x28
   130cc:	bl	19584 <__assert_fail@plt+0x83f0>
   130d0:	ldrd	r2, [sp, #40]	; 0x28
   130d4:	vmov	d7, r0, r1
   130d8:	vcmpe.f64	d9, d7
   130dc:	vmrs	APSR_nzcv, fpscr
   130e0:	ble	130ec <__assert_fail@plt+0x1f58>
   130e4:	adds	r2, r2, #1
   130e8:	adc	r3, r3, #0
   130ec:	rsbs	r0, r2, #0
   130f0:	rsc	r1, r3, #0
   130f4:	bl	19584 <__assert_fail@plt+0x83f0>
   130f8:	vmov	d7, r0, r1
   130fc:	b	12f9c <__assert_fail@plt+0x1e08>
   13100:	vneg.f64	d9, d9
   13104:	vmov	r0, r1, d9
   13108:	bl	195f4 <__assert_fail@plt+0x8460>
   1310c:	mov	r2, r0
   13110:	mov	r3, r1
   13114:	strd	r2, [sp, #32]
   13118:	bl	19584 <__assert_fail@plt+0x83f0>
   1311c:	ldrd	r2, [sp, #32]
   13120:	vmov	d7, r0, r1
   13124:	vcmpe.f64	d9, d7
   13128:	vmrs	APSR_nzcv, fpscr
   1312c:	ble	13138 <__assert_fail@plt+0x1fa4>
   13130:	adds	r2, r2, #1
   13134:	adc	r3, r3, #0
   13138:	rsbs	r0, r2, #0
   1313c:	rsc	r1, r3, #0
   13140:	bl	19584 <__assert_fail@plt+0x83f0>
   13144:	vmov	d7, r0, r1
   13148:	b	12d94 <__assert_fail@plt+0x1c00>
   1314c:	vcmpe.f64	d9, #0.0
   13150:	vldr	d7, [pc, #568]	; 13390 <__assert_fail@plt+0x21fc>
   13154:	vmrs	APSR_nzcv, fpscr
   13158:	vsubmi.f64	d7, d9, d7
   1315c:	vaddpl.f64	d7, d9, d7
   13160:	vmov	r0, r1, d7
   13164:	bl	195f4 <__assert_fail@plt+0x8460>
   13168:	bl	19584 <__assert_fail@plt+0x83f0>
   1316c:	vmov	d7, r0, r1
   13170:	b	12d94 <__assert_fail@plt+0x1c00>
   13174:	vmov	r0, r1, d9
   13178:	bl	195f4 <__assert_fail@plt+0x8460>
   1317c:	bl	19584 <__assert_fail@plt+0x83f0>
   13180:	vmov	d7, r0, r1
   13184:	b	12d94 <__assert_fail@plt+0x1c00>
   13188:	mov	r3, #1
   1318c:	str	r3, [sp, #32]
   13190:	vcmpe.f64	d9, #0.0
   13194:	vldr	d7, [pc, #500]	; 13390 <__assert_fail@plt+0x21fc>
   13198:	vmrs	APSR_nzcv, fpscr
   1319c:	vsubmi.f64	d7, d9, d7
   131a0:	vaddpl.f64	d7, d9, d7
   131a4:	vmov	r0, r1, d7
   131a8:	bl	195f4 <__assert_fail@plt+0x8460>
   131ac:	bl	19584 <__assert_fail@plt+0x83f0>
   131b0:	vmov	d7, r0, r1
   131b4:	b	12f9c <__assert_fail@plt+0x1e08>
   131b8:	mov	r3, #1
   131bc:	str	r3, [sp, #32]
   131c0:	vcmpe.f64	d9, #0.0
   131c4:	vmrs	APSR_nzcv, fpscr
   131c8:	bpl	12f64 <__assert_fail@plt+0x1dd0>
   131cc:	b	130b4 <__assert_fail@plt+0x1f20>
   131d0:	vmov	r0, r1, d9
   131d4:	str	r3, [sp, #32]
   131d8:	bl	195f4 <__assert_fail@plt+0x8460>
   131dc:	bl	19584 <__assert_fail@plt+0x83f0>
   131e0:	ldr	r3, [sp, #32]
   131e4:	vmov	d7, r0, r1
   131e8:	vadd.f64	d11, d7, d11
   131ec:	b	12fb8 <__assert_fail@plt+0x1e24>
   131f0:	ldrb	r1, [r3, #1]
   131f4:	ldrb	r2, [r7, #20]
   131f8:	cmp	r1, #105	; 0x69
   131fc:	beq	13320 <__assert_fail@plt+0x218c>
   13200:	vldr	s15, [sp, #24]
   13204:	vcvt.f64.s32	d7, s15
   13208:	b	12520 <__assert_fail@plt+0x138c>
   1320c:	mov	r9, #4
   13210:	ldr	r1, [pc, #420]	; 133bc <__assert_fail@plt+0x2228>
   13214:	b	12a20 <__assert_fail@plt+0x188c>
   13218:	mov	r5, #1
   1321c:	b	12544 <__assert_fail@plt+0x13b0>
   13220:	mov	r9, #5
   13224:	ldr	r1, [pc, #404]	; 133c0 <__assert_fail@plt+0x222c>
   13228:	b	12a20 <__assert_fail@plt+0x188c>
   1322c:	vneg.f64	d7, d11
   13230:	vcmpe.f64	d7, d10
   13234:	vmrs	APSR_nzcv, fpscr
   13238:	bge	12fe8 <__assert_fail@plt+0x1e54>
   1323c:	vldr	d6, [pc, #324]	; 13388 <__assert_fail@plt+0x21f4>
   13240:	vcmpe.f64	d7, d6
   13244:	vmrs	APSR_nzcv, fpscr
   13248:	movmi	r9, #1
   1324c:	movpl	r9, #0
   13250:	cmp	r4, #0
   13254:	moveq	r9, #0
   13258:	b	13000 <__assert_fail@plt+0x1e6c>
   1325c:	vldr	d7, [pc, #308]	; 13398 <__assert_fail@plt+0x2204>
   13260:	vldr	d11, [pc, #312]	; 133a0 <__assert_fail@plt+0x220c>
   13264:	vmul.f64	d7, d9, d7
   13268:	vmov	r0, r1, d7
   1326c:	bl	195f4 <__assert_fail@plt+0x8460>
   13270:	bl	19584 <__assert_fail@plt+0x83f0>
   13274:	vmov	d7, r0, r1
   13278:	vmul.f64	d11, d7, d11
   1327c:	vsub.f64	d9, d9, d11
   13280:	cmp	r9, #4
   13284:	ldrls	pc, [pc, r9, lsl #2]
   13288:	b	13638 <__assert_fail@plt+0x24a4>
   1328c:	andeq	r3, r1, r4, asr #5
   13290:			; <UNDEFINED> instruction: 0x000132b8
   13294:	andeq	r3, r1, ip, lsr #5
   13298:	andeq	r3, r1, ip, asr #5
   1329c:	andeq	r3, r1, r0, lsr #5
   132a0:	mov	r3, #0
   132a4:	str	r3, [sp, #32]
   132a8:	b	13190 <__assert_fail@plt+0x1ffc>
   132ac:	mov	r3, #0
   132b0:	str	r3, [sp, #32]
   132b4:	b	131c0 <__assert_fail@plt+0x202c>
   132b8:	mov	r3, #0
   132bc:	str	r3, [sp, #32]
   132c0:	b	130b4 <__assert_fail@plt+0x1f20>
   132c4:	str	r9, [sp, #32]
   132c8:	b	12f64 <__assert_fail@plt+0x1dd0>
   132cc:	vmov	r0, r1, d9
   132d0:	bl	195f4 <__assert_fail@plt+0x8460>
   132d4:	bl	19584 <__assert_fail@plt+0x83f0>
   132d8:	vmov	d7, r0, r1
   132dc:	vadd.f64	d11, d7, d11
   132e0:	b	12fd0 <__assert_fail@plt+0x1e3c>
   132e4:	ldr	r1, [r5, #32]
   132e8:	mov	r3, #2
   132ec:	str	r1, [sp]
   132f0:	str	r3, [sp, #4]
   132f4:	mov	r0, r9
   132f8:	add	r3, sp, #72	; 0x48
   132fc:	ldr	r1, [r7, #12]
   13300:	str	r4, [sp, #72]	; 0x48
   13304:	bl	14a0c <__assert_fail@plt+0x3878>
   13308:	ldrb	r3, [r7, #20]
   1330c:	cmp	r3, #0
   13310:	bne	13514 <__assert_fail@plt+0x2380>
   13314:	ldr	r4, [pc, #168]	; 133c4 <__assert_fail@plt+0x2230>
   13318:	ldr	r1, [r4]
   1331c:	b	12ed8 <__assert_fail@plt+0x1d44>
   13320:	add	r3, r3, #2
   13324:	cmp	r2, #0
   13328:	str	r3, [sp, #56]	; 0x38
   1332c:	bne	134e8 <__assert_fail@plt+0x2354>
   13330:	mov	r3, #1024	; 0x400
   13334:	vldr	d7, [pc, #108]	; 133a8 <__assert_fail@plt+0x2214>
   13338:	str	r3, [sp, #24]
   1333c:	b	12520 <__assert_fail@plt+0x138c>
   13340:	vldr	d7, [pc, #80]	; 13398 <__assert_fail@plt+0x2204>
   13344:	vldr	d10, [pc, #84]	; 133a0 <__assert_fail@plt+0x220c>
   13348:	vmul.f64	d7, d8, d7
   1334c:	vmov	r0, r1, d7
   13350:	bl	195f4 <__assert_fail@plt+0x8460>
   13354:	bl	19584 <__assert_fail@plt+0x83f0>
   13358:	vmov	d7, r0, r1
   1335c:	vmul.f64	d10, d7, d10
   13360:	vsub.f64	d9, d8, d10
   13364:	cmp	r9, #4
   13368:	ldrls	pc, [pc, r9, lsl #2]
   1336c:	b	13640 <__assert_fail@plt+0x24ac>
   13370:	andeq	r2, r1, r0, ror #26
   13374:	andeq	r3, r1, r0, lsl #2
   13378:	andeq	r2, r1, r4, asr sp
   1337c:	andeq	r3, r1, r4, ror r1
   13380:	andeq	r3, r1, ip, asr #2
   13384:	nop			; (mov r0, r0)
   13388:	andeq	r0, r0, r0
   1338c:	eormi	r0, r4, r0
   13390:	andeq	r0, r0, r0
   13394:	svccc	0x00e00000
   13398:	andeq	r0, r0, r0
   1339c:	stccc	0, cr0, [r0], {-0}
   133a0:	andeq	r0, r0, r0
   133a4:	mvnmi	r0, #0
   133a8:	andeq	r0, r0, r0
   133ac:	addsmi	r0, r0, r0
   133b0:	ldrdeq	r9, [r1], -r0
   133b4:	andeq	r9, r1, r8, ror #13
   133b8:			; <UNDEFINED> instruction: 0x00019ab4
   133bc:	strdeq	r9, [r1], -ip
   133c0:	andeq	r9, r1, ip, asr #19
   133c4:	andeq	ip, r2, r4, lsr #3
   133c8:	vcmpe.f64	d9, #0.0
   133cc:	vldr	d6, [pc, #628]	; 13648 <__assert_fail@plt+0x24b4>
   133d0:	vmrs	APSR_nzcv, fpscr
   133d4:	vnegmi.f64	d7, d9
   133d8:	vmovpl.f64	d7, d9
   133dc:	vcmpe.f64	d7, d6
   133e0:	vmrs	APSR_nzcv, fpscr
   133e4:	bpl	1325c <__assert_fail@plt+0x20c8>
   133e8:	vldr	d6, [pc, #600]	; 13648 <__assert_fail@plt+0x24b4>
   133ec:	vldr	d7, [pc, #604]	; 13650 <__assert_fail@plt+0x24bc>
   133f0:	vldr	d11, [pc, #608]	; 13658 <__assert_fail@plt+0x24c4>
   133f4:	vmul.f64	d9, d9, d6
   133f8:	vmul.f64	d7, d9, d7
   133fc:	vmov	r0, r1, d7
   13400:	bl	195f4 <__assert_fail@plt+0x8460>
   13404:	bl	19584 <__assert_fail@plt+0x83f0>
   13408:	vmov	d7, r0, r1
   1340c:	vmul.f64	d11, d7, d11
   13410:	vsub.f64	d9, d9, d11
   13414:	cmp	r9, #4
   13418:	ldrls	pc, [pc, r9, lsl #2]
   1341c:	b	13638 <__assert_fail@plt+0x24a4>
   13420:	andeq	r2, r1, ip, asr pc
   13424:	strheq	r3, [r1], -r0
   13428:			; <UNDEFINED> instruction: 0x000131b8
   1342c:	muleq	r1, ip, r5
   13430:	andeq	r3, r1, r8, lsl #3
   13434:	vstr	d10, [sp, #8]
   13438:	vstr	d11, [sp]
   1343c:	ldr	r3, [pc, #556]	; 13670 <__assert_fail@plt+0x24dc>
   13440:	str	r4, [sp, #16]
   13444:	ldr	r2, [pc, #552]	; 13674 <__assert_fail@plt+0x24e0>
   13448:	ldr	r0, [r3]
   1344c:	mov	r1, #1
   13450:	bl	110d4 <__fprintf_chk@plt>
   13454:	ldr	sl, [r5, #24]
   13458:	b	1300c <__assert_fail@plt+0x1e78>
   1345c:	ldr	r3, [pc, #524]	; 13670 <__assert_fail@plt+0x24dc>
   13460:	mov	r0, r9
   13464:	ldr	r4, [r3]
   13468:	bl	17064 <__assert_fail@plt+0x5ed0>
   1346c:	ldr	r2, [pc, #516]	; 13678 <__assert_fail@plt+0x24e4>
   13470:	mov	r1, #1
   13474:	mov	r3, r0
   13478:	mov	r0, r4
   1347c:	bl	110d4 <__fprintf_chk@plt>
   13480:	b	12e38 <__assert_fail@plt+0x1ca4>
   13484:	vstr	d10, [sp, #8]
   13488:	vstr	d9, [sp]
   1348c:	ldr	r3, [pc, #476]	; 13670 <__assert_fail@plt+0x24dc>
   13490:	str	r4, [sp, #16]
   13494:	ldr	r2, [pc, #480]	; 1367c <__assert_fail@plt+0x24e8>
   13498:	ldr	r0, [r3]
   1349c:	mov	r1, #1
   134a0:	bl	110d4 <__fprintf_chk@plt>
   134a4:	ldrb	r3, [r7, #20]
   134a8:	str	r3, [sp, #24]
   134ac:	b	12920 <__assert_fail@plt+0x178c>
   134b0:	vcmpe.f64	d11, #0.0
   134b4:	vmrs	APSR_nzcv, fpscr
   134b8:	vnegmi.f64	d7, d11
   134bc:	vmovpl.f64	d7, d11
   134c0:	b	1323c <__assert_fail@plt+0x20a8>
   134c4:	ldr	r1, [pc, #436]	; 13680 <__assert_fail@plt+0x24ec>
   134c8:	mov	r0, r4
   134cc:	bl	10f84 <dcgettext@plt>
   134d0:	vstr	d8, [sp]
   134d4:	mov	r1, r4
   134d8:	mov	r2, r0
   134dc:	mov	r0, r5
   134e0:	bl	11014 <error@plt>
   134e4:	b	12618 <__assert_fail@plt+0x1484>
   134e8:	ldr	r2, [pc, #384]	; 13670 <__assert_fail@plt+0x24dc>
   134ec:	mov	r3, #1024	; 0x400
   134f0:	mov	r1, sl
   134f4:	ldr	r0, [r2]
   134f8:	ldr	r2, [pc, #388]	; 13684 <__assert_fail@plt+0x24f0>
   134fc:	bl	110d4 <__fprintf_chk@plt>
   13500:	mov	r3, #1024	; 0x400
   13504:	str	r3, [sp, #24]
   13508:	ldrb	r2, [r7, #20]
   1350c:	vldr	d7, [pc, #332]	; 13660 <__assert_fail@plt+0x24cc>
   13510:	b	12520 <__assert_fail@plt+0x138c>
   13514:	ldr	r3, [pc, #340]	; 13670 <__assert_fail@plt+0x24dc>
   13518:	ldr	r0, [r7, #12]
   1351c:	ldr	r4, [r3]
   13520:	bl	17064 <__assert_fail@plt+0x5ed0>
   13524:	ldr	r2, [pc, #348]	; 13688 <__assert_fail@plt+0x24f4>
   13528:	mov	r1, #1
   1352c:	mov	r3, r0
   13530:	mov	r0, r4
   13534:	bl	110d4 <__fprintf_chk@plt>
   13538:	b	13314 <__assert_fail@plt+0x2180>
   1353c:	rsb	r2, r0, #127	; 0x7f
   13540:	mov	r3, #128	; 0x80
   13544:	ldr	r1, [pc, #320]	; 1368c <__assert_fail@plt+0x24f8>
   13548:	mov	r0, r9
   1354c:	bl	10ee8 <__strncat_chk@plt>
   13550:	b	13094 <__assert_fail@plt+0x1f00>
   13554:	vmul.f64	d9, d8, d9
   13558:	vldr	d7, [pc, #240]	; 13650 <__assert_fail@plt+0x24bc>
   1355c:	vldr	d10, [pc, #244]	; 13658 <__assert_fail@plt+0x24c4>
   13560:	vmul.f64	d7, d9, d7
   13564:	vmov	r0, r1, d7
   13568:	bl	195f4 <__assert_fail@plt+0x8460>
   1356c:	bl	19584 <__assert_fail@plt+0x83f0>
   13570:	vmov	d7, r0, r1
   13574:	vmul.f64	d10, d7, d10
   13578:	vsub.f64	d9, d9, d10
   1357c:	cmp	r9, #4
   13580:	ldrls	pc, [pc, r9, lsl #2]
   13584:	b	13640 <__assert_fail@plt+0x24ac>
   13588:	andeq	r2, r1, r0, ror #26
   1358c:	andeq	r3, r1, r0, lsl #2
   13590:	andeq	r2, r1, r4, asr sp
   13594:	andeq	r3, r1, r4, ror r1
   13598:	andeq	r3, r1, ip, asr #2
   1359c:	vmov	r0, r1, d9
   135a0:	bl	195f4 <__assert_fail@plt+0x8460>
   135a4:	bl	19584 <__assert_fail@plt+0x83f0>
   135a8:	vmov	d7, r0, r1
   135ac:	vadd.f64	d11, d7, d11
   135b0:	vldr	d7, [pc, #144]	; 13648 <__assert_fail@plt+0x24b4>
   135b4:	b	12fcc <__assert_fail@plt+0x1e38>
   135b8:	vldr	d7, [pc, #136]	; 13648 <__assert_fail@plt+0x24b4>
   135bc:	b	12dbc <__assert_fail@plt+0x1c28>
   135c0:	bl	10f90 <__stack_chk_fail@plt>
   135c4:	mov	r4, #0
   135c8:	mov	r9, #6
   135cc:	ldr	r1, [pc, #188]	; 13690 <__assert_fail@plt+0x24fc>
   135d0:	b	12a20 <__assert_fail@plt+0x188c>
   135d4:	mov	r2, #5
   135d8:	ldr	r1, [pc, #180]	; 13694 <__assert_fail@plt+0x2500>
   135dc:	mov	r0, #0
   135e0:	bl	10f84 <dcgettext@plt>
   135e4:	vstr	d10, [sp]
   135e8:	mov	r1, #0
   135ec:	mov	r2, r0
   135f0:	mov	r0, #1
   135f4:	bl	11014 <error@plt>
   135f8:	mov	r2, #5
   135fc:	ldr	r1, [pc, #144]	; 13694 <__assert_fail@plt+0x2500>
   13600:	mov	r0, #0
   13604:	bl	10f84 <dcgettext@plt>
   13608:	vstr	d11, [sp]
   1360c:	mov	r1, #0
   13610:	mov	r2, r0
   13614:	mov	r0, #1
   13618:	bl	11014 <error@plt>
   1361c:	mov	r4, #0
   13620:	mov	r1, r4
   13624:	b	12a20 <__assert_fail@plt+0x188c>
   13628:	vldr	d11, [pc, #56]	; 13668 <__assert_fail@plt+0x24d4>
   1362c:	b	12fb8 <__assert_fail@plt+0x1e24>
   13630:	vldr	d10, [pc, #48]	; 13668 <__assert_fail@plt+0x24d4>
   13634:	b	12da8 <__assert_fail@plt+0x1c14>
   13638:	vldr	d11, [pc, #40]	; 13668 <__assert_fail@plt+0x24d4>
   1363c:	b	12fdc <__assert_fail@plt+0x1e48>
   13640:	vldr	d10, [pc, #32]	; 13668 <__assert_fail@plt+0x24d4>
   13644:	b	12dc0 <__assert_fail@plt+0x1c2c>
   13648:	andeq	r0, r0, r0
   1364c:	eormi	r0, r4, r0
   13650:	andeq	r0, r0, r0
   13654:	stccc	0, cr0, [r0], {-0}
   13658:	andeq	r0, r0, r0
   1365c:	mvnmi	r0, #0
   13660:	andeq	r0, r0, r0
   13664:	addsmi	r0, r0, r0
	...
   13670:	muleq	r2, r8, r1
   13674:	andeq	r9, r1, r4, lsr #27
   13678:	ldrdeq	r9, [r1], -r8
   1367c:	andeq	r9, r1, r0, lsl #27
   13680:			; <UNDEFINED> instruction: 0x00019cb0
   13684:	andeq	r9, r1, r4, lsr #23
   13688:	andeq	r9, r1, r4, lsr #28
   1368c:	andeq	fp, r1, ip, lsl #10
   13690:	muleq	r1, ip, r9
   13694:	andeq	r9, r1, r4, asr sp
   13698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1369c:	mov	r5, #0
   136a0:	ldr	r9, [pc, #440]	; 13860 <__assert_fail@plt+0x26cc>
   136a4:	ldr	fp, [pc, #440]	; 13864 <__assert_fail@plt+0x26d0>
   136a8:	sub	sp, sp, #12
   136ac:	ldr	r2, [r9, #36]	; 0x24
   136b0:	mov	r6, r0
   136b4:	mov	r8, #1
   136b8:	mov	r7, r5
   136bc:	mov	sl, r5
   136c0:	str	r1, [sp, #4]
   136c4:	adds	r5, r5, #1
   136c8:	adc	r7, r7, #0
   136cc:	cmp	r2, #256	; 0x100
   136d0:	ldrb	r3, [r6]
   136d4:	beq	1375c <__assert_fail@plt+0x25c8>
   136d8:	cmp	r3, r2
   136dc:	beq	1383c <__assert_fail@plt+0x26a8>
   136e0:	cmp	r3, #0
   136e4:	beq	13704 <__assert_fail@plt+0x2570>
   136e8:	mov	r4, r6
   136ec:	b	136f8 <__assert_fail@plt+0x2564>
   136f0:	cmp	r3, r2
   136f4:	beq	137d8 <__assert_fail@plt+0x2644>
   136f8:	ldrb	r3, [r4, #1]!
   136fc:	cmp	r3, #0
   13700:	bne	136f0 <__assert_fail@plt+0x255c>
   13704:	mov	r3, r7
   13708:	mov	r2, r5
   1370c:	mov	r0, r6
   13710:	bl	12254 <__assert_fail@plt+0x10c0>
   13714:	ldr	r3, [sp, #4]
   13718:	cmp	r0, #0
   1371c:	moveq	r8, #0
   13720:	cmp	r3, #0
   13724:	beq	13750 <__assert_fail@plt+0x25bc>
   13728:	ldr	r3, [pc, #308]	; 13864 <__assert_fail@plt+0x26d0>
   1372c:	ldrb	r1, [r9, #40]	; 0x28
   13730:	ldr	r0, [r3]
   13734:	ldr	r3, [r0, #20]
   13738:	ldr	r2, [r0, #24]
   1373c:	cmp	r3, r2
   13740:	addcc	r2, r3, #1
   13744:	strcc	r2, [r0, #20]
   13748:	strbcc	r1, [r3]
   1374c:	bcs	13858 <__assert_fail@plt+0x26c4>
   13750:	mov	r0, r8
   13754:	add	sp, sp, #12
   13758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1375c:	cmp	r3, #0
   13760:	str	r3, [sp]
   13764:	beq	13704 <__assert_fail@plt+0x2570>
   13768:	bl	11068 <__ctype_b_loc@plt>
   1376c:	mov	r4, r6
   13770:	ldr	r3, [sp]
   13774:	ldr	r1, [r0]
   13778:	b	13788 <__assert_fail@plt+0x25f4>
   1377c:	ldrb	r3, [r4, #1]!
   13780:	cmp	r3, #0
   13784:	beq	13704 <__assert_fail@plt+0x2570>
   13788:	lsl	r2, r3, #1
   1378c:	ldrh	r2, [r1, r2]
   13790:	cmp	r3, #10
   13794:	movne	r3, r2
   13798:	orreq	r3, r2, #1
   1379c:	tst	r3, #1
   137a0:	bne	1377c <__assert_fail@plt+0x25e8>
   137a4:	ldrb	r3, [r4]
   137a8:	cmp	r3, #0
   137ac:	beq	13704 <__assert_fail@plt+0x2570>
   137b0:	lsl	r2, r3, #1
   137b4:	ldrh	r2, [r1, r2]
   137b8:	cmp	r3, #10
   137bc:	movne	r3, r2
   137c0:	orreq	r3, r2, #1
   137c4:	tst	r3, #1
   137c8:	beq	1382c <__assert_fail@plt+0x2698>
   137cc:	ldrb	r3, [r4]
   137d0:	cmp	r3, #0
   137d4:	beq	13704 <__assert_fail@plt+0x2570>
   137d8:	mov	r2, r5
   137dc:	mov	r3, r7
   137e0:	strb	sl, [r4]
   137e4:	mov	r0, r6
   137e8:	bl	12254 <__assert_fail@plt+0x10c0>
   137ec:	ldr	r3, [fp]
   137f0:	ldr	r2, [r9, #36]	; 0x24
   137f4:	ldr	ip, [r3, #20]
   137f8:	ldr	lr, [r3, #24]
   137fc:	cmp	r0, #0
   13800:	moveq	r8, #0
   13804:	cmp	r2, #256	; 0x100
   13808:	movne	r1, r2
   1380c:	moveq	r1, #32
   13810:	cmp	ip, lr
   13814:	addcc	r0, ip, #1
   13818:	strcc	r0, [r3, #20]
   1381c:	strbcc	r1, [ip]
   13820:	bcs	13844 <__assert_fail@plt+0x26b0>
   13824:	add	r6, r4, #1
   13828:	b	136c4 <__assert_fail@plt+0x2530>
   1382c:	ldrb	r3, [r4, #1]!
   13830:	cmp	r3, #0
   13834:	bne	137b0 <__assert_fail@plt+0x261c>
   13838:	b	13704 <__assert_fail@plt+0x2570>
   1383c:	mov	r4, r6
   13840:	b	137d0 <__assert_fail@plt+0x263c>
   13844:	uxtb	r1, r1
   13848:	mov	r0, r3
   1384c:	bl	110f8 <__overflow@plt>
   13850:	ldr	r2, [r9, #36]	; 0x24
   13854:	b	13824 <__assert_fail@plt+0x2690>
   13858:	bl	110f8 <__overflow@plt>
   1385c:	b	13750 <__assert_fail@plt+0x25bc>
   13860:	andeq	ip, r2, r0, lsl r1
   13864:	andeq	ip, r2, r4, lsr #3
   13868:	ldr	r3, [pc, #1320]	; 13d98 <__assert_fail@plt+0x2c04>
   1386c:	push	{r7, lr}
   13870:	sub	sp, sp, #96	; 0x60
   13874:	ldr	r3, [r3]
   13878:	subs	r4, r0, #0
   1387c:	str	r3, [sp, #92]	; 0x5c
   13880:	beq	138bc <__assert_fail@plt+0x2728>
   13884:	ldr	r3, [pc, #1296]	; 13d9c <__assert_fail@plt+0x2c08>
   13888:	mov	r2, #5
   1388c:	ldr	r1, [pc, #1292]	; 13da0 <__assert_fail@plt+0x2c0c>
   13890:	mov	r0, #0
   13894:	ldr	r5, [r3]
   13898:	bl	10f84 <dcgettext@plt>
   1389c:	ldr	r3, [pc, #1280]	; 13da4 <__assert_fail@plt+0x2c10>
   138a0:	mov	r1, #1
   138a4:	ldr	r3, [r3]
   138a8:	mov	r2, r0
   138ac:	mov	r0, r5
   138b0:	bl	110d4 <__fprintf_chk@plt>
   138b4:	mov	r0, r4
   138b8:	bl	11074 <exit@plt>
   138bc:	mov	r2, #5
   138c0:	ldr	r1, [pc, #1248]	; 13da8 <__assert_fail@plt+0x2c14>
   138c4:	bl	10f84 <dcgettext@plt>
   138c8:	ldr	r6, [pc, #1236]	; 13da4 <__assert_fail@plt+0x2c10>
   138cc:	ldr	r5, [pc, #1240]	; 13dac <__assert_fail@plt+0x2c18>
   138d0:	ldr	r2, [r6]
   138d4:	mov	r1, r0
   138d8:	mov	r0, #1
   138dc:	bl	110bc <__printf_chk@plt>
   138e0:	mov	r2, #5
   138e4:	ldr	r1, [pc, #1220]	; 13db0 <__assert_fail@plt+0x2c1c>
   138e8:	mov	r0, r4
   138ec:	bl	10f84 <dcgettext@plt>
   138f0:	ldr	r1, [r5]
   138f4:	bl	10ed0 <fputs_unlocked@plt>
   138f8:	mov	r2, #5
   138fc:	ldr	r1, [pc, #1200]	; 13db4 <__assert_fail@plt+0x2c20>
   13900:	mov	r0, r4
   13904:	bl	10f84 <dcgettext@plt>
   13908:	ldr	r1, [r5]
   1390c:	bl	10ed0 <fputs_unlocked@plt>
   13910:	mov	r2, #5
   13914:	ldr	r1, [pc, #1180]	; 13db8 <__assert_fail@plt+0x2c24>
   13918:	mov	r0, r4
   1391c:	bl	10f84 <dcgettext@plt>
   13920:	ldr	r1, [r5]
   13924:	bl	10ed0 <fputs_unlocked@plt>
   13928:	mov	r2, #5
   1392c:	ldr	r1, [pc, #1160]	; 13dbc <__assert_fail@plt+0x2c28>
   13930:	mov	r0, r4
   13934:	bl	10f84 <dcgettext@plt>
   13938:	ldr	r1, [r5]
   1393c:	bl	10ed0 <fputs_unlocked@plt>
   13940:	mov	r2, #5
   13944:	ldr	r1, [pc, #1140]	; 13dc0 <__assert_fail@plt+0x2c2c>
   13948:	mov	r0, r4
   1394c:	bl	10f84 <dcgettext@plt>
   13950:	ldr	r1, [r5]
   13954:	bl	10ed0 <fputs_unlocked@plt>
   13958:	mov	r2, #5
   1395c:	ldr	r1, [pc, #1120]	; 13dc4 <__assert_fail@plt+0x2c30>
   13960:	mov	r0, r4
   13964:	bl	10f84 <dcgettext@plt>
   13968:	ldr	r1, [r5]
   1396c:	bl	10ed0 <fputs_unlocked@plt>
   13970:	mov	r2, #5
   13974:	ldr	r1, [pc, #1100]	; 13dc8 <__assert_fail@plt+0x2c34>
   13978:	mov	r0, r4
   1397c:	bl	10f84 <dcgettext@plt>
   13980:	ldr	r1, [r5]
   13984:	bl	10ed0 <fputs_unlocked@plt>
   13988:	mov	r2, #5
   1398c:	ldr	r1, [pc, #1080]	; 13dcc <__assert_fail@plt+0x2c38>
   13990:	mov	r0, r4
   13994:	bl	10f84 <dcgettext@plt>
   13998:	ldr	r1, [r5]
   1399c:	bl	10ed0 <fputs_unlocked@plt>
   139a0:	mov	r2, #5
   139a4:	ldr	r1, [pc, #1060]	; 13dd0 <__assert_fail@plt+0x2c3c>
   139a8:	mov	r0, r4
   139ac:	bl	10f84 <dcgettext@plt>
   139b0:	ldr	r1, [r5]
   139b4:	bl	10ed0 <fputs_unlocked@plt>
   139b8:	mov	r2, #5
   139bc:	ldr	r1, [pc, #1040]	; 13dd4 <__assert_fail@plt+0x2c40>
   139c0:	mov	r0, r4
   139c4:	bl	10f84 <dcgettext@plt>
   139c8:	ldr	r1, [r5]
   139cc:	bl	10ed0 <fputs_unlocked@plt>
   139d0:	mov	r2, #5
   139d4:	ldr	r1, [pc, #1020]	; 13dd8 <__assert_fail@plt+0x2c44>
   139d8:	mov	r0, r4
   139dc:	bl	10f84 <dcgettext@plt>
   139e0:	ldr	r1, [r5]
   139e4:	bl	10ed0 <fputs_unlocked@plt>
   139e8:	mov	r2, #5
   139ec:	ldr	r1, [pc, #1000]	; 13ddc <__assert_fail@plt+0x2c48>
   139f0:	mov	r0, r4
   139f4:	bl	10f84 <dcgettext@plt>
   139f8:	ldr	r1, [r5]
   139fc:	bl	10ed0 <fputs_unlocked@plt>
   13a00:	mov	r2, #5
   13a04:	ldr	r1, [pc, #980]	; 13de0 <__assert_fail@plt+0x2c4c>
   13a08:	mov	r0, r4
   13a0c:	bl	10f84 <dcgettext@plt>
   13a10:	ldr	r1, [r5]
   13a14:	bl	10ed0 <fputs_unlocked@plt>
   13a18:	mov	r2, #5
   13a1c:	ldr	r1, [pc, #960]	; 13de4 <__assert_fail@plt+0x2c50>
   13a20:	mov	r0, r4
   13a24:	bl	10f84 <dcgettext@plt>
   13a28:	ldr	r1, [r5]
   13a2c:	bl	10ed0 <fputs_unlocked@plt>
   13a30:	mov	r2, #5
   13a34:	ldr	r1, [pc, #940]	; 13de8 <__assert_fail@plt+0x2c54>
   13a38:	mov	r0, r4
   13a3c:	bl	10f84 <dcgettext@plt>
   13a40:	ldr	r1, [r5]
   13a44:	bl	10ed0 <fputs_unlocked@plt>
   13a48:	mov	r2, #5
   13a4c:	ldr	r1, [pc, #920]	; 13dec <__assert_fail@plt+0x2c58>
   13a50:	mov	r0, r4
   13a54:	bl	10f84 <dcgettext@plt>
   13a58:	ldr	r1, [r5]
   13a5c:	bl	10ed0 <fputs_unlocked@plt>
   13a60:	mov	r2, #5
   13a64:	ldr	r1, [pc, #900]	; 13df0 <__assert_fail@plt+0x2c5c>
   13a68:	mov	r0, r4
   13a6c:	bl	10f84 <dcgettext@plt>
   13a70:	ldr	r1, [r5]
   13a74:	bl	10ed0 <fputs_unlocked@plt>
   13a78:	mov	r2, #5
   13a7c:	ldr	r1, [pc, #880]	; 13df4 <__assert_fail@plt+0x2c60>
   13a80:	mov	r0, r4
   13a84:	bl	10f84 <dcgettext@plt>
   13a88:	ldr	r1, [r5]
   13a8c:	bl	10ed0 <fputs_unlocked@plt>
   13a90:	mov	r2, #5
   13a94:	ldr	r1, [pc, #860]	; 13df8 <__assert_fail@plt+0x2c64>
   13a98:	mov	r0, r4
   13a9c:	bl	10f84 <dcgettext@plt>
   13aa0:	ldr	r1, [r5]
   13aa4:	bl	10ed0 <fputs_unlocked@plt>
   13aa8:	mov	r2, #5
   13aac:	ldr	r1, [pc, #840]	; 13dfc <__assert_fail@plt+0x2c68>
   13ab0:	mov	r0, r4
   13ab4:	bl	10f84 <dcgettext@plt>
   13ab8:	ldr	r1, [r5]
   13abc:	bl	10ed0 <fputs_unlocked@plt>
   13ac0:	mov	r2, #5
   13ac4:	ldr	r1, [pc, #820]	; 13e00 <__assert_fail@plt+0x2c6c>
   13ac8:	mov	r0, r4
   13acc:	bl	10f84 <dcgettext@plt>
   13ad0:	ldr	r1, [r5]
   13ad4:	bl	10ed0 <fputs_unlocked@plt>
   13ad8:	mov	r2, #5
   13adc:	ldr	r1, [pc, #800]	; 13e04 <__assert_fail@plt+0x2c70>
   13ae0:	mov	r0, r4
   13ae4:	bl	10f84 <dcgettext@plt>
   13ae8:	ldr	r1, [r5]
   13aec:	bl	10ed0 <fputs_unlocked@plt>
   13af0:	mov	r2, #5
   13af4:	ldr	r1, [pc, #780]	; 13e08 <__assert_fail@plt+0x2c74>
   13af8:	mov	r0, r4
   13afc:	bl	10f84 <dcgettext@plt>
   13b00:	ldr	r1, [r5]
   13b04:	bl	10ed0 <fputs_unlocked@plt>
   13b08:	mov	r2, #5
   13b0c:	ldr	r1, [pc, #760]	; 13e0c <__assert_fail@plt+0x2c78>
   13b10:	mov	r0, r4
   13b14:	bl	10f84 <dcgettext@plt>
   13b18:	ldr	r1, [r5]
   13b1c:	bl	10ed0 <fputs_unlocked@plt>
   13b20:	mov	r2, #5
   13b24:	ldr	r1, [pc, #740]	; 13e10 <__assert_fail@plt+0x2c7c>
   13b28:	mov	r0, r4
   13b2c:	bl	10f84 <dcgettext@plt>
   13b30:	ldr	r1, [r5]
   13b34:	bl	10ed0 <fputs_unlocked@plt>
   13b38:	mov	r2, #5
   13b3c:	ldr	r1, [pc, #720]	; 13e14 <__assert_fail@plt+0x2c80>
   13b40:	mov	r0, r4
   13b44:	bl	10f84 <dcgettext@plt>
   13b48:	ldr	r1, [r5]
   13b4c:	bl	10ed0 <fputs_unlocked@plt>
   13b50:	mov	r2, #5
   13b54:	ldr	r1, [pc, #700]	; 13e18 <__assert_fail@plt+0x2c84>
   13b58:	mov	r0, r4
   13b5c:	bl	10f84 <dcgettext@plt>
   13b60:	ldr	r1, [r5]
   13b64:	bl	10ed0 <fputs_unlocked@plt>
   13b68:	mov	r2, #5
   13b6c:	ldr	r1, [pc, #680]	; 13e1c <__assert_fail@plt+0x2c88>
   13b70:	mov	r0, r4
   13b74:	bl	10f84 <dcgettext@plt>
   13b78:	ldr	r2, [r6]
   13b7c:	mov	r1, r0
   13b80:	mov	r0, #1
   13b84:	bl	110bc <__printf_chk@plt>
   13b88:	mov	r2, #5
   13b8c:	ldr	r1, [pc, #652]	; 13e20 <__assert_fail@plt+0x2c8c>
   13b90:	mov	r0, r4
   13b94:	bl	10f84 <dcgettext@plt>
   13b98:	ldr	r3, [r6]
   13b9c:	str	r3, [sp, #24]
   13ba0:	str	r3, [sp, #20]
   13ba4:	str	r3, [sp, #16]
   13ba8:	str	r3, [sp, #12]
   13bac:	str	r3, [sp, #8]
   13bb0:	str	r3, [sp, #4]
   13bb4:	str	r3, [sp]
   13bb8:	mov	r2, r3
   13bbc:	mov	r1, r0
   13bc0:	mov	r0, #1
   13bc4:	bl	110bc <__printf_chk@plt>
   13bc8:	ldr	lr, [pc, #596]	; 13e24 <__assert_fail@plt+0x2c90>
   13bcc:	add	ip, sp, #36	; 0x24
   13bd0:	ldm	lr!, {r0, r1, r2, r3}
   13bd4:	stmia	ip!, {r0, r1, r2, r3}
   13bd8:	ldm	lr!, {r0, r1, r2, r3}
   13bdc:	ldr	r6, [sp, #36]	; 0x24
   13be0:	stmia	ip!, {r0, r1, r2, r3}
   13be4:	cmp	r6, #0
   13be8:	ldm	lr!, {r0, r1, r2, r3}
   13bec:	addeq	r5, sp, #36	; 0x24
   13bf0:	stmia	ip!, {r0, r1, r2, r3}
   13bf4:	ldm	lr, {r0, r1}
   13bf8:	stm	ip, {r0, r1}
   13bfc:	beq	13c2c <__assert_fail@plt+0x2a98>
   13c00:	ldr	r7, [pc, #544]	; 13e28 <__assert_fail@plt+0x2c94>
   13c04:	add	r5, sp, #36	; 0x24
   13c08:	b	13c18 <__assert_fail@plt+0x2a84>
   13c0c:	ldr	r6, [r5, #8]!
   13c10:	cmp	r6, #0
   13c14:	beq	13c2c <__assert_fail@plt+0x2a98>
   13c18:	mov	r1, r6
   13c1c:	mov	r0, r7
   13c20:	bl	10ef4 <strcmp@plt>
   13c24:	cmp	r0, #0
   13c28:	bne	13c0c <__assert_fail@plt+0x2a78>
   13c2c:	ldr	r5, [r5, #4]
   13c30:	mov	r2, #5
   13c34:	cmp	r5, #0
   13c38:	ldr	r1, [pc, #492]	; 13e2c <__assert_fail@plt+0x2c98>
   13c3c:	beq	13ce4 <__assert_fail@plt+0x2b50>
   13c40:	mov	r0, #0
   13c44:	bl	10f84 <dcgettext@plt>
   13c48:	ldr	r3, [pc, #480]	; 13e30 <__assert_fail@plt+0x2c9c>
   13c4c:	ldr	r2, [pc, #480]	; 13e34 <__assert_fail@plt+0x2ca0>
   13c50:	mov	r1, r0
   13c54:	mov	r0, #1
   13c58:	bl	110bc <__printf_chk@plt>
   13c5c:	mov	r1, #0
   13c60:	mov	r0, #5
   13c64:	bl	11104 <setlocale@plt>
   13c68:	cmp	r0, #0
   13c6c:	ldreq	r6, [pc, #436]	; 13e28 <__assert_fail@plt+0x2c94>
   13c70:	beq	13c8c <__assert_fail@plt+0x2af8>
   13c74:	mov	r2, #3
   13c78:	ldr	r1, [pc, #440]	; 13e38 <__assert_fail@plt+0x2ca4>
   13c7c:	bl	11164 <strncmp@plt>
   13c80:	ldr	r6, [pc, #416]	; 13e28 <__assert_fail@plt+0x2c94>
   13c84:	cmp	r0, #0
   13c88:	bne	13d74 <__assert_fail@plt+0x2be0>
   13c8c:	mov	r2, #5
   13c90:	ldr	r1, [pc, #420]	; 13e3c <__assert_fail@plt+0x2ca8>
   13c94:	mov	r0, #0
   13c98:	bl	10f84 <dcgettext@plt>
   13c9c:	ldr	r3, [pc, #388]	; 13e28 <__assert_fail@plt+0x2c94>
   13ca0:	ldr	r2, [pc, #392]	; 13e30 <__assert_fail@plt+0x2c9c>
   13ca4:	mov	r1, r0
   13ca8:	mov	r0, #1
   13cac:	bl	110bc <__printf_chk@plt>
   13cb0:	mov	r2, #5
   13cb4:	ldr	r1, [pc, #388]	; 13e40 <__assert_fail@plt+0x2cac>
   13cb8:	mov	r0, #0
   13cbc:	bl	10f84 <dcgettext@plt>
   13cc0:	ldr	r2, [pc, #380]	; 13e44 <__assert_fail@plt+0x2cb0>
   13cc4:	cmp	r5, r6
   13cc8:	ldr	r3, [pc, #376]	; 13e48 <__assert_fail@plt+0x2cb4>
   13ccc:	movne	r3, r2
   13cd0:	mov	r1, r0
   13cd4:	mov	r2, r5
   13cd8:	mov	r0, #1
   13cdc:	bl	110bc <__printf_chk@plt>
   13ce0:	b	138b4 <__assert_fail@plt+0x2720>
   13ce4:	mov	r0, r5
   13ce8:	bl	10f84 <dcgettext@plt>
   13cec:	ldr	r3, [pc, #316]	; 13e30 <__assert_fail@plt+0x2c9c>
   13cf0:	ldr	r2, [pc, #316]	; 13e34 <__assert_fail@plt+0x2ca0>
   13cf4:	mov	r1, r0
   13cf8:	mov	r0, #1
   13cfc:	bl	110bc <__printf_chk@plt>
   13d00:	mov	r1, r5
   13d04:	mov	r0, #5
   13d08:	bl	11104 <setlocale@plt>
   13d0c:	cmp	r0, #0
   13d10:	beq	13d28 <__assert_fail@plt+0x2b94>
   13d14:	mov	r2, #3
   13d18:	ldr	r1, [pc, #280]	; 13e38 <__assert_fail@plt+0x2ca4>
   13d1c:	bl	11164 <strncmp@plt>
   13d20:	cmp	r0, #0
   13d24:	bne	13d6c <__assert_fail@plt+0x2bd8>
   13d28:	mov	r2, #5
   13d2c:	ldr	r1, [pc, #264]	; 13e3c <__assert_fail@plt+0x2ca8>
   13d30:	mov	r0, #0
   13d34:	bl	10f84 <dcgettext@plt>
   13d38:	ldr	r3, [pc, #232]	; 13e28 <__assert_fail@plt+0x2c94>
   13d3c:	ldr	r2, [pc, #236]	; 13e30 <__assert_fail@plt+0x2c9c>
   13d40:	mov	r5, r3
   13d44:	mov	r1, r0
   13d48:	mov	r0, #1
   13d4c:	bl	110bc <__printf_chk@plt>
   13d50:	ldr	r1, [pc, #232]	; 13e40 <__assert_fail@plt+0x2cac>
   13d54:	mov	r2, #5
   13d58:	mov	r0, #0
   13d5c:	bl	10f84 <dcgettext@plt>
   13d60:	ldr	r3, [pc, #224]	; 13e48 <__assert_fail@plt+0x2cb4>
   13d64:	mov	r1, r0
   13d68:	b	13cd4 <__assert_fail@plt+0x2b40>
   13d6c:	ldr	r6, [pc, #180]	; 13e28 <__assert_fail@plt+0x2c94>
   13d70:	mov	r5, r6
   13d74:	mov	r2, #5
   13d78:	ldr	r1, [pc, #204]	; 13e4c <__assert_fail@plt+0x2cb8>
   13d7c:	mov	r0, #0
   13d80:	bl	10f84 <dcgettext@plt>
   13d84:	ldr	r2, [pc, #156]	; 13e28 <__assert_fail@plt+0x2c94>
   13d88:	mov	r1, r0
   13d8c:	mov	r0, #1
   13d90:	bl	110bc <__printf_chk@plt>
   13d94:	b	13c8c <__assert_fail@plt+0x2af8>
   13d98:	andeq	fp, r2, r8, lsl #30
   13d9c:	muleq	r2, r8, r1
   13da0:	andeq	r9, r1, r4, asr #28
   13da4:	andeq	ip, r2, ip, lsl #4
   13da8:	andeq	r9, r1, ip, ror #28
   13dac:	andeq	ip, r2, r4, lsr #3
   13db0:	muleq	r1, r0, lr
   13db4:	andeq	r9, r1, r0, ror #29
   13db8:	andeq	r9, r1, ip, lsr #30
   13dbc:	andeq	r9, r1, r8, ror #30
   13dc0:			; <UNDEFINED> instruction: 0x00019fb0
   13dc4:	andeq	sl, r1, r8, lsr #32
   13dc8:	andeq	sl, r1, r0, lsr #1
   13dcc:	andeq	sl, r1, r8, lsl r1
   13dd0:	andeq	sl, r1, r8, ror #2
   13dd4:	andeq	sl, r1, r4, lsl #4
   13dd8:	andeq	sl, r1, ip, lsl #5
   13ddc:	andeq	sl, r1, r0, lsl r3
   13de0:	andeq	sl, r1, r4, asr r4
   13de4:	strdeq	sl, [r1], -r0
   13de8:	andeq	sl, r1, ip, ror #10
   13dec:			; <UNDEFINED> instruction: 0x0001a5b8
   13df0:	andeq	sl, r1, r0, lsl #12
   13df4:	andeq	sl, r1, r0, asr #12
   13df8:	andeq	sl, r1, r0, ror r6
   13dfc:	andeq	sl, r1, r8, lsr #13
   13e00:			; <UNDEFINED> instruction: 0x0001a6b8
   13e04:	andeq	sl, r1, r0, lsl #14
   13e08:	andeq	sl, r1, r8, lsr #15
   13e0c:	andeq	sl, r1, r8, lsr #16
   13e10:	andeq	sl, r1, r8, lsr #17
   13e14:	andeq	sl, r1, r8, lsr #18
   13e18:	andeq	sl, r1, ip, lsr sl
   13e1c:			; <UNDEFINED> instruction: 0x0001abb0
   13e20:	andeq	sl, r1, ip, asr #26
   13e24:	andeq	r9, r1, r4, ror #14
   13e28:	andeq	r9, r1, ip, lsr lr
   13e2c:	andeq	sl, r1, ip, lsl #30
   13e30:	andeq	sl, r1, r4, lsr #30
   13e34:	andeq	sl, r1, ip, asr #30
   13e38:	andeq	sl, r1, ip, asr pc
   13e3c:	andeq	sl, r1, r8, lsr #31
   13e40:	andeq	sl, r1, r8, asr #31
   13e44:	andeq	sl, r1, r4, lsr #18
   13e48:	andeq	fp, r1, r4, lsr #7
   13e4c:	andeq	sl, r1, r0, ror #30
   13e50:	ldr	r2, [r0]
   13e54:	ldr	r3, [r1]
   13e58:	cmp	r2, r3
   13e5c:	blt	13e6c <__assert_fail@plt+0x2cd8>
   13e60:	movgt	r0, #1
   13e64:	movle	r0, #0
   13e68:	bx	lr
   13e6c:	mvn	r0, #0
   13e70:	bx	lr
   13e74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e78:	mov	r4, r0
   13e7c:	ldr	r8, [pc, #168]	; 13f2c <__assert_fail@plt+0x2d98>
   13e80:	ldr	sl, [pc, #168]	; 13f30 <__assert_fail@plt+0x2d9c>
   13e84:	ldr	r9, [pc, #168]	; 13f34 <__assert_fail@plt+0x2da0>
   13e88:	ldr	ip, [r8]
   13e8c:	ldr	lr, [sl]
   13e90:	mov	r5, r1
   13e94:	cmp	ip, lr
   13e98:	mov	r6, r2
   13e9c:	mov	r7, r3
   13ea0:	ldr	r0, [r9]
   13ea4:	beq	13ec4 <__assert_fail@plt+0x2d30>
   13ea8:	lsl	r3, ip, #4
   13eac:	add	r2, r0, r3
   13eb0:	add	ip, ip, #1
   13eb4:	strd	r4, [r0, r3]
   13eb8:	strd	r6, [r2, #8]
   13ebc:	str	ip, [r8]
   13ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ec4:	cmp	r0, #0
   13ec8:	beq	13ef8 <__assert_fail@plt+0x2d64>
   13ecc:	ldr	r3, [pc, #100]	; 13f38 <__assert_fail@plt+0x2da4>
   13ed0:	cmp	lr, r3
   13ed4:	bhi	13f1c <__assert_fail@plt+0x2d88>
   13ed8:	add	r3, lr, #1
   13edc:	add	lr, r3, lr, lsr #1
   13ee0:	lsl	r1, lr, #4
   13ee4:	str	lr, [sl]
   13ee8:	bl	17630 <__assert_fail@plt+0x649c>
   13eec:	ldr	ip, [r8]
   13ef0:	str	r0, [r9]
   13ef4:	b	13ea8 <__assert_fail@plt+0x2d14>
   13ef8:	cmp	lr, #0
   13efc:	beq	13f20 <__assert_fail@plt+0x2d8c>
   13f00:	lsrs	r3, lr, #28
   13f04:	movne	r3, #1
   13f08:	moveq	r3, #0
   13f0c:	lsls	r1, lr, #4
   13f10:	bmi	13f1c <__assert_fail@plt+0x2d88>
   13f14:	cmp	r3, #0
   13f18:	beq	13ee4 <__assert_fail@plt+0x2d50>
   13f1c:	bl	1781c <__assert_fail@plt+0x6688>
   13f20:	mov	r1, #64	; 0x40
   13f24:	mov	lr, #4
   13f28:	b	13ee4 <__assert_fail@plt+0x2d50>
   13f2c:	andeq	ip, r2, r4, asr #6
   13f30:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13f34:	andeq	ip, r2, r0, asr #6
   13f38:	ldrbeq	r5, [r5, #-1364]	; 0xfffffaac
   13f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f40:	sub	sp, sp, #52	; 0x34
   13f44:	ands	r3, r1, #1
   13f48:	str	r1, [sp, #36]	; 0x24
   13f4c:	str	r3, [sp, #32]
   13f50:	mov	r5, r0
   13f54:	beq	13f68 <__assert_fail@plt+0x2dd4>
   13f58:	ldr	r1, [pc, #1552]	; 14570 <__assert_fail@plt+0x33dc>
   13f5c:	bl	10ef4 <strcmp@plt>
   13f60:	cmp	r0, #0
   13f64:	beq	14310 <__assert_fail@plt+0x317c>
   13f68:	mov	r6, #0
   13f6c:	mov	r7, #0
   13f70:	mov	fp, #0
   13f74:	mov	sl, #0
   13f78:	mov	r8, #1
   13f7c:	mov	r9, #0
   13f80:	mov	r1, sl
   13f84:	mov	r2, fp
   13f88:	strd	r8, [sp, #8]
   13f8c:	mov	r3, r5
   13f90:	ldrb	r4, [r5], #1
   13f94:	cmp	r4, #45	; 0x2d
   13f98:	beq	14050 <__assert_fail@plt+0x2ebc>
   13f9c:	cmp	r4, #44	; 0x2c
   13fa0:	str	r3, [sp, #4]
   13fa4:	beq	13fe0 <__assert_fail@plt+0x2e4c>
   13fa8:	str	r1, [sp, #20]
   13fac:	str	r2, [sp, #16]
   13fb0:	bl	11068 <__ctype_b_loc@plt>
   13fb4:	lsl	ip, r4, #1
   13fb8:	cmp	r4, #0
   13fbc:	ldr	r2, [sp, #16]
   13fc0:	ldr	r1, [sp, #20]
   13fc4:	ldr	r3, [sp, #4]
   13fc8:	ldr	r0, [r0]
   13fcc:	ldrh	r0, [r0, ip]
   13fd0:	moveq	r0, #1
   13fd4:	andne	r0, r0, #1
   13fd8:	cmp	r0, #0
   13fdc:	beq	14248 <__assert_fail@plt+0x30b4>
   13fe0:	cmp	r2, #0
   13fe4:	beq	14088 <__assert_fail@plt+0x2ef4>
   13fe8:	orr	fp, fp, r1
   13fec:	tst	fp, #255	; 0xff
   13ff0:	bne	141fc <__assert_fail@plt+0x3068>
   13ff4:	ldr	r3, [sp, #32]
   13ff8:	cmp	r3, #0
   13ffc:	beq	144e8 <__assert_fail@plt+0x3354>
   14000:	mov	r2, #1
   14004:	mov	r3, #0
   14008:	strd	r2, [sp, #8]
   1400c:	mvn	r2, #0
   14010:	mvn	r3, #0
   14014:	ldrd	r0, [sp, #8]
   14018:	bl	13e74 <__assert_fail@plt+0x2ce0>
   1401c:	ldrb	ip, [r5, #-1]
   14020:	cmp	ip, #0
   14024:	beq	140b0 <__assert_fail@plt+0x2f1c>
   14028:	mov	r3, r5
   1402c:	ldrb	r4, [r5], #1
   14030:	mov	sl, #0
   14034:	mov	r2, sl
   14038:	cmp	r4, #45	; 0x2d
   1403c:	mov	r1, sl
   14040:	mov	fp, sl
   14044:	mov	r6, #0
   14048:	mov	r7, #0
   1404c:	bne	13f9c <__assert_fail@plt+0x2e08>
   14050:	cmp	r2, #0
   14054:	bne	14458 <__assert_fail@plt+0x32c4>
   14058:	orrs	r3, r6, r7
   1405c:	movne	sl, #0
   14060:	andeq	sl, fp, #1
   14064:	cmp	sl, #0
   14068:	bne	143fc <__assert_fail@plt+0x3268>
   1406c:	cmp	fp, #0
   14070:	beq	14228 <__assert_fail@plt+0x3094>
   14074:	strd	r6, [sp, #8]
   14078:	mov	r2, fp
   1407c:	mov	r6, #0
   14080:	mov	r7, #0
   14084:	b	13f8c <__assert_fail@plt+0x2df8>
   14088:	orrs	r3, r6, r7
   1408c:	beq	143fc <__assert_fail@plt+0x3268>
   14090:	mov	r2, r6
   14094:	mov	r3, r7
   14098:	mov	r0, r6
   1409c:	mov	r1, r7
   140a0:	bl	13e74 <__assert_fail@plt+0x2ce0>
   140a4:	ldrb	ip, [r5, #-1]
   140a8:	cmp	ip, #0
   140ac:	bne	14028 <__assert_fail@plt+0x2e94>
   140b0:	ldr	r8, [pc, #1212]	; 14574 <__assert_fail@plt+0x33e0>
   140b4:	ldr	r1, [r8]
   140b8:	cmp	r1, #0
   140bc:	beq	144f4 <__assert_fail@plt+0x3360>
   140c0:	ldr	r4, [pc, #1200]	; 14578 <__assert_fail@plt+0x33e4>
   140c4:	ldr	r3, [pc, #1200]	; 1457c <__assert_fail@plt+0x33e8>
   140c8:	mov	r2, #16
   140cc:	ldr	r0, [r4]
   140d0:	mov	r9, ip
   140d4:	bl	11140 <qsort@plt>
   140d8:	ldr	sl, [r4]
   140dc:	ldr	fp, [r8]
   140e0:	cmp	r9, fp
   140e4:	bcs	141ac <__assert_fail@plt+0x3018>
   140e8:	add	r9, r9, #1
   140ec:	cmp	r9, fp
   140f0:	bcs	140e0 <__assert_fail@plt+0x2f4c>
   140f4:	lsl	r4, r9, #4
   140f8:	sub	r5, r4, #16
   140fc:	add	r1, sl, r5
   14100:	ldrd	r6, [sl, r4]
   14104:	ldrd	r2, [r1, #8]
   14108:	add	r0, sl, r4
   1410c:	cmp	r3, r7
   14110:	cmpeq	r2, r6
   14114:	bcc	140e0 <__assert_fail@plt+0x2f4c>
   14118:	mvn	lr, #-268435456	; 0xf0000000
   1411c:	add	ip, r4, #16
   14120:	sub	lr, lr, r9
   14124:	str	ip, [sp, #4]
   14128:	mov	ip, r1
   1412c:	mov	r1, sl
   14130:	mov	sl, r4
   14134:	mov	r4, lr
   14138:	b	1415c <__assert_fail@plt+0x2fc8>
   1413c:	ldr	r1, [r3]
   14140:	add	ip, r1, r5
   14144:	ldrd	r6, [r1, sl]
   14148:	ldrd	r2, [ip, #8]
   1414c:	add	r0, r1, sl
   14150:	cmp	r7, r3
   14154:	cmpeq	r6, r2
   14158:	bhi	14308 <__assert_fail@plt+0x3174>
   1415c:	ldrd	r6, [r0, #8]
   14160:	cmp	r7, r3
   14164:	cmpeq	r6, r2
   14168:	movcc	r6, r2
   1416c:	movcc	r7, r3
   14170:	add	r2, fp, r4
   14174:	ldr	r3, [sp, #4]
   14178:	strd	r6, [ip, #8]
   1417c:	add	r1, r1, r3
   14180:	lsl	r2, r2, #4
   14184:	bl	10f24 <memmove@plt>
   14188:	ldr	fp, [r8]
   1418c:	ldr	r3, [pc, #996]	; 14578 <__assert_fail@plt+0x33e4>
   14190:	sub	fp, fp, #1
   14194:	cmp	fp, r9
   14198:	str	fp, [r8]
   1419c:	bhi	1413c <__assert_fail@plt+0x2fa8>
   141a0:	cmp	r9, fp
   141a4:	ldr	sl, [r3]
   141a8:	bcc	140e8 <__assert_fail@plt+0x2f54>
   141ac:	ldr	r3, [sp, #36]	; 0x24
   141b0:	tst	r3, #2
   141b4:	bne	14324 <__assert_fail@plt+0x3190>
   141b8:	add	fp, fp, #1
   141bc:	mov	r0, sl
   141c0:	lsl	r1, fp, #4
   141c4:	str	fp, [r8]
   141c8:	bl	17630 <__assert_fail@plt+0x649c>
   141cc:	ldr	r3, [r8]
   141d0:	ldr	r2, [pc, #928]	; 14578 <__assert_fail@plt+0x33e4>
   141d4:	sub	r3, r3, #-268435455	; 0xf0000001
   141d8:	mvn	r4, #0
   141dc:	lsl	r3, r3, #4
   141e0:	mvn	r5, #0
   141e4:	str	r0, [r2]
   141e8:	add	r2, r0, r3
   141ec:	strd	r4, [r2, #8]
   141f0:	strd	r4, [r0, r3]
   141f4:	add	sp, sp, #52	; 0x34
   141f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141fc:	cmp	r1, #0
   14200:	beq	1400c <__assert_fail@plt+0x2e78>
   14204:	ldrd	r2, [sp, #8]
   14208:	cmp	r3, r7
   1420c:	cmpeq	r2, r6
   14210:	bhi	14430 <__assert_fail@plt+0x329c>
   14214:	mov	r2, r6
   14218:	mov	r3, r7
   1421c:	ldrd	r0, [sp, #8]
   14220:	bl	13e74 <__assert_fail@plt+0x2ce0>
   14224:	b	1401c <__assert_fail@plt+0x2e88>
   14228:	mov	r8, #1
   1422c:	mov	r9, #0
   14230:	mov	sl, fp
   14234:	mov	r6, #0
   14238:	mov	r7, #0
   1423c:	mov	r2, #1
   14240:	strd	r8, [sp, #8]
   14244:	b	13f8c <__assert_fail@plt+0x2df8>
   14248:	sub	r4, r4, #48	; 0x30
   1424c:	cmp	r4, #9
   14250:	bhi	14518 <__assert_fail@plt+0x3384>
   14254:	cmp	sl, #0
   14258:	beq	142fc <__assert_fail@plt+0x3168>
   1425c:	ldr	r0, [pc, #796]	; 14580 <__assert_fail@plt+0x33ec>
   14260:	ldr	r0, [r0, #4]
   14264:	cmp	r0, #0
   14268:	beq	142fc <__assert_fail@plt+0x3168>
   1426c:	add	r9, pc, #756	; 0x2f4
   14270:	ldrd	r8, [r9]
   14274:	cmp	r2, #0
   14278:	moveq	fp, #1
   1427c:	movne	r1, r2
   14280:	cmp	r7, r9
   14284:	cmpeq	r6, r8
   14288:	bhi	14478 <__assert_fail@plt+0x32e4>
   1428c:	lsl	r0, r7, #2
   14290:	lsl	r3, r6, #2
   14294:	adds	r3, r3, r6
   14298:	orr	r0, r0, r6, lsr #30
   1429c:	adc	r0, r0, r7
   142a0:	adds	r3, r3, r3
   142a4:	str	r3, [sp, #24]
   142a8:	adc	r3, r0, r0
   142ac:	str	r3, [sp, #28]
   142b0:	ldrd	r8, [sp, #24]
   142b4:	adds	r8, r8, r4
   142b8:	adc	r9, r9, r4, asr #31
   142bc:	cmp	r9, r7
   142c0:	mov	r3, r8
   142c4:	and	r3, r3, r9
   142c8:	cmpeq	r8, r6
   142cc:	mov	r0, r9
   142d0:	movcc	r0, #1
   142d4:	movcs	r0, #0
   142d8:	cmn	r3, #1
   142dc:	movne	r3, #0
   142e0:	moveq	r3, #1
   142e4:	orrs	r3, r0, r3
   142e8:	bne	14478 <__assert_fail@plt+0x32e4>
   142ec:	mov	r6, r8
   142f0:	mov	r7, r9
   142f4:	mov	sl, #1
   142f8:	b	13f8c <__assert_fail@plt+0x2df8>
   142fc:	ldr	r0, [pc, #636]	; 14580 <__assert_fail@plt+0x33ec>
   14300:	str	r3, [r0, #4]
   14304:	b	1426c <__assert_fail@plt+0x30d8>
   14308:	mov	sl, r1
   1430c:	b	140e0 <__assert_fail@plt+0x2f4c>
   14310:	add	r5, r5, #1
   14314:	mov	r6, #1
   14318:	mov	r7, #0
   1431c:	mov	fp, #1
   14320:	b	13f74 <__assert_fail@plt+0x2de0>
   14324:	ldr	r2, [pc, #596]	; 14580 <__assert_fail@plt+0x33ec>
   14328:	ldrd	r0, [sl]
   1432c:	mov	r3, #0
   14330:	str	r3, [r2]
   14334:	ldr	r2, [pc, #572]	; 14578 <__assert_fail@plt+0x33e4>
   14338:	cmp	r1, #0
   1433c:	cmpeq	r0, #1
   14340:	str	r3, [r2]
   14344:	str	r3, [r8]
   14348:	bhi	143e4 <__assert_fail@plt+0x3250>
   1434c:	cmp	fp, #1
   14350:	addhi	r5, sl, fp, lsl #4
   14354:	subhi	r5, r5, #16
   14358:	movhi	r4, sl
   1435c:	bls	143a0 <__assert_fail@plt+0x320c>
   14360:	ldr	r3, [r4, #8]
   14364:	ldrd	r0, [r4, #16]
   14368:	ldr	r2, [r4, #12]
   1436c:	adds	r6, r3, #1
   14370:	adc	r7, r2, #0
   14374:	cmp	r7, r1
   14378:	cmpeq	r6, r0
   1437c:	beq	14394 <__assert_fail@plt+0x3200>
   14380:	subs	r2, r0, #1
   14384:	sbc	r3, r1, #0
   14388:	mov	r0, r6
   1438c:	mov	r1, r7
   14390:	bl	13e74 <__assert_fail@plt+0x2ce0>
   14394:	add	r4, r4, #16
   14398:	cmp	r5, r4
   1439c:	bne	14360 <__assert_fail@plt+0x31cc>
   143a0:	add	fp, sl, fp, lsl #4
   143a4:	mvn	r3, #0
   143a8:	ldrd	r4, [fp, #-8]
   143ac:	mvn	r2, #0
   143b0:	cmp	r5, r3
   143b4:	cmpeq	r4, r2
   143b8:	bne	143d4 <__assert_fail@plt+0x3240>
   143bc:	mov	r0, sl
   143c0:	bl	10f30 <free@plt>
   143c4:	ldr	r3, [pc, #428]	; 14578 <__assert_fail@plt+0x33e4>
   143c8:	ldr	fp, [r8]
   143cc:	ldr	sl, [r3]
   143d0:	b	141b8 <__assert_fail@plt+0x3024>
   143d4:	adds	r0, r4, #1
   143d8:	adc	r1, r5, #0
   143dc:	bl	13e74 <__assert_fail@plt+0x2ce0>
   143e0:	b	143bc <__assert_fail@plt+0x3228>
   143e4:	subs	r2, r0, #1
   143e8:	sbc	r3, r1, #0
   143ec:	mov	r0, #1
   143f0:	mov	r1, #0
   143f4:	bl	13e74 <__assert_fail@plt+0x2ce0>
   143f8:	b	1434c <__assert_fail@plt+0x31b8>
   143fc:	ldr	r3, [sp, #36]	; 0x24
   14400:	mov	r0, r2
   14404:	tst	r3, #4
   14408:	mov	r2, #5
   1440c:	ldrne	r1, [pc, #368]	; 14584 <__assert_fail@plt+0x33f0>
   14410:	ldreq	r1, [pc, #368]	; 14588 <__assert_fail@plt+0x33f4>
   14414:	bl	10f84 <dcgettext@plt>
   14418:	mov	r1, #0
   1441c:	mov	r2, r0
   14420:	mov	r0, r1
   14424:	bl	11014 <error@plt>
   14428:	mov	r0, #1
   1442c:	bl	13868 <__assert_fail@plt+0x26d4>
   14430:	ldr	r1, [pc, #340]	; 1458c <__assert_fail@plt+0x33f8>
   14434:	mov	r2, #5
   14438:	mov	r0, #0
   1443c:	bl	10f84 <dcgettext@plt>
   14440:	mov	r1, #0
   14444:	mov	r2, r0
   14448:	mov	r0, r1
   1444c:	bl	11014 <error@plt>
   14450:	mov	r0, #1
   14454:	bl	13868 <__assert_fail@plt+0x26d4>
   14458:	ldr	r3, [sp, #36]	; 0x24
   1445c:	mov	r2, #5
   14460:	ands	r0, r3, #4
   14464:	movne	r0, #0
   14468:	ldrne	r1, [pc, #288]	; 14590 <__assert_fail@plt+0x33fc>
   1446c:	ldreq	r1, [pc, #288]	; 14594 <__assert_fail@plt+0x3400>
   14470:	bl	10f84 <dcgettext@plt>
   14474:	b	14418 <__assert_fail@plt+0x3284>
   14478:	ldr	r3, [pc, #256]	; 14580 <__assert_fail@plt+0x33ec>
   1447c:	ldr	r1, [pc, #276]	; 14598 <__assert_fail@plt+0x3404>
   14480:	ldr	r4, [r3, #4]
   14484:	mov	r0, r4
   14488:	bl	11188 <strspn@plt>
   1448c:	mov	r1, r0
   14490:	mov	r0, r4
   14494:	bl	1785c <__assert_fail@plt+0x66c8>
   14498:	ldr	r3, [sp, #36]	; 0x24
   1449c:	mov	r2, #5
   144a0:	mov	r4, r0
   144a4:	ands	r0, r3, #4
   144a8:	movne	r0, #0
   144ac:	ldrne	r1, [pc, #232]	; 1459c <__assert_fail@plt+0x3408>
   144b0:	ldreq	r1, [pc, #232]	; 145a0 <__assert_fail@plt+0x340c>
   144b4:	bl	10f84 <dcgettext@plt>
   144b8:	mov	r5, r0
   144bc:	mov	r0, r4
   144c0:	bl	17064 <__assert_fail@plt+0x5ed0>
   144c4:	mov	r1, #0
   144c8:	mov	r2, r5
   144cc:	mov	r3, r0
   144d0:	mov	r0, r1
   144d4:	bl	11014 <error@plt>
   144d8:	mov	r0, r4
   144dc:	bl	10f30 <free@plt>
   144e0:	mov	r0, #1
   144e4:	bl	13868 <__assert_fail@plt+0x26d4>
   144e8:	mov	r2, #5
   144ec:	ldr	r1, [pc, #176]	; 145a4 <__assert_fail@plt+0x3410>
   144f0:	b	14438 <__assert_fail@plt+0x32a4>
   144f4:	ldr	r3, [sp, #36]	; 0x24
   144f8:	ands	r0, r3, #4
   144fc:	movne	r0, r1
   14500:	movne	r2, #5
   14504:	ldrne	r1, [pc, #156]	; 145a8 <__assert_fail@plt+0x3414>
   14508:	moveq	r2, #5
   1450c:	ldreq	r1, [pc, #152]	; 145ac <__assert_fail@plt+0x3418>
   14510:	bl	10f84 <dcgettext@plt>
   14514:	b	14418 <__assert_fail@plt+0x3284>
   14518:	ldr	r2, [sp, #36]	; 0x24
   1451c:	str	r3, [sp, #4]
   14520:	ands	r2, r2, #4
   14524:	moveq	r0, r2
   14528:	movne	r2, #5
   1452c:	ldrne	r1, [pc, #124]	; 145b0 <__assert_fail@plt+0x341c>
   14530:	moveq	r2, #5
   14534:	ldreq	r1, [pc, #120]	; 145b4 <__assert_fail@plt+0x3420>
   14538:	bl	10f84 <dcgettext@plt>
   1453c:	ldr	r3, [sp, #4]
   14540:	mov	r4, r0
   14544:	mov	r0, r3
   14548:	bl	17064 <__assert_fail@plt+0x5ed0>
   1454c:	mov	r1, #0
   14550:	mov	r2, r4
   14554:	mov	r3, r0
   14558:	mov	r0, r1
   1455c:	bl	11014 <error@plt>
   14560:	mov	r0, #1
   14564:	bl	13868 <__assert_fail@plt+0x26d4>
   14568:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1456c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   14570:			; <UNDEFINED> instruction: 0x0001b5b8
   14574:	andeq	ip, r2, r4, asr #6
   14578:	andeq	ip, r2, r0, asr #6
   1457c:	andeq	r3, r1, r0, asr lr
   14580:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   14584:	andeq	fp, r1, ip, asr #10
   14588:	andeq	fp, r1, ip, ror r5
   1458c:			; <UNDEFINED> instruction: 0x0001b5bc
   14590:	andeq	fp, r1, r8, lsl r5
   14594:	andeq	fp, r1, r8, lsr r5
   14598:	ldrdeq	fp, [r1], -r8
   1459c:	andeq	fp, r1, r4, ror #11
   145a0:	andeq	fp, r1, ip, lsl #12
   145a4:	muleq	r1, r8, r5
   145a8:	andeq	fp, r1, r8, ror #12
   145ac:	muleq	r1, r4, r6
   145b0:	andeq	fp, r1, ip, lsr #12
   145b4:	andeq	fp, r1, r0, asr r6
   145b8:	push	{r4, r5, r6, lr}
   145bc:	mov	r4, #0
   145c0:	ldr	r5, [pc, #28]	; 145e4 <__assert_fail@plt+0x3450>
   145c4:	ldr	r2, [pc, #28]	; 145e8 <__assert_fail@plt+0x3454>
   145c8:	ldr	r3, [pc, #28]	; 145ec <__assert_fail@plt+0x3458>
   145cc:	ldr	r0, [r5]
   145d0:	str	r4, [r2]
   145d4:	str	r4, [r3]
   145d8:	bl	10f30 <free@plt>
   145dc:	str	r4, [r5]
   145e0:	pop	{r4, r5, r6, pc}
   145e4:	andeq	ip, r2, r0, asr #6
   145e8:	andeq	ip, r2, r4, asr #6
   145ec:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   145f0:	mov	r0, #1
   145f4:	b	13868 <__assert_fail@plt+0x26d4>
   145f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145fc:	mov	r5, r1
   14600:	sub	sp, sp, #12
   14604:	mov	r4, r2
   14608:	str	r2, [sp]
   1460c:	mov	r7, r3
   14610:	mov	sl, r0
   14614:	bl	11080 <strlen@plt>
   14618:	ldr	fp, [r5]
   1461c:	cmp	fp, #0
   14620:	beq	146e4 <__assert_fail@plt+0x3550>
   14624:	mov	r6, #0
   14628:	mov	r8, r0
   1462c:	str	r6, [sp, #4]
   14630:	mvn	r9, #0
   14634:	b	14660 <__assert_fail@plt+0x34cc>
   14638:	bl	10f78 <memcmp@plt>
   1463c:	ldr	r3, [sp, #4]
   14640:	cmp	r0, #0
   14644:	movne	r3, #1
   14648:	str	r3, [sp, #4]
   1464c:	ldr	fp, [r5, #4]!
   14650:	add	r6, r6, #1
   14654:	cmp	fp, #0
   14658:	add	r4, r4, r7
   1465c:	beq	146bc <__assert_fail@plt+0x3528>
   14660:	mov	r2, r8
   14664:	mov	r1, sl
   14668:	mov	r0, fp
   1466c:	bl	11164 <strncmp@plt>
   14670:	cmp	r0, #0
   14674:	mov	r0, fp
   14678:	bne	1464c <__assert_fail@plt+0x34b8>
   1467c:	bl	11080 <strlen@plt>
   14680:	ldr	r3, [sp]
   14684:	mov	r2, r7
   14688:	mov	r1, r4
   1468c:	cmp	r0, r8
   14690:	mla	r0, r7, r9, r3
   14694:	beq	146d4 <__assert_fail@plt+0x3540>
   14698:	cmn	r9, #1
   1469c:	moveq	r9, r6
   146a0:	beq	1464c <__assert_fail@plt+0x34b8>
   146a4:	ldr	r3, [sp]
   146a8:	cmp	r3, #0
   146ac:	bne	14638 <__assert_fail@plt+0x34a4>
   146b0:	mov	r3, #1
   146b4:	str	r3, [sp, #4]
   146b8:	b	1464c <__assert_fail@plt+0x34b8>
   146bc:	ldr	r3, [sp, #4]
   146c0:	cmp	r3, #0
   146c4:	mvnne	r9, #1
   146c8:	mov	r0, r9
   146cc:	add	sp, sp, #12
   146d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d4:	mov	r9, r6
   146d8:	mov	r0, r9
   146dc:	add	sp, sp, #12
   146e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e4:	mvn	r9, #0
   146e8:	b	146c8 <__assert_fail@plt+0x3534>
   146ec:	cmn	r2, #1
   146f0:	push	{r4, r5, r6, lr}
   146f4:	mov	r2, #5
   146f8:	sub	sp, sp, #8
   146fc:	mov	r5, r1
   14700:	mov	r6, r0
   14704:	ldreq	r1, [pc, #76]	; 14758 <__assert_fail@plt+0x35c4>
   14708:	ldrne	r1, [pc, #76]	; 1475c <__assert_fail@plt+0x35c8>
   1470c:	mov	r0, #0
   14710:	bl	10f84 <dcgettext@plt>
   14714:	mov	r2, r5
   14718:	mov	r1, #8
   1471c:	mov	r4, r0
   14720:	mov	r0, #0
   14724:	bl	16d08 <__assert_fail@plt+0x5b74>
   14728:	mov	r1, r6
   1472c:	mov	r5, r0
   14730:	mov	r0, #1
   14734:	bl	17054 <__assert_fail@plt+0x5ec0>
   14738:	mov	r1, #0
   1473c:	mov	r3, r5
   14740:	mov	r2, r4
   14744:	str	r0, [sp]
   14748:	mov	r0, r1
   1474c:	bl	11014 <error@plt>
   14750:	add	sp, sp, #8
   14754:	pop	{r4, r5, r6, pc}
   14758:			; <UNDEFINED> instruction: 0x0001b6b4
   1475c:	ldrdeq	fp, [r1], -r0
   14760:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14764:	mov	r6, r0
   14768:	ldr	sl, [pc, #224]	; 14850 <__assert_fail@plt+0x36bc>
   1476c:	mov	r4, r1
   14770:	mov	r7, r2
   14774:	ldr	r1, [pc, #216]	; 14854 <__assert_fail@plt+0x36c0>
   14778:	mov	r2, #5
   1477c:	mov	r0, #0
   14780:	bl	10f84 <dcgettext@plt>
   14784:	ldr	r1, [sl]
   14788:	bl	10ed0 <fputs_unlocked@plt>
   1478c:	ldr	fp, [r6]
   14790:	cmp	fp, #0
   14794:	movne	r9, #0
   14798:	movne	r5, r9
   1479c:	bne	147d8 <__assert_fail@plt+0x3644>
   147a0:	b	1481c <__assert_fail@plt+0x3688>
   147a4:	mov	r0, fp
   147a8:	bl	17064 <__assert_fail@plt+0x5ed0>
   147ac:	ldr	r2, [pc, #164]	; 14858 <__assert_fail@plt+0x36c4>
   147b0:	mov	r1, #1
   147b4:	mov	r9, r4
   147b8:	mov	r3, r0
   147bc:	mov	r0, r8
   147c0:	bl	110d4 <__fprintf_chk@plt>
   147c4:	ldr	fp, [r6, #4]!
   147c8:	add	r5, r5, #1
   147cc:	cmp	fp, #0
   147d0:	add	r4, r4, r7
   147d4:	beq	1481c <__assert_fail@plt+0x3688>
   147d8:	cmp	r5, #0
   147dc:	mov	r1, r4
   147e0:	mov	r2, r7
   147e4:	mov	r0, r9
   147e8:	ldr	r8, [sl]
   147ec:	beq	147a4 <__assert_fail@plt+0x3610>
   147f0:	bl	10f78 <memcmp@plt>
   147f4:	cmp	r0, #0
   147f8:	bne	147a4 <__assert_fail@plt+0x3610>
   147fc:	mov	r0, fp
   14800:	bl	17064 <__assert_fail@plt+0x5ed0>
   14804:	ldr	r2, [pc, #80]	; 1485c <__assert_fail@plt+0x36c8>
   14808:	mov	r1, #1
   1480c:	mov	r3, r0
   14810:	mov	r0, r8
   14814:	bl	110d4 <__fprintf_chk@plt>
   14818:	b	147c4 <__assert_fail@plt+0x3630>
   1481c:	ldr	r0, [sl]
   14820:	ldr	r3, [r0, #20]
   14824:	ldr	r2, [r0, #24]
   14828:	cmp	r3, r2
   1482c:	bcs	14844 <__assert_fail@plt+0x36b0>
   14830:	add	r1, r3, #1
   14834:	mov	r2, #10
   14838:	str	r1, [r0, #20]
   1483c:	strb	r2, [r3]
   14840:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14844:	mov	r1, #10
   14848:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1484c:	b	110f8 <__overflow@plt>
   14850:	muleq	r2, r8, r1
   14854:	strdeq	fp, [r1], -r0
   14858:	andeq	fp, r1, r8, lsl #14
   1485c:	andeq	fp, r1, r0, lsl r7
   14860:	push	{r4, r5, r6, r7, r8, lr}
   14864:	mov	r6, r1
   14868:	mov	r4, r2
   1486c:	mov	r5, r3
   14870:	mov	r7, r0
   14874:	ldr	r3, [sp, #24]
   14878:	mov	r2, r5
   1487c:	mov	r1, r4
   14880:	mov	r0, r6
   14884:	bl	145f8 <__assert_fail@plt+0x3464>
   14888:	cmp	r0, #0
   1488c:	popge	{r4, r5, r6, r7, r8, pc}
   14890:	mov	r2, r0
   14894:	mov	r1, r6
   14898:	mov	r0, r7
   1489c:	bl	146ec <__assert_fail@plt+0x3558>
   148a0:	mov	r0, r4
   148a4:	ldr	r2, [sp, #24]
   148a8:	mov	r1, r5
   148ac:	bl	14760 <__assert_fail@plt+0x35cc>
   148b0:	ldr	r3, [sp, #28]
   148b4:	blx	r3
   148b8:	mvn	r0, #0
   148bc:	pop	{r4, r5, r6, r7, r8, pc}
   148c0:	push	{r4, r5, r6, r7, r8, lr}
   148c4:	ldr	r7, [r1]
   148c8:	cmp	r7, #0
   148cc:	beq	1490c <__assert_fail@plt+0x3778>
   148d0:	mov	r6, r3
   148d4:	mov	r8, r0
   148d8:	mov	r4, r2
   148dc:	mov	r5, r1
   148e0:	b	148f0 <__assert_fail@plt+0x375c>
   148e4:	ldr	r7, [r5, #4]!
   148e8:	cmp	r7, #0
   148ec:	beq	1490c <__assert_fail@plt+0x3778>
   148f0:	mov	r1, r4
   148f4:	mov	r2, r6
   148f8:	mov	r0, r8
   148fc:	bl	10f78 <memcmp@plt>
   14900:	add	r4, r4, r6
   14904:	cmp	r0, #0
   14908:	bne	148e4 <__assert_fail@plt+0x3750>
   1490c:	mov	r0, r7
   14910:	pop	{r4, r5, r6, r7, r8, pc}
   14914:	ldr	r3, [pc, #4]	; 14920 <__assert_fail@plt+0x378c>
   14918:	str	r0, [r3]
   1491c:	bx	lr
   14920:	andeq	ip, r2, r4, lsl #4
   14924:	ldr	r3, [pc, #4]	; 14930 <__assert_fail@plt+0x379c>
   14928:	strb	r0, [r3, #4]
   1492c:	bx	lr
   14930:	andeq	ip, r2, r4, lsl #4
   14934:	ldr	r3, [pc, #180]	; 149f0 <__assert_fail@plt+0x385c>
   14938:	push	{r4, r5, r6, lr}
   1493c:	sub	sp, sp, #8
   14940:	ldr	r0, [r3]
   14944:	bl	18b44 <__assert_fail@plt+0x79b0>
   14948:	cmp	r0, #0
   1494c:	beq	14974 <__assert_fail@plt+0x37e0>
   14950:	bl	11098 <__errno_location@plt>
   14954:	ldr	r5, [pc, #152]	; 149f4 <__assert_fail@plt+0x3860>
   14958:	ldrb	r3, [r5, #4]
   1495c:	cmp	r3, #0
   14960:	mov	r4, r0
   14964:	beq	14990 <__assert_fail@plt+0x37fc>
   14968:	ldr	r3, [r0]
   1496c:	cmp	r3, #32
   14970:	bne	14990 <__assert_fail@plt+0x37fc>
   14974:	ldr	r3, [pc, #124]	; 149f8 <__assert_fail@plt+0x3864>
   14978:	ldr	r0, [r3]
   1497c:	bl	18b44 <__assert_fail@plt+0x79b0>
   14980:	cmp	r0, #0
   14984:	bne	149d0 <__assert_fail@plt+0x383c>
   14988:	add	sp, sp, #8
   1498c:	pop	{r4, r5, r6, pc}
   14990:	mov	r2, #5
   14994:	ldr	r1, [pc, #96]	; 149fc <__assert_fail@plt+0x3868>
   14998:	mov	r0, #0
   1499c:	bl	10f84 <dcgettext@plt>
   149a0:	mov	r6, r0
   149a4:	ldr	r0, [r5]
   149a8:	cmp	r0, #0
   149ac:	beq	149dc <__assert_fail@plt+0x3848>
   149b0:	ldr	r4, [r4]
   149b4:	bl	16e84 <__assert_fail@plt+0x5cf0>
   149b8:	mov	r1, r4
   149bc:	str	r6, [sp]
   149c0:	ldr	r2, [pc, #56]	; 14a00 <__assert_fail@plt+0x386c>
   149c4:	mov	r3, r0
   149c8:	mov	r0, #0
   149cc:	bl	11014 <error@plt>
   149d0:	ldr	r3, [pc, #44]	; 14a04 <__assert_fail@plt+0x3870>
   149d4:	ldr	r0, [r3]
   149d8:	bl	10f48 <_exit@plt>
   149dc:	mov	r3, r6
   149e0:	ldr	r1, [r4]
   149e4:	ldr	r2, [pc, #28]	; 14a08 <__assert_fail@plt+0x3874>
   149e8:	bl	11014 <error@plt>
   149ec:	b	149d0 <__assert_fail@plt+0x383c>
   149f0:	andeq	ip, r2, r4, lsr #3
   149f4:	andeq	ip, r2, r4, lsl #4
   149f8:	muleq	r2, r8, r1
   149fc:	andeq	fp, r1, r8, lsl r7
   14a00:	andeq	r9, r1, ip, lsr #24
   14a04:	andeq	ip, r2, r4, asr #2
   14a08:	strdeq	r9, [r1], -r8
   14a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a10:	sub	sp, sp, #12
   14a14:	mov	r6, r1
   14a18:	mov	r4, r2
   14a1c:	mov	r9, r3
   14a20:	str	r0, [sp]
   14a24:	bl	11080 <strlen@plt>
   14a28:	ldr	r7, [sp, #52]	; 0x34
   14a2c:	ands	sl, r7, #2
   14a30:	mov	fp, r0
   14a34:	beq	14b70 <__assert_fail@plt+0x39dc>
   14a38:	mov	r8, #0
   14a3c:	mov	sl, r8
   14a40:	mov	r5, fp
   14a44:	ldr	r2, [r9]
   14a48:	cmp	r2, r5
   14a4c:	movcc	fp, r2
   14a50:	movcc	r1, #0
   14a54:	bcs	14b40 <__assert_fail@plt+0x39ac>
   14a58:	ldr	r3, [sp, #48]	; 0x30
   14a5c:	str	r2, [r9]
   14a60:	cmp	r3, #0
   14a64:	beq	14b64 <__assert_fail@plt+0x39d0>
   14a68:	cmp	r3, #1
   14a6c:	moveq	r5, #0
   14a70:	lsrne	r5, r1, #1
   14a74:	andne	r1, r1, #1
   14a78:	addne	r1, r1, r5
   14a7c:	tst	r7, #4
   14a80:	addeq	r9, r1, fp
   14a84:	movne	r9, fp
   14a88:	movne	r1, #0
   14a8c:	tst	r7, #8
   14a90:	movne	r5, #0
   14a94:	cmp	r4, #0
   14a98:	beq	14b1c <__assert_fail@plt+0x3988>
   14a9c:	sub	r4, r4, #1
   14aa0:	add	r4, r6, r4
   14aa4:	cmp	r1, #0
   14aa8:	cmpne	r6, r4
   14aac:	mov	r0, r6
   14ab0:	bcs	14ad0 <__assert_fail@plt+0x393c>
   14ab4:	mov	lr, #32
   14ab8:	strb	lr, [r0], #1
   14abc:	rsb	r3, r1, #0
   14ac0:	sub	r2, r6, r0
   14ac4:	cmp	r3, r2
   14ac8:	cmpne	r4, r0
   14acc:	bhi	14ab8 <__assert_fail@plt+0x3924>
   14ad0:	sub	r2, r4, r0
   14ad4:	cmp	r2, fp
   14ad8:	mov	ip, #0
   14adc:	movcs	r2, fp
   14ae0:	ldr	r1, [sp]
   14ae4:	strb	ip, [r0]
   14ae8:	bl	11050 <mempcpy@plt>
   14aec:	cmp	r5, #0
   14af0:	cmpne	r4, r0
   14af4:	mov	r3, r0
   14af8:	bls	14b14 <__assert_fail@plt+0x3980>
   14afc:	mov	r1, #32
   14b00:	strb	r1, [r3], #1
   14b04:	sub	r2, r3, r5
   14b08:	cmp	r0, r2
   14b0c:	cmpne	r4, r3
   14b10:	bhi	14b00 <__assert_fail@plt+0x396c>
   14b14:	mov	r2, #0
   14b18:	strb	r2, [r3]
   14b1c:	add	r5, r5, r9
   14b20:	mov	r0, r8
   14b24:	bl	10f30 <free@plt>
   14b28:	mov	r0, sl
   14b2c:	bl	10f30 <free@plt>
   14b30:	mov	r0, r5
   14b34:	add	sp, sp, #12
   14b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b3c:	mov	sl, #0
   14b40:	ldr	r3, [sp, #48]	; 0x30
   14b44:	cmp	r5, r2
   14b48:	subcc	r1, r2, r5
   14b4c:	movcs	r2, r5
   14b50:	movcc	r2, r5
   14b54:	movcs	r1, #0
   14b58:	cmp	r3, #0
   14b5c:	str	r2, [r9]
   14b60:	bne	14a68 <__assert_fail@plt+0x38d4>
   14b64:	mov	r5, r1
   14b68:	ldr	r1, [sp, #48]	; 0x30
   14b6c:	b	14a7c <__assert_fail@plt+0x38e8>
   14b70:	bl	10fd8 <__ctype_get_mb_cur_max@plt>
   14b74:	cmp	r0, #1
   14b78:	bls	14a38 <__assert_fail@plt+0x38a4>
   14b7c:	mov	r2, sl
   14b80:	ldr	r1, [sp]
   14b84:	mov	r0, sl
   14b88:	bl	11134 <mbstowcs@plt>
   14b8c:	cmn	r0, #1
   14b90:	bne	14bac <__assert_fail@plt+0x3a18>
   14b94:	tst	r7, #1
   14b98:	bne	14a38 <__assert_fail@plt+0x38a4>
   14b9c:	mov	r8, #0
   14ba0:	mov	sl, r8
   14ba4:	mvn	r5, #0
   14ba8:	b	14b20 <__assert_fail@plt+0x398c>
   14bac:	add	r5, r0, #1
   14bb0:	lsl	r3, r5, #2
   14bb4:	mov	r0, r3
   14bb8:	str	r3, [sp, #4]
   14bbc:	bl	11020 <malloc@plt>
   14bc0:	subs	r8, r0, #0
   14bc4:	beq	14ce4 <__assert_fail@plt+0x3b50>
   14bc8:	mov	r2, r5
   14bcc:	ldr	r1, [sp]
   14bd0:	bl	11134 <mbstowcs@plt>
   14bd4:	cmp	r0, #0
   14bd8:	beq	14d3c <__assert_fail@plt+0x3ba8>
   14bdc:	ldr	r3, [sp, #4]
   14be0:	add	r3, r8, r3
   14be4:	str	sl, [r3, #-4]
   14be8:	ldr	r2, [r8]
   14bec:	cmp	r2, #0
   14bf0:	beq	14cf8 <__assert_fail@plt+0x3b64>
   14bf4:	str	r4, [sp, #4]
   14bf8:	mov	r0, r2
   14bfc:	mov	r4, r8
   14c00:	bl	10fb4 <iswprint@plt>
   14c04:	cmp	r0, #0
   14c08:	moveq	sl, #1
   14c0c:	ldreq	r3, [pc, #320]	; 14d54 <__assert_fail@plt+0x3bc0>
   14c10:	streq	r3, [r4]
   14c14:	ldr	r0, [r4, #4]!
   14c18:	cmp	r0, #0
   14c1c:	bne	14c00 <__assert_fail@plt+0x3a6c>
   14c20:	ldr	r4, [sp, #4]
   14c24:	mov	r1, r5
   14c28:	str	r0, [sp, #4]
   14c2c:	mov	r0, r8
   14c30:	bl	11110 <wcswidth@plt>
   14c34:	cmp	sl, #0
   14c38:	ldr	r2, [sp, #4]
   14c3c:	mov	r5, r0
   14c40:	beq	14d08 <__assert_fail@plt+0x3b74>
   14c44:	mov	r0, r2
   14c48:	mov	r1, r8
   14c4c:	bl	11008 <wcstombs@plt>
   14c50:	add	r3, r0, #1
   14c54:	str	r3, [sp, #4]
   14c58:	ldr	r0, [sp, #4]
   14c5c:	bl	11020 <malloc@plt>
   14c60:	subs	sl, r0, #0
   14c64:	beq	14d2c <__assert_fail@plt+0x3b98>
   14c68:	ldr	r0, [r8]
   14c6c:	ldr	r3, [r9]
   14c70:	cmp	r0, #0
   14c74:	beq	14d48 <__assert_fail@plt+0x3bb4>
   14c78:	str	r4, [sp]
   14c7c:	mov	fp, r8
   14c80:	mov	r5, #0
   14c84:	mov	r4, r3
   14c88:	b	14c9c <__assert_fail@plt+0x3b08>
   14c8c:	ldr	r0, [fp, #4]!
   14c90:	mov	r5, r3
   14c94:	cmp	r0, #0
   14c98:	beq	14cbc <__assert_fail@plt+0x3b28>
   14c9c:	bl	10f18 <wcwidth@plt>
   14ca0:	cmn	r0, #1
   14ca4:	moveq	r0, #1
   14ca8:	ldreq	r3, [pc, #164]	; 14d54 <__assert_fail@plt+0x3bc0>
   14cac:	streq	r3, [fp]
   14cb0:	add	r3, r0, r5
   14cb4:	cmp	r4, r3
   14cb8:	bcs	14c8c <__assert_fail@plt+0x3af8>
   14cbc:	ldr	r4, [sp]
   14cc0:	mov	r1, #0
   14cc4:	str	r1, [fp]
   14cc8:	ldr	r2, [sp, #4]
   14ccc:	mov	r1, r8
   14cd0:	mov	r0, sl
   14cd4:	bl	11008 <wcstombs@plt>
   14cd8:	str	sl, [sp]
   14cdc:	mov	fp, r0
   14ce0:	b	14a44 <__assert_fail@plt+0x38b0>
   14ce4:	tst	r7, #1
   14ce8:	movne	r5, fp
   14cec:	movne	sl, r8
   14cf0:	bne	14a44 <__assert_fail@plt+0x38b0>
   14cf4:	b	14b9c <__assert_fail@plt+0x3a08>
   14cf8:	mov	r1, r5
   14cfc:	mov	r0, r8
   14d00:	bl	11110 <wcswidth@plt>
   14d04:	mov	r5, r0
   14d08:	ldr	r2, [r9]
   14d0c:	cmp	r2, r5
   14d10:	bcs	14b3c <__assert_fail@plt+0x39a8>
   14d14:	add	r3, fp, #1
   14d18:	str	r3, [sp, #4]
   14d1c:	ldr	r0, [sp, #4]
   14d20:	bl	11020 <malloc@plt>
   14d24:	subs	sl, r0, #0
   14d28:	bne	14c68 <__assert_fail@plt+0x3ad4>
   14d2c:	tst	r7, #1
   14d30:	mvneq	r5, #0
   14d34:	bne	14a44 <__assert_fail@plt+0x38b0>
   14d38:	b	14b20 <__assert_fail@plt+0x398c>
   14d3c:	mov	sl, r0
   14d40:	mov	r5, fp
   14d44:	b	14a44 <__assert_fail@plt+0x38b0>
   14d48:	mov	r5, r0
   14d4c:	mov	fp, r8
   14d50:	b	14cc0 <__assert_fail@plt+0x3b2c>
   14d54:	strdeq	pc, [r0], -sp
   14d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d5c:	mov	r9, r0
   14d60:	ldr	r8, [r1]
   14d64:	sub	sp, sp, #12
   14d68:	mov	r6, r1
   14d6c:	mov	fp, r2
   14d70:	mov	sl, r3
   14d74:	mov	r0, r8
   14d78:	mov	r7, #0
   14d7c:	add	r4, r0, #1
   14d80:	mov	r1, r4
   14d84:	mov	r0, r7
   14d88:	bl	10f9c <realloc@plt>
   14d8c:	mov	r3, r6
   14d90:	mov	r2, r4
   14d94:	subs	r5, r0, #0
   14d98:	mov	r1, r5
   14d9c:	mov	r0, r9
   14da0:	beq	14dd4 <__assert_fail@plt+0x3c40>
   14da4:	str	r8, [r6]
   14da8:	str	sl, [sp, #4]
   14dac:	str	fp, [sp]
   14db0:	bl	14a0c <__assert_fail@plt+0x3878>
   14db4:	cmn	r0, #1
   14db8:	beq	14de8 <__assert_fail@plt+0x3c54>
   14dbc:	cmp	r4, r0
   14dc0:	mov	r7, r5
   14dc4:	bls	14d7c <__assert_fail@plt+0x3be8>
   14dc8:	mov	r0, r5
   14dcc:	add	sp, sp, #12
   14dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dd4:	mov	r0, r7
   14dd8:	bl	10f30 <free@plt>
   14ddc:	mov	r0, r5
   14de0:	add	sp, sp, #12
   14de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14de8:	mov	r0, r5
   14dec:	bl	10f30 <free@plt>
   14df0:	mov	r5, #0
   14df4:	mov	r0, r5
   14df8:	add	sp, sp, #12
   14dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e00:	push	{r4, r5, r6, lr}
   14e04:	subs	r4, r0, #0
   14e08:	beq	14e7c <__assert_fail@plt+0x3ce8>
   14e0c:	mov	r1, #47	; 0x2f
   14e10:	bl	1111c <strrchr@plt>
   14e14:	subs	r5, r0, #0
   14e18:	beq	14e68 <__assert_fail@plt+0x3cd4>
   14e1c:	add	r6, r5, #1
   14e20:	sub	r3, r6, r4
   14e24:	cmp	r3, #6
   14e28:	ble	14e68 <__assert_fail@plt+0x3cd4>
   14e2c:	mov	r2, #7
   14e30:	ldr	r1, [pc, #96]	; 14e98 <__assert_fail@plt+0x3d04>
   14e34:	sub	r0, r5, #6
   14e38:	bl	11164 <strncmp@plt>
   14e3c:	cmp	r0, #0
   14e40:	bne	14e68 <__assert_fail@plt+0x3cd4>
   14e44:	mov	r2, #3
   14e48:	ldr	r1, [pc, #76]	; 14e9c <__assert_fail@plt+0x3d08>
   14e4c:	mov	r0, r6
   14e50:	bl	11164 <strncmp@plt>
   14e54:	cmp	r0, #0
   14e58:	movne	r4, r6
   14e5c:	ldreq	r3, [pc, #60]	; 14ea0 <__assert_fail@plt+0x3d0c>
   14e60:	addeq	r4, r5, #4
   14e64:	streq	r4, [r3]
   14e68:	ldr	r2, [pc, #52]	; 14ea4 <__assert_fail@plt+0x3d10>
   14e6c:	ldr	r3, [pc, #52]	; 14ea8 <__assert_fail@plt+0x3d14>
   14e70:	str	r4, [r2]
   14e74:	str	r4, [r3]
   14e78:	pop	{r4, r5, r6, pc}
   14e7c:	ldr	r3, [pc, #40]	; 14eac <__assert_fail@plt+0x3d18>
   14e80:	mov	r2, #55	; 0x37
   14e84:	mov	r1, #1
   14e88:	ldr	r3, [r3]
   14e8c:	ldr	r0, [pc, #28]	; 14eb0 <__assert_fail@plt+0x3d1c>
   14e90:	bl	10fc0 <fwrite@plt>
   14e94:	bl	11170 <abort@plt>
   14e98:	andeq	fp, r1, ip, asr r7
   14e9c:	andeq	fp, r1, r4, ror #14
   14ea0:	andeq	ip, r2, r8, lsl #3
   14ea4:	andeq	ip, r2, ip, lsl #4
   14ea8:	andeq	ip, r2, ip, lsl #3
   14eac:	muleq	r2, r8, r1
   14eb0:	andeq	fp, r1, r4, lsr #14
   14eb4:	push	{r4, lr}
   14eb8:	mov	r2, #48	; 0x30
   14ebc:	mov	r4, r1
   14ec0:	mov	r1, #0
   14ec4:	bl	110b0 <memset@plt>
   14ec8:	cmp	r4, #10
   14ecc:	beq	14ed8 <__assert_fail@plt+0x3d44>
   14ed0:	str	r4, [r0]
   14ed4:	pop	{r4, pc}
   14ed8:	bl	11170 <abort@plt>
   14edc:	push	{r4, r5, r6, lr}
   14ee0:	mov	r2, #5
   14ee4:	mov	r5, r0
   14ee8:	mov	r6, r1
   14eec:	mov	r1, r0
   14ef0:	mov	r0, #0
   14ef4:	bl	10f84 <dcgettext@plt>
   14ef8:	cmp	r5, r0
   14efc:	mov	r4, r0
   14f00:	beq	14f0c <__assert_fail@plt+0x3d78>
   14f04:	mov	r0, r4
   14f08:	pop	{r4, r5, r6, pc}
   14f0c:	bl	18c04 <__assert_fail@plt+0x7a70>
   14f10:	ldrb	r3, [r0]
   14f14:	bic	r3, r3, #32
   14f18:	cmp	r3, #85	; 0x55
   14f1c:	bne	14f7c <__assert_fail@plt+0x3de8>
   14f20:	ldrb	r3, [r0, #1]
   14f24:	bic	r3, r3, #32
   14f28:	cmp	r3, #84	; 0x54
   14f2c:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14f30:	ldrb	r3, [r0, #2]
   14f34:	bic	r3, r3, #32
   14f38:	cmp	r3, #70	; 0x46
   14f3c:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14f40:	ldrb	r3, [r0, #3]
   14f44:	cmp	r3, #45	; 0x2d
   14f48:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14f4c:	ldrb	r3, [r0, #4]
   14f50:	cmp	r3, #56	; 0x38
   14f54:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14f58:	ldrb	r3, [r0, #5]
   14f5c:	cmp	r3, #0
   14f60:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14f64:	ldrb	r2, [r4]
   14f68:	ldr	r3, [pc, #156]	; 1500c <__assert_fail@plt+0x3e78>
   14f6c:	ldr	r4, [pc, #156]	; 15010 <__assert_fail@plt+0x3e7c>
   14f70:	cmp	r2, #96	; 0x60
   14f74:	movne	r4, r3
   14f78:	b	14f04 <__assert_fail@plt+0x3d70>
   14f7c:	cmp	r3, #71	; 0x47
   14f80:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14f84:	ldrb	r3, [r0, #1]
   14f88:	bic	r3, r3, #32
   14f8c:	cmp	r3, #66	; 0x42
   14f90:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14f94:	ldrb	r3, [r0, #2]
   14f98:	cmp	r3, #49	; 0x31
   14f9c:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14fa0:	ldrb	r3, [r0, #3]
   14fa4:	cmp	r3, #56	; 0x38
   14fa8:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14fac:	ldrb	r3, [r0, #4]
   14fb0:	cmp	r3, #48	; 0x30
   14fb4:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14fb8:	ldrb	r3, [r0, #5]
   14fbc:	cmp	r3, #51	; 0x33
   14fc0:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14fc4:	ldrb	r3, [r0, #6]
   14fc8:	cmp	r3, #48	; 0x30
   14fcc:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14fd0:	ldrb	r3, [r0, #7]
   14fd4:	cmp	r3, #0
   14fd8:	bne	14ff4 <__assert_fail@plt+0x3e60>
   14fdc:	ldrb	r2, [r4]
   14fe0:	ldr	r3, [pc, #44]	; 15014 <__assert_fail@plt+0x3e80>
   14fe4:	ldr	r4, [pc, #44]	; 15018 <__assert_fail@plt+0x3e84>
   14fe8:	cmp	r2, #96	; 0x60
   14fec:	movne	r4, r3
   14ff0:	b	14f04 <__assert_fail@plt+0x3d70>
   14ff4:	ldr	r3, [pc, #32]	; 1501c <__assert_fail@plt+0x3e88>
   14ff8:	ldr	r4, [pc, #32]	; 15020 <__assert_fail@plt+0x3e8c>
   14ffc:	cmp	r6, #9
   15000:	movne	r4, r3
   15004:	mov	r0, r4
   15008:	pop	{r4, r5, r6, pc}
   1500c:	andeq	fp, r1, r0, asr #15
   15010:	andeq	fp, r1, ip, asr #15
   15014:	andeq	fp, r1, r4, asr #15
   15018:	andeq	fp, r1, r8, asr #15
   1501c:	ldrdeq	fp, [r1], -r0
   15020:			; <UNDEFINED> instruction: 0x0001b7bc
   15024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15028:	sub	sp, sp, #124	; 0x7c
   1502c:	ldr	ip, [pc, #3576]	; 15e2c <__assert_fail@plt+0x4c98>
   15030:	str	r3, [sp, #24]
   15034:	ldr	r3, [sp, #168]	; 0xa8
   15038:	ldr	ip, [ip]
   1503c:	str	r3, [sp, #56]	; 0x38
   15040:	ldr	r3, [sp, #172]	; 0xac
   15044:	ldr	r8, [sp, #160]	; 0xa0
   15048:	str	r3, [sp, #80]	; 0x50
   1504c:	ldr	r3, [sp, #176]	; 0xb0
   15050:	mov	fp, r0
   15054:	str	r3, [sp, #76]	; 0x4c
   15058:	mov	sl, r1
   1505c:	str	r2, [sp, #36]	; 0x24
   15060:	str	ip, [sp, #116]	; 0x74
   15064:	bl	10fd8 <__ctype_get_mb_cur_max@plt>
   15068:	ldr	r3, [sp, #164]	; 0xa4
   1506c:	ands	r4, r3, #2
   15070:	movne	r3, #1
   15074:	moveq	r3, #0
   15078:	str	r3, [sp, #32]
   1507c:	str	r0, [sp, #64]	; 0x40
   15080:	cmp	r8, #10
   15084:	ldrls	pc, [pc, r8, lsl #2]
   15088:	b	16838 <__assert_fail@plt+0x56a4>
   1508c:	andeq	r5, r1, r0, lsl #9
   15090:	andeq	r5, r1, r8, lsl r5
   15094:	andeq	r5, r1, r8, lsl fp
   15098:	andeq	r5, r1, r8, lsr r5
   1509c:	andeq	r5, r1, ip, ror #7
   150a0:	andeq	r5, r1, r4, lsr r4
   150a4:			; <UNDEFINED> instruction: 0x000154b0
   150a8:	andeq	r5, r1, r8, ror #9
   150ac:	strheq	r5, [r1], -r8
   150b0:	strheq	r5, [r1], -r8
   150b4:	strheq	r5, [r1], -r8
   150b8:	cmp	r8, #10
   150bc:	beq	150e0 <__assert_fail@plt+0x3f4c>
   150c0:	mov	r1, r8
   150c4:	ldr	r0, [pc, #3428]	; 15e30 <__assert_fail@plt+0x4c9c>
   150c8:	bl	14edc <__assert_fail@plt+0x3d48>
   150cc:	mov	r1, r8
   150d0:	str	r0, [sp, #80]	; 0x50
   150d4:	ldr	r0, [pc, #3420]	; 15e38 <__assert_fail@plt+0x4ca4>
   150d8:	bl	14edc <__assert_fail@plt+0x3d48>
   150dc:	str	r0, [sp, #76]	; 0x4c
   150e0:	cmp	r4, #0
   150e4:	movne	r4, #0
   150e8:	beq	164f8 <__assert_fail@plt+0x5364>
   150ec:	ldr	r7, [sp, #76]	; 0x4c
   150f0:	mov	r5, #0
   150f4:	mov	r6, #1
   150f8:	mov	r0, r7
   150fc:	str	r6, [sp, #40]	; 0x28
   15100:	str	r5, [sp, #68]	; 0x44
   15104:	bl	11080 <strlen@plt>
   15108:	str	r6, [sp, #28]
   1510c:	str	r5, [sp, #44]	; 0x2c
   15110:	str	r5, [sp, #72]	; 0x48
   15114:	str	r7, [sp, #60]	; 0x3c
   15118:	str	r0, [sp, #52]	; 0x34
   1511c:	str	r8, [sp, #160]	; 0xa0
   15120:	mov	r8, fp
   15124:	ldr	fp, [sp, #160]	; 0xa0
   15128:	mov	r9, #0
   1512c:	ldr	r3, [sp, #24]
   15130:	cmn	r3, #1
   15134:	beq	1569c <__assert_fail@plt+0x4508>
   15138:	ldr	r3, [sp, #24]
   1513c:	subs	r6, r3, r9
   15140:	movne	r6, #1
   15144:	cmp	r6, #0
   15148:	beq	156b4 <__assert_fail@plt+0x4520>
   1514c:	ldr	r7, [sp, #28]
   15150:	ldr	r0, [sp, #36]	; 0x24
   15154:	cmp	fp, #2
   15158:	moveq	r7, #0
   1515c:	andne	r7, r7, #1
   15160:	add	r3, r0, r9
   15164:	cmp	r7, #0
   15168:	str	r3, [sp, #48]	; 0x30
   1516c:	beq	15b58 <__assert_fail@plt+0x49c4>
   15170:	ldr	r2, [sp, #52]	; 0x34
   15174:	cmp	r2, #0
   15178:	beq	15e3c <__assert_fail@plt+0x4ca8>
   1517c:	ldr	r1, [sp, #24]
   15180:	cmp	r2, #1
   15184:	mov	r3, r2
   15188:	movls	r3, #0
   1518c:	movhi	r3, #1
   15190:	cmn	r1, #1
   15194:	movne	r3, #0
   15198:	cmp	r3, #0
   1519c:	add	r5, r9, r2
   151a0:	beq	151ac <__assert_fail@plt+0x4018>
   151a4:	bl	11080 <strlen@plt>
   151a8:	str	r0, [sp, #24]
   151ac:	ldr	r3, [sp, #24]
   151b0:	cmp	r5, r3
   151b4:	bhi	15e3c <__assert_fail@plt+0x4ca8>
   151b8:	ldr	r2, [sp, #52]	; 0x34
   151bc:	ldr	r1, [sp, #60]	; 0x3c
   151c0:	ldr	r0, [sp, #48]	; 0x30
   151c4:	bl	10f78 <memcmp@plt>
   151c8:	cmp	r0, #0
   151cc:	bne	15e3c <__assert_fail@plt+0x4ca8>
   151d0:	ldr	r3, [sp, #32]
   151d4:	cmp	r3, #0
   151d8:	bne	166f8 <__assert_fail@plt+0x5564>
   151dc:	ldr	r3, [sp, #48]	; 0x30
   151e0:	ldrb	r5, [r3]
   151e4:	cmp	r5, #126	; 0x7e
   151e8:	ldrls	pc, [pc, r5, lsl #2]
   151ec:	b	15abc <__assert_fail@plt+0x4928>
   151f0:	andeq	r5, r1, r8, lsr #19
   151f4:			; <UNDEFINED> instruction: 0x00015abc
   151f8:			; <UNDEFINED> instruction: 0x00015abc
   151fc:			; <UNDEFINED> instruction: 0x00015abc
   15200:			; <UNDEFINED> instruction: 0x00015abc
   15204:			; <UNDEFINED> instruction: 0x00015abc
   15208:			; <UNDEFINED> instruction: 0x00015abc
   1520c:	andeq	r5, r1, r4, ror sl
   15210:	andeq	r5, r1, r4, ror #20
   15214:	andeq	r5, r1, r4, ror #18
   15218:	andeq	r5, r1, ip, lsr #18
   1521c:	andeq	r5, r1, r4, lsl #19
   15220:	andeq	r5, r1, ip, ror #18
   15224:	muleq	r1, ip, r8
   15228:			; <UNDEFINED> instruction: 0x00015abc
   1522c:			; <UNDEFINED> instruction: 0x00015abc
   15230:			; <UNDEFINED> instruction: 0x00015abc
   15234:			; <UNDEFINED> instruction: 0x00015abc
   15238:			; <UNDEFINED> instruction: 0x00015abc
   1523c:			; <UNDEFINED> instruction: 0x00015abc
   15240:			; <UNDEFINED> instruction: 0x00015abc
   15244:			; <UNDEFINED> instruction: 0x00015abc
   15248:			; <UNDEFINED> instruction: 0x00015abc
   1524c:			; <UNDEFINED> instruction: 0x00015abc
   15250:			; <UNDEFINED> instruction: 0x00015abc
   15254:			; <UNDEFINED> instruction: 0x00015abc
   15258:			; <UNDEFINED> instruction: 0x00015abc
   1525c:			; <UNDEFINED> instruction: 0x00015abc
   15260:			; <UNDEFINED> instruction: 0x00015abc
   15264:			; <UNDEFINED> instruction: 0x00015abc
   15268:			; <UNDEFINED> instruction: 0x00015abc
   1526c:			; <UNDEFINED> instruction: 0x00015abc
   15270:	andeq	r5, r1, ip, ror sl
   15274:	muleq	r1, r0, r9
   15278:	muleq	r1, r0, r9
   1527c:	muleq	r1, r4, sl
   15280:	muleq	r1, r0, r9
   15284:			; <UNDEFINED> instruction: 0x00015ab0
   15288:	muleq	r1, r0, r9
   1528c:	ldrdeq	r5, [r1], -r0
   15290:	muleq	r1, r0, r9
   15294:	muleq	r1, r0, r9
   15298:	muleq	r1, r0, r9
   1529c:			; <UNDEFINED> instruction: 0x00015ab0
   152a0:			; <UNDEFINED> instruction: 0x00015ab0
   152a4:			; <UNDEFINED> instruction: 0x00015ab0
   152a8:			; <UNDEFINED> instruction: 0x00015ab0
   152ac:			; <UNDEFINED> instruction: 0x00015ab0
   152b0:			; <UNDEFINED> instruction: 0x00015ab0
   152b4:			; <UNDEFINED> instruction: 0x00015ab0
   152b8:			; <UNDEFINED> instruction: 0x00015ab0
   152bc:			; <UNDEFINED> instruction: 0x00015ab0
   152c0:			; <UNDEFINED> instruction: 0x00015ab0
   152c4:			; <UNDEFINED> instruction: 0x00015ab0
   152c8:			; <UNDEFINED> instruction: 0x00015ab0
   152cc:			; <UNDEFINED> instruction: 0x00015ab0
   152d0:			; <UNDEFINED> instruction: 0x00015ab0
   152d4:			; <UNDEFINED> instruction: 0x00015ab0
   152d8:			; <UNDEFINED> instruction: 0x00015ab0
   152dc:	muleq	r1, r0, r9
   152e0:	muleq	r1, r0, r9
   152e4:	muleq	r1, r0, r9
   152e8:	muleq	r1, r0, r9
   152ec:	andeq	r5, r1, r4, lsr #15
   152f0:			; <UNDEFINED> instruction: 0x00015abc
   152f4:			; <UNDEFINED> instruction: 0x00015ab0
   152f8:			; <UNDEFINED> instruction: 0x00015ab0
   152fc:			; <UNDEFINED> instruction: 0x00015ab0
   15300:			; <UNDEFINED> instruction: 0x00015ab0
   15304:			; <UNDEFINED> instruction: 0x00015ab0
   15308:			; <UNDEFINED> instruction: 0x00015ab0
   1530c:			; <UNDEFINED> instruction: 0x00015ab0
   15310:			; <UNDEFINED> instruction: 0x00015ab0
   15314:			; <UNDEFINED> instruction: 0x00015ab0
   15318:			; <UNDEFINED> instruction: 0x00015ab0
   1531c:			; <UNDEFINED> instruction: 0x00015ab0
   15320:			; <UNDEFINED> instruction: 0x00015ab0
   15324:			; <UNDEFINED> instruction: 0x00015ab0
   15328:			; <UNDEFINED> instruction: 0x00015ab0
   1532c:			; <UNDEFINED> instruction: 0x00015ab0
   15330:			; <UNDEFINED> instruction: 0x00015ab0
   15334:			; <UNDEFINED> instruction: 0x00015ab0
   15338:			; <UNDEFINED> instruction: 0x00015ab0
   1533c:			; <UNDEFINED> instruction: 0x00015ab0
   15340:			; <UNDEFINED> instruction: 0x00015ab0
   15344:			; <UNDEFINED> instruction: 0x00015ab0
   15348:			; <UNDEFINED> instruction: 0x00015ab0
   1534c:			; <UNDEFINED> instruction: 0x00015ab0
   15350:			; <UNDEFINED> instruction: 0x00015ab0
   15354:			; <UNDEFINED> instruction: 0x00015ab0
   15358:			; <UNDEFINED> instruction: 0x00015ab0
   1535c:	muleq	r1, r0, r9
   15360:	andeq	r5, r1, ip, asr r7
   15364:			; <UNDEFINED> instruction: 0x00015ab0
   15368:	muleq	r1, r0, r9
   1536c:			; <UNDEFINED> instruction: 0x00015ab0
   15370:	muleq	r1, r0, r9
   15374:			; <UNDEFINED> instruction: 0x00015ab0
   15378:			; <UNDEFINED> instruction: 0x00015ab0
   1537c:			; <UNDEFINED> instruction: 0x00015ab0
   15380:			; <UNDEFINED> instruction: 0x00015ab0
   15384:			; <UNDEFINED> instruction: 0x00015ab0
   15388:			; <UNDEFINED> instruction: 0x00015ab0
   1538c:			; <UNDEFINED> instruction: 0x00015ab0
   15390:			; <UNDEFINED> instruction: 0x00015ab0
   15394:			; <UNDEFINED> instruction: 0x00015ab0
   15398:			; <UNDEFINED> instruction: 0x00015ab0
   1539c:			; <UNDEFINED> instruction: 0x00015ab0
   153a0:			; <UNDEFINED> instruction: 0x00015ab0
   153a4:			; <UNDEFINED> instruction: 0x00015ab0
   153a8:			; <UNDEFINED> instruction: 0x00015ab0
   153ac:			; <UNDEFINED> instruction: 0x00015ab0
   153b0:			; <UNDEFINED> instruction: 0x00015ab0
   153b4:			; <UNDEFINED> instruction: 0x00015ab0
   153b8:			; <UNDEFINED> instruction: 0x00015ab0
   153bc:			; <UNDEFINED> instruction: 0x00015ab0
   153c0:			; <UNDEFINED> instruction: 0x00015ab0
   153c4:			; <UNDEFINED> instruction: 0x00015ab0
   153c8:			; <UNDEFINED> instruction: 0x00015ab0
   153cc:			; <UNDEFINED> instruction: 0x00015ab0
   153d0:			; <UNDEFINED> instruction: 0x00015ab0
   153d4:			; <UNDEFINED> instruction: 0x00015ab0
   153d8:			; <UNDEFINED> instruction: 0x00015ab0
   153dc:	andeq	r5, r1, r4, ror r5
   153e0:	muleq	r1, r0, r9
   153e4:	andeq	r5, r1, r4, ror r5
   153e8:	muleq	r1, r4, sl
   153ec:	cmp	r4, #0
   153f0:	moveq	r3, #1
   153f4:	streq	r3, [sp, #28]
   153f8:	beq	15b24 <__assert_fail@plt+0x4990>
   153fc:	mov	r3, #0
   15400:	mov	r4, r3
   15404:	mov	r2, #1
   15408:	str	r2, [sp, #40]	; 0x28
   1540c:	str	r3, [sp, #68]	; 0x44
   15410:	str	r2, [sp, #32]
   15414:	str	r2, [sp, #52]	; 0x34
   15418:	ldr	r3, [pc, #2584]	; 15e38 <__assert_fail@plt+0x4ca4>
   1541c:	str	r4, [sp, #44]	; 0x2c
   15420:	str	r4, [sp, #72]	; 0x48
   15424:	str	r4, [sp, #28]
   15428:	str	r3, [sp, #60]	; 0x3c
   1542c:	mov	r8, #2
   15430:	b	1511c <__assert_fail@plt+0x3f88>
   15434:	cmp	r4, #0
   15438:	bne	166c4 <__assert_fail@plt+0x5530>
   1543c:	cmp	sl, #0
   15440:	beq	16484 <__assert_fail@plt+0x52f0>
   15444:	mov	r3, #34	; 0x22
   15448:	strb	r3, [fp]
   1544c:	ldr	r3, [pc, #2528]	; 15e34 <__assert_fail@plt+0x4ca0>
   15450:	mov	r1, r4
   15454:	mov	r2, #1
   15458:	str	r4, [sp, #68]	; 0x44
   1545c:	str	r2, [sp, #40]	; 0x28
   15460:	mov	r4, r2
   15464:	str	r1, [sp, #44]	; 0x2c
   15468:	str	r1, [sp, #72]	; 0x48
   1546c:	str	r1, [sp, #32]
   15470:	str	r2, [sp, #28]
   15474:	str	r2, [sp, #52]	; 0x34
   15478:	str	r3, [sp, #60]	; 0x3c
   1547c:	b	1511c <__assert_fail@plt+0x3f88>
   15480:	mov	r3, #0
   15484:	str	r3, [sp, #68]	; 0x44
   15488:	str	r3, [sp, #44]	; 0x2c
   1548c:	str	r3, [sp, #32]
   15490:	str	r3, [sp, #28]
   15494:	str	r3, [sp, #60]	; 0x3c
   15498:	mov	r3, #1
   1549c:	str	r8, [sp, #72]	; 0x48
   154a0:	str	r8, [sp, #52]	; 0x34
   154a4:	mov	r4, r8
   154a8:	str	r3, [sp, #40]	; 0x28
   154ac:	b	1511c <__assert_fail@plt+0x3f88>
   154b0:	mov	r3, #1
   154b4:	str	r3, [sp, #40]	; 0x28
   154b8:	str	r3, [sp, #32]
   154bc:	str	r3, [sp, #28]
   154c0:	str	r3, [sp, #52]	; 0x34
   154c4:	ldr	r3, [pc, #2408]	; 15e34 <__assert_fail@plt+0x4ca0>
   154c8:	mov	r2, #0
   154cc:	mov	r4, r2
   154d0:	str	r2, [sp, #68]	; 0x44
   154d4:	str	r2, [sp, #44]	; 0x2c
   154d8:	str	r2, [sp, #72]	; 0x48
   154dc:	str	r3, [sp, #60]	; 0x3c
   154e0:	mov	r8, #5
   154e4:	b	1511c <__assert_fail@plt+0x3f88>
   154e8:	mov	r3, #0
   154ec:	mov	r2, #1
   154f0:	str	r2, [sp, #40]	; 0x28
   154f4:	mov	r4, r3
   154f8:	str	r3, [sp, #68]	; 0x44
   154fc:	str	r2, [sp, #28]
   15500:	str	r3, [sp, #44]	; 0x2c
   15504:	str	r3, [sp, #72]	; 0x48
   15508:	str	r3, [sp, #32]
   1550c:	str	r3, [sp, #52]	; 0x34
   15510:	str	r3, [sp, #60]	; 0x3c
   15514:	b	1511c <__assert_fail@plt+0x3f88>
   15518:	mov	r2, #1
   1551c:	mov	r3, #0
   15520:	str	r2, [sp, #40]	; 0x28
   15524:	mov	r4, r3
   15528:	str	r3, [sp, #68]	; 0x44
   1552c:	str	r8, [sp, #52]	; 0x34
   15530:	str	r2, [sp, #32]
   15534:	b	15418 <__assert_fail@plt+0x4284>
   15538:	mov	r3, #1
   1553c:	str	r3, [sp, #40]	; 0x28
   15540:	str	r3, [sp, #32]
   15544:	str	r3, [sp, #28]
   15548:	str	r3, [sp, #52]	; 0x34
   1554c:	ldr	r3, [pc, #2276]	; 15e38 <__assert_fail@plt+0x4ca4>
   15550:	mov	r2, #0
   15554:	mov	r4, r2
   15558:	str	r2, [sp, #68]	; 0x44
   1555c:	str	r2, [sp, #44]	; 0x2c
   15560:	str	r2, [sp, #72]	; 0x48
   15564:	str	r3, [sp, #60]	; 0x3c
   15568:	mov	r8, #2
   1556c:	b	1511c <__assert_fail@plt+0x3f88>
   15570:	mov	r7, #0
   15574:	ldr	r3, [sp, #24]
   15578:	cmn	r3, #1
   1557c:	beq	160b8 <__assert_fail@plt+0x4f24>
   15580:	ldr	r3, [sp, #24]
   15584:	subs	r3, r3, #1
   15588:	movne	r3, #1
   1558c:	cmp	r3, #0
   15590:	sub	r2, fp, #2
   15594:	clz	r2, r2
   15598:	lsr	r2, r2, #5
   1559c:	bne	15798 <__assert_fail@plt+0x4604>
   155a0:	cmp	r9, #0
   155a4:	bne	15798 <__assert_fail@plt+0x4604>
   155a8:	ldr	r3, [sp, #32]
   155ac:	tst	r3, r2
   155b0:	bne	158b8 <__assert_fail@plt+0x4724>
   155b4:	ldr	r3, [sp, #28]
   155b8:	eor	r3, r3, #1
   155bc:	orr	r3, r2, r3
   155c0:	ldr	r2, [sp, #32]
   155c4:	eor	r3, r3, #1
   155c8:	orrs	r3, r2, r3
   155cc:	beq	155fc <__assert_fail@plt+0x4468>
   155d0:	mov	r3, #0
   155d4:	ldr	r1, [sp, #56]	; 0x38
   155d8:	cmp	r1, #0
   155dc:	beq	155fc <__assert_fail@plt+0x4468>
   155e0:	lsr	r2, r5, #5
   155e4:	and	r0, r5, #31
   155e8:	uxtb	r2, r2
   155ec:	ldr	r1, [r1, r2, lsl #2]
   155f0:	lsr	r2, r1, r0
   155f4:	tst	r2, #1
   155f8:	bne	15604 <__assert_fail@plt+0x4470>
   155fc:	cmp	r7, #0
   15600:	beq	15854 <__assert_fail@plt+0x46c0>
   15604:	sub	r2, fp, #2
   15608:	clz	r2, r2
   1560c:	lsr	r2, r2, #5
   15610:	ldr	r3, [sp, #32]
   15614:	cmp	r3, #0
   15618:	bne	15944 <__assert_fail@plt+0x47b0>
   1561c:	ldr	r3, [sp, #44]	; 0x2c
   15620:	eor	r3, r3, #1
   15624:	ands	r3, r2, r3
   15628:	beq	15660 <__assert_fail@plt+0x44cc>
   1562c:	cmp	sl, r4
   15630:	movhi	r2, #39	; 0x27
   15634:	strbhi	r2, [r8, r4]
   15638:	add	r2, r4, #1
   1563c:	cmp	r2, sl
   15640:	movcc	r1, #36	; 0x24
   15644:	strbcc	r1, [r8, r2]
   15648:	add	r2, r4, #2
   1564c:	cmp	r2, sl
   15650:	add	r4, r4, #3
   15654:	movcc	r1, #39	; 0x27
   15658:	strbcc	r1, [r8, r2]
   1565c:	str	r3, [sp, #44]	; 0x2c
   15660:	cmp	r4, sl
   15664:	movcc	r3, #92	; 0x5c
   15668:	strbcc	r3, [r8, r4]
   1566c:	add	r9, r9, #1
   15670:	add	r4, r4, #1
   15674:	cmp	r4, sl
   15678:	ldr	r3, [sp, #40]	; 0x28
   1567c:	strbcc	r5, [r8, r4]
   15680:	cmp	r6, #0
   15684:	moveq	r3, #0
   15688:	str	r3, [sp, #40]	; 0x28
   1568c:	ldr	r3, [sp, #24]
   15690:	add	r4, r4, #1
   15694:	cmn	r3, #1
   15698:	bne	15138 <__assert_fail@plt+0x3fa4>
   1569c:	ldr	r3, [sp, #36]	; 0x24
   156a0:	ldrb	r6, [r3, r9]
   156a4:	adds	r6, r6, #0
   156a8:	movne	r6, #1
   156ac:	cmp	r6, #0
   156b0:	bne	1514c <__assert_fail@plt+0x3fb8>
   156b4:	str	fp, [sp, #160]	; 0xa0
   156b8:	mov	fp, r8
   156bc:	ldr	r8, [sp, #160]	; 0xa0
   156c0:	ldr	r1, [sp, #32]
   156c4:	cmp	r4, #0
   156c8:	sub	r2, r8, #2
   156cc:	clz	r2, r2
   156d0:	lsr	r2, r2, #5
   156d4:	andeq	r3, r2, r1
   156d8:	movne	r3, #0
   156dc:	cmp	r3, #0
   156e0:	bne	167cc <__assert_fail@plt+0x5638>
   156e4:	eor	r3, r1, #1
   156e8:	ands	r2, r2, r3
   156ec:	beq	16708 <__assert_fail@plt+0x5574>
   156f0:	ldr	r3, [sp, #68]	; 0x44
   156f4:	cmp	r3, #0
   156f8:	beq	1670c <__assert_fail@plt+0x5578>
   156fc:	ldr	r3, [sp, #40]	; 0x28
   15700:	cmp	r3, #0
   15704:	bne	16788 <__assert_fail@plt+0x55f4>
   15708:	ldr	r3, [sp, #72]	; 0x48
   1570c:	adds	r3, r3, #0
   15710:	movne	r3, #1
   15714:	cmp	sl, #0
   15718:	movne	r3, #0
   1571c:	cmp	r3, #0
   15720:	ldreq	r2, [sp, #68]	; 0x44
   15724:	beq	1670c <__assert_fail@plt+0x5578>
   15728:	ldr	sl, [sp, #72]	; 0x48
   1572c:	str	r3, [sp, #68]	; 0x44
   15730:	ldr	r3, [pc, #1792]	; 15e38 <__assert_fail@plt+0x4ca4>
   15734:	mov	r2, #39	; 0x27
   15738:	mov	r4, #1
   1573c:	str	r3, [sp, #60]	; 0x3c
   15740:	mov	r3, #0
   15744:	strb	r2, [fp]
   15748:	str	r4, [sp, #52]	; 0x34
   1574c:	mov	r8, #2
   15750:	str	r3, [sp, #32]
   15754:	b	1511c <__assert_fail@plt+0x3f88>
   15758:	mov	r7, #0
   1575c:	cmp	fp, #2
   15760:	beq	16098 <__assert_fail@plt+0x4f04>
   15764:	ldr	r3, [sp, #52]	; 0x34
   15768:	ldr	r2, [sp, #28]
   1576c:	ldr	r1, [sp, #32]
   15770:	cmp	r3, #0
   15774:	andne	r2, r2, r1
   15778:	moveq	r2, #0
   1577c:	cmp	r2, #0
   15780:	moveq	r5, #92	; 0x5c
   15784:	moveq	r3, r5
   15788:	bne	160a4 <__assert_fail@plt+0x4f10>
   1578c:	ldr	r1, [sp, #28]
   15790:	cmp	r1, #0
   15794:	bne	16814 <__assert_fail@plt+0x5680>
   15798:	mov	r6, #0
   1579c:	b	155b4 <__assert_fail@plt+0x4420>
   157a0:	mov	r7, #0
   157a4:	cmp	fp, #2
   157a8:	beq	16108 <__assert_fail@plt+0x4f74>
   157ac:	cmp	fp, #5
   157b0:	beq	160cc <__assert_fail@plt+0x4f38>
   157b4:	sub	r2, fp, #2
   157b8:	mov	r6, #0
   157bc:	clz	r2, r2
   157c0:	mov	r5, #63	; 0x3f
   157c4:	lsr	r2, r2, #5
   157c8:	b	155b4 <__assert_fail@plt+0x4420>
   157cc:	mov	r7, #0
   157d0:	cmp	fp, #2
   157d4:	strne	r6, [sp, #68]	; 0x44
   157d8:	movne	r2, #0
   157dc:	movne	r5, #39	; 0x27
   157e0:	bne	155b4 <__assert_fail@plt+0x4420>
   157e4:	ldr	r3, [sp, #32]
   157e8:	cmp	r3, #0
   157ec:	bne	164e8 <__assert_fail@plt+0x5354>
   157f0:	cmp	sl, #0
   157f4:	ldr	r3, [sp, #72]	; 0x48
   157f8:	clz	r3, r3
   157fc:	lsr	r3, r3, #5
   15800:	moveq	r3, #0
   15804:	cmp	r3, #0
   15808:	bne	1641c <__assert_fail@plt+0x5288>
   1580c:	cmp	sl, r4
   15810:	movhi	r3, #39	; 0x27
   15814:	strbhi	r3, [r8, r4]
   15818:	add	r3, r4, #1
   1581c:	cmp	sl, r3
   15820:	movhi	r2, #92	; 0x5c
   15824:	strbhi	r2, [r8, r3]
   15828:	add	r3, r4, #2
   1582c:	cmp	sl, r3
   15830:	movhi	r2, #39	; 0x27
   15834:	strbhi	r2, [r8, r3]
   15838:	mov	r3, #0
   1583c:	cmp	r7, #0
   15840:	add	r4, r4, #3
   15844:	str	r3, [sp, #44]	; 0x2c
   15848:	str	r6, [sp, #68]	; 0x44
   1584c:	mov	r5, #39	; 0x27
   15850:	bne	15604 <__assert_fail@plt+0x4470>
   15854:	ldr	r2, [sp, #44]	; 0x2c
   15858:	eor	r3, r3, #1
   1585c:	and	r3, r3, r2
   15860:	add	r9, r9, #1
   15864:	uxtb	r3, r3
   15868:	cmp	r3, #0
   1586c:	beq	15674 <__assert_fail@plt+0x44e0>
   15870:	cmp	sl, r4
   15874:	movhi	r3, #39	; 0x27
   15878:	strbhi	r3, [r8, r4]
   1587c:	add	r3, r4, #1
   15880:	cmp	sl, r3
   15884:	movhi	r2, #39	; 0x27
   15888:	strbhi	r2, [r8, r3]
   1588c:	mov	r3, #0
   15890:	add	r4, r4, #2
   15894:	str	r3, [sp, #44]	; 0x2c
   15898:	b	15674 <__assert_fail@plt+0x44e0>
   1589c:	mov	r3, #114	; 0x72
   158a0:	ldr	r1, [sp, #32]
   158a4:	sub	r2, fp, #2
   158a8:	clz	r2, r2
   158ac:	lsr	r2, r2, #5
   158b0:	tst	r2, r1
   158b4:	beq	1578c <__assert_fail@plt+0x45f8>
   158b8:	mov	fp, r8
   158bc:	mov	r8, #2
   158c0:	ldr	r3, [sp, #28]
   158c4:	cmp	r3, #0
   158c8:	movne	r8, #4
   158cc:	ldr	r3, [sp, #164]	; 0xa4
   158d0:	mov	ip, #0
   158d4:	bic	r3, r3, #2
   158d8:	str	r3, [sp, #4]
   158dc:	ldr	r3, [sp, #76]	; 0x4c
   158e0:	str	r8, [sp]
   158e4:	str	r3, [sp, #16]
   158e8:	ldr	r3, [sp, #80]	; 0x50
   158ec:	ldr	r2, [sp, #36]	; 0x24
   158f0:	str	r3, [sp, #12]
   158f4:	mov	r1, sl
   158f8:	ldr	r3, [sp, #24]
   158fc:	mov	r0, fp
   15900:	str	ip, [sp, #8]
   15904:	bl	15024 <__assert_fail@plt+0x3e90>
   15908:	mov	r4, r0
   1590c:	ldr	r3, [pc, #1304]	; 15e2c <__assert_fail@plt+0x4c98>
   15910:	ldr	r2, [sp, #116]	; 0x74
   15914:	mov	r0, r4
   15918:	ldr	r3, [r3]
   1591c:	cmp	r2, r3
   15920:	bne	16810 <__assert_fail@plt+0x567c>
   15924:	add	sp, sp, #124	; 0x7c
   15928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1592c:	mov	r5, #110	; 0x6e
   15930:	ldr	r3, [sp, #32]
   15934:	mov	r2, #0
   15938:	cmp	r3, #0
   1593c:	mov	r6, r2
   15940:	beq	1561c <__assert_fail@plt+0x4488>
   15944:	str	fp, [sp, #160]	; 0xa0
   15948:	mov	fp, r8
   1594c:	ldr	r8, [sp, #160]	; 0xa0
   15950:	mov	r3, r2
   15954:	ldr	r2, [sp, #28]
   15958:	and	r2, r2, r3
   1595c:	str	r2, [sp, #28]
   15960:	b	158c0 <__assert_fail@plt+0x472c>
   15964:	mov	r5, #116	; 0x74
   15968:	b	15930 <__assert_fail@plt+0x479c>
   1596c:	mov	r5, #102	; 0x66
   15970:	ldr	r3, [sp, #32]
   15974:	cmp	r3, #0
   15978:	bne	16524 <__assert_fail@plt+0x5390>
   1597c:	mov	r6, #0
   15980:	b	15660 <__assert_fail@plt+0x44cc>
   15984:	mov	r5, #118	; 0x76
   15988:	b	15970 <__assert_fail@plt+0x47dc>
   1598c:	mov	r7, #0
   15990:	mov	r6, #0
   15994:	b	155d0 <__assert_fail@plt+0x443c>
   15998:	ldr	r3, [sp, #32]
   1599c:	cmp	r3, #0
   159a0:	bne	16768 <__assert_fail@plt+0x55d4>
   159a4:	mov	r7, r3
   159a8:	ldr	r3, [sp, #44]	; 0x2c
   159ac:	sub	r2, fp, #2
   159b0:	eor	r3, r3, #1
   159b4:	clz	r2, r2
   159b8:	lsr	r2, r2, #5
   159bc:	ands	r3, r2, r3
   159c0:	beq	16408 <__assert_fail@plt+0x5274>
   159c4:	cmp	sl, r4
   159c8:	movhi	r1, #39	; 0x27
   159cc:	strbhi	r1, [r8, r4]
   159d0:	add	r1, r4, #1
   159d4:	cmp	sl, r1
   159d8:	movhi	r0, #36	; 0x24
   159dc:	strbhi	r0, [r8, r1]
   159e0:	add	r1, r4, #2
   159e4:	cmp	sl, r1
   159e8:	movhi	r0, #39	; 0x27
   159ec:	strbhi	r0, [r8, r1]
   159f0:	add	r1, r4, #3
   159f4:	cmp	sl, r1
   159f8:	bls	16468 <__assert_fail@plt+0x52d4>
   159fc:	mov	r4, r1
   15a00:	mov	r1, #92	; 0x5c
   15a04:	strb	r1, [r8, r4]
   15a08:	mov	r1, r4
   15a0c:	str	r3, [sp, #44]	; 0x2c
   15a10:	cmp	fp, #2
   15a14:	add	r4, r4, #1
   15a18:	beq	164b0 <__assert_fail@plt+0x531c>
   15a1c:	ldr	r0, [sp, #24]
   15a20:	add	r3, r9, #1
   15a24:	cmp	r3, r0
   15a28:	bcs	15a40 <__assert_fail@plt+0x48ac>
   15a2c:	ldr	r0, [sp, #36]	; 0x24
   15a30:	ldrb	r3, [r0, r3]
   15a34:	sub	r3, r3, #48	; 0x30
   15a38:	cmp	r3, #9
   15a3c:	bls	164c0 <__assert_fail@plt+0x532c>
   15a40:	mov	r5, #48	; 0x30
   15a44:	ldr	r3, [sp, #28]
   15a48:	eor	r3, r3, #1
   15a4c:	orrs	r2, r2, r3
   15a50:	mov	r3, r6
   15a54:	moveq	r6, r2
   15a58:	beq	155d4 <__assert_fail@plt+0x4440>
   15a5c:	mov	r6, #0
   15a60:	b	155fc <__assert_fail@plt+0x4468>
   15a64:	mov	r2, #0
   15a68:	mov	r6, r2
   15a6c:	mov	r5, #98	; 0x62
   15a70:	b	1561c <__assert_fail@plt+0x4488>
   15a74:	mov	r5, #97	; 0x61
   15a78:	b	1597c <__assert_fail@plt+0x47e8>
   15a7c:	mov	r3, r7
   15a80:	mov	r6, r7
   15a84:	mov	r2, #0
   15a88:	mov	r7, r3
   15a8c:	mov	r5, #32
   15a90:	b	155b4 <__assert_fail@plt+0x4420>
   15a94:	cmp	r9, #0
   15a98:	mov	r3, r7
   15a9c:	bne	16064 <__assert_fail@plt+0x4ed0>
   15aa0:	mov	r6, r7
   15aa4:	mov	r2, r9
   15aa8:	mov	r7, r3
   15aac:	b	155b4 <__assert_fail@plt+0x4420>
   15ab0:	mov	r6, r7
   15ab4:	b	155d0 <__assert_fail@plt+0x443c>
   15ab8:	mov	r7, #0
   15abc:	ldr	r3, [sp, #64]	; 0x40
   15ac0:	cmp	r3, #1
   15ac4:	bne	16120 <__assert_fail@plt+0x4f8c>
   15ac8:	bl	11068 <__ctype_b_loc@plt>
   15acc:	ldr	r2, [sp, #64]	; 0x40
   15ad0:	sxth	r3, r5
   15ad4:	mov	ip, r2
   15ad8:	lsl	r3, r3, #1
   15adc:	ldr	r2, [r0]
   15ae0:	ldrh	r3, [r2, r3]
   15ae4:	and	r3, r3, #16384	; 0x4000
   15ae8:	cmp	r3, #0
   15aec:	ldr	r3, [sp, #28]
   15af0:	movne	r6, #1
   15af4:	moveq	r6, #0
   15af8:	movne	r2, #0
   15afc:	andeq	r2, r3, #1
   15b00:	cmp	r2, #0
   15b04:	bne	16430 <__assert_fail@plt+0x529c>
   15b08:	sub	r2, fp, #2
   15b0c:	clz	r2, r2
   15b10:	lsr	r2, r2, #5
   15b14:	b	155b4 <__assert_fail@plt+0x4420>
   15b18:	cmp	r4, #0
   15b1c:	bne	167dc <__assert_fail@plt+0x5648>
   15b20:	str	r4, [sp, #28]
   15b24:	cmp	sl, #0
   15b28:	bne	16820 <__assert_fail@plt+0x568c>
   15b2c:	ldr	r3, [pc, #772]	; 15e38 <__assert_fail@plt+0x4ca4>
   15b30:	mov	r4, #1
   15b34:	str	r4, [sp, #40]	; 0x28
   15b38:	str	r3, [sp, #60]	; 0x3c
   15b3c:	str	r4, [sp, #52]	; 0x34
   15b40:	str	sl, [sp, #72]	; 0x48
   15b44:	str	sl, [sp, #68]	; 0x44
   15b48:	str	sl, [sp, #44]	; 0x2c
   15b4c:	str	sl, [sp, #32]
   15b50:	mov	r8, #2
   15b54:	b	1511c <__assert_fail@plt+0x3f88>
   15b58:	ldr	r3, [sp, #36]	; 0x24
   15b5c:	ldrb	r5, [r3, r9]
   15b60:	cmp	r5, #126	; 0x7e
   15b64:	ldrls	pc, [pc, r5, lsl #2]
   15b68:	b	15abc <__assert_fail@plt+0x4928>
   15b6c:	andeq	r5, r1, r0, lsr #27
   15b70:			; <UNDEFINED> instruction: 0x00015abc
   15b74:			; <UNDEFINED> instruction: 0x00015abc
   15b78:			; <UNDEFINED> instruction: 0x00015abc
   15b7c:			; <UNDEFINED> instruction: 0x00015abc
   15b80:			; <UNDEFINED> instruction: 0x00015abc
   15b84:			; <UNDEFINED> instruction: 0x00015abc
   15b88:	andeq	r5, r1, ip, lsl #27
   15b8c:	andeq	r5, r1, r8, ror sp
   15b90:	andeq	r5, r1, r0, ror sp
   15b94:	andeq	r5, r1, r8, ror #26
   15b98:	andeq	r5, r1, r8, lsl lr
   15b9c:	andeq	r5, r1, r4, lsl #28
   15ba0:	muleq	r1, ip, r8
   15ba4:			; <UNDEFINED> instruction: 0x00015abc
   15ba8:			; <UNDEFINED> instruction: 0x00015abc
   15bac:			; <UNDEFINED> instruction: 0x00015abc
   15bb0:			; <UNDEFINED> instruction: 0x00015abc
   15bb4:			; <UNDEFINED> instruction: 0x00015abc
   15bb8:			; <UNDEFINED> instruction: 0x00015abc
   15bbc:			; <UNDEFINED> instruction: 0x00015abc
   15bc0:			; <UNDEFINED> instruction: 0x00015abc
   15bc4:			; <UNDEFINED> instruction: 0x00015abc
   15bc8:			; <UNDEFINED> instruction: 0x00015abc
   15bcc:			; <UNDEFINED> instruction: 0x00015abc
   15bd0:			; <UNDEFINED> instruction: 0x00015abc
   15bd4:			; <UNDEFINED> instruction: 0x00015abc
   15bd8:			; <UNDEFINED> instruction: 0x00015abc
   15bdc:			; <UNDEFINED> instruction: 0x00015abc
   15be0:			; <UNDEFINED> instruction: 0x00015abc
   15be4:			; <UNDEFINED> instruction: 0x00015abc
   15be8:			; <UNDEFINED> instruction: 0x00015abc
   15bec:	strdeq	r5, [r1], -r4
   15bf0:	andeq	r5, r1, r0, ror #27
   15bf4:	andeq	r5, r1, r0, ror #27
   15bf8:	ldrdeq	r5, [r1], -r0
   15bfc:	andeq	r5, r1, r0, ror #27
   15c00:	andeq	r5, r1, r8, lsl #22
   15c04:	andeq	r5, r1, r0, ror #27
   15c08:	ldrdeq	r5, [r1], -r0
   15c0c:	andeq	r5, r1, r0, ror #27
   15c10:	andeq	r5, r1, r0, ror #27
   15c14:	andeq	r5, r1, r0, ror #27
   15c18:	andeq	r5, r1, r8, lsl #22
   15c1c:	andeq	r5, r1, r8, lsl #22
   15c20:	andeq	r5, r1, r8, lsl #22
   15c24:	andeq	r5, r1, r8, lsl #22
   15c28:	andeq	r5, r1, r8, lsl #22
   15c2c:	andeq	r5, r1, r8, lsl #22
   15c30:	andeq	r5, r1, r8, lsl #22
   15c34:	andeq	r5, r1, r8, lsl #22
   15c38:	andeq	r5, r1, r8, lsl #22
   15c3c:	andeq	r5, r1, r8, lsl #22
   15c40:	andeq	r5, r1, r8, lsl #22
   15c44:	andeq	r5, r1, r8, lsl #22
   15c48:	andeq	r5, r1, r8, lsl #22
   15c4c:	andeq	r5, r1, r8, lsl #22
   15c50:	andeq	r5, r1, r8, lsl #22
   15c54:	andeq	r5, r1, r8, lsl #22
   15c58:	andeq	r5, r1, r0, ror #27
   15c5c:	andeq	r5, r1, r0, ror #27
   15c60:	andeq	r5, r1, r0, ror #27
   15c64:	andeq	r5, r1, r0, ror #27
   15c68:	andeq	r5, r1, r4, lsr #15
   15c6c:			; <UNDEFINED> instruction: 0x00015abc
   15c70:	andeq	r5, r1, r8, lsl #22
   15c74:	andeq	r5, r1, r8, lsl #22
   15c78:	andeq	r5, r1, r8, lsl #22
   15c7c:	andeq	r5, r1, r8, lsl #22
   15c80:	andeq	r5, r1, r8, lsl #22
   15c84:	andeq	r5, r1, r8, lsl #22
   15c88:	andeq	r5, r1, r8, lsl #22
   15c8c:	andeq	r5, r1, r8, lsl #22
   15c90:	andeq	r5, r1, r8, lsl #22
   15c94:	andeq	r5, r1, r8, lsl #22
   15c98:	andeq	r5, r1, r8, lsl #22
   15c9c:	andeq	r5, r1, r8, lsl #22
   15ca0:	andeq	r5, r1, r8, lsl #22
   15ca4:	andeq	r5, r1, r8, lsl #22
   15ca8:	andeq	r5, r1, r8, lsl #22
   15cac:	andeq	r5, r1, r8, lsl #22
   15cb0:	andeq	r5, r1, r8, lsl #22
   15cb4:	andeq	r5, r1, r8, lsl #22
   15cb8:	andeq	r5, r1, r8, lsl #22
   15cbc:	andeq	r5, r1, r8, lsl #22
   15cc0:	andeq	r5, r1, r8, lsl #22
   15cc4:	andeq	r5, r1, r8, lsl #22
   15cc8:	andeq	r5, r1, r8, lsl #22
   15ccc:	andeq	r5, r1, r8, lsl #22
   15cd0:	andeq	r5, r1, r8, lsl #22
   15cd4:	andeq	r5, r1, r8, lsl #22
   15cd8:	andeq	r5, r1, r0, ror #27
   15cdc:	andeq	r5, r1, ip, asr r7
   15ce0:	andeq	r5, r1, r8, lsl #22
   15ce4:	andeq	r5, r1, r0, ror #27
   15ce8:	andeq	r5, r1, r8, lsl #22
   15cec:	andeq	r5, r1, r0, ror #27
   15cf0:	andeq	r5, r1, r8, lsl #22
   15cf4:	andeq	r5, r1, r8, lsl #22
   15cf8:	andeq	r5, r1, r8, lsl #22
   15cfc:	andeq	r5, r1, r8, lsl #22
   15d00:	andeq	r5, r1, r8, lsl #22
   15d04:	andeq	r5, r1, r8, lsl #22
   15d08:	andeq	r5, r1, r8, lsl #22
   15d0c:	andeq	r5, r1, r8, lsl #22
   15d10:	andeq	r5, r1, r8, lsl #22
   15d14:	andeq	r5, r1, r8, lsl #22
   15d18:	andeq	r5, r1, r8, lsl #22
   15d1c:	andeq	r5, r1, r8, lsl #22
   15d20:	andeq	r5, r1, r8, lsl #22
   15d24:	andeq	r5, r1, r8, lsl #22
   15d28:	andeq	r5, r1, r8, lsl #22
   15d2c:	andeq	r5, r1, r8, lsl #22
   15d30:	andeq	r5, r1, r8, lsl #22
   15d34:	andeq	r5, r1, r8, lsl #22
   15d38:	andeq	r5, r1, r8, lsl #22
   15d3c:	andeq	r5, r1, r8, lsl #22
   15d40:	andeq	r5, r1, r8, lsl #22
   15d44:	andeq	r5, r1, r8, lsl #22
   15d48:	andeq	r5, r1, r8, lsl #22
   15d4c:	andeq	r5, r1, r8, lsl #22
   15d50:	andeq	r5, r1, r8, lsl #22
   15d54:	andeq	r5, r1, r8, lsl #22
   15d58:	andeq	r5, r1, r4, ror r5
   15d5c:	andeq	r5, r1, r0, ror #27
   15d60:	andeq	r5, r1, r4, ror r5
   15d64:	ldrdeq	r5, [r1], -r0
   15d68:	mov	r3, #110	; 0x6e
   15d6c:	b	158a0 <__assert_fail@plt+0x470c>
   15d70:	mov	r3, #116	; 0x74
   15d74:	b	158a0 <__assert_fail@plt+0x470c>
   15d78:	sub	r2, fp, #2
   15d7c:	mov	r3, #98	; 0x62
   15d80:	clz	r2, r2
   15d84:	lsr	r2, r2, #5
   15d88:	b	1578c <__assert_fail@plt+0x45f8>
   15d8c:	sub	r2, fp, #2
   15d90:	mov	r3, #97	; 0x61
   15d94:	clz	r2, r2
   15d98:	lsr	r2, r2, #5
   15d9c:	b	1578c <__assert_fail@plt+0x45f8>
   15da0:	ldr	r3, [sp, #28]
   15da4:	cmp	r3, #0
   15da8:	bne	15998 <__assert_fail@plt+0x4804>
   15dac:	ldr	r3, [sp, #164]	; 0xa4
   15db0:	tst	r3, #1
   15db4:	bne	16428 <__assert_fail@plt+0x5294>
   15db8:	ldr	r6, [sp, #28]
   15dbc:	sub	r2, fp, #2
   15dc0:	mov	r7, r6
   15dc4:	clz	r2, r2
   15dc8:	lsr	r2, r2, #5
   15dcc:	b	155b4 <__assert_fail@plt+0x4420>
   15dd0:	sub	r2, fp, #2
   15dd4:	clz	r2, r2
   15dd8:	lsr	r2, r2, #5
   15ddc:	b	155a0 <__assert_fail@plt+0x440c>
   15de0:	sub	r2, fp, #2
   15de4:	mov	r6, #0
   15de8:	clz	r2, r2
   15dec:	lsr	r2, r2, #5
   15df0:	b	155a8 <__assert_fail@plt+0x4414>
   15df4:	sub	r2, fp, #2
   15df8:	clz	r2, r2
   15dfc:	lsr	r2, r2, #5
   15e00:	b	155a8 <__assert_fail@plt+0x4414>
   15e04:	sub	r2, fp, #2
   15e08:	mov	r3, #102	; 0x66
   15e0c:	clz	r2, r2
   15e10:	lsr	r2, r2, #5
   15e14:	b	1578c <__assert_fail@plt+0x45f8>
   15e18:	sub	r2, fp, #2
   15e1c:	mov	r3, #118	; 0x76
   15e20:	clz	r2, r2
   15e24:	lsr	r2, r2, #5
   15e28:	b	1578c <__assert_fail@plt+0x45f8>
   15e2c:	andeq	fp, r2, r8, lsl #30
   15e30:	ldrdeq	fp, [r1], -r4
   15e34:			; <UNDEFINED> instruction: 0x0001b7bc
   15e38:	ldrdeq	fp, [r1], -r0
   15e3c:	ldr	r3, [sp, #48]	; 0x30
   15e40:	ldrb	r5, [r3]
   15e44:	cmp	r5, #126	; 0x7e
   15e48:	ldrls	pc, [pc, r5, lsl #2]
   15e4c:	b	15ab8 <__assert_fail@plt+0x4924>
   15e50:	muleq	r1, r8, r9
   15e54:			; <UNDEFINED> instruction: 0x00015ab8
   15e58:			; <UNDEFINED> instruction: 0x00015ab8
   15e5c:			; <UNDEFINED> instruction: 0x00015ab8
   15e60:			; <UNDEFINED> instruction: 0x00015ab8
   15e64:			; <UNDEFINED> instruction: 0x00015ab8
   15e68:			; <UNDEFINED> instruction: 0x00015ab8
   15e6c:	muleq	r1, r0, r0
   15e70:	andeq	r6, r1, r8, lsl #1
   15e74:	andeq	r5, r1, r4, ror #18
   15e78:	andeq	r5, r1, ip, lsr #18
   15e7c:	andeq	r5, r1, r4, lsl #19
   15e80:	andeq	r5, r1, ip, ror #18
   15e84:	andeq	r6, r1, ip, ror r0
   15e88:			; <UNDEFINED> instruction: 0x00015ab8
   15e8c:			; <UNDEFINED> instruction: 0x00015ab8
   15e90:			; <UNDEFINED> instruction: 0x00015ab8
   15e94:			; <UNDEFINED> instruction: 0x00015ab8
   15e98:			; <UNDEFINED> instruction: 0x00015ab8
   15e9c:			; <UNDEFINED> instruction: 0x00015ab8
   15ea0:			; <UNDEFINED> instruction: 0x00015ab8
   15ea4:			; <UNDEFINED> instruction: 0x00015ab8
   15ea8:			; <UNDEFINED> instruction: 0x00015ab8
   15eac:			; <UNDEFINED> instruction: 0x00015ab8
   15eb0:			; <UNDEFINED> instruction: 0x00015ab8
   15eb4:			; <UNDEFINED> instruction: 0x00015ab8
   15eb8:			; <UNDEFINED> instruction: 0x00015ab8
   15ebc:			; <UNDEFINED> instruction: 0x00015ab8
   15ec0:			; <UNDEFINED> instruction: 0x00015ab8
   15ec4:			; <UNDEFINED> instruction: 0x00015ab8
   15ec8:			; <UNDEFINED> instruction: 0x00015ab8
   15ecc:			; <UNDEFINED> instruction: 0x00015ab8
   15ed0:	andeq	r6, r1, r4, ror r0
   15ed4:	andeq	r5, r1, ip, lsl #19
   15ed8:	andeq	r5, r1, ip, lsl #19
   15edc:	andeq	r6, r1, r8, asr r0
   15ee0:	andeq	r5, r1, ip, lsl #19
   15ee4:	andeq	r6, r1, ip, asr #32
   15ee8:	andeq	r5, r1, ip, lsl #19
   15eec:	andeq	r5, r1, ip, asr #15
   15ef0:	andeq	r5, r1, ip, lsl #19
   15ef4:	andeq	r5, r1, ip, lsl #19
   15ef8:	andeq	r5, r1, ip, lsl #19
   15efc:	andeq	r6, r1, ip, asr #32
   15f00:	andeq	r6, r1, ip, asr #32
   15f04:	andeq	r6, r1, ip, asr #32
   15f08:	andeq	r6, r1, ip, asr #32
   15f0c:	andeq	r6, r1, ip, asr #32
   15f10:	andeq	r6, r1, ip, asr #32
   15f14:	andeq	r6, r1, ip, asr #32
   15f18:	andeq	r6, r1, ip, asr #32
   15f1c:	andeq	r6, r1, ip, asr #32
   15f20:	andeq	r6, r1, ip, asr #32
   15f24:	andeq	r6, r1, ip, asr #32
   15f28:	andeq	r6, r1, ip, asr #32
   15f2c:	andeq	r6, r1, ip, asr #32
   15f30:	andeq	r6, r1, ip, asr #32
   15f34:	andeq	r6, r1, ip, asr #32
   15f38:	andeq	r6, r1, ip, asr #32
   15f3c:	andeq	r5, r1, ip, lsl #19
   15f40:	andeq	r5, r1, ip, lsl #19
   15f44:	andeq	r5, r1, ip, lsl #19
   15f48:	andeq	r5, r1, ip, lsl #19
   15f4c:	andeq	r5, r1, r0, lsr #15
   15f50:			; <UNDEFINED> instruction: 0x00015ab8
   15f54:	andeq	r6, r1, ip, asr #32
   15f58:	andeq	r6, r1, ip, asr #32
   15f5c:	andeq	r6, r1, ip, asr #32
   15f60:	andeq	r6, r1, ip, asr #32
   15f64:	andeq	r6, r1, ip, asr #32
   15f68:	andeq	r6, r1, ip, asr #32
   15f6c:	andeq	r6, r1, ip, asr #32
   15f70:	andeq	r6, r1, ip, asr #32
   15f74:	andeq	r6, r1, ip, asr #32
   15f78:	andeq	r6, r1, ip, asr #32
   15f7c:	andeq	r6, r1, ip, asr #32
   15f80:	andeq	r6, r1, ip, asr #32
   15f84:	andeq	r6, r1, ip, asr #32
   15f88:	andeq	r6, r1, ip, asr #32
   15f8c:	andeq	r6, r1, ip, asr #32
   15f90:	andeq	r6, r1, ip, asr #32
   15f94:	andeq	r6, r1, ip, asr #32
   15f98:	andeq	r6, r1, ip, asr #32
   15f9c:	andeq	r6, r1, ip, asr #32
   15fa0:	andeq	r6, r1, ip, asr #32
   15fa4:	andeq	r6, r1, ip, asr #32
   15fa8:	andeq	r6, r1, ip, asr #32
   15fac:	andeq	r6, r1, ip, asr #32
   15fb0:	andeq	r6, r1, ip, asr #32
   15fb4:	andeq	r6, r1, ip, asr #32
   15fb8:	andeq	r6, r1, ip, asr #32
   15fbc:	andeq	r5, r1, ip, lsl #19
   15fc0:	andeq	r5, r1, r8, asr r7
   15fc4:	andeq	r6, r1, ip, asr #32
   15fc8:	andeq	r5, r1, ip, lsl #19
   15fcc:	andeq	r6, r1, ip, asr #32
   15fd0:	andeq	r5, r1, ip, lsl #19
   15fd4:	andeq	r6, r1, ip, asr #32
   15fd8:	andeq	r6, r1, ip, asr #32
   15fdc:	andeq	r6, r1, ip, asr #32
   15fe0:	andeq	r6, r1, ip, asr #32
   15fe4:	andeq	r6, r1, ip, asr #32
   15fe8:	andeq	r6, r1, ip, asr #32
   15fec:	andeq	r6, r1, ip, asr #32
   15ff0:	andeq	r6, r1, ip, asr #32
   15ff4:	andeq	r6, r1, ip, asr #32
   15ff8:	andeq	r6, r1, ip, asr #32
   15ffc:	andeq	r6, r1, ip, asr #32
   16000:	andeq	r6, r1, ip, asr #32
   16004:	andeq	r6, r1, ip, asr #32
   16008:	andeq	r6, r1, ip, asr #32
   1600c:	andeq	r6, r1, ip, asr #32
   16010:	andeq	r6, r1, ip, asr #32
   16014:	andeq	r6, r1, ip, asr #32
   16018:	andeq	r6, r1, ip, asr #32
   1601c:	andeq	r6, r1, ip, asr #32
   16020:	andeq	r6, r1, ip, asr #32
   16024:	andeq	r6, r1, ip, asr #32
   16028:	andeq	r6, r1, ip, asr #32
   1602c:	andeq	r6, r1, ip, asr #32
   16030:	andeq	r6, r1, ip, asr #32
   16034:	andeq	r6, r1, ip, asr #32
   16038:	andeq	r6, r1, ip, asr #32
   1603c:	andeq	r5, r1, r0, ror r5
   16040:	andeq	r5, r1, ip, lsl #19
   16044:	andeq	r5, r1, r0, ror r5
   16048:	andeq	r6, r1, r8, asr r0
   1604c:	mov	r6, r7
   16050:	mov	r7, #0
   16054:	b	155d0 <__assert_fail@plt+0x443c>
   16058:	cmp	r9, #0
   1605c:	mov	r3, #0
   16060:	beq	15aa0 <__assert_fail@plt+0x490c>
   16064:	mov	r6, #0
   16068:	mov	r7, r3
   1606c:	mov	r3, r6
   16070:	b	155d4 <__assert_fail@plt+0x4440>
   16074:	mov	r3, #0
   16078:	b	15a80 <__assert_fail@plt+0x48ec>
   1607c:	mov	r7, #0
   16080:	mov	r3, #114	; 0x72
   16084:	b	158a0 <__assert_fail@plt+0x470c>
   16088:	mov	r5, #98	; 0x62
   1608c:	b	15930 <__assert_fail@plt+0x479c>
   16090:	mov	r5, #97	; 0x61
   16094:	b	15970 <__assert_fail@plt+0x47dc>
   16098:	ldr	r3, [sp, #32]
   1609c:	cmp	r3, #0
   160a0:	bne	164e8 <__assert_fail@plt+0x5354>
   160a4:	add	r9, r9, #1
   160a8:	ldr	r3, [sp, #44]	; 0x2c
   160ac:	mov	r6, #0
   160b0:	mov	r5, #92	; 0x5c
   160b4:	b	15868 <__assert_fail@plt+0x46d4>
   160b8:	ldr	r3, [sp, #36]	; 0x24
   160bc:	ldrb	r3, [r3, #1]
   160c0:	adds	r3, r3, #0
   160c4:	movne	r3, #1
   160c8:	b	1558c <__assert_fail@plt+0x43f8>
   160cc:	ldr	r3, [sp, #164]	; 0xa4
   160d0:	ands	r3, r3, #4
   160d4:	beq	160f8 <__assert_fail@plt+0x4f64>
   160d8:	ldr	r2, [sp, #24]
   160dc:	add	r3, r9, #2
   160e0:	cmp	r3, r2
   160e4:	bcs	160f8 <__assert_fail@plt+0x4f64>
   160e8:	ldr	r2, [sp, #48]	; 0x30
   160ec:	ldrb	r5, [r2, #1]
   160f0:	cmp	r5, #63	; 0x3f
   160f4:	beq	1655c <__assert_fail@plt+0x53c8>
   160f8:	mov	r2, #0
   160fc:	mov	r6, r2
   16100:	mov	r5, #63	; 0x3f
   16104:	b	155b4 <__assert_fail@plt+0x4420>
   16108:	ldr	r3, [sp, #32]
   1610c:	cmp	r3, #0
   16110:	bne	164e8 <__assert_fail@plt+0x5354>
   16114:	mov	r6, r3
   16118:	mov	r5, #63	; 0x3f
   1611c:	b	155fc <__assert_fail@plt+0x4468>
   16120:	ldr	r3, [sp, #24]
   16124:	cmn	r3, #1
   16128:	mov	r3, #0
   1612c:	str	r3, [sp, #108]	; 0x6c
   16130:	str	r3, [sp, #112]	; 0x70
   16134:	bne	16144 <__assert_fail@plt+0x4fb0>
   16138:	ldr	r0, [sp, #36]	; 0x24
   1613c:	bl	11080 <strlen@plt>
   16140:	str	r0, [sp, #24]
   16144:	mov	r3, #0
   16148:	str	sl, [sp, #88]	; 0x58
   1614c:	ldr	sl, [sp, #36]	; 0x24
   16150:	str	r5, [sp, #92]	; 0x5c
   16154:	mov	r5, r3
   16158:	str	r7, [sp, #96]	; 0x60
   1615c:	str	r4, [sp, #100]	; 0x64
   16160:	str	r8, [sp, #84]	; 0x54
   16164:	ldr	r3, [sp, #24]
   16168:	add	r4, r9, r5
   1616c:	add	r7, sl, r4
   16170:	sub	r2, r3, r4
   16174:	mov	r1, r7
   16178:	add	r3, sp, #108	; 0x6c
   1617c:	add	r0, sp, #104	; 0x68
   16180:	bl	18ac4 <__assert_fail@plt+0x7930>
   16184:	subs	r8, r0, #0
   16188:	beq	161d8 <__assert_fail@plt+0x5044>
   1618c:	cmn	r8, #1
   16190:	beq	16538 <__assert_fail@plt+0x53a4>
   16194:	cmn	r8, #2
   16198:	beq	16658 <__assert_fail@plt+0x54c4>
   1619c:	ldr	r3, [sp, #32]
   161a0:	cmp	fp, #2
   161a4:	movne	r3, #0
   161a8:	andeq	r3, r3, #1
   161ac:	cmp	r3, #0
   161b0:	bne	16338 <__assert_fail@plt+0x51a4>
   161b4:	ldr	r0, [sp, #104]	; 0x68
   161b8:	bl	10fb4 <iswprint@plt>
   161bc:	add	r5, r5, r8
   161c0:	cmp	r0, #0
   161c4:	add	r0, sp, #108	; 0x6c
   161c8:	moveq	r6, #0
   161cc:	bl	10f6c <mbsinit@plt>
   161d0:	cmp	r0, #0
   161d4:	beq	16164 <__assert_fail@plt+0x4fd0>
   161d8:	ldr	r3, [sp, #28]
   161dc:	mov	ip, r5
   161e0:	eor	r2, r6, #1
   161e4:	ldr	r5, [sp, #92]	; 0x5c
   161e8:	ldr	r7, [sp, #96]	; 0x60
   161ec:	ldr	r4, [sp, #100]	; 0x64
   161f0:	ldr	r8, [sp, #84]	; 0x54
   161f4:	ldr	sl, [sp, #88]	; 0x58
   161f8:	and	r2, r2, r3
   161fc:	cmp	ip, #1
   16200:	bls	15b00 <__assert_fail@plt+0x496c>
   16204:	add	r1, ip, r9
   16208:	ldr	lr, [sp, #48]	; 0x30
   1620c:	mov	r0, #0
   16210:	str	r6, [sp, #48]	; 0x30
   16214:	mov	ip, #39	; 0x27
   16218:	ldr	r6, [sp, #44]	; 0x2c
   1621c:	b	162d4 <__assert_fail@plt+0x5140>
   16220:	ldr	r0, [sp, #32]
   16224:	sub	r3, fp, #2
   16228:	cmp	r0, #0
   1622c:	clz	r3, r3
   16230:	lsr	r3, r3, #5
   16234:	bne	1643c <__assert_fail@plt+0x52a8>
   16238:	eor	r0, r6, #1
   1623c:	ands	r3, r3, r0
   16240:	beq	16270 <__assert_fail@plt+0x50dc>
   16244:	add	r0, r4, #1
   16248:	cmp	sl, r4
   1624c:	strbhi	ip, [r8, r4]
   16250:	cmp	sl, r0
   16254:	movhi	r6, #36	; 0x24
   16258:	strbhi	r6, [r8, r0]
   1625c:	add	r0, r4, #2
   16260:	mov	r6, r3
   16264:	add	r4, r4, #3
   16268:	cmp	sl, r0
   1626c:	strbhi	ip, [r8, r0]
   16270:	cmp	sl, r4
   16274:	movhi	r3, #92	; 0x5c
   16278:	strbhi	r3, [r8, r4]
   1627c:	add	r3, r4, #1
   16280:	cmp	sl, r3
   16284:	lsrhi	r0, r5, #6
   16288:	addhi	r0, r0, #48	; 0x30
   1628c:	strbhi	r0, [r8, r3]
   16290:	add	r0, r4, #2
   16294:	cmp	sl, r0
   16298:	lsrhi	r3, r5, #3
   1629c:	andhi	r3, r3, #7
   162a0:	addhi	r3, r3, #48	; 0x30
   162a4:	add	r9, r9, #1
   162a8:	strbhi	r3, [r8, r0]
   162ac:	and	r5, r5, #7
   162b0:	cmp	r9, r1
   162b4:	add	r5, r5, #48	; 0x30
   162b8:	add	r4, r4, #3
   162bc:	bcs	1645c <__assert_fail@plt+0x52c8>
   162c0:	mov	r0, r2
   162c4:	cmp	sl, r4
   162c8:	strbhi	r5, [r8, r4]
   162cc:	ldrb	r5, [lr, #1]!
   162d0:	add	r4, r4, #1
   162d4:	cmp	r2, #0
   162d8:	bne	16220 <__assert_fail@plt+0x508c>
   162dc:	eor	r3, r0, #1
   162e0:	and	r3, r3, r6
   162e4:	cmp	r7, #0
   162e8:	uxtb	r3, r3
   162ec:	beq	16300 <__assert_fail@plt+0x516c>
   162f0:	cmp	sl, r4
   162f4:	movhi	r7, #92	; 0x5c
   162f8:	strbhi	r7, [r8, r4]
   162fc:	add	r4, r4, #1
   16300:	add	r9, r9, #1
   16304:	cmp	r9, r1
   16308:	bcs	16450 <__assert_fail@plt+0x52bc>
   1630c:	cmp	r3, #0
   16310:	beq	1647c <__assert_fail@plt+0x52e8>
   16314:	cmp	sl, r4
   16318:	add	r3, r4, #1
   1631c:	strbhi	ip, [r8, r4]
   16320:	mov	r7, #0
   16324:	cmp	sl, r3
   16328:	strbhi	ip, [r8, r3]
   1632c:	add	r4, r4, #2
   16330:	mov	r6, r7
   16334:	b	162c4 <__assert_fail@plt+0x5130>
   16338:	cmp	r8, #1
   1633c:	beq	161b4 <__assert_fail@plt+0x5020>
   16340:	add	r1, r4, #1
   16344:	add	r3, sl, r8
   16348:	add	r1, sl, r1
   1634c:	add	r4, r3, r4
   16350:	ldrb	r3, [r1], #1
   16354:	sub	r3, r3, #91	; 0x5b
   16358:	cmp	r3, #33	; 0x21
   1635c:	ldrls	pc, [pc, r3, lsl #2]
   16360:	b	163ec <__assert_fail@plt+0x5258>
   16364:	strdeq	r6, [r1], -r8
   16368:	strdeq	r6, [r1], -r8
   1636c:	andeq	r6, r1, ip, ror #7
   16370:	strdeq	r6, [r1], -r8
   16374:	andeq	r6, r1, ip, ror #7
   16378:	strdeq	r6, [r1], -r8
   1637c:	andeq	r6, r1, ip, ror #7
   16380:	andeq	r6, r1, ip, ror #7
   16384:	andeq	r6, r1, ip, ror #7
   16388:	andeq	r6, r1, ip, ror #7
   1638c:	andeq	r6, r1, ip, ror #7
   16390:	andeq	r6, r1, ip, ror #7
   16394:	andeq	r6, r1, ip, ror #7
   16398:	andeq	r6, r1, ip, ror #7
   1639c:	andeq	r6, r1, ip, ror #7
   163a0:	andeq	r6, r1, ip, ror #7
   163a4:	andeq	r6, r1, ip, ror #7
   163a8:	andeq	r6, r1, ip, ror #7
   163ac:	andeq	r6, r1, ip, ror #7
   163b0:	andeq	r6, r1, ip, ror #7
   163b4:	andeq	r6, r1, ip, ror #7
   163b8:	andeq	r6, r1, ip, ror #7
   163bc:	andeq	r6, r1, ip, ror #7
   163c0:	andeq	r6, r1, ip, ror #7
   163c4:	andeq	r6, r1, ip, ror #7
   163c8:	andeq	r6, r1, ip, ror #7
   163cc:	andeq	r6, r1, ip, ror #7
   163d0:	andeq	r6, r1, ip, ror #7
   163d4:	andeq	r6, r1, ip, ror #7
   163d8:	andeq	r6, r1, ip, ror #7
   163dc:	andeq	r6, r1, ip, ror #7
   163e0:	andeq	r6, r1, ip, ror #7
   163e4:	andeq	r6, r1, ip, ror #7
   163e8:	strdeq	r6, [r1], -r8
   163ec:	cmp	r4, r1
   163f0:	bne	16350 <__assert_fail@plt+0x51bc>
   163f4:	b	161b4 <__assert_fail@plt+0x5020>
   163f8:	ldr	fp, [sp, #84]	; 0x54
   163fc:	ldr	sl, [sp, #88]	; 0x58
   16400:	mov	r8, #2
   16404:	b	158c0 <__assert_fail@plt+0x472c>
   16408:	cmp	sl, r4
   1640c:	movls	r1, r4
   16410:	bls	15a10 <__assert_fail@plt+0x487c>
   16414:	ldr	r3, [sp, #44]	; 0x2c
   16418:	b	15a00 <__assert_fail@plt+0x486c>
   1641c:	str	sl, [sp, #72]	; 0x48
   16420:	ldr	sl, [sp, #32]
   16424:	b	15838 <__assert_fail@plt+0x46a4>
   16428:	add	r9, r9, #1
   1642c:	b	1512c <__assert_fail@plt+0x3f98>
   16430:	ldr	r2, [sp, #28]
   16434:	mov	r6, #0
   16438:	b	16204 <__assert_fail@plt+0x5070>
   1643c:	str	fp, [sp, #160]	; 0xa0
   16440:	str	r3, [sp, #28]
   16444:	mov	fp, r8
   16448:	ldr	r8, [sp, #160]	; 0xa0
   1644c:	b	158c0 <__assert_fail@plt+0x472c>
   16450:	str	r6, [sp, #44]	; 0x2c
   16454:	ldr	r6, [sp, #48]	; 0x30
   16458:	b	15868 <__assert_fail@plt+0x46d4>
   1645c:	str	r6, [sp, #44]	; 0x2c
   16460:	ldr	r6, [sp, #48]	; 0x30
   16464:	b	15674 <__assert_fail@plt+0x44e0>
   16468:	add	r4, r4, #4
   1646c:	str	r3, [sp, #44]	; 0x2c
   16470:	mov	r6, #0
   16474:	mov	r5, #48	; 0x30
   16478:	b	155fc <__assert_fail@plt+0x4468>
   1647c:	mov	r7, r3
   16480:	b	162c4 <__assert_fail@plt+0x5130>
   16484:	ldr	r3, [pc, #-1624]	; 15e34 <__assert_fail@plt+0x4ca0>
   16488:	mov	r4, #1
   1648c:	str	r4, [sp, #40]	; 0x28
   16490:	str	r4, [sp, #28]
   16494:	str	r4, [sp, #52]	; 0x34
   16498:	str	sl, [sp, #72]	; 0x48
   1649c:	str	sl, [sp, #68]	; 0x44
   164a0:	str	sl, [sp, #44]	; 0x2c
   164a4:	str	sl, [sp, #32]
   164a8:	str	r3, [sp, #60]	; 0x3c
   164ac:	b	1511c <__assert_fail@plt+0x3f88>
   164b0:	mov	r3, r6
   164b4:	mov	r5, #48	; 0x30
   164b8:	mov	r6, #0
   164bc:	b	155fc <__assert_fail@plt+0x4468>
   164c0:	cmp	sl, r4
   164c4:	movhi	r3, #48	; 0x30
   164c8:	strbhi	r3, [r8, r4]
   164cc:	add	r3, r1, #2
   164d0:	cmp	sl, r3
   164d4:	movhi	r0, #48	; 0x30
   164d8:	strbhi	r0, [r8, r3]
   164dc:	add	r4, r1, #3
   164e0:	mov	r5, #48	; 0x30
   164e4:	b	15a44 <__assert_fail@plt+0x48b0>
   164e8:	str	fp, [sp, #160]	; 0xa0
   164ec:	mov	fp, r8
   164f0:	ldr	r8, [sp, #160]	; 0xa0
   164f4:	b	158c0 <__assert_fail@plt+0x472c>
   164f8:	ldr	r2, [sp, #80]	; 0x50
   164fc:	ldrb	r3, [r2]
   16500:	cmp	r3, #0
   16504:	beq	150ec <__assert_fail@plt+0x3f58>
   16508:	cmp	sl, r4
   1650c:	strbhi	r3, [fp, r4]
   16510:	ldrb	r3, [r2, #1]!
   16514:	add	r4, r4, #1
   16518:	cmp	r3, #0
   1651c:	bne	16508 <__assert_fail@plt+0x5374>
   16520:	b	150ec <__assert_fail@plt+0x3f58>
   16524:	str	fp, [sp, #160]	; 0xa0
   16528:	mov	r3, #0
   1652c:	mov	fp, r8
   16530:	ldr	r8, [sp, #160]	; 0xa0
   16534:	b	15954 <__assert_fail@plt+0x47c0>
   16538:	mov	ip, r5
   1653c:	ldr	r7, [sp, #96]	; 0x60
   16540:	ldr	r5, [sp, #92]	; 0x5c
   16544:	ldr	r4, [sp, #100]	; 0x64
   16548:	ldr	r8, [sp, #84]	; 0x54
   1654c:	ldr	sl, [sp, #88]	; 0x58
   16550:	ldr	r2, [sp, #28]
   16554:	mov	r6, #0
   16558:	b	161fc <__assert_fail@plt+0x5068>
   1655c:	ldr	r2, [sp, #36]	; 0x24
   16560:	ldrb	r1, [r2, r3]
   16564:	sub	r2, r1, #33	; 0x21
   16568:	cmp	r2, #29
   1656c:	ldrls	pc, [pc, r2, lsl #2]
   16570:	b	1664c <__assert_fail@plt+0x54b8>
   16574:	andeq	r6, r1, ip, ror #11
   16578:	andeq	r6, r1, ip, asr #12
   1657c:	andeq	r6, r1, ip, asr #12
   16580:	andeq	r6, r1, ip, asr #12
   16584:	andeq	r6, r1, ip, asr #12
   16588:	andeq	r6, r1, ip, asr #12
   1658c:	andeq	r6, r1, ip, ror #11
   16590:	andeq	r6, r1, ip, ror #11
   16594:	andeq	r6, r1, ip, ror #11
   16598:	andeq	r6, r1, ip, asr #12
   1659c:	andeq	r6, r1, ip, asr #12
   165a0:	andeq	r6, r1, ip, asr #12
   165a4:	andeq	r6, r1, ip, ror #11
   165a8:	andeq	r6, r1, ip, asr #12
   165ac:	andeq	r6, r1, ip, ror #11
   165b0:	andeq	r6, r1, ip, asr #12
   165b4:	andeq	r6, r1, ip, asr #12
   165b8:	andeq	r6, r1, ip, asr #12
   165bc:	andeq	r6, r1, ip, asr #12
   165c0:	andeq	r6, r1, ip, asr #12
   165c4:	andeq	r6, r1, ip, asr #12
   165c8:	andeq	r6, r1, ip, asr #12
   165cc:	andeq	r6, r1, ip, asr #12
   165d0:	andeq	r6, r1, ip, asr #12
   165d4:	andeq	r6, r1, ip, asr #12
   165d8:	andeq	r6, r1, ip, asr #12
   165dc:	andeq	r6, r1, ip, asr #12
   165e0:	andeq	r6, r1, ip, ror #11
   165e4:	andeq	r6, r1, ip, ror #11
   165e8:	andeq	r6, r1, ip, ror #11
   165ec:	ldr	r2, [sp, #32]
   165f0:	cmp	r2, #0
   165f4:	bne	166f8 <__assert_fail@plt+0x5564>
   165f8:	cmp	sl, r4
   165fc:	movhi	r2, #63	; 0x3f
   16600:	strbhi	r2, [r8, r4]
   16604:	add	r2, r4, #1
   16608:	cmp	sl, r2
   1660c:	movhi	r0, #34	; 0x22
   16610:	strbhi	r0, [r8, r2]
   16614:	add	r2, r4, #2
   16618:	cmp	sl, r2
   1661c:	movhi	r0, #34	; 0x22
   16620:	strbhi	r0, [r8, r2]
   16624:	add	r2, r4, #3
   16628:	cmp	sl, r2
   1662c:	movhi	r0, #63	; 0x3f
   16630:	strbhi	r0, [r8, r2]
   16634:	mov	r2, #0
   16638:	add	r4, r4, #4
   1663c:	mov	r5, r1
   16640:	mov	r9, r3
   16644:	mov	r6, r2
   16648:	b	15a44 <__assert_fail@plt+0x48b0>
   1664c:	mov	r2, #0
   16650:	mov	r6, r2
   16654:	b	155b4 <__assert_fail@plt+0x4420>
   16658:	ldr	r0, [sp, #24]
   1665c:	mov	r1, r4
   16660:	cmp	r1, r0
   16664:	mov	r2, r7
   16668:	mov	r3, r5
   1666c:	mov	ip, r5
   16670:	ldr	r7, [sp, #96]	; 0x60
   16674:	ldr	r5, [sp, #92]	; 0x5c
   16678:	ldr	r4, [sp, #100]	; 0x64
   1667c:	ldr	r8, [sp, #84]	; 0x54
   16680:	ldr	sl, [sp, #88]	; 0x58
   16684:	bcs	166b8 <__assert_fail@plt+0x5524>
   16688:	ldrb	r6, [r2]
   1668c:	cmp	r6, #0
   16690:	bne	166a4 <__assert_fail@plt+0x5510>
   16694:	b	167d4 <__assert_fail@plt+0x5640>
   16698:	ldrb	r6, [r2, #1]!
   1669c:	cmp	r6, #0
   166a0:	beq	1675c <__assert_fail@plt+0x55c8>
   166a4:	add	r3, r3, #1
   166a8:	add	r1, r9, r3
   166ac:	cmp	r1, r0
   166b0:	bcc	16698 <__assert_fail@plt+0x5504>
   166b4:	mov	ip, r3
   166b8:	ldr	r2, [sp, #28]
   166bc:	mov	r6, #0
   166c0:	b	161fc <__assert_fail@plt+0x5068>
   166c4:	mov	r3, #1
   166c8:	str	r3, [sp, #40]	; 0x28
   166cc:	str	r3, [sp, #32]
   166d0:	str	r3, [sp, #28]
   166d4:	str	r3, [sp, #52]	; 0x34
   166d8:	ldr	r3, [pc, #-2220]	; 15e34 <__assert_fail@plt+0x4ca0>
   166dc:	mov	r2, #0
   166e0:	str	r2, [sp, #68]	; 0x44
   166e4:	str	r2, [sp, #44]	; 0x2c
   166e8:	str	r2, [sp, #72]	; 0x48
   166ec:	mov	r4, r2
   166f0:	str	r3, [sp, #60]	; 0x3c
   166f4:	b	1511c <__assert_fail@plt+0x3f88>
   166f8:	str	fp, [sp, #160]	; 0xa0
   166fc:	mov	fp, r8
   16700:	ldr	r8, [sp, #160]	; 0xa0
   16704:	b	158cc <__assert_fail@plt+0x4738>
   16708:	mov	r2, r3
   1670c:	ldr	r3, [sp, #60]	; 0x3c
   16710:	cmp	r3, #0
   16714:	moveq	r2, #0
   16718:	andne	r2, r2, #1
   1671c:	cmp	r2, #0
   16720:	beq	1674c <__assert_fail@plt+0x55b8>
   16724:	mov	r2, r3
   16728:	ldrb	r3, [r3]
   1672c:	cmp	r3, #0
   16730:	beq	1674c <__assert_fail@plt+0x55b8>
   16734:	cmp	sl, r4
   16738:	strbhi	r3, [fp, r4]
   1673c:	ldrb	r3, [r2, #1]!
   16740:	add	r4, r4, #1
   16744:	cmp	r3, #0
   16748:	bne	16734 <__assert_fail@plt+0x55a0>
   1674c:	cmp	sl, r4
   16750:	movhi	r3, #0
   16754:	strbhi	r3, [fp, r4]
   16758:	b	1590c <__assert_fail@plt+0x4778>
   1675c:	mov	ip, r3
   16760:	ldr	r2, [sp, #28]
   16764:	b	161fc <__assert_fail@plt+0x5068>
   16768:	str	fp, [sp, #160]	; 0xa0
   1676c:	mov	fp, r8
   16770:	ldr	r8, [sp, #160]	; 0xa0
   16774:	sub	r3, r8, #2
   16778:	clz	r3, r3
   1677c:	lsr	r3, r3, #5
   16780:	str	r3, [sp, #28]
   16784:	b	158c0 <__assert_fail@plt+0x472c>
   16788:	ldr	r3, [sp, #76]	; 0x4c
   1678c:	mov	ip, #5
   16790:	str	r3, [sp, #16]
   16794:	ldr	r3, [sp, #80]	; 0x50
   16798:	ldr	r2, [sp, #36]	; 0x24
   1679c:	str	r3, [sp, #12]
   167a0:	ldr	r3, [sp, #56]	; 0x38
   167a4:	ldr	r1, [sp, #72]	; 0x48
   167a8:	str	r3, [sp, #8]
   167ac:	ldr	r3, [sp, #164]	; 0xa4
   167b0:	mov	r0, fp
   167b4:	str	r3, [sp, #4]
   167b8:	str	ip, [sp]
   167bc:	ldr	r3, [sp, #24]
   167c0:	bl	15024 <__assert_fail@plt+0x3e90>
   167c4:	mov	r4, r0
   167c8:	b	1590c <__assert_fail@plt+0x4778>
   167cc:	mov	r8, #2
   167d0:	b	158c0 <__assert_fail@plt+0x472c>
   167d4:	ldr	r2, [sp, #28]
   167d8:	b	161fc <__assert_fail@plt+0x5068>
   167dc:	mov	r3, #0
   167e0:	str	r3, [sp, #68]	; 0x44
   167e4:	str	r3, [sp, #44]	; 0x2c
   167e8:	str	r3, [sp, #72]	; 0x48
   167ec:	str	r3, [sp, #28]
   167f0:	mov	r4, r3
   167f4:	ldr	r3, [pc, #-2500]	; 15e38 <__assert_fail@plt+0x4ca4>
   167f8:	mov	r2, #1
   167fc:	str	r2, [sp, #40]	; 0x28
   16800:	str	r2, [sp, #32]
   16804:	str	r2, [sp, #52]	; 0x34
   16808:	str	r3, [sp, #60]	; 0x3c
   1680c:	b	1511c <__assert_fail@plt+0x3f88>
   16810:	bl	10f90 <__stack_chk_fail@plt>
   16814:	mov	r5, r3
   16818:	mov	r6, #0
   1681c:	b	15610 <__assert_fail@plt+0x447c>
   16820:	mov	r3, #0
   16824:	mov	r2, #1
   16828:	str	r3, [sp, #44]	; 0x2c
   1682c:	str	r3, [sp, #72]	; 0x48
   16830:	str	r2, [sp, #40]	; 0x28
   16834:	b	1572c <__assert_fail@plt+0x4598>
   16838:	bl	11170 <abort@plt>
   1683c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16840:	sub	sp, sp, #44	; 0x2c
   16844:	mov	r6, r0
   16848:	mov	r4, r3
   1684c:	mov	sl, r1
   16850:	mov	fp, r2
   16854:	bl	11098 <__errno_location@plt>
   16858:	ldr	r7, [pc, #364]	; 169cc <__assert_fail@plt+0x5838>
   1685c:	cmp	r6, #0
   16860:	ldr	r5, [r7]
   16864:	ldr	r3, [r0]
   16868:	str	r3, [sp, #24]
   1686c:	blt	169c8 <__assert_fail@plt+0x5834>
   16870:	ldr	r3, [r7, #4]
   16874:	mov	r8, r0
   16878:	cmp	r3, r6
   1687c:	bgt	168c8 <__assert_fail@plt+0x5734>
   16880:	cmn	r6, #-268435454	; 0xf0000002
   16884:	bgt	169c4 <__assert_fail@plt+0x5830>
   16888:	add	r9, r6, #1
   1688c:	add	r3, r7, #8
   16890:	cmp	r5, r3
   16894:	lsl	r1, r9, #3
   16898:	beq	169a4 <__assert_fail@plt+0x5810>
   1689c:	mov	r0, r5
   168a0:	bl	17630 <__assert_fail@plt+0x649c>
   168a4:	mov	r5, r0
   168a8:	str	r0, [r7]
   168ac:	ldr	r0, [r7, #4]
   168b0:	mov	r1, #0
   168b4:	sub	r2, r9, r0
   168b8:	add	r0, r5, r0, lsl #3
   168bc:	lsl	r2, r2, #3
   168c0:	bl	110b0 <memset@plt>
   168c4:	str	r9, [r7, #4]
   168c8:	add	r3, r5, r6, lsl #3
   168cc:	ldr	r1, [r4, #4]
   168d0:	ldr	r7, [r3, #4]
   168d4:	ldr	r9, [r5, r6, lsl #3]
   168d8:	ldr	r2, [r4, #40]	; 0x28
   168dc:	ldr	ip, [r4, #44]	; 0x2c
   168e0:	str	r3, [sp, #28]
   168e4:	ldr	r3, [r4]
   168e8:	orr	r1, r1, #1
   168ec:	add	lr, r4, #8
   168f0:	str	r1, [sp, #36]	; 0x24
   168f4:	str	r1, [sp, #4]
   168f8:	str	r2, [sp, #12]
   168fc:	str	r3, [sp]
   16900:	mov	r0, r7
   16904:	mov	r1, r9
   16908:	str	ip, [sp, #16]
   1690c:	str	lr, [sp, #8]
   16910:	mov	r3, fp
   16914:	mov	r2, sl
   16918:	str	lr, [sp, #32]
   1691c:	bl	15024 <__assert_fail@plt+0x3e90>
   16920:	cmp	r9, r0
   16924:	bhi	16990 <__assert_fail@plt+0x57fc>
   16928:	ldr	r3, [pc, #160]	; 169d0 <__assert_fail@plt+0x583c>
   1692c:	add	r9, r0, #1
   16930:	cmp	r7, r3
   16934:	str	r9, [r5, r6, lsl #3]
   16938:	beq	16944 <__assert_fail@plt+0x57b0>
   1693c:	mov	r0, r7
   16940:	bl	10f30 <free@plt>
   16944:	mov	r0, r9
   16948:	bl	175d4 <__assert_fail@plt+0x6440>
   1694c:	ldr	lr, [sp, #28]
   16950:	ldr	ip, [r4, #44]	; 0x2c
   16954:	ldr	r5, [r4, #40]	; 0x28
   16958:	mov	r3, fp
   1695c:	mov	r2, sl
   16960:	mov	r1, r9
   16964:	str	r0, [lr, #4]
   16968:	ldr	lr, [r4]
   1696c:	ldr	r4, [sp, #32]
   16970:	str	ip, [sp, #16]
   16974:	str	r4, [sp, #8]
   16978:	ldr	r4, [sp, #36]	; 0x24
   1697c:	str	r5, [sp, #12]
   16980:	str	r4, [sp, #4]
   16984:	str	lr, [sp]
   16988:	mov	r7, r0
   1698c:	bl	15024 <__assert_fail@plt+0x3e90>
   16990:	ldr	r3, [sp, #24]
   16994:	mov	r0, r7
   16998:	str	r3, [r8]
   1699c:	add	sp, sp, #44	; 0x2c
   169a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169a4:	mov	r0, #0
   169a8:	bl	17630 <__assert_fail@plt+0x649c>
   169ac:	ldr	r3, [pc, #32]	; 169d4 <__assert_fail@plt+0x5840>
   169b0:	mov	r5, r0
   169b4:	ldm	r3, {r0, r1}
   169b8:	str	r5, [r7]
   169bc:	stm	r5, {r0, r1}
   169c0:	b	168ac <__assert_fail@plt+0x5718>
   169c4:	bl	1781c <__assert_fail@plt+0x6688>
   169c8:	bl	11170 <abort@plt>
   169cc:	andeq	ip, r2, r8, asr #2
   169d0:	andeq	ip, r2, r0, lsl r2
   169d4:	andeq	ip, r2, r0, asr r1
   169d8:	push	{r4, r5, r6, lr}
   169dc:	mov	r5, r0
   169e0:	bl	11098 <__errno_location@plt>
   169e4:	cmp	r5, #0
   169e8:	mov	r1, #48	; 0x30
   169ec:	mov	r4, r0
   169f0:	ldr	r0, [pc, #16]	; 16a08 <__assert_fail@plt+0x5874>
   169f4:	ldr	r6, [r4]
   169f8:	movne	r0, r5
   169fc:	bl	177dc <__assert_fail@plt+0x6648>
   16a00:	str	r6, [r4]
   16a04:	pop	{r4, r5, r6, pc}
   16a08:	andeq	ip, r2, r0, lsl r3
   16a0c:	ldr	r3, [pc, #12]	; 16a20 <__assert_fail@plt+0x588c>
   16a10:	cmp	r0, #0
   16a14:	moveq	r0, r3
   16a18:	ldr	r0, [r0]
   16a1c:	bx	lr
   16a20:	andeq	ip, r2, r0, lsl r3
   16a24:	ldr	r3, [pc, #12]	; 16a38 <__assert_fail@plt+0x58a4>
   16a28:	cmp	r0, #0
   16a2c:	moveq	r0, r3
   16a30:	str	r1, [r0]
   16a34:	bx	lr
   16a38:	andeq	ip, r2, r0, lsl r3
   16a3c:	ldr	r3, [pc, #52]	; 16a78 <__assert_fail@plt+0x58e4>
   16a40:	cmp	r0, #0
   16a44:	moveq	r0, r3
   16a48:	add	r3, r0, #8
   16a4c:	push	{lr}		; (str lr, [sp, #-4]!)
   16a50:	lsr	lr, r1, #5
   16a54:	and	r1, r1, #31
   16a58:	ldr	ip, [r3, lr, lsl #2]
   16a5c:	lsr	r0, ip, r1
   16a60:	eor	r2, r2, r0
   16a64:	and	r2, r2, #1
   16a68:	and	r0, r0, #1
   16a6c:	eor	r1, ip, r2, lsl r1
   16a70:	str	r1, [r3, lr, lsl #2]
   16a74:	pop	{pc}		; (ldr pc, [sp], #4)
   16a78:	andeq	ip, r2, r0, lsl r3
   16a7c:	ldr	r3, [pc, #16]	; 16a94 <__assert_fail@plt+0x5900>
   16a80:	cmp	r0, #0
   16a84:	movne	r3, r0
   16a88:	ldr	r0, [r3, #4]
   16a8c:	str	r1, [r3, #4]
   16a90:	bx	lr
   16a94:	andeq	ip, r2, r0, lsl r3
   16a98:	ldr	r3, [pc, #44]	; 16acc <__assert_fail@plt+0x5938>
   16a9c:	cmp	r0, #0
   16aa0:	moveq	r0, r3
   16aa4:	mov	ip, #10
   16aa8:	cmp	r2, #0
   16aac:	cmpne	r1, #0
   16ab0:	str	ip, [r0]
   16ab4:	beq	16ac4 <__assert_fail@plt+0x5930>
   16ab8:	str	r1, [r0, #40]	; 0x28
   16abc:	str	r2, [r0, #44]	; 0x2c
   16ac0:	bx	lr
   16ac4:	push	{r4, lr}
   16ac8:	bl	11170 <abort@plt>
   16acc:	andeq	ip, r2, r0, lsl r3
   16ad0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ad4:	sub	sp, sp, #24
   16ad8:	ldr	ip, [pc, #108]	; 16b4c <__assert_fail@plt+0x59b8>
   16adc:	ldr	r4, [sp, #56]	; 0x38
   16ae0:	mov	r9, r2
   16ae4:	cmp	r4, #0
   16ae8:	moveq	r4, ip
   16aec:	mov	sl, r3
   16af0:	mov	r7, r0
   16af4:	mov	r8, r1
   16af8:	bl	11098 <__errno_location@plt>
   16afc:	ldr	r3, [r4, #44]	; 0x2c
   16b00:	mov	r1, r8
   16b04:	ldr	r6, [r0]
   16b08:	str	r3, [sp, #16]
   16b0c:	ldr	r2, [r4, #40]	; 0x28
   16b10:	add	r3, r4, #8
   16b14:	str	r3, [sp, #8]
   16b18:	str	r2, [sp, #12]
   16b1c:	ldr	r2, [r4, #4]
   16b20:	mov	r5, r0
   16b24:	str	r2, [sp, #4]
   16b28:	ldr	ip, [r4]
   16b2c:	mov	r3, sl
   16b30:	mov	r2, r9
   16b34:	mov	r0, r7
   16b38:	str	ip, [sp]
   16b3c:	bl	15024 <__assert_fail@plt+0x3e90>
   16b40:	str	r6, [r5]
   16b44:	add	sp, sp, #24
   16b48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b4c:	andeq	ip, r2, r0, lsl r3
   16b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b54:	cmp	r3, #0
   16b58:	sub	sp, sp, #44	; 0x2c
   16b5c:	ldr	r4, [pc, #192]	; 16c24 <__assert_fail@plt+0x5a90>
   16b60:	mov	r6, r2
   16b64:	movne	r4, r3
   16b68:	mov	r9, r1
   16b6c:	mov	r8, r0
   16b70:	bl	11098 <__errno_location@plt>
   16b74:	ldr	r3, [r4, #44]	; 0x2c
   16b78:	ldr	r5, [r4, #4]
   16b7c:	add	sl, r4, #8
   16b80:	cmp	r6, #0
   16b84:	orreq	r5, r5, #1
   16b88:	mov	r1, #0
   16b8c:	ldr	r2, [r0]
   16b90:	str	r3, [sp, #16]
   16b94:	ldr	r3, [r4, #40]	; 0x28
   16b98:	stmib	sp, {r5, sl}
   16b9c:	str	r3, [sp, #12]
   16ba0:	ldr	r3, [r4]
   16ba4:	mov	r7, r0
   16ba8:	str	r2, [sp, #28]
   16bac:	str	r3, [sp]
   16bb0:	mov	r2, r8
   16bb4:	mov	r3, r9
   16bb8:	mov	r0, r1
   16bbc:	bl	15024 <__assert_fail@plt+0x3e90>
   16bc0:	add	r1, r0, #1
   16bc4:	mov	fp, r0
   16bc8:	mov	r0, r1
   16bcc:	str	r1, [sp, #36]	; 0x24
   16bd0:	bl	175d4 <__assert_fail@plt+0x6440>
   16bd4:	ldr	r3, [r4, #44]	; 0x2c
   16bd8:	mov	r2, r8
   16bdc:	str	r3, [sp, #16]
   16be0:	ldr	r3, [r4, #40]	; 0x28
   16be4:	str	r5, [sp, #4]
   16be8:	str	r3, [sp, #12]
   16bec:	str	sl, [sp, #8]
   16bf0:	ldr	ip, [r4]
   16bf4:	ldr	r1, [sp, #36]	; 0x24
   16bf8:	mov	r3, r9
   16bfc:	str	ip, [sp]
   16c00:	str	r0, [sp, #32]
   16c04:	bl	15024 <__assert_fail@plt+0x3e90>
   16c08:	ldr	r2, [sp, #28]
   16c0c:	cmp	r6, #0
   16c10:	str	r2, [r7]
   16c14:	ldr	r0, [sp, #32]
   16c18:	strne	fp, [r6]
   16c1c:	add	sp, sp, #44	; 0x2c
   16c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c24:	andeq	ip, r2, r0, lsl r3
   16c28:	mov	r3, r2
   16c2c:	mov	r2, #0
   16c30:	b	16b50 <__assert_fail@plt+0x59bc>
   16c34:	push	{r4, r5, r6, r7, r8, lr}
   16c38:	ldr	r6, [pc, #112]	; 16cb0 <__assert_fail@plt+0x5b1c>
   16c3c:	ldr	r3, [r6, #4]
   16c40:	ldr	r7, [r6]
   16c44:	cmp	r3, #1
   16c48:	ble	16c6c <__assert_fail@plt+0x5ad8>
   16c4c:	sub	r5, r7, #8
   16c50:	add	r5, r5, r3, lsl #3
   16c54:	mov	r4, r7
   16c58:	ldr	r0, [r4, #12]
   16c5c:	add	r4, r4, #8
   16c60:	bl	10f30 <free@plt>
   16c64:	cmp	r4, r5
   16c68:	bne	16c58 <__assert_fail@plt+0x5ac4>
   16c6c:	ldr	r0, [r7, #4]
   16c70:	ldr	r4, [pc, #60]	; 16cb4 <__assert_fail@plt+0x5b20>
   16c74:	cmp	r0, r4
   16c78:	beq	16c8c <__assert_fail@plt+0x5af8>
   16c7c:	bl	10f30 <free@plt>
   16c80:	mov	r3, #256	; 0x100
   16c84:	str	r4, [r6, #12]
   16c88:	str	r3, [r6, #8]
   16c8c:	ldr	r4, [pc, #36]	; 16cb8 <__assert_fail@plt+0x5b24>
   16c90:	cmp	r7, r4
   16c94:	beq	16ca4 <__assert_fail@plt+0x5b10>
   16c98:	mov	r0, r7
   16c9c:	bl	10f30 <free@plt>
   16ca0:	str	r4, [r6]
   16ca4:	mov	r3, #1
   16ca8:	str	r3, [r6, #4]
   16cac:	pop	{r4, r5, r6, r7, r8, pc}
   16cb0:	andeq	ip, r2, r8, asr #2
   16cb4:	andeq	ip, r2, r0, lsl r2
   16cb8:	andeq	ip, r2, r0, asr r1
   16cbc:	ldr	r3, [pc, #4]	; 16cc8 <__assert_fail@plt+0x5b34>
   16cc0:	mvn	r2, #0
   16cc4:	b	1683c <__assert_fail@plt+0x56a8>
   16cc8:	andeq	ip, r2, r0, lsl r3
   16ccc:	ldr	r3, [pc]	; 16cd4 <__assert_fail@plt+0x5b40>
   16cd0:	b	1683c <__assert_fail@plt+0x56a8>
   16cd4:	andeq	ip, r2, r0, lsl r3
   16cd8:	mov	r1, r0
   16cdc:	ldr	r3, [pc, #8]	; 16cec <__assert_fail@plt+0x5b58>
   16ce0:	mvn	r2, #0
   16ce4:	mov	r0, #0
   16ce8:	b	1683c <__assert_fail@plt+0x56a8>
   16cec:	andeq	ip, r2, r0, lsl r3
   16cf0:	mov	r2, r1
   16cf4:	ldr	r3, [pc, #8]	; 16d04 <__assert_fail@plt+0x5b70>
   16cf8:	mov	r1, r0
   16cfc:	mov	r0, #0
   16d00:	b	1683c <__assert_fail@plt+0x56a8>
   16d04:	andeq	ip, r2, r0, lsl r3
   16d08:	push	{r4, r5, r6, lr}
   16d0c:	sub	sp, sp, #56	; 0x38
   16d10:	ldr	r4, [pc, #68]	; 16d5c <__assert_fail@plt+0x5bc8>
   16d14:	mov	r6, r2
   16d18:	mov	r5, r0
   16d1c:	ldr	r3, [r4]
   16d20:	add	r0, sp, #4
   16d24:	str	r3, [sp, #52]	; 0x34
   16d28:	bl	14eb4 <__assert_fail@plt+0x3d20>
   16d2c:	add	r3, sp, #4
   16d30:	mvn	r2, #0
   16d34:	mov	r1, r6
   16d38:	mov	r0, r5
   16d3c:	bl	1683c <__assert_fail@plt+0x56a8>
   16d40:	ldr	r2, [sp, #52]	; 0x34
   16d44:	ldr	r3, [r4]
   16d48:	cmp	r2, r3
   16d4c:	bne	16d58 <__assert_fail@plt+0x5bc4>
   16d50:	add	sp, sp, #56	; 0x38
   16d54:	pop	{r4, r5, r6, pc}
   16d58:	bl	10f90 <__stack_chk_fail@plt>
   16d5c:	andeq	fp, r2, r8, lsl #30
   16d60:	push	{r4, r5, r6, r7, lr}
   16d64:	sub	sp, sp, #60	; 0x3c
   16d68:	ldr	r4, [pc, #72]	; 16db8 <__assert_fail@plt+0x5c24>
   16d6c:	mov	r6, r2
   16d70:	mov	r7, r3
   16d74:	ldr	ip, [r4]
   16d78:	mov	r5, r0
   16d7c:	add	r0, sp, #4
   16d80:	str	ip, [sp, #52]	; 0x34
   16d84:	bl	14eb4 <__assert_fail@plt+0x3d20>
   16d88:	add	r3, sp, #4
   16d8c:	mov	r2, r7
   16d90:	mov	r1, r6
   16d94:	mov	r0, r5
   16d98:	bl	1683c <__assert_fail@plt+0x56a8>
   16d9c:	ldr	r2, [sp, #52]	; 0x34
   16da0:	ldr	r3, [r4]
   16da4:	cmp	r2, r3
   16da8:	bne	16db4 <__assert_fail@plt+0x5c20>
   16dac:	add	sp, sp, #60	; 0x3c
   16db0:	pop	{r4, r5, r6, r7, pc}
   16db4:	bl	10f90 <__stack_chk_fail@plt>
   16db8:	andeq	fp, r2, r8, lsl #30
   16dbc:	mov	r2, r1
   16dc0:	mov	r1, r0
   16dc4:	mov	r0, #0
   16dc8:	b	16d08 <__assert_fail@plt+0x5b74>
   16dcc:	mov	r3, r2
   16dd0:	mov	r2, r1
   16dd4:	mov	r1, r0
   16dd8:	mov	r0, #0
   16ddc:	b	16d60 <__assert_fail@plt+0x5bcc>
   16de0:	push	{r4, r5, r6, r7, r8, r9, lr}
   16de4:	mov	r4, r2
   16de8:	ldr	lr, [pc, #128]	; 16e70 <__assert_fail@plt+0x5cdc>
   16dec:	mov	r8, r0
   16df0:	mov	r9, r1
   16df4:	ldm	lr!, {r0, r1, r2, r3}
   16df8:	sub	sp, sp, #60	; 0x3c
   16dfc:	add	ip, sp, #4
   16e00:	lsr	r6, r4, #5
   16e04:	stmia	ip!, {r0, r1, r2, r3}
   16e08:	add	r7, sp, #12
   16e0c:	ldm	lr!, {r0, r1, r2, r3}
   16e10:	and	r4, r4, #31
   16e14:	ldr	r5, [pc, #88]	; 16e74 <__assert_fail@plt+0x5ce0>
   16e18:	stmia	ip!, {r0, r1, r2, r3}
   16e1c:	ldm	lr, {r0, r1, r2, r3}
   16e20:	stm	ip, {r0, r1, r2, r3}
   16e24:	mov	r2, r9
   16e28:	ldr	r3, [r7, r6, lsl #2]
   16e2c:	ldr	ip, [r5]
   16e30:	mov	r1, r8
   16e34:	mvn	r0, r3, lsr r4
   16e38:	and	r0, r0, #1
   16e3c:	str	ip, [sp, #52]	; 0x34
   16e40:	eor	r4, r3, r0, lsl r4
   16e44:	add	r3, sp, #4
   16e48:	mov	r0, #0
   16e4c:	str	r4, [r7, r6, lsl #2]
   16e50:	bl	1683c <__assert_fail@plt+0x56a8>
   16e54:	ldr	r2, [sp, #52]	; 0x34
   16e58:	ldr	r3, [r5]
   16e5c:	cmp	r2, r3
   16e60:	bne	16e6c <__assert_fail@plt+0x5cd8>
   16e64:	add	sp, sp, #60	; 0x3c
   16e68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16e6c:	bl	10f90 <__stack_chk_fail@plt>
   16e70:	andeq	ip, r2, r0, lsl r3
   16e74:	andeq	fp, r2, r8, lsl #30
   16e78:	mov	r2, r1
   16e7c:	mvn	r1, #0
   16e80:	b	16de0 <__assert_fail@plt+0x5c4c>
   16e84:	mov	r2, #58	; 0x3a
   16e88:	mvn	r1, #0
   16e8c:	b	16de0 <__assert_fail@plt+0x5c4c>
   16e90:	mov	r2, #58	; 0x3a
   16e94:	b	16de0 <__assert_fail@plt+0x5c4c>
   16e98:	push	{r4, r5, r6, r7, r8, lr}
   16e9c:	sub	sp, sp, #104	; 0x68
   16ea0:	ldr	r5, [pc, #120]	; 16f20 <__assert_fail@plt+0x5d8c>
   16ea4:	mov	r6, r0
   16ea8:	mov	r0, sp
   16eac:	ldr	r3, [r5]
   16eb0:	mov	r7, r2
   16eb4:	str	r3, [sp, #100]	; 0x64
   16eb8:	bl	14eb4 <__assert_fail@plt+0x3d20>
   16ebc:	mov	ip, sp
   16ec0:	add	lr, sp, #52	; 0x34
   16ec4:	ldm	ip!, {r0, r1, r2, r3}
   16ec8:	stmia	lr!, {r0, r1, r2, r3}
   16ecc:	ldm	ip!, {r0, r1, r2, r3}
   16ed0:	ldr	r8, [sp, #64]	; 0x40
   16ed4:	stmia	lr!, {r0, r1, r2, r3}
   16ed8:	mvn	r4, r8
   16edc:	ldm	ip, {r0, r1, r2, r3}
   16ee0:	and	ip, r4, #67108864	; 0x4000000
   16ee4:	eor	ip, ip, r8
   16ee8:	str	ip, [sp, #64]	; 0x40
   16eec:	stm	lr, {r0, r1, r2, r3}
   16ef0:	add	r3, sp, #52	; 0x34
   16ef4:	mvn	r2, #0
   16ef8:	mov	r1, r7
   16efc:	mov	r0, r6
   16f00:	bl	1683c <__assert_fail@plt+0x56a8>
   16f04:	ldr	r2, [sp, #100]	; 0x64
   16f08:	ldr	r3, [r5]
   16f0c:	cmp	r2, r3
   16f10:	bne	16f1c <__assert_fail@plt+0x5d88>
   16f14:	add	sp, sp, #104	; 0x68
   16f18:	pop	{r4, r5, r6, r7, r8, pc}
   16f1c:	bl	10f90 <__stack_chk_fail@plt>
   16f20:	andeq	fp, r2, r8, lsl #30
   16f24:	push	{r4, r5, r6, r7, r8, r9, lr}
   16f28:	mov	r6, r1
   16f2c:	ldr	lr, [pc, #132]	; 16fb8 <__assert_fail@plt+0x5e24>
   16f30:	mov	r5, r2
   16f34:	mov	r8, r0
   16f38:	mov	r9, r3
   16f3c:	ldm	lr!, {r0, r1, r2, r3}
   16f40:	sub	sp, sp, #60	; 0x3c
   16f44:	add	ip, sp, #4
   16f48:	ldr	r4, [pc, #108]	; 16fbc <__assert_fail@plt+0x5e28>
   16f4c:	stmia	ip!, {r0, r1, r2, r3}
   16f50:	mov	r7, #10
   16f54:	ldm	lr!, {r0, r1, r2, r3}
   16f58:	cmp	r5, #0
   16f5c:	cmpne	r6, #0
   16f60:	str	r7, [sp, #4]
   16f64:	stmia	ip!, {r0, r1, r2, r3}
   16f68:	ldm	lr, {r0, r1, r2, r3}
   16f6c:	ldr	lr, [r4]
   16f70:	stm	ip, {r0, r1, r2, r3}
   16f74:	str	lr, [sp, #52]	; 0x34
   16f78:	beq	16fb4 <__assert_fail@plt+0x5e20>
   16f7c:	add	r3, sp, #4
   16f80:	ldr	r2, [sp, #88]	; 0x58
   16f84:	mov	r1, r9
   16f88:	mov	r0, r8
   16f8c:	str	r6, [sp, #44]	; 0x2c
   16f90:	str	r5, [sp, #48]	; 0x30
   16f94:	bl	1683c <__assert_fail@plt+0x56a8>
   16f98:	ldr	r2, [sp, #52]	; 0x34
   16f9c:	ldr	r3, [r4]
   16fa0:	cmp	r2, r3
   16fa4:	bne	16fb0 <__assert_fail@plt+0x5e1c>
   16fa8:	add	sp, sp, #60	; 0x3c
   16fac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16fb0:	bl	10f90 <__stack_chk_fail@plt>
   16fb4:	bl	11170 <abort@plt>
   16fb8:	andeq	ip, r2, r0, lsl r3
   16fbc:	andeq	fp, r2, r8, lsl #30
   16fc0:	push	{lr}		; (str lr, [sp, #-4]!)
   16fc4:	sub	sp, sp, #12
   16fc8:	mvn	ip, #0
   16fcc:	str	ip, [sp]
   16fd0:	bl	16f24 <__assert_fail@plt+0x5d90>
   16fd4:	add	sp, sp, #12
   16fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fdc:	push	{lr}		; (str lr, [sp, #-4]!)
   16fe0:	sub	sp, sp, #12
   16fe4:	mvn	ip, #0
   16fe8:	mov	r3, r2
   16fec:	str	ip, [sp]
   16ff0:	mov	r2, r1
   16ff4:	mov	r1, r0
   16ff8:	mov	r0, #0
   16ffc:	bl	16f24 <__assert_fail@plt+0x5d90>
   17000:	add	sp, sp, #12
   17004:	pop	{pc}		; (ldr pc, [sp], #4)
   17008:	push	{lr}		; (str lr, [sp, #-4]!)
   1700c:	sub	sp, sp, #12
   17010:	str	r3, [sp]
   17014:	mov	r3, r2
   17018:	mov	r2, r1
   1701c:	mov	r1, r0
   17020:	mov	r0, #0
   17024:	bl	16f24 <__assert_fail@plt+0x5d90>
   17028:	add	sp, sp, #12
   1702c:	pop	{pc}		; (ldr pc, [sp], #4)
   17030:	ldr	r3, [pc]	; 17038 <__assert_fail@plt+0x5ea4>
   17034:	b	1683c <__assert_fail@plt+0x56a8>
   17038:	andeq	ip, r2, r8, asr r1
   1703c:	mov	r2, r1
   17040:	ldr	r3, [pc, #8]	; 17050 <__assert_fail@plt+0x5ebc>
   17044:	mov	r1, r0
   17048:	mov	r0, #0
   1704c:	b	1683c <__assert_fail@plt+0x56a8>
   17050:	andeq	ip, r2, r8, asr r1
   17054:	ldr	r3, [pc, #4]	; 17060 <__assert_fail@plt+0x5ecc>
   17058:	mvn	r2, #0
   1705c:	b	1683c <__assert_fail@plt+0x56a8>
   17060:	andeq	ip, r2, r8, asr r1
   17064:	mov	r1, r0
   17068:	ldr	r3, [pc, #8]	; 17078 <__assert_fail@plt+0x5ee4>
   1706c:	mvn	r2, #0
   17070:	mov	r0, #0
   17074:	b	1683c <__assert_fail@plt+0x56a8>
   17078:	andeq	ip, r2, r8, asr r1
   1707c:	push	{r4, r5, r6, lr}
   17080:	sub	sp, sp, #32
   17084:	cmp	r1, #0
   17088:	mov	r5, r0
   1708c:	ldr	r4, [sp, #48]	; 0x30
   17090:	ldr	r6, [sp, #52]	; 0x34
   17094:	beq	17124 <__assert_fail@plt+0x5f90>
   17098:	strd	r2, [sp]
   1709c:	mov	r3, r1
   170a0:	ldr	r2, [pc, #828]	; 173e4 <__assert_fail@plt+0x6250>
   170a4:	mov	r1, #1
   170a8:	bl	110d4 <__fprintf_chk@plt>
   170ac:	mov	r2, #5
   170b0:	ldr	r1, [pc, #816]	; 173e8 <__assert_fail@plt+0x6254>
   170b4:	mov	r0, #0
   170b8:	bl	10f84 <dcgettext@plt>
   170bc:	ldr	r3, [pc, #808]	; 173ec <__assert_fail@plt+0x6258>
   170c0:	ldr	r2, [pc, #808]	; 173f0 <__assert_fail@plt+0x625c>
   170c4:	str	r3, [sp]
   170c8:	mov	r1, #1
   170cc:	mov	r3, r0
   170d0:	mov	r0, r5
   170d4:	bl	110d4 <__fprintf_chk@plt>
   170d8:	ldr	r1, [pc, #788]	; 173f4 <__assert_fail@plt+0x6260>
   170dc:	mov	r2, #5
   170e0:	mov	r0, #0
   170e4:	bl	10f84 <dcgettext@plt>
   170e8:	mov	r1, r5
   170ec:	bl	10ed0 <fputs_unlocked@plt>
   170f0:	cmp	r6, #9
   170f4:	ldrls	pc, [pc, r6, lsl #2]
   170f8:	b	173d4 <__assert_fail@plt+0x6240>
   170fc:	andeq	r7, r1, r0, ror #7
   17100:	andeq	r7, r1, r8, lsr #3
   17104:	ldrdeq	r7, [r1], -r4
   17108:	andeq	r7, r1, r8, lsl #4
   1710c:	andeq	r7, r1, r4, asr #4
   17110:	andeq	r7, r1, r4, lsl #5
   17114:	andeq	r7, r1, ip, asr #5
   17118:	andeq	r7, r1, ip, lsl r3
   1711c:	andeq	r7, r1, r4, ror r3
   17120:	andeq	r7, r1, ip, lsr r1
   17124:	str	r3, [sp]
   17128:	mov	r1, #1
   1712c:	mov	r3, r2
   17130:	ldr	r2, [pc, #704]	; 173f8 <__assert_fail@plt+0x6264>
   17134:	bl	110d4 <__fprintf_chk@plt>
   17138:	b	170ac <__assert_fail@plt+0x5f18>
   1713c:	ldr	r1, [pc, #696]	; 173fc <__assert_fail@plt+0x6268>
   17140:	mov	r2, #5
   17144:	mov	r0, #0
   17148:	bl	10f84 <dcgettext@plt>
   1714c:	ldr	r2, [r4, #32]
   17150:	ldr	r3, [r4, #28]
   17154:	ldr	r1, [r4, #24]
   17158:	str	r2, [sp, #28]
   1715c:	ldr	r2, [r4, #20]
   17160:	str	r3, [sp, #24]
   17164:	ldr	r3, [r4, #16]
   17168:	str	r1, [sp, #20]
   1716c:	ldr	r1, [r4, #12]
   17170:	str	r2, [sp, #16]
   17174:	ldr	r2, [r4, #8]
   17178:	str	r3, [sp, #12]
   1717c:	ldr	r3, [r4, #4]
   17180:	str	r1, [sp, #8]
   17184:	str	r2, [sp, #4]
   17188:	str	r3, [sp]
   1718c:	mov	r1, #1
   17190:	ldr	r3, [r4]
   17194:	mov	r2, r0
   17198:	mov	r0, r5
   1719c:	bl	110d4 <__fprintf_chk@plt>
   171a0:	add	sp, sp, #32
   171a4:	pop	{r4, r5, r6, pc}
   171a8:	mov	r2, #5
   171ac:	ldr	r1, [pc, #588]	; 17400 <__assert_fail@plt+0x626c>
   171b0:	mov	r0, #0
   171b4:	bl	10f84 <dcgettext@plt>
   171b8:	ldr	r3, [r4]
   171bc:	mov	r1, #1
   171c0:	mov	r2, r0
   171c4:	mov	r0, r5
   171c8:	add	sp, sp, #32
   171cc:	pop	{r4, r5, r6, lr}
   171d0:	b	110d4 <__fprintf_chk@plt>
   171d4:	mov	r2, #5
   171d8:	ldr	r1, [pc, #548]	; 17404 <__assert_fail@plt+0x6270>
   171dc:	mov	r0, #0
   171e0:	bl	10f84 <dcgettext@plt>
   171e4:	ldr	r2, [r4, #4]
   171e8:	ldr	r3, [r4]
   171ec:	mov	r1, #1
   171f0:	str	r2, [sp, #48]	; 0x30
   171f4:	mov	r2, r0
   171f8:	mov	r0, r5
   171fc:	add	sp, sp, #32
   17200:	pop	{r4, r5, r6, lr}
   17204:	b	110d4 <__fprintf_chk@plt>
   17208:	mov	r2, #5
   1720c:	ldr	r1, [pc, #500]	; 17408 <__assert_fail@plt+0x6274>
   17210:	mov	r0, #0
   17214:	bl	10f84 <dcgettext@plt>
   17218:	ldr	r2, [r4, #8]
   1721c:	ldr	r3, [r4, #4]
   17220:	mov	r1, #1
   17224:	str	r2, [sp, #52]	; 0x34
   17228:	str	r3, [sp, #48]	; 0x30
   1722c:	ldr	r3, [r4]
   17230:	mov	r2, r0
   17234:	mov	r0, r5
   17238:	add	sp, sp, #32
   1723c:	pop	{r4, r5, r6, lr}
   17240:	b	110d4 <__fprintf_chk@plt>
   17244:	mov	r2, #5
   17248:	ldr	r1, [pc, #444]	; 1740c <__assert_fail@plt+0x6278>
   1724c:	mov	r0, #0
   17250:	bl	10f84 <dcgettext@plt>
   17254:	ldr	r1, [r4, #12]
   17258:	ldr	r2, [r4, #8]
   1725c:	ldr	r3, [r4, #4]
   17260:	str	r1, [sp, #8]
   17264:	str	r2, [sp, #4]
   17268:	str	r3, [sp]
   1726c:	mov	r1, #1
   17270:	ldr	r3, [r4]
   17274:	mov	r2, r0
   17278:	mov	r0, r5
   1727c:	bl	110d4 <__fprintf_chk@plt>
   17280:	b	171a0 <__assert_fail@plt+0x600c>
   17284:	mov	r2, #5
   17288:	ldr	r1, [pc, #384]	; 17410 <__assert_fail@plt+0x627c>
   1728c:	mov	r0, #0
   17290:	bl	10f84 <dcgettext@plt>
   17294:	ldr	r3, [r4, #16]
   17298:	ldr	r1, [r4, #12]
   1729c:	ldr	r2, [r4, #8]
   172a0:	str	r3, [sp, #12]
   172a4:	ldr	r3, [r4, #4]
   172a8:	str	r1, [sp, #8]
   172ac:	str	r2, [sp, #4]
   172b0:	str	r3, [sp]
   172b4:	mov	r1, #1
   172b8:	ldr	r3, [r4]
   172bc:	mov	r2, r0
   172c0:	mov	r0, r5
   172c4:	bl	110d4 <__fprintf_chk@plt>
   172c8:	b	171a0 <__assert_fail@plt+0x600c>
   172cc:	mov	r2, #5
   172d0:	ldr	r1, [pc, #316]	; 17414 <__assert_fail@plt+0x6280>
   172d4:	mov	r0, #0
   172d8:	bl	10f84 <dcgettext@plt>
   172dc:	ldr	r2, [r4, #20]
   172e0:	ldr	r3, [r4, #16]
   172e4:	ldr	r1, [r4, #12]
   172e8:	str	r2, [sp, #16]
   172ec:	ldr	r2, [r4, #8]
   172f0:	str	r3, [sp, #12]
   172f4:	ldr	r3, [r4, #4]
   172f8:	str	r1, [sp, #8]
   172fc:	str	r2, [sp, #4]
   17300:	str	r3, [sp]
   17304:	mov	r1, #1
   17308:	ldr	r3, [r4]
   1730c:	mov	r2, r0
   17310:	mov	r0, r5
   17314:	bl	110d4 <__fprintf_chk@plt>
   17318:	b	171a0 <__assert_fail@plt+0x600c>
   1731c:	mov	r2, #5
   17320:	ldr	r1, [pc, #240]	; 17418 <__assert_fail@plt+0x6284>
   17324:	mov	r0, #0
   17328:	bl	10f84 <dcgettext@plt>
   1732c:	ldr	r1, [r4, #24]
   17330:	ldr	r2, [r4, #20]
   17334:	ldr	r3, [r4, #16]
   17338:	str	r1, [sp, #20]
   1733c:	ldr	r1, [r4, #12]
   17340:	str	r2, [sp, #16]
   17344:	ldr	r2, [r4, #8]
   17348:	str	r3, [sp, #12]
   1734c:	ldr	r3, [r4, #4]
   17350:	str	r1, [sp, #8]
   17354:	str	r2, [sp, #4]
   17358:	str	r3, [sp]
   1735c:	mov	r1, #1
   17360:	ldr	r3, [r4]
   17364:	mov	r2, r0
   17368:	mov	r0, r5
   1736c:	bl	110d4 <__fprintf_chk@plt>
   17370:	b	171a0 <__assert_fail@plt+0x600c>
   17374:	mov	r2, #5
   17378:	ldr	r1, [pc, #156]	; 1741c <__assert_fail@plt+0x6288>
   1737c:	mov	r0, #0
   17380:	bl	10f84 <dcgettext@plt>
   17384:	ldr	r3, [r4, #28]
   17388:	ldr	r1, [r4, #24]
   1738c:	ldr	r2, [r4, #20]
   17390:	str	r3, [sp, #24]
   17394:	ldr	r3, [r4, #16]
   17398:	str	r1, [sp, #20]
   1739c:	ldr	r1, [r4, #12]
   173a0:	str	r2, [sp, #16]
   173a4:	ldr	r2, [r4, #8]
   173a8:	str	r3, [sp, #12]
   173ac:	ldr	r3, [r4, #4]
   173b0:	str	r1, [sp, #8]
   173b4:	str	r2, [sp, #4]
   173b8:	str	r3, [sp]
   173bc:	mov	r1, #1
   173c0:	ldr	r3, [r4]
   173c4:	mov	r2, r0
   173c8:	mov	r0, r5
   173cc:	bl	110d4 <__fprintf_chk@plt>
   173d0:	b	171a0 <__assert_fail@plt+0x600c>
   173d4:	mov	r2, #5
   173d8:	ldr	r1, [pc, #64]	; 17420 <__assert_fail@plt+0x628c>
   173dc:	b	17144 <__assert_fail@plt+0x5fb0>
   173e0:	bl	11170 <abort@plt>
   173e4:	andeq	fp, r1, ip, lsr r8
   173e8:	andeq	fp, r1, r0, asr r8
   173ec:	andeq	r0, r0, r2, ror #15
   173f0:	andeq	fp, r1, r4, lsr #22
   173f4:	andeq	fp, r1, r4, asr r8
   173f8:	andeq	fp, r1, r8, asr #16
   173fc:	andeq	fp, r1, ip, lsr #20
   17400:	andeq	fp, r1, r0, lsr #18
   17404:	andeq	fp, r1, r0, lsr r9
   17408:	andeq	fp, r1, r8, asr #18
   1740c:	andeq	fp, r1, r4, ror #18
   17410:	andeq	fp, r1, r4, lsl #19
   17414:	andeq	fp, r1, r8, lsr #19
   17418:	ldrdeq	fp, [r1], -r0
   1741c:	strdeq	fp, [r1], -ip
   17420:	andeq	fp, r1, r0, ror #20
   17424:	push	{r4, r5, lr}
   17428:	sub	sp, sp, #12
   1742c:	ldr	r5, [sp, #24]
   17430:	ldr	ip, [r5]
   17434:	cmp	ip, #0
   17438:	beq	17454 <__assert_fail@plt+0x62c0>
   1743c:	mov	lr, r5
   17440:	mov	ip, #0
   17444:	ldr	r4, [lr, #4]!
   17448:	add	ip, ip, #1
   1744c:	cmp	r4, #0
   17450:	bne	17444 <__assert_fail@plt+0x62b0>
   17454:	stm	sp, {r5, ip}
   17458:	bl	1707c <__assert_fail@plt+0x5ee8>
   1745c:	add	sp, sp, #12
   17460:	pop	{r4, r5, pc}
   17464:	push	{r4, r5, r6, lr}
   17468:	sub	sp, sp, #56	; 0x38
   1746c:	ldr	r6, [pc, #88]	; 174cc <__assert_fail@plt+0x6338>
   17470:	ldr	r5, [sp, #72]	; 0x48
   17474:	add	r4, sp, #8
   17478:	ldr	ip, [r6]
   1747c:	str	ip, [sp, #52]	; 0x34
   17480:	mov	ip, #0
   17484:	ldr	lr, [r5], #4
   17488:	cmp	lr, #0
   1748c:	str	lr, [r4, #4]!
   17490:	beq	174a0 <__assert_fail@plt+0x630c>
   17494:	add	ip, ip, #1
   17498:	cmp	ip, #10
   1749c:	bne	17484 <__assert_fail@plt+0x62f0>
   174a0:	add	lr, sp, #12
   174a4:	str	ip, [sp, #4]
   174a8:	str	lr, [sp]
   174ac:	bl	1707c <__assert_fail@plt+0x5ee8>
   174b0:	ldr	r2, [sp, #52]	; 0x34
   174b4:	ldr	r3, [r6]
   174b8:	cmp	r2, r3
   174bc:	bne	174c8 <__assert_fail@plt+0x6334>
   174c0:	add	sp, sp, #56	; 0x38
   174c4:	pop	{r4, r5, r6, pc}
   174c8:	bl	10f90 <__stack_chk_fail@plt>
   174cc:	andeq	fp, r2, r8, lsl #30
   174d0:	push	{r3}		; (str r3, [sp, #-4]!)
   174d4:	mov	ip, #0
   174d8:	push	{r4, r5, r6, lr}
   174dc:	sub	sp, sp, #60	; 0x3c
   174e0:	ldr	r6, [pc, #100]	; 1754c <__assert_fail@plt+0x63b8>
   174e4:	add	r5, sp, #8
   174e8:	add	r4, sp, #80	; 0x50
   174ec:	ldr	r3, [r6]
   174f0:	str	r4, [sp, #8]
   174f4:	str	r3, [sp, #52]	; 0x34
   174f8:	ldr	r3, [sp, #76]	; 0x4c
   174fc:	ldr	lr, [r4], #4
   17500:	cmp	lr, #0
   17504:	str	lr, [r5, #4]!
   17508:	beq	17518 <__assert_fail@plt+0x6384>
   1750c:	add	ip, ip, #1
   17510:	cmp	ip, #10
   17514:	bne	174fc <__assert_fail@plt+0x6368>
   17518:	add	lr, sp, #12
   1751c:	str	ip, [sp, #4]
   17520:	str	lr, [sp]
   17524:	bl	1707c <__assert_fail@plt+0x5ee8>
   17528:	ldr	r2, [sp, #52]	; 0x34
   1752c:	ldr	r3, [r6]
   17530:	cmp	r2, r3
   17534:	bne	17548 <__assert_fail@plt+0x63b4>
   17538:	add	sp, sp, #60	; 0x3c
   1753c:	pop	{r4, r5, r6, lr}
   17540:	add	sp, sp, #4
   17544:	bx	lr
   17548:	bl	10f90 <__stack_chk_fail@plt>
   1754c:	andeq	fp, r2, r8, lsl #30
   17550:	push	{r4, lr}
   17554:	mov	r2, #5
   17558:	ldr	r1, [pc, #88]	; 175b8 <__assert_fail@plt+0x6424>
   1755c:	mov	r0, #0
   17560:	bl	10f84 <dcgettext@plt>
   17564:	ldr	r2, [pc, #80]	; 175bc <__assert_fail@plt+0x6428>
   17568:	mov	r1, r0
   1756c:	mov	r0, #1
   17570:	bl	110bc <__printf_chk@plt>
   17574:	mov	r2, #5
   17578:	ldr	r1, [pc, #64]	; 175c0 <__assert_fail@plt+0x642c>
   1757c:	mov	r0, #0
   17580:	bl	10f84 <dcgettext@plt>
   17584:	ldr	r3, [pc, #56]	; 175c4 <__assert_fail@plt+0x6430>
   17588:	ldr	r2, [pc, #56]	; 175c8 <__assert_fail@plt+0x6434>
   1758c:	mov	r1, r0
   17590:	mov	r0, #1
   17594:	bl	110bc <__printf_chk@plt>
   17598:	ldr	r1, [pc, #44]	; 175cc <__assert_fail@plt+0x6438>
   1759c:	mov	r2, #5
   175a0:	mov	r0, #0
   175a4:	bl	10f84 <dcgettext@plt>
   175a8:	ldr	r3, [pc, #32]	; 175d0 <__assert_fail@plt+0x643c>
   175ac:	pop	{r4, lr}
   175b0:	ldr	r1, [r3]
   175b4:	b	10ed0 <fputs_unlocked@plt>
   175b8:	muleq	r1, ip, sl
   175bc:			; <UNDEFINED> instruction: 0x0001bab4
   175c0:	andeq	fp, r1, ip, asr #21
   175c4:	andeq	sl, r1, r4, lsr #30
   175c8:	andeq	sl, r1, ip, asr #30
   175cc:	andeq	fp, r1, r0, ror #21
   175d0:	andeq	ip, r2, r4, lsr #3
   175d4:	push	{r4, lr}
   175d8:	mov	r4, r0
   175dc:	bl	11020 <malloc@plt>
   175e0:	adds	r4, r4, #0
   175e4:	movne	r4, #1
   175e8:	cmp	r0, #0
   175ec:	movne	r4, #0
   175f0:	cmp	r4, #0
   175f4:	popeq	{r4, pc}
   175f8:	bl	1781c <__assert_fail@plt+0x6688>
   175fc:	push	{r4, r5, r6, lr}
   17600:	umull	r4, r5, r0, r1
   17604:	adds	r3, r5, #0
   17608:	movne	r3, #1
   1760c:	cmp	r4, #0
   17610:	blt	17628 <__assert_fail@plt+0x6494>
   17614:	cmp	r3, #0
   17618:	bne	17628 <__assert_fail@plt+0x6494>
   1761c:	mul	r0, r1, r0
   17620:	pop	{r4, r5, r6, lr}
   17624:	b	175d4 <__assert_fail@plt+0x6440>
   17628:	bl	1781c <__assert_fail@plt+0x6688>
   1762c:	b	175d4 <__assert_fail@plt+0x6440>
   17630:	adds	r3, r0, #0
   17634:	movne	r3, #1
   17638:	cmp	r1, #0
   1763c:	movne	r3, #0
   17640:	cmp	r3, #0
   17644:	push	{r4, lr}
   17648:	bne	17670 <__assert_fail@plt+0x64dc>
   1764c:	mov	r4, r1
   17650:	bl	10f9c <realloc@plt>
   17654:	adds	r4, r4, #0
   17658:	movne	r4, #1
   1765c:	cmp	r0, #0
   17660:	movne	r4, #0
   17664:	cmp	r4, #0
   17668:	popeq	{r4, pc}
   1766c:	bl	1781c <__assert_fail@plt+0x6688>
   17670:	bl	10f30 <free@plt>
   17674:	mov	r0, #0
   17678:	pop	{r4, pc}
   1767c:	push	{r4, r5, r6, lr}
   17680:	umull	r4, r5, r1, r2
   17684:	adds	r3, r5, #0
   17688:	movne	r3, #1
   1768c:	cmp	r4, #0
   17690:	blt	176a8 <__assert_fail@plt+0x6514>
   17694:	cmp	r3, #0
   17698:	bne	176a8 <__assert_fail@plt+0x6514>
   1769c:	mul	r1, r2, r1
   176a0:	pop	{r4, r5, r6, lr}
   176a4:	b	17630 <__assert_fail@plt+0x649c>
   176a8:	bl	1781c <__assert_fail@plt+0x6688>
   176ac:	push	{r4, r5, r6, r7, r8, lr}
   176b0:	subs	r7, r0, #0
   176b4:	mov	r6, r1
   176b8:	mov	r5, r2
   176bc:	ldr	r4, [r1]
   176c0:	beq	176f4 <__assert_fail@plt+0x6560>
   176c4:	mov	r1, r2
   176c8:	ldr	r0, [pc, #104]	; 17738 <__assert_fail@plt+0x65a4>
   176cc:	bl	18dd8 <__assert_fail@plt+0x7c44>
   176d0:	cmp	r0, r4
   176d4:	bls	17718 <__assert_fail@plt+0x6584>
   176d8:	add	r3, r4, #1
   176dc:	add	r4, r3, r4, lsr #1
   176e0:	str	r4, [r6]
   176e4:	mul	r1, r5, r4
   176e8:	mov	r0, r7
   176ec:	pop	{r4, r5, r6, r7, r8, lr}
   176f0:	b	17630 <__assert_fail@plt+0x649c>
   176f4:	cmp	r4, #0
   176f8:	beq	1771c <__assert_fail@plt+0x6588>
   176fc:	umull	r0, r1, r4, r5
   17700:	adds	r3, r1, #0
   17704:	movne	r3, #1
   17708:	cmp	r0, #0
   1770c:	blt	17718 <__assert_fail@plt+0x6584>
   17710:	cmp	r3, #0
   17714:	beq	176e0 <__assert_fail@plt+0x654c>
   17718:	bl	1781c <__assert_fail@plt+0x6688>
   1771c:	mov	r1, r2
   17720:	mov	r0, #64	; 0x40
   17724:	bl	18dd8 <__assert_fail@plt+0x7c44>
   17728:	cmp	r5, #64	; 0x40
   1772c:	movls	r4, r0
   17730:	addhi	r4, r0, #1
   17734:	b	176fc <__assert_fail@plt+0x6568>
   17738:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1773c:	cmp	r0, #0
   17740:	ldr	r3, [r1]
   17744:	beq	17768 <__assert_fail@plt+0x65d4>
   17748:	ldr	r2, [pc, #60]	; 1778c <__assert_fail@plt+0x65f8>
   1774c:	cmp	r3, r2
   17750:	bhi	17784 <__assert_fail@plt+0x65f0>
   17754:	add	r2, r3, #1
   17758:	add	r3, r2, r3, lsr #1
   1775c:	str	r3, [r1]
   17760:	mov	r1, r3
   17764:	b	17630 <__assert_fail@plt+0x649c>
   17768:	cmp	r3, #0
   1776c:	bne	17780 <__assert_fail@plt+0x65ec>
   17770:	mov	r3, #64	; 0x40
   17774:	str	r3, [r1]
   17778:	mov	r1, r3
   1777c:	b	17630 <__assert_fail@plt+0x649c>
   17780:	bge	1775c <__assert_fail@plt+0x65c8>
   17784:	push	{r4, lr}
   17788:	bl	1781c <__assert_fail@plt+0x6688>
   1778c:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   17790:	push	{r4, lr}
   17794:	mov	r4, r0
   17798:	bl	175d4 <__assert_fail@plt+0x6440>
   1779c:	mov	r2, r4
   177a0:	mov	r1, #0
   177a4:	pop	{r4, lr}
   177a8:	b	110b0 <memset@plt>
   177ac:	push	{r4, r5, r6, lr}
   177b0:	umull	r4, r5, r0, r1
   177b4:	adds	r3, r5, #0
   177b8:	movne	r3, #1
   177bc:	cmp	r4, #0
   177c0:	blt	177d8 <__assert_fail@plt+0x6644>
   177c4:	cmp	r3, #0
   177c8:	bne	177d8 <__assert_fail@plt+0x6644>
   177cc:	bl	10ec4 <calloc@plt>
   177d0:	cmp	r0, #0
   177d4:	popne	{r4, r5, r6, pc}
   177d8:	bl	1781c <__assert_fail@plt+0x6688>
   177dc:	push	{r4, r5, r6, lr}
   177e0:	mov	r4, r1
   177e4:	mov	r5, r0
   177e8:	mov	r0, r1
   177ec:	bl	175d4 <__assert_fail@plt+0x6440>
   177f0:	mov	r2, r4
   177f4:	mov	r1, r5
   177f8:	pop	{r4, r5, r6, lr}
   177fc:	b	10f54 <memcpy@plt>
   17800:	push	{r4, lr}
   17804:	mov	r4, r0
   17808:	bl	11080 <strlen@plt>
   1780c:	add	r1, r0, #1
   17810:	mov	r0, r4
   17814:	pop	{r4, lr}
   17818:	b	177dc <__assert_fail@plt+0x6648>
   1781c:	ldr	r3, [pc, #44]	; 17850 <__assert_fail@plt+0x66bc>
   17820:	push	{r4, lr}
   17824:	mov	r2, #5
   17828:	ldr	r1, [pc, #36]	; 17854 <__assert_fail@plt+0x66c0>
   1782c:	mov	r0, #0
   17830:	ldr	r4, [r3]
   17834:	bl	10f84 <dcgettext@plt>
   17838:	ldr	r2, [pc, #24]	; 17858 <__assert_fail@plt+0x66c4>
   1783c:	mov	r1, #0
   17840:	mov	r3, r0
   17844:	mov	r0, r4
   17848:	bl	11014 <error@plt>
   1784c:	bl	11170 <abort@plt>
   17850:	andeq	ip, r2, r4, asr #2
   17854:	andeq	fp, r1, r4, asr fp
   17858:	strdeq	r9, [r1], -r8
   1785c:	push	{r4, lr}
   17860:	bl	10f3c <strndup@plt>
   17864:	cmp	r0, #0
   17868:	popne	{r4, pc}
   1786c:	bl	1781c <__assert_fail@plt+0x6688>
   17870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17874:	cmp	r2, #36	; 0x24
   17878:	ldr	r7, [pc, #2088]	; 180a8 <__assert_fail@plt+0x6f14>
   1787c:	sub	sp, sp, #28
   17880:	mov	r5, r2
   17884:	ldr	r2, [r7]
   17888:	str	r3, [sp, #4]
   1788c:	str	r2, [sp, #20]
   17890:	ldr	sl, [sp, #64]	; 0x40
   17894:	bhi	18090 <__assert_fail@plt+0x6efc>
   17898:	cmp	r1, #0
   1789c:	mov	r6, r1
   178a0:	mov	r9, r0
   178a4:	addeq	r6, sp, #16
   178a8:	bl	11098 <__errno_location@plt>
   178ac:	mov	r4, #0
   178b0:	mov	r2, r5
   178b4:	mov	r1, r6
   178b8:	str	r4, [r0]
   178bc:	mov	fp, r0
   178c0:	mov	r0, r9
   178c4:	bl	10f00 <strtol@plt>
   178c8:	ldr	r8, [r6]
   178cc:	cmp	r8, r9
   178d0:	mov	r5, r0
   178d4:	beq	17928 <__assert_fail@plt+0x6794>
   178d8:	ldr	r4, [fp]
   178dc:	cmp	r4, #0
   178e0:	beq	178f0 <__assert_fail@plt+0x675c>
   178e4:	cmp	r4, #34	; 0x22
   178e8:	bne	17a24 <__assert_fail@plt+0x6890>
   178ec:	mov	r4, #1
   178f0:	cmp	sl, #0
   178f4:	beq	17904 <__assert_fail@plt+0x6770>
   178f8:	ldrb	fp, [r8]
   178fc:	cmp	fp, #0
   17900:	bne	17b28 <__assert_fail@plt+0x6994>
   17904:	ldr	r3, [sp, #4]
   17908:	str	r5, [r3]
   1790c:	ldr	r2, [sp, #20]
   17910:	ldr	r3, [r7]
   17914:	mov	r0, r4
   17918:	cmp	r2, r3
   1791c:	bne	180a4 <__assert_fail@plt+0x6f10>
   17920:	add	sp, sp, #28
   17924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17928:	cmp	sl, r4
   1792c:	beq	17a24 <__assert_fail@plt+0x6890>
   17930:	ldrb	fp, [r9]
   17934:	cmp	fp, r4
   17938:	beq	17a24 <__assert_fail@plt+0x6890>
   1793c:	mov	r1, fp
   17940:	mov	r0, sl
   17944:	bl	1108c <strchr@plt>
   17948:	cmp	r0, r4
   1794c:	movne	r5, #1
   17950:	beq	17a24 <__assert_fail@plt+0x6890>
   17954:	sub	r9, fp, #69	; 0x45
   17958:	cmp	r9, #47	; 0x2f
   1795c:	ldrls	pc, [pc, r9, lsl #2]
   17960:	b	17b4c <__assert_fail@plt+0x69b8>
   17964:	andeq	r7, r1, ip, lsr #20
   17968:	andeq	r7, r1, ip, asr #22
   1796c:	andeq	r7, r1, ip, lsr #20
   17970:	andeq	r7, r1, ip, asr #22
   17974:	andeq	r7, r1, ip, asr #22
   17978:	andeq	r7, r1, ip, asr #22
   1797c:	andeq	r7, r1, ip, lsr #20
   17980:	andeq	r7, r1, ip, asr #22
   17984:	andeq	r7, r1, ip, lsr #20
   17988:	andeq	r7, r1, ip, asr #22
   1798c:	andeq	r7, r1, ip, asr #22
   17990:	andeq	r7, r1, ip, lsr #20
   17994:	andeq	r7, r1, ip, asr #22
   17998:	andeq	r7, r1, ip, asr #22
   1799c:	andeq	r7, r1, ip, asr #22
   179a0:	andeq	r7, r1, ip, lsr #20
   179a4:	andeq	r7, r1, ip, asr #22
   179a8:	andeq	r7, r1, ip, asr #22
   179ac:	andeq	r7, r1, ip, asr #22
   179b0:	andeq	r7, r1, ip, asr #22
   179b4:	andeq	r7, r1, ip, lsr #20
   179b8:	andeq	r7, r1, ip, lsr #20
   179bc:	andeq	r7, r1, ip, asr #22
   179c0:	andeq	r7, r1, ip, asr #22
   179c4:	andeq	r7, r1, ip, asr #22
   179c8:	andeq	r7, r1, ip, asr #22
   179cc:	andeq	r7, r1, ip, asr #22
   179d0:	andeq	r7, r1, ip, asr #22
   179d4:	andeq	r7, r1, ip, asr #22
   179d8:	andeq	r7, r1, ip, asr #22
   179dc:	andeq	r7, r1, ip, asr #22
   179e0:	andeq	r7, r1, ip, asr #22
   179e4:	andeq	r7, r1, ip, asr #22
   179e8:	andeq	r7, r1, ip, asr #22
   179ec:	andeq	r7, r1, ip, lsr #20
   179f0:	andeq	r7, r1, ip, asr #22
   179f4:	andeq	r7, r1, ip, asr #22
   179f8:	andeq	r7, r1, ip, asr #22
   179fc:	andeq	r7, r1, ip, lsr #20
   17a00:	andeq	r7, r1, ip, asr #22
   17a04:	andeq	r7, r1, ip, lsr #20
   17a08:	andeq	r7, r1, ip, asr #22
   17a0c:	andeq	r7, r1, ip, asr #22
   17a10:	andeq	r7, r1, ip, asr #22
   17a14:	andeq	r7, r1, ip, asr #22
   17a18:	andeq	r7, r1, ip, asr #22
   17a1c:	andeq	r7, r1, ip, asr #22
   17a20:	andeq	r7, r1, ip, lsr #20
   17a24:	mov	r4, #4
   17a28:	b	1790c <__assert_fail@plt+0x6778>
   17a2c:	mov	r0, sl
   17a30:	mov	r1, #48	; 0x30
   17a34:	bl	1108c <strchr@plt>
   17a38:	cmp	r0, #0
   17a3c:	beq	17b4c <__assert_fail@plt+0x69b8>
   17a40:	ldrb	r2, [r8, #1]
   17a44:	cmp	r2, #68	; 0x44
   17a48:	beq	1806c <__assert_fail@plt+0x6ed8>
   17a4c:	cmp	r2, #105	; 0x69
   17a50:	beq	18078 <__assert_fail@plt+0x6ee4>
   17a54:	cmp	r2, #66	; 0x42
   17a58:	beq	1806c <__assert_fail@plt+0x6ed8>
   17a5c:	cmp	r9, #47	; 0x2f
   17a60:	ldrls	pc, [pc, r9, lsl #2]
   17a64:	b	17b3c <__assert_fail@plt+0x69a8>
   17a68:	strdeq	r7, [r1], -r4
   17a6c:	andeq	r7, r1, ip, lsr fp
   17a70:	andeq	r7, r1, r0, ror #31
   17a74:	andeq	r7, r1, ip, lsr fp
   17a78:	andeq	r7, r1, ip, lsr fp
   17a7c:	andeq	r7, r1, ip, lsr fp
   17a80:	ldrdeq	r7, [r1], -r0
   17a84:	andeq	r7, r1, ip, lsr fp
   17a88:	andeq	r7, r1, ip, lsr #31
   17a8c:	andeq	r7, r1, ip, lsr fp
   17a90:	andeq	r7, r1, ip, lsr fp
   17a94:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17a98:	andeq	r7, r1, ip, lsr fp
   17a9c:	andeq	r7, r1, ip, lsr fp
   17aa0:	andeq	r7, r1, ip, lsr fp
   17aa4:	andeq	r7, r1, r4, lsl #31
   17aa8:	andeq	r7, r1, ip, lsr fp
   17aac:	andeq	r7, r1, ip, lsr fp
   17ab0:	andeq	r7, r1, ip, lsr fp
   17ab4:	andeq	r7, r1, ip, lsr fp
   17ab8:	andeq	r7, r1, r0, ror pc
   17abc:			; <UNDEFINED> instruction: 0x00017fbc
   17ac0:	andeq	r7, r1, ip, lsr fp
   17ac4:	andeq	r7, r1, ip, lsr fp
   17ac8:	andeq	r7, r1, ip, lsr fp
   17acc:	andeq	r7, r1, ip, lsr fp
   17ad0:	andeq	r7, r1, ip, lsr fp
   17ad4:	andeq	r7, r1, ip, lsr fp
   17ad8:	andeq	r7, r1, ip, lsr fp
   17adc:			; <UNDEFINED> instruction: 0x00017cb4
   17ae0:	andeq	r8, r1, r8
   17ae4:	andeq	r7, r1, ip, lsr fp
   17ae8:	andeq	r7, r1, ip, lsr fp
   17aec:	andeq	r7, r1, ip, lsr fp
   17af0:	andeq	r7, r1, r0, ror #31
   17af4:	andeq	r7, r1, ip, lsr fp
   17af8:	andeq	r7, r1, ip, lsr fp
   17afc:	andeq	r7, r1, ip, lsr fp
   17b00:	ldrdeq	r7, [r1], -r0
   17b04:	andeq	r7, r1, ip, lsr fp
   17b08:	andeq	r7, r1, ip, lsr #31
   17b0c:	andeq	r7, r1, ip, lsr fp
   17b10:	andeq	r7, r1, ip, lsr fp
   17b14:	andeq	r7, r1, ip, lsr fp
   17b18:	andeq	r7, r1, ip, lsr fp
   17b1c:	andeq	r7, r1, ip, lsr fp
   17b20:	andeq	r7, r1, ip, lsr fp
   17b24:	andeq	r7, r1, r4, lsl #31
   17b28:	mov	r1, fp
   17b2c:	mov	r0, sl
   17b30:	bl	1108c <strchr@plt>
   17b34:	cmp	r0, #0
   17b38:	bne	17954 <__assert_fail@plt+0x67c0>
   17b3c:	ldr	r3, [sp, #4]
   17b40:	orr	r4, r4, #2
   17b44:	str	r5, [r3]
   17b48:	b	1790c <__assert_fail@plt+0x6778>
   17b4c:	mov	sl, #1
   17b50:	mov	r9, #1024	; 0x400
   17b54:	sub	fp, fp, #66	; 0x42
   17b58:	cmp	fp, #53	; 0x35
   17b5c:	ldrls	pc, [pc, fp, lsl #2]
   17b60:	b	17b3c <__assert_fail@plt+0x69a8>
   17b64:	ldrdeq	r7, [r1], -r0
   17b68:	andeq	r7, r1, ip, lsr fp
   17b6c:	andeq	r7, r1, ip, lsr fp
   17b70:	andeq	r7, r1, r8, ror #25
   17b74:	andeq	r7, r1, ip, lsr fp
   17b78:	andeq	r7, r1, r4, asr #28
   17b7c:	andeq	r7, r1, ip, lsr fp
   17b80:	andeq	r7, r1, ip, lsr fp
   17b84:	andeq	r7, r1, ip, lsr fp
   17b88:	andeq	r7, r1, r4, lsl lr
   17b8c:	andeq	r7, r1, ip, lsr fp
   17b90:	andeq	r7, r1, ip, lsr ip
   17b94:	andeq	r7, r1, ip, lsr fp
   17b98:	andeq	r7, r1, ip, lsr fp
   17b9c:	andeq	r7, r1, ip, asr #26
   17ba0:	andeq	r7, r1, ip, lsr fp
   17ba4:	andeq	r7, r1, ip, lsr fp
   17ba8:	andeq	r7, r1, ip, lsr fp
   17bac:	andeq	r7, r1, ip, lsl #30
   17bb0:	andeq	r7, r1, ip, lsr fp
   17bb4:	andeq	r7, r1, ip, lsr fp
   17bb8:	andeq	r7, r1, ip, lsr fp
   17bbc:	andeq	r7, r1, ip, lsr fp
   17bc0:			; <UNDEFINED> instruction: 0x00017db0
   17bc4:	andeq	r7, r1, r8, lsr #29
   17bc8:	andeq	r7, r1, ip, lsr fp
   17bcc:	andeq	r7, r1, ip, lsr fp
   17bd0:	andeq	r7, r1, ip, lsr fp
   17bd4:	andeq	r7, r1, ip, lsr fp
   17bd8:	andeq	r7, r1, ip, lsr fp
   17bdc:	andeq	r7, r1, ip, lsr fp
   17be0:	andeq	r7, r1, ip, lsr fp
   17be4:			; <UNDEFINED> instruction: 0x00017cb8
   17be8:	andeq	r7, r1, ip, ror ip
   17bec:	andeq	r7, r1, ip, lsr fp
   17bf0:	andeq	r7, r1, ip, lsr fp
   17bf4:	andeq	r7, r1, ip, lsr fp
   17bf8:	andeq	r7, r1, r4, asr #28
   17bfc:	andeq	r7, r1, ip, lsr fp
   17c00:	andeq	r7, r1, ip, lsr fp
   17c04:	andeq	r7, r1, ip, lsr fp
   17c08:	andeq	r7, r1, r4, lsl lr
   17c0c:	andeq	r7, r1, ip, lsr fp
   17c10:	andeq	r7, r1, ip, lsr ip
   17c14:	andeq	r7, r1, ip, lsr fp
   17c18:	andeq	r7, r1, ip, lsr fp
   17c1c:	andeq	r7, r1, ip, lsr fp
   17c20:	andeq	r7, r1, ip, lsr fp
   17c24:	andeq	r7, r1, ip, lsr fp
   17c28:	andeq	r7, r1, ip, lsr fp
   17c2c:	andeq	r7, r1, ip, lsl #30
   17c30:	andeq	r7, r1, ip, lsr fp
   17c34:	andeq	r7, r1, ip, lsr fp
   17c38:	muleq	r1, r4, ip
   17c3c:	mov	r1, r9
   17c40:	mov	r0, #-2147483648	; 0x80000000
   17c44:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17c48:	mov	fp, r0
   17c4c:	cmp	r5, fp
   17c50:	blt	17c74 <__assert_fail@plt+0x6ae0>
   17c54:	mov	r1, r9
   17c58:	mvn	r0, #-2147483648	; 0x80000000
   17c5c:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17c60:	cmp	r5, r0
   17c64:	bgt	17ca8 <__assert_fail@plt+0x6b14>
   17c68:	mul	r5, r9, r5
   17c6c:	cmp	r5, fp
   17c70:	bge	17e34 <__assert_fail@plt+0x6ca0>
   17c74:	mov	r4, #1
   17c78:	mov	r5, #-2147483648	; 0x80000000
   17c7c:	add	r2, r8, sl
   17c80:	str	r2, [r6]
   17c84:	ldrb	r3, [r8, sl]
   17c88:	cmp	r3, #0
   17c8c:	orrne	r4, r4, #2
   17c90:	b	17904 <__assert_fail@plt+0x6770>
   17c94:	cmp	r5, #-1073741824	; 0xc0000000
   17c98:	blt	17c74 <__assert_fail@plt+0x6ae0>
   17c9c:	cmn	r5, #-1073741823	; 0xc0000001
   17ca0:	lslle	r5, r5, #1
   17ca4:	ble	17c7c <__assert_fail@plt+0x6ae8>
   17ca8:	mov	r4, #1
   17cac:	mvn	r5, #-2147483648	; 0x80000000
   17cb0:	b	17c7c <__assert_fail@plt+0x6ae8>
   17cb4:	mov	sl, #1
   17cb8:	cmn	r5, #4194304	; 0x400000
   17cbc:	blt	17c74 <__assert_fail@plt+0x6ae0>
   17cc0:	cmp	r5, #4194304	; 0x400000
   17cc4:	lsllt	r5, r5, #9
   17cc8:	blt	17c7c <__assert_fail@plt+0x6ae8>
   17ccc:	b	17ca8 <__assert_fail@plt+0x6b14>
   17cd0:	cmn	r5, #2097152	; 0x200000
   17cd4:	blt	17c74 <__assert_fail@plt+0x6ae0>
   17cd8:	cmp	r5, #2097152	; 0x200000
   17cdc:	lsllt	r5, r5, #10
   17ce0:	blt	17c7c <__assert_fail@plt+0x6ae8>
   17ce4:	b	17ca8 <__assert_fail@plt+0x6b14>
   17ce8:	mov	r1, r9
   17cec:	mov	r0, #-2147483648	; 0x80000000
   17cf0:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17cf4:	mov	r2, r0
   17cf8:	mov	fp, #6
   17cfc:	mov	r3, #0
   17d00:	str	r4, [sp, #8]
   17d04:	str	r6, [sp, #12]
   17d08:	mov	r4, r3
   17d0c:	mov	r6, fp
   17d10:	mov	fp, r2
   17d14:	b	17d38 <__assert_fail@plt+0x6ba4>
   17d18:	mov	r1, r9
   17d1c:	mvn	r0, #-2147483648	; 0x80000000
   17d20:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17d24:	cmp	r0, r5
   17d28:	blt	18030 <__assert_fail@plt+0x6e9c>
   17d2c:	mul	r5, r9, r5
   17d30:	subs	r6, r6, #1
   17d34:	beq	18010 <__assert_fail@plt+0x6e7c>
   17d38:	cmp	r5, fp
   17d3c:	bge	17d18 <__assert_fail@plt+0x6b84>
   17d40:	mov	r4, #1
   17d44:	mov	r5, #-2147483648	; 0x80000000
   17d48:	b	17d30 <__assert_fail@plt+0x6b9c>
   17d4c:	mov	r1, r9
   17d50:	mov	r0, #-2147483648	; 0x80000000
   17d54:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17d58:	mov	r2, r0
   17d5c:	mov	fp, #5
   17d60:	mov	r3, #0
   17d64:	str	r4, [sp, #8]
   17d68:	str	r6, [sp, #12]
   17d6c:	mov	r4, r3
   17d70:	mov	r6, fp
   17d74:	mov	fp, r2
   17d78:	b	17d9c <__assert_fail@plt+0x6c08>
   17d7c:	mov	r1, r9
   17d80:	mvn	r0, #-2147483648	; 0x80000000
   17d84:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17d88:	cmp	r0, r5
   17d8c:	blt	18060 <__assert_fail@plt+0x6ecc>
   17d90:	mul	r5, r9, r5
   17d94:	subs	r6, r6, #1
   17d98:	beq	18010 <__assert_fail@plt+0x6e7c>
   17d9c:	cmp	fp, r5
   17da0:	ble	17d7c <__assert_fail@plt+0x6be8>
   17da4:	mov	r4, #1
   17da8:	mov	r5, #-2147483648	; 0x80000000
   17dac:	b	17d94 <__assert_fail@plt+0x6c00>
   17db0:	mov	r1, r9
   17db4:	mov	r0, #-2147483648	; 0x80000000
   17db8:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17dbc:	mov	r2, r0
   17dc0:	mov	fp, #8
   17dc4:	mov	r3, #0
   17dc8:	str	r4, [sp, #8]
   17dcc:	str	r6, [sp, #12]
   17dd0:	mov	r4, r3
   17dd4:	mov	r6, fp
   17dd8:	mov	fp, r2
   17ddc:	b	17e00 <__assert_fail@plt+0x6c6c>
   17de0:	mov	r1, r9
   17de4:	mvn	r0, #-2147483648	; 0x80000000
   17de8:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17dec:	cmp	r0, r5
   17df0:	blt	18048 <__assert_fail@plt+0x6eb4>
   17df4:	mul	r5, r9, r5
   17df8:	subs	r6, r6, #1
   17dfc:	beq	18010 <__assert_fail@plt+0x6e7c>
   17e00:	cmp	fp, r5
   17e04:	ble	17de0 <__assert_fail@plt+0x6c4c>
   17e08:	mov	r4, #1
   17e0c:	mov	r5, #-2147483648	; 0x80000000
   17e10:	b	17df8 <__assert_fail@plt+0x6c64>
   17e14:	mov	r1, r9
   17e18:	mov	r0, #-2147483648	; 0x80000000
   17e1c:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17e20:	cmp	r5, r0
   17e24:	blt	17c74 <__assert_fail@plt+0x6ae0>
   17e28:	mov	r1, r9
   17e2c:	mvn	r0, #-2147483648	; 0x80000000
   17e30:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17e34:	cmp	r0, r5
   17e38:	blt	17ca8 <__assert_fail@plt+0x6b14>
   17e3c:	mul	r5, r9, r5
   17e40:	b	17c7c <__assert_fail@plt+0x6ae8>
   17e44:	mov	r1, r9
   17e48:	mov	r0, #-2147483648	; 0x80000000
   17e4c:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17e50:	mov	r2, r0
   17e54:	mov	fp, #3
   17e58:	mov	r3, #0
   17e5c:	str	r4, [sp, #8]
   17e60:	str	r6, [sp, #12]
   17e64:	mov	r4, r3
   17e68:	mov	r6, fp
   17e6c:	mov	fp, r2
   17e70:	b	17e94 <__assert_fail@plt+0x6d00>
   17e74:	mov	r1, r9
   17e78:	mvn	r0, #-2147483648	; 0x80000000
   17e7c:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17e80:	cmp	r0, r5
   17e84:	blt	18054 <__assert_fail@plt+0x6ec0>
   17e88:	mul	r5, r9, r5
   17e8c:	subs	r6, r6, #1
   17e90:	beq	18010 <__assert_fail@plt+0x6e7c>
   17e94:	cmp	r5, fp
   17e98:	bge	17e74 <__assert_fail@plt+0x6ce0>
   17e9c:	mov	r4, #1
   17ea0:	mov	r5, #-2147483648	; 0x80000000
   17ea4:	b	17e8c <__assert_fail@plt+0x6cf8>
   17ea8:	mov	r1, r9
   17eac:	mov	r0, #-2147483648	; 0x80000000
   17eb0:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17eb4:	mov	r2, r0
   17eb8:	mov	fp, #7
   17ebc:	mov	r3, #0
   17ec0:	str	r4, [sp, #8]
   17ec4:	str	r6, [sp, #12]
   17ec8:	mov	r4, r3
   17ecc:	mov	r6, fp
   17ed0:	mov	fp, r2
   17ed4:	b	17ef8 <__assert_fail@plt+0x6d64>
   17ed8:	mov	r1, r9
   17edc:	mvn	r0, #-2147483648	; 0x80000000
   17ee0:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17ee4:	cmp	r0, r5
   17ee8:	blt	1803c <__assert_fail@plt+0x6ea8>
   17eec:	mul	r5, r9, r5
   17ef0:	subs	r6, r6, #1
   17ef4:	beq	18010 <__assert_fail@plt+0x6e7c>
   17ef8:	cmp	fp, r5
   17efc:	ble	17ed8 <__assert_fail@plt+0x6d44>
   17f00:	mov	r4, #1
   17f04:	mov	r5, #-2147483648	; 0x80000000
   17f08:	b	17ef0 <__assert_fail@plt+0x6d5c>
   17f0c:	mov	r1, r9
   17f10:	mov	r0, #-2147483648	; 0x80000000
   17f14:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17f18:	mov	r2, r0
   17f1c:	mov	fp, #4
   17f20:	mov	r3, #0
   17f24:	str	r4, [sp, #8]
   17f28:	str	r6, [sp, #12]
   17f2c:	mov	r4, r3
   17f30:	mov	r6, fp
   17f34:	mov	fp, r2
   17f38:	b	17f5c <__assert_fail@plt+0x6dc8>
   17f3c:	mov	r1, r9
   17f40:	mvn	r0, #-2147483648	; 0x80000000
   17f44:	bl	18fe4 <__assert_fail@plt+0x7e50>
   17f48:	cmp	r0, r5
   17f4c:	blt	18024 <__assert_fail@plt+0x6e90>
   17f50:	mul	r5, r9, r5
   17f54:	subs	r6, r6, #1
   17f58:	beq	18010 <__assert_fail@plt+0x6e7c>
   17f5c:	cmp	fp, r5
   17f60:	ble	17f3c <__assert_fail@plt+0x6da8>
   17f64:	mov	r4, #1
   17f68:	mov	r5, #-2147483648	; 0x80000000
   17f6c:	b	17f54 <__assert_fail@plt+0x6dc0>
   17f70:	ldr	r3, [pc, #308]	; 180ac <__assert_fail@plt+0x6f18>
   17f74:	mov	sl, #1
   17f78:	mov	r2, r3
   17f7c:	mov	r9, #1024	; 0x400
   17f80:	b	17dc0 <__assert_fail@plt+0x6c2c>
   17f84:	ldr	r3, [pc, #288]	; 180ac <__assert_fail@plt+0x6f18>
   17f88:	mov	sl, #1
   17f8c:	mov	r2, r3
   17f90:	mov	r9, #1024	; 0x400
   17f94:	b	17f1c <__assert_fail@plt+0x6d88>
   17f98:	ldr	r3, [pc, #268]	; 180ac <__assert_fail@plt+0x6f18>
   17f9c:	mov	sl, #1
   17fa0:	mov	r2, r3
   17fa4:	mov	r9, #1024	; 0x400
   17fa8:	b	17d5c <__assert_fail@plt+0x6bc8>
   17fac:	ldr	fp, [pc, #248]	; 180ac <__assert_fail@plt+0x6f18>
   17fb0:	mov	sl, #1
   17fb4:	mov	r9, #1024	; 0x400
   17fb8:	b	17c4c <__assert_fail@plt+0x6ab8>
   17fbc:	ldr	r3, [pc, #232]	; 180ac <__assert_fail@plt+0x6f18>
   17fc0:	mov	sl, #1
   17fc4:	mov	r2, r3
   17fc8:	mov	r9, #1024	; 0x400
   17fcc:	b	17eb8 <__assert_fail@plt+0x6d24>
   17fd0:	ldr	r0, [pc, #212]	; 180ac <__assert_fail@plt+0x6f18>
   17fd4:	mov	sl, #1
   17fd8:	mov	r9, #1024	; 0x400
   17fdc:	b	17e20 <__assert_fail@plt+0x6c8c>
   17fe0:	ldr	r3, [pc, #196]	; 180ac <__assert_fail@plt+0x6f18>
   17fe4:	mov	sl, #1
   17fe8:	mov	r2, r3
   17fec:	mov	r9, #1024	; 0x400
   17ff0:	b	17e54 <__assert_fail@plt+0x6cc0>
   17ff4:	ldr	r3, [pc, #176]	; 180ac <__assert_fail@plt+0x6f18>
   17ff8:	mov	sl, #1
   17ffc:	mov	r2, r3
   18000:	mov	r9, #1024	; 0x400
   18004:	b	17cf8 <__assert_fail@plt+0x6b64>
   18008:	mov	sl, #1
   1800c:	b	17c7c <__assert_fail@plt+0x6ae8>
   18010:	mov	r3, r4
   18014:	ldr	r4, [sp, #8]
   18018:	ldr	r6, [sp, #12]
   1801c:	orr	r4, r4, r3
   18020:	b	17c7c <__assert_fail@plt+0x6ae8>
   18024:	mov	r4, #1
   18028:	mvn	r5, #-2147483648	; 0x80000000
   1802c:	b	17f54 <__assert_fail@plt+0x6dc0>
   18030:	mov	r4, #1
   18034:	mvn	r5, #-2147483648	; 0x80000000
   18038:	b	17d30 <__assert_fail@plt+0x6b9c>
   1803c:	mov	r4, #1
   18040:	mvn	r5, #-2147483648	; 0x80000000
   18044:	b	17ef0 <__assert_fail@plt+0x6d5c>
   18048:	mov	r4, #1
   1804c:	mvn	r5, #-2147483648	; 0x80000000
   18050:	b	17df8 <__assert_fail@plt+0x6c64>
   18054:	mov	r4, #1
   18058:	mvn	r5, #-2147483648	; 0x80000000
   1805c:	b	17e8c <__assert_fail@plt+0x6cf8>
   18060:	mov	r4, #1
   18064:	mvn	r5, #-2147483648	; 0x80000000
   18068:	b	17d94 <__assert_fail@plt+0x6c00>
   1806c:	mov	sl, #2
   18070:	mov	r9, #1000	; 0x3e8
   18074:	b	17b54 <__assert_fail@plt+0x69c0>
   18078:	ldrb	r2, [r8, #2]
   1807c:	mov	r9, #1024	; 0x400
   18080:	cmp	r2, #66	; 0x42
   18084:	movne	sl, #1
   18088:	moveq	sl, #3
   1808c:	b	17b54 <__assert_fail@plt+0x69c0>
   18090:	ldr	r3, [pc, #24]	; 180b0 <__assert_fail@plt+0x6f1c>
   18094:	mov	r2, #96	; 0x60
   18098:	ldr	r1, [pc, #20]	; 180b4 <__assert_fail@plt+0x6f20>
   1809c:	ldr	r0, [pc, #20]	; 180b8 <__assert_fail@plt+0x6f24>
   180a0:	bl	11194 <__assert_fail@plt>
   180a4:	bl	10f90 <__stack_chk_fail@plt>
   180a8:	andeq	fp, r2, r8, lsl #30
   180ac:			; <UNDEFINED> instruction: 0xffe00000
   180b0:	andeq	fp, r1, r8, ror #22
   180b4:	andeq	fp, r1, r0, ror fp
   180b8:	andeq	fp, r1, r0, lsl #23
   180bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c0:	sub	sp, sp, #36	; 0x24
   180c4:	ldr	r5, [pc, #2536]	; 18ab4 <__assert_fail@plt+0x7920>
   180c8:	mov	r9, r2
   180cc:	cmp	r2, #36	; 0x24
   180d0:	str	r3, [sp, #12]
   180d4:	ldr	r2, [r5]
   180d8:	ldr	r3, [sp, #72]	; 0x48
   180dc:	str	r2, [sp, #28]
   180e0:	str	r3, [sp]
   180e4:	bhi	18aa0 <__assert_fail@plt+0x790c>
   180e8:	cmp	r1, #0
   180ec:	mov	r4, r1
   180f0:	mov	r6, r0
   180f4:	addeq	r4, sp, #24
   180f8:	bl	11098 <__errno_location@plt>
   180fc:	mov	r3, #0
   18100:	str	r3, [r0]
   18104:	mov	r7, r0
   18108:	bl	11068 <__ctype_b_loc@plt>
   1810c:	ldrb	r3, [r6]
   18110:	mov	r1, r6
   18114:	ldr	r0, [r0]
   18118:	b	18120 <__assert_fail@plt+0x6f8c>
   1811c:	ldrb	r3, [r1, #1]!
   18120:	lsl	r2, r3, #1
   18124:	ldrh	r8, [r0, r2]
   18128:	ands	r8, r8, #8192	; 0x2000
   1812c:	bne	1811c <__assert_fail@plt+0x6f88>
   18130:	cmp	r3, #45	; 0x2d
   18134:	beq	181d0 <__assert_fail@plt+0x703c>
   18138:	mov	r2, r9
   1813c:	mov	r3, r8
   18140:	mov	r1, r4
   18144:	mov	r0, r6
   18148:	bl	10f60 <__strtoull_internal@plt>
   1814c:	ldr	r9, [r4]
   18150:	cmp	r9, r6
   18154:	mov	sl, r0
   18158:	mov	fp, r1
   1815c:	beq	181b8 <__assert_fail@plt+0x7024>
   18160:	ldr	r8, [r7]
   18164:	cmp	r8, #0
   18168:	bne	181a8 <__assert_fail@plt+0x7014>
   1816c:	ldr	r3, [sp]
   18170:	cmp	r3, #0
   18174:	beq	18184 <__assert_fail@plt+0x6ff0>
   18178:	ldrb	r6, [r9]
   1817c:	cmp	r6, #0
   18180:	bne	18558 <__assert_fail@plt+0x73c4>
   18184:	ldr	r3, [sp, #12]
   18188:	strd	sl, [r3]
   1818c:	ldr	r2, [sp, #28]
   18190:	ldr	r3, [r5]
   18194:	mov	r0, r8
   18198:	cmp	r2, r3
   1819c:	bne	18a9c <__assert_fail@plt+0x7908>
   181a0:	add	sp, sp, #36	; 0x24
   181a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181a8:	cmp	r8, #34	; 0x22
   181ac:	bne	181d0 <__assert_fail@plt+0x703c>
   181b0:	mov	r8, #1
   181b4:	b	1816c <__assert_fail@plt+0x6fd8>
   181b8:	ldr	r0, [sp]
   181bc:	cmp	r0, #0
   181c0:	beq	181d0 <__assert_fail@plt+0x703c>
   181c4:	ldrb	r6, [r6]
   181c8:	cmp	r6, #0
   181cc:	bne	181d8 <__assert_fail@plt+0x7044>
   181d0:	mov	r8, #4
   181d4:	b	1818c <__assert_fail@plt+0x6ff8>
   181d8:	mov	r1, r6
   181dc:	bl	1108c <strchr@plt>
   181e0:	cmp	r0, #0
   181e4:	movne	sl, #1
   181e8:	movne	fp, #0
   181ec:	beq	181d0 <__assert_fail@plt+0x703c>
   181f0:	sub	r7, r6, #69	; 0x45
   181f4:	cmp	r7, #47	; 0x2f
   181f8:	ldrls	pc, [pc, r7, lsl #2]
   181fc:	b	183bc <__assert_fail@plt+0x7228>
   18200:	andeq	r8, r1, r0, asr #5
   18204:			; <UNDEFINED> instruction: 0x000183bc
   18208:	andeq	r8, r1, r0, asr #5
   1820c:			; <UNDEFINED> instruction: 0x000183bc
   18210:			; <UNDEFINED> instruction: 0x000183bc
   18214:			; <UNDEFINED> instruction: 0x000183bc
   18218:	andeq	r8, r1, r0, asr #5
   1821c:			; <UNDEFINED> instruction: 0x000183bc
   18220:	andeq	r8, r1, r0, asr #5
   18224:			; <UNDEFINED> instruction: 0x000183bc
   18228:			; <UNDEFINED> instruction: 0x000183bc
   1822c:	andeq	r8, r1, r0, asr #5
   18230:			; <UNDEFINED> instruction: 0x000183bc
   18234:			; <UNDEFINED> instruction: 0x000183bc
   18238:			; <UNDEFINED> instruction: 0x000183bc
   1823c:	andeq	r8, r1, r0, asr #5
   18240:			; <UNDEFINED> instruction: 0x000183bc
   18244:			; <UNDEFINED> instruction: 0x000183bc
   18248:			; <UNDEFINED> instruction: 0x000183bc
   1824c:			; <UNDEFINED> instruction: 0x000183bc
   18250:	andeq	r8, r1, r0, asr #5
   18254:	andeq	r8, r1, r0, asr #5
   18258:			; <UNDEFINED> instruction: 0x000183bc
   1825c:			; <UNDEFINED> instruction: 0x000183bc
   18260:			; <UNDEFINED> instruction: 0x000183bc
   18264:			; <UNDEFINED> instruction: 0x000183bc
   18268:			; <UNDEFINED> instruction: 0x000183bc
   1826c:			; <UNDEFINED> instruction: 0x000183bc
   18270:			; <UNDEFINED> instruction: 0x000183bc
   18274:			; <UNDEFINED> instruction: 0x000183bc
   18278:			; <UNDEFINED> instruction: 0x000183bc
   1827c:			; <UNDEFINED> instruction: 0x000183bc
   18280:			; <UNDEFINED> instruction: 0x000183bc
   18284:			; <UNDEFINED> instruction: 0x000183bc
   18288:	andeq	r8, r1, r0, asr #5
   1828c:			; <UNDEFINED> instruction: 0x000183bc
   18290:			; <UNDEFINED> instruction: 0x000183bc
   18294:			; <UNDEFINED> instruction: 0x000183bc
   18298:	andeq	r8, r1, r0, asr #5
   1829c:			; <UNDEFINED> instruction: 0x000183bc
   182a0:	andeq	r8, r1, r0, asr #5
   182a4:			; <UNDEFINED> instruction: 0x000183bc
   182a8:			; <UNDEFINED> instruction: 0x000183bc
   182ac:			; <UNDEFINED> instruction: 0x000183bc
   182b0:			; <UNDEFINED> instruction: 0x000183bc
   182b4:			; <UNDEFINED> instruction: 0x000183bc
   182b8:			; <UNDEFINED> instruction: 0x000183bc
   182bc:	andeq	r8, r1, r0, asr #5
   182c0:	ldr	r0, [sp]
   182c4:	mov	r1, #48	; 0x30
   182c8:	bl	1108c <strchr@plt>
   182cc:	cmp	r0, #0
   182d0:	beq	183bc <__assert_fail@plt+0x7228>
   182d4:	ldrb	r3, [r9, #1]
   182d8:	cmp	r3, #68	; 0x44
   182dc:	beq	1899c <__assert_fail@plt+0x7808>
   182e0:	cmp	r3, #105	; 0x69
   182e4:	beq	1857c <__assert_fail@plt+0x73e8>
   182e8:	cmp	r3, #66	; 0x42
   182ec:	beq	1899c <__assert_fail@plt+0x7808>
   182f0:	cmp	r7, #47	; 0x2f
   182f4:	ldrls	pc, [pc, r7, lsl #2]
   182f8:	b	1856c <__assert_fail@plt+0x73d8>
   182fc:	andeq	r8, r1, r0, lsl #19
   18300:	andeq	r8, r1, ip, ror #10
   18304:	andeq	r8, r1, r0, ror r9
   18308:	andeq	r8, r1, ip, ror #10
   1830c:	andeq	r8, r1, ip, ror #10
   18310:	andeq	r8, r1, ip, ror #10
   18314:	andeq	r8, r1, r0, ror #18
   18318:	andeq	r8, r1, ip, ror #10
   1831c:	andeq	r8, r1, r0, asr r9
   18320:	andeq	r8, r1, ip, ror #10
   18324:	andeq	r8, r1, ip, ror #10
   18328:	andeq	r8, r1, r0, asr #18
   1832c:	andeq	r8, r1, ip, ror #10
   18330:	andeq	r8, r1, ip, ror #10
   18334:	andeq	r8, r1, ip, ror #10
   18338:	andeq	r8, r1, r0, lsr r9
   1833c:	andeq	r8, r1, ip, ror #10
   18340:	andeq	r8, r1, ip, ror #10
   18344:	andeq	r8, r1, ip, ror #10
   18348:	andeq	r8, r1, ip, ror #10
   1834c:	andeq	r8, r1, r0, lsr #18
   18350:	andeq	r8, r1, r0, lsl r9
   18354:	andeq	r8, r1, ip, ror #10
   18358:	andeq	r8, r1, ip, ror #10
   1835c:	andeq	r8, r1, ip, ror #10
   18360:	andeq	r8, r1, ip, ror #10
   18364:	andeq	r8, r1, ip, ror #10
   18368:	andeq	r8, r1, ip, ror #10
   1836c:	andeq	r8, r1, ip, ror #10
   18370:			; <UNDEFINED> instruction: 0x000185b8
   18374:	andeq	r8, r1, r8, lsl #18
   18378:	andeq	r8, r1, ip, ror #10
   1837c:	andeq	r8, r1, ip, ror #10
   18380:	andeq	r8, r1, ip, ror #10
   18384:	andeq	r8, r1, r0, ror r9
   18388:	andeq	r8, r1, ip, ror #10
   1838c:	andeq	r8, r1, ip, ror #10
   18390:	andeq	r8, r1, ip, ror #10
   18394:	andeq	r8, r1, r0, ror #18
   18398:	andeq	r8, r1, ip, ror #10
   1839c:	andeq	r8, r1, r0, asr r9
   183a0:	andeq	r8, r1, ip, ror #10
   183a4:	andeq	r8, r1, ip, ror #10
   183a8:	andeq	r8, r1, ip, ror #10
   183ac:	andeq	r8, r1, ip, ror #10
   183b0:	andeq	r8, r1, ip, ror #10
   183b4:	andeq	r8, r1, ip, ror #10
   183b8:	andeq	r8, r1, r0, lsr r9
   183bc:	mov	lr, #1
   183c0:	mov	r0, #1024	; 0x400
   183c4:	sub	r6, r6, #66	; 0x42
   183c8:	cmp	r6, #53	; 0x35
   183cc:	ldrls	pc, [pc, r6, lsl #2]
   183d0:	b	1856c <__assert_fail@plt+0x73d8>
   183d4:	andeq	r8, r1, r0, ror #11
   183d8:	andeq	r8, r1, ip, ror #10
   183dc:	andeq	r8, r1, ip, ror #10
   183e0:	andeq	r8, r1, r4, lsl #12
   183e4:	andeq	r8, r1, ip, ror #10
   183e8:	andeq	r8, r1, ip, lsr #9
   183ec:	andeq	r8, r1, ip, ror #10
   183f0:	andeq	r8, r1, ip, ror #10
   183f4:	andeq	r8, r1, ip, ror #10
   183f8:	strdeq	r8, [r1], -ip
   183fc:	andeq	r8, r1, ip, ror #10
   18400:	andeq	r8, r1, r0, lsr #17
   18404:	andeq	r8, r1, ip, ror #10
   18408:	andeq	r8, r1, ip, ror #10
   1840c:	andeq	r8, r1, r4, lsr #16
   18410:	andeq	r8, r1, ip, ror #10
   18414:	andeq	r8, r1, ip, ror #10
   18418:	andeq	r8, r1, ip, ror #10
   1841c:	andeq	r8, r1, r8, lsr #15
   18420:	andeq	r8, r1, ip, ror #10
   18424:	andeq	r8, r1, ip, ror #10
   18428:	andeq	r8, r1, ip, ror #10
   1842c:	andeq	r8, r1, ip, ror #10
   18430:	andeq	r8, r1, ip, lsr #14
   18434:	andeq	r8, r1, r0, lsl #13
   18438:	andeq	r8, r1, ip, ror #10
   1843c:	andeq	r8, r1, ip, ror #10
   18440:	andeq	r8, r1, ip, ror #10
   18444:	andeq	r8, r1, ip, ror #10
   18448:	andeq	r8, r1, ip, ror #10
   1844c:	andeq	r8, r1, ip, ror #10
   18450:	andeq	r8, r1, ip, ror #10
   18454:			; <UNDEFINED> instruction: 0x000185bc
   18458:	andeq	r8, r1, r0, asr #10
   1845c:	andeq	r8, r1, ip, ror #10
   18460:	andeq	r8, r1, ip, ror #10
   18464:	andeq	r8, r1, ip, ror #10
   18468:	andeq	r8, r1, ip, lsr #9
   1846c:	andeq	r8, r1, ip, ror #10
   18470:	andeq	r8, r1, ip, ror #10
   18474:	andeq	r8, r1, ip, ror #10
   18478:	strdeq	r8, [r1], -ip
   1847c:	andeq	r8, r1, ip, ror #10
   18480:	andeq	r8, r1, r0, lsr #17
   18484:	andeq	r8, r1, ip, ror #10
   18488:	andeq	r8, r1, ip, ror #10
   1848c:	andeq	r8, r1, ip, ror #10
   18490:	andeq	r8, r1, ip, ror #10
   18494:	andeq	r8, r1, ip, ror #10
   18498:	andeq	r8, r1, ip, ror #10
   1849c:	andeq	r8, r1, r8, lsr #15
   184a0:	andeq	r8, r1, ip, ror #10
   184a4:	andeq	r8, r1, ip, ror #10
   184a8:	muleq	r1, r4, r5
   184ac:	asr	r1, r0, #31
   184b0:	mov	r2, #0
   184b4:	mov	r3, #0
   184b8:	cmp	fp, #0
   184bc:	strd	r2, [sp]
   184c0:	bne	189e0 <__assert_fail@plt+0x784c>
   184c4:	ldrd	r2, [sp]
   184c8:	orrs	r3, r2, r3
   184cc:	bne	189d0 <__assert_fail@plt+0x783c>
   184d0:	mul	r3, sl, r1
   184d4:	umull	r6, r7, sl, r0
   184d8:	mla	r3, r0, fp, r3
   184dc:	ldrd	sl, [sp]
   184e0:	add	ip, r3, r7
   184e4:	cmp	ip, #0
   184e8:	mov	r7, ip
   184ec:	bne	18a74 <__assert_fail@plt+0x78e0>
   184f0:	orrs	r3, sl, fp
   184f4:	bne	189d0 <__assert_fail@plt+0x783c>
   184f8:	umull	r2, r3, r6, r0
   184fc:	mul	ip, r6, r1
   18500:	strd	r2, [sp]
   18504:	mla	r3, r0, r7, ip
   18508:	ldr	r2, [sp, #4]
   1850c:	add	ip, r3, r2
   18510:	cmp	ip, #0
   18514:	str	ip, [sp, #4]
   18518:	bne	18a50 <__assert_fail@plt+0x78bc>
   1851c:	orrs	r3, sl, fp
   18520:	bne	189d0 <__assert_fail@plt+0x783c>
   18524:	ldrd	r6, [sp]
   18528:	mov	r3, #0
   1852c:	mul	r2, r6, r1
   18530:	umull	sl, fp, r6, r0
   18534:	mla	r2, r0, r7, r2
   18538:	add	fp, r2, fp
   1853c:	orr	r8, r8, r3
   18540:	add	r3, r9, lr
   18544:	str	r3, [r4]
   18548:	ldrb	r3, [r9, lr]
   1854c:	cmp	r3, #0
   18550:	orrne	r8, r8, #2
   18554:	b	18184 <__assert_fail@plt+0x6ff0>
   18558:	mov	r1, r6
   1855c:	ldr	r0, [sp]
   18560:	bl	1108c <strchr@plt>
   18564:	cmp	r0, #0
   18568:	bne	181f0 <__assert_fail@plt+0x705c>
   1856c:	ldr	r3, [sp, #12]
   18570:	orr	r8, r8, #2
   18574:	strd	sl, [r3]
   18578:	b	1818c <__assert_fail@plt+0x6ff8>
   1857c:	ldrb	r3, [r9, #2]
   18580:	mov	r0, #1024	; 0x400
   18584:	cmp	r3, #66	; 0x42
   18588:	movne	lr, #1
   1858c:	moveq	lr, #3
   18590:	b	183c4 <__assert_fail@plt+0x7230>
   18594:	lsr	r3, fp, #31
   18598:	adds	sl, sl, sl
   1859c:	adc	fp, fp, fp
   185a0:	cmp	r3, #0
   185a4:	beq	18540 <__assert_fail@plt+0x73ac>
   185a8:	mov	r8, #1
   185ac:	mvn	sl, #0
   185b0:	mvn	fp, #0
   185b4:	b	18540 <__assert_fail@plt+0x73ac>
   185b8:	mov	lr, #1
   185bc:	lsr	r3, fp, #23
   185c0:	cmp	r3, #0
   185c4:	bne	185a8 <__assert_fail@plt+0x7414>
   185c8:	lsl	r3, fp, #9
   185cc:	orr	r3, r3, sl, lsr #23
   185d0:	lsl	r2, sl, #9
   185d4:	mov	sl, r2
   185d8:	mov	fp, r3
   185dc:	b	18540 <__assert_fail@plt+0x73ac>
   185e0:	lsr	r3, fp, #22
   185e4:	cmp	r3, #0
   185e8:	bne	185a8 <__assert_fail@plt+0x7414>
   185ec:	lsl	r3, fp, #10
   185f0:	orr	r3, r3, sl, lsr #22
   185f4:	lsl	r2, sl, #10
   185f8:	mov	sl, r2
   185fc:	mov	fp, r3
   18600:	b	18540 <__assert_fail@plt+0x73ac>
   18604:	mov	r6, r0
   18608:	asr	r7, r0, #31
   1860c:	mov	r3, #0
   18610:	mov	ip, #6
   18614:	str	r3, [sp]
   18618:	strd	r4, [sp, #16]
   1861c:	b	1864c <__assert_fail@plt+0x74b8>
   18620:	orrs	r3, r2, r3
   18624:	movne	r3, #1
   18628:	muleq	r3, sl, r7
   1862c:	strne	r3, [sp]
   18630:	mlaeq	r3, r6, fp, r3
   18634:	umulleq	sl, fp, sl, r6
   18638:	mvnne	sl, #0
   1863c:	addeq	fp, r3, fp
   18640:	mvnne	fp, #0
   18644:	subs	ip, ip, #1
   18648:	beq	18990 <__assert_fail@plt+0x77fc>
   1864c:	cmp	fp, #0
   18650:	mov	r2, #0
   18654:	mov	r3, #0
   18658:	beq	18620 <__assert_fail@plt+0x748c>
   1865c:	umull	r0, r1, sl, r6
   18660:	mov	r5, #0
   18664:	mov	r0, r1
   18668:	mov	r1, r5
   1866c:	umlal	r0, r1, fp, r6
   18670:	cmp	r1, r5
   18674:	movne	r2, #1
   18678:	movne	r3, #0
   1867c:	b	18620 <__assert_fail@plt+0x748c>
   18680:	mov	r6, r0
   18684:	asr	r7, r0, #31
   18688:	mov	r3, #0
   1868c:	mov	ip, #7
   18690:	str	r3, [sp]
   18694:	strd	r4, [sp, #16]
   18698:	b	186c8 <__assert_fail@plt+0x7534>
   1869c:	orrs	r3, r2, r3
   186a0:	movne	r3, #1
   186a4:	muleq	r3, sl, r7
   186a8:	strne	r3, [sp]
   186ac:	mlaeq	r3, r6, fp, r3
   186b0:	umulleq	sl, fp, sl, r6
   186b4:	mvnne	sl, #0
   186b8:	addeq	fp, r3, fp
   186bc:	mvnne	fp, #0
   186c0:	subs	ip, ip, #1
   186c4:	beq	18990 <__assert_fail@plt+0x77fc>
   186c8:	cmp	fp, #0
   186cc:	mov	r2, #0
   186d0:	mov	r3, #0
   186d4:	beq	1869c <__assert_fail@plt+0x7508>
   186d8:	umull	r0, r1, sl, r6
   186dc:	mov	r5, #0
   186e0:	mov	r0, r1
   186e4:	mov	r1, r5
   186e8:	umlal	r0, r1, fp, r6
   186ec:	cmp	r1, r5
   186f0:	movne	r2, #1
   186f4:	movne	r3, #0
   186f8:	b	1869c <__assert_fail@plt+0x7508>
   186fc:	asr	r1, r0, #31
   18700:	cmp	fp, #0
   18704:	mov	r6, #0
   18708:	mov	r7, #0
   1870c:	bne	189a8 <__assert_fail@plt+0x7814>
   18710:	orrs	r3, r6, r7
   18714:	bne	185a8 <__assert_fail@plt+0x7414>
   18718:	mul	r3, sl, r1
   1871c:	mla	r3, r0, fp, r3
   18720:	umull	sl, fp, sl, r0
   18724:	add	fp, r3, fp
   18728:	b	18540 <__assert_fail@plt+0x73ac>
   1872c:	mov	r6, r0
   18730:	asr	r7, r0, #31
   18734:	mov	r3, #0
   18738:	mov	ip, #8
   1873c:	str	r3, [sp]
   18740:	strd	r4, [sp, #16]
   18744:	b	18774 <__assert_fail@plt+0x75e0>
   18748:	orrs	r3, r2, r3
   1874c:	movne	r3, #1
   18750:	muleq	r3, sl, r7
   18754:	strne	r3, [sp]
   18758:	mlaeq	r3, r6, fp, r3
   1875c:	umulleq	sl, fp, sl, r6
   18760:	mvnne	sl, #0
   18764:	addeq	fp, r3, fp
   18768:	mvnne	fp, #0
   1876c:	subs	ip, ip, #1
   18770:	beq	18990 <__assert_fail@plt+0x77fc>
   18774:	cmp	fp, #0
   18778:	mov	r2, #0
   1877c:	mov	r3, #0
   18780:	beq	18748 <__assert_fail@plt+0x75b4>
   18784:	umull	r0, r1, sl, r6
   18788:	mov	r5, #0
   1878c:	mov	r0, r1
   18790:	mov	r1, r5
   18794:	umlal	r0, r1, fp, r6
   18798:	cmp	r1, r5
   1879c:	movne	r2, #1
   187a0:	movne	r3, #0
   187a4:	b	18748 <__assert_fail@plt+0x75b4>
   187a8:	mov	r6, r0
   187ac:	asr	r7, r0, #31
   187b0:	mov	r3, #0
   187b4:	mov	ip, #4
   187b8:	str	r3, [sp]
   187bc:	strd	r4, [sp, #16]
   187c0:	b	187f0 <__assert_fail@plt+0x765c>
   187c4:	orrs	r3, r2, r3
   187c8:	movne	r3, #1
   187cc:	muleq	r3, sl, r7
   187d0:	strne	r3, [sp]
   187d4:	mlaeq	r3, r6, fp, r3
   187d8:	umulleq	sl, fp, sl, r6
   187dc:	mvnne	sl, #0
   187e0:	addeq	fp, r3, fp
   187e4:	mvnne	fp, #0
   187e8:	subs	ip, ip, #1
   187ec:	beq	18990 <__assert_fail@plt+0x77fc>
   187f0:	cmp	fp, #0
   187f4:	mov	r2, #0
   187f8:	mov	r3, #0
   187fc:	beq	187c4 <__assert_fail@plt+0x7630>
   18800:	umull	r0, r1, sl, r6
   18804:	mov	r5, #0
   18808:	mov	r0, r1
   1880c:	mov	r1, r5
   18810:	umlal	r0, r1, fp, r6
   18814:	cmp	r1, r5
   18818:	movne	r2, #1
   1881c:	movne	r3, #0
   18820:	b	187c4 <__assert_fail@plt+0x7630>
   18824:	mov	r6, r0
   18828:	asr	r7, r0, #31
   1882c:	mov	r3, #0
   18830:	mov	ip, #5
   18834:	str	r3, [sp]
   18838:	strd	r4, [sp, #16]
   1883c:	b	1886c <__assert_fail@plt+0x76d8>
   18840:	orrs	r3, r2, r3
   18844:	movne	r3, #1
   18848:	muleq	r3, sl, r7
   1884c:	strne	r3, [sp]
   18850:	mlaeq	r3, r6, fp, r3
   18854:	umulleq	sl, fp, sl, r6
   18858:	mvnne	sl, #0
   1885c:	addeq	fp, r3, fp
   18860:	mvnne	fp, #0
   18864:	subs	ip, ip, #1
   18868:	beq	18990 <__assert_fail@plt+0x77fc>
   1886c:	cmp	fp, #0
   18870:	mov	r2, #0
   18874:	mov	r3, #0
   18878:	beq	18840 <__assert_fail@plt+0x76ac>
   1887c:	umull	r0, r1, sl, r6
   18880:	mov	r5, #0
   18884:	mov	r0, r1
   18888:	mov	r1, r5
   1888c:	umlal	r0, r1, fp, r6
   18890:	cmp	r1, r5
   18894:	movne	r2, #1
   18898:	movne	r3, #0
   1889c:	b	18840 <__assert_fail@plt+0x76ac>
   188a0:	asr	r1, r0, #31
   188a4:	cmp	fp, #0
   188a8:	mov	r6, #0
   188ac:	mov	r7, #0
   188b0:	bne	18a04 <__assert_fail@plt+0x7870>
   188b4:	orrs	r3, r6, r7
   188b8:	bne	185a8 <__assert_fail@plt+0x7414>
   188bc:	umull	r2, r3, sl, r0
   188c0:	mul	ip, sl, r1
   188c4:	strd	r2, [sp]
   188c8:	mla	r3, r0, fp, ip
   188cc:	ldr	r2, [sp, #4]
   188d0:	mov	sl, r6
   188d4:	add	ip, r3, r2
   188d8:	cmp	ip, #0
   188dc:	mov	fp, r7
   188e0:	str	ip, [sp, #4]
   188e4:	bne	18a2c <__assert_fail@plt+0x7898>
   188e8:	orrs	r3, sl, fp
   188ec:	bne	185a8 <__assert_fail@plt+0x7414>
   188f0:	ldrd	r6, [sp]
   188f4:	mul	r3, r6, r1
   188f8:	umull	sl, fp, r6, r0
   188fc:	mla	r0, r0, r7, r3
   18900:	add	fp, r0, fp
   18904:	b	18540 <__assert_fail@plt+0x73ac>
   18908:	mov	lr, #1
   1890c:	b	18540 <__assert_fail@plt+0x73ac>
   18910:	mov	lr, #1
   18914:	mov	r6, #1024	; 0x400
   18918:	mov	r7, #0
   1891c:	b	18688 <__assert_fail@plt+0x74f4>
   18920:	mov	lr, #1
   18924:	mov	r6, #1024	; 0x400
   18928:	mov	r7, #0
   1892c:	b	18734 <__assert_fail@plt+0x75a0>
   18930:	mov	lr, #1
   18934:	mov	r6, #1024	; 0x400
   18938:	mov	r7, #0
   1893c:	b	187b0 <__assert_fail@plt+0x761c>
   18940:	mov	lr, #1
   18944:	mov	r6, #1024	; 0x400
   18948:	mov	r7, #0
   1894c:	b	1882c <__assert_fail@plt+0x7698>
   18950:	mov	lr, #1
   18954:	mov	r0, #1024	; 0x400
   18958:	mov	r1, #0
   1895c:	b	188a4 <__assert_fail@plt+0x7710>
   18960:	mov	lr, #1
   18964:	mov	r0, #1024	; 0x400
   18968:	mov	r1, #0
   1896c:	b	18700 <__assert_fail@plt+0x756c>
   18970:	mov	lr, #1
   18974:	mov	r0, #1024	; 0x400
   18978:	mov	r1, #0
   1897c:	b	184b0 <__assert_fail@plt+0x731c>
   18980:	mov	lr, #1
   18984:	mov	r6, #1024	; 0x400
   18988:	mov	r7, #0
   1898c:	b	1860c <__assert_fail@plt+0x7478>
   18990:	ldrd	r4, [sp, #16]
   18994:	ldr	r3, [sp]
   18998:	b	1853c <__assert_fail@plt+0x73a8>
   1899c:	mov	lr, #2
   189a0:	mov	r0, #1000	; 0x3e8
   189a4:	b	183c4 <__assert_fail@plt+0x7230>
   189a8:	umull	r2, r3, sl, r0
   189ac:	str	r3, [sp]
   189b0:	mov	r3, #0
   189b4:	str	r3, [sp, #4]
   189b8:	ldrd	r2, [sp]
   189bc:	umlal	r2, r3, fp, r0
   189c0:	cmp	r3, #0
   189c4:	movne	r6, #1
   189c8:	movne	r7, #0
   189cc:	b	18710 <__assert_fail@plt+0x757c>
   189d0:	mov	r3, #1
   189d4:	mvn	sl, #0
   189d8:	mvn	fp, #0
   189dc:	b	1853c <__assert_fail@plt+0x73a8>
   189e0:	umull	r2, r3, sl, r0
   189e4:	mov	r7, #0
   189e8:	mov	r6, r3
   189ec:	umlal	r6, r7, fp, r0
   189f0:	cmp	r7, #0
   189f4:	movne	r2, #1
   189f8:	movne	r3, #0
   189fc:	strdne	r2, [sp]
   18a00:	b	184c4 <__assert_fail@plt+0x7330>
   18a04:	umull	r2, r3, sl, r0
   18a08:	str	r3, [sp]
   18a0c:	mov	r3, #0
   18a10:	str	r3, [sp, #4]
   18a14:	ldrd	r2, [sp]
   18a18:	umlal	r2, r3, fp, r0
   18a1c:	cmp	r3, #0
   18a20:	movne	r6, #1
   18a24:	movne	r7, #0
   18a28:	b	188b4 <__assert_fail@plt+0x7720>
   18a2c:	ldr	r3, [sp]
   18a30:	mov	r7, #0
   18a34:	umull	r2, r3, r3, r0
   18a38:	mov	r6, r3
   18a3c:	umlal	r6, r7, ip, r0
   18a40:	cmp	r7, #0
   18a44:	movne	sl, #1
   18a48:	movne	fp, #0
   18a4c:	b	188e8 <__assert_fail@plt+0x7754>
   18a50:	ldr	r3, [sp]
   18a54:	mov	r7, #0
   18a58:	umull	r2, r3, r3, r0
   18a5c:	mov	r6, r3
   18a60:	umlal	r6, r7, ip, r0
   18a64:	cmp	r7, #0
   18a68:	movne	sl, #1
   18a6c:	movne	fp, #0
   18a70:	b	1851c <__assert_fail@plt+0x7388>
   18a74:	umull	r2, r3, r6, r0
   18a78:	str	r3, [sp]
   18a7c:	mov	r3, #0
   18a80:	str	r3, [sp, #4]
   18a84:	ldrd	r2, [sp]
   18a88:	umlal	r2, r3, ip, r0
   18a8c:	cmp	r3, #0
   18a90:	movne	sl, #1
   18a94:	movne	fp, #0
   18a98:	b	184f0 <__assert_fail@plt+0x735c>
   18a9c:	bl	10f90 <__stack_chk_fail@plt>
   18aa0:	ldr	r3, [pc, #16]	; 18ab8 <__assert_fail@plt+0x7924>
   18aa4:	mov	r2, #96	; 0x60
   18aa8:	ldr	r1, [pc, #12]	; 18abc <__assert_fail@plt+0x7928>
   18aac:	ldr	r0, [pc, #12]	; 18ac0 <__assert_fail@plt+0x792c>
   18ab0:	bl	11194 <__assert_fail@plt>
   18ab4:	andeq	fp, r2, r8, lsl #30
   18ab8:	andeq	fp, r1, r8, lsr #23
   18abc:	andeq	fp, r1, r0, ror fp
   18ac0:	andeq	fp, r1, r0, lsl #23
   18ac4:	push	{r4, r5, r6, r7, r8, lr}
   18ac8:	subs	r7, r0, #0
   18acc:	ldr	r5, [pc, #108]	; 18b40 <__assert_fail@plt+0x79ac>
   18ad0:	sub	sp, sp, #8
   18ad4:	mov	r8, r1
   18ad8:	ldr	r1, [r5]
   18adc:	moveq	r7, sp
   18ae0:	str	r1, [sp, #4]
   18ae4:	mov	r0, r7
   18ae8:	mov	r1, r8
   18aec:	mov	r6, r2
   18af0:	bl	10ffc <mbrtowc@plt>
   18af4:	cmp	r6, #0
   18af8:	cmnne	r0, #3
   18afc:	mov	r4, r0
   18b00:	bhi	18b20 <__assert_fail@plt+0x798c>
   18b04:	ldr	r2, [sp, #4]
   18b08:	ldr	r3, [r5]
   18b0c:	mov	r0, r4
   18b10:	cmp	r2, r3
   18b14:	bne	18b3c <__assert_fail@plt+0x79a8>
   18b18:	add	sp, sp, #8
   18b1c:	pop	{r4, r5, r6, r7, r8, pc}
   18b20:	mov	r0, #0
   18b24:	bl	18bb8 <__assert_fail@plt+0x7a24>
   18b28:	cmp	r0, #0
   18b2c:	moveq	r4, #1
   18b30:	ldrbeq	r3, [r8]
   18b34:	streq	r3, [r7]
   18b38:	b	18b04 <__assert_fail@plt+0x7970>
   18b3c:	bl	10f90 <__stack_chk_fail@plt>
   18b40:	andeq	fp, r2, r8, lsl #30
   18b44:	push	{r4, r5, r6, lr}
   18b48:	mov	r4, r0
   18b4c:	bl	10ff0 <__fpending@plt>
   18b50:	ldr	r5, [r4]
   18b54:	and	r5, r5, #32
   18b58:	mov	r6, r0
   18b5c:	mov	r0, r4
   18b60:	bl	18c38 <__assert_fail@plt+0x7aa4>
   18b64:	cmp	r5, #0
   18b68:	mov	r4, r0
   18b6c:	bne	18b98 <__assert_fail@plt+0x7a04>
   18b70:	cmp	r0, #0
   18b74:	beq	18b90 <__assert_fail@plt+0x79fc>
   18b78:	cmp	r6, #0
   18b7c:	bne	18bb0 <__assert_fail@plt+0x7a1c>
   18b80:	bl	11098 <__errno_location@plt>
   18b84:	ldr	r4, [r0]
   18b88:	subs	r4, r4, #9
   18b8c:	mvnne	r4, #0
   18b90:	mov	r0, r4
   18b94:	pop	{r4, r5, r6, pc}
   18b98:	cmp	r0, #0
   18b9c:	bne	18bb0 <__assert_fail@plt+0x7a1c>
   18ba0:	bl	11098 <__errno_location@plt>
   18ba4:	str	r4, [r0]
   18ba8:	mvn	r4, #0
   18bac:	b	18b90 <__assert_fail@plt+0x79fc>
   18bb0:	mvn	r4, #0
   18bb4:	b	18b90 <__assert_fail@plt+0x79fc>
   18bb8:	push	{r4, lr}
   18bbc:	mov	r1, #0
   18bc0:	bl	11104 <setlocale@plt>
   18bc4:	subs	r4, r0, #0
   18bc8:	beq	18bf4 <__assert_fail@plt+0x7a60>
   18bcc:	ldr	r1, [pc, #40]	; 18bfc <__assert_fail@plt+0x7a68>
   18bd0:	bl	10ef4 <strcmp@plt>
   18bd4:	cmp	r0, #0
   18bd8:	popeq	{r4, pc}
   18bdc:	mov	r0, r4
   18be0:	ldr	r1, [pc, #24]	; 18c00 <__assert_fail@plt+0x7a6c>
   18be4:	bl	10ef4 <strcmp@plt>
   18be8:	adds	r0, r0, #0
   18bec:	movne	r0, #1
   18bf0:	pop	{r4, pc}
   18bf4:	mov	r0, #1
   18bf8:	pop	{r4, pc}
   18bfc:			; <UNDEFINED> instruction: 0x0001bbb4
   18c00:			; <UNDEFINED> instruction: 0x0001bbb8
   18c04:	push	{r4, lr}
   18c08:	mov	r0, #14
   18c0c:	bl	11128 <nl_langinfo@plt>
   18c10:	cmp	r0, #0
   18c14:	beq	18c2c <__assert_fail@plt+0x7a98>
   18c18:	ldrb	r2, [r0]
   18c1c:	ldr	r3, [pc, #16]	; 18c34 <__assert_fail@plt+0x7aa0>
   18c20:	cmp	r2, #0
   18c24:	moveq	r0, r3
   18c28:	pop	{r4, pc}
   18c2c:	ldr	r0, [pc]	; 18c34 <__assert_fail@plt+0x7aa0>
   18c30:	pop	{r4, pc}
   18c34:	andeq	fp, r1, r0, asr #23
   18c38:	push	{r4, r5, lr}
   18c3c:	sub	sp, sp, #12
   18c40:	mov	r4, r0
   18c44:	bl	110c8 <fileno@plt>
   18c48:	cmp	r0, #0
   18c4c:	mov	r0, r4
   18c50:	blt	18ccc <__assert_fail@plt+0x7b38>
   18c54:	bl	11038 <__freading@plt>
   18c58:	cmp	r0, #0
   18c5c:	bne	18c98 <__assert_fail@plt+0x7b04>
   18c60:	mov	r0, r4
   18c64:	bl	18cd8 <__assert_fail@plt+0x7b44>
   18c68:	cmp	r0, #0
   18c6c:	beq	18cc8 <__assert_fail@plt+0x7b34>
   18c70:	bl	11098 <__errno_location@plt>
   18c74:	mov	r5, r0
   18c78:	mov	r0, r4
   18c7c:	ldr	r4, [r5]
   18c80:	bl	110e0 <fclose@plt>
   18c84:	cmp	r4, #0
   18c88:	mvnne	r0, #0
   18c8c:	strne	r4, [r5]
   18c90:	add	sp, sp, #12
   18c94:	pop	{r4, r5, pc}
   18c98:	mov	r0, r4
   18c9c:	bl	110c8 <fileno@plt>
   18ca0:	mov	r3, #1
   18ca4:	str	r3, [sp]
   18ca8:	mov	r2, #0
   18cac:	mov	r3, #0
   18cb0:	bl	10fcc <lseek64@plt>
   18cb4:	mvn	r3, #0
   18cb8:	mvn	r2, #0
   18cbc:	cmp	r1, r3
   18cc0:	cmpeq	r0, r2
   18cc4:	bne	18c60 <__assert_fail@plt+0x7acc>
   18cc8:	mov	r0, r4
   18ccc:	add	sp, sp, #12
   18cd0:	pop	{r4, r5, lr}
   18cd4:	b	110e0 <fclose@plt>
   18cd8:	push	{r4, lr}
   18cdc:	subs	r4, r0, #0
   18ce0:	sub	sp, sp, #8
   18ce4:	beq	18d00 <__assert_fail@plt+0x7b6c>
   18ce8:	bl	11038 <__freading@plt>
   18cec:	cmp	r0, #0
   18cf0:	beq	18d00 <__assert_fail@plt+0x7b6c>
   18cf4:	ldr	r3, [r4]
   18cf8:	tst	r3, #256	; 0x100
   18cfc:	bne	18d10 <__assert_fail@plt+0x7b7c>
   18d00:	mov	r0, r4
   18d04:	add	sp, sp, #8
   18d08:	pop	{r4, lr}
   18d0c:	b	10f0c <fflush@plt>
   18d10:	mov	r3, #1
   18d14:	str	r3, [sp]
   18d18:	mov	r2, #0
   18d1c:	mov	r3, #0
   18d20:	mov	r0, r4
   18d24:	bl	18d38 <__assert_fail@plt+0x7ba4>
   18d28:	mov	r0, r4
   18d2c:	add	sp, sp, #8
   18d30:	pop	{r4, lr}
   18d34:	b	10f0c <fflush@plt>
   18d38:	push	{r4, r5, r6, r7, r8, lr}
   18d3c:	sub	sp, sp, #8
   18d40:	ldmib	r0, {ip, lr}
   18d44:	mov	r4, r0
   18d48:	ldr	r5, [sp, #32]
   18d4c:	cmp	lr, ip
   18d50:	beq	18d68 <__assert_fail@plt+0x7bd4>
   18d54:	str	r5, [sp, #32]
   18d58:	mov	r0, r4
   18d5c:	add	sp, sp, #8
   18d60:	pop	{r4, r5, r6, r7, r8, lr}
   18d64:	b	110ec <fseeko64@plt>
   18d68:	ldr	lr, [r0, #20]
   18d6c:	ldr	ip, [r0, #16]
   18d70:	cmp	lr, ip
   18d74:	bne	18d54 <__assert_fail@plt+0x7bc0>
   18d78:	ldr	r8, [r0, #36]	; 0x24
   18d7c:	cmp	r8, #0
   18d80:	bne	18d54 <__assert_fail@plt+0x7bc0>
   18d84:	mov	r6, r2
   18d88:	mov	r7, r3
   18d8c:	bl	110c8 <fileno@plt>
   18d90:	mov	r2, r6
   18d94:	mov	r3, r7
   18d98:	str	r5, [sp]
   18d9c:	bl	10fcc <lseek64@plt>
   18da0:	mvn	r3, #0
   18da4:	mvn	r2, #0
   18da8:	cmp	r1, r3
   18dac:	cmpeq	r0, r2
   18db0:	beq	18dd0 <__assert_fail@plt+0x7c3c>
   18db4:	ldr	r3, [r4]
   18db8:	strd	r0, [r4, #80]	; 0x50
   18dbc:	mov	r0, r8
   18dc0:	bic	r3, r3, #16
   18dc4:	str	r3, [r4]
   18dc8:	add	sp, sp, #8
   18dcc:	pop	{r4, r5, r6, r7, r8, pc}
   18dd0:	mvn	r0, #0
   18dd4:	b	18dc8 <__assert_fail@plt+0x7c34>
   18dd8:	subs	r2, r1, #1
   18ddc:	bxeq	lr
   18de0:	bcc	18fb8 <__assert_fail@plt+0x7e24>
   18de4:	cmp	r0, r1
   18de8:	bls	18f9c <__assert_fail@plt+0x7e08>
   18dec:	tst	r1, r2
   18df0:	beq	18fa8 <__assert_fail@plt+0x7e14>
   18df4:	clz	r3, r0
   18df8:	clz	r2, r1
   18dfc:	sub	r3, r2, r3
   18e00:	rsbs	r3, r3, #31
   18e04:	addne	r3, r3, r3, lsl #1
   18e08:	mov	r2, #0
   18e0c:	addne	pc, pc, r3, lsl #2
   18e10:	nop			; (mov r0, r0)
   18e14:	cmp	r0, r1, lsl #31
   18e18:	adc	r2, r2, r2
   18e1c:	subcs	r0, r0, r1, lsl #31
   18e20:	cmp	r0, r1, lsl #30
   18e24:	adc	r2, r2, r2
   18e28:	subcs	r0, r0, r1, lsl #30
   18e2c:	cmp	r0, r1, lsl #29
   18e30:	adc	r2, r2, r2
   18e34:	subcs	r0, r0, r1, lsl #29
   18e38:	cmp	r0, r1, lsl #28
   18e3c:	adc	r2, r2, r2
   18e40:	subcs	r0, r0, r1, lsl #28
   18e44:	cmp	r0, r1, lsl #27
   18e48:	adc	r2, r2, r2
   18e4c:	subcs	r0, r0, r1, lsl #27
   18e50:	cmp	r0, r1, lsl #26
   18e54:	adc	r2, r2, r2
   18e58:	subcs	r0, r0, r1, lsl #26
   18e5c:	cmp	r0, r1, lsl #25
   18e60:	adc	r2, r2, r2
   18e64:	subcs	r0, r0, r1, lsl #25
   18e68:	cmp	r0, r1, lsl #24
   18e6c:	adc	r2, r2, r2
   18e70:	subcs	r0, r0, r1, lsl #24
   18e74:	cmp	r0, r1, lsl #23
   18e78:	adc	r2, r2, r2
   18e7c:	subcs	r0, r0, r1, lsl #23
   18e80:	cmp	r0, r1, lsl #22
   18e84:	adc	r2, r2, r2
   18e88:	subcs	r0, r0, r1, lsl #22
   18e8c:	cmp	r0, r1, lsl #21
   18e90:	adc	r2, r2, r2
   18e94:	subcs	r0, r0, r1, lsl #21
   18e98:	cmp	r0, r1, lsl #20
   18e9c:	adc	r2, r2, r2
   18ea0:	subcs	r0, r0, r1, lsl #20
   18ea4:	cmp	r0, r1, lsl #19
   18ea8:	adc	r2, r2, r2
   18eac:	subcs	r0, r0, r1, lsl #19
   18eb0:	cmp	r0, r1, lsl #18
   18eb4:	adc	r2, r2, r2
   18eb8:	subcs	r0, r0, r1, lsl #18
   18ebc:	cmp	r0, r1, lsl #17
   18ec0:	adc	r2, r2, r2
   18ec4:	subcs	r0, r0, r1, lsl #17
   18ec8:	cmp	r0, r1, lsl #16
   18ecc:	adc	r2, r2, r2
   18ed0:	subcs	r0, r0, r1, lsl #16
   18ed4:	cmp	r0, r1, lsl #15
   18ed8:	adc	r2, r2, r2
   18edc:	subcs	r0, r0, r1, lsl #15
   18ee0:	cmp	r0, r1, lsl #14
   18ee4:	adc	r2, r2, r2
   18ee8:	subcs	r0, r0, r1, lsl #14
   18eec:	cmp	r0, r1, lsl #13
   18ef0:	adc	r2, r2, r2
   18ef4:	subcs	r0, r0, r1, lsl #13
   18ef8:	cmp	r0, r1, lsl #12
   18efc:	adc	r2, r2, r2
   18f00:	subcs	r0, r0, r1, lsl #12
   18f04:	cmp	r0, r1, lsl #11
   18f08:	adc	r2, r2, r2
   18f0c:	subcs	r0, r0, r1, lsl #11
   18f10:	cmp	r0, r1, lsl #10
   18f14:	adc	r2, r2, r2
   18f18:	subcs	r0, r0, r1, lsl #10
   18f1c:	cmp	r0, r1, lsl #9
   18f20:	adc	r2, r2, r2
   18f24:	subcs	r0, r0, r1, lsl #9
   18f28:	cmp	r0, r1, lsl #8
   18f2c:	adc	r2, r2, r2
   18f30:	subcs	r0, r0, r1, lsl #8
   18f34:	cmp	r0, r1, lsl #7
   18f38:	adc	r2, r2, r2
   18f3c:	subcs	r0, r0, r1, lsl #7
   18f40:	cmp	r0, r1, lsl #6
   18f44:	adc	r2, r2, r2
   18f48:	subcs	r0, r0, r1, lsl #6
   18f4c:	cmp	r0, r1, lsl #5
   18f50:	adc	r2, r2, r2
   18f54:	subcs	r0, r0, r1, lsl #5
   18f58:	cmp	r0, r1, lsl #4
   18f5c:	adc	r2, r2, r2
   18f60:	subcs	r0, r0, r1, lsl #4
   18f64:	cmp	r0, r1, lsl #3
   18f68:	adc	r2, r2, r2
   18f6c:	subcs	r0, r0, r1, lsl #3
   18f70:	cmp	r0, r1, lsl #2
   18f74:	adc	r2, r2, r2
   18f78:	subcs	r0, r0, r1, lsl #2
   18f7c:	cmp	r0, r1, lsl #1
   18f80:	adc	r2, r2, r2
   18f84:	subcs	r0, r0, r1, lsl #1
   18f88:	cmp	r0, r1
   18f8c:	adc	r2, r2, r2
   18f90:	subcs	r0, r0, r1
   18f94:	mov	r0, r2
   18f98:	bx	lr
   18f9c:	moveq	r0, #1
   18fa0:	movne	r0, #0
   18fa4:	bx	lr
   18fa8:	clz	r2, r1
   18fac:	rsb	r2, r2, #31
   18fb0:	lsr	r0, r0, r2
   18fb4:	bx	lr
   18fb8:	cmp	r0, #0
   18fbc:	mvnne	r0, #0
   18fc0:	b	195e4 <__assert_fail@plt+0x8450>
   18fc4:	cmp	r1, #0
   18fc8:	beq	18fb8 <__assert_fail@plt+0x7e24>
   18fcc:	push	{r0, r1, lr}
   18fd0:	bl	18dd8 <__assert_fail@plt+0x7c44>
   18fd4:	pop	{r1, r2, lr}
   18fd8:	mul	r3, r2, r0
   18fdc:	sub	r1, r1, r3
   18fe0:	bx	lr
   18fe4:	cmp	r1, #0
   18fe8:	beq	191f4 <__assert_fail@plt+0x8060>
   18fec:	eor	ip, r0, r1
   18ff0:	rsbmi	r1, r1, #0
   18ff4:	subs	r2, r1, #1
   18ff8:	beq	191c0 <__assert_fail@plt+0x802c>
   18ffc:	movs	r3, r0
   19000:	rsbmi	r3, r0, #0
   19004:	cmp	r3, r1
   19008:	bls	191cc <__assert_fail@plt+0x8038>
   1900c:	tst	r1, r2
   19010:	beq	191dc <__assert_fail@plt+0x8048>
   19014:	clz	r2, r3
   19018:	clz	r0, r1
   1901c:	sub	r2, r0, r2
   19020:	rsbs	r2, r2, #31
   19024:	addne	r2, r2, r2, lsl #1
   19028:	mov	r0, #0
   1902c:	addne	pc, pc, r2, lsl #2
   19030:	nop			; (mov r0, r0)
   19034:	cmp	r3, r1, lsl #31
   19038:	adc	r0, r0, r0
   1903c:	subcs	r3, r3, r1, lsl #31
   19040:	cmp	r3, r1, lsl #30
   19044:	adc	r0, r0, r0
   19048:	subcs	r3, r3, r1, lsl #30
   1904c:	cmp	r3, r1, lsl #29
   19050:	adc	r0, r0, r0
   19054:	subcs	r3, r3, r1, lsl #29
   19058:	cmp	r3, r1, lsl #28
   1905c:	adc	r0, r0, r0
   19060:	subcs	r3, r3, r1, lsl #28
   19064:	cmp	r3, r1, lsl #27
   19068:	adc	r0, r0, r0
   1906c:	subcs	r3, r3, r1, lsl #27
   19070:	cmp	r3, r1, lsl #26
   19074:	adc	r0, r0, r0
   19078:	subcs	r3, r3, r1, lsl #26
   1907c:	cmp	r3, r1, lsl #25
   19080:	adc	r0, r0, r0
   19084:	subcs	r3, r3, r1, lsl #25
   19088:	cmp	r3, r1, lsl #24
   1908c:	adc	r0, r0, r0
   19090:	subcs	r3, r3, r1, lsl #24
   19094:	cmp	r3, r1, lsl #23
   19098:	adc	r0, r0, r0
   1909c:	subcs	r3, r3, r1, lsl #23
   190a0:	cmp	r3, r1, lsl #22
   190a4:	adc	r0, r0, r0
   190a8:	subcs	r3, r3, r1, lsl #22
   190ac:	cmp	r3, r1, lsl #21
   190b0:	adc	r0, r0, r0
   190b4:	subcs	r3, r3, r1, lsl #21
   190b8:	cmp	r3, r1, lsl #20
   190bc:	adc	r0, r0, r0
   190c0:	subcs	r3, r3, r1, lsl #20
   190c4:	cmp	r3, r1, lsl #19
   190c8:	adc	r0, r0, r0
   190cc:	subcs	r3, r3, r1, lsl #19
   190d0:	cmp	r3, r1, lsl #18
   190d4:	adc	r0, r0, r0
   190d8:	subcs	r3, r3, r1, lsl #18
   190dc:	cmp	r3, r1, lsl #17
   190e0:	adc	r0, r0, r0
   190e4:	subcs	r3, r3, r1, lsl #17
   190e8:	cmp	r3, r1, lsl #16
   190ec:	adc	r0, r0, r0
   190f0:	subcs	r3, r3, r1, lsl #16
   190f4:	cmp	r3, r1, lsl #15
   190f8:	adc	r0, r0, r0
   190fc:	subcs	r3, r3, r1, lsl #15
   19100:	cmp	r3, r1, lsl #14
   19104:	adc	r0, r0, r0
   19108:	subcs	r3, r3, r1, lsl #14
   1910c:	cmp	r3, r1, lsl #13
   19110:	adc	r0, r0, r0
   19114:	subcs	r3, r3, r1, lsl #13
   19118:	cmp	r3, r1, lsl #12
   1911c:	adc	r0, r0, r0
   19120:	subcs	r3, r3, r1, lsl #12
   19124:	cmp	r3, r1, lsl #11
   19128:	adc	r0, r0, r0
   1912c:	subcs	r3, r3, r1, lsl #11
   19130:	cmp	r3, r1, lsl #10
   19134:	adc	r0, r0, r0
   19138:	subcs	r3, r3, r1, lsl #10
   1913c:	cmp	r3, r1, lsl #9
   19140:	adc	r0, r0, r0
   19144:	subcs	r3, r3, r1, lsl #9
   19148:	cmp	r3, r1, lsl #8
   1914c:	adc	r0, r0, r0
   19150:	subcs	r3, r3, r1, lsl #8
   19154:	cmp	r3, r1, lsl #7
   19158:	adc	r0, r0, r0
   1915c:	subcs	r3, r3, r1, lsl #7
   19160:	cmp	r3, r1, lsl #6
   19164:	adc	r0, r0, r0
   19168:	subcs	r3, r3, r1, lsl #6
   1916c:	cmp	r3, r1, lsl #5
   19170:	adc	r0, r0, r0
   19174:	subcs	r3, r3, r1, lsl #5
   19178:	cmp	r3, r1, lsl #4
   1917c:	adc	r0, r0, r0
   19180:	subcs	r3, r3, r1, lsl #4
   19184:	cmp	r3, r1, lsl #3
   19188:	adc	r0, r0, r0
   1918c:	subcs	r3, r3, r1, lsl #3
   19190:	cmp	r3, r1, lsl #2
   19194:	adc	r0, r0, r0
   19198:	subcs	r3, r3, r1, lsl #2
   1919c:	cmp	r3, r1, lsl #1
   191a0:	adc	r0, r0, r0
   191a4:	subcs	r3, r3, r1, lsl #1
   191a8:	cmp	r3, r1
   191ac:	adc	r0, r0, r0
   191b0:	subcs	r3, r3, r1
   191b4:	cmp	ip, #0
   191b8:	rsbmi	r0, r0, #0
   191bc:	bx	lr
   191c0:	teq	ip, r0
   191c4:	rsbmi	r0, r0, #0
   191c8:	bx	lr
   191cc:	movcc	r0, #0
   191d0:	asreq	r0, ip, #31
   191d4:	orreq	r0, r0, #1
   191d8:	bx	lr
   191dc:	clz	r2, r1
   191e0:	rsb	r2, r2, #31
   191e4:	cmp	ip, #0
   191e8:	lsr	r0, r3, r2
   191ec:	rsbmi	r0, r0, #0
   191f0:	bx	lr
   191f4:	cmp	r0, #0
   191f8:	mvngt	r0, #-2147483648	; 0x80000000
   191fc:	movlt	r0, #-2147483648	; 0x80000000
   19200:	b	195e4 <__assert_fail@plt+0x8450>
   19204:	cmp	r1, #0
   19208:	beq	191f4 <__assert_fail@plt+0x8060>
   1920c:	push	{r0, r1, lr}
   19210:	bl	18fec <__assert_fail@plt+0x7e58>
   19214:	pop	{r1, r2, lr}
   19218:	mul	r3, r2, r0
   1921c:	sub	r1, r1, r3
   19220:	bx	lr
   19224:	eor	r1, r1, #-2147483648	; 0x80000000
   19228:	b	19230 <__assert_fail@plt+0x809c>
   1922c:	eor	r3, r3, #-2147483648	; 0x80000000
   19230:	push	{r4, r5, lr}
   19234:	lsl	r4, r1, #1
   19238:	lsl	r5, r3, #1
   1923c:	teq	r4, r5
   19240:	teqeq	r0, r2
   19244:	orrsne	ip, r4, r0
   19248:	orrsne	ip, r5, r2
   1924c:	mvnsne	ip, r4, asr #21
   19250:	mvnsne	ip, r5, asr #21
   19254:	beq	19440 <__assert_fail@plt+0x82ac>
   19258:	lsr	r4, r4, #21
   1925c:	rsbs	r5, r4, r5, lsr #21
   19260:	rsblt	r5, r5, #0
   19264:	ble	19284 <__assert_fail@plt+0x80f0>
   19268:	add	r4, r4, r5
   1926c:	eor	r2, r0, r2
   19270:	eor	r3, r1, r3
   19274:	eor	r0, r2, r0
   19278:	eor	r1, r3, r1
   1927c:	eor	r2, r0, r2
   19280:	eor	r3, r1, r3
   19284:	cmp	r5, #54	; 0x36
   19288:	pophi	{r4, r5, pc}
   1928c:	tst	r1, #-2147483648	; 0x80000000
   19290:	lsl	r1, r1, #12
   19294:	mov	ip, #1048576	; 0x100000
   19298:	orr	r1, ip, r1, lsr #12
   1929c:	beq	192a8 <__assert_fail@plt+0x8114>
   192a0:	rsbs	r0, r0, #0
   192a4:	rsc	r1, r1, #0
   192a8:	tst	r3, #-2147483648	; 0x80000000
   192ac:	lsl	r3, r3, #12
   192b0:	orr	r3, ip, r3, lsr #12
   192b4:	beq	192c0 <__assert_fail@plt+0x812c>
   192b8:	rsbs	r2, r2, #0
   192bc:	rsc	r3, r3, #0
   192c0:	teq	r4, r5
   192c4:	beq	19428 <__assert_fail@plt+0x8294>
   192c8:	sub	r4, r4, #1
   192cc:	rsbs	lr, r5, #32
   192d0:	blt	192ec <__assert_fail@plt+0x8158>
   192d4:	lsl	ip, r2, lr
   192d8:	adds	r0, r0, r2, lsr r5
   192dc:	adc	r1, r1, #0
   192e0:	adds	r0, r0, r3, lsl lr
   192e4:	adcs	r1, r1, r3, asr r5
   192e8:	b	19308 <__assert_fail@plt+0x8174>
   192ec:	sub	r5, r5, #32
   192f0:	add	lr, lr, #32
   192f4:	cmp	r2, #1
   192f8:	lsl	ip, r3, lr
   192fc:	orrcs	ip, ip, #2
   19300:	adds	r0, r0, r3, asr r5
   19304:	adcs	r1, r1, r3, asr #31
   19308:	and	r5, r1, #-2147483648	; 0x80000000
   1930c:	bpl	1931c <__assert_fail@plt+0x8188>
   19310:	rsbs	ip, ip, #0
   19314:	rscs	r0, r0, #0
   19318:	rsc	r1, r1, #0
   1931c:	cmp	r1, #1048576	; 0x100000
   19320:	bcc	19360 <__assert_fail@plt+0x81cc>
   19324:	cmp	r1, #2097152	; 0x200000
   19328:	bcc	19348 <__assert_fail@plt+0x81b4>
   1932c:	lsrs	r1, r1, #1
   19330:	rrxs	r0, r0
   19334:	rrx	ip, ip
   19338:	add	r4, r4, #1
   1933c:	lsl	r2, r4, #21
   19340:	cmn	r2, #4194304	; 0x400000
   19344:	bcs	194a0 <__assert_fail@plt+0x830c>
   19348:	cmp	ip, #-2147483648	; 0x80000000
   1934c:	lsrseq	ip, r0, #1
   19350:	adcs	r0, r0, #0
   19354:	adc	r1, r1, r4, lsl #20
   19358:	orr	r1, r1, r5
   1935c:	pop	{r4, r5, pc}
   19360:	lsls	ip, ip, #1
   19364:	adcs	r0, r0, r0
   19368:	adc	r1, r1, r1
   1936c:	tst	r1, #1048576	; 0x100000
   19370:	sub	r4, r4, #1
   19374:	bne	19348 <__assert_fail@plt+0x81b4>
   19378:	teq	r1, #0
   1937c:	moveq	r1, r0
   19380:	moveq	r0, #0
   19384:	clz	r3, r1
   19388:	addeq	r3, r3, #32
   1938c:	sub	r3, r3, #11
   19390:	subs	r2, r3, #32
   19394:	bge	193b8 <__assert_fail@plt+0x8224>
   19398:	adds	r2, r2, #12
   1939c:	ble	193b4 <__assert_fail@plt+0x8220>
   193a0:	add	ip, r2, #20
   193a4:	rsb	r2, r2, #12
   193a8:	lsl	r0, r1, ip
   193ac:	lsr	r1, r1, r2
   193b0:	b	193c8 <__assert_fail@plt+0x8234>
   193b4:	add	r2, r2, #20
   193b8:	rsble	ip, r2, #32
   193bc:	lsl	r1, r1, r2
   193c0:	orrle	r1, r1, r0, lsr ip
   193c4:	lslle	r0, r0, r2
   193c8:	subs	r4, r4, r3
   193cc:	addge	r1, r1, r4, lsl #20
   193d0:	orrge	r1, r1, r5
   193d4:	popge	{r4, r5, pc}
   193d8:	mvn	r4, r4
   193dc:	subs	r4, r4, #31
   193e0:	bge	1941c <__assert_fail@plt+0x8288>
   193e4:	adds	r4, r4, #12
   193e8:	bgt	19404 <__assert_fail@plt+0x8270>
   193ec:	add	r4, r4, #20
   193f0:	rsb	r2, r4, #32
   193f4:	lsr	r0, r0, r4
   193f8:	orr	r0, r0, r1, lsl r2
   193fc:	orr	r1, r5, r1, lsr r4
   19400:	pop	{r4, r5, pc}
   19404:	rsb	r4, r4, #12
   19408:	rsb	r2, r4, #32
   1940c:	lsr	r0, r0, r2
   19410:	orr	r0, r0, r1, lsl r4
   19414:	mov	r1, r5
   19418:	pop	{r4, r5, pc}
   1941c:	lsr	r0, r1, r4
   19420:	mov	r1, r5
   19424:	pop	{r4, r5, pc}
   19428:	teq	r4, #0
   1942c:	eor	r3, r3, #1048576	; 0x100000
   19430:	eoreq	r1, r1, #1048576	; 0x100000
   19434:	addeq	r4, r4, #1
   19438:	subne	r5, r5, #1
   1943c:	b	192c8 <__assert_fail@plt+0x8134>
   19440:	mvns	ip, r4, asr #21
   19444:	mvnsne	ip, r5, asr #21
   19448:	beq	194b0 <__assert_fail@plt+0x831c>
   1944c:	teq	r4, r5
   19450:	teqeq	r0, r2
   19454:	beq	19468 <__assert_fail@plt+0x82d4>
   19458:	orrs	ip, r4, r0
   1945c:	moveq	r1, r3
   19460:	moveq	r0, r2
   19464:	pop	{r4, r5, pc}
   19468:	teq	r1, r3
   1946c:	movne	r1, #0
   19470:	movne	r0, #0
   19474:	popne	{r4, r5, pc}
   19478:	lsrs	ip, r4, #21
   1947c:	bne	19490 <__assert_fail@plt+0x82fc>
   19480:	lsls	r0, r0, #1
   19484:	adcs	r1, r1, r1
   19488:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1948c:	pop	{r4, r5, pc}
   19490:	adds	r4, r4, #4194304	; 0x400000
   19494:	addcc	r1, r1, #1048576	; 0x100000
   19498:	popcc	{r4, r5, pc}
   1949c:	and	r5, r1, #-2147483648	; 0x80000000
   194a0:	orr	r1, r5, #2130706432	; 0x7f000000
   194a4:	orr	r1, r1, #15728640	; 0xf00000
   194a8:	mov	r0, #0
   194ac:	pop	{r4, r5, pc}
   194b0:	mvns	ip, r4, asr #21
   194b4:	movne	r1, r3
   194b8:	movne	r0, r2
   194bc:	mvnseq	ip, r5, asr #21
   194c0:	movne	r3, r1
   194c4:	movne	r2, r0
   194c8:	orrs	r4, r0, r1, lsl #12
   194cc:	orrseq	r5, r2, r3, lsl #12
   194d0:	teqeq	r1, r3
   194d4:	orrne	r1, r1, #524288	; 0x80000
   194d8:	pop	{r4, r5, pc}
   194dc:	teq	r0, #0
   194e0:	moveq	r1, #0
   194e4:	bxeq	lr
   194e8:	push	{r4, r5, lr}
   194ec:	mov	r4, #1024	; 0x400
   194f0:	add	r4, r4, #50	; 0x32
   194f4:	mov	r5, #0
   194f8:	mov	r1, #0
   194fc:	b	19378 <__assert_fail@plt+0x81e4>
   19500:	teq	r0, #0
   19504:	moveq	r1, #0
   19508:	bxeq	lr
   1950c:	push	{r4, r5, lr}
   19510:	mov	r4, #1024	; 0x400
   19514:	add	r4, r4, #50	; 0x32
   19518:	ands	r5, r0, #-2147483648	; 0x80000000
   1951c:	rsbmi	r0, r0, #0
   19520:	mov	r1, #0
   19524:	b	19378 <__assert_fail@plt+0x81e4>
   19528:	lsls	r2, r0, #1
   1952c:	asr	r1, r2, #3
   19530:	rrx	r1, r1
   19534:	lsl	r0, r2, #28
   19538:	andsne	r3, r2, #-16777216	; 0xff000000
   1953c:	teqne	r3, #-16777216	; 0xff000000
   19540:	eorne	r1, r1, #939524096	; 0x38000000
   19544:	bxne	lr
   19548:	bics	r2, r2, #-16777216	; 0xff000000
   1954c:	bxeq	lr
   19550:	teq	r3, #-16777216	; 0xff000000
   19554:	orreq	r1, r1, #524288	; 0x80000
   19558:	bxeq	lr
   1955c:	push	{r4, r5, lr}
   19560:	mov	r4, #896	; 0x380
   19564:	and	r5, r1, #-2147483648	; 0x80000000
   19568:	bic	r1, r1, #-2147483648	; 0x80000000
   1956c:	b	19378 <__assert_fail@plt+0x81e4>
   19570:	orrs	r2, r0, r1
   19574:	bxeq	lr
   19578:	push	{r4, r5, lr}
   1957c:	mov	r5, #0
   19580:	b	195a0 <__assert_fail@plt+0x840c>
   19584:	orrs	r2, r0, r1
   19588:	bxeq	lr
   1958c:	push	{r4, r5, lr}
   19590:	ands	r5, r1, #-2147483648	; 0x80000000
   19594:	bpl	195a0 <__assert_fail@plt+0x840c>
   19598:	rsbs	r0, r0, #0
   1959c:	rsc	r1, r1, #0
   195a0:	mov	r4, #1024	; 0x400
   195a4:	add	r4, r4, #50	; 0x32
   195a8:	lsrs	ip, r1, #22
   195ac:	beq	1931c <__assert_fail@plt+0x8188>
   195b0:	mov	r2, #3
   195b4:	lsrs	ip, ip, #3
   195b8:	addne	r2, r2, #3
   195bc:	lsrs	ip, ip, #3
   195c0:	addne	r2, r2, #3
   195c4:	add	r2, r2, ip, lsr #3
   195c8:	rsb	r3, r2, #32
   195cc:	lsl	ip, r0, r3
   195d0:	lsr	r0, r0, r2
   195d4:	orr	r0, r0, r1, lsl r3
   195d8:	lsr	r1, r1, r2
   195dc:	add	r4, r4, r2
   195e0:	b	1931c <__assert_fail@plt+0x8188>
   195e4:	push	{r1, lr}
   195e8:	mov	r0, #8
   195ec:	bl	10edc <raise@plt>
   195f0:	pop	{r1, pc}
   195f4:	vmov	d7, r0, r1
   195f8:	vcmpe.f64	d7, #0.0
   195fc:	vmrs	APSR_nzcv, fpscr
   19600:	bmi	19608 <__assert_fail@plt+0x8474>
   19604:	b	19620 <__assert_fail@plt+0x848c>
   19608:	push	{r4, lr}
   1960c:	eor	r1, r1, #-2147483648	; 0x80000000
   19610:	bl	19620 <__assert_fail@plt+0x848c>
   19614:	rsbs	r0, r0, #0
   19618:	rsc	r1, r1, #0
   1961c:	pop	{r4, pc}
   19620:	vmov	d6, r0, r1
   19624:	vldr	d7, [pc, #36]	; 19650 <__assert_fail@plt+0x84bc>
   19628:	vldr	d5, [pc, #40]	; 19658 <__assert_fail@plt+0x84c4>
   1962c:	vmul.f64	d7, d6, d7
   19630:	vcvt.u32.f64	s14, d7
   19634:	vcvt.f64.u32	d4, s14
   19638:	vmov	r1, s14
   1963c:	vmls.f64	d6, d4, d5
   19640:	vcvt.u32.f64	s15, d6
   19644:	vmov	r0, s15
   19648:	bx	lr
   1964c:	nop			; (mov r0, r0)
   19650:	andeq	r0, r0, r0
   19654:	ldclcc	0, cr0, [r0]
   19658:	andeq	r0, r0, r0
   1965c:	mvnsmi	r0, r0
   19660:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19664:	mov	r7, r0
   19668:	ldr	r6, [pc, #72]	; 196b8 <__assert_fail@plt+0x8524>
   1966c:	ldr	r5, [pc, #72]	; 196bc <__assert_fail@plt+0x8528>
   19670:	add	r6, pc, r6
   19674:	add	r5, pc, r5
   19678:	sub	r6, r6, r5
   1967c:	mov	r8, r1
   19680:	mov	r9, r2
   19684:	bl	10ea4 <calloc@plt-0x20>
   19688:	asrs	r6, r6, #2
   1968c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19690:	mov	r4, #0
   19694:	add	r4, r4, #1
   19698:	ldr	r3, [r5], #4
   1969c:	mov	r2, r9
   196a0:	mov	r1, r8
   196a4:	mov	r0, r7
   196a8:	blx	r3
   196ac:	cmp	r6, r4
   196b0:	bne	19694 <__assert_fail@plt+0x8500>
   196b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196b8:	andeq	r2, r1, ip, lsl #17
   196bc:	andeq	r2, r1, r4, lsl #17
   196c0:	bx	lr
   196c4:	ldr	r3, [pc, #12]	; 196d8 <__assert_fail@plt+0x8544>
   196c8:	mov	r1, #0
   196cc:	add	r3, pc, r3
   196d0:	ldr	r2, [r3]
   196d4:	b	110a4 <__cxa_atexit@plt>
   196d8:	andeq	r2, r1, r8, lsr sl

Disassembly of section .fini:

000196dc <.fini>:
   196dc:	push	{r3, lr}
   196e0:	pop	{r3, pc}
