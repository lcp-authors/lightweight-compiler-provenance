
raspbian-preinstalled/convert-dtsv0:     file format elf32-littlearm


Disassembly of section .init:

0001098c <.init>:
   1098c:	push	{r3, lr}
   10990:	bl	10e5c <__assert_fail@plt+0x2dc>
   10994:	pop	{r3, pc}

Disassembly of section .plt:

00010998 <strcmp@plt-0x14>:
   10998:	push	{lr}		; (str lr, [sp, #-4]!)
   1099c:	ldr	lr, [pc, #4]	; 109a8 <strcmp@plt-0x4>
   109a0:	add	lr, pc, lr
   109a4:	ldr	pc, [lr, #8]!
   109a8:	andeq	r5, r1, r8, ror r5

000109ac <strcmp@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #86016	; 0x15000
   109b4:	ldr	pc, [ip, #1400]!	; 0x578

000109b8 <strtol@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #86016	; 0x15000
   109c0:	ldr	pc, [ip, #1392]!	; 0x570

000109c4 <fopen@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #86016	; 0x15000
   109cc:	ldr	pc, [ip, #1384]!	; 0x568

000109d0 <read@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #86016	; 0x15000
   109d8:	ldr	pc, [ip, #1376]!	; 0x560

000109dc <free@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #86016	; 0x15000
   109e4:	ldr	pc, [ip, #1368]!	; 0x558

000109e8 <ferror@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #86016	; 0x15000
   109f0:	ldr	pc, [ip, #1360]!	; 0x550

000109f4 <__vsnprintf_chk@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #86016	; 0x15000
   109fc:	ldr	pc, [ip, #1352]!	; 0x548

00010a00 <memcpy@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #86016	; 0x15000
   10a08:	ldr	pc, [ip, #1344]!	; 0x540

00010a0c <__stack_chk_fail@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #86016	; 0x15000
   10a14:	ldr	pc, [ip, #1336]!	; 0x538

00010a18 <realloc@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #86016	; 0x15000
   10a20:	ldr	pc, [ip, #1328]!	; 0x530

00010a24 <fwrite@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #86016	; 0x15000
   10a2c:	ldr	pc, [ip, #1320]!	; 0x528

00010a30 <fread@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #86016	; 0x15000
   10a38:	ldr	pc, [ip, #1312]!	; 0x520

00010a3c <fnmatch@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #86016	; 0x15000
   10a44:	ldr	pc, [ip, #1304]!	; 0x518

00010a48 <malloc@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #86016	; 0x15000
   10a50:	ldr	pc, [ip, #1296]!	; 0x510

00010a54 <__libc_start_main@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #86016	; 0x15000
   10a5c:	ldr	pc, [ip, #1288]!	; 0x508

00010a60 <strerror@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #86016	; 0x15000
   10a68:	ldr	pc, [ip, #1280]!	; 0x500

00010a6c <__vfprintf_chk@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #86016	; 0x15000
   10a74:	ldr	pc, [ip, #1272]!	; 0x4f8

00010a78 <__gmon_start__@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #86016	; 0x15000
   10a80:	ldr	pc, [ip, #1264]!	; 0x4f0

00010a84 <open@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #86016	; 0x15000
   10a8c:	ldr	pc, [ip, #1256]!	; 0x4e8

00010a90 <getopt_long@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #86016	; 0x15000
   10a98:	ldr	pc, [ip, #1248]!	; 0x4e0

00010a9c <__ctype_b_loc@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #86016	; 0x15000
   10aa4:	ldr	pc, [ip, #1240]!	; 0x4d8

00010aa8 <exit@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #86016	; 0x15000
   10ab0:	ldr	pc, [ip, #1232]!	; 0x4d0

00010ab4 <strlen@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #86016	; 0x15000
   10abc:	ldr	pc, [ip, #1224]!	; 0x4c8

00010ac0 <strchr@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #86016	; 0x15000
   10ac8:	ldr	pc, [ip, #1216]!	; 0x4c0

00010acc <__errno_location@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #86016	; 0x15000
   10ad4:	ldr	pc, [ip, #1208]!	; 0x4b8

00010ad8 <memset@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #86016	; 0x15000
   10ae0:	ldr	pc, [ip, #1200]!	; 0x4b0

00010ae4 <putchar@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #86016	; 0x15000
   10aec:	ldr	pc, [ip, #1192]!	; 0x4a8

00010af0 <strncpy@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #86016	; 0x15000
   10af8:	ldr	pc, [ip, #1184]!	; 0x4a0

00010afc <strtoull@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #86016	; 0x15000
   10b04:	ldr	pc, [ip, #1176]!	; 0x498

00010b08 <__printf_chk@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #86016	; 0x15000
   10b10:	ldr	pc, [ip, #1168]!	; 0x490

00010b14 <write@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #86016	; 0x15000
   10b1c:	ldr	pc, [ip, #1160]!	; 0x488

00010b20 <__fprintf_chk@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #86016	; 0x15000
   10b28:	ldr	pc, [ip, #1152]!	; 0x480

00010b2c <fclose@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #86016	; 0x15000
   10b34:	ldr	pc, [ip, #1144]!	; 0x478

00010b38 <strrchr@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #86016	; 0x15000
   10b40:	ldr	pc, [ip, #1136]!	; 0x470

00010b44 <fputc@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #86016	; 0x15000
   10b4c:	ldr	pc, [ip, #1128]!	; 0x468

00010b50 <clearerr@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #86016	; 0x15000
   10b58:	ldr	pc, [ip, #1120]!	; 0x460

00010b5c <abort@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #86016	; 0x15000
   10b64:	ldr	pc, [ip, #1112]!	; 0x458

00010b68 <getc@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #86016	; 0x15000
   10b70:	ldr	pc, [ip, #1104]!	; 0x450

00010b74 <close@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #86016	; 0x15000
   10b7c:	ldr	pc, [ip, #1096]!	; 0x448

00010b80 <__assert_fail@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #86016	; 0x15000
   10b88:	ldr	pc, [ip, #1088]!	; 0x440

Disassembly of section .text:

00010b8c <.text>:
   10b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b90:	mov	r6, r0
   10b94:	ldr	r4, [pc, #580]	; 10de0 <__assert_fail@plt+0x260>
   10b98:	ldr	r3, [pc, #580]	; 10de4 <__assert_fail@plt+0x264>
   10b9c:	add	r4, pc, r4
   10ba0:	ldr	r7, [pc, #576]	; 10de8 <__assert_fail@plt+0x268>
   10ba4:	ldr	r3, [r4, r3]
   10ba8:	ldr	r8, [pc, #572]	; 10dec <__assert_fail@plt+0x26c>
   10bac:	add	r7, pc, r7
   10bb0:	add	r8, pc, r8
   10bb4:	add	r7, r7, #2144	; 0x860
   10bb8:	sub	sp, sp, #44	; 0x2c
   10bbc:	ldr	r3, [r3]
   10bc0:	mov	r5, r1
   10bc4:	add	r9, r7, #4
   10bc8:	add	sl, r8, #204	; 0xcc
   10bcc:	mov	fp, #0
   10bd0:	str	r3, [sp, #36]	; 0x24
   10bd4:	str	fp, [sp]
   10bd8:	mov	r3, sl
   10bdc:	mov	r2, r9
   10be0:	mov	r1, r5
   10be4:	mov	r0, r6
   10be8:	bl	10a90 <getopt_long@plt>
   10bec:	cmn	r0, #1
   10bf0:	beq	10c4c <__assert_fail@plt+0xcc>
   10bf4:	cmp	r0, #86	; 0x56
   10bf8:	beq	10c48 <__assert_fail@plt+0xc8>
   10bfc:	cmp	r0, #104	; 0x68
   10c00:	beq	10c2c <__assert_fail@plt+0xac>
   10c04:	cmp	r0, #63	; 0x3f
   10c08:	bne	10bd4 <__assert_fail@plt+0x54>
   10c0c:	ldr	r0, [pc, #476]	; 10df0 <__assert_fail@plt+0x270>
   10c10:	add	r8, r8, #252	; 0xfc
   10c14:	str	r8, [sp]
   10c18:	mov	r3, sl
   10c1c:	mov	r2, r9
   10c20:	add	r1, r7, #8
   10c24:	add	r0, pc, r0
   10c28:	bl	121e8 <__assert_fail@plt+0x1668>
   10c2c:	add	r8, r8, #252	; 0xfc
   10c30:	str	r8, [sp]
   10c34:	mov	r3, sl
   10c38:	mov	r2, r9
   10c3c:	add	r1, r7, #8
   10c40:	mov	r0, #0
   10c44:	bl	121e8 <__assert_fail@plt+0x1668>
   10c48:	bl	121bc <__assert_fail@plt+0x163c>
   10c4c:	cmp	r6, #1
   10c50:	ble	10d74 <__assert_fail@plt+0x1f4>
   10c54:	ldr	r3, [pc, #408]	; 10df4 <__assert_fail@plt+0x274>
   10c58:	ldr	r2, [pc, #408]	; 10df8 <__assert_fail@plt+0x278>
   10c5c:	ldr	fp, [pc, #408]	; 10dfc <__assert_fail@plt+0x27c>
   10c60:	add	r2, pc, r2
   10c64:	str	r2, [sp, #12]
   10c68:	ldr	r3, [r4, r3]
   10c6c:	add	fp, pc, fp
   10c70:	str	r3, [sp, #16]
   10c74:	ldr	r3, [pc, #388]	; 10e00 <__assert_fail@plt+0x280>
   10c78:	mov	sl, #1
   10c7c:	add	r3, pc, r3
   10c80:	add	r9, sp, #32
   10c84:	str	r3, [sp, #24]
   10c88:	add	r3, sp, #34	; 0x22
   10c8c:	str	r3, [sp, #20]
   10c90:	str	r6, [sp, #28]
   10c94:	ldr	r0, [sp, #16]
   10c98:	ldr	r3, [r5, #4]!
   10c9c:	mov	r1, #1
   10ca0:	ldr	r2, [sp, #12]
   10ca4:	ldr	r0, [r0]
   10ca8:	bl	10b20 <__fprintf_chk@plt>
   10cac:	ldr	r3, [fp]
   10cb0:	ldr	r2, [sp, #20]
   10cb4:	ldr	r8, [r5]
   10cb8:	strh	r3, [r9]
   10cbc:	mov	r0, r8
   10cc0:	lsr	r3, r3, #16
   10cc4:	strb	r3, [r2]
   10cc8:	bl	10ab4 <strlen@plt>
   10ccc:	mov	r6, r0
   10cd0:	add	r0, r0, #3
   10cd4:	bl	10a48 <malloc@plt>
   10cd8:	subs	r7, r0, #0
   10cdc:	beq	10d94 <__assert_fail@plt+0x214>
   10ce0:	mov	r2, r6
   10ce4:	mov	r1, r8
   10ce8:	bl	10a00 <memcpy@plt>
   10cec:	ldrh	r1, [r9]
   10cf0:	ldrb	r0, [r9, #2]
   10cf4:	add	r2, r7, r6
   10cf8:	strh	r1, [r7, r6]
   10cfc:	strb	r0, [r2, #2]
   10d00:	ldr	r1, [sp, #24]
   10d04:	mov	r0, r8
   10d08:	bl	109c4 <fopen@plt>
   10d0c:	ldr	r3, [pc, #240]	; 10e04 <__assert_fail@plt+0x284>
   10d10:	ldr	r3, [r4, r3]
   10d14:	cmp	r0, #0
   10d18:	str	r0, [r3]
   10d1c:	beq	10dc0 <__assert_fail@plt+0x240>
   10d20:	ldr	r1, [pc, #224]	; 10e08 <__assert_fail@plt+0x288>
   10d24:	mov	r0, r7
   10d28:	add	r1, pc, r1
   10d2c:	bl	109c4 <fopen@plt>
   10d30:	ldr	r3, [pc, #212]	; 10e0c <__assert_fail@plt+0x28c>
   10d34:	ldr	r3, [r4, r3]
   10d38:	cmp	r0, #0
   10d3c:	str	r0, [r3]
   10d40:	beq	10da0 <__assert_fail@plt+0x220>
   10d44:	bl	12dac <__assert_fail@plt+0x222c>
   10d48:	cmp	r0, #0
   10d4c:	bne	10d44 <__assert_fail@plt+0x1c4>
   10d50:	mov	r8, r0
   10d54:	mov	r0, r7
   10d58:	bl	109dc <free@plt>
   10d5c:	ldr	r3, [sp, #28]
   10d60:	add	sl, sl, #1
   10d64:	cmp	r3, sl
   10d68:	bne	10c94 <__assert_fail@plt+0x114>
   10d6c:	mov	r0, r8
   10d70:	bl	10aa8 <exit@plt>
   10d74:	ldr	r0, [pc, #148]	; 10e10 <__assert_fail@plt+0x290>
   10d78:	add	r8, r8, #252	; 0xfc
   10d7c:	str	r8, [sp]
   10d80:	mov	r3, sl
   10d84:	mov	r2, r9
   10d88:	add	r1, r7, #8
   10d8c:	add	r0, pc, r0
   10d90:	bl	121e8 <__assert_fail@plt+0x1668>
   10d94:	ldr	r0, [pc, #120]	; 10e14 <__assert_fail@plt+0x294>
   10d98:	add	r0, pc, r0
   10d9c:	bl	125c8 <__assert_fail@plt+0x1a48>
   10da0:	bl	10acc <__errno_location@plt>
   10da4:	ldr	r0, [r0]
   10da8:	bl	10a60 <strerror@plt>
   10dac:	mov	r1, r7
   10db0:	mov	r2, r0
   10db4:	ldr	r0, [pc, #92]	; 10e18 <__assert_fail@plt+0x298>
   10db8:	add	r0, pc, r0
   10dbc:	bl	125c8 <__assert_fail@plt+0x1a48>
   10dc0:	bl	10acc <__errno_location@plt>
   10dc4:	ldr	r0, [r0]
   10dc8:	bl	10a60 <strerror@plt>
   10dcc:	mov	r1, r8
   10dd0:	mov	r2, r0
   10dd4:	ldr	r0, [pc, #64]	; 10e1c <__assert_fail@plt+0x29c>
   10dd8:	add	r0, pc, r0
   10ddc:	bl	125c8 <__assert_fail@plt+0x1a48>
   10de0:	andeq	r5, r1, ip, ror r3
   10de4:	andeq	r0, r0, ip, lsr #1
   10de8:	andeq	r3, r0, ip, ror #20
   10dec:	andeq	r5, r1, r0, ror #2
   10df0:	andeq	r4, r0, ip, lsr #9
   10df4:	andeq	r0, r0, r8, asr #1
   10df8:	muleq	r0, r4, r4
   10dfc:	andeq	r4, r0, r0, lsl #10
   10e00:	andeq	r4, r0, r0, lsr #9
   10e04:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   10e08:	andeq	r4, r0, ip, lsl r4
   10e0c:	andeq	r0, r0, ip, asr #1
   10e10:	andeq	r4, r0, r4, asr r3
   10e14:	andeq	r3, r0, ip, ror r6
   10e18:	muleq	r0, r0, r3
   10e1c:	andeq	r4, r0, r8, asr #6
   10e20:	mov	fp, #0
   10e24:	mov	lr, #0
   10e28:	pop	{r1}		; (ldr r1, [sp], #4)
   10e2c:	mov	r2, sp
   10e30:	push	{r2}		; (str r2, [sp, #-4]!)
   10e34:	push	{r0}		; (str r0, [sp, #-4]!)
   10e38:	ldr	ip, [pc, #16]	; 10e50 <__assert_fail@plt+0x2d0>
   10e3c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e40:	ldr	r0, [pc, #12]	; 10e54 <__assert_fail@plt+0x2d4>
   10e44:	ldr	r3, [pc, #12]	; 10e58 <__assert_fail@plt+0x2d8>
   10e48:	bl	10a54 <__libc_start_main@plt>
   10e4c:	bl	10b5c <abort@plt>
   10e50:	andeq	r4, r1, r8, lsr #7
   10e54:	andeq	r0, r1, ip, lsl #23
   10e58:	andeq	r4, r1, r8, asr #6
   10e5c:	ldr	r3, [pc, #20]	; 10e78 <__assert_fail@plt+0x2f8>
   10e60:	ldr	r2, [pc, #20]	; 10e7c <__assert_fail@plt+0x2fc>
   10e64:	add	r3, pc, r3
   10e68:	ldr	r2, [r3, r2]
   10e6c:	cmp	r2, #0
   10e70:	bxeq	lr
   10e74:	b	10a78 <__gmon_start__@plt>
   10e78:	strheq	r5, [r1], -r4
   10e7c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10e80:	ldr	r0, [pc, #24]	; 10ea0 <__assert_fail@plt+0x320>
   10e84:	ldr	r3, [pc, #24]	; 10ea4 <__assert_fail@plt+0x324>
   10e88:	cmp	r3, r0
   10e8c:	bxeq	lr
   10e90:	ldr	r3, [pc, #16]	; 10ea8 <__assert_fail@plt+0x328>
   10e94:	cmp	r3, #0
   10e98:	bxeq	lr
   10e9c:	bx	r3
   10ea0:	andeq	r6, r2, r0, lsl r0
   10ea4:	andeq	r6, r2, r0, lsl r0
   10ea8:	andeq	r0, r0, r0
   10eac:	ldr	r0, [pc, #36]	; 10ed8 <__assert_fail@plt+0x358>
   10eb0:	ldr	r1, [pc, #36]	; 10edc <__assert_fail@plt+0x35c>
   10eb4:	sub	r1, r1, r0
   10eb8:	asr	r1, r1, #2
   10ebc:	add	r1, r1, r1, lsr #31
   10ec0:	asrs	r1, r1, #1
   10ec4:	bxeq	lr
   10ec8:	ldr	r3, [pc, #16]	; 10ee0 <__assert_fail@plt+0x360>
   10ecc:	cmp	r3, #0
   10ed0:	bxeq	lr
   10ed4:	bx	r3
   10ed8:	andeq	r6, r2, r0, lsl r0
   10edc:	andeq	r6, r2, r0, lsl r0
   10ee0:	andeq	r0, r0, r0
   10ee4:	push	{r4, lr}
   10ee8:	ldr	r4, [pc, #24]	; 10f08 <__assert_fail@plt+0x388>
   10eec:	ldrb	r3, [r4]
   10ef0:	cmp	r3, #0
   10ef4:	popne	{r4, pc}
   10ef8:	bl	10e80 <__assert_fail@plt+0x300>
   10efc:	mov	r3, #1
   10f00:	strb	r3, [r4]
   10f04:	pop	{r4, pc}
   10f08:	andeq	r6, r2, r0, lsl r0
   10f0c:	b	10eac <__assert_fail@plt+0x32c>
   10f10:	cmp	r0, #0
   10f14:	push	{r4, r5, r6, lr}
   10f18:	mov	r3, r1
   10f1c:	mov	r6, r2
   10f20:	beq	10f30 <__assert_fail@plt+0x3b0>
   10f24:	ldrb	r2, [r1]
   10f28:	cmp	r2, #47	; 0x2f
   10f2c:	bne	10f64 <__assert_fail@plt+0x3e4>
   10f30:	mov	r0, r3
   10f34:	bl	116cc <__assert_fail@plt+0xb4c>
   10f38:	mov	r4, r0
   10f3c:	ldr	r1, [pc, #60]	; 10f80 <__assert_fail@plt+0x400>
   10f40:	mov	r0, r4
   10f44:	add	r1, pc, r1
   10f48:	bl	109c4 <fopen@plt>
   10f4c:	cmp	r0, #0
   10f50:	mov	r5, r0
   10f54:	str	r0, [r6]
   10f58:	beq	10f70 <__assert_fail@plt+0x3f0>
   10f5c:	mov	r0, r4
   10f60:	pop	{r4, r5, r6, pc}
   10f64:	bl	117dc <__assert_fail@plt+0xc5c>
   10f68:	mov	r4, r0
   10f6c:	b	10f3c <__assert_fail@plt+0x3bc>
   10f70:	mov	r0, r4
   10f74:	bl	109dc <free@plt>
   10f78:	mov	r4, r5
   10f7c:	b	10f5c <__assert_fail@plt+0x3dc>
   10f80:	andeq	r3, r0, r8, ror r4
   10f84:	ldr	ip, [pc, #100]	; 10ff0 <__assert_fail@plt+0x470>
   10f88:	push	{r0, r1, r2, r3}
   10f8c:	add	ip, pc, ip
   10f90:	ldr	r2, [pc, #92]	; 10ff4 <__assert_fail@plt+0x474>
   10f94:	push	{lr}		; (str lr, [sp, #-4]!)
   10f98:	sub	sp, sp, #12
   10f9c:	ldr	r2, [ip, r2]
   10fa0:	ldr	r3, [pc, #80]	; 10ff8 <__assert_fail@plt+0x478>
   10fa4:	add	r1, sp, #20
   10fa8:	str	r1, [sp]
   10fac:	ldr	r1, [r2]
   10fb0:	ldr	r0, [pc, #68]	; 10ffc <__assert_fail@plt+0x47c>
   10fb4:	str	r1, [sp, #4]
   10fb8:	ldr	r4, [ip, r3]
   10fbc:	ldr	r5, [sp, #16]
   10fc0:	mov	r2, #13
   10fc4:	mov	r1, #1
   10fc8:	ldr	r3, [r4]
   10fcc:	add	r0, pc, r0
   10fd0:	bl	10a24 <fwrite@plt>
   10fd4:	ldr	r0, [r4]
   10fd8:	mov	r2, r5
   10fdc:	ldr	r3, [sp]
   10fe0:	mov	r1, #1
   10fe4:	bl	10a6c <__vfprintf_chk@plt>
   10fe8:	mov	r0, #1
   10fec:	bl	10aa8 <exit@plt>
   10ff0:	andeq	r4, r1, ip, lsl #31
   10ff4:	andeq	r0, r0, ip, lsr #1
   10ff8:	andeq	r0, r0, r8, asr #1
   10ffc:	strdeq	r3, [r0], -r4
   11000:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11004:	mov	r8, r1
   11008:	ldr	r4, [pc, #320]	; 11150 <__assert_fail@plt+0x5d0>
   1100c:	ldr	r3, [pc, #320]	; 11154 <__assert_fail@plt+0x5d4>
   11010:	add	r4, pc, r4
   11014:	ldr	r1, [pc, #316]	; 11158 <__assert_fail@plt+0x5d8>
   11018:	ldr	r7, [r4, r3]
   1101c:	sub	sp, sp, #8
   11020:	add	r1, pc, r1
   11024:	ldr	r3, [r7]
   11028:	mov	r9, r0
   1102c:	str	r3, [sp, #4]
   11030:	bl	109ac <strcmp@plt>
   11034:	cmp	r0, #0
   11038:	bne	110ac <__assert_fail@plt+0x52c>
   1103c:	ldr	r3, [pc, #280]	; 1115c <__assert_fail@plt+0x5dc>
   11040:	ldr	r0, [pc, #280]	; 11160 <__assert_fail@plt+0x5e0>
   11044:	ldr	r3, [r4, r3]
   11048:	add	r0, pc, r0
   1104c:	ldr	r3, [r3]
   11050:	str	r3, [sp]
   11054:	bl	116cc <__assert_fail@plt+0xb4c>
   11058:	mov	r6, r0
   1105c:	ldr	r3, [pc, #256]	; 11164 <__assert_fail@plt+0x5e4>
   11060:	ldr	r3, [r4, r3]
   11064:	ldr	r0, [r3]
   11068:	cmp	r0, #0
   1106c:	beq	11084 <__assert_fail@plt+0x504>
   11070:	ldr	r2, [pc, #240]	; 11168 <__assert_fail@plt+0x5e8>
   11074:	mov	r3, r6
   11078:	add	r2, pc, r2
   1107c:	mov	r1, #1
   11080:	bl	10b20 <__fprintf_chk@plt>
   11084:	cmp	r8, #0
   11088:	strne	r6, [r8]
   1108c:	beq	11140 <__assert_fail@plt+0x5c0>
   11090:	ldr	r2, [sp, #4]
   11094:	ldr	r3, [r7]
   11098:	ldr	r0, [sp]
   1109c:	cmp	r2, r3
   110a0:	bne	1114c <__assert_fail@plt+0x5cc>
   110a4:	add	sp, sp, #8
   110a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110ac:	ldr	r3, [pc, #184]	; 1116c <__assert_fail@plt+0x5ec>
   110b0:	mov	sl, sp
   110b4:	mov	r2, sl
   110b8:	ldr	r3, [r4, r3]
   110bc:	mov	r1, r9
   110c0:	ldr	r0, [r3]
   110c4:	cmp	r0, #0
   110c8:	ldrne	r0, [r0, #8]
   110cc:	bl	10f10 <__assert_fail@plt+0x390>
   110d0:	ldr	r3, [pc, #152]	; 11170 <__assert_fail@plt+0x5f0>
   110d4:	ldr	r2, [sp]
   110d8:	add	r3, pc, r3
   110dc:	cmp	r2, #0
   110e0:	ldr	r5, [r3]
   110e4:	mov	r6, r0
   110e8:	bne	1105c <__assert_fail@plt+0x4dc>
   110ec:	cmp	r5, #0
   110f0:	beq	11120 <__assert_fail@plt+0x5a0>
   110f4:	ldr	r0, [r5, #4]
   110f8:	mov	r2, sl
   110fc:	mov	r1, r9
   11100:	bl	10f10 <__assert_fail@plt+0x390>
   11104:	ldr	r3, [sp]
   11108:	ldr	r5, [r5]
   1110c:	cmp	r3, #0
   11110:	mov	r6, r0
   11114:	bne	1105c <__assert_fail@plt+0x4dc>
   11118:	cmp	r5, #0
   1111c:	bne	110f4 <__assert_fail@plt+0x574>
   11120:	bl	10acc <__errno_location@plt>
   11124:	ldr	r0, [r0]
   11128:	bl	10a60 <strerror@plt>
   1112c:	mov	r1, r9
   11130:	mov	r2, r0
   11134:	ldr	r0, [pc, #56]	; 11174 <__assert_fail@plt+0x5f4>
   11138:	add	r0, pc, r0
   1113c:	bl	10f84 <__assert_fail@plt+0x404>
   11140:	mov	r0, r6
   11144:	bl	109dc <free@plt>
   11148:	b	11090 <__assert_fail@plt+0x510>
   1114c:	bl	10a0c <__stack_chk_fail@plt>
   11150:	andeq	r4, r1, r8, lsl #30
   11154:	andeq	r0, r0, ip, lsr #1
   11158:			; <UNDEFINED> instruction: 0x000033b0
   1115c:	ldrdeq	r0, [r0], -r4
   11160:	andeq	r3, r0, ip, lsl #7
   11164:	strheq	r0, [r0], -r8
   11168:	andeq	r3, r0, r4, ror #6
   1116c:	strheq	r0, [r0], -ip
   11170:	andeq	r4, r1, r4, lsr pc
   11174:	andeq	r3, r0, r8, lsr #5
   11178:	ldr	r2, [pc, #196]	; 11244 <__assert_fail@plt+0x6c4>
   1117c:	push	{r4, r5, r6, r7, r8, lr}
   11180:	add	r2, pc, r2
   11184:	ldr	r7, [pc, #188]	; 11248 <__assert_fail@plt+0x6c8>
   11188:	ldr	r3, [r2, #4]
   1118c:	add	r7, pc, r7
   11190:	cmp	r3, #99	; 0x63
   11194:	add	r3, r3, #1
   11198:	str	r3, [r2, #4]
   1119c:	bgt	11238 <__assert_fail@plt+0x6b8>
   111a0:	mov	r5, r0
   111a4:	mov	r0, #24
   111a8:	bl	10a48 <malloc@plt>
   111ac:	subs	r4, r0, #0
   111b0:	beq	1122c <__assert_fail@plt+0x6ac>
   111b4:	mov	r0, r5
   111b8:	add	r1, r4, #4
   111bc:	bl	11000 <__assert_fail@plt+0x480>
   111c0:	ldr	r6, [r4, #4]
   111c4:	mov	r1, #47	; 0x2f
   111c8:	str	r0, [r4]
   111cc:	mov	r0, r6
   111d0:	bl	10b38 <strrchr@plt>
   111d4:	subs	r5, r0, #0
   111d8:	beq	11204 <__assert_fail@plt+0x684>
   111dc:	sub	r8, r5, r6
   111e0:	add	r0, r8, #1
   111e4:	bl	10a48 <malloc@plt>
   111e8:	subs	r5, r0, #0
   111ec:	beq	1122c <__assert_fail@plt+0x6ac>
   111f0:	mov	r1, r6
   111f4:	mov	r2, r8
   111f8:	bl	10a00 <memcpy@plt>
   111fc:	mov	r3, #0
   11200:	strb	r3, [r5, r8]
   11204:	ldr	r3, [pc, #64]	; 1124c <__assert_fail@plt+0x6cc>
   11208:	str	r5, [r4, #8]
   1120c:	mov	r2, #1
   11210:	ldr	r3, [r7, r3]
   11214:	str	r2, [r4, #12]
   11218:	str	r2, [r4, #16]
   1121c:	ldr	r2, [r3]
   11220:	str	r4, [r3]
   11224:	str	r2, [r4, #20]
   11228:	pop	{r4, r5, r6, r7, r8, pc}
   1122c:	ldr	r0, [pc, #28]	; 11250 <__assert_fail@plt+0x6d0>
   11230:	add	r0, pc, r0
   11234:	bl	10f84 <__assert_fail@plt+0x404>
   11238:	ldr	r0, [pc, #20]	; 11254 <__assert_fail@plt+0x6d4>
   1123c:	add	r0, pc, r0
   11240:	bl	10f84 <__assert_fail@plt+0x404>
   11244:	andeq	r4, r1, ip, lsl #29
   11248:	andeq	r4, r1, ip, lsl #27
   1124c:	strheq	r0, [r0], -ip
   11250:	andeq	r3, r0, r4, ror #3
   11254:			; <UNDEFINED> instruction: 0x000031bc
   11258:	ldr	r3, [pc, #132]	; 112e4 <__assert_fail@plt+0x764>
   1125c:	ldr	r2, [pc, #132]	; 112e8 <__assert_fail@plt+0x768>
   11260:	add	r3, pc, r3
   11264:	push	{r4, r5, r6, lr}
   11268:	ldr	r5, [r3, r2]
   1126c:	ldr	r4, [r5]
   11270:	cmp	r4, #0
   11274:	beq	112a0 <__assert_fail@plt+0x720>
   11278:	ldr	r3, [r4, #20]
   1127c:	ldr	r0, [r4]
   11280:	str	r3, [r5]
   11284:	bl	10b2c <fclose@plt>
   11288:	cmp	r0, #0
   1128c:	bne	112c0 <__assert_fail@plt+0x740>
   11290:	ldr	r0, [r5]
   11294:	adds	r0, r0, #0
   11298:	movne	r0, #1
   1129c:	pop	{r4, r5, r6, pc}
   112a0:	ldr	r3, [pc, #68]	; 112ec <__assert_fail@plt+0x76c>
   112a4:	ldr	r1, [pc, #68]	; 112f0 <__assert_fail@plt+0x770>
   112a8:	ldr	r0, [pc, #68]	; 112f4 <__assert_fail@plt+0x774>
   112ac:	add	r3, pc, r3
   112b0:	mov	r2, #166	; 0xa6
   112b4:	add	r1, pc, r1
   112b8:	add	r0, pc, r0
   112bc:	bl	10b80 <__assert_fail@plt>
   112c0:	bl	10acc <__errno_location@plt>
   112c4:	ldr	r4, [r4, #4]
   112c8:	ldr	r0, [r0]
   112cc:	bl	10a60 <strerror@plt>
   112d0:	mov	r1, r4
   112d4:	mov	r2, r0
   112d8:	ldr	r0, [pc, #24]	; 112f8 <__assert_fail@plt+0x778>
   112dc:	add	r0, pc, r0
   112e0:	bl	10f84 <__assert_fail@plt+0x404>
   112e4:			; <UNDEFINED> instruction: 0x00014cb8
   112e8:	strheq	r0, [r0], -ip
   112ec:	andeq	r3, r0, r4, lsl #2
   112f0:	andeq	r3, r0, r4, ror r1
   112f4:	andeq	r3, r0, ip, ror r1
   112f8:	andeq	r3, r0, r0, ror #2
   112fc:	push	{r4, r5, r6, lr}
   11300:	mov	r5, r0
   11304:	mov	r0, #8
   11308:	bl	10a48 <malloc@plt>
   1130c:	subs	r4, r0, #0
   11310:	beq	11350 <__assert_fail@plt+0x7d0>
   11314:	mov	r3, #0
   11318:	str	r3, [r4]
   1131c:	mov	r0, r5
   11320:	bl	116cc <__assert_fail@plt+0xb4c>
   11324:	ldr	r2, [pc, #48]	; 1135c <__assert_fail@plt+0x7dc>
   11328:	add	r2, pc, r2
   1132c:	ldr	r3, [r2, #8]
   11330:	cmp	r3, #0
   11334:	streq	r4, [r2]
   11338:	str	r0, [r4, #4]
   1133c:	strne	r4, [r3]
   11340:	ldr	r3, [pc, #24]	; 11360 <__assert_fail@plt+0x7e0>
   11344:	add	r3, pc, r3
   11348:	str	r4, [r3, #8]
   1134c:	pop	{r4, r5, r6, pc}
   11350:	ldr	r0, [pc, #12]	; 11364 <__assert_fail@plt+0x7e4>
   11354:	add	r0, pc, r0
   11358:	bl	10f84 <__assert_fail@plt+0x404>
   1135c:	andeq	r4, r1, r4, ror #25
   11360:	andeq	r4, r1, r8, asr #25
   11364:	andeq	r3, r0, r0, asr #1
   11368:	ldr	r3, [pc, #128]	; 113f0 <__assert_fail@plt+0x870>
   1136c:	ldr	ip, [pc, #128]	; 113f4 <__assert_fail@plt+0x874>
   11370:	add	r3, pc, r3
   11374:	push	{r4, r5, lr}
   11378:	cmp	r2, #0
   1137c:	ldr	r4, [r3, ip]
   11380:	ldr	ip, [r4]
   11384:	str	ip, [r0, #16]
   11388:	ldr	lr, [ip, #12]
   1138c:	ldr	r3, [ip, #16]
   11390:	str	lr, [r0]
   11394:	str	r3, [r0, #4]
   11398:	ble	113e8 <__assert_fail@plt+0x868>
   1139c:	sub	r1, r1, #1
   113a0:	add	r2, r1, r2
   113a4:	mov	r5, #1
   113a8:	ldrb	r3, [r1, #1]!
   113ac:	cmp	r3, #10
   113b0:	addeq	lr, lr, #1
   113b4:	ldrne	r3, [ip, #16]
   113b8:	streq	lr, [ip, #12]
   113bc:	addne	r3, r3, #1
   113c0:	streq	r5, [ip, #16]
   113c4:	strne	r3, [ip, #16]
   113c8:	cmp	r1, r2
   113cc:	bne	113a8 <__assert_fail@plt+0x828>
   113d0:	ldr	r3, [r4]
   113d4:	ldr	r5, [r3, #12]
   113d8:	ldr	r3, [r3, #16]
   113dc:	str	r5, [r0, #8]
   113e0:	str	r3, [r0, #12]
   113e4:	pop	{r4, r5, pc}
   113e8:	mov	r5, lr
   113ec:	b	113dc <__assert_fail@plt+0x85c>
   113f0:	andeq	r4, r1, r8, lsr #23
   113f4:	strheq	r0, [r0], -ip
   113f8:	push	{r4, lr}
   113fc:	mov	r4, r0
   11400:	mov	r0, #20
   11404:	bl	10a48 <malloc@plt>
   11408:	subs	lr, r0, #0
   1140c:	beq	11438 <__assert_fail@plt+0x8b8>
   11410:	ldr	r0, [r4]
   11414:	ldr	r1, [r4, #4]
   11418:	ldr	r2, [r4, #8]
   1141c:	ldr	r3, [r4, #12]
   11420:	mov	ip, lr
   11424:	stmia	ip!, {r0, r1, r2, r3}
   11428:	ldr	r0, [r4, #16]
   1142c:	str	r0, [ip]
   11430:	mov	r0, lr
   11434:	pop	{r4, pc}
   11438:	ldr	r0, [pc, #4]	; 11444 <__assert_fail@plt+0x8c4>
   1143c:	add	r0, pc, r0
   11440:	bl	10f84 <__assert_fail@plt+0x404>
   11444:	ldrdeq	r2, [r0], -r8
   11448:	ldr	r3, [pc, #208]	; 11520 <__assert_fail@plt+0x9a0>
   1144c:	ldr	r2, [pc, #208]	; 11524 <__assert_fail@plt+0x9a4>
   11450:	add	r3, pc, r3
   11454:	push	{r4, lr}
   11458:	sub	sp, sp, #24
   1145c:	ldr	r4, [r3, r2]
   11460:	ldr	r3, [r0, #16]
   11464:	ldr	r2, [r4]
   11468:	cmp	r3, #0
   1146c:	str	r2, [sp, #20]
   11470:	beq	114f8 <__assert_fail@plt+0x978>
   11474:	ldr	r2, [r3, #4]
   11478:	cmp	r2, #0
   1147c:	beq	114d0 <__assert_fail@plt+0x950>
   11480:	ldmib	r0, {r1, ip}
   11484:	ldr	r3, [r0]
   11488:	ldr	r0, [r0, #12]
   1148c:	cmp	r3, ip
   11490:	bne	114dc <__assert_fail@plt+0x95c>
   11494:	cmp	r1, r0
   11498:	beq	11504 <__assert_fail@plt+0x984>
   1149c:	str	r1, [sp]
   114a0:	ldr	r1, [pc, #128]	; 11528 <__assert_fail@plt+0x9a8>
   114a4:	str	r0, [sp, #4]
   114a8:	add	r1, pc, r1
   114ac:	add	r0, sp, #16
   114b0:	bl	11710 <__assert_fail@plt+0xb90>
   114b4:	ldr	r2, [sp, #20]
   114b8:	ldr	r3, [r4]
   114bc:	ldr	r0, [sp, #16]
   114c0:	cmp	r2, r3
   114c4:	bne	1151c <__assert_fail@plt+0x99c>
   114c8:	add	sp, sp, #24
   114cc:	pop	{r4, pc}
   114d0:	ldr	r2, [pc, #84]	; 1152c <__assert_fail@plt+0x9ac>
   114d4:	add	r2, pc, r2
   114d8:	b	11480 <__assert_fail@plt+0x900>
   114dc:	stm	sp, {r1, ip}
   114e0:	ldr	r1, [pc, #72]	; 11530 <__assert_fail@plt+0x9b0>
   114e4:	str	r0, [sp, #8]
   114e8:	add	r1, pc, r1
   114ec:	add	r0, sp, #16
   114f0:	bl	11710 <__assert_fail@plt+0xb90>
   114f4:	b	114b4 <__assert_fail@plt+0x934>
   114f8:	ldr	r2, [pc, #52]	; 11534 <__assert_fail@plt+0x9b4>
   114fc:	add	r2, pc, r2
   11500:	b	11480 <__assert_fail@plt+0x900>
   11504:	str	r1, [sp]
   11508:	ldr	r1, [pc, #40]	; 11538 <__assert_fail@plt+0x9b8>
   1150c:	add	r0, sp, #16
   11510:	add	r1, pc, r1
   11514:	bl	11710 <__assert_fail@plt+0xb90>
   11518:	b	114b4 <__assert_fail@plt+0x934>
   1151c:	bl	10a0c <__stack_chk_fail@plt>
   11520:	andeq	r4, r1, r8, asr #21
   11524:	andeq	r0, r0, ip, lsr #1
   11528:	andeq	r2, r0, r8, asr #31
   1152c:	andeq	r2, r0, r0, lsl #31
   11530:	andeq	r2, r0, r8, ror pc
   11534:	andeq	r2, r0, r8, asr pc
   11538:	andeq	r2, r0, ip, ror #30
   1153c:	push	{r4, r5, r6, r7, r8, lr}
   11540:	sub	sp, sp, #8
   11544:	mov	r8, r1
   11548:	mov	r6, r2
   1154c:	mov	r7, r3
   11550:	bl	11448 <__assert_fail@plt+0x8c8>
   11554:	ldr	r4, [pc, #92]	; 115b8 <__assert_fail@plt+0xa38>
   11558:	ldr	r2, [pc, #92]	; 115bc <__assert_fail@plt+0xa3c>
   1155c:	add	r4, pc, r4
   11560:	mov	ip, r4
   11564:	mov	r3, r8
   11568:	add	r2, pc, r2
   1156c:	mov	r1, #1
   11570:	mov	r5, r0
   11574:	ldr	r0, [pc, #68]	; 115c0 <__assert_fail@plt+0xa40>
   11578:	ldr	r4, [r4, r0]
   1157c:	str	r5, [sp]
   11580:	ldr	r0, [r4]
   11584:	bl	10b20 <__fprintf_chk@plt>
   11588:	mov	r3, r7
   1158c:	mov	r2, r6
   11590:	ldr	r0, [r4]
   11594:	mov	r1, #1
   11598:	bl	10a6c <__vfprintf_chk@plt>
   1159c:	ldr	r1, [r4]
   115a0:	mov	r0, #10
   115a4:	bl	10b44 <fputc@plt>
   115a8:	mov	r0, r5
   115ac:	add	sp, sp, #8
   115b0:	pop	{r4, r5, r6, r7, r8, lr}
   115b4:	b	109dc <free@plt>
   115b8:			; <UNDEFINED> instruction: 0x000149bc
   115bc:	andeq	r2, r0, r0, lsr #30
   115c0:	andeq	r0, r0, r8, asr #1
   115c4:	push	{r2, r3}
   115c8:	ldr	r2, [pc, #80]	; 11620 <__assert_fail@plt+0xaa0>
   115cc:	ldr	ip, [pc, #80]	; 11624 <__assert_fail@plt+0xaa4>
   115d0:	add	r2, pc, r2
   115d4:	push	{r4, lr}
   115d8:	sub	sp, sp, #8
   115dc:	ldr	r4, [r2, ip]
   115e0:	add	lr, sp, #20
   115e4:	mov	r3, lr
   115e8:	ldr	ip, [r4]
   115ec:	ldr	r2, [sp, #16]
   115f0:	str	lr, [sp]
   115f4:	str	ip, [sp, #4]
   115f8:	bl	1153c <__assert_fail@plt+0x9bc>
   115fc:	ldr	r2, [sp, #4]
   11600:	ldr	r3, [r4]
   11604:	cmp	r2, r3
   11608:	bne	1161c <__assert_fail@plt+0xa9c>
   1160c:	add	sp, sp, #8
   11610:	pop	{r4, lr}
   11614:	add	sp, sp, #8
   11618:	bx	lr
   1161c:	bl	10a0c <__stack_chk_fail@plt>
   11620:	andeq	r4, r1, r8, asr #18
   11624:	andeq	r0, r0, ip, lsr #1
   11628:	ldr	r3, [pc, #24]	; 11648 <__assert_fail@plt+0xac8>
   1162c:	ldr	r2, [pc, #24]	; 1164c <__assert_fail@plt+0xacc>
   11630:	add	r3, pc, r3
   11634:	ldr	r3, [r3, r2]
   11638:	ldr	r3, [r3]
   1163c:	str	r0, [r3, #4]
   11640:	str	r1, [r3, #12]
   11644:	bx	lr
   11648:	andeq	r4, r1, r8, ror #17
   1164c:	strheq	r0, [r0], -ip
   11650:	ldr	ip, [pc, #100]	; 116bc <__assert_fail@plt+0xb3c>
   11654:	push	{r0, r1, r2, r3}
   11658:	add	ip, pc, ip
   1165c:	ldr	r2, [pc, #92]	; 116c0 <__assert_fail@plt+0xb40>
   11660:	push	{lr}		; (str lr, [sp, #-4]!)
   11664:	sub	sp, sp, #12
   11668:	ldr	r2, [ip, r2]
   1166c:	ldr	r3, [pc, #80]	; 116c4 <__assert_fail@plt+0xb44>
   11670:	add	r1, sp, #20
   11674:	str	r1, [sp]
   11678:	ldr	r1, [r2]
   1167c:	ldr	r0, [pc, #68]	; 116c8 <__assert_fail@plt+0xb48>
   11680:	str	r1, [sp, #4]
   11684:	ldr	r4, [ip, r3]
   11688:	ldr	r5, [sp, #16]
   1168c:	mov	r2, #13
   11690:	mov	r1, #1
   11694:	ldr	r3, [r4]
   11698:	add	r0, pc, r0
   1169c:	bl	10a24 <fwrite@plt>
   116a0:	ldr	r0, [r4]
   116a4:	mov	r2, r5
   116a8:	ldr	r3, [sp]
   116ac:	mov	r1, #1
   116b0:	bl	10a6c <__vfprintf_chk@plt>
   116b4:	mov	r0, #1
   116b8:	bl	10aa8 <exit@plt>
   116bc:	andeq	r4, r1, r0, asr #17
   116c0:	andeq	r0, r0, ip, lsr #1
   116c4:	andeq	r0, r0, r8, asr #1
   116c8:	andeq	r2, r0, r8, lsr #26
   116cc:	push	{r4, r5, r6, lr}
   116d0:	mov	r6, r0
   116d4:	bl	10ab4 <strlen@plt>
   116d8:	add	r4, r0, #1
   116dc:	mov	r0, r4
   116e0:	bl	10a48 <malloc@plt>
   116e4:	subs	r5, r0, #0
   116e8:	beq	11700 <__assert_fail@plt+0xb80>
   116ec:	mov	r2, r4
   116f0:	mov	r1, r6
   116f4:	bl	10a00 <memcpy@plt>
   116f8:	mov	r0, r5
   116fc:	pop	{r4, r5, r6, pc}
   11700:	ldr	r0, [pc, #4]	; 1170c <__assert_fail@plt+0xb8c>
   11704:	add	r0, pc, r0
   11708:	bl	11650 <__assert_fail@plt+0xad0>
   1170c:	andeq	r2, r0, r0, lsl sp
   11710:	push	{r1, r2, r3}
   11714:	ldr	r3, [pc, #180]	; 117d0 <__assert_fail@plt+0xc50>
   11718:	ldr	r2, [pc, #180]	; 117d4 <__assert_fail@plt+0xc54>
   1171c:	add	r3, pc, r3
   11720:	push	{r4, r5, r6, r7, r8, r9, lr}
   11724:	sub	sp, sp, #16
   11728:	ldr	r9, [r3, r2]
   1172c:	ldr	r7, [sp, #44]	; 0x2c
   11730:	mov	r8, r0
   11734:	ldr	r2, [r9]
   11738:	mov	r5, #0
   1173c:	mov	r4, #128	; 0x80
   11740:	add	r6, sp, #48	; 0x30
   11744:	str	r2, [sp, #12]
   11748:	b	11758 <__assert_fail@plt+0xbd8>
   1174c:	cmp	r0, #0
   11750:	addge	r4, r0, #1
   11754:	lsllt	r4, r4, #1
   11758:	mov	r0, r5
   1175c:	mov	r1, r4
   11760:	bl	10a18 <realloc@plt>
   11764:	subs	r5, r0, #0
   11768:	beq	117bc <__assert_fail@plt+0xc3c>
   1176c:	str	r6, [sp, #4]
   11770:	str	r7, [sp]
   11774:	mvn	r3, #0
   11778:	mov	r2, #1
   1177c:	mov	r1, r4
   11780:	str	r6, [sp, #8]
   11784:	bl	109f4 <__vsnprintf_chk@plt>
   11788:	cmp	r4, r0
   1178c:	bls	1174c <__assert_fail@plt+0xbcc>
   11790:	str	r5, [r8]
   11794:	mov	r0, r5
   11798:	bl	10ab4 <strlen@plt>
   1179c:	ldr	r2, [sp, #12]
   117a0:	ldr	r3, [r9]
   117a4:	cmp	r2, r3
   117a8:	bne	117cc <__assert_fail@plt+0xc4c>
   117ac:	add	sp, sp, #16
   117b0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   117b4:	add	sp, sp, #12
   117b8:	bx	lr
   117bc:	ldr	r0, [pc, #20]	; 117d8 <__assert_fail@plt+0xc58>
   117c0:	mov	r1, r4
   117c4:	add	r0, pc, r0
   117c8:	bl	11650 <__assert_fail@plt+0xad0>
   117cc:	bl	10a0c <__stack_chk_fail@plt>
   117d0:	strdeq	r4, [r1], -ip
   117d4:	andeq	r0, r0, ip, lsr #1
   117d8:	andeq	r2, r0, r8, ror #25
   117dc:	push	{r4, r5, r6, r7, r8, lr}
   117e0:	mov	r6, r1
   117e4:	mov	r8, r0
   117e8:	bl	10ab4 <strlen@plt>
   117ec:	mov	r4, r0
   117f0:	mov	r0, r6
   117f4:	bl	10ab4 <strlen@plt>
   117f8:	cmp	r4, #0
   117fc:	add	r3, r4, r0
   11800:	mov	r7, r0
   11804:	add	r0, r3, #2
   11808:	beq	1181c <__assert_fail@plt+0xc9c>
   1180c:	add	r2, r8, r4
   11810:	ldrb	r2, [r2, #-1]
   11814:	cmp	r2, #47	; 0x2f
   11818:	beq	11864 <__assert_fail@plt+0xce4>
   1181c:	bl	10a48 <malloc@plt>
   11820:	subs	r5, r0, #0
   11824:	beq	11858 <__assert_fail@plt+0xcd8>
   11828:	mov	r2, r4
   1182c:	mov	r1, r8
   11830:	bl	10a00 <memcpy@plt>
   11834:	mov	r3, #47	; 0x2f
   11838:	strb	r3, [r5, r4]
   1183c:	add	r4, r4, #1
   11840:	add	r2, r7, #1
   11844:	mov	r1, r6
   11848:	add	r0, r5, r4
   1184c:	bl	10a00 <memcpy@plt>
   11850:	mov	r0, r5
   11854:	pop	{r4, r5, r6, r7, r8, pc}
   11858:	ldr	r0, [pc, #36]	; 11884 <__assert_fail@plt+0xd04>
   1185c:	add	r0, pc, r0
   11860:	bl	11650 <__assert_fail@plt+0xad0>
   11864:	add	r0, r3, #1
   11868:	bl	10a48 <malloc@plt>
   1186c:	subs	r5, r0, #0
   11870:	beq	11858 <__assert_fail@plt+0xcd8>
   11874:	mov	r1, r8
   11878:	mov	r2, r4
   1187c:	bl	10a00 <memcpy@plt>
   11880:	b	11840 <__assert_fail@plt+0xcc0>
   11884:			; <UNDEFINED> instruction: 0x00002bb8
   11888:	cmp	r1, #0
   1188c:	beq	11928 <__assert_fail@plt+0xda8>
   11890:	push	{r4, r5, r6, r7, r8, lr}
   11894:	add	r8, r0, r1
   11898:	mov	r7, r0
   1189c:	ldrb	r3, [r8, #-1]
   118a0:	cmp	r3, #0
   118a4:	bne	11920 <__assert_fail@plt+0xda0>
   118a8:	cmp	r0, r8
   118ac:	bcs	11918 <__assert_fail@plt+0xd98>
   118b0:	mov	r5, r7
   118b4:	mov	r6, r5
   118b8:	ldrb	r4, [r5], #1
   118bc:	cmp	r4, #0
   118c0:	beq	118ec <__assert_fail@plt+0xd6c>
   118c4:	bl	10a9c <__ctype_b_loc@plt>
   118c8:	lsl	r4, r4, #1
   118cc:	ldr	r3, [r0]
   118d0:	ldrh	r0, [r3, r4]
   118d4:	ands	r0, r0, #16384	; 0x4000
   118d8:	popeq	{r4, r5, r6, r7, r8, pc}
   118dc:	cmp	r8, r5
   118e0:	bhi	118b4 <__assert_fail@plt+0xd34>
   118e4:	ldrb	r4, [r6, #1]
   118e8:	mov	r6, r5
   118ec:	cmp	r4, #0
   118f0:	sub	r7, r6, r7
   118f4:	clz	r7, r7
   118f8:	lsr	r7, r7, #5
   118fc:	moveq	r4, r7
   11900:	movne	r4, #1
   11904:	cmp	r4, #0
   11908:	bne	11920 <__assert_fail@plt+0xda0>
   1190c:	add	r7, r6, #1
   11910:	cmp	r8, r7
   11914:	bhi	118b0 <__assert_fail@plt+0xd30>
   11918:	mov	r0, #1
   1191c:	pop	{r4, r5, r6, r7, r8, pc}
   11920:	mov	r0, #0
   11924:	pop	{r4, r5, r6, r7, r8, pc}
   11928:	mov	r0, r1
   1192c:	bx	lr
   11930:	ldr	r3, [pc, #616]	; 11ba0 <__assert_fail@plt+0x1020>
   11934:	ldr	r2, [pc, #616]	; 11ba4 <__assert_fail@plt+0x1024>
   11938:	push	{r4, r5, r6, r7, r8, lr}
   1193c:	add	r3, pc, r3
   11940:	ldr	r4, [r1]
   11944:	ldr	r6, [r3, r2]
   11948:	mov	ip, r0
   1194c:	ldrb	r0, [r0, r4]
   11950:	sub	sp, sp, #16
   11954:	ldr	r2, [r6]
   11958:	sub	r3, r0, #48	; 0x30
   1195c:	mov	r5, r1
   11960:	str	r2, [sp, #12]
   11964:	add	r1, ip, r4
   11968:	add	r7, r4, #1
   1196c:	cmp	r3, #72	; 0x48
   11970:	addls	pc, pc, r3, lsl #2
   11974:	b	11aa0 <__assert_fail@plt+0xf20>
   11978:	b	11b3c <__assert_fail@plt+0xfbc>
   1197c:	b	11b3c <__assert_fail@plt+0xfbc>
   11980:	b	11b3c <__assert_fail@plt+0xfbc>
   11984:	b	11b3c <__assert_fail@plt+0xfbc>
   11988:	b	11b3c <__assert_fail@plt+0xfbc>
   1198c:	b	11b3c <__assert_fail@plt+0xfbc>
   11990:	b	11b3c <__assert_fail@plt+0xfbc>
   11994:	b	11b3c <__assert_fail@plt+0xfbc>
   11998:	b	11aa0 <__assert_fail@plt+0xf20>
   1199c:	b	11aa0 <__assert_fail@plt+0xf20>
   119a0:	b	11aa0 <__assert_fail@plt+0xf20>
   119a4:	b	11aa0 <__assert_fail@plt+0xf20>
   119a8:	b	11aa0 <__assert_fail@plt+0xf20>
   119ac:	b	11aa0 <__assert_fail@plt+0xf20>
   119b0:	b	11aa0 <__assert_fail@plt+0xf20>
   119b4:	b	11aa0 <__assert_fail@plt+0xf20>
   119b8:	b	11aa0 <__assert_fail@plt+0xf20>
   119bc:	b	11aa0 <__assert_fail@plt+0xf20>
   119c0:	b	11aa0 <__assert_fail@plt+0xf20>
   119c4:	b	11aa0 <__assert_fail@plt+0xf20>
   119c8:	b	11aa0 <__assert_fail@plt+0xf20>
   119cc:	b	11aa0 <__assert_fail@plt+0xf20>
   119d0:	b	11aa0 <__assert_fail@plt+0xf20>
   119d4:	b	11aa0 <__assert_fail@plt+0xf20>
   119d8:	b	11aa0 <__assert_fail@plt+0xf20>
   119dc:	b	11aa0 <__assert_fail@plt+0xf20>
   119e0:	b	11aa0 <__assert_fail@plt+0xf20>
   119e4:	b	11aa0 <__assert_fail@plt+0xf20>
   119e8:	b	11aa0 <__assert_fail@plt+0xf20>
   119ec:	b	11aa0 <__assert_fail@plt+0xf20>
   119f0:	b	11aa0 <__assert_fail@plt+0xf20>
   119f4:	b	11aa0 <__assert_fail@plt+0xf20>
   119f8:	b	11aa0 <__assert_fail@plt+0xf20>
   119fc:	b	11aa0 <__assert_fail@plt+0xf20>
   11a00:	b	11aa0 <__assert_fail@plt+0xf20>
   11a04:	b	11aa0 <__assert_fail@plt+0xf20>
   11a08:	b	11aa0 <__assert_fail@plt+0xf20>
   11a0c:	b	11aa0 <__assert_fail@plt+0xf20>
   11a10:	b	11aa0 <__assert_fail@plt+0xf20>
   11a14:	b	11aa0 <__assert_fail@plt+0xf20>
   11a18:	b	11aa0 <__assert_fail@plt+0xf20>
   11a1c:	b	11aa0 <__assert_fail@plt+0xf20>
   11a20:	b	11aa0 <__assert_fail@plt+0xf20>
   11a24:	b	11aa0 <__assert_fail@plt+0xf20>
   11a28:	b	11aa0 <__assert_fail@plt+0xf20>
   11a2c:	b	11aa0 <__assert_fail@plt+0xf20>
   11a30:	b	11aa0 <__assert_fail@plt+0xf20>
   11a34:	b	11aa0 <__assert_fail@plt+0xf20>
   11a38:	b	11aa0 <__assert_fail@plt+0xf20>
   11a3c:	b	11a9c <__assert_fail@plt+0xf1c>
   11a40:	b	11abc <__assert_fail@plt+0xf3c>
   11a44:	b	11aa0 <__assert_fail@plt+0xf20>
   11a48:	b	11aa0 <__assert_fail@plt+0xf20>
   11a4c:	b	11aa0 <__assert_fail@plt+0xf20>
   11a50:	b	11ac4 <__assert_fail@plt+0xf44>
   11a54:	b	11aa0 <__assert_fail@plt+0xf20>
   11a58:	b	11aa0 <__assert_fail@plt+0xf20>
   11a5c:	b	11aa0 <__assert_fail@plt+0xf20>
   11a60:	b	11aa0 <__assert_fail@plt+0xf20>
   11a64:	b	11aa0 <__assert_fail@plt+0xf20>
   11a68:	b	11aa0 <__assert_fail@plt+0xf20>
   11a6c:	b	11aa0 <__assert_fail@plt+0xf20>
   11a70:	b	11acc <__assert_fail@plt+0xf4c>
   11a74:	b	11aa0 <__assert_fail@plt+0xf20>
   11a78:	b	11aa0 <__assert_fail@plt+0xf20>
   11a7c:	b	11aa0 <__assert_fail@plt+0xf20>
   11a80:	b	11ad4 <__assert_fail@plt+0xf54>
   11a84:	b	11aa0 <__assert_fail@plt+0xf20>
   11a88:	b	11adc <__assert_fail@plt+0xf5c>
   11a8c:	b	11aa0 <__assert_fail@plt+0xf20>
   11a90:	b	11ae4 <__assert_fail@plt+0xf64>
   11a94:	b	11aa0 <__assert_fail@plt+0xf20>
   11a98:	b	11aec <__assert_fail@plt+0xf6c>
   11a9c:	mov	r0, #7
   11aa0:	ldr	r2, [sp, #12]
   11aa4:	ldr	r3, [r6]
   11aa8:	str	r7, [r5]
   11aac:	cmp	r2, r3
   11ab0:	bne	11b9c <__assert_fail@plt+0x101c>
   11ab4:	add	sp, sp, #16
   11ab8:	pop	{r4, r5, r6, r7, r8, pc}
   11abc:	mov	r0, #8
   11ac0:	b	11aa0 <__assert_fail@plt+0xf20>
   11ac4:	mov	r0, #12
   11ac8:	b	11aa0 <__assert_fail@plt+0xf20>
   11acc:	mov	r0, #10
   11ad0:	b	11aa0 <__assert_fail@plt+0xf20>
   11ad4:	mov	r0, #13
   11ad8:	b	11aa0 <__assert_fail@plt+0xf20>
   11adc:	mov	r0, #9
   11ae0:	b	11aa0 <__assert_fail@plt+0xf20>
   11ae4:	mov	r0, #11
   11ae8:	b	11aa0 <__assert_fail@plt+0xf20>
   11aec:	add	r4, sp, #8
   11af0:	add	r1, ip, r7
   11af4:	mov	r3, #0
   11af8:	mov	r2, #2
   11afc:	mov	r0, r4
   11b00:	strb	r3, [sp, #10]
   11b04:	bl	10af0 <strncpy@plt>
   11b08:	mov	r0, r4
   11b0c:	mov	r2, #16
   11b10:	add	r1, sp, #4
   11b14:	bl	109b8 <strtol@plt>
   11b18:	ldr	r3, [sp, #4]
   11b1c:	cmp	r3, r4
   11b20:	subhi	r3, r3, r4
   11b24:	addhi	r7, r7, r3
   11b28:	uxtbhi	r0, r0
   11b2c:	bhi	11aa0 <__assert_fail@plt+0xf20>
   11b30:	ldr	r0, [pc, #112]	; 11ba8 <__assert_fail@plt+0x1028>
   11b34:	add	r0, pc, r0
   11b38:	bl	11650 <__assert_fail@plt+0xad0>
   11b3c:	add	r8, sp, #8
   11b40:	mov	r3, #0
   11b44:	mov	r2, #3
   11b48:	mov	r0, r8
   11b4c:	strb	r3, [sp, #11]
   11b50:	bl	10af0 <strncpy@plt>
   11b54:	mov	r0, r8
   11b58:	mov	r2, #8
   11b5c:	add	r1, sp, #4
   11b60:	bl	109b8 <strtol@plt>
   11b64:	ldr	r7, [sp, #4]
   11b68:	cmp	r7, r8
   11b6c:	subhi	r7, r7, r8
   11b70:	addhi	r7, r7, r4
   11b74:	uxtbhi	r0, r0
   11b78:	bhi	11aa0 <__assert_fail@plt+0xf20>
   11b7c:	ldr	r3, [pc, #40]	; 11bac <__assert_fail@plt+0x102c>
   11b80:	ldr	r1, [pc, #40]	; 11bb0 <__assert_fail@plt+0x1030>
   11b84:	ldr	r0, [pc, #40]	; 11bb4 <__assert_fail@plt+0x1034>
   11b88:	add	r3, pc, r3
   11b8c:	mov	r2, #150	; 0x96
   11b90:	add	r1, pc, r1
   11b94:	add	r0, pc, r0
   11b98:	bl	10b80 <__assert_fail@plt>
   11b9c:	bl	10a0c <__stack_chk_fail@plt>
   11ba0:	ldrdeq	r4, [r1], -ip
   11ba4:	andeq	r0, r0, ip, lsr #1
   11ba8:	andeq	r2, r0, r8, lsr #19
   11bac:	andeq	r2, r0, r8, lsl #18
   11bb0:	andeq	r2, r0, r8, lsr r9
   11bb4:	andeq	r2, r0, ip, lsr r9
   11bb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bbc:	mov	r4, #0
   11bc0:	str	r4, [r1]
   11bc4:	mov	r8, r1
   11bc8:	ldr	r1, [pc, #240]	; 11cc0 <__assert_fail@plt+0x1140>
   11bcc:	mov	r9, r2
   11bd0:	add	r1, pc, r1
   11bd4:	mov	r5, r0
   11bd8:	bl	109ac <strcmp@plt>
   11bdc:	subs	r7, r0, #0
   11be0:	beq	11bf8 <__assert_fail@plt+0x1078>
   11be4:	mov	r1, r4
   11be8:	mov	r0, r5
   11bec:	bl	10a84 <open@plt>
   11bf0:	subs	r7, r0, #0
   11bf4:	blt	11ca4 <__assert_fail@plt+0x1124>
   11bf8:	mov	r0, #1024	; 0x400
   11bfc:	bl	10a48 <malloc@plt>
   11c00:	subs	r6, r0, #0
   11c04:	movne	r4, #0
   11c08:	movne	r5, #1024	; 0x400
   11c0c:	beq	11cb4 <__assert_fail@plt+0x1134>
   11c10:	sub	r2, r5, r4
   11c14:	add	r1, r6, r4
   11c18:	mov	r0, r7
   11c1c:	bl	109d0 <read@plt>
   11c20:	cmp	r0, #0
   11c24:	blt	11c60 <__assert_fail@plt+0x10e0>
   11c28:	add	r4, r4, r0
   11c2c:	beq	11c90 <__assert_fail@plt+0x1110>
   11c30:	cmp	r5, r4
   11c34:	bne	11c10 <__assert_fail@plt+0x1090>
   11c38:	lsl	r5, r5, #1
   11c3c:	mov	r0, r6
   11c40:	mov	r1, r5
   11c44:	bl	10a18 <realloc@plt>
   11c48:	subs	r6, r0, #0
   11c4c:	bne	11c10 <__assert_fail@plt+0x1090>
   11c50:	ldr	r0, [pc, #108]	; 11cc4 <__assert_fail@plt+0x1144>
   11c54:	mov	r1, r5
   11c58:	add	r0, pc, r0
   11c5c:	bl	11650 <__assert_fail@plt+0xad0>
   11c60:	bl	10acc <__errno_location@plt>
   11c64:	ldr	r4, [r0]
   11c68:	mov	r0, r7
   11c6c:	bl	10b74 <close@plt>
   11c70:	cmp	r4, #0
   11c74:	beq	11c98 <__assert_fail@plt+0x1118>
   11c78:	mov	r0, r6
   11c7c:	bl	109dc <free@plt>
   11c80:	cmp	r9, #0
   11c84:	strne	r5, [r9]
   11c88:	mov	r0, r4
   11c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c90:	mov	r0, r7
   11c94:	bl	10b74 <close@plt>
   11c98:	mov	r4, #0
   11c9c:	str	r6, [r8]
   11ca0:	b	11c80 <__assert_fail@plt+0x1100>
   11ca4:	bl	10acc <__errno_location@plt>
   11ca8:	ldr	r4, [r0]
   11cac:	mov	r0, r4
   11cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cb4:	ldr	r0, [pc, #12]	; 11cc8 <__assert_fail@plt+0x1148>
   11cb8:	add	r0, pc, r0
   11cbc:	bl	11650 <__assert_fail@plt+0xad0>
   11cc0:	andeq	r2, r0, r0, lsl #16
   11cc4:	andeq	r2, r0, r4, asr r8
   11cc8:	andeq	r2, r0, ip, asr r7
   11ccc:	push	{r4, r5, r6, lr}
   11cd0:	sub	sp, sp, #16
   11cd4:	ldr	r4, [pc, #124]	; 11d58 <__assert_fail@plt+0x11d8>
   11cd8:	ldr	r3, [pc, #124]	; 11d5c <__assert_fail@plt+0x11dc>
   11cdc:	add	r4, pc, r4
   11ce0:	mov	r2, r1
   11ce4:	ldr	r5, [r4, r3]
   11ce8:	add	r1, sp, #8
   11cec:	mov	r6, r0
   11cf0:	ldr	r3, [r5]
   11cf4:	str	r3, [sp, #12]
   11cf8:	bl	11bb8 <__assert_fail@plt+0x1038>
   11cfc:	cmp	r0, #0
   11d00:	ldreq	r0, [sp, #8]
   11d04:	bne	11d20 <__assert_fail@plt+0x11a0>
   11d08:	ldr	r2, [sp, #12]
   11d0c:	ldr	r3, [r5]
   11d10:	cmp	r2, r3
   11d14:	bne	11d54 <__assert_fail@plt+0x11d4>
   11d18:	add	sp, sp, #16
   11d1c:	pop	{r4, r5, r6, pc}
   11d20:	ldr	r3, [pc, #56]	; 11d60 <__assert_fail@plt+0x11e0>
   11d24:	ldr	r3, [r4, r3]
   11d28:	ldr	r4, [r3]
   11d2c:	bl	10a60 <strerror@plt>
   11d30:	ldr	r2, [pc, #44]	; 11d64 <__assert_fail@plt+0x11e4>
   11d34:	mov	r3, r6
   11d38:	add	r2, pc, r2
   11d3c:	mov	r1, #1
   11d40:	str	r0, [sp]
   11d44:	mov	r0, r4
   11d48:	bl	10b20 <__fprintf_chk@plt>
   11d4c:	mov	r0, #0
   11d50:	b	11d08 <__assert_fail@plt+0x1188>
   11d54:	bl	10a0c <__stack_chk_fail@plt>
   11d58:	andeq	r4, r1, ip, lsr r2
   11d5c:	andeq	r0, r0, ip, lsr #1
   11d60:	andeq	r0, r0, r8, asr #1
   11d64:	andeq	r2, r0, ip, asr #15
   11d68:	push	{r4, r5, r6, r7, r8, lr}
   11d6c:	mov	r6, r1
   11d70:	ldr	r1, [pc, #268]	; 11e84 <__assert_fail@plt+0x1304>
   11d74:	mov	r4, r0
   11d78:	add	r1, pc, r1
   11d7c:	bl	109ac <strcmp@plt>
   11d80:	cmp	r0, #0
   11d84:	bne	11e10 <__assert_fail@plt+0x1290>
   11d88:	ldr	r3, [r6, #4]
   11d8c:	lsr	r5, r3, #24
   11d90:	lsl	r2, r3, #8
   11d94:	orr	r5, r5, r3, lsl #24
   11d98:	and	r2, r2, #16711680	; 0xff0000
   11d9c:	lsr	r3, r3, #8
   11da0:	orr	r5, r5, r2
   11da4:	and	r3, r3, #65280	; 0xff00
   11da8:	orr	r5, r5, r3
   11dac:	cmp	r5, #0
   11db0:	movgt	r8, #1
   11db4:	ble	11e60 <__assert_fail@plt+0x12e0>
   11db8:	mov	r4, #0
   11dbc:	b	11dc8 <__assert_fail@plt+0x1248>
   11dc0:	cmp	r4, r5
   11dc4:	bge	11e68 <__assert_fail@plt+0x12e8>
   11dc8:	sub	r2, r5, r4
   11dcc:	add	r1, r6, r4
   11dd0:	mov	r0, r8
   11dd4:	bl	10b14 <write@plt>
   11dd8:	subs	r7, r0, #0
   11ddc:	add	r4, r4, r7
   11de0:	bge	11dc0 <__assert_fail@plt+0x1240>
   11de4:	bl	10acc <__errno_location@plt>
   11de8:	cmp	r8, #1
   11dec:	ldr	r7, [r0]
   11df0:	rsb	r7, r7, #0
   11df4:	beq	11e00 <__assert_fail@plt+0x1280>
   11df8:	mov	r0, r8
   11dfc:	bl	10b74 <close@plt>
   11e00:	cmp	r7, #0
   11e04:	bge	11e60 <__assert_fail@plt+0x12e0>
   11e08:	rsb	r0, r7, #0
   11e0c:	pop	{r4, r5, r6, r7, r8, pc}
   11e10:	mov	r0, r4
   11e14:	ldr	r2, [pc, #108]	; 11e88 <__assert_fail@plt+0x1308>
   11e18:	ldr	r1, [pc, #108]	; 11e8c <__assert_fail@plt+0x130c>
   11e1c:	bl	10a84 <open@plt>
   11e20:	subs	r8, r0, #0
   11e24:	blt	11e78 <__assert_fail@plt+0x12f8>
   11e28:	ldr	r3, [r6, #4]
   11e2c:	lsr	r5, r3, #24
   11e30:	lsl	r2, r3, #8
   11e34:	orr	r5, r5, r3, lsl #24
   11e38:	and	r2, r2, #16711680	; 0xff0000
   11e3c:	lsr	r3, r3, #8
   11e40:	orr	r5, r5, r2
   11e44:	and	r3, r3, #65280	; 0xff00
   11e48:	orr	r5, r5, r3
   11e4c:	cmp	r5, #0
   11e50:	bgt	11db8 <__assert_fail@plt+0x1238>
   11e54:	cmp	r8, #1
   11e58:	beq	11e60 <__assert_fail@plt+0x12e0>
   11e5c:	bl	10b74 <close@plt>
   11e60:	mov	r0, #0
   11e64:	pop	{r4, r5, r6, r7, r8, pc}
   11e68:	cmp	r8, #1
   11e6c:	bne	11df8 <__assert_fail@plt+0x1278>
   11e70:	mov	r0, #0
   11e74:	pop	{r4, r5, r6, r7, r8, pc}
   11e78:	bl	10acc <__errno_location@plt>
   11e7c:	ldr	r0, [r0]
   11e80:	pop	{r4, r5, r6, r7, r8, pc}
   11e84:	andeq	r2, r0, r8, asr r6
   11e88:			; <UNDEFINED> instruction: 0x000001b6
   11e8c:	andeq	r0, r0, r1, asr #4
   11e90:	push	{r4, r5, lr}
   11e94:	sub	sp, sp, #12
   11e98:	mov	r4, r0
   11e9c:	bl	11d68 <__assert_fail@plt+0x11e8>
   11ea0:	ldr	r2, [pc, #80]	; 11ef8 <__assert_fail@plt+0x1378>
   11ea4:	add	r2, pc, r2
   11ea8:	subs	r3, r0, #0
   11eac:	bne	11ebc <__assert_fail@plt+0x133c>
   11eb0:	mov	r0, r3
   11eb4:	add	sp, sp, #12
   11eb8:	pop	{r4, r5, pc}
   11ebc:	ldr	r3, [pc, #56]	; 11efc <__assert_fail@plt+0x137c>
   11ec0:	ldr	r3, [r2, r3]
   11ec4:	ldr	r5, [r3]
   11ec8:	bl	10a60 <strerror@plt>
   11ecc:	ldr	r2, [pc, #44]	; 11f00 <__assert_fail@plt+0x1380>
   11ed0:	mov	r3, r4
   11ed4:	add	r2, pc, r2
   11ed8:	mov	r1, #1
   11edc:	str	r0, [sp]
   11ee0:	mov	r0, r5
   11ee4:	bl	10b20 <__fprintf_chk@plt>
   11ee8:	mvn	r3, #0
   11eec:	mov	r0, r3
   11ef0:	add	sp, sp, #12
   11ef4:	pop	{r4, r5, pc}
   11ef8:	andeq	r4, r1, r4, ror r0
   11efc:	andeq	r0, r0, r8, asr #1
   11f00:	andeq	r2, r0, r4, asr r6
   11f04:	ldrb	r3, [r0]
   11f08:	cmp	r3, #0
   11f0c:	beq	11fec <__assert_fail@plt+0x146c>
   11f10:	mvn	r3, #0
   11f14:	push	{r4, r5, r6, r7, r8, lr}
   11f18:	mov	r5, r0
   11f1c:	str	r3, [r2]
   11f20:	ldrb	r4, [r0]
   11f24:	ldr	r0, [pc, #200]	; 11ff4 <__assert_fail@plt+0x1474>
   11f28:	mov	r8, r1
   11f2c:	add	r0, pc, r0
   11f30:	mov	r1, r4
   11f34:	mov	r7, r2
   11f38:	bl	10ac0 <strchr@plt>
   11f3c:	mov	r6, r4
   11f40:	cmp	r0, #0
   11f44:	moveq	r6, r0
   11f48:	beq	11f60 <__assert_fail@plt+0x13e0>
   11f4c:	ldrb	r3, [r5, #1]
   11f50:	cmp	r4, r3
   11f54:	beq	11fcc <__assert_fail@plt+0x144c>
   11f58:	add	r5, r5, #1
   11f5c:	mov	r4, r3
   11f60:	cmp	r4, #0
   11f64:	beq	11fe4 <__assert_fail@plt+0x1464>
   11f68:	ldr	r0, [pc, #136]	; 11ff8 <__assert_fail@plt+0x1478>
   11f6c:	mov	r1, r4
   11f70:	add	r0, pc, r0
   11f74:	bl	10ac0 <strchr@plt>
   11f78:	cmp	r0, #0
   11f7c:	beq	11fe4 <__assert_fail@plt+0x1464>
   11f80:	cmp	r4, #115	; 0x73
   11f84:	beq	11fb4 <__assert_fail@plt+0x1434>
   11f88:	cmp	r6, #98	; 0x62
   11f8c:	moveq	r3, #1
   11f90:	beq	11fac <__assert_fail@plt+0x142c>
   11f94:	cmp	r6, #104	; 0x68
   11f98:	moveq	r3, #2
   11f9c:	beq	11fac <__assert_fail@plt+0x142c>
   11fa0:	cmp	r6, #108	; 0x6c
   11fa4:	moveq	r3, #4
   11fa8:	mvnne	r3, #0
   11fac:	str	r3, [r7]
   11fb0:	ldrb	r4, [r5]
   11fb4:	str	r4, [r8]
   11fb8:	ldrb	r0, [r5, #1]
   11fbc:	adds	r0, r0, #0
   11fc0:	movne	r0, #1
   11fc4:	rsb	r0, r0, #0
   11fc8:	pop	{r4, r5, r6, r7, r8, pc}
   11fcc:	cmp	r6, #104	; 0x68
   11fd0:	add	r3, r5, #2
   11fd4:	ldrb	r4, [r5, #2]
   11fd8:	moveq	r6, #98	; 0x62
   11fdc:	mov	r5, r3
   11fe0:	b	11f60 <__assert_fail@plt+0x13e0>
   11fe4:	mvn	r0, #0
   11fe8:	pop	{r4, r5, r6, r7, r8, pc}
   11fec:	mvn	r0, #0
   11ff0:	bx	lr
   11ff4:	andeq	r2, r0, r0, lsr #12
   11ff8:	andeq	r2, r0, r4, ror #11
   11ffc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12000:	subs	fp, r1, #0
   12004:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12008:	mov	r4, r0
   1200c:	bl	11888 <__assert_fail@plt+0xd08>
   12010:	cmp	r0, #0
   12014:	bne	12134 <__assert_fail@plt+0x15b4>
   12018:	ands	r5, fp, #3
   1201c:	bne	120bc <__assert_fail@plt+0x153c>
   12020:	ldr	r1, [pc, #360]	; 12190 <__assert_fail@plt+0x1610>
   12024:	mov	r0, #1
   12028:	add	r1, pc, r1
   1202c:	bl	10b08 <__printf_chk@plt>
   12030:	cmp	fp, #0
   12034:	add	r6, fp, #3
   12038:	movge	r6, fp
   1203c:	cmp	fp, #3
   12040:	asr	r6, r6, #2
   12044:	ble	120b0 <__assert_fail@plt+0x1530>
   12048:	ldr	sl, [pc, #324]	; 12194 <__assert_fail@plt+0x1614>
   1204c:	ldr	r9, [pc, #324]	; 12198 <__assert_fail@plt+0x1618>
   12050:	ldr	r8, [pc, #324]	; 1219c <__assert_fail@plt+0x161c>
   12054:	add	sl, pc, sl
   12058:	add	r9, pc, r9
   1205c:	add	r8, pc, r8
   12060:	sub	r4, r4, #4
   12064:	sub	r7, r6, #1
   12068:	ldr	r1, [r4, #4]!
   1206c:	cmp	r5, r7
   12070:	movlt	r3, sl
   12074:	lsr	r2, r1, #24
   12078:	lsl	r0, r1, #8
   1207c:	orr	r2, r2, r1, lsl #24
   12080:	and	r0, r0, #16711680	; 0xff0000
   12084:	lsr	r1, r1, #8
   12088:	orr	r2, r2, r0
   1208c:	and	r1, r1, #65280	; 0xff00
   12090:	movge	r3, r9
   12094:	orr	r2, r2, r1
   12098:	add	r5, r5, #1
   1209c:	mov	r1, r8
   120a0:	mov	r0, #1
   120a4:	bl	10b08 <__printf_chk@plt>
   120a8:	cmp	r6, r5
   120ac:	bgt	12068 <__assert_fail@plt+0x14e8>
   120b0:	mov	r0, #62	; 0x3e
   120b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120b8:	b	10ae4 <putchar@plt>
   120bc:	ldr	r1, [pc, #220]	; 121a0 <__assert_fail@plt+0x1620>
   120c0:	mov	r0, #1
   120c4:	add	r1, pc, r1
   120c8:	bl	10b08 <__printf_chk@plt>
   120cc:	cmp	fp, #0
   120d0:	ble	12128 <__assert_fail@plt+0x15a8>
   120d4:	ldr	sl, [pc, #200]	; 121a4 <__assert_fail@plt+0x1624>
   120d8:	ldr	r9, [pc, #200]	; 121a8 <__assert_fail@plt+0x1628>
   120dc:	ldr	r8, [pc, #200]	; 121ac <__assert_fail@plt+0x162c>
   120e0:	sub	r7, fp, #1
   120e4:	add	sl, pc, sl
   120e8:	add	r9, pc, r9
   120ec:	add	r8, pc, r8
   120f0:	add	fp, r4, fp
   120f4:	mov	r6, r4
   120f8:	add	r6, r6, #1
   120fc:	mov	r3, r6
   12100:	mov	r1, r8
   12104:	ldrb	r2, [r3, #-1]!
   12108:	mov	r0, #1
   1210c:	sub	r3, r3, r4
   12110:	cmp	r3, r7
   12114:	movge	r3, sl
   12118:	movlt	r3, r9
   1211c:	bl	10b08 <__printf_chk@plt>
   12120:	cmp	r6, fp
   12124:	bne	120f8 <__assert_fail@plt+0x1578>
   12128:	mov	r0, #93	; 0x5d
   1212c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12130:	b	10ae4 <putchar@plt>
   12134:	ldr	r1, [pc, #116]	; 121b0 <__assert_fail@plt+0x1630>
   12138:	mov	r0, #1
   1213c:	add	r1, pc, r1
   12140:	bl	10b08 <__printf_chk@plt>
   12144:	ldr	r6, [pc, #104]	; 121b4 <__assert_fail@plt+0x1634>
   12148:	ldr	r7, [pc, #104]	; 121b8 <__assert_fail@plt+0x1638>
   1214c:	add	r6, pc, r6
   12150:	add	r7, pc, r7
   12154:	add	fp, r4, fp
   12158:	mov	r2, r4
   1215c:	mov	r1, r6
   12160:	mov	r0, #1
   12164:	bl	10b08 <__printf_chk@plt>
   12168:	mov	r0, r4
   1216c:	bl	10ab4 <strlen@plt>
   12170:	add	r0, r0, #1
   12174:	add	r4, r4, r0
   12178:	cmp	r4, fp
   1217c:	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12180:	mov	r1, r7
   12184:	mov	r0, #1
   12188:	bl	10b08 <__printf_chk@plt>
   1218c:	b	12158 <__assert_fail@plt+0x15d8>
   12190:	andeq	r2, r0, r4, asr #10
   12194:	andeq	r2, r0, r8, ror r3
   12198:	andeq	r2, r0, ip, asr pc
   1219c:	andeq	r2, r0, r8, lsl r5
   121a0:			; <UNDEFINED> instruction: 0x000024bc
   121a4:	ldrdeq	r2, [r0], -r0
   121a8:	andeq	r2, r0, r4, ror #5
   121ac:	muleq	r0, ip, r4
   121b0:	andeq	r2, r0, r0, lsr #8
   121b4:	andeq	r2, r0, r4, lsl r4
   121b8:	andeq	r2, r0, r8, lsl r4
   121bc:	ldr	r2, [pc, #28]	; 121e0 <__assert_fail@plt+0x1660>
   121c0:	ldr	r1, [pc, #28]	; 121e4 <__assert_fail@plt+0x1664>
   121c4:	push	{r4, lr}
   121c8:	add	r2, pc, r2
   121cc:	add	r1, pc, r1
   121d0:	mov	r0, #1
   121d4:	bl	10b08 <__printf_chk@plt>
   121d8:	mov	r0, #0
   121dc:	bl	10aa8 <exit@plt>
   121e0:	andeq	r2, r0, r8, asr #7
   121e4:	ldrdeq	r2, [r0], -r0
   121e8:	push	{r7, fp, lr}
   121ec:	sub	sp, sp, #44	; 0x2c
   121f0:	ldr	lr, [pc, #604]	; 12454 <__assert_fail@plt+0x18d4>
   121f4:	ldr	ip, [pc, #604]	; 12458 <__assert_fail@plt+0x18d8>
   121f8:	add	lr, pc, lr
   121fc:	cmp	r0, #0
   12200:	str	r0, [sp, #20]
   12204:	mov	r5, r1
   12208:	ldr	r1, [lr, ip]
   1220c:	mov	r4, r3
   12210:	mov	r8, r2
   12214:	ldr	r3, [r1]
   12218:	ldr	r6, [sp, #56]	; 0x38
   1221c:	str	r3, [sp, #36]	; 0x24
   12220:	beq	12400 <__assert_fail@plt+0x1880>
   12224:	ldr	r3, [pc, #560]	; 1245c <__assert_fail@plt+0x18dc>
   12228:	ldr	r2, [pc, #560]	; 12460 <__assert_fail@plt+0x18e0>
   1222c:	add	r3, pc, r3
   12230:	ldm	r3, {r0, r1}
   12234:	ldr	r3, [lr, r2]
   12238:	str	r0, [sp, #28]
   1223c:	add	r0, sp, #28
   12240:	ldr	r7, [r3]
   12244:	strh	r1, [sp, #32]
   12248:	bl	10ab4 <strlen@plt>
   1224c:	ldr	r2, [pc, #528]	; 12464 <__assert_fail@plt+0x18e4>
   12250:	mov	r1, #1
   12254:	str	r8, [sp]
   12258:	mov	r3, r5
   1225c:	add	r2, pc, r2
   12260:	add	r8, r0, r1
   12264:	mov	r0, r7
   12268:	bl	10b20 <__fprintf_chk@plt>
   1226c:	ldr	r0, [r4]
   12270:	cmp	r0, #0
   12274:	beq	123e0 <__assert_fail@plt+0x1860>
   12278:	mov	r9, r4
   1227c:	mov	r5, #0
   12280:	bl	10ab4 <strlen@plt>
   12284:	ldr	r3, [r9, #4]
   12288:	cmp	r3, #1
   1228c:	add	r3, r0, #1
   12290:	addeq	r3, r3, r8
   12294:	ldr	r0, [r9, #16]!
   12298:	cmp	r5, r3
   1229c:	movlt	r5, r3
   122a0:	cmp	r0, #0
   122a4:	bne	12280 <__assert_fail@plt+0x1700>
   122a8:	ldr	r3, [r6]
   122ac:	cmp	r3, #0
   122b0:	beq	123b0 <__assert_fail@plt+0x1830>
   122b4:	ldr	sl, [pc, #428]	; 12468 <__assert_fail@plt+0x18e8>
   122b8:	ldr	r9, [pc, #428]	; 1246c <__assert_fail@plt+0x18ec>
   122bc:	add	sl, pc, sl
   122c0:	add	r9, pc, r9
   122c4:	add	r4, r4, #16
   122c8:	b	12340 <__assert_fail@plt+0x17c0>
   122cc:	mov	r2, #6
   122d0:	mov	r3, r7
   122d4:	mov	r1, #1
   122d8:	mov	r0, r9
   122dc:	bl	10a24 <fwrite@plt>
   122e0:	ldr	r2, [r4, #-12]
   122e4:	ldr	fp, [r4, #-16]
   122e8:	cmp	r2, #0
   122ec:	bne	1236c <__assert_fail@plt+0x17ec>
   122f0:	ldr	r2, [pc, #376]	; 12470 <__assert_fail@plt+0x18f0>
   122f4:	str	fp, [sp]
   122f8:	mov	r3, r5
   122fc:	add	r2, pc, r2
   12300:	mov	r1, #1
   12304:	mov	r0, r7
   12308:	bl	10b20 <__fprintf_chk@plt>
   1230c:	ldr	r2, [pc, #352]	; 12474 <__assert_fail@plt+0x18f4>
   12310:	ldr	r3, [r6], #4
   12314:	add	r2, pc, r2
   12318:	mov	r1, #1
   1231c:	mov	r0, r7
   12320:	bl	10b20 <__fprintf_chk@plt>
   12324:	ldr	r3, [r4]
   12328:	cmp	r3, #0
   1232c:	beq	123d4 <__assert_fail@plt+0x1854>
   12330:	ldr	r3, [r6]
   12334:	add	r4, r4, #16
   12338:	cmp	r3, #0
   1233c:	beq	123b0 <__assert_fail@plt+0x1830>
   12340:	ldr	r3, [r4, #-4]
   12344:	cmp	r3, #126	; 0x7e
   12348:	bgt	122cc <__assert_fail@plt+0x174c>
   1234c:	mov	r2, sl
   12350:	mov	r1, #1
   12354:	mov	r0, r7
   12358:	bl	10b20 <__fprintf_chk@plt>
   1235c:	ldr	r2, [r4, #-12]
   12360:	ldr	fp, [r4, #-16]
   12364:	cmp	r2, #0
   12368:	beq	122f0 <__assert_fail@plt+0x1770>
   1236c:	mov	r0, fp
   12370:	bl	10ab4 <strlen@plt>
   12374:	ldr	r2, [pc, #252]	; 12478 <__assert_fail@plt+0x18f8>
   12378:	sub	ip, r5, r8
   1237c:	add	r2, pc, r2
   12380:	str	r2, [sp, #8]
   12384:	add	r2, sp, #28
   12388:	str	r2, [sp]
   1238c:	ldr	r2, [pc, #232]	; 1247c <__assert_fail@plt+0x18fc>
   12390:	mov	r3, fp
   12394:	add	r2, pc, r2
   12398:	mov	r1, #1
   1239c:	sub	ip, ip, r0
   123a0:	str	ip, [sp, #4]
   123a4:	mov	r0, r7
   123a8:	bl	10b20 <__fprintf_chk@plt>
   123ac:	b	1230c <__assert_fail@plt+0x178c>
   123b0:	ldr	r3, [pc, #200]	; 12480 <__assert_fail@plt+0x1900>
   123b4:	ldr	r1, [pc, #200]	; 12484 <__assert_fail@plt+0x1904>
   123b8:	ldr	r0, [pc, #200]	; 12488 <__assert_fail@plt+0x1908>
   123bc:	add	r3, pc, r3
   123c0:	ldr	r2, [pc, #196]	; 1248c <__assert_fail@plt+0x190c>
   123c4:	add	r3, r3, #16
   123c8:	add	r1, pc, r1
   123cc:	add	r0, pc, r0
   123d0:	bl	10b80 <__assert_fail@plt>
   123d4:	ldr	r3, [sp, #20]
   123d8:	cmp	r3, #0
   123dc:	beq	1244c <__assert_fail@plt+0x18cc>
   123e0:	ldr	r2, [pc, #168]	; 12490 <__assert_fail@plt+0x1910>
   123e4:	ldr	r3, [sp, #20]
   123e8:	mov	r0, r7
   123ec:	add	r2, pc, r2
   123f0:	mov	r1, #1
   123f4:	bl	10b20 <__fprintf_chk@plt>
   123f8:	mov	r0, #1
   123fc:	bl	10aa8 <exit@plt>
   12400:	ldr	r1, [pc, #140]	; 12494 <__assert_fail@plt+0x1914>
   12404:	ldr	r2, [pc, #140]	; 12498 <__assert_fail@plt+0x1918>
   12408:	mov	r3, r5
   1240c:	ldr	ip, [lr, r1]
   12410:	add	r2, pc, r2
   12414:	str	r8, [sp]
   12418:	ldm	r2, {r0, r1}
   1241c:	ldr	r7, [ip]
   12420:	ldr	r2, [pc, #116]	; 1249c <__assert_fail@plt+0x191c>
   12424:	str	r0, [sp, #28]
   12428:	strh	r1, [sp, #32]
   1242c:	mov	r0, r7
   12430:	add	r2, pc, r2
   12434:	mov	r1, #1
   12438:	bl	10b20 <__fprintf_chk@plt>
   1243c:	ldr	r0, [r4]
   12440:	cmp	r0, #0
   12444:	movne	r8, #6
   12448:	bne	12278 <__assert_fail@plt+0x16f8>
   1244c:	mov	r0, #0
   12450:	bl	10aa8 <exit@plt>
   12454:	andeq	r3, r1, r0, lsr #26
   12458:	andeq	r0, r0, ip, lsr #1
   1245c:	andeq	r2, r0, r4, ror #7
   12460:	andeq	r0, r0, r8, asr #1
   12464:	andeq	r2, r0, r0, asr r3
   12468:	andeq	r2, r0, ip, lsr #6
   1246c:	andeq	r2, r0, r0, lsr #6
   12470:	strdeq	r2, [r0], -r4
   12474:	andeq	r2, r0, ip, lsr r1
   12478:	andeq	r2, r0, r8, lsr ip
   1247c:	andeq	r2, r0, r4, ror #4
   12480:	ldrdeq	r2, [r0], -r4
   12484:	andeq	r2, r0, r0, lsl #2
   12488:	strdeq	r2, [r0], -ip
   1248c:			; <UNDEFINED> instruction: 0x000001b7
   12490:	andeq	r2, r0, r8, lsl r2
   12494:	ldrdeq	r0, [r0], -ip
   12498:	andeq	r2, r0, r0, lsl #4
   1249c:	andeq	r2, r0, ip, ror r1
   124a0:	ldr	r3, [pc, #264]	; 125b0 <__assert_fail@plt+0x1a30>
   124a4:	ldr	r1, [pc, #264]	; 125b4 <__assert_fail@plt+0x1a34>
   124a8:	add	r3, pc, r3
   124ac:	ldr	r2, [pc, #260]	; 125b8 <__assert_fail@plt+0x1a38>
   124b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b4:	add	r2, pc, r2
   124b8:	ldr	r3, [r3, r1]
   124bc:	ldr	r1, [r2, #4]
   124c0:	sub	sp, sp, #20
   124c4:	ldr	r8, [r3]
   124c8:	str	r1, [sp]
   124cc:	cmp	r8, r1
   124d0:	ldr	r0, [r2]
   124d4:	bcs	125a8 <__assert_fail@plt+0x1a28>
   124d8:	ldr	r3, [pc, #220]	; 125bc <__assert_fail@plt+0x1a3c>
   124dc:	ldr	fp, [r2, #8]
   124e0:	add	r3, pc, r3
   124e4:	mov	r4, r3
   124e8:	ldr	sl, [r2, #12]
   124ec:	ldr	r2, [pc, #204]	; 125c0 <__assert_fail@plt+0x1a40>
   124f0:	add	r1, r3, #1520	; 0x5f0
   124f4:	add	r6, r4, #688	; 0x2b0
   124f8:	add	r3, r3, #256	; 0x100
   124fc:	add	r5, r4, #900	; 0x384
   12500:	add	r7, r4, #440	; 0x1b8
   12504:	mov	r9, #0
   12508:	add	r2, pc, r2
   1250c:	str	r3, [sp, #4]
   12510:	add	r3, r1, #4
   12514:	str	r2, [sp, #12]
   12518:	str	r3, [sp, #8]
   1251c:	mov	r3, r8
   12520:	ldrb	r2, [r8], #1
   12524:	ldr	ip, [sp, #4]
   12528:	cmp	r2, #0
   1252c:	moveq	r1, #1
   12530:	ldrne	r1, [sp, #12]
   12534:	ldrbne	r1, [r1, r2]
   12538:	lsl	r2, r0, #1
   1253c:	ldrsh	ip, [ip, r2]
   12540:	cmp	ip, #0
   12544:	movne	sl, r3
   12548:	movne	fp, r0
   1254c:	movne	r9, #1
   12550:	b	12564 <__assert_fail@plt+0x19e4>
   12554:	ldrsh	r0, [r7, r2]
   12558:	cmp	r0, #90	; 0x5a
   1255c:	lsl	r2, r0, #1
   12560:	ldrbgt	r1, [ip, #652]	; 0x28c
   12564:	ldrsh	r3, [r6, r2]
   12568:	add	ip, r4, r1
   1256c:	add	r3, r3, r1
   12570:	lsl	r3, r3, #1
   12574:	ldrsh	lr, [r5, r3]
   12578:	cmp	lr, r0
   1257c:	bne	12554 <__assert_fail@plt+0x19d4>
   12580:	ldr	r2, [sp]
   12584:	cmp	r2, r8
   12588:	ldr	r2, [sp, #8]
   1258c:	ldrsh	r0, [r2, r3]
   12590:	bne	1251c <__assert_fail@plt+0x199c>
   12594:	cmp	r9, #0
   12598:	ldrne	r3, [pc, #36]	; 125c4 <__assert_fail@plt+0x1a44>
   1259c:	addne	r3, pc, r3
   125a0:	strne	fp, [r3, #8]
   125a4:	strne	sl, [r3, #12]
   125a8:	add	sp, sp, #20
   125ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125b0:	andeq	r3, r1, r0, ror sl
   125b4:	strheq	r0, [r0], -r4
   125b8:	andeq	r3, r1, ip, ror fp
   125bc:	andeq	r2, r0, r8, lsr r1
   125c0:	andeq	r2, r0, r0, lsl r1
   125c4:	muleq	r1, r4, sl
   125c8:	ldr	ip, [pc, #100]	; 12634 <__assert_fail@plt+0x1ab4>
   125cc:	push	{r0, r1, r2, r3}
   125d0:	add	ip, pc, ip
   125d4:	ldr	r2, [pc, #92]	; 12638 <__assert_fail@plt+0x1ab8>
   125d8:	push	{lr}		; (str lr, [sp, #-4]!)
   125dc:	sub	sp, sp, #12
   125e0:	ldr	r2, [ip, r2]
   125e4:	ldr	r3, [pc, #80]	; 1263c <__assert_fail@plt+0x1abc>
   125e8:	add	r1, sp, #20
   125ec:	str	r1, [sp]
   125f0:	ldr	r1, [r2]
   125f4:	ldr	r0, [pc, #68]	; 12640 <__assert_fail@plt+0x1ac0>
   125f8:	str	r1, [sp, #4]
   125fc:	ldr	r4, [ip, r3]
   12600:	ldr	r5, [sp, #16]
   12604:	mov	r2, #13
   12608:	mov	r1, #1
   1260c:	ldr	r3, [r4]
   12610:	add	r0, pc, r0
   12614:	bl	10a24 <fwrite@plt>
   12618:	ldr	r0, [r4]
   1261c:	mov	r2, r5
   12620:	ldr	r3, [sp]
   12624:	mov	r1, #1
   12628:	bl	10a6c <__vfprintf_chk@plt>
   1262c:	mov	r0, #1
   12630:	bl	10aa8 <exit@plt>
   12634:	andeq	r3, r1, r8, asr #18
   12638:	andeq	r0, r0, ip, lsr #1
   1263c:	andeq	r0, r0, r8, asr #1
   12640:			; <UNDEFINED> instruction: 0x00001db0
   12644:	ldr	r1, [pc, #48]	; 1267c <__assert_fail@plt+0x1afc>
   12648:	ldr	ip, [pc, #48]	; 12680 <__assert_fail@plt+0x1b00>
   1264c:	add	r1, pc, r1
   12650:	push	{r4, lr}
   12654:	mov	r3, r0
   12658:	ldr	ip, [r1, ip]
   1265c:	ldr	r2, [pc, #32]	; 12684 <__assert_fail@plt+0x1b04>
   12660:	mov	r0, r1
   12664:	add	r2, pc, r2
   12668:	mov	r1, #1
   1266c:	ldr	r0, [ip]
   12670:	bl	10b20 <__fprintf_chk@plt>
   12674:	mov	r0, #2
   12678:	bl	10aa8 <exit@plt>
   1267c:	andeq	r3, r1, ip, asr #17
   12680:	andeq	r0, r0, r8, asr #1
   12684:	andeq	r1, r0, ip, ror #27
   12688:	cmp	r0, #0
   1268c:	ldr	r1, [pc, #140]	; 12720 <__assert_fail@plt+0x1ba0>
   12690:	add	r1, pc, r1
   12694:	bxeq	lr
   12698:	ldr	ip, [r0, #4]
   1269c:	ldr	r2, [pc, #128]	; 12724 <__assert_fail@plt+0x1ba4>
   126a0:	mov	r3, #0
   126a4:	add	r2, pc, r2
   126a8:	push	{r4, lr}
   126ac:	mov	r4, #1
   126b0:	str	r3, [r0, #16]
   126b4:	strb	r3, [ip]
   126b8:	ldr	ip, [r0, #4]
   126bc:	ldr	lr, [r2, #16]
   126c0:	strb	r3, [ip, #1]
   126c4:	cmp	lr, r3
   126c8:	ldr	ip, [r0, #4]
   126cc:	str	r3, [r0, #44]	; 0x2c
   126d0:	str	ip, [r0, #8]
   126d4:	str	r4, [r0, #28]
   126d8:	popeq	{r4, pc}
   126dc:	ldr	r3, [r2, #20]
   126e0:	ldr	r3, [lr, r3, lsl #2]
   126e4:	cmp	r0, r3
   126e8:	popne	{r4, pc}
   126ec:	ldr	r3, [pc, #52]	; 12728 <__assert_fail@plt+0x1ba8>
   126f0:	ldr	lr, [r0, #16]
   126f4:	str	ip, [r2, #4]
   126f8:	str	lr, [r2, #24]
   126fc:	ldr	lr, [r1, r3]
   12700:	ldr	r3, [pc, #36]	; 1272c <__assert_fail@plt+0x1bac>
   12704:	ldr	r0, [r0]
   12708:	str	ip, [lr]
   1270c:	ldr	r3, [r1, r3]
   12710:	str	r0, [r3]
   12714:	ldrb	r3, [ip]
   12718:	strb	r3, [r2, #28]
   1271c:	pop	{r4, pc}
   12720:	andeq	r3, r1, r8, lsl #17
   12724:	andeq	r3, r1, ip, lsl #19
   12728:	strheq	r0, [r0], -r4
   1272c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12730:	push	{r4, r5, r6, r7, r8, lr}
   12734:	mov	r4, r0
   12738:	mov	r7, r1
   1273c:	bl	10acc <__errno_location@plt>
   12740:	mov	r5, r0
   12744:	mov	r0, r4
   12748:	ldr	r6, [r5]
   1274c:	bl	12688 <__assert_fail@plt+0x1b08>
   12750:	ldr	r2, [pc, #68]	; 1279c <__assert_fail@plt+0x1c1c>
   12754:	mov	r0, #1
   12758:	add	r2, pc, r2
   1275c:	str	r7, [r4]
   12760:	ldr	r3, [r2, #16]
   12764:	str	r0, [r4, #40]	; 0x28
   12768:	cmp	r3, #0
   1276c:	beq	12780 <__assert_fail@plt+0x1c00>
   12770:	ldr	r2, [r2, #20]
   12774:	ldr	r3, [r3, r2, lsl #2]
   12778:	cmp	r4, r3
   1277c:	beq	1278c <__assert_fail@plt+0x1c0c>
   12780:	mov	r2, #1
   12784:	mov	r3, #0
   12788:	strd	r2, [r4, #32]
   1278c:	mov	r3, #0
   12790:	str	r3, [r4, #24]
   12794:	str	r6, [r5]
   12798:	pop	{r4, r5, r6, r7, r8, pc}
   1279c:	ldrdeq	r3, [r1], -r8
   127a0:	ldr	r3, [pc, #16]	; 127b8 <__assert_fail@plt+0x1c38>
   127a4:	ldr	r2, [pc, #16]	; 127bc <__assert_fail@plt+0x1c3c>
   127a8:	add	r3, pc, r3
   127ac:	ldr	r3, [r3, r2]
   127b0:	ldr	r0, [r3]
   127b4:	bx	lr
   127b8:	andeq	r3, r1, r0, ror r7
   127bc:	andeq	r0, r0, r0, asr #1
   127c0:	ldr	r3, [pc, #16]	; 127d8 <__assert_fail@plt+0x1c58>
   127c4:	ldr	r2, [pc, #16]	; 127dc <__assert_fail@plt+0x1c5c>
   127c8:	add	r3, pc, r3
   127cc:	ldr	r3, [r3, r2]
   127d0:	ldr	r0, [r3]
   127d4:	bx	lr
   127d8:	andeq	r3, r1, r0, asr r7
   127dc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   127e0:	ldr	r3, [pc, #16]	; 127f8 <__assert_fail@plt+0x1c78>
   127e4:	ldr	r2, [pc, #16]	; 127fc <__assert_fail@plt+0x1c7c>
   127e8:	add	r3, pc, r3
   127ec:	ldr	r3, [r3, r2]
   127f0:	ldr	r0, [r3]
   127f4:	bx	lr
   127f8:	andeq	r3, r1, r0, lsr r7
   127fc:	andeq	r0, r0, ip, asr #1
   12800:	ldr	r3, [pc, #16]	; 12818 <__assert_fail@plt+0x1c98>
   12804:	ldr	r2, [pc, #16]	; 1281c <__assert_fail@plt+0x1c9c>
   12808:	add	r3, pc, r3
   1280c:	ldr	r3, [r3, r2]
   12810:	ldr	r0, [r3]
   12814:	bx	lr
   12818:	andeq	r3, r1, r0, lsl r7
   1281c:	ldrdeq	r0, [r0], -r8
   12820:	ldr	r3, [pc, #16]	; 12838 <__assert_fail@plt+0x1cb8>
   12824:	ldr	r2, [pc, #16]	; 1283c <__assert_fail@plt+0x1cbc>
   12828:	add	r3, pc, r3
   1282c:	ldr	r3, [r3, r2]
   12830:	ldr	r0, [r3]
   12834:	bx	lr
   12838:	strdeq	r3, [r1], -r0
   1283c:	strheq	r0, [r0], -r4
   12840:	ldr	r3, [pc, #16]	; 12858 <__assert_fail@plt+0x1cd8>
   12844:	ldr	r2, [pc, #16]	; 1285c <__assert_fail@plt+0x1cdc>
   12848:	add	r3, pc, r3
   1284c:	ldr	r3, [r3, r2]
   12850:	str	r0, [r3]
   12854:	bx	lr
   12858:	ldrdeq	r3, [r1], -r0
   1285c:	andeq	r0, r0, r0, asr #1
   12860:	ldr	r3, [pc, #16]	; 12878 <__assert_fail@plt+0x1cf8>
   12864:	ldr	r2, [pc, #16]	; 1287c <__assert_fail@plt+0x1cfc>
   12868:	add	r3, pc, r3
   1286c:	ldr	r3, [r3, r2]
   12870:	str	r0, [r3]
   12874:	bx	lr
   12878:			; <UNDEFINED> instruction: 0x000136b0
   1287c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12880:	ldr	r3, [pc, #16]	; 12898 <__assert_fail@plt+0x1d18>
   12884:	ldr	r2, [pc, #16]	; 1289c <__assert_fail@plt+0x1d1c>
   12888:	add	r3, pc, r3
   1288c:	ldr	r3, [r3, r2]
   12890:	str	r0, [r3]
   12894:	bx	lr
   12898:	muleq	r1, r0, r6
   1289c:	andeq	r0, r0, ip, asr #1
   128a0:	ldr	r3, [pc, #16]	; 128b8 <__assert_fail@plt+0x1d38>
   128a4:	ldr	r2, [pc, #16]	; 128bc <__assert_fail@plt+0x1d3c>
   128a8:	add	r3, pc, r3
   128ac:	ldr	r3, [r3, r2]
   128b0:	ldr	r0, [r3]
   128b4:	bx	lr
   128b8:	andeq	r3, r1, r0, ror r6
   128bc:	andeq	r0, r0, r4, asr #1
   128c0:	ldr	r3, [pc, #16]	; 128d8 <__assert_fail@plt+0x1d58>
   128c4:	ldr	r2, [pc, #16]	; 128dc <__assert_fail@plt+0x1d5c>
   128c8:	add	r3, pc, r3
   128cc:	ldr	r3, [r3, r2]
   128d0:	str	r0, [r3]
   128d4:	bx	lr
   128d8:	andeq	r3, r1, r0, asr r6
   128dc:	andeq	r0, r0, r4, asr #1
   128e0:	b	10a48 <malloc@plt>
   128e4:	push	{r4, r5, r6, lr}
   128e8:	mov	r6, r0
   128ec:	mov	r0, #48	; 0x30
   128f0:	mov	r5, r1
   128f4:	bl	128e0 <__assert_fail@plt+0x1d60>
   128f8:	subs	r4, r0, #0
   128fc:	beq	12934 <__assert_fail@plt+0x1db4>
   12900:	str	r5, [r4, #12]
   12904:	add	r0, r5, #2
   12908:	bl	128e0 <__assert_fail@plt+0x1d60>
   1290c:	cmp	r0, #0
   12910:	str	r0, [r4, #4]
   12914:	beq	12934 <__assert_fail@plt+0x1db4>
   12918:	mov	r3, #1
   1291c:	mov	r0, r4
   12920:	mov	r1, r6
   12924:	str	r3, [r4, #20]
   12928:	bl	12730 <__assert_fail@plt+0x1bb0>
   1292c:	mov	r0, r4
   12930:	pop	{r4, r5, r6, pc}
   12934:	ldr	r0, [pc, #4]	; 12940 <__assert_fail@plt+0x1dc0>
   12938:	add	r0, pc, r0
   1293c:	bl	12644 <__assert_fail@plt+0x1ac4>
   12940:	andeq	r2, r0, r4, ror r5
   12944:	b	10a18 <realloc@plt>
   12948:	push	{r4, r5, r6, lr}
   1294c:	ldr	r4, [pc, #140]	; 129e0 <__assert_fail@plt+0x1e60>
   12950:	add	r4, pc, r4
   12954:	ldr	r6, [r4, #16]
   12958:	cmp	r6, #0
   1295c:	beq	129ac <__assert_fail@plt+0x1e2c>
   12960:	ldr	r3, [r4, #32]
   12964:	ldr	r2, [r4, #20]
   12968:	sub	r1, r3, #1
   1296c:	cmp	r1, r2
   12970:	pophi	{r4, r5, r6, pc}
   12974:	add	r5, r3, #8
   12978:	mov	r0, r6
   1297c:	lsl	r1, r5, #2
   12980:	bl	12944 <__assert_fail@plt+0x1dc4>
   12984:	cmp	r0, #0
   12988:	str	r0, [r4, #16]
   1298c:	beq	129d4 <__assert_fail@plt+0x1e54>
   12990:	ldr	r3, [r4, #32]
   12994:	mov	r2, #32
   12998:	mov	r1, #0
   1299c:	add	r0, r0, r3, lsl #2
   129a0:	bl	10ad8 <memset@plt>
   129a4:	str	r5, [r4, #32]
   129a8:	pop	{r4, r5, r6, pc}
   129ac:	mov	r0, #4
   129b0:	bl	128e0 <__assert_fail@plt+0x1d60>
   129b4:	cmp	r0, #0
   129b8:	str	r0, [r4, #16]
   129bc:	beq	129d4 <__assert_fail@plt+0x1e54>
   129c0:	mov	r3, #1
   129c4:	str	r6, [r0]
   129c8:	str	r6, [r4, #20]
   129cc:	str	r3, [r4, #32]
   129d0:	pop	{r4, r5, r6, pc}
   129d4:	ldr	r0, [pc, #8]	; 129e4 <__assert_fail@plt+0x1e64>
   129d8:	add	r0, pc, r0
   129dc:	bl	12644 <__assert_fail@plt+0x1ac4>
   129e0:	andeq	r3, r1, r0, ror #13
   129e4:	andeq	r2, r0, r0, lsl #10
   129e8:	ldr	r2, [pc, #192]	; 12ab0 <__assert_fail@plt+0x1f30>
   129ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129f0:	add	r2, pc, r2
   129f4:	ldr	r4, [pc, #184]	; 12ab4 <__assert_fail@plt+0x1f34>
   129f8:	ldr	r3, [r2, #16]
   129fc:	add	r4, pc, r4
   12a00:	cmp	r3, #0
   12a04:	mov	r6, r0
   12a08:	beq	12a74 <__assert_fail@plt+0x1ef4>
   12a0c:	ldr	r2, [r2, #20]
   12a10:	ldr	r3, [r3, r2, lsl #2]
   12a14:	cmp	r3, #0
   12a18:	beq	12a74 <__assert_fail@plt+0x1ef4>
   12a1c:	ldr	r2, [pc, #148]	; 12ab8 <__assert_fail@plt+0x1f38>
   12a20:	ldr	r5, [r4, r2]
   12a24:	mov	r0, r3
   12a28:	mov	r1, r6
   12a2c:	bl	12730 <__assert_fail@plt+0x1bb0>
   12a30:	ldr	r3, [pc, #132]	; 12abc <__assert_fail@plt+0x1f3c>
   12a34:	ldr	r0, [pc, #132]	; 12ac0 <__assert_fail@plt+0x1f40>
   12a38:	add	r3, pc, r3
   12a3c:	ldr	r2, [r3, #16]
   12a40:	ldr	r1, [r3, #20]
   12a44:	ldr	r1, [r2, r1, lsl #2]
   12a48:	ldr	r2, [r1, #8]
   12a4c:	ldr	ip, [r1, #16]
   12a50:	str	r2, [r3, #4]
   12a54:	str	ip, [r3, #24]
   12a58:	ldr	r0, [r4, r0]
   12a5c:	ldr	r1, [r1]
   12a60:	str	r2, [r0]
   12a64:	str	r1, [r5]
   12a68:	ldrb	r2, [r2]
   12a6c:	strb	r2, [r3, #28]
   12a70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a74:	bl	12948 <__assert_fail@plt+0x1dc8>
   12a78:	ldr	r3, [pc, #56]	; 12ab8 <__assert_fail@plt+0x1f38>
   12a7c:	ldr	r7, [pc, #64]	; 12ac4 <__assert_fail@plt+0x1f44>
   12a80:	mov	r1, #16384	; 0x4000
   12a84:	ldr	r5, [r4, r3]
   12a88:	add	r7, pc, r7
   12a8c:	ldr	r0, [r5]
   12a90:	ldrd	r8, [r7, #16]
   12a94:	bl	128e4 <__assert_fail@plt+0x1d64>
   12a98:	ldr	r3, [r7, #16]
   12a9c:	cmp	r3, #0
   12aa0:	ldrne	r2, [r7, #20]
   12aa4:	str	r0, [r8, r9, lsl #2]
   12aa8:	ldrne	r3, [r3, r2, lsl #2]
   12aac:	b	12a24 <__assert_fail@plt+0x1ea4>
   12ab0:	andeq	r3, r1, r0, asr #12
   12ab4:	andeq	r3, r1, ip, lsl r5
   12ab8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12abc:	strdeq	r3, [r1], -r8
   12ac0:	strheq	r0, [r0], -r4
   12ac4:	andeq	r3, r1, r8, lsr #11
   12ac8:	push	{r4, r5, r6, lr}
   12acc:	mov	r4, r0
   12ad0:	bl	12948 <__assert_fail@plt+0x1dc8>
   12ad4:	ldr	r3, [pc, #164]	; 12b80 <__assert_fail@plt+0x2000>
   12ad8:	ldr	r1, [pc, #164]	; 12b84 <__assert_fail@plt+0x2004>
   12adc:	add	r3, pc, r3
   12ae0:	add	r1, pc, r1
   12ae4:	ldr	r2, [r3, #16]
   12ae8:	cmp	r2, #0
   12aec:	beq	12b6c <__assert_fail@plt+0x1fec>
   12af0:	ldr	r0, [r3, #20]
   12af4:	ldr	lr, [r2, r0, lsl #2]
   12af8:	add	ip, r2, r0, lsl #2
   12afc:	cmp	lr, r4
   12b00:	popeq	{r4, r5, r6, pc}
   12b04:	cmp	lr, #0
   12b08:	beq	12b28 <__assert_fail@plt+0x1fa8>
   12b0c:	ldr	lr, [r3, #4]
   12b10:	ldrb	r6, [r3, #28]
   12b14:	ldr	r5, [r3, #24]
   12b18:	strb	r6, [lr]
   12b1c:	ldr	r3, [r2, r0, lsl #2]
   12b20:	str	lr, [r3, #8]
   12b24:	str	r5, [r3, #16]
   12b28:	ldr	r3, [pc, #88]	; 12b88 <__assert_fail@plt+0x2008>
   12b2c:	ldr	r0, [pc, #88]	; 12b8c <__assert_fail@plt+0x200c>
   12b30:	add	r3, pc, r3
   12b34:	ldr	lr, [r4, #16]
   12b38:	ldr	r2, [r4, #8]
   12b3c:	str	r4, [ip]
   12b40:	str	r2, [r3, #4]
   12b44:	str	lr, [r3, #24]
   12b48:	ldr	lr, [r1, r0]
   12b4c:	ldr	r0, [pc, #60]	; 12b90 <__assert_fail@plt+0x2010>
   12b50:	ldr	ip, [r4]
   12b54:	str	r2, [lr]
   12b58:	ldr	r1, [r1, r0]
   12b5c:	str	ip, [r1]
   12b60:	ldrb	r2, [r2]
   12b64:	strb	r2, [r3, #28]
   12b68:	pop	{r4, r5, r6, pc}
   12b6c:	cmp	r4, #0
   12b70:	popeq	{r4, r5, r6, pc}
   12b74:	ldr	ip, [r3, #20]
   12b78:	lsl	ip, ip, #2
   12b7c:	b	12b28 <__assert_fail@plt+0x1fa8>
   12b80:	andeq	r3, r1, r4, asr r5
   12b84:	andeq	r3, r1, r8, lsr r4
   12b88:	andeq	r3, r1, r0, lsl #10
   12b8c:	strheq	r0, [r0], -r4
   12b90:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12b94:	cmp	r1, #1
   12b98:	push	{r4, r5, r6, r7, r8, lr}
   12b9c:	bls	12c0c <__assert_fail@plt+0x208c>
   12ba0:	sub	r7, r1, #2
   12ba4:	ldrb	r4, [r0, r7]
   12ba8:	cmp	r4, #0
   12bac:	bne	12c0c <__assert_fail@plt+0x208c>
   12bb0:	add	r1, r0, r1
   12bb4:	ldrb	r6, [r1, #-1]
   12bb8:	cmp	r6, #0
   12bbc:	bne	12c04 <__assert_fail@plt+0x2084>
   12bc0:	mov	r5, r0
   12bc4:	mov	r0, #48	; 0x30
   12bc8:	bl	128e0 <__assert_fail@plt+0x1d60>
   12bcc:	subs	r4, r0, #0
   12bd0:	beq	12c18 <__assert_fail@plt+0x2098>
   12bd4:	mov	r3, #1
   12bd8:	str	r7, [r4, #12]
   12bdc:	str	r5, [r4, #4]
   12be0:	str	r5, [r4, #8]
   12be4:	str	r6, [r4, #20]
   12be8:	str	r6, [r4]
   12bec:	str	r7, [r4, #16]
   12bf0:	str	r6, [r4, #24]
   12bf4:	str	r6, [r4, #40]	; 0x28
   12bf8:	str	r6, [r4, #44]	; 0x2c
   12bfc:	str	r3, [r4, #28]
   12c00:	bl	12ac8 <__assert_fail@plt+0x1f48>
   12c04:	mov	r0, r4
   12c08:	pop	{r4, r5, r6, r7, r8, pc}
   12c0c:	mov	r4, #0
   12c10:	mov	r0, r4
   12c14:	pop	{r4, r5, r6, r7, r8, pc}
   12c18:	ldr	r0, [pc, #4]	; 12c24 <__assert_fail@plt+0x20a4>
   12c1c:	add	r0, pc, r0
   12c20:	bl	12644 <__assert_fail@plt+0x1ac4>
   12c24:	strdeq	r2, [r0], -r0
   12c28:	push	{r4, r5, r6, lr}
   12c2c:	add	r6, r1, #2
   12c30:	mov	r4, r0
   12c34:	mov	r0, r6
   12c38:	mov	r5, r1
   12c3c:	bl	128e0 <__assert_fail@plt+0x1d60>
   12c40:	subs	lr, r0, #0
   12c44:	beq	12c9c <__assert_fail@plt+0x211c>
   12c48:	cmp	r5, #0
   12c4c:	subgt	r0, r4, #1
   12c50:	addgt	ip, r0, r5
   12c54:	subgt	r3, lr, #1
   12c58:	ble	12c6c <__assert_fail@plt+0x20ec>
   12c5c:	ldrb	r2, [r0, #1]!
   12c60:	cmp	r0, ip
   12c64:	strb	r2, [r3, #1]!
   12c68:	bne	12c5c <__assert_fail@plt+0x20dc>
   12c6c:	add	r2, lr, r5
   12c70:	mov	r3, #0
   12c74:	strb	r3, [r2, #1]
   12c78:	mov	r1, r6
   12c7c:	strb	r3, [lr, r5]
   12c80:	mov	r0, lr
   12c84:	bl	12b94 <__assert_fail@plt+0x2014>
   12c88:	subs	r3, r0, #0
   12c8c:	beq	12ca8 <__assert_fail@plt+0x2128>
   12c90:	mov	r2, #1
   12c94:	str	r2, [r3, #20]
   12c98:	pop	{r4, r5, r6, pc}
   12c9c:	ldr	r0, [pc, #16]	; 12cb4 <__assert_fail@plt+0x2134>
   12ca0:	add	r0, pc, r0
   12ca4:	bl	12644 <__assert_fail@plt+0x1ac4>
   12ca8:	ldr	r0, [pc, #8]	; 12cb8 <__assert_fail@plt+0x2138>
   12cac:	add	r0, pc, r0
   12cb0:	bl	12644 <__assert_fail@plt+0x1ac4>
   12cb4:	muleq	r0, r8, r2
   12cb8:			; <UNDEFINED> instruction: 0x000022b8
   12cbc:	push	{r4, lr}
   12cc0:	mov	r4, r0
   12cc4:	bl	10ab4 <strlen@plt>
   12cc8:	mov	r1, r0
   12ccc:	mov	r0, r4
   12cd0:	pop	{r4, lr}
   12cd4:	b	12c28 <__assert_fail@plt+0x20a8>
   12cd8:	push	{r4, r5, r6, lr}
   12cdc:	subs	r4, r0, #0
   12ce0:	ldr	r5, [pc, #176]	; 12d98 <__assert_fail@plt+0x2218>
   12ce4:	add	r5, pc, r5
   12ce8:	popeq	{r4, r5, r6, pc}
   12cec:	bl	12948 <__assert_fail@plt+0x1dc8>
   12cf0:	ldr	r3, [pc, #164]	; 12d9c <__assert_fail@plt+0x221c>
   12cf4:	add	r3, pc, r3
   12cf8:	ldr	r2, [r3, #16]
   12cfc:	cmp	r2, #0
   12d00:	beq	12d8c <__assert_fail@plt+0x220c>
   12d04:	ldr	r1, [r3, #20]
   12d08:	ldr	r0, [r2, r1, lsl #2]
   12d0c:	lsl	ip, r1, #2
   12d10:	cmp	r0, #0
   12d14:	add	r0, r2, ip
   12d18:	beq	12d48 <__assert_fail@plt+0x21c8>
   12d1c:	ldr	lr, [r3, #4]
   12d20:	ldrb	r6, [r3, #28]
   12d24:	add	r0, ip, #4
   12d28:	add	r0, r2, r0
   12d2c:	strb	r6, [lr]
   12d30:	ldr	r2, [r2, r1, lsl #2]
   12d34:	ldr	ip, [r3, #24]
   12d38:	add	r1, r1, #1
   12d3c:	str	lr, [r2, #8]
   12d40:	str	r1, [r3, #20]
   12d44:	str	ip, [r2, #16]
   12d48:	ldr	r3, [pc, #80]	; 12da0 <__assert_fail@plt+0x2220>
   12d4c:	ldr	r1, [pc, #80]	; 12da4 <__assert_fail@plt+0x2224>
   12d50:	add	r3, pc, r3
   12d54:	ldr	ip, [r4, #16]
   12d58:	ldr	r2, [r4, #8]
   12d5c:	str	r4, [r0]
   12d60:	str	r2, [r3, #4]
   12d64:	str	ip, [r3, #24]
   12d68:	ldr	ip, [r5, r1]
   12d6c:	ldr	r1, [pc, #52]	; 12da8 <__assert_fail@plt+0x2228>
   12d70:	ldr	r0, [r4]
   12d74:	str	r2, [ip]
   12d78:	ldr	r1, [r5, r1]
   12d7c:	str	r0, [r1]
   12d80:	ldrb	r2, [r2]
   12d84:	strb	r2, [r3, #28]
   12d88:	pop	{r4, r5, r6, pc}
   12d8c:	ldr	r0, [r3, #20]
   12d90:	lsl	r0, r0, #2
   12d94:	b	12d48 <__assert_fail@plt+0x21c8>
   12d98:	andeq	r3, r1, r4, lsr r2
   12d9c:	andeq	r3, r1, ip, lsr r3
   12da0:	andeq	r3, r1, r0, ror #5
   12da4:	strheq	r0, [r0], -r4
   12da8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12dac:	ldr	r3, [pc, #4072]	; 13d9c <__assert_fail@plt+0x321c>
   12db0:	ldr	r0, [pc, #4072]	; 13da0 <__assert_fail@plt+0x3220>
   12db4:	add	r3, pc, r3
   12db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dbc:	sub	sp, sp, #68	; 0x44
   12dc0:	ldr	r1, [r3, #36]	; 0x24
   12dc4:	add	r0, pc, r0
   12dc8:	cmp	r1, #0
   12dcc:	str	r0, [sp, #12]
   12dd0:	ldr	r2, [r3]
   12dd4:	beq	13794 <__assert_fail@plt+0x2c14>
   12dd8:	ldr	r1, [pc, #4036]	; 13da4 <__assert_fail@plt+0x3224>
   12ddc:	ldrb	fp, [r3, #28]
   12de0:	ldr	r4, [r3, #4]
   12de4:	ldr	r3, [r0, r1]
   12de8:	str	r3, [sp, #8]
   12dec:	ldr	r3, [pc, #4020]	; 13da8 <__assert_fail@plt+0x3228>
   12df0:	lsl	r1, r2, #1
   12df4:	add	r3, pc, r3
   12df8:	mov	sl, r3
   12dfc:	add	lr, r3, #688	; 0x2b0
   12e00:	add	r5, r3, #256	; 0x100
   12e04:	mov	r3, r1
   12e08:	ldr	ip, [pc, #3996]	; 13dac <__assert_fail@plt+0x322c>
   12e0c:	ldrsh	r3, [lr, r3]
   12e10:	ldr	lr, [sp, #12]
   12e14:	ldr	r0, [pc, #3988]	; 13db0 <__assert_fail@plt+0x3230>
   12e18:	ldrsh	r1, [r5, r1]
   12e1c:	ldr	ip, [lr, ip]
   12e20:	add	r0, pc, r0
   12e24:	add	r9, sl, #440	; 0x1b8
   12e28:	add	r6, r0, #688	; 0x2b0
   12e2c:	str	ip, [sp, #20]
   12e30:	mov	r8, sl
   12e34:	mov	ip, r1
   12e38:	mov	sl, r9
   12e3c:	mov	r1, r3
   12e40:	mov	r9, r4
   12e44:	mov	r7, r6
   12e48:	mov	r3, r1
   12e4c:	mov	r1, sl
   12e50:	mov	sl, r8
   12e54:	mov	r8, r1
   12e58:	strb	fp, [r9]
   12e5c:	str	r9, [sp, #16]
   12e60:	ldr	r1, [pc, #3916]	; 13db4 <__assert_fail@plt+0x3234>
   12e64:	add	lr, sl, #1520	; 0x5f0
   12e68:	add	r1, pc, r1
   12e6c:	ldr	r0, [pc, #3908]	; 13db8 <__assert_fail@plt+0x3238>
   12e70:	ldr	r4, [r1, #8]
   12e74:	ldr	r6, [r1, #12]
   12e78:	add	r1, lr, #4
   12e7c:	str	r1, [sp, #24]
   12e80:	mov	r1, ip
   12e84:	ldr	ip, [sp, #24]
   12e88:	add	r0, pc, r0
   12e8c:	mov	r5, #0
   12e90:	add	lr, sl, #900	; 0x384
   12e94:	str	r4, [sp, #28]
   12e98:	str	r6, [sp, #32]
   12e9c:	cmp	r1, #0
   12ea0:	movne	r4, r2
   12ea4:	movne	r6, r9
   12ea8:	movne	r5, #1
   12eac:	ldrb	r1, [r0, fp]
   12eb0:	b	12ed0 <__assert_fail@plt+0x2350>
   12eb4:	lsl	r2, r2, #1
   12eb8:	ldrsh	r2, [r8, r2]
   12ebc:	cmp	r2, #90	; 0x5a
   12ec0:	addgt	r1, sl, r1
   12ec4:	lsl	r3, r2, #1
   12ec8:	ldrbgt	r1, [r1, #652]	; 0x28c
   12ecc:	ldrsh	r3, [r7, r3]
   12ed0:	add	r3, r3, r1
   12ed4:	lsl	r3, r3, #1
   12ed8:	ldrsh	fp, [lr, r3]
   12edc:	cmp	fp, r2
   12ee0:	bne	12eb4 <__assert_fail@plt+0x2334>
   12ee4:	ldrsh	r2, [ip, r3]
   12ee8:	cmp	r2, #90	; 0x5a
   12eec:	beq	12f0c <__assert_fail@plt+0x238c>
   12ef0:	lsl	r3, r2, #1
   12ef4:	add	fp, sl, #688	; 0x2b0
   12ef8:	add	r1, sl, #256	; 0x100
   12efc:	ldrsh	r1, [r1, r3]
   12f00:	ldrsh	r3, [fp, r3]
   12f04:	ldrb	fp, [r9, #1]!
   12f08:	b	12e9c <__assert_fail@plt+0x231c>
   12f0c:	cmp	r5, #0
   12f10:	beq	136d8 <__assert_fail@plt+0x2b58>
   12f14:	ldr	r3, [pc, #3744]	; 13dbc <__assert_fail@plt+0x323c>
   12f18:	add	r3, pc, r3
   12f1c:	str	r6, [r3, #12]
   12f20:	str	r4, [r3, #8]
   12f24:	ldr	r9, [pc, #3732]	; 13dc0 <__assert_fail@plt+0x3240>
   12f28:	ldr	r3, [pc, #3732]	; 13dc4 <__assert_fail@plt+0x3244>
   12f2c:	ldr	r5, [pc, #3732]	; 13dc8 <__assert_fail@plt+0x3248>
   12f30:	add	r9, pc, r9
   12f34:	ldr	r2, [pc, #3728]	; 13dcc <__assert_fail@plt+0x324c>
   12f38:	add	r3, pc, r3
   12f3c:	mov	fp, sl
   12f40:	add	r5, pc, r5
   12f44:	mov	sl, r9
   12f48:	add	r2, pc, r2
   12f4c:	add	r3, r3, #256	; 0x100
   12f50:	str	r2, [sp, #36]	; 0x24
   12f54:	str	r3, [sp, #24]
   12f58:	ldr	r0, [sp, #8]
   12f5c:	ldr	r1, [sp, #16]
   12f60:	ldr	r3, [sp, #24]
   12f64:	sub	r2, r6, r1
   12f68:	str	r1, [r0]
   12f6c:	ldr	r1, [sp, #20]
   12f70:	lsl	r4, r4, #1
   12f74:	str	r6, [r5, #4]
   12f78:	str	r2, [r1]
   12f7c:	ldr	r2, [pc, #3660]	; 13dd0 <__assert_fail@plt+0x3250>
   12f80:	ldrsh	r3, [r3, r4]
   12f84:	add	r2, pc, r2
   12f88:	str	r2, [sp, #32]
   12f8c:	ldrb	r2, [r6]
   12f90:	ldr	r1, [pc, #3644]	; 13dd4 <__assert_fail@plt+0x3254>
   12f94:	strb	r2, [r5, #28]
   12f98:	add	r1, pc, r1
   12f9c:	mov	r2, #0
   12fa0:	str	r1, [sp, #28]
   12fa4:	strb	r2, [r6]
   12fa8:	cmp	r3, #21
   12fac:	addls	pc, pc, r3, lsl #2
   12fb0:	b	14150 <__assert_fail@plt+0x35d0>
   12fb4:	b	1356c <__assert_fail@plt+0x29ec>
   12fb8:	b	13528 <__assert_fail@plt+0x29a8>
   12fbc:	b	135d8 <__assert_fail@plt+0x2a58>
   12fc0:	b	13ff8 <__assert_fail@plt+0x3478>
   12fc4:	b	13588 <__assert_fail@plt+0x2a08>
   12fc8:	b	1361c <__assert_fail@plt+0x2a9c>
   12fcc:	b	134c0 <__assert_fail@plt+0x2940>
   12fd0:	b	13410 <__assert_fail@plt+0x2890>
   12fd4:	b	133cc <__assert_fail@plt+0x284c>
   12fd8:	b	13388 <__assert_fail@plt+0x2808>
   12fdc:	b	13340 <__assert_fail@plt+0x27c0>
   12fe0:	b	132fc <__assert_fail@plt+0x277c>
   12fe4:	b	132ac <__assert_fail@plt+0x272c>
   12fe8:	b	13250 <__assert_fail@plt+0x26d0>
   12fec:	b	1320c <__assert_fail@plt+0x268c>
   12ff0:	b	131b8 <__assert_fail@plt+0x2638>
   12ff4:	b	13138 <__assert_fail@plt+0x25b8>
   12ff8:	b	130cc <__assert_fail@plt+0x254c>
   12ffc:	b	13018 <__assert_fail@plt+0x2498>
   13000:	b	1300c <__assert_fail@plt+0x248c>
   13004:	b	1300c <__assert_fail@plt+0x248c>
   13008:	b	1300c <__assert_fail@plt+0x248c>
   1300c:	mov	r0, #0
   13010:	add	sp, sp, #68	; 0x44
   13014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13018:	ldr	r1, [sp, #32]
   1301c:	ldr	r2, [sp, #8]
   13020:	ldrb	r3, [r1, #28]
   13024:	ldr	r0, [r1, #16]
   13028:	ldr	ip, [r1, #20]
   1302c:	ldr	r2, [r2]
   13030:	strb	r3, [r6]
   13034:	ldr	r3, [r0, ip, lsl #2]
   13038:	sub	r2, r6, r2
   1303c:	sub	r2, r2, #1
   13040:	str	r2, [sp, #52]	; 0x34
   13044:	ldr	r2, [r3, #44]	; 0x2c
   13048:	str	r0, [sp, #44]	; 0x2c
   1304c:	cmp	r2, #0
   13050:	beq	13700 <__assert_fail@plt+0x2b80>
   13054:	ldr	lr, [r1, #24]
   13058:	ldr	r2, [sp, #28]
   1305c:	ldr	r0, [r3, #4]
   13060:	ldr	r1, [r2, #4]
   13064:	ldr	r2, [sp, #8]
   13068:	add	r9, r0, lr
   1306c:	cmp	r9, r1
   13070:	ldr	r2, [r2]
   13074:	bcs	14010 <__assert_fail@plt+0x3490>
   13078:	add	lr, lr, #1
   1307c:	add	lr, r0, lr
   13080:	cmp	r1, lr
   13084:	bhi	14004 <__assert_fail@plt+0x3484>
   13088:	ldr	lr, [r3, #40]	; 0x28
   1308c:	sub	r4, r1, r2
   13090:	cmp	lr, #0
   13094:	bne	1383c <__assert_fail@plt+0x2cbc>
   13098:	cmp	r4, #1
   1309c:	bne	13be4 <__assert_fail@plt+0x3064>
   130a0:	ldr	r2, [pc, #3376]	; 13dd8 <__assert_fail@plt+0x3258>
   130a4:	ldr	r3, [sp, #8]
   130a8:	add	r2, pc, r2
   130ac:	ldr	r1, [r3]
   130b0:	ldr	r3, [r2]
   130b4:	str	r1, [r2, #4]
   130b8:	sub	r3, r3, #1
   130bc:	add	r3, r3, r3, lsr #31
   130c0:	asr	r3, r3, #1
   130c4:	add	r3, r3, #19
   130c8:	b	12fa8 <__assert_fail@plt+0x2428>
   130cc:	ldr	r0, [sp, #12]
   130d0:	ldr	r3, [pc, #3332]	; 13ddc <__assert_fail@plt+0x325c>
   130d4:	ldr	r1, [sp, #20]
   130d8:	mov	r2, #1
   130dc:	ldr	r3, [r0, r3]
   130e0:	ldr	r0, [sp, #8]
   130e4:	ldr	r1, [r1]
   130e8:	ldr	r3, [r3]
   130ec:	ldr	r0, [r0]
   130f0:	bl	10a24 <fwrite@plt>
   130f4:	ldr	r2, [pc, #3300]	; 13de0 <__assert_fail@plt+0x3260>
   130f8:	ldr	r3, [pc, #3300]	; 13de4 <__assert_fail@plt+0x3264>
   130fc:	mov	sl, r8
   13100:	add	r2, pc, r2
   13104:	mov	r8, fp
   13108:	add	r3, pc, r3
   1310c:	ldr	r2, [r2]
   13110:	add	r0, r3, #256	; 0x100
   13114:	add	r3, r3, #688	; 0x2b0
   13118:	lsl	r1, r2, #1
   1311c:	ldrsh	ip, [r0, r1]
   13120:	ldrsh	r1, [r3, r1]
   13124:	ldr	r3, [pc, #3260]	; 13de8 <__assert_fail@plt+0x3268>
   13128:	add	r3, pc, r3
   1312c:	ldrb	fp, [r3, #28]
   13130:	ldr	r9, [r3, #4]
   13134:	b	12e48 <__assert_fail@plt+0x22c8>
   13138:	ldr	r4, [pc, #3244]	; 13dec <__assert_fail@plt+0x326c>
   1313c:	ldr	r3, [pc, #3224]	; 13ddc <__assert_fail@plt+0x325c>
   13140:	ldr	r2, [sp, #12]
   13144:	add	r4, pc, r4
   13148:	mov	sl, r8
   1314c:	ldr	r5, [r2, r3]
   13150:	ldr	r3, [r4, #40]	; 0x28
   13154:	mov	r8, fp
   13158:	cmp	r3, #0
   1315c:	ldr	r3, [r5]
   13160:	beq	13bbc <__assert_fail@plt+0x303c>
   13164:	ldr	r4, [sp, #8]
   13168:	ldr	r1, [sp, #20]
   1316c:	mov	r2, #1
   13170:	ldr	r0, [r4]
   13174:	ldr	r1, [r1]
   13178:	bl	10a24 <fwrite@plt>
   1317c:	ldr	r3, [r4]
   13180:	ldrb	r3, [r3]
   13184:	cmp	r3, #91	; 0x5b
   13188:	beq	13a14 <__assert_fail@plt+0x2e94>
   1318c:	and	r3, r3, #191	; 0xbf
   13190:	cmp	r3, #59	; 0x3b
   13194:	bne	13cdc <__assert_fail@plt+0x315c>
   13198:	ldr	r3, [pc, #3152]	; 13df0 <__assert_fail@plt+0x3270>
   1319c:	mov	r1, #5
   131a0:	add	r3, pc, r3
   131a4:	mov	r2, r1
   131a8:	str	r1, [r3]
   131ac:	mov	ip, #14
   131b0:	mov	r1, #50	; 0x32
   131b4:	b	13124 <__assert_fail@plt+0x25a4>
   131b8:	ldr	r4, [pc, #3124]	; 13df4 <__assert_fail@plt+0x3274>
   131bc:	mov	r2, #1
   131c0:	add	r4, pc, r4
   131c4:	ldr	r3, [pc, #3088]	; 13ddc <__assert_fail@plt+0x325c>
   131c8:	str	r2, [r4, #44]	; 0x2c
   131cc:	ldr	r2, [sp, #12]
   131d0:	mov	r0, #32
   131d4:	mov	sl, r8
   131d8:	ldr	r3, [r2, r3]
   131dc:	mov	r8, fp
   131e0:	ldr	r1, [r3]
   131e4:	bl	10b44 <fputc@plt>
   131e8:	ldr	r2, [r4]
   131ec:	ldr	r3, [pc, #3076]	; 13df8 <__assert_fail@plt+0x3278>
   131f0:	add	r3, pc, r3
   131f4:	lsl	r1, r2, #1
   131f8:	add	r0, r3, #256	; 0x100
   131fc:	add	r3, r3, #688	; 0x2b0
   13200:	ldrsh	ip, [r0, r1]
   13204:	ldrsh	r1, [r3, r1]
   13208:	b	13124 <__assert_fail@plt+0x25a4>
   1320c:	ldr	r0, [sp, #12]
   13210:	ldr	r3, [pc, #3012]	; 13ddc <__assert_fail@plt+0x325c>
   13214:	ldr	r1, [sp, #20]
   13218:	mov	r2, #1
   1321c:	ldr	r3, [r0, r3]
   13220:	ldr	r0, [sp, #8]
   13224:	ldr	r1, [r1]
   13228:	ldr	r3, [r3]
   1322c:	ldr	r0, [r0]
   13230:	bl	10a24 <fwrite@plt>
   13234:	ldr	r2, [pc, #3008]	; 13dfc <__assert_fail@plt+0x327c>
   13238:	ldr	r3, [pc, #3008]	; 13e00 <__assert_fail@plt+0x3280>
   1323c:	mov	sl, r8
   13240:	add	r2, pc, r2
   13244:	mov	r8, fp
   13248:	add	r3, pc, r3
   1324c:	b	1310c <__assert_fail@plt+0x258c>
   13250:	ldr	r0, [sp, #12]
   13254:	ldr	r3, [pc, #2944]	; 13ddc <__assert_fail@plt+0x325c>
   13258:	ldr	r4, [sp, #8]
   1325c:	ldr	r1, [sp, #20]
   13260:	ldr	r3, [r0, r3]
   13264:	mov	r2, #1
   13268:	ldr	r1, [r1]
   1326c:	ldr	r3, [r3]
   13270:	ldr	r0, [r4]
   13274:	bl	10a24 <fwrite@plt>
   13278:	ldr	r0, [r4]
   1327c:	bl	116cc <__assert_fail@plt+0xb4c>
   13280:	ldr	r3, [pc, #2940]	; 13e04 <__assert_fail@plt+0x3284>
   13284:	mov	r1, #1
   13288:	add	r3, pc, r3
   1328c:	mov	sl, r8
   13290:	mov	r2, r1
   13294:	str	r1, [r3]
   13298:	mov	r8, fp
   1329c:	mov	r1, #0
   132a0:	mov	ip, #14
   132a4:	str	r0, [r3, #56]	; 0x38
   132a8:	b	13124 <__assert_fail@plt+0x25a4>
   132ac:	ldr	r0, [sp, #12]
   132b0:	ldr	r3, [pc, #2852]	; 13ddc <__assert_fail@plt+0x325c>
   132b4:	ldr	r1, [sp, #20]
   132b8:	mov	r2, #1
   132bc:	ldr	r3, [r0, r3]
   132c0:	ldr	r0, [sp, #8]
   132c4:	ldr	r1, [r1]
   132c8:	ldr	r3, [r3]
   132cc:	ldr	r0, [r0]
   132d0:	bl	10a24 <fwrite@plt>
   132d4:	ldr	r3, [pc, #2860]	; 13e08 <__assert_fail@plt+0x3288>
   132d8:	mov	sl, r8
   132dc:	add	r3, pc, r3
   132e0:	mov	r8, fp
   132e4:	mov	r1, #1
   132e8:	mov	r2, r1
   132ec:	str	r1, [r3]
   132f0:	mov	ip, #14
   132f4:	mov	r1, #0
   132f8:	b	13124 <__assert_fail@plt+0x25a4>
   132fc:	ldr	r0, [sp, #12]
   13300:	ldr	r3, [pc, #2772]	; 13ddc <__assert_fail@plt+0x325c>
   13304:	ldr	r1, [sp, #20]
   13308:	mov	r2, #1
   1330c:	ldr	r3, [r0, r3]
   13310:	ldr	r0, [sp, #8]
   13314:	ldr	r1, [r1]
   13318:	ldr	r3, [r3]
   1331c:	ldr	r0, [r0]
   13320:	bl	10a24 <fwrite@plt>
   13324:	ldr	r2, [pc, #2784]	; 13e0c <__assert_fail@plt+0x328c>
   13328:	ldr	r3, [pc, #2784]	; 13e10 <__assert_fail@plt+0x3290>
   1332c:	mov	sl, r8
   13330:	add	r2, pc, r2
   13334:	mov	r8, fp
   13338:	add	r3, pc, r3
   1333c:	b	1310c <__assert_fail@plt+0x258c>
   13340:	ldr	r1, [pc, #2708]	; 13ddc <__assert_fail@plt+0x325c>
   13344:	ldr	r0, [sp, #12]
   13348:	ldr	r3, [sp, #8]
   1334c:	ldr	r2, [pc, #2752]	; 13e14 <__assert_fail@plt+0x3294>
   13350:	ldr	r0, [r0, r1]
   13354:	ldr	r3, [r3]
   13358:	add	r2, pc, r2
   1335c:	add	r3, r3, #2
   13360:	mov	r1, #1
   13364:	ldr	r0, [r0]
   13368:	bl	10b20 <__fprintf_chk@plt>
   1336c:	ldr	r2, [pc, #2724]	; 13e18 <__assert_fail@plt+0x3298>
   13370:	ldr	r3, [pc, #2724]	; 13e1c <__assert_fail@plt+0x329c>
   13374:	mov	sl, r8
   13378:	add	r2, pc, r2
   1337c:	mov	r8, fp
   13380:	add	r3, pc, r3
   13384:	b	1310c <__assert_fail@plt+0x258c>
   13388:	ldr	r0, [sp, #12]
   1338c:	ldr	r3, [pc, #2632]	; 13ddc <__assert_fail@plt+0x325c>
   13390:	ldr	r1, [sp, #20]
   13394:	mov	r2, #1
   13398:	ldr	r3, [r0, r3]
   1339c:	ldr	r0, [sp, #8]
   133a0:	ldr	r1, [r1]
   133a4:	ldr	r3, [r3]
   133a8:	ldr	r0, [r0]
   133ac:	bl	10a24 <fwrite@plt>
   133b0:	ldr	r2, [pc, #2664]	; 13e20 <__assert_fail@plt+0x32a0>
   133b4:	ldr	r3, [pc, #2664]	; 13e24 <__assert_fail@plt+0x32a4>
   133b8:	mov	sl, r8
   133bc:	add	r2, pc, r2
   133c0:	mov	r8, fp
   133c4:	add	r3, pc, r3
   133c8:	b	1310c <__assert_fail@plt+0x258c>
   133cc:	ldr	r0, [sp, #12]
   133d0:	ldr	r3, [pc, #2564]	; 13ddc <__assert_fail@plt+0x325c>
   133d4:	ldr	r1, [sp, #20]
   133d8:	mov	r2, #1
   133dc:	ldr	r3, [r0, r3]
   133e0:	ldr	r0, [sp, #8]
   133e4:	ldr	r1, [r1]
   133e8:	ldr	r3, [r3]
   133ec:	ldr	r0, [r0]
   133f0:	bl	10a24 <fwrite@plt>
   133f4:	ldr	r2, [pc, #2604]	; 13e28 <__assert_fail@plt+0x32a8>
   133f8:	ldr	r3, [pc, #2604]	; 13e2c <__assert_fail@plt+0x32ac>
   133fc:	mov	sl, r8
   13400:	add	r2, pc, r2
   13404:	mov	r8, fp
   13408:	add	r3, pc, r3
   1340c:	b	1310c <__assert_fail@plt+0x258c>
   13410:	ldr	r3, [pc, #2584]	; 13e30 <__assert_fail@plt+0x32b0>
   13414:	ldr	r2, [sp, #8]
   13418:	add	r3, pc, r3
   1341c:	mov	r1, #0
   13420:	ldr	r9, [r3]
   13424:	ldr	r0, [r2]
   13428:	mov	r2, r9
   1342c:	bl	10afc <strtoull@plt>
   13430:	ldr	r2, [pc, #2556]	; 13e34 <__assert_fail@plt+0x32b4>
   13434:	mov	sl, r8
   13438:	add	r2, pc, r2
   1343c:	mov	r8, fp
   13440:	ldr	r3, [r2, #44]	; 0x2c
   13444:	cmp	r3, #0
   13448:	mov	r4, r0
   1344c:	mov	r5, r1
   13450:	bne	136e4 <__assert_fail@plt+0x2b64>
   13454:	ldr	r3, [pc, #2524]	; 13e38 <__assert_fail@plt+0x32b8>
   13458:	add	r3, pc, r3
   1345c:	ldr	r1, [r3, #56]	; 0x38
   13460:	cmp	r1, #0
   13464:	bne	1392c <__assert_fail@plt+0x2dac>
   13468:	cmp	r9, #16
   1346c:	movne	r6, #16
   13470:	beq	13780 <__assert_fail@plt+0x2c00>
   13474:	sub	r3, r9, #2
   13478:	cmp	r3, #14
   1347c:	addls	pc, pc, r3, lsl #2
   13480:	b	1368c <__assert_fail@plt+0x2b0c>
   13484:	b	1377c <__assert_fail@plt+0x2bfc>
   13488:	b	1368c <__assert_fail@plt+0x2b0c>
   1348c:	b	1368c <__assert_fail@plt+0x2b0c>
   13490:	b	1368c <__assert_fail@plt+0x2b0c>
   13494:	b	1368c <__assert_fail@plt+0x2b0c>
   13498:	b	1368c <__assert_fail@plt+0x2b0c>
   1349c:	b	13768 <__assert_fail@plt+0x2be8>
   134a0:	b	1368c <__assert_fail@plt+0x2b0c>
   134a4:	b	13660 <__assert_fail@plt+0x2ae0>
   134a8:	b	1368c <__assert_fail@plt+0x2b0c>
   134ac:	b	1368c <__assert_fail@plt+0x2b0c>
   134b0:	b	1368c <__assert_fail@plt+0x2b0c>
   134b4:	b	1368c <__assert_fail@plt+0x2b0c>
   134b8:	b	1368c <__assert_fail@plt+0x2b0c>
   134bc:	b	1377c <__assert_fail@plt+0x2bfc>
   134c0:	ldr	r3, [sp, #8]
   134c4:	mov	sl, r8
   134c8:	mov	r8, fp
   134cc:	ldr	r3, [r3]
   134d0:	ldrb	r3, [r3]
   134d4:	cmp	r3, #98	; 0x62
   134d8:	beq	139d8 <__assert_fail@plt+0x2e58>
   134dc:	cmp	r3, #111	; 0x6f
   134e0:	beq	1372c <__assert_fail@plt+0x2bac>
   134e4:	cmp	r3, #100	; 0x64
   134e8:	beq	13f9c <__assert_fail@plt+0x341c>
   134ec:	ldr	r2, [pc, #2376]	; 13e3c <__assert_fail@plt+0x32bc>
   134f0:	ldr	r3, [pc, #2376]	; 13e40 <__assert_fail@plt+0x32c0>
   134f4:	add	r2, pc, r2
   134f8:	ldr	r0, [pc, #2372]	; 13e44 <__assert_fail@plt+0x32c4>
   134fc:	ldr	r2, [r2]
   13500:	add	r3, pc, r3
   13504:	add	ip, r3, #256	; 0x100
   13508:	lsl	r1, r2, #1
   1350c:	add	r0, pc, r0
   13510:	add	r3, r3, #688	; 0x2b0
   13514:	mov	lr, #16
   13518:	ldrsh	ip, [ip, r1]
   1351c:	str	lr, [r0]
   13520:	ldrsh	r1, [r3, r1]
   13524:	b	13124 <__assert_fail@plt+0x25a4>
   13528:	ldr	r0, [sp, #12]
   1352c:	ldr	r3, [pc, #2216]	; 13ddc <__assert_fail@plt+0x325c>
   13530:	ldr	r1, [sp, #20]
   13534:	mov	r2, #1
   13538:	ldr	r3, [r0, r3]
   1353c:	ldr	r0, [sp, #8]
   13540:	ldr	r1, [r1]
   13544:	ldr	r3, [r3]
   13548:	ldr	r0, [r0]
   1354c:	bl	10a24 <fwrite@plt>
   13550:	ldr	r2, [pc, #2288]	; 13e48 <__assert_fail@plt+0x32c8>
   13554:	ldr	r3, [pc, #2288]	; 13e4c <__assert_fail@plt+0x32cc>
   13558:	mov	sl, r8
   1355c:	add	r2, pc, r2
   13560:	mov	r8, fp
   13564:	add	r3, pc, r3
   13568:	b	1310c <__assert_fail@plt+0x258c>
   1356c:	ldr	r3, [pc, #2268]	; 13e50 <__assert_fail@plt+0x32d0>
   13570:	add	r3, pc, r3
   13574:	ldrb	r2, [r3, #28]
   13578:	ldr	r4, [r3, #8]
   1357c:	strb	r2, [r6]
   13580:	ldr	r6, [r3, #12]
   13584:	b	12f58 <__assert_fail@plt+0x23d8>
   13588:	ldr	r4, [pc, #2244]	; 13e54 <__assert_fail@plt+0x32d4>
   1358c:	ldr	r3, [pc, #2120]	; 13ddc <__assert_fail@plt+0x325c>
   13590:	ldr	r2, [sp, #12]
   13594:	add	r4, pc, r4
   13598:	mov	sl, r8
   1359c:	ldr	r5, [r2, r3]
   135a0:	ldr	r3, [r4, #40]	; 0x28
   135a4:	mov	r8, fp
   135a8:	cmp	r3, #0
   135ac:	ldr	r3, [r5]
   135b0:	beq	139b4 <__assert_fail@plt+0x2e34>
   135b4:	ldr	r1, [sp, #20]
   135b8:	ldr	r0, [sp, #8]
   135bc:	mov	r2, #1
   135c0:	ldr	r1, [r1]
   135c4:	ldr	r0, [r0]
   135c8:	bl	10a24 <fwrite@plt>
   135cc:	ldr	r3, [pc, #2180]	; 13e58 <__assert_fail@plt+0x32d8>
   135d0:	add	r3, pc, r3
   135d4:	b	132e4 <__assert_fail@plt+0x2764>
   135d8:	ldr	r0, [sp, #12]
   135dc:	ldr	r3, [pc, #2040]	; 13ddc <__assert_fail@plt+0x325c>
   135e0:	ldr	r1, [sp, #20]
   135e4:	mov	r2, #1
   135e8:	ldr	r3, [r0, r3]
   135ec:	ldr	r0, [sp, #8]
   135f0:	ldr	r1, [r1]
   135f4:	ldr	r3, [r3]
   135f8:	ldr	r0, [r0]
   135fc:	bl	10a24 <fwrite@plt>
   13600:	ldr	r2, [pc, #2132]	; 13e5c <__assert_fail@plt+0x32dc>
   13604:	ldr	r3, [pc, #2132]	; 13e60 <__assert_fail@plt+0x32e0>
   13608:	mov	sl, r8
   1360c:	add	r2, pc, r2
   13610:	mov	r8, fp
   13614:	add	r3, pc, r3
   13618:	b	1310c <__assert_fail@plt+0x258c>
   1361c:	ldr	r0, [sp, #12]
   13620:	ldr	r3, [pc, #1972]	; 13ddc <__assert_fail@plt+0x325c>
   13624:	ldr	r1, [sp, #20]
   13628:	mov	r2, #1
   1362c:	ldr	r3, [r0, r3]
   13630:	ldr	r0, [sp, #8]
   13634:	ldr	r1, [r1]
   13638:	ldr	r3, [r3]
   1363c:	ldr	r0, [r0]
   13640:	bl	10a24 <fwrite@plt>
   13644:	ldr	r2, [pc, #2072]	; 13e64 <__assert_fail@plt+0x32e4>
   13648:	ldr	r3, [pc, #2072]	; 13e68 <__assert_fail@plt+0x32e8>
   1364c:	mov	sl, r8
   13650:	add	r2, pc, r2
   13654:	mov	r8, fp
   13658:	add	r3, pc, r3
   1365c:	b	1310c <__assert_fail@plt+0x258c>
   13660:	ldr	r2, [pc, #2052]	; 13e6c <__assert_fail@plt+0x32ec>
   13664:	ldr	r1, [pc, #1904]	; 13ddc <__assert_fail@plt+0x325c>
   13668:	mov	r3, r6
   1366c:	add	r2, pc, r2
   13670:	ldr	r0, [sp, #12]
   13674:	ldr	r0, [r0, r1]
   13678:	str	r4, [sp]
   1367c:	mov	r1, #1
   13680:	ldr	r0, [r0]
   13684:	str	r5, [sp, #4]
   13688:	bl	10b20 <__fprintf_chk@plt>
   1368c:	ldr	r1, [pc, #2012]	; 13e70 <__assert_fail@plt+0x32f0>
   13690:	ldr	r3, [pc, #2012]	; 13e74 <__assert_fail@plt+0x32f4>
   13694:	add	r1, pc, r1
   13698:	ldr	r0, [pc, #2008]	; 13e78 <__assert_fail@plt+0x32f8>
   1369c:	ldr	r2, [r1]
   136a0:	add	r3, pc, r3
   136a4:	mov	lr, #0
   136a8:	add	ip, r3, #256	; 0x100
   136ac:	str	lr, [r1, #44]	; 0x2c
   136b0:	add	r0, pc, r0
   136b4:	str	r4, [r1, #48]	; 0x30
   136b8:	add	r3, r3, #688	; 0x2b0
   136bc:	str	r5, [r1, #52]	; 0x34
   136c0:	lsl	r1, r2, #1
   136c4:	mov	lr, #16
   136c8:	ldrsh	ip, [ip, r1]
   136cc:	str	lr, [r0]
   136d0:	ldrsh	r1, [r3, r1]
   136d4:	b	13124 <__assert_fail@plt+0x25a4>
   136d8:	ldr	r6, [sp, #32]
   136dc:	ldr	r4, [sp, #28]
   136e0:	b	12f24 <__assert_fail@plt+0x23a4>
   136e4:	ldr	r3, [r2, #48]	; 0x30
   136e8:	ldr	r2, [r2, #52]	; 0x34
   136ec:	subs	r4, r0, r3
   136f0:	sbc	r5, r1, r2
   136f4:	adds	r4, r4, #1
   136f8:	adc	r5, r5, #0
   136fc:	b	13454 <__assert_fail@plt+0x28d4>
   13700:	ldr	r0, [sp, #32]
   13704:	ldr	lr, [r3, #16]
   13708:	ldr	r2, [pc, #2020]	; 13ef4 <__assert_fail@plt+0x3374>
   1370c:	str	lr, [r0, #24]
   13710:	ldr	r0, [sp, #12]
   13714:	mov	r1, #1
   13718:	ldr	r4, [r0, r2]
   1371c:	str	r1, [r3, #44]	; 0x2c
   13720:	ldr	r2, [r4]
   13724:	str	r2, [r3]
   13728:	b	13058 <__assert_fail@plt+0x24d8>
   1372c:	ldr	r2, [pc, #1864]	; 13e7c <__assert_fail@plt+0x32fc>
   13730:	ldr	r3, [pc, #1864]	; 13e80 <__assert_fail@plt+0x3300>
   13734:	add	r2, pc, r2
   13738:	ldr	r0, [pc, #1860]	; 13e84 <__assert_fail@plt+0x3304>
   1373c:	ldr	r2, [r2]
   13740:	add	r3, pc, r3
   13744:	add	ip, r3, #256	; 0x100
   13748:	lsl	r1, r2, #1
   1374c:	add	r0, pc, r0
   13750:	add	r3, r3, #688	; 0x2b0
   13754:	mov	lr, #8
   13758:	ldrsh	ip, [ip, r1]
   1375c:	str	lr, [r0]
   13760:	ldrsh	r1, [r3, r1]
   13764:	b	13124 <__assert_fail@plt+0x25a4>
   13768:	ldr	r2, [pc, #1816]	; 13e88 <__assert_fail@plt+0x3308>
   1376c:	ldr	r1, [pc, #1640]	; 13ddc <__assert_fail@plt+0x325c>
   13770:	mov	r3, r6
   13774:	add	r2, pc, r2
   13778:	b	13670 <__assert_fail@plt+0x2af0>
   1377c:	mov	r9, r6
   13780:	ldr	r2, [pc, #1796]	; 13e8c <__assert_fail@plt+0x330c>
   13784:	ldr	r1, [pc, #1616]	; 13ddc <__assert_fail@plt+0x325c>
   13788:	mov	r3, r9
   1378c:	add	r2, pc, r2
   13790:	b	13670 <__assert_fail@plt+0x2af0>
   13794:	cmp	r2, #0
   13798:	mov	r2, #1
   1379c:	streq	r2, [r3]
   137a0:	str	r2, [r3, #36]	; 0x24
   137a4:	ldr	r3, [pc, #1864]	; 13ef4 <__assert_fail@plt+0x3374>
   137a8:	ldr	r2, [sp, #12]
   137ac:	ldr	r5, [r2, r3]
   137b0:	ldr	r3, [r5]
   137b4:	cmp	r3, #0
   137b8:	beq	13f34 <__assert_fail@plt+0x33b4>
   137bc:	ldr	r2, [sp, #12]
   137c0:	ldr	r3, [pc, #1556]	; 13ddc <__assert_fail@plt+0x325c>
   137c4:	ldr	r3, [r2, r3]
   137c8:	ldr	r2, [r3]
   137cc:	cmp	r2, #0
   137d0:	beq	13d38 <__assert_fail@plt+0x31b8>
   137d4:	ldr	r2, [pc, #1716]	; 13e90 <__assert_fail@plt+0x3310>
   137d8:	add	r2, pc, r2
   137dc:	ldr	r3, [r2, #16]
   137e0:	cmp	r3, #0
   137e4:	beq	13c0c <__assert_fail@plt+0x308c>
   137e8:	ldr	r2, [r2, #20]
   137ec:	ldr	r2, [r3, r2, lsl #2]
   137f0:	cmp	r2, #0
   137f4:	beq	13c0c <__assert_fail@plt+0x308c>
   137f8:	ldr	r3, [pc, #1684]	; 13e94 <__assert_fail@plt+0x3314>
   137fc:	ldr	r0, [r2, #16]
   13800:	add	r3, pc, r3
   13804:	ldr	r1, [pc, #1432]	; 13da4 <__assert_fail@plt+0x3224>
   13808:	str	r0, [r3, #24]
   1380c:	ldr	r0, [sp, #12]
   13810:	ldr	r4, [r2, #8]
   13814:	str	r4, [r3, #4]
   13818:	ldr	r0, [r0, r1]
   1381c:	ldr	r1, [r2]
   13820:	str	r0, [sp, #8]
   13824:	str	r4, [r0]
   13828:	str	r1, [r5]
   1382c:	ldrb	fp, [r4]
   13830:	ldr	r2, [r3]
   13834:	strb	fp, [r3, #28]
   13838:	b	12dec <__assert_fail@plt+0x226c>
   1383c:	sub	lr, r4, #1
   13840:	cmp	lr, #0
   13844:	str	lr, [sp, #40]	; 0x28
   13848:	ble	1386c <__assert_fail@plt+0x2cec>
   1384c:	sub	r3, r0, #1
   13850:	add	lr, r2, lr
   13854:	ldrb	r0, [r2], #1
   13858:	cmp	r2, lr
   1385c:	strb	r0, [r3, #1]!
   13860:	bne	13854 <__assert_fail@plt+0x2cd4>
   13864:	ldr	r3, [sp, #44]	; 0x2c
   13868:	ldr	r3, [r3, ip, lsl #2]
   1386c:	ldr	r2, [r3, #44]	; 0x2c
   13870:	cmp	r2, #2
   13874:	beq	13f84 <__assert_fail@plt+0x3404>
   13878:	ldr	r2, [r3, #12]
   1387c:	ldr	r0, [sp, #40]	; 0x28
   13880:	sub	r2, r2, r0
   13884:	sub	r2, r2, #1
   13888:	cmp	r2, #0
   1388c:	bgt	13a48 <__assert_fail@plt+0x2ec8>
   13890:	str	r4, [sp, #44]	; 0x2c
   13894:	mov	r9, r3
   13898:	mov	r4, sl
   1389c:	mov	sl, r7
   138a0:	mov	r7, r5
   138a4:	b	13908 <__assert_fail@plt+0x2d88>
   138a8:	ldr	r1, [r9, #12]
   138ac:	cmp	r1, #0
   138b0:	lslgt	r1, r1, #1
   138b4:	bgt	138c4 <__assert_fail@plt+0x2d44>
   138b8:	add	r2, r1, #7
   138bc:	movge	r2, r1
   138c0:	add	r1, r1, r2, asr #3
   138c4:	str	r1, [r9, #12]
   138c8:	add	r1, r1, #2
   138cc:	bl	12944 <__assert_fail@plt+0x1dc4>
   138d0:	cmp	r0, #0
   138d4:	str	r0, [r9, #4]
   138d8:	beq	13920 <__assert_fail@plt+0x2da0>
   138dc:	ldr	r2, [r4, #16]
   138e0:	ldr	ip, [r4, #20]
   138e4:	ldr	r3, [sp, #40]	; 0x28
   138e8:	add	r1, r0, r5
   138ec:	ldr	r9, [r2, ip, lsl #2]
   138f0:	str	r1, [r4, #4]
   138f4:	ldr	r2, [r9, #12]
   138f8:	sub	r2, r2, r3
   138fc:	sub	r2, r2, #1
   13900:	cmp	r2, #0
   13904:	bgt	13a34 <__assert_fail@plt+0x2eb4>
   13908:	ldr	r2, [r9, #20]
   1390c:	ldr	r0, [r9, #4]
   13910:	cmp	r2, #0
   13914:	sub	r5, r1, r0
   13918:	bne	138a8 <__assert_fail@plt+0x2d28>
   1391c:	str	r2, [r9, #4]
   13920:	ldr	r0, [pc, #1392]	; 13e98 <__assert_fail@plt+0x3318>
   13924:	add	r0, pc, r0
   13928:	bl	12644 <__assert_fail@plt+0x1ac4>
   1392c:	ldr	r9, [pc, #1384]	; 13e9c <__assert_fail@plt+0x331c>
   13930:	ldr	r0, [pc, #1384]	; 13ea0 <__assert_fail@plt+0x3320>
   13934:	add	r9, pc, r9
   13938:	add	r3, r9, #192	; 0xc0
   1393c:	ldr	fp, [pc, #1376]	; 13ea4 <__assert_fail@plt+0x3324>
   13940:	mov	r2, #16
   13944:	str	r4, [sp, #24]
   13948:	mov	r4, r3
   1394c:	mov	r3, r5
   13950:	add	r0, pc, r0
   13954:	mov	r5, r9
   13958:	mov	r6, #0
   1395c:	str	r2, [sp, #16]
   13960:	add	fp, pc, fp
   13964:	mov	r9, r3
   13968:	b	13974 <__assert_fail@plt+0x2df4>
   1396c:	ldr	r0, [r5, #12]!
   13970:	ldr	r1, [fp, #56]	; 0x38
   13974:	mov	r2, #0
   13978:	bl	10a3c <fnmatch@plt>
   1397c:	cmp	r0, #0
   13980:	ldreq	r3, [r5, #4]
   13984:	ldreq	r6, [r5, #8]
   13988:	streq	r3, [sp, #16]
   1398c:	cmp	r4, r5
   13990:	bne	1396c <__assert_fail@plt+0x2dec>
   13994:	ldr	r3, [pc, #1292]	; 13ea8 <__assert_fail@plt+0x3328>
   13998:	mov	r5, r9
   1399c:	ldr	r4, [sp, #24]
   139a0:	ldr	r9, [pc, r3]
   139a4:	ldr	r3, [sp, #16]
   139a8:	cmp	r9, #16
   139ac:	moveq	r9, r3
   139b0:	b	13474 <__assert_fail@plt+0x28f4>
   139b4:	ldr	r0, [pc, #1264]	; 13eac <__assert_fail@plt+0x332c>
   139b8:	mov	r2, #11
   139bc:	mov	r1, #1
   139c0:	add	r0, pc, r0
   139c4:	bl	10a24 <fwrite@plt>
   139c8:	mov	r2, #1
   139cc:	ldr	r3, [r5]
   139d0:	str	r2, [r4, #40]	; 0x28
   139d4:	b	135b4 <__assert_fail@plt+0x2a34>
   139d8:	ldr	r2, [pc, #1232]	; 13eb0 <__assert_fail@plt+0x3330>
   139dc:	ldr	r3, [pc, #1232]	; 13eb4 <__assert_fail@plt+0x3334>
   139e0:	add	r2, pc, r2
   139e4:	ldr	r0, [pc, #1228]	; 13eb8 <__assert_fail@plt+0x3338>
   139e8:	ldr	r2, [r2]
   139ec:	add	r3, pc, r3
   139f0:	add	ip, r3, #256	; 0x100
   139f4:	lsl	r1, r2, #1
   139f8:	add	r0, pc, r0
   139fc:	add	r3, r3, #688	; 0x2b0
   13a00:	mov	lr, #2
   13a04:	ldrsh	ip, [ip, r1]
   13a08:	str	lr, [r0]
   13a0c:	ldrsh	r1, [r3, r1]
   13a10:	b	13124 <__assert_fail@plt+0x25a4>
   13a14:	ldr	r3, [pc, #1184]	; 13ebc <__assert_fail@plt+0x333c>
   13a18:	mov	r1, #3
   13a1c:	add	r3, pc, r3
   13a20:	mov	r2, r1
   13a24:	str	r1, [r3]
   13a28:	mov	ip, #14
   13a2c:	mov	r1, #28
   13a30:	b	13124 <__assert_fail@plt+0x25a4>
   13a34:	mov	r5, r7
   13a38:	mov	r7, sl
   13a3c:	mov	sl, r4
   13a40:	ldr	r4, [sp, #44]	; 0x2c
   13a44:	mov	r3, r9
   13a48:	ldr	r1, [r3, #24]
   13a4c:	cmp	r2, #8192	; 0x2000
   13a50:	movge	r2, #8192	; 0x2000
   13a54:	cmp	r1, #0
   13a58:	str	r1, [sp, #44]	; 0x2c
   13a5c:	str	r2, [sp, #48]	; 0x30
   13a60:	bne	13c3c <__assert_fail@plt+0x30bc>
   13a64:	str	r3, [sp, #60]	; 0x3c
   13a68:	bl	10acc <__errno_location@plt>
   13a6c:	ldr	r3, [sp, #12]
   13a70:	ldr	r2, [pc, #1148]	; 13ef4 <__assert_fail@plt+0x3374>
   13a74:	ldr	r1, [sp, #44]	; 0x2c
   13a78:	ldr	r9, [pc, #1088]	; 13ec0 <__assert_fail@plt+0x3340>
   13a7c:	add	r9, pc, r9
   13a80:	str	r0, [sp, #56]	; 0x38
   13a84:	str	r1, [r0]
   13a88:	ldr	r4, [r3, r2]
   13a8c:	ldr	r3, [sp, #60]	; 0x3c
   13a90:	b	13ad4 <__assert_fail@plt+0x2f54>
   13a94:	str	r0, [sp, #60]	; 0x3c
   13a98:	ldr	r0, [r4]
   13a9c:	bl	109e8 <ferror@plt>
   13aa0:	ldr	r2, [sp, #60]	; 0x3c
   13aa4:	cmp	r0, #0
   13aa8:	beq	13cf0 <__assert_fail@plt+0x3170>
   13aac:	ldr	r1, [sp, #56]	; 0x38
   13ab0:	ldr	r3, [r1]
   13ab4:	cmp	r3, #4
   13ab8:	bne	13fec <__assert_fail@plt+0x346c>
   13abc:	str	r2, [r1]
   13ac0:	ldr	r0, [r4]
   13ac4:	bl	10b50 <clearerr@plt>
   13ac8:	ldr	r2, [r9, #20]
   13acc:	ldr	r3, [r9, #16]
   13ad0:	ldr	r3, [r3, r2, lsl #2]
   13ad4:	ldr	r0, [r3, #4]
   13ad8:	ldr	r2, [sp, #40]	; 0x28
   13adc:	ldr	r3, [r4]
   13ae0:	add	r0, r0, r2
   13ae4:	mov	r1, #1
   13ae8:	ldr	r2, [sp, #48]	; 0x30
   13aec:	bl	10a30 <fread@plt>
   13af0:	cmp	r0, #0
   13af4:	mov	r2, r0
   13af8:	str	r0, [r9, #24]
   13afc:	beq	13a94 <__assert_fail@plt+0x2f14>
   13b00:	ldr	r1, [r9, #16]
   13b04:	ldr	r0, [r9, #20]
   13b08:	ldr	r9, [r1, r0, lsl #2]
   13b0c:	add	r3, r1, r0, lsl #2
   13b10:	str	r2, [r9, #16]
   13b14:	ldr	r0, [sp, #40]	; 0x28
   13b18:	ldr	r1, [r9, #12]
   13b1c:	add	ip, r0, r2
   13b20:	cmp	ip, r1
   13b24:	ldr	r0, [r9, #4]
   13b28:	bgt	13d50 <__assert_fail@plt+0x31d0>
   13b2c:	mov	lr, #0
   13b30:	strb	lr, [r0, ip]
   13b34:	ldr	r2, [r3]
   13b38:	ldr	r1, [pc, #900]	; 13ec4 <__assert_fail@plt+0x3344>
   13b3c:	ldr	r4, [sp, #44]	; 0x2c
   13b40:	ldr	r2, [r2, #4]
   13b44:	add	r1, pc, r1
   13b48:	add	r2, r2, ip
   13b4c:	cmp	r4, #1
   13b50:	strb	lr, [r2, #1]
   13b54:	ldr	r3, [r3]
   13b58:	str	ip, [r1, #24]
   13b5c:	ldr	r0, [r3, #4]
   13b60:	ldr	r3, [sp, #8]
   13b64:	str	r0, [r3]
   13b68:	beq	130a0 <__assert_fail@plt+0x2520>
   13b6c:	cmp	r4, #2
   13b70:	beq	13be0 <__assert_fail@plt+0x3060>
   13b74:	ldr	r3, [sp, #52]	; 0x34
   13b78:	mov	sl, fp
   13b7c:	add	r9, r0, r3
   13b80:	str	r9, [r1, #4]
   13b84:	bl	124a0 <__assert_fail@plt+0x1920>
   13b88:	ldr	r3, [sp, #8]
   13b8c:	ldr	r3, [r3]
   13b90:	str	r3, [sp, #16]
   13b94:	mov	r2, r0
   13b98:	ldr	r3, [pc, #808]	; 13ec8 <__assert_fail@plt+0x3348>
   13b9c:	lsl	r1, r2, #1
   13ba0:	add	r3, pc, r3
   13ba4:	add	r0, r3, #256	; 0x100
   13ba8:	add	r3, r3, #688	; 0x2b0
   13bac:	ldrsh	ip, [r0, r1]
   13bb0:	ldrsh	r3, [r3, r1]
   13bb4:	ldrb	fp, [r9]
   13bb8:	b	12e60 <__assert_fail@plt+0x22e0>
   13bbc:	ldr	r0, [pc, #776]	; 13ecc <__assert_fail@plt+0x334c>
   13bc0:	mov	r2, #11
   13bc4:	mov	r1, #1
   13bc8:	add	r0, pc, r0
   13bcc:	bl	10a24 <fwrite@plt>
   13bd0:	mov	r2, #1
   13bd4:	ldr	r3, [r5]
   13bd8:	str	r2, [r4, #40]	; 0x28
   13bdc:	b	13164 <__assert_fail@plt+0x25e4>
   13be0:	add	r9, r0, ip
   13be4:	ldr	r3, [pc, #740]	; 13ed0 <__assert_fail@plt+0x3350>
   13be8:	mov	r6, r9
   13bec:	add	r3, pc, r3
   13bf0:	str	r9, [r3, #4]
   13bf4:	bl	124a0 <__assert_fail@plt+0x1920>
   13bf8:	ldr	r3, [sp, #8]
   13bfc:	ldr	r3, [r3]
   13c00:	str	r3, [sp, #16]
   13c04:	mov	r4, r0
   13c08:	b	12f58 <__assert_fail@plt+0x23d8>
   13c0c:	ldr	r4, [pc, #704]	; 13ed4 <__assert_fail@plt+0x3354>
   13c10:	bl	12948 <__assert_fail@plt+0x1dc8>
   13c14:	add	r4, pc, r4
   13c18:	mov	r1, #16384	; 0x4000
   13c1c:	ldr	r0, [r5]
   13c20:	ldrd	r6, [r4, #16]
   13c24:	bl	128e4 <__assert_fail@plt+0x1d64>
   13c28:	ldr	r2, [r4, #20]
   13c2c:	ldr	r3, [r4, #16]
   13c30:	str	r0, [r6, r7, lsl #2]
   13c34:	ldr	r2, [r3, r2, lsl #2]
   13c38:	b	137f8 <__assert_fail@plt+0x2c78>
   13c3c:	ldr	r3, [pc, #688]	; 13ef4 <__assert_fail@plt+0x3374>
   13c40:	ldr	r1, [sp, #12]
   13c44:	sub	r9, r4, #2
   13c48:	mov	r2, #0
   13c4c:	ldr	r4, [r1, r3]
   13c50:	str	r7, [sp, #44]	; 0x2c
   13c54:	mov	r7, r5
   13c58:	mov	r5, r4
   13c5c:	mov	r4, r2
   13c60:	ldr	r0, [r5]
   13c64:	bl	10b68 <getc@plt>
   13c68:	cmn	r0, #1
   13c6c:	beq	14100 <__assert_fail@plt+0x3580>
   13c70:	ldr	r3, [sp, #36]	; 0x24
   13c74:	add	r4, r4, #1
   13c78:	add	ip, r9, r4
   13c7c:	ldr	lr, [r3, #20]
   13c80:	ldr	r3, [r3, #16]
   13c84:	cmp	r0, #10
   13c88:	ldr	r2, [r3, lr, lsl #2]
   13c8c:	add	r3, r3, lr, lsl #2
   13c90:	ldr	r2, [r2, #4]
   13c94:	add	lr, r2, ip
   13c98:	beq	13fd8 <__assert_fail@plt+0x3458>
   13c9c:	ldr	r1, [sp, #48]	; 0x30
   13ca0:	strb	r0, [r2, ip]
   13ca4:	cmp	r1, r4
   13ca8:	bne	13c60 <__assert_fail@plt+0x30e0>
   13cac:	mov	r5, r7
   13cb0:	ldr	r7, [sp, #44]	; 0x2c
   13cb4:	ldr	r2, [pc, #540]	; 13ed8 <__assert_fail@plt+0x3358>
   13cb8:	ldr	r1, [sp, #48]	; 0x30
   13cbc:	add	r2, pc, r2
   13cc0:	ldr	r9, [r3]
   13cc4:	str	r1, [r2, #24]
   13cc8:	mov	r2, r1
   13ccc:	str	r1, [r9, #16]
   13cd0:	mov	r1, #0
   13cd4:	str	r1, [sp, #44]	; 0x2c
   13cd8:	b	13b14 <__assert_fail@plt+0x2f94>
   13cdc:	ldr	r2, [pc, #504]	; 13edc <__assert_fail@plt+0x335c>
   13ce0:	ldr	r3, [pc, #504]	; 13ee0 <__assert_fail@plt+0x3360>
   13ce4:	add	r2, pc, r2
   13ce8:	add	r3, pc, r3
   13cec:	b	1310c <__assert_fail@plt+0x258c>
   13cf0:	ldr	r2, [r9, #20]
   13cf4:	ldr	r3, [r9, #16]
   13cf8:	ldr	r3, [r3, r2, lsl #2]
   13cfc:	str	r0, [r3, #16]
   13d00:	ldr	r3, [sp, #40]	; 0x28
   13d04:	cmp	r3, #0
   13d08:	beq	13f48 <__assert_fail@plt+0x33c8>
   13d0c:	ldr	r3, [pc, #464]	; 13ee4 <__assert_fail@plt+0x3364>
   13d10:	mov	r1, #2
   13d14:	add	r3, pc, r3
   13d18:	str	r1, [sp, #44]	; 0x2c
   13d1c:	ldr	ip, [r3, #20]
   13d20:	ldr	r0, [r3, #16]
   13d24:	ldr	r2, [r3, #24]
   13d28:	add	r3, r0, ip, lsl r1
   13d2c:	ldr	r9, [r0, ip, lsl #2]
   13d30:	str	r1, [r9, #44]	; 0x2c
   13d34:	b	13b14 <__assert_fail@plt+0x2f94>
   13d38:	ldr	r2, [pc, #424]	; 13ee8 <__assert_fail@plt+0x3368>
   13d3c:	ldr	r1, [sp, #12]
   13d40:	ldr	r2, [r1, r2]
   13d44:	ldr	r2, [r2]
   13d48:	str	r2, [r3]
   13d4c:	b	137d4 <__assert_fail@plt+0x2c54>
   13d50:	add	r4, ip, r2, asr #1
   13d54:	mov	r1, r4
   13d58:	bl	12944 <__assert_fail@plt+0x1dc4>
   13d5c:	ldr	r2, [pc, #392]	; 13eec <__assert_fail@plt+0x336c>
   13d60:	add	r2, pc, r2
   13d64:	ldr	ip, [r2, #20]
   13d68:	ldr	r3, [r2, #16]
   13d6c:	ldr	r1, [r3, ip, lsl #2]
   13d70:	add	r3, r3, ip, lsl #2
   13d74:	str	r0, [r9, #4]
   13d78:	ldr	r0, [r1, #4]
   13d7c:	cmp	r0, #0
   13d80:	beq	140f4 <__assert_fail@plt+0x3574>
   13d84:	ldr	ip, [r2, #24]
   13d88:	ldr	lr, [sp, #40]	; 0x28
   13d8c:	sub	r2, r4, #2
   13d90:	add	ip, lr, ip
   13d94:	str	r2, [r1, #12]
   13d98:	b	13b2c <__assert_fail@plt+0x2fac>
   13d9c:	andeq	r3, r1, ip, ror r2
   13da0:	andeq	r3, r1, r4, asr r1
   13da4:	strheq	r0, [r0], -r4
   13da8:	andeq	r1, r0, r4, lsr #16
   13dac:	ldrdeq	r0, [r0], -r8
   13db0:	strdeq	r1, [r0], -r8
   13db4:	andeq	r3, r1, r8, asr #3
   13db8:	muleq	r0, r0, r7
   13dbc:	andeq	r3, r1, r8, lsl r1
   13dc0:	andeq	r3, r1, r0, lsl #2
   13dc4:	andeq	r1, r0, r0, ror #13
   13dc8:	strdeq	r3, [r1], -r0
   13dcc:	andeq	r3, r1, r8, ror #1
   13dd0:	andeq	r3, r1, ip, lsr #1
   13dd4:	muleq	r1, r8, r0
   13dd8:	andeq	r2, r1, r8, lsl #31
   13ddc:	andeq	r0, r0, ip, asr #1
   13de0:	andeq	r2, r1, r0, lsr pc
   13de4:	andeq	r1, r0, r0, lsl r5
   13de8:	andeq	r2, r1, r8, lsl #30
   13dec:	andeq	r2, r1, ip, ror #29
   13df0:	muleq	r1, r0, lr
   13df4:	andeq	r2, r1, r0, ror lr
   13df8:	andeq	r1, r0, r8, lsr #8
   13dfc:	strdeq	r2, [r1], -r0
   13e00:	ldrdeq	r1, [r0], -r0
   13e04:	andeq	r2, r1, r8, lsr #27
   13e08:	andeq	r2, r1, r4, asr sp
   13e0c:	andeq	r2, r1, r0, lsl #26
   13e10:	andeq	r1, r0, r0, ror #5
   13e14:	andeq	r1, r0, r8, lsl #25
   13e18:			; <UNDEFINED> instruction: 0x00012cb8
   13e1c:	muleq	r0, r8, r2
   13e20:	andeq	r2, r1, r4, ror ip
   13e24:	andeq	r1, r0, r4, asr r2
   13e28:	andeq	r2, r1, r0, lsr ip
   13e2c:	andeq	r1, r0, r0, lsl r2
   13e30:	andeq	r2, r1, r8, ror #23
   13e34:	strdeq	r2, [r1], -r8
   13e38:	ldrdeq	r2, [r1], -r8
   13e3c:	andeq	r2, r1, ip, lsr fp
   13e40:	andeq	r1, r0, r8, lsl r1
   13e44:	strdeq	r2, [r1], -r4
   13e48:	ldrdeq	r2, [r1], -r4
   13e4c:	strheq	r1, [r0], -r4
   13e50:	andeq	r2, r1, r0, asr #21
   13e54:	muleq	r1, ip, sl
   13e58:	andeq	r2, r1, r0, ror #20
   13e5c:	andeq	r2, r1, r4, lsr #20
   13e60:	andeq	r1, r0, r4
   13e64:	andeq	r2, r1, r0, ror #19
   13e68:	andeq	r0, r0, r0, asr #31
   13e6c:	andeq	r1, r0, ip, ror #18
   13e70:	muleq	r1, ip, r9
   13e74:	andeq	r0, r0, r8, ror pc
   13e78:	andeq	r2, r1, r0, asr r9
   13e7c:	strdeq	r2, [r1], -ip
   13e80:	ldrdeq	r0, [r0], -r8
   13e84:			; <UNDEFINED> instruction: 0x000128b4
   13e88:	andeq	r1, r0, ip, asr r8
   13e8c:	andeq	r1, r0, r8, lsr r8
   13e90:	andeq	r2, r1, r8, asr r8
   13e94:	andeq	r2, r1, r0, lsr r8
   13e98:	strdeq	r1, [r0], -ip
   13e9c:	ldrdeq	r2, [r1], -ip
   13ea0:	andeq	r1, r0, r4, lsr r6
   13ea4:	ldrdeq	r2, [r1], -r0
   13ea8:	andeq	r2, r1, r0, ror #12
   13eac:	strdeq	r1, [r0], -r8
   13eb0:	andeq	r2, r1, r0, asr r6
   13eb4:	andeq	r0, r0, ip, lsr #24
   13eb8:	andeq	r2, r1, r8, lsl #12
   13ebc:	andeq	r2, r1, r4, lsl r6
   13ec0:			; <UNDEFINED> instruction: 0x000125b4
   13ec4:	andeq	r2, r1, ip, ror #9
   13ec8:	andeq	r0, r0, r8, ror sl
   13ecc:	strdeq	r1, [r0], -r0
   13ed0:	andeq	r2, r1, r4, asr #8
   13ed4:	andeq	r2, r1, ip, lsl r4
   13ed8:	andeq	r2, r1, r4, ror r3
   13edc:	andeq	r2, r1, ip, asr #6
   13ee0:	andeq	r0, r0, r0, lsr r9
   13ee4:	andeq	r2, r1, ip, lsl r3
   13ee8:	ldrdeq	r0, [r0], -ip
   13eec:	ldrdeq	r2, [r1], -r0
   13ef0:	ldrdeq	r0, [r0], -r4
   13ef4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   13ef8:	andeq	r2, r1, r8, asr #1
   13efc:	andeq	r2, r1, r4, lsr #1
   13f00:	andeq	r2, r1, ip, lsl #1
   13f04:	andeq	r0, r0, r8, ror #12
   13f08:	andeq	r2, r1, r4, asr #32
   13f0c:	andeq	r1, r0, ip, asr r0
   13f10:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   13f14:	andeq	r0, r0, r0, ror #31
   13f18:	andeq	r0, r0, ip, ror #11
   13f1c:	andeq	r0, r0, r4, ror #11
   13f20:	andeq	r0, r0, r4, ror #10
   13f24:	andeq	r1, r1, ip, asr #30
   13f28:	andeq	r0, r0, r4, ror pc
   13f2c:	andeq	r1, r1, r8, lsl #30
   13f30:	andeq	r0, r0, r8, asr #30
   13f34:	ldr	r3, [pc, #-76]	; 13ef0 <__assert_fail@plt+0x3370>
   13f38:	ldr	r3, [r2, r3]
   13f3c:	ldr	r3, [r3]
   13f40:	str	r3, [r5]
   13f44:	b	137bc <__assert_fail@plt+0x2c3c>
   13f48:	mov	r2, #1
   13f4c:	ldr	r3, [pc, #-96]	; 13ef4 <__assert_fail@plt+0x3374>
   13f50:	str	r2, [sp, #44]	; 0x2c
   13f54:	ldr	r2, [sp, #12]
   13f58:	ldr	r4, [r2, r3]
   13f5c:	ldr	r0, [r4]
   13f60:	bl	129e8 <__assert_fail@plt+0x1e68>
   13f64:	ldr	r3, [pc, #-116]	; 13ef8 <__assert_fail@plt+0x3378>
   13f68:	add	r3, pc, r3
   13f6c:	ldr	r0, [r3, #20]
   13f70:	ldr	r1, [r3, #16]
   13f74:	ldr	r2, [r3, #24]
   13f78:	add	r3, r1, r0, lsl #2
   13f7c:	ldr	r9, [r1, r0, lsl #2]
   13f80:	b	13b14 <__assert_fail@plt+0x2f94>
   13f84:	ldr	r2, [pc, #-144]	; 13efc <__assert_fail@plt+0x337c>
   13f88:	mov	r1, #0
   13f8c:	add	r2, pc, r2
   13f90:	str	r1, [r3, #16]
   13f94:	str	r1, [r2, #24]
   13f98:	b	13d00 <__assert_fail@plt+0x3180>
   13f9c:	ldr	r2, [pc, #-164]	; 13f00 <__assert_fail@plt+0x3380>
   13fa0:	ldr	r3, [pc, #-164]	; 13f04 <__assert_fail@plt+0x3384>
   13fa4:	add	r2, pc, r2
   13fa8:	ldr	r0, [pc, #-168]	; 13f08 <__assert_fail@plt+0x3388>
   13fac:	ldr	r2, [r2]
   13fb0:	add	r3, pc, r3
   13fb4:	add	ip, r3, #256	; 0x100
   13fb8:	lsl	r1, r2, #1
   13fbc:	add	r0, pc, r0
   13fc0:	add	r3, r3, #688	; 0x2b0
   13fc4:	mov	lr, #10
   13fc8:	ldrsh	ip, [ip, r1]
   13fcc:	str	lr, [r0]
   13fd0:	ldrsh	r1, [r3, r1]
   13fd4:	b	13124 <__assert_fail@plt+0x25a4>
   13fd8:	mov	r5, r7
   13fdc:	strb	r0, [lr]
   13fe0:	ldr	r7, [sp, #44]	; 0x2c
   13fe4:	str	r4, [sp, #48]	; 0x30
   13fe8:	b	13cb4 <__assert_fail@plt+0x3134>
   13fec:	ldr	r0, [pc, #-232]	; 13f0c <__assert_fail@plt+0x338c>
   13ff0:	add	r0, pc, r0
   13ff4:	bl	12644 <__assert_fail@plt+0x1ac4>
   13ff8:	ldr	r0, [pc, #-240]	; 13f10 <__assert_fail@plt+0x3390>
   13ffc:	add	r0, pc, r0
   14000:	bl	125c8 <__assert_fail@plt+0x1a48>
   14004:	ldr	r0, [pc, #-248]	; 13f14 <__assert_fail@plt+0x3394>
   14008:	add	r0, pc, r0
   1400c:	bl	12644 <__assert_fail@plt+0x1ac4>
   14010:	ldr	r4, [sp, #28]
   14014:	ldr	r3, [sp, #52]	; 0x34
   14018:	add	r9, r2, r3
   1401c:	str	r9, [r4, #4]
   14020:	bl	124a0 <__assert_fail@plt+0x1920>
   14024:	ldr	r3, [pc, #-276]	; 13f18 <__assert_fail@plt+0x3398>
   14028:	ldr	ip, [pc, #-276]	; 13f1c <__assert_fail@plt+0x339c>
   1402c:	add	r3, pc, r3
   14030:	add	r3, r3, #256	; 0x100
   14034:	add	ip, pc, ip
   14038:	add	r2, ip, #900	; 0x384
   1403c:	lsl	lr, r0, #1
   14040:	ldrsh	r3, [r3, lr]
   14044:	cmp	r3, #0
   14048:	movne	r4, r0
   1404c:	ldrne	r3, [sp, #28]
   14050:	ldreq	r6, [r4, #12]
   14054:	movne	r6, r9
   14058:	strne	r0, [r3, #8]
   1405c:	strne	r9, [r3, #12]
   14060:	add	r3, ip, #688	; 0x2b0
   14064:	str	r3, [sp, #16]
   14068:	ldrsh	r3, [r3, lr]
   1406c:	ldreq	r4, [r4, #8]
   14070:	add	r3, r3, #1
   14074:	lsl	r3, r3, #1
   14078:	ldrsh	r1, [r2, r3]
   1407c:	cmp	r0, r1
   14080:	beq	140ac <__assert_fail@plt+0x352c>
   14084:	add	ip, ip, #440	; 0x1b8
   14088:	ldrsh	r0, [ip, lr]
   1408c:	ldr	r3, [sp, #16]
   14090:	lsl	lr, r0, #1
   14094:	ldrsh	r3, [r3, lr]
   14098:	add	r3, r3, #1
   1409c:	lsl	r3, r3, #1
   140a0:	ldrsh	r1, [r2, r3]
   140a4:	cmp	r0, r1
   140a8:	bne	14088 <__assert_fail@plt+0x3508>
   140ac:	ldr	r2, [pc, #-404]	; 13f20 <__assert_fail@plt+0x33a0>
   140b0:	ldr	r1, [sp, #8]
   140b4:	add	r2, pc, r2
   140b8:	add	r2, r2, #1520	; 0x5f0
   140bc:	add	r2, r2, #4
   140c0:	ldr	r1, [r1]
   140c4:	ldrsh	r2, [r2, r3]
   140c8:	str	r1, [sp, #16]
   140cc:	cmp	r2, #90	; 0x5a
   140d0:	beq	12f58 <__assert_fail@plt+0x23d8>
   140d4:	cmp	r2, #0
   140d8:	beq	12f58 <__assert_fail@plt+0x23d8>
   140dc:	ldr	r3, [pc, #-448]	; 13f24 <__assert_fail@plt+0x33a4>
   140e0:	add	r9, r9, #1
   140e4:	add	r3, pc, r3
   140e8:	mov	sl, fp
   140ec:	str	r9, [r3, #4]
   140f0:	b	13b98 <__assert_fail@plt+0x3018>
   140f4:	ldr	r0, [pc, #-468]	; 13f28 <__assert_fail@plt+0x33a8>
   140f8:	add	r0, pc, r0
   140fc:	bl	12644 <__assert_fail@plt+0x1ac4>
   14100:	str	r4, [sp, #48]	; 0x30
   14104:	mov	r4, r5
   14108:	mov	r5, r7
   1410c:	ldr	r0, [r4]
   14110:	ldr	r7, [sp, #44]	; 0x2c
   14114:	bl	109e8 <ferror@plt>
   14118:	cmp	r0, #0
   1411c:	bne	13fec <__assert_fail@plt+0x346c>
   14120:	ldr	r3, [pc, #-508]	; 13f2c <__assert_fail@plt+0x33ac>
   14124:	ldr	r2, [sp, #48]	; 0x30
   14128:	add	r3, pc, r3
   1412c:	cmp	r2, #0
   14130:	ldr	r0, [r3, #20]
   14134:	ldr	r1, [r3, #16]
   14138:	str	r2, [r3, #24]
   1413c:	add	r3, r1, r0, lsl #2
   14140:	ldr	r9, [r1, r0, lsl #2]
   14144:	str	r2, [r9, #16]
   14148:	bne	13cd0 <__assert_fail@plt+0x3150>
   1414c:	b	13d00 <__assert_fail@plt+0x3180>
   14150:	ldr	r0, [pc, #-552]	; 13f30 <__assert_fail@plt+0x33b0>
   14154:	add	r0, pc, r0
   14158:	bl	12644 <__assert_fail@plt+0x1ac4>
   1415c:	b	109dc <free@plt>
   14160:	push	{r4, lr}
   14164:	subs	r4, r0, #0
   14168:	popeq	{r4, pc}
   1416c:	ldr	r2, [pc, #76]	; 141c0 <__assert_fail@plt+0x3640>
   14170:	add	r2, pc, r2
   14174:	ldr	r3, [r2, #16]
   14178:	cmp	r3, #0
   1417c:	beq	14194 <__assert_fail@plt+0x3614>
   14180:	ldr	r2, [r2, #20]
   14184:	ldr	r1, [r3, r2, lsl #2]
   14188:	cmp	r4, r1
   1418c:	moveq	r1, #0
   14190:	streq	r1, [r3, r2, lsl #2]
   14194:	ldr	r3, [r4, #20]
   14198:	cmp	r3, #0
   1419c:	bne	141ac <__assert_fail@plt+0x362c>
   141a0:	mov	r0, r4
   141a4:	pop	{r4, lr}
   141a8:	b	1415c <__assert_fail@plt+0x35dc>
   141ac:	ldr	r0, [r4, #4]
   141b0:	bl	1415c <__assert_fail@plt+0x35dc>
   141b4:	mov	r0, r4
   141b8:	pop	{r4, lr}
   141bc:	b	1415c <__assert_fail@plt+0x35dc>
   141c0:	andeq	r1, r1, r0, asr #29
   141c4:	push	{r4, r5, r6, lr}
   141c8:	ldr	r4, [pc, #152]	; 14268 <__assert_fail@plt+0x36e8>
   141cc:	ldr	r5, [pc, #152]	; 1426c <__assert_fail@plt+0x36ec>
   141d0:	add	r4, pc, r4
   141d4:	add	r5, pc, r5
   141d8:	ldr	r3, [r4, #16]
   141dc:	cmp	r3, #0
   141e0:	popeq	{r4, r5, r6, pc}
   141e4:	ldr	r2, [r4, #20]
   141e8:	ldr	r0, [r3, r2, lsl #2]
   141ec:	cmp	r0, #0
   141f0:	popeq	{r4, r5, r6, pc}
   141f4:	bl	14160 <__assert_fail@plt+0x35e0>
   141f8:	ldrd	r2, [r4, #16]
   141fc:	mov	r1, #0
   14200:	cmp	r3, r1
   14204:	str	r1, [r2, r3, lsl #2]
   14208:	subne	r3, r3, #1
   1420c:	strne	r3, [r4, #20]
   14210:	cmp	r2, #0
   14214:	popeq	{r4, r5, r6, pc}
   14218:	ldr	r3, [pc, #80]	; 14270 <__assert_fail@plt+0x36f0>
   1421c:	add	r3, pc, r3
   14220:	ldr	r1, [r3, #20]
   14224:	ldr	r2, [r2, r1, lsl #2]
   14228:	cmp	r2, #0
   1422c:	popeq	{r4, r5, r6, pc}
   14230:	ldr	r0, [pc, #60]	; 14274 <__assert_fail@plt+0x36f4>
   14234:	ldr	r1, [r2, #8]
   14238:	ldr	ip, [r2, #16]
   1423c:	str	r1, [r3, #4]
   14240:	str	ip, [r3, #24]
   14244:	ldr	lr, [r5, r0]
   14248:	ldr	r0, [pc, #40]	; 14278 <__assert_fail@plt+0x36f8>
   1424c:	ldr	ip, [r2]
   14250:	str	r1, [lr]
   14254:	ldr	r2, [r5, r0]
   14258:	str	ip, [r2]
   1425c:	ldrb	r2, [r1]
   14260:	strb	r2, [r3, #28]
   14264:	pop	{r4, r5, r6, pc}
   14268:	andeq	r1, r1, r0, ror #28
   1426c:	andeq	r1, r1, r4, asr #26
   14270:	andeq	r1, r1, r4, lsl lr
   14274:	strheq	r0, [r0], -r4
   14278:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1427c:	push	{r4, r5, r6, lr}
   14280:	ldr	r4, [pc, #172]	; 14334 <__assert_fail@plt+0x37b4>
   14284:	ldr	r5, [pc, #172]	; 14338 <__assert_fail@plt+0x37b8>
   14288:	add	r4, pc, r4
   1428c:	add	r5, pc, r5
   14290:	ldr	r3, [r4, #16]
   14294:	cmp	r3, #0
   14298:	beq	142e4 <__assert_fail@plt+0x3764>
   1429c:	ldr	r2, [r4, #20]
   142a0:	ldr	r0, [r3, r2, lsl #2]
   142a4:	cmp	r0, #0
   142a8:	beq	142e8 <__assert_fail@plt+0x3768>
   142ac:	mov	r6, #0
   142b0:	b	142c4 <__assert_fail@plt+0x3744>
   142b4:	ldr	r2, [r4, #20]
   142b8:	ldr	r0, [r3, r2, lsl #2]
   142bc:	cmp	r0, #0
   142c0:	beq	142e8 <__assert_fail@plt+0x3768>
   142c4:	bl	14160 <__assert_fail@plt+0x35e0>
   142c8:	ldr	r3, [r4, #16]
   142cc:	ldr	r2, [r4, #20]
   142d0:	str	r6, [r3, r2, lsl #2]
   142d4:	bl	141c4 <__assert_fail@plt+0x3644>
   142d8:	ldr	r3, [r4, #16]
   142dc:	cmp	r3, #0
   142e0:	bne	142b4 <__assert_fail@plt+0x3734>
   142e4:	mov	r3, #0
   142e8:	mov	r0, r3
   142ec:	bl	1415c <__assert_fail@plt+0x35dc>
   142f0:	ldr	r2, [pc, #68]	; 1433c <__assert_fail@plt+0x37bc>
   142f4:	ldr	r1, [pc, #68]	; 14340 <__assert_fail@plt+0x37c0>
   142f8:	add	r2, pc, r2
   142fc:	mov	r3, #0
   14300:	str	r3, [r2]
   14304:	str	r3, [r2, #16]
   14308:	str	r3, [r2, #20]
   1430c:	str	r3, [r2, #32]
   14310:	str	r3, [r2, #4]
   14314:	str	r3, [r2, #36]	; 0x24
   14318:	ldr	r2, [pc, #36]	; 14344 <__assert_fail@plt+0x37c4>
   1431c:	ldr	r1, [r5, r1]
   14320:	mov	r0, r3
   14324:	str	r3, [r1]
   14328:	ldr	r2, [r5, r2]
   1432c:	str	r3, [r2]
   14330:	pop	{r4, r5, r6, pc}
   14334:	andeq	r1, r1, r8, lsr #27
   14338:	andeq	r1, r1, ip, lsl #25
   1433c:	andeq	r1, r1, r8, lsr sp
   14340:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   14344:	andeq	r0, r0, ip, asr #1
   14348:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1434c:	mov	r7, r0
   14350:	ldr	r6, [pc, #72]	; 143a0 <__assert_fail@plt+0x3820>
   14354:	ldr	r5, [pc, #72]	; 143a4 <__assert_fail@plt+0x3824>
   14358:	add	r6, pc, r6
   1435c:	add	r5, pc, r5
   14360:	sub	r6, r6, r5
   14364:	mov	r8, r1
   14368:	mov	r9, r2
   1436c:	bl	1098c <strcmp@plt-0x20>
   14370:	asrs	r6, r6, #2
   14374:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14378:	mov	r4, #0
   1437c:	add	r4, r4, #1
   14380:	ldr	r3, [r5], #4
   14384:	mov	r2, r9
   14388:	mov	r1, r8
   1438c:	mov	r0, r7
   14390:	blx	r3
   14394:	cmp	r6, r4
   14398:	bne	1437c <__assert_fail@plt+0x37fc>
   1439c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143a0:			; <UNDEFINED> instruction: 0x000119b4
   143a4:	andeq	r1, r1, ip, lsr #19
   143a8:	bx	lr

Disassembly of section .fini:

000143ac <.fini>:
   143ac:	push	{r3, lr}
   143b0:	pop	{r3, pc}
