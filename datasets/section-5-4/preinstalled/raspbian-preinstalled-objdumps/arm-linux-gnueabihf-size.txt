
raspbian-preinstalled/arm-linux-gnueabihf-size:     file format elf32-littlearm


Disassembly of section .init:

00011088 <.init>:
   11088:	push	{r3, lr}
   1108c:	bl	11994 <__assert_fail@plt+0x58c>
   11090:	pop	{r3, pc}

Disassembly of section .plt:

00011094 <bfd_scan_vma@plt-0x14>:
   11094:	push	{lr}		; (str lr, [sp, #-4]!)
   11098:	ldr	lr, [pc, #4]	; 110a4 <bfd_scan_vma@plt-0x4>
   1109c:	add	lr, pc, lr
   110a0:	ldr	pc, [lr, #8]!
   110a4:	andeq	r3, r1, ip, asr pc

000110a8 <bfd_scan_vma@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #77824	; 0x13000
   110b0:	ldr	pc, [ip, #3932]!	; 0xf5c

000110b4 <strcmp@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #77824	; 0x13000
   110bc:	ldr	pc, [ip, #3924]!	; 0xf54

000110c0 <strtol@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #77824	; 0x13000
   110c8:	ldr	pc, [ip, #3916]!	; 0xf4c

000110cc <bfd_core_file_failing_command@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #77824	; 0x13000
   110d4:	ldr	pc, [ip, #3908]!	; 0xf44

000110d8 <printf@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #77824	; 0x13000
   110e0:	ldr	pc, [ip, #3900]!	; 0xf3c

000110e4 <fflush@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #77824	; 0x13000
   110ec:	ldr	pc, [ip, #3892]!	; 0xf34

000110f0 <bfd_arch_list@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #77824	; 0x13000
   110f8:	ldr	pc, [ip, #3884]!	; 0xf2c

000110fc <memmove@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #77824	; 0x13000
   11104:	ldr	pc, [ip, #3876]!	; 0xf24

00011108 <bfd_set_default_target@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #77824	; 0x13000
   11110:	ldr	pc, [ip, #3868]!	; 0xf1c

00011114 <free@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #77824	; 0x13000
   1111c:	ldr	pc, [ip, #3860]!	; 0xf14

00011120 <ferror@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #77824	; 0x13000
   11128:	ldr	pc, [ip, #3852]!	; 0xf0c

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #77824	; 0x13000
   11134:	ldr	pc, [ip, #3844]!	; 0xf04

00011138 <bfd_openr@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #77824	; 0x13000
   11140:	ldr	pc, [ip, #3836]!	; 0xefc

00011144 <ftell@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #77824	; 0x13000
   1114c:	ldr	pc, [ip, #3828]!	; 0xef4

00011150 <ctime@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #77824	; 0x13000
   11158:	ldr	pc, [ip, #3820]!	; 0xeec

0001115c <dcgettext@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #77824	; 0x13000
   11164:	ldr	pc, [ip, #3812]!	; 0xee4

00011168 <unlink@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #77824	; 0x13000
   11170:	ldr	pc, [ip, #3804]!	; 0xedc

00011174 <xrealloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #77824	; 0x13000
   1117c:	ldr	pc, [ip, #3796]!	; 0xed4

00011180 <textdomain@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #77824	; 0x13000
   11188:	ldr	pc, [ip, #3788]!	; 0xecc

0001118c <bfd_target_list@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #77824	; 0x13000
   11194:	ldr	pc, [ip, #3780]!	; 0xec4

00011198 <bfd_get_error@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #77824	; 0x13000
   111a0:	ldr	pc, [ip, #3772]!	; 0xebc

000111a4 <fwrite@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #77824	; 0x13000
   111ac:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b0 <xmalloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #77824	; 0x13000
   111b8:	ldr	pc, [ip, #3756]!	; 0xeac

000111bc <bfd_set_error@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #77824	; 0x13000
   111c4:	ldr	pc, [ip, #3748]!	; 0xea4

000111c8 <xmalloc_set_program_name@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #77824	; 0x13000
   111d0:	ldr	pc, [ip, #3740]!	; 0xe9c

000111d4 <xstrdup@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #77824	; 0x13000
   111dc:	ldr	pc, [ip, #3732]!	; 0xe94

000111e0 <strcpy@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #77824	; 0x13000
   111e8:	ldr	pc, [ip, #3724]!	; 0xe8c

000111ec <fread@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #77824	; 0x13000
   111f4:	ldr	pc, [ip, #3716]!	; 0xe84

000111f8 <bfd_init@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #77824	; 0x13000
   11200:	ldr	pc, [ip, #3708]!	; 0xe7c

00011204 <mkstemps64@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #77824	; 0x13000
   1120c:	ldr	pc, [ip, #3700]!	; 0xe74

00011210 <getenv@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #77824	; 0x13000
   11218:	ldr	pc, [ip, #3692]!	; 0xe6c

0001121c <mkstemp64@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #77824	; 0x13000
   11224:	ldr	pc, [ip, #3684]!	; 0xe64

00011228 <puts@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #77824	; 0x13000
   11230:	ldr	pc, [ip, #3676]!	; 0xe5c

00011234 <__libc_start_main@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #77824	; 0x13000
   1123c:	ldr	pc, [ip, #3668]!	; 0xe54

00011240 <strerror@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #77824	; 0x13000
   11248:	ldr	pc, [ip, #3660]!	; 0xe4c

0001124c <__gmon_start__@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #77824	; 0x13000
   11254:	ldr	pc, [ip, #3652]!	; 0xe44

00011258 <bfd_set_format@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #77824	; 0x13000
   11260:	ldr	pc, [ip, #3644]!	; 0xe3c

00011264 <getopt_long@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #77824	; 0x13000
   1126c:	ldr	pc, [ip, #3636]!	; 0xe34

00011270 <exit@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #77824	; 0x13000
   11278:	ldr	pc, [ip, #3628]!	; 0xe2c

0001127c <strlen@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #77824	; 0x13000
   11284:	ldr	pc, [ip, #3620]!	; 0xe24

00011288 <bfd_close_all_done@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #77824	; 0x13000
   11290:	ldr	pc, [ip, #3612]!	; 0xe1c

00011294 <fprintf@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #77824	; 0x13000
   1129c:	ldr	pc, [ip, #3604]!	; 0xe14

000112a0 <bfd_printable_arch_mach@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #77824	; 0x13000
   112a8:	ldr	pc, [ip, #3596]!	; 0xe0c

000112ac <__errno_location@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #77824	; 0x13000
   112b4:	ldr	pc, [ip, #3588]!	; 0xe04

000112b8 <bfd_iterate_over_targets@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #77824	; 0x13000
   112c0:	ldr	pc, [ip, #3580]!	; 0xdfc

000112c4 <memset@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #77824	; 0x13000
   112cc:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d0 <putchar@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #77824	; 0x13000
   112d8:	ldr	pc, [ip, #3564]!	; 0xdec

000112dc <access@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #77824	; 0x13000
   112e4:	ldr	pc, [ip, #3556]!	; 0xde4

000112e8 <fclose@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #77824	; 0x13000
   112f0:	ldr	pc, [ip, #3548]!	; 0xddc

000112f4 <bfd_openw@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #77824	; 0x13000
   112fc:	ldr	pc, [ip, #3540]!	; 0xdd4

00011300 <bfd_set_error_program_name@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #77824	; 0x13000
   11308:	ldr	pc, [ip, #3532]!	; 0xdcc

0001130c <setlocale@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #77824	; 0x13000
   11314:	ldr	pc, [ip, #3524]!	; 0xdc4

00011318 <strrchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #77824	; 0x13000
   11320:	ldr	pc, [ip, #3516]!	; 0xdbc

00011324 <vfprintf@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #77824	; 0x13000
   1132c:	ldr	pc, [ip, #3508]!	; 0xdb4

00011330 <fputc@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #77824	; 0x13000
   11338:	ldr	pc, [ip, #3500]!	; 0xdac

0001133c <xexit@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #77824	; 0x13000
   11344:	ldr	pc, [ip, #3492]!	; 0xda4

00011348 <bfd_close@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #77824	; 0x13000
   11350:	ldr	pc, [ip, #3484]!	; 0xd9c

00011354 <sprintf@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #77824	; 0x13000
   1135c:	ldr	pc, [ip, #3476]!	; 0xd94

00011360 <mkdtemp@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #77824	; 0x13000
   11368:	ldr	pc, [ip, #3468]!	; 0xd8c

0001136c <putc@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #77824	; 0x13000
   11374:	ldr	pc, [ip, #3460]!	; 0xd84

00011378 <bfd_check_format_matches@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #77824	; 0x13000
   11380:	ldr	pc, [ip, #3452]!	; 0xd7c

00011384 <fopen64@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #77824	; 0x13000
   1138c:	ldr	pc, [ip, #3444]!	; 0xd74

00011390 <bfd_errmsg@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #77824	; 0x13000
   11398:	ldr	pc, [ip, #3436]!	; 0xd6c

0001139c <bindtextdomain@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #77824	; 0x13000
   113a4:	ldr	pc, [ip, #3428]!	; 0xd64

000113a8 <bfd_check_format@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #77824	; 0x13000
   113b0:	ldr	pc, [ip, #3420]!	; 0xd5c

000113b4 <bfd_openr_next_archived_file@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #77824	; 0x13000
   113bc:	ldr	pc, [ip, #3412]!	; 0xd54

000113c0 <bfd_map_over_sections@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #77824	; 0x13000
   113c8:	ldr	pc, [ip, #3404]!	; 0xd4c

000113cc <fseek@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #77824	; 0x13000
   113d4:	ldr	pc, [ip, #3396]!	; 0xd44

000113d8 <__xstat64@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #77824	; 0x13000
   113e0:	ldr	pc, [ip, #3388]!	; 0xd3c

000113e4 <fputs@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #77824	; 0x13000
   113ec:	ldr	pc, [ip, #3380]!	; 0xd34

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #77824	; 0x13000
   113f8:	ldr	pc, [ip, #3372]!	; 0xd2c

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #77824	; 0x13000
   11404:	ldr	pc, [ip, #3364]!	; 0xd24

00011408 <__assert_fail@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #77824	; 0x13000
   11410:	ldr	pc, [ip, #3356]!	; 0xd1c

Disassembly of section .text:

00011414 <.text>:
   11414:	push	{r4, r5, r6, r7, r8, r9, lr}
   11418:	sub	sp, sp, #20
   1141c:	ldr	r4, [pc, #1256]	; 1190c <__assert_fail@plt+0x504>
   11420:	str	r0, [sp, #12]
   11424:	str	r1, [sp, #8]
   11428:	mov	r0, #5
   1142c:	ldr	r1, [pc, #1244]	; 11910 <__assert_fail@plt+0x508>
   11430:	bl	1130c <setlocale@plt>
   11434:	ldr	r1, [pc, #1236]	; 11910 <__assert_fail@plt+0x508>
   11438:	mov	r0, #0
   1143c:	bl	1130c <setlocale@plt>
   11440:	ldr	r1, [pc, #1228]	; 11914 <__assert_fail@plt+0x50c>
   11444:	ldr	r0, [pc, #1228]	; 11918 <__assert_fail@plt+0x510>
   11448:	bl	1139c <bindtextdomain@plt>
   1144c:	ldr	r0, [pc, #1220]	; 11918 <__assert_fail@plt+0x510>
   11450:	bl	11180 <textdomain@plt>
   11454:	ldr	r3, [sp, #8]
   11458:	ldr	r5, [pc, #1212]	; 1191c <__assert_fail@plt+0x514>
   1145c:	ldr	r6, [pc, #1212]	; 11920 <__assert_fail@plt+0x518>
   11460:	ldr	r3, [r3]
   11464:	ldr	r7, [pc, #1208]	; 11924 <__assert_fail@plt+0x51c>
   11468:	mov	r0, r3
   1146c:	str	r3, [r4]
   11470:	bl	111c8 <xmalloc_set_program_name@plt>
   11474:	ldr	r0, [r4]
   11478:	bl	11300 <bfd_set_error_program_name@plt>
   1147c:	add	r1, sp, #8
   11480:	add	r0, sp, #12
   11484:	bl	13674 <__assert_fail@plt+0x226c>
   11488:	bl	111f8 <bfd_init@plt>
   1148c:	bl	126f0 <__assert_fail@plt+0x12e8>
   11490:	ldr	r8, [pc, #1168]	; 11928 <__assert_fail@plt+0x520>
   11494:	sub	r9, r5, #4
   11498:	mov	r4, #0
   1149c:	str	r4, [sp]
   114a0:	mov	r3, r5
   114a4:	mov	r2, r6
   114a8:	ldr	r1, [sp, #8]
   114ac:	ldr	r0, [sp, #12]
   114b0:	bl	11264 <getopt_long@plt>
   114b4:	cmn	r0, #1
   114b8:	beq	117b4 <__assert_fail@plt+0x3ac>
   114bc:	sub	r0, r0, #63	; 0x3f
   114c0:	cmp	r0, #139	; 0x8b
   114c4:	ldrls	pc, [pc, r0, lsl #2]
   114c8:	b	1149c <__assert_fail@plt+0x94>
   114cc:	andeq	r1, r1, ip, ror #17
   114d0:	muleq	r1, ip, r4
   114d4:	andeq	r1, r1, r4, lsr r7
   114d8:	andeq	r1, r1, r4, lsl #14
   114dc:	muleq	r1, ip, r4
   114e0:	muleq	r1, ip, r4
   114e4:	muleq	r1, ip, r4
   114e8:	muleq	r1, ip, r4
   114ec:	muleq	r1, ip, r4
   114f0:	andeq	r1, r1, ip, ror #17
   114f4:	muleq	r1, ip, r4
   114f8:	muleq	r1, ip, r4
   114fc:	muleq	r1, ip, r4
   11500:	muleq	r1, ip, r4
   11504:	muleq	r1, ip, r4
   11508:	muleq	r1, ip, r4
   1150c:	muleq	r1, ip, r4
   11510:	muleq	r1, ip, r4
   11514:	muleq	r1, ip, r4
   11518:	muleq	r1, ip, r4
   1151c:	muleq	r1, ip, r4
   11520:	muleq	r1, ip, r4
   11524:	muleq	r1, ip, r4
   11528:	andeq	r1, r1, r8, ror #14
   1152c:	muleq	r1, ip, r4
   11530:	muleq	r1, ip, r4
   11534:	muleq	r1, ip, r4
   11538:	muleq	r1, ip, r4
   1153c:	muleq	r1, ip, r4
   11540:	muleq	r1, ip, r4
   11544:	muleq	r1, ip, r4
   11548:	muleq	r1, ip, r4
   1154c:	muleq	r1, ip, r4
   11550:	muleq	r1, ip, r4
   11554:	muleq	r1, ip, r4
   11558:	muleq	r1, ip, r4
   1155c:	muleq	r1, ip, r4
   11560:	andeq	r1, r1, r4, asr r7
   11564:	muleq	r1, ip, r4
   11568:	muleq	r1, ip, r4
   1156c:	muleq	r1, ip, r4
   11570:	andeq	r1, r1, ip, ror #17
   11574:	muleq	r1, ip, r4
   11578:	muleq	r1, ip, r4
   1157c:	muleq	r1, ip, r4
   11580:	muleq	r1, ip, r4
   11584:	muleq	r1, ip, r4
   11588:	muleq	r1, ip, r4
   1158c:	andeq	r1, r1, r8, asr #14
   11590:	muleq	r1, ip, r4
   11594:	muleq	r1, ip, r4
   11598:	muleq	r1, ip, r4
   1159c:	muleq	r1, ip, r4
   115a0:	andeq	r1, r1, r8, lsr #15
   115a4:	muleq	r1, ip, r4
   115a8:	andeq	r1, r1, r8, ror #14
   115ac:	muleq	r1, ip, r4
   115b0:	andeq	r1, r1, ip, lsr r7
   115b4:	muleq	r1, ip, r4
   115b8:	muleq	r1, ip, r4
   115bc:	muleq	r1, ip, r4
   115c0:	muleq	r1, ip, r4
   115c4:	muleq	r1, ip, r4
   115c8:	muleq	r1, ip, r4
   115cc:	muleq	r1, ip, r4
   115d0:	muleq	r1, ip, r4
   115d4:	muleq	r1, ip, r4
   115d8:	muleq	r1, ip, r4
   115dc:	muleq	r1, ip, r4
   115e0:	muleq	r1, ip, r4
   115e4:	muleq	r1, ip, r4
   115e8:	muleq	r1, ip, r4
   115ec:	muleq	r1, ip, r4
   115f0:	muleq	r1, ip, r4
   115f4:	muleq	r1, ip, r4
   115f8:	muleq	r1, ip, r4
   115fc:	muleq	r1, ip, r4
   11600:	muleq	r1, ip, r4
   11604:	muleq	r1, ip, r4
   11608:	muleq	r1, ip, r4
   1160c:	muleq	r1, ip, r4
   11610:	muleq	r1, ip, r4
   11614:	muleq	r1, ip, r4
   11618:	muleq	r1, ip, r4
   1161c:	muleq	r1, ip, r4
   11620:	muleq	r1, ip, r4
   11624:	muleq	r1, ip, r4
   11628:	muleq	r1, ip, r4
   1162c:	muleq	r1, ip, r4
   11630:	muleq	r1, ip, r4
   11634:	muleq	r1, ip, r4
   11638:	muleq	r1, ip, r4
   1163c:	muleq	r1, ip, r4
   11640:	muleq	r1, ip, r4
   11644:	muleq	r1, ip, r4
   11648:	muleq	r1, ip, r4
   1164c:	muleq	r1, ip, r4
   11650:	muleq	r1, ip, r4
   11654:	muleq	r1, ip, r4
   11658:	muleq	r1, ip, r4
   1165c:	muleq	r1, ip, r4
   11660:	muleq	r1, ip, r4
   11664:	muleq	r1, ip, r4
   11668:	muleq	r1, ip, r4
   1166c:	muleq	r1, ip, r4
   11670:	muleq	r1, ip, r4
   11674:	muleq	r1, ip, r4
   11678:	muleq	r1, ip, r4
   1167c:	muleq	r1, ip, r4
   11680:	muleq	r1, ip, r4
   11684:	muleq	r1, ip, r4
   11688:	muleq	r1, ip, r4
   1168c:	muleq	r1, ip, r4
   11690:	muleq	r1, ip, r4
   11694:	muleq	r1, ip, r4
   11698:	muleq	r1, ip, r4
   1169c:	muleq	r1, ip, r4
   116a0:	muleq	r1, ip, r4
   116a4:	muleq	r1, ip, r4
   116a8:	muleq	r1, ip, r4
   116ac:	muleq	r1, ip, r4
   116b0:	muleq	r1, ip, r4
   116b4:	muleq	r1, ip, r4
   116b8:	muleq	r1, ip, r4
   116bc:	muleq	r1, ip, r4
   116c0:	muleq	r1, ip, r4
   116c4:	muleq	r1, ip, r4
   116c8:	muleq	r1, ip, r4
   116cc:	muleq	r1, ip, r4
   116d0:	muleq	r1, ip, r4
   116d4:	muleq	r1, ip, r4
   116d8:	muleq	r1, ip, r4
   116dc:	muleq	r1, ip, r4
   116e0:	muleq	r1, ip, r4
   116e4:	muleq	r1, ip, r4
   116e8:	muleq	r1, ip, r4
   116ec:	muleq	r1, ip, r4
   116f0:	andeq	r1, r1, r0, lsl r7
   116f4:	andeq	r1, r1, r4, ror r7
   116f8:	andeq	r1, r1, ip, asr r7
   116fc:	cmp	r3, #66	; 0x42
   11700:	bne	118d4 <__assert_fail@plt+0x4cc>
   11704:	mov	r3, #1
   11708:	str	r3, [r9]
   1170c:	b	1149c <__assert_fail@plt+0x94>
   11710:	ldr	r3, [r8]
   11714:	ldrb	r3, [r3]
   11718:	cmp	r3, #83	; 0x53
   1171c:	beq	11734 <__assert_fail@plt+0x32c>
   11720:	bls	116fc <__assert_fail@plt+0x2f4>
   11724:	cmp	r3, #98	; 0x62
   11728:	beq	11704 <__assert_fail@plt+0x2fc>
   1172c:	cmp	r3, #115	; 0x73
   11730:	bne	118d4 <__assert_fail@plt+0x4cc>
   11734:	str	r4, [r9]
   11738:	b	1149c <__assert_fail@plt+0x94>
   1173c:	mov	r3, #2
   11740:	str	r3, [r7, #24]
   11744:	b	1149c <__assert_fail@plt+0x94>
   11748:	mov	r3, #1
   1174c:	str	r3, [r7, #24]
   11750:	b	1149c <__assert_fail@plt+0x94>
   11754:	str	r4, [r7, #24]
   11758:	b	1149c <__assert_fail@plt+0x94>
   1175c:	ldr	r3, [r8]
   11760:	str	r3, [r7, #68]	; 0x44
   11764:	b	1149c <__assert_fail@plt+0x94>
   11768:	mov	r3, #1
   1176c:	str	r3, [r7, #72]	; 0x48
   11770:	b	1149c <__assert_fail@plt+0x94>
   11774:	mov	r2, #10
   11778:	mov	r1, #0
   1177c:	ldr	r0, [r8]
   11780:	bl	110c0 <strtol@plt>
   11784:	cmp	r0, #10
   11788:	beq	11754 <__assert_fail@plt+0x34c>
   1178c:	cmp	r0, #16
   11790:	beq	1173c <__assert_fail@plt+0x334>
   11794:	cmp	r0, #8
   11798:	beq	11748 <__assert_fail@plt+0x340>
   1179c:	mov	r2, #5
   117a0:	ldr	r1, [pc, #388]	; 1192c <__assert_fail@plt+0x524>
   117a4:	b	118dc <__assert_fail@plt+0x4d4>
   117a8:	mov	r3, #1
   117ac:	str	r3, [r7, #48]	; 0x30
   117b0:	b	1149c <__assert_fail@plt+0x94>
   117b4:	ldr	r5, [pc, #360]	; 11924 <__assert_fail@plt+0x51c>
   117b8:	ldr	r3, [r5, #72]	; 0x48
   117bc:	cmp	r3, #0
   117c0:	bne	11840 <__assert_fail@plt+0x438>
   117c4:	ldr	r3, [r5, #76]	; 0x4c
   117c8:	cmp	r3, #0
   117cc:	bne	118fc <__assert_fail@plt+0x4f4>
   117d0:	ldr	r4, [pc, #344]	; 11930 <__assert_fail@plt+0x528>
   117d4:	ldr	r2, [sp, #12]
   117d8:	ldr	r3, [r4]
   117dc:	cmp	r3, r2
   117e0:	beq	11834 <__assert_fail@plt+0x42c>
   117e4:	bge	1180c <__assert_fail@plt+0x404>
   117e8:	ldr	r2, [sp, #8]
   117ec:	add	r1, r3, #1
   117f0:	str	r1, [r4]
   117f4:	ldr	r0, [r2, r3, lsl #2]
   117f8:	bl	12240 <__assert_fail@plt+0xe38>
   117fc:	ldr	r3, [r4]
   11800:	ldr	r2, [sp, #12]
   11804:	cmp	r3, r2
   11808:	blt	117e8 <__assert_fail@plt+0x3e0>
   1180c:	ldr	r3, [r5, #48]	; 0x30
   11810:	cmp	r3, #0
   11814:	beq	11828 <__assert_fail@plt+0x420>
   11818:	ldr	r3, [pc, #276]	; 11934 <__assert_fail@plt+0x52c>
   1181c:	ldr	r3, [r3]
   11820:	cmp	r3, #0
   11824:	bne	1184c <__assert_fail@plt+0x444>
   11828:	ldr	r0, [r5, #64]	; 0x40
   1182c:	add	sp, sp, #20
   11830:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11834:	ldr	r0, [pc, #252]	; 11938 <__assert_fail@plt+0x530>
   11838:	bl	12240 <__assert_fail@plt+0xe38>
   1183c:	b	1180c <__assert_fail@plt+0x404>
   11840:	ldr	r0, [pc, #244]	; 1193c <__assert_fail@plt+0x534>
   11844:	bl	13120 <__assert_fail@plt+0x1d18>
   11848:	b	117c4 <__assert_fail@plt+0x3bc>
   1184c:	ldr	r1, [r5, #52]	; 0x34
   11850:	ldr	r6, [pc, #232]	; 11940 <__assert_fail@plt+0x538>
   11854:	ldr	r4, [r5, #56]	; 0x38
   11858:	ldr	r3, [r5, #60]	; 0x3c
   1185c:	add	r4, r1, r4
   11860:	mov	r0, #7
   11864:	add	r4, r4, r3
   11868:	bl	11c58 <__assert_fail@plt+0x850>
   1186c:	ldr	r1, [r6]
   11870:	mov	r0, #9
   11874:	bl	1136c <putc@plt>
   11878:	ldr	r1, [r5, #56]	; 0x38
   1187c:	mov	r0, #7
   11880:	bl	11c58 <__assert_fail@plt+0x850>
   11884:	ldr	r1, [r6]
   11888:	mov	r0, #9
   1188c:	bl	1136c <putc@plt>
   11890:	ldr	r1, [r5, #60]	; 0x3c
   11894:	mov	r0, #7
   11898:	bl	11c58 <__assert_fail@plt+0x850>
   1189c:	ldr	ip, [r5, #24]
   118a0:	ldr	r3, [pc, #156]	; 11944 <__assert_fail@plt+0x53c>
   118a4:	cmp	ip, #1
   118a8:	mov	r2, r4
   118ac:	mov	r1, r4
   118b0:	ldr	r0, [pc, #144]	; 11948 <__assert_fail@plt+0x540>
   118b4:	movne	r0, r3
   118b8:	bl	110d8 <printf@plt>
   118bc:	ldr	r3, [r6]
   118c0:	mov	r2, #9
   118c4:	mov	r1, #1
   118c8:	ldr	r0, [pc, #124]	; 1194c <__assert_fail@plt+0x544>
   118cc:	bl	111a4 <fwrite@plt>
   118d0:	b	11828 <__assert_fail@plt+0x420>
   118d4:	ldr	r1, [pc, #116]	; 11950 <__assert_fail@plt+0x548>
   118d8:	mov	r2, #5
   118dc:	mov	r0, #0
   118e0:	bl	1115c <dcgettext@plt>
   118e4:	ldr	r1, [r8]
   118e8:	bl	126c0 <__assert_fail@plt+0x12b8>
   118ec:	ldr	r3, [pc, #96]	; 11954 <__assert_fail@plt+0x54c>
   118f0:	mov	r1, #1
   118f4:	ldr	r0, [r3]
   118f8:	bl	11a98 <__assert_fail@plt+0x690>
   118fc:	ldr	r3, [pc, #60]	; 11940 <__assert_fail@plt+0x538>
   11900:	mov	r1, #0
   11904:	ldr	r0, [r3]
   11908:	bl	11a98 <__assert_fail@plt+0x690>
   1190c:	andeq	r5, r2, r4, ror #9
   11910:			; <UNDEFINED> instruction: 0x00013db0
   11914:	andeq	r4, r1, r4, asr #3
   11918:	ldrdeq	r4, [r1], -r8
   1191c:	andeq	r5, r2, r8, asr #2
   11920:	andeq	r4, r1, ip, lsl r2
   11924:	andeq	r5, r2, r8, lsl #9
   11928:	andeq	r5, r2, r0, lsl #9
   1192c:	andeq	r4, r1, r8, lsl #4
   11930:	andeq	r5, r2, r8, asr #3
   11934:	andeq	r5, r2, r4, asr #2
   11938:	andeq	r4, r1, r8, lsr #4
   1193c:	andeq	r4, r1, ip, lsl #3
   11940:	andeq	r5, r2, r8, ror r4
   11944:	andeq	r4, r1, r8, asr #2
   11948:	andeq	r4, r1, ip, lsr r1
   1194c:	andeq	r4, r1, r0, lsr r2
   11950:	andeq	r4, r1, r4, ror #3
   11954:	ldrdeq	r5, [r2], -r0
   11958:	mov	fp, #0
   1195c:	mov	lr, #0
   11960:	pop	{r1}		; (ldr r1, [sp], #4)
   11964:	mov	r2, sp
   11968:	push	{r2}		; (str r2, [sp, #-4]!)
   1196c:	push	{r0}		; (str r0, [sp, #-4]!)
   11970:	ldr	ip, [pc, #16]	; 11988 <__assert_fail@plt+0x580>
   11974:	push	{ip}		; (str ip, [sp, #-4]!)
   11978:	ldr	r0, [pc, #12]	; 1198c <__assert_fail@plt+0x584>
   1197c:	ldr	r3, [pc, #12]	; 11990 <__assert_fail@plt+0x588>
   11980:	bl	11234 <__libc_start_main@plt>
   11984:	bl	113f0 <abort@plt>
   11988:	andeq	r3, r1, r0, lsl #27
   1198c:	andeq	r1, r1, r4, lsl r4
   11990:	andeq	r3, r1, r0, lsr #26
   11994:	ldr	r3, [pc, #20]	; 119b0 <__assert_fail@plt+0x5a8>
   11998:	ldr	r2, [pc, #20]	; 119b4 <__assert_fail@plt+0x5ac>
   1199c:	add	r3, pc, r3
   119a0:	ldr	r2, [r3, r2]
   119a4:	cmp	r2, #0
   119a8:	bxeq	lr
   119ac:	b	1124c <__gmon_start__@plt>
   119b0:	andeq	r3, r1, ip, asr r6
   119b4:	andeq	r0, r0, r8, lsr r1
   119b8:	ldr	r0, [pc, #24]	; 119d8 <__assert_fail@plt+0x5d0>
   119bc:	ldr	r3, [pc, #24]	; 119dc <__assert_fail@plt+0x5d4>
   119c0:	cmp	r3, r0
   119c4:	bxeq	lr
   119c8:	ldr	r3, [pc, #16]	; 119e0 <__assert_fail@plt+0x5d8>
   119cc:	cmp	r3, #0
   119d0:	bxeq	lr
   119d4:	bx	r3
   119d8:	andeq	r5, r2, r8, asr #3
   119dc:	andeq	r5, r2, r8, asr #3
   119e0:	andeq	r0, r0, r0
   119e4:	ldr	r0, [pc, #36]	; 11a10 <__assert_fail@plt+0x608>
   119e8:	ldr	r1, [pc, #36]	; 11a14 <__assert_fail@plt+0x60c>
   119ec:	sub	r1, r1, r0
   119f0:	asr	r1, r1, #2
   119f4:	add	r1, r1, r1, lsr #31
   119f8:	asrs	r1, r1, #1
   119fc:	bxeq	lr
   11a00:	ldr	r3, [pc, #16]	; 11a18 <__assert_fail@plt+0x610>
   11a04:	cmp	r3, #0
   11a08:	bxeq	lr
   11a0c:	bx	r3
   11a10:	andeq	r5, r2, r8, asr #3
   11a14:	andeq	r5, r2, r8, asr #3
   11a18:	andeq	r0, r0, r0
   11a1c:	push	{r4, lr}
   11a20:	ldr	r4, [pc, #24]	; 11a40 <__assert_fail@plt+0x638>
   11a24:	ldrb	r3, [r4]
   11a28:	cmp	r3, #0
   11a2c:	popne	{r4, pc}
   11a30:	bl	119b8 <__assert_fail@plt+0x5b0>
   11a34:	mov	r3, #1
   11a38:	strb	r3, [r4]
   11a3c:	pop	{r4, pc}
   11a40:	andeq	r5, r2, r4, lsl #9
   11a44:	b	119e4 <__assert_fail@plt+0x5dc>
   11a48:	ldr	r3, [r1, #20]
   11a4c:	tst	r3, #1
   11a50:	bxeq	lr
   11a54:	tst	r3, #24
   11a58:	ldr	r2, [r1, #36]	; 0x24
   11a5c:	ldr	r1, [pc, #48]	; 11a94 <__assert_fail@plt+0x68c>
   11a60:	beq	11a74 <__assert_fail@plt+0x66c>
   11a64:	ldr	r3, [r1]
   11a68:	add	r2, r3, r2
   11a6c:	str	r2, [r1]
   11a70:	bx	lr
   11a74:	tst	r3, #256	; 0x100
   11a78:	ldrne	r3, [r1, #4]
   11a7c:	ldreq	r3, [r1, #8]
   11a80:	addne	r2, r3, r2
   11a84:	addeq	r2, r3, r2
   11a88:	strne	r2, [r1, #4]
   11a8c:	streq	r2, [r1, #8]
   11a90:	bx	lr
   11a94:	andeq	r5, r2, r8, lsl #9
   11a98:	push	{r4, lr}
   11a9c:	mov	r5, r1
   11aa0:	mov	r4, r0
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #176]	; 11b60 <__assert_fail@plt+0x758>
   11aac:	mov	r0, #0
   11ab0:	bl	1115c <dcgettext@plt>
   11ab4:	ldr	r6, [pc, #168]	; 11b64 <__assert_fail@plt+0x75c>
   11ab8:	ldr	r2, [r6]
   11abc:	mov	r1, r0
   11ac0:	mov	r0, r4
   11ac4:	bl	11294 <fprintf@plt>
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #148]	; 11b68 <__assert_fail@plt+0x760>
   11ad0:	mov	r0, #0
   11ad4:	bl	1115c <dcgettext@plt>
   11ad8:	mov	r1, r0
   11adc:	mov	r0, r4
   11ae0:	bl	11294 <fprintf@plt>
   11ae4:	mov	r2, #5
   11ae8:	ldr	r1, [pc, #124]	; 11b6c <__assert_fail@plt+0x764>
   11aec:	mov	r0, #0
   11af0:	bl	1115c <dcgettext@plt>
   11af4:	mov	r1, r0
   11af8:	mov	r0, r4
   11afc:	bl	11294 <fprintf@plt>
   11b00:	mov	r2, #5
   11b04:	ldr	r1, [pc, #100]	; 11b70 <__assert_fail@plt+0x768>
   11b08:	mov	r0, #0
   11b0c:	bl	1115c <dcgettext@plt>
   11b10:	ldr	r2, [pc, #92]	; 11b74 <__assert_fail@plt+0x76c>
   11b14:	mov	r1, r0
   11b18:	mov	r0, r4
   11b1c:	bl	11294 <fprintf@plt>
   11b20:	mov	r1, r4
   11b24:	ldr	r0, [r6]
   11b28:	bl	127c0 <__assert_fail@plt+0x13b8>
   11b2c:	cmp	r5, #0
   11b30:	beq	11b3c <__assert_fail@plt+0x734>
   11b34:	mov	r0, r5
   11b38:	bl	11270 <exit@plt>
   11b3c:	mov	r2, #5
   11b40:	ldr	r1, [pc, #48]	; 11b78 <__assert_fail@plt+0x770>
   11b44:	mov	r0, r5
   11b48:	bl	1115c <dcgettext@plt>
   11b4c:	ldr	r2, [pc, #40]	; 11b7c <__assert_fail@plt+0x774>
   11b50:	mov	r1, r0
   11b54:	mov	r0, r4
   11b58:	bl	11294 <fprintf@plt>
   11b5c:	b	11b34 <__assert_fail@plt+0x72c>
   11b60:	muleq	r1, r0, sp
   11b64:	andeq	r5, r2, r4, ror #9
   11b68:			; <UNDEFINED> instruction: 0x00013db4
   11b6c:	andeq	r3, r1, ip, ror #27
   11b70:	andeq	r3, r1, r4, lsr #28
   11b74:	andeq	r4, r1, ip, rrx
   11b78:	andeq	r4, r1, r8, ror r0
   11b7c:	andeq	r4, r1, ip, lsl #1
   11b80:	ldr	r2, [pc, #108]	; 11bf4 <__assert_fail@plt+0x7ec>
   11b84:	cmp	r1, r2
   11b88:	bxeq	lr
   11b8c:	ldr	r3, [r1, #20]
   11b90:	sub	r2, r2, #168	; 0xa8
   11b94:	lsr	r3, r3, #12
   11b98:	eor	r3, r3, #1
   11b9c:	cmp	r1, r2
   11ba0:	moveq	r3, #0
   11ba4:	andne	r3, r3, #1
   11ba8:	cmp	r3, #0
   11bac:	bxeq	lr
   11bb0:	ldr	r0, [r1]
   11bb4:	push	{r4, lr}
   11bb8:	mov	r4, r1
   11bbc:	bl	1127c <strlen@plt>
   11bc0:	ldr	r3, [pc, #48]	; 11bf8 <__assert_fail@plt+0x7f0>
   11bc4:	ldr	r1, [r4, #28]
   11bc8:	ldr	ip, [r4, #36]	; 0x24
   11bcc:	ldr	r2, [r3, #12]
   11bd0:	cmp	r2, r0
   11bd4:	strlt	r0, [r3, #12]
   11bd8:	ldr	r2, [r3, #16]
   11bdc:	ldr	r0, [r3, #20]
   11be0:	add	r2, r2, ip
   11be4:	cmp	r1, r0
   11be8:	str	r2, [r3, #16]
   11bec:	strhi	r1, [r3, #20]
   11bf0:	pop	{r4, pc}
   11bf4:	andeq	r5, r2, r8, lsr #6
   11bf8:	andeq	r5, r2, r8, lsl #9
   11bfc:	ldr	r3, [pc, #68]	; 11c48 <__assert_fail@plt+0x840>
   11c00:	push	{lr}		; (str lr, [sp, #-4]!)
   11c04:	mov	r2, r0
   11c08:	ldr	r3, [r3, #24]
   11c0c:	sub	sp, sp, #44	; 0x2c
   11c10:	cmp	r3, #0
   11c14:	beq	11c40 <__assert_fail@plt+0x838>
   11c18:	ldr	r0, [pc, #44]	; 11c4c <__assert_fail@plt+0x844>
   11c1c:	cmp	r3, #1
   11c20:	ldr	r1, [pc, #40]	; 11c50 <__assert_fail@plt+0x848>
   11c24:	movne	r1, r0
   11c28:	mov	r0, sp
   11c2c:	bl	11354 <sprintf@plt>
   11c30:	mov	r0, sp
   11c34:	bl	1127c <strlen@plt>
   11c38:	add	sp, sp, #44	; 0x2c
   11c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c40:	ldr	r1, [pc, #12]	; 11c54 <__assert_fail@plt+0x84c>
   11c44:	b	11c28 <__assert_fail@plt+0x820>
   11c48:	andeq	r5, r2, r8, lsl #9
   11c4c:	andeq	r4, r1, r0, asr #1
   11c50:	strheq	r4, [r1], -r8
   11c54:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   11c58:	ldr	r3, [pc, #80]	; 11cb0 <__assert_fail@plt+0x8a8>
   11c5c:	push	{r4, lr}
   11c60:	mov	r4, r0
   11c64:	ldr	r0, [r3, #24]
   11c68:	sub	sp, sp, #40	; 0x28
   11c6c:	cmp	r0, #0
   11c70:	mov	r2, r1
   11c74:	beq	11ca8 <__assert_fail@plt+0x8a0>
   11c78:	ldr	r3, [pc, #52]	; 11cb4 <__assert_fail@plt+0x8ac>
   11c7c:	cmp	r0, #1
   11c80:	ldr	r1, [pc, #48]	; 11cb8 <__assert_fail@plt+0x8b0>
   11c84:	moveq	r1, r3
   11c88:	mov	r0, sp
   11c8c:	bl	11354 <sprintf@plt>
   11c90:	mov	r2, sp
   11c94:	mov	r1, r4
   11c98:	ldr	r0, [pc, #28]	; 11cbc <__assert_fail@plt+0x8b4>
   11c9c:	bl	110d8 <printf@plt>
   11ca0:	add	sp, sp, #40	; 0x28
   11ca4:	pop	{r4, pc}
   11ca8:	ldr	r1, [pc, #16]	; 11cc0 <__assert_fail@plt+0x8b8>
   11cac:	b	11c88 <__assert_fail@plt+0x880>
   11cb0:	andeq	r5, r2, r8, lsl #9
   11cb4:	strheq	r4, [r1], -r8
   11cb8:	andeq	r4, r1, r0, asr #1
   11cbc:	andeq	r4, r1, r8, asr #1
   11cc0:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   11cc4:	push	{r4, r5, r6, lr}
   11cc8:	mov	r5, r2
   11ccc:	ldr	r4, [pc, #60]	; 11d10 <__assert_fail@plt+0x908>
   11cd0:	mov	r2, r0
   11cd4:	mov	r6, r1
   11cd8:	ldr	r0, [pc, #52]	; 11d14 <__assert_fail@plt+0x90c>
   11cdc:	ldr	r1, [r4, #12]
   11ce0:	bl	110d8 <printf@plt>
   11ce4:	mov	r1, r6
   11ce8:	ldr	r0, [r4, #28]
   11cec:	bl	11c58 <__assert_fail@plt+0x850>
   11cf0:	ldr	r0, [pc, #32]	; 11d18 <__assert_fail@plt+0x910>
   11cf4:	bl	110d8 <printf@plt>
   11cf8:	ldr	r0, [r4, #32]
   11cfc:	mov	r1, r5
   11d00:	bl	11c58 <__assert_fail@plt+0x850>
   11d04:	mov	r0, #10
   11d08:	pop	{r4, r5, r6, lr}
   11d0c:	b	112d0 <putchar@plt>
   11d10:	andeq	r5, r2, r8, lsl #9
   11d14:	andeq	r4, r1, ip, asr #1
   11d18:	ldrdeq	r4, [r1], -r0
   11d1c:	ldr	r2, [pc, #84]	; 11d78 <__assert_fail@plt+0x970>
   11d20:	cmp	r1, r2
   11d24:	bxeq	lr
   11d28:	ldr	r3, [r1, #20]
   11d2c:	sub	r2, r2, #168	; 0xa8
   11d30:	lsr	r3, r3, #12
   11d34:	eor	r3, r3, #1
   11d38:	cmp	r1, r2
   11d3c:	moveq	r3, #0
   11d40:	andne	r3, r3, #1
   11d44:	cmp	r3, #0
   11d48:	bxeq	lr
   11d4c:	ldr	ip, [pc, #40]	; 11d7c <__assert_fail@plt+0x974>
   11d50:	push	{lr}		; (str lr, [sp, #-4]!)
   11d54:	ldr	r3, [ip, #16]
   11d58:	ldr	lr, [r1, #36]	; 0x24
   11d5c:	ldr	r0, [r1]
   11d60:	add	r3, r3, lr
   11d64:	ldr	r2, [r1, #28]
   11d68:	mov	r1, lr
   11d6c:	pop	{lr}		; (ldr lr, [sp], #4)
   11d70:	str	r3, [ip, #16]
   11d74:	b	11cc4 <__assert_fail@plt+0x8bc>
   11d78:	andeq	r5, r2, r8, lsr #6
   11d7c:	andeq	r5, r2, r8, lsl #9
   11d80:	push	{r4, r5, r6, r7, lr}
   11d84:	mov	r5, r0
   11d88:	ldr	r4, [pc, #844]	; 120dc <__assert_fail@plt+0xcd4>
   11d8c:	sub	sp, sp, #20
   11d90:	ldr	r3, [r4, #36]	; 0x24
   11d94:	cmp	r3, #0
   11d98:	bne	11ff4 <__assert_fail@plt+0xbec>
   11d9c:	ldr	r3, [pc, #828]	; 120e0 <__assert_fail@plt+0xcd8>
   11da0:	ldr	r3, [r3]
   11da4:	cmp	r3, #0
   11da8:	beq	11edc <__assert_fail@plt+0xad4>
   11dac:	mov	r3, #0
   11db0:	mov	r2, r3
   11db4:	ldr	r1, [pc, #808]	; 120e4 <__assert_fail@plt+0xcdc>
   11db8:	mov	r0, r5
   11dbc:	str	r3, [r4, #8]
   11dc0:	str	r3, [r4, #4]
   11dc4:	str	r3, [r4]
   11dc8:	bl	113c0 <bfd_map_over_sections@plt>
   11dcc:	ldr	r2, [r4, #44]	; 0x2c
   11dd0:	ldr	r1, [r4, #8]
   11dd4:	ldr	r3, [r4, #40]	; 0x28
   11dd8:	cmp	r2, #0
   11ddc:	add	r3, r1, r3
   11de0:	add	r2, r2, #1
   11de4:	str	r3, [r4, #8]
   11de8:	str	r2, [r4, #44]	; 0x2c
   11dec:	bne	11e10 <__assert_fail@plt+0xa08>
   11df0:	ldr	r0, [r4, #24]
   11df4:	ldr	r3, [pc, #748]	; 120e8 <__assert_fail@plt+0xce0>
   11df8:	ldr	r2, [pc, #748]	; 120ec <__assert_fail@plt+0xce4>
   11dfc:	cmp	r0, #1
   11e00:	movne	r0, r3
   11e04:	moveq	r0, r2
   11e08:	bl	11228 <puts@plt>
   11e0c:	ldr	r3, [r4, #8]
   11e10:	ldr	r1, [r4]
   11e14:	ldr	r0, [r4, #4]
   11e18:	ldr	r2, [r4, #48]	; 0x30
   11e1c:	add	r7, r1, r0
   11e20:	cmp	r2, #0
   11e24:	add	r7, r7, r3
   11e28:	beq	11e50 <__assert_fail@plt+0xa48>
   11e2c:	ldr	lr, [r4, #52]	; 0x34
   11e30:	ldr	ip, [r4, #56]	; 0x38
   11e34:	ldr	r2, [r4, #60]	; 0x3c
   11e38:	add	lr, lr, r1
   11e3c:	add	r0, ip, r0
   11e40:	add	r3, r2, r3
   11e44:	str	lr, [r4, #52]	; 0x34
   11e48:	str	r0, [r4, #56]	; 0x38
   11e4c:	str	r3, [r4, #60]	; 0x3c
   11e50:	ldr	r6, [pc, #664]	; 120f0 <__assert_fail@plt+0xce8>
   11e54:	mov	r0, #7
   11e58:	bl	11c58 <__assert_fail@plt+0x850>
   11e5c:	ldr	r1, [r6]
   11e60:	mov	r0, #9
   11e64:	bl	1136c <putc@plt>
   11e68:	ldr	r1, [r4, #4]
   11e6c:	mov	r0, #7
   11e70:	bl	11c58 <__assert_fail@plt+0x850>
   11e74:	ldr	r1, [r6]
   11e78:	mov	r0, #9
   11e7c:	bl	1136c <putc@plt>
   11e80:	ldr	r1, [r4, #8]
   11e84:	mov	r0, #7
   11e88:	bl	11c58 <__assert_fail@plt+0x850>
   11e8c:	ldr	r0, [r4, #24]
   11e90:	ldr	r3, [pc, #604]	; 120f4 <__assert_fail@plt+0xcec>
   11e94:	ldr	r1, [pc, #604]	; 120f8 <__assert_fail@plt+0xcf0>
   11e98:	cmp	r0, #1
   11e9c:	moveq	r0, r1
   11ea0:	movne	r0, r3
   11ea4:	mov	r2, r7
   11ea8:	mov	r1, r7
   11eac:	bl	110d8 <printf@plt>
   11eb0:	ldr	r1, [r6]
   11eb4:	ldr	r0, [r5]
   11eb8:	bl	113e4 <fputs@plt>
   11ebc:	ldr	r3, [r5, #140]	; 0x8c
   11ec0:	cmp	r3, #0
   11ec4:	beq	1209c <__assert_fail@plt+0xc94>
   11ec8:	ldr	r1, [r3]
   11ecc:	ldr	r0, [pc, #552]	; 120fc <__assert_fail@plt+0xcf4>
   11ed0:	add	sp, sp, #20
   11ed4:	pop	{r4, r5, r6, r7, lr}
   11ed8:	b	110d8 <printf@plt>
   11edc:	mov	r2, r3
   11ee0:	ldr	r1, [pc, #536]	; 12100 <__assert_fail@plt+0xcf8>
   11ee4:	mov	r0, r5
   11ee8:	str	r3, [r4, #16]
   11eec:	str	r3, [r4, #20]
   11ef0:	str	r3, [r4, #12]
   11ef4:	bl	113c0 <bfd_map_over_sections@plt>
   11ef8:	ldr	r3, [r4, #36]	; 0x24
   11efc:	cmp	r3, #0
   11f00:	beq	11f24 <__assert_fail@plt+0xb1c>
   11f04:	ldr	r3, [r4, #12]
   11f08:	ldr	r2, [r4, #40]	; 0x28
   11f0c:	cmp	r3, #4
   11f10:	movle	r3, #5
   11f14:	strle	r3, [r4, #12]
   11f18:	ldr	r3, [r4, #16]
   11f1c:	add	r3, r3, r2
   11f20:	str	r3, [r4, #16]
   11f24:	ldr	r0, [r4, #20]
   11f28:	bl	11bfc <__assert_fail@plt+0x7f4>
   11f2c:	cmp	r0, #3
   11f30:	movls	r3, #4
   11f34:	strhi	r0, [r4, #32]
   11f38:	ldr	r0, [r4, #16]
   11f3c:	strls	r3, [r4, #32]
   11f40:	bl	11bfc <__assert_fail@plt+0x7f4>
   11f44:	ldr	r1, [r5]
   11f48:	cmp	r0, #3
   11f4c:	movls	r3, #4
   11f50:	strhi	r0, [r4, #28]
   11f54:	strls	r3, [r4, #28]
   11f58:	ldr	r0, [pc, #420]	; 12104 <__assert_fail@plt+0xcfc>
   11f5c:	mov	r3, #0
   11f60:	str	r3, [r4, #16]
   11f64:	bl	110d8 <printf@plt>
   11f68:	ldr	r3, [r5, #140]	; 0x8c
   11f6c:	cmp	r3, #0
   11f70:	beq	11f80 <__assert_fail@plt+0xb78>
   11f74:	ldr	r1, [r3]
   11f78:	ldr	r0, [pc, #380]	; 120fc <__assert_fail@plt+0xcf4>
   11f7c:	bl	110d8 <printf@plt>
   11f80:	ldr	r2, [r4, #32]
   11f84:	ldr	r1, [pc, #380]	; 12108 <__assert_fail@plt+0xd00>
   11f88:	ldr	r3, [pc, #380]	; 1210c <__assert_fail@plt+0xd04>
   11f8c:	str	r1, [sp, #8]
   11f90:	str	r2, [sp, #4]
   11f94:	str	r3, [sp]
   11f98:	ldr	r2, [pc, #368]	; 12110 <__assert_fail@plt+0xd08>
   11f9c:	ldr	r3, [r4, #28]
   11fa0:	ldr	r1, [r4, #12]
   11fa4:	ldr	r0, [pc, #360]	; 12114 <__assert_fail@plt+0xd0c>
   11fa8:	bl	110d8 <printf@plt>
   11fac:	mov	r0, r5
   11fb0:	mov	r2, #0
   11fb4:	ldr	r1, [pc, #348]	; 12118 <__assert_fail@plt+0xd10>
   11fb8:	bl	113c0 <bfd_map_over_sections@plt>
   11fbc:	ldr	r3, [r4, #36]	; 0x24
   11fc0:	cmp	r3, #0
   11fc4:	bne	120a4 <__assert_fail@plt+0xc9c>
   11fc8:	ldr	r2, [pc, #332]	; 1211c <__assert_fail@plt+0xd14>
   11fcc:	ldr	r1, [r4, #12]
   11fd0:	ldr	r0, [pc, #328]	; 12120 <__assert_fail@plt+0xd18>
   11fd4:	bl	110d8 <printf@plt>
   11fd8:	ldr	r0, [r4, #28]
   11fdc:	ldr	r1, [r4, #16]
   11fe0:	bl	11c58 <__assert_fail@plt+0x850>
   11fe4:	ldr	r0, [pc, #312]	; 12124 <__assert_fail@plt+0xd1c>
   11fe8:	add	sp, sp, #20
   11fec:	pop	{r4, r5, r6, r7, lr}
   11ff0:	b	11228 <puts@plt>
   11ff4:	ldr	r3, [r0, #40]	; 0x28
   11ff8:	mov	r2, #0
   11ffc:	str	r2, [r4, #40]	; 0x28
   12000:	lsr	r3, r3, #5
   12004:	and	r3, r3, #82	; 0x52
   12008:	cmp	r3, #16
   1200c:	bne	11d9c <__assert_fail@plt+0x994>
   12010:	ldr	r3, [r0, #4]
   12014:	ldr	r3, [r3, #260]	; 0x104
   12018:	blx	r3
   1201c:	subs	r6, r0, #0
   12020:	blt	120d4 <__assert_fail@plt+0xccc>
   12024:	bne	120c8 <__assert_fail@plt+0xcc0>
   12028:	ldr	r3, [r5, #4]
   1202c:	mov	r1, r6
   12030:	mov	r0, r5
   12034:	ldr	r3, [r3, #264]	; 0x108
   12038:	blx	r3
   1203c:	cmp	r0, #0
   12040:	blt	120d4 <__assert_fail@plt+0xccc>
   12044:	ldr	r1, [r4, #40]	; 0x28
   12048:	add	r0, r6, r0, lsl #2
   1204c:	mov	ip, #0
   12050:	cmp	r6, r0
   12054:	beq	12088 <__assert_fail@plt+0xc80>
   12058:	ldr	r3, [r0, #-4]!
   1205c:	ldr	r2, [r3, #16]
   12060:	ldr	r2, [r2, #20]
   12064:	tst	r2, #4096	; 0x1000
   12068:	beq	12050 <__assert_fail@plt+0xc48>
   1206c:	ldr	r2, [r3, #12]
   12070:	tst	r2, #256	; 0x100
   12074:	moveq	ip, #1
   12078:	ldreq	r3, [r3, #8]
   1207c:	addeq	r1, r1, r3
   12080:	cmp	r6, r0
   12084:	bne	12058 <__assert_fail@plt+0xc50>
   12088:	cmp	ip, #0
   1208c:	mov	r0, r6
   12090:	strne	r1, [r4, #40]	; 0x28
   12094:	bl	11114 <free@plt>
   12098:	b	11d9c <__assert_fail@plt+0x994>
   1209c:	add	sp, sp, #20
   120a0:	pop	{r4, r5, r6, r7, pc}
   120a4:	ldr	r2, [r4, #40]	; 0x28
   120a8:	ldr	r3, [r4, #16]
   120ac:	mov	r1, r2
   120b0:	add	r3, r3, r2
   120b4:	ldr	r0, [pc, #108]	; 12128 <__assert_fail@plt+0xd20>
   120b8:	mov	r2, #0
   120bc:	str	r3, [r4, #16]
   120c0:	bl	11cc4 <__assert_fail@plt+0x8bc>
   120c4:	b	11fc8 <__assert_fail@plt+0xbc0>
   120c8:	bl	111b0 <xmalloc@plt>
   120cc:	mov	r6, r0
   120d0:	b	12028 <__assert_fail@plt+0xc20>
   120d4:	ldr	r0, [r5]
   120d8:	bl	12628 <__assert_fail@plt+0x1220>
   120dc:	andeq	r5, r2, r8, lsl #9
   120e0:	andeq	r5, r2, r4, asr #2
   120e4:	andeq	r1, r1, r8, asr #20
   120e8:	andeq	r4, r1, r8, lsl #2
   120ec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   120f0:	andeq	r5, r2, r8, ror r4
   120f4:	andeq	r4, r1, r8, asr #2
   120f8:	andeq	r4, r1, ip, lsr r1
   120fc:	andeq	r4, r1, r4, asr r1
   12100:	andeq	r1, r1, r0, lsl #23
   12104:	andeq	r4, r1, r0, ror #2
   12108:	andeq	r4, r1, r4, lsl #3
   1210c:	andeq	r4, r1, ip, lsl #3
   12110:	andeq	r4, r1, r8, ror #2
   12114:	andeq	r4, r1, r0, ror r1
   12118:	andeq	r1, r1, ip, lsl sp
   1211c:	muleq	r1, ip, r1
   12120:	andeq	r4, r1, ip, asr #1
   12124:	andeq	r4, r1, r8, rrx
   12128:	muleq	r1, r4, r1
   1212c:	push	{r4, lr}
   12130:	mov	r1, #2
   12134:	sub	sp, sp, #8
   12138:	mov	r4, r0
   1213c:	bl	113a8 <bfd_check_format@plt>
   12140:	cmp	r0, #0
   12144:	beq	12150 <__assert_fail@plt+0xd48>
   12148:	add	sp, sp, #8
   1214c:	pop	{r4, pc}
   12150:	add	r2, sp, #4
   12154:	mov	r1, #1
   12158:	mov	r0, r4
   1215c:	bl	11378 <bfd_check_format_matches@plt>
   12160:	cmp	r0, #0
   12164:	bne	121f8 <__assert_fail@plt+0xdf0>
   12168:	bl	11198 <bfd_get_error@plt>
   1216c:	cmp	r0, #13
   12170:	beq	12210 <__assert_fail@plt+0xe08>
   12174:	add	r2, sp, #4
   12178:	mov	r1, #3
   1217c:	mov	r0, r4
   12180:	bl	11378 <bfd_check_format_matches@plt>
   12184:	cmp	r0, #0
   12188:	bne	121b4 <__assert_fail@plt+0xdac>
   1218c:	ldr	r0, [r4]
   12190:	bl	123f4 <__assert_fail@plt+0xfec>
   12194:	bl	11198 <bfd_get_error@plt>
   12198:	cmp	r0, #13
   1219c:	beq	12218 <__assert_fail@plt+0xe10>
   121a0:	ldr	r3, [pc, #132]	; 1222c <__assert_fail@plt+0xe24>
   121a4:	mov	r2, #3
   121a8:	str	r2, [r3, #64]	; 0x40
   121ac:	add	sp, sp, #8
   121b0:	pop	{r4, pc}
   121b4:	mov	r0, r4
   121b8:	bl	11d80 <__assert_fail@plt+0x978>
   121bc:	ldr	r3, [pc, #108]	; 12230 <__assert_fail@plt+0xe28>
   121c0:	mov	r1, #1
   121c4:	mov	r2, #11
   121c8:	ldr	r3, [r3]
   121cc:	ldr	r0, [pc, #96]	; 12234 <__assert_fail@plt+0xe2c>
   121d0:	bl	111a4 <fwrite@plt>
   121d4:	mov	r0, r4
   121d8:	bl	110cc <bfd_core_file_failing_command@plt>
   121dc:	subs	r1, r0, #0
   121e0:	beq	121ec <__assert_fail@plt+0xde4>
   121e4:	ldr	r0, [pc, #76]	; 12238 <__assert_fail@plt+0xe30>
   121e8:	bl	110d8 <printf@plt>
   121ec:	ldr	r0, [pc, #72]	; 1223c <__assert_fail@plt+0xe34>
   121f0:	bl	11228 <puts@plt>
   121f4:	b	12148 <__assert_fail@plt+0xd40>
   121f8:	mov	r0, r4
   121fc:	bl	11d80 <__assert_fail@plt+0x978>
   12200:	mov	r0, #10
   12204:	bl	112d0 <putchar@plt>
   12208:	add	sp, sp, #8
   1220c:	pop	{r4, pc}
   12210:	ldr	r0, [r4]
   12214:	bl	123f4 <__assert_fail@plt+0xfec>
   12218:	ldr	r0, [sp, #4]
   1221c:	bl	12734 <__assert_fail@plt+0x132c>
   12220:	ldr	r0, [sp, #4]
   12224:	bl	11114 <free@plt>
   12228:	b	121a0 <__assert_fail@plt+0xd98>
   1222c:	andeq	r5, r2, r8, lsl #9
   12230:	andeq	r5, r2, r8, ror r4
   12234:	andeq	r4, r1, r4, lsr #3
   12238:			; <UNDEFINED> instruction: 0x000141b0
   1223c:	andeq	r4, r1, r0, asr #3
   12240:	push	{r4, r5, r6, r7, r8, lr}
   12244:	mov	r7, r0
   12248:	bl	12da0 <__assert_fail@plt+0x1998>
   1224c:	cmp	r0, #1
   12250:	sbcs	r3, r1, #0
   12254:	blt	12310 <__assert_fail@plt+0xf08>
   12258:	ldr	r8, [pc, #204]	; 1232c <__assert_fail@plt+0xf24>
   1225c:	mov	r0, r7
   12260:	ldr	r1, [r8, #68]	; 0x44
   12264:	bl	11138 <bfd_openr@plt>
   12268:	subs	r6, r0, #0
   1226c:	beq	122fc <__assert_fail@plt+0xef4>
   12270:	mov	r1, #2
   12274:	bl	113a8 <bfd_check_format@plt>
   12278:	cmp	r0, #0
   1227c:	beq	12320 <__assert_fail@plt+0xf18>
   12280:	mov	r4, #0
   12284:	b	122a4 <__assert_fail@plt+0xe9c>
   12288:	bl	1212c <__assert_fail@plt+0xd24>
   1228c:	subs	r0, r4, #0
   12290:	beq	122a0 <__assert_fail@plt+0xe98>
   12294:	bl	11348 <bfd_close@plt>
   12298:	cmp	r4, r5
   1229c:	beq	122ec <__assert_fail@plt+0xee4>
   122a0:	mov	r4, r5
   122a4:	mov	r0, #0
   122a8:	bl	111bc <bfd_set_error@plt>
   122ac:	mov	r1, r4
   122b0:	mov	r0, r6
   122b4:	bl	113b4 <bfd_openr_next_archived_file@plt>
   122b8:	subs	r5, r0, #0
   122bc:	bne	12288 <__assert_fail@plt+0xe80>
   122c0:	bl	11198 <bfd_get_error@plt>
   122c4:	cmp	r0, #9
   122c8:	beq	122dc <__assert_fail@plt+0xed4>
   122cc:	ldr	r0, [r6]
   122d0:	bl	123f4 <__assert_fail@plt+0xfec>
   122d4:	mov	r3, #2
   122d8:	str	r3, [r8, #64]	; 0x40
   122dc:	cmp	r4, #0
   122e0:	beq	122ec <__assert_fail@plt+0xee4>
   122e4:	mov	r0, r4
   122e8:	bl	11348 <bfd_close@plt>
   122ec:	mov	r0, r6
   122f0:	bl	11348 <bfd_close@plt>
   122f4:	cmp	r0, #0
   122f8:	popne	{r4, r5, r6, r7, r8, pc}
   122fc:	mov	r0, r7
   12300:	bl	123f4 <__assert_fail@plt+0xfec>
   12304:	mov	r3, #1
   12308:	str	r3, [r8, #64]	; 0x40
   1230c:	pop	{r4, r5, r6, r7, r8, pc}
   12310:	ldr	r3, [pc, #20]	; 1232c <__assert_fail@plt+0xf24>
   12314:	mov	r2, #1
   12318:	str	r2, [r3, #64]	; 0x40
   1231c:	pop	{r4, r5, r6, r7, r8, pc}
   12320:	mov	r0, r6
   12324:	bl	1212c <__assert_fail@plt+0xd24>
   12328:	b	122ec <__assert_fail@plt+0xee4>
   1232c:	andeq	r5, r2, r8, lsl #9
   12330:	push	{r4, r5, r6, lr}
   12334:	mov	r1, #47	; 0x2f
   12338:	mov	r6, r0
   1233c:	bl	11318 <strrchr@plt>
   12340:	cmp	r0, #0
   12344:	beq	12394 <__assert_fail@plt+0xf8c>
   12348:	sub	r4, r0, r6
   1234c:	add	r0, r4, #11
   12350:	bl	111b0 <xmalloc@plt>
   12354:	mov	r2, r4
   12358:	mov	r1, r6
   1235c:	mov	r5, r0
   12360:	bl	1112c <memcpy@plt>
   12364:	add	r2, r4, #1
   12368:	add	r2, r5, r2
   1236c:	mov	r3, #47	; 0x2f
   12370:	strb	r3, [r5, r4]
   12374:	ldr	r3, [pc, #44]	; 123a8 <__assert_fail@plt+0xfa0>
   12378:	ldm	r3!, {r0, r1}
   1237c:	ldrb	r3, [r3]
   12380:	str	r0, [r2]
   12384:	str	r1, [r2, #4]
   12388:	strb	r3, [r2, #8]
   1238c:	mov	r0, r5
   12390:	pop	{r4, r5, r6, pc}
   12394:	mov	r0, #9
   12398:	bl	111b0 <xmalloc@plt>
   1239c:	mov	r5, r0
   123a0:	mov	r2, r0
   123a4:	b	12374 <__assert_fail@plt+0xf6c>
   123a8:	muleq	r1, r0, r2
   123ac:	subs	r3, r0, #0
   123b0:	beq	123cc <__assert_fail@plt+0xfc4>
   123b4:	cmp	r3, #1
   123b8:	beq	123d8 <__assert_fail@plt+0xfd0>
   123bc:	mov	r2, #5
   123c0:	ldr	r1, [pc, #32]	; 123e8 <__assert_fail@plt+0xfe0>
   123c4:	mov	r0, #0
   123c8:	b	1115c <dcgettext@plt>
   123cc:	mov	r2, #5
   123d0:	ldr	r1, [pc, #20]	; 123ec <__assert_fail@plt+0xfe4>
   123d4:	b	1115c <dcgettext@plt>
   123d8:	mov	r2, #5
   123dc:	ldr	r1, [pc, #12]	; 123f0 <__assert_fail@plt+0xfe8>
   123e0:	mov	r0, #0
   123e4:	b	1115c <dcgettext@plt>
   123e8:			; <UNDEFINED> instruction: 0x000142b8
   123ec:	muleq	r1, ip, r2
   123f0:	andeq	r4, r1, r8, lsr #5
   123f4:	push	{r4, r5, lr}
   123f8:	sub	sp, sp, #12
   123fc:	mov	r4, r0
   12400:	bl	11198 <bfd_get_error@plt>
   12404:	bl	11390 <bfd_errmsg@plt>
   12408:	ldr	r3, [pc, #84]	; 12464 <__assert_fail@plt+0x105c>
   1240c:	mov	r5, r0
   12410:	ldr	r0, [r3]
   12414:	bl	110e4 <fflush@plt>
   12418:	cmp	r4, #0
   1241c:	ldr	r2, [pc, #68]	; 12468 <__assert_fail@plt+0x1060>
   12420:	ldr	r1, [pc, #68]	; 1246c <__assert_fail@plt+0x1064>
   12424:	beq	12448 <__assert_fail@plt+0x1040>
   12428:	str	r5, [sp]
   1242c:	mov	r3, r4
   12430:	ldr	r2, [r2]
   12434:	ldr	r0, [r1]
   12438:	ldr	r1, [pc, #48]	; 12470 <__assert_fail@plt+0x1068>
   1243c:	bl	11294 <fprintf@plt>
   12440:	add	sp, sp, #12
   12444:	pop	{r4, r5, pc}
   12448:	ldr	r0, [r1]
   1244c:	mov	r3, r5
   12450:	ldr	r2, [r2]
   12454:	ldr	r1, [pc, #24]	; 12474 <__assert_fail@plt+0x106c>
   12458:	add	sp, sp, #12
   1245c:	pop	{r4, r5, lr}
   12460:	b	11294 <fprintf@plt>
   12464:	andeq	r5, r2, r8, ror r4
   12468:	andeq	r5, r2, r4, ror #9
   1246c:	ldrdeq	r5, [r2], -r0
   12470:	andeq	r4, r1, ip, asr #5
   12474:	ldrdeq	r4, [r1], -r0
   12478:	ldr	r3, [r1, #8]
   1247c:	push	{r4, r5, r6, r7, r8, lr}
   12480:	add	r3, r3, #1
   12484:	mov	r6, r1
   12488:	mov	r4, r0
   1248c:	str	r3, [r1, #8]
   12490:	ldr	r0, [r1, #12]
   12494:	add	r1, r3, r3, lsl #1
   12498:	rsb	r1, r3, r1, lsl #3
   1249c:	lsl	r2, r1, #2
   124a0:	cmp	r0, r2
   124a4:	bcs	124ec <__assert_fail@plt+0x10e4>
   124a8:	cmp	r3, #63	; 0x3f
   124ac:	lslgt	r5, r1, #3
   124b0:	movle	r5, #11776	; 0x2e00
   124b4:	mov	r1, r5
   124b8:	ldr	r0, [r6, #16]
   124bc:	bl	11174 <xrealloc@plt>
   124c0:	ldr	r2, [r6, #12]
   124c4:	mov	r1, #0
   124c8:	str	r0, [r6, #16]
   124cc:	add	r0, r0, r2
   124d0:	sub	r2, r5, r2
   124d4:	bl	112c4 <memset@plt>
   124d8:	ldr	r3, [r6, #8]
   124dc:	str	r5, [r6, #12]
   124e0:	add	r2, r3, r3, lsl #1
   124e4:	rsb	r3, r3, r2, lsl #3
   124e8:	lsl	r2, r3, #2
   124ec:	ldr	r3, [r6, #16]
   124f0:	ldr	r1, [r4]
   124f4:	add	r3, r3, r2
   124f8:	mov	r0, #0
   124fc:	str	r1, [r3, #-92]	; 0xffffffa4
   12500:	mov	r2, #5
   12504:	ldr	r1, [pc, #276]	; 12620 <__assert_fail@plt+0x1218>
   12508:	bl	1115c <dcgettext@plt>
   1250c:	ldr	r7, [r4]
   12510:	mov	r5, r0
   12514:	ldr	r0, [r4, #12]
   12518:	bl	123ac <__assert_fail@plt+0xfa4>
   1251c:	mov	r8, r0
   12520:	ldr	r0, [r4, #8]
   12524:	bl	123ac <__assert_fail@plt+0xfa4>
   12528:	mov	r2, r8
   1252c:	mov	r1, r7
   12530:	mov	r3, r0
   12534:	mov	r0, r5
   12538:	bl	110d8 <printf@plt>
   1253c:	ldr	r1, [r4]
   12540:	ldr	r0, [r6]
   12544:	bl	112f4 <bfd_openw@plt>
   12548:	subs	r5, r0, #0
   1254c:	beq	1260c <__assert_fail@plt+0x1204>
   12550:	mov	r1, #1
   12554:	bl	11258 <bfd_set_format@plt>
   12558:	cmp	r0, #0
   1255c:	beq	125ec <__assert_fail@plt+0x11e4>
   12560:	ldr	r8, [pc, #188]	; 12624 <__assert_fail@plt+0x121c>
   12564:	mov	r4, #2
   12568:	mov	r7, #1
   1256c:	b	1257c <__assert_fail@plt+0x1174>
   12570:	add	r4, r4, #1
   12574:	cmp	r4, #89	; 0x59
   12578:	beq	125dc <__assert_fail@plt+0x11d4>
   1257c:	ldr	r3, [r5, #4]
   12580:	mov	r2, #0
   12584:	mov	r1, r4
   12588:	ldr	r3, [r3, #340]	; 0x154
   1258c:	mov	r0, r5
   12590:	blx	r3
   12594:	cmp	r0, #0
   12598:	beq	12570 <__assert_fail@plt+0x1168>
   1259c:	mov	r1, #0
   125a0:	mov	r0, r4
   125a4:	bl	112a0 <bfd_printable_arch_mach@plt>
   125a8:	mov	r1, r0
   125ac:	mov	r0, r8
   125b0:	bl	110d8 <printf@plt>
   125b4:	ldr	r2, [r6, #8]
   125b8:	ldr	r3, [r6, #16]
   125bc:	add	r1, r2, r2, lsl #1
   125c0:	rsb	r2, r2, r1, lsl #3
   125c4:	add	r3, r3, r2, lsl #2
   125c8:	add	r3, r4, r3
   125cc:	add	r4, r4, #1
   125d0:	cmp	r4, #89	; 0x59
   125d4:	strb	r7, [r3, #-90]	; 0xffffffa6
   125d8:	bne	1257c <__assert_fail@plt+0x1174>
   125dc:	mov	r0, r5
   125e0:	bl	11288 <bfd_close_all_done@plt>
   125e4:	ldr	r0, [r6, #4]
   125e8:	pop	{r4, r5, r6, r7, r8, pc}
   125ec:	bl	11198 <bfd_get_error@plt>
   125f0:	cmp	r0, #5
   125f4:	beq	125dc <__assert_fail@plt+0x11d4>
   125f8:	ldr	r0, [r4]
   125fc:	bl	123f4 <__assert_fail@plt+0xfec>
   12600:	mov	r3, #1
   12604:	str	r3, [r6, #4]
   12608:	b	125dc <__assert_fail@plt+0x11d4>
   1260c:	ldr	r0, [r6]
   12610:	bl	123f4 <__assert_fail@plt+0xfec>
   12614:	mov	r0, #1
   12618:	str	r0, [r6, #4]
   1261c:	pop	{r4, r5, r6, r7, r8, pc}
   12620:	ldrdeq	r4, [r1], -r8
   12624:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12628:	push	{r4, lr}
   1262c:	bl	123f4 <__assert_fail@plt+0xfec>
   12630:	mov	r0, #1
   12634:	bl	1133c <xexit@plt>
   12638:	ldr	r3, [pc, #72]	; 12688 <__assert_fail@plt+0x1280>
   1263c:	push	{r4, r5, r6, lr}
   12640:	mov	r5, r0
   12644:	ldr	r0, [r3]
   12648:	mov	r6, r1
   1264c:	ldr	r4, [pc, #56]	; 1268c <__assert_fail@plt+0x1284>
   12650:	bl	110e4 <fflush@plt>
   12654:	ldr	r3, [pc, #52]	; 12690 <__assert_fail@plt+0x1288>
   12658:	ldr	r1, [pc, #52]	; 12694 <__assert_fail@plt+0x128c>
   1265c:	ldr	r0, [r4]
   12660:	ldr	r2, [r3]
   12664:	bl	11294 <fprintf@plt>
   12668:	mov	r1, r5
   1266c:	mov	r2, r6
   12670:	ldr	r0, [r4]
   12674:	bl	11324 <vfprintf@plt>
   12678:	ldr	r1, [r4]
   1267c:	mov	r0, #10
   12680:	pop	{r4, r5, r6, lr}
   12684:	b	1136c <putc@plt>
   12688:	andeq	r5, r2, r8, ror r4
   1268c:	ldrdeq	r5, [r2], -r0
   12690:	andeq	r5, r2, r4, ror #9
   12694:	strdeq	r4, [r1], -ip
   12698:	push	{r0, r1, r2, r3}
   1269c:	push	{lr}		; (str lr, [sp, #-4]!)
   126a0:	sub	sp, sp, #12
   126a4:	add	r3, sp, #20
   126a8:	ldr	r0, [sp, #16]
   126ac:	mov	r1, r3
   126b0:	str	r3, [sp, #4]
   126b4:	bl	12638 <__assert_fail@plt+0x1230>
   126b8:	mov	r0, #1
   126bc:	bl	1133c <xexit@plt>
   126c0:	push	{r0, r1, r2, r3}
   126c4:	push	{lr}		; (str lr, [sp, #-4]!)
   126c8:	sub	sp, sp, #12
   126cc:	add	r3, sp, #20
   126d0:	mov	r1, r3
   126d4:	ldr	r0, [sp, #16]
   126d8:	str	r3, [sp, #4]
   126dc:	bl	12638 <__assert_fail@plt+0x1230>
   126e0:	add	sp, sp, #12
   126e4:	pop	{lr}		; (ldr lr, [sp], #4)
   126e8:	add	sp, sp, #16
   126ec:	bx	lr
   126f0:	push	{r4, lr}
   126f4:	ldr	r0, [pc, #48]	; 1272c <__assert_fail@plt+0x1324>
   126f8:	bl	11108 <bfd_set_default_target@plt>
   126fc:	cmp	r0, #0
   12700:	popne	{r4, pc}
   12704:	mov	r2, #5
   12708:	ldr	r1, [pc, #32]	; 12730 <__assert_fail@plt+0x1328>
   1270c:	bl	1115c <dcgettext@plt>
   12710:	mov	r4, r0
   12714:	bl	11198 <bfd_get_error@plt>
   12718:	bl	11390 <bfd_errmsg@plt>
   1271c:	ldr	r1, [pc, #8]	; 1272c <__assert_fail@plt+0x1324>
   12720:	mov	r2, r0
   12724:	mov	r0, r4
   12728:	bl	12698 <__assert_fail@plt+0x1290>
   1272c:	andeq	r4, r1, r4, lsl #6
   12730:	andeq	r4, r1, r0, lsr #6
   12734:	ldr	r3, [pc, #112]	; 127ac <__assert_fail@plt+0x13a4>
   12738:	push	{r4, r5, r6, lr}
   1273c:	mov	r4, r0
   12740:	ldr	r5, [pc, #104]	; 127b0 <__assert_fail@plt+0x13a8>
   12744:	ldr	r0, [r3]
   12748:	bl	110e4 <fflush@plt>
   1274c:	mov	r2, #5
   12750:	ldr	r1, [pc, #92]	; 127b4 <__assert_fail@plt+0x13ac>
   12754:	mov	r0, #0
   12758:	ldr	r6, [r5]
   1275c:	bl	1115c <dcgettext@plt>
   12760:	ldr	r3, [pc, #80]	; 127b8 <__assert_fail@plt+0x13b0>
   12764:	ldr	r2, [r3]
   12768:	mov	r1, r0
   1276c:	mov	r0, r6
   12770:	bl	11294 <fprintf@plt>
   12774:	ldr	r2, [r4]
   12778:	cmp	r2, #0
   1277c:	beq	1279c <__assert_fail@plt+0x1394>
   12780:	ldr	r6, [pc, #52]	; 127bc <__assert_fail@plt+0x13b4>
   12784:	mov	r1, r6
   12788:	ldr	r0, [r5]
   1278c:	bl	11294 <fprintf@plt>
   12790:	ldr	r2, [r4, #4]!
   12794:	cmp	r2, #0
   12798:	bne	12784 <__assert_fail@plt+0x137c>
   1279c:	ldr	r1, [r5]
   127a0:	mov	r0, #10
   127a4:	pop	{r4, r5, r6, lr}
   127a8:	b	11330 <fputc@plt>
   127ac:	andeq	r5, r2, r8, ror r4
   127b0:	ldrdeq	r5, [r2], -r0
   127b4:	andeq	r4, r1, ip, asr #6
   127b8:	andeq	r5, r2, r4, ror #9
   127bc:	andeq	r4, r1, r0, asr #9
   127c0:	push	{r4, r5, r6, r7, r8, lr}
   127c4:	subs	r4, r0, #0
   127c8:	mov	r2, #5
   127cc:	mov	r5, r1
   127d0:	beq	1283c <__assert_fail@plt+0x1434>
   127d4:	ldr	r1, [pc, #120]	; 12854 <__assert_fail@plt+0x144c>
   127d8:	mov	r0, #0
   127dc:	bl	1115c <dcgettext@plt>
   127e0:	mov	r2, r4
   127e4:	mov	r1, r0
   127e8:	mov	r0, r5
   127ec:	bl	11294 <fprintf@plt>
   127f0:	bl	1118c <bfd_target_list@plt>
   127f4:	ldr	r2, [r0]
   127f8:	mov	r7, r0
   127fc:	cmp	r2, #0
   12800:	beq	12824 <__assert_fail@plt+0x141c>
   12804:	ldr	r6, [pc, #76]	; 12858 <__assert_fail@plt+0x1450>
   12808:	mov	r4, r0
   1280c:	mov	r1, r6
   12810:	mov	r0, r5
   12814:	bl	11294 <fprintf@plt>
   12818:	ldr	r2, [r4, #4]!
   1281c:	cmp	r2, #0
   12820:	bne	1280c <__assert_fail@plt+0x1404>
   12824:	mov	r1, r5
   12828:	mov	r0, #10
   1282c:	bl	11330 <fputc@plt>
   12830:	mov	r0, r7
   12834:	pop	{r4, r5, r6, r7, r8, lr}
   12838:	b	11114 <free@plt>
   1283c:	ldr	r1, [pc, #24]	; 1285c <__assert_fail@plt+0x1454>
   12840:	bl	1115c <dcgettext@plt>
   12844:	mov	r1, r0
   12848:	mov	r0, r5
   1284c:	bl	11294 <fprintf@plt>
   12850:	b	127f0 <__assert_fail@plt+0x13e8>
   12854:	andeq	r4, r1, r8, ror r3
   12858:	andeq	r4, r1, r0, asr #9
   1285c:	andeq	r4, r1, r4, ror #6
   12860:	push	{r4, r5, r6, r7, r8, lr}
   12864:	subs	r4, r0, #0
   12868:	mov	r2, #5
   1286c:	mov	r5, r1
   12870:	beq	128dc <__assert_fail@plt+0x14d4>
   12874:	ldr	r1, [pc, #120]	; 128f4 <__assert_fail@plt+0x14ec>
   12878:	mov	r0, #0
   1287c:	bl	1115c <dcgettext@plt>
   12880:	mov	r2, r4
   12884:	mov	r1, r0
   12888:	mov	r0, r5
   1288c:	bl	11294 <fprintf@plt>
   12890:	bl	110f0 <bfd_arch_list@plt>
   12894:	ldr	r2, [r0]
   12898:	mov	r7, r0
   1289c:	cmp	r2, #0
   128a0:	beq	128c4 <__assert_fail@plt+0x14bc>
   128a4:	ldr	r6, [pc, #76]	; 128f8 <__assert_fail@plt+0x14f0>
   128a8:	mov	r4, r0
   128ac:	mov	r1, r6
   128b0:	mov	r0, r5
   128b4:	bl	11294 <fprintf@plt>
   128b8:	ldr	r2, [r4, #4]!
   128bc:	cmp	r2, #0
   128c0:	bne	128ac <__assert_fail@plt+0x14a4>
   128c4:	mov	r1, r5
   128c8:	mov	r0, #10
   128cc:	bl	11330 <fputc@plt>
   128d0:	mov	r0, r7
   128d4:	pop	{r4, r5, r6, r7, r8, lr}
   128d8:	b	11114 <free@plt>
   128dc:	ldr	r1, [pc, #24]	; 128fc <__assert_fail@plt+0x14f4>
   128e0:	bl	1115c <dcgettext@plt>
   128e4:	mov	r1, r0
   128e8:	mov	r0, r5
   128ec:	bl	11294 <fprintf@plt>
   128f0:	b	12890 <__assert_fail@plt+0x1488>
   128f4:	andeq	r4, r1, ip, lsr #7
   128f8:	andeq	r4, r1, r0, asr #9
   128fc:	muleq	r1, r0, r3
   12900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12904:	mov	r2, #5
   12908:	sub	sp, sp, #44	; 0x2c
   1290c:	ldr	r1, [pc, #668]	; 12bb0 <__assert_fail@plt+0x17a8>
   12910:	mov	r0, #0
   12914:	bl	1115c <dcgettext@plt>
   12918:	ldr	r1, [pc, #660]	; 12bb4 <__assert_fail@plt+0x17ac>
   1291c:	bl	110d8 <printf@plt>
   12920:	mov	r0, #0
   12924:	bl	13c14 <__assert_fail@plt+0x280c>
   12928:	mov	r3, #0
   1292c:	add	r1, sp, #20
   12930:	str	r3, [sp, #24]
   12934:	str	r3, [sp, #28]
   12938:	str	r3, [sp, #32]
   1293c:	str	r3, [sp, #36]	; 0x24
   12940:	str	r0, [sp, #20]
   12944:	ldr	r0, [pc, #620]	; 12bb8 <__assert_fail@plt+0x17b0>
   12948:	bl	112b8 <bfd_iterate_over_targets@plt>
   1294c:	ldr	r0, [sp, #20]
   12950:	bl	11168 <unlink@plt>
   12954:	ldr	r0, [sp, #20]
   12958:	bl	11114 <free@plt>
   1295c:	ldr	r4, [sp, #24]
   12960:	cmp	r4, #0
   12964:	beq	12974 <__assert_fail@plt+0x156c>
   12968:	mov	r0, r4
   1296c:	add	sp, sp, #44	; 0x2c
   12970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12974:	mov	r7, r4
   12978:	mov	r5, #2
   1297c:	mov	r1, #0
   12980:	mov	r0, r5
   12984:	bl	112a0 <bfd_printable_arch_mach@plt>
   12988:	bl	1127c <strlen@plt>
   1298c:	add	r5, r5, #1
   12990:	cmp	r7, r0
   12994:	movlt	r7, r0
   12998:	cmp	r5, #89	; 0x59
   1299c:	bne	1297c <__assert_fail@plt+0x1574>
   129a0:	ldr	r0, [pc, #532]	; 12bbc <__assert_fail@plt+0x17b4>
   129a4:	bl	11210 <getenv@plt>
   129a8:	cmp	r0, #0
   129ac:	beq	129c8 <__assert_fail@plt+0x15c0>
   129b0:	mov	r2, #10
   129b4:	mov	r1, #0
   129b8:	bl	110c0 <strtol@plt>
   129bc:	subs	r3, r0, #0
   129c0:	str	r3, [sp, #12]
   129c4:	bne	129d0 <__assert_fail@plt+0x15c8>
   129c8:	mov	r3, #80	; 0x50
   129cc:	str	r3, [sp, #12]
   129d0:	ldr	r9, [sp, #28]
   129d4:	ldr	fp, [pc, #484]	; 12bc0 <__assert_fail@plt+0x17b8>
   129d8:	cmp	r4, r9
   129dc:	bge	12aa8 <__assert_fail@plt+0x16a0>
   129e0:	add	r3, r4, r4, lsl #1
   129e4:	ldr	r2, [sp, #12]
   129e8:	rsb	r3, r4, r3, lsl #3
   129ec:	ldr	r8, [sp, #36]	; 0x24
   129f0:	sub	r6, r2, r7
   129f4:	lsl	sl, r3, #2
   129f8:	add	r8, r8, sl
   129fc:	sub	r6, r6, #1
   12a00:	mov	r5, r4
   12a04:	ldr	r0, [r8]
   12a08:	bl	1127c <strlen@plt>
   12a0c:	sub	r6, r6, #1
   12a10:	add	r8, r8, #92	; 0x5c
   12a14:	subs	r6, r6, r0
   12a18:	bmi	12ab8 <__assert_fail@plt+0x16b0>
   12a1c:	add	r5, r5, #1
   12a20:	cmp	r9, r5
   12a24:	bne	12a04 <__assert_fail@plt+0x15fc>
   12a28:	ldr	r2, [pc, #404]	; 12bc4 <__assert_fail@plt+0x17bc>
   12a2c:	add	r1, r7, #1
   12a30:	ldr	r0, [pc, #400]	; 12bc8 <__assert_fail@plt+0x17c0>
   12a34:	bl	110d8 <printf@plt>
   12a38:	mov	r8, sl
   12a3c:	mov	r6, r4
   12a40:	ldr	r3, [sp, #36]	; 0x24
   12a44:	add	r6, r6, #1
   12a48:	ldr	r0, [pc, #380]	; 12bcc <__assert_fail@plt+0x17c4>
   12a4c:	ldr	r1, [r3, r8]
   12a50:	bl	110d8 <printf@plt>
   12a54:	cmp	r6, r5
   12a58:	add	r8, r8, #92	; 0x5c
   12a5c:	bne	12a40 <__assert_fail@plt+0x1638>
   12a60:	ldr	r1, [fp]
   12a64:	mov	r0, #10
   12a68:	bl	1136c <putc@plt>
   12a6c:	mov	r6, #2
   12a70:	mov	r1, #0
   12a74:	mov	r0, r6
   12a78:	bl	112a0 <bfd_printable_arch_mach@plt>
   12a7c:	ldr	r1, [pc, #332]	; 12bd0 <__assert_fail@plt+0x17c8>
   12a80:	bl	110b4 <strcmp@plt>
   12a84:	cmp	r0, #0
   12a88:	bne	12ad4 <__assert_fail@plt+0x16cc>
   12a8c:	add	r6, r6, #1
   12a90:	cmp	r6, #89	; 0x59
   12a94:	bne	12a70 <__assert_fail@plt+0x1668>
   12a98:	ldr	r9, [sp, #28]
   12a9c:	mov	r4, r5
   12aa0:	cmp	r4, r9
   12aa4:	blt	129e0 <__assert_fail@plt+0x15d8>
   12aa8:	ldr	r4, [sp, #24]
   12aac:	mov	r0, r4
   12ab0:	add	sp, sp, #44	; 0x2c
   12ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ab8:	ldr	r2, [pc, #260]	; 12bc4 <__assert_fail@plt+0x17bc>
   12abc:	add	r1, r7, #1
   12ac0:	ldr	r0, [pc, #256]	; 12bc8 <__assert_fail@plt+0x17c0>
   12ac4:	bl	110d8 <printf@plt>
   12ac8:	cmp	r4, r5
   12acc:	bne	12a38 <__assert_fail@plt+0x1630>
   12ad0:	b	12a60 <__assert_fail@plt+0x1658>
   12ad4:	mov	r1, #0
   12ad8:	mov	r0, r6
   12adc:	bl	112a0 <bfd_printable_arch_mach@plt>
   12ae0:	mov	r1, r7
   12ae4:	mov	r2, r0
   12ae8:	ldr	r0, [pc, #228]	; 12bd4 <__assert_fail@plt+0x17cc>
   12aec:	bl	110d8 <printf@plt>
   12af0:	cmp	r4, r5
   12af4:	beq	12b50 <__assert_fail@plt+0x1748>
   12af8:	mov	r8, sl
   12afc:	mov	r9, r4
   12b00:	sub	r3, r6, #2
   12b04:	str	r3, [sp, #4]
   12b08:	ldr	r2, [sp, #36]	; 0x24
   12b0c:	ldr	r0, [sp, #4]
   12b10:	add	r3, r2, r8
   12b14:	add	r3, r3, r0
   12b18:	ldr	r1, [fp]
   12b1c:	ldrb	r3, [r3, #4]
   12b20:	ldr	r0, [r2, r8]
   12b24:	cmp	r3, #0
   12b28:	beq	12b60 <__assert_fail@plt+0x1758>
   12b2c:	bl	113e4 <fputs@plt>
   12b30:	ldr	r1, [fp]
   12b34:	add	r9, r9, #1
   12b38:	cmp	r5, r9
   12b3c:	add	r8, r8, #92	; 0x5c
   12b40:	beq	12b54 <__assert_fail@plt+0x174c>
   12b44:	mov	r0, #32
   12b48:	bl	1136c <putc@plt>
   12b4c:	b	12b08 <__assert_fail@plt+0x1700>
   12b50:	ldr	r1, [fp]
   12b54:	mov	r0, #10
   12b58:	bl	1136c <putc@plt>
   12b5c:	b	12a8c <__assert_fail@plt+0x1684>
   12b60:	str	r1, [sp, #8]
   12b64:	bl	1127c <strlen@plt>
   12b68:	ldr	r1, [sp, #8]
   12b6c:	cmp	r0, #0
   12b70:	sub	r3, r0, #1
   12b74:	beq	12b34 <__assert_fail@plt+0x172c>
   12b78:	str	sl, [sp, #8]
   12b7c:	mov	sl, r4
   12b80:	mov	r4, r3
   12b84:	b	12b8c <__assert_fail@plt+0x1784>
   12b88:	ldr	r1, [fp]
   12b8c:	sub	r4, r4, #1
   12b90:	mov	r0, #45	; 0x2d
   12b94:	bl	1136c <putc@plt>
   12b98:	cmn	r4, #1
   12b9c:	bne	12b88 <__assert_fail@plt+0x1780>
   12ba0:	mov	r4, sl
   12ba4:	ldr	r1, [fp]
   12ba8:	ldr	sl, [sp, #8]
   12bac:	b	12b34 <__assert_fail@plt+0x172c>
   12bb0:	andeq	r4, r1, ip, asr #7
   12bb4:	andeq	r4, r1, r8, ror #7
   12bb8:	andeq	r2, r1, r8, ror r4
   12bbc:	andeq	r4, r1, ip, lsl #8
   12bc0:	andeq	r5, r2, r8, ror r4
   12bc4:	andeq	r4, r1, r4, lsl r4
   12bc8:	andeq	r4, r1, r8, lsl r4
   12bcc:	andeq	r4, r1, r4, ror #8
   12bd0:	andeq	r4, r1, r0, lsr #8
   12bd4:	andeq	r4, r1, ip, lsr #8
   12bd8:	cmp	r2, #0
   12bdc:	push	{r4, r5, r6, r7, lr}
   12be0:	mov	r5, r0
   12be4:	sub	sp, sp, #180	; 0xb4
   12be8:	mov	r4, r1
   12bec:	mov	r6, r3
   12bf0:	beq	12c10 <__assert_fail@plt+0x1808>
   12bf4:	ldr	r3, [r1, #4]
   12bf8:	mov	r0, r4
   12bfc:	add	r1, sp, #72	; 0x48
   12c00:	ldr	r3, [r3, #252]	; 0xfc
   12c04:	blx	r3
   12c08:	cmp	r0, #0
   12c0c:	beq	12c6c <__assert_fail@plt+0x1864>
   12c10:	mov	r1, r5
   12c14:	ldr	r0, [r4]
   12c18:	bl	113e4 <fputs@plt>
   12c1c:	cmp	r6, #0
   12c20:	beq	12c3c <__assert_fail@plt+0x1834>
   12c24:	ldrb	r3, [r4, #44]	; 0x2c
   12c28:	tst	r3, #1
   12c2c:	beq	12c50 <__assert_fail@plt+0x1848>
   12c30:	ldrd	r2, [r4, #64]	; 0x40
   12c34:	orrs	r1, r2, r3
   12c38:	bne	12c5c <__assert_fail@plt+0x1854>
   12c3c:	mov	r1, r5
   12c40:	mov	r0, #10
   12c44:	bl	11330 <fputc@plt>
   12c48:	add	sp, sp, #180	; 0xb4
   12c4c:	pop	{r4, r5, r6, r7, pc}
   12c50:	ldrd	r2, [r4, #56]	; 0x38
   12c54:	orrs	r1, r2, r3
   12c58:	beq	12c3c <__assert_fail@plt+0x1834>
   12c5c:	ldr	r1, [pc, #148]	; 12cf8 <__assert_fail@plt+0x18f0>
   12c60:	mov	r0, r5
   12c64:	bl	11294 <fprintf@plt>
   12c68:	b	12c3c <__assert_fail@plt+0x1834>
   12c6c:	ldr	r3, [sp, #152]	; 0x98
   12c70:	add	r0, sp, #16
   12c74:	str	r3, [sp, #16]
   12c78:	bl	11150 <ctime@plt>
   12c7c:	subs	r2, r0, #0
   12c80:	beq	12cd8 <__assert_fail@plt+0x18d0>
   12c84:	add	r7, sp, #32
   12c88:	add	r3, r2, #20
   12c8c:	mov	r0, r7
   12c90:	add	r2, r2, #4
   12c94:	ldr	r1, [pc, #96]	; 12cfc <__assert_fail@plt+0x18f4>
   12c98:	bl	11354 <sprintf@plt>
   12c9c:	add	r1, sp, #20
   12ca0:	ldr	r0, [sp, #88]	; 0x58
   12ca4:	bl	13174 <__assert_fail@plt+0x1d6c>
   12ca8:	ldr	r2, [sp, #120]	; 0x78
   12cac:	ldr	r3, [sp, #100]	; 0x64
   12cb0:	mov	ip, #0
   12cb4:	stmib	sp, {r2, r7}
   12cb8:	str	r3, [sp]
   12cbc:	add	r2, sp, #21
   12cc0:	ldr	r3, [sp, #96]	; 0x60
   12cc4:	ldr	r1, [pc, #52]	; 12d00 <__assert_fail@plt+0x18f8>
   12cc8:	mov	r0, r5
   12ccc:	strb	ip, [sp, #30]
   12cd0:	bl	11294 <fprintf@plt>
   12cd4:	b	12c10 <__assert_fail@plt+0x1808>
   12cd8:	mov	r2, #5
   12cdc:	ldr	r1, [pc, #32]	; 12d04 <__assert_fail@plt+0x18fc>
   12ce0:	bl	1115c <dcgettext@plt>
   12ce4:	add	r7, sp, #32
   12ce8:	mov	r1, r0
   12cec:	mov	r0, r7
   12cf0:	bl	11354 <sprintf@plt>
   12cf4:	b	12c9c <__assert_fail@plt+0x1894>
   12cf8:	andeq	r4, r1, r8, ror #8
   12cfc:	andeq	r4, r1, r8, asr #8
   12d00:	andeq	r4, r1, r4, asr r4
   12d04:	andeq	r4, r1, r4, lsr r4
   12d08:	push	{r4, lr}
   12d0c:	bl	12330 <__assert_fail@plt+0xf28>
   12d10:	mov	r4, r0
   12d14:	bl	1121c <mkstemp64@plt>
   12d18:	cmn	r0, #1
   12d1c:	beq	12d2c <__assert_fail@plt+0x1924>
   12d20:	bl	113fc <close@plt>
   12d24:	mov	r0, r4
   12d28:	pop	{r4, pc}
   12d2c:	mov	r0, r4
   12d30:	bl	11114 <free@plt>
   12d34:	mov	r4, #0
   12d38:	b	12d24 <__assert_fail@plt+0x191c>
   12d3c:	push	{r4, lr}
   12d40:	bl	12330 <__assert_fail@plt+0xf28>
   12d44:	pop	{r4, lr}
   12d48:	b	11360 <mkdtemp@plt>
   12d4c:	push	{r4, r5, lr}
   12d50:	sub	sp, sp, #12
   12d54:	mov	r4, r1
   12d58:	mov	r2, #0
   12d5c:	add	r1, sp, #4
   12d60:	mov	r5, r0
   12d64:	bl	110a8 <bfd_scan_vma@plt>
   12d68:	ldr	r3, [sp, #4]
   12d6c:	ldrb	r3, [r3]
   12d70:	cmp	r3, #0
   12d74:	bne	12d80 <__assert_fail@plt+0x1978>
   12d78:	add	sp, sp, #12
   12d7c:	pop	{r4, r5, pc}
   12d80:	mov	r2, #5
   12d84:	ldr	r1, [pc, #16]	; 12d9c <__assert_fail@plt+0x1994>
   12d88:	mov	r0, #0
   12d8c:	bl	1115c <dcgettext@plt>
   12d90:	mov	r2, r5
   12d94:	mov	r1, r4
   12d98:	bl	12698 <__assert_fail@plt+0x1290>
   12d9c:	andeq	r4, r1, r0, ror r4
   12da0:	push	{r4, r5, r6, lr}
   12da4:	subs	r4, r0, #0
   12da8:	sub	sp, sp, #104	; 0x68
   12dac:	beq	12e84 <__assert_fail@plt+0x1a7c>
   12db0:	mov	r2, sp
   12db4:	mov	r1, r4
   12db8:	mov	r0, #3
   12dbc:	bl	113d8 <__xstat64@plt>
   12dc0:	cmp	r0, #0
   12dc4:	blt	12e08 <__assert_fail@plt+0x1a00>
   12dc8:	ldr	r3, [sp, #16]
   12dcc:	and	r3, r3, #61440	; 0xf000
   12dd0:	cmp	r3, #16384	; 0x4000
   12dd4:	moveq	r2, #5
   12dd8:	ldreq	r1, [pc, #176]	; 12e90 <__assert_fail@plt+0x1a88>
   12ddc:	beq	12e64 <__assert_fail@plt+0x1a5c>
   12de0:	cmp	r3, #32768	; 0x8000
   12de4:	movne	r2, #5
   12de8:	ldrne	r1, [pc, #164]	; 12e94 <__assert_fail@plt+0x1a8c>
   12dec:	bne	12e64 <__assert_fail@plt+0x1a5c>
   12df0:	ldrd	r0, [sp, #48]	; 0x30
   12df4:	cmp	r0, #0
   12df8:	sbcs	r3, r1, #0
   12dfc:	blt	12e5c <__assert_fail@plt+0x1a54>
   12e00:	add	sp, sp, #104	; 0x68
   12e04:	pop	{r4, r5, r6, pc}
   12e08:	bl	112ac <__errno_location@plt>
   12e0c:	mov	r2, #5
   12e10:	ldr	r3, [r0]
   12e14:	mov	r5, r0
   12e18:	cmp	r3, #2
   12e1c:	ldreq	r1, [pc, #116]	; 12e98 <__assert_fail@plt+0x1a90>
   12e20:	beq	12e64 <__assert_fail@plt+0x1a5c>
   12e24:	ldr	r1, [pc, #112]	; 12e9c <__assert_fail@plt+0x1a94>
   12e28:	mov	r0, #0
   12e2c:	bl	1115c <dcgettext@plt>
   12e30:	mov	r6, r0
   12e34:	ldr	r0, [r5]
   12e38:	bl	11240 <strerror@plt>
   12e3c:	mov	r1, r4
   12e40:	mov	r2, r0
   12e44:	mov	r0, r6
   12e48:	bl	126c0 <__assert_fail@plt+0x12b8>
   12e4c:	mvn	r0, #0
   12e50:	mvn	r1, #0
   12e54:	add	sp, sp, #104	; 0x68
   12e58:	pop	{r4, r5, r6, pc}
   12e5c:	ldr	r1, [pc, #60]	; 12ea0 <__assert_fail@plt+0x1a98>
   12e60:	mov	r2, #5
   12e64:	mov	r0, #0
   12e68:	bl	1115c <dcgettext@plt>
   12e6c:	mov	r1, r4
   12e70:	bl	126c0 <__assert_fail@plt+0x12b8>
   12e74:	mvn	r0, #0
   12e78:	mvn	r1, #0
   12e7c:	add	sp, sp, #104	; 0x68
   12e80:	pop	{r4, r5, r6, pc}
   12e84:	mvn	r0, #0
   12e88:	mvn	r1, #0
   12e8c:	b	12e00 <__assert_fail@plt+0x19f8>
   12e90:	andeq	r4, r1, r4, asr #9
   12e94:	andeq	r4, r1, r4, ror #9
   12e98:	andeq	r4, r1, r4, lsl #9
   12e9c:	muleq	r1, r8, r4
   12ea0:	andeq	r4, r1, ip, lsl #10
   12ea4:	push	{r4, r5, r6, r7, r8, lr}
   12ea8:	subs	r6, r0, #0
   12eac:	beq	12f54 <__assert_fail@plt+0x1b4c>
   12eb0:	ldr	r3, [r6, #140]	; 0x8c
   12eb4:	ldr	r5, [r6]
   12eb8:	cmp	r3, #0
   12ebc:	beq	12f14 <__assert_fail@plt+0x1b0c>
   12ec0:	ldrb	r2, [r3, #44]	; 0x2c
   12ec4:	tst	r2, #1
   12ec8:	bne	12f14 <__assert_fail@plt+0x1b0c>
   12ecc:	ldr	r8, [r3]
   12ed0:	ldr	r7, [pc, #144]	; 12f68 <__assert_fail@plt+0x1b60>
   12ed4:	mov	r0, r8
   12ed8:	bl	1127c <strlen@plt>
   12edc:	mov	r4, r0
   12ee0:	mov	r0, r5
   12ee4:	bl	1127c <strlen@plt>
   12ee8:	ldr	r3, [r7]
   12eec:	add	r4, r4, r0
   12ef0:	add	r4, r4, #3
   12ef4:	cmp	r3, r4
   12ef8:	bcc	12f1c <__assert_fail@plt+0x1b14>
   12efc:	ldr	r0, [r7, #4]
   12f00:	mov	r3, r5
   12f04:	mov	r2, r8
   12f08:	ldr	r1, [pc, #92]	; 12f6c <__assert_fail@plt+0x1b64>
   12f0c:	bl	11354 <sprintf@plt>
   12f10:	ldr	r5, [r7, #4]
   12f14:	mov	r0, r5
   12f18:	pop	{r4, r5, r6, r7, r8, pc}
   12f1c:	cmp	r3, #0
   12f20:	bne	12f48 <__assert_fail@plt+0x1b40>
   12f24:	add	r4, r4, r4, lsr #1
   12f28:	mov	r0, r4
   12f2c:	str	r4, [r7]
   12f30:	bl	111b0 <xmalloc@plt>
   12f34:	ldr	r3, [r6, #140]	; 0x8c
   12f38:	ldr	r5, [r6]
   12f3c:	ldr	r8, [r3]
   12f40:	str	r0, [r7, #4]
   12f44:	b	12f00 <__assert_fail@plt+0x1af8>
   12f48:	ldr	r0, [r7, #4]
   12f4c:	bl	11114 <free@plt>
   12f50:	b	12f24 <__assert_fail@plt+0x1b1c>
   12f54:	ldr	r3, [pc, #20]	; 12f70 <__assert_fail@plt+0x1b68>
   12f58:	ldr	r2, [pc, #20]	; 12f74 <__assert_fail@plt+0x1b6c>
   12f5c:	ldr	r1, [pc, #20]	; 12f78 <__assert_fail@plt+0x1b70>
   12f60:	ldr	r0, [pc, #20]	; 12f7c <__assert_fail@plt+0x1b74>
   12f64:	bl	11408 <__assert_fail@plt>
   12f68:	ldrdeq	r5, [r2], -r8
   12f6c:	andeq	r4, r1, r0, ror r5
   12f70:	andeq	r4, r1, r4, ror r2
   12f74:	andeq	r0, r0, r9, ror r2
   12f78:	andeq	r4, r1, r8, asr #10
   12f7c:	andeq	r4, r1, r0, ror #10
   12f80:	push	{r3}		; (str r3, [sp, #-4]!)
   12f84:	push	{r4, r5, r6, r7, r8, r9, lr}
   12f88:	sub	sp, sp, #8
   12f8c:	mov	r8, r1
   12f90:	mov	r7, r2
   12f94:	mov	r5, r0
   12f98:	ldr	r6, [sp, #36]	; 0x24
   12f9c:	bl	11198 <bfd_get_error@plt>
   12fa0:	bl	11390 <bfd_errmsg@plt>
   12fa4:	ldr	r3, [pc, #204]	; 13078 <__assert_fail@plt+0x1c70>
   12fa8:	ldr	r4, [pc, #204]	; 1307c <__assert_fail@plt+0x1c74>
   12fac:	mov	r9, r0
   12fb0:	ldr	r0, [r3]
   12fb4:	bl	110e4 <fflush@plt>
   12fb8:	ldr	r2, [pc, #192]	; 13080 <__assert_fail@plt+0x1c78>
   12fbc:	add	r3, sp, #40	; 0x28
   12fc0:	ldr	r1, [r4]
   12fc4:	ldr	r0, [r2]
   12fc8:	str	r3, [sp, #4]
   12fcc:	bl	113e4 <fputs@plt>
   12fd0:	cmp	r8, #0
   12fd4:	beq	13008 <__assert_fail@plt+0x1c00>
   12fd8:	cmp	r5, #0
   12fdc:	beq	13068 <__assert_fail@plt+0x1c60>
   12fe0:	cmp	r7, #0
   12fe4:	ldr	r0, [r4]
   12fe8:	beq	1300c <__assert_fail@plt+0x1c04>
   12fec:	ldr	r3, [r7]
   12ff0:	cmp	r3, #0
   12ff4:	beq	1300c <__assert_fail@plt+0x1c04>
   12ff8:	mov	r2, r5
   12ffc:	ldr	r1, [pc, #128]	; 13084 <__assert_fail@plt+0x1c7c>
   13000:	bl	11294 <fprintf@plt>
   13004:	b	13018 <__assert_fail@plt+0x1c10>
   13008:	ldr	r0, [r4]
   1300c:	mov	r2, r5
   13010:	ldr	r1, [pc, #112]	; 13088 <__assert_fail@plt+0x1c80>
   13014:	bl	11294 <fprintf@plt>
   13018:	cmp	r6, #0
   1301c:	ldr	r0, [r4]
   13020:	beq	1304c <__assert_fail@plt+0x1c44>
   13024:	mov	r3, r0
   13028:	mov	r2, #2
   1302c:	mov	r1, #1
   13030:	ldr	r0, [pc, #84]	; 1308c <__assert_fail@plt+0x1c84>
   13034:	bl	111a4 <fwrite@plt>
   13038:	mov	r1, r6
   1303c:	ldr	r2, [sp, #4]
   13040:	ldr	r0, [r4]
   13044:	bl	11324 <vfprintf@plt>
   13048:	ldr	r0, [r4]
   1304c:	mov	r2, r9
   13050:	ldr	r1, [pc, #56]	; 13090 <__assert_fail@plt+0x1c88>
   13054:	bl	11294 <fprintf@plt>
   13058:	add	sp, sp, #8
   1305c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13060:	add	sp, sp, #4
   13064:	bx	lr
   13068:	mov	r0, r8
   1306c:	bl	12ea4 <__assert_fail@plt+0x1a9c>
   13070:	mov	r5, r0
   13074:	b	12fe0 <__assert_fail@plt+0x1bd8>
   13078:	andeq	r5, r2, r8, ror r4
   1307c:	ldrdeq	r5, [r2], -r0
   13080:	andeq	r5, r2, r4, ror #9
   13084:	andeq	r4, r1, r8, ror r5
   13088:	andeq	r4, r1, r0, lsl #11
   1308c:	andeq	r4, r1, r4, lsl #11
   13090:	andeq	r4, r1, r8, lsl #11
   13094:	ldrb	r3, [r0]
   13098:	cmp	r3, #47	; 0x2f
   1309c:	beq	13118 <__assert_fail@plt+0x1d10>
   130a0:	cmp	r3, #0
   130a4:	beq	130dc <__assert_fail@plt+0x1cd4>
   130a8:	cmp	r3, #46	; 0x2e
   130ac:	beq	130e4 <__assert_fail@plt+0x1cdc>
   130b0:	ldrb	r3, [r0, #1]!
   130b4:	cmp	r3, #0
   130b8:	cmpne	r3, #47	; 0x2f
   130bc:	bne	130b0 <__assert_fail@plt+0x1ca8>
   130c0:	cmp	r3, #47	; 0x2f
   130c4:	bne	130a0 <__assert_fail@plt+0x1c98>
   130c8:	ldrb	r3, [r0, #1]!
   130cc:	cmp	r3, #47	; 0x2f
   130d0:	beq	130c8 <__assert_fail@plt+0x1cc0>
   130d4:	cmp	r3, #0
   130d8:	bne	130a8 <__assert_fail@plt+0x1ca0>
   130dc:	mov	r0, #1
   130e0:	bx	lr
   130e4:	ldrb	r3, [r0, #1]
   130e8:	cmp	r3, #46	; 0x2e
   130ec:	beq	13104 <__assert_fail@plt+0x1cfc>
   130f0:	cmp	r3, #0
   130f4:	cmpne	r3, #47	; 0x2f
   130f8:	add	r0, r0, #1
   130fc:	bne	130b0 <__assert_fail@plt+0x1ca8>
   13100:	b	130cc <__assert_fail@plt+0x1cc4>
   13104:	ldrb	r3, [r0, #2]
   13108:	add	r0, r0, #2
   1310c:	cmp	r3, #0
   13110:	cmpne	r3, #47	; 0x2f
   13114:	bne	130b0 <__assert_fail@plt+0x1ca8>
   13118:	mov	r0, #0
   1311c:	bx	lr
   13120:	push	{r4, lr}
   13124:	mov	r1, r0
   13128:	ldr	r2, [pc, #52]	; 13164 <__assert_fail@plt+0x1d5c>
   1312c:	ldr	r0, [pc, #52]	; 13168 <__assert_fail@plt+0x1d60>
   13130:	bl	110d8 <printf@plt>
   13134:	mov	r2, #5
   13138:	ldr	r1, [pc, #44]	; 1316c <__assert_fail@plt+0x1d64>
   1313c:	mov	r0, #0
   13140:	bl	1115c <dcgettext@plt>
   13144:	bl	110d8 <printf@plt>
   13148:	mov	r2, #5
   1314c:	ldr	r1, [pc, #28]	; 13170 <__assert_fail@plt+0x1d68>
   13150:	mov	r0, #0
   13154:	bl	1115c <dcgettext@plt>
   13158:	bl	110d8 <printf@plt>
   1315c:	mov	r0, #0
   13160:	bl	11270 <exit@plt>
   13164:	andeq	r4, r1, r8, ror #7
   13168:	muleq	r1, r0, r5
   1316c:	muleq	r1, ip, r5
   13170:	ldrdeq	r4, [r1], -r0
   13174:	and	r3, r0, #61440	; 0xf000
   13178:	cmp	r3, #16384	; 0x4000
   1317c:	push	{r4, r5, lr}
   13180:	moveq	r2, #100	; 0x64
   13184:	beq	131c4 <__assert_fail@plt+0x1dbc>
   13188:	cmp	r3, #40960	; 0xa000
   1318c:	moveq	r2, #108	; 0x6c
   13190:	beq	131c4 <__assert_fail@plt+0x1dbc>
   13194:	cmp	r3, #24576	; 0x6000
   13198:	moveq	r2, #98	; 0x62
   1319c:	beq	131c4 <__assert_fail@plt+0x1dbc>
   131a0:	cmp	r3, #8192	; 0x2000
   131a4:	moveq	r2, #99	; 0x63
   131a8:	beq	131c4 <__assert_fail@plt+0x1dbc>
   131ac:	cmp	r3, #49152	; 0xc000
   131b0:	moveq	r2, #115	; 0x73
   131b4:	beq	131c4 <__assert_fail@plt+0x1dbc>
   131b8:	cmp	r3, #4096	; 0x1000
   131bc:	moveq	r2, #112	; 0x70
   131c0:	movne	r2, #45	; 0x2d
   131c4:	tst	r0, #256	; 0x100
   131c8:	movne	r5, #114	; 0x72
   131cc:	moveq	r5, #45	; 0x2d
   131d0:	tst	r0, #128	; 0x80
   131d4:	movne	r3, #119	; 0x77
   131d8:	moveq	r3, #45	; 0x2d
   131dc:	tst	r0, #64	; 0x40
   131e0:	movne	ip, #120	; 0x78
   131e4:	moveq	ip, #45	; 0x2d
   131e8:	tst	r0, #32
   131ec:	movne	r4, #114	; 0x72
   131f0:	moveq	r4, #45	; 0x2d
   131f4:	tst	r0, #16
   131f8:	movne	lr, #119	; 0x77
   131fc:	moveq	lr, #45	; 0x2d
   13200:	tst	r0, #8
   13204:	strb	r2, [r1]
   13208:	movne	r2, #120	; 0x78
   1320c:	moveq	r2, #45	; 0x2d
   13210:	tst	r0, #4
   13214:	strb	r3, [r1, #2]
   13218:	movne	r3, #114	; 0x72
   1321c:	moveq	r3, #45	; 0x2d
   13220:	tst	r0, #2
   13224:	strb	lr, [r1, #5]
   13228:	movne	lr, #119	; 0x77
   1322c:	moveq	lr, #45	; 0x2d
   13230:	tst	r0, #1
   13234:	strb	r3, [r1, #7]
   13238:	movne	r3, #120	; 0x78
   1323c:	moveq	r3, #45	; 0x2d
   13240:	tst	r0, #2048	; 0x800
   13244:	strb	r5, [r1, #1]
   13248:	strb	ip, [r1, #3]
   1324c:	strb	r4, [r1, #4]
   13250:	strb	r2, [r1, #6]
   13254:	strb	lr, [r1, #8]
   13258:	strb	r3, [r1, #9]
   1325c:	beq	13270 <__assert_fail@plt+0x1e68>
   13260:	cmp	ip, #120	; 0x78
   13264:	movne	ip, #83	; 0x53
   13268:	moveq	ip, #115	; 0x73
   1326c:	strb	ip, [r1, #3]
   13270:	tst	r0, #1024	; 0x400
   13274:	beq	13288 <__assert_fail@plt+0x1e80>
   13278:	cmp	r2, #120	; 0x78
   1327c:	movne	r2, #83	; 0x53
   13280:	moveq	r2, #115	; 0x73
   13284:	strb	r2, [r1, #6]
   13288:	tst	r0, #512	; 0x200
   1328c:	popeq	{r4, r5, pc}
   13290:	cmp	r3, #120	; 0x78
   13294:	movne	r3, #84	; 0x54
   13298:	moveq	r3, #116	; 0x74
   1329c:	strb	r3, [r1, #9]
   132a0:	pop	{r4, r5, pc}
   132a4:	push	{r4, r5, r6, lr}
   132a8:	subs	r5, r0, #0
   132ac:	beq	13344 <__assert_fail@plt+0x1f3c>
   132b0:	ldr	r3, [r5]
   132b4:	cmp	r3, #0
   132b8:	beq	13334 <__assert_fail@plt+0x1f2c>
   132bc:	mov	r3, r5
   132c0:	mov	r0, #0
   132c4:	b	132cc <__assert_fail@plt+0x1ec4>
   132c8:	mov	r0, r1
   132cc:	ldr	r2, [r3, #4]!
   132d0:	add	r1, r0, #1
   132d4:	cmp	r2, #0
   132d8:	bne	132c8 <__assert_fail@plt+0x1ec0>
   132dc:	add	r0, r0, #2
   132e0:	lsl	r0, r0, #2
   132e4:	bl	111b0 <xmalloc@plt>
   132e8:	ldr	r2, [r5]
   132ec:	cmp	r2, #0
   132f0:	mov	r6, r0
   132f4:	beq	1333c <__assert_fail@plt+0x1f34>
   132f8:	sub	r4, r0, #4
   132fc:	mov	r0, r2
   13300:	bl	111d4 <xstrdup@plt>
   13304:	ldr	r2, [r5, #4]!
   13308:	add	r3, r4, #8
   1330c:	cmp	r2, #0
   13310:	sub	r3, r3, r6
   13314:	add	r4, r4, #4
   13318:	str	r0, [r4]
   1331c:	bne	132fc <__assert_fail@plt+0x1ef4>
   13320:	add	r3, r6, r3
   13324:	mov	r2, #0
   13328:	str	r2, [r3]
   1332c:	mov	r0, r6
   13330:	pop	{r4, r5, r6, pc}
   13334:	mov	r0, #4
   13338:	b	132e4 <__assert_fail@plt+0x1edc>
   1333c:	mov	r3, r0
   13340:	b	13324 <__assert_fail@plt+0x1f1c>
   13344:	mov	r6, r5
   13348:	b	1332c <__assert_fail@plt+0x1f24>
   1334c:	push	{r4, r5, r6, lr}
   13350:	subs	r5, r0, #0
   13354:	popeq	{r4, r5, r6, pc}
   13358:	ldr	r0, [r5]
   1335c:	cmp	r0, #0
   13360:	beq	13378 <__assert_fail@plt+0x1f70>
   13364:	mov	r4, r5
   13368:	bl	11114 <free@plt>
   1336c:	ldr	r0, [r4, #4]!
   13370:	cmp	r0, #0
   13374:	bne	13368 <__assert_fail@plt+0x1f60>
   13378:	mov	r0, r5
   1337c:	pop	{r4, r5, r6, lr}
   13380:	b	11114 <free@plt>
   13384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13388:	subs	r4, r0, #0
   1338c:	ldr	r6, [pc, #512]	; 13594 <__assert_fail@plt+0x218c>
   13390:	sub	sp, sp, #12
   13394:	add	r6, pc, r6
   13398:	moveq	r9, r4
   1339c:	beq	13538 <__assert_fail@plt+0x2130>
   133a0:	bl	1127c <strlen@plt>
   133a4:	mov	r9, #0
   133a8:	mov	fp, r9
   133ac:	mov	sl, r9
   133b0:	mov	r5, r9
   133b4:	mov	r8, r9
   133b8:	mov	r7, r9
   133bc:	add	r0, r0, #1
   133c0:	bl	111b0 <xmalloc@plt>
   133c4:	ldr	r2, [pc, #460]	; 13598 <__assert_fail@plt+0x2190>
   133c8:	str	r0, [sp]
   133cc:	ldr	r6, [r6, r2]
   133d0:	ldrb	r2, [r4]
   133d4:	lsl	r2, r2, #1
   133d8:	ldrh	r2, [r6, r2]
   133dc:	tst	r2, #64	; 0x40
   133e0:	beq	133f8 <__assert_fail@plt+0x1ff0>
   133e4:	ldrb	r2, [r4, #1]!
   133e8:	lsl	r2, r2, #1
   133ec:	ldrh	r2, [r6, r2]
   133f0:	tst	r2, #64	; 0x40
   133f4:	bne	133e4 <__assert_fail@plt+0x1fdc>
   133f8:	cmp	fp, #0
   133fc:	lsl	r2, sl, #2
   13400:	beq	13414 <__assert_fail@plt+0x200c>
   13404:	sub	r1, fp, #1
   13408:	cmp	r1, sl
   1340c:	addgt	r1, r9, r2
   13410:	bgt	13444 <__assert_fail@plt+0x203c>
   13414:	cmp	r9, #0
   13418:	str	r2, [sp, #4]
   1341c:	beq	1357c <__assert_fail@plt+0x2174>
   13420:	lsl	fp, fp, #1
   13424:	mov	r0, r9
   13428:	lsl	r1, fp, #2
   1342c:	bl	11174 <xrealloc@plt>
   13430:	ldr	r2, [sp, #4]
   13434:	mov	r9, r0
   13438:	add	r1, r9, r2
   1343c:	mov	r3, #0
   13440:	str	r3, [r9, r2]
   13444:	ldrb	r2, [r4]
   13448:	ldr	r0, [sp]
   1344c:	cmp	r2, #0
   13450:	bne	13474 <__assert_fail@plt+0x206c>
   13454:	b	134d8 <__assert_fail@plt+0x20d0>
   13458:	cmp	r2, #39	; 0x27
   1345c:	moveq	r7, r5
   13460:	beq	13468 <__assert_fail@plt+0x2060>
   13464:	strb	r2, [r0], #1
   13468:	ldrb	r2, [r4, #1]!
   1346c:	cmp	r2, #0
   13470:	beq	134d8 <__assert_fail@plt+0x20d0>
   13474:	lsl	ip, r2, #1
   13478:	ldrh	ip, [r6, ip]
   1347c:	tst	ip, #64	; 0x40
   13480:	beq	13490 <__assert_fail@plt+0x2088>
   13484:	orr	ip, r8, r7
   13488:	orrs	ip, ip, r5
   1348c:	beq	1356c <__assert_fail@plt+0x2164>
   13490:	cmp	r5, #0
   13494:	movne	r5, #0
   13498:	strbne	r2, [r0], #1
   1349c:	bne	13468 <__assert_fail@plt+0x2060>
   134a0:	cmp	r2, #92	; 0x5c
   134a4:	moveq	r5, #1
   134a8:	beq	13468 <__assert_fail@plt+0x2060>
   134ac:	cmp	r7, #0
   134b0:	bne	13458 <__assert_fail@plt+0x2050>
   134b4:	cmp	r8, #0
   134b8:	beq	13544 <__assert_fail@plt+0x213c>
   134bc:	cmp	r2, #34	; 0x22
   134c0:	mov	r5, r7
   134c4:	moveq	r8, r7
   134c8:	bne	13464 <__assert_fail@plt+0x205c>
   134cc:	ldrb	r2, [r4, #1]!
   134d0:	cmp	r2, #0
   134d4:	bne	13474 <__assert_fail@plt+0x206c>
   134d8:	mov	r3, #0
   134dc:	strb	r3, [r0]
   134e0:	ldr	r0, [sp]
   134e4:	str	r1, [sp, #4]
   134e8:	bl	111d4 <xstrdup@plt>
   134ec:	ldr	r1, [sp, #4]
   134f0:	mov	r3, #0
   134f4:	add	sl, sl, #1
   134f8:	str	r3, [r1, #4]
   134fc:	str	r0, [r1]
   13500:	ldrb	r2, [r4]
   13504:	lsl	r1, r2, #1
   13508:	ldrh	r1, [r6, r1]
   1350c:	tst	r1, #64	; 0x40
   13510:	beq	13528 <__assert_fail@plt+0x2120>
   13514:	ldrb	r2, [r4, #1]!
   13518:	lsl	r1, r2, #1
   1351c:	ldrh	r1, [r6, r1]
   13520:	tst	r1, #64	; 0x40
   13524:	bne	13514 <__assert_fail@plt+0x210c>
   13528:	cmp	r2, #0
   1352c:	bne	133d0 <__assert_fail@plt+0x1fc8>
   13530:	ldr	r0, [sp]
   13534:	bl	11114 <free@plt>
   13538:	mov	r0, r9
   1353c:	add	sp, sp, #12
   13540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13544:	cmp	r2, #39	; 0x27
   13548:	mov	r5, r8
   1354c:	moveq	r7, #1
   13550:	beq	13468 <__assert_fail@plt+0x2060>
   13554:	cmp	r2, #34	; 0x22
   13558:	moveq	r7, r8
   1355c:	strbne	r2, [r0], #1
   13560:	movne	r7, r8
   13564:	moveq	r8, #1
   13568:	b	13468 <__assert_fail@plt+0x2060>
   1356c:	mov	r8, ip
   13570:	mov	r7, ip
   13574:	mov	r5, ip
   13578:	b	134d8 <__assert_fail@plt+0x20d0>
   1357c:	mov	r0, #32
   13580:	bl	111b0 <xmalloc@plt>
   13584:	mov	fp, #8
   13588:	ldr	r2, [sp, #4]
   1358c:	mov	r9, r0
   13590:	b	13438 <__assert_fail@plt+0x2030>
   13594:	andeq	r1, r1, r4, ror #24
   13598:	andeq	r0, r0, r0, lsr r1
   1359c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135a0:	subs	r6, r1, #0
   135a4:	ldr	r8, [pc, #192]	; 1366c <__assert_fail@plt+0x2264>
   135a8:	add	r8, pc, r8
   135ac:	beq	1363c <__assert_fail@plt+0x2234>
   135b0:	ldr	r5, [r0]
   135b4:	mov	r9, r0
   135b8:	cmp	r5, #0
   135bc:	beq	13664 <__assert_fail@plt+0x225c>
   135c0:	ldrb	r4, [r5]
   135c4:	cmp	r4, #0
   135c8:	beq	13644 <__assert_fail@plt+0x223c>
   135cc:	ldr	r3, [pc, #156]	; 13670 <__assert_fail@plt+0x2268>
   135d0:	ldr	r7, [r8, r3]
   135d4:	b	135e4 <__assert_fail@plt+0x21dc>
   135d8:	ldrb	r4, [r5, #1]!
   135dc:	cmp	r4, #0
   135e0:	beq	13644 <__assert_fail@plt+0x223c>
   135e4:	lsl	r3, r4, #1
   135e8:	mov	r1, r6
   135ec:	ldrh	r3, [r7, r3]
   135f0:	mov	r0, #92	; 0x5c
   135f4:	tst	r3, #64	; 0x40
   135f8:	bne	1361c <__assert_fail@plt+0x2214>
   135fc:	cmp	r4, #39	; 0x27
   13600:	cmpne	r4, r0
   13604:	moveq	r3, #1
   13608:	movne	r3, #0
   1360c:	cmp	r4, #34	; 0x22
   13610:	orreq	r3, r3, #1
   13614:	cmp	r3, #0
   13618:	beq	13628 <__assert_fail@plt+0x2220>
   1361c:	bl	11330 <fputc@plt>
   13620:	cmn	r0, #1
   13624:	beq	1363c <__assert_fail@plt+0x2234>
   13628:	mov	r0, r4
   1362c:	mov	r1, r6
   13630:	bl	11330 <fputc@plt>
   13634:	cmn	r0, #1
   13638:	bne	135d8 <__assert_fail@plt+0x21d0>
   1363c:	mov	r0, #1
   13640:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13644:	mov	r1, r6
   13648:	mov	r0, #10
   1364c:	bl	11330 <fputc@plt>
   13650:	cmn	r0, #1
   13654:	beq	1363c <__assert_fail@plt+0x2234>
   13658:	ldr	r5, [r9, #4]!
   1365c:	cmp	r5, #0
   13660:	bne	135c0 <__assert_fail@plt+0x21b8>
   13664:	mov	r0, #0
   13668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1366c:	andeq	r1, r1, r0, asr sl
   13670:	andeq	r0, r0, r0, lsr r1
   13674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13678:	mov	r7, r1
   1367c:	sub	sp, sp, #140	; 0x8c
   13680:	ldr	r3, [r7]
   13684:	ldr	r1, [r0]
   13688:	str	r3, [sp, #24]
   1368c:	ldr	r3, [pc, #824]	; 139cc <__assert_fail@plt+0x25c4>
   13690:	mov	sl, r0
   13694:	add	r3, pc, r3
   13698:	str	r3, [sp, #28]
   1369c:	add	r3, sp, #32
   136a0:	str	r3, [sp]
   136a4:	ldr	r3, [pc, #804]	; 139d0 <__assert_fail@plt+0x25c8>
   136a8:	mov	fp, #2000	; 0x7d0
   136ac:	mov	r5, #0
   136b0:	add	r3, pc, r3
   136b4:	str	r3, [sp, #4]
   136b8:	add	r4, r5, #1
   136bc:	cmp	r4, r1
   136c0:	bge	137bc <__assert_fail@plt+0x23b4>
   136c4:	ldr	r3, [r7]
   136c8:	lsl	r8, r4, #2
   136cc:	ldr	r0, [r3, r4, lsl #2]
   136d0:	ldrb	r2, [r0]
   136d4:	cmp	r2, #64	; 0x40
   136d8:	bne	137c8 <__assert_fail@plt+0x23c0>
   136dc:	subs	fp, fp, #1
   136e0:	beq	1395c <__assert_fail@plt+0x2554>
   136e4:	add	r6, r0, #1
   136e8:	mov	r1, r6
   136ec:	ldr	r2, [sp]
   136f0:	mov	r0, #3
   136f4:	bl	113d8 <__xstat64@plt>
   136f8:	cmp	r0, #0
   136fc:	blt	137c4 <__assert_fail@plt+0x23bc>
   13700:	ldr	r3, [sp, #48]	; 0x30
   13704:	and	r3, r3, #61440	; 0xf000
   13708:	cmp	r3, #16384	; 0x4000
   1370c:	beq	13988 <__assert_fail@plt+0x2580>
   13710:	mov	r0, r6
   13714:	ldr	r1, [sp, #4]
   13718:	bl	11384 <fopen64@plt>
   1371c:	subs	r9, r0, #0
   13720:	beq	137c4 <__assert_fail@plt+0x23bc>
   13724:	mov	r2, #2
   13728:	mov	r1, #0
   1372c:	bl	113cc <fseek@plt>
   13730:	cmn	r0, #1
   13734:	beq	137a0 <__assert_fail@plt+0x2398>
   13738:	mov	r0, r9
   1373c:	bl	11144 <ftell@plt>
   13740:	cmn	r0, #1
   13744:	mov	r6, r0
   13748:	beq	137a0 <__assert_fail@plt+0x2398>
   1374c:	mov	r2, #0
   13750:	mov	r1, r2
   13754:	mov	r0, r9
   13758:	bl	113cc <fseek@plt>
   1375c:	cmn	r0, #1
   13760:	beq	137a0 <__assert_fail@plt+0x2398>
   13764:	add	r0, r6, #1
   13768:	bl	111b0 <xmalloc@plt>
   1376c:	mov	r3, r9
   13770:	mov	r2, r6
   13774:	mov	r1, #1
   13778:	str	r0, [sp, #8]
   1377c:	bl	111ec <fread@plt>
   13780:	cmp	r6, r0
   13784:	mov	r3, r0
   13788:	beq	137d4 <__assert_fail@plt+0x23cc>
   1378c:	str	r0, [sp, #12]
   13790:	mov	r0, r9
   13794:	bl	11120 <ferror@plt>
   13798:	cmp	r0, #0
   1379c:	beq	137d0 <__assert_fail@plt+0x23c8>
   137a0:	mov	r0, r9
   137a4:	bl	112e8 <fclose@plt>
   137a8:	mov	r5, r4
   137ac:	ldr	r1, [sl]
   137b0:	add	r4, r5, #1
   137b4:	cmp	r4, r1
   137b8:	blt	136c4 <__assert_fail@plt+0x22bc>
   137bc:	add	sp, sp, #140	; 0x8c
   137c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c4:	ldr	r1, [sl]
   137c8:	mov	r5, r4
   137cc:	b	136b8 <__assert_fail@plt+0x22b0>
   137d0:	ldr	r3, [sp, #12]
   137d4:	ldr	r1, [sp, #8]
   137d8:	mov	r2, #0
   137dc:	strb	r2, [r1, r3]
   137e0:	ldrb	r3, [r1]
   137e4:	cmp	r3, r2
   137e8:	beq	1382c <__assert_fail@plt+0x2424>
   137ec:	ldr	r2, [pc, #480]	; 139d4 <__assert_fail@plt+0x25cc>
   137f0:	ldr	r1, [sp, #28]
   137f4:	lsl	r3, r3, #1
   137f8:	ldr	r1, [r1, r2]
   137fc:	ldrh	r3, [r1, r3]
   13800:	tst	r3, #64	; 0x40
   13804:	beq	1386c <__assert_fail@plt+0x2464>
   13808:	ldr	r2, [sp, #8]
   1380c:	b	13820 <__assert_fail@plt+0x2418>
   13810:	lsl	r3, r3, #1
   13814:	ldrh	r3, [r1, r3]
   13818:	tst	r3, #64	; 0x40
   1381c:	beq	1386c <__assert_fail@plt+0x2464>
   13820:	ldrb	r3, [r2, #1]!
   13824:	cmp	r3, #0
   13828:	bne	13810 <__assert_fail@plt+0x2408>
   1382c:	mov	r0, #4
   13830:	bl	111b0 <xmalloc@plt>
   13834:	ldr	r2, [sp, #24]
   13838:	mov	r6, #0
   1383c:	mov	r3, r0
   13840:	str	r0, [sp, #12]
   13844:	ldr	r0, [r7]
   13848:	str	r6, [r3]
   1384c:	cmp	r2, r0
   13850:	bne	13950 <__assert_fail@plt+0x2548>
   13854:	mov	r0, r2
   13858:	bl	132a4 <__assert_fail@plt+0x1e9c>
   1385c:	mov	r3, r6
   13860:	mov	r2, r8
   13864:	str	r0, [r7]
   13868:	b	138bc <__assert_fail@plt+0x24b4>
   1386c:	ldr	r0, [sp, #8]
   13870:	bl	13384 <__assert_fail@plt+0x1f7c>
   13874:	ldr	r2, [sp, #24]
   13878:	mov	r3, r0
   1387c:	str	r0, [sp, #12]
   13880:	ldr	r0, [r7]
   13884:	cmp	r0, r2
   13888:	beq	139b4 <__assert_fail@plt+0x25ac>
   1388c:	ldr	r6, [r3]
   13890:	cmp	r6, #0
   13894:	beq	13950 <__assert_fail@plt+0x2548>
   13898:	ldr	r2, [sp, #12]
   1389c:	mov	r6, #0
   138a0:	ldr	r3, [r2, #4]!
   138a4:	add	r6, r6, #1
   138a8:	cmp	r3, #0
   138ac:	lsl	r3, r6, #2
   138b0:	bne	138a0 <__assert_fail@plt+0x2498>
   138b4:	add	r2, r4, r6
   138b8:	lsl	r2, r2, #2
   138bc:	ldr	r0, [r0, r8]
   138c0:	str	r3, [sp, #16]
   138c4:	str	r2, [sp, #20]
   138c8:	bl	11114 <free@plt>
   138cc:	ldr	r1, [sl]
   138d0:	ldr	r0, [r7]
   138d4:	add	r1, r1, #1
   138d8:	add	r1, r1, r6
   138dc:	lsl	r1, r1, #2
   138e0:	bl	11174 <xrealloc@plt>
   138e4:	ldr	r2, [sp, #20]
   138e8:	add	ip, r8, #4
   138ec:	mov	r1, r0
   138f0:	ldr	r0, [sl]
   138f4:	str	r1, [r7]
   138f8:	sub	r4, r0, r4
   138fc:	add	r0, r1, r2
   13900:	add	r1, r1, ip
   13904:	lsl	r2, r4, #2
   13908:	bl	110fc <memmove@plt>
   1390c:	ldr	r4, [sp, #12]
   13910:	ldr	r3, [sp, #16]
   13914:	ldr	r0, [r7]
   13918:	mov	r2, r3
   1391c:	mov	r1, r4
   13920:	add	r0, r0, r8
   13924:	bl	1112c <memcpy@plt>
   13928:	ldr	r3, [sl]
   1392c:	mov	r0, r4
   13930:	sub	r3, r3, #1
   13934:	add	r6, r3, r6
   13938:	str	r6, [sl]
   1393c:	bl	11114 <free@plt>
   13940:	ldr	r0, [sp, #8]
   13944:	bl	11114 <free@plt>
   13948:	mov	r4, r5
   1394c:	b	137a0 <__assert_fail@plt+0x2398>
   13950:	mov	r3, r6
   13954:	mov	r2, r8
   13958:	b	138bc <__assert_fail@plt+0x24b4>
   1395c:	ldr	r0, [pc, #116]	; 139d8 <__assert_fail@plt+0x25d0>
   13960:	ldr	r2, [r3]
   13964:	mov	r3, r0
   13968:	ldr	r0, [sp, #28]
   1396c:	ldr	r1, [pc, #104]	; 139dc <__assert_fail@plt+0x25d4>
   13970:	ldr	r3, [r0, r3]
   13974:	add	r1, pc, r1
   13978:	ldr	r0, [r3]
   1397c:	bl	11294 <fprintf@plt>
   13980:	mov	r0, #1
   13984:	bl	1133c <xexit@plt>
   13988:	ldr	r0, [sp, #28]
   1398c:	ldr	r3, [pc, #68]	; 139d8 <__assert_fail@plt+0x25d0>
   13990:	ldr	r2, [r7]
   13994:	ldr	r1, [pc, #68]	; 139e0 <__assert_fail@plt+0x25d8>
   13998:	ldr	r3, [r0, r3]
   1399c:	add	r1, pc, r1
   139a0:	ldr	r2, [r2]
   139a4:	ldr	r0, [r3]
   139a8:	bl	11294 <fprintf@plt>
   139ac:	mov	r0, #1
   139b0:	bl	1133c <xexit@plt>
   139b4:	ldr	r3, [sp, #12]
   139b8:	ldr	r0, [sp, #24]
   139bc:	ldr	r6, [r3]
   139c0:	bl	132a4 <__assert_fail@plt+0x1e9c>
   139c4:	str	r0, [r7]
   139c8:	b	13890 <__assert_fail@plt+0x2488>
   139cc:	andeq	r1, r1, r4, ror #18
   139d0:	andeq	r1, r0, r4, lsr r0
   139d4:	andeq	r0, r0, r0, lsr r1
   139d8:	andeq	r0, r0, r4, lsr r1
   139dc:	andeq	r0, r0, r8, lsl sp
   139e0:	andeq	r0, r0, ip, lsl sp
   139e4:	subs	r3, r0, #0
   139e8:	beq	13a10 <__assert_fail@plt+0x2608>
   139ec:	ldr	r0, [r3]
   139f0:	cmp	r0, #0
   139f4:	bxeq	lr
   139f8:	mov	r0, #0
   139fc:	ldr	r2, [r3, #4]!
   13a00:	add	r0, r0, #1
   13a04:	cmp	r2, #0
   13a08:	bne	139fc <__assert_fail@plt+0x25f4>
   13a0c:	bx	lr
   13a10:	mov	r0, r3
   13a14:	bx	lr
   13a18:	ldr	r3, [pc, #452]	; 13be4 <__assert_fail@plt+0x27dc>
   13a1c:	add	r3, pc, r3
   13a20:	ldr	r3, [r3]
   13a24:	cmp	r3, #0
   13a28:	beq	13a34 <__assert_fail@plt+0x262c>
   13a2c:	mov	r0, r3
   13a30:	bx	lr
   13a34:	ldr	r0, [pc, #428]	; 13be8 <__assert_fail@plt+0x27e0>
   13a38:	push	{r4, r5, r6, lr}
   13a3c:	add	r0, pc, r0
   13a40:	bl	11210 <getenv@plt>
   13a44:	subs	r4, r0, #0
   13a48:	beq	13bbc <__assert_fail@plt+0x27b4>
   13a4c:	mov	r1, #7
   13a50:	bl	112dc <access@plt>
   13a54:	cmp	r0, #0
   13a58:	bne	13abc <__assert_fail@plt+0x26b4>
   13a5c:	ldr	r0, [pc, #392]	; 13bec <__assert_fail@plt+0x27e4>
   13a60:	add	r0, pc, r0
   13a64:	bl	11210 <getenv@plt>
   13a68:	ldr	r0, [pc, #384]	; 13bf0 <__assert_fail@plt+0x27e8>
   13a6c:	add	r0, pc, r0
   13a70:	bl	11210 <getenv@plt>
   13a74:	mov	r0, r4
   13a78:	bl	1127c <strlen@plt>
   13a7c:	mov	r5, r0
   13a80:	add	r6, r5, #1
   13a84:	add	r0, r0, #2
   13a88:	bl	111b0 <xmalloc@plt>
   13a8c:	mov	r1, r4
   13a90:	bl	111e0 <strcpy@plt>
   13a94:	ldr	r2, [pc, #344]	; 13bf4 <__assert_fail@plt+0x27ec>
   13a98:	mov	r1, #0
   13a9c:	add	r2, pc, r2
   13aa0:	mov	r3, r0
   13aa4:	mov	r0, #47	; 0x2f
   13aa8:	strb	r0, [r3, r5]
   13aac:	str	r3, [r2]
   13ab0:	strb	r1, [r3, r6]
   13ab4:	mov	r0, r3
   13ab8:	pop	{r4, r5, r6, pc}
   13abc:	ldr	r0, [pc, #308]	; 13bf8 <__assert_fail@plt+0x27f0>
   13ac0:	add	r0, pc, r0
   13ac4:	bl	11210 <getenv@plt>
   13ac8:	mov	r4, r0
   13acc:	cmp	r4, #0
   13ad0:	beq	13bd0 <__assert_fail@plt+0x27c8>
   13ad4:	mov	r1, #7
   13ad8:	mov	r0, r4
   13adc:	bl	112dc <access@plt>
   13ae0:	cmp	r0, #0
   13ae4:	beq	13a68 <__assert_fail@plt+0x2660>
   13ae8:	ldr	r0, [pc, #268]	; 13bfc <__assert_fail@plt+0x27f4>
   13aec:	add	r0, pc, r0
   13af0:	bl	11210 <getenv@plt>
   13af4:	mov	r4, r0
   13af8:	cmp	r4, #0
   13afc:	beq	13b14 <__assert_fail@plt+0x270c>
   13b00:	mov	r1, #7
   13b04:	mov	r0, r4
   13b08:	bl	112dc <access@plt>
   13b0c:	cmp	r0, #0
   13b10:	beq	13a74 <__assert_fail@plt+0x266c>
   13b14:	ldr	r4, [pc, #228]	; 13c00 <__assert_fail@plt+0x27f8>
   13b18:	mov	r1, #7
   13b1c:	add	r4, pc, r4
   13b20:	mov	r0, r4
   13b24:	bl	112dc <access@plt>
   13b28:	cmp	r0, #0
   13b2c:	moveq	r6, #5
   13b30:	moveq	r0, #6
   13b34:	moveq	r5, #4
   13b38:	beq	13a88 <__assert_fail@plt+0x2680>
   13b3c:	ldr	r4, [pc, #192]	; 13c04 <__assert_fail@plt+0x27fc>
   13b40:	mov	r1, #7
   13b44:	add	r4, pc, r4
   13b48:	add	r6, r4, #20
   13b4c:	mov	r0, r6
   13b50:	bl	112dc <access@plt>
   13b54:	cmp	r0, #0
   13b58:	bne	13b78 <__assert_fail@plt+0x2770>
   13b5c:	mov	r0, r6
   13b60:	bl	1127c <strlen@plt>
   13b64:	mov	r4, r6
   13b68:	mov	r5, r0
   13b6c:	add	r6, r5, #1
   13b70:	add	r0, r0, #2
   13b74:	b	13a88 <__assert_fail@plt+0x2680>
   13b78:	mov	r1, #7
   13b7c:	mov	r0, r4
   13b80:	bl	112dc <access@plt>
   13b84:	cmp	r0, #0
   13b88:	beq	13a74 <__assert_fail@plt+0x266c>
   13b8c:	add	r4, r4, #12
   13b90:	mov	r0, r4
   13b94:	mov	r1, #7
   13b98:	bl	112dc <access@plt>
   13b9c:	cmp	r0, #0
   13ba0:	beq	13a74 <__assert_fail@plt+0x266c>
   13ba4:	ldr	r4, [pc, #92]	; 13c08 <__assert_fail@plt+0x2800>
   13ba8:	mov	r6, #2
   13bac:	mov	r0, #3
   13bb0:	mov	r5, #1
   13bb4:	add	r4, pc, r4
   13bb8:	b	13a88 <__assert_fail@plt+0x2680>
   13bbc:	ldr	r0, [pc, #72]	; 13c0c <__assert_fail@plt+0x2804>
   13bc0:	add	r0, pc, r0
   13bc4:	bl	11210 <getenv@plt>
   13bc8:	mov	r4, r0
   13bcc:	b	13acc <__assert_fail@plt+0x26c4>
   13bd0:	ldr	r0, [pc, #56]	; 13c10 <__assert_fail@plt+0x2808>
   13bd4:	add	r0, pc, r0
   13bd8:	bl	11210 <getenv@plt>
   13bdc:	mov	r4, r0
   13be0:	b	13af8 <__assert_fail@plt+0x26f0>
   13be4:			; <UNDEFINED> instruction: 0x00011abc
   13be8:	ldrdeq	r0, [r0], -r8
   13bec:			; <UNDEFINED> instruction: 0x00000cbc
   13bf0:			; <UNDEFINED> instruction: 0x00000cb4
   13bf4:	andeq	r1, r1, ip, lsr sl
   13bf8:	andeq	r0, r0, ip, asr ip
   13bfc:	andeq	r0, r0, r4, lsr ip
   13c00:	andeq	r0, r0, ip, ror #23
   13c04:	andeq	r0, r0, r4, lsr #23
   13c08:	andeq	r0, r0, ip, asr fp
   13c0c:	andeq	r0, r0, ip, asr fp
   13c10:	andeq	r0, r0, ip, asr #22
   13c14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c18:	mov	r6, r0
   13c1c:	bl	13a18 <__assert_fail@plt+0x2610>
   13c20:	ldr	r8, [pc, #228]	; 13d0c <__assert_fail@plt+0x2904>
   13c24:	cmp	r6, #0
   13c28:	add	r8, pc, r8
   13c2c:	mov	r7, r0
   13c30:	beq	13cc0 <__assert_fail@plt+0x28b8>
   13c34:	mov	r0, r6
   13c38:	bl	1127c <strlen@plt>
   13c3c:	mov	r4, r0
   13c40:	mov	r9, r0
   13c44:	mov	r0, r7
   13c48:	bl	1127c <strlen@plt>
   13c4c:	mov	r5, r0
   13c50:	add	r0, r0, r4
   13c54:	add	r0, r0, #9
   13c58:	bl	111b0 <xmalloc@plt>
   13c5c:	mov	r1, r7
   13c60:	mov	r4, r0
   13c64:	bl	111e0 <strcpy@plt>
   13c68:	ldr	r3, [pc, #160]	; 13d10 <__assert_fail@plt+0x2908>
   13c6c:	add	r2, r4, r5
   13c70:	add	r3, pc, r3
   13c74:	add	ip, r5, #8
   13c78:	ldm	r3!, {r0, r1}
   13c7c:	ldrb	r3, [r3]
   13c80:	str	r0, [r4, r5]
   13c84:	str	r1, [r2, #4]
   13c88:	add	r0, r4, ip
   13c8c:	mov	r1, r6
   13c90:	strb	r3, [r2, #8]
   13c94:	bl	111e0 <strcpy@plt>
   13c98:	mov	r1, r9
   13c9c:	mov	r0, r4
   13ca0:	bl	11204 <mkstemps64@plt>
   13ca4:	cmn	r0, #1
   13ca8:	beq	13cd4 <__assert_fail@plt+0x28cc>
   13cac:	bl	113fc <close@plt>
   13cb0:	cmp	r0, #0
   13cb4:	bne	13d08 <__assert_fail@plt+0x2900>
   13cb8:	mov	r0, r4
   13cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cc0:	mov	r9, r6
   13cc4:	mov	r4, r6
   13cc8:	ldr	r6, [pc, #68]	; 13d14 <__assert_fail@plt+0x290c>
   13ccc:	add	r6, pc, r6
   13cd0:	b	13c44 <__assert_fail@plt+0x283c>
   13cd4:	ldr	r3, [pc, #60]	; 13d18 <__assert_fail@plt+0x2910>
   13cd8:	ldr	r3, [r8, r3]
   13cdc:	ldr	r4, [r3]
   13ce0:	bl	112ac <__errno_location@plt>
   13ce4:	ldr	r0, [r0]
   13ce8:	bl	11240 <strerror@plt>
   13cec:	ldr	r1, [pc, #40]	; 13d1c <__assert_fail@plt+0x2914>
   13cf0:	mov	r2, r7
   13cf4:	add	r1, pc, r1
   13cf8:	mov	r3, r0
   13cfc:	mov	r0, r4
   13d00:	bl	11294 <fprintf@plt>
   13d04:	bl	113f0 <abort@plt>
   13d08:	bl	113f0 <abort@plt>
   13d0c:	ldrdeq	r1, [r1], -r0
   13d10:			; <UNDEFINED> instruction: 0x00000ab8
   13d14:	ldrdeq	r0, [r0], -ip
   13d18:	andeq	r0, r0, r4, lsr r1
   13d1c:	andeq	r0, r0, r0, asr #20
   13d20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d24:	mov	r7, r0
   13d28:	ldr	r6, [pc, #72]	; 13d78 <__assert_fail@plt+0x2970>
   13d2c:	ldr	r5, [pc, #72]	; 13d7c <__assert_fail@plt+0x2974>
   13d30:	add	r6, pc, r6
   13d34:	add	r5, pc, r5
   13d38:	sub	r6, r6, r5
   13d3c:	mov	r8, r1
   13d40:	mov	r9, r2
   13d44:	bl	11088 <bfd_scan_vma@plt-0x20>
   13d48:	asrs	r6, r6, #2
   13d4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d50:	mov	r4, #0
   13d54:	add	r4, r4, #1
   13d58:	ldr	r3, [r5], #4
   13d5c:	mov	r2, r9
   13d60:	mov	r1, r8
   13d64:	mov	r0, r7
   13d68:	blx	r3
   13d6c:	cmp	r6, r4
   13d70:	bne	13d54 <__assert_fail@plt+0x294c>
   13d74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d78:	andeq	r1, r1, r4, asr #3
   13d7c:			; <UNDEFINED> instruction: 0x000111bc
   13d80:	bx	lr

Disassembly of section .fini:

00013d84 <.fini>:
   13d84:	push	{r3, lr}
   13d88:	pop	{r3, pc}
