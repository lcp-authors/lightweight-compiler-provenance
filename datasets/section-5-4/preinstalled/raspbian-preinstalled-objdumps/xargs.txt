
raspbian-preinstalled/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011288 <.init>:
   11288:	push	{r3, lr}
   1128c:	bl	127dc <__assert_fail@plt+0x1150>
   11290:	pop	{r3, pc}

Disassembly of section .plt:

00011294 <fdopen@plt-0x14>:
   11294:	push	{lr}		; (str lr, [sp, #-4]!)
   11298:	ldr	lr, [pc, #4]	; 112a4 <fdopen@plt-0x4>
   1129c:	add	lr, pc, lr
   112a0:	ldr	pc, [lr, #8]!
   112a4:	strdeq	fp, [r1], -r8

000112a8 <fdopen@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #110592	; 0x1b000
   112b0:	ldr	pc, [ip, #3064]!	; 0xbf8

000112b4 <calloc@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #110592	; 0x1b000
   112bc:	ldr	pc, [ip, #3056]!	; 0xbf0

000112c0 <raise@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #110592	; 0x1b000
   112c8:	ldr	pc, [ip, #3048]!	; 0xbe8

000112cc <strcmp@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #110592	; 0x1b000
   112d4:	ldr	pc, [ip, #3040]!	; 0xbe0

000112d8 <strtol@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #110592	; 0x1b000
   112e0:	ldr	pc, [ip, #3032]!	; 0xbd8

000112e4 <read@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #110592	; 0x1b000
   112ec:	ldr	pc, [ip, #3024]!	; 0xbd0

000112f0 <fflush@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #110592	; 0x1b000
   112f8:	ldr	pc, [ip, #3016]!	; 0xbc8

000112fc <wcwidth@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #110592	; 0x1b000
   11304:	ldr	pc, [ip, #3008]!	; 0xbc0

00011308 <free@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #110592	; 0x1b000
   11310:	ldr	pc, [ip, #3000]!	; 0xbb8

00011314 <ferror@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #110592	; 0x1b000
   1131c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011320 <_exit@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #110592	; 0x1b000
   11328:	ldr	pc, [ip, #2984]!	; 0xba8

0001132c <memcpy@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #110592	; 0x1b000
   11334:	ldr	pc, [ip, #2976]!	; 0xba0

00011338 <execvp@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #110592	; 0x1b000
   11340:	ldr	pc, [ip, #2968]!	; 0xb98

00011344 <mbsinit@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #110592	; 0x1b000
   1134c:	ldr	pc, [ip, #2960]!	; 0xb90

00011350 <signal@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #110592	; 0x1b000
   11358:	ldr	pc, [ip, #2952]!	; 0xb88

0001135c <memcmp@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #110592	; 0x1b000
   11364:	ldr	pc, [ip, #2944]!	; 0xb80

00011368 <dcgettext@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #110592	; 0x1b000
   11370:	ldr	pc, [ip, #2936]!	; 0xb78

00011374 <__stack_chk_fail@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #110592	; 0x1b000
   1137c:	ldr	pc, [ip, #2928]!	; 0xb70

00011380 <sysconf@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #110592	; 0x1b000
   11388:	ldr	pc, [ip, #2920]!	; 0xb68

0001138c <dup2@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #110592	; 0x1b000
   11394:	ldr	pc, [ip, #2912]!	; 0xb60

00011398 <getrlimit64@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #110592	; 0x1b000
   113a0:	ldr	pc, [ip, #2904]!	; 0xb58

000113a4 <realloc@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #110592	; 0x1b000
   113ac:	ldr	pc, [ip, #2896]!	; 0xb50

000113b0 <textdomain@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #110592	; 0x1b000
   113b8:	ldr	pc, [ip, #2888]!	; 0xb48

000113bc <iswcntrl@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #110592	; 0x1b000
   113c4:	ldr	pc, [ip, #2880]!	; 0xb40

000113c8 <iswprint@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #110592	; 0x1b000
   113d0:	ldr	pc, [ip, #2872]!	; 0xb38

000113d4 <__poll_chk@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #110592	; 0x1b000
   113dc:	ldr	pc, [ip, #2864]!	; 0xb30

000113e0 <sigaction@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #110592	; 0x1b000
   113e8:	ldr	pc, [ip, #2856]!	; 0xb28

000113ec <fwrite@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #110592	; 0x1b000
   113f4:	ldr	pc, [ip, #2848]!	; 0xb20

000113f8 <lseek64@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #110592	; 0x1b000
   11400:	ldr	pc, [ip, #2840]!	; 0xb18

00011404 <waitpid@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #110592	; 0x1b000
   1140c:	ldr	pc, [ip, #2832]!	; 0xb10

00011410 <__ctype_get_mb_cur_max@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #110592	; 0x1b000
   11418:	ldr	pc, [ip, #2824]!	; 0xb08

0001141c <strcpy@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #110592	; 0x1b000
   11424:	ldr	pc, [ip, #2816]!	; 0xb00

00011428 <__fpending@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #110592	; 0x1b000
   11430:	ldr	pc, [ip, #2808]!	; 0xaf8

00011434 <mbrtowc@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #110592	; 0x1b000
   1143c:	ldr	pc, [ip, #2800]!	; 0xaf0

00011440 <error@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #110592	; 0x1b000
   11448:	ldr	pc, [ip, #2792]!	; 0xae8

0001144c <opendir@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #110592	; 0x1b000
   11454:	ldr	pc, [ip, #2784]!	; 0xae0

00011458 <open64@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #110592	; 0x1b000
   11460:	ldr	pc, [ip, #2776]!	; 0xad8

00011464 <getenv@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #110592	; 0x1b000
   1146c:	ldr	pc, [ip, #2768]!	; 0xad0

00011470 <malloc@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #110592	; 0x1b000
   11478:	ldr	pc, [ip, #2760]!	; 0xac8

0001147c <__libc_start_main@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #110592	; 0x1b000
   11484:	ldr	pc, [ip, #2752]!	; 0xac0

00011488 <__freading@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #110592	; 0x1b000
   11490:	ldr	pc, [ip, #2744]!	; 0xab8

00011494 <__gmon_start__@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #110592	; 0x1b000
   1149c:	ldr	pc, [ip, #2736]!	; 0xab0

000114a0 <getopt_long@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #110592	; 0x1b000
   114a8:	ldr	pc, [ip, #2728]!	; 0xaa8

000114ac <__ctype_b_loc@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #110592	; 0x1b000
   114b4:	ldr	pc, [ip, #2720]!	; 0xaa0

000114b8 <getpid@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #110592	; 0x1b000
   114c0:	ldr	pc, [ip, #2712]!	; 0xa98

000114c4 <exit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #110592	; 0x1b000
   114cc:	ldr	pc, [ip, #2704]!	; 0xa90

000114d0 <strtoul@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #110592	; 0x1b000
   114d8:	ldr	pc, [ip, #2696]!	; 0xa88

000114dc <strlen@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #110592	; 0x1b000
   114e4:	ldr	pc, [ip, #2688]!	; 0xa80

000114e8 <strchr@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #110592	; 0x1b000
   114f0:	ldr	pc, [ip, #2680]!	; 0xa78

000114f4 <setenv@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #110592	; 0x1b000
   114fc:	ldr	pc, [ip, #2672]!	; 0xa70

00011500 <__errno_location@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #110592	; 0x1b000
   11508:	ldr	pc, [ip, #2664]!	; 0xa68

0001150c <__cxa_atexit@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #110592	; 0x1b000
   11514:	ldr	pc, [ip, #2656]!	; 0xa60

00011518 <memset@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #110592	; 0x1b000
   11520:	ldr	pc, [ip, #2648]!	; 0xa58

00011524 <strncpy@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #110592	; 0x1b000
   1152c:	ldr	pc, [ip, #2640]!	; 0xa50

00011530 <__printf_chk@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #110592	; 0x1b000
   11538:	ldr	pc, [ip, #2632]!	; 0xa48

0001153c <write@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #110592	; 0x1b000
   11544:	ldr	pc, [ip, #2624]!	; 0xa40

00011548 <fileno@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #110592	; 0x1b000
   11550:	ldr	pc, [ip, #2616]!	; 0xa38

00011554 <__fprintf_chk@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #110592	; 0x1b000
   1155c:	ldr	pc, [ip, #2608]!	; 0xa30

00011560 <memchr@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #110592	; 0x1b000
   11568:	ldr	pc, [ip, #2600]!	; 0xa28

0001156c <fclose@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #110592	; 0x1b000
   11574:	ldr	pc, [ip, #2592]!	; 0xa20

00011578 <strnlen@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #110592	; 0x1b000
   11580:	ldr	pc, [ip, #2584]!	; 0xa18

00011584 <pipe@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #110592	; 0x1b000
   1158c:	ldr	pc, [ip, #2576]!	; 0xa10

00011590 <fseeko64@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #110592	; 0x1b000
   11598:	ldr	pc, [ip, #2568]!	; 0xa08

0001159c <fcntl64@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #110592	; 0x1b000
   115a4:	ldr	pc, [ip, #2560]!	; 0xa00

000115a8 <setlocale@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #110592	; 0x1b000
   115b0:	ldr	pc, [ip, #2552]!	; 0x9f8

000115b4 <sigemptyset@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #110592	; 0x1b000
   115bc:	ldr	pc, [ip, #2544]!	; 0x9f0

000115c0 <fork@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #110592	; 0x1b000
   115c8:	ldr	pc, [ip, #2536]!	; 0x9e8

000115cc <strrchr@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #110592	; 0x1b000
   115d4:	ldr	pc, [ip, #2528]!	; 0x9e0

000115d8 <nl_langinfo@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #110592	; 0x1b000
   115e0:	ldr	pc, [ip, #2520]!	; 0x9d8

000115e4 <readdir64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #110592	; 0x1b000
   115ec:	ldr	pc, [ip, #2512]!	; 0x9d0

000115f0 <fdopendir@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #110592	; 0x1b000
   115f8:	ldr	pc, [ip, #2504]!	; 0x9c8

000115fc <putc@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #110592	; 0x1b000
   11604:	ldr	pc, [ip, #2496]!	; 0x9c0

00011608 <dirfd@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #110592	; 0x1b000
   11610:	ldr	pc, [ip, #2488]!	; 0x9b8

00011614 <bindtextdomain@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #110592	; 0x1b000
   1161c:	ldr	pc, [ip, #2480]!	; 0x9b0

00011620 <isatty@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #110592	; 0x1b000
   11628:	ldr	pc, [ip, #2472]!	; 0x9a8

0001162c <unsetenv@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #110592	; 0x1b000
   11634:	ldr	pc, [ip, #2464]!	; 0x9a0

00011638 <fputs@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #110592	; 0x1b000
   11640:	ldr	pc, [ip, #2456]!	; 0x998

00011644 <strncmp@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #110592	; 0x1b000
   1164c:	ldr	pc, [ip, #2448]!	; 0x990

00011650 <abort@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #110592	; 0x1b000
   11658:	ldr	pc, [ip, #2440]!	; 0x988

0001165c <getc@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #110592	; 0x1b000
   11664:	ldr	pc, [ip, #2432]!	; 0x980

00011668 <close@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #110592	; 0x1b000
   11670:	ldr	pc, [ip, #2424]!	; 0x978

00011674 <closedir@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #110592	; 0x1b000
   1167c:	ldr	pc, [ip, #2416]!	; 0x970

00011680 <__snprintf_chk@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #110592	; 0x1b000
   11688:	ldr	pc, [ip, #2408]!	; 0x968

0001168c <__assert_fail@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #110592	; 0x1b000
   11694:	ldr	pc, [ip, #2400]!	; 0x960

Disassembly of section .text:

00011698 <.text>:
   11698:	ldr	r3, [pc, #4084]	; 12694 <__assert_fail@plt+0x1008>
   1169c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116a0:	mov	r8, r1
   116a4:	ldr	r2, [r1]
   116a8:	mov	sl, r0
   116ac:	ldm	r3, {r0, r1}
   116b0:	ldr	r3, [pc, #4064]	; 12698 <__assert_fail@plt+0x100c>
   116b4:	sub	sp, sp, #236	; 0xec
   116b8:	cmp	r2, #0
   116bc:	ldr	r3, [r3]
   116c0:	str	r0, [sp, #220]	; 0xdc
   116c4:	movne	r0, r2
   116c8:	ldreq	r0, [pc, #4044]	; 1269c <__assert_fail@plt+0x1010>
   116cc:	strb	r1, [sp, #224]	; 0xe0
   116d0:	str	r3, [sp, #228]	; 0xe4
   116d4:	bl	16cf4 <__assert_fail@plt+0x5668>
   116d8:	bl	14d2c <__assert_fail@plt+0x36a0>
   116dc:	bl	114b8 <getpid@plt>
   116e0:	ldr	fp, [pc, #4024]	; 126a0 <__assert_fail@plt+0x1014>
   116e4:	mov	r3, #0
   116e8:	ldr	r1, [pc, #4020]	; 126a4 <__assert_fail@plt+0x1018>
   116ec:	str	r3, [fp, #152]	; 0x98
   116f0:	str	r0, [fp, #144]	; 0x90
   116f4:	mov	r0, #6
   116f8:	bl	115a8 <setlocale@plt>
   116fc:	ldr	r1, [pc, #4004]	; 126a8 <__assert_fail@plt+0x101c>
   11700:	ldr	r0, [pc, #4004]	; 126ac <__assert_fail@plt+0x1020>
   11704:	bl	11614 <bindtextdomain@plt>
   11708:	ldr	r0, [pc, #3996]	; 126ac <__assert_fail@plt+0x1020>
   1170c:	bl	113b0 <textdomain@plt>
   11710:	ldr	r0, [pc, #3992]	; 126b0 <__assert_fail@plt+0x1024>
   11714:	bl	1a8b4 <__assert_fail@plt+0x9228>
   11718:	cmp	r0, #0
   1171c:	bne	125d0 <__assert_fail@plt+0xf44>
   11720:	ldr	r0, [pc, #3980]	; 126b4 <__assert_fail@plt+0x1028>
   11724:	bl	1a8b4 <__assert_fail@plt+0x9228>
   11728:	subs	r3, r0, #0
   1172c:	str	r3, [sp, #32]
   11730:	bne	125d0 <__assert_fail@plt+0xf44>
   11734:	mov	r1, #2048	; 0x800
   11738:	add	r0, fp, #68	; 0x44
   1173c:	bl	147c0 <__assert_fail@plt+0x3134>
   11740:	sub	r3, r0, #1
   11744:	cmp	r3, #1
   11748:	str	r0, [sp, #52]	; 0x34
   1174c:	bhi	11ecc <__assert_fail@plt+0x840>
   11750:	ldr	r3, [pc, #3936]	; 126b8 <__assert_fail@plt+0x102c>
   11754:	str	r3, [sp, #44]	; 0x2c
   11758:	mov	r3, #0
   1175c:	str	r3, [sp, #40]	; 0x28
   11760:	ldr	r3, [pc, #3924]	; 126bc <__assert_fail@plt+0x1030>
   11764:	ldr	r5, [pc, #3924]	; 126c0 <__assert_fail@plt+0x1034>
   11768:	str	r3, [sp, #28]
   1176c:	ldr	r4, [pc, #3920]	; 126c4 <__assert_fail@plt+0x1038>
   11770:	ldr	r3, [pc, #3920]	; 126c8 <__assert_fail@plt+0x103c>
   11774:	ldr	r9, [pc, #3920]	; 126cc <__assert_fail@plt+0x1040>
   11778:	add	r6, sp, #68	; 0x44
   1177c:	str	r3, [sp, #36]	; 0x24
   11780:	mov	r3, #1
   11784:	str	r3, [sp, #48]	; 0x30
   11788:	str	r6, [sp]
   1178c:	mov	r3, r5
   11790:	mov	r2, r4
   11794:	mov	r1, r8
   11798:	mov	r0, sl
   1179c:	bl	114a0 <getopt_long@plt>
   117a0:	cmn	r0, #1
   117a4:	beq	11f20 <__assert_fail@plt+0x894>
   117a8:	sub	r0, r0, #48	; 0x30
   117ac:	cmp	r0, #208	; 0xd0
   117b0:	ldrls	pc, [pc, r0, lsl #2]
   117b4:	b	1259c <__assert_fail@plt+0xf10>
   117b8:	andeq	r1, r1, r8, lsr #27
   117bc:	muleq	r1, ip, r5
   117c0:	muleq	r1, ip, r5
   117c4:	muleq	r1, ip, r5
   117c8:	muleq	r1, ip, r5
   117cc:	muleq	r1, ip, r5
   117d0:	muleq	r1, ip, r5
   117d4:	muleq	r1, ip, r5
   117d8:	muleq	r1, ip, r5
   117dc:	muleq	r1, ip, r5
   117e0:	muleq	r1, ip, r5
   117e4:	muleq	r1, ip, r5
   117e8:	muleq	r1, ip, r5
   117ec:	muleq	r1, ip, r5
   117f0:	muleq	r1, ip, r5
   117f4:	muleq	r1, ip, r5
   117f8:	muleq	r1, ip, r5
   117fc:	muleq	r1, ip, r5
   11800:	muleq	r1, ip, r5
   11804:	muleq	r1, ip, r5
   11808:	muleq	r1, ip, r5
   1180c:	andeq	r1, r1, r4, lsl #27
   11810:	muleq	r1, ip, r5
   11814:	muleq	r1, ip, r5
   11818:	muleq	r1, ip, r5
   1181c:			; <UNDEFINED> instruction: 0x00011dbc
   11820:	muleq	r1, ip, r5
   11824:	muleq	r1, ip, r5
   11828:	andeq	r1, r1, r8, lsl sp
   1182c:	muleq	r1, ip, r5
   11830:	muleq	r1, ip, r5
   11834:	muleq	r1, ip, r5
   11838:	andeq	r1, r1, r0, asr sp
   1183c:	muleq	r1, ip, r5
   11840:	muleq	r1, ip, r5
   11844:	andeq	r1, r1, r4, asr #26
   11848:	muleq	r1, ip, r5
   1184c:	muleq	r1, ip, r5
   11850:	muleq	r1, ip, r5
   11854:	muleq	r1, ip, r5
   11858:	muleq	r1, ip, r5
   1185c:	muleq	r1, ip, r5
   11860:	muleq	r1, ip, r5
   11864:	muleq	r1, ip, r5
   11868:	muleq	r1, ip, r5
   1186c:	muleq	r1, ip, r5
   11870:	muleq	r1, ip, r5
   11874:	muleq	r1, ip, r5
   11878:	muleq	r1, ip, r5
   1187c:	andeq	r1, r1, r8, ror sp
   11880:	muleq	r1, ip, r5
   11884:	muleq	r1, ip, r5
   11888:	andeq	r1, r1, r0, ror ip
   1188c:	andeq	r1, r1, r4, lsl #27
   11890:	muleq	r1, ip, r5
   11894:	muleq	r1, ip, r5
   11898:	muleq	r1, r4, r5
   1189c:			; <UNDEFINED> instruction: 0x00011dbc
   118a0:	muleq	r1, ip, r5
   118a4:	muleq	r1, ip, r5
   118a8:	andeq	r1, r1, r4, lsr ip
   118ac:	muleq	r1, ip, r5
   118b0:	strdeq	r1, [r1], -ip
   118b4:	strdeq	r1, [r1], -r0
   118b8:	andeq	r1, r1, r0, ror #23
   118bc:	muleq	r1, ip, r5
   118c0:	ldrdeq	r1, [r1], -r4
   118c4:	muleq	r1, r8, fp
   118c8:	andeq	r1, r1, ip, lsl #23
   118cc:	muleq	r1, ip, r5
   118d0:	andeq	r1, r1, r4, ror #22
   118d4:	muleq	r1, ip, r5
   118d8:	andeq	r1, r1, r8, asr fp
   118dc:	muleq	r1, ip, r5
   118e0:	muleq	r1, ip, r5
   118e4:	muleq	r1, ip, r5
   118e8:	muleq	r1, ip, r5
   118ec:	muleq	r1, ip, r5
   118f0:	muleq	r1, ip, r5
   118f4:	muleq	r1, ip, r5
   118f8:	muleq	r1, ip, r5
   118fc:	muleq	r1, ip, r5
   11900:	muleq	r1, ip, r5
   11904:	muleq	r1, ip, r5
   11908:	muleq	r1, ip, r5
   1190c:	muleq	r1, ip, r5
   11910:	muleq	r1, ip, r5
   11914:	muleq	r1, ip, r5
   11918:	muleq	r1, ip, r5
   1191c:	muleq	r1, ip, r5
   11920:	muleq	r1, ip, r5
   11924:	muleq	r1, ip, r5
   11928:	muleq	r1, ip, r5
   1192c:	muleq	r1, ip, r5
   11930:	muleq	r1, ip, r5
   11934:	muleq	r1, ip, r5
   11938:	muleq	r1, ip, r5
   1193c:	muleq	r1, ip, r5
   11940:	muleq	r1, ip, r5
   11944:	muleq	r1, ip, r5
   11948:	muleq	r1, ip, r5
   1194c:	muleq	r1, ip, r5
   11950:	muleq	r1, ip, r5
   11954:	muleq	r1, ip, r5
   11958:	muleq	r1, ip, r5
   1195c:	muleq	r1, ip, r5
   11960:	muleq	r1, ip, r5
   11964:	muleq	r1, ip, r5
   11968:	muleq	r1, ip, r5
   1196c:	muleq	r1, ip, r5
   11970:	muleq	r1, ip, r5
   11974:	muleq	r1, ip, r5
   11978:	muleq	r1, ip, r5
   1197c:	muleq	r1, ip, r5
   11980:	muleq	r1, ip, r5
   11984:	muleq	r1, ip, r5
   11988:	muleq	r1, ip, r5
   1198c:	muleq	r1, ip, r5
   11990:	muleq	r1, ip, r5
   11994:	muleq	r1, ip, r5
   11998:	muleq	r1, ip, r5
   1199c:	muleq	r1, ip, r5
   119a0:	muleq	r1, ip, r5
   119a4:	muleq	r1, ip, r5
   119a8:	muleq	r1, ip, r5
   119ac:	muleq	r1, ip, r5
   119b0:	muleq	r1, ip, r5
   119b4:	muleq	r1, ip, r5
   119b8:	muleq	r1, ip, r5
   119bc:	muleq	r1, ip, r5
   119c0:	muleq	r1, ip, r5
   119c4:	muleq	r1, ip, r5
   119c8:	muleq	r1, ip, r5
   119cc:	muleq	r1, ip, r5
   119d0:	muleq	r1, ip, r5
   119d4:	muleq	r1, ip, r5
   119d8:	muleq	r1, ip, r5
   119dc:	muleq	r1, ip, r5
   119e0:	muleq	r1, ip, r5
   119e4:	muleq	r1, ip, r5
   119e8:	muleq	r1, ip, r5
   119ec:	muleq	r1, ip, r5
   119f0:	muleq	r1, ip, r5
   119f4:	muleq	r1, ip, r5
   119f8:	muleq	r1, ip, r5
   119fc:	muleq	r1, ip, r5
   11a00:	muleq	r1, ip, r5
   11a04:	muleq	r1, ip, r5
   11a08:	muleq	r1, ip, r5
   11a0c:	muleq	r1, ip, r5
   11a10:	muleq	r1, ip, r5
   11a14:	muleq	r1, ip, r5
   11a18:	muleq	r1, ip, r5
   11a1c:	muleq	r1, ip, r5
   11a20:	muleq	r1, ip, r5
   11a24:	muleq	r1, ip, r5
   11a28:	muleq	r1, ip, r5
   11a2c:	muleq	r1, ip, r5
   11a30:	muleq	r1, ip, r5
   11a34:	muleq	r1, ip, r5
   11a38:	muleq	r1, ip, r5
   11a3c:	muleq	r1, ip, r5
   11a40:	muleq	r1, ip, r5
   11a44:	muleq	r1, ip, r5
   11a48:	muleq	r1, ip, r5
   11a4c:	muleq	r1, ip, r5
   11a50:	muleq	r1, ip, r5
   11a54:	muleq	r1, ip, r5
   11a58:	muleq	r1, ip, r5
   11a5c:	muleq	r1, ip, r5
   11a60:	muleq	r1, ip, r5
   11a64:	muleq	r1, ip, r5
   11a68:	muleq	r1, ip, r5
   11a6c:	muleq	r1, ip, r5
   11a70:	muleq	r1, ip, r5
   11a74:	muleq	r1, ip, r5
   11a78:	muleq	r1, ip, r5
   11a7c:	muleq	r1, ip, r5
   11a80:	muleq	r1, ip, r5
   11a84:	muleq	r1, ip, r5
   11a88:	muleq	r1, ip, r5
   11a8c:	muleq	r1, ip, r5
   11a90:	muleq	r1, ip, r5
   11a94:	muleq	r1, ip, r5
   11a98:	muleq	r1, ip, r5
   11a9c:	muleq	r1, ip, r5
   11aa0:	muleq	r1, ip, r5
   11aa4:	muleq	r1, ip, r5
   11aa8:	muleq	r1, ip, r5
   11aac:	muleq	r1, ip, r5
   11ab0:	muleq	r1, ip, r5
   11ab4:	muleq	r1, ip, r5
   11ab8:	muleq	r1, ip, r5
   11abc:	muleq	r1, ip, r5
   11ac0:	muleq	r1, ip, r5
   11ac4:	muleq	r1, ip, r5
   11ac8:	muleq	r1, ip, r5
   11acc:	muleq	r1, ip, r5
   11ad0:	muleq	r1, ip, r5
   11ad4:	muleq	r1, ip, r5
   11ad8:	muleq	r1, ip, r5
   11adc:	muleq	r1, ip, r5
   11ae0:	muleq	r1, ip, r5
   11ae4:	muleq	r1, ip, r5
   11ae8:	muleq	r1, ip, r5
   11aec:	muleq	r1, ip, r5
   11af0:	muleq	r1, ip, r5
   11af4:	muleq	r1, ip, r5
   11af8:	strdeq	r1, [r1], -ip
   11afc:	ldr	r7, [r9]
   11b00:	mov	r1, #61	; 0x3d
   11b04:	mov	r0, r7
   11b08:	bl	114e8 <strchr@plt>
   11b0c:	subs	r3, r0, #0
   11b10:	str	r3, [sp, #56]	; 0x38
   11b14:	bne	12664 <__assert_fail@plt+0xfd8>
   11b18:	mov	r0, r7
   11b1c:	str	r7, [fp, #164]	; 0xa4
   11b20:	bl	1162c <unsetenv@plt>
   11b24:	cmp	r0, #0
   11b28:	beq	11788 <__assert_fail@plt+0xfc>
   11b2c:	bl	11500 <__errno_location@plt>
   11b30:	mov	r2, #5
   11b34:	ldr	r1, [pc, #2964]	; 126d0 <__assert_fail@plt+0x1044>
   11b38:	ldr	r4, [r0]
   11b3c:	ldr	r0, [sp, #56]	; 0x38
   11b40:	bl	11368 <dcgettext@plt>
   11b44:	mov	r3, r7
   11b48:	mov	r1, r4
   11b4c:	mov	r2, r0
   11b50:	mov	r0, #1
   11b54:	bl	11440 <error@plt>
   11b58:	mov	r3, #1
   11b5c:	str	r3, [fp, #68]	; 0x44
   11b60:	b	11788 <__assert_fail@plt+0xfc>
   11b64:	ldr	r0, [pc, #2864]	; 1269c <__assert_fail@plt+0x1010>
   11b68:	bl	14f94 <__assert_fail@plt+0x3908>
   11b6c:	ldr	r3, [pc, #2852]	; 12698 <__assert_fail@plt+0x100c>
   11b70:	ldr	r2, [sp, #228]	; 0xe4
   11b74:	ldr	r0, [sp, #32]
   11b78:	ldr	r3, [r3]
   11b7c:	cmp	r2, r3
   11b80:	bne	12620 <__assert_fail@plt+0xf94>
   11b84:	add	sp, sp, #236	; 0xec
   11b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b8c:	mov	r3, #1
   11b90:	strb	r3, [fp, #161]	; 0xa1
   11b94:	b	11788 <__assert_fail@plt+0xfc>
   11b98:	ldr	r3, [sp, #44]	; 0x2c
   11b9c:	mov	r7, #0
   11ba0:	blx	r3
   11ba4:	str	r7, [sp]
   11ba8:	ldr	r3, [fp, #72]	; 0x48
   11bac:	mov	r2, #1
   11bb0:	mov	r1, #115	; 0x73
   11bb4:	ldr	r0, [r9]
   11bb8:	bl	12ffc <__assert_fail@plt+0x1970>
   11bbc:	ldr	r2, [fp, #72]	; 0x48
   11bc0:	cmp	r2, r0
   11bc4:	mov	r3, r0
   11bc8:	bcc	11e94 <__assert_fail@plt+0x808>
   11bcc:	str	r3, [fp, #80]	; 0x50
   11bd0:	b	11788 <__assert_fail@plt+0xfc>
   11bd4:	mov	r3, #0
   11bd8:	str	r3, [sp, #48]	; 0x30
   11bdc:	b	11788 <__assert_fail@plt+0xfc>
   11be0:	mov	r3, #1
   11be4:	strb	r3, [fp, #160]	; 0xa0
   11be8:	strb	r3, [fp, #161]	; 0xa1
   11bec:	b	11788 <__assert_fail@plt+0xfc>
   11bf0:	mov	r3, #1
   11bf4:	strb	r3, [fp, #168]	; 0xa8
   11bf8:	b	11788 <__assert_fail@plt+0xfc>
   11bfc:	mov	r2, #1
   11c00:	str	r2, [sp]
   11c04:	mvn	r3, #0
   11c08:	mov	r1, #110	; 0x6e
   11c0c:	ldr	r0, [r9]
   11c10:	bl	12ffc <__assert_fail@plt+0x1970>
   11c14:	mov	r3, #0
   11c18:	str	r3, [fp, #104]	; 0x68
   11c1c:	cmp	r0, #1
   11c20:	str	r0, [fp, #108]	; 0x6c
   11c24:	beq	11e80 <__assert_fail@plt+0x7f4>
   11c28:	mov	r3, #0
   11c2c:	str	r3, [fp, #92]	; 0x5c
   11c30:	b	11788 <__assert_fail@plt+0xfc>
   11c34:	ldr	r0, [r9]
   11c38:	cmp	r0, #0
   11c3c:	moveq	r3, #1
   11c40:	streq	r3, [fp, #104]	; 0x68
   11c44:	beq	11c60 <__assert_fail@plt+0x5d4>
   11c48:	mov	r2, #1
   11c4c:	str	r2, [sp]
   11c50:	mvn	r3, #0
   11c54:	mov	r1, #108	; 0x6c
   11c58:	bl	12ffc <__assert_fail@plt+0x1970>
   11c5c:	str	r0, [fp, #104]	; 0x68
   11c60:	mov	r3, #0
   11c64:	str	r3, [fp, #108]	; 0x6c
   11c68:	str	r3, [fp, #92]	; 0x5c
   11c6c:	b	11788 <__assert_fail@plt+0xfc>
   11c70:	ldr	r3, [r9]
   11c74:	mov	r0, r3
   11c78:	str	r3, [sp, #28]
   11c7c:	bl	114dc <strlen@plt>
   11c80:	ldr	r3, [sp, #28]
   11c84:	ldrb	r7, [r3]
   11c88:	cmp	r0, #1
   11c8c:	beq	11e70 <__assert_fail@plt+0x7e4>
   11c90:	cmp	r7, #92	; 0x5c
   11c94:	bne	125f8 <__assert_fail@plt+0xf6c>
   11c98:	ldrb	r7, [r3, #1]
   11c9c:	sub	r2, r7, #92	; 0x5c
   11ca0:	cmp	r2, #26
   11ca4:	ldrls	pc, [pc, r2, lsl #2]
   11ca8:	b	11de0 <__assert_fail@plt+0x754>
   11cac:	andeq	r1, r1, r0, ror lr
   11cb0:	andeq	r1, r1, r0, ror #27
   11cb4:	andeq	r1, r1, r0, ror #27
   11cb8:	andeq	r1, r1, r0, ror #27
   11cbc:	andeq	r1, r1, r0, ror #27
   11cc0:	muleq	r1, r4, r2
   11cc4:	muleq	r1, ip, r2
   11cc8:	andeq	r1, r1, r0, ror #27
   11ccc:	andeq	r1, r1, r0, ror #27
   11cd0:	andeq	r1, r1, r0, ror #27
   11cd4:	andeq	r2, r1, ip, ror #4
   11cd8:	andeq	r1, r1, r0, ror #27
   11cdc:	andeq	r1, r1, r0, ror #27
   11ce0:	andeq	r1, r1, r0, ror #27
   11ce4:	andeq	r1, r1, r0, ror #27
   11ce8:	andeq	r1, r1, r0, ror #27
   11cec:	andeq	r1, r1, r0, ror #27
   11cf0:	andeq	r1, r1, r0, ror #27
   11cf4:	andeq	r2, r1, r4, ror r2
   11cf8:	andeq	r1, r1, r0, ror #27
   11cfc:	andeq	r1, r1, r0, ror #27
   11d00:	andeq	r1, r1, r0, ror #27
   11d04:	andeq	r2, r1, ip, ror r2
   11d08:	andeq	r1, r1, r0, ror #27
   11d0c:	andeq	r2, r1, r4, lsl #5
   11d10:	andeq	r1, r1, r0, ror #27
   11d14:	andeq	r2, r1, ip, lsl #5
   11d18:	mov	r2, #1
   11d1c:	str	r2, [sp]
   11d20:	mvn	r3, #0
   11d24:	mov	r1, #76	; 0x4c
   11d28:	ldr	r0, [r9]
   11d2c:	bl	12ffc <__assert_fail@plt+0x1970>
   11d30:	mov	r3, #0
   11d34:	str	r3, [fp, #108]	; 0x6c
   11d38:	str	r3, [fp, #92]	; 0x5c
   11d3c:	str	r0, [fp, #104]	; 0x68
   11d40:	b	11788 <__assert_fail@plt+0xfc>
   11d44:	mov	r3, #1
   11d48:	str	r3, [sp, #40]	; 0x28
   11d4c:	b	11788 <__assert_fail@plt+0xfc>
   11d50:	mov	r3, #1
   11d54:	str	r3, [sp]
   11d58:	mov	r2, #0
   11d5c:	mvn	r3, #-2147483648	; 0x80000000
   11d60:	mov	r1, #80	; 0x50
   11d64:	ldr	r0, [r9]
   11d68:	bl	12ffc <__assert_fail@plt+0x1970>
   11d6c:	ldr	r3, [pc, #2400]	; 126d4 <__assert_fail@plt+0x1048>
   11d70:	str	r0, [r3]
   11d74:	b	11788 <__assert_fail@plt+0xfc>
   11d78:	ldr	r3, [r9]
   11d7c:	str	r3, [sp, #36]	; 0x24
   11d80:	b	11788 <__assert_fail@plt+0xfc>
   11d84:	ldr	r3, [r9]
   11d88:	cmp	r3, #0
   11d8c:	beq	11d9c <__assert_fail@plt+0x710>
   11d90:	ldrb	r2, [r3]
   11d94:	cmp	r2, #0
   11d98:	bne	11da0 <__assert_fail@plt+0x714>
   11d9c:	mov	r3, #0
   11da0:	str	r3, [fp, #136]	; 0x88
   11da4:	b	11788 <__assert_fail@plt+0xfc>
   11da8:	mov	r3, #0
   11dac:	strb	r3, [fp, #124]	; 0x7c
   11db0:	ldr	r3, [pc, #2336]	; 126d8 <__assert_fail@plt+0x104c>
   11db4:	str	r3, [sp, #28]
   11db8:	b	11788 <__assert_fail@plt+0xfc>
   11dbc:	ldr	r3, [r9]
   11dc0:	mov	r2, #0
   11dc4:	ldr	r1, [pc, #2320]	; 126dc <__assert_fail@plt+0x1050>
   11dc8:	cmp	r3, r2
   11dcc:	moveq	r3, r1
   11dd0:	str	r3, [fp, #92]	; 0x5c
   11dd4:	str	r2, [fp, #108]	; 0x6c
   11dd8:	str	r2, [fp, #104]	; 0x68
   11ddc:	b	11788 <__assert_fail@plt+0xfc>
   11de0:	cmp	r7, #120	; 0x78
   11de4:	moveq	r2, #16
   11de8:	addeq	r1, r3, #2
   11dec:	streq	r2, [sp, #28]
   11df0:	beq	11e20 <__assert_fail@plt+0x794>
   11df4:	str	r3, [sp, #28]
   11df8:	bl	114ac <__ctype_b_loc@plt>
   11dfc:	lsl	r7, r7, #1
   11e00:	ldr	r3, [sp, #28]
   11e04:	ldr	r2, [r0]
   11e08:	ldrh	r2, [r2, r7]
   11e0c:	ands	r7, r2, #2048	; 0x800
   11e10:	beq	12654 <__assert_fail@plt+0xfc8>
   11e14:	add	r1, r3, #1
   11e18:	mov	r2, #8
   11e1c:	str	r2, [sp, #28]
   11e20:	str	r3, [sp, #60]	; 0x3c
   11e24:	str	r1, [sp, #56]	; 0x38
   11e28:	bl	11500 <__errno_location@plt>
   11e2c:	ldr	r1, [sp, #56]	; 0x38
   11e30:	mov	r7, #0
   11e34:	str	r7, [sp, #72]	; 0x48
   11e38:	mov	r2, r0
   11e3c:	mov	r0, r1
   11e40:	str	r7, [r2]
   11e44:	add	r1, sp, #72	; 0x48
   11e48:	ldr	r2, [sp, #28]
   11e4c:	bl	114d0 <strtoul@plt>
   11e50:	ldr	r3, [sp, #60]	; 0x3c
   11e54:	cmp	r0, #255	; 0xff
   11e58:	bhi	12558 <__assert_fail@plt+0xecc>
   11e5c:	ldr	r2, [sp, #72]	; 0x48
   11e60:	ldrb	r2, [r2]
   11e64:	cmp	r2, #0
   11e68:	bne	12638 <__assert_fail@plt+0xfac>
   11e6c:	uxtb	r7, r0
   11e70:	ldr	r3, [pc, #2144]	; 126d8 <__assert_fail@plt+0x104c>
   11e74:	strb	r7, [fp, #124]	; 0x7c
   11e78:	str	r3, [sp, #28]
   11e7c:	b	11788 <__assert_fail@plt+0xfc>
   11e80:	ldr	r2, [fp, #92]	; 0x5c
   11e84:	cmp	r2, r3
   11e88:	strne	r3, [fp, #108]	; 0x6c
   11e8c:	bne	11788 <__assert_fail@plt+0xfc>
   11e90:	b	11c28 <__assert_fail@plt+0x59c>
   11e94:	str	r0, [sp, #56]	; 0x38
   11e98:	mov	r2, #5
   11e9c:	ldr	r1, [pc, #2108]	; 126e0 <__assert_fail@plt+0x1054>
   11ea0:	mov	r0, r7
   11ea4:	bl	11368 <dcgettext@plt>
   11ea8:	ldr	r2, [fp, #72]	; 0x48
   11eac:	ldr	r3, [sp, #56]	; 0x38
   11eb0:	str	r2, [sp]
   11eb4:	mov	r1, r7
   11eb8:	mov	r2, r0
   11ebc:	mov	r0, r7
   11ec0:	bl	11440 <error@plt>
   11ec4:	ldr	r3, [fp, #72]	; 0x48
   11ec8:	b	11bcc <__assert_fail@plt+0x540>
   11ecc:	ldr	r0, [sp, #32]
   11ed0:	bl	11380 <sysconf@plt>
   11ed4:	cmp	r0, #0
   11ed8:	ble	11ef8 <__assert_fail@plt+0x86c>
   11edc:	cmp	r0, #2048	; 0x800
   11ee0:	ble	12624 <__assert_fail@plt+0xf98>
   11ee4:	ldr	r3, [fp, #80]	; 0x50
   11ee8:	sub	r0, r0, #2048	; 0x800
   11eec:	cmp	r3, r0
   11ef0:	movcc	r0, r3
   11ef4:	str	r0, [fp, #80]	; 0x50
   11ef8:	ldr	r3, [fp, #80]	; 0x50
   11efc:	cmp	r3, #2048	; 0x800
   11f00:	bcc	1278c <__assert_fail@plt+0x1100>
   11f04:	ldr	r3, [pc, #2008]	; 126e4 <__assert_fail@plt+0x1058>
   11f08:	ldr	r0, [pc, #2008]	; 126e8 <__assert_fail@plt+0x105c>
   11f0c:	str	r3, [fp, #100]	; 0x64
   11f10:	bl	14888 <__assert_fail@plt+0x31fc>
   11f14:	ldr	r3, [pc, #2000]	; 126ec <__assert_fail@plt+0x1060>
   11f18:	str	r3, [sp, #44]	; 0x2c
   11f1c:	b	11758 <__assert_fail@plt+0xcc>
   11f20:	ldr	r2, [fp, #136]	; 0x88
   11f24:	ldr	r3, [pc, #1964]	; 126d8 <__assert_fail@plt+0x104c>
   11f28:	ldr	r1, [sp, #28]
   11f2c:	cmp	r2, #0
   11f30:	sub	r3, r1, r3
   11f34:	clz	r3, r3
   11f38:	lsr	r3, r3, #5
   11f3c:	moveq	r3, #0
   11f40:	cmp	r3, #0
   11f44:	bne	125a4 <__assert_fail@plt+0xf18>
   11f48:	ldr	r3, [sp, #44]	; 0x2c
   11f4c:	blx	r3
   11f50:	ldr	r3, [sp, #52]	; 0x34
   11f54:	cmp	r3, #0
   11f58:	bne	12778 <__assert_fail@plt+0x10ec>
   11f5c:	ldr	r3, [pc, #1932]	; 126f0 <__assert_fail@plt+0x1064>
   11f60:	add	r0, sp, #84	; 0x54
   11f64:	str	r3, [sp, #80]	; 0x50
   11f68:	bl	115b4 <sigemptyset@plt>
   11f6c:	ldr	r3, [sp, #52]	; 0x34
   11f70:	add	r1, sp, #80	; 0x50
   11f74:	mov	r2, r3
   11f78:	mov	r0, #10
   11f7c:	str	r3, [sp, #212]	; 0xd4
   11f80:	bl	113e0 <sigaction@plt>
   11f84:	cmp	r0, #0
   11f88:	bne	1223c <__assert_fail@plt+0xbb0>
   11f8c:	ldr	r3, [pc, #1888]	; 126f4 <__assert_fail@plt+0x1068>
   11f90:	mov	r4, #0
   11f94:	add	r0, sp, #84	; 0x54
   11f98:	str	r3, [sp, #80]	; 0x50
   11f9c:	bl	115b4 <sigemptyset@plt>
   11fa0:	add	r1, sp, #80	; 0x50
   11fa4:	mov	r2, r4
   11fa8:	mov	r0, #12
   11fac:	str	r4, [sp, #212]	; 0xd4
   11fb0:	bl	113e0 <sigaction@plt>
   11fb4:	cmp	r0, r4
   11fb8:	bne	121b0 <__assert_fail@plt+0xb24>
   11fbc:	ldr	r1, [pc, #1796]	; 126c8 <__assert_fail@plt+0x103c>
   11fc0:	ldr	r0, [sp, #36]	; 0x24
   11fc4:	bl	112cc <strcmp@plt>
   11fc8:	cmp	r0, #0
   11fcc:	bne	121dc <__assert_fail@plt+0xb50>
   11fd0:	ldr	r3, [pc, #1824]	; 126f8 <__assert_fail@plt+0x106c>
   11fd4:	ldr	r3, [r3]
   11fd8:	str	r3, [fp, #120]	; 0x78
   11fdc:	ldr	r3, [fp, #92]	; 0x5c
   11fe0:	cmp	r3, #0
   11fe4:	beq	12548 <__assert_fail@plt+0xebc>
   11fe8:	mov	r3, #1
   11fec:	str	r3, [fp, #68]	; 0x44
   11ff0:	ldr	r3, [pc, #1796]	; 126fc <__assert_fail@plt+0x1070>
   11ff4:	ldr	r3, [r3]
   11ff8:	cmp	r3, sl
   11ffc:	bne	1201c <__assert_fail@plt+0x990>
   12000:	ldr	r2, [pc, #1780]	; 126fc <__assert_fail@plt+0x1070>
   12004:	mov	r3, #0
   12008:	add	r8, sp, #76	; 0x4c
   1200c:	mov	sl, #1
   12010:	str	r3, [r2]
   12014:	add	r3, sp, #220	; 0xdc
   12018:	str	r3, [sp, #76]	; 0x4c
   1201c:	ldr	r3, [sp, #40]	; 0x28
   12020:	cmp	r3, #0
   12024:	bne	123a8 <__assert_fail@plt+0xd1c>
   12028:	ldr	r0, [fp, #80]	; 0x50
   1202c:	add	r0, r0, #1
   12030:	bl	1959c <__assert_fail@plt+0x7f10>
   12034:	ldr	r3, [fp, #80]	; 0x50
   12038:	str	r0, [fp, #112]	; 0x70
   1203c:	add	r0, r3, #1
   12040:	bl	1959c <__assert_fail@plt+0x7f10>
   12044:	mov	r1, #0
   12048:	str	r0, [fp, #28]
   1204c:	mov	r0, #17
   12050:	bl	11350 <signal@plt>
   12054:	ldr	r4, [fp, #92]	; 0x5c
   12058:	cmp	r4, #0
   1205c:	beq	122ec <__assert_fail@plt+0xc60>
   12060:	lsl	r5, sl, #2
   12064:	mov	r0, r5
   12068:	bl	1959c <__assert_fail@plt+0x7f10>
   1206c:	ldr	r3, [pc, #1672]	; 126fc <__assert_fail@plt+0x1070>
   12070:	ldr	r3, [r3]
   12074:	cmp	sl, r3
   12078:	str	r0, [sp, #32]
   1207c:	ble	125c8 <__assert_fail@plt+0xf3c>
   12080:	sub	r7, r3, #-1073741823	; 0xc0000001
   12084:	ldr	r3, [sp, #32]
   12088:	lsl	r7, r7, #2
   1208c:	sub	r9, r8, #4
   12090:	add	r6, r8, r7
   12094:	add	r4, r9, r5
   12098:	add	r7, r3, r7
   1209c:	ldr	r0, [r6, #4]!
   120a0:	bl	114dc <strlen@plt>
   120a4:	cmp	r6, r4
   120a8:	str	r0, [r7, #4]!
   120ac:	bne	1209c <__assert_fail@plt+0xa10>
   120b0:	ldr	r0, [fp, #92]	; 0x5c
   120b4:	bl	114dc <strlen@plt>
   120b8:	add	r3, r9, r5
   120bc:	ldr	r9, [pc, #1596]	; 12700 <__assert_fail@plt+0x1074>
   120c0:	str	sl, [sp, #36]	; 0x24
   120c4:	mov	r6, #0
   120c8:	mov	sl, r3
   120cc:	str	r0, [fp, #88]	; 0x58
   120d0:	ldr	r3, [sp, #28]
   120d4:	blx	r3
   120d8:	cmn	r0, #1
   120dc:	mov	r7, r0
   120e0:	beq	122d8 <__assert_fail@plt+0xc4c>
   120e4:	ldr	r4, [pc, #1552]	; 126fc <__assert_fail@plt+0x1070>
   120e8:	mov	r1, r9
   120ec:	ldr	r0, [pc, #1524]	; 126e8 <__assert_fail@plt+0x105c>
   120f0:	bl	1492c <__assert_fail@plt+0x32a0>
   120f4:	ldr	r3, [pc, #1496]	; 126d4 <__assert_fail@plt+0x1048>
   120f8:	ldr	r2, [r4]
   120fc:	ldr	ip, [sp, #32]
   12100:	ldrb	r0, [r3, #4]
   12104:	mov	r1, r9
   12108:	ldr	r3, [ip, r2, lsl #2]
   1210c:	ldr	r2, [r8, r2, lsl #2]
   12110:	add	r3, r3, #1
   12114:	str	r0, [sp, #8]
   12118:	str	r6, [sp, #4]
   1211c:	str	r6, [sp]
   12120:	ldr	r0, [pc, #1472]	; 126e8 <__assert_fail@plt+0x105c>
   12124:	str	r6, [fp, #32]
   12128:	bl	1401c <__assert_fail@plt+0x2990>
   1212c:	ldr	r5, [r4]
   12130:	ldr	r2, [sp, #36]	; 0x24
   12134:	add	r3, r5, #1
   12138:	cmp	r2, r3
   1213c:	ldr	r3, [pc, #1424]	; 126d4 <__assert_fail@plt+0x1048>
   12140:	sub	r7, r7, #1
   12144:	strb	r6, [r3, #4]
   12148:	ble	121a0 <__assert_fail@plt+0xb14>
   1214c:	ldr	ip, [sp, #32]
   12150:	lsl	r5, r5, #2
   12154:	add	r4, r8, r5
   12158:	mov	r3, #0
   1215c:	add	r5, ip, r5
   12160:	b	1216c <__assert_fail@plt+0xae0>
   12164:	ldr	r3, [pc, #1384]	; 126d4 <__assert_fail@plt+0x1048>
   12168:	ldrb	r3, [r3, #4]
   1216c:	ldr	r1, [fp, #112]	; 0x70
   12170:	ldr	r2, [r4, #4]!
   12174:	ldr	r0, [pc, #1388]	; 126e8 <__assert_fail@plt+0x105c>
   12178:	str	r1, [sp, #8]
   1217c:	str	r3, [sp, #16]
   12180:	str	r7, [sp, #12]
   12184:	str	r6, [sp, #4]
   12188:	str	r6, [sp]
   1218c:	mov	r1, r9
   12190:	ldr	r3, [r5, #4]!
   12194:	bl	142b8 <__assert_fail@plt+0x2c2c>
   12198:	cmp	sl, r4
   1219c:	bne	12164 <__assert_fail@plt+0xad8>
   121a0:	mov	r1, r9
   121a4:	ldr	r0, [pc, #1340]	; 126e8 <__assert_fail@plt+0x105c>
   121a8:	bl	14470 <__assert_fail@plt+0x2de4>
   121ac:	b	120d0 <__assert_fail@plt+0xa44>
   121b0:	bl	11500 <__errno_location@plt>
   121b4:	mov	r2, #5
   121b8:	ldr	r1, [pc, #1348]	; 12704 <__assert_fail@plt+0x1078>
   121bc:	ldr	r5, [r0]
   121c0:	mov	r0, r4
   121c4:	bl	11368 <dcgettext@plt>
   121c8:	mov	r1, r5
   121cc:	mov	r2, r0
   121d0:	mov	r0, r4
   121d4:	bl	11440 <error@plt>
   121d8:	b	11fbc <__assert_fail@plt+0x930>
   121dc:	mov	r4, #1
   121e0:	ldr	r0, [sp, #36]	; 0x24
   121e4:	str	r4, [fp, #172]	; 0xac
   121e8:	bl	12c90 <__assert_fail@plt+0x1604>
   121ec:	cmp	r0, #0
   121f0:	mov	r5, r0
   121f4:	str	r0, [fp, #120]	; 0x78
   121f8:	bne	11fdc <__assert_fail@plt+0x950>
   121fc:	bl	11500 <__errno_location@plt>
   12200:	mov	r2, #5
   12204:	ldr	r1, [pc, #1276]	; 12708 <__assert_fail@plt+0x107c>
   12208:	ldr	r6, [r0]
   1220c:	mov	r0, r5
   12210:	bl	11368 <dcgettext@plt>
   12214:	ldr	r2, [sp, #36]	; 0x24
   12218:	mov	r1, #8
   1221c:	mov	r7, r0
   12220:	mov	r0, r5
   12224:	bl	18bfc <__assert_fail@plt+0x7570>
   12228:	mov	r2, r7
   1222c:	mov	r1, r6
   12230:	mov	r3, r0
   12234:	mov	r0, r4
   12238:	bl	11440 <error@plt>
   1223c:	bl	11500 <__errno_location@plt>
   12240:	ldr	r5, [sp, #52]	; 0x34
   12244:	mov	r2, #5
   12248:	ldr	r1, [pc, #1212]	; 1270c <__assert_fail@plt+0x1080>
   1224c:	ldr	r4, [r0]
   12250:	mov	r0, r5
   12254:	bl	11368 <dcgettext@plt>
   12258:	mov	r1, r4
   1225c:	mov	r2, r0
   12260:	mov	r0, r5
   12264:	bl	11440 <error@plt>
   12268:	b	11f8c <__assert_fail@plt+0x900>
   1226c:	mov	r7, #12
   12270:	b	11e70 <__assert_fail@plt+0x7e4>
   12274:	mov	r7, #10
   12278:	b	11e70 <__assert_fail@plt+0x7e4>
   1227c:	mov	r7, #13
   12280:	b	11e70 <__assert_fail@plt+0x7e4>
   12284:	mov	r7, #9
   12288:	b	11e70 <__assert_fail@plt+0x7e4>
   1228c:	mov	r7, #11
   12290:	b	11e70 <__assert_fail@plt+0x7e4>
   12294:	mov	r7, #7
   12298:	b	11e70 <__assert_fail@plt+0x7e4>
   1229c:	mov	r7, #8
   122a0:	b	11e70 <__assert_fail@plt+0x7e4>
   122a4:	ldr	r2, [fp, #16]
   122a8:	ldr	r3, [fp, #96]	; 0x60
   122ac:	cmp	r2, r3
   122b0:	bne	122cc <__assert_fail@plt+0xc40>
   122b4:	ldr	r3, [sp, #48]	; 0x30
   122b8:	cmp	r3, #0
   122bc:	beq	122d8 <__assert_fail@plt+0xc4c>
   122c0:	ldrb	r3, [fp, #64]	; 0x40
   122c4:	cmp	r3, #0
   122c8:	bne	122d8 <__assert_fail@plt+0xc4c>
   122cc:	ldr	r1, [pc, #1068]	; 12700 <__assert_fail@plt+0x1074>
   122d0:	add	r0, r1, #52	; 0x34
   122d4:	bl	14470 <__assert_fail@plt+0x2de4>
   122d8:	ldr	r3, [fp, #60]	; 0x3c
   122dc:	str	r3, [fp, #152]	; 0x98
   122e0:	ldr	r3, [fp, #60]	; 0x3c
   122e4:	str	r3, [sp, #32]
   122e8:	b	11b6c <__assert_fail@plt+0x4e0>
   122ec:	ldr	r3, [pc, #1032]	; 126fc <__assert_fail@plt+0x1070>
   122f0:	ldr	r5, [pc, #988]	; 126d4 <__assert_fail@plt+0x1048>
   122f4:	ldr	r3, [r3]
   122f8:	cmp	r3, sl
   122fc:	ldrlt	r6, [pc, #1020]	; 12700 <__assert_fail@plt+0x1074>
   12300:	bge	1234c <__assert_fail@plt+0xcc0>
   12304:	ldr	r7, [r8, r3, lsl #2]
   12308:	mov	r0, r7
   1230c:	bl	114dc <strlen@plt>
   12310:	ldrb	r3, [r5, #4]
   12314:	mov	r2, r7
   12318:	str	r4, [sp, #4]
   1231c:	str	r3, [sp, #8]
   12320:	str	r4, [sp]
   12324:	mov	r1, r6
   12328:	add	r3, r0, #1
   1232c:	ldr	r0, [pc, #948]	; 126e8 <__assert_fail@plt+0x105c>
   12330:	bl	1401c <__assert_fail@plt+0x2990>
   12334:	ldr	r2, [pc, #960]	; 126fc <__assert_fail@plt+0x1070>
   12338:	ldr	r3, [r2]
   1233c:	add	r3, r3, #1
   12340:	cmp	r3, sl
   12344:	str	r3, [r2]
   12348:	blt	12304 <__assert_fail@plt+0xc78>
   1234c:	ldr	r3, [fp, #16]
   12350:	ldr	r2, [fp, #32]
   12354:	str	r3, [fp, #96]	; 0x60
   12358:	mov	r3, #0
   1235c:	strb	r3, [r5, #4]
   12360:	ldr	r5, [pc, #920]	; 12700 <__assert_fail@plt+0x1074>
   12364:	mov	r4, r3
   12368:	str	r2, [fp, #36]	; 0x24
   1236c:	ldr	r3, [sp, #28]
   12370:	blx	r3
   12374:	cmn	r0, #1
   12378:	beq	122a4 <__assert_fail@plt+0xc18>
   1237c:	ldr	r3, [fp, #104]	; 0x68
   12380:	cmp	r3, #0
   12384:	beq	1236c <__assert_fail@plt+0xce0>
   12388:	ldr	r2, [fp, #128]	; 0x80
   1238c:	cmp	r3, r2
   12390:	bhi	1236c <__assert_fail@plt+0xce0>
   12394:	mov	r1, r5
   12398:	ldr	r0, [pc, #840]	; 126e8 <__assert_fail@plt+0x105c>
   1239c:	bl	14470 <__assert_fail@plt+0x2de4>
   123a0:	str	r4, [fp, #128]	; 0x80
   123a4:	b	1236c <__assert_fail@plt+0xce0>
   123a8:	ldr	r5, [pc, #864]	; 12710 <__assert_fail@plt+0x1084>
   123ac:	mov	r2, #5
   123b0:	ldr	r1, [pc, #860]	; 12714 <__assert_fail@plt+0x1088>
   123b4:	mov	r0, #0
   123b8:	ldr	r6, [r5]
   123bc:	bl	11368 <dcgettext@plt>
   123c0:	mov	r4, #0
   123c4:	mov	r7, r0
   123c8:	bl	14770 <__assert_fail@plt+0x30e4>
   123cc:	mov	r2, r7
   123d0:	mov	r1, #1
   123d4:	str	r4, [sp, #4]
   123d8:	str	r0, [sp]
   123dc:	mov	r0, r6
   123e0:	bl	11554 <__fprintf_chk@plt>
   123e4:	mov	r2, #5
   123e8:	ldr	r1, [pc, #808]	; 12718 <__assert_fail@plt+0x108c>
   123ec:	mov	r0, r4
   123f0:	ldr	r6, [r5]
   123f4:	bl	11368 <dcgettext@plt>
   123f8:	ldr	r3, [fp, #72]	; 0x48
   123fc:	mov	r1, #1
   12400:	stm	sp, {r3, r4}
   12404:	mov	r2, r0
   12408:	mov	r0, r6
   1240c:	bl	11554 <__fprintf_chk@plt>
   12410:	mov	r2, #5
   12414:	ldr	r1, [pc, #768]	; 1271c <__assert_fail@plt+0x1090>
   12418:	mov	r0, r4
   1241c:	ldr	r6, [r5]
   12420:	bl	11368 <dcgettext@plt>
   12424:	ldr	r3, [fp, #76]	; 0x4c
   12428:	mov	r1, #1
   1242c:	stm	sp, {r3, r4}
   12430:	mov	r2, r0
   12434:	mov	r0, r6
   12438:	bl	11554 <__fprintf_chk@plt>
   1243c:	mov	r2, #5
   12440:	ldr	r1, [pc, #728]	; 12720 <__assert_fail@plt+0x1094>
   12444:	mov	r0, r4
   12448:	ldr	r7, [r5]
   1244c:	bl	11368 <dcgettext@plt>
   12450:	ldr	r6, [fp, #72]	; 0x48
   12454:	mov	r9, r0
   12458:	bl	14770 <__assert_fail@plt+0x30e4>
   1245c:	mov	r2, r9
   12460:	mov	r1, #1
   12464:	str	r4, [sp, #4]
   12468:	sub	r0, r6, r0
   1246c:	str	r0, [sp]
   12470:	mov	r0, r7
   12474:	bl	11554 <__fprintf_chk@plt>
   12478:	mov	r2, #5
   1247c:	ldr	r1, [pc, #672]	; 12724 <__assert_fail@plt+0x1098>
   12480:	mov	r0, r4
   12484:	ldr	r6, [r5]
   12488:	bl	11368 <dcgettext@plt>
   1248c:	ldr	r3, [fp, #80]	; 0x50
   12490:	mov	r1, #1
   12494:	stm	sp, {r3, r4}
   12498:	mov	r2, r0
   1249c:	mov	r0, r6
   124a0:	bl	11554 <__fprintf_chk@plt>
   124a4:	mov	r2, #5
   124a8:	ldr	r1, [pc, #632]	; 12728 <__assert_fail@plt+0x109c>
   124ac:	mov	r0, r4
   124b0:	ldr	r6, [r5]
   124b4:	bl	11368 <dcgettext@plt>
   124b8:	mov	r3, #0
   124bc:	mvn	r2, #-2147483648	; 0x80000000
   124c0:	mov	r1, #1
   124c4:	strd	r2, [sp]
   124c8:	mov	r2, r0
   124cc:	mov	r0, r6
   124d0:	bl	11554 <__fprintf_chk@plt>
   124d4:	mov	r0, r4
   124d8:	bl	11620 <isatty@plt>
   124dc:	cmp	r0, r4
   124e0:	beq	12028 <__assert_fail@plt+0x99c>
   124e4:	mov	r2, #5
   124e8:	ldr	r1, [pc, #572]	; 1272c <__assert_fail@plt+0x10a0>
   124ec:	mov	r0, r4
   124f0:	ldr	r6, [r5]
   124f4:	bl	11368 <dcgettext@plt>
   124f8:	mov	r1, #1
   124fc:	mov	r2, r0
   12500:	mov	r0, r6
   12504:	bl	11554 <__fprintf_chk@plt>
   12508:	ldr	r3, [sp, #48]	; 0x30
   1250c:	cmp	r3, r4
   12510:	beq	12028 <__assert_fail@plt+0x99c>
   12514:	mov	r0, r4
   12518:	mov	r2, #5
   1251c:	ldr	r1, [pc, #524]	; 12730 <__assert_fail@plt+0x10a4>
   12520:	ldr	r4, [r5]
   12524:	bl	11368 <dcgettext@plt>
   12528:	ldr	r3, [pc, #460]	; 126fc <__assert_fail@plt+0x1070>
   1252c:	mov	r1, #1
   12530:	ldr	r3, [r3]
   12534:	ldr	r3, [r8, r3, lsl #2]
   12538:	mov	r2, r0
   1253c:	mov	r0, r4
   12540:	bl	11554 <__fprintf_chk@plt>
   12544:	b	12028 <__assert_fail@plt+0x99c>
   12548:	ldr	r3, [fp, #104]	; 0x68
   1254c:	cmp	r3, #0
   12550:	beq	11ff0 <__assert_fail@plt+0x964>
   12554:	b	11fe8 <__assert_fail@plt+0x95c>
   12558:	ldr	r2, [sp, #28]
   1255c:	mov	r0, r7
   12560:	cmp	r2, #16
   12564:	mov	r2, #5
   12568:	ldreq	r1, [pc, #452]	; 12734 <__assert_fail@plt+0x10a8>
   1256c:	ldrne	r1, [pc, #452]	; 12738 <__assert_fail@plt+0x10ac>
   12570:	str	r3, [sp, #28]
   12574:	bl	11368 <dcgettext@plt>
   12578:	mov	r2, #255	; 0xff
   1257c:	str	r2, [sp]
   12580:	ldr	r3, [sp, #28]
   12584:	mov	r2, r0
   12588:	mov	r1, r7
   1258c:	mov	r0, #1
   12590:	bl	11440 <error@plt>
   12594:	mov	r0, #0
   12598:	bl	12ce0 <__assert_fail@plt+0x1654>
   1259c:	mov	r0, #1
   125a0:	bl	12ce0 <__assert_fail@plt+0x1654>
   125a4:	mov	r2, #5
   125a8:	ldr	r1, [pc, #396]	; 1273c <__assert_fail@plt+0x10b0>
   125ac:	mov	r0, #0
   125b0:	bl	11368 <dcgettext@plt>
   125b4:	mov	r1, #0
   125b8:	mov	r2, r0
   125bc:	mov	r0, r1
   125c0:	bl	11440 <error@plt>
   125c4:	b	11f48 <__assert_fail@plt+0x8bc>
   125c8:	sub	r9, r8, #4
   125cc:	b	120b0 <__assert_fail@plt+0xa24>
   125d0:	bl	11500 <__errno_location@plt>
   125d4:	mov	r2, #5
   125d8:	ldr	r1, [pc, #352]	; 12740 <__assert_fail@plt+0x10b4>
   125dc:	ldr	r4, [r0]
   125e0:	mov	r0, #0
   125e4:	bl	11368 <dcgettext@plt>
   125e8:	mov	r1, r4
   125ec:	mov	r2, r0
   125f0:	mov	r0, #1
   125f4:	bl	11440 <error@plt>
   125f8:	ldr	r1, [pc, #324]	; 12744 <__assert_fail@plt+0x10b8>
   125fc:	mov	r2, #5
   12600:	str	r3, [sp, #28]
   12604:	mov	r0, #0
   12608:	bl	11368 <dcgettext@plt>
   1260c:	ldr	r3, [sp, #28]
   12610:	mov	r1, #0
   12614:	mov	r2, r0
   12618:	mov	r0, #1
   1261c:	bl	11440 <error@plt>
   12620:	bl	11374 <__stack_chk_fail@plt>
   12624:	ldr	r3, [pc, #328]	; 12774 <__assert_fail@plt+0x10e8>
   12628:	ldr	r2, [pc, #280]	; 12748 <__assert_fail@plt+0x10bc>
   1262c:	ldr	r1, [pc, #312]	; 1276c <__assert_fail@plt+0x10e0>
   12630:	ldr	r0, [pc, #276]	; 1274c <__assert_fail@plt+0x10c0>
   12634:	bl	1168c <__assert_fail@plt>
   12638:	mov	r2, #5
   1263c:	ldr	r1, [pc, #268]	; 12750 <__assert_fail@plt+0x10c4>
   12640:	mov	r0, r7
   12644:	str	r3, [sp, #28]
   12648:	bl	11368 <dcgettext@plt>
   1264c:	ldr	r2, [sp, #72]	; 0x48
   12650:	b	1257c <__assert_fail@plt+0xef0>
   12654:	str	r3, [sp, #28]
   12658:	mov	r2, #5
   1265c:	ldr	r1, [pc, #240]	; 12754 <__assert_fail@plt+0x10c8>
   12660:	b	12604 <__assert_fail@plt+0xf78>
   12664:	mov	r2, #5
   12668:	ldr	r1, [pc, #232]	; 12758 <__assert_fail@plt+0x10cc>
   1266c:	mov	r0, #0
   12670:	bl	11368 <dcgettext@plt>
   12674:	ldr	r2, [sp, #68]	; 0x44
   12678:	ldr	r3, [pc, #220]	; 1275c <__assert_fail@plt+0x10d0>
   1267c:	mov	r1, #0
   12680:	add	r3, r3, r2, lsl #4
   12684:	ldr	r3, [r3, #40]	; 0x28
   12688:	mov	r2, r0
   1268c:	mov	r0, #1
   12690:	bl	11440 <error@plt>
   12694:	andeq	ip, r1, ip, lsr r0
   12698:	muleq	r2, r8, sp
   1269c:	andeq	fp, r1, ip, asr #19
   126a0:	andeq	sp, r2, r8, lsl #1
   126a4:	andeq	fp, r1, r8, asr r6
   126a8:	ldrdeq	fp, [r1], -r4
   126ac:	andeq	ip, r1, r0, asr r4
   126b0:	andeq	r5, r1, r0, lsr #7
   126b4:	strdeq	r3, [r1], -r8
   126b8:	andeq	r2, r1, r4, asr #17
   126bc:	andeq	r3, r1, ip, lsl r3
   126c0:	andeq	sl, r1, r0, lsl #18
   126c4:	ldrdeq	fp, [r1], -ip
   126c8:	andeq	fp, r1, r8, asr #19
   126cc:	andeq	sp, r2, r0, lsl #1
   126d0:			; <UNDEFINED> instruction: 0x0001bcb4
   126d4:	andeq	sp, r2, r8
   126d8:	ldrdeq	r3, [r1], -r4
   126dc:	andeq	fp, r1, r4, asr #19
   126e0:	andeq	fp, r1, r4, lsr ip
   126e4:	andeq	r3, r1, r0, lsl #22
   126e8:	andeq	sp, r2, ip, asr #1
   126ec:	muleq	r1, r0, r8
   126f0:	muleq	r1, r4, r8
   126f4:	andeq	r3, r1, r4, ror #2
   126f8:	andeq	sp, r2, r8, ror r0
   126fc:	andeq	sp, r2, r8, rrx
   12700:	muleq	r2, r8, r0
   12704:	andeq	fp, r1, r8, ror sp
   12708:	muleq	r1, ip, sp
   1270c:	andeq	fp, r1, r4, asr sp
   12710:	andeq	sp, r2, r0, ror r0
   12714:			; <UNDEFINED> instruction: 0x0001bdb8
   12718:	andeq	fp, r1, r8, ror #27
   1271c:	andeq	fp, r1, r4, lsr #28
   12720:	andeq	fp, r1, r4, ror lr
   12724:	andeq	fp, r1, ip, lsr #29
   12728:	andeq	fp, r1, r0, ror #29
   1272c:	andeq	fp, r1, ip, lsl pc
   12730:	andeq	fp, r1, ip, asr #31
   12734:	andeq	fp, r1, r4, lsl #21
   12738:	andeq	fp, r1, r8, ror #21
   1273c:	andeq	fp, r1, r0, lsl #26
   12740:	andeq	fp, r1, r8, ror #19
   12744:			; <UNDEFINED> instruction: 0x0001bbb0
   12748:	ldrdeq	r0, [r0], -r9
   1274c:	andeq	fp, r1, ip, lsl #20
   12750:	andeq	fp, r1, ip, asr #22
   12754:	andeq	fp, r1, r4, asr #20
   12758:	andeq	fp, r1, r8, ror ip
   1275c:	ldrdeq	sl, [r1], -r8
   12760:	andeq	r0, r0, r5, lsr #5
   12764:	andeq	fp, r1, ip, lsr sp
   12768:	strdeq	r0, [r0], -r5
   1276c:	andeq	sl, r1, r0, lsl #22
   12770:	andeq	fp, r1, r8, lsr #20
   12774:	strdeq	sl, [r1], -r8
   12778:	ldr	r3, [pc, #-12]	; 12774 <__assert_fail@plt+0x10e8>
   1277c:	ldr	r2, [pc, #-36]	; 12760 <__assert_fail@plt+0x10d4>
   12780:	ldr	r1, [pc, #-28]	; 1276c <__assert_fail@plt+0x10e0>
   12784:	ldr	r0, [pc, #-40]	; 12764 <__assert_fail@plt+0x10d8>
   12788:	bl	1168c <__assert_fail@plt>
   1278c:	ldr	r3, [pc, #-32]	; 12774 <__assert_fail@plt+0x10e8>
   12790:	ldr	r2, [pc, #-48]	; 12768 <__assert_fail@plt+0x10dc>
   12794:	ldr	r1, [pc, #-48]	; 1276c <__assert_fail@plt+0x10e0>
   12798:	ldr	r0, [pc, #-48]	; 12770 <__assert_fail@plt+0x10e4>
   1279c:	bl	1168c <__assert_fail@plt>
   127a0:	mov	fp, #0
   127a4:	mov	lr, #0
   127a8:	pop	{r1}		; (ldr r1, [sp], #4)
   127ac:	mov	r2, sp
   127b0:	push	{r2}		; (str r2, [sp, #-4]!)
   127b4:	push	{r0}		; (str r0, [sp, #-4]!)
   127b8:	ldr	ip, [pc, #16]	; 127d0 <__assert_fail@plt+0x1144>
   127bc:	push	{ip}		; (str ip, [sp, #-4]!)
   127c0:	ldr	r0, [pc, #12]	; 127d4 <__assert_fail@plt+0x1148>
   127c4:	ldr	r3, [pc, #12]	; 127d8 <__assert_fail@plt+0x114c>
   127c8:	bl	1147c <__libc_start_main@plt>
   127cc:	bl	11650 <abort@plt>
   127d0:			; <UNDEFINED> instruction: 0x0001a8b0
   127d4:	muleq	r1, r8, r6
   127d8:	andeq	sl, r1, r0, asr r8
   127dc:	ldr	r3, [pc, #20]	; 127f8 <__assert_fail@plt+0x116c>
   127e0:	ldr	r2, [pc, #20]	; 127fc <__assert_fail@plt+0x1170>
   127e4:	add	r3, pc, r3
   127e8:	ldr	r2, [r3, r2]
   127ec:	cmp	r2, #0
   127f0:	bxeq	lr
   127f4:	b	11494 <__gmon_start__@plt>
   127f8:			; <UNDEFINED> instruction: 0x0001a6b0
   127fc:	andeq	r0, r0, ip, asr r1
   12800:	ldr	r0, [pc, #24]	; 12820 <__assert_fail@plt+0x1194>
   12804:	ldr	r3, [pc, #24]	; 12824 <__assert_fail@plt+0x1198>
   12808:	cmp	r3, r0
   1280c:	bxeq	lr
   12810:	ldr	r3, [pc, #16]	; 12828 <__assert_fail@plt+0x119c>
   12814:	cmp	r3, #0
   12818:	bxeq	lr
   1281c:	bx	r3
   12820:	andeq	sp, r2, r8, asr r0
   12824:	andeq	sp, r2, r8, asr r0
   12828:	andeq	r0, r0, r0
   1282c:	ldr	r0, [pc, #36]	; 12858 <__assert_fail@plt+0x11cc>
   12830:	ldr	r1, [pc, #36]	; 1285c <__assert_fail@plt+0x11d0>
   12834:	sub	r1, r1, r0
   12838:	asr	r1, r1, #2
   1283c:	add	r1, r1, r1, lsr #31
   12840:	asrs	r1, r1, #1
   12844:	bxeq	lr
   12848:	ldr	r3, [pc, #16]	; 12860 <__assert_fail@plt+0x11d4>
   1284c:	cmp	r3, #0
   12850:	bxeq	lr
   12854:	bx	r3
   12858:	andeq	sp, r2, r8, asr r0
   1285c:	andeq	sp, r2, r8, asr r0
   12860:	andeq	r0, r0, r0
   12864:	push	{r4, lr}
   12868:	ldr	r4, [pc, #24]	; 12888 <__assert_fail@plt+0x11fc>
   1286c:	ldrb	r3, [r4]
   12870:	cmp	r3, #0
   12874:	popne	{r4, pc}
   12878:	bl	12800 <__assert_fail@plt+0x1174>
   1287c:	mov	r3, #1
   12880:	strb	r3, [r4]
   12884:	pop	{r4, pc}
   12888:	andeq	sp, r2, r4, lsl #1
   1288c:	b	1282c <__assert_fail@plt+0x11a0>
   12890:	bx	lr
   12894:	ldr	r3, [pc, #32]	; 128bc <__assert_fail@plt+0x1230>
   12898:	ldr	r2, [r3]
   1289c:	cmn	r2, #-2147483647	; 0x80000001
   128a0:	ldrne	r2, [r3]
   128a4:	addne	r2, r2, #1
   128a8:	strne	r2, [r3]
   128ac:	ldr	r3, [pc, #12]	; 128c0 <__assert_fail@plt+0x1234>
   128b0:	mov	r2, #1
   128b4:	str	r2, [r3]
   128b8:	bx	lr
   128bc:	andeq	sp, r2, r8
   128c0:	andeq	sp, r2, r8, lsl #1
   128c4:	mov	r2, #5
   128c8:	ldr	r1, [pc, #24]	; 128e8 <__assert_fail@plt+0x125c>
   128cc:	push	{r4, lr}
   128d0:	mov	r0, #0
   128d4:	bl	11368 <dcgettext@plt>
   128d8:	mov	r1, #0
   128dc:	mov	r2, r0
   128e0:	mov	r0, #1
   128e4:	bl	11440 <error@plt>
   128e8:	andeq	sl, r1, r0, lsr sl
   128ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f0:	sub	sp, sp, #28
   128f4:	ldr	r5, [pc, #588]	; 12b48 <__assert_fail@plt+0x14bc>
   128f8:	ldr	r3, [pc, #588]	; 12b4c <__assert_fail@plt+0x14c0>
   128fc:	ldr	r2, [r5, #4]
   12900:	ldr	r3, [r3]
   12904:	cmp	r2, #0
   12908:	str	r3, [sp, #20]
   1290c:	beq	12968 <__assert_fail@plt+0x12dc>
   12910:	ldr	fp, [pc, #568]	; 12b50 <__assert_fail@plt+0x14c4>
   12914:	ldr	sl, [pc, #568]	; 12b54 <__assert_fail@plt+0x14c8>
   12918:	mov	r6, r0
   1291c:	mov	r9, r1
   12920:	eor	r8, r0, #1
   12924:	mov	r7, #0
   12928:	cmp	r9, r7
   1292c:	movhi	r4, #0
   12930:	andls	r4, r8, #1
   12934:	mov	r3, #0
   12938:	str	r3, [r5]
   1293c:	mov	r2, r4
   12940:	add	r1, sp, #16
   12944:	mvn	r0, #0
   12948:	bl	11404 <waitpid@plt>
   1294c:	cmn	r0, #1
   12950:	mov	r2, r0
   12954:	beq	12984 <__assert_fail@plt+0x12f8>
   12958:	cmp	r0, #0
   1295c:	bne	129b0 <__assert_fail@plt+0x1324>
   12960:	cmp	r4, #0
   12964:	beq	12af8 <__assert_fail@plt+0x146c>
   12968:	ldr	r3, [pc, #476]	; 12b4c <__assert_fail@plt+0x14c0>
   1296c:	ldr	r2, [sp, #20]
   12970:	ldr	r3, [r3]
   12974:	cmp	r2, r3
   12978:	bne	12b44 <__assert_fail@plt+0x14b8>
   1297c:	add	sp, sp, #28
   12980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12984:	bl	11500 <__errno_location@plt>
   12988:	ldr	r3, [r0]
   1298c:	cmp	r3, #4
   12990:	bne	12b1c <__assert_fail@plt+0x1490>
   12994:	ldr	r3, [r5]
   12998:	cmp	r3, #0
   1299c:	movne	r3, r6
   129a0:	orreq	r3, r6, #1
   129a4:	cmp	r3, #0
   129a8:	moveq	r4, #1
   129ac:	b	1293c <__assert_fail@plt+0x12b0>
   129b0:	ldr	ip, [r5, #8]
   129b4:	cmp	ip, #0
   129b8:	beq	1293c <__assert_fail@plt+0x12b0>
   129bc:	ldr	r1, [r5, #12]
   129c0:	ldr	r3, [r1]
   129c4:	cmp	r0, r3
   129c8:	mov	r3, #0
   129cc:	beq	129e8 <__assert_fail@plt+0x135c>
   129d0:	add	r3, r3, #1
   129d4:	cmp	r3, ip
   129d8:	beq	1293c <__assert_fail@plt+0x12b0>
   129dc:	ldr	r0, [r1, #4]!
   129e0:	cmp	r0, r2
   129e4:	bne	129d0 <__assert_fail@plt+0x1344>
   129e8:	ldr	r2, [r5, #12]
   129ec:	mov	r4, #0
   129f0:	add	r7, r7, #1
   129f4:	str	r4, [r2, r3, lsl #2]
   129f8:	ldr	r3, [sp, #16]
   129fc:	ldr	r2, [r5, #4]
   12a00:	asr	r1, r3, #8
   12a04:	sub	r2, r2, #1
   12a08:	uxtb	r1, r1
   12a0c:	cmp	r1, #255	; 0xff
   12a10:	str	r2, [r5, #4]
   12a14:	beq	12ac8 <__assert_fail@plt+0x143c>
   12a18:	uxtb	r2, r3
   12a1c:	cmp	r2, #127	; 0x7f
   12a20:	beq	12a90 <__assert_fail@plt+0x1404>
   12a24:	and	r2, r3, #127	; 0x7f
   12a28:	add	r2, r2, #1
   12a2c:	sxtb	r2, r2
   12a30:	cmp	r2, #1
   12a34:	ble	12a70 <__assert_fail@plt+0x13e4>
   12a38:	mov	r2, #5
   12a3c:	mov	r1, sl
   12a40:	mov	r0, #0
   12a44:	bl	11368 <dcgettext@plt>
   12a48:	ldr	r3, [r5, #20]
   12a4c:	ldr	r2, [sp, #16]
   12a50:	mov	r1, #0
   12a54:	and	r2, r2, #127	; 0x7f
   12a58:	ldr	r3, [r3]
   12a5c:	str	r2, [sp]
   12a60:	mov	r2, r0
   12a64:	mov	r0, #125	; 0x7d
   12a68:	bl	11440 <error@plt>
   12a6c:	ldr	r3, [sp, #16]
   12a70:	asr	r3, r3, #8
   12a74:	tst	r3, #255	; 0xff
   12a78:	movne	r3, #123	; 0x7b
   12a7c:	strne	r3, [r5, #60]	; 0x3c
   12a80:	ldr	r3, [r5, #4]
   12a84:	cmp	r3, #0
   12a88:	bne	12928 <__assert_fail@plt+0x129c>
   12a8c:	b	12968 <__assert_fail@plt+0x12dc>
   12a90:	mov	r2, #5
   12a94:	ldr	r1, [pc, #188]	; 12b58 <__assert_fail@plt+0x14cc>
   12a98:	mov	r0, #0
   12a9c:	bl	11368 <dcgettext@plt>
   12aa0:	ldrb	r2, [sp, #17]
   12aa4:	ldr	r3, [r5, #20]
   12aa8:	mov	r1, #0
   12aac:	ldr	r3, [r3]
   12ab0:	str	r2, [sp]
   12ab4:	mov	r2, r0
   12ab8:	mov	r0, #125	; 0x7d
   12abc:	bl	11440 <error@plt>
   12ac0:	ldr	r3, [sp, #16]
   12ac4:	b	12a24 <__assert_fail@plt+0x1398>
   12ac8:	mov	r2, #5
   12acc:	mov	r1, fp
   12ad0:	mov	r0, r4
   12ad4:	bl	11368 <dcgettext@plt>
   12ad8:	ldr	r3, [r5, #20]
   12adc:	mov	r1, r4
   12ae0:	ldr	r3, [r3]
   12ae4:	mov	r2, r0
   12ae8:	mov	r0, #124	; 0x7c
   12aec:	bl	11440 <error@plt>
   12af0:	ldr	r3, [sp, #16]
   12af4:	b	12a18 <__assert_fail@plt+0x138c>
   12af8:	mov	r2, #5
   12afc:	ldr	r1, [pc, #88]	; 12b5c <__assert_fail@plt+0x14d0>
   12b00:	bl	11368 <dcgettext@plt>
   12b04:	ldr	r3, [r5, #4]
   12b08:	mov	r1, r4
   12b0c:	mov	r2, r0
   12b10:	mov	r0, r4
   12b14:	bl	11440 <error@plt>
   12b18:	b	12968 <__assert_fail@plt+0x12dc>
   12b1c:	mov	r2, #5
   12b20:	ldr	r1, [pc, #56]	; 12b60 <__assert_fail@plt+0x14d4>
   12b24:	mov	r0, #0
   12b28:	str	r3, [sp, #12]
   12b2c:	bl	11368 <dcgettext@plt>
   12b30:	ldr	r3, [sp, #12]
   12b34:	mov	r1, r3
   12b38:	mov	r2, r0
   12b3c:	mov	r0, #1
   12b40:	bl	11440 <error@plt>
   12b44:	bl	11374 <__stack_chk_fail@plt>
   12b48:	andeq	sp, r2, r8, lsl #1
   12b4c:	muleq	r2, r8, sp
   12b50:	andeq	sl, r1, r0, lsr #21
   12b54:	andeq	sl, r1, r4, ror #21
   12b58:	andeq	sl, r1, r8, asr #21
   12b5c:	andeq	sl, r1, r4, ror sl
   12b60:	andeq	sl, r1, r4, asr sl
   12b64:	push	{r4, r5, r6, lr}
   12b68:	mov	r6, r0
   12b6c:	ldr	r5, [pc, #260]	; 12c78 <__assert_fail@plt+0x15ec>
   12b70:	ldr	ip, [r5, #8]
   12b74:	ldr	r0, [r5, #12]
   12b78:	cmp	ip, #0
   12b7c:	beq	12c40 <__assert_fail@plt+0x15b4>
   12b80:	ldr	r4, [r0]
   12b84:	cmp	r4, #0
   12b88:	beq	12c58 <__assert_fail@plt+0x15cc>
   12b8c:	add	r3, r0, #4
   12b90:	mov	r4, #0
   12b94:	b	12bac <__assert_fail@plt+0x1520>
   12b98:	mov	r2, r3
   12b9c:	add	r3, r3, #4
   12ba0:	ldr	r1, [r2]
   12ba4:	cmp	r1, #0
   12ba8:	beq	12c20 <__assert_fail@plt+0x1594>
   12bac:	add	r4, r4, #1
   12bb0:	cmp	r4, ip
   12bb4:	bne	12b98 <__assert_fail@plt+0x150c>
   12bb8:	ldr	r3, [pc, #188]	; 12c7c <__assert_fail@plt+0x15f0>
   12bbc:	cmp	r4, r3
   12bc0:	bhi	12c60 <__assert_fail@plt+0x15d4>
   12bc4:	add	r3, ip, #1
   12bc8:	add	r3, r3, ip, lsr #1
   12bcc:	mov	r4, ip
   12bd0:	lsl	r1, r3, #2
   12bd4:	str	r3, [r5, #8]
   12bd8:	bl	195f8 <__assert_fail@plt+0x7f6c>
   12bdc:	ldr	r3, [r5, #8]
   12be0:	cmp	r3, r4
   12be4:	str	r0, [r5, #12]
   12be8:	bls	12c10 <__assert_fail@plt+0x1584>
   12bec:	sub	r2, r4, #-1073741823	; 0xc0000001
   12bf0:	mov	r3, r4
   12bf4:	add	r2, r0, r2, lsl #2
   12bf8:	mov	ip, #0
   12bfc:	str	ip, [r2, #4]!
   12c00:	ldr	r1, [r5, #8]
   12c04:	add	r3, r3, #1
   12c08:	cmp	r1, r3
   12c0c:	bhi	12bfc <__assert_fail@plt+0x1570>
   12c10:	ldr	r3, [r0, r4, lsl #2]
   12c14:	add	r2, r0, r4, lsl #2
   12c18:	cmp	r3, #0
   12c1c:	bne	12c64 <__assert_fail@plt+0x15d8>
   12c20:	ldr	r3, [r5, #4]
   12c24:	mov	r1, #1
   12c28:	add	r3, r3, r1
   12c2c:	str	r6, [r2]
   12c30:	str	r3, [r5, #4]
   12c34:	strb	r1, [r5, #64]	; 0x40
   12c38:	mov	r0, r4
   12c3c:	pop	{r4, r5, r6, pc}
   12c40:	cmp	r0, #0
   12c44:	bne	12bc4 <__assert_fail@plt+0x1538>
   12c48:	mov	r4, r0
   12c4c:	mov	r1, #64	; 0x40
   12c50:	mov	r3, #16
   12c54:	b	12bd4 <__assert_fail@plt+0x1548>
   12c58:	mov	r2, r0
   12c5c:	b	12c20 <__assert_fail@plt+0x1594>
   12c60:	bl	197e4 <__assert_fail@plt+0x8158>
   12c64:	ldr	r3, [pc, #20]	; 12c80 <__assert_fail@plt+0x15f4>
   12c68:	ldr	r2, [pc, #20]	; 12c84 <__assert_fail@plt+0x15f8>
   12c6c:	ldr	r1, [pc, #20]	; 12c88 <__assert_fail@plt+0x15fc>
   12c70:	ldr	r0, [pc, #20]	; 12c8c <__assert_fail@plt+0x1600>
   12c74:	bl	1168c <__assert_fail@plt>
   12c78:	andeq	sp, r2, r8, lsl #1
   12c7c:	ldrbne	r5, [r5, #-1364]	; 0xfffffaac
   12c80:	ldrdeq	sl, [r1], -r8
   12c84:	muleq	r0, r1, r5
   12c88:	andeq	sl, r1, r0, lsl #22
   12c8c:	andeq	sl, r1, r8, lsl #22
   12c90:	push	{r4, r5, r6, lr}
   12c94:	mov	r1, #0
   12c98:	bl	14da8 <__assert_fail@plt+0x371c>
   12c9c:	subs	r5, r0, #0
   12ca0:	movlt	r4, #0
   12ca4:	blt	12cb8 <__assert_fail@plt+0x162c>
   12ca8:	ldr	r1, [pc, #44]	; 12cdc <__assert_fail@plt+0x1650>
   12cac:	bl	112a8 <fdopen@plt>
   12cb0:	subs	r4, r0, #0
   12cb4:	beq	12cc0 <__assert_fail@plt+0x1634>
   12cb8:	mov	r0, r4
   12cbc:	pop	{r4, r5, r6, pc}
   12cc0:	bl	11500 <__errno_location@plt>
   12cc4:	mov	r6, r0
   12cc8:	mov	r0, r5
   12ccc:	ldr	r5, [r6]
   12cd0:	bl	11668 <close@plt>
   12cd4:	str	r5, [r6]
   12cd8:	b	12cb8 <__assert_fail@plt+0x162c>
   12cdc:	andeq	fp, r1, r4, ror sp
   12ce0:	subs	r4, r0, #0
   12ce4:	push	{r7, lr}
   12ce8:	beq	12d24 <__assert_fail@plt+0x1698>
   12cec:	ldr	r3, [pc, #664]	; 12f8c <__assert_fail@plt+0x1900>
   12cf0:	mov	r2, #5
   12cf4:	ldr	r1, [pc, #660]	; 12f90 <__assert_fail@plt+0x1904>
   12cf8:	mov	r0, #0
   12cfc:	ldr	r4, [r3]
   12d00:	bl	11368 <dcgettext@plt>
   12d04:	ldr	r3, [pc, #648]	; 12f94 <__assert_fail@plt+0x1908>
   12d08:	mov	r1, #1
   12d0c:	ldr	r3, [r3]
   12d10:	mov	r2, r0
   12d14:	mov	r0, r4
   12d18:	bl	11554 <__fprintf_chk@plt>
   12d1c:	mov	r0, #1
   12d20:	bl	114c4 <exit@plt>
   12d24:	ldr	r5, [pc, #620]	; 12f98 <__assert_fail@plt+0x190c>
   12d28:	mov	r2, #5
   12d2c:	ldr	r1, [pc, #616]	; 12f9c <__assert_fail@plt+0x1910>
   12d30:	ldr	r7, [r5]
   12d34:	bl	11368 <dcgettext@plt>
   12d38:	ldr	r6, [pc, #596]	; 12f94 <__assert_fail@plt+0x1908>
   12d3c:	mov	r1, #1
   12d40:	ldr	r3, [r6]
   12d44:	mov	r2, r0
   12d48:	mov	r0, r7
   12d4c:	bl	11554 <__fprintf_chk@plt>
   12d50:	mov	r2, #5
   12d54:	ldr	r1, [pc, #580]	; 12fa0 <__assert_fail@plt+0x1914>
   12d58:	mov	r0, r4
   12d5c:	bl	11368 <dcgettext@plt>
   12d60:	ldr	r1, [r5]
   12d64:	bl	11638 <fputs@plt>
   12d68:	mov	r2, #5
   12d6c:	ldr	r1, [pc, #560]	; 12fa4 <__assert_fail@plt+0x1918>
   12d70:	mov	r0, r4
   12d74:	bl	11368 <dcgettext@plt>
   12d78:	ldr	r1, [r5]
   12d7c:	bl	11638 <fputs@plt>
   12d80:	mov	r2, #5
   12d84:	ldr	r1, [pc, #540]	; 12fa8 <__assert_fail@plt+0x191c>
   12d88:	mov	r0, r4
   12d8c:	bl	11368 <dcgettext@plt>
   12d90:	ldr	r1, [r5]
   12d94:	bl	11638 <fputs@plt>
   12d98:	mov	r2, #5
   12d9c:	ldr	r1, [pc, #520]	; 12fac <__assert_fail@plt+0x1920>
   12da0:	mov	r0, r4
   12da4:	bl	11368 <dcgettext@plt>
   12da8:	ldr	r1, [r5]
   12dac:	bl	11638 <fputs@plt>
   12db0:	mov	r2, #5
   12db4:	ldr	r1, [pc, #500]	; 12fb0 <__assert_fail@plt+0x1924>
   12db8:	mov	r0, r4
   12dbc:	bl	11368 <dcgettext@plt>
   12dc0:	ldr	r1, [r5]
   12dc4:	bl	11638 <fputs@plt>
   12dc8:	mov	r2, #5
   12dcc:	ldr	r1, [pc, #480]	; 12fb4 <__assert_fail@plt+0x1928>
   12dd0:	mov	r0, r4
   12dd4:	bl	11368 <dcgettext@plt>
   12dd8:	ldr	r1, [r5]
   12ddc:	bl	11638 <fputs@plt>
   12de0:	mov	r2, #5
   12de4:	ldr	r1, [pc, #460]	; 12fb8 <__assert_fail@plt+0x192c>
   12de8:	mov	r0, r4
   12dec:	bl	11368 <dcgettext@plt>
   12df0:	ldr	r1, [r5]
   12df4:	bl	11638 <fputs@plt>
   12df8:	mov	r2, #5
   12dfc:	ldr	r1, [pc, #440]	; 12fbc <__assert_fail@plt+0x1930>
   12e00:	mov	r0, r4
   12e04:	bl	11368 <dcgettext@plt>
   12e08:	ldr	r1, [r5]
   12e0c:	bl	11638 <fputs@plt>
   12e10:	mov	r2, #5
   12e14:	ldr	r1, [pc, #420]	; 12fc0 <__assert_fail@plt+0x1934>
   12e18:	mov	r0, r4
   12e1c:	bl	11368 <dcgettext@plt>
   12e20:	ldr	r1, [r5]
   12e24:	bl	11638 <fputs@plt>
   12e28:	mov	r2, #5
   12e2c:	ldr	r1, [pc, #400]	; 12fc4 <__assert_fail@plt+0x1938>
   12e30:	mov	r0, r4
   12e34:	bl	11368 <dcgettext@plt>
   12e38:	ldr	r1, [r5]
   12e3c:	bl	11638 <fputs@plt>
   12e40:	mov	r2, #5
   12e44:	ldr	r1, [pc, #380]	; 12fc8 <__assert_fail@plt+0x193c>
   12e48:	mov	r0, r4
   12e4c:	bl	11368 <dcgettext@plt>
   12e50:	ldr	r1, [r5]
   12e54:	bl	11638 <fputs@plt>
   12e58:	mov	r2, #5
   12e5c:	ldr	r1, [pc, #360]	; 12fcc <__assert_fail@plt+0x1940>
   12e60:	mov	r0, r4
   12e64:	bl	11368 <dcgettext@plt>
   12e68:	ldr	r1, [r5]
   12e6c:	bl	11638 <fputs@plt>
   12e70:	mov	r2, #5
   12e74:	ldr	r1, [pc, #340]	; 12fd0 <__assert_fail@plt+0x1944>
   12e78:	mov	r0, r4
   12e7c:	bl	11368 <dcgettext@plt>
   12e80:	ldr	r1, [r5]
   12e84:	bl	11638 <fputs@plt>
   12e88:	mov	r2, #5
   12e8c:	ldr	r1, [pc, #320]	; 12fd4 <__assert_fail@plt+0x1948>
   12e90:	mov	r0, r4
   12e94:	bl	11368 <dcgettext@plt>
   12e98:	ldr	r1, [r5]
   12e9c:	bl	11638 <fputs@plt>
   12ea0:	mov	r2, #5
   12ea4:	ldr	r1, [pc, #300]	; 12fd8 <__assert_fail@plt+0x194c>
   12ea8:	mov	r0, r4
   12eac:	bl	11368 <dcgettext@plt>
   12eb0:	ldr	r1, [r5]
   12eb4:	bl	11638 <fputs@plt>
   12eb8:	mov	r2, #5
   12ebc:	ldr	r1, [pc, #280]	; 12fdc <__assert_fail@plt+0x1950>
   12ec0:	mov	r0, r4
   12ec4:	bl	11368 <dcgettext@plt>
   12ec8:	ldr	r1, [r5]
   12ecc:	bl	11638 <fputs@plt>
   12ed0:	mov	r2, #5
   12ed4:	ldr	r1, [pc, #260]	; 12fe0 <__assert_fail@plt+0x1954>
   12ed8:	mov	r0, r4
   12edc:	bl	11368 <dcgettext@plt>
   12ee0:	ldr	r1, [r5]
   12ee4:	bl	11638 <fputs@plt>
   12ee8:	mov	r2, #5
   12eec:	ldr	r1, [pc, #240]	; 12fe4 <__assert_fail@plt+0x1958>
   12ef0:	mov	r0, r4
   12ef4:	bl	11368 <dcgettext@plt>
   12ef8:	ldr	r1, [r5]
   12efc:	bl	11638 <fputs@plt>
   12f00:	mov	r2, #5
   12f04:	ldr	r1, [pc, #220]	; 12fe8 <__assert_fail@plt+0x195c>
   12f08:	mov	r0, r4
   12f0c:	bl	11368 <dcgettext@plt>
   12f10:	ldr	r1, [r5]
   12f14:	bl	11638 <fputs@plt>
   12f18:	mov	r2, #5
   12f1c:	ldr	r1, [pc, #200]	; 12fec <__assert_fail@plt+0x1960>
   12f20:	mov	r0, r4
   12f24:	bl	11368 <dcgettext@plt>
   12f28:	ldr	r1, [r5]
   12f2c:	bl	11638 <fputs@plt>
   12f30:	mov	r2, #5
   12f34:	ldr	r1, [pc, #180]	; 12ff0 <__assert_fail@plt+0x1964>
   12f38:	mov	r0, r4
   12f3c:	bl	11368 <dcgettext@plt>
   12f40:	ldr	r1, [r5]
   12f44:	bl	11638 <fputs@plt>
   12f48:	mov	r2, #5
   12f4c:	ldr	r1, [pc, #160]	; 12ff4 <__assert_fail@plt+0x1968>
   12f50:	mov	r0, r4
   12f54:	bl	11368 <dcgettext@plt>
   12f58:	ldr	r1, [r5]
   12f5c:	bl	11638 <fputs@plt>
   12f60:	mov	r2, #5
   12f64:	ldr	r1, [pc, #140]	; 12ff8 <__assert_fail@plt+0x196c>
   12f68:	mov	r0, r4
   12f6c:	bl	11368 <dcgettext@plt>
   12f70:	ldr	r1, [r5]
   12f74:	bl	11638 <fputs@plt>
   12f78:	ldr	r1, [r6]
   12f7c:	ldr	r0, [r5]
   12f80:	bl	15170 <__assert_fail@plt+0x3ae4>
   12f84:	mov	r0, r4
   12f88:	bl	114c4 <exit@plt>
   12f8c:	andeq	sp, r2, r0, ror r0
   12f90:	andeq	sl, r1, r8, lsl fp
   12f94:	andeq	sp, r2, r4, asr r1
   12f98:	andeq	sp, r2, ip, ror r0
   12f9c:	andeq	sl, r1, r0, asr #22
   12fa0:	andeq	sl, r1, r4, ror fp
   12fa4:	andeq	sl, r1, r4, asr #23
   12fa8:	andeq	sl, r1, ip, lsr ip
   12fac:	andeq	sl, r1, r0, lsl sp
   12fb0:	andeq	sl, r1, r0, ror #26
   12fb4:	andeq	sl, r1, ip, asr #28
   12fb8:	andeq	sl, r1, r0, lsr pc
   12fbc:	andeq	sl, r1, r8, asr #31
   12fc0:	strdeq	sl, [r1], -ip
   12fc4:	strheq	fp, [r1], -ip
   12fc8:	andeq	fp, r1, ip, lsr r1
   12fcc:	ldrdeq	fp, [r1], -ip
   12fd0:	andeq	fp, r1, ip, lsr #4
   12fd4:	andeq	fp, r1, r4, lsl #6
   12fd8:	andeq	fp, r1, r0, asr r3
   12fdc:	muleq	r1, r0, r3
   12fe0:	andeq	fp, r1, r0, ror #7
   12fe4:			; <UNDEFINED> instruction: 0x0001b4b8
   12fe8:	andeq	fp, r1, r4, lsl #10
   12fec:	andeq	fp, r1, r8, asr #10
   12ff0:	muleq	r1, r0, r5
   12ff4:	ldrdeq	fp, [r1], -r8
   12ff8:	andeq	fp, r1, r4, lsl r6
   12ffc:	push	{r4, r5, r6, r7, r8, lr}
   13000:	sub	sp, sp, #24
   13004:	ldr	r4, [pc, #320]	; 1314c <__assert_fail@plt+0x1ac0>
   13008:	mov	r8, r1
   1300c:	mov	r6, r2
   13010:	ldr	ip, [r4]
   13014:	mov	r2, #10
   13018:	add	r1, sp, #16
   1301c:	mov	r5, r3
   13020:	mov	r7, r0
   13024:	str	ip, [sp, #20]
   13028:	bl	112d8 <strtol@plt>
   1302c:	ldr	r3, [sp, #16]
   13030:	cmp	r3, r7
   13034:	beq	1310c <__assert_fail@plt+0x1a80>
   13038:	ldrb	r3, [r3]
   1303c:	cmp	r3, #0
   13040:	bne	1310c <__assert_fail@plt+0x1a80>
   13044:	cmp	r0, r6
   13048:	blt	130bc <__assert_fail@plt+0x1a30>
   1304c:	cmp	r5, #0
   13050:	cmpge	r0, r5
   13054:	bgt	13070 <__assert_fail@plt+0x19e4>
   13058:	ldr	r2, [sp, #20]
   1305c:	ldr	r3, [r4]
   13060:	cmp	r2, r3
   13064:	bne	13148 <__assert_fail@plt+0x1abc>
   13068:	add	sp, sp, #24
   1306c:	pop	{r4, r5, r6, r7, r8, pc}
   13070:	ldr	ip, [pc, #216]	; 13150 <__assert_fail@plt+0x1ac4>
   13074:	mov	r0, r3
   13078:	mov	r2, #5
   1307c:	ldr	r1, [pc, #208]	; 13154 <__assert_fail@plt+0x1ac8>
   13080:	ldr	r6, [ip]
   13084:	bl	11368 <dcgettext@plt>
   13088:	ldr	r3, [pc, #200]	; 13158 <__assert_fail@plt+0x1acc>
   1308c:	str	r5, [sp, #8]
   13090:	stm	sp, {r7, r8}
   13094:	mov	r1, #1
   13098:	ldr	r3, [r3]
   1309c:	mov	r2, r0
   130a0:	mov	r0, r6
   130a4:	bl	11554 <__fprintf_chk@plt>
   130a8:	ldr	r3, [sp, #48]	; 0x30
   130ac:	cmp	r3, #0
   130b0:	bne	13104 <__assert_fail@plt+0x1a78>
   130b4:	mov	r0, r5
   130b8:	b	13058 <__assert_fail@plt+0x19cc>
   130bc:	ldr	ip, [pc, #140]	; 13150 <__assert_fail@plt+0x1ac4>
   130c0:	mov	r0, r3
   130c4:	mov	r2, #5
   130c8:	ldr	r1, [pc, #140]	; 1315c <__assert_fail@plt+0x1ad0>
   130cc:	ldr	r5, [ip]
   130d0:	bl	11368 <dcgettext@plt>
   130d4:	ldr	r3, [pc, #124]	; 13158 <__assert_fail@plt+0x1acc>
   130d8:	str	r6, [sp, #8]
   130dc:	stm	sp, {r7, r8}
   130e0:	mov	r1, #1
   130e4:	ldr	r3, [r3]
   130e8:	mov	r2, r0
   130ec:	mov	r0, r5
   130f0:	bl	11554 <__fprintf_chk@plt>
   130f4:	ldr	r3, [sp, #48]	; 0x30
   130f8:	cmp	r3, #0
   130fc:	moveq	r0, r6
   13100:	beq	13058 <__assert_fail@plt+0x19cc>
   13104:	mov	r0, #1
   13108:	bl	12ce0 <__assert_fail@plt+0x1654>
   1310c:	ldr	r3, [pc, #60]	; 13150 <__assert_fail@plt+0x1ac4>
   13110:	mov	r2, #5
   13114:	ldr	r1, [pc, #68]	; 13160 <__assert_fail@plt+0x1ad4>
   13118:	mov	r0, #0
   1311c:	ldr	r4, [r3]
   13120:	bl	11368 <dcgettext@plt>
   13124:	ldr	r3, [pc, #44]	; 13158 <__assert_fail@plt+0x1acc>
   13128:	stm	sp, {r7, r8}
   1312c:	mov	r1, #1
   13130:	ldr	r3, [r3]
   13134:	mov	r2, r0
   13138:	mov	r0, r4
   1313c:	bl	11554 <__fprintf_chk@plt>
   13140:	mov	r0, #1
   13144:	bl	12ce0 <__assert_fail@plt+0x1654>
   13148:	bl	11374 <__stack_chk_fail@plt>
   1314c:	muleq	r2, r8, sp
   13150:	andeq	sp, r2, r0, ror r0
   13154:			; <UNDEFINED> instruction: 0x0001b6b4
   13158:	andeq	sp, r2, r4, asr r1
   1315c:	andeq	fp, r1, r4, lsl #13
   13160:	andeq	fp, r1, ip, asr r6
   13164:	ldr	r3, [pc, #20]	; 13180 <__assert_fail@plt+0x1af4>
   13168:	ldr	r2, [r3]
   1316c:	cmp	r2, #1
   13170:	ldrgt	r2, [r3]
   13174:	subgt	r2, r2, #1
   13178:	strgt	r2, [r3]
   1317c:	bx	lr
   13180:	andeq	sp, r2, r8
   13184:	ldr	r0, [pc, #64]	; 131cc <__assert_fail@plt+0x1b40>
   13188:	ldr	r3, [r0, #92]	; 0x5c
   1318c:	cmp	r3, #0
   13190:	bxne	lr
   13194:	ldr	r3, [pc, #52]	; 131d0 <__assert_fail@plt+0x1b44>
   13198:	ldrb	r3, [r3, #4]
   1319c:	cmp	r3, #0
   131a0:	bxne	lr
   131a4:	ldr	r2, [r0, #16]
   131a8:	ldr	r3, [r0, #96]	; 0x60
   131ac:	cmp	r2, r3
   131b0:	bxeq	lr
   131b4:	ldr	r3, [r0, #68]	; 0x44
   131b8:	cmp	r3, #0
   131bc:	bxne	lr
   131c0:	add	r1, r0, #16
   131c4:	add	r0, r0, #68	; 0x44
   131c8:	b	14470 <__assert_fail@plt+0x2de4>
   131cc:	andeq	sp, r2, r8, lsl #1
   131d0:	andeq	sp, r2, r8
   131d4:	push	{r4, r5, r6, lr}
   131d8:	sub	sp, sp, #16
   131dc:	ldr	r5, [pc, #296]	; 1330c <__assert_fail@plt+0x1c80>
   131e0:	ldr	r6, [r5, #80]	; 0x50
   131e4:	ldrb	r3, [r5, #116]	; 0x74
   131e8:	ldr	r2, [r5, #36]	; 0x24
   131ec:	sub	r6, r6, #1
   131f0:	ldr	r4, [r5, #112]	; 0x70
   131f4:	sub	r6, r6, r2
   131f8:	cmp	r3, #0
   131fc:	add	r6, r4, r6
   13200:	beq	13220 <__assert_fail@plt+0x1b94>
   13204:	b	132e0 <__assert_fail@plt+0x1c54>
   13208:	ldrb	r3, [r5, #124]	; 0x7c
   1320c:	cmp	r3, r0
   13210:	beq	13268 <__assert_fail@plt+0x1bdc>
   13214:	cmp	r4, r6
   13218:	bcs	132e8 <__assert_fail@plt+0x1c5c>
   1321c:	strb	r0, [r4], #1
   13220:	ldr	r0, [r5, #120]	; 0x78
   13224:	bl	1165c <getc@plt>
   13228:	cmn	r0, #1
   1322c:	bne	13208 <__assert_fail@plt+0x1b7c>
   13230:	ldr	r2, [r5, #112]	; 0x70
   13234:	mov	r3, #1
   13238:	cmp	r2, r4
   1323c:	strb	r3, [r5, #116]	; 0x74
   13240:	beq	132e0 <__assert_fail@plt+0x1c54>
   13244:	mov	r3, #0
   13248:	strb	r3, [r4], #1
   1324c:	ldr	r3, [r5, #92]	; 0x5c
   13250:	sub	r4, r4, r2
   13254:	cmp	r3, #0
   13258:	beq	132b8 <__assert_fail@plt+0x1c2c>
   1325c:	mov	r0, r4
   13260:	add	sp, sp, #16
   13264:	pop	{r4, r5, r6, pc}
   13268:	mov	r3, #0
   1326c:	strb	r3, [r4], #1
   13270:	ldr	r3, [r5, #128]	; 0x80
   13274:	ldr	r0, [r5, #92]	; 0x5c
   13278:	ldr	r2, [r5, #112]	; 0x70
   1327c:	add	r3, r3, #1
   13280:	cmp	r0, #0
   13284:	sub	r4, r4, r2
   13288:	str	r3, [r5, #128]	; 0x80
   1328c:	bne	1325c <__assert_fail@plt+0x1bd0>
   13290:	ldr	r3, [pc, #120]	; 13310 <__assert_fail@plt+0x1c84>
   13294:	str	r0, [sp, #4]
   13298:	ldr	r1, [pc, #116]	; 13314 <__assert_fail@plt+0x1c88>
   1329c:	ldrb	r3, [r3, #4]
   132a0:	str	r0, [sp]
   132a4:	add	r0, r1, #52	; 0x34
   132a8:	str	r3, [sp, #8]
   132ac:	mov	r3, r4
   132b0:	bl	1401c <__assert_fail@plt+0x2990>
   132b4:	b	1325c <__assert_fail@plt+0x1bd0>
   132b8:	ldr	r0, [pc, #80]	; 13310 <__assert_fail@plt+0x1c84>
   132bc:	str	r3, [sp, #4]
   132c0:	ldr	r1, [pc, #76]	; 13314 <__assert_fail@plt+0x1c88>
   132c4:	ldrb	r0, [r0, #4]
   132c8:	str	r3, [sp]
   132cc:	mov	r3, r4
   132d0:	str	r0, [sp, #8]
   132d4:	add	r0, r1, #52	; 0x34
   132d8:	bl	1401c <__assert_fail@plt+0x2990>
   132dc:	b	1325c <__assert_fail@plt+0x1bd0>
   132e0:	mvn	r4, #0
   132e4:	b	1325c <__assert_fail@plt+0x1bd0>
   132e8:	bl	13184 <__assert_fail@plt+0x1af8>
   132ec:	mov	r2, #5
   132f0:	ldr	r1, [pc, #32]	; 13318 <__assert_fail@plt+0x1c8c>
   132f4:	mov	r0, #0
   132f8:	bl	11368 <dcgettext@plt>
   132fc:	mov	r1, #0
   13300:	mov	r2, r0
   13304:	mov	r0, #1
   13308:	bl	11440 <error@plt>
   1330c:	andeq	sp, r2, r8, lsl #1
   13310:	andeq	sp, r2, r8
   13314:	muleq	r2, r8, r0
   13318:	andeq	fp, r1, r4, ror #13
   1331c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13320:	sub	sp, sp, #20
   13324:	ldr	r6, [pc, #1452]	; 138d8 <__assert_fail@plt+0x224c>
   13328:	ldr	r8, [r6, #80]	; 0x50
   1332c:	ldrb	fp, [r6, #132]	; 0x84
   13330:	ldr	r3, [r6, #36]	; 0x24
   13334:	sub	r8, r8, #1
   13338:	ldr	r4, [r6, #112]	; 0x70
   1333c:	sub	r8, r8, r3
   13340:	cmp	fp, #0
   13344:	add	r8, r4, r8
   13348:	bne	134b0 <__assert_fail@plt+0x1e24>
   1334c:	ldr	r0, [r6, #120]	; 0x78
   13350:	bl	1165c <getc@plt>
   13354:	cmn	r0, #1
   13358:	mov	r5, r0
   1335c:	beq	13838 <__assert_fail@plt+0x21ac>
   13360:	bics	r3, r5, #127	; 0x7f
   13364:	mov	sl, #1
   13368:	mvn	r7, #0
   1336c:	ldr	r9, [pc, #1384]	; 138dc <__assert_fail@plt+0x2250>
   13370:	bne	133b8 <__assert_fail@plt+0x1d2c>
   13374:	bl	114ac <__ctype_b_loc@plt>
   13378:	lsl	r3, r5, #1
   1337c:	ldr	r2, [r0]
   13380:	ldrh	r3, [r2, r3]
   13384:	tst	r3, #1
   13388:	bne	13398 <__assert_fail@plt+0x1d0c>
   1338c:	cmp	r5, #13
   13390:	cmpne	r5, #10
   13394:	bne	133b8 <__assert_fail@plt+0x1d2c>
   13398:	ldr	r0, [r6, #120]	; 0x78
   1339c:	bl	1165c <getc@plt>
   133a0:	cmn	r0, #1
   133a4:	beq	13784 <__assert_fail@plt+0x20f8>
   133a8:	mov	r7, r5
   133ac:	mov	r5, r0
   133b0:	bics	r3, r5, #127	; 0x7f
   133b4:	beq	13374 <__assert_fail@plt+0x1ce8>
   133b8:	sub	r3, r5, #11
   133bc:	cmp	r3, #1
   133c0:	bls	13398 <__assert_fail@plt+0x1d0c>
   133c4:	cmp	r5, #10
   133c8:	beq	13434 <__assert_fail@plt+0x1da8>
   133cc:	ldr	r2, [r6, #92]	; 0x5c
   133d0:	cmp	r2, #0
   133d4:	beq	13658 <__assert_fail@plt+0x1fcc>
   133d8:	cmp	r5, #39	; 0x27
   133dc:	beq	13560 <__assert_fail@plt+0x1ed4>
   133e0:	cmp	r5, #92	; 0x5c
   133e4:	beq	13510 <__assert_fail@plt+0x1e84>
   133e8:	cmp	r5, #34	; 0x22
   133ec:	beq	13560 <__assert_fail@plt+0x1ed4>
   133f0:	cmp	r5, #0
   133f4:	bne	136f8 <__assert_fail@plt+0x206c>
   133f8:	ldr	r2, [r6, #140]	; 0x8c
   133fc:	cmp	r2, #0
   13400:	beq	13884 <__assert_fail@plt+0x21f8>
   13404:	cmp	r8, r4
   13408:	bls	13814 <__assert_fail@plt+0x2188>
   1340c:	strb	r5, [r4], #1
   13410:	ldr	r0, [r6, #120]	; 0x78
   13414:	bl	1165c <getc@plt>
   13418:	mov	r7, r5
   1341c:	mov	fp, #1
   13420:	cmn	r0, #1
   13424:	beq	13784 <__assert_fail@plt+0x20f8>
   13428:	mov	r5, r0
   1342c:	cmp	r5, #10
   13430:	bne	133cc <__assert_fail@plt+0x1d40>
   13434:	bics	r3, r7, #127	; 0x7f
   13438:	bne	13500 <__assert_fail@plt+0x1e74>
   1343c:	bl	114ac <__ctype_b_loc@plt>
   13440:	lsl	r7, r7, #1
   13444:	ldr	r3, [r0]
   13448:	ldrh	r3, [r3, r7]
   1344c:	tst	r3, #1
   13450:	beq	13500 <__assert_fail@plt+0x1e74>
   13454:	ldr	r7, [r6, #112]	; 0x70
   13458:	cmp	r7, r4
   1345c:	orrne	fp, fp, #1
   13460:	cmp	fp, #0
   13464:	beq	13398 <__assert_fail@plt+0x1d0c>
   13468:	ldr	r0, [r6, #136]	; 0x88
   1346c:	mov	r3, #0
   13470:	cmp	r0, r3
   13474:	strb	r3, [r4], #1
   13478:	sub	r4, r4, r7
   1347c:	beq	134c0 <__assert_fail@plt+0x1e34>
   13480:	ldrb	r2, [r0]
   13484:	ldrb	r3, [r7]
   13488:	cmp	r2, r3
   1348c:	bne	134c0 <__assert_fail@plt+0x1e34>
   13490:	mov	r1, r7
   13494:	bl	112cc <strcmp@plt>
   13498:	cmp	r0, #0
   1349c:	bne	134c0 <__assert_fail@plt+0x1e34>
   134a0:	mov	r3, #1
   134a4:	cmp	sl, #0
   134a8:	strb	r3, [r6, #132]	; 0x84
   134ac:	beq	134b4 <__assert_fail@plt+0x1e28>
   134b0:	mvn	r4, #0
   134b4:	mov	r0, r4
   134b8:	add	sp, sp, #20
   134bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134c0:	ldr	r3, [r6, #92]	; 0x5c
   134c4:	cmp	r3, #0
   134c8:	bne	134b4 <__assert_fail@plt+0x1e28>
   134cc:	ldr	r2, [pc, #1036]	; 138e0 <__assert_fail@plt+0x2254>
   134d0:	str	r3, [sp, #4]
   134d4:	ldr	r1, [pc, #1032]	; 138e4 <__assert_fail@plt+0x2258>
   134d8:	ldrb	r0, [r2, #4]
   134dc:	str	r3, [sp]
   134e0:	mov	r2, r7
   134e4:	str	r0, [sp, #8]
   134e8:	mov	r3, r4
   134ec:	add	r0, r1, #52	; 0x34
   134f0:	bl	1401c <__assert_fail@plt+0x2990>
   134f4:	mov	r0, r4
   134f8:	add	sp, sp, #20
   134fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13500:	ldr	r3, [r6, #128]	; 0x80
   13504:	add	r3, r3, #1
   13508:	str	r3, [r6, #128]	; 0x80
   1350c:	b	13454 <__assert_fail@plt+0x1dc8>
   13510:	ldr	r0, [r6, #120]	; 0x78
   13514:	bl	1165c <getc@plt>
   13518:	cmn	r0, #1
   1351c:	mov	r7, r0
   13520:	beq	13784 <__assert_fail@plt+0x20f8>
   13524:	cmp	r0, #0
   13528:	bne	13538 <__assert_fail@plt+0x1eac>
   1352c:	ldr	r3, [r6, #140]	; 0x8c
   13530:	cmp	r3, #0
   13534:	beq	13740 <__assert_fail@plt+0x20b4>
   13538:	cmp	r8, r4
   1353c:	bls	13814 <__assert_fail@plt+0x2188>
   13540:	ldr	r0, [r6, #120]	; 0x78
   13544:	strb	r7, [r4], #1
   13548:	bl	1165c <getc@plt>
   1354c:	cmn	r0, #1
   13550:	mov	r5, r0
   13554:	beq	13784 <__assert_fail@plt+0x20f8>
   13558:	mov	fp, #1
   1355c:	b	133c4 <__assert_fail@plt+0x1d38>
   13560:	ldr	r0, [r6, #120]	; 0x78
   13564:	bl	1165c <getc@plt>
   13568:	cmn	r0, #1
   1356c:	mov	r7, r0
   13570:	beq	135ac <__assert_fail@plt+0x1f20>
   13574:	cmp	r7, #10
   13578:	beq	135c8 <__assert_fail@plt+0x1f3c>
   1357c:	cmp	r5, r7
   13580:	beq	13720 <__assert_fail@plt+0x2094>
   13584:	cmp	r7, #0
   13588:	beq	1360c <__assert_fail@plt+0x1f80>
   1358c:	cmp	r8, r4
   13590:	bls	13814 <__assert_fail@plt+0x2188>
   13594:	strb	r7, [r4], #1
   13598:	ldr	r0, [r6, #120]	; 0x78
   1359c:	bl	1165c <getc@plt>
   135a0:	cmn	r0, #1
   135a4:	mov	r7, r0
   135a8:	bne	13574 <__assert_fail@plt+0x1ee8>
   135ac:	ldr	r2, [r6, #112]	; 0x70
   135b0:	mov	r3, #1
   135b4:	cmp	r4, r2
   135b8:	strb	r3, [r6, #132]	; 0x84
   135bc:	beq	134b0 <__assert_fail@plt+0x1e24>
   135c0:	mov	r3, #0
   135c4:	strb	r3, [r4]
   135c8:	bl	13184 <__assert_fail@plt+0x1af8>
   135cc:	ldr	r1, [pc, #788]	; 138e8 <__assert_fail@plt+0x225c>
   135d0:	mov	r2, #5
   135d4:	mov	r0, #0
   135d8:	bl	11368 <dcgettext@plt>
   135dc:	cmp	r5, #34	; 0x22
   135e0:	mov	r2, #5
   135e4:	ldreq	r1, [pc, #768]	; 138ec <__assert_fail@plt+0x2260>
   135e8:	ldrne	r1, [pc, #768]	; 138f0 <__assert_fail@plt+0x2264>
   135ec:	mov	r4, r0
   135f0:	mov	r0, #0
   135f4:	bl	11368 <dcgettext@plt>
   135f8:	mov	r2, r4
   135fc:	mov	r1, #0
   13600:	mov	r3, r0
   13604:	mov	r0, #1
   13608:	bl	11440 <error@plt>
   1360c:	ldr	r3, [r6, #140]	; 0x8c
   13610:	cmp	r3, #0
   13614:	beq	137e4 <__assert_fail@plt+0x2158>
   13618:	cmp	r8, r4
   1361c:	bls	13814 <__assert_fail@plt+0x2188>
   13620:	strb	r7, [r4], #1
   13624:	ldr	r0, [r6, #120]	; 0x78
   13628:	bl	1165c <getc@plt>
   1362c:	cmn	r0, #1
   13630:	mov	r7, r0
   13634:	bne	13574 <__assert_fail@plt+0x1ee8>
   13638:	ldr	r2, [r6, #112]	; 0x70
   1363c:	mov	r3, #1
   13640:	cmp	r4, r2
   13644:	strb	r3, [r6, #132]	; 0x84
   13648:	beq	134b0 <__assert_fail@plt+0x1e24>
   1364c:	mov	r3, #0
   13650:	strb	r3, [r4]
   13654:	b	135c8 <__assert_fail@plt+0x1f3c>
   13658:	bics	r7, r5, #127	; 0x7f
   1365c:	bne	133d8 <__assert_fail@plt+0x1d4c>
   13660:	bl	114ac <__ctype_b_loc@plt>
   13664:	lsl	r2, r5, #1
   13668:	ldr	r1, [r0]
   1366c:	ldrh	r2, [r1, r2]
   13670:	tst	r2, #1
   13674:	beq	133d8 <__assert_fail@plt+0x1d4c>
   13678:	ldr	r0, [r6, #136]	; 0x88
   1367c:	ldr	fp, [r6, #112]	; 0x70
   13680:	cmp	r0, #0
   13684:	strb	r7, [r4], #1
   13688:	sub	r4, r4, fp
   1368c:	beq	136b0 <__assert_fail@plt+0x2024>
   13690:	ldrb	r2, [r0]
   13694:	ldrb	r3, [fp]
   13698:	cmp	r2, r3
   1369c:	bne	136b0 <__assert_fail@plt+0x2024>
   136a0:	mov	r1, fp
   136a4:	bl	112cc <strcmp@plt>
   136a8:	cmp	r0, #0
   136ac:	beq	134a0 <__assert_fail@plt+0x1e14>
   136b0:	ldr	r3, [pc, #552]	; 138e0 <__assert_fail@plt+0x2254>
   136b4:	mov	sl, #0
   136b8:	mov	r2, fp
   136bc:	ldrb	r1, [r3, #4]
   136c0:	mov	r3, r4
   136c4:	str	sl, [sp, #4]
   136c8:	str	r1, [sp, #8]
   136cc:	ldr	r1, [pc, #528]	; 138e4 <__assert_fail@plt+0x2258>
   136d0:	str	sl, [sp]
   136d4:	add	r0, r1, #52	; 0x34
   136d8:	bl	1401c <__assert_fail@plt+0x2990>
   136dc:	ldr	r0, [r6, #120]	; 0x78
   136e0:	ldr	r4, [r6, #112]	; 0x70
   136e4:	bl	1165c <getc@plt>
   136e8:	cmn	r0, #1
   136ec:	beq	138b8 <__assert_fail@plt+0x222c>
   136f0:	mov	fp, #1
   136f4:	b	133a8 <__assert_fail@plt+0x1d1c>
   136f8:	cmp	r8, r4
   136fc:	bls	13814 <__assert_fail@plt+0x2188>
   13700:	ldr	r0, [r6, #120]	; 0x78
   13704:	strb	r5, [r4], #1
   13708:	bl	1165c <getc@plt>
   1370c:	cmn	r0, #1
   13710:	beq	13784 <__assert_fail@plt+0x20f8>
   13714:	mov	r7, r5
   13718:	mov	r5, r0
   1371c:	b	13558 <__assert_fail@plt+0x1ecc>
   13720:	ldr	r0, [r6, #120]	; 0x78
   13724:	bl	1165c <getc@plt>
   13728:	cmn	r0, #1
   1372c:	beq	13784 <__assert_fail@plt+0x20f8>
   13730:	mov	r7, r5
   13734:	mov	fp, #1
   13738:	mov	r5, r0
   1373c:	b	133c4 <__assert_fail@plt+0x1d38>
   13740:	mov	r2, #5
   13744:	mov	r1, r9
   13748:	bl	11368 <dcgettext@plt>
   1374c:	mov	r1, r7
   13750:	mov	fp, #1
   13754:	mov	r2, r0
   13758:	mov	r0, r7
   1375c:	bl	11440 <error@plt>
   13760:	cmp	r8, r4
   13764:	str	fp, [r6, #140]	; 0x8c
   13768:	bls	13814 <__assert_fail@plt+0x2188>
   1376c:	ldr	r0, [r6, #120]	; 0x78
   13770:	strb	r7, [r4], #1
   13774:	bl	1165c <getc@plt>
   13778:	cmn	r0, #1
   1377c:	mov	r5, r0
   13780:	bne	133c4 <__assert_fail@plt+0x1d38>
   13784:	ldr	r5, [r6, #112]	; 0x70
   13788:	mov	r3, #1
   1378c:	cmp	r4, r5
   13790:	strb	r3, [r6, #132]	; 0x84
   13794:	movne	r3, #0
   13798:	strbne	r3, [r4], #1
   1379c:	subne	r4, r4, r5
   137a0:	beq	134b0 <__assert_fail@plt+0x1e24>
   137a4:	cmp	sl, #0
   137a8:	bne	13854 <__assert_fail@plt+0x21c8>
   137ac:	ldr	r3, [r6, #92]	; 0x5c
   137b0:	cmp	r3, #0
   137b4:	bne	134b4 <__assert_fail@plt+0x1e28>
   137b8:	ldr	r2, [pc, #288]	; 138e0 <__assert_fail@plt+0x2254>
   137bc:	str	r3, [sp, #4]
   137c0:	ldr	r1, [pc, #284]	; 138e4 <__assert_fail@plt+0x2258>
   137c4:	ldrb	r0, [r2, #4]
   137c8:	str	r3, [sp]
   137cc:	mov	r2, r5
   137d0:	str	r0, [sp, #8]
   137d4:	mov	r3, r4
   137d8:	add	r0, r1, #52	; 0x34
   137dc:	bl	1401c <__assert_fail@plt+0x2990>
   137e0:	b	134b4 <__assert_fail@plt+0x1e28>
   137e4:	mov	r2, #5
   137e8:	mov	r1, r9
   137ec:	mov	r0, r7
   137f0:	bl	11368 <dcgettext@plt>
   137f4:	mov	r1, r7
   137f8:	mov	r2, r0
   137fc:	mov	r0, r7
   13800:	bl	11440 <error@plt>
   13804:	mov	r3, #1
   13808:	cmp	r8, r4
   1380c:	str	r3, [r6, #140]	; 0x8c
   13810:	bhi	13594 <__assert_fail@plt+0x1f08>
   13814:	bl	13184 <__assert_fail@plt+0x1af8>
   13818:	mov	r2, #5
   1381c:	ldr	r1, [pc, #208]	; 138f4 <__assert_fail@plt+0x2268>
   13820:	mov	r0, #0
   13824:	bl	11368 <dcgettext@plt>
   13828:	mov	r1, #0
   1382c:	mov	r2, r0
   13830:	mov	r0, #1
   13834:	bl	11440 <error@plt>
   13838:	ldr	r5, [r6, #112]	; 0x70
   1383c:	mov	r3, #1
   13840:	cmp	r5, r4
   13844:	strb	r3, [r6, #132]	; 0x84
   13848:	beq	134b0 <__assert_fail@plt+0x1e24>
   1384c:	strb	fp, [r4], #1
   13850:	sub	r4, r4, r5
   13854:	ldr	r0, [r6, #136]	; 0x88
   13858:	cmp	r0, #0
   1385c:	beq	137ac <__assert_fail@plt+0x2120>
   13860:	ldrb	r2, [r0]
   13864:	ldrb	r3, [r5]
   13868:	cmp	r2, r3
   1386c:	bne	137ac <__assert_fail@plt+0x2120>
   13870:	mov	r1, r5
   13874:	bl	112cc <strcmp@plt>
   13878:	cmp	r0, #0
   1387c:	bne	137ac <__assert_fail@plt+0x2120>
   13880:	b	134b0 <__assert_fail@plt+0x1e24>
   13884:	mov	r2, #5
   13888:	mov	r1, r9
   1388c:	mov	r0, r5
   13890:	bl	11368 <dcgettext@plt>
   13894:	mov	r1, r5
   13898:	mov	r2, r0
   1389c:	mov	r0, r5
   138a0:	bl	11440 <error@plt>
   138a4:	mov	r3, #1
   138a8:	cmp	r8, r4
   138ac:	str	r3, [r6, #140]	; 0x8c
   138b0:	bhi	13700 <__assert_fail@plt+0x2074>
   138b4:	b	13814 <__assert_fail@plt+0x2188>
   138b8:	ldr	r5, [r6, #112]	; 0x70
   138bc:	mov	r3, #1
   138c0:	cmp	r4, r5
   138c4:	strbne	sl, [r4], #1
   138c8:	strb	r3, [r6, #132]	; 0x84
   138cc:	subne	r4, r4, r5
   138d0:	bne	137ac <__assert_fail@plt+0x2120>
   138d4:	b	134b0 <__assert_fail@plt+0x1e24>
   138d8:	andeq	sp, r2, r8, lsl #1
   138dc:	andeq	fp, r1, r4, ror #14
   138e0:	andeq	sp, r2, r8
   138e4:	muleq	r2, r8, r0
   138e8:	strdeq	fp, [r1], -ip
   138ec:	andeq	fp, r1, r4, asr r7
   138f0:	andeq	fp, r1, ip, asr r7
   138f4:	andeq	fp, r1, r4, ror #13
   138f8:	push	{r4, r5, r6, lr}
   138fc:	bl	114b8 <getpid@plt>
   13900:	ldr	r4, [pc, #88]	; 13960 <__assert_fail@plt+0x22d4>
   13904:	ldr	r3, [r4, #144]	; 0x90
   13908:	cmp	r0, r3
   1390c:	bne	1394c <__assert_fail@plt+0x22c0>
   13910:	ldrb	r5, [r4, #148]	; 0x94
   13914:	cmp	r5, #0
   13918:	popne	{r4, r5, r6, pc}
   1391c:	mov	r3, #1
   13920:	mov	r0, r3
   13924:	mov	r1, r5
   13928:	strb	r3, [r4, #148]	; 0x94
   1392c:	bl	128ec <__assert_fail@plt+0x1260>
   13930:	ldr	r2, [r4, #152]	; 0x98
   13934:	ldr	r3, [r4, #60]	; 0x3c
   13938:	strb	r5, [r4, #148]	; 0x94
   1393c:	cmp	r2, r3
   13940:	popeq	{r4, r5, r6, pc}
   13944:	ldr	r0, [r4, #60]	; 0x3c
   13948:	bl	11320 <_exit@plt>
   1394c:	ldr	r3, [pc, #16]	; 13964 <__assert_fail@plt+0x22d8>
   13950:	ldr	r2, [pc, #16]	; 13968 <__assert_fail@plt+0x22dc>
   13954:	ldr	r1, [pc, #16]	; 1396c <__assert_fail@plt+0x22e0>
   13958:	ldr	r0, [pc, #16]	; 13970 <__assert_fail@plt+0x22e4>
   1395c:	bl	1168c <__assert_fail@plt>
   13960:	andeq	sp, r2, r8, lsl #1
   13964:	andeq	sl, r1, r4, ror #17
   13968:	andeq	r0, r0, r1, lsl r6
   1396c:	andeq	sl, r1, r0, lsl #22
   13970:	strdeq	fp, [r1], -r0
   13974:	push	{r4, r5, r6, r7, r8, lr}
   13978:	mov	r8, r0
   1397c:	ldr	r5, [pc, #348]	; 13ae0 <__assert_fail@plt+0x2454>
   13980:	ldr	r3, [r5, #16]
   13984:	cmp	r3, #1
   13988:	beq	139cc <__assert_fail@plt+0x2340>
   1398c:	ldr	r7, [pc, #336]	; 13ae4 <__assert_fail@plt+0x2458>
   13990:	ldr	r6, [pc, #336]	; 13ae8 <__assert_fail@plt+0x245c>
   13994:	mov	r4, #0
   13998:	ldr	r3, [r5, #20]
   1399c:	mov	r2, r6
   139a0:	mov	r1, #1
   139a4:	ldr	r3, [r3, r4, lsl #2]
   139a8:	ldr	r0, [r7]
   139ac:	bl	11554 <__fprintf_chk@plt>
   139b0:	cmp	r0, #0
   139b4:	blt	13aa8 <__assert_fail@plt+0x241c>
   139b8:	ldr	r3, [r5, #16]
   139bc:	add	r4, r4, #1
   139c0:	sub	r3, r3, #1
   139c4:	cmp	r3, r4
   139c8:	bhi	13998 <__assert_fail@plt+0x230c>
   139cc:	cmp	r8, #0
   139d0:	beq	13a50 <__assert_fail@plt+0x23c4>
   139d4:	ldr	r3, [r5, #156]	; 0x9c
   139d8:	cmp	r3, #0
   139dc:	beq	13a68 <__assert_fail@plt+0x23dc>
   139e0:	ldr	r4, [pc, #252]	; 13ae4 <__assert_fail@plt+0x2458>
   139e4:	mov	r2, #4
   139e8:	mov	r1, #1
   139ec:	ldr	r3, [r4]
   139f0:	ldr	r0, [pc, #244]	; 13aec <__assert_fail@plt+0x2460>
   139f4:	bl	113ec <fwrite@plt>
   139f8:	ldr	r0, [r4]
   139fc:	bl	1a078 <__assert_fail@plt+0x89ec>
   13a00:	cmp	r0, #0
   13a04:	bne	13aa8 <__assert_fail@plt+0x241c>
   13a08:	ldr	r0, [r5, #156]	; 0x9c
   13a0c:	bl	1165c <getc@plt>
   13a10:	cmp	r0, #10
   13a14:	cmnne	r0, #1
   13a18:	mov	r4, r0
   13a1c:	beq	13a34 <__assert_fail@plt+0x23a8>
   13a20:	ldr	r0, [r5, #156]	; 0x9c
   13a24:	bl	1165c <getc@plt>
   13a28:	cmp	r0, #10
   13a2c:	cmnne	r0, #1
   13a30:	bne	13a20 <__assert_fail@plt+0x2394>
   13a34:	cmn	r0, #1
   13a38:	beq	13ad0 <__assert_fail@plt+0x2444>
   13a3c:	bic	r0, r4, #32
   13a40:	sub	r0, r0, #89	; 0x59
   13a44:	clz	r0, r0
   13a48:	lsr	r0, r0, #5
   13a4c:	pop	{r4, r5, r6, r7, r8, pc}
   13a50:	ldr	r3, [pc, #140]	; 13ae4 <__assert_fail@plt+0x2458>
   13a54:	mov	r0, #10
   13a58:	ldr	r1, [r3]
   13a5c:	bl	115fc <putc@plt>
   13a60:	mov	r0, r8
   13a64:	pop	{r4, r5, r6, r7, r8, pc}
   13a68:	ldr	r0, [pc, #128]	; 13af0 <__assert_fail@plt+0x2464>
   13a6c:	bl	12c90 <__assert_fail@plt+0x1604>
   13a70:	cmp	r0, #0
   13a74:	mov	r4, r0
   13a78:	str	r0, [r5, #156]	; 0x9c
   13a7c:	bne	139e0 <__assert_fail@plt+0x2354>
   13a80:	bl	11500 <__errno_location@plt>
   13a84:	mov	r2, #5
   13a88:	ldr	r1, [pc, #100]	; 13af4 <__assert_fail@plt+0x2468>
   13a8c:	ldr	r5, [r0]
   13a90:	mov	r0, r4
   13a94:	bl	11368 <dcgettext@plt>
   13a98:	mov	r1, r5
   13a9c:	mov	r2, r0
   13aa0:	mov	r0, #1
   13aa4:	bl	11440 <error@plt>
   13aa8:	bl	11500 <__errno_location@plt>
   13aac:	ldr	r1, [pc, #68]	; 13af8 <__assert_fail@plt+0x246c>
   13ab0:	mov	r2, #5
   13ab4:	ldr	r4, [r0]
   13ab8:	mov	r0, #0
   13abc:	bl	11368 <dcgettext@plt>
   13ac0:	mov	r1, r4
   13ac4:	mov	r2, r0
   13ac8:	mov	r0, #1
   13acc:	bl	11440 <error@plt>
   13ad0:	bl	11500 <__errno_location@plt>
   13ad4:	mov	r2, #5
   13ad8:	ldr	r1, [pc, #28]	; 13afc <__assert_fail@plt+0x2470>
   13adc:	b	13ab4 <__assert_fail@plt+0x2428>
   13ae0:	andeq	sp, r2, r8, lsl #1
   13ae4:	andeq	sp, r2, r0, ror r0
   13ae8:	andeq	fp, r1, r4, lsl #16
   13aec:	andeq	fp, r1, r4, asr r8
   13af0:	andeq	fp, r1, r4, lsr #16
   13af4:	andeq	fp, r1, r0, lsr r8
   13af8:	andeq	fp, r1, r8, lsl #16
   13afc:	andeq	fp, r1, ip, asr r8
   13b00:	push	{r4, r5, r6, r7, r8, r9, lr}
   13b04:	mov	r7, r3
   13b08:	ldr	r6, [pc, #1056]	; 13f30 <__assert_fail@plt+0x28a4>
   13b0c:	ldr	r5, [pc, #1056]	; 13f34 <__assert_fail@plt+0x28a8>
   13b10:	sub	sp, sp, #52	; 0x34
   13b14:	ldr	r3, [r6]
   13b18:	ldr	r4, [pc, #1048]	; 13f38 <__assert_fail@plt+0x28ac>
   13b1c:	str	r3, [sp, #44]	; 0x2c
   13b20:	ldr	r3, [r5]
   13b24:	cmp	r3, #0
   13b28:	beq	13b58 <__assert_fail@plt+0x24cc>
   13b2c:	ldr	r2, [r5]
   13b30:	ldr	r3, [r4, #4]
   13b34:	cmp	r2, r3
   13b38:	bhi	13b58 <__assert_fail@plt+0x24cc>
   13b3c:	mov	r1, #1
   13b40:	mov	r0, #0
   13b44:	bl	128ec <__assert_fail@plt+0x1260>
   13b48:	ldr	r3, [r5]
   13b4c:	ldr	r2, [r4, #4]
   13b50:	cmp	r2, r3
   13b54:	bcs	13b3c <__assert_fail@plt+0x24b0>
   13b58:	ldrb	r3, [r4, #160]	; 0xa0
   13b5c:	cmp	r3, #0
   13b60:	bne	13ca8 <__assert_fail@plt+0x261c>
   13b64:	ldrb	r3, [r4, #161]	; 0xa1
   13b68:	cmp	r3, #0
   13b6c:	bne	13cfc <__assert_fail@plt+0x2670>
   13b70:	mov	r1, #0
   13b74:	mov	r0, r1
   13b78:	bl	128ec <__assert_fail@plt+0x1260>
   13b7c:	add	r0, sp, #16
   13b80:	bl	11584 <pipe@plt>
   13b84:	subs	r8, r0, #0
   13b88:	bne	13e90 <__assert_fail@plt+0x2804>
   13b8c:	mov	r2, #1
   13b90:	mov	r1, #2
   13b94:	ldr	r0, [sp, #20]
   13b98:	bl	19e70 <__assert_fail@plt+0x87e4>
   13b9c:	b	13bc8 <__assert_fail@plt+0x253c>
   13ba0:	bl	11500 <__errno_location@plt>
   13ba4:	ldr	r3, [r0]
   13ba8:	cmp	r3, #11
   13bac:	bne	13bd4 <__assert_fail@plt+0x2548>
   13bb0:	ldr	r3, [r4, #4]
   13bb4:	cmp	r3, #0
   13bb8:	beq	13bd4 <__assert_fail@plt+0x2548>
   13bbc:	mov	r1, #1
   13bc0:	mov	r0, #0
   13bc4:	bl	128ec <__assert_fail@plt+0x1260>
   13bc8:	bl	115c0 <fork@plt>
   13bcc:	subs	r5, r0, #0
   13bd0:	blt	13ba0 <__assert_fail@plt+0x2514>
   13bd4:	cmn	r5, #1
   13bd8:	beq	13e3c <__assert_fail@plt+0x27b0>
   13bdc:	cmp	r5, #0
   13be0:	beq	13d18 <__assert_fail@plt+0x268c>
   13be4:	ldr	r0, [sp, #20]
   13be8:	bl	11668 <close@plt>
   13bec:	mov	r2, #4
   13bf0:	add	r1, sp, #8
   13bf4:	ldr	r0, [sp, #16]
   13bf8:	bl	18f70 <__assert_fail@plt+0x78e4>
   13bfc:	cmp	r0, #4
   13c00:	mov	r4, r0
   13c04:	beq	13cc8 <__assert_fail@plt+0x263c>
   13c08:	cmn	r0, #1
   13c0c:	beq	13c74 <__assert_fail@plt+0x25e8>
   13c10:	cmp	r0, #0
   13c14:	beq	13c44 <__assert_fail@plt+0x25b8>
   13c18:	bl	11500 <__errno_location@plt>
   13c1c:	mov	r2, #5
   13c20:	ldr	r1, [pc, #788]	; 13f3c <__assert_fail@plt+0x28b0>
   13c24:	ldr	r5, [r0]
   13c28:	mov	r0, #0
   13c2c:	bl	11368 <dcgettext@plt>
   13c30:	mov	r3, r4
   13c34:	mov	r1, r5
   13c38:	mov	r2, r0
   13c3c:	mov	r0, #1
   13c40:	bl	11440 <error@plt>
   13c44:	mov	r0, r5
   13c48:	bl	12b64 <__assert_fail@plt+0x14d8>
   13c4c:	ldr	r0, [sp, #16]
   13c50:	bl	11668 <close@plt>
   13c54:	mov	r8, #1
   13c58:	ldr	r2, [sp, #44]	; 0x2c
   13c5c:	ldr	r3, [r6]
   13c60:	mov	r0, r8
   13c64:	cmp	r2, r3
   13c68:	bne	13ea0 <__assert_fail@plt+0x2814>
   13c6c:	add	sp, sp, #52	; 0x34
   13c70:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13c74:	ldr	r0, [sp, #16]
   13c78:	bl	11668 <close@plt>
   13c7c:	bl	11500 <__errno_location@plt>
   13c80:	mov	r2, #5
   13c84:	ldr	r1, [pc, #692]	; 13f40 <__assert_fail@plt+0x28b4>
   13c88:	ldr	r4, [r0]
   13c8c:	mov	r0, #0
   13c90:	bl	11368 <dcgettext@plt>
   13c94:	mov	r1, r4
   13c98:	mov	r2, r0
   13c9c:	mov	r0, #0
   13ca0:	bl	11440 <error@plt>
   13ca4:	b	13c4c <__assert_fail@plt+0x25c0>
   13ca8:	mov	r0, #1
   13cac:	bl	13974 <__assert_fail@plt+0x22e8>
   13cb0:	cmp	r0, #0
   13cb4:	beq	13d08 <__assert_fail@plt+0x267c>
   13cb8:	ldrb	r3, [r4, #160]	; 0xa0
   13cbc:	cmp	r3, #0
   13cc0:	bne	13b70 <__assert_fail@plt+0x24e4>
   13cc4:	b	13b64 <__assert_fail@plt+0x24d8>
   13cc8:	ldr	r0, [sp, #16]
   13ccc:	bl	11668 <close@plt>
   13cd0:	mov	r0, r5
   13cd4:	mov	r2, #0
   13cd8:	add	r1, sp, #12
   13cdc:	bl	11404 <waitpid@plt>
   13ce0:	ldr	r3, [sp, #8]
   13ce4:	cmp	r3, #7
   13ce8:	beq	13c58 <__assert_fail@plt+0x25cc>
   13cec:	cmp	r3, #2
   13cf0:	beq	13d10 <__assert_fail@plt+0x2684>
   13cf4:	mov	r0, #126	; 0x7e
   13cf8:	bl	114c4 <exit@plt>
   13cfc:	mov	r0, #0
   13d00:	bl	13974 <__assert_fail@plt+0x22e8>
   13d04:	b	13b70 <__assert_fail@plt+0x24e4>
   13d08:	mov	r8, #1
   13d0c:	b	13c58 <__assert_fail@plt+0x25cc>
   13d10:	mov	r0, #127	; 0x7f
   13d14:	bl	114c4 <exit@plt>
   13d18:	ldr	r0, [sp, #16]
   13d1c:	bl	11668 <close@plt>
   13d20:	str	r5, [r4, #60]	; 0x3c
   13d24:	bl	14eb8 <__assert_fail@plt+0x382c>
   13d28:	mov	r0, r5
   13d2c:	bl	12b64 <__assert_fail@plt+0x14d8>
   13d30:	ldr	r3, [pc, #524]	; 13f44 <__assert_fail@plt+0x28b8>
   13d34:	mov	r2, #1
   13d38:	str	r3, [sp]
   13d3c:	mov	r1, #19
   13d40:	mov	r3, #20
   13d44:	str	r0, [sp, #4]
   13d48:	add	r0, sp, #24
   13d4c:	bl	11680 <__snprintf_chk@plt>
   13d50:	bl	11500 <__errno_location@plt>
   13d54:	ldr	r8, [r4, #164]	; 0xa4
   13d58:	cmp	r8, #0
   13d5c:	mov	r6, r0
   13d60:	beq	13d7c <__assert_fail@plt+0x26f0>
   13d64:	add	r1, sp, #24
   13d68:	mov	r2, #1
   13d6c:	mov	r0, r8
   13d70:	bl	114f4 <setenv@plt>
   13d74:	cmp	r0, #0
   13d78:	blt	13e64 <__assert_fail@plt+0x27d8>
   13d7c:	ldr	r2, [r4, #172]	; 0xac
   13d80:	ldrb	r3, [r4, #168]	; 0xa8
   13d84:	cmp	r2, #0
   13d88:	beq	13ea4 <__assert_fail@plt+0x2818>
   13d8c:	cmp	r3, #0
   13d90:	beq	13ddc <__assert_fail@plt+0x2750>
   13d94:	ldr	r5, [pc, #428]	; 13f48 <__assert_fail@plt+0x28bc>
   13d98:	mov	r0, #0
   13d9c:	bl	11668 <close@plt>
   13da0:	mov	r1, #0
   13da4:	mov	r0, r5
   13da8:	bl	11458 <open64@plt>
   13dac:	subs	r8, r0, #0
   13db0:	blt	13eb8 <__assert_fail@plt+0x282c>
   13db4:	beq	13ddc <__assert_fail@plt+0x2750>
   13db8:	mov	r1, #0
   13dbc:	bl	1138c <dup2@plt>
   13dc0:	cmp	r0, #0
   13dc4:	movne	r2, #5
   13dc8:	ldrne	r4, [r6]
   13dcc:	ldrne	r1, [pc, #376]	; 13f4c <__assert_fail@plt+0x28c0>
   13dd0:	bne	13e4c <__assert_fail@plt+0x27c0>
   13dd4:	mov	r0, r8
   13dd8:	bl	11668 <close@plt>
   13ddc:	mov	r0, r7
   13de0:	bl	1494c <__assert_fail@plt+0x32c0>
   13de4:	cmp	r0, #0
   13de8:	beq	13ef8 <__assert_fail@plt+0x286c>
   13dec:	mov	r3, #7
   13df0:	str	r3, [r6]
   13df4:	mov	r2, #4
   13df8:	mov	r1, r6
   13dfc:	ldr	r0, [sp, #20]
   13e00:	bl	1153c <write@plt>
   13e04:	ldr	r0, [sp, #20]
   13e08:	bl	11668 <close@plt>
   13e0c:	ldr	r1, [r6]
   13e10:	cmp	r1, #7
   13e14:	beq	13ef0 <__assert_fail@plt+0x2864>
   13e18:	ldr	r3, [r7]
   13e1c:	ldr	r2, [pc, #300]	; 13f50 <__assert_fail@plt+0x28c4>
   13e20:	mov	r0, #0
   13e24:	bl	11440 <error@plt>
   13e28:	ldr	r3, [r6]
   13e2c:	cmp	r3, #2
   13e30:	bne	13ef0 <__assert_fail@plt+0x2864>
   13e34:	mov	r0, #127	; 0x7f
   13e38:	bl	11320 <_exit@plt>
   13e3c:	bl	11500 <__errno_location@plt>
   13e40:	ldr	r1, [pc, #268]	; 13f54 <__assert_fail@plt+0x28c8>
   13e44:	mov	r2, #5
   13e48:	ldr	r4, [r0]
   13e4c:	mov	r0, #0
   13e50:	bl	11368 <dcgettext@plt>
   13e54:	mov	r1, r4
   13e58:	mov	r2, r0
   13e5c:	mov	r0, #1
   13e60:	bl	11440 <error@plt>
   13e64:	mov	r2, #5
   13e68:	ldr	r1, [pc, #232]	; 13f58 <__assert_fail@plt+0x28cc>
   13e6c:	mov	r0, r5
   13e70:	ldr	r9, [r6]
   13e74:	bl	11368 <dcgettext@plt>
   13e78:	mov	r3, r8
   13e7c:	mov	r1, r9
   13e80:	mov	r2, r0
   13e84:	mov	r0, r5
   13e88:	bl	11440 <error@plt>
   13e8c:	b	13d7c <__assert_fail@plt+0x26f0>
   13e90:	bl	11500 <__errno_location@plt>
   13e94:	mov	r2, #5
   13e98:	ldr	r1, [pc, #188]	; 13f5c <__assert_fail@plt+0x28d0>
   13e9c:	b	13e48 <__assert_fail@plt+0x27bc>
   13ea0:	bl	11374 <__stack_chk_fail@plt>
   13ea4:	ldr	r2, [pc, #180]	; 13f60 <__assert_fail@plt+0x28d4>
   13ea8:	cmp	r3, #0
   13eac:	ldr	r5, [pc, #148]	; 13f48 <__assert_fail@plt+0x28bc>
   13eb0:	moveq	r5, r2
   13eb4:	b	13d98 <__assert_fail@plt+0x270c>
   13eb8:	ldrb	r4, [r4, #168]	; 0xa8
   13ebc:	ldr	r8, [r6]
   13ec0:	mov	r2, r5
   13ec4:	cmp	r4, #0
   13ec8:	mov	r1, #8
   13ecc:	bne	13f14 <__assert_fail@plt+0x2888>
   13ed0:	mov	r0, r4
   13ed4:	bl	18bfc <__assert_fail@plt+0x7570>
   13ed8:	mov	r1, r8
   13edc:	ldr	r2, [pc, #108]	; 13f50 <__assert_fail@plt+0x28c4>
   13ee0:	mov	r3, r0
   13ee4:	mov	r0, r4
   13ee8:	bl	11440 <error@plt>
   13eec:	b	13ddc <__assert_fail@plt+0x2750>
   13ef0:	mov	r0, #126	; 0x7e
   13ef4:	b	13e38 <__assert_fail@plt+0x27ac>
   13ef8:	mov	r1, r7
   13efc:	ldr	r0, [r7]
   13f00:	bl	11338 <execvp@plt>
   13f04:	ldr	r3, [r6]
   13f08:	cmp	r3, #0
   13f0c:	beq	13e04 <__assert_fail@plt+0x2778>
   13f10:	b	13df4 <__assert_fail@plt+0x2768>
   13f14:	mov	r0, #0
   13f18:	bl	18bfc <__assert_fail@plt+0x7570>
   13f1c:	mov	r1, r8
   13f20:	ldr	r2, [pc, #40]	; 13f50 <__assert_fail@plt+0x28c4>
   13f24:	mov	r3, r0
   13f28:	mov	r0, #1
   13f2c:	bl	11440 <error@plt>
   13f30:	muleq	r2, r8, sp
   13f34:	andeq	sp, r2, r8
   13f38:	andeq	sp, r2, r8, lsl #1
   13f3c:	andeq	fp, r1, r4, ror r9
   13f40:	andeq	fp, r1, r8, lsl r9
   13f44:			; <UNDEFINED> instruction: 0x0001b8b4
   13f48:	andeq	fp, r1, r4, lsr #16
   13f4c:	andeq	fp, r1, r0, ror #17
   13f50:	andeq	ip, r1, r0, lsr r6
   13f54:	andeq	fp, r1, r8, lsr #17
   13f58:			; <UNDEFINED> instruction: 0x0001b8b8
   13f5c:	andeq	fp, r1, r4, lsl #17
   13f60:	andeq	fp, r1, r8, ror r8
   13f64:	mov	r0, #0
   13f68:	bx	lr
   13f6c:	push	{r4, r5, r6, r7, lr}
   13f70:	sub	sp, sp, #28
   13f74:	ldr	r4, [pc, #152]	; 14014 <__assert_fail@plt+0x2988>
   13f78:	mov	r5, r1
   13f7c:	mov	r7, r0
   13f80:	ldr	r3, [r4]
   13f84:	str	r3, [sp, #20]
   13f88:	bl	11464 <getenv@plt>
   13f8c:	subs	r3, r0, #0
   13f90:	beq	13fdc <__assert_fail@plt+0x2950>
   13f94:	mov	r6, #0
   13f98:	str	r6, [sp]
   13f9c:	add	r3, sp, #16
   13fa0:	mov	r2, #10
   13fa4:	add	r1, sp, #12
   13fa8:	bl	19824 <__assert_fail@plt+0x8198>
   13fac:	cmp	r0, r6
   13fb0:	bne	13fe8 <__assert_fail@plt+0x295c>
   13fb4:	ldr	r0, [sp, #16]
   13fb8:	cmp	r0, r5
   13fbc:	movcs	r0, #0
   13fc0:	movcc	r0, #1
   13fc4:	ldr	r2, [sp, #20]
   13fc8:	ldr	r3, [r4]
   13fcc:	cmp	r2, r3
   13fd0:	bne	13fe4 <__assert_fail@plt+0x2958>
   13fd4:	add	sp, sp, #28
   13fd8:	pop	{r4, r5, r6, r7, pc}
   13fdc:	mov	r0, r3
   13fe0:	b	13fc4 <__assert_fail@plt+0x2938>
   13fe4:	bl	11374 <__stack_chk_fail@plt>
   13fe8:	bl	11500 <__errno_location@plt>
   13fec:	mov	r2, #5
   13ff0:	ldr	r1, [pc, #32]	; 14018 <__assert_fail@plt+0x298c>
   13ff4:	ldr	r4, [r0]
   13ff8:	mov	r0, r6
   13ffc:	bl	11368 <dcgettext@plt>
   14000:	mov	r3, r7
   14004:	mov	r1, r4
   14008:	mov	r2, r0
   1400c:	mov	r0, #1
   14010:	bl	11440 <error@plt>
   14014:	muleq	r2, r8, sp
   14018:	andeq	ip, r1, r0, asr r1
   1401c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14020:	subs	r9, r2, #0
   14024:	ldr	r8, [sp, #36]	; 0x24
   14028:	ldr	r6, [sp, #40]	; 0x28
   1402c:	beq	1425c <__assert_fail@plt+0x2bd0>
   14030:	ldr	sl, [pc, #612]	; 1429c <__assert_fail@plt+0x2c10>
   14034:	mov	r5, r0
   14038:	cmp	r9, sl
   1403c:	mov	r4, r1
   14040:	mov	r7, r3
   14044:	beq	140ec <__assert_fail@plt+0x2a60>
   14048:	ldr	r3, [r1, #16]
   1404c:	add	r2, r7, r8
   14050:	ldr	r1, [r0, #12]
   14054:	add	r2, r2, r3
   14058:	cmp	r2, r1
   1405c:	bls	141d4 <__assert_fail@plt+0x2b48>
   14060:	cmp	r6, #0
   14064:	bne	14270 <__assert_fail@plt+0x2be4>
   14068:	ldr	r2, [r4]
   1406c:	ldr	r3, [r0, #28]
   14070:	cmp	r2, r3
   14074:	beq	14270 <__assert_fail@plt+0x2be4>
   14078:	ldr	r3, [r0, #24]
   1407c:	cmp	r3, #0
   14080:	bne	14290 <__assert_fail@plt+0x2c04>
   14084:	ldr	r3, [r0]
   14088:	cmp	r3, #0
   1408c:	beq	140a8 <__assert_fail@plt+0x2a1c>
   14090:	ldr	r3, [r0, #36]	; 0x24
   14094:	cmp	r3, #0
   14098:	bne	14290 <__assert_fail@plt+0x2c04>
   1409c:	ldr	r3, [r0, #40]	; 0x28
   140a0:	cmp	r3, #0
   140a4:	bne	14290 <__assert_fail@plt+0x2c04>
   140a8:	mov	r1, r4
   140ac:	mov	r0, r5
   140b0:	bl	14470 <__assert_fail@plt+0x2de4>
   140b4:	ldr	r2, [r4]
   140b8:	ldr	r3, [r5, #40]	; 0x28
   140bc:	cmp	r3, #0
   140c0:	beq	140d4 <__assert_fail@plt+0x2a48>
   140c4:	ldr	r1, [r5, #28]
   140c8:	sub	r1, r2, r1
   140cc:	cmp	r3, r1
   140d0:	beq	140e0 <__assert_fail@plt+0x2a54>
   140d4:	ldr	r3, [r5, #16]
   140d8:	cmp	r3, r2
   140dc:	bne	140f4 <__assert_fail@plt+0x2a68>
   140e0:	mov	r1, r4
   140e4:	mov	r0, r5
   140e8:	bl	14470 <__assert_fail@plt+0x2de4>
   140ec:	cmp	r6, #0
   140f0:	bne	140fc <__assert_fail@plt+0x2a70>
   140f4:	mov	r3, #1
   140f8:	str	r3, [r4, #28]
   140fc:	ldrd	r0, [r4, #4]
   14100:	ldr	r3, [r4]
   14104:	cmp	r3, r1
   14108:	bcs	14200 <__assert_fail@plt+0x2b74>
   1410c:	cmp	r9, sl
   14110:	add	r2, r3, #1
   14114:	moveq	r1, #0
   14118:	streq	r2, [r4]
   1411c:	add	ip, r0, r3, lsl #2
   14120:	streq	r1, [r0, r3, lsl #2]
   14124:	beq	141c0 <__assert_fail@plt+0x2b34>
   14128:	ldr	r3, [r4, #16]
   1412c:	ldr	r1, [r4, #12]
   14130:	ldr	r0, [sp, #32]
   14134:	add	r1, r1, r3
   14138:	cmp	r0, #0
   1413c:	str	r2, [r4]
   14140:	str	r1, [ip]
   14144:	beq	14164 <__assert_fail@plt+0x2ad8>
   14148:	ldr	r0, [r4, #12]
   1414c:	ldr	r1, [sp, #32]
   14150:	add	r0, r0, r3
   14154:	bl	1141c <strcpy@plt>
   14158:	ldr	r3, [r4, #16]
   1415c:	add	r3, r8, r3
   14160:	str	r3, [r4, #16]
   14164:	ldr	r0, [r4, #12]
   14168:	mov	r1, r9
   1416c:	add	r0, r0, r3
   14170:	bl	1141c <strcpy@plt>
   14174:	ldr	r3, [r4, #16]
   14178:	cmp	r6, #0
   1417c:	add	r7, r7, r3
   14180:	str	r7, [r4, #16]
   14184:	ldr	r3, [r4]
   14188:	bne	14224 <__assert_fail@plt+0x2b98>
   1418c:	ldr	r2, [r5, #40]	; 0x28
   14190:	cmp	r2, #0
   14194:	beq	141a8 <__assert_fail@plt+0x2b1c>
   14198:	ldr	r1, [r5, #28]
   1419c:	sub	r1, r3, r1
   141a0:	cmp	r2, r1
   141a4:	beq	141b4 <__assert_fail@plt+0x2b28>
   141a8:	ldr	r2, [r5, #16]
   141ac:	cmp	r3, r2
   141b0:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   141b4:	mov	r0, r5
   141b8:	mov	r1, r4
   141bc:	bl	14470 <__assert_fail@plt+0x2de4>
   141c0:	cmp	r6, #0
   141c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   141c8:	ldr	r7, [r4, #16]
   141cc:	str	r7, [r4, #20]
   141d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141d4:	cmp	r6, #0
   141d8:	ldr	r2, [r4]
   141dc:	beq	140b8 <__assert_fail@plt+0x2a2c>
   141e0:	ldr	r1, [r0, #16]
   141e4:	cmp	r2, r1
   141e8:	beq	140e0 <__assert_fail@plt+0x2a54>
   141ec:	ldrd	r0, [r4, #4]
   141f0:	cmp	r2, r1
   141f4:	addcc	ip, r0, r2, lsl #2
   141f8:	addcc	r2, r2, #1
   141fc:	bcc	1412c <__assert_fail@plt+0x2aa0>
   14200:	cmp	r0, #0
   14204:	beq	14240 <__assert_fail@plt+0x2bb4>
   14208:	lsl	r3, r1, #1
   1420c:	str	r3, [r4, #8]
   14210:	lsl	r1, r1, #3
   14214:	bl	195f8 <__assert_fail@plt+0x7f6c>
   14218:	ldr	r3, [r4]
   1421c:	str	r0, [r4, #4]
   14220:	b	1410c <__assert_fail@plt+0x2a80>
   14224:	ldr	r2, [r5, #16]
   14228:	cmp	r3, r2
   1422c:	bne	141cc <__assert_fail@plt+0x2b40>
   14230:	mov	r0, r5
   14234:	mov	r1, r4
   14238:	bl	14470 <__assert_fail@plt+0x2de4>
   1423c:	b	141c0 <__assert_fail@plt+0x2b34>
   14240:	mov	r3, #64	; 0x40
   14244:	str	r3, [r4, #8]
   14248:	mov	r0, #256	; 0x100
   1424c:	bl	1959c <__assert_fail@plt+0x7f10>
   14250:	ldr	r3, [r4]
   14254:	str	r0, [r4, #4]
   14258:	b	1410c <__assert_fail@plt+0x2a80>
   1425c:	ldr	r3, [pc, #60]	; 142a0 <__assert_fail@plt+0x2c14>
   14260:	ldr	r2, [pc, #60]	; 142a4 <__assert_fail@plt+0x2c18>
   14264:	ldr	r1, [pc, #60]	; 142a8 <__assert_fail@plt+0x2c1c>
   14268:	ldr	r0, [pc, #60]	; 142ac <__assert_fail@plt+0x2c20>
   1426c:	bl	1168c <__assert_fail@plt>
   14270:	ldr	r1, [pc, #56]	; 142b0 <__assert_fail@plt+0x2c24>
   14274:	mov	r2, #5
   14278:	mov	r0, #0
   1427c:	bl	11368 <dcgettext@plt>
   14280:	mov	r1, #0
   14284:	mov	r2, r0
   14288:	mov	r0, #1
   1428c:	bl	11440 <error@plt>
   14290:	mov	r2, #5
   14294:	ldr	r1, [pc, #24]	; 142b4 <__assert_fail@plt+0x2c28>
   14298:	b	14278 <__assert_fail@plt+0x2bec>
   1429c:	andeq	ip, r1, r8, lsr #3
   142a0:	andeq	ip, r1, r8, lsl #2
   142a4:	andeq	r0, r0, r5, asr r1
   142a8:	muleq	r1, r0, r1
   142ac:	muleq	r1, ip, r1
   142b0:			; <UNDEFINED> instruction: 0x0001c1b4
   142b4:	strdeq	ip, [r1], -r0
   142b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142bc:	sub	sp, sp, #36	; 0x24
   142c0:	mov	r7, r3
   142c4:	ldr	r3, [sp, #72]	; 0x48
   142c8:	ldr	r5, [pc, #408]	; 14468 <__assert_fail@plt+0x2ddc>
   142cc:	str	r3, [sp, #8]
   142d0:	ldr	r3, [sp, #76]	; 0x4c
   142d4:	str	r1, [sp, #24]
   142d8:	str	r3, [sp, #16]
   142dc:	ldr	r3, [sp, #80]	; 0x50
   142e0:	ldr	r1, [r5]
   142e4:	str	r3, [sp, #12]
   142e8:	ldr	r3, [sp, #84]	; 0x54
   142ec:	mov	r9, r0
   142f0:	str	r3, [sp, #4]
   142f4:	ldr	r0, [r0, #12]
   142f8:	ldr	r3, [sp, #88]	; 0x58
   142fc:	cmp	r1, #0
   14300:	str	r1, [sp, #20]
   14304:	mov	r4, r2
   14308:	sub	r6, r0, #1
   1430c:	str	r3, [sp, #28]
   14310:	beq	14454 <__assert_fail@plt+0x2dc8>
   14314:	ldr	r3, [sp, #4]
   14318:	ldr	r2, [sp, #16]
   1431c:	ldr	r5, [sp, #20]
   14320:	add	sl, r3, r2
   14324:	b	143a4 <__assert_fail@plt+0x2d18>
   14328:	sub	fp, r8, r4
   1432c:	cmp	r6, fp
   14330:	bls	14428 <__assert_fail@plt+0x2d9c>
   14334:	mov	r0, r5
   14338:	mov	r1, r4
   1433c:	sub	r6, r6, fp
   14340:	mov	r2, fp
   14344:	bl	11524 <strncpy@plt>
   14348:	cmp	sl, r6
   1434c:	add	r5, r5, fp
   14350:	bcs	14424 <__assert_fail@plt+0x2d98>
   14354:	ldr	r1, [sp, #8]
   14358:	sub	r6, r6, sl
   1435c:	cmp	r1, #0
   14360:	beq	14374 <__assert_fail@plt+0x2ce8>
   14364:	mov	r0, r5
   14368:	bl	1141c <strcpy@plt>
   1436c:	ldr	r3, [sp, #16]
   14370:	add	r5, r5, r3
   14374:	mov	r0, r5
   14378:	ldr	r1, [sp, #12]
   1437c:	bl	1141c <strcpy@plt>
   14380:	ldr	r4, [r9, #20]
   14384:	ldr	r3, [sp, #4]
   14388:	sub	r7, r7, r4
   1438c:	add	r4, r8, r4
   14390:	add	r5, r5, r3
   14394:	ldrb	r3, [r4]
   14398:	sub	r7, r7, fp
   1439c:	cmp	r3, #0
   143a0:	beq	143ec <__assert_fail@plt+0x2d60>
   143a4:	ldr	r1, [r9, #24]
   143a8:	mov	r0, r4
   143ac:	bl	160b0 <__assert_fail@plt+0x4a24>
   143b0:	subs	r8, r0, #0
   143b4:	bne	14328 <__assert_fail@plt+0x2c9c>
   143b8:	cmp	r7, r6
   143bc:	bcs	14428 <__assert_fail@plt+0x2d9c>
   143c0:	mov	r1, r4
   143c4:	add	r4, r4, r7
   143c8:	mov	r0, r5
   143cc:	mov	r2, r7
   143d0:	bl	11524 <strncpy@plt>
   143d4:	ldrb	r3, [r4]
   143d8:	sub	r6, r6, r7
   143dc:	add	r5, r5, r7
   143e0:	cmp	r3, #0
   143e4:	mov	r7, r8
   143e8:	bne	143a4 <__assert_fail@plt+0x2d18>
   143ec:	mov	r2, #0
   143f0:	strb	r2, [r5], #1
   143f4:	ldr	ip, [sp, #20]
   143f8:	str	r2, [sp, #76]	; 0x4c
   143fc:	str	r2, [sp, #72]	; 0x48
   14400:	ldr	r2, [sp, #28]
   14404:	ldr	r1, [sp, #24]
   14408:	str	r2, [sp, #80]	; 0x50
   1440c:	mov	r0, r9
   14410:	sub	r3, r5, ip
   14414:	mov	r2, ip
   14418:	add	sp, sp, #36	; 0x24
   1441c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14420:	b	1401c <__assert_fail@plt+0x2990>
   14424:	mov	r4, r8
   14428:	ldrb	r3, [r4]
   1442c:	cmp	r3, #0
   14430:	beq	143ec <__assert_fail@plt+0x2d60>
   14434:	mov	r2, #5
   14438:	ldr	r1, [pc, #44]	; 1446c <__assert_fail@plt+0x2de0>
   1443c:	mov	r0, #0
   14440:	bl	11368 <dcgettext@plt>
   14444:	mov	r1, #0
   14448:	mov	r2, r0
   1444c:	mov	r0, #1
   14450:	bl	11440 <error@plt>
   14454:	add	r0, r0, #1
   14458:	bl	1959c <__assert_fail@plt+0x7f10>
   1445c:	str	r0, [sp, #20]
   14460:	str	r0, [r5]
   14464:	b	14314 <__assert_fail@plt+0x2c88>
   14468:	andeq	sp, r2, r8, lsr r1
   1446c:	andeq	ip, r1, r8, lsl #4
   14470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14474:	sub	sp, sp, #20
   14478:	mov	r3, #0
   1447c:	mov	r7, r1
   14480:	str	r3, [sp, #8]
   14484:	str	r3, [sp, #4]
   14488:	str	r3, [sp]
   1448c:	ldr	r2, [pc, #668]	; 14730 <__assert_fail@plt+0x30a4>
   14490:	mov	r9, r0
   14494:	bl	1401c <__assert_fail@plt+0x2990>
   14498:	ldr	r0, [r7]
   1449c:	cmp	r0, #0
   144a0:	beq	1471c <__assert_fail@plt+0x3090>
   144a4:	ldr	r3, [r7, #4]
   144a8:	sub	r0, r0, #-1073741823	; 0xc0000001
   144ac:	ldr	sl, [r3, r0, lsl #2]
   144b0:	lsl	r0, r0, #2
   144b4:	cmp	sl, #0
   144b8:	bne	14708 <__assert_fail@plt+0x307c>
   144bc:	add	r0, r0, #8
   144c0:	bl	1959c <__assert_fail@plt+0x7f10>
   144c4:	ldr	r1, [r7]
   144c8:	ldr	r4, [r9, #28]
   144cc:	mov	fp, sl
   144d0:	mov	r5, r1
   144d4:	mov	r8, r0
   144d8:	cmp	r4, #0
   144dc:	beq	146d0 <__assert_fail@plt+0x3044>
   144e0:	ldr	r3, [r7, #4]
   144e4:	sub	r2, r8, #4
   144e8:	sub	r3, r3, #4
   144ec:	add	ip, r3, r4, lsl #2
   144f0:	ldr	r0, [r3, #4]!
   144f4:	cmp	ip, r3
   144f8:	str	r0, [r2, #4]!
   144fc:	bne	144f0 <__assert_fail@plt+0x2e64>
   14500:	add	ip, sl, r4
   14504:	cmp	r5, r4
   14508:	movls	r3, #0
   1450c:	movhi	r3, #1
   14510:	cmp	ip, r1
   14514:	movcs	r3, #0
   14518:	cmp	r3, #0
   1451c:	moveq	r6, r4
   14520:	beq	14574 <__assert_fail@plt+0x2ee8>
   14524:	sub	r0, ip, #-1073741823	; 0xc0000001
   14528:	ldr	r2, [r7, #4]
   1452c:	sub	r3, r4, #-1073741823	; 0xc0000001
   14530:	add	r0, r2, r0, lsl #2
   14534:	add	r3, r8, r3, lsl #2
   14538:	mov	r6, r4
   1453c:	add	r6, r6, #1
   14540:	add	r2, r6, ip
   14544:	sub	lr, r2, r4
   14548:	cmp	lr, r1
   1454c:	movcs	r2, #0
   14550:	movcc	r2, #1
   14554:	cmp	r5, r6
   14558:	movls	r2, #0
   1455c:	ldr	lr, [r0, #4]!
   14560:	cmp	r2, #0
   14564:	str	lr, [r3, #4]!
   14568:	bne	1453c <__assert_fail@plt+0x2eb0>
   1456c:	cmp	r6, r4
   14570:	bcc	146d8 <__assert_fail@plt+0x304c>
   14574:	ldr	r4, [r9, #32]
   14578:	str	fp, [r8, r6, lsl #2]
   1457c:	mov	r3, r8
   14580:	mov	r2, r6
   14584:	ldr	r1, [r7, #24]
   14588:	mov	r0, r9
   1458c:	blx	r4
   14590:	subs	r4, r0, #0
   14594:	bne	14654 <__assert_fail@plt+0x2fc8>
   14598:	ldr	r2, [r9, #28]
   1459c:	add	ip, r2, #1
   145a0:	cmp	ip, r5
   145a4:	bcs	146ec <__assert_fail@plt+0x3060>
   145a8:	ldr	r1, [r7, #40]	; 0x28
   145ac:	clz	r3, r1
   145b0:	lsr	r3, r3, #5
   145b4:	cmp	r5, r1
   145b8:	orrcc	r3, r3, #1
   145bc:	cmp	r3, #0
   145c0:	ldr	r3, [r7, #36]	; 0x24
   145c4:	strne	r5, [r7, #40]	; 0x28
   145c8:	moveq	r4, r2
   145cc:	ldrne	r4, [r9, #28]
   145d0:	cmp	r3, #0
   145d4:	beq	1464c <__assert_fail@plt+0x2fc0>
   145d8:	ldr	r1, [r7, #40]	; 0x28
   145dc:	cmp	r3, r1
   145e0:	bcs	1464c <__assert_fail@plt+0x2fc0>
   145e4:	sub	r3, r1, r3
   145e8:	cmp	r3, #1
   145ec:	subne	r5, r5, r3, lsr #1
   145f0:	subeq	r5, r5, #1
   145f4:	cmp	r2, #0
   145f8:	beq	14608 <__assert_fail@plt+0x2f7c>
   145fc:	cmp	ip, r5
   14600:	bcc	14610 <__assert_fail@plt+0x2f84>
   14604:	mov	r5, ip
   14608:	cmp	r5, #0
   1460c:	moveq	r5, #1
   14610:	ldr	r1, [r7]
   14614:	add	r3, sl, #1
   14618:	sub	r2, r1, r4
   1461c:	cmp	r3, r2
   14620:	bcc	144d8 <__assert_fail@plt+0x2e4c>
   14624:	mov	r0, r8
   14628:	bl	11308 <free@plt>
   1462c:	ldr	r1, [r7, #20]
   14630:	mov	r2, #0
   14634:	mvn	r3, #0
   14638:	str	r4, [r7]
   1463c:	str	r1, [r7, #16]
   14640:	strd	r2, [r7, #28]
   14644:	add	sp, sp, #20
   14648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1464c:	lsr	r5, r5, #1
   14650:	b	145f4 <__assert_fail@plt+0x2f68>
   14654:	ldr	r2, [r7, #36]	; 0x24
   14658:	ldr	r3, [r9, #28]
   1465c:	cmp	r5, r2
   14660:	movhi	r2, r5
   14664:	strhi	r5, [r7, #36]	; 0x24
   14668:	movls	r4, r3
   1466c:	ldrhi	r4, [r9, #28]
   14670:	cmp	r2, #0
   14674:	beq	146bc <__assert_fail@plt+0x3030>
   14678:	ldr	r1, [r7, #40]	; 0x28
   1467c:	cmp	r1, r2
   14680:	bls	146bc <__assert_fail@plt+0x3030>
   14684:	sub	r2, r1, r2
   14688:	cmp	r2, #1
   1468c:	addne	r5, r5, r2, lsr #1
   14690:	addeq	r5, r5, #1
   14694:	cmp	r3, #0
   14698:	beq	146a8 <__assert_fail@plt+0x301c>
   1469c:	add	r3, r3, #1
   146a0:	cmp	r5, r3
   146a4:	movcc	r5, r3
   146a8:	cmp	r5, #0
   146ac:	moveq	r5, #1
   146b0:	add	sl, sl, r6
   146b4:	sub	sl, sl, r4
   146b8:	b	14610 <__assert_fail@plt+0x2f84>
   146bc:	cmn	r5, #1
   146c0:	addne	r5, r5, #1
   146c4:	cmp	r3, #0
   146c8:	bne	1469c <__assert_fail@plt+0x3010>
   146cc:	b	146b0 <__assert_fail@plt+0x3024>
   146d0:	mov	ip, sl
   146d4:	b	14504 <__assert_fail@plt+0x2e78>
   146d8:	ldr	r3, [pc, #84]	; 14734 <__assert_fail@plt+0x30a8>
   146dc:	mov	r2, #242	; 0xf2
   146e0:	ldr	r1, [pc, #80]	; 14738 <__assert_fail@plt+0x30ac>
   146e4:	ldr	r0, [pc, #80]	; 1473c <__assert_fail@plt+0x30b0>
   146e8:	bl	1168c <__assert_fail@plt>
   146ec:	mov	r2, #5
   146f0:	ldr	r1, [pc, #72]	; 14740 <__assert_fail@plt+0x30b4>
   146f4:	bl	11368 <dcgettext@plt>
   146f8:	mov	r1, r4
   146fc:	mov	r2, r0
   14700:	mov	r0, #1
   14704:	bl	11440 <error@plt>
   14708:	ldr	r3, [pc, #52]	; 14744 <__assert_fail@plt+0x30b8>
   1470c:	ldr	r2, [pc, #52]	; 14748 <__assert_fail@plt+0x30bc>
   14710:	ldr	r1, [pc, #32]	; 14738 <__assert_fail@plt+0x30ac>
   14714:	ldr	r0, [pc, #48]	; 1474c <__assert_fail@plt+0x30c0>
   14718:	bl	1168c <__assert_fail@plt>
   1471c:	ldr	r3, [pc, #32]	; 14744 <__assert_fail@plt+0x30b8>
   14720:	ldr	r2, [pc, #40]	; 14750 <__assert_fail@plt+0x30c4>
   14724:	ldr	r1, [pc, #12]	; 14738 <__assert_fail@plt+0x30ac>
   14728:	ldr	r0, [pc, #36]	; 14754 <__assert_fail@plt+0x30c8>
   1472c:	bl	1168c <__assert_fail@plt>
   14730:	andeq	ip, r1, r8, lsr #3
   14734:	andeq	ip, r1, r0, lsr #2
   14738:	muleq	r1, r0, r1
   1473c:	andeq	ip, r1, ip, asr r2
   14740:	andeq	ip, r1, ip, ror r2
   14744:	andeq	ip, r1, r4, lsl r1
   14748:	andeq	r0, r0, r6, lsl #2
   1474c:	andeq	ip, r1, r0, lsr r2
   14750:	andeq	r0, r0, r5, lsl #2
   14754:	andeq	ip, r1, ip, lsl r2
   14758:	push	{r4, lr}
   1475c:	mov	r0, #0
   14760:	bl	11380 <sysconf@plt>
   14764:	cmp	r0, #0
   14768:	mvnle	r0, #-2147483648	; 0x80000000
   1476c:	pop	{r4, pc}
   14770:	ldr	r3, [pc, #68]	; 147bc <__assert_fail@plt+0x3130>
   14774:	push	{r4, r5, r6, lr}
   14778:	ldr	r4, [r3]
   1477c:	ldr	r3, [r4]
   14780:	cmp	r3, #0
   14784:	beq	147b0 <__assert_fail@plt+0x3124>
   14788:	mov	r5, #0
   1478c:	mov	r0, r3
   14790:	bl	114dc <strlen@plt>
   14794:	ldr	r3, [r4, #4]!
   14798:	cmp	r3, #0
   1479c:	add	r0, r0, #1
   147a0:	add	r5, r5, r0
   147a4:	bne	1478c <__assert_fail@plt+0x3100>
   147a8:	mov	r0, r5
   147ac:	pop	{r4, r5, r6, pc}
   147b0:	mov	r5, r3
   147b4:	mov	r0, r5
   147b8:	pop	{r4, r5, r6, pc}
   147bc:	andeq	sp, r2, ip, asr r0
   147c0:	push	{r4, r5, r6, lr}
   147c4:	mov	r4, r0
   147c8:	mov	r6, r1
   147cc:	bl	14770 <__assert_fail@plt+0x30e4>
   147d0:	mov	r3, #4096	; 0x1000
   147d4:	str	r3, [r4, #8]
   147d8:	mov	r5, r0
   147dc:	mov	r0, #0
   147e0:	bl	11380 <sysconf@plt>
   147e4:	mov	r2, #0
   147e8:	str	r2, [r4]
   147ec:	cmp	r0, #0
   147f0:	mvnle	r0, #-2147483648	; 0x80000000
   147f4:	cmp	r5, r0
   147f8:	str	r0, [r4, #4]
   147fc:	bhi	14850 <__assert_fail@plt+0x31c4>
   14800:	add	r5, r5, r6
   14804:	cmp	r5, r0
   14808:	bcs	14858 <__assert_fail@plt+0x31cc>
   1480c:	sub	r3, r0, r5
   14810:	str	r3, [r4, #4]
   14814:	lsr	r1, r3, #2
   14818:	sub	r1, r1, #2
   1481c:	cmp	r1, r2
   14820:	str	r1, [r4, #16]
   14824:	beq	14860 <__assert_fail@plt+0x31d4>
   14828:	ldr	r1, [pc, #68]	; 14874 <__assert_fail@plt+0x31e8>
   1482c:	str	r2, [r4, #20]
   14830:	str	r2, [r4, #24]
   14834:	str	r2, [r4, #28]
   14838:	str	r2, [r4, #36]	; 0x24
   1483c:	str	r2, [r4, #40]	; 0x28
   14840:	str	r3, [r4, #12]
   14844:	mov	r0, r2
   14848:	str	r1, [r4, #32]
   1484c:	pop	{r4, r5, r6, pc}
   14850:	mov	r0, #1
   14854:	pop	{r4, r5, r6, pc}
   14858:	mov	r0, #2
   1485c:	pop	{r4, r5, r6, pc}
   14860:	ldr	r3, [pc, #16]	; 14878 <__assert_fail@plt+0x31ec>
   14864:	ldr	r2, [pc, #16]	; 1487c <__assert_fail@plt+0x31f0>
   14868:	ldr	r1, [pc, #16]	; 14880 <__assert_fail@plt+0x31f4>
   1486c:	ldr	r0, [pc, #16]	; 14884 <__assert_fail@plt+0x31f8>
   14870:	bl	1168c <__assert_fail@plt>
   14874:	andeq	r3, r1, r4, ror #30
   14878:	andeq	ip, r1, ip, lsr #2
   1487c:	andeq	r0, r0, r6, lsl #4
   14880:	muleq	r1, r0, r1
   14884:			; <UNDEFINED> instruction: 0x0001c2b0
   14888:	ldr	r3, [r0, #4]
   1488c:	cmp	r3, #131072	; 0x20000
   14890:	bcc	148a0 <__assert_fail@plt+0x3214>
   14894:	ldr	r3, [r0, #8]
   14898:	cmp	r3, #131072	; 0x20000
   1489c:	movls	r3, #131072	; 0x20000
   148a0:	str	r3, [r0, #12]
   148a4:	bx	lr
   148a8:	ldr	r0, [r0, #12]
   148ac:	ldr	r3, [pc, #104]	; 1491c <__assert_fail@plt+0x3290>
   148b0:	push	{r4, r5, r6, lr}
   148b4:	cmp	r0, r3
   148b8:	mov	r5, #0
   148bc:	str	r5, [r1]
   148c0:	str	r5, [r1, #16]
   148c4:	str	r5, [r1, #4]
   148c8:	str	r5, [r1, #8]
   148cc:	str	r5, [r1, #36]	; 0x24
   148d0:	str	r5, [r1, #40]	; 0x28
   148d4:	bhi	14908 <__assert_fail@plt+0x327c>
   148d8:	add	r0, r0, #1
   148dc:	mov	r4, r1
   148e0:	mov	r6, r2
   148e4:	bl	1959c <__assert_fail@plt+0x7f10>
   148e8:	mvn	r3, #0
   148ec:	str	r5, [r4, #20]
   148f0:	str	r5, [r4, #16]
   148f4:	str	r5, [r4, #28]
   148f8:	str	r6, [r4, #24]
   148fc:	str	r3, [r4, #32]
   14900:	str	r0, [r4, #12]
   14904:	pop	{r4, r5, r6, pc}
   14908:	ldr	r3, [pc, #16]	; 14920 <__assert_fail@plt+0x3294>
   1490c:	mov	r2, #572	; 0x23c
   14910:	ldr	r1, [pc, #12]	; 14924 <__assert_fail@plt+0x3298>
   14914:	ldr	r0, [pc, #12]	; 14928 <__assert_fail@plt+0x329c>
   14918:	bl	1168c <__assert_fail@plt>
   1491c:	svcvc	0x00fff7ff
   14920:	andeq	ip, r1, r0, asr #2
   14924:	muleq	r1, r0, r1
   14928:	andeq	ip, r1, r8, asr #5
   1492c:	ldr	ip, [r0, #28]
   14930:	mov	r2, #0
   14934:	ldr	r0, [r1, #20]
   14938:	mvn	r3, #0
   1493c:	str	ip, [r1]
   14940:	str	r0, [r1, #16]
   14944:	strd	r2, [r1, #28]
   14948:	bx	lr
   1494c:	ldr	r3, [r0]
   14950:	push	{r4, r5, r6, lr}
   14954:	cmp	r3, #0
   14958:	beq	149b8 <__assert_fail@plt+0x332c>
   1495c:	mov	r4, #0
   14960:	mov	r5, r0
   14964:	mov	r6, r4
   14968:	mov	r0, r3
   1496c:	bl	114dc <strlen@plt>
   14970:	ldr	r3, [r5, #4]!
   14974:	add	r4, r4, #1
   14978:	cmp	r3, #0
   1497c:	add	r6, r6, r0
   14980:	bne	14968 <__assert_fail@plt+0x32dc>
   14984:	mov	r1, r4
   14988:	ldr	r0, [pc, #52]	; 149c4 <__assert_fail@plt+0x3338>
   1498c:	bl	13f6c <__assert_fail@plt+0x28e0>
   14990:	cmp	r0, #0
   14994:	beq	149a0 <__assert_fail@plt+0x3314>
   14998:	mov	r0, #1
   1499c:	pop	{r4, r5, r6, pc}
   149a0:	mov	r1, r6
   149a4:	ldr	r0, [pc, #28]	; 149c8 <__assert_fail@plt+0x333c>
   149a8:	bl	13f6c <__assert_fail@plt+0x28e0>
   149ac:	adds	r0, r0, #0
   149b0:	movne	r0, #1
   149b4:	pop	{r4, r5, r6, pc}
   149b8:	mov	r4, r3
   149bc:	mov	r6, r3
   149c0:	b	14984 <__assert_fail@plt+0x32f8>
   149c4:	andeq	ip, r1, ip, ror #5
   149c8:	andeq	ip, r1, r4, lsl r3
   149cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   149d0:	ldr	r0, [pc, #200]	; 14aa0 <__assert_fail@plt+0x3414>
   149d4:	bl	155b4 <__assert_fail@plt+0x3f28>
   149d8:	subs	r6, r0, #0
   149dc:	beq	14a94 <__assert_fail@plt+0x3408>
   149e0:	bl	11500 <__errno_location@plt>
   149e4:	mov	r9, #0
   149e8:	mov	r8, r9
   149ec:	mvn	r5, #0
   149f0:	mov	r7, r0
   149f4:	str	r8, [r7]
   149f8:	mov	r0, r6
   149fc:	bl	115e4 <readdir64@plt>
   14a00:	mov	r1, #0
   14a04:	subs	r4, r0, #0
   14a08:	beq	14a48 <__assert_fail@plt+0x33bc>
   14a0c:	ldrb	r3, [r4, #19]
   14a10:	add	r0, r4, #19
   14a14:	cmp	r3, #46	; 0x2e
   14a18:	bne	14a34 <__assert_fail@plt+0x33a8>
   14a1c:	ldrb	r3, [r4, #20]
   14a20:	cmp	r3, #0
   14a24:	beq	149f4 <__assert_fail@plt+0x3368>
   14a28:	ldrh	r3, [r4, #20]
   14a2c:	cmp	r3, #46	; 0x2e
   14a30:	beq	149f4 <__assert_fail@plt+0x3368>
   14a34:	bl	15040 <__assert_fail@plt+0x39b4>
   14a38:	mov	r9, #1
   14a3c:	cmp	r5, r0
   14a40:	movlt	r5, r0
   14a44:	b	149f4 <__assert_fail@plt+0x3368>
   14a48:	ldr	r7, [r7]
   14a4c:	cmp	r7, r1
   14a50:	bne	14a6c <__assert_fail@plt+0x33e0>
   14a54:	mov	r0, r6
   14a58:	bl	11674 <closedir@plt>
   14a5c:	cmp	r9, #0
   14a60:	beq	14a94 <__assert_fail@plt+0x3408>
   14a64:	mov	r0, r5
   14a68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a6c:	ldr	r2, [pc, #44]	; 14aa0 <__assert_fail@plt+0x3414>
   14a70:	mov	r1, #8
   14a74:	bl	18bfc <__assert_fail@plt+0x7570>
   14a78:	mov	r1, r7
   14a7c:	ldr	r2, [pc, #32]	; 14aa4 <__assert_fail@plt+0x3418>
   14a80:	mov	r3, r0
   14a84:	mov	r0, r4
   14a88:	bl	11440 <error@plt>
   14a8c:	mov	r0, r6
   14a90:	bl	11674 <closedir@plt>
   14a94:	mvn	r5, #0
   14a98:	mov	r0, r5
   14a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14aa0:	andeq	ip, r1, r8, asr r3
   14aa4:	andeq	ip, r1, r0, lsr r6
   14aa8:	push	{r4, r5, r6, lr}
   14aac:	mov	r4, r1
   14ab0:	mov	r1, #1
   14ab4:	mov	r6, r0
   14ab8:	bl	19e70 <__assert_fail@plt+0x87e4>
   14abc:	ands	r5, r0, #1
   14ac0:	movne	r5, #0
   14ac4:	bne	14b00 <__assert_fail@plt+0x3474>
   14ac8:	ldr	r1, [r4, #4]
   14acc:	add	r2, r4, #8
   14ad0:	add	r1, r1, #1
   14ad4:	ldr	r0, [r4]
   14ad8:	lsl	r1, r1, #2
   14adc:	bl	151dc <__assert_fail@plt+0x3b50>
   14ae0:	cmp	r0, #0
   14ae4:	strne	r0, [r4]
   14ae8:	ldrne	r3, [r4, #4]
   14aec:	mvneq	r5, #0
   14af0:	strne	r6, [r0, r3, lsl #2]
   14af4:	ldrne	r3, [r4, #4]
   14af8:	addne	r3, r3, #1
   14afc:	strne	r3, [r4, #4]
   14b00:	mov	r0, r5
   14b04:	pop	{r4, r5, r6, pc}
   14b08:	push	{r4, r5, r6, lr}
   14b0c:	mov	r4, r1
   14b10:	mov	r1, #1
   14b14:	mov	r5, r0
   14b18:	bl	19e70 <__assert_fail@plt+0x87e4>
   14b1c:	tst	r0, #1
   14b20:	bne	14b7c <__assert_fail@plt+0x34f0>
   14b24:	ldmib	r4, {r0, r3}
   14b28:	cmp	r3, r0
   14b2c:	bcs	14b68 <__assert_fail@plt+0x34dc>
   14b30:	ldr	r1, [r4]
   14b34:	add	r2, r1, r3, lsl #2
   14b38:	ldr	r1, [r1, r3, lsl #2]
   14b3c:	cmp	r1, r5
   14b40:	bge	14b74 <__assert_fail@plt+0x34e8>
   14b44:	add	r3, r3, #1
   14b48:	b	14b5c <__assert_fail@plt+0x34d0>
   14b4c:	ldr	r1, [r2, #4]!
   14b50:	add	r3, r3, #1
   14b54:	cmp	r5, r1
   14b58:	ble	14b74 <__assert_fail@plt+0x34e8>
   14b5c:	cmp	r0, r3
   14b60:	str	r3, [r4, #8]
   14b64:	bne	14b4c <__assert_fail@plt+0x34c0>
   14b68:	mvn	r0, #0
   14b6c:	str	r5, [r4, #12]
   14b70:	pop	{r4, r5, r6, pc}
   14b74:	cmp	r5, r1
   14b78:	bne	14b68 <__assert_fail@plt+0x34dc>
   14b7c:	mov	r0, #0
   14b80:	pop	{r4, r5, r6, pc}
   14b84:	push	{r4, r5, lr}
   14b88:	sub	sp, sp, #28
   14b8c:	ldr	r5, [pc, #100]	; 14bf8 <__assert_fail@plt+0x356c>
   14b90:	mov	r0, #4
   14b94:	ldr	r3, [r5]
   14b98:	str	r3, [sp, #20]
   14b9c:	bl	11380 <sysconf@plt>
   14ba0:	mov	r1, sp
   14ba4:	cmn	r0, #1
   14ba8:	movne	r4, r0
   14bac:	mov	r0, #7
   14bb0:	moveq	r4, #20
   14bb4:	bl	11398 <getrlimit64@plt>
   14bb8:	cmp	r0, #0
   14bbc:	bne	14bd8 <__assert_fail@plt+0x354c>
   14bc0:	ldrd	r2, [sp]
   14bc4:	mvn	r1, #0
   14bc8:	mvn	r0, #0
   14bcc:	cmp	r3, r1
   14bd0:	cmpeq	r2, r0
   14bd4:	movne	r4, r2
   14bd8:	ldr	r2, [sp, #20]
   14bdc:	ldr	r3, [r5]
   14be0:	mov	r0, r4
   14be4:	cmp	r2, r3
   14be8:	bne	14bf4 <__assert_fail@plt+0x3568>
   14bec:	add	sp, sp, #28
   14bf0:	pop	{r4, r5, pc}
   14bf4:	bl	11374 <__stack_chk_fail@plt>
   14bf8:	muleq	r2, r8, sp
   14bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c00:	sub	sp, sp, #532	; 0x214
   14c04:	subs	r3, r0, #0
   14c08:	str	r3, [sp, #4]
   14c0c:	ldr	r3, [pc, #276]	; 14d28 <__assert_fail@plt+0x369c>
   14c10:	ldr	r3, [r3]
   14c14:	str	r3, [sp, #524]	; 0x20c
   14c18:	ble	14cd4 <__assert_fail@plt+0x3648>
   14c1c:	mov	r5, #0
   14c20:	mov	r8, r1
   14c24:	mov	r9, r2
   14c28:	mov	r7, r5
   14c2c:	mov	r6, #5
   14c30:	ldr	r3, [sp, #4]
   14c34:	sub	r3, r3, r5
   14c38:	cmp	r3, #64	; 0x40
   14c3c:	movlt	r4, r3
   14c40:	movge	r4, #64	; 0x40
   14c44:	cmp	r3, #0
   14c48:	ble	14cf4 <__assert_fail@plt+0x3668>
   14c4c:	add	r2, sp, #12
   14c50:	mov	r3, #0
   14c54:	add	r1, r5, r3
   14c58:	add	r3, r3, #1
   14c5c:	cmp	r3, r4
   14c60:	strh	r6, [r2, #4]
   14c64:	strh	r7, [r2, #6]
   14c68:	str	r1, [r2], #8
   14c6c:	blt	14c54 <__assert_fail@plt+0x35c8>
   14c70:	mov	r3, #512	; 0x200
   14c74:	mov	r2, #0
   14c78:	mov	r1, r4
   14c7c:	add	r0, sp, #12
   14c80:	bl	113d4 <__poll_chk@plt>
   14c84:	cmn	r0, #1
   14c88:	beq	14cd8 <__assert_fail@plt+0x364c>
   14c8c:	add	sl, sp, #12
   14c90:	mov	fp, #0
   14c94:	ldrsh	r1, [sl, #6]
   14c98:	cmp	r1, #32
   14c9c:	beq	14cb4 <__assert_fail@plt+0x3628>
   14ca0:	mov	r1, r9
   14ca4:	ldr	r0, [sl]
   14ca8:	blx	r8
   14cac:	cmp	r0, #0
   14cb0:	bne	14cd8 <__assert_fail@plt+0x364c>
   14cb4:	add	fp, fp, #1
   14cb8:	cmp	fp, r4
   14cbc:	add	sl, sl, #8
   14cc0:	blt	14c94 <__assert_fail@plt+0x3608>
   14cc4:	ldr	r3, [sp, #4]
   14cc8:	add	r5, r5, r4
   14ccc:	cmp	r3, r5
   14cd0:	bgt	14c30 <__assert_fail@plt+0x35a4>
   14cd4:	mov	r0, #0
   14cd8:	ldr	r3, [pc, #72]	; 14d28 <__assert_fail@plt+0x369c>
   14cdc:	ldr	r2, [sp, #524]	; 0x20c
   14ce0:	ldr	r3, [r3]
   14ce4:	cmp	r2, r3
   14ce8:	bne	14d24 <__assert_fail@plt+0x3698>
   14cec:	add	sp, sp, #532	; 0x214
   14cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cf4:	mov	r3, #512	; 0x200
   14cf8:	mov	r2, #0
   14cfc:	mov	r1, r4
   14d00:	add	r0, sp, #12
   14d04:	bl	113d4 <__poll_chk@plt>
   14d08:	cmn	r0, #1
   14d0c:	beq	14cd8 <__assert_fail@plt+0x364c>
   14d10:	ldr	r3, [sp, #4]
   14d14:	add	r5, r5, r4
   14d18:	cmp	r3, r5
   14d1c:	bgt	14c30 <__assert_fail@plt+0x35a4>
   14d20:	b	14cd4 <__assert_fail@plt+0x3648>
   14d24:	bl	11374 <__stack_chk_fail@plt>
   14d28:	muleq	r2, r8, sp
   14d2c:	push	{r4, lr}
   14d30:	sub	sp, sp, #16
   14d34:	ldr	r4, [pc, #96]	; 14d9c <__assert_fail@plt+0x3710>
   14d38:	ldr	r3, [r4]
   14d3c:	str	r3, [sp, #12]
   14d40:	bl	149cc <__assert_fail@plt+0x3340>
   14d44:	cmp	r0, #0
   14d48:	bge	14d50 <__assert_fail@plt+0x36c4>
   14d4c:	bl	14b84 <__assert_fail@plt+0x34f8>
   14d50:	cmn	r0, #-2147483647	; 0x80000001
   14d54:	mov	r3, #0
   14d58:	addne	r0, r0, #1
   14d5c:	mov	r2, sp
   14d60:	ldr	r1, [pc, #56]	; 14da0 <__assert_fail@plt+0x3714>
   14d64:	str	r3, [sp]
   14d68:	str	r3, [sp, #8]
   14d6c:	str	r3, [sp, #4]
   14d70:	bl	14bfc <__assert_fail@plt+0x3570>
   14d74:	ldr	ip, [sp, #12]
   14d78:	ldr	r3, [pc, #36]	; 14da4 <__assert_fail@plt+0x3718>
   14d7c:	ldr	r0, [r4]
   14d80:	ldm	sp, {r1, r2}
   14d84:	cmp	ip, r0
   14d88:	stm	r3, {r1, r2}
   14d8c:	bne	14d98 <__assert_fail@plt+0x370c>
   14d90:	add	sp, sp, #16
   14d94:	pop	{r4, pc}
   14d98:	bl	11374 <__stack_chk_fail@plt>
   14d9c:	muleq	r2, r8, sp
   14da0:	andeq	r4, r1, r8, lsr #21
   14da4:	andeq	sp, r2, ip, lsr r1
   14da8:	push	{r1, r2, r3}
   14dac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14db0:	sub	sp, sp, #12
   14db4:	ldr	r7, [pc, #204]	; 14e88 <__assert_fail@plt+0x37fc>
   14db8:	ldr	r6, [pc, #204]	; 14e8c <__assert_fail@plt+0x3800>
   14dbc:	ldr	r4, [sp, #44]	; 0x2c
   14dc0:	ldr	r3, [r7]
   14dc4:	ldrb	r8, [r6, #8]
   14dc8:	ands	r5, r4, #64	; 0x40
   14dcc:	str	r3, [sp, #4]
   14dd0:	addne	r3, sp, #48	; 0x30
   14dd4:	strne	r3, [sp]
   14dd8:	ldrne	r5, [sp, #48]	; 0x30
   14ddc:	cmp	r8, #0
   14de0:	mov	r9, r0
   14de4:	beq	14e30 <__assert_fail@plt+0x37a4>
   14de8:	orr	r1, r4, #524288	; 0x80000
   14dec:	mov	r2, r5
   14df0:	mov	r0, r9
   14df4:	bl	1563c <__assert_fail@plt+0x3fb0>
   14df8:	subs	r4, r0, #0
   14dfc:	blt	14e0c <__assert_fail@plt+0x3780>
   14e00:	ldrb	r3, [r6, #9]
   14e04:	cmp	r3, #0
   14e08:	beq	14e54 <__assert_fail@plt+0x37c8>
   14e0c:	ldr	r2, [sp, #4]
   14e10:	ldr	r3, [r7]
   14e14:	mov	r0, r4
   14e18:	cmp	r2, r3
   14e1c:	bne	14e84 <__assert_fail@plt+0x37f8>
   14e20:	add	sp, sp, #12
   14e24:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e28:	add	sp, sp, #12
   14e2c:	bx	lr
   14e30:	mov	r1, #524288	; 0x80000
   14e34:	ldr	r0, [pc, #84]	; 14e90 <__assert_fail@plt+0x3804>
   14e38:	bl	1563c <__assert_fail@plt+0x3fb0>
   14e3c:	subs	sl, r0, #0
   14e40:	bge	14e60 <__assert_fail@plt+0x37d4>
   14e44:	mov	r3, #1
   14e48:	strb	r8, [r6, #9]
   14e4c:	strb	r3, [r6, #8]
   14e50:	b	14de8 <__assert_fail@plt+0x375c>
   14e54:	mov	r1, #1
   14e58:	bl	1531c <__assert_fail@plt+0x3c90>
   14e5c:	b	14e0c <__assert_fail@plt+0x3780>
   14e60:	mov	r1, #1
   14e64:	bl	19e70 <__assert_fail@plt+0x87e4>
   14e68:	and	r8, r0, #1
   14e6c:	mov	r0, sl
   14e70:	bl	11668 <close@plt>
   14e74:	mov	r3, #1
   14e78:	strb	r8, [r6, #9]
   14e7c:	strb	r3, [r6, #8]
   14e80:	b	14de8 <__assert_fail@plt+0x375c>
   14e84:	bl	11374 <__stack_chk_fail@plt>
   14e88:	muleq	r2, r8, sp
   14e8c:	andeq	sp, r2, ip, lsr r1
   14e90:	andeq	ip, r1, r8, ror #6
   14e94:	push	{r4, lr}
   14e98:	ldr	r4, [pc, #20]	; 14eb4 <__assert_fail@plt+0x3828>
   14e9c:	ldr	r0, [r4]
   14ea0:	bl	11308 <free@plt>
   14ea4:	mov	r3, #0
   14ea8:	str	r3, [r4]
   14eac:	str	r3, [r4, #4]
   14eb0:	pop	{r4, pc}
   14eb4:	andeq	sp, r2, ip, lsr r1
   14eb8:	push	{r4, r5, r6, r7, lr}
   14ebc:	sub	sp, sp, #28
   14ec0:	ldr	r4, [pc, #172]	; 14f74 <__assert_fail@plt+0x38e8>
   14ec4:	ldr	r3, [pc, #172]	; 14f78 <__assert_fail@plt+0x38ec>
   14ec8:	ldr	r2, [r4]
   14ecc:	ldr	r7, [r3]
   14ed0:	str	r2, [sp, #20]
   14ed4:	ldr	r6, [r3, #4]
   14ed8:	bl	149cc <__assert_fail@plt+0x3340>
   14edc:	cmp	r0, #0
   14ee0:	bge	14ee8 <__assert_fail@plt+0x385c>
   14ee4:	bl	14b84 <__assert_fail@plt+0x34f8>
   14ee8:	cmn	r0, #-2147483647	; 0x80000001
   14eec:	addne	r0, r0, #1
   14ef0:	mov	r5, #0
   14ef4:	mvn	r3, #0
   14ef8:	add	r2, sp, #4
   14efc:	ldr	r1, [pc, #120]	; 14f7c <__assert_fail@plt+0x38f0>
   14f00:	str	r6, [sp, #8]
   14f04:	str	r7, [sp, #4]
   14f08:	str	r5, [sp, #12]
   14f0c:	str	r3, [sp, #16]
   14f10:	bl	14bfc <__assert_fail@plt+0x3570>
   14f14:	ldr	r6, [sp, #16]
   14f18:	cmp	r6, r5
   14f1c:	bge	14f38 <__assert_fail@plt+0x38ac>
   14f20:	ldr	r2, [sp, #20]
   14f24:	ldr	r3, [r4]
   14f28:	cmp	r2, r3
   14f2c:	bne	14f70 <__assert_fail@plt+0x38e4>
   14f30:	add	sp, sp, #28
   14f34:	pop	{r4, r5, r6, r7, pc}
   14f38:	mov	r2, #5
   14f3c:	ldr	r1, [pc, #60]	; 14f80 <__assert_fail@plt+0x38f4>
   14f40:	mov	r0, r5
   14f44:	bl	11368 <dcgettext@plt>
   14f48:	mov	r3, r6
   14f4c:	mov	r1, r5
   14f50:	mov	r2, r0
   14f54:	mov	r0, r5
   14f58:	bl	11440 <error@plt>
   14f5c:	ldr	r3, [pc, #32]	; 14f84 <__assert_fail@plt+0x38f8>
   14f60:	ldr	r2, [pc, #32]	; 14f88 <__assert_fail@plt+0x38fc>
   14f64:	ldr	r1, [pc, #32]	; 14f8c <__assert_fail@plt+0x3900>
   14f68:	ldr	r0, [pc, #32]	; 14f90 <__assert_fail@plt+0x3904>
   14f6c:	bl	1168c <__assert_fail@plt>
   14f70:	bl	11374 <__stack_chk_fail@plt>
   14f74:	muleq	r2, r8, sp
   14f78:	andeq	sp, r2, ip, lsr r1
   14f7c:	andeq	r4, r1, r8, lsl #22
   14f80:	andeq	ip, r1, ip, ror #6
   14f84:	andeq	ip, r1, ip, lsr r3
   14f88:	andeq	r0, r0, r1, lsl #3
   14f8c:	andeq	ip, r1, r4, lsl #8
   14f90:	andeq	ip, r1, r0, lsl r4
   14f94:	ldr	r3, [pc, #136]	; 15024 <__assert_fail@plt+0x3998>
   14f98:	push	{r4, r5, r6, r7, r8, lr}
   14f9c:	mov	r5, r0
   14fa0:	sub	sp, sp, #16
   14fa4:	ldr	r0, [r3]
   14fa8:	bl	1a078 <__assert_fail@plt+0x89ec>
   14fac:	ldr	ip, [pc, #116]	; 15028 <__assert_fail@plt+0x399c>
   14fb0:	ldr	r3, [pc, #116]	; 1502c <__assert_fail@plt+0x39a0>
   14fb4:	mov	r2, #5
   14fb8:	ldr	r1, [pc, #112]	; 15030 <__assert_fail@plt+0x39a4>
   14fbc:	mov	r0, #0
   14fc0:	ldr	r4, [ip]
   14fc4:	ldr	r7, [r3]
   14fc8:	bl	11368 <dcgettext@plt>
   14fcc:	mov	r2, #5
   14fd0:	ldr	r1, [pc, #92]	; 15034 <__assert_fail@plt+0x39a8>
   14fd4:	mov	r8, r0
   14fd8:	mov	r0, #0
   14fdc:	bl	11368 <dcgettext@plt>
   14fe0:	mov	r2, #5
   14fe4:	ldr	r1, [pc, #76]	; 15038 <__assert_fail@plt+0x39ac>
   14fe8:	mov	r6, r0
   14fec:	mov	r0, #0
   14ff0:	bl	11368 <dcgettext@plt>
   14ff4:	mov	r2, #0
   14ff8:	str	r2, [sp, #12]
   14ffc:	str	r8, [sp]
   15000:	mov	r3, r7
   15004:	str	r6, [sp, #4]
   15008:	mov	r1, r5
   1500c:	ldr	r2, [pc, #40]	; 1503c <__assert_fail@plt+0x39b0>
   15010:	str	r0, [sp, #8]
   15014:	mov	r0, r4
   15018:	bl	19498 <__assert_fail@plt+0x7e0c>
   1501c:	add	sp, sp, #16
   15020:	pop	{r4, r5, r6, r7, r8, pc}
   15024:	andeq	sp, r2, r0, ror r0
   15028:	andeq	sp, r2, ip, ror r0
   1502c:	andeq	sp, r2, r0, lsl r0
   15030:	andeq	ip, r1, ip, lsl r4
   15034:	andeq	ip, r1, ip, lsr #8
   15038:	andeq	ip, r1, ip, lsr r4
   1503c:	andeq	ip, r1, ip, asr #8
   15040:	push	{r4, r5, r6, r7, r8, r9, lr}
   15044:	sub	sp, sp, #20
   15048:	ldr	r6, [pc, #272]	; 15160 <__assert_fail@plt+0x3ad4>
   1504c:	mov	r4, r0
   15050:	mov	r8, r1
   15054:	ldr	r3, [r6]
   15058:	mov	r7, #0
   1505c:	str	r3, [sp, #12]
   15060:	bl	11500 <__errno_location@plt>
   15064:	mov	r2, #10
   15068:	add	r1, sp, #8
   1506c:	str	r7, [r0]
   15070:	mov	r5, r0
   15074:	mov	r0, r4
   15078:	bl	112d8 <strtol@plt>
   1507c:	sub	r3, r0, #-2147483647	; 0x80000001
   15080:	cmn	r3, #3
   15084:	bls	1509c <__assert_fail@plt+0x3a10>
   15088:	ldr	r1, [r5]
   1508c:	ldr	r2, [pc, #208]	; 15164 <__assert_fail@plt+0x3ad8>
   15090:	mov	r3, r4
   15094:	mov	r0, #1
   15098:	bl	11440 <error@plt>
   1509c:	ldr	r3, [sp, #8]
   150a0:	ldrb	r9, [r3]
   150a4:	cmp	r9, #0
   150a8:	bne	150cc <__assert_fail@plt+0x3a40>
   150ac:	cmp	r4, r3
   150b0:	beq	15120 <__assert_fail@plt+0x3a94>
   150b4:	ldr	r2, [sp, #12]
   150b8:	ldr	r3, [r6]
   150bc:	cmp	r2, r3
   150c0:	bne	1515c <__assert_fail@plt+0x3ad0>
   150c4:	add	sp, sp, #20
   150c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   150cc:	mov	r2, #5
   150d0:	ldr	r1, [pc, #144]	; 15168 <__assert_fail@plt+0x3adc>
   150d4:	mov	r0, r7
   150d8:	ldr	r5, [r5]
   150dc:	bl	11368 <dcgettext@plt>
   150e0:	ldr	r2, [sp, #8]
   150e4:	mov	r1, r8
   150e8:	mov	r6, r0
   150ec:	mov	r0, r7
   150f0:	bl	18bfc <__assert_fail@plt+0x7570>
   150f4:	mov	r2, r4
   150f8:	mov	r1, r8
   150fc:	mov	r7, r0
   15100:	mov	r0, #1
   15104:	bl	18bfc <__assert_fail@plt+0x7570>
   15108:	mov	r3, r7
   1510c:	mov	r2, r6
   15110:	mov	r1, r5
   15114:	str	r0, [sp]
   15118:	mov	r0, #1
   1511c:	bl	11440 <error@plt>
   15120:	mov	r2, #5
   15124:	ldr	r1, [pc, #64]	; 1516c <__assert_fail@plt+0x3ae0>
   15128:	mov	r0, r9
   1512c:	ldr	r5, [r5]
   15130:	bl	11368 <dcgettext@plt>
   15134:	mov	r2, r4
   15138:	mov	r1, r8
   1513c:	mov	r6, r0
   15140:	mov	r0, r9
   15144:	bl	18bfc <__assert_fail@plt+0x7570>
   15148:	mov	r2, r6
   1514c:	mov	r1, r5
   15150:	mov	r3, r0
   15154:	mov	r0, #1
   15158:	b	15098 <__assert_fail@plt+0x3a0c>
   1515c:	bl	11374 <__stack_chk_fail@plt>
   15160:	muleq	r2, r8, sp
   15164:	andeq	ip, r1, r0, lsr r6
   15168:	andeq	ip, r1, ip, ror #8
   1516c:	andeq	ip, r1, r8, lsl #9
   15170:	push	{r4, r5, lr}
   15174:	mov	r2, #5
   15178:	sub	sp, sp, #20
   1517c:	mov	r4, r0
   15180:	mov	r5, r1
   15184:	mov	r0, #0
   15188:	ldr	r1, [pc, #56]	; 151c8 <__assert_fail@plt+0x3b3c>
   1518c:	bl	11368 <dcgettext@plt>
   15190:	ldr	r1, [pc, #52]	; 151cc <__assert_fail@plt+0x3b40>
   15194:	ldr	r2, [pc, #52]	; 151d0 <__assert_fail@plt+0x3b44>
   15198:	ldr	r3, [pc, #52]	; 151d4 <__assert_fail@plt+0x3b48>
   1519c:	str	r1, [sp, #12]
   151a0:	str	r2, [sp, #8]
   151a4:	str	r3, [sp, #4]
   151a8:	str	r5, [sp]
   151ac:	ldr	r3, [pc, #36]	; 151d8 <__assert_fail@plt+0x3b4c>
   151b0:	mov	r1, #1
   151b4:	mov	r2, r0
   151b8:	mov	r0, r4
   151bc:	bl	11554 <__fprintf_chk@plt>
   151c0:	add	sp, sp, #20
   151c4:	pop	{r4, r5, pc}
   151c8:	andeq	ip, r1, r0, lsr #9
   151cc:	muleq	r1, r8, r5
   151d0:			; <UNDEFINED> instruction: 0x0001c5b0
   151d4:	andeq	ip, r1, ip, asr #8
   151d8:	andeq	ip, r1, r0, ror r5
   151dc:	push	{r4, r5, r6, r7, r8, lr}
   151e0:	mov	r4, r1
   151e4:	mov	r5, r0
   151e8:	mov	r6, r2
   151ec:	bl	11500 <__errno_location@plt>
   151f0:	cmp	r4, #0
   151f4:	ldr	r8, [r0]
   151f8:	beq	152c4 <__assert_fail@plt+0x3c38>
   151fc:	ldr	r1, [r6]
   15200:	mov	r7, r0
   15204:	cmp	r1, #0
   15208:	beq	15264 <__assert_fail@plt+0x3bd8>
   1520c:	cmp	r1, r4
   15210:	bcs	1528c <__assert_fail@plt+0x3c00>
   15214:	lsl	r0, r1, #1
   15218:	cmp	r1, r0
   1521c:	bls	15234 <__assert_fail@plt+0x3ba8>
   15220:	b	152a0 <__assert_fail@plt+0x3c14>
   15224:	lsl	r3, r0, #1
   15228:	cmp	r0, r3
   1522c:	bhi	15278 <__assert_fail@plt+0x3bec>
   15230:	mov	r0, r3
   15234:	cmp	r0, r4
   15238:	bcc	15224 <__assert_fail@plt+0x3b98>
   1523c:	cmp	r1, #0
   15240:	bne	15284 <__assert_fail@plt+0x3bf8>
   15244:	cmp	r5, #0
   15248:	bne	152d8 <__assert_fail@plt+0x3c4c>
   1524c:	str	r0, [r6]
   15250:	bl	11470 <malloc@plt>
   15254:	cmp	r0, #0
   15258:	beq	15298 <__assert_fail@plt+0x3c0c>
   1525c:	str	r8, [r7]
   15260:	pop	{r4, r5, r6, r7, r8, pc}
   15264:	cmp	r4, #16
   15268:	movls	r0, #16
   1526c:	bls	15244 <__assert_fail@plt+0x3bb8>
   15270:	mov	r0, #32
   15274:	b	15234 <__assert_fail@plt+0x3ba8>
   15278:	cmp	r1, #0
   1527c:	mov	r0, r4
   15280:	beq	15244 <__assert_fail@plt+0x3bb8>
   15284:	cmp	r1, r0
   15288:	bne	152a4 <__assert_fail@plt+0x3c18>
   1528c:	mov	r0, r5
   15290:	cmp	r0, #0
   15294:	bne	1525c <__assert_fail@plt+0x3bd0>
   15298:	mov	r0, #0
   1529c:	pop	{r4, r5, r6, r7, r8, pc}
   152a0:	mov	r0, r4
   152a4:	str	r0, [r6]
   152a8:	mov	r1, r0
   152ac:	mov	r0, r5
   152b0:	bl	113a4 <realloc@plt>
   152b4:	cmp	r0, #0
   152b8:	beq	15298 <__assert_fail@plt+0x3c0c>
   152bc:	str	r8, [r7]
   152c0:	pop	{r4, r5, r6, r7, r8, pc}
   152c4:	ldr	r3, [pc, #32]	; 152ec <__assert_fail@plt+0x3c60>
   152c8:	mov	r2, #71	; 0x47
   152cc:	ldr	r1, [pc, #28]	; 152f0 <__assert_fail@plt+0x3c64>
   152d0:	ldr	r0, [pc, #28]	; 152f4 <__assert_fail@plt+0x3c68>
   152d4:	bl	1168c <__assert_fail@plt>
   152d8:	ldr	r3, [pc, #12]	; 152ec <__assert_fail@plt+0x3c60>
   152dc:	mov	r2, #79	; 0x4f
   152e0:	ldr	r1, [pc, #8]	; 152f0 <__assert_fail@plt+0x3c64>
   152e4:	ldr	r0, [pc, #12]	; 152f8 <__assert_fail@plt+0x3c6c>
   152e8:	bl	1168c <__assert_fail@plt>
   152ec:	andeq	ip, r1, r0, ror #11
   152f0:	andeq	ip, r1, ip, ror #11
   152f4:	strdeq	ip, [r1], -r8
   152f8:	andeq	ip, r1, r4, lsl #12
   152fc:	push	{r4, lr}
   15300:	mov	r4, r0
   15304:	bl	151dc <__assert_fail@plt+0x3b50>
   15308:	cmp	r0, #0
   1530c:	popne	{r4, pc}
   15310:	mov	r0, r4
   15314:	bl	11308 <free@plt>
   15318:	bl	197e4 <__assert_fail@plt+0x8158>
   1531c:	push	{r4, r5, r6, lr}
   15320:	mov	r2, #0
   15324:	mov	r4, r1
   15328:	mov	r1, #1
   1532c:	mov	r5, r0
   15330:	bl	19e70 <__assert_fail@plt+0x87e4>
   15334:	cmp	r0, #0
   15338:	blt	15378 <__assert_fail@plt+0x3cec>
   1533c:	cmp	r4, #0
   15340:	orrne	r2, r0, #1
   15344:	biceq	r2, r0, #1
   15348:	cmp	r2, r0
   1534c:	beq	15370 <__assert_fail@plt+0x3ce4>
   15350:	mov	r0, r5
   15354:	mov	r1, #2
   15358:	bl	19e70 <__assert_fail@plt+0x87e4>
   1535c:	cmn	r0, #1
   15360:	movne	r0, #0
   15364:	moveq	r0, #1
   15368:	rsb	r0, r0, #0
   1536c:	pop	{r4, r5, r6, pc}
   15370:	mov	r0, #0
   15374:	pop	{r4, r5, r6, pc}
   15378:	mvn	r0, #0
   1537c:	pop	{r4, r5, r6, pc}
   15380:	mov	r2, #0
   15384:	ldr	r1, [pc]	; 1538c <__assert_fail@plt+0x3d00>
   15388:	b	19e70 <__assert_fail@plt+0x87e4>
   1538c:	andeq	r0, r0, r6, lsl #8
   15390:	ldr	r3, [pc, #4]	; 1539c <__assert_fail@plt+0x3d10>
   15394:	str	r0, [r3]
   15398:	bx	lr
   1539c:	andeq	sp, r2, r8, asr #2
   153a0:	push	{r4, r5, lr}
   153a4:	sub	sp, sp, #12
   153a8:	ldr	r5, [pc, #244]	; 154a4 <__assert_fail@plt+0x3e18>
   153ac:	ldr	r4, [r5]
   153b0:	mov	r0, r4
   153b4:	bl	1a0d8 <__assert_fail@plt+0x8a4c>
   153b8:	cmp	r0, #0
   153bc:	bne	15450 <__assert_fail@plt+0x3dc4>
   153c0:	mov	r0, r4
   153c4:	bl	1a234 <__assert_fail@plt+0x8ba8>
   153c8:	cmp	r0, #0
   153cc:	bne	153f0 <__assert_fail@plt+0x3d64>
   153d0:	add	sp, sp, #12
   153d4:	pop	{r4, r5, lr}
   153d8:	b	154dc <__assert_fail@plt+0x3e50>
   153dc:	bl	1a078 <__assert_fail@plt+0x89ec>
   153e0:	cmp	r0, #0
   153e4:	ldr	r0, [r5]
   153e8:	beq	15474 <__assert_fail@plt+0x3de8>
   153ec:	bl	1a234 <__assert_fail@plt+0x8ba8>
   153f0:	mov	r2, #5
   153f4:	ldr	r1, [pc, #172]	; 154a8 <__assert_fail@plt+0x3e1c>
   153f8:	mov	r0, #0
   153fc:	bl	11368 <dcgettext@plt>
   15400:	ldr	r3, [pc, #164]	; 154ac <__assert_fail@plt+0x3e20>
   15404:	ldr	r4, [r3]
   15408:	mov	r5, r0
   1540c:	bl	11500 <__errno_location@plt>
   15410:	cmp	r4, #0
   15414:	mov	r2, r0
   15418:	beq	1548c <__assert_fail@plt+0x3e00>
   1541c:	mov	r0, r4
   15420:	ldr	r4, [r2]
   15424:	bl	18d78 <__assert_fail@plt+0x76ec>
   15428:	mov	r1, r4
   1542c:	str	r5, [sp]
   15430:	ldr	r2, [pc, #120]	; 154b0 <__assert_fail@plt+0x3e24>
   15434:	mov	r3, r0
   15438:	mov	r0, #0
   1543c:	bl	11440 <error@plt>
   15440:	bl	154dc <__assert_fail@plt+0x3e50>
   15444:	ldr	r3, [pc, #104]	; 154b4 <__assert_fail@plt+0x3e28>
   15448:	ldr	r0, [r3]
   1544c:	bl	11320 <_exit@plt>
   15450:	mov	r3, #1
   15454:	str	r3, [sp]
   15458:	mov	r0, r4
   1545c:	mov	r2, #0
   15460:	mov	r3, #0
   15464:	bl	1a114 <__assert_fail@plt+0x8a88>
   15468:	cmp	r0, #0
   1546c:	ldr	r0, [r5]
   15470:	beq	153dc <__assert_fail@plt+0x3d50>
   15474:	bl	1a234 <__assert_fail@plt+0x8ba8>
   15478:	cmp	r0, #0
   1547c:	bne	153f0 <__assert_fail@plt+0x3d64>
   15480:	add	sp, sp, #12
   15484:	pop	{r4, r5, lr}
   15488:	b	154dc <__assert_fail@plt+0x3e50>
   1548c:	ldr	r1, [r0]
   15490:	mov	r3, r5
   15494:	mov	r0, r4
   15498:	ldr	r2, [pc, #24]	; 154b8 <__assert_fail@plt+0x3e2c>
   1549c:	bl	11440 <error@plt>
   154a0:	b	15440 <__assert_fail@plt+0x3db4>
   154a4:	andeq	sp, r2, r8, ror r0
   154a8:	andeq	ip, r1, r8, lsl r6
   154ac:	andeq	sp, r2, r8, asr #2
   154b0:	andeq	ip, r1, ip, lsr #12
   154b4:	andeq	sp, r2, r4, lsl r0
   154b8:	andeq	ip, r1, r0, lsr r6
   154bc:	ldr	r3, [pc, #4]	; 154c8 <__assert_fail@plt+0x3e3c>
   154c0:	str	r0, [r3]
   154c4:	bx	lr
   154c8:	andeq	sp, r2, ip, asr #2
   154cc:	ldr	r3, [pc, #4]	; 154d8 <__assert_fail@plt+0x3e4c>
   154d0:	strb	r0, [r3, #4]
   154d4:	bx	lr
   154d8:	andeq	sp, r2, ip, asr #2
   154dc:	ldr	r3, [pc, #180]	; 15598 <__assert_fail@plt+0x3f0c>
   154e0:	push	{r4, r5, r6, lr}
   154e4:	sub	sp, sp, #8
   154e8:	ldr	r0, [r3]
   154ec:	bl	1a234 <__assert_fail@plt+0x8ba8>
   154f0:	cmp	r0, #0
   154f4:	beq	1551c <__assert_fail@plt+0x3e90>
   154f8:	bl	11500 <__errno_location@plt>
   154fc:	ldr	r5, [pc, #152]	; 1559c <__assert_fail@plt+0x3f10>
   15500:	ldrb	r3, [r5, #4]
   15504:	cmp	r3, #0
   15508:	mov	r4, r0
   1550c:	beq	15538 <__assert_fail@plt+0x3eac>
   15510:	ldr	r3, [r0]
   15514:	cmp	r3, #32
   15518:	bne	15538 <__assert_fail@plt+0x3eac>
   1551c:	ldr	r3, [pc, #124]	; 155a0 <__assert_fail@plt+0x3f14>
   15520:	ldr	r0, [r3]
   15524:	bl	1a234 <__assert_fail@plt+0x8ba8>
   15528:	cmp	r0, #0
   1552c:	bne	15578 <__assert_fail@plt+0x3eec>
   15530:	add	sp, sp, #8
   15534:	pop	{r4, r5, r6, pc}
   15538:	mov	r2, #5
   1553c:	ldr	r1, [pc, #96]	; 155a4 <__assert_fail@plt+0x3f18>
   15540:	mov	r0, #0
   15544:	bl	11368 <dcgettext@plt>
   15548:	mov	r6, r0
   1554c:	ldr	r0, [r5]
   15550:	cmp	r0, #0
   15554:	beq	15584 <__assert_fail@plt+0x3ef8>
   15558:	ldr	r4, [r4]
   1555c:	bl	18d78 <__assert_fail@plt+0x76ec>
   15560:	mov	r1, r4
   15564:	str	r6, [sp]
   15568:	ldr	r2, [pc, #56]	; 155a8 <__assert_fail@plt+0x3f1c>
   1556c:	mov	r3, r0
   15570:	mov	r0, #0
   15574:	bl	11440 <error@plt>
   15578:	ldr	r3, [pc, #44]	; 155ac <__assert_fail@plt+0x3f20>
   1557c:	ldr	r0, [r3]
   15580:	bl	11320 <_exit@plt>
   15584:	mov	r3, r6
   15588:	ldr	r1, [r4]
   1558c:	ldr	r2, [pc, #28]	; 155b0 <__assert_fail@plt+0x3f24>
   15590:	bl	11440 <error@plt>
   15594:	b	15578 <__assert_fail@plt+0x3eec>
   15598:	andeq	sp, r2, ip, ror r0
   1559c:	andeq	sp, r2, ip, asr #2
   155a0:	andeq	sp, r2, r0, ror r0
   155a4:	andeq	ip, r1, r4, lsr r6
   155a8:	andeq	ip, r1, ip, lsr #12
   155ac:	andeq	sp, r2, r4, lsl r0
   155b0:	andeq	ip, r1, r0, lsr r6
   155b4:	push	{r4, r5, r6, r7, r8, lr}
   155b8:	bl	1144c <opendir@plt>
   155bc:	subs	r4, r0, #0
   155c0:	beq	155d0 <__assert_fail@plt+0x3f44>
   155c4:	bl	11608 <dirfd@plt>
   155c8:	cmp	r0, #2
   155cc:	bls	155d8 <__assert_fail@plt+0x3f4c>
   155d0:	mov	r0, r4
   155d4:	pop	{r4, r5, r6, r7, r8, pc}
   155d8:	mov	r2, #3
   155dc:	ldr	r1, [pc, #84]	; 15638 <__assert_fail@plt+0x3fac>
   155e0:	bl	19e70 <__assert_fail@plt+0x87e4>
   155e4:	mov	r6, r0
   155e8:	bl	11500 <__errno_location@plt>
   155ec:	cmp	r6, #0
   155f0:	mov	r5, r0
   155f4:	bge	15618 <__assert_fail@plt+0x3f8c>
   155f8:	ldr	r7, [r0]
   155fc:	mov	r8, #0
   15600:	mov	r0, r4
   15604:	mov	r4, r8
   15608:	bl	11674 <closedir@plt>
   1560c:	str	r7, [r5]
   15610:	mov	r0, r4
   15614:	pop	{r4, r5, r6, r7, r8, pc}
   15618:	mov	r0, r6
   1561c:	bl	115f0 <fdopendir@plt>
   15620:	ldr	r7, [r5]
   15624:	subs	r8, r0, #0
   15628:	bne	15600 <__assert_fail@plt+0x3f74>
   1562c:	mov	r0, r6
   15630:	bl	11668 <close@plt>
   15634:	b	15600 <__assert_fail@plt+0x3f74>
   15638:	andeq	r0, r0, r6, lsl #8
   1563c:	push	{r1, r2, r3}
   15640:	push	{r4, lr}
   15644:	sub	sp, sp, #12
   15648:	ldr	r4, [pc, #68]	; 15694 <__assert_fail@plt+0x4008>
   1564c:	ldr	r1, [sp, #20]
   15650:	ldr	r3, [r4]
   15654:	ands	r2, r1, #64	; 0x40
   15658:	str	r3, [sp, #4]
   1565c:	ldrne	r2, [sp, #24]
   15660:	addne	r3, sp, #24
   15664:	strne	r3, [sp]
   15668:	bl	11458 <open64@plt>
   1566c:	bl	19004 <__assert_fail@plt+0x7978>
   15670:	ldr	r2, [sp, #4]
   15674:	ldr	r3, [r4]
   15678:	cmp	r2, r3
   1567c:	bne	15690 <__assert_fail@plt+0x4004>
   15680:	add	sp, sp, #12
   15684:	pop	{r4, lr}
   15688:	add	sp, sp, #12
   1568c:	bx	lr
   15690:	bl	11374 <__stack_chk_fail@plt>
   15694:	muleq	r2, r8, sp
   15698:	push	{r4, r5, r6, r7, r8, fp, lr}
   1569c:	mov	r7, r2
   156a0:	ldr	r6, [pc, #368]	; 15818 <__assert_fail@plt+0x418c>
   156a4:	add	fp, sp, #24
   156a8:	lsrs	r2, r7, #30
   156ac:	sub	sp, sp, #12
   156b0:	ldr	lr, [r6]
   156b4:	movne	ip, #1
   156b8:	moveq	ip, #0
   156bc:	lsls	r2, r7, #2
   156c0:	str	lr, [fp, #-32]	; 0xffffffe0
   156c4:	bmi	157d8 <__assert_fail@plt+0x414c>
   156c8:	cmp	ip, #0
   156cc:	bne	157d8 <__assert_fail@plt+0x414c>
   156d0:	cmp	r2, #4016	; 0xfb0
   156d4:	mov	r5, r0
   156d8:	mov	r4, r1
   156dc:	mov	r8, r3
   156e0:	bhi	157c8 <__assert_fail@plt+0x413c>
   156e4:	add	r3, r2, #22
   156e8:	bic	r3, r3, #7
   156ec:	sub	sp, sp, r3
   156f0:	add	r0, sp, #15
   156f4:	bic	r0, r0, #15
   156f8:	cmp	r0, #0
   156fc:	beq	157d8 <__assert_fail@plt+0x414c>
   15700:	cmp	r7, #2
   15704:	mov	r3, #1
   15708:	str	r3, [r0, #4]
   1570c:	movhi	r1, r4
   15710:	movhi	ip, #0
   15714:	movhi	r3, #2
   15718:	bls	15760 <__assert_fail@plt+0x40d4>
   1571c:	ldrb	r2, [r1, #1]!
   15720:	ldrb	lr, [r4, ip]
   15724:	cmp	lr, r2
   15728:	bne	15744 <__assert_fail@plt+0x40b8>
   1572c:	b	157fc <__assert_fail@plt+0x4170>
   15730:	ldr	lr, [r0, ip, lsl #2]
   15734:	sub	ip, ip, lr
   15738:	ldrb	lr, [r4, ip]
   1573c:	cmp	lr, r2
   15740:	beq	157fc <__assert_fail@plt+0x4170>
   15744:	cmp	ip, #0
   15748:	bne	15730 <__assert_fail@plt+0x40a4>
   1574c:	mov	ip, #0
   15750:	str	r3, [r0, r3, lsl #2]
   15754:	add	r3, r3, #1
   15758:	cmp	r7, r3
   1575c:	bne	1571c <__assert_fail@plt+0x4090>
   15760:	mov	r3, #0
   15764:	str	r3, [r8]
   15768:	ldrb	r2, [r5]
   1576c:	mov	r1, r5
   15770:	cmp	r2, #0
   15774:	beq	157a8 <__assert_fail@plt+0x411c>
   15778:	ldrb	ip, [r4, r3]
   1577c:	cmp	ip, r2
   15780:	beq	157e0 <__assert_fail@plt+0x4154>
   15784:	cmp	r3, #0
   15788:	addeq	r5, r5, #1
   1578c:	ldrbeq	r2, [r1, #1]
   15790:	ldrne	ip, [r0, r3, lsl #2]
   15794:	addeq	r1, r1, #1
   15798:	addne	r5, r5, ip
   1579c:	subne	r3, r3, ip
   157a0:	cmp	r2, #0
   157a4:	bne	15778 <__assert_fail@plt+0x40ec>
   157a8:	bl	1a368 <__assert_fail@plt+0x8cdc>
   157ac:	mov	r0, #1
   157b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   157b4:	ldr	r3, [r6]
   157b8:	cmp	r2, r3
   157bc:	bne	15814 <__assert_fail@plt+0x4188>
   157c0:	sub	sp, fp, #24
   157c4:	pop	{r4, r5, r6, r7, r8, fp, pc}
   157c8:	mov	r0, r2
   157cc:	bl	1a32c <__assert_fail@plt+0x8ca0>
   157d0:	cmp	r0, #0
   157d4:	bne	15700 <__assert_fail@plt+0x4074>
   157d8:	mov	r0, #0
   157dc:	b	157b0 <__assert_fail@plt+0x4124>
   157e0:	add	r3, r3, #1
   157e4:	cmp	r7, r3
   157e8:	add	ip, r1, #1
   157ec:	beq	1580c <__assert_fail@plt+0x4180>
   157f0:	ldrb	r2, [r1, #1]
   157f4:	mov	r1, ip
   157f8:	b	15770 <__assert_fail@plt+0x40e4>
   157fc:	add	ip, ip, #1
   15800:	sub	r2, r3, ip
   15804:	str	r2, [r0, r3, lsl #2]
   15808:	b	15754 <__assert_fail@plt+0x40c8>
   1580c:	str	r5, [r8]
   15810:	b	157a8 <__assert_fail@plt+0x411c>
   15814:	bl	11374 <__stack_chk_fail@plt>
   15818:	muleq	r2, r8, sp
   1581c:	push	{r4, lr}
   15820:	mov	r2, #179	; 0xb3
   15824:	ldr	r3, [pc, #8]	; 15834 <__assert_fail@plt+0x41a8>
   15828:	ldr	r1, [pc, #8]	; 15838 <__assert_fail@plt+0x41ac>
   1582c:	ldr	r0, [pc, #8]	; 1583c <__assert_fail@plt+0x41b0>
   15830:	bl	1168c <__assert_fail@plt>
   15834:	andeq	ip, r1, r0, asr #12
   15838:	andeq	ip, r1, r4, asr r6
   1583c:	andeq	ip, r1, r0, ror #12
   15840:	ldr	r3, [pc, #2124]	; 16094 <__assert_fail@plt+0x4a08>
   15844:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15848:	add	fp, sp, #32
   1584c:	sub	sp, sp, #196	; 0xc4
   15850:	ldr	r3, [r3]
   15854:	str	r0, [fp, #-220]	; 0xffffff24
   15858:	mov	r0, r1
   1585c:	mov	r7, r1
   15860:	str	r2, [fp, #-224]	; 0xffffff20
   15864:	str	r3, [fp, #-40]	; 0xffffffd8
   15868:	bl	1a42c <__assert_fail@plt+0x8da0>
   1586c:	mov	r2, #44	; 0x2c
   15870:	str	r0, [fp, #-216]	; 0xffffff28
   15874:	umull	r0, r1, r0, r2
   15878:	adds	r3, r1, #0
   1587c:	movne	r3, #1
   15880:	cmp	r0, #0
   15884:	blt	15c44 <__assert_fail@plt+0x45b8>
   15888:	cmp	r3, #0
   1588c:	bne	15c44 <__assert_fail@plt+0x45b8>
   15890:	ldr	r3, [fp, #-216]	; 0xffffff28
   15894:	lsl	r4, r3, #2
   15898:	add	r0, r4, r3
   1589c:	add	r0, r3, r0, lsl #1
   158a0:	lsl	r0, r0, #2
   158a4:	cmp	r0, #4016	; 0xfb0
   158a8:	bhi	15c64 <__assert_fail@plt+0x45d8>
   158ac:	add	r3, r0, #22
   158b0:	bic	r3, r3, #7
   158b4:	sub	sp, sp, r3
   158b8:	add	r8, sp, #15
   158bc:	bic	r8, r8, #15
   158c0:	cmp	r8, #0
   158c4:	beq	15c44 <__assert_fail@plt+0x45b8>
   158c8:	ldr	r3, [fp, #-216]	; 0xffffff28
   158cc:	mov	r5, #0
   158d0:	add	r4, r4, r3
   158d4:	str	r7, [fp, #-192]	; 0xffffff40
   158d8:	add	r9, r8, r4, lsl #3
   158dc:	str	r5, [fp, #-200]	; 0xffffff38
   158e0:	strb	r5, [fp, #-208]	; 0xffffff30
   158e4:	str	r5, [fp, #-204]	; 0xffffff34
   158e8:	strb	r5, [fp, #-196]	; 0xffffff3c
   158ec:	add	r4, r8, #16
   158f0:	ldr	r6, [pc, #1952]	; 16098 <__assert_fail@plt+0x4a0c>
   158f4:	b	15978 <__assert_fail@plt+0x42ec>
   158f8:	ldrb	r3, [r7]
   158fc:	and	r2, r3, #31
   15900:	lsr	r3, r3, #5
   15904:	ldr	r3, [r6, r3, lsl #2]
   15908:	lsr	r3, r3, r2
   1590c:	tst	r3, #1
   15910:	beq	15c70 <__assert_fail@plt+0x45e4>
   15914:	mov	r3, #1
   15918:	str	r3, [fp, #-188]	; 0xffffff44
   1591c:	ldrb	r7, [r7]
   15920:	strb	r3, [fp, #-184]	; 0xffffff48
   15924:	strb	r3, [fp, #-196]	; 0xffffff3c
   15928:	str	r7, [fp, #-180]	; 0xffffff4c
   1592c:	cmp	r7, #0
   15930:	beq	159ec <__assert_fail@plt+0x4360>
   15934:	mov	r3, #1
   15938:	ldr	r1, [fp, #-192]	; 0xffffff40
   1593c:	sub	r2, fp, #176	; 0xb0
   15940:	cmp	r1, r2
   15944:	ldr	r2, [fp, #-188]	; 0xffffff44
   15948:	strne	r1, [r4, #-16]
   1594c:	beq	15c8c <__assert_fail@plt+0x4600>
   15950:	cmp	r3, #0
   15954:	str	r2, [r4, #-12]
   15958:	strb	r3, [r4, #-8]
   1595c:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   15960:	ldr	r7, [fp, #-192]	; 0xffffff40
   15964:	strne	r3, [r4, #-4]
   15968:	add	r4, r4, #40	; 0x28
   1596c:	add	r7, r7, r2
   15970:	strb	r5, [fp, #-196]	; 0xffffff3c
   15974:	str	r7, [fp, #-192]	; 0xffffff40
   15978:	ldrb	r3, [fp, #-208]	; 0xffffff30
   1597c:	cmp	r3, #0
   15980:	beq	158f8 <__assert_fail@plt+0x426c>
   15984:	bl	11410 <__ctype_get_mb_cur_max@plt>
   15988:	mov	r1, r0
   1598c:	mov	r0, r7
   15990:	bl	18fd8 <__assert_fail@plt+0x794c>
   15994:	sub	r3, fp, #204	; 0xcc
   15998:	mov	r1, r7
   1599c:	mov	r2, r0
   159a0:	sub	r0, fp, #180	; 0xb4
   159a4:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   159a8:	cmn	r0, #1
   159ac:	str	r0, [fp, #-188]	; 0xffffff44
   159b0:	beq	15ca4 <__assert_fail@plt+0x4618>
   159b4:	cmn	r0, #2
   159b8:	beq	15cbc <__assert_fail@plt+0x4630>
   159bc:	cmp	r0, #0
   159c0:	beq	15cdc <__assert_fail@plt+0x4650>
   159c4:	ldr	r7, [fp, #-180]	; 0xffffff4c
   159c8:	mov	sl, #1
   159cc:	sub	r0, fp, #204	; 0xcc
   159d0:	strb	sl, [fp, #-184]	; 0xffffff48
   159d4:	bl	11344 <mbsinit@plt>
   159d8:	strb	sl, [fp, #-196]	; 0xffffff3c
   159dc:	cmp	r0, #0
   159e0:	strbne	r5, [fp, #-208]	; 0xffffff30
   159e4:	cmp	r7, #0
   159e8:	bne	15934 <__assert_fail@plt+0x42a8>
   159ec:	ldr	r3, [fp, #-216]	; 0xffffff28
   159f0:	cmp	r3, #2
   159f4:	mov	r3, #1
   159f8:	str	r3, [r9, #4]
   159fc:	bls	15aa0 <__assert_fail@plt+0x4414>
   15a00:	mov	sl, #2
   15a04:	mov	r4, r7
   15a08:	str	r7, [fp, #-228]	; 0xffffff1c
   15a0c:	mov	r7, sl
   15a10:	ldr	sl, [fp, #-216]	; 0xffffff28
   15a14:	mov	r5, r8
   15a18:	ldrb	r6, [r5, #48]	; 0x30
   15a1c:	b	15a4c <__assert_fail@plt+0x43c0>
   15a20:	ldrb	r2, [r3, #8]
   15a24:	cmp	r2, #0
   15a28:	beq	15a5c <__assert_fail@plt+0x43d0>
   15a2c:	ldr	r3, [r3, #12]
   15a30:	ldr	r2, [r5, #52]	; 0x34
   15a34:	cmp	r2, r3
   15a38:	beq	15a80 <__assert_fail@plt+0x43f4>
   15a3c:	cmp	r4, #0
   15a40:	beq	15fb8 <__assert_fail@plt+0x492c>
   15a44:	ldr	r3, [r9, r4, lsl #2]
   15a48:	sub	r4, r4, r3
   15a4c:	add	r3, r4, r4, lsl #2
   15a50:	cmp	r6, #0
   15a54:	add	r3, r8, r3, lsl #3
   15a58:	bne	15a20 <__assert_fail@plt+0x4394>
   15a5c:	ldr	r2, [r5, #44]	; 0x2c
   15a60:	ldr	r1, [r3, #4]
   15a64:	cmp	r2, r1
   15a68:	bne	15a3c <__assert_fail@plt+0x43b0>
   15a6c:	ldr	r1, [r3]
   15a70:	ldr	r0, [r5, #40]	; 0x28
   15a74:	bl	1135c <memcmp@plt>
   15a78:	cmp	r0, #0
   15a7c:	bne	15a3c <__assert_fail@plt+0x43b0>
   15a80:	add	r4, r4, #1
   15a84:	sub	r2, r7, r4
   15a88:	str	r2, [r9, r7, lsl #2]
   15a8c:	add	r7, r7, #1
   15a90:	cmp	sl, r7
   15a94:	add	r5, r5, #40	; 0x28
   15a98:	bne	15a18 <__assert_fail@plt+0x438c>
   15a9c:	ldr	r7, [fp, #-228]	; 0xffffff1c
   15aa0:	ldr	r2, [fp, #-220]	; 0xffffff24
   15aa4:	ldr	sl, [pc, #1516]	; 16098 <__assert_fail@plt+0x4a0c>
   15aa8:	str	r2, [fp, #-136]	; 0xffffff78
   15aac:	str	r2, [fp, #-80]	; 0xffffffb0
   15ab0:	ldr	r2, [fp, #-224]	; 0xffffff20
   15ab4:	mov	r6, #1
   15ab8:	mov	r3, #0
   15abc:	str	r3, [fp, #-144]	; 0xffffff70
   15ac0:	str	r3, [r2]
   15ac4:	strb	r3, [fp, #-152]	; 0xffffff68
   15ac8:	str	r3, [fp, #-148]	; 0xffffff6c
   15acc:	strb	r3, [fp, #-140]	; 0xffffff74
   15ad0:	strb	r3, [fp, #-96]	; 0xffffffa0
   15ad4:	str	r3, [fp, #-92]	; 0xffffffa4
   15ad8:	strb	r3, [fp, #-84]	; 0xffffffac
   15adc:	str	r3, [fp, #-88]	; 0xffffffa8
   15ae0:	cmp	r3, #0
   15ae4:	ldreq	r5, [fp, #-80]	; 0xffffffb0
   15ae8:	beq	15b9c <__assert_fail@plt+0x4510>
   15aec:	ldrb	r3, [fp, #-72]	; 0xffffffb8
   15af0:	cmp	r3, #0
   15af4:	ldrne	r4, [fp, #-68]	; 0xffffffbc
   15af8:	bne	15bd8 <__assert_fail@plt+0x454c>
   15afc:	add	r3, r7, r7, lsl #2
   15b00:	add	r3, r8, r3, lsl #3
   15b04:	ldr	r2, [r3, #4]
   15b08:	ldr	r4, [fp, #-76]	; 0xffffffb4
   15b0c:	cmp	r2, r4
   15b10:	beq	15d80 <__assert_fail@plt+0x46f4>
   15b14:	cmp	r7, #0
   15b18:	bne	15da4 <__assert_fail@plt+0x4718>
   15b1c:	ldrb	r3, [fp, #-140]	; 0xffffff74
   15b20:	cmp	r3, #0
   15b24:	bne	16000 <__assert_fail@plt+0x4974>
   15b28:	ldrb	r3, [fp, #-152]	; 0xffffff68
   15b2c:	ldr	r4, [fp, #-136]	; 0xffffff78
   15b30:	cmp	r3, #0
   15b34:	bne	15f50 <__assert_fail@plt+0x48c4>
   15b38:	ldrb	r3, [r4]
   15b3c:	and	r2, r3, #31
   15b40:	lsr	r3, r3, #5
   15b44:	ldr	r3, [sl, r3, lsl #2]
   15b48:	lsr	r3, r3, r2
   15b4c:	tst	r3, #1
   15b50:	beq	15f3c <__assert_fail@plt+0x48b0>
   15b54:	str	r6, [fp, #-132]	; 0xffffff7c
   15b58:	ldrb	r4, [r4]
   15b5c:	strb	r6, [fp, #-128]	; 0xffffff80
   15b60:	strb	r6, [fp, #-140]	; 0xffffff74
   15b64:	str	r4, [fp, #-124]	; 0xffffff84
   15b68:	cmp	r4, #0
   15b6c:	beq	15e3c <__assert_fail@plt+0x47b0>
   15b70:	ldr	r4, [fp, #-136]	; 0xffffff78
   15b74:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15b78:	ldr	r5, [fp, #-80]	; 0xffffffb0
   15b7c:	add	r4, r4, r3
   15b80:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15b84:	str	r4, [fp, #-136]	; 0xffffff78
   15b88:	add	r5, r5, r3
   15b8c:	mov	r3, #0
   15b90:	str	r5, [fp, #-80]	; 0xffffffb0
   15b94:	strb	r3, [fp, #-140]	; 0xffffff74
   15b98:	strb	r3, [fp, #-84]	; 0xffffffac
   15b9c:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   15ba0:	cmp	r3, #0
   15ba4:	bne	15d18 <__assert_fail@plt+0x468c>
   15ba8:	ldrb	r3, [r5]
   15bac:	and	r2, r3, #31
   15bb0:	lsr	r3, r3, #5
   15bb4:	ldr	r3, [sl, r3, lsl #2]
   15bb8:	lsr	r3, r3, r2
   15bbc:	tst	r3, #1
   15bc0:	beq	15d04 <__assert_fail@plt+0x4678>
   15bc4:	str	r6, [fp, #-76]	; 0xffffffb4
   15bc8:	ldrb	r4, [r5]
   15bcc:	strb	r6, [fp, #-72]	; 0xffffffb8
   15bd0:	strb	r6, [fp, #-84]	; 0xffffffac
   15bd4:	str	r4, [fp, #-68]	; 0xffffffbc
   15bd8:	cmp	r4, #0
   15bdc:	beq	15c34 <__assert_fail@plt+0x45a8>
   15be0:	add	r3, r7, r7, lsl #2
   15be4:	add	r3, r8, r3, lsl #3
   15be8:	ldrb	r2, [r3, #8]
   15bec:	cmp	r2, #0
   15bf0:	beq	15b04 <__assert_fail@plt+0x4478>
   15bf4:	ldr	r3, [r3, #12]
   15bf8:	cmp	r3, r4
   15bfc:	bne	15b14 <__assert_fail@plt+0x4488>
   15c00:	ldr	r4, [fp, #-76]	; 0xffffffb4
   15c04:	ldr	r5, [fp, #-80]	; 0xffffffb0
   15c08:	ldr	r3, [fp, #-216]	; 0xffffff28
   15c0c:	add	r7, r7, #1
   15c10:	cmp	r3, r7
   15c14:	add	r5, r5, r4
   15c18:	mov	r3, #0
   15c1c:	str	r5, [fp, #-80]	; 0xffffffb0
   15c20:	strb	r3, [fp, #-84]	; 0xffffffac
   15c24:	bne	15b9c <__assert_fail@plt+0x4510>
   15c28:	ldr	r2, [fp, #-224]	; 0xffffff20
   15c2c:	ldr	r3, [fp, #-136]	; 0xffffff78
   15c30:	str	r3, [r2]
   15c34:	mov	r0, r8
   15c38:	bl	1a368 <__assert_fail@plt+0x8cdc>
   15c3c:	mov	r0, #1
   15c40:	b	15c48 <__assert_fail@plt+0x45bc>
   15c44:	mov	r0, #0
   15c48:	ldr	r3, [pc, #1092]	; 16094 <__assert_fail@plt+0x4a08>
   15c4c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15c50:	ldr	r3, [r3]
   15c54:	cmp	r2, r3
   15c58:	bne	16090 <__assert_fail@plt+0x4a04>
   15c5c:	sub	sp, fp, #32
   15c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c64:	bl	1a32c <__assert_fail@plt+0x8ca0>
   15c68:	mov	r8, r0
   15c6c:	b	158c0 <__assert_fail@plt+0x4234>
   15c70:	sub	r0, fp, #204	; 0xcc
   15c74:	bl	11344 <mbsinit@plt>
   15c78:	cmp	r0, #0
   15c7c:	beq	16068 <__assert_fail@plt+0x49dc>
   15c80:	mov	r3, #1
   15c84:	strb	r3, [fp, #-208]	; 0xffffff30
   15c88:	b	15984 <__assert_fail@plt+0x42f8>
   15c8c:	mov	r0, r4
   15c90:	bl	1132c <memcpy@plt>
   15c94:	str	r4, [r4, #-16]
   15c98:	ldrb	r3, [fp, #-184]	; 0xffffff48
   15c9c:	ldr	r2, [fp, #-188]	; 0xffffff44
   15ca0:	b	15950 <__assert_fail@plt+0x42c4>
   15ca4:	mov	r3, #1
   15ca8:	str	r3, [fp, #-188]	; 0xffffff44
   15cac:	strb	r3, [fp, #-196]	; 0xffffff3c
   15cb0:	strb	r5, [fp, #-184]	; 0xffffff48
   15cb4:	mov	r3, #0
   15cb8:	b	15938 <__assert_fail@plt+0x42ac>
   15cbc:	ldr	r0, [fp, #-192]	; 0xffffff40
   15cc0:	bl	114dc <strlen@plt>
   15cc4:	mov	r3, #1
   15cc8:	strb	r3, [fp, #-196]	; 0xffffff3c
   15ccc:	strb	r5, [fp, #-184]	; 0xffffff48
   15cd0:	mov	r3, #0
   15cd4:	str	r0, [fp, #-188]	; 0xffffff44
   15cd8:	b	15938 <__assert_fail@plt+0x42ac>
   15cdc:	ldr	r3, [fp, #-192]	; 0xffffff40
   15ce0:	mov	r2, #1
   15ce4:	str	r2, [fp, #-188]	; 0xffffff44
   15ce8:	ldrb	r3, [r3]
   15cec:	cmp	r3, #0
   15cf0:	bne	1607c <__assert_fail@plt+0x49f0>
   15cf4:	ldr	r7, [fp, #-180]	; 0xffffff4c
   15cf8:	cmp	r7, #0
   15cfc:	beq	159c8 <__assert_fail@plt+0x433c>
   15d00:	bl	1581c <__assert_fail@plt+0x4190>
   15d04:	sub	r0, fp, #92	; 0x5c
   15d08:	bl	11344 <mbsinit@plt>
   15d0c:	cmp	r0, #0
   15d10:	beq	16068 <__assert_fail@plt+0x49dc>
   15d14:	strb	r6, [fp, #-96]	; 0xffffffa0
   15d18:	bl	11410 <__ctype_get_mb_cur_max@plt>
   15d1c:	mov	r1, r0
   15d20:	mov	r0, r5
   15d24:	bl	18fd8 <__assert_fail@plt+0x794c>
   15d28:	sub	r3, fp, #92	; 0x5c
   15d2c:	mov	r1, r5
   15d30:	mov	r2, r0
   15d34:	sub	r0, fp, #68	; 0x44
   15d38:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   15d3c:	cmn	r0, #1
   15d40:	str	r0, [fp, #-76]	; 0xffffffb4
   15d44:	beq	15f28 <__assert_fail@plt+0x489c>
   15d48:	cmn	r0, #2
   15d4c:	beq	15fc0 <__assert_fail@plt+0x4934>
   15d50:	cmp	r0, #0
   15d54:	beq	15fdc <__assert_fail@plt+0x4950>
   15d58:	ldr	r4, [fp, #-68]	; 0xffffffbc
   15d5c:	sub	r0, fp, #92	; 0x5c
   15d60:	strb	r6, [fp, #-72]	; 0xffffffb8
   15d64:	bl	11344 <mbsinit@plt>
   15d68:	cmp	r0, #0
   15d6c:	movne	r3, #0
   15d70:	strbeq	r6, [fp, #-84]	; 0xffffffac
   15d74:	strbne	r6, [fp, #-84]	; 0xffffffac
   15d78:	strbne	r3, [fp, #-96]	; 0xffffffa0
   15d7c:	b	15bd8 <__assert_fail@plt+0x454c>
   15d80:	ldr	r5, [fp, #-80]	; 0xffffffb0
   15d84:	ldr	r0, [r3]
   15d88:	mov	r1, r5
   15d8c:	mov	r2, r4
   15d90:	bl	1135c <memcmp@plt>
   15d94:	cmp	r0, #0
   15d98:	beq	15c08 <__assert_fail@plt+0x457c>
   15d9c:	cmp	r7, #0
   15da0:	beq	15b1c <__assert_fail@plt+0x4490>
   15da4:	ldr	r5, [r9, r7, lsl #2]
   15da8:	sub	r3, r7, r5
   15dac:	cmp	r5, #0
   15db0:	str	r3, [fp, #-220]	; 0xffffff24
   15db4:	beq	15f20 <__assert_fail@plt+0x4894>
   15db8:	ldrb	r3, [fp, #-140]	; 0xffffff74
   15dbc:	cmp	r3, #0
   15dc0:	ldreq	r4, [fp, #-136]	; 0xffffff78
   15dc4:	beq	15df8 <__assert_fail@plt+0x476c>
   15dc8:	ldrb	r3, [fp, #-128]	; 0xffffff80
   15dcc:	cmp	r3, #0
   15dd0:	ldrne	r4, [fp, #-124]	; 0xffffff84
   15dd4:	bne	15e34 <__assert_fail@plt+0x47a8>
   15dd8:	ldr	r4, [fp, #-136]	; 0xffffff78
   15ddc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15de0:	subs	r5, r5, #1
   15de4:	add	r4, r4, r3
   15de8:	mov	r3, #0
   15dec:	str	r4, [fp, #-136]	; 0xffffff78
   15df0:	strb	r3, [fp, #-140]	; 0xffffff74
   15df4:	beq	15f1c <__assert_fail@plt+0x4890>
   15df8:	ldrb	r3, [fp, #-152]	; 0xffffff68
   15dfc:	cmp	r3, #0
   15e00:	bne	15e54 <__assert_fail@plt+0x47c8>
   15e04:	ldrb	r3, [r4]
   15e08:	and	r2, r3, #31
   15e0c:	lsr	r3, r3, #5
   15e10:	ldr	r3, [sl, r3, lsl #2]
   15e14:	lsr	r3, r3, r2
   15e18:	tst	r3, #1
   15e1c:	beq	15e40 <__assert_fail@plt+0x47b4>
   15e20:	str	r6, [fp, #-132]	; 0xffffff7c
   15e24:	ldrb	r4, [r4]
   15e28:	strb	r6, [fp, #-128]	; 0xffffff80
   15e2c:	strb	r6, [fp, #-140]	; 0xffffff74
   15e30:	str	r4, [fp, #-124]	; 0xffffff84
   15e34:	cmp	r4, #0
   15e38:	bne	15dd8 <__assert_fail@plt+0x474c>
   15e3c:	bl	11650 <abort@plt>
   15e40:	sub	r0, fp, #148	; 0x94
   15e44:	bl	11344 <mbsinit@plt>
   15e48:	cmp	r0, #0
   15e4c:	beq	16068 <__assert_fail@plt+0x49dc>
   15e50:	strb	r6, [fp, #-152]	; 0xffffff68
   15e54:	bl	11410 <__ctype_get_mb_cur_max@plt>
   15e58:	mov	r1, r0
   15e5c:	mov	r0, r4
   15e60:	bl	18fd8 <__assert_fail@plt+0x794c>
   15e64:	sub	r3, fp, #148	; 0x94
   15e68:	mov	r1, r4
   15e6c:	mov	r2, r0
   15e70:	sub	r0, fp, #124	; 0x7c
   15e74:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   15e78:	cmn	r0, #1
   15e7c:	str	r0, [fp, #-132]	; 0xffffff7c
   15e80:	beq	15ebc <__assert_fail@plt+0x4830>
   15e84:	cmn	r0, #2
   15e88:	beq	15ecc <__assert_fail@plt+0x4840>
   15e8c:	cmp	r0, #0
   15e90:	beq	15ee8 <__assert_fail@plt+0x485c>
   15e94:	ldr	r4, [fp, #-124]	; 0xffffff84
   15e98:	sub	r0, fp, #148	; 0x94
   15e9c:	strb	r6, [fp, #-128]	; 0xffffff80
   15ea0:	bl	11344 <mbsinit@plt>
   15ea4:	cmp	r0, #0
   15ea8:	movne	r3, #0
   15eac:	strbeq	r6, [fp, #-140]	; 0xffffff74
   15eb0:	strbne	r6, [fp, #-140]	; 0xffffff74
   15eb4:	strbne	r3, [fp, #-152]	; 0xffffff68
   15eb8:	b	15e34 <__assert_fail@plt+0x47a8>
   15ebc:	mov	r3, #0
   15ec0:	str	r6, [fp, #-132]	; 0xffffff7c
   15ec4:	strb	r3, [fp, #-128]	; 0xffffff80
   15ec8:	b	15dd8 <__assert_fail@plt+0x474c>
   15ecc:	ldr	r4, [fp, #-136]	; 0xffffff78
   15ed0:	mov	r0, r4
   15ed4:	bl	114dc <strlen@plt>
   15ed8:	mov	r3, #0
   15edc:	strb	r3, [fp, #-128]	; 0xffffff80
   15ee0:	str	r0, [fp, #-132]	; 0xffffff7c
   15ee4:	b	15ddc <__assert_fail@plt+0x4750>
   15ee8:	ldr	r4, [fp, #-136]	; 0xffffff78
   15eec:	str	r6, [fp, #-132]	; 0xffffff7c
   15ef0:	ldrb	r3, [r4]
   15ef4:	cmp	r3, #0
   15ef8:	bne	1607c <__assert_fail@plt+0x49f0>
   15efc:	ldr	r4, [fp, #-124]	; 0xffffff84
   15f00:	cmp	r4, #0
   15f04:	beq	15e98 <__assert_fail@plt+0x480c>
   15f08:	ldr	r3, [pc, #396]	; 1609c <__assert_fail@plt+0x4a10>
   15f0c:	mov	r2, #179	; 0xb3
   15f10:	ldr	r1, [pc, #392]	; 160a0 <__assert_fail@plt+0x4a14>
   15f14:	ldr	r0, [pc, #392]	; 160a4 <__assert_fail@plt+0x4a18>
   15f18:	bl	1168c <__assert_fail@plt>
   15f1c:	ldr	r7, [fp, #-220]	; 0xffffff24
   15f20:	ldrb	r3, [fp, #-84]	; 0xffffffac
   15f24:	b	15ae0 <__assert_fail@plt+0x4454>
   15f28:	mov	r3, #0
   15f2c:	str	r6, [fp, #-76]	; 0xffffffb4
   15f30:	strb	r6, [fp, #-84]	; 0xffffffac
   15f34:	strb	r3, [fp, #-72]	; 0xffffffb8
   15f38:	b	15afc <__assert_fail@plt+0x4470>
   15f3c:	sub	r0, fp, #148	; 0x94
   15f40:	bl	11344 <mbsinit@plt>
   15f44:	cmp	r0, #0
   15f48:	beq	16068 <__assert_fail@plt+0x49dc>
   15f4c:	strb	r6, [fp, #-152]	; 0xffffff68
   15f50:	bl	11410 <__ctype_get_mb_cur_max@plt>
   15f54:	mov	r1, r0
   15f58:	mov	r0, r4
   15f5c:	bl	18fd8 <__assert_fail@plt+0x794c>
   15f60:	sub	r3, fp, #148	; 0x94
   15f64:	mov	r1, r4
   15f68:	mov	r2, r0
   15f6c:	sub	r0, fp, #124	; 0x7c
   15f70:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   15f74:	cmn	r0, #1
   15f78:	str	r0, [fp, #-132]	; 0xffffff7c
   15f7c:	beq	16014 <__assert_fail@plt+0x4988>
   15f80:	cmn	r0, #2
   15f84:	beq	16028 <__assert_fail@plt+0x499c>
   15f88:	cmp	r0, #0
   15f8c:	beq	16044 <__assert_fail@plt+0x49b8>
   15f90:	ldr	r4, [fp, #-124]	; 0xffffff84
   15f94:	sub	r0, fp, #148	; 0x94
   15f98:	strb	r6, [fp, #-128]	; 0xffffff80
   15f9c:	bl	11344 <mbsinit@plt>
   15fa0:	cmp	r0, #0
   15fa4:	movne	r3, #0
   15fa8:	strbeq	r6, [fp, #-140]	; 0xffffff74
   15fac:	strbne	r6, [fp, #-140]	; 0xffffff74
   15fb0:	strbne	r3, [fp, #-152]	; 0xffffff68
   15fb4:	b	15b68 <__assert_fail@plt+0x44dc>
   15fb8:	str	r7, [r9, r7, lsl #2]
   15fbc:	b	15a8c <__assert_fail@plt+0x4400>
   15fc0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15fc4:	bl	114dc <strlen@plt>
   15fc8:	mov	r3, #0
   15fcc:	strb	r6, [fp, #-84]	; 0xffffffac
   15fd0:	strb	r3, [fp, #-72]	; 0xffffffb8
   15fd4:	str	r0, [fp, #-76]	; 0xffffffb4
   15fd8:	b	15afc <__assert_fail@plt+0x4470>
   15fdc:	ldr	r5, [fp, #-80]	; 0xffffffb0
   15fe0:	str	r6, [fp, #-76]	; 0xffffffb4
   15fe4:	ldrb	r3, [r5]
   15fe8:	cmp	r3, #0
   15fec:	bne	1607c <__assert_fail@plt+0x49f0>
   15ff0:	ldr	r4, [fp, #-68]	; 0xffffffbc
   15ff4:	cmp	r4, #0
   15ff8:	beq	15d5c <__assert_fail@plt+0x46d0>
   15ffc:	b	15d00 <__assert_fail@plt+0x4674>
   16000:	ldrb	r3, [fp, #-128]	; 0xffffff80
   16004:	cmp	r3, #0
   16008:	ldrne	r4, [fp, #-124]	; 0xffffff84
   1600c:	beq	15b70 <__assert_fail@plt+0x44e4>
   16010:	b	15b68 <__assert_fail@plt+0x44dc>
   16014:	mov	r3, #0
   16018:	str	r6, [fp, #-132]	; 0xffffff7c
   1601c:	strb	r3, [fp, #-128]	; 0xffffff80
   16020:	ldr	r4, [fp, #-136]	; 0xffffff78
   16024:	b	15b74 <__assert_fail@plt+0x44e8>
   16028:	ldr	r4, [fp, #-136]	; 0xffffff78
   1602c:	mov	r0, r4
   16030:	bl	114dc <strlen@plt>
   16034:	mov	r3, #0
   16038:	strb	r3, [fp, #-128]	; 0xffffff80
   1603c:	str	r0, [fp, #-132]	; 0xffffff7c
   16040:	b	15b74 <__assert_fail@plt+0x44e8>
   16044:	ldr	r4, [fp, #-136]	; 0xffffff78
   16048:	str	r6, [fp, #-132]	; 0xffffff7c
   1604c:	ldrb	r3, [r4]
   16050:	cmp	r3, #0
   16054:	bne	1607c <__assert_fail@plt+0x49f0>
   16058:	ldr	r4, [fp, #-124]	; 0xffffff84
   1605c:	cmp	r4, #0
   16060:	beq	15f94 <__assert_fail@plt+0x4908>
   16064:	b	15d00 <__assert_fail@plt+0x4674>
   16068:	ldr	r3, [pc, #44]	; 1609c <__assert_fail@plt+0x4a10>
   1606c:	mov	r2, #150	; 0x96
   16070:	ldr	r1, [pc, #40]	; 160a0 <__assert_fail@plt+0x4a14>
   16074:	ldr	r0, [pc, #44]	; 160a8 <__assert_fail@plt+0x4a1c>
   16078:	bl	1168c <__assert_fail@plt>
   1607c:	ldr	r3, [pc, #24]	; 1609c <__assert_fail@plt+0x4a10>
   16080:	mov	r2, #178	; 0xb2
   16084:	ldr	r1, [pc, #20]	; 160a0 <__assert_fail@plt+0x4a14>
   16088:	ldr	r0, [pc, #28]	; 160ac <__assert_fail@plt+0x4a20>
   1608c:	bl	1168c <__assert_fail@plt>
   16090:	bl	11374 <__stack_chk_fail@plt>
   16094:	muleq	r2, r8, sp
   16098:	andeq	ip, r1, r4, lsr #22
   1609c:	andeq	ip, r1, r0, asr #12
   160a0:	andeq	ip, r1, r4, asr r6
   160a4:	andeq	ip, r1, r0, ror #12
   160a8:	andeq	ip, r1, r4, ror r6
   160ac:	andeq	ip, r1, ip, lsl #13
   160b0:	ldr	r3, [pc, #3108]	; 16cdc <__assert_fail@plt+0x5650>
   160b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160b8:	sub	sp, sp, #308	; 0x134
   160bc:	ldr	r3, [r3]
   160c0:	str	r0, [sp, #4]
   160c4:	mov	fp, r1
   160c8:	str	r3, [sp, #300]	; 0x12c
   160cc:	bl	11410 <__ctype_get_mb_cur_max@plt>
   160d0:	cmp	r0, #1
   160d4:	bhi	16300 <__assert_fail@plt+0x4c74>
   160d8:	ldrb	r7, [fp]
   160dc:	cmp	r7, #0
   160e0:	beq	1627c <__assert_fail@plt+0x4bf0>
   160e4:	ldr	r3, [sp, #4]
   160e8:	ldrb	r8, [r3]
   160ec:	add	r3, fp, #1
   160f0:	str	r3, [sp, #8]
   160f4:	cmp	r8, #0
   160f8:	beq	162f8 <__assert_fail@plt+0x4c6c>
   160fc:	ldr	sl, [sp, #4]
   16100:	mov	r5, #0
   16104:	mov	ip, r5
   16108:	str	r5, [sp]
   1610c:	mov	r9, fp
   16110:	mov	lr, #1
   16114:	mov	r6, sl
   16118:	b	1617c <__assert_fail@plt+0x4af0>
   1611c:	cmp	r9, #0
   16120:	str	r3, [sp, #4]
   16124:	beq	1614c <__assert_fail@plt+0x4ac0>
   16128:	ldr	r3, [sp]
   1612c:	mov	r0, r9
   16130:	sub	r1, r4, r3
   16134:	bl	11578 <strnlen@plt>
   16138:	ldr	r3, [sp, #4]
   1613c:	ldrb	r2, [r9, r0]!
   16140:	cmp	r2, #0
   16144:	bne	16a2c <__assert_fail@plt+0x53a0>
   16148:	str	r4, [sp]
   1614c:	mov	r0, fp
   16150:	bl	114dc <strlen@plt>
   16154:	add	r3, sp, #16
   16158:	mov	r1, fp
   1615c:	mov	r2, r0
   16160:	mov	r0, r6
   16164:	bl	15698 <__assert_fail@plt+0x400c>
   16168:	subs	lr, r0, #0
   1616c:	bne	16c68 <__assert_fail@plt+0x55dc>
   16170:	ldrb	r8, [sl, r5]
   16174:	mov	r9, lr
   16178:	mov	ip, r4
   1617c:	add	r5, r5, #1
   16180:	mov	r0, r6
   16184:	cmp	r7, r8
   16188:	add	r6, r5, sl
   1618c:	mov	r1, r6
   16190:	add	r4, ip, #1
   16194:	beq	1629c <__assert_fail@plt+0x4c10>
   16198:	ldrb	r8, [sl, r5]
   1619c:	cmp	r8, #0
   161a0:	beq	162f8 <__assert_fail@plt+0x4c6c>
   161a4:	cmp	r5, #9
   161a8:	movls	r3, #0
   161ac:	andhi	r3, lr, #1
   161b0:	cmp	r3, #0
   161b4:	beq	16178 <__assert_fail@plt+0x4aec>
   161b8:	add	r2, r5, r5, lsl #2
   161bc:	cmp	r4, r2
   161c0:	bcs	1611c <__assert_fail@plt+0x4a90>
   161c4:	mov	lr, r3
   161c8:	b	16178 <__assert_fail@plt+0x4aec>
   161cc:	add	r0, sp, #24
   161d0:	bl	11344 <mbsinit@plt>
   161d4:	cmp	r0, #0
   161d8:	beq	16cb0 <__assert_fail@plt+0x5624>
   161dc:	mov	r5, #1
   161e0:	strb	r5, [sp, #20]
   161e4:	bl	11410 <__ctype_get_mb_cur_max@plt>
   161e8:	mov	r1, r0
   161ec:	mov	r0, fp
   161f0:	bl	18fd8 <__assert_fail@plt+0x794c>
   161f4:	add	r3, sp, #24
   161f8:	mov	r1, fp
   161fc:	mov	r2, r0
   16200:	add	r0, sp, #48	; 0x30
   16204:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   16208:	cmn	r0, #1
   1620c:	str	r0, [sp, #40]	; 0x28
   16210:	strbeq	r4, [sp, #44]	; 0x2c
   16214:	streq	r5, [sp, #40]	; 0x28
   16218:	strbeq	r5, [sp, #32]
   1621c:	beq	16368 <__assert_fail@plt+0x4cdc>
   16220:	cmn	r0, #2
   16224:	beq	16354 <__assert_fail@plt+0x4cc8>
   16228:	cmp	r0, #0
   1622c:	bne	16c48 <__assert_fail@plt+0x55bc>
   16230:	ldr	r3, [sp, #36]	; 0x24
   16234:	str	r5, [sp, #40]	; 0x28
   16238:	ldrb	r3, [r3]
   1623c:	cmp	r3, #0
   16240:	bne	16cc4 <__assert_fail@plt+0x5638>
   16244:	ldr	r4, [sp, #48]	; 0x30
   16248:	cmp	r4, #0
   1624c:	bne	16c90 <__assert_fail@plt+0x5604>
   16250:	mov	r5, #1
   16254:	add	r0, sp, #24
   16258:	strb	r5, [sp, #44]	; 0x2c
   1625c:	bl	11344 <mbsinit@plt>
   16260:	cmp	r0, #0
   16264:	movne	r3, #0
   16268:	strbeq	r5, [sp, #32]
   1626c:	strbne	r5, [sp, #32]
   16270:	strbne	r3, [sp, #20]
   16274:	cmp	r4, #0
   16278:	bne	16368 <__assert_fail@plt+0x4cdc>
   1627c:	ldr	r0, [sp, #4]
   16280:	ldr	r3, [pc, #2644]	; 16cdc <__assert_fail@plt+0x5650>
   16284:	ldr	r2, [sp, #300]	; 0x12c
   16288:	ldr	r3, [r3]
   1628c:	cmp	r2, r3
   16290:	bne	16cd8 <__assert_fail@plt+0x564c>
   16294:	add	sp, sp, #308	; 0x134
   16298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1629c:	ldrb	r3, [fp, #1]
   162a0:	cmp	r3, #0
   162a4:	beq	16280 <__assert_fail@plt+0x4bf4>
   162a8:	ldrb	r8, [sl, r5]
   162ac:	cmp	r8, #0
   162b0:	beq	162f8 <__assert_fail@plt+0x4c6c>
   162b4:	cmp	r3, r8
   162b8:	add	r4, ip, #2
   162bc:	bne	161a4 <__assert_fail@plt+0x4b18>
   162c0:	ldr	r3, [sp, #8]
   162c4:	add	r3, r3, #1
   162c8:	b	162e0 <__assert_fail@plt+0x4c54>
   162cc:	add	r3, r3, #1
   162d0:	cmp	r2, r4
   162d4:	sub	r4, r3, fp
   162d8:	add	r4, r4, ip
   162dc:	bne	161a4 <__assert_fail@plt+0x4b18>
   162e0:	ldrb	r2, [r3]
   162e4:	cmp	r2, #0
   162e8:	beq	16280 <__assert_fail@plt+0x4bf4>
   162ec:	ldrb	r4, [r1, #1]!
   162f0:	cmp	r4, #0
   162f4:	bne	162cc <__assert_fail@plt+0x4c40>
   162f8:	mov	r0, #0
   162fc:	b	16280 <__assert_fail@plt+0x4bf4>
   16300:	ldrb	r1, [fp]
   16304:	ldr	r8, [pc, #2516]	; 16ce0 <__assert_fail@plt+0x5654>
   16308:	str	fp, [sp, #36]	; 0x24
   1630c:	and	r0, r1, #31
   16310:	lsr	r3, r1, #5
   16314:	ldr	r2, [r8, r3, lsl #2]
   16318:	mov	r3, #0
   1631c:	str	r3, [sp, #28]
   16320:	lsr	r2, r2, r0
   16324:	ands	r4, r2, #1
   16328:	strb	r3, [sp, #20]
   1632c:	str	r3, [sp, #24]
   16330:	strb	r3, [sp, #32]
   16334:	beq	161cc <__assert_fail@plt+0x4b40>
   16338:	mov	r3, #1
   1633c:	str	r1, [sp, #48]	; 0x30
   16340:	mov	r4, r1
   16344:	str	r3, [sp, #40]	; 0x28
   16348:	strb	r3, [sp, #44]	; 0x2c
   1634c:	strb	r3, [sp, #32]
   16350:	b	16274 <__assert_fail@plt+0x4be8>
   16354:	ldr	r0, [sp, #36]	; 0x24
   16358:	bl	114dc <strlen@plt>
   1635c:	strb	r4, [sp, #44]	; 0x2c
   16360:	strb	r5, [sp, #32]
   16364:	str	r0, [sp, #40]	; 0x28
   16368:	mov	r3, #0
   1636c:	str	r3, [sp, #12]
   16370:	mov	r6, r3
   16374:	mov	r7, r3
   16378:	str	fp, [sp, #92]	; 0x5c
   1637c:	strb	r3, [sp, #76]	; 0x4c
   16380:	str	r3, [sp, #80]	; 0x50
   16384:	strb	r3, [sp, #88]	; 0x58
   16388:	strb	r3, [sp, #132]	; 0x84
   1638c:	str	r3, [sp, #136]	; 0x88
   16390:	strb	r3, [sp, #144]	; 0x90
   16394:	str	r3, [sp, #84]	; 0x54
   16398:	str	r3, [sp, #140]	; 0x8c
   1639c:	str	fp, [sp, #8]
   163a0:	mov	fp, r3
   163a4:	ldrb	r3, [sp, #132]	; 0x84
   163a8:	mov	r1, #1
   163ac:	str	r1, [sp]
   163b0:	mov	r4, r1
   163b4:	mov	r9, r1
   163b8:	ldr	r1, [sp, #4]
   163bc:	cmp	r3, #0
   163c0:	mov	r5, r1
   163c4:	str	r1, [sp, #148]	; 0x94
   163c8:	bne	166a8 <__assert_fail@plt+0x501c>
   163cc:	ldrb	r3, [r5]
   163d0:	and	r2, r3, #31
   163d4:	lsr	r3, r3, #5
   163d8:	ldr	r3, [r8, r3, lsl #2]
   163dc:	lsr	r3, r3, r2
   163e0:	tst	r3, #1
   163e4:	beq	169d8 <__assert_fail@plt+0x534c>
   163e8:	str	r9, [sp, #152]	; 0x98
   163ec:	ldrb	r5, [r5]
   163f0:	strb	r4, [sp, #156]	; 0x9c
   163f4:	strb	r4, [sp, #144]	; 0x90
   163f8:	str	r5, [sp, #160]	; 0xa0
   163fc:	cmp	r5, #0
   16400:	beq	162f8 <__assert_fail@plt+0x4c6c>
   16404:	ldr	r3, [sp]
   16408:	cmp	fp, #9
   1640c:	movls	r3, #0
   16410:	andhi	r3, r3, #1
   16414:	cmp	r3, #0
   16418:	addeq	r6, r6, #1
   1641c:	beq	16434 <__assert_fail@plt+0x4da8>
   16420:	add	r2, fp, fp, lsl #2
   16424:	cmp	r6, r2
   16428:	addcc	r6, r6, #1
   1642c:	strcc	r3, [sp]
   16430:	bcs	16860 <__assert_fail@plt+0x51d4>
   16434:	ldrb	r3, [sp, #44]	; 0x2c
   16438:	cmp	r3, #0
   1643c:	beq	167f0 <__assert_fail@plt+0x5164>
   16440:	ldr	r2, [sp, #160]	; 0xa0
   16444:	ldr	r3, [sp, #48]	; 0x30
   16448:	cmp	r2, r3
   1644c:	bne	16684 <__assert_fail@plt+0x4ff8>
   16450:	add	lr, sp, #132	; 0x84
   16454:	add	ip, sp, #188	; 0xbc
   16458:	ldm	lr!, {r0, r1, r2, r3}
   1645c:	stmia	ip!, {r0, r1, r2, r3}
   16460:	ldm	lr!, {r0, r1, r2, r3}
   16464:	strb	r7, [sp, #200]	; 0xc8
   16468:	stmia	ip!, {r0, r1, r2, r3}
   1646c:	ldm	lr!, {r0, r1, r2, r3}
   16470:	ldr	r5, [sp, #204]	; 0xcc
   16474:	stmia	ip!, {r0, r1, r2, r3}
   16478:	ldm	lr, {r0, r1}
   1647c:	ldr	r3, [sp, #208]	; 0xd0
   16480:	add	r5, r5, r3
   16484:	stm	ip, {r0, r1}
   16488:	str	r5, [sp, #204]	; 0xcc
   1648c:	ldr	r3, [sp, #8]
   16490:	strb	r7, [sp, #244]	; 0xf4
   16494:	str	r3, [sp, #260]	; 0x104
   16498:	ldrb	r3, [r3]
   1649c:	str	r7, [sp, #248]	; 0xf8
   164a0:	strb	r7, [sp, #256]	; 0x100
   164a4:	and	r2, r3, #31
   164a8:	lsr	r1, r3, #5
   164ac:	str	r7, [sp, #252]	; 0xfc
   164b0:	ldr	sl, [r8, r1, lsl #2]
   164b4:	lsr	sl, sl, r2
   164b8:	ands	sl, sl, #1
   164bc:	beq	16acc <__assert_fail@plt+0x5440>
   164c0:	mov	r5, r3
   164c4:	cmp	r5, #0
   164c8:	str	r9, [sp, #264]	; 0x108
   164cc:	str	r3, [sp, #272]	; 0x110
   164d0:	strb	r4, [sp, #268]	; 0x10c
   164d4:	strb	r4, [sp, #256]	; 0x100
   164d8:	beq	16b48 <__assert_fail@plt+0x54bc>
   164dc:	ldr	r5, [sp, #260]	; 0x104
   164e0:	ldr	r3, [sp, #264]	; 0x108
   164e4:	add	r6, r6, #1
   164e8:	add	r5, r5, r3
   164ec:	strb	r7, [sp, #256]	; 0x100
   164f0:	str	r5, [sp, #260]	; 0x104
   164f4:	b	165dc <__assert_fail@plt+0x4f50>
   164f8:	ldrb	r3, [r5]
   164fc:	and	r2, r3, #31
   16500:	lsr	r3, r3, #5
   16504:	ldr	r3, [r8, r3, lsl #2]
   16508:	lsr	r3, r3, r2
   1650c:	tst	r3, #1
   16510:	beq	167d4 <__assert_fail@plt+0x5148>
   16514:	str	r9, [sp, #264]	; 0x108
   16518:	ldrb	r5, [r5]
   1651c:	strb	r4, [sp, #268]	; 0x10c
   16520:	strb	r4, [sp, #256]	; 0x100
   16524:	cmp	r5, #0
   16528:	str	r5, [sp, #272]	; 0x110
   1652c:	beq	16658 <__assert_fail@plt+0x4fcc>
   16530:	ldrb	r3, [sp, #200]	; 0xc8
   16534:	cmp	r3, #0
   16538:	bne	1679c <__assert_fail@plt+0x5110>
   1653c:	ldrb	r3, [sp, #188]	; 0xbc
   16540:	ldr	r5, [sp, #204]	; 0xcc
   16544:	cmp	r3, #0
   16548:	addne	sl, sp, #192	; 0xc0
   1654c:	bne	16730 <__assert_fail@plt+0x50a4>
   16550:	ldrb	r3, [r5]
   16554:	and	r2, r3, #31
   16558:	lsr	r3, r3, #5
   1655c:	ldr	r3, [r8, r3, lsl #2]
   16560:	lsr	r3, r3, r2
   16564:	tst	r3, #1
   16568:	beq	16718 <__assert_fail@plt+0x508c>
   1656c:	str	r9, [sp, #208]	; 0xd0
   16570:	ldrb	r0, [r5]
   16574:	strb	r4, [sp, #212]	; 0xd4
   16578:	strb	r4, [sp, #200]	; 0xc8
   1657c:	mov	r5, r0
   16580:	str	r0, [sp, #216]	; 0xd8
   16584:	cmp	r5, #0
   16588:	beq	162f8 <__assert_fail@plt+0x4c6c>
   1658c:	ldrb	r3, [sp, #268]	; 0x10c
   16590:	cmp	r3, #0
   16594:	beq	16674 <__assert_fail@plt+0x4fe8>
   16598:	ldr	r0, [sp, #272]	; 0x110
   1659c:	subs	r0, r0, r5
   165a0:	movne	r0, #1
   165a4:	cmp	r0, #0
   165a8:	add	r1, r6, #1
   165ac:	bne	16684 <__assert_fail@plt+0x4ff8>
   165b0:	ldr	r3, [sp, #204]	; 0xcc
   165b4:	ldr	r2, [sp, #208]	; 0xd0
   165b8:	ldr	r5, [sp, #260]	; 0x104
   165bc:	add	r3, r3, r2
   165c0:	ldr	r2, [sp, #264]	; 0x108
   165c4:	mov	r6, r1
   165c8:	add	r5, r5, r2
   165cc:	strb	r0, [sp, #200]	; 0xc8
   165d0:	strb	r0, [sp, #256]	; 0x100
   165d4:	str	r3, [sp, #204]	; 0xcc
   165d8:	str	r5, [sp, #260]	; 0x104
   165dc:	ldrb	r3, [sp, #244]	; 0xf4
   165e0:	cmp	r3, #0
   165e4:	beq	164f8 <__assert_fail@plt+0x4e6c>
   165e8:	bl	11410 <__ctype_get_mb_cur_max@plt>
   165ec:	mov	r1, r0
   165f0:	mov	r0, r5
   165f4:	bl	18fd8 <__assert_fail@plt+0x794c>
   165f8:	add	r3, sp, #248	; 0xf8
   165fc:	mov	r1, r5
   16600:	mov	r2, r0
   16604:	add	r0, sp, #272	; 0x110
   16608:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   1660c:	cmn	r0, #1
   16610:	str	r0, [sp, #264]	; 0x108
   16614:	strbeq	r7, [sp, #268]	; 0x10c
   16618:	streq	r9, [sp, #264]	; 0x108
   1661c:	strbeq	r4, [sp, #256]	; 0x100
   16620:	beq	16530 <__assert_fail@plt+0x4ea4>
   16624:	cmn	r0, #2
   16628:	beq	16954 <__assert_fail@plt+0x52c8>
   1662c:	cmp	r0, #0
   16630:	beq	1696c <__assert_fail@plt+0x52e0>
   16634:	ldr	r5, [sp, #272]	; 0x110
   16638:	add	r0, sp, #248	; 0xf8
   1663c:	strb	r4, [sp, #268]	; 0x10c
   16640:	bl	11344 <mbsinit@plt>
   16644:	strb	r4, [sp, #256]	; 0x100
   16648:	cmp	r0, #0
   1664c:	strbne	r7, [sp, #244]	; 0xf4
   16650:	cmp	r5, #0
   16654:	bne	16530 <__assert_fail@plt+0x4ea4>
   16658:	ldr	r0, [sp, #148]	; 0x94
   1665c:	b	16280 <__assert_fail@plt+0x4bf4>
   16660:	ldr	r0, [sp, #204]	; 0xcc
   16664:	bl	114dc <strlen@plt>
   16668:	strb	r7, [sp, #212]	; 0xd4
   1666c:	strb	r4, [sp, #200]	; 0xc8
   16670:	str	r0, [sp, #208]	; 0xd0
   16674:	ldr	r2, [sp, #208]	; 0xd0
   16678:	ldr	r3, [sp, #264]	; 0x108
   1667c:	cmp	r2, r3
   16680:	beq	167bc <__assert_fail@plt+0x5130>
   16684:	ldr	r5, [sp, #148]	; 0x94
   16688:	ldr	sl, [sp, #152]	; 0x98
   1668c:	ldrb	r3, [sp, #132]	; 0x84
   16690:	add	r5, r5, sl
   16694:	str	r5, [sp, #148]	; 0x94
   16698:	cmp	r3, #0
   1669c:	strb	r7, [sp, #144]	; 0x90
   166a0:	add	fp, fp, #1
   166a4:	beq	163cc <__assert_fail@plt+0x4d40>
   166a8:	bl	11410 <__ctype_get_mb_cur_max@plt>
   166ac:	mov	r1, r0
   166b0:	mov	r0, r5
   166b4:	bl	18fd8 <__assert_fail@plt+0x794c>
   166b8:	add	r3, sp, #136	; 0x88
   166bc:	mov	r1, r5
   166c0:	mov	r2, r0
   166c4:	add	r0, sp, #160	; 0xa0
   166c8:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   166cc:	cmn	r0, #1
   166d0:	str	r0, [sp, #152]	; 0x98
   166d4:	strbeq	r7, [sp, #156]	; 0x9c
   166d8:	streq	r9, [sp, #152]	; 0x98
   166dc:	strbeq	r4, [sp, #144]	; 0x90
   166e0:	beq	16834 <__assert_fail@plt+0x51a8>
   166e4:	cmn	r0, #2
   166e8:	beq	16820 <__assert_fail@plt+0x5194>
   166ec:	cmp	r0, #0
   166f0:	bne	16a38 <__assert_fail@plt+0x53ac>
   166f4:	ldr	r5, [sp, #148]	; 0x94
   166f8:	str	r9, [sp, #152]	; 0x98
   166fc:	ldrb	r3, [r5]
   16700:	cmp	r3, #0
   16704:	bne	16cc4 <__assert_fail@plt+0x5638>
   16708:	ldr	r5, [sp, #160]	; 0xa0
   1670c:	cmp	r5, #0
   16710:	beq	16a3c <__assert_fail@plt+0x53b0>
   16714:	b	16c90 <__assert_fail@plt+0x5604>
   16718:	add	sl, sp, #192	; 0xc0
   1671c:	mov	r0, sl
   16720:	bl	11344 <mbsinit@plt>
   16724:	cmp	r0, #0
   16728:	beq	16cb0 <__assert_fail@plt+0x5624>
   1672c:	strb	r4, [sp, #188]	; 0xbc
   16730:	bl	11410 <__ctype_get_mb_cur_max@plt>
   16734:	mov	r1, r0
   16738:	mov	r0, r5
   1673c:	bl	18fd8 <__assert_fail@plt+0x794c>
   16740:	mov	r3, sl
   16744:	mov	r1, r5
   16748:	mov	r2, r0
   1674c:	add	r0, sp, #216	; 0xd8
   16750:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   16754:	cmn	r0, #1
   16758:	str	r0, [sp, #208]	; 0xd0
   1675c:	strbeq	r7, [sp, #212]	; 0xd4
   16760:	streq	r9, [sp, #208]	; 0xd0
   16764:	strbeq	r4, [sp, #200]	; 0xc8
   16768:	beq	16674 <__assert_fail@plt+0x4fe8>
   1676c:	cmn	r0, #2
   16770:	beq	16660 <__assert_fail@plt+0x4fd4>
   16774:	cmp	r0, #0
   16778:	beq	16990 <__assert_fail@plt+0x5304>
   1677c:	ldr	r5, [sp, #216]	; 0xd8
   16780:	mov	r0, sl
   16784:	strb	r4, [sp, #212]	; 0xd4
   16788:	bl	11344 <mbsinit@plt>
   1678c:	strb	r4, [sp, #200]	; 0xc8
   16790:	cmp	r0, #0
   16794:	strbne	r7, [sp, #188]	; 0xbc
   16798:	b	16584 <__assert_fail@plt+0x4ef8>
   1679c:	ldrb	r3, [sp, #212]	; 0xd4
   167a0:	cmp	r3, #0
   167a4:	ldrne	r5, [sp, #216]	; 0xd8
   167a8:	bne	16584 <__assert_fail@plt+0x4ef8>
   167ac:	ldr	r2, [sp, #208]	; 0xd0
   167b0:	ldr	r3, [sp, #264]	; 0x108
   167b4:	cmp	r2, r3
   167b8:	bne	16684 <__assert_fail@plt+0x4ff8>
   167bc:	ldr	r1, [sp, #260]	; 0x104
   167c0:	ldr	r0, [sp, #204]	; 0xcc
   167c4:	bl	1135c <memcmp@plt>
   167c8:	adds	r0, r0, #0
   167cc:	movne	r0, #1
   167d0:	b	165a4 <__assert_fail@plt+0x4f18>
   167d4:	add	r0, sp, #248	; 0xf8
   167d8:	bl	11344 <mbsinit@plt>
   167dc:	cmp	r0, #0
   167e0:	beq	16cb0 <__assert_fail@plt+0x5624>
   167e4:	strb	r4, [sp, #244]	; 0xf4
   167e8:	b	165e8 <__assert_fail@plt+0x4f5c>
   167ec:	add	r6, r6, #1
   167f0:	ldr	sl, [sp, #152]	; 0x98
   167f4:	ldr	r3, [sp, #40]	; 0x28
   167f8:	ldr	r5, [sp, #148]	; 0x94
   167fc:	cmp	sl, r3
   16800:	bne	1668c <__assert_fail@plt+0x5000>
   16804:	mov	r2, sl
   16808:	mov	r0, r5
   1680c:	ldr	r1, [sp, #36]	; 0x24
   16810:	bl	1135c <memcmp@plt>
   16814:	cmp	r0, #0
   16818:	bne	1668c <__assert_fail@plt+0x5000>
   1681c:	b	16450 <__assert_fail@plt+0x4dc4>
   16820:	ldr	r0, [sp, #148]	; 0x94
   16824:	bl	114dc <strlen@plt>
   16828:	strb	r7, [sp, #156]	; 0x9c
   1682c:	strb	r4, [sp, #144]	; 0x90
   16830:	str	r0, [sp, #152]	; 0x98
   16834:	ldr	r3, [sp]
   16838:	cmp	fp, #9
   1683c:	movls	r3, #0
   16840:	andhi	r3, r3, #1
   16844:	cmp	r3, #0
   16848:	beq	167ec <__assert_fail@plt+0x5160>
   1684c:	add	r2, fp, fp, lsl #2
   16850:	cmp	r6, r2
   16854:	addcc	r6, r6, #1
   16858:	strcc	r3, [sp]
   1685c:	bcc	167f0 <__assert_fail@plt+0x5164>
   16860:	ldr	r3, [sp, #12]
   16864:	subs	sl, r6, r3
   16868:	ldrb	r3, [sp, #88]	; 0x58
   1686c:	beq	16c94 <__assert_fail@plt+0x5608>
   16870:	cmp	r3, #0
   16874:	ldreq	r5, [sp, #92]	; 0x5c
   16878:	beq	168e8 <__assert_fail@plt+0x525c>
   1687c:	ldrb	r3, [sp, #100]	; 0x64
   16880:	cmp	r3, #0
   16884:	ldrne	r5, [sp, #104]	; 0x68
   16888:	beq	168c8 <__assert_fail@plt+0x523c>
   1688c:	b	168c0 <__assert_fail@plt+0x5234>
   16890:	ldrb	r3, [r5]
   16894:	and	r2, r3, #31
   16898:	lsr	r3, r3, #5
   1689c:	ldr	r3, [r8, r3, lsl #2]
   168a0:	lsr	r3, r3, r2
   168a4:	tst	r3, #1
   168a8:	beq	169b4 <__assert_fail@plt+0x5328>
   168ac:	str	r9, [sp, #96]	; 0x60
   168b0:	ldrb	r5, [r5]
   168b4:	strb	r4, [sp, #100]	; 0x64
   168b8:	strb	r4, [sp, #88]	; 0x58
   168bc:	str	r5, [sp, #104]	; 0x68
   168c0:	cmp	r5, #0
   168c4:	beq	16be0 <__assert_fail@plt+0x5554>
   168c8:	ldr	r5, [sp, #92]	; 0x5c
   168cc:	ldr	r3, [sp, #96]	; 0x60
   168d0:	subs	sl, sl, #1
   168d4:	add	r5, r5, r3
   168d8:	strb	r7, [sp, #88]	; 0x58
   168dc:	str	r5, [sp, #92]	; 0x5c
   168e0:	str	r5, [sp]
   168e4:	beq	16a60 <__assert_fail@plt+0x53d4>
   168e8:	ldrb	r3, [sp, #76]	; 0x4c
   168ec:	cmp	r3, #0
   168f0:	beq	16890 <__assert_fail@plt+0x5204>
   168f4:	bl	11410 <__ctype_get_mb_cur_max@plt>
   168f8:	mov	r1, r0
   168fc:	mov	r0, r5
   16900:	bl	18fd8 <__assert_fail@plt+0x794c>
   16904:	add	r3, sp, #80	; 0x50
   16908:	mov	r1, r5
   1690c:	mov	r2, r0
   16910:	add	r0, sp, #104	; 0x68
   16914:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   16918:	cmn	r0, #1
   1691c:	str	r0, [sp, #96]	; 0x60
   16920:	beq	169cc <__assert_fail@plt+0x5340>
   16924:	cmn	r0, #2
   16928:	beq	169f0 <__assert_fail@plt+0x5364>
   1692c:	cmp	r0, #0
   16930:	beq	16a08 <__assert_fail@plt+0x537c>
   16934:	ldr	r5, [sp, #104]	; 0x68
   16938:	add	r0, sp, #80	; 0x50
   1693c:	strb	r4, [sp, #100]	; 0x64
   16940:	bl	11344 <mbsinit@plt>
   16944:	strb	r4, [sp, #88]	; 0x58
   16948:	cmp	r0, #0
   1694c:	strbne	r7, [sp, #76]	; 0x4c
   16950:	b	168c0 <__assert_fail@plt+0x5234>
   16954:	ldr	r0, [sp, #260]	; 0x104
   16958:	bl	114dc <strlen@plt>
   1695c:	strb	r7, [sp, #268]	; 0x10c
   16960:	strb	r4, [sp, #256]	; 0x100
   16964:	str	r0, [sp, #264]	; 0x108
   16968:	b	16530 <__assert_fail@plt+0x4ea4>
   1696c:	ldr	r3, [sp, #260]	; 0x104
   16970:	str	r9, [sp, #264]	; 0x108
   16974:	ldrb	r3, [r3]
   16978:	cmp	r3, #0
   1697c:	bne	16cc4 <__assert_fail@plt+0x5638>
   16980:	ldr	r5, [sp, #272]	; 0x110
   16984:	cmp	r5, #0
   16988:	beq	16638 <__assert_fail@plt+0x4fac>
   1698c:	b	16c90 <__assert_fail@plt+0x5604>
   16990:	ldr	r3, [sp, #204]	; 0xcc
   16994:	str	r9, [sp, #208]	; 0xd0
   16998:	ldrb	r3, [r3]
   1699c:	cmp	r3, #0
   169a0:	bne	16cc4 <__assert_fail@plt+0x5638>
   169a4:	ldr	r5, [sp, #216]	; 0xd8
   169a8:	cmp	r5, #0
   169ac:	beq	16780 <__assert_fail@plt+0x50f4>
   169b0:	b	16c90 <__assert_fail@plt+0x5604>
   169b4:	add	r0, sp, #80	; 0x50
   169b8:	bl	11344 <mbsinit@plt>
   169bc:	cmp	r0, #0
   169c0:	beq	16cb0 <__assert_fail@plt+0x5624>
   169c4:	strb	r4, [sp, #76]	; 0x4c
   169c8:	b	168f4 <__assert_fail@plt+0x5268>
   169cc:	str	r9, [sp, #96]	; 0x60
   169d0:	strb	r7, [sp, #100]	; 0x64
   169d4:	b	168c8 <__assert_fail@plt+0x523c>
   169d8:	add	r0, sp, #136	; 0x88
   169dc:	bl	11344 <mbsinit@plt>
   169e0:	cmp	r0, #0
   169e4:	beq	16cb0 <__assert_fail@plt+0x5624>
   169e8:	strb	r4, [sp, #132]	; 0x84
   169ec:	b	166a8 <__assert_fail@plt+0x501c>
   169f0:	ldr	r5, [sp, #92]	; 0x5c
   169f4:	mov	r0, r5
   169f8:	bl	114dc <strlen@plt>
   169fc:	strb	r7, [sp, #100]	; 0x64
   16a00:	str	r0, [sp, #96]	; 0x60
   16a04:	b	168cc <__assert_fail@plt+0x5240>
   16a08:	ldr	r5, [sp, #92]	; 0x5c
   16a0c:	str	r9, [sp, #96]	; 0x60
   16a10:	ldrb	r3, [r5]
   16a14:	cmp	r3, #0
   16a18:	bne	16cc4 <__assert_fail@plt+0x5638>
   16a1c:	ldr	r5, [sp, #104]	; 0x68
   16a20:	cmp	r5, #0
   16a24:	beq	16938 <__assert_fail@plt+0x52ac>
   16a28:	b	16c90 <__assert_fail@plt+0x5604>
   16a2c:	mov	lr, r3
   16a30:	str	r4, [sp]
   16a34:	b	16178 <__assert_fail@plt+0x4aec>
   16a38:	ldr	r5, [sp, #160]	; 0xa0
   16a3c:	add	r0, sp, #136	; 0x88
   16a40:	strb	r4, [sp, #156]	; 0x9c
   16a44:	bl	11344 <mbsinit@plt>
   16a48:	strb	r4, [sp, #144]	; 0x90
   16a4c:	cmp	r0, #0
   16a50:	strbne	r7, [sp, #132]	; 0x84
   16a54:	b	163fc <__assert_fail@plt+0x4d70>
   16a58:	ldr	r3, [sp, #92]	; 0x5c
   16a5c:	str	r3, [sp]
   16a60:	ldrb	r3, [sp, #76]	; 0x4c
   16a64:	cmp	r3, #0
   16a68:	bne	16b60 <__assert_fail@plt+0x54d4>
   16a6c:	ldr	r1, [sp]
   16a70:	ldrb	r3, [r1]
   16a74:	and	r2, r3, #31
   16a78:	lsr	r3, r3, #5
   16a7c:	ldr	r3, [r8, r3, lsl #2]
   16a80:	lsr	r3, r3, r2
   16a84:	tst	r3, #1
   16a88:	beq	16b4c <__assert_fail@plt+0x54c0>
   16a8c:	str	r9, [sp, #96]	; 0x60
   16a90:	ldrb	r5, [r1]
   16a94:	strb	r4, [sp, #100]	; 0x64
   16a98:	strb	r4, [sp, #88]	; 0x58
   16a9c:	str	r5, [sp, #104]	; 0x68
   16aa0:	cmp	r5, #0
   16aa4:	beq	16bec <__assert_fail@plt+0x5560>
   16aa8:	ldrb	r3, [sp, #156]	; 0x9c
   16aac:	mov	r2, #1
   16ab0:	str	r2, [sp]
   16ab4:	cmp	r3, #0
   16ab8:	add	r3, r6, #1
   16abc:	str	r6, [sp, #12]
   16ac0:	mov	r6, r3
   16ac4:	bne	16434 <__assert_fail@plt+0x4da8>
   16ac8:	b	167f0 <__assert_fail@plt+0x5164>
   16acc:	add	r0, sp, #248	; 0xf8
   16ad0:	bl	11344 <mbsinit@plt>
   16ad4:	cmp	r0, #0
   16ad8:	beq	16cb0 <__assert_fail@plt+0x5624>
   16adc:	strb	r4, [sp, #244]	; 0xf4
   16ae0:	bl	11410 <__ctype_get_mb_cur_max@plt>
   16ae4:	ldr	r5, [sp, #8]
   16ae8:	mov	r1, r0
   16aec:	mov	r0, r5
   16af0:	bl	18fd8 <__assert_fail@plt+0x794c>
   16af4:	add	r3, sp, #248	; 0xf8
   16af8:	mov	r1, r5
   16afc:	mov	r2, r0
   16b00:	add	r0, sp, #272	; 0x110
   16b04:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   16b08:	cmn	r0, #1
   16b0c:	str	r0, [sp, #264]	; 0x108
   16b10:	beq	16bd0 <__assert_fail@plt+0x5544>
   16b14:	cmn	r0, #2
   16b18:	beq	16c0c <__assert_fail@plt+0x5580>
   16b1c:	cmp	r0, #0
   16b20:	beq	16c24 <__assert_fail@plt+0x5598>
   16b24:	ldr	r5, [sp, #272]	; 0x110
   16b28:	add	r0, sp, #248	; 0xf8
   16b2c:	strb	r4, [sp, #268]	; 0x10c
   16b30:	bl	11344 <mbsinit@plt>
   16b34:	strb	r4, [sp, #256]	; 0x100
   16b38:	cmp	r0, #0
   16b3c:	strbne	r7, [sp, #244]	; 0xf4
   16b40:	cmp	r5, #0
   16b44:	bne	164dc <__assert_fail@plt+0x4e50>
   16b48:	bl	11650 <abort@plt>
   16b4c:	add	r0, sp, #80	; 0x50
   16b50:	bl	11344 <mbsinit@plt>
   16b54:	cmp	r0, #0
   16b58:	beq	16cb0 <__assert_fail@plt+0x5624>
   16b5c:	strb	r4, [sp, #76]	; 0x4c
   16b60:	bl	11410 <__ctype_get_mb_cur_max@plt>
   16b64:	ldr	r5, [sp]
   16b68:	mov	r1, r0
   16b6c:	mov	r0, r5
   16b70:	bl	18fd8 <__assert_fail@plt+0x794c>
   16b74:	add	r3, sp, #80	; 0x50
   16b78:	mov	r1, r5
   16b7c:	mov	r2, r0
   16b80:	add	r0, sp, #104	; 0x68
   16b84:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   16b88:	cmn	r0, #1
   16b8c:	str	r0, [sp, #96]	; 0x60
   16b90:	strbeq	r7, [sp, #100]	; 0x64
   16b94:	streq	r9, [sp, #96]	; 0x60
   16b98:	strbeq	r4, [sp, #88]	; 0x58
   16b9c:	beq	16aa8 <__assert_fail@plt+0x541c>
   16ba0:	cmn	r0, #2
   16ba4:	beq	16c50 <__assert_fail@plt+0x55c4>
   16ba8:	cmp	r0, #0
   16bac:	beq	16c70 <__assert_fail@plt+0x55e4>
   16bb0:	ldr	r5, [sp, #104]	; 0x68
   16bb4:	add	r0, sp, #80	; 0x50
   16bb8:	strb	r4, [sp, #100]	; 0x64
   16bbc:	bl	11344 <mbsinit@plt>
   16bc0:	strb	r4, [sp, #88]	; 0x58
   16bc4:	cmp	r0, #0
   16bc8:	strbne	r7, [sp, #76]	; 0x4c
   16bcc:	b	16aa0 <__assert_fail@plt+0x5414>
   16bd0:	str	r9, [sp, #264]	; 0x108
   16bd4:	strb	sl, [sp, #268]	; 0x10c
   16bd8:	ldr	r5, [sp, #260]	; 0x104
   16bdc:	b	164e0 <__assert_fail@plt+0x4e54>
   16be0:	ldrb	r3, [sp, #88]	; 0x58
   16be4:	cmp	r3, #0
   16be8:	beq	16a58 <__assert_fail@plt+0x53cc>
   16bec:	add	r2, sp, #16
   16bf0:	ldrd	r0, [sp, #4]
   16bf4:	bl	15840 <__assert_fail@plt+0x41b4>
   16bf8:	subs	r3, r0, #0
   16bfc:	str	r3, [sp]
   16c00:	bne	16c68 <__assert_fail@plt+0x55dc>
   16c04:	ldrb	r3, [sp, #156]	; 0x9c
   16c08:	b	16ab4 <__assert_fail@plt+0x5428>
   16c0c:	ldr	r5, [sp, #260]	; 0x104
   16c10:	mov	r0, r5
   16c14:	bl	114dc <strlen@plt>
   16c18:	strb	sl, [sp, #268]	; 0x10c
   16c1c:	str	r0, [sp, #264]	; 0x108
   16c20:	b	164e0 <__assert_fail@plt+0x4e54>
   16c24:	ldr	r5, [sp, #260]	; 0x104
   16c28:	str	r9, [sp, #264]	; 0x108
   16c2c:	ldrb	r3, [r5]
   16c30:	cmp	r3, #0
   16c34:	bne	16cc4 <__assert_fail@plt+0x5638>
   16c38:	ldr	r5, [sp, #272]	; 0x110
   16c3c:	cmp	r5, #0
   16c40:	beq	16b28 <__assert_fail@plt+0x549c>
   16c44:	b	16c90 <__assert_fail@plt+0x5604>
   16c48:	ldr	r4, [sp, #48]	; 0x30
   16c4c:	b	16250 <__assert_fail@plt+0x4bc4>
   16c50:	ldr	r0, [sp, #92]	; 0x5c
   16c54:	bl	114dc <strlen@plt>
   16c58:	strb	r7, [sp, #100]	; 0x64
   16c5c:	strb	r4, [sp, #88]	; 0x58
   16c60:	str	r0, [sp, #96]	; 0x60
   16c64:	b	16aa8 <__assert_fail@plt+0x541c>
   16c68:	ldr	r0, [sp, #16]
   16c6c:	b	16280 <__assert_fail@plt+0x4bf4>
   16c70:	ldr	r5, [sp, #92]	; 0x5c
   16c74:	str	r9, [sp, #96]	; 0x60
   16c78:	ldrb	r3, [r5]
   16c7c:	cmp	r3, #0
   16c80:	bne	16cc4 <__assert_fail@plt+0x5638>
   16c84:	ldr	r5, [sp, #104]	; 0x68
   16c88:	cmp	r5, #0
   16c8c:	beq	16bb4 <__assert_fail@plt+0x5528>
   16c90:	bl	1581c <__assert_fail@plt+0x4190>
   16c94:	cmp	r3, #0
   16c98:	beq	16a58 <__assert_fail@plt+0x53cc>
   16c9c:	ldrb	r3, [sp, #100]	; 0x64
   16ca0:	cmp	r3, #0
   16ca4:	ldrne	r5, [sp, #104]	; 0x68
   16ca8:	beq	16aa8 <__assert_fail@plt+0x541c>
   16cac:	b	16aa0 <__assert_fail@plt+0x5414>
   16cb0:	ldr	r3, [pc, #44]	; 16ce4 <__assert_fail@plt+0x5658>
   16cb4:	mov	r2, #150	; 0x96
   16cb8:	ldr	r1, [pc, #40]	; 16ce8 <__assert_fail@plt+0x565c>
   16cbc:	ldr	r0, [pc, #40]	; 16cec <__assert_fail@plt+0x5660>
   16cc0:	bl	1168c <__assert_fail@plt>
   16cc4:	ldr	r3, [pc, #24]	; 16ce4 <__assert_fail@plt+0x5658>
   16cc8:	mov	r2, #178	; 0xb2
   16ccc:	ldr	r1, [pc, #20]	; 16ce8 <__assert_fail@plt+0x565c>
   16cd0:	ldr	r0, [pc, #24]	; 16cf0 <__assert_fail@plt+0x5664>
   16cd4:	bl	1168c <__assert_fail@plt>
   16cd8:	bl	11374 <__stack_chk_fail@plt>
   16cdc:	muleq	r2, r8, sp
   16ce0:	andeq	ip, r1, r4, lsr #22
   16ce4:	andeq	ip, r1, r0, asr #12
   16ce8:	andeq	ip, r1, r4, asr r6
   16cec:	andeq	ip, r1, r4, ror r6
   16cf0:	andeq	ip, r1, ip, lsl #13
   16cf4:	push	{r4, r5, r6, lr}
   16cf8:	subs	r4, r0, #0
   16cfc:	beq	16d70 <__assert_fail@plt+0x56e4>
   16d00:	mov	r1, #47	; 0x2f
   16d04:	bl	115cc <strrchr@plt>
   16d08:	subs	r5, r0, #0
   16d0c:	beq	16d5c <__assert_fail@plt+0x56d0>
   16d10:	add	r6, r5, #1
   16d14:	sub	r3, r6, r4
   16d18:	cmp	r3, #6
   16d1c:	ble	16d5c <__assert_fail@plt+0x56d0>
   16d20:	mov	r2, #7
   16d24:	ldr	r1, [pc, #96]	; 16d8c <__assert_fail@plt+0x5700>
   16d28:	sub	r0, r5, #6
   16d2c:	bl	11644 <strncmp@plt>
   16d30:	cmp	r0, #0
   16d34:	bne	16d5c <__assert_fail@plt+0x56d0>
   16d38:	mov	r2, #3
   16d3c:	ldr	r1, [pc, #76]	; 16d90 <__assert_fail@plt+0x5704>
   16d40:	mov	r0, r6
   16d44:	bl	11644 <strncmp@plt>
   16d48:	cmp	r0, #0
   16d4c:	movne	r4, r6
   16d50:	ldreq	r3, [pc, #60]	; 16d94 <__assert_fail@plt+0x5708>
   16d54:	addeq	r4, r5, #4
   16d58:	streq	r4, [r3]
   16d5c:	ldr	r2, [pc, #52]	; 16d98 <__assert_fail@plt+0x570c>
   16d60:	ldr	r3, [pc, #52]	; 16d9c <__assert_fail@plt+0x5710>
   16d64:	str	r4, [r2]
   16d68:	str	r4, [r3]
   16d6c:	pop	{r4, r5, r6, pc}
   16d70:	ldr	r3, [pc, #40]	; 16da0 <__assert_fail@plt+0x5714>
   16d74:	mov	r2, #55	; 0x37
   16d78:	mov	r1, #1
   16d7c:	ldr	r3, [r3]
   16d80:	ldr	r0, [pc, #28]	; 16da4 <__assert_fail@plt+0x5718>
   16d84:	bl	113ec <fwrite@plt>
   16d88:	bl	11650 <abort@plt>
   16d8c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   16d90:	andeq	ip, r1, r4, ror #13
   16d94:	andeq	sp, r2, r8, asr r0
   16d98:	andeq	sp, r2, r4, asr r1
   16d9c:	andeq	sp, r2, r0, rrx
   16da0:	andeq	sp, r2, r0, ror r0
   16da4:	andeq	ip, r1, r4, lsr #13
   16da8:	push	{r4, lr}
   16dac:	mov	r2, #48	; 0x30
   16db0:	mov	r4, r1
   16db4:	mov	r1, #0
   16db8:	bl	11518 <memset@plt>
   16dbc:	cmp	r4, #10
   16dc0:	beq	16dcc <__assert_fail@plt+0x5740>
   16dc4:	str	r4, [r0]
   16dc8:	pop	{r4, pc}
   16dcc:	bl	11650 <abort@plt>
   16dd0:	push	{r4, r5, r6, lr}
   16dd4:	mov	r2, #5
   16dd8:	mov	r5, r0
   16ddc:	mov	r6, r1
   16de0:	mov	r1, r0
   16de4:	mov	r0, #0
   16de8:	bl	11368 <dcgettext@plt>
   16dec:	cmp	r5, r0
   16df0:	mov	r4, r0
   16df4:	beq	16e00 <__assert_fail@plt+0x5774>
   16df8:	mov	r0, r4
   16dfc:	pop	{r4, r5, r6, pc}
   16e00:	bl	1a2f8 <__assert_fail@plt+0x8c6c>
   16e04:	ldrb	r3, [r0]
   16e08:	bic	r3, r3, #32
   16e0c:	cmp	r3, #85	; 0x55
   16e10:	bne	16e70 <__assert_fail@plt+0x57e4>
   16e14:	ldrb	r3, [r0, #1]
   16e18:	bic	r3, r3, #32
   16e1c:	cmp	r3, #84	; 0x54
   16e20:	bne	16ee8 <__assert_fail@plt+0x585c>
   16e24:	ldrb	r3, [r0, #2]
   16e28:	bic	r3, r3, #32
   16e2c:	cmp	r3, #70	; 0x46
   16e30:	bne	16ee8 <__assert_fail@plt+0x585c>
   16e34:	ldrb	r3, [r0, #3]
   16e38:	cmp	r3, #45	; 0x2d
   16e3c:	bne	16ee8 <__assert_fail@plt+0x585c>
   16e40:	ldrb	r3, [r0, #4]
   16e44:	cmp	r3, #56	; 0x38
   16e48:	bne	16ee8 <__assert_fail@plt+0x585c>
   16e4c:	ldrb	r3, [r0, #5]
   16e50:	cmp	r3, #0
   16e54:	bne	16ee8 <__assert_fail@plt+0x585c>
   16e58:	ldrb	r2, [r4]
   16e5c:	ldr	r3, [pc, #156]	; 16f00 <__assert_fail@plt+0x5874>
   16e60:	ldr	r4, [pc, #156]	; 16f04 <__assert_fail@plt+0x5878>
   16e64:	cmp	r2, #96	; 0x60
   16e68:	movne	r4, r3
   16e6c:	b	16df8 <__assert_fail@plt+0x576c>
   16e70:	cmp	r3, #71	; 0x47
   16e74:	bne	16ee8 <__assert_fail@plt+0x585c>
   16e78:	ldrb	r3, [r0, #1]
   16e7c:	bic	r3, r3, #32
   16e80:	cmp	r3, #66	; 0x42
   16e84:	bne	16ee8 <__assert_fail@plt+0x585c>
   16e88:	ldrb	r3, [r0, #2]
   16e8c:	cmp	r3, #49	; 0x31
   16e90:	bne	16ee8 <__assert_fail@plt+0x585c>
   16e94:	ldrb	r3, [r0, #3]
   16e98:	cmp	r3, #56	; 0x38
   16e9c:	bne	16ee8 <__assert_fail@plt+0x585c>
   16ea0:	ldrb	r3, [r0, #4]
   16ea4:	cmp	r3, #48	; 0x30
   16ea8:	bne	16ee8 <__assert_fail@plt+0x585c>
   16eac:	ldrb	r3, [r0, #5]
   16eb0:	cmp	r3, #51	; 0x33
   16eb4:	bne	16ee8 <__assert_fail@plt+0x585c>
   16eb8:	ldrb	r3, [r0, #6]
   16ebc:	cmp	r3, #48	; 0x30
   16ec0:	bne	16ee8 <__assert_fail@plt+0x585c>
   16ec4:	ldrb	r3, [r0, #7]
   16ec8:	cmp	r3, #0
   16ecc:	bne	16ee8 <__assert_fail@plt+0x585c>
   16ed0:	ldrb	r2, [r4]
   16ed4:	ldr	r3, [pc, #44]	; 16f08 <__assert_fail@plt+0x587c>
   16ed8:	ldr	r4, [pc, #44]	; 16f0c <__assert_fail@plt+0x5880>
   16edc:	cmp	r2, #96	; 0x60
   16ee0:	movne	r4, r3
   16ee4:	b	16df8 <__assert_fail@plt+0x576c>
   16ee8:	ldr	r3, [pc, #32]	; 16f10 <__assert_fail@plt+0x5884>
   16eec:	ldr	r4, [pc, #32]	; 16f14 <__assert_fail@plt+0x5888>
   16ef0:	cmp	r6, #9
   16ef4:	movne	r4, r3
   16ef8:	mov	r0, r4
   16efc:	pop	{r4, r5, r6, pc}
   16f00:	andeq	ip, r1, r0, asr #14
   16f04:	andeq	ip, r1, ip, asr #14
   16f08:	andeq	ip, r1, r4, asr #14
   16f0c:	andeq	ip, r1, r8, asr #14
   16f10:	andeq	ip, r1, r0, asr r7
   16f14:	andeq	ip, r1, ip, lsr r7
   16f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f1c:	sub	sp, sp, #124	; 0x7c
   16f20:	ldr	ip, [pc, #3576]	; 17d20 <__assert_fail@plt+0x6694>
   16f24:	str	r3, [sp, #24]
   16f28:	ldr	r3, [sp, #168]	; 0xa8
   16f2c:	ldr	ip, [ip]
   16f30:	str	r3, [sp, #56]	; 0x38
   16f34:	ldr	r3, [sp, #172]	; 0xac
   16f38:	ldr	r8, [sp, #160]	; 0xa0
   16f3c:	str	r3, [sp, #80]	; 0x50
   16f40:	ldr	r3, [sp, #176]	; 0xb0
   16f44:	mov	fp, r0
   16f48:	str	r3, [sp, #76]	; 0x4c
   16f4c:	mov	sl, r1
   16f50:	str	r2, [sp, #36]	; 0x24
   16f54:	str	ip, [sp, #116]	; 0x74
   16f58:	bl	11410 <__ctype_get_mb_cur_max@plt>
   16f5c:	ldr	r3, [sp, #164]	; 0xa4
   16f60:	ands	r4, r3, #2
   16f64:	movne	r3, #1
   16f68:	moveq	r3, #0
   16f6c:	str	r3, [sp, #32]
   16f70:	str	r0, [sp, #64]	; 0x40
   16f74:	cmp	r8, #10
   16f78:	ldrls	pc, [pc, r8, lsl #2]
   16f7c:	b	1872c <__assert_fail@plt+0x70a0>
   16f80:	andeq	r7, r1, r4, ror r3
   16f84:	andeq	r7, r1, ip, lsl #8
   16f88:	andeq	r7, r1, ip, lsl #20
   16f8c:	andeq	r7, r1, ip, lsr #8
   16f90:	andeq	r7, r1, r0, ror #5
   16f94:	andeq	r7, r1, r8, lsr #6
   16f98:	andeq	r7, r1, r4, lsr #7
   16f9c:	ldrdeq	r7, [r1], -ip
   16fa0:	andeq	r6, r1, ip, lsr #31
   16fa4:	andeq	r6, r1, ip, lsr #31
   16fa8:	andeq	r6, r1, ip, lsr #31
   16fac:	cmp	r8, #10
   16fb0:	beq	16fd4 <__assert_fail@plt+0x5948>
   16fb4:	mov	r1, r8
   16fb8:	ldr	r0, [pc, #3428]	; 17d24 <__assert_fail@plt+0x6698>
   16fbc:	bl	16dd0 <__assert_fail@plt+0x5744>
   16fc0:	mov	r1, r8
   16fc4:	str	r0, [sp, #80]	; 0x50
   16fc8:	ldr	r0, [pc, #3420]	; 17d2c <__assert_fail@plt+0x66a0>
   16fcc:	bl	16dd0 <__assert_fail@plt+0x5744>
   16fd0:	str	r0, [sp, #76]	; 0x4c
   16fd4:	cmp	r4, #0
   16fd8:	movne	r4, #0
   16fdc:	beq	183ec <__assert_fail@plt+0x6d60>
   16fe0:	ldr	r7, [sp, #76]	; 0x4c
   16fe4:	mov	r5, #0
   16fe8:	mov	r6, #1
   16fec:	mov	r0, r7
   16ff0:	str	r6, [sp, #40]	; 0x28
   16ff4:	str	r5, [sp, #68]	; 0x44
   16ff8:	bl	114dc <strlen@plt>
   16ffc:	str	r6, [sp, #28]
   17000:	str	r5, [sp, #44]	; 0x2c
   17004:	str	r5, [sp, #72]	; 0x48
   17008:	str	r7, [sp, #60]	; 0x3c
   1700c:	str	r0, [sp, #52]	; 0x34
   17010:	str	r8, [sp, #160]	; 0xa0
   17014:	mov	r8, fp
   17018:	ldr	fp, [sp, #160]	; 0xa0
   1701c:	mov	r9, #0
   17020:	ldr	r3, [sp, #24]
   17024:	cmn	r3, #1
   17028:	beq	17590 <__assert_fail@plt+0x5f04>
   1702c:	ldr	r3, [sp, #24]
   17030:	subs	r6, r3, r9
   17034:	movne	r6, #1
   17038:	cmp	r6, #0
   1703c:	beq	175a8 <__assert_fail@plt+0x5f1c>
   17040:	ldr	r7, [sp, #28]
   17044:	ldr	r0, [sp, #36]	; 0x24
   17048:	cmp	fp, #2
   1704c:	moveq	r7, #0
   17050:	andne	r7, r7, #1
   17054:	add	r3, r0, r9
   17058:	cmp	r7, #0
   1705c:	str	r3, [sp, #48]	; 0x30
   17060:	beq	17a4c <__assert_fail@plt+0x63c0>
   17064:	ldr	r2, [sp, #52]	; 0x34
   17068:	cmp	r2, #0
   1706c:	beq	17d30 <__assert_fail@plt+0x66a4>
   17070:	ldr	r1, [sp, #24]
   17074:	cmp	r2, #1
   17078:	mov	r3, r2
   1707c:	movls	r3, #0
   17080:	movhi	r3, #1
   17084:	cmn	r1, #1
   17088:	movne	r3, #0
   1708c:	cmp	r3, #0
   17090:	add	r5, r9, r2
   17094:	beq	170a0 <__assert_fail@plt+0x5a14>
   17098:	bl	114dc <strlen@plt>
   1709c:	str	r0, [sp, #24]
   170a0:	ldr	r3, [sp, #24]
   170a4:	cmp	r5, r3
   170a8:	bhi	17d30 <__assert_fail@plt+0x66a4>
   170ac:	ldr	r2, [sp, #52]	; 0x34
   170b0:	ldr	r1, [sp, #60]	; 0x3c
   170b4:	ldr	r0, [sp, #48]	; 0x30
   170b8:	bl	1135c <memcmp@plt>
   170bc:	cmp	r0, #0
   170c0:	bne	17d30 <__assert_fail@plt+0x66a4>
   170c4:	ldr	r3, [sp, #32]
   170c8:	cmp	r3, #0
   170cc:	bne	185ec <__assert_fail@plt+0x6f60>
   170d0:	ldr	r3, [sp, #48]	; 0x30
   170d4:	ldrb	r5, [r3]
   170d8:	cmp	r5, #126	; 0x7e
   170dc:	ldrls	pc, [pc, r5, lsl #2]
   170e0:	b	179b0 <__assert_fail@plt+0x6324>
   170e4:	muleq	r1, ip, r8
   170e8:			; <UNDEFINED> instruction: 0x000179b0
   170ec:			; <UNDEFINED> instruction: 0x000179b0
   170f0:			; <UNDEFINED> instruction: 0x000179b0
   170f4:			; <UNDEFINED> instruction: 0x000179b0
   170f8:			; <UNDEFINED> instruction: 0x000179b0
   170fc:			; <UNDEFINED> instruction: 0x000179b0
   17100:	andeq	r7, r1, r8, ror #18
   17104:	andeq	r7, r1, r8, asr r9
   17108:	andeq	r7, r1, r8, asr r8
   1710c:	andeq	r7, r1, r0, lsr #16
   17110:	andeq	r7, r1, r8, ror r8
   17114:	andeq	r7, r1, r0, ror #16
   17118:	muleq	r1, r0, r7
   1711c:			; <UNDEFINED> instruction: 0x000179b0
   17120:			; <UNDEFINED> instruction: 0x000179b0
   17124:			; <UNDEFINED> instruction: 0x000179b0
   17128:			; <UNDEFINED> instruction: 0x000179b0
   1712c:			; <UNDEFINED> instruction: 0x000179b0
   17130:			; <UNDEFINED> instruction: 0x000179b0
   17134:			; <UNDEFINED> instruction: 0x000179b0
   17138:			; <UNDEFINED> instruction: 0x000179b0
   1713c:			; <UNDEFINED> instruction: 0x000179b0
   17140:			; <UNDEFINED> instruction: 0x000179b0
   17144:			; <UNDEFINED> instruction: 0x000179b0
   17148:			; <UNDEFINED> instruction: 0x000179b0
   1714c:			; <UNDEFINED> instruction: 0x000179b0
   17150:			; <UNDEFINED> instruction: 0x000179b0
   17154:			; <UNDEFINED> instruction: 0x000179b0
   17158:			; <UNDEFINED> instruction: 0x000179b0
   1715c:			; <UNDEFINED> instruction: 0x000179b0
   17160:			; <UNDEFINED> instruction: 0x000179b0
   17164:	andeq	r7, r1, r0, ror r9
   17168:	andeq	r7, r1, r4, lsl #17
   1716c:	andeq	r7, r1, r4, lsl #17
   17170:	andeq	r7, r1, r8, lsl #19
   17174:	andeq	r7, r1, r4, lsl #17
   17178:	andeq	r7, r1, r4, lsr #19
   1717c:	andeq	r7, r1, r4, lsl #17
   17180:	andeq	r7, r1, r4, asr #13
   17184:	andeq	r7, r1, r4, lsl #17
   17188:	andeq	r7, r1, r4, lsl #17
   1718c:	andeq	r7, r1, r4, lsl #17
   17190:	andeq	r7, r1, r4, lsr #19
   17194:	andeq	r7, r1, r4, lsr #19
   17198:	andeq	r7, r1, r4, lsr #19
   1719c:	andeq	r7, r1, r4, lsr #19
   171a0:	andeq	r7, r1, r4, lsr #19
   171a4:	andeq	r7, r1, r4, lsr #19
   171a8:	andeq	r7, r1, r4, lsr #19
   171ac:	andeq	r7, r1, r4, lsr #19
   171b0:	andeq	r7, r1, r4, lsr #19
   171b4:	andeq	r7, r1, r4, lsr #19
   171b8:	andeq	r7, r1, r4, lsr #19
   171bc:	andeq	r7, r1, r4, lsr #19
   171c0:	andeq	r7, r1, r4, lsr #19
   171c4:	andeq	r7, r1, r4, lsr #19
   171c8:	andeq	r7, r1, r4, lsr #19
   171cc:	andeq	r7, r1, r4, lsr #19
   171d0:	andeq	r7, r1, r4, lsl #17
   171d4:	andeq	r7, r1, r4, lsl #17
   171d8:	andeq	r7, r1, r4, lsl #17
   171dc:	andeq	r7, r1, r4, lsl #17
   171e0:	muleq	r1, r8, r6
   171e4:			; <UNDEFINED> instruction: 0x000179b0
   171e8:	andeq	r7, r1, r4, lsr #19
   171ec:	andeq	r7, r1, r4, lsr #19
   171f0:	andeq	r7, r1, r4, lsr #19
   171f4:	andeq	r7, r1, r4, lsr #19
   171f8:	andeq	r7, r1, r4, lsr #19
   171fc:	andeq	r7, r1, r4, lsr #19
   17200:	andeq	r7, r1, r4, lsr #19
   17204:	andeq	r7, r1, r4, lsr #19
   17208:	andeq	r7, r1, r4, lsr #19
   1720c:	andeq	r7, r1, r4, lsr #19
   17210:	andeq	r7, r1, r4, lsr #19
   17214:	andeq	r7, r1, r4, lsr #19
   17218:	andeq	r7, r1, r4, lsr #19
   1721c:	andeq	r7, r1, r4, lsr #19
   17220:	andeq	r7, r1, r4, lsr #19
   17224:	andeq	r7, r1, r4, lsr #19
   17228:	andeq	r7, r1, r4, lsr #19
   1722c:	andeq	r7, r1, r4, lsr #19
   17230:	andeq	r7, r1, r4, lsr #19
   17234:	andeq	r7, r1, r4, lsr #19
   17238:	andeq	r7, r1, r4, lsr #19
   1723c:	andeq	r7, r1, r4, lsr #19
   17240:	andeq	r7, r1, r4, lsr #19
   17244:	andeq	r7, r1, r4, lsr #19
   17248:	andeq	r7, r1, r4, lsr #19
   1724c:	andeq	r7, r1, r4, lsr #19
   17250:	andeq	r7, r1, r4, lsl #17
   17254:	andeq	r7, r1, r0, asr r6
   17258:	andeq	r7, r1, r4, lsr #19
   1725c:	andeq	r7, r1, r4, lsl #17
   17260:	andeq	r7, r1, r4, lsr #19
   17264:	andeq	r7, r1, r4, lsl #17
   17268:	andeq	r7, r1, r4, lsr #19
   1726c:	andeq	r7, r1, r4, lsr #19
   17270:	andeq	r7, r1, r4, lsr #19
   17274:	andeq	r7, r1, r4, lsr #19
   17278:	andeq	r7, r1, r4, lsr #19
   1727c:	andeq	r7, r1, r4, lsr #19
   17280:	andeq	r7, r1, r4, lsr #19
   17284:	andeq	r7, r1, r4, lsr #19
   17288:	andeq	r7, r1, r4, lsr #19
   1728c:	andeq	r7, r1, r4, lsr #19
   17290:	andeq	r7, r1, r4, lsr #19
   17294:	andeq	r7, r1, r4, lsr #19
   17298:	andeq	r7, r1, r4, lsr #19
   1729c:	andeq	r7, r1, r4, lsr #19
   172a0:	andeq	r7, r1, r4, lsr #19
   172a4:	andeq	r7, r1, r4, lsr #19
   172a8:	andeq	r7, r1, r4, lsr #19
   172ac:	andeq	r7, r1, r4, lsr #19
   172b0:	andeq	r7, r1, r4, lsr #19
   172b4:	andeq	r7, r1, r4, lsr #19
   172b8:	andeq	r7, r1, r4, lsr #19
   172bc:	andeq	r7, r1, r4, lsr #19
   172c0:	andeq	r7, r1, r4, lsr #19
   172c4:	andeq	r7, r1, r4, lsr #19
   172c8:	andeq	r7, r1, r4, lsr #19
   172cc:	andeq	r7, r1, r4, lsr #19
   172d0:	andeq	r7, r1, r8, ror #8
   172d4:	andeq	r7, r1, r4, lsl #17
   172d8:	andeq	r7, r1, r8, ror #8
   172dc:	andeq	r7, r1, r8, lsl #19
   172e0:	cmp	r4, #0
   172e4:	moveq	r3, #1
   172e8:	streq	r3, [sp, #28]
   172ec:	beq	17a18 <__assert_fail@plt+0x638c>
   172f0:	mov	r3, #0
   172f4:	mov	r4, r3
   172f8:	mov	r2, #1
   172fc:	str	r2, [sp, #40]	; 0x28
   17300:	str	r3, [sp, #68]	; 0x44
   17304:	str	r2, [sp, #32]
   17308:	str	r2, [sp, #52]	; 0x34
   1730c:	ldr	r3, [pc, #2584]	; 17d2c <__assert_fail@plt+0x66a0>
   17310:	str	r4, [sp, #44]	; 0x2c
   17314:	str	r4, [sp, #72]	; 0x48
   17318:	str	r4, [sp, #28]
   1731c:	str	r3, [sp, #60]	; 0x3c
   17320:	mov	r8, #2
   17324:	b	17010 <__assert_fail@plt+0x5984>
   17328:	cmp	r4, #0
   1732c:	bne	185b8 <__assert_fail@plt+0x6f2c>
   17330:	cmp	sl, #0
   17334:	beq	18378 <__assert_fail@plt+0x6cec>
   17338:	mov	r3, #34	; 0x22
   1733c:	strb	r3, [fp]
   17340:	ldr	r3, [pc, #2528]	; 17d28 <__assert_fail@plt+0x669c>
   17344:	mov	r1, r4
   17348:	mov	r2, #1
   1734c:	str	r4, [sp, #68]	; 0x44
   17350:	str	r2, [sp, #40]	; 0x28
   17354:	mov	r4, r2
   17358:	str	r1, [sp, #44]	; 0x2c
   1735c:	str	r1, [sp, #72]	; 0x48
   17360:	str	r1, [sp, #32]
   17364:	str	r2, [sp, #28]
   17368:	str	r2, [sp, #52]	; 0x34
   1736c:	str	r3, [sp, #60]	; 0x3c
   17370:	b	17010 <__assert_fail@plt+0x5984>
   17374:	mov	r3, #0
   17378:	str	r3, [sp, #68]	; 0x44
   1737c:	str	r3, [sp, #44]	; 0x2c
   17380:	str	r3, [sp, #32]
   17384:	str	r3, [sp, #28]
   17388:	str	r3, [sp, #60]	; 0x3c
   1738c:	mov	r3, #1
   17390:	str	r8, [sp, #72]	; 0x48
   17394:	str	r8, [sp, #52]	; 0x34
   17398:	mov	r4, r8
   1739c:	str	r3, [sp, #40]	; 0x28
   173a0:	b	17010 <__assert_fail@plt+0x5984>
   173a4:	mov	r3, #1
   173a8:	str	r3, [sp, #40]	; 0x28
   173ac:	str	r3, [sp, #32]
   173b0:	str	r3, [sp, #28]
   173b4:	str	r3, [sp, #52]	; 0x34
   173b8:	ldr	r3, [pc, #2408]	; 17d28 <__assert_fail@plt+0x669c>
   173bc:	mov	r2, #0
   173c0:	mov	r4, r2
   173c4:	str	r2, [sp, #68]	; 0x44
   173c8:	str	r2, [sp, #44]	; 0x2c
   173cc:	str	r2, [sp, #72]	; 0x48
   173d0:	str	r3, [sp, #60]	; 0x3c
   173d4:	mov	r8, #5
   173d8:	b	17010 <__assert_fail@plt+0x5984>
   173dc:	mov	r3, #0
   173e0:	mov	r2, #1
   173e4:	str	r2, [sp, #40]	; 0x28
   173e8:	mov	r4, r3
   173ec:	str	r3, [sp, #68]	; 0x44
   173f0:	str	r2, [sp, #28]
   173f4:	str	r3, [sp, #44]	; 0x2c
   173f8:	str	r3, [sp, #72]	; 0x48
   173fc:	str	r3, [sp, #32]
   17400:	str	r3, [sp, #52]	; 0x34
   17404:	str	r3, [sp, #60]	; 0x3c
   17408:	b	17010 <__assert_fail@plt+0x5984>
   1740c:	mov	r2, #1
   17410:	mov	r3, #0
   17414:	str	r2, [sp, #40]	; 0x28
   17418:	mov	r4, r3
   1741c:	str	r3, [sp, #68]	; 0x44
   17420:	str	r8, [sp, #52]	; 0x34
   17424:	str	r2, [sp, #32]
   17428:	b	1730c <__assert_fail@plt+0x5c80>
   1742c:	mov	r3, #1
   17430:	str	r3, [sp, #40]	; 0x28
   17434:	str	r3, [sp, #32]
   17438:	str	r3, [sp, #28]
   1743c:	str	r3, [sp, #52]	; 0x34
   17440:	ldr	r3, [pc, #2276]	; 17d2c <__assert_fail@plt+0x66a0>
   17444:	mov	r2, #0
   17448:	mov	r4, r2
   1744c:	str	r2, [sp, #68]	; 0x44
   17450:	str	r2, [sp, #44]	; 0x2c
   17454:	str	r2, [sp, #72]	; 0x48
   17458:	str	r3, [sp, #60]	; 0x3c
   1745c:	mov	r8, #2
   17460:	b	17010 <__assert_fail@plt+0x5984>
   17464:	mov	r7, #0
   17468:	ldr	r3, [sp, #24]
   1746c:	cmn	r3, #1
   17470:	beq	17fac <__assert_fail@plt+0x6920>
   17474:	ldr	r3, [sp, #24]
   17478:	subs	r3, r3, #1
   1747c:	movne	r3, #1
   17480:	cmp	r3, #0
   17484:	sub	r2, fp, #2
   17488:	clz	r2, r2
   1748c:	lsr	r2, r2, #5
   17490:	bne	1768c <__assert_fail@plt+0x6000>
   17494:	cmp	r9, #0
   17498:	bne	1768c <__assert_fail@plt+0x6000>
   1749c:	ldr	r3, [sp, #32]
   174a0:	tst	r3, r2
   174a4:	bne	177ac <__assert_fail@plt+0x6120>
   174a8:	ldr	r3, [sp, #28]
   174ac:	eor	r3, r3, #1
   174b0:	orr	r3, r2, r3
   174b4:	ldr	r2, [sp, #32]
   174b8:	eor	r3, r3, #1
   174bc:	orrs	r3, r2, r3
   174c0:	beq	174f0 <__assert_fail@plt+0x5e64>
   174c4:	mov	r3, #0
   174c8:	ldr	r1, [sp, #56]	; 0x38
   174cc:	cmp	r1, #0
   174d0:	beq	174f0 <__assert_fail@plt+0x5e64>
   174d4:	lsr	r2, r5, #5
   174d8:	and	r0, r5, #31
   174dc:	uxtb	r2, r2
   174e0:	ldr	r1, [r1, r2, lsl #2]
   174e4:	lsr	r2, r1, r0
   174e8:	tst	r2, #1
   174ec:	bne	174f8 <__assert_fail@plt+0x5e6c>
   174f0:	cmp	r7, #0
   174f4:	beq	17748 <__assert_fail@plt+0x60bc>
   174f8:	sub	r2, fp, #2
   174fc:	clz	r2, r2
   17500:	lsr	r2, r2, #5
   17504:	ldr	r3, [sp, #32]
   17508:	cmp	r3, #0
   1750c:	bne	17838 <__assert_fail@plt+0x61ac>
   17510:	ldr	r3, [sp, #44]	; 0x2c
   17514:	eor	r3, r3, #1
   17518:	ands	r3, r2, r3
   1751c:	beq	17554 <__assert_fail@plt+0x5ec8>
   17520:	cmp	sl, r4
   17524:	movhi	r2, #39	; 0x27
   17528:	strbhi	r2, [r8, r4]
   1752c:	add	r2, r4, #1
   17530:	cmp	r2, sl
   17534:	movcc	r1, #36	; 0x24
   17538:	strbcc	r1, [r8, r2]
   1753c:	add	r2, r4, #2
   17540:	cmp	r2, sl
   17544:	add	r4, r4, #3
   17548:	movcc	r1, #39	; 0x27
   1754c:	strbcc	r1, [r8, r2]
   17550:	str	r3, [sp, #44]	; 0x2c
   17554:	cmp	r4, sl
   17558:	movcc	r3, #92	; 0x5c
   1755c:	strbcc	r3, [r8, r4]
   17560:	add	r9, r9, #1
   17564:	add	r4, r4, #1
   17568:	cmp	r4, sl
   1756c:	ldr	r3, [sp, #40]	; 0x28
   17570:	strbcc	r5, [r8, r4]
   17574:	cmp	r6, #0
   17578:	moveq	r3, #0
   1757c:	str	r3, [sp, #40]	; 0x28
   17580:	ldr	r3, [sp, #24]
   17584:	add	r4, r4, #1
   17588:	cmn	r3, #1
   1758c:	bne	1702c <__assert_fail@plt+0x59a0>
   17590:	ldr	r3, [sp, #36]	; 0x24
   17594:	ldrb	r6, [r3, r9]
   17598:	adds	r6, r6, #0
   1759c:	movne	r6, #1
   175a0:	cmp	r6, #0
   175a4:	bne	17040 <__assert_fail@plt+0x59b4>
   175a8:	str	fp, [sp, #160]	; 0xa0
   175ac:	mov	fp, r8
   175b0:	ldr	r8, [sp, #160]	; 0xa0
   175b4:	ldr	r1, [sp, #32]
   175b8:	cmp	r4, #0
   175bc:	sub	r2, r8, #2
   175c0:	clz	r2, r2
   175c4:	lsr	r2, r2, #5
   175c8:	andeq	r3, r2, r1
   175cc:	movne	r3, #0
   175d0:	cmp	r3, #0
   175d4:	bne	186c0 <__assert_fail@plt+0x7034>
   175d8:	eor	r3, r1, #1
   175dc:	ands	r2, r2, r3
   175e0:	beq	185fc <__assert_fail@plt+0x6f70>
   175e4:	ldr	r3, [sp, #68]	; 0x44
   175e8:	cmp	r3, #0
   175ec:	beq	18600 <__assert_fail@plt+0x6f74>
   175f0:	ldr	r3, [sp, #40]	; 0x28
   175f4:	cmp	r3, #0
   175f8:	bne	1867c <__assert_fail@plt+0x6ff0>
   175fc:	ldr	r3, [sp, #72]	; 0x48
   17600:	adds	r3, r3, #0
   17604:	movne	r3, #1
   17608:	cmp	sl, #0
   1760c:	movne	r3, #0
   17610:	cmp	r3, #0
   17614:	ldreq	r2, [sp, #68]	; 0x44
   17618:	beq	18600 <__assert_fail@plt+0x6f74>
   1761c:	ldr	sl, [sp, #72]	; 0x48
   17620:	str	r3, [sp, #68]	; 0x44
   17624:	ldr	r3, [pc, #1792]	; 17d2c <__assert_fail@plt+0x66a0>
   17628:	mov	r2, #39	; 0x27
   1762c:	mov	r4, #1
   17630:	str	r3, [sp, #60]	; 0x3c
   17634:	mov	r3, #0
   17638:	strb	r2, [fp]
   1763c:	str	r4, [sp, #52]	; 0x34
   17640:	mov	r8, #2
   17644:	str	r3, [sp, #32]
   17648:	b	17010 <__assert_fail@plt+0x5984>
   1764c:	mov	r7, #0
   17650:	cmp	fp, #2
   17654:	beq	17f8c <__assert_fail@plt+0x6900>
   17658:	ldr	r3, [sp, #52]	; 0x34
   1765c:	ldr	r2, [sp, #28]
   17660:	ldr	r1, [sp, #32]
   17664:	cmp	r3, #0
   17668:	andne	r2, r2, r1
   1766c:	moveq	r2, #0
   17670:	cmp	r2, #0
   17674:	moveq	r5, #92	; 0x5c
   17678:	moveq	r3, r5
   1767c:	bne	17f98 <__assert_fail@plt+0x690c>
   17680:	ldr	r1, [sp, #28]
   17684:	cmp	r1, #0
   17688:	bne	18708 <__assert_fail@plt+0x707c>
   1768c:	mov	r6, #0
   17690:	b	174a8 <__assert_fail@plt+0x5e1c>
   17694:	mov	r7, #0
   17698:	cmp	fp, #2
   1769c:	beq	17ffc <__assert_fail@plt+0x6970>
   176a0:	cmp	fp, #5
   176a4:	beq	17fc0 <__assert_fail@plt+0x6934>
   176a8:	sub	r2, fp, #2
   176ac:	mov	r6, #0
   176b0:	clz	r2, r2
   176b4:	mov	r5, #63	; 0x3f
   176b8:	lsr	r2, r2, #5
   176bc:	b	174a8 <__assert_fail@plt+0x5e1c>
   176c0:	mov	r7, #0
   176c4:	cmp	fp, #2
   176c8:	strne	r6, [sp, #68]	; 0x44
   176cc:	movne	r2, #0
   176d0:	movne	r5, #39	; 0x27
   176d4:	bne	174a8 <__assert_fail@plt+0x5e1c>
   176d8:	ldr	r3, [sp, #32]
   176dc:	cmp	r3, #0
   176e0:	bne	183dc <__assert_fail@plt+0x6d50>
   176e4:	cmp	sl, #0
   176e8:	ldr	r3, [sp, #72]	; 0x48
   176ec:	clz	r3, r3
   176f0:	lsr	r3, r3, #5
   176f4:	moveq	r3, #0
   176f8:	cmp	r3, #0
   176fc:	bne	18310 <__assert_fail@plt+0x6c84>
   17700:	cmp	sl, r4
   17704:	movhi	r3, #39	; 0x27
   17708:	strbhi	r3, [r8, r4]
   1770c:	add	r3, r4, #1
   17710:	cmp	sl, r3
   17714:	movhi	r2, #92	; 0x5c
   17718:	strbhi	r2, [r8, r3]
   1771c:	add	r3, r4, #2
   17720:	cmp	sl, r3
   17724:	movhi	r2, #39	; 0x27
   17728:	strbhi	r2, [r8, r3]
   1772c:	mov	r3, #0
   17730:	cmp	r7, #0
   17734:	add	r4, r4, #3
   17738:	str	r3, [sp, #44]	; 0x2c
   1773c:	str	r6, [sp, #68]	; 0x44
   17740:	mov	r5, #39	; 0x27
   17744:	bne	174f8 <__assert_fail@plt+0x5e6c>
   17748:	ldr	r2, [sp, #44]	; 0x2c
   1774c:	eor	r3, r3, #1
   17750:	and	r3, r3, r2
   17754:	add	r9, r9, #1
   17758:	uxtb	r3, r3
   1775c:	cmp	r3, #0
   17760:	beq	17568 <__assert_fail@plt+0x5edc>
   17764:	cmp	sl, r4
   17768:	movhi	r3, #39	; 0x27
   1776c:	strbhi	r3, [r8, r4]
   17770:	add	r3, r4, #1
   17774:	cmp	sl, r3
   17778:	movhi	r2, #39	; 0x27
   1777c:	strbhi	r2, [r8, r3]
   17780:	mov	r3, #0
   17784:	add	r4, r4, #2
   17788:	str	r3, [sp, #44]	; 0x2c
   1778c:	b	17568 <__assert_fail@plt+0x5edc>
   17790:	mov	r3, #114	; 0x72
   17794:	ldr	r1, [sp, #32]
   17798:	sub	r2, fp, #2
   1779c:	clz	r2, r2
   177a0:	lsr	r2, r2, #5
   177a4:	tst	r2, r1
   177a8:	beq	17680 <__assert_fail@plt+0x5ff4>
   177ac:	mov	fp, r8
   177b0:	mov	r8, #2
   177b4:	ldr	r3, [sp, #28]
   177b8:	cmp	r3, #0
   177bc:	movne	r8, #4
   177c0:	ldr	r3, [sp, #164]	; 0xa4
   177c4:	mov	ip, #0
   177c8:	bic	r3, r3, #2
   177cc:	str	r3, [sp, #4]
   177d0:	ldr	r3, [sp, #76]	; 0x4c
   177d4:	str	r8, [sp]
   177d8:	str	r3, [sp, #16]
   177dc:	ldr	r3, [sp, #80]	; 0x50
   177e0:	ldr	r2, [sp, #36]	; 0x24
   177e4:	str	r3, [sp, #12]
   177e8:	mov	r1, sl
   177ec:	ldr	r3, [sp, #24]
   177f0:	mov	r0, fp
   177f4:	str	ip, [sp, #8]
   177f8:	bl	16f18 <__assert_fail@plt+0x588c>
   177fc:	mov	r4, r0
   17800:	ldr	r3, [pc, #1304]	; 17d20 <__assert_fail@plt+0x6694>
   17804:	ldr	r2, [sp, #116]	; 0x74
   17808:	mov	r0, r4
   1780c:	ldr	r3, [r3]
   17810:	cmp	r2, r3
   17814:	bne	18704 <__assert_fail@plt+0x7078>
   17818:	add	sp, sp, #124	; 0x7c
   1781c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17820:	mov	r5, #110	; 0x6e
   17824:	ldr	r3, [sp, #32]
   17828:	mov	r2, #0
   1782c:	cmp	r3, #0
   17830:	mov	r6, r2
   17834:	beq	17510 <__assert_fail@plt+0x5e84>
   17838:	str	fp, [sp, #160]	; 0xa0
   1783c:	mov	fp, r8
   17840:	ldr	r8, [sp, #160]	; 0xa0
   17844:	mov	r3, r2
   17848:	ldr	r2, [sp, #28]
   1784c:	and	r2, r2, r3
   17850:	str	r2, [sp, #28]
   17854:	b	177b4 <__assert_fail@plt+0x6128>
   17858:	mov	r5, #116	; 0x74
   1785c:	b	17824 <__assert_fail@plt+0x6198>
   17860:	mov	r5, #102	; 0x66
   17864:	ldr	r3, [sp, #32]
   17868:	cmp	r3, #0
   1786c:	bne	18418 <__assert_fail@plt+0x6d8c>
   17870:	mov	r6, #0
   17874:	b	17554 <__assert_fail@plt+0x5ec8>
   17878:	mov	r5, #118	; 0x76
   1787c:	b	17864 <__assert_fail@plt+0x61d8>
   17880:	mov	r7, #0
   17884:	mov	r6, #0
   17888:	b	174c4 <__assert_fail@plt+0x5e38>
   1788c:	ldr	r3, [sp, #32]
   17890:	cmp	r3, #0
   17894:	bne	1865c <__assert_fail@plt+0x6fd0>
   17898:	mov	r7, r3
   1789c:	ldr	r3, [sp, #44]	; 0x2c
   178a0:	sub	r2, fp, #2
   178a4:	eor	r3, r3, #1
   178a8:	clz	r2, r2
   178ac:	lsr	r2, r2, #5
   178b0:	ands	r3, r2, r3
   178b4:	beq	182fc <__assert_fail@plt+0x6c70>
   178b8:	cmp	sl, r4
   178bc:	movhi	r1, #39	; 0x27
   178c0:	strbhi	r1, [r8, r4]
   178c4:	add	r1, r4, #1
   178c8:	cmp	sl, r1
   178cc:	movhi	r0, #36	; 0x24
   178d0:	strbhi	r0, [r8, r1]
   178d4:	add	r1, r4, #2
   178d8:	cmp	sl, r1
   178dc:	movhi	r0, #39	; 0x27
   178e0:	strbhi	r0, [r8, r1]
   178e4:	add	r1, r4, #3
   178e8:	cmp	sl, r1
   178ec:	bls	1835c <__assert_fail@plt+0x6cd0>
   178f0:	mov	r4, r1
   178f4:	mov	r1, #92	; 0x5c
   178f8:	strb	r1, [r8, r4]
   178fc:	mov	r1, r4
   17900:	str	r3, [sp, #44]	; 0x2c
   17904:	cmp	fp, #2
   17908:	add	r4, r4, #1
   1790c:	beq	183a4 <__assert_fail@plt+0x6d18>
   17910:	ldr	r0, [sp, #24]
   17914:	add	r3, r9, #1
   17918:	cmp	r3, r0
   1791c:	bcs	17934 <__assert_fail@plt+0x62a8>
   17920:	ldr	r0, [sp, #36]	; 0x24
   17924:	ldrb	r3, [r0, r3]
   17928:	sub	r3, r3, #48	; 0x30
   1792c:	cmp	r3, #9
   17930:	bls	183b4 <__assert_fail@plt+0x6d28>
   17934:	mov	r5, #48	; 0x30
   17938:	ldr	r3, [sp, #28]
   1793c:	eor	r3, r3, #1
   17940:	orrs	r2, r2, r3
   17944:	mov	r3, r6
   17948:	moveq	r6, r2
   1794c:	beq	174c8 <__assert_fail@plt+0x5e3c>
   17950:	mov	r6, #0
   17954:	b	174f0 <__assert_fail@plt+0x5e64>
   17958:	mov	r2, #0
   1795c:	mov	r6, r2
   17960:	mov	r5, #98	; 0x62
   17964:	b	17510 <__assert_fail@plt+0x5e84>
   17968:	mov	r5, #97	; 0x61
   1796c:	b	17870 <__assert_fail@plt+0x61e4>
   17970:	mov	r3, r7
   17974:	mov	r6, r7
   17978:	mov	r2, #0
   1797c:	mov	r7, r3
   17980:	mov	r5, #32
   17984:	b	174a8 <__assert_fail@plt+0x5e1c>
   17988:	cmp	r9, #0
   1798c:	mov	r3, r7
   17990:	bne	17f58 <__assert_fail@plt+0x68cc>
   17994:	mov	r6, r7
   17998:	mov	r2, r9
   1799c:	mov	r7, r3
   179a0:	b	174a8 <__assert_fail@plt+0x5e1c>
   179a4:	mov	r6, r7
   179a8:	b	174c4 <__assert_fail@plt+0x5e38>
   179ac:	mov	r7, #0
   179b0:	ldr	r3, [sp, #64]	; 0x40
   179b4:	cmp	r3, #1
   179b8:	bne	18014 <__assert_fail@plt+0x6988>
   179bc:	bl	114ac <__ctype_b_loc@plt>
   179c0:	ldr	r2, [sp, #64]	; 0x40
   179c4:	sxth	r3, r5
   179c8:	mov	ip, r2
   179cc:	lsl	r3, r3, #1
   179d0:	ldr	r2, [r0]
   179d4:	ldrh	r3, [r2, r3]
   179d8:	and	r3, r3, #16384	; 0x4000
   179dc:	cmp	r3, #0
   179e0:	ldr	r3, [sp, #28]
   179e4:	movne	r6, #1
   179e8:	moveq	r6, #0
   179ec:	movne	r2, #0
   179f0:	andeq	r2, r3, #1
   179f4:	cmp	r2, #0
   179f8:	bne	18324 <__assert_fail@plt+0x6c98>
   179fc:	sub	r2, fp, #2
   17a00:	clz	r2, r2
   17a04:	lsr	r2, r2, #5
   17a08:	b	174a8 <__assert_fail@plt+0x5e1c>
   17a0c:	cmp	r4, #0
   17a10:	bne	186d0 <__assert_fail@plt+0x7044>
   17a14:	str	r4, [sp, #28]
   17a18:	cmp	sl, #0
   17a1c:	bne	18714 <__assert_fail@plt+0x7088>
   17a20:	ldr	r3, [pc, #772]	; 17d2c <__assert_fail@plt+0x66a0>
   17a24:	mov	r4, #1
   17a28:	str	r4, [sp, #40]	; 0x28
   17a2c:	str	r3, [sp, #60]	; 0x3c
   17a30:	str	r4, [sp, #52]	; 0x34
   17a34:	str	sl, [sp, #72]	; 0x48
   17a38:	str	sl, [sp, #68]	; 0x44
   17a3c:	str	sl, [sp, #44]	; 0x2c
   17a40:	str	sl, [sp, #32]
   17a44:	mov	r8, #2
   17a48:	b	17010 <__assert_fail@plt+0x5984>
   17a4c:	ldr	r3, [sp, #36]	; 0x24
   17a50:	ldrb	r5, [r3, r9]
   17a54:	cmp	r5, #126	; 0x7e
   17a58:	ldrls	pc, [pc, r5, lsl #2]
   17a5c:	b	179b0 <__assert_fail@plt+0x6324>
   17a60:	muleq	r1, r4, ip
   17a64:			; <UNDEFINED> instruction: 0x000179b0
   17a68:			; <UNDEFINED> instruction: 0x000179b0
   17a6c:			; <UNDEFINED> instruction: 0x000179b0
   17a70:			; <UNDEFINED> instruction: 0x000179b0
   17a74:			; <UNDEFINED> instruction: 0x000179b0
   17a78:			; <UNDEFINED> instruction: 0x000179b0
   17a7c:	andeq	r7, r1, r0, lsl #25
   17a80:	andeq	r7, r1, ip, ror #24
   17a84:	andeq	r7, r1, r4, ror #24
   17a88:	andeq	r7, r1, ip, asr ip
   17a8c:	andeq	r7, r1, ip, lsl #26
   17a90:	strdeq	r7, [r1], -r8
   17a94:	muleq	r1, r0, r7
   17a98:			; <UNDEFINED> instruction: 0x000179b0
   17a9c:			; <UNDEFINED> instruction: 0x000179b0
   17aa0:			; <UNDEFINED> instruction: 0x000179b0
   17aa4:			; <UNDEFINED> instruction: 0x000179b0
   17aa8:			; <UNDEFINED> instruction: 0x000179b0
   17aac:			; <UNDEFINED> instruction: 0x000179b0
   17ab0:			; <UNDEFINED> instruction: 0x000179b0
   17ab4:			; <UNDEFINED> instruction: 0x000179b0
   17ab8:			; <UNDEFINED> instruction: 0x000179b0
   17abc:			; <UNDEFINED> instruction: 0x000179b0
   17ac0:			; <UNDEFINED> instruction: 0x000179b0
   17ac4:			; <UNDEFINED> instruction: 0x000179b0
   17ac8:			; <UNDEFINED> instruction: 0x000179b0
   17acc:			; <UNDEFINED> instruction: 0x000179b0
   17ad0:			; <UNDEFINED> instruction: 0x000179b0
   17ad4:			; <UNDEFINED> instruction: 0x000179b0
   17ad8:			; <UNDEFINED> instruction: 0x000179b0
   17adc:			; <UNDEFINED> instruction: 0x000179b0
   17ae0:	andeq	r7, r1, r8, ror #25
   17ae4:	ldrdeq	r7, [r1], -r4
   17ae8:	ldrdeq	r7, [r1], -r4
   17aec:	andeq	r7, r1, r4, asr #25
   17af0:	ldrdeq	r7, [r1], -r4
   17af4:	strdeq	r7, [r1], -ip
   17af8:	ldrdeq	r7, [r1], -r4
   17afc:	andeq	r7, r1, r4, asr #13
   17b00:	ldrdeq	r7, [r1], -r4
   17b04:	ldrdeq	r7, [r1], -r4
   17b08:	ldrdeq	r7, [r1], -r4
   17b0c:	strdeq	r7, [r1], -ip
   17b10:	strdeq	r7, [r1], -ip
   17b14:	strdeq	r7, [r1], -ip
   17b18:	strdeq	r7, [r1], -ip
   17b1c:	strdeq	r7, [r1], -ip
   17b20:	strdeq	r7, [r1], -ip
   17b24:	strdeq	r7, [r1], -ip
   17b28:	strdeq	r7, [r1], -ip
   17b2c:	strdeq	r7, [r1], -ip
   17b30:	strdeq	r7, [r1], -ip
   17b34:	strdeq	r7, [r1], -ip
   17b38:	strdeq	r7, [r1], -ip
   17b3c:	strdeq	r7, [r1], -ip
   17b40:	strdeq	r7, [r1], -ip
   17b44:	strdeq	r7, [r1], -ip
   17b48:	strdeq	r7, [r1], -ip
   17b4c:	ldrdeq	r7, [r1], -r4
   17b50:	ldrdeq	r7, [r1], -r4
   17b54:	ldrdeq	r7, [r1], -r4
   17b58:	ldrdeq	r7, [r1], -r4
   17b5c:	muleq	r1, r8, r6
   17b60:			; <UNDEFINED> instruction: 0x000179b0
   17b64:	strdeq	r7, [r1], -ip
   17b68:	strdeq	r7, [r1], -ip
   17b6c:	strdeq	r7, [r1], -ip
   17b70:	strdeq	r7, [r1], -ip
   17b74:	strdeq	r7, [r1], -ip
   17b78:	strdeq	r7, [r1], -ip
   17b7c:	strdeq	r7, [r1], -ip
   17b80:	strdeq	r7, [r1], -ip
   17b84:	strdeq	r7, [r1], -ip
   17b88:	strdeq	r7, [r1], -ip
   17b8c:	strdeq	r7, [r1], -ip
   17b90:	strdeq	r7, [r1], -ip
   17b94:	strdeq	r7, [r1], -ip
   17b98:	strdeq	r7, [r1], -ip
   17b9c:	strdeq	r7, [r1], -ip
   17ba0:	strdeq	r7, [r1], -ip
   17ba4:	strdeq	r7, [r1], -ip
   17ba8:	strdeq	r7, [r1], -ip
   17bac:	strdeq	r7, [r1], -ip
   17bb0:	strdeq	r7, [r1], -ip
   17bb4:	strdeq	r7, [r1], -ip
   17bb8:	strdeq	r7, [r1], -ip
   17bbc:	strdeq	r7, [r1], -ip
   17bc0:	strdeq	r7, [r1], -ip
   17bc4:	strdeq	r7, [r1], -ip
   17bc8:	strdeq	r7, [r1], -ip
   17bcc:	ldrdeq	r7, [r1], -r4
   17bd0:	andeq	r7, r1, r0, asr r6
   17bd4:	strdeq	r7, [r1], -ip
   17bd8:	ldrdeq	r7, [r1], -r4
   17bdc:	strdeq	r7, [r1], -ip
   17be0:	ldrdeq	r7, [r1], -r4
   17be4:	strdeq	r7, [r1], -ip
   17be8:	strdeq	r7, [r1], -ip
   17bec:	strdeq	r7, [r1], -ip
   17bf0:	strdeq	r7, [r1], -ip
   17bf4:	strdeq	r7, [r1], -ip
   17bf8:	strdeq	r7, [r1], -ip
   17bfc:	strdeq	r7, [r1], -ip
   17c00:	strdeq	r7, [r1], -ip
   17c04:	strdeq	r7, [r1], -ip
   17c08:	strdeq	r7, [r1], -ip
   17c0c:	strdeq	r7, [r1], -ip
   17c10:	strdeq	r7, [r1], -ip
   17c14:	strdeq	r7, [r1], -ip
   17c18:	strdeq	r7, [r1], -ip
   17c1c:	strdeq	r7, [r1], -ip
   17c20:	strdeq	r7, [r1], -ip
   17c24:	strdeq	r7, [r1], -ip
   17c28:	strdeq	r7, [r1], -ip
   17c2c:	strdeq	r7, [r1], -ip
   17c30:	strdeq	r7, [r1], -ip
   17c34:	strdeq	r7, [r1], -ip
   17c38:	strdeq	r7, [r1], -ip
   17c3c:	strdeq	r7, [r1], -ip
   17c40:	strdeq	r7, [r1], -ip
   17c44:	strdeq	r7, [r1], -ip
   17c48:	strdeq	r7, [r1], -ip
   17c4c:	andeq	r7, r1, r8, ror #8
   17c50:	ldrdeq	r7, [r1], -r4
   17c54:	andeq	r7, r1, r8, ror #8
   17c58:	andeq	r7, r1, r4, asr #25
   17c5c:	mov	r3, #110	; 0x6e
   17c60:	b	17794 <__assert_fail@plt+0x6108>
   17c64:	mov	r3, #116	; 0x74
   17c68:	b	17794 <__assert_fail@plt+0x6108>
   17c6c:	sub	r2, fp, #2
   17c70:	mov	r3, #98	; 0x62
   17c74:	clz	r2, r2
   17c78:	lsr	r2, r2, #5
   17c7c:	b	17680 <__assert_fail@plt+0x5ff4>
   17c80:	sub	r2, fp, #2
   17c84:	mov	r3, #97	; 0x61
   17c88:	clz	r2, r2
   17c8c:	lsr	r2, r2, #5
   17c90:	b	17680 <__assert_fail@plt+0x5ff4>
   17c94:	ldr	r3, [sp, #28]
   17c98:	cmp	r3, #0
   17c9c:	bne	1788c <__assert_fail@plt+0x6200>
   17ca0:	ldr	r3, [sp, #164]	; 0xa4
   17ca4:	tst	r3, #1
   17ca8:	bne	1831c <__assert_fail@plt+0x6c90>
   17cac:	ldr	r6, [sp, #28]
   17cb0:	sub	r2, fp, #2
   17cb4:	mov	r7, r6
   17cb8:	clz	r2, r2
   17cbc:	lsr	r2, r2, #5
   17cc0:	b	174a8 <__assert_fail@plt+0x5e1c>
   17cc4:	sub	r2, fp, #2
   17cc8:	clz	r2, r2
   17ccc:	lsr	r2, r2, #5
   17cd0:	b	17494 <__assert_fail@plt+0x5e08>
   17cd4:	sub	r2, fp, #2
   17cd8:	mov	r6, #0
   17cdc:	clz	r2, r2
   17ce0:	lsr	r2, r2, #5
   17ce4:	b	1749c <__assert_fail@plt+0x5e10>
   17ce8:	sub	r2, fp, #2
   17cec:	clz	r2, r2
   17cf0:	lsr	r2, r2, #5
   17cf4:	b	1749c <__assert_fail@plt+0x5e10>
   17cf8:	sub	r2, fp, #2
   17cfc:	mov	r3, #102	; 0x66
   17d00:	clz	r2, r2
   17d04:	lsr	r2, r2, #5
   17d08:	b	17680 <__assert_fail@plt+0x5ff4>
   17d0c:	sub	r2, fp, #2
   17d10:	mov	r3, #118	; 0x76
   17d14:	clz	r2, r2
   17d18:	lsr	r2, r2, #5
   17d1c:	b	17680 <__assert_fail@plt+0x5ff4>
   17d20:	muleq	r2, r8, sp
   17d24:	andeq	ip, r1, r4, asr r7
   17d28:	andeq	ip, r1, ip, lsr r7
   17d2c:	andeq	ip, r1, r0, asr r7
   17d30:	ldr	r3, [sp, #48]	; 0x30
   17d34:	ldrb	r5, [r3]
   17d38:	cmp	r5, #126	; 0x7e
   17d3c:	ldrls	pc, [pc, r5, lsl #2]
   17d40:	b	179ac <__assert_fail@plt+0x6320>
   17d44:	andeq	r7, r1, ip, lsl #17
   17d48:	andeq	r7, r1, ip, lsr #19
   17d4c:	andeq	r7, r1, ip, lsr #19
   17d50:	andeq	r7, r1, ip, lsr #19
   17d54:	andeq	r7, r1, ip, lsr #19
   17d58:	andeq	r7, r1, ip, lsr #19
   17d5c:	andeq	r7, r1, ip, lsr #19
   17d60:	andeq	r7, r1, r4, lsl #31
   17d64:	andeq	r7, r1, ip, ror pc
   17d68:	andeq	r7, r1, r8, asr r8
   17d6c:	andeq	r7, r1, r0, lsr #16
   17d70:	andeq	r7, r1, r8, ror r8
   17d74:	andeq	r7, r1, r0, ror #16
   17d78:	andeq	r7, r1, r0, ror pc
   17d7c:	andeq	r7, r1, ip, lsr #19
   17d80:	andeq	r7, r1, ip, lsr #19
   17d84:	andeq	r7, r1, ip, lsr #19
   17d88:	andeq	r7, r1, ip, lsr #19
   17d8c:	andeq	r7, r1, ip, lsr #19
   17d90:	andeq	r7, r1, ip, lsr #19
   17d94:	andeq	r7, r1, ip, lsr #19
   17d98:	andeq	r7, r1, ip, lsr #19
   17d9c:	andeq	r7, r1, ip, lsr #19
   17da0:	andeq	r7, r1, ip, lsr #19
   17da4:	andeq	r7, r1, ip, lsr #19
   17da8:	andeq	r7, r1, ip, lsr #19
   17dac:	andeq	r7, r1, ip, lsr #19
   17db0:	andeq	r7, r1, ip, lsr #19
   17db4:	andeq	r7, r1, ip, lsr #19
   17db8:	andeq	r7, r1, ip, lsr #19
   17dbc:	andeq	r7, r1, ip, lsr #19
   17dc0:	andeq	r7, r1, ip, lsr #19
   17dc4:	andeq	r7, r1, r8, ror #30
   17dc8:	andeq	r7, r1, r0, lsl #17
   17dcc:	andeq	r7, r1, r0, lsl #17
   17dd0:	andeq	r7, r1, ip, asr #30
   17dd4:	andeq	r7, r1, r0, lsl #17
   17dd8:	andeq	r7, r1, r0, asr #30
   17ddc:	andeq	r7, r1, r0, lsl #17
   17de0:	andeq	r7, r1, r0, asr #13
   17de4:	andeq	r7, r1, r0, lsl #17
   17de8:	andeq	r7, r1, r0, lsl #17
   17dec:	andeq	r7, r1, r0, lsl #17
   17df0:	andeq	r7, r1, r0, asr #30
   17df4:	andeq	r7, r1, r0, asr #30
   17df8:	andeq	r7, r1, r0, asr #30
   17dfc:	andeq	r7, r1, r0, asr #30
   17e00:	andeq	r7, r1, r0, asr #30
   17e04:	andeq	r7, r1, r0, asr #30
   17e08:	andeq	r7, r1, r0, asr #30
   17e0c:	andeq	r7, r1, r0, asr #30
   17e10:	andeq	r7, r1, r0, asr #30
   17e14:	andeq	r7, r1, r0, asr #30
   17e18:	andeq	r7, r1, r0, asr #30
   17e1c:	andeq	r7, r1, r0, asr #30
   17e20:	andeq	r7, r1, r0, asr #30
   17e24:	andeq	r7, r1, r0, asr #30
   17e28:	andeq	r7, r1, r0, asr #30
   17e2c:	andeq	r7, r1, r0, asr #30
   17e30:	andeq	r7, r1, r0, lsl #17
   17e34:	andeq	r7, r1, r0, lsl #17
   17e38:	andeq	r7, r1, r0, lsl #17
   17e3c:	andeq	r7, r1, r0, lsl #17
   17e40:	muleq	r1, r4, r6
   17e44:	andeq	r7, r1, ip, lsr #19
   17e48:	andeq	r7, r1, r0, asr #30
   17e4c:	andeq	r7, r1, r0, asr #30
   17e50:	andeq	r7, r1, r0, asr #30
   17e54:	andeq	r7, r1, r0, asr #30
   17e58:	andeq	r7, r1, r0, asr #30
   17e5c:	andeq	r7, r1, r0, asr #30
   17e60:	andeq	r7, r1, r0, asr #30
   17e64:	andeq	r7, r1, r0, asr #30
   17e68:	andeq	r7, r1, r0, asr #30
   17e6c:	andeq	r7, r1, r0, asr #30
   17e70:	andeq	r7, r1, r0, asr #30
   17e74:	andeq	r7, r1, r0, asr #30
   17e78:	andeq	r7, r1, r0, asr #30
   17e7c:	andeq	r7, r1, r0, asr #30
   17e80:	andeq	r7, r1, r0, asr #30
   17e84:	andeq	r7, r1, r0, asr #30
   17e88:	andeq	r7, r1, r0, asr #30
   17e8c:	andeq	r7, r1, r0, asr #30
   17e90:	andeq	r7, r1, r0, asr #30
   17e94:	andeq	r7, r1, r0, asr #30
   17e98:	andeq	r7, r1, r0, asr #30
   17e9c:	andeq	r7, r1, r0, asr #30
   17ea0:	andeq	r7, r1, r0, asr #30
   17ea4:	andeq	r7, r1, r0, asr #30
   17ea8:	andeq	r7, r1, r0, asr #30
   17eac:	andeq	r7, r1, r0, asr #30
   17eb0:	andeq	r7, r1, r0, lsl #17
   17eb4:	andeq	r7, r1, ip, asr #12
   17eb8:	andeq	r7, r1, r0, asr #30
   17ebc:	andeq	r7, r1, r0, lsl #17
   17ec0:	andeq	r7, r1, r0, asr #30
   17ec4:	andeq	r7, r1, r0, lsl #17
   17ec8:	andeq	r7, r1, r0, asr #30
   17ecc:	andeq	r7, r1, r0, asr #30
   17ed0:	andeq	r7, r1, r0, asr #30
   17ed4:	andeq	r7, r1, r0, asr #30
   17ed8:	andeq	r7, r1, r0, asr #30
   17edc:	andeq	r7, r1, r0, asr #30
   17ee0:	andeq	r7, r1, r0, asr #30
   17ee4:	andeq	r7, r1, r0, asr #30
   17ee8:	andeq	r7, r1, r0, asr #30
   17eec:	andeq	r7, r1, r0, asr #30
   17ef0:	andeq	r7, r1, r0, asr #30
   17ef4:	andeq	r7, r1, r0, asr #30
   17ef8:	andeq	r7, r1, r0, asr #30
   17efc:	andeq	r7, r1, r0, asr #30
   17f00:	andeq	r7, r1, r0, asr #30
   17f04:	andeq	r7, r1, r0, asr #30
   17f08:	andeq	r7, r1, r0, asr #30
   17f0c:	andeq	r7, r1, r0, asr #30
   17f10:	andeq	r7, r1, r0, asr #30
   17f14:	andeq	r7, r1, r0, asr #30
   17f18:	andeq	r7, r1, r0, asr #30
   17f1c:	andeq	r7, r1, r0, asr #30
   17f20:	andeq	r7, r1, r0, asr #30
   17f24:	andeq	r7, r1, r0, asr #30
   17f28:	andeq	r7, r1, r0, asr #30
   17f2c:	andeq	r7, r1, r0, asr #30
   17f30:	andeq	r7, r1, r4, ror #8
   17f34:	andeq	r7, r1, r0, lsl #17
   17f38:	andeq	r7, r1, r4, ror #8
   17f3c:	andeq	r7, r1, ip, asr #30
   17f40:	mov	r6, r7
   17f44:	mov	r7, #0
   17f48:	b	174c4 <__assert_fail@plt+0x5e38>
   17f4c:	cmp	r9, #0
   17f50:	mov	r3, #0
   17f54:	beq	17994 <__assert_fail@plt+0x6308>
   17f58:	mov	r6, #0
   17f5c:	mov	r7, r3
   17f60:	mov	r3, r6
   17f64:	b	174c8 <__assert_fail@plt+0x5e3c>
   17f68:	mov	r3, #0
   17f6c:	b	17974 <__assert_fail@plt+0x62e8>
   17f70:	mov	r7, #0
   17f74:	mov	r3, #114	; 0x72
   17f78:	b	17794 <__assert_fail@plt+0x6108>
   17f7c:	mov	r5, #98	; 0x62
   17f80:	b	17824 <__assert_fail@plt+0x6198>
   17f84:	mov	r5, #97	; 0x61
   17f88:	b	17864 <__assert_fail@plt+0x61d8>
   17f8c:	ldr	r3, [sp, #32]
   17f90:	cmp	r3, #0
   17f94:	bne	183dc <__assert_fail@plt+0x6d50>
   17f98:	add	r9, r9, #1
   17f9c:	ldr	r3, [sp, #44]	; 0x2c
   17fa0:	mov	r6, #0
   17fa4:	mov	r5, #92	; 0x5c
   17fa8:	b	1775c <__assert_fail@plt+0x60d0>
   17fac:	ldr	r3, [sp, #36]	; 0x24
   17fb0:	ldrb	r3, [r3, #1]
   17fb4:	adds	r3, r3, #0
   17fb8:	movne	r3, #1
   17fbc:	b	17480 <__assert_fail@plt+0x5df4>
   17fc0:	ldr	r3, [sp, #164]	; 0xa4
   17fc4:	ands	r3, r3, #4
   17fc8:	beq	17fec <__assert_fail@plt+0x6960>
   17fcc:	ldr	r2, [sp, #24]
   17fd0:	add	r3, r9, #2
   17fd4:	cmp	r3, r2
   17fd8:	bcs	17fec <__assert_fail@plt+0x6960>
   17fdc:	ldr	r2, [sp, #48]	; 0x30
   17fe0:	ldrb	r5, [r2, #1]
   17fe4:	cmp	r5, #63	; 0x3f
   17fe8:	beq	18450 <__assert_fail@plt+0x6dc4>
   17fec:	mov	r2, #0
   17ff0:	mov	r6, r2
   17ff4:	mov	r5, #63	; 0x3f
   17ff8:	b	174a8 <__assert_fail@plt+0x5e1c>
   17ffc:	ldr	r3, [sp, #32]
   18000:	cmp	r3, #0
   18004:	bne	183dc <__assert_fail@plt+0x6d50>
   18008:	mov	r6, r3
   1800c:	mov	r5, #63	; 0x3f
   18010:	b	174f0 <__assert_fail@plt+0x5e64>
   18014:	ldr	r3, [sp, #24]
   18018:	cmn	r3, #1
   1801c:	mov	r3, #0
   18020:	str	r3, [sp, #108]	; 0x6c
   18024:	str	r3, [sp, #112]	; 0x70
   18028:	bne	18038 <__assert_fail@plt+0x69ac>
   1802c:	ldr	r0, [sp, #36]	; 0x24
   18030:	bl	114dc <strlen@plt>
   18034:	str	r0, [sp, #24]
   18038:	mov	r3, #0
   1803c:	str	sl, [sp, #88]	; 0x58
   18040:	ldr	sl, [sp, #36]	; 0x24
   18044:	str	r5, [sp, #92]	; 0x5c
   18048:	mov	r5, r3
   1804c:	str	r7, [sp, #96]	; 0x60
   18050:	str	r4, [sp, #100]	; 0x64
   18054:	str	r8, [sp, #84]	; 0x54
   18058:	ldr	r3, [sp, #24]
   1805c:	add	r4, r9, r5
   18060:	add	r7, sl, r4
   18064:	sub	r2, r3, r4
   18068:	mov	r1, r7
   1806c:	add	r3, sp, #108	; 0x6c
   18070:	add	r0, sp, #104	; 0x68
   18074:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   18078:	subs	r8, r0, #0
   1807c:	beq	180cc <__assert_fail@plt+0x6a40>
   18080:	cmn	r8, #1
   18084:	beq	1842c <__assert_fail@plt+0x6da0>
   18088:	cmn	r8, #2
   1808c:	beq	1854c <__assert_fail@plt+0x6ec0>
   18090:	ldr	r3, [sp, #32]
   18094:	cmp	fp, #2
   18098:	movne	r3, #0
   1809c:	andeq	r3, r3, #1
   180a0:	cmp	r3, #0
   180a4:	bne	1822c <__assert_fail@plt+0x6ba0>
   180a8:	ldr	r0, [sp, #104]	; 0x68
   180ac:	bl	113c8 <iswprint@plt>
   180b0:	add	r5, r5, r8
   180b4:	cmp	r0, #0
   180b8:	add	r0, sp, #108	; 0x6c
   180bc:	moveq	r6, #0
   180c0:	bl	11344 <mbsinit@plt>
   180c4:	cmp	r0, #0
   180c8:	beq	18058 <__assert_fail@plt+0x69cc>
   180cc:	ldr	r3, [sp, #28]
   180d0:	mov	ip, r5
   180d4:	eor	r2, r6, #1
   180d8:	ldr	r5, [sp, #92]	; 0x5c
   180dc:	ldr	r7, [sp, #96]	; 0x60
   180e0:	ldr	r4, [sp, #100]	; 0x64
   180e4:	ldr	r8, [sp, #84]	; 0x54
   180e8:	ldr	sl, [sp, #88]	; 0x58
   180ec:	and	r2, r2, r3
   180f0:	cmp	ip, #1
   180f4:	bls	179f4 <__assert_fail@plt+0x6368>
   180f8:	add	r1, ip, r9
   180fc:	ldr	lr, [sp, #48]	; 0x30
   18100:	mov	r0, #0
   18104:	str	r6, [sp, #48]	; 0x30
   18108:	mov	ip, #39	; 0x27
   1810c:	ldr	r6, [sp, #44]	; 0x2c
   18110:	b	181c8 <__assert_fail@plt+0x6b3c>
   18114:	ldr	r0, [sp, #32]
   18118:	sub	r3, fp, #2
   1811c:	cmp	r0, #0
   18120:	clz	r3, r3
   18124:	lsr	r3, r3, #5
   18128:	bne	18330 <__assert_fail@plt+0x6ca4>
   1812c:	eor	r0, r6, #1
   18130:	ands	r3, r3, r0
   18134:	beq	18164 <__assert_fail@plt+0x6ad8>
   18138:	add	r0, r4, #1
   1813c:	cmp	sl, r4
   18140:	strbhi	ip, [r8, r4]
   18144:	cmp	sl, r0
   18148:	movhi	r6, #36	; 0x24
   1814c:	strbhi	r6, [r8, r0]
   18150:	add	r0, r4, #2
   18154:	mov	r6, r3
   18158:	add	r4, r4, #3
   1815c:	cmp	sl, r0
   18160:	strbhi	ip, [r8, r0]
   18164:	cmp	sl, r4
   18168:	movhi	r3, #92	; 0x5c
   1816c:	strbhi	r3, [r8, r4]
   18170:	add	r3, r4, #1
   18174:	cmp	sl, r3
   18178:	lsrhi	r0, r5, #6
   1817c:	addhi	r0, r0, #48	; 0x30
   18180:	strbhi	r0, [r8, r3]
   18184:	add	r0, r4, #2
   18188:	cmp	sl, r0
   1818c:	lsrhi	r3, r5, #3
   18190:	andhi	r3, r3, #7
   18194:	addhi	r3, r3, #48	; 0x30
   18198:	add	r9, r9, #1
   1819c:	strbhi	r3, [r8, r0]
   181a0:	and	r5, r5, #7
   181a4:	cmp	r9, r1
   181a8:	add	r5, r5, #48	; 0x30
   181ac:	add	r4, r4, #3
   181b0:	bcs	18350 <__assert_fail@plt+0x6cc4>
   181b4:	mov	r0, r2
   181b8:	cmp	sl, r4
   181bc:	strbhi	r5, [r8, r4]
   181c0:	ldrb	r5, [lr, #1]!
   181c4:	add	r4, r4, #1
   181c8:	cmp	r2, #0
   181cc:	bne	18114 <__assert_fail@plt+0x6a88>
   181d0:	eor	r3, r0, #1
   181d4:	and	r3, r3, r6
   181d8:	cmp	r7, #0
   181dc:	uxtb	r3, r3
   181e0:	beq	181f4 <__assert_fail@plt+0x6b68>
   181e4:	cmp	sl, r4
   181e8:	movhi	r7, #92	; 0x5c
   181ec:	strbhi	r7, [r8, r4]
   181f0:	add	r4, r4, #1
   181f4:	add	r9, r9, #1
   181f8:	cmp	r9, r1
   181fc:	bcs	18344 <__assert_fail@plt+0x6cb8>
   18200:	cmp	r3, #0
   18204:	beq	18370 <__assert_fail@plt+0x6ce4>
   18208:	cmp	sl, r4
   1820c:	add	r3, r4, #1
   18210:	strbhi	ip, [r8, r4]
   18214:	mov	r7, #0
   18218:	cmp	sl, r3
   1821c:	strbhi	ip, [r8, r3]
   18220:	add	r4, r4, #2
   18224:	mov	r6, r7
   18228:	b	181b8 <__assert_fail@plt+0x6b2c>
   1822c:	cmp	r8, #1
   18230:	beq	180a8 <__assert_fail@plt+0x6a1c>
   18234:	add	r1, r4, #1
   18238:	add	r3, sl, r8
   1823c:	add	r1, sl, r1
   18240:	add	r4, r3, r4
   18244:	ldrb	r3, [r1], #1
   18248:	sub	r3, r3, #91	; 0x5b
   1824c:	cmp	r3, #33	; 0x21
   18250:	ldrls	pc, [pc, r3, lsl #2]
   18254:	b	182e0 <__assert_fail@plt+0x6c54>
   18258:	andeq	r8, r1, ip, ror #5
   1825c:	andeq	r8, r1, ip, ror #5
   18260:	andeq	r8, r1, r0, ror #5
   18264:	andeq	r8, r1, ip, ror #5
   18268:	andeq	r8, r1, r0, ror #5
   1826c:	andeq	r8, r1, ip, ror #5
   18270:	andeq	r8, r1, r0, ror #5
   18274:	andeq	r8, r1, r0, ror #5
   18278:	andeq	r8, r1, r0, ror #5
   1827c:	andeq	r8, r1, r0, ror #5
   18280:	andeq	r8, r1, r0, ror #5
   18284:	andeq	r8, r1, r0, ror #5
   18288:	andeq	r8, r1, r0, ror #5
   1828c:	andeq	r8, r1, r0, ror #5
   18290:	andeq	r8, r1, r0, ror #5
   18294:	andeq	r8, r1, r0, ror #5
   18298:	andeq	r8, r1, r0, ror #5
   1829c:	andeq	r8, r1, r0, ror #5
   182a0:	andeq	r8, r1, r0, ror #5
   182a4:	andeq	r8, r1, r0, ror #5
   182a8:	andeq	r8, r1, r0, ror #5
   182ac:	andeq	r8, r1, r0, ror #5
   182b0:	andeq	r8, r1, r0, ror #5
   182b4:	andeq	r8, r1, r0, ror #5
   182b8:	andeq	r8, r1, r0, ror #5
   182bc:	andeq	r8, r1, r0, ror #5
   182c0:	andeq	r8, r1, r0, ror #5
   182c4:	andeq	r8, r1, r0, ror #5
   182c8:	andeq	r8, r1, r0, ror #5
   182cc:	andeq	r8, r1, r0, ror #5
   182d0:	andeq	r8, r1, r0, ror #5
   182d4:	andeq	r8, r1, r0, ror #5
   182d8:	andeq	r8, r1, r0, ror #5
   182dc:	andeq	r8, r1, ip, ror #5
   182e0:	cmp	r4, r1
   182e4:	bne	18244 <__assert_fail@plt+0x6bb8>
   182e8:	b	180a8 <__assert_fail@plt+0x6a1c>
   182ec:	ldr	fp, [sp, #84]	; 0x54
   182f0:	ldr	sl, [sp, #88]	; 0x58
   182f4:	mov	r8, #2
   182f8:	b	177b4 <__assert_fail@plt+0x6128>
   182fc:	cmp	sl, r4
   18300:	movls	r1, r4
   18304:	bls	17904 <__assert_fail@plt+0x6278>
   18308:	ldr	r3, [sp, #44]	; 0x2c
   1830c:	b	178f4 <__assert_fail@plt+0x6268>
   18310:	str	sl, [sp, #72]	; 0x48
   18314:	ldr	sl, [sp, #32]
   18318:	b	1772c <__assert_fail@plt+0x60a0>
   1831c:	add	r9, r9, #1
   18320:	b	17020 <__assert_fail@plt+0x5994>
   18324:	ldr	r2, [sp, #28]
   18328:	mov	r6, #0
   1832c:	b	180f8 <__assert_fail@plt+0x6a6c>
   18330:	str	fp, [sp, #160]	; 0xa0
   18334:	str	r3, [sp, #28]
   18338:	mov	fp, r8
   1833c:	ldr	r8, [sp, #160]	; 0xa0
   18340:	b	177b4 <__assert_fail@plt+0x6128>
   18344:	str	r6, [sp, #44]	; 0x2c
   18348:	ldr	r6, [sp, #48]	; 0x30
   1834c:	b	1775c <__assert_fail@plt+0x60d0>
   18350:	str	r6, [sp, #44]	; 0x2c
   18354:	ldr	r6, [sp, #48]	; 0x30
   18358:	b	17568 <__assert_fail@plt+0x5edc>
   1835c:	add	r4, r4, #4
   18360:	str	r3, [sp, #44]	; 0x2c
   18364:	mov	r6, #0
   18368:	mov	r5, #48	; 0x30
   1836c:	b	174f0 <__assert_fail@plt+0x5e64>
   18370:	mov	r7, r3
   18374:	b	181b8 <__assert_fail@plt+0x6b2c>
   18378:	ldr	r3, [pc, #-1624]	; 17d28 <__assert_fail@plt+0x669c>
   1837c:	mov	r4, #1
   18380:	str	r4, [sp, #40]	; 0x28
   18384:	str	r4, [sp, #28]
   18388:	str	r4, [sp, #52]	; 0x34
   1838c:	str	sl, [sp, #72]	; 0x48
   18390:	str	sl, [sp, #68]	; 0x44
   18394:	str	sl, [sp, #44]	; 0x2c
   18398:	str	sl, [sp, #32]
   1839c:	str	r3, [sp, #60]	; 0x3c
   183a0:	b	17010 <__assert_fail@plt+0x5984>
   183a4:	mov	r3, r6
   183a8:	mov	r5, #48	; 0x30
   183ac:	mov	r6, #0
   183b0:	b	174f0 <__assert_fail@plt+0x5e64>
   183b4:	cmp	sl, r4
   183b8:	movhi	r3, #48	; 0x30
   183bc:	strbhi	r3, [r8, r4]
   183c0:	add	r3, r1, #2
   183c4:	cmp	sl, r3
   183c8:	movhi	r0, #48	; 0x30
   183cc:	strbhi	r0, [r8, r3]
   183d0:	add	r4, r1, #3
   183d4:	mov	r5, #48	; 0x30
   183d8:	b	17938 <__assert_fail@plt+0x62ac>
   183dc:	str	fp, [sp, #160]	; 0xa0
   183e0:	mov	fp, r8
   183e4:	ldr	r8, [sp, #160]	; 0xa0
   183e8:	b	177b4 <__assert_fail@plt+0x6128>
   183ec:	ldr	r2, [sp, #80]	; 0x50
   183f0:	ldrb	r3, [r2]
   183f4:	cmp	r3, #0
   183f8:	beq	16fe0 <__assert_fail@plt+0x5954>
   183fc:	cmp	sl, r4
   18400:	strbhi	r3, [fp, r4]
   18404:	ldrb	r3, [r2, #1]!
   18408:	add	r4, r4, #1
   1840c:	cmp	r3, #0
   18410:	bne	183fc <__assert_fail@plt+0x6d70>
   18414:	b	16fe0 <__assert_fail@plt+0x5954>
   18418:	str	fp, [sp, #160]	; 0xa0
   1841c:	mov	r3, #0
   18420:	mov	fp, r8
   18424:	ldr	r8, [sp, #160]	; 0xa0
   18428:	b	17848 <__assert_fail@plt+0x61bc>
   1842c:	mov	ip, r5
   18430:	ldr	r7, [sp, #96]	; 0x60
   18434:	ldr	r5, [sp, #92]	; 0x5c
   18438:	ldr	r4, [sp, #100]	; 0x64
   1843c:	ldr	r8, [sp, #84]	; 0x54
   18440:	ldr	sl, [sp, #88]	; 0x58
   18444:	ldr	r2, [sp, #28]
   18448:	mov	r6, #0
   1844c:	b	180f0 <__assert_fail@plt+0x6a64>
   18450:	ldr	r2, [sp, #36]	; 0x24
   18454:	ldrb	r1, [r2, r3]
   18458:	sub	r2, r1, #33	; 0x21
   1845c:	cmp	r2, #29
   18460:	ldrls	pc, [pc, r2, lsl #2]
   18464:	b	18540 <__assert_fail@plt+0x6eb4>
   18468:	andeq	r8, r1, r0, ror #9
   1846c:	andeq	r8, r1, r0, asr #10
   18470:	andeq	r8, r1, r0, asr #10
   18474:	andeq	r8, r1, r0, asr #10
   18478:	andeq	r8, r1, r0, asr #10
   1847c:	andeq	r8, r1, r0, asr #10
   18480:	andeq	r8, r1, r0, ror #9
   18484:	andeq	r8, r1, r0, ror #9
   18488:	andeq	r8, r1, r0, ror #9
   1848c:	andeq	r8, r1, r0, asr #10
   18490:	andeq	r8, r1, r0, asr #10
   18494:	andeq	r8, r1, r0, asr #10
   18498:	andeq	r8, r1, r0, ror #9
   1849c:	andeq	r8, r1, r0, asr #10
   184a0:	andeq	r8, r1, r0, ror #9
   184a4:	andeq	r8, r1, r0, asr #10
   184a8:	andeq	r8, r1, r0, asr #10
   184ac:	andeq	r8, r1, r0, asr #10
   184b0:	andeq	r8, r1, r0, asr #10
   184b4:	andeq	r8, r1, r0, asr #10
   184b8:	andeq	r8, r1, r0, asr #10
   184bc:	andeq	r8, r1, r0, asr #10
   184c0:	andeq	r8, r1, r0, asr #10
   184c4:	andeq	r8, r1, r0, asr #10
   184c8:	andeq	r8, r1, r0, asr #10
   184cc:	andeq	r8, r1, r0, asr #10
   184d0:	andeq	r8, r1, r0, asr #10
   184d4:	andeq	r8, r1, r0, ror #9
   184d8:	andeq	r8, r1, r0, ror #9
   184dc:	andeq	r8, r1, r0, ror #9
   184e0:	ldr	r2, [sp, #32]
   184e4:	cmp	r2, #0
   184e8:	bne	185ec <__assert_fail@plt+0x6f60>
   184ec:	cmp	sl, r4
   184f0:	movhi	r2, #63	; 0x3f
   184f4:	strbhi	r2, [r8, r4]
   184f8:	add	r2, r4, #1
   184fc:	cmp	sl, r2
   18500:	movhi	r0, #34	; 0x22
   18504:	strbhi	r0, [r8, r2]
   18508:	add	r2, r4, #2
   1850c:	cmp	sl, r2
   18510:	movhi	r0, #34	; 0x22
   18514:	strbhi	r0, [r8, r2]
   18518:	add	r2, r4, #3
   1851c:	cmp	sl, r2
   18520:	movhi	r0, #63	; 0x3f
   18524:	strbhi	r0, [r8, r2]
   18528:	mov	r2, #0
   1852c:	add	r4, r4, #4
   18530:	mov	r5, r1
   18534:	mov	r9, r3
   18538:	mov	r6, r2
   1853c:	b	17938 <__assert_fail@plt+0x62ac>
   18540:	mov	r2, #0
   18544:	mov	r6, r2
   18548:	b	174a8 <__assert_fail@plt+0x5e1c>
   1854c:	ldr	r0, [sp, #24]
   18550:	mov	r1, r4
   18554:	cmp	r1, r0
   18558:	mov	r2, r7
   1855c:	mov	r3, r5
   18560:	mov	ip, r5
   18564:	ldr	r7, [sp, #96]	; 0x60
   18568:	ldr	r5, [sp, #92]	; 0x5c
   1856c:	ldr	r4, [sp, #100]	; 0x64
   18570:	ldr	r8, [sp, #84]	; 0x54
   18574:	ldr	sl, [sp, #88]	; 0x58
   18578:	bcs	185ac <__assert_fail@plt+0x6f20>
   1857c:	ldrb	r6, [r2]
   18580:	cmp	r6, #0
   18584:	bne	18598 <__assert_fail@plt+0x6f0c>
   18588:	b	186c8 <__assert_fail@plt+0x703c>
   1858c:	ldrb	r6, [r2, #1]!
   18590:	cmp	r6, #0
   18594:	beq	18650 <__assert_fail@plt+0x6fc4>
   18598:	add	r3, r3, #1
   1859c:	add	r1, r9, r3
   185a0:	cmp	r1, r0
   185a4:	bcc	1858c <__assert_fail@plt+0x6f00>
   185a8:	mov	ip, r3
   185ac:	ldr	r2, [sp, #28]
   185b0:	mov	r6, #0
   185b4:	b	180f0 <__assert_fail@plt+0x6a64>
   185b8:	mov	r3, #1
   185bc:	str	r3, [sp, #40]	; 0x28
   185c0:	str	r3, [sp, #32]
   185c4:	str	r3, [sp, #28]
   185c8:	str	r3, [sp, #52]	; 0x34
   185cc:	ldr	r3, [pc, #-2220]	; 17d28 <__assert_fail@plt+0x669c>
   185d0:	mov	r2, #0
   185d4:	str	r2, [sp, #68]	; 0x44
   185d8:	str	r2, [sp, #44]	; 0x2c
   185dc:	str	r2, [sp, #72]	; 0x48
   185e0:	mov	r4, r2
   185e4:	str	r3, [sp, #60]	; 0x3c
   185e8:	b	17010 <__assert_fail@plt+0x5984>
   185ec:	str	fp, [sp, #160]	; 0xa0
   185f0:	mov	fp, r8
   185f4:	ldr	r8, [sp, #160]	; 0xa0
   185f8:	b	177c0 <__assert_fail@plt+0x6134>
   185fc:	mov	r2, r3
   18600:	ldr	r3, [sp, #60]	; 0x3c
   18604:	cmp	r3, #0
   18608:	moveq	r2, #0
   1860c:	andne	r2, r2, #1
   18610:	cmp	r2, #0
   18614:	beq	18640 <__assert_fail@plt+0x6fb4>
   18618:	mov	r2, r3
   1861c:	ldrb	r3, [r3]
   18620:	cmp	r3, #0
   18624:	beq	18640 <__assert_fail@plt+0x6fb4>
   18628:	cmp	sl, r4
   1862c:	strbhi	r3, [fp, r4]
   18630:	ldrb	r3, [r2, #1]!
   18634:	add	r4, r4, #1
   18638:	cmp	r3, #0
   1863c:	bne	18628 <__assert_fail@plt+0x6f9c>
   18640:	cmp	sl, r4
   18644:	movhi	r3, #0
   18648:	strbhi	r3, [fp, r4]
   1864c:	b	17800 <__assert_fail@plt+0x6174>
   18650:	mov	ip, r3
   18654:	ldr	r2, [sp, #28]
   18658:	b	180f0 <__assert_fail@plt+0x6a64>
   1865c:	str	fp, [sp, #160]	; 0xa0
   18660:	mov	fp, r8
   18664:	ldr	r8, [sp, #160]	; 0xa0
   18668:	sub	r3, r8, #2
   1866c:	clz	r3, r3
   18670:	lsr	r3, r3, #5
   18674:	str	r3, [sp, #28]
   18678:	b	177b4 <__assert_fail@plt+0x6128>
   1867c:	ldr	r3, [sp, #76]	; 0x4c
   18680:	mov	ip, #5
   18684:	str	r3, [sp, #16]
   18688:	ldr	r3, [sp, #80]	; 0x50
   1868c:	ldr	r2, [sp, #36]	; 0x24
   18690:	str	r3, [sp, #12]
   18694:	ldr	r3, [sp, #56]	; 0x38
   18698:	ldr	r1, [sp, #72]	; 0x48
   1869c:	str	r3, [sp, #8]
   186a0:	ldr	r3, [sp, #164]	; 0xa4
   186a4:	mov	r0, fp
   186a8:	str	r3, [sp, #4]
   186ac:	str	ip, [sp]
   186b0:	ldr	r3, [sp, #24]
   186b4:	bl	16f18 <__assert_fail@plt+0x588c>
   186b8:	mov	r4, r0
   186bc:	b	17800 <__assert_fail@plt+0x6174>
   186c0:	mov	r8, #2
   186c4:	b	177b4 <__assert_fail@plt+0x6128>
   186c8:	ldr	r2, [sp, #28]
   186cc:	b	180f0 <__assert_fail@plt+0x6a64>
   186d0:	mov	r3, #0
   186d4:	str	r3, [sp, #68]	; 0x44
   186d8:	str	r3, [sp, #44]	; 0x2c
   186dc:	str	r3, [sp, #72]	; 0x48
   186e0:	str	r3, [sp, #28]
   186e4:	mov	r4, r3
   186e8:	ldr	r3, [pc, #-2500]	; 17d2c <__assert_fail@plt+0x66a0>
   186ec:	mov	r2, #1
   186f0:	str	r2, [sp, #40]	; 0x28
   186f4:	str	r2, [sp, #32]
   186f8:	str	r2, [sp, #52]	; 0x34
   186fc:	str	r3, [sp, #60]	; 0x3c
   18700:	b	17010 <__assert_fail@plt+0x5984>
   18704:	bl	11374 <__stack_chk_fail@plt>
   18708:	mov	r5, r3
   1870c:	mov	r6, #0
   18710:	b	17504 <__assert_fail@plt+0x5e78>
   18714:	mov	r3, #0
   18718:	mov	r2, #1
   1871c:	str	r3, [sp, #44]	; 0x2c
   18720:	str	r3, [sp, #72]	; 0x48
   18724:	str	r2, [sp, #40]	; 0x28
   18728:	b	17620 <__assert_fail@plt+0x5f94>
   1872c:	bl	11650 <abort@plt>
   18730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18734:	sub	sp, sp, #44	; 0x2c
   18738:	mov	r6, r0
   1873c:	mov	r4, r3
   18740:	mov	sl, r1
   18744:	mov	fp, r2
   18748:	bl	11500 <__errno_location@plt>
   1874c:	ldr	r7, [pc, #364]	; 188c0 <__assert_fail@plt+0x7234>
   18750:	cmp	r6, #0
   18754:	ldr	r5, [r7]
   18758:	ldr	r3, [r0]
   1875c:	str	r3, [sp, #24]
   18760:	blt	188bc <__assert_fail@plt+0x7230>
   18764:	ldr	r3, [r7, #4]
   18768:	mov	r8, r0
   1876c:	cmp	r3, r6
   18770:	bgt	187bc <__assert_fail@plt+0x7130>
   18774:	cmn	r6, #-268435454	; 0xf0000002
   18778:	bgt	188b8 <__assert_fail@plt+0x722c>
   1877c:	add	r9, r6, #1
   18780:	add	r3, r7, #8
   18784:	cmp	r5, r3
   18788:	lsl	r1, r9, #3
   1878c:	beq	18898 <__assert_fail@plt+0x720c>
   18790:	mov	r0, r5
   18794:	bl	195f8 <__assert_fail@plt+0x7f6c>
   18798:	mov	r5, r0
   1879c:	str	r0, [r7]
   187a0:	ldr	r0, [r7, #4]
   187a4:	mov	r1, #0
   187a8:	sub	r2, r9, r0
   187ac:	add	r0, r5, r0, lsl #3
   187b0:	lsl	r2, r2, #3
   187b4:	bl	11518 <memset@plt>
   187b8:	str	r9, [r7, #4]
   187bc:	add	r3, r5, r6, lsl #3
   187c0:	ldr	r1, [r4, #4]
   187c4:	ldr	r7, [r3, #4]
   187c8:	ldr	r9, [r5, r6, lsl #3]
   187cc:	ldr	r2, [r4, #40]	; 0x28
   187d0:	ldr	ip, [r4, #44]	; 0x2c
   187d4:	str	r3, [sp, #28]
   187d8:	ldr	r3, [r4]
   187dc:	orr	r1, r1, #1
   187e0:	add	lr, r4, #8
   187e4:	str	r1, [sp, #36]	; 0x24
   187e8:	str	r1, [sp, #4]
   187ec:	str	r2, [sp, #12]
   187f0:	str	r3, [sp]
   187f4:	mov	r0, r7
   187f8:	mov	r1, r9
   187fc:	str	ip, [sp, #16]
   18800:	str	lr, [sp, #8]
   18804:	mov	r3, fp
   18808:	mov	r2, sl
   1880c:	str	lr, [sp, #32]
   18810:	bl	16f18 <__assert_fail@plt+0x588c>
   18814:	cmp	r9, r0
   18818:	bhi	18884 <__assert_fail@plt+0x71f8>
   1881c:	ldr	r3, [pc, #160]	; 188c4 <__assert_fail@plt+0x7238>
   18820:	add	r9, r0, #1
   18824:	cmp	r7, r3
   18828:	str	r9, [r5, r6, lsl #3]
   1882c:	beq	18838 <__assert_fail@plt+0x71ac>
   18830:	mov	r0, r7
   18834:	bl	11308 <free@plt>
   18838:	mov	r0, r9
   1883c:	bl	1959c <__assert_fail@plt+0x7f10>
   18840:	ldr	lr, [sp, #28]
   18844:	ldr	ip, [r4, #44]	; 0x2c
   18848:	ldr	r5, [r4, #40]	; 0x28
   1884c:	mov	r3, fp
   18850:	mov	r2, sl
   18854:	mov	r1, r9
   18858:	str	r0, [lr, #4]
   1885c:	ldr	lr, [r4]
   18860:	ldr	r4, [sp, #32]
   18864:	str	ip, [sp, #16]
   18868:	str	r4, [sp, #8]
   1886c:	ldr	r4, [sp, #36]	; 0x24
   18870:	str	r5, [sp, #12]
   18874:	str	r4, [sp, #4]
   18878:	str	lr, [sp]
   1887c:	mov	r7, r0
   18880:	bl	16f18 <__assert_fail@plt+0x588c>
   18884:	ldr	r3, [sp, #24]
   18888:	mov	r0, r7
   1888c:	str	r3, [r8]
   18890:	add	sp, sp, #44	; 0x2c
   18894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18898:	mov	r0, #0
   1889c:	bl	195f8 <__assert_fail@plt+0x7f6c>
   188a0:	ldr	r3, [pc, #32]	; 188c8 <__assert_fail@plt+0x723c>
   188a4:	mov	r5, r0
   188a8:	ldm	r3, {r0, r1}
   188ac:	str	r5, [r7]
   188b0:	stm	r5, {r0, r1}
   188b4:	b	187a0 <__assert_fail@plt+0x7114>
   188b8:	bl	197e4 <__assert_fail@plt+0x8158>
   188bc:	bl	11650 <abort@plt>
   188c0:	andeq	sp, r2, r8, lsl r0
   188c4:	andeq	sp, r2, r8, asr r1
   188c8:	andeq	sp, r2, r0, lsr #32
   188cc:	push	{r4, r5, r6, lr}
   188d0:	mov	r5, r0
   188d4:	bl	11500 <__errno_location@plt>
   188d8:	cmp	r5, #0
   188dc:	mov	r1, #48	; 0x30
   188e0:	mov	r4, r0
   188e4:	ldr	r0, [pc, #16]	; 188fc <__assert_fail@plt+0x7270>
   188e8:	ldr	r6, [r4]
   188ec:	movne	r0, r5
   188f0:	bl	197a4 <__assert_fail@plt+0x8118>
   188f4:	str	r6, [r4]
   188f8:	pop	{r4, r5, r6, pc}
   188fc:	andeq	sp, r2, r8, asr r2
   18900:	ldr	r3, [pc, #12]	; 18914 <__assert_fail@plt+0x7288>
   18904:	cmp	r0, #0
   18908:	moveq	r0, r3
   1890c:	ldr	r0, [r0]
   18910:	bx	lr
   18914:	andeq	sp, r2, r8, asr r2
   18918:	ldr	r3, [pc, #12]	; 1892c <__assert_fail@plt+0x72a0>
   1891c:	cmp	r0, #0
   18920:	moveq	r0, r3
   18924:	str	r1, [r0]
   18928:	bx	lr
   1892c:	andeq	sp, r2, r8, asr r2
   18930:	ldr	r3, [pc, #52]	; 1896c <__assert_fail@plt+0x72e0>
   18934:	cmp	r0, #0
   18938:	moveq	r0, r3
   1893c:	add	r3, r0, #8
   18940:	push	{lr}		; (str lr, [sp, #-4]!)
   18944:	lsr	lr, r1, #5
   18948:	and	r1, r1, #31
   1894c:	ldr	ip, [r3, lr, lsl #2]
   18950:	lsr	r0, ip, r1
   18954:	eor	r2, r2, r0
   18958:	and	r2, r2, #1
   1895c:	and	r0, r0, #1
   18960:	eor	r1, ip, r2, lsl r1
   18964:	str	r1, [r3, lr, lsl #2]
   18968:	pop	{pc}		; (ldr pc, [sp], #4)
   1896c:	andeq	sp, r2, r8, asr r2
   18970:	ldr	r3, [pc, #16]	; 18988 <__assert_fail@plt+0x72fc>
   18974:	cmp	r0, #0
   18978:	movne	r3, r0
   1897c:	ldr	r0, [r3, #4]
   18980:	str	r1, [r3, #4]
   18984:	bx	lr
   18988:	andeq	sp, r2, r8, asr r2
   1898c:	ldr	r3, [pc, #44]	; 189c0 <__assert_fail@plt+0x7334>
   18990:	cmp	r0, #0
   18994:	moveq	r0, r3
   18998:	mov	ip, #10
   1899c:	cmp	r2, #0
   189a0:	cmpne	r1, #0
   189a4:	str	ip, [r0]
   189a8:	beq	189b8 <__assert_fail@plt+0x732c>
   189ac:	str	r1, [r0, #40]	; 0x28
   189b0:	str	r2, [r0, #44]	; 0x2c
   189b4:	bx	lr
   189b8:	push	{r4, lr}
   189bc:	bl	11650 <abort@plt>
   189c0:	andeq	sp, r2, r8, asr r2
   189c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   189c8:	sub	sp, sp, #24
   189cc:	ldr	ip, [pc, #108]	; 18a40 <__assert_fail@plt+0x73b4>
   189d0:	ldr	r4, [sp, #56]	; 0x38
   189d4:	mov	r9, r2
   189d8:	cmp	r4, #0
   189dc:	moveq	r4, ip
   189e0:	mov	sl, r3
   189e4:	mov	r7, r0
   189e8:	mov	r8, r1
   189ec:	bl	11500 <__errno_location@plt>
   189f0:	ldr	r3, [r4, #44]	; 0x2c
   189f4:	mov	r1, r8
   189f8:	ldr	r6, [r0]
   189fc:	str	r3, [sp, #16]
   18a00:	ldr	r2, [r4, #40]	; 0x28
   18a04:	add	r3, r4, #8
   18a08:	str	r3, [sp, #8]
   18a0c:	str	r2, [sp, #12]
   18a10:	ldr	r2, [r4, #4]
   18a14:	mov	r5, r0
   18a18:	str	r2, [sp, #4]
   18a1c:	ldr	ip, [r4]
   18a20:	mov	r3, sl
   18a24:	mov	r2, r9
   18a28:	mov	r0, r7
   18a2c:	str	ip, [sp]
   18a30:	bl	16f18 <__assert_fail@plt+0x588c>
   18a34:	str	r6, [r5]
   18a38:	add	sp, sp, #24
   18a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a40:	andeq	sp, r2, r8, asr r2
   18a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a48:	cmp	r3, #0
   18a4c:	sub	sp, sp, #44	; 0x2c
   18a50:	ldr	r4, [pc, #192]	; 18b18 <__assert_fail@plt+0x748c>
   18a54:	mov	r6, r2
   18a58:	movne	r4, r3
   18a5c:	mov	r9, r1
   18a60:	mov	r8, r0
   18a64:	bl	11500 <__errno_location@plt>
   18a68:	ldr	r3, [r4, #44]	; 0x2c
   18a6c:	ldr	r5, [r4, #4]
   18a70:	add	sl, r4, #8
   18a74:	cmp	r6, #0
   18a78:	orreq	r5, r5, #1
   18a7c:	mov	r1, #0
   18a80:	ldr	r2, [r0]
   18a84:	str	r3, [sp, #16]
   18a88:	ldr	r3, [r4, #40]	; 0x28
   18a8c:	stmib	sp, {r5, sl}
   18a90:	str	r3, [sp, #12]
   18a94:	ldr	r3, [r4]
   18a98:	mov	r7, r0
   18a9c:	str	r2, [sp, #28]
   18aa0:	str	r3, [sp]
   18aa4:	mov	r2, r8
   18aa8:	mov	r3, r9
   18aac:	mov	r0, r1
   18ab0:	bl	16f18 <__assert_fail@plt+0x588c>
   18ab4:	add	r1, r0, #1
   18ab8:	mov	fp, r0
   18abc:	mov	r0, r1
   18ac0:	str	r1, [sp, #36]	; 0x24
   18ac4:	bl	1959c <__assert_fail@plt+0x7f10>
   18ac8:	ldr	r3, [r4, #44]	; 0x2c
   18acc:	mov	r2, r8
   18ad0:	str	r3, [sp, #16]
   18ad4:	ldr	r3, [r4, #40]	; 0x28
   18ad8:	str	r5, [sp, #4]
   18adc:	str	r3, [sp, #12]
   18ae0:	str	sl, [sp, #8]
   18ae4:	ldr	ip, [r4]
   18ae8:	ldr	r1, [sp, #36]	; 0x24
   18aec:	mov	r3, r9
   18af0:	str	ip, [sp]
   18af4:	str	r0, [sp, #32]
   18af8:	bl	16f18 <__assert_fail@plt+0x588c>
   18afc:	ldr	r2, [sp, #28]
   18b00:	cmp	r6, #0
   18b04:	str	r2, [r7]
   18b08:	ldr	r0, [sp, #32]
   18b0c:	strne	fp, [r6]
   18b10:	add	sp, sp, #44	; 0x2c
   18b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b18:	andeq	sp, r2, r8, asr r2
   18b1c:	mov	r3, r2
   18b20:	mov	r2, #0
   18b24:	b	18a44 <__assert_fail@plt+0x73b8>
   18b28:	push	{r4, r5, r6, r7, r8, lr}
   18b2c:	ldr	r6, [pc, #112]	; 18ba4 <__assert_fail@plt+0x7518>
   18b30:	ldr	r3, [r6, #4]
   18b34:	ldr	r7, [r6]
   18b38:	cmp	r3, #1
   18b3c:	ble	18b60 <__assert_fail@plt+0x74d4>
   18b40:	sub	r5, r7, #8
   18b44:	add	r5, r5, r3, lsl #3
   18b48:	mov	r4, r7
   18b4c:	ldr	r0, [r4, #12]
   18b50:	add	r4, r4, #8
   18b54:	bl	11308 <free@plt>
   18b58:	cmp	r4, r5
   18b5c:	bne	18b4c <__assert_fail@plt+0x74c0>
   18b60:	ldr	r0, [r7, #4]
   18b64:	ldr	r4, [pc, #60]	; 18ba8 <__assert_fail@plt+0x751c>
   18b68:	cmp	r0, r4
   18b6c:	beq	18b80 <__assert_fail@plt+0x74f4>
   18b70:	bl	11308 <free@plt>
   18b74:	mov	r3, #256	; 0x100
   18b78:	str	r4, [r6, #12]
   18b7c:	str	r3, [r6, #8]
   18b80:	ldr	r4, [pc, #36]	; 18bac <__assert_fail@plt+0x7520>
   18b84:	cmp	r7, r4
   18b88:	beq	18b98 <__assert_fail@plt+0x750c>
   18b8c:	mov	r0, r7
   18b90:	bl	11308 <free@plt>
   18b94:	str	r4, [r6]
   18b98:	mov	r3, #1
   18b9c:	str	r3, [r6, #4]
   18ba0:	pop	{r4, r5, r6, r7, r8, pc}
   18ba4:	andeq	sp, r2, r8, lsl r0
   18ba8:	andeq	sp, r2, r8, asr r1
   18bac:	andeq	sp, r2, r0, lsr #32
   18bb0:	ldr	r3, [pc, #4]	; 18bbc <__assert_fail@plt+0x7530>
   18bb4:	mvn	r2, #0
   18bb8:	b	18730 <__assert_fail@plt+0x70a4>
   18bbc:	andeq	sp, r2, r8, asr r2
   18bc0:	ldr	r3, [pc]	; 18bc8 <__assert_fail@plt+0x753c>
   18bc4:	b	18730 <__assert_fail@plt+0x70a4>
   18bc8:	andeq	sp, r2, r8, asr r2
   18bcc:	mov	r1, r0
   18bd0:	ldr	r3, [pc, #8]	; 18be0 <__assert_fail@plt+0x7554>
   18bd4:	mvn	r2, #0
   18bd8:	mov	r0, #0
   18bdc:	b	18730 <__assert_fail@plt+0x70a4>
   18be0:	andeq	sp, r2, r8, asr r2
   18be4:	mov	r2, r1
   18be8:	ldr	r3, [pc, #8]	; 18bf8 <__assert_fail@plt+0x756c>
   18bec:	mov	r1, r0
   18bf0:	mov	r0, #0
   18bf4:	b	18730 <__assert_fail@plt+0x70a4>
   18bf8:	andeq	sp, r2, r8, asr r2
   18bfc:	push	{r4, r5, r6, lr}
   18c00:	sub	sp, sp, #56	; 0x38
   18c04:	ldr	r4, [pc, #68]	; 18c50 <__assert_fail@plt+0x75c4>
   18c08:	mov	r6, r2
   18c0c:	mov	r5, r0
   18c10:	ldr	r3, [r4]
   18c14:	add	r0, sp, #4
   18c18:	str	r3, [sp, #52]	; 0x34
   18c1c:	bl	16da8 <__assert_fail@plt+0x571c>
   18c20:	add	r3, sp, #4
   18c24:	mvn	r2, #0
   18c28:	mov	r1, r6
   18c2c:	mov	r0, r5
   18c30:	bl	18730 <__assert_fail@plt+0x70a4>
   18c34:	ldr	r2, [sp, #52]	; 0x34
   18c38:	ldr	r3, [r4]
   18c3c:	cmp	r2, r3
   18c40:	bne	18c4c <__assert_fail@plt+0x75c0>
   18c44:	add	sp, sp, #56	; 0x38
   18c48:	pop	{r4, r5, r6, pc}
   18c4c:	bl	11374 <__stack_chk_fail@plt>
   18c50:	muleq	r2, r8, sp
   18c54:	push	{r4, r5, r6, r7, lr}
   18c58:	sub	sp, sp, #60	; 0x3c
   18c5c:	ldr	r4, [pc, #72]	; 18cac <__assert_fail@plt+0x7620>
   18c60:	mov	r6, r2
   18c64:	mov	r7, r3
   18c68:	ldr	ip, [r4]
   18c6c:	mov	r5, r0
   18c70:	add	r0, sp, #4
   18c74:	str	ip, [sp, #52]	; 0x34
   18c78:	bl	16da8 <__assert_fail@plt+0x571c>
   18c7c:	add	r3, sp, #4
   18c80:	mov	r2, r7
   18c84:	mov	r1, r6
   18c88:	mov	r0, r5
   18c8c:	bl	18730 <__assert_fail@plt+0x70a4>
   18c90:	ldr	r2, [sp, #52]	; 0x34
   18c94:	ldr	r3, [r4]
   18c98:	cmp	r2, r3
   18c9c:	bne	18ca8 <__assert_fail@plt+0x761c>
   18ca0:	add	sp, sp, #60	; 0x3c
   18ca4:	pop	{r4, r5, r6, r7, pc}
   18ca8:	bl	11374 <__stack_chk_fail@plt>
   18cac:	muleq	r2, r8, sp
   18cb0:	mov	r2, r1
   18cb4:	mov	r1, r0
   18cb8:	mov	r0, #0
   18cbc:	b	18bfc <__assert_fail@plt+0x7570>
   18cc0:	mov	r3, r2
   18cc4:	mov	r2, r1
   18cc8:	mov	r1, r0
   18ccc:	mov	r0, #0
   18cd0:	b	18c54 <__assert_fail@plt+0x75c8>
   18cd4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18cd8:	mov	r4, r2
   18cdc:	ldr	lr, [pc, #128]	; 18d64 <__assert_fail@plt+0x76d8>
   18ce0:	mov	r8, r0
   18ce4:	mov	r9, r1
   18ce8:	ldm	lr!, {r0, r1, r2, r3}
   18cec:	sub	sp, sp, #60	; 0x3c
   18cf0:	add	ip, sp, #4
   18cf4:	lsr	r6, r4, #5
   18cf8:	stmia	ip!, {r0, r1, r2, r3}
   18cfc:	add	r7, sp, #12
   18d00:	ldm	lr!, {r0, r1, r2, r3}
   18d04:	and	r4, r4, #31
   18d08:	ldr	r5, [pc, #88]	; 18d68 <__assert_fail@plt+0x76dc>
   18d0c:	stmia	ip!, {r0, r1, r2, r3}
   18d10:	ldm	lr, {r0, r1, r2, r3}
   18d14:	stm	ip, {r0, r1, r2, r3}
   18d18:	mov	r2, r9
   18d1c:	ldr	r3, [r7, r6, lsl #2]
   18d20:	ldr	ip, [r5]
   18d24:	mov	r1, r8
   18d28:	mvn	r0, r3, lsr r4
   18d2c:	and	r0, r0, #1
   18d30:	str	ip, [sp, #52]	; 0x34
   18d34:	eor	r4, r3, r0, lsl r4
   18d38:	add	r3, sp, #4
   18d3c:	mov	r0, #0
   18d40:	str	r4, [r7, r6, lsl #2]
   18d44:	bl	18730 <__assert_fail@plt+0x70a4>
   18d48:	ldr	r2, [sp, #52]	; 0x34
   18d4c:	ldr	r3, [r5]
   18d50:	cmp	r2, r3
   18d54:	bne	18d60 <__assert_fail@plt+0x76d4>
   18d58:	add	sp, sp, #60	; 0x3c
   18d5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18d60:	bl	11374 <__stack_chk_fail@plt>
   18d64:	andeq	sp, r2, r8, asr r2
   18d68:	muleq	r2, r8, sp
   18d6c:	mov	r2, r1
   18d70:	mvn	r1, #0
   18d74:	b	18cd4 <__assert_fail@plt+0x7648>
   18d78:	mov	r2, #58	; 0x3a
   18d7c:	mvn	r1, #0
   18d80:	b	18cd4 <__assert_fail@plt+0x7648>
   18d84:	mov	r2, #58	; 0x3a
   18d88:	b	18cd4 <__assert_fail@plt+0x7648>
   18d8c:	push	{r4, r5, r6, r7, r8, lr}
   18d90:	sub	sp, sp, #104	; 0x68
   18d94:	ldr	r5, [pc, #120]	; 18e14 <__assert_fail@plt+0x7788>
   18d98:	mov	r6, r0
   18d9c:	mov	r0, sp
   18da0:	ldr	r3, [r5]
   18da4:	mov	r7, r2
   18da8:	str	r3, [sp, #100]	; 0x64
   18dac:	bl	16da8 <__assert_fail@plt+0x571c>
   18db0:	mov	ip, sp
   18db4:	add	lr, sp, #52	; 0x34
   18db8:	ldm	ip!, {r0, r1, r2, r3}
   18dbc:	stmia	lr!, {r0, r1, r2, r3}
   18dc0:	ldm	ip!, {r0, r1, r2, r3}
   18dc4:	ldr	r8, [sp, #64]	; 0x40
   18dc8:	stmia	lr!, {r0, r1, r2, r3}
   18dcc:	mvn	r4, r8
   18dd0:	ldm	ip, {r0, r1, r2, r3}
   18dd4:	and	ip, r4, #67108864	; 0x4000000
   18dd8:	eor	ip, ip, r8
   18ddc:	str	ip, [sp, #64]	; 0x40
   18de0:	stm	lr, {r0, r1, r2, r3}
   18de4:	add	r3, sp, #52	; 0x34
   18de8:	mvn	r2, #0
   18dec:	mov	r1, r7
   18df0:	mov	r0, r6
   18df4:	bl	18730 <__assert_fail@plt+0x70a4>
   18df8:	ldr	r2, [sp, #100]	; 0x64
   18dfc:	ldr	r3, [r5]
   18e00:	cmp	r2, r3
   18e04:	bne	18e10 <__assert_fail@plt+0x7784>
   18e08:	add	sp, sp, #104	; 0x68
   18e0c:	pop	{r4, r5, r6, r7, r8, pc}
   18e10:	bl	11374 <__stack_chk_fail@plt>
   18e14:	muleq	r2, r8, sp
   18e18:	push	{r4, r5, r6, r7, r8, r9, lr}
   18e1c:	mov	r6, r1
   18e20:	ldr	lr, [pc, #132]	; 18eac <__assert_fail@plt+0x7820>
   18e24:	mov	r5, r2
   18e28:	mov	r8, r0
   18e2c:	mov	r9, r3
   18e30:	ldm	lr!, {r0, r1, r2, r3}
   18e34:	sub	sp, sp, #60	; 0x3c
   18e38:	add	ip, sp, #4
   18e3c:	ldr	r4, [pc, #108]	; 18eb0 <__assert_fail@plt+0x7824>
   18e40:	stmia	ip!, {r0, r1, r2, r3}
   18e44:	mov	r7, #10
   18e48:	ldm	lr!, {r0, r1, r2, r3}
   18e4c:	cmp	r5, #0
   18e50:	cmpne	r6, #0
   18e54:	str	r7, [sp, #4]
   18e58:	stmia	ip!, {r0, r1, r2, r3}
   18e5c:	ldm	lr, {r0, r1, r2, r3}
   18e60:	ldr	lr, [r4]
   18e64:	stm	ip, {r0, r1, r2, r3}
   18e68:	str	lr, [sp, #52]	; 0x34
   18e6c:	beq	18ea8 <__assert_fail@plt+0x781c>
   18e70:	add	r3, sp, #4
   18e74:	ldr	r2, [sp, #88]	; 0x58
   18e78:	mov	r1, r9
   18e7c:	mov	r0, r8
   18e80:	str	r6, [sp, #44]	; 0x2c
   18e84:	str	r5, [sp, #48]	; 0x30
   18e88:	bl	18730 <__assert_fail@plt+0x70a4>
   18e8c:	ldr	r2, [sp, #52]	; 0x34
   18e90:	ldr	r3, [r4]
   18e94:	cmp	r2, r3
   18e98:	bne	18ea4 <__assert_fail@plt+0x7818>
   18e9c:	add	sp, sp, #60	; 0x3c
   18ea0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18ea4:	bl	11374 <__stack_chk_fail@plt>
   18ea8:	bl	11650 <abort@plt>
   18eac:	andeq	sp, r2, r8, asr r2
   18eb0:	muleq	r2, r8, sp
   18eb4:	push	{lr}		; (str lr, [sp, #-4]!)
   18eb8:	sub	sp, sp, #12
   18ebc:	mvn	ip, #0
   18ec0:	str	ip, [sp]
   18ec4:	bl	18e18 <__assert_fail@plt+0x778c>
   18ec8:	add	sp, sp, #12
   18ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   18ed0:	push	{lr}		; (str lr, [sp, #-4]!)
   18ed4:	sub	sp, sp, #12
   18ed8:	mvn	ip, #0
   18edc:	mov	r3, r2
   18ee0:	str	ip, [sp]
   18ee4:	mov	r2, r1
   18ee8:	mov	r1, r0
   18eec:	mov	r0, #0
   18ef0:	bl	18e18 <__assert_fail@plt+0x778c>
   18ef4:	add	sp, sp, #12
   18ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   18efc:	push	{lr}		; (str lr, [sp, #-4]!)
   18f00:	sub	sp, sp, #12
   18f04:	str	r3, [sp]
   18f08:	mov	r3, r2
   18f0c:	mov	r2, r1
   18f10:	mov	r1, r0
   18f14:	mov	r0, #0
   18f18:	bl	18e18 <__assert_fail@plt+0x778c>
   18f1c:	add	sp, sp, #12
   18f20:	pop	{pc}		; (ldr pc, [sp], #4)
   18f24:	ldr	r3, [pc]	; 18f2c <__assert_fail@plt+0x78a0>
   18f28:	b	18730 <__assert_fail@plt+0x70a4>
   18f2c:	andeq	sp, r2, r8, lsr #32
   18f30:	mov	r2, r1
   18f34:	ldr	r3, [pc, #8]	; 18f44 <__assert_fail@plt+0x78b8>
   18f38:	mov	r1, r0
   18f3c:	mov	r0, #0
   18f40:	b	18730 <__assert_fail@plt+0x70a4>
   18f44:	andeq	sp, r2, r8, lsr #32
   18f48:	ldr	r3, [pc, #4]	; 18f54 <__assert_fail@plt+0x78c8>
   18f4c:	mvn	r2, #0
   18f50:	b	18730 <__assert_fail@plt+0x70a4>
   18f54:	andeq	sp, r2, r8, lsr #32
   18f58:	mov	r1, r0
   18f5c:	ldr	r3, [pc, #8]	; 18f6c <__assert_fail@plt+0x78e0>
   18f60:	mvn	r2, #0
   18f64:	mov	r0, #0
   18f68:	b	18730 <__assert_fail@plt+0x70a4>
   18f6c:	andeq	sp, r2, r8, lsr #32
   18f70:	push	{r4, r5, r6, r7, r8, lr}
   18f74:	mov	r8, r0
   18f78:	ldr	r5, [pc, #84]	; 18fd4 <__assert_fail@plt+0x7948>
   18f7c:	mov	r7, r1
   18f80:	mov	r4, r2
   18f84:	mov	r2, r4
   18f88:	mov	r1, r7
   18f8c:	mov	r0, r8
   18f90:	bl	112e4 <read@plt>
   18f94:	subs	r6, r0, #0
   18f98:	bge	18fcc <__assert_fail@plt+0x7940>
   18f9c:	bl	11500 <__errno_location@plt>
   18fa0:	ldr	r3, [r0]
   18fa4:	cmp	r3, #4
   18fa8:	beq	18f84 <__assert_fail@plt+0x78f8>
   18fac:	cmp	r4, r5
   18fb0:	movls	r2, #0
   18fb4:	movhi	r2, #1
   18fb8:	cmp	r3, #22
   18fbc:	movne	r2, #0
   18fc0:	cmp	r2, #0
   18fc4:	mov	r4, r5
   18fc8:	bne	18f84 <__assert_fail@plt+0x78f8>
   18fcc:	mov	r0, r6
   18fd0:	pop	{r4, r5, r6, r7, r8, pc}
   18fd4:	svcvc	0x00f00000	; IMB
   18fd8:	push	{r4, r5, r6, lr}
   18fdc:	mov	r2, r1
   18fe0:	mov	r4, r1
   18fe4:	mov	r1, #0
   18fe8:	mov	r5, r0
   18fec:	bl	11560 <memchr@plt>
   18ff0:	cmp	r0, #0
   18ff4:	subne	r0, r0, r5
   18ff8:	addne	r0, r0, #1
   18ffc:	moveq	r0, r4
   19000:	pop	{r4, r5, r6, pc}
   19004:	cmp	r0, #2
   19008:	push	{r4, r5, r6, r7, r8, lr}
   1900c:	mov	r4, r0
   19010:	bls	1901c <__assert_fail@plt+0x7990>
   19014:	mov	r0, r4
   19018:	pop	{r4, r5, r6, r7, r8, pc}
   1901c:	bl	1a628 <__assert_fail@plt+0x8f9c>
   19020:	mov	r7, r0
   19024:	bl	11500 <__errno_location@plt>
   19028:	mov	r5, r0
   1902c:	mov	r0, r4
   19030:	ldr	r6, [r5]
   19034:	mov	r4, r7
   19038:	bl	11668 <close@plt>
   1903c:	str	r6, [r5]
   19040:	mov	r0, r4
   19044:	pop	{r4, r5, r6, r7, r8, pc}
   19048:	push	{r4, r5, r6, lr}
   1904c:	sub	sp, sp, #32
   19050:	cmp	r1, #0
   19054:	mov	r5, r0
   19058:	ldr	r4, [sp, #48]	; 0x30
   1905c:	ldr	r6, [sp, #52]	; 0x34
   19060:	beq	1915c <__assert_fail@plt+0x7ad0>
   19064:	strd	r2, [sp]
   19068:	mov	r3, r1
   1906c:	ldr	r2, [pc, #824]	; 193ac <__assert_fail@plt+0x7d20>
   19070:	mov	r1, #1
   19074:	bl	11554 <__fprintf_chk@plt>
   19078:	mov	r2, #5
   1907c:	ldr	r1, [pc, #812]	; 193b0 <__assert_fail@plt+0x7d24>
   19080:	mov	r0, #0
   19084:	bl	11368 <dcgettext@plt>
   19088:	ldr	r3, [pc, #804]	; 193b4 <__assert_fail@plt+0x7d28>
   1908c:	ldr	r2, [pc, #804]	; 193b8 <__assert_fail@plt+0x7d2c>
   19090:	str	r3, [sp]
   19094:	mov	r1, #1
   19098:	mov	r3, r0
   1909c:	mov	r0, r5
   190a0:	bl	11554 <__fprintf_chk@plt>
   190a4:	ldr	r1, [pc, #784]	; 193bc <__assert_fail@plt+0x7d30>
   190a8:	mov	r2, #5
   190ac:	mov	r0, #0
   190b0:	bl	11368 <dcgettext@plt>
   190b4:	mov	r1, r5
   190b8:	bl	11638 <fputs@plt>
   190bc:	cmp	r6, #9
   190c0:	ldrls	pc, [pc, r6, lsl #2]
   190c4:	b	193a0 <__assert_fail@plt+0x7d14>
   190c8:	andeq	r9, r1, r4, asr r1
   190cc:	andeq	r9, r1, r4, ror r1
   190d0:	andeq	r9, r1, r0, lsr #3
   190d4:	ldrdeq	r9, [r1], -r4
   190d8:	andeq	r9, r1, r0, lsl r2
   190dc:	andeq	r9, r1, r0, asr r2
   190e0:	muleq	r1, r8, r2
   190e4:	andeq	r9, r1, r8, ror #5
   190e8:	andeq	r9, r1, r0, asr #6
   190ec:	strdeq	r9, [r1], -r0
   190f0:	ldr	r1, [pc, #712]	; 193c0 <__assert_fail@plt+0x7d34>
   190f4:	mov	r2, #5
   190f8:	mov	r0, #0
   190fc:	bl	11368 <dcgettext@plt>
   19100:	ldr	r2, [r4, #32]
   19104:	ldr	r3, [r4, #28]
   19108:	ldr	r1, [r4, #24]
   1910c:	str	r2, [sp, #28]
   19110:	ldr	r2, [r4, #20]
   19114:	str	r3, [sp, #24]
   19118:	ldr	r3, [r4, #16]
   1911c:	str	r1, [sp, #20]
   19120:	ldr	r1, [r4, #12]
   19124:	str	r2, [sp, #16]
   19128:	ldr	r2, [r4, #8]
   1912c:	str	r3, [sp, #12]
   19130:	ldr	r3, [r4, #4]
   19134:	str	r1, [sp, #8]
   19138:	str	r2, [sp, #4]
   1913c:	str	r3, [sp]
   19140:	mov	r1, #1
   19144:	ldr	r3, [r4]
   19148:	mov	r2, r0
   1914c:	mov	r0, r5
   19150:	bl	11554 <__fprintf_chk@plt>
   19154:	add	sp, sp, #32
   19158:	pop	{r4, r5, r6, pc}
   1915c:	str	r3, [sp]
   19160:	mov	r1, #1
   19164:	mov	r3, r2
   19168:	ldr	r2, [pc, #596]	; 193c4 <__assert_fail@plt+0x7d38>
   1916c:	bl	11554 <__fprintf_chk@plt>
   19170:	b	19078 <__assert_fail@plt+0x79ec>
   19174:	mov	r2, #5
   19178:	ldr	r1, [pc, #584]	; 193c8 <__assert_fail@plt+0x7d3c>
   1917c:	mov	r0, #0
   19180:	bl	11368 <dcgettext@plt>
   19184:	ldr	r3, [r4]
   19188:	mov	r1, #1
   1918c:	mov	r2, r0
   19190:	mov	r0, r5
   19194:	add	sp, sp, #32
   19198:	pop	{r4, r5, r6, lr}
   1919c:	b	11554 <__fprintf_chk@plt>
   191a0:	mov	r2, #5
   191a4:	ldr	r1, [pc, #544]	; 193cc <__assert_fail@plt+0x7d40>
   191a8:	mov	r0, #0
   191ac:	bl	11368 <dcgettext@plt>
   191b0:	ldr	r2, [r4, #4]
   191b4:	ldr	r3, [r4]
   191b8:	mov	r1, #1
   191bc:	str	r2, [sp, #48]	; 0x30
   191c0:	mov	r2, r0
   191c4:	mov	r0, r5
   191c8:	add	sp, sp, #32
   191cc:	pop	{r4, r5, r6, lr}
   191d0:	b	11554 <__fprintf_chk@plt>
   191d4:	mov	r2, #5
   191d8:	ldr	r1, [pc, #496]	; 193d0 <__assert_fail@plt+0x7d44>
   191dc:	mov	r0, #0
   191e0:	bl	11368 <dcgettext@plt>
   191e4:	ldr	r2, [r4, #8]
   191e8:	ldr	r3, [r4, #4]
   191ec:	mov	r1, #1
   191f0:	str	r2, [sp, #52]	; 0x34
   191f4:	str	r3, [sp, #48]	; 0x30
   191f8:	ldr	r3, [r4]
   191fc:	mov	r2, r0
   19200:	mov	r0, r5
   19204:	add	sp, sp, #32
   19208:	pop	{r4, r5, r6, lr}
   1920c:	b	11554 <__fprintf_chk@plt>
   19210:	mov	r2, #5
   19214:	ldr	r1, [pc, #440]	; 193d4 <__assert_fail@plt+0x7d48>
   19218:	mov	r0, #0
   1921c:	bl	11368 <dcgettext@plt>
   19220:	ldr	r1, [r4, #12]
   19224:	ldr	r2, [r4, #8]
   19228:	ldr	r3, [r4, #4]
   1922c:	str	r1, [sp, #8]
   19230:	str	r2, [sp, #4]
   19234:	str	r3, [sp]
   19238:	mov	r1, #1
   1923c:	ldr	r3, [r4]
   19240:	mov	r2, r0
   19244:	mov	r0, r5
   19248:	bl	11554 <__fprintf_chk@plt>
   1924c:	b	19154 <__assert_fail@plt+0x7ac8>
   19250:	mov	r2, #5
   19254:	ldr	r1, [pc, #380]	; 193d8 <__assert_fail@plt+0x7d4c>
   19258:	mov	r0, #0
   1925c:	bl	11368 <dcgettext@plt>
   19260:	ldr	r3, [r4, #16]
   19264:	ldr	r1, [r4, #12]
   19268:	ldr	r2, [r4, #8]
   1926c:	str	r3, [sp, #12]
   19270:	ldr	r3, [r4, #4]
   19274:	str	r1, [sp, #8]
   19278:	str	r2, [sp, #4]
   1927c:	str	r3, [sp]
   19280:	mov	r1, #1
   19284:	ldr	r3, [r4]
   19288:	mov	r2, r0
   1928c:	mov	r0, r5
   19290:	bl	11554 <__fprintf_chk@plt>
   19294:	b	19154 <__assert_fail@plt+0x7ac8>
   19298:	mov	r2, #5
   1929c:	ldr	r1, [pc, #312]	; 193dc <__assert_fail@plt+0x7d50>
   192a0:	mov	r0, #0
   192a4:	bl	11368 <dcgettext@plt>
   192a8:	ldr	r2, [r4, #20]
   192ac:	ldr	r3, [r4, #16]
   192b0:	ldr	r1, [r4, #12]
   192b4:	str	r2, [sp, #16]
   192b8:	ldr	r2, [r4, #8]
   192bc:	str	r3, [sp, #12]
   192c0:	ldr	r3, [r4, #4]
   192c4:	str	r1, [sp, #8]
   192c8:	str	r2, [sp, #4]
   192cc:	str	r3, [sp]
   192d0:	mov	r1, #1
   192d4:	ldr	r3, [r4]
   192d8:	mov	r2, r0
   192dc:	mov	r0, r5
   192e0:	bl	11554 <__fprintf_chk@plt>
   192e4:	b	19154 <__assert_fail@plt+0x7ac8>
   192e8:	mov	r2, #5
   192ec:	ldr	r1, [pc, #236]	; 193e0 <__assert_fail@plt+0x7d54>
   192f0:	mov	r0, #0
   192f4:	bl	11368 <dcgettext@plt>
   192f8:	ldr	r1, [r4, #24]
   192fc:	ldr	r2, [r4, #20]
   19300:	ldr	r3, [r4, #16]
   19304:	str	r1, [sp, #20]
   19308:	ldr	r1, [r4, #12]
   1930c:	str	r2, [sp, #16]
   19310:	ldr	r2, [r4, #8]
   19314:	str	r3, [sp, #12]
   19318:	ldr	r3, [r4, #4]
   1931c:	str	r1, [sp, #8]
   19320:	str	r2, [sp, #4]
   19324:	str	r3, [sp]
   19328:	mov	r1, #1
   1932c:	ldr	r3, [r4]
   19330:	mov	r2, r0
   19334:	mov	r0, r5
   19338:	bl	11554 <__fprintf_chk@plt>
   1933c:	b	19154 <__assert_fail@plt+0x7ac8>
   19340:	mov	r2, #5
   19344:	ldr	r1, [pc, #152]	; 193e4 <__assert_fail@plt+0x7d58>
   19348:	mov	r0, #0
   1934c:	bl	11368 <dcgettext@plt>
   19350:	ldr	r3, [r4, #28]
   19354:	ldr	r1, [r4, #24]
   19358:	ldr	r2, [r4, #20]
   1935c:	str	r3, [sp, #24]
   19360:	ldr	r3, [r4, #16]
   19364:	str	r1, [sp, #20]
   19368:	ldr	r1, [r4, #12]
   1936c:	str	r2, [sp, #16]
   19370:	ldr	r2, [r4, #8]
   19374:	str	r3, [sp, #12]
   19378:	ldr	r3, [r4, #4]
   1937c:	str	r1, [sp, #8]
   19380:	str	r2, [sp, #4]
   19384:	str	r3, [sp]
   19388:	mov	r1, #1
   1938c:	ldr	r3, [r4]
   19390:	mov	r2, r0
   19394:	mov	r0, r5
   19398:	bl	11554 <__fprintf_chk@plt>
   1939c:	b	19154 <__assert_fail@plt+0x7ac8>
   193a0:	mov	r2, #5
   193a4:	ldr	r1, [pc, #60]	; 193e8 <__assert_fail@plt+0x7d5c>
   193a8:	b	190f8 <__assert_fail@plt+0x7a6c>
   193ac:			; <UNDEFINED> instruction: 0x0001c7bc
   193b0:	ldrdeq	ip, [r1], -r0
   193b4:	andeq	r0, r0, r3, ror #15
   193b8:	andeq	ip, r1, ip, lsl #21
   193bc:	ldrdeq	ip, [r1], -r4
   193c0:	andeq	ip, r1, ip, lsr #19
   193c4:	andeq	ip, r1, r8, asr #15
   193c8:	andeq	ip, r1, r0, lsr #17
   193cc:			; <UNDEFINED> instruction: 0x0001c8b0
   193d0:	andeq	ip, r1, r8, asr #17
   193d4:	andeq	ip, r1, r4, ror #17
   193d8:	andeq	ip, r1, r4, lsl #18
   193dc:	andeq	ip, r1, r8, lsr #18
   193e0:	andeq	ip, r1, r0, asr r9
   193e4:	andeq	ip, r1, ip, ror r9
   193e8:	andeq	ip, r1, r0, ror #19
   193ec:	push	{r4, r5, lr}
   193f0:	sub	sp, sp, #12
   193f4:	ldr	r5, [sp, #24]
   193f8:	ldr	ip, [r5]
   193fc:	cmp	ip, #0
   19400:	beq	1941c <__assert_fail@plt+0x7d90>
   19404:	mov	lr, r5
   19408:	mov	ip, #0
   1940c:	ldr	r4, [lr, #4]!
   19410:	add	ip, ip, #1
   19414:	cmp	r4, #0
   19418:	bne	1940c <__assert_fail@plt+0x7d80>
   1941c:	stm	sp, {r5, ip}
   19420:	bl	19048 <__assert_fail@plt+0x79bc>
   19424:	add	sp, sp, #12
   19428:	pop	{r4, r5, pc}
   1942c:	push	{r4, r5, r6, lr}
   19430:	sub	sp, sp, #56	; 0x38
   19434:	ldr	r6, [pc, #88]	; 19494 <__assert_fail@plt+0x7e08>
   19438:	ldr	r5, [sp, #72]	; 0x48
   1943c:	add	r4, sp, #8
   19440:	ldr	ip, [r6]
   19444:	str	ip, [sp, #52]	; 0x34
   19448:	mov	ip, #0
   1944c:	ldr	lr, [r5], #4
   19450:	cmp	lr, #0
   19454:	str	lr, [r4, #4]!
   19458:	beq	19468 <__assert_fail@plt+0x7ddc>
   1945c:	add	ip, ip, #1
   19460:	cmp	ip, #10
   19464:	bne	1944c <__assert_fail@plt+0x7dc0>
   19468:	add	lr, sp, #12
   1946c:	str	ip, [sp, #4]
   19470:	str	lr, [sp]
   19474:	bl	19048 <__assert_fail@plt+0x79bc>
   19478:	ldr	r2, [sp, #52]	; 0x34
   1947c:	ldr	r3, [r6]
   19480:	cmp	r2, r3
   19484:	bne	19490 <__assert_fail@plt+0x7e04>
   19488:	add	sp, sp, #56	; 0x38
   1948c:	pop	{r4, r5, r6, pc}
   19490:	bl	11374 <__stack_chk_fail@plt>
   19494:	muleq	r2, r8, sp
   19498:	push	{r3}		; (str r3, [sp, #-4]!)
   1949c:	mov	ip, #0
   194a0:	push	{r4, r5, r6, lr}
   194a4:	sub	sp, sp, #60	; 0x3c
   194a8:	ldr	r6, [pc, #100]	; 19514 <__assert_fail@plt+0x7e88>
   194ac:	add	r5, sp, #8
   194b0:	add	r4, sp, #80	; 0x50
   194b4:	ldr	r3, [r6]
   194b8:	str	r4, [sp, #8]
   194bc:	str	r3, [sp, #52]	; 0x34
   194c0:	ldr	r3, [sp, #76]	; 0x4c
   194c4:	ldr	lr, [r4], #4
   194c8:	cmp	lr, #0
   194cc:	str	lr, [r5, #4]!
   194d0:	beq	194e0 <__assert_fail@plt+0x7e54>
   194d4:	add	ip, ip, #1
   194d8:	cmp	ip, #10
   194dc:	bne	194c4 <__assert_fail@plt+0x7e38>
   194e0:	add	lr, sp, #12
   194e4:	str	ip, [sp, #4]
   194e8:	str	lr, [sp]
   194ec:	bl	19048 <__assert_fail@plt+0x79bc>
   194f0:	ldr	r2, [sp, #52]	; 0x34
   194f4:	ldr	r3, [r6]
   194f8:	cmp	r2, r3
   194fc:	bne	19510 <__assert_fail@plt+0x7e84>
   19500:	add	sp, sp, #60	; 0x3c
   19504:	pop	{r4, r5, r6, lr}
   19508:	add	sp, sp, #4
   1950c:	bx	lr
   19510:	bl	11374 <__stack_chk_fail@plt>
   19514:	muleq	r2, r8, sp
   19518:	push	{r4, lr}
   1951c:	mov	r2, #5
   19520:	ldr	r1, [pc, #88]	; 19580 <__assert_fail@plt+0x7ef4>
   19524:	mov	r0, #0
   19528:	bl	11368 <dcgettext@plt>
   1952c:	ldr	r2, [pc, #80]	; 19584 <__assert_fail@plt+0x7ef8>
   19530:	mov	r1, r0
   19534:	mov	r0, #1
   19538:	bl	11530 <__printf_chk@plt>
   1953c:	mov	r2, #5
   19540:	ldr	r1, [pc, #64]	; 19588 <__assert_fail@plt+0x7efc>
   19544:	mov	r0, #0
   19548:	bl	11368 <dcgettext@plt>
   1954c:	ldr	r3, [pc, #56]	; 1958c <__assert_fail@plt+0x7f00>
   19550:	ldr	r2, [pc, #56]	; 19590 <__assert_fail@plt+0x7f04>
   19554:	mov	r1, r0
   19558:	mov	r0, #1
   1955c:	bl	11530 <__printf_chk@plt>
   19560:	ldr	r1, [pc, #44]	; 19594 <__assert_fail@plt+0x7f08>
   19564:	mov	r2, #5
   19568:	mov	r0, #0
   1956c:	bl	11368 <dcgettext@plt>
   19570:	ldr	r3, [pc, #32]	; 19598 <__assert_fail@plt+0x7f0c>
   19574:	pop	{r4, lr}
   19578:	ldr	r1, [r3]
   1957c:	b	11638 <fputs@plt>
   19580:	andeq	ip, r1, ip, lsl sl
   19584:	muleq	r1, r8, r5
   19588:	andeq	ip, r1, r4, lsr sl
   1958c:	andeq	ip, r1, r0, ror r5
   19590:	andeq	ip, r1, ip, asr #8
   19594:	andeq	ip, r1, r8, asr #20
   19598:	andeq	sp, r2, ip, ror r0
   1959c:	push	{r4, lr}
   195a0:	mov	r4, r0
   195a4:	bl	11470 <malloc@plt>
   195a8:	adds	r4, r4, #0
   195ac:	movne	r4, #1
   195b0:	cmp	r0, #0
   195b4:	movne	r4, #0
   195b8:	cmp	r4, #0
   195bc:	popeq	{r4, pc}
   195c0:	bl	197e4 <__assert_fail@plt+0x8158>
   195c4:	push	{r4, r5, r6, lr}
   195c8:	umull	r4, r5, r0, r1
   195cc:	adds	r3, r5, #0
   195d0:	movne	r3, #1
   195d4:	cmp	r4, #0
   195d8:	blt	195f0 <__assert_fail@plt+0x7f64>
   195dc:	cmp	r3, #0
   195e0:	bne	195f0 <__assert_fail@plt+0x7f64>
   195e4:	mul	r0, r1, r0
   195e8:	pop	{r4, r5, r6, lr}
   195ec:	b	1959c <__assert_fail@plt+0x7f10>
   195f0:	bl	197e4 <__assert_fail@plt+0x8158>
   195f4:	b	1959c <__assert_fail@plt+0x7f10>
   195f8:	adds	r3, r0, #0
   195fc:	movne	r3, #1
   19600:	cmp	r1, #0
   19604:	movne	r3, #0
   19608:	cmp	r3, #0
   1960c:	push	{r4, lr}
   19610:	bne	19638 <__assert_fail@plt+0x7fac>
   19614:	mov	r4, r1
   19618:	bl	113a4 <realloc@plt>
   1961c:	adds	r4, r4, #0
   19620:	movne	r4, #1
   19624:	cmp	r0, #0
   19628:	movne	r4, #0
   1962c:	cmp	r4, #0
   19630:	popeq	{r4, pc}
   19634:	bl	197e4 <__assert_fail@plt+0x8158>
   19638:	bl	11308 <free@plt>
   1963c:	mov	r0, #0
   19640:	pop	{r4, pc}
   19644:	push	{r4, r5, r6, lr}
   19648:	umull	r4, r5, r1, r2
   1964c:	adds	r3, r5, #0
   19650:	movne	r3, #1
   19654:	cmp	r4, #0
   19658:	blt	19670 <__assert_fail@plt+0x7fe4>
   1965c:	cmp	r3, #0
   19660:	bne	19670 <__assert_fail@plt+0x7fe4>
   19664:	mul	r1, r2, r1
   19668:	pop	{r4, r5, r6, lr}
   1966c:	b	195f8 <__assert_fail@plt+0x7f6c>
   19670:	bl	197e4 <__assert_fail@plt+0x8158>
   19674:	push	{r4, r5, r6, r7, r8, lr}
   19678:	subs	r7, r0, #0
   1967c:	mov	r6, r1
   19680:	mov	r5, r2
   19684:	ldr	r4, [r1]
   19688:	beq	196bc <__assert_fail@plt+0x8030>
   1968c:	mov	r1, r2
   19690:	ldr	r0, [pc, #104]	; 19700 <__assert_fail@plt+0x8074>
   19694:	bl	1a634 <__assert_fail@plt+0x8fa8>
   19698:	cmp	r0, r4
   1969c:	bls	196e0 <__assert_fail@plt+0x8054>
   196a0:	add	r3, r4, #1
   196a4:	add	r4, r3, r4, lsr #1
   196a8:	str	r4, [r6]
   196ac:	mul	r1, r5, r4
   196b0:	mov	r0, r7
   196b4:	pop	{r4, r5, r6, r7, r8, lr}
   196b8:	b	195f8 <__assert_fail@plt+0x7f6c>
   196bc:	cmp	r4, #0
   196c0:	beq	196e4 <__assert_fail@plt+0x8058>
   196c4:	umull	r0, r1, r4, r5
   196c8:	adds	r3, r1, #0
   196cc:	movne	r3, #1
   196d0:	cmp	r0, #0
   196d4:	blt	196e0 <__assert_fail@plt+0x8054>
   196d8:	cmp	r3, #0
   196dc:	beq	196a8 <__assert_fail@plt+0x801c>
   196e0:	bl	197e4 <__assert_fail@plt+0x8158>
   196e4:	mov	r1, r2
   196e8:	mov	r0, #64	; 0x40
   196ec:	bl	1a634 <__assert_fail@plt+0x8fa8>
   196f0:	cmp	r5, #64	; 0x40
   196f4:	movls	r4, r0
   196f8:	addhi	r4, r0, #1
   196fc:	b	196c4 <__assert_fail@plt+0x8038>
   19700:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   19704:	cmp	r0, #0
   19708:	ldr	r3, [r1]
   1970c:	beq	19730 <__assert_fail@plt+0x80a4>
   19710:	ldr	r2, [pc, #60]	; 19754 <__assert_fail@plt+0x80c8>
   19714:	cmp	r3, r2
   19718:	bhi	1974c <__assert_fail@plt+0x80c0>
   1971c:	add	r2, r3, #1
   19720:	add	r3, r2, r3, lsr #1
   19724:	str	r3, [r1]
   19728:	mov	r1, r3
   1972c:	b	195f8 <__assert_fail@plt+0x7f6c>
   19730:	cmp	r3, #0
   19734:	bne	19748 <__assert_fail@plt+0x80bc>
   19738:	mov	r3, #64	; 0x40
   1973c:	str	r3, [r1]
   19740:	mov	r1, r3
   19744:	b	195f8 <__assert_fail@plt+0x7f6c>
   19748:	bge	19724 <__assert_fail@plt+0x8098>
   1974c:	push	{r4, lr}
   19750:	bl	197e4 <__assert_fail@plt+0x8158>
   19754:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   19758:	push	{r4, lr}
   1975c:	mov	r4, r0
   19760:	bl	1959c <__assert_fail@plt+0x7f10>
   19764:	mov	r2, r4
   19768:	mov	r1, #0
   1976c:	pop	{r4, lr}
   19770:	b	11518 <memset@plt>
   19774:	push	{r4, r5, r6, lr}
   19778:	umull	r4, r5, r0, r1
   1977c:	adds	r3, r5, #0
   19780:	movne	r3, #1
   19784:	cmp	r4, #0
   19788:	blt	197a0 <__assert_fail@plt+0x8114>
   1978c:	cmp	r3, #0
   19790:	bne	197a0 <__assert_fail@plt+0x8114>
   19794:	bl	112b4 <calloc@plt>
   19798:	cmp	r0, #0
   1979c:	popne	{r4, r5, r6, pc}
   197a0:	bl	197e4 <__assert_fail@plt+0x8158>
   197a4:	push	{r4, r5, r6, lr}
   197a8:	mov	r4, r1
   197ac:	mov	r5, r0
   197b0:	mov	r0, r1
   197b4:	bl	1959c <__assert_fail@plt+0x7f10>
   197b8:	mov	r2, r4
   197bc:	mov	r1, r5
   197c0:	pop	{r4, r5, r6, lr}
   197c4:	b	1132c <memcpy@plt>
   197c8:	push	{r4, lr}
   197cc:	mov	r4, r0
   197d0:	bl	114dc <strlen@plt>
   197d4:	add	r1, r0, #1
   197d8:	mov	r0, r4
   197dc:	pop	{r4, lr}
   197e0:	b	197a4 <__assert_fail@plt+0x8118>
   197e4:	ldr	r3, [pc, #44]	; 19818 <__assert_fail@plt+0x818c>
   197e8:	push	{r4, lr}
   197ec:	mov	r2, #5
   197f0:	ldr	r1, [pc, #36]	; 1981c <__assert_fail@plt+0x8190>
   197f4:	mov	r0, #0
   197f8:	ldr	r4, [r3]
   197fc:	bl	11368 <dcgettext@plt>
   19800:	ldr	r2, [pc, #24]	; 19820 <__assert_fail@plt+0x8194>
   19804:	mov	r1, #0
   19808:	mov	r3, r0
   1980c:	mov	r0, r4
   19810:	bl	11440 <error@plt>
   19814:	bl	11650 <abort@plt>
   19818:	andeq	sp, r2, r4, lsl r0
   1981c:			; <UNDEFINED> instruction: 0x0001cabc
   19820:	andeq	ip, r1, r0, lsr r6
   19824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19828:	cmp	r2, #36	; 0x24
   1982c:	ldr	r7, [pc, #1580]	; 19e60 <__assert_fail@plt+0x87d4>
   19830:	sub	sp, sp, #20
   19834:	mov	fp, r2
   19838:	ldr	r2, [r7]
   1983c:	ldr	r9, [sp, #56]	; 0x38
   19840:	str	r2, [sp, #12]
   19844:	bhi	19e48 <__assert_fail@plt+0x87bc>
   19848:	cmp	r1, #0
   1984c:	mov	r6, r1
   19850:	mov	r5, r0
   19854:	mov	sl, r3
   19858:	addeq	r6, sp, #8
   1985c:	bl	11500 <__errno_location@plt>
   19860:	mov	r3, #0
   19864:	str	r3, [r0]
   19868:	mov	r8, r0
   1986c:	bl	114ac <__ctype_b_loc@plt>
   19870:	ldrb	r3, [r5]
   19874:	mov	r1, r5
   19878:	ldr	ip, [r0]
   1987c:	b	19884 <__assert_fail@plt+0x81f8>
   19880:	ldrb	r3, [r1, #1]!
   19884:	lsl	r2, r3, #1
   19888:	ldrh	r0, [ip, r2]
   1988c:	ands	r4, r0, #8192	; 0x2000
   19890:	bne	19880 <__assert_fail@plt+0x81f4>
   19894:	cmp	r3, #45	; 0x2d
   19898:	beq	19924 <__assert_fail@plt+0x8298>
   1989c:	mov	r2, fp
   198a0:	mov	r1, r6
   198a4:	mov	r0, r5
   198a8:	bl	114d0 <strtoul@plt>
   198ac:	ldr	r3, [r6]
   198b0:	cmp	r3, r5
   198b4:	mov	fp, r0
   198b8:	beq	1990c <__assert_fail@plt+0x8280>
   198bc:	ldr	r4, [r8]
   198c0:	cmp	r4, #0
   198c4:	bne	198fc <__assert_fail@plt+0x8270>
   198c8:	cmp	r9, #0
   198cc:	beq	198dc <__assert_fail@plt+0x8250>
   198d0:	ldrb	r5, [r3]
   198d4:	cmp	r5, #0
   198d8:	bne	19c94 <__assert_fail@plt+0x8608>
   198dc:	str	fp, [sl]
   198e0:	ldr	r2, [sp, #12]
   198e4:	ldr	r3, [r7]
   198e8:	mov	r0, r4
   198ec:	cmp	r2, r3
   198f0:	bne	19e5c <__assert_fail@plt+0x87d0>
   198f4:	add	sp, sp, #20
   198f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198fc:	cmp	r4, #34	; 0x22
   19900:	bne	19924 <__assert_fail@plt+0x8298>
   19904:	mov	r4, #1
   19908:	b	198c8 <__assert_fail@plt+0x823c>
   1990c:	cmp	r9, #0
   19910:	str	r3, [sp, #4]
   19914:	beq	19924 <__assert_fail@plt+0x8298>
   19918:	ldrb	r5, [r5]
   1991c:	cmp	r5, #0
   19920:	bne	1992c <__assert_fail@plt+0x82a0>
   19924:	mov	r4, #4
   19928:	b	198e0 <__assert_fail@plt+0x8254>
   1992c:	mov	r1, r5
   19930:	mov	r0, r9
   19934:	bl	114e8 <strchr@plt>
   19938:	ldr	r3, [sp, #4]
   1993c:	cmp	r0, #0
   19940:	movne	fp, #1
   19944:	beq	19924 <__assert_fail@plt+0x8298>
   19948:	sub	r8, r5, #69	; 0x45
   1994c:	cmp	r8, #47	; 0x2f
   19950:	ldrls	pc, [pc, r8, lsl #2]
   19954:	b	19b1c <__assert_fail@plt+0x8490>
   19958:	andeq	r9, r1, r8, lsl sl
   1995c:	andeq	r9, r1, ip, lsl fp
   19960:	andeq	r9, r1, r8, lsl sl
   19964:	andeq	r9, r1, ip, lsl fp
   19968:	andeq	r9, r1, ip, lsl fp
   1996c:	andeq	r9, r1, ip, lsl fp
   19970:	andeq	r9, r1, r8, lsl sl
   19974:	andeq	r9, r1, ip, lsl fp
   19978:	andeq	r9, r1, r8, lsl sl
   1997c:	andeq	r9, r1, ip, lsl fp
   19980:	andeq	r9, r1, ip, lsl fp
   19984:	andeq	r9, r1, r8, lsl sl
   19988:	andeq	r9, r1, ip, lsl fp
   1998c:	andeq	r9, r1, ip, lsl fp
   19990:	andeq	r9, r1, ip, lsl fp
   19994:	andeq	r9, r1, r8, lsl sl
   19998:	andeq	r9, r1, ip, lsl fp
   1999c:	andeq	r9, r1, ip, lsl fp
   199a0:	andeq	r9, r1, ip, lsl fp
   199a4:	andeq	r9, r1, ip, lsl fp
   199a8:	andeq	r9, r1, r8, lsl sl
   199ac:	andeq	r9, r1, r8, lsl sl
   199b0:	andeq	r9, r1, ip, lsl fp
   199b4:	andeq	r9, r1, ip, lsl fp
   199b8:	andeq	r9, r1, ip, lsl fp
   199bc:	andeq	r9, r1, ip, lsl fp
   199c0:	andeq	r9, r1, ip, lsl fp
   199c4:	andeq	r9, r1, ip, lsl fp
   199c8:	andeq	r9, r1, ip, lsl fp
   199cc:	andeq	r9, r1, ip, lsl fp
   199d0:	andeq	r9, r1, ip, lsl fp
   199d4:	andeq	r9, r1, ip, lsl fp
   199d8:	andeq	r9, r1, ip, lsl fp
   199dc:	andeq	r9, r1, ip, lsl fp
   199e0:	andeq	r9, r1, r8, lsl sl
   199e4:	andeq	r9, r1, ip, lsl fp
   199e8:	andeq	r9, r1, ip, lsl fp
   199ec:	andeq	r9, r1, ip, lsl fp
   199f0:	andeq	r9, r1, r8, lsl sl
   199f4:	andeq	r9, r1, ip, lsl fp
   199f8:	andeq	r9, r1, r8, lsl sl
   199fc:	andeq	r9, r1, ip, lsl fp
   19a00:	andeq	r9, r1, ip, lsl fp
   19a04:	andeq	r9, r1, ip, lsl fp
   19a08:	andeq	r9, r1, ip, lsl fp
   19a0c:	andeq	r9, r1, ip, lsl fp
   19a10:	andeq	r9, r1, ip, lsl fp
   19a14:	andeq	r9, r1, r8, lsl sl
   19a18:	mov	r0, r9
   19a1c:	mov	r1, #48	; 0x30
   19a20:	str	r3, [sp, #4]
   19a24:	bl	114e8 <strchr@plt>
   19a28:	ldr	r3, [sp, #4]
   19a2c:	cmp	r0, #0
   19a30:	beq	19b1c <__assert_fail@plt+0x8490>
   19a34:	ldrb	r2, [r3, #1]
   19a38:	cmp	r2, #68	; 0x44
   19a3c:	beq	19e34 <__assert_fail@plt+0x87a8>
   19a40:	cmp	r2, #105	; 0x69
   19a44:	beq	19cbc <__assert_fail@plt+0x8630>
   19a48:	cmp	r2, #66	; 0x42
   19a4c:	beq	19e34 <__assert_fail@plt+0x87a8>
   19a50:	cmp	r8, #47	; 0x2f
   19a54:	ldrls	pc, [pc, r8, lsl #2]
   19a58:	b	19cb0 <__assert_fail@plt+0x8624>
   19a5c:	andeq	r9, r1, ip, ror #27
   19a60:			; <UNDEFINED> instruction: 0x00019cb0
   19a64:	andeq	r9, r1, ip, lsl #24
   19a68:			; <UNDEFINED> instruction: 0x00019cb0
   19a6c:			; <UNDEFINED> instruction: 0x00019cb0
   19a70:			; <UNDEFINED> instruction: 0x00019cb0
   19a74:	andeq	r9, r1, r8, ror ip
   19a78:			; <UNDEFINED> instruction: 0x00019cb0
   19a7c:			; <UNDEFINED> instruction: 0x00019dbc
   19a80:			; <UNDEFINED> instruction: 0x00019cb0
   19a84:			; <UNDEFINED> instruction: 0x00019cb0
   19a88:	andeq	r9, r1, ip, lsl #27
   19a8c:			; <UNDEFINED> instruction: 0x00019cb0
   19a90:			; <UNDEFINED> instruction: 0x00019cb0
   19a94:			; <UNDEFINED> instruction: 0x00019cb0
   19a98:	andeq	r9, r1, ip, asr sp
   19a9c:			; <UNDEFINED> instruction: 0x00019cb0
   19aa0:			; <UNDEFINED> instruction: 0x00019cb0
   19aa4:			; <UNDEFINED> instruction: 0x00019cb0
   19aa8:			; <UNDEFINED> instruction: 0x00019cb0
   19aac:	andeq	r9, r1, ip, lsr #26
   19ab0:	strdeq	r9, [r1], -r8
   19ab4:			; <UNDEFINED> instruction: 0x00019cb0
   19ab8:			; <UNDEFINED> instruction: 0x00019cb0
   19abc:			; <UNDEFINED> instruction: 0x00019cb0
   19ac0:			; <UNDEFINED> instruction: 0x00019cb0
   19ac4:			; <UNDEFINED> instruction: 0x00019cb0
   19ac8:			; <UNDEFINED> instruction: 0x00019cb0
   19acc:			; <UNDEFINED> instruction: 0x00019cb0
   19ad0:	andeq	r9, r1, r4, ror #25
   19ad4:	andeq	r9, r1, ip, lsr #28
   19ad8:			; <UNDEFINED> instruction: 0x00019cb0
   19adc:			; <UNDEFINED> instruction: 0x00019cb0
   19ae0:			; <UNDEFINED> instruction: 0x00019cb0
   19ae4:	andeq	r9, r1, ip, lsl #24
   19ae8:			; <UNDEFINED> instruction: 0x00019cb0
   19aec:			; <UNDEFINED> instruction: 0x00019cb0
   19af0:			; <UNDEFINED> instruction: 0x00019cb0
   19af4:	andeq	r9, r1, r8, ror ip
   19af8:			; <UNDEFINED> instruction: 0x00019cb0
   19afc:			; <UNDEFINED> instruction: 0x00019dbc
   19b00:			; <UNDEFINED> instruction: 0x00019cb0
   19b04:			; <UNDEFINED> instruction: 0x00019cb0
   19b08:			; <UNDEFINED> instruction: 0x00019cb0
   19b0c:			; <UNDEFINED> instruction: 0x00019cb0
   19b10:			; <UNDEFINED> instruction: 0x00019cb0
   19b14:			; <UNDEFINED> instruction: 0x00019cb0
   19b18:	andeq	r9, r1, ip, asr sp
   19b1c:	mov	r1, #1
   19b20:	mov	r2, #1024	; 0x400
   19b24:	sub	r5, r5, #66	; 0x42
   19b28:	cmp	r5, #53	; 0x35
   19b2c:	ldrls	pc, [pc, r5, lsl #2]
   19b30:	b	19cb0 <__assert_fail@plt+0x8624>
   19b34:	andeq	r9, r1, ip, lsl lr
   19b38:			; <UNDEFINED> instruction: 0x00019cb0
   19b3c:			; <UNDEFINED> instruction: 0x00019cb0
   19b40:	strdeq	r9, [r1], -r4
   19b44:			; <UNDEFINED> instruction: 0x00019cb0
   19b48:	andeq	r9, r1, r4, lsl ip
   19b4c:			; <UNDEFINED> instruction: 0x00019cb0
   19b50:			; <UNDEFINED> instruction: 0x00019cb0
   19b54:			; <UNDEFINED> instruction: 0x00019cb0
   19b58:	andeq	r9, r1, r0, lsl #25
   19b5c:			; <UNDEFINED> instruction: 0x00019cb0
   19b60:	andeq	r9, r1, r4, asr #27
   19b64:			; <UNDEFINED> instruction: 0x00019cb0
   19b68:			; <UNDEFINED> instruction: 0x00019cb0
   19b6c:	muleq	r1, r4, sp
   19b70:			; <UNDEFINED> instruction: 0x00019cb0
   19b74:			; <UNDEFINED> instruction: 0x00019cb0
   19b78:			; <UNDEFINED> instruction: 0x00019cb0
   19b7c:	andeq	r9, r1, r4, ror #26
   19b80:			; <UNDEFINED> instruction: 0x00019cb0
   19b84:			; <UNDEFINED> instruction: 0x00019cb0
   19b88:			; <UNDEFINED> instruction: 0x00019cb0
   19b8c:			; <UNDEFINED> instruction: 0x00019cb0
   19b90:	andeq	r9, r1, r4, lsr sp
   19b94:	andeq	r9, r1, r0, lsl #26
   19b98:			; <UNDEFINED> instruction: 0x00019cb0
   19b9c:			; <UNDEFINED> instruction: 0x00019cb0
   19ba0:			; <UNDEFINED> instruction: 0x00019cb0
   19ba4:			; <UNDEFINED> instruction: 0x00019cb0
   19ba8:			; <UNDEFINED> instruction: 0x00019cb0
   19bac:			; <UNDEFINED> instruction: 0x00019cb0
   19bb0:			; <UNDEFINED> instruction: 0x00019cb0
   19bb4:	andeq	r9, r1, r8, ror #25
   19bb8:	andeq	r9, r1, r0, ror #24
   19bbc:			; <UNDEFINED> instruction: 0x00019cb0
   19bc0:			; <UNDEFINED> instruction: 0x00019cb0
   19bc4:			; <UNDEFINED> instruction: 0x00019cb0
   19bc8:	andeq	r9, r1, r4, lsl ip
   19bcc:			; <UNDEFINED> instruction: 0x00019cb0
   19bd0:			; <UNDEFINED> instruction: 0x00019cb0
   19bd4:			; <UNDEFINED> instruction: 0x00019cb0
   19bd8:	andeq	r9, r1, r0, lsl #25
   19bdc:			; <UNDEFINED> instruction: 0x00019cb0
   19be0:	andeq	r9, r1, r4, asr #27
   19be4:			; <UNDEFINED> instruction: 0x00019cb0
   19be8:			; <UNDEFINED> instruction: 0x00019cb0
   19bec:			; <UNDEFINED> instruction: 0x00019cb0
   19bf0:			; <UNDEFINED> instruction: 0x00019cb0
   19bf4:			; <UNDEFINED> instruction: 0x00019cb0
   19bf8:			; <UNDEFINED> instruction: 0x00019cb0
   19bfc:	andeq	r9, r1, r4, ror #26
   19c00:			; <UNDEFINED> instruction: 0x00019cb0
   19c04:			; <UNDEFINED> instruction: 0x00019cb0
   19c08:	ldrdeq	r9, [r1], -r4
   19c0c:	mov	r1, #1
   19c10:	mov	r2, #1024	; 0x400
   19c14:	umull	ip, r0, r2, fp
   19c18:	adds	r0, r0, #0
   19c1c:	movne	r0, #1
   19c20:	cmp	r0, #0
   19c24:	bne	19e40 <__assert_fail@plt+0x87b4>
   19c28:	mul	fp, r2, fp
   19c2c:	umull	ip, r0, r2, fp
   19c30:	adds	r0, r0, #0
   19c34:	movne	r0, #1
   19c38:	cmp	r0, #0
   19c3c:	bne	19e40 <__assert_fail@plt+0x87b4>
   19c40:	mul	fp, r2, fp
   19c44:	umull	ip, r0, r2, fp
   19c48:	adds	r0, r0, #0
   19c4c:	movne	r0, #1
   19c50:	cmp	r0, #0
   19c54:	muleq	fp, r2, fp
   19c58:	bne	19e40 <__assert_fail@plt+0x87b4>
   19c5c:	orr	r4, r4, r0
   19c60:	add	r2, r3, r1
   19c64:	str	r2, [r6]
   19c68:	ldrb	r3, [r3, r1]
   19c6c:	cmp	r3, #0
   19c70:	orrne	r4, r4, #2
   19c74:	b	198dc <__assert_fail@plt+0x8250>
   19c78:	mov	r1, #1
   19c7c:	mov	r2, #1024	; 0x400
   19c80:	umull	ip, r0, r2, fp
   19c84:	cmp	r0, #0
   19c88:	bne	19de0 <__assert_fail@plt+0x8754>
   19c8c:	mul	fp, r2, fp
   19c90:	b	19c60 <__assert_fail@plt+0x85d4>
   19c94:	mov	r1, r5
   19c98:	mov	r0, r9
   19c9c:	str	r3, [sp, #4]
   19ca0:	bl	114e8 <strchr@plt>
   19ca4:	ldr	r3, [sp, #4]
   19ca8:	cmp	r0, #0
   19cac:	bne	19948 <__assert_fail@plt+0x82bc>
   19cb0:	str	fp, [sl]
   19cb4:	orr	r4, r4, #2
   19cb8:	b	198e0 <__assert_fail@plt+0x8254>
   19cbc:	ldrb	r1, [r3, #2]
   19cc0:	mov	r2, #1024	; 0x400
   19cc4:	cmp	r1, #66	; 0x42
   19cc8:	movne	r1, #1
   19ccc:	moveq	r1, #3
   19cd0:	b	19b24 <__assert_fail@plt+0x8498>
   19cd4:	cmp	fp, #0
   19cd8:	blt	19de0 <__assert_fail@plt+0x8754>
   19cdc:	lsl	fp, fp, #1
   19ce0:	b	19c60 <__assert_fail@plt+0x85d4>
   19ce4:	mov	r1, #1
   19ce8:	lsrs	r2, fp, #23
   19cec:	bne	19de0 <__assert_fail@plt+0x8754>
   19cf0:	lsl	fp, fp, #9
   19cf4:	b	19c60 <__assert_fail@plt+0x85d4>
   19cf8:	mov	r1, #1
   19cfc:	mov	r2, #1024	; 0x400
   19d00:	mov	r0, #7
   19d04:	mov	lr, #0
   19d08:	umull	r5, ip, r2, fp
   19d0c:	cmp	ip, #0
   19d10:	movne	lr, #1
   19d14:	muleq	fp, r2, fp
   19d18:	mvnne	fp, #0
   19d1c:	subs	r0, r0, #1
   19d20:	bne	19d08 <__assert_fail@plt+0x867c>
   19d24:	orr	r4, r4, lr
   19d28:	b	19c60 <__assert_fail@plt+0x85d4>
   19d2c:	mov	r1, #1
   19d30:	mov	r2, #1024	; 0x400
   19d34:	mov	r0, #8
   19d38:	mov	lr, #0
   19d3c:	umull	r5, ip, r2, fp
   19d40:	cmp	ip, #0
   19d44:	movne	lr, #1
   19d48:	muleq	fp, r2, fp
   19d4c:	mvnne	fp, #0
   19d50:	subs	r0, r0, #1
   19d54:	bne	19d3c <__assert_fail@plt+0x86b0>
   19d58:	b	19d24 <__assert_fail@plt+0x8698>
   19d5c:	mov	r1, #1
   19d60:	mov	r2, #1024	; 0x400
   19d64:	mov	r0, #4
   19d68:	mov	lr, #0
   19d6c:	umull	r5, ip, r2, fp
   19d70:	cmp	ip, #0
   19d74:	movne	lr, #1
   19d78:	muleq	fp, r2, fp
   19d7c:	mvnne	fp, #0
   19d80:	subs	r0, r0, #1
   19d84:	bne	19d6c <__assert_fail@plt+0x86e0>
   19d88:	b	19d24 <__assert_fail@plt+0x8698>
   19d8c:	mov	r1, #1
   19d90:	mov	r2, #1024	; 0x400
   19d94:	mov	r0, #5
   19d98:	mov	lr, #0
   19d9c:	umull	r5, ip, r2, fp
   19da0:	cmp	ip, #0
   19da4:	movne	lr, #1
   19da8:	muleq	fp, r2, fp
   19dac:	mvnne	fp, #0
   19db0:	subs	r0, r0, #1
   19db4:	bne	19d9c <__assert_fail@plt+0x8710>
   19db8:	b	19d24 <__assert_fail@plt+0x8698>
   19dbc:	mov	r1, #1
   19dc0:	mov	r2, #1024	; 0x400
   19dc4:	umull	ip, r0, r2, fp
   19dc8:	cmp	r0, #0
   19dcc:	bne	19de0 <__assert_fail@plt+0x8754>
   19dd0:	mul	fp, r2, fp
   19dd4:	umull	ip, r0, r2, fp
   19dd8:	cmp	r0, #0
   19ddc:	beq	19c8c <__assert_fail@plt+0x8600>
   19de0:	mov	r4, #1
   19de4:	mvn	fp, #0
   19de8:	b	19c60 <__assert_fail@plt+0x85d4>
   19dec:	mov	r1, #1
   19df0:	mov	r2, #1024	; 0x400
   19df4:	mov	r0, #6
   19df8:	mov	lr, #0
   19dfc:	umull	r5, ip, r2, fp
   19e00:	cmp	ip, #0
   19e04:	movne	lr, #1
   19e08:	muleq	fp, r2, fp
   19e0c:	mvnne	fp, #0
   19e10:	subs	r0, r0, #1
   19e14:	bne	19dfc <__assert_fail@plt+0x8770>
   19e18:	b	19d24 <__assert_fail@plt+0x8698>
   19e1c:	lsrs	r2, fp, #22
   19e20:	bne	19de0 <__assert_fail@plt+0x8754>
   19e24:	lsl	fp, fp, #10
   19e28:	b	19c60 <__assert_fail@plt+0x85d4>
   19e2c:	mov	r1, #1
   19e30:	b	19c60 <__assert_fail@plt+0x85d4>
   19e34:	mov	r1, #2
   19e38:	mov	r2, #1000	; 0x3e8
   19e3c:	b	19b24 <__assert_fail@plt+0x8498>
   19e40:	mvn	fp, #0
   19e44:	b	19c5c <__assert_fail@plt+0x85d0>
   19e48:	ldr	r3, [pc, #20]	; 19e64 <__assert_fail@plt+0x87d8>
   19e4c:	mov	r2, #84	; 0x54
   19e50:	ldr	r1, [pc, #16]	; 19e68 <__assert_fail@plt+0x87dc>
   19e54:	ldr	r0, [pc, #16]	; 19e6c <__assert_fail@plt+0x87e0>
   19e58:	bl	1168c <__assert_fail@plt>
   19e5c:	bl	11374 <__stack_chk_fail@plt>
   19e60:	muleq	r2, r8, sp
   19e64:	ldrdeq	ip, [r1], -r0
   19e68:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   19e6c:	andeq	ip, r1, r8, ror #21
   19e70:	push	{r1, r2, r3}
   19e74:	push	{r4, r5, r6, r7, r8, lr}
   19e78:	sub	sp, sp, #12
   19e7c:	ldr	r4, [pc, #476]	; 1a060 <__assert_fail@plt+0x89d4>
   19e80:	ldr	r1, [sp, #36]	; 0x24
   19e84:	add	r2, sp, #40	; 0x28
   19e88:	ldr	r3, [r4]
   19e8c:	cmp	r1, #0
   19e90:	str	r3, [sp, #4]
   19e94:	str	r2, [sp]
   19e98:	beq	19f78 <__assert_fail@plt+0x88ec>
   19e9c:	ldr	r3, [pc, #448]	; 1a064 <__assert_fail@plt+0x89d8>
   19ea0:	mov	r6, r0
   19ea4:	cmp	r1, r3
   19ea8:	beq	19f88 <__assert_fail@plt+0x88fc>
   19eac:	cmp	r1, #11
   19eb0:	beq	19f30 <__assert_fail@plt+0x88a4>
   19eb4:	ble	19f10 <__assert_fail@plt+0x8884>
   19eb8:	ldr	r2, [pc, #424]	; 1a068 <__assert_fail@plt+0x89dc>
   19ebc:	cmp	r1, r2
   19ec0:	bgt	19f4c <__assert_fail@plt+0x88c0>
   19ec4:	cmp	r1, r3
   19ec8:	bge	19ed8 <__assert_fail@plt+0x884c>
   19ecc:	ldr	r3, [pc, #408]	; 1a06c <__assert_fail@plt+0x89e0>
   19ed0:	cmp	r1, r3
   19ed4:	beq	19f30 <__assert_fail@plt+0x88a4>
   19ed8:	ldr	r3, [sp]
   19edc:	mov	r0, r6
   19ee0:	ldr	r2, [r3]
   19ee4:	bl	1159c <fcntl64@plt>
   19ee8:	mov	r5, r0
   19eec:	ldr	r2, [sp, #4]
   19ef0:	ldr	r3, [r4]
   19ef4:	mov	r0, r5
   19ef8:	cmp	r2, r3
   19efc:	bne	1a05c <__assert_fail@plt+0x89d0>
   19f00:	add	sp, sp, #12
   19f04:	pop	{r4, r5, r6, r7, r8, lr}
   19f08:	add	sp, sp, #12
   19f0c:	bx	lr
   19f10:	cmp	r1, #4
   19f14:	beq	19ed8 <__assert_fail@plt+0x884c>
   19f18:	bgt	19f40 <__assert_fail@plt+0x88b4>
   19f1c:	cmp	r1, #2
   19f20:	beq	19ed8 <__assert_fail@plt+0x884c>
   19f24:	bgt	19f30 <__assert_fail@plt+0x88a4>
   19f28:	cmp	r1, #1
   19f2c:	bne	19ed8 <__assert_fail@plt+0x884c>
   19f30:	mov	r0, r6
   19f34:	bl	1159c <fcntl64@plt>
   19f38:	mov	r5, r0
   19f3c:	b	19eec <__assert_fail@plt+0x8860>
   19f40:	cmp	r1, #9
   19f44:	bne	19ed8 <__assert_fail@plt+0x884c>
   19f48:	b	19f30 <__assert_fail@plt+0x88a4>
   19f4c:	ldr	r3, [pc, #284]	; 1a070 <__assert_fail@plt+0x89e4>
   19f50:	cmp	r1, r3
   19f54:	beq	19ed8 <__assert_fail@plt+0x884c>
   19f58:	blt	19f30 <__assert_fail@plt+0x88a4>
   19f5c:	add	r3, r3, #1
   19f60:	cmp	r1, r3
   19f64:	bne	19ed8 <__assert_fail@plt+0x884c>
   19f68:	mov	r0, r6
   19f6c:	bl	1159c <fcntl64@plt>
   19f70:	mov	r5, r0
   19f74:	b	19eec <__assert_fail@plt+0x8860>
   19f78:	ldr	r2, [sp, #40]	; 0x28
   19f7c:	bl	1159c <fcntl64@plt>
   19f80:	mov	r5, r0
   19f84:	b	19eec <__assert_fail@plt+0x8860>
   19f88:	ldr	r7, [pc, #228]	; 1a074 <__assert_fail@plt+0x89e8>
   19f8c:	ldr	r8, [r2]
   19f90:	add	r2, sp, #44	; 0x2c
   19f94:	ldr	r3, [r7]
   19f98:	str	r2, [sp]
   19f9c:	cmp	r3, #0
   19fa0:	mov	r2, r8
   19fa4:	blt	19fc0 <__assert_fail@plt+0x8934>
   19fa8:	bl	1159c <fcntl64@plt>
   19fac:	subs	r5, r0, #0
   19fb0:	blt	1a028 <__assert_fail@plt+0x899c>
   19fb4:	mov	r3, #1
   19fb8:	str	r3, [r7]
   19fbc:	b	19eec <__assert_fail@plt+0x8860>
   19fc0:	mov	r1, #0
   19fc4:	bl	1159c <fcntl64@plt>
   19fc8:	subs	r5, r0, #0
   19fcc:	blt	19eec <__assert_fail@plt+0x8860>
   19fd0:	ldr	r3, [r7]
   19fd4:	cmn	r3, #1
   19fd8:	bne	19eec <__assert_fail@plt+0x8860>
   19fdc:	mov	r1, #1
   19fe0:	mov	r0, r5
   19fe4:	bl	1159c <fcntl64@plt>
   19fe8:	subs	r2, r0, #0
   19fec:	blt	1a008 <__assert_fail@plt+0x897c>
   19ff0:	orr	r2, r2, #1
   19ff4:	mov	r1, #2
   19ff8:	mov	r0, r5
   19ffc:	bl	1159c <fcntl64@plt>
   1a000:	cmn	r0, #1
   1a004:	bne	19eec <__assert_fail@plt+0x8860>
   1a008:	bl	11500 <__errno_location@plt>
   1a00c:	mov	r6, r0
   1a010:	mov	r0, r5
   1a014:	ldr	r7, [r6]
   1a018:	mvn	r5, #0
   1a01c:	bl	11668 <close@plt>
   1a020:	str	r7, [r6]
   1a024:	b	19eec <__assert_fail@plt+0x8860>
   1a028:	bl	11500 <__errno_location@plt>
   1a02c:	ldr	r3, [r0]
   1a030:	cmp	r3, #22
   1a034:	bne	19fb4 <__assert_fail@plt+0x8928>
   1a038:	mov	r2, r8
   1a03c:	mov	r0, r6
   1a040:	mov	r1, #0
   1a044:	bl	1159c <fcntl64@plt>
   1a048:	subs	r5, r0, #0
   1a04c:	mvnge	r3, #0
   1a050:	strge	r3, [r7]
   1a054:	bge	19fdc <__assert_fail@plt+0x8950>
   1a058:	b	19eec <__assert_fail@plt+0x8860>
   1a05c:	bl	11374 <__stack_chk_fail@plt>
   1a060:	muleq	r2, r8, sp
   1a064:	andeq	r0, r0, r6, lsl #8
   1a068:	andeq	r0, r0, r7, lsl #8
   1a06c:	andeq	r0, r0, r1, lsl #8
   1a070:	andeq	r0, r0, r9, lsl #8
   1a074:	andeq	sp, r2, r8, lsl #5
   1a078:	push	{r4, lr}
   1a07c:	subs	r4, r0, #0
   1a080:	sub	sp, sp, #8
   1a084:	beq	1a0a0 <__assert_fail@plt+0x8a14>
   1a088:	bl	11488 <__freading@plt>
   1a08c:	cmp	r0, #0
   1a090:	beq	1a0a0 <__assert_fail@plt+0x8a14>
   1a094:	ldr	r3, [r4]
   1a098:	tst	r3, #256	; 0x100
   1a09c:	bne	1a0b0 <__assert_fail@plt+0x8a24>
   1a0a0:	mov	r0, r4
   1a0a4:	add	sp, sp, #8
   1a0a8:	pop	{r4, lr}
   1a0ac:	b	112f0 <fflush@plt>
   1a0b0:	mov	r3, #1
   1a0b4:	str	r3, [sp]
   1a0b8:	mov	r2, #0
   1a0bc:	mov	r3, #0
   1a0c0:	mov	r0, r4
   1a0c4:	bl	1a114 <__assert_fail@plt+0x8a88>
   1a0c8:	mov	r0, r4
   1a0cc:	add	sp, sp, #8
   1a0d0:	pop	{r4, lr}
   1a0d4:	b	112f0 <fflush@plt>
   1a0d8:	ldr	r2, [r0, #20]
   1a0dc:	ldr	r3, [r0, #16]
   1a0e0:	cmp	r2, r3
   1a0e4:	bhi	1a10c <__assert_fail@plt+0x8a80>
   1a0e8:	ldm	r0, {r1, r2, r3}
   1a0ec:	tst	r1, #256	; 0x100
   1a0f0:	sub	r3, r3, r2
   1a0f4:	ldrne	r1, [r0, #36]	; 0x24
   1a0f8:	ldrne	r2, [r0, #44]	; 0x2c
   1a0fc:	subne	r2, r2, r1
   1a100:	addne	r3, r3, r2
   1a104:	mov	r0, r3
   1a108:	bx	lr
   1a10c:	mov	r0, #0
   1a110:	bx	lr
   1a114:	push	{r4, r5, r6, r7, r8, lr}
   1a118:	sub	sp, sp, #8
   1a11c:	ldmib	r0, {ip, lr}
   1a120:	mov	r4, r0
   1a124:	ldr	r5, [sp, #32]
   1a128:	cmp	lr, ip
   1a12c:	beq	1a144 <__assert_fail@plt+0x8ab8>
   1a130:	str	r5, [sp, #32]
   1a134:	mov	r0, r4
   1a138:	add	sp, sp, #8
   1a13c:	pop	{r4, r5, r6, r7, r8, lr}
   1a140:	b	11590 <fseeko64@plt>
   1a144:	ldr	lr, [r0, #20]
   1a148:	ldr	ip, [r0, #16]
   1a14c:	cmp	lr, ip
   1a150:	bne	1a130 <__assert_fail@plt+0x8aa4>
   1a154:	ldr	r8, [r0, #36]	; 0x24
   1a158:	cmp	r8, #0
   1a15c:	bne	1a130 <__assert_fail@plt+0x8aa4>
   1a160:	mov	r6, r2
   1a164:	mov	r7, r3
   1a168:	bl	11548 <fileno@plt>
   1a16c:	mov	r2, r6
   1a170:	mov	r3, r7
   1a174:	str	r5, [sp]
   1a178:	bl	113f8 <lseek64@plt>
   1a17c:	mvn	r3, #0
   1a180:	mvn	r2, #0
   1a184:	cmp	r1, r3
   1a188:	cmpeq	r0, r2
   1a18c:	beq	1a1ac <__assert_fail@plt+0x8b20>
   1a190:	ldr	r3, [r4]
   1a194:	strd	r0, [r4, #80]	; 0x50
   1a198:	mov	r0, r8
   1a19c:	bic	r3, r3, #16
   1a1a0:	str	r3, [r4]
   1a1a4:	add	sp, sp, #8
   1a1a8:	pop	{r4, r5, r6, r7, r8, pc}
   1a1ac:	mvn	r0, #0
   1a1b0:	b	1a1a4 <__assert_fail@plt+0x8b18>
   1a1b4:	push	{r4, r5, r6, r7, r8, lr}
   1a1b8:	subs	r7, r0, #0
   1a1bc:	ldr	r5, [pc, #108]	; 1a230 <__assert_fail@plt+0x8ba4>
   1a1c0:	sub	sp, sp, #8
   1a1c4:	mov	r8, r1
   1a1c8:	ldr	r1, [r5]
   1a1cc:	moveq	r7, sp
   1a1d0:	str	r1, [sp, #4]
   1a1d4:	mov	r0, r7
   1a1d8:	mov	r1, r8
   1a1dc:	mov	r6, r2
   1a1e0:	bl	11434 <mbrtowc@plt>
   1a1e4:	cmp	r6, #0
   1a1e8:	cmnne	r0, #3
   1a1ec:	mov	r4, r0
   1a1f0:	bhi	1a210 <__assert_fail@plt+0x8b84>
   1a1f4:	ldr	r2, [sp, #4]
   1a1f8:	ldr	r3, [r5]
   1a1fc:	mov	r0, r4
   1a200:	cmp	r2, r3
   1a204:	bne	1a22c <__assert_fail@plt+0x8ba0>
   1a208:	add	sp, sp, #8
   1a20c:	pop	{r4, r5, r6, r7, r8, pc}
   1a210:	mov	r0, #0
   1a214:	bl	1a2ac <__assert_fail@plt+0x8c20>
   1a218:	cmp	r0, #0
   1a21c:	moveq	r4, #1
   1a220:	ldrbeq	r3, [r8]
   1a224:	streq	r3, [r7]
   1a228:	b	1a1f4 <__assert_fail@plt+0x8b68>
   1a22c:	bl	11374 <__stack_chk_fail@plt>
   1a230:	muleq	r2, r8, sp
   1a234:	push	{r4, r5, r6, lr}
   1a238:	mov	r4, r0
   1a23c:	bl	11428 <__fpending@plt>
   1a240:	mov	r6, r0
   1a244:	mov	r0, r4
   1a248:	bl	11314 <ferror@plt>
   1a24c:	mov	r5, r0
   1a250:	mov	r0, r4
   1a254:	bl	1156c <fclose@plt>
   1a258:	cmp	r5, #0
   1a25c:	mov	r4, r0
   1a260:	bne	1a28c <__assert_fail@plt+0x8c00>
   1a264:	cmp	r0, #0
   1a268:	beq	1a284 <__assert_fail@plt+0x8bf8>
   1a26c:	cmp	r6, #0
   1a270:	bne	1a2a4 <__assert_fail@plt+0x8c18>
   1a274:	bl	11500 <__errno_location@plt>
   1a278:	ldr	r4, [r0]
   1a27c:	subs	r4, r4, #9
   1a280:	mvnne	r4, #0
   1a284:	mov	r0, r4
   1a288:	pop	{r4, r5, r6, pc}
   1a28c:	cmp	r0, #0
   1a290:	bne	1a2a4 <__assert_fail@plt+0x8c18>
   1a294:	bl	11500 <__errno_location@plt>
   1a298:	str	r4, [r0]
   1a29c:	mvn	r4, #0
   1a2a0:	b	1a284 <__assert_fail@plt+0x8bf8>
   1a2a4:	mvn	r4, #0
   1a2a8:	b	1a284 <__assert_fail@plt+0x8bf8>
   1a2ac:	push	{r4, lr}
   1a2b0:	mov	r1, #0
   1a2b4:	bl	115a8 <setlocale@plt>
   1a2b8:	subs	r4, r0, #0
   1a2bc:	beq	1a2e8 <__assert_fail@plt+0x8c5c>
   1a2c0:	ldr	r1, [pc, #40]	; 1a2f0 <__assert_fail@plt+0x8c64>
   1a2c4:	bl	112cc <strcmp@plt>
   1a2c8:	cmp	r0, #0
   1a2cc:	popeq	{r4, pc}
   1a2d0:	mov	r0, r4
   1a2d4:	ldr	r1, [pc, #24]	; 1a2f4 <__assert_fail@plt+0x8c68>
   1a2d8:	bl	112cc <strcmp@plt>
   1a2dc:	adds	r0, r0, #0
   1a2e0:	movne	r0, #1
   1a2e4:	pop	{r4, pc}
   1a2e8:	mov	r0, #1
   1a2ec:	pop	{r4, pc}
   1a2f0:	andeq	ip, r1, r0, lsl fp
   1a2f4:	andeq	ip, r1, r4, lsl fp
   1a2f8:	push	{r4, lr}
   1a2fc:	mov	r0, #14
   1a300:	bl	115d8 <nl_langinfo@plt>
   1a304:	cmp	r0, #0
   1a308:	beq	1a320 <__assert_fail@plt+0x8c94>
   1a30c:	ldrb	r2, [r0]
   1a310:	ldr	r3, [pc, #16]	; 1a328 <__assert_fail@plt+0x8c9c>
   1a314:	cmp	r2, #0
   1a318:	moveq	r0, r3
   1a31c:	pop	{r4, pc}
   1a320:	ldr	r0, [pc]	; 1a328 <__assert_fail@plt+0x8c9c>
   1a324:	pop	{r4, pc}
   1a328:	andeq	ip, r1, ip, lsl fp
   1a32c:	mov	r3, #16
   1a330:	adds	r0, r0, r3
   1a334:	bcs	1a360 <__assert_fail@plt+0x8cd4>
   1a338:	push	{r4, lr}
   1a33c:	bl	11470 <malloc@plt>
   1a340:	subs	r2, r0, #0
   1a344:	addne	r3, r2, #8
   1a348:	bicne	r3, r3, #15
   1a34c:	moveq	r0, #0
   1a350:	addne	r0, r3, #8
   1a354:	subne	r2, r0, r2
   1a358:	strbne	r2, [r3, #7]
   1a35c:	pop	{r4, pc}
   1a360:	mov	r0, #0
   1a364:	bx	lr
   1a368:	tst	r0, #7
   1a36c:	bne	1a384 <__assert_fail@plt+0x8cf8>
   1a370:	tst	r0, #8
   1a374:	bxeq	lr
   1a378:	ldrb	r3, [r0, #-1]
   1a37c:	sub	r0, r0, r3
   1a380:	b	11308 <free@plt>
   1a384:	push	{r4, lr}
   1a388:	bl	11650 <abort@plt>
   1a38c:	push	{r4, lr}
   1a390:	mov	r4, r0
   1a394:	bl	112fc <wcwidth@plt>
   1a398:	cmp	r0, #0
   1a39c:	popge	{r4, pc}
   1a3a0:	mov	r0, r4
   1a3a4:	bl	113bc <iswcntrl@plt>
   1a3a8:	clz	r0, r0
   1a3ac:	lsr	r0, r0, #5
   1a3b0:	pop	{r4, pc}
   1a3b4:	mov	r3, r1
   1a3b8:	push	{r4, r5, r6, lr}
   1a3bc:	mov	r4, r1
   1a3c0:	ldr	r1, [r3], #16
   1a3c4:	ldr	r2, [r4, #4]
   1a3c8:	cmp	r1, r3
   1a3cc:	mov	r5, r0
   1a3d0:	strne	r1, [r0]
   1a3d4:	beq	1a3f4 <__assert_fail@plt+0x8d68>
   1a3d8:	ldrb	r3, [r4, #8]
   1a3dc:	str	r2, [r5, #4]
   1a3e0:	cmp	r3, #0
   1a3e4:	strb	r3, [r5, #8]
   1a3e8:	ldrne	r3, [r4, #12]
   1a3ec:	strne	r3, [r5, #12]
   1a3f0:	pop	{r4, r5, r6, pc}
   1a3f4:	add	r3, r0, #16
   1a3f8:	mov	r0, r3
   1a3fc:	bl	1132c <memcpy@plt>
   1a400:	ldr	r2, [r4, #4]
   1a404:	str	r0, [r5]
   1a408:	b	1a3d8 <__assert_fail@plt+0x8d4c>
   1a40c:	ldr	r3, [pc, #20]	; 1a428 <__assert_fail@plt+0x8d9c>
   1a410:	lsr	r2, r0, #5
   1a414:	and	r0, r0, #31
   1a418:	ldr	r3, [r3, r2, lsl #2]
   1a41c:	lsr	r0, r3, r0
   1a420:	and	r0, r0, #1
   1a424:	bx	lr
   1a428:	andeq	ip, r1, r4, lsr #22
   1a42c:	push	{r4, r5, r6, r7, r8, lr}
   1a430:	sub	sp, sp, #64	; 0x40
   1a434:	ldr	r7, [pc, #464]	; 1a60c <__assert_fail@plt+0x8f80>
   1a438:	mov	r4, r0
   1a43c:	ldr	r3, [r7]
   1a440:	str	r3, [sp, #60]	; 0x3c
   1a444:	bl	11410 <__ctype_get_mb_cur_max@plt>
   1a448:	cmp	r0, #1
   1a44c:	bhi	1a478 <__assert_fail@plt+0x8dec>
   1a450:	mov	r0, r4
   1a454:	bl	114dc <strlen@plt>
   1a458:	mov	r5, r0
   1a45c:	ldr	r2, [sp, #60]	; 0x3c
   1a460:	ldr	r3, [r7]
   1a464:	mov	r0, r5
   1a468:	cmp	r2, r3
   1a46c:	bne	1a5f4 <__assert_fail@plt+0x8f68>
   1a470:	add	sp, sp, #64	; 0x40
   1a474:	pop	{r4, r5, r6, r7, r8, pc}
   1a478:	mov	r5, #0
   1a47c:	str	r4, [sp, #20]
   1a480:	str	r5, [sp, #12]
   1a484:	strb	r5, [sp, #4]
   1a488:	str	r5, [sp, #8]
   1a48c:	strb	r5, [sp, #16]
   1a490:	mov	r6, #1
   1a494:	ldr	r8, [pc, #372]	; 1a610 <__assert_fail@plt+0x8f84>
   1a498:	b	1a4f0 <__assert_fail@plt+0x8e64>
   1a49c:	ldrb	r3, [r4]
   1a4a0:	and	r2, r3, #31
   1a4a4:	lsr	r3, r3, #5
   1a4a8:	ldr	r3, [r8, r3, lsl #2]
   1a4ac:	lsr	r3, r3, r2
   1a4b0:	tst	r3, #1
   1a4b4:	beq	1a564 <__assert_fail@plt+0x8ed8>
   1a4b8:	str	r6, [sp, #24]
   1a4bc:	ldrb	r4, [r4]
   1a4c0:	strb	r6, [sp, #28]
   1a4c4:	strb	r6, [sp, #16]
   1a4c8:	str	r4, [sp, #32]
   1a4cc:	cmp	r4, #0
   1a4d0:	beq	1a45c <__assert_fail@plt+0x8dd0>
   1a4d4:	ldr	r4, [sp, #20]
   1a4d8:	ldr	r3, [sp, #24]
   1a4dc:	add	r5, r5, #1
   1a4e0:	add	r4, r4, r3
   1a4e4:	mov	r3, #0
   1a4e8:	str	r4, [sp, #20]
   1a4ec:	strb	r3, [sp, #16]
   1a4f0:	ldrb	r3, [sp, #4]
   1a4f4:	cmp	r3, #0
   1a4f8:	beq	1a49c <__assert_fail@plt+0x8e10>
   1a4fc:	bl	11410 <__ctype_get_mb_cur_max@plt>
   1a500:	mov	r1, r0
   1a504:	mov	r0, r4
   1a508:	bl	18fd8 <__assert_fail@plt+0x794c>
   1a50c:	add	r3, sp, #8
   1a510:	mov	r1, r4
   1a514:	mov	r2, r0
   1a518:	add	r0, sp, #32
   1a51c:	bl	1a1b4 <__assert_fail@plt+0x8b28>
   1a520:	cmn	r0, #1
   1a524:	str	r0, [sp, #24]
   1a528:	beq	1a57c <__assert_fail@plt+0x8ef0>
   1a52c:	cmn	r0, #2
   1a530:	beq	1a590 <__assert_fail@plt+0x8f04>
   1a534:	cmp	r0, #0
   1a538:	beq	1a5ac <__assert_fail@plt+0x8f20>
   1a53c:	ldr	r4, [sp, #32]
   1a540:	add	r0, sp, #8
   1a544:	strb	r6, [sp, #28]
   1a548:	bl	11344 <mbsinit@plt>
   1a54c:	cmp	r0, #0
   1a550:	movne	r3, #0
   1a554:	strbeq	r6, [sp, #16]
   1a558:	strbne	r6, [sp, #16]
   1a55c:	strbne	r3, [sp, #4]
   1a560:	b	1a4cc <__assert_fail@plt+0x8e40>
   1a564:	add	r0, sp, #8
   1a568:	bl	11344 <mbsinit@plt>
   1a56c:	cmp	r0, #0
   1a570:	beq	1a5e0 <__assert_fail@plt+0x8f54>
   1a574:	strb	r6, [sp, #4]
   1a578:	b	1a4fc <__assert_fail@plt+0x8e70>
   1a57c:	mov	r3, #0
   1a580:	str	r6, [sp, #24]
   1a584:	strb	r3, [sp, #28]
   1a588:	ldr	r4, [sp, #20]
   1a58c:	b	1a4d8 <__assert_fail@plt+0x8e4c>
   1a590:	ldr	r4, [sp, #20]
   1a594:	mov	r0, r4
   1a598:	bl	114dc <strlen@plt>
   1a59c:	mov	r3, #0
   1a5a0:	strb	r3, [sp, #28]
   1a5a4:	str	r0, [sp, #24]
   1a5a8:	b	1a4d8 <__assert_fail@plt+0x8e4c>
   1a5ac:	ldr	r4, [sp, #20]
   1a5b0:	str	r6, [sp, #24]
   1a5b4:	ldrb	r3, [r4]
   1a5b8:	cmp	r3, #0
   1a5bc:	bne	1a5f8 <__assert_fail@plt+0x8f6c>
   1a5c0:	ldr	r4, [sp, #32]
   1a5c4:	cmp	r4, #0
   1a5c8:	beq	1a540 <__assert_fail@plt+0x8eb4>
   1a5cc:	ldr	r3, [pc, #64]	; 1a614 <__assert_fail@plt+0x8f88>
   1a5d0:	mov	r2, #179	; 0xb3
   1a5d4:	ldr	r1, [pc, #60]	; 1a618 <__assert_fail@plt+0x8f8c>
   1a5d8:	ldr	r0, [pc, #60]	; 1a61c <__assert_fail@plt+0x8f90>
   1a5dc:	bl	1168c <__assert_fail@plt>
   1a5e0:	ldr	r3, [pc, #44]	; 1a614 <__assert_fail@plt+0x8f88>
   1a5e4:	mov	r2, #150	; 0x96
   1a5e8:	ldr	r1, [pc, #40]	; 1a618 <__assert_fail@plt+0x8f8c>
   1a5ec:	ldr	r0, [pc, #44]	; 1a620 <__assert_fail@plt+0x8f94>
   1a5f0:	bl	1168c <__assert_fail@plt>
   1a5f4:	bl	11374 <__stack_chk_fail@plt>
   1a5f8:	ldr	r3, [pc, #20]	; 1a614 <__assert_fail@plt+0x8f88>
   1a5fc:	mov	r2, #178	; 0xb2
   1a600:	ldr	r1, [pc, #16]	; 1a618 <__assert_fail@plt+0x8f8c>
   1a604:	ldr	r0, [pc, #24]	; 1a624 <__assert_fail@plt+0x8f98>
   1a608:	bl	1168c <__assert_fail@plt>
   1a60c:	muleq	r2, r8, sp
   1a610:	andeq	ip, r1, r4, lsr #22
   1a614:	andeq	ip, r1, r4, asr #22
   1a618:	andeq	ip, r1, r4, asr r6
   1a61c:	andeq	ip, r1, r0, ror #12
   1a620:	andeq	ip, r1, r4, ror r6
   1a624:	andeq	ip, r1, ip, lsl #13
   1a628:	mov	r2, #3
   1a62c:	mov	r1, #0
   1a630:	b	19e70 <__assert_fail@plt+0x87e4>
   1a634:	subs	r2, r1, #1
   1a638:	bxeq	lr
   1a63c:	bcc	1a814 <__assert_fail@plt+0x9188>
   1a640:	cmp	r0, r1
   1a644:	bls	1a7f8 <__assert_fail@plt+0x916c>
   1a648:	tst	r1, r2
   1a64c:	beq	1a804 <__assert_fail@plt+0x9178>
   1a650:	clz	r3, r0
   1a654:	clz	r2, r1
   1a658:	sub	r3, r2, r3
   1a65c:	rsbs	r3, r3, #31
   1a660:	addne	r3, r3, r3, lsl #1
   1a664:	mov	r2, #0
   1a668:	addne	pc, pc, r3, lsl #2
   1a66c:	nop			; (mov r0, r0)
   1a670:	cmp	r0, r1, lsl #31
   1a674:	adc	r2, r2, r2
   1a678:	subcs	r0, r0, r1, lsl #31
   1a67c:	cmp	r0, r1, lsl #30
   1a680:	adc	r2, r2, r2
   1a684:	subcs	r0, r0, r1, lsl #30
   1a688:	cmp	r0, r1, lsl #29
   1a68c:	adc	r2, r2, r2
   1a690:	subcs	r0, r0, r1, lsl #29
   1a694:	cmp	r0, r1, lsl #28
   1a698:	adc	r2, r2, r2
   1a69c:	subcs	r0, r0, r1, lsl #28
   1a6a0:	cmp	r0, r1, lsl #27
   1a6a4:	adc	r2, r2, r2
   1a6a8:	subcs	r0, r0, r1, lsl #27
   1a6ac:	cmp	r0, r1, lsl #26
   1a6b0:	adc	r2, r2, r2
   1a6b4:	subcs	r0, r0, r1, lsl #26
   1a6b8:	cmp	r0, r1, lsl #25
   1a6bc:	adc	r2, r2, r2
   1a6c0:	subcs	r0, r0, r1, lsl #25
   1a6c4:	cmp	r0, r1, lsl #24
   1a6c8:	adc	r2, r2, r2
   1a6cc:	subcs	r0, r0, r1, lsl #24
   1a6d0:	cmp	r0, r1, lsl #23
   1a6d4:	adc	r2, r2, r2
   1a6d8:	subcs	r0, r0, r1, lsl #23
   1a6dc:	cmp	r0, r1, lsl #22
   1a6e0:	adc	r2, r2, r2
   1a6e4:	subcs	r0, r0, r1, lsl #22
   1a6e8:	cmp	r0, r1, lsl #21
   1a6ec:	adc	r2, r2, r2
   1a6f0:	subcs	r0, r0, r1, lsl #21
   1a6f4:	cmp	r0, r1, lsl #20
   1a6f8:	adc	r2, r2, r2
   1a6fc:	subcs	r0, r0, r1, lsl #20
   1a700:	cmp	r0, r1, lsl #19
   1a704:	adc	r2, r2, r2
   1a708:	subcs	r0, r0, r1, lsl #19
   1a70c:	cmp	r0, r1, lsl #18
   1a710:	adc	r2, r2, r2
   1a714:	subcs	r0, r0, r1, lsl #18
   1a718:	cmp	r0, r1, lsl #17
   1a71c:	adc	r2, r2, r2
   1a720:	subcs	r0, r0, r1, lsl #17
   1a724:	cmp	r0, r1, lsl #16
   1a728:	adc	r2, r2, r2
   1a72c:	subcs	r0, r0, r1, lsl #16
   1a730:	cmp	r0, r1, lsl #15
   1a734:	adc	r2, r2, r2
   1a738:	subcs	r0, r0, r1, lsl #15
   1a73c:	cmp	r0, r1, lsl #14
   1a740:	adc	r2, r2, r2
   1a744:	subcs	r0, r0, r1, lsl #14
   1a748:	cmp	r0, r1, lsl #13
   1a74c:	adc	r2, r2, r2
   1a750:	subcs	r0, r0, r1, lsl #13
   1a754:	cmp	r0, r1, lsl #12
   1a758:	adc	r2, r2, r2
   1a75c:	subcs	r0, r0, r1, lsl #12
   1a760:	cmp	r0, r1, lsl #11
   1a764:	adc	r2, r2, r2
   1a768:	subcs	r0, r0, r1, lsl #11
   1a76c:	cmp	r0, r1, lsl #10
   1a770:	adc	r2, r2, r2
   1a774:	subcs	r0, r0, r1, lsl #10
   1a778:	cmp	r0, r1, lsl #9
   1a77c:	adc	r2, r2, r2
   1a780:	subcs	r0, r0, r1, lsl #9
   1a784:	cmp	r0, r1, lsl #8
   1a788:	adc	r2, r2, r2
   1a78c:	subcs	r0, r0, r1, lsl #8
   1a790:	cmp	r0, r1, lsl #7
   1a794:	adc	r2, r2, r2
   1a798:	subcs	r0, r0, r1, lsl #7
   1a79c:	cmp	r0, r1, lsl #6
   1a7a0:	adc	r2, r2, r2
   1a7a4:	subcs	r0, r0, r1, lsl #6
   1a7a8:	cmp	r0, r1, lsl #5
   1a7ac:	adc	r2, r2, r2
   1a7b0:	subcs	r0, r0, r1, lsl #5
   1a7b4:	cmp	r0, r1, lsl #4
   1a7b8:	adc	r2, r2, r2
   1a7bc:	subcs	r0, r0, r1, lsl #4
   1a7c0:	cmp	r0, r1, lsl #3
   1a7c4:	adc	r2, r2, r2
   1a7c8:	subcs	r0, r0, r1, lsl #3
   1a7cc:	cmp	r0, r1, lsl #2
   1a7d0:	adc	r2, r2, r2
   1a7d4:	subcs	r0, r0, r1, lsl #2
   1a7d8:	cmp	r0, r1, lsl #1
   1a7dc:	adc	r2, r2, r2
   1a7e0:	subcs	r0, r0, r1, lsl #1
   1a7e4:	cmp	r0, r1
   1a7e8:	adc	r2, r2, r2
   1a7ec:	subcs	r0, r0, r1
   1a7f0:	mov	r0, r2
   1a7f4:	bx	lr
   1a7f8:	moveq	r0, #1
   1a7fc:	movne	r0, #0
   1a800:	bx	lr
   1a804:	clz	r2, r1
   1a808:	rsb	r2, r2, #31
   1a80c:	lsr	r0, r0, r2
   1a810:	bx	lr
   1a814:	cmp	r0, #0
   1a818:	mvnne	r0, #0
   1a81c:	b	1a840 <__assert_fail@plt+0x91b4>
   1a820:	cmp	r1, #0
   1a824:	beq	1a814 <__assert_fail@plt+0x9188>
   1a828:	push	{r0, r1, lr}
   1a82c:	bl	1a634 <__assert_fail@plt+0x8fa8>
   1a830:	pop	{r1, r2, lr}
   1a834:	mul	r3, r2, r0
   1a838:	sub	r1, r1, r3
   1a83c:	bx	lr
   1a840:	push	{r1, lr}
   1a844:	mov	r0, #8
   1a848:	bl	112c0 <raise@plt>
   1a84c:	pop	{r1, pc}
   1a850:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a854:	mov	r7, r0
   1a858:	ldr	r6, [pc, #72]	; 1a8a8 <__assert_fail@plt+0x921c>
   1a85c:	ldr	r5, [pc, #72]	; 1a8ac <__assert_fail@plt+0x9220>
   1a860:	add	r6, pc, r6
   1a864:	add	r5, pc, r5
   1a868:	sub	r6, r6, r5
   1a86c:	mov	r8, r1
   1a870:	mov	r9, r2
   1a874:	bl	11288 <fdopen@plt-0x20>
   1a878:	asrs	r6, r6, #2
   1a87c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a880:	mov	r4, #0
   1a884:	add	r4, r4, #1
   1a888:	ldr	r3, [r5], #4
   1a88c:	mov	r2, r9
   1a890:	mov	r1, r8
   1a894:	mov	r0, r7
   1a898:	blx	r3
   1a89c:	cmp	r6, r4
   1a8a0:	bne	1a884 <__assert_fail@plt+0x91f8>
   1a8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a8a8:	andeq	r2, r1, ip, lsr #10
   1a8ac:	andeq	r2, r1, r4, lsr #10
   1a8b0:	bx	lr
   1a8b4:	ldr	r3, [pc, #12]	; 1a8c8 <__assert_fail@plt+0x923c>
   1a8b8:	mov	r1, #0
   1a8bc:	add	r3, pc, r3
   1a8c0:	ldr	r2, [r3]
   1a8c4:	b	1150c <__cxa_atexit@plt>
   1a8c8:	andeq	r2, r1, r0, asr #14

Disassembly of section .fini:

0001a8cc <.fini>:
   1a8cc:	push	{r3, lr}
   1a8d0:	pop	{r3, pc}
