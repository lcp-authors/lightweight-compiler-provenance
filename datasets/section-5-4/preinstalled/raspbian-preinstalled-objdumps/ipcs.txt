
raspbian-preinstalled/ipcs:     file format elf32-littlearm


Disassembly of section .init:

00011500 <.init>:
   11500:	push	{r3, lr}
   11504:	bl	13cc8 <__assert_fail@plt+0x22f8>
   11508:	pop	{r3, pc}

Disassembly of section .plt:

0001150c <fdopen@plt-0x14>:
   1150c:	push	{lr}		; (str lr, [sp, #-4]!)
   11510:	ldr	lr, [pc, #4]	; 1151c <fdopen@plt-0x4>
   11514:	add	lr, pc, lr
   11518:	ldr	pc, [lr, #8]!
   1151c:	andeq	sl, r1, r8, lsr r9

00011520 <fdopen@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #2360]!	; 0x938

0001152c <calloc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #2352]!	; 0x930

00011538 <raise@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #2344]!	; 0x928

00011544 <strcmp@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #2336]!	; 0x920

00011550 <rewinddir@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #2328]!	; 0x918

0001155c <strtol@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #2320]!	; 0x910

00011568 <getpwuid@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2312]!	; 0x908

00011574 <strcspn@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2304]!	; 0x900

00011580 <read@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2296]!	; 0x8f8

0001158c <getuid@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2288]!	; 0x8f0

00011598 <free@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2280]!	; 0x8e8

000115a4 <fgets@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2272]!	; 0x8e0

000115b0 <nanosleep@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2264]!	; 0x8d8

000115bc <faccessat@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2256]!	; 0x8d0

000115c8 <ferror@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2248]!	; 0x8c8

000115d4 <strndup@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2240]!	; 0x8c0

000115e0 <__openat64_2@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2232]!	; 0x8b8

000115ec <_exit@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2224]!	; 0x8b0

000115f8 <__vsnprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2216]!	; 0x8a8

00011604 <memcpy@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2208]!	; 0x8a0

00011610 <__strtoull_internal@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #106496	; 0x1a000
   11618:	ldr	pc, [ip, #2200]!	; 0x898

0001161c <ctime@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #106496	; 0x1a000
   11624:	ldr	pc, [ip, #2192]!	; 0x890

00011628 <dcgettext@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #106496	; 0x1a000
   11630:	ldr	pc, [ip, #2184]!	; 0x888

00011634 <strdup@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #106496	; 0x1a000
   1163c:	ldr	pc, [ip, #2176]!	; 0x880

00011640 <__stack_chk_fail@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #106496	; 0x1a000
   11648:	ldr	pc, [ip, #2168]!	; 0x878

0001164c <msgctl@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #106496	; 0x1a000
   11654:	ldr	pc, [ip, #2160]!	; 0x870

00011658 <dup@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #106496	; 0x1a000
   11660:	ldr	pc, [ip, #2152]!	; 0x868

00011664 <textdomain@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #106496	; 0x1a000
   1166c:	ldr	pc, [ip, #2144]!	; 0x860

00011670 <err@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #106496	; 0x1a000
   11678:	ldr	pc, [ip, #2136]!	; 0x858

0001167c <geteuid@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #106496	; 0x1a000
   11684:	ldr	pc, [ip, #2128]!	; 0x850

00011688 <vfscanf@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #106496	; 0x1a000
   11690:	ldr	pc, [ip, #2120]!	; 0x848

00011694 <readlink@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #106496	; 0x1a000
   1169c:	ldr	pc, [ip, #2112]!	; 0x840

000116a0 <getegid@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #106496	; 0x1a000
   116a8:	ldr	pc, [ip, #2104]!	; 0x838

000116ac <mkostemp64@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #106496	; 0x1a000
   116b4:	ldr	pc, [ip, #2096]!	; 0x830

000116b8 <__fpending@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #106496	; 0x1a000
   116c0:	ldr	pc, [ip, #2088]!	; 0x828

000116c4 <shmctl@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #106496	; 0x1a000
   116cc:	ldr	pc, [ip, #2080]!	; 0x820

000116d0 <open64@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #106496	; 0x1a000
   116d8:	ldr	pc, [ip, #2072]!	; 0x818

000116dc <__asprintf_chk@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #106496	; 0x1a000
   116e4:	ldr	pc, [ip, #2064]!	; 0x810

000116e8 <getenv@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #106496	; 0x1a000
   116f0:	ldr	pc, [ip, #2056]!	; 0x808

000116f4 <malloc@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #106496	; 0x1a000
   116fc:	ldr	pc, [ip, #2048]!	; 0x800

00011700 <__libc_start_main@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #106496	; 0x1a000
   11708:	ldr	pc, [ip, #2040]!	; 0x7f8

0001170c <readlinkat@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #106496	; 0x1a000
   11714:	ldr	pc, [ip, #2032]!	; 0x7f0

00011718 <__vfprintf_chk@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #106496	; 0x1a000
   11720:	ldr	pc, [ip, #2024]!	; 0x7e8

00011724 <getdtablesize@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #106496	; 0x1a000
   1172c:	ldr	pc, [ip, #2016]!	; 0x7e0

00011730 <__ctype_tolower_loc@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #106496	; 0x1a000
   11738:	ldr	pc, [ip, #2008]!	; 0x7d8

0001173c <__gmon_start__@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #106496	; 0x1a000
   11744:	ldr	pc, [ip, #2000]!	; 0x7d0

00011748 <getopt_long@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #106496	; 0x1a000
   11750:	ldr	pc, [ip, #1992]!	; 0x7c8

00011754 <__ctype_b_loc@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #106496	; 0x1a000
   1175c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011760 <getpid@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #106496	; 0x1a000
   11768:	ldr	pc, [ip, #1976]!	; 0x7b8

0001176c <exit@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #106496	; 0x1a000
   11774:	ldr	pc, [ip, #1968]!	; 0x7b0

00011778 <syscall@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #106496	; 0x1a000
   11780:	ldr	pc, [ip, #1960]!	; 0x7a8

00011784 <feof@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #106496	; 0x1a000
   1178c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011790 <strtoul@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #106496	; 0x1a000
   11798:	ldr	pc, [ip, #1944]!	; 0x798

0001179c <strlen@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #106496	; 0x1a000
   117a4:	ldr	pc, [ip, #1936]!	; 0x790

000117a8 <strchr@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #106496	; 0x1a000
   117b0:	ldr	pc, [ip, #1928]!	; 0x788

000117b4 <warnx@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #106496	; 0x1a000
   117bc:	ldr	pc, [ip, #1920]!	; 0x780

000117c0 <getpagesize@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #106496	; 0x1a000
   117c8:	ldr	pc, [ip, #1912]!	; 0x778

000117cc <__open64_2@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #106496	; 0x1a000
   117d4:	ldr	pc, [ip, #1904]!	; 0x770

000117d8 <__errno_location@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #106496	; 0x1a000
   117e0:	ldr	pc, [ip, #1896]!	; 0x768

000117e4 <__sprintf_chk@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #1888]!	; 0x760

000117f0 <__cxa_atexit@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #1880]!	; 0x758

000117fc <__vasprintf_chk@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #1872]!	; 0x750

00011808 <mkdir@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #1864]!	; 0x748

00011814 <getgid@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #1856]!	; 0x740

00011820 <__sched_cpufree@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #1848]!	; 0x738

0001182c <memset@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #1840]!	; 0x730

00011838 <putchar@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #106496	; 0x1a000
   11840:	ldr	pc, [ip, #1832]!	; 0x728

00011844 <strncpy@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #106496	; 0x1a000
   1184c:	ldr	pc, [ip, #1824]!	; 0x720

00011850 <fscanf@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #106496	; 0x1a000
   11858:	ldr	pc, [ip, #1816]!	; 0x718

0001185c <fgetc@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #106496	; 0x1a000
   11864:	ldr	pc, [ip, #1808]!	; 0x710

00011868 <__printf_chk@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #106496	; 0x1a000
   11870:	ldr	pc, [ip, #1800]!	; 0x708

00011874 <strtod@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #106496	; 0x1a000
   1187c:	ldr	pc, [ip, #1792]!	; 0x700

00011880 <write@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #106496	; 0x1a000
   11888:	ldr	pc, [ip, #1784]!	; 0x6f8

0001188c <__sched_cpualloc@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #106496	; 0x1a000
   11894:	ldr	pc, [ip, #1776]!	; 0x6f0

00011898 <__fprintf_chk@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #106496	; 0x1a000
   118a0:	ldr	pc, [ip, #1768]!	; 0x6e8

000118a4 <access@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #106496	; 0x1a000
   118ac:	ldr	pc, [ip, #1760]!	; 0x6e0

000118b0 <fclose@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #106496	; 0x1a000
   118b8:	ldr	pc, [ip, #1752]!	; 0x6d8

000118bc <fcntl64@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #106496	; 0x1a000
   118c4:	ldr	pc, [ip, #1744]!	; 0x6d0

000118c8 <semctl@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #106496	; 0x1a000
   118d0:	ldr	pc, [ip, #1736]!	; 0x6c8

000118d4 <setlocale@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #106496	; 0x1a000
   118dc:	ldr	pc, [ip, #1728]!	; 0x6c0

000118e0 <errx@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #106496	; 0x1a000
   118e8:	ldr	pc, [ip, #1720]!	; 0x6b8

000118ec <strrchr@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #106496	; 0x1a000
   118f4:	ldr	pc, [ip, #1712]!	; 0x6b0

000118f8 <warn@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #106496	; 0x1a000
   11900:	ldr	pc, [ip, #1704]!	; 0x6a8

00011904 <fputc@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #106496	; 0x1a000
   1190c:	ldr	pc, [ip, #1696]!	; 0x6a0

00011910 <sscanf@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #106496	; 0x1a000
   11918:	ldr	pc, [ip, #1688]!	; 0x698

0001191c <localeconv@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #106496	; 0x1a000
   11924:	ldr	pc, [ip, #1680]!	; 0x690

00011928 <readdir64@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #106496	; 0x1a000
   11930:	ldr	pc, [ip, #1672]!	; 0x688

00011934 <fdopendir@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #106496	; 0x1a000
   1193c:	ldr	pc, [ip, #1664]!	; 0x680

00011940 <__strtoll_internal@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #106496	; 0x1a000
   11948:	ldr	pc, [ip, #1656]!	; 0x678

0001194c <fopen64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #106496	; 0x1a000
   11954:	ldr	pc, [ip, #1648]!	; 0x670

00011958 <bindtextdomain@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #106496	; 0x1a000
   11960:	ldr	pc, [ip, #1640]!	; 0x668

00011964 <umask@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #106496	; 0x1a000
   1196c:	ldr	pc, [ip, #1632]!	; 0x660

00011970 <fputs@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #106496	; 0x1a000
   11978:	ldr	pc, [ip, #1624]!	; 0x658

0001197c <strncmp@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #106496	; 0x1a000
   11984:	ldr	pc, [ip, #1616]!	; 0x650

00011988 <abort@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #106496	; 0x1a000
   11990:	ldr	pc, [ip, #1608]!	; 0x648

00011994 <close@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #106496	; 0x1a000
   1199c:	ldr	pc, [ip, #1600]!	; 0x640

000119a0 <closedir@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #106496	; 0x1a000
   119a8:	ldr	pc, [ip, #1592]!	; 0x638

000119ac <getgrgid@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #106496	; 0x1a000
   119b4:	ldr	pc, [ip, #1584]!	; 0x630

000119b8 <__snprintf_chk@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #106496	; 0x1a000
   119c0:	ldr	pc, [ip, #1576]!	; 0x628

000119c4 <strspn@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #106496	; 0x1a000
   119cc:	ldr	pc, [ip, #1568]!	; 0x620

000119d0 <__assert_fail@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #106496	; 0x1a000
   119d8:	ldr	pc, [ip, #1560]!	; 0x618

Disassembly of section .text:

000119e0 <.text>:
   119e0:	ldr	r3, [pc, #3508]	; 1279c <__assert_fail@plt+0xdcc>
   119e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119e8:	mov	r7, r0
   119ec:	mov	r6, r1
   119f0:	ldr	lr, [pc, #3496]	; 127a0 <__assert_fail@plt+0xdd0>
   119f4:	ldm	r3, {r0, r1, r2, r3}
   119f8:	sub	sp, sp, #156	; 0x9c
   119fc:	add	ip, sp, #132	; 0x84
   11a00:	ldr	lr, [lr]
   11a04:	stmia	ip!, {r0, r1, r2}
   11a08:	lsr	r2, r3, #16
   11a0c:	ldr	r1, [pc, #3472]	; 127a4 <__assert_fail@plt+0xdd4>
   11a10:	mov	r0, #6
   11a14:	mov	r8, #0
   11a18:	strh	r3, [ip], #2
   11a1c:	str	lr, [sp, #148]	; 0x94
   11a20:	strb	r2, [ip]
   11a24:	ldr	r5, [pc, #3452]	; 127a8 <__assert_fail@plt+0xdd8>
   11a28:	bl	118d4 <setlocale@plt>
   11a2c:	ldr	r1, [pc, #3448]	; 127ac <__assert_fail@plt+0xddc>
   11a30:	ldr	r0, [pc, #3448]	; 127b0 <__assert_fail@plt+0xde0>
   11a34:	bl	11958 <bindtextdomain@plt>
   11a38:	mov	fp, r8
   11a3c:	ldr	r0, [pc, #3436]	; 127b0 <__assert_fail@plt+0xde0>
   11a40:	mov	sl, r8
   11a44:	mov	r9, r8
   11a48:	mov	r4, r8
   11a4c:	bl	11664 <textdomain@plt>
   11a50:	ldr	r0, [pc, #3420]	; 127b4 <__assert_fail@plt+0xde4>
   11a54:	bl	1a548 <__assert_fail@plt+0x8b78>
   11a58:	str	r8, [sp, #32]
   11a5c:	str	r8, [sp, #40]	; 0x28
   11a60:	str	r8, [sp, #24]
   11a64:	str	r4, [sp]
   11a68:	mov	r3, r5
   11a6c:	add	r2, sp, #132	; 0x84
   11a70:	mov	r1, r6
   11a74:	mov	r0, r7
   11a78:	bl	11748 <getopt_long@plt>
   11a7c:	cmn	r0, #1
   11a80:	beq	11c10 <__assert_fail@plt+0x240>
   11a84:	sub	r0, r0, #86	; 0x56
   11a88:	cmp	r0, #42	; 0x2a
   11a8c:	ldrls	pc, [pc, r0, lsl #2]
   11a90:	b	12c7c <__assert_fail@plt+0x12ac>
   11a94:	muleq	r1, r8, fp
   11a98:	andeq	r2, r1, ip, ror ip
   11a9c:	andeq	r2, r1, ip, ror ip
   11aa0:	andeq	r2, r1, ip, ror ip
   11aa4:	andeq	r2, r1, ip, ror ip
   11aa8:	andeq	r2, r1, ip, ror ip
   11aac:	andeq	r2, r1, ip, ror ip
   11ab0:	andeq	r2, r1, ip, ror ip
   11ab4:	andeq	r2, r1, ip, ror ip
   11ab8:	andeq	r2, r1, ip, ror ip
   11abc:	andeq	r2, r1, ip, ror ip
   11ac0:	andeq	r1, r1, r8, lsl #23
   11ac4:	andeq	r1, r1, r0, lsl #23
   11ac8:	andeq	r1, r1, r8, ror fp
   11acc:	andeq	r2, r1, ip, ror ip
   11ad0:	andeq	r2, r1, ip, ror ip
   11ad4:	andeq	r2, r1, ip, ror ip
   11ad8:	andeq	r2, r1, ip, ror ip
   11adc:	andeq	r2, r1, r4, lsr #20
   11ae0:	andeq	r1, r1, r4, asr fp
   11ae4:	andeq	r2, r1, ip, ror ip
   11ae8:	andeq	r2, r1, ip, ror ip
   11aec:	andeq	r1, r1, ip, asr #22
   11af0:	andeq	r1, r1, r0, asr #22
   11af4:	andeq	r2, r1, ip, ror ip
   11af8:	andeq	r2, r1, ip, ror ip
   11afc:	andeq	r1, r1, r8, lsl #24
   11b00:	andeq	r1, r1, r0, lsl #24
   11b04:	andeq	r2, r1, ip, ror ip
   11b08:	strdeq	r1, [r1], -r8
   11b0c:	strdeq	r1, [r1], -r0
   11b10:	andeq	r1, r1, r8, ror #23
   11b14:	andeq	r2, r1, ip, ror ip
   11b18:	andeq	r2, r1, ip, ror ip
   11b1c:	andeq	r2, r1, ip, ror ip
   11b20:	andeq	r2, r1, ip, ror ip
   11b24:	andeq	r2, r1, ip, ror ip
   11b28:	andeq	r2, r1, ip, ror ip
   11b2c:	andeq	r2, r1, ip, ror ip
   11b30:	andeq	r2, r1, ip, ror ip
   11b34:	andeq	r2, r1, ip, ror ip
   11b38:	andeq	r2, r1, ip, ror ip
   11b3c:	andeq	r1, r1, r0, ror #23
   11b40:	mov	r3, #1
   11b44:	str	r3, [sp, #24]
   11b48:	b	11a64 <__assert_fail@plt+0x94>
   11b4c:	mov	fp, #1
   11b50:	b	11a64 <__assert_fail@plt+0x94>
   11b54:	ldr	r3, [pc, #3164]	; 127b8 <__assert_fail@plt+0xde8>
   11b58:	mov	r2, #10
   11b5c:	mov	r1, #0
   11b60:	ldr	r0, [r3]
   11b64:	bl	1155c <strtol@plt>
   11b68:	mov	r3, #1
   11b6c:	str	r3, [sp, #32]
   11b70:	str	r0, [sp, #40]	; 0x28
   11b74:	b	11a64 <__assert_fail@plt+0x94>
   11b78:	mov	fp, #3
   11b7c:	b	11a64 <__assert_fail@plt+0x94>
   11b80:	mov	r8, #1
   11b84:	b	11a64 <__assert_fail@plt+0x94>
   11b88:	mov	sl, #1
   11b8c:	str	sl, [sp, #24]
   11b90:	mov	r9, sl
   11b94:	b	11a64 <__assert_fail@plt+0x94>
   11b98:	mov	r2, #5
   11b9c:	ldr	r1, [pc, #3096]	; 127bc <__assert_fail@plt+0xdec>
   11ba0:	mov	r0, #0
   11ba4:	bl	11628 <dcgettext@plt>
   11ba8:	ldr	r2, [pc, #3428]	; 12914 <__assert_fail@plt+0xf44>
   11bac:	ldr	r3, [pc, #3084]	; 127c0 <__assert_fail@plt+0xdf0>
   11bb0:	ldr	r2, [r2]
   11bb4:	mov	r1, r0
   11bb8:	mov	r0, #1
   11bbc:	bl	11868 <__printf_chk@plt>
   11bc0:	ldr	r3, [pc, #3032]	; 127a0 <__assert_fail@plt+0xdd0>
   11bc4:	ldr	r2, [sp, #148]	; 0x94
   11bc8:	mov	r0, #0
   11bcc:	ldr	r3, [r3]
   11bd0:	cmp	r2, r3
   11bd4:	bne	13ab8 <__assert_fail@plt+0x20e8>
   11bd8:	add	sp, sp, #156	; 0x9c
   11bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11be0:	mov	r8, #3
   11be4:	b	11a64 <__assert_fail@plt+0x94>
   11be8:	mov	fp, #2
   11bec:	b	11a64 <__assert_fail@plt+0x94>
   11bf0:	mov	fp, #4
   11bf4:	b	11a64 <__assert_fail@plt+0x94>
   11bf8:	mov	sl, #1
   11bfc:	b	11a64 <__assert_fail@plt+0x94>
   11c00:	mov	r9, #1
   11c04:	b	11a64 <__assert_fail@plt+0x94>
   11c08:	mov	fp, #5
   11c0c:	b	11a64 <__assert_fail@plt+0x94>
   11c10:	ldr	r3, [sp, #32]
   11c14:	cmp	r3, #0
   11c18:	ldr	r3, [sp, #24]
   11c1c:	beq	11e64 <__assert_fail@plt+0x494>
   11c20:	add	r5, r9, r3
   11c24:	add	r5, r5, sl
   11c28:	cmp	r5, #1
   11c2c:	bne	13a9c <__assert_fail@plt+0x20cc>
   11c30:	cmp	r9, #0
   11c34:	bne	134a4 <__assert_fail@plt+0x1ad4>
   11c38:	ldr	r3, [sp, #24]
   11c3c:	cmp	r3, #0
   11c40:	bne	12d44 <__assert_fail@plt+0x1374>
   11c44:	cmp	sl, #0
   11c48:	beq	11bc0 <__assert_fail@plt+0x1f0>
   11c4c:	add	r1, sp, #48	; 0x30
   11c50:	ldr	r0, [sp, #40]	; 0x28
   11c54:	bl	14688 <__assert_fail@plt+0x2cb8>
   11c58:	mov	r2, #5
   11c5c:	cmp	r0, #0
   11c60:	ble	13848 <__assert_fail@plt+0x1e78>
   11c64:	ldr	r1, [pc, #2904]	; 127c4 <__assert_fail@plt+0xdf4>
   11c68:	mov	r0, #0
   11c6c:	bl	11628 <dcgettext@plt>
   11c70:	ldr	r2, [sp, #40]	; 0x28
   11c74:	mov	r1, r0
   11c78:	mov	r0, #1
   11c7c:	bl	11868 <__printf_chk@plt>
   11c80:	mov	r2, #5
   11c84:	ldr	r1, [pc, #2876]	; 127c8 <__assert_fail@plt+0xdf8>
   11c88:	mov	r0, #0
   11c8c:	bl	11628 <dcgettext@plt>
   11c90:	ldr	r2, [sp, #48]	; 0x30
   11c94:	ldr	r3, [r2, #20]
   11c98:	str	r3, [sp, #4]
   11c9c:	ldr	r3, [r2, #16]
   11ca0:	str	r3, [sp]
   11ca4:	ldrd	r2, [r2, #8]
   11ca8:	mov	r1, r0
   11cac:	mov	r0, #1
   11cb0:	bl	11868 <__printf_chk@plt>
   11cb4:	mov	r2, #5
   11cb8:	ldr	r1, [pc, #2828]	; 127cc <__assert_fail@plt+0xdfc>
   11cbc:	mov	r0, #0
   11cc0:	bl	11628 <dcgettext@plt>
   11cc4:	ldr	r3, [sp, #48]	; 0x30
   11cc8:	ldr	r3, [r3, #24]
   11ccc:	mov	r2, r3
   11cd0:	lsl	r3, r3, #23
   11cd4:	lsr	r3, r3, #23
   11cd8:	mov	r1, r0
   11cdc:	mov	r0, #1
   11ce0:	bl	11868 <__printf_chk@plt>
   11ce4:	mov	r2, #5
   11ce8:	ldr	r1, [pc, #2784]	; 127d0 <__assert_fail@plt+0xe00>
   11cec:	mov	r0, #0
   11cf0:	bl	11628 <dcgettext@plt>
   11cf4:	ldr	r3, [sp, #48]	; 0x30
   11cf8:	ldrd	r2, [r3, #48]	; 0x30
   11cfc:	mov	r1, r0
   11d00:	mov	r0, #1
   11d04:	bl	11868 <__printf_chk@plt>
   11d08:	mov	r2, #5
   11d0c:	ldr	r1, [pc, #2752]	; 127d4 <__assert_fail@plt+0xe04>
   11d10:	mov	r0, #0
   11d14:	bl	11628 <dcgettext@plt>
   11d18:	mov	r4, r0
   11d1c:	ldr	r0, [sp, #48]	; 0x30
   11d20:	ldrd	r2, [r0, #40]	; 0x28
   11d24:	orrs	r3, r2, r3
   11d28:	beq	13800 <__assert_fail@plt+0x1e30>
   11d2c:	add	r0, r0, #40	; 0x28
   11d30:	bl	1161c <ctime@plt>
   11d34:	mov	r2, r0
   11d38:	mov	r1, r4
   11d3c:	mov	r0, #1
   11d40:	bl	11868 <__printf_chk@plt>
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #2696]	; 127d8 <__assert_fail@plt+0xe08>
   11d4c:	mov	r0, #0
   11d50:	bl	11628 <dcgettext@plt>
   11d54:	mov	r4, #0
   11d58:	mov	r5, r0
   11d5c:	ldr	r0, [sp, #48]	; 0x30
   11d60:	add	r0, r0, #32
   11d64:	bl	1161c <ctime@plt>
   11d68:	mov	r1, r5
   11d6c:	mov	r2, r0
   11d70:	mov	r0, #1
   11d74:	bl	11868 <__printf_chk@plt>
   11d78:	mov	r2, #5
   11d7c:	ldr	r1, [pc, #2648]	; 127dc <__assert_fail@plt+0xe0c>
   11d80:	mov	r0, r4
   11d84:	bl	11628 <dcgettext@plt>
   11d88:	mov	r2, #5
   11d8c:	ldr	r1, [pc, #2636]	; 127e0 <__assert_fail@plt+0xe10>
   11d90:	mov	r5, r0
   11d94:	mov	r0, r4
   11d98:	bl	11628 <dcgettext@plt>
   11d9c:	mov	r2, #5
   11da0:	ldr	r1, [pc, #2620]	; 127e4 <__assert_fail@plt+0xe14>
   11da4:	mov	r6, r0
   11da8:	mov	r0, r4
   11dac:	bl	11628 <dcgettext@plt>
   11db0:	mov	r2, #5
   11db4:	ldr	r1, [pc, #2604]	; 127e8 <__assert_fail@plt+0xe18>
   11db8:	mov	r8, r0
   11dbc:	mov	r0, r4
   11dc0:	bl	11628 <dcgettext@plt>
   11dc4:	mov	r2, #5
   11dc8:	ldr	r1, [pc, #2588]	; 127ec <__assert_fail@plt+0xe1c>
   11dcc:	mov	r7, r0
   11dd0:	mov	r0, r4
   11dd4:	bl	11628 <dcgettext@plt>
   11dd8:	mov	r2, r5
   11ddc:	str	r8, [sp]
   11de0:	str	r7, [sp, #4]
   11de4:	mov	r3, r6
   11de8:	ldr	r1, [pc, #2560]	; 127f0 <__assert_fail@plt+0xe20>
   11dec:	ldr	r5, [pc, #2560]	; 127f4 <__assert_fail@plt+0xe24>
   11df0:	str	r0, [sp, #8]
   11df4:	mov	r0, #1
   11df8:	bl	11868 <__printf_chk@plt>
   11dfc:	b	11e38 <__assert_fail@plt+0x468>
   11e00:	ldr	ip, [ip, #56]	; 0x38
   11e04:	mov	r2, r4
   11e08:	add	r3, ip, r4, lsl #4
   11e0c:	mov	r1, r5
   11e10:	ldr	r0, [r3, #12]
   11e14:	str	r0, [sp, #8]
   11e18:	ldr	r0, [r3, #8]
   11e1c:	str	r0, [sp, #4]
   11e20:	ldr	r3, [r3, #4]
   11e24:	mov	r0, #1
   11e28:	str	r3, [sp]
   11e2c:	ldr	r3, [ip, r4, lsl #4]
   11e30:	bl	11868 <__printf_chk@plt>
   11e34:	add	r4, r4, #1
   11e38:	ldr	ip, [sp, #48]	; 0x30
   11e3c:	mov	r3, #0
   11e40:	ldrd	r0, [ip, #48]	; 0x30
   11e44:	cmp	r3, r1
   11e48:	cmpeq	r4, r0
   11e4c:	bcc	11e00 <__assert_fail@plt+0x430>
   11e50:	mov	r0, #10
   11e54:	bl	11838 <putchar@plt>
   11e58:	ldr	r0, [sp, #48]	; 0x30
   11e5c:	bl	14924 <__assert_fail@plt+0x2f54>
   11e60:	b	11bc0 <__assert_fail@plt+0x1f0>
   11e64:	orr	r3, r3, sl
   11e68:	orrs	r3, r3, r9
   11e6c:	mov	r0, #10
   11e70:	bne	11ea4 <__assert_fail@plt+0x4d4>
   11e74:	mov	sl, #1
   11e78:	bl	11838 <putchar@plt>
   11e7c:	str	sl, [sp, #24]
   11e80:	sub	r3, fp, #1
   11e84:	cmp	r3, #4
   11e88:	ldrls	pc, [pc, r3, lsl #2]
   11e8c:	b	13b90 <__assert_fail@plt+0x21c0>
   11e90:	andeq	r2, r1, r0, lsr #12
   11e94:	ldrdeq	r2, [r1], -ip
   11e98:	andeq	r2, r1, ip, ror #10
   11e9c:	andeq	r2, r1, ip, lsr r2
   11ea0:	andeq	r2, r1, r0, lsr #1
   11ea4:	bl	11838 <putchar@plt>
   11ea8:	cmp	r9, #0
   11eac:	bne	11e80 <__assert_fail@plt+0x4b0>
   11eb0:	ldr	r3, [sp, #24]
   11eb4:	cmp	r3, #0
   11eb8:	bne	12f00 <__assert_fail@plt+0x1530>
   11ebc:	cmp	sl, #0
   11ec0:	beq	11bc0 <__assert_fail@plt+0x1f0>
   11ec4:	sub	r3, fp, #1
   11ec8:	cmp	r3, #4
   11ecc:	ldrls	pc, [pc, r3, lsl #2]
   11ed0:	b	11ee8 <__assert_fail@plt+0x518>
   11ed4:	muleq	r1, ip, r4
   11ed8:	andeq	r2, r1, r8, lsl r4
   11edc:	andeq	r2, r1, r4, ror #6
   11ee0:	ldrdeq	r2, [r1], -ip
   11ee4:	andeq	r1, r1, r4, lsl #31
   11ee8:	mov	r2, #5
   11eec:	ldr	r1, [pc, #2308]	; 127f8 <__assert_fail@plt+0xe28>
   11ef0:	mov	r0, #0
   11ef4:	bl	11628 <dcgettext@plt>
   11ef8:	mov	r1, r0
   11efc:	mov	r0, #1
   11f00:	bl	11868 <__printf_chk@plt>
   11f04:	mov	r2, #5
   11f08:	ldr	r1, [pc, #2284]	; 127fc <__assert_fail@plt+0xe2c>
   11f0c:	mov	r0, #0
   11f10:	bl	11628 <dcgettext@plt>
   11f14:	mov	r2, #5
   11f18:	ldr	r1, [pc, #2272]	; 12800 <__assert_fail@plt+0xe30>
   11f1c:	mov	r4, r0
   11f20:	mov	r0, #0
   11f24:	bl	11628 <dcgettext@plt>
   11f28:	mov	r2, #5
   11f2c:	ldr	r1, [pc, #2620]	; 12970 <__assert_fail@plt+0xfa0>
   11f30:	mov	r5, r0
   11f34:	mov	r0, #0
   11f38:	bl	11628 <dcgettext@plt>
   11f3c:	mov	r2, #5
   11f40:	ldr	r1, [pc, #2628]	; 1298c <__assert_fail@plt+0xfbc>
   11f44:	mov	r7, r0
   11f48:	mov	r0, #0
   11f4c:	bl	11628 <dcgettext@plt>
   11f50:	mov	r2, #5
   11f54:	ldr	r1, [pc, #2216]	; 12804 <__assert_fail@plt+0xe34>
   11f58:	mov	r6, r0
   11f5c:	mov	r0, #0
   11f60:	bl	11628 <dcgettext@plt>
   11f64:	str	r7, [sp]
   11f68:	str	r6, [sp, #4]
   11f6c:	mov	r3, r5
   11f70:	mov	r2, r4
   11f74:	ldr	r1, [pc, #2164]	; 127f0 <__assert_fail@plt+0xe20>
   11f78:	str	r0, [sp, #8]
   11f7c:	mov	r0, #1
   11f80:	bl	11868 <__printf_chk@plt>
   11f84:	add	r1, sp, #48	; 0x30
   11f88:	mvn	r0, #0
   11f8c:	bl	14688 <__assert_fail@plt+0x2cb8>
   11f90:	cmp	r0, #0
   11f94:	ble	12490 <__assert_fail@plt+0xac0>
   11f98:	ldr	r4, [sp, #48]	; 0x30
   11f9c:	ldr	sl, [pc, #2148]	; 12808 <__assert_fail@plt+0xe38>
   11fa0:	ldr	r7, [pc, #2148]	; 1280c <__assert_fail@plt+0xe3c>
   11fa4:	ldr	r6, [pc, #2624]	; 129ec <__assert_fail@plt+0x101c>
   11fa8:	b	1200c <__assert_fail@plt+0x63c>
   11fac:	cmp	fp, #5
   11fb0:	beq	12008 <__assert_fail@plt+0x638>
   11fb4:	ldr	r2, [r4, #4]
   11fb8:	ldr	r1, [pc, #2452]	; 12954 <__assert_fail@plt+0xf84>
   11fbc:	mov	r0, #1
   11fc0:	bl	11868 <__printf_chk@plt>
   11fc4:	cmp	r5, #0
   11fc8:	mov	r0, #1
   11fcc:	ldrne	r2, [r4]
   11fd0:	ldrne	r1, [pc, #2532]	; 129bc <__assert_fail@plt+0xfec>
   11fd4:	ldreq	r2, [r4]
   11fd8:	ldreq	r1, [pc, #2528]	; 129c0 <__assert_fail@plt+0xff0>
   11fdc:	ldrne	r3, [r5]
   11fe0:	ldreq	r3, [r4, #8]
   11fe4:	bl	11868 <__printf_chk@plt>
   11fe8:	ldr	r2, [r4, #24]
   11fec:	ldrd	r8, [r4, #48]	; 0x30
   11ff0:	ldr	r1, [pc, #2072]	; 12810 <__assert_fail@plt+0xe40>
   11ff4:	lsl	r2, r2, #23
   11ff8:	strd	r8, [sp]
   11ffc:	lsr	r2, r2, #23
   12000:	mov	r0, #1
   12004:	bl	11868 <__printf_chk@plt>
   12008:	ldr	r4, [r4, #60]	; 0x3c
   1200c:	ldr	r3, [r4, #60]	; 0x3c
   12010:	cmp	r3, #0
   12014:	beq	13770 <__assert_fail@plt+0x1da0>
   12018:	cmp	fp, #3
   1201c:	beq	1367c <__assert_fail@plt+0x1cac>
   12020:	ldr	r0, [r4, #8]
   12024:	bl	11568 <getpwuid@plt>
   12028:	cmp	fp, #4
   1202c:	mov	r5, r0
   12030:	bne	11fac <__assert_fail@plt+0x5dc>
   12034:	cmp	r0, #0
   12038:	ldr	r2, [r4]
   1203c:	ldrne	r3, [r0]
   12040:	ldreq	r3, [r4, #8]
   12044:	ldrne	r1, [pc, #2252]	; 12918 <__assert_fail@plt+0xf48>
   12048:	ldreq	r1, [pc, #2252]	; 1291c <__assert_fail@plt+0xf4c>
   1204c:	mov	r0, #1
   12050:	bl	11868 <__printf_chk@plt>
   12054:	ldrd	r2, [r4, #40]	; 0x28
   12058:	orrs	r3, r2, r3
   1205c:	beq	136bc <__assert_fail@plt+0x1cec>
   12060:	add	r0, r4, #40	; 0x28
   12064:	bl	1161c <ctime@plt>
   12068:	mov	r2, r0
   1206c:	mov	r1, sl
   12070:	mov	r0, #1
   12074:	bl	11868 <__printf_chk@plt>
   12078:	ldrd	r2, [r4, #32]
   1207c:	orrs	r3, r2, r3
   12080:	beq	136a4 <__assert_fail@plt+0x1cd4>
   12084:	add	r0, r4, #32
   12088:	bl	1161c <ctime@plt>
   1208c:	mov	r2, r0
   12090:	mov	r1, r7
   12094:	mov	r0, #1
   12098:	bl	11868 <__printf_chk@plt>
   1209c:	b	12008 <__assert_fail@plt+0x638>
   120a0:	mov	r2, #5
   120a4:	ldr	r1, [pc, #1896]	; 12814 <__assert_fail@plt+0xe44>
   120a8:	mov	r0, #0
   120ac:	bl	11628 <dcgettext@plt>
   120b0:	mov	r1, r0
   120b4:	mov	r0, #1
   120b8:	bl	11868 <__printf_chk@plt>
   120bc:	mov	r2, #5
   120c0:	ldr	r1, [pc, #1872]	; 12818 <__assert_fail@plt+0xe48>
   120c4:	mov	r0, #0
   120c8:	bl	11628 <dcgettext@plt>
   120cc:	mov	r2, #5
   120d0:	ldr	r1, [pc, #2200]	; 12970 <__assert_fail@plt+0xfa0>
   120d4:	mov	r4, r0
   120d8:	mov	r0, #0
   120dc:	bl	11628 <dcgettext@plt>
   120e0:	mov	r2, #5
   120e4:	ldr	r1, [pc, #1840]	; 1281c <__assert_fail@plt+0xe4c>
   120e8:	mov	r5, r0
   120ec:	mov	r0, #0
   120f0:	bl	11628 <dcgettext@plt>
   120f4:	mov	r2, #5
   120f8:	ldr	r1, [pc, #1824]	; 12820 <__assert_fail@plt+0xe50>
   120fc:	mov	r6, r0
   12100:	mov	r0, #0
   12104:	bl	11628 <dcgettext@plt>
   12108:	str	r6, [sp]
   1210c:	mov	r3, r5
   12110:	mov	r2, r4
   12114:	ldr	r1, [pc, #2096]	; 1294c <__assert_fail@plt+0xf7c>
   12118:	str	r0, [sp, #4]
   1211c:	mov	r0, #1
   12120:	bl	11868 <__printf_chk@plt>
   12124:	add	r1, sp, #48	; 0x30
   12128:	mvn	r0, #0
   1212c:	bl	14950 <__assert_fail@plt+0x2f80>
   12130:	cmp	r0, #0
   12134:	ble	126d0 <__assert_fail@plt+0xd00>
   12138:	ldr	r4, [sp, #48]	; 0x30
   1213c:	ldr	r5, [pc, #2060]	; 12950 <__assert_fail@plt+0xf80>
   12140:	ldr	r7, [pc, #2172]	; 129c4 <__assert_fail@plt+0xff4>
   12144:	ldr	r6, [pc, #2208]	; 129ec <__assert_fail@plt+0x101c>
   12148:	b	121d8 <__assert_fail@plt+0x808>
   1214c:	ldr	r2, [r4, #4]
   12150:	ldr	r1, [pc, #2044]	; 12954 <__assert_fail@plt+0xf84>
   12154:	mov	r0, #1
   12158:	bl	11868 <__printf_chk@plt>
   1215c:	cmp	r9, #0
   12160:	mov	r0, #1
   12164:	ldrne	r3, [r9]
   12168:	ldreq	r3, [r4, #8]
   1216c:	ldrne	r2, [r4]
   12170:	ldrne	r1, [pc, #2116]	; 129bc <__assert_fail@plt+0xfec>
   12174:	ldreq	r2, [r4]
   12178:	ldreq	r1, [pc, #2112]	; 129c0 <__assert_fail@plt+0xff0>
   1217c:	bl	11868 <__printf_chk@plt>
   12180:	ldr	r2, [r4, #24]
   12184:	ldr	r1, [pc, #1996]	; 12958 <__assert_fail@plt+0xf88>
   12188:	mov	r0, #1
   1218c:	lsl	r2, r2, #23
   12190:	lsr	r2, r2, #23
   12194:	bl	11868 <__printf_chk@plt>
   12198:	cmp	r8, #3
   1219c:	moveq	r3, #6
   121a0:	ldreq	r2, [pc, #1660]	; 12824 <__assert_fail@plt+0xe54>
   121a4:	mvnne	r3, #11
   121a8:	movne	r1, #0
   121ac:	moveq	r1, #0
   121b0:	mov	r0, r8
   121b4:	stmne	sp, {r1, r3}
   121b8:	strdeq	r2, [sp]
   121bc:	ldrd	r2, [r4, #56]	; 0x38
   121c0:	bl	14d58 <__assert_fail@plt+0x3388>
   121c4:	ldrd	r2, [r4, #64]	; 0x40
   121c8:	ldr	r1, [pc, #1624]	; 12828 <__assert_fail@plt+0xe58>
   121cc:	mov	r0, #1
   121d0:	bl	11868 <__printf_chk@plt>
   121d4:	ldr	r4, [r4, #88]	; 0x58
   121d8:	ldr	r3, [r4, #88]	; 0x58
   121dc:	cmp	r3, #0
   121e0:	beq	13764 <__assert_fail@plt+0x1d94>
   121e4:	cmp	fp, #3
   121e8:	beq	13690 <__assert_fail@plt+0x1cc0>
   121ec:	ldr	r0, [r4, #8]
   121f0:	bl	11568 <getpwuid@plt>
   121f4:	cmp	fp, #4
   121f8:	mov	r9, r0
   121fc:	beq	12cb4 <__assert_fail@plt+0x12e4>
   12200:	cmp	fp, #5
   12204:	bne	1214c <__assert_fail@plt+0x77c>
   12208:	cmp	r0, #0
   1220c:	ldr	r2, [r4]
   12210:	ldrne	r3, [r0]
   12214:	ldrne	r1, [pc, #1788]	; 12918 <__assert_fail@plt+0xf48>
   12218:	ldreq	r3, [r4, #8]
   1221c:	ldreq	r1, [pc, #1784]	; 1291c <__assert_fail@plt+0xf4c>
   12220:	mov	r0, #1
   12224:	bl	11868 <__printf_chk@plt>
   12228:	ldrd	r2, [r4, #80]	; 0x50
   1222c:	ldr	r1, [pc, #1528]	; 1282c <__assert_fail@plt+0xe5c>
   12230:	mov	r0, #1
   12234:	bl	11868 <__printf_chk@plt>
   12238:	b	121d4 <__assert_fail@plt+0x804>
   1223c:	mov	r2, #5
   12240:	ldr	r1, [pc, #1512]	; 12830 <__assert_fail@plt+0xe60>
   12244:	mov	r0, #0
   12248:	bl	11628 <dcgettext@plt>
   1224c:	mov	r1, r0
   12250:	mov	r0, #1
   12254:	bl	11868 <__printf_chk@plt>
   12258:	mov	r2, #5
   1225c:	ldr	r1, [pc, #1460]	; 12818 <__assert_fail@plt+0xe48>
   12260:	mov	r0, #0
   12264:	bl	11628 <dcgettext@plt>
   12268:	mov	r2, #5
   1226c:	ldr	r1, [pc, #1788]	; 12970 <__assert_fail@plt+0xfa0>
   12270:	mov	r4, r0
   12274:	mov	r0, #0
   12278:	bl	11628 <dcgettext@plt>
   1227c:	mov	r2, #5
   12280:	ldr	r1, [pc, #1452]	; 12834 <__assert_fail@plt+0xe64>
   12284:	mov	r5, r0
   12288:	mov	r0, #0
   1228c:	bl	11628 <dcgettext@plt>
   12290:	mov	r2, #5
   12294:	ldr	r1, [pc, #1436]	; 12838 <__assert_fail@plt+0xe68>
   12298:	mov	r7, r0
   1229c:	mov	r0, #0
   122a0:	bl	11628 <dcgettext@plt>
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #1420]	; 1283c <__assert_fail@plt+0xe6c>
   122ac:	mov	r6, r0
   122b0:	mov	r0, #0
   122b4:	bl	11628 <dcgettext@plt>
   122b8:	str	r7, [sp]
   122bc:	str	r6, [sp, #4]
   122c0:	mov	r3, r5
   122c4:	mov	r2, r4
   122c8:	ldr	r1, [pc, #1392]	; 12840 <__assert_fail@plt+0xe70>
   122cc:	str	r0, [sp, #8]
   122d0:	mov	r0, #1
   122d4:	bl	11868 <__printf_chk@plt>
   122d8:	b	12124 <__assert_fail@plt+0x754>
   122dc:	mov	r2, #5
   122e0:	ldr	r1, [pc, #1372]	; 12844 <__assert_fail@plt+0xe74>
   122e4:	mov	r0, #0
   122e8:	bl	11628 <dcgettext@plt>
   122ec:	mov	r1, r0
   122f0:	mov	r0, #1
   122f4:	bl	11868 <__printf_chk@plt>
   122f8:	mov	r2, #5
   122fc:	ldr	r1, [pc, #1276]	; 12800 <__assert_fail@plt+0xe30>
   12300:	mov	r0, #0
   12304:	bl	11628 <dcgettext@plt>
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #1628]	; 12970 <__assert_fail@plt+0xfa0>
   12310:	mov	r4, r0
   12314:	mov	r0, #0
   12318:	bl	11628 <dcgettext@plt>
   1231c:	mov	r2, #5
   12320:	ldr	r1, [pc, #1312]	; 12848 <__assert_fail@plt+0xe78>
   12324:	mov	r5, r0
   12328:	mov	r0, #0
   1232c:	bl	11628 <dcgettext@plt>
   12330:	mov	r2, #5
   12334:	ldr	r1, [pc, #1296]	; 1284c <__assert_fail@plt+0xe7c>
   12338:	mov	r6, r0
   1233c:	mov	r0, #0
   12340:	bl	11628 <dcgettext@plt>
   12344:	str	r6, [sp]
   12348:	mov	r3, r5
   1234c:	mov	r2, r4
   12350:	ldr	r1, [pc, #1272]	; 12850 <__assert_fail@plt+0xe80>
   12354:	str	r0, [sp, #4]
   12358:	mov	r0, #1
   1235c:	bl	11868 <__printf_chk@plt>
   12360:	b	11f84 <__assert_fail@plt+0x5b4>
   12364:	mov	r2, #5
   12368:	ldr	r1, [pc, #1252]	; 12854 <__assert_fail@plt+0xe84>
   1236c:	mov	r0, #0
   12370:	bl	11628 <dcgettext@plt>
   12374:	mov	r1, r0
   12378:	mov	r0, #1
   1237c:	bl	11868 <__printf_chk@plt>
   12380:	mov	r2, #5
   12384:	ldr	r1, [pc, #1140]	; 12800 <__assert_fail@plt+0xe30>
   12388:	mov	r0, #0
   1238c:	bl	11628 <dcgettext@plt>
   12390:	mov	r2, #5
   12394:	ldr	r1, [pc, #1520]	; 1298c <__assert_fail@plt+0xfbc>
   12398:	mov	r4, r0
   1239c:	mov	r0, #0
   123a0:	bl	11628 <dcgettext@plt>
   123a4:	mov	r2, #5
   123a8:	ldr	r1, [pc, #1504]	; 12990 <__assert_fail@plt+0xfc0>
   123ac:	mov	r5, r0
   123b0:	mov	r0, #0
   123b4:	bl	11628 <dcgettext@plt>
   123b8:	mov	r2, #5
   123bc:	ldr	r1, [pc, #1488]	; 12994 <__assert_fail@plt+0xfc4>
   123c0:	mov	r8, r0
   123c4:	mov	r0, #0
   123c8:	bl	11628 <dcgettext@plt>
   123cc:	mov	r2, #5
   123d0:	ldr	r1, [pc, #1472]	; 12998 <__assert_fail@plt+0xfc8>
   123d4:	mov	r6, r0
   123d8:	mov	r0, #0
   123dc:	bl	11628 <dcgettext@plt>
   123e0:	mov	r2, #5
   123e4:	ldr	r1, [pc, #1456]	; 1299c <__assert_fail@plt+0xfcc>
   123e8:	mov	r7, r0
   123ec:	mov	r0, #0
   123f0:	bl	11628 <dcgettext@plt>
   123f4:	str	r8, [sp]
   123f8:	strd	r6, [sp, #4]
   123fc:	mov	r3, r5
   12400:	mov	r2, r4
   12404:	ldr	r1, [pc, #1428]	; 129a0 <__assert_fail@plt+0xfd0>
   12408:	str	r0, [sp, #12]
   1240c:	mov	r0, #1
   12410:	bl	11868 <__printf_chk@plt>
   12414:	b	11f84 <__assert_fail@plt+0x5b4>
   12418:	mov	r1, #0
   1241c:	mov	r2, #19
   12420:	mov	r0, r1
   12424:	add	r3, sp, #48	; 0x30
   12428:	bl	118c8 <semctl@plt>
   1242c:	mov	r2, #5
   12430:	cmp	r0, #0
   12434:	blt	138d4 <__assert_fail@plt+0x1f04>
   12438:	ldr	r1, [pc, #1048]	; 12858 <__assert_fail@plt+0xe88>
   1243c:	mov	r0, #0
   12440:	bl	11628 <dcgettext@plt>
   12444:	mov	r1, r0
   12448:	mov	r0, #1
   1244c:	bl	11868 <__printf_chk@plt>
   12450:	mov	r2, #5
   12454:	ldr	r1, [pc, #1024]	; 1285c <__assert_fail@plt+0xe8c>
   12458:	mov	r0, #0
   1245c:	bl	11628 <dcgettext@plt>
   12460:	ldr	r2, [sp, #76]	; 0x4c
   12464:	mov	r1, r0
   12468:	mov	r0, #1
   1246c:	bl	11868 <__printf_chk@plt>
   12470:	mov	r2, #5
   12474:	ldr	r1, [pc, #996]	; 12860 <__assert_fail@plt+0xe90>
   12478:	mov	r0, #0
   1247c:	bl	11628 <dcgettext@plt>
   12480:	ldr	r2, [sp, #84]	; 0x54
   12484:	mov	r1, r0
   12488:	mov	r0, #1
   1248c:	bl	11868 <__printf_chk@plt>
   12490:	mov	r0, #10
   12494:	bl	11838 <putchar@plt>
   12498:	b	11bc0 <__assert_fail@plt+0x1f0>
   1249c:	add	r0, sp, #48	; 0x30
   124a0:	bl	14138 <__assert_fail@plt+0x2768>
   124a4:	mov	r2, #5
   124a8:	subs	r4, r0, #0
   124ac:	ldrne	r1, [pc, #944]	; 12864 <__assert_fail@plt+0xe94>
   124b0:	bne	138d8 <__assert_fail@plt+0x1f08>
   124b4:	ldr	r1, [pc, #940]	; 12868 <__assert_fail@plt+0xe98>
   124b8:	bl	11628 <dcgettext@plt>
   124bc:	mov	r1, r0
   124c0:	mov	r0, #1
   124c4:	bl	11868 <__printf_chk@plt>
   124c8:	mov	r2, #5
   124cc:	ldr	r1, [pc, #920]	; 1286c <__assert_fail@plt+0xe9c>
   124d0:	mov	r0, r4
   124d4:	bl	11628 <dcgettext@plt>
   124d8:	ldr	r2, [sp, #80]	; 0x50
   124dc:	mov	r1, r0
   124e0:	mov	r0, #1
   124e4:	bl	11868 <__printf_chk@plt>
   124e8:	mov	r2, #5
   124ec:	ldr	r1, [pc, #892]	; 12870 <__assert_fail@plt+0xea0>
   124f0:	mov	r0, r4
   124f4:	bl	11628 <dcgettext@plt>
   124f8:	ldr	r2, [sp, #84]	; 0x54
   124fc:	mov	r1, r0
   12500:	mov	r0, #1
   12504:	bl	11868 <__printf_chk@plt>
   12508:	mov	r2, #5
   1250c:	ldr	r1, [pc, #864]	; 12874 <__assert_fail@plt+0xea4>
   12510:	mov	r0, r4
   12514:	bl	11628 <dcgettext@plt>
   12518:	ldr	r2, [sp, #88]	; 0x58
   1251c:	mov	r1, r0
   12520:	mov	r0, #1
   12524:	bl	11868 <__printf_chk@plt>
   12528:	mov	r2, #5
   1252c:	ldr	r1, [pc, #836]	; 12878 <__assert_fail@plt+0xea8>
   12530:	mov	r0, r4
   12534:	bl	11628 <dcgettext@plt>
   12538:	ldr	r2, [sp, #92]	; 0x5c
   1253c:	mov	r1, r0
   12540:	mov	r0, #1
   12544:	bl	11868 <__printf_chk@plt>
   12548:	mov	r0, r4
   1254c:	mov	r2, #5
   12550:	ldr	r1, [pc, #804]	; 1287c <__assert_fail@plt+0xeac>
   12554:	bl	11628 <dcgettext@plt>
   12558:	ldr	r2, [sp, #96]	; 0x60
   1255c:	mov	r1, r0
   12560:	mov	r0, #1
   12564:	bl	11868 <__printf_chk@plt>
   12568:	b	12490 <__assert_fail@plt+0xac0>
   1256c:	mov	r2, #5
   12570:	ldr	r1, [pc, #776]	; 12880 <__assert_fail@plt+0xeb0>
   12574:	mov	r0, #0
   12578:	bl	11628 <dcgettext@plt>
   1257c:	mov	r1, r0
   12580:	mov	r0, #1
   12584:	bl	11868 <__printf_chk@plt>
   12588:	mov	r2, #5
   1258c:	ldr	r1, [pc, #644]	; 12818 <__assert_fail@plt+0xe48>
   12590:	mov	r0, #0
   12594:	bl	11628 <dcgettext@plt>
   12598:	mov	r2, #5
   1259c:	ldr	r1, [pc, #1000]	; 1298c <__assert_fail@plt+0xfbc>
   125a0:	mov	r9, r0
   125a4:	mov	r0, #0
   125a8:	bl	11628 <dcgettext@plt>
   125ac:	mov	r2, #5
   125b0:	ldr	r1, [pc, #984]	; 12990 <__assert_fail@plt+0xfc0>
   125b4:	mov	r4, r0
   125b8:	mov	r0, #0
   125bc:	bl	11628 <dcgettext@plt>
   125c0:	mov	r2, #5
   125c4:	ldr	r1, [pc, #968]	; 12994 <__assert_fail@plt+0xfc4>
   125c8:	mov	r7, r0
   125cc:	mov	r0, #0
   125d0:	bl	11628 <dcgettext@plt>
   125d4:	mov	r2, #5
   125d8:	ldr	r1, [pc, #952]	; 12998 <__assert_fail@plt+0xfc8>
   125dc:	mov	r5, r0
   125e0:	mov	r0, #0
   125e4:	bl	11628 <dcgettext@plt>
   125e8:	mov	r2, #5
   125ec:	ldr	r1, [pc, #936]	; 1299c <__assert_fail@plt+0xfcc>
   125f0:	mov	r6, r0
   125f4:	mov	r0, #0
   125f8:	bl	11628 <dcgettext@plt>
   125fc:	str	r7, [sp]
   12600:	stmib	sp, {r5, r6}
   12604:	mov	r3, r4
   12608:	mov	r2, r9
   1260c:	ldr	r1, [pc, #908]	; 129a0 <__assert_fail@plt+0xfd0>
   12610:	str	r0, [sp, #12]
   12614:	mov	r0, #1
   12618:	bl	11868 <__printf_chk@plt>
   1261c:	b	12124 <__assert_fail@plt+0x754>
   12620:	add	r0, sp, #48	; 0x30
   12624:	bl	14054 <__assert_fail@plt+0x2684>
   12628:	mov	r2, #5
   1262c:	subs	r4, r0, #0
   12630:	ldrne	r1, [pc, #588]	; 12884 <__assert_fail@plt+0xeb4>
   12634:	bne	138f4 <__assert_fail@plt+0x1f24>
   12638:	ldr	r1, [pc, #584]	; 12888 <__assert_fail@plt+0xeb8>
   1263c:	bl	11628 <dcgettext@plt>
   12640:	ldr	r6, [pc, #980]	; 12a1c <__assert_fail@plt+0x104c>
   12644:	mov	r1, r0
   12648:	mov	r0, #1
   1264c:	bl	11868 <__printf_chk@plt>
   12650:	mov	r2, #5
   12654:	ldr	r1, [pc, #560]	; 1288c <__assert_fail@plt+0xebc>
   12658:	mov	r0, r4
   1265c:	bl	11628 <dcgettext@plt>
   12660:	ldr	r2, [sp, #100]	; 0x64
   12664:	mov	r1, r0
   12668:	mov	r0, #1
   1266c:	bl	11868 <__printf_chk@plt>
   12670:	cmp	r8, #0
   12674:	mov	r2, #5
   12678:	ldr	r1, [pc, #528]	; 12890 <__assert_fail@plt+0xec0>
   1267c:	mov	r0, r4
   12680:	movne	r5, r8
   12684:	moveq	r5, #1
   12688:	bl	11628 <dcgettext@plt>
   1268c:	ldrd	r2, [sp, #104]	; 0x68
   12690:	str	r4, [sp, #4]
   12694:	str	r6, [sp]
   12698:	mov	r1, r0
   1269c:	mov	r0, r5
   126a0:	bl	14d58 <__assert_fail@plt+0x3388>
   126a4:	mov	r2, #5
   126a8:	ldr	r1, [pc, #484]	; 12894 <__assert_fail@plt+0xec4>
   126ac:	mov	r0, r4
   126b0:	bl	11628 <dcgettext@plt>
   126b4:	ldr	r2, [sp, #112]	; 0x70
   126b8:	str	r6, [sp]
   126bc:	str	r4, [sp, #4]
   126c0:	asr	r3, r2, #31
   126c4:	mov	r1, r0
   126c8:	mov	r0, r5
   126cc:	bl	14d58 <__assert_fail@plt+0x3388>
   126d0:	mov	r0, #10
   126d4:	bl	11838 <putchar@plt>
   126d8:	b	11eb0 <__assert_fail@plt+0x4e0>
   126dc:	add	r2, sp, #48	; 0x30
   126e0:	mov	r1, #12
   126e4:	mov	r0, #0
   126e8:	bl	1164c <msgctl@plt>
   126ec:	mov	r2, #5
   126f0:	cmp	r0, #0
   126f4:	blt	138f0 <__assert_fail@plt+0x1f20>
   126f8:	ldr	r1, [pc, #408]	; 12898 <__assert_fail@plt+0xec8>
   126fc:	mov	r0, #0
   12700:	bl	11628 <dcgettext@plt>
   12704:	mov	r1, r0
   12708:	mov	r0, #1
   1270c:	bl	11868 <__printf_chk@plt>
   12710:	mov	r2, #5
   12714:	ldr	r1, [pc, #384]	; 1289c <__assert_fail@plt+0xecc>
   12718:	mov	r0, #0
   1271c:	bl	11628 <dcgettext@plt>
   12720:	ldr	r2, [sp, #48]	; 0x30
   12724:	mov	r1, r0
   12728:	mov	r0, #1
   1272c:	bl	11868 <__printf_chk@plt>
   12730:	mov	r2, #5
   12734:	ldr	r1, [pc, #356]	; 128a0 <__assert_fail@plt+0xed0>
   12738:	mov	r0, #0
   1273c:	bl	11628 <dcgettext@plt>
   12740:	ldr	r2, [sp, #52]	; 0x34
   12744:	mov	r1, r0
   12748:	mov	r0, #1
   1274c:	bl	11868 <__printf_chk@plt>
   12750:	mov	r2, #5
   12754:	ldr	r1, [pc, #328]	; 128a4 <__assert_fail@plt+0xed4>
   12758:	mov	r0, #0
   1275c:	bl	11628 <dcgettext@plt>
   12760:	ldr	r4, [sp, #72]	; 0x48
   12764:	cmp	r8, #0
   12768:	asr	r5, r4, #31
   1276c:	mov	r6, r0
   12770:	ldrne	r0, [pc, #676]	; 12a1c <__assert_fail@plt+0x104c>
   12774:	beq	13928 <__assert_fail@plt+0x1f58>
   12778:	mov	ip, #0
   1277c:	str	r0, [sp]
   12780:	mov	r2, r4
   12784:	mov	r3, r5
   12788:	mov	r1, r6
   1278c:	str	ip, [sp, #4]
   12790:	mov	r0, r8
   12794:	bl	14d58 <__assert_fail@plt+0x3388>
   12798:	b	126d0 <__assert_fail@plt+0xd00>
   1279c:	muleq	r1, r0, r5
   127a0:	andeq	fp, r2, r0, asr sp
   127a4:	andeq	sl, r1, r8, lsl pc
   127a8:	andeq	sl, r1, ip, ror #10
   127ac:	andeq	sl, r1, r8, ror #12
   127b0:	andeq	sl, r1, ip, ror r6
   127b4:	andeq	r3, r1, ip, ror sp
   127b8:	andeq	ip, r2, r0, lsr #32
   127bc:	ldrdeq	sl, [r1], -r8
   127c0:	andeq	sl, r1, r4, ror #19
   127c4:	andeq	sl, r1, r8, ror #23
   127c8:	andeq	sl, r1, r4, lsl #24
   127cc:	andeq	sl, r1, r8, lsr #24
   127d0:	andeq	sl, r1, r4, asr #24
   127d4:	andeq	sl, r1, r4, asr ip
   127d8:	andeq	sl, r1, r8, ror #24
   127dc:	andeq	sl, r1, ip, ror ip
   127e0:	andeq	sl, r1, r4, lsl #25
   127e4:	andeq	sl, r1, ip, lsl #25
   127e8:	muleq	r1, r4, ip
   127ec:	muleq	r1, ip, ip
   127f0:	andeq	sl, r1, r0, lsr #25
   127f4:	andeq	sl, r1, r0, asr #25
   127f8:	andeq	fp, r1, r4, lsl r5
   127fc:	andeq	sl, r1, ip, asr #30
   12800:	andeq	fp, r1, r0, lsr #9
   12804:	andeq	fp, r1, r8, lsr r5
   12808:	andeq	fp, r1, r0, asr #10
   1280c:	andeq	fp, r1, ip, asr #10
   12810:	andeq	fp, r1, r8, asr r5
   12814:	strdeq	sl, [r1], -r4
   12818:	andeq	sl, r1, ip, lsr #28
   1281c:	andeq	sl, r1, ip, lsl pc
   12820:	andeq	sl, r1, r4, lsr #30
   12824:	andeq	fp, r1, r0
   12828:	andeq	fp, r1, r8
   1282c:	andeq	sl, r1, r4, asr #31
   12830:	andeq	sl, r1, ip, ror lr
   12834:			; <UNDEFINED> instruction: 0x0001aebc
   12838:	andeq	sl, r1, r4, asr #29
   1283c:	andeq	sl, r1, ip, asr #29
   12840:	ldrdeq	sl, [r1], -r4
   12844:	andeq	fp, r1, r8, lsr #9
   12848:	ldrdeq	fp, [r1], -ip
   1284c:	andeq	fp, r1, r4, ror #9
   12850:	strdeq	fp, [r1], -r4
   12854:	andeq	fp, r1, ip, ror #8
   12858:	andeq	fp, r1, r8, lsl r4
   1285c:	andeq	fp, r1, ip, lsr r4
   12860:	andeq	fp, r1, r0, asr r4
   12864:	andeq	fp, r1, ip, lsl #6
   12868:	andeq	fp, r1, r0, lsr r3
   1286c:	andeq	fp, r1, r4, asr r3
   12870:	andeq	fp, r1, r0, ror r3
   12874:	muleq	r1, r0, r3
   12878:			; <UNDEFINED> instruction: 0x0001b3b4
   1287c:	ldrdeq	fp, [r1], -r4
   12880:	strdeq	sl, [r1], -ip
   12884:	andeq	sl, r1, r0, ror #25
   12888:	andeq	sl, r1, r0, lsl #26
   1288c:	andeq	sl, r1, r4, lsr #26
   12890:	andeq	sl, r1, r4, asr #26
   12894:	andeq	sl, r1, r8, asr sp
   12898:	andeq	sl, r1, r0, lsr #27
   1289c:	andeq	sl, r1, r4, asr #27
   128a0:	ldrdeq	sl, [r1], -ip
   128a4:	strdeq	sl, [r1], -r0
   128a8:	andeq	sl, r1, r8, lsl #13
   128ac:	muleq	r1, r4, r6
   128b0:	ldrdeq	sl, [r1], -r8
   128b4:	andeq	sl, r1, r0, lsl #14
   128b8:	andeq	sl, r1, ip, lsl #14
   128bc:	andeq	sl, r1, ip, asr #14
   128c0:	andeq	sl, r1, r0, ror #14
   128c4:	muleq	r1, r0, r7
   128c8:	andeq	sl, r1, ip, ror r7
   128cc:	andeq	sl, r1, r0, ror r7
   128d0:	andeq	sl, r1, r0, lsr #15
   128d4:			; <UNDEFINED> instruction: 0x0001a7b4
   128d8:	andeq	sl, r1, r0, ror #15
   128dc:	andeq	sl, r1, r4, lsl #16
   128e0:	andeq	sl, r1, r4, lsr #16
   128e4:	andeq	sl, r1, r8, asr #16
   128e8:	andeq	sl, r1, ip, asr r8
   128ec:	muleq	r1, r8, r8
   128f0:	ldrdeq	sl, [r1], -r4
   128f4:	andeq	sl, r1, r0, lsl #18
   128f8:	andeq	sl, r1, ip, lsr #18
   128fc:	andeq	sl, r1, r4, asr r9
   12900:	andeq	sl, r1, ip, lsl #19
   12904:			; <UNDEFINED> instruction: 0x0001a9b4
   12908:	ldrdeq	sl, [r1], -r0
   1290c:	andeq	ip, r2, r8, lsl r0
   12910:	strdeq	sl, [r1], -r8
   12914:	andeq	ip, r2, r0, lsl r0
   12918:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1291c:	andeq	sl, r1, r0, lsr #31
   12920:	andeq	sl, r1, r4, lsr fp
   12924:	andeq	sl, r1, r8, asr fp
   12928:	andeq	sl, r1, r8, ror fp
   1292c:	muleq	r1, r4, fp
   12930:	muleq	r1, ip, fp
   12934:	andeq	sl, r1, r4, lsr #23
   12938:	andeq	sl, r1, r0, asr #23
   1293c:	ldrdeq	sl, [r1], -r4
   12940:	andeq	fp, r1, r8, lsr #4
   12944:	andeq	fp, r1, ip, asr r2
   12948:	andeq	fp, r1, r4, ror #4
   1294c:	andeq	sl, r1, r0, ror #28
   12950:	andeq	sl, r1, ip, lsr #31
   12954:	ldrdeq	sl, [r1], -r4
   12958:	strdeq	sl, [r1], -r8
   1295c:	andeq	fp, r1, r0, ror #5
   12960:	andeq	fp, r1, r8, lsr #18
   12964:	strdeq	fp, [r1], -r8
   12968:	ldrdeq	fp, [r1], -r0
   1296c:	andeq	fp, r1, ip, lsr #3
   12970:			; <UNDEFINED> instruction: 0x0001aeb4
   12974:	andeq	fp, r1, r8, ror #3
   12978:	strdeq	fp, [r1], -r4
   1297c:	andeq	fp, r1, r0, lsl #4
   12980:	andeq	fp, r1, r8, lsl #4
   12984:	andeq	fp, r1, ip, ror #2
   12988:	andeq	fp, r1, r4, lsr #3
   1298c:	andeq	sl, r1, r4, lsr lr
   12990:	andeq	sl, r1, ip, lsr lr
   12994:	andeq	sl, r1, r4, asr #28
   12998:	andeq	sl, r1, ip, asr #28
   1299c:	andeq	sl, r1, r0, asr lr
   129a0:	andeq	sl, r1, r4, asr lr
   129a4:	andeq	fp, r1, r0, asr #1
   129a8:	andeq	fp, r1, r8, ror #1
   129ac:	andeq	fp, r1, r4, lsl r0
   129b0:	andeq	fp, r1, ip, lsr r0
   129b4:	andeq	fp, r1, r4, rrx
   129b8:	andeq	fp, r1, r4, lsl #1
   129bc:	ldrdeq	sl, [r1], -ip
   129c0:	andeq	sl, r1, ip, ror #31
   129c4:			; <UNDEFINED> instruction: 0x0001afb8
   129c8:	andeq	sl, r1, r8, ror #20
   129cc:	andeq	sl, r1, r4, lsl #21
   129d0:	andeq	sl, r1, r0, asr #21
   129d4:	andeq	sl, r1, r8, asr #21
   129d8:	ldrdeq	sl, [r1], -r0
   129dc:	andeq	sl, r1, ip, ror #21
   129e0:	andeq	sl, r1, r8, lsl #22
   129e4:	andeq	sl, r1, ip, lsl fp
   129e8:	andeq	ip, r2, ip, lsl r0
   129ec:	andeq	sl, r1, r0, lsl #22
   129f0:	strdeq	fp, [r1], -r0
   129f4:	andeq	fp, r1, r8, ror #5
   129f8:	andeq	sl, r1, r8, asr sl
   129fc:	andeq	sl, r1, ip, lsr #21
   12a00:			; <UNDEFINED> instruction: 0x0001aab4
   12a04:			; <UNDEFINED> instruction: 0x0001aab8
   12a08:	strdeq	fp, [r1], -r0
   12a0c:	andeq	sl, r1, r4, ror sp
   12a10:	muleq	r1, r4, r0
   12a14:	andeq	sl, r1, ip, lsr #19
   12a18:	andeq	fp, r1, r0, lsl #11
   12a1c:	andeq	sl, r1, r4, asr #16
   12a20:	andeq	fp, r1, r8, ror #10
   12a24:	ldr	r3, [pc, #-68]	; 129e8 <__assert_fail@plt+0x1018>
   12a28:	mov	r2, #5
   12a2c:	ldr	r1, [pc, #-396]	; 128a8 <__assert_fail@plt+0xed8>
   12a30:	ldr	r4, [r3]
   12a34:	mov	r0, #0
   12a38:	bl	11628 <dcgettext@plt>
   12a3c:	mov	r1, r4
   12a40:	bl	11970 <fputs@plt>
   12a44:	mov	r2, #5
   12a48:	ldr	r1, [pc, #-420]	; 128ac <__assert_fail@plt+0xedc>
   12a4c:	mov	r0, #0
   12a50:	bl	11628 <dcgettext@plt>
   12a54:	ldr	r3, [pc, #-328]	; 12914 <__assert_fail@plt+0xf44>
   12a58:	mov	r1, #1
   12a5c:	ldr	r3, [r3]
   12a60:	mov	r2, r0
   12a64:	mov	r0, r4
   12a68:	bl	11898 <__fprintf_chk@plt>
   12a6c:	mov	r1, r4
   12a70:	mov	r0, #10
   12a74:	bl	11904 <fputc@plt>
   12a78:	mov	r2, #5
   12a7c:	ldr	r1, [pc, #-468]	; 128b0 <__assert_fail@plt+0xee0>
   12a80:	mov	r0, #0
   12a84:	bl	11628 <dcgettext@plt>
   12a88:	mov	r1, r4
   12a8c:	bl	11970 <fputs@plt>
   12a90:	mov	r2, #5
   12a94:	ldr	r1, [pc, #-488]	; 128b4 <__assert_fail@plt+0xee4>
   12a98:	mov	r0, #0
   12a9c:	bl	11628 <dcgettext@plt>
   12aa0:	mov	r1, r4
   12aa4:	bl	11970 <fputs@plt>
   12aa8:	mov	r2, #5
   12aac:	ldr	r1, [pc, #-508]	; 128b8 <__assert_fail@plt+0xee8>
   12ab0:	mov	r0, #0
   12ab4:	bl	11628 <dcgettext@plt>
   12ab8:	mov	r1, r4
   12abc:	bl	11970 <fputs@plt>
   12ac0:	mov	r2, #5
   12ac4:	ldr	r1, [pc, #-528]	; 128bc <__assert_fail@plt+0xeec>
   12ac8:	mov	r0, #0
   12acc:	bl	11628 <dcgettext@plt>
   12ad0:	mov	r2, #5
   12ad4:	ldr	r1, [pc, #-540]	; 128c0 <__assert_fail@plt+0xef0>
   12ad8:	mov	r5, r0
   12adc:	mov	r0, #0
   12ae0:	bl	11628 <dcgettext@plt>
   12ae4:	ldr	r2, [pc, #-552]	; 128c4 <__assert_fail@plt+0xef4>
   12ae8:	mov	r3, r5
   12aec:	str	r2, [sp]
   12af0:	ldr	r1, [pc, #-560]	; 128c8 <__assert_fail@plt+0xef8>
   12af4:	ldr	r2, [pc, #-560]	; 128cc <__assert_fail@plt+0xefc>
   12af8:	str	r0, [sp, #4]
   12afc:	mov	r0, #1
   12b00:	bl	11868 <__printf_chk@plt>
   12b04:	mov	r1, r4
   12b08:	mov	r0, #10
   12b0c:	bl	11904 <fputc@plt>
   12b10:	mov	r2, #5
   12b14:	ldr	r1, [pc, #-588]	; 128d0 <__assert_fail@plt+0xf00>
   12b18:	mov	r0, #0
   12b1c:	bl	11628 <dcgettext@plt>
   12b20:	mov	r1, r4
   12b24:	bl	11970 <fputs@plt>
   12b28:	mov	r2, #5
   12b2c:	ldr	r1, [pc, #-608]	; 128d4 <__assert_fail@plt+0xf04>
   12b30:	mov	r0, #0
   12b34:	bl	11628 <dcgettext@plt>
   12b38:	mov	r1, r4
   12b3c:	bl	11970 <fputs@plt>
   12b40:	mov	r2, #5
   12b44:	ldr	r1, [pc, #-628]	; 128d8 <__assert_fail@plt+0xf08>
   12b48:	mov	r0, #0
   12b4c:	bl	11628 <dcgettext@plt>
   12b50:	mov	r1, r4
   12b54:	bl	11970 <fputs@plt>
   12b58:	mov	r2, #5
   12b5c:	ldr	r1, [pc, #-648]	; 128dc <__assert_fail@plt+0xf0c>
   12b60:	mov	r0, #0
   12b64:	bl	11628 <dcgettext@plt>
   12b68:	mov	r1, r4
   12b6c:	bl	11970 <fputs@plt>
   12b70:	mov	r2, #5
   12b74:	ldr	r1, [pc, #-668]	; 128e0 <__assert_fail@plt+0xf10>
   12b78:	mov	r0, #0
   12b7c:	bl	11628 <dcgettext@plt>
   12b80:	mov	r1, r4
   12b84:	bl	11970 <fputs@plt>
   12b88:	mov	r1, r4
   12b8c:	mov	r0, #10
   12b90:	bl	11904 <fputc@plt>
   12b94:	mov	r2, #5
   12b98:	ldr	r1, [pc, #-700]	; 128e4 <__assert_fail@plt+0xf14>
   12b9c:	mov	r0, #0
   12ba0:	bl	11628 <dcgettext@plt>
   12ba4:	mov	r1, r4
   12ba8:	bl	11970 <fputs@plt>
   12bac:	mov	r2, #5
   12bb0:	ldr	r1, [pc, #-720]	; 128e8 <__assert_fail@plt+0xf18>
   12bb4:	mov	r0, #0
   12bb8:	bl	11628 <dcgettext@plt>
   12bbc:	mov	r1, r4
   12bc0:	bl	11970 <fputs@plt>
   12bc4:	mov	r2, #5
   12bc8:	ldr	r1, [pc, #-740]	; 128ec <__assert_fail@plt+0xf1c>
   12bcc:	mov	r0, #0
   12bd0:	bl	11628 <dcgettext@plt>
   12bd4:	mov	r1, r4
   12bd8:	bl	11970 <fputs@plt>
   12bdc:	mov	r2, #5
   12be0:	ldr	r1, [pc, #-760]	; 128f0 <__assert_fail@plt+0xf20>
   12be4:	mov	r0, #0
   12be8:	bl	11628 <dcgettext@plt>
   12bec:	mov	r1, r4
   12bf0:	bl	11970 <fputs@plt>
   12bf4:	mov	r2, #5
   12bf8:	ldr	r1, [pc, #-780]	; 128f4 <__assert_fail@plt+0xf24>
   12bfc:	mov	r0, #0
   12c00:	bl	11628 <dcgettext@plt>
   12c04:	mov	r1, r4
   12c08:	bl	11970 <fputs@plt>
   12c0c:	mov	r2, #5
   12c10:	ldr	r1, [pc, #-800]	; 128f8 <__assert_fail@plt+0xf28>
   12c14:	mov	r0, #0
   12c18:	bl	11628 <dcgettext@plt>
   12c1c:	mov	r1, r4
   12c20:	bl	11970 <fputs@plt>
   12c24:	mov	r2, #5
   12c28:	ldr	r1, [pc, #-820]	; 128fc <__assert_fail@plt+0xf2c>
   12c2c:	mov	r0, #0
   12c30:	bl	11628 <dcgettext@plt>
   12c34:	mov	r1, r4
   12c38:	bl	11970 <fputs@plt>
   12c3c:	mov	r2, #5
   12c40:	ldr	r1, [pc, #-840]	; 12900 <__assert_fail@plt+0xf30>
   12c44:	mov	r0, #0
   12c48:	bl	11628 <dcgettext@plt>
   12c4c:	mov	r1, r4
   12c50:	bl	11970 <fputs@plt>
   12c54:	mov	r2, #5
   12c58:	ldr	r1, [pc, #-860]	; 12904 <__assert_fail@plt+0xf34>
   12c5c:	mov	r0, #0
   12c60:	bl	11628 <dcgettext@plt>
   12c64:	ldr	r2, [pc, #-868]	; 12908 <__assert_fail@plt+0xf38>
   12c68:	mov	r1, r0
   12c6c:	mov	r0, #1
   12c70:	bl	11868 <__printf_chk@plt>
   12c74:	mov	r0, #0
   12c78:	bl	1176c <exit@plt>
   12c7c:	ldr	r3, [pc, #-888]	; 1290c <__assert_fail@plt+0xf3c>
   12c80:	mov	r2, #5
   12c84:	ldr	r1, [pc, #-892]	; 12910 <__assert_fail@plt+0xf40>
   12c88:	mov	r0, #0
   12c8c:	ldr	r4, [r3]
   12c90:	bl	11628 <dcgettext@plt>
   12c94:	ldr	r3, [pc, #-904]	; 12914 <__assert_fail@plt+0xf44>
   12c98:	mov	r1, #1
   12c9c:	ldr	r3, [r3]
   12ca0:	mov	r2, r0
   12ca4:	mov	r0, r4
   12ca8:	bl	11898 <__fprintf_chk@plt>
   12cac:	mov	r0, #1
   12cb0:	bl	1176c <exit@plt>
   12cb4:	cmp	r0, #0
   12cb8:	ldr	r2, [r4]
   12cbc:	ldrne	r3, [r0]
   12cc0:	ldreq	r3, [r4, #8]
   12cc4:	ldrne	r1, [pc, #-948]	; 12918 <__assert_fail@plt+0xf48>
   12cc8:	ldreq	r1, [pc, #-948]	; 1291c <__assert_fail@plt+0xf4c>
   12ccc:	mov	r0, #1
   12cd0:	bl	11868 <__printf_chk@plt>
   12cd4:	ldrd	r2, [r4, #32]
   12cd8:	orrs	r3, r2, r3
   12cdc:	beq	136ec <__assert_fail@plt+0x1d1c>
   12ce0:	add	r0, r4, #32
   12ce4:	bl	1161c <ctime@plt>
   12ce8:	add	r2, r0, #4
   12cec:	mov	r1, r5
   12cf0:	mov	r0, #1
   12cf4:	bl	11868 <__printf_chk@plt>
   12cf8:	ldrd	r2, [r4, #40]	; 0x28
   12cfc:	orrs	r3, r2, r3
   12d00:	beq	136d4 <__assert_fail@plt+0x1d04>
   12d04:	add	r0, r4, #40	; 0x28
   12d08:	bl	1161c <ctime@plt>
   12d0c:	add	r2, r0, #4
   12d10:	mov	r1, r5
   12d14:	mov	r0, #1
   12d18:	bl	11868 <__printf_chk@plt>
   12d1c:	ldrd	r2, [r4, #48]	; 0x30
   12d20:	orrs	r3, r2, r3
   12d24:	beq	13704 <__assert_fail@plt+0x1d34>
   12d28:	add	r0, r4, #48	; 0x30
   12d2c:	bl	1161c <ctime@plt>
   12d30:	add	r2, r0, #4
   12d34:	mov	r1, r7
   12d38:	mov	r0, #1
   12d3c:	bl	11868 <__printf_chk@plt>
   12d40:	b	121d4 <__assert_fail@plt+0x804>
   12d44:	add	r1, sp, #48	; 0x30
   12d48:	ldr	r0, [sp, #40]	; 0x28
   12d4c:	bl	14328 <__assert_fail@plt+0x2958>
   12d50:	mov	r2, #5
   12d54:	cmp	r0, #0
   12d58:	ble	13860 <__assert_fail@plt+0x1e90>
   12d5c:	ldr	r1, [pc, #-1092]	; 12920 <__assert_fail@plt+0xf50>
   12d60:	mov	r0, #0
   12d64:	bl	11628 <dcgettext@plt>
   12d68:	ldr	r2, [sp, #40]	; 0x28
   12d6c:	mov	r4, #0
   12d70:	mov	r1, r0
   12d74:	mov	r0, #1
   12d78:	bl	11868 <__printf_chk@plt>
   12d7c:	mov	r2, #5
   12d80:	ldr	r1, [pc, #-1124]	; 12924 <__assert_fail@plt+0xf54>
   12d84:	mov	r0, #0
   12d88:	bl	11628 <dcgettext@plt>
   12d8c:	ldr	r2, [sp, #48]	; 0x30
   12d90:	ldr	r3, [r2, #20]
   12d94:	str	r3, [sp, #4]
   12d98:	ldr	r3, [r2, #16]
   12d9c:	str	r3, [sp]
   12da0:	ldrd	r2, [r2, #8]
   12da4:	mov	r1, r0
   12da8:	mov	r0, #1
   12dac:	bl	11868 <__printf_chk@plt>
   12db0:	mov	r2, #5
   12db4:	ldr	r1, [pc, #-1172]	; 12928 <__assert_fail@plt+0xf58>
   12db8:	mov	r0, #0
   12dbc:	bl	11628 <dcgettext@plt>
   12dc0:	ldr	r3, [sp, #48]	; 0x30
   12dc4:	ldr	r3, [r3, #24]
   12dc8:	mov	r2, r3
   12dcc:	lsl	r3, r3, #23
   12dd0:	lsr	r3, r3, #23
   12dd4:	mov	r1, r0
   12dd8:	mov	r0, #1
   12ddc:	bl	11868 <__printf_chk@plt>
   12de0:	cmp	r8, #3
   12de4:	mov	r2, #5
   12de8:	ldreq	r1, [pc, #-1220]	; 1292c <__assert_fail@plt+0xf5c>
   12dec:	ldrne	r1, [pc, #-1220]	; 12930 <__assert_fail@plt+0xf60>
   12df0:	mov	r0, #0
   12df4:	bl	11628 <dcgettext@plt>
   12df8:	ldr	r3, [sp, #48]	; 0x30
   12dfc:	ldr	r2, [pc, #-1028]	; 12a00 <__assert_fail@plt+0x1030>
   12e00:	stm	sp, {r2, r4}
   12e04:	ldrd	r2, [r3, #40]	; 0x28
   12e08:	mov	r1, r0
   12e0c:	mov	r0, r8
   12e10:	bl	14d58 <__assert_fail@plt+0x3388>
   12e14:	mov	r2, #5
   12e18:	ldr	r1, [pc, #-1260]	; 12934 <__assert_fail@plt+0xf64>
   12e1c:	mov	r0, r4
   12e20:	bl	11628 <dcgettext@plt>
   12e24:	ldr	r1, [sp, #48]	; 0x30
   12e28:	ldrd	r2, [r1, #32]
   12e2c:	strd	r2, [sp]
   12e30:	ldr	r3, [r1, #72]	; 0x48
   12e34:	ldr	r2, [r1, #76]	; 0x4c
   12e38:	mov	r1, r0
   12e3c:	mov	r0, #1
   12e40:	bl	11868 <__printf_chk@plt>
   12e44:	mov	r2, #5
   12e48:	mov	r0, r4
   12e4c:	ldr	r1, [pc, #-1308]	; 12938 <__assert_fail@plt+0xf68>
   12e50:	bl	11628 <dcgettext@plt>
   12e54:	mov	r5, r0
   12e58:	ldr	r0, [sp, #48]	; 0x30
   12e5c:	ldrd	r2, [r0, #48]	; 0x30
   12e60:	orrs	r3, r2, r3
   12e64:	beq	137b8 <__assert_fail@plt+0x1de8>
   12e68:	add	r0, r0, #48	; 0x30
   12e6c:	bl	1161c <ctime@plt>
   12e70:	mov	r2, r0
   12e74:	mov	r1, r5
   12e78:	mov	r0, #1
   12e7c:	bl	11868 <__printf_chk@plt>
   12e80:	mov	r2, #5
   12e84:	ldr	r1, [pc, #-1360]	; 1293c <__assert_fail@plt+0xf6c>
   12e88:	mov	r0, #0
   12e8c:	bl	11628 <dcgettext@plt>
   12e90:	mov	r4, r0
   12e94:	ldr	r0, [sp, #48]	; 0x30
   12e98:	ldrd	r2, [r0, #56]	; 0x38
   12e9c:	orrs	r3, r2, r3
   12ea0:	beq	137a0 <__assert_fail@plt+0x1dd0>
   12ea4:	add	r0, r0, #56	; 0x38
   12ea8:	bl	1161c <ctime@plt>
   12eac:	mov	r2, r0
   12eb0:	mov	r1, r4
   12eb4:	mov	r0, #1
   12eb8:	bl	11868 <__printf_chk@plt>
   12ebc:	mov	r2, #5
   12ec0:	ldr	r1, [pc, #-1252]	; 129e4 <__assert_fail@plt+0x1014>
   12ec4:	mov	r0, #0
   12ec8:	bl	11628 <dcgettext@plt>
   12ecc:	mov	r4, r0
   12ed0:	ldr	r0, [sp, #48]	; 0x30
   12ed4:	add	r0, r0, #64	; 0x40
   12ed8:	bl	1161c <ctime@plt>
   12edc:	mov	r1, r4
   12ee0:	mov	r2, r0
   12ee4:	mov	r0, #1
   12ee8:	bl	11868 <__printf_chk@plt>
   12eec:	mov	r0, #10
   12ef0:	bl	11838 <putchar@plt>
   12ef4:	ldr	r0, [sp, #48]	; 0x30
   12ef8:	bl	14668 <__assert_fail@plt+0x2c98>
   12efc:	b	11c44 <__assert_fail@plt+0x274>
   12f00:	sub	r3, fp, #1
   12f04:	cmp	r3, #4
   12f08:	ldrls	pc, [pc, r3, lsl #2]
   12f0c:	b	13abc <__assert_fail@plt+0x20ec>
   12f10:			; <UNDEFINED> instruction: 0x000132b8
   12f14:	andeq	r3, r1, r8, lsr r2
   12f18:	andeq	r3, r1, r4, lsl #3
   12f1c:	andeq	r3, r1, r4, ror #1
   12f20:	andeq	r2, r1, r4, lsr #30
   12f24:	mov	r2, #5
   12f28:	ldr	r1, [pc, #-1520]	; 12940 <__assert_fail@plt+0xf70>
   12f2c:	mov	r0, #0
   12f30:	bl	11628 <dcgettext@plt>
   12f34:	mov	r1, r0
   12f38:	mov	r0, #1
   12f3c:	bl	11868 <__printf_chk@plt>
   12f40:	mov	r2, #5
   12f44:	ldr	r1, [pc, #-1476]	; 12988 <__assert_fail@plt+0xfb8>
   12f48:	mov	r0, #0
   12f4c:	bl	11628 <dcgettext@plt>
   12f50:	mov	r2, #5
   12f54:	ldr	r1, [pc, #-1516]	; 12970 <__assert_fail@plt+0xfa0>
   12f58:	mov	r4, r0
   12f5c:	mov	r0, #0
   12f60:	bl	11628 <dcgettext@plt>
   12f64:	mov	r2, #5
   12f68:	ldr	r1, [pc, #-1580]	; 12944 <__assert_fail@plt+0xf74>
   12f6c:	mov	r5, r0
   12f70:	mov	r0, #0
   12f74:	bl	11628 <dcgettext@plt>
   12f78:	mov	r2, #5
   12f7c:	ldr	r1, [pc, #-1596]	; 12948 <__assert_fail@plt+0xf78>
   12f80:	mov	r6, r0
   12f84:	mov	r0, #0
   12f88:	bl	11628 <dcgettext@plt>
   12f8c:	str	r6, [sp]
   12f90:	mov	r3, r5
   12f94:	mov	r2, r4
   12f98:	ldr	r1, [pc, #-1620]	; 1294c <__assert_fail@plt+0xf7c>
   12f9c:	str	r0, [sp, #4]
   12fa0:	mov	r0, #1
   12fa4:	bl	11868 <__printf_chk@plt>
   12fa8:	add	r1, sp, #48	; 0x30
   12fac:	mvn	r0, #0
   12fb0:	bl	14328 <__assert_fail@plt+0x2958>
   12fb4:	cmp	r0, #0
   12fb8:	ble	132ac <__assert_fail@plt+0x18dc>
   12fbc:	ldr	r6, [sp, #48]	; 0x30
   12fc0:	ldr	r7, [pc, #-1656]	; 12950 <__assert_fail@plt+0xf80>
   12fc4:	b	13080 <__assert_fail@plt+0x16b0>
   12fc8:	ldr	r2, [r6, #4]
   12fcc:	ldr	r1, [pc, #-1664]	; 12954 <__assert_fail@plt+0xf84>
   12fd0:	mov	r0, #1
   12fd4:	bl	11868 <__printf_chk@plt>
   12fd8:	cmp	r4, #0
   12fdc:	mov	r0, #1
   12fe0:	ldrne	r3, [r4]
   12fe4:	ldreq	r3, [r6, #8]
   12fe8:	ldrne	r2, [r6]
   12fec:	ldrne	r1, [pc, #-1592]	; 129bc <__assert_fail@plt+0xfec>
   12ff0:	ldreq	r2, [r6]
   12ff4:	ldreq	r1, [pc, #-1596]	; 129c0 <__assert_fail@plt+0xff0>
   12ff8:	bl	11868 <__printf_chk@plt>
   12ffc:	ldr	r2, [r6, #24]
   13000:	ldr	r1, [pc, #-1712]	; 12958 <__assert_fail@plt+0xf88>
   13004:	mov	r0, #1
   13008:	lsl	r2, r2, #23
   1300c:	lsr	r2, r2, #23
   13010:	bl	11868 <__printf_chk@plt>
   13014:	cmp	r8, #3
   13018:	moveq	r3, #6
   1301c:	ldreq	r2, [pc, #-1736]	; 1295c <__assert_fail@plt+0xf8c>
   13020:	mvnne	r3, #9
   13024:	movne	r1, #0
   13028:	moveq	r1, #0
   1302c:	mov	r0, r8
   13030:	strdeq	r2, [sp]
   13034:	stmne	sp, {r1, r3}
   13038:	ldrd	r2, [r6, #40]	; 0x28
   1303c:	bl	14d58 <__assert_fail@plt+0x3388>
   13040:	ldr	r3, [r6, #24]
   13044:	ldrd	r4, [r6, #32]
   13048:	tst	r3, #512	; 0x200
   1304c:	ldreq	r9, [pc, #-1780]	; 12960 <__assert_fail@plt+0xf90>
   13050:	bne	1382c <__assert_fail@plt+0x1e5c>
   13054:	tst	r3, #1024	; 0x400
   13058:	ldreq	r0, [pc, #-1792]	; 12960 <__assert_fail@plt+0xf90>
   1305c:	bne	13818 <__assert_fail@plt+0x1e48>
   13060:	str	r0, [sp, #4]
   13064:	str	r9, [sp]
   13068:	mov	r2, r4
   1306c:	mov	r3, r5
   13070:	ldr	r1, [pc, #-1812]	; 12964 <__assert_fail@plt+0xf94>
   13074:	mov	r0, #1
   13078:	bl	11868 <__printf_chk@plt>
   1307c:	ldr	r6, [r6, #96]	; 0x60
   13080:	ldr	r3, [r6, #96]	; 0x60
   13084:	cmp	r3, #0
   13088:	beq	1377c <__assert_fail@plt+0x1dac>
   1308c:	cmp	fp, #3
   13090:	beq	13668 <__assert_fail@plt+0x1c98>
   13094:	ldr	r0, [r6, #8]
   13098:	bl	11568 <getpwuid@plt>
   1309c:	cmp	fp, #4
   130a0:	mov	r4, r0
   130a4:	beq	13414 <__assert_fail@plt+0x1a44>
   130a8:	cmp	fp, #5
   130ac:	bne	12fc8 <__assert_fail@plt+0x15f8>
   130b0:	cmp	r0, #0
   130b4:	ldr	r2, [r6]
   130b8:	ldrne	r3, [r0]
   130bc:	ldrne	r1, [pc, #-1800]	; 129bc <__assert_fail@plt+0xfec>
   130c0:	ldreq	r3, [r6, #8]
   130c4:	ldreq	r1, [pc, #-1804]	; 129c0 <__assert_fail@plt+0xff0>
   130c8:	mov	r0, #1
   130cc:	bl	11868 <__printf_chk@plt>
   130d0:	ldrd	r2, [r6, #72]	; 0x48
   130d4:	ldr	r1, [pc, #-1908]	; 12968 <__assert_fail@plt+0xf98>
   130d8:	mov	r0, #1
   130dc:	bl	11868 <__printf_chk@plt>
   130e0:	b	1307c <__assert_fail@plt+0x16ac>
   130e4:	mov	r2, #5
   130e8:	ldr	r1, [pc, #-1924]	; 1296c <__assert_fail@plt+0xf9c>
   130ec:	mov	r0, #0
   130f0:	bl	11628 <dcgettext@plt>
   130f4:	mov	r1, r0
   130f8:	mov	r0, #1
   130fc:	bl	11868 <__printf_chk@plt>
   13100:	mov	r2, #5
   13104:	ldr	r1, [pc, #-1924]	; 12988 <__assert_fail@plt+0xfb8>
   13108:	mov	r0, #0
   1310c:	bl	11628 <dcgettext@plt>
   13110:	mov	r2, #5
   13114:	ldr	r1, [pc, #-1964]	; 12970 <__assert_fail@plt+0xfa0>
   13118:	mov	r4, r0
   1311c:	mov	r0, #0
   13120:	bl	11628 <dcgettext@plt>
   13124:	mov	r2, #5
   13128:	ldr	r1, [pc, #-1980]	; 12974 <__assert_fail@plt+0xfa4>
   1312c:	mov	r5, r0
   13130:	mov	r0, #0
   13134:	bl	11628 <dcgettext@plt>
   13138:	mov	r2, #5
   1313c:	ldr	r1, [pc, #-1996]	; 12978 <__assert_fail@plt+0xfa8>
   13140:	mov	r7, r0
   13144:	mov	r0, #0
   13148:	bl	11628 <dcgettext@plt>
   1314c:	mov	r2, #5
   13150:	ldr	r1, [pc, #-2012]	; 1297c <__assert_fail@plt+0xfac>
   13154:	mov	r6, r0
   13158:	mov	r0, #0
   1315c:	bl	11628 <dcgettext@plt>
   13160:	str	r7, [sp]
   13164:	str	r6, [sp, #4]
   13168:	mov	r3, r5
   1316c:	mov	r2, r4
   13170:	ldr	r1, [pc, #-2040]	; 12980 <__assert_fail@plt+0xfb0>
   13174:	str	r0, [sp, #8]
   13178:	mov	r0, #1
   1317c:	bl	11868 <__printf_chk@plt>
   13180:	b	12fa8 <__assert_fail@plt+0x15d8>
   13184:	mov	r2, #5
   13188:	ldr	r1, [pc, #-2060]	; 12984 <__assert_fail@plt+0xfb4>
   1318c:	mov	r0, #0
   13190:	bl	11628 <dcgettext@plt>
   13194:	mov	r1, r0
   13198:	mov	r0, #1
   1319c:	bl	11868 <__printf_chk@plt>
   131a0:	mov	r2, #5
   131a4:	ldr	r1, [pc, #-2084]	; 12988 <__assert_fail@plt+0xfb8>
   131a8:	mov	r0, #0
   131ac:	bl	11628 <dcgettext@plt>
   131b0:	mov	r2, #5
   131b4:	ldr	r1, [pc, #-2096]	; 1298c <__assert_fail@plt+0xfbc>
   131b8:	mov	r4, r0
   131bc:	mov	r0, #0
   131c0:	bl	11628 <dcgettext@plt>
   131c4:	mov	r2, #5
   131c8:	ldr	r1, [pc, #-2112]	; 12990 <__assert_fail@plt+0xfc0>
   131cc:	mov	r5, r0
   131d0:	mov	r0, #0
   131d4:	bl	11628 <dcgettext@plt>
   131d8:	mov	r2, #5
   131dc:	ldr	r1, [pc, #-2128]	; 12994 <__assert_fail@plt+0xfc4>
   131e0:	mov	r9, r0
   131e4:	mov	r0, #0
   131e8:	bl	11628 <dcgettext@plt>
   131ec:	mov	r2, #5
   131f0:	ldr	r1, [pc, #-2144]	; 12998 <__assert_fail@plt+0xfc8>
   131f4:	mov	r6, r0
   131f8:	mov	r0, #0
   131fc:	bl	11628 <dcgettext@plt>
   13200:	mov	r2, #5
   13204:	ldr	r1, [pc, #-2160]	; 1299c <__assert_fail@plt+0xfcc>
   13208:	mov	r7, r0
   1320c:	mov	r0, #0
   13210:	bl	11628 <dcgettext@plt>
   13214:	str	r9, [sp]
   13218:	strd	r6, [sp, #4]
   1321c:	mov	r3, r5
   13220:	mov	r2, r4
   13224:	ldr	r1, [pc, #-2188]	; 129a0 <__assert_fail@plt+0xfd0>
   13228:	str	r0, [sp, #12]
   1322c:	mov	r0, #1
   13230:	bl	11868 <__printf_chk@plt>
   13234:	b	12fa8 <__assert_fail@plt+0x15d8>
   13238:	add	r2, sp, #48	; 0x30
   1323c:	mov	r1, #14
   13240:	mov	r0, #0
   13244:	bl	116c4 <shmctl@plt>
   13248:	mov	r2, #5
   1324c:	cmp	r0, #0
   13250:	blt	1390c <__assert_fail@plt+0x1f3c>
   13254:	ldr	r1, [pc, #-2232]	; 129a4 <__assert_fail@plt+0xfd4>
   13258:	mov	r0, #0
   1325c:	bl	11628 <dcgettext@plt>
   13260:	mov	r1, r0
   13264:	mov	r0, #1
   13268:	bl	11868 <__printf_chk@plt>
   1326c:	mov	r2, #5
   13270:	ldr	r1, [pc, #-2256]	; 129a8 <__assert_fail@plt+0xfd8>
   13274:	mov	r0, #0
   13278:	bl	11628 <dcgettext@plt>
   1327c:	ldr	r1, [sp, #64]	; 0x40
   13280:	ldr	r2, [sp, #60]	; 0x3c
   13284:	ldr	r3, [sp, #56]	; 0x38
   13288:	ldr	ip, [sp, #68]	; 0x44
   1328c:	str	r1, [sp, #8]
   13290:	str	r2, [sp, #4]
   13294:	str	r3, [sp]
   13298:	str	ip, [sp, #12]
   1329c:	ldrd	r2, [sp, #48]	; 0x30
   132a0:	mov	r1, r0
   132a4:	mov	r0, #1
   132a8:	bl	11868 <__printf_chk@plt>
   132ac:	mov	r0, #10
   132b0:	bl	11838 <putchar@plt>
   132b4:	b	11ebc <__assert_fail@plt+0x4ec>
   132b8:	add	r0, sp, #48	; 0x30
   132bc:	bl	14228 <__assert_fail@plt+0x2858>
   132c0:	subs	r6, r0, #0
   132c4:	movne	r2, #5
   132c8:	ldrne	r1, [pc, #-2340]	; 129ac <__assert_fail@plt+0xfdc>
   132cc:	bne	13910 <__assert_fail@plt+0x1f40>
   132d0:	bl	117c0 <getpagesize@plt>
   132d4:	mov	r2, #5
   132d8:	ldr	r1, [pc, #-2352]	; 129b0 <__assert_fail@plt+0xfe0>
   132dc:	mov	r9, r0
   132e0:	mov	r0, r6
   132e4:	bl	11628 <dcgettext@plt>
   132e8:	mov	r4, r9
   132ec:	asr	r5, r9, #31
   132f0:	mov	r1, r0
   132f4:	mov	r0, #1
   132f8:	bl	11868 <__printf_chk@plt>
   132fc:	mov	r2, #5
   13300:	ldr	r1, [pc, #-2388]	; 129b4 <__assert_fail@plt+0xfe4>
   13304:	mov	r0, r6
   13308:	bl	11628 <dcgettext@plt>
   1330c:	ldrd	r2, [sp, #48]	; 0x30
   13310:	strd	r4, [sp, #32]
   13314:	mov	r1, r0
   13318:	mov	r0, #1
   1331c:	bl	11868 <__printf_chk@plt>
   13320:	cmp	r8, #0
   13324:	beq	1393c <__assert_fail@plt+0x1f6c>
   13328:	mov	r2, #5
   1332c:	ldr	r1, [pc, #-2332]	; 12a18 <__assert_fail@plt+0x1048>
   13330:	mov	r0, r6
   13334:	bl	11628 <dcgettext@plt>
   13338:	ldr	r7, [pc, #-2340]	; 12a1c <__assert_fail@plt+0x104c>
   1333c:	ldrd	r2, [sp, #56]	; 0x38
   13340:	str	r6, [sp, #4]
   13344:	str	r7, [sp]
   13348:	mov	r1, r0
   1334c:	mov	r0, r8
   13350:	bl	14d58 <__assert_fail@plt+0x3388>
   13354:	ldrd	r4, [sp, #64]	; 0x40
   13358:	orrs	r3, r4, r5
   1335c:	beq	139f0 <__assert_fail@plt+0x2020>
   13360:	umull	r2, r3, r9, r4
   13364:	mul	r1, r9, r5
   13368:	strd	r2, [sp, #24]
   1336c:	ldr	r3, [sp, #36]	; 0x24
   13370:	ldr	r0, [sp, #28]
   13374:	mov	r2, r4
   13378:	mla	r1, r4, r3, r1
   1337c:	mov	r3, r5
   13380:	add	r1, r1, r0
   13384:	str	r1, [sp, #28]
   13388:	ldrd	r0, [sp, #24]
   1338c:	bl	1a370 <__assert_fail@plt+0x89a0>
   13390:	ldrd	r2, [sp, #32]
   13394:	cmp	r3, r1
   13398:	cmpeq	r2, r0
   1339c:	ldr	r1, [pc, #-2436]	; 12a20 <__assert_fail@plt+0x1050>
   133a0:	mov	r2, #5
   133a4:	mov	r0, r6
   133a8:	beq	13a78 <__assert_fail@plt+0x20a8>
   133ac:	bl	11628 <dcgettext@plt>
   133b0:	ldrd	r2, [sp, #32]
   133b4:	mvn	r1, #0
   133b8:	mov	r4, r0
   133bc:	mvn	r0, #0
   133c0:	bl	1a370 <__assert_fail@plt+0x89a0>
   133c4:	mov	r1, r4
   133c8:	str	r6, [sp, #4]
   133cc:	str	r7, [sp]
   133d0:	mov	r0, r8
   133d4:	str	r8, [sp, #24]
   133d8:	mvn	r2, r2
   133dc:	mvn	r3, r3
   133e0:	bl	14d58 <__assert_fail@plt+0x3388>
   133e4:	mov	r2, #5
   133e8:	ldr	r1, [pc, #-2616]	; 129b8 <__assert_fail@plt+0xfe8>
   133ec:	mov	r0, #0
   133f0:	bl	11628 <dcgettext@plt>
   133f4:	mov	r3, #0
   133f8:	str	r3, [sp, #4]
   133fc:	str	r7, [sp]
   13400:	ldrd	r2, [sp, #72]	; 0x48
   13404:	mov	r1, r0
   13408:	ldr	r0, [sp, #24]
   1340c:	bl	14d58 <__assert_fail@plt+0x3388>
   13410:	b	132ac <__assert_fail@plt+0x18dc>
   13414:	cmp	r0, #0
   13418:	ldr	r2, [r6]
   1341c:	ldrne	r3, [r0]
   13420:	ldreq	r3, [r6, #8]
   13424:	ldrne	r1, [pc, #-2672]	; 129bc <__assert_fail@plt+0xfec>
   13428:	ldreq	r1, [pc, #-2672]	; 129c0 <__assert_fail@plt+0xff0>
   1342c:	mov	r0, #1
   13430:	bl	11868 <__printf_chk@plt>
   13434:	ldrd	r2, [r6, #48]	; 0x30
   13438:	orrs	r3, r2, r3
   1343c:	beq	1374c <__assert_fail@plt+0x1d7c>
   13440:	add	r0, r6, #48	; 0x30
   13444:	bl	1161c <ctime@plt>
   13448:	add	r2, r0, #4
   1344c:	mov	r1, r7
   13450:	mov	r0, #1
   13454:	bl	11868 <__printf_chk@plt>
   13458:	ldrd	r2, [r6, #56]	; 0x38
   1345c:	orrs	r3, r2, r3
   13460:	beq	13734 <__assert_fail@plt+0x1d64>
   13464:	add	r0, r6, #56	; 0x38
   13468:	bl	1161c <ctime@plt>
   1346c:	add	r2, r0, #4
   13470:	mov	r1, r7
   13474:	mov	r0, #1
   13478:	bl	11868 <__printf_chk@plt>
   1347c:	ldrd	r2, [r6, #64]	; 0x40
   13480:	orrs	r3, r2, r3
   13484:	beq	1371c <__assert_fail@plt+0x1d4c>
   13488:	add	r0, r6, #64	; 0x40
   1348c:	bl	1161c <ctime@plt>
   13490:	add	r2, r0, #4
   13494:	ldr	r1, [pc, #-2776]	; 129c4 <__assert_fail@plt+0xff4>
   13498:	mov	r0, #1
   1349c:	bl	11868 <__printf_chk@plt>
   134a0:	b	1307c <__assert_fail@plt+0x16ac>
   134a4:	add	r1, sp, #48	; 0x30
   134a8:	ldr	r0, [sp, #40]	; 0x28
   134ac:	bl	14950 <__assert_fail@plt+0x2f80>
   134b0:	mov	r2, #5
   134b4:	cmp	r0, #0
   134b8:	ble	13878 <__assert_fail@plt+0x1ea8>
   134bc:	ldr	r1, [pc, #-2812]	; 129c8 <__assert_fail@plt+0xff8>
   134c0:	mov	r0, #0
   134c4:	bl	11628 <dcgettext@plt>
   134c8:	ldr	r2, [sp, #40]	; 0x28
   134cc:	mov	r1, r0
   134d0:	mov	r0, r5
   134d4:	bl	11868 <__printf_chk@plt>
   134d8:	mov	r2, #5
   134dc:	ldr	r1, [pc, #-2840]	; 129cc <__assert_fail@plt+0xffc>
   134e0:	mov	r0, #0
   134e4:	bl	11628 <dcgettext@plt>
   134e8:	ldr	r2, [sp, #48]	; 0x30
   134ec:	ldr	r3, [r2, #24]
   134f0:	str	r3, [sp, #8]
   134f4:	ldr	r3, [r2, #20]
   134f8:	str	r3, [sp, #4]
   134fc:	ldr	r3, [r2, #16]
   13500:	str	r3, [sp]
   13504:	ldrd	r2, [r2, #8]
   13508:	mov	r1, r0
   1350c:	mov	r0, r5
   13510:	bl	11868 <__printf_chk@plt>
   13514:	cmp	r8, #3
   13518:	mov	r2, #5
   1351c:	beq	13890 <__assert_fail@plt+0x1ec0>
   13520:	ldr	r1, [pc, #-2904]	; 129d0 <__assert_fail@plt+0x1000>
   13524:	mov	r0, #0
   13528:	bl	11628 <dcgettext@plt>
   1352c:	ldr	r3, [sp, #48]	; 0x30
   13530:	ldr	r5, [pc, #-2872]	; 12a00 <__assert_fail@plt+0x1030>
   13534:	str	r4, [sp, #4]
   13538:	str	r5, [sp]
   1353c:	ldrd	r2, [r3, #56]	; 0x38
   13540:	mov	r1, r0
   13544:	mov	r0, r8
   13548:	bl	14d58 <__assert_fail@plt+0x3388>
   1354c:	ldr	r1, [pc, #-2944]	; 129d4 <__assert_fail@plt+0x1004>
   13550:	mov	r2, #5
   13554:	mov	r0, #0
   13558:	bl	11628 <dcgettext@plt>
   1355c:	mov	r1, r0
   13560:	ldr	r3, [sp, #48]	; 0x30
   13564:	mov	r4, #0
   13568:	str	r5, [sp]
   1356c:	str	r4, [sp, #4]
   13570:	mov	r0, r8
   13574:	ldrd	r2, [r3, #72]	; 0x48
   13578:	bl	14d58 <__assert_fail@plt+0x3388>
   1357c:	ldr	r3, [sp, #48]	; 0x30
   13580:	ldr	r1, [pc, #-2992]	; 129d8 <__assert_fail@plt+0x1008>
   13584:	mov	r0, #1
   13588:	ldr	r2, [r3, #84]	; 0x54
   1358c:	str	r2, [sp, #4]
   13590:	ldr	r2, [r3, #80]	; 0x50
   13594:	str	r2, [sp]
   13598:	ldrd	r2, [r3, #64]	; 0x40
   1359c:	bl	11868 <__printf_chk@plt>
   135a0:	mov	r2, #5
   135a4:	mov	r0, r4
   135a8:	ldr	r1, [pc, #-3028]	; 129dc <__assert_fail@plt+0x100c>
   135ac:	bl	11628 <dcgettext@plt>
   135b0:	mov	r5, r0
   135b4:	ldr	r0, [sp, #48]	; 0x30
   135b8:	ldrd	r2, [r0, #32]
   135bc:	orrs	r3, r2, r3
   135c0:	beq	137e8 <__assert_fail@plt+0x1e18>
   135c4:	add	r0, r0, #32
   135c8:	bl	1161c <ctime@plt>
   135cc:	mov	r2, r0
   135d0:	mov	r1, r5
   135d4:	mov	r0, #1
   135d8:	bl	11868 <__printf_chk@plt>
   135dc:	mov	r2, #5
   135e0:	ldr	r1, [pc, #-3080]	; 129e0 <__assert_fail@plt+0x1010>
   135e4:	mov	r0, #0
   135e8:	bl	11628 <dcgettext@plt>
   135ec:	mov	r4, r0
   135f0:	ldr	r0, [sp, #48]	; 0x30
   135f4:	ldrd	r2, [r0, #40]	; 0x28
   135f8:	orrs	r3, r2, r3
   135fc:	beq	137d0 <__assert_fail@plt+0x1e00>
   13600:	add	r0, r0, #40	; 0x28
   13604:	bl	1161c <ctime@plt>
   13608:	mov	r2, r0
   1360c:	mov	r1, r4
   13610:	mov	r0, #1
   13614:	bl	11868 <__printf_chk@plt>
   13618:	mov	r2, #5
   1361c:	ldr	r1, [pc, #-3136]	; 129e4 <__assert_fail@plt+0x1014>
   13620:	mov	r0, #0
   13624:	bl	11628 <dcgettext@plt>
   13628:	mov	r4, r0
   1362c:	ldr	r0, [sp, #48]	; 0x30
   13630:	ldrd	r2, [r0, #48]	; 0x30
   13634:	orrs	r3, r2, r3
   13638:	beq	13788 <__assert_fail@plt+0x1db8>
   1363c:	add	r0, r0, #48	; 0x30
   13640:	bl	1161c <ctime@plt>
   13644:	mov	r2, r0
   13648:	mov	r1, r4
   1364c:	mov	r0, #1
   13650:	bl	11868 <__printf_chk@plt>
   13654:	mov	r0, #10
   13658:	bl	11838 <putchar@plt>
   1365c:	ldr	r0, [sp, #48]	; 0x30
   13660:	bl	14c48 <__assert_fail@plt+0x3278>
   13664:	b	11c38 <__assert_fail@plt+0x268>
   13668:	ldr	r3, [pc, #-3208]	; 129e8 <__assert_fail@plt+0x1018>
   1366c:	mov	r1, r6
   13670:	ldr	r0, [r3]
   13674:	bl	14c68 <__assert_fail@plt+0x3298>
   13678:	b	1307c <__assert_fail@plt+0x16ac>
   1367c:	ldr	r3, [pc, #-3228]	; 129e8 <__assert_fail@plt+0x1018>
   13680:	mov	r1, r4
   13684:	ldr	r0, [r3]
   13688:	bl	14c68 <__assert_fail@plt+0x3298>
   1368c:	b	12008 <__assert_fail@plt+0x638>
   13690:	ldr	r3, [pc, #-3248]	; 129e8 <__assert_fail@plt+0x1018>
   13694:	mov	r1, r4
   13698:	ldr	r0, [r3]
   1369c:	bl	14c68 <__assert_fail@plt+0x3298>
   136a0:	b	121d4 <__assert_fail@plt+0x804>
   136a4:	mov	r2, #5
   136a8:	mov	r1, r6
   136ac:	mov	r0, #0
   136b0:	bl	11628 <dcgettext@plt>
   136b4:	mov	r2, r0
   136b8:	b	12090 <__assert_fail@plt+0x6c0>
   136bc:	mov	r2, #5
   136c0:	mov	r1, r6
   136c4:	mov	r0, #0
   136c8:	bl	11628 <dcgettext@plt>
   136cc:	mov	r2, r0
   136d0:	b	1206c <__assert_fail@plt+0x69c>
   136d4:	mov	r2, #5
   136d8:	mov	r1, r6
   136dc:	mov	r0, #0
   136e0:	bl	11628 <dcgettext@plt>
   136e4:	mov	r2, r0
   136e8:	b	12d10 <__assert_fail@plt+0x1340>
   136ec:	mov	r2, #5
   136f0:	mov	r1, r6
   136f4:	mov	r0, #0
   136f8:	bl	11628 <dcgettext@plt>
   136fc:	mov	r2, r0
   13700:	b	12cec <__assert_fail@plt+0x131c>
   13704:	mov	r2, #5
   13708:	mov	r1, r6
   1370c:	mov	r0, #0
   13710:	bl	11628 <dcgettext@plt>
   13714:	mov	r2, r0
   13718:	b	12d34 <__assert_fail@plt+0x1364>
   1371c:	mov	r2, #5
   13720:	ldr	r1, [pc, #-3388]	; 129ec <__assert_fail@plt+0x101c>
   13724:	mov	r0, #0
   13728:	bl	11628 <dcgettext@plt>
   1372c:	mov	r2, r0
   13730:	b	13494 <__assert_fail@plt+0x1ac4>
   13734:	mov	r2, #5
   13738:	ldr	r1, [pc, #-3412]	; 129ec <__assert_fail@plt+0x101c>
   1373c:	mov	r0, #0
   13740:	bl	11628 <dcgettext@plt>
   13744:	mov	r2, r0
   13748:	b	13470 <__assert_fail@plt+0x1aa0>
   1374c:	mov	r2, #5
   13750:	ldr	r1, [pc, #-3436]	; 129ec <__assert_fail@plt+0x101c>
   13754:	mov	r0, #0
   13758:	bl	11628 <dcgettext@plt>
   1375c:	mov	r2, r0
   13760:	b	1344c <__assert_fail@plt+0x1a7c>
   13764:	ldr	r0, [sp, #48]	; 0x30
   13768:	bl	14c48 <__assert_fail@plt+0x3278>
   1376c:	b	126d0 <__assert_fail@plt+0xd00>
   13770:	ldr	r0, [sp, #48]	; 0x30
   13774:	bl	14924 <__assert_fail@plt+0x2f54>
   13778:	b	12490 <__assert_fail@plt+0xac0>
   1377c:	ldr	r0, [sp, #48]	; 0x30
   13780:	bl	14668 <__assert_fail@plt+0x2c98>
   13784:	b	132ac <__assert_fail@plt+0x18dc>
   13788:	mov	r2, #5
   1378c:	ldr	r1, [pc, #-3496]	; 129ec <__assert_fail@plt+0x101c>
   13790:	mov	r0, #0
   13794:	bl	11628 <dcgettext@plt>
   13798:	mov	r2, r0
   1379c:	b	13648 <__assert_fail@plt+0x1c78>
   137a0:	mov	r2, #5
   137a4:	ldr	r1, [pc, #-3520]	; 129ec <__assert_fail@plt+0x101c>
   137a8:	mov	r0, #0
   137ac:	bl	11628 <dcgettext@plt>
   137b0:	mov	r2, r0
   137b4:	b	12eb0 <__assert_fail@plt+0x14e0>
   137b8:	mov	r2, #5
   137bc:	mov	r0, r4
   137c0:	ldr	r1, [pc, #-3548]	; 129ec <__assert_fail@plt+0x101c>
   137c4:	bl	11628 <dcgettext@plt>
   137c8:	mov	r2, r0
   137cc:	b	12e74 <__assert_fail@plt+0x14a4>
   137d0:	mov	r2, #5
   137d4:	ldr	r1, [pc, #-3568]	; 129ec <__assert_fail@plt+0x101c>
   137d8:	mov	r0, #0
   137dc:	bl	11628 <dcgettext@plt>
   137e0:	mov	r2, r0
   137e4:	b	1360c <__assert_fail@plt+0x1c3c>
   137e8:	mov	r2, #5
   137ec:	mov	r0, r4
   137f0:	ldr	r1, [pc, #-3596]	; 129ec <__assert_fail@plt+0x101c>
   137f4:	bl	11628 <dcgettext@plt>
   137f8:	mov	r2, r0
   137fc:	b	135d0 <__assert_fail@plt+0x1c00>
   13800:	mov	r2, #5
   13804:	ldr	r1, [pc, #-3616]	; 129ec <__assert_fail@plt+0x101c>
   13808:	mov	r0, #0
   1380c:	bl	11628 <dcgettext@plt>
   13810:	mov	r2, r0
   13814:	b	11d38 <__assert_fail@plt+0x368>
   13818:	mov	r2, #5
   1381c:	ldr	r1, [pc, #-3636]	; 129f0 <__assert_fail@plt+0x1020>
   13820:	mov	r0, #0
   13824:	bl	11628 <dcgettext@plt>
   13828:	b	13060 <__assert_fail@plt+0x1690>
   1382c:	mov	r2, #5
   13830:	ldr	r1, [pc, #-3652]	; 129f4 <__assert_fail@plt+0x1024>
   13834:	mov	r0, #0
   13838:	bl	11628 <dcgettext@plt>
   1383c:	ldr	r3, [r6, #24]
   13840:	mov	r9, r0
   13844:	b	13054 <__assert_fail@plt+0x1684>
   13848:	ldr	r1, [pc, #-3672]	; 129f8 <__assert_fail@plt+0x1028>
   1384c:	mov	r0, #0
   13850:	bl	11628 <dcgettext@plt>
   13854:	ldr	r1, [sp, #40]	; 0x28
   13858:	bl	117b4 <warnx@plt>
   1385c:	b	11bc0 <__assert_fail@plt+0x1f0>
   13860:	ldr	r1, [pc, #-3696]	; 129f8 <__assert_fail@plt+0x1028>
   13864:	mov	r0, #0
   13868:	bl	11628 <dcgettext@plt>
   1386c:	ldr	r1, [sp, #40]	; 0x28
   13870:	bl	117b4 <warnx@plt>
   13874:	b	11c44 <__assert_fail@plt+0x274>
   13878:	ldr	r1, [pc, #-3720]	; 129f8 <__assert_fail@plt+0x1028>
   1387c:	mov	r0, #0
   13880:	bl	11628 <dcgettext@plt>
   13884:	ldr	r1, [sp, #40]	; 0x28
   13888:	bl	117b4 <warnx@plt>
   1388c:	b	11c38 <__assert_fail@plt+0x268>
   13890:	ldr	r1, [pc, #-3740]	; 129fc <__assert_fail@plt+0x102c>
   13894:	mov	r0, #0
   13898:	bl	11628 <dcgettext@plt>
   1389c:	ldr	r3, [sp, #48]	; 0x30
   138a0:	ldr	r5, [pc, #-3752]	; 12a00 <__assert_fail@plt+0x1030>
   138a4:	str	r4, [sp, #4]
   138a8:	str	r5, [sp]
   138ac:	ldrd	r2, [r3, #56]	; 0x38
   138b0:	mov	r1, r0
   138b4:	mov	r0, r8
   138b8:	bl	14d58 <__assert_fail@plt+0x3388>
   138bc:	ldr	r1, [pc, #-3776]	; 12a04 <__assert_fail@plt+0x1034>
   138c0:	mov	r2, #5
   138c4:	mov	r0, #0
   138c8:	bl	11628 <dcgettext@plt>
   138cc:	mov	r1, r0
   138d0:	b	13560 <__assert_fail@plt+0x1b90>
   138d4:	ldr	r1, [pc, #-3796]	; 12a08 <__assert_fail@plt+0x1038>
   138d8:	mov	r0, #0
   138dc:	bl	11628 <dcgettext@plt>
   138e0:	mov	r1, r0
   138e4:	mov	r0, #1
   138e8:	bl	11868 <__printf_chk@plt>
   138ec:	b	12490 <__assert_fail@plt+0xac0>
   138f0:	ldr	r1, [pc, #-3820]	; 12a0c <__assert_fail@plt+0x103c>
   138f4:	mov	r0, #0
   138f8:	bl	11628 <dcgettext@plt>
   138fc:	mov	r1, r0
   13900:	mov	r0, #1
   13904:	bl	11868 <__printf_chk@plt>
   13908:	b	126d0 <__assert_fail@plt+0xd00>
   1390c:	ldr	r1, [pc, #-3844]	; 12a10 <__assert_fail@plt+0x1040>
   13910:	mov	r0, #0
   13914:	bl	11628 <dcgettext@plt>
   13918:	mov	r1, r0
   1391c:	mov	r0, #1
   13920:	bl	11868 <__printf_chk@plt>
   13924:	b	132ac <__assert_fail@plt+0x18dc>
   13928:	mov	r2, #5
   1392c:	ldr	r1, [pc, #-3872]	; 12a14 <__assert_fail@plt+0x1044>
   13930:	mov	r0, r8
   13934:	bl	11628 <dcgettext@plt>
   13938:	b	12778 <__assert_fail@plt+0xda8>
   1393c:	mov	r2, #5
   13940:	ldr	r1, [pc, #-3888]	; 12a18 <__assert_fail@plt+0x1048>
   13944:	mov	r0, r8
   13948:	bl	11628 <dcgettext@plt>
   1394c:	ldr	r7, [pc, #-3896]	; 12a1c <__assert_fail@plt+0x104c>
   13950:	ldrd	r2, [sp, #56]	; 0x38
   13954:	stm	sp, {r7, r8}
   13958:	mov	r1, r0
   1395c:	mov	r0, #2
   13960:	bl	14d58 <__assert_fail@plt+0x3388>
   13964:	ldrd	r4, [sp, #64]	; 0x40
   13968:	orrs	r3, r4, r5
   1396c:	beq	13a24 <__assert_fail@plt+0x2054>
   13970:	umull	r2, r3, r9, r4
   13974:	mul	r1, r9, r5
   13978:	strd	r2, [sp, #40]	; 0x28
   1397c:	ldr	r3, [sp, #36]	; 0x24
   13980:	ldr	r0, [sp, #44]	; 0x2c
   13984:	mov	r2, r4
   13988:	mla	r1, r4, r3, r1
   1398c:	mov	r3, r5
   13990:	add	r1, r1, r0
   13994:	str	r1, [sp, #44]	; 0x2c
   13998:	ldrd	r0, [sp, #40]	; 0x28
   1399c:	bl	1a370 <__assert_fail@plt+0x89a0>
   139a0:	ldrd	r2, [sp, #32]
   139a4:	cmp	r1, r3
   139a8:	cmpeq	r0, r2
   139ac:	beq	13a50 <__assert_fail@plt+0x2080>
   139b0:	mov	r2, #5
   139b4:	ldr	r1, [pc, #-3996]	; 12a20 <__assert_fail@plt+0x1050>
   139b8:	mov	r0, r8
   139bc:	bl	11628 <dcgettext@plt>
   139c0:	ldrd	r2, [sp, #32]
   139c4:	mvn	r1, #0
   139c8:	mov	r4, r0
   139cc:	mvn	r0, #0
   139d0:	bl	1a370 <__assert_fail@plt+0x89a0>
   139d4:	mov	r1, r4
   139d8:	stm	sp, {r7, r8}
   139dc:	mov	r0, #2
   139e0:	mvn	r2, r2
   139e4:	mvn	r3, r3
   139e8:	bl	14d58 <__assert_fail@plt+0x3388>
   139ec:	b	133e4 <__assert_fail@plt+0x1a14>
   139f0:	mov	r2, #5
   139f4:	ldr	r1, [pc, #-4060]	; 12a20 <__assert_fail@plt+0x1050>
   139f8:	mov	r0, r6
   139fc:	bl	11628 <dcgettext@plt>
   13a00:	str	r6, [sp, #4]
   13a04:	str	r7, [sp]
   13a08:	mov	r2, r4
   13a0c:	mov	r3, r5
   13a10:	str	r8, [sp, #24]
   13a14:	mov	r1, r0
   13a18:	mov	r0, r8
   13a1c:	bl	14d58 <__assert_fail@plt+0x3388>
   13a20:	b	133e4 <__assert_fail@plt+0x1a14>
   13a24:	mov	r2, #5
   13a28:	ldr	r1, [pc, #536]	; 13c48 <__assert_fail@plt+0x2278>
   13a2c:	mov	r0, r8
   13a30:	bl	11628 <dcgettext@plt>
   13a34:	stm	sp, {r7, r8}
   13a38:	mov	r2, r4
   13a3c:	mov	r3, r5
   13a40:	mov	r1, r0
   13a44:	mov	r0, #2
   13a48:	bl	14d58 <__assert_fail@plt+0x3388>
   13a4c:	b	133e4 <__assert_fail@plt+0x1a14>
   13a50:	mov	r2, #5
   13a54:	ldr	r1, [pc, #492]	; 13c48 <__assert_fail@plt+0x2278>
   13a58:	mov	r0, r8
   13a5c:	bl	11628 <dcgettext@plt>
   13a60:	stm	sp, {r7, r8}
   13a64:	ldrd	r2, [sp, #40]	; 0x28
   13a68:	mov	r1, r0
   13a6c:	mov	r0, #2
   13a70:	bl	14d58 <__assert_fail@plt+0x3388>
   13a74:	b	133e4 <__assert_fail@plt+0x1a14>
   13a78:	bl	11628 <dcgettext@plt>
   13a7c:	ldrd	r2, [sp, #24]
   13a80:	str	r6, [sp, #4]
   13a84:	str	r7, [sp]
   13a88:	str	r8, [sp, #24]
   13a8c:	mov	r1, r0
   13a90:	mov	r0, r8
   13a94:	bl	14d58 <__assert_fail@plt+0x3388>
   13a98:	b	133e4 <__assert_fail@plt+0x1a14>
   13a9c:	ldr	r1, [pc, #424]	; 13c4c <__assert_fail@plt+0x227c>
   13aa0:	mov	r2, #5
   13aa4:	mov	r0, #0
   13aa8:	bl	11628 <dcgettext@plt>
   13aac:	mov	r1, r0
   13ab0:	mov	r0, #1
   13ab4:	bl	118e0 <errx@plt>
   13ab8:	bl	11640 <__stack_chk_fail@plt>
   13abc:	mov	r2, #5
   13ac0:	ldr	r1, [pc, #392]	; 13c50 <__assert_fail@plt+0x2280>
   13ac4:	mov	r0, #0
   13ac8:	bl	11628 <dcgettext@plt>
   13acc:	mov	r1, r0
   13ad0:	mov	r0, #1
   13ad4:	bl	11868 <__printf_chk@plt>
   13ad8:	mov	r2, #5
   13adc:	ldr	r1, [pc, #368]	; 13c54 <__assert_fail@plt+0x2284>
   13ae0:	mov	r0, #0
   13ae4:	bl	11628 <dcgettext@plt>
   13ae8:	mov	r2, #5
   13aec:	ldr	r1, [pc, #356]	; 13c58 <__assert_fail@plt+0x2288>
   13af0:	str	r0, [sp, #24]
   13af4:	mov	r0, #0
   13af8:	bl	11628 <dcgettext@plt>
   13afc:	mov	r2, #5
   13b00:	ldr	r1, [pc, #340]	; 13c5c <__assert_fail@plt+0x228c>
   13b04:	mov	r5, r0
   13b08:	mov	r0, #0
   13b0c:	bl	11628 <dcgettext@plt>
   13b10:	ldr	r1, [pc, #328]	; 13c60 <__assert_fail@plt+0x2290>
   13b14:	mov	r2, #5
   13b18:	mov	r6, r0
   13b1c:	mov	r0, #0
   13b20:	bl	11628 <dcgettext@plt>
   13b24:	cmp	r8, #3
   13b28:	mov	r2, #5
   13b2c:	ldreq	r1, [pc, #304]	; 13c64 <__assert_fail@plt+0x2294>
   13b30:	ldrne	r1, [pc, #304]	; 13c68 <__assert_fail@plt+0x2298>
   13b34:	mov	r7, r0
   13b38:	mov	r0, #0
   13b3c:	bl	11628 <dcgettext@plt>
   13b40:	mov	r2, #5
   13b44:	ldr	r1, [pc, #288]	; 13c6c <__assert_fail@plt+0x229c>
   13b48:	mov	r4, r0
   13b4c:	mov	r0, #0
   13b50:	bl	11628 <dcgettext@plt>
   13b54:	mov	r2, #5
   13b58:	ldr	r1, [pc, #272]	; 13c70 <__assert_fail@plt+0x22a0>
   13b5c:	mov	r9, r0
   13b60:	mov	r0, #0
   13b64:	bl	11628 <dcgettext@plt>
   13b68:	str	r9, [sp, #12]
   13b6c:	str	r4, [sp, #8]
   13b70:	strd	r6, [sp]
   13b74:	mov	r3, r5
   13b78:	ldr	r2, [sp, #24]
   13b7c:	ldr	r1, [pc, #240]	; 13c74 <__assert_fail@plt+0x22a4>
   13b80:	str	r0, [sp, #16]
   13b84:	mov	r0, #1
   13b88:	bl	11868 <__printf_chk@plt>
   13b8c:	b	12fa8 <__assert_fail@plt+0x15d8>
   13b90:	mov	r2, #5
   13b94:	ldr	r1, [pc, #220]	; 13c78 <__assert_fail@plt+0x22a8>
   13b98:	mov	r0, #0
   13b9c:	bl	11628 <dcgettext@plt>
   13ba0:	mov	r1, r0
   13ba4:	mov	r0, #1
   13ba8:	bl	11868 <__printf_chk@plt>
   13bac:	mov	r2, #5
   13bb0:	ldr	r1, [pc, #156]	; 13c54 <__assert_fail@plt+0x2284>
   13bb4:	mov	r0, #0
   13bb8:	bl	11628 <dcgettext@plt>
   13bbc:	mov	r2, #5
   13bc0:	ldr	r1, [pc, #180]	; 13c7c <__assert_fail@plt+0x22ac>
   13bc4:	mov	r7, r0
   13bc8:	mov	r0, #0
   13bcc:	bl	11628 <dcgettext@plt>
   13bd0:	mov	r2, #5
   13bd4:	ldr	r1, [pc, #128]	; 13c5c <__assert_fail@plt+0x228c>
   13bd8:	mov	r4, r0
   13bdc:	mov	r0, #0
   13be0:	bl	11628 <dcgettext@plt>
   13be4:	ldr	r1, [pc, #116]	; 13c60 <__assert_fail@plt+0x2290>
   13be8:	mov	r2, #5
   13bec:	mov	r5, r0
   13bf0:	mov	r0, #0
   13bf4:	bl	11628 <dcgettext@plt>
   13bf8:	cmp	r8, #3
   13bfc:	mov	r2, #5
   13c00:	ldreq	r1, [pc, #92]	; 13c64 <__assert_fail@plt+0x2294>
   13c04:	ldrne	r1, [pc, #116]	; 13c80 <__assert_fail@plt+0x22b0>
   13c08:	mov	r6, r0
   13c0c:	mov	r0, #0
   13c10:	bl	11628 <dcgettext@plt>
   13c14:	mov	r2, #5
   13c18:	ldr	r1, [pc, #100]	; 13c84 <__assert_fail@plt+0x22b4>
   13c1c:	mov	r9, r0
   13c20:	mov	r0, #0
   13c24:	bl	11628 <dcgettext@plt>
   13c28:	stm	sp, {r5, r6, r9}
   13c2c:	mov	r3, r4
   13c30:	mov	r2, r7
   13c34:	ldr	r1, [pc, #76]	; 13c88 <__assert_fail@plt+0x22b8>
   13c38:	str	r0, [sp, #12]
   13c3c:	mov	r0, #1
   13c40:	bl	11868 <__printf_chk@plt>
   13c44:	b	12124 <__assert_fail@plt+0x754>
   13c48:	andeq	fp, r1, r8, ror #10
   13c4c:	andeq	sl, r1, r0, lsr #20
   13c50:	andeq	fp, r1, ip, ror #4
   13c54:	andeq	sl, r1, ip, asr #30
   13c58:	andeq	fp, r1, r4, lsr #3
   13c5c:			; <UNDEFINED> instruction: 0x0001aeb4
   13c60:	andeq	sl, r1, r4, lsr lr
   13c64:	andeq	fp, r1, ip, lsl #1
   13c68:	andeq	fp, r1, r4, lsl #12
   13c6c:	muleq	r1, r4, r2
   13c70:	muleq	r1, ip, r2
   13c74:	andeq	fp, r1, r4, lsr #5
   13c78:	andeq	sl, r1, ip, lsr #30
   13c7c:	andeq	sl, r1, ip, lsr #28
   13c80:	andeq	sl, r1, r0, asr pc
   13c84:	andeq	sl, r1, ip, asr pc
   13c88:	andeq	sl, r1, r8, ror #30
   13c8c:	mov	fp, #0
   13c90:	mov	lr, #0
   13c94:	pop	{r1}		; (ldr r1, [sp], #4)
   13c98:	mov	r2, sp
   13c9c:	push	{r2}		; (str r2, [sp, #-4]!)
   13ca0:	push	{r0}		; (str r0, [sp, #-4]!)
   13ca4:	ldr	ip, [pc, #16]	; 13cbc <__assert_fail@plt+0x22ec>
   13ca8:	push	{ip}		; (str ip, [sp, #-4]!)
   13cac:	ldr	r0, [pc, #12]	; 13cc0 <__assert_fail@plt+0x22f0>
   13cb0:	ldr	r3, [pc, #12]	; 13cc4 <__assert_fail@plt+0x22f4>
   13cb4:	bl	11700 <__libc_start_main@plt>
   13cb8:	bl	11988 <abort@plt>
   13cbc:	andeq	sl, r1, r4, asr #10
   13cc0:	andeq	r1, r1, r0, ror #19
   13cc4:	andeq	sl, r1, r4, ror #9
   13cc8:	ldr	r3, [pc, #20]	; 13ce4 <__assert_fail@plt+0x2314>
   13ccc:	ldr	r2, [pc, #20]	; 13ce8 <__assert_fail@plt+0x2318>
   13cd0:	add	r3, pc, r3
   13cd4:	ldr	r2, [r3, r2]
   13cd8:	cmp	r2, #0
   13cdc:	bxeq	lr
   13ce0:	b	1173c <__gmon_start__@plt>
   13ce4:	andeq	r8, r1, ip, ror r1
   13ce8:	andeq	r0, r0, r8, lsr #3
   13cec:	ldr	r0, [pc, #24]	; 13d0c <__assert_fail@plt+0x233c>
   13cf0:	ldr	r3, [pc, #24]	; 13d10 <__assert_fail@plt+0x2340>
   13cf4:	cmp	r3, r0
   13cf8:	bxeq	lr
   13cfc:	ldr	r3, [pc, #16]	; 13d14 <__assert_fail@plt+0x2344>
   13d00:	cmp	r3, #0
   13d04:	bxeq	lr
   13d08:	bx	r3
   13d0c:	andeq	ip, r2, ip
   13d10:	andeq	ip, r2, ip
   13d14:	andeq	r0, r0, r0
   13d18:	ldr	r0, [pc, #36]	; 13d44 <__assert_fail@plt+0x2374>
   13d1c:	ldr	r1, [pc, #36]	; 13d48 <__assert_fail@plt+0x2378>
   13d20:	sub	r1, r1, r0
   13d24:	asr	r1, r1, #2
   13d28:	add	r1, r1, r1, lsr #31
   13d2c:	asrs	r1, r1, #1
   13d30:	bxeq	lr
   13d34:	ldr	r3, [pc, #16]	; 13d4c <__assert_fail@plt+0x237c>
   13d38:	cmp	r3, #0
   13d3c:	bxeq	lr
   13d40:	bx	r3
   13d44:	andeq	ip, r2, ip
   13d48:	andeq	ip, r2, ip
   13d4c:	andeq	r0, r0, r0
   13d50:	push	{r4, lr}
   13d54:	ldr	r4, [pc, #24]	; 13d74 <__assert_fail@plt+0x23a4>
   13d58:	ldrb	r3, [r4]
   13d5c:	cmp	r3, #0
   13d60:	popne	{r4, pc}
   13d64:	bl	13cec <__assert_fail@plt+0x231c>
   13d68:	mov	r3, #1
   13d6c:	strb	r3, [r4]
   13d70:	pop	{r4, pc}
   13d74:	andeq	ip, r2, r4, lsr #32
   13d78:	b	13d18 <__assert_fail@plt+0x2348>
   13d7c:	ldr	r3, [pc, #292]	; 13ea8 <__assert_fail@plt+0x24d8>
   13d80:	push	{r4, r5, r6, lr}
   13d84:	ldr	r4, [r3]
   13d88:	mov	r0, r4
   13d8c:	bl	116b8 <__fpending@plt>
   13d90:	mov	r6, r0
   13d94:	mov	r0, r4
   13d98:	bl	115c8 <ferror@plt>
   13d9c:	mov	r5, r0
   13da0:	mov	r0, r4
   13da4:	bl	118b0 <fclose@plt>
   13da8:	cmp	r5, #0
   13dac:	mov	r4, r0
   13db0:	bne	13e58 <__assert_fail@plt+0x2488>
   13db4:	cmp	r0, #0
   13db8:	beq	13dd4 <__assert_fail@plt+0x2404>
   13dbc:	bl	117d8 <__errno_location@plt>
   13dc0:	cmp	r6, #0
   13dc4:	ldr	r3, [r0]
   13dc8:	bne	13e30 <__assert_fail@plt+0x2460>
   13dcc:	cmp	r3, #9
   13dd0:	bne	13e30 <__assert_fail@plt+0x2460>
   13dd4:	ldr	r3, [pc, #208]	; 13eac <__assert_fail@plt+0x24dc>
   13dd8:	ldr	r4, [r3]
   13ddc:	mov	r0, r4
   13de0:	bl	116b8 <__fpending@plt>
   13de4:	mov	r6, r0
   13de8:	mov	r0, r4
   13dec:	bl	115c8 <ferror@plt>
   13df0:	mov	r5, r0
   13df4:	mov	r0, r4
   13df8:	bl	118b0 <fclose@plt>
   13dfc:	cmp	r5, #0
   13e00:	mov	r4, r0
   13e04:	bne	13e8c <__assert_fail@plt+0x24bc>
   13e08:	cmp	r0, #0
   13e0c:	popeq	{r4, r5, r6, pc}
   13e10:	cmp	r6, #0
   13e14:	bne	13e28 <__assert_fail@plt+0x2458>
   13e18:	bl	117d8 <__errno_location@plt>
   13e1c:	ldr	r3, [r0]
   13e20:	cmp	r3, #9
   13e24:	popeq	{r4, r5, r6, pc}
   13e28:	mov	r0, #1
   13e2c:	bl	115ec <_exit@plt>
   13e30:	cmp	r3, #32
   13e34:	beq	13dd4 <__assert_fail@plt+0x2404>
   13e38:	cmp	r3, #0
   13e3c:	beq	13e74 <__assert_fail@plt+0x24a4>
   13e40:	mov	r2, #5
   13e44:	ldr	r1, [pc, #100]	; 13eb0 <__assert_fail@plt+0x24e0>
   13e48:	mov	r0, #0
   13e4c:	bl	11628 <dcgettext@plt>
   13e50:	bl	118f8 <warn@plt>
   13e54:	b	13e28 <__assert_fail@plt+0x2458>
   13e58:	bl	117d8 <__errno_location@plt>
   13e5c:	cmp	r4, #0
   13e60:	ldr	r3, [r0]
   13e64:	bne	13e30 <__assert_fail@plt+0x2460>
   13e68:	cmp	r3, #32
   13e6c:	strne	r4, [r0]
   13e70:	beq	13dd4 <__assert_fail@plt+0x2404>
   13e74:	mov	r2, #5
   13e78:	ldr	r1, [pc, #48]	; 13eb0 <__assert_fail@plt+0x24e0>
   13e7c:	mov	r0, #0
   13e80:	bl	11628 <dcgettext@plt>
   13e84:	bl	117b4 <warnx@plt>
   13e88:	b	13e28 <__assert_fail@plt+0x2458>
   13e8c:	cmp	r0, #0
   13e90:	bne	13e28 <__assert_fail@plt+0x2458>
   13e94:	bl	117d8 <__errno_location@plt>
   13e98:	ldr	r3, [r0]
   13e9c:	cmp	r3, #32
   13ea0:	strne	r4, [r0]
   13ea4:	b	13e28 <__assert_fail@plt+0x2458>
   13ea8:	andeq	ip, r2, ip, lsl r0
   13eac:	andeq	ip, r2, r8, lsl r0
   13eb0:	andeq	sl, r1, ip, asr r6
   13eb4:	push	{r4, r5, r6, r7, r8, lr}
   13eb8:	ldrd	r4, [r0, #48]	; 0x30
   13ebc:	orrs	r3, r4, r5
   13ec0:	popeq	{r4, r5, r6, r7, r8, pc}
   13ec4:	ldr	r7, [r0]
   13ec8:	cmp	r7, #0
   13ecc:	poplt	{r4, r5, r6, r7, r8, pc}
   13ed0:	mov	r6, r0
   13ed4:	mov	r1, #16
   13ed8:	mov	r0, r4
   13edc:	bl	1152c <calloc@plt>
   13ee0:	cmp	r4, #0
   13ee4:	moveq	r4, #0
   13ee8:	clz	r3, r0
   13eec:	lsr	r3, r3, #5
   13ef0:	movne	r4, r3
   13ef4:	cmp	r4, #0
   13ef8:	mov	r8, r0
   13efc:	streq	r0, [r6, #56]	; 0x38
   13f00:	beq	13f88 <__assert_fail@plt+0x25b8>
   13f04:	b	1402c <__assert_fail@plt+0x265c>
   13f08:	mov	r3, #0
   13f0c:	mov	r2, #14
   13f10:	mov	r1, r4
   13f14:	ldr	r0, [r6]
   13f18:	bl	118c8 <semctl@plt>
   13f1c:	cmp	r0, #0
   13f20:	str	r0, [r5, #4]
   13f24:	blt	13fcc <__assert_fail@plt+0x25fc>
   13f28:	mov	r3, #0
   13f2c:	mov	r2, #15
   13f30:	mov	r1, r4
   13f34:	ldr	r0, [r6]
   13f38:	bl	118c8 <semctl@plt>
   13f3c:	cmp	r0, #0
   13f40:	str	r0, [r5, #8]
   13f44:	blt	13fec <__assert_fail@plt+0x261c>
   13f48:	mov	r3, #0
   13f4c:	mov	r2, #11
   13f50:	mov	r1, r4
   13f54:	ldr	r0, [r6]
   13f58:	bl	118c8 <semctl@plt>
   13f5c:	cmp	r0, #0
   13f60:	str	r0, [r5, #12]
   13f64:	blt	1400c <__assert_fail@plt+0x263c>
   13f68:	ldrd	r2, [r6, #48]	; 0x30
   13f6c:	mov	r1, #0
   13f70:	add	r4, r4, #1
   13f74:	cmp	r1, r3
   13f78:	cmpeq	r4, r2
   13f7c:	popcs	{r4, r5, r6, r7, r8, pc}
   13f80:	ldr	r8, [r6, #56]	; 0x38
   13f84:	ldr	r7, [r6]
   13f88:	mov	r0, r7
   13f8c:	mov	r3, #0
   13f90:	mov	r2, #12
   13f94:	mov	r1, r4
   13f98:	bl	118c8 <semctl@plt>
   13f9c:	add	r5, r8, r4, lsl #4
   13fa0:	cmp	r0, #0
   13fa4:	str	r0, [r8, r4, lsl #4]
   13fa8:	bge	13f08 <__assert_fail@plt+0x2538>
   13fac:	mov	r2, #5
   13fb0:	ldr	r1, [pc, #132]	; 1403c <__assert_fail@plt+0x266c>
   13fb4:	mov	r0, #0
   13fb8:	bl	11628 <dcgettext@plt>
   13fbc:	ldr	r2, [pc, #124]	; 14040 <__assert_fail@plt+0x2670>
   13fc0:	mov	r1, r0
   13fc4:	mov	r0, #1
   13fc8:	bl	11670 <err@plt>
   13fcc:	mov	r2, #5
   13fd0:	ldr	r1, [pc, #100]	; 1403c <__assert_fail@plt+0x266c>
   13fd4:	mov	r0, #0
   13fd8:	bl	11628 <dcgettext@plt>
   13fdc:	ldr	r2, [pc, #96]	; 14044 <__assert_fail@plt+0x2674>
   13fe0:	mov	r1, r0
   13fe4:	mov	r0, #1
   13fe8:	bl	11670 <err@plt>
   13fec:	mov	r2, #5
   13ff0:	ldr	r1, [pc, #68]	; 1403c <__assert_fail@plt+0x266c>
   13ff4:	mov	r0, #0
   13ff8:	bl	11628 <dcgettext@plt>
   13ffc:	ldr	r2, [pc, #68]	; 14048 <__assert_fail@plt+0x2678>
   14000:	mov	r1, r0
   14004:	mov	r0, #1
   14008:	bl	11670 <err@plt>
   1400c:	mov	r2, #5
   14010:	ldr	r1, [pc, #36]	; 1403c <__assert_fail@plt+0x266c>
   14014:	mov	r0, #0
   14018:	bl	11628 <dcgettext@plt>
   1401c:	ldr	r2, [pc, #40]	; 1404c <__assert_fail@plt+0x267c>
   14020:	mov	r1, r0
   14024:	mov	r0, #1
   14028:	bl	11670 <err@plt>
   1402c:	mov	r2, #16
   14030:	ldr	r1, [pc, #24]	; 14050 <__assert_fail@plt+0x2680>
   14034:	mov	r0, #1
   14038:	bl	11670 <err@plt>
   1403c:	andeq	fp, r1, ip, lsl #12
   14040:	andeq	fp, r1, r8, lsl r6
   14044:	andeq	fp, r1, r8, lsr #12
   14048:	andeq	fp, r1, r8, lsr r6
   1404c:	andeq	fp, r1, r8, asr #12
   14050:	strdeq	fp, [r1], -r0
   14054:	push	{r4, r5, r6, lr}
   14058:	sub	sp, sp, #40	; 0x28
   1405c:	ldr	r5, [pc, #196]	; 14128 <__assert_fail@plt+0x2758>
   14060:	mov	r1, #0
   14064:	mov	r4, r0
   14068:	ldr	r3, [r5]
   1406c:	ldr	r0, [pc, #184]	; 1412c <__assert_fail@plt+0x275c>
   14070:	str	r3, [sp, #36]	; 0x24
   14074:	bl	118a4 <access@plt>
   14078:	subs	r1, r0, #0
   1407c:	bne	14090 <__assert_fail@plt+0x26c0>
   14080:	ldr	r0, [pc, #168]	; 14130 <__assert_fail@plt+0x2760>
   14084:	bl	118a4 <access@plt>
   14088:	subs	r1, r0, #0
   1408c:	beq	140e4 <__assert_fail@plt+0x2714>
   14090:	add	r2, sp, #4
   14094:	mov	r1, #3
   14098:	mov	r0, #0
   1409c:	bl	1164c <msgctl@plt>
   140a0:	cmp	r0, #0
   140a4:	movlt	r6, #1
   140a8:	ldrge	r2, [sp, #12]
   140ac:	ldrge	r0, [sp, #20]
   140b0:	ldrge	r1, [sp, #16]
   140b4:	asrge	r3, r2, #31
   140b8:	movge	r6, #0
   140bc:	strdge	r2, [r4, #56]	; 0x38
   140c0:	strge	r0, [r4, #52]	; 0x34
   140c4:	strge	r1, [r4, #64]	; 0x40
   140c8:	ldr	r2, [sp, #36]	; 0x24
   140cc:	ldr	r3, [r5]
   140d0:	mov	r0, r6
   140d4:	cmp	r2, r3
   140d8:	bne	14124 <__assert_fail@plt+0x2754>
   140dc:	add	sp, sp, #40	; 0x28
   140e0:	pop	{r4, r5, r6, pc}
   140e4:	ldr	r0, [pc, #72]	; 14134 <__assert_fail@plt+0x2764>
   140e8:	bl	118a4 <access@plt>
   140ec:	subs	r6, r0, #0
   140f0:	bne	14090 <__assert_fail@plt+0x26c0>
   140f4:	add	r1, r4, #52	; 0x34
   140f8:	ldr	r2, [pc, #44]	; 1412c <__assert_fail@plt+0x275c>
   140fc:	bl	18db4 <__assert_fail@plt+0x73e4>
   14100:	add	r1, r4, #64	; 0x40
   14104:	ldr	r2, [pc, #36]	; 14130 <__assert_fail@plt+0x2760>
   14108:	mov	r0, r6
   1410c:	bl	18db4 <__assert_fail@plt+0x73e4>
   14110:	add	r1, r4, #56	; 0x38
   14114:	ldr	r2, [pc, #24]	; 14134 <__assert_fail@plt+0x2764>
   14118:	mov	r0, r6
   1411c:	bl	18c9c <__assert_fail@plt+0x72cc>
   14120:	b	140c8 <__assert_fail@plt+0x26f8>
   14124:	bl	11640 <__stack_chk_fail@plt>
   14128:	andeq	fp, r2, r0, asr sp
   1412c:	andeq	fp, r1, r8, asr r6
   14130:	andeq	fp, r1, r0, ror r6
   14134:	andeq	fp, r1, r8, lsl #13
   14138:	push	{r4, r5, r6, r7, lr}
   1413c:	sub	sp, sp, #60	; 0x3c
   14140:	ldr	r5, [pc, #204]	; 14214 <__assert_fail@plt+0x2844>
   14144:	ldr	r2, [pc, #204]	; 14218 <__assert_fail@plt+0x2848>
   14148:	mov	r4, r0
   1414c:	ldr	r3, [r5]
   14150:	str	r2, [r0, #48]	; 0x30
   14154:	ldr	r1, [pc, #192]	; 1421c <__assert_fail@plt+0x284c>
   14158:	ldr	r0, [pc, #192]	; 14220 <__assert_fail@plt+0x2850>
   1415c:	str	r3, [sp, #52]	; 0x34
   14160:	bl	1194c <fopen64@plt>
   14164:	subs	r6, r0, #0
   14168:	beq	141a4 <__assert_fail@plt+0x27d4>
   1416c:	add	r2, r4, #32
   14170:	add	r3, r4, #44	; 0x2c
   14174:	str	r2, [sp, #4]
   14178:	str	r3, [sp]
   1417c:	add	r2, r4, #36	; 0x24
   14180:	add	r3, r4, #40	; 0x28
   14184:	ldr	r1, [pc, #152]	; 14224 <__assert_fail@plt+0x2854>
   14188:	bl	11850 <fscanf@plt>
   1418c:	mov	r7, r0
   14190:	mov	r0, r6
   14194:	bl	118b0 <fclose@plt>
   14198:	cmp	r7, #4
   1419c:	moveq	r0, #0
   141a0:	beq	141f0 <__assert_fail@plt+0x2820>
   141a4:	mov	r2, #40	; 0x28
   141a8:	mov	r1, #0
   141ac:	add	r0, sp, #12
   141b0:	bl	1182c <memset@plt>
   141b4:	mov	r1, #0
   141b8:	add	r3, sp, #12
   141bc:	mov	r0, r1
   141c0:	mov	r2, #3
   141c4:	bl	118c8 <semctl@plt>
   141c8:	cmp	r0, #0
   141cc:	blt	14208 <__assert_fail@plt+0x2838>
   141d0:	ldr	r0, [sp, #16]
   141d4:	ldr	r2, [sp, #20]
   141d8:	ldr	r3, [sp, #32]
   141dc:	ldr	r1, [sp, #28]
   141e0:	str	r0, [r4, #32]
   141e4:	mov	r0, #0
   141e8:	str	r1, [r4, #36]	; 0x24
   141ec:	strd	r2, [r4, #40]	; 0x28
   141f0:	ldr	r2, [sp, #52]	; 0x34
   141f4:	ldr	r3, [r5]
   141f8:	cmp	r2, r3
   141fc:	bne	14210 <__assert_fail@plt+0x2840>
   14200:	add	sp, sp, #60	; 0x3c
   14204:	pop	{r4, r5, r6, r7, pc}
   14208:	mov	r0, #1
   1420c:	b	141f0 <__assert_fail@plt+0x2820>
   14210:	bl	11640 <__stack_chk_fail@plt>
   14214:	andeq	fp, r2, r0, asr sp
   14218:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1421c:			; <UNDEFINED> instruction: 0x0001aeb8
   14220:	andeq	fp, r1, r0, lsr #13
   14224:			; <UNDEFINED> instruction: 0x0001b6b8
   14228:	push	{r4, r5, r6, lr}
   1422c:	mov	r1, #0
   14230:	ldr	r5, [pc, #224]	; 14318 <__assert_fail@plt+0x2948>
   14234:	mov	r4, r0
   14238:	mov	r0, #1
   1423c:	sub	sp, sp, #88	; 0x58
   14240:	ldr	r3, [r5]
   14244:	strd	r0, [r4, #24]
   14248:	mov	r1, #0
   1424c:	ldr	r0, [pc, #200]	; 1431c <__assert_fail@plt+0x294c>
   14250:	str	r3, [sp, #84]	; 0x54
   14254:	bl	118a4 <access@plt>
   14258:	subs	r1, r0, #0
   1425c:	bne	14270 <__assert_fail@plt+0x28a0>
   14260:	ldr	r0, [pc, #184]	; 14320 <__assert_fail@plt+0x2950>
   14264:	bl	118a4 <access@plt>
   14268:	subs	r1, r0, #0
   1426c:	beq	142d4 <__assert_fail@plt+0x2904>
   14270:	mov	r2, sp
   14274:	mov	r1, #3
   14278:	mov	r0, #0
   1427c:	bl	116c4 <shmctl@plt>
   14280:	cmp	r0, #0
   14284:	movlt	r6, #1
   14288:	blt	142b8 <__assert_fail@plt+0x28e8>
   1428c:	mov	r3, #0
   14290:	mov	r6, r3
   14294:	ldr	r1, [sp, #8]
   14298:	ldr	r2, [sp, #16]
   1429c:	str	r3, [r4, #4]
   142a0:	str	r3, [r4, #20]
   142a4:	str	r3, [r4, #12]
   142a8:	ldr	r3, [sp]
   142ac:	str	r1, [r4]
   142b0:	str	r2, [r4, #16]
   142b4:	str	r3, [r4, #8]
   142b8:	ldr	r2, [sp, #84]	; 0x54
   142bc:	ldr	r3, [r5]
   142c0:	mov	r0, r6
   142c4:	cmp	r2, r3
   142c8:	bne	14314 <__assert_fail@plt+0x2944>
   142cc:	add	sp, sp, #88	; 0x58
   142d0:	pop	{r4, r5, r6, pc}
   142d4:	ldr	r0, [pc, #72]	; 14324 <__assert_fail@plt+0x2954>
   142d8:	bl	118a4 <access@plt>
   142dc:	subs	r6, r0, #0
   142e0:	bne	14270 <__assert_fail@plt+0x28a0>
   142e4:	add	r1, r4, #16
   142e8:	ldr	r2, [pc, #44]	; 1431c <__assert_fail@plt+0x294c>
   142ec:	bl	18c9c <__assert_fail@plt+0x72cc>
   142f0:	add	r1, r4, #8
   142f4:	ldr	r2, [pc, #36]	; 14320 <__assert_fail@plt+0x2950>
   142f8:	mov	r0, r6
   142fc:	bl	18c9c <__assert_fail@plt+0x72cc>
   14300:	mov	r1, r4
   14304:	ldr	r2, [pc, #24]	; 14324 <__assert_fail@plt+0x2954>
   14308:	mov	r0, r6
   1430c:	bl	18c9c <__assert_fail@plt+0x72cc>
   14310:	b	142b8 <__assert_fail@plt+0x28e8>
   14314:	bl	11640 <__stack_chk_fail@plt>
   14318:	andeq	fp, r2, r0, asr sp
   1431c:	andeq	fp, r1, r4, asr #13
   14320:	ldrdeq	fp, [r1], -ip
   14324:	strdeq	fp, [r1], -r4
   14328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1432c:	sub	sp, sp, #8384	; 0x20c0
   14330:	ldr	r9, [pc, #792]	; 14650 <__assert_fail@plt+0x2c80>
   14334:	sub	sp, sp, #52	; 0x34
   14338:	add	r2, sp, #8384	; 0x20c0
   1433c:	ldr	r3, [r9]
   14340:	add	r2, r2, #44	; 0x2c
   14344:	mov	r8, r0
   14348:	mov	sl, r1
   1434c:	mov	r0, #1
   14350:	mov	r1, #104	; 0x68
   14354:	str	r3, [r2]
   14358:	bl	1152c <calloc@plt>
   1435c:	subs	r4, r0, #0
   14360:	beq	144a4 <__assert_fail@plt+0x2ad4>
   14364:	mov	r3, #0
   14368:	str	r4, [sl]
   1436c:	str	r3, [r4, #96]	; 0x60
   14370:	ldr	r1, [pc, #732]	; 14654 <__assert_fail@plt+0x2c84>
   14374:	ldr	r0, [pc, #732]	; 14658 <__assert_fail@plt+0x2c88>
   14378:	bl	1194c <fopen64@plt>
   1437c:	subs	r5, r0, #0
   14380:	beq	14504 <__assert_fail@plt+0x2b34>
   14384:	mov	r0, r5
   14388:	bl	1185c <fgetc@plt>
   1438c:	cmp	r0, #10
   14390:	bne	14384 <__assert_fail@plt+0x29b4>
   14394:	ldr	r6, [pc, #704]	; 1465c <__assert_fail@plt+0x2c8c>
   14398:	ldr	fp, [pc, #704]	; 14660 <__assert_fail@plt+0x2c90>
   1439c:	mov	r7, #0
   143a0:	mov	r3, #0
   143a4:	str	r3, [sp, #56]	; 0x38
   143a8:	str	sl, [sp, #60]	; 0x3c
   143ac:	mov	r2, r5
   143b0:	mov	r1, #8192	; 0x2000
   143b4:	add	r0, sp, #236	; 0xec
   143b8:	bl	115a4 <fgets@plt>
   143bc:	cmp	r0, #0
   143c0:	beq	144e8 <__assert_fail@plt+0x2b18>
   143c4:	add	ip, r4, #88	; 0x58
   143c8:	add	r0, r4, #80	; 0x50
   143cc:	strd	r6, [r4, #80]	; 0x50
   143d0:	strd	r6, [r4, #88]	; 0x58
   143d4:	add	r1, r4, #64	; 0x40
   143d8:	add	r2, r4, #56	; 0x38
   143dc:	add	r3, r4, #48	; 0x30
   143e0:	str	ip, [sp, #52]	; 0x34
   143e4:	str	r0, [sp, #48]	; 0x30
   143e8:	add	ip, r4, #20
   143ec:	add	r0, r4, #16
   143f0:	str	r1, [sp, #44]	; 0x2c
   143f4:	str	r2, [sp, #40]	; 0x28
   143f8:	add	r1, r4, #12
   143fc:	add	lr, r4, #8
   14400:	str	r3, [sp, #36]	; 0x24
   14404:	str	ip, [sp, #32]
   14408:	str	r0, [sp, #28]
   1440c:	add	ip, r4, #76	; 0x4c
   14410:	add	r0, r4, #72	; 0x48
   14414:	add	r2, r4, #40	; 0x28
   14418:	add	r3, r4, #24
   1441c:	add	sl, r4, #32
   14420:	str	r1, [sp, #24]
   14424:	str	r0, [sp, #8]
   14428:	str	r2, [sp, #4]
   1442c:	str	r3, [sp]
   14430:	str	lr, [sp, #20]
   14434:	str	sl, [sp, #16]
   14438:	str	ip, [sp, #12]
   1443c:	mov	r3, r4
   14440:	add	r2, r4, #4
   14444:	mov	r1, fp
   14448:	add	r0, sp, #236	; 0xec
   1444c:	bl	11910 <sscanf@plt>
   14450:	cmp	r0, #13
   14454:	ble	143ac <__assert_fail@plt+0x29dc>
   14458:	cmp	r8, #0
   1445c:	blt	144b4 <__assert_fail@plt+0x2ae4>
   14460:	ldr	r3, [r4]
   14464:	cmp	r3, r8
   14468:	bne	143ac <__assert_fail@plt+0x29dc>
   1446c:	mov	r3, #1
   14470:	str	r3, [sp, #56]	; 0x38
   14474:	mov	r0, r5
   14478:	bl	118b0 <fclose@plt>
   1447c:	add	r3, sp, #8384	; 0x20c0
   14480:	add	r3, r3, #44	; 0x2c
   14484:	ldr	r2, [r3]
   14488:	ldr	r3, [r9]
   1448c:	ldr	r0, [sp, #56]	; 0x38
   14490:	cmp	r2, r3
   14494:	bne	1464c <__assert_fail@plt+0x2c7c>
   14498:	add	sp, sp, #8384	; 0x20c0
   1449c:	add	sp, sp, #52	; 0x34
   144a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a4:	mov	r2, #104	; 0x68
   144a8:	ldr	r1, [pc, #436]	; 14664 <__assert_fail@plt+0x2c94>
   144ac:	mov	r0, #1
   144b0:	bl	11670 <err@plt>
   144b4:	mov	r1, #104	; 0x68
   144b8:	mov	r0, #1
   144bc:	bl	1152c <calloc@plt>
   144c0:	cmp	r0, #0
   144c4:	beq	144a4 <__assert_fail@plt+0x2ad4>
   144c8:	ldr	r3, [sp, #56]	; 0x38
   144cc:	str	r0, [r4, #96]	; 0x60
   144d0:	add	r3, r3, #1
   144d4:	str	r3, [sp, #56]	; 0x38
   144d8:	mov	r3, #0
   144dc:	mov	r4, r0
   144e0:	str	r3, [r0, #96]	; 0x60
   144e4:	b	143ac <__assert_fail@plt+0x29dc>
   144e8:	ldr	r3, [sp, #56]	; 0x38
   144ec:	ldr	sl, [sp, #60]	; 0x3c
   144f0:	cmp	r3, #0
   144f4:	bne	14474 <__assert_fail@plt+0x2aa4>
   144f8:	ldr	r0, [sl]
   144fc:	bl	11598 <free@plt>
   14500:	b	14474 <__assert_fail@plt+0x2aa4>
   14504:	add	r2, sp, #68	; 0x44
   14508:	mov	r1, #14
   1450c:	bl	116c4 <shmctl@plt>
   14510:	subs	r6, r0, #0
   14514:	mvnge	r7, r8
   14518:	movge	fp, r5
   1451c:	lsrge	r7, r7, #31
   14520:	strge	sl, [sp, #60]	; 0x3c
   14524:	blt	14630 <__assert_fail@plt+0x2c60>
   14528:	add	r2, sp, #152	; 0x98
   1452c:	mov	r1, #13
   14530:	mov	r0, r5
   14534:	bl	116c4 <shmctl@plt>
   14538:	cmp	r0, #0
   1453c:	blt	14614 <__assert_fail@plt+0x2c44>
   14540:	cmp	r0, r8
   14544:	moveq	sl, #0
   14548:	andne	sl, r7, #1
   1454c:	cmp	sl, #0
   14550:	bne	14614 <__assert_fail@plt+0x2c44>
   14554:	ldr	r3, [sp, #192]	; 0xc0
   14558:	ldr	r2, [pc, #252]	; 1465c <__assert_fail@plt+0x2c8c>
   1455c:	ldr	lr, [sp, #200]	; 0xc8
   14560:	asr	r1, r3, #31
   14564:	str	r0, [r4]
   14568:	mov	r0, r3
   1456c:	mov	r3, #0
   14570:	ldr	ip, [sp, #208]	; 0xd0
   14574:	strd	r0, [r4, #48]	; 0x30
   14578:	strd	r2, [r4, #80]	; 0x50
   1457c:	mov	r0, lr
   14580:	asr	r1, lr, #31
   14584:	strd	r2, [r4, #88]	; 0x58
   14588:	ldrh	r2, [sp, #172]	; 0xac
   1458c:	strd	r0, [r4, #56]	; 0x38
   14590:	mov	r0, ip
   14594:	asr	r1, ip, #31
   14598:	str	r2, [r4, #24]
   1459c:	ldr	r2, [sp, #152]	; 0x98
   145a0:	strd	r0, [r4, #64]	; 0x40
   145a4:	ldr	r0, [sp, #188]	; 0xbc
   145a8:	ldr	r1, [sp, #216]	; 0xd8
   145ac:	str	r2, [r4, #4]
   145b0:	ldr	r2, [sp, #220]	; 0xdc
   145b4:	str	r0, [r4, #40]	; 0x28
   145b8:	str	r1, [r4, #72]	; 0x48
   145bc:	ldr	r0, [sp, #156]	; 0x9c
   145c0:	ldr	r1, [sp, #160]	; 0xa0
   145c4:	ldr	ip, [sp, #224]	; 0xe0
   145c8:	str	r2, [r4, #76]	; 0x4c
   145cc:	ldr	r2, [sp, #164]	; 0xa4
   145d0:	cmp	r8, #0
   145d4:	add	fp, fp, #1
   145d8:	str	sl, [r4, #44]	; 0x2c
   145dc:	str	sl, [r4, #36]	; 0x24
   145e0:	str	ip, [r4, #32]
   145e4:	strd	r0, [r4, #8]
   145e8:	str	r2, [r4, #16]
   145ec:	str	r2, [r4, #20]
   145f0:	bge	14644 <__assert_fail@plt+0x2c74>
   145f4:	mov	r1, #104	; 0x68
   145f8:	mov	r0, #1
   145fc:	bl	1152c <calloc@plt>
   14600:	cmp	r0, #0
   14604:	beq	144a4 <__assert_fail@plt+0x2ad4>
   14608:	str	r0, [r4, #96]	; 0x60
   1460c:	mov	r4, r0
   14610:	str	sl, [r0, #96]	; 0x60
   14614:	add	r5, r5, #1
   14618:	cmp	r6, r5
   1461c:	bge	14528 <__assert_fail@plt+0x2b58>
   14620:	cmp	fp, #0
   14624:	str	fp, [sp, #56]	; 0x38
   14628:	ldr	sl, [sp, #60]	; 0x3c
   1462c:	bne	1447c <__assert_fail@plt+0x2aac>
   14630:	ldr	r0, [sl]
   14634:	bl	11598 <free@plt>
   14638:	mov	r3, #0
   1463c:	str	r3, [sp, #56]	; 0x38
   14640:	b	1447c <__assert_fail@plt+0x2aac>
   14644:	str	fp, [sp, #56]	; 0x38
   14648:	b	1447c <__assert_fail@plt+0x2aac>
   1464c:	bl	11640 <__stack_chk_fail@plt>
   14650:	andeq	fp, r2, r0, asr sp
   14654:			; <UNDEFINED> instruction: 0x0001aeb8
   14658:	andeq	fp, r1, ip, lsl #14
   1465c:	andeq	sp, r0, sp, lsr #29
   14660:	andeq	fp, r1, r0, lsr #14
   14664:	strdeq	fp, [r1], -r0
   14668:	cmp	r0, #0
   1466c:	bxeq	lr
   14670:	push	{r4, lr}
   14674:	ldr	r4, [r0, #96]	; 0x60
   14678:	bl	11598 <free@plt>
   1467c:	subs	r0, r4, #0
   14680:	bne	14674 <__assert_fail@plt+0x2ca4>
   14684:	pop	{r4, pc}
   14688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1468c:	sub	sp, sp, #156	; 0x9c
   14690:	ldr	r7, [pc, #632]	; 14910 <__assert_fail@plt+0x2f40>
   14694:	mov	r6, r0
   14698:	mov	sl, r1
   1469c:	ldr	r3, [r7]
   146a0:	mov	r1, #64	; 0x40
   146a4:	mov	r0, #1
   146a8:	str	r3, [sp, #148]	; 0x94
   146ac:	bl	1152c <calloc@plt>
   146b0:	subs	r4, r0, #0
   146b4:	beq	147b4 <__assert_fail@plt+0x2de4>
   146b8:	mov	r3, #0
   146bc:	str	r4, [sl]
   146c0:	str	r3, [r4, #60]	; 0x3c
   146c4:	ldr	r1, [pc, #584]	; 14914 <__assert_fail@plt+0x2f44>
   146c8:	ldr	r0, [pc, #584]	; 14918 <__assert_fail@plt+0x2f48>
   146cc:	bl	1194c <fopen64@plt>
   146d0:	subs	r5, r0, #0
   146d4:	beq	147f8 <__assert_fail@plt+0x2e28>
   146d8:	mov	r0, r5
   146dc:	bl	1185c <fgetc@plt>
   146e0:	cmp	r0, #10
   146e4:	bne	146d8 <__assert_fail@plt+0x2d08>
   146e8:	ldr	r8, [pc, #556]	; 1491c <__assert_fail@plt+0x2f4c>
   146ec:	mov	fp, #0
   146f0:	mov	r0, r5
   146f4:	bl	11784 <feof@plt>
   146f8:	subs	r9, r0, #0
   146fc:	bne	147e4 <__assert_fail@plt+0x2e14>
   14700:	add	r1, r4, #32
   14704:	add	r2, r4, #40	; 0x28
   14708:	add	r3, r4, #20
   1470c:	add	ip, r4, #16
   14710:	add	r0, r4, #12
   14714:	str	r1, [sp, #28]
   14718:	str	r2, [sp, #24]
   1471c:	add	r1, r4, #8
   14720:	add	r2, r4, #48	; 0x30
   14724:	str	r3, [sp, #20]
   14728:	add	r3, r4, #24
   1472c:	str	r0, [sp, #12]
   14730:	str	r1, [sp, #8]
   14734:	str	r2, [sp, #4]
   14738:	str	r3, [sp]
   1473c:	str	ip, [sp, #16]
   14740:	mov	r3, r4
   14744:	add	r2, r4, #4
   14748:	mov	r1, r8
   1474c:	mov	r0, r5
   14750:	bl	11850 <fscanf@plt>
   14754:	cmp	r0, #10
   14758:	bne	146f0 <__assert_fail@plt+0x2d20>
   1475c:	cmp	r6, #0
   14760:	blt	147a0 <__assert_fail@plt+0x2dd0>
   14764:	ldr	r3, [r4]
   14768:	cmp	r3, r6
   1476c:	bne	146f0 <__assert_fail@plt+0x2d20>
   14770:	mov	r0, r4
   14774:	bl	13eb4 <__assert_fail@plt+0x24e4>
   14778:	mov	fp, #1
   1477c:	mov	r0, r5
   14780:	bl	118b0 <fclose@plt>
   14784:	ldr	r2, [sp, #148]	; 0x94
   14788:	ldr	r3, [r7]
   1478c:	mov	r0, fp
   14790:	cmp	r2, r3
   14794:	bne	1490c <__assert_fail@plt+0x2f3c>
   14798:	add	sp, sp, #156	; 0x9c
   1479c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a0:	mov	r1, #64	; 0x40
   147a4:	mov	r0, #1
   147a8:	bl	1152c <calloc@plt>
   147ac:	cmp	r0, #0
   147b0:	bne	147c4 <__assert_fail@plt+0x2df4>
   147b4:	mov	r2, #64	; 0x40
   147b8:	ldr	r1, [pc, #352]	; 14920 <__assert_fail@plt+0x2f50>
   147bc:	mov	r0, #1
   147c0:	bl	11670 <err@plt>
   147c4:	str	r0, [r4, #60]	; 0x3c
   147c8:	str	r9, [r0, #60]	; 0x3c
   147cc:	mov	r4, r0
   147d0:	mov	r0, r5
   147d4:	bl	11784 <feof@plt>
   147d8:	add	fp, fp, #1
   147dc:	subs	r9, r0, #0
   147e0:	beq	14700 <__assert_fail@plt+0x2d30>
   147e4:	cmp	fp, #0
   147e8:	bne	1477c <__assert_fail@plt+0x2dac>
   147ec:	ldr	r0, [sl]
   147f0:	bl	11598 <free@plt>
   147f4:	b	1477c <__assert_fail@plt+0x2dac>
   147f8:	add	r3, sp, #44	; 0x2c
   147fc:	mov	r2, #19
   14800:	mov	r1, r5
   14804:	bl	118c8 <semctl@plt>
   14808:	subs	r8, r0, #0
   1480c:	mvnge	r9, r6
   14810:	movge	fp, r5
   14814:	lsrge	r9, r9, #31
   14818:	blt	148ec <__assert_fail@plt+0x2f1c>
   1481c:	add	r3, sp, #84	; 0x54
   14820:	mov	r2, #18
   14824:	mov	r1, #0
   14828:	mov	r0, r5
   1482c:	bl	118c8 <semctl@plt>
   14830:	cmp	r0, #0
   14834:	blt	148d8 <__assert_fail@plt+0x2f08>
   14838:	cmp	r0, r6
   1483c:	moveq	r3, #0
   14840:	andne	r3, r9, #1
   14844:	cmp	r3, #0
   14848:	bne	148d8 <__assert_fail@plt+0x2f08>
   1484c:	ldr	r1, [sp, #120]	; 0x78
   14850:	ldr	ip, [sp, #128]	; 0x80
   14854:	ldrh	r2, [sp, #104]	; 0x68
   14858:	str	r0, [r4]
   1485c:	mov	r0, r1
   14860:	asr	r1, r1, #31
   14864:	str	r2, [r4, #24]
   14868:	strd	r0, [r4, #40]	; 0x28
   1486c:	mov	r0, ip
   14870:	asr	r1, ip, #31
   14874:	ldr	r2, [sp, #136]	; 0x88
   14878:	strd	r0, [r4, #32]
   1487c:	ldr	r0, [sp, #88]	; 0x58
   14880:	ldr	r1, [sp, #92]	; 0x5c
   14884:	ldr	ip, [sp, #84]	; 0x54
   14888:	str	r2, [r4, #48]	; 0x30
   1488c:	ldr	r2, [sp, #96]	; 0x60
   14890:	cmp	r6, #0
   14894:	str	r3, [r4, #52]	; 0x34
   14898:	str	r3, [sp, #36]	; 0x24
   1489c:	str	ip, [r4, #4]
   148a0:	strd	r0, [r4, #8]
   148a4:	str	r2, [r4, #16]
   148a8:	str	r2, [r4, #20]
   148ac:	bge	148fc <__assert_fail@plt+0x2f2c>
   148b0:	mov	r1, #64	; 0x40
   148b4:	mov	r0, #1
   148b8:	bl	1152c <calloc@plt>
   148bc:	cmp	r0, #0
   148c0:	beq	147b4 <__assert_fail@plt+0x2de4>
   148c4:	str	r0, [r4, #60]	; 0x3c
   148c8:	ldr	r3, [sp, #36]	; 0x24
   148cc:	add	fp, fp, #2
   148d0:	mov	r4, r0
   148d4:	str	r3, [r0, #60]	; 0x3c
   148d8:	add	r5, r5, #1
   148dc:	cmp	r8, r5
   148e0:	bge	1481c <__assert_fail@plt+0x2e4c>
   148e4:	cmp	fp, #0
   148e8:	bne	14784 <__assert_fail@plt+0x2db4>
   148ec:	ldr	r0, [sl]
   148f0:	bl	11598 <free@plt>
   148f4:	mov	fp, #0
   148f8:	b	14784 <__assert_fail@plt+0x2db4>
   148fc:	mov	r0, r4
   14900:	add	fp, fp, #1
   14904:	bl	13eb4 <__assert_fail@plt+0x24e4>
   14908:	b	14784 <__assert_fail@plt+0x2db4>
   1490c:	bl	11640 <__stack_chk_fail@plt>
   14910:	andeq	fp, r2, r0, asr sp
   14914:			; <UNDEFINED> instruction: 0x0001aeb8
   14918:	andeq	fp, r1, r4, ror #14
   1491c:	andeq	fp, r1, r8, ror r7
   14920:	strdeq	fp, [r1], -r0
   14924:	push	{r4, r5, r6, lr}
   14928:	subs	r4, r0, #0
   1492c:	popeq	{r4, r5, r6, pc}
   14930:	ldr	r0, [r4, #56]	; 0x38
   14934:	ldr	r5, [r4, #60]	; 0x3c
   14938:	bl	11598 <free@plt>
   1493c:	mov	r0, r4
   14940:	bl	11598 <free@plt>
   14944:	subs	r4, r5, #0
   14948:	bne	14930 <__assert_fail@plt+0x2f60>
   1494c:	pop	{r4, r5, r6, pc}
   14950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14954:	sub	sp, sp, #244	; 0xf4
   14958:	ldr	r7, [pc, #724]	; 14c34 <__assert_fail@plt+0x3264>
   1495c:	mov	r6, r0
   14960:	mov	r9, r1
   14964:	ldr	r3, [r7]
   14968:	mov	r1, #96	; 0x60
   1496c:	mov	r0, #1
   14970:	str	r3, [sp, #236]	; 0xec
   14974:	bl	1152c <calloc@plt>
   14978:	subs	r4, r0, #0
   1497c:	beq	14ab8 <__assert_fail@plt+0x30e8>
   14980:	mov	r3, #0
   14984:	str	r4, [r9]
   14988:	str	r3, [r4, #88]	; 0x58
   1498c:	ldr	r1, [pc, #676]	; 14c38 <__assert_fail@plt+0x3268>
   14990:	ldr	r0, [pc, #676]	; 14c3c <__assert_fail@plt+0x326c>
   14994:	bl	1194c <fopen64@plt>
   14998:	subs	r5, r0, #0
   1499c:	beq	14afc <__assert_fail@plt+0x312c>
   149a0:	mov	r0, r5
   149a4:	bl	1185c <fgetc@plt>
   149a8:	cmp	r0, #10
   149ac:	bne	149a0 <__assert_fail@plt+0x2fd0>
   149b0:	ldr	sl, [pc, #648]	; 14c40 <__assert_fail@plt+0x3270>
   149b4:	mov	r8, #0
   149b8:	mov	r0, r5
   149bc:	bl	11784 <feof@plt>
   149c0:	subs	fp, r0, #0
   149c4:	bne	14ae8 <__assert_fail@plt+0x3118>
   149c8:	add	r2, r4, #48	; 0x30
   149cc:	add	r3, r4, #40	; 0x28
   149d0:	add	ip, r4, #32
   149d4:	add	r0, r4, #20
   149d8:	add	r1, r4, #16
   149dc:	str	r2, [sp, #44]	; 0x2c
   149e0:	str	r3, [sp, #40]	; 0x28
   149e4:	add	r2, r4, #12
   149e8:	add	r3, r4, #8
   149ec:	str	ip, [sp, #36]	; 0x24
   149f0:	str	r0, [sp, #32]
   149f4:	add	ip, r4, #84	; 0x54
   149f8:	add	r0, r4, #80	; 0x50
   149fc:	str	r1, [sp, #28]
   14a00:	str	r2, [sp, #24]
   14a04:	add	r1, r4, #64	; 0x40
   14a08:	add	r2, r4, #56	; 0x38
   14a0c:	str	r3, [sp, #20]
   14a10:	add	r3, r4, #24
   14a14:	str	r0, [sp, #12]
   14a18:	str	r1, [sp, #8]
   14a1c:	str	r2, [sp, #4]
   14a20:	str	r3, [sp]
   14a24:	str	ip, [sp, #16]
   14a28:	mov	r3, r4
   14a2c:	add	r2, r4, #4
   14a30:	mov	r1, sl
   14a34:	mov	r0, r5
   14a38:	bl	11850 <fscanf@plt>
   14a3c:	cmp	r0, #14
   14a40:	bne	149b8 <__assert_fail@plt+0x2fe8>
   14a44:	cmp	r6, #0
   14a48:	blt	14aa4 <__assert_fail@plt+0x30d4>
   14a4c:	ldr	r3, [r4]
   14a50:	cmp	r3, r6
   14a54:	bne	149b8 <__assert_fail@plt+0x2fe8>
   14a58:	mov	r0, r6
   14a5c:	add	r2, sp, #148	; 0x94
   14a60:	mov	r1, #2
   14a64:	bl	1164c <msgctl@plt>
   14a68:	cmn	r0, #1
   14a6c:	moveq	r8, #1
   14a70:	ldrne	r3, [sp, #216]	; 0xd8
   14a74:	movne	r8, #1
   14a78:	strne	fp, [r4, #76]	; 0x4c
   14a7c:	strne	r3, [r4, #72]	; 0x48
   14a80:	mov	r0, r5
   14a84:	bl	118b0 <fclose@plt>
   14a88:	ldr	r2, [sp, #236]	; 0xec
   14a8c:	ldr	r3, [r7]
   14a90:	mov	r0, r8
   14a94:	cmp	r2, r3
   14a98:	bne	14c30 <__assert_fail@plt+0x3260>
   14a9c:	add	sp, sp, #244	; 0xf4
   14aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aa4:	mov	r1, #96	; 0x60
   14aa8:	mov	r0, #1
   14aac:	bl	1152c <calloc@plt>
   14ab0:	cmp	r0, #0
   14ab4:	bne	14ac8 <__assert_fail@plt+0x30f8>
   14ab8:	mov	r2, #96	; 0x60
   14abc:	ldr	r1, [pc, #384]	; 14c44 <__assert_fail@plt+0x3274>
   14ac0:	mov	r0, #1
   14ac4:	bl	11670 <err@plt>
   14ac8:	str	r0, [r4, #88]	; 0x58
   14acc:	str	fp, [r0, #88]	; 0x58
   14ad0:	mov	r4, r0
   14ad4:	mov	r0, r5
   14ad8:	bl	11784 <feof@plt>
   14adc:	add	r8, r8, #1
   14ae0:	subs	fp, r0, #0
   14ae4:	beq	149c8 <__assert_fail@plt+0x2ff8>
   14ae8:	cmp	r8, #0
   14aec:	bne	14a80 <__assert_fail@plt+0x30b0>
   14af0:	ldr	r0, [r9]
   14af4:	bl	11598 <free@plt>
   14af8:	b	14a80 <__assert_fail@plt+0x30b0>
   14afc:	add	r2, sp, #60	; 0x3c
   14b00:	mov	r1, #12
   14b04:	bl	1164c <msgctl@plt>
   14b08:	subs	sl, r0, #0
   14b0c:	mvnge	fp, r6
   14b10:	movge	r8, r5
   14b14:	lsrge	fp, fp, #31
   14b18:	blt	14c20 <__assert_fail@plt+0x3250>
   14b1c:	add	r2, sp, #148	; 0x94
   14b20:	mov	r1, #11
   14b24:	mov	r0, r5
   14b28:	bl	1164c <msgctl@plt>
   14b2c:	cmp	r0, #0
   14b30:	blt	14c0c <__assert_fail@plt+0x323c>
   14b34:	cmp	r0, r6
   14b38:	moveq	r3, #0
   14b3c:	andne	r3, fp, #1
   14b40:	cmp	r3, #0
   14b44:	bne	14c0c <__assert_fail@plt+0x323c>
   14b48:	ldr	r2, [sp, #184]	; 0xb8
   14b4c:	ldr	lr, [sp, #192]	; 0xc0
   14b50:	str	r0, [r4]
   14b54:	asr	r1, r2, #31
   14b58:	mov	r0, r2
   14b5c:	ldr	ip, [sp, #200]	; 0xc8
   14b60:	strd	r0, [r4, #32]
   14b64:	mov	r0, lr
   14b68:	asr	r1, lr, #31
   14b6c:	ldrh	r2, [sp, #168]	; 0xa8
   14b70:	strd	r0, [r4, #40]	; 0x28
   14b74:	mov	r0, ip
   14b78:	asr	r1, ip, #31
   14b7c:	str	r2, [r4, #24]
   14b80:	strd	r0, [r4, #48]	; 0x30
   14b84:	ldr	r2, [sp, #148]	; 0x94
   14b88:	ldrd	r0, [sp, #208]	; 0xd0
   14b8c:	str	r2, [r4, #4]
   14b90:	ldr	r2, [sp, #220]	; 0xdc
   14b94:	str	r0, [r4, #56]	; 0x38
   14b98:	str	r1, [r4, #64]	; 0x40
   14b9c:	ldr	r0, [sp, #224]	; 0xe0
   14ba0:	ldr	r1, [sp, #152]	; 0x98
   14ba4:	str	r2, [r4, #80]	; 0x50
   14ba8:	ldr	r2, [sp, #156]	; 0x9c
   14bac:	str	r0, [r4, #84]	; 0x54
   14bb0:	str	r1, [r4, #8]
   14bb4:	ldr	r0, [sp, #160]	; 0xa0
   14bb8:	ldr	r1, [sp, #164]	; 0xa4
   14bbc:	str	r2, [r4, #12]
   14bc0:	ldr	r2, [sp, #216]	; 0xd8
   14bc4:	cmp	r6, #0
   14bc8:	add	r8, r8, #1
   14bcc:	str	r3, [r4, #60]	; 0x3c
   14bd0:	str	r3, [r4, #68]	; 0x44
   14bd4:	str	r3, [r4, #76]	; 0x4c
   14bd8:	str	r3, [sp, #52]	; 0x34
   14bdc:	strd	r0, [r4, #16]
   14be0:	str	r2, [r4, #72]	; 0x48
   14be4:	bge	14a88 <__assert_fail@plt+0x30b8>
   14be8:	mov	r1, #96	; 0x60
   14bec:	mov	r0, #1
   14bf0:	bl	1152c <calloc@plt>
   14bf4:	cmp	r0, #0
   14bf8:	beq	14ab8 <__assert_fail@plt+0x30e8>
   14bfc:	str	r0, [r4, #88]	; 0x58
   14c00:	ldr	r3, [sp, #52]	; 0x34
   14c04:	mov	r4, r0
   14c08:	str	r3, [r0, #88]	; 0x58
   14c0c:	add	r5, r5, #1
   14c10:	cmp	sl, r5
   14c14:	bge	14b1c <__assert_fail@plt+0x314c>
   14c18:	cmp	r8, #0
   14c1c:	bne	14a88 <__assert_fail@plt+0x30b8>
   14c20:	ldr	r0, [r9]
   14c24:	bl	11598 <free@plt>
   14c28:	mov	r8, #0
   14c2c:	b	14a88 <__assert_fail@plt+0x30b8>
   14c30:	bl	11640 <__stack_chk_fail@plt>
   14c34:	andeq	fp, r2, r0, asr sp
   14c38:			; <UNDEFINED> instruction: 0x0001aeb8
   14c3c:	andeq	fp, r1, r0, lsr #15
   14c40:			; <UNDEFINED> instruction: 0x0001b7b4
   14c44:	strdeq	fp, [r1], -r0
   14c48:	cmp	r0, #0
   14c4c:	bxeq	lr
   14c50:	push	{r4, lr}
   14c54:	ldr	r4, [r0, #88]	; 0x58
   14c58:	bl	11598 <free@plt>
   14c5c:	subs	r0, r4, #0
   14c60:	bne	14c54 <__assert_fail@plt+0x3284>
   14c64:	pop	{r4, pc}
   14c68:	ldr	ip, [r1, #24]
   14c6c:	push	{r4, r5, lr}
   14c70:	sub	sp, sp, #12
   14c74:	lsl	ip, ip, #23
   14c78:	mov	r4, r1
   14c7c:	lsr	ip, ip, #23
   14c80:	ldr	r3, [r1]
   14c84:	ldr	r2, [pc, #184]	; 14d44 <__assert_fail@plt+0x3374>
   14c88:	str	ip, [sp]
   14c8c:	mov	r1, #1
   14c90:	mov	r5, r0
   14c94:	bl	11898 <__fprintf_chk@plt>
   14c98:	ldr	r0, [r4, #16]
   14c9c:	bl	11568 <getpwuid@plt>
   14ca0:	mov	r1, #1
   14ca4:	cmp	r0, #0
   14ca8:	ldrne	r3, [r0]
   14cac:	ldrne	r2, [pc, #148]	; 14d48 <__assert_fail@plt+0x3378>
   14cb0:	ldreq	r3, [r4, #16]
   14cb4:	ldreq	r2, [pc, #144]	; 14d4c <__assert_fail@plt+0x337c>
   14cb8:	mov	r0, r5
   14cbc:	bl	11898 <__fprintf_chk@plt>
   14cc0:	ldr	r0, [r4, #20]
   14cc4:	bl	119ac <getgrgid@plt>
   14cc8:	mov	r1, #1
   14ccc:	cmp	r0, #0
   14cd0:	ldrne	r3, [r0]
   14cd4:	ldrne	r2, [pc, #108]	; 14d48 <__assert_fail@plt+0x3378>
   14cd8:	ldreq	r3, [r4, #20]
   14cdc:	ldreq	r2, [pc, #104]	; 14d4c <__assert_fail@plt+0x337c>
   14ce0:	mov	r0, r5
   14ce4:	bl	11898 <__fprintf_chk@plt>
   14ce8:	ldr	r0, [r4, #8]
   14cec:	bl	11568 <getpwuid@plt>
   14cf0:	mov	r1, #1
   14cf4:	cmp	r0, #0
   14cf8:	ldrne	r3, [r0]
   14cfc:	ldrne	r2, [pc, #68]	; 14d48 <__assert_fail@plt+0x3378>
   14d00:	ldreq	r3, [r4, #8]
   14d04:	ldreq	r2, [pc, #64]	; 14d4c <__assert_fail@plt+0x337c>
   14d08:	mov	r0, r5
   14d0c:	bl	11898 <__fprintf_chk@plt>
   14d10:	ldr	r0, [r4, #12]
   14d14:	bl	119ac <getgrgid@plt>
   14d18:	mov	r1, #1
   14d1c:	cmp	r0, #0
   14d20:	moveq	r0, r5
   14d24:	ldrne	r3, [r0]
   14d28:	ldrne	r2, [pc, #32]	; 14d50 <__assert_fail@plt+0x3380>
   14d2c:	movne	r0, r5
   14d30:	ldreq	r3, [r4, #12]
   14d34:	ldreq	r2, [pc, #24]	; 14d54 <__assert_fail@plt+0x3384>
   14d38:	add	sp, sp, #12
   14d3c:	pop	{r4, r5, lr}
   14d40:	b	11898 <__fprintf_chk@plt>
   14d44:	andeq	fp, r1, ip, ror #15
   14d48:	strdeq	fp, [r1], -r8
   14d4c:	andeq	sl, r1, r4, lsr #31
   14d50:	andeq	fp, r1, r0, lsl #16
   14d54:	andeq	fp, r1, r8, lsl #16
   14d58:	push	{r4, r5, r6, r7, r8, r9, lr}
   14d5c:	subs	r5, r1, #0
   14d60:	ldr	r6, [pc, #432]	; 14f18 <__assert_fail@plt+0x3548>
   14d64:	sub	sp, sp, #52	; 0x34
   14d68:	mov	r4, r0
   14d6c:	ldr	r1, [r6]
   14d70:	mov	r7, r2
   14d74:	mov	r9, r3
   14d78:	str	r1, [sp, #44]	; 0x2c
   14d7c:	ldr	r8, [sp, #80]	; 0x50
   14d80:	beq	14dbc <__assert_fail@plt+0x33ec>
   14d84:	mov	r0, r5
   14d88:	bl	1179c <strlen@plt>
   14d8c:	add	r0, r5, r0
   14d90:	ldrsb	r3, [r0, #-1]
   14d94:	cmp	r3, #61	; 0x3d
   14d98:	beq	14efc <__assert_fail@plt+0x352c>
   14d9c:	cmp	r4, #1
   14da0:	beq	14e50 <__assert_fail@plt+0x3480>
   14da4:	cmp	r4, #2
   14da8:	beq	14ea4 <__assert_fail@plt+0x34d4>
   14dac:	mov	r2, r5
   14db0:	ldr	r1, [pc, #356]	; 14f1c <__assert_fail@plt+0x354c>
   14db4:	mov	r0, #1
   14db8:	bl	11868 <__printf_chk@plt>
   14dbc:	cmp	r4, #3
   14dc0:	ldrls	pc, [pc, r4, lsl #2]
   14dc4:	b	14f14 <__assert_fail@plt+0x3544>
   14dc8:	andeq	r4, r1, r0, ror lr
   14dcc:	andeq	r4, r1, r0, ror lr
   14dd0:	andeq	r4, r1, r4, asr #29
   14dd4:	ldrdeq	r4, [r1], -r8
   14dd8:	ldr	r3, [sp, #84]	; 0x54
   14ddc:	mov	r1, #1
   14de0:	str	r3, [sp]
   14de4:	mov	r2, #32
   14de8:	ldr	r3, [pc, #304]	; 14f20 <__assert_fail@plt+0x3550>
   14dec:	add	r0, sp, #12
   14df0:	bl	117e4 <__sprintf_chk@plt>
   14df4:	mov	r2, r7
   14df8:	mov	r3, r9
   14dfc:	mov	r0, #0
   14e00:	bl	16308 <__assert_fail@plt+0x4938>
   14e04:	add	r1, sp, #12
   14e08:	mov	r4, r0
   14e0c:	mov	r2, r0
   14e10:	mov	r0, #1
   14e14:	bl	11868 <__printf_chk@plt>
   14e18:	mov	r0, r4
   14e1c:	bl	11598 <free@plt>
   14e20:	cmp	r8, #0
   14e24:	beq	14e38 <__assert_fail@plt+0x3468>
   14e28:	mov	r2, r8
   14e2c:	ldr	r1, [pc, #240]	; 14f24 <__assert_fail@plt+0x3554>
   14e30:	mov	r0, #1
   14e34:	bl	11868 <__printf_chk@plt>
   14e38:	ldr	r2, [sp, #44]	; 0x2c
   14e3c:	ldr	r3, [r6]
   14e40:	cmp	r2, r3
   14e44:	bne	14f10 <__assert_fail@plt+0x3540>
   14e48:	add	sp, sp, #52	; 0x34
   14e4c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e50:	mov	r2, #5
   14e54:	ldr	r1, [pc, #204]	; 14f28 <__assert_fail@plt+0x3558>
   14e58:	mov	r0, #0
   14e5c:	bl	11628 <dcgettext@plt>
   14e60:	mov	r2, r5
   14e64:	mov	r1, r0
   14e68:	mov	r0, r4
   14e6c:	bl	11868 <__printf_chk@plt>
   14e70:	ldr	r3, [sp, #84]	; 0x54
   14e74:	add	r0, sp, #12
   14e78:	str	r3, [sp]
   14e7c:	mov	r2, #32
   14e80:	ldr	r3, [pc, #164]	; 14f2c <__assert_fail@plt+0x355c>
   14e84:	mov	r1, #1
   14e88:	bl	117e4 <__sprintf_chk@plt>
   14e8c:	mov	r2, r7
   14e90:	mov	r3, r9
   14e94:	add	r1, sp, #12
   14e98:	mov	r0, #1
   14e9c:	bl	11868 <__printf_chk@plt>
   14ea0:	b	14e20 <__assert_fail@plt+0x3450>
   14ea4:	mov	r2, #5
   14ea8:	ldr	r1, [pc, #128]	; 14f30 <__assert_fail@plt+0x3560>
   14eac:	mov	r0, #0
   14eb0:	bl	11628 <dcgettext@plt>
   14eb4:	mov	r2, r5
   14eb8:	mov	r1, r0
   14ebc:	mov	r0, #1
   14ec0:	bl	11868 <__printf_chk@plt>
   14ec4:	ldr	r3, [sp, #84]	; 0x54
   14ec8:	add	r0, sp, #12
   14ecc:	str	r3, [sp]
   14ed0:	mov	r2, #32
   14ed4:	ldr	r3, [pc, #80]	; 14f2c <__assert_fail@plt+0x355c>
   14ed8:	mov	r1, #1
   14edc:	bl	117e4 <__sprintf_chk@plt>
   14ee0:	lsr	r2, r7, #10
   14ee4:	add	r1, sp, #12
   14ee8:	orr	r2, r2, r9, lsl #22
   14eec:	lsr	r3, r9, #10
   14ef0:	mov	r0, #1
   14ef4:	bl	11868 <__printf_chk@plt>
   14ef8:	b	14e20 <__assert_fail@plt+0x3450>
   14efc:	mov	r2, r5
   14f00:	ldr	r1, [pc, #28]	; 14f24 <__assert_fail@plt+0x3554>
   14f04:	mov	r0, #1
   14f08:	bl	11868 <__printf_chk@plt>
   14f0c:	b	14dbc <__assert_fail@plt+0x33ec>
   14f10:	bl	11640 <__stack_chk_fail@plt>
   14f14:	bl	11988 <abort@plt>
   14f18:	andeq	fp, r2, r0, asr sp
   14f1c:	andeq	fp, r1, r0, lsr r8
   14f20:	andeq	fp, r1, r0, asr #16
   14f24:	andeq	fp, r1, r0, lsl #20
   14f28:	andeq	fp, r1, r0, lsl r8
   14f2c:	andeq	fp, r1, r8, lsr r8
   14f30:	andeq	fp, r1, r0, lsr #16
   14f34:	andeq	r0, r0, r0
   14f38:	cmp	r0, #0
   14f3c:	mov	r3, #0
   14f40:	str	r3, [r1]
   14f44:	bxeq	lr
   14f48:	ldrsb	r2, [r0]
   14f4c:	cmp	r2, #47	; 0x2f
   14f50:	bne	14f8c <__assert_fail@plt+0x35bc>
   14f54:	ldrsb	r3, [r0, #1]
   14f58:	cmp	r3, #47	; 0x2f
   14f5c:	bne	14f94 <__assert_fail@plt+0x35c4>
   14f60:	add	r3, r0, #1
   14f64:	b	14f74 <__assert_fail@plt+0x35a4>
   14f68:	ldrsb	r2, [r3]
   14f6c:	cmp	r2, #47	; 0x2f
   14f70:	bne	14f94 <__assert_fail@plt+0x35c4>
   14f74:	cmp	r3, #0
   14f78:	mov	r0, r3
   14f7c:	bxeq	lr
   14f80:	ldrsb	r2, [r3], #1
   14f84:	cmp	r2, #47	; 0x2f
   14f88:	beq	14f68 <__assert_fail@plt+0x3598>
   14f8c:	cmp	r2, #0
   14f90:	beq	14fd0 <__assert_fail@plt+0x3600>
   14f94:	mov	r3, #1
   14f98:	str	r3, [r1]
   14f9c:	ldrsb	r3, [r0, #1]
   14fa0:	add	r2, r0, #1
   14fa4:	cmp	r3, #47	; 0x2f
   14fa8:	cmpne	r3, #0
   14fac:	bxeq	lr
   14fb0:	rsb	r3, r0, #1
   14fb4:	add	ip, r2, r3
   14fb8:	str	ip, [r1]
   14fbc:	ldrsb	ip, [r2, #1]!
   14fc0:	cmp	ip, #0
   14fc4:	cmpne	ip, #47	; 0x2f
   14fc8:	bne	14fb4 <__assert_fail@plt+0x35e4>
   14fcc:	bx	lr
   14fd0:	mov	r0, r2
   14fd4:	bx	lr
   14fd8:	push	{r4, r5, r6, r7, r8, lr}
   14fdc:	mov	r7, r1
   14fe0:	ldrsb	r1, [r0]
   14fe4:	cmp	r1, #0
   14fe8:	movne	r5, r0
   14fec:	movne	r4, #0
   14ff0:	beq	1505c <__assert_fail@plt+0x368c>
   14ff4:	cmp	r1, #92	; 0x5c
   14ff8:	addne	r6, r5, r4
   14ffc:	beq	1502c <__assert_fail@plt+0x365c>
   15000:	mov	r0, r7
   15004:	bl	117a8 <strchr@plt>
   15008:	cmp	r0, #0
   1500c:	bne	15054 <__assert_fail@plt+0x3684>
   15010:	ldrsb	r1, [r6, #1]!
   15014:	add	r4, r4, #1
   15018:	mov	r0, r4
   1501c:	cmp	r1, #0
   15020:	popeq	{r4, r5, r6, r7, r8, pc}
   15024:	cmp	r1, #92	; 0x5c
   15028:	bne	15000 <__assert_fail@plt+0x3630>
   1502c:	add	r3, r5, r4
   15030:	ldrsb	r3, [r3, #1]
   15034:	cmp	r3, #0
   15038:	beq	15054 <__assert_fail@plt+0x3684>
   1503c:	add	r4, r4, #2
   15040:	mov	r0, r4
   15044:	ldrsb	r1, [r5, r4]
   15048:	cmp	r1, #0
   1504c:	bne	14ff4 <__assert_fail@plt+0x3624>
   15050:	pop	{r4, r5, r6, r7, r8, pc}
   15054:	mov	r0, r4
   15058:	pop	{r4, r5, r6, r7, r8, pc}
   1505c:	mov	r0, r1
   15060:	pop	{r4, r5, r6, r7, r8, pc}
   15064:	ldr	ip, [pc, #244]	; 15160 <__assert_fail@plt+0x3790>
   15068:	push	{r4, r5, r6, r7, r8, r9, lr}
   1506c:	add	ip, pc, ip
   15070:	ldr	lr, [pc, #236]	; 15164 <__assert_fail@plt+0x3794>
   15074:	sub	sp, sp, #12
   15078:	mov	r5, #0
   1507c:	ldr	r7, [ip, lr]
   15080:	mov	r4, r0
   15084:	mov	r8, r1
   15088:	ldr	r3, [r7]
   1508c:	mov	r0, ip
   15090:	mov	r9, r2
   15094:	str	r5, [sp]
   15098:	str	r3, [sp, #4]
   1509c:	bl	117d8 <__errno_location@plt>
   150a0:	cmp	r4, r5
   150a4:	str	r5, [r0]
   150a8:	beq	150b8 <__assert_fail@plt+0x36e8>
   150ac:	ldrsb	r3, [r4]
   150b0:	cmp	r3, r5
   150b4:	bne	150d8 <__assert_fail@plt+0x3708>
   150b8:	ldr	r1, [pc, #168]	; 15168 <__assert_fail@plt+0x3798>
   150bc:	mov	r3, r4
   150c0:	add	r1, pc, r1
   150c4:	mov	r2, r8
   150c8:	ldr	r0, [r1]
   150cc:	ldr	r1, [pc, #152]	; 1516c <__assert_fail@plt+0x379c>
   150d0:	add	r1, pc, r1
   150d4:	bl	118e0 <errx@plt>
   150d8:	mov	r6, r0
   150dc:	mov	r2, r9
   150e0:	mov	r3, r5
   150e4:	mov	r1, sp
   150e8:	mov	r0, r4
   150ec:	bl	11610 <__strtoull_internal@plt>
   150f0:	ldr	r2, [r6]
   150f4:	cmp	r2, r5
   150f8:	bne	15134 <__assert_fail@plt+0x3764>
   150fc:	ldr	r3, [sp]
   15100:	cmp	r3, r4
   15104:	beq	150b8 <__assert_fail@plt+0x36e8>
   15108:	cmp	r3, r5
   1510c:	beq	1511c <__assert_fail@plt+0x374c>
   15110:	ldrsb	r3, [r3]
   15114:	cmp	r3, r5
   15118:	bne	150b8 <__assert_fail@plt+0x36e8>
   1511c:	ldr	r2, [sp, #4]
   15120:	ldr	r3, [r7]
   15124:	cmp	r2, r3
   15128:	bne	1515c <__assert_fail@plt+0x378c>
   1512c:	add	sp, sp, #12
   15130:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15134:	ldr	r3, [pc, #52]	; 15170 <__assert_fail@plt+0x37a0>
   15138:	cmp	r2, #34	; 0x22
   1513c:	add	r3, pc, r3
   15140:	ldr	r0, [r3]
   15144:	bne	150b8 <__assert_fail@plt+0x36e8>
   15148:	ldr	r1, [pc, #36]	; 15174 <__assert_fail@plt+0x37a4>
   1514c:	mov	r3, r4
   15150:	mov	r2, r8
   15154:	add	r1, pc, r1
   15158:	bl	11670 <err@plt>
   1515c:	bl	11640 <__stack_chk_fail@plt>
   15160:	andeq	r6, r1, r0, ror #27
   15164:	andeq	r0, r0, r0, lsr #3
   15168:	andeq	r6, r1, r0, asr #30
   1516c:	andeq	r6, r0, r0, ror r7
   15170:	andeq	r6, r1, r4, asr #29
   15174:	andeq	r6, r0, ip, ror #13
   15178:	push	{r4, lr}
   1517c:	mov	r5, r0
   15180:	mov	r4, r1
   15184:	bl	117d8 <__errno_location@plt>
   15188:	ldr	ip, [pc, #32]	; 151b0 <__assert_fail@plt+0x37e0>
   1518c:	ldr	r1, [pc, #32]	; 151b4 <__assert_fail@plt+0x37e4>
   15190:	add	ip, pc, ip
   15194:	mov	lr, #34	; 0x22
   15198:	mov	r3, r5
   1519c:	mov	r2, r4
   151a0:	add	r1, pc, r1
   151a4:	str	lr, [r0]
   151a8:	ldr	r0, [ip]
   151ac:	bl	11670 <err@plt>
   151b0:	andeq	r6, r1, r0, ror lr
   151b4:	andeq	r6, r0, r0, lsr #13
   151b8:	push	{r4, r5, r6, lr}
   151bc:	mov	r4, r0
   151c0:	mov	r5, r1
   151c4:	bl	15064 <__assert_fail@plt+0x3694>
   151c8:	mov	r3, #0
   151cc:	mvn	r2, #0
   151d0:	cmp	r1, r3
   151d4:	cmpeq	r0, r2
   151d8:	popls	{r4, r5, r6, pc}
   151dc:	mov	r1, r5
   151e0:	mov	r0, r4
   151e4:	bl	15178 <__assert_fail@plt+0x37a8>
   151e8:	ldr	r3, [pc, #8]	; 151f8 <__assert_fail@plt+0x3828>
   151ec:	add	r3, pc, r3
   151f0:	str	r0, [r3]
   151f4:	bx	lr
   151f8:	andeq	r6, r1, r4, lsl lr
   151fc:	ldr	r3, [pc, #1648]	; 15874 <__assert_fail@plt+0x3ea4>
   15200:	ldr	ip, [pc, #1648]	; 15878 <__assert_fail@plt+0x3ea8>
   15204:	add	r3, pc, r3
   15208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1520c:	mov	r5, r1
   15210:	ldr	r1, [r3, ip]
   15214:	sub	sp, sp, #52	; 0x34
   15218:	mov	ip, r1
   1521c:	mov	r8, r0
   15220:	str	r1, [sp, #24]
   15224:	mov	r0, #0
   15228:	mov	r1, #0
   1522c:	ldr	r3, [ip]
   15230:	strd	r0, [r5]
   15234:	mov	r9, r2
   15238:	str	r3, [sp, #44]	; 0x2c
   1523c:	bl	117d8 <__errno_location@plt>
   15240:	cmp	r8, #0
   15244:	mov	r4, r0
   15248:	beq	15428 <__assert_fail@plt+0x3a58>
   1524c:	ldrsb	fp, [r8]
   15250:	cmp	fp, #0
   15254:	beq	15428 <__assert_fail@plt+0x3a58>
   15258:	bl	11754 <__ctype_b_loc@plt>
   1525c:	mov	r2, r8
   15260:	ldr	r1, [r0]
   15264:	b	1526c <__assert_fail@plt+0x389c>
   15268:	ldrsb	fp, [r2, #1]!
   1526c:	uxtb	r3, fp
   15270:	lsl	r3, r3, #1
   15274:	ldrh	ip, [r1, r3]
   15278:	ands	ip, ip, #8192	; 0x2000
   1527c:	bne	15268 <__assert_fail@plt+0x3898>
   15280:	cmp	fp, #45	; 0x2d
   15284:	beq	15428 <__assert_fail@plt+0x3a58>
   15288:	add	fp, sp, #40	; 0x28
   1528c:	mov	r3, ip
   15290:	mov	r2, ip
   15294:	str	ip, [r4]
   15298:	mov	r1, fp
   1529c:	mov	r0, r8
   152a0:	str	ip, [sp, #40]	; 0x28
   152a4:	bl	11610 <__strtoull_internal@plt>
   152a8:	ldr	sl, [sp, #40]	; 0x28
   152ac:	cmp	sl, r8
   152b0:	mov	r2, r0
   152b4:	mov	r3, r1
   152b8:	ldr	r0, [r4]
   152bc:	strd	r2, [sp, #16]
   152c0:	beq	155a8 <__assert_fail@plt+0x3bd8>
   152c4:	cmp	r0, #0
   152c8:	bne	15450 <__assert_fail@plt+0x3a80>
   152cc:	cmp	sl, #0
   152d0:	beq	155dc <__assert_fail@plt+0x3c0c>
   152d4:	ldrsb	r0, [sl]
   152d8:	cmp	r0, #0
   152dc:	beq	155d0 <__assert_fail@plt+0x3c00>
   152e0:	mov	r8, #0
   152e4:	mov	r2, #0
   152e8:	mov	r3, #0
   152ec:	str	r9, [sp, #32]
   152f0:	mov	r6, fp
   152f4:	mov	r9, sl
   152f8:	mov	r7, r8
   152fc:	mov	sl, r2
   15300:	mov	fp, r3
   15304:	str	r5, [sp, #28]
   15308:	ldrsb	r2, [r9, #1]
   1530c:	cmp	r2, #105	; 0x69
   15310:	beq	15494 <__assert_fail@plt+0x3ac4>
   15314:	bic	r1, r2, #32
   15318:	cmp	r1, #66	; 0x42
   1531c:	bne	155b4 <__assert_fail@plt+0x3be4>
   15320:	ldrsb	r2, [r9, #2]
   15324:	cmp	r2, #0
   15328:	beq	15798 <__assert_fail@plt+0x3dc8>
   1532c:	bl	1191c <localeconv@plt>
   15330:	cmp	r0, #0
   15334:	beq	15428 <__assert_fail@plt+0x3a58>
   15338:	ldr	r2, [r0]
   1533c:	cmp	r2, #0
   15340:	beq	15428 <__assert_fail@plt+0x3a58>
   15344:	mov	r0, r2
   15348:	str	r2, [sp]
   1534c:	bl	1179c <strlen@plt>
   15350:	orrs	r3, sl, fp
   15354:	mov	r5, r0
   15358:	bne	15428 <__assert_fail@plt+0x3a58>
   1535c:	ldrsb	r1, [r9]
   15360:	cmp	r1, #0
   15364:	beq	15428 <__assert_fail@plt+0x3a58>
   15368:	ldr	r2, [sp]
   1536c:	mov	r1, r9
   15370:	mov	r0, r2
   15374:	mov	r2, r5
   15378:	bl	1197c <strncmp@plt>
   1537c:	cmp	r0, #0
   15380:	bne	15428 <__assert_fail@plt+0x3a58>
   15384:	ldrsb	r2, [r9, r5]
   15388:	add	r5, r9, r5
   1538c:	cmp	r2, #48	; 0x30
   15390:	bne	153b0 <__assert_fail@plt+0x39e0>
   15394:	add	r8, r8, #1
   15398:	sub	r1, r8, r5
   1539c:	mov	r3, r5
   153a0:	add	r8, r3, r1
   153a4:	ldrsb	r2, [r3, #1]!
   153a8:	cmp	r2, #48	; 0x30
   153ac:	beq	153a0 <__assert_fail@plt+0x39d0>
   153b0:	mov	r3, #0
   153b4:	str	r7, [r4]
   153b8:	mov	r2, r3
   153bc:	mov	r1, r6
   153c0:	mov	r0, r5
   153c4:	str	r7, [sp, #40]	; 0x28
   153c8:	bl	11610 <__strtoull_internal@plt>
   153cc:	ldr	r9, [sp, #40]	; 0x28
   153d0:	cmp	r9, r5
   153d4:	mov	sl, r0
   153d8:	mov	fp, r1
   153dc:	beq	155a4 <__assert_fail@plt+0x3bd4>
   153e0:	ldr	ip, [r4]
   153e4:	cmp	ip, #0
   153e8:	beq	15480 <__assert_fail@plt+0x3ab0>
   153ec:	subs	r3, r0, #1
   153f0:	str	r3, [sp, #8]
   153f4:	sbc	r3, r1, #0
   153f8:	str	r3, [sp, #12]
   153fc:	ldrd	r2, [sp, #8]
   15400:	mvn	r1, #0
   15404:	mvn	r0, #2
   15408:	cmp	r3, r1
   1540c:	cmpeq	r2, r0
   15410:	bhi	157d4 <__assert_fail@plt+0x3e04>
   15414:	cmp	r9, #0
   15418:	beq	15428 <__assert_fail@plt+0x3a58>
   1541c:	ldrsb	r2, [r9]
   15420:	cmp	r2, #0
   15424:	bne	15308 <__assert_fail@plt+0x3938>
   15428:	mov	r3, #22
   1542c:	mvn	r0, #21
   15430:	str	r3, [r4]
   15434:	ldr	r3, [sp, #24]
   15438:	ldr	r2, [sp, #44]	; 0x2c
   1543c:	ldr	r3, [r3]
   15440:	cmp	r2, r3
   15444:	bne	15870 <__assert_fail@plt+0x3ea0>
   15448:	add	sp, sp, #52	; 0x34
   1544c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15450:	subs	r6, r2, #1
   15454:	sbc	r7, r3, #0
   15458:	mvn	r3, #0
   1545c:	mvn	r2, #2
   15460:	cmp	r7, r3
   15464:	cmpeq	r6, r2
   15468:	bls	152cc <__assert_fail@plt+0x38fc>
   1546c:	rsb	r0, r0, #0
   15470:	cmp	r0, #0
   15474:	bge	15434 <__assert_fail@plt+0x3a64>
   15478:	rsb	r3, r0, #0
   1547c:	b	15430 <__assert_fail@plt+0x3a60>
   15480:	orrs	r3, sl, fp
   15484:	bne	15414 <__assert_fail@plt+0x3a44>
   15488:	ldrsb	r2, [r9, #1]
   1548c:	cmp	r2, #105	; 0x69
   15490:	bne	15314 <__assert_fail@plt+0x3944>
   15494:	ldrsb	r2, [r9, #2]
   15498:	bic	r2, r2, #32
   1549c:	cmp	r2, #66	; 0x42
   154a0:	bne	1532c <__assert_fail@plt+0x395c>
   154a4:	ldrsb	r2, [r9, #3]
   154a8:	cmp	r2, #0
   154ac:	bne	1532c <__assert_fail@plt+0x395c>
   154b0:	strd	sl, [sp]
   154b4:	mov	sl, r9
   154b8:	ldr	r9, [sp, #32]
   154bc:	mov	r3, #1024	; 0x400
   154c0:	ldr	r5, [sp, #28]
   154c4:	str	r3, [sp, #28]
   154c8:	ldrsb	r7, [sl]
   154cc:	ldr	r6, [pc, #936]	; 1587c <__assert_fail@plt+0x3eac>
   154d0:	add	r6, pc, r6
   154d4:	mov	r1, r7
   154d8:	mov	r0, r6
   154dc:	bl	117a8 <strchr@plt>
   154e0:	cmp	r0, #0
   154e4:	beq	157b4 <__assert_fail@plt+0x3de4>
   154e8:	sub	ip, r0, r6
   154ec:	add	fp, ip, #1
   154f0:	cmp	fp, #0
   154f4:	beq	155c0 <__assert_fail@plt+0x3bf0>
   154f8:	ldr	r3, [sp, #20]
   154fc:	ldr	r6, [sp, #28]
   15500:	cmp	r3, #0
   15504:	mov	r0, #0
   15508:	asr	r7, r6, #31
   1550c:	mov	r1, #0
   15510:	bne	15810 <__assert_fail@plt+0x3e40>
   15514:	orrs	r3, r0, r1
   15518:	bne	15604 <__assert_fail@plt+0x3c34>
   1551c:	str	fp, [sp, #32]
   15520:	sub	ip, ip, #1
   15524:	str	r8, [sp, #36]	; 0x24
   15528:	mov	fp, r4
   1552c:	ldrd	r0, [sp, #16]
   15530:	mov	lr, r5
   15534:	mov	sl, r9
   15538:	b	15548 <__assert_fail@plt+0x3b78>
   1553c:	orrs	r3, r4, r5
   15540:	sub	ip, ip, #1
   15544:	bne	155ec <__assert_fail@plt+0x3c1c>
   15548:	mul	r2, r0, r7
   1554c:	cmn	ip, #1
   15550:	mla	r2, r6, r1, r2
   15554:	umull	r0, r1, r0, r6
   15558:	add	r2, r2, r1
   1555c:	mov	r1, r2
   15560:	beq	15778 <__assert_fail@plt+0x3da8>
   15564:	cmp	r2, #0
   15568:	mov	r4, #0
   1556c:	mov	r5, #0
   15570:	beq	1553c <__assert_fail@plt+0x3b6c>
   15574:	umull	r2, r3, r6, r2
   15578:	umull	r8, r9, r0, r6
   1557c:	strd	r2, [sp, #8]
   15580:	mov	r8, r9
   15584:	ldr	r3, [sp, #12]
   15588:	adds	r8, r2, r8
   1558c:	mov	r2, #0
   15590:	adc	r3, r3, r2
   15594:	cmp	r3, r2
   15598:	movne	r4, #1
   1559c:	movne	r5, #0
   155a0:	b	1553c <__assert_fail@plt+0x3b6c>
   155a4:	ldr	r0, [r4]
   155a8:	cmp	r0, #0
   155ac:	beq	15428 <__assert_fail@plt+0x3a58>
   155b0:	b	1546c <__assert_fail@plt+0x3a9c>
   155b4:	cmp	r2, #0
   155b8:	bne	1532c <__assert_fail@plt+0x395c>
   155bc:	b	154b0 <__assert_fail@plt+0x3ae0>
   155c0:	cmp	r9, #0
   155c4:	movne	r0, fp
   155c8:	bne	15610 <__assert_fail@plt+0x3c40>
   155cc:	mov	r0, r9
   155d0:	ldrd	r2, [sp, #16]
   155d4:	strd	r2, [r5]
   155d8:	b	15434 <__assert_fail@plt+0x3a64>
   155dc:	ldrd	r2, [sp, #16]
   155e0:	mov	r0, sl
   155e4:	strd	r2, [r5]
   155e8:	b	15434 <__assert_fail@plt+0x3a64>
   155ec:	mov	r4, fp
   155f0:	ldr	r8, [sp, #36]	; 0x24
   155f4:	ldr	fp, [sp, #32]
   155f8:	mov	r5, lr
   155fc:	mov	r9, sl
   15600:	strd	r0, [sp, #16]
   15604:	mvn	r0, #33	; 0x21
   15608:	cmp	r9, #0
   1560c:	beq	15614 <__assert_fail@plt+0x3c44>
   15610:	str	fp, [r9]
   15614:	ldrd	r2, [sp]
   15618:	mov	r1, r2
   1561c:	orrs	r3, r1, r3
   15620:	movne	r3, #1
   15624:	moveq	r3, #0
   15628:	cmp	fp, #0
   1562c:	moveq	r3, #0
   15630:	cmp	r3, #0
   15634:	beq	1576c <__assert_fail@plt+0x3d9c>
   15638:	ldr	r3, [pc, #576]	; 15880 <__assert_fail@plt+0x3eb0>
   1563c:	ldr	r1, [pc, #576]	; 15884 <__assert_fail@plt+0x3eb4>
   15640:	umull	ip, r3, r3, r8
   15644:	smull	ip, r1, r1, r8
   15648:	lsr	r3, r3, #1
   1564c:	rsb	r1, r1, r8, asr #31
   15650:	add	r3, r3, r3, lsl #1
   15654:	add	r1, r1, fp
   15658:	subs	r3, r8, r3
   1565c:	sub	r6, r1, #1
   15660:	bne	157dc <__assert_fail@plt+0x3e0c>
   15664:	ldrd	r8, [sp]
   15668:	adds	r3, r8, r8
   1566c:	adc	r2, r9, r9
   15670:	adds	r3, r3, r8
   15674:	adc	r2, r2, r9
   15678:	lsl	ip, r3, #5
   1567c:	lsl	lr, r2, #5
   15680:	orr	lr, lr, r3, lsr #27
   15684:	adds	r3, r3, ip
   15688:	adc	r2, r2, lr
   1568c:	adds	r3, r8, r3
   15690:	str	r3, [sp]
   15694:	ldr	r3, [sp, #4]
   15698:	adc	r3, r3, r2
   1569c:	str	r3, [sp, #4]
   156a0:	cmp	r6, #0
   156a4:	blt	15428 <__assert_fail@plt+0x3a58>
   156a8:	beq	15750 <__assert_fail@plt+0x3d80>
   156ac:	ldr	r3, [sp, #4]
   156b0:	ldr	r8, [sp, #28]
   156b4:	cmp	r3, #0
   156b8:	mov	r6, #0
   156bc:	asr	r9, r8, #31
   156c0:	mov	r7, #0
   156c4:	bne	15844 <__assert_fail@plt+0x3e74>
   156c8:	orrs	r3, r6, r7
   156cc:	bne	15750 <__assert_fail@plt+0x3d80>
   156d0:	sub	r1, r1, #3
   156d4:	ldrd	r2, [sp]
   156d8:	mov	lr, r4
   156dc:	str	r5, [sp, #8]
   156e0:	b	156f0 <__assert_fail@plt+0x3d20>
   156e4:	orrs	ip, r6, r7
   156e8:	sub	r1, r1, #1
   156ec:	bne	15744 <__assert_fail@plt+0x3d74>
   156f0:	mul	ip, r2, r9
   156f4:	cmn	r1, #1
   156f8:	mla	ip, r8, r3, ip
   156fc:	umull	r2, r3, r2, r8
   15700:	add	ip, ip, r3
   15704:	mov	r3, ip
   15708:	beq	15744 <__assert_fail@plt+0x3d74>
   1570c:	cmp	ip, #0
   15710:	mov	r6, #0
   15714:	mov	r7, #0
   15718:	beq	156e4 <__assert_fail@plt+0x3d14>
   1571c:	umull	sl, fp, r2, r8
   15720:	umull	r4, r5, r8, ip
   15724:	mov	ip, fp
   15728:	adds	ip, r4, ip
   1572c:	mov	ip, #0
   15730:	adc	ip, r5, ip
   15734:	cmp	ip, #0
   15738:	movne	r6, #1
   1573c:	movne	r7, #0
   15740:	b	156e4 <__assert_fail@plt+0x3d14>
   15744:	ldr	r5, [sp, #8]
   15748:	mov	r4, lr
   1574c:	strd	r2, [sp]
   15750:	ldrd	r2, [sp]
   15754:	ldr	r1, [sp, #16]
   15758:	adds	r1, r1, r2
   1575c:	str	r1, [sp, #16]
   15760:	ldr	r1, [sp, #20]
   15764:	adc	r3, r1, r3
   15768:	str	r3, [sp, #20]
   1576c:	ldrd	r2, [sp, #16]
   15770:	strd	r2, [r5]
   15774:	b	15470 <__assert_fail@plt+0x3aa0>
   15778:	mov	r4, fp
   1577c:	strd	r0, [sp, #16]
   15780:	ldr	r8, [sp, #36]	; 0x24
   15784:	ldr	fp, [sp, #32]
   15788:	mov	r5, lr
   1578c:	mov	r9, sl
   15790:	mov	r0, #0
   15794:	b	15608 <__assert_fail@plt+0x3c38>
   15798:	mov	r3, #1000	; 0x3e8
   1579c:	strd	sl, [sp]
   157a0:	ldr	r5, [sp, #28]
   157a4:	mov	sl, r9
   157a8:	str	r3, [sp, #28]
   157ac:	ldr	r9, [sp, #32]
   157b0:	b	154c8 <__assert_fail@plt+0x3af8>
   157b4:	ldr	r6, [pc, #204]	; 15888 <__assert_fail@plt+0x3eb8>
   157b8:	mov	r1, r7
   157bc:	add	r6, pc, r6
   157c0:	mov	r0, r6
   157c4:	bl	117a8 <strchr@plt>
   157c8:	cmp	r0, #0
   157cc:	bne	154e8 <__assert_fail@plt+0x3b18>
   157d0:	b	15428 <__assert_fail@plt+0x3a58>
   157d4:	mov	r0, ip
   157d8:	b	1546c <__assert_fail@plt+0x3a9c>
   157dc:	cmp	r3, #1
   157e0:	bne	156a0 <__assert_fail@plt+0x3cd0>
   157e4:	ldrd	r8, [sp]
   157e8:	lsl	r2, r9, #2
   157ec:	lsl	r3, r8, #2
   157f0:	adds	r3, r3, r8
   157f4:	orr	r2, r2, r8, lsr #30
   157f8:	adc	r2, r2, r9
   157fc:	adds	r3, r3, r3
   15800:	str	r3, [sp]
   15804:	adc	r3, r2, r2
   15808:	str	r3, [sp, #4]
   1580c:	b	156a0 <__assert_fail@plt+0x3cd0>
   15810:	ldr	lr, [sp, #28]
   15814:	ldr	r3, [sp, #16]
   15818:	ldr	sl, [sp, #20]
   1581c:	umull	r2, r3, r3, lr
   15820:	str	r3, [sp, #8]
   15824:	mov	r3, #0
   15828:	str	r3, [sp, #12]
   1582c:	ldrd	r2, [sp, #8]
   15830:	umlal	r2, r3, sl, lr
   15834:	cmp	r3, #0
   15838:	movne	r0, #1
   1583c:	movne	r1, #0
   15840:	b	15514 <__assert_fail@plt+0x3b44>
   15844:	ldr	r3, [sp]
   15848:	ldr	ip, [sp, #28]
   1584c:	ldr	lr, [sp, #4]
   15850:	umull	sl, fp, r3, ip
   15854:	mov	r3, #0
   15858:	mov	r2, fp
   1585c:	umlal	r2, r3, lr, ip
   15860:	cmp	r3, #0
   15864:	movne	r6, #1
   15868:	movne	r7, #0
   1586c:	b	156c8 <__assert_fail@plt+0x3cf8>
   15870:	bl	11640 <__stack_chk_fail@plt>
   15874:	andeq	r6, r1, r8, asr #24
   15878:	andeq	r0, r0, r0, lsr #3
   1587c:	andeq	r6, r0, ip, ror r3
   15880:	bge	feac0334 <optarg@@GLIBC_2.4+0xfea94314>
   15884:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   15888:	muleq	r0, ip, r0
   1588c:	mov	r2, #0
   15890:	b	151fc <__assert_fail@plt+0x382c>
   15894:	push	{r4, r5, r6, lr}
   15898:	subs	r5, r0, #0
   1589c:	mov	r6, r1
   158a0:	beq	1590c <__assert_fail@plt+0x3f3c>
   158a4:	ldrsb	r4, [r5]
   158a8:	cmp	r4, #0
   158ac:	beq	15920 <__assert_fail@plt+0x3f50>
   158b0:	bl	11754 <__ctype_b_loc@plt>
   158b4:	mov	r3, r5
   158b8:	ldr	r0, [r0]
   158bc:	b	158d4 <__assert_fail@plt+0x3f04>
   158c0:	adds	r3, r3, #1
   158c4:	beq	1590c <__assert_fail@plt+0x3f3c>
   158c8:	ldrsb	r4, [r3]
   158cc:	cmp	r4, #0
   158d0:	beq	158e8 <__assert_fail@plt+0x3f18>
   158d4:	uxtb	r4, r4
   158d8:	lsl	r4, r4, #1
   158dc:	ldrh	r2, [r0, r4]
   158e0:	tst	r2, #2048	; 0x800
   158e4:	bne	158c0 <__assert_fail@plt+0x3ef0>
   158e8:	cmp	r6, #0
   158ec:	strne	r3, [r6]
   158f0:	cmp	r5, r3
   158f4:	bcs	15918 <__assert_fail@plt+0x3f48>
   158f8:	ldrsb	r3, [r3]
   158fc:	cmp	r3, #0
   15900:	bne	15918 <__assert_fail@plt+0x3f48>
   15904:	mov	r0, #1
   15908:	pop	{r4, r5, r6, pc}
   1590c:	cmp	r6, #0
   15910:	movne	r3, #0
   15914:	strne	r3, [r6]
   15918:	mov	r0, #0
   1591c:	pop	{r4, r5, r6, pc}
   15920:	cmp	r1, #0
   15924:	strne	r5, [r1]
   15928:	b	15918 <__assert_fail@plt+0x3f48>
   1592c:	push	{r4, r5, r6, lr}
   15930:	subs	r5, r0, #0
   15934:	mov	r6, r1
   15938:	beq	159a4 <__assert_fail@plt+0x3fd4>
   1593c:	ldrsb	r4, [r5]
   15940:	cmp	r4, #0
   15944:	beq	159b8 <__assert_fail@plt+0x3fe8>
   15948:	bl	11754 <__ctype_b_loc@plt>
   1594c:	mov	r3, r5
   15950:	ldr	r0, [r0]
   15954:	b	1596c <__assert_fail@plt+0x3f9c>
   15958:	adds	r3, r3, #1
   1595c:	beq	159a4 <__assert_fail@plt+0x3fd4>
   15960:	ldrsb	r4, [r3]
   15964:	cmp	r4, #0
   15968:	beq	15980 <__assert_fail@plt+0x3fb0>
   1596c:	uxtb	r4, r4
   15970:	lsl	r4, r4, #1
   15974:	ldrh	r2, [r0, r4]
   15978:	tst	r2, #4096	; 0x1000
   1597c:	bne	15958 <__assert_fail@plt+0x3f88>
   15980:	cmp	r6, #0
   15984:	strne	r3, [r6]
   15988:	cmp	r5, r3
   1598c:	bcs	159b0 <__assert_fail@plt+0x3fe0>
   15990:	ldrsb	r3, [r3]
   15994:	cmp	r3, #0
   15998:	bne	159b0 <__assert_fail@plt+0x3fe0>
   1599c:	mov	r0, #1
   159a0:	pop	{r4, r5, r6, pc}
   159a4:	cmp	r6, #0
   159a8:	movne	r3, #0
   159ac:	strne	r3, [r6]
   159b0:	mov	r0, #0
   159b4:	pop	{r4, r5, r6, pc}
   159b8:	cmp	r1, #0
   159bc:	strne	r5, [r1]
   159c0:	b	159b0 <__assert_fail@plt+0x3fe0>
   159c4:	push	{r1, r2, r3}
   159c8:	ldr	r3, [pc, #188]	; 15a8c <__assert_fail@plt+0x40bc>
   159cc:	ldr	r2, [pc, #188]	; 15a90 <__assert_fail@plt+0x40c0>
   159d0:	add	r3, pc, r3
   159d4:	push	{r4, r5, r6, r7, r8, lr}
   159d8:	sub	sp, sp, #12
   159dc:	ldr	r7, [r3, r2]
   159e0:	ldr	r8, [sp, #36]	; 0x24
   159e4:	mov	r6, r0
   159e8:	ldr	r3, [r7]
   159ec:	add	r4, sp, #48	; 0x30
   159f0:	str	r3, [sp, #4]
   159f4:	b	15a10 <__assert_fail@plt+0x4040>
   159f8:	mov	r1, r5
   159fc:	mov	r0, r6
   15a00:	bl	11544 <strcmp@plt>
   15a04:	add	r4, r4, #8
   15a08:	cmp	r0, #0
   15a0c:	beq	15a48 <__assert_fail@plt+0x4078>
   15a10:	ldr	r1, [r4, #-8]
   15a14:	sub	r3, r4, #4
   15a18:	cmp	r1, #0
   15a1c:	str	r3, [sp]
   15a20:	beq	15a68 <__assert_fail@plt+0x4098>
   15a24:	ldr	r5, [r4, #-4]
   15a28:	str	r4, [sp]
   15a2c:	cmp	r5, #0
   15a30:	beq	15a68 <__assert_fail@plt+0x4098>
   15a34:	mov	r0, r6
   15a38:	bl	11544 <strcmp@plt>
   15a3c:	cmp	r0, #0
   15a40:	bne	159f8 <__assert_fail@plt+0x4028>
   15a44:	mov	r0, #1
   15a48:	ldr	r2, [sp, #4]
   15a4c:	ldr	r3, [r7]
   15a50:	cmp	r2, r3
   15a54:	bne	15a88 <__assert_fail@plt+0x40b8>
   15a58:	add	sp, sp, #12
   15a5c:	pop	{r4, r5, r6, r7, r8, lr}
   15a60:	add	sp, sp, #12
   15a64:	bx	lr
   15a68:	ldr	r1, [pc, #36]	; 15a94 <__assert_fail@plt+0x40c4>
   15a6c:	mov	r3, r6
   15a70:	add	r1, pc, r1
   15a74:	mov	r2, r8
   15a78:	ldr	r0, [r1]
   15a7c:	ldr	r1, [pc, #20]	; 15a98 <__assert_fail@plt+0x40c8>
   15a80:	add	r1, pc, r1
   15a84:	bl	118e0 <errx@plt>
   15a88:	bl	11640 <__stack_chk_fail@plt>
   15a8c:	andeq	r6, r1, ip, ror r4
   15a90:	andeq	r0, r0, r0, lsr #3
   15a94:	muleq	r1, r0, r5
   15a98:	andeq	r5, r0, r0, asr #27
   15a9c:	cmp	r1, #0
   15aa0:	beq	15aec <__assert_fail@plt+0x411c>
   15aa4:	ldrsb	r3, [r0]
   15aa8:	cmp	r3, #0
   15aac:	beq	15aec <__assert_fail@plt+0x411c>
   15ab0:	sxtb	r2, r2
   15ab4:	cmp	r3, r2
   15ab8:	bxeq	lr
   15abc:	add	r1, r0, r1
   15ac0:	add	r3, r0, #1
   15ac4:	b	15ae0 <__assert_fail@plt+0x4110>
   15ac8:	ldrsb	ip, [r3]
   15acc:	add	r3, r3, #1
   15ad0:	cmp	ip, #0
   15ad4:	beq	15aec <__assert_fail@plt+0x411c>
   15ad8:	cmp	ip, r2
   15adc:	bxeq	lr
   15ae0:	cmp	r3, r1
   15ae4:	mov	r0, r3
   15ae8:	bne	15ac8 <__assert_fail@plt+0x40f8>
   15aec:	mov	r0, #0
   15af0:	bx	lr
   15af4:	push	{r4, r5, r6, lr}
   15af8:	mov	r2, #10
   15afc:	mov	r4, r0
   15b00:	mov	r5, r1
   15b04:	bl	151b8 <__assert_fail@plt+0x37e8>
   15b08:	cmp	r0, #65536	; 0x10000
   15b0c:	bcs	15b18 <__assert_fail@plt+0x4148>
   15b10:	uxth	r0, r0
   15b14:	pop	{r4, r5, r6, pc}
   15b18:	mov	r1, r5
   15b1c:	mov	r0, r4
   15b20:	bl	15178 <__assert_fail@plt+0x37a8>
   15b24:	push	{r4, r5, r6, lr}
   15b28:	mov	r2, #16
   15b2c:	mov	r4, r0
   15b30:	mov	r5, r1
   15b34:	bl	151b8 <__assert_fail@plt+0x37e8>
   15b38:	cmp	r0, #65536	; 0x10000
   15b3c:	bcs	15b48 <__assert_fail@plt+0x4178>
   15b40:	uxth	r0, r0
   15b44:	pop	{r4, r5, r6, pc}
   15b48:	mov	r1, r5
   15b4c:	mov	r0, r4
   15b50:	bl	15178 <__assert_fail@plt+0x37a8>
   15b54:	mov	r2, #10
   15b58:	b	151b8 <__assert_fail@plt+0x37e8>
   15b5c:	mov	r2, #16
   15b60:	b	151b8 <__assert_fail@plt+0x37e8>
   15b64:	ldr	r2, [pc, #236]	; 15c58 <__assert_fail@plt+0x4288>
   15b68:	ldr	ip, [pc, #236]	; 15c5c <__assert_fail@plt+0x428c>
   15b6c:	add	r2, pc, r2
   15b70:	push	{r4, r5, r6, r7, r8, lr}
   15b74:	sub	sp, sp, #8
   15b78:	ldr	r7, [r2, ip]
   15b7c:	mov	r5, #0
   15b80:	mov	r4, r0
   15b84:	ldr	r3, [r7]
   15b88:	mov	r8, r1
   15b8c:	str	r5, [sp]
   15b90:	str	r3, [sp, #4]
   15b94:	bl	117d8 <__errno_location@plt>
   15b98:	cmp	r4, r5
   15b9c:	str	r5, [r0]
   15ba0:	beq	15bb0 <__assert_fail@plt+0x41e0>
   15ba4:	ldrsb	r3, [r4]
   15ba8:	cmp	r3, r5
   15bac:	bne	15bd0 <__assert_fail@plt+0x4200>
   15bb0:	ldr	r1, [pc, #168]	; 15c60 <__assert_fail@plt+0x4290>
   15bb4:	mov	r3, r4
   15bb8:	add	r1, pc, r1
   15bbc:	mov	r2, r8
   15bc0:	ldr	r0, [r1]
   15bc4:	ldr	r1, [pc, #152]	; 15c64 <__assert_fail@plt+0x4294>
   15bc8:	add	r1, pc, r1
   15bcc:	bl	118e0 <errx@plt>
   15bd0:	mov	r6, r0
   15bd4:	mov	r2, #10
   15bd8:	mov	r3, r5
   15bdc:	mov	r1, sp
   15be0:	mov	r0, r4
   15be4:	bl	11940 <__strtoll_internal@plt>
   15be8:	ldr	r2, [r6]
   15bec:	cmp	r2, r5
   15bf0:	bne	15c2c <__assert_fail@plt+0x425c>
   15bf4:	ldr	r3, [sp]
   15bf8:	cmp	r3, r4
   15bfc:	beq	15bb0 <__assert_fail@plt+0x41e0>
   15c00:	cmp	r3, r5
   15c04:	beq	15c14 <__assert_fail@plt+0x4244>
   15c08:	ldrsb	r3, [r3]
   15c0c:	cmp	r3, r5
   15c10:	bne	15bb0 <__assert_fail@plt+0x41e0>
   15c14:	ldr	r2, [sp, #4]
   15c18:	ldr	r3, [r7]
   15c1c:	cmp	r2, r3
   15c20:	bne	15c54 <__assert_fail@plt+0x4284>
   15c24:	add	sp, sp, #8
   15c28:	pop	{r4, r5, r6, r7, r8, pc}
   15c2c:	ldr	r3, [pc, #52]	; 15c68 <__assert_fail@plt+0x4298>
   15c30:	cmp	r2, #34	; 0x22
   15c34:	add	r3, pc, r3
   15c38:	ldr	r0, [r3]
   15c3c:	bne	15bb0 <__assert_fail@plt+0x41e0>
   15c40:	ldr	r1, [pc, #36]	; 15c6c <__assert_fail@plt+0x429c>
   15c44:	mov	r3, r4
   15c48:	mov	r2, r8
   15c4c:	add	r1, pc, r1
   15c50:	bl	11670 <err@plt>
   15c54:	bl	11640 <__stack_chk_fail@plt>
   15c58:	andeq	r6, r1, r0, ror #5
   15c5c:	andeq	r0, r0, r0, lsr #3
   15c60:	andeq	r6, r1, r8, asr #8
   15c64:	andeq	r5, r0, r8, ror ip
   15c68:	andeq	r6, r1, ip, asr #7
   15c6c:	strdeq	r5, [r0], -r4
   15c70:	push	{r4, r5, r6, r7, r8, lr}
   15c74:	mov	r7, r0
   15c78:	mov	r6, r1
   15c7c:	bl	15b64 <__assert_fail@plt+0x4194>
   15c80:	mov	r3, #0
   15c84:	mvn	r2, #0
   15c88:	adds	r4, r0, #-2147483648	; 0x80000000
   15c8c:	adc	r5, r1, #0
   15c90:	cmp	r5, r3
   15c94:	cmpeq	r4, r2
   15c98:	popls	{r4, r5, r6, r7, r8, pc}
   15c9c:	bl	117d8 <__errno_location@plt>
   15ca0:	ldr	ip, [pc, #32]	; 15cc8 <__assert_fail@plt+0x42f8>
   15ca4:	ldr	r1, [pc, #32]	; 15ccc <__assert_fail@plt+0x42fc>
   15ca8:	add	ip, pc, ip
   15cac:	mov	lr, #34	; 0x22
   15cb0:	mov	r3, r7
   15cb4:	mov	r2, r6
   15cb8:	add	r1, pc, r1
   15cbc:	str	lr, [r0]
   15cc0:	ldr	r0, [ip]
   15cc4:	bl	11670 <err@plt>
   15cc8:	andeq	r6, r1, r8, asr r3
   15ccc:	andeq	r5, r0, r8, lsl #23
   15cd0:	push	{r4, r5, r6, lr}
   15cd4:	mov	r5, r0
   15cd8:	mov	r4, r1
   15cdc:	bl	15c70 <__assert_fail@plt+0x42a0>
   15ce0:	add	r3, r0, #32768	; 0x8000
   15ce4:	cmp	r3, #65536	; 0x10000
   15ce8:	bcs	15cf4 <__assert_fail@plt+0x4324>
   15cec:	sxth	r0, r0
   15cf0:	pop	{r4, r5, r6, pc}
   15cf4:	bl	117d8 <__errno_location@plt>
   15cf8:	ldr	ip, [pc, #32]	; 15d20 <__assert_fail@plt+0x4350>
   15cfc:	ldr	r1, [pc, #32]	; 15d24 <__assert_fail@plt+0x4354>
   15d00:	add	ip, pc, ip
   15d04:	mov	lr, #34	; 0x22
   15d08:	mov	r3, r5
   15d0c:	mov	r2, r4
   15d10:	add	r1, pc, r1
   15d14:	str	lr, [r0]
   15d18:	ldr	r0, [ip]
   15d1c:	bl	11670 <err@plt>
   15d20:	andeq	r6, r1, r0, lsl #6
   15d24:	andeq	r5, r0, r0, lsr fp
   15d28:	mov	r2, #10
   15d2c:	b	15064 <__assert_fail@plt+0x3694>
   15d30:	mov	r2, #16
   15d34:	b	15064 <__assert_fail@plt+0x3694>
   15d38:	ldr	r2, [pc, #228]	; 15e24 <__assert_fail@plt+0x4454>
   15d3c:	ldr	r3, [pc, #228]	; 15e28 <__assert_fail@plt+0x4458>
   15d40:	add	r2, pc, r2
   15d44:	push	{r4, r5, r6, r7, r8, lr}
   15d48:	sub	sp, sp, #8
   15d4c:	ldr	r7, [r2, r3]
   15d50:	mov	r5, #0
   15d54:	mov	r4, r0
   15d58:	ldr	r3, [r7]
   15d5c:	mov	r8, r1
   15d60:	str	r5, [sp]
   15d64:	str	r3, [sp, #4]
   15d68:	bl	117d8 <__errno_location@plt>
   15d6c:	cmp	r4, r5
   15d70:	str	r5, [r0]
   15d74:	beq	15d84 <__assert_fail@plt+0x43b4>
   15d78:	ldrsb	r3, [r4]
   15d7c:	cmp	r3, r5
   15d80:	bne	15da4 <__assert_fail@plt+0x43d4>
   15d84:	ldr	r1, [pc, #160]	; 15e2c <__assert_fail@plt+0x445c>
   15d88:	mov	r3, r4
   15d8c:	add	r1, pc, r1
   15d90:	mov	r2, r8
   15d94:	ldr	r0, [r1]
   15d98:	ldr	r1, [pc, #144]	; 15e30 <__assert_fail@plt+0x4460>
   15d9c:	add	r1, pc, r1
   15da0:	bl	118e0 <errx@plt>
   15da4:	mov	r6, r0
   15da8:	mov	r1, sp
   15dac:	mov	r0, r4
   15db0:	bl	11874 <strtod@plt>
   15db4:	ldr	r2, [r6]
   15db8:	cmp	r2, r5
   15dbc:	bne	15df8 <__assert_fail@plt+0x4428>
   15dc0:	ldr	r3, [sp]
   15dc4:	cmp	r3, r4
   15dc8:	beq	15d84 <__assert_fail@plt+0x43b4>
   15dcc:	cmp	r3, r5
   15dd0:	beq	15de0 <__assert_fail@plt+0x4410>
   15dd4:	ldrsb	r3, [r3]
   15dd8:	cmp	r3, r5
   15ddc:	bne	15d84 <__assert_fail@plt+0x43b4>
   15de0:	ldr	r2, [sp, #4]
   15de4:	ldr	r3, [r7]
   15de8:	cmp	r2, r3
   15dec:	bne	15e20 <__assert_fail@plt+0x4450>
   15df0:	add	sp, sp, #8
   15df4:	pop	{r4, r5, r6, r7, r8, pc}
   15df8:	ldr	r3, [pc, #52]	; 15e34 <__assert_fail@plt+0x4464>
   15dfc:	cmp	r2, #34	; 0x22
   15e00:	add	r3, pc, r3
   15e04:	ldr	r0, [r3]
   15e08:	bne	15d84 <__assert_fail@plt+0x43b4>
   15e0c:	ldr	r1, [pc, #36]	; 15e38 <__assert_fail@plt+0x4468>
   15e10:	mov	r3, r4
   15e14:	mov	r2, r8
   15e18:	add	r1, pc, r1
   15e1c:	bl	11670 <err@plt>
   15e20:	bl	11640 <__stack_chk_fail@plt>
   15e24:	andeq	r6, r1, ip, lsl #2
   15e28:	andeq	r0, r0, r0, lsr #3
   15e2c:	andeq	r6, r1, r4, ror r2
   15e30:	andeq	r5, r0, r4, lsr #21
   15e34:	andeq	r6, r1, r0, lsl #4
   15e38:	andeq	r5, r0, r8, lsr #20
   15e3c:	ldr	r2, [pc, #232]	; 15f2c <__assert_fail@plt+0x455c>
   15e40:	ldr	r3, [pc, #232]	; 15f30 <__assert_fail@plt+0x4560>
   15e44:	add	r2, pc, r2
   15e48:	push	{r4, r5, r6, r7, r8, lr}
   15e4c:	sub	sp, sp, #8
   15e50:	ldr	r7, [r2, r3]
   15e54:	mov	r5, #0
   15e58:	mov	r4, r0
   15e5c:	ldr	r3, [r7]
   15e60:	mov	r8, r1
   15e64:	str	r5, [sp]
   15e68:	str	r3, [sp, #4]
   15e6c:	bl	117d8 <__errno_location@plt>
   15e70:	cmp	r4, r5
   15e74:	str	r5, [r0]
   15e78:	beq	15e88 <__assert_fail@plt+0x44b8>
   15e7c:	ldrsb	r3, [r4]
   15e80:	cmp	r3, r5
   15e84:	bne	15ea8 <__assert_fail@plt+0x44d8>
   15e88:	ldr	r1, [pc, #164]	; 15f34 <__assert_fail@plt+0x4564>
   15e8c:	mov	r3, r4
   15e90:	add	r1, pc, r1
   15e94:	mov	r2, r8
   15e98:	ldr	r0, [r1]
   15e9c:	ldr	r1, [pc, #148]	; 15f38 <__assert_fail@plt+0x4568>
   15ea0:	add	r1, pc, r1
   15ea4:	bl	118e0 <errx@plt>
   15ea8:	mov	r6, r0
   15eac:	mov	r2, #10
   15eb0:	mov	r1, sp
   15eb4:	mov	r0, r4
   15eb8:	bl	1155c <strtol@plt>
   15ebc:	ldr	r2, [r6]
   15ec0:	cmp	r2, r5
   15ec4:	bne	15f00 <__assert_fail@plt+0x4530>
   15ec8:	ldr	r3, [sp]
   15ecc:	cmp	r3, r4
   15ed0:	beq	15e88 <__assert_fail@plt+0x44b8>
   15ed4:	cmp	r3, r5
   15ed8:	beq	15ee8 <__assert_fail@plt+0x4518>
   15edc:	ldrsb	r3, [r3]
   15ee0:	cmp	r3, r5
   15ee4:	bne	15e88 <__assert_fail@plt+0x44b8>
   15ee8:	ldr	r2, [sp, #4]
   15eec:	ldr	r3, [r7]
   15ef0:	cmp	r2, r3
   15ef4:	bne	15f28 <__assert_fail@plt+0x4558>
   15ef8:	add	sp, sp, #8
   15efc:	pop	{r4, r5, r6, r7, r8, pc}
   15f00:	ldr	r3, [pc, #52]	; 15f3c <__assert_fail@plt+0x456c>
   15f04:	cmp	r2, #34	; 0x22
   15f08:	add	r3, pc, r3
   15f0c:	ldr	r0, [r3]
   15f10:	bne	15e88 <__assert_fail@plt+0x44b8>
   15f14:	ldr	r1, [pc, #36]	; 15f40 <__assert_fail@plt+0x4570>
   15f18:	mov	r3, r4
   15f1c:	mov	r2, r8
   15f20:	add	r1, pc, r1
   15f24:	bl	11670 <err@plt>
   15f28:	bl	11640 <__stack_chk_fail@plt>
   15f2c:	andeq	r6, r1, r8
   15f30:	andeq	r0, r0, r0, lsr #3
   15f34:	andeq	r6, r1, r0, ror r1
   15f38:	andeq	r5, r0, r0, lsr #19
   15f3c:	strdeq	r6, [r1], -r8
   15f40:	andeq	r5, r0, r0, lsr #18
   15f44:	ldr	r2, [pc, #232]	; 16034 <__assert_fail@plt+0x4664>
   15f48:	ldr	r3, [pc, #232]	; 16038 <__assert_fail@plt+0x4668>
   15f4c:	add	r2, pc, r2
   15f50:	push	{r4, r5, r6, r7, r8, lr}
   15f54:	sub	sp, sp, #8
   15f58:	ldr	r7, [r2, r3]
   15f5c:	mov	r5, #0
   15f60:	mov	r4, r0
   15f64:	ldr	r3, [r7]
   15f68:	mov	r8, r1
   15f6c:	str	r5, [sp]
   15f70:	str	r3, [sp, #4]
   15f74:	bl	117d8 <__errno_location@plt>
   15f78:	cmp	r4, r5
   15f7c:	str	r5, [r0]
   15f80:	beq	15f90 <__assert_fail@plt+0x45c0>
   15f84:	ldrsb	r3, [r4]
   15f88:	cmp	r3, r5
   15f8c:	bne	15fb0 <__assert_fail@plt+0x45e0>
   15f90:	ldr	r1, [pc, #164]	; 1603c <__assert_fail@plt+0x466c>
   15f94:	mov	r3, r4
   15f98:	add	r1, pc, r1
   15f9c:	mov	r2, r8
   15fa0:	ldr	r0, [r1]
   15fa4:	ldr	r1, [pc, #148]	; 16040 <__assert_fail@plt+0x4670>
   15fa8:	add	r1, pc, r1
   15fac:	bl	118e0 <errx@plt>
   15fb0:	mov	r6, r0
   15fb4:	mov	r2, #10
   15fb8:	mov	r1, sp
   15fbc:	mov	r0, r4
   15fc0:	bl	11790 <strtoul@plt>
   15fc4:	ldr	r2, [r6]
   15fc8:	cmp	r2, r5
   15fcc:	bne	16008 <__assert_fail@plt+0x4638>
   15fd0:	ldr	r3, [sp]
   15fd4:	cmp	r3, r4
   15fd8:	beq	15f90 <__assert_fail@plt+0x45c0>
   15fdc:	cmp	r3, r5
   15fe0:	beq	15ff0 <__assert_fail@plt+0x4620>
   15fe4:	ldrsb	r3, [r3]
   15fe8:	cmp	r3, r5
   15fec:	bne	15f90 <__assert_fail@plt+0x45c0>
   15ff0:	ldr	r2, [sp, #4]
   15ff4:	ldr	r3, [r7]
   15ff8:	cmp	r2, r3
   15ffc:	bne	16030 <__assert_fail@plt+0x4660>
   16000:	add	sp, sp, #8
   16004:	pop	{r4, r5, r6, r7, r8, pc}
   16008:	ldr	r3, [pc, #52]	; 16044 <__assert_fail@plt+0x4674>
   1600c:	cmp	r2, #34	; 0x22
   16010:	add	r3, pc, r3
   16014:	ldr	r0, [r3]
   16018:	bne	15f90 <__assert_fail@plt+0x45c0>
   1601c:	ldr	r1, [pc, #36]	; 16048 <__assert_fail@plt+0x4678>
   16020:	mov	r3, r4
   16024:	mov	r2, r8
   16028:	add	r1, pc, r1
   1602c:	bl	11670 <err@plt>
   16030:	bl	11640 <__stack_chk_fail@plt>
   16034:	andeq	r5, r1, r0, lsl #30
   16038:	andeq	r0, r0, r0, lsr #3
   1603c:	andeq	r6, r1, r8, rrx
   16040:	muleq	r0, r8, r8
   16044:	strdeq	r5, [r1], -r0
   16048:	andeq	r5, r0, r8, lsl r8
   1604c:	ldr	r3, [pc, #140]	; 160e0 <__assert_fail@plt+0x4710>
   16050:	ldr	r2, [pc, #140]	; 160e4 <__assert_fail@plt+0x4714>
   16054:	add	r3, pc, r3
   16058:	push	{r4, r5, r6, lr}
   1605c:	sub	sp, sp, #16
   16060:	ldr	r4, [r3, r2]
   16064:	mov	r5, r1
   16068:	mov	r1, sp
   1606c:	ldr	r3, [r4]
   16070:	mov	r6, r0
   16074:	str	r3, [sp, #12]
   16078:	bl	1588c <__assert_fail@plt+0x3ebc>
   1607c:	cmp	r0, #0
   16080:	beq	160c0 <__assert_fail@plt+0x46f0>
   16084:	bl	117d8 <__errno_location@plt>
   16088:	ldr	r3, [pc, #88]	; 160e8 <__assert_fail@plt+0x4718>
   1608c:	mov	r2, r5
   16090:	ldr	r1, [pc, r3]
   16094:	ldr	r3, [r0]
   16098:	mov	r0, r1
   1609c:	cmp	r3, #0
   160a0:	mov	r3, r6
   160a4:	beq	160b4 <__assert_fail@plt+0x46e4>
   160a8:	ldr	r1, [pc, #60]	; 160ec <__assert_fail@plt+0x471c>
   160ac:	add	r1, pc, r1
   160b0:	bl	11670 <err@plt>
   160b4:	ldr	r1, [pc, #52]	; 160f0 <__assert_fail@plt+0x4720>
   160b8:	add	r1, pc, r1
   160bc:	bl	118e0 <errx@plt>
   160c0:	ldr	r2, [sp, #12]
   160c4:	ldr	r3, [r4]
   160c8:	ldrd	r0, [sp]
   160cc:	cmp	r2, r3
   160d0:	bne	160dc <__assert_fail@plt+0x470c>
   160d4:	add	sp, sp, #16
   160d8:	pop	{r4, r5, r6, pc}
   160dc:	bl	11640 <__stack_chk_fail@plt>
   160e0:	strdeq	r5, [r1], -r8
   160e4:	andeq	r0, r0, r0, lsr #3
   160e8:	andeq	r5, r1, r0, ror pc
   160ec:	muleq	r0, r4, r7
   160f0:	andeq	r5, r0, r8, lsl #15
   160f4:	push	{r4, lr}
   160f8:	mov	r4, r1
   160fc:	mov	r1, r2
   16100:	bl	15d38 <__assert_fail@plt+0x4368>
   16104:	vldr	d6, [pc, #28]	; 16128 <__assert_fail@plt+0x4758>
   16108:	vcvt.s32.f64	s15, d0
   1610c:	vcvt.f64.s32	d5, s15
   16110:	vstr	s15, [r4]
   16114:	vsub.f64	d0, d0, d5
   16118:	vmul.f64	d0, d0, d6
   1611c:	vcvt.s32.f64	s0, d0
   16120:	vstr	s0, [r4, #4]
   16124:	pop	{r4, pc}
   16128:	andeq	r0, r0, r0
   1612c:	smlawbmi	lr, r0, r4, r8
   16130:	and	r2, r0, #61440	; 0xf000
   16134:	cmp	r2, #16384	; 0x4000
   16138:	moveq	r2, r1
   1613c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16140:	moveq	sl, #100	; 0x64
   16144:	mov	r3, r0
   16148:	add	r9, r1, #1
   1614c:	add	r8, r1, #2
   16150:	add	r7, r1, #3
   16154:	add	r6, r1, #4
   16158:	add	r5, r1, #5
   1615c:	add	r4, r1, #6
   16160:	add	lr, r1, #7
   16164:	add	ip, r1, #8
   16168:	add	r0, r1, #9
   1616c:	strbeq	sl, [r2], #10
   16170:	beq	16214 <__assert_fail@plt+0x4844>
   16174:	cmp	r2, #40960	; 0xa000
   16178:	moveq	r2, r1
   1617c:	moveq	sl, #108	; 0x6c
   16180:	strbeq	sl, [r2], #10
   16184:	beq	16214 <__assert_fail@plt+0x4844>
   16188:	cmp	r2, #8192	; 0x2000
   1618c:	moveq	r2, r1
   16190:	moveq	sl, #99	; 0x63
   16194:	strbeq	sl, [r2], #10
   16198:	beq	16214 <__assert_fail@plt+0x4844>
   1619c:	cmp	r2, #24576	; 0x6000
   161a0:	moveq	r2, r1
   161a4:	moveq	sl, #98	; 0x62
   161a8:	strbeq	sl, [r2], #10
   161ac:	beq	16214 <__assert_fail@plt+0x4844>
   161b0:	cmp	r2, #49152	; 0xc000
   161b4:	moveq	r2, r1
   161b8:	moveq	sl, #115	; 0x73
   161bc:	strbeq	sl, [r2], #10
   161c0:	beq	16214 <__assert_fail@plt+0x4844>
   161c4:	cmp	r2, #4096	; 0x1000
   161c8:	moveq	r2, r1
   161cc:	moveq	sl, #112	; 0x70
   161d0:	strbeq	sl, [r2], #10
   161d4:	beq	16214 <__assert_fail@plt+0x4844>
   161d8:	cmp	r2, #32768	; 0x8000
   161dc:	moveq	r2, r1
   161e0:	moveq	sl, #45	; 0x2d
   161e4:	strbeq	sl, [r2], #10
   161e8:	beq	16214 <__assert_fail@plt+0x4844>
   161ec:	mov	r2, r0
   161f0:	mov	r0, ip
   161f4:	mov	ip, lr
   161f8:	mov	lr, r4
   161fc:	mov	r4, r5
   16200:	mov	r5, r6
   16204:	mov	r6, r7
   16208:	mov	r7, r8
   1620c:	mov	r8, r9
   16210:	mov	r9, r1
   16214:	tst	r3, #256	; 0x100
   16218:	movne	fp, #114	; 0x72
   1621c:	moveq	fp, #45	; 0x2d
   16220:	tst	r3, #128	; 0x80
   16224:	movne	sl, #119	; 0x77
   16228:	moveq	sl, #45	; 0x2d
   1622c:	tst	r3, #2048	; 0x800
   16230:	strb	fp, [r9]
   16234:	and	r9, r3, #64	; 0x40
   16238:	strb	sl, [r8]
   1623c:	beq	162d8 <__assert_fail@plt+0x4908>
   16240:	cmp	r9, #0
   16244:	movne	r9, #115	; 0x73
   16248:	moveq	r9, #83	; 0x53
   1624c:	tst	r3, #32
   16250:	movne	r8, #114	; 0x72
   16254:	moveq	r8, #45	; 0x2d
   16258:	tst	r3, #16
   1625c:	strb	r9, [r7]
   16260:	movne	r7, #119	; 0x77
   16264:	moveq	r7, #45	; 0x2d
   16268:	tst	r3, #1024	; 0x400
   1626c:	strb	r8, [r6]
   16270:	and	r6, r3, #8
   16274:	strb	r7, [r5]
   16278:	beq	162e8 <__assert_fail@plt+0x4918>
   1627c:	cmp	r6, #0
   16280:	movne	r6, #115	; 0x73
   16284:	moveq	r6, #83	; 0x53
   16288:	tst	r3, #4
   1628c:	movne	r5, #114	; 0x72
   16290:	moveq	r5, #45	; 0x2d
   16294:	tst	r3, #2
   16298:	strb	r6, [r4]
   1629c:	movne	r4, #119	; 0x77
   162a0:	moveq	r4, #45	; 0x2d
   162a4:	tst	r3, #512	; 0x200
   162a8:	strb	r5, [lr]
   162ac:	and	r3, r3, #1
   162b0:	strb	r4, [ip]
   162b4:	beq	162f8 <__assert_fail@plt+0x4928>
   162b8:	cmp	r3, #0
   162bc:	movne	ip, #116	; 0x74
   162c0:	moveq	ip, #84	; 0x54
   162c4:	mov	r3, #0
   162c8:	strb	ip, [r0]
   162cc:	mov	r0, r1
   162d0:	strb	r3, [r2]
   162d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162d8:	cmp	r9, #0
   162dc:	movne	r9, #120	; 0x78
   162e0:	moveq	r9, #45	; 0x2d
   162e4:	b	1624c <__assert_fail@plt+0x487c>
   162e8:	cmp	r6, #0
   162ec:	movne	r6, #120	; 0x78
   162f0:	moveq	r6, #45	; 0x2d
   162f4:	b	16288 <__assert_fail@plt+0x48b8>
   162f8:	cmp	r3, #0
   162fc:	movne	ip, #120	; 0x78
   16300:	moveq	ip, #45	; 0x2d
   16304:	b	162c4 <__assert_fail@plt+0x48f4>
   16308:	ldr	r1, [pc, #680]	; 165b8 <__assert_fail@plt+0x4be8>
   1630c:	ldr	ip, [pc, #680]	; 165bc <__assert_fail@plt+0x4bec>
   16310:	add	r1, pc, r1
   16314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16318:	sub	sp, sp, #108	; 0x6c
   1631c:	ldr	r8, [r1, ip]
   16320:	tst	r0, #2
   16324:	strd	r2, [sp, #32]
   16328:	ldr	r1, [r8]
   1632c:	addeq	r9, sp, #60	; 0x3c
   16330:	str	r1, [sp, #100]	; 0x64
   16334:	ldrd	r2, [sp, #32]
   16338:	movne	r1, #32
   1633c:	strbne	r1, [sp, #60]	; 0x3c
   16340:	addne	ip, sp, #61	; 0x3d
   16344:	addne	r9, sp, #60	; 0x3c
   16348:	moveq	ip, r9
   1634c:	mov	r1, #10
   16350:	mov	sl, #1
   16354:	sub	lr, r1, #32
   16358:	lsl	r4, sl, r1
   1635c:	lsl	r5, sl, lr
   16360:	rsb	lr, r1, #32
   16364:	orr	r5, r5, sl, lsr lr
   16368:	cmp	r3, r5
   1636c:	cmpeq	r2, r4
   16370:	bcc	1652c <__assert_fail@plt+0x4b5c>
   16374:	add	r1, r1, #10
   16378:	cmp	r1, #70	; 0x46
   1637c:	bne	16354 <__assert_fail@plt+0x4984>
   16380:	mov	lr, ip
   16384:	strd	r2, [sp, #32]
   16388:	mov	r4, r2
   1638c:	tst	r0, #1
   16390:	mov	r2, #69	; 0x45
   16394:	bic	r5, r3, #-268435456	; 0xf0000000
   16398:	lsr	sl, r3, #28
   1639c:	strb	r2, [lr], #1
   163a0:	bne	16514 <__assert_fail@plt+0x4b44>
   163a4:	orrs	r3, r4, r5
   163a8:	mov	r3, #0
   163ac:	strb	r3, [lr]
   163b0:	beq	16554 <__assert_fail@plt+0x4b84>
   163b4:	sub	r2, r1, #20
   163b8:	rsb	r0, r2, #32
   163bc:	lsr	r3, r4, r2
   163c0:	sub	r1, r1, #52	; 0x34
   163c4:	orr	r3, r3, r5, lsl r0
   163c8:	orr	r3, r3, r5, lsr r1
   163cc:	lsr	r2, r5, r2
   163d0:	adds	r6, r3, #50	; 0x32
   163d4:	adc	r7, r2, #0
   163d8:	mov	r3, #0
   163dc:	mov	r2, #100	; 0x64
   163e0:	mov	r0, r6
   163e4:	mov	r1, r7
   163e8:	bl	1a370 <__assert_fail@plt+0x89a0>
   163ec:	cmp	r1, #0
   163f0:	cmpeq	r0, #10
   163f4:	mov	r2, r0
   163f8:	mov	r3, r1
   163fc:	addeq	sl, sl, #1
   16400:	beq	16554 <__assert_fail@plt+0x4b84>
   16404:	cmp	r7, #0
   16408:	cmpeq	r6, #99	; 0x63
   1640c:	strd	r2, [sp, #32]
   16410:	bls	16554 <__assert_fail@plt+0x4b84>
   16414:	bl	1191c <localeconv@plt>
   16418:	ldrd	r2, [sp, #32]
   1641c:	cmp	r0, #0
   16420:	beq	1659c <__assert_fail@plt+0x4bcc>
   16424:	ldr	r0, [r0]
   16428:	cmp	r0, #0
   1642c:	beq	165a8 <__assert_fail@plt+0x4bd8>
   16430:	ldrsb	r1, [r0]
   16434:	cmp	r1, #0
   16438:	ldreq	r0, [pc, #384]	; 165c0 <__assert_fail@plt+0x4bf0>
   1643c:	addeq	r0, pc, r0
   16440:	ldr	r1, [pc, #380]	; 165c4 <__assert_fail@plt+0x4bf4>
   16444:	strd	r2, [sp, #16]
   16448:	add	r1, pc, r1
   1644c:	add	r4, sp, #68	; 0x44
   16450:	mov	r3, #32
   16454:	str	r0, [sp, #8]
   16458:	str	r1, [sp]
   1645c:	str	r9, [sp, #24]
   16460:	str	sl, [sp, #4]
   16464:	mov	r0, r4
   16468:	mov	r1, r3
   1646c:	mov	r2, #1
   16470:	bl	119b8 <__snprintf_chk@plt>
   16474:	b	1657c <__assert_fail@plt+0x4bac>
   16478:	ldr	r4, [pc, #328]	; 165c8 <__assert_fail@plt+0x4bf8>
   1647c:	mvn	sl, #0
   16480:	ldr	fp, [pc, #324]	; 165cc <__assert_fail@plt+0x4bfc>
   16484:	umull	r2, r3, lr, r4
   16488:	sub	r4, r1, #42	; 0x2a
   1648c:	strd	r2, [sp, #40]	; 0x28
   16490:	ldr	r3, [sp, #44]	; 0x2c
   16494:	lsl	r2, sl, lr
   16498:	lsr	r3, r3, #3
   1649c:	str	r3, [sp, #52]	; 0x34
   164a0:	ldr	r3, [sp, #32]
   164a4:	str	r4, [sp, #48]	; 0x30
   164a8:	orr	r4, r2, sl, lsl r4
   164ac:	lsr	r2, r3, lr
   164b0:	mov	r3, r2
   164b4:	ldr	r2, [sp, #52]	; 0x34
   164b8:	add	fp, pc, fp
   164bc:	str	r4, [sp, #40]	; 0x28
   164c0:	ldrsb	fp, [fp, r2]
   164c4:	mov	r2, r3
   164c8:	ldr	r3, [sp, #36]	; 0x24
   164cc:	rsb	r5, lr, #32
   164d0:	ldr	r4, [sp, #40]	; 0x28
   164d4:	orr	r2, r2, r3, lsl r5
   164d8:	orr	r4, r4, sl, lsr r5
   164dc:	ldr	r3, [sp, #32]
   164e0:	str	r4, [sp, #40]	; 0x28
   164e4:	cmp	r0, #0
   164e8:	bic	r4, r3, sl, lsl lr
   164ec:	ldr	r0, [sp, #36]	; 0x24
   164f0:	ldr	r3, [sp, #48]	; 0x30
   164f4:	mov	lr, ip
   164f8:	orr	sl, r2, r0, lsr r3
   164fc:	ldr	r3, [sp, #40]	; 0x28
   16500:	strb	fp, [lr], #1
   16504:	bic	r5, r0, r3
   16508:	beq	163a4 <__assert_fail@plt+0x49d4>
   1650c:	cmp	fp, #66	; 0x42
   16510:	beq	163a4 <__assert_fail@plt+0x49d4>
   16514:	mov	r3, #105	; 0x69
   16518:	strb	r3, [ip, #1]
   1651c:	mov	r3, #66	; 0x42
   16520:	add	lr, ip, #3
   16524:	strb	r3, [ip, #2]
   16528:	b	163a4 <__assert_fail@plt+0x49d4>
   1652c:	subs	lr, r1, #10
   16530:	strd	r2, [sp, #32]
   16534:	and	r0, r0, #1
   16538:	bne	16478 <__assert_fail@plt+0x4aa8>
   1653c:	ldr	sl, [sp, #32]
   16540:	cmp	r0, #0
   16544:	movne	r0, lr
   16548:	mov	r3, #66	; 0x42
   1654c:	strb	r0, [ip, #1]
   16550:	strb	r3, [ip]
   16554:	ldr	r2, [pc, #116]	; 165d0 <__assert_fail@plt+0x4c00>
   16558:	add	r4, sp, #68	; 0x44
   1655c:	add	r2, pc, r2
   16560:	mov	r3, #32
   16564:	stm	sp, {r2, sl}
   16568:	str	r9, [sp, #8]
   1656c:	mov	r0, r4
   16570:	mov	r1, r3
   16574:	mov	r2, #1
   16578:	bl	119b8 <__snprintf_chk@plt>
   1657c:	mov	r0, r4
   16580:	bl	11634 <strdup@plt>
   16584:	ldr	r2, [sp, #100]	; 0x64
   16588:	ldr	r3, [r8]
   1658c:	cmp	r2, r3
   16590:	bne	165b4 <__assert_fail@plt+0x4be4>
   16594:	add	sp, sp, #108	; 0x6c
   16598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1659c:	ldr	r0, [pc, #48]	; 165d4 <__assert_fail@plt+0x4c04>
   165a0:	add	r0, pc, r0
   165a4:	b	16440 <__assert_fail@plt+0x4a70>
   165a8:	ldr	r0, [pc, #40]	; 165d8 <__assert_fail@plt+0x4c08>
   165ac:	add	r0, pc, r0
   165b0:	b	16440 <__assert_fail@plt+0x4a70>
   165b4:	bl	11640 <__stack_chk_fail@plt>
   165b8:	andeq	r5, r1, ip, lsr fp
   165bc:	andeq	r0, r0, r0, lsr #3
   165c0:	andeq	r5, r0, r8, lsr #8
   165c4:	andeq	r5, r0, r8, lsr #8
   165c8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   165cc:			; <UNDEFINED> instruction: 0x000053b0
   165d0:	andeq	r5, r0, r0, lsr #6
   165d4:	andeq	r5, r0, r4, asr #5
   165d8:			; <UNDEFINED> instruction: 0x000052b8
   165dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   165e0:	subs	r4, r0, #0
   165e4:	beq	166b4 <__assert_fail@plt+0x4ce4>
   165e8:	ldrsb	lr, [r4]
   165ec:	cmp	lr, #0
   165f0:	beq	166b4 <__assert_fail@plt+0x4ce4>
   165f4:	cmp	r1, #0
   165f8:	clz	ip, r2
   165fc:	lsr	ip, ip, #5
   16600:	moveq	r0, #1
   16604:	movne	r0, ip
   16608:	cmp	r3, #0
   1660c:	moveq	r0, #1
   16610:	cmp	r0, #0
   16614:	bne	166b4 <__assert_fail@plt+0x4ce4>
   16618:	mov	r8, r3
   1661c:	mov	r7, r2
   16620:	mov	r9, r1
   16624:	mov	r5, r0
   16628:	b	16684 <__assert_fail@plt+0x4cb4>
   1662c:	cmp	r3, #0
   16630:	bne	16670 <__assert_fail@plt+0x4ca0>
   16634:	cmn	r4, #1
   16638:	add	r6, r4, #1
   1663c:	beq	166bc <__assert_fail@plt+0x4cec>
   16640:	cmp	r0, r6
   16644:	bcs	166b4 <__assert_fail@plt+0x4ce4>
   16648:	sub	r1, r6, r0
   1664c:	blx	r8
   16650:	cmn	r0, #1
   16654:	beq	166b4 <__assert_fail@plt+0x4ce4>
   16658:	str	r0, [r9, r5, lsl #2]
   1665c:	ldrsb	r3, [r6]
   16660:	add	r5, r5, #1
   16664:	cmp	r3, #0
   16668:	beq	166bc <__assert_fail@plt+0x4cec>
   1666c:	mov	r0, #0
   16670:	cmn	r4, #1
   16674:	beq	166bc <__assert_fail@plt+0x4cec>
   16678:	ldrsb	lr, [r4, #1]!
   1667c:	cmp	lr, #0
   16680:	beq	166bc <__assert_fail@plt+0x4cec>
   16684:	cmp	r7, r5
   16688:	mov	r6, r4
   1668c:	bls	166c4 <__assert_fail@plt+0x4cf4>
   16690:	cmp	r0, #0
   16694:	moveq	r0, r4
   16698:	cmp	lr, #44	; 0x2c
   1669c:	ldrsb	r3, [r4, #1]
   166a0:	bne	1662c <__assert_fail@plt+0x4c5c>
   166a4:	cmp	r3, #0
   166a8:	beq	16634 <__assert_fail@plt+0x4c64>
   166ac:	cmp	r0, r6
   166b0:	bcc	16648 <__assert_fail@plt+0x4c78>
   166b4:	mvn	r0, #0
   166b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166bc:	mov	r0, r5
   166c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166c4:	mvn	r0, #1
   166c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166cc:	cmp	r0, #0
   166d0:	beq	1673c <__assert_fail@plt+0x4d6c>
   166d4:	push	{r4, lr}
   166d8:	mov	r4, r3
   166dc:	cmp	r4, #0
   166e0:	ldrsb	ip, [r0]
   166e4:	clz	r3, ip
   166e8:	lsr	r3, r3, #5
   166ec:	moveq	r3, #1
   166f0:	cmp	r3, #0
   166f4:	bne	16734 <__assert_fail@plt+0x4d64>
   166f8:	ldr	lr, [r4]
   166fc:	cmp	lr, r2
   16700:	bhi	16734 <__assert_fail@plt+0x4d64>
   16704:	cmp	ip, #43	; 0x2b
   16708:	strne	r3, [r4]
   1670c:	addeq	r0, r0, #1
   16710:	ldr	r3, [sp, #8]
   16714:	addeq	r1, r1, lr, lsl #2
   16718:	subeq	r2, r2, lr
   1671c:	bl	165dc <__assert_fail@plt+0x4c0c>
   16720:	cmp	r0, #0
   16724:	ldrgt	r3, [r4]
   16728:	addgt	r3, r3, r0
   1672c:	strgt	r3, [r4]
   16730:	pop	{r4, pc}
   16734:	mvn	r0, #0
   16738:	pop	{r4, pc}
   1673c:	mvn	r0, #0
   16740:	bx	lr
   16744:	cmp	r2, #0
   16748:	clz	r3, r1
   1674c:	lsr	r3, r3, #5
   16750:	moveq	r3, #1
   16754:	cmp	r0, #0
   16758:	moveq	r3, #1
   1675c:	cmp	r3, #0
   16760:	bne	1682c <__assert_fail@plt+0x4e5c>
   16764:	push	{r4, r5, r6, r7, r8, lr}
   16768:	mov	r6, r2
   1676c:	mov	r2, r3
   16770:	ldrsb	r3, [r0]
   16774:	mov	r8, r1
   16778:	mov	r4, r0
   1677c:	mov	r7, #1
   16780:	cmp	r3, #0
   16784:	beq	167f4 <__assert_fail@plt+0x4e24>
   16788:	cmp	r2, #0
   1678c:	moveq	r2, r4
   16790:	cmp	r3, #44	; 0x2c
   16794:	mov	r5, r4
   16798:	ldrsb	r3, [r4, #1]!
   1679c:	beq	167fc <__assert_fail@plt+0x4e2c>
   167a0:	cmp	r3, #0
   167a4:	bne	1681c <__assert_fail@plt+0x4e4c>
   167a8:	mov	r5, r4
   167ac:	cmp	r2, r5
   167b0:	sub	r1, r5, r2
   167b4:	mov	r0, r2
   167b8:	bcs	16814 <__assert_fail@plt+0x4e44>
   167bc:	blx	r6
   167c0:	mov	r2, r4
   167c4:	cmp	r0, #0
   167c8:	and	r1, r0, #7
   167cc:	poplt	{r4, r5, r6, r7, r8, pc}
   167d0:	ldrb	r3, [r8, r0, asr #3]
   167d4:	orr	r3, r3, r7, lsl r1
   167d8:	strb	r3, [r8, r0, asr #3]
   167dc:	ldrsb	r3, [r5]
   167e0:	cmp	r3, #0
   167e4:	beq	167f4 <__assert_fail@plt+0x4e24>
   167e8:	ldrsb	r3, [r4]
   167ec:	cmp	r3, #0
   167f0:	bne	16790 <__assert_fail@plt+0x4dc0>
   167f4:	mov	r0, #0
   167f8:	pop	{r4, r5, r6, r7, r8, pc}
   167fc:	cmp	r3, #0
   16800:	moveq	r5, r4
   16804:	cmp	r2, r5
   16808:	sub	r1, r5, r2
   1680c:	mov	r0, r2
   16810:	bcc	167bc <__assert_fail@plt+0x4dec>
   16814:	mvn	r0, #0
   16818:	pop	{r4, r5, r6, r7, r8, pc}
   1681c:	adds	r4, r5, #1
   16820:	bne	16780 <__assert_fail@plt+0x4db0>
   16824:	mov	r0, #0
   16828:	pop	{r4, r5, r6, r7, r8, pc}
   1682c:	mvn	r0, #21
   16830:	bx	lr
   16834:	cmp	r2, #0
   16838:	clz	r3, r1
   1683c:	lsr	r3, r3, #5
   16840:	moveq	r3, #1
   16844:	cmp	r0, #0
   16848:	moveq	r3, #1
   1684c:	cmp	r3, #0
   16850:	bne	16914 <__assert_fail@plt+0x4f44>
   16854:	push	{r4, r5, r6, r7, r8, lr}
   16858:	mov	r6, r2
   1685c:	mov	r2, r3
   16860:	ldrsb	r3, [r0]
   16864:	mov	r7, r1
   16868:	mov	r4, r0
   1686c:	cmp	r3, #0
   16870:	beq	168dc <__assert_fail@plt+0x4f0c>
   16874:	cmp	r2, #0
   16878:	moveq	r2, r4
   1687c:	cmp	r3, #44	; 0x2c
   16880:	mov	r5, r4
   16884:	ldrsb	r3, [r4, #1]!
   16888:	beq	168e4 <__assert_fail@plt+0x4f14>
   1688c:	cmp	r3, #0
   16890:	bne	16904 <__assert_fail@plt+0x4f34>
   16894:	mov	r5, r4
   16898:	cmp	r2, r5
   1689c:	sub	r1, r5, r2
   168a0:	mov	r0, r2
   168a4:	bcs	168fc <__assert_fail@plt+0x4f2c>
   168a8:	blx	r6
   168ac:	mov	r2, r4
   168b0:	cmp	r0, #0
   168b4:	poplt	{r4, r5, r6, r7, r8, pc}
   168b8:	ldr	r3, [r7]
   168bc:	orr	r3, r3, r0
   168c0:	str	r3, [r7]
   168c4:	ldrsb	r3, [r5]
   168c8:	cmp	r3, #0
   168cc:	beq	168dc <__assert_fail@plt+0x4f0c>
   168d0:	ldrsb	r3, [r4]
   168d4:	cmp	r3, #0
   168d8:	bne	1687c <__assert_fail@plt+0x4eac>
   168dc:	mov	r0, #0
   168e0:	pop	{r4, r5, r6, r7, r8, pc}
   168e4:	cmp	r3, #0
   168e8:	moveq	r5, r4
   168ec:	cmp	r2, r5
   168f0:	sub	r1, r5, r2
   168f4:	mov	r0, r2
   168f8:	bcc	168a8 <__assert_fail@plt+0x4ed8>
   168fc:	mvn	r0, #0
   16900:	pop	{r4, r5, r6, r7, r8, pc}
   16904:	adds	r4, r5, #1
   16908:	bne	1686c <__assert_fail@plt+0x4e9c>
   1690c:	mov	r0, #0
   16910:	pop	{r4, r5, r6, r7, r8, pc}
   16914:	mvn	r0, #21
   16918:	bx	lr
   1691c:	ldr	ip, [pc, #396]	; 16ab0 <__assert_fail@plt+0x50e0>
   16920:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16924:	add	ip, pc, ip
   16928:	ldr	lr, [pc, #388]	; 16ab4 <__assert_fail@plt+0x50e4>
   1692c:	sub	sp, sp, #8
   16930:	mov	r9, r3
   16934:	ldr	r5, [ip, lr]
   16938:	mov	sl, #0
   1693c:	subs	r4, r0, #0
   16940:	ldr	r3, [r5]
   16944:	mov	r7, r1
   16948:	str	sl, [sp]
   1694c:	mov	r1, ip
   16950:	str	r3, [sp, #4]
   16954:	beq	169c8 <__assert_fail@plt+0x4ff8>
   16958:	str	r9, [r7]
   1695c:	str	r9, [r2]
   16960:	mov	r6, r2
   16964:	bl	117d8 <__errno_location@plt>
   16968:	str	sl, [r0]
   1696c:	ldrsb	r3, [r4]
   16970:	mov	r8, r0
   16974:	cmp	r3, #58	; 0x3a
   16978:	beq	169e4 <__assert_fail@plt+0x5014>
   1697c:	mov	sl, sp
   16980:	mov	r1, sl
   16984:	mov	r2, #10
   16988:	mov	r0, r4
   1698c:	bl	1155c <strtol@plt>
   16990:	str	r0, [r7]
   16994:	str	r0, [r6]
   16998:	ldr	r0, [r8]
   1699c:	cmp	r0, #0
   169a0:	bne	16a34 <__assert_fail@plt+0x5064>
   169a4:	ldr	r2, [sp]
   169a8:	cmp	r2, #0
   169ac:	cmpne	r2, r4
   169b0:	beq	16a34 <__assert_fail@plt+0x5064>
   169b4:	ldrsb	r3, [r2]
   169b8:	cmp	r3, #58	; 0x3a
   169bc:	beq	16a3c <__assert_fail@plt+0x506c>
   169c0:	cmp	r3, #45	; 0x2d
   169c4:	beq	16a4c <__assert_fail@plt+0x507c>
   169c8:	mov	r0, #0
   169cc:	ldr	r2, [sp, #4]
   169d0:	ldr	r3, [r5]
   169d4:	cmp	r2, r3
   169d8:	bne	16aac <__assert_fail@plt+0x50dc>
   169dc:	add	sp, sp, #8
   169e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169e4:	add	r4, r4, #1
   169e8:	mov	r0, r4
   169ec:	mov	r2, #10
   169f0:	mov	r1, sp
   169f4:	bl	1155c <strtol@plt>
   169f8:	str	r0, [r6]
   169fc:	ldr	r3, [r8]
   16a00:	cmp	r3, #0
   16a04:	bne	16a34 <__assert_fail@plt+0x5064>
   16a08:	ldr	r3, [sp]
   16a0c:	cmp	r3, #0
   16a10:	beq	16a34 <__assert_fail@plt+0x5064>
   16a14:	ldrsb	r2, [r3]
   16a18:	sub	r3, r3, r4
   16a1c:	clz	r3, r3
   16a20:	cmp	r2, #0
   16a24:	lsr	r3, r3, #5
   16a28:	movne	r3, #1
   16a2c:	cmp	r3, #0
   16a30:	beq	169c8 <__assert_fail@plt+0x4ff8>
   16a34:	mvn	r0, #0
   16a38:	b	169cc <__assert_fail@plt+0x4ffc>
   16a3c:	ldrsb	r3, [r2, #1]
   16a40:	cmp	r3, #0
   16a44:	streq	r9, [r6]
   16a48:	beq	169cc <__assert_fail@plt+0x4ffc>
   16a4c:	mov	r3, #0
   16a50:	add	r4, r2, #1
   16a54:	str	r3, [r8]
   16a58:	mov	r1, sl
   16a5c:	mov	r0, r4
   16a60:	mov	r2, #10
   16a64:	str	r3, [sp]
   16a68:	bl	1155c <strtol@plt>
   16a6c:	str	r0, [r6]
   16a70:	ldr	r3, [r8]
   16a74:	cmp	r3, #0
   16a78:	bne	16a34 <__assert_fail@plt+0x5064>
   16a7c:	ldr	r2, [sp]
   16a80:	cmp	r2, #0
   16a84:	beq	16a34 <__assert_fail@plt+0x5064>
   16a88:	ldrsb	r3, [r2]
   16a8c:	sub	r2, r2, r4
   16a90:	clz	r2, r2
   16a94:	cmp	r3, #0
   16a98:	lsr	r2, r2, #5
   16a9c:	movne	r2, #1
   16aa0:	cmp	r2, #0
   16aa4:	beq	169c8 <__assert_fail@plt+0x4ff8>
   16aa8:	b	16a34 <__assert_fail@plt+0x5064>
   16aac:	bl	11640 <__stack_chk_fail@plt>
   16ab0:	andeq	r5, r1, r8, lsr #10
   16ab4:	andeq	r0, r0, r0, lsr #3
   16ab8:	ldr	r3, [pc, #244]	; 16bb4 <__assert_fail@plt+0x51e4>
   16abc:	ldr	r2, [pc, #244]	; 16bb8 <__assert_fail@plt+0x51e8>
   16ac0:	add	r3, pc, r3
   16ac4:	push	{r4, r5, r6, r7, r8, r9, lr}
   16ac8:	sub	sp, sp, #20
   16acc:	ldr	r9, [r3, r2]
   16ad0:	cmp	r0, #0
   16ad4:	cmpne	r1, #0
   16ad8:	ldr	r3, [r9]
   16adc:	str	r3, [sp, #12]
   16ae0:	beq	16ba8 <__assert_fail@plt+0x51d8>
   16ae4:	mov	r4, r1
   16ae8:	add	r8, sp, #4
   16aec:	add	r7, sp, #8
   16af0:	b	16b30 <__assert_fail@plt+0x5160>
   16af4:	cmp	r4, r3
   16af8:	bne	16ba8 <__assert_fail@plt+0x51d8>
   16afc:	mov	r2, r4
   16b00:	mov	r1, r6
   16b04:	mov	r0, r5
   16b08:	bl	1197c <strncmp@plt>
   16b0c:	cmp	r0, #0
   16b10:	bne	16ba8 <__assert_fail@plt+0x51d8>
   16b14:	adds	r0, r5, r4
   16b18:	moveq	r3, #0
   16b1c:	movne	r3, #1
   16b20:	adds	r4, r6, r4
   16b24:	moveq	r3, #0
   16b28:	cmp	r3, #0
   16b2c:	beq	16ba8 <__assert_fail@plt+0x51d8>
   16b30:	mov	r1, r8
   16b34:	bl	14f38 <__assert_fail@plt+0x3568>
   16b38:	mov	r1, r7
   16b3c:	mov	r5, r0
   16b40:	mov	r0, r4
   16b44:	bl	14f38 <__assert_fail@plt+0x3568>
   16b48:	ldr	r4, [sp, #4]
   16b4c:	ldr	r3, [sp, #8]
   16b50:	mov	r6, r0
   16b54:	adds	r0, r4, r3
   16b58:	beq	16b8c <__assert_fail@plt+0x51bc>
   16b5c:	cmp	r0, #1
   16b60:	bne	16af4 <__assert_fail@plt+0x5124>
   16b64:	cmp	r5, #0
   16b68:	beq	16b78 <__assert_fail@plt+0x51a8>
   16b6c:	ldrsb	r2, [r5]
   16b70:	cmp	r2, #47	; 0x2f
   16b74:	beq	16b90 <__assert_fail@plt+0x51c0>
   16b78:	cmp	r6, #0
   16b7c:	beq	16af4 <__assert_fail@plt+0x5124>
   16b80:	ldrsb	r2, [r6]
   16b84:	cmp	r2, #47	; 0x2f
   16b88:	bne	16af4 <__assert_fail@plt+0x5124>
   16b8c:	mov	r0, #1
   16b90:	ldr	r2, [sp, #12]
   16b94:	ldr	r3, [r9]
   16b98:	cmp	r2, r3
   16b9c:	bne	16bb0 <__assert_fail@plt+0x51e0>
   16ba0:	add	sp, sp, #20
   16ba4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ba8:	mov	r0, #0
   16bac:	b	16b90 <__assert_fail@plt+0x51c0>
   16bb0:	bl	11640 <__stack_chk_fail@plt>
   16bb4:	andeq	r5, r1, ip, lsl #7
   16bb8:	andeq	r0, r0, r0, lsr #3
   16bbc:	orrs	r3, r0, r1
   16bc0:	beq	16c3c <__assert_fail@plt+0x526c>
   16bc4:	cmp	r0, #0
   16bc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16bcc:	mov	r4, r1
   16bd0:	mov	r5, r0
   16bd4:	beq	16c48 <__assert_fail@plt+0x5278>
   16bd8:	cmp	r1, #0
   16bdc:	beq	16c58 <__assert_fail@plt+0x5288>
   16be0:	mov	r6, r2
   16be4:	bl	1179c <strlen@plt>
   16be8:	mvn	r3, r0
   16bec:	cmp	r6, r3
   16bf0:	mov	r7, r0
   16bf4:	movhi	r8, #0
   16bf8:	bhi	16c34 <__assert_fail@plt+0x5264>
   16bfc:	add	r9, r6, r0
   16c00:	add	r0, r9, #1
   16c04:	bl	116f4 <malloc@plt>
   16c08:	subs	r8, r0, #0
   16c0c:	beq	16c34 <__assert_fail@plt+0x5264>
   16c10:	mov	r1, r5
   16c14:	mov	r2, r7
   16c18:	bl	11604 <memcpy@plt>
   16c1c:	mov	r2, r6
   16c20:	mov	r1, r4
   16c24:	add	r0, r8, r7
   16c28:	bl	11604 <memcpy@plt>
   16c2c:	mov	r3, #0
   16c30:	strb	r3, [r8, r9]
   16c34:	mov	r0, r8
   16c38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c3c:	ldr	r0, [pc, #28]	; 16c60 <__assert_fail@plt+0x5290>
   16c40:	add	r0, pc, r0
   16c44:	b	11634 <strdup@plt>
   16c48:	mov	r0, r4
   16c4c:	mov	r1, r2
   16c50:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c54:	b	115d4 <strndup@plt>
   16c58:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c5c:	b	11634 <strdup@plt>
   16c60:	ldrdeq	r4, [r0], -r0
   16c64:	push	{r4, r5, r6, lr}
   16c68:	subs	r4, r1, #0
   16c6c:	mov	r5, r0
   16c70:	moveq	r2, r4
   16c74:	beq	16c84 <__assert_fail@plt+0x52b4>
   16c78:	mov	r0, r4
   16c7c:	bl	1179c <strlen@plt>
   16c80:	mov	r2, r0
   16c84:	mov	r1, r4
   16c88:	mov	r0, r5
   16c8c:	pop	{r4, r5, r6, lr}
   16c90:	b	16bbc <__assert_fail@plt+0x51ec>
   16c94:	push	{r1, r2, r3}
   16c98:	ldr	r1, [pc, #132]	; 16d24 <__assert_fail@plt+0x5354>
   16c9c:	ldr	r3, [pc, #132]	; 16d28 <__assert_fail@plt+0x5358>
   16ca0:	add	r1, pc, r1
   16ca4:	push	{r4, r5, lr}
   16ca8:	mov	r5, r0
   16cac:	ldr	r4, [r1, r3]
   16cb0:	sub	sp, sp, #16
   16cb4:	add	ip, sp, #32
   16cb8:	ldr	r0, [r4]
   16cbc:	ldr	r2, [sp, #28]
   16cc0:	str	r0, [sp, #12]
   16cc4:	mov	r3, ip
   16cc8:	add	r0, sp, #8
   16ccc:	mov	r1, #1
   16cd0:	str	ip, [sp, #4]
   16cd4:	bl	117fc <__vasprintf_chk@plt>
   16cd8:	subs	r2, r0, #0
   16cdc:	movlt	r5, #0
   16ce0:	blt	16cfc <__assert_fail@plt+0x532c>
   16ce4:	mov	r0, r5
   16ce8:	ldr	r1, [sp, #8]
   16cec:	bl	16bbc <__assert_fail@plt+0x51ec>
   16cf0:	mov	r5, r0
   16cf4:	ldr	r0, [sp, #8]
   16cf8:	bl	11598 <free@plt>
   16cfc:	ldr	r2, [sp, #12]
   16d00:	ldr	r3, [r4]
   16d04:	mov	r0, r5
   16d08:	cmp	r2, r3
   16d0c:	bne	16d20 <__assert_fail@plt+0x5350>
   16d10:	add	sp, sp, #16
   16d14:	pop	{r4, r5, lr}
   16d18:	add	sp, sp, #12
   16d1c:	bx	lr
   16d20:	bl	11640 <__stack_chk_fail@plt>
   16d24:	andeq	r5, r1, ip, lsr #3
   16d28:	andeq	r0, r0, r0, lsr #3
   16d2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d30:	mov	r6, r0
   16d34:	ldr	r0, [pc, #348]	; 16e98 <__assert_fail@plt+0x54c8>
   16d38:	ldr	ip, [pc, #348]	; 16e9c <__assert_fail@plt+0x54cc>
   16d3c:	add	r0, pc, r0
   16d40:	ldr	r5, [r6]
   16d44:	ldr	r8, [r0, ip]
   16d48:	sub	sp, sp, #8
   16d4c:	ldrsb	r4, [r5]
   16d50:	mov	r9, r2
   16d54:	ldr	r2, [r8]
   16d58:	cmp	r4, #0
   16d5c:	mov	r7, r1
   16d60:	str	r2, [sp, #4]
   16d64:	mov	r1, r0
   16d68:	beq	16e18 <__assert_fail@plt+0x5448>
   16d6c:	mov	r0, r5
   16d70:	mov	r1, r9
   16d74:	mov	sl, r3
   16d78:	bl	119c4 <strspn@plt>
   16d7c:	add	r4, r5, r0
   16d80:	ldrsb	r5, [r5, r0]
   16d84:	cmp	r5, #0
   16d88:	beq	16e80 <__assert_fail@plt+0x54b0>
   16d8c:	cmp	sl, #0
   16d90:	beq	16e34 <__assert_fail@plt+0x5464>
   16d94:	ldr	r0, [pc, #260]	; 16ea0 <__assert_fail@plt+0x54d0>
   16d98:	mov	r1, r5
   16d9c:	add	r0, pc, r0
   16da0:	bl	117a8 <strchr@plt>
   16da4:	cmp	r0, #0
   16da8:	beq	16e50 <__assert_fail@plt+0x5480>
   16dac:	add	sl, r4, #1
   16db0:	mov	r3, #0
   16db4:	mov	r0, sl
   16db8:	mov	r1, sp
   16dbc:	strb	r5, [sp]
   16dc0:	strb	r3, [sp, #1]
   16dc4:	bl	14fd8 <__assert_fail@plt+0x3608>
   16dc8:	add	r3, r4, r0
   16dcc:	str	r0, [r7]
   16dd0:	ldrsb	r3, [r3, #1]
   16dd4:	subs	r5, r5, r3
   16dd8:	movne	r5, #1
   16ddc:	cmp	r3, #0
   16de0:	moveq	r5, #1
   16de4:	cmp	r5, #0
   16de8:	bne	16e80 <__assert_fail@plt+0x54b0>
   16dec:	add	r0, r0, #2
   16df0:	add	r5, r4, r0
   16df4:	ldrsb	r1, [r4, r0]
   16df8:	cmp	r1, #0
   16dfc:	beq	16e10 <__assert_fail@plt+0x5440>
   16e00:	mov	r0, r9
   16e04:	bl	117a8 <strchr@plt>
   16e08:	cmp	r0, #0
   16e0c:	beq	16e80 <__assert_fail@plt+0x54b0>
   16e10:	mov	r4, sl
   16e14:	str	r5, [r6]
   16e18:	ldr	r2, [sp, #4]
   16e1c:	ldr	r3, [r8]
   16e20:	mov	r0, r4
   16e24:	cmp	r2, r3
   16e28:	bne	16e94 <__assert_fail@plt+0x54c4>
   16e2c:	add	sp, sp, #8
   16e30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e34:	mov	r1, r9
   16e38:	mov	r0, r4
   16e3c:	bl	11574 <strcspn@plt>
   16e40:	add	r3, r4, r0
   16e44:	str	r0, [r7]
   16e48:	str	r3, [r6]
   16e4c:	b	16e18 <__assert_fail@plt+0x5448>
   16e50:	mov	r1, r9
   16e54:	mov	r0, r4
   16e58:	bl	14fd8 <__assert_fail@plt+0x3608>
   16e5c:	str	r0, [r7]
   16e60:	ldrsb	r1, [r4, r0]
   16e64:	add	r5, r4, r0
   16e68:	cmp	r1, #0
   16e6c:	beq	16e8c <__assert_fail@plt+0x54bc>
   16e70:	mov	r0, r9
   16e74:	bl	117a8 <strchr@plt>
   16e78:	cmp	r0, #0
   16e7c:	bne	16e8c <__assert_fail@plt+0x54bc>
   16e80:	str	r4, [r6]
   16e84:	mov	r4, #0
   16e88:	b	16e18 <__assert_fail@plt+0x5448>
   16e8c:	str	r5, [r6]
   16e90:	b	16e18 <__assert_fail@plt+0x5448>
   16e94:	bl	11640 <__stack_chk_fail@plt>
   16e98:	andeq	r5, r1, r0, lsl r1
   16e9c:	andeq	r0, r0, r0, lsr #3
   16ea0:	andeq	r4, r0, r8, ror #21
   16ea4:	push	{r4, lr}
   16ea8:	mov	r4, r0
   16eac:	b	16eb8 <__assert_fail@plt+0x54e8>
   16eb0:	cmp	r0, #10
   16eb4:	beq	16ed0 <__assert_fail@plt+0x5500>
   16eb8:	mov	r0, r4
   16ebc:	bl	1185c <fgetc@plt>
   16ec0:	cmn	r0, #1
   16ec4:	bne	16eb0 <__assert_fail@plt+0x54e0>
   16ec8:	mov	r0, #1
   16ecc:	pop	{r4, pc}
   16ed0:	mov	r0, #0
   16ed4:	pop	{r4, pc}
   16ed8:	push	{r1, r2, r3}
   16edc:	subs	r3, r0, #0
   16ee0:	ldr	r1, [pc, #168]	; 16f90 <__assert_fail@plt+0x55c0>
   16ee4:	ldr	r2, [pc, #168]	; 16f94 <__assert_fail@plt+0x55c4>
   16ee8:	add	r1, pc, r1
   16eec:	push	{r4, r5, r6, lr}
   16ef0:	sub	sp, sp, #12
   16ef4:	ldr	r5, [r1, r2]
   16ef8:	ldr	r6, [sp, #28]
   16efc:	ldr	r2, [r5]
   16f00:	str	r2, [sp, #4]
   16f04:	beq	16f1c <__assert_fail@plt+0x554c>
   16f08:	ldr	r2, [pc, #136]	; 16f98 <__assert_fail@plt+0x55c8>
   16f0c:	add	r2, pc, r2
   16f10:	ldr	r2, [r2]
   16f14:	tst	r2, #16777216	; 0x1000000
   16f18:	beq	16f6c <__assert_fail@plt+0x559c>
   16f1c:	ldr	r3, [pc, #120]	; 16f9c <__assert_fail@plt+0x55cc>
   16f20:	ldr	r4, [r1, r3]
   16f24:	add	ip, sp, #32
   16f28:	mov	r2, r6
   16f2c:	mov	r3, ip
   16f30:	mov	r1, #1
   16f34:	ldr	r0, [r4]
   16f38:	str	ip, [sp]
   16f3c:	bl	11718 <__vfprintf_chk@plt>
   16f40:	ldr	r1, [r4]
   16f44:	mov	r0, #10
   16f48:	bl	11904 <fputc@plt>
   16f4c:	ldr	r2, [sp, #4]
   16f50:	ldr	r3, [r5]
   16f54:	cmp	r2, r3
   16f58:	bne	16f8c <__assert_fail@plt+0x55bc>
   16f5c:	add	sp, sp, #12
   16f60:	pop	{r4, r5, r6, lr}
   16f64:	add	sp, sp, #12
   16f68:	bx	lr
   16f6c:	ldr	r0, [pc, #40]	; 16f9c <__assert_fail@plt+0x55cc>
   16f70:	ldr	r2, [pc, #40]	; 16fa0 <__assert_fail@plt+0x55d0>
   16f74:	ldr	r4, [r1, r0]
   16f78:	add	r2, pc, r2
   16f7c:	mov	r1, #1
   16f80:	ldr	r0, [r4]
   16f84:	bl	11898 <__fprintf_chk@plt>
   16f88:	b	16f24 <__assert_fail@plt+0x5554>
   16f8c:	bl	11640 <__stack_chk_fail@plt>
   16f90:	andeq	r4, r1, r4, ror #30
   16f94:	andeq	r0, r0, r0, lsr #3
   16f98:	andeq	r5, r1, r4, lsl r1
   16f9c:	andeq	r0, r0, r4, lsr #3
   16fa0:	andeq	r4, r0, r8, lsr r9
   16fa4:	push	{r0, r1, r2, r3}
   16fa8:	ldr	r0, [pc, #104]	; 17018 <__assert_fail@plt+0x5648>
   16fac:	ldr	r2, [pc, #104]	; 1701c <__assert_fail@plt+0x564c>
   16fb0:	add	r0, pc, r0
   16fb4:	push	{r4, r5, lr}
   16fb8:	sub	sp, sp, #12
   16fbc:	ldr	r4, [r0, r2]
   16fc0:	ldr	r1, [pc, #88]	; 17020 <__assert_fail@plt+0x5650>
   16fc4:	add	r3, sp, #28
   16fc8:	ldr	ip, [r4]
   16fcc:	str	r3, [sp]
   16fd0:	str	ip, [sp, #4]
   16fd4:	ldr	r5, [r0, r1]
   16fd8:	ldr	r2, [sp, #24]
   16fdc:	mov	r1, #1
   16fe0:	ldr	r0, [r5]
   16fe4:	bl	11718 <__vfprintf_chk@plt>
   16fe8:	ldr	r1, [r5]
   16fec:	mov	r0, #10
   16ff0:	bl	11904 <fputc@plt>
   16ff4:	ldr	r2, [sp, #4]
   16ff8:	ldr	r3, [r4]
   16ffc:	cmp	r2, r3
   17000:	bne	17014 <__assert_fail@plt+0x5644>
   17004:	add	sp, sp, #12
   17008:	pop	{r4, r5, lr}
   1700c:	add	sp, sp, #16
   17010:	bx	lr
   17014:	bl	11640 <__stack_chk_fail@plt>
   17018:	muleq	r1, ip, lr
   1701c:	andeq	r0, r0, r0, lsr #3
   17020:	andeq	r0, r0, r4, lsr #3
   17024:	ldr	r1, [r0, #12]
   17028:	ldr	r2, [r0, #4]
   1702c:	cmp	r1, #0
   17030:	push	{r4, lr}
   17034:	moveq	r4, r2
   17038:	sub	sp, sp, #16
   1703c:	beq	17090 <__assert_fail@plt+0x56c0>
   17040:	cmp	r2, #0
   17044:	beq	170b8 <__assert_fail@plt+0x56e8>
   17048:	ldrsb	r3, [r2]
   1704c:	ldr	ip, [pc, #116]	; 170c8 <__assert_fail@plt+0x56f8>
   17050:	add	r4, r0, #16
   17054:	cmp	r3, #47	; 0x2f
   17058:	addeq	r2, r2, #1
   1705c:	add	ip, pc, ip
   17060:	mov	r3, #4096	; 0x1000
   17064:	stmib	sp, {r1, r2}
   17068:	mov	r0, r4
   1706c:	str	ip, [sp]
   17070:	mov	r1, r3
   17074:	mov	r2, #1
   17078:	bl	119b8 <__snprintf_chk@plt>
   1707c:	cmp	r0, #0
   17080:	movlt	r4, #0
   17084:	blt	17090 <__assert_fail@plt+0x56c0>
   17088:	cmp	r0, #4096	; 0x1000
   1708c:	bge	1709c <__assert_fail@plt+0x56cc>
   17090:	mov	r0, r4
   17094:	add	sp, sp, #16
   17098:	pop	{r4, pc}
   1709c:	bl	117d8 <__errno_location@plt>
   170a0:	mov	r4, #0
   170a4:	mov	r3, #36	; 0x24
   170a8:	str	r3, [r0]
   170ac:	mov	r0, r4
   170b0:	add	sp, sp, #16
   170b4:	pop	{r4, pc}
   170b8:	mov	r4, r1
   170bc:	mov	r0, r4
   170c0:	add	sp, sp, #16
   170c4:	pop	{r4, pc}
   170c8:	andeq	r4, r0, ip, asr r8
   170cc:	push	{r4, lr}
   170d0:	sub	sp, sp, #8
   170d4:	add	r4, r0, #16
   170d8:	mov	r3, #4096	; 0x1000
   170dc:	stm	sp, {r1, r2}
   170e0:	mov	r0, r4
   170e4:	mov	r1, r3
   170e8:	mov	r2, #1
   170ec:	bl	115f8 <__vsnprintf_chk@plt>
   170f0:	cmp	r0, #0
   170f4:	movlt	r4, #0
   170f8:	blt	17104 <__assert_fail@plt+0x5734>
   170fc:	cmp	r0, #4096	; 0x1000
   17100:	bge	17110 <__assert_fail@plt+0x5740>
   17104:	mov	r0, r4
   17108:	add	sp, sp, #8
   1710c:	pop	{r4, pc}
   17110:	bl	117d8 <__errno_location@plt>
   17114:	mov	r4, #0
   17118:	mov	r3, #36	; 0x24
   1711c:	str	r3, [r0]
   17120:	mov	r0, r4
   17124:	add	sp, sp, #8
   17128:	pop	{r4, pc}
   1712c:	push	{r4, r5, r6, r7, lr}
   17130:	sub	sp, sp, #20
   17134:	ldr	r4, [pc, #312]	; 17274 <__assert_fail@plt+0x58a4>
   17138:	ldr	r3, [pc, #312]	; 17278 <__assert_fail@plt+0x58a8>
   1713c:	add	r4, pc, r4
   17140:	ldr	r7, [pc, #308]	; 1727c <__assert_fail@plt+0x58ac>
   17144:	ldr	r5, [r4, r3]
   17148:	add	r7, pc, r7
   1714c:	ldr	r6, [r7]
   17150:	ldr	r3, [r5]
   17154:	cmp	r6, #0
   17158:	str	r3, [sp, #12]
   1715c:	beq	17178 <__assert_fail@plt+0x57a8>
   17160:	ldr	r2, [sp, #12]
   17164:	ldr	r3, [r5]
   17168:	cmp	r2, r3
   1716c:	bne	17270 <__assert_fail@plt+0x58a0>
   17170:	add	sp, sp, #20
   17174:	pop	{r4, r5, r6, r7, pc}
   17178:	ldr	r0, [pc, #256]	; 17280 <__assert_fail@plt+0x58b0>
   1717c:	add	r0, pc, r0
   17180:	bl	116e8 <getenv@plt>
   17184:	cmp	r0, #0
   17188:	beq	171d0 <__assert_fail@plt+0x5800>
   1718c:	mov	r2, r6
   17190:	add	r1, sp, #8
   17194:	bl	11790 <strtoul@plt>
   17198:	mov	r6, r0
   1719c:	ldr	r0, [sp, #8]
   171a0:	cmp	r0, #0
   171a4:	beq	171bc <__assert_fail@plt+0x57ec>
   171a8:	ldr	r1, [pc, #212]	; 17284 <__assert_fail@plt+0x58b4>
   171ac:	add	r1, pc, r1
   171b0:	bl	11544 <strcmp@plt>
   171b4:	cmp	r0, #0
   171b8:	beq	171e4 <__assert_fail@plt+0x5814>
   171bc:	ldr	r3, [pc, #196]	; 17288 <__assert_fail@plt+0x58b8>
   171c0:	cmp	r6, #0
   171c4:	add	r3, pc, r3
   171c8:	str	r6, [r3]
   171cc:	bne	171f0 <__assert_fail@plt+0x5820>
   171d0:	mov	r3, #2
   171d4:	ldr	r2, [pc, #176]	; 1728c <__assert_fail@plt+0x58bc>
   171d8:	add	r2, pc, r2
   171dc:	str	r3, [r2]
   171e0:	b	17160 <__assert_fail@plt+0x5790>
   171e4:	ldr	r3, [pc, #164]	; 17290 <__assert_fail@plt+0x58c0>
   171e8:	mov	r6, r3
   171ec:	str	r3, [r7]
   171f0:	bl	1158c <getuid@plt>
   171f4:	mov	r7, r0
   171f8:	bl	1167c <geteuid@plt>
   171fc:	cmp	r7, r0
   17200:	beq	17254 <__assert_fail@plt+0x5884>
   17204:	ldr	r7, [pc, #136]	; 17294 <__assert_fail@plt+0x58c4>
   17208:	ldr	r2, [pc, #136]	; 17298 <__assert_fail@plt+0x58c8>
   1720c:	add	r7, pc, r7
   17210:	orr	r3, r6, #16777216	; 0x1000000
   17214:	str	r3, [r7]
   17218:	ldr	r3, [r4, r2]
   1721c:	ldr	r4, [r3]
   17220:	bl	11760 <getpid@plt>
   17224:	ldr	r3, [pc, #112]	; 1729c <__assert_fail@plt+0x58cc>
   17228:	ldr	r2, [pc, #112]	; 172a0 <__assert_fail@plt+0x58d0>
   1722c:	add	r3, pc, r3
   17230:	str	r3, [sp]
   17234:	add	r2, pc, r2
   17238:	mov	r1, #1
   1723c:	mov	r3, r0
   17240:	mov	r0, r4
   17244:	bl	11898 <__fprintf_chk@plt>
   17248:	ldr	r3, [r7]
   1724c:	orr	r3, r3, #2
   17250:	b	171d4 <__assert_fail@plt+0x5804>
   17254:	bl	11814 <getgid@plt>
   17258:	mov	r7, r0
   1725c:	bl	116a0 <getegid@plt>
   17260:	cmp	r7, r0
   17264:	orreq	r3, r6, #2
   17268:	bne	17204 <__assert_fail@plt+0x5834>
   1726c:	b	171d4 <__assert_fail@plt+0x5804>
   17270:	bl	11640 <__stack_chk_fail@plt>
   17274:	andeq	r4, r1, r0, lsl sp
   17278:	andeq	r0, r0, r0, lsr #3
   1727c:	ldrdeq	r4, [r1], -r8
   17280:	andeq	r4, r0, r4, asr #14
   17284:	andeq	r4, r0, r4, lsr #10
   17288:	andeq	r4, r1, ip, asr lr
   1728c:	andeq	r4, r1, r8, asr #28
   17290:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   17294:	andeq	r4, r1, r4, lsl lr
   17298:	andeq	r0, r0, r4, lsr #3
   1729c:	andeq	r4, r0, r0, ror #13
   172a0:	muleq	r0, ip, r6
   172a4:	cmp	r0, #0
   172a8:	ldrne	r3, [r0, #8]
   172ac:	addne	r3, r3, #1
   172b0:	strne	r3, [r0, #8]
   172b4:	bx	lr
   172b8:	ldr	r2, [pc, #228]	; 173a4 <__assert_fail@plt+0x59d4>
   172bc:	push	{r4, r5, lr}
   172c0:	subs	r4, r0, #0
   172c4:	sub	sp, sp, #12
   172c8:	add	r2, pc, r2
   172cc:	beq	172e4 <__assert_fail@plt+0x5914>
   172d0:	ldr	r3, [r4, #8]
   172d4:	sub	r3, r3, #1
   172d8:	cmp	r3, #0
   172dc:	str	r3, [r4, #8]
   172e0:	ble	172ec <__assert_fail@plt+0x591c>
   172e4:	add	sp, sp, #12
   172e8:	pop	{r4, r5, pc}
   172ec:	ldr	r3, [pc, #180]	; 173a8 <__assert_fail@plt+0x59d8>
   172f0:	add	r3, pc, r3
   172f4:	ldr	r3, [r3]
   172f8:	tst	r3, #4
   172fc:	bne	17350 <__assert_fail@plt+0x5980>
   17300:	add	r3, r4, #4096	; 0x1000
   17304:	ldr	r2, [r3, #16]
   17308:	cmp	r2, #0
   1730c:	beq	1731c <__assert_fail@plt+0x594c>
   17310:	ldr	r3, [r3, #20]
   17314:	mov	r0, r4
   17318:	blx	r3
   1731c:	ldr	r0, [r4]
   17320:	cmp	r0, #0
   17324:	bge	17348 <__assert_fail@plt+0x5978>
   17328:	ldr	r0, [r4, #4]
   1732c:	bl	11598 <free@plt>
   17330:	ldr	r0, [r4, #12]
   17334:	bl	11598 <free@plt>
   17338:	mov	r0, r4
   1733c:	add	sp, sp, #12
   17340:	pop	{r4, r5, lr}
   17344:	b	11598 <free@plt>
   17348:	bl	11994 <close@plt>
   1734c:	b	17328 <__assert_fail@plt+0x5958>
   17350:	ldr	r3, [pc, #84]	; 173ac <__assert_fail@plt+0x59dc>
   17354:	ldr	r3, [r2, r3]
   17358:	ldr	r5, [r3]
   1735c:	bl	11760 <getpid@plt>
   17360:	ldr	r2, [pc, #72]	; 173b0 <__assert_fail@plt+0x59e0>
   17364:	ldr	r3, [pc, #72]	; 173b4 <__assert_fail@plt+0x59e4>
   17368:	add	r2, pc, r2
   1736c:	str	r2, [sp, #4]
   17370:	ldr	r2, [pc, #64]	; 173b8 <__assert_fail@plt+0x59e8>
   17374:	add	r3, pc, r3
   17378:	str	r3, [sp]
   1737c:	add	r2, pc, r2
   17380:	mov	r1, #1
   17384:	mov	r3, r0
   17388:	mov	r0, r5
   1738c:	bl	11898 <__fprintf_chk@plt>
   17390:	ldr	r1, [pc, #36]	; 173bc <__assert_fail@plt+0x59ec>
   17394:	mov	r0, r4
   17398:	add	r1, pc, r1
   1739c:	bl	16ed8 <__assert_fail@plt+0x5508>
   173a0:	b	17300 <__assert_fail@plt+0x5930>
   173a4:	andeq	r4, r1, r4, lsl #23
   173a8:	andeq	r4, r1, r0, lsr sp
   173ac:	andeq	r0, r0, r4, lsr #3
   173b0:			; <UNDEFINED> instruction: 0x000045bc
   173b4:	muleq	r0, r8, r5
   173b8:	muleq	r0, r8, r5
   173bc:	muleq	r0, r0, r5
   173c0:	push	{r0, r1, r2, r3}
   173c4:	mov	r0, #1
   173c8:	push	{r4, r5, r6, r7, lr}
   173cc:	sub	sp, sp, #20
   173d0:	ldr	r5, [pc, #264]	; 174e0 <__assert_fail@plt+0x5b10>
   173d4:	ldr	r3, [pc, #264]	; 174e4 <__assert_fail@plt+0x5b14>
   173d8:	add	r5, pc, r5
   173dc:	ldr	r1, [pc, #260]	; 174e8 <__assert_fail@plt+0x5b18>
   173e0:	ldr	r6, [r5, r3]
   173e4:	ldr	r7, [sp, #40]	; 0x28
   173e8:	ldr	r3, [r6]
   173ec:	str	r3, [sp, #12]
   173f0:	bl	1152c <calloc@plt>
   173f4:	subs	r4, r0, #0
   173f8:	beq	17454 <__assert_fail@plt+0x5a84>
   173fc:	ldr	r3, [pc, #232]	; 174ec <__assert_fail@plt+0x5b1c>
   17400:	add	r3, pc, r3
   17404:	ldr	r3, [r3]
   17408:	tst	r3, #4
   1740c:	bne	17478 <__assert_fail@plt+0x5aa8>
   17410:	mov	r1, #1
   17414:	mvn	r3, #0
   17418:	cmp	r7, #0
   1741c:	str	r1, [r4, #8]
   17420:	str	r3, [r4]
   17424:	beq	17454 <__assert_fail@plt+0x5a84>
   17428:	add	ip, sp, #44	; 0x2c
   1742c:	mov	r2, r7
   17430:	mov	r3, ip
   17434:	add	r0, r4, #4
   17438:	str	ip, [sp, #8]
   1743c:	bl	117fc <__vasprintf_chk@plt>
   17440:	cmp	r0, #0
   17444:	blt	174cc <__assert_fail@plt+0x5afc>
   17448:	ldr	r3, [r4, #4]
   1744c:	cmp	r3, #0
   17450:	beq	174cc <__assert_fail@plt+0x5afc>
   17454:	ldr	r2, [sp, #12]
   17458:	ldr	r3, [r6]
   1745c:	mov	r0, r4
   17460:	cmp	r2, r3
   17464:	bne	174dc <__assert_fail@plt+0x5b0c>
   17468:	add	sp, sp, #20
   1746c:	pop	{r4, r5, r6, r7, lr}
   17470:	add	sp, sp, #16
   17474:	bx	lr
   17478:	ldr	r3, [pc, #112]	; 174f0 <__assert_fail@plt+0x5b20>
   1747c:	ldr	r3, [r5, r3]
   17480:	ldr	r5, [r3]
   17484:	bl	11760 <getpid@plt>
   17488:	ldr	r2, [pc, #100]	; 174f4 <__assert_fail@plt+0x5b24>
   1748c:	ldr	r3, [pc, #100]	; 174f8 <__assert_fail@plt+0x5b28>
   17490:	add	r2, pc, r2
   17494:	str	r2, [sp, #4]
   17498:	ldr	r2, [pc, #92]	; 174fc <__assert_fail@plt+0x5b2c>
   1749c:	add	r3, pc, r3
   174a0:	str	r3, [sp]
   174a4:	add	r2, pc, r2
   174a8:	mov	r1, #1
   174ac:	mov	r3, r0
   174b0:	mov	r0, r5
   174b4:	bl	11898 <__fprintf_chk@plt>
   174b8:	ldr	r1, [pc, #64]	; 17500 <__assert_fail@plt+0x5b30>
   174bc:	mov	r0, r4
   174c0:	add	r1, pc, r1
   174c4:	bl	16ed8 <__assert_fail@plt+0x5508>
   174c8:	b	17410 <__assert_fail@plt+0x5a40>
   174cc:	mov	r0, r4
   174d0:	bl	172b8 <__assert_fail@plt+0x58e8>
   174d4:	mov	r4, #0
   174d8:	b	17454 <__assert_fail@plt+0x5a84>
   174dc:	bl	11640 <__stack_chk_fail@plt>
   174e0:	andeq	r4, r1, r4, ror sl
   174e4:	andeq	r0, r0, r0, lsr #3
   174e8:	andeq	r1, r0, ip, lsl r0
   174ec:	andeq	r4, r1, r0, lsr #24
   174f0:	andeq	r0, r0, r4, lsr #3
   174f4:	muleq	r0, r4, r4
   174f8:	andeq	r4, r0, r0, ror r4
   174fc:	andeq	r4, r0, r0, ror r4
   17500:	andeq	r4, r0, r0, ror r4
   17504:	ldr	r3, [r0]
   17508:	push	{r4, r5, r6, lr}
   1750c:	cmp	r3, #0
   17510:	ldr	r6, [pc, #220]	; 175f4 <__assert_fail@plt+0x5c24>
   17514:	sub	sp, sp, #8
   17518:	add	r6, pc, r6
   1751c:	bge	175d4 <__assert_fail@plt+0x5c04>
   17520:	cmp	r1, #0
   17524:	mov	r5, r0
   17528:	beq	175c4 <__assert_fail@plt+0x5bf4>
   1752c:	mov	r0, r1
   17530:	bl	11634 <strdup@plt>
   17534:	subs	r4, r0, #0
   17538:	beq	175cc <__assert_fail@plt+0x5bfc>
   1753c:	ldr	r0, [r5, #12]
   17540:	bl	11598 <free@plt>
   17544:	ldr	r3, [pc, #172]	; 175f8 <__assert_fail@plt+0x5c28>
   17548:	str	r4, [r5, #12]
   1754c:	add	r3, pc, r3
   17550:	ldr	r0, [r3]
   17554:	ands	r0, r0, #4
   17558:	bne	17564 <__assert_fail@plt+0x5b94>
   1755c:	add	sp, sp, #8
   17560:	pop	{r4, r5, r6, pc}
   17564:	ldr	r3, [pc, #144]	; 175fc <__assert_fail@plt+0x5c2c>
   17568:	ldr	r3, [r6, r3]
   1756c:	ldr	r6, [r3]
   17570:	bl	11760 <getpid@plt>
   17574:	ldr	r2, [pc, #132]	; 17600 <__assert_fail@plt+0x5c30>
   17578:	ldr	r3, [pc, #132]	; 17604 <__assert_fail@plt+0x5c34>
   1757c:	add	r2, pc, r2
   17580:	str	r2, [sp, #4]
   17584:	ldr	r2, [pc, #124]	; 17608 <__assert_fail@plt+0x5c38>
   17588:	add	r3, pc, r3
   1758c:	str	r3, [sp]
   17590:	add	r2, pc, r2
   17594:	mov	r1, #1
   17598:	mov	r3, r0
   1759c:	mov	r0, r6
   175a0:	bl	11898 <__fprintf_chk@plt>
   175a4:	ldr	r1, [pc, #96]	; 1760c <__assert_fail@plt+0x5c3c>
   175a8:	mov	r0, r5
   175ac:	mov	r2, r4
   175b0:	add	r1, pc, r1
   175b4:	bl	16ed8 <__assert_fail@plt+0x5508>
   175b8:	mov	r0, #0
   175bc:	add	sp, sp, #8
   175c0:	pop	{r4, r5, r6, pc}
   175c4:	mov	r4, r1
   175c8:	b	1753c <__assert_fail@plt+0x5b6c>
   175cc:	mvn	r0, #11
   175d0:	b	1755c <__assert_fail@plt+0x5b8c>
   175d4:	ldr	r3, [pc, #52]	; 17610 <__assert_fail@plt+0x5c40>
   175d8:	ldr	r1, [pc, #52]	; 17614 <__assert_fail@plt+0x5c44>
   175dc:	ldr	r0, [pc, #52]	; 17618 <__assert_fail@plt+0x5c48>
   175e0:	add	r3, pc, r3
   175e4:	mov	r2, #109	; 0x6d
   175e8:	add	r1, pc, r1
   175ec:	add	r0, pc, r0
   175f0:	bl	119d0 <__assert_fail@plt>
   175f4:	andeq	r4, r1, r4, lsr r9
   175f8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   175fc:	andeq	r0, r0, r4, lsr #3
   17600:	andeq	r4, r0, r8, lsr #7
   17604:	andeq	r4, r0, r4, lsl #7
   17608:	andeq	r4, r0, r4, lsl #7
   1760c:	andeq	r4, r0, r4, lsr #7
   17610:	andeq	r4, r0, r8, lsr #5
   17614:	andeq	r4, r0, r0, asr r3
   17618:	andeq	r4, r0, r8, asr r3
   1761c:	cmp	r0, #0
   17620:	ldrne	r0, [r0, #12]
   17624:	bx	lr
   17628:	push	{r4, r5, r6, lr}
   1762c:	subs	r5, r1, #0
   17630:	ldr	r6, [pc, #196]	; 176fc <__assert_fail@plt+0x5d2c>
   17634:	sub	sp, sp, #8
   17638:	mov	r4, r0
   1763c:	add	r6, pc, r6
   17640:	beq	17654 <__assert_fail@plt+0x5c84>
   17644:	mov	r0, r5
   17648:	bl	11634 <strdup@plt>
   1764c:	subs	r5, r0, #0
   17650:	beq	176f4 <__assert_fail@plt+0x5d24>
   17654:	ldr	r0, [r4]
   17658:	cmp	r0, #0
   1765c:	blt	1766c <__assert_fail@plt+0x5c9c>
   17660:	bl	11994 <close@plt>
   17664:	mvn	r3, #0
   17668:	str	r3, [r4]
   1766c:	ldr	r0, [r4, #4]
   17670:	bl	11598 <free@plt>
   17674:	ldr	r3, [pc, #132]	; 17700 <__assert_fail@plt+0x5d30>
   17678:	str	r5, [r4, #4]
   1767c:	add	r3, pc, r3
   17680:	ldr	r3, [r3]
   17684:	ands	r0, r3, #4
   17688:	bne	17694 <__assert_fail@plt+0x5cc4>
   1768c:	add	sp, sp, #8
   17690:	pop	{r4, r5, r6, pc}
   17694:	ldr	r3, [pc, #104]	; 17704 <__assert_fail@plt+0x5d34>
   17698:	ldr	r3, [r6, r3]
   1769c:	ldr	r6, [r3]
   176a0:	bl	11760 <getpid@plt>
   176a4:	ldr	r2, [pc, #92]	; 17708 <__assert_fail@plt+0x5d38>
   176a8:	ldr	r3, [pc, #92]	; 1770c <__assert_fail@plt+0x5d3c>
   176ac:	add	r2, pc, r2
   176b0:	str	r2, [sp, #4]
   176b4:	ldr	r2, [pc, #84]	; 17710 <__assert_fail@plt+0x5d40>
   176b8:	add	r3, pc, r3
   176bc:	str	r3, [sp]
   176c0:	add	r2, pc, r2
   176c4:	mov	r1, #1
   176c8:	mov	r3, r0
   176cc:	mov	r0, r6
   176d0:	bl	11898 <__fprintf_chk@plt>
   176d4:	ldr	r1, [pc, #56]	; 17714 <__assert_fail@plt+0x5d44>
   176d8:	mov	r0, r4
   176dc:	mov	r2, r5
   176e0:	add	r1, pc, r1
   176e4:	bl	16ed8 <__assert_fail@plt+0x5508>
   176e8:	mov	r0, #0
   176ec:	add	sp, sp, #8
   176f0:	pop	{r4, r5, r6, pc}
   176f4:	mvn	r0, #11
   176f8:	b	1768c <__assert_fail@plt+0x5cbc>
   176fc:	andeq	r4, r1, r0, lsl r8
   17700:	andeq	r4, r1, r4, lsr #19
   17704:	andeq	r0, r0, r4, lsr #3
   17708:	andeq	r4, r0, r8, ror r2
   1770c:	andeq	r4, r0, r4, asr r2
   17710:	andeq	r4, r0, r4, asr r2
   17714:	andeq	r4, r0, r8, lsl #5
   17718:	cmp	r0, #0
   1771c:	ldrne	r0, [r0, #4]
   17720:	bx	lr
   17724:	ldr	r3, [pc, #144]	; 177bc <__assert_fail@plt+0x5dec>
   17728:	add	ip, r0, #4096	; 0x1000
   1772c:	add	r3, pc, r3
   17730:	str	r1, [ip, #16]
   17734:	ldr	r3, [r3]
   17738:	str	r2, [ip, #20]
   1773c:	tst	r3, #4
   17740:	ldr	r3, [pc, #120]	; 177c0 <__assert_fail@plt+0x5df0>
   17744:	add	r3, pc, r3
   17748:	bne	17754 <__assert_fail@plt+0x5d84>
   1774c:	mov	r0, #0
   17750:	bx	lr
   17754:	ldr	r2, [pc, #104]	; 177c4 <__assert_fail@plt+0x5df4>
   17758:	push	{r4, r5, lr}
   1775c:	sub	sp, sp, #12
   17760:	ldr	r3, [r3, r2]
   17764:	mov	r4, r0
   17768:	ldr	r5, [r3]
   1776c:	bl	11760 <getpid@plt>
   17770:	ldr	r2, [pc, #80]	; 177c8 <__assert_fail@plt+0x5df8>
   17774:	ldr	r3, [pc, #80]	; 177cc <__assert_fail@plt+0x5dfc>
   17778:	add	r2, pc, r2
   1777c:	str	r2, [sp, #4]
   17780:	ldr	r2, [pc, #72]	; 177d0 <__assert_fail@plt+0x5e00>
   17784:	add	r3, pc, r3
   17788:	str	r3, [sp]
   1778c:	add	r2, pc, r2
   17790:	mov	r1, #1
   17794:	mov	r3, r0
   17798:	mov	r0, r5
   1779c:	bl	11898 <__fprintf_chk@plt>
   177a0:	ldr	r1, [pc, #44]	; 177d4 <__assert_fail@plt+0x5e04>
   177a4:	mov	r0, r4
   177a8:	add	r1, pc, r1
   177ac:	bl	16ed8 <__assert_fail@plt+0x5508>
   177b0:	mov	r0, #0
   177b4:	add	sp, sp, #12
   177b8:	pop	{r4, r5, pc}
   177bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   177c0:	andeq	r4, r1, r8, lsl #14
   177c4:	andeq	r0, r0, r4, lsr #3
   177c8:	andeq	r4, r0, ip, lsr #3
   177cc:	andeq	r4, r0, r8, lsl #3
   177d0:	andeq	r4, r0, r8, lsl #3
   177d4:	ldrdeq	r4, [r0], -r0
   177d8:	cmp	r0, #0
   177dc:	addne	r0, r0, #4096	; 0x1000
   177e0:	ldrne	r0, [r0, #16]
   177e4:	bx	lr
   177e8:	add	r3, r0, #4096	; 0x1000
   177ec:	mov	r0, #0
   177f0:	str	r1, [r3, #24]
   177f4:	bx	lr
   177f8:	push	{r4, r5, r6, lr}
   177fc:	subs	r4, r0, #0
   17800:	ldr	r5, [pc, #284]	; 17924 <__assert_fail@plt+0x5f54>
   17804:	sub	sp, sp, #8
   17808:	add	r5, pc, r5
   1780c:	beq	17900 <__assert_fail@plt+0x5f30>
   17810:	ldr	r3, [r4, #4]
   17814:	cmp	r3, #0
   17818:	beq	178dc <__assert_fail@plt+0x5f0c>
   1781c:	ldr	r3, [r4]
   17820:	cmp	r3, #0
   17824:	blt	17834 <__assert_fail@plt+0x5e64>
   17828:	mov	r0, r3
   1782c:	add	sp, sp, #8
   17830:	pop	{r4, r5, r6, pc}
   17834:	bl	17024 <__assert_fail@plt+0x5654>
   17838:	subs	r6, r0, #0
   1783c:	beq	178cc <__assert_fail@plt+0x5efc>
   17840:	ldr	r3, [pc, #224]	; 17928 <__assert_fail@plt+0x5f58>
   17844:	add	r3, pc, r3
   17848:	ldr	r3, [r3]
   1784c:	tst	r3, #4
   17850:	bne	17874 <__assert_fail@plt+0x5ea4>
   17854:	mov	r0, r6
   17858:	mov	r1, #524288	; 0x80000
   1785c:	bl	116d0 <open64@plt>
   17860:	mov	r3, r0
   17864:	str	r0, [r4]
   17868:	mov	r0, r3
   1786c:	add	sp, sp, #8
   17870:	pop	{r4, r5, r6, pc}
   17874:	ldr	r3, [pc, #176]	; 1792c <__assert_fail@plt+0x5f5c>
   17878:	ldr	r3, [r5, r3]
   1787c:	ldr	r5, [r3]
   17880:	bl	11760 <getpid@plt>
   17884:	ldr	r2, [pc, #164]	; 17930 <__assert_fail@plt+0x5f60>
   17888:	ldr	r3, [pc, #164]	; 17934 <__assert_fail@plt+0x5f64>
   1788c:	add	r2, pc, r2
   17890:	str	r2, [sp, #4]
   17894:	ldr	r2, [pc, #156]	; 17938 <__assert_fail@plt+0x5f68>
   17898:	add	r3, pc, r3
   1789c:	str	r3, [sp]
   178a0:	add	r2, pc, r2
   178a4:	mov	r1, #1
   178a8:	mov	r3, r0
   178ac:	mov	r0, r5
   178b0:	bl	11898 <__fprintf_chk@plt>
   178b4:	ldr	r1, [pc, #128]	; 1793c <__assert_fail@plt+0x5f6c>
   178b8:	mov	r2, r6
   178bc:	add	r1, pc, r1
   178c0:	mov	r0, r4
   178c4:	bl	16ed8 <__assert_fail@plt+0x5508>
   178c8:	b	17854 <__assert_fail@plt+0x5e84>
   178cc:	bl	117d8 <__errno_location@plt>
   178d0:	ldr	r3, [r0]
   178d4:	rsb	r3, r3, #0
   178d8:	b	17828 <__assert_fail@plt+0x5e58>
   178dc:	ldr	r3, [pc, #92]	; 17940 <__assert_fail@plt+0x5f70>
   178e0:	ldr	r1, [pc, #92]	; 17944 <__assert_fail@plt+0x5f74>
   178e4:	ldr	r0, [pc, #92]	; 17948 <__assert_fail@plt+0x5f78>
   178e8:	add	r3, pc, r3
   178ec:	mov	r2, #201	; 0xc9
   178f0:	add	r3, r3, #20
   178f4:	add	r1, pc, r1
   178f8:	add	r0, pc, r0
   178fc:	bl	119d0 <__assert_fail@plt>
   17900:	ldr	r3, [pc, #68]	; 1794c <__assert_fail@plt+0x5f7c>
   17904:	ldr	r1, [pc, #68]	; 17950 <__assert_fail@plt+0x5f80>
   17908:	ldr	r0, [pc, #68]	; 17954 <__assert_fail@plt+0x5f84>
   1790c:	add	r3, pc, r3
   17910:	mov	r2, #200	; 0xc8
   17914:	add	r3, r3, #20
   17918:	add	r1, pc, r1
   1791c:	add	r0, pc, r0
   17920:	bl	119d0 <__assert_fail@plt>
   17924:	andeq	r4, r1, r4, asr #12
   17928:	ldrdeq	r4, [r1], -ip
   1792c:	andeq	r0, r0, r4, lsr #3
   17930:	muleq	r0, r8, r0
   17934:	andeq	r4, r0, r4, ror r0
   17938:	andeq	r4, r0, r4, ror r0
   1793c:	andeq	r4, r0, r0, ror #1
   17940:	andeq	r3, r0, r0, lsr #31
   17944:	andeq	r4, r0, r4, asr #32
   17948:	muleq	r0, r4, r0
   1794c:	andeq	r3, r0, ip, ror pc
   17950:	andeq	r4, r0, r0, lsr #32
   17954:	andeq	r4, r0, ip, rrx
   17958:	push	{r3}		; (str r3, [sp, #-4]!)
   1795c:	ldr	r3, [pc, #340]	; 17ab8 <__assert_fail@plt+0x60e8>
   17960:	ldr	ip, [pc, #340]	; 17abc <__assert_fail@plt+0x60ec>
   17964:	add	r3, pc, r3
   17968:	push	{r4, r5, r6, r7, r8, r9, lr}
   1796c:	sub	sp, sp, #24
   17970:	ldr	r8, [r3, ip]
   17974:	ldr	r7, [sp, #52]	; 0x34
   17978:	mov	r6, r2
   1797c:	ldr	r2, [r8]
   17980:	cmp	r7, #0
   17984:	mov	r4, r1
   17988:	str	r2, [sp, #20]
   1798c:	beq	17a78 <__assert_fail@plt+0x60a8>
   17990:	add	r3, sp, #56	; 0x38
   17994:	ldr	r5, [r0, #4]
   17998:	mov	r1, r7
   1799c:	mov	r2, r3
   179a0:	mov	r9, r0
   179a4:	str	r3, [sp, #16]
   179a8:	bl	170cc <__assert_fail@plt+0x56fc>
   179ac:	cmp	r5, #0
   179b0:	beq	179c0 <__assert_fail@plt+0x5ff0>
   179b4:	ldrsb	r3, [r5]
   179b8:	cmp	r3, #47	; 0x2f
   179bc:	addeq	r5, r5, #1
   179c0:	cmp	r0, #0
   179c4:	beq	179d4 <__assert_fail@plt+0x6004>
   179c8:	ldrsb	r3, [r0]
   179cc:	cmp	r3, #47	; 0x2f
   179d0:	addeq	r0, r0, #1
   179d4:	ldr	r2, [r9, #12]
   179d8:	cmp	r2, #0
   179dc:	beq	17a64 <__assert_fail@plt+0x6094>
   179e0:	cmp	r5, #0
   179e4:	beq	17a50 <__assert_fail@plt+0x6080>
   179e8:	cmp	r0, #0
   179ec:	beq	17a44 <__assert_fail@plt+0x6074>
   179f0:	ldr	r3, [pc, #200]	; 17ac0 <__assert_fail@plt+0x60f0>
   179f4:	str	r0, [sp, #12]
   179f8:	add	r3, pc, r3
   179fc:	stmib	sp, {r2, r5}
   17a00:	str	r3, [sp]
   17a04:	mov	r2, #1
   17a08:	mvn	r3, #0
   17a0c:	mov	r1, r6
   17a10:	mov	r0, r4
   17a14:	bl	119b8 <__snprintf_chk@plt>
   17a18:	cmp	r0, r6
   17a1c:	bcs	17aa0 <__assert_fail@plt+0x60d0>
   17a20:	ldr	r2, [sp, #20]
   17a24:	ldr	r3, [r8]
   17a28:	mov	r0, r4
   17a2c:	cmp	r2, r3
   17a30:	bne	17ab4 <__assert_fail@plt+0x60e4>
   17a34:	add	sp, sp, #24
   17a38:	pop	{r4, r5, r6, r7, r8, r9, lr}
   17a3c:	add	sp, sp, #4
   17a40:	bx	lr
   17a44:	ldr	r0, [pc, #120]	; 17ac4 <__assert_fail@plt+0x60f4>
   17a48:	add	r0, pc, r0
   17a4c:	b	179f0 <__assert_fail@plt+0x6020>
   17a50:	ldr	r5, [pc, #112]	; 17ac8 <__assert_fail@plt+0x60f8>
   17a54:	cmp	r0, #0
   17a58:	add	r5, pc, r5
   17a5c:	bne	179f0 <__assert_fail@plt+0x6020>
   17a60:	b	17a44 <__assert_fail@plt+0x6074>
   17a64:	ldr	r2, [pc, #96]	; 17acc <__assert_fail@plt+0x60fc>
   17a68:	cmp	r5, #0
   17a6c:	add	r2, pc, r2
   17a70:	bne	179e8 <__assert_fail@plt+0x6018>
   17a74:	b	17a50 <__assert_fail@plt+0x6080>
   17a78:	bl	17024 <__assert_fail@plt+0x5654>
   17a7c:	subs	r1, r0, #0
   17a80:	moveq	r4, r1
   17a84:	beq	17a20 <__assert_fail@plt+0x6050>
   17a88:	mov	r2, r6
   17a8c:	add	r6, r4, r6
   17a90:	mov	r0, r4
   17a94:	bl	11844 <strncpy@plt>
   17a98:	strb	r7, [r6, #-1]
   17a9c:	b	17a20 <__assert_fail@plt+0x6050>
   17aa0:	bl	117d8 <__errno_location@plt>
   17aa4:	mov	r3, #36	; 0x24
   17aa8:	mov	r4, #0
   17aac:	str	r3, [r0]
   17ab0:	b	17a20 <__assert_fail@plt+0x6050>
   17ab4:	bl	11640 <__stack_chk_fail@plt>
   17ab8:	andeq	r4, r1, r8, ror #9
   17abc:	andeq	r0, r0, r0, lsr #3
   17ac0:			; <UNDEFINED> instruction: 0x00003fb8
   17ac4:	andeq	r3, r0, r8, asr #9
   17ac8:			; <UNDEFINED> instruction: 0x000034b8
   17acc:	andeq	r3, r0, r4, lsr #9
   17ad0:	push	{r4, r5, r6, r7, r8, r9, lr}
   17ad4:	sub	sp, sp, #20
   17ad8:	ldr	r5, [pc, #296]	; 17c08 <__assert_fail@plt+0x6238>
   17adc:	ldr	r3, [pc, #296]	; 17c0c <__assert_fail@plt+0x623c>
   17ae0:	add	r5, pc, r5
   17ae4:	mov	r8, r1
   17ae8:	ldr	r6, [r5, r3]
   17aec:	mov	r7, r2
   17af0:	mov	r9, r0
   17af4:	ldr	r3, [r6]
   17af8:	str	r3, [sp, #12]
   17afc:	bl	177f8 <__assert_fail@plt+0x5e28>
   17b00:	subs	r4, r0, #0
   17b04:	str	r0, [sp, #8]
   17b08:	blt	17b3c <__assert_fail@plt+0x616c>
   17b0c:	ldr	r3, [pc, #252]	; 17c10 <__assert_fail@plt+0x6240>
   17b10:	add	r3, pc, r3
   17b14:	ldr	r3, [r3]
   17b18:	tst	r3, #4
   17b1c:	bne	17ba8 <__assert_fail@plt+0x61d8>
   17b20:	mov	r0, r4
   17b24:	mov	r3, #0
   17b28:	mov	r2, r8
   17b2c:	mov	r1, r7
   17b30:	bl	115bc <faccessat@plt>
   17b34:	subs	r4, r0, #0
   17b38:	bne	17b58 <__assert_fail@plt+0x6188>
   17b3c:	ldr	r2, [sp, #12]
   17b40:	ldr	r3, [r6]
   17b44:	mov	r0, r4
   17b48:	cmp	r2, r3
   17b4c:	bne	17c04 <__assert_fail@plt+0x6234>
   17b50:	add	sp, sp, #20
   17b54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17b58:	bl	117d8 <__errno_location@plt>
   17b5c:	ldr	r3, [r0]
   17b60:	cmp	r3, #2
   17b64:	bne	17b3c <__assert_fail@plt+0x616c>
   17b68:	add	r3, r9, #4096	; 0x1000
   17b6c:	ldr	r3, [r3, #24]
   17b70:	cmp	r3, #0
   17b74:	beq	17b3c <__assert_fail@plt+0x616c>
   17b78:	mov	r0, r9
   17b7c:	add	r2, sp, #8
   17b80:	mov	r1, r7
   17b84:	blx	r3
   17b88:	subs	r3, r0, #0
   17b8c:	bne	17b3c <__assert_fail@plt+0x616c>
   17b90:	mov	r2, r8
   17b94:	mov	r1, r7
   17b98:	ldr	r0, [sp, #8]
   17b9c:	bl	115bc <faccessat@plt>
   17ba0:	mov	r4, r0
   17ba4:	b	17b3c <__assert_fail@plt+0x616c>
   17ba8:	ldr	r3, [pc, #100]	; 17c14 <__assert_fail@plt+0x6244>
   17bac:	ldr	r3, [r5, r3]
   17bb0:	ldr	r4, [r3]
   17bb4:	bl	11760 <getpid@plt>
   17bb8:	ldr	r2, [pc, #88]	; 17c18 <__assert_fail@plt+0x6248>
   17bbc:	ldr	r3, [pc, #88]	; 17c1c <__assert_fail@plt+0x624c>
   17bc0:	add	r2, pc, r2
   17bc4:	str	r2, [sp, #4]
   17bc8:	ldr	r2, [pc, #80]	; 17c20 <__assert_fail@plt+0x6250>
   17bcc:	add	r3, pc, r3
   17bd0:	str	r3, [sp]
   17bd4:	add	r2, pc, r2
   17bd8:	mov	r1, #1
   17bdc:	mov	r3, r0
   17be0:	mov	r0, r4
   17be4:	bl	11898 <__fprintf_chk@plt>
   17be8:	ldr	r1, [pc, #52]	; 17c24 <__assert_fail@plt+0x6254>
   17bec:	mov	r2, r7
   17bf0:	add	r1, pc, r1
   17bf4:	mov	r0, r9
   17bf8:	bl	16ed8 <__assert_fail@plt+0x5508>
   17bfc:	ldr	r4, [sp, #8]
   17c00:	b	17b20 <__assert_fail@plt+0x6150>
   17c04:	bl	11640 <__stack_chk_fail@plt>
   17c08:	andeq	r4, r1, ip, ror #6
   17c0c:	andeq	r0, r0, r0, lsr #3
   17c10:	andeq	r4, r1, r0, lsl r5
   17c14:	andeq	r0, r0, r4, lsr #3
   17c18:	andeq	r3, r0, r4, ror #26
   17c1c:	andeq	r3, r0, r0, asr #26
   17c20:	andeq	r3, r0, r0, asr #26
   17c24:	andeq	r3, r0, ip, asr #27
   17c28:	push	{r2, r3}
   17c2c:	ldr	r3, [pc, #104]	; 17c9c <__assert_fail@plt+0x62cc>
   17c30:	ldr	r2, [pc, #104]	; 17ca0 <__assert_fail@plt+0x62d0>
   17c34:	add	r3, pc, r3
   17c38:	push	{r4, r5, r6, lr}
   17c3c:	sub	sp, sp, #8
   17c40:	ldr	r4, [r3, r2]
   17c44:	add	ip, sp, #28
   17c48:	mov	r2, ip
   17c4c:	ldr	r3, [r4]
   17c50:	mov	r6, r1
   17c54:	ldr	r1, [sp, #24]
   17c58:	str	r3, [sp, #4]
   17c5c:	mov	r5, r0
   17c60:	str	ip, [sp]
   17c64:	bl	170cc <__assert_fail@plt+0x56fc>
   17c68:	mov	r1, r6
   17c6c:	mov	r2, r0
   17c70:	mov	r0, r5
   17c74:	bl	17ad0 <__assert_fail@plt+0x6100>
   17c78:	ldr	r2, [sp, #4]
   17c7c:	ldr	r3, [r4]
   17c80:	cmp	r2, r3
   17c84:	bne	17c98 <__assert_fail@plt+0x62c8>
   17c88:	add	sp, sp, #8
   17c8c:	pop	{r4, r5, r6, lr}
   17c90:	add	sp, sp, #8
   17c94:	bx	lr
   17c98:	bl	11640 <__stack_chk_fail@plt>
   17c9c:	andeq	r4, r1, r8, lsl r2
   17ca0:	andeq	r0, r0, r0, lsr #3
   17ca4:	push	{r4, r5, r6, r7, r8, r9, lr}
   17ca8:	sub	sp, sp, #20
   17cac:	ldr	r5, [pc, #536]	; 17ecc <__assert_fail@plt+0x64fc>
   17cb0:	ldr	r3, [pc, #536]	; 17ed0 <__assert_fail@plt+0x6500>
   17cb4:	add	r5, pc, r5
   17cb8:	subs	r8, r0, #0
   17cbc:	ldr	r6, [r5, r3]
   17cc0:	mov	r7, r2
   17cc4:	ldr	r3, [r6]
   17cc8:	str	r3, [sp, #12]
   17ccc:	beq	17d2c <__assert_fail@plt+0x635c>
   17cd0:	mov	r9, r1
   17cd4:	bl	177f8 <__assert_fail@plt+0x5e28>
   17cd8:	cmp	r0, #0
   17cdc:	mov	r4, r0
   17ce0:	str	r0, [sp, #8]
   17ce4:	blt	17d10 <__assert_fail@plt+0x6340>
   17ce8:	mov	r2, r9
   17cec:	mov	r1, r7
   17cf0:	bl	115e0 <__openat64_2@plt>
   17cf4:	subs	r4, r0, #0
   17cf8:	blt	17da0 <__assert_fail@plt+0x63d0>
   17cfc:	ldr	r3, [pc, #464]	; 17ed4 <__assert_fail@plt+0x6504>
   17d00:	add	r3, pc, r3
   17d04:	ldr	r3, [r3]
   17d08:	tst	r3, #4
   17d0c:	bne	17e58 <__assert_fail@plt+0x6488>
   17d10:	ldr	r2, [sp, #12]
   17d14:	ldr	r3, [r6]
   17d18:	mov	r0, r4
   17d1c:	cmp	r2, r3
   17d20:	bne	17ec0 <__assert_fail@plt+0x64f0>
   17d24:	add	sp, sp, #20
   17d28:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17d2c:	mov	r0, r2
   17d30:	bl	117cc <__open64_2@plt>
   17d34:	ldr	r3, [pc, #412]	; 17ed8 <__assert_fail@plt+0x6508>
   17d38:	add	r3, pc, r3
   17d3c:	ldr	r3, [r3]
   17d40:	tst	r3, #4
   17d44:	mov	r4, r0
   17d48:	beq	17d10 <__assert_fail@plt+0x6340>
   17d4c:	ldr	r3, [pc, #392]	; 17edc <__assert_fail@plt+0x650c>
   17d50:	ldr	r3, [r5, r3]
   17d54:	ldr	r5, [r3]
   17d58:	bl	11760 <getpid@plt>
   17d5c:	ldr	r2, [pc, #380]	; 17ee0 <__assert_fail@plt+0x6510>
   17d60:	ldr	r3, [pc, #380]	; 17ee4 <__assert_fail@plt+0x6514>
   17d64:	add	r2, pc, r2
   17d68:	str	r2, [sp, #4]
   17d6c:	ldr	r2, [pc, #372]	; 17ee8 <__assert_fail@plt+0x6518>
   17d70:	add	r3, pc, r3
   17d74:	str	r3, [sp]
   17d78:	add	r2, pc, r2
   17d7c:	mov	r1, #1
   17d80:	mov	r3, r0
   17d84:	mov	r0, r5
   17d88:	bl	11898 <__fprintf_chk@plt>
   17d8c:	ldr	r0, [pc, #344]	; 17eec <__assert_fail@plt+0x651c>
   17d90:	mov	r1, r7
   17d94:	add	r0, pc, r0
   17d98:	bl	16fa4 <__assert_fail@plt+0x55d4>
   17d9c:	b	17d10 <__assert_fail@plt+0x6340>
   17da0:	bl	117d8 <__errno_location@plt>
   17da4:	ldr	r3, [r0]
   17da8:	cmp	r3, #2
   17dac:	bne	17cfc <__assert_fail@plt+0x632c>
   17db0:	add	r3, r8, #4096	; 0x1000
   17db4:	ldr	r3, [r3, #24]
   17db8:	cmp	r3, #0
   17dbc:	beq	17cfc <__assert_fail@plt+0x632c>
   17dc0:	add	r2, sp, #8
   17dc4:	mov	r1, r7
   17dc8:	mov	r0, r8
   17dcc:	blx	r3
   17dd0:	cmp	r0, #0
   17dd4:	bne	17cfc <__assert_fail@plt+0x632c>
   17dd8:	mov	r2, r9
   17ddc:	mov	r1, r7
   17de0:	ldr	r0, [sp, #8]
   17de4:	bl	115e0 <__openat64_2@plt>
   17de8:	ldr	r3, [pc, #256]	; 17ef0 <__assert_fail@plt+0x6520>
   17dec:	add	r3, pc, r3
   17df0:	ldr	r3, [r3]
   17df4:	tst	r3, #4
   17df8:	mov	r9, r0
   17dfc:	beq	17ec4 <__assert_fail@plt+0x64f4>
   17e00:	ldr	r3, [pc, #212]	; 17edc <__assert_fail@plt+0x650c>
   17e04:	ldr	r3, [r5, r3]
   17e08:	ldr	r5, [r3]
   17e0c:	bl	11760 <getpid@plt>
   17e10:	ldr	r2, [pc, #220]	; 17ef4 <__assert_fail@plt+0x6524>
   17e14:	ldr	r3, [pc, #220]	; 17ef8 <__assert_fail@plt+0x6528>
   17e18:	add	r2, pc, r2
   17e1c:	str	r2, [sp, #4]
   17e20:	ldr	r2, [pc, #212]	; 17efc <__assert_fail@plt+0x652c>
   17e24:	add	r3, pc, r3
   17e28:	str	r3, [sp]
   17e2c:	add	r2, pc, r2
   17e30:	mov	r1, #1
   17e34:	mov	r3, r0
   17e38:	mov	r0, r5
   17e3c:	bl	11898 <__fprintf_chk@plt>
   17e40:	ldr	r3, [pc, #184]	; 17f00 <__assert_fail@plt+0x6530>
   17e44:	cmp	r4, r9
   17e48:	add	r3, pc, r3
   17e4c:	ldrne	r3, [pc, #176]	; 17f04 <__assert_fail@plt+0x6534>
   17e50:	addne	r3, pc, r3
   17e54:	b	17ea4 <__assert_fail@plt+0x64d4>
   17e58:	ldr	r3, [pc, #124]	; 17edc <__assert_fail@plt+0x650c>
   17e5c:	mov	r9, r4
   17e60:	ldr	r3, [r5, r3]
   17e64:	ldr	r4, [r3]
   17e68:	bl	11760 <getpid@plt>
   17e6c:	ldr	r2, [pc, #148]	; 17f08 <__assert_fail@plt+0x6538>
   17e70:	ldr	r3, [pc, #148]	; 17f0c <__assert_fail@plt+0x653c>
   17e74:	add	r2, pc, r2
   17e78:	str	r2, [sp, #4]
   17e7c:	ldr	r2, [pc, #140]	; 17f10 <__assert_fail@plt+0x6540>
   17e80:	add	r3, pc, r3
   17e84:	str	r3, [sp]
   17e88:	add	r2, pc, r2
   17e8c:	mov	r1, #1
   17e90:	mov	r3, r0
   17e94:	mov	r0, r4
   17e98:	bl	11898 <__fprintf_chk@plt>
   17e9c:	ldr	r3, [pc, #112]	; 17f14 <__assert_fail@plt+0x6544>
   17ea0:	add	r3, pc, r3
   17ea4:	ldr	r1, [pc, #108]	; 17f18 <__assert_fail@plt+0x6548>
   17ea8:	mov	r2, r7
   17eac:	mov	r0, r8
   17eb0:	add	r1, pc, r1
   17eb4:	mov	r4, r9
   17eb8:	bl	16ed8 <__assert_fail@plt+0x5508>
   17ebc:	b	17d10 <__assert_fail@plt+0x6340>
   17ec0:	bl	11640 <__stack_chk_fail@plt>
   17ec4:	mov	r4, r0
   17ec8:	b	17d10 <__assert_fail@plt+0x6340>
   17ecc:	muleq	r1, r8, r1
   17ed0:	andeq	r0, r0, r0, lsr #3
   17ed4:	andeq	r4, r1, r0, lsr #6
   17ed8:	andeq	r4, r1, r8, ror #5
   17edc:	andeq	r0, r0, r4, lsr #3
   17ee0:	andeq	r3, r0, r0, asr #23
   17ee4:	muleq	r0, ip, fp
   17ee8:	muleq	r0, ip, fp
   17eec:	andeq	r3, r0, r8, asr #24
   17ef0:	andeq	r4, r1, r4, lsr r2
   17ef4:	andeq	r3, r0, ip, lsl #22
   17ef8:	andeq	r3, r0, r8, ror #21
   17efc:	andeq	r3, r0, r8, ror #21
   17f00:	andeq	r3, r0, r8, asr #1
   17f04:	andeq	r3, r0, ip, ror fp
   17f08:			; <UNDEFINED> instruction: 0x00003ab0
   17f0c:	andeq	r3, r0, ip, lsl #21
   17f10:	andeq	r3, r0, ip, lsl #21
   17f14:	andeq	r3, r0, r0, ror r0
   17f18:	andeq	r3, r0, ip, lsr fp
   17f1c:	mov	ip, r2
   17f20:	push	{r4, r5, r6, lr}
   17f24:	mov	r2, r3
   17f28:	mov	r5, r1
   17f2c:	mov	r1, ip
   17f30:	mov	r4, r0
   17f34:	bl	170cc <__assert_fail@plt+0x56fc>
   17f38:	subs	r2, r0, #0
   17f3c:	beq	17f50 <__assert_fail@plt+0x6580>
   17f40:	mov	r1, r5
   17f44:	mov	r0, r4
   17f48:	pop	{r4, r5, r6, lr}
   17f4c:	b	17ca4 <__assert_fail@plt+0x62d4>
   17f50:	bl	117d8 <__errno_location@plt>
   17f54:	ldr	r0, [r0]
   17f58:	rsb	r0, r0, #0
   17f5c:	pop	{r4, r5, r6, pc}
   17f60:	push	{r2, r3}
   17f64:	ldr	r2, [pc, #80]	; 17fbc <__assert_fail@plt+0x65ec>
   17f68:	ldr	ip, [pc, #80]	; 17fc0 <__assert_fail@plt+0x65f0>
   17f6c:	add	r2, pc, r2
   17f70:	push	{r4, lr}
   17f74:	sub	sp, sp, #8
   17f78:	ldr	r4, [r2, ip]
   17f7c:	add	lr, sp, #20
   17f80:	mov	r3, lr
   17f84:	ldr	ip, [r4]
   17f88:	ldr	r2, [sp, #16]
   17f8c:	str	lr, [sp]
   17f90:	str	ip, [sp, #4]
   17f94:	bl	17f1c <__assert_fail@plt+0x654c>
   17f98:	ldr	r2, [sp, #4]
   17f9c:	ldr	r3, [r4]
   17fa0:	cmp	r2, r3
   17fa4:	bne	17fb8 <__assert_fail@plt+0x65e8>
   17fa8:	add	sp, sp, #8
   17fac:	pop	{r4, lr}
   17fb0:	add	sp, sp, #8
   17fb4:	bx	lr
   17fb8:	bl	11640 <__stack_chk_fail@plt>
   17fbc:	andeq	r3, r1, r0, ror #29
   17fc0:	andeq	r0, r0, r0, lsr #3
   17fc4:	push	{r4, r5, r6, r7, r8, lr}
   17fc8:	subs	r4, r1, #0
   17fcc:	beq	18088 <__assert_fail@plt+0x66b8>
   17fd0:	ldrsb	r3, [r4]
   17fd4:	cmp	r3, #0
   17fd8:	beq	18090 <__assert_fail@plt+0x66c0>
   17fdc:	ldr	r5, [pc, #180]	; 18098 <__assert_fail@plt+0x66c8>
   17fe0:	ldr	r7, [pc, #180]	; 1809c <__assert_fail@plt+0x66cc>
   17fe4:	ldr	lr, [pc, #180]	; 180a0 <__assert_fail@plt+0x66d0>
   17fe8:	ldr	r6, [pc, #180]	; 180a4 <__assert_fail@plt+0x66d4>
   17fec:	mov	ip, r4
   17ff0:	mov	r1, #0
   17ff4:	b	18024 <__assert_fail@plt+0x6654>
   17ff8:	cmp	r3, #119	; 0x77
   17ffc:	beq	18058 <__assert_fail@plt+0x6688>
   18000:	cmp	r3, #97	; 0x61
   18004:	beq	1806c <__assert_fail@plt+0x669c>
   18008:	cmp	r3, #101	; 0x65
   1800c:	orreq	r1, r1, #524288	; 0x80000
   18010:	cmn	ip, #1
   18014:	beq	18040 <__assert_fail@plt+0x6670>
   18018:	ldrsb	r3, [ip, #1]!
   1801c:	cmp	r3, #0
   18020:	beq	18040 <__assert_fail@plt+0x6670>
   18024:	cmp	r3, #114	; 0x72
   18028:	bne	17ff8 <__assert_fail@plt+0x6628>
   1802c:	ldrsb	r3, [ip, #1]
   18030:	cmp	r3, #43	; 0x2b
   18034:	orreq	r1, r1, #2
   18038:	cmn	ip, #1
   1803c:	bne	18018 <__assert_fail@plt+0x6648>
   18040:	bl	17ca4 <__assert_fail@plt+0x62d4>
   18044:	cmp	r0, #0
   18048:	blt	18080 <__assert_fail@plt+0x66b0>
   1804c:	mov	r1, r4
   18050:	pop	{r4, r5, r6, r7, r8, lr}
   18054:	b	11520 <fdopen@plt>
   18058:	ldrsb	r3, [ip, #1]
   1805c:	cmp	r3, #43	; 0x2b
   18060:	orreq	r1, r1, r6
   18064:	orrne	r1, r1, lr
   18068:	b	18010 <__assert_fail@plt+0x6640>
   1806c:	ldrsb	r3, [ip, #1]
   18070:	cmp	r3, #43	; 0x2b
   18074:	orreq	r1, r1, r7
   18078:	orrne	r1, r1, r5
   1807c:	b	18010 <__assert_fail@plt+0x6640>
   18080:	mov	r0, #0
   18084:	pop	{r4, r5, r6, r7, r8, pc}
   18088:	mov	r1, r4
   1808c:	b	18040 <__assert_fail@plt+0x6670>
   18090:	mov	r1, r3
   18094:	b	18040 <__assert_fail@plt+0x6670>
   18098:	andeq	r0, r0, r1, lsl #8
   1809c:	andeq	r0, r0, r2, lsl #8
   180a0:	andeq	r0, r0, r1, lsl #4
   180a4:	andeq	r0, r0, r2, lsl #4
   180a8:	mov	ip, r2
   180ac:	push	{r4, r5, r6, lr}
   180b0:	mov	r2, r3
   180b4:	mov	r5, r1
   180b8:	mov	r1, ip
   180bc:	mov	r4, r0
   180c0:	bl	170cc <__assert_fail@plt+0x56fc>
   180c4:	subs	r2, r0, #0
   180c8:	popeq	{r4, r5, r6, pc}
   180cc:	mov	r1, r5
   180d0:	mov	r0, r4
   180d4:	pop	{r4, r5, r6, lr}
   180d8:	b	17fc4 <__assert_fail@plt+0x65f4>
   180dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180e0:	add	fp, sp, #32
   180e4:	ldr	lr, [pc, #300]	; 18218 <__assert_fail@plt+0x6848>
   180e8:	ldr	ip, [pc, #300]	; 1821c <__assert_fail@plt+0x684c>
   180ec:	add	lr, pc, lr
   180f0:	sub	sp, sp, #20
   180f4:	ldr	ip, [lr, ip]
   180f8:	rsb	r6, r2, r2, lsl #3
   180fc:	mov	r7, r1
   18100:	mov	r4, r2
   18104:	mov	r1, lr
   18108:	add	r2, r6, #7
   1810c:	ldr	r1, [pc, #268]	; 18220 <__assert_fail@plt+0x6850>
   18110:	str	ip, [fp, #-48]	; 0xffffffd0
   18114:	bic	r2, r2, #7
   18118:	ldr	ip, [ip]
   1811c:	mov	r8, #0
   18120:	sub	sp, sp, r2
   18124:	mov	r9, r3
   18128:	str	r8, [r7]
   1812c:	ldrd	r2, [fp, #4]
   18130:	add	r1, pc, r1
   18134:	str	ip, [fp, #-40]	; 0xffffffd8
   18138:	bl	180a8 <__assert_fail@plt+0x66d8>
   1813c:	subs	r5, r0, #0
   18140:	beq	181fc <__assert_fail@plt+0x682c>
   18144:	mov	r1, r6
   18148:	mov	r2, r5
   1814c:	mov	r0, sp
   18150:	bl	115a4 <fgets@plt>
   18154:	cmp	r0, #0
   18158:	beq	181fc <__assert_fail@plt+0x682c>
   1815c:	mov	r0, r5
   18160:	bl	118b0 <fclose@plt>
   18164:	mov	r0, sp
   18168:	bl	1179c <strlen@plt>
   1816c:	mov	r2, #0
   18170:	sub	r1, fp, #44	; 0x2c
   18174:	mov	sl, sp
   18178:	sub	r0, r0, #1
   1817c:	ldrsb	r3, [sp, r0]
   18180:	cmp	r3, #10
   18184:	strbeq	r8, [sp, r0]
   18188:	mov	r0, r4
   1818c:	bl	19b88 <__assert_fail@plt+0x81b8>
   18190:	cmp	r0, #0
   18194:	str	r0, [r7]
   18198:	beq	1820c <__assert_fail@plt+0x683c>
   1819c:	cmp	r9, #0
   181a0:	mov	r1, r0
   181a4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   181a8:	mov	r0, sl
   181ac:	bne	181dc <__assert_fail@plt+0x680c>
   181b0:	bl	19fb8 <__assert_fail@plt+0x85e8>
   181b4:	cmp	r0, #0
   181b8:	bne	181ec <__assert_fail@plt+0x681c>
   181bc:	mov	r0, #0
   181c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   181c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   181c8:	ldr	r3, [r3]
   181cc:	cmp	r2, r3
   181d0:	bne	18214 <__assert_fail@plt+0x6844>
   181d4:	sub	sp, fp, #32
   181d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181dc:	mov	r3, #0
   181e0:	bl	1a110 <__assert_fail@plt+0x8740>
   181e4:	cmp	r0, #0
   181e8:	beq	181bc <__assert_fail@plt+0x67ec>
   181ec:	ldr	r0, [r7]
   181f0:	bl	19bcc <__assert_fail@plt+0x81fc>
   181f4:	mvn	r0, #21
   181f8:	b	181c0 <__assert_fail@plt+0x67f0>
   181fc:	bl	117d8 <__errno_location@plt>
   18200:	ldr	r0, [r0]
   18204:	rsb	r0, r0, #0
   18208:	b	181c0 <__assert_fail@plt+0x67f0>
   1820c:	mvn	r0, #11
   18210:	b	181c0 <__assert_fail@plt+0x67f0>
   18214:	bl	11640 <__stack_chk_fail@plt>
   18218:	andeq	r3, r1, r0, ror #26
   1821c:	andeq	r0, r0, r0, lsr #3
   18220:	andeq	r3, r0, ip, asr #17
   18224:	push	{r2, r3}
   18228:	ldr	r2, [pc, #80]	; 18280 <__assert_fail@plt+0x68b0>
   1822c:	ldr	ip, [pc, #80]	; 18284 <__assert_fail@plt+0x68b4>
   18230:	add	r2, pc, r2
   18234:	push	{r4, lr}
   18238:	sub	sp, sp, #8
   1823c:	ldr	r4, [r2, ip]
   18240:	add	lr, sp, #20
   18244:	mov	r3, lr
   18248:	ldr	ip, [r4]
   1824c:	ldr	r2, [sp, #16]
   18250:	str	lr, [sp]
   18254:	str	ip, [sp, #4]
   18258:	bl	180a8 <__assert_fail@plt+0x66d8>
   1825c:	ldr	r2, [sp, #4]
   18260:	ldr	r3, [r4]
   18264:	cmp	r2, r3
   18268:	bne	1827c <__assert_fail@plt+0x68ac>
   1826c:	add	sp, sp, #8
   18270:	pop	{r4, lr}
   18274:	add	sp, sp, #8
   18278:	bx	lr
   1827c:	bl	11640 <__stack_chk_fail@plt>
   18280:	andeq	r3, r1, ip, lsl ip
   18284:	andeq	r0, r0, r0, lsr #3
   18288:	ldr	r3, [pc, #268]	; 1839c <__assert_fail@plt+0x69cc>
   1828c:	push	{r4, r5, r6, lr}
   18290:	subs	r5, r1, #0
   18294:	sub	sp, sp, #8
   18298:	add	r3, pc, r3
   1829c:	beq	182dc <__assert_fail@plt+0x690c>
   182a0:	mov	r2, r5
   182a4:	mov	r1, #524288	; 0x80000
   182a8:	bl	17ca4 <__assert_fail@plt+0x62d4>
   182ac:	mov	r4, r0
   182b0:	cmp	r4, #0
   182b4:	blt	1831c <__assert_fail@plt+0x694c>
   182b8:	mov	r0, r4
   182bc:	bl	11934 <fdopendir@plt>
   182c0:	subs	r6, r0, #0
   182c4:	beq	18390 <__assert_fail@plt+0x69c0>
   182c8:	cmp	r5, #0
   182cc:	beq	18380 <__assert_fail@plt+0x69b0>
   182d0:	mov	r0, r6
   182d4:	add	sp, sp, #8
   182d8:	pop	{r4, r5, r6, pc}
   182dc:	ldr	r2, [r0, #4]
   182e0:	mov	r4, r0
   182e4:	cmp	r2, #0
   182e8:	beq	1831c <__assert_fail@plt+0x694c>
   182ec:	ldr	r2, [pc, #172]	; 183a0 <__assert_fail@plt+0x69d0>
   182f0:	add	r2, pc, r2
   182f4:	ldr	r2, [r2]
   182f8:	tst	r2, #4
   182fc:	bne	1832c <__assert_fail@plt+0x695c>
   18300:	mov	r0, r4
   18304:	bl	177f8 <__assert_fail@plt+0x5e28>
   18308:	mov	r1, #3
   1830c:	bl	199c8 <__assert_fail@plt+0x7ff8>
   18310:	mov	r4, r0
   18314:	cmp	r4, #0
   18318:	bge	182b8 <__assert_fail@plt+0x68e8>
   1831c:	mov	r6, #0
   18320:	mov	r0, r6
   18324:	add	sp, sp, #8
   18328:	pop	{r4, r5, r6, pc}
   1832c:	ldr	r2, [pc, #112]	; 183a4 <__assert_fail@plt+0x69d4>
   18330:	ldr	r3, [r3, r2]
   18334:	ldr	r6, [r3]
   18338:	bl	11760 <getpid@plt>
   1833c:	ldr	r2, [pc, #100]	; 183a8 <__assert_fail@plt+0x69d8>
   18340:	ldr	r3, [pc, #100]	; 183ac <__assert_fail@plt+0x69dc>
   18344:	add	r2, pc, r2
   18348:	str	r2, [sp, #4]
   1834c:	ldr	r2, [pc, #92]	; 183b0 <__assert_fail@plt+0x69e0>
   18350:	add	r3, pc, r3
   18354:	str	r3, [sp]
   18358:	add	r2, pc, r2
   1835c:	mov	r1, #1
   18360:	mov	r3, r0
   18364:	mov	r0, r6
   18368:	bl	11898 <__fprintf_chk@plt>
   1836c:	ldr	r1, [pc, #64]	; 183b4 <__assert_fail@plt+0x69e4>
   18370:	mov	r0, r4
   18374:	add	r1, pc, r1
   18378:	bl	16ed8 <__assert_fail@plt+0x5508>
   1837c:	b	18300 <__assert_fail@plt+0x6930>
   18380:	bl	11550 <rewinddir@plt>
   18384:	mov	r0, r6
   18388:	add	sp, sp, #8
   1838c:	pop	{r4, r5, r6, pc}
   18390:	mov	r0, r4
   18394:	bl	11994 <close@plt>
   18398:	b	182d0 <__assert_fail@plt+0x6900>
   1839c:			; <UNDEFINED> instruction: 0x00013bb4
   183a0:	andeq	r3, r1, r0, lsr sp
   183a4:	andeq	r0, r0, r4, lsr #3
   183a8:	andeq	r3, r0, r0, ror #11
   183ac:			; <UNDEFINED> instruction: 0x000035bc
   183b0:			; <UNDEFINED> instruction: 0x000035bc
   183b4:	andeq	r3, r0, ip, lsl #13
   183b8:	push	{r4, lr}
   183bc:	mov	r4, r0
   183c0:	bl	170cc <__assert_fail@plt+0x56fc>
   183c4:	subs	r1, r0, #0
   183c8:	popeq	{r4, pc}
   183cc:	mov	r0, r4
   183d0:	pop	{r4, lr}
   183d4:	b	18288 <__assert_fail@plt+0x68b8>
   183d8:	push	{r1, r2, r3}
   183dc:	ldr	r3, [pc, #80]	; 18434 <__assert_fail@plt+0x6a64>
   183e0:	ldr	r1, [pc, #80]	; 18438 <__assert_fail@plt+0x6a68>
   183e4:	add	r3, pc, r3
   183e8:	push	{r4, lr}
   183ec:	sub	sp, sp, #12
   183f0:	ldr	r4, [r3, r1]
   183f4:	add	ip, sp, #24
   183f8:	mov	r2, ip
   183fc:	ldr	r3, [r4]
   18400:	ldr	r1, [sp, #20]
   18404:	str	r3, [sp, #4]
   18408:	str	ip, [sp]
   1840c:	bl	183b8 <__assert_fail@plt+0x69e8>
   18410:	ldr	r2, [sp, #4]
   18414:	ldr	r3, [r4]
   18418:	cmp	r2, r3
   1841c:	bne	18430 <__assert_fail@plt+0x6a60>
   18420:	add	sp, sp, #12
   18424:	pop	{r4, lr}
   18428:	add	sp, sp, #12
   1842c:	bx	lr
   18430:	bl	11640 <__stack_chk_fail@plt>
   18434:	andeq	r3, r1, r8, ror #20
   18438:	andeq	r0, r0, r0, lsr #3
   1843c:	push	{r4, r5, r6, lr}
   18440:	subs	r6, r3, #0
   18444:	mov	r4, r1
   18448:	mov	r5, r2
   1844c:	beq	18470 <__assert_fail@plt+0x6aa0>
   18450:	bl	177f8 <__assert_fail@plt+0x5e28>
   18454:	subs	r3, r0, #0
   18458:	blt	18498 <__assert_fail@plt+0x6ac8>
   1845c:	mov	r3, r5
   18460:	mov	r2, r4
   18464:	mov	r1, r6
   18468:	pop	{r4, r5, r6, lr}
   1846c:	b	1170c <readlinkat@plt>
   18470:	bl	17024 <__assert_fail@plt+0x5654>
   18474:	cmp	r0, #0
   18478:	beq	1848c <__assert_fail@plt+0x6abc>
   1847c:	mov	r2, r5
   18480:	mov	r1, r4
   18484:	pop	{r4, r5, r6, lr}
   18488:	b	11694 <readlink@plt>
   1848c:	bl	117d8 <__errno_location@plt>
   18490:	ldr	r3, [r0]
   18494:	rsb	r3, r3, #0
   18498:	mov	r0, r3
   1849c:	pop	{r4, r5, r6, pc}
   184a0:	push	{r3}		; (str r3, [sp, #-4]!)
   184a4:	ldr	r3, [pc, #132]	; 18530 <__assert_fail@plt+0x6b60>
   184a8:	ldr	ip, [pc, #132]	; 18534 <__assert_fail@plt+0x6b64>
   184ac:	add	r3, pc, r3
   184b0:	push	{r4, r5, r6, r7, lr}
   184b4:	sub	sp, sp, #8
   184b8:	ldr	r4, [r3, ip]
   184bc:	add	lr, sp, #32
   184c0:	mov	r5, r1
   184c4:	ldr	ip, [r4]
   184c8:	mov	r7, r2
   184cc:	ldr	r1, [sp, #28]
   184d0:	mov	r2, lr
   184d4:	str	ip, [sp, #4]
   184d8:	str	lr, [sp]
   184dc:	mov	r6, r0
   184e0:	bl	170cc <__assert_fail@plt+0x56fc>
   184e4:	subs	r3, r0, #0
   184e8:	beq	1851c <__assert_fail@plt+0x6b4c>
   184ec:	mov	r2, r7
   184f0:	mov	r1, r5
   184f4:	mov	r0, r6
   184f8:	bl	1843c <__assert_fail@plt+0x6a6c>
   184fc:	ldr	r2, [sp, #4]
   18500:	ldr	r3, [r4]
   18504:	cmp	r2, r3
   18508:	bne	1852c <__assert_fail@plt+0x6b5c>
   1850c:	add	sp, sp, #8
   18510:	pop	{r4, r5, r6, r7, lr}
   18514:	add	sp, sp, #4
   18518:	bx	lr
   1851c:	bl	117d8 <__errno_location@plt>
   18520:	ldr	r0, [r0]
   18524:	rsb	r0, r0, #0
   18528:	b	184fc <__assert_fail@plt+0x6b2c>
   1852c:	bl	11640 <__stack_chk_fail@plt>
   18530:	andeq	r3, r1, r0, lsr #19
   18534:	andeq	r0, r0, r0, lsr #3
   18538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1853c:	mov	r9, r3
   18540:	ldr	r4, [pc, #400]	; 186d8 <__assert_fail@plt+0x6d08>
   18544:	ldr	ip, [pc, #400]	; 186dc <__assert_fail@plt+0x6d0c>
   18548:	add	r4, pc, r4
   1854c:	sub	sp, sp, #36	; 0x24
   18550:	ldr	r3, [r4, ip]
   18554:	mov	r6, r1
   18558:	str	r3, [sp, #12]
   1855c:	ldr	r3, [r3]
   18560:	mov	r1, #524288	; 0x80000
   18564:	mov	r5, r2
   18568:	mov	r2, r9
   1856c:	str	r3, [sp, #28]
   18570:	bl	17ca4 <__assert_fail@plt+0x62d4>
   18574:	mov	r7, r0
   18578:	bl	117d8 <__errno_location@plt>
   1857c:	cmp	r7, #0
   18580:	mov	r8, r0
   18584:	blt	186b4 <__assert_fail@plt+0x6ce4>
   18588:	ldr	r3, [pc, #336]	; 186e0 <__assert_fail@plt+0x6d10>
   1858c:	add	r3, pc, r3
   18590:	ldr	r3, [r3]
   18594:	tst	r3, #4
   18598:	bne	18640 <__assert_fail@plt+0x6c70>
   1859c:	mov	r2, r5
   185a0:	mov	r1, #0
   185a4:	mov	r0, r6
   185a8:	bl	1182c <memset@plt>
   185ac:	cmp	r5, #0
   185b0:	movne	r4, #0
   185b4:	movne	fp, r4
   185b8:	addne	r9, sp, #20
   185bc:	beq	186c8 <__assert_fail@plt+0x6cf8>
   185c0:	mov	r2, r5
   185c4:	mov	r1, r6
   185c8:	mov	r0, r7
   185cc:	bl	11580 <read@plt>
   185d0:	cmp	r0, #0
   185d4:	ble	185f0 <__assert_fail@plt+0x6c20>
   185d8:	subs	r5, r5, r0
   185dc:	add	r6, r6, r0
   185e0:	add	r4, r4, r0
   185e4:	beq	186c0 <__assert_fail@plt+0x6cf0>
   185e8:	mov	fp, #0
   185ec:	b	185c0 <__assert_fail@plt+0x6bf0>
   185f0:	ldr	sl, [r8]
   185f4:	beq	1860c <__assert_fail@plt+0x6c3c>
   185f8:	cmp	sl, #4
   185fc:	cmpne	sl, #11
   18600:	bne	1860c <__assert_fail@plt+0x6c3c>
   18604:	cmp	fp, #4
   18608:	ble	18694 <__assert_fail@plt+0x6cc4>
   1860c:	cmp	r4, #0
   18610:	mvneq	r4, #0
   18614:	mov	r0, r7
   18618:	bl	11994 <close@plt>
   1861c:	str	sl, [r8]
   18620:	ldr	r3, [sp, #12]
   18624:	ldr	r2, [sp, #28]
   18628:	mov	r0, r4
   1862c:	ldr	r3, [r3]
   18630:	cmp	r2, r3
   18634:	bne	186d4 <__assert_fail@plt+0x6d04>
   18638:	add	sp, sp, #36	; 0x24
   1863c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18640:	ldr	r3, [pc, #156]	; 186e4 <__assert_fail@plt+0x6d14>
   18644:	ldr	r3, [r4, r3]
   18648:	ldr	r4, [r3]
   1864c:	bl	11760 <getpid@plt>
   18650:	ldr	r2, [pc, #144]	; 186e8 <__assert_fail@plt+0x6d18>
   18654:	ldr	r3, [pc, #144]	; 186ec <__assert_fail@plt+0x6d1c>
   18658:	add	r2, pc, r2
   1865c:	str	r2, [sp, #4]
   18660:	ldr	r2, [pc, #136]	; 186f0 <__assert_fail@plt+0x6d20>
   18664:	add	r3, pc, r3
   18668:	str	r3, [sp]
   1866c:	add	r2, pc, r2
   18670:	mov	r1, #1
   18674:	mov	r3, r0
   18678:	mov	r0, r4
   1867c:	bl	11898 <__fprintf_chk@plt>
   18680:	ldr	r0, [pc, #108]	; 186f4 <__assert_fail@plt+0x6d24>
   18684:	mov	r1, r9
   18688:	add	r0, pc, r0
   1868c:	bl	16fa4 <__assert_fail@plt+0x55d4>
   18690:	b	1859c <__assert_fail@plt+0x6bcc>
   18694:	ldr	r3, [pc, #92]	; 186f8 <__assert_fail@plt+0x6d28>
   18698:	mov	r1, #0
   1869c:	mov	r0, r9
   186a0:	add	fp, fp, #1
   186a4:	str	r1, [sp, #20]
   186a8:	str	r3, [sp, #24]
   186ac:	bl	115b0 <nanosleep@plt>
   186b0:	b	185c0 <__assert_fail@plt+0x6bf0>
   186b4:	ldr	r4, [r0]
   186b8:	rsb	r4, r4, #0
   186bc:	b	18620 <__assert_fail@plt+0x6c50>
   186c0:	ldr	sl, [r8]
   186c4:	b	18614 <__assert_fail@plt+0x6c44>
   186c8:	ldr	sl, [r8]
   186cc:	mov	r4, r5
   186d0:	b	18614 <__assert_fail@plt+0x6c44>
   186d4:	bl	11640 <__stack_chk_fail@plt>
   186d8:	andeq	r3, r1, r4, lsl #18
   186dc:	andeq	r0, r0, r0, lsr #3
   186e0:	muleq	r1, r4, sl
   186e4:	andeq	r0, r0, r4, lsr #3
   186e8:	andeq	r3, r0, ip, asr #5
   186ec:	andeq	r3, r0, r8, lsr #5
   186f0:	andeq	r3, r0, r8, lsr #5
   186f4:	andeq	r3, r0, ip, lsl #7
   186f8:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   186fc:	push	{r4, r5, r6, lr}
   18700:	mov	r5, r1
   18704:	mov	r6, r2
   18708:	mov	r1, r3
   1870c:	ldr	r2, [sp, #16]
   18710:	mov	r4, r0
   18714:	bl	170cc <__assert_fail@plt+0x56fc>
   18718:	subs	r3, r0, #0
   1871c:	beq	18734 <__assert_fail@plt+0x6d64>
   18720:	mov	r2, r6
   18724:	mov	r1, r5
   18728:	mov	r0, r4
   1872c:	pop	{r4, r5, r6, lr}
   18730:	b	18538 <__assert_fail@plt+0x6b68>
   18734:	mvn	r0, #21
   18738:	pop	{r4, r5, r6, pc}
   1873c:	push	{r3}		; (str r3, [sp, #-4]!)
   18740:	ldr	r3, [pc, #80]	; 18798 <__assert_fail@plt+0x6dc8>
   18744:	ldr	ip, [pc, #80]	; 1879c <__assert_fail@plt+0x6dcc>
   18748:	add	r3, pc, r3
   1874c:	push	{r4, lr}
   18750:	sub	sp, sp, #20
   18754:	ldr	r4, [r3, ip]
   18758:	add	lr, sp, #32
   1875c:	str	lr, [sp]
   18760:	ldr	ip, [r4]
   18764:	ldr	r3, [sp, #28]
   18768:	str	lr, [sp, #8]
   1876c:	str	ip, [sp, #12]
   18770:	bl	186fc <__assert_fail@plt+0x6d2c>
   18774:	ldr	r2, [sp, #12]
   18778:	ldr	r3, [r4]
   1877c:	cmp	r2, r3
   18780:	bne	18794 <__assert_fail@plt+0x6dc4>
   18784:	add	sp, sp, #20
   18788:	pop	{r4, lr}
   1878c:	add	sp, sp, #4
   18790:	bx	lr
   18794:	bl	11640 <__stack_chk_fail@plt>
   18798:	andeq	r3, r1, r4, lsl #14
   1879c:	andeq	r0, r0, r0, lsr #3
   187a0:	ldr	ip, [pc, #176]	; 18858 <__assert_fail@plt+0x6e88>
   187a4:	ldr	r3, [pc, #176]	; 1885c <__assert_fail@plt+0x6e8c>
   187a8:	add	ip, pc, ip
   187ac:	push	{r4, r5, r6, r7, r8, lr}
   187b0:	sub	sp, sp, #8192	; 0x2000
   187b4:	ldr	r7, [ip, r3]
   187b8:	sub	sp, sp, #8
   187bc:	mov	r6, r1
   187c0:	add	r5, sp, #8
   187c4:	add	ip, sp, #8192	; 0x2000
   187c8:	ldr	lr, [r7]
   187cc:	mov	r1, #0
   187d0:	add	ip, ip, #4
   187d4:	sub	r8, r5, #4
   187d8:	mov	r3, r2
   187dc:	str	r1, [r6]
   187e0:	ldr	r2, [pc, #120]	; 18860 <__assert_fail@plt+0x6e90>
   187e4:	mov	r1, r8
   187e8:	str	lr, [ip]
   187ec:	bl	18538 <__assert_fail@plt+0x6b68>
   187f0:	subs	r4, r0, #0
   187f4:	blt	1882c <__assert_fail@plt+0x6e5c>
   187f8:	beq	1880c <__assert_fail@plt+0x6e3c>
   187fc:	sub	r3, r5, #5
   18800:	ldrsb	r3, [r3, r4]
   18804:	cmp	r3, #10
   18808:	subeq	r4, r4, #1
   1880c:	add	r5, r5, r4
   18810:	mov	r3, #0
   18814:	mov	r0, r8
   18818:	strb	r3, [r5, #-4]
   1881c:	bl	11634 <strdup@plt>
   18820:	cmp	r0, #0
   18824:	mvneq	r4, #11
   18828:	str	r0, [r6]
   1882c:	add	r3, sp, #8192	; 0x2000
   18830:	add	r3, r3, #4
   18834:	ldr	r2, [r3]
   18838:	ldr	r3, [r7]
   1883c:	mov	r0, r4
   18840:	cmp	r2, r3
   18844:	bne	18854 <__assert_fail@plt+0x6e84>
   18848:	add	sp, sp, #8192	; 0x2000
   1884c:	add	sp, sp, #8
   18850:	pop	{r4, r5, r6, r7, r8, pc}
   18854:	bl	11640 <__stack_chk_fail@plt>
   18858:	andeq	r3, r1, r4, lsr #13
   1885c:	andeq	r0, r0, r0, lsr #3
   18860:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   18864:	push	{r2, r3}
   18868:	ldr	r3, [pc, #116]	; 188e4 <__assert_fail@plt+0x6f14>
   1886c:	ldr	r2, [pc, #116]	; 188e8 <__assert_fail@plt+0x6f18>
   18870:	add	r3, pc, r3
   18874:	push	{r4, r5, r6, lr}
   18878:	sub	sp, sp, #8
   1887c:	ldr	r4, [r3, r2]
   18880:	add	ip, sp, #28
   18884:	mov	r2, ip
   18888:	ldr	r3, [r4]
   1888c:	mov	r5, r1
   18890:	ldr	r1, [sp, #24]
   18894:	str	ip, [sp]
   18898:	str	r3, [sp, #4]
   1889c:	mov	r6, r0
   188a0:	bl	170cc <__assert_fail@plt+0x56fc>
   188a4:	subs	r2, r0, #0
   188a8:	beq	188d8 <__assert_fail@plt+0x6f08>
   188ac:	mov	r1, r5
   188b0:	mov	r0, r6
   188b4:	bl	187a0 <__assert_fail@plt+0x6dd0>
   188b8:	ldr	r2, [sp, #4]
   188bc:	ldr	r3, [r4]
   188c0:	cmp	r2, r3
   188c4:	bne	188e0 <__assert_fail@plt+0x6f10>
   188c8:	add	sp, sp, #8
   188cc:	pop	{r4, r5, r6, lr}
   188d0:	add	sp, sp, #8
   188d4:	bx	lr
   188d8:	mvn	r0, #21
   188dc:	b	188b8 <__assert_fail@plt+0x6ee8>
   188e0:	bl	11640 <__stack_chk_fail@plt>
   188e4:	ldrdeq	r3, [r1], -ip
   188e8:	andeq	r0, r0, r0, lsr #3
   188ec:	push	{r4, lr}
   188f0:	sub	r2, r2, #1
   188f4:	mov	r4, r1
   188f8:	bl	18538 <__assert_fail@plt+0x6b68>
   188fc:	cmp	r0, #0
   18900:	poplt	{r4, pc}
   18904:	beq	18920 <__assert_fail@plt+0x6f50>
   18908:	add	r3, r4, r0
   1890c:	ldrsb	r2, [r3, #-1]
   18910:	cmp	r2, #10
   18914:	subeq	r0, r0, #1
   18918:	movne	r4, r3
   1891c:	addeq	r4, r4, r0
   18920:	mov	r3, #0
   18924:	strb	r3, [r4]
   18928:	pop	{r4, pc}
   1892c:	push	{r3}		; (str r3, [sp, #-4]!)
   18930:	ldr	r3, [pc, #124]	; 189b4 <__assert_fail@plt+0x6fe4>
   18934:	ldr	ip, [pc, #124]	; 189b8 <__assert_fail@plt+0x6fe8>
   18938:	add	r3, pc, r3
   1893c:	push	{r4, r5, r6, r7, lr}
   18940:	sub	sp, sp, #8
   18944:	ldr	r4, [r3, ip]
   18948:	add	lr, sp, #32
   1894c:	mov	r5, r1
   18950:	ldr	ip, [r4]
   18954:	mov	r7, r2
   18958:	ldr	r1, [sp, #28]
   1895c:	mov	r2, lr
   18960:	str	ip, [sp, #4]
   18964:	str	lr, [sp]
   18968:	mov	r6, r0
   1896c:	bl	170cc <__assert_fail@plt+0x56fc>
   18970:	subs	r3, r0, #0
   18974:	beq	189a8 <__assert_fail@plt+0x6fd8>
   18978:	mov	r2, r7
   1897c:	mov	r1, r5
   18980:	mov	r0, r6
   18984:	bl	188ec <__assert_fail@plt+0x6f1c>
   18988:	ldr	r2, [sp, #4]
   1898c:	ldr	r3, [r4]
   18990:	cmp	r2, r3
   18994:	bne	189b0 <__assert_fail@plt+0x6fe0>
   18998:	add	sp, sp, #8
   1899c:	pop	{r4, r5, r6, r7, lr}
   189a0:	add	sp, sp, #4
   189a4:	bx	lr
   189a8:	mvn	r0, #21
   189ac:	b	18988 <__assert_fail@plt+0x6fb8>
   189b0:	bl	11640 <__stack_chk_fail@plt>
   189b4:	andeq	r3, r1, r4, lsl r5
   189b8:	andeq	r0, r0, r0, lsr #3
   189bc:	push	{r2, r3}
   189c0:	mov	r2, r1
   189c4:	push	{r4, r5, r6, r7, r8, lr}
   189c8:	mov	r7, r1
   189cc:	ldr	r4, [pc, #236]	; 18ac0 <__assert_fail@plt+0x70f0>
   189d0:	ldr	r3, [pc, #236]	; 18ac4 <__assert_fail@plt+0x70f4>
   189d4:	add	r4, pc, r4
   189d8:	ldr	r1, [pc, #232]	; 18ac8 <__assert_fail@plt+0x70f8>
   189dc:	ldr	r5, [r4, r3]
   189e0:	sub	sp, sp, #16
   189e4:	add	r1, pc, r1
   189e8:	ldr	r3, [r5]
   189ec:	ldr	r8, [sp, #40]	; 0x28
   189f0:	str	r3, [sp, #12]
   189f4:	bl	17fc4 <__assert_fail@plt+0x65f4>
   189f8:	subs	r6, r0, #0
   189fc:	beq	18ab4 <__assert_fail@plt+0x70e4>
   18a00:	ldr	r3, [pc, #196]	; 18acc <__assert_fail@plt+0x70fc>
   18a04:	add	r3, pc, r3
   18a08:	ldr	r3, [r3]
   18a0c:	tst	r3, #4
   18a10:	bne	18a5c <__assert_fail@plt+0x708c>
   18a14:	add	r3, sp, #44	; 0x2c
   18a18:	mov	r1, r8
   18a1c:	mov	r2, r3
   18a20:	mov	r0, r6
   18a24:	str	r3, [sp, #8]
   18a28:	bl	11688 <vfscanf@plt>
   18a2c:	mov	r4, r0
   18a30:	mov	r0, r6
   18a34:	bl	118b0 <fclose@plt>
   18a38:	ldr	r2, [sp, #12]
   18a3c:	ldr	r3, [r5]
   18a40:	mov	r0, r4
   18a44:	cmp	r2, r3
   18a48:	bne	18abc <__assert_fail@plt+0x70ec>
   18a4c:	add	sp, sp, #16
   18a50:	pop	{r4, r5, r6, r7, r8, lr}
   18a54:	add	sp, sp, #8
   18a58:	bx	lr
   18a5c:	ldr	r3, [pc, #108]	; 18ad0 <__assert_fail@plt+0x7100>
   18a60:	ldr	r3, [r4, r3]
   18a64:	ldr	r4, [r3]
   18a68:	bl	11760 <getpid@plt>
   18a6c:	ldr	r2, [pc, #96]	; 18ad4 <__assert_fail@plt+0x7104>
   18a70:	ldr	r3, [pc, #96]	; 18ad8 <__assert_fail@plt+0x7108>
   18a74:	add	r2, pc, r2
   18a78:	str	r2, [sp, #4]
   18a7c:	ldr	r2, [pc, #88]	; 18adc <__assert_fail@plt+0x710c>
   18a80:	add	r3, pc, r3
   18a84:	str	r3, [sp]
   18a88:	add	r2, pc, r2
   18a8c:	mov	r1, #1
   18a90:	mov	r3, r0
   18a94:	mov	r0, r4
   18a98:	bl	11898 <__fprintf_chk@plt>
   18a9c:	ldr	r0, [pc, #60]	; 18ae0 <__assert_fail@plt+0x7110>
   18aa0:	mov	r2, r7
   18aa4:	mov	r1, r8
   18aa8:	add	r0, pc, r0
   18aac:	bl	16fa4 <__assert_fail@plt+0x55d4>
   18ab0:	b	18a14 <__assert_fail@plt+0x7044>
   18ab4:	mvn	r4, #21
   18ab8:	b	18a38 <__assert_fail@plt+0x7068>
   18abc:	bl	11640 <__stack_chk_fail@plt>
   18ac0:	andeq	r3, r1, r8, ror r4
   18ac4:	andeq	r0, r0, r0, lsr #3
   18ac8:	andeq	r3, r0, r8, lsl r0
   18acc:	andeq	r3, r1, ip, lsl r6
   18ad0:	andeq	r0, r0, r4, lsr #3
   18ad4:			; <UNDEFINED> instruction: 0x00002eb0
   18ad8:	andeq	r2, r0, ip, lsl #29
   18adc:	andeq	r2, r0, ip, lsl #29
   18ae0:	andeq	r2, r0, ip, ror pc
   18ae4:	ldr	ip, [pc, #140]	; 18b78 <__assert_fail@plt+0x71a8>
   18ae8:	push	{r3}		; (str r3, [sp, #-4]!)
   18aec:	add	ip, pc, ip
   18af0:	push	{r4, r5, r6, lr}
   18af4:	mov	r3, r2
   18af8:	ldr	lr, [pc, #124]	; 18b7c <__assert_fail@plt+0x71ac>
   18afc:	mov	r2, r1
   18b00:	ldr	r1, [pc, #120]	; 18b80 <__assert_fail@plt+0x71b0>
   18b04:	ldr	r4, [ip, lr]
   18b08:	sub	sp, sp, #12
   18b0c:	add	r1, pc, r1
   18b10:	ldr	ip, [r4]
   18b14:	ldr	r5, [sp, #28]
   18b18:	str	ip, [sp, #4]
   18b1c:	bl	180a8 <__assert_fail@plt+0x66d8>
   18b20:	subs	r6, r0, #0
   18b24:	beq	18b6c <__assert_fail@plt+0x719c>
   18b28:	add	r3, sp, #32
   18b2c:	mov	r1, r5
   18b30:	mov	r2, r3
   18b34:	str	r3, [sp]
   18b38:	bl	11688 <vfscanf@plt>
   18b3c:	mov	r5, r0
   18b40:	mov	r0, r6
   18b44:	bl	118b0 <fclose@plt>
   18b48:	ldr	r2, [sp, #4]
   18b4c:	ldr	r3, [r4]
   18b50:	mov	r0, r5
   18b54:	cmp	r2, r3
   18b58:	bne	18b74 <__assert_fail@plt+0x71a4>
   18b5c:	add	sp, sp, #12
   18b60:	pop	{r4, r5, r6, lr}
   18b64:	add	sp, sp, #4
   18b68:	bx	lr
   18b6c:	mvn	r5, #21
   18b70:	b	18b48 <__assert_fail@plt+0x7178>
   18b74:	bl	11640 <__stack_chk_fail@plt>
   18b78:	andeq	r3, r1, r0, ror #6
   18b7c:	andeq	r0, r0, r0, lsr #3
   18b80:	strdeq	r2, [r0], -r0
   18b84:	ldr	r3, [pc, #124]	; 18c08 <__assert_fail@plt+0x7238>
   18b88:	ldr	ip, [pc, #124]	; 18c0c <__assert_fail@plt+0x723c>
   18b8c:	add	r3, pc, r3
   18b90:	push	{r4, r5, r6, r7, lr}
   18b94:	mov	r5, r1
   18b98:	ldr	r4, [r3, ip]
   18b9c:	mov	r1, r2
   18ba0:	ldr	r2, [pc, #104]	; 18c10 <__assert_fail@plt+0x7240>
   18ba4:	sub	sp, sp, #20
   18ba8:	ldr	ip, [r4]
   18bac:	mov	r6, #0
   18bb0:	mov	r7, #0
   18bb4:	add	r2, pc, r2
   18bb8:	mov	r3, sp
   18bbc:	strd	r6, [sp]
   18bc0:	str	ip, [sp, #12]
   18bc4:	bl	189bc <__assert_fail@plt+0x6fec>
   18bc8:	cmp	r0, #1
   18bcc:	bne	18bfc <__assert_fail@plt+0x722c>
   18bd0:	cmp	r5, #0
   18bd4:	moveq	r0, r5
   18bd8:	ldrdne	r2, [sp]
   18bdc:	movne	r0, #0
   18be0:	strdne	r2, [r5]
   18be4:	ldr	r2, [sp, #12]
   18be8:	ldr	r3, [r4]
   18bec:	cmp	r2, r3
   18bf0:	bne	18c04 <__assert_fail@plt+0x7234>
   18bf4:	add	sp, sp, #20
   18bf8:	pop	{r4, r5, r6, r7, pc}
   18bfc:	mvn	r0, #0
   18c00:	b	18be4 <__assert_fail@plt+0x7214>
   18c04:	bl	11640 <__stack_chk_fail@plt>
   18c08:	andeq	r3, r1, r0, asr #5
   18c0c:	andeq	r0, r0, r0, lsr #3
   18c10:	andeq	r2, r0, r4, lsl #29
   18c14:	push	{r2, r3}
   18c18:	ldr	r3, [pc, #116]	; 18c94 <__assert_fail@plt+0x72c4>
   18c1c:	ldr	r2, [pc, #116]	; 18c98 <__assert_fail@plt+0x72c8>
   18c20:	add	r3, pc, r3
   18c24:	push	{r4, r5, r6, lr}
   18c28:	sub	sp, sp, #8
   18c2c:	ldr	r4, [r3, r2]
   18c30:	add	ip, sp, #28
   18c34:	mov	r2, ip
   18c38:	ldr	r3, [r4]
   18c3c:	mov	r5, r1
   18c40:	ldr	r1, [sp, #24]
   18c44:	str	ip, [sp]
   18c48:	str	r3, [sp, #4]
   18c4c:	mov	r6, r0
   18c50:	bl	170cc <__assert_fail@plt+0x56fc>
   18c54:	subs	r2, r0, #0
   18c58:	beq	18c88 <__assert_fail@plt+0x72b8>
   18c5c:	mov	r1, r5
   18c60:	mov	r0, r6
   18c64:	bl	18b84 <__assert_fail@plt+0x71b4>
   18c68:	ldr	r2, [sp, #4]
   18c6c:	ldr	r3, [r4]
   18c70:	cmp	r2, r3
   18c74:	bne	18c90 <__assert_fail@plt+0x72c0>
   18c78:	add	sp, sp, #8
   18c7c:	pop	{r4, r5, r6, lr}
   18c80:	add	sp, sp, #8
   18c84:	bx	lr
   18c88:	mvn	r0, #21
   18c8c:	b	18c68 <__assert_fail@plt+0x7298>
   18c90:	bl	11640 <__stack_chk_fail@plt>
   18c94:	andeq	r3, r1, ip, lsr #4
   18c98:	andeq	r0, r0, r0, lsr #3
   18c9c:	ldr	r3, [pc, #124]	; 18d20 <__assert_fail@plt+0x7350>
   18ca0:	ldr	ip, [pc, #124]	; 18d24 <__assert_fail@plt+0x7354>
   18ca4:	add	r3, pc, r3
   18ca8:	push	{r4, r5, r6, r7, lr}
   18cac:	mov	r5, r1
   18cb0:	ldr	r4, [r3, ip]
   18cb4:	mov	r1, r2
   18cb8:	ldr	r2, [pc, #104]	; 18d28 <__assert_fail@plt+0x7358>
   18cbc:	sub	sp, sp, #20
   18cc0:	ldr	ip, [r4]
   18cc4:	mov	r6, #0
   18cc8:	mov	r7, #0
   18ccc:	add	r2, pc, r2
   18cd0:	mov	r3, sp
   18cd4:	strd	r6, [sp]
   18cd8:	str	ip, [sp, #12]
   18cdc:	bl	189bc <__assert_fail@plt+0x6fec>
   18ce0:	cmp	r0, #1
   18ce4:	bne	18d14 <__assert_fail@plt+0x7344>
   18ce8:	cmp	r5, #0
   18cec:	moveq	r0, r5
   18cf0:	ldrdne	r2, [sp]
   18cf4:	movne	r0, #0
   18cf8:	strdne	r2, [r5]
   18cfc:	ldr	r2, [sp, #12]
   18d00:	ldr	r3, [r4]
   18d04:	cmp	r2, r3
   18d08:	bne	18d1c <__assert_fail@plt+0x734c>
   18d0c:	add	sp, sp, #20
   18d10:	pop	{r4, r5, r6, r7, pc}
   18d14:	mvn	r0, #0
   18d18:	b	18cfc <__assert_fail@plt+0x732c>
   18d1c:	bl	11640 <__stack_chk_fail@plt>
   18d20:	andeq	r3, r1, r8, lsr #3
   18d24:	andeq	r0, r0, r0, lsr #3
   18d28:	andeq	r2, r0, r4, ror sp
   18d2c:	push	{r2, r3}
   18d30:	ldr	r3, [pc, #116]	; 18dac <__assert_fail@plt+0x73dc>
   18d34:	ldr	r2, [pc, #116]	; 18db0 <__assert_fail@plt+0x73e0>
   18d38:	add	r3, pc, r3
   18d3c:	push	{r4, r5, r6, lr}
   18d40:	sub	sp, sp, #8
   18d44:	ldr	r4, [r3, r2]
   18d48:	add	ip, sp, #28
   18d4c:	mov	r2, ip
   18d50:	ldr	r3, [r4]
   18d54:	mov	r5, r1
   18d58:	ldr	r1, [sp, #24]
   18d5c:	str	ip, [sp]
   18d60:	str	r3, [sp, #4]
   18d64:	mov	r6, r0
   18d68:	bl	170cc <__assert_fail@plt+0x56fc>
   18d6c:	subs	r2, r0, #0
   18d70:	beq	18da0 <__assert_fail@plt+0x73d0>
   18d74:	mov	r1, r5
   18d78:	mov	r0, r6
   18d7c:	bl	18c9c <__assert_fail@plt+0x72cc>
   18d80:	ldr	r2, [sp, #4]
   18d84:	ldr	r3, [r4]
   18d88:	cmp	r2, r3
   18d8c:	bne	18da8 <__assert_fail@plt+0x73d8>
   18d90:	add	sp, sp, #8
   18d94:	pop	{r4, r5, r6, lr}
   18d98:	add	sp, sp, #8
   18d9c:	bx	lr
   18da0:	mvn	r0, #21
   18da4:	b	18d80 <__assert_fail@plt+0x73b0>
   18da8:	bl	11640 <__stack_chk_fail@plt>
   18dac:	andeq	r3, r1, r4, lsl r1
   18db0:	andeq	r0, r0, r0, lsr #3
   18db4:	ldr	ip, [pc, #120]	; 18e34 <__assert_fail@plt+0x7464>
   18db8:	ldr	r3, [pc, #120]	; 18e38 <__assert_fail@plt+0x7468>
   18dbc:	add	ip, pc, ip
   18dc0:	push	{r4, r5, r6, lr}
   18dc4:	mov	r6, r1
   18dc8:	ldr	r5, [ip, r3]
   18dcc:	mov	r1, r2
   18dd0:	ldr	r2, [pc, #100]	; 18e3c <__assert_fail@plt+0x746c>
   18dd4:	sub	sp, sp, #8
   18dd8:	ldr	lr, [r5]
   18ddc:	mov	r4, #0
   18de0:	mov	r3, sp
   18de4:	add	r2, pc, r2
   18de8:	str	lr, [sp, #4]
   18dec:	str	r4, [sp]
   18df0:	bl	189bc <__assert_fail@plt+0x6fec>
   18df4:	cmp	r0, #1
   18df8:	bne	18e28 <__assert_fail@plt+0x7458>
   18dfc:	cmp	r6, r4
   18e00:	moveq	r0, r6
   18e04:	ldrne	r3, [sp]
   18e08:	movne	r0, r4
   18e0c:	strne	r3, [r6]
   18e10:	ldr	r2, [sp, #4]
   18e14:	ldr	r3, [r5]
   18e18:	cmp	r2, r3
   18e1c:	bne	18e30 <__assert_fail@plt+0x7460>
   18e20:	add	sp, sp, #8
   18e24:	pop	{r4, r5, r6, pc}
   18e28:	mvn	r0, #0
   18e2c:	b	18e10 <__assert_fail@plt+0x7440>
   18e30:	bl	11640 <__stack_chk_fail@plt>
   18e34:	muleq	r1, r0, r0
   18e38:	andeq	r0, r0, r0, lsr #3
   18e3c:	andeq	r2, r0, r4, ror #24
   18e40:	push	{r2, r3}
   18e44:	ldr	r3, [pc, #116]	; 18ec0 <__assert_fail@plt+0x74f0>
   18e48:	ldr	r2, [pc, #116]	; 18ec4 <__assert_fail@plt+0x74f4>
   18e4c:	add	r3, pc, r3
   18e50:	push	{r4, r5, r6, lr}
   18e54:	sub	sp, sp, #8
   18e58:	ldr	r4, [r3, r2]
   18e5c:	add	ip, sp, #28
   18e60:	mov	r2, ip
   18e64:	ldr	r3, [r4]
   18e68:	mov	r5, r1
   18e6c:	ldr	r1, [sp, #24]
   18e70:	str	ip, [sp]
   18e74:	str	r3, [sp, #4]
   18e78:	mov	r6, r0
   18e7c:	bl	170cc <__assert_fail@plt+0x56fc>
   18e80:	subs	r2, r0, #0
   18e84:	beq	18eb4 <__assert_fail@plt+0x74e4>
   18e88:	mov	r1, r5
   18e8c:	mov	r0, r6
   18e90:	bl	18db4 <__assert_fail@plt+0x73e4>
   18e94:	ldr	r2, [sp, #4]
   18e98:	ldr	r3, [r4]
   18e9c:	cmp	r2, r3
   18ea0:	bne	18ebc <__assert_fail@plt+0x74ec>
   18ea4:	add	sp, sp, #8
   18ea8:	pop	{r4, r5, r6, lr}
   18eac:	add	sp, sp, #8
   18eb0:	bx	lr
   18eb4:	mvn	r0, #21
   18eb8:	b	18e94 <__assert_fail@plt+0x74c4>
   18ebc:	bl	11640 <__stack_chk_fail@plt>
   18ec0:	andeq	r3, r1, r0
   18ec4:	andeq	r0, r0, r0, lsr #3
   18ec8:	ldr	ip, [pc, #112]	; 18f40 <__assert_fail@plt+0x7570>
   18ecc:	ldr	r3, [pc, #112]	; 18f44 <__assert_fail@plt+0x7574>
   18ed0:	add	ip, pc, ip
   18ed4:	push	{r4, r5, lr}
   18ed8:	mov	r5, r1
   18edc:	ldr	r4, [ip, r3]
   18ee0:	mov	r1, r2
   18ee4:	ldr	r2, [pc, #92]	; 18f48 <__assert_fail@plt+0x7578>
   18ee8:	sub	sp, sp, #12
   18eec:	ldr	lr, [r4]
   18ef0:	mov	r3, sp
   18ef4:	add	r2, pc, r2
   18ef8:	str	lr, [sp, #4]
   18efc:	bl	189bc <__assert_fail@plt+0x6fec>
   18f00:	cmp	r0, #1
   18f04:	bne	18f34 <__assert_fail@plt+0x7564>
   18f08:	cmp	r5, #0
   18f0c:	moveq	r0, r5
   18f10:	ldrne	r3, [sp]
   18f14:	movne	r0, #0
   18f18:	strne	r3, [r5]
   18f1c:	ldr	r2, [sp, #4]
   18f20:	ldr	r3, [r4]
   18f24:	cmp	r2, r3
   18f28:	bne	18f3c <__assert_fail@plt+0x756c>
   18f2c:	add	sp, sp, #12
   18f30:	pop	{r4, r5, pc}
   18f34:	mvn	r0, #0
   18f38:	b	18f1c <__assert_fail@plt+0x754c>
   18f3c:	bl	11640 <__stack_chk_fail@plt>
   18f40:	andeq	r2, r1, ip, ror pc
   18f44:	andeq	r0, r0, r0, lsr #3
   18f48:	andeq	r2, r0, r8, asr fp
   18f4c:	push	{r2, r3}
   18f50:	ldr	r3, [pc, #116]	; 18fcc <__assert_fail@plt+0x75fc>
   18f54:	ldr	r2, [pc, #116]	; 18fd0 <__assert_fail@plt+0x7600>
   18f58:	add	r3, pc, r3
   18f5c:	push	{r4, r5, r6, lr}
   18f60:	sub	sp, sp, #8
   18f64:	ldr	r4, [r3, r2]
   18f68:	add	ip, sp, #28
   18f6c:	mov	r2, ip
   18f70:	ldr	r3, [r4]
   18f74:	mov	r5, r1
   18f78:	ldr	r1, [sp, #24]
   18f7c:	str	ip, [sp]
   18f80:	str	r3, [sp, #4]
   18f84:	mov	r6, r0
   18f88:	bl	170cc <__assert_fail@plt+0x56fc>
   18f8c:	subs	r2, r0, #0
   18f90:	beq	18fc0 <__assert_fail@plt+0x75f0>
   18f94:	mov	r1, r5
   18f98:	mov	r0, r6
   18f9c:	bl	18ec8 <__assert_fail@plt+0x74f8>
   18fa0:	ldr	r2, [sp, #4]
   18fa4:	ldr	r3, [r4]
   18fa8:	cmp	r2, r3
   18fac:	bne	18fc8 <__assert_fail@plt+0x75f8>
   18fb0:	add	sp, sp, #8
   18fb4:	pop	{r4, r5, r6, lr}
   18fb8:	add	sp, sp, #8
   18fbc:	bx	lr
   18fc0:	mvn	r0, #21
   18fc4:	b	18fa0 <__assert_fail@plt+0x75d0>
   18fc8:	bl	11640 <__stack_chk_fail@plt>
   18fcc:	strdeq	r2, [r1], -r4
   18fd0:	andeq	r0, r0, r0, lsr #3
   18fd4:	ldr	ip, [pc, #168]	; 19084 <__assert_fail@plt+0x76b4>
   18fd8:	ldr	r3, [pc, #168]	; 19088 <__assert_fail@plt+0x76b8>
   18fdc:	add	ip, pc, ip
   18fe0:	push	{r4, r5, lr}
   18fe4:	sub	sp, sp, #28
   18fe8:	ldr	r5, [ip, r3]
   18fec:	mov	r4, r1
   18ff0:	add	r3, sp, #16
   18ff4:	mov	r1, r2
   18ff8:	ldr	r2, [pc, #140]	; 1908c <__assert_fail@plt+0x76bc>
   18ffc:	str	r3, [sp]
   19000:	ldr	lr, [r5]
   19004:	add	r3, sp, #12
   19008:	add	r2, pc, r2
   1900c:	str	lr, [sp, #20]
   19010:	bl	189bc <__assert_fail@plt+0x6fec>
   19014:	cmp	r0, #2
   19018:	bne	19078 <__assert_fail@plt+0x76a8>
   1901c:	cmp	r4, #0
   19020:	moveq	r0, r4
   19024:	beq	19060 <__assert_fail@plt+0x7690>
   19028:	ldr	r0, [sp, #16]
   1902c:	ldr	r3, [sp, #12]
   19030:	ldr	ip, [pc, #88]	; 19090 <__assert_fail@plt+0x76c0>
   19034:	ldr	r2, [pc, #88]	; 19094 <__assert_fail@plt+0x76c4>
   19038:	uxtb	r1, r0
   1903c:	and	ip, ip, r3, lsl #8
   19040:	bic	r3, r3, #4080	; 0xff0
   19044:	and	r2, r2, r0, lsl #12
   19048:	orr	r1, r1, ip
   1904c:	bic	r3, r3, #15
   19050:	orr	r3, r3, r0, lsr #20
   19054:	orr	r2, r2, r1
   19058:	mov	r0, #0
   1905c:	strd	r2, [r4]
   19060:	ldr	r2, [sp, #20]
   19064:	ldr	r3, [r5]
   19068:	cmp	r2, r3
   1906c:	bne	19080 <__assert_fail@plt+0x76b0>
   19070:	add	sp, sp, #28
   19074:	pop	{r4, r5, pc}
   19078:	mvn	r0, #0
   1907c:	b	19060 <__assert_fail@plt+0x7690>
   19080:	bl	11640 <__stack_chk_fail@plt>
   19084:	andeq	r2, r1, r0, ror lr
   19088:	andeq	r0, r0, r0, lsr #3
   1908c:	andeq	r2, r0, r8, asr #20
   19090:	andeq	pc, pc, r0, lsl #30
   19094:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   19098:	push	{r2, r3}
   1909c:	ldr	r3, [pc, #116]	; 19118 <__assert_fail@plt+0x7748>
   190a0:	ldr	r2, [pc, #116]	; 1911c <__assert_fail@plt+0x774c>
   190a4:	add	r3, pc, r3
   190a8:	push	{r4, r5, r6, lr}
   190ac:	sub	sp, sp, #8
   190b0:	ldr	r4, [r3, r2]
   190b4:	add	ip, sp, #28
   190b8:	mov	r2, ip
   190bc:	ldr	r3, [r4]
   190c0:	mov	r5, r1
   190c4:	ldr	r1, [sp, #24]
   190c8:	str	ip, [sp]
   190cc:	str	r3, [sp, #4]
   190d0:	mov	r6, r0
   190d4:	bl	170cc <__assert_fail@plt+0x56fc>
   190d8:	subs	r2, r0, #0
   190dc:	beq	1910c <__assert_fail@plt+0x773c>
   190e0:	mov	r1, r5
   190e4:	mov	r0, r6
   190e8:	bl	18fd4 <__assert_fail@plt+0x7604>
   190ec:	ldr	r2, [sp, #4]
   190f0:	ldr	r3, [r4]
   190f4:	cmp	r2, r3
   190f8:	bne	19114 <__assert_fail@plt+0x7744>
   190fc:	add	sp, sp, #8
   19100:	pop	{r4, r5, r6, lr}
   19104:	add	sp, sp, #8
   19108:	bx	lr
   1910c:	mvn	r0, #21
   19110:	b	190ec <__assert_fail@plt+0x771c>
   19114:	bl	11640 <__stack_chk_fail@plt>
   19118:	andeq	r2, r1, r8, lsr #27
   1911c:	andeq	r0, r0, r0, lsr #3
   19120:	ldr	r3, [pc, #284]	; 19244 <__assert_fail@plt+0x7874>
   19124:	ldr	ip, [pc, #284]	; 19248 <__assert_fail@plt+0x7878>
   19128:	add	r3, pc, r3
   1912c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19130:	sub	sp, sp, #20
   19134:	ldr	r8, [r3, ip]
   19138:	mov	r6, r1
   1913c:	ldr	r1, [pc, #264]	; 1924c <__assert_fail@plt+0x787c>
   19140:	ldr	r3, [r8]
   19144:	str	r3, [sp, #12]
   19148:	bl	17ca4 <__assert_fail@plt+0x62d4>
   1914c:	mov	r7, r0
   19150:	bl	117d8 <__errno_location@plt>
   19154:	cmp	r7, #0
   19158:	mov	r5, r0
   1915c:	blt	1922c <__assert_fail@plt+0x785c>
   19160:	mov	r0, r6
   19164:	bl	1179c <strlen@plt>
   19168:	subs	r4, r0, #0
   1916c:	beq	191e4 <__assert_fail@plt+0x7814>
   19170:	mov	r9, #0
   19174:	add	sl, sp, #4
   19178:	str	r9, [r5]
   1917c:	mov	r2, r4
   19180:	mov	r1, r6
   19184:	mov	r0, r7
   19188:	bl	11880 <write@plt>
   1918c:	cmp	r0, #0
   19190:	ble	19210 <__assert_fail@plt+0x7840>
   19194:	subs	r4, r4, r0
   19198:	ldr	fp, [r5]
   1919c:	beq	191c8 <__assert_fail@plt+0x77f8>
   191a0:	cmp	fp, #11
   191a4:	add	r6, r6, r0
   191a8:	bne	19178 <__assert_fail@plt+0x77a8>
   191ac:	ldr	r3, [pc, #156]	; 19250 <__assert_fail@plt+0x7880>
   191b0:	mov	r1, #0
   191b4:	mov	r0, sl
   191b8:	str	r9, [sp, #4]
   191bc:	str	r3, [sp, #8]
   191c0:	bl	115b0 <nanosleep@plt>
   191c4:	b	19178 <__assert_fail@plt+0x77a8>
   191c8:	cmp	fp, #11
   191cc:	bne	191e8 <__assert_fail@plt+0x7818>
   191d0:	ldr	r3, [pc, #120]	; 19250 <__assert_fail@plt+0x7880>
   191d4:	mov	r1, r4
   191d8:	add	r0, sp, #4
   191dc:	stmib	sp, {r1, r3}
   191e0:	bl	115b0 <nanosleep@plt>
   191e4:	ldr	fp, [r5]
   191e8:	mov	r0, r7
   191ec:	bl	11994 <close@plt>
   191f0:	str	fp, [r5]
   191f4:	ldr	r2, [sp, #12]
   191f8:	ldr	r3, [r8]
   191fc:	mov	r0, r4
   19200:	cmp	r2, r3
   19204:	bne	19240 <__assert_fail@plt+0x7870>
   19208:	add	sp, sp, #20
   1920c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19210:	ldr	fp, [r5]
   19214:	cmp	fp, #4
   19218:	cmpne	fp, #11
   1921c:	bne	19238 <__assert_fail@plt+0x7868>
   19220:	cmp	fp, #11
   19224:	bne	19178 <__assert_fail@plt+0x77a8>
   19228:	b	191ac <__assert_fail@plt+0x77dc>
   1922c:	ldr	r4, [r0]
   19230:	rsb	r4, r4, #0
   19234:	b	191f4 <__assert_fail@plt+0x7824>
   19238:	mvn	r4, #0
   1923c:	b	191e8 <__assert_fail@plt+0x7818>
   19240:	bl	11640 <__stack_chk_fail@plt>
   19244:	andeq	r2, r1, r4, lsr #26
   19248:	andeq	r0, r0, r0, lsr #3
   1924c:	andeq	r0, r8, r1
   19250:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   19254:	push	{r2, r3}
   19258:	ldr	r3, [pc, #116]	; 192d4 <__assert_fail@plt+0x7904>
   1925c:	ldr	r2, [pc, #116]	; 192d8 <__assert_fail@plt+0x7908>
   19260:	add	r3, pc, r3
   19264:	push	{r4, r5, r6, lr}
   19268:	sub	sp, sp, #8
   1926c:	ldr	r4, [r3, r2]
   19270:	add	ip, sp, #28
   19274:	mov	r2, ip
   19278:	ldr	r3, [r4]
   1927c:	mov	r5, r1
   19280:	ldr	r1, [sp, #24]
   19284:	str	ip, [sp]
   19288:	str	r3, [sp, #4]
   1928c:	mov	r6, r0
   19290:	bl	170cc <__assert_fail@plt+0x56fc>
   19294:	subs	r2, r0, #0
   19298:	beq	192c8 <__assert_fail@plt+0x78f8>
   1929c:	mov	r1, r5
   192a0:	mov	r0, r6
   192a4:	bl	19120 <__assert_fail@plt+0x7750>
   192a8:	ldr	r2, [sp, #4]
   192ac:	ldr	r3, [r4]
   192b0:	cmp	r2, r3
   192b4:	bne	192d0 <__assert_fail@plt+0x7900>
   192b8:	add	sp, sp, #8
   192bc:	pop	{r4, r5, r6, lr}
   192c0:	add	sp, sp, #8
   192c4:	bx	lr
   192c8:	mvn	r0, #21
   192cc:	b	192a8 <__assert_fail@plt+0x78d8>
   192d0:	bl	11640 <__stack_chk_fail@plt>
   192d4:	andeq	r2, r1, ip, ror #23
   192d8:	andeq	r0, r0, r0, lsr #3
   192dc:	ldr	ip, [pc, #328]	; 1942c <__assert_fail@plt+0x7a5c>
   192e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192e4:	add	ip, pc, ip
   192e8:	ldr	lr, [pc, #320]	; 19430 <__assert_fail@plt+0x7a60>
   192ec:	sub	sp, sp, #60	; 0x3c
   192f0:	mov	r9, r3
   192f4:	ldr	r7, [ip, lr]
   192f8:	mov	r3, ip
   192fc:	ldr	r1, [pc, #304]	; 19434 <__assert_fail@plt+0x7a64>
   19300:	ldr	r3, [r7]
   19304:	mov	r8, r2
   19308:	ldr	r2, [sp, #96]	; 0x60
   1930c:	str	r3, [sp, #52]	; 0x34
   19310:	bl	17ca4 <__assert_fail@plt+0x62d4>
   19314:	mov	r6, r0
   19318:	bl	117d8 <__errno_location@plt>
   1931c:	cmp	r6, #0
   19320:	mov	r5, r0
   19324:	blt	19414 <__assert_fail@plt+0x7a44>
   19328:	ldr	r2, [pc, #264]	; 19438 <__assert_fail@plt+0x7a68>
   1932c:	mov	r3, #21
   19330:	add	r2, pc, r2
   19334:	strd	r8, [sp, #8]
   19338:	str	r2, [sp]
   1933c:	add	r0, sp, #28
   19340:	mov	r1, r3
   19344:	mov	r2, #1
   19348:	mov	r8, r0
   1934c:	bl	119b8 <__snprintf_chk@plt>
   19350:	mov	r9, #0
   19354:	add	sl, sp, #20
   19358:	mov	r4, r0
   1935c:	str	r9, [r5]
   19360:	mov	r2, r4
   19364:	mov	r1, r8
   19368:	mov	r0, r6
   1936c:	bl	11880 <write@plt>
   19370:	cmp	r0, #0
   19374:	ble	193ac <__assert_fail@plt+0x79dc>
   19378:	subs	r4, r4, r0
   1937c:	ldr	fp, [r5]
   19380:	beq	193c8 <__assert_fail@plt+0x79f8>
   19384:	cmp	fp, #11
   19388:	add	r8, r8, r0
   1938c:	bne	1935c <__assert_fail@plt+0x798c>
   19390:	ldr	r3, [pc, #164]	; 1943c <__assert_fail@plt+0x7a6c>
   19394:	mov	r1, #0
   19398:	mov	r0, sl
   1939c:	str	r9, [sp, #20]
   193a0:	str	r3, [sp, #24]
   193a4:	bl	115b0 <nanosleep@plt>
   193a8:	b	1935c <__assert_fail@plt+0x798c>
   193ac:	ldr	fp, [r5]
   193b0:	cmp	fp, #4
   193b4:	cmpne	fp, #11
   193b8:	bne	19420 <__assert_fail@plt+0x7a50>
   193bc:	cmp	fp, #11
   193c0:	bne	1935c <__assert_fail@plt+0x798c>
   193c4:	b	19390 <__assert_fail@plt+0x79c0>
   193c8:	cmp	fp, #11
   193cc:	bne	193ec <__assert_fail@plt+0x7a1c>
   193d0:	ldr	r3, [pc, #100]	; 1943c <__assert_fail@plt+0x7a6c>
   193d4:	mov	r1, r4
   193d8:	add	r0, sp, #20
   193dc:	str	r4, [sp, #20]
   193e0:	str	r3, [sp, #24]
   193e4:	bl	115b0 <nanosleep@plt>
   193e8:	ldr	fp, [r5]
   193ec:	mov	r0, r6
   193f0:	bl	11994 <close@plt>
   193f4:	str	fp, [r5]
   193f8:	ldr	r2, [sp, #52]	; 0x34
   193fc:	ldr	r3, [r7]
   19400:	mov	r0, r4
   19404:	cmp	r2, r3
   19408:	bne	19428 <__assert_fail@plt+0x7a58>
   1940c:	add	sp, sp, #60	; 0x3c
   19410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19414:	ldr	r4, [r0]
   19418:	rsb	r4, r4, #0
   1941c:	b	193f8 <__assert_fail@plt+0x7a28>
   19420:	mvn	r4, #0
   19424:	b	193ec <__assert_fail@plt+0x7a1c>
   19428:	bl	11640 <__stack_chk_fail@plt>
   1942c:	andeq	r2, r1, r8, ror #22
   19430:	andeq	r0, r0, r0, lsr #3
   19434:	andeq	r0, r8, r1
   19438:	andeq	r2, r0, r8, lsl #14
   1943c:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   19440:	ldr	ip, [pc, #328]	; 19590 <__assert_fail@plt+0x7bc0>
   19444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19448:	add	ip, pc, ip
   1944c:	ldr	lr, [pc, #320]	; 19594 <__assert_fail@plt+0x7bc4>
   19450:	sub	sp, sp, #76	; 0x4c
   19454:	mov	r9, r3
   19458:	ldr	r7, [ip, lr]
   1945c:	mov	r3, ip
   19460:	ldr	r1, [pc, #304]	; 19598 <__assert_fail@plt+0x7bc8>
   19464:	ldr	r3, [r7]
   19468:	mov	r8, r2
   1946c:	ldr	r2, [sp, #112]	; 0x70
   19470:	str	r3, [sp, #68]	; 0x44
   19474:	bl	17ca4 <__assert_fail@plt+0x62d4>
   19478:	mov	r6, r0
   1947c:	bl	117d8 <__errno_location@plt>
   19480:	cmp	r6, #0
   19484:	mov	r5, r0
   19488:	blt	19578 <__assert_fail@plt+0x7ba8>
   1948c:	ldr	r2, [pc, #264]	; 1959c <__assert_fail@plt+0x7bcc>
   19490:	mov	r3, #37	; 0x25
   19494:	add	r2, pc, r2
   19498:	strd	r8, [sp, #8]
   1949c:	str	r2, [sp]
   194a0:	add	r0, sp, #28
   194a4:	mov	r1, r3
   194a8:	mov	r2, #1
   194ac:	mov	r8, r0
   194b0:	bl	119b8 <__snprintf_chk@plt>
   194b4:	mov	r9, #0
   194b8:	add	sl, sp, #20
   194bc:	mov	r4, r0
   194c0:	str	r9, [r5]
   194c4:	mov	r2, r4
   194c8:	mov	r1, r8
   194cc:	mov	r0, r6
   194d0:	bl	11880 <write@plt>
   194d4:	cmp	r0, #0
   194d8:	ble	19510 <__assert_fail@plt+0x7b40>
   194dc:	subs	r4, r4, r0
   194e0:	ldr	fp, [r5]
   194e4:	beq	1952c <__assert_fail@plt+0x7b5c>
   194e8:	cmp	fp, #11
   194ec:	add	r8, r8, r0
   194f0:	bne	194c0 <__assert_fail@plt+0x7af0>
   194f4:	ldr	r3, [pc, #164]	; 195a0 <__assert_fail@plt+0x7bd0>
   194f8:	mov	r1, #0
   194fc:	mov	r0, sl
   19500:	str	r9, [sp, #20]
   19504:	str	r3, [sp, #24]
   19508:	bl	115b0 <nanosleep@plt>
   1950c:	b	194c0 <__assert_fail@plt+0x7af0>
   19510:	ldr	fp, [r5]
   19514:	cmp	fp, #4
   19518:	cmpne	fp, #11
   1951c:	bne	19584 <__assert_fail@plt+0x7bb4>
   19520:	cmp	fp, #11
   19524:	bne	194c0 <__assert_fail@plt+0x7af0>
   19528:	b	194f4 <__assert_fail@plt+0x7b24>
   1952c:	cmp	fp, #11
   19530:	bne	19550 <__assert_fail@plt+0x7b80>
   19534:	ldr	r3, [pc, #100]	; 195a0 <__assert_fail@plt+0x7bd0>
   19538:	mov	r1, r4
   1953c:	add	r0, sp, #20
   19540:	str	r4, [sp, #20]
   19544:	str	r3, [sp, #24]
   19548:	bl	115b0 <nanosleep@plt>
   1954c:	ldr	fp, [r5]
   19550:	mov	r0, r6
   19554:	bl	11994 <close@plt>
   19558:	str	fp, [r5]
   1955c:	ldr	r2, [sp, #68]	; 0x44
   19560:	ldr	r3, [r7]
   19564:	mov	r0, r4
   19568:	cmp	r2, r3
   1956c:	bne	1958c <__assert_fail@plt+0x7bbc>
   19570:	add	sp, sp, #76	; 0x4c
   19574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19578:	ldr	r4, [r0]
   1957c:	rsb	r4, r4, #0
   19580:	b	1955c <__assert_fail@plt+0x7b8c>
   19584:	mvn	r4, #0
   19588:	b	19550 <__assert_fail@plt+0x7b80>
   1958c:	bl	11640 <__stack_chk_fail@plt>
   19590:	andeq	r2, r1, r4, lsl #20
   19594:	andeq	r0, r0, r0, lsr #3
   19598:	andeq	r0, r8, r1
   1959c:	andeq	r2, r0, ip, lsr #11
   195a0:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   195a4:	ldr	r1, [pc, #124]	; 19628 <__assert_fail@plt+0x7c58>
   195a8:	ldr	ip, [pc, #124]	; 1962c <__assert_fail@plt+0x7c5c>
   195ac:	add	r1, pc, r1
   195b0:	push	{r4, r5, r6, r7, lr}
   195b4:	sub	sp, sp, #20
   195b8:	ldr	r6, [r1, ip]
   195bc:	add	lr, sp, #44	; 0x2c
   195c0:	mov	r5, r3
   195c4:	mov	r3, r1
   195c8:	ldr	r3, [r6]
   195cc:	mov	r4, r2
   195d0:	ldr	r1, [sp, #40]	; 0x28
   195d4:	mov	r2, lr
   195d8:	str	lr, [sp, #8]
   195dc:	str	r3, [sp, #12]
   195e0:	mov	r7, r0
   195e4:	bl	170cc <__assert_fail@plt+0x56fc>
   195e8:	cmp	r0, #0
   195ec:	beq	1961c <__assert_fail@plt+0x7c4c>
   195f0:	str	r0, [sp]
   195f4:	mov	r2, r4
   195f8:	mov	r3, r5
   195fc:	mov	r0, r7
   19600:	bl	19440 <__assert_fail@plt+0x7a70>
   19604:	ldr	r2, [sp, #12]
   19608:	ldr	r3, [r6]
   1960c:	cmp	r2, r3
   19610:	bne	19624 <__assert_fail@plt+0x7c54>
   19614:	add	sp, sp, #20
   19618:	pop	{r4, r5, r6, r7, pc}
   1961c:	mvn	r0, #21
   19620:	b	19604 <__assert_fail@plt+0x7c34>
   19624:	bl	11640 <__stack_chk_fail@plt>
   19628:	andeq	r2, r1, r0, lsr #17
   1962c:	andeq	r0, r0, r0, lsr #3
   19630:	push	{r4, r5, r6, r7, r8, lr}
   19634:	bl	18288 <__assert_fail@plt+0x68b8>
   19638:	subs	r6, r0, #0
   1963c:	moveq	r5, r6
   19640:	beq	196a0 <__assert_fail@plt+0x7cd0>
   19644:	ldr	r8, [pc, #92]	; 196a8 <__assert_fail@plt+0x7cd8>
   19648:	ldr	r7, [pc, #92]	; 196ac <__assert_fail@plt+0x7cdc>
   1964c:	mov	r5, #0
   19650:	add	r8, pc, r8
   19654:	add	r7, pc, r7
   19658:	mov	r0, r6
   1965c:	bl	11928 <readdir64@plt>
   19660:	mov	r1, r8
   19664:	cmp	r0, #0
   19668:	add	r4, r0, #19
   1966c:	mov	r0, r4
   19670:	beq	19698 <__assert_fail@plt+0x7cc8>
   19674:	bl	11544 <strcmp@plt>
   19678:	mov	r1, r7
   1967c:	cmp	r0, #0
   19680:	mov	r0, r4
   19684:	beq	19658 <__assert_fail@plt+0x7c88>
   19688:	bl	11544 <strcmp@plt>
   1968c:	cmp	r0, #0
   19690:	addne	r5, r5, #1
   19694:	b	19658 <__assert_fail@plt+0x7c88>
   19698:	mov	r0, r6
   1969c:	bl	119a0 <closedir@plt>
   196a0:	mov	r0, r5
   196a4:	pop	{r4, r5, r6, r7, r8, pc}
   196a8:	andeq	r2, r0, r4, lsl r2
   196ac:	andeq	r2, r0, r4, lsl #8
   196b0:	push	{r1, r2, r3}
   196b4:	ldr	r3, [pc, #104]	; 19724 <__assert_fail@plt+0x7d54>
   196b8:	ldr	r1, [pc, #104]	; 19728 <__assert_fail@plt+0x7d58>
   196bc:	add	r3, pc, r3
   196c0:	push	{r4, r5, lr}
   196c4:	sub	sp, sp, #8
   196c8:	ldr	r4, [r3, r1]
   196cc:	add	ip, sp, #24
   196d0:	ldr	r1, [sp, #20]
   196d4:	ldr	r3, [r4]
   196d8:	mov	r2, ip
   196dc:	str	ip, [sp]
   196e0:	mov	r5, r0
   196e4:	str	r3, [sp, #4]
   196e8:	bl	170cc <__assert_fail@plt+0x56fc>
   196ec:	subs	r1, r0, #0
   196f0:	moveq	r0, r1
   196f4:	beq	19700 <__assert_fail@plt+0x7d30>
   196f8:	mov	r0, r5
   196fc:	bl	19630 <__assert_fail@plt+0x7c60>
   19700:	ldr	r2, [sp, #4]
   19704:	ldr	r3, [r4]
   19708:	cmp	r2, r3
   1970c:	bne	19720 <__assert_fail@plt+0x7d50>
   19710:	add	sp, sp, #8
   19714:	pop	{r4, r5, lr}
   19718:	add	sp, sp, #12
   1971c:	bx	lr
   19720:	bl	11640 <__stack_chk_fail@plt>
   19724:	muleq	r1, r0, r7
   19728:	andeq	r0, r0, r0, lsr #3
   1972c:	ldr	r3, [pc, #184]	; 197ec <__assert_fail@plt+0x7e1c>
   19730:	push	{r4, r5, r6, lr}
   19734:	add	r3, pc, r3
   19738:	ldr	lr, [pc, #176]	; 197f0 <__assert_fail@plt+0x7e20>
   1973c:	sub	sp, sp, #4096	; 0x1000
   19740:	sub	sp, sp, #24
   19744:	ldr	r5, [r3, lr]
   19748:	mov	r6, r2
   1974c:	add	r2, sp, #4096	; 0x1000
   19750:	add	r2, r2, #20
   19754:	ldr	r3, [r5]
   19758:	subs	ip, r1, #0
   1975c:	str	r3, [r2]
   19760:	beq	197e0 <__assert_fail@plt+0x7e10>
   19764:	cmp	r0, #0
   19768:	beq	197d0 <__assert_fail@plt+0x7e00>
   1976c:	ldrsb	r3, [ip]
   19770:	ldr	r2, [pc, #124]	; 197f4 <__assert_fail@plt+0x7e24>
   19774:	add	r4, sp, #20
   19778:	cmp	r3, #47	; 0x2f
   1977c:	addeq	ip, ip, #1
   19780:	add	r2, pc, r2
   19784:	mov	r3, #4096	; 0x1000
   19788:	stmib	sp, {r0, ip}
   1978c:	str	r2, [sp]
   19790:	mov	r1, r3
   19794:	mov	r0, r4
   19798:	mov	r2, #1
   1979c:	bl	119b8 <__snprintf_chk@plt>
   197a0:	mov	r1, r6
   197a4:	mov	r0, r4
   197a8:	bl	1194c <fopen64@plt>
   197ac:	add	r3, sp, #4096	; 0x1000
   197b0:	add	r3, r3, #20
   197b4:	ldr	r2, [r3]
   197b8:	ldr	r3, [r5]
   197bc:	cmp	r2, r3
   197c0:	bne	197e8 <__assert_fail@plt+0x7e18>
   197c4:	add	sp, sp, #4096	; 0x1000
   197c8:	add	sp, sp, #24
   197cc:	pop	{r4, r5, r6, pc}
   197d0:	mov	r1, r6
   197d4:	mov	r0, ip
   197d8:	bl	1194c <fopen64@plt>
   197dc:	b	197ac <__assert_fail@plt+0x7ddc>
   197e0:	mov	r0, ip
   197e4:	b	197ac <__assert_fail@plt+0x7ddc>
   197e8:	bl	11640 <__stack_chk_fail@plt>
   197ec:	andeq	r2, r1, r8, lsl r7
   197f0:	andeq	r0, r0, r0, lsr #3
   197f4:	andeq	r2, r0, r8, lsr r1
   197f8:	push	{r3}		; (str r3, [sp, #-4]!)
   197fc:	ldr	r3, [pc, #88]	; 1985c <__assert_fail@plt+0x7e8c>
   19800:	ldr	ip, [pc, #88]	; 19860 <__assert_fail@plt+0x7e90>
   19804:	add	r3, pc, r3
   19808:	push	{r4, lr}
   1980c:	sub	sp, sp, #20
   19810:	ldr	r4, [r3, ip]
   19814:	ldr	lr, [sp, #28]
   19818:	add	ip, sp, #32
   1981c:	str	lr, [sp]
   19820:	ldr	r3, [r4]
   19824:	str	ip, [sp, #4]
   19828:	str	r3, [sp, #12]
   1982c:	mov	r3, #0
   19830:	str	ip, [sp, #8]
   19834:	bl	180dc <__assert_fail@plt+0x670c>
   19838:	ldr	r2, [sp, #12]
   1983c:	ldr	r3, [r4]
   19840:	cmp	r2, r3
   19844:	bne	19858 <__assert_fail@plt+0x7e88>
   19848:	add	sp, sp, #20
   1984c:	pop	{r4, lr}
   19850:	add	sp, sp, #4
   19854:	bx	lr
   19858:	bl	11640 <__stack_chk_fail@plt>
   1985c:	andeq	r2, r1, r8, asr #12
   19860:	andeq	r0, r0, r0, lsr #3
   19864:	push	{r3}		; (str r3, [sp, #-4]!)
   19868:	ldr	r3, [pc, #88]	; 198c8 <__assert_fail@plt+0x7ef8>
   1986c:	ldr	ip, [pc, #88]	; 198cc <__assert_fail@plt+0x7efc>
   19870:	add	r3, pc, r3
   19874:	push	{r4, lr}
   19878:	sub	sp, sp, #20
   1987c:	ldr	r4, [r3, ip]
   19880:	ldr	lr, [sp, #28]
   19884:	add	ip, sp, #32
   19888:	str	lr, [sp]
   1988c:	ldr	r3, [r4]
   19890:	str	ip, [sp, #4]
   19894:	str	r3, [sp, #12]
   19898:	mov	r3, #1
   1989c:	str	ip, [sp, #8]
   198a0:	bl	180dc <__assert_fail@plt+0x670c>
   198a4:	ldr	r2, [sp, #12]
   198a8:	ldr	r3, [r4]
   198ac:	cmp	r2, r3
   198b0:	bne	198c4 <__assert_fail@plt+0x7ef4>
   198b4:	add	sp, sp, #20
   198b8:	pop	{r4, lr}
   198bc:	add	sp, sp, #4
   198c0:	bx	lr
   198c4:	bl	11640 <__stack_chk_fail@plt>
   198c8:	ldrdeq	r2, [r1], -ip
   198cc:	andeq	r0, r0, r0, lsr #3
   198d0:	ldr	r1, [pc]	; 198d8 <__assert_fail@plt+0x7f08>
   198d4:	b	116ac <mkostemp64@plt>
   198d8:	andeq	r0, r8, r2, asr #1
   198dc:	ldr	ip, [pc, #208]	; 199b4 <__assert_fail@plt+0x7fe4>
   198e0:	push	{r4, r5, r6, r7, lr}
   198e4:	add	ip, pc, ip
   198e8:	ldr	lr, [pc, #200]	; 199b8 <__assert_fail@plt+0x7fe8>
   198ec:	sub	sp, sp, #20
   198f0:	mov	r5, r2
   198f4:	ldr	r4, [ip, lr]
   198f8:	subs	r3, r1, #0
   198fc:	mov	r6, r0
   19900:	ldr	r2, [r4]
   19904:	mov	r0, ip
   19908:	str	r2, [sp, #12]
   1990c:	beq	1997c <__assert_fail@plt+0x7fac>
   19910:	ldr	r2, [pc, #164]	; 199bc <__assert_fail@plt+0x7fec>
   19914:	str	r5, [sp]
   19918:	add	r2, pc, r2
   1991c:	mov	r1, #1
   19920:	add	r0, sp, #8
   19924:	bl	116dc <__asprintf_chk@plt>
   19928:	cmp	r0, #0
   1992c:	blt	199a8 <__assert_fail@plt+0x7fd8>
   19930:	mov	r0, #63	; 0x3f
   19934:	bl	11964 <umask@plt>
   19938:	mov	r7, r0
   1993c:	ldr	r0, [sp, #8]
   19940:	bl	198d0 <__assert_fail@plt+0x7f00>
   19944:	mov	r5, r0
   19948:	mov	r0, r7
   1994c:	bl	11964 <umask@plt>
   19950:	cmn	r5, #1
   19954:	beq	19998 <__assert_fail@plt+0x7fc8>
   19958:	ldr	r3, [sp, #8]
   1995c:	str	r3, [r6]
   19960:	ldr	r2, [sp, #12]
   19964:	ldr	r3, [r4]
   19968:	mov	r0, r5
   1996c:	cmp	r2, r3
   19970:	bne	199b0 <__assert_fail@plt+0x7fe0>
   19974:	add	sp, sp, #20
   19978:	pop	{r4, r5, r6, r7, pc}
   1997c:	ldr	r0, [pc, #60]	; 199c0 <__assert_fail@plt+0x7ff0>
   19980:	add	r0, pc, r0
   19984:	bl	116e8 <getenv@plt>
   19988:	subs	r3, r0, #0
   1998c:	ldreq	r3, [pc, #48]	; 199c4 <__assert_fail@plt+0x7ff4>
   19990:	addeq	r3, pc, r3
   19994:	b	19910 <__assert_fail@plt+0x7f40>
   19998:	ldr	r0, [sp, #8]
   1999c:	bl	11598 <free@plt>
   199a0:	mov	r3, #0
   199a4:	b	1995c <__assert_fail@plt+0x7f8c>
   199a8:	mvn	r5, #0
   199ac:	b	19960 <__assert_fail@plt+0x7f90>
   199b0:	bl	11640 <__stack_chk_fail@plt>
   199b4:	andeq	r2, r1, r8, ror #10
   199b8:	andeq	r0, r0, r0, lsr #3
   199bc:	andeq	r2, r0, r4, asr r1
   199c0:	andeq	r2, r0, r4, ror #1
   199c4:	andeq	r2, r0, ip, asr #1
   199c8:	push	{r4, r5, r6, lr}
   199cc:	mov	r2, r1
   199d0:	ldr	r1, [pc, #108]	; 19a44 <__assert_fail@plt+0x8074>
   199d4:	mov	r5, r0
   199d8:	bl	118bc <fcntl64@plt>
   199dc:	subs	r4, r0, #0
   199e0:	blt	199ec <__assert_fail@plt+0x801c>
   199e4:	mov	r0, r4
   199e8:	pop	{r4, r5, r6, pc}
   199ec:	mov	r0, r5
   199f0:	bl	11658 <dup@plt>
   199f4:	subs	r4, r0, #0
   199f8:	blt	199e4 <__assert_fail@plt+0x8014>
   199fc:	mov	r1, #1
   19a00:	bl	118bc <fcntl64@plt>
   19a04:	subs	r2, r0, #0
   19a08:	blt	19a24 <__assert_fail@plt+0x8054>
   19a0c:	orr	r2, r2, #1
   19a10:	mov	r1, #2
   19a14:	mov	r0, r4
   19a18:	bl	118bc <fcntl64@plt>
   19a1c:	cmp	r0, #0
   19a20:	bge	199e4 <__assert_fail@plt+0x8014>
   19a24:	bl	117d8 <__errno_location@plt>
   19a28:	mov	r5, r0
   19a2c:	mov	r0, r4
   19a30:	ldr	r6, [r5]
   19a34:	mvn	r4, #0
   19a38:	bl	11994 <close@plt>
   19a3c:	str	r6, [r5]
   19a40:	b	199e4 <__assert_fail@plt+0x8014>
   19a44:	andeq	r0, r0, r6, lsl #8
   19a48:	b	11724 <getdtablesize@plt>
   19a4c:	subs	r3, r0, #0
   19a50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a54:	beq	19b4c <__assert_fail@plt+0x817c>
   19a58:	ldrsb	r3, [r3]
   19a5c:	cmp	r3, #0
   19a60:	beq	19b4c <__assert_fail@plt+0x817c>
   19a64:	mov	r9, r1
   19a68:	bl	11634 <strdup@plt>
   19a6c:	subs	r8, r0, #0
   19a70:	beq	19b54 <__assert_fail@plt+0x8184>
   19a74:	ldrsb	r3, [r8]
   19a78:	cmp	r3, #47	; 0x2f
   19a7c:	addeq	r4, r8, #1
   19a80:	ldrsbeq	r3, [r8, #1]
   19a84:	movne	r4, r8
   19a88:	cmp	r3, #0
   19a8c:	beq	19b1c <__assert_fail@plt+0x814c>
   19a90:	mov	r6, #47	; 0x2f
   19a94:	mov	r7, #0
   19a98:	b	19ac8 <__assert_fail@plt+0x80f8>
   19a9c:	strb	r7, [r5]
   19aa0:	ldrsb	r3, [r4]
   19aa4:	cmp	r3, #0
   19aa8:	bne	19b24 <__assert_fail@plt+0x8154>
   19aac:	mov	r4, r5
   19ab0:	strb	r6, [r4], #1
   19ab4:	cmp	r4, #0
   19ab8:	beq	19b1c <__assert_fail@plt+0x814c>
   19abc:	ldrsb	r3, [r5, #1]
   19ac0:	cmp	r3, #0
   19ac4:	beq	19b1c <__assert_fail@plt+0x814c>
   19ac8:	mov	r1, #47	; 0x2f
   19acc:	mov	r0, r4
   19ad0:	bl	117a8 <strchr@plt>
   19ad4:	subs	r5, r0, #0
   19ad8:	bne	19a9c <__assert_fail@plt+0x80cc>
   19adc:	ldrsb	r3, [r4]
   19ae0:	cmp	r3, #0
   19ae4:	beq	19b1c <__assert_fail@plt+0x814c>
   19ae8:	mov	r1, r9
   19aec:	mov	r0, r8
   19af0:	bl	11808 <mkdir@plt>
   19af4:	subs	r4, r0, #0
   19af8:	beq	19b1c <__assert_fail@plt+0x814c>
   19afc:	bl	117d8 <__errno_location@plt>
   19b00:	ldr	r3, [r0]
   19b04:	cmp	r3, #17
   19b08:	beq	19b1c <__assert_fail@plt+0x814c>
   19b0c:	mov	r0, r8
   19b10:	bl	11598 <free@plt>
   19b14:	mov	r0, r4
   19b18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b1c:	mov	r4, #0
   19b20:	b	19b0c <__assert_fail@plt+0x813c>
   19b24:	mov	r1, r9
   19b28:	mov	r0, r8
   19b2c:	bl	11808 <mkdir@plt>
   19b30:	subs	r4, r0, #0
   19b34:	beq	19aac <__assert_fail@plt+0x80dc>
   19b38:	bl	117d8 <__errno_location@plt>
   19b3c:	ldr	r3, [r0]
   19b40:	cmp	r3, #17
   19b44:	beq	19aac <__assert_fail@plt+0x80dc>
   19b48:	b	19b0c <__assert_fail@plt+0x813c>
   19b4c:	mvn	r4, #21
   19b50:	b	19b14 <__assert_fail@plt+0x8144>
   19b54:	mvn	r4, #11
   19b58:	b	19b14 <__assert_fail@plt+0x8144>
   19b5c:	subs	r3, r0, #0
   19b60:	beq	19b80 <__assert_fail@plt+0x81b0>
   19b64:	push	{r4, lr}
   19b68:	mov	r1, #47	; 0x2f
   19b6c:	bl	118ec <strrchr@plt>
   19b70:	cmp	r0, #0
   19b74:	movne	r3, #0
   19b78:	strbne	r3, [r0], #1
   19b7c:	pop	{r4, pc}
   19b80:	mov	r0, r3
   19b84:	bx	lr
   19b88:	push	{r4, r5, r6, lr}
   19b8c:	mov	r6, r1
   19b90:	mov	r5, r2
   19b94:	mov	r4, r0
   19b98:	bl	1188c <__sched_cpualloc@plt>
   19b9c:	cmp	r0, #0
   19ba0:	popeq	{r4, r5, r6, pc}
   19ba4:	cmp	r6, #0
   19ba8:	addne	r3, r4, #31
   19bac:	lsrne	r3, r3, #5
   19bb0:	lslne	r3, r3, #2
   19bb4:	strne	r3, [r6]
   19bb8:	cmp	r5, #0
   19bbc:	addne	r4, r4, #31
   19bc0:	bicne	r4, r4, #31
   19bc4:	strne	r4, [r5]
   19bc8:	pop	{r4, r5, r6, pc}
   19bcc:	b	11820 <__sched_cpufree@plt>
   19bd0:	ldr	r3, [pc, #212]	; 19cac <__assert_fail@plt+0x82dc>
   19bd4:	ldr	r2, [pc, #212]	; 19cb0 <__assert_fail@plt+0x82e0>
   19bd8:	add	r3, pc, r3
   19bdc:	push	{r4, r5, r6, r7, r8, r9, lr}
   19be0:	sub	sp, sp, #12
   19be4:	ldr	r9, [r3, r2]
   19be8:	mov	r7, sp
   19bec:	mov	r1, r7
   19bf0:	ldr	r3, [r9]
   19bf4:	mov	r2, #0
   19bf8:	mov	r0, #2048	; 0x800
   19bfc:	str	r3, [sp, #4]
   19c00:	bl	19b88 <__assert_fail@plt+0x81b8>
   19c04:	subs	r4, r0, #0
   19c08:	movne	r5, #2048	; 0x800
   19c0c:	ldrne	r8, [pc, #160]	; 19cb4 <__assert_fail@plt+0x82e4>
   19c10:	bne	19c3c <__assert_fail@plt+0x826c>
   19c14:	b	19ca0 <__assert_fail@plt+0x82d0>
   19c18:	mov	r0, r4
   19c1c:	lsl	r5, r5, #1
   19c20:	bl	19bcc <__assert_fail@plt+0x81fc>
   19c24:	mov	r0, r5
   19c28:	mov	r2, #0
   19c2c:	mov	r1, r7
   19c30:	bl	19b88 <__assert_fail@plt+0x81b8>
   19c34:	subs	r4, r0, #0
   19c38:	beq	19ca0 <__assert_fail@plt+0x82d0>
   19c3c:	ldr	r2, [sp]
   19c40:	mov	r1, #0
   19c44:	mov	r0, r4
   19c48:	bl	1182c <memset@plt>
   19c4c:	mov	r3, r4
   19c50:	ldr	r2, [sp]
   19c54:	mov	r1, #0
   19c58:	mov	r0, #242	; 0xf2
   19c5c:	bl	11778 <syscall@plt>
   19c60:	subs	r6, r0, #0
   19c64:	bge	19c7c <__assert_fail@plt+0x82ac>
   19c68:	bl	117d8 <__errno_location@plt>
   19c6c:	ldr	r3, [r0]
   19c70:	cmp	r5, r8
   19c74:	cmple	r3, #22
   19c78:	beq	19c18 <__assert_fail@plt+0x8248>
   19c7c:	mov	r0, r4
   19c80:	bl	19bcc <__assert_fail@plt+0x81fc>
   19c84:	lsl	r0, r6, #3
   19c88:	ldr	r2, [sp, #4]
   19c8c:	ldr	r3, [r9]
   19c90:	cmp	r2, r3
   19c94:	bne	19ca8 <__assert_fail@plt+0x82d8>
   19c98:	add	sp, sp, #12
   19c9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19ca0:	mvn	r0, #0
   19ca4:	b	19c88 <__assert_fail@plt+0x82b8>
   19ca8:	bl	11640 <__stack_chk_fail@plt>
   19cac:	andeq	r2, r1, r4, ror r2
   19cb0:	andeq	r0, r0, r0, lsr #3
   19cb4:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   19cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cbc:	lsls	r7, r3, #3
   19cc0:	sub	sp, sp, #28
   19cc4:	mov	sl, r0
   19cc8:	beq	19e64 <__assert_fail@plt+0x8494>
   19ccc:	mov	r5, r3
   19cd0:	ldr	r3, [pc, #404]	; 19e6c <__assert_fail@plt+0x849c>
   19cd4:	ldr	fp, [pc, #404]	; 19e70 <__assert_fail@plt+0x84a0>
   19cd8:	add	r3, pc, r3
   19cdc:	str	r3, [sp, #16]
   19ce0:	ldr	r3, [pc, #396]	; 19e74 <__assert_fail@plt+0x84a4>
   19ce4:	mov	r9, r1
   19ce8:	add	r3, pc, r3
   19cec:	mov	r1, #0
   19cf0:	mov	r6, r2
   19cf4:	add	fp, pc, fp
   19cf8:	str	r3, [sp, #20]
   19cfc:	mov	ip, r1
   19d00:	mov	r8, r0
   19d04:	b	19d14 <__assert_fail@plt+0x8344>
   19d08:	cmp	r7, r4
   19d0c:	mov	ip, r4
   19d10:	bls	19df0 <__assert_fail@plt+0x8420>
   19d14:	cmp	r5, ip, lsr #3
   19d18:	add	r4, ip, #1
   19d1c:	bls	19d08 <__assert_fail@plt+0x8338>
   19d20:	lsr	r2, ip, #5
   19d24:	and	r3, ip, #31
   19d28:	ldr	r2, [r6, r2, lsl #2]
   19d2c:	lsr	r3, r2, r3
   19d30:	tst	r3, #1
   19d34:	beq	19d08 <__assert_fail@plt+0x8338>
   19d38:	cmp	r7, r4
   19d3c:	bls	19e08 <__assert_fail@plt+0x8438>
   19d40:	cmp	r5, r4, lsr #3
   19d44:	bls	19e08 <__assert_fail@plt+0x8438>
   19d48:	lsr	r2, r4, #5
   19d4c:	and	r3, r4, #31
   19d50:	ldr	r2, [r6, r2, lsl #2]
   19d54:	lsr	r3, r2, r3
   19d58:	tst	r3, #1
   19d5c:	beq	19e08 <__assert_fail@plt+0x8438>
   19d60:	sub	r0, r7, #1
   19d64:	sub	r0, r0, ip
   19d68:	mov	r2, #1
   19d6c:	b	19d90 <__assert_fail@plt+0x83c0>
   19d70:	cmp	r5, r3, lsr #3
   19d74:	bls	19da4 <__assert_fail@plt+0x83d4>
   19d78:	ldr	r3, [r6, lr, lsl #2]
   19d7c:	add	lr, r2, #1
   19d80:	lsr	r3, r3, r1
   19d84:	tst	r3, #1
   19d88:	beq	19da4 <__assert_fail@plt+0x83d4>
   19d8c:	mov	r2, lr
   19d90:	add	r3, r2, r4
   19d94:	cmp	r0, r2
   19d98:	and	r1, r3, #31
   19d9c:	lsr	lr, r3, #5
   19da0:	bne	19d70 <__assert_fail@plt+0x83a0>
   19da4:	cmp	r2, #1
   19da8:	beq	19e40 <__assert_fail@plt+0x8470>
   19dac:	add	r4, ip, r2
   19db0:	str	r4, [sp, #8]
   19db4:	stm	sp, {fp, ip}
   19db8:	mvn	r3, #0
   19dbc:	mov	r2, #1
   19dc0:	mov	r1, r9
   19dc4:	mov	r0, r8
   19dc8:	bl	119b8 <__snprintf_chk@plt>
   19dcc:	cmp	r0, r9
   19dd0:	bcs	19e34 <__assert_fail@plt+0x8464>
   19dd4:	add	r4, r4, #1
   19dd8:	cmp	r7, r4
   19ddc:	add	r8, r8, r0
   19de0:	sub	r9, r9, r0
   19de4:	mov	r1, #1
   19de8:	mov	ip, r4
   19dec:	bhi	19d14 <__assert_fail@plt+0x8344>
   19df0:	sub	r8, r8, r1
   19df4:	mov	r3, #0
   19df8:	mov	r0, sl
   19dfc:	strb	r3, [r8]
   19e00:	add	sp, sp, #28
   19e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e08:	ldr	r3, [sp, #16]
   19e0c:	str	ip, [sp, #4]
   19e10:	str	r3, [sp]
   19e14:	mov	r2, #1
   19e18:	mvn	r3, #0
   19e1c:	mov	r1, r9
   19e20:	mov	r0, r8
   19e24:	mov	r4, ip
   19e28:	bl	119b8 <__snprintf_chk@plt>
   19e2c:	cmp	r0, r9
   19e30:	bcc	19dd4 <__assert_fail@plt+0x8404>
   19e34:	mov	r0, #0
   19e38:	add	sp, sp, #28
   19e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e40:	ldr	r3, [sp, #20]
   19e44:	str	r4, [sp, #8]
   19e48:	str	r3, [sp]
   19e4c:	str	ip, [sp, #4]
   19e50:	mvn	r3, #0
   19e54:	mov	r1, r9
   19e58:	mov	r0, r8
   19e5c:	bl	119b8 <__snprintf_chk@plt>
   19e60:	b	19dcc <__assert_fail@plt+0x83fc>
   19e64:	mov	r8, r0
   19e68:	b	19df4 <__assert_fail@plt+0x8424>
   19e6c:	andeq	r1, r0, r8, lsr #27
   19e70:	muleq	r0, r4, sp
   19e74:	muleq	r0, r4, sp
   19e78:	lsl	ip, r3, #3
   19e7c:	subs	ip, ip, #4
   19e80:	push	{r4, r5, r6, r7, r8, lr}
   19e84:	mov	r7, r0
   19e88:	mov	r6, r0
   19e8c:	bmi	19fa8 <__assert_fail@plt+0x85d8>
   19e90:	cmp	r1, #0
   19e94:	beq	19fa8 <__assert_fail@plt+0x85d8>
   19e98:	mov	r0, #0
   19e9c:	b	19ef4 <__assert_fail@plt+0x8524>
   19ea0:	lsr	r8, r5, #5
   19ea4:	and	r5, r5, #31
   19ea8:	ldr	r8, [r2, r8, lsl #2]
   19eac:	lsr	r5, r8, r5
   19eb0:	tst	r5, #1
   19eb4:	beq	19f6c <__assert_fail@plt+0x859c>
   19eb8:	orr	r4, lr, #8
   19ebc:	cmp	r0, #0
   19ec0:	moveq	r0, r6
   19ec4:	cmp	r4, #9
   19ec8:	mov	lr, r4
   19ecc:	addgt	lr, r4, #87	; 0x57
   19ed0:	ble	19f7c <__assert_fail@plt+0x85ac>
   19ed4:	mov	r4, r6
   19ed8:	subs	ip, ip, #4
   19edc:	strb	lr, [r4], #1
   19ee0:	bmi	19f90 <__assert_fail@plt+0x85c0>
   19ee4:	sub	lr, r4, r7
   19ee8:	cmp	lr, r1
   19eec:	beq	19f90 <__assert_fail@plt+0x85c0>
   19ef0:	mov	r6, r4
   19ef4:	cmp	r3, ip, lsr #3
   19ef8:	lsrhi	r4, ip, #5
   19efc:	andhi	lr, ip, #31
   19f00:	ldrhi	r4, [r2, r4, lsl #2]
   19f04:	movls	lr, #0
   19f08:	lsrhi	lr, r4, lr
   19f0c:	add	r4, ip, #1
   19f10:	andhi	lr, lr, #1
   19f14:	cmp	r3, r4, lsr #3
   19f18:	bls	19f34 <__assert_fail@plt+0x8564>
   19f1c:	lsr	r5, r4, #5
   19f20:	and	r4, r4, #31
   19f24:	ldr	r5, [r2, r5, lsl #2]
   19f28:	lsr	r4, r5, r4
   19f2c:	tst	r4, #1
   19f30:	orrne	lr, lr, #2
   19f34:	add	r4, ip, #2
   19f38:	cmp	r3, r4, lsr #3
   19f3c:	bls	19f58 <__assert_fail@plt+0x8588>
   19f40:	lsr	r5, r4, #5
   19f44:	and	r4, r4, #31
   19f48:	ldr	r5, [r2, r5, lsl #2]
   19f4c:	lsr	r4, r5, r4
   19f50:	tst	r4, #1
   19f54:	orrne	lr, lr, #4
   19f58:	add	r5, ip, #3
   19f5c:	clz	r4, r0
   19f60:	cmp	r3, r5, lsr #3
   19f64:	lsr	r4, r4, #5
   19f68:	bhi	19ea0 <__assert_fail@plt+0x84d0>
   19f6c:	cmp	lr, #0
   19f70:	moveq	r4, #0
   19f74:	cmp	r4, #0
   19f78:	movne	r0, r6
   19f7c:	mov	r4, r6
   19f80:	add	lr, lr, #48	; 0x30
   19f84:	subs	ip, ip, #4
   19f88:	strb	lr, [r4], #1
   19f8c:	bpl	19ee4 <__assert_fail@plt+0x8514>
   19f90:	cmp	r0, #0
   19f94:	mov	r3, #0
   19f98:	strb	r3, [r4]
   19f9c:	popne	{r4, r5, r6, r7, r8, pc}
   19fa0:	mov	r0, r6
   19fa4:	pop	{r4, r5, r6, r7, r8, pc}
   19fa8:	mov	r3, #0
   19fac:	strb	r3, [r6], #-1
   19fb0:	mov	r0, r6
   19fb4:	pop	{r4, r5, r6, r7, r8, pc}
   19fb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fbc:	mov	r7, r0
   19fc0:	mov	r6, r1
   19fc4:	mov	r9, r2
   19fc8:	bl	1179c <strlen@plt>
   19fcc:	cmp	r0, #1
   19fd0:	sub	r0, r0, #1
   19fd4:	add	r4, r7, r0
   19fd8:	bls	19fe8 <__assert_fail@plt+0x8618>
   19fdc:	ldrb	r3, [r7]
   19fe0:	cmp	r3, #48	; 0x30
   19fe4:	beq	1a0f8 <__assert_fail@plt+0x8728>
   19fe8:	mov	r2, r9
   19fec:	mov	r1, #0
   19ff0:	mov	r0, r6
   19ff4:	bl	1182c <memset@plt>
   19ff8:	cmp	r7, r4
   19ffc:	movls	r5, #0
   1a000:	movls	r8, #1
   1a004:	bls	1a0b4 <__assert_fail@plt+0x86e4>
   1a008:	b	1a0f0 <__assert_fail@plt+0x8720>
   1a00c:	sxtb	r0, r3
   1a010:	cmn	r0, #1
   1a014:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a018:	tst	r3, #1
   1a01c:	beq	1a038 <__assert_fail@plt+0x8668>
   1a020:	cmp	r9, r5, lsr #3
   1a024:	lsrhi	r0, r5, #5
   1a028:	andhi	r2, r5, #31
   1a02c:	ldrhi	r1, [r6, r0, lsl #2]
   1a030:	orrhi	r2, r1, r8, lsl r2
   1a034:	strhi	r2, [r6, r0, lsl #2]
   1a038:	tst	r3, #2
   1a03c:	beq	1a05c <__assert_fail@plt+0x868c>
   1a040:	add	r2, r5, #1
   1a044:	cmp	r9, r2, lsr #3
   1a048:	lsrhi	r0, r2, #5
   1a04c:	andhi	r2, r2, #31
   1a050:	ldrhi	r1, [r6, r0, lsl #2]
   1a054:	orrhi	r2, r1, r8, lsl r2
   1a058:	strhi	r2, [r6, r0, lsl #2]
   1a05c:	tst	r3, #4
   1a060:	beq	1a080 <__assert_fail@plt+0x86b0>
   1a064:	add	r2, r5, #2
   1a068:	cmp	r9, r2, lsr #3
   1a06c:	lsrhi	r0, r2, #5
   1a070:	andhi	r2, r2, #31
   1a074:	ldrhi	r1, [r6, r0, lsl #2]
   1a078:	orrhi	r2, r1, r8, lsl r2
   1a07c:	strhi	r2, [r6, r0, lsl #2]
   1a080:	tst	r3, #8
   1a084:	beq	1a0a4 <__assert_fail@plt+0x86d4>
   1a088:	add	r3, r5, #3
   1a08c:	cmp	r9, r3, lsr #3
   1a090:	lsrhi	r1, r3, #5
   1a094:	andhi	r3, r3, #31
   1a098:	ldrhi	r2, [r6, r1, lsl #2]
   1a09c:	orrhi	r3, r2, r8, lsl r3
   1a0a0:	strhi	r3, [r6, r1, lsl #2]
   1a0a4:	sub	r4, r4, #1
   1a0a8:	cmp	r7, r4
   1a0ac:	add	r5, r5, #4
   1a0b0:	bhi	1a0f0 <__assert_fail@plt+0x8720>
   1a0b4:	ldrsb	sl, [r4]
   1a0b8:	cmp	sl, #44	; 0x2c
   1a0bc:	ldrsbeq	sl, [r4, #-1]
   1a0c0:	subeq	r4, r4, #1
   1a0c4:	sub	r3, sl, #48	; 0x30
   1a0c8:	cmp	r3, #9
   1a0cc:	bls	1a00c <__assert_fail@plt+0x863c>
   1a0d0:	bl	11730 <__ctype_tolower_loc@plt>
   1a0d4:	ldr	r3, [r0]
   1a0d8:	ldr	r3, [r3, sl, lsl #2]
   1a0dc:	sub	r2, r3, #97	; 0x61
   1a0e0:	cmp	r2, #5
   1a0e4:	bhi	1a108 <__assert_fail@plt+0x8738>
   1a0e8:	sub	r3, r3, #87	; 0x57
   1a0ec:	b	1a018 <__assert_fail@plt+0x8648>
   1a0f0:	mov	r0, #0
   1a0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0f8:	ldrb	r3, [r7, #1]
   1a0fc:	cmp	r3, #120	; 0x78
   1a100:	addeq	r7, r7, #2
   1a104:	b	19fe8 <__assert_fail@plt+0x8618>
   1a108:	mvn	r0, #0
   1a10c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a110:	ldr	ip, [pc, #584]	; 1a360 <__assert_fail@plt+0x8990>
   1a114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a118:	add	ip, pc, ip
   1a11c:	ldr	lr, [pc, #576]	; 1a364 <__assert_fail@plt+0x8994>
   1a120:	mov	r6, r1
   1a124:	sub	sp, sp, #52	; 0x34
   1a128:	ldr	r1, [ip, lr]
   1a12c:	mov	sl, r0
   1a130:	mov	lr, r1
   1a134:	str	r1, [sp, #16]
   1a138:	ldr	lr, [lr]
   1a13c:	mov	r1, #0
   1a140:	mov	r0, r6
   1a144:	str	r3, [sp, #8]
   1a148:	mov	r4, r2
   1a14c:	str	lr, [sp, #44]	; 0x2c
   1a150:	lsl	r5, r2, #3
   1a154:	bl	1182c <memset@plt>
   1a158:	mov	r3, #0
   1a15c:	str	r3, [sp]
   1a160:	ldr	r3, [pc, #512]	; 1a368 <__assert_fail@plt+0x8998>
   1a164:	cmp	sl, #0
   1a168:	add	r3, pc, r3
   1a16c:	str	r3, [sp, #4]
   1a170:	ldr	r3, [pc, #500]	; 1a36c <__assert_fail@plt+0x899c>
   1a174:	add	r3, pc, r3
   1a178:	str	r3, [sp, #20]
   1a17c:	beq	1a290 <__assert_fail@plt+0x88c0>
   1a180:	mov	r1, #44	; 0x2c
   1a184:	mov	r0, sl
   1a188:	bl	117a8 <strchr@plt>
   1a18c:	subs	r9, r0, #0
   1a190:	addne	r9, r9, #1
   1a194:	add	r3, sp, #31
   1a198:	add	r2, sp, #32
   1a19c:	ldr	r1, [sp, #4]
   1a1a0:	mov	r0, sl
   1a1a4:	str	r3, [sp, #12]
   1a1a8:	bl	11910 <sscanf@plt>
   1a1ac:	subs	r3, r0, #0
   1a1b0:	str	r3, [sp]
   1a1b4:	ble	1a328 <__assert_fail@plt+0x8958>
   1a1b8:	ldr	fp, [sp, #32]
   1a1bc:	mov	r7, #1
   1a1c0:	mov	r1, #45	; 0x2d
   1a1c4:	mov	r0, sl
   1a1c8:	str	fp, [sp, #36]	; 0x24
   1a1cc:	str	r7, [sp, #40]	; 0x28
   1a1d0:	bl	117a8 <strchr@plt>
   1a1d4:	subs	r8, r0, #0
   1a1d8:	beq	1a21c <__assert_fail@plt+0x884c>
   1a1dc:	mov	r0, sl
   1a1e0:	mov	r1, #44	; 0x2c
   1a1e4:	bl	117a8 <strchr@plt>
   1a1e8:	add	r8, r8, r7
   1a1ec:	subs	sl, r0, #0
   1a1f0:	beq	1a2c4 <__assert_fail@plt+0x88f4>
   1a1f4:	cmp	r8, #0
   1a1f8:	add	sl, sl, r7
   1a1fc:	beq	1a21c <__assert_fail@plt+0x884c>
   1a200:	clz	r7, sl
   1a204:	lsr	r7, r7, #5
   1a208:	cmp	sl, r8
   1a20c:	movls	r2, r7
   1a210:	orrhi	r2, r7, #1
   1a214:	cmp	r2, #0
   1a218:	bne	1a2cc <__assert_fail@plt+0x88fc>
   1a21c:	mov	lr, fp
   1a220:	ldr	r3, [sp, #8]
   1a224:	adds	ip, r3, #0
   1a228:	movne	ip, #1
   1a22c:	cmp	r5, fp
   1a230:	movhi	r2, #0
   1a234:	andls	r2, ip, #1
   1a238:	cmp	r2, #0
   1a23c:	bne	1a2a4 <__assert_fail@plt+0x88d4>
   1a240:	ldr	r7, [sp, #40]	; 0x28
   1a244:	mov	r8, #1
   1a248:	b	1a260 <__assert_fail@plt+0x8890>
   1a24c:	cmp	fp, r5
   1a250:	movcc	r3, #0
   1a254:	andcs	r3, ip, #1
   1a258:	cmp	r3, #0
   1a25c:	bne	1a2a4 <__assert_fail@plt+0x88d4>
   1a260:	cmp	r4, fp, lsr #3
   1a264:	lsrhi	r1, fp, #5
   1a268:	andhi	r3, fp, #31
   1a26c:	ldrhi	r2, [r6, r1, lsl #2]
   1a270:	add	fp, fp, r7
   1a274:	orrhi	r3, r2, r8, lsl r3
   1a278:	strhi	r3, [r6, r1, lsl #2]
   1a27c:	cmp	fp, lr
   1a280:	bls	1a24c <__assert_fail@plt+0x887c>
   1a284:	mov	sl, r9
   1a288:	cmp	sl, #0
   1a28c:	bne	1a180 <__assert_fail@plt+0x87b0>
   1a290:	ldr	r3, [sp]
   1a294:	sub	r0, r3, #2
   1a298:	clz	r0, r0
   1a29c:	lsr	r0, r0, #5
   1a2a0:	b	1a2a8 <__assert_fail@plt+0x88d8>
   1a2a4:	mov	r0, #2
   1a2a8:	ldr	r3, [sp, #16]
   1a2ac:	ldr	r2, [sp, #44]	; 0x2c
   1a2b0:	ldr	r3, [r3]
   1a2b4:	cmp	r2, r3
   1a2b8:	bne	1a35c <__assert_fail@plt+0x898c>
   1a2bc:	add	sp, sp, #52	; 0x34
   1a2c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2c4:	cmp	r8, #0
   1a2c8:	beq	1a21c <__assert_fail@plt+0x884c>
   1a2cc:	ldr	r3, [sp, #12]
   1a2d0:	add	r2, sp, #36	; 0x24
   1a2d4:	ldr	r1, [sp, #20]
   1a2d8:	mov	r0, r8
   1a2dc:	bl	11910 <sscanf@plt>
   1a2e0:	subs	r3, r0, #0
   1a2e4:	str	r3, [sp]
   1a2e8:	ble	1a328 <__assert_fail@plt+0x8958>
   1a2ec:	mov	r0, r8
   1a2f0:	mov	r1, #58	; 0x3a
   1a2f4:	bl	117a8 <strchr@plt>
   1a2f8:	cmp	r0, #0
   1a2fc:	beq	1a318 <__assert_fail@plt+0x8948>
   1a300:	adds	r0, r0, #1
   1a304:	beq	1a318 <__assert_fail@plt+0x8948>
   1a308:	cmp	r0, sl
   1a30c:	orrcc	r7, r7, #1
   1a310:	cmp	r7, #0
   1a314:	bne	1a330 <__assert_fail@plt+0x8960>
   1a318:	ldr	fp, [sp, #32]
   1a31c:	ldr	lr, [sp, #36]	; 0x24
   1a320:	cmp	fp, lr
   1a324:	bls	1a220 <__assert_fail@plt+0x8850>
   1a328:	mov	r0, #1
   1a32c:	b	1a2a8 <__assert_fail@plt+0x88d8>
   1a330:	ldr	r3, [sp, #12]
   1a334:	add	r2, sp, #40	; 0x28
   1a338:	ldr	r1, [sp, #20]
   1a33c:	bl	11910 <sscanf@plt>
   1a340:	subs	r3, r0, #0
   1a344:	str	r3, [sp]
   1a348:	ble	1a328 <__assert_fail@plt+0x8958>
   1a34c:	ldr	r3, [sp, #40]	; 0x28
   1a350:	cmp	r3, #0
   1a354:	bne	1a318 <__assert_fail@plt+0x8948>
   1a358:	b	1a328 <__assert_fail@plt+0x8958>
   1a35c:	bl	11640 <__stack_chk_fail@plt>
   1a360:	andeq	r1, r1, r4, lsr sp
   1a364:	andeq	r0, r0, r0, lsr #3
   1a368:	andeq	r1, r0, r0, lsr r9
   1a36c:	andeq	r1, r0, r4, lsr #18
   1a370:	cmp	r3, #0
   1a374:	cmpeq	r2, #0
   1a378:	bne	1a390 <__assert_fail@plt+0x89c0>
   1a37c:	cmp	r1, #0
   1a380:	cmpeq	r0, #0
   1a384:	mvnne	r1, #0
   1a388:	mvnne	r0, #0
   1a38c:	b	1a3ac <__assert_fail@plt+0x89dc>
   1a390:	sub	sp, sp, #8
   1a394:	push	{sp, lr}
   1a398:	bl	1a3bc <__assert_fail@plt+0x89ec>
   1a39c:	ldr	lr, [sp, #4]
   1a3a0:	add	sp, sp, #8
   1a3a4:	pop	{r2, r3}
   1a3a8:	bx	lr
   1a3ac:	push	{r1, lr}
   1a3b0:	mov	r0, #8
   1a3b4:	bl	11538 <raise@plt>
   1a3b8:	pop	{r1, pc}
   1a3bc:	cmp	r1, r3
   1a3c0:	cmpeq	r0, r2
   1a3c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3c8:	mov	r4, r0
   1a3cc:	movcc	r0, #0
   1a3d0:	mov	r5, r1
   1a3d4:	ldr	lr, [sp, #36]	; 0x24
   1a3d8:	movcc	r1, r0
   1a3dc:	bcc	1a4d8 <__assert_fail@plt+0x8b08>
   1a3e0:	cmp	r3, #0
   1a3e4:	clzeq	ip, r2
   1a3e8:	clzne	ip, r3
   1a3ec:	addeq	ip, ip, #32
   1a3f0:	cmp	r5, #0
   1a3f4:	clzeq	r1, r4
   1a3f8:	addeq	r1, r1, #32
   1a3fc:	clzne	r1, r5
   1a400:	sub	ip, ip, r1
   1a404:	sub	sl, ip, #32
   1a408:	lsl	r9, r3, ip
   1a40c:	rsb	fp, ip, #32
   1a410:	orr	r9, r9, r2, lsl sl
   1a414:	orr	r9, r9, r2, lsr fp
   1a418:	lsl	r8, r2, ip
   1a41c:	cmp	r5, r9
   1a420:	cmpeq	r4, r8
   1a424:	movcc	r0, #0
   1a428:	movcc	r1, r0
   1a42c:	bcc	1a448 <__assert_fail@plt+0x8a78>
   1a430:	mov	r0, #1
   1a434:	subs	r4, r4, r8
   1a438:	lsl	r1, r0, sl
   1a43c:	orr	r1, r1, r0, lsr fp
   1a440:	lsl	r0, r0, ip
   1a444:	sbc	r5, r5, r9
   1a448:	cmp	ip, #0
   1a44c:	beq	1a4d8 <__assert_fail@plt+0x8b08>
   1a450:	lsr	r6, r8, #1
   1a454:	orr	r6, r6, r9, lsl #31
   1a458:	lsr	r7, r9, #1
   1a45c:	mov	r2, ip
   1a460:	b	1a484 <__assert_fail@plt+0x8ab4>
   1a464:	subs	r3, r4, r6
   1a468:	sbc	r8, r5, r7
   1a46c:	adds	r3, r3, r3
   1a470:	adc	r8, r8, r8
   1a474:	adds	r4, r3, #1
   1a478:	adc	r5, r8, #0
   1a47c:	subs	r2, r2, #1
   1a480:	beq	1a4a0 <__assert_fail@plt+0x8ad0>
   1a484:	cmp	r5, r7
   1a488:	cmpeq	r4, r6
   1a48c:	bcs	1a464 <__assert_fail@plt+0x8a94>
   1a490:	adds	r4, r4, r4
   1a494:	adc	r5, r5, r5
   1a498:	subs	r2, r2, #1
   1a49c:	bne	1a484 <__assert_fail@plt+0x8ab4>
   1a4a0:	lsr	r3, r4, ip
   1a4a4:	orr	r3, r3, r5, lsl fp
   1a4a8:	lsr	r2, r5, ip
   1a4ac:	orr	r3, r3, r5, lsr sl
   1a4b0:	adds	r0, r0, r4
   1a4b4:	mov	r4, r3
   1a4b8:	lsl	r3, r2, ip
   1a4bc:	orr	r3, r3, r4, lsl sl
   1a4c0:	lsl	ip, r4, ip
   1a4c4:	orr	r3, r3, r4, lsr fp
   1a4c8:	adc	r1, r1, r5
   1a4cc:	subs	r0, r0, ip
   1a4d0:	mov	r5, r2
   1a4d4:	sbc	r1, r1, r3
   1a4d8:	cmp	lr, #0
   1a4dc:	strdne	r4, [lr]
   1a4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a4e8:	mov	r7, r0
   1a4ec:	ldr	r6, [pc, #72]	; 1a53c <__assert_fail@plt+0x8b6c>
   1a4f0:	ldr	r5, [pc, #72]	; 1a540 <__assert_fail@plt+0x8b70>
   1a4f4:	add	r6, pc, r6
   1a4f8:	add	r5, pc, r5
   1a4fc:	sub	r6, r6, r5
   1a500:	mov	r8, r1
   1a504:	mov	r9, r2
   1a508:	bl	11500 <fdopen@plt-0x20>
   1a50c:	asrs	r6, r6, #2
   1a510:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a514:	mov	r4, #0
   1a518:	add	r4, r4, #1
   1a51c:	ldr	r3, [r5], #4
   1a520:	mov	r2, r9
   1a524:	mov	r1, r8
   1a528:	mov	r0, r7
   1a52c:	blx	r3
   1a530:	cmp	r6, r4
   1a534:	bne	1a518 <__assert_fail@plt+0x8b48>
   1a538:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a53c:	andeq	r1, r1, r0, asr r8
   1a540:	andeq	r1, r1, r8, asr #16
   1a544:	bx	lr
   1a548:	ldr	r3, [pc, #12]	; 1a55c <__assert_fail@plt+0x8b8c>
   1a54c:	mov	r1, #0
   1a550:	add	r3, pc, r3
   1a554:	ldr	r2, [r3]
   1a558:	b	117f0 <__cxa_atexit@plt>
   1a55c:	andeq	r1, r1, ip, lsr #21

Disassembly of section .fini:

0001a560 <.fini>:
   1a560:	push	{r3, lr}
   1a564:	pop	{r3, pc}
