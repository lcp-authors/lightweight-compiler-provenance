
raspbian-preinstalled/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010d4c <.init>:
   10d4c:	push	{r3, lr}
   10d50:	bl	11738 <__assert_fail@plt+0x738>
   10d54:	pop	{r3, pc}

Disassembly of section .plt:

00010d58 <calloc@plt-0x14>:
   10d58:	push	{lr}		; (str lr, [sp, #-4]!)
   10d5c:	ldr	lr, [pc, #4]	; 10d68 <calloc@plt-0x4>
   10d60:	add	lr, pc, lr
   10d64:	ldr	pc, [lr, #8]!
   10d68:	muleq	r1, r8, r2

00010d6c <calloc@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #664]!	; 0x298

00010d78 <fputs_unlocked@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #656]!	; 0x290

00010d84 <raise@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #648]!	; 0x288

00010d90 <strcmp@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #640]!	; 0x280

00010d9c <fflush@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #632]!	; 0x278

00010da8 <free@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #624]!	; 0x270

00010db4 <_exit@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #616]!	; 0x268

00010dc0 <memcpy@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #608]!	; 0x260

00010dcc <execvp@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #600]!	; 0x258

00010dd8 <__strtoull_internal@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #592]!	; 0x250

00010de4 <mbsinit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #584]!	; 0x248

00010df0 <memcmp@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #576]!	; 0x240

00010dfc <dcgettext@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #568]!	; 0x238

00010e08 <__stack_chk_fail@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #560]!	; 0x230

00010e14 <realloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #552]!	; 0x228

00010e20 <textdomain@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #544]!	; 0x220

00010e2c <iswprint@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #536]!	; 0x218

00010e38 <readlink@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #528]!	; 0x210

00010e44 <fwrite@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #520]!	; 0x208

00010e50 <lseek64@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #512]!	; 0x200

00010e5c <__ctype_get_mb_cur_max@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #504]!	; 0x1f8

00010e68 <__fpending@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #496]!	; 0x1f0

00010e74 <mbrtowc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e80 <error@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #480]!	; 0x1e0

00010e8c <getenv@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #472]!	; 0x1d8

00010e98 <malloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #464]!	; 0x1d0

00010ea4 <__libc_start_main@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #456]!	; 0x1c8

00010eb0 <__freading@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #448]!	; 0x1c0

00010ebc <__ctype_toupper_loc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ec8 <__gmon_start__@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #432]!	; 0x1b0

00010ed4 <mempcpy@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #424]!	; 0x1a8

00010ee0 <getopt_long@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #416]!	; 0x1a0

00010eec <__ctype_b_loc@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #408]!	; 0x198

00010ef8 <exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #400]!	; 0x190

00010f04 <strlen@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #392]!	; 0x188

00010f10 <strchr@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #384]!	; 0x180

00010f1c <__errno_location@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #376]!	; 0x178

00010f28 <__cxa_atexit@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #368]!	; 0x170

00010f34 <memset@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #360]!	; 0x168

00010f40 <__printf_chk@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #352]!	; 0x160

00010f4c <fileno@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #344]!	; 0x158

00010f58 <__fprintf_chk@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #336]!	; 0x150

00010f64 <access@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #24, 20	; 0x18000
   10f6c:	ldr	pc, [ip, #328]!	; 0x148

00010f70 <fclose@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #24, 20	; 0x18000
   10f78:	ldr	pc, [ip, #320]!	; 0x140

00010f7c <fseeko64@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #24, 20	; 0x18000
   10f84:	ldr	pc, [ip, #312]!	; 0x138

00010f88 <strtok@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #24, 20	; 0x18000
   10f90:	ldr	pc, [ip, #304]!	; 0x130

00010f94 <setlocale@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #24, 20	; 0x18000
   10f9c:	ldr	pc, [ip, #296]!	; 0x128

00010fa0 <putenv@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #24, 20	; 0x18000
   10fa8:	ldr	pc, [ip, #288]!	; 0x120

00010fac <strrchr@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #24, 20	; 0x18000
   10fb4:	ldr	pc, [ip, #280]!	; 0x118

00010fb8 <nl_langinfo@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #24, 20	; 0x18000
   10fc0:	ldr	pc, [ip, #272]!	; 0x110

00010fc4 <bindtextdomain@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #24, 20	; 0x18000
   10fcc:	ldr	pc, [ip, #264]!	; 0x108

00010fd0 <__xstat64@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #24, 20	; 0x18000
   10fd8:	ldr	pc, [ip, #256]!	; 0x100

00010fdc <strncmp@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #24, 20	; 0x18000
   10fe4:	ldr	pc, [ip, #248]!	; 0xf8

00010fe8 <abort@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #24, 20	; 0x18000
   10ff0:	ldr	pc, [ip, #240]!	; 0xf0

00010ff4 <__snprintf_chk@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #24, 20	; 0x18000
   10ffc:	ldr	pc, [ip, #232]!	; 0xe8

00011000 <__assert_fail@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #24, 20	; 0x18000
   11008:	ldr	pc, [ip, #224]!	; 0xe0

Disassembly of section .text:

0001100c <.text>:
   1100c:	ldr	r3, [pc, #1592]	; 1164c <__assert_fail@plt+0x64c>
   11010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11014:	sub	sp, sp, #148	; 0x94
   11018:	ldr	r3, [r3]
   1101c:	mov	r7, r0
   11020:	ldr	r0, [r1]
   11024:	str	r3, [sp, #140]	; 0x8c
   11028:	mov	r5, r1
   1102c:	bl	11ec4 <__assert_fail@plt+0xec4>
   11030:	ldr	r1, [pc, #1560]	; 11650 <__assert_fail@plt+0x650>
   11034:	mov	r0, #6
   11038:	bl	10f94 <setlocale@plt>
   1103c:	ldr	r1, [pc, #1552]	; 11654 <__assert_fail@plt+0x654>
   11040:	ldr	r0, [pc, #1552]	; 11658 <__assert_fail@plt+0x658>
   11044:	bl	10fc4 <bindtextdomain@plt>
   11048:	ldr	r0, [pc, #1544]	; 11658 <__assert_fail@plt+0x658>
   1104c:	bl	10e20 <textdomain@plt>
   11050:	ldr	r3, [pc, #1540]	; 1165c <__assert_fail@plt+0x65c>
   11054:	mov	r2, #125	; 0x7d
   11058:	ldr	r0, [pc, #1536]	; 11660 <__assert_fail@plt+0x660>
   1105c:	str	r2, [r3]
   11060:	bl	17800 <__assert_fail@plt+0x6800>
   11064:	ldr	r6, [pc, #1528]	; 11664 <__assert_fail@plt+0x664>
   11068:	ldr	r8, [pc, #1528]	; 11668 <__assert_fail@plt+0x668>
   1106c:	ldr	sl, [pc, #1528]	; 1166c <__assert_fail@plt+0x66c>
   11070:	ldr	r9, [pc, #1528]	; 11670 <__assert_fail@plt+0x670>
   11074:	ldr	fp, [pc, #1528]	; 11674 <__assert_fail@plt+0x674>
   11078:	mov	r4, #0
   1107c:	str	r4, [sp]
   11080:	mov	r3, r6
   11084:	mov	r2, r8
   11088:	mov	r1, r5
   1108c:	mov	r0, r7
   11090:	bl	10ee0 <getopt_long@plt>
   11094:	cmn	r0, #1
   11098:	beq	11234 <__assert_fail@plt+0x234>
   1109c:	cmp	r0, #101	; 0x65
   110a0:	beq	110e8 <__assert_fail@plt+0xe8>
   110a4:	bgt	110e0 <__assert_fail@plt+0xe0>
   110a8:	cmn	r0, #3
   110ac:	bne	111f4 <__assert_fail@plt+0x1f4>
   110b0:	ldr	r1, [pc, #1472]	; 11678 <__assert_fail@plt+0x678>
   110b4:	ldr	r3, [pc, #1472]	; 1167c <__assert_fail@plt+0x67c>
   110b8:	ldr	r2, [pc, #1472]	; 11680 <__assert_fail@plt+0x680>
   110bc:	str	r4, [sp, #4]
   110c0:	ldr	r0, [r1]
   110c4:	ldr	r3, [r3]
   110c8:	ldr	r1, [pc, #1460]	; 11684 <__assert_fail@plt+0x684>
   110cc:	str	r2, [sp]
   110d0:	ldr	r2, [pc, #1456]	; 11688 <__assert_fail@plt+0x688>
   110d4:	bl	14594 <__assert_fail@plt+0x3594>
   110d8:	mov	r0, r4
   110dc:	bl	10ef8 <exit@plt>
   110e0:	cmp	r0, #105	; 0x69
   110e4:	bne	111e4 <__assert_fail@plt+0x1e4>
   110e8:	ldr	r3, [pc, #1436]	; 1168c <__assert_fail@plt+0x68c>
   110ec:	add	r3, r3, r0, lsl #2
   110f0:	ldr	r4, [r3, #-348]	; 0xfffffea4
   110f4:	cmp	r4, #2
   110f8:	bhi	115c8 <__assert_fail@plt+0x5c8>
   110fc:	lsl	ip, r4, #1
   11100:	add	r3, ip, r4
   11104:	ldr	r2, [r9]
   11108:	add	r3, sl, r3, lsl #2
   1110c:	str	r0, [r3, #4]
   11110:	mov	r3, r2
   11114:	ldrb	r1, [r2], #1
   11118:	cmp	r1, #9
   1111c:	bcc	11144 <__assert_fail@plt+0x144>
   11120:	cmp	r1, #13
   11124:	bls	11130 <__assert_fail@plt+0x130>
   11128:	cmp	r1, #32
   1112c:	bne	11144 <__assert_fail@plt+0x144>
   11130:	str	r2, [r9]
   11134:	mov	r3, r2
   11138:	ldrb	r1, [r2], #1
   1113c:	cmp	r1, #9
   11140:	bcs	11120 <__assert_fail@plt+0x120>
   11144:	add	ip, ip, r4
   11148:	cmp	r0, #105	; 0x69
   1114c:	add	ip, sl, ip, lsl #2
   11150:	str	r3, [ip, #8]
   11154:	beq	11204 <__assert_fail@plt+0x204>
   11158:	mov	r0, r3
   1115c:	mov	r1, fp
   11160:	str	r3, [sp, #8]
   11164:	bl	10d90 <strcmp@plt>
   11168:	ldr	r3, [sp, #8]
   1116c:	cmp	r0, #0
   11170:	beq	11078 <__assert_fail@plt+0x78>
   11174:	ldr	r2, [pc, #1300]	; 11690 <__assert_fail@plt+0x690>
   11178:	mov	r0, r3
   1117c:	str	r2, [sp]
   11180:	add	r3, sp, #24
   11184:	mov	r2, #10
   11188:	mov	r1, #0
   1118c:	bl	1494c <__assert_fail@plt+0x394c>
   11190:	mov	fp, r0
   11194:	bl	10f1c <__errno_location@plt>
   11198:	cmp	fp, #0
   1119c:	mov	ip, r0
   111a0:	beq	11510 <__assert_fail@plt+0x510>
   111a4:	cmp	fp, #1
   111a8:	beq	115fc <__assert_fail@plt+0x5fc>
   111ac:	ldr	r4, [r0]
   111b0:	str	r4, [ip]
   111b4:	mov	r2, #5
   111b8:	ldr	r1, [pc, #1236]	; 11694 <__assert_fail@plt+0x694>
   111bc:	mov	r0, #0
   111c0:	bl	10dfc <dcgettext@plt>
   111c4:	mov	r5, r0
   111c8:	ldr	r0, [r9]
   111cc:	bl	14128 <__assert_fail@plt+0x3128>
   111d0:	mov	r2, r5
   111d4:	mov	r1, r4
   111d8:	mov	r3, r0
   111dc:	mov	r0, #125	; 0x7d
   111e0:	bl	10e80 <error@plt>
   111e4:	cmp	r0, #111	; 0x6f
   111e8:	beq	110e8 <__assert_fail@plt+0xe8>
   111ec:	mov	r0, #125	; 0x7d
   111f0:	bl	117ec <__assert_fail@plt+0x7ec>
   111f4:	cmn	r0, #2
   111f8:	bne	111ec <__assert_fail@plt+0x1ec>
   111fc:	mov	r0, r4
   11200:	bl	117ec <__assert_fail@plt+0x7ec>
   11204:	ldrb	r2, [r3]
   11208:	cmp	r2, #76	; 0x4c
   1120c:	bne	11158 <__assert_fail@plt+0x158>
   11210:	ldr	r1, [pc, #1152]	; 11698 <__assert_fail@plt+0x698>
   11214:	mov	r2, #5
   11218:	mov	r0, #0
   1121c:	bl	10dfc <dcgettext@plt>
   11220:	mov	r1, #0
   11224:	mov	r2, r0
   11228:	mov	r0, r1
   1122c:	bl	10e80 <error@plt>
   11230:	b	111ec <__assert_fail@plt+0x1ec>
   11234:	ldr	r3, [pc, #1120]	; 1169c <__assert_fail@plt+0x69c>
   11238:	ldr	r3, [r3]
   1123c:	sub	r7, r7, r3
   11240:	cmp	r7, r4
   11244:	str	r3, [sp, #8]
   11248:	add	r3, r5, r3, lsl #2
   1124c:	str	r3, [sp, #12]
   11250:	movle	r2, #5
   11254:	ldrle	r1, [pc, #1092]	; 116a0 <__assert_fail@plt+0x6a0>
   11258:	ble	11218 <__assert_fail@plt+0x218>
   1125c:	ldr	r9, [pc, #1032]	; 1166c <__assert_fail@plt+0x66c>
   11260:	ldr	sl, [pc, #1084]	; 116a4 <__assert_fail@plt+0x6a4>
   11264:	ldr	r8, [pc, #1084]	; 116a8 <__assert_fail@plt+0x6a8>
   11268:	ldr	fp, [pc, #1084]	; 116ac <__assert_fail@plt+0x6ac>
   1126c:	mov	r7, r4
   11270:	mov	r6, r9
   11274:	ldr	r3, [r6, #8]
   11278:	cmp	r3, #0
   1127c:	beq	112e4 <__assert_fail@plt+0x2e4>
   11280:	ldrb	r3, [r3]
   11284:	ldr	r4, [r6, #4]
   11288:	cmp	r3, #76	; 0x4c
   1128c:	add	r3, r4, #128	; 0x80
   11290:	beq	11498 <__assert_fail@plt+0x498>
   11294:	cmp	r3, sl
   11298:	bhi	112a8 <__assert_fail@plt+0x2a8>
   1129c:	bl	10ebc <__ctype_toupper_loc@plt>
   112a0:	ldr	r3, [r0]
   112a4:	ldr	r4, [r3, r4, lsl #2]
   112a8:	ldr	r1, [r6]
   112ac:	mov	r2, #0
   112b0:	mov	r3, r4
   112b4:	stm	sp, {r1, r2}
   112b8:	add	r0, sp, #16
   112bc:	mov	r2, r8
   112c0:	mov	r1, fp
   112c4:	bl	15354 <__assert_fail@plt+0x4354>
   112c8:	cmp	r0, #0
   112cc:	blt	115c4 <__assert_fail@plt+0x5c4>
   112d0:	ldr	r0, [sp, #16]
   112d4:	bl	10fa0 <putenv@plt>
   112d8:	cmp	r0, #0
   112dc:	bne	11628 <__assert_fail@plt+0x628>
   112e0:	mov	r4, #1
   112e4:	add	r7, r7, #1
   112e8:	cmp	r7, #3
   112ec:	add	r6, r6, #12
   112f0:	bne	11274 <__assert_fail@plt+0x274>
   112f4:	cmp	r4, #0
   112f8:	moveq	r2, #5
   112fc:	ldreq	r1, [pc, #940]	; 116b0 <__assert_fail@plt+0x6b0>
   11300:	beq	11218 <__assert_fail@plt+0x218>
   11304:	ldr	r3, [pc, #936]	; 116b4 <__assert_fail@plt+0x6b4>
   11308:	mov	r1, #47	; 0x2f
   1130c:	ldr	r4, [r3]
   11310:	mov	r0, r4
   11314:	bl	10f10 <strchr@plt>
   11318:	cmp	r0, #0
   1131c:	beq	114d8 <__assert_fail@plt+0x4d8>
   11320:	mov	r0, r4
   11324:	bl	11c6c <__assert_fail@plt+0xc6c>
   11328:	str	r0, [r9, #36]	; 0x24
   1132c:	ldr	r3, [r9, #36]	; 0x24
   11330:	cmp	r3, #0
   11334:	beq	1153c <__assert_fail@plt+0x53c>
   11338:	ldr	r0, [pc, #888]	; 116b8 <__assert_fail@plt+0x6b8>
   1133c:	bl	10e8c <getenv@plt>
   11340:	ldr	r4, [r9, #36]	; 0x24
   11344:	ldr	r3, [pc, #880]	; 116bc <__assert_fail@plt+0x6bc>
   11348:	str	r4, [sp, #128]	; 0x80
   1134c:	ldrb	r2, [r4]
   11350:	str	r3, [sp, #132]	; 0x84
   11354:	mov	r3, #0
   11358:	cmp	r2, r3
   1135c:	str	r3, [sp, #136]	; 0x88
   11360:	mov	fp, r0
   11364:	beq	114c4 <__assert_fail@plt+0x4c4>
   11368:	ldr	sl, [pc, #848]	; 116c0 <__assert_fail@plt+0x6c0>
   1136c:	ldr	r8, [pc, #848]	; 116c4 <__assert_fail@plt+0x6c4>
   11370:	add	r6, sp, #128	; 0x80
   11374:	mov	r2, r4
   11378:	b	1139c <__assert_fail@plt+0x39c>
   1137c:	ldr	r0, [sp, #20]
   11380:	bl	10da8 <free@plt>
   11384:	ldr	r2, [r6, #4]!
   11388:	cmp	r2, #0
   1138c:	beq	115dc <__assert_fail@plt+0x5dc>
   11390:	ldrb	r3, [r2]
   11394:	cmp	r3, #0
   11398:	beq	114c8 <__assert_fail@plt+0x4c8>
   1139c:	mov	r3, sl
   113a0:	mov	r1, r8
   113a4:	add	r0, sp, #20
   113a8:	bl	15354 <__assert_fail@plt+0x4354>
   113ac:	cmp	r0, #0
   113b0:	blt	115c4 <__assert_fail@plt+0x5c4>
   113b4:	add	r2, sp, #24
   113b8:	ldr	r1, [sp, #20]
   113bc:	mov	r0, #3
   113c0:	bl	10fd0 <__xstat64@plt>
   113c4:	add	r7, sp, #24
   113c8:	cmp	r0, #0
   113cc:	bne	1137c <__assert_fail@plt+0x37c>
   113d0:	cmp	fp, #0
   113d4:	ldr	r3, [sp, #20]
   113d8:	beq	114fc <__assert_fail@plt+0x4fc>
   113dc:	str	r3, [sp]
   113e0:	mov	r0, r7
   113e4:	mov	r3, fp
   113e8:	ldr	r2, [pc, #712]	; 116b8 <__assert_fail@plt+0x6b8>
   113ec:	ldr	r1, [pc, #724]	; 116c8 <__assert_fail@plt+0x6c8>
   113f0:	bl	15354 <__assert_fail@plt+0x4354>
   113f4:	cmp	r0, #0
   113f8:	blt	115c4 <__assert_fail@plt+0x5c4>
   113fc:	ldr	r0, [sp, #20]
   11400:	bl	10da8 <free@plt>
   11404:	ldr	r0, [sp, #24]
   11408:	bl	10fa0 <putenv@plt>
   1140c:	mov	r4, r0
   11410:	bl	10f1c <__errno_location@plt>
   11414:	cmp	r4, #0
   11418:	mov	r6, r0
   1141c:	bne	11604 <__assert_fail@plt+0x604>
   11420:	ldr	r0, [r9, #36]	; 0x24
   11424:	bl	10da8 <free@plt>
   11428:	ldr	r9, [sp, #8]
   1142c:	ldr	r1, [sp, #12]
   11430:	ldr	r0, [r5, r9, lsl #2]
   11434:	bl	10dcc <execvp@plt>
   11438:	ldr	r6, [r6]
   1143c:	mov	r2, #5
   11440:	cmp	r6, #2
   11444:	ldr	r1, [pc, #640]	; 116cc <__assert_fail@plt+0x6cc>
   11448:	mov	r0, r4
   1144c:	moveq	r7, #127	; 0x7f
   11450:	movne	r7, #126	; 0x7e
   11454:	bl	10dfc <dcgettext@plt>
   11458:	mov	r8, r0
   1145c:	ldr	r0, [r5, r9, lsl #2]
   11460:	bl	14128 <__assert_fail@plt+0x3128>
   11464:	mov	r2, r8
   11468:	mov	r1, r6
   1146c:	mov	r3, r0
   11470:	mov	r0, r4
   11474:	bl	10e80 <error@plt>
   11478:	ldr	r3, [pc, #460]	; 1164c <__assert_fail@plt+0x64c>
   1147c:	ldr	r2, [sp, #140]	; 0x8c
   11480:	mov	r0, r7
   11484:	ldr	r3, [r3]
   11488:	cmp	r2, r3
   1148c:	bne	11624 <__assert_fail@plt+0x624>
   11490:	add	sp, sp, #148	; 0x94
   11494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11498:	cmp	r3, sl
   1149c:	bhi	114ac <__assert_fail@plt+0x4ac>
   114a0:	bl	10ebc <__ctype_toupper_loc@plt>
   114a4:	ldr	r3, [r0]
   114a8:	ldr	r4, [r3, r4, lsl #2]
   114ac:	mov	r3, r4
   114b0:	mov	r2, r8
   114b4:	ldr	r1, [pc, #532]	; 116d0 <__assert_fail@plt+0x6d0>
   114b8:	add	r0, sp, #16
   114bc:	bl	15354 <__assert_fail@plt+0x4354>
   114c0:	b	112c8 <__assert_fail@plt+0x2c8>
   114c4:	add	r7, sp, #24
   114c8:	ldr	r0, [pc, #496]	; 116c0 <__assert_fail@plt+0x6c0>
   114cc:	bl	148c4 <__assert_fail@plt+0x38c4>
   114d0:	str	r0, [sp, #20]
   114d4:	b	113d0 <__assert_fail@plt+0x3d0>
   114d8:	ldr	r0, [pc, #500]	; 116d4 <__assert_fail@plt+0x6d4>
   114dc:	bl	14920 <__assert_fail@plt+0x3920>
   114e0:	subs	r6, r0, #0
   114e4:	beq	1154c <__assert_fail@plt+0x54c>
   114e8:	bl	11c6c <__assert_fail@plt+0xc6c>
   114ec:	str	r0, [r9, #36]	; 0x24
   114f0:	mov	r0, r6
   114f4:	bl	10da8 <free@plt>
   114f8:	b	1132c <__assert_fail@plt+0x32c>
   114fc:	mov	r0, r7
   11500:	ldr	r2, [pc, #432]	; 116b8 <__assert_fail@plt+0x6b8>
   11504:	ldr	r1, [pc, #460]	; 116d8 <__assert_fail@plt+0x6d8>
   11508:	bl	15354 <__assert_fail@plt+0x4354>
   1150c:	b	113f4 <__assert_fail@plt+0x3f4>
   11510:	ldrd	r0, [sp, #24]
   11514:	mov	r3, #0
   11518:	mvn	r2, #0
   1151c:	cmp	r1, r3
   11520:	cmpeq	r0, r2
   11524:	bhi	115fc <__assert_fail@plt+0x5fc>
   11528:	mov	r3, #12
   1152c:	str	fp, [ip]
   11530:	mul	r3, r3, r4
   11534:	str	r0, [sl, r3]
   11538:	b	11070 <__assert_fail@plt+0x70>
   1153c:	ldr	r0, [pc, #376]	; 116bc <__assert_fail@plt+0x6bc>
   11540:	bl	148c4 <__assert_fail@plt+0x38c4>
   11544:	str	r0, [r9, #36]	; 0x24
   11548:	b	11338 <__assert_fail@plt+0x338>
   1154c:	ldr	r0, [pc, #392]	; 116dc <__assert_fail@plt+0x6dc>
   11550:	bl	10e8c <getenv@plt>
   11554:	subs	r6, r0, #0
   11558:	beq	114f0 <__assert_fail@plt+0x4f0>
   1155c:	bl	148c4 <__assert_fail@plt+0x38c4>
   11560:	ldr	r1, [pc, #376]	; 116e0 <__assert_fail@plt+0x6e0>
   11564:	ldr	r7, [pc, #372]	; 116e0 <__assert_fail@plt+0x6e0>
   11568:	mov	r6, r0
   1156c:	bl	10f88 <strtok@plt>
   11570:	b	11584 <__assert_fail@plt+0x584>
   11574:	bl	10da8 <free@plt>
   11578:	mov	r1, r7
   1157c:	mov	r0, #0
   11580:	bl	10f88 <strtok@plt>
   11584:	cmp	r0, #0
   11588:	beq	114f0 <__assert_fail@plt+0x4f0>
   1158c:	mov	r2, #0
   11590:	mov	r1, r4
   11594:	bl	11de0 <__assert_fail@plt+0xde0>
   11598:	mov	r1, #1
   1159c:	mov	r8, r0
   115a0:	bl	10f64 <access@plt>
   115a4:	cmp	r0, #0
   115a8:	mov	r0, r8
   115ac:	bne	11574 <__assert_fail@plt+0x574>
   115b0:	bl	11c6c <__assert_fail@plt+0xc6c>
   115b4:	str	r0, [r9, #36]	; 0x24
   115b8:	mov	r0, r8
   115bc:	bl	10da8 <free@plt>
   115c0:	b	114f0 <__assert_fail@plt+0x4f0>
   115c4:	bl	148e0 <__assert_fail@plt+0x38e0>
   115c8:	ldr	r3, [pc, #276]	; 116e4 <__assert_fail@plt+0x6e4>
   115cc:	ldr	r2, [pc, #276]	; 116e8 <__assert_fail@plt+0x6e8>
   115d0:	ldr	r1, [pc, #276]	; 116ec <__assert_fail@plt+0x6ec>
   115d4:	ldr	r0, [pc, #276]	; 116f0 <__assert_fail@plt+0x6f0>
   115d8:	bl	11000 <__assert_fail@plt>
   115dc:	mov	r4, r2
   115e0:	ldr	r1, [pc, #268]	; 116f4 <__assert_fail@plt+0x6f4>
   115e4:	mov	r2, #5
   115e8:	mov	r0, r4
   115ec:	bl	10dfc <dcgettext@plt>
   115f0:	mov	r5, r0
   115f4:	ldr	r0, [pc, #196]	; 116c0 <__assert_fail@plt+0x6c0>
   115f8:	b	111cc <__assert_fail@plt+0x1cc>
   115fc:	mov	r4, #75	; 0x4b
   11600:	b	111b0 <__assert_fail@plt+0x1b0>
   11604:	mov	r2, #5
   11608:	ldr	r1, [pc, #232]	; 116f8 <__assert_fail@plt+0x6f8>
   1160c:	mov	r0, #0
   11610:	ldr	r4, [r6]
   11614:	bl	10dfc <dcgettext@plt>
   11618:	mov	r5, r0
   1161c:	ldr	r0, [sp, #24]
   11620:	b	111cc <__assert_fail@plt+0x1cc>
   11624:	bl	10e08 <__stack_chk_fail@plt>
   11628:	bl	10f1c <__errno_location@plt>
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #192]	; 116f8 <__assert_fail@plt+0x6f8>
   11634:	ldr	r4, [r0]
   11638:	mov	r0, #0
   1163c:	bl	10dfc <dcgettext@plt>
   11640:	mov	r5, r0
   11644:	ldr	r0, [sp, #16]
   11648:	b	111cc <__assert_fail@plt+0x1cc>
   1164c:	andeq	r8, r2, r8, lsl #30
   11650:	andeq	r7, r1, r4, lsr #25
   11654:	andeq	r7, r1, r4, lsr #29
   11658:	strdeq	r7, [r1], -r8
   1165c:	strdeq	r9, [r2], -ip
   11660:	muleq	r1, r4, fp
   11664:	muleq	r1, r0, r8
   11668:	andeq	r7, r1, r8, asr pc
   1166c:	andeq	r9, r2, r0, ror #2
   11670:	andeq	r9, r2, r8, asr r1
   11674:	andeq	r7, r1, r8, lsr #30
   11678:	andeq	r9, r2, r4, asr r1
   1167c:	strdeq	r9, [r2], -r8
   11680:	andeq	r7, r1, r8, asr #30
   11684:	strdeq	r7, [r1], -r0
   11688:	strdeq	r7, [r1], -r4
   1168c:	andeq	r7, r1, r4, lsr #16
   11690:	andeq	r7, r1, ip, lsr #30
   11694:	andeq	r7, r1, r8, lsr pc
   11698:	andeq	r7, r1, r4, lsl #30
   1169c:	andeq	r9, r2, r8, asr #2
   116a0:	andeq	r7, r1, r0, ror #30
   116a4:	andeq	r0, r0, pc, ror r1
   116a8:	andeq	r7, r1, r0, ror pc
   116ac:	andeq	r7, r1, r4, lsl #31
   116b0:			; <UNDEFINED> instruction: 0x00017fbc
   116b4:	muleq	r2, r0, r1
   116b8:	andeq	r8, r1, ip, lsr #32
   116bc:	andeq	r8, r1, r4
   116c0:	andeq	r8, r1, r8, lsr r0
   116c4:	andeq	r8, r1, r8, asr #32
   116c8:	andeq	r8, r1, r4, rrx
   116cc:	andeq	r8, r1, r8, ror r0
   116d0:	andeq	r7, r1, ip, ror pc
   116d4:	andeq	r7, r1, r8, ror #31
   116d8:	andeq	r8, r1, r0, ror r0
   116dc:	strdeq	r7, [r1], -r8
   116e0:	andeq	r8, r1, r0
   116e4:	andeq	r7, r1, r8, lsl #17
   116e8:	andeq	r0, r0, pc, asr #2
   116ec:			; <UNDEFINED> instruction: 0x00017eb8
   116f0:	andeq	r7, r1, r8, asr #29
   116f4:	andeq	r8, r1, r0, asr r0
   116f8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   116fc:	mov	fp, #0
   11700:	mov	lr, #0
   11704:	pop	{r1}		; (ldr r1, [sp], #4)
   11708:	mov	r2, sp
   1170c:	push	{r2}		; (str r2, [sp, #-4]!)
   11710:	push	{r0}		; (str r0, [sp, #-4]!)
   11714:	ldr	ip, [pc, #16]	; 1172c <__assert_fail@plt+0x72c>
   11718:	push	{ip}		; (str ip, [sp, #-4]!)
   1171c:	ldr	r0, [pc, #12]	; 11730 <__assert_fail@plt+0x730>
   11720:	ldr	r3, [pc, #12]	; 11734 <__assert_fail@plt+0x734>
   11724:	bl	10ea4 <__libc_start_main@plt>
   11728:	bl	10fe8 <abort@plt>
   1172c:	strdeq	r7, [r1], -ip
   11730:	andeq	r1, r1, ip
   11734:	muleq	r1, ip, r7
   11738:	ldr	r3, [pc, #20]	; 11754 <__assert_fail@plt+0x754>
   1173c:	ldr	r2, [pc, #20]	; 11758 <__assert_fail@plt+0x758>
   11740:	add	r3, pc, r3
   11744:	ldr	r2, [r3, r2]
   11748:	cmp	r2, #0
   1174c:	bxeq	lr
   11750:	b	10ec8 <__gmon_start__@plt>
   11754:			; <UNDEFINED> instruction: 0x000178b8
   11758:	andeq	r0, r0, ip, ror #1
   1175c:	ldr	r0, [pc, #24]	; 1177c <__assert_fail@plt+0x77c>
   11760:	ldr	r3, [pc, #24]	; 11780 <__assert_fail@plt+0x780>
   11764:	cmp	r3, r0
   11768:	bxeq	lr
   1176c:	ldr	r3, [pc, #16]	; 11784 <__assert_fail@plt+0x784>
   11770:	cmp	r3, #0
   11774:	bxeq	lr
   11778:	bx	r3
   1177c:	andeq	r9, r2, r0, asr #2
   11780:	andeq	r9, r2, r0, asr #2
   11784:	andeq	r0, r0, r0
   11788:	ldr	r0, [pc, #36]	; 117b4 <__assert_fail@plt+0x7b4>
   1178c:	ldr	r1, [pc, #36]	; 117b8 <__assert_fail@plt+0x7b8>
   11790:	sub	r1, r1, r0
   11794:	asr	r1, r1, #2
   11798:	add	r1, r1, r1, lsr #31
   1179c:	asrs	r1, r1, #1
   117a0:	bxeq	lr
   117a4:	ldr	r3, [pc, #16]	; 117bc <__assert_fail@plt+0x7bc>
   117a8:	cmp	r3, #0
   117ac:	bxeq	lr
   117b0:	bx	r3
   117b4:	andeq	r9, r2, r0, asr #2
   117b8:	andeq	r9, r2, r0, asr #2
   117bc:	andeq	r0, r0, r0
   117c0:	push	{r4, lr}
   117c4:	ldr	r4, [pc, #24]	; 117e4 <__assert_fail@plt+0x7e4>
   117c8:	ldrb	r3, [r4]
   117cc:	cmp	r3, #0
   117d0:	popne	{r4, pc}
   117d4:	bl	1175c <__assert_fail@plt+0x75c>
   117d8:	mov	r3, #1
   117dc:	strb	r3, [r4]
   117e0:	pop	{r4, pc}
   117e4:	andeq	r9, r2, ip, asr r1
   117e8:	b	11788 <__assert_fail@plt+0x788>
   117ec:	ldr	r3, [pc, #792]	; 11b0c <__assert_fail@plt+0xb0c>
   117f0:	push	{r7, lr}
   117f4:	sub	sp, sp, #64	; 0x40
   117f8:	ldr	r3, [r3]
   117fc:	subs	r4, r0, #0
   11800:	str	r3, [sp, #60]	; 0x3c
   11804:	beq	11840 <__assert_fail@plt+0x840>
   11808:	ldr	r3, [pc, #768]	; 11b10 <__assert_fail@plt+0xb10>
   1180c:	mov	r2, #5
   11810:	ldr	r1, [pc, #764]	; 11b14 <__assert_fail@plt+0xb14>
   11814:	mov	r0, #0
   11818:	ldr	r5, [r3]
   1181c:	bl	10dfc <dcgettext@plt>
   11820:	ldr	r3, [pc, #752]	; 11b18 <__assert_fail@plt+0xb18>
   11824:	mov	r1, #1
   11828:	ldr	r3, [r3]
   1182c:	mov	r2, r0
   11830:	mov	r0, r5
   11834:	bl	10f58 <__fprintf_chk@plt>
   11838:	mov	r0, r4
   1183c:	bl	10ef8 <exit@plt>
   11840:	mov	r2, #5
   11844:	ldr	r1, [pc, #720]	; 11b1c <__assert_fail@plt+0xb1c>
   11848:	bl	10dfc <dcgettext@plt>
   1184c:	ldr	r3, [pc, #708]	; 11b18 <__assert_fail@plt+0xb18>
   11850:	ldr	r5, [pc, #712]	; 11b20 <__assert_fail@plt+0xb20>
   11854:	ldr	r2, [r3]
   11858:	mov	r1, r0
   1185c:	mov	r0, #1
   11860:	bl	10f40 <__printf_chk@plt>
   11864:	mov	r2, #5
   11868:	ldr	r1, [pc, #692]	; 11b24 <__assert_fail@plt+0xb24>
   1186c:	mov	r0, r4
   11870:	bl	10dfc <dcgettext@plt>
   11874:	ldr	r1, [r5]
   11878:	bl	10d78 <fputs_unlocked@plt>
   1187c:	mov	r2, #5
   11880:	ldr	r1, [pc, #672]	; 11b28 <__assert_fail@plt+0xb28>
   11884:	mov	r0, r4
   11888:	bl	10dfc <dcgettext@plt>
   1188c:	ldr	r1, [r5]
   11890:	bl	10d78 <fputs_unlocked@plt>
   11894:	mov	r2, #5
   11898:	ldr	r1, [pc, #652]	; 11b2c <__assert_fail@plt+0xb2c>
   1189c:	mov	r0, r4
   118a0:	bl	10dfc <dcgettext@plt>
   118a4:	ldr	r1, [r5]
   118a8:	bl	10d78 <fputs_unlocked@plt>
   118ac:	mov	r2, #5
   118b0:	ldr	r1, [pc, #632]	; 11b30 <__assert_fail@plt+0xb30>
   118b4:	mov	r0, r4
   118b8:	bl	10dfc <dcgettext@plt>
   118bc:	ldr	r1, [r5]
   118c0:	bl	10d78 <fputs_unlocked@plt>
   118c4:	mov	r2, #5
   118c8:	ldr	r1, [pc, #612]	; 11b34 <__assert_fail@plt+0xb34>
   118cc:	mov	r0, r4
   118d0:	bl	10dfc <dcgettext@plt>
   118d4:	ldr	r1, [r5]
   118d8:	bl	10d78 <fputs_unlocked@plt>
   118dc:	mov	r2, #5
   118e0:	ldr	r1, [pc, #592]	; 11b38 <__assert_fail@plt+0xb38>
   118e4:	mov	r0, r4
   118e8:	bl	10dfc <dcgettext@plt>
   118ec:	ldr	r1, [r5]
   118f0:	bl	10d78 <fputs_unlocked@plt>
   118f4:	mov	r2, #5
   118f8:	ldr	r1, [pc, #572]	; 11b3c <__assert_fail@plt+0xb3c>
   118fc:	mov	r0, r4
   11900:	bl	10dfc <dcgettext@plt>
   11904:	ldr	r1, [r5]
   11908:	bl	10d78 <fputs_unlocked@plt>
   1190c:	mov	r2, #5
   11910:	ldr	r1, [pc, #552]	; 11b40 <__assert_fail@plt+0xb40>
   11914:	mov	r0, r4
   11918:	bl	10dfc <dcgettext@plt>
   1191c:	ldr	r1, [r5]
   11920:	bl	10d78 <fputs_unlocked@plt>
   11924:	mov	r2, #5
   11928:	ldr	r1, [pc, #532]	; 11b44 <__assert_fail@plt+0xb44>
   1192c:	mov	r0, r4
   11930:	bl	10dfc <dcgettext@plt>
   11934:	ldr	r1, [r5]
   11938:	bl	10d78 <fputs_unlocked@plt>
   1193c:	ldr	lr, [pc, #516]	; 11b48 <__assert_fail@plt+0xb48>
   11940:	add	ip, sp, #4
   11944:	ldm	lr!, {r0, r1, r2, r3}
   11948:	stmia	ip!, {r0, r1, r2, r3}
   1194c:	ldm	lr!, {r0, r1, r2, r3}
   11950:	ldr	r6, [sp, #4]
   11954:	stmia	ip!, {r0, r1, r2, r3}
   11958:	cmp	r6, #0
   1195c:	ldm	lr!, {r0, r1, r2, r3}
   11960:	addeq	r5, sp, #4
   11964:	stmia	ip!, {r0, r1, r2, r3}
   11968:	ldm	lr, {r0, r1}
   1196c:	stm	ip, {r0, r1}
   11970:	beq	119a0 <__assert_fail@plt+0x9a0>
   11974:	ldr	r7, [pc, #464]	; 11b4c <__assert_fail@plt+0xb4c>
   11978:	add	r5, sp, #4
   1197c:	b	1198c <__assert_fail@plt+0x98c>
   11980:	ldr	r6, [r5, #8]!
   11984:	cmp	r6, #0
   11988:	beq	119a0 <__assert_fail@plt+0x9a0>
   1198c:	mov	r1, r6
   11990:	mov	r0, r7
   11994:	bl	10d90 <strcmp@plt>
   11998:	cmp	r0, #0
   1199c:	bne	11980 <__assert_fail@plt+0x980>
   119a0:	ldr	r5, [r5, #4]
   119a4:	mov	r2, #5
   119a8:	cmp	r5, #0
   119ac:	ldr	r1, [pc, #412]	; 11b50 <__assert_fail@plt+0xb50>
   119b0:	beq	11a58 <__assert_fail@plt+0xa58>
   119b4:	mov	r0, #0
   119b8:	bl	10dfc <dcgettext@plt>
   119bc:	ldr	r3, [pc, #400]	; 11b54 <__assert_fail@plt+0xb54>
   119c0:	ldr	r2, [pc, #400]	; 11b58 <__assert_fail@plt+0xb58>
   119c4:	mov	r1, r0
   119c8:	mov	r0, #1
   119cc:	bl	10f40 <__printf_chk@plt>
   119d0:	mov	r1, #0
   119d4:	mov	r0, #5
   119d8:	bl	10f94 <setlocale@plt>
   119dc:	cmp	r0, #0
   119e0:	ldreq	r6, [pc, #356]	; 11b4c <__assert_fail@plt+0xb4c>
   119e4:	beq	11a00 <__assert_fail@plt+0xa00>
   119e8:	mov	r2, #3
   119ec:	ldr	r1, [pc, #360]	; 11b5c <__assert_fail@plt+0xb5c>
   119f0:	bl	10fdc <strncmp@plt>
   119f4:	ldr	r6, [pc, #336]	; 11b4c <__assert_fail@plt+0xb4c>
   119f8:	cmp	r0, #0
   119fc:	bne	11ae8 <__assert_fail@plt+0xae8>
   11a00:	mov	r2, #5
   11a04:	ldr	r1, [pc, #340]	; 11b60 <__assert_fail@plt+0xb60>
   11a08:	mov	r0, #0
   11a0c:	bl	10dfc <dcgettext@plt>
   11a10:	ldr	r3, [pc, #308]	; 11b4c <__assert_fail@plt+0xb4c>
   11a14:	ldr	r2, [pc, #312]	; 11b54 <__assert_fail@plt+0xb54>
   11a18:	mov	r1, r0
   11a1c:	mov	r0, #1
   11a20:	bl	10f40 <__printf_chk@plt>
   11a24:	mov	r2, #5
   11a28:	ldr	r1, [pc, #308]	; 11b64 <__assert_fail@plt+0xb64>
   11a2c:	mov	r0, #0
   11a30:	bl	10dfc <dcgettext@plt>
   11a34:	ldr	r2, [pc, #300]	; 11b68 <__assert_fail@plt+0xb68>
   11a38:	cmp	r5, r6
   11a3c:	ldr	r3, [pc, #296]	; 11b6c <__assert_fail@plt+0xb6c>
   11a40:	movne	r3, r2
   11a44:	mov	r1, r0
   11a48:	mov	r2, r5
   11a4c:	mov	r0, #1
   11a50:	bl	10f40 <__printf_chk@plt>
   11a54:	b	11838 <__assert_fail@plt+0x838>
   11a58:	mov	r0, r5
   11a5c:	bl	10dfc <dcgettext@plt>
   11a60:	ldr	r3, [pc, #236]	; 11b54 <__assert_fail@plt+0xb54>
   11a64:	ldr	r2, [pc, #236]	; 11b58 <__assert_fail@plt+0xb58>
   11a68:	mov	r1, r0
   11a6c:	mov	r0, #1
   11a70:	bl	10f40 <__printf_chk@plt>
   11a74:	mov	r1, r5
   11a78:	mov	r0, #5
   11a7c:	bl	10f94 <setlocale@plt>
   11a80:	cmp	r0, #0
   11a84:	beq	11a9c <__assert_fail@plt+0xa9c>
   11a88:	mov	r2, #3
   11a8c:	ldr	r1, [pc, #200]	; 11b5c <__assert_fail@plt+0xb5c>
   11a90:	bl	10fdc <strncmp@plt>
   11a94:	cmp	r0, #0
   11a98:	bne	11ae0 <__assert_fail@plt+0xae0>
   11a9c:	mov	r2, #5
   11aa0:	ldr	r1, [pc, #184]	; 11b60 <__assert_fail@plt+0xb60>
   11aa4:	mov	r0, #0
   11aa8:	bl	10dfc <dcgettext@plt>
   11aac:	ldr	r3, [pc, #152]	; 11b4c <__assert_fail@plt+0xb4c>
   11ab0:	ldr	r2, [pc, #156]	; 11b54 <__assert_fail@plt+0xb54>
   11ab4:	mov	r5, r3
   11ab8:	mov	r1, r0
   11abc:	mov	r0, #1
   11ac0:	bl	10f40 <__printf_chk@plt>
   11ac4:	ldr	r1, [pc, #152]	; 11b64 <__assert_fail@plt+0xb64>
   11ac8:	mov	r2, #5
   11acc:	mov	r0, #0
   11ad0:	bl	10dfc <dcgettext@plt>
   11ad4:	ldr	r3, [pc, #144]	; 11b6c <__assert_fail@plt+0xb6c>
   11ad8:	mov	r1, r0
   11adc:	b	11a48 <__assert_fail@plt+0xa48>
   11ae0:	ldr	r6, [pc, #100]	; 11b4c <__assert_fail@plt+0xb4c>
   11ae4:	mov	r5, r6
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #124]	; 11b70 <__assert_fail@plt+0xb70>
   11af0:	mov	r0, #0
   11af4:	bl	10dfc <dcgettext@plt>
   11af8:	ldr	r2, [pc, #76]	; 11b4c <__assert_fail@plt+0xb4c>
   11afc:	mov	r1, r0
   11b00:	mov	r0, #1
   11b04:	bl	10f40 <__printf_chk@plt>
   11b08:	b	11a00 <__assert_fail@plt+0xa00>
   11b0c:	andeq	r8, r2, r8, lsl #30
   11b10:	andeq	r9, r2, r0, asr r1
   11b14:	strdeq	r7, [r1], -r8
   11b18:	muleq	r2, r0, r1
   11b1c:	andeq	r7, r1, r0, lsr #18
   11b20:	andeq	r9, r2, r4, asr r1
   11b24:	andeq	r7, r1, r0, asr #18
   11b28:	andeq	r7, r1, ip, lsl #19
   11b2c:	ldrdeq	r7, [r1], -r8
   11b30:	muleq	r1, r0, sl
   11b34:	andeq	r7, r1, r0, asr #21
   11b38:	strdeq	r7, [r1], -r8
   11b3c:	andeq	r7, r1, r8, ror #22
   11b40:	andeq	r7, r1, r8, lsr #23
   11b44:	andeq	r7, r1, r8, lsr #25
   11b48:	andeq	r7, r1, r4, lsr #16
   11b4c:	strdeq	r7, [r1], -r0
   11b50:			; <UNDEFINED> instruction: 0x00017db4
   11b54:	andeq	r7, r1, ip, asr #27
   11b58:	strdeq	r7, [r1], -r4
   11b5c:	andeq	r7, r1, r4, lsl #28
   11b60:	andeq	r7, r1, r0, asr lr
   11b64:	andeq	r7, r1, r0, ror lr
   11b68:	andeq	r7, r1, r4, lsr #25
   11b6c:	muleq	r1, ip, r0
   11b70:	andeq	r7, r1, r8, lsl #28
   11b74:	ldr	r3, [pc, #4]	; 11b80 <__assert_fail@plt+0xb80>
   11b78:	str	r0, [r3]
   11b7c:	bx	lr
   11b80:	andeq	r9, r2, r8, lsl #3
   11b84:	ldr	r3, [pc, #4]	; 11b90 <__assert_fail@plt+0xb90>
   11b88:	strb	r0, [r3, #4]
   11b8c:	bx	lr
   11b90:	andeq	r9, r2, r8, lsl #3
   11b94:	ldr	r3, [pc, #180]	; 11c50 <__assert_fail@plt+0xc50>
   11b98:	push	{r4, r5, r6, lr}
   11b9c:	sub	sp, sp, #8
   11ba0:	ldr	r0, [r3]
   11ba4:	bl	156d0 <__assert_fail@plt+0x46d0>
   11ba8:	cmp	r0, #0
   11bac:	beq	11bd4 <__assert_fail@plt+0xbd4>
   11bb0:	bl	10f1c <__errno_location@plt>
   11bb4:	ldr	r5, [pc, #152]	; 11c54 <__assert_fail@plt+0xc54>
   11bb8:	ldrb	r3, [r5, #4]
   11bbc:	cmp	r3, #0
   11bc0:	mov	r4, r0
   11bc4:	beq	11bf0 <__assert_fail@plt+0xbf0>
   11bc8:	ldr	r3, [r0]
   11bcc:	cmp	r3, #32
   11bd0:	bne	11bf0 <__assert_fail@plt+0xbf0>
   11bd4:	ldr	r3, [pc, #124]	; 11c58 <__assert_fail@plt+0xc58>
   11bd8:	ldr	r0, [r3]
   11bdc:	bl	156d0 <__assert_fail@plt+0x46d0>
   11be0:	cmp	r0, #0
   11be4:	bne	11c30 <__assert_fail@plt+0xc30>
   11be8:	add	sp, sp, #8
   11bec:	pop	{r4, r5, r6, pc}
   11bf0:	mov	r2, #5
   11bf4:	ldr	r1, [pc, #96]	; 11c5c <__assert_fail@plt+0xc5c>
   11bf8:	mov	r0, #0
   11bfc:	bl	10dfc <dcgettext@plt>
   11c00:	mov	r6, r0
   11c04:	ldr	r0, [r5]
   11c08:	cmp	r0, #0
   11c0c:	beq	11c3c <__assert_fail@plt+0xc3c>
   11c10:	ldr	r4, [r4]
   11c14:	bl	13f48 <__assert_fail@plt+0x2f48>
   11c18:	mov	r1, r4
   11c1c:	str	r6, [sp]
   11c20:	ldr	r2, [pc, #56]	; 11c60 <__assert_fail@plt+0xc60>
   11c24:	mov	r3, r0
   11c28:	mov	r0, #0
   11c2c:	bl	10e80 <error@plt>
   11c30:	ldr	r3, [pc, #44]	; 11c64 <__assert_fail@plt+0xc64>
   11c34:	ldr	r0, [r3]
   11c38:	bl	10db4 <_exit@plt>
   11c3c:	mov	r3, r6
   11c40:	ldr	r1, [r4]
   11c44:	ldr	r2, [pc, #28]	; 11c68 <__assert_fail@plt+0xc68>
   11c48:	bl	10e80 <error@plt>
   11c4c:	b	11c30 <__assert_fail@plt+0xc30>
   11c50:	andeq	r9, r2, r4, asr r1
   11c54:	andeq	r9, r2, r8, lsl #3
   11c58:	andeq	r9, r2, r0, asr r1
   11c5c:	andeq	r8, r1, r0, lsr r1
   11c60:	andeq	r8, r1, ip, lsr r1
   11c64:	strdeq	r9, [r2], -ip
   11c68:	andeq	r8, r1, r0, asr #2
   11c6c:	push	{r4, lr}
   11c70:	bl	11ce8 <__assert_fail@plt+0xce8>
   11c74:	cmp	r0, #0
   11c78:	popne	{r4, pc}
   11c7c:	bl	148e0 <__assert_fail@plt+0x38e0>
   11c80:	push	{r4, r5, r6, lr}
   11c84:	mov	r4, r0
   11c88:	ldrb	ip, [r0]
   11c8c:	sub	r5, ip, #47	; 0x2f
   11c90:	bl	11d40 <__assert_fail@plt+0xd40>
   11c94:	clz	r5, r5
   11c98:	lsr	r5, r5, #5
   11c9c:	sub	r0, r0, r4
   11ca0:	cmp	r0, r5
   11ca4:	popls	{r4, r5, r6, pc}
   11ca8:	add	r3, r4, r0
   11cac:	ldrb	r3, [r3, #-1]
   11cb0:	cmp	r3, #47	; 0x2f
   11cb4:	popne	{r4, r5, r6, pc}
   11cb8:	sub	r0, r0, #2
   11cbc:	sub	ip, r4, #1
   11cc0:	add	r3, r4, r0
   11cc4:	add	ip, ip, r5
   11cc8:	rsb	r2, r4, #1
   11ccc:	cmp	r3, ip
   11cd0:	add	r0, r2, r3
   11cd4:	popeq	{r4, r5, r6, pc}
   11cd8:	ldrb	r1, [r3], #-1
   11cdc:	cmp	r1, #47	; 0x2f
   11ce0:	beq	11ccc <__assert_fail@plt+0xccc>
   11ce4:	pop	{r4, r5, r6, pc}
   11ce8:	push	{r4, r5, r6, lr}
   11cec:	mov	r6, r0
   11cf0:	bl	11c80 <__assert_fail@plt+0xc80>
   11cf4:	add	r3, r0, #1
   11cf8:	mov	r4, r0
   11cfc:	cmp	r0, #0
   11d00:	movne	r0, r3
   11d04:	addeq	r0, r3, #1
   11d08:	bl	10e98 <malloc@plt>
   11d0c:	subs	r5, r0, #0
   11d10:	beq	11d38 <__assert_fail@plt+0xd38>
   11d14:	mov	r2, r4
   11d18:	mov	r1, r6
   11d1c:	bl	10dc0 <memcpy@plt>
   11d20:	cmp	r4, #0
   11d24:	moveq	r3, #46	; 0x2e
   11d28:	moveq	r4, #1
   11d2c:	strbeq	r3, [r5]
   11d30:	mov	r3, #0
   11d34:	strb	r3, [r5, r4]
   11d38:	mov	r0, r5
   11d3c:	pop	{r4, r5, r6, pc}
   11d40:	ldrb	r3, [r0]
   11d44:	cmp	r3, #47	; 0x2f
   11d48:	bne	11d58 <__assert_fail@plt+0xd58>
   11d4c:	ldrb	r3, [r0, #1]!
   11d50:	cmp	r3, #47	; 0x2f
   11d54:	beq	11d4c <__assert_fail@plt+0xd4c>
   11d58:	cmp	r3, #0
   11d5c:	bxeq	lr
   11d60:	mov	r2, r0
   11d64:	mov	r1, #0
   11d68:	cmp	r3, #47	; 0x2f
   11d6c:	moveq	r1, #1
   11d70:	beq	11d80 <__assert_fail@plt+0xd80>
   11d74:	cmp	r1, #0
   11d78:	movne	r0, r2
   11d7c:	movne	r1, #0
   11d80:	ldrb	r3, [r2, #1]!
   11d84:	cmp	r3, #0
   11d88:	bne	11d68 <__assert_fail@plt+0xd68>
   11d8c:	bx	lr
   11d90:	push	{r4, lr}
   11d94:	mov	r4, r0
   11d98:	bl	10f04 <strlen@plt>
   11d9c:	cmp	r0, #1
   11da0:	popls	{r4, pc}
   11da4:	add	r2, r4, r0
   11da8:	mov	r3, r0
   11dac:	ldrb	r2, [r2, #-1]
   11db0:	cmp	r2, #47	; 0x2f
   11db4:	subeq	r3, r0, #2
   11db8:	addeq	r3, r4, r3
   11dbc:	rsbeq	r1, r4, #1
   11dc0:	popne	{r4, pc}
   11dc4:	cmp	r3, r4
   11dc8:	add	r0, r1, r3
   11dcc:	popeq	{r4, pc}
   11dd0:	ldrb	r2, [r3], #-1
   11dd4:	cmp	r2, #47	; 0x2f
   11dd8:	popne	{r4, pc}
   11ddc:	b	11dc4 <__assert_fail@plt+0xdc4>
   11de0:	push	{r4, lr}
   11de4:	bl	11df4 <__assert_fail@plt+0xdf4>
   11de8:	cmp	r0, #0
   11dec:	popne	{r4, pc}
   11df0:	bl	148e0 <__assert_fail@plt+0x38e0>
   11df4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11df8:	mov	r6, r1
   11dfc:	mov	r9, r2
   11e00:	mov	r7, r0
   11e04:	bl	11d40 <__assert_fail@plt+0xd40>
   11e08:	mov	r4, r0
   11e0c:	bl	11d90 <__assert_fail@plt+0xd90>
   11e10:	sub	r4, r4, r7
   11e14:	mov	r5, r0
   11e18:	mov	r0, r6
   11e1c:	bl	10f04 <strlen@plt>
   11e20:	cmp	r5, #0
   11e24:	add	r4, r4, r5
   11e28:	mov	r8, r0
   11e2c:	beq	11eac <__assert_fail@plt+0xeac>
   11e30:	add	r3, r7, r4
   11e34:	ldrb	r3, [r3, #-1]
   11e38:	cmp	r3, #47	; 0x2f
   11e3c:	beq	11ea0 <__assert_fail@plt+0xea0>
   11e40:	ldrb	r3, [r6]
   11e44:	cmp	r3, #47	; 0x2f
   11e48:	beq	11ea0 <__assert_fail@plt+0xea0>
   11e4c:	mov	r5, #1
   11e50:	mov	sl, #47	; 0x2f
   11e54:	add	r0, r8, #1
   11e58:	add	r0, r0, r4
   11e5c:	add	r0, r0, r5
   11e60:	bl	10e98 <malloc@plt>
   11e64:	subs	fp, r0, #0
   11e68:	beq	11e98 <__assert_fail@plt+0xe98>
   11e6c:	mov	r2, r4
   11e70:	mov	r1, r7
   11e74:	bl	10ed4 <mempcpy@plt>
   11e78:	cmp	r9, #0
   11e7c:	mov	r2, r8
   11e80:	mov	r1, r6
   11e84:	strb	sl, [r0], r5
   11e88:	strne	r0, [r9]
   11e8c:	bl	10ed4 <mempcpy@plt>
   11e90:	mov	r3, #0
   11e94:	strb	r3, [r0]
   11e98:	mov	r0, fp
   11e9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ea0:	mov	r5, #0
   11ea4:	mov	sl, r5
   11ea8:	b	11e54 <__assert_fail@plt+0xe54>
   11eac:	ldrb	r3, [r6]
   11eb0:	cmp	r3, #47	; 0x2f
   11eb4:	moveq	r5, #1
   11eb8:	movne	sl, #0
   11ebc:	moveq	sl, #46	; 0x2e
   11ec0:	b	11e54 <__assert_fail@plt+0xe54>
   11ec4:	push	{r4, r5, r6, lr}
   11ec8:	subs	r4, r0, #0
   11ecc:	beq	11f40 <__assert_fail@plt+0xf40>
   11ed0:	mov	r1, #47	; 0x2f
   11ed4:	bl	10fac <strrchr@plt>
   11ed8:	subs	r5, r0, #0
   11edc:	beq	11f2c <__assert_fail@plt+0xf2c>
   11ee0:	add	r6, r5, #1
   11ee4:	sub	r3, r6, r4
   11ee8:	cmp	r3, #6
   11eec:	ble	11f2c <__assert_fail@plt+0xf2c>
   11ef0:	mov	r2, #7
   11ef4:	ldr	r1, [pc, #96]	; 11f5c <__assert_fail@plt+0xf5c>
   11ef8:	sub	r0, r5, #6
   11efc:	bl	10fdc <strncmp@plt>
   11f00:	cmp	r0, #0
   11f04:	bne	11f2c <__assert_fail@plt+0xf2c>
   11f08:	mov	r2, #3
   11f0c:	ldr	r1, [pc, #76]	; 11f60 <__assert_fail@plt+0xf60>
   11f10:	mov	r0, r6
   11f14:	bl	10fdc <strncmp@plt>
   11f18:	cmp	r0, #0
   11f1c:	movne	r4, r6
   11f20:	ldreq	r3, [pc, #60]	; 11f64 <__assert_fail@plt+0xf64>
   11f24:	addeq	r4, r5, #4
   11f28:	streq	r4, [r3]
   11f2c:	ldr	r2, [pc, #52]	; 11f68 <__assert_fail@plt+0xf68>
   11f30:	ldr	r3, [pc, #52]	; 11f6c <__assert_fail@plt+0xf6c>
   11f34:	str	r4, [r2]
   11f38:	str	r4, [r3]
   11f3c:	pop	{r4, r5, r6, pc}
   11f40:	ldr	r3, [pc, #40]	; 11f70 <__assert_fail@plt+0xf70>
   11f44:	mov	r2, #55	; 0x37
   11f48:	mov	r1, #1
   11f4c:	ldr	r3, [r3]
   11f50:	ldr	r0, [pc, #28]	; 11f74 <__assert_fail@plt+0xf74>
   11f54:	bl	10e44 <fwrite@plt>
   11f58:	bl	10fe8 <abort@plt>
   11f5c:	andeq	r8, r1, ip, ror r1
   11f60:	andeq	r8, r1, r4, lsl #3
   11f64:	andeq	r9, r2, r0, asr #2
   11f68:	muleq	r2, r0, r1
   11f6c:	andeq	r9, r2, r4, asr #2
   11f70:	andeq	r9, r2, r0, asr r1
   11f74:	andeq	r8, r1, r4, asr #2
   11f78:	push	{r4, lr}
   11f7c:	mov	r2, #48	; 0x30
   11f80:	mov	r4, r1
   11f84:	mov	r1, #0
   11f88:	bl	10f34 <memset@plt>
   11f8c:	cmp	r4, #10
   11f90:	beq	11f9c <__assert_fail@plt+0xf9c>
   11f94:	str	r4, [r0]
   11f98:	pop	{r4, pc}
   11f9c:	bl	10fe8 <abort@plt>
   11fa0:	push	{r4, r5, r6, lr}
   11fa4:	mov	r2, #5
   11fa8:	mov	r5, r0
   11fac:	mov	r6, r1
   11fb0:	mov	r1, r0
   11fb4:	mov	r0, #0
   11fb8:	bl	10dfc <dcgettext@plt>
   11fbc:	cmp	r5, r0
   11fc0:	mov	r4, r0
   11fc4:	beq	11fd0 <__assert_fail@plt+0xfd0>
   11fc8:	mov	r0, r4
   11fcc:	pop	{r4, r5, r6, pc}
   11fd0:	bl	15790 <__assert_fail@plt+0x4790>
   11fd4:	ldrb	r3, [r0]
   11fd8:	bic	r3, r3, #32
   11fdc:	cmp	r3, #85	; 0x55
   11fe0:	bne	12040 <__assert_fail@plt+0x1040>
   11fe4:	ldrb	r3, [r0, #1]
   11fe8:	bic	r3, r3, #32
   11fec:	cmp	r3, #84	; 0x54
   11ff0:	bne	120b8 <__assert_fail@plt+0x10b8>
   11ff4:	ldrb	r3, [r0, #2]
   11ff8:	bic	r3, r3, #32
   11ffc:	cmp	r3, #70	; 0x46
   12000:	bne	120b8 <__assert_fail@plt+0x10b8>
   12004:	ldrb	r3, [r0, #3]
   12008:	cmp	r3, #45	; 0x2d
   1200c:	bne	120b8 <__assert_fail@plt+0x10b8>
   12010:	ldrb	r3, [r0, #4]
   12014:	cmp	r3, #56	; 0x38
   12018:	bne	120b8 <__assert_fail@plt+0x10b8>
   1201c:	ldrb	r3, [r0, #5]
   12020:	cmp	r3, #0
   12024:	bne	120b8 <__assert_fail@plt+0x10b8>
   12028:	ldrb	r2, [r4]
   1202c:	ldr	r3, [pc, #156]	; 120d0 <__assert_fail@plt+0x10d0>
   12030:	ldr	r4, [pc, #156]	; 120d4 <__assert_fail@plt+0x10d4>
   12034:	cmp	r2, #96	; 0x60
   12038:	movne	r4, r3
   1203c:	b	11fc8 <__assert_fail@plt+0xfc8>
   12040:	cmp	r3, #71	; 0x47
   12044:	bne	120b8 <__assert_fail@plt+0x10b8>
   12048:	ldrb	r3, [r0, #1]
   1204c:	bic	r3, r3, #32
   12050:	cmp	r3, #66	; 0x42
   12054:	bne	120b8 <__assert_fail@plt+0x10b8>
   12058:	ldrb	r3, [r0, #2]
   1205c:	cmp	r3, #49	; 0x31
   12060:	bne	120b8 <__assert_fail@plt+0x10b8>
   12064:	ldrb	r3, [r0, #3]
   12068:	cmp	r3, #56	; 0x38
   1206c:	bne	120b8 <__assert_fail@plt+0x10b8>
   12070:	ldrb	r3, [r0, #4]
   12074:	cmp	r3, #48	; 0x30
   12078:	bne	120b8 <__assert_fail@plt+0x10b8>
   1207c:	ldrb	r3, [r0, #5]
   12080:	cmp	r3, #51	; 0x33
   12084:	bne	120b8 <__assert_fail@plt+0x10b8>
   12088:	ldrb	r3, [r0, #6]
   1208c:	cmp	r3, #48	; 0x30
   12090:	bne	120b8 <__assert_fail@plt+0x10b8>
   12094:	ldrb	r3, [r0, #7]
   12098:	cmp	r3, #0
   1209c:	bne	120b8 <__assert_fail@plt+0x10b8>
   120a0:	ldrb	r2, [r4]
   120a4:	ldr	r3, [pc, #44]	; 120d8 <__assert_fail@plt+0x10d8>
   120a8:	ldr	r4, [pc, #44]	; 120dc <__assert_fail@plt+0x10dc>
   120ac:	cmp	r2, #96	; 0x60
   120b0:	movne	r4, r3
   120b4:	b	11fc8 <__assert_fail@plt+0xfc8>
   120b8:	ldr	r3, [pc, #32]	; 120e0 <__assert_fail@plt+0x10e0>
   120bc:	ldr	r4, [pc, #32]	; 120e4 <__assert_fail@plt+0x10e4>
   120c0:	cmp	r6, #9
   120c4:	movne	r4, r3
   120c8:	mov	r0, r4
   120cc:	pop	{r4, r5, r6, pc}
   120d0:	andeq	r8, r1, r0, ror #3
   120d4:	andeq	r8, r1, ip, ror #3
   120d8:	andeq	r8, r1, r4, ror #3
   120dc:	andeq	r8, r1, r8, ror #3
   120e0:	strdeq	r8, [r1], -r0
   120e4:	ldrdeq	r8, [r1], -ip
   120e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120ec:	sub	sp, sp, #124	; 0x7c
   120f0:	ldr	ip, [pc, #3576]	; 12ef0 <__assert_fail@plt+0x1ef0>
   120f4:	str	r3, [sp, #24]
   120f8:	ldr	r3, [sp, #168]	; 0xa8
   120fc:	ldr	ip, [ip]
   12100:	str	r3, [sp, #56]	; 0x38
   12104:	ldr	r3, [sp, #172]	; 0xac
   12108:	ldr	r8, [sp, #160]	; 0xa0
   1210c:	str	r3, [sp, #80]	; 0x50
   12110:	ldr	r3, [sp, #176]	; 0xb0
   12114:	mov	fp, r0
   12118:	str	r3, [sp, #76]	; 0x4c
   1211c:	mov	sl, r1
   12120:	str	r2, [sp, #36]	; 0x24
   12124:	str	ip, [sp, #116]	; 0x74
   12128:	bl	10e5c <__ctype_get_mb_cur_max@plt>
   1212c:	ldr	r3, [sp, #164]	; 0xa4
   12130:	ands	r4, r3, #2
   12134:	movne	r3, #1
   12138:	moveq	r3, #0
   1213c:	str	r3, [sp, #32]
   12140:	str	r0, [sp, #64]	; 0x40
   12144:	cmp	r8, #10
   12148:	ldrls	pc, [pc, r8, lsl #2]
   1214c:	b	138fc <__assert_fail@plt+0x28fc>
   12150:	andeq	r2, r1, r4, asr #10
   12154:	ldrdeq	r2, [r1], -ip
   12158:	ldrdeq	r2, [r1], -ip
   1215c:	strdeq	r2, [r1], -ip
   12160:			; <UNDEFINED> instruction: 0x000124b0
   12164:	strdeq	r2, [r1], -r8
   12168:	andeq	r2, r1, r4, ror r5
   1216c:	andeq	r2, r1, ip, lsr #11
   12170:	andeq	r2, r1, ip, ror r1
   12174:	andeq	r2, r1, ip, ror r1
   12178:	andeq	r2, r1, ip, ror r1
   1217c:	cmp	r8, #10
   12180:	beq	121a4 <__assert_fail@plt+0x11a4>
   12184:	mov	r1, r8
   12188:	ldr	r0, [pc, #3428]	; 12ef4 <__assert_fail@plt+0x1ef4>
   1218c:	bl	11fa0 <__assert_fail@plt+0xfa0>
   12190:	mov	r1, r8
   12194:	str	r0, [sp, #80]	; 0x50
   12198:	ldr	r0, [pc, #3420]	; 12efc <__assert_fail@plt+0x1efc>
   1219c:	bl	11fa0 <__assert_fail@plt+0xfa0>
   121a0:	str	r0, [sp, #76]	; 0x4c
   121a4:	cmp	r4, #0
   121a8:	movne	r4, #0
   121ac:	beq	135bc <__assert_fail@plt+0x25bc>
   121b0:	ldr	r7, [sp, #76]	; 0x4c
   121b4:	mov	r5, #0
   121b8:	mov	r6, #1
   121bc:	mov	r0, r7
   121c0:	str	r6, [sp, #40]	; 0x28
   121c4:	str	r5, [sp, #68]	; 0x44
   121c8:	bl	10f04 <strlen@plt>
   121cc:	str	r6, [sp, #28]
   121d0:	str	r5, [sp, #44]	; 0x2c
   121d4:	str	r5, [sp, #72]	; 0x48
   121d8:	str	r7, [sp, #60]	; 0x3c
   121dc:	str	r0, [sp, #52]	; 0x34
   121e0:	str	r8, [sp, #160]	; 0xa0
   121e4:	mov	r8, fp
   121e8:	ldr	fp, [sp, #160]	; 0xa0
   121ec:	mov	r9, #0
   121f0:	ldr	r3, [sp, #24]
   121f4:	cmn	r3, #1
   121f8:	beq	12760 <__assert_fail@plt+0x1760>
   121fc:	ldr	r3, [sp, #24]
   12200:	subs	r6, r3, r9
   12204:	movne	r6, #1
   12208:	cmp	r6, #0
   1220c:	beq	12778 <__assert_fail@plt+0x1778>
   12210:	ldr	r7, [sp, #28]
   12214:	ldr	r0, [sp, #36]	; 0x24
   12218:	cmp	fp, #2
   1221c:	moveq	r7, #0
   12220:	andne	r7, r7, #1
   12224:	add	r3, r0, r9
   12228:	cmp	r7, #0
   1222c:	str	r3, [sp, #48]	; 0x30
   12230:	beq	12c1c <__assert_fail@plt+0x1c1c>
   12234:	ldr	r2, [sp, #52]	; 0x34
   12238:	cmp	r2, #0
   1223c:	beq	12f00 <__assert_fail@plt+0x1f00>
   12240:	ldr	r1, [sp, #24]
   12244:	cmp	r2, #1
   12248:	mov	r3, r2
   1224c:	movls	r3, #0
   12250:	movhi	r3, #1
   12254:	cmn	r1, #1
   12258:	movne	r3, #0
   1225c:	cmp	r3, #0
   12260:	add	r5, r9, r2
   12264:	beq	12270 <__assert_fail@plt+0x1270>
   12268:	bl	10f04 <strlen@plt>
   1226c:	str	r0, [sp, #24]
   12270:	ldr	r3, [sp, #24]
   12274:	cmp	r5, r3
   12278:	bhi	12f00 <__assert_fail@plt+0x1f00>
   1227c:	ldr	r2, [sp, #52]	; 0x34
   12280:	ldr	r1, [sp, #60]	; 0x3c
   12284:	ldr	r0, [sp, #48]	; 0x30
   12288:	bl	10df0 <memcmp@plt>
   1228c:	cmp	r0, #0
   12290:	bne	12f00 <__assert_fail@plt+0x1f00>
   12294:	ldr	r3, [sp, #32]
   12298:	cmp	r3, #0
   1229c:	bne	137bc <__assert_fail@plt+0x27bc>
   122a0:	ldr	r3, [sp, #48]	; 0x30
   122a4:	ldrb	r5, [r3]
   122a8:	cmp	r5, #126	; 0x7e
   122ac:	ldrls	pc, [pc, r5, lsl #2]
   122b0:	b	12b80 <__assert_fail@plt+0x1b80>
   122b4:	andeq	r2, r1, ip, ror #20
   122b8:	andeq	r2, r1, r0, lsl #23
   122bc:	andeq	r2, r1, r0, lsl #23
   122c0:	andeq	r2, r1, r0, lsl #23
   122c4:	andeq	r2, r1, r0, lsl #23
   122c8:	andeq	r2, r1, r0, lsl #23
   122cc:	andeq	r2, r1, r0, lsl #23
   122d0:	andeq	r2, r1, r8, lsr fp
   122d4:	andeq	r2, r1, r8, lsr #22
   122d8:	andeq	r2, r1, r8, lsr #20
   122dc:	strdeq	r2, [r1], -r0
   122e0:	andeq	r2, r1, r8, asr #20
   122e4:	andeq	r2, r1, r0, lsr sl
   122e8:	andeq	r2, r1, r0, ror #18
   122ec:	andeq	r2, r1, r0, lsl #23
   122f0:	andeq	r2, r1, r0, lsl #23
   122f4:	andeq	r2, r1, r0, lsl #23
   122f8:	andeq	r2, r1, r0, lsl #23
   122fc:	andeq	r2, r1, r0, lsl #23
   12300:	andeq	r2, r1, r0, lsl #23
   12304:	andeq	r2, r1, r0, lsl #23
   12308:	andeq	r2, r1, r0, lsl #23
   1230c:	andeq	r2, r1, r0, lsl #23
   12310:	andeq	r2, r1, r0, lsl #23
   12314:	andeq	r2, r1, r0, lsl #23
   12318:	andeq	r2, r1, r0, lsl #23
   1231c:	andeq	r2, r1, r0, lsl #23
   12320:	andeq	r2, r1, r0, lsl #23
   12324:	andeq	r2, r1, r0, lsl #23
   12328:	andeq	r2, r1, r0, lsl #23
   1232c:	andeq	r2, r1, r0, lsl #23
   12330:	andeq	r2, r1, r0, lsl #23
   12334:	andeq	r2, r1, r0, asr #22
   12338:	andeq	r2, r1, r4, asr sl
   1233c:	andeq	r2, r1, r4, asr sl
   12340:	andeq	r2, r1, r8, asr fp
   12344:	andeq	r2, r1, r4, asr sl
   12348:	andeq	r2, r1, r4, ror fp
   1234c:	andeq	r2, r1, r4, asr sl
   12350:	muleq	r1, r4, r8
   12354:	andeq	r2, r1, r4, asr sl
   12358:	andeq	r2, r1, r4, asr sl
   1235c:	andeq	r2, r1, r4, asr sl
   12360:	andeq	r2, r1, r4, ror fp
   12364:	andeq	r2, r1, r4, ror fp
   12368:	andeq	r2, r1, r4, ror fp
   1236c:	andeq	r2, r1, r4, ror fp
   12370:	andeq	r2, r1, r4, ror fp
   12374:	andeq	r2, r1, r4, ror fp
   12378:	andeq	r2, r1, r4, ror fp
   1237c:	andeq	r2, r1, r4, ror fp
   12380:	andeq	r2, r1, r4, ror fp
   12384:	andeq	r2, r1, r4, ror fp
   12388:	andeq	r2, r1, r4, ror fp
   1238c:	andeq	r2, r1, r4, ror fp
   12390:	andeq	r2, r1, r4, ror fp
   12394:	andeq	r2, r1, r4, ror fp
   12398:	andeq	r2, r1, r4, ror fp
   1239c:	andeq	r2, r1, r4, ror fp
   123a0:	andeq	r2, r1, r4, asr sl
   123a4:	andeq	r2, r1, r4, asr sl
   123a8:	andeq	r2, r1, r4, asr sl
   123ac:	andeq	r2, r1, r4, asr sl
   123b0:	andeq	r2, r1, r8, ror #16
   123b4:	andeq	r2, r1, r0, lsl #23
   123b8:	andeq	r2, r1, r4, ror fp
   123bc:	andeq	r2, r1, r4, ror fp
   123c0:	andeq	r2, r1, r4, ror fp
   123c4:	andeq	r2, r1, r4, ror fp
   123c8:	andeq	r2, r1, r4, ror fp
   123cc:	andeq	r2, r1, r4, ror fp
   123d0:	andeq	r2, r1, r4, ror fp
   123d4:	andeq	r2, r1, r4, ror fp
   123d8:	andeq	r2, r1, r4, ror fp
   123dc:	andeq	r2, r1, r4, ror fp
   123e0:	andeq	r2, r1, r4, ror fp
   123e4:	andeq	r2, r1, r4, ror fp
   123e8:	andeq	r2, r1, r4, ror fp
   123ec:	andeq	r2, r1, r4, ror fp
   123f0:	andeq	r2, r1, r4, ror fp
   123f4:	andeq	r2, r1, r4, ror fp
   123f8:	andeq	r2, r1, r4, ror fp
   123fc:	andeq	r2, r1, r4, ror fp
   12400:	andeq	r2, r1, r4, ror fp
   12404:	andeq	r2, r1, r4, ror fp
   12408:	andeq	r2, r1, r4, ror fp
   1240c:	andeq	r2, r1, r4, ror fp
   12410:	andeq	r2, r1, r4, ror fp
   12414:	andeq	r2, r1, r4, ror fp
   12418:	andeq	r2, r1, r4, ror fp
   1241c:	andeq	r2, r1, r4, ror fp
   12420:	andeq	r2, r1, r4, asr sl
   12424:	andeq	r2, r1, r0, lsr #16
   12428:	andeq	r2, r1, r4, ror fp
   1242c:	andeq	r2, r1, r4, asr sl
   12430:	andeq	r2, r1, r4, ror fp
   12434:	andeq	r2, r1, r4, asr sl
   12438:	andeq	r2, r1, r4, ror fp
   1243c:	andeq	r2, r1, r4, ror fp
   12440:	andeq	r2, r1, r4, ror fp
   12444:	andeq	r2, r1, r4, ror fp
   12448:	andeq	r2, r1, r4, ror fp
   1244c:	andeq	r2, r1, r4, ror fp
   12450:	andeq	r2, r1, r4, ror fp
   12454:	andeq	r2, r1, r4, ror fp
   12458:	andeq	r2, r1, r4, ror fp
   1245c:	andeq	r2, r1, r4, ror fp
   12460:	andeq	r2, r1, r4, ror fp
   12464:	andeq	r2, r1, r4, ror fp
   12468:	andeq	r2, r1, r4, ror fp
   1246c:	andeq	r2, r1, r4, ror fp
   12470:	andeq	r2, r1, r4, ror fp
   12474:	andeq	r2, r1, r4, ror fp
   12478:	andeq	r2, r1, r4, ror fp
   1247c:	andeq	r2, r1, r4, ror fp
   12480:	andeq	r2, r1, r4, ror fp
   12484:	andeq	r2, r1, r4, ror fp
   12488:	andeq	r2, r1, r4, ror fp
   1248c:	andeq	r2, r1, r4, ror fp
   12490:	andeq	r2, r1, r4, ror fp
   12494:	andeq	r2, r1, r4, ror fp
   12498:	andeq	r2, r1, r4, ror fp
   1249c:	andeq	r2, r1, r4, ror fp
   124a0:	andeq	r2, r1, r8, lsr r6
   124a4:	andeq	r2, r1, r4, asr sl
   124a8:	andeq	r2, r1, r8, lsr r6
   124ac:	andeq	r2, r1, r8, asr fp
   124b0:	cmp	r4, #0
   124b4:	moveq	r3, #1
   124b8:	streq	r3, [sp, #28]
   124bc:	beq	12be8 <__assert_fail@plt+0x1be8>
   124c0:	mov	r3, #0
   124c4:	mov	r4, r3
   124c8:	mov	r2, #1
   124cc:	str	r2, [sp, #40]	; 0x28
   124d0:	str	r3, [sp, #68]	; 0x44
   124d4:	str	r2, [sp, #32]
   124d8:	str	r2, [sp, #52]	; 0x34
   124dc:	ldr	r3, [pc, #2584]	; 12efc <__assert_fail@plt+0x1efc>
   124e0:	str	r4, [sp, #44]	; 0x2c
   124e4:	str	r4, [sp, #72]	; 0x48
   124e8:	str	r4, [sp, #28]
   124ec:	str	r3, [sp, #60]	; 0x3c
   124f0:	mov	r8, #2
   124f4:	b	121e0 <__assert_fail@plt+0x11e0>
   124f8:	cmp	r4, #0
   124fc:	bne	13788 <__assert_fail@plt+0x2788>
   12500:	cmp	sl, #0
   12504:	beq	13548 <__assert_fail@plt+0x2548>
   12508:	mov	r3, #34	; 0x22
   1250c:	strb	r3, [fp]
   12510:	ldr	r3, [pc, #2528]	; 12ef8 <__assert_fail@plt+0x1ef8>
   12514:	mov	r1, r4
   12518:	mov	r2, #1
   1251c:	str	r4, [sp, #68]	; 0x44
   12520:	str	r2, [sp, #40]	; 0x28
   12524:	mov	r4, r2
   12528:	str	r1, [sp, #44]	; 0x2c
   1252c:	str	r1, [sp, #72]	; 0x48
   12530:	str	r1, [sp, #32]
   12534:	str	r2, [sp, #28]
   12538:	str	r2, [sp, #52]	; 0x34
   1253c:	str	r3, [sp, #60]	; 0x3c
   12540:	b	121e0 <__assert_fail@plt+0x11e0>
   12544:	mov	r3, #0
   12548:	str	r3, [sp, #68]	; 0x44
   1254c:	str	r3, [sp, #44]	; 0x2c
   12550:	str	r3, [sp, #32]
   12554:	str	r3, [sp, #28]
   12558:	str	r3, [sp, #60]	; 0x3c
   1255c:	mov	r3, #1
   12560:	str	r8, [sp, #72]	; 0x48
   12564:	str	r8, [sp, #52]	; 0x34
   12568:	mov	r4, r8
   1256c:	str	r3, [sp, #40]	; 0x28
   12570:	b	121e0 <__assert_fail@plt+0x11e0>
   12574:	mov	r3, #1
   12578:	str	r3, [sp, #40]	; 0x28
   1257c:	str	r3, [sp, #32]
   12580:	str	r3, [sp, #28]
   12584:	str	r3, [sp, #52]	; 0x34
   12588:	ldr	r3, [pc, #2408]	; 12ef8 <__assert_fail@plt+0x1ef8>
   1258c:	mov	r2, #0
   12590:	mov	r4, r2
   12594:	str	r2, [sp, #68]	; 0x44
   12598:	str	r2, [sp, #44]	; 0x2c
   1259c:	str	r2, [sp, #72]	; 0x48
   125a0:	str	r3, [sp, #60]	; 0x3c
   125a4:	mov	r8, #5
   125a8:	b	121e0 <__assert_fail@plt+0x11e0>
   125ac:	mov	r3, #0
   125b0:	mov	r2, #1
   125b4:	str	r2, [sp, #40]	; 0x28
   125b8:	mov	r4, r3
   125bc:	str	r3, [sp, #68]	; 0x44
   125c0:	str	r2, [sp, #28]
   125c4:	str	r3, [sp, #44]	; 0x2c
   125c8:	str	r3, [sp, #72]	; 0x48
   125cc:	str	r3, [sp, #32]
   125d0:	str	r3, [sp, #52]	; 0x34
   125d4:	str	r3, [sp, #60]	; 0x3c
   125d8:	b	121e0 <__assert_fail@plt+0x11e0>
   125dc:	mov	r2, #1
   125e0:	mov	r3, #0
   125e4:	str	r2, [sp, #40]	; 0x28
   125e8:	mov	r4, r3
   125ec:	str	r3, [sp, #68]	; 0x44
   125f0:	str	r8, [sp, #52]	; 0x34
   125f4:	str	r2, [sp, #32]
   125f8:	b	124dc <__assert_fail@plt+0x14dc>
   125fc:	mov	r3, #1
   12600:	str	r3, [sp, #40]	; 0x28
   12604:	str	r3, [sp, #32]
   12608:	str	r3, [sp, #28]
   1260c:	str	r3, [sp, #52]	; 0x34
   12610:	ldr	r3, [pc, #2276]	; 12efc <__assert_fail@plt+0x1efc>
   12614:	mov	r2, #0
   12618:	mov	r4, r2
   1261c:	str	r2, [sp, #68]	; 0x44
   12620:	str	r2, [sp, #44]	; 0x2c
   12624:	str	r2, [sp, #72]	; 0x48
   12628:	str	r3, [sp, #60]	; 0x3c
   1262c:	mov	r8, #2
   12630:	b	121e0 <__assert_fail@plt+0x11e0>
   12634:	mov	r7, #0
   12638:	ldr	r3, [sp, #24]
   1263c:	cmn	r3, #1
   12640:	beq	1317c <__assert_fail@plt+0x217c>
   12644:	ldr	r3, [sp, #24]
   12648:	subs	r3, r3, #1
   1264c:	movne	r3, #1
   12650:	cmp	r3, #0
   12654:	sub	r2, fp, #2
   12658:	clz	r2, r2
   1265c:	lsr	r2, r2, #5
   12660:	bne	1285c <__assert_fail@plt+0x185c>
   12664:	cmp	r9, #0
   12668:	bne	1285c <__assert_fail@plt+0x185c>
   1266c:	ldr	r3, [sp, #32]
   12670:	tst	r3, r2
   12674:	bne	1297c <__assert_fail@plt+0x197c>
   12678:	ldr	r3, [sp, #28]
   1267c:	eor	r3, r3, #1
   12680:	orr	r3, r2, r3
   12684:	ldr	r2, [sp, #32]
   12688:	eor	r3, r3, #1
   1268c:	orrs	r3, r2, r3
   12690:	beq	126c0 <__assert_fail@plt+0x16c0>
   12694:	mov	r3, #0
   12698:	ldr	r1, [sp, #56]	; 0x38
   1269c:	cmp	r1, #0
   126a0:	beq	126c0 <__assert_fail@plt+0x16c0>
   126a4:	lsr	r2, r5, #5
   126a8:	and	r0, r5, #31
   126ac:	uxtb	r2, r2
   126b0:	ldr	r1, [r1, r2, lsl #2]
   126b4:	lsr	r2, r1, r0
   126b8:	tst	r2, #1
   126bc:	bne	126c8 <__assert_fail@plt+0x16c8>
   126c0:	cmp	r7, #0
   126c4:	beq	12918 <__assert_fail@plt+0x1918>
   126c8:	sub	r2, fp, #2
   126cc:	clz	r2, r2
   126d0:	lsr	r2, r2, #5
   126d4:	ldr	r3, [sp, #32]
   126d8:	cmp	r3, #0
   126dc:	bne	12a08 <__assert_fail@plt+0x1a08>
   126e0:	ldr	r3, [sp, #44]	; 0x2c
   126e4:	eor	r3, r3, #1
   126e8:	ands	r3, r2, r3
   126ec:	beq	12724 <__assert_fail@plt+0x1724>
   126f0:	cmp	sl, r4
   126f4:	movhi	r2, #39	; 0x27
   126f8:	strbhi	r2, [r8, r4]
   126fc:	add	r2, r4, #1
   12700:	cmp	r2, sl
   12704:	movcc	r1, #36	; 0x24
   12708:	strbcc	r1, [r8, r2]
   1270c:	add	r2, r4, #2
   12710:	cmp	r2, sl
   12714:	add	r4, r4, #3
   12718:	movcc	r1, #39	; 0x27
   1271c:	strbcc	r1, [r8, r2]
   12720:	str	r3, [sp, #44]	; 0x2c
   12724:	cmp	r4, sl
   12728:	movcc	r3, #92	; 0x5c
   1272c:	strbcc	r3, [r8, r4]
   12730:	add	r9, r9, #1
   12734:	add	r4, r4, #1
   12738:	cmp	r4, sl
   1273c:	ldr	r3, [sp, #40]	; 0x28
   12740:	strbcc	r5, [r8, r4]
   12744:	cmp	r6, #0
   12748:	moveq	r3, #0
   1274c:	str	r3, [sp, #40]	; 0x28
   12750:	ldr	r3, [sp, #24]
   12754:	add	r4, r4, #1
   12758:	cmn	r3, #1
   1275c:	bne	121fc <__assert_fail@plt+0x11fc>
   12760:	ldr	r3, [sp, #36]	; 0x24
   12764:	ldrb	r6, [r3, r9]
   12768:	adds	r6, r6, #0
   1276c:	movne	r6, #1
   12770:	cmp	r6, #0
   12774:	bne	12210 <__assert_fail@plt+0x1210>
   12778:	str	fp, [sp, #160]	; 0xa0
   1277c:	mov	fp, r8
   12780:	ldr	r8, [sp, #160]	; 0xa0
   12784:	ldr	r1, [sp, #32]
   12788:	cmp	r4, #0
   1278c:	sub	r2, r8, #2
   12790:	clz	r2, r2
   12794:	lsr	r2, r2, #5
   12798:	andeq	r3, r2, r1
   1279c:	movne	r3, #0
   127a0:	cmp	r3, #0
   127a4:	bne	13890 <__assert_fail@plt+0x2890>
   127a8:	eor	r3, r1, #1
   127ac:	ands	r2, r2, r3
   127b0:	beq	137cc <__assert_fail@plt+0x27cc>
   127b4:	ldr	r3, [sp, #68]	; 0x44
   127b8:	cmp	r3, #0
   127bc:	beq	137d0 <__assert_fail@plt+0x27d0>
   127c0:	ldr	r3, [sp, #40]	; 0x28
   127c4:	cmp	r3, #0
   127c8:	bne	1384c <__assert_fail@plt+0x284c>
   127cc:	ldr	r3, [sp, #72]	; 0x48
   127d0:	adds	r3, r3, #0
   127d4:	movne	r3, #1
   127d8:	cmp	sl, #0
   127dc:	movne	r3, #0
   127e0:	cmp	r3, #0
   127e4:	ldreq	r2, [sp, #68]	; 0x44
   127e8:	beq	137d0 <__assert_fail@plt+0x27d0>
   127ec:	ldr	sl, [sp, #72]	; 0x48
   127f0:	str	r3, [sp, #68]	; 0x44
   127f4:	ldr	r3, [pc, #1792]	; 12efc <__assert_fail@plt+0x1efc>
   127f8:	mov	r2, #39	; 0x27
   127fc:	mov	r4, #1
   12800:	str	r3, [sp, #60]	; 0x3c
   12804:	mov	r3, #0
   12808:	strb	r2, [fp]
   1280c:	str	r4, [sp, #52]	; 0x34
   12810:	mov	r8, #2
   12814:	str	r3, [sp, #32]
   12818:	b	121e0 <__assert_fail@plt+0x11e0>
   1281c:	mov	r7, #0
   12820:	cmp	fp, #2
   12824:	beq	1315c <__assert_fail@plt+0x215c>
   12828:	ldr	r3, [sp, #52]	; 0x34
   1282c:	ldr	r2, [sp, #28]
   12830:	ldr	r1, [sp, #32]
   12834:	cmp	r3, #0
   12838:	andne	r2, r2, r1
   1283c:	moveq	r2, #0
   12840:	cmp	r2, #0
   12844:	moveq	r5, #92	; 0x5c
   12848:	moveq	r3, r5
   1284c:	bne	13168 <__assert_fail@plt+0x2168>
   12850:	ldr	r1, [sp, #28]
   12854:	cmp	r1, #0
   12858:	bne	138d8 <__assert_fail@plt+0x28d8>
   1285c:	mov	r6, #0
   12860:	b	12678 <__assert_fail@plt+0x1678>
   12864:	mov	r7, #0
   12868:	cmp	fp, #2
   1286c:	beq	131cc <__assert_fail@plt+0x21cc>
   12870:	cmp	fp, #5
   12874:	beq	13190 <__assert_fail@plt+0x2190>
   12878:	sub	r2, fp, #2
   1287c:	mov	r6, #0
   12880:	clz	r2, r2
   12884:	mov	r5, #63	; 0x3f
   12888:	lsr	r2, r2, #5
   1288c:	b	12678 <__assert_fail@plt+0x1678>
   12890:	mov	r7, #0
   12894:	cmp	fp, #2
   12898:	strne	r6, [sp, #68]	; 0x44
   1289c:	movne	r2, #0
   128a0:	movne	r5, #39	; 0x27
   128a4:	bne	12678 <__assert_fail@plt+0x1678>
   128a8:	ldr	r3, [sp, #32]
   128ac:	cmp	r3, #0
   128b0:	bne	135ac <__assert_fail@plt+0x25ac>
   128b4:	cmp	sl, #0
   128b8:	ldr	r3, [sp, #72]	; 0x48
   128bc:	clz	r3, r3
   128c0:	lsr	r3, r3, #5
   128c4:	moveq	r3, #0
   128c8:	cmp	r3, #0
   128cc:	bne	134e0 <__assert_fail@plt+0x24e0>
   128d0:	cmp	sl, r4
   128d4:	movhi	r3, #39	; 0x27
   128d8:	strbhi	r3, [r8, r4]
   128dc:	add	r3, r4, #1
   128e0:	cmp	sl, r3
   128e4:	movhi	r2, #92	; 0x5c
   128e8:	strbhi	r2, [r8, r3]
   128ec:	add	r3, r4, #2
   128f0:	cmp	sl, r3
   128f4:	movhi	r2, #39	; 0x27
   128f8:	strbhi	r2, [r8, r3]
   128fc:	mov	r3, #0
   12900:	cmp	r7, #0
   12904:	add	r4, r4, #3
   12908:	str	r3, [sp, #44]	; 0x2c
   1290c:	str	r6, [sp, #68]	; 0x44
   12910:	mov	r5, #39	; 0x27
   12914:	bne	126c8 <__assert_fail@plt+0x16c8>
   12918:	ldr	r2, [sp, #44]	; 0x2c
   1291c:	eor	r3, r3, #1
   12920:	and	r3, r3, r2
   12924:	add	r9, r9, #1
   12928:	uxtb	r3, r3
   1292c:	cmp	r3, #0
   12930:	beq	12738 <__assert_fail@plt+0x1738>
   12934:	cmp	sl, r4
   12938:	movhi	r3, #39	; 0x27
   1293c:	strbhi	r3, [r8, r4]
   12940:	add	r3, r4, #1
   12944:	cmp	sl, r3
   12948:	movhi	r2, #39	; 0x27
   1294c:	strbhi	r2, [r8, r3]
   12950:	mov	r3, #0
   12954:	add	r4, r4, #2
   12958:	str	r3, [sp, #44]	; 0x2c
   1295c:	b	12738 <__assert_fail@plt+0x1738>
   12960:	mov	r3, #114	; 0x72
   12964:	ldr	r1, [sp, #32]
   12968:	sub	r2, fp, #2
   1296c:	clz	r2, r2
   12970:	lsr	r2, r2, #5
   12974:	tst	r2, r1
   12978:	beq	12850 <__assert_fail@plt+0x1850>
   1297c:	mov	fp, r8
   12980:	mov	r8, #2
   12984:	ldr	r3, [sp, #28]
   12988:	cmp	r3, #0
   1298c:	movne	r8, #4
   12990:	ldr	r3, [sp, #164]	; 0xa4
   12994:	mov	ip, #0
   12998:	bic	r3, r3, #2
   1299c:	str	r3, [sp, #4]
   129a0:	ldr	r3, [sp, #76]	; 0x4c
   129a4:	str	r8, [sp]
   129a8:	str	r3, [sp, #16]
   129ac:	ldr	r3, [sp, #80]	; 0x50
   129b0:	ldr	r2, [sp, #36]	; 0x24
   129b4:	str	r3, [sp, #12]
   129b8:	mov	r1, sl
   129bc:	ldr	r3, [sp, #24]
   129c0:	mov	r0, fp
   129c4:	str	ip, [sp, #8]
   129c8:	bl	120e8 <__assert_fail@plt+0x10e8>
   129cc:	mov	r4, r0
   129d0:	ldr	r3, [pc, #1304]	; 12ef0 <__assert_fail@plt+0x1ef0>
   129d4:	ldr	r2, [sp, #116]	; 0x74
   129d8:	mov	r0, r4
   129dc:	ldr	r3, [r3]
   129e0:	cmp	r2, r3
   129e4:	bne	138d4 <__assert_fail@plt+0x28d4>
   129e8:	add	sp, sp, #124	; 0x7c
   129ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129f0:	mov	r5, #110	; 0x6e
   129f4:	ldr	r3, [sp, #32]
   129f8:	mov	r2, #0
   129fc:	cmp	r3, #0
   12a00:	mov	r6, r2
   12a04:	beq	126e0 <__assert_fail@plt+0x16e0>
   12a08:	str	fp, [sp, #160]	; 0xa0
   12a0c:	mov	fp, r8
   12a10:	ldr	r8, [sp, #160]	; 0xa0
   12a14:	mov	r3, r2
   12a18:	ldr	r2, [sp, #28]
   12a1c:	and	r2, r2, r3
   12a20:	str	r2, [sp, #28]
   12a24:	b	12984 <__assert_fail@plt+0x1984>
   12a28:	mov	r5, #116	; 0x74
   12a2c:	b	129f4 <__assert_fail@plt+0x19f4>
   12a30:	mov	r5, #102	; 0x66
   12a34:	ldr	r3, [sp, #32]
   12a38:	cmp	r3, #0
   12a3c:	bne	135e8 <__assert_fail@plt+0x25e8>
   12a40:	mov	r6, #0
   12a44:	b	12724 <__assert_fail@plt+0x1724>
   12a48:	mov	r5, #118	; 0x76
   12a4c:	b	12a34 <__assert_fail@plt+0x1a34>
   12a50:	mov	r7, #0
   12a54:	mov	r6, #0
   12a58:	b	12694 <__assert_fail@plt+0x1694>
   12a5c:	ldr	r3, [sp, #32]
   12a60:	cmp	r3, #0
   12a64:	bne	1382c <__assert_fail@plt+0x282c>
   12a68:	mov	r7, r3
   12a6c:	ldr	r3, [sp, #44]	; 0x2c
   12a70:	sub	r2, fp, #2
   12a74:	eor	r3, r3, #1
   12a78:	clz	r2, r2
   12a7c:	lsr	r2, r2, #5
   12a80:	ands	r3, r2, r3
   12a84:	beq	134cc <__assert_fail@plt+0x24cc>
   12a88:	cmp	sl, r4
   12a8c:	movhi	r1, #39	; 0x27
   12a90:	strbhi	r1, [r8, r4]
   12a94:	add	r1, r4, #1
   12a98:	cmp	sl, r1
   12a9c:	movhi	r0, #36	; 0x24
   12aa0:	strbhi	r0, [r8, r1]
   12aa4:	add	r1, r4, #2
   12aa8:	cmp	sl, r1
   12aac:	movhi	r0, #39	; 0x27
   12ab0:	strbhi	r0, [r8, r1]
   12ab4:	add	r1, r4, #3
   12ab8:	cmp	sl, r1
   12abc:	bls	1352c <__assert_fail@plt+0x252c>
   12ac0:	mov	r4, r1
   12ac4:	mov	r1, #92	; 0x5c
   12ac8:	strb	r1, [r8, r4]
   12acc:	mov	r1, r4
   12ad0:	str	r3, [sp, #44]	; 0x2c
   12ad4:	cmp	fp, #2
   12ad8:	add	r4, r4, #1
   12adc:	beq	13574 <__assert_fail@plt+0x2574>
   12ae0:	ldr	r0, [sp, #24]
   12ae4:	add	r3, r9, #1
   12ae8:	cmp	r3, r0
   12aec:	bcs	12b04 <__assert_fail@plt+0x1b04>
   12af0:	ldr	r0, [sp, #36]	; 0x24
   12af4:	ldrb	r3, [r0, r3]
   12af8:	sub	r3, r3, #48	; 0x30
   12afc:	cmp	r3, #9
   12b00:	bls	13584 <__assert_fail@plt+0x2584>
   12b04:	mov	r5, #48	; 0x30
   12b08:	ldr	r3, [sp, #28]
   12b0c:	eor	r3, r3, #1
   12b10:	orrs	r2, r2, r3
   12b14:	mov	r3, r6
   12b18:	moveq	r6, r2
   12b1c:	beq	12698 <__assert_fail@plt+0x1698>
   12b20:	mov	r6, #0
   12b24:	b	126c0 <__assert_fail@plt+0x16c0>
   12b28:	mov	r2, #0
   12b2c:	mov	r6, r2
   12b30:	mov	r5, #98	; 0x62
   12b34:	b	126e0 <__assert_fail@plt+0x16e0>
   12b38:	mov	r5, #97	; 0x61
   12b3c:	b	12a40 <__assert_fail@plt+0x1a40>
   12b40:	mov	r3, r7
   12b44:	mov	r6, r7
   12b48:	mov	r2, #0
   12b4c:	mov	r7, r3
   12b50:	mov	r5, #32
   12b54:	b	12678 <__assert_fail@plt+0x1678>
   12b58:	cmp	r9, #0
   12b5c:	mov	r3, r7
   12b60:	bne	13128 <__assert_fail@plt+0x2128>
   12b64:	mov	r6, r7
   12b68:	mov	r2, r9
   12b6c:	mov	r7, r3
   12b70:	b	12678 <__assert_fail@plt+0x1678>
   12b74:	mov	r6, r7
   12b78:	b	12694 <__assert_fail@plt+0x1694>
   12b7c:	mov	r7, #0
   12b80:	ldr	r3, [sp, #64]	; 0x40
   12b84:	cmp	r3, #1
   12b88:	bne	131e4 <__assert_fail@plt+0x21e4>
   12b8c:	bl	10eec <__ctype_b_loc@plt>
   12b90:	ldr	r2, [sp, #64]	; 0x40
   12b94:	sxth	r3, r5
   12b98:	mov	ip, r2
   12b9c:	lsl	r3, r3, #1
   12ba0:	ldr	r2, [r0]
   12ba4:	ldrh	r3, [r2, r3]
   12ba8:	and	r3, r3, #16384	; 0x4000
   12bac:	cmp	r3, #0
   12bb0:	ldr	r3, [sp, #28]
   12bb4:	movne	r6, #1
   12bb8:	moveq	r6, #0
   12bbc:	movne	r2, #0
   12bc0:	andeq	r2, r3, #1
   12bc4:	cmp	r2, #0
   12bc8:	bne	134f4 <__assert_fail@plt+0x24f4>
   12bcc:	sub	r2, fp, #2
   12bd0:	clz	r2, r2
   12bd4:	lsr	r2, r2, #5
   12bd8:	b	12678 <__assert_fail@plt+0x1678>
   12bdc:	cmp	r4, #0
   12be0:	bne	138a0 <__assert_fail@plt+0x28a0>
   12be4:	str	r4, [sp, #28]
   12be8:	cmp	sl, #0
   12bec:	bne	138e4 <__assert_fail@plt+0x28e4>
   12bf0:	ldr	r3, [pc, #772]	; 12efc <__assert_fail@plt+0x1efc>
   12bf4:	mov	r4, #1
   12bf8:	str	r4, [sp, #40]	; 0x28
   12bfc:	str	r3, [sp, #60]	; 0x3c
   12c00:	str	r4, [sp, #52]	; 0x34
   12c04:	str	sl, [sp, #72]	; 0x48
   12c08:	str	sl, [sp, #68]	; 0x44
   12c0c:	str	sl, [sp, #44]	; 0x2c
   12c10:	str	sl, [sp, #32]
   12c14:	mov	r8, #2
   12c18:	b	121e0 <__assert_fail@plt+0x11e0>
   12c1c:	ldr	r3, [sp, #36]	; 0x24
   12c20:	ldrb	r5, [r3, r9]
   12c24:	cmp	r5, #126	; 0x7e
   12c28:	ldrls	pc, [pc, r5, lsl #2]
   12c2c:	b	12b80 <__assert_fail@plt+0x1b80>
   12c30:	andeq	r2, r1, r4, ror #28
   12c34:	andeq	r2, r1, r0, lsl #23
   12c38:	andeq	r2, r1, r0, lsl #23
   12c3c:	andeq	r2, r1, r0, lsl #23
   12c40:	andeq	r2, r1, r0, lsl #23
   12c44:	andeq	r2, r1, r0, lsl #23
   12c48:	andeq	r2, r1, r0, lsl #23
   12c4c:	andeq	r2, r1, r0, asr lr
   12c50:	andeq	r2, r1, ip, lsr lr
   12c54:	andeq	r2, r1, r4, lsr lr
   12c58:	andeq	r2, r1, ip, lsr #28
   12c5c:	ldrdeq	r2, [r1], -ip
   12c60:	andeq	r2, r1, r8, asr #29
   12c64:	andeq	r2, r1, r0, ror #18
   12c68:	andeq	r2, r1, r0, lsl #23
   12c6c:	andeq	r2, r1, r0, lsl #23
   12c70:	andeq	r2, r1, r0, lsl #23
   12c74:	andeq	r2, r1, r0, lsl #23
   12c78:	andeq	r2, r1, r0, lsl #23
   12c7c:	andeq	r2, r1, r0, lsl #23
   12c80:	andeq	r2, r1, r0, lsl #23
   12c84:	andeq	r2, r1, r0, lsl #23
   12c88:	andeq	r2, r1, r0, lsl #23
   12c8c:	andeq	r2, r1, r0, lsl #23
   12c90:	andeq	r2, r1, r0, lsl #23
   12c94:	andeq	r2, r1, r0, lsl #23
   12c98:	andeq	r2, r1, r0, lsl #23
   12c9c:	andeq	r2, r1, r0, lsl #23
   12ca0:	andeq	r2, r1, r0, lsl #23
   12ca4:	andeq	r2, r1, r0, lsl #23
   12ca8:	andeq	r2, r1, r0, lsl #23
   12cac:	andeq	r2, r1, r0, lsl #23
   12cb0:			; <UNDEFINED> instruction: 0x00012eb8
   12cb4:	andeq	r2, r1, r4, lsr #29
   12cb8:	andeq	r2, r1, r4, lsr #29
   12cbc:	muleq	r1, r4, lr
   12cc0:	andeq	r2, r1, r4, lsr #29
   12cc4:	andeq	r2, r1, ip, asr #23
   12cc8:	andeq	r2, r1, r4, lsr #29
   12ccc:	muleq	r1, r4, r8
   12cd0:	andeq	r2, r1, r4, lsr #29
   12cd4:	andeq	r2, r1, r4, lsr #29
   12cd8:	andeq	r2, r1, r4, lsr #29
   12cdc:	andeq	r2, r1, ip, asr #23
   12ce0:	andeq	r2, r1, ip, asr #23
   12ce4:	andeq	r2, r1, ip, asr #23
   12ce8:	andeq	r2, r1, ip, asr #23
   12cec:	andeq	r2, r1, ip, asr #23
   12cf0:	andeq	r2, r1, ip, asr #23
   12cf4:	andeq	r2, r1, ip, asr #23
   12cf8:	andeq	r2, r1, ip, asr #23
   12cfc:	andeq	r2, r1, ip, asr #23
   12d00:	andeq	r2, r1, ip, asr #23
   12d04:	andeq	r2, r1, ip, asr #23
   12d08:	andeq	r2, r1, ip, asr #23
   12d0c:	andeq	r2, r1, ip, asr #23
   12d10:	andeq	r2, r1, ip, asr #23
   12d14:	andeq	r2, r1, ip, asr #23
   12d18:	andeq	r2, r1, ip, asr #23
   12d1c:	andeq	r2, r1, r4, lsr #29
   12d20:	andeq	r2, r1, r4, lsr #29
   12d24:	andeq	r2, r1, r4, lsr #29
   12d28:	andeq	r2, r1, r4, lsr #29
   12d2c:	andeq	r2, r1, r8, ror #16
   12d30:	andeq	r2, r1, r0, lsl #23
   12d34:	andeq	r2, r1, ip, asr #23
   12d38:	andeq	r2, r1, ip, asr #23
   12d3c:	andeq	r2, r1, ip, asr #23
   12d40:	andeq	r2, r1, ip, asr #23
   12d44:	andeq	r2, r1, ip, asr #23
   12d48:	andeq	r2, r1, ip, asr #23
   12d4c:	andeq	r2, r1, ip, asr #23
   12d50:	andeq	r2, r1, ip, asr #23
   12d54:	andeq	r2, r1, ip, asr #23
   12d58:	andeq	r2, r1, ip, asr #23
   12d5c:	andeq	r2, r1, ip, asr #23
   12d60:	andeq	r2, r1, ip, asr #23
   12d64:	andeq	r2, r1, ip, asr #23
   12d68:	andeq	r2, r1, ip, asr #23
   12d6c:	andeq	r2, r1, ip, asr #23
   12d70:	andeq	r2, r1, ip, asr #23
   12d74:	andeq	r2, r1, ip, asr #23
   12d78:	andeq	r2, r1, ip, asr #23
   12d7c:	andeq	r2, r1, ip, asr #23
   12d80:	andeq	r2, r1, ip, asr #23
   12d84:	andeq	r2, r1, ip, asr #23
   12d88:	andeq	r2, r1, ip, asr #23
   12d8c:	andeq	r2, r1, ip, asr #23
   12d90:	andeq	r2, r1, ip, asr #23
   12d94:	andeq	r2, r1, ip, asr #23
   12d98:	andeq	r2, r1, ip, asr #23
   12d9c:	andeq	r2, r1, r4, lsr #29
   12da0:	andeq	r2, r1, r0, lsr #16
   12da4:	andeq	r2, r1, ip, asr #23
   12da8:	andeq	r2, r1, r4, lsr #29
   12dac:	andeq	r2, r1, ip, asr #23
   12db0:	andeq	r2, r1, r4, lsr #29
   12db4:	andeq	r2, r1, ip, asr #23
   12db8:	andeq	r2, r1, ip, asr #23
   12dbc:	andeq	r2, r1, ip, asr #23
   12dc0:	andeq	r2, r1, ip, asr #23
   12dc4:	andeq	r2, r1, ip, asr #23
   12dc8:	andeq	r2, r1, ip, asr #23
   12dcc:	andeq	r2, r1, ip, asr #23
   12dd0:	andeq	r2, r1, ip, asr #23
   12dd4:	andeq	r2, r1, ip, asr #23
   12dd8:	andeq	r2, r1, ip, asr #23
   12ddc:	andeq	r2, r1, ip, asr #23
   12de0:	andeq	r2, r1, ip, asr #23
   12de4:	andeq	r2, r1, ip, asr #23
   12de8:	andeq	r2, r1, ip, asr #23
   12dec:	andeq	r2, r1, ip, asr #23
   12df0:	andeq	r2, r1, ip, asr #23
   12df4:	andeq	r2, r1, ip, asr #23
   12df8:	andeq	r2, r1, ip, asr #23
   12dfc:	andeq	r2, r1, ip, asr #23
   12e00:	andeq	r2, r1, ip, asr #23
   12e04:	andeq	r2, r1, ip, asr #23
   12e08:	andeq	r2, r1, ip, asr #23
   12e0c:	andeq	r2, r1, ip, asr #23
   12e10:	andeq	r2, r1, ip, asr #23
   12e14:	andeq	r2, r1, ip, asr #23
   12e18:	andeq	r2, r1, ip, asr #23
   12e1c:	andeq	r2, r1, r8, lsr r6
   12e20:	andeq	r2, r1, r4, lsr #29
   12e24:	andeq	r2, r1, r8, lsr r6
   12e28:	muleq	r1, r4, lr
   12e2c:	mov	r3, #110	; 0x6e
   12e30:	b	12964 <__assert_fail@plt+0x1964>
   12e34:	mov	r3, #116	; 0x74
   12e38:	b	12964 <__assert_fail@plt+0x1964>
   12e3c:	sub	r2, fp, #2
   12e40:	mov	r3, #98	; 0x62
   12e44:	clz	r2, r2
   12e48:	lsr	r2, r2, #5
   12e4c:	b	12850 <__assert_fail@plt+0x1850>
   12e50:	sub	r2, fp, #2
   12e54:	mov	r3, #97	; 0x61
   12e58:	clz	r2, r2
   12e5c:	lsr	r2, r2, #5
   12e60:	b	12850 <__assert_fail@plt+0x1850>
   12e64:	ldr	r3, [sp, #28]
   12e68:	cmp	r3, #0
   12e6c:	bne	12a5c <__assert_fail@plt+0x1a5c>
   12e70:	ldr	r3, [sp, #164]	; 0xa4
   12e74:	tst	r3, #1
   12e78:	bne	134ec <__assert_fail@plt+0x24ec>
   12e7c:	ldr	r6, [sp, #28]
   12e80:	sub	r2, fp, #2
   12e84:	mov	r7, r6
   12e88:	clz	r2, r2
   12e8c:	lsr	r2, r2, #5
   12e90:	b	12678 <__assert_fail@plt+0x1678>
   12e94:	sub	r2, fp, #2
   12e98:	clz	r2, r2
   12e9c:	lsr	r2, r2, #5
   12ea0:	b	12664 <__assert_fail@plt+0x1664>
   12ea4:	sub	r2, fp, #2
   12ea8:	mov	r6, #0
   12eac:	clz	r2, r2
   12eb0:	lsr	r2, r2, #5
   12eb4:	b	1266c <__assert_fail@plt+0x166c>
   12eb8:	sub	r2, fp, #2
   12ebc:	clz	r2, r2
   12ec0:	lsr	r2, r2, #5
   12ec4:	b	1266c <__assert_fail@plt+0x166c>
   12ec8:	sub	r2, fp, #2
   12ecc:	mov	r3, #102	; 0x66
   12ed0:	clz	r2, r2
   12ed4:	lsr	r2, r2, #5
   12ed8:	b	12850 <__assert_fail@plt+0x1850>
   12edc:	sub	r2, fp, #2
   12ee0:	mov	r3, #118	; 0x76
   12ee4:	clz	r2, r2
   12ee8:	lsr	r2, r2, #5
   12eec:	b	12850 <__assert_fail@plt+0x1850>
   12ef0:	andeq	r8, r2, r8, lsl #30
   12ef4:	strdeq	r8, [r1], -r4
   12ef8:	ldrdeq	r8, [r1], -ip
   12efc:	strdeq	r8, [r1], -r0
   12f00:	ldr	r3, [sp, #48]	; 0x30
   12f04:	ldrb	r5, [r3]
   12f08:	cmp	r5, #126	; 0x7e
   12f0c:	ldrls	pc, [pc, r5, lsl #2]
   12f10:	b	12b7c <__assert_fail@plt+0x1b7c>
   12f14:	andeq	r2, r1, ip, asr sl
   12f18:	andeq	r2, r1, ip, ror fp
   12f1c:	andeq	r2, r1, ip, ror fp
   12f20:	andeq	r2, r1, ip, ror fp
   12f24:	andeq	r2, r1, ip, ror fp
   12f28:	andeq	r2, r1, ip, ror fp
   12f2c:	andeq	r2, r1, ip, ror fp
   12f30:	andeq	r3, r1, r4, asr r1
   12f34:	andeq	r3, r1, ip, asr #2
   12f38:	andeq	r2, r1, r8, lsr #20
   12f3c:	strdeq	r2, [r1], -r0
   12f40:	andeq	r2, r1, r8, asr #20
   12f44:	andeq	r2, r1, r0, lsr sl
   12f48:	andeq	r3, r1, r0, asr #2
   12f4c:	andeq	r2, r1, ip, ror fp
   12f50:	andeq	r2, r1, ip, ror fp
   12f54:	andeq	r2, r1, ip, ror fp
   12f58:	andeq	r2, r1, ip, ror fp
   12f5c:	andeq	r2, r1, ip, ror fp
   12f60:	andeq	r2, r1, ip, ror fp
   12f64:	andeq	r2, r1, ip, ror fp
   12f68:	andeq	r2, r1, ip, ror fp
   12f6c:	andeq	r2, r1, ip, ror fp
   12f70:	andeq	r2, r1, ip, ror fp
   12f74:	andeq	r2, r1, ip, ror fp
   12f78:	andeq	r2, r1, ip, ror fp
   12f7c:	andeq	r2, r1, ip, ror fp
   12f80:	andeq	r2, r1, ip, ror fp
   12f84:	andeq	r2, r1, ip, ror fp
   12f88:	andeq	r2, r1, ip, ror fp
   12f8c:	andeq	r2, r1, ip, ror fp
   12f90:	andeq	r2, r1, ip, ror fp
   12f94:	andeq	r3, r1, r8, lsr r1
   12f98:	andeq	r2, r1, r0, asr sl
   12f9c:	andeq	r2, r1, r0, asr sl
   12fa0:	andeq	r3, r1, ip, lsl r1
   12fa4:	andeq	r2, r1, r0, asr sl
   12fa8:	andeq	r3, r1, r0, lsl r1
   12fac:	andeq	r2, r1, r0, asr sl
   12fb0:	muleq	r1, r0, r8
   12fb4:	andeq	r2, r1, r0, asr sl
   12fb8:	andeq	r2, r1, r0, asr sl
   12fbc:	andeq	r2, r1, r0, asr sl
   12fc0:	andeq	r3, r1, r0, lsl r1
   12fc4:	andeq	r3, r1, r0, lsl r1
   12fc8:	andeq	r3, r1, r0, lsl r1
   12fcc:	andeq	r3, r1, r0, lsl r1
   12fd0:	andeq	r3, r1, r0, lsl r1
   12fd4:	andeq	r3, r1, r0, lsl r1
   12fd8:	andeq	r3, r1, r0, lsl r1
   12fdc:	andeq	r3, r1, r0, lsl r1
   12fe0:	andeq	r3, r1, r0, lsl r1
   12fe4:	andeq	r3, r1, r0, lsl r1
   12fe8:	andeq	r3, r1, r0, lsl r1
   12fec:	andeq	r3, r1, r0, lsl r1
   12ff0:	andeq	r3, r1, r0, lsl r1
   12ff4:	andeq	r3, r1, r0, lsl r1
   12ff8:	andeq	r3, r1, r0, lsl r1
   12ffc:	andeq	r3, r1, r0, lsl r1
   13000:	andeq	r2, r1, r0, asr sl
   13004:	andeq	r2, r1, r0, asr sl
   13008:	andeq	r2, r1, r0, asr sl
   1300c:	andeq	r2, r1, r0, asr sl
   13010:	andeq	r2, r1, r4, ror #16
   13014:	andeq	r2, r1, ip, ror fp
   13018:	andeq	r3, r1, r0, lsl r1
   1301c:	andeq	r3, r1, r0, lsl r1
   13020:	andeq	r3, r1, r0, lsl r1
   13024:	andeq	r3, r1, r0, lsl r1
   13028:	andeq	r3, r1, r0, lsl r1
   1302c:	andeq	r3, r1, r0, lsl r1
   13030:	andeq	r3, r1, r0, lsl r1
   13034:	andeq	r3, r1, r0, lsl r1
   13038:	andeq	r3, r1, r0, lsl r1
   1303c:	andeq	r3, r1, r0, lsl r1
   13040:	andeq	r3, r1, r0, lsl r1
   13044:	andeq	r3, r1, r0, lsl r1
   13048:	andeq	r3, r1, r0, lsl r1
   1304c:	andeq	r3, r1, r0, lsl r1
   13050:	andeq	r3, r1, r0, lsl r1
   13054:	andeq	r3, r1, r0, lsl r1
   13058:	andeq	r3, r1, r0, lsl r1
   1305c:	andeq	r3, r1, r0, lsl r1
   13060:	andeq	r3, r1, r0, lsl r1
   13064:	andeq	r3, r1, r0, lsl r1
   13068:	andeq	r3, r1, r0, lsl r1
   1306c:	andeq	r3, r1, r0, lsl r1
   13070:	andeq	r3, r1, r0, lsl r1
   13074:	andeq	r3, r1, r0, lsl r1
   13078:	andeq	r3, r1, r0, lsl r1
   1307c:	andeq	r3, r1, r0, lsl r1
   13080:	andeq	r2, r1, r0, asr sl
   13084:	andeq	r2, r1, ip, lsl r8
   13088:	andeq	r3, r1, r0, lsl r1
   1308c:	andeq	r2, r1, r0, asr sl
   13090:	andeq	r3, r1, r0, lsl r1
   13094:	andeq	r2, r1, r0, asr sl
   13098:	andeq	r3, r1, r0, lsl r1
   1309c:	andeq	r3, r1, r0, lsl r1
   130a0:	andeq	r3, r1, r0, lsl r1
   130a4:	andeq	r3, r1, r0, lsl r1
   130a8:	andeq	r3, r1, r0, lsl r1
   130ac:	andeq	r3, r1, r0, lsl r1
   130b0:	andeq	r3, r1, r0, lsl r1
   130b4:	andeq	r3, r1, r0, lsl r1
   130b8:	andeq	r3, r1, r0, lsl r1
   130bc:	andeq	r3, r1, r0, lsl r1
   130c0:	andeq	r3, r1, r0, lsl r1
   130c4:	andeq	r3, r1, r0, lsl r1
   130c8:	andeq	r3, r1, r0, lsl r1
   130cc:	andeq	r3, r1, r0, lsl r1
   130d0:	andeq	r3, r1, r0, lsl r1
   130d4:	andeq	r3, r1, r0, lsl r1
   130d8:	andeq	r3, r1, r0, lsl r1
   130dc:	andeq	r3, r1, r0, lsl r1
   130e0:	andeq	r3, r1, r0, lsl r1
   130e4:	andeq	r3, r1, r0, lsl r1
   130e8:	andeq	r3, r1, r0, lsl r1
   130ec:	andeq	r3, r1, r0, lsl r1
   130f0:	andeq	r3, r1, r0, lsl r1
   130f4:	andeq	r3, r1, r0, lsl r1
   130f8:	andeq	r3, r1, r0, lsl r1
   130fc:	andeq	r3, r1, r0, lsl r1
   13100:	andeq	r2, r1, r4, lsr r6
   13104:	andeq	r2, r1, r0, asr sl
   13108:	andeq	r2, r1, r4, lsr r6
   1310c:	andeq	r3, r1, ip, lsl r1
   13110:	mov	r6, r7
   13114:	mov	r7, #0
   13118:	b	12694 <__assert_fail@plt+0x1694>
   1311c:	cmp	r9, #0
   13120:	mov	r3, #0
   13124:	beq	12b64 <__assert_fail@plt+0x1b64>
   13128:	mov	r6, #0
   1312c:	mov	r7, r3
   13130:	mov	r3, r6
   13134:	b	12698 <__assert_fail@plt+0x1698>
   13138:	mov	r3, #0
   1313c:	b	12b44 <__assert_fail@plt+0x1b44>
   13140:	mov	r7, #0
   13144:	mov	r3, #114	; 0x72
   13148:	b	12964 <__assert_fail@plt+0x1964>
   1314c:	mov	r5, #98	; 0x62
   13150:	b	129f4 <__assert_fail@plt+0x19f4>
   13154:	mov	r5, #97	; 0x61
   13158:	b	12a34 <__assert_fail@plt+0x1a34>
   1315c:	ldr	r3, [sp, #32]
   13160:	cmp	r3, #0
   13164:	bne	135ac <__assert_fail@plt+0x25ac>
   13168:	add	r9, r9, #1
   1316c:	ldr	r3, [sp, #44]	; 0x2c
   13170:	mov	r6, #0
   13174:	mov	r5, #92	; 0x5c
   13178:	b	1292c <__assert_fail@plt+0x192c>
   1317c:	ldr	r3, [sp, #36]	; 0x24
   13180:	ldrb	r3, [r3, #1]
   13184:	adds	r3, r3, #0
   13188:	movne	r3, #1
   1318c:	b	12650 <__assert_fail@plt+0x1650>
   13190:	ldr	r3, [sp, #164]	; 0xa4
   13194:	ands	r3, r3, #4
   13198:	beq	131bc <__assert_fail@plt+0x21bc>
   1319c:	ldr	r2, [sp, #24]
   131a0:	add	r3, r9, #2
   131a4:	cmp	r3, r2
   131a8:	bcs	131bc <__assert_fail@plt+0x21bc>
   131ac:	ldr	r2, [sp, #48]	; 0x30
   131b0:	ldrb	r5, [r2, #1]
   131b4:	cmp	r5, #63	; 0x3f
   131b8:	beq	13620 <__assert_fail@plt+0x2620>
   131bc:	mov	r2, #0
   131c0:	mov	r6, r2
   131c4:	mov	r5, #63	; 0x3f
   131c8:	b	12678 <__assert_fail@plt+0x1678>
   131cc:	ldr	r3, [sp, #32]
   131d0:	cmp	r3, #0
   131d4:	bne	135ac <__assert_fail@plt+0x25ac>
   131d8:	mov	r6, r3
   131dc:	mov	r5, #63	; 0x3f
   131e0:	b	126c0 <__assert_fail@plt+0x16c0>
   131e4:	ldr	r3, [sp, #24]
   131e8:	cmn	r3, #1
   131ec:	mov	r3, #0
   131f0:	str	r3, [sp, #108]	; 0x6c
   131f4:	str	r3, [sp, #112]	; 0x70
   131f8:	bne	13208 <__assert_fail@plt+0x2208>
   131fc:	ldr	r0, [sp, #36]	; 0x24
   13200:	bl	10f04 <strlen@plt>
   13204:	str	r0, [sp, #24]
   13208:	mov	r3, #0
   1320c:	str	sl, [sp, #88]	; 0x58
   13210:	ldr	sl, [sp, #36]	; 0x24
   13214:	str	r5, [sp, #92]	; 0x5c
   13218:	mov	r5, r3
   1321c:	str	r7, [sp, #96]	; 0x60
   13220:	str	r4, [sp, #100]	; 0x64
   13224:	str	r8, [sp, #84]	; 0x54
   13228:	ldr	r3, [sp, #24]
   1322c:	add	r4, r9, r5
   13230:	add	r7, sl, r4
   13234:	sub	r2, r3, r4
   13238:	mov	r1, r7
   1323c:	add	r3, sp, #108	; 0x6c
   13240:	add	r0, sp, #104	; 0x68
   13244:	bl	153a8 <__assert_fail@plt+0x43a8>
   13248:	subs	r8, r0, #0
   1324c:	beq	1329c <__assert_fail@plt+0x229c>
   13250:	cmn	r8, #1
   13254:	beq	135fc <__assert_fail@plt+0x25fc>
   13258:	cmn	r8, #2
   1325c:	beq	1371c <__assert_fail@plt+0x271c>
   13260:	ldr	r3, [sp, #32]
   13264:	cmp	fp, #2
   13268:	movne	r3, #0
   1326c:	andeq	r3, r3, #1
   13270:	cmp	r3, #0
   13274:	bne	133fc <__assert_fail@plt+0x23fc>
   13278:	ldr	r0, [sp, #104]	; 0x68
   1327c:	bl	10e2c <iswprint@plt>
   13280:	add	r5, r5, r8
   13284:	cmp	r0, #0
   13288:	add	r0, sp, #108	; 0x6c
   1328c:	moveq	r6, #0
   13290:	bl	10de4 <mbsinit@plt>
   13294:	cmp	r0, #0
   13298:	beq	13228 <__assert_fail@plt+0x2228>
   1329c:	ldr	r3, [sp, #28]
   132a0:	mov	ip, r5
   132a4:	eor	r2, r6, #1
   132a8:	ldr	r5, [sp, #92]	; 0x5c
   132ac:	ldr	r7, [sp, #96]	; 0x60
   132b0:	ldr	r4, [sp, #100]	; 0x64
   132b4:	ldr	r8, [sp, #84]	; 0x54
   132b8:	ldr	sl, [sp, #88]	; 0x58
   132bc:	and	r2, r2, r3
   132c0:	cmp	ip, #1
   132c4:	bls	12bc4 <__assert_fail@plt+0x1bc4>
   132c8:	add	r1, ip, r9
   132cc:	ldr	lr, [sp, #48]	; 0x30
   132d0:	mov	r0, #0
   132d4:	str	r6, [sp, #48]	; 0x30
   132d8:	mov	ip, #39	; 0x27
   132dc:	ldr	r6, [sp, #44]	; 0x2c
   132e0:	b	13398 <__assert_fail@plt+0x2398>
   132e4:	ldr	r0, [sp, #32]
   132e8:	sub	r3, fp, #2
   132ec:	cmp	r0, #0
   132f0:	clz	r3, r3
   132f4:	lsr	r3, r3, #5
   132f8:	bne	13500 <__assert_fail@plt+0x2500>
   132fc:	eor	r0, r6, #1
   13300:	ands	r3, r3, r0
   13304:	beq	13334 <__assert_fail@plt+0x2334>
   13308:	add	r0, r4, #1
   1330c:	cmp	sl, r4
   13310:	strbhi	ip, [r8, r4]
   13314:	cmp	sl, r0
   13318:	movhi	r6, #36	; 0x24
   1331c:	strbhi	r6, [r8, r0]
   13320:	add	r0, r4, #2
   13324:	mov	r6, r3
   13328:	add	r4, r4, #3
   1332c:	cmp	sl, r0
   13330:	strbhi	ip, [r8, r0]
   13334:	cmp	sl, r4
   13338:	movhi	r3, #92	; 0x5c
   1333c:	strbhi	r3, [r8, r4]
   13340:	add	r3, r4, #1
   13344:	cmp	sl, r3
   13348:	lsrhi	r0, r5, #6
   1334c:	addhi	r0, r0, #48	; 0x30
   13350:	strbhi	r0, [r8, r3]
   13354:	add	r0, r4, #2
   13358:	cmp	sl, r0
   1335c:	lsrhi	r3, r5, #3
   13360:	andhi	r3, r3, #7
   13364:	addhi	r3, r3, #48	; 0x30
   13368:	add	r9, r9, #1
   1336c:	strbhi	r3, [r8, r0]
   13370:	and	r5, r5, #7
   13374:	cmp	r9, r1
   13378:	add	r5, r5, #48	; 0x30
   1337c:	add	r4, r4, #3
   13380:	bcs	13520 <__assert_fail@plt+0x2520>
   13384:	mov	r0, r2
   13388:	cmp	sl, r4
   1338c:	strbhi	r5, [r8, r4]
   13390:	ldrb	r5, [lr, #1]!
   13394:	add	r4, r4, #1
   13398:	cmp	r2, #0
   1339c:	bne	132e4 <__assert_fail@plt+0x22e4>
   133a0:	eor	r3, r0, #1
   133a4:	and	r3, r3, r6
   133a8:	cmp	r7, #0
   133ac:	uxtb	r3, r3
   133b0:	beq	133c4 <__assert_fail@plt+0x23c4>
   133b4:	cmp	sl, r4
   133b8:	movhi	r7, #92	; 0x5c
   133bc:	strbhi	r7, [r8, r4]
   133c0:	add	r4, r4, #1
   133c4:	add	r9, r9, #1
   133c8:	cmp	r9, r1
   133cc:	bcs	13514 <__assert_fail@plt+0x2514>
   133d0:	cmp	r3, #0
   133d4:	beq	13540 <__assert_fail@plt+0x2540>
   133d8:	cmp	sl, r4
   133dc:	add	r3, r4, #1
   133e0:	strbhi	ip, [r8, r4]
   133e4:	mov	r7, #0
   133e8:	cmp	sl, r3
   133ec:	strbhi	ip, [r8, r3]
   133f0:	add	r4, r4, #2
   133f4:	mov	r6, r7
   133f8:	b	13388 <__assert_fail@plt+0x2388>
   133fc:	cmp	r8, #1
   13400:	beq	13278 <__assert_fail@plt+0x2278>
   13404:	add	r1, r4, #1
   13408:	add	r3, sl, r8
   1340c:	add	r1, sl, r1
   13410:	add	r4, r3, r4
   13414:	ldrb	r3, [r1], #1
   13418:	sub	r3, r3, #91	; 0x5b
   1341c:	cmp	r3, #33	; 0x21
   13420:	ldrls	pc, [pc, r3, lsl #2]
   13424:	b	134b0 <__assert_fail@plt+0x24b0>
   13428:			; <UNDEFINED> instruction: 0x000134bc
   1342c:			; <UNDEFINED> instruction: 0x000134bc
   13430:			; <UNDEFINED> instruction: 0x000134b0
   13434:			; <UNDEFINED> instruction: 0x000134bc
   13438:			; <UNDEFINED> instruction: 0x000134b0
   1343c:			; <UNDEFINED> instruction: 0x000134bc
   13440:			; <UNDEFINED> instruction: 0x000134b0
   13444:			; <UNDEFINED> instruction: 0x000134b0
   13448:			; <UNDEFINED> instruction: 0x000134b0
   1344c:			; <UNDEFINED> instruction: 0x000134b0
   13450:			; <UNDEFINED> instruction: 0x000134b0
   13454:			; <UNDEFINED> instruction: 0x000134b0
   13458:			; <UNDEFINED> instruction: 0x000134b0
   1345c:			; <UNDEFINED> instruction: 0x000134b0
   13460:			; <UNDEFINED> instruction: 0x000134b0
   13464:			; <UNDEFINED> instruction: 0x000134b0
   13468:			; <UNDEFINED> instruction: 0x000134b0
   1346c:			; <UNDEFINED> instruction: 0x000134b0
   13470:			; <UNDEFINED> instruction: 0x000134b0
   13474:			; <UNDEFINED> instruction: 0x000134b0
   13478:			; <UNDEFINED> instruction: 0x000134b0
   1347c:			; <UNDEFINED> instruction: 0x000134b0
   13480:			; <UNDEFINED> instruction: 0x000134b0
   13484:			; <UNDEFINED> instruction: 0x000134b0
   13488:			; <UNDEFINED> instruction: 0x000134b0
   1348c:			; <UNDEFINED> instruction: 0x000134b0
   13490:			; <UNDEFINED> instruction: 0x000134b0
   13494:			; <UNDEFINED> instruction: 0x000134b0
   13498:			; <UNDEFINED> instruction: 0x000134b0
   1349c:			; <UNDEFINED> instruction: 0x000134b0
   134a0:			; <UNDEFINED> instruction: 0x000134b0
   134a4:			; <UNDEFINED> instruction: 0x000134b0
   134a8:			; <UNDEFINED> instruction: 0x000134b0
   134ac:			; <UNDEFINED> instruction: 0x000134bc
   134b0:	cmp	r4, r1
   134b4:	bne	13414 <__assert_fail@plt+0x2414>
   134b8:	b	13278 <__assert_fail@plt+0x2278>
   134bc:	ldr	fp, [sp, #84]	; 0x54
   134c0:	ldr	sl, [sp, #88]	; 0x58
   134c4:	mov	r8, #2
   134c8:	b	12984 <__assert_fail@plt+0x1984>
   134cc:	cmp	sl, r4
   134d0:	movls	r1, r4
   134d4:	bls	12ad4 <__assert_fail@plt+0x1ad4>
   134d8:	ldr	r3, [sp, #44]	; 0x2c
   134dc:	b	12ac4 <__assert_fail@plt+0x1ac4>
   134e0:	str	sl, [sp, #72]	; 0x48
   134e4:	ldr	sl, [sp, #32]
   134e8:	b	128fc <__assert_fail@plt+0x18fc>
   134ec:	add	r9, r9, #1
   134f0:	b	121f0 <__assert_fail@plt+0x11f0>
   134f4:	ldr	r2, [sp, #28]
   134f8:	mov	r6, #0
   134fc:	b	132c8 <__assert_fail@plt+0x22c8>
   13500:	str	fp, [sp, #160]	; 0xa0
   13504:	str	r3, [sp, #28]
   13508:	mov	fp, r8
   1350c:	ldr	r8, [sp, #160]	; 0xa0
   13510:	b	12984 <__assert_fail@plt+0x1984>
   13514:	str	r6, [sp, #44]	; 0x2c
   13518:	ldr	r6, [sp, #48]	; 0x30
   1351c:	b	1292c <__assert_fail@plt+0x192c>
   13520:	str	r6, [sp, #44]	; 0x2c
   13524:	ldr	r6, [sp, #48]	; 0x30
   13528:	b	12738 <__assert_fail@plt+0x1738>
   1352c:	add	r4, r4, #4
   13530:	str	r3, [sp, #44]	; 0x2c
   13534:	mov	r6, #0
   13538:	mov	r5, #48	; 0x30
   1353c:	b	126c0 <__assert_fail@plt+0x16c0>
   13540:	mov	r7, r3
   13544:	b	13388 <__assert_fail@plt+0x2388>
   13548:	ldr	r3, [pc, #-1624]	; 12ef8 <__assert_fail@plt+0x1ef8>
   1354c:	mov	r4, #1
   13550:	str	r4, [sp, #40]	; 0x28
   13554:	str	r4, [sp, #28]
   13558:	str	r4, [sp, #52]	; 0x34
   1355c:	str	sl, [sp, #72]	; 0x48
   13560:	str	sl, [sp, #68]	; 0x44
   13564:	str	sl, [sp, #44]	; 0x2c
   13568:	str	sl, [sp, #32]
   1356c:	str	r3, [sp, #60]	; 0x3c
   13570:	b	121e0 <__assert_fail@plt+0x11e0>
   13574:	mov	r3, r6
   13578:	mov	r5, #48	; 0x30
   1357c:	mov	r6, #0
   13580:	b	126c0 <__assert_fail@plt+0x16c0>
   13584:	cmp	sl, r4
   13588:	movhi	r3, #48	; 0x30
   1358c:	strbhi	r3, [r8, r4]
   13590:	add	r3, r1, #2
   13594:	cmp	sl, r3
   13598:	movhi	r0, #48	; 0x30
   1359c:	strbhi	r0, [r8, r3]
   135a0:	add	r4, r1, #3
   135a4:	mov	r5, #48	; 0x30
   135a8:	b	12b08 <__assert_fail@plt+0x1b08>
   135ac:	str	fp, [sp, #160]	; 0xa0
   135b0:	mov	fp, r8
   135b4:	ldr	r8, [sp, #160]	; 0xa0
   135b8:	b	12984 <__assert_fail@plt+0x1984>
   135bc:	ldr	r2, [sp, #80]	; 0x50
   135c0:	ldrb	r3, [r2]
   135c4:	cmp	r3, #0
   135c8:	beq	121b0 <__assert_fail@plt+0x11b0>
   135cc:	cmp	sl, r4
   135d0:	strbhi	r3, [fp, r4]
   135d4:	ldrb	r3, [r2, #1]!
   135d8:	add	r4, r4, #1
   135dc:	cmp	r3, #0
   135e0:	bne	135cc <__assert_fail@plt+0x25cc>
   135e4:	b	121b0 <__assert_fail@plt+0x11b0>
   135e8:	str	fp, [sp, #160]	; 0xa0
   135ec:	mov	r3, #0
   135f0:	mov	fp, r8
   135f4:	ldr	r8, [sp, #160]	; 0xa0
   135f8:	b	12a18 <__assert_fail@plt+0x1a18>
   135fc:	mov	ip, r5
   13600:	ldr	r7, [sp, #96]	; 0x60
   13604:	ldr	r5, [sp, #92]	; 0x5c
   13608:	ldr	r4, [sp, #100]	; 0x64
   1360c:	ldr	r8, [sp, #84]	; 0x54
   13610:	ldr	sl, [sp, #88]	; 0x58
   13614:	ldr	r2, [sp, #28]
   13618:	mov	r6, #0
   1361c:	b	132c0 <__assert_fail@plt+0x22c0>
   13620:	ldr	r2, [sp, #36]	; 0x24
   13624:	ldrb	r1, [r2, r3]
   13628:	sub	r2, r1, #33	; 0x21
   1362c:	cmp	r2, #29
   13630:	ldrls	pc, [pc, r2, lsl #2]
   13634:	b	13710 <__assert_fail@plt+0x2710>
   13638:			; <UNDEFINED> instruction: 0x000136b0
   1363c:	andeq	r3, r1, r0, lsl r7
   13640:	andeq	r3, r1, r0, lsl r7
   13644:	andeq	r3, r1, r0, lsl r7
   13648:	andeq	r3, r1, r0, lsl r7
   1364c:	andeq	r3, r1, r0, lsl r7
   13650:			; <UNDEFINED> instruction: 0x000136b0
   13654:			; <UNDEFINED> instruction: 0x000136b0
   13658:			; <UNDEFINED> instruction: 0x000136b0
   1365c:	andeq	r3, r1, r0, lsl r7
   13660:	andeq	r3, r1, r0, lsl r7
   13664:	andeq	r3, r1, r0, lsl r7
   13668:			; <UNDEFINED> instruction: 0x000136b0
   1366c:	andeq	r3, r1, r0, lsl r7
   13670:			; <UNDEFINED> instruction: 0x000136b0
   13674:	andeq	r3, r1, r0, lsl r7
   13678:	andeq	r3, r1, r0, lsl r7
   1367c:	andeq	r3, r1, r0, lsl r7
   13680:	andeq	r3, r1, r0, lsl r7
   13684:	andeq	r3, r1, r0, lsl r7
   13688:	andeq	r3, r1, r0, lsl r7
   1368c:	andeq	r3, r1, r0, lsl r7
   13690:	andeq	r3, r1, r0, lsl r7
   13694:	andeq	r3, r1, r0, lsl r7
   13698:	andeq	r3, r1, r0, lsl r7
   1369c:	andeq	r3, r1, r0, lsl r7
   136a0:	andeq	r3, r1, r0, lsl r7
   136a4:			; <UNDEFINED> instruction: 0x000136b0
   136a8:			; <UNDEFINED> instruction: 0x000136b0
   136ac:			; <UNDEFINED> instruction: 0x000136b0
   136b0:	ldr	r2, [sp, #32]
   136b4:	cmp	r2, #0
   136b8:	bne	137bc <__assert_fail@plt+0x27bc>
   136bc:	cmp	sl, r4
   136c0:	movhi	r2, #63	; 0x3f
   136c4:	strbhi	r2, [r8, r4]
   136c8:	add	r2, r4, #1
   136cc:	cmp	sl, r2
   136d0:	movhi	r0, #34	; 0x22
   136d4:	strbhi	r0, [r8, r2]
   136d8:	add	r2, r4, #2
   136dc:	cmp	sl, r2
   136e0:	movhi	r0, #34	; 0x22
   136e4:	strbhi	r0, [r8, r2]
   136e8:	add	r2, r4, #3
   136ec:	cmp	sl, r2
   136f0:	movhi	r0, #63	; 0x3f
   136f4:	strbhi	r0, [r8, r2]
   136f8:	mov	r2, #0
   136fc:	add	r4, r4, #4
   13700:	mov	r5, r1
   13704:	mov	r9, r3
   13708:	mov	r6, r2
   1370c:	b	12b08 <__assert_fail@plt+0x1b08>
   13710:	mov	r2, #0
   13714:	mov	r6, r2
   13718:	b	12678 <__assert_fail@plt+0x1678>
   1371c:	ldr	r0, [sp, #24]
   13720:	mov	r1, r4
   13724:	cmp	r1, r0
   13728:	mov	r2, r7
   1372c:	mov	r3, r5
   13730:	mov	ip, r5
   13734:	ldr	r7, [sp, #96]	; 0x60
   13738:	ldr	r5, [sp, #92]	; 0x5c
   1373c:	ldr	r4, [sp, #100]	; 0x64
   13740:	ldr	r8, [sp, #84]	; 0x54
   13744:	ldr	sl, [sp, #88]	; 0x58
   13748:	bcs	1377c <__assert_fail@plt+0x277c>
   1374c:	ldrb	r6, [r2]
   13750:	cmp	r6, #0
   13754:	bne	13768 <__assert_fail@plt+0x2768>
   13758:	b	13898 <__assert_fail@plt+0x2898>
   1375c:	ldrb	r6, [r2, #1]!
   13760:	cmp	r6, #0
   13764:	beq	13820 <__assert_fail@plt+0x2820>
   13768:	add	r3, r3, #1
   1376c:	add	r1, r9, r3
   13770:	cmp	r1, r0
   13774:	bcc	1375c <__assert_fail@plt+0x275c>
   13778:	mov	ip, r3
   1377c:	ldr	r2, [sp, #28]
   13780:	mov	r6, #0
   13784:	b	132c0 <__assert_fail@plt+0x22c0>
   13788:	mov	r3, #1
   1378c:	str	r3, [sp, #40]	; 0x28
   13790:	str	r3, [sp, #32]
   13794:	str	r3, [sp, #28]
   13798:	str	r3, [sp, #52]	; 0x34
   1379c:	ldr	r3, [pc, #-2220]	; 12ef8 <__assert_fail@plt+0x1ef8>
   137a0:	mov	r2, #0
   137a4:	str	r2, [sp, #68]	; 0x44
   137a8:	str	r2, [sp, #44]	; 0x2c
   137ac:	str	r2, [sp, #72]	; 0x48
   137b0:	mov	r4, r2
   137b4:	str	r3, [sp, #60]	; 0x3c
   137b8:	b	121e0 <__assert_fail@plt+0x11e0>
   137bc:	str	fp, [sp, #160]	; 0xa0
   137c0:	mov	fp, r8
   137c4:	ldr	r8, [sp, #160]	; 0xa0
   137c8:	b	12990 <__assert_fail@plt+0x1990>
   137cc:	mov	r2, r3
   137d0:	ldr	r3, [sp, #60]	; 0x3c
   137d4:	cmp	r3, #0
   137d8:	moveq	r2, #0
   137dc:	andne	r2, r2, #1
   137e0:	cmp	r2, #0
   137e4:	beq	13810 <__assert_fail@plt+0x2810>
   137e8:	mov	r2, r3
   137ec:	ldrb	r3, [r3]
   137f0:	cmp	r3, #0
   137f4:	beq	13810 <__assert_fail@plt+0x2810>
   137f8:	cmp	sl, r4
   137fc:	strbhi	r3, [fp, r4]
   13800:	ldrb	r3, [r2, #1]!
   13804:	add	r4, r4, #1
   13808:	cmp	r3, #0
   1380c:	bne	137f8 <__assert_fail@plt+0x27f8>
   13810:	cmp	sl, r4
   13814:	movhi	r3, #0
   13818:	strbhi	r3, [fp, r4]
   1381c:	b	129d0 <__assert_fail@plt+0x19d0>
   13820:	mov	ip, r3
   13824:	ldr	r2, [sp, #28]
   13828:	b	132c0 <__assert_fail@plt+0x22c0>
   1382c:	str	fp, [sp, #160]	; 0xa0
   13830:	mov	fp, r8
   13834:	ldr	r8, [sp, #160]	; 0xa0
   13838:	sub	r3, r8, #2
   1383c:	clz	r3, r3
   13840:	lsr	r3, r3, #5
   13844:	str	r3, [sp, #28]
   13848:	b	12984 <__assert_fail@plt+0x1984>
   1384c:	ldr	r3, [sp, #76]	; 0x4c
   13850:	mov	ip, #5
   13854:	str	r3, [sp, #16]
   13858:	ldr	r3, [sp, #80]	; 0x50
   1385c:	ldr	r2, [sp, #36]	; 0x24
   13860:	str	r3, [sp, #12]
   13864:	ldr	r3, [sp, #56]	; 0x38
   13868:	ldr	r1, [sp, #72]	; 0x48
   1386c:	str	r3, [sp, #8]
   13870:	ldr	r3, [sp, #164]	; 0xa4
   13874:	mov	r0, fp
   13878:	str	r3, [sp, #4]
   1387c:	str	ip, [sp]
   13880:	ldr	r3, [sp, #24]
   13884:	bl	120e8 <__assert_fail@plt+0x10e8>
   13888:	mov	r4, r0
   1388c:	b	129d0 <__assert_fail@plt+0x19d0>
   13890:	mov	r8, #2
   13894:	b	12984 <__assert_fail@plt+0x1984>
   13898:	ldr	r2, [sp, #28]
   1389c:	b	132c0 <__assert_fail@plt+0x22c0>
   138a0:	mov	r3, #0
   138a4:	str	r3, [sp, #68]	; 0x44
   138a8:	str	r3, [sp, #44]	; 0x2c
   138ac:	str	r3, [sp, #72]	; 0x48
   138b0:	str	r3, [sp, #28]
   138b4:	mov	r4, r3
   138b8:	ldr	r3, [pc, #-2500]	; 12efc <__assert_fail@plt+0x1efc>
   138bc:	mov	r2, #1
   138c0:	str	r2, [sp, #40]	; 0x28
   138c4:	str	r2, [sp, #32]
   138c8:	str	r2, [sp, #52]	; 0x34
   138cc:	str	r3, [sp, #60]	; 0x3c
   138d0:	b	121e0 <__assert_fail@plt+0x11e0>
   138d4:	bl	10e08 <__stack_chk_fail@plt>
   138d8:	mov	r5, r3
   138dc:	mov	r6, #0
   138e0:	b	126d4 <__assert_fail@plt+0x16d4>
   138e4:	mov	r3, #0
   138e8:	mov	r2, #1
   138ec:	str	r3, [sp, #44]	; 0x2c
   138f0:	str	r3, [sp, #72]	; 0x48
   138f4:	str	r2, [sp, #40]	; 0x28
   138f8:	b	127f0 <__assert_fail@plt+0x17f0>
   138fc:	bl	10fe8 <abort@plt>
   13900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13904:	sub	sp, sp, #44	; 0x2c
   13908:	mov	r6, r0
   1390c:	mov	r4, r3
   13910:	mov	sl, r1
   13914:	mov	fp, r2
   13918:	bl	10f1c <__errno_location@plt>
   1391c:	ldr	r7, [pc, #364]	; 13a90 <__assert_fail@plt+0x2a90>
   13920:	cmp	r6, #0
   13924:	ldr	r5, [r7]
   13928:	ldr	r3, [r0]
   1392c:	str	r3, [sp, #24]
   13930:	blt	13a8c <__assert_fail@plt+0x2a8c>
   13934:	ldr	r3, [r7, #4]
   13938:	mov	r8, r0
   1393c:	cmp	r3, r6
   13940:	bgt	1398c <__assert_fail@plt+0x298c>
   13944:	cmn	r6, #-268435454	; 0xf0000002
   13948:	bgt	13a88 <__assert_fail@plt+0x2a88>
   1394c:	add	r9, r6, #1
   13950:	add	r3, r7, #8
   13954:	cmp	r5, r3
   13958:	lsl	r1, r9, #3
   1395c:	beq	13a68 <__assert_fail@plt+0x2a68>
   13960:	mov	r0, r5
   13964:	bl	146f4 <__assert_fail@plt+0x36f4>
   13968:	mov	r5, r0
   1396c:	str	r0, [r7]
   13970:	ldr	r0, [r7, #4]
   13974:	mov	r1, #0
   13978:	sub	r2, r9, r0
   1397c:	add	r0, r5, r0, lsl #3
   13980:	lsl	r2, r2, #3
   13984:	bl	10f34 <memset@plt>
   13988:	str	r9, [r7, #4]
   1398c:	add	r3, r5, r6, lsl #3
   13990:	ldr	r1, [r4, #4]
   13994:	ldr	r7, [r3, #4]
   13998:	ldr	r9, [r5, r6, lsl #3]
   1399c:	ldr	r2, [r4, #40]	; 0x28
   139a0:	ldr	ip, [r4, #44]	; 0x2c
   139a4:	str	r3, [sp, #28]
   139a8:	ldr	r3, [r4]
   139ac:	orr	r1, r1, #1
   139b0:	add	lr, r4, #8
   139b4:	str	r1, [sp, #36]	; 0x24
   139b8:	str	r1, [sp, #4]
   139bc:	str	r2, [sp, #12]
   139c0:	str	r3, [sp]
   139c4:	mov	r0, r7
   139c8:	mov	r1, r9
   139cc:	str	ip, [sp, #16]
   139d0:	str	lr, [sp, #8]
   139d4:	mov	r3, fp
   139d8:	mov	r2, sl
   139dc:	str	lr, [sp, #32]
   139e0:	bl	120e8 <__assert_fail@plt+0x10e8>
   139e4:	cmp	r9, r0
   139e8:	bhi	13a54 <__assert_fail@plt+0x2a54>
   139ec:	ldr	r3, [pc, #160]	; 13a94 <__assert_fail@plt+0x2a94>
   139f0:	add	r9, r0, #1
   139f4:	cmp	r7, r3
   139f8:	str	r9, [r5, r6, lsl #3]
   139fc:	beq	13a08 <__assert_fail@plt+0x2a08>
   13a00:	mov	r0, r7
   13a04:	bl	10da8 <free@plt>
   13a08:	mov	r0, r9
   13a0c:	bl	14698 <__assert_fail@plt+0x3698>
   13a10:	ldr	lr, [sp, #28]
   13a14:	ldr	ip, [r4, #44]	; 0x2c
   13a18:	ldr	r5, [r4, #40]	; 0x28
   13a1c:	mov	r3, fp
   13a20:	mov	r2, sl
   13a24:	mov	r1, r9
   13a28:	str	r0, [lr, #4]
   13a2c:	ldr	lr, [r4]
   13a30:	ldr	r4, [sp, #32]
   13a34:	str	ip, [sp, #16]
   13a38:	str	r4, [sp, #8]
   13a3c:	ldr	r4, [sp, #36]	; 0x24
   13a40:	str	r5, [sp, #12]
   13a44:	str	r4, [sp, #4]
   13a48:	str	lr, [sp]
   13a4c:	mov	r7, r0
   13a50:	bl	120e8 <__assert_fail@plt+0x10e8>
   13a54:	ldr	r3, [sp, #24]
   13a58:	mov	r0, r7
   13a5c:	str	r3, [r8]
   13a60:	add	sp, sp, #44	; 0x2c
   13a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a68:	mov	r0, #0
   13a6c:	bl	146f4 <__assert_fail@plt+0x36f4>
   13a70:	ldr	r3, [pc, #32]	; 13a98 <__assert_fail@plt+0x2a98>
   13a74:	mov	r5, r0
   13a78:	ldm	r3, {r0, r1}
   13a7c:	str	r5, [r7]
   13a80:	stm	r5, {r0, r1}
   13a84:	b	13970 <__assert_fail@plt+0x2970>
   13a88:	bl	148e0 <__assert_fail@plt+0x38e0>
   13a8c:	bl	10fe8 <abort@plt>
   13a90:	andeq	r9, r2, r0, lsl #2
   13a94:	muleq	r2, r4, r1
   13a98:	andeq	r9, r2, r8, lsl #2
   13a9c:	push	{r4, r5, r6, lr}
   13aa0:	mov	r5, r0
   13aa4:	bl	10f1c <__errno_location@plt>
   13aa8:	cmp	r5, #0
   13aac:	mov	r1, #48	; 0x30
   13ab0:	mov	r4, r0
   13ab4:	ldr	r0, [pc, #16]	; 13acc <__assert_fail@plt+0x2acc>
   13ab8:	ldr	r6, [r4]
   13abc:	movne	r0, r5
   13ac0:	bl	148a0 <__assert_fail@plt+0x38a0>
   13ac4:	str	r6, [r4]
   13ac8:	pop	{r4, r5, r6, pc}
   13acc:	muleq	r2, r4, r2
   13ad0:	ldr	r3, [pc, #12]	; 13ae4 <__assert_fail@plt+0x2ae4>
   13ad4:	cmp	r0, #0
   13ad8:	moveq	r0, r3
   13adc:	ldr	r0, [r0]
   13ae0:	bx	lr
   13ae4:	muleq	r2, r4, r2
   13ae8:	ldr	r3, [pc, #12]	; 13afc <__assert_fail@plt+0x2afc>
   13aec:	cmp	r0, #0
   13af0:	moveq	r0, r3
   13af4:	str	r1, [r0]
   13af8:	bx	lr
   13afc:	muleq	r2, r4, r2
   13b00:	ldr	r3, [pc, #52]	; 13b3c <__assert_fail@plt+0x2b3c>
   13b04:	cmp	r0, #0
   13b08:	moveq	r0, r3
   13b0c:	add	r3, r0, #8
   13b10:	push	{lr}		; (str lr, [sp, #-4]!)
   13b14:	lsr	lr, r1, #5
   13b18:	and	r1, r1, #31
   13b1c:	ldr	ip, [r3, lr, lsl #2]
   13b20:	lsr	r0, ip, r1
   13b24:	eor	r2, r2, r0
   13b28:	and	r2, r2, #1
   13b2c:	and	r0, r0, #1
   13b30:	eor	r1, ip, r2, lsl r1
   13b34:	str	r1, [r3, lr, lsl #2]
   13b38:	pop	{pc}		; (ldr pc, [sp], #4)
   13b3c:	muleq	r2, r4, r2
   13b40:	ldr	r3, [pc, #16]	; 13b58 <__assert_fail@plt+0x2b58>
   13b44:	cmp	r0, #0
   13b48:	movne	r3, r0
   13b4c:	ldr	r0, [r3, #4]
   13b50:	str	r1, [r3, #4]
   13b54:	bx	lr
   13b58:	muleq	r2, r4, r2
   13b5c:	ldr	r3, [pc, #44]	; 13b90 <__assert_fail@plt+0x2b90>
   13b60:	cmp	r0, #0
   13b64:	moveq	r0, r3
   13b68:	mov	ip, #10
   13b6c:	cmp	r2, #0
   13b70:	cmpne	r1, #0
   13b74:	str	ip, [r0]
   13b78:	beq	13b88 <__assert_fail@plt+0x2b88>
   13b7c:	str	r1, [r0, #40]	; 0x28
   13b80:	str	r2, [r0, #44]	; 0x2c
   13b84:	bx	lr
   13b88:	push	{r4, lr}
   13b8c:	bl	10fe8 <abort@plt>
   13b90:	muleq	r2, r4, r2
   13b94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b98:	sub	sp, sp, #24
   13b9c:	ldr	ip, [pc, #108]	; 13c10 <__assert_fail@plt+0x2c10>
   13ba0:	ldr	r4, [sp, #56]	; 0x38
   13ba4:	mov	r9, r2
   13ba8:	cmp	r4, #0
   13bac:	moveq	r4, ip
   13bb0:	mov	sl, r3
   13bb4:	mov	r7, r0
   13bb8:	mov	r8, r1
   13bbc:	bl	10f1c <__errno_location@plt>
   13bc0:	ldr	r3, [r4, #44]	; 0x2c
   13bc4:	mov	r1, r8
   13bc8:	ldr	r6, [r0]
   13bcc:	str	r3, [sp, #16]
   13bd0:	ldr	r2, [r4, #40]	; 0x28
   13bd4:	add	r3, r4, #8
   13bd8:	str	r3, [sp, #8]
   13bdc:	str	r2, [sp, #12]
   13be0:	ldr	r2, [r4, #4]
   13be4:	mov	r5, r0
   13be8:	str	r2, [sp, #4]
   13bec:	ldr	ip, [r4]
   13bf0:	mov	r3, sl
   13bf4:	mov	r2, r9
   13bf8:	mov	r0, r7
   13bfc:	str	ip, [sp]
   13c00:	bl	120e8 <__assert_fail@plt+0x10e8>
   13c04:	str	r6, [r5]
   13c08:	add	sp, sp, #24
   13c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c10:	muleq	r2, r4, r2
   13c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c18:	cmp	r3, #0
   13c1c:	sub	sp, sp, #44	; 0x2c
   13c20:	ldr	r4, [pc, #192]	; 13ce8 <__assert_fail@plt+0x2ce8>
   13c24:	mov	r6, r2
   13c28:	movne	r4, r3
   13c2c:	mov	r9, r1
   13c30:	mov	r8, r0
   13c34:	bl	10f1c <__errno_location@plt>
   13c38:	ldr	r3, [r4, #44]	; 0x2c
   13c3c:	ldr	r5, [r4, #4]
   13c40:	add	sl, r4, #8
   13c44:	cmp	r6, #0
   13c48:	orreq	r5, r5, #1
   13c4c:	mov	r1, #0
   13c50:	ldr	r2, [r0]
   13c54:	str	r3, [sp, #16]
   13c58:	ldr	r3, [r4, #40]	; 0x28
   13c5c:	stmib	sp, {r5, sl}
   13c60:	str	r3, [sp, #12]
   13c64:	ldr	r3, [r4]
   13c68:	mov	r7, r0
   13c6c:	str	r2, [sp, #28]
   13c70:	str	r3, [sp]
   13c74:	mov	r2, r8
   13c78:	mov	r3, r9
   13c7c:	mov	r0, r1
   13c80:	bl	120e8 <__assert_fail@plt+0x10e8>
   13c84:	add	r1, r0, #1
   13c88:	mov	fp, r0
   13c8c:	mov	r0, r1
   13c90:	str	r1, [sp, #36]	; 0x24
   13c94:	bl	14698 <__assert_fail@plt+0x3698>
   13c98:	ldr	r3, [r4, #44]	; 0x2c
   13c9c:	mov	r2, r8
   13ca0:	str	r3, [sp, #16]
   13ca4:	ldr	r3, [r4, #40]	; 0x28
   13ca8:	str	r5, [sp, #4]
   13cac:	str	r3, [sp, #12]
   13cb0:	str	sl, [sp, #8]
   13cb4:	ldr	ip, [r4]
   13cb8:	ldr	r1, [sp, #36]	; 0x24
   13cbc:	mov	r3, r9
   13cc0:	str	ip, [sp]
   13cc4:	str	r0, [sp, #32]
   13cc8:	bl	120e8 <__assert_fail@plt+0x10e8>
   13ccc:	ldr	r2, [sp, #28]
   13cd0:	cmp	r6, #0
   13cd4:	str	r2, [r7]
   13cd8:	ldr	r0, [sp, #32]
   13cdc:	strne	fp, [r6]
   13ce0:	add	sp, sp, #44	; 0x2c
   13ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce8:	muleq	r2, r4, r2
   13cec:	mov	r3, r2
   13cf0:	mov	r2, #0
   13cf4:	b	13c14 <__assert_fail@plt+0x2c14>
   13cf8:	push	{r4, r5, r6, r7, r8, lr}
   13cfc:	ldr	r6, [pc, #112]	; 13d74 <__assert_fail@plt+0x2d74>
   13d00:	ldr	r3, [r6, #4]
   13d04:	ldr	r7, [r6]
   13d08:	cmp	r3, #1
   13d0c:	ble	13d30 <__assert_fail@plt+0x2d30>
   13d10:	sub	r5, r7, #8
   13d14:	add	r5, r5, r3, lsl #3
   13d18:	mov	r4, r7
   13d1c:	ldr	r0, [r4, #12]
   13d20:	add	r4, r4, #8
   13d24:	bl	10da8 <free@plt>
   13d28:	cmp	r4, r5
   13d2c:	bne	13d1c <__assert_fail@plt+0x2d1c>
   13d30:	ldr	r0, [r7, #4]
   13d34:	ldr	r4, [pc, #60]	; 13d78 <__assert_fail@plt+0x2d78>
   13d38:	cmp	r0, r4
   13d3c:	beq	13d50 <__assert_fail@plt+0x2d50>
   13d40:	bl	10da8 <free@plt>
   13d44:	mov	r3, #256	; 0x100
   13d48:	str	r4, [r6, #12]
   13d4c:	str	r3, [r6, #8]
   13d50:	ldr	r4, [pc, #36]	; 13d7c <__assert_fail@plt+0x2d7c>
   13d54:	cmp	r7, r4
   13d58:	beq	13d68 <__assert_fail@plt+0x2d68>
   13d5c:	mov	r0, r7
   13d60:	bl	10da8 <free@plt>
   13d64:	str	r4, [r6]
   13d68:	mov	r3, #1
   13d6c:	str	r3, [r6, #4]
   13d70:	pop	{r4, r5, r6, r7, r8, pc}
   13d74:	andeq	r9, r2, r0, lsl #2
   13d78:	muleq	r2, r4, r1
   13d7c:	andeq	r9, r2, r8, lsl #2
   13d80:	ldr	r3, [pc, #4]	; 13d8c <__assert_fail@plt+0x2d8c>
   13d84:	mvn	r2, #0
   13d88:	b	13900 <__assert_fail@plt+0x2900>
   13d8c:	muleq	r2, r4, r2
   13d90:	ldr	r3, [pc]	; 13d98 <__assert_fail@plt+0x2d98>
   13d94:	b	13900 <__assert_fail@plt+0x2900>
   13d98:	muleq	r2, r4, r2
   13d9c:	mov	r1, r0
   13da0:	ldr	r3, [pc, #8]	; 13db0 <__assert_fail@plt+0x2db0>
   13da4:	mvn	r2, #0
   13da8:	mov	r0, #0
   13dac:	b	13900 <__assert_fail@plt+0x2900>
   13db0:	muleq	r2, r4, r2
   13db4:	mov	r2, r1
   13db8:	ldr	r3, [pc, #8]	; 13dc8 <__assert_fail@plt+0x2dc8>
   13dbc:	mov	r1, r0
   13dc0:	mov	r0, #0
   13dc4:	b	13900 <__assert_fail@plt+0x2900>
   13dc8:	muleq	r2, r4, r2
   13dcc:	push	{r4, r5, r6, lr}
   13dd0:	sub	sp, sp, #56	; 0x38
   13dd4:	ldr	r4, [pc, #68]	; 13e20 <__assert_fail@plt+0x2e20>
   13dd8:	mov	r6, r2
   13ddc:	mov	r5, r0
   13de0:	ldr	r3, [r4]
   13de4:	add	r0, sp, #4
   13de8:	str	r3, [sp, #52]	; 0x34
   13dec:	bl	11f78 <__assert_fail@plt+0xf78>
   13df0:	add	r3, sp, #4
   13df4:	mvn	r2, #0
   13df8:	mov	r1, r6
   13dfc:	mov	r0, r5
   13e00:	bl	13900 <__assert_fail@plt+0x2900>
   13e04:	ldr	r2, [sp, #52]	; 0x34
   13e08:	ldr	r3, [r4]
   13e0c:	cmp	r2, r3
   13e10:	bne	13e1c <__assert_fail@plt+0x2e1c>
   13e14:	add	sp, sp, #56	; 0x38
   13e18:	pop	{r4, r5, r6, pc}
   13e1c:	bl	10e08 <__stack_chk_fail@plt>
   13e20:	andeq	r8, r2, r8, lsl #30
   13e24:	push	{r4, r5, r6, r7, lr}
   13e28:	sub	sp, sp, #60	; 0x3c
   13e2c:	ldr	r4, [pc, #72]	; 13e7c <__assert_fail@plt+0x2e7c>
   13e30:	mov	r6, r2
   13e34:	mov	r7, r3
   13e38:	ldr	ip, [r4]
   13e3c:	mov	r5, r0
   13e40:	add	r0, sp, #4
   13e44:	str	ip, [sp, #52]	; 0x34
   13e48:	bl	11f78 <__assert_fail@plt+0xf78>
   13e4c:	add	r3, sp, #4
   13e50:	mov	r2, r7
   13e54:	mov	r1, r6
   13e58:	mov	r0, r5
   13e5c:	bl	13900 <__assert_fail@plt+0x2900>
   13e60:	ldr	r2, [sp, #52]	; 0x34
   13e64:	ldr	r3, [r4]
   13e68:	cmp	r2, r3
   13e6c:	bne	13e78 <__assert_fail@plt+0x2e78>
   13e70:	add	sp, sp, #60	; 0x3c
   13e74:	pop	{r4, r5, r6, r7, pc}
   13e78:	bl	10e08 <__stack_chk_fail@plt>
   13e7c:	andeq	r8, r2, r8, lsl #30
   13e80:	mov	r2, r1
   13e84:	mov	r1, r0
   13e88:	mov	r0, #0
   13e8c:	b	13dcc <__assert_fail@plt+0x2dcc>
   13e90:	mov	r3, r2
   13e94:	mov	r2, r1
   13e98:	mov	r1, r0
   13e9c:	mov	r0, #0
   13ea0:	b	13e24 <__assert_fail@plt+0x2e24>
   13ea4:	push	{r4, r5, r6, r7, r8, r9, lr}
   13ea8:	mov	r4, r2
   13eac:	ldr	lr, [pc, #128]	; 13f34 <__assert_fail@plt+0x2f34>
   13eb0:	mov	r8, r0
   13eb4:	mov	r9, r1
   13eb8:	ldm	lr!, {r0, r1, r2, r3}
   13ebc:	sub	sp, sp, #60	; 0x3c
   13ec0:	add	ip, sp, #4
   13ec4:	lsr	r6, r4, #5
   13ec8:	stmia	ip!, {r0, r1, r2, r3}
   13ecc:	add	r7, sp, #12
   13ed0:	ldm	lr!, {r0, r1, r2, r3}
   13ed4:	and	r4, r4, #31
   13ed8:	ldr	r5, [pc, #88]	; 13f38 <__assert_fail@plt+0x2f38>
   13edc:	stmia	ip!, {r0, r1, r2, r3}
   13ee0:	ldm	lr, {r0, r1, r2, r3}
   13ee4:	stm	ip, {r0, r1, r2, r3}
   13ee8:	mov	r2, r9
   13eec:	ldr	r3, [r7, r6, lsl #2]
   13ef0:	ldr	ip, [r5]
   13ef4:	mov	r1, r8
   13ef8:	mvn	r0, r3, lsr r4
   13efc:	and	r0, r0, #1
   13f00:	str	ip, [sp, #52]	; 0x34
   13f04:	eor	r4, r3, r0, lsl r4
   13f08:	add	r3, sp, #4
   13f0c:	mov	r0, #0
   13f10:	str	r4, [r7, r6, lsl #2]
   13f14:	bl	13900 <__assert_fail@plt+0x2900>
   13f18:	ldr	r2, [sp, #52]	; 0x34
   13f1c:	ldr	r3, [r5]
   13f20:	cmp	r2, r3
   13f24:	bne	13f30 <__assert_fail@plt+0x2f30>
   13f28:	add	sp, sp, #60	; 0x3c
   13f2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f30:	bl	10e08 <__stack_chk_fail@plt>
   13f34:	muleq	r2, r4, r2
   13f38:	andeq	r8, r2, r8, lsl #30
   13f3c:	mov	r2, r1
   13f40:	mvn	r1, #0
   13f44:	b	13ea4 <__assert_fail@plt+0x2ea4>
   13f48:	mov	r2, #58	; 0x3a
   13f4c:	mvn	r1, #0
   13f50:	b	13ea4 <__assert_fail@plt+0x2ea4>
   13f54:	mov	r2, #58	; 0x3a
   13f58:	b	13ea4 <__assert_fail@plt+0x2ea4>
   13f5c:	push	{r4, r5, r6, r7, r8, lr}
   13f60:	sub	sp, sp, #104	; 0x68
   13f64:	ldr	r5, [pc, #120]	; 13fe4 <__assert_fail@plt+0x2fe4>
   13f68:	mov	r6, r0
   13f6c:	mov	r0, sp
   13f70:	ldr	r3, [r5]
   13f74:	mov	r7, r2
   13f78:	str	r3, [sp, #100]	; 0x64
   13f7c:	bl	11f78 <__assert_fail@plt+0xf78>
   13f80:	mov	ip, sp
   13f84:	add	lr, sp, #52	; 0x34
   13f88:	ldm	ip!, {r0, r1, r2, r3}
   13f8c:	stmia	lr!, {r0, r1, r2, r3}
   13f90:	ldm	ip!, {r0, r1, r2, r3}
   13f94:	ldr	r8, [sp, #64]	; 0x40
   13f98:	stmia	lr!, {r0, r1, r2, r3}
   13f9c:	mvn	r4, r8
   13fa0:	ldm	ip, {r0, r1, r2, r3}
   13fa4:	and	ip, r4, #67108864	; 0x4000000
   13fa8:	eor	ip, ip, r8
   13fac:	str	ip, [sp, #64]	; 0x40
   13fb0:	stm	lr, {r0, r1, r2, r3}
   13fb4:	add	r3, sp, #52	; 0x34
   13fb8:	mvn	r2, #0
   13fbc:	mov	r1, r7
   13fc0:	mov	r0, r6
   13fc4:	bl	13900 <__assert_fail@plt+0x2900>
   13fc8:	ldr	r2, [sp, #100]	; 0x64
   13fcc:	ldr	r3, [r5]
   13fd0:	cmp	r2, r3
   13fd4:	bne	13fe0 <__assert_fail@plt+0x2fe0>
   13fd8:	add	sp, sp, #104	; 0x68
   13fdc:	pop	{r4, r5, r6, r7, r8, pc}
   13fe0:	bl	10e08 <__stack_chk_fail@plt>
   13fe4:	andeq	r8, r2, r8, lsl #30
   13fe8:	push	{r4, r5, r6, r7, r8, r9, lr}
   13fec:	mov	r6, r1
   13ff0:	ldr	lr, [pc, #132]	; 1407c <__assert_fail@plt+0x307c>
   13ff4:	mov	r5, r2
   13ff8:	mov	r8, r0
   13ffc:	mov	r9, r3
   14000:	ldm	lr!, {r0, r1, r2, r3}
   14004:	sub	sp, sp, #60	; 0x3c
   14008:	add	ip, sp, #4
   1400c:	ldr	r4, [pc, #108]	; 14080 <__assert_fail@plt+0x3080>
   14010:	stmia	ip!, {r0, r1, r2, r3}
   14014:	mov	r7, #10
   14018:	ldm	lr!, {r0, r1, r2, r3}
   1401c:	cmp	r5, #0
   14020:	cmpne	r6, #0
   14024:	str	r7, [sp, #4]
   14028:	stmia	ip!, {r0, r1, r2, r3}
   1402c:	ldm	lr, {r0, r1, r2, r3}
   14030:	ldr	lr, [r4]
   14034:	stm	ip, {r0, r1, r2, r3}
   14038:	str	lr, [sp, #52]	; 0x34
   1403c:	beq	14078 <__assert_fail@plt+0x3078>
   14040:	add	r3, sp, #4
   14044:	ldr	r2, [sp, #88]	; 0x58
   14048:	mov	r1, r9
   1404c:	mov	r0, r8
   14050:	str	r6, [sp, #44]	; 0x2c
   14054:	str	r5, [sp, #48]	; 0x30
   14058:	bl	13900 <__assert_fail@plt+0x2900>
   1405c:	ldr	r2, [sp, #52]	; 0x34
   14060:	ldr	r3, [r4]
   14064:	cmp	r2, r3
   14068:	bne	14074 <__assert_fail@plt+0x3074>
   1406c:	add	sp, sp, #60	; 0x3c
   14070:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14074:	bl	10e08 <__stack_chk_fail@plt>
   14078:	bl	10fe8 <abort@plt>
   1407c:	muleq	r2, r4, r2
   14080:	andeq	r8, r2, r8, lsl #30
   14084:	push	{lr}		; (str lr, [sp, #-4]!)
   14088:	sub	sp, sp, #12
   1408c:	mvn	ip, #0
   14090:	str	ip, [sp]
   14094:	bl	13fe8 <__assert_fail@plt+0x2fe8>
   14098:	add	sp, sp, #12
   1409c:	pop	{pc}		; (ldr pc, [sp], #4)
   140a0:	push	{lr}		; (str lr, [sp, #-4]!)
   140a4:	sub	sp, sp, #12
   140a8:	mvn	ip, #0
   140ac:	mov	r3, r2
   140b0:	str	ip, [sp]
   140b4:	mov	r2, r1
   140b8:	mov	r1, r0
   140bc:	mov	r0, #0
   140c0:	bl	13fe8 <__assert_fail@plt+0x2fe8>
   140c4:	add	sp, sp, #12
   140c8:	pop	{pc}		; (ldr pc, [sp], #4)
   140cc:	push	{lr}		; (str lr, [sp, #-4]!)
   140d0:	sub	sp, sp, #12
   140d4:	str	r3, [sp]
   140d8:	mov	r3, r2
   140dc:	mov	r2, r1
   140e0:	mov	r1, r0
   140e4:	mov	r0, #0
   140e8:	bl	13fe8 <__assert_fail@plt+0x2fe8>
   140ec:	add	sp, sp, #12
   140f0:	pop	{pc}		; (ldr pc, [sp], #4)
   140f4:	ldr	r3, [pc]	; 140fc <__assert_fail@plt+0x30fc>
   140f8:	b	13900 <__assert_fail@plt+0x2900>
   140fc:	andeq	r9, r2, r0, lsl r1
   14100:	mov	r2, r1
   14104:	ldr	r3, [pc, #8]	; 14114 <__assert_fail@plt+0x3114>
   14108:	mov	r1, r0
   1410c:	mov	r0, #0
   14110:	b	13900 <__assert_fail@plt+0x2900>
   14114:	andeq	r9, r2, r0, lsl r1
   14118:	ldr	r3, [pc, #4]	; 14124 <__assert_fail@plt+0x3124>
   1411c:	mvn	r2, #0
   14120:	b	13900 <__assert_fail@plt+0x2900>
   14124:	andeq	r9, r2, r0, lsl r1
   14128:	mov	r1, r0
   1412c:	ldr	r3, [pc, #8]	; 1413c <__assert_fail@plt+0x313c>
   14130:	mvn	r2, #0
   14134:	mov	r0, #0
   14138:	b	13900 <__assert_fail@plt+0x2900>
   1413c:	andeq	r9, r2, r0, lsl r1
   14140:	push	{r4, r5, r6, lr}
   14144:	sub	sp, sp, #32
   14148:	cmp	r1, #0
   1414c:	mov	r5, r0
   14150:	ldr	r4, [sp, #48]	; 0x30
   14154:	ldr	r6, [sp, #52]	; 0x34
   14158:	beq	141e8 <__assert_fail@plt+0x31e8>
   1415c:	strd	r2, [sp]
   14160:	mov	r3, r1
   14164:	ldr	r2, [pc, #828]	; 144a8 <__assert_fail@plt+0x34a8>
   14168:	mov	r1, #1
   1416c:	bl	10f58 <__fprintf_chk@plt>
   14170:	mov	r2, #5
   14174:	ldr	r1, [pc, #816]	; 144ac <__assert_fail@plt+0x34ac>
   14178:	mov	r0, #0
   1417c:	bl	10dfc <dcgettext@plt>
   14180:	ldr	r3, [pc, #808]	; 144b0 <__assert_fail@plt+0x34b0>
   14184:	ldr	r2, [pc, #808]	; 144b4 <__assert_fail@plt+0x34b4>
   14188:	str	r3, [sp]
   1418c:	mov	r1, #1
   14190:	mov	r3, r0
   14194:	mov	r0, r5
   14198:	bl	10f58 <__fprintf_chk@plt>
   1419c:	ldr	r1, [pc, #788]	; 144b8 <__assert_fail@plt+0x34b8>
   141a0:	mov	r2, #5
   141a4:	mov	r0, #0
   141a8:	bl	10dfc <dcgettext@plt>
   141ac:	mov	r1, r5
   141b0:	bl	10d78 <fputs_unlocked@plt>
   141b4:	cmp	r6, #9
   141b8:	ldrls	pc, [pc, r6, lsl #2]
   141bc:	b	14498 <__assert_fail@plt+0x3498>
   141c0:	andeq	r4, r1, r4, lsr #9
   141c4:	andeq	r4, r1, ip, ror #4
   141c8:	muleq	r1, r8, r2
   141cc:	andeq	r4, r1, ip, asr #5
   141d0:	andeq	r4, r1, r8, lsl #6
   141d4:	andeq	r4, r1, r8, asr #6
   141d8:	muleq	r1, r0, r3
   141dc:	andeq	r4, r1, r0, ror #7
   141e0:	andeq	r4, r1, r8, lsr r4
   141e4:	andeq	r4, r1, r0, lsl #4
   141e8:	str	r3, [sp]
   141ec:	mov	r1, #1
   141f0:	mov	r3, r2
   141f4:	ldr	r2, [pc, #704]	; 144bc <__assert_fail@plt+0x34bc>
   141f8:	bl	10f58 <__fprintf_chk@plt>
   141fc:	b	14170 <__assert_fail@plt+0x3170>
   14200:	ldr	r1, [pc, #696]	; 144c0 <__assert_fail@plt+0x34c0>
   14204:	mov	r2, #5
   14208:	mov	r0, #0
   1420c:	bl	10dfc <dcgettext@plt>
   14210:	ldr	r2, [r4, #32]
   14214:	ldr	r3, [r4, #28]
   14218:	ldr	r1, [r4, #24]
   1421c:	str	r2, [sp, #28]
   14220:	ldr	r2, [r4, #20]
   14224:	str	r3, [sp, #24]
   14228:	ldr	r3, [r4, #16]
   1422c:	str	r1, [sp, #20]
   14230:	ldr	r1, [r4, #12]
   14234:	str	r2, [sp, #16]
   14238:	ldr	r2, [r4, #8]
   1423c:	str	r3, [sp, #12]
   14240:	ldr	r3, [r4, #4]
   14244:	str	r1, [sp, #8]
   14248:	str	r2, [sp, #4]
   1424c:	str	r3, [sp]
   14250:	mov	r1, #1
   14254:	ldr	r3, [r4]
   14258:	mov	r2, r0
   1425c:	mov	r0, r5
   14260:	bl	10f58 <__fprintf_chk@plt>
   14264:	add	sp, sp, #32
   14268:	pop	{r4, r5, r6, pc}
   1426c:	mov	r2, #5
   14270:	ldr	r1, [pc, #588]	; 144c4 <__assert_fail@plt+0x34c4>
   14274:	mov	r0, #0
   14278:	bl	10dfc <dcgettext@plt>
   1427c:	ldr	r3, [r4]
   14280:	mov	r1, #1
   14284:	mov	r2, r0
   14288:	mov	r0, r5
   1428c:	add	sp, sp, #32
   14290:	pop	{r4, r5, r6, lr}
   14294:	b	10f58 <__fprintf_chk@plt>
   14298:	mov	r2, #5
   1429c:	ldr	r1, [pc, #548]	; 144c8 <__assert_fail@plt+0x34c8>
   142a0:	mov	r0, #0
   142a4:	bl	10dfc <dcgettext@plt>
   142a8:	ldr	r2, [r4, #4]
   142ac:	ldr	r3, [r4]
   142b0:	mov	r1, #1
   142b4:	str	r2, [sp, #48]	; 0x30
   142b8:	mov	r2, r0
   142bc:	mov	r0, r5
   142c0:	add	sp, sp, #32
   142c4:	pop	{r4, r5, r6, lr}
   142c8:	b	10f58 <__fprintf_chk@plt>
   142cc:	mov	r2, #5
   142d0:	ldr	r1, [pc, #500]	; 144cc <__assert_fail@plt+0x34cc>
   142d4:	mov	r0, #0
   142d8:	bl	10dfc <dcgettext@plt>
   142dc:	ldr	r2, [r4, #8]
   142e0:	ldr	r3, [r4, #4]
   142e4:	mov	r1, #1
   142e8:	str	r2, [sp, #52]	; 0x34
   142ec:	str	r3, [sp, #48]	; 0x30
   142f0:	ldr	r3, [r4]
   142f4:	mov	r2, r0
   142f8:	mov	r0, r5
   142fc:	add	sp, sp, #32
   14300:	pop	{r4, r5, r6, lr}
   14304:	b	10f58 <__fprintf_chk@plt>
   14308:	mov	r2, #5
   1430c:	ldr	r1, [pc, #444]	; 144d0 <__assert_fail@plt+0x34d0>
   14310:	mov	r0, #0
   14314:	bl	10dfc <dcgettext@plt>
   14318:	ldr	r1, [r4, #12]
   1431c:	ldr	r2, [r4, #8]
   14320:	ldr	r3, [r4, #4]
   14324:	str	r1, [sp, #8]
   14328:	str	r2, [sp, #4]
   1432c:	str	r3, [sp]
   14330:	mov	r1, #1
   14334:	ldr	r3, [r4]
   14338:	mov	r2, r0
   1433c:	mov	r0, r5
   14340:	bl	10f58 <__fprintf_chk@plt>
   14344:	b	14264 <__assert_fail@plt+0x3264>
   14348:	mov	r2, #5
   1434c:	ldr	r1, [pc, #384]	; 144d4 <__assert_fail@plt+0x34d4>
   14350:	mov	r0, #0
   14354:	bl	10dfc <dcgettext@plt>
   14358:	ldr	r3, [r4, #16]
   1435c:	ldr	r1, [r4, #12]
   14360:	ldr	r2, [r4, #8]
   14364:	str	r3, [sp, #12]
   14368:	ldr	r3, [r4, #4]
   1436c:	str	r1, [sp, #8]
   14370:	str	r2, [sp, #4]
   14374:	str	r3, [sp]
   14378:	mov	r1, #1
   1437c:	ldr	r3, [r4]
   14380:	mov	r2, r0
   14384:	mov	r0, r5
   14388:	bl	10f58 <__fprintf_chk@plt>
   1438c:	b	14264 <__assert_fail@plt+0x3264>
   14390:	mov	r2, #5
   14394:	ldr	r1, [pc, #316]	; 144d8 <__assert_fail@plt+0x34d8>
   14398:	mov	r0, #0
   1439c:	bl	10dfc <dcgettext@plt>
   143a0:	ldr	r2, [r4, #20]
   143a4:	ldr	r3, [r4, #16]
   143a8:	ldr	r1, [r4, #12]
   143ac:	str	r2, [sp, #16]
   143b0:	ldr	r2, [r4, #8]
   143b4:	str	r3, [sp, #12]
   143b8:	ldr	r3, [r4, #4]
   143bc:	str	r1, [sp, #8]
   143c0:	str	r2, [sp, #4]
   143c4:	str	r3, [sp]
   143c8:	mov	r1, #1
   143cc:	ldr	r3, [r4]
   143d0:	mov	r2, r0
   143d4:	mov	r0, r5
   143d8:	bl	10f58 <__fprintf_chk@plt>
   143dc:	b	14264 <__assert_fail@plt+0x3264>
   143e0:	mov	r2, #5
   143e4:	ldr	r1, [pc, #240]	; 144dc <__assert_fail@plt+0x34dc>
   143e8:	mov	r0, #0
   143ec:	bl	10dfc <dcgettext@plt>
   143f0:	ldr	r1, [r4, #24]
   143f4:	ldr	r2, [r4, #20]
   143f8:	ldr	r3, [r4, #16]
   143fc:	str	r1, [sp, #20]
   14400:	ldr	r1, [r4, #12]
   14404:	str	r2, [sp, #16]
   14408:	ldr	r2, [r4, #8]
   1440c:	str	r3, [sp, #12]
   14410:	ldr	r3, [r4, #4]
   14414:	str	r1, [sp, #8]
   14418:	str	r2, [sp, #4]
   1441c:	str	r3, [sp]
   14420:	mov	r1, #1
   14424:	ldr	r3, [r4]
   14428:	mov	r2, r0
   1442c:	mov	r0, r5
   14430:	bl	10f58 <__fprintf_chk@plt>
   14434:	b	14264 <__assert_fail@plt+0x3264>
   14438:	mov	r2, #5
   1443c:	ldr	r1, [pc, #156]	; 144e0 <__assert_fail@plt+0x34e0>
   14440:	mov	r0, #0
   14444:	bl	10dfc <dcgettext@plt>
   14448:	ldr	r3, [r4, #28]
   1444c:	ldr	r1, [r4, #24]
   14450:	ldr	r2, [r4, #20]
   14454:	str	r3, [sp, #24]
   14458:	ldr	r3, [r4, #16]
   1445c:	str	r1, [sp, #20]
   14460:	ldr	r1, [r4, #12]
   14464:	str	r2, [sp, #16]
   14468:	ldr	r2, [r4, #8]
   1446c:	str	r3, [sp, #12]
   14470:	ldr	r3, [r4, #4]
   14474:	str	r1, [sp, #8]
   14478:	str	r2, [sp, #4]
   1447c:	str	r3, [sp]
   14480:	mov	r1, #1
   14484:	ldr	r3, [r4]
   14488:	mov	r2, r0
   1448c:	mov	r0, r5
   14490:	bl	10f58 <__fprintf_chk@plt>
   14494:	b	14264 <__assert_fail@plt+0x3264>
   14498:	mov	r2, #5
   1449c:	ldr	r1, [pc, #64]	; 144e4 <__assert_fail@plt+0x34e4>
   144a0:	b	14208 <__assert_fail@plt+0x3208>
   144a4:	bl	10fe8 <abort@plt>
   144a8:	andeq	r8, r1, ip, asr r2
   144ac:	andeq	r8, r1, r0, ror r2
   144b0:	andeq	r0, r0, r2, ror #15
   144b4:	andeq	r8, r1, r4, asr #10
   144b8:	andeq	r8, r1, r4, ror r2
   144bc:	andeq	r8, r1, r8, ror #4
   144c0:	andeq	r8, r1, ip, asr #8
   144c4:	andeq	r8, r1, r0, asr #6
   144c8:	andeq	r8, r1, r0, asr r3
   144cc:	andeq	r8, r1, r8, ror #6
   144d0:	andeq	r8, r1, r4, lsl #7
   144d4:	andeq	r8, r1, r4, lsr #7
   144d8:	andeq	r8, r1, r8, asr #7
   144dc:	strdeq	r8, [r1], -r0
   144e0:	andeq	r8, r1, ip, lsl r4
   144e4:	andeq	r8, r1, r0, lsl #9
   144e8:	push	{r4, r5, lr}
   144ec:	sub	sp, sp, #12
   144f0:	ldr	r5, [sp, #24]
   144f4:	ldr	ip, [r5]
   144f8:	cmp	ip, #0
   144fc:	beq	14518 <__assert_fail@plt+0x3518>
   14500:	mov	lr, r5
   14504:	mov	ip, #0
   14508:	ldr	r4, [lr, #4]!
   1450c:	add	ip, ip, #1
   14510:	cmp	r4, #0
   14514:	bne	14508 <__assert_fail@plt+0x3508>
   14518:	stm	sp, {r5, ip}
   1451c:	bl	14140 <__assert_fail@plt+0x3140>
   14520:	add	sp, sp, #12
   14524:	pop	{r4, r5, pc}
   14528:	push	{r4, r5, r6, lr}
   1452c:	sub	sp, sp, #56	; 0x38
   14530:	ldr	r6, [pc, #88]	; 14590 <__assert_fail@plt+0x3590>
   14534:	ldr	r5, [sp, #72]	; 0x48
   14538:	add	r4, sp, #8
   1453c:	ldr	ip, [r6]
   14540:	str	ip, [sp, #52]	; 0x34
   14544:	mov	ip, #0
   14548:	ldr	lr, [r5], #4
   1454c:	cmp	lr, #0
   14550:	str	lr, [r4, #4]!
   14554:	beq	14564 <__assert_fail@plt+0x3564>
   14558:	add	ip, ip, #1
   1455c:	cmp	ip, #10
   14560:	bne	14548 <__assert_fail@plt+0x3548>
   14564:	add	lr, sp, #12
   14568:	str	ip, [sp, #4]
   1456c:	str	lr, [sp]
   14570:	bl	14140 <__assert_fail@plt+0x3140>
   14574:	ldr	r2, [sp, #52]	; 0x34
   14578:	ldr	r3, [r6]
   1457c:	cmp	r2, r3
   14580:	bne	1458c <__assert_fail@plt+0x358c>
   14584:	add	sp, sp, #56	; 0x38
   14588:	pop	{r4, r5, r6, pc}
   1458c:	bl	10e08 <__stack_chk_fail@plt>
   14590:	andeq	r8, r2, r8, lsl #30
   14594:	push	{r3}		; (str r3, [sp, #-4]!)
   14598:	mov	ip, #0
   1459c:	push	{r4, r5, r6, lr}
   145a0:	sub	sp, sp, #60	; 0x3c
   145a4:	ldr	r6, [pc, #100]	; 14610 <__assert_fail@plt+0x3610>
   145a8:	add	r5, sp, #8
   145ac:	add	r4, sp, #80	; 0x50
   145b0:	ldr	r3, [r6]
   145b4:	str	r4, [sp, #8]
   145b8:	str	r3, [sp, #52]	; 0x34
   145bc:	ldr	r3, [sp, #76]	; 0x4c
   145c0:	ldr	lr, [r4], #4
   145c4:	cmp	lr, #0
   145c8:	str	lr, [r5, #4]!
   145cc:	beq	145dc <__assert_fail@plt+0x35dc>
   145d0:	add	ip, ip, #1
   145d4:	cmp	ip, #10
   145d8:	bne	145c0 <__assert_fail@plt+0x35c0>
   145dc:	add	lr, sp, #12
   145e0:	str	ip, [sp, #4]
   145e4:	str	lr, [sp]
   145e8:	bl	14140 <__assert_fail@plt+0x3140>
   145ec:	ldr	r2, [sp, #52]	; 0x34
   145f0:	ldr	r3, [r6]
   145f4:	cmp	r2, r3
   145f8:	bne	1460c <__assert_fail@plt+0x360c>
   145fc:	add	sp, sp, #60	; 0x3c
   14600:	pop	{r4, r5, r6, lr}
   14604:	add	sp, sp, #4
   14608:	bx	lr
   1460c:	bl	10e08 <__stack_chk_fail@plt>
   14610:	andeq	r8, r2, r8, lsl #30
   14614:	push	{r4, lr}
   14618:	mov	r2, #5
   1461c:	ldr	r1, [pc, #88]	; 1467c <__assert_fail@plt+0x367c>
   14620:	mov	r0, #0
   14624:	bl	10dfc <dcgettext@plt>
   14628:	ldr	r2, [pc, #80]	; 14680 <__assert_fail@plt+0x3680>
   1462c:	mov	r1, r0
   14630:	mov	r0, #1
   14634:	bl	10f40 <__printf_chk@plt>
   14638:	mov	r2, #5
   1463c:	ldr	r1, [pc, #64]	; 14684 <__assert_fail@plt+0x3684>
   14640:	mov	r0, #0
   14644:	bl	10dfc <dcgettext@plt>
   14648:	ldr	r3, [pc, #56]	; 14688 <__assert_fail@plt+0x3688>
   1464c:	ldr	r2, [pc, #56]	; 1468c <__assert_fail@plt+0x368c>
   14650:	mov	r1, r0
   14654:	mov	r0, #1
   14658:	bl	10f40 <__printf_chk@plt>
   1465c:	ldr	r1, [pc, #44]	; 14690 <__assert_fail@plt+0x3690>
   14660:	mov	r2, #5
   14664:	mov	r0, #0
   14668:	bl	10dfc <dcgettext@plt>
   1466c:	ldr	r3, [pc, #32]	; 14694 <__assert_fail@plt+0x3694>
   14670:	pop	{r4, lr}
   14674:	ldr	r1, [r3]
   14678:	b	10d78 <fputs_unlocked@plt>
   1467c:			; <UNDEFINED> instruction: 0x000184bc
   14680:	ldrdeq	r8, [r1], -r4
   14684:	andeq	r8, r1, ip, ror #9
   14688:	andeq	r7, r1, ip, asr #27
   1468c:	strdeq	r7, [r1], -r4
   14690:	andeq	r8, r1, r0, lsl #10
   14694:	andeq	r9, r2, r4, asr r1
   14698:	push	{r4, lr}
   1469c:	mov	r4, r0
   146a0:	bl	10e98 <malloc@plt>
   146a4:	adds	r4, r4, #0
   146a8:	movne	r4, #1
   146ac:	cmp	r0, #0
   146b0:	movne	r4, #0
   146b4:	cmp	r4, #0
   146b8:	popeq	{r4, pc}
   146bc:	bl	148e0 <__assert_fail@plt+0x38e0>
   146c0:	push	{r4, r5, r6, lr}
   146c4:	umull	r4, r5, r0, r1
   146c8:	adds	r3, r5, #0
   146cc:	movne	r3, #1
   146d0:	cmp	r4, #0
   146d4:	blt	146ec <__assert_fail@plt+0x36ec>
   146d8:	cmp	r3, #0
   146dc:	bne	146ec <__assert_fail@plt+0x36ec>
   146e0:	mul	r0, r1, r0
   146e4:	pop	{r4, r5, r6, lr}
   146e8:	b	14698 <__assert_fail@plt+0x3698>
   146ec:	bl	148e0 <__assert_fail@plt+0x38e0>
   146f0:	b	14698 <__assert_fail@plt+0x3698>
   146f4:	adds	r3, r0, #0
   146f8:	movne	r3, #1
   146fc:	cmp	r1, #0
   14700:	movne	r3, #0
   14704:	cmp	r3, #0
   14708:	push	{r4, lr}
   1470c:	bne	14734 <__assert_fail@plt+0x3734>
   14710:	mov	r4, r1
   14714:	bl	10e14 <realloc@plt>
   14718:	adds	r4, r4, #0
   1471c:	movne	r4, #1
   14720:	cmp	r0, #0
   14724:	movne	r4, #0
   14728:	cmp	r4, #0
   1472c:	popeq	{r4, pc}
   14730:	bl	148e0 <__assert_fail@plt+0x38e0>
   14734:	bl	10da8 <free@plt>
   14738:	mov	r0, #0
   1473c:	pop	{r4, pc}
   14740:	push	{r4, r5, r6, lr}
   14744:	umull	r4, r5, r1, r2
   14748:	adds	r3, r5, #0
   1474c:	movne	r3, #1
   14750:	cmp	r4, #0
   14754:	blt	1476c <__assert_fail@plt+0x376c>
   14758:	cmp	r3, #0
   1475c:	bne	1476c <__assert_fail@plt+0x376c>
   14760:	mul	r1, r2, r1
   14764:	pop	{r4, r5, r6, lr}
   14768:	b	146f4 <__assert_fail@plt+0x36f4>
   1476c:	bl	148e0 <__assert_fail@plt+0x38e0>
   14770:	push	{r4, r5, r6, r7, r8, lr}
   14774:	subs	r7, r0, #0
   14778:	mov	r6, r1
   1477c:	mov	r5, r2
   14780:	ldr	r4, [r1]
   14784:	beq	147b8 <__assert_fail@plt+0x37b8>
   14788:	mov	r1, r2
   1478c:	ldr	r0, [pc, #104]	; 147fc <__assert_fail@plt+0x37fc>
   14790:	bl	17580 <__assert_fail@plt+0x6580>
   14794:	cmp	r0, r4
   14798:	bls	147dc <__assert_fail@plt+0x37dc>
   1479c:	add	r3, r4, #1
   147a0:	add	r4, r3, r4, lsr #1
   147a4:	str	r4, [r6]
   147a8:	mul	r1, r5, r4
   147ac:	mov	r0, r7
   147b0:	pop	{r4, r5, r6, r7, r8, lr}
   147b4:	b	146f4 <__assert_fail@plt+0x36f4>
   147b8:	cmp	r4, #0
   147bc:	beq	147e0 <__assert_fail@plt+0x37e0>
   147c0:	umull	r0, r1, r4, r5
   147c4:	adds	r3, r1, #0
   147c8:	movne	r3, #1
   147cc:	cmp	r0, #0
   147d0:	blt	147dc <__assert_fail@plt+0x37dc>
   147d4:	cmp	r3, #0
   147d8:	beq	147a4 <__assert_fail@plt+0x37a4>
   147dc:	bl	148e0 <__assert_fail@plt+0x38e0>
   147e0:	mov	r1, r2
   147e4:	mov	r0, #64	; 0x40
   147e8:	bl	17580 <__assert_fail@plt+0x6580>
   147ec:	cmp	r5, #64	; 0x40
   147f0:	movls	r4, r0
   147f4:	addhi	r4, r0, #1
   147f8:	b	147c0 <__assert_fail@plt+0x37c0>
   147fc:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14800:	cmp	r0, #0
   14804:	ldr	r3, [r1]
   14808:	beq	1482c <__assert_fail@plt+0x382c>
   1480c:	ldr	r2, [pc, #60]	; 14850 <__assert_fail@plt+0x3850>
   14810:	cmp	r3, r2
   14814:	bhi	14848 <__assert_fail@plt+0x3848>
   14818:	add	r2, r3, #1
   1481c:	add	r3, r2, r3, lsr #1
   14820:	str	r3, [r1]
   14824:	mov	r1, r3
   14828:	b	146f4 <__assert_fail@plt+0x36f4>
   1482c:	cmp	r3, #0
   14830:	bne	14844 <__assert_fail@plt+0x3844>
   14834:	mov	r3, #64	; 0x40
   14838:	str	r3, [r1]
   1483c:	mov	r1, r3
   14840:	b	146f4 <__assert_fail@plt+0x36f4>
   14844:	bge	14820 <__assert_fail@plt+0x3820>
   14848:	push	{r4, lr}
   1484c:	bl	148e0 <__assert_fail@plt+0x38e0>
   14850:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14854:	push	{r4, lr}
   14858:	mov	r4, r0
   1485c:	bl	14698 <__assert_fail@plt+0x3698>
   14860:	mov	r2, r4
   14864:	mov	r1, #0
   14868:	pop	{r4, lr}
   1486c:	b	10f34 <memset@plt>
   14870:	push	{r4, r5, r6, lr}
   14874:	umull	r4, r5, r0, r1
   14878:	adds	r3, r5, #0
   1487c:	movne	r3, #1
   14880:	cmp	r4, #0
   14884:	blt	1489c <__assert_fail@plt+0x389c>
   14888:	cmp	r3, #0
   1488c:	bne	1489c <__assert_fail@plt+0x389c>
   14890:	bl	10d6c <calloc@plt>
   14894:	cmp	r0, #0
   14898:	popne	{r4, r5, r6, pc}
   1489c:	bl	148e0 <__assert_fail@plt+0x38e0>
   148a0:	push	{r4, r5, r6, lr}
   148a4:	mov	r4, r1
   148a8:	mov	r5, r0
   148ac:	mov	r0, r1
   148b0:	bl	14698 <__assert_fail@plt+0x3698>
   148b4:	mov	r2, r4
   148b8:	mov	r1, r5
   148bc:	pop	{r4, r5, r6, lr}
   148c0:	b	10dc0 <memcpy@plt>
   148c4:	push	{r4, lr}
   148c8:	mov	r4, r0
   148cc:	bl	10f04 <strlen@plt>
   148d0:	add	r1, r0, #1
   148d4:	mov	r0, r4
   148d8:	pop	{r4, lr}
   148dc:	b	148a0 <__assert_fail@plt+0x38a0>
   148e0:	ldr	r3, [pc, #44]	; 14914 <__assert_fail@plt+0x3914>
   148e4:	push	{r4, lr}
   148e8:	mov	r2, #5
   148ec:	ldr	r1, [pc, #36]	; 14918 <__assert_fail@plt+0x3918>
   148f0:	mov	r0, #0
   148f4:	ldr	r4, [r3]
   148f8:	bl	10dfc <dcgettext@plt>
   148fc:	ldr	r2, [pc, #24]	; 1491c <__assert_fail@plt+0x391c>
   14900:	mov	r1, #0
   14904:	mov	r3, r0
   14908:	mov	r0, r4
   1490c:	bl	10e80 <error@plt>
   14910:	bl	10fe8 <abort@plt>
   14914:	strdeq	r9, [r2], -ip
   14918:	andeq	r8, r1, r4, ror r5
   1491c:	andeq	r8, r1, r0, asr #2
   14920:	push	{r4, lr}
   14924:	bl	154d0 <__assert_fail@plt+0x44d0>
   14928:	subs	r4, r0, #0
   1492c:	beq	14938 <__assert_fail@plt+0x3938>
   14930:	mov	r0, r4
   14934:	pop	{r4, pc}
   14938:	bl	10f1c <__errno_location@plt>
   1493c:	ldr	r3, [r0]
   14940:	cmp	r3, #12
   14944:	bne	14930 <__assert_fail@plt+0x3930>
   14948:	bl	148e0 <__assert_fail@plt+0x38e0>
   1494c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14950:	sub	sp, sp, #36	; 0x24
   14954:	ldr	r5, [pc, #2536]	; 15344 <__assert_fail@plt+0x4344>
   14958:	mov	r9, r2
   1495c:	cmp	r2, #36	; 0x24
   14960:	str	r3, [sp, #12]
   14964:	ldr	r2, [r5]
   14968:	ldr	r3, [sp, #72]	; 0x48
   1496c:	str	r2, [sp, #28]
   14970:	str	r3, [sp]
   14974:	bhi	15330 <__assert_fail@plt+0x4330>
   14978:	cmp	r1, #0
   1497c:	mov	r4, r1
   14980:	mov	r6, r0
   14984:	addeq	r4, sp, #24
   14988:	bl	10f1c <__errno_location@plt>
   1498c:	mov	r3, #0
   14990:	str	r3, [r0]
   14994:	mov	r7, r0
   14998:	bl	10eec <__ctype_b_loc@plt>
   1499c:	ldrb	r3, [r6]
   149a0:	mov	r1, r6
   149a4:	ldr	r0, [r0]
   149a8:	b	149b0 <__assert_fail@plt+0x39b0>
   149ac:	ldrb	r3, [r1, #1]!
   149b0:	lsl	r2, r3, #1
   149b4:	ldrh	r8, [r0, r2]
   149b8:	ands	r8, r8, #8192	; 0x2000
   149bc:	bne	149ac <__assert_fail@plt+0x39ac>
   149c0:	cmp	r3, #45	; 0x2d
   149c4:	beq	14a60 <__assert_fail@plt+0x3a60>
   149c8:	mov	r2, r9
   149cc:	mov	r3, r8
   149d0:	mov	r1, r4
   149d4:	mov	r0, r6
   149d8:	bl	10dd8 <__strtoull_internal@plt>
   149dc:	ldr	r9, [r4]
   149e0:	cmp	r9, r6
   149e4:	mov	sl, r0
   149e8:	mov	fp, r1
   149ec:	beq	14a48 <__assert_fail@plt+0x3a48>
   149f0:	ldr	r8, [r7]
   149f4:	cmp	r8, #0
   149f8:	bne	14a38 <__assert_fail@plt+0x3a38>
   149fc:	ldr	r3, [sp]
   14a00:	cmp	r3, #0
   14a04:	beq	14a14 <__assert_fail@plt+0x3a14>
   14a08:	ldrb	r6, [r9]
   14a0c:	cmp	r6, #0
   14a10:	bne	14de8 <__assert_fail@plt+0x3de8>
   14a14:	ldr	r3, [sp, #12]
   14a18:	strd	sl, [r3]
   14a1c:	ldr	r2, [sp, #28]
   14a20:	ldr	r3, [r5]
   14a24:	mov	r0, r8
   14a28:	cmp	r2, r3
   14a2c:	bne	1532c <__assert_fail@plt+0x432c>
   14a30:	add	sp, sp, #36	; 0x24
   14a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a38:	cmp	r8, #34	; 0x22
   14a3c:	bne	14a60 <__assert_fail@plt+0x3a60>
   14a40:	mov	r8, #1
   14a44:	b	149fc <__assert_fail@plt+0x39fc>
   14a48:	ldr	r0, [sp]
   14a4c:	cmp	r0, #0
   14a50:	beq	14a60 <__assert_fail@plt+0x3a60>
   14a54:	ldrb	r6, [r6]
   14a58:	cmp	r6, #0
   14a5c:	bne	14a68 <__assert_fail@plt+0x3a68>
   14a60:	mov	r8, #4
   14a64:	b	14a1c <__assert_fail@plt+0x3a1c>
   14a68:	mov	r1, r6
   14a6c:	bl	10f10 <strchr@plt>
   14a70:	cmp	r0, #0
   14a74:	movne	sl, #1
   14a78:	movne	fp, #0
   14a7c:	beq	14a60 <__assert_fail@plt+0x3a60>
   14a80:	sub	r7, r6, #69	; 0x45
   14a84:	cmp	r7, #47	; 0x2f
   14a88:	ldrls	pc, [pc, r7, lsl #2]
   14a8c:	b	14c4c <__assert_fail@plt+0x3c4c>
   14a90:	andeq	r4, r1, r0, asr fp
   14a94:	andeq	r4, r1, ip, asr #24
   14a98:	andeq	r4, r1, r0, asr fp
   14a9c:	andeq	r4, r1, ip, asr #24
   14aa0:	andeq	r4, r1, ip, asr #24
   14aa4:	andeq	r4, r1, ip, asr #24
   14aa8:	andeq	r4, r1, r0, asr fp
   14aac:	andeq	r4, r1, ip, asr #24
   14ab0:	andeq	r4, r1, r0, asr fp
   14ab4:	andeq	r4, r1, ip, asr #24
   14ab8:	andeq	r4, r1, ip, asr #24
   14abc:	andeq	r4, r1, r0, asr fp
   14ac0:	andeq	r4, r1, ip, asr #24
   14ac4:	andeq	r4, r1, ip, asr #24
   14ac8:	andeq	r4, r1, ip, asr #24
   14acc:	andeq	r4, r1, r0, asr fp
   14ad0:	andeq	r4, r1, ip, asr #24
   14ad4:	andeq	r4, r1, ip, asr #24
   14ad8:	andeq	r4, r1, ip, asr #24
   14adc:	andeq	r4, r1, ip, asr #24
   14ae0:	andeq	r4, r1, r0, asr fp
   14ae4:	andeq	r4, r1, r0, asr fp
   14ae8:	andeq	r4, r1, ip, asr #24
   14aec:	andeq	r4, r1, ip, asr #24
   14af0:	andeq	r4, r1, ip, asr #24
   14af4:	andeq	r4, r1, ip, asr #24
   14af8:	andeq	r4, r1, ip, asr #24
   14afc:	andeq	r4, r1, ip, asr #24
   14b00:	andeq	r4, r1, ip, asr #24
   14b04:	andeq	r4, r1, ip, asr #24
   14b08:	andeq	r4, r1, ip, asr #24
   14b0c:	andeq	r4, r1, ip, asr #24
   14b10:	andeq	r4, r1, ip, asr #24
   14b14:	andeq	r4, r1, ip, asr #24
   14b18:	andeq	r4, r1, r0, asr fp
   14b1c:	andeq	r4, r1, ip, asr #24
   14b20:	andeq	r4, r1, ip, asr #24
   14b24:	andeq	r4, r1, ip, asr #24
   14b28:	andeq	r4, r1, r0, asr fp
   14b2c:	andeq	r4, r1, ip, asr #24
   14b30:	andeq	r4, r1, r0, asr fp
   14b34:	andeq	r4, r1, ip, asr #24
   14b38:	andeq	r4, r1, ip, asr #24
   14b3c:	andeq	r4, r1, ip, asr #24
   14b40:	andeq	r4, r1, ip, asr #24
   14b44:	andeq	r4, r1, ip, asr #24
   14b48:	andeq	r4, r1, ip, asr #24
   14b4c:	andeq	r4, r1, r0, asr fp
   14b50:	ldr	r0, [sp]
   14b54:	mov	r1, #48	; 0x30
   14b58:	bl	10f10 <strchr@plt>
   14b5c:	cmp	r0, #0
   14b60:	beq	14c4c <__assert_fail@plt+0x3c4c>
   14b64:	ldrb	r3, [r9, #1]
   14b68:	cmp	r3, #68	; 0x44
   14b6c:	beq	1522c <__assert_fail@plt+0x422c>
   14b70:	cmp	r3, #105	; 0x69
   14b74:	beq	14e0c <__assert_fail@plt+0x3e0c>
   14b78:	cmp	r3, #66	; 0x42
   14b7c:	beq	1522c <__assert_fail@plt+0x422c>
   14b80:	cmp	r7, #47	; 0x2f
   14b84:	ldrls	pc, [pc, r7, lsl #2]
   14b88:	b	14dfc <__assert_fail@plt+0x3dfc>
   14b8c:	andeq	r5, r1, r0, lsl r2
   14b90:	strdeq	r4, [r1], -ip
   14b94:	andeq	r5, r1, r0, lsl #4
   14b98:	strdeq	r4, [r1], -ip
   14b9c:	strdeq	r4, [r1], -ip
   14ba0:	strdeq	r4, [r1], -ip
   14ba4:	strdeq	r5, [r1], -r0
   14ba8:	strdeq	r4, [r1], -ip
   14bac:	andeq	r5, r1, r0, ror #3
   14bb0:	strdeq	r4, [r1], -ip
   14bb4:	strdeq	r4, [r1], -ip
   14bb8:	ldrdeq	r5, [r1], -r0
   14bbc:	strdeq	r4, [r1], -ip
   14bc0:	strdeq	r4, [r1], -ip
   14bc4:	strdeq	r4, [r1], -ip
   14bc8:	andeq	r5, r1, r0, asr #3
   14bcc:	strdeq	r4, [r1], -ip
   14bd0:	strdeq	r4, [r1], -ip
   14bd4:	strdeq	r4, [r1], -ip
   14bd8:	strdeq	r4, [r1], -ip
   14bdc:			; <UNDEFINED> instruction: 0x000151b0
   14be0:	andeq	r5, r1, r0, lsr #3
   14be4:	strdeq	r4, [r1], -ip
   14be8:	strdeq	r4, [r1], -ip
   14bec:	strdeq	r4, [r1], -ip
   14bf0:	strdeq	r4, [r1], -ip
   14bf4:	strdeq	r4, [r1], -ip
   14bf8:	strdeq	r4, [r1], -ip
   14bfc:	strdeq	r4, [r1], -ip
   14c00:	andeq	r4, r1, r8, asr #28
   14c04:	muleq	r1, r8, r1
   14c08:	strdeq	r4, [r1], -ip
   14c0c:	strdeq	r4, [r1], -ip
   14c10:	strdeq	r4, [r1], -ip
   14c14:	andeq	r5, r1, r0, lsl #4
   14c18:	strdeq	r4, [r1], -ip
   14c1c:	strdeq	r4, [r1], -ip
   14c20:	strdeq	r4, [r1], -ip
   14c24:	strdeq	r5, [r1], -r0
   14c28:	strdeq	r4, [r1], -ip
   14c2c:	andeq	r5, r1, r0, ror #3
   14c30:	strdeq	r4, [r1], -ip
   14c34:	strdeq	r4, [r1], -ip
   14c38:	strdeq	r4, [r1], -ip
   14c3c:	strdeq	r4, [r1], -ip
   14c40:	strdeq	r4, [r1], -ip
   14c44:	strdeq	r4, [r1], -ip
   14c48:	andeq	r5, r1, r0, asr #3
   14c4c:	mov	lr, #1
   14c50:	mov	r0, #1024	; 0x400
   14c54:	sub	r6, r6, #66	; 0x42
   14c58:	cmp	r6, #53	; 0x35
   14c5c:	ldrls	pc, [pc, r6, lsl #2]
   14c60:	b	14dfc <__assert_fail@plt+0x3dfc>
   14c64:	andeq	r4, r1, r0, ror lr
   14c68:	strdeq	r4, [r1], -ip
   14c6c:	strdeq	r4, [r1], -ip
   14c70:	muleq	r1, r4, lr
   14c74:	strdeq	r4, [r1], -ip
   14c78:	andeq	r4, r1, ip, lsr sp
   14c7c:	strdeq	r4, [r1], -ip
   14c80:	strdeq	r4, [r1], -ip
   14c84:	strdeq	r4, [r1], -ip
   14c88:	andeq	r4, r1, ip, lsl #31
   14c8c:	strdeq	r4, [r1], -ip
   14c90:	andeq	r5, r1, r0, lsr r1
   14c94:	strdeq	r4, [r1], -ip
   14c98:	strdeq	r4, [r1], -ip
   14c9c:	strheq	r5, [r1], -r4
   14ca0:	strdeq	r4, [r1], -ip
   14ca4:	strdeq	r4, [r1], -ip
   14ca8:	strdeq	r4, [r1], -ip
   14cac:	andeq	r5, r1, r8, lsr r0
   14cb0:	strdeq	r4, [r1], -ip
   14cb4:	strdeq	r4, [r1], -ip
   14cb8:	strdeq	r4, [r1], -ip
   14cbc:	strdeq	r4, [r1], -ip
   14cc0:			; <UNDEFINED> instruction: 0x00014fbc
   14cc4:	andeq	r4, r1, r0, lsl pc
   14cc8:	strdeq	r4, [r1], -ip
   14ccc:	strdeq	r4, [r1], -ip
   14cd0:	strdeq	r4, [r1], -ip
   14cd4:	strdeq	r4, [r1], -ip
   14cd8:	strdeq	r4, [r1], -ip
   14cdc:	strdeq	r4, [r1], -ip
   14ce0:	strdeq	r4, [r1], -ip
   14ce4:	andeq	r4, r1, ip, asr #28
   14ce8:	ldrdeq	r4, [r1], -r0
   14cec:	strdeq	r4, [r1], -ip
   14cf0:	strdeq	r4, [r1], -ip
   14cf4:	strdeq	r4, [r1], -ip
   14cf8:	andeq	r4, r1, ip, lsr sp
   14cfc:	strdeq	r4, [r1], -ip
   14d00:	strdeq	r4, [r1], -ip
   14d04:	strdeq	r4, [r1], -ip
   14d08:	andeq	r4, r1, ip, lsl #31
   14d0c:	strdeq	r4, [r1], -ip
   14d10:	andeq	r5, r1, r0, lsr r1
   14d14:	strdeq	r4, [r1], -ip
   14d18:	strdeq	r4, [r1], -ip
   14d1c:	strdeq	r4, [r1], -ip
   14d20:	strdeq	r4, [r1], -ip
   14d24:	strdeq	r4, [r1], -ip
   14d28:	strdeq	r4, [r1], -ip
   14d2c:	andeq	r5, r1, r8, lsr r0
   14d30:	strdeq	r4, [r1], -ip
   14d34:	strdeq	r4, [r1], -ip
   14d38:	andeq	r4, r1, r4, lsr #28
   14d3c:	asr	r1, r0, #31
   14d40:	mov	r2, #0
   14d44:	mov	r3, #0
   14d48:	cmp	fp, #0
   14d4c:	strd	r2, [sp]
   14d50:	bne	15270 <__assert_fail@plt+0x4270>
   14d54:	ldrd	r2, [sp]
   14d58:	orrs	r3, r2, r3
   14d5c:	bne	15260 <__assert_fail@plt+0x4260>
   14d60:	mul	r3, sl, r1
   14d64:	umull	r6, r7, sl, r0
   14d68:	mla	r3, r0, fp, r3
   14d6c:	ldrd	sl, [sp]
   14d70:	add	ip, r3, r7
   14d74:	cmp	ip, #0
   14d78:	mov	r7, ip
   14d7c:	bne	15304 <__assert_fail@plt+0x4304>
   14d80:	orrs	r3, sl, fp
   14d84:	bne	15260 <__assert_fail@plt+0x4260>
   14d88:	umull	r2, r3, r6, r0
   14d8c:	mul	ip, r6, r1
   14d90:	strd	r2, [sp]
   14d94:	mla	r3, r0, r7, ip
   14d98:	ldr	r2, [sp, #4]
   14d9c:	add	ip, r3, r2
   14da0:	cmp	ip, #0
   14da4:	str	ip, [sp, #4]
   14da8:	bne	152e0 <__assert_fail@plt+0x42e0>
   14dac:	orrs	r3, sl, fp
   14db0:	bne	15260 <__assert_fail@plt+0x4260>
   14db4:	ldrd	r6, [sp]
   14db8:	mov	r3, #0
   14dbc:	mul	r2, r6, r1
   14dc0:	umull	sl, fp, r6, r0
   14dc4:	mla	r2, r0, r7, r2
   14dc8:	add	fp, r2, fp
   14dcc:	orr	r8, r8, r3
   14dd0:	add	r3, r9, lr
   14dd4:	str	r3, [r4]
   14dd8:	ldrb	r3, [r9, lr]
   14ddc:	cmp	r3, #0
   14de0:	orrne	r8, r8, #2
   14de4:	b	14a14 <__assert_fail@plt+0x3a14>
   14de8:	mov	r1, r6
   14dec:	ldr	r0, [sp]
   14df0:	bl	10f10 <strchr@plt>
   14df4:	cmp	r0, #0
   14df8:	bne	14a80 <__assert_fail@plt+0x3a80>
   14dfc:	ldr	r3, [sp, #12]
   14e00:	orr	r8, r8, #2
   14e04:	strd	sl, [r3]
   14e08:	b	14a1c <__assert_fail@plt+0x3a1c>
   14e0c:	ldrb	r3, [r9, #2]
   14e10:	mov	r0, #1024	; 0x400
   14e14:	cmp	r3, #66	; 0x42
   14e18:	movne	lr, #1
   14e1c:	moveq	lr, #3
   14e20:	b	14c54 <__assert_fail@plt+0x3c54>
   14e24:	lsr	r3, fp, #31
   14e28:	adds	sl, sl, sl
   14e2c:	adc	fp, fp, fp
   14e30:	cmp	r3, #0
   14e34:	beq	14dd0 <__assert_fail@plt+0x3dd0>
   14e38:	mov	r8, #1
   14e3c:	mvn	sl, #0
   14e40:	mvn	fp, #0
   14e44:	b	14dd0 <__assert_fail@plt+0x3dd0>
   14e48:	mov	lr, #1
   14e4c:	lsr	r3, fp, #23
   14e50:	cmp	r3, #0
   14e54:	bne	14e38 <__assert_fail@plt+0x3e38>
   14e58:	lsl	r3, fp, #9
   14e5c:	orr	r3, r3, sl, lsr #23
   14e60:	lsl	r2, sl, #9
   14e64:	mov	sl, r2
   14e68:	mov	fp, r3
   14e6c:	b	14dd0 <__assert_fail@plt+0x3dd0>
   14e70:	lsr	r3, fp, #22
   14e74:	cmp	r3, #0
   14e78:	bne	14e38 <__assert_fail@plt+0x3e38>
   14e7c:	lsl	r3, fp, #10
   14e80:	orr	r3, r3, sl, lsr #22
   14e84:	lsl	r2, sl, #10
   14e88:	mov	sl, r2
   14e8c:	mov	fp, r3
   14e90:	b	14dd0 <__assert_fail@plt+0x3dd0>
   14e94:	mov	r6, r0
   14e98:	asr	r7, r0, #31
   14e9c:	mov	r3, #0
   14ea0:	mov	ip, #6
   14ea4:	str	r3, [sp]
   14ea8:	strd	r4, [sp, #16]
   14eac:	b	14edc <__assert_fail@plt+0x3edc>
   14eb0:	orrs	r3, r2, r3
   14eb4:	movne	r3, #1
   14eb8:	muleq	r3, sl, r7
   14ebc:	strne	r3, [sp]
   14ec0:	mlaeq	r3, r6, fp, r3
   14ec4:	umulleq	sl, fp, sl, r6
   14ec8:	mvnne	sl, #0
   14ecc:	addeq	fp, r3, fp
   14ed0:	mvnne	fp, #0
   14ed4:	subs	ip, ip, #1
   14ed8:	beq	15220 <__assert_fail@plt+0x4220>
   14edc:	cmp	fp, #0
   14ee0:	mov	r2, #0
   14ee4:	mov	r3, #0
   14ee8:	beq	14eb0 <__assert_fail@plt+0x3eb0>
   14eec:	umull	r0, r1, sl, r6
   14ef0:	mov	r5, #0
   14ef4:	mov	r0, r1
   14ef8:	mov	r1, r5
   14efc:	umlal	r0, r1, fp, r6
   14f00:	cmp	r1, r5
   14f04:	movne	r2, #1
   14f08:	movne	r3, #0
   14f0c:	b	14eb0 <__assert_fail@plt+0x3eb0>
   14f10:	mov	r6, r0
   14f14:	asr	r7, r0, #31
   14f18:	mov	r3, #0
   14f1c:	mov	ip, #7
   14f20:	str	r3, [sp]
   14f24:	strd	r4, [sp, #16]
   14f28:	b	14f58 <__assert_fail@plt+0x3f58>
   14f2c:	orrs	r3, r2, r3
   14f30:	movne	r3, #1
   14f34:	muleq	r3, sl, r7
   14f38:	strne	r3, [sp]
   14f3c:	mlaeq	r3, r6, fp, r3
   14f40:	umulleq	sl, fp, sl, r6
   14f44:	mvnne	sl, #0
   14f48:	addeq	fp, r3, fp
   14f4c:	mvnne	fp, #0
   14f50:	subs	ip, ip, #1
   14f54:	beq	15220 <__assert_fail@plt+0x4220>
   14f58:	cmp	fp, #0
   14f5c:	mov	r2, #0
   14f60:	mov	r3, #0
   14f64:	beq	14f2c <__assert_fail@plt+0x3f2c>
   14f68:	umull	r0, r1, sl, r6
   14f6c:	mov	r5, #0
   14f70:	mov	r0, r1
   14f74:	mov	r1, r5
   14f78:	umlal	r0, r1, fp, r6
   14f7c:	cmp	r1, r5
   14f80:	movne	r2, #1
   14f84:	movne	r3, #0
   14f88:	b	14f2c <__assert_fail@plt+0x3f2c>
   14f8c:	asr	r1, r0, #31
   14f90:	cmp	fp, #0
   14f94:	mov	r6, #0
   14f98:	mov	r7, #0
   14f9c:	bne	15238 <__assert_fail@plt+0x4238>
   14fa0:	orrs	r3, r6, r7
   14fa4:	bne	14e38 <__assert_fail@plt+0x3e38>
   14fa8:	mul	r3, sl, r1
   14fac:	mla	r3, r0, fp, r3
   14fb0:	umull	sl, fp, sl, r0
   14fb4:	add	fp, r3, fp
   14fb8:	b	14dd0 <__assert_fail@plt+0x3dd0>
   14fbc:	mov	r6, r0
   14fc0:	asr	r7, r0, #31
   14fc4:	mov	r3, #0
   14fc8:	mov	ip, #8
   14fcc:	str	r3, [sp]
   14fd0:	strd	r4, [sp, #16]
   14fd4:	b	15004 <__assert_fail@plt+0x4004>
   14fd8:	orrs	r3, r2, r3
   14fdc:	movne	r3, #1
   14fe0:	muleq	r3, sl, r7
   14fe4:	strne	r3, [sp]
   14fe8:	mlaeq	r3, r6, fp, r3
   14fec:	umulleq	sl, fp, sl, r6
   14ff0:	mvnne	sl, #0
   14ff4:	addeq	fp, r3, fp
   14ff8:	mvnne	fp, #0
   14ffc:	subs	ip, ip, #1
   15000:	beq	15220 <__assert_fail@plt+0x4220>
   15004:	cmp	fp, #0
   15008:	mov	r2, #0
   1500c:	mov	r3, #0
   15010:	beq	14fd8 <__assert_fail@plt+0x3fd8>
   15014:	umull	r0, r1, sl, r6
   15018:	mov	r5, #0
   1501c:	mov	r0, r1
   15020:	mov	r1, r5
   15024:	umlal	r0, r1, fp, r6
   15028:	cmp	r1, r5
   1502c:	movne	r2, #1
   15030:	movne	r3, #0
   15034:	b	14fd8 <__assert_fail@plt+0x3fd8>
   15038:	mov	r6, r0
   1503c:	asr	r7, r0, #31
   15040:	mov	r3, #0
   15044:	mov	ip, #4
   15048:	str	r3, [sp]
   1504c:	strd	r4, [sp, #16]
   15050:	b	15080 <__assert_fail@plt+0x4080>
   15054:	orrs	r3, r2, r3
   15058:	movne	r3, #1
   1505c:	muleq	r3, sl, r7
   15060:	strne	r3, [sp]
   15064:	mlaeq	r3, r6, fp, r3
   15068:	umulleq	sl, fp, sl, r6
   1506c:	mvnne	sl, #0
   15070:	addeq	fp, r3, fp
   15074:	mvnne	fp, #0
   15078:	subs	ip, ip, #1
   1507c:	beq	15220 <__assert_fail@plt+0x4220>
   15080:	cmp	fp, #0
   15084:	mov	r2, #0
   15088:	mov	r3, #0
   1508c:	beq	15054 <__assert_fail@plt+0x4054>
   15090:	umull	r0, r1, sl, r6
   15094:	mov	r5, #0
   15098:	mov	r0, r1
   1509c:	mov	r1, r5
   150a0:	umlal	r0, r1, fp, r6
   150a4:	cmp	r1, r5
   150a8:	movne	r2, #1
   150ac:	movne	r3, #0
   150b0:	b	15054 <__assert_fail@plt+0x4054>
   150b4:	mov	r6, r0
   150b8:	asr	r7, r0, #31
   150bc:	mov	r3, #0
   150c0:	mov	ip, #5
   150c4:	str	r3, [sp]
   150c8:	strd	r4, [sp, #16]
   150cc:	b	150fc <__assert_fail@plt+0x40fc>
   150d0:	orrs	r3, r2, r3
   150d4:	movne	r3, #1
   150d8:	muleq	r3, sl, r7
   150dc:	strne	r3, [sp]
   150e0:	mlaeq	r3, r6, fp, r3
   150e4:	umulleq	sl, fp, sl, r6
   150e8:	mvnne	sl, #0
   150ec:	addeq	fp, r3, fp
   150f0:	mvnne	fp, #0
   150f4:	subs	ip, ip, #1
   150f8:	beq	15220 <__assert_fail@plt+0x4220>
   150fc:	cmp	fp, #0
   15100:	mov	r2, #0
   15104:	mov	r3, #0
   15108:	beq	150d0 <__assert_fail@plt+0x40d0>
   1510c:	umull	r0, r1, sl, r6
   15110:	mov	r5, #0
   15114:	mov	r0, r1
   15118:	mov	r1, r5
   1511c:	umlal	r0, r1, fp, r6
   15120:	cmp	r1, r5
   15124:	movne	r2, #1
   15128:	movne	r3, #0
   1512c:	b	150d0 <__assert_fail@plt+0x40d0>
   15130:	asr	r1, r0, #31
   15134:	cmp	fp, #0
   15138:	mov	r6, #0
   1513c:	mov	r7, #0
   15140:	bne	15294 <__assert_fail@plt+0x4294>
   15144:	orrs	r3, r6, r7
   15148:	bne	14e38 <__assert_fail@plt+0x3e38>
   1514c:	umull	r2, r3, sl, r0
   15150:	mul	ip, sl, r1
   15154:	strd	r2, [sp]
   15158:	mla	r3, r0, fp, ip
   1515c:	ldr	r2, [sp, #4]
   15160:	mov	sl, r6
   15164:	add	ip, r3, r2
   15168:	cmp	ip, #0
   1516c:	mov	fp, r7
   15170:	str	ip, [sp, #4]
   15174:	bne	152bc <__assert_fail@plt+0x42bc>
   15178:	orrs	r3, sl, fp
   1517c:	bne	14e38 <__assert_fail@plt+0x3e38>
   15180:	ldrd	r6, [sp]
   15184:	mul	r3, r6, r1
   15188:	umull	sl, fp, r6, r0
   1518c:	mla	r0, r0, r7, r3
   15190:	add	fp, r0, fp
   15194:	b	14dd0 <__assert_fail@plt+0x3dd0>
   15198:	mov	lr, #1
   1519c:	b	14dd0 <__assert_fail@plt+0x3dd0>
   151a0:	mov	lr, #1
   151a4:	mov	r6, #1024	; 0x400
   151a8:	mov	r7, #0
   151ac:	b	14f18 <__assert_fail@plt+0x3f18>
   151b0:	mov	lr, #1
   151b4:	mov	r6, #1024	; 0x400
   151b8:	mov	r7, #0
   151bc:	b	14fc4 <__assert_fail@plt+0x3fc4>
   151c0:	mov	lr, #1
   151c4:	mov	r6, #1024	; 0x400
   151c8:	mov	r7, #0
   151cc:	b	15040 <__assert_fail@plt+0x4040>
   151d0:	mov	lr, #1
   151d4:	mov	r6, #1024	; 0x400
   151d8:	mov	r7, #0
   151dc:	b	150bc <__assert_fail@plt+0x40bc>
   151e0:	mov	lr, #1
   151e4:	mov	r0, #1024	; 0x400
   151e8:	mov	r1, #0
   151ec:	b	15134 <__assert_fail@plt+0x4134>
   151f0:	mov	lr, #1
   151f4:	mov	r0, #1024	; 0x400
   151f8:	mov	r1, #0
   151fc:	b	14f90 <__assert_fail@plt+0x3f90>
   15200:	mov	lr, #1
   15204:	mov	r0, #1024	; 0x400
   15208:	mov	r1, #0
   1520c:	b	14d40 <__assert_fail@plt+0x3d40>
   15210:	mov	lr, #1
   15214:	mov	r6, #1024	; 0x400
   15218:	mov	r7, #0
   1521c:	b	14e9c <__assert_fail@plt+0x3e9c>
   15220:	ldrd	r4, [sp, #16]
   15224:	ldr	r3, [sp]
   15228:	b	14dcc <__assert_fail@plt+0x3dcc>
   1522c:	mov	lr, #2
   15230:	mov	r0, #1000	; 0x3e8
   15234:	b	14c54 <__assert_fail@plt+0x3c54>
   15238:	umull	r2, r3, sl, r0
   1523c:	str	r3, [sp]
   15240:	mov	r3, #0
   15244:	str	r3, [sp, #4]
   15248:	ldrd	r2, [sp]
   1524c:	umlal	r2, r3, fp, r0
   15250:	cmp	r3, #0
   15254:	movne	r6, #1
   15258:	movne	r7, #0
   1525c:	b	14fa0 <__assert_fail@plt+0x3fa0>
   15260:	mov	r3, #1
   15264:	mvn	sl, #0
   15268:	mvn	fp, #0
   1526c:	b	14dcc <__assert_fail@plt+0x3dcc>
   15270:	umull	r2, r3, sl, r0
   15274:	mov	r7, #0
   15278:	mov	r6, r3
   1527c:	umlal	r6, r7, fp, r0
   15280:	cmp	r7, #0
   15284:	movne	r2, #1
   15288:	movne	r3, #0
   1528c:	strdne	r2, [sp]
   15290:	b	14d54 <__assert_fail@plt+0x3d54>
   15294:	umull	r2, r3, sl, r0
   15298:	str	r3, [sp]
   1529c:	mov	r3, #0
   152a0:	str	r3, [sp, #4]
   152a4:	ldrd	r2, [sp]
   152a8:	umlal	r2, r3, fp, r0
   152ac:	cmp	r3, #0
   152b0:	movne	r6, #1
   152b4:	movne	r7, #0
   152b8:	b	15144 <__assert_fail@plt+0x4144>
   152bc:	ldr	r3, [sp]
   152c0:	mov	r7, #0
   152c4:	umull	r2, r3, r3, r0
   152c8:	mov	r6, r3
   152cc:	umlal	r6, r7, ip, r0
   152d0:	cmp	r7, #0
   152d4:	movne	sl, #1
   152d8:	movne	fp, #0
   152dc:	b	15178 <__assert_fail@plt+0x4178>
   152e0:	ldr	r3, [sp]
   152e4:	mov	r7, #0
   152e8:	umull	r2, r3, r3, r0
   152ec:	mov	r6, r3
   152f0:	umlal	r6, r7, ip, r0
   152f4:	cmp	r7, #0
   152f8:	movne	sl, #1
   152fc:	movne	fp, #0
   15300:	b	14dac <__assert_fail@plt+0x3dac>
   15304:	umull	r2, r3, r6, r0
   15308:	str	r3, [sp]
   1530c:	mov	r3, #0
   15310:	str	r3, [sp, #4]
   15314:	ldrd	r2, [sp]
   15318:	umlal	r2, r3, ip, r0
   1531c:	cmp	r3, #0
   15320:	movne	sl, #1
   15324:	movne	fp, #0
   15328:	b	14d80 <__assert_fail@plt+0x3d80>
   1532c:	bl	10e08 <__stack_chk_fail@plt>
   15330:	ldr	r3, [pc, #16]	; 15348 <__assert_fail@plt+0x4348>
   15334:	mov	r2, #96	; 0x60
   15338:	ldr	r1, [pc, #12]	; 1534c <__assert_fail@plt+0x434c>
   1533c:	ldr	r0, [pc, #12]	; 15350 <__assert_fail@plt+0x4350>
   15340:	bl	11000 <__assert_fail@plt>
   15344:	andeq	r8, r2, r8, lsl #30
   15348:	andeq	r8, r1, r8, lsl #11
   1534c:	muleq	r1, r4, r5
   15350:	andeq	r8, r1, r4, lsr #11
   15354:	push	{r1, r2, r3}
   15358:	push	{r4, lr}
   1535c:	sub	sp, sp, #12
   15360:	ldr	r4, [pc, #60]	; 153a4 <__assert_fail@plt+0x43a4>
   15364:	add	r3, sp, #24
   15368:	mov	r2, r3
   1536c:	ldr	ip, [r4]
   15370:	ldr	r1, [sp, #20]
   15374:	str	r3, [sp]
   15378:	str	ip, [sp, #4]
   1537c:	bl	15428 <__assert_fail@plt+0x4428>
   15380:	ldr	r2, [sp, #4]
   15384:	ldr	r3, [r4]
   15388:	cmp	r2, r3
   1538c:	bne	153a0 <__assert_fail@plt+0x43a0>
   15390:	add	sp, sp, #12
   15394:	pop	{r4, lr}
   15398:	add	sp, sp, #12
   1539c:	bx	lr
   153a0:	bl	10e08 <__stack_chk_fail@plt>
   153a4:	andeq	r8, r2, r8, lsl #30
   153a8:	push	{r4, r5, r6, r7, r8, lr}
   153ac:	subs	r7, r0, #0
   153b0:	ldr	r5, [pc, #108]	; 15424 <__assert_fail@plt+0x4424>
   153b4:	sub	sp, sp, #8
   153b8:	mov	r8, r1
   153bc:	ldr	r1, [r5]
   153c0:	moveq	r7, sp
   153c4:	str	r1, [sp, #4]
   153c8:	mov	r0, r7
   153cc:	mov	r1, r8
   153d0:	mov	r6, r2
   153d4:	bl	10e74 <mbrtowc@plt>
   153d8:	cmp	r6, #0
   153dc:	cmnne	r0, #3
   153e0:	mov	r4, r0
   153e4:	bhi	15404 <__assert_fail@plt+0x4404>
   153e8:	ldr	r2, [sp, #4]
   153ec:	ldr	r3, [r5]
   153f0:	mov	r0, r4
   153f4:	cmp	r2, r3
   153f8:	bne	15420 <__assert_fail@plt+0x4420>
   153fc:	add	sp, sp, #8
   15400:	pop	{r4, r5, r6, r7, r8, pc}
   15404:	mov	r0, #0
   15408:	bl	15744 <__assert_fail@plt+0x4744>
   1540c:	cmp	r0, #0
   15410:	moveq	r4, #1
   15414:	ldrbeq	r3, [r8]
   15418:	streq	r3, [r7]
   1541c:	b	153e8 <__assert_fail@plt+0x43e8>
   15420:	bl	10e08 <__stack_chk_fail@plt>
   15424:	andeq	r8, r2, r8, lsl #30
   15428:	push	{r4, r5, lr}
   1542c:	sub	sp, sp, #12
   15430:	ldr	r4, [pc, #116]	; 154ac <__assert_fail@plt+0x44ac>
   15434:	mov	r3, r2
   15438:	mov	r5, r0
   1543c:	ldr	ip, [r4]
   15440:	mov	r2, r1
   15444:	mov	r0, #0
   15448:	mov	r1, sp
   1544c:	str	ip, [sp, #4]
   15450:	bl	15964 <__assert_fail@plt+0x4964>
   15454:	subs	r2, r0, #0
   15458:	beq	15488 <__assert_fail@plt+0x4488>
   1545c:	ldr	r3, [sp]
   15460:	cmp	r3, #0
   15464:	strge	r2, [r5]
   15468:	blt	15490 <__assert_fail@plt+0x4490>
   1546c:	ldr	r1, [sp, #4]
   15470:	ldr	r2, [r4]
   15474:	mov	r0, r3
   15478:	cmp	r1, r2
   1547c:	bne	154a8 <__assert_fail@plt+0x44a8>
   15480:	add	sp, sp, #12
   15484:	pop	{r4, r5, pc}
   15488:	mvn	r3, #0
   1548c:	b	1546c <__assert_fail@plt+0x446c>
   15490:	bl	10da8 <free@plt>
   15494:	bl	10f1c <__errno_location@plt>
   15498:	mov	r2, #75	; 0x4b
   1549c:	mvn	r3, #0
   154a0:	str	r2, [r0]
   154a4:	b	1546c <__assert_fail@plt+0x446c>
   154a8:	bl	10e08 <__stack_chk_fail@plt>
   154ac:	andeq	r8, r2, r8, lsl #30
   154b0:	cmn	r0, #100	; 0x64
   154b4:	bne	154c8 <__assert_fail@plt+0x44c8>
   154b8:	mov	r0, r1
   154bc:	mov	r1, r2
   154c0:	mov	r2, r3
   154c4:	b	10e38 <readlink@plt>
   154c8:	push	{r4, lr}
   154cc:	bl	10fe8 <abort@plt>
   154d0:	push	{lr}		; (str lr, [sp, #-4]!)
   154d4:	sub	sp, sp, #12
   154d8:	ldr	r2, [pc, #32]	; 15500 <__assert_fail@plt+0x4500>
   154dc:	mov	r3, #0
   154e0:	mov	r1, r0
   154e4:	str	r2, [sp, #4]
   154e8:	str	r3, [sp]
   154ec:	mov	r2, r3
   154f0:	mvn	r0, #99	; 0x63
   154f4:	bl	15504 <__assert_fail@plt+0x4504>
   154f8:	add	sp, sp, #12
   154fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15500:			; <UNDEFINED> instruction: 0x000154b0
   15504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15508:	sub	sp, sp, #1040	; 0x410
   1550c:	sub	sp, sp, #4
   15510:	ldr	ip, [pc, #432]	; 156c8 <__assert_fail@plt+0x46c8>
   15514:	ldr	r6, [sp, #1080]	; 0x438
   15518:	ldr	lr, [pc, #428]	; 156cc <__assert_fail@plt+0x46cc>
   1551c:	cmp	r6, #0
   15520:	ldr	ip, [ip]
   15524:	moveq	r6, lr
   15528:	subs	r4, r3, #0
   1552c:	addeq	r7, sp, #12
   15530:	movne	r7, r2
   15534:	mov	r8, r0
   15538:	mov	r9, r1
   1553c:	str	ip, [sp, #1036]	; 0x40c
   15540:	ldr	sl, [sp, #1084]	; 0x43c
   15544:	moveq	r4, #1024	; 0x400
   15548:	mov	r5, r7
   1554c:	b	15598 <__assert_fail@plt+0x4598>
   15550:	cmp	r4, fp
   15554:	bhi	15644 <__assert_fail@plt+0x4644>
   15558:	cmp	r7, r5
   1555c:	beq	1556c <__assert_fail@plt+0x456c>
   15560:	mov	r0, r5
   15564:	ldr	r3, [r6, #8]
   15568:	blx	r3
   1556c:	cmp	r4, #1073741824	; 0x40000000
   15570:	lslls	r4, r4, #1
   15574:	bls	15584 <__assert_fail@plt+0x4584>
   15578:	cmp	r4, #0
   1557c:	blt	156b0 <__assert_fail@plt+0x46b0>
   15580:	mov	r4, #-2147483648	; 0x80000000
   15584:	ldr	r3, [r6]
   15588:	mov	r0, r4
   1558c:	blx	r3
   15590:	subs	r5, r0, #0
   15594:	beq	155fc <__assert_fail@plt+0x45fc>
   15598:	mov	r3, r4
   1559c:	mov	r2, r5
   155a0:	mov	r1, r9
   155a4:	mov	r0, r8
   155a8:	blx	sl
   155ac:	subs	fp, r0, #0
   155b0:	bge	15550 <__assert_fail@plt+0x4550>
   155b4:	bl	10f1c <__errno_location@plt>
   155b8:	ldr	r1, [r0]
   155bc:	cmp	r1, #34	; 0x22
   155c0:	beq	15550 <__assert_fail@plt+0x4550>
   155c4:	cmp	r7, r5
   155c8:	str	r1, [sp, #4]
   155cc:	str	r0, [sp]
   155d0:	moveq	r5, #0
   155d4:	beq	15620 <__assert_fail@plt+0x4620>
   155d8:	mov	r0, r5
   155dc:	ldr	r2, [r6, #8]
   155e0:	blx	r2
   155e4:	ldr	r3, [sp]
   155e8:	ldr	r1, [sp, #4]
   155ec:	mov	r5, #0
   155f0:	str	r1, [r3]
   155f4:	b	15620 <__assert_fail@plt+0x4620>
   155f8:	mov	r4, r8
   155fc:	ldr	r3, [r6, #12]
   15600:	cmp	r3, #0
   15604:	beq	15610 <__assert_fail@plt+0x4610>
   15608:	mov	r0, r4
   1560c:	blx	r3
   15610:	bl	10f1c <__errno_location@plt>
   15614:	mov	r5, #0
   15618:	mov	r3, #12
   1561c:	str	r3, [r0]
   15620:	ldr	r3, [pc, #160]	; 156c8 <__assert_fail@plt+0x46c8>
   15624:	ldr	r2, [sp, #1036]	; 0x40c
   15628:	mov	r0, r5
   1562c:	ldr	r3, [r3]
   15630:	cmp	r2, r3
   15634:	bne	156c4 <__assert_fail@plt+0x46c4>
   15638:	add	sp, sp, #1040	; 0x410
   1563c:	add	sp, sp, #4
   15640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15644:	add	r9, sp, #12
   15648:	mov	r3, #0
   1564c:	cmp	r5, r9
   15650:	strb	r3, [r5, fp]
   15654:	add	r8, fp, #1
   15658:	beq	1568c <__assert_fail@plt+0x468c>
   1565c:	cmp	r7, r5
   15660:	cmpne	r4, r8
   15664:	bls	15620 <__assert_fail@plt+0x4620>
   15668:	ldr	r3, [r6, #4]
   1566c:	cmp	r3, #0
   15670:	beq	15620 <__assert_fail@plt+0x4620>
   15674:	mov	r0, r5
   15678:	mov	r1, r8
   1567c:	blx	r3
   15680:	cmp	r0, #0
   15684:	movne	r5, r0
   15688:	b	15620 <__assert_fail@plt+0x4620>
   1568c:	ldr	r3, [r6]
   15690:	mov	r0, r8
   15694:	blx	r3
   15698:	subs	r5, r0, #0
   1569c:	beq	155f8 <__assert_fail@plt+0x45f8>
   156a0:	mov	r2, r8
   156a4:	mov	r1, r9
   156a8:	bl	10dc0 <memcpy@plt>
   156ac:	b	15620 <__assert_fail@plt+0x4620>
   156b0:	bl	10f1c <__errno_location@plt>
   156b4:	mov	r3, #36	; 0x24
   156b8:	mov	r5, #0
   156bc:	str	r3, [r0]
   156c0:	b	15620 <__assert_fail@plt+0x4620>
   156c4:	bl	10e08 <__stack_chk_fail@plt>
   156c8:	andeq	r8, r2, r8, lsl #30
   156cc:	andeq	r8, r1, r0, ror #11
   156d0:	push	{r4, r5, r6, lr}
   156d4:	mov	r4, r0
   156d8:	bl	10e68 <__fpending@plt>
   156dc:	ldr	r5, [r4]
   156e0:	and	r5, r5, #32
   156e4:	mov	r6, r0
   156e8:	mov	r0, r4
   156ec:	bl	157c4 <__assert_fail@plt+0x47c4>
   156f0:	cmp	r5, #0
   156f4:	mov	r4, r0
   156f8:	bne	15724 <__assert_fail@plt+0x4724>
   156fc:	cmp	r0, #0
   15700:	beq	1571c <__assert_fail@plt+0x471c>
   15704:	cmp	r6, #0
   15708:	bne	1573c <__assert_fail@plt+0x473c>
   1570c:	bl	10f1c <__errno_location@plt>
   15710:	ldr	r4, [r0]
   15714:	subs	r4, r4, #9
   15718:	mvnne	r4, #0
   1571c:	mov	r0, r4
   15720:	pop	{r4, r5, r6, pc}
   15724:	cmp	r0, #0
   15728:	bne	1573c <__assert_fail@plt+0x473c>
   1572c:	bl	10f1c <__errno_location@plt>
   15730:	str	r4, [r0]
   15734:	mvn	r4, #0
   15738:	b	1571c <__assert_fail@plt+0x471c>
   1573c:	mvn	r4, #0
   15740:	b	1571c <__assert_fail@plt+0x471c>
   15744:	push	{r4, lr}
   15748:	mov	r1, #0
   1574c:	bl	10f94 <setlocale@plt>
   15750:	subs	r4, r0, #0
   15754:	beq	15780 <__assert_fail@plt+0x4780>
   15758:	ldr	r1, [pc, #40]	; 15788 <__assert_fail@plt+0x4788>
   1575c:	bl	10d90 <strcmp@plt>
   15760:	cmp	r0, #0
   15764:	popeq	{r4, pc}
   15768:	mov	r0, r4
   1576c:	ldr	r1, [pc, #24]	; 1578c <__assert_fail@plt+0x478c>
   15770:	bl	10d90 <strcmp@plt>
   15774:	adds	r0, r0, #0
   15778:	movne	r0, #1
   1577c:	pop	{r4, pc}
   15780:	mov	r0, #1
   15784:	pop	{r4, pc}
   15788:	andeq	r8, r1, ip, asr #11
   1578c:	ldrdeq	r8, [r1], -r0
   15790:	push	{r4, lr}
   15794:	mov	r0, #14
   15798:	bl	10fb8 <nl_langinfo@plt>
   1579c:	cmp	r0, #0
   157a0:	beq	157b8 <__assert_fail@plt+0x47b8>
   157a4:	ldrb	r2, [r0]
   157a8:	ldr	r3, [pc, #16]	; 157c0 <__assert_fail@plt+0x47c0>
   157ac:	cmp	r2, #0
   157b0:	moveq	r0, r3
   157b4:	pop	{r4, pc}
   157b8:	ldr	r0, [pc]	; 157c0 <__assert_fail@plt+0x47c0>
   157bc:	pop	{r4, pc}
   157c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   157c4:	push	{r4, r5, lr}
   157c8:	sub	sp, sp, #12
   157cc:	mov	r4, r0
   157d0:	bl	10f4c <fileno@plt>
   157d4:	cmp	r0, #0
   157d8:	mov	r0, r4
   157dc:	blt	15858 <__assert_fail@plt+0x4858>
   157e0:	bl	10eb0 <__freading@plt>
   157e4:	cmp	r0, #0
   157e8:	bne	15824 <__assert_fail@plt+0x4824>
   157ec:	mov	r0, r4
   157f0:	bl	15864 <__assert_fail@plt+0x4864>
   157f4:	cmp	r0, #0
   157f8:	beq	15854 <__assert_fail@plt+0x4854>
   157fc:	bl	10f1c <__errno_location@plt>
   15800:	mov	r5, r0
   15804:	mov	r0, r4
   15808:	ldr	r4, [r5]
   1580c:	bl	10f70 <fclose@plt>
   15810:	cmp	r4, #0
   15814:	mvnne	r0, #0
   15818:	strne	r4, [r5]
   1581c:	add	sp, sp, #12
   15820:	pop	{r4, r5, pc}
   15824:	mov	r0, r4
   15828:	bl	10f4c <fileno@plt>
   1582c:	mov	r3, #1
   15830:	str	r3, [sp]
   15834:	mov	r2, #0
   15838:	mov	r3, #0
   1583c:	bl	10e50 <lseek64@plt>
   15840:	mvn	r3, #0
   15844:	mvn	r2, #0
   15848:	cmp	r1, r3
   1584c:	cmpeq	r0, r2
   15850:	bne	157ec <__assert_fail@plt+0x47ec>
   15854:	mov	r0, r4
   15858:	add	sp, sp, #12
   1585c:	pop	{r4, r5, lr}
   15860:	b	10f70 <fclose@plt>
   15864:	push	{r4, lr}
   15868:	subs	r4, r0, #0
   1586c:	sub	sp, sp, #8
   15870:	beq	1588c <__assert_fail@plt+0x488c>
   15874:	bl	10eb0 <__freading@plt>
   15878:	cmp	r0, #0
   1587c:	beq	1588c <__assert_fail@plt+0x488c>
   15880:	ldr	r3, [r4]
   15884:	tst	r3, #256	; 0x100
   15888:	bne	1589c <__assert_fail@plt+0x489c>
   1588c:	mov	r0, r4
   15890:	add	sp, sp, #8
   15894:	pop	{r4, lr}
   15898:	b	10d9c <fflush@plt>
   1589c:	mov	r3, #1
   158a0:	str	r3, [sp]
   158a4:	mov	r2, #0
   158a8:	mov	r3, #0
   158ac:	mov	r0, r4
   158b0:	bl	158c4 <__assert_fail@plt+0x48c4>
   158b4:	mov	r0, r4
   158b8:	add	sp, sp, #8
   158bc:	pop	{r4, lr}
   158c0:	b	10d9c <fflush@plt>
   158c4:	push	{r4, r5, r6, r7, r8, lr}
   158c8:	sub	sp, sp, #8
   158cc:	ldmib	r0, {ip, lr}
   158d0:	mov	r4, r0
   158d4:	ldr	r5, [sp, #32]
   158d8:	cmp	lr, ip
   158dc:	beq	158f4 <__assert_fail@plt+0x48f4>
   158e0:	str	r5, [sp, #32]
   158e4:	mov	r0, r4
   158e8:	add	sp, sp, #8
   158ec:	pop	{r4, r5, r6, r7, r8, lr}
   158f0:	b	10f7c <fseeko64@plt>
   158f4:	ldr	lr, [r0, #20]
   158f8:	ldr	ip, [r0, #16]
   158fc:	cmp	lr, ip
   15900:	bne	158e0 <__assert_fail@plt+0x48e0>
   15904:	ldr	r8, [r0, #36]	; 0x24
   15908:	cmp	r8, #0
   1590c:	bne	158e0 <__assert_fail@plt+0x48e0>
   15910:	mov	r6, r2
   15914:	mov	r7, r3
   15918:	bl	10f4c <fileno@plt>
   1591c:	mov	r2, r6
   15920:	mov	r3, r7
   15924:	str	r5, [sp]
   15928:	bl	10e50 <lseek64@plt>
   1592c:	mvn	r3, #0
   15930:	mvn	r2, #0
   15934:	cmp	r1, r3
   15938:	cmpeq	r0, r2
   1593c:	beq	1595c <__assert_fail@plt+0x495c>
   15940:	ldr	r3, [r4]
   15944:	strd	r0, [r4, #80]	; 0x50
   15948:	mov	r0, r8
   1594c:	bic	r3, r3, #16
   15950:	str	r3, [r4]
   15954:	add	sp, sp, #8
   15958:	pop	{r4, r5, r6, r7, r8, pc}
   1595c:	mvn	r0, #0
   15960:	b	15954 <__assert_fail@plt+0x4954>
   15964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15968:	mov	r9, r2
   1596c:	ldr	r2, [pc, #3592]	; 1677c <__assert_fail@plt+0x577c>
   15970:	add	fp, sp, #32
   15974:	sub	sp, sp, #540	; 0x21c
   15978:	ldr	ip, [r2]
   1597c:	str	r0, [fp, #-504]	; 0xfffffe08
   15980:	str	r1, [fp, #-532]	; 0xfffffdec
   15984:	mov	r0, r9
   15988:	sub	r2, fp, #484	; 0x1e4
   1598c:	sub	r1, fp, #364	; 0x16c
   15990:	mov	r4, r3
   15994:	str	ip, [fp, #-40]	; 0xffffffd8
   15998:	bl	168b4 <__assert_fail@plt+0x58b4>
   1599c:	cmp	r0, #0
   159a0:	blt	15f78 <__assert_fail@plt+0x4f78>
   159a4:	sub	r1, fp, #484	; 0x1e4
   159a8:	mov	r0, r4
   159ac:	bl	16780 <__assert_fail@plt+0x5780>
   159b0:	cmp	r0, #0
   159b4:	blt	16534 <__assert_fail@plt+0x5534>
   159b8:	ldr	r2, [fp, #-356]	; 0xfffffe9c
   159bc:	ldr	r3, [fp, #-352]	; 0xfffffea0
   159c0:	adds	r2, r2, #7
   159c4:	mvncs	r2, #0
   159c8:	adds	r3, r3, r2
   159cc:	bcs	15f6c <__assert_fail@plt+0x4f6c>
   159d0:	mov	r0, #6
   159d4:	adds	r0, r3, r0
   159d8:	bcs	15f6c <__assert_fail@plt+0x4f6c>
   159dc:	cmp	r0, #4000	; 0xfa0
   159e0:	bcc	15c10 <__assert_fail@plt+0x4c10>
   159e4:	cmn	r0, #1
   159e8:	beq	15f6c <__assert_fail@plt+0x4f6c>
   159ec:	bl	10e98 <malloc@plt>
   159f0:	subs	r3, r0, #0
   159f4:	str	r3, [fp, #-516]	; 0xfffffdfc
   159f8:	beq	15f6c <__assert_fail@plt+0x4f6c>
   159fc:	str	r3, [fp, #-536]	; 0xfffffde8
   15a00:	ldr	r3, [fp, #-504]	; 0xfffffe08
   15a04:	ldr	sl, [fp, #-360]	; 0xfffffe98
   15a08:	cmp	r3, #0
   15a0c:	ldr	r5, [fp, #-504]	; 0xfffffe08
   15a10:	ldrne	r3, [fp, #-532]	; 0xfffffdec
   15a14:	ldreq	r6, [fp, #-504]	; 0xfffffe08
   15a18:	mov	r4, #0
   15a1c:	ldrne	r6, [r3]
   15a20:	mov	r3, r5
   15a24:	ldr	r5, [sl]
   15a28:	str	r4, [fp, #-528]	; 0xfffffdf0
   15a2c:	cmp	r5, r9
   15a30:	beq	15e88 <__assert_fail@plt+0x4e88>
   15a34:	sub	r5, r5, r9
   15a38:	adds	r2, r4, r5
   15a3c:	mov	r7, r2
   15a40:	bcs	15e90 <__assert_fail@plt+0x4e90>
   15a44:	cmp	r6, r2
   15a48:	bcs	15abc <__assert_fail@plt+0x4abc>
   15a4c:	cmp	r6, #0
   15a50:	bne	15f80 <__assert_fail@plt+0x4f80>
   15a54:	cmp	r2, #12
   15a58:	movls	r6, #12
   15a5c:	bhi	15f90 <__assert_fail@plt+0x4f90>
   15a60:	ldr	r2, [fp, #-504]	; 0xfffffe08
   15a64:	cmp	r3, r2
   15a68:	cmpne	r3, #0
   15a6c:	sub	r8, r3, r2
   15a70:	clz	r8, r8
   15a74:	lsr	r8, r8, #5
   15a78:	bne	15f24 <__assert_fail@plt+0x4f24>
   15a7c:	mov	r0, r6
   15a80:	str	r3, [fp, #-508]	; 0xfffffe04
   15a84:	bl	10e98 <malloc@plt>
   15a88:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15a8c:	subs	ip, r0, #0
   15a90:	beq	16348 <__assert_fail@plt+0x5348>
   15a94:	cmp	r4, #0
   15a98:	moveq	r8, #0
   15a9c:	cmp	r8, #0
   15aa0:	moveq	r3, ip
   15aa4:	beq	15abc <__assert_fail@plt+0x4abc>
   15aa8:	mov	r1, r3
   15aac:	mov	r2, r4
   15ab0:	str	ip, [fp, #-508]	; 0xfffffe04
   15ab4:	bl	10dc0 <memcpy@plt>
   15ab8:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15abc:	add	r0, r3, r4
   15ac0:	mov	r2, r5
   15ac4:	mov	r1, r9
   15ac8:	str	r3, [fp, #-508]	; 0xfffffe04
   15acc:	bl	10dc0 <memcpy@plt>
   15ad0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15ad4:	ldr	r2, [fp, #-364]	; 0xfffffe94
   15ad8:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   15adc:	cmp	r2, r1
   15ae0:	beq	1661c <__assert_fail@plt+0x561c>
   15ae4:	ldrb	r1, [sl, #36]	; 0x24
   15ae8:	ldr	r2, [sl, #40]	; 0x28
   15aec:	cmp	r1, #37	; 0x25
   15af0:	beq	15dd0 <__assert_fail@plt+0x4dd0>
   15af4:	cmn	r2, #1
   15af8:	beq	16778 <__assert_fail@plt+0x5778>
   15afc:	ldr	r9, [fp, #-480]	; 0xfffffe20
   15b00:	cmp	r1, #110	; 0x6e
   15b04:	add	r1, r9, r2, lsl #4
   15b08:	ldr	r5, [r9, r2, lsl #4]
   15b0c:	beq	15f48 <__assert_fail@plt+0x4f48>
   15b10:	ldr	r2, [sl, #8]
   15b14:	ldr	r0, [fp, #-516]	; 0xfffffdfc
   15b18:	tst	r2, #1
   15b1c:	mov	r1, #37	; 0x25
   15b20:	strb	r1, [r0]
   15b24:	ldrne	r0, [fp, #-516]	; 0xfffffdfc
   15b28:	movne	r1, #39	; 0x27
   15b2c:	addne	r4, r0, #2
   15b30:	strbne	r1, [r0, #1]
   15b34:	addeq	r4, r0, #1
   15b38:	tst	r2, #2
   15b3c:	movne	r1, #45	; 0x2d
   15b40:	strbne	r1, [r4], #1
   15b44:	tst	r2, #4
   15b48:	movne	r1, #43	; 0x2b
   15b4c:	strbne	r1, [r4], #1
   15b50:	tst	r2, #8
   15b54:	movne	r1, #32
   15b58:	strbne	r1, [r4], #1
   15b5c:	tst	r2, #16
   15b60:	movne	r1, #35	; 0x23
   15b64:	strbne	r1, [r4], #1
   15b68:	tst	r2, #64	; 0x40
   15b6c:	movne	r1, #73	; 0x49
   15b70:	strbne	r1, [r4], #1
   15b74:	tst	r2, #32
   15b78:	movne	r2, #48	; 0x30
   15b7c:	strbne	r2, [r4], #1
   15b80:	ldr	r1, [sl, #12]
   15b84:	ldr	r8, [sl, #16]
   15b88:	cmp	r1, r8
   15b8c:	beq	15bac <__assert_fail@plt+0x4bac>
   15b90:	sub	r8, r8, r1
   15b94:	mov	r0, r4
   15b98:	mov	r2, r8
   15b9c:	str	r3, [fp, #-508]	; 0xfffffe04
   15ba0:	bl	10dc0 <memcpy@plt>
   15ba4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15ba8:	add	r4, r4, r8
   15bac:	ldr	r1, [sl, #24]
   15bb0:	ldr	r8, [sl, #28]
   15bb4:	cmp	r1, r8
   15bb8:	beq	15bd8 <__assert_fail@plt+0x4bd8>
   15bbc:	sub	r8, r8, r1
   15bc0:	mov	r0, r4
   15bc4:	mov	r2, r8
   15bc8:	str	r3, [fp, #-508]	; 0xfffffe04
   15bcc:	bl	10dc0 <memcpy@plt>
   15bd0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15bd4:	add	r4, r4, r8
   15bd8:	sub	r2, r5, #7
   15bdc:	cmp	r2, #9
   15be0:	ldrls	pc, [pc, r2, lsl #2]
   15be4:	b	15c40 <__assert_fail@plt+0x4c40>
   15be8:	andeq	r5, r1, r8, lsr ip
   15bec:	andeq	r5, r1, r8, lsr ip
   15bf0:	andeq	r5, r1, r0, lsr ip
   15bf4:	andeq	r5, r1, r0, lsr ip
   15bf8:	andeq	r5, r1, r0, asr #24
   15bfc:	andeq	r5, r1, r0, lsr #31
   15c00:	andeq	r5, r1, r0, asr #24
   15c04:	andeq	r5, r1, r8, lsr ip
   15c08:	andeq	r5, r1, r0, asr #24
   15c0c:	andeq	r5, r1, r8, lsr ip
   15c10:	add	r3, r3, #13
   15c14:	bic	r3, r3, #7
   15c18:	sub	sp, sp, r3
   15c1c:	add	r3, sp, #32
   15c20:	str	r3, [fp, #-516]	; 0xfffffdfc
   15c24:	mov	r3, #0
   15c28:	str	r3, [fp, #-536]	; 0xfffffde8
   15c2c:	b	15a00 <__assert_fail@plt+0x4a00>
   15c30:	mov	r2, #108	; 0x6c
   15c34:	strb	r2, [r4], #1
   15c38:	mov	r2, #108	; 0x6c
   15c3c:	strb	r2, [r4], #1
   15c40:	ldrb	r2, [sl, #36]	; 0x24
   15c44:	mov	r1, #0
   15c48:	strb	r1, [r4, #1]
   15c4c:	strb	r2, [r4]
   15c50:	ldr	r2, [sl, #20]
   15c54:	cmn	r2, #1
   15c58:	beq	163f8 <__assert_fail@plt+0x53f8>
   15c5c:	ldr	r1, [r9, r2, lsl #4]
   15c60:	add	r2, r9, r2, lsl #4
   15c64:	cmp	r1, #5
   15c68:	bne	16778 <__assert_fail@plt+0x5778>
   15c6c:	ldr	r2, [r2, #8]
   15c70:	mov	r8, #1
   15c74:	str	r2, [fp, #-492]	; 0xfffffe14
   15c78:	ldr	r2, [sl, #32]
   15c7c:	cmn	r2, #1
   15c80:	beq	15ca8 <__assert_fail@plt+0x4ca8>
   15c84:	ldr	r1, [r9, r2, lsl #4]
   15c88:	add	r9, r9, r2, lsl #4
   15c8c:	cmp	r1, #5
   15c90:	bne	16778 <__assert_fail@plt+0x5778>
   15c94:	sub	r2, fp, #36	; 0x24
   15c98:	add	r2, r2, r8, lsl #2
   15c9c:	ldr	r1, [r9, #8]
   15ca0:	add	r8, r8, #1
   15ca4:	str	r1, [r2, #-456]	; 0xfffffe38
   15ca8:	mov	r2, #2
   15cac:	adds	r2, r7, r2
   15cb0:	str	r2, [fp, #-524]	; 0xfffffdf4
   15cb4:	bcs	16430 <__assert_fail@plt+0x5430>
   15cb8:	cmp	r6, r2
   15cbc:	bcs	16438 <__assert_fail@plt+0x5438>
   15cc0:	cmp	r6, #0
   15cc4:	bne	162f4 <__assert_fail@plt+0x52f4>
   15cc8:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   15ccc:	cmp	r2, #12
   15cd0:	movls	r6, #12
   15cd4:	bhi	16308 <__assert_fail@plt+0x5308>
   15cd8:	ldr	r1, [fp, #-504]	; 0xfffffe08
   15cdc:	sub	r2, r3, r1
   15ce0:	cmp	r3, r1
   15ce4:	cmpne	r3, #0
   15ce8:	clz	r2, r2
   15cec:	lsr	r2, r2, #5
   15cf0:	str	r2, [fp, #-508]	; 0xfffffe04
   15cf4:	bne	16400 <__assert_fail@plt+0x5400>
   15cf8:	mov	r0, r6
   15cfc:	str	r3, [fp, #-512]	; 0xfffffe00
   15d00:	bl	10e98 <malloc@plt>
   15d04:	ldr	r3, [fp, #-512]	; 0xfffffe00
   15d08:	ldr	r2, [fp, #-508]	; 0xfffffe04
   15d0c:	subs	r9, r0, #0
   15d10:	beq	16348 <__assert_fail@plt+0x5348>
   15d14:	cmp	r7, #0
   15d18:	moveq	r2, #0
   15d1c:	cmp	r2, #0
   15d20:	beq	15d30 <__assert_fail@plt+0x4d30>
   15d24:	mov	r1, r3
   15d28:	mov	r2, r7
   15d2c:	bl	10dc0 <memcpy@plt>
   15d30:	mov	r3, #0
   15d34:	strb	r3, [r9, r7]
   15d38:	bl	10f1c <__errno_location@plt>
   15d3c:	sub	r3, r5, #1
   15d40:	str	r3, [fp, #-520]	; 0xfffffdf8
   15d44:	ldr	r3, [r0]
   15d48:	str	r0, [fp, #-508]	; 0xfffffe04
   15d4c:	str	r3, [fp, #-540]	; 0xfffffde4
   15d50:	sub	r3, r6, r7
   15d54:	str	r3, [fp, #-512]	; 0xfffffe00
   15d58:	ldr	r3, [fp, #-512]	; 0xfffffe00
   15d5c:	mvn	r2, #0
   15d60:	cmp	r3, #0
   15d64:	str	r2, [fp, #-496]	; 0xfffffe10
   15d68:	ldr	r2, [fp, #-508]	; 0xfffffe04
   15d6c:	movge	r5, r3
   15d70:	ldr	r3, [fp, #-520]	; 0xfffffdf8
   15d74:	mov	r1, #0
   15d78:	str	r1, [r2]
   15d7c:	mvnlt	r5, #-2147483648	; 0x80000000
   15d80:	cmp	r3, #16
   15d84:	ldrls	pc, [pc, r3, lsl #2]
   15d88:	b	16778 <__assert_fail@plt+0x5778>
   15d8c:	ldrdeq	r6, [r1], -r4
   15d90:			; <UNDEFINED> instruction: 0x000162b4
   15d94:	andeq	r6, r1, r8, asr r2
   15d98:	andeq	r6, r1, ip, lsl #4
   15d9c:	andeq	r5, r1, ip, lsr #31
   15da0:	andeq	r5, r1, ip, lsr #31
   15da4:	andeq	r5, r1, ip, lsr #31
   15da8:	andeq	r5, r1, ip, lsr #31
   15dac:	ldrdeq	r6, [r1], -r0
   15db0:	ldrdeq	r6, [r1], -r0
   15db4:	andeq	r6, r1, r0, asr #3
   15db8:	andeq	r6, r1, r0, asr #3
   15dbc:	andeq	r5, r1, ip, lsr #31
   15dc0:	andeq	r5, r1, ip, lsr #31
   15dc4:	andeq	r5, r1, ip, lsr #31
   15dc8:	andeq	r5, r1, ip, lsr #31
   15dcc:	andeq	r5, r1, ip, lsr #31
   15dd0:	cmn	r2, #1
   15dd4:	bne	16778 <__assert_fail@plt+0x5778>
   15dd8:	mov	r2, #1
   15ddc:	adds	r2, r7, r2
   15de0:	mov	r4, r2
   15de4:	bcs	16420 <__assert_fail@plt+0x5420>
   15de8:	cmp	r6, r2
   15dec:	bcs	15e60 <__assert_fail@plt+0x4e60>
   15df0:	cmp	r6, #0
   15df4:	bne	16344 <__assert_fail@plt+0x5344>
   15df8:	cmp	r2, #12
   15dfc:	movls	r6, #12
   15e00:	bhi	1657c <__assert_fail@plt+0x557c>
   15e04:	ldr	r2, [fp, #-504]	; 0xfffffe08
   15e08:	cmp	r3, r2
   15e0c:	cmpne	r3, #0
   15e10:	sub	r5, r3, r2
   15e14:	clz	r5, r5
   15e18:	lsr	r5, r5, #5
   15e1c:	bne	16510 <__assert_fail@plt+0x5510>
   15e20:	mov	r0, r6
   15e24:	str	r3, [fp, #-508]	; 0xfffffe04
   15e28:	bl	10e98 <malloc@plt>
   15e2c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15e30:	subs	ip, r0, #0
   15e34:	beq	16348 <__assert_fail@plt+0x5348>
   15e38:	cmp	r7, #0
   15e3c:	moveq	r5, #0
   15e40:	cmp	r5, #0
   15e44:	moveq	r3, ip
   15e48:	beq	15e60 <__assert_fail@plt+0x4e60>
   15e4c:	mov	r1, r3
   15e50:	mov	r2, r7
   15e54:	str	ip, [fp, #-508]	; 0xfffffe04
   15e58:	bl	10dc0 <memcpy@plt>
   15e5c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15e60:	mov	r2, #37	; 0x25
   15e64:	strb	r2, [r3, r7]
   15e68:	ldr	r9, [sl, #4]
   15e6c:	add	sl, sl, #44	; 0x2c
   15e70:	ldr	r2, [fp, #-528]	; 0xfffffdf0
   15e74:	ldr	r5, [sl]
   15e78:	add	r2, r2, #1
   15e7c:	cmp	r5, r9
   15e80:	str	r2, [fp, #-528]	; 0xfffffdf0
   15e84:	bne	15a34 <__assert_fail@plt+0x4a34>
   15e88:	mov	r7, r4
   15e8c:	b	15ad4 <__assert_fail@plt+0x4ad4>
   15e90:	cmn	r6, #1
   15e94:	beq	16508 <__assert_fail@plt+0x5508>
   15e98:	mov	r5, r3
   15e9c:	bl	10f1c <__errno_location@plt>
   15ea0:	mov	r9, r5
   15ea4:	str	r0, [fp, #-508]	; 0xfffffe04
   15ea8:	ldr	r3, [fp, #-504]	; 0xfffffe08
   15eac:	cmp	r9, r3
   15eb0:	cmpne	r9, #0
   15eb4:	bne	16364 <__assert_fail@plt+0x5364>
   15eb8:	ldr	r3, [fp, #-536]	; 0xfffffde8
   15ebc:	cmp	r3, #0
   15ec0:	beq	15ecc <__assert_fail@plt+0x4ecc>
   15ec4:	mov	r0, r3
   15ec8:	bl	10da8 <free@plt>
   15ecc:	ldr	r0, [fp, #-360]	; 0xfffffe98
   15ed0:	sub	r3, fp, #348	; 0x15c
   15ed4:	cmp	r0, r3
   15ed8:	beq	15ee0 <__assert_fail@plt+0x4ee0>
   15edc:	bl	10da8 <free@plt>
   15ee0:	ldr	r0, [fp, #-480]	; 0xfffffe20
   15ee4:	sub	r3, fp, #476	; 0x1dc
   15ee8:	cmp	r0, r3
   15eec:	beq	15ef4 <__assert_fail@plt+0x4ef4>
   15ef0:	bl	10da8 <free@plt>
   15ef4:	ldr	r2, [fp, #-508]	; 0xfffffe04
   15ef8:	mov	r5, #0
   15efc:	mov	r3, #12
   15f00:	str	r3, [r2]
   15f04:	ldr	r3, [pc, #2160]	; 1677c <__assert_fail@plt+0x577c>
   15f08:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15f0c:	mov	r0, r5
   15f10:	ldr	r3, [r3]
   15f14:	cmp	r2, r3
   15f18:	bne	16768 <__assert_fail@plt+0x5768>
   15f1c:	sub	sp, fp, #32
   15f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f24:	mov	r0, r3
   15f28:	mov	r1, r6
   15f2c:	str	r3, [fp, #-508]	; 0xfffffe04
   15f30:	bl	10e14 <realloc@plt>
   15f34:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15f38:	cmp	r0, #0
   15f3c:	beq	16700 <__assert_fail@plt+0x5700>
   15f40:	mov	r3, r0
   15f44:	b	15abc <__assert_fail@plt+0x4abc>
   15f48:	sub	r5, r5, #18
   15f4c:	cmp	r5, #4
   15f50:	ldrls	pc, [pc, r5, lsl #2]
   15f54:	b	16778 <__assert_fail@plt+0x5778>
   15f58:	muleq	r1, r8, r3
   15f5c:	andeq	r6, r1, r8, lsl #7
   15f60:	andeq	r6, r1, r4, lsr r3
   15f64:	andeq	r6, r1, r4, lsr r3
   15f68:	andeq	r6, r1, r0, ror r3
   15f6c:	bl	10f1c <__errno_location@plt>
   15f70:	str	r0, [fp, #-508]	; 0xfffffe04
   15f74:	b	15ecc <__assert_fail@plt+0x4ecc>
   15f78:	mov	r5, #0
   15f7c:	b	15f04 <__assert_fail@plt+0x4f04>
   15f80:	blt	16348 <__assert_fail@plt+0x5348>
   15f84:	lsl	r6, r6, #1
   15f88:	cmp	r6, r2
   15f8c:	bcs	15a60 <__assert_fail@plt+0x4a60>
   15f90:	cmn	r2, #1
   15f94:	beq	15e98 <__assert_fail@plt+0x4e98>
   15f98:	mov	r6, r2
   15f9c:	b	15a60 <__assert_fail@plt+0x4a60>
   15fa0:	mov	r2, #76	; 0x4c
   15fa4:	strb	r2, [r4], #1
   15fa8:	b	15c40 <__assert_fail@plt+0x4c40>
   15fac:	ldr	r2, [sl, #40]	; 0x28
   15fb0:	ldr	r3, [fp, #-480]	; 0xfffffe20
   15fb4:	cmp	r8, #1
   15fb8:	add	r3, r3, r2, lsl #4
   15fbc:	add	r0, r9, r7
   15fc0:	ldr	r3, [r3, #8]
   15fc4:	beq	16228 <__assert_fail@plt+0x5228>
   15fc8:	cmp	r8, #2
   15fcc:	beq	1627c <__assert_fail@plt+0x527c>
   15fd0:	str	r3, [sp, #4]
   15fd4:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   15fd8:	sub	r2, fp, #496	; 0x1f0
   15fdc:	str	r2, [sp, #8]
   15fe0:	str	r3, [sp]
   15fe4:	mov	r2, #1
   15fe8:	mvn	r3, #0
   15fec:	mov	r1, r5
   15ff0:	bl	10ff4 <__snprintf_chk@plt>
   15ff4:	ldr	r2, [fp, #-496]	; 0xfffffe10
   15ff8:	cmp	r2, #0
   15ffc:	blt	16124 <__assert_fail@plt+0x5124>
   16000:	cmp	r2, r5
   16004:	mov	r3, r2
   16008:	bcs	1601c <__assert_fail@plt+0x501c>
   1600c:	add	r1, r9, r2
   16010:	ldrb	r1, [r1, r7]
   16014:	cmp	r1, #0
   16018:	bne	16778 <__assert_fail@plt+0x5778>
   1601c:	cmp	r2, r0
   16020:	bge	1602c <__assert_fail@plt+0x502c>
   16024:	mov	r3, r0
   16028:	str	r0, [fp, #-496]	; 0xfffffe10
   1602c:	add	r2, r3, #1
   16030:	cmp	r2, r5
   16034:	bcc	1658c <__assert_fail@plt+0x558c>
   16038:	cmn	r5, #-2147483647	; 0x80000001
   1603c:	beq	165a4 <__assert_fail@plt+0x55a4>
   16040:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   16044:	add	r3, r3, r2
   16048:	cmp	r7, r3
   1604c:	mvnhi	r3, #0
   16050:	cmp	r6, #0
   16054:	blt	163a8 <__assert_fail@plt+0x53a8>
   16058:	lsl	r2, r6, #1
   1605c:	cmp	r2, r3
   16060:	movcs	r3, r2
   16064:	cmp	r6, r3
   16068:	bcs	15d58 <__assert_fail@plt+0x4d58>
   1606c:	cmp	r2, r3
   16070:	bcc	163b4 <__assert_fail@plt+0x53b4>
   16074:	mov	r6, r2
   16078:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1607c:	cmp	r9, r3
   16080:	cmpne	r9, #0
   16084:	sub	r5, r9, r3
   16088:	clz	r5, r5
   1608c:	lsr	r5, r5, #5
   16090:	bne	163c4 <__assert_fail@plt+0x53c4>
   16094:	mov	r0, r6
   16098:	bl	10e98 <malloc@plt>
   1609c:	subs	r3, r0, #0
   160a0:	beq	15ea8 <__assert_fail@plt+0x4ea8>
   160a4:	cmp	r7, #0
   160a8:	moveq	r5, #0
   160ac:	cmp	r5, #0
   160b0:	beq	163e8 <__assert_fail@plt+0x53e8>
   160b4:	mov	r1, r9
   160b8:	mov	r2, r7
   160bc:	mov	r9, r3
   160c0:	bl	10dc0 <memcpy@plt>
   160c4:	sub	r3, r6, r7
   160c8:	str	r3, [fp, #-512]	; 0xfffffe00
   160cc:	b	15d58 <__assert_fail@plt+0x4d58>
   160d0:	ldr	r2, [sl, #40]	; 0x28
   160d4:	ldr	r3, [fp, #-480]	; 0xfffffe20
   160d8:	cmp	r8, #1
   160dc:	add	r3, r3, r2, lsl #4
   160e0:	add	r0, r9, r7
   160e4:	ldrd	r2, [r3, #8]
   160e8:	beq	16474 <__assert_fail@plt+0x5474>
   160ec:	cmp	r8, #2
   160f0:	beq	16440 <__assert_fail@plt+0x5440>
   160f4:	strd	r2, [sp, #8]
   160f8:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   160fc:	sub	r1, fp, #496	; 0x1f0
   16100:	str	r1, [sp, #16]
   16104:	str	r3, [sp]
   16108:	mov	r2, #1
   1610c:	mvn	r3, #0
   16110:	mov	r1, r5
   16114:	bl	10ff4 <__snprintf_chk@plt>
   16118:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1611c:	cmp	r2, #0
   16120:	bge	16000 <__assert_fail@plt+0x5000>
   16124:	ldrb	r3, [r4, #1]
   16128:	cmp	r3, #0
   1612c:	movne	r3, #0
   16130:	strbne	r3, [r4, #1]
   16134:	bne	15d58 <__assert_fail@plt+0x4d58>
   16138:	cmp	r0, #0
   1613c:	bge	16024 <__assert_fail@plt+0x5024>
   16140:	ldr	r3, [fp, #-508]	; 0xfffffe04
   16144:	ldr	r4, [r3]
   16148:	cmp	r4, #0
   1614c:	bne	16164 <__assert_fail@plt+0x5164>
   16150:	ldrb	r3, [sl, #36]	; 0x24
   16154:	and	r3, r3, #239	; 0xef
   16158:	cmp	r3, #99	; 0x63
   1615c:	moveq	r4, #84	; 0x54
   16160:	movne	r4, #22
   16164:	ldr	r3, [fp, #-504]	; 0xfffffe08
   16168:	cmp	r9, r3
   1616c:	cmpne	r9, #0
   16170:	bne	16604 <__assert_fail@plt+0x5604>
   16174:	ldr	r3, [fp, #-536]	; 0xfffffde8
   16178:	cmp	r3, #0
   1617c:	beq	16188 <__assert_fail@plt+0x5188>
   16180:	mov	r0, r3
   16184:	bl	10da8 <free@plt>
   16188:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1618c:	sub	r3, fp, #348	; 0x15c
   16190:	cmp	r0, r3
   16194:	beq	1619c <__assert_fail@plt+0x519c>
   16198:	bl	10da8 <free@plt>
   1619c:	ldr	r0, [fp, #-480]	; 0xfffffe20
   161a0:	sub	r3, fp, #476	; 0x1dc
   161a4:	cmp	r0, r3
   161a8:	beq	161b0 <__assert_fail@plt+0x51b0>
   161ac:	bl	10da8 <free@plt>
   161b0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   161b4:	mov	r5, #0
   161b8:	str	r4, [r3]
   161bc:	b	15f04 <__assert_fail@plt+0x4f04>
   161c0:	ldr	r2, [sl, #40]	; 0x28
   161c4:	ldr	r3, [fp, #-480]	; 0xfffffe20
   161c8:	cmp	r8, #1
   161cc:	add	r3, r3, r2, lsl #4
   161d0:	add	r0, r9, r7
   161d4:	ldrd	r2, [r3, #8]
   161d8:	beq	164d8 <__assert_fail@plt+0x54d8>
   161dc:	cmp	r8, #2
   161e0:	beq	164a4 <__assert_fail@plt+0x54a4>
   161e4:	strd	r2, [sp, #8]
   161e8:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   161ec:	sub	r1, fp, #496	; 0x1f0
   161f0:	str	r1, [sp, #16]
   161f4:	str	r3, [sp]
   161f8:	mov	r2, #1
   161fc:	mvn	r3, #0
   16200:	mov	r1, r5
   16204:	bl	10ff4 <__snprintf_chk@plt>
   16208:	b	15ff4 <__assert_fail@plt+0x4ff4>
   1620c:	ldr	r2, [sl, #40]	; 0x28
   16210:	ldr	r3, [fp, #-480]	; 0xfffffe20
   16214:	cmp	r8, #1
   16218:	add	r3, r3, r2, lsl #4
   1621c:	add	r0, r9, r7
   16220:	ldrh	r3, [r3, #8]
   16224:	bne	15fc8 <__assert_fail@plt+0x4fc8>
   16228:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1622c:	str	r3, [sp, #8]
   16230:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   16234:	sub	r1, fp, #496	; 0x1f0
   16238:	str	r1, [sp, #12]
   1623c:	str	r3, [sp]
   16240:	str	r2, [sp, #4]
   16244:	mvn	r3, #0
   16248:	mov	r2, r8
   1624c:	mov	r1, r5
   16250:	bl	10ff4 <__snprintf_chk@plt>
   16254:	b	15ff4 <__assert_fail@plt+0x4ff4>
   16258:	ldr	r2, [sl, #40]	; 0x28
   1625c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   16260:	cmp	r8, #1
   16264:	add	r3, r3, r2, lsl #4
   16268:	add	r0, r9, r7
   1626c:	ldrsh	r3, [r3, #8]
   16270:	beq	16228 <__assert_fail@plt+0x5228>
   16274:	cmp	r8, #2
   16278:	bne	15fd0 <__assert_fail@plt+0x4fd0>
   1627c:	ldr	r1, [fp, #-488]	; 0xfffffe18
   16280:	ldr	r2, [fp, #-492]	; 0xfffffe14
   16284:	str	r3, [sp, #12]
   16288:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1628c:	sub	ip, fp, #496	; 0x1f0
   16290:	str	r3, [sp]
   16294:	str	r1, [sp, #8]
   16298:	str	r2, [sp, #4]
   1629c:	str	ip, [sp, #16]
   162a0:	mvn	r3, #0
   162a4:	mov	r2, #1
   162a8:	mov	r1, r5
   162ac:	bl	10ff4 <__snprintf_chk@plt>
   162b0:	b	15ff4 <__assert_fail@plt+0x4ff4>
   162b4:	ldr	r2, [sl, #40]	; 0x28
   162b8:	ldr	r3, [fp, #-480]	; 0xfffffe20
   162bc:	cmp	r8, #1
   162c0:	add	r3, r3, r2, lsl #4
   162c4:	add	r0, r9, r7
   162c8:	ldrb	r3, [r3, #8]
   162cc:	bne	15fc8 <__assert_fail@plt+0x4fc8>
   162d0:	b	16228 <__assert_fail@plt+0x5228>
   162d4:	ldr	r2, [sl, #40]	; 0x28
   162d8:	ldr	r3, [fp, #-480]	; 0xfffffe20
   162dc:	cmp	r8, #1
   162e0:	add	r3, r3, r2, lsl #4
   162e4:	add	r0, r9, r7
   162e8:	ldrsb	r3, [r3, #8]
   162ec:	bne	15fc8 <__assert_fail@plt+0x4fc8>
   162f0:	b	16228 <__assert_fail@plt+0x5228>
   162f4:	blt	16348 <__assert_fail@plt+0x5348>
   162f8:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   162fc:	lsl	r6, r6, #1
   16300:	cmp	r6, r2
   16304:	bcs	15cd8 <__assert_fail@plt+0x4cd8>
   16308:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1630c:	mov	r1, #0
   16310:	cmn	r2, #1
   16314:	movne	r2, #0
   16318:	moveq	r2, #1
   1631c:	cmp	r1, r1
   16320:	movne	r2, #255	; 0xff
   16324:	cmp	r2, r1
   16328:	bne	15e98 <__assert_fail@plt+0x4e98>
   1632c:	ldr	r6, [fp, #-524]	; 0xfffffdf4
   16330:	b	15cd8 <__assert_fail@plt+0x4cd8>
   16334:	ldr	r2, [r1, #8]
   16338:	mov	r4, r7
   1633c:	str	r7, [r2]
   16340:	b	15e68 <__assert_fail@plt+0x4e68>
   16344:	bge	16570 <__assert_fail@plt+0x5570>
   16348:	mov	r9, r3
   1634c:	bl	10f1c <__errno_location@plt>
   16350:	ldr	r3, [fp, #-504]	; 0xfffffe08
   16354:	cmp	r9, r3
   16358:	cmpne	r9, #0
   1635c:	str	r0, [fp, #-508]	; 0xfffffe04
   16360:	beq	15eb8 <__assert_fail@plt+0x4eb8>
   16364:	mov	r0, r9
   16368:	bl	10da8 <free@plt>
   1636c:	b	15eb8 <__assert_fail@plt+0x4eb8>
   16370:	ldr	r2, [r1, #8]
   16374:	mov	r1, #0
   16378:	mov	r4, r7
   1637c:	str	r7, [r2]
   16380:	str	r1, [r2, #4]
   16384:	b	15e68 <__assert_fail@plt+0x4e68>
   16388:	ldr	r2, [r1, #8]
   1638c:	mov	r4, r7
   16390:	strh	r7, [r2]
   16394:	b	15e68 <__assert_fail@plt+0x4e68>
   16398:	ldr	r2, [r1, #8]
   1639c:	mov	r4, r7
   163a0:	strb	r7, [r2]
   163a4:	b	15e68 <__assert_fail@plt+0x4e68>
   163a8:	cmn	r6, #1
   163ac:	beq	15d58 <__assert_fail@plt+0x4d58>
   163b0:	b	15ea8 <__assert_fail@plt+0x4ea8>
   163b4:	cmn	r3, #1
   163b8:	beq	15ea8 <__assert_fail@plt+0x4ea8>
   163bc:	mov	r6, r3
   163c0:	b	16078 <__assert_fail@plt+0x5078>
   163c4:	mov	r1, r6
   163c8:	mov	r0, r9
   163cc:	bl	10e14 <realloc@plt>
   163d0:	cmp	r0, #0
   163d4:	beq	15ea8 <__assert_fail@plt+0x4ea8>
   163d8:	sub	r3, r6, r7
   163dc:	mov	r9, r0
   163e0:	str	r3, [fp, #-512]	; 0xfffffe00
   163e4:	b	15d58 <__assert_fail@plt+0x4d58>
   163e8:	mov	r9, r3
   163ec:	sub	r3, r6, r7
   163f0:	str	r3, [fp, #-512]	; 0xfffffe00
   163f4:	b	15d58 <__assert_fail@plt+0x4d58>
   163f8:	mov	r8, #0
   163fc:	b	15c78 <__assert_fail@plt+0x4c78>
   16400:	mov	r0, r3
   16404:	mov	r1, r6
   16408:	str	r3, [fp, #-508]	; 0xfffffe04
   1640c:	bl	10e14 <realloc@plt>
   16410:	ldr	r3, [fp, #-508]	; 0xfffffe04
   16414:	subs	r9, r0, #0
   16418:	bne	15d30 <__assert_fail@plt+0x4d30>
   1641c:	b	16348 <__assert_fail@plt+0x5348>
   16420:	cmn	r6, #1
   16424:	bne	15e98 <__assert_fail@plt+0x4e98>
   16428:	mov	r4, r6
   1642c:	b	15e60 <__assert_fail@plt+0x4e60>
   16430:	cmn	r6, #1
   16434:	bne	15e98 <__assert_fail@plt+0x4e98>
   16438:	mov	r9, r3
   1643c:	b	15d30 <__assert_fail@plt+0x4d30>
   16440:	ldr	r1, [fp, #-492]	; 0xfffffe14
   16444:	ldr	ip, [fp, #-488]	; 0xfffffe18
   16448:	strd	r2, [sp, #16]
   1644c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   16450:	sub	lr, fp, #496	; 0x1f0
   16454:	str	r3, [sp]
   16458:	stmib	sp, {r1, ip}
   1645c:	str	lr, [sp, #24]
   16460:	mvn	r3, #0
   16464:	mov	r2, #1
   16468:	mov	r1, r5
   1646c:	bl	10ff4 <__snprintf_chk@plt>
   16470:	b	15ff4 <__assert_fail@plt+0x4ff4>
   16474:	ldr	r1, [fp, #-492]	; 0xfffffe14
   16478:	strd	r2, [sp, #8]
   1647c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   16480:	sub	ip, fp, #496	; 0x1f0
   16484:	str	r3, [sp]
   16488:	str	r1, [sp, #4]
   1648c:	str	ip, [sp, #16]
   16490:	mvn	r3, #0
   16494:	mov	r2, r8
   16498:	mov	r1, r5
   1649c:	bl	10ff4 <__snprintf_chk@plt>
   164a0:	b	15ff4 <__assert_fail@plt+0x4ff4>
   164a4:	ldr	r1, [fp, #-492]	; 0xfffffe14
   164a8:	ldr	ip, [fp, #-488]	; 0xfffffe18
   164ac:	strd	r2, [sp, #16]
   164b0:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   164b4:	sub	lr, fp, #496	; 0x1f0
   164b8:	str	r3, [sp]
   164bc:	stmib	sp, {r1, ip}
   164c0:	str	lr, [sp, #24]
   164c4:	mvn	r3, #0
   164c8:	mov	r2, #1
   164cc:	mov	r1, r5
   164d0:	bl	10ff4 <__snprintf_chk@plt>
   164d4:	b	15ff4 <__assert_fail@plt+0x4ff4>
   164d8:	ldr	r1, [fp, #-492]	; 0xfffffe14
   164dc:	strd	r2, [sp, #8]
   164e0:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   164e4:	sub	ip, fp, #496	; 0x1f0
   164e8:	str	r3, [sp]
   164ec:	str	r1, [sp, #4]
   164f0:	str	ip, [sp, #16]
   164f4:	mvn	r3, #0
   164f8:	mov	r2, r8
   164fc:	mov	r1, r5
   16500:	bl	10ff4 <__snprintf_chk@plt>
   16504:	b	15ff4 <__assert_fail@plt+0x4ff4>
   16508:	mov	r7, r6
   1650c:	b	15abc <__assert_fail@plt+0x4abc>
   16510:	mov	r0, r3
   16514:	mov	r1, r6
   16518:	str	r3, [fp, #-508]	; 0xfffffe04
   1651c:	bl	10e14 <realloc@plt>
   16520:	ldr	r3, [fp, #-508]	; 0xfffffe04
   16524:	cmp	r0, #0
   16528:	beq	16700 <__assert_fail@plt+0x5700>
   1652c:	mov	r3, r0
   16530:	b	15e60 <__assert_fail@plt+0x4e60>
   16534:	ldr	r0, [fp, #-360]	; 0xfffffe98
   16538:	sub	r3, fp, #348	; 0x15c
   1653c:	cmp	r0, r3
   16540:	beq	16548 <__assert_fail@plt+0x5548>
   16544:	bl	10da8 <free@plt>
   16548:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1654c:	sub	r3, fp, #476	; 0x1dc
   16550:	cmp	r0, r3
   16554:	beq	1655c <__assert_fail@plt+0x555c>
   16558:	bl	10da8 <free@plt>
   1655c:	bl	10f1c <__errno_location@plt>
   16560:	mov	r3, #22
   16564:	mov	r5, #0
   16568:	str	r3, [r0]
   1656c:	b	15f04 <__assert_fail@plt+0x4f04>
   16570:	lsl	r6, r6, #1
   16574:	cmp	r6, r2
   16578:	bcs	15e04 <__assert_fail@plt+0x4e04>
   1657c:	cmn	r2, #1
   16580:	beq	15e98 <__assert_fail@plt+0x4e98>
   16584:	mov	r6, r2
   16588:	b	15e04 <__assert_fail@plt+0x4e04>
   1658c:	add	r4, r7, r3
   16590:	ldr	r3, [fp, #-508]	; 0xfffffe04
   16594:	ldr	r2, [fp, #-540]	; 0xfffffde4
   16598:	str	r2, [r3]
   1659c:	mov	r3, r9
   165a0:	b	15e68 <__assert_fail@plt+0x4e68>
   165a4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   165a8:	cmp	r9, r3
   165ac:	cmpne	r9, #0
   165b0:	bne	16610 <__assert_fail@plt+0x5610>
   165b4:	ldr	r3, [fp, #-536]	; 0xfffffde8
   165b8:	cmp	r3, #0
   165bc:	beq	165c8 <__assert_fail@plt+0x55c8>
   165c0:	mov	r0, r3
   165c4:	bl	10da8 <free@plt>
   165c8:	ldr	r0, [fp, #-360]	; 0xfffffe98
   165cc:	sub	r3, fp, #348	; 0x15c
   165d0:	cmp	r0, r3
   165d4:	beq	165dc <__assert_fail@plt+0x55dc>
   165d8:	bl	10da8 <free@plt>
   165dc:	ldr	r0, [fp, #-480]	; 0xfffffe20
   165e0:	sub	r3, fp, #476	; 0x1dc
   165e4:	cmp	r0, r3
   165e8:	beq	165f0 <__assert_fail@plt+0x55f0>
   165ec:	bl	10da8 <free@plt>
   165f0:	ldr	r2, [fp, #-508]	; 0xfffffe04
   165f4:	mov	r3, #75	; 0x4b
   165f8:	mov	r5, #0
   165fc:	str	r3, [r2]
   16600:	b	15f04 <__assert_fail@plt+0x4f04>
   16604:	mov	r0, r9
   16608:	bl	10da8 <free@plt>
   1660c:	b	16174 <__assert_fail@plt+0x5174>
   16610:	mov	r0, r9
   16614:	bl	10da8 <free@plt>
   16618:	b	165b4 <__assert_fail@plt+0x55b4>
   1661c:	mov	r5, r3
   16620:	mov	r3, #1
   16624:	adds	r4, r7, r3
   16628:	mov	r8, r7
   1662c:	bcs	1676c <__assert_fail@plt+0x576c>
   16630:	cmp	r6, r4
   16634:	bcs	166a0 <__assert_fail@plt+0x56a0>
   16638:	cmp	r6, #0
   1663c:	bne	16748 <__assert_fail@plt+0x5748>
   16640:	cmp	r4, #12
   16644:	movls	r6, #12
   16648:	bhi	16758 <__assert_fail@plt+0x5758>
   1664c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   16650:	cmp	r5, r3
   16654:	cmpne	r5, #0
   16658:	sub	r7, r5, r3
   1665c:	clz	r7, r7
   16660:	lsr	r7, r7, #5
   16664:	bne	1672c <__assert_fail@plt+0x572c>
   16668:	mov	r0, r6
   1666c:	bl	10e98 <malloc@plt>
   16670:	subs	r3, r0, #0
   16674:	beq	15e9c <__assert_fail@plt+0x4e9c>
   16678:	cmp	r8, #0
   1667c:	movne	r2, r7
   16680:	moveq	r2, #0
   16684:	cmp	r2, #0
   16688:	moveq	r5, r3
   1668c:	beq	166a0 <__assert_fail@plt+0x56a0>
   16690:	mov	r1, r5
   16694:	mov	r2, r8
   16698:	mov	r5, r3
   1669c:	bl	10dc0 <memcpy@plt>
   166a0:	ldr	r3, [fp, #-504]	; 0xfffffe08
   166a4:	cmp	r5, r3
   166a8:	cmpne	r6, r4
   166ac:	mov	r3, #0
   166b0:	strb	r3, [r5, r8]
   166b4:	bhi	16714 <__assert_fail@plt+0x5714>
   166b8:	ldr	r3, [fp, #-536]	; 0xfffffde8
   166bc:	cmp	r3, #0
   166c0:	beq	166cc <__assert_fail@plt+0x56cc>
   166c4:	mov	r0, r3
   166c8:	bl	10da8 <free@plt>
   166cc:	ldr	r0, [fp, #-360]	; 0xfffffe98
   166d0:	sub	r3, fp, #348	; 0x15c
   166d4:	cmp	r0, r3
   166d8:	beq	166e0 <__assert_fail@plt+0x56e0>
   166dc:	bl	10da8 <free@plt>
   166e0:	ldr	r0, [fp, #-480]	; 0xfffffe20
   166e4:	sub	r3, fp, #476	; 0x1dc
   166e8:	cmp	r0, r3
   166ec:	beq	166f4 <__assert_fail@plt+0x56f4>
   166f0:	bl	10da8 <free@plt>
   166f4:	ldr	r3, [fp, #-532]	; 0xfffffdec
   166f8:	str	r8, [r3]
   166fc:	b	15f04 <__assert_fail@plt+0x4f04>
   16700:	mov	r5, r3
   16704:	bl	10f1c <__errno_location@plt>
   16708:	mov	r9, r5
   1670c:	str	r0, [fp, #-508]	; 0xfffffe04
   16710:	b	16364 <__assert_fail@plt+0x5364>
   16714:	mov	r0, r5
   16718:	mov	r1, r4
   1671c:	bl	10e14 <realloc@plt>
   16720:	cmp	r0, #0
   16724:	movne	r5, r0
   16728:	b	166b8 <__assert_fail@plt+0x56b8>
   1672c:	mov	r1, r6
   16730:	mov	r0, r5
   16734:	bl	10e14 <realloc@plt>
   16738:	cmp	r0, #0
   1673c:	beq	16704 <__assert_fail@plt+0x5704>
   16740:	mov	r5, r0
   16744:	b	166a0 <__assert_fail@plt+0x56a0>
   16748:	blt	15e9c <__assert_fail@plt+0x4e9c>
   1674c:	lsl	r6, r6, #1
   16750:	cmp	r6, r4
   16754:	bcs	1664c <__assert_fail@plt+0x564c>
   16758:	cmn	r4, #1
   1675c:	movne	r6, r4
   16760:	bne	1664c <__assert_fail@plt+0x564c>
   16764:	b	15e9c <__assert_fail@plt+0x4e9c>
   16768:	bl	10e08 <__stack_chk_fail@plt>
   1676c:	cmn	r6, #1
   16770:	beq	166a0 <__assert_fail@plt+0x56a0>
   16774:	b	15e9c <__assert_fail@plt+0x4e9c>
   16778:	bl	10fe8 <abort@plt>
   1677c:	andeq	r8, r2, r8, lsl #30
   16780:	ldr	r3, [r1]
   16784:	ldr	r2, [r1, #4]
   16788:	cmp	r3, #0
   1678c:	beq	1689c <__assert_fail@plt+0x589c>
   16790:	push	{r4, r5, r6, lr}
   16794:	add	r2, r2, #8
   16798:	ldr	r6, [pc, #268]	; 168ac <__assert_fail@plt+0x58ac>
   1679c:	ldr	lr, [pc, #268]	; 168b0 <__assert_fail@plt+0x58b0>
   167a0:	mov	ip, #0
   167a4:	ldr	r3, [r2, #-8]
   167a8:	sub	r3, r3, #1
   167ac:	cmp	r3, #21
   167b0:	ldrls	pc, [pc, r3, lsl #2]
   167b4:	b	168a4 <__assert_fail@plt+0x58a4>
   167b8:	andeq	r6, r1, r4, asr r8
   167bc:	andeq	r6, r1, r4, asr r8
   167c0:	andeq	r6, r1, r8, asr #16
   167c4:	andeq	r6, r1, r8, asr #16
   167c8:	andeq	r6, r1, r0, lsl r8
   167cc:	andeq	r6, r1, r0, lsl r8
   167d0:	andeq	r6, r1, r0, lsl r8
   167d4:	andeq	r6, r1, r0, lsl r8
   167d8:	andeq	r6, r1, r4, lsr r8
   167dc:	andeq	r6, r1, r4, lsr r8
   167e0:	andeq	r6, r1, r0, ror #16
   167e4:	andeq	r6, r1, r0, ror #16
   167e8:	andeq	r6, r1, r0, lsl r8
   167ec:	andeq	r6, r1, r0, lsl r8
   167f0:	andeq	r6, r1, r4, ror r8
   167f4:	andeq	r6, r1, r8, lsl #17
   167f8:	andeq	r6, r1, r0, lsl r8
   167fc:	andeq	r6, r1, r0, lsl r8
   16800:	andeq	r6, r1, r0, lsl r8
   16804:	andeq	r6, r1, r0, lsl r8
   16808:	andeq	r6, r1, r0, lsl r8
   1680c:	andeq	r6, r1, r0, lsl r8
   16810:	ldr	r3, [r0], #4
   16814:	str	r3, [r2]
   16818:	ldr	r3, [r1]
   1681c:	add	ip, ip, #1
   16820:	cmp	r3, ip
   16824:	add	r2, r2, #16
   16828:	bhi	167a4 <__assert_fail@plt+0x57a4>
   1682c:	mov	r0, #0
   16830:	pop	{r4, r5, r6, pc}
   16834:	add	r0, r0, #7
   16838:	bic	r0, r0, #7
   1683c:	ldrd	r4, [r0], #8
   16840:	strd	r4, [r2]
   16844:	b	16818 <__assert_fail@plt+0x5818>
   16848:	ldr	r3, [r0], #4
   1684c:	strh	r3, [r2]
   16850:	b	16818 <__assert_fail@plt+0x5818>
   16854:	ldr	r3, [r0], #4
   16858:	strb	r3, [r2]
   1685c:	b	16818 <__assert_fail@plt+0x5818>
   16860:	add	r0, r0, #7
   16864:	bic	r0, r0, #7
   16868:	ldrd	r4, [r0], #8
   1686c:	strd	r4, [r2]
   16870:	b	16818 <__assert_fail@plt+0x5818>
   16874:	ldr	r3, [r0], #4
   16878:	cmp	r3, #0
   1687c:	streq	lr, [r2]
   16880:	bne	16814 <__assert_fail@plt+0x5814>
   16884:	b	16818 <__assert_fail@plt+0x5818>
   16888:	ldr	r3, [r0], #4
   1688c:	cmp	r3, #0
   16890:	streq	r6, [r2]
   16894:	bne	16814 <__assert_fail@plt+0x5814>
   16898:	b	16818 <__assert_fail@plt+0x5818>
   1689c:	mov	r0, #0
   168a0:	bx	lr
   168a4:	mvn	r0, #0
   168a8:	pop	{r4, r5, r6, pc}
   168ac:	strdeq	r8, [r1], -r0
   168b0:	andeq	r8, r1, ip, lsl #12
   168b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168b8:	mov	sl, r2
   168bc:	sub	sp, sp, #44	; 0x2c
   168c0:	mov	fp, r1
   168c4:	mov	r3, r1
   168c8:	mov	r1, sl
   168cc:	mov	r2, #0
   168d0:	mov	ip, #7
   168d4:	str	r2, [r3], #16
   168d8:	str	fp, [sp, #4]
   168dc:	str	r3, [fp, #4]
   168e0:	mov	r4, r2
   168e4:	str	r2, [r1], #8
   168e8:	str	ip, [sp, #8]
   168ec:	mov	r7, r0
   168f0:	str	r3, [sp, #36]	; 0x24
   168f4:	str	r2, [sp, #28]
   168f8:	str	r1, [sp, #12]
   168fc:	str	r2, [sp, #16]
   16900:	str	r1, [sl, #4]
   16904:	str	r2, [sp, #32]
   16908:	mov	r9, r2
   1690c:	str	ip, [sp, #24]
   16910:	mov	fp, sl
   16914:	b	16924 <__assert_fail@plt+0x5924>
   16918:	cmp	r0, #37	; 0x25
   1691c:	mov	r5, r7
   16920:	beq	16964 <__assert_fail@plt+0x5964>
   16924:	mov	r2, r7
   16928:	ldrb	r0, [r7], #1
   1692c:	cmp	r0, #0
   16930:	bne	16918 <__assert_fail@plt+0x5918>
   16934:	add	ip, r4, r4, lsl #2
   16938:	ldr	fp, [sp, #4]
   1693c:	add	r4, r4, ip, lsl #1
   16940:	mov	r1, r0
   16944:	str	r2, [r3, r4, lsl #2]
   16948:	ldr	r3, [sp, #16]
   1694c:	str	r3, [fp, #8]
   16950:	ldr	r3, [sp, #28]
   16954:	str	r3, [fp, #12]
   16958:	mov	r0, r1
   1695c:	add	sp, sp, #44	; 0x2c
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16964:	add	r1, r4, r4, lsl #2
   16968:	mvn	r8, #0
   1696c:	add	r4, r4, r1, lsl #1
   16970:	add	r6, r3, r4, lsl #2
   16974:	str	r2, [r3, r4, lsl #2]
   16978:	str	r9, [r6, #8]
   1697c:	str	r9, [r6, #12]
   16980:	str	r9, [r6, #16]
   16984:	str	r9, [r6, #24]
   16988:	str	r9, [r6, #28]
   1698c:	str	r8, [r6, #20]
   16990:	str	r8, [r6, #32]
   16994:	str	r8, [r6, #40]	; 0x28
   16998:	ldrb	r4, [r7]
   1699c:	sub	r0, r4, #48	; 0x30
   169a0:	uxtb	r3, r0
   169a4:	cmp	r3, #9
   169a8:	bhi	169f4 <__assert_fail@plt+0x59f4>
   169ac:	b	16e6c <__assert_fail@plt+0x5e6c>
   169b0:	cmp	r4, #45	; 0x2d
   169b4:	beq	16a10 <__assert_fail@plt+0x5a10>
   169b8:	cmp	r4, #43	; 0x2b
   169bc:	beq	16a20 <__assert_fail@plt+0x5a20>
   169c0:	cmp	r4, #32
   169c4:	beq	16a30 <__assert_fail@plt+0x5a30>
   169c8:	cmp	r4, #35	; 0x23
   169cc:	beq	16a40 <__assert_fail@plt+0x5a40>
   169d0:	cmp	r4, #48	; 0x30
   169d4:	beq	16a50 <__assert_fail@plt+0x5a50>
   169d8:	cmp	r4, #73	; 0x49
   169dc:	bne	16a60 <__assert_fail@plt+0x5a60>
   169e0:	ldr	r3, [r6, #8]
   169e4:	orr	r3, r3, #64	; 0x40
   169e8:	str	r3, [r6, #8]
   169ec:	ldrb	r4, [r7]
   169f0:	mov	r5, r7
   169f4:	cmp	r4, #39	; 0x27
   169f8:	add	r7, r5, #1
   169fc:	bne	169b0 <__assert_fail@plt+0x59b0>
   16a00:	ldr	r3, [r6, #8]
   16a04:	orr	r3, r3, #1
   16a08:	str	r3, [r6, #8]
   16a0c:	b	169ec <__assert_fail@plt+0x59ec>
   16a10:	ldr	r3, [r6, #8]
   16a14:	orr	r3, r3, #2
   16a18:	str	r3, [r6, #8]
   16a1c:	b	169ec <__assert_fail@plt+0x59ec>
   16a20:	ldr	r3, [r6, #8]
   16a24:	orr	r3, r3, #4
   16a28:	str	r3, [r6, #8]
   16a2c:	b	169ec <__assert_fail@plt+0x59ec>
   16a30:	ldr	r3, [r6, #8]
   16a34:	orr	r3, r3, #8
   16a38:	str	r3, [r6, #8]
   16a3c:	b	169ec <__assert_fail@plt+0x59ec>
   16a40:	ldr	r3, [r6, #8]
   16a44:	orr	r3, r3, #16
   16a48:	str	r3, [r6, #8]
   16a4c:	b	169ec <__assert_fail@plt+0x59ec>
   16a50:	ldr	r3, [r6, #8]
   16a54:	orr	r3, r3, #32
   16a58:	str	r3, [r6, #8]
   16a5c:	b	169ec <__assert_fail@plt+0x59ec>
   16a60:	cmp	r4, #42	; 0x2a
   16a64:	beq	16c3c <__assert_fail@plt+0x5c3c>
   16a68:	sub	r3, r4, #48	; 0x30
   16a6c:	cmp	r3, #9
   16a70:	bls	1725c <__assert_fail@plt+0x625c>
   16a74:	cmp	r4, #46	; 0x2e
   16a78:	beq	16cd4 <__assert_fail@plt+0x5cd4>
   16a7c:	add	r5, r5, #1
   16a80:	mov	r3, #0
   16a84:	mov	r1, #1
   16a88:	b	16a90 <__assert_fail@plt+0x5a90>
   16a8c:	ldrb	r4, [r5], #1
   16a90:	cmp	r4, #104	; 0x68
   16a94:	andeq	r2, r3, #1
   16a98:	mov	r7, r5
   16a9c:	orreq	r3, r3, r1, lsl r2
   16aa0:	beq	16a8c <__assert_fail@plt+0x5a8c>
   16aa4:	cmp	r4, #76	; 0x4c
   16aa8:	orreq	r3, r3, #4
   16aac:	beq	16a8c <__assert_fail@plt+0x5a8c>
   16ab0:	cmp	r4, #108	; 0x6c
   16ab4:	addeq	r3, r3, #8
   16ab8:	beq	16a8c <__assert_fail@plt+0x5a8c>
   16abc:	cmp	r4, #106	; 0x6a
   16ac0:	addeq	r3, r3, #16
   16ac4:	beq	16a8c <__assert_fail@plt+0x5a8c>
   16ac8:	and	r2, r4, #223	; 0xdf
   16acc:	cmp	r2, #90	; 0x5a
   16ad0:	beq	16a8c <__assert_fail@plt+0x5a8c>
   16ad4:	cmp	r4, #116	; 0x74
   16ad8:	beq	16a8c <__assert_fail@plt+0x5a8c>
   16adc:	sub	r2, r4, #37	; 0x25
   16ae0:	cmp	r2, #83	; 0x53
   16ae4:	ldrls	pc, [pc, r2, lsl #2]
   16ae8:	b	16edc <__assert_fail@plt+0x5edc>
   16aec:	ldrdeq	r6, [r1], -r0
   16af0:	ldrdeq	r6, [r1], -ip
   16af4:	ldrdeq	r6, [r1], -ip
   16af8:	ldrdeq	r6, [r1], -ip
   16afc:	ldrdeq	r6, [r1], -ip
   16b00:	ldrdeq	r6, [r1], -ip
   16b04:	ldrdeq	r6, [r1], -ip
   16b08:	ldrdeq	r6, [r1], -ip
   16b0c:	ldrdeq	r6, [r1], -ip
   16b10:	ldrdeq	r6, [r1], -ip
   16b14:	ldrdeq	r6, [r1], -ip
   16b18:	ldrdeq	r6, [r1], -ip
   16b1c:	ldrdeq	r6, [r1], -ip
   16b20:	ldrdeq	r6, [r1], -ip
   16b24:	ldrdeq	r6, [r1], -ip
   16b28:	ldrdeq	r6, [r1], -ip
   16b2c:	ldrdeq	r6, [r1], -ip
   16b30:	ldrdeq	r6, [r1], -ip
   16b34:	ldrdeq	r6, [r1], -ip
   16b38:	ldrdeq	r6, [r1], -ip
   16b3c:	ldrdeq	r6, [r1], -ip
   16b40:	ldrdeq	r6, [r1], -ip
   16b44:	ldrdeq	r6, [r1], -ip
   16b48:	ldrdeq	r6, [r1], -ip
   16b4c:	ldrdeq	r6, [r1], -ip
   16b50:	ldrdeq	r6, [r1], -ip
   16b54:	ldrdeq	r6, [r1], -ip
   16b58:	ldrdeq	r6, [r1], -ip
   16b5c:	andeq	r7, r1, r4, lsr #32
   16b60:	ldrdeq	r6, [r1], -ip
   16b64:	andeq	r6, r1, r0, ror sp
   16b68:	ldrdeq	r6, [r1], -ip
   16b6c:	andeq	r7, r1, r4, lsr #32
   16b70:	andeq	r7, r1, r4, lsr #32
   16b74:	andeq	r7, r1, r4, lsr #32
   16b78:	ldrdeq	r6, [r1], -ip
   16b7c:	ldrdeq	r6, [r1], -ip
   16b80:	ldrdeq	r6, [r1], -ip
   16b84:	ldrdeq	r6, [r1], -ip
   16b88:	ldrdeq	r6, [r1], -ip
   16b8c:	ldrdeq	r6, [r1], -ip
   16b90:	ldrdeq	r6, [r1], -ip
   16b94:	ldrdeq	r6, [r1], -ip
   16b98:	ldrdeq	r6, [r1], -ip
   16b9c:	ldrdeq	r6, [r1], -ip
   16ba0:	ldrdeq	r6, [r1], -ip
   16ba4:	andeq	r7, r1, r8, ror #2
   16ba8:	ldrdeq	r6, [r1], -ip
   16bac:	ldrdeq	r6, [r1], -ip
   16bb0:	ldrdeq	r6, [r1], -ip
   16bb4:	ldrdeq	r6, [r1], -ip
   16bb8:	andeq	r7, r1, r4, lsr #2
   16bbc:	ldrdeq	r6, [r1], -ip
   16bc0:	ldrdeq	r6, [r1], -ip
   16bc4:	ldrdeq	r6, [r1], -ip
   16bc8:	ldrdeq	r6, [r1], -ip
   16bcc:	ldrdeq	r6, [r1], -ip
   16bd0:	ldrdeq	r6, [r1], -ip
   16bd4:	ldrdeq	r6, [r1], -ip
   16bd8:	ldrdeq	r6, [r1], -ip
   16bdc:	andeq	r7, r1, r4, lsr #32
   16be0:	ldrdeq	r6, [r1], -ip
   16be4:	andeq	r7, r1, r0, lsl r1
   16be8:	andeq	r7, r1, ip, asr #1
   16bec:	andeq	r7, r1, r4, lsr #32
   16bf0:	andeq	r7, r1, r4, lsr #32
   16bf4:	andeq	r7, r1, r4, lsr #32
   16bf8:	ldrdeq	r6, [r1], -ip
   16bfc:	andeq	r7, r1, ip, asr #1
   16c00:	ldrdeq	r6, [r1], -ip
   16c04:	ldrdeq	r6, [r1], -ip
   16c08:	ldrdeq	r6, [r1], -ip
   16c0c:	ldrdeq	r6, [r1], -ip
   16c10:	andeq	r7, r1, r4, lsl #3
   16c14:	andeq	r7, r1, r4, lsr #2
   16c18:	andeq	r7, r1, r8, ror r1
   16c1c:	ldrdeq	r6, [r1], -ip
   16c20:	ldrdeq	r6, [r1], -ip
   16c24:	strheq	r7, [r1], -r8
   16c28:	ldrdeq	r6, [r1], -ip
   16c2c:	andeq	r7, r1, r4, lsr #2
   16c30:	ldrdeq	r6, [r1], -ip
   16c34:	ldrdeq	r6, [r1], -ip
   16c38:	andeq	r7, r1, r4, lsr #2
   16c3c:	str	r5, [r6, #12]
   16c40:	str	r7, [r6, #16]
   16c44:	ldrb	r3, [r5, #1]
   16c48:	ldr	r2, [sp, #16]
   16c4c:	sub	r3, r3, #48	; 0x30
   16c50:	cmp	r2, #0
   16c54:	moveq	r2, #1
   16c58:	str	r2, [sp, #16]
   16c5c:	uxtb	r2, r3
   16c60:	cmp	r2, #9
   16c64:	bls	17048 <__assert_fail@plt+0x6048>
   16c68:	ldr	r4, [r6, #20]
   16c6c:	cmn	r4, #1
   16c70:	beq	17004 <__assert_fail@plt+0x6004>
   16c74:	ldr	r3, [sp, #8]
   16c78:	ldr	sl, [fp, #4]
   16c7c:	cmp	r3, r4
   16c80:	bls	16f6c <__assert_fail@plt+0x5f6c>
   16c84:	ldr	r2, [fp]
   16c88:	cmp	r2, r4
   16c8c:	bhi	16ca8 <__assert_fail@plt+0x5ca8>
   16c90:	sub	r1, sl, #16
   16c94:	add	r2, r2, #1
   16c98:	cmp	r2, r4
   16c9c:	str	r9, [r1, r2, lsl #4]
   16ca0:	bls	16c94 <__assert_fail@plt+0x5c94>
   16ca4:	str	r2, [fp]
   16ca8:	ldr	r3, [sl, r4, lsl #4]
   16cac:	cmp	r3, #0
   16cb0:	bne	172b8 <__assert_fail@plt+0x62b8>
   16cb4:	mov	r3, r7
   16cb8:	mov	r2, #5
   16cbc:	str	r2, [sl, r4, lsl #4]
   16cc0:	ldrb	r4, [r3], #1
   16cc4:	mov	r5, r7
   16cc8:	cmp	r4, #46	; 0x2e
   16ccc:	mov	r7, r3
   16cd0:	bne	16a7c <__assert_fail@plt+0x5a7c>
   16cd4:	ldrb	r3, [r5, #1]
   16cd8:	cmp	r3, #42	; 0x2a
   16cdc:	bne	16f24 <__assert_fail@plt+0x5f24>
   16ce0:	add	r7, r5, #2
   16ce4:	str	r5, [r6, #24]
   16ce8:	str	r7, [r6, #28]
   16cec:	ldrb	r1, [r5, #2]
   16cf0:	ldr	r3, [sp, #28]
   16cf4:	sub	r1, r1, #48	; 0x30
   16cf8:	cmp	r3, #2
   16cfc:	movcc	r3, #2
   16d00:	str	r3, [sp, #28]
   16d04:	uxtb	r3, r1
   16d08:	cmp	r3, #9
   16d0c:	bls	17438 <__assert_fail@plt+0x6438>
   16d10:	ldr	r4, [r6, #32]
   16d14:	cmn	r4, #1
   16d18:	beq	17418 <__assert_fail@plt+0x6418>
   16d1c:	ldr	r3, [sp, #8]
   16d20:	ldr	sl, [fp, #4]
   16d24:	cmp	r3, r4
   16d28:	bls	1733c <__assert_fail@plt+0x633c>
   16d2c:	ldr	r2, [fp]
   16d30:	cmp	r2, r4
   16d34:	bhi	16d50 <__assert_fail@plt+0x5d50>
   16d38:	sub	r1, sl, #16
   16d3c:	add	r2, r2, #1
   16d40:	cmp	r2, r4
   16d44:	str	r9, [r1, r2, lsl #4]
   16d48:	bls	16d3c <__assert_fail@plt+0x5d3c>
   16d4c:	str	r2, [fp]
   16d50:	ldr	r3, [sl, r4, lsl #4]
   16d54:	cmp	r3, #0
   16d58:	bne	1739c <__assert_fail@plt+0x639c>
   16d5c:	mov	r3, #5
   16d60:	str	r3, [sl, r4, lsl #4]
   16d64:	mov	r5, r7
   16d68:	ldrb	r4, [r7]
   16d6c:	b	16a7c <__assert_fail@plt+0x5a7c>
   16d70:	mov	r4, #99	; 0x63
   16d74:	mov	r3, #14
   16d78:	str	r3, [sp, #20]
   16d7c:	cmn	r8, #1
   16d80:	strne	r8, [r6, #40]	; 0x28
   16d84:	beq	1723c <__assert_fail@plt+0x623c>
   16d88:	ldr	r3, [sp, #8]
   16d8c:	ldr	sl, [fp, #4]
   16d90:	cmp	r3, r8
   16d94:	bls	171e0 <__assert_fail@plt+0x61e0>
   16d98:	ldr	r3, [fp]
   16d9c:	cmp	r3, r8
   16da0:	bhi	16dbc <__assert_fail@plt+0x5dbc>
   16da4:	sub	r1, sl, #16
   16da8:	add	r3, r3, #1
   16dac:	cmp	r3, r8
   16db0:	str	r9, [r1, r3, lsl #4]
   16db4:	bls	16da8 <__assert_fail@plt+0x5da8>
   16db8:	str	r3, [fp]
   16dbc:	ldr	r3, [sl, r8, lsl #4]
   16dc0:	cmp	r3, #0
   16dc4:	bne	171c8 <__assert_fail@plt+0x61c8>
   16dc8:	ldr	r3, [sp, #20]
   16dcc:	str	r3, [sl, r8, lsl #4]
   16dd0:	ldr	r3, [sp, #4]
   16dd4:	strb	r4, [r6, #36]	; 0x24
   16dd8:	ldr	r2, [sp, #24]
   16ddc:	ldr	r4, [r3]
   16de0:	str	r5, [r6, #4]
   16de4:	add	r4, r4, #1
   16de8:	cmp	r2, r4
   16dec:	str	r4, [r3]
   16df0:	ldrhi	r3, [r3, #4]
   16df4:	bhi	16924 <__assert_fail@plt+0x5924>
   16df8:	ldr	r3, [sp, #24]
   16dfc:	cmp	r3, #0
   16e00:	blt	17514 <__assert_fail@plt+0x6514>
   16e04:	ldr	r3, [sp, #24]
   16e08:	ldr	r2, [pc, #1896]	; 17578 <__assert_fail@plt+0x6578>
   16e0c:	lsl	r5, r3, #1
   16e10:	cmp	r5, r2
   16e14:	bhi	17514 <__assert_fail@plt+0x6514>
   16e18:	ldr	r2, [sp, #4]
   16e1c:	add	r1, r3, r3, lsl #2
   16e20:	ldr	r6, [r2, #4]
   16e24:	add	r1, r3, r1, lsl #1
   16e28:	ldr	r3, [sp, #36]	; 0x24
   16e2c:	lsl	r1, r1, #3
   16e30:	cmp	r3, r6
   16e34:	beq	16fcc <__assert_fail@plt+0x5fcc>
   16e38:	mov	r0, r6
   16e3c:	bl	10e14 <realloc@plt>
   16e40:	subs	r3, r0, #0
   16e44:	beq	17514 <__assert_fail@plt+0x6514>
   16e48:	ldr	r2, [sp, #4]
   16e4c:	ldm	r2, {r4, r6}
   16e50:	ldr	r2, [sp, #36]	; 0x24
   16e54:	cmp	r2, r6
   16e58:	beq	16fdc <__assert_fail@plt+0x5fdc>
   16e5c:	ldr	r2, [sp, #4]
   16e60:	str	r5, [sp, #24]
   16e64:	str	r3, [r2, #4]
   16e68:	b	16924 <__assert_fail@plt+0x5924>
   16e6c:	mov	r2, r7
   16e70:	ldrb	r3, [r2, #1]!
   16e74:	sub	r1, r3, #48	; 0x30
   16e78:	cmp	r1, #9
   16e7c:	bls	16e70 <__assert_fail@plt+0x5e70>
   16e80:	cmp	r3, #36	; 0x24
   16e84:	mvnne	r8, #0
   16e88:	bne	169f4 <__assert_fail@plt+0x59f4>
   16e8c:	mov	r2, #0
   16e90:	b	16e9c <__assert_fail@plt+0x5e9c>
   16e94:	cmp	ip, #9
   16e98:	bhi	174a8 <__assert_fail@plt+0x64a8>
   16e9c:	ldr	r3, [pc, #1752]	; 1757c <__assert_fail@plt+0x657c>
   16ea0:	mov	r1, r5
   16ea4:	cmp	r2, r3
   16ea8:	addls	r2, r2, r2, lsl #2
   16eac:	mvnhi	r3, #0
   16eb0:	lslls	r3, r2, #1
   16eb4:	ldrb	ip, [r5, #1]!
   16eb8:	adds	r3, r0, r3
   16ebc:	mov	r2, r3
   16ec0:	sub	r0, ip, #48	; 0x30
   16ec4:	uxtb	ip, r0
   16ec8:	bcc	16e94 <__assert_fail@plt+0x5e94>
   16ecc:	cmp	ip, #9
   16ed0:	mvn	r3, #0
   16ed4:	mov	r1, r5
   16ed8:	bls	16eb4 <__assert_fail@plt+0x5eb4>
   16edc:	mov	sl, fp
   16ee0:	ldr	fp, [sp, #4]
   16ee4:	ldr	r3, [sl, #4]
   16ee8:	ldr	r2, [sp, #12]
   16eec:	cmp	r2, r3
   16ef0:	beq	16efc <__assert_fail@plt+0x5efc>
   16ef4:	mov	r0, r3
   16ef8:	bl	10da8 <free@plt>
   16efc:	ldr	r0, [fp, #4]
   16f00:	ldr	r3, [sp, #36]	; 0x24
   16f04:	cmp	r3, r0
   16f08:	beq	16f10 <__assert_fail@plt+0x5f10>
   16f0c:	bl	10da8 <free@plt>
   16f10:	bl	10f1c <__errno_location@plt>
   16f14:	mov	r3, #22
   16f18:	mvn	r1, #0
   16f1c:	str	r3, [r0]
   16f20:	b	16958 <__assert_fail@plt+0x5958>
   16f24:	str	r5, [r6, #24]
   16f28:	ldrb	r3, [r5, #1]
   16f2c:	sub	r3, r3, #48	; 0x30
   16f30:	cmp	r3, #9
   16f34:	bhi	174f0 <__assert_fail@plt+0x64f0>
   16f38:	ldrb	r3, [r7, #1]!
   16f3c:	sub	r3, r3, #48	; 0x30
   16f40:	cmp	r3, #9
   16f44:	bls	16f38 <__assert_fail@plt+0x5f38>
   16f48:	sub	r3, r7, r5
   16f4c:	mov	r5, r7
   16f50:	ldr	r2, [sp, #28]
   16f54:	str	r7, [r6, #28]
   16f58:	cmp	r2, r3
   16f5c:	movcs	r3, r2
   16f60:	ldrb	r4, [r7]
   16f64:	str	r3, [sp, #28]
   16f68:	b	16a7c <__assert_fail@plt+0x5a7c>
   16f6c:	ldr	r3, [sp, #8]
   16f70:	lsl	r3, r3, #1
   16f74:	cmp	r3, r4
   16f78:	str	r3, [sp, #8]
   16f7c:	addls	r3, r4, #1
   16f80:	strls	r3, [sp, #8]
   16f84:	ldr	r3, [sp, #8]
   16f88:	cmn	r3, #-268435455	; 0xf0000001
   16f8c:	bhi	17560 <__assert_fail@plt+0x6560>
   16f90:	ldr	r2, [sp, #12]
   16f94:	lsl	r1, r3, #4
   16f98:	cmp	r2, sl
   16f9c:	beq	172f8 <__assert_fail@plt+0x62f8>
   16fa0:	mov	r0, sl
   16fa4:	bl	10e14 <realloc@plt>
   16fa8:	ldr	r3, [fp, #4]
   16fac:	subs	sl, r0, #0
   16fb0:	beq	17564 <__assert_fail@plt+0x6564>
   16fb4:	ldr	r2, [sp, #12]
   16fb8:	cmp	r2, r3
   16fbc:	ldr	r2, [fp]
   16fc0:	beq	1756c <__assert_fail@plt+0x656c>
   16fc4:	str	sl, [fp, #4]
   16fc8:	b	16c88 <__assert_fail@plt+0x5c88>
   16fcc:	mov	r0, r1
   16fd0:	bl	10e98 <malloc@plt>
   16fd4:	subs	r3, r0, #0
   16fd8:	beq	173f4 <__assert_fail@plt+0x63f4>
   16fdc:	add	r2, r4, r4, lsl #2
   16fe0:	mov	r0, r3
   16fe4:	add	r2, r4, r2, lsl #1
   16fe8:	mov	r1, r6
   16fec:	lsl	r2, r2, #2
   16ff0:	bl	10dc0 <memcpy@plt>
   16ff4:	ldr	r2, [sp, #4]
   16ff8:	ldr	r4, [r2]
   16ffc:	mov	r3, r0
   17000:	b	16e5c <__assert_fail@plt+0x5e5c>
   17004:	ldr	r3, [sp, #32]
   17008:	cmn	r3, #1
   1700c:	str	r3, [r6, #20]
   17010:	add	r3, r3, #1
   17014:	beq	16edc <__assert_fail@plt+0x5edc>
   17018:	ldr	r4, [sp, #32]
   1701c:	str	r3, [sp, #32]
   17020:	b	16c74 <__assert_fail@plt+0x5c74>
   17024:	cmp	r3, #15
   17028:	movgt	r3, #12
   1702c:	strgt	r3, [sp, #20]
   17030:	bgt	16d7c <__assert_fail@plt+0x5d7c>
   17034:	tst	r3, #4
   17038:	movne	r3, #12
   1703c:	moveq	r3, #11
   17040:	str	r3, [sp, #20]
   17044:	b	16d7c <__assert_fail@plt+0x5d7c>
   17048:	mov	r1, r7
   1704c:	ldrb	r2, [r1, #1]!
   17050:	sub	r0, r2, #48	; 0x30
   17054:	cmp	r0, #9
   17058:	bls	1704c <__assert_fail@plt+0x604c>
   1705c:	cmp	r2, #36	; 0x24
   17060:	bne	16c68 <__assert_fail@plt+0x5c68>
   17064:	mov	r1, #0
   17068:	b	17074 <__assert_fail@plt+0x6074>
   1706c:	cmp	ip, #9
   17070:	bhi	17530 <__assert_fail@plt+0x6530>
   17074:	ldr	r2, [pc, #1280]	; 1757c <__assert_fail@plt+0x657c>
   17078:	mov	r0, r7
   1707c:	cmp	r1, r2
   17080:	addls	r1, r1, r1, lsl #2
   17084:	mvnhi	r2, #0
   17088:	lslls	r2, r1, #1
   1708c:	ldrb	ip, [r7, #1]!
   17090:	adds	r2, r3, r2
   17094:	mov	r1, r2
   17098:	sub	r3, ip, #48	; 0x30
   1709c:	uxtb	ip, r3
   170a0:	bcc	1706c <__assert_fail@plt+0x606c>
   170a4:	cmp	ip, #9
   170a8:	mvn	r2, #0
   170ac:	mov	r0, r7
   170b0:	bls	1708c <__assert_fail@plt+0x608c>
   170b4:	b	16edc <__assert_fail@plt+0x5edc>
   170b8:	cmp	r3, #7
   170bc:	movgt	r3, #16
   170c0:	movle	r3, #15
   170c4:	str	r3, [sp, #20]
   170c8:	b	16d7c <__assert_fail@plt+0x5d7c>
   170cc:	cmp	r3, #15
   170d0:	bgt	173c8 <__assert_fail@plt+0x63c8>
   170d4:	tst	r3, #4
   170d8:	bne	173c8 <__assert_fail@plt+0x63c8>
   170dc:	cmp	r3, #7
   170e0:	movgt	r3, #7
   170e4:	strgt	r3, [sp, #20]
   170e8:	bgt	16d7c <__assert_fail@plt+0x5d7c>
   170ec:	tst	r3, #2
   170f0:	movne	r3, #1
   170f4:	strne	r3, [sp, #20]
   170f8:	bne	16d7c <__assert_fail@plt+0x5d7c>
   170fc:	tst	r3, #1
   17100:	movne	r3, #3
   17104:	moveq	r3, #5
   17108:	str	r3, [sp, #20]
   1710c:	b	16d7c <__assert_fail@plt+0x5d7c>
   17110:	cmp	r3, #7
   17114:	movgt	r3, #14
   17118:	movle	r3, #13
   1711c:	str	r3, [sp, #20]
   17120:	b	16d7c <__assert_fail@plt+0x5d7c>
   17124:	cmp	r3, #15
   17128:	bgt	173bc <__assert_fail@plt+0x63bc>
   1712c:	tst	r3, #4
   17130:	bne	173bc <__assert_fail@plt+0x63bc>
   17134:	cmp	r3, #7
   17138:	movgt	r3, #8
   1713c:	strgt	r3, [sp, #20]
   17140:	bgt	16d7c <__assert_fail@plt+0x5d7c>
   17144:	tst	r3, #2
   17148:	movne	r3, #2
   1714c:	strne	r3, [sp, #20]
   17150:	bne	16d7c <__assert_fail@plt+0x5d7c>
   17154:	tst	r3, #1
   17158:	movne	r3, #4
   1715c:	moveq	r3, #6
   17160:	str	r3, [sp, #20]
   17164:	b	16d7c <__assert_fail@plt+0x5d7c>
   17168:	mov	r3, #16
   1716c:	str	r3, [sp, #20]
   17170:	mov	r4, #115	; 0x73
   17174:	b	16d7c <__assert_fail@plt+0x5d7c>
   17178:	mov	r3, #17
   1717c:	str	r3, [sp, #20]
   17180:	b	16d7c <__assert_fail@plt+0x5d7c>
   17184:	cmp	r3, #15
   17188:	bgt	173b0 <__assert_fail@plt+0x63b0>
   1718c:	tst	r3, #4
   17190:	bne	173b0 <__assert_fail@plt+0x63b0>
   17194:	cmp	r3, #7
   17198:	movgt	r3, #21
   1719c:	strgt	r3, [sp, #20]
   171a0:	bgt	16d7c <__assert_fail@plt+0x5d7c>
   171a4:	tst	r3, #2
   171a8:	movne	r3, #18
   171ac:	strne	r3, [sp, #20]
   171b0:	bne	16d7c <__assert_fail@plt+0x5d7c>
   171b4:	tst	r3, #1
   171b8:	movne	r3, #19
   171bc:	moveq	r3, #20
   171c0:	str	r3, [sp, #20]
   171c4:	b	16d7c <__assert_fail@plt+0x5d7c>
   171c8:	ldr	r2, [sp, #20]
   171cc:	cmp	r3, r2
   171d0:	beq	16dd0 <__assert_fail@plt+0x5dd0>
   171d4:	mov	r3, sl
   171d8:	ldr	fp, [sp, #4]
   171dc:	b	16ee8 <__assert_fail@plt+0x5ee8>
   171e0:	ldr	r3, [sp, #8]
   171e4:	lsl	r3, r3, #1
   171e8:	cmp	r3, r8
   171ec:	str	r3, [sp, #8]
   171f0:	addls	r3, r8, #1
   171f4:	strls	r3, [sp, #8]
   171f8:	ldr	r3, [sp, #8]
   171fc:	cmn	r3, #-268435455	; 0xf0000001
   17200:	bhi	17560 <__assert_fail@plt+0x6560>
   17204:	ldr	r2, [sp, #12]
   17208:	lsl	r1, r3, #4
   1720c:	cmp	r2, sl
   17210:	beq	172cc <__assert_fail@plt+0x62cc>
   17214:	mov	r0, sl
   17218:	bl	10e14 <realloc@plt>
   1721c:	subs	sl, r0, #0
   17220:	beq	17514 <__assert_fail@plt+0x6514>
   17224:	ldr	r3, [fp, #4]
   17228:	ldr	r2, [sp, #12]
   1722c:	cmp	r2, r3
   17230:	beq	17554 <__assert_fail@plt+0x6554>
   17234:	str	sl, [fp, #4]
   17238:	b	16d98 <__assert_fail@plt+0x5d98>
   1723c:	ldr	r3, [sp, #32]
   17240:	cmn	r3, #1
   17244:	str	r3, [r6, #40]	; 0x28
   17248:	add	r3, r3, #1
   1724c:	beq	16edc <__assert_fail@plt+0x5edc>
   17250:	ldr	r8, [sp, #32]
   17254:	str	r3, [sp, #32]
   17258:	b	16d88 <__assert_fail@plt+0x5d88>
   1725c:	str	r5, [r6, #12]
   17260:	ldrb	r3, [r5]
   17264:	sub	r3, r3, #48	; 0x30
   17268:	cmp	r3, #9
   1726c:	bhi	172ac <__assert_fail@plt+0x62ac>
   17270:	mov	r7, r5
   17274:	b	1727c <__assert_fail@plt+0x627c>
   17278:	mov	r7, r2
   1727c:	ldrb	r3, [r7, #1]
   17280:	add	r2, r7, #1
   17284:	sub	r3, r3, #48	; 0x30
   17288:	cmp	r3, #9
   1728c:	bls	17278 <__assert_fail@plt+0x6278>
   17290:	ldr	r3, [sp, #16]
   17294:	sub	r5, r2, r5
   17298:	cmp	r3, r5
   1729c:	movcc	r3, r5
   172a0:	add	r7, r7, #2
   172a4:	mov	r5, r2
   172a8:	str	r3, [sp, #16]
   172ac:	str	r5, [r6, #16]
   172b0:	ldrb	r4, [r5]
   172b4:	b	16a74 <__assert_fail@plt+0x5a74>
   172b8:	cmp	r3, #5
   172bc:	bne	171d4 <__assert_fail@plt+0x61d4>
   172c0:	mov	r5, r7
   172c4:	ldrb	r4, [r7], #1
   172c8:	b	16a74 <__assert_fail@plt+0x5a74>
   172cc:	mov	r0, r1
   172d0:	bl	10e98 <malloc@plt>
   172d4:	subs	r3, r0, #0
   172d8:	beq	17308 <__assert_fail@plt+0x6308>
   172dc:	ldr	r2, [fp]
   172e0:	mov	r1, sl
   172e4:	mov	r0, r3
   172e8:	lsl	r2, r2, #4
   172ec:	bl	10dc0 <memcpy@plt>
   172f0:	mov	sl, r0
   172f4:	b	17234 <__assert_fail@plt+0x6234>
   172f8:	mov	r0, r1
   172fc:	bl	10e98 <malloc@plt>
   17300:	subs	r3, r0, #0
   17304:	bne	173d4 <__assert_fail@plt+0x63d4>
   17308:	ldr	fp, [sp, #4]
   1730c:	ldr	r0, [fp, #4]
   17310:	ldr	r3, [sp, #36]	; 0x24
   17314:	cmp	r3, r0
   17318:	beq	17320 <__assert_fail@plt+0x6320>
   1731c:	bl	10da8 <free@plt>
   17320:	bl	10f1c <__errno_location@plt>
   17324:	mov	r3, #12
   17328:	mvn	r1, #0
   1732c:	str	r3, [r0]
   17330:	mov	r0, r1
   17334:	add	sp, sp, #44	; 0x2c
   17338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1733c:	ldr	r3, [sp, #8]
   17340:	lsl	r3, r3, #1
   17344:	cmp	r3, r4
   17348:	str	r3, [sp, #8]
   1734c:	addls	r3, r4, #1
   17350:	strls	r3, [sp, #8]
   17354:	ldr	r3, [sp, #8]
   17358:	cmn	r3, #-268435455	; 0xf0000001
   1735c:	bhi	17560 <__assert_fail@plt+0x6560>
   17360:	ldr	r2, [sp, #12]
   17364:	lsl	r1, r3, #4
   17368:	cmp	r2, sl
   1736c:	beq	174c0 <__assert_fail@plt+0x64c0>
   17370:	mov	r0, sl
   17374:	bl	10e14 <realloc@plt>
   17378:	ldr	r3, [fp, #4]
   1737c:	subs	sl, r0, #0
   17380:	beq	17564 <__assert_fail@plt+0x6564>
   17384:	ldr	r2, [sp, #12]
   17388:	cmp	r2, r3
   1738c:	ldr	r2, [fp]
   17390:	beq	17548 <__assert_fail@plt+0x6548>
   17394:	str	sl, [fp, #4]
   17398:	b	16d30 <__assert_fail@plt+0x5d30>
   1739c:	cmp	r3, #5
   173a0:	bne	171d4 <__assert_fail@plt+0x61d4>
   173a4:	ldrb	r4, [r7]
   173a8:	mov	r5, r7
   173ac:	b	16a7c <__assert_fail@plt+0x5a7c>
   173b0:	mov	r3, #22
   173b4:	str	r3, [sp, #20]
   173b8:	b	16d7c <__assert_fail@plt+0x5d7c>
   173bc:	mov	r3, #10
   173c0:	str	r3, [sp, #20]
   173c4:	b	16d7c <__assert_fail@plt+0x5d7c>
   173c8:	mov	r3, #9
   173cc:	str	r3, [sp, #20]
   173d0:	b	16d7c <__assert_fail@plt+0x5d7c>
   173d4:	ldr	r2, [fp]
   173d8:	lsl	r2, r2, #4
   173dc:	mov	r1, sl
   173e0:	mov	r0, r3
   173e4:	bl	10dc0 <memcpy@plt>
   173e8:	ldr	r2, [fp]
   173ec:	mov	sl, r0
   173f0:	b	16fc4 <__assert_fail@plt+0x5fc4>
   173f4:	mov	sl, fp
   173f8:	ldr	r2, [sp, #12]
   173fc:	ldr	r3, [sl, #4]
   17400:	ldr	fp, [sp, #4]
   17404:	cmp	r2, r3
   17408:	beq	17320 <__assert_fail@plt+0x6320>
   1740c:	mov	r0, r3
   17410:	bl	10da8 <free@plt>
   17414:	b	1730c <__assert_fail@plt+0x630c>
   17418:	ldr	r3, [sp, #32]
   1741c:	cmn	r3, #1
   17420:	str	r3, [r6, #32]
   17424:	add	r3, r3, #1
   17428:	beq	16edc <__assert_fail@plt+0x5edc>
   1742c:	ldr	r4, [sp, #32]
   17430:	str	r3, [sp, #32]
   17434:	b	16d1c <__assert_fail@plt+0x5d1c>
   17438:	mov	r2, r7
   1743c:	ldrb	r3, [r2, #1]!
   17440:	sub	r0, r3, #48	; 0x30
   17444:	cmp	r0, #9
   17448:	bls	1743c <__assert_fail@plt+0x643c>
   1744c:	cmp	r3, #36	; 0x24
   17450:	bne	16d10 <__assert_fail@plt+0x5d10>
   17454:	mov	r2, #0
   17458:	b	17464 <__assert_fail@plt+0x6464>
   1745c:	cmp	ip, #9
   17460:	bhi	174fc <__assert_fail@plt+0x64fc>
   17464:	ldr	r3, [pc, #272]	; 1757c <__assert_fail@plt+0x657c>
   17468:	mov	r0, r7
   1746c:	cmp	r2, r3
   17470:	addls	r2, r2, r2, lsl #2
   17474:	mvnhi	r3, #0
   17478:	lslls	r3, r2, #1
   1747c:	ldrb	ip, [r7, #1]!
   17480:	adds	r3, r1, r3
   17484:	mov	r2, r3
   17488:	sub	r1, ip, #48	; 0x30
   1748c:	uxtb	ip, r1
   17490:	bcc	1745c <__assert_fail@plt+0x645c>
   17494:	cmp	ip, #9
   17498:	mvn	r3, #0
   1749c:	mov	r0, r7
   174a0:	bls	1747c <__assert_fail@plt+0x647c>
   174a4:	b	16edc <__assert_fail@plt+0x5edc>
   174a8:	sub	r8, r3, #1
   174ac:	cmn	r8, #3
   174b0:	bhi	16edc <__assert_fail@plt+0x5edc>
   174b4:	add	r5, r1, #2
   174b8:	ldrb	r4, [r1, #2]
   174bc:	b	169f4 <__assert_fail@plt+0x59f4>
   174c0:	mov	r0, r1
   174c4:	bl	10e98 <malloc@plt>
   174c8:	subs	r3, r0, #0
   174cc:	beq	17308 <__assert_fail@plt+0x6308>
   174d0:	ldr	r2, [fp]
   174d4:	lsl	r2, r2, #4
   174d8:	mov	r1, sl
   174dc:	mov	r0, r3
   174e0:	bl	10dc0 <memcpy@plt>
   174e4:	ldr	r2, [fp]
   174e8:	mov	sl, r0
   174ec:	b	17394 <__assert_fail@plt+0x6394>
   174f0:	mov	r5, r7
   174f4:	mov	r3, #1
   174f8:	b	16f50 <__assert_fail@plt+0x5f50>
   174fc:	sub	r4, r3, #1
   17500:	cmn	r4, #3
   17504:	bhi	16edc <__assert_fail@plt+0x5edc>
   17508:	str	r4, [r6, #32]
   1750c:	add	r7, r0, #2
   17510:	b	16d1c <__assert_fail@plt+0x5d1c>
   17514:	mov	sl, fp
   17518:	ldr	fp, [sp, #4]
   1751c:	ldr	r3, [sl, #4]
   17520:	ldr	r2, [sp, #12]
   17524:	cmp	r2, r3
   17528:	bne	1740c <__assert_fail@plt+0x640c>
   1752c:	b	1730c <__assert_fail@plt+0x630c>
   17530:	sub	r4, r2, #1
   17534:	cmn	r4, #3
   17538:	bhi	16edc <__assert_fail@plt+0x5edc>
   1753c:	str	r4, [r6, #20]
   17540:	add	r7, r0, #2
   17544:	b	16c74 <__assert_fail@plt+0x5c74>
   17548:	mov	r3, sl
   1754c:	ldr	sl, [sp, #12]
   17550:	b	174d4 <__assert_fail@plt+0x64d4>
   17554:	mov	r3, sl
   17558:	mov	sl, r2
   1755c:	b	172dc <__assert_fail@plt+0x62dc>
   17560:	mov	r3, sl
   17564:	ldr	fp, [sp, #4]
   17568:	b	17520 <__assert_fail@plt+0x6520>
   1756c:	mov	r3, sl
   17570:	ldr	sl, [sp, #12]
   17574:	b	173d8 <__assert_fail@plt+0x63d8>
   17578:	ldrbeq	r7, [r1, #1117]	; 0x45d
   1757c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   17580:	subs	r2, r1, #1
   17584:	bxeq	lr
   17588:	bcc	17760 <__assert_fail@plt+0x6760>
   1758c:	cmp	r0, r1
   17590:	bls	17744 <__assert_fail@plt+0x6744>
   17594:	tst	r1, r2
   17598:	beq	17750 <__assert_fail@plt+0x6750>
   1759c:	clz	r3, r0
   175a0:	clz	r2, r1
   175a4:	sub	r3, r2, r3
   175a8:	rsbs	r3, r3, #31
   175ac:	addne	r3, r3, r3, lsl #1
   175b0:	mov	r2, #0
   175b4:	addne	pc, pc, r3, lsl #2
   175b8:	nop			; (mov r0, r0)
   175bc:	cmp	r0, r1, lsl #31
   175c0:	adc	r2, r2, r2
   175c4:	subcs	r0, r0, r1, lsl #31
   175c8:	cmp	r0, r1, lsl #30
   175cc:	adc	r2, r2, r2
   175d0:	subcs	r0, r0, r1, lsl #30
   175d4:	cmp	r0, r1, lsl #29
   175d8:	adc	r2, r2, r2
   175dc:	subcs	r0, r0, r1, lsl #29
   175e0:	cmp	r0, r1, lsl #28
   175e4:	adc	r2, r2, r2
   175e8:	subcs	r0, r0, r1, lsl #28
   175ec:	cmp	r0, r1, lsl #27
   175f0:	adc	r2, r2, r2
   175f4:	subcs	r0, r0, r1, lsl #27
   175f8:	cmp	r0, r1, lsl #26
   175fc:	adc	r2, r2, r2
   17600:	subcs	r0, r0, r1, lsl #26
   17604:	cmp	r0, r1, lsl #25
   17608:	adc	r2, r2, r2
   1760c:	subcs	r0, r0, r1, lsl #25
   17610:	cmp	r0, r1, lsl #24
   17614:	adc	r2, r2, r2
   17618:	subcs	r0, r0, r1, lsl #24
   1761c:	cmp	r0, r1, lsl #23
   17620:	adc	r2, r2, r2
   17624:	subcs	r0, r0, r1, lsl #23
   17628:	cmp	r0, r1, lsl #22
   1762c:	adc	r2, r2, r2
   17630:	subcs	r0, r0, r1, lsl #22
   17634:	cmp	r0, r1, lsl #21
   17638:	adc	r2, r2, r2
   1763c:	subcs	r0, r0, r1, lsl #21
   17640:	cmp	r0, r1, lsl #20
   17644:	adc	r2, r2, r2
   17648:	subcs	r0, r0, r1, lsl #20
   1764c:	cmp	r0, r1, lsl #19
   17650:	adc	r2, r2, r2
   17654:	subcs	r0, r0, r1, lsl #19
   17658:	cmp	r0, r1, lsl #18
   1765c:	adc	r2, r2, r2
   17660:	subcs	r0, r0, r1, lsl #18
   17664:	cmp	r0, r1, lsl #17
   17668:	adc	r2, r2, r2
   1766c:	subcs	r0, r0, r1, lsl #17
   17670:	cmp	r0, r1, lsl #16
   17674:	adc	r2, r2, r2
   17678:	subcs	r0, r0, r1, lsl #16
   1767c:	cmp	r0, r1, lsl #15
   17680:	adc	r2, r2, r2
   17684:	subcs	r0, r0, r1, lsl #15
   17688:	cmp	r0, r1, lsl #14
   1768c:	adc	r2, r2, r2
   17690:	subcs	r0, r0, r1, lsl #14
   17694:	cmp	r0, r1, lsl #13
   17698:	adc	r2, r2, r2
   1769c:	subcs	r0, r0, r1, lsl #13
   176a0:	cmp	r0, r1, lsl #12
   176a4:	adc	r2, r2, r2
   176a8:	subcs	r0, r0, r1, lsl #12
   176ac:	cmp	r0, r1, lsl #11
   176b0:	adc	r2, r2, r2
   176b4:	subcs	r0, r0, r1, lsl #11
   176b8:	cmp	r0, r1, lsl #10
   176bc:	adc	r2, r2, r2
   176c0:	subcs	r0, r0, r1, lsl #10
   176c4:	cmp	r0, r1, lsl #9
   176c8:	adc	r2, r2, r2
   176cc:	subcs	r0, r0, r1, lsl #9
   176d0:	cmp	r0, r1, lsl #8
   176d4:	adc	r2, r2, r2
   176d8:	subcs	r0, r0, r1, lsl #8
   176dc:	cmp	r0, r1, lsl #7
   176e0:	adc	r2, r2, r2
   176e4:	subcs	r0, r0, r1, lsl #7
   176e8:	cmp	r0, r1, lsl #6
   176ec:	adc	r2, r2, r2
   176f0:	subcs	r0, r0, r1, lsl #6
   176f4:	cmp	r0, r1, lsl #5
   176f8:	adc	r2, r2, r2
   176fc:	subcs	r0, r0, r1, lsl #5
   17700:	cmp	r0, r1, lsl #4
   17704:	adc	r2, r2, r2
   17708:	subcs	r0, r0, r1, lsl #4
   1770c:	cmp	r0, r1, lsl #3
   17710:	adc	r2, r2, r2
   17714:	subcs	r0, r0, r1, lsl #3
   17718:	cmp	r0, r1, lsl #2
   1771c:	adc	r2, r2, r2
   17720:	subcs	r0, r0, r1, lsl #2
   17724:	cmp	r0, r1, lsl #1
   17728:	adc	r2, r2, r2
   1772c:	subcs	r0, r0, r1, lsl #1
   17730:	cmp	r0, r1
   17734:	adc	r2, r2, r2
   17738:	subcs	r0, r0, r1
   1773c:	mov	r0, r2
   17740:	bx	lr
   17744:	moveq	r0, #1
   17748:	movne	r0, #0
   1774c:	bx	lr
   17750:	clz	r2, r1
   17754:	rsb	r2, r2, #31
   17758:	lsr	r0, r0, r2
   1775c:	bx	lr
   17760:	cmp	r0, #0
   17764:	mvnne	r0, #0
   17768:	b	1778c <__assert_fail@plt+0x678c>
   1776c:	cmp	r1, #0
   17770:	beq	17760 <__assert_fail@plt+0x6760>
   17774:	push	{r0, r1, lr}
   17778:	bl	17580 <__assert_fail@plt+0x6580>
   1777c:	pop	{r1, r2, lr}
   17780:	mul	r3, r2, r0
   17784:	sub	r1, r1, r3
   17788:	bx	lr
   1778c:	push	{r1, lr}
   17790:	mov	r0, #8
   17794:	bl	10d84 <raise@plt>
   17798:	pop	{r1, pc}
   1779c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   177a0:	mov	r7, r0
   177a4:	ldr	r6, [pc, #72]	; 177f4 <__assert_fail@plt+0x67f4>
   177a8:	ldr	r5, [pc, #72]	; 177f8 <__assert_fail@plt+0x67f8>
   177ac:	add	r6, pc, r6
   177b0:	add	r5, pc, r5
   177b4:	sub	r6, r6, r5
   177b8:	mov	r8, r1
   177bc:	mov	r9, r2
   177c0:	bl	10d4c <calloc@plt-0x20>
   177c4:	asrs	r6, r6, #2
   177c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   177cc:	mov	r4, #0
   177d0:	add	r4, r4, #1
   177d4:	ldr	r3, [r5], #4
   177d8:	mov	r2, r9
   177dc:	mov	r1, r8
   177e0:	mov	r0, r7
   177e4:	blx	r3
   177e8:	cmp	r6, r4
   177ec:	bne	177d0 <__assert_fail@plt+0x67d0>
   177f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177f4:	andeq	r1, r1, r0, asr r7
   177f8:	andeq	r1, r1, r8, asr #14
   177fc:	bx	lr
   17800:	ldr	r3, [pc, #12]	; 17814 <__assert_fail@plt+0x6814>
   17804:	mov	r1, #0
   17808:	add	r3, pc, r3
   1780c:	ldr	r2, [r3]
   17810:	b	10f28 <__cxa_atexit@plt>
   17814:	andeq	r1, r1, r4, ror #17

Disassembly of section .fini:

00017818 <.fini>:
   17818:	push	{r3, lr}
   1781c:	pop	{r3, pc}
