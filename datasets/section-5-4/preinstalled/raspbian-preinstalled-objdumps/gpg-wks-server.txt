
raspbian-preinstalled/gpg-wks-server:     file format elf32-littlearm


Disassembly of section .init:

000123f0 <.init>:
   123f0:	push	{r3, lr}
   123f4:	bl	13964 <__assert_fail@plt+0xcc0>
   123f8:	pop	{r3, pc}

Disassembly of section .plt:

000123fc <gcry_xmalloc@plt-0x14>:
   123fc:	push	{lr}		; (str lr, [sp, #-4]!)
   12400:	ldr	lr, [pc, #4]	; 1240c <gcry_xmalloc@plt-0x4>
   12404:	add	lr, pc, lr
   12408:	ldr	pc, [lr, #8]!
   1240c:	andeq	r3, r3, r4, lsl #18

00012410 <gcry_xmalloc@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #208896	; 0x33000
   12418:	ldr	pc, [ip, #2308]!	; 0x904

0001241c <gpgrt_bsprintf@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #208896	; 0x33000
   12424:	ldr	pc, [ip, #2300]!	; 0x8fc

00012428 <calloc@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #208896	; 0x33000
   12430:	ldr	pc, [ip, #2292]!	; 0x8f4

00012434 <strstr@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #208896	; 0x33000
   1243c:	ldr	pc, [ip, #2284]!	; 0x8ec

00012440 <raise@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #208896	; 0x33000
   12448:	ldr	pc, [ip, #2276]!	; 0x8e4

0001244c <gpgrt_funlockfile@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #208896	; 0x33000
   12454:	ldr	pc, [ip, #2268]!	; 0x8dc

00012458 <gcry_malloc@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #208896	; 0x33000
   12460:	ldr	pc, [ip, #2260]!	; 0x8d4

00012464 <gmtime_r@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #208896	; 0x33000
   1246c:	ldr	pc, [ip, #2252]!	; 0x8cc

00012470 <gpgrt_write@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #208896	; 0x33000
   12478:	ldr	pc, [ip, #2244]!	; 0x8c4

0001247c <gpgrt_read_line@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #208896	; 0x33000
   12484:	ldr	pc, [ip, #2236]!	; 0x8bc

00012488 <getpwnam@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #208896	; 0x33000
   12490:	ldr	pc, [ip, #2228]!	; 0x8b4

00012494 <fsync@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #208896	; 0x33000
   1249c:	ldr	pc, [ip, #2220]!	; 0x8ac

000124a0 <iconv_close@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #208896	; 0x33000
   124a8:	ldr	pc, [ip, #2212]!	; 0x8a4

000124ac <iconv@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #208896	; 0x33000
   124b4:	ldr	pc, [ip, #2204]!	; 0x89c

000124b8 <strcmp@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #208896	; 0x33000
   124c0:	ldr	pc, [ip, #2196]!	; 0x894

000124c4 <gpgrt_vfprintf_unlocked@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #208896	; 0x33000
   124cc:	ldr	pc, [ip, #2188]!	; 0x88c

000124d0 <strtol@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #208896	; 0x33000
   124d8:	ldr	pc, [ip, #2180]!	; 0x884

000124dc <gpgrt_set_binary@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #208896	; 0x33000
   124e4:	ldr	pc, [ip, #2172]!	; 0x87c

000124e8 <getpwuid@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #208896	; 0x33000
   124f0:	ldr	pc, [ip, #2164]!	; 0x874

000124f4 <strcspn@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #208896	; 0x33000
   124fc:	ldr	pc, [ip, #2156]!	; 0x86c

00012500 <gpgrt_vfprintf@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #208896	; 0x33000
   12508:	ldr	pc, [ip, #2148]!	; 0x864

0001250c <setrlimit64@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #208896	; 0x33000
   12514:	ldr	pc, [ip, #2140]!	; 0x85c

00012518 <read@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #208896	; 0x33000
   12520:	ldr	pc, [ip, #2132]!	; 0x854

00012524 <mktime@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #208896	; 0x33000
   1252c:	ldr	pc, [ip, #2124]!	; 0x84c

00012530 <fflush@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #208896	; 0x33000
   12538:	ldr	pc, [ip, #2116]!	; 0x844

0001253c <getuid@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #208896	; 0x33000
   12544:	ldr	pc, [ip, #2108]!	; 0x83c

00012548 <sigprocmask@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #208896	; 0x33000
   12550:	ldr	pc, [ip, #2100]!	; 0x834

00012554 <memmove@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #208896	; 0x33000
   1255c:	ldr	pc, [ip, #2092]!	; 0x82c

00012560 <free@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #208896	; 0x33000
   12568:	ldr	pc, [ip, #2084]!	; 0x824

0001256c <_gpgrt_putc_overflow@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #208896	; 0x33000
   12574:	ldr	pc, [ip, #2076]!	; 0x81c

00012578 <nanosleep@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #208896	; 0x33000
   12580:	ldr	pc, [ip, #2068]!	; 0x814

00012584 <gpgrt_fname_get@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #208896	; 0x33000
   1258c:	ldr	pc, [ip, #2060]!	; 0x80c

00012590 <ferror@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #208896	; 0x33000
   12598:	ldr	pc, [ip, #2052]!	; 0x804

0001259c <inet_pton@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #208896	; 0x33000
   125a4:	ldr	pc, [ip, #2044]!	; 0x7fc

000125a8 <_exit@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #208896	; 0x33000
   125b0:	ldr	pc, [ip, #2036]!	; 0x7f4

000125b4 <memcpy@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #208896	; 0x33000
   125bc:	ldr	pc, [ip, #2028]!	; 0x7ec

000125c0 <gcry_sexp_sscan@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #208896	; 0x33000
   125c8:	ldr	pc, [ip, #2020]!	; 0x7e4

000125cc <gpgrt_read@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #208896	; 0x33000
   125d4:	ldr	pc, [ip, #2012]!	; 0x7dc

000125d8 <time@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #208896	; 0x33000
   125e0:	ldr	pc, [ip, #2004]!	; 0x7d4

000125e4 <gcry_free@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #208896	; 0x33000
   125ec:	ldr	pc, [ip, #1996]!	; 0x7cc

000125f0 <memcmp@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #208896	; 0x33000
   125f8:	ldr	pc, [ip, #1988]!	; 0x7c4

000125fc <sleep@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #208896	; 0x33000
   12604:	ldr	pc, [ip, #1980]!	; 0x7bc

00012608 <stpcpy@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #208896	; 0x33000
   12610:	ldr	pc, [ip, #1972]!	; 0x7b4

00012614 <gpgrt_fwrite@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #208896	; 0x33000
   1261c:	ldr	pc, [ip, #1964]!	; 0x7ac

00012620 <dcgettext@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #208896	; 0x33000
   12628:	ldr	pc, [ip, #1956]!	; 0x7a4

0001262c <__stack_chk_fail@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #208896	; 0x33000
   12634:	ldr	pc, [ip, #1948]!	; 0x79c

00012638 <gpgrt_set_alloc_func@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #208896	; 0x33000
   12640:	ldr	pc, [ip, #1940]!	; 0x794

00012644 <sysconf@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #208896	; 0x33000
   1264c:	ldr	pc, [ip, #1932]!	; 0x78c

00012650 <dup2@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #208896	; 0x33000
   12658:	ldr	pc, [ip, #1924]!	; 0x784

0001265c <gpgrt_ferror@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #208896	; 0x33000
   12664:	ldr	pc, [ip, #1916]!	; 0x77c

00012668 <getrlimit64@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #208896	; 0x33000
   12670:	ldr	pc, [ip, #1908]!	; 0x774

00012674 <realloc@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #208896	; 0x33000
   1267c:	ldr	pc, [ip, #1900]!	; 0x76c

00012680 <gpgrt_fflush@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #208896	; 0x33000
   12688:	ldr	pc, [ip, #1892]!	; 0x764

0001268c <gpgrt_ftello@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #208896	; 0x33000
   12694:	ldr	pc, [ip, #1884]!	; 0x75c

00012698 <dup@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #208896	; 0x33000
   126a0:	ldr	pc, [ip, #1876]!	; 0x754

000126a4 <tmpfile64@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #208896	; 0x33000
   126ac:	ldr	pc, [ip, #1868]!	; 0x74c

000126b0 <chdir@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #208896	; 0x33000
   126b8:	ldr	pc, [ip, #1860]!	; 0x744

000126bc <strcasecmp@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #208896	; 0x33000
   126c4:	ldr	pc, [ip, #1852]!	; 0x73c

000126c8 <geteuid@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #208896	; 0x33000
   126d0:	ldr	pc, [ip, #1844]!	; 0x734

000126d4 <gpgrt_fclose_snatch@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #208896	; 0x33000
   126dc:	ldr	pc, [ip, #1836]!	; 0x72c

000126e0 <gpgrt_fputs_unlocked@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #208896	; 0x33000
   126e8:	ldr	pc, [ip, #1828]!	; 0x724

000126ec <gpgrt_fread@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #208896	; 0x33000
   126f4:	ldr	pc, [ip, #1820]!	; 0x71c

000126f8 <__fxstat64@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #208896	; 0x33000
   12700:	ldr	pc, [ip, #1812]!	; 0x714

00012704 <sigaction@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #208896	; 0x33000
   1270c:	ldr	pc, [ip, #1804]!	; 0x70c

00012710 <gpgrt_feof@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #208896	; 0x33000
   12718:	ldr	pc, [ip, #1796]!	; 0x704

0001271c <gpg_err_code_from_errno@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #208896	; 0x33000
   12724:	ldr	pc, [ip, #1788]!	; 0x6fc

00012728 <fwrite@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #208896	; 0x33000
   12730:	ldr	pc, [ip, #1780]!	; 0x6f4

00012734 <lseek64@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #208896	; 0x33000
   1273c:	ldr	pc, [ip, #1772]!	; 0x6ec

00012740 <gcry_check_version@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #208896	; 0x33000
   12748:	ldr	pc, [ip, #1764]!	; 0x6e4

0001274c <waitpid@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #208896	; 0x33000
   12754:	ldr	pc, [ip, #1756]!	; 0x6dc

00012758 <gcry_sexp_sprint@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #208896	; 0x33000
   12760:	ldr	pc, [ip, #1748]!	; 0x6d4

00012764 <strcpy@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #208896	; 0x33000
   1276c:	ldr	pc, [ip, #1740]!	; 0x6cc

00012770 <gpgrt_fputc@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #208896	; 0x33000
   12778:	ldr	pc, [ip, #1732]!	; 0x6c4

0001277c <gpgrt_flockfile@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #208896	; 0x33000
   12784:	ldr	pc, [ip, #1724]!	; 0x6bc

00012788 <gpgrt_fclose@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #208896	; 0x33000
   12790:	ldr	pc, [ip, #1716]!	; 0x6b4

00012794 <gpgrt_setvbuf@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #208896	; 0x33000
   1279c:	ldr	pc, [ip, #1708]!	; 0x6ac

000127a0 <gpgrt_printf@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #208896	; 0x33000
   127a8:	ldr	pc, [ip, #1700]!	; 0x6a4

000127ac <opendir@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #208896	; 0x33000
   127b4:	ldr	pc, [ip, #1692]!	; 0x69c

000127b8 <open64@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #208896	; 0x33000
   127c0:	ldr	pc, [ip, #1684]!	; 0x694

000127c4 <getenv@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #208896	; 0x33000
   127cc:	ldr	pc, [ip, #1676]!	; 0x68c

000127d0 <gcry_malloc_secure@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #208896	; 0x33000
   127d8:	ldr	pc, [ip, #1668]!	; 0x684

000127dc <gpgrt_fdopen@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #208896	; 0x33000
   127e4:	ldr	pc, [ip, #1660]!	; 0x67c

000127e8 <gcry_xrealloc@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #208896	; 0x33000
   127f0:	ldr	pc, [ip, #1652]!	; 0x674

000127f4 <malloc@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #208896	; 0x33000
   127fc:	ldr	pc, [ip, #1644]!	; 0x66c

00012800 <iconv_open@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #208896	; 0x33000
   12808:	ldr	pc, [ip, #1636]!	; 0x664

0001280c <__libc_start_main@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #208896	; 0x33000
   12814:	ldr	pc, [ip, #1628]!	; 0x65c

00012818 <strerror@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #208896	; 0x33000
   12820:	ldr	pc, [ip, #1620]!	; 0x654

00012824 <gpgrt_poll@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #208896	; 0x33000
   1282c:	ldr	pc, [ip, #1612]!	; 0x64c

00012830 <strftime@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #208896	; 0x33000
   12838:	ldr	pc, [ip, #1604]!	; 0x644

0001283c <localtime@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #208896	; 0x33000
   12844:	ldr	pc, [ip, #1596]!	; 0x63c

00012848 <__ctype_tolower_loc@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #208896	; 0x33000
   12850:	ldr	pc, [ip, #1588]!	; 0x634

00012854 <__ctype_toupper_loc@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #208896	; 0x33000
   1285c:	ldr	pc, [ip, #1580]!	; 0x62c

00012860 <__gmon_start__@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #208896	; 0x33000
   12868:	ldr	pc, [ip, #1572]!	; 0x624

0001286c <rename@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #208896	; 0x33000
   12874:	ldr	pc, [ip, #1564]!	; 0x61c

00012878 <kill@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #208896	; 0x33000
   12880:	ldr	pc, [ip, #1556]!	; 0x614

00012884 <__ctype_b_loc@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #208896	; 0x33000
   1288c:	ldr	pc, [ip, #1548]!	; 0x60c

00012890 <_gpgrt_get_std_stream@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #208896	; 0x33000
   12898:	ldr	pc, [ip, #1540]!	; 0x604

0001289c <getcwd@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #208896	; 0x33000
   128a4:	ldr	pc, [ip, #1532]!	; 0x5fc

000128a8 <getpid@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #208896	; 0x33000
   128b0:	ldr	pc, [ip, #1524]!	; 0x5f4

000128b4 <exit@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #208896	; 0x33000
   128bc:	ldr	pc, [ip, #1516]!	; 0x5ec

000128c0 <gpgrt_fprintf_unlocked@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #208896	; 0x33000
   128c8:	ldr	pc, [ip, #1508]!	; 0x5e4

000128cc <strtoul@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #208896	; 0x33000
   128d4:	ldr	pc, [ip, #1500]!	; 0x5dc

000128d8 <strlen@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #208896	; 0x33000
   128e0:	ldr	pc, [ip, #1492]!	; 0x5d4

000128e4 <inotify_init@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #208896	; 0x33000
   128ec:	ldr	pc, [ip, #1484]!	; 0x5cc

000128f0 <setsid@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #208896	; 0x33000
   128f8:	ldr	pc, [ip, #1476]!	; 0x5c4

000128fc <strchr@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #208896	; 0x33000
   12904:	ldr	pc, [ip, #1468]!	; 0x5bc

00012908 <setenv@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #208896	; 0x33000
   12910:	ldr	pc, [ip, #1460]!	; 0x5b4

00012914 <gpg_err_code_from_syserror@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #208896	; 0x33000
   1291c:	ldr	pc, [ip, #1452]!	; 0x5ac

00012920 <gpgrt_fopenmem@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #208896	; 0x33000
   12928:	ldr	pc, [ip, #1444]!	; 0x5a4

0001292c <gpgrt_fgets@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #208896	; 0x33000
   12934:	ldr	pc, [ip, #1436]!	; 0x59c

00012938 <execv@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #208896	; 0x33000
   12940:	ldr	pc, [ip, #1428]!	; 0x594

00012944 <__open64_2@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #208896	; 0x33000
   1294c:	ldr	pc, [ip, #1420]!	; 0x58c

00012950 <sigfillset@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #208896	; 0x33000
   12958:	ldr	pc, [ip, #1412]!	; 0x584

0001295c <inotify_add_watch@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #208896	; 0x33000
   12964:	ldr	pc, [ip, #1404]!	; 0x57c

00012968 <__errno_location@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #208896	; 0x33000
   12970:	ldr	pc, [ip, #1396]!	; 0x574

00012974 <__strcat_chk@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #208896	; 0x33000
   1297c:	ldr	pc, [ip, #1388]!	; 0x56c

00012980 <strncasecmp@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #208896	; 0x33000
   12988:	ldr	pc, [ip, #1380]!	; 0x564

0001298c <__sprintf_chk@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #208896	; 0x33000
   12994:	ldr	pc, [ip, #1372]!	; 0x55c

00012998 <__cxa_atexit@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #208896	; 0x33000
   129a0:	ldr	pc, [ip, #1364]!	; 0x554

000129a4 <mkdir@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #208896	; 0x33000
   129ac:	ldr	pc, [ip, #1356]!	; 0x54c

000129b0 <memset@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #208896	; 0x33000
   129b8:	ldr	pc, [ip, #1348]!	; 0x544

000129bc <gcry_calloc@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #208896	; 0x33000
   129c4:	ldr	pc, [ip, #1340]!	; 0x53c

000129c8 <strncpy@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #208896	; 0x33000
   129d0:	ldr	pc, [ip, #1332]!	; 0x534

000129d4 <gpgrt_vasprintf@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #208896	; 0x33000
   129dc:	ldr	pc, [ip, #1324]!	; 0x52c

000129e0 <gcry_cipher_algo_name@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #208896	; 0x33000
   129e8:	ldr	pc, [ip, #1316]!	; 0x524

000129ec <gmtime@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #208896	; 0x33000
   129f4:	ldr	pc, [ip, #1308]!	; 0x51c

000129f8 <gpgrt_write_sanitized@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #208896	; 0x33000
   12a00:	ldr	pc, [ip, #1300]!	; 0x514

00012a04 <gpgrt_fopen@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #208896	; 0x33000
   12a0c:	ldr	pc, [ip, #1292]!	; 0x50c

00012a10 <write@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #208896	; 0x33000
   12a18:	ldr	pc, [ip, #1284]!	; 0x504

00012a1c <gpgrt_fgetc@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #208896	; 0x33000
   12a24:	ldr	pc, [ip, #1276]!	; 0x4fc

00012a28 <difftime@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #208896	; 0x33000
   12a30:	ldr	pc, [ip, #1268]!	; 0x4f4

00012a34 <__fprintf_chk@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #208896	; 0x33000
   12a3c:	ldr	pc, [ip, #1260]!	; 0x4ec

00012a40 <gcry_xstrdup@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #208896	; 0x33000
   12a48:	ldr	pc, [ip, #1252]!	; 0x4e4

00012a4c <access@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #208896	; 0x33000
   12a54:	ldr	pc, [ip, #1244]!	; 0x4dc

00012a58 <gcry_realloc@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #208896	; 0x33000
   12a60:	ldr	pc, [ip, #1236]!	; 0x4d4

00012a64 <gpgrt_fputs@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #208896	; 0x33000
   12a6c:	ldr	pc, [ip, #1228]!	; 0x4cc

00012a70 <pipe@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #208896	; 0x33000
   12a78:	ldr	pc, [ip, #1220]!	; 0x4c4

00012a7c <gpgrt_snprintf@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #208896	; 0x33000
   12a84:	ldr	pc, [ip, #1212]!	; 0x4bc

00012a88 <gpgrt_getline@plt>:
   12a88:	add	ip, pc, #0, 12
   12a8c:	add	ip, ip, #208896	; 0x33000
   12a90:	ldr	pc, [ip, #1204]!	; 0x4b4

00012a94 <fcntl64@plt>:
   12a94:	add	ip, pc, #0, 12
   12a98:	add	ip, ip, #208896	; 0x33000
   12a9c:	ldr	pc, [ip, #1196]!	; 0x4ac

00012aa0 <gcry_md_hash_buffer@plt>:
   12aa0:	add	ip, pc, #0, 12
   12aa4:	add	ip, ip, #208896	; 0x33000
   12aa8:	ldr	pc, [ip, #1188]!	; 0x4a4

00012aac <sigemptyset@plt>:
   12aac:	add	ip, pc, #0, 12
   12ab0:	add	ip, ip, #208896	; 0x33000
   12ab4:	ldr	pc, [ip, #1180]!	; 0x49c

00012ab8 <fork@plt>:
   12ab8:	add	ip, pc, #0, 12
   12abc:	add	ip, ip, #208896	; 0x33000
   12ac0:	ldr	pc, [ip, #1172]!	; 0x494

00012ac4 <putenv@plt>:
   12ac4:	add	ip, pc, #0, 12
   12ac8:	add	ip, ip, #208896	; 0x33000
   12acc:	ldr	pc, [ip, #1164]!	; 0x48c

00012ad0 <__explicit_bzero_chk@plt>:
   12ad0:	add	ip, pc, #0, 12
   12ad4:	add	ip, ip, #208896	; 0x33000
   12ad8:	ldr	pc, [ip, #1156]!	; 0x484

00012adc <strrchr@plt>:
   12adc:	add	ip, pc, #0, 12
   12ae0:	add	ip, ip, #208896	; 0x33000
   12ae4:	ldr	pc, [ip, #1148]!	; 0x47c

00012ae8 <gcry_set_outofcore_handler@plt>:
   12ae8:	add	ip, pc, #0, 12
   12aec:	add	ip, ip, #208896	; 0x33000
   12af0:	ldr	pc, [ip, #1140]!	; 0x474

00012af4 <nl_langinfo@plt>:
   12af4:	add	ip, pc, #0, 12
   12af8:	add	ip, ip, #208896	; 0x33000
   12afc:	ldr	pc, [ip, #1132]!	; 0x46c

00012b00 <gpgrt_free@plt>:
   12b00:	add	ip, pc, #0, 12
   12b04:	add	ip, ip, #208896	; 0x33000
   12b08:	ldr	pc, [ip, #1124]!	; 0x464

00012b0c <gpg_err_set_errno@plt>:
   12b0c:	add	ip, pc, #0, 12
   12b10:	add	ip, ip, #208896	; 0x33000
   12b14:	ldr	pc, [ip, #1116]!	; 0x45c

00012b18 <gpgrt_fseek@plt>:
   12b18:	add	ip, pc, #0, 12
   12b1c:	add	ip, ip, #208896	; 0x33000
   12b20:	ldr	pc, [ip, #1108]!	; 0x454

00012b24 <readdir64@plt>:
   12b24:	add	ip, pc, #0, 12
   12b28:	add	ip, ip, #208896	; 0x33000
   12b2c:	ldr	pc, [ip, #1100]!	; 0x44c

00012b30 <timegm@plt>:
   12b30:	add	ip, pc, #0, 12
   12b34:	add	ip, ip, #208896	; 0x33000
   12b38:	ldr	pc, [ip, #1092]!	; 0x444

00012b3c <gpg_strerror@plt>:
   12b3c:	add	ip, pc, #0, 12
   12b40:	add	ip, ip, #208896	; 0x33000
   12b44:	ldr	pc, [ip, #1084]!	; 0x43c

00012b48 <gpgrt_fopencookie@plt>:
   12b48:	add	ip, pc, #0, 12
   12b4c:	add	ip, ip, #208896	; 0x33000
   12b50:	ldr	pc, [ip, #1076]!	; 0x434

00012b54 <putc@plt>:
   12b54:	add	ip, pc, #0, 12
   12b58:	add	ip, ip, #208896	; 0x33000
   12b5c:	ldr	pc, [ip, #1068]!	; 0x42c

00012b60 <getsockname@plt>:
   12b60:	add	ip, pc, #0, 12
   12b64:	add	ip, ip, #208896	; 0x33000
   12b68:	ldr	pc, [ip, #1060]!	; 0x424

00012b6c <gpg_err_init@plt>:
   12b6c:	add	ip, pc, #0, 12
   12b70:	add	ip, ip, #208896	; 0x33000
   12b74:	ldr	pc, [ip, #1052]!	; 0x41c

00012b78 <remove@plt>:
   12b78:	add	ip, pc, #0, 12
   12b7c:	add	ip, ip, #208896	; 0x33000
   12b80:	ldr	pc, [ip, #1044]!	; 0x414

00012b84 <gcry_create_nonce@plt>:
   12b84:	add	ip, pc, #0, 12
   12b88:	add	ip, ip, #208896	; 0x33000
   12b8c:	ldr	pc, [ip, #1036]!	; 0x40c

00012b90 <gcry_control@plt>:
   12b90:	add	ip, pc, #0, 12
   12b94:	add	ip, ip, #208896	; 0x33000
   12b98:	ldr	pc, [ip, #1028]!	; 0x404

00012b9c <strpbrk@plt>:
   12b9c:	add	ip, pc, #0, 12
   12ba0:	add	ip, ip, #208896	; 0x33000
   12ba4:	ldr	pc, [ip, #1020]!	; 0x3fc

00012ba8 <socket@plt>:
   12ba8:	add	ip, pc, #0, 12
   12bac:	add	ip, ip, #208896	; 0x33000
   12bb0:	ldr	pc, [ip, #1012]!	; 0x3f4

00012bb4 <gpgrt_rewind@plt>:
   12bb4:	add	ip, pc, #0, 12
   12bb8:	add	ip, ip, #208896	; 0x33000
   12bbc:	ldr	pc, [ip, #1004]!	; 0x3ec

00012bc0 <gpgrt_fprintf@plt>:
   12bc0:	add	ip, pc, #0, 12
   12bc4:	add	ip, ip, #208896	; 0x33000
   12bc8:	ldr	pc, [ip, #996]!	; 0x3e4

00012bcc <gcry_xcalloc@plt>:
   12bcc:	add	ip, pc, #0, 12
   12bd0:	add	ip, ip, #208896	; 0x33000
   12bd4:	ldr	pc, [ip, #988]!	; 0x3dc

00012bd8 <gcry_set_log_handler@plt>:
   12bd8:	add	ip, pc, #0, 12
   12bdc:	add	ip, ip, #208896	; 0x33000
   12be0:	ldr	pc, [ip, #980]!	; 0x3d4

00012be4 <gcry_set_fatalerror_handler@plt>:
   12be4:	add	ip, pc, #0, 12
   12be8:	add	ip, ip, #208896	; 0x33000
   12bec:	ldr	pc, [ip, #972]!	; 0x3cc

00012bf0 <chmod@plt>:
   12bf0:	add	ip, pc, #0, 12
   12bf4:	add	ip, ip, #208896	; 0x33000
   12bf8:	ldr	pc, [ip, #964]!	; 0x3c4

00012bfc <__xstat64@plt>:
   12bfc:	add	ip, pc, #0, 12
   12c00:	add	ip, ip, #208896	; 0x33000
   12c04:	ldr	pc, [ip, #956]!	; 0x3bc

00012c08 <isatty@plt>:
   12c08:	add	ip, pc, #0, 12
   12c0c:	add	ip, ip, #208896	; 0x33000
   12c10:	ldr	pc, [ip, #948]!	; 0x3b4

00012c14 <unsetenv@plt>:
   12c14:	add	ip, pc, #0, 12
   12c18:	add	ip, ip, #208896	; 0x33000
   12c1c:	ldr	pc, [ip, #940]!	; 0x3ac

00012c20 <fputs@plt>:
   12c20:	add	ip, pc, #0, 12
   12c24:	add	ip, ip, #208896	; 0x33000
   12c28:	ldr	pc, [ip, #932]!	; 0x3a4

00012c2c <strncmp@plt>:
   12c2c:	add	ip, pc, #0, 12
   12c30:	add	ip, ip, #208896	; 0x33000
   12c34:	ldr	pc, [ip, #924]!	; 0x39c

00012c38 <abort@plt>:
   12c38:	add	ip, pc, #0, 12
   12c3c:	add	ip, ip, #208896	; 0x33000
   12c40:	ldr	pc, [ip, #916]!	; 0x394

00012c44 <getc@plt>:
   12c44:	add	ip, pc, #0, 12
   12c48:	add	ip, ip, #208896	; 0x33000
   12c4c:	ldr	pc, [ip, #908]!	; 0x38c

00012c50 <gpgrt_fileno@plt>:
   12c50:	add	ip, pc, #0, 12
   12c54:	add	ip, ip, #208896	; 0x33000
   12c58:	ldr	pc, [ip, #900]!	; 0x384

00012c5c <close@plt>:
   12c5c:	add	ip, pc, #0, 12
   12c60:	add	ip, ip, #208896	; 0x33000
   12c64:	ldr	pc, [ip, #892]!	; 0x37c

00012c68 <gcry_strdup@plt>:
   12c68:	add	ip, pc, #0, 12
   12c6c:	add	ip, ip, #208896	; 0x33000
   12c70:	ldr	pc, [ip, #884]!	; 0x374

00012c74 <connect@plt>:
   12c74:	add	ip, pc, #0, 12
   12c78:	add	ip, ip, #208896	; 0x33000
   12c7c:	ldr	pc, [ip, #876]!	; 0x36c

00012c80 <closedir@plt>:
   12c80:	add	ip, pc, #0, 12
   12c84:	add	ip, ip, #208896	; 0x33000
   12c88:	ldr	pc, [ip, #868]!	; 0x364

00012c8c <gpgrt_mopen@plt>:
   12c8c:	add	ip, pc, #0, 12
   12c90:	add	ip, ip, #208896	; 0x33000
   12c94:	ldr	pc, [ip, #860]!	; 0x35c

00012c98 <strspn@plt>:
   12c98:	add	ip, pc, #0, 12
   12c9c:	add	ip, ip, #208896	; 0x33000
   12ca0:	ldr	pc, [ip, #852]!	; 0x354

00012ca4 <__assert_fail@plt>:
   12ca4:	add	ip, pc, #0, 12
   12ca8:	add	ip, ip, #208896	; 0x33000
   12cac:	ldr	pc, [ip, #844]!	; 0x34c

Disassembly of section .text:

00012cb0 <.text>:
   12cb0:	ldr	r3, [pc, #2924]	; 13824 <__assert_fail@plt+0xb80>
   12cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb8:	sub	sp, sp, #204	; 0xcc
   12cbc:	ldr	r3, [r3]
   12cc0:	str	r0, [sp, #20]
   12cc4:	ldr	r0, [pc, #2908]	; 13828 <__assert_fail@plt+0xb84>
   12cc8:	str	r3, [sp, #196]	; 0xc4
   12ccc:	str	r1, [sp, #16]
   12cd0:	bl	22818 <__assert_fail@plt+0xfb74>
   12cd4:	ldr	r0, [pc, #2896]	; 1382c <__assert_fail@plt+0xb88>
   12cd8:	bl	209d0 <__assert_fail@plt+0xdd2c>
   12cdc:	add	r4, sp, #16
   12ce0:	add	r5, sp, #20
   12ce4:	mov	r1, #1
   12ce8:	ldr	r0, [pc, #2872]	; 13828 <__assert_fail@plt+0xb84>
   12cec:	bl	21a14 <__assert_fail@plt+0xed70>
   12cf0:	mov	r2, r4
   12cf4:	mov	r1, r5
   12cf8:	mov	r0, #0
   12cfc:	bl	22370 <__assert_fail@plt+0xf6cc>
   12d00:	ldr	r7, [pc, #2856]	; 13830 <__assert_fail@plt+0xb8c>
   12d04:	str	r5, [sp, #32]
   12d08:	str	r4, [sp, #36]	; 0x24
   12d0c:	ldr	r5, [pc, #2848]	; 13834 <__assert_fail@plt+0xb90>
   12d10:	ldr	r4, [pc, #2848]	; 13838 <__assert_fail@plt+0xb94>
   12d14:	ldr	r8, [pc, #2848]	; 1383c <__assert_fail@plt+0xb98>
   12d18:	mov	r6, #0
   12d1c:	mov	r3, #1
   12d20:	str	r3, [sp, #40]	; 0x28
   12d24:	mov	r2, #0
   12d28:	str	r7, [sp]
   12d2c:	mov	r1, r2
   12d30:	mov	r0, r2
   12d34:	add	r3, sp, #32
   12d38:	bl	1fe74 <__assert_fail@plt+0xd1d0>
   12d3c:	cmp	r0, #0
   12d40:	beq	12e20 <__assert_fail@plt+0x17c>
   12d44:	ldr	r3, [sp, #48]	; 0x30
   12d48:	cmp	r3, r5
   12d4c:	bgt	12dc4 <__assert_fail@plt+0x120>
   12d50:	cmp	r3, #500	; 0x1f4
   12d54:	bgt	12f88 <__assert_fail@plt+0x2e4>
   12d58:	cmp	r3, #113	; 0x71
   12d5c:	beq	12f7c <__assert_fail@plt+0x2d8>
   12d60:	bgt	12d90 <__assert_fail@plt+0xec>
   12d64:	cmp	r3, #67	; 0x43
   12d68:	ldreq	r3, [sp, #56]	; 0x38
   12d6c:	streq	r3, [r8, #28]
   12d70:	beq	12d24 <__assert_fail@plt+0x80>
   12d74:	cmp	r3, #111	; 0x6f
   12d78:	ldreq	r3, [sp, #56]	; 0x38
   12d7c:	streq	r3, [r8, #20]
   12d80:	beq	12d24 <__assert_fail@plt+0x80>
   12d84:	mov	r3, #2
   12d88:	str	r3, [sp, #44]	; 0x2c
   12d8c:	b	12d24 <__assert_fail@plt+0x80>
   12d90:	cmp	r3, #118	; 0x76
   12d94:	beq	12f6c <__assert_fail@plt+0x2c8>
   12d98:	cmp	r3, #500	; 0x1f4
   12d9c:	bne	12d84 <__assert_fail@plt+0xe0>
   12da0:	ldr	r2, [pc, #2712]	; 13840 <__assert_fail@plt+0xb9c>
   12da4:	ldr	r1, [pc, #2712]	; 13844 <__assert_fail@plt+0xba0>
   12da8:	ldr	r0, [sp, #56]	; 0x38
   12dac:	bl	277d0 <__assert_fail@plt+0x14b2c>
   12db0:	cmp	r0, #0
   12db4:	movne	r2, #2
   12db8:	mvnne	r3, #11
   12dbc:	strdne	r2, [sp, #44]	; 0x2c
   12dc0:	b	12d24 <__assert_fail@plt+0x80>
   12dc4:	cmp	r3, r4
   12dc8:	beq	12f60 <__assert_fail@plt+0x2bc>
   12dcc:	ble	12df8 <__assert_fail@plt+0x154>
   12dd0:	cmp	r3, #512	; 0x200
   12dd4:	beq	12f50 <__assert_fail@plt+0x2ac>
   12dd8:	blt	12f40 <__assert_fail@plt+0x29c>
   12ddc:	ldr	r2, [pc, #2660]	; 13848 <__assert_fail@plt+0xba4>
   12de0:	cmp	r3, r2
   12de4:	bne	12d84 <__assert_fail@plt+0xe0>
   12de8:	ldr	r3, [pc, #2652]	; 1384c <__assert_fail@plt+0xba8>
   12dec:	mov	r2, #1
   12df0:	str	r2, [r3, #4]
   12df4:	b	12d24 <__assert_fail@plt+0x80>
   12df8:	cmp	r3, #508	; 0x1fc
   12dfc:	ldreq	r3, [sp, #56]	; 0x38
   12e00:	streq	r3, [r8, #24]
   12e04:	beq	12d24 <__assert_fail@plt+0x80>
   12e08:	ldr	r2, [pc, #2624]	; 13850 <__assert_fail@plt+0xbac>
   12e0c:	cmp	r3, r2
   12e10:	moveq	r3, #1
   12e14:	streq	r3, [r8, #12]
   12e18:	beq	12d24 <__assert_fail@plt+0x80>
   12e1c:	b	12d84 <__assert_fail@plt+0xe0>
   12e20:	bl	219a8 <__assert_fail@plt+0xed04>
   12e24:	subs	r4, r0, #0
   12e28:	bne	1376c <__assert_fail@plt+0xac8>
   12e2c:	ldr	r8, [pc, #2568]	; 1383c <__assert_fail@plt+0xb98>
   12e30:	ldr	r3, [sp, #40]	; 0x28
   12e34:	ldr	r2, [r8, #8]
   12e38:	and	r3, r3, #256	; 0x100
   12e3c:	orrs	r3, r3, r2
   12e40:	beq	12f90 <__assert_fail@plt+0x2ec>
   12e44:	ldr	r3, [r8, #24]
   12e48:	cmp	r3, #0
   12e4c:	beq	13548 <__assert_fail@plt+0x8a4>
   12e50:	ldr	r3, [r8, #28]
   12e54:	ldr	r4, [r8, #36]	; 0x24
   12e58:	cmp	r3, #0
   12e5c:	ldreq	r3, [pc, #2544]	; 13854 <__assert_fail@plt+0xbb0>
   12e60:	streq	r3, [r8, #28]
   12e64:	cmp	r4, #0
   12e68:	beq	12ebc <__assert_fail@plt+0x218>
   12e6c:	ldr	r7, [pc, #2532]	; 13858 <__assert_fail@plt+0xbb4>
   12e70:	b	12e80 <__assert_fail@plt+0x1dc>
   12e74:	ldr	r4, [r4]
   12e78:	cmp	r4, #0
   12e7c:	beq	12ebc <__assert_fail@plt+0x218>
   12e80:	mov	r2, #0
   12e84:	add	r5, r4, #8
   12e88:	mov	r1, r5
   12e8c:	mov	r0, r2
   12e90:	bl	1b110 <__assert_fail@plt+0x846c>
   12e94:	cmp	r0, #0
   12e98:	beq	12e74 <__assert_fail@plt+0x1d0>
   12e9c:	bl	12b3c <gpg_strerror@plt>
   12ea0:	mov	r1, r5
   12ea4:	mov	r2, r0
   12ea8:	mov	r0, r7
   12eac:	bl	21cbc <__assert_fail@plt+0xf018>
   12eb0:	ldr	r4, [r4]
   12eb4:	cmp	r4, #0
   12eb8:	bne	12e80 <__assert_fail@plt+0x1dc>
   12ebc:	mov	r0, #0
   12ec0:	bl	219a8 <__assert_fail@plt+0xed04>
   12ec4:	cmp	r0, #0
   12ec8:	bne	1376c <__assert_fail@plt+0xac8>
   12ecc:	add	r2, sp, #88	; 0x58
   12ed0:	ldr	r1, [r8, #28]
   12ed4:	mov	r0, #3
   12ed8:	bl	12bfc <__xstat64@plt>
   12edc:	cmp	r0, #0
   12ee0:	bne	13748 <__assert_fail@plt+0xaa4>
   12ee4:	ldr	r3, [sp, #104]	; 0x68
   12ee8:	and	r3, r3, #61440	; 0xf000
   12eec:	cmp	r3, #16384	; 0x4000
   12ef0:	bne	137a0 <__assert_fail@plt+0xafc>
   12ef4:	ldr	r4, [sp, #112]	; 0x70
   12ef8:	bl	1253c <getuid@plt>
   12efc:	cmp	r4, r0
   12f00:	bne	1378c <__assert_fail@plt+0xae8>
   12f04:	ldr	r4, [sp, #104]	; 0x68
   12f08:	ands	r4, r4, #6
   12f0c:	bne	137b8 <__assert_fail@plt+0xb14>
   12f10:	sub	r6, r6, #500	; 0x1f4
   12f14:	sub	r6, r6, #1
   12f18:	cmp	r6, #6
   12f1c:	ldrls	pc, [pc, r6, lsl #2]
   12f20:	b	13814 <__assert_fail@plt+0xb70>
   12f24:	andeq	r3, r1, r0, lsr #1
   12f28:	andeq	r3, r1, r0, ror #4
   12f2c:	andeq	r3, r1, ip, lsl #2
   12f30:	andeq	r3, r1, r8, lsr r2
   12f34:	andeq	r3, r1, r4, ror r3
   12f38:	muleq	r1, r4, r3
   12f3c:	andeq	r2, r1, r0, ror #31
   12f40:	ldr	r1, [sp, #56]	; 0x38
   12f44:	ldr	r0, [pc, #2320]	; 1385c <__assert_fail@plt+0xbb8>
   12f48:	bl	1d6e8 <__assert_fail@plt+0xaa44>
   12f4c:	b	12d24 <__assert_fail@plt+0x80>
   12f50:	ldr	r3, [pc, #2292]	; 1384c <__assert_fail@plt+0xba8>
   12f54:	mov	r2, #1
   12f58:	str	r2, [r3]
   12f5c:	b	12d24 <__assert_fail@plt+0x80>
   12f60:	ldr	r3, [sp, #56]	; 0x38
   12f64:	str	r3, [r8, #32]
   12f68:	b	12d24 <__assert_fail@plt+0x80>
   12f6c:	ldr	r3, [r8]
   12f70:	add	r3, r3, #1
   12f74:	str	r3, [r8]
   12f78:	b	12d24 <__assert_fail@plt+0x80>
   12f7c:	mov	r3, #1
   12f80:	str	r3, [r8, #8]
   12f84:	b	12d24 <__assert_fail@plt+0x80>
   12f88:	mov	r6, r3
   12f8c:	b	12d24 <__assert_fail@plt+0x80>
   12f90:	ldr	r2, [sp, #20]
   12f94:	cmp	r2, #0
   12f98:	ble	12e44 <__assert_fail@plt+0x1a0>
   12f9c:	ldr	r5, [pc, #2236]	; 13860 <__assert_fail@plt+0xbbc>
   12fa0:	b	12fb0 <__assert_fail@plt+0x30c>
   12fa4:	add	r4, r4, #1
   12fa8:	cmp	r2, r4
   12fac:	ble	12e44 <__assert_fail@plt+0x1a0>
   12fb0:	ldr	r3, [sp, #16]
   12fb4:	ldr	r1, [r3, r4, lsl #2]
   12fb8:	ldrb	r3, [r1]
   12fbc:	cmp	r3, #45	; 0x2d
   12fc0:	bne	12fa4 <__assert_fail@plt+0x300>
   12fc4:	ldrb	r3, [r1, #1]
   12fc8:	cmp	r3, #45	; 0x2d
   12fcc:	bne	12fa4 <__assert_fail@plt+0x300>
   12fd0:	mov	r0, r5
   12fd4:	bl	21c58 <__assert_fail@plt+0xefb4>
   12fd8:	ldr	r2, [sp, #20]
   12fdc:	b	12fa4 <__assert_fail@plt+0x300>
   12fe0:	ldr	r3, [sp, #20]
   12fe4:	cmp	r3, #0
   12fe8:	beq	137e0 <__assert_fail@plt+0xb3c>
   12fec:	ldr	r3, [sp, #16]
   12ff0:	ldr	r5, [pc, #2132]	; 1384c <__assert_fail@plt+0xba8>
   12ff4:	ldr	r7, [pc, #2152]	; 13864 <__assert_fail@plt+0xbc0>
   12ff8:	ldr	r6, [pc, #2152]	; 13868 <__assert_fail@plt+0xbc4>
   12ffc:	b	13044 <__assert_fail@plt+0x3a0>
   13000:	ldr	r3, [r8]
   13004:	cmp	r3, #0
   13008:	bne	1358c <__assert_fail@plt+0x8e8>
   1300c:	ldr	r0, [sp, #88]	; 0x58
   13010:	bl	125e4 <gcry_free@plt>
   13014:	ldr	r0, [sp, #28]
   13018:	bl	125e4 <gcry_free@plt>
   1301c:	ldr	r2, [sp, #20]
   13020:	ldr	r3, [sp, #16]
   13024:	cmp	r4, #0
   13028:	sub	r2, r2, #1
   1302c:	moveq	r4, r9
   13030:	add	r3, r3, #4
   13034:	cmp	r2, #0
   13038:	str	r2, [sp, #20]
   1303c:	str	r3, [sp, #16]
   13040:	beq	130c4 <__assert_fail@plt+0x420>
   13044:	mov	ip, #0
   13048:	ldr	r0, [r3]
   1304c:	mov	r1, ip
   13050:	add	r3, sp, #28
   13054:	add	r2, sp, #88	; 0x58
   13058:	str	ip, [sp, #28]
   1305c:	str	ip, [sp, #88]	; 0x58
   13060:	bl	169e0 <__assert_fail@plt+0x3d3c>
   13064:	subs	r9, r0, #0
   13068:	bne	1300c <__assert_fail@plt+0x368>
   1306c:	mov	r1, #4
   13070:	ldr	r0, [sp, #88]	; 0x58
   13074:	bl	12a4c <access@plt>
   13078:	cmp	r0, #0
   1307c:	bne	135c0 <__assert_fail@plt+0x91c>
   13080:	ldr	r3, [r5, #4]
   13084:	cmp	r3, #0
   13088:	beq	13000 <__assert_fail@plt+0x35c>
   1308c:	ldr	r2, [sp, #88]	; 0x58
   13090:	ldr	r1, [sp, #28]
   13094:	mov	r0, r6
   13098:	bl	127a0 <gpgrt_printf@plt>
   1309c:	b	13000 <__assert_fail@plt+0x35c>
   130a0:	ldr	r4, [sp, #20]
   130a4:	cmp	r4, #0
   130a8:	bne	137e8 <__assert_fail@plt+0xb44>
   130ac:	mov	r0, r4
   130b0:	bl	12890 <_gpgrt_get_std_stream@plt>
   130b4:	mov	r2, r4
   130b8:	ldr	r1, [pc, #1964]	; 1386c <__assert_fail@plt+0xbc8>
   130bc:	bl	17cf8 <__assert_fail@plt+0x5054>
   130c0:	mov	r4, r0
   130c4:	cmp	r4, #0
   130c8:	beq	130e0 <__assert_fail@plt+0x43c>
   130cc:	mov	r0, r4
   130d0:	bl	12b3c <gpg_strerror@plt>
   130d4:	mov	r1, r0
   130d8:	ldr	r0, [pc, #1936]	; 13870 <__assert_fail@plt+0xbcc>
   130dc:	bl	21cbc <__assert_fail@plt+0xf018>
   130e0:	mov	r0, #0
   130e4:	bl	219a8 <__assert_fail@plt+0xed04>
   130e8:	ldr	r3, [pc, #1844]	; 13824 <__assert_fail@plt+0xb80>
   130ec:	ldr	r2, [sp, #196]	; 0xc4
   130f0:	ldr	r3, [r3]
   130f4:	adds	r0, r0, #0
   130f8:	movne	r0, #1
   130fc:	cmp	r2, r3
   13100:	bne	13774 <__assert_fail@plt+0xad0>
   13104:	add	sp, sp, #204	; 0xcc
   13108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1310c:	add	r0, sp, #28
   13110:	bl	13e3c <__assert_fail@plt+0x1198>
   13114:	subs	r4, r0, #0
   13118:	ldreq	sl, [sp, #28]
   1311c:	bne	136c8 <__assert_fail@plt+0xa24>
   13120:	cmp	sl, #0
   13124:	beq	13620 <__assert_fail@plt+0x97c>
   13128:	add	r6, sl, #8
   1312c:	mov	r0, r6
   13130:	mov	r1, #47	; 0x2f
   13134:	bl	12adc <strrchr@plt>
   13138:	cmp	r0, #0
   1313c:	beq	137f0 <__assert_fail@plt+0xb4c>
   13140:	ldr	r3, [pc, #1796]	; 1384c <__assert_fail@plt+0xba8>
   13144:	add	r7, r0, #1
   13148:	ldr	r3, [r3]
   1314c:	cmp	r3, #0
   13150:	beq	134dc <__assert_fail@plt+0x838>
   13154:	mov	r2, r6
   13158:	mov	r1, r7
   1315c:	ldr	r0, [pc, #1808]	; 13874 <__assert_fail@plt+0xbd0>
   13160:	bl	127a0 <gpgrt_printf@plt>
   13164:	ldr	r5, [pc, #1804]	; 13878 <__assert_fail@plt+0xbd4>
   13168:	ldr	fp, [pc, #1804]	; 1387c <__assert_fail@plt+0xbd8>
   1316c:	add	r9, r5, #16
   13170:	mov	r0, r4
   13174:	bl	125e4 <gcry_free@plt>
   13178:	ldr	r8, [r5, #-4]
   1317c:	mov	r2, #0
   13180:	mov	r1, r8
   13184:	mov	r0, r6
   13188:	bl	1c80c <__assert_fail@plt+0x9b68>
   1318c:	subs	r4, r0, #0
   13190:	beq	135fc <__assert_fail@plt+0x958>
   13194:	mov	r1, #2
   13198:	bl	12a4c <access@plt>
   1319c:	cmp	r0, #0
   131a0:	bne	1348c <__assert_fail@plt+0x7e8>
   131a4:	add	r5, r5, #8
   131a8:	cmp	r5, r9
   131ac:	bne	13170 <__assert_fail@plt+0x4cc>
   131b0:	mov	r0, r4
   131b4:	bl	125e4 <gcry_free@plt>
   131b8:	mov	r2, #0
   131bc:	ldr	r1, [pc, #1724]	; 13880 <__assert_fail@plt+0xbdc>
   131c0:	mov	r0, r6
   131c4:	bl	1c80c <__assert_fail@plt+0x9b68>
   131c8:	subs	r4, r0, #0
   131cc:	beq	135fc <__assert_fail@plt+0x958>
   131d0:	mov	r1, #0
   131d4:	bl	12a4c <access@plt>
   131d8:	cmp	r0, #0
   131dc:	bne	13510 <__assert_fail@plt+0x86c>
   131e0:	mov	r0, r4
   131e4:	bl	125e4 <gcry_free@plt>
   131e8:	mov	r0, r6
   131ec:	mov	r2, #0
   131f0:	ldr	r1, [pc, #1676]	; 13884 <__assert_fail@plt+0xbe0>
   131f4:	bl	1c80c <__assert_fail@plt+0x9b68>
   131f8:	subs	r4, r0, #0
   131fc:	beq	135fc <__assert_fail@plt+0x958>
   13200:	ldr	r1, [pc, #1664]	; 13888 <__assert_fail@plt+0xbe4>
   13204:	bl	12a04 <gpgrt_fopen@plt>
   13208:	subs	r5, r0, #0
   1320c:	beq	13558 <__assert_fail@plt+0x8b4>
   13210:	mov	r2, #0
   13214:	mov	r1, r5
   13218:	add	r0, sp, #88	; 0x58
   1321c:	bl	166d8 <__assert_fail@plt+0x3a34>
   13220:	mov	r0, r5
   13224:	bl	12788 <gpgrt_fclose@plt>
   13228:	add	r0, sp, #88	; 0x58
   1322c:	bl	169b4 <__assert_fail@plt+0x3d10>
   13230:	ldr	sl, [sl]
   13234:	b	13120 <__assert_fail@plt+0x47c>
   13238:	ldr	r1, [sp, #20]
   1323c:	cmp	r1, #0
   13240:	beq	1366c <__assert_fail@plt+0x9c8>
   13244:	cmp	r1, #2
   13248:	bne	1380c <__assert_fail@plt+0xb68>
   1324c:	ldr	r3, [sp, #16]
   13250:	ldrd	r0, [r3]
   13254:	bl	16d58 <__assert_fail@plt+0x40b4>
   13258:	mov	r4, r0
   1325c:	b	130c4 <__assert_fail@plt+0x420>
   13260:	ldr	r3, [sp, #20]
   13264:	cmp	r3, #0
   13268:	bne	13804 <__assert_fail@plt+0xb60>
   1326c:	add	r0, sp, #28
   13270:	bl	13e3c <__assert_fail@plt+0x1198>
   13274:	subs	r4, r0, #0
   13278:	bne	13658 <__assert_fail@plt+0x9b4>
   1327c:	ldr	r9, [sp, #28]
   13280:	cmp	r9, #0
   13284:	beq	13368 <__assert_fail@plt+0x6c4>
   13288:	ldr	fp, [pc, #1532]	; 1388c <__assert_fail@plt+0xbe8>
   1328c:	add	r4, r9, #8
   13290:	mov	r0, r4
   13294:	mov	r1, #47	; 0x2f
   13298:	bl	12adc <strrchr@plt>
   1329c:	subs	r3, r0, #0
   132a0:	str	r3, [sp, #12]
   132a4:	beq	13778 <__assert_fail@plt+0xad4>
   132a8:	bl	242fc <__assert_fail@plt+0x11658>
   132ac:	mov	r2, #0
   132b0:	ldr	r1, [pc, #1496]	; 13890 <__assert_fail@plt+0xbec>
   132b4:	mov	sl, r0
   132b8:	mov	r0, r4
   132bc:	bl	1c80c <__assert_fail@plt+0x9b68>
   132c0:	subs	r6, r0, #0
   132c4:	beq	134ec <__assert_fail@plt+0x848>
   132c8:	bl	127ac <opendir@plt>
   132cc:	subs	r7, r0, #0
   132d0:	movne	r5, #0
   132d4:	beq	1359c <__assert_fail@plt+0x8f8>
   132d8:	mov	r0, r7
   132dc:	bl	12b24 <readdir64@plt>
   132e0:	subs	r4, r0, #0
   132e4:	beq	13344 <__assert_fail@plt+0x6a0>
   132e8:	ldrb	r3, [r4, #19]
   132ec:	cmp	r3, #46	; 0x2e
   132f0:	beq	132d8 <__assert_fail@plt+0x634>
   132f4:	mov	r0, r5
   132f8:	add	r4, r4, #19
   132fc:	bl	125e4 <gcry_free@plt>
   13300:	mov	r1, r4
   13304:	mov	r2, #0
   13308:	mov	r0, r6
   1330c:	bl	1c80c <__assert_fail@plt+0x9b68>
   13310:	subs	r5, r0, #0
   13314:	beq	1346c <__assert_fail@plt+0x7c8>
   13318:	mov	r0, r4
   1331c:	bl	128d8 <strlen@plt>
   13320:	cmp	r0, #32
   13324:	beq	133a8 <__assert_fail@plt+0x704>
   13328:	mov	r1, r5
   1332c:	mov	r0, fp
   13330:	bl	21c58 <__assert_fail@plt+0xefb4>
   13334:	mov	r0, r7
   13338:	bl	12b24 <readdir64@plt>
   1333c:	subs	r4, r0, #0
   13340:	bne	132e8 <__assert_fail@plt+0x644>
   13344:	mov	r0, r7
   13348:	bl	12c80 <closedir@plt>
   1334c:	mov	r0, r6
   13350:	bl	125e4 <gcry_free@plt>
   13354:	mov	r0, r5
   13358:	bl	125e4 <gcry_free@plt>
   1335c:	ldr	r9, [r9]
   13360:	cmp	r9, #0
   13364:	bne	1328c <__assert_fail@plt+0x5e8>
   13368:	ldr	r0, [sp, #28]
   1336c:	bl	1d550 <__assert_fail@plt+0xa8ac>
   13370:	b	130e0 <__assert_fail@plt+0x43c>
   13374:	ldr	r3, [sp, #20]
   13378:	cmp	r3, #1
   1337c:	bne	137d8 <__assert_fail@plt+0xb34>
   13380:	ldr	r3, [sp, #16]
   13384:	ldr	r0, [r3]
   13388:	bl	171c4 <__assert_fail@plt+0x4520>
   1338c:	mov	r4, r0
   13390:	b	130c4 <__assert_fail@plt+0x420>
   13394:	ldr	r3, [sp, #20]
   13398:	cmp	r3, #1
   1339c:	beq	13380 <__assert_fail@plt+0x6dc>
   133a0:	ldr	r0, [pc, #1260]	; 13894 <__assert_fail@plt+0xbf0>
   133a4:	bl	13ff0 <__assert_fail@plt+0x134c>
   133a8:	add	r2, sp, #88	; 0x58
   133ac:	mov	r1, r5
   133b0:	mov	r0, #3
   133b4:	bl	12bfc <__xstat64@plt>
   133b8:	cmp	r0, #0
   133bc:	bne	13434 <__assert_fail@plt+0x790>
   133c0:	ldr	r3, [sp, #104]	; 0x68
   133c4:	and	r3, r3, #61440	; 0xf000
   133c8:	cmp	r3, #16384	; 0x4000
   133cc:	beq	134cc <__assert_fail@plt+0x828>
   133d0:	ldr	r3, [sp, #168]	; 0xa8
   133d4:	add	r3, r3, #259072	; 0x3f400
   133d8:	add	r3, r3, #128	; 0x80
   133dc:	cmp	sl, r3
   133e0:	ble	132d8 <__assert_fail@plt+0x634>
   133e4:	ldr	r3, [r8]
   133e8:	cmp	r3, #0
   133ec:	bne	13454 <__assert_fail@plt+0x7b0>
   133f0:	mov	r0, r5
   133f4:	bl	12b78 <remove@plt>
   133f8:	cmp	r0, #0
   133fc:	beq	132d8 <__assert_fail@plt+0x634>
   13400:	bl	12914 <gpg_err_code_from_syserror@plt>
   13404:	cmp	r0, #0
   13408:	beq	1341c <__assert_fail@plt+0x778>
   1340c:	ldr	r3, [pc, #1156]	; 13898 <__assert_fail@plt+0xbf4>
   13410:	uxth	r0, r0
   13414:	cmp	r0, r3
   13418:	beq	132d8 <__assert_fail@plt+0x634>
   1341c:	bl	12b3c <gpg_strerror@plt>
   13420:	mov	r1, r5
   13424:	mov	r2, r0
   13428:	ldr	r0, [pc, #1132]	; 1389c <__assert_fail@plt+0xbf8>
   1342c:	bl	21cbc <__assert_fail@plt+0xf018>
   13430:	b	132d8 <__assert_fail@plt+0x634>
   13434:	bl	12914 <gpg_err_code_from_syserror@plt>
   13438:	uxth	r0, r0
   1343c:	bl	12b3c <gpg_strerror@plt>
   13440:	mov	r1, r5
   13444:	mov	r2, r0
   13448:	ldr	r0, [pc, #1104]	; 138a0 <__assert_fail@plt+0xbfc>
   1344c:	bl	21cbc <__assert_fail@plt+0xf018>
   13450:	b	132d8 <__assert_fail@plt+0x634>
   13454:	ldr	r3, [sp, #12]
   13458:	mov	r2, r4
   1345c:	add	r1, r3, #1
   13460:	ldr	r0, [pc, #1084]	; 138a4 <__assert_fail@plt+0xc00>
   13464:	bl	21c58 <__assert_fail@plt+0xefb4>
   13468:	b	133f0 <__assert_fail@plt+0x74c>
   1346c:	bl	12914 <gpg_err_code_from_syserror@plt>
   13470:	uxth	r0, r0
   13474:	bl	12b3c <gpg_strerror@plt>
   13478:	ldr	r1, [pc, #1064]	; 138a8 <__assert_fail@plt+0xc04>
   1347c:	mov	r2, r0
   13480:	ldr	r0, [pc, #1060]	; 138ac <__assert_fail@plt+0xc08>
   13484:	bl	21cbc <__assert_fail@plt+0xf018>
   13488:	b	13344 <__assert_fail@plt+0x6a0>
   1348c:	bl	12914 <gpg_err_code_from_syserror@plt>
   13490:	cmp	r0, #0
   13494:	beq	131a4 <__assert_fail@plt+0x500>
   13498:	ldr	r3, [pc, #1016]	; 13898 <__assert_fail@plt+0xbf4>
   1349c:	uxth	r0, r0
   134a0:	cmp	r0, r3
   134a4:	beq	1367c <__assert_fail@plt+0x9d8>
   134a8:	cmp	r0, #0
   134ac:	beq	131a4 <__assert_fail@plt+0x500>
   134b0:	bl	12b3c <gpg_strerror@plt>
   134b4:	mov	r2, r8
   134b8:	mov	r1, r7
   134bc:	mov	r3, r0
   134c0:	mov	r0, fp
   134c4:	bl	21cbc <__assert_fail@plt+0xf018>
   134c8:	b	131a4 <__assert_fail@plt+0x500>
   134cc:	mov	r1, r5
   134d0:	ldr	r0, [pc, #984]	; 138b0 <__assert_fail@plt+0xc0c>
   134d4:	bl	21c58 <__assert_fail@plt+0xefb4>
   134d8:	b	132d8 <__assert_fail@plt+0x634>
   134dc:	mov	r1, r7
   134e0:	ldr	r0, [pc, #972]	; 138b4 <__assert_fail@plt+0xc10>
   134e4:	bl	127a0 <gpgrt_printf@plt>
   134e8:	b	13164 <__assert_fail@plt+0x4c0>
   134ec:	bl	12914 <gpg_err_code_from_syserror@plt>
   134f0:	mov	r5, r6
   134f4:	uxth	r0, r0
   134f8:	bl	12b3c <gpg_strerror@plt>
   134fc:	ldr	r1, [pc, #932]	; 138a8 <__assert_fail@plt+0xc04>
   13500:	mov	r2, r0
   13504:	ldr	r0, [pc, #928]	; 138ac <__assert_fail@plt+0xc08>
   13508:	bl	21cbc <__assert_fail@plt+0xf018>
   1350c:	b	1334c <__assert_fail@plt+0x6a8>
   13510:	bl	12914 <gpg_err_code_from_syserror@plt>
   13514:	cmp	r0, #0
   13518:	beq	1352c <__assert_fail@plt+0x888>
   1351c:	ldr	r3, [pc, #884]	; 13898 <__assert_fail@plt+0xbf4>
   13520:	uxth	r0, r0
   13524:	cmp	r0, r3
   13528:	beq	136f0 <__assert_fail@plt+0xa4c>
   1352c:	bl	12b3c <gpg_strerror@plt>
   13530:	mov	r2, r4
   13534:	mov	r1, r7
   13538:	mov	r3, r0
   1353c:	ldr	r0, [pc, #884]	; 138b8 <__assert_fail@plt+0xc14>
   13540:	bl	21cbc <__assert_fail@plt+0xf018>
   13544:	b	131e0 <__assert_fail@plt+0x53c>
   13548:	mov	r0, #8
   1354c:	bl	23994 <__assert_fail@plt+0x10cf0>
   13550:	str	r0, [r8, #24]
   13554:	b	12e50 <__assert_fail@plt+0x1ac>
   13558:	bl	12914 <gpg_err_code_from_syserror@plt>
   1355c:	cmp	r0, #0
   13560:	beq	13574 <__assert_fail@plt+0x8d0>
   13564:	ldr	r3, [pc, #812]	; 13898 <__assert_fail@plt+0xbf4>
   13568:	uxth	r0, r0
   1356c:	cmp	r0, r3
   13570:	beq	13710 <__assert_fail@plt+0xa6c>
   13574:	bl	12b3c <gpg_strerror@plt>
   13578:	mov	r1, r7
   1357c:	mov	r2, r0
   13580:	ldr	r0, [pc, #820]	; 138bc <__assert_fail@plt+0xc18>
   13584:	bl	21cbc <__assert_fail@plt+0xf018>
   13588:	b	13230 <__assert_fail@plt+0x58c>
   1358c:	ldr	r1, [sp, #28]
   13590:	mov	r0, r7
   13594:	bl	21c58 <__assert_fail@plt+0xefb4>
   13598:	b	1300c <__assert_fail@plt+0x368>
   1359c:	bl	12914 <gpg_err_code_from_syserror@plt>
   135a0:	mov	r5, r7
   135a4:	uxth	r0, r0
   135a8:	bl	12b3c <gpg_strerror@plt>
   135ac:	mov	r1, r6
   135b0:	mov	r2, r0
   135b4:	ldr	r0, [pc, #772]	; 138c0 <__assert_fail@plt+0xc1c>
   135b8:	bl	21cbc <__assert_fail@plt+0xf018>
   135bc:	b	1334c <__assert_fail@plt+0x6a8>
   135c0:	bl	12914 <gpg_err_code_from_syserror@plt>
   135c4:	ldr	r3, [r5, #4]
   135c8:	subs	sl, r0, #0
   135cc:	beq	1362c <__assert_fail@plt+0x988>
   135d0:	cmp	r3, #0
   135d4:	uxth	sl, sl
   135d8:	bne	136b4 <__assert_fail@plt+0xa10>
   135dc:	ldr	r3, [pc, #692]	; 13898 <__assert_fail@plt+0xbf4>
   135e0:	cmp	sl, r3
   135e4:	bne	13634 <__assert_fail@plt+0x990>
   135e8:	ldr	r3, [r8, #8]
   135ec:	cmp	r3, #0
   135f0:	beq	13700 <__assert_fail@plt+0xa5c>
   135f4:	bl	219c4 <__assert_fail@plt+0xed20>
   135f8:	b	1300c <__assert_fail@plt+0x368>
   135fc:	bl	12914 <gpg_err_code_from_syserror@plt>
   13600:	subs	r4, r0, #0
   13604:	beq	13624 <__assert_fail@plt+0x980>
   13608:	mov	r0, #0
   1360c:	bl	125e4 <gcry_free@plt>
   13610:	ldr	r0, [sp, #28]
   13614:	uxth	r4, r4
   13618:	bl	1d550 <__assert_fail@plt+0xa8ac>
   1361c:	b	130c4 <__assert_fail@plt+0x420>
   13620:	mov	r0, r4
   13624:	bl	125e4 <gcry_free@plt>
   13628:	b	13368 <__assert_fail@plt+0x6c4>
   1362c:	cmp	r3, #0
   13630:	bne	136b4 <__assert_fail@plt+0xa10>
   13634:	mov	r0, sl
   13638:	ldr	r9, [sp, #88]	; 0x58
   1363c:	bl	12b3c <gpg_strerror@plt>
   13640:	mov	r1, r9
   13644:	mov	r9, sl
   13648:	mov	r2, r0
   1364c:	ldr	r0, [pc, #624]	; 138c4 <__assert_fail@plt+0xc20>
   13650:	bl	21cbc <__assert_fail@plt+0xf018>
   13654:	b	1300c <__assert_fail@plt+0x368>
   13658:	bl	12b3c <gpg_strerror@plt>
   1365c:	mov	r1, r0
   13660:	ldr	r0, [pc, #608]	; 138c8 <__assert_fail@plt+0xc24>
   13664:	bl	21cbc <__assert_fail@plt+0xf018>
   13668:	b	130cc <__assert_fail@plt+0x428>
   1366c:	mov	r0, r1
   13670:	bl	16d58 <__assert_fail@plt+0x40b4>
   13674:	mov	r4, r0
   13678:	b	130c4 <__assert_fail@plt+0x420>
   1367c:	ldr	r1, [r5]
   13680:	mov	r0, r4
   13684:	bl	22b38 <__assert_fail@plt+0xfe94>
   13688:	cmp	r0, #0
   1368c:	beq	136dc <__assert_fail@plt+0xa38>
   13690:	bl	12914 <gpg_err_code_from_syserror@plt>
   13694:	uxth	r0, r0
   13698:	bl	12b3c <gpg_strerror@plt>
   1369c:	mov	r2, r8
   136a0:	mov	r1, r7
   136a4:	mov	r3, r0
   136a8:	ldr	r0, [pc, #540]	; 138cc <__assert_fail@plt+0xc28>
   136ac:	bl	21cbc <__assert_fail@plt+0xf018>
   136b0:	b	131a4 <__assert_fail@plt+0x500>
   136b4:	ldr	r2, [sp, #88]	; 0x58
   136b8:	ldr	r1, [sp, #28]
   136bc:	ldr	r0, [pc, #524]	; 138d0 <__assert_fail@plt+0xc2c>
   136c0:	bl	127a0 <gpgrt_printf@plt>
   136c4:	b	135dc <__assert_fail@plt+0x938>
   136c8:	bl	12b3c <gpg_strerror@plt>
   136cc:	mov	r1, r0
   136d0:	ldr	r0, [pc, #496]	; 138c8 <__assert_fail@plt+0xc24>
   136d4:	bl	21cbc <__assert_fail@plt+0xf018>
   136d8:	b	130c4 <__assert_fail@plt+0x420>
   136dc:	mov	r2, r8
   136e0:	mov	r1, r7
   136e4:	ldr	r0, [pc, #488]	; 138d4 <__assert_fail@plt+0xc30>
   136e8:	bl	21c58 <__assert_fail@plt+0xefb4>
   136ec:	b	131a4 <__assert_fail@plt+0x500>
   136f0:	mov	r1, r7
   136f4:	ldr	r0, [pc, #476]	; 138d8 <__assert_fail@plt+0xc34>
   136f8:	bl	21cbc <__assert_fail@plt+0xf018>
   136fc:	b	131e0 <__assert_fail@plt+0x53c>
   13700:	ldr	r1, [sp, #28]
   13704:	ldr	r0, [pc, #464]	; 138dc <__assert_fail@plt+0xc38>
   13708:	bl	21c58 <__assert_fail@plt+0xefb4>
   1370c:	b	135f4 <__assert_fail@plt+0x950>
   13710:	ldr	r1, [pc, #456]	; 138e0 <__assert_fail@plt+0xc3c>
   13714:	mov	r0, r4
   13718:	bl	12a04 <gpgrt_fopen@plt>
   1371c:	cmp	r0, #0
   13720:	beq	1372c <__assert_fail@plt+0xa88>
   13724:	bl	12788 <gpgrt_fclose@plt>
   13728:	b	13230 <__assert_fail@plt+0x58c>
   1372c:	ldr	r0, [pc, #356]	; 13898 <__assert_fail@plt+0xbf4>
   13730:	bl	12b3c <gpg_strerror@plt>
   13734:	mov	r1, r7
   13738:	mov	r2, r0
   1373c:	ldr	r0, [pc, #416]	; 138e4 <__assert_fail@plt+0xc40>
   13740:	bl	21cbc <__assert_fail@plt+0xf018>
   13744:	b	13230 <__assert_fail@plt+0x58c>
   13748:	bl	12914 <gpg_err_code_from_syserror@plt>
   1374c:	ldr	r4, [r8, #28]
   13750:	cmp	r0, #0
   13754:	uxthne	r0, r0
   13758:	bl	12b3c <gpg_strerror@plt>
   1375c:	mov	r1, r4
   13760:	mov	r2, r0
   13764:	ldr	r0, [pc, #380]	; 138e8 <__assert_fail@plt+0xc44>
   13768:	bl	21cbc <__assert_fail@plt+0xf018>
   1376c:	mov	r0, #2
   13770:	bl	128b4 <exit@plt>
   13774:	bl	1262c <__stack_chk_fail@plt>
   13778:	ldr	r3, [pc, #364]	; 138ec <__assert_fail@plt+0xc48>
   1377c:	ldr	r2, [pc, #364]	; 138f0 <__assert_fail@plt+0xc4c>
   13780:	ldr	r1, [pc, #364]	; 138f4 <__assert_fail@plt+0xc50>
   13784:	ldr	r0, [pc, #364]	; 138f8 <__assert_fail@plt+0xc54>
   13788:	bl	22044 <__assert_fail@plt+0xf3a0>
   1378c:	ldr	r0, [pc, #360]	; 138fc <__assert_fail@plt+0xc58>
   13790:	ldr	r1, [r8, #28]
   13794:	bl	21cbc <__assert_fail@plt+0xf018>
   13798:	mov	r0, #2
   1379c:	bl	128b4 <exit@plt>
   137a0:	ldr	r0, [pc, #320]	; 138e8 <__assert_fail@plt+0xc44>
   137a4:	ldr	r1, [r8, #28]
   137a8:	ldr	r2, [pc, #336]	; 13900 <__assert_fail@plt+0xc5c>
   137ac:	bl	21cbc <__assert_fail@plt+0xf018>
   137b0:	mov	r0, #2
   137b4:	bl	128b4 <exit@plt>
   137b8:	ldr	r1, [r8, #28]
   137bc:	ldr	r0, [pc, #320]	; 13904 <__assert_fail@plt+0xc60>
   137c0:	bl	21cbc <__assert_fail@plt+0xf018>
   137c4:	ldr	r0, [pc, #316]	; 13908 <__assert_fail@plt+0xc64>
   137c8:	ldr	r1, [r8, #28]
   137cc:	bl	21c58 <__assert_fail@plt+0xefb4>
   137d0:	mov	r0, #2
   137d4:	bl	128b4 <exit@plt>
   137d8:	ldr	r0, [pc, #300]	; 1390c <__assert_fail@plt+0xc68>
   137dc:	bl	13ff0 <__assert_fail@plt+0x134c>
   137e0:	ldr	r0, [pc, #296]	; 13910 <__assert_fail@plt+0xc6c>
   137e4:	bl	13ff0 <__assert_fail@plt+0x134c>
   137e8:	ldr	r0, [pc, #292]	; 13914 <__assert_fail@plt+0xc70>
   137ec:	bl	13ff0 <__assert_fail@plt+0x134c>
   137f0:	ldr	r3, [pc, #288]	; 13918 <__assert_fail@plt+0xc74>
   137f4:	ldr	r2, [pc, #288]	; 1391c <__assert_fail@plt+0xc78>
   137f8:	ldr	r1, [pc, #244]	; 138f4 <__assert_fail@plt+0xc50>
   137fc:	ldr	r0, [pc, #244]	; 138f8 <__assert_fail@plt+0xc54>
   13800:	bl	22044 <__assert_fail@plt+0xf3a0>
   13804:	ldr	r0, [pc, #276]	; 13920 <__assert_fail@plt+0xc7c>
   13808:	bl	13ff0 <__assert_fail@plt+0x134c>
   1380c:	ldr	r0, [pc, #272]	; 13924 <__assert_fail@plt+0xc80>
   13810:	bl	13ff0 <__assert_fail@plt+0x134c>
   13814:	mov	r0, #1
   13818:	bl	20884 <__assert_fail@plt+0xdbe0>
   1381c:	mov	r4, #59	; 0x3b
   13820:	b	130cc <__assert_fail@plt+0x428>
   13824:	strdeq	r5, [r4], -r8
   13828:	andeq	r0, r3, r8, lsl #31
   1382c:	andeq	r3, r1, r8, lsl sl
   13830:	andeq	r6, r4, r8, asr #32
   13834:	strdeq	r0, [r0], -fp
   13838:	strdeq	r0, [r0], -lr
   1383c:	andeq	r6, r4, ip, ror #8
   13840:	andeq	r6, r4, r8
   13844:	andeq	r6, r4, r0, ror r4
   13848:	andeq	r0, r0, r1, lsl #4
   1384c:	andeq	r6, r4, r4, lsl #4
   13850:	strdeq	r0, [r0], -sp
   13854:	andeq	r0, r3, r0, asr #31
   13858:	ldrdeq	r0, [r3], -r4
   1385c:	muleq	r4, r0, r4
   13860:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   13864:	andeq	r1, r3, r8, ror #6
   13868:	andeq	r1, r3, ip, asr r3
   1386c:	andeq	r4, r1, ip, ror #5
   13870:	andeq	r1, r3, r4, lsl #7
   13874:	andeq	r0, r3, r4, lsr #6
   13878:	andeq	r0, r3, ip, lsl #6
   1387c:	ldrdeq	r1, [r3], -r0
   13880:	andeq	r0, r3, ip, lsr #6
   13884:	andeq	r0, r3, r0, asr r6
   13888:	strdeq	r2, [r3], -r0
   1388c:	andeq	r1, r3, r4, lsl #2
   13890:	andeq	r1, r3, r0, asr fp
   13894:	ldrdeq	r1, [r3], -r4
   13898:	andeq	r8, r0, r1, asr r0
   1389c:	andeq	r1, r3, r8, ror #2
   138a0:			; <UNDEFINED> instruction: 0x000304bc
   138a4:	andeq	r1, r3, r0, asr #2
   138a8:	ldrdeq	r0, [r3], -ip
   138ac:	andeq	r0, r3, r0, asr #6
   138b0:	andeq	r1, r3, r0, lsr #2
   138b4:			; <UNDEFINED> instruction: 0x000303b8
   138b8:	andeq	r1, r3, ip, lsr #4
   138bc:	andeq	r1, r3, r0, lsl #5
   138c0:	andeq	r1, r3, r0, ror #1
   138c4:	andeq	r1, r3, r4, asr #6
   138c8:	strheq	r1, [r3], -r4
   138cc:	andeq	r1, r3, r4, lsl #3
   138d0:	andeq	r1, r3, r8, lsl r3
   138d4:			; <UNDEFINED> instruction: 0x000311b0
   138d8:	strdeq	r1, [r3], -ip
   138dc:	andeq	r1, r3, r4, lsr #6
   138e0:	andeq	r1, r3, r0, asr r2
   138e4:	andeq	r1, r3, r4, asr r2
   138e8:	strdeq	r0, [r3], -r8
   138ec:			; <UNDEFINED> instruction: 0x000302bc
   138f0:	andeq	r0, r0, fp, ror #13
   138f4:	muleq	r3, r4, r5
   138f8:	ldrdeq	r1, [r3], -r8
   138fc:	andeq	r1, r3, ip, lsr #32
   13900:	andeq	r1, r3, ip, lsl r0
   13904:	andeq	r1, r3, r0, asr r0
   13908:	andeq	r1, r3, ip, ror r0
   1390c:	andeq	r1, r3, ip, ror #5
   13910:	andeq	r1, r3, r4, lsl #6
   13914:	andeq	r1, r3, r0, lsr #1
   13918:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1391c:	andeq	r0, r0, r3, lsl r7
   13920:	andeq	r1, r3, ip, lsr #1
   13924:	andeq	r1, r3, r8, lsr #5
   13928:	mov	fp, #0
   1392c:	mov	lr, #0
   13930:	pop	{r1}		; (ldr r1, [sp], #4)
   13934:	mov	r2, sp
   13938:	push	{r2}		; (str r2, [sp, #-4]!)
   1393c:	push	{r0}		; (str r0, [sp, #-4]!)
   13940:	ldr	ip, [pc, #16]	; 13958 <__assert_fail@plt+0xcb4>
   13944:	push	{ip}		; (str ip, [sp, #-4]!)
   13948:	ldr	r0, [pc, #12]	; 1395c <__assert_fail@plt+0xcb8>
   1394c:	ldr	r3, [pc, #12]	; 13960 <__assert_fail@plt+0xcbc>
   13950:	bl	1280c <__libc_start_main@plt>
   13954:	bl	12c38 <abort@plt>
   13958:	andeq	r0, r3, r8, ror #2
   1395c:			; <UNDEFINED> instruction: 0x00012cb0
   13960:	andeq	r0, r3, r8, lsl #2
   13964:	ldr	r3, [pc, #20]	; 13980 <__assert_fail@plt+0xcdc>
   13968:	ldr	r2, [pc, #20]	; 13984 <__assert_fail@plt+0xce0>
   1396c:	add	r3, pc, r3
   13970:	ldr	r2, [r3, r2]
   13974:	cmp	r2, #0
   13978:	bxeq	lr
   1397c:	b	12860 <__gmon_start__@plt>
   13980:	muleq	r3, ip, r3
   13984:	andeq	r0, r0, ip, ror #5
   13988:	ldr	r0, [pc, #24]	; 139a8 <__assert_fail@plt+0xd04>
   1398c:	ldr	r3, [pc, #24]	; 139ac <__assert_fail@plt+0xd08>
   13990:	cmp	r3, r0
   13994:	bxeq	lr
   13998:	ldr	r3, [pc, #16]	; 139b0 <__assert_fail@plt+0xd0c>
   1399c:	cmp	r3, #0
   139a0:	bxeq	lr
   139a4:	bx	r3
   139a8:	strdeq	r6, [r4], -r4
   139ac:	strdeq	r6, [r4], -r4
   139b0:	andeq	r0, r0, r0
   139b4:	ldr	r0, [pc, #36]	; 139e0 <__assert_fail@plt+0xd3c>
   139b8:	ldr	r1, [pc, #36]	; 139e4 <__assert_fail@plt+0xd40>
   139bc:	sub	r1, r1, r0
   139c0:	asr	r1, r1, #2
   139c4:	add	r1, r1, r1, lsr #31
   139c8:	asrs	r1, r1, #1
   139cc:	bxeq	lr
   139d0:	ldr	r3, [pc, #16]	; 139e8 <__assert_fail@plt+0xd44>
   139d4:	cmp	r3, #0
   139d8:	bxeq	lr
   139dc:	bx	r3
   139e0:	strdeq	r6, [r4], -r4
   139e4:	strdeq	r6, [r4], -r4
   139e8:	andeq	r0, r0, r0
   139ec:	push	{r4, lr}
   139f0:	ldr	r4, [pc, #24]	; 13a10 <__assert_fail@plt+0xd6c>
   139f4:	ldrb	r3, [r4]
   139f8:	cmp	r3, #0
   139fc:	popne	{r4, pc}
   13a00:	bl	13988 <__assert_fail@plt+0xce4>
   13a04:	mov	r3, #1
   13a08:	strb	r3, [r4]
   13a0c:	pop	{r4, pc}
   13a10:	andeq	r6, r4, r0, lsl #4
   13a14:	b	139b4 <__assert_fail@plt+0xd10>
   13a18:	sub	r0, r0, #1
   13a1c:	cmp	r0, #40	; 0x28
   13a20:	ldrls	r3, [pc, #8]	; 13a30 <__assert_fail@plt+0xd8c>
   13a24:	ldrls	r0, [r3, r0, lsl #2]
   13a28:	movhi	r0, #0
   13a2c:	bx	lr
   13a30:	muleq	r3, r0, r1
   13a34:	ldr	r3, [pc, #16]	; 13a4c <__assert_fail@plt+0xda8>
   13a38:	ldr	r3, [r3, #4]
   13a3c:	tst	r3, #4
   13a40:	bxeq	lr
   13a44:	ldr	r0, [pc, #4]	; 13a50 <__assert_fail@plt+0xdac>
   13a48:	b	21e08 <__assert_fail@plt+0xf164>
   13a4c:	andeq	r6, r4, ip, ror #8
   13a50:	andeq	r0, r3, r8, lsl r3
   13a54:	b	13a34 <__assert_fail@plt+0xd90>
   13a58:	push	{r4, r5, r6, r7, r8, lr}
   13a5c:	sub	sp, sp, #16
   13a60:	ldr	r5, [pc, #408]	; 13c00 <__assert_fail@plt+0xf5c>
   13a64:	mov	r1, #64	; 0x40
   13a68:	ldr	r3, [r5]
   13a6c:	str	r3, [sp, #12]
   13a70:	bl	128fc <strchr@plt>
   13a74:	subs	r4, r0, #0
   13a78:	beq	13b1c <__assert_fail@plt+0xe78>
   13a7c:	ldr	r3, [pc, #384]	; 13c04 <__assert_fail@plt+0xf60>
   13a80:	add	r8, r4, #1
   13a84:	mov	r1, r8
   13a88:	ldr	r0, [r3, #28]
   13a8c:	ldr	r2, [pc, #372]	; 13c08 <__assert_fail@plt+0xf64>
   13a90:	mov	r3, #0
   13a94:	bl	1c80c <__assert_fail@plt+0x9b68>
   13a98:	subs	r4, r0, #0
   13a9c:	beq	13b74 <__assert_fail@plt+0xed0>
   13aa0:	ldr	r1, [pc, #356]	; 13c0c <__assert_fail@plt+0xf68>
   13aa4:	bl	12a04 <gpgrt_fopen@plt>
   13aa8:	subs	r7, r0, #0
   13aac:	beq	13b94 <__assert_fail@plt+0xef0>
   13ab0:	mov	r6, #0
   13ab4:	mov	r2, r7
   13ab8:	add	r1, sp, #8
   13abc:	add	r0, sp, #4
   13ac0:	str	r6, [sp, #4]
   13ac4:	str	r6, [sp, #8]
   13ac8:	bl	12a88 <gpgrt_getline@plt>
   13acc:	cmp	r0, r6
   13ad0:	blt	13b38 <__assert_fail@plt+0xe94>
   13ad4:	mov	r0, r7
   13ad8:	bl	12788 <gpgrt_fclose@plt>
   13adc:	mov	r0, r4
   13ae0:	bl	125e4 <gcry_free@plt>
   13ae4:	ldr	r4, [sp, #4]
   13ae8:	mov	r1, #10
   13aec:	mov	r0, r4
   13af0:	bl	128fc <strchr@plt>
   13af4:	cmp	r0, #0
   13af8:	strbne	r6, [r0]
   13afc:	ldrne	r4, [sp, #4]
   13b00:	mov	r0, r4
   13b04:	bl	1c54c <__assert_fail@plt+0x98a8>
   13b08:	ldr	r0, [sp, #4]
   13b0c:	bl	26b4c <__assert_fail@plt+0x13ea8>
   13b10:	subs	r4, r0, #0
   13b14:	ldrne	r4, [sp, #4]
   13b18:	beq	13be4 <__assert_fail@plt+0xf40>
   13b1c:	ldr	r2, [sp, #12]
   13b20:	ldr	r3, [r5]
   13b24:	mov	r0, r4
   13b28:	cmp	r2, r3
   13b2c:	bne	13bfc <__assert_fail@plt+0xf58>
   13b30:	add	sp, sp, #16
   13b34:	pop	{r4, r5, r6, r7, r8, pc}
   13b38:	bl	12914 <gpg_err_code_from_syserror@plt>
   13b3c:	uxth	r0, r0
   13b40:	bl	12b3c <gpg_strerror@plt>
   13b44:	mov	r1, r4
   13b48:	mov	r2, r0
   13b4c:	ldr	r0, [pc, #188]	; 13c10 <__assert_fail@plt+0xf6c>
   13b50:	bl	21cbc <__assert_fail@plt+0xf018>
   13b54:	ldr	r0, [sp, #4]
   13b58:	bl	125e4 <gcry_free@plt>
   13b5c:	mov	r0, r7
   13b60:	bl	12788 <gpgrt_fclose@plt>
   13b64:	mov	r0, r4
   13b68:	bl	125e4 <gcry_free@plt>
   13b6c:	mov	r4, r6
   13b70:	b	13b1c <__assert_fail@plt+0xe78>
   13b74:	bl	12914 <gpg_err_code_from_syserror@plt>
   13b78:	uxth	r0, r0
   13b7c:	bl	12b3c <gpg_strerror@plt>
   13b80:	ldr	r1, [pc, #140]	; 13c14 <__assert_fail@plt+0xf70>
   13b84:	mov	r2, r0
   13b88:	ldr	r0, [pc, #136]	; 13c18 <__assert_fail@plt+0xf74>
   13b8c:	bl	21cbc <__assert_fail@plt+0xf018>
   13b90:	b	13b1c <__assert_fail@plt+0xe78>
   13b94:	bl	12914 <gpg_err_code_from_syserror@plt>
   13b98:	cmp	r0, #0
   13b9c:	beq	13bc0 <__assert_fail@plt+0xf1c>
   13ba0:	ldr	r3, [pc, #116]	; 13c1c <__assert_fail@plt+0xf78>
   13ba4:	uxth	r0, r0
   13ba8:	cmp	r0, r3
   13bac:	bne	13bc0 <__assert_fail@plt+0xf1c>
   13bb0:	mov	r1, r8
   13bb4:	ldr	r0, [pc, #100]	; 13c20 <__assert_fail@plt+0xf7c>
   13bb8:	bl	21c58 <__assert_fail@plt+0xefb4>
   13bbc:	b	13bd4 <__assert_fail@plt+0xf30>
   13bc0:	bl	12b3c <gpg_strerror@plt>
   13bc4:	mov	r1, r4
   13bc8:	mov	r2, r0
   13bcc:	ldr	r0, [pc, #60]	; 13c10 <__assert_fail@plt+0xf6c>
   13bd0:	bl	21cbc <__assert_fail@plt+0xf018>
   13bd4:	mov	r0, r4
   13bd8:	bl	125e4 <gcry_free@plt>
   13bdc:	mov	r4, #0
   13be0:	b	13b1c <__assert_fail@plt+0xe78>
   13be4:	mov	r1, r8
   13be8:	ldr	r0, [pc, #52]	; 13c24 <__assert_fail@plt+0xf80>
   13bec:	bl	21cbc <__assert_fail@plt+0xf018>
   13bf0:	ldr	r0, [sp, #4]
   13bf4:	bl	125e4 <gcry_free@plt>
   13bf8:	b	13b1c <__assert_fail@plt+0xe78>
   13bfc:	bl	1262c <__stack_chk_fail@plt>
   13c00:	strdeq	r5, [r4], -r8
   13c04:	andeq	r6, r4, ip, ror #8
   13c08:	andeq	r0, r3, ip, lsr #6
   13c0c:	strdeq	r2, [r3], -r0
   13c10:	andeq	r0, r3, r4, lsr #7
   13c14:	andeq	r0, r3, r4, lsr r2
   13c18:	andeq	r0, r3, r0, asr #6
   13c1c:	andeq	r8, r0, r1, asr r0
   13c20:	andeq	r0, r3, r0, ror #6
   13c24:			; <UNDEFINED> instruction: 0x000303bc
   13c28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c2c:	mov	r4, #0
   13c30:	ldr	r6, [pc, #444]	; 13df4 <__assert_fail@plt+0x1150>
   13c34:	sub	sp, sp, #40	; 0x28
   13c38:	mov	r7, r0
   13c3c:	ldr	r3, [r6]
   13c40:	mov	sl, r1
   13c44:	str	r4, [r0]
   13c48:	ldr	r1, [pc, #424]	; 13df8 <__assert_fail@plt+0x1154>
   13c4c:	mov	r0, r4
   13c50:	mov	r8, r2
   13c54:	str	r3, [sp, #36]	; 0x24
   13c58:	bl	12920 <gpgrt_fopenmem@plt>
   13c5c:	subs	r5, r0, #0
   13c60:	beq	13dc4 <__assert_fail@plt+0x1120>
   13c64:	ldr	r9, [pc, #400]	; 13dfc <__assert_fail@plt+0x1158>
   13c68:	mov	r1, r4
   13c6c:	add	r0, sp, #20
   13c70:	bl	27b6c <__assert_fail@plt+0x14ec8>
   13c74:	add	r0, sp, #20
   13c78:	ldr	r1, [pc, #384]	; 13e00 <__assert_fail@plt+0x115c>
   13c7c:	bl	27bcc <__assert_fail@plt+0x14f28>
   13c80:	ldr	r3, [r9]
   13c84:	cmp	r3, #0
   13c88:	beq	13db4 <__assert_fail@plt+0x1110>
   13c8c:	cmp	r3, #1
   13c90:	bgt	13da4 <__assert_fail@plt+0x1100>
   13c94:	ldr	r1, [pc, #360]	; 13e04 <__assert_fail@plt+0x1160>
   13c98:	add	r0, sp, #20
   13c9c:	bl	27bcc <__assert_fail@plt+0x14f28>
   13ca0:	ldr	r1, [pc, #352]	; 13e08 <__assert_fail@plt+0x1164>
   13ca4:	add	r0, sp, #20
   13ca8:	bl	27bcc <__assert_fail@plt+0x14f28>
   13cac:	ldr	r1, [pc, #344]	; 13e0c <__assert_fail@plt+0x1168>
   13cb0:	add	r0, sp, #20
   13cb4:	bl	27bcc <__assert_fail@plt+0x14f28>
   13cb8:	ldr	r1, [pc, #336]	; 13e10 <__assert_fail@plt+0x116c>
   13cbc:	add	r0, sp, #20
   13cc0:	bl	27bcc <__assert_fail@plt+0x14f28>
   13cc4:	ldr	r1, [pc, #328]	; 13e14 <__assert_fail@plt+0x1170>
   13cc8:	add	r0, sp, #20
   13ccc:	bl	27bcc <__assert_fail@plt+0x14f28>
   13cd0:	ldr	r1, [pc, #320]	; 13e18 <__assert_fail@plt+0x1174>
   13cd4:	add	r0, sp, #20
   13cd8:	bl	27bcc <__assert_fail@plt+0x14f28>
   13cdc:	ldr	r1, [pc, #312]	; 13e1c <__assert_fail@plt+0x1178>
   13ce0:	add	r0, sp, #20
   13ce4:	bl	27bcc <__assert_fail@plt+0x14f28>
   13ce8:	mov	r1, r8
   13cec:	add	r0, sp, #20
   13cf0:	bl	27bcc <__assert_fail@plt+0x14f28>
   13cf4:	ldr	r1, [pc, #292]	; 13e20 <__assert_fail@plt+0x117c>
   13cf8:	add	r0, sp, #20
   13cfc:	bl	27bcc <__assert_fail@plt+0x14f28>
   13d00:	ldr	r1, [pc, #284]	; 13e24 <__assert_fail@plt+0x1180>
   13d04:	add	r0, sp, #20
   13d08:	bl	27bcc <__assert_fail@plt+0x14f28>
   13d0c:	mov	r1, #0
   13d10:	add	r0, sp, #20
   13d14:	bl	27bcc <__assert_fail@plt+0x14f28>
   13d18:	add	r0, sp, #20
   13d1c:	mov	r1, #0
   13d20:	bl	27cac <__assert_fail@plt+0x15008>
   13d24:	subs	r8, r0, #0
   13d28:	beq	13de4 <__assert_fail@plt+0x1140>
   13d2c:	ldr	r1, [pc, #244]	; 13e28 <__assert_fail@plt+0x1184>
   13d30:	mov	r3, #0
   13d34:	str	r5, [sp]
   13d38:	stmib	sp, {r1, r3}
   13d3c:	mov	r2, sl
   13d40:	ldr	r0, [r9, #24]
   13d44:	mov	r1, r8
   13d48:	bl	2c71c <__assert_fail@plt+0x19a78>
   13d4c:	subs	r4, r0, #0
   13d50:	bne	13d90 <__assert_fail@plt+0x10ec>
   13d54:	mov	r0, r5
   13d58:	bl	12bb4 <gpgrt_rewind@plt>
   13d5c:	str	r5, [r7]
   13d60:	mov	r5, r4
   13d64:	mov	r0, r5
   13d68:	bl	12788 <gpgrt_fclose@plt>
   13d6c:	mov	r0, r8
   13d70:	bl	125e4 <gcry_free@plt>
   13d74:	ldr	r2, [sp, #36]	; 0x24
   13d78:	ldr	r3, [r6]
   13d7c:	mov	r0, r4
   13d80:	cmp	r2, r3
   13d84:	bne	13df0 <__assert_fail@plt+0x114c>
   13d88:	add	sp, sp, #40	; 0x28
   13d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d90:	bl	12b3c <gpg_strerror@plt>
   13d94:	mov	r1, r0
   13d98:	ldr	r0, [pc, #140]	; 13e2c <__assert_fail@plt+0x1188>
   13d9c:	bl	21cbc <__assert_fail@plt+0xf018>
   13da0:	b	13d64 <__assert_fail@plt+0x10c0>
   13da4:	ldr	r1, [pc, #132]	; 13e30 <__assert_fail@plt+0x118c>
   13da8:	add	r0, sp, #20
   13dac:	bl	27bcc <__assert_fail@plt+0x14f28>
   13db0:	b	13c94 <__assert_fail@plt+0xff0>
   13db4:	ldr	r1, [pc, #120]	; 13e34 <__assert_fail@plt+0x1190>
   13db8:	add	r0, sp, #20
   13dbc:	bl	27bcc <__assert_fail@plt+0x14f28>
   13dc0:	b	13c94 <__assert_fail@plt+0xff0>
   13dc4:	bl	12914 <gpg_err_code_from_syserror@plt>
   13dc8:	uxth	r4, r0
   13dcc:	mov	r0, r4
   13dd0:	bl	12b3c <gpg_strerror@plt>
   13dd4:	mov	r1, r0
   13dd8:	ldr	r0, [pc, #88]	; 13e38 <__assert_fail@plt+0x1194>
   13ddc:	bl	21cbc <__assert_fail@plt+0xf018>
   13de0:	b	13d74 <__assert_fail@plt+0x10d0>
   13de4:	bl	12914 <gpg_err_code_from_syserror@plt>
   13de8:	uxth	r4, r0
   13dec:	b	13d64 <__assert_fail@plt+0x10c0>
   13df0:	bl	1262c <__stack_chk_fail@plt>
   13df4:	strdeq	r5, [r4], -r8
   13df8:	strdeq	r0, [r3], -r4
   13dfc:	andeq	r6, r4, ip, ror #8
   13e00:	andeq	r0, r3, ip, lsl r4
   13e04:	andeq	r0, r3, r0, asr #8
   13e08:	andeq	r0, r3, r8, asr #8
   13e0c:	andeq	r0, r3, r8, asr r4
   13e10:	andeq	r0, r3, r8, ror #8
   13e14:	andeq	r0, r3, r8, ror r4
   13e18:	andeq	r0, r3, r0, lsl #9
   13e1c:	andeq	r0, r3, r4, lsl #9
   13e20:	muleq	r3, r8, r4
   13e24:	andeq	r0, r3, r4, ror ip
   13e28:	andeq	r3, r1, r4, lsr sl
   13e2c:	andeq	r0, r3, r4, lsr #9
   13e30:	andeq	r0, r3, r4, lsr r4
   13e34:	andeq	r0, r3, ip, lsr #8
   13e38:	strdeq	r0, [r3], -r8
   13e3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e40:	mov	r5, #0
   13e44:	ldr	r8, [pc, #396]	; 13fd8 <__assert_fail@plt+0x1334>
   13e48:	ldr	r7, [pc, #396]	; 13fdc <__assert_fail@plt+0x1338>
   13e4c:	sub	sp, sp, #120	; 0x78
   13e50:	ldr	r3, [r8]
   13e54:	mov	r9, r0
   13e58:	str	r5, [r0]
   13e5c:	ldr	r0, [r7, #28]
   13e60:	str	r3, [sp, #116]	; 0x74
   13e64:	str	r5, [sp, #4]
   13e68:	bl	127ac <opendir@plt>
   13e6c:	subs	r6, r0, #0
   13e70:	ldrne	sl, [pc, #360]	; 13fe0 <__assert_fail@plt+0x133c>
   13e74:	beq	13fc0 <__assert_fail@plt+0x131c>
   13e78:	mov	r0, r6
   13e7c:	bl	12b24 <readdir64@plt>
   13e80:	subs	r4, r0, #0
   13e84:	beq	13f58 <__assert_fail@plt+0x12b4>
   13e88:	ldrb	r3, [r4, #19]
   13e8c:	cmp	r3, #46	; 0x2e
   13e90:	beq	13e78 <__assert_fail@plt+0x11d4>
   13e94:	add	r4, r4, #19
   13e98:	mov	r0, r4
   13e9c:	mov	r1, #46	; 0x2e
   13ea0:	bl	128fc <strchr@plt>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13e78 <__assert_fail@plt+0x11d4>
   13eac:	mov	r0, r5
   13eb0:	bl	125e4 <gcry_free@plt>
   13eb4:	mov	r1, r4
   13eb8:	mov	r2, #0
   13ebc:	ldr	r0, [r7, #28]
   13ec0:	bl	1c80c <__assert_fail@plt+0x9b68>
   13ec4:	subs	r5, r0, #0
   13ec8:	beq	13f9c <__assert_fail@plt+0x12f8>
   13ecc:	add	r2, sp, #8
   13ed0:	mov	r1, r5
   13ed4:	mov	r0, #3
   13ed8:	bl	12bfc <__xstat64@plt>
   13edc:	cmp	r0, #0
   13ee0:	bne	13f2c <__assert_fail@plt+0x1288>
   13ee4:	ldr	r3, [sp, #24]
   13ee8:	and	r3, r3, #61440	; 0xf000
   13eec:	cmp	r3, #16384	; 0x4000
   13ef0:	bne	13e78 <__assert_fail@plt+0x11d4>
   13ef4:	mov	r1, r5
   13ef8:	add	r0, sp, #4
   13efc:	bl	1d5f0 <__assert_fail@plt+0xa94c>
   13f00:	cmp	r0, #0
   13f04:	bne	13e78 <__assert_fail@plt+0x11d4>
   13f08:	bl	12914 <gpg_err_code_from_syserror@plt>
   13f0c:	uxth	r4, r0
   13f10:	mov	r0, r4
   13f14:	bl	12b3c <gpg_strerror@plt>
   13f18:	ldr	r1, [pc, #196]	; 13fe4 <__assert_fail@plt+0x1340>
   13f1c:	mov	r2, r0
   13f20:	ldr	r0, [pc, #192]	; 13fe8 <__assert_fail@plt+0x1344>
   13f24:	bl	21cbc <__assert_fail@plt+0xf018>
   13f28:	b	13f64 <__assert_fail@plt+0x12c0>
   13f2c:	bl	12914 <gpg_err_code_from_syserror@plt>
   13f30:	uxth	r0, r0
   13f34:	bl	12b3c <gpg_strerror@plt>
   13f38:	mov	r1, r5
   13f3c:	mov	r2, r0
   13f40:	mov	r0, sl
   13f44:	bl	21cbc <__assert_fail@plt+0xf018>
   13f48:	mov	r0, r6
   13f4c:	bl	12b24 <readdir64@plt>
   13f50:	subs	r4, r0, #0
   13f54:	bne	13e88 <__assert_fail@plt+0x11e4>
   13f58:	ldr	r3, [sp, #4]
   13f5c:	str	r4, [sp, #4]
   13f60:	str	r3, [r9]
   13f64:	ldr	r0, [sp, #4]
   13f68:	bl	1d550 <__assert_fail@plt+0xa8ac>
   13f6c:	mov	r0, r6
   13f70:	bl	12c80 <closedir@plt>
   13f74:	mov	r6, r5
   13f78:	mov	r0, r6
   13f7c:	bl	125e4 <gcry_free@plt>
   13f80:	ldr	r2, [sp, #116]	; 0x74
   13f84:	ldr	r3, [r8]
   13f88:	mov	r0, r4
   13f8c:	cmp	r2, r3
   13f90:	bne	13fd4 <__assert_fail@plt+0x1330>
   13f94:	add	sp, sp, #120	; 0x78
   13f98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f9c:	bl	12914 <gpg_err_code_from_syserror@plt>
   13fa0:	uxth	r4, r0
   13fa4:	mov	r0, r4
   13fa8:	bl	12b3c <gpg_strerror@plt>
   13fac:	ldr	r1, [pc, #48]	; 13fe4 <__assert_fail@plt+0x1340>
   13fb0:	mov	r2, r0
   13fb4:	ldr	r0, [pc, #48]	; 13fec <__assert_fail@plt+0x1348>
   13fb8:	bl	21cbc <__assert_fail@plt+0xf018>
   13fbc:	b	13f64 <__assert_fail@plt+0x12c0>
   13fc0:	bl	12914 <gpg_err_code_from_syserror@plt>
   13fc4:	uxth	r4, r0
   13fc8:	ldr	r0, [sp, #4]
   13fcc:	bl	1d550 <__assert_fail@plt+0xa8ac>
   13fd0:	b	13f78 <__assert_fail@plt+0x12d4>
   13fd4:	bl	1262c <__stack_chk_fail@plt>
   13fd8:	strdeq	r5, [r4], -r8
   13fdc:	andeq	r6, r4, ip, ror #8
   13fe0:			; <UNDEFINED> instruction: 0x000304bc
   13fe4:	andeq	r0, r3, ip, asr #4
   13fe8:	ldrdeq	r0, [r3], -r8
   13fec:	andeq	r0, r3, r0, asr #6
   13ff0:	push	{r4, lr}
   13ff4:	mov	r5, r0
   13ff8:	mov	r0, #2
   13ffc:	bl	12890 <_gpgrt_get_std_stream@plt>
   14000:	mov	r4, r0
   14004:	mov	r0, #11
   14008:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1400c:	mov	r3, r5
   14010:	ldr	r1, [pc, #16]	; 14028 <__assert_fail@plt+0x1384>
   14014:	mov	r2, r0
   14018:	mov	r0, r4
   1401c:	bl	12bc0 <gpgrt_fprintf@plt>
   14020:	mov	r0, #2
   14024:	bl	128b4 <exit@plt>
   14028:	strdeq	r0, [r3], -ip
   1402c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14030:	sub	sp, sp, #1040	; 0x410
   14034:	ldr	sl, [pc, #648]	; 142c4 <__assert_fail@plt+0x1620>
   14038:	sub	sp, sp, #12
   1403c:	mov	fp, r3
   14040:	mov	r4, #0
   14044:	ldr	r3, [sl]
   14048:	str	r2, [sp, #4]
   1404c:	str	r4, [r2]
   14050:	mov	r6, r1
   14054:	mov	r2, r4
   14058:	str	r4, [fp]
   1405c:	ldr	r1, [pc, #612]	; 142c8 <__assert_fail@plt+0x1624>
   14060:	str	r3, [sp, #1044]	; 0x414
   14064:	bl	1c80c <__assert_fail@plt+0x9b68>
   14068:	subs	r8, r0, #0
   1406c:	beq	14238 <__assert_fail@plt+0x1594>
   14070:	add	r0, sp, #20
   14074:	mov	r1, #20
   14078:	bl	12b84 <gcry_create_nonce@plt>
   1407c:	add	r0, sp, #20
   14080:	mov	r1, #160	; 0xa0
   14084:	bl	26030 <__assert_fail@plt+0x1338c>
   14088:	str	r4, [sp, #24]
   1408c:	str	r4, [sp, #28]
   14090:	str	r4, [sp, #32]
   14094:	str	r4, [sp, #36]	; 0x24
   14098:	str	r4, [sp, #20]
   1409c:	subs	r9, r0, #0
   140a0:	beq	14268 <__assert_fail@plt+0x15c4>
   140a4:	mov	r3, r4
   140a8:	mov	r2, r9
   140ac:	ldr	r1, [pc, #536]	; 142cc <__assert_fail@plt+0x1628>
   140b0:	mov	r0, r8
   140b4:	bl	1cdb0 <__assert_fail@plt+0xa10c>
   140b8:	subs	r7, r0, #0
   140bc:	beq	14188 <__assert_fail@plt+0x14e4>
   140c0:	ldr	r1, [pc, #520]	; 142d0 <__assert_fail@plt+0x162c>
   140c4:	bl	12a04 <gpgrt_fopen@plt>
   140c8:	subs	r5, r0, #0
   140cc:	beq	14214 <__assert_fail@plt+0x1570>
   140d0:	mov	r0, r6
   140d4:	bl	12bb4 <gpgrt_rewind@plt>
   140d8:	add	r4, sp, #16
   140dc:	b	14114 <__assert_fail@plt+0x1470>
   140e0:	ldr	r2, [sp, #12]
   140e4:	cmp	r2, #0
   140e8:	beq	141a0 <__assert_fail@plt+0x14fc>
   140ec:	mov	r3, r4
   140f0:	add	r1, sp, #20
   140f4:	mov	r0, r5
   140f8:	bl	12470 <gpgrt_write@plt>
   140fc:	cmp	r0, #0
   14100:	bne	14284 <__assert_fail@plt+0x15e0>
   14104:	ldr	r2, [sp, #16]
   14108:	ldr	r3, [sp, #12]
   1410c:	cmp	r2, r3
   14110:	bne	142a8 <__assert_fail@plt+0x1604>
   14114:	add	r3, sp, #12
   14118:	mov	r2, #1024	; 0x400
   1411c:	add	r1, sp, #20
   14120:	mov	r0, r6
   14124:	bl	125cc <gpgrt_read@plt>
   14128:	cmp	r0, #0
   1412c:	beq	140e0 <__assert_fail@plt+0x143c>
   14130:	bl	12914 <gpg_err_code_from_syserror@plt>
   14134:	uxth	r4, r0
   14138:	mov	r0, r6
   1413c:	bl	12584 <gpgrt_fname_get@plt>
   14140:	mov	r6, r0
   14144:	mov	r0, r4
   14148:	bl	12b3c <gpg_strerror@plt>
   1414c:	mov	r1, r6
   14150:	mov	r2, r0
   14154:	ldr	r0, [pc, #376]	; 142d4 <__assert_fail@plt+0x1630>
   14158:	bl	21cbc <__assert_fail@plt+0xf018>
   1415c:	cmp	r4, #0
   14160:	beq	141a0 <__assert_fail@plt+0x14fc>
   14164:	mov	r0, r5
   14168:	bl	12788 <gpgrt_fclose@plt>
   1416c:	mov	r0, r7
   14170:	bl	22a2c <__assert_fail@plt+0xfd88>
   14174:	mov	r0, r9
   14178:	bl	125e4 <gcry_free@plt>
   1417c:	mov	r0, r7
   14180:	bl	125e4 <gcry_free@plt>
   14184:	b	141c0 <__assert_fail@plt+0x151c>
   14188:	bl	12914 <gpg_err_code_from_syserror@plt>
   1418c:	cmp	r0, #0
   14190:	movne	r5, r7
   14194:	uxthne	r4, r0
   14198:	bne	1415c <__assert_fail@plt+0x14b8>
   1419c:	mov	r5, r7
   141a0:	mov	r0, r5
   141a4:	bl	12788 <gpgrt_fclose@plt>
   141a8:	cmp	r0, #0
   141ac:	bne	141e8 <__assert_fail@plt+0x1544>
   141b0:	ldr	r3, [sp, #4]
   141b4:	mov	r4, #0
   141b8:	str	r9, [r3]
   141bc:	str	r7, [fp]
   141c0:	mov	r0, r8
   141c4:	bl	125e4 <gcry_free@plt>
   141c8:	ldr	r2, [sp, #1044]	; 0x414
   141cc:	ldr	r3, [sl]
   141d0:	mov	r0, r4
   141d4:	cmp	r2, r3
   141d8:	bne	142c0 <__assert_fail@plt+0x161c>
   141dc:	add	sp, sp, #1040	; 0x410
   141e0:	add	sp, sp, #12
   141e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141e8:	bl	12914 <gpg_err_code_from_syserror@plt>
   141ec:	uxth	r4, r0
   141f0:	mov	r0, r4
   141f4:	bl	12b3c <gpg_strerror@plt>
   141f8:	mov	r1, r7
   141fc:	mov	r2, r0
   14200:	ldr	r0, [pc, #208]	; 142d8 <__assert_fail@plt+0x1634>
   14204:	bl	21cbc <__assert_fail@plt+0xf018>
   14208:	cmp	r4, #0
   1420c:	beq	141b0 <__assert_fail@plt+0x150c>
   14210:	b	14174 <__assert_fail@plt+0x14d0>
   14214:	bl	12914 <gpg_err_code_from_syserror@plt>
   14218:	uxth	r4, r0
   1421c:	mov	r0, r4
   14220:	bl	12b3c <gpg_strerror@plt>
   14224:	mov	r1, r7
   14228:	mov	r2, r0
   1422c:	ldr	r0, [pc, #168]	; 142dc <__assert_fail@plt+0x1638>
   14230:	bl	21cbc <__assert_fail@plt+0xf018>
   14234:	b	1415c <__assert_fail@plt+0x14b8>
   14238:	bl	12914 <gpg_err_code_from_syserror@plt>
   1423c:	cmp	r0, #0
   14240:	beq	14258 <__assert_fail@plt+0x15b4>
   14244:	uxth	r4, r0
   14248:	mov	r5, r8
   1424c:	mov	r9, r8
   14250:	mov	r7, r8
   14254:	b	1415c <__assert_fail@plt+0x14b8>
   14258:	mov	r5, #0
   1425c:	mov	r9, r5
   14260:	mov	r7, r5
   14264:	b	141a0 <__assert_fail@plt+0x14fc>
   14268:	bl	12914 <gpg_err_code_from_syserror@plt>
   1426c:	cmp	r0, #0
   14270:	beq	14258 <__assert_fail@plt+0x15b4>
   14274:	uxth	r4, r0
   14278:	mov	r5, r9
   1427c:	mov	r7, r9
   14280:	b	1415c <__assert_fail@plt+0x14b8>
   14284:	bl	12914 <gpg_err_code_from_syserror@plt>
   14288:	uxth	r4, r0
   1428c:	mov	r0, r4
   14290:	bl	12b3c <gpg_strerror@plt>
   14294:	mov	r1, r7
   14298:	mov	r2, r0
   1429c:	ldr	r0, [pc, #60]	; 142e0 <__assert_fail@plt+0x163c>
   142a0:	bl	21cbc <__assert_fail@plt+0xf018>
   142a4:	b	1415c <__assert_fail@plt+0x14b8>
   142a8:	ldr	r2, [pc, #52]	; 142e4 <__assert_fail@plt+0x1640>
   142ac:	mov	r1, r7
   142b0:	ldr	r0, [pc, #40]	; 142e0 <__assert_fail@plt+0x163c>
   142b4:	bl	21cbc <__assert_fail@plt+0xf018>
   142b8:	ldr	r4, [pc, #40]	; 142e8 <__assert_fail@plt+0x1644>
   142bc:	b	14164 <__assert_fail@plt+0x14c0>
   142c0:	bl	1262c <__stack_chk_fail@plt>
   142c4:	strdeq	r5, [r4], -r8
   142c8:	andeq	r1, r3, r0, asr fp
   142cc:	andeq	r2, r3, ip, lsr #28
   142d0:	andeq	r0, r3, r4, lsl r5
   142d4:	andeq	r0, r3, r4, lsr #7
   142d8:	andeq	r0, r3, r4, ror #10
   142dc:	andeq	r0, r3, r4, lsr #10
   142e0:	andeq	r0, r3, r0, asr #10
   142e4:	andeq	r0, r3, r8, asr r5
   142e8:	andeq	r8, r0, r1, lsr r0
   142ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f0:	tst	r3, #1
   142f4:	sub	sp, sp, #148	; 0x94
   142f8:	ldr	sl, [pc, #3804]	; 151dc <__assert_fail@plt+0x2538>
   142fc:	mov	r3, #0
   14300:	str	r3, [sp, #72]	; 0x48
   14304:	str	r3, [sp, #68]	; 0x44
   14308:	str	r3, [sp, #64]	; 0x40
   1430c:	ldrbne	r3, [sp, #72]	; 0x48
   14310:	ldr	r0, [sl]
   14314:	mov	r5, r1
   14318:	orrne	r3, r3, #1
   1431c:	str	r0, [sp, #140]	; 0x8c
   14320:	ldr	r1, [pc, #3768]	; 151e0 <__assert_fail@plt+0x253c>
   14324:	mov	r0, r5
   14328:	strbne	r3, [sp, #72]	; 0x48
   1432c:	str	r2, [sp, #16]
   14330:	bl	124b8 <strcmp@plt>
   14334:	subs	r9, r0, #0
   14338:	beq	145c4 <__assert_fail@plt+0x1920>
   1433c:	ldr	r1, [pc, #4016]	; 152f4 <__assert_fail@plt+0x2650>
   14340:	mov	r0, r5
   14344:	bl	124b8 <strcmp@plt>
   14348:	subs	r1, r0, #0
   1434c:	bne	14584 <__assert_fail@plt+0x18e0>
   14350:	ldr	r2, [sp, #16]
   14354:	add	r0, sp, #56	; 0x38
   14358:	bl	2df64 <__assert_fail@plt+0x1b2c0>
   1435c:	subs	r3, r0, #0
   14360:	str	r3, [sp, #24]
   14364:	bne	14a34 <__assert_fail@plt+0x1d90>
   14368:	ldr	r4, [pc, #4016]	; 15320 <__assert_fail@plt+0x267c>
   1436c:	ldr	r3, [r4, #4]
   14370:	cmp	r3, #0
   14374:	bne	149dc <__assert_fail@plt+0x1d38>
   14378:	ldr	r1, [pc, #3684]	; 151e4 <__assert_fail@plt+0x2540>
   1437c:	ldr	r0, [sp, #56]	; 0x38
   14380:	bl	2d56c <__assert_fail@plt+0x1a8c8>
   14384:	cmp	r0, #0
   14388:	beq	149fc <__assert_fail@plt+0x1d58>
   1438c:	bl	2d4e4 <__assert_fail@plt+0x1a840>
   14390:	subs	r5, r0, #0
   14394:	beq	149fc <__assert_fail@plt+0x1d58>
   14398:	ldr	r1, [pc, #3656]	; 151e8 <__assert_fail@plt+0x2544>
   1439c:	bl	124b8 <strcmp@plt>
   143a0:	cmp	r0, #0
   143a4:	bne	147c0 <__assert_fail@plt+0x1b1c>
   143a8:	ldr	r1, [pc, #3644]	; 151ec <__assert_fail@plt+0x2548>
   143ac:	ldr	r0, [sp, #56]	; 0x38
   143b0:	bl	2d56c <__assert_fail@plt+0x1a8c8>
   143b4:	cmp	r0, #0
   143b8:	beq	14a48 <__assert_fail@plt+0x1da4>
   143bc:	bl	2d4e4 <__assert_fail@plt+0x1a840>
   143c0:	cmp	r0, #0
   143c4:	beq	14a48 <__assert_fail@plt+0x1da4>
   143c8:	bl	26b4c <__assert_fail@plt+0x13ea8>
   143cc:	cmp	r0, #0
   143d0:	beq	14a48 <__assert_fail@plt+0x1da4>
   143d4:	ldr	r1, [pc, #3604]	; 151f0 <__assert_fail@plt+0x254c>
   143d8:	ldr	r0, [sp, #56]	; 0x38
   143dc:	bl	2d56c <__assert_fail@plt+0x1a8c8>
   143e0:	cmp	r0, #0
   143e4:	beq	14a7c <__assert_fail@plt+0x1dd8>
   143e8:	bl	2d4e4 <__assert_fail@plt+0x1a840>
   143ec:	subs	r7, r0, #0
   143f0:	beq	14a7c <__assert_fail@plt+0x1dd8>
   143f4:	bl	26b4c <__assert_fail@plt+0x13ea8>
   143f8:	cmp	r0, #0
   143fc:	beq	14a7c <__assert_fail@plt+0x1dd8>
   14400:	ldr	r1, [pc, #3564]	; 151f4 <__assert_fail@plt+0x2550>
   14404:	ldr	r0, [sp, #56]	; 0x38
   14408:	bl	2d56c <__assert_fail@plt+0x1a8c8>
   1440c:	cmp	r0, #0
   14410:	beq	14b40 <__assert_fail@plt+0x1e9c>
   14414:	bl	2d4e4 <__assert_fail@plt+0x1a840>
   14418:	subs	r5, r0, #0
   1441c:	beq	14b40 <__assert_fail@plt+0x1e9c>
   14420:	bl	128d8 <strlen@plt>
   14424:	cmp	r0, #16
   14428:	bls	14b40 <__assert_fail@plt+0x1e9c>
   1442c:	mov	r0, r5
   14430:	mov	r6, #0
   14434:	str	r6, [sp, #60]	; 0x3c
   14438:	bl	12a40 <gcry_xstrdup@plt>
   1443c:	str	r0, [sp, #16]
   14440:	bl	1c5ec <__assert_fail@plt+0x9948>
   14444:	mov	r1, #64	; 0x40
   14448:	mov	r0, r7
   1444c:	bl	128fc <strchr@plt>
   14450:	cmp	r0, #0
   14454:	beq	1578c <__assert_fail@plt+0x2ae8>
   14458:	ldrb	r3, [r0, #1]
   1445c:	cmp	r3, r6
   14460:	beq	1578c <__assert_fail@plt+0x2ae8>
   14464:	add	r9, r0, #1
   14468:	str	r6, [sp]
   1446c:	mov	r1, r9
   14470:	ldr	r3, [sp, #16]
   14474:	ldr	r2, [pc, #3452]	; 151f8 <__assert_fail@plt+0x2554>
   14478:	ldr	r0, [r4, #28]
   1447c:	bl	1c80c <__assert_fail@plt+0x9b68>
   14480:	subs	fp, r0, #0
   14484:	beq	15180 <__assert_fail@plt+0x24dc>
   14488:	ldr	r1, [pc, #3436]	; 151fc <__assert_fail@plt+0x2558>
   1448c:	bl	12a04 <gpgrt_fopen@plt>
   14490:	subs	r8, r0, #0
   14494:	beq	15198 <__assert_fail@plt+0x24f4>
   14498:	ldr	r0, [sp, #64]	; 0x40
   1449c:	bl	125e4 <gcry_free@plt>
   144a0:	ldr	r0, [sp, #68]	; 0x44
   144a4:	bl	15bc8 <__assert_fail@plt+0x2f24>
   144a8:	add	r1, sp, #64	; 0x40
   144ac:	add	r2, sp, #68	; 0x44
   144b0:	mov	r0, r8
   144b4:	bl	15e9c <__assert_fail@plt+0x31f8>
   144b8:	subs	r3, r0, #0
   144bc:	str	r3, [sp, #24]
   144c0:	bne	14558 <__assert_fail@plt+0x18b4>
   144c4:	ldr	r1, [sp, #64]	; 0x40
   144c8:	cmp	r1, #0
   144cc:	beq	157a0 <__assert_fail@plt+0x2afc>
   144d0:	ldr	r0, [pc, #3368]	; 15200 <__assert_fail@plt+0x255c>
   144d4:	bl	21c58 <__assert_fail@plt+0xefb4>
   144d8:	ldr	r6, [sp, #68]	; 0x44
   144dc:	cmp	r6, #0
   144e0:	beq	1453c <__assert_fail@plt+0x1898>
   144e4:	ldr	r5, [pc, #3352]	; 15204 <__assert_fail@plt+0x2560>
   144e8:	ldr	r1, [r6, #8]
   144ec:	cmp	r1, #0
   144f0:	beq	144fc <__assert_fail@plt+0x1858>
   144f4:	mov	r0, r5
   144f8:	bl	21c58 <__assert_fail@plt+0xefb4>
   144fc:	ldr	r6, [r6]
   14500:	cmp	r6, #0
   14504:	bne	144e8 <__assert_fail@plt+0x1844>
   14508:	ldr	r5, [sp, #68]	; 0x44
   1450c:	cmp	r5, #0
   14510:	beq	1453c <__assert_fail@plt+0x1898>
   14514:	ldr	r0, [r5, #8]
   14518:	cmp	r0, #0
   1451c:	beq	14530 <__assert_fail@plt+0x188c>
   14520:	mov	r1, r7
   14524:	bl	124b8 <strcmp@plt>
   14528:	cmp	r0, #0
   1452c:	beq	14b58 <__assert_fail@plt+0x1eb4>
   14530:	ldr	r5, [r5]
   14534:	cmp	r5, #0
   14538:	bne	14514 <__assert_fail@plt+0x1870>
   1453c:	mov	r1, r7
   14540:	ldr	r2, [sp, #64]	; 0x40
   14544:	ldr	r0, [pc, #3260]	; 15208 <__assert_fail@plt+0x2564>
   14548:	mov	r6, #0
   1454c:	bl	21cbc <__assert_fail@plt+0xf018>
   14550:	mov	r3, #9
   14554:	str	r3, [sp, #24]
   14558:	mov	r0, r8
   1455c:	bl	12788 <gpgrt_fclose@plt>
   14560:	mov	r0, r6
   14564:	bl	125e4 <gcry_free@plt>
   14568:	ldr	r0, [sp, #60]	; 0x3c
   1456c:	bl	125e4 <gcry_free@plt>
   14570:	mov	r0, fp
   14574:	bl	125e4 <gcry_free@plt>
   14578:	ldr	r0, [sp, #16]
   1457c:	bl	125e4 <gcry_free@plt>
   14580:	b	147d4 <__assert_fail@plt+0x1b30>
   14584:	mov	r1, r5
   14588:	ldr	r0, [pc, #3196]	; 1520c <__assert_fail@plt+0x2568>
   1458c:	bl	21c58 <__assert_fail@plt+0xefb4>
   14590:	mov	r3, #230	; 0xe6
   14594:	str	r3, [sp, #24]
   14598:	ldr	r0, [sp, #64]	; 0x40
   1459c:	bl	125e4 <gcry_free@plt>
   145a0:	ldr	r0, [sp, #68]	; 0x44
   145a4:	bl	15bc8 <__assert_fail@plt+0x2f24>
   145a8:	ldr	r2, [sp, #140]	; 0x8c
   145ac:	ldr	r3, [sl]
   145b0:	ldr	r0, [sp, #24]
   145b4:	cmp	r2, r3
   145b8:	bne	156bc <__assert_fail@plt+0x2a18>
   145bc:	add	sp, sp, #148	; 0x94
   145c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c4:	add	r5, sp, #76	; 0x4c
   145c8:	str	r9, [sp, #76]	; 0x4c
   145cc:	str	r9, [r5, #4]
   145d0:	str	r9, [r5, #8]
   145d4:	str	r9, [r5, #12]
   145d8:	str	r9, [sp, #40]	; 0x28
   145dc:	str	r9, [sp, #44]	; 0x2c
   145e0:	bl	125e4 <gcry_free@plt>
   145e4:	ldr	r0, [sp, #68]	; 0x44
   145e8:	bl	15bc8 <__assert_fail@plt+0x2f24>
   145ec:	add	r1, sp, #64	; 0x40
   145f0:	add	r2, sp, #68	; 0x44
   145f4:	ldr	r0, [sp, #16]
   145f8:	bl	15e9c <__assert_fail@plt+0x31f8>
   145fc:	subs	r3, r0, #0
   14600:	str	r3, [sp, #24]
   14604:	bne	14778 <__assert_fail@plt+0x1ad4>
   14608:	ldr	r1, [sp, #64]	; 0x40
   1460c:	cmp	r1, #0
   14610:	beq	15778 <__assert_fail@plt+0x2ad4>
   14614:	ldr	r0, [pc, #3044]	; 15200 <__assert_fail@plt+0x255c>
   14618:	bl	21c58 <__assert_fail@plt+0xefb4>
   1461c:	ldr	r9, [sp, #68]	; 0x44
   14620:	cmp	r9, #0
   14624:	beq	14774 <__assert_fail@plt+0x1ad0>
   14628:	ldr	r4, [pc, #3028]	; 15204 <__assert_fail@plt+0x2560>
   1462c:	ldr	r1, [r9, #8]
   14630:	cmp	r1, #0
   14634:	beq	14640 <__assert_fail@plt+0x199c>
   14638:	mov	r0, r4
   1463c:	bl	21c58 <__assert_fail@plt+0xefb4>
   14640:	ldr	r9, [r9]
   14644:	cmp	r9, #0
   14648:	bne	1462c <__assert_fail@plt+0x1988>
   1464c:	ldr	r4, [sp, #68]	; 0x44
   14650:	cmp	r4, #0
   14654:	bne	14708 <__assert_fail@plt+0x1a64>
   14658:	b	14774 <__assert_fail@plt+0x1ad0>
   1465c:	ldr	r0, [r4, #8]
   14660:	mov	r1, #64	; 0x40
   14664:	str	r6, [r5]
   14668:	str	r6, [r5, #4]
   1466c:	str	r6, [r5, #8]
   14670:	str	r6, [r5, #12]
   14674:	bl	128fc <strchr@plt>
   14678:	subs	r1, r0, #0
   1467c:	beq	14938 <__assert_fail@plt+0x1c94>
   14680:	ldr	r0, [pc, #3224]	; 15320 <__assert_fail@plt+0x267c>
   14684:	add	r1, r1, #1
   14688:	mov	r3, r6
   1468c:	ldr	r2, [pc, #2940]	; 15210 <__assert_fail@plt+0x256c>
   14690:	ldr	r0, [r0, #28]
   14694:	bl	1c80c <__assert_fail@plt+0x9b68>
   14698:	subs	r7, r0, #0
   1469c:	beq	14968 <__assert_fail@plt+0x1cc4>
   146a0:	ldr	r1, [pc, #2924]	; 15214 <__assert_fail@plt+0x2570>
   146a4:	bl	12a04 <gpgrt_fopen@plt>
   146a8:	subs	r8, r0, #0
   146ac:	beq	1498c <__assert_fail@plt+0x1ce8>
   146b0:	mov	r2, r6
   146b4:	mov	r1, r8
   146b8:	mov	r0, r5
   146bc:	bl	166d8 <__assert_fail@plt+0x3a34>
   146c0:	mov	r6, r0
   146c4:	mov	r0, r8
   146c8:	bl	12788 <gpgrt_fclose@plt>
   146cc:	mov	r0, r7
   146d0:	bl	125e4 <gcry_free@plt>
   146d4:	cmp	r6, #0
   146d8:	bne	14938 <__assert_fail@plt+0x1c94>
   146dc:	ldrb	r3, [sp, #80]	; 0x50
   146e0:	ldr	r1, [r4, #8]
   146e4:	tst	r3, #4
   146e8:	beq	147e0 <__assert_fail@plt+0x1b3c>
   146ec:	ldr	r0, [pc, #2852]	; 15218 <__assert_fail@plt+0x2574>
   146f0:	bl	21c58 <__assert_fail@plt+0xefb4>
   146f4:	ldr	r0, [pc, #2848]	; 1521c <__assert_fail@plt+0x2578>
   146f8:	bl	21e08 <__assert_fail@plt+0xf164>
   146fc:	ldr	r4, [r4]
   14700:	cmp	r4, #0
   14704:	beq	14778 <__assert_fail@plt+0x1ad4>
   14708:	ldr	r0, [r4, #8]
   1470c:	cmp	r0, #0
   14710:	beq	146fc <__assert_fail@plt+0x1a58>
   14714:	mov	r1, #64	; 0x40
   14718:	bl	128fc <strchr@plt>
   1471c:	subs	r6, r0, #0
   14720:	beq	1516c <__assert_fail@plt+0x24c8>
   14724:	ldrb	r3, [r6, #1]
   14728:	cmp	r3, #0
   1472c:	beq	1516c <__assert_fail@plt+0x24c8>
   14730:	mov	r0, r9
   14734:	bl	125e4 <gcry_free@plt>
   14738:	ldr	r3, [pc, #3040]	; 15320 <__assert_fail@plt+0x267c>
   1473c:	add	r1, r6, #1
   14740:	mov	r2, #0
   14744:	ldr	r0, [r3, #28]
   14748:	bl	1c80c <__assert_fail@plt+0x9b68>
   1474c:	subs	r9, r0, #0
   14750:	beq	14a60 <__assert_fail@plt+0x1dbc>
   14754:	mov	r1, #2
   14758:	bl	12a4c <access@plt>
   1475c:	subs	r6, r0, #0
   14760:	beq	1465c <__assert_fail@plt+0x19b8>
   14764:	ldr	r1, [r4, #8]
   14768:	ldr	r0, [pc, #2736]	; 15220 <__assert_fail@plt+0x257c>
   1476c:	bl	21c58 <__assert_fail@plt+0xefb4>
   14770:	b	146fc <__assert_fail@plt+0x1a58>
   14774:	mov	r9, #0
   14778:	ldr	r4, [sp, #40]	; 0x28
   1477c:	cmp	r4, #0
   14780:	beq	1479c <__assert_fail@plt+0x1af8>
   14784:	mov	r0, r4
   14788:	bl	128d8 <strlen@plt>
   1478c:	mov	r1, r0
   14790:	mov	r0, r4
   14794:	bl	22068 <__assert_fail@plt+0xf3c4>
   14798:	ldr	r4, [sp, #40]	; 0x28
   1479c:	mov	r0, r4
   147a0:	bl	125e4 <gcry_free@plt>
   147a4:	ldr	r0, [sp, #44]	; 0x2c
   147a8:	bl	125e4 <gcry_free@plt>
   147ac:	mov	r0, r9
   147b0:	bl	125e4 <gcry_free@plt>
   147b4:	mov	r0, r5
   147b8:	bl	169b4 <__assert_fail@plt+0x3d10>
   147bc:	b	14598 <__assert_fail@plt+0x18f4>
   147c0:	mov	r1, r5
   147c4:	ldr	r0, [pc, #2648]	; 15224 <__assert_fail@plt+0x2580>
   147c8:	bl	21cbc <__assert_fail@plt+0xf018>
   147cc:	mov	r3, #230	; 0xe6
   147d0:	str	r3, [sp, #24]
   147d4:	ldr	r0, [sp, #56]	; 0x38
   147d8:	bl	2d4a0 <__assert_fail@plt+0x1a7fc>
   147dc:	b	14598 <__assert_fail@plt+0x18f4>
   147e0:	ldr	r0, [pc, #2624]	; 15228 <__assert_fail@plt+0x2584>
   147e4:	bl	21c58 <__assert_fail@plt+0xefb4>
   147e8:	ldr	r0, [sp, #40]	; 0x28
   147ec:	bl	125e4 <gcry_free@plt>
   147f0:	ldr	r0, [sp, #44]	; 0x2c
   147f4:	bl	125e4 <gcry_free@plt>
   147f8:	add	r3, sp, #44	; 0x2c
   147fc:	add	r2, sp, #40	; 0x28
   14800:	ldr	r1, [sp, #16]
   14804:	mov	r0, r9
   14808:	bl	1402c <__assert_fail@plt+0x1388>
   1480c:	subs	r3, r0, #0
   14810:	bne	14b38 <__assert_fail@plt+0x1e94>
   14814:	ldr	r7, [r4, #8]
   14818:	str	r3, [sp, #48]	; 0x30
   1481c:	str	r3, [sp, #52]	; 0x34
   14820:	str	r3, [sp, #56]	; 0x38
   14824:	str	r3, [sp, #60]	; 0x3c
   14828:	ldr	r3, [sp, #44]	; 0x2c
   1482c:	mov	r0, r7
   14830:	str	r3, [sp, #28]
   14834:	ldr	fp, [sp, #40]	; 0x28
   14838:	bl	13a58 <__assert_fail@plt+0xdb4>
   1483c:	subs	r3, r0, #0
   14840:	str	r3, [sp, #20]
   14844:	beq	14948 <__assert_fail@plt+0x1ca4>
   14848:	ldr	r8, [sp, #20]
   1484c:	ldr	r1, [pc, #2724]	; 152f8 <__assert_fail@plt+0x2654>
   14850:	mov	r0, #0
   14854:	bl	12920 <gpgrt_fopenmem@plt>
   14858:	subs	r6, r0, #0
   1485c:	beq	14a14 <__assert_fail@plt+0x1d70>
   14860:	ldrb	r3, [sp, #72]	; 0x48
   14864:	tst	r3, #1
   14868:	beq	149cc <__assert_fail@plt+0x1d28>
   1486c:	ldr	r3, [sp, #64]	; 0x40
   14870:	mov	r2, r8
   14874:	ldr	r1, [pc, #2480]	; 1522c <__assert_fail@plt+0x2588>
   14878:	stm	sp, {r3, fp}
   1487c:	mov	r0, r6
   14880:	mov	r3, r7
   14884:	bl	12bc0 <gpgrt_fprintf@plt>
   14888:	mov	r0, r6
   1488c:	bl	12bb4 <gpgrt_rewind@plt>
   14890:	ldr	r2, [sp, #28]
   14894:	add	r0, sp, #48	; 0x30
   14898:	mov	r1, r6
   1489c:	bl	13c28 <__assert_fail@plt+0xf84>
   148a0:	subs	fp, r0, #0
   148a4:	bne	148f8 <__assert_fail@plt+0x1c54>
   148a8:	mov	r0, r6
   148ac:	bl	12788 <gpgrt_fclose@plt>
   148b0:	mov	r1, fp
   148b4:	add	r0, sp, #60	; 0x3c
   148b8:	bl	1b064 <__assert_fail@plt+0x83c0>
   148bc:	subs	fp, r0, #0
   148c0:	bne	148f4 <__assert_fail@plt+0x1c50>
   148c4:	mov	r2, r8
   148c8:	ldr	r1, [pc, #2400]	; 15230 <__assert_fail@plt+0x258c>
   148cc:	ldr	r0, [sp, #60]	; 0x3c
   148d0:	bl	1b110 <__assert_fail@plt+0x846c>
   148d4:	subs	fp, r0, #0
   148d8:	bne	148f4 <__assert_fail@plt+0x1c50>
   148dc:	mov	r2, r7
   148e0:	ldr	r1, [pc, #2380]	; 15234 <__assert_fail@plt+0x2590>
   148e4:	ldr	r0, [sp, #60]	; 0x3c
   148e8:	bl	1b110 <__assert_fail@plt+0x846c>
   148ec:	subs	fp, r0, #0
   148f0:	beq	14aac <__assert_fail@plt+0x1e08>
   148f4:	mov	r6, #0
   148f8:	ldr	r0, [sp, #60]	; 0x3c
   148fc:	bl	1b0a8 <__assert_fail@plt+0x8404>
   14900:	ldr	r0, [sp, #56]	; 0x38
   14904:	bl	12788 <gpgrt_fclose@plt>
   14908:	ldr	r0, [sp, #52]	; 0x34
   1490c:	bl	12788 <gpgrt_fclose@plt>
   14910:	ldr	r0, [sp, #48]	; 0x30
   14914:	bl	12788 <gpgrt_fclose@plt>
   14918:	mov	r0, r6
   1491c:	bl	12788 <gpgrt_fclose@plt>
   14920:	ldr	r0, [sp, #20]
   14924:	bl	125e4 <gcry_free@plt>
   14928:	cmp	fp, #0
   1492c:	beq	146fc <__assert_fail@plt+0x1a58>
   14930:	str	fp, [sp, #24]
   14934:	b	14778 <__assert_fail@plt+0x1ad4>
   14938:	ldr	r1, [r4, #8]
   1493c:	ldr	r0, [pc, #2292]	; 15238 <__assert_fail@plt+0x2594>
   14940:	bl	21c58 <__assert_fail@plt+0xefb4>
   14944:	b	146fc <__assert_fail@plt+0x1a58>
   14948:	ldr	r3, [pc, #2512]	; 15320 <__assert_fail@plt+0x267c>
   1494c:	ldr	r8, [r3, #32]
   14950:	cmp	r8, #0
   14954:	beq	14a94 <__assert_fail@plt+0x1df0>
   14958:	mov	r1, r8
   1495c:	ldr	r0, [pc, #2504]	; 1532c <__assert_fail@plt+0x2688>
   14960:	bl	21c58 <__assert_fail@plt+0xefb4>
   14964:	b	1484c <__assert_fail@plt+0x1ba8>
   14968:	bl	12914 <gpg_err_code_from_syserror@plt>
   1496c:	uxth	r6, r0
   14970:	mov	r0, r6
   14974:	bl	12b3c <gpg_strerror@plt>
   14978:	ldr	r1, [pc, #2236]	; 1523c <__assert_fail@plt+0x2598>
   1497c:	mov	r2, r0
   14980:	ldr	r0, [pc, #2232]	; 15240 <__assert_fail@plt+0x259c>
   14984:	bl	21cbc <__assert_fail@plt+0xf018>
   14988:	b	146d4 <__assert_fail@plt+0x1a30>
   1498c:	bl	12914 <gpg_err_code_from_syserror@plt>
   14990:	subs	r6, r0, #0
   14994:	beq	149a8 <__assert_fail@plt+0x1d04>
   14998:	ldr	r3, [pc, #2212]	; 15244 <__assert_fail@plt+0x25a0>
   1499c:	uxth	r6, r6
   149a0:	cmp	r6, r3
   149a4:	beq	14a70 <__assert_fail@plt+0x1dcc>
   149a8:	mov	r0, r6
   149ac:	bl	12b3c <gpg_strerror@plt>
   149b0:	mov	r1, r7
   149b4:	mov	r2, r0
   149b8:	ldr	r0, [pc, #2184]	; 15248 <__assert_fail@plt+0x25a4>
   149bc:	bl	21cbc <__assert_fail@plt+0xf018>
   149c0:	mov	r0, r7
   149c4:	bl	125e4 <gcry_free@plt>
   149c8:	b	146d4 <__assert_fail@plt+0x1a30>
   149cc:	mov	r1, r6
   149d0:	ldr	r0, [pc, #2164]	; 1524c <__assert_fail@plt+0x25a8>
   149d4:	bl	12a64 <gpgrt_fputs@plt>
   149d8:	b	1486c <__assert_fail@plt+0x1bc8>
   149dc:	ldr	r0, [pc, #2156]	; 15250 <__assert_fail@plt+0x25ac>
   149e0:	bl	21e08 <__assert_fail@plt+0xf164>
   149e4:	ldr	r5, [sp, #56]	; 0x38
   149e8:	bl	21b54 <__assert_fail@plt+0xeeb0>
   149ec:	mov	r1, r0
   149f0:	mov	r0, r5
   149f4:	bl	2df74 <__assert_fail@plt+0x1b2d0>
   149f8:	b	14378 <__assert_fail@plt+0x16d4>
   149fc:	ldr	r1, [pc, #2128]	; 15254 <__assert_fail@plt+0x25b0>
   14a00:	ldr	r0, [pc, #2128]	; 15258 <__assert_fail@plt+0x25b4>
   14a04:	bl	21cbc <__assert_fail@plt+0xf018>
   14a08:	mov	r3, #230	; 0xe6
   14a0c:	str	r3, [sp, #24]
   14a10:	b	147d4 <__assert_fail@plt+0x1b30>
   14a14:	bl	12914 <gpg_err_code_from_syserror@plt>
   14a18:	uxth	fp, r0
   14a1c:	mov	r0, fp
   14a20:	bl	12b3c <gpg_strerror@plt>
   14a24:	mov	r1, r0
   14a28:	ldr	r0, [pc, #2380]	; 1537c <__assert_fail@plt+0x26d8>
   14a2c:	bl	21cbc <__assert_fail@plt+0xf018>
   14a30:	b	148f8 <__assert_fail@plt+0x1c54>
   14a34:	bl	12b3c <gpg_strerror@plt>
   14a38:	mov	r1, r0
   14a3c:	ldr	r0, [pc, #2072]	; 1525c <__assert_fail@plt+0x25b8>
   14a40:	bl	21cbc <__assert_fail@plt+0xf018>
   14a44:	b	147d4 <__assert_fail@plt+0x1b30>
   14a48:	ldr	r1, [pc, #2064]	; 15260 <__assert_fail@plt+0x25bc>
   14a4c:	ldr	r0, [pc, #2052]	; 15258 <__assert_fail@plt+0x25b4>
   14a50:	bl	21cbc <__assert_fail@plt+0xf018>
   14a54:	mov	r3, #79	; 0x4f
   14a58:	str	r3, [sp, #24]
   14a5c:	b	147d4 <__assert_fail@plt+0x1b30>
   14a60:	bl	12914 <gpg_err_code_from_syserror@plt>
   14a64:	uxth	r3, r0
   14a68:	str	r3, [sp, #24]
   14a6c:	b	14778 <__assert_fail@plt+0x1ad4>
   14a70:	mov	r0, r7
   14a74:	bl	125e4 <gcry_free@plt>
   14a78:	b	146dc <__assert_fail@plt+0x1a38>
   14a7c:	ldr	r1, [pc, #2016]	; 15264 <__assert_fail@plt+0x25c0>
   14a80:	ldr	r0, [pc, #2000]	; 15258 <__assert_fail@plt+0x25b4>
   14a84:	bl	21cbc <__assert_fail@plt+0xf018>
   14a88:	mov	r3, #79	; 0x4f
   14a8c:	str	r3, [sp, #24]
   14a90:	b	147d4 <__assert_fail@plt+0x1b30>
   14a94:	mov	r1, r7
   14a98:	ldr	r0, [pc, #2216]	; 15348 <__assert_fail@plt+0x26a4>
   14a9c:	bl	21cbc <__assert_fail@plt+0xf018>
   14aa0:	mov	fp, #115	; 0x73
   14aa4:	ldr	r6, [sp, #20]
   14aa8:	b	148f8 <__assert_fail@plt+0x1c54>
   14aac:	ldr	r2, [pc, #1972]	; 15268 <__assert_fail@plt+0x25c4>
   14ab0:	ldr	r1, [pc, #1972]	; 1526c <__assert_fail@plt+0x25c8>
   14ab4:	ldr	r0, [sp, #60]	; 0x3c
   14ab8:	bl	1b110 <__assert_fail@plt+0x846c>
   14abc:	subs	fp, r0, #0
   14ac0:	bne	148f4 <__assert_fail@plt+0x1c50>
   14ac4:	ldr	r2, [pc, #1956]	; 15270 <__assert_fail@plt+0x25cc>
   14ac8:	ldr	r1, [pc, #1956]	; 15274 <__assert_fail@plt+0x25d0>
   14acc:	ldr	r0, [sp, #60]	; 0x3c
   14ad0:	bl	1b110 <__assert_fail@plt+0x846c>
   14ad4:	subs	fp, r0, #0
   14ad8:	bne	148f4 <__assert_fail@plt+0x1c50>
   14adc:	ldr	r2, [pc, #1940]	; 15278 <__assert_fail@plt+0x25d4>
   14ae0:	ldr	r1, [pc, #1940]	; 1527c <__assert_fail@plt+0x25d8>
   14ae4:	ldr	r0, [sp, #60]	; 0x3c
   14ae8:	bl	1b110 <__assert_fail@plt+0x846c>
   14aec:	subs	fp, r0, #0
   14af0:	bne	148f4 <__assert_fail@plt+0x1c50>
   14af4:	ldr	r3, [pc, #2084]	; 15320 <__assert_fail@plt+0x267c>
   14af8:	ldr	r6, [r3, #36]	; 0x24
   14afc:	cmp	r6, #0
   14b00:	bne	14b14 <__assert_fail@plt+0x1e70>
   14b04:	b	150cc <__assert_fail@plt+0x2428>
   14b08:	ldr	r6, [r6]
   14b0c:	cmp	r6, #0
   14b10:	beq	150cc <__assert_fail@plt+0x2428>
   14b14:	mov	r2, #0
   14b18:	add	r1, r6, #8
   14b1c:	ldr	r0, [sp, #60]	; 0x3c
   14b20:	bl	1b110 <__assert_fail@plt+0x846c>
   14b24:	cmp	r0, #0
   14b28:	beq	14b08 <__assert_fail@plt+0x1e64>
   14b2c:	mov	fp, r0
   14b30:	mov	r6, #0
   14b34:	b	148f8 <__assert_fail@plt+0x1c54>
   14b38:	str	r3, [sp, #24]
   14b3c:	b	14778 <__assert_fail@plt+0x1ad4>
   14b40:	ldr	r1, [pc, #1848]	; 15280 <__assert_fail@plt+0x25dc>
   14b44:	ldr	r0, [pc, #1804]	; 15258 <__assert_fail@plt+0x25b4>
   14b48:	bl	21cbc <__assert_fail@plt+0xf018>
   14b4c:	mov	r3, #79	; 0x4f
   14b50:	str	r3, [sp, #24]
   14b54:	b	147d4 <__assert_fail@plt+0x1b30>
   14b58:	mov	r1, r7
   14b5c:	add	r0, sp, #60	; 0x3c
   14b60:	bl	16b38 <__assert_fail@plt+0x3e94>
   14b64:	subs	r3, r0, #0
   14b68:	str	r3, [sp, #24]
   14b6c:	bne	14558 <__assert_fail@plt+0x18b4>
   14b70:	ldr	r3, [sp, #60]	; 0x3c
   14b74:	mov	r1, r7
   14b78:	ldr	r0, [pc, #1796]	; 15284 <__assert_fail@plt+0x25e0>
   14b7c:	str	r3, [sp, #28]
   14b80:	bl	1241c <gpgrt_bsprintf@plt>
   14b84:	subs	r3, r0, #0
   14b88:	str	r3, [sp, #20]
   14b8c:	beq	156ec <__assert_fail@plt+0x2a48>
   14b90:	add	r5, sp, #92	; 0x5c
   14b94:	mov	r0, r5
   14b98:	ldr	r1, [sp, #24]
   14b9c:	bl	27b6c <__assert_fail@plt+0x14ec8>
   14ba0:	mov	r0, r5
   14ba4:	ldr	r1, [pc, #1872]	; 152fc <__assert_fail@plt+0x2658>
   14ba8:	bl	27bcc <__assert_fail@plt+0x14f28>
   14bac:	ldr	r3, [r4]
   14bb0:	cmp	r3, #0
   14bb4:	beq	155d0 <__assert_fail@plt+0x292c>
   14bb8:	cmp	r3, #1
   14bbc:	ble	14bcc <__assert_fail@plt+0x1f28>
   14bc0:	ldr	r1, [pc, #1848]	; 15300 <__assert_fail@plt+0x265c>
   14bc4:	mov	r0, r5
   14bc8:	bl	27bcc <__assert_fail@plt+0x14f28>
   14bcc:	mov	r0, r5
   14bd0:	ldr	r1, [pc, #1836]	; 15304 <__assert_fail@plt+0x2660>
   14bd4:	bl	27bcc <__assert_fail@plt+0x14f28>
   14bd8:	mov	r0, r5
   14bdc:	ldr	r1, [pc, #1700]	; 15288 <__assert_fail@plt+0x25e4>
   14be0:	bl	27bcc <__assert_fail@plt+0x14f28>
   14be4:	mov	r0, r5
   14be8:	ldr	r1, [pc, #1692]	; 1528c <__assert_fail@plt+0x25e8>
   14bec:	bl	27bcc <__assert_fail@plt+0x14f28>
   14bf0:	mov	r0, r5
   14bf4:	ldr	r1, [pc, #1684]	; 15290 <__assert_fail@plt+0x25ec>
   14bf8:	bl	27bcc <__assert_fail@plt+0x14f28>
   14bfc:	mov	r0, r5
   14c00:	ldr	r1, [pc, #1676]	; 15294 <__assert_fail@plt+0x25f0>
   14c04:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c08:	mov	r0, r5
   14c0c:	ldr	r1, [sp, #28]
   14c10:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c14:	mov	r0, r5
   14c18:	ldr	r1, [pc, #1656]	; 15298 <__assert_fail@plt+0x25f4>
   14c1c:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c20:	mov	r0, r5
   14c24:	ldr	r1, [pc, #1648]	; 1529c <__assert_fail@plt+0x25f8>
   14c28:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c2c:	mov	r0, r5
   14c30:	ldr	r1, [sp, #20]
   14c34:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c38:	mov	r0, r5
   14c3c:	ldr	r1, [pc, #1628]	; 152a0 <__assert_fail@plt+0x25fc>
   14c40:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c44:	mov	r0, r5
   14c48:	ldr	r1, [pc, #1736]	; 15318 <__assert_fail@plt+0x2674>
   14c4c:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c50:	mov	r0, r5
   14c54:	mov	r1, fp
   14c58:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c5c:	mov	r0, r5
   14c60:	mov	r1, #0
   14c64:	bl	27bcc <__assert_fail@plt+0x14f28>
   14c68:	mov	r0, r5
   14c6c:	mov	r1, #0
   14c70:	bl	27cac <__assert_fail@plt+0x15008>
   14c74:	subs	r5, r0, #0
   14c78:	beq	1560c <__assert_fail@plt+0x2968>
   14c7c:	mov	r3, #0
   14c80:	str	r3, [sp, #8]
   14c84:	str	r3, [sp, #4]
   14c88:	str	r3, [sp]
   14c8c:	mov	r2, r3
   14c90:	mov	r1, r5
   14c94:	ldr	r0, [r4, #24]
   14c98:	bl	2c71c <__assert_fail@plt+0x19a78>
   14c9c:	cmp	r0, #0
   14ca0:	bne	15664 <__assert_fail@plt+0x29c0>
   14ca4:	ldr	r0, [sp, #20]
   14ca8:	bl	125e4 <gcry_free@plt>
   14cac:	mov	r0, r5
   14cb0:	bl	125e4 <gcry_free@plt>
   14cb4:	ldr	r1, [pc, #1512]	; 152a4 <__assert_fail@plt+0x2600>
   14cb8:	ldr	r0, [sp, #60]	; 0x3c
   14cbc:	bl	22b74 <__assert_fail@plt+0xfed0>
   14cc0:	cmp	r0, #0
   14cc4:	bne	155ec <__assert_fail@plt+0x2948>
   14cc8:	mov	r2, r7
   14ccc:	ldr	r1, [sp, #64]	; 0x40
   14cd0:	ldr	r0, [pc, #1488]	; 152a8 <__assert_fail@plt+0x2604>
   14cd4:	bl	21c58 <__assert_fail@plt+0xefb4>
   14cd8:	mov	r3, #0
   14cdc:	str	r3, [sp, #76]	; 0x4c
   14ce0:	str	r3, [sp, #92]	; 0x5c
   14ce4:	ldr	r3, [sp, #60]	; 0x3c
   14ce8:	mov	r0, r7
   14cec:	str	r3, [sp, #32]
   14cf0:	bl	13a58 <__assert_fail@plt+0xdb4>
   14cf4:	subs	r3, r0, #0
   14cf8:	str	r3, [sp, #28]
   14cfc:	beq	155ac <__assert_fail@plt+0x2908>
   14d00:	ldr	r3, [sp, #28]
   14d04:	str	r3, [sp, #36]	; 0x24
   14d08:	ldr	r1, [pc, #1512]	; 152f8 <__assert_fail@plt+0x2654>
   14d0c:	mov	r0, #0
   14d10:	bl	12920 <gpgrt_fopenmem@plt>
   14d14:	subs	r3, r0, #0
   14d18:	str	r3, [sp, #20]
   14d1c:	beq	156a0 <__assert_fail@plt+0x29fc>
   14d20:	ldr	r5, [sp, #20]
   14d24:	ldr	r0, [pc, #1408]	; 152ac <__assert_fail@plt+0x2608>
   14d28:	mov	r1, r5
   14d2c:	bl	12a64 <gpgrt_fputs@plt>
   14d30:	ldr	r3, [pc, #1400]	; 152b0 <__assert_fail@plt+0x260c>
   14d34:	mov	r2, r7
   14d38:	ldr	r1, [pc, #1396]	; 152b4 <__assert_fail@plt+0x2610>
   14d3c:	mov	r0, r5
   14d40:	bl	12bc0 <gpgrt_fprintf@plt>
   14d44:	mov	r0, r5
   14d48:	str	r5, [sp, #20]
   14d4c:	add	r5, sp, #76	; 0x4c
   14d50:	bl	12bb4 <gpgrt_rewind@plt>
   14d54:	ldr	r1, [sp, #20]
   14d58:	ldr	r2, [sp, #32]
   14d5c:	mov	r0, r5
   14d60:	bl	13c28 <__assert_fail@plt+0xf84>
   14d64:	subs	r1, r0, #0
   14d68:	str	r1, [sp, #32]
   14d6c:	bne	14ec4 <__assert_fail@plt+0x2220>
   14d70:	ldr	r0, [sp, #20]
   14d74:	bl	12788 <gpgrt_fclose@plt>
   14d78:	ldr	r1, [sp, #32]
   14d7c:	add	r0, sp, #92	; 0x5c
   14d80:	bl	1b064 <__assert_fail@plt+0x83c0>
   14d84:	cmp	r0, #0
   14d88:	bne	155e0 <__assert_fail@plt+0x293c>
   14d8c:	ldr	r2, [sp, #36]	; 0x24
   14d90:	ldr	r1, [pc, #1176]	; 15230 <__assert_fail@plt+0x258c>
   14d94:	ldr	r0, [sp, #92]	; 0x5c
   14d98:	bl	1b110 <__assert_fail@plt+0x846c>
   14d9c:	cmp	r0, #0
   14da0:	bne	155e0 <__assert_fail@plt+0x293c>
   14da4:	mov	r2, r7
   14da8:	ldr	r1, [pc, #1156]	; 15234 <__assert_fail@plt+0x2590>
   14dac:	ldr	r0, [sp, #92]	; 0x5c
   14db0:	bl	1b110 <__assert_fail@plt+0x846c>
   14db4:	cmp	r0, #0
   14db8:	bne	155e0 <__assert_fail@plt+0x293c>
   14dbc:	ldr	r2, [pc, #1268]	; 152b8 <__assert_fail@plt+0x2614>
   14dc0:	ldr	r1, [pc, #1188]	; 1526c <__assert_fail@plt+0x25c8>
   14dc4:	ldr	r0, [sp, #92]	; 0x5c
   14dc8:	bl	1b110 <__assert_fail@plt+0x846c>
   14dcc:	cmp	r0, #0
   14dd0:	bne	155e0 <__assert_fail@plt+0x293c>
   14dd4:	ldr	r2, [pc, #1172]	; 15270 <__assert_fail@plt+0x25cc>
   14dd8:	ldr	r1, [pc, #1172]	; 15274 <__assert_fail@plt+0x25d0>
   14ddc:	ldr	r0, [sp, #92]	; 0x5c
   14de0:	bl	1b110 <__assert_fail@plt+0x846c>
   14de4:	cmp	r0, #0
   14de8:	bne	155e0 <__assert_fail@plt+0x293c>
   14dec:	ldr	r2, [pc, #1224]	; 152bc <__assert_fail@plt+0x2618>
   14df0:	ldr	r1, [pc, #1156]	; 1527c <__assert_fail@plt+0x25d8>
   14df4:	ldr	r0, [sp, #92]	; 0x5c
   14df8:	bl	1b110 <__assert_fail@plt+0x846c>
   14dfc:	cmp	r0, #0
   14e00:	bne	155e0 <__assert_fail@plt+0x293c>
   14e04:	ldr	r3, [r4, #36]	; 0x24
   14e08:	str	r5, [sp, #32]
   14e0c:	mov	r5, r3
   14e10:	b	14e2c <__assert_fail@plt+0x2188>
   14e14:	mov	r2, #0
   14e18:	add	r1, r5, #8
   14e1c:	bl	1b110 <__assert_fail@plt+0x846c>
   14e20:	cmp	r0, #0
   14e24:	bne	155e0 <__assert_fail@plt+0x293c>
   14e28:	ldr	r5, [r5]
   14e2c:	cmp	r5, #0
   14e30:	ldr	r0, [sp, #92]	; 0x5c
   14e34:	bne	14e14 <__assert_fail@plt+0x2170>
   14e38:	ldr	r2, [pc, #1152]	; 152c0 <__assert_fail@plt+0x261c>
   14e3c:	ldr	r1, [pc, #1252]	; 15328 <__assert_fail@plt+0x2684>
   14e40:	str	r5, [sp, #20]
   14e44:	ldr	r5, [sp, #32]
   14e48:	bl	1b110 <__assert_fail@plt+0x846c>
   14e4c:	cmp	r0, #0
   14e50:	bne	155e0 <__assert_fail@plt+0x293c>
   14e54:	ldr	r0, [sp, #92]	; 0x5c
   14e58:	bl	1b350 <__assert_fail@plt+0x86ac>
   14e5c:	cmp	r0, #0
   14e60:	bne	155e0 <__assert_fail@plt+0x293c>
   14e64:	ldr	r2, [pc, #1112]	; 152c4 <__assert_fail@plt+0x2620>
   14e68:	ldr	r1, [pc, #1208]	; 15328 <__assert_fail@plt+0x2684>
   14e6c:	ldr	r0, [sp, #92]	; 0x5c
   14e70:	bl	1b110 <__assert_fail@plt+0x846c>
   14e74:	cmp	r0, #0
   14e78:	bne	155e0 <__assert_fail@plt+0x293c>
   14e7c:	ldr	r1, [pc, #1092]	; 152c8 <__assert_fail@plt+0x2624>
   14e80:	ldr	r0, [sp, #92]	; 0x5c
   14e84:	bl	1b2ac <__assert_fail@plt+0x8608>
   14e88:	cmp	r0, #0
   14e8c:	bne	155e0 <__assert_fail@plt+0x293c>
   14e90:	ldr	r2, [pc, #1076]	; 152cc <__assert_fail@plt+0x2628>
   14e94:	ldr	r1, [pc, #1164]	; 15328 <__assert_fail@plt+0x2684>
   14e98:	ldr	r0, [sp, #92]	; 0x5c
   14e9c:	bl	1b110 <__assert_fail@plt+0x846c>
   14ea0:	cmp	r0, #0
   14ea4:	bne	155e0 <__assert_fail@plt+0x293c>
   14ea8:	mov	r1, r5
   14eac:	ldr	r0, [sp, #92]	; 0x5c
   14eb0:	bl	1b2d8 <__assert_fail@plt+0x8634>
   14eb4:	cmp	r0, #0
   14eb8:	bne	155e0 <__assert_fail@plt+0x293c>
   14ebc:	ldr	r0, [sp, #92]	; 0x5c
   14ec0:	bl	165f4 <__assert_fail@plt+0x3950>
   14ec4:	ldr	r0, [sp, #92]	; 0x5c
   14ec8:	bl	1b0a8 <__assert_fail@plt+0x8404>
   14ecc:	ldr	r0, [sp, #76]	; 0x4c
   14ed0:	bl	12788 <gpgrt_fclose@plt>
   14ed4:	ldr	r0, [sp, #20]
   14ed8:	bl	12788 <gpgrt_fclose@plt>
   14edc:	ldr	r0, [sp, #28]
   14ee0:	bl	125e4 <gcry_free@plt>
   14ee4:	mov	r0, fp
   14ee8:	bl	125e4 <gcry_free@plt>
   14eec:	mov	r3, #0
   14ef0:	ldr	r2, [pc, #984]	; 152d0 <__assert_fail@plt+0x262c>
   14ef4:	mov	r1, r9
   14ef8:	ldr	r0, [r4, #28]
   14efc:	ldr	fp, [sp, #60]	; 0x3c
   14f00:	bl	1c80c <__assert_fail@plt+0x9b68>
   14f04:	cmp	r0, #0
   14f08:	mov	r5, r0
   14f0c:	str	r0, [sp, #60]	; 0x3c
   14f10:	beq	1568c <__assert_fail@plt+0x29e8>
   14f14:	mov	r1, #2
   14f18:	bl	12a4c <access@plt>
   14f1c:	subs	r3, r0, #0
   14f20:	str	r3, [sp, #20]
   14f24:	bne	14558 <__assert_fail@plt+0x18b4>
   14f28:	mov	r1, #64	; 0x40
   14f2c:	mov	r0, r7
   14f30:	bl	128fc <strchr@plt>
   14f34:	subs	r3, r0, #0
   14f38:	beq	157b4 <__assert_fail@plt+0x2b10>
   14f3c:	sub	r3, r3, r7
   14f40:	add	r1, sp, #108	; 0x6c
   14f44:	mov	r2, r7
   14f48:	mov	r0, #8
   14f4c:	bl	12aa0 <gcry_md_hash_buffer@plt>
   14f50:	ldr	r5, [sp, #20]
   14f54:	mov	r0, r5
   14f58:	bl	125e4 <gcry_free@plt>
   14f5c:	mov	r2, r5
   14f60:	add	r0, sp, #108	; 0x6c
   14f64:	mov	r1, #28
   14f68:	bl	26708 <__assert_fail@plt+0x13a64>
   14f6c:	subs	r6, r0, #0
   14f70:	beq	156dc <__assert_fail@plt+0x2a38>
   14f74:	ldr	r0, [sp, #60]	; 0x3c
   14f78:	bl	125e4 <gcry_free@plt>
   14f7c:	ldr	r3, [sp, #20]
   14f80:	mov	r1, r9
   14f84:	str	r3, [sp]
   14f88:	ldr	r2, [pc, #832]	; 152d0 <__assert_fail@plt+0x262c>
   14f8c:	mov	r3, r6
   14f90:	ldr	r0, [r4, #28]
   14f94:	bl	1c80c <__assert_fail@plt+0x9b68>
   14f98:	cmp	r0, #0
   14f9c:	mov	r9, r0
   14fa0:	str	r0, [sp, #60]	; 0x3c
   14fa4:	beq	156dc <__assert_fail@plt+0x2a38>
   14fa8:	add	r5, sp, #92	; 0x5c
   14fac:	ldr	r1, [sp, #20]
   14fb0:	mov	r0, r5
   14fb4:	bl	27b6c <__assert_fail@plt+0x14ec8>
   14fb8:	mov	r0, r5
   14fbc:	ldr	r1, [pc, #824]	; 152fc <__assert_fail@plt+0x2658>
   14fc0:	bl	27bcc <__assert_fail@plt+0x14f28>
   14fc4:	ldr	r3, [r4]
   14fc8:	cmp	r3, #0
   14fcc:	beq	1570c <__assert_fail@plt+0x2a68>
   14fd0:	cmp	r3, #1
   14fd4:	ble	14fe4 <__assert_fail@plt+0x2340>
   14fd8:	ldr	r1, [pc, #800]	; 15300 <__assert_fail@plt+0x265c>
   14fdc:	mov	r0, r5
   14fe0:	bl	27bcc <__assert_fail@plt+0x14f28>
   14fe4:	mov	r0, r5
   14fe8:	ldr	r1, [pc, #788]	; 15304 <__assert_fail@plt+0x2660>
   14fec:	bl	27bcc <__assert_fail@plt+0x14f28>
   14ff0:	mov	r0, r5
   14ff4:	ldr	r1, [pc, #652]	; 15288 <__assert_fail@plt+0x25e4>
   14ff8:	bl	27bcc <__assert_fail@plt+0x14f28>
   14ffc:	mov	r0, r5
   15000:	ldr	r1, [pc, #644]	; 1528c <__assert_fail@plt+0x25e8>
   15004:	bl	27bcc <__assert_fail@plt+0x14f28>
   15008:	mov	r0, r5
   1500c:	ldr	r1, [pc, #636]	; 15290 <__assert_fail@plt+0x25ec>
   15010:	bl	27bcc <__assert_fail@plt+0x14f28>
   15014:	mov	r0, r5
   15018:	ldr	r1, [pc, #628]	; 15294 <__assert_fail@plt+0x25f0>
   1501c:	bl	27bcc <__assert_fail@plt+0x14f28>
   15020:	mov	r0, r5
   15024:	mov	r1, r9
   15028:	bl	27bcc <__assert_fail@plt+0x14f28>
   1502c:	mov	r0, r5
   15030:	ldr	r1, [pc, #668]	; 152d4 <__assert_fail@plt+0x2630>
   15034:	bl	27bcc <__assert_fail@plt+0x14f28>
   15038:	mov	r0, r5
   1503c:	ldr	r1, [pc, #596]	; 15298 <__assert_fail@plt+0x25f4>
   15040:	bl	27bcc <__assert_fail@plt+0x14f28>
   15044:	mov	r0, r5
   15048:	ldr	r1, [pc, #592]	; 152a0 <__assert_fail@plt+0x25fc>
   1504c:	bl	27bcc <__assert_fail@plt+0x14f28>
   15050:	mov	r0, r5
   15054:	ldr	r1, [pc, #700]	; 15318 <__assert_fail@plt+0x2674>
   15058:	bl	27bcc <__assert_fail@plt+0x14f28>
   1505c:	mov	r0, r5
   15060:	mov	r1, fp
   15064:	bl	27bcc <__assert_fail@plt+0x14f28>
   15068:	mov	r0, r5
   1506c:	mov	r1, #0
   15070:	bl	27bcc <__assert_fail@plt+0x14f28>
   15074:	mov	r0, r5
   15078:	mov	r1, #0
   1507c:	bl	27cac <__assert_fail@plt+0x15008>
   15080:	subs	r5, r0, #0
   15084:	beq	15740 <__assert_fail@plt+0x2a9c>
   15088:	mov	r3, #0
   1508c:	ldr	r0, [r4, #24]
   15090:	mov	r2, r3
   15094:	str	r3, [sp, #8]
   15098:	str	r3, [sp, #4]
   1509c:	str	r3, [sp]
   150a0:	mov	r1, r5
   150a4:	bl	2c71c <__assert_fail@plt+0x19a78>
   150a8:	subs	r4, r0, #0
   150ac:	bne	1571c <__assert_fail@plt+0x2a78>
   150b0:	mov	r0, r5
   150b4:	bl	125e4 <gcry_free@plt>
   150b8:	mov	r2, r7
   150bc:	ldr	r1, [sp, #64]	; 0x40
   150c0:	ldr	r0, [pc, #528]	; 152d8 <__assert_fail@plt+0x2634>
   150c4:	bl	21c58 <__assert_fail@plt+0xefb4>
   150c8:	b	14558 <__assert_fail@plt+0x18b4>
   150cc:	ldrb	r6, [sp, #72]	; 0x48
   150d0:	ldr	r0, [sp, #60]	; 0x3c
   150d4:	ands	r6, r6, #1
   150d8:	bne	15380 <__assert_fail@plt+0x26dc>
   150dc:	ldr	r2, [pc, #476]	; 152c0 <__assert_fail@plt+0x261c>
   150e0:	ldr	r1, [pc, #576]	; 15328 <__assert_fail@plt+0x2684>
   150e4:	bl	1b110 <__assert_fail@plt+0x846c>
   150e8:	subs	fp, r0, #0
   150ec:	bne	148f8 <__assert_fail@plt+0x1c54>
   150f0:	ldr	r0, [sp, #60]	; 0x3c
   150f4:	bl	1b350 <__assert_fail@plt+0x86ac>
   150f8:	subs	fp, r0, #0
   150fc:	bne	148f8 <__assert_fail@plt+0x1c54>
   15100:	ldr	r2, [pc, #444]	; 152c4 <__assert_fail@plt+0x2620>
   15104:	ldr	r1, [pc, #540]	; 15328 <__assert_fail@plt+0x2684>
   15108:	ldr	r0, [sp, #60]	; 0x3c
   1510c:	bl	1b110 <__assert_fail@plt+0x846c>
   15110:	subs	fp, r0, #0
   15114:	bne	148f8 <__assert_fail@plt+0x1c54>
   15118:	ldr	r1, [pc, #424]	; 152c8 <__assert_fail@plt+0x2624>
   1511c:	ldr	r0, [sp, #60]	; 0x3c
   15120:	bl	1b2ac <__assert_fail@plt+0x8608>
   15124:	subs	fp, r0, #0
   15128:	bne	148f8 <__assert_fail@plt+0x1c54>
   1512c:	ldr	r2, [pc, #408]	; 152cc <__assert_fail@plt+0x2628>
   15130:	ldr	r1, [pc, #496]	; 15328 <__assert_fail@plt+0x2684>
   15134:	ldr	r0, [sp, #60]	; 0x3c
   15138:	bl	1b110 <__assert_fail@plt+0x846c>
   1513c:	subs	fp, r0, #0
   15140:	bne	148f8 <__assert_fail@plt+0x1c54>
   15144:	add	r1, sp, #48	; 0x30
   15148:	ldr	r0, [sp, #60]	; 0x3c
   1514c:	bl	1b2d8 <__assert_fail@plt+0x8634>
   15150:	subs	fp, r0, #0
   15154:	bne	148f8 <__assert_fail@plt+0x1c54>
   15158:	ldr	r0, [sp, #60]	; 0x3c
   1515c:	bl	165f4 <__assert_fail@plt+0x3950>
   15160:	mov	r6, #0
   15164:	mov	fp, r0
   15168:	b	148f8 <__assert_fail@plt+0x1c54>
   1516c:	ldr	r3, [pc, #472]	; 1534c <__assert_fail@plt+0x26a8>
   15170:	ldr	r2, [pc, #356]	; 152dc <__assert_fail@plt+0x2638>
   15174:	ldr	r1, [pc, #500]	; 15370 <__assert_fail@plt+0x26cc>
   15178:	ldr	r0, [pc, #352]	; 152e0 <__assert_fail@plt+0x263c>
   1517c:	bl	22044 <__assert_fail@plt+0xf3a0>
   15180:	bl	12914 <gpg_err_code_from_syserror@plt>
   15184:	mov	r6, fp
   15188:	mov	r8, fp
   1518c:	uxth	r3, r0
   15190:	str	r3, [sp, #24]
   15194:	b	14558 <__assert_fail@plt+0x18b4>
   15198:	bl	12914 <gpg_err_code_from_syserror@plt>
   1519c:	subs	r2, r0, #0
   151a0:	str	r2, [sp, #24]
   151a4:	beq	151bc <__assert_fail@plt+0x2518>
   151a8:	ldr	r3, [pc, #148]	; 15244 <__assert_fail@plt+0x25a0>
   151ac:	uxth	r2, r2
   151b0:	cmp	r2, r3
   151b4:	str	r2, [sp, #24]
   151b8:	beq	156c0 <__assert_fail@plt+0x2a1c>
   151bc:	ldr	r0, [sp, #24]
   151c0:	bl	12b3c <gpg_strerror@plt>
   151c4:	mov	r1, fp
   151c8:	mov	r6, #0
   151cc:	mov	r2, r0
   151d0:	ldr	r0, [pc, #112]	; 15248 <__assert_fail@plt+0x25a4>
   151d4:	bl	21cbc <__assert_fail@plt+0xf018>
   151d8:	b	14558 <__assert_fail@plt+0x18b4>
   151dc:	strdeq	r5, [r4], -r8
   151e0:	andeq	r0, r3, ip, ror r5
   151e4:	andeq	r0, r3, r0, asr #22
   151e8:	andeq	r0, r3, r8, asr #22
   151ec:	andeq	r0, r3, r0, ror #22
   151f0:	andeq	r0, r3, r8, lsr #23
   151f4:	ldrdeq	r0, [r3], -r4
   151f8:	andeq	r1, r3, r0, asr fp
   151fc:	andeq	r0, r3, r0, lsl ip
   15200:	andeq	r0, r3, r0, asr #11
   15204:	ldrdeq	r0, [r3], -r4
   15208:	andeq	r0, r3, r4, asr pc
   1520c:	andeq	r0, r3, r0, ror #29
   15210:	andeq	r0, r3, r0, asr r6
   15214:	strdeq	r2, [r3], -r0
   15218:	andeq	r0, r3, r8, asr r6
   1521c:	andeq	r0, r3, r4, ror r6
   15220:	strdeq	r0, [r3], -r4
   15224:	andeq	r0, r3, ip, lsl #30
   15228:	muleq	r3, r4, r6
   1522c:	andeq	r0, r3, r8, asr #14
   15230:	muleq	r3, r8, r7
   15234:	andeq	r0, r3, r0, lsr #15
   15238:	andeq	r0, r3, r4, lsr #12
   1523c:	andeq	r0, r3, ip, ror #4
   15240:	andeq	r0, r3, r0, asr #6
   15244:	andeq	r8, r0, r1, asr r0
   15248:	andeq	r0, r3, r4, lsr #7
   1524c:	strdeq	r0, [r3], -ip
   15250:	andeq	r0, r3, ip, lsr #22
   15254:	andeq	r0, r3, r4, lsr pc
   15258:	andeq	r0, r3, r4, lsl #23
   1525c:	andeq	r0, r3, r8, lsl #22
   15260:	andeq	r0, r3, r8, ror #22
   15264:			; <UNDEFINED> instruction: 0x00030bb4
   15268:	andeq	r0, r3, r4, lsr #15
   1526c:	andeq	r0, r3, r4, asr #15
   15270:	andeq	r0, r3, ip, asr #15
   15274:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   15278:	andeq	r0, r3, r4, ror #15
   1527c:	andeq	r0, r3, ip, ror #15
   15280:	ldrdeq	r0, [r3], -ip
   15284:	andeq	r0, r3, r4, lsr ip
   15288:	andeq	r0, r3, r4, asr lr
   1528c:	andeq	r0, r3, r8, asr r4
   15290:	andeq	r0, r3, r8, ror #8
   15294:	andeq	r0, r3, ip, asr lr
   15298:	andeq	r0, r3, r8, lsl #29
   1529c:	andeq	r0, r3, r4, asr #30
   152a0:	andeq	r0, r3, r8, lsr #29
   152a4:	andeq	r0, r3, ip, ror #24
   152a8:	muleq	r3, ip, ip
   152ac:			; <UNDEFINED> instruction: 0x00030cb8
   152b0:	andeq	r0, r3, r4, lsl #26
   152b4:	andeq	r0, r3, r0, lsr #26
   152b8:	andeq	r0, r3, r0, lsr lr
   152bc:	andeq	r0, r3, ip, asr #28
   152c0:	strdeq	r0, [r3], -r8
   152c4:	andeq	r0, r3, r4, asr #16
   152c8:	andeq	r0, r3, r0, ror #16
   152cc:	andeq	r0, r3, ip, ror #16
   152d0:	andeq	r0, r3, r0, lsl #29
   152d4:	andeq	r0, r3, r8, ror #28
   152d8:			; <UNDEFINED> instruction: 0x00030eb4
   152dc:	muleq	r0, r2, r4
   152e0:	andeq	r0, r3, r8, ror #11
   152e4:	andeq	r0, r3, r8, lsl #17
   152e8:	andeq	r0, r3, r0, asr #17
   152ec:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   152f0:	ldrdeq	r0, [r3], -ip
   152f4:	muleq	r3, ip, sl
   152f8:	strdeq	r0, [r3], -r4
   152fc:	andeq	r0, r3, ip, lsl r4
   15300:	andeq	r0, r3, r4, lsr r4
   15304:	andeq	r0, r3, r0, asr #8
   15308:	andeq	r0, r3, r8, asr #8
   1530c:	andeq	r0, r3, r8, ror r4
   15310:			; <UNDEFINED> instruction: 0x00030ab8
   15314:	andeq	r0, r3, r8, asr #21
   15318:	andeq	r0, r3, r4, ror ip
   1531c:	andeq	r3, r1, r4, asr sl
   15320:	andeq	r6, r4, ip, ror #8
   15324:	andeq	r0, r3, ip, ror #21
   15328:	andeq	r0, r3, r4, lsr r8
   1532c:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   15330:	andeq	r0, r3, r8, ror ip
   15334:	andeq	r0, r3, r8, asr #24
   15338:	muleq	r3, r4, r2
   1533c:	andeq	r0, r3, r4, lsl ip
   15340:	andeq	r0, r3, r8, lsr #5
   15344:	strdeq	r5, [r3], -r0
   15348:	andeq	r0, r3, ip, lsr #13
   1534c:	andeq	r0, r3, ip, asr r2
   15350:	andeq	r0, r0, r3, lsl #9
   15354:	strdeq	r0, [r3], -ip
   15358:	andeq	r0, r0, lr, asr r5
   1535c:	andeq	r0, r0, ip, ror r5
   15360:			; <UNDEFINED> instruction: 0x000305b4
   15364:	andeq	r0, r3, r0, lsl #5
   15368:			; <UNDEFINED> instruction: 0x000005b4
   1536c:	strdeq	r2, [r3], -ip
   15370:	muleq	r3, r4, r5
   15374:	ldrdeq	r0, [r3], -r8
   15378:	andeq	r0, r3, ip, lsr #8
   1537c:	strdeq	r0, [r3], -r8
   15380:	ldr	r2, [pc, #-164]	; 152e4 <__assert_fail@plt+0x2640>
   15384:	ldr	r1, [pc, #-100]	; 15328 <__assert_fail@plt+0x2684>
   15388:	bl	1b110 <__assert_fail@plt+0x846c>
   1538c:	subs	fp, r0, #0
   15390:	bne	148f4 <__assert_fail@plt+0x1c50>
   15394:	ldr	r0, [sp, #60]	; 0x3c
   15398:	bl	1b350 <__assert_fail@plt+0x86ac>
   1539c:	subs	fp, r0, #0
   153a0:	bne	148f4 <__assert_fail@plt+0x1c50>
   153a4:	ldr	r2, [pc, #-196]	; 152e8 <__assert_fail@plt+0x2644>
   153a8:	ldr	r1, [pc, #-136]	; 15328 <__assert_fail@plt+0x2684>
   153ac:	ldr	r0, [sp, #60]	; 0x3c
   153b0:	bl	1b110 <__assert_fail@plt+0x846c>
   153b4:	subs	fp, r0, #0
   153b8:	bne	148f4 <__assert_fail@plt+0x1c50>
   153bc:	ldr	r0, [sp, #60]	; 0x3c
   153c0:	bl	1b350 <__assert_fail@plt+0x86ac>
   153c4:	subs	fp, r0, #0
   153c8:	bne	148f4 <__assert_fail@plt+0x1c50>
   153cc:	ldr	r0, [sp, #60]	; 0x3c
   153d0:	bl	1b520 <__assert_fail@plt+0x887c>
   153d4:	ldr	r2, [pc, #-240]	; 152ec <__assert_fail@plt+0x2648>
   153d8:	ldr	r1, [pc, #-184]	; 15328 <__assert_fail@plt+0x2684>
   153dc:	mov	r6, r0
   153e0:	ldr	r0, [sp, #60]	; 0x3c
   153e4:	bl	1b110 <__assert_fail@plt+0x846c>
   153e8:	subs	fp, r0, #0
   153ec:	bne	148f4 <__assert_fail@plt+0x1c50>
   153f0:	ldr	r1, [pc, #-264]	; 152f0 <__assert_fail@plt+0x264c>
   153f4:	ldr	r0, [sp, #60]	; 0x3c
   153f8:	bl	1b2ac <__assert_fail@plt+0x8608>
   153fc:	subs	fp, r0, #0
   15400:	bne	148f4 <__assert_fail@plt+0x1c50>
   15404:	ldr	r2, [pc, #-280]	; 152f4 <__assert_fail@plt+0x2650>
   15408:	ldr	r1, [pc, #-232]	; 15328 <__assert_fail@plt+0x2684>
   1540c:	ldr	r0, [sp, #60]	; 0x3c
   15410:	bl	1b110 <__assert_fail@plt+0x846c>
   15414:	subs	fp, r0, #0
   15418:	bne	148f4 <__assert_fail@plt+0x1c50>
   1541c:	add	r1, sp, #48	; 0x30
   15420:	ldr	r0, [sp, #60]	; 0x3c
   15424:	bl	1b2d8 <__assert_fail@plt+0x8634>
   15428:	subs	fp, r0, #0
   1542c:	bne	148f4 <__assert_fail@plt+0x1c50>
   15430:	ldr	r0, [sp, #60]	; 0x3c
   15434:	bl	1b490 <__assert_fail@plt+0x87ec>
   15438:	subs	fp, r0, #0
   1543c:	bne	148f4 <__assert_fail@plt+0x1c50>
   15440:	mov	r1, r6
   15444:	add	r2, sp, #52	; 0x34
   15448:	ldr	r0, [sp, #60]	; 0x3c
   1544c:	bl	1b588 <__assert_fail@plt+0x88e4>
   15450:	subs	fp, r0, #0
   15454:	bne	148f4 <__assert_fail@plt+0x1c50>
   15458:	ldr	r3, [sp, #52]	; 0x34
   1545c:	ldr	r1, [pc, #-364]	; 152f8 <__assert_fail@plt+0x2654>
   15460:	str	fp, [sp, #56]	; 0x38
   15464:	str	r3, [sp, #28]
   15468:	bl	12920 <gpgrt_fopenmem@plt>
   1546c:	subs	r7, r0, #0
   15470:	beq	157f8 <__assert_fail@plt+0x2b54>
   15474:	add	r6, sp, #92	; 0x5c
   15478:	mov	r1, fp
   1547c:	mov	r0, r6
   15480:	bl	27b6c <__assert_fail@plt+0x14ec8>
   15484:	mov	r0, r6
   15488:	ldr	r1, [pc, #-404]	; 152fc <__assert_fail@plt+0x2658>
   1548c:	bl	27bcc <__assert_fail@plt+0x14f28>
   15490:	ldr	r3, [pc, #-376]	; 15320 <__assert_fail@plt+0x267c>
   15494:	ldr	r3, [r3]
   15498:	cmp	r3, #0
   1549c:	beq	157e8 <__assert_fail@plt+0x2b44>
   154a0:	cmp	r3, #1
   154a4:	ble	154b4 <__assert_fail@plt+0x2810>
   154a8:	ldr	r1, [pc, #-432]	; 15300 <__assert_fail@plt+0x265c>
   154ac:	mov	r0, r6
   154b0:	bl	27bcc <__assert_fail@plt+0x14f28>
   154b4:	mov	r0, r6
   154b8:	ldr	r1, [pc, #-444]	; 15304 <__assert_fail@plt+0x2660>
   154bc:	bl	27bcc <__assert_fail@plt+0x14f28>
   154c0:	mov	r0, r6
   154c4:	ldr	r1, [pc, #-452]	; 15308 <__assert_fail@plt+0x2664>
   154c8:	bl	27bcc <__assert_fail@plt+0x14f28>
   154cc:	mov	r0, r6
   154d0:	ldr	r1, [pc, #-460]	; 1530c <__assert_fail@plt+0x2668>
   154d4:	bl	27bcc <__assert_fail@plt+0x14f28>
   154d8:	mov	r0, r6
   154dc:	ldr	r1, [pc, #-468]	; 15310 <__assert_fail@plt+0x266c>
   154e0:	bl	27bcc <__assert_fail@plt+0x14f28>
   154e4:	mov	r0, r6
   154e8:	mov	r1, r8
   154ec:	bl	27bcc <__assert_fail@plt+0x14f28>
   154f0:	mov	r0, r6
   154f4:	ldr	r1, [pc, #-488]	; 15314 <__assert_fail@plt+0x2670>
   154f8:	bl	27bcc <__assert_fail@plt+0x14f28>
   154fc:	mov	r0, r6
   15500:	ldr	r1, [pc, #-496]	; 15318 <__assert_fail@plt+0x2674>
   15504:	bl	27bcc <__assert_fail@plt+0x14f28>
   15508:	mov	r0, r6
   1550c:	mov	r1, #0
   15510:	bl	27bcc <__assert_fail@plt+0x14f28>
   15514:	mov	r0, r6
   15518:	mov	r1, #0
   1551c:	bl	27cac <__assert_fail@plt+0x15008>
   15520:	subs	r6, r0, #0
   15524:	beq	157dc <__assert_fail@plt+0x2b38>
   15528:	ldr	r1, [pc, #-532]	; 1531c <__assert_fail@plt+0x2678>
   1552c:	ldr	r0, [pc, #-532]	; 15320 <__assert_fail@plt+0x267c>
   15530:	mov	r3, #0
   15534:	str	r7, [sp]
   15538:	stmib	sp, {r1, r3}
   1553c:	ldr	r2, [sp, #28]
   15540:	mov	r1, r6
   15544:	ldr	r0, [r0, #24]
   15548:	bl	2c71c <__assert_fail@plt+0x19a78>
   1554c:	subs	fp, r0, #0
   15550:	bne	157c8 <__assert_fail@plt+0x2b24>
   15554:	mov	r0, r7
   15558:	bl	12bb4 <gpgrt_rewind@plt>
   1555c:	str	r7, [sp, #56]	; 0x38
   15560:	mov	r7, fp
   15564:	mov	r0, r7
   15568:	bl	12788 <gpgrt_fclose@plt>
   1556c:	mov	r0, r6
   15570:	bl	125e4 <gcry_free@plt>
   15574:	cmp	fp, #0
   15578:	bne	148f4 <__assert_fail@plt+0x1c50>
   1557c:	ldr	r2, [pc, #-608]	; 15324 <__assert_fail@plt+0x2680>
   15580:	ldr	r1, [pc, #-608]	; 15328 <__assert_fail@plt+0x2684>
   15584:	ldr	r0, [sp, #60]	; 0x3c
   15588:	bl	1b110 <__assert_fail@plt+0x846c>
   1558c:	subs	fp, r0, #0
   15590:	bne	148f4 <__assert_fail@plt+0x1c50>
   15594:	add	r1, sp, #56	; 0x38
   15598:	ldr	r0, [sp, #60]	; 0x3c
   1559c:	bl	1b2d8 <__assert_fail@plt+0x8634>
   155a0:	subs	fp, r0, #0
   155a4:	beq	15158 <__assert_fail@plt+0x24b4>
   155a8:	b	148f4 <__assert_fail@plt+0x1c50>
   155ac:	ldr	r3, [r4, #32]
   155b0:	cmp	r3, #0
   155b4:	str	r3, [sp, #20]
   155b8:	beq	15768 <__assert_fail@plt+0x2ac4>
   155bc:	ldr	r1, [sp, #20]
   155c0:	ldr	r0, [pc, #-668]	; 1532c <__assert_fail@plt+0x2688>
   155c4:	str	r1, [sp, #36]	; 0x24
   155c8:	bl	21c58 <__assert_fail@plt+0xefb4>
   155cc:	b	14d08 <__assert_fail@plt+0x2064>
   155d0:	ldr	r1, [pc, #-608]	; 15378 <__assert_fail@plt+0x26d4>
   155d4:	mov	r0, r5
   155d8:	bl	27bcc <__assert_fail@plt+0x14f28>
   155dc:	b	14bcc <__assert_fail@plt+0x1f28>
   155e0:	mov	r3, #0
   155e4:	str	r3, [sp, #20]
   155e8:	b	14ec4 <__assert_fail@plt+0x2220>
   155ec:	ldr	r5, [sp, #60]	; 0x3c
   155f0:	bl	12914 <gpg_err_code_from_syserror@plt>
   155f4:	bl	12b3c <gpg_strerror@plt>
   155f8:	mov	r1, r5
   155fc:	mov	r2, r0
   15600:	ldr	r0, [pc, #-728]	; 15330 <__assert_fail@plt+0x268c>
   15604:	bl	21cbc <__assert_fail@plt+0xf018>
   15608:	b	14cc8 <__assert_fail@plt+0x2024>
   1560c:	bl	12914 <gpg_err_code_from_syserror@plt>
   15610:	subs	r5, r0, #0
   15614:	beq	14ca4 <__assert_fail@plt+0x2000>
   15618:	uxth	r5, r5
   1561c:	ldr	r0, [sp, #20]
   15620:	bl	125e4 <gcry_free@plt>
   15624:	mov	r0, #0
   15628:	bl	125e4 <gcry_free@plt>
   1562c:	cmp	r5, #0
   15630:	beq	14cb4 <__assert_fail@plt+0x2010>
   15634:	bl	12914 <gpg_err_code_from_syserror@plt>
   15638:	ldr	r4, [sp, #60]	; 0x3c
   1563c:	uxth	r3, r0
   15640:	mov	r0, r3
   15644:	str	r3, [sp, #24]
   15648:	bl	12b3c <gpg_strerror@plt>
   1564c:	mov	r2, r4
   15650:	mov	r1, fp
   15654:	mov	r3, r0
   15658:	ldr	r0, [pc, #-812]	; 15334 <__assert_fail@plt+0x2690>
   1565c:	bl	21cbc <__assert_fail@plt+0xf018>
   15660:	b	14558 <__assert_fail@plt+0x18b4>
   15664:	bl	12b3c <gpg_strerror@plt>
   15668:	ldr	r1, [pc, #-824]	; 15338 <__assert_fail@plt+0x2694>
   1566c:	mov	r2, r0
   15670:	ldr	r0, [pc, #-820]	; 15344 <__assert_fail@plt+0x26a0>
   15674:	bl	21cbc <__assert_fail@plt+0xf018>
   15678:	ldr	r0, [sp, #20]
   1567c:	bl	125e4 <gcry_free@plt>
   15680:	mov	r0, r5
   15684:	bl	125e4 <gcry_free@plt>
   15688:	b	15634 <__assert_fail@plt+0x2990>
   1568c:	bl	12914 <gpg_err_code_from_syserror@plt>
   15690:	mov	r6, r5
   15694:	uxth	r3, r0
   15698:	str	r3, [sp, #24]
   1569c:	b	14558 <__assert_fail@plt+0x18b4>
   156a0:	bl	12914 <gpg_err_code_from_syserror@plt>
   156a4:	uxth	r0, r0
   156a8:	bl	12b3c <gpg_strerror@plt>
   156ac:	mov	r1, r0
   156b0:	ldr	r0, [pc, #-828]	; 1537c <__assert_fail@plt+0x26d8>
   156b4:	bl	21cbc <__assert_fail@plt+0xf018>
   156b8:	b	14ec4 <__assert_fail@plt+0x2220>
   156bc:	bl	1262c <__stack_chk_fail@plt>
   156c0:	mov	r1, r7
   156c4:	ldr	r0, [pc, #-912]	; 1533c <__assert_fail@plt+0x2698>
   156c8:	bl	21c58 <__assert_fail@plt+0xefb4>
   156cc:	mov	r3, #27
   156d0:	mov	r6, r8
   156d4:	str	r3, [sp, #24]
   156d8:	b	14558 <__assert_fail@plt+0x18b4>
   156dc:	bl	12914 <gpg_err_code_from_syserror@plt>
   156e0:	uxth	r3, r0
   156e4:	str	r3, [sp, #24]
   156e8:	b	14558 <__assert_fail@plt+0x18b4>
   156ec:	bl	12914 <gpg_err_code_from_syserror@plt>
   156f0:	uxth	r5, r0
   156f4:	mov	r0, r5
   156f8:	bl	12b3c <gpg_strerror@plt>
   156fc:	mov	r1, r0
   15700:	ldr	r0, [pc, #-908]	; 1537c <__assert_fail@plt+0x26d8>
   15704:	bl	21cbc <__assert_fail@plt+0xf018>
   15708:	b	1561c <__assert_fail@plt+0x2978>
   1570c:	ldr	r1, [pc, #-924]	; 15378 <__assert_fail@plt+0x26d4>
   15710:	mov	r0, r5
   15714:	bl	27bcc <__assert_fail@plt+0x14f28>
   15718:	b	14fe4 <__assert_fail@plt+0x2340>
   1571c:	bl	12b3c <gpg_strerror@plt>
   15720:	ldr	r1, [pc, #-1000]	; 15340 <__assert_fail@plt+0x269c>
   15724:	mov	r2, r0
   15728:	ldr	r0, [pc, #-1004]	; 15344 <__assert_fail@plt+0x26a0>
   1572c:	bl	21cbc <__assert_fail@plt+0xf018>
   15730:	mov	r0, r5
   15734:	str	r4, [sp, #24]
   15738:	bl	125e4 <gcry_free@plt>
   1573c:	b	14558 <__assert_fail@plt+0x18b4>
   15740:	bl	12914 <gpg_err_code_from_syserror@plt>
   15744:	cmp	r0, #0
   15748:	beq	150b0 <__assert_fail@plt+0x240c>
   1574c:	uxth	r4, r0
   15750:	mov	r0, r5
   15754:	bl	125e4 <gcry_free@plt>
   15758:	cmp	r4, #0
   1575c:	strne	r4, [sp, #24]
   15760:	bne	14558 <__assert_fail@plt+0x18b4>
   15764:	b	150b8 <__assert_fail@plt+0x2414>
   15768:	mov	r1, r7
   1576c:	ldr	r0, [pc, #-1068]	; 15348 <__assert_fail@plt+0x26a4>
   15770:	bl	21cbc <__assert_fail@plt+0xf018>
   15774:	b	14ec4 <__assert_fail@plt+0x2220>
   15778:	ldr	r3, [pc, #-1076]	; 1534c <__assert_fail@plt+0x26a8>
   1577c:	ldr	r2, [pc, #-1076]	; 15350 <__assert_fail@plt+0x26ac>
   15780:	ldr	r1, [pc, #-1048]	; 15370 <__assert_fail@plt+0x26cc>
   15784:	ldr	r0, [pc, #-1068]	; 15360 <__assert_fail@plt+0x26bc>
   15788:	bl	22044 <__assert_fail@plt+0xf3a0>
   1578c:	ldr	r3, [pc, #-1072]	; 15364 <__assert_fail@plt+0x26c0>
   15790:	ldr	r2, [pc, #-1088]	; 15358 <__assert_fail@plt+0x26b4>
   15794:	ldr	r1, [pc, #-1068]	; 15370 <__assert_fail@plt+0x26cc>
   15798:	ldr	r0, [pc, #-1100]	; 15354 <__assert_fail@plt+0x26b0>
   1579c:	bl	22044 <__assert_fail@plt+0xf3a0>
   157a0:	ldr	r3, [pc, #-1092]	; 15364 <__assert_fail@plt+0x26c0>
   157a4:	ldr	r2, [pc, #-1104]	; 1535c <__assert_fail@plt+0x26b8>
   157a8:	ldr	r1, [pc, #-1088]	; 15370 <__assert_fail@plt+0x26cc>
   157ac:	ldr	r0, [pc, #-1108]	; 15360 <__assert_fail@plt+0x26bc>
   157b0:	bl	22044 <__assert_fail@plt+0xf3a0>
   157b4:	ldr	r3, [pc, #-1112]	; 15364 <__assert_fail@plt+0x26c0>
   157b8:	ldr	r2, [pc, #-1112]	; 15368 <__assert_fail@plt+0x26c4>
   157bc:	ldr	r1, [pc, #-1108]	; 15370 <__assert_fail@plt+0x26cc>
   157c0:	ldr	r0, [pc, #-1116]	; 1536c <__assert_fail@plt+0x26c8>
   157c4:	bl	22044 <__assert_fail@plt+0xf3a0>
   157c8:	bl	12b3c <gpg_strerror@plt>
   157cc:	mov	r1, r0
   157d0:	ldr	r0, [pc, #-1124]	; 15374 <__assert_fail@plt+0x26d0>
   157d4:	bl	21cbc <__assert_fail@plt+0xf018>
   157d8:	b	15564 <__assert_fail@plt+0x28c0>
   157dc:	bl	12914 <gpg_err_code_from_syserror@plt>
   157e0:	uxth	fp, r0
   157e4:	b	15564 <__assert_fail@plt+0x28c0>
   157e8:	ldr	r1, [pc, #-1144]	; 15378 <__assert_fail@plt+0x26d4>
   157ec:	mov	r0, r6
   157f0:	bl	27bcc <__assert_fail@plt+0x14f28>
   157f4:	b	154b4 <__assert_fail@plt+0x2810>
   157f8:	bl	12914 <gpg_err_code_from_syserror@plt>
   157fc:	uxth	fp, r0
   15800:	mov	r0, fp
   15804:	bl	12b3c <gpg_strerror@plt>
   15808:	mov	r1, r0
   1580c:	ldr	r0, [pc, #-1176]	; 1537c <__assert_fail@plt+0x26d8>
   15810:	bl	21cbc <__assert_fail@plt+0xf018>
   15814:	b	15574 <__assert_fail@plt+0x28d0>
   15818:	ldr	r3, [pc, #16]	; 15830 <__assert_fail@plt+0x2b8c>
   1581c:	ldr	r3, [r3, #4]
   15820:	tst	r3, #4
   15824:	bxeq	lr
   15828:	ldr	r0, [pc, #4]	; 15834 <__assert_fail@plt+0x2b90>
   1582c:	b	21e08 <__assert_fail@plt+0xf164>
   15830:	andeq	r6, r4, ip, ror #8
   15834:	andeq	r0, r3, r8, lsl r3
   15838:	push	{r4, r5, r6, r7, r8, lr}
   1583c:	sub	sp, sp, #4096	; 0x1000
   15840:	ldr	r7, [pc, #332]	; 15994 <__assert_fail@plt+0x2cf0>
   15844:	sub	sp, sp, #8
   15848:	add	r2, sp, #4096	; 0x1000
   1584c:	ldr	r3, [r7]
   15850:	add	r2, r2, #4
   15854:	mov	r8, r1
   15858:	mov	r4, r0
   1585c:	mov	r0, r1
   15860:	ldr	r1, [pc, #304]	; 15998 <__assert_fail@plt+0x2cf4>
   15864:	str	r3, [r2]
   15868:	bl	12a04 <gpgrt_fopen@plt>
   1586c:	subs	r6, r0, #0
   15870:	bne	158c4 <__assert_fail@plt+0x2c20>
   15874:	b	15984 <__assert_fail@plt+0x2ce0>
   15878:	mov	r3, r6
   1587c:	mov	r2, r5
   15880:	mov	r1, #1
   15884:	add	r0, sp, #4
   15888:	bl	12614 <gpgrt_fwrite@plt>
   1588c:	cmp	r5, r0
   15890:	bne	158e0 <__assert_fail@plt+0x2c3c>
   15894:	mov	r0, r4
   15898:	bl	12710 <gpgrt_feof@plt>
   1589c:	cmp	r0, #0
   158a0:	bne	158e0 <__assert_fail@plt+0x2c3c>
   158a4:	mov	r0, r4
   158a8:	bl	1265c <gpgrt_ferror@plt>
   158ac:	cmp	r0, #0
   158b0:	bne	158e0 <__assert_fail@plt+0x2c3c>
   158b4:	mov	r0, r6
   158b8:	bl	1265c <gpgrt_ferror@plt>
   158bc:	cmp	r0, #0
   158c0:	bne	158e0 <__assert_fail@plt+0x2c3c>
   158c4:	mov	r3, r4
   158c8:	mov	r2, #4096	; 0x1000
   158cc:	mov	r1, #1
   158d0:	add	r0, sp, #4
   158d4:	bl	126ec <gpgrt_fread@plt>
   158d8:	subs	r5, r0, #0
   158dc:	bne	15878 <__assert_fail@plt+0x2bd4>
   158e0:	mov	r0, r4
   158e4:	bl	12710 <gpgrt_feof@plt>
   158e8:	cmp	r0, #0
   158ec:	beq	15900 <__assert_fail@plt+0x2c5c>
   158f0:	mov	r0, r4
   158f4:	bl	1265c <gpgrt_ferror@plt>
   158f8:	cmp	r0, #0
   158fc:	beq	15940 <__assert_fail@plt+0x2c9c>
   15900:	bl	12914 <gpg_err_code_from_syserror@plt>
   15904:	uxth	r4, r0
   15908:	mov	r0, r6
   1590c:	bl	12788 <gpgrt_fclose@plt>
   15910:	mov	r0, r8
   15914:	bl	22a2c <__assert_fail@plt+0xfd88>
   15918:	add	r3, sp, #4096	; 0x1000
   1591c:	add	r3, r3, #4
   15920:	ldr	r2, [r3]
   15924:	ldr	r3, [r7]
   15928:	mov	r0, r4
   1592c:	cmp	r2, r3
   15930:	bne	15990 <__assert_fail@plt+0x2cec>
   15934:	add	sp, sp, #4096	; 0x1000
   15938:	add	sp, sp, #8
   1593c:	pop	{r4, r5, r6, r7, r8, pc}
   15940:	mov	r0, r6
   15944:	bl	1265c <gpgrt_ferror@plt>
   15948:	cmp	r0, #0
   1594c:	bne	15900 <__assert_fail@plt+0x2c5c>
   15950:	mov	r0, r6
   15954:	bl	12788 <gpgrt_fclose@plt>
   15958:	subs	r4, r0, #0
   1595c:	beq	15918 <__assert_fail@plt+0x2c74>
   15960:	bl	12914 <gpg_err_code_from_syserror@plt>
   15964:	uxth	r4, r0
   15968:	mov	r0, r4
   1596c:	bl	12b3c <gpg_strerror@plt>
   15970:	mov	r1, r8
   15974:	mov	r2, r0
   15978:	ldr	r0, [pc, #28]	; 1599c <__assert_fail@plt+0x2cf8>
   1597c:	bl	21cbc <__assert_fail@plt+0xf018>
   15980:	b	15918 <__assert_fail@plt+0x2c74>
   15984:	bl	12914 <gpg_err_code_from_syserror@plt>
   15988:	uxth	r4, r0
   1598c:	b	15918 <__assert_fail@plt+0x2c74>
   15990:	bl	1262c <__stack_chk_fail@plt>
   15994:	strdeq	r5, [r4], -r8
   15998:	andeq	r1, r3, r4, ror r7
   1599c:	andeq	r0, r3, r4, ror #10
   159a0:	mov	r3, r1
   159a4:	push	{r4, r5, r6, lr}
   159a8:	mov	r4, r0
   159ac:	ldr	r1, [pc, #56]	; 159ec <__assert_fail@plt+0x2d48>
   159b0:	mov	r0, r3
   159b4:	mov	r5, r2
   159b8:	bl	124b8 <strcmp@plt>
   159bc:	cmp	r0, #0
   159c0:	popne	{r4, r5, r6, pc}
   159c4:	ldr	r3, [r4, #8]
   159c8:	mov	r0, r5
   159cc:	add	r3, r3, #1
   159d0:	str	r3, [r4, #8]
   159d4:	ldr	r1, [r4]
   159d8:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   159dc:	cmp	r0, #0
   159e0:	moveq	r3, #1
   159e4:	streq	r3, [r4, #4]
   159e8:	pop	{r4, r5, r6, pc}
   159ec:	andeq	r1, r3, r8, ror r7
   159f0:	cmn	r0, #1
   159f4:	push	{r4, r5, r6, lr}
   159f8:	beq	15a7c <__assert_fail@plt+0x2dd8>
   159fc:	ldr	r6, [pc, #260]	; 15b08 <__assert_fail@plt+0x2e64>
   15a00:	mov	r4, r0
   15a04:	ldr	r3, [r6]
   15a08:	cmp	r3, r0
   15a0c:	popeq	{r4, r5, r6, pc}
   15a10:	ldr	r5, [pc, #244]	; 15b0c <__assert_fail@plt+0x2e68>
   15a14:	ldr	r3, [r5]
   15a18:	cmp	r3, #0
   15a1c:	beq	15a3c <__assert_fail@plt+0x2d98>
   15a20:	mov	r0, #1
   15a24:	bl	12890 <_gpgrt_get_std_stream@plt>
   15a28:	ldr	r3, [r5]
   15a2c:	cmp	r3, r0
   15a30:	bne	15ac8 <__assert_fail@plt+0x2e24>
   15a34:	mov	r3, #0
   15a38:	str	r3, [r5]
   15a3c:	cmp	r4, #1
   15a40:	beq	15a6c <__assert_fail@plt+0x2dc8>
   15a44:	cmp	r4, #2
   15a48:	beq	15a6c <__assert_fail@plt+0x2dc8>
   15a4c:	ldr	r1, [pc, #188]	; 15b10 <__assert_fail@plt+0x2e6c>
   15a50:	mov	r0, r4
   15a54:	bl	127dc <gpgrt_fdopen@plt>
   15a58:	str	r0, [r5]
   15a5c:	cmp	r0, #0
   15a60:	beq	15ae8 <__assert_fail@plt+0x2e44>
   15a64:	str	r4, [r6]
   15a68:	pop	{r4, r5, r6, pc}
   15a6c:	mov	r0, r4
   15a70:	bl	12890 <_gpgrt_get_std_stream@plt>
   15a74:	str	r0, [r5]
   15a78:	b	15a5c <__assert_fail@plt+0x2db8>
   15a7c:	ldr	r4, [pc, #136]	; 15b0c <__assert_fail@plt+0x2e68>
   15a80:	ldr	r3, [r4]
   15a84:	cmp	r3, #0
   15a88:	popeq	{r4, r5, r6, pc}
   15a8c:	mov	r0, #1
   15a90:	bl	12890 <_gpgrt_get_std_stream@plt>
   15a94:	ldr	r3, [r4]
   15a98:	cmp	r3, r0
   15a9c:	beq	15abc <__assert_fail@plt+0x2e18>
   15aa0:	mov	r0, #2
   15aa4:	bl	12890 <_gpgrt_get_std_stream@plt>
   15aa8:	ldr	r3, [r4]
   15aac:	cmp	r3, r0
   15ab0:	beq	15abc <__assert_fail@plt+0x2e18>
   15ab4:	mov	r0, r3
   15ab8:	bl	12788 <gpgrt_fclose@plt>
   15abc:	mov	r3, #0
   15ac0:	str	r3, [r4]
   15ac4:	pop	{r4, r5, r6, pc}
   15ac8:	mov	r0, #2
   15acc:	bl	12890 <_gpgrt_get_std_stream@plt>
   15ad0:	ldr	r3, [r5]
   15ad4:	cmp	r3, r0
   15ad8:	beq	15a34 <__assert_fail@plt+0x2d90>
   15adc:	mov	r0, r3
   15ae0:	bl	12788 <gpgrt_fclose@plt>
   15ae4:	b	15a34 <__assert_fail@plt+0x2d90>
   15ae8:	bl	12914 <gpg_err_code_from_syserror@plt>
   15aec:	cmp	r0, #0
   15af0:	uxthne	r0, r0
   15af4:	bl	12b3c <gpg_strerror@plt>
   15af8:	mov	r1, r4
   15afc:	mov	r2, r0
   15b00:	ldr	r0, [pc, #12]	; 15b14 <__assert_fail@plt+0x2e70>
   15b04:	bl	21d40 <__assert_fail@plt+0xf09c>
   15b08:	andeq	r6, r4, r8, ror #3
   15b0c:	andeq	r6, r4, ip, lsl #4
   15b10:	andeq	r1, r3, r0, asr r2
   15b14:	andeq	r1, r3, r4, lsl #15
   15b18:	push	{r1, r2, r3}
   15b1c:	push	{r4, r5, r6, r7, lr}
   15b20:	sub	sp, sp, #8
   15b24:	ldr	r4, [pc, #144]	; 15bbc <__assert_fail@plt+0x2f18>
   15b28:	ldr	r5, [pc, #144]	; 15bc0 <__assert_fail@plt+0x2f1c>
   15b2c:	ldr	r6, [sp, #28]
   15b30:	ldr	r1, [r4]
   15b34:	ldr	r3, [r5]
   15b38:	cmp	r1, #0
   15b3c:	str	r3, [sp, #4]
   15b40:	beq	15b98 <__assert_fail@plt+0x2ef4>
   15b44:	mov	r7, r0
   15b48:	ldr	r0, [pc, #116]	; 15bc4 <__assert_fail@plt+0x2f20>
   15b4c:	bl	12a64 <gpgrt_fputs@plt>
   15b50:	mov	r0, r7
   15b54:	bl	22124 <__assert_fail@plt+0xf480>
   15b58:	ldr	r1, [r4]
   15b5c:	bl	12a64 <gpgrt_fputs@plt>
   15b60:	cmp	r6, #0
   15b64:	beq	15b8c <__assert_fail@plt+0x2ee8>
   15b68:	ldr	r1, [r4]
   15b6c:	mov	r0, #32
   15b70:	bl	12770 <gpgrt_fputc@plt>
   15b74:	add	r3, sp, #32
   15b78:	mov	r1, r6
   15b7c:	mov	r2, r3
   15b80:	ldr	r0, [r4]
   15b84:	str	r3, [sp]
   15b88:	bl	12500 <gpgrt_vfprintf@plt>
   15b8c:	ldr	r1, [r4]
   15b90:	mov	r0, #10
   15b94:	bl	12770 <gpgrt_fputc@plt>
   15b98:	ldr	r2, [sp, #4]
   15b9c:	ldr	r3, [r5]
   15ba0:	cmp	r2, r3
   15ba4:	bne	15bb8 <__assert_fail@plt+0x2f14>
   15ba8:	add	sp, sp, #8
   15bac:	pop	{r4, r5, r6, r7, lr}
   15bb0:	add	sp, sp, #12
   15bb4:	bx	lr
   15bb8:	bl	1262c <__stack_chk_fail@plt>
   15bbc:	andeq	r6, r4, ip, lsl #4
   15bc0:	strdeq	r5, [r4], -r8
   15bc4:	andeq	r1, r3, ip, lsr #15
   15bc8:	push	{r4, r5, r6, lr}
   15bcc:	subs	r4, r0, #0
   15bd0:	popeq	{r4, r5, r6, pc}
   15bd4:	ldr	r0, [r4, #8]
   15bd8:	ldr	r5, [r4]
   15bdc:	bl	125e4 <gcry_free@plt>
   15be0:	mov	r0, r4
   15be4:	bl	125e4 <gcry_free@plt>
   15be8:	subs	r4, r5, #0
   15bec:	bne	15bd4 <__assert_fail@plt+0x2f30>
   15bf0:	pop	{r4, r5, r6, pc}
   15bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bf8:	mov	r4, #0
   15bfc:	ldr	r6, [pc, #580]	; 15e48 <__assert_fail@plt+0x31a4>
   15c00:	sub	sp, sp, #52	; 0x34
   15c04:	mov	sl, r0
   15c08:	ldr	ip, [r6]
   15c0c:	mov	r9, r1
   15c10:	str	r4, [r0]
   15c14:	ldr	r1, [pc, #560]	; 15e4c <__assert_fail@plt+0x31a8>
   15c18:	mov	r0, r4
   15c1c:	mov	r8, r2
   15c20:	mov	r7, r3
   15c24:	str	ip, [sp, #44]	; 0x2c
   15c28:	str	r4, [sp, #16]
   15c2c:	str	r4, [sp, #20]
   15c30:	str	r4, [sp, #24]
   15c34:	bl	12920 <gpgrt_fopenmem@plt>
   15c38:	subs	r5, r0, #0
   15c3c:	beq	15e04 <__assert_fail@plt+0x3160>
   15c40:	mov	r1, r5
   15c44:	ldr	r0, [pc, #516]	; 15e50 <__assert_fail@plt+0x31ac>
   15c48:	bl	12a64 <gpgrt_fputs@plt>
   15c4c:	ldr	r3, [pc, #512]	; 15e54 <__assert_fail@plt+0x31b0>
   15c50:	cmp	r7, #0
   15c54:	ldr	r1, [pc, #508]	; 15e58 <__assert_fail@plt+0x31b4>
   15c58:	mov	r2, r8
   15c5c:	moveq	r1, r3
   15c60:	ldr	r0, [pc, #500]	; 15e5c <__assert_fail@plt+0x31b8>
   15c64:	bl	1241c <gpgrt_bsprintf@plt>
   15c68:	subs	r7, r0, #0
   15c6c:	beq	15e2c <__assert_fail@plt+0x3188>
   15c70:	ldr	fp, [pc, #488]	; 15e60 <__assert_fail@plt+0x31bc>
   15c74:	mov	r1, r4
   15c78:	add	r0, sp, #28
   15c7c:	bl	27b6c <__assert_fail@plt+0x14ec8>
   15c80:	add	r0, sp, #28
   15c84:	ldr	r1, [pc, #472]	; 15e64 <__assert_fail@plt+0x31c0>
   15c88:	bl	27bcc <__assert_fail@plt+0x14f28>
   15c8c:	ldr	r3, [fp]
   15c90:	cmp	r3, #0
   15c94:	beq	15da8 <__assert_fail@plt+0x3104>
   15c98:	cmp	r3, #1
   15c9c:	ble	15cac <__assert_fail@plt+0x3008>
   15ca0:	ldr	r1, [pc, #448]	; 15e68 <__assert_fail@plt+0x31c4>
   15ca4:	add	r0, sp, #28
   15ca8:	bl	27bcc <__assert_fail@plt+0x14f28>
   15cac:	ldr	r1, [pc, #440]	; 15e6c <__assert_fail@plt+0x31c8>
   15cb0:	add	r0, sp, #28
   15cb4:	bl	27bcc <__assert_fail@plt+0x14f28>
   15cb8:	ldr	r1, [pc, #432]	; 15e70 <__assert_fail@plt+0x31cc>
   15cbc:	add	r0, sp, #28
   15cc0:	bl	27bcc <__assert_fail@plt+0x14f28>
   15cc4:	ldr	r1, [pc, #424]	; 15e74 <__assert_fail@plt+0x31d0>
   15cc8:	add	r0, sp, #28
   15ccc:	bl	27bcc <__assert_fail@plt+0x14f28>
   15cd0:	ldr	r1, [pc, #416]	; 15e78 <__assert_fail@plt+0x31d4>
   15cd4:	add	r0, sp, #28
   15cd8:	bl	27bcc <__assert_fail@plt+0x14f28>
   15cdc:	ldr	r1, [pc, #408]	; 15e7c <__assert_fail@plt+0x31d8>
   15ce0:	add	r0, sp, #28
   15ce4:	bl	27bcc <__assert_fail@plt+0x14f28>
   15ce8:	ldr	r1, [pc, #400]	; 15e80 <__assert_fail@plt+0x31dc>
   15cec:	add	r0, sp, #28
   15cf0:	bl	27bcc <__assert_fail@plt+0x14f28>
   15cf4:	mov	r1, r7
   15cf8:	add	r0, sp, #28
   15cfc:	bl	27bcc <__assert_fail@plt+0x14f28>
   15d00:	ldr	r1, [pc, #380]	; 15e84 <__assert_fail@plt+0x31e0>
   15d04:	add	r0, sp, #28
   15d08:	bl	27bcc <__assert_fail@plt+0x14f28>
   15d0c:	ldr	r1, [pc, #372]	; 15e88 <__assert_fail@plt+0x31e4>
   15d10:	add	r0, sp, #28
   15d14:	bl	27bcc <__assert_fail@plt+0x14f28>
   15d18:	mov	r1, r9
   15d1c:	add	r0, sp, #28
   15d20:	bl	27bcc <__assert_fail@plt+0x14f28>
   15d24:	mov	r1, #0
   15d28:	add	r0, sp, #28
   15d2c:	bl	27bcc <__assert_fail@plt+0x14f28>
   15d30:	add	r0, sp, #28
   15d34:	mov	r1, #0
   15d38:	bl	27cac <__assert_fail@plt+0x15008>
   15d3c:	subs	r8, r0, #0
   15d40:	beq	15e38 <__assert_fail@plt+0x3194>
   15d44:	ldr	r2, [pc, #320]	; 15e8c <__assert_fail@plt+0x31e8>
   15d48:	mov	r3, #0
   15d4c:	add	r1, sp, #16
   15d50:	str	r1, [sp, #8]
   15d54:	str	r2, [sp, #4]
   15d58:	str	r5, [sp]
   15d5c:	ldr	r0, [fp, #24]
   15d60:	mov	r2, r3
   15d64:	mov	r1, r8
   15d68:	str	r9, [sp, #16]
   15d6c:	bl	2c71c <__assert_fail@plt+0x19a78>
   15d70:	subs	r4, r0, #0
   15d74:	bne	15dbc <__assert_fail@plt+0x3118>
   15d78:	ldr	r3, [sp, #24]
   15d7c:	cmp	r3, #1
   15d80:	bgt	15db8 <__assert_fail@plt+0x3114>
   15d84:	ldr	r3, [sp, #20]
   15d88:	cmp	r3, #0
   15d8c:	moveq	r4, #27
   15d90:	beq	15dbc <__assert_fail@plt+0x3118>
   15d94:	mov	r0, r5
   15d98:	bl	12bb4 <gpgrt_rewind@plt>
   15d9c:	str	r5, [sl]
   15da0:	mov	r5, r4
   15da4:	b	15dd0 <__assert_fail@plt+0x312c>
   15da8:	ldr	r1, [pc, #224]	; 15e90 <__assert_fail@plt+0x31ec>
   15dac:	add	r0, sp, #28
   15db0:	bl	27bcc <__assert_fail@plt+0x14f28>
   15db4:	b	15cac <__assert_fail@plt+0x3008>
   15db8:	mov	r4, #182	; 0xb6
   15dbc:	mov	r0, r4
   15dc0:	bl	12b3c <gpg_strerror@plt>
   15dc4:	mov	r1, r0
   15dc8:	ldr	r0, [pc, #196]	; 15e94 <__assert_fail@plt+0x31f0>
   15dcc:	bl	21cbc <__assert_fail@plt+0xf018>
   15dd0:	mov	r0, r5
   15dd4:	bl	12788 <gpgrt_fclose@plt>
   15dd8:	mov	r0, r8
   15ddc:	bl	125e4 <gcry_free@plt>
   15de0:	mov	r0, r7
   15de4:	bl	125e4 <gcry_free@plt>
   15de8:	ldr	r2, [sp, #44]	; 0x2c
   15dec:	ldr	r3, [r6]
   15df0:	mov	r0, r4
   15df4:	cmp	r2, r3
   15df8:	bne	15e44 <__assert_fail@plt+0x31a0>
   15dfc:	add	sp, sp, #52	; 0x34
   15e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e04:	bl	12914 <gpg_err_code_from_syserror@plt>
   15e08:	mov	r7, r5
   15e0c:	mov	r8, r5
   15e10:	uxth	r4, r0
   15e14:	mov	r0, r4
   15e18:	bl	12b3c <gpg_strerror@plt>
   15e1c:	mov	r1, r0
   15e20:	ldr	r0, [pc, #112]	; 15e98 <__assert_fail@plt+0x31f4>
   15e24:	bl	21cbc <__assert_fail@plt+0xf018>
   15e28:	b	15dd0 <__assert_fail@plt+0x312c>
   15e2c:	bl	12914 <gpg_err_code_from_syserror@plt>
   15e30:	mov	r8, r7
   15e34:	b	15e10 <__assert_fail@plt+0x316c>
   15e38:	bl	12914 <gpg_err_code_from_syserror@plt>
   15e3c:	uxth	r4, r0
   15e40:	b	15dd0 <__assert_fail@plt+0x312c>
   15e44:	bl	1262c <__stack_chk_fail@plt>
   15e48:	strdeq	r5, [r4], -r8
   15e4c:	strdeq	r0, [r3], -r4
   15e50:	andeq	r1, r3, r4, asr #15
   15e54:			; <UNDEFINED> instruction: 0x000317bc
   15e58:			; <UNDEFINED> instruction: 0x000317b8
   15e5c:	andeq	r1, r3, ip, ror #15
   15e60:	andeq	r6, r4, ip, ror #8
   15e64:	andeq	r0, r3, ip, lsl r4
   15e68:	andeq	r0, r3, r4, lsr r4
   15e6c:	andeq	r0, r3, r0, asr #8
   15e70:	andeq	r0, r3, r8, asr #8
   15e74:	andeq	r0, r3, r8, asr r4
   15e78:	andeq	r0, r3, r8, ror r4
   15e7c:	strdeq	r1, [r3], -ip
   15e80:	andeq	r1, r3, ip, lsl r8
   15e84:	andeq	r1, r3, ip, lsr #16
   15e88:	andeq	r0, r3, r4, ror ip
   15e8c:	andeq	r5, r1, r0, lsr #19
   15e90:	andeq	r0, r3, ip, lsr #8
   15e94:	andeq	r1, r3, r8, lsr r8
   15e98:	strdeq	r0, [r3], -r8
   15e9c:	ldr	r3, [pc, #1164]	; 16330 <__assert_fail@plt+0x368c>
   15ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ea4:	sub	sp, sp, #76	; 0x4c
   15ea8:	subs	ip, r1, #0
   15eac:	str	r2, [sp, #32]
   15eb0:	ldr	r1, [r3]
   15eb4:	mov	r3, #0
   15eb8:	strne	r3, [ip]
   15ebc:	str	r3, [sp, #40]	; 0x28
   15ec0:	str	r3, [sp, #44]	; 0x2c
   15ec4:	ldr	r3, [sp, #32]
   15ec8:	mov	r5, #0
   15ecc:	str	r1, [sp, #68]	; 0x44
   15ed0:	mov	r7, r0
   15ed4:	str	r5, [r3]
   15ed8:	mov	r0, r5
   15edc:	ldr	r1, [pc, #1104]	; 16334 <__assert_fail@plt+0x3690>
   15ee0:	str	ip, [sp, #36]	; 0x24
   15ee4:	bl	12920 <gpgrt_fopenmem@plt>
   15ee8:	subs	r6, r0, #0
   15eec:	beq	1625c <__assert_fail@plt+0x35b8>
   15ef0:	ldr	r4, [pc, #1088]	; 16338 <__assert_fail@plt+0x3694>
   15ef4:	mov	r1, r5
   15ef8:	add	r0, sp, #52	; 0x34
   15efc:	bl	27b6c <__assert_fail@plt+0x14ec8>
   15f00:	add	r0, sp, #52	; 0x34
   15f04:	ldr	r1, [pc, #1072]	; 1633c <__assert_fail@plt+0x3698>
   15f08:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f0c:	ldr	r3, [r4]
   15f10:	cmp	r3, #0
   15f14:	beq	1624c <__assert_fail@plt+0x35a8>
   15f18:	cmp	r3, #1
   15f1c:	bgt	16184 <__assert_fail@plt+0x34e0>
   15f20:	ldr	r1, [pc, #1048]	; 16340 <__assert_fail@plt+0x369c>
   15f24:	add	r0, sp, #52	; 0x34
   15f28:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f2c:	ldr	r1, [pc, #1040]	; 16344 <__assert_fail@plt+0x36a0>
   15f30:	add	r0, sp, #52	; 0x34
   15f34:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f38:	ldr	r1, [pc, #1032]	; 16348 <__assert_fail@plt+0x36a4>
   15f3c:	add	r0, sp, #52	; 0x34
   15f40:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f44:	ldr	r1, [pc, #1024]	; 1634c <__assert_fail@plt+0x36a8>
   15f48:	add	r0, sp, #52	; 0x34
   15f4c:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f50:	ldr	r1, [pc, #1016]	; 16350 <__assert_fail@plt+0x36ac>
   15f54:	add	r0, sp, #52	; 0x34
   15f58:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f5c:	ldr	r1, [pc, #1008]	; 16354 <__assert_fail@plt+0x36b0>
   15f60:	add	r0, sp, #52	; 0x34
   15f64:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f68:	ldr	r1, [pc, #1000]	; 16358 <__assert_fail@plt+0x36b4>
   15f6c:	add	r0, sp, #52	; 0x34
   15f70:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f74:	mov	r1, #0
   15f78:	add	r0, sp, #52	; 0x34
   15f7c:	bl	27bcc <__assert_fail@plt+0x14f28>
   15f80:	add	r0, sp, #52	; 0x34
   15f84:	mov	r1, #0
   15f88:	bl	27cac <__assert_fail@plt+0x15008>
   15f8c:	subs	r3, r0, #0
   15f90:	str	r3, [sp, #24]
   15f94:	beq	1627c <__assert_fail@plt+0x35d8>
   15f98:	ldr	r3, [pc, #956]	; 1635c <__assert_fail@plt+0x36b8>
   15f9c:	mov	r5, #0
   15fa0:	str	r6, [sp]
   15fa4:	mov	r2, r7
   15fa8:	ldr	r0, [r4, #24]
   15fac:	ldr	r1, [sp, #24]
   15fb0:	stmib	sp, {r3, r5}
   15fb4:	mov	r3, r5
   15fb8:	bl	2c71c <__assert_fail@plt+0x19a78>
   15fbc:	subs	r7, r0, #0
   15fc0:	bne	16118 <__assert_fail@plt+0x3474>
   15fc4:	ldr	r9, [pc, #916]	; 16360 <__assert_fail@plt+0x36bc>
   15fc8:	mov	r0, r6
   15fcc:	mov	r8, r7
   15fd0:	mov	r5, r7
   15fd4:	mov	r4, r7
   15fd8:	bl	12bb4 <gpgrt_rewind@plt>
   15fdc:	mov	r3, #2048	; 0x800
   15fe0:	str	r3, [sp, #48]	; 0x30
   15fe4:	str	r7, [sp, #28]
   15fe8:	add	r3, sp, #48	; 0x30
   15fec:	add	r2, sp, #44	; 0x2c
   15ff0:	add	r1, sp, #40	; 0x28
   15ff4:	mov	r0, r6
   15ff8:	bl	1247c <gpgrt_read_line@plt>
   15ffc:	cmp	r0, #0
   16000:	ble	16298 <__assert_fail@plt+0x35f4>
   16004:	ldr	r3, [sp, #48]	; 0x30
   16008:	add	r5, r5, #1
   1600c:	cmp	r3, #0
   16010:	beq	162f4 <__assert_fail@plt+0x3650>
   16014:	sub	r0, r0, #1
   16018:	mov	r1, #0
   1601c:	ldr	r2, [sp, #40]	; 0x28
   16020:	ldrb	r3, [r2, r0]
   16024:	cmp	r3, #13
   16028:	cmpne	r3, #10
   1602c:	bne	1603c <__assert_fail@plt+0x3398>
   16030:	strb	r1, [r2, r0]
   16034:	subs	r0, r0, #1
   16038:	bcs	1601c <__assert_fail@plt+0x3378>
   1603c:	mov	r0, r4
   16040:	bl	125e4 <gcry_free@plt>
   16044:	mov	r1, r9
   16048:	ldr	r0, [sp, #40]	; 0x28
   1604c:	bl	1cf8c <__assert_fail@plt+0xa2e8>
   16050:	subs	r4, r0, #0
   16054:	beq	16304 <__assert_fail@plt+0x3660>
   16058:	ldr	fp, [r4]
   1605c:	cmp	fp, #0
   16060:	beq	16244 <__assert_fail@plt+0x35a0>
   16064:	mov	r3, r4
   16068:	mov	sl, #0
   1606c:	ldr	r2, [r3, #4]!
   16070:	add	sl, sl, #1
   16074:	cmp	r2, #0
   16078:	bne	1606c <__assert_fail@plt+0x33c8>
   1607c:	ldr	r1, [pc, #736]	; 16364 <__assert_fail@plt+0x36c0>
   16080:	mov	r0, fp
   16084:	bl	124b8 <strcmp@plt>
   16088:	cmp	r0, #0
   1608c:	beq	162ec <__assert_fail@plt+0x3648>
   16090:	ldr	r1, [pc, #720]	; 16368 <__assert_fail@plt+0x36c4>
   16094:	mov	r0, fp
   16098:	bl	124b8 <strcmp@plt>
   1609c:	cmp	r5, #1
   160a0:	beq	1623c <__assert_fail@plt+0x3598>
   160a4:	cmp	r0, #0
   160a8:	beq	16324 <__assert_fail@plt+0x3680>
   160ac:	ldr	r1, [pc, #696]	; 1636c <__assert_fail@plt+0x36c8>
   160b0:	mov	r0, fp
   160b4:	bl	124b8 <strcmp@plt>
   160b8:	cmp	r0, #0
   160bc:	beq	1629c <__assert_fail@plt+0x35f8>
   160c0:	ldr	r1, [pc, #680]	; 16370 <__assert_fail@plt+0x36cc>
   160c4:	mov	r0, fp
   160c8:	bl	124b8 <strcmp@plt>
   160cc:	cmp	r0, #0
   160d0:	beq	1629c <__assert_fail@plt+0x35f8>
   160d4:	ldr	r1, [pc, #664]	; 16374 <__assert_fail@plt+0x36d0>
   160d8:	mov	r0, fp
   160dc:	bl	124b8 <strcmp@plt>
   160e0:	cmp	sl, #9
   160e4:	movle	r3, #0
   160e8:	movgt	r3, #1
   160ec:	orrs	r2, r8, r0
   160f0:	bne	16194 <__assert_fail@plt+0x34f0>
   160f4:	cmp	sl, #9
   160f8:	ble	15fe8 <__assert_fail@plt+0x3344>
   160fc:	ldr	r0, [r4, #36]	; 0x24
   16100:	bl	12c68 <gcry_strdup@plt>
   16104:	subs	r8, r0, #0
   16108:	bne	15fe8 <__assert_fail@plt+0x3344>
   1610c:	bl	12914 <gpg_err_code_from_syserror@plt>
   16110:	uxth	r7, r0
   16114:	b	16134 <__assert_fail@plt+0x3490>
   16118:	bl	12b3c <gpg_strerror@plt>
   1611c:	str	r5, [sp, #28]
   16120:	mov	r4, r5
   16124:	mov	r8, r5
   16128:	mov	r1, r0
   1612c:	ldr	r0, [pc, #580]	; 16378 <__assert_fail@plt+0x36d4>
   16130:	bl	21cbc <__assert_fail@plt+0xf018>
   16134:	mov	r0, r8
   16138:	bl	125e4 <gcry_free@plt>
   1613c:	ldr	r0, [sp, #28]
   16140:	bl	15bc8 <__assert_fail@plt+0x2f24>
   16144:	mov	r0, r4
   16148:	bl	125e4 <gcry_free@plt>
   1614c:	ldr	r0, [sp, #40]	; 0x28
   16150:	bl	12b00 <gpgrt_free@plt>
   16154:	ldr	r0, [sp, #24]
   16158:	bl	125e4 <gcry_free@plt>
   1615c:	mov	r0, r6
   16160:	bl	12788 <gpgrt_fclose@plt>
   16164:	ldr	r3, [pc, #452]	; 16330 <__assert_fail@plt+0x368c>
   16168:	ldr	r2, [sp, #68]	; 0x44
   1616c:	mov	r0, r7
   16170:	ldr	r3, [r3]
   16174:	cmp	r2, r3
   16178:	bne	1632c <__assert_fail@plt+0x3688>
   1617c:	add	sp, sp, #76	; 0x4c
   16180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16184:	ldr	r1, [pc, #496]	; 1637c <__assert_fail@plt+0x36d8>
   16188:	add	r0, sp, #52	; 0x34
   1618c:	bl	27bcc <__assert_fail@plt+0x14f28>
   16190:	b	15f20 <__assert_fail@plt+0x327c>
   16194:	mov	r0, fp
   16198:	ldr	r1, [pc, #480]	; 16380 <__assert_fail@plt+0x36dc>
   1619c:	str	r3, [sp, #20]
   161a0:	bl	124b8 <strcmp@plt>
   161a4:	ldr	r3, [sp, #20]
   161a8:	cmp	r0, #0
   161ac:	moveq	r0, r3
   161b0:	movne	r0, #0
   161b4:	cmp	r0, #0
   161b8:	beq	15fe8 <__assert_fail@plt+0x3344>
   161bc:	mov	r1, #0
   161c0:	ldr	r0, [r4, #20]
   161c4:	ldr	sl, [r4, #36]	; 0x24
   161c8:	bl	24ad0 <__assert_fail@plt+0x11e2c>
   161cc:	str	r0, [sp, #20]
   161d0:	mov	r0, sl
   161d4:	bl	128d8 <strlen@plt>
   161d8:	add	r0, r0, #16
   161dc:	bl	12458 <gcry_malloc@plt>
   161e0:	subs	fp, r0, #0
   161e4:	beq	1610c <__assert_fail@plt+0x3468>
   161e8:	mov	r1, sl
   161ec:	add	r0, fp, #12
   161f0:	bl	12764 <strcpy@plt>
   161f4:	ldr	r3, [sp, #20]
   161f8:	mov	r0, sl
   161fc:	str	r3, [fp, #4]
   16200:	bl	26b70 <__assert_fail@plt+0x13ecc>
   16204:	ldr	r1, [sp, #28]
   16208:	mov	r3, #0
   1620c:	cmp	r1, #0
   16210:	str	r3, [fp]
   16214:	streq	fp, [sp, #28]
   16218:	str	r0, [fp, #8]
   1621c:	bne	16228 <__assert_fail@plt+0x3584>
   16220:	b	15fe8 <__assert_fail@plt+0x3344>
   16224:	mov	r1, r3
   16228:	ldr	r3, [r1]
   1622c:	cmp	r3, #0
   16230:	bne	16224 <__assert_fail@plt+0x3580>
   16234:	str	fp, [r1]
   16238:	b	15fe8 <__assert_fail@plt+0x3344>
   1623c:	cmp	r0, #0
   16240:	beq	160ac <__assert_fail@plt+0x3408>
   16244:	mov	r7, #150	; 0x96
   16248:	b	16134 <__assert_fail@plt+0x3490>
   1624c:	ldr	r1, [pc, #304]	; 16384 <__assert_fail@plt+0x36e0>
   16250:	add	r0, sp, #52	; 0x34
   16254:	bl	27bcc <__assert_fail@plt+0x14f28>
   16258:	b	15f20 <__assert_fail@plt+0x327c>
   1625c:	bl	12914 <gpg_err_code_from_syserror@plt>
   16260:	uxth	r7, r0
   16264:	mov	r0, r7
   16268:	bl	12b3c <gpg_strerror@plt>
   1626c:	mov	r1, r0
   16270:	ldr	r0, [pc, #272]	; 16388 <__assert_fail@plt+0x36e4>
   16274:	bl	21cbc <__assert_fail@plt+0xf018>
   16278:	b	16164 <__assert_fail@plt+0x34c0>
   1627c:	bl	12914 <gpg_err_code_from_syserror@plt>
   16280:	ldr	r3, [sp, #24]
   16284:	str	r3, [sp, #28]
   16288:	mov	r8, r3
   1628c:	mov	r4, r3
   16290:	uxth	r7, r0
   16294:	b	16134 <__assert_fail@plt+0x3490>
   16298:	bne	162d8 <__assert_fail@plt+0x3634>
   1629c:	mov	r0, r6
   162a0:	bl	1265c <gpgrt_ferror@plt>
   162a4:	cmp	r0, #0
   162a8:	bne	162d8 <__assert_fail@plt+0x3634>
   162ac:	cmp	r8, #0
   162b0:	beq	162ec <__assert_fail@plt+0x3648>
   162b4:	ldr	r3, [sp, #36]	; 0x24
   162b8:	cmp	r3, #0
   162bc:	strne	r8, [r3]
   162c0:	ldrd	r2, [sp, #28]
   162c4:	movne	r8, r0
   162c8:	str	r2, [r3]
   162cc:	mov	r3, #0
   162d0:	str	r3, [sp, #28]
   162d4:	b	16134 <__assert_fail@plt+0x3490>
   162d8:	bl	12914 <gpg_err_code_from_syserror@plt>
   162dc:	uxth	r7, r0
   162e0:	ldr	r0, [pc, #164]	; 1638c <__assert_fail@plt+0x36e8>
   162e4:	bl	21cbc <__assert_fail@plt+0xf018>
   162e8:	b	16134 <__assert_fail@plt+0x3490>
   162ec:	mov	r7, #9
   162f0:	b	16134 <__assert_fail@plt+0x3490>
   162f4:	ldr	r0, [pc, #148]	; 16390 <__assert_fail@plt+0x36ec>
   162f8:	bl	21cbc <__assert_fail@plt+0xf018>
   162fc:	mov	r7, #97	; 0x61
   16300:	b	16134 <__assert_fail@plt+0x3490>
   16304:	bl	12914 <gpg_err_code_from_syserror@plt>
   16308:	uxth	r7, r0
   1630c:	mov	r0, r7
   16310:	bl	12b3c <gpg_strerror@plt>
   16314:	mov	r1, r0
   16318:	ldr	r0, [pc, #116]	; 16394 <__assert_fail@plt+0x36f0>
   1631c:	bl	21cbc <__assert_fail@plt+0xf018>
   16320:	b	16134 <__assert_fail@plt+0x3490>
   16324:	mov	r7, #182	; 0xb6
   16328:	b	16134 <__assert_fail@plt+0x3490>
   1632c:	bl	1262c <__stack_chk_fail@plt>
   16330:	strdeq	r5, [r4], -r8
   16334:	strdeq	r0, [r3], -r4
   16338:	andeq	r6, r4, ip, ror #8
   1633c:	andeq	r0, r3, ip, lsl r4
   16340:	andeq	r0, r3, r0, asr #8
   16344:	andeq	r0, r3, r8, asr #8
   16348:	andeq	r0, r3, r8, asr r4
   1634c:	andeq	r1, r3, ip, asr #16
   16350:	andeq	r1, r3, ip, asr r8
   16354:	andeq	r1, r3, r8, ror #16
   16358:	andeq	r0, r3, r8, lsr #29
   1635c:	andeq	r5, r1, r8, lsl r8
   16360:	andeq	r2, r3, r4, lsr #32
   16364:	ldrdeq	r1, [r3], -r8
   16368:	ldrdeq	r1, [r3], -ip
   1636c:	andeq	r1, r3, r0, ror #17
   16370:	andeq	r1, r3, r4, ror #17
   16374:	andeq	r1, r3, r8, ror #17
   16378:	muleq	r3, r4, r8
   1637c:	andeq	r0, r3, r4, lsr r4
   16380:			; <UNDEFINED> instruction: 0x000317b8
   16384:	andeq	r0, r3, ip, lsr #8
   16388:	strdeq	r0, [r3], -r8
   1638c:	andeq	r1, r3, ip, ror #17
   16390:	andeq	r1, r3, r8, lsr #17
   16394:	andeq	r1, r3, r0, asr #17
   16398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1639c:	mov	r9, r0
   163a0:	ldr	r5, [pc, #516]	; 165ac <__assert_fail@plt+0x3908>
   163a4:	sub	sp, sp, #44	; 0x2c
   163a8:	mov	r0, #0
   163ac:	ldr	ip, [r5]
   163b0:	mov	sl, r1
   163b4:	str	r0, [r9]
   163b8:	ldr	r1, [pc, #496]	; 165b0 <__assert_fail@plt+0x390c>
   163bc:	mov	r6, r2
   163c0:	mov	r7, r3
   163c4:	str	ip, [sp, #36]	; 0x24
   163c8:	bl	12920 <gpgrt_fopenmem@plt>
   163cc:	subs	r4, r0, #0
   163d0:	beq	16588 <__assert_fail@plt+0x38e4>
   163d4:	cmp	r7, #0
   163d8:	beq	16524 <__assert_fail@plt+0x3880>
   163dc:	mov	r1, r6
   163e0:	ldr	r0, [pc, #460]	; 165b4 <__assert_fail@plt+0x3910>
   163e4:	bl	1241c <gpgrt_bsprintf@plt>
   163e8:	subs	r6, r0, #0
   163ec:	beq	16558 <__assert_fail@plt+0x38b4>
   163f0:	ldr	fp, [pc, #448]	; 165b8 <__assert_fail@plt+0x3914>
   163f4:	add	r0, sp, #20
   163f8:	mov	r1, #0
   163fc:	bl	27b6c <__assert_fail@plt+0x14ec8>
   16400:	add	r0, sp, #20
   16404:	ldr	r1, [pc, #432]	; 165bc <__assert_fail@plt+0x3918>
   16408:	bl	27bcc <__assert_fail@plt+0x14f28>
   1640c:	ldr	r3, [fp]
   16410:	cmp	r3, #0
   16414:	beq	16514 <__assert_fail@plt+0x3870>
   16418:	cmp	r3, #1
   1641c:	ble	1642c <__assert_fail@plt+0x3788>
   16420:	ldr	r1, [pc, #408]	; 165c0 <__assert_fail@plt+0x391c>
   16424:	add	r0, sp, #20
   16428:	bl	27bcc <__assert_fail@plt+0x14f28>
   1642c:	ldr	r1, [pc, #400]	; 165c4 <__assert_fail@plt+0x3920>
   16430:	add	r0, sp, #20
   16434:	bl	27bcc <__assert_fail@plt+0x14f28>
   16438:	ldr	r1, [pc, #392]	; 165c8 <__assert_fail@plt+0x3924>
   1643c:	add	r0, sp, #20
   16440:	bl	27bcc <__assert_fail@plt+0x14f28>
   16444:	ldr	r1, [pc, #384]	; 165cc <__assert_fail@plt+0x3928>
   16448:	add	r0, sp, #20
   1644c:	bl	27bcc <__assert_fail@plt+0x14f28>
   16450:	cmp	r7, #0
   16454:	beq	16534 <__assert_fail@plt+0x3890>
   16458:	ldr	r1, [pc, #368]	; 165d0 <__assert_fail@plt+0x392c>
   1645c:	add	r0, sp, #20
   16460:	bl	27bcc <__assert_fail@plt+0x14f28>
   16464:	ldr	r1, [pc, #360]	; 165d4 <__assert_fail@plt+0x3930>
   16468:	add	r0, sp, #20
   1646c:	bl	27bcc <__assert_fail@plt+0x14f28>
   16470:	mov	r1, r6
   16474:	add	r0, sp, #20
   16478:	bl	27bcc <__assert_fail@plt+0x14f28>
   1647c:	ldr	r1, [pc, #340]	; 165d8 <__assert_fail@plt+0x3934>
   16480:	add	r0, sp, #20
   16484:	bl	27bcc <__assert_fail@plt+0x14f28>
   16488:	mov	r1, #0
   1648c:	add	r0, sp, #20
   16490:	bl	27bcc <__assert_fail@plt+0x14f28>
   16494:	add	r0, sp, #20
   16498:	mov	r1, #0
   1649c:	bl	27cac <__assert_fail@plt+0x15008>
   164a0:	subs	r8, r0, #0
   164a4:	beq	1657c <__assert_fail@plt+0x38d8>
   164a8:	ldr	r1, [pc, #300]	; 165dc <__assert_fail@plt+0x3938>
   164ac:	mov	r3, #0
   164b0:	str	r4, [sp]
   164b4:	stmib	sp, {r1, r3}
   164b8:	mov	r2, sl
   164bc:	ldr	r0, [fp, #24]
   164c0:	mov	r1, r8
   164c4:	bl	2c71c <__assert_fail@plt+0x19a78>
   164c8:	subs	r7, r0, #0
   164cc:	bne	16544 <__assert_fail@plt+0x38a0>
   164d0:	mov	r0, r4
   164d4:	bl	12bb4 <gpgrt_rewind@plt>
   164d8:	str	r4, [r9]
   164dc:	mov	r4, r7
   164e0:	mov	r0, r6
   164e4:	bl	125e4 <gcry_free@plt>
   164e8:	mov	r0, r8
   164ec:	bl	125e4 <gcry_free@plt>
   164f0:	mov	r0, r4
   164f4:	bl	12788 <gpgrt_fclose@plt>
   164f8:	ldr	r2, [sp, #36]	; 0x24
   164fc:	ldr	r3, [r5]
   16500:	mov	r0, r7
   16504:	cmp	r2, r3
   16508:	bne	165a8 <__assert_fail@plt+0x3904>
   1650c:	add	sp, sp, #44	; 0x2c
   16510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16514:	ldr	r1, [pc, #196]	; 165e0 <__assert_fail@plt+0x393c>
   16518:	add	r0, sp, #20
   1651c:	bl	27bcc <__assert_fail@plt+0x14f28>
   16520:	b	1642c <__assert_fail@plt+0x3788>
   16524:	mov	r1, r4
   16528:	ldr	r0, [pc, #180]	; 165e4 <__assert_fail@plt+0x3940>
   1652c:	bl	12a64 <gpgrt_fputs@plt>
   16530:	b	163dc <__assert_fail@plt+0x3738>
   16534:	ldr	r1, [pc, #172]	; 165e8 <__assert_fail@plt+0x3944>
   16538:	add	r0, sp, #20
   1653c:	bl	27bcc <__assert_fail@plt+0x14f28>
   16540:	b	16458 <__assert_fail@plt+0x37b4>
   16544:	bl	12b3c <gpg_strerror@plt>
   16548:	mov	r1, r0
   1654c:	ldr	r0, [pc, #152]	; 165ec <__assert_fail@plt+0x3948>
   16550:	bl	21cbc <__assert_fail@plt+0xf018>
   16554:	b	164e0 <__assert_fail@plt+0x383c>
   16558:	bl	12914 <gpg_err_code_from_syserror@plt>
   1655c:	mov	r8, r6
   16560:	uxth	r7, r0
   16564:	mov	r0, r7
   16568:	bl	12b3c <gpg_strerror@plt>
   1656c:	mov	r1, r0
   16570:	ldr	r0, [pc, #120]	; 165f0 <__assert_fail@plt+0x394c>
   16574:	bl	21cbc <__assert_fail@plt+0xf018>
   16578:	b	164e0 <__assert_fail@plt+0x383c>
   1657c:	bl	12914 <gpg_err_code_from_syserror@plt>
   16580:	uxth	r7, r0
   16584:	b	164e0 <__assert_fail@plt+0x383c>
   16588:	bl	12914 <gpg_err_code_from_syserror@plt>
   1658c:	uxth	r7, r0
   16590:	mov	r0, r7
   16594:	bl	12b3c <gpg_strerror@plt>
   16598:	mov	r1, r0
   1659c:	ldr	r0, [pc, #76]	; 165f0 <__assert_fail@plt+0x394c>
   165a0:	bl	21cbc <__assert_fail@plt+0xf018>
   165a4:	b	164f8 <__assert_fail@plt+0x3854>
   165a8:	bl	1262c <__stack_chk_fail@plt>
   165ac:	strdeq	r5, [r4], -r8
   165b0:	strdeq	r0, [r3], -r4
   165b4:	andeq	r1, r3, ip, lsl #18
   165b8:	andeq	r6, r4, ip, ror #8
   165bc:	andeq	r0, r3, ip, lsl r4
   165c0:	andeq	r0, r3, r4, lsr r4
   165c4:	andeq	r0, r3, r0, asr #8
   165c8:	andeq	r0, r3, r8, asr #8
   165cc:	andeq	r0, r3, r8, asr r4
   165d0:	andeq	r0, r3, r8, lsl #29
   165d4:	andeq	r0, r3, r4, asr #30
   165d8:	andeq	r0, r3, r8, lsr #29
   165dc:	andeq	r5, r1, r8, lsl r8
   165e0:	andeq	r0, r3, ip, lsr #8
   165e4:	andeq	r1, r3, r4, asr #15
   165e8:	andeq	r0, r3, r8, ror r4
   165ec:	andeq	r1, r3, r0, lsr #18
   165f0:	strdeq	r0, [r3], -r8
   165f4:	push	{r4, r5, r6, lr}
   165f8:	mov	r6, r0
   165fc:	ldr	r4, [pc, #204]	; 166d0 <__assert_fail@plt+0x3a2c>
   16600:	ldr	r3, [r4, #12]
   16604:	cmp	r3, #0
   16608:	bne	16618 <__assert_fail@plt+0x3974>
   1660c:	ldr	r3, [r4, #20]
   16610:	cmp	r3, #0
   16614:	beq	166ac <__assert_fail@plt+0x3a08>
   16618:	ldr	r1, [pc, #180]	; 166d4 <__assert_fail@plt+0x3a30>
   1661c:	mov	r0, #0
   16620:	bl	12920 <gpgrt_fopenmem@plt>
   16624:	subs	r5, r0, #0
   16628:	beq	1669c <__assert_fail@plt+0x39f8>
   1662c:	mov	r0, r6
   16630:	mov	r1, r5
   16634:	bl	1b54c <__assert_fail@plt+0x88a8>
   16638:	subs	r6, r0, #0
   1663c:	bne	16674 <__assert_fail@plt+0x39d0>
   16640:	ldr	r3, [r4, #20]
   16644:	cmp	r3, #0
   16648:	beq	16668 <__assert_fail@plt+0x39c4>
   1664c:	mov	r0, r5
   16650:	bl	12bb4 <gpgrt_rewind@plt>
   16654:	ldr	r1, [r4, #20]
   16658:	mov	r0, r5
   1665c:	bl	1b6f0 <__assert_fail@plt+0x8a4c>
   16660:	cmp	r0, #0
   16664:	bne	16694 <__assert_fail@plt+0x39f0>
   16668:	ldr	r3, [r4, #12]
   1666c:	cmp	r3, #0
   16670:	bne	16684 <__assert_fail@plt+0x39e0>
   16674:	mov	r0, r5
   16678:	bl	12788 <gpgrt_fclose@plt>
   1667c:	mov	r0, r6
   16680:	pop	{r4, r5, r6, pc}
   16684:	mov	r0, r5
   16688:	bl	12bb4 <gpgrt_rewind@plt>
   1668c:	mov	r0, r5
   16690:	bl	1b634 <__assert_fail@plt+0x8990>
   16694:	mov	r6, r0
   16698:	b	16674 <__assert_fail@plt+0x39d0>
   1669c:	bl	12914 <gpg_err_code_from_syserror@plt>
   166a0:	uxth	r6, r0
   166a4:	mov	r0, r6
   166a8:	pop	{r4, r5, r6, pc}
   166ac:	mov	r0, #1
   166b0:	bl	12890 <_gpgrt_get_std_stream@plt>
   166b4:	bl	124dc <gpgrt_set_binary@plt>
   166b8:	mov	r0, #1
   166bc:	bl	12890 <_gpgrt_get_std_stream@plt>
   166c0:	mov	r1, r0
   166c4:	mov	r0, r6
   166c8:	pop	{r4, r5, r6, lr}
   166cc:	b	1b54c <__assert_fail@plt+0x88a8>
   166d0:	andeq	r6, r4, ip, ror #8
   166d4:	strdeq	r0, [r3], -r4
   166d8:	ldr	r3, [pc, #704]	; 169a0 <__assert_fail@plt+0x3cfc>
   166dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166e0:	sub	sp, sp, #1040	; 0x410
   166e4:	ldr	r8, [pc, #696]	; 169a4 <__assert_fail@plt+0x3d00>
   166e8:	ldr	r5, [pc, #696]	; 169a8 <__assert_fail@plt+0x3d04>
   166ec:	sub	sp, sp, #4
   166f0:	ldr	r3, [r3]
   166f4:	mov	r6, r0
   166f8:	mov	r7, r1
   166fc:	mov	r4, #0
   16700:	str	r2, [sp, #4]
   16704:	str	r3, [sp, #1036]	; 0x40c
   16708:	str	r4, [r0]
   1670c:	str	r4, [r0, #4]
   16710:	str	r4, [r0, #8]
   16714:	str	r4, [r0, #12]
   16718:	mov	r2, r7
   1671c:	ldr	r1, [pc, #648]	; 169ac <__assert_fail@plt+0x3d08>
   16720:	add	r0, sp, #12
   16724:	bl	1292c <gpgrt_fgets@plt>
   16728:	cmp	r0, #0
   1672c:	beq	168a4 <__assert_fail@plt+0x3c00>
   16730:	add	r0, sp, #12
   16734:	bl	128d8 <strlen@plt>
   16738:	add	r4, r4, #1
   1673c:	cmp	r0, #0
   16740:	beq	16978 <__assert_fail@plt+0x3cd4>
   16744:	add	r3, sp, #1040	; 0x410
   16748:	add	r0, r3, r0
   1674c:	ldrb	r3, [r0, #-1029]	; 0xfffffbfb
   16750:	cmp	r3, #10
   16754:	bne	16978 <__assert_fail@plt+0x3cd4>
   16758:	add	r0, sp, #12
   1675c:	bl	1c5ec <__assert_fail@plt+0x9948>
   16760:	ldrb	r3, [sp, #12]
   16764:	add	fp, sp, #12
   16768:	cmp	r3, #9
   1676c:	cmpne	r3, #32
   16770:	bne	16784 <__assert_fail@plt+0x3ae0>
   16774:	ldrb	r3, [fp, #1]!
   16778:	cmp	r3, #9
   1677c:	cmpne	r3, #32
   16780:	beq	16774 <__assert_fail@plt+0x3ad0>
   16784:	cmp	r3, #0
   16788:	sub	r2, r3, #35	; 0x23
   1678c:	clz	r2, r2
   16790:	lsr	r2, r2, #5
   16794:	movne	sl, r2
   16798:	moveq	sl, #1
   1679c:	cmp	sl, #0
   167a0:	bne	16718 <__assert_fail@plt+0x3a74>
   167a4:	cmp	r3, #58	; 0x3a
   167a8:	beq	1698c <__assert_fail@plt+0x3ce8>
   167ac:	mov	r1, #58	; 0x3a
   167b0:	mov	r0, fp
   167b4:	bl	128fc <strchr@plt>
   167b8:	cmp	r0, #0
   167bc:	mov	r9, r0
   167c0:	beq	167f0 <__assert_fail@plt+0x3b4c>
   167c4:	strb	sl, [r9], #1
   167c8:	ldrb	r2, [r0, #1]
   167cc:	cmp	r2, #32
   167d0:	cmpne	r2, #9
   167d4:	bne	167e8 <__assert_fail@plt+0x3b44>
   167d8:	ldrb	r2, [r9, #1]!
   167dc:	cmp	r2, #9
   167e0:	cmpne	r2, #32
   167e4:	beq	167d8 <__assert_fail@plt+0x3b34>
   167e8:	cmp	r2, #0
   167ec:	beq	16994 <__assert_fail@plt+0x3cf0>
   167f0:	mov	r0, r8
   167f4:	mov	sl, #0
   167f8:	b	16800 <__assert_fail@plt+0x3b5c>
   167fc:	ldr	r0, [r5, sl, lsl #3]
   16800:	mov	r1, fp
   16804:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   16808:	cmp	r0, #0
   1680c:	beq	16878 <__assert_fail@plt+0x3bd4>
   16810:	add	sl, sl, #1
   16814:	cmp	sl, #6
   16818:	bne	167fc <__assert_fail@plt+0x3b58>
   1681c:	ldr	r3, [sp, #4]
   16820:	cmp	r3, #0
   16824:	bne	16718 <__assert_fail@plt+0x3a74>
   16828:	mov	r5, #88	; 0x58
   1682c:	mov	r0, r7
   16830:	bl	12584 <gpgrt_fname_get@plt>
   16834:	mov	r6, r0
   16838:	mov	r0, r5
   1683c:	bl	12b3c <gpg_strerror@plt>
   16840:	mov	r2, r4
   16844:	mov	r1, r6
   16848:	mov	r3, r0
   1684c:	ldr	r0, [pc, #348]	; 169b0 <__assert_fail@plt+0x3d0c>
   16850:	bl	21cbc <__assert_fail@plt+0xf018>
   16854:	ldr	r3, [pc, #324]	; 169a0 <__assert_fail@plt+0x3cfc>
   16858:	ldr	r2, [sp, #1036]	; 0x40c
   1685c:	mov	r0, r5
   16860:	ldr	r3, [r3]
   16864:	cmp	r2, r3
   16868:	bne	1699c <__assert_fail@plt+0x3cf8>
   1686c:	add	sp, sp, #1040	; 0x410
   16870:	add	sp, sp, #4
   16874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16878:	add	r2, r5, sl, lsl #3
   1687c:	ldr	r2, [r2, #4]
   16880:	cmp	r2, #5
   16884:	ldrls	pc, [pc, r2, lsl #2]
   16888:	b	16718 <__assert_fail@plt+0x3a74>
   1688c:	ldrdeq	r6, [r1], -ip
   16890:	andeq	r6, r1, r8, lsr #18
   16894:	andeq	r6, r1, r8, lsr r9
   16898:	andeq	r6, r1, r8, asr #18
   1689c:	andeq	r6, r1, r8, asr r9
   168a0:			; <UNDEFINED> instruction: 0x000168bc
   168a4:	mov	r0, r7
   168a8:	bl	12710 <gpgrt_feof@plt>
   168ac:	cmp	r0, #0
   168b0:	beq	1690c <__assert_fail@plt+0x3c68>
   168b4:	mov	r5, #0
   168b8:	b	16854 <__assert_fail@plt+0x3bb0>
   168bc:	cmp	r9, #0
   168c0:	beq	1698c <__assert_fail@plt+0x3ce8>
   168c4:	mov	r0, r9
   168c8:	mov	r2, #10
   168cc:	mov	r1, #0
   168d0:	bl	124d0 <strtol@plt>
   168d4:	str	r0, [r6, #8]
   168d8:	b	16718 <__assert_fail@plt+0x3a74>
   168dc:	cmp	r9, #0
   168e0:	beq	1698c <__assert_fail@plt+0x3ce8>
   168e4:	ldrb	r2, [r9]
   168e8:	cmp	r2, #0
   168ec:	beq	1698c <__assert_fail@plt+0x3ce8>
   168f0:	ldr	r0, [r6]
   168f4:	bl	125e4 <gcry_free@plt>
   168f8:	mov	r0, r9
   168fc:	bl	12c68 <gcry_strdup@plt>
   16900:	cmp	r0, #0
   16904:	str	r0, [r6]
   16908:	bne	16718 <__assert_fail@plt+0x3a74>
   1690c:	bl	12914 <gpg_err_code_from_syserror@plt>
   16910:	cmp	r0, #0
   16914:	beq	168b4 <__assert_fail@plt+0x3c10>
   16918:	uxth	r5, r0
   1691c:	cmp	r5, #0
   16920:	beq	168b4 <__assert_fail@plt+0x3c10>
   16924:	b	1682c <__assert_fail@plt+0x3b88>
   16928:	ldrb	r3, [r6, #4]
   1692c:	orr	r3, r3, #1
   16930:	strb	r3, [r6, #4]
   16934:	b	16718 <__assert_fail@plt+0x3a74>
   16938:	ldrb	r3, [r6, #4]
   1693c:	orr	r3, r3, #2
   16940:	strb	r3, [r6, #4]
   16944:	b	16718 <__assert_fail@plt+0x3a74>
   16948:	ldrb	r3, [r6, #4]
   1694c:	orr	r3, r3, #4
   16950:	strb	r3, [r6, #4]
   16954:	b	16718 <__assert_fail@plt+0x3a74>
   16958:	cmp	r9, #0
   1695c:	beq	1698c <__assert_fail@plt+0x3ce8>
   16960:	mov	r0, r9
   16964:	mov	r2, #10
   16968:	mov	r1, #0
   1696c:	bl	124d0 <strtol@plt>
   16970:	str	r0, [r6, #12]
   16974:	b	16718 <__assert_fail@plt+0x3a74>
   16978:	ldrb	r3, [sp, #12]
   1697c:	cmp	r3, #0
   16980:	movne	r5, #97	; 0x61
   16984:	moveq	r5, #75	; 0x4b
   16988:	b	1682c <__assert_fail@plt+0x3b88>
   1698c:	mov	r5, #29
   16990:	b	1682c <__assert_fail@plt+0x3b88>
   16994:	mov	r5, #128	; 0x80
   16998:	b	1682c <__assert_fail@plt+0x3b88>
   1699c:	bl	1262c <__stack_chk_fail@plt>
   169a0:	strdeq	r5, [r4], -r8
   169a4:	andeq	r0, r3, ip, lsr #6
   169a8:	andeq	r1, r3, ip, lsr #14
   169ac:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   169b0:	andeq	r1, r3, ip, lsr r9
   169b4:	push	{r4, lr}
   169b8:	subs	r4, r0, #0
   169bc:	popeq	{r4, pc}
   169c0:	ldr	r0, [r4]
   169c4:	bl	125e4 <gcry_free@plt>
   169c8:	mov	r3, #0
   169cc:	str	r3, [r4]
   169d0:	str	r3, [r4, #4]
   169d4:	str	r3, [r4, #8]
   169d8:	str	r3, [r4, #12]
   169dc:	pop	{r4, pc}
   169e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   169e4:	subs	r7, r3, #0
   169e8:	ldr	r8, [pc, #300]	; 16b1c <__assert_fail@plt+0x3e78>
   169ec:	mov	r9, r2
   169f0:	mov	r3, #0
   169f4:	ldr	r2, [r8]
   169f8:	sub	sp, sp, #48	; 0x30
   169fc:	str	r3, [r9]
   16a00:	strne	r3, [r7]
   16a04:	mov	r6, r0
   16a08:	mov	r4, r1
   16a0c:	str	r2, [sp, #44]	; 0x2c
   16a10:	bl	26b70 <__assert_fail@plt+0x13ecc>
   16a14:	subs	r5, r0, #0
   16a18:	beq	16a98 <__assert_fail@plt+0x3df4>
   16a1c:	mov	r1, #64	; 0x40
   16a20:	bl	128fc <strchr@plt>
   16a24:	subs	sl, r0, #0
   16a28:	beq	16b04 <__assert_fail@plt+0x3e60>
   16a2c:	add	r1, sp, #12
   16a30:	sub	r3, sl, r5
   16a34:	mov	r2, r5
   16a38:	mov	r0, #2
   16a3c:	bl	12aa0 <gcry_md_hash_buffer@plt>
   16a40:	add	r0, sp, #12
   16a44:	mov	r1, #160	; 0xa0
   16a48:	bl	26030 <__assert_fail@plt+0x1338c>
   16a4c:	subs	r6, r0, #0
   16a50:	beq	16af8 <__assert_fail@plt+0x3e54>
   16a54:	cmp	r4, #0
   16a58:	beq	16ad0 <__assert_fail@plt+0x3e2c>
   16a5c:	str	r6, [r9]
   16a60:	mov	r6, #0
   16a64:	mov	r4, r6
   16a68:	cmp	r7, #0
   16a6c:	strne	r5, [r7]
   16a70:	beq	16ac4 <__assert_fail@plt+0x3e20>
   16a74:	mov	r0, r6
   16a78:	bl	125e4 <gcry_free@plt>
   16a7c:	ldr	r2, [sp, #44]	; 0x2c
   16a80:	ldr	r3, [r8]
   16a84:	mov	r0, r4
   16a88:	cmp	r2, r3
   16a8c:	bne	16b18 <__assert_fail@plt+0x3e74>
   16a90:	add	sp, sp, #48	; 0x30
   16a94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a98:	ldr	r3, [pc, #128]	; 16b20 <__assert_fail@plt+0x3e7c>
   16a9c:	ldr	r3, [r3]
   16aa0:	orrs	r3, r4, r3
   16aa4:	moveq	r6, r5
   16aa8:	moveq	r4, #37	; 0x25
   16aac:	beq	16ac4 <__assert_fail@plt+0x3e20>
   16ab0:	mov	r1, r6
   16ab4:	ldr	r0, [pc, #104]	; 16b24 <__assert_fail@plt+0x3e80>
   16ab8:	bl	21c58 <__assert_fail@plt+0xefb4>
   16abc:	mov	r6, r5
   16ac0:	mov	r4, #37	; 0x25
   16ac4:	mov	r0, r5
   16ac8:	bl	125e4 <gcry_free@plt>
   16acc:	b	16a74 <__assert_fail@plt+0x3dd0>
   16ad0:	ldr	r3, [pc, #72]	; 16b20 <__assert_fail@plt+0x3e7c>
   16ad4:	str	r4, [sp]
   16ad8:	add	r1, sl, #1
   16adc:	ldr	r0, [r3, #28]
   16ae0:	ldr	r2, [pc, #64]	; 16b28 <__assert_fail@plt+0x3e84>
   16ae4:	mov	r3, r6
   16ae8:	bl	1c80c <__assert_fail@plt+0x9b68>
   16aec:	cmp	r0, #0
   16af0:	str	r0, [r9]
   16af4:	bne	16a68 <__assert_fail@plt+0x3dc4>
   16af8:	bl	12914 <gpg_err_code_from_syserror@plt>
   16afc:	uxth	r4, r0
   16b00:	b	16a68 <__assert_fail@plt+0x3dc4>
   16b04:	ldr	r3, [pc, #32]	; 16b2c <__assert_fail@plt+0x3e88>
   16b08:	mov	r2, #780	; 0x30c
   16b0c:	ldr	r1, [pc, #28]	; 16b30 <__assert_fail@plt+0x3e8c>
   16b10:	ldr	r0, [pc, #28]	; 16b34 <__assert_fail@plt+0x3e90>
   16b14:	bl	22044 <__assert_fail@plt+0xf3a0>
   16b18:	bl	1262c <__stack_chk_fail@plt>
   16b1c:	strdeq	r5, [r4], -r8
   16b20:	andeq	r6, r4, ip, ror #8
   16b24:	andeq	r1, r3, r0, ror #18
   16b28:	andeq	r1, r3, ip, ror #8
   16b2c:	andeq	r1, r3, ip, asr r7
   16b30:	andeq	r1, r3, r4, lsl #19
   16b34:	ldrdeq	r1, [r3], -r8
   16b38:	push	{r4, r5, r6, r7, r8, r9, lr}
   16b3c:	mov	r2, #0
   16b40:	ldr	r6, [pc, #504]	; 16d40 <__assert_fail@plt+0x409c>
   16b44:	sub	sp, sp, #140	; 0x8c
   16b48:	mov	r7, r0
   16b4c:	ldr	r3, [r6]
   16b50:	mov	r5, r1
   16b54:	str	r2, [r0]
   16b58:	mov	r0, r1
   16b5c:	mov	r1, #64	; 0x40
   16b60:	str	r3, [sp, #132]	; 0x84
   16b64:	bl	128fc <strchr@plt>
   16b68:	subs	ip, r0, #0
   16b6c:	beq	16c84 <__assert_fail@plt+0x3fe0>
   16b70:	ldrb	r3, [ip, #1]
   16b74:	sub	r4, r5, ip
   16b78:	clz	r4, r4
   16b7c:	cmp	r3, #0
   16b80:	lsr	r4, r4, #5
   16b84:	moveq	r4, #1
   16b88:	cmp	r4, #0
   16b8c:	bne	16c84 <__assert_fail@plt+0x3fe0>
   16b90:	sub	r3, ip, r5
   16b94:	mov	r2, r5
   16b98:	add	r1, sp, #112	; 0x70
   16b9c:	mov	r0, #2
   16ba0:	add	r5, ip, #1
   16ba4:	bl	12aa0 <gcry_md_hash_buffer@plt>
   16ba8:	add	r0, sp, #112	; 0x70
   16bac:	mov	r1, #160	; 0xa0
   16bb0:	bl	26030 <__assert_fail@plt+0x1338c>
   16bb4:	subs	r9, r0, #0
   16bb8:	beq	16c8c <__assert_fail@plt+0x3fe8>
   16bbc:	ldr	r8, [pc, #384]	; 16d44 <__assert_fail@plt+0x40a0>
   16bc0:	mov	r2, r4
   16bc4:	mov	r1, r5
   16bc8:	ldr	r0, [r8, #28]
   16bcc:	bl	1c80c <__assert_fail@plt+0x9b68>
   16bd0:	subs	r4, r0, #0
   16bd4:	beq	16bf0 <__assert_fail@plt+0x3f4c>
   16bd8:	add	r2, sp, #8
   16bdc:	mov	r1, r4
   16be0:	mov	r0, #3
   16be4:	bl	12bfc <__xstat64@plt>
   16be8:	cmp	r0, #0
   16bec:	bne	16cd8 <__assert_fail@plt+0x4034>
   16bf0:	mov	r0, r4
   16bf4:	bl	125e4 <gcry_free@plt>
   16bf8:	mov	r3, #0
   16bfc:	ldr	r2, [pc, #324]	; 16d48 <__assert_fail@plt+0x40a4>
   16c00:	mov	r1, r5
   16c04:	ldr	r0, [r8, #28]
   16c08:	bl	1c80c <__assert_fail@plt+0x9b68>
   16c0c:	subs	r4, r0, #0
   16c10:	beq	16c2c <__assert_fail@plt+0x3f88>
   16c14:	add	r2, sp, #8
   16c18:	mov	r1, r4
   16c1c:	mov	r0, #3
   16c20:	bl	12bfc <__xstat64@plt>
   16c24:	cmp	r0, #0
   16c28:	bne	16c98 <__assert_fail@plt+0x3ff4>
   16c2c:	mov	r0, r4
   16c30:	bl	125e4 <gcry_free@plt>
   16c34:	mov	r3, #0
   16c38:	mov	r1, r5
   16c3c:	str	r3, [sp]
   16c40:	ldr	r0, [r8, #28]
   16c44:	mov	r3, r9
   16c48:	ldr	r2, [pc, #248]	; 16d48 <__assert_fail@plt+0x40a4>
   16c4c:	bl	1c80c <__assert_fail@plt+0x9b68>
   16c50:	subs	r5, r0, #0
   16c54:	beq	16d18 <__assert_fail@plt+0x4074>
   16c58:	mov	r4, #0
   16c5c:	str	r5, [r7]
   16c60:	mov	r0, r9
   16c64:	bl	125e4 <gcry_free@plt>
   16c68:	ldr	r2, [sp, #132]	; 0x84
   16c6c:	ldr	r3, [r6]
   16c70:	mov	r0, r4
   16c74:	cmp	r2, r3
   16c78:	bne	16d3c <__assert_fail@plt+0x4098>
   16c7c:	add	sp, sp, #140	; 0x8c
   16c80:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16c84:	mov	r4, #45	; 0x2d
   16c88:	b	16c68 <__assert_fail@plt+0x3fc4>
   16c8c:	bl	12914 <gpg_err_code_from_syserror@plt>
   16c90:	uxth	r4, r0
   16c94:	b	16c68 <__assert_fail@plt+0x3fc4>
   16c98:	bl	12914 <gpg_err_code_from_syserror@plt>
   16c9c:	ldr	r3, [pc, #168]	; 16d4c <__assert_fail@plt+0x40a8>
   16ca0:	cmp	r0, r3
   16ca4:	bne	16c2c <__assert_fail@plt+0x3f88>
   16ca8:	ldr	r1, [pc, #160]	; 16d50 <__assert_fail@plt+0x40ac>
   16cac:	mov	r0, r4
   16cb0:	bl	22b38 <__assert_fail@plt+0xfe94>
   16cb4:	cmp	r0, #0
   16cb8:	bne	16c2c <__assert_fail@plt+0x3f88>
   16cbc:	ldr	r3, [r8]
   16cc0:	cmp	r3, #0
   16cc4:	beq	16c2c <__assert_fail@plt+0x3f88>
   16cc8:	mov	r1, r4
   16ccc:	ldr	r0, [pc, #128]	; 16d54 <__assert_fail@plt+0x40b0>
   16cd0:	bl	21c58 <__assert_fail@plt+0xefb4>
   16cd4:	b	16c2c <__assert_fail@plt+0x3f88>
   16cd8:	bl	12914 <gpg_err_code_from_syserror@plt>
   16cdc:	ldr	r3, [pc, #104]	; 16d4c <__assert_fail@plt+0x40a8>
   16ce0:	cmp	r0, r3
   16ce4:	bne	16bf0 <__assert_fail@plt+0x3f4c>
   16ce8:	ldr	r1, [pc, #96]	; 16d50 <__assert_fail@plt+0x40ac>
   16cec:	mov	r0, r4
   16cf0:	bl	22b38 <__assert_fail@plt+0xfe94>
   16cf4:	cmp	r0, #0
   16cf8:	bne	16bf0 <__assert_fail@plt+0x3f4c>
   16cfc:	ldr	r3, [r8]
   16d00:	cmp	r3, #0
   16d04:	beq	16bf0 <__assert_fail@plt+0x3f4c>
   16d08:	mov	r1, r4
   16d0c:	ldr	r0, [pc, #64]	; 16d54 <__assert_fail@plt+0x40b0>
   16d10:	bl	21c58 <__assert_fail@plt+0xefb4>
   16d14:	b	16bf0 <__assert_fail@plt+0x3f4c>
   16d18:	bl	12914 <gpg_err_code_from_syserror@plt>
   16d1c:	cmp	r0, #0
   16d20:	beq	16c58 <__assert_fail@plt+0x3fb4>
   16d24:	uxth	r4, r0
   16d28:	cmp	r4, #0
   16d2c:	beq	16c58 <__assert_fail@plt+0x3fb4>
   16d30:	mov	r0, r5
   16d34:	bl	125e4 <gcry_free@plt>
   16d38:	b	16c60 <__assert_fail@plt+0x3fbc>
   16d3c:	bl	1262c <__stack_chk_fail@plt>
   16d40:	strdeq	r5, [r4], -r8
   16d44:	andeq	r6, r4, ip, ror #8
   16d48:	andeq	r1, r3, ip, ror #8
   16d4c:	andeq	r8, r0, r1, asr r0
   16d50:	andeq	r0, r3, ip, ror #24
   16d54:	muleq	r3, ip, r9
   16d58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d5c:	sub	sp, sp, #80	; 0x50
   16d60:	ldr	r6, [pc, #1056]	; 17188 <__assert_fail@plt+0x44e4>
   16d64:	mov	r3, #0
   16d68:	subs	r4, r1, #0
   16d6c:	ldr	r2, [r6]
   16d70:	str	r3, [sp]
   16d74:	str	r2, [sp, #76]	; 0x4c
   16d78:	str	r3, [sp, #4]
   16d7c:	str	r3, [sp, #8]
   16d80:	str	r3, [sp, #12]
   16d84:	mov	r7, r0
   16d88:	beq	16f88 <__assert_fail@plt+0x42e4>
   16d8c:	mov	r0, r4
   16d90:	bl	26b70 <__assert_fail@plt+0x13ecc>
   16d94:	subs	r5, r0, #0
   16d98:	beq	1706c <__assert_fail@plt+0x43c8>
   16d9c:	mov	r2, #1
   16da0:	add	r1, sp, #28
   16da4:	mov	r0, r7
   16da8:	bl	2b82c <__assert_fail@plt+0x18b88>
   16dac:	subs	r3, r0, #0
   16db0:	bne	16dc4 <__assert_fail@plt+0x4120>
   16db4:	ldr	r2, [sp, #28]
   16db8:	sub	r2, r2, #10
   16dbc:	cmp	r2, #1
   16dc0:	bls	16f50 <__assert_fail@plt+0x42ac>
   16dc4:	ldr	r1, [pc, #960]	; 1718c <__assert_fail@plt+0x44e8>
   16dc8:	mov	r0, r7
   16dcc:	bl	12a04 <gpgrt_fopen@plt>
   16dd0:	cmp	r0, #0
   16dd4:	str	r0, [sp]
   16dd8:	beq	17114 <__assert_fail@plt+0x4470>
   16ddc:	add	r2, sp, #8
   16de0:	add	r1, sp, #4
   16de4:	bl	15e9c <__assert_fail@plt+0x31f8>
   16de8:	subs	sl, r0, #0
   16dec:	bne	16f38 <__assert_fail@plt+0x4294>
   16df0:	ldr	r4, [sp, #8]
   16df4:	cmp	r4, #0
   16df8:	beq	170a8 <__assert_fail@plt+0x4404>
   16dfc:	mov	r8, sl
   16e00:	mov	r9, sl
   16e04:	ldr	r0, [r4, #8]
   16e08:	cmp	r0, #0
   16e0c:	beq	16e34 <__assert_fail@plt+0x4190>
   16e10:	mov	r1, r5
   16e14:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   16e18:	cmp	r0, #0
   16e1c:	bne	16e34 <__assert_fail@plt+0x4190>
   16e20:	ldr	r3, [r4, #4]
   16e24:	mov	sl, #1
   16e28:	cmp	r3, r8
   16e2c:	movgt	r8, r3
   16e30:	movgt	r9, r4
   16e34:	ldr	r4, [r4]
   16e38:	cmp	r4, #0
   16e3c:	bne	16e04 <__assert_fail@plt+0x4160>
   16e40:	cmp	r9, #0
   16e44:	ldreq	r9, [sp, #8]
   16e48:	cmp	sl, #0
   16e4c:	beq	170a8 <__assert_fail@plt+0x4404>
   16e50:	ldr	r4, [pc, #824]	; 17190 <__assert_fail@plt+0x44ec>
   16e54:	add	r9, r9, #12
   16e58:	ldr	r3, [r4]
   16e5c:	cmp	r3, #0
   16e60:	bne	17098 <__assert_fail@plt+0x43f4>
   16e64:	ldr	r0, [sp]
   16e68:	bl	12bb4 <gpgrt_rewind@plt>
   16e6c:	mov	r2, r9
   16e70:	mov	r3, #1
   16e74:	ldr	r1, [sp]
   16e78:	add	r0, sp, #24
   16e7c:	bl	16398 <__assert_fail@plt+0x36f4>
   16e80:	cmp	r0, #0
   16e84:	bne	17080 <__assert_fail@plt+0x43dc>
   16e88:	ldr	r0, [sp]
   16e8c:	bl	12788 <gpgrt_fclose@plt>
   16e90:	ldr	r3, [sp, #24]
   16e94:	mov	r1, r5
   16e98:	add	r0, sp, #12
   16e9c:	str	r3, [sp]
   16ea0:	bl	16b38 <__assert_fail@plt+0x3e94>
   16ea4:	subs	r9, r0, #0
   16ea8:	beq	16ef0 <__assert_fail@plt+0x424c>
   16eac:	ldr	r0, [sp, #12]
   16eb0:	bl	125e4 <gcry_free@plt>
   16eb4:	ldr	r0, [sp, #8]
   16eb8:	bl	15bc8 <__assert_fail@plt+0x2f24>
   16ebc:	ldr	r0, [sp, #4]
   16ec0:	bl	125e4 <gcry_free@plt>
   16ec4:	mov	r0, r5
   16ec8:	bl	125e4 <gcry_free@plt>
   16ecc:	ldr	r0, [sp]
   16ed0:	bl	12788 <gpgrt_fclose@plt>
   16ed4:	ldr	r2, [sp, #76]	; 0x4c
   16ed8:	ldr	r3, [r6]
   16edc:	mov	r0, r9
   16ee0:	cmp	r2, r3
   16ee4:	bne	17184 <__assert_fail@plt+0x44e0>
   16ee8:	add	sp, sp, #80	; 0x50
   16eec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ef0:	ldr	r1, [sp, #12]
   16ef4:	ldr	r0, [sp]
   16ef8:	bl	15838 <__assert_fail@plt+0x2b94>
   16efc:	subs	r9, r0, #0
   16f00:	bne	17148 <__assert_fail@plt+0x44a4>
   16f04:	ldr	r1, [pc, #648]	; 17194 <__assert_fail@plt+0x44f0>
   16f08:	ldr	r0, [sp, #12]
   16f0c:	bl	22b74 <__assert_fail@plt+0xfed0>
   16f10:	cmp	r0, #0
   16f14:	bne	17164 <__assert_fail@plt+0x44c0>
   16f18:	ldr	r3, [r4, #8]
   16f1c:	cmp	r3, #0
   16f20:	bne	16eac <__assert_fail@plt+0x4208>
   16f24:	mov	r2, r5
   16f28:	ldr	r1, [sp, #4]
   16f2c:	ldr	r0, [pc, #612]	; 17198 <__assert_fail@plt+0x44f4>
   16f30:	bl	21c58 <__assert_fail@plt+0xefb4>
   16f34:	b	16eac <__assert_fail@plt+0x4208>
   16f38:	bl	12b3c <gpg_strerror@plt>
   16f3c:	mov	r9, #9
   16f40:	mov	r1, r0
   16f44:	ldr	r0, [pc, #592]	; 1719c <__assert_fail@plt+0x44f8>
   16f48:	bl	21cbc <__assert_fail@plt+0xf018>
   16f4c:	b	16eac <__assert_fail@plt+0x4208>
   16f50:	mov	r2, r5
   16f54:	mov	r1, r7
   16f58:	mov	r0, sp
   16f5c:	bl	15bf4 <__assert_fail@plt+0x2f50>
   16f60:	subs	r9, r0, #0
   16f64:	ldreq	r0, [sp]
   16f68:	beq	16ddc <__assert_fail@plt+0x4138>
   16f6c:	bl	12b3c <gpg_strerror@plt>
   16f70:	mov	r2, r5
   16f74:	mov	r1, r7
   16f78:	mov	r3, r0
   16f7c:	ldr	r0, [pc, #540]	; 171a0 <__assert_fail@plt+0x44fc>
   16f80:	bl	21cbc <__assert_fail@plt+0xf018>
   16f84:	b	16eac <__assert_fail@plt+0x4208>
   16f88:	cmp	r0, r3
   16f8c:	mov	r3, #2048	; 0x800
   16f90:	str	r4, [sp, #16]
   16f94:	str	r4, [sp, #20]
   16f98:	str	r3, [sp, #24]
   16f9c:	beq	16fac <__assert_fail@plt+0x4308>
   16fa0:	ldrb	r3, [r0]
   16fa4:	cmp	r3, #0
   16fa8:	bne	17138 <__assert_fail@plt+0x4494>
   16fac:	mov	r0, #0
   16fb0:	bl	12890 <_gpgrt_get_std_stream@plt>
   16fb4:	mov	r5, r0
   16fb8:	cmp	r5, #0
   16fbc:	movne	r4, #0
   16fc0:	ldrne	r8, [pc, #476]	; 171a4 <__assert_fail@plt+0x4500>
   16fc4:	beq	170d0 <__assert_fail@plt+0x442c>
   16fc8:	add	r3, sp, #24
   16fcc:	add	r2, sp, #20
   16fd0:	add	r1, sp, #16
   16fd4:	mov	r0, r5
   16fd8:	bl	1247c <gpgrt_read_line@plt>
   16fdc:	cmp	r0, #0
   16fe0:	ble	170c0 <__assert_fail@plt+0x441c>
   16fe4:	ldr	r3, [sp, #24]
   16fe8:	cmp	r3, #0
   16fec:	beq	170f4 <__assert_fail@plt+0x4450>
   16ff0:	ldr	r0, [sp, #16]
   16ff4:	bl	1c54c <__assert_fail@plt+0x98a8>
   16ff8:	ldr	r0, [sp, #16]
   16ffc:	add	r4, r4, #1
   17000:	ldrb	r3, [r0]
   17004:	cmp	r3, #35	; 0x23
   17008:	cmpne	r3, #0
   1700c:	beq	16fc8 <__assert_fail@plt+0x4324>
   17010:	mov	r2, #2
   17014:	add	r1, sp, #28
   17018:	bl	1d170 <__assert_fail@plt+0xa4cc>
   1701c:	cmp	r0, #1
   17020:	ble	17058 <__assert_fail@plt+0x43b4>
   17024:	ldrd	r0, [sp, #28]
   17028:	bl	16d58 <__assert_fail@plt+0x40b4>
   1702c:	subs	r9, r0, #0
   17030:	beq	16fc8 <__assert_fail@plt+0x4324>
   17034:	mov	r0, #0
   17038:	bl	12890 <_gpgrt_get_std_stream@plt>
   1703c:	cmp	r5, r0
   17040:	beq	1704c <__assert_fail@plt+0x43a8>
   17044:	mov	r0, r5
   17048:	bl	12788 <gpgrt_fclose@plt>
   1704c:	ldr	r0, [sp, #16]
   17050:	bl	12b00 <gpgrt_free@plt>
   17054:	b	16ed4 <__assert_fail@plt+0x4230>
   17058:	mov	r2, r4
   1705c:	mov	r1, r7
   17060:	mov	r0, r8
   17064:	bl	21cbc <__assert_fail@plt+0xf018>
   17068:	b	16fc8 <__assert_fail@plt+0x4324>
   1706c:	mov	r1, r4
   17070:	ldr	r0, [pc, #304]	; 171a8 <__assert_fail@plt+0x4504>
   17074:	bl	21cbc <__assert_fail@plt+0xf018>
   17078:	mov	r9, #37	; 0x25
   1707c:	b	16eac <__assert_fail@plt+0x4208>
   17080:	bl	12b3c <gpg_strerror@plt>
   17084:	mov	r9, #9
   17088:	mov	r1, r0
   1708c:	ldr	r0, [pc, #280]	; 171ac <__assert_fail@plt+0x4508>
   17090:	bl	21cbc <__assert_fail@plt+0xf018>
   17094:	b	16eac <__assert_fail@plt+0x4208>
   17098:	mov	r1, r9
   1709c:	ldr	r0, [pc, #268]	; 171b0 <__assert_fail@plt+0x450c>
   170a0:	bl	21c58 <__assert_fail@plt+0xefb4>
   170a4:	b	16e64 <__assert_fail@plt+0x41c0>
   170a8:	mov	r1, r7
   170ac:	mov	r2, r5
   170b0:	ldr	r0, [pc, #252]	; 171b4 <__assert_fail@plt+0x4510>
   170b4:	bl	21cbc <__assert_fail@plt+0xf018>
   170b8:	mov	r9, #37	; 0x25
   170bc:	b	16eac <__assert_fail@plt+0x4208>
   170c0:	mov	r0, r5
   170c4:	bl	1265c <gpgrt_ferror@plt>
   170c8:	subs	r9, r0, #0
   170cc:	beq	17034 <__assert_fail@plt+0x4390>
   170d0:	bl	12914 <gpg_err_code_from_syserror@plt>
   170d4:	uxth	r9, r0
   170d8:	mov	r0, r9
   170dc:	bl	12b3c <gpg_strerror@plt>
   170e0:	mov	r1, r7
   170e4:	mov	r2, r0
   170e8:	ldr	r0, [pc, #200]	; 171b8 <__assert_fail@plt+0x4514>
   170ec:	bl	21cbc <__assert_fail@plt+0xf018>
   170f0:	b	17034 <__assert_fail@plt+0x4390>
   170f4:	mov	r0, #97	; 0x61
   170f8:	bl	12b3c <gpg_strerror@plt>
   170fc:	mov	r1, r7
   17100:	mov	r9, #97	; 0x61
   17104:	mov	r2, r0
   17108:	ldr	r0, [pc, #168]	; 171b8 <__assert_fail@plt+0x4514>
   1710c:	bl	21cbc <__assert_fail@plt+0xf018>
   17110:	b	17034 <__assert_fail@plt+0x4390>
   17114:	bl	12914 <gpg_err_code_from_syserror@plt>
   17118:	uxth	r9, r0
   1711c:	mov	r0, r9
   17120:	bl	12b3c <gpg_strerror@plt>
   17124:	mov	r1, r7
   17128:	mov	r2, r0
   1712c:	ldr	r0, [pc, #132]	; 171b8 <__assert_fail@plt+0x4514>
   17130:	bl	21cbc <__assert_fail@plt+0xf018>
   17134:	b	16eac <__assert_fail@plt+0x4208>
   17138:	ldr	r1, [pc, #76]	; 1718c <__assert_fail@plt+0x44e8>
   1713c:	bl	12a04 <gpgrt_fopen@plt>
   17140:	mov	r5, r0
   17144:	b	16fb8 <__assert_fail@plt+0x4314>
   17148:	ldr	r4, [sp, #12]
   1714c:	bl	12b3c <gpg_strerror@plt>
   17150:	mov	r1, r4
   17154:	mov	r2, r0
   17158:	ldr	r0, [pc, #92]	; 171bc <__assert_fail@plt+0x4518>
   1715c:	bl	21cbc <__assert_fail@plt+0xf018>
   17160:	b	16eac <__assert_fail@plt+0x4208>
   17164:	ldr	r7, [sp, #12]
   17168:	bl	12914 <gpg_err_code_from_syserror@plt>
   1716c:	bl	12b3c <gpg_strerror@plt>
   17170:	mov	r1, r7
   17174:	mov	r2, r0
   17178:	ldr	r0, [pc, #64]	; 171c0 <__assert_fail@plt+0x451c>
   1717c:	bl	21cbc <__assert_fail@plt+0xf018>
   17180:	b	16f18 <__assert_fail@plt+0x4274>
   17184:	bl	1262c <__stack_chk_fail@plt>
   17188:	strdeq	r5, [r4], -r8
   1718c:	andeq	r0, r3, r0, lsl ip
   17190:	andeq	r6, r4, ip, ror #8
   17194:	andeq	r0, r3, ip, ror #24
   17198:	muleq	r3, ip, ip
   1719c:	andeq	r1, r3, ip, lsl #20
   171a0:	andeq	r1, r3, r4, ror #19
   171a4:			; <UNDEFINED> instruction: 0x000319b4
   171a8:	andeq	r1, r3, r0, ror #18
   171ac:	andeq	r1, r3, r4, ror sl
   171b0:	andeq	r1, r3, r4, asr sl
   171b4:	andeq	r1, r3, r4, lsr #20
   171b8:	andeq	r0, r3, r4, lsr #7
   171bc:	muleq	r3, r0, sl
   171c0:	andeq	r0, r3, r8, ror ip
   171c4:	push	{r4, r5, r6, lr}
   171c8:	sub	sp, sp, #16
   171cc:	ldr	r4, [pc, #240]	; 172c4 <__assert_fail@plt+0x4620>
   171d0:	mov	ip, #0
   171d4:	mov	r1, ip
   171d8:	ldr	r2, [r4]
   171dc:	add	r3, sp, #4
   171e0:	str	r2, [sp, #12]
   171e4:	add	r2, sp, #8
   171e8:	str	ip, [sp, #4]
   171ec:	str	ip, [sp, #8]
   171f0:	bl	169e0 <__assert_fail@plt+0x3d3c>
   171f4:	subs	r5, r0, #0
   171f8:	beq	17228 <__assert_fail@plt+0x4584>
   171fc:	ldr	r0, [sp, #8]
   17200:	bl	125e4 <gcry_free@plt>
   17204:	ldr	r0, [sp, #4]
   17208:	bl	125e4 <gcry_free@plt>
   1720c:	ldr	r2, [sp, #12]
   17210:	ldr	r3, [r4]
   17214:	mov	r0, r5
   17218:	cmp	r2, r3
   1721c:	bne	172c0 <__assert_fail@plt+0x461c>
   17220:	add	sp, sp, #16
   17224:	pop	{r4, r5, r6, pc}
   17228:	ldr	r0, [sp, #8]
   1722c:	bl	22a2c <__assert_fail@plt+0xfd88>
   17230:	cmp	r0, #0
   17234:	bne	17258 <__assert_fail@plt+0x45b4>
   17238:	ldr	r3, [pc, #136]	; 172c8 <__assert_fail@plt+0x4624>
   1723c:	ldr	r3, [r3]
   17240:	cmp	r3, #0
   17244:	beq	171fc <__assert_fail@plt+0x4558>
   17248:	ldr	r1, [sp, #4]
   1724c:	ldr	r0, [pc, #120]	; 172cc <__assert_fail@plt+0x4628>
   17250:	bl	21c58 <__assert_fail@plt+0xefb4>
   17254:	b	171fc <__assert_fail@plt+0x4558>
   17258:	bl	12914 <gpg_err_code_from_syserror@plt>
   1725c:	subs	r6, r0, #0
   17260:	beq	1728c <__assert_fail@plt+0x45e8>
   17264:	ldr	r3, [pc, #100]	; 172d0 <__assert_fail@plt+0x462c>
   17268:	uxth	r6, r6
   1726c:	cmp	r6, r3
   17270:	bne	1728c <__assert_fail@plt+0x45e8>
   17274:	ldr	r3, [pc, #76]	; 172c8 <__assert_fail@plt+0x4624>
   17278:	ldr	r3, [r3, #8]
   1727c:	cmp	r3, #0
   17280:	beq	172b0 <__assert_fail@plt+0x460c>
   17284:	bl	219c4 <__assert_fail@plt+0xed20>
   17288:	b	171fc <__assert_fail@plt+0x4558>
   1728c:	mov	r0, r6
   17290:	ldr	r5, [sp, #8]
   17294:	bl	12b3c <gpg_strerror@plt>
   17298:	mov	r1, r5
   1729c:	mov	r5, r6
   172a0:	mov	r2, r0
   172a4:	ldr	r0, [pc, #40]	; 172d4 <__assert_fail@plt+0x4630>
   172a8:	bl	21cbc <__assert_fail@plt+0xf018>
   172ac:	b	171fc <__assert_fail@plt+0x4558>
   172b0:	ldr	r1, [sp, #4]
   172b4:	ldr	r0, [pc, #28]	; 172d8 <__assert_fail@plt+0x4634>
   172b8:	bl	21c58 <__assert_fail@plt+0xefb4>
   172bc:	b	17284 <__assert_fail@plt+0x45e0>
   172c0:	bl	1262c <__stack_chk_fail@plt>
   172c4:	strdeq	r5, [r4], -r8
   172c8:	andeq	r6, r4, ip, ror #8
   172cc:	ldrdeq	r1, [r3], -r0
   172d0:	andeq	r8, r0, r1, asr r0
   172d4:	andeq	r1, r3, r8, ror #2
   172d8:			; <UNDEFINED> instruction: 0x00031ab0
   172dc:	push	{r4, r5, lr}
   172e0:	sub	sp, sp, #20
   172e4:	ldr	r4, [pc, #92]	; 17348 <__assert_fail@plt+0x46a4>
   172e8:	add	r3, sp, #4
   172ec:	add	r2, sp, #8
   172f0:	ldr	ip, [r4]
   172f4:	mov	r1, #1
   172f8:	str	ip, [sp, #12]
   172fc:	bl	169e0 <__assert_fail@plt+0x3d3c>
   17300:	subs	r5, r0, #0
   17304:	bne	17328 <__assert_fail@plt+0x4684>
   17308:	ldr	r2, [sp, #4]
   1730c:	ldr	r1, [sp, #8]
   17310:	ldr	r0, [pc, #52]	; 1734c <__assert_fail@plt+0x46a8>
   17314:	bl	127a0 <gpgrt_printf@plt>
   17318:	ldr	r0, [sp, #8]
   1731c:	bl	125e4 <gcry_free@plt>
   17320:	ldr	r0, [sp, #4]
   17324:	bl	125e4 <gcry_free@plt>
   17328:	ldr	r2, [sp, #12]
   1732c:	ldr	r3, [r4]
   17330:	mov	r0, r5
   17334:	cmp	r2, r3
   17338:	bne	17344 <__assert_fail@plt+0x46a0>
   1733c:	add	sp, sp, #20
   17340:	pop	{r4, r5, pc}
   17344:	bl	1262c <__stack_chk_fail@plt>
   17348:	strdeq	r5, [r4], -r8
   1734c:	andeq	r0, r3, r4, lsr #6
   17350:	push	{r4, r5, r6, lr}
   17354:	sub	sp, sp, #24
   17358:	ldr	r4, [pc, #128]	; 173e0 <__assert_fail@plt+0x473c>
   1735c:	add	r3, sp, #12
   17360:	add	r2, sp, #16
   17364:	ldr	ip, [r4]
   17368:	mov	r1, #1
   1736c:	str	ip, [sp, #20]
   17370:	bl	169e0 <__assert_fail@plt+0x3d3c>
   17374:	subs	r5, r0, #0
   17378:	bne	173c0 <__assert_fail@plt+0x471c>
   1737c:	ldr	r6, [sp, #12]
   17380:	mov	r1, #64	; 0x40
   17384:	mov	r0, r6
   17388:	bl	128fc <strchr@plt>
   1738c:	subs	r2, r0, #0
   17390:	moveq	r2, r5
   17394:	strbne	r5, [r2], #1
   17398:	ldrne	r6, [sp, #12]
   1739c:	ldr	r3, [sp, #16]
   173a0:	mov	r1, r2
   173a4:	str	r6, [sp]
   173a8:	ldr	r0, [pc, #52]	; 173e4 <__assert_fail@plt+0x4740>
   173ac:	bl	127a0 <gpgrt_printf@plt>
   173b0:	ldr	r0, [sp, #16]
   173b4:	bl	125e4 <gcry_free@plt>
   173b8:	ldr	r0, [sp, #12]
   173bc:	bl	125e4 <gcry_free@plt>
   173c0:	ldr	r2, [sp, #20]
   173c4:	ldr	r3, [r4]
   173c8:	mov	r0, r5
   173cc:	cmp	r2, r3
   173d0:	bne	173dc <__assert_fail@plt+0x4738>
   173d4:	add	sp, sp, #24
   173d8:	pop	{r4, r5, r6, pc}
   173dc:	bl	1262c <__stack_chk_fail@plt>
   173e0:	strdeq	r5, [r4], -r8
   173e4:	andeq	r1, r3, r8, ror #21
   173e8:	ldr	r3, [pc, #16]	; 17400 <__assert_fail@plt+0x475c>
   173ec:	ldr	r3, [r3, #4]
   173f0:	tst	r3, #4
   173f4:	bxeq	lr
   173f8:	ldr	r0, [pc, #4]	; 17404 <__assert_fail@plt+0x4760>
   173fc:	b	21e08 <__assert_fail@plt+0xf164>
   17400:	andeq	r6, r4, ip, ror #8
   17404:	andeq	r0, r3, r8, lsl r3
   17408:	b	173e8 <__assert_fail@plt+0x4744>
   1740c:	ldr	r3, [pc, #256]	; 17514 <__assert_fail@plt+0x4870>
   17410:	push	{r4, r5, r6, lr}
   17414:	subs	r5, r1, #0
   17418:	ldr	r3, [r3, #4]
   1741c:	mov	r4, r0
   17420:	and	r3, r3, #1
   17424:	beq	174ec <__assert_fail@plt+0x4848>
   17428:	cmp	r3, #0
   1742c:	mov	r6, r2
   17430:	bne	17490 <__assert_fail@plt+0x47ec>
   17434:	ldrb	r3, [r4, #28]
   17438:	tst	r3, #1
   1743c:	bne	17450 <__assert_fail@plt+0x47ac>
   17440:	tst	r3, #2
   17444:	bne	174b0 <__assert_fail@plt+0x480c>
   17448:	mov	r0, #0
   1744c:	pop	{r4, r5, r6, pc}
   17450:	mov	r3, #0
   17454:	mov	r2, r6
   17458:	mov	r1, r5
   1745c:	ldr	r0, [r4, #20]
   17460:	bl	12470 <gpgrt_write@plt>
   17464:	cmp	r0, #0
   17468:	bne	174e0 <__assert_fail@plt+0x483c>
   1746c:	ldr	r1, [r4, #20]
   17470:	ldr	r0, [pc, #160]	; 17518 <__assert_fail@plt+0x4874>
   17474:	bl	12a64 <gpgrt_fputs@plt>
   17478:	cmp	r0, #0
   1747c:	bne	174e0 <__assert_fail@plt+0x483c>
   17480:	ldrb	r3, [r4, #28]
   17484:	tst	r3, #2
   17488:	beq	17448 <__assert_fail@plt+0x47a4>
   1748c:	b	174b0 <__assert_fail@plt+0x480c>
   17490:	mov	r2, r5
   17494:	mov	r1, r6
   17498:	ldr	r0, [pc, #124]	; 1751c <__assert_fail@plt+0x4878>
   1749c:	bl	21e08 <__assert_fail@plt+0xf164>
   174a0:	ldrb	r3, [r4, #28]
   174a4:	tst	r3, #1
   174a8:	beq	17440 <__assert_fail@plt+0x479c>
   174ac:	b	17450 <__assert_fail@plt+0x47ac>
   174b0:	mov	r2, r6
   174b4:	mov	r1, r5
   174b8:	mov	r3, #0
   174bc:	ldr	r0, [r4, #24]
   174c0:	bl	12470 <gpgrt_write@plt>
   174c4:	cmp	r0, #0
   174c8:	bne	174e0 <__assert_fail@plt+0x483c>
   174cc:	ldr	r1, [r4, #24]
   174d0:	ldr	r0, [pc, #64]	; 17518 <__assert_fail@plt+0x4874>
   174d4:	bl	12a64 <gpgrt_fputs@plt>
   174d8:	cmp	r0, #0
   174dc:	beq	17448 <__assert_fail@plt+0x47a4>
   174e0:	bl	12914 <gpg_err_code_from_syserror@plt>
   174e4:	uxth	r0, r0
   174e8:	pop	{r4, r5, r6, pc}
   174ec:	cmp	r3, #0
   174f0:	bne	17508 <__assert_fail@plt+0x4864>
   174f4:	ldrb	r3, [r4, #28]
   174f8:	mov	r0, #0
   174fc:	bic	r3, r3, #3
   17500:	strb	r3, [r4, #28]
   17504:	pop	{r4, r5, r6, pc}
   17508:	ldr	r0, [pc, #16]	; 17520 <__assert_fail@plt+0x487c>
   1750c:	bl	21e08 <__assert_fail@plt+0xf164>
   17510:	b	174f4 <__assert_fail@plt+0x4850>
   17514:	andeq	r6, r4, ip, ror #8
   17518:	andeq	r0, r3, r0, lsl #26
   1751c:	andeq	r1, r3, r0, lsl #23
   17520:	muleq	r3, r4, fp
   17524:	ldrb	r3, [r0, #28]
   17528:	push	{r4, r5, r6, lr}
   1752c:	mov	r4, r0
   17530:	bic	r3, r3, #3
   17534:	mov	r0, r1
   17538:	mov	r5, r1
   1753c:	strb	r3, [r4, #28]
   17540:	ldr	r1, [pc, #388]	; 176cc <__assert_fail@plt+0x4a28>
   17544:	mov	r6, r2
   17548:	bl	124b8 <strcmp@plt>
   1754c:	cmp	r0, #0
   17550:	bne	1757c <__assert_fail@plt+0x48d8>
   17554:	ldr	r1, [pc, #372]	; 176d0 <__assert_fail@plt+0x4a2c>
   17558:	mov	r0, r6
   1755c:	bl	124b8 <strcmp@plt>
   17560:	cmp	r0, #0
   17564:	beq	175e8 <__assert_fail@plt+0x4944>
   17568:	ldr	r1, [pc, #356]	; 176d4 <__assert_fail@plt+0x4a30>
   1756c:	mov	r0, r6
   17570:	bl	124b8 <strcmp@plt>
   17574:	cmp	r0, #0
   17578:	beq	17614 <__assert_fail@plt+0x4970>
   1757c:	ldr	r1, [pc, #340]	; 176d8 <__assert_fail@plt+0x4a34>
   17580:	mov	r0, r5
   17584:	bl	124b8 <strcmp@plt>
   17588:	cmp	r0, #0
   1758c:	bne	175bc <__assert_fail@plt+0x4918>
   17590:	ldr	r1, [pc, #324]	; 176dc <__assert_fail@plt+0x4a38>
   17594:	mov	r0, r6
   17598:	bl	124b8 <strcmp@plt>
   1759c:	cmp	r0, #0
   175a0:	bne	175bc <__assert_fail@plt+0x4918>
   175a4:	ldrb	r3, [r4, #28]
   175a8:	mov	r5, r0
   175ac:	mov	r0, r5
   175b0:	orr	r3, r3, #8
   175b4:	strb	r3, [r4, #28]
   175b8:	pop	{r4, r5, r6, pc}
   175bc:	ldr	r1, [pc, #284]	; 176e0 <__assert_fail@plt+0x4a3c>
   175c0:	mov	r0, r5
   175c4:	bl	124b8 <strcmp@plt>
   175c8:	cmp	r0, #0
   175cc:	bne	17640 <__assert_fail@plt+0x499c>
   175d0:	ldrb	r3, [r4, #28]
   175d4:	tst	r3, #8
   175d8:	movne	r5, #0
   175dc:	moveq	r5, #230	; 0xe6
   175e0:	mov	r0, r5
   175e4:	pop	{r4, r5, r6, pc}
   175e8:	ldr	r0, [pc, #244]	; 176e4 <__assert_fail@plt+0x4a40>
   175ec:	mov	r2, r6
   175f0:	mov	r1, r5
   175f4:	bl	21c58 <__assert_fail@plt+0xefb4>
   175f8:	ldr	r0, [r4, #20]
   175fc:	cmp	r0, #0
   17600:	beq	1765c <__assert_fail@plt+0x49b8>
   17604:	ldr	r0, [pc, #220]	; 176e8 <__assert_fail@plt+0x4a44>
   17608:	bl	21cbc <__assert_fail@plt+0xf018>
   1760c:	mov	r5, #256	; 0x100
   17610:	b	175e0 <__assert_fail@plt+0x493c>
   17614:	ldr	r0, [pc, #200]	; 176e4 <__assert_fail@plt+0x4a40>
   17618:	mov	r2, r6
   1761c:	mov	r1, r5
   17620:	bl	21c58 <__assert_fail@plt+0xefb4>
   17624:	ldr	r0, [r4, #24]
   17628:	cmp	r0, #0
   1762c:	beq	17684 <__assert_fail@plt+0x49e0>
   17630:	ldr	r0, [pc, #180]	; 176ec <__assert_fail@plt+0x4a48>
   17634:	bl	21cbc <__assert_fail@plt+0xf018>
   17638:	mov	r5, #256	; 0x100
   1763c:	b	175e0 <__assert_fail@plt+0x493c>
   17640:	mov	r1, r5
   17644:	mov	r2, r6
   17648:	ldr	r0, [pc, #160]	; 176f0 <__assert_fail@plt+0x4a4c>
   1764c:	mov	r5, #256	; 0x100
   17650:	bl	21cbc <__assert_fail@plt+0xf018>
   17654:	mov	r0, r5
   17658:	pop	{r4, r5, r6, pc}
   1765c:	ldr	r1, [pc, #144]	; 176f4 <__assert_fail@plt+0x4a50>
   17660:	bl	12920 <gpgrt_fopenmem@plt>
   17664:	cmp	r0, #0
   17668:	str	r0, [r4, #20]
   1766c:	beq	176ac <__assert_fail@plt+0x4a08>
   17670:	ldrb	r3, [r4, #28]
   17674:	mov	r5, #255	; 0xff
   17678:	orr	r3, r3, #1
   1767c:	strb	r3, [r4, #28]
   17680:	b	175e0 <__assert_fail@plt+0x493c>
   17684:	ldr	r1, [pc, #104]	; 176f4 <__assert_fail@plt+0x4a50>
   17688:	bl	12920 <gpgrt_fopenmem@plt>
   1768c:	cmp	r0, #0
   17690:	str	r0, [r4, #24]
   17694:	beq	176ac <__assert_fail@plt+0x4a08>
   17698:	ldrb	r3, [r4, #28]
   1769c:	mov	r5, #255	; 0xff
   176a0:	orr	r3, r3, #2
   176a4:	strb	r3, [r4, #28]
   176a8:	b	175e0 <__assert_fail@plt+0x493c>
   176ac:	bl	12914 <gpg_err_code_from_syserror@plt>
   176b0:	uxth	r5, r0
   176b4:	mov	r0, r5
   176b8:	bl	12b3c <gpg_strerror@plt>
   176bc:	mov	r1, r0
   176c0:	ldr	r0, [pc, #48]	; 176f8 <__assert_fail@plt+0x4a54>
   176c4:	bl	21cbc <__assert_fail@plt+0xf018>
   176c8:	b	175e0 <__assert_fail@plt+0x493c>
   176cc:	andeq	r1, r3, ip, lsr #23
   176d0:	andeq	r0, r3, r8, lsl #11
   176d4:	andeq	r0, r3, r8, lsr #21
   176d8:	andeq	r1, r3, r4, asr ip
   176dc:	andeq	r1, r3, r0, ror #24
   176e0:	andeq	r1, r3, r8, ror #24
   176e4:			; <UNDEFINED> instruction: 0x00031bb8
   176e8:	ldrdeq	r1, [r3], -r4
   176ec:	andeq	r1, r3, r4, lsr #24
   176f0:	andeq	r1, r3, r0, ror ip
   176f4:	strdeq	r0, [r3], -r4
   176f8:	andeq	r1, r3, r0, lsl #24
   176fc:	push	{r4, r5, r6, r7, lr}
   17700:	sub	sp, sp, #12
   17704:	ldr	r4, [pc, #148]	; 177a0 <__assert_fail@plt+0x4afc>
   17708:	mov	r5, r1
   1770c:	mov	r6, r0
   17710:	ldr	r3, [r4]
   17714:	ldr	r0, [pc, #136]	; 177a4 <__assert_fail@plt+0x4b00>
   17718:	str	r3, [sp, #4]
   1771c:	bl	21c58 <__assert_fail@plt+0xefb4>
   17720:	cmp	r5, #0
   17724:	beq	17744 <__assert_fail@plt+0x4aa0>
   17728:	ldr	r2, [sp, #4]
   1772c:	ldr	r3, [r4]
   17730:	mov	r0, #0
   17734:	cmp	r2, r3
   17738:	bne	1779c <__assert_fail@plt+0x4af8>
   1773c:	add	sp, sp, #12
   17740:	pop	{r4, r5, r6, r7, pc}
   17744:	ldr	r0, [r6]
   17748:	bl	1a21c <__assert_fail@plt+0x7578>
   1774c:	cmp	r0, #0
   17750:	beq	17728 <__assert_fail@plt+0x4a84>
   17754:	mov	r3, sp
   17758:	mvn	r2, #0
   1775c:	ldr	r1, [pc, #68]	; 177a8 <__assert_fail@plt+0x4b04>
   17760:	bl	1861c <__assert_fail@plt+0x5978>
   17764:	subs	r7, r0, #0
   17768:	beq	17728 <__assert_fail@plt+0x4a84>
   1776c:	ldr	r0, [sp]
   17770:	mov	r1, r5
   17774:	add	r0, r7, r0
   17778:	mov	r2, #10
   1777c:	bl	124d0 <strtol@plt>
   17780:	cmp	r0, #1
   17784:	mov	r0, r7
   17788:	ldrbgt	r3, [r6, #28]
   1778c:	orrgt	r3, r3, #4
   17790:	strbgt	r3, [r6, #28]
   17794:	bl	12560 <free@plt>
   17798:	b	17728 <__assert_fail@plt+0x4a84>
   1779c:	bl	1262c <__stack_chk_fail@plt>
   177a0:	strdeq	r5, [r4], -r8
   177a4:	muleq	r3, r4, ip
   177a8:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   177ac:	push	{r4, lr}
   177b0:	bl	12914 <gpg_err_code_from_syserror@plt>
   177b4:	uxth	r0, r0
   177b8:	pop	{r4, pc}
   177bc:	push	{r4, r5, r6, r7, lr}
   177c0:	mov	r4, r0
   177c4:	ldr	r5, [pc, #500]	; 179c0 <__assert_fail@plt+0x4d1c>
   177c8:	ldr	r0, [r0, #16]
   177cc:	sub	sp, sp, #44	; 0x2c
   177d0:	ldr	r3, [r5]
   177d4:	cmp	r0, #0
   177d8:	mov	r6, r1
   177dc:	str	r3, [sp, #36]	; 0x24
   177e0:	beq	17838 <__assert_fail@plt+0x4b94>
   177e4:	cmp	r6, #0
   177e8:	beq	17820 <__assert_fail@plt+0x4b7c>
   177ec:	mov	r1, r0
   177f0:	mov	r0, r6
   177f4:	bl	12a64 <gpgrt_fputs@plt>
   177f8:	ldr	r0, [r4, #16]
   177fc:	bl	1265c <gpgrt_ferror@plt>
   17800:	cmp	r0, #0
   17804:	bne	1782c <__assert_fail@plt+0x4b88>
   17808:	ldr	r2, [sp, #36]	; 0x24
   1780c:	ldr	r3, [r5]
   17810:	cmp	r2, r3
   17814:	bne	17994 <__assert_fail@plt+0x4cf0>
   17818:	add	sp, sp, #44	; 0x2c
   1781c:	pop	{r4, r5, r6, r7, pc}
   17820:	bl	1265c <gpgrt_ferror@plt>
   17824:	cmp	r0, #0
   17828:	beq	17858 <__assert_fail@plt+0x4bb4>
   1782c:	bl	12914 <gpg_err_code_from_syserror@plt>
   17830:	uxth	r0, r0
   17834:	b	17808 <__assert_fail@plt+0x4b64>
   17838:	ldr	r1, [pc, #388]	; 179c4 <__assert_fail@plt+0x4d20>
   1783c:	ldr	r0, [pc, #388]	; 179c8 <__assert_fail@plt+0x4d24>
   17840:	bl	12920 <gpgrt_fopenmem@plt>
   17844:	cmp	r0, #0
   17848:	str	r0, [r4, #16]
   1784c:	bne	177e4 <__assert_fail@plt+0x4b40>
   17850:	bl	177ac <__assert_fail@plt+0x4b08>
   17854:	b	17808 <__assert_fail@plt+0x4b64>
   17858:	ldr	r0, [r4, #12]
   1785c:	cmp	r0, #0
   17860:	beq	179ac <__assert_fail@plt+0x4d08>
   17864:	ldr	r3, [r4, #16]
   17868:	cmp	r3, #0
   1786c:	beq	17998 <__assert_fail@plt+0x4cf4>
   17870:	bl	12bb4 <gpgrt_rewind@plt>
   17874:	ldr	r0, [r4, #16]
   17878:	bl	12bb4 <gpgrt_rewind@plt>
   1787c:	ldr	r7, [pc, #328]	; 179cc <__assert_fail@plt+0x4d28>
   17880:	mov	r1, r6
   17884:	add	r0, sp, #20
   17888:	bl	27b6c <__assert_fail@plt+0x14ec8>
   1788c:	add	r0, sp, #20
   17890:	ldr	r1, [pc, #312]	; 179d0 <__assert_fail@plt+0x4d2c>
   17894:	bl	27bcc <__assert_fail@plt+0x14f28>
   17898:	add	r0, sp, #20
   1789c:	ldr	r1, [pc, #304]	; 179d4 <__assert_fail@plt+0x4d30>
   178a0:	bl	27bcc <__assert_fail@plt+0x14f28>
   178a4:	ldr	r3, [r7]
   178a8:	cmp	r3, #0
   178ac:	bne	17968 <__assert_fail@plt+0x4cc4>
   178b0:	ldr	r1, [pc, #288]	; 179d8 <__assert_fail@plt+0x4d34>
   178b4:	add	r0, sp, #20
   178b8:	bl	27bcc <__assert_fail@plt+0x14f28>
   178bc:	ldr	r1, [pc, #280]	; 179dc <__assert_fail@plt+0x4d38>
   178c0:	add	r0, sp, #20
   178c4:	bl	27bcc <__assert_fail@plt+0x14f28>
   178c8:	ldr	r1, [pc, #272]	; 179e0 <__assert_fail@plt+0x4d3c>
   178cc:	add	r0, sp, #20
   178d0:	bl	27bcc <__assert_fail@plt+0x14f28>
   178d4:	ldr	r1, [pc, #264]	; 179e4 <__assert_fail@plt+0x4d40>
   178d8:	add	r0, sp, #20
   178dc:	bl	27bcc <__assert_fail@plt+0x14f28>
   178e0:	ldr	r1, [pc, #256]	; 179e8 <__assert_fail@plt+0x4d44>
   178e4:	add	r0, sp, #20
   178e8:	bl	27bcc <__assert_fail@plt+0x14f28>
   178ec:	ldr	r1, [pc, #248]	; 179ec <__assert_fail@plt+0x4d48>
   178f0:	add	r0, sp, #20
   178f4:	bl	27bcc <__assert_fail@plt+0x14f28>
   178f8:	ldr	r1, [pc, #240]	; 179f0 <__assert_fail@plt+0x4d4c>
   178fc:	add	r0, sp, #20
   17900:	bl	27bcc <__assert_fail@plt+0x14f28>
   17904:	mov	r1, #0
   17908:	add	r0, sp, #20
   1790c:	bl	27bcc <__assert_fail@plt+0x14f28>
   17910:	add	r0, sp, #20
   17914:	mov	r1, #0
   17918:	bl	27cac <__assert_fail@plt+0x15008>
   1791c:	subs	r6, r0, #0
   17920:	beq	1798c <__assert_fail@plt+0x4ce8>
   17924:	ldr	r2, [pc, #200]	; 179f4 <__assert_fail@plt+0x4d50>
   17928:	mov	r3, #0
   1792c:	str	r4, [sp, #8]
   17930:	str	r2, [sp, #4]
   17934:	str	r3, [sp]
   17938:	ldr	r0, [r7, #24]
   1793c:	ldrd	r2, [r4, #12]
   17940:	mov	r1, r6
   17944:	bl	2c71c <__assert_fail@plt+0x19a78>
   17948:	cmp	r0, #0
   1794c:	bne	17978 <__assert_fail@plt+0x4cd4>
   17950:	ldr	r0, [pc, #160]	; 179f8 <__assert_fail@plt+0x4d54>
   17954:	bl	21e08 <__assert_fail@plt+0xf164>
   17958:	mov	r0, r6
   1795c:	bl	125e4 <gcry_free@plt>
   17960:	mov	r0, #0
   17964:	b	17808 <__assert_fail@plt+0x4b64>
   17968:	ldr	r1, [pc, #140]	; 179fc <__assert_fail@plt+0x4d58>
   1796c:	add	r0, sp, #20
   17970:	bl	27bcc <__assert_fail@plt+0x14f28>
   17974:	b	178b0 <__assert_fail@plt+0x4c0c>
   17978:	bl	12b3c <gpg_strerror@plt>
   1797c:	mov	r1, r0
   17980:	ldr	r0, [pc, #120]	; 17a00 <__assert_fail@plt+0x4d5c>
   17984:	bl	21cbc <__assert_fail@plt+0xf018>
   17988:	b	17958 <__assert_fail@plt+0x4cb4>
   1798c:	bl	12914 <gpg_err_code_from_syserror@plt>
   17990:	b	17958 <__assert_fail@plt+0x4cb4>
   17994:	bl	1262c <__stack_chk_fail@plt>
   17998:	ldr	r3, [pc, #100]	; 17a04 <__assert_fail@plt+0x4d60>
   1799c:	mov	r2, #156	; 0x9c
   179a0:	ldr	r1, [pc, #96]	; 17a08 <__assert_fail@plt+0x4d64>
   179a4:	ldr	r0, [pc, #96]	; 17a0c <__assert_fail@plt+0x4d68>
   179a8:	bl	22044 <__assert_fail@plt+0xf3a0>
   179ac:	ldr	r3, [pc, #80]	; 17a04 <__assert_fail@plt+0x4d60>
   179b0:	mov	r2, #155	; 0x9b
   179b4:	ldr	r1, [pc, #76]	; 17a08 <__assert_fail@plt+0x4d64>
   179b8:	ldr	r0, [pc, #80]	; 17a10 <__assert_fail@plt+0x4d6c>
   179bc:	bl	22044 <__assert_fail@plt+0xf3a0>
   179c0:	strdeq	r5, [r4], -r8
   179c4:	andeq	r1, r3, ip, lsr #25
   179c8:	andeq	r2, r0, r0, lsl r7
   179cc:	andeq	r6, r4, ip, ror #8
   179d0:	andeq	r0, r3, ip, lsl r4
   179d4:	andeq	r0, r3, r0, asr #8
   179d8:	strdeq	r1, [r3], -r8
   179dc:	andeq	r0, r3, r8, asr #8
   179e0:	andeq	r0, r3, r8, asr r4
   179e4:	andeq	r1, r3, r4, lsl sp
   179e8:	andeq	r0, r3, r4, ror ip
   179ec:	andeq	r1, r3, r0, lsr #26
   179f0:	andeq	r1, r3, ip, lsr #26
   179f4:	andeq	r7, r1, r8, lsl #8
   179f8:	andeq	r1, r3, ip, asr #26
   179fc:	andeq	r0, r3, r4, lsr r4
   17a00:	andeq	r1, r3, r0, lsr sp
   17a04:	andeq	r1, r3, ip, ror #22
   17a08:			; <UNDEFINED> instruction: 0x00031cbc
   17a0c:	andeq	r1, r3, r8, ror #25
   17a10:	ldrdeq	r1, [r3], -r8
   17a14:	push	{r4, r5, r6, lr}
   17a18:	mov	r4, r0
   17a1c:	ldr	r0, [r0, #12]
   17a20:	mov	r5, r1
   17a24:	cmp	r0, #0
   17a28:	beq	17a5c <__assert_fail@plt+0x4db8>
   17a2c:	cmp	r5, #0
   17a30:	beq	17a44 <__assert_fail@plt+0x4da0>
   17a34:	mov	r1, r0
   17a38:	mov	r0, r5
   17a3c:	bl	12a64 <gpgrt_fputs@plt>
   17a40:	ldr	r0, [r4, #12]
   17a44:	bl	1265c <gpgrt_ferror@plt>
   17a48:	cmp	r0, #0
   17a4c:	popeq	{r4, r5, r6, pc}
   17a50:	bl	12914 <gpg_err_code_from_syserror@plt>
   17a54:	uxth	r0, r0
   17a58:	pop	{r4, r5, r6, pc}
   17a5c:	ldr	r1, [pc, #24]	; 17a7c <__assert_fail@plt+0x4dd8>
   17a60:	ldr	r0, [pc, #24]	; 17a80 <__assert_fail@plt+0x4ddc>
   17a64:	bl	12920 <gpgrt_fopenmem@plt>
   17a68:	cmp	r0, #0
   17a6c:	str	r0, [r4, #12]
   17a70:	bne	17a2c <__assert_fail@plt+0x4d88>
   17a74:	pop	{r4, r5, r6, lr}
   17a78:	b	177ac <__assert_fail@plt+0x4b08>
   17a7c:	andeq	r1, r3, ip, lsr #25
   17a80:	andeq	r2, r0, r0, lsl r7
   17a84:	push	{r4, r5, r6, r7, lr}
   17a88:	mov	r5, r0
   17a8c:	ldr	r6, [pc, #540]	; 17cb0 <__assert_fail@plt+0x500c>
   17a90:	ldr	r0, [r0, #4]
   17a94:	sub	sp, sp, #44	; 0x2c
   17a98:	ldr	r3, [r6]
   17a9c:	cmp	r0, #0
   17aa0:	mov	r4, r1
   17aa4:	str	r3, [sp, #36]	; 0x24
   17aa8:	beq	17b00 <__assert_fail@plt+0x4e5c>
   17aac:	cmp	r4, #0
   17ab0:	beq	17ae8 <__assert_fail@plt+0x4e44>
   17ab4:	mov	r1, r0
   17ab8:	mov	r0, r4
   17abc:	bl	12a64 <gpgrt_fputs@plt>
   17ac0:	ldr	r0, [r5, #4]
   17ac4:	bl	1265c <gpgrt_ferror@plt>
   17ac8:	cmp	r0, #0
   17acc:	bne	17af4 <__assert_fail@plt+0x4e50>
   17ad0:	ldr	r2, [sp, #36]	; 0x24
   17ad4:	ldr	r3, [r6]
   17ad8:	cmp	r2, r3
   17adc:	bne	17cac <__assert_fail@plt+0x5008>
   17ae0:	add	sp, sp, #44	; 0x2c
   17ae4:	pop	{r4, r5, r6, r7, pc}
   17ae8:	bl	1265c <gpgrt_ferror@plt>
   17aec:	cmp	r0, #0
   17af0:	beq	17b20 <__assert_fail@plt+0x4e7c>
   17af4:	bl	12914 <gpg_err_code_from_syserror@plt>
   17af8:	uxth	r0, r0
   17afc:	b	17ad0 <__assert_fail@plt+0x4e2c>
   17b00:	ldr	r1, [pc, #428]	; 17cb4 <__assert_fail@plt+0x5010>
   17b04:	ldr	r0, [pc, #428]	; 17cb8 <__assert_fail@plt+0x5014>
   17b08:	bl	12920 <gpgrt_fopenmem@plt>
   17b0c:	cmp	r0, #0
   17b10:	str	r0, [r5, #4]
   17b14:	bne	17aac <__assert_fail@plt+0x4e08>
   17b18:	bl	177ac <__assert_fail@plt+0x4b08>
   17b1c:	b	17ad0 <__assert_fail@plt+0x4e2c>
   17b20:	ldr	r0, [r5, #4]
   17b24:	bl	12bb4 <gpgrt_rewind@plt>
   17b28:	ldr	r3, [r5, #8]
   17b2c:	cmp	r3, #0
   17b30:	beq	17c58 <__assert_fail@plt+0x4fb4>
   17b34:	add	r0, sp, #20
   17b38:	mov	r1, #0
   17b3c:	bl	27b6c <__assert_fail@plt+0x14ec8>
   17b40:	ldr	r4, [pc, #372]	; 17cbc <__assert_fail@plt+0x5018>
   17b44:	add	r0, sp, #20
   17b48:	ldr	r1, [pc, #368]	; 17cc0 <__assert_fail@plt+0x501c>
   17b4c:	bl	27bcc <__assert_fail@plt+0x14f28>
   17b50:	add	r0, sp, #20
   17b54:	ldr	r1, [pc, #360]	; 17cc4 <__assert_fail@plt+0x5020>
   17b58:	bl	27bcc <__assert_fail@plt+0x14f28>
   17b5c:	add	r0, sp, #20
   17b60:	ldr	r1, [pc, #352]	; 17cc8 <__assert_fail@plt+0x5024>
   17b64:	bl	27bcc <__assert_fail@plt+0x14f28>
   17b68:	ldr	r3, [r4]
   17b6c:	cmp	r3, #0
   17b70:	bne	17c48 <__assert_fail@plt+0x4fa4>
   17b74:	ldr	r1, [pc, #336]	; 17ccc <__assert_fail@plt+0x5028>
   17b78:	add	r0, sp, #20
   17b7c:	bl	27bcc <__assert_fail@plt+0x14f28>
   17b80:	ldr	r1, [pc, #328]	; 17cd0 <__assert_fail@plt+0x502c>
   17b84:	add	r0, sp, #20
   17b88:	bl	27bcc <__assert_fail@plt+0x14f28>
   17b8c:	ldr	r1, [pc, #320]	; 17cd4 <__assert_fail@plt+0x5030>
   17b90:	add	r0, sp, #20
   17b94:	bl	27bcc <__assert_fail@plt+0x14f28>
   17b98:	mov	r1, #0
   17b9c:	add	r0, sp, #20
   17ba0:	bl	27bcc <__assert_fail@plt+0x14f28>
   17ba4:	add	r0, sp, #20
   17ba8:	mov	r1, #0
   17bac:	bl	27cac <__assert_fail@plt+0x15008>
   17bb0:	subs	r7, r0, #0
   17bb4:	beq	17c90 <__assert_fail@plt+0x4fec>
   17bb8:	ldr	r2, [pc, #280]	; 17cd8 <__assert_fail@plt+0x5034>
   17bbc:	ldr	r3, [r5, #8]
   17bc0:	mov	r1, r7
   17bc4:	str	r3, [sp]
   17bc8:	stmib	sp, {r2, r5}
   17bcc:	mov	r3, #0
   17bd0:	ldr	r2, [r5, #4]
   17bd4:	ldr	r0, [r4, #24]
   17bd8:	bl	2c71c <__assert_fail@plt+0x19a78>
   17bdc:	cmp	r0, #0
   17be0:	bne	17c98 <__assert_fail@plt+0x4ff4>
   17be4:	ldr	r3, [r4, #4]
   17be8:	ldr	r0, [r5, #8]
   17bec:	tst	r3, #4
   17bf0:	bne	17c08 <__assert_fail@plt+0x4f64>
   17bf4:	bl	12bb4 <gpgrt_rewind@plt>
   17bf8:	mov	r0, r7
   17bfc:	bl	125e4 <gcry_free@plt>
   17c00:	mov	r0, #0
   17c04:	b	17ad0 <__assert_fail@plt+0x4e2c>
   17c08:	bl	12bb4 <gpgrt_rewind@plt>
   17c0c:	ldr	r0, [pc, #200]	; 17cdc <__assert_fail@plt+0x5038>
   17c10:	bl	21e08 <__assert_fail@plt+0xf164>
   17c14:	ldr	r4, [pc, #196]	; 17ce0 <__assert_fail@plt+0x503c>
   17c18:	b	17c28 <__assert_fail@plt+0x4f84>
   17c1c:	mov	r1, r0
   17c20:	mov	r0, r4
   17c24:	bl	21ed0 <__assert_fail@plt+0xf22c>
   17c28:	ldr	r0, [r5, #8]
   17c2c:	bl	12a1c <gpgrt_fgetc@plt>
   17c30:	cmn	r0, #1
   17c34:	bne	17c1c <__assert_fail@plt+0x4f78>
   17c38:	ldr	r0, [pc, #164]	; 17ce4 <__assert_fail@plt+0x5040>
   17c3c:	bl	21ed0 <__assert_fail@plt+0xf22c>
   17c40:	ldr	r0, [r5, #8]
   17c44:	b	17bf4 <__assert_fail@plt+0x4f50>
   17c48:	ldr	r1, [pc, #152]	; 17ce8 <__assert_fail@plt+0x5044>
   17c4c:	add	r0, sp, #20
   17c50:	bl	27bcc <__assert_fail@plt+0x14f28>
   17c54:	b	17b74 <__assert_fail@plt+0x4ed0>
   17c58:	ldr	r1, [pc, #140]	; 17cec <__assert_fail@plt+0x5048>
   17c5c:	mov	r0, r4
   17c60:	bl	12920 <gpgrt_fopenmem@plt>
   17c64:	cmp	r0, #0
   17c68:	str	r0, [r5, #8]
   17c6c:	bne	17b34 <__assert_fail@plt+0x4e90>
   17c70:	bl	12914 <gpg_err_code_from_syserror@plt>
   17c74:	uxth	r0, r0
   17c78:	bl	12b3c <gpg_strerror@plt>
   17c7c:	mov	r1, r0
   17c80:	ldr	r0, [pc, #104]	; 17cf0 <__assert_fail@plt+0x504c>
   17c84:	bl	21cbc <__assert_fail@plt+0xf018>
   17c88:	mov	r0, r4
   17c8c:	b	17ad0 <__assert_fail@plt+0x4e2c>
   17c90:	bl	12914 <gpg_err_code_from_syserror@plt>
   17c94:	b	17bf8 <__assert_fail@plt+0x4f54>
   17c98:	bl	12b3c <gpg_strerror@plt>
   17c9c:	mov	r1, r0
   17ca0:	ldr	r0, [pc, #76]	; 17cf4 <__assert_fail@plt+0x5050>
   17ca4:	bl	21cbc <__assert_fail@plt+0xf018>
   17ca8:	b	17bf8 <__assert_fail@plt+0x4f54>
   17cac:	bl	1262c <__stack_chk_fail@plt>
   17cb0:	strdeq	r5, [r4], -r8
   17cb4:	andeq	r1, r3, ip, lsr #25
   17cb8:	andeq	r8, r1, r0, lsr #13
   17cbc:	andeq	r6, r4, ip, ror #8
   17cc0:	andeq	r0, r3, ip, lsl r4
   17cc4:	andeq	r1, r3, r0, lsr #27
   17cc8:	andeq	r0, r3, r0, asr #8
   17ccc:	andeq	r0, r3, r8, asr r4
   17cd0:			; <UNDEFINED> instruction: 0x00031db8
   17cd4:	andeq	r0, r3, r4, ror ip
   17cd8:	andeq	r7, r1, r8, ror #7
   17cdc:	ldrdeq	r1, [r3], -ip
   17ce0:	andeq	r1, r3, ip, ror #27
   17ce4:	andeq	r5, r3, ip, ror #4
   17ce8:	andeq	r0, r3, r4, lsr r4
   17cec:	strdeq	r0, [r3], -r4
   17cf0:	andeq	r1, r3, r4, ror sp
   17cf4:	andeq	r1, r3, r4, asr #27
   17cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cfc:	sub	sp, sp, #12
   17d00:	ldr	r5, [pc, #804]	; 1802c <__assert_fail@plt+0x5388>
   17d04:	mov	r7, r0
   17d08:	mov	sl, r1
   17d0c:	ldr	r3, [r5]
   17d10:	mov	r1, #32
   17d14:	mov	r0, #1
   17d18:	mov	fp, r2
   17d1c:	str	r3, [sp, #4]
   17d20:	bl	129bc <gcry_calloc@plt>
   17d24:	subs	r4, r0, #0
   17d28:	beq	17f80 <__assert_fail@plt+0x52dc>
   17d2c:	mov	r1, r4
   17d30:	mov	r0, sp
   17d34:	bl	1a140 <__assert_fail@plt+0x749c>
   17d38:	subs	r6, r0, #0
   17d3c:	bne	17ed4 <__assert_fail@plt+0x5230>
   17d40:	ldr	r9, [pc, #744]	; 18030 <__assert_fail@plt+0x538c>
   17d44:	ldr	r0, [sp]
   17d48:	ldr	r3, [r9, #4]
   17d4c:	tst	r3, #2
   17d50:	bne	17f44 <__assert_fail@plt+0x52a0>
   17d54:	ldr	r1, [pc, #728]	; 18034 <__assert_fail@plt+0x5390>
   17d58:	bl	1a1ec <__assert_fail@plt+0x7548>
   17d5c:	ldr	r1, [pc, #724]	; 18038 <__assert_fail@plt+0x5394>
   17d60:	ldr	r0, [sp]
   17d64:	bl	1a1f4 <__assert_fail@plt+0x7550>
   17d68:	ldr	r1, [pc, #716]	; 1803c <__assert_fail@plt+0x5398>
   17d6c:	ldr	r0, [sp]
   17d70:	bl	1a1fc <__assert_fail@plt+0x7558>
   17d74:	ldr	r1, [pc, #708]	; 18040 <__assert_fail@plt+0x539c>
   17d78:	ldr	r0, [sp]
   17d7c:	bl	1a204 <__assert_fail@plt+0x7560>
   17d80:	ldr	r1, [pc, #700]	; 18044 <__assert_fail@plt+0x53a0>
   17d84:	ldr	r0, [sp]
   17d88:	bl	1a20c <__assert_fail@plt+0x7568>
   17d8c:	ldr	r1, [pc, #692]	; 18048 <__assert_fail@plt+0x53a4>
   17d90:	ldr	r0, [sp]
   17d94:	bl	1a214 <__assert_fail@plt+0x7570>
   17d98:	ldr	r0, [sp]
   17d9c:	mov	r1, r7
   17da0:	str	r0, [r4]
   17da4:	bl	1a224 <__assert_fail@plt+0x7580>
   17da8:	subs	r6, r0, #0
   17dac:	bne	17ed4 <__assert_fail@plt+0x5230>
   17db0:	ldr	r3, [r4, #20]
   17db4:	cmp	r3, #0
   17db8:	beq	17dc4 <__assert_fail@plt+0x5120>
   17dbc:	ldr	r0, [pc, #648]	; 1804c <__assert_fail@plt+0x53a8>
   17dc0:	bl	21c58 <__assert_fail@plt+0xefb4>
   17dc4:	ldr	r3, [r4, #24]
   17dc8:	cmp	r3, #0
   17dcc:	beq	17dd8 <__assert_fail@plt+0x5134>
   17dd0:	ldr	r0, [pc, #632]	; 18050 <__assert_fail@plt+0x53ac>
   17dd4:	bl	21c58 <__assert_fail@plt+0xefb4>
   17dd8:	ldrb	r8, [r4, #28]
   17ddc:	ands	r8, r8, #4
   17de0:	bne	17f8c <__assert_fail@plt+0x52e8>
   17de4:	ldr	r7, [r4, #8]
   17de8:	cmp	r7, #0
   17dec:	beq	17e4c <__assert_fail@plt+0x51a8>
   17df0:	ldr	r3, [r9]
   17df4:	cmp	r3, #0
   17df8:	bne	17f54 <__assert_fail@plt+0x52b0>
   17dfc:	ldr	r0, [r4, #4]
   17e00:	mov	r3, #0
   17e04:	cmp	r0, r3
   17e08:	str	r3, [r4, #8]
   17e0c:	beq	17e14 <__assert_fail@plt+0x5170>
   17e10:	bl	12bb4 <gpgrt_rewind@plt>
   17e14:	ldr	r0, [r4, #12]
   17e18:	cmp	r0, #0
   17e1c:	beq	17e24 <__assert_fail@plt+0x5180>
   17e20:	bl	12bb4 <gpgrt_rewind@plt>
   17e24:	ldr	r0, [r4, #16]
   17e28:	cmp	r0, #0
   17e2c:	beq	17e34 <__assert_fail@plt+0x5190>
   17e30:	bl	12bb4 <gpgrt_rewind@plt>
   17e34:	mov	r1, r7
   17e38:	ldr	r0, [sp]
   17e3c:	bl	1a224 <__assert_fail@plt+0x7580>
   17e40:	cmp	r0, #0
   17e44:	movne	r6, r0
   17e48:	bne	17f28 <__assert_fail@plt+0x5284>
   17e4c:	ldr	r0, [r4, #20]
   17e50:	cmp	r0, #0
   17e54:	beq	17f64 <__assert_fail@plt+0x52c0>
   17e58:	ldr	r3, [r9, #4]
   17e5c:	tst	r3, #1
   17e60:	bne	17f9c <__assert_fail@plt+0x52f8>
   17e64:	cmp	sl, #0
   17e68:	beq	17e90 <__assert_fail@plt+0x51ec>
   17e6c:	ldr	r0, [r4, #20]
   17e70:	bl	12bb4 <gpgrt_rewind@plt>
   17e74:	mov	r3, r8
   17e78:	ldr	r2, [r4, #20]
   17e7c:	ldr	r1, [pc, #464]	; 18054 <__assert_fail@plt+0x53b0>
   17e80:	mov	r0, fp
   17e84:	blx	sl
   17e88:	cmp	r0, #0
   17e8c:	bne	18020 <__assert_fail@plt+0x537c>
   17e90:	ldr	r0, [r4, #24]
   17e94:	cmp	r0, #0
   17e98:	beq	17ed8 <__assert_fail@plt+0x5234>
   17e9c:	ldr	r3, [r9, #4]
   17ea0:	tst	r3, #1
   17ea4:	bne	17fdc <__assert_fail@plt+0x5338>
   17ea8:	cmp	sl, #0
   17eac:	beq	17ed8 <__assert_fail@plt+0x5234>
   17eb0:	ldr	r0, [r4, #24]
   17eb4:	bl	12bb4 <gpgrt_rewind@plt>
   17eb8:	mov	r3, r8
   17ebc:	mov	r0, fp
   17ec0:	ldr	r2, [r4, #24]
   17ec4:	ldr	r1, [pc, #396]	; 18058 <__assert_fail@plt+0x53b4>
   17ec8:	blx	sl
   17ecc:	mov	r6, r0
   17ed0:	b	17ed8 <__assert_fail@plt+0x5234>
   17ed4:	mov	r7, #0
   17ed8:	mov	r0, r7
   17edc:	bl	12788 <gpgrt_fclose@plt>
   17ee0:	ldr	r0, [sp]
   17ee4:	bl	1a188 <__assert_fail@plt+0x74e4>
   17ee8:	mov	r3, #0
   17eec:	str	r3, [r4]
   17ef0:	ldr	r0, [r4, #4]
   17ef4:	bl	12788 <gpgrt_fclose@plt>
   17ef8:	ldr	r0, [r4, #8]
   17efc:	bl	12788 <gpgrt_fclose@plt>
   17f00:	ldr	r0, [r4, #12]
   17f04:	bl	12788 <gpgrt_fclose@plt>
   17f08:	ldr	r0, [r4, #16]
   17f0c:	bl	12788 <gpgrt_fclose@plt>
   17f10:	ldr	r0, [r4, #20]
   17f14:	bl	12788 <gpgrt_fclose@plt>
   17f18:	ldr	r0, [r4, #24]
   17f1c:	bl	12788 <gpgrt_fclose@plt>
   17f20:	mov	r0, r4
   17f24:	bl	125e4 <gcry_free@plt>
   17f28:	ldr	r2, [sp, #4]
   17f2c:	ldr	r3, [r5]
   17f30:	mov	r0, r6
   17f34:	cmp	r2, r3
   17f38:	bne	18028 <__assert_fail@plt+0x5384>
   17f3c:	add	sp, sp, #12
   17f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f44:	mov	r1, #1
   17f48:	bl	1a1b8 <__assert_fail@plt+0x7514>
   17f4c:	ldr	r0, [sp]
   17f50:	b	17d54 <__assert_fail@plt+0x50b0>
   17f54:	ldr	r0, [pc, #256]	; 1805c <__assert_fail@plt+0x53b8>
   17f58:	bl	21c58 <__assert_fail@plt+0xefb4>
   17f5c:	ldr	r7, [r4, #8]
   17f60:	b	17dfc <__assert_fail@plt+0x5158>
   17f64:	ldr	r0, [r4, #24]
   17f68:	cmp	r0, #0
   17f6c:	bne	17e9c <__assert_fail@plt+0x51f8>
   17f70:	ldr	r0, [pc, #232]	; 18060 <__assert_fail@plt+0x53bc>
   17f74:	bl	21cbc <__assert_fail@plt+0xf018>
   17f78:	mov	r6, #58	; 0x3a
   17f7c:	b	17ed8 <__assert_fail@plt+0x5234>
   17f80:	bl	12914 <gpg_err_code_from_syserror@plt>
   17f84:	uxth	r6, r0
   17f88:	b	17f28 <__assert_fail@plt+0x5284>
   17f8c:	ldr	r0, [pc, #208]	; 18064 <__assert_fail@plt+0x53c0>
   17f90:	bl	21c58 <__assert_fail@plt+0xefb4>
   17f94:	mov	r8, #1
   17f98:	b	17de4 <__assert_fail@plt+0x5140>
   17f9c:	bl	12bb4 <gpgrt_rewind@plt>
   17fa0:	ldr	r0, [pc, #192]	; 18068 <__assert_fail@plt+0x53c4>
   17fa4:	bl	21e08 <__assert_fail@plt+0xf164>
   17fa8:	ldr	r0, [pc, #188]	; 1806c <__assert_fail@plt+0x53c8>
   17fac:	bl	21ed0 <__assert_fail@plt+0xf22c>
   17fb0:	b	17fc0 <__assert_fail@plt+0x531c>
   17fb4:	mov	r1, r0
   17fb8:	ldr	r0, [pc, #176]	; 18070 <__assert_fail@plt+0x53cc>
   17fbc:	bl	21ed0 <__assert_fail@plt+0xf22c>
   17fc0:	ldr	r0, [r4, #20]
   17fc4:	bl	12a1c <gpgrt_fgetc@plt>
   17fc8:	cmn	r0, #1
   17fcc:	bne	17fb4 <__assert_fail@plt+0x5310>
   17fd0:	ldr	r0, [pc, #156]	; 18074 <__assert_fail@plt+0x53d0>
   17fd4:	bl	21ed0 <__assert_fail@plt+0xf22c>
   17fd8:	b	17e64 <__assert_fail@plt+0x51c0>
   17fdc:	bl	12bb4 <gpgrt_rewind@plt>
   17fe0:	ldr	r0, [pc, #144]	; 18078 <__assert_fail@plt+0x53d4>
   17fe4:	bl	21e08 <__assert_fail@plt+0xf164>
   17fe8:	ldr	r0, [pc, #124]	; 1806c <__assert_fail@plt+0x53c8>
   17fec:	bl	21ed0 <__assert_fail@plt+0xf22c>
   17ff0:	ldr	r9, [pc, #120]	; 18070 <__assert_fail@plt+0x53cc>
   17ff4:	b	18004 <__assert_fail@plt+0x5360>
   17ff8:	mov	r1, r0
   17ffc:	mov	r0, r9
   18000:	bl	21ed0 <__assert_fail@plt+0xf22c>
   18004:	ldr	r0, [r4, #24]
   18008:	bl	12a1c <gpgrt_fgetc@plt>
   1800c:	cmn	r0, #1
   18010:	bne	17ff8 <__assert_fail@plt+0x5354>
   18014:	ldr	r0, [pc, #88]	; 18074 <__assert_fail@plt+0x53d0>
   18018:	bl	21ed0 <__assert_fail@plt+0xf22c>
   1801c:	b	17ea8 <__assert_fail@plt+0x5204>
   18020:	mov	r6, r0
   18024:	b	17ed8 <__assert_fail@plt+0x5234>
   18028:	bl	1262c <__stack_chk_fail@plt>
   1802c:	strdeq	r5, [r4], -r8
   18030:	andeq	r6, r4, ip, ror #8
   18034:	strdeq	r7, [r1], -ip
   18038:	andeq	r7, r1, r4, lsr #10
   1803c:	andeq	r7, r1, ip, lsl #8
   18040:	andeq	r7, r1, r4, lsl #21
   18044:	andeq	r7, r1, r4, lsl sl
   18048:			; <UNDEFINED> instruction: 0x000177bc
   1804c:	strdeq	r1, [r3], -r0
   18050:	andeq	r1, r3, r0, lsl #28
   18054:	andeq	r0, r3, ip, ror r5
   18058:	muleq	r3, ip, sl
   1805c:	andeq	r1, r3, ip, lsr #28
   18060:	andeq	r1, r3, r8, asr #28
   18064:	andeq	r1, r3, r0, lsl lr
   18068:	andeq	r1, r3, r0, ror lr
   1806c:	andeq	r0, r3, r0, lsl #26
   18070:	andeq	r1, r3, ip, ror #27
   18074:	andeq	r5, r3, ip, ror #4
   18078:	andeq	r1, r3, r8, ror lr
   1807c:	push	{r4, r5, r6, lr}
   18080:	ldr	r4, [r0, #4]
   18084:	cmp	r4, #0
   18088:	beq	180d4 <__assert_fail@plt+0x5430>
   1808c:	cmp	r4, r1
   18090:	mov	r5, r1
   18094:	mov	r6, r0
   18098:	bne	180a8 <__assert_fail@plt+0x5404>
   1809c:	b	180dc <__assert_fail@plt+0x5438>
   180a0:	cmp	r5, r4
   180a4:	beq	180dc <__assert_fail@plt+0x5438>
   180a8:	ldr	r3, [r4, #4]
   180ac:	mov	r0, r4
   180b0:	cmp	r3, #0
   180b4:	mov	r1, r5
   180b8:	beq	180c8 <__assert_fail@plt+0x5424>
   180bc:	bl	1807c <__assert_fail@plt+0x53d8>
   180c0:	cmp	r0, #0
   180c4:	bne	180e8 <__assert_fail@plt+0x5444>
   180c8:	ldr	r4, [r4]
   180cc:	cmp	r4, #0
   180d0:	bne	180a0 <__assert_fail@plt+0x53fc>
   180d4:	mov	r0, r4
   180d8:	pop	{r4, r5, r6, pc}
   180dc:	mov	r4, r6
   180e0:	mov	r0, r4
   180e4:	pop	{r4, r5, r6, pc}
   180e8:	mov	r4, r0
   180ec:	mov	r0, r4
   180f0:	pop	{r4, r5, r6, pc}
   180f4:	push	{r4, r5, r6, lr}
   180f8:	subs	r5, r0, #0
   180fc:	popeq	{r4, r5, r6, pc}
   18100:	ldr	r0, [r5, #4]
   18104:	ldr	r6, [r5]
   18108:	cmp	r0, #0
   1810c:	beq	18114 <__assert_fail@plt+0x5470>
   18110:	bl	180f4 <__assert_fail@plt+0x5450>
   18114:	ldr	r0, [r5, #8]
   18118:	cmp	r0, #0
   1811c:	beq	18130 <__assert_fail@plt+0x548c>
   18120:	ldr	r4, [r0]
   18124:	bl	12560 <free@plt>
   18128:	subs	r0, r4, #0
   1812c:	bne	18120 <__assert_fail@plt+0x547c>
   18130:	ldr	r0, [r5, #16]
   18134:	bl	12560 <free@plt>
   18138:	mov	r0, r5
   1813c:	bl	12560 <free@plt>
   18140:	subs	r5, r6, #0
   18144:	bne	18100 <__assert_fail@plt+0x545c>
   18148:	pop	{r4, r5, r6, pc}
   1814c:	push	{r4, r5, r6, r7, r8, lr}
   18150:	mov	r8, r0
   18154:	add	r0, r2, #16
   18158:	mov	r5, r2
   1815c:	mov	r7, r1
   18160:	bl	127f4 <malloc@plt>
   18164:	subs	r4, r0, #0
   18168:	beq	1819c <__assert_fail@plt+0x54f8>
   1816c:	mov	r6, #0
   18170:	cmp	r7, #0
   18174:	stm	r4, {r6, r8}
   18178:	str	r6, [r4, #8]
   1817c:	strb	r6, [r4, #12]
   18180:	beq	1819c <__assert_fail@plt+0x54f8>
   18184:	mov	r2, r5
   18188:	add	r5, r4, r5
   1818c:	mov	r1, r7
   18190:	add	r0, r4, #12
   18194:	bl	125b4 <memcpy@plt>
   18198:	strb	r6, [r5, #12]
   1819c:	mov	r0, r4
   181a0:	pop	{r4, r5, r6, r7, r8, pc}
   181a4:	cmp	r0, #0
   181a8:	bxeq	lr
   181ac:	push	{r4, lr}
   181b0:	ldr	r4, [r0]
   181b4:	bl	12560 <free@plt>
   181b8:	subs	r0, r4, #0
   181bc:	bne	181b0 <__assert_fail@plt+0x550c>
   181c0:	pop	{r4, pc}
   181c4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181c8:	subs	r6, r0, #0
   181cc:	beq	18298 <__assert_fail@plt+0x55f4>
   181d0:	mov	r0, r1
   181d4:	mov	r9, r2
   181d8:	mov	r7, r1
   181dc:	bl	128d8 <strlen@plt>
   181e0:	subs	r5, r0, #0
   181e4:	moveq	r8, r5
   181e8:	bne	182a0 <__assert_fail@plt+0x55fc>
   181ec:	ldr	r4, [r6, #8]
   181f0:	cmp	r4, #0
   181f4:	beq	18294 <__assert_fail@plt+0x55f0>
   181f8:	mov	r6, #0
   181fc:	mov	sl, r6
   18200:	b	18250 <__assert_fail@plt+0x55ac>
   18204:	cmp	r0, r5
   18208:	movcc	r0, #0
   1820c:	movcs	r0, #1
   18210:	cmp	r0, #0
   18214:	beq	18244 <__assert_fail@plt+0x55a0>
   18218:	mov	r0, fp
   1821c:	mov	r2, r5
   18220:	mov	r1, r7
   18224:	bl	125f0 <memcmp@plt>
   18228:	cmp	r0, #0
   1822c:	bne	18244 <__assert_fail@plt+0x55a0>
   18230:	cmn	r9, #1
   18234:	add	sl, sl, #1
   18238:	beq	182bc <__assert_fail@plt+0x5618>
   1823c:	cmp	sl, r9
   18240:	beq	18294 <__assert_fail@plt+0x55f0>
   18244:	ldr	r4, [r4]
   18248:	cmp	r4, #0
   1824c:	beq	18298 <__assert_fail@plt+0x55f4>
   18250:	ldr	r3, [r4, #4]
   18254:	cmp	r3, #0
   18258:	bne	18244 <__assert_fail@plt+0x55a0>
   1825c:	add	fp, r4, #8
   18260:	mov	r0, fp
   18264:	mov	r1, #58	; 0x3a
   18268:	bl	128fc <strchr@plt>
   1826c:	cmp	r0, #0
   18270:	beq	18244 <__assert_fail@plt+0x55a0>
   18274:	subs	r0, r0, fp
   18278:	beq	18244 <__assert_fail@plt+0x55a0>
   1827c:	cmp	r8, #0
   18280:	bne	18204 <__assert_fail@plt+0x5560>
   18284:	sub	r0, r0, r5
   18288:	clz	r0, r0
   1828c:	lsr	r0, r0, #5
   18290:	b	18210 <__assert_fail@plt+0x556c>
   18294:	mov	r6, r4
   18298:	mov	r0, r6
   1829c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182a0:	sub	r3, r5, #1
   182a4:	ldrb	r2, [r7, r3]
   182a8:	cmp	r2, #42	; 0x2a
   182ac:	moveq	r5, r3
   182b0:	moveq	r8, #1
   182b4:	movne	r8, #0
   182b8:	b	181ec <__assert_fail@plt+0x5548>
   182bc:	mov	r6, r4
   182c0:	b	18244 <__assert_fail@plt+0x55a0>
   182c4:	push	{r4, r5, r6, lr}
   182c8:	mov	r1, #58	; 0x3a
   182cc:	mov	r5, r0
   182d0:	bl	128fc <strchr@plt>
   182d4:	cmp	r0, #0
   182d8:	subne	r4, r0, r5
   182dc:	beq	1831c <__assert_fail@plt+0x5678>
   182e0:	cmp	r4, #0
   182e4:	beq	182fc <__assert_fail@plt+0x5658>
   182e8:	ldr	r1, [pc, #60]	; 1832c <__assert_fail@plt+0x5688>
   182ec:	mov	r0, r5
   182f0:	bl	12c98 <strspn@plt>
   182f4:	cmp	r0, r4
   182f8:	beq	18304 <__assert_fail@plt+0x5660>
   182fc:	mov	r0, #0
   18300:	pop	{r4, r5, r6, pc}
   18304:	ldrb	r1, [r5]
   18308:	ldr	r0, [pc, #32]	; 18330 <__assert_fail@plt+0x568c>
   1830c:	bl	128fc <strchr@plt>
   18310:	clz	r0, r0
   18314:	lsr	r0, r0, #5
   18318:	pop	{r4, r5, r6, pc}
   1831c:	mov	r0, r5
   18320:	bl	128d8 <strlen@plt>
   18324:	mov	r4, r0
   18328:	b	182e0 <__assert_fail@plt+0x563c>
   1832c:	andeq	r1, r3, ip, lsr #30
   18330:	andeq	r1, r3, r0, ror pc
   18334:	ldr	r3, [pc, #340]	; 18490 <__assert_fail@plt+0x57ec>
   18338:	push	{r4, r5, r6, r7, lr}
   1833c:	cmp	r0, r3
   18340:	mov	ip, r0
   18344:	beq	18440 <__assert_fail@plt+0x579c>
   18348:	ldrb	r2, [r0]
   1834c:	cmp	r2, #0
   18350:	popeq	{r4, r5, r6, r7, pc}
   18354:	mov	r0, r3
   18358:	mov	lr, ip
   1835c:	mov	r1, r2
   18360:	mov	r3, #77	; 0x4d
   18364:	b	18370 <__assert_fail@plt+0x56cc>
   18368:	cmp	r3, #0
   1836c:	beq	18460 <__assert_fail@plt+0x57bc>
   18370:	cmp	r3, r1
   18374:	sub	r5, r1, #97	; 0x61
   18378:	beq	183a0 <__assert_fail@plt+0x56fc>
   1837c:	cmp	r5, #25
   18380:	sub	r6, r3, #97	; 0x61
   18384:	mov	r4, r1
   18388:	bicls	r4, r1, #32
   1838c:	cmp	r6, #25
   18390:	bicls	r3, r3, #32
   18394:	cmp	r3, r4
   18398:	mov	r7, r1
   1839c:	bne	18434 <__assert_fail@plt+0x5790>
   183a0:	ldrb	r1, [lr, #1]!
   183a4:	ldrb	r3, [r0, #1]!
   183a8:	cmp	r1, #0
   183ac:	bne	18368 <__assert_fail@plt+0x56c4>
   183b0:	cmp	r3, #0
   183b4:	beq	18440 <__assert_fail@plt+0x579c>
   183b8:	sub	r0, r3, #97	; 0x61
   183bc:	cmp	r0, #25
   183c0:	movls	r7, r1
   183c4:	bhi	183d4 <__assert_fail@plt+0x5730>
   183c8:	bic	r1, r3, #32
   183cc:	cmp	r1, r7
   183d0:	beq	18440 <__assert_fail@plt+0x579c>
   183d4:	cmp	r2, #58	; 0x3a
   183d8:	popeq	{r4, r5, r6, r7, pc}
   183dc:	mov	r3, #1
   183e0:	b	18408 <__assert_fail@plt+0x5764>
   183e4:	cmp	r0, #25
   183e8:	mov	r3, #0
   183ec:	sub	r2, r2, #32
   183f0:	bhi	183f8 <__assert_fail@plt+0x5754>
   183f4:	strb	r2, [ip]
   183f8:	ldrb	r2, [ip, #1]!
   183fc:	cmp	r2, #0
   18400:	cmpne	r2, #58	; 0x3a
   18404:	popeq	{r4, r5, r6, r7, pc}
   18408:	cmp	r2, #45	; 0x2d
   1840c:	moveq	r3, #1
   18410:	beq	183f8 <__assert_fail@plt+0x5754>
   18414:	cmp	r3, #0
   18418:	sub	r0, r2, #97	; 0x61
   1841c:	sub	r1, r2, #65	; 0x41
   18420:	bne	183e4 <__assert_fail@plt+0x5740>
   18424:	cmp	r1, #25
   18428:	add	r2, r2, #32
   1842c:	bhi	183f8 <__assert_fail@plt+0x5754>
   18430:	b	183f4 <__assert_fail@plt+0x5750>
   18434:	ldrb	r3, [r0]
   18438:	cmp	r3, r1
   1843c:	bne	18484 <__assert_fail@plt+0x57e0>
   18440:	ldr	r3, [pc, #72]	; 18490 <__assert_fail@plt+0x57ec>
   18444:	ldm	r3!, {r0, r1, r2}
   18448:	ldrb	r3, [r3]
   1844c:	str	r0, [ip]
   18450:	str	r1, [ip, #4]
   18454:	strb	r3, [ip, #12]
   18458:	str	r2, [ip, #8]
   1845c:	pop	{r4, r5, r6, r7, pc}
   18460:	sub	r0, r1, #97	; 0x61
   18464:	cmp	r0, #25
   18468:	bhi	183d4 <__assert_fail@plt+0x5730>
   1846c:	bic	r7, r1, #32
   18470:	sub	r1, r3, #97	; 0x61
   18474:	cmp	r1, #25
   18478:	mov	r1, r3
   1847c:	bls	183c8 <__assert_fail@plt+0x5724>
   18480:	b	183cc <__assert_fail@plt+0x5728>
   18484:	cmp	r5, #25
   18488:	bls	1846c <__assert_fail@plt+0x57c8>
   1848c:	b	18470 <__assert_fail@plt+0x57cc>
   18490:	andeq	r1, r3, ip, ror pc
   18494:	push	{r4, r5, r6, r7, r8, lr}
   18498:	mov	r6, r0
   1849c:	mov	r7, r1
   184a0:	mov	r0, #1
   184a4:	mov	r1, #32
   184a8:	bl	12428 <calloc@plt>
   184ac:	subs	r4, r0, #0
   184b0:	beq	18520 <__assert_fail@plt+0x587c>
   184b4:	mov	r1, #20
   184b8:	mov	r0, #1
   184bc:	bl	12428 <calloc@plt>
   184c0:	subs	r5, r0, #0
   184c4:	beq	18528 <__assert_fail@plt+0x5884>
   184c8:	add	r3, r5, #8
   184cc:	cmp	r6, #0
   184d0:	str	r5, [r4, #24]
   184d4:	str	r5, [r4, #20]
   184d8:	strd	r6, [r4]
   184dc:	str	r3, [r5, #12]
   184e0:	beq	18520 <__assert_fail@plt+0x587c>
   184e4:	ldr	r5, [r4, #8]
   184e8:	cmp	r5, #0
   184ec:	bne	18520 <__assert_fail@plt+0x587c>
   184f0:	mov	r0, r7
   184f4:	mov	r2, r4
   184f8:	mov	r1, #1
   184fc:	blx	r6
   18500:	cmp	r0, #0
   18504:	beq	18520 <__assert_fail@plt+0x587c>
   18508:	str	r0, [r4, #8]
   1850c:	ldr	r0, [r4, #20]
   18510:	bl	180f4 <__assert_fail@plt+0x5450>
   18514:	mov	r0, r4
   18518:	bl	12560 <free@plt>
   1851c:	mov	r4, r5
   18520:	mov	r0, r4
   18524:	pop	{r4, r5, r6, r7, r8, pc}
   18528:	mov	r0, r4
   1852c:	bl	12560 <free@plt>
   18530:	mov	r4, r5
   18534:	b	18520 <__assert_fail@plt+0x587c>
   18538:	push	{r4, lr}
   1853c:	subs	r4, r0, #0
   18540:	popeq	{r4, pc}
   18544:	ldr	r3, [r4]
   18548:	cmp	r3, #0
   1854c:	beq	18574 <__assert_fail@plt+0x58d0>
   18550:	ldr	r2, [r4, #8]
   18554:	cmp	r2, #0
   18558:	bne	18574 <__assert_fail@plt+0x58d0>
   1855c:	mov	r2, r4
   18560:	mov	r1, #3
   18564:	ldr	r0, [r4, #4]
   18568:	blx	r3
   1856c:	cmp	r0, #0
   18570:	strne	r0, [r4, #8]
   18574:	ldr	r0, [r4, #20]
   18578:	bl	180f4 <__assert_fail@plt+0x5450>
   1857c:	mov	r0, r4
   18580:	pop	{r4, lr}
   18584:	b	12560 <free@plt>
   18588:	push	{r4, lr}
   1858c:	subs	r4, r0, #0
   18590:	popeq	{r4, pc}
   18594:	ldr	r3, [r4]
   18598:	cmp	r3, #0
   1859c:	beq	185c4 <__assert_fail@plt+0x5920>
   185a0:	ldr	r2, [r4, #8]
   185a4:	cmp	r2, #0
   185a8:	bne	185c4 <__assert_fail@plt+0x5920>
   185ac:	mov	r2, r4
   185b0:	mov	r1, #2
   185b4:	ldr	r0, [r4, #4]
   185b8:	blx	r3
   185bc:	cmp	r0, #0
   185c0:	strne	r0, [r4, #8]
   185c4:	ldr	r0, [r4, #20]
   185c8:	bl	180f4 <__assert_fail@plt+0x5450>
   185cc:	mov	r0, r4
   185d0:	pop	{r4, lr}
   185d4:	b	12560 <free@plt>
   185d8:	ldr	r3, [r0]
   185dc:	cmp	r3, #0
   185e0:	beq	18614 <__assert_fail@plt+0x5970>
   185e4:	ldr	r2, [r0, #8]
   185e8:	cmp	r2, #0
   185ec:	bne	18614 <__assert_fail@plt+0x5970>
   185f0:	push	{r4, lr}
   185f4:	mov	r2, r0
   185f8:	mov	r4, r0
   185fc:	mov	r1, #5
   18600:	ldr	r0, [r0, #4]
   18604:	blx	r3
   18608:	cmp	r0, #0
   1860c:	strne	r0, [r4, #8]
   18610:	pop	{r4, pc}
   18614:	mov	r0, #0
   18618:	bx	lr
   1861c:	push	{r4, r5, r6, r7, r8, lr}
   18620:	mov	r5, r3
   18624:	ldr	r0, [r0, #24]
   18628:	bl	181c4 <__assert_fail@plt+0x5520>
   1862c:	subs	r8, r0, #0
   18630:	beq	1873c <__assert_fail@plt+0x5a98>
   18634:	add	r7, r8, #8
   18638:	mov	r0, r7
   1863c:	bl	128d8 <strlen@plt>
   18640:	ldr	r4, [r8]
   18644:	cmp	r4, #0
   18648:	add	r6, r0, #1
   1864c:	bne	18670 <__assert_fail@plt+0x59cc>
   18650:	b	1867c <__assert_fail@plt+0x59d8>
   18654:	add	r0, r4, #8
   18658:	bl	128d8 <strlen@plt>
   1865c:	ldr	r4, [r4]
   18660:	cmp	r4, #0
   18664:	add	r0, r0, #1
   18668:	add	r6, r6, r0
   1866c:	beq	1867c <__assert_fail@plt+0x59d8>
   18670:	ldr	r3, [r4, #4]
   18674:	cmp	r3, #0
   18678:	bne	18654 <__assert_fail@plt+0x59b0>
   1867c:	mov	r0, r6
   18680:	bl	127f4 <malloc@plt>
   18684:	subs	r4, r0, #0
   18688:	beq	186d8 <__assert_fail@plt+0x5a34>
   1868c:	mov	r1, r7
   18690:	bl	12608 <stpcpy@plt>
   18694:	mov	r7, #10
   18698:	strb	r7, [r0], #1
   1869c:	ldr	r6, [r8]
   186a0:	cmp	r6, #0
   186a4:	bne	186c4 <__assert_fail@plt+0x5a20>
   186a8:	b	186d0 <__assert_fail@plt+0x5a2c>
   186ac:	add	r1, r6, #8
   186b0:	bl	12608 <stpcpy@plt>
   186b4:	strb	r7, [r0], #1
   186b8:	ldr	r6, [r6]
   186bc:	cmp	r6, #0
   186c0:	beq	186d0 <__assert_fail@plt+0x5a2c>
   186c4:	ldr	r3, [r6, #4]
   186c8:	cmp	r3, #0
   186cc:	bne	186ac <__assert_fail@plt+0x5a08>
   186d0:	mov	r3, #0
   186d4:	strb	r3, [r0, #-1]
   186d8:	cmp	r5, #0
   186dc:	beq	18734 <__assert_fail@plt+0x5a90>
   186e0:	mov	r1, #58	; 0x3a
   186e4:	mov	r0, r4
   186e8:	bl	128fc <strchr@plt>
   186ec:	cmp	r0, #0
   186f0:	beq	18730 <__assert_fail@plt+0x5a8c>
   186f4:	ldrb	r3, [r0, #1]
   186f8:	add	r0, r0, #1
   186fc:	b	18704 <__assert_fail@plt+0x5a60>
   18700:	ldrb	r3, [r0, #1]!
   18704:	cmp	r3, #32
   18708:	cmpne	r3, #13
   1870c:	moveq	r2, #1
   18710:	movne	r2, #0
   18714:	sub	r3, r3, #9
   18718:	cmp	r3, #1
   1871c:	movhi	r3, r2
   18720:	orrls	r3, r2, #1
   18724:	cmp	r3, #0
   18728:	bne	18700 <__assert_fail@plt+0x5a5c>
   1872c:	sub	r0, r0, r4
   18730:	str	r0, [r5]
   18734:	mov	r0, r4
   18738:	pop	{r4, r5, r6, r7, r8, pc}
   1873c:	bl	12968 <__errno_location@plt>
   18740:	mov	r4, r8
   18744:	str	r8, [r0]
   18748:	b	18734 <__assert_fail@plt+0x5a90>
   1874c:	subs	r3, r0, #0
   18750:	beq	187a0 <__assert_fail@plt+0x5afc>
   18754:	ldr	r2, [r1]
   18758:	cmp	r2, r3
   1875c:	beq	187a0 <__assert_fail@plt+0x5afc>
   18760:	ldr	r0, [r3, #24]
   18764:	cmp	r0, #0
   18768:	bxeq	lr
   1876c:	cmp	r2, #0
   18770:	beq	1878c <__assert_fail@plt+0x5ae8>
   18774:	mov	r0, r2
   18778:	ldr	r2, [r0], #8
   1877c:	cmp	r2, #0
   18780:	moveq	r2, r3
   18784:	str	r2, [r1]
   18788:	bx	lr
   1878c:	ldr	r0, [r0, #8]
   18790:	cmp	r0, #0
   18794:	bne	187a8 <__assert_fail@plt+0x5b04>
   18798:	str	r3, [r1]
   1879c:	bx	lr
   187a0:	mov	r0, #0
   187a4:	bx	lr
   187a8:	mov	r2, r0
   187ac:	b	18774 <__assert_fail@plt+0x5ad0>
   187b0:	ldr	r3, [pc, #1420]	; 18d44 <__assert_fail@plt+0x60a0>
   187b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b8:	sub	sp, sp, #44	; 0x2c
   187bc:	ldr	r3, [r3]
   187c0:	subs	ip, r2, #0
   187c4:	str	r3, [sp, #36]	; 0x24
   187c8:	moveq	fp, ip
   187cc:	beq	188ac <__assert_fail@plt+0x5c08>
   187d0:	ldr	r0, [r0, #24]
   187d4:	bl	181c4 <__assert_fail@plt+0x5520>
   187d8:	subs	fp, r0, #0
   187dc:	beq	188ac <__assert_fail@plt+0x5c08>
   187e0:	bl	12968 <__errno_location@plt>
   187e4:	add	r6, fp, #8
   187e8:	mov	r3, #0
   187ec:	mov	r1, #58	; 0x3a
   187f0:	str	r3, [sp, #32]
   187f4:	str	r0, [sp, #16]
   187f8:	str	r3, [r0]
   187fc:	mov	r0, r6
   18800:	bl	128fc <strchr@plt>
   18804:	subs	r4, r0, #0
   18808:	beq	188a8 <__assert_fail@plt+0x5c04>
   1880c:	subs	r7, r4, r6
   18810:	beq	188a8 <__assert_fail@plt+0x5c04>
   18814:	ldr	r5, [pc, #1324]	; 18d48 <__assert_fail@plt+0x60a4>
   18818:	ldr	r1, [pc, #1324]	; 18d4c <__assert_fail@plt+0x60a8>
   1881c:	mov	r3, #12
   18820:	b	18834 <__assert_fail@plt+0x5b90>
   18824:	ldr	r1, [r5, #8]!
   18828:	cmp	r1, #0
   1882c:	beq	188cc <__assert_fail@plt+0x5c28>
   18830:	ldr	r3, [r5, #4]
   18834:	cmp	r7, r3
   18838:	bne	18824 <__assert_fail@plt+0x5b80>
   1883c:	mov	r2, r7
   18840:	mov	r0, r6
   18844:	bl	125f0 <memcmp@plt>
   18848:	cmp	r0, #0
   1884c:	bne	18824 <__assert_fail@plt+0x5b80>
   18850:	ldr	r3, [pc, #1272]	; 18d50 <__assert_fail@plt+0x60ac>
   18854:	str	r3, [sp, #24]
   18858:	add	r3, r3, #12
   1885c:	str	r3, [sp, #28]
   18860:	b	188dc <__assert_fail@plt+0x5c38>
   18864:	mov	r2, r5
   18868:	mov	r1, r6
   1886c:	ldr	r0, [sp, #12]
   18870:	bl	1814c <__assert_fail@plt+0x54a8>
   18874:	subs	r7, r0, #0
   18878:	bne	18c08 <__assert_fail@plt+0x5f64>
   1887c:	ldr	r0, [sp, #32]
   18880:	ldr	r3, [sp, #16]
   18884:	cmp	r0, #0
   18888:	ldr	r5, [r3]
   1888c:	beq	188a0 <__assert_fail@plt+0x5bfc>
   18890:	ldr	r4, [r0]
   18894:	bl	12560 <free@plt>
   18898:	subs	r0, r4, #0
   1889c:	bne	18890 <__assert_fail@plt+0x5bec>
   188a0:	ldr	r3, [sp, #16]
   188a4:	str	r5, [r3]
   188a8:	mov	fp, #0
   188ac:	ldr	r3, [pc, #1168]	; 18d44 <__assert_fail@plt+0x60a0>
   188b0:	ldr	r2, [sp, #36]	; 0x24
   188b4:	mov	r0, fp
   188b8:	ldr	r3, [r3]
   188bc:	cmp	r2, r3
   188c0:	bne	18d40 <__assert_fail@plt+0x609c>
   188c4:	add	sp, sp, #44	; 0x2c
   188c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188cc:	ldr	r3, [pc, #1152]	; 18d54 <__assert_fail@plt+0x60b0>
   188d0:	str	r3, [sp, #24]
   188d4:	add	r3, r3, #8
   188d8:	str	r3, [sp, #28]
   188dc:	mov	r7, #0
   188e0:	add	r6, r4, #1
   188e4:	ldrb	r5, [r4, #1]
   188e8:	add	sl, sp, #32
   188ec:	b	1895c <__assert_fail@plt+0x5cb8>
   188f0:	cmp	r5, #40	; 0x28
   188f4:	addeq	r4, r6, #1
   188f8:	moveq	r5, #0
   188fc:	moveq	r1, #1
   18900:	beq	189b8 <__assert_fail@plt+0x5d14>
   18904:	cmp	r5, #91	; 0x5b
   18908:	cmpne	r5, #34	; 0x22
   1890c:	moveq	r4, #1
   18910:	movne	r4, #0
   18914:	beq	18b0c <__assert_fail@plt+0x5e68>
   18918:	mov	r1, r5
   1891c:	ldr	r0, [sp, #24]
   18920:	bl	128fc <strchr@plt>
   18924:	cmp	r0, #0
   18928:	beq	18a6c <__assert_fail@plt+0x5dc8>
   1892c:	mov	r2, #1
   18930:	mov	r1, r6
   18934:	mov	r0, #4
   18938:	bl	1814c <__assert_fail@plt+0x54a8>
   1893c:	cmp	r0, #0
   18940:	beq	1887c <__assert_fail@plt+0x5bd8>
   18944:	str	r0, [sl]
   18948:	ldrb	r5, [r6, #1]
   1894c:	mov	r7, r4
   18950:	mov	sl, r0
   18954:	add	r4, r6, #1
   18958:	mov	r6, r4
   1895c:	cmp	r5, #0
   18960:	bne	188f0 <__assert_fail@plt+0x5c4c>
   18964:	ldr	fp, [fp]
   18968:	cmp	fp, #0
   1896c:	beq	18d18 <__assert_fail@plt+0x6074>
   18970:	ldr	r3, [fp, #4]
   18974:	cmp	r3, #0
   18978:	beq	18d18 <__assert_fail@plt+0x6074>
   1897c:	add	r4, fp, #8
   18980:	ldrb	r5, [fp, #8]
   18984:	b	18958 <__assert_fail@plt+0x5cb4>
   18988:	cmp	r5, #0
   1898c:	movne	r3, r5
   18990:	bne	189cc <__assert_fail@plt+0x5d28>
   18994:	mov	r5, #1
   18998:	ldr	r3, [fp]
   1899c:	cmp	r3, #0
   189a0:	beq	18a1c <__assert_fail@plt+0x5d78>
   189a4:	ldr	r7, [r3, #4]
   189a8:	cmp	r7, #0
   189ac:	beq	18d10 <__assert_fail@plt+0x606c>
   189b0:	add	r4, r3, #8
   189b4:	mov	fp, r3
   189b8:	ldrb	r3, [r4]
   189bc:	cmp	r3, #0
   189c0:	beq	18998 <__assert_fail@plt+0x5cf4>
   189c4:	cmp	r5, #0
   189c8:	beq	18a28 <__assert_fail@plt+0x5d84>
   189cc:	mov	r2, r3
   189d0:	cmp	r2, #34	; 0x22
   189d4:	mov	r0, r4
   189d8:	ldrb	r3, [r4, #1]!
   189dc:	beq	18a04 <__assert_fail@plt+0x5d60>
   189e0:	cmp	r2, #92	; 0x5c
   189e4:	movne	r2, r3
   189e8:	beq	18ae8 <__assert_fail@plt+0x5e44>
   189ec:	cmp	r2, #0
   189f0:	mov	r0, r4
   189f4:	beq	18994 <__assert_fail@plt+0x5cf0>
   189f8:	cmp	r2, #34	; 0x22
   189fc:	ldrb	r3, [r4, #1]!
   18a00:	bne	189e0 <__assert_fail@plt+0x5d3c>
   18a04:	cmp	r3, #0
   18a08:	bne	18a28 <__assert_fail@plt+0x5d84>
   18a0c:	mov	r5, r3
   18a10:	ldr	r3, [fp]
   18a14:	cmp	r3, #0
   18a18:	bne	189a4 <__assert_fail@plt+0x5d00>
   18a1c:	mov	r7, r3
   18a20:	ldrb	r5, [r4]
   18a24:	b	18958 <__assert_fail@plt+0x5cb4>
   18a28:	cmp	r3, #41	; 0x29
   18a2c:	ldrb	r5, [r4, #1]!
   18a30:	beq	18a5c <__assert_fail@plt+0x5db8>
   18a34:	cmp	r3, #40	; 0x28
   18a38:	beq	18afc <__assert_fail@plt+0x5e58>
   18a3c:	cmp	r3, #34	; 0x22
   18a40:	beq	18988 <__assert_fail@plt+0x5ce4>
   18a44:	cmp	r5, #0
   18a48:	beq	18998 <__assert_fail@plt+0x5cf4>
   18a4c:	mov	r3, r5
   18a50:	cmp	r3, #41	; 0x29
   18a54:	ldrb	r5, [r4, #1]!
   18a58:	bne	18a34 <__assert_fail@plt+0x5d90>
   18a5c:	subs	r1, r1, #1
   18a60:	bne	18a44 <__assert_fail@plt+0x5da0>
   18a64:	mov	r7, r1
   18a68:	b	18958 <__assert_fail@plt+0x5cb4>
   18a6c:	cmp	r5, #32
   18a70:	cmpne	r5, #13
   18a74:	moveq	r3, #1
   18a78:	movne	r3, #0
   18a7c:	sub	r2, r5, #9
   18a80:	cmp	r2, #1
   18a84:	orrls	r3, r3, #1
   18a88:	cmp	r3, #0
   18a8c:	beq	18c7c <__assert_fail@plt+0x5fd8>
   18a90:	ldrb	r5, [r6, #1]
   18a94:	add	r4, r6, #1
   18a98:	cmp	r5, #32
   18a9c:	cmpne	r5, #13
   18aa0:	moveq	r7, #1
   18aa4:	movne	r7, #0
   18aa8:	sub	r2, r5, #9
   18aac:	cmp	r2, #1
   18ab0:	orrls	r7, r7, #1
   18ab4:	cmp	r7, #0
   18ab8:	beq	18958 <__assert_fail@plt+0x5cb4>
   18abc:	ldrb	r5, [r4, #1]!
   18ac0:	cmp	r5, #13
   18ac4:	cmpne	r5, #32
   18ac8:	moveq	r7, #1
   18acc:	movne	r7, #0
   18ad0:	sub	r3, r5, #9
   18ad4:	cmp	r3, #1
   18ad8:	orrls	r7, r7, #1
   18adc:	cmp	r7, #0
   18ae0:	bne	18abc <__assert_fail@plt+0x5e18>
   18ae4:	b	18958 <__assert_fail@plt+0x5cb4>
   18ae8:	cmp	r3, #0
   18aec:	beq	18994 <__assert_fail@plt+0x5cf0>
   18af0:	mov	r4, r0
   18af4:	ldrb	r2, [r4, #2]!
   18af8:	b	189ec <__assert_fail@plt+0x5d48>
   18afc:	cmp	r5, #0
   18b00:	add	r1, r1, #1
   18b04:	beq	18998 <__assert_fail@plt+0x5cf4>
   18b08:	b	18a4c <__assert_fail@plt+0x5da8>
   18b0c:	add	r6, r6, #1
   18b10:	cmp	r5, #34	; 0x22
   18b14:	ldrb	r5, [r6]
   18b18:	moveq	r3, #34	; 0x22
   18b1c:	movne	r3, #93	; 0x5d
   18b20:	cmp	r3, #34	; 0x22
   18b24:	str	r3, [sp, #4]
   18b28:	moveq	r3, #2
   18b2c:	movne	r3, #3
   18b30:	cmp	r5, #0
   18b34:	str	r3, [sp, #12]
   18b38:	mov	r7, #0
   18b3c:	str	sl, [sp, #20]
   18b40:	beq	18c40 <__assert_fail@plt+0x5f9c>
   18b44:	ldr	r3, [sp, #4]
   18b48:	cmp	r5, r3
   18b4c:	beq	18ca0 <__assert_fail@plt+0x5ffc>
   18b50:	mov	r3, r6
   18b54:	b	18b70 <__assert_fail@plt+0x5ecc>
   18b58:	cmp	r5, #0
   18b5c:	beq	18b88 <__assert_fail@plt+0x5ee4>
   18b60:	ldr	r3, [sp, #4]
   18b64:	cmp	r5, r3
   18b68:	mov	r3, r4
   18b6c:	beq	18b88 <__assert_fail@plt+0x5ee4>
   18b70:	mov	r4, r3
   18b74:	cmp	r5, #92	; 0x5c
   18b78:	ldrb	r5, [r4, #1]!
   18b7c:	bne	18b58 <__assert_fail@plt+0x5eb4>
   18b80:	cmp	r5, #0
   18b84:	bne	18c48 <__assert_fail@plt+0x5fa4>
   18b88:	sub	r5, r4, r6
   18b8c:	cmp	r7, #0
   18b90:	beq	18864 <__assert_fail@plt+0x5bc0>
   18b94:	add	r1, r7, #12
   18b98:	mov	r0, r1
   18b9c:	str	r1, [sp, #8]
   18ba0:	bl	128d8 <strlen@plt>
   18ba4:	add	r9, r0, r5
   18ba8:	mov	sl, r0
   18bac:	add	r0, r9, #16
   18bb0:	bl	127f4 <malloc@plt>
   18bb4:	subs	r8, r0, #0
   18bb8:	beq	1887c <__assert_fail@plt+0x5bd8>
   18bbc:	ldmib	r7, {r0, r2}
   18bc0:	ldr	ip, [r7]
   18bc4:	add	r3, r8, #12
   18bc8:	str	ip, [r8]
   18bcc:	stmib	r8, {r0, r2}
   18bd0:	ldr	r1, [sp, #8]
   18bd4:	mov	r0, r3
   18bd8:	mov	r2, sl
   18bdc:	bl	125b4 <memcpy@plt>
   18be0:	add	r9, r8, r9
   18be4:	mov	r2, r5
   18be8:	mov	r1, r6
   18bec:	add	r0, r0, sl
   18bf0:	bl	125b4 <memcpy@plt>
   18bf4:	mov	r3, #0
   18bf8:	mov	r0, r7
   18bfc:	strb	r3, [r9, #12]
   18c00:	bl	12560 <free@plt>
   18c04:	mov	r7, r8
   18c08:	ldrb	r3, [r4]
   18c0c:	cmp	r3, #0
   18c10:	bne	18c54 <__assert_fail@plt+0x5fb0>
   18c14:	ldr	r3, [fp]
   18c18:	cmp	r3, #0
   18c1c:	beq	18c54 <__assert_fail@plt+0x5fb0>
   18c20:	ldr	r2, [r3, #4]
   18c24:	cmp	r2, #0
   18c28:	beq	18c54 <__assert_fail@plt+0x5fb0>
   18c2c:	add	r6, r3, #8
   18c30:	ldrb	r5, [r6]
   18c34:	mov	fp, r3
   18c38:	cmp	r5, #0
   18c3c:	bne	18b44 <__assert_fail@plt+0x5ea0>
   18c40:	mov	r4, r6
   18c44:	b	18b8c <__assert_fail@plt+0x5ee8>
   18c48:	mov	r4, r3
   18c4c:	ldrb	r5, [r4, #2]!
   18c50:	b	18b58 <__assert_fail@plt+0x5eb4>
   18c54:	ldr	sl, [sp, #20]
   18c58:	str	r7, [sl]
   18c5c:	ldrb	r5, [r4]
   18c60:	mov	sl, r7
   18c64:	cmp	r5, #0
   18c68:	moveq	r7, r5
   18c6c:	ldrbne	r5, [r4, #1]
   18c70:	movne	r7, #0
   18c74:	addne	r4, r4, #1
   18c78:	b	18958 <__assert_fail@plt+0x5cb4>
   18c7c:	sub	r5, r5, #33	; 0x21
   18c80:	cmp	r5, #94	; 0x5e
   18c84:	bls	18cac <__assert_fail@plt+0x6008>
   18c88:	cmp	r7, #0
   18c8c:	beq	18d20 <__assert_fail@plt+0x607c>
   18c90:	add	r4, r6, #1
   18c94:	ldrb	r5, [r6, #1]
   18c98:	mov	r7, #1
   18c9c:	b	18958 <__assert_fail@plt+0x5cb4>
   18ca0:	mov	r4, r6
   18ca4:	mov	r5, #0
   18ca8:	b	18b8c <__assert_fail@plt+0x5ee8>
   18cac:	ldrb	r1, [r6, #1]
   18cb0:	add	r4, r6, #1
   18cb4:	sub	r3, r1, #33	; 0x21
   18cb8:	cmp	r3, #94	; 0x5e
   18cbc:	movhi	r2, #1
   18cc0:	bhi	18cf0 <__assert_fail@plt+0x604c>
   18cc4:	ldr	r5, [sp, #28]
   18cc8:	b	18cdc <__assert_fail@plt+0x6038>
   18ccc:	ldrb	r1, [r4, #1]!
   18cd0:	sub	r3, r1, #33	; 0x21
   18cd4:	cmp	r3, #94	; 0x5e
   18cd8:	bhi	18cec <__assert_fail@plt+0x6048>
   18cdc:	mov	r0, r5
   18ce0:	bl	128fc <strchr@plt>
   18ce4:	cmp	r0, #0
   18ce8:	beq	18ccc <__assert_fail@plt+0x6028>
   18cec:	sub	r2, r4, r6
   18cf0:	mov	r1, r6
   18cf4:	mov	r0, #1
   18cf8:	bl	1814c <__assert_fail@plt+0x54a8>
   18cfc:	cmp	r0, #0
   18d00:	beq	1887c <__assert_fail@plt+0x5bd8>
   18d04:	str	r0, [sl]
   18d08:	mov	r7, #0
   18d0c:	mov	sl, r0
   18d10:	ldrb	r5, [r4]
   18d14:	b	18958 <__assert_fail@plt+0x5cb4>
   18d18:	ldr	fp, [sp, #32]
   18d1c:	b	188ac <__assert_fail@plt+0x5c08>
   18d20:	mov	r2, r7
   18d24:	mov	r1, r7
   18d28:	bl	1814c <__assert_fail@plt+0x54a8>
   18d2c:	cmp	r0, #0
   18d30:	beq	1887c <__assert_fail@plt+0x5bd8>
   18d34:	str	r0, [sl]
   18d38:	mov	sl, r0
   18d3c:	b	18c90 <__assert_fail@plt+0x5fec>
   18d40:	bl	1262c <__stack_chk_fail@plt>
   18d44:	strdeq	r5, [r4], -r8
   18d48:			; <UNDEFINED> instruction: 0x00031eb4
   18d4c:	andeq	r0, r3, r4, lsr r8
   18d50:	andeq	r1, r3, r0, lsl #29
   18d54:	muleq	r3, ip, lr
   18d58:	cmp	r0, #0
   18d5c:	bxeq	lr
   18d60:	b	181a4 <__assert_fail@plt+0x5500>
   18d64:	push	{r4, r5, r6, r7, r8, lr}
   18d68:	subs	r4, r0, #0
   18d6c:	mov	r6, r1
   18d70:	mov	r7, r2
   18d74:	bne	18d88 <__assert_fail@plt+0x60e4>
   18d78:	b	18e2c <__assert_fail@plt+0x6188>
   18d7c:	ldr	r4, [r4]
   18d80:	cmp	r4, #0
   18d84:	beq	18e2c <__assert_fail@plt+0x6188>
   18d88:	ldr	r3, [r4, #4]
   18d8c:	cmp	r3, #4
   18d90:	bne	18d7c <__assert_fail@plt+0x60d8>
   18d94:	ldrb	r3, [r4, #12]
   18d98:	cmp	r3, #59	; 0x3b
   18d9c:	bne	18d7c <__assert_fail@plt+0x60d8>
   18da0:	ldr	r5, [r4]
   18da4:	cmp	r5, #0
   18da8:	beq	18e2c <__assert_fail@plt+0x6188>
   18dac:	ldr	r3, [r5, #4]
   18db0:	cmp	r3, #1
   18db4:	bne	18e24 <__assert_fail@plt+0x6180>
   18db8:	ldr	r3, [r5]
   18dbc:	cmp	r3, #0
   18dc0:	beq	18e24 <__assert_fail@plt+0x6180>
   18dc4:	ldr	r2, [r3, #4]
   18dc8:	cmp	r2, #4
   18dcc:	bne	18e24 <__assert_fail@plt+0x6180>
   18dd0:	ldrb	r2, [r3, #12]
   18dd4:	cmp	r2, #61	; 0x3d
   18dd8:	bne	18e24 <__assert_fail@plt+0x6180>
   18ddc:	ldr	r3, [r3]
   18de0:	cmp	r3, #0
   18de4:	beq	18df8 <__assert_fail@plt+0x6154>
   18de8:	ldr	r3, [r3, #4]
   18dec:	sub	r3, r3, #1
   18df0:	cmp	r3, #1
   18df4:	bhi	18e24 <__assert_fail@plt+0x6180>
   18df8:	ldrb	r3, [r5, #8]
   18dfc:	add	r0, r5, #12
   18e00:	tst	r3, #2
   18e04:	beq	18e34 <__assert_fail@plt+0x6190>
   18e08:	mov	r1, r6
   18e0c:	bl	124b8 <strcmp@plt>
   18e10:	cmp	r0, #0
   18e14:	beq	18e7c <__assert_fail@plt+0x61d8>
   18e18:	ldr	r5, [r4]
   18e1c:	cmp	r5, #0
   18e20:	beq	18e2c <__assert_fail@plt+0x6188>
   18e24:	mov	r4, r5
   18e28:	b	18d88 <__assert_fail@plt+0x60e4>
   18e2c:	mov	r0, #0
   18e30:	pop	{r4, r5, r6, r7, r8, pc}
   18e34:	ldrb	r3, [r5, #12]
   18e38:	cmp	r3, #0
   18e3c:	movne	r2, r0
   18e40:	beq	18e60 <__assert_fail@plt+0x61bc>
   18e44:	sub	r1, r3, #65	; 0x41
   18e48:	cmp	r1, #25
   18e4c:	add	r3, r3, #32
   18e50:	strbls	r3, [r2]
   18e54:	ldrb	r3, [r2, #1]!
   18e58:	cmp	r3, #0
   18e5c:	bne	18e44 <__assert_fail@plt+0x61a0>
   18e60:	ldrb	r3, [r5, #8]
   18e64:	mov	r1, r6
   18e68:	orr	r3, r3, #2
   18e6c:	strb	r3, [r5, #8]
   18e70:	bl	124b8 <strcmp@plt>
   18e74:	cmp	r0, #0
   18e78:	bne	18e18 <__assert_fail@plt+0x6174>
   18e7c:	ldr	r3, [r5]
   18e80:	ldr	r2, [r3]
   18e84:	cmp	r7, #0
   18e88:	cmpne	r2, #0
   18e8c:	beq	18edc <__assert_fail@plt+0x6238>
   18e90:	ldrb	r3, [r2, #8]
   18e94:	add	r0, r2, #12
   18e98:	tst	r3, #2
   18e9c:	popne	{r4, r5, r6, r7, r8, pc}
   18ea0:	ldrb	r3, [r2, #12]
   18ea4:	cmp	r3, #0
   18ea8:	movne	r1, r0
   18eac:	beq	18ecc <__assert_fail@plt+0x6228>
   18eb0:	sub	ip, r3, #65	; 0x41
   18eb4:	cmp	ip, #25
   18eb8:	add	r3, r3, #32
   18ebc:	strbls	r3, [r1]
   18ec0:	ldrb	r3, [r1, #1]!
   18ec4:	cmp	r3, #0
   18ec8:	bne	18eb0 <__assert_fail@plt+0x620c>
   18ecc:	ldrb	r3, [r2, #8]
   18ed0:	orr	r3, r3, #2
   18ed4:	strb	r3, [r2, #8]
   18ed8:	pop	{r4, r5, r6, r7, r8, pc}
   18edc:	cmp	r2, #0
   18ee0:	bne	18eec <__assert_fail@plt+0x6248>
   18ee4:	ldr	r0, [pc, #8]	; 18ef4 <__assert_fail@plt+0x6250>
   18ee8:	pop	{r4, r5, r6, r7, r8, pc}
   18eec:	add	r0, r2, #12
   18ef0:	pop	{r4, r5, r6, r7, r8, pc}
   18ef4:	andeq	r1, r3, r8, ror #15
   18ef8:	ldr	r3, [r0, #4]
   18efc:	push	{r4, lr}
   18f00:	cmp	r3, #1
   18f04:	bne	18fe8 <__assert_fail@plt+0x6344>
   18f08:	ldrb	r3, [r0, #8]
   18f0c:	add	lr, r0, #12
   18f10:	tst	r3, #2
   18f14:	bne	18f50 <__assert_fail@plt+0x62ac>
   18f18:	ldrb	r3, [r0, #12]
   18f1c:	cmp	r3, #0
   18f20:	movne	r2, lr
   18f24:	beq	18f44 <__assert_fail@plt+0x62a0>
   18f28:	sub	ip, r3, #65	; 0x41
   18f2c:	cmp	ip, #25
   18f30:	add	r3, r3, #32
   18f34:	strbls	r3, [r2]
   18f38:	ldrb	r3, [r2, #1]!
   18f3c:	cmp	r3, #0
   18f40:	bne	18f28 <__assert_fail@plt+0x6284>
   18f44:	ldrb	r3, [r0, #8]
   18f48:	orr	r3, r3, #2
   18f4c:	strb	r3, [r0, #8]
   18f50:	ldr	r3, [r0]
   18f54:	cmp	r3, #0
   18f58:	beq	18fe8 <__assert_fail@plt+0x6344>
   18f5c:	ldr	r2, [r3, #4]
   18f60:	cmp	r2, #4
   18f64:	bne	18fe8 <__assert_fail@plt+0x6344>
   18f68:	ldrb	r2, [r3, #12]
   18f6c:	cmp	r2, #47	; 0x2f
   18f70:	bne	18fe8 <__assert_fail@plt+0x6344>
   18f74:	ldr	r0, [r3]
   18f78:	cmp	r0, #0
   18f7c:	beq	18fe8 <__assert_fail@plt+0x6344>
   18f80:	ldr	r3, [r0, #4]
   18f84:	cmp	r3, #1
   18f88:	bne	18fe8 <__assert_fail@plt+0x6344>
   18f8c:	cmp	r1, #0
   18f90:	beq	18fec <__assert_fail@plt+0x6348>
   18f94:	ldrb	r3, [r0, #8]
   18f98:	add	r4, r0, #12
   18f9c:	tst	r3, #2
   18fa0:	bne	18fdc <__assert_fail@plt+0x6338>
   18fa4:	ldrb	r3, [r0, #12]
   18fa8:	cmp	r3, #0
   18fac:	movne	r2, r4
   18fb0:	beq	18fd0 <__assert_fail@plt+0x632c>
   18fb4:	sub	ip, r3, #65	; 0x41
   18fb8:	cmp	ip, #25
   18fbc:	add	r3, r3, #32
   18fc0:	strbls	r3, [r2]
   18fc4:	ldrb	r3, [r2, #1]!
   18fc8:	cmp	r3, #0
   18fcc:	bne	18fb4 <__assert_fail@plt+0x6310>
   18fd0:	ldrb	r3, [r0, #8]
   18fd4:	orr	r3, r3, #2
   18fd8:	strb	r3, [r0, #8]
   18fdc:	str	r4, [r1]
   18fe0:	mov	r0, lr
   18fe4:	pop	{r4, pc}
   18fe8:	mov	lr, #0
   18fec:	mov	r0, lr
   18ff0:	pop	{r4, pc}
   18ff4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ff8:	mov	r4, r0
   18ffc:	ldr	r5, [r0, #12]
   19000:	mov	r8, r1
   19004:	cmp	r5, #0
   19008:	mov	r7, r2
   1900c:	beq	1905c <__assert_fail@plt+0x63b8>
   19010:	cmp	r2, #2
   19014:	bhi	191a4 <__assert_fail@plt+0x6500>
   19018:	ldr	r3, [r4, #16]
   1901c:	cmp	r3, #0
   19020:	beq	19198 <__assert_fail@plt+0x64f4>
   19024:	ldr	r3, [r4]
   19028:	cmp	r3, #0
   1902c:	beq	19198 <__assert_fail@plt+0x64f4>
   19030:	ldr	r2, [r4, #8]
   19034:	cmp	r2, #0
   19038:	bne	19198 <__assert_fail@plt+0x64f4>
   1903c:	mov	r2, r4
   19040:	mov	r1, #12
   19044:	ldr	r0, [r4, #4]
   19048:	blx	r3
   1904c:	subs	r5, r0, #0
   19050:	beq	1919c <__assert_fail@plt+0x64f8>
   19054:	str	r5, [r4, #8]
   19058:	b	1919c <__assert_fail@plt+0x64f8>
   1905c:	ldr	r3, [r0, #24]
   19060:	cmp	r3, #0
   19064:	beq	193ac <__assert_fail@plt+0x6708>
   19068:	cmp	r2, #0
   1906c:	beq	19328 <__assert_fail@plt+0x6684>
   19070:	ldr	r3, [r3, #8]
   19074:	cmp	r3, #0
   19078:	beq	192f4 <__assert_fail@plt+0x6650>
   1907c:	ldr	fp, [pc, #1372]	; 195e0 <__assert_fail@plt+0x693c>
   19080:	mov	r6, r8
   19084:	add	sl, r7, r8
   19088:	mov	r5, #0
   1908c:	ldrb	r1, [r6]
   19090:	mov	r0, fp
   19094:	bl	128fc <strchr@plt>
   19098:	mov	r9, r6
   1909c:	add	r6, r6, #1
   190a0:	cmp	r0, #0
   190a4:	moveq	r5, r0
   190a8:	beq	190b4 <__assert_fail@plt+0x6410>
   190ac:	cmp	r5, #0
   190b0:	moveq	r5, r9
   190b4:	cmp	r6, sl
   190b8:	bne	1908c <__assert_fail@plt+0x63e8>
   190bc:	cmp	r5, #0
   190c0:	subne	r7, r5, r8
   190c4:	add	r0, r7, #12
   190c8:	bl	127f4 <malloc@plt>
   190cc:	subs	r5, r0, #0
   190d0:	beq	194f4 <__assert_fail@plt+0x6850>
   190d4:	ldrb	r6, [r8]
   190d8:	mov	sl, #0
   190dc:	add	r9, r5, #8
   190e0:	cmp	r6, #9
   190e4:	cmpne	r6, #32
   190e8:	moveq	r6, #1
   190ec:	movne	r6, #0
   190f0:	str	r6, [r5, #4]
   190f4:	str	sl, [r5]
   190f8:	mov	r0, r9
   190fc:	mov	r2, r7
   19100:	mov	r1, r8
   19104:	bl	125b4 <memcpy@plt>
   19108:	add	r3, r5, r7
   1910c:	cmp	r6, sl
   19110:	strb	sl, [r3, #8]
   19114:	bne	19134 <__assert_fail@plt+0x6490>
   19118:	mov	r1, #58	; 0x3a
   1911c:	mov	r0, r8
   19120:	bl	128fc <strchr@plt>
   19124:	cmp	r0, sl
   19128:	beq	19134 <__assert_fail@plt+0x6490>
   1912c:	mov	r0, r9
   19130:	bl	18334 <__assert_fail@plt+0x5690>
   19134:	ldr	r3, [r4, #24]
   19138:	cmp	r7, #8
   1913c:	ldr	r2, [r3, #12]
   19140:	str	r5, [r2]
   19144:	str	r5, [r3, #12]
   19148:	bls	19198 <__assert_fail@plt+0x64f4>
   1914c:	mov	r0, r8
   19150:	mov	r2, #9
   19154:	ldr	r1, [pc, #1160]	; 195e4 <__assert_fail@plt+0x6940>
   19158:	bl	125f0 <memcmp@plt>
   1915c:	cmp	r0, #0
   19160:	bne	19198 <__assert_fail@plt+0x64f4>
   19164:	ldr	r3, [r4]
   19168:	cmp	r3, #0
   1916c:	beq	19198 <__assert_fail@plt+0x64f4>
   19170:	ldr	r5, [r4, #8]
   19174:	cmp	r5, #0
   19178:	bne	19198 <__assert_fail@plt+0x64f4>
   1917c:	mov	r2, r4
   19180:	mov	r1, #6
   19184:	ldr	r0, [r4, #4]
   19188:	blx	r3
   1918c:	cmp	r0, #0
   19190:	strne	r0, [r4, #8]
   19194:	bne	1919c <__assert_fail@plt+0x64f8>
   19198:	mov	r5, #0
   1919c:	mov	r0, r5
   191a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191a4:	ldrb	r3, [r1]
   191a8:	cmp	r3, #45	; 0x2d
   191ac:	bne	19018 <__assert_fail@plt+0x6374>
   191b0:	ldrb	r3, [r1, #1]
   191b4:	cmp	r3, #45	; 0x2d
   191b8:	bne	19018 <__assert_fail@plt+0x6374>
   191bc:	ldr	r6, [r0, #28]
   191c0:	cmp	r6, #0
   191c4:	beq	19018 <__assert_fail@plt+0x6374>
   191c8:	mov	r0, r6
   191cc:	bl	128d8 <strlen@plt>
   191d0:	add	r3, r0, #2
   191d4:	cmp	r7, r3
   191d8:	mov	r9, r0
   191dc:	beq	19490 <__assert_fail@plt+0x67ec>
   191e0:	add	r3, r9, #4
   191e4:	cmp	r7, r3
   191e8:	bne	19018 <__assert_fail@plt+0x6374>
   191ec:	add	r7, r8, r7
   191f0:	ldrb	r3, [r7, #-2]
   191f4:	cmp	r3, #45	; 0x2d
   191f8:	bne	19018 <__assert_fail@plt+0x6374>
   191fc:	ldrb	r3, [r7, #-1]
   19200:	cmp	r3, #45	; 0x2d
   19204:	bne	19018 <__assert_fail@plt+0x6374>
   19208:	mov	r2, r9
   1920c:	mov	r1, r6
   19210:	add	r0, r8, #2
   19214:	bl	125f0 <memcmp@plt>
   19218:	subs	r5, r0, #0
   1921c:	bne	19018 <__assert_fail@plt+0x6374>
   19220:	ldr	r3, [r4]
   19224:	cmp	r3, #0
   19228:	beq	19250 <__assert_fail@plt+0x65ac>
   1922c:	ldr	r2, [r4, #8]
   19230:	cmp	r2, #0
   19234:	bne	19250 <__assert_fail@plt+0x65ac>
   19238:	mov	r2, r4
   1923c:	mov	r1, #10
   19240:	ldr	r0, [r4, #4]
   19244:	blx	r3
   19248:	subs	r5, r0, #0
   1924c:	strne	r5, [r4, #8]
   19250:	ldr	r2, [r4, #24]
   19254:	mov	r3, #0
   19258:	cmp	r2, r3
   1925c:	str	r3, [r4, #28]
   19260:	beq	1957c <__assert_fail@plt+0x68d8>
   19264:	ldr	r6, [r4, #20]
   19268:	mov	r1, r2
   1926c:	mov	r0, r6
   19270:	bl	1807c <__assert_fail@plt+0x53d8>
   19274:	subs	r1, r0, #0
   19278:	beq	192b8 <__assert_fail@plt+0x6614>
   1927c:	ldr	r3, [r1, #4]
   19280:	cmp	r3, #0
   19284:	bne	19298 <__assert_fail@plt+0x65f4>
   19288:	b	19590 <__assert_fail@plt+0x68ec>
   1928c:	ldr	r3, [r3]
   19290:	cmp	r3, #0
   19294:	beq	19590 <__assert_fail@plt+0x68ec>
   19298:	cmp	r2, r3
   1929c:	bne	1928c <__assert_fail@plt+0x65e8>
   192a0:	str	r1, [r4, #24]
   192a4:	mov	r0, r6
   192a8:	bl	1807c <__assert_fail@plt+0x53d8>
   192ac:	cmp	r0, #0
   192b0:	ldrne	r0, [r0, #16]
   192b4:	str	r0, [r4, #28]
   192b8:	cmp	r5, #0
   192bc:	bne	1919c <__assert_fail@plt+0x64f8>
   192c0:	ldr	r3, [r4]
   192c4:	cmp	r3, #0
   192c8:	beq	1919c <__assert_fail@plt+0x64f8>
   192cc:	ldr	r2, [r4, #8]
   192d0:	cmp	r2, #0
   192d4:	bne	19198 <__assert_fail@plt+0x64f4>
   192d8:	mov	r2, r4
   192dc:	mov	r1, #8
   192e0:	ldr	r0, [r4, #4]
   192e4:	blx	r3
   192e8:	subs	r5, r0, #0
   192ec:	beq	19018 <__assert_fail@plt+0x6374>
   192f0:	b	19054 <__assert_fail@plt+0x63b0>
   192f4:	ldr	r3, [r0]
   192f8:	cmp	r3, #0
   192fc:	beq	1907c <__assert_fail@plt+0x63d8>
   19300:	ldr	r2, [r0, #8]
   19304:	cmp	r2, #0
   19308:	bne	1907c <__assert_fail@plt+0x63d8>
   1930c:	mov	r2, r0
   19310:	mov	r1, #11
   19314:	ldr	r0, [r0, #4]
   19318:	blx	r3
   1931c:	cmp	r0, #0
   19320:	strne	r0, [r4, #8]
   19324:	b	1907c <__assert_fail@plt+0x63d8>
   19328:	ldr	r3, [r0]
   1932c:	mov	r2, #1
   19330:	cmp	r3, #0
   19334:	str	r2, [r0, #12]
   19338:	beq	19368 <__assert_fail@plt+0x66c4>
   1933c:	ldr	r2, [r0, #8]
   19340:	cmp	r2, #0
   19344:	bne	19368 <__assert_fail@plt+0x66c4>
   19348:	mov	r2, r0
   1934c:	mov	r1, #4
   19350:	ldr	r0, [r0, #4]
   19354:	blx	r3
   19358:	cmp	r0, #0
   1935c:	strne	r0, [r4, #8]
   19360:	movne	r5, r0
   19364:	bne	1919c <__assert_fail@plt+0x64f8>
   19368:	mvn	r2, #0
   1936c:	ldr	r1, [pc, #628]	; 195e8 <__assert_fail@plt+0x6944>
   19370:	mov	r0, r4
   19374:	bl	187b0 <__assert_fail@plt+0x5b0c>
   19378:	subs	r6, r0, #0
   1937c:	beq	19198 <__assert_fail@plt+0x64f4>
   19380:	mov	r1, #0
   19384:	bl	18ef8 <__assert_fail@plt+0x6254>
   19388:	cmp	r0, #0
   1938c:	beq	193a0 <__assert_fail@plt+0x66fc>
   19390:	ldr	r1, [pc, #596]	; 195ec <__assert_fail@plt+0x6948>
   19394:	bl	124b8 <strcmp@plt>
   19398:	subs	r2, r0, #0
   1939c:	beq	193c0 <__assert_fail@plt+0x671c>
   193a0:	mov	r0, r6
   193a4:	bl	181a4 <__assert_fail@plt+0x5500>
   193a8:	b	1919c <__assert_fail@plt+0x64f8>
   193ac:	ldr	r3, [pc, #572]	; 195f0 <__assert_fail@plt+0x694c>
   193b0:	ldr	r2, [pc, #572]	; 195f4 <__assert_fail@plt+0x6950>
   193b4:	ldr	r1, [pc, #572]	; 195f8 <__assert_fail@plt+0x6954>
   193b8:	ldr	r0, [pc, #572]	; 195fc <__assert_fail@plt+0x6958>
   193bc:	bl	12ca4 <__assert_fail@plt>
   193c0:	ldr	r1, [pc, #568]	; 19600 <__assert_fail@plt+0x695c>
   193c4:	mov	r0, r6
   193c8:	bl	18d64 <__assert_fail@plt+0x60c0>
   193cc:	subs	r8, r0, #0
   193d0:	beq	193a0 <__assert_fail@plt+0x66fc>
   193d4:	ldr	r7, [r4, #24]
   193d8:	ldr	r9, [r7, #16]
   193dc:	cmp	r9, #0
   193e0:	bne	195a4 <__assert_fail@plt+0x6900>
   193e4:	bl	128d8 <strlen@plt>
   193e8:	add	r0, r0, #1
   193ec:	bl	127f4 <malloc@plt>
   193f0:	cmp	r0, #0
   193f4:	str	r0, [r7, #16]
   193f8:	beq	193a0 <__assert_fail@plt+0x66fc>
   193fc:	mov	r1, r8
   19400:	bl	12764 <strcpy@plt>
   19404:	ldr	r3, [r7, #16]
   19408:	mov	r1, #20
   1940c:	str	r3, [r4, #28]
   19410:	mov	r0, #1
   19414:	bl	12428 <calloc@plt>
   19418:	subs	r8, r0, #0
   1941c:	beq	1955c <__assert_fail@plt+0x68b8>
   19420:	ldr	r5, [r4]
   19424:	add	r3, r8, #8
   19428:	cmp	r5, #0
   1942c:	str	r3, [r8, #12]
   19430:	beq	19460 <__assert_fail@plt+0x67bc>
   19434:	ldr	r3, [r4, #8]
   19438:	cmp	r3, #0
   1943c:	movne	r5, r9
   19440:	bne	19460 <__assert_fail@plt+0x67bc>
   19444:	mov	r2, r4
   19448:	mov	r1, #7
   1944c:	ldr	r0, [r4, #4]
   19450:	blx	r5
   19454:	ldr	r7, [r4, #24]
   19458:	subs	r5, r0, #0
   1945c:	strne	r5, [r4, #8]
   19460:	ldr	r3, [r7, #4]
   19464:	cmp	r3, #0
   19468:	moveq	r3, #1
   1946c:	streq	r8, [r7, #4]
   19470:	streq	r8, [r4, #24]
   19474:	streq	r3, [r4, #16]
   19478:	beq	193a0 <__assert_fail@plt+0x66fc>
   1947c:	ldr	r3, [pc, #384]	; 19604 <__assert_fail@plt+0x6960>
   19480:	mov	r2, #440	; 0x1b8
   19484:	ldr	r1, [pc, #364]	; 195f8 <__assert_fail@plt+0x6954>
   19488:	ldr	r0, [pc, #376]	; 19608 <__assert_fail@plt+0x6964>
   1948c:	bl	12ca4 <__assert_fail@plt>
   19490:	mov	r2, r0
   19494:	mov	r1, r6
   19498:	add	r0, r8, #2
   1949c:	bl	125f0 <memcmp@plt>
   194a0:	subs	r5, r0, #0
   194a4:	bne	191e0 <__assert_fail@plt+0x653c>
   194a8:	ldr	r3, [r4]
   194ac:	cmp	r3, #0
   194b0:	beq	194fc <__assert_fail@plt+0x6858>
   194b4:	ldr	r2, [r4, #8]
   194b8:	cmp	r2, #0
   194bc:	bne	194fc <__assert_fail@plt+0x6858>
   194c0:	mov	r2, r4
   194c4:	mov	r1, #9
   194c8:	ldr	r0, [r4, #4]
   194cc:	blx	r3
   194d0:	cmp	r0, #0
   194d4:	beq	194fc <__assert_fail@plt+0x6858>
   194d8:	mov	r3, #0
   194dc:	str	r0, [r4, #8]
   194e0:	mov	r5, r0
   194e4:	str	r3, [r4, #12]
   194e8:	str	r3, [r4, #16]
   194ec:	b	1919c <__assert_fail@plt+0x64f8>
   194f0:	str	r0, [r4, #16]
   194f4:	mvn	r5, #0
   194f8:	b	1919c <__assert_fail@plt+0x64f8>
   194fc:	ldr	r2, [r4, #16]
   19500:	mov	r3, #0
   19504:	cmp	r2, r3
   19508:	str	r3, [r4, #12]
   1950c:	strne	r3, [r4, #16]
   19510:	bne	1919c <__assert_fail@plt+0x64f8>
   19514:	ldr	r7, [r4, #24]
   19518:	cmp	r7, #0
   1951c:	beq	195cc <__assert_fail@plt+0x6928>
   19520:	ldr	r6, [r7]
   19524:	cmp	r6, #0
   19528:	bne	195b8 <__assert_fail@plt+0x6914>
   1952c:	mov	r1, #20
   19530:	mov	r0, #1
   19534:	bl	12428 <calloc@plt>
   19538:	cmp	r0, #0
   1953c:	beq	194f0 <__assert_fail@plt+0x684c>
   19540:	add	r3, r0, #8
   19544:	str	r3, [r0, #12]
   19548:	mov	r5, r6
   1954c:	str	r0, [r7]
   19550:	str	r0, [r4, #24]
   19554:	str	r6, [r4, #16]
   19558:	b	1919c <__assert_fail@plt+0x64f8>
   1955c:	bl	12968 <__errno_location@plt>
   19560:	mvn	r5, #0
   19564:	ldr	r7, [r0]
   19568:	mov	r4, r0
   1956c:	mov	r0, r6
   19570:	bl	181a4 <__assert_fail@plt+0x5500>
   19574:	str	r7, [r4]
   19578:	b	1919c <__assert_fail@plt+0x64f8>
   1957c:	ldr	r3, [pc, #136]	; 1960c <__assert_fail@plt+0x6968>
   19580:	ldr	r2, [pc, #136]	; 19610 <__assert_fail@plt+0x696c>
   19584:	ldr	r1, [pc, #108]	; 195f8 <__assert_fail@plt+0x6954>
   19588:	ldr	r0, [pc, #108]	; 195fc <__assert_fail@plt+0x6958>
   1958c:	bl	12ca4 <__assert_fail@plt>
   19590:	ldr	r3, [pc, #116]	; 1960c <__assert_fail@plt+0x6968>
   19594:	ldr	r2, [pc, #120]	; 19614 <__assert_fail@plt+0x6970>
   19598:	ldr	r1, [pc, #88]	; 195f8 <__assert_fail@plt+0x6954>
   1959c:	ldr	r0, [pc, #116]	; 19618 <__assert_fail@plt+0x6974>
   195a0:	bl	12ca4 <__assert_fail@plt>
   195a4:	ldr	r3, [pc, #88]	; 19604 <__assert_fail@plt+0x6960>
   195a8:	ldr	r2, [pc, #108]	; 1961c <__assert_fail@plt+0x6978>
   195ac:	ldr	r1, [pc, #68]	; 195f8 <__assert_fail@plt+0x6954>
   195b0:	ldr	r0, [pc, #104]	; 19620 <__assert_fail@plt+0x697c>
   195b4:	bl	12ca4 <__assert_fail@plt>
   195b8:	ldr	r3, [pc, #100]	; 19624 <__assert_fail@plt+0x6980>
   195bc:	ldr	r2, [pc, #100]	; 19628 <__assert_fail@plt+0x6984>
   195c0:	ldr	r1, [pc, #48]	; 195f8 <__assert_fail@plt+0x6954>
   195c4:	ldr	r0, [pc, #96]	; 1962c <__assert_fail@plt+0x6988>
   195c8:	bl	12ca4 <__assert_fail@plt>
   195cc:	ldr	r3, [pc, #80]	; 19624 <__assert_fail@plt+0x6980>
   195d0:	ldr	r2, [pc, #88]	; 19630 <__assert_fail@plt+0x698c>
   195d4:	ldr	r1, [pc, #28]	; 195f8 <__assert_fail@plt+0x6954>
   195d8:	ldr	r0, [pc, #28]	; 195fc <__assert_fail@plt+0x6958>
   195dc:	bl	12ca4 <__assert_fail@plt>
   195e0:	andeq	r2, r3, r4, lsl r0
   195e4:	andeq	r2, r3, ip, lsl r0
   195e8:	andeq	r0, r3, r4, lsr r8
   195ec:	andeq	r1, r3, r4, asr ip
   195f0:	andeq	r1, r3, r8, lsl #30
   195f4:	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   195f8:	andeq	r1, r3, ip, lsl #31
   195fc:	andeq	r1, r3, r8, lsr #31
   19600:	andeq	r1, r3, ip, ror #31
   19604:	andeq	r1, r3, r8, lsl pc
   19608:	strdeq	r1, [r3], -r8
   1960c:	andeq	r1, r3, ip, ror #29
   19610:	andeq	r0, r0, r6, ror r1
   19614:	andeq	r0, r0, r1, lsl #3
   19618:	andeq	r2, r3, r8, lsr #32
   1961c:	andeq	r0, r0, r7, lsr #3
   19620:	ldrdeq	r1, [r3], -r8
   19624:	ldrdeq	r1, [r3], -r4
   19628:	andeq	r0, r0, lr, asr #3
   1962c:			; <UNDEFINED> instruction: 0x00031fbc
   19630:	andeq	r0, r0, sp, asr #3
   19634:	push	{r4, r5, r6, r7, r8, r9, lr}
   19638:	mov	r4, r0
   1963c:	ldr	r6, [pc, #2096]	; 19e74 <__assert_fail@plt+0x71d0>
   19640:	ldrb	r0, [r0, #48]	; 0x30
   19644:	sub	sp, sp, #20
   19648:	ldr	r3, [r6]
   1964c:	tst	r0, #32
   19650:	mov	r7, r2
   19654:	str	r2, [r4, #28]
   19658:	mov	r5, r1
   1965c:	str	r3, [sp, #12]
   19660:	beq	19680 <__assert_fail@plt+0x69dc>
   19664:	sub	r3, r1, #1
   19668:	cmp	r3, #12
   1966c:	ldr	r0, [pc, #2052]	; 19e78 <__assert_fail@plt+0x71d4>
   19670:	ldrls	r2, [pc, #2052]	; 19e7c <__assert_fail@plt+0x71d8>
   19674:	ldrhi	r1, [pc, #2052]	; 19e80 <__assert_fail@plt+0x71dc>
   19678:	ldrls	r1, [r2, r3, lsl #2]
   1967c:	bl	21e08 <__assert_fail@plt+0xf164>
   19680:	cmp	r5, #4
   19684:	cmpne	r5, #11
   19688:	bne	19824 <__assert_fail@plt+0x6b80>
   1968c:	ldr	r3, [r4, #44]	; 0x2c
   19690:	cmp	r3, #6
   19694:	beq	1988c <__assert_fail@plt+0x6be8>
   19698:	cmp	r5, #1
   1969c:	beq	19858 <__assert_fail@plt+0x6bb4>
   196a0:	cmp	r5, #4
   196a4:	bne	1982c <__assert_fail@plt+0x6b88>
   196a8:	ldrb	r3, [r4, #48]	; 0x30
   196ac:	ldr	r2, [r4, #4]
   196b0:	bic	r3, r3, #14
   196b4:	cmp	r2, #0
   196b8:	strb	r3, [r4, #48]	; 0x30
   196bc:	beq	196d4 <__assert_fail@plt+0x6a30>
   196c0:	ldr	r1, [r4, #36]	; 0x24
   196c4:	ldr	r0, [r4]
   196c8:	blx	r2
   196cc:	subs	r5, r0, #0
   196d0:	bne	19808 <__assert_fail@plt+0x6b64>
   196d4:	mvn	r2, #0
   196d8:	ldr	r1, [pc, #1956]	; 19e84 <__assert_fail@plt+0x71e0>
   196dc:	mov	r0, r7
   196e0:	bl	187b0 <__assert_fail@plt+0x5b0c>
   196e4:	subs	r5, r0, #0
   196e8:	beq	198ec <__assert_fail@plt+0x6c48>
   196ec:	add	r1, sp, #8
   196f0:	bl	18ef8 <__assert_fail@plt+0x6254>
   196f4:	ldrb	r3, [r4, #48]	; 0x30
   196f8:	subs	r8, r0, #0
   196fc:	beq	19af8 <__assert_fail@plt+0x6e54>
   19700:	tst	r3, #16
   19704:	bne	19a78 <__assert_fail@plt+0x6dd4>
   19708:	ldr	r3, [r4, #44]	; 0x2c
   1970c:	cmp	r3, #1
   19710:	beq	19a34 <__assert_fail@plt+0x6d90>
   19714:	cmp	r3, #3
   19718:	beq	19be4 <__assert_fail@plt+0x6f40>
   1971c:	cmp	r3, #8
   19720:	beq	19cb0 <__assert_fail@plt+0x700c>
   19724:	ldr	r1, [pc, #1884]	; 19e88 <__assert_fail@plt+0x71e4>
   19728:	mov	r0, r8
   1972c:	bl	124b8 <strcmp@plt>
   19730:	cmp	r0, #0
   19734:	bne	19764 <__assert_fail@plt+0x6ac0>
   19738:	ldr	r9, [sp, #8]
   1973c:	ldr	r1, [pc, #1864]	; 19e8c <__assert_fail@plt+0x71e8>
   19740:	mov	r0, r9
   19744:	bl	124b8 <strcmp@plt>
   19748:	subs	r2, r0, #0
   1974c:	beq	19d38 <__assert_fail@plt+0x7094>
   19750:	mov	r0, r9
   19754:	ldr	r1, [pc, #1844]	; 19e90 <__assert_fail@plt+0x71ec>
   19758:	bl	124b8 <strcmp@plt>
   1975c:	cmp	r0, #0
   19760:	beq	19db8 <__assert_fail@plt+0x7114>
   19764:	ldr	r3, [r4, #8]
   19768:	cmp	r3, #0
   1976c:	beq	19798 <__assert_fail@plt+0x6af4>
   19770:	mov	r1, r8
   19774:	ldr	r2, [sp, #8]
   19778:	ldr	r0, [r4]
   1977c:	blx	r3
   19780:	cmp	r0, #0
   19784:	str	r0, [r4, #32]
   19788:	bne	19b28 <__assert_fail@plt+0x6e84>
   1978c:	ldrb	r3, [r4, #48]	; 0x30
   19790:	orr	r3, r3, #2
   19794:	strb	r3, [r4, #48]	; 0x30
   19798:	mov	r0, r5
   1979c:	bl	18d58 <__assert_fail@plt+0x60b4>
   197a0:	ldrb	r3, [r4, #48]	; 0x30
   197a4:	ands	r5, r3, #12
   197a8:	beq	19808 <__assert_fail@plt+0x6b64>
   197ac:	bic	r3, r3, #12
   197b0:	strb	r3, [r4, #48]	; 0x30
   197b4:	mov	r0, r7
   197b8:	add	r3, sp, #8
   197bc:	mvn	r2, #0
   197c0:	ldr	r1, [pc, #1740]	; 19e94 <__assert_fail@plt+0x71f0>
   197c4:	bl	1861c <__assert_fail@plt+0x5978>
   197c8:	subs	r8, r0, #0
   197cc:	moveq	r5, r8
   197d0:	beq	19808 <__assert_fail@plt+0x6b64>
   197d4:	ldr	r7, [sp, #8]
   197d8:	ldr	r1, [pc, #1720]	; 19e98 <__assert_fail@plt+0x71f4>
   197dc:	add	r7, r8, r7
   197e0:	mov	r0, r7
   197e4:	bl	126bc <strcasecmp@plt>
   197e8:	subs	r5, r0, #0
   197ec:	bne	19b78 <__assert_fail@plt+0x6ed4>
   197f0:	ldrb	r3, [r4, #48]	; 0x30
   197f4:	bic	r3, r3, #8
   197f8:	orr	r3, r3, #4
   197fc:	strb	r3, [r4, #48]	; 0x30
   19800:	mov	r0, r8
   19804:	bl	12560 <free@plt>
   19808:	ldrb	r3, [r4, #56]	; 0x38
   1980c:	mov	r2, #1
   19810:	str	r2, [r4, #52]	; 0x34
   19814:	bic	r3, r3, #3
   19818:	orr	r3, r3, #2
   1981c:	strb	r3, [r4, #56]	; 0x38
   19820:	b	19868 <__assert_fail@plt+0x6bc4>
   19824:	cmp	r5, #1
   19828:	beq	19858 <__assert_fail@plt+0x6bb4>
   1982c:	cmp	r5, #12
   19830:	beq	198d8 <__assert_fail@plt+0x6c34>
   19834:	cmp	r5, #7
   19838:	beq	198b8 <__assert_fail@plt+0x6c14>
   1983c:	cmp	r5, #8
   19840:	beq	19958 <__assert_fail@plt+0x6cb4>
   19844:	sub	r3, r5, #9
   19848:	cmp	r3, #1
   1984c:	bls	1998c <__assert_fail@plt+0x6ce8>
   19850:	mov	r5, #0
   19854:	b	19868 <__assert_fail@plt+0x6bc4>
   19858:	ldrb	r3, [r4, #56]	; 0x38
   1985c:	mov	r5, #0
   19860:	orr	r3, r3, #1
   19864:	strb	r3, [r4, #56]	; 0x38
   19868:	ldr	r1, [sp, #12]
   1986c:	ldr	r2, [r6]
   19870:	mov	r3, #0
   19874:	cmp	r1, r2
   19878:	mov	r0, r5
   1987c:	str	r3, [r4, #28]
   19880:	bne	19e70 <__assert_fail@plt+0x71cc>
   19884:	add	sp, sp, #20
   19888:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1988c:	ldrb	r3, [r4, #48]	; 0x30
   19890:	tst	r3, #32
   19894:	bne	19980 <__assert_fail@plt+0x6cdc>
   19898:	ldrb	r3, [r4, #48]	; 0x30
   1989c:	ldr	r1, [r4, #36]	; 0x24
   198a0:	mov	r2, #7
   198a4:	bic	r3, r3, #1
   198a8:	strb	r3, [r4, #48]	; 0x30
   198ac:	str	r1, [r4, #40]	; 0x28
   198b0:	str	r2, [r4, #44]	; 0x2c
   198b4:	b	19698 <__assert_fail@plt+0x69f4>
   198b8:	ldrb	r3, [r4, #48]	; 0x30
   198bc:	tst	r3, #32
   198c0:	bne	19aec <__assert_fail@plt+0x6e48>
   198c4:	ldr	r3, [r4, #36]	; 0x24
   198c8:	mov	r5, #0
   198cc:	add	r3, r3, #1
   198d0:	str	r3, [r4, #36]	; 0x24
   198d4:	b	19868 <__assert_fail@plt+0x6bc4>
   198d8:	ldrb	r3, [r4, #56]	; 0x38
   198dc:	mov	r5, #0
   198e0:	orr	r3, r3, #4
   198e4:	strb	r3, [r4, #56]	; 0x38
   198e8:	b	19868 <__assert_fail@plt+0x6bc4>
   198ec:	ldrb	r3, [r4, #48]	; 0x30
   198f0:	tst	r3, #16
   198f4:	bne	19b60 <__assert_fail@plt+0x6ebc>
   198f8:	ldr	r3, [r4, #8]
   198fc:	cmp	r3, #0
   19900:	beq	197a0 <__assert_fail@plt+0x6afc>
   19904:	ldr	r2, [pc, #1424]	; 19e9c <__assert_fail@plt+0x71f8>
   19908:	ldr	r1, [pc, #1424]	; 19ea0 <__assert_fail@plt+0x71fc>
   1990c:	ldr	r0, [r4]
   19910:	blx	r3
   19914:	cmp	r0, #0
   19918:	str	r0, [r4, #32]
   1991c:	beq	19a0c <__assert_fail@plt+0x6d68>
   19920:	uxth	r0, r0
   19924:	cmp	r0, #256	; 0x100
   19928:	moveq	r3, #0
   1992c:	streq	r3, [r4, #32]
   19930:	beq	197a0 <__assert_fail@plt+0x6afc>
   19934:	cmp	r0, #255	; 0xff
   19938:	bne	197a0 <__assert_fail@plt+0x6afc>
   1993c:	ldrb	r3, [r4, #48]	; 0x30
   19940:	mov	r2, #0
   19944:	str	r2, [r4, #32]
   19948:	bic	r3, r3, #14
   1994c:	orr	r3, r3, #6
   19950:	strb	r3, [r4, #48]	; 0x30
   19954:	b	197a0 <__assert_fail@plt+0x6afc>
   19958:	ldrb	r3, [r4, #48]	; 0x30
   1995c:	tst	r3, #32
   19960:	bne	19a1c <__assert_fail@plt+0x6d78>
   19964:	ldr	r5, [r4, #36]	; 0x24
   19968:	cmp	r5, #0
   1996c:	beq	19a28 <__assert_fail@plt+0x6d84>
   19970:	sub	r5, r5, #1
   19974:	str	r5, [r4, #36]	; 0x24
   19978:	mov	r5, #0
   1997c:	b	19868 <__assert_fail@plt+0x6bc4>
   19980:	ldr	r0, [pc, #1308]	; 19ea4 <__assert_fail@plt+0x7200>
   19984:	bl	21e08 <__assert_fail@plt+0xf164>
   19988:	b	19898 <__assert_fail@plt+0x6bf4>
   1998c:	ldrb	r3, [r4, #56]	; 0x38
   19990:	ldrb	r2, [r4, #48]	; 0x30
   19994:	cmp	r5, #9
   19998:	bic	r3, r3, #10
   1999c:	orr	r3, r3, #8
   199a0:	strb	r3, [r4, #56]	; 0x38
   199a4:	and	r3, r2, #32
   199a8:	beq	19a9c <__assert_fail@plt+0x6df8>
   199ac:	cmp	r3, #0
   199b0:	bne	19c6c <__assert_fail@plt+0x6fc8>
   199b4:	ldr	r3, [r4, #44]	; 0x2c
   199b8:	cmp	r3, #4
   199bc:	beq	19ae0 <__assert_fail@plt+0x6e3c>
   199c0:	cmp	r3, #7
   199c4:	beq	19c28 <__assert_fail@plt+0x6f84>
   199c8:	cmp	r3, #9
   199cc:	beq	19c78 <__assert_fail@plt+0x6fd4>
   199d0:	tst	r2, #2
   199d4:	beq	19850 <__assert_fail@plt+0x6bac>
   199d8:	ldr	r3, [r4, #12]
   199dc:	cmp	r3, #0
   199e0:	beq	199f8 <__assert_fail@plt+0x6d54>
   199e4:	mov	r2, #0
   199e8:	mov	r1, r2
   199ec:	ldr	r0, [r4]
   199f0:	blx	r3
   199f4:	str	r0, [r4, #32]
   199f8:	ldrb	r3, [r4, #48]	; 0x30
   199fc:	mov	r5, #0
   19a00:	bic	r3, r3, #2
   19a04:	strb	r3, [r4, #48]	; 0x30
   19a08:	b	19868 <__assert_fail@plt+0x6bc4>
   19a0c:	ldrb	r3, [r4, #48]	; 0x30
   19a10:	orr	r3, r3, #2
   19a14:	strb	r3, [r4, #48]	; 0x30
   19a18:	b	197a0 <__assert_fail@plt+0x6afc>
   19a1c:	ldr	r0, [pc, #1156]	; 19ea8 <__assert_fail@plt+0x7204>
   19a20:	bl	21e08 <__assert_fail@plt+0xf164>
   19a24:	b	19964 <__assert_fail@plt+0x6cc0>
   19a28:	ldr	r0, [pc, #1148]	; 19eac <__assert_fail@plt+0x7208>
   19a2c:	bl	21cbc <__assert_fail@plt+0xf018>
   19a30:	b	19868 <__assert_fail@plt+0x6bc4>
   19a34:	ldr	r1, [pc, #1140]	; 19eb0 <__assert_fail@plt+0x720c>
   19a38:	mov	r0, r8
   19a3c:	bl	124b8 <strcmp@plt>
   19a40:	ldr	r9, [sp, #8]
   19a44:	cmp	r0, #0
   19a48:	bne	19bc4 <__assert_fail@plt+0x6f20>
   19a4c:	ldr	r1, [pc, #1120]	; 19eb4 <__assert_fail@plt+0x7210>
   19a50:	mov	r0, r9
   19a54:	bl	124b8 <strcmp@plt>
   19a58:	cmp	r0, #0
   19a5c:	bne	19bc4 <__assert_fail@plt+0x6f20>
   19a60:	ldrb	r3, [r4, #48]	; 0x30
   19a64:	tst	r3, #32
   19a68:	bne	19e08 <__assert_fail@plt+0x7164>
   19a6c:	mov	r3, #2
   19a70:	str	r3, [r4, #44]	; 0x2c
   19a74:	b	19798 <__assert_fail@plt+0x6af4>
   19a78:	ldr	r1, [r4, #36]	; 0x24
   19a7c:	ldr	r2, [sp, #8]
   19a80:	mov	r3, r8
   19a84:	str	r2, [sp]
   19a88:	lsl	r1, r1, #1
   19a8c:	ldr	r2, [pc, #1060]	; 19eb8 <__assert_fail@plt+0x7214>
   19a90:	ldr	r0, [pc, #1060]	; 19ebc <__assert_fail@plt+0x7218>
   19a94:	bl	21e08 <__assert_fail@plt+0xf164>
   19a98:	b	19708 <__assert_fail@plt+0x6a64>
   19a9c:	ldrb	r1, [r4, #56]	; 0x38
   19aa0:	mov	r0, #1
   19aa4:	cmp	r3, #0
   19aa8:	orr	r3, r1, r0
   19aac:	strb	r3, [r4, #56]	; 0x38
   19ab0:	str	r0, [r4, #52]	; 0x34
   19ab4:	beq	199b4 <__assert_fail@plt+0x6d10>
   19ab8:	ldr	r0, [pc, #1024]	; 19ec0 <__assert_fail@plt+0x721c>
   19abc:	bl	21e08 <__assert_fail@plt+0xf164>
   19ac0:	ldr	r3, [r4, #44]	; 0x2c
   19ac4:	ldrb	r2, [r4, #48]	; 0x30
   19ac8:	cmp	r3, #4
   19acc:	bne	199c0 <__assert_fail@plt+0x6d1c>
   19ad0:	tst	r2, #32
   19ad4:	beq	19ae0 <__assert_fail@plt+0x6e3c>
   19ad8:	ldr	r0, [pc, #996]	; 19ec4 <__assert_fail@plt+0x7220>
   19adc:	bl	21e08 <__assert_fail@plt+0xf164>
   19ae0:	mov	r3, #5
   19ae4:	str	r3, [r4, #44]	; 0x2c
   19ae8:	b	19850 <__assert_fail@plt+0x6bac>
   19aec:	ldr	r0, [pc, #980]	; 19ec8 <__assert_fail@plt+0x7224>
   19af0:	bl	21e08 <__assert_fail@plt+0xf164>
   19af4:	b	198c4 <__assert_fail@plt+0x6c20>
   19af8:	tst	r3, #32
   19afc:	bne	19cf4 <__assert_fail@plt+0x7050>
   19b00:	ldr	r3, [r4, #8]
   19b04:	cmp	r3, #0
   19b08:	beq	19798 <__assert_fail@plt+0x6af4>
   19b0c:	ldr	r2, [pc, #932]	; 19eb8 <__assert_fail@plt+0x7214>
   19b10:	ldr	r0, [r4]
   19b14:	mov	r1, r2
   19b18:	blx	r3
   19b1c:	cmp	r0, #0
   19b20:	str	r0, [r4, #32]
   19b24:	beq	1978c <__assert_fail@plt+0x6ae8>
   19b28:	uxth	r0, r0
   19b2c:	cmp	r0, #256	; 0x100
   19b30:	moveq	r3, #0
   19b34:	streq	r3, [r4, #32]
   19b38:	beq	19798 <__assert_fail@plt+0x6af4>
   19b3c:	cmp	r0, #255	; 0xff
   19b40:	bne	19798 <__assert_fail@plt+0x6af4>
   19b44:	ldrb	r3, [r4, #48]	; 0x30
   19b48:	mov	r2, #0
   19b4c:	str	r2, [r4, #32]
   19b50:	bic	r3, r3, #14
   19b54:	orr	r3, r3, #6
   19b58:	strb	r3, [r4, #48]	; 0x30
   19b5c:	b	19798 <__assert_fail@plt+0x6af4>
   19b60:	ldr	r1, [r4, #36]	; 0x24
   19b64:	ldr	r2, [pc, #844]	; 19eb8 <__assert_fail@plt+0x7214>
   19b68:	ldr	r0, [pc, #860]	; 19ecc <__assert_fail@plt+0x7228>
   19b6c:	lsl	r1, r1, #1
   19b70:	bl	21e08 <__assert_fail@plt+0xf164>
   19b74:	b	198f8 <__assert_fail@plt+0x6c54>
   19b78:	mov	r0, r7
   19b7c:	ldr	r1, [pc, #844]	; 19ed0 <__assert_fail@plt+0x722c>
   19b80:	bl	126bc <strcasecmp@plt>
   19b84:	cmp	r0, #0
   19b88:	movne	r5, #0
   19b8c:	bne	19800 <__assert_fail@plt+0x6b5c>
   19b90:	ldrb	r3, [r4, #48]	; 0x30
   19b94:	ldr	r0, [r4, #60]	; 0x3c
   19b98:	bic	r3, r3, #4
   19b9c:	orr	r3, r3, #8
   19ba0:	cmp	r0, #0
   19ba4:	strb	r3, [r4, #48]	; 0x30
   19ba8:	beq	19d8c <__assert_fail@plt+0x70e8>
   19bac:	bl	25ffc <__assert_fail@plt+0x13358>
   19bb0:	ldr	r0, [r4, #60]	; 0x3c
   19bb4:	mov	r1, #0
   19bb8:	bl	257e0 <__assert_fail@plt+0x12b3c>
   19bbc:	mov	r5, r0
   19bc0:	b	19800 <__assert_fail@plt+0x6b5c>
   19bc4:	mov	r3, r9
   19bc8:	mov	r2, r8
   19bcc:	ldr	r1, [pc, #768]	; 19ed4 <__assert_fail@plt+0x7230>
   19bd0:	ldr	r0, [pc, #768]	; 19ed8 <__assert_fail@plt+0x7234>
   19bd4:	bl	21cbc <__assert_fail@plt+0xf018>
   19bd8:	mov	r3, #11
   19bdc:	str	r3, [r4, #44]	; 0x2c
   19be0:	b	19798 <__assert_fail@plt+0x6af4>
   19be4:	ldr	r1, [pc, #708]	; 19eb0 <__assert_fail@plt+0x720c>
   19be8:	mov	r0, r8
   19bec:	bl	124b8 <strcmp@plt>
   19bf0:	ldr	r9, [sp, #8]
   19bf4:	cmp	r0, #0
   19bf8:	bne	19c90 <__assert_fail@plt+0x6fec>
   19bfc:	ldr	r1, [pc, #728]	; 19edc <__assert_fail@plt+0x7238>
   19c00:	mov	r0, r9
   19c04:	bl	124b8 <strcmp@plt>
   19c08:	cmp	r0, #0
   19c0c:	bne	19c90 <__assert_fail@plt+0x6fec>
   19c10:	ldrb	r3, [r4, #48]	; 0x30
   19c14:	tst	r3, #32
   19c18:	bne	19e2c <__assert_fail@plt+0x7188>
   19c1c:	mov	r3, #4
   19c20:	str	r3, [r4, #44]	; 0x2c
   19c24:	b	19798 <__assert_fail@plt+0x6af4>
   19c28:	ldr	r1, [r4, #36]	; 0x24
   19c2c:	ldr	r3, [r4, #40]	; 0x28
   19c30:	cmp	r1, r3
   19c34:	bne	199d0 <__assert_fail@plt+0x6d2c>
   19c38:	tst	r2, #32
   19c3c:	bne	19e38 <__assert_fail@plt+0x7194>
   19c40:	ldr	r3, [r4, #20]
   19c44:	mov	r2, #8
   19c48:	cmp	r3, #0
   19c4c:	str	r2, [r4, #44]	; 0x2c
   19c50:	beq	19850 <__assert_fail@plt+0x6bac>
   19c54:	mov	r1, #0
   19c58:	ldr	r0, [r4]
   19c5c:	blx	r3
   19c60:	mov	r5, #0
   19c64:	str	r0, [r4, #32]
   19c68:	b	19868 <__assert_fail@plt+0x6bc4>
   19c6c:	ldr	r0, [pc, #620]	; 19ee0 <__assert_fail@plt+0x723c>
   19c70:	bl	21e08 <__assert_fail@plt+0xf164>
   19c74:	b	19ac0 <__assert_fail@plt+0x6e1c>
   19c78:	tst	r2, #32
   19c7c:	bne	19d2c <__assert_fail@plt+0x7088>
   19c80:	mov	r3, #10
   19c84:	str	r3, [r4, #44]	; 0x2c
   19c88:	mov	r5, #0
   19c8c:	b	19868 <__assert_fail@plt+0x6bc4>
   19c90:	mov	r3, r9
   19c94:	mov	r2, r8
   19c98:	ldr	r1, [pc, #580]	; 19ee4 <__assert_fail@plt+0x7240>
   19c9c:	ldr	r0, [pc, #564]	; 19ed8 <__assert_fail@plt+0x7234>
   19ca0:	bl	21cbc <__assert_fail@plt+0xf018>
   19ca4:	mov	r3, #11
   19ca8:	str	r3, [r4, #44]	; 0x2c
   19cac:	b	19798 <__assert_fail@plt+0x6af4>
   19cb0:	ldr	r1, [pc, #504]	; 19eb0 <__assert_fail@plt+0x720c>
   19cb4:	mov	r0, r8
   19cb8:	bl	124b8 <strcmp@plt>
   19cbc:	ldr	r9, [sp, #8]
   19cc0:	cmp	r0, #0
   19cc4:	bne	19d0c <__assert_fail@plt+0x7068>
   19cc8:	ldr	r1, [pc, #536]	; 19ee8 <__assert_fail@plt+0x7244>
   19ccc:	mov	r0, r9
   19cd0:	bl	124b8 <strcmp@plt>
   19cd4:	cmp	r0, #0
   19cd8:	bne	19d0c <__assert_fail@plt+0x7068>
   19cdc:	ldrb	r3, [r4, #48]	; 0x30
   19ce0:	tst	r3, #32
   19ce4:	bne	19e44 <__assert_fail@plt+0x71a0>
   19ce8:	mov	r3, #9
   19cec:	str	r3, [r4, #44]	; 0x2c
   19cf0:	b	19798 <__assert_fail@plt+0x6af4>
   19cf4:	ldr	r1, [r4, #36]	; 0x24
   19cf8:	ldr	r2, [pc, #440]	; 19eb8 <__assert_fail@plt+0x7214>
   19cfc:	ldr	r0, [pc, #488]	; 19eec <__assert_fail@plt+0x7248>
   19d00:	lsl	r1, r1, #1
   19d04:	bl	21e08 <__assert_fail@plt+0xf164>
   19d08:	b	19b00 <__assert_fail@plt+0x6e5c>
   19d0c:	mov	r3, r9
   19d10:	mov	r2, r8
   19d14:	ldr	r1, [pc, #468]	; 19ef0 <__assert_fail@plt+0x724c>
   19d18:	ldr	r0, [pc, #440]	; 19ed8 <__assert_fail@plt+0x7234>
   19d1c:	bl	21cbc <__assert_fail@plt+0xf018>
   19d20:	mov	r3, #11
   19d24:	str	r3, [r4, #44]	; 0x2c
   19d28:	b	19798 <__assert_fail@plt+0x6af4>
   19d2c:	ldr	r0, [pc, #448]	; 19ef4 <__assert_fail@plt+0x7250>
   19d30:	bl	21e08 <__assert_fail@plt+0xf164>
   19d34:	b	19c80 <__assert_fail@plt+0x6fdc>
   19d38:	ldr	r1, [pc, #440]	; 19ef8 <__assert_fail@plt+0x7254>
   19d3c:	mov	r0, r5
   19d40:	bl	18d64 <__assert_fail@plt+0x60c0>
   19d44:	subs	r8, r0, #0
   19d48:	beq	19798 <__assert_fail@plt+0x6af4>
   19d4c:	ldrb	r3, [r4, #48]	; 0x30
   19d50:	tst	r3, #32
   19d54:	bne	19e50 <__assert_fail@plt+0x71ac>
   19d58:	mov	r0, r8
   19d5c:	ldr	r1, [pc, #368]	; 19ed4 <__assert_fail@plt+0x7230>
   19d60:	bl	124b8 <strcmp@plt>
   19d64:	cmp	r0, #0
   19d68:	bne	19e14 <__assert_fail@plt+0x7170>
   19d6c:	ldr	r3, [r4, #44]	; 0x2c
   19d70:	cmp	r3, #0
   19d74:	moveq	r3, #1
   19d78:	streq	r3, [r4, #44]	; 0x2c
   19d7c:	beq	19798 <__assert_fail@plt+0x6af4>
   19d80:	ldr	r0, [pc, #372]	; 19efc <__assert_fail@plt+0x7258>
   19d84:	bl	21cbc <__assert_fail@plt+0xf018>
   19d88:	b	19798 <__assert_fail@plt+0x6af4>
   19d8c:	mov	r0, #40	; 0x28
   19d90:	bl	12458 <gcry_malloc@plt>
   19d94:	cmp	r0, #0
   19d98:	str	r0, [r4, #60]	; 0x3c
   19d9c:	bne	19bb4 <__assert_fail@plt+0x6f10>
   19da0:	bl	12914 <gpg_err_code_from_syserror@plt>
   19da4:	uxth	r5, r0
   19da8:	cmp	r5, #0
   19dac:	bne	19800 <__assert_fail@plt+0x6b5c>
   19db0:	ldr	r0, [r4, #60]	; 0x3c
   19db4:	b	19bb4 <__assert_fail@plt+0x6f10>
   19db8:	mov	r2, #1
   19dbc:	ldr	r1, [pc, #308]	; 19ef8 <__assert_fail@plt+0x7254>
   19dc0:	mov	r0, r5
   19dc4:	bl	18d64 <__assert_fail@plt+0x60c0>
   19dc8:	subs	r8, r0, #0
   19dcc:	beq	19798 <__assert_fail@plt+0x6af4>
   19dd0:	ldrb	r3, [r4, #48]	; 0x30
   19dd4:	tst	r3, #32
   19dd8:	bne	19e60 <__assert_fail@plt+0x71bc>
   19ddc:	mov	r0, r8
   19de0:	ldr	r1, [pc, #264]	; 19ef0 <__assert_fail@plt+0x724c>
   19de4:	bl	124b8 <strcmp@plt>
   19de8:	cmp	r0, #0
   19dec:	bne	19e14 <__assert_fail@plt+0x7170>
   19df0:	ldr	r3, [r4, #44]	; 0x2c
   19df4:	cmp	r3, #0
   19df8:	bne	19d80 <__assert_fail@plt+0x70dc>
   19dfc:	mov	r3, #6
   19e00:	str	r3, [r4, #44]	; 0x2c
   19e04:	b	19798 <__assert_fail@plt+0x6af4>
   19e08:	ldr	r0, [pc, #240]	; 19f00 <__assert_fail@plt+0x725c>
   19e0c:	bl	21e08 <__assert_fail@plt+0xf164>
   19e10:	b	19a6c <__assert_fail@plt+0x6dc8>
   19e14:	ldrb	r3, [r4, #48]	; 0x30
   19e18:	tst	r3, #16
   19e1c:	beq	19798 <__assert_fail@plt+0x6af4>
   19e20:	ldr	r0, [pc, #220]	; 19f04 <__assert_fail@plt+0x7260>
   19e24:	bl	21e08 <__assert_fail@plt+0xf164>
   19e28:	b	19798 <__assert_fail@plt+0x6af4>
   19e2c:	ldr	r0, [pc, #212]	; 19f08 <__assert_fail@plt+0x7264>
   19e30:	bl	21e08 <__assert_fail@plt+0xf164>
   19e34:	b	19c1c <__assert_fail@plt+0x6f78>
   19e38:	ldr	r0, [pc, #204]	; 19f0c <__assert_fail@plt+0x7268>
   19e3c:	bl	21e08 <__assert_fail@plt+0xf164>
   19e40:	b	19c40 <__assert_fail@plt+0x6f9c>
   19e44:	ldr	r0, [pc, #196]	; 19f10 <__assert_fail@plt+0x726c>
   19e48:	bl	21e08 <__assert_fail@plt+0xf164>
   19e4c:	b	19ce8 <__assert_fail@plt+0x7044>
   19e50:	mov	r1, r8
   19e54:	ldr	r0, [pc, #184]	; 19f14 <__assert_fail@plt+0x7270>
   19e58:	bl	21e08 <__assert_fail@plt+0xf164>
   19e5c:	b	19d58 <__assert_fail@plt+0x70b4>
   19e60:	mov	r1, r8
   19e64:	ldr	r0, [pc, #172]	; 19f18 <__assert_fail@plt+0x7274>
   19e68:	bl	21e08 <__assert_fail@plt+0xf164>
   19e6c:	b	19ddc <__assert_fail@plt+0x7138>
   19e70:	bl	1262c <__stack_chk_fail@plt>
   19e74:	strdeq	r5, [r4], -r8
   19e78:	strheq	r2, [r3], -r8
   19e7c:	andeq	r2, r3, r0, rrx
   19e80:	andeq	r2, r3, r8, lsr #1
   19e84:	andeq	r0, r3, r4, lsr r8
   19e88:	andeq	r1, r3, r4, asr ip
   19e8c:	andeq	r0, r3, r4, asr r8
   19e90:	ldrdeq	r2, [r3], -ip
   19e94:	andeq	r2, r3, r0, lsr r0
   19e98:	andeq	r2, r3, ip, lsr r2
   19e9c:	andeq	r2, r3, r4, lsr r2
   19ea0:	andeq	r1, r3, r8, ror #24
   19ea4:	ldrdeq	r2, [r3], -r0
   19ea8:	andeq	r2, r3, r0, ror #4
   19eac:	andeq	r2, r3, r8, ror #4
   19eb0:	andeq	r1, r3, ip, lsr #23
   19eb4:	andeq	r0, r3, r0, asr r8
   19eb8:	andeq	r1, r3, r8, ror #15
   19ebc:	ldrdeq	r2, [r3], -ip
   19ec0:	muleq	r3, r0, r2
   19ec4:	andeq	r2, r3, r0, lsr #5
   19ec8:	andeq	r2, r3, r8, asr r2
   19ecc:	andeq	r2, r3, r0, lsl r2
   19ed0:	andeq	r2, r3, r0, asr r2
   19ed4:	andeq	r0, r3, r4, asr #16
   19ed8:	andeq	r2, r3, r4, lsl #2
   19edc:	andeq	r0, r3, r8, ror r8
   19ee0:	muleq	r3, r8, r2
   19ee4:	andeq	r0, r3, ip, ror #16
   19ee8:	strdeq	r0, [r3], -r8
   19eec:	strdeq	r2, [r3], -ip
   19ef0:	andeq	r0, r3, ip, ror #21
   19ef4:			; <UNDEFINED> instruction: 0x000322bc
   19ef8:	andeq	r2, r3, r4, ror #2
   19efc:	andeq	r2, r3, ip, lsl #3
   19f00:	strdeq	r2, [r3], -r0
   19f04:			; <UNDEFINED> instruction: 0x000321b8
   19f08:	andeq	r2, r3, ip, lsr r1
   19f0c:			; <UNDEFINED> instruction: 0x000322b0
   19f10:	andeq	r2, r3, r0, asr r1
   19f14:	andeq	r2, r3, r0, ror r1
   19f18:	andeq	r2, r3, r4, ror #3
   19f1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f20:	sub	sp, sp, #8
   19f24:	ldr	r5, [pc, #512]	; 1a12c <__assert_fail@plt+0x7488>
   19f28:	ldrb	ip, [r0, #48]	; 0x30
   19f2c:	mov	r4, r0
   19f30:	ldr	r3, [r5]
   19f34:	ands	r0, ip, #2
   19f38:	str	r3, [sp, #4]
   19f3c:	beq	19f78 <__assert_fail@plt+0x72d4>
   19f40:	ldr	r3, [r4, #12]
   19f44:	cmp	r3, #0
   19f48:	beq	1a088 <__assert_fail@plt+0x73e4>
   19f4c:	and	ip, ip, #12
   19f50:	cmp	ip, #4
   19f54:	mov	r7, r2
   19f58:	mov	r6, r1
   19f5c:	beq	19f90 <__assert_fail@plt+0x72ec>
   19f60:	cmp	ip, #8
   19f64:	beq	1a05c <__assert_fail@plt+0x73b8>
   19f68:	ldr	r2, [r2]
   19f6c:	mov	r1, r6
   19f70:	ldr	r0, [r4]
   19f74:	blx	r3
   19f78:	ldr	r2, [sp, #4]
   19f7c:	ldr	r3, [r5]
   19f80:	cmp	r2, r3
   19f84:	bne	1a114 <__assert_fail@plt+0x7470>
   19f88:	add	sp, sp, #8
   19f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f90:	ldr	r2, [r2]
   19f94:	cmp	r2, #0
   19f98:	beq	19fe8 <__assert_fail@plt+0x7344>
   19f9c:	mov	r0, r1
   19fa0:	mov	ip, #61	; 0x3d
   19fa4:	ldrb	r3, [r0]
   19fa8:	cmp	r3, #61	; 0x3d
   19fac:	addne	r0, r0, #1
   19fb0:	strbne	r3, [r1], #1
   19fb4:	beq	19fcc <__assert_fail@plt+0x7328>
   19fb8:	subs	r2, r2, #1
   19fbc:	bne	19fa4 <__assert_fail@plt+0x7300>
   19fc0:	ldr	r3, [r4, #12]
   19fc4:	sub	r2, r1, r6
   19fc8:	b	19fe8 <__assert_fail@plt+0x7344>
   19fcc:	cmp	r2, #2
   19fd0:	bhi	19ff0 <__assert_fail@plt+0x734c>
   19fd4:	beq	1a104 <__assert_fail@plt+0x7460>
   19fd8:	cmp	r2, #1
   19fdc:	bne	1a0fc <__assert_fail@plt+0x7458>
   19fe0:	ldr	r3, [r4, #12]
   19fe4:	sub	r2, r1, r6
   19fe8:	str	r2, [r7]
   19fec:	b	19f6c <__assert_fail@plt+0x72c8>
   19ff0:	ldrb	r9, [r0, #1]
   19ff4:	sub	r3, r9, #48	; 0x30
   19ff8:	bic	lr, r9, #32
   19ffc:	uxtb	r3, r3
   1a000:	sub	lr, lr, #65	; 0x41
   1a004:	cmp	r3, #9
   1a008:	cmphi	lr, #5
   1a00c:	bhi	1a090 <__assert_fail@plt+0x73ec>
   1a010:	ldrb	r8, [r0, #2]
   1a014:	sub	lr, r8, #48	; 0x30
   1a018:	bic	sl, r8, #32
   1a01c:	uxtb	lr, lr
   1a020:	sub	sl, sl, #65	; 0x41
   1a024:	cmp	lr, #9
   1a028:	cmphi	sl, #5
   1a02c:	bhi	1a090 <__assert_fail@plt+0x73ec>
   1a030:	cmp	r9, #57	; 0x39
   1a034:	bhi	1a0c8 <__assert_fail@plt+0x7424>
   1a038:	lsl	r3, r3, #4
   1a03c:	uxtb	r3, r3
   1a040:	cmp	r8, #57	; 0x39
   1a044:	bhi	1a0b4 <__assert_fail@plt+0x7410>
   1a048:	add	r3, r3, lr
   1a04c:	strb	r3, [r1], #1
   1a050:	add	r0, r0, #3
   1a054:	sub	r2, r2, #2
   1a058:	b	19fb8 <__assert_fail@plt+0x7314>
   1a05c:	ldr	r0, [r4, #60]	; 0x3c
   1a060:	cmp	r0, #0
   1a064:	beq	1a118 <__assert_fail@plt+0x7474>
   1a068:	mov	r3, sp
   1a06c:	ldr	r2, [r2]
   1a070:	bl	25844 <__assert_fail@plt+0x12ba0>
   1a074:	cmp	r0, #0
   1a078:	bne	19f78 <__assert_fail@plt+0x72d4>
   1a07c:	ldr	r3, [r4, #12]
   1a080:	ldr	r2, [sp]
   1a084:	b	19fe8 <__assert_fail@plt+0x7344>
   1a088:	mov	r0, r3
   1a08c:	b	19f78 <__assert_fail@plt+0x72d4>
   1a090:	cmp	r9, #13
   1a094:	beq	1a0e0 <__assert_fail@plt+0x743c>
   1a098:	cmp	r9, #10
   1a09c:	sub	r2, r2, #1
   1a0a0:	addeq	r0, r0, #2
   1a0a4:	beq	19fb8 <__assert_fail@plt+0x7314>
   1a0a8:	add	r0, r0, #1
   1a0ac:	strb	ip, [r1], #1
   1a0b0:	b	19fa4 <__assert_fail@plt+0x7300>
   1a0b4:	cmp	r8, #70	; 0x46
   1a0b8:	subls	lr, r8, #55	; 0x37
   1a0bc:	subhi	lr, r8, #87	; 0x57
   1a0c0:	uxtb	lr, lr
   1a0c4:	b	1a048 <__assert_fail@plt+0x73a4>
   1a0c8:	cmp	r9, #70	; 0x46
   1a0cc:	bhi	1a10c <__assert_fail@plt+0x7468>
   1a0d0:	sub	r3, r9, #55	; 0x37
   1a0d4:	lsl	r3, r3, #4
   1a0d8:	uxtb	r3, r3
   1a0dc:	b	1a040 <__assert_fail@plt+0x739c>
   1a0e0:	ldrb	r3, [r0, #2]
   1a0e4:	cmp	r3, #10
   1a0e8:	addeq	r0, r0, #3
   1a0ec:	subeq	r2, r2, #2
   1a0f0:	beq	19fb8 <__assert_fail@plt+0x7314>
   1a0f4:	sub	r2, r2, #1
   1a0f8:	b	1a0a8 <__assert_fail@plt+0x7404>
   1a0fc:	mvn	r2, #0
   1a100:	b	1a0a8 <__assert_fail@plt+0x7404>
   1a104:	ldrb	r9, [r0, #1]
   1a108:	b	1a098 <__assert_fail@plt+0x73f4>
   1a10c:	sub	r3, r9, #87	; 0x57
   1a110:	b	1a038 <__assert_fail@plt+0x7394>
   1a114:	bl	1262c <__stack_chk_fail@plt>
   1a118:	ldr	r3, [pc, #16]	; 1a130 <__assert_fail@plt+0x748c>
   1a11c:	ldr	r2, [pc, #16]	; 1a134 <__assert_fail@plt+0x7490>
   1a120:	ldr	r1, [pc, #16]	; 1a138 <__assert_fail@plt+0x7494>
   1a124:	ldr	r0, [pc, #16]	; 1a13c <__assert_fail@plt+0x7498>
   1a128:	bl	22044 <__assert_fail@plt+0xf3a0>
   1a12c:	strdeq	r5, [r4], -r8
   1a130:	muleq	r3, r4, r0
   1a134:	muleq	r0, r7, r2
   1a138:	ldrdeq	r2, [r3], -r0
   1a13c:	andeq	r2, r3, ip, ror #5
   1a140:	push	{r4, r5, r6, lr}
   1a144:	mov	r4, #0
   1a148:	str	r4, [r0]
   1a14c:	mov	r5, r0
   1a150:	mov	r6, r1
   1a154:	mov	r0, #1
   1a158:	ldr	r1, [pc, #36]	; 1a184 <__assert_fail@plt+0x74e0>
   1a15c:	bl	129bc <gcry_calloc@plt>
   1a160:	subs	r3, r0, #0
   1a164:	beq	1a178 <__assert_fail@plt+0x74d4>
   1a168:	mov	r0, r4
   1a16c:	str	r6, [r3]
   1a170:	str	r3, [r5]
   1a174:	pop	{r4, r5, r6, pc}
   1a178:	bl	12914 <gpg_err_code_from_syserror@plt>
   1a17c:	uxth	r0, r0
   1a180:	pop	{r4, r5, r6, pc}
   1a184:	andeq	r1, r0, r8, asr #7
   1a188:	push	{r4, lr}
   1a18c:	subs	r4, r0, #0
   1a190:	popeq	{r4, pc}
   1a194:	ldr	r0, [r4, #60]	; 0x3c
   1a198:	cmp	r0, #0
   1a19c:	beq	1a1ac <__assert_fail@plt+0x7508>
   1a1a0:	bl	25ffc <__assert_fail@plt+0x13358>
   1a1a4:	ldr	r0, [r4, #60]	; 0x3c
   1a1a8:	bl	125e4 <gcry_free@plt>
   1a1ac:	mov	r0, r4
   1a1b0:	pop	{r4, lr}
   1a1b4:	b	125e4 <gcry_free@plt>
   1a1b8:	cmp	r1, #0
   1a1bc:	ldrb	r3, [r0, #48]	; 0x30
   1a1c0:	bne	1a1d0 <__assert_fail@plt+0x752c>
   1a1c4:	bic	r3, r3, #48	; 0x30
   1a1c8:	strb	r3, [r0, #48]	; 0x30
   1a1cc:	bx	lr
   1a1d0:	orr	r3, r3, #16
   1a1d4:	cmp	r1, #10
   1a1d8:	strb	r3, [r0, #48]	; 0x30
   1a1dc:	uxtbgt	r3, r3
   1a1e0:	orrgt	r3, r3, #32
   1a1e4:	strbgt	r3, [r0, #48]	; 0x30
   1a1e8:	bx	lr
   1a1ec:	str	r1, [r0, #4]
   1a1f0:	bx	lr
   1a1f4:	str	r1, [r0, #8]
   1a1f8:	bx	lr
   1a1fc:	str	r1, [r0, #12]
   1a200:	bx	lr
   1a204:	str	r1, [r0, #16]
   1a208:	bx	lr
   1a20c:	str	r1, [r0, #20]
   1a210:	bx	lr
   1a214:	str	r1, [r0, #24]
   1a218:	bx	lr
   1a21c:	ldr	r0, [r0, #28]
   1a220:	bx	lr
   1a224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a228:	sub	sp, sp, #12
   1a22c:	ldr	sl, [pc, #1036]	; 1a640 <__assert_fail@plt+0x799c>
   1a230:	mov	r4, r0
   1a234:	mov	r7, r1
   1a238:	ldr	r3, [sl]
   1a23c:	mov	r1, r0
   1a240:	ldr	r0, [pc, #1020]	; 1a644 <__assert_fail@plt+0x79a0>
   1a244:	str	r3, [sp, #4]
   1a248:	bl	18494 <__assert_fail@plt+0x57f0>
   1a24c:	subs	r8, r0, #0
   1a250:	beq	1a61c <__assert_fail@plt+0x7978>
   1a254:	ldr	r9, [pc, #1004]	; 1a648 <__assert_fail@plt+0x79a4>
   1a258:	add	r5, r4, #64	; 0x40
   1a25c:	mov	r6, #0
   1a260:	mov	r2, r7
   1a264:	ldr	r1, [pc, #992]	; 1a64c <__assert_fail@plt+0x79a8>
   1a268:	mov	r0, r5
   1a26c:	bl	1292c <gpgrt_fgets@plt>
   1a270:	cmp	r0, #0
   1a274:	beq	1a5e8 <__assert_fail@plt+0x7944>
   1a278:	add	r6, r6, #1
   1a27c:	cmp	r6, #1
   1a280:	beq	1a3cc <__assert_fail@plt+0x7728>
   1a284:	mov	r0, r5
   1a288:	bl	128d8 <strlen@plt>
   1a28c:	cmp	r0, #0
   1a290:	str	r0, [sp]
   1a294:	beq	1a2b4 <__assert_fail@plt+0x7610>
   1a298:	sub	r2, r0, #1
   1a29c:	ldrb	r3, [r5, r2]
   1a2a0:	cmp	r3, #10
   1a2a4:	moveq	r3, #0
   1a2a8:	streq	r2, [sp]
   1a2ac:	strbeq	r3, [r5, r2]
   1a2b0:	beq	1a2c4 <__assert_fail@plt+0x7620>
   1a2b4:	mov	r1, r6
   1a2b8:	ldr	r0, [pc, #912]	; 1a650 <__assert_fail@plt+0x79ac>
   1a2bc:	bl	21cbc <__assert_fail@plt+0xf018>
   1a2c0:	ldr	r2, [sp]
   1a2c4:	cmp	r2, #0
   1a2c8:	beq	1a2e8 <__assert_fail@plt+0x7644>
   1a2cc:	sub	r3, r2, #1
   1a2d0:	ldrb	r1, [r5, r3]
   1a2d4:	cmp	r1, #13
   1a2d8:	moveq	r2, r3
   1a2dc:	moveq	r1, #0
   1a2e0:	streq	r3, [sp]
   1a2e4:	strbeq	r1, [r5, r3]
   1a2e8:	mov	r3, #0
   1a2ec:	str	r3, [r4, #32]
   1a2f0:	mov	r1, r5
   1a2f4:	mov	r0, r8
   1a2f8:	bl	18ff4 <__assert_fail@plt+0x6350>
   1a2fc:	cmp	r0, #0
   1a300:	bne	1a5fc <__assert_fail@plt+0x7958>
   1a304:	ldr	r0, [r4, #32]
   1a308:	cmp	r0, #0
   1a30c:	bne	1a408 <__assert_fail@plt+0x7764>
   1a310:	ldrb	r3, [r4, #56]	; 0x38
   1a314:	tst	r3, #8
   1a318:	beq	1a334 <__assert_fail@plt+0x7690>
   1a31c:	ldrb	r3, [r4, #48]	; 0x30
   1a320:	tst	r3, #32
   1a324:	bne	1a4cc <__assert_fail@plt+0x7828>
   1a328:	ldrb	r3, [r4, #56]	; 0x38
   1a32c:	bic	r3, r3, #8
   1a330:	strb	r3, [r4, #56]	; 0x38
   1a334:	ldr	r3, [r4, #52]	; 0x34
   1a338:	cmp	r3, #0
   1a33c:	subne	r3, r3, #1
   1a340:	strne	r3, [r4, #52]	; 0x34
   1a344:	bne	1a374 <__assert_fail@plt+0x76d0>
   1a348:	ldrb	r3, [r4, #56]	; 0x38
   1a34c:	tst	r3, #2
   1a350:	beq	1a430 <__assert_fail@plt+0x778c>
   1a354:	tst	r3, #4
   1a358:	ldrb	r3, [r4, #48]	; 0x30
   1a35c:	beq	1a4dc <__assert_fail@plt+0x7838>
   1a360:	tst	r3, #16
   1a364:	bne	1a5c0 <__assert_fail@plt+0x791c>
   1a368:	ldrb	r3, [r4, #56]	; 0x38
   1a36c:	bic	r3, r3, #4
   1a370:	strb	r3, [r4, #56]	; 0x38
   1a374:	ldr	r3, [r4, #44]	; 0x2c
   1a378:	cmp	r3, #2
   1a37c:	beq	1a45c <__assert_fail@plt+0x77b8>
   1a380:	cmp	r3, #4
   1a384:	beq	1a3e8 <__assert_fail@plt+0x7744>
   1a388:	cmp	r3, #5
   1a38c:	beq	1a4ac <__assert_fail@plt+0x7808>
   1a390:	cmp	r3, #7
   1a394:	beq	1a4f4 <__assert_fail@plt+0x7850>
   1a398:	cmp	r3, #9
   1a39c:	beq	1a57c <__assert_fail@plt+0x78d8>
   1a3a0:	cmp	r3, #10
   1a3a4:	bne	1a5a4 <__assert_fail@plt+0x7900>
   1a3a8:	ldr	r3, [r4, #20]
   1a3ac:	mov	r1, #0
   1a3b0:	cmp	r3, r1
   1a3b4:	str	r1, [r4, #44]	; 0x2c
   1a3b8:	beq	1a260 <__assert_fail@plt+0x75bc>
   1a3bc:	ldr	r3, [r4, #24]
   1a3c0:	ldr	r0, [r4]
   1a3c4:	blx	r3
   1a3c8:	b	1a260 <__assert_fail@plt+0x75bc>
   1a3cc:	mov	r2, #5
   1a3d0:	ldr	r1, [pc, #636]	; 1a654 <__assert_fail@plt+0x79b0>
   1a3d4:	mov	r0, r5
   1a3d8:	bl	12c2c <strncmp@plt>
   1a3dc:	cmp	r0, #0
   1a3e0:	bne	1a284 <__assert_fail@plt+0x75e0>
   1a3e4:	b	1a260 <__assert_fail@plt+0x75bc>
   1a3e8:	ldr	r3, [r4, #16]
   1a3ec:	cmp	r3, #0
   1a3f0:	beq	1a260 <__assert_fail@plt+0x75bc>
   1a3f4:	mov	r1, r5
   1a3f8:	ldr	r0, [r4]
   1a3fc:	blx	r3
   1a400:	cmp	r0, #0
   1a404:	beq	1a490 <__assert_fail@plt+0x77ec>
   1a408:	mov	fp, r0
   1a40c:	mov	r0, r8
   1a410:	bl	18538 <__assert_fail@plt+0x5894>
   1a414:	ldr	r2, [sp, #4]
   1a418:	ldr	r3, [sl]
   1a41c:	mov	r0, fp
   1a420:	cmp	r2, r3
   1a424:	bne	1a63c <__assert_fail@plt+0x7998>
   1a428:	add	sp, sp, #12
   1a42c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a430:	tst	r3, #1
   1a434:	beq	1a374 <__assert_fail@plt+0x76d0>
   1a438:	ldrb	r3, [r4, #48]	; 0x30
   1a43c:	tst	r3, #16
   1a440:	beq	1a374 <__assert_fail@plt+0x76d0>
   1a444:	mov	r1, r5
   1a448:	ldr	r0, [pc, #520]	; 1a658 <__assert_fail@plt+0x79b4>
   1a44c:	bl	21e08 <__assert_fail@plt+0xf164>
   1a450:	ldr	r3, [r4, #44]	; 0x2c
   1a454:	cmp	r3, #2
   1a458:	bne	1a380 <__assert_fail@plt+0x76dc>
   1a45c:	mov	r0, r5
   1a460:	bl	1c5ec <__assert_fail@plt+0x9948>
   1a464:	ldrb	r3, [r4, #64]	; 0x40
   1a468:	cmp	r3, #0
   1a46c:	beq	1a260 <__assert_fail@plt+0x75bc>
   1a470:	ldr	r1, [pc, #484]	; 1a65c <__assert_fail@plt+0x79b8>
   1a474:	mov	r0, r5
   1a478:	bl	124b8 <strcmp@plt>
   1a47c:	cmp	r0, #0
   1a480:	bne	1a5d0 <__assert_fail@plt+0x792c>
   1a484:	mov	r3, #3
   1a488:	str	r3, [r4, #44]	; 0x2c
   1a48c:	b	1a260 <__assert_fail@plt+0x75bc>
   1a490:	ldr	r3, [r4, #16]
   1a494:	mov	r1, r9
   1a498:	ldr	r0, [r4]
   1a49c:	blx	r3
   1a4a0:	cmp	r0, #0
   1a4a4:	beq	1a260 <__assert_fail@plt+0x75bc>
   1a4a8:	b	1a408 <__assert_fail@plt+0x7764>
   1a4ac:	ldr	r3, [r4, #16]
   1a4b0:	mov	r1, #0
   1a4b4:	cmp	r3, r1
   1a4b8:	str	r1, [r4, #44]	; 0x2c
   1a4bc:	beq	1a260 <__assert_fail@plt+0x75bc>
   1a4c0:	ldr	r0, [r4]
   1a4c4:	blx	r3
   1a4c8:	b	1a260 <__assert_fail@plt+0x75bc>
   1a4cc:	mov	r1, r5
   1a4d0:	ldr	r0, [pc, #392]	; 1a660 <__assert_fail@plt+0x79bc>
   1a4d4:	bl	21e08 <__assert_fail@plt+0xf164>
   1a4d8:	b	1a328 <__assert_fail@plt+0x7684>
   1a4dc:	tst	r3, #32
   1a4e0:	beq	1a374 <__assert_fail@plt+0x76d0>
   1a4e4:	mov	r1, r5
   1a4e8:	ldr	r0, [pc, #372]	; 1a664 <__assert_fail@plt+0x79c0>
   1a4ec:	bl	21e08 <__assert_fail@plt+0xf164>
   1a4f0:	b	1a374 <__assert_fail@plt+0x76d0>
   1a4f4:	ldrb	r3, [r4, #48]	; 0x30
   1a4f8:	tst	r3, #32
   1a4fc:	beq	1a520 <__assert_fail@plt+0x787c>
   1a500:	tst	r3, #1
   1a504:	ldr	r2, [pc, #348]	; 1a668 <__assert_fail@plt+0x79c4>
   1a508:	ldr	r3, [pc, #348]	; 1a66c <__assert_fail@plt+0x79c8>
   1a50c:	moveq	r1, r2
   1a510:	movne	r1, r3
   1a514:	mov	r2, r5
   1a518:	ldr	r0, [pc, #336]	; 1a670 <__assert_fail@plt+0x79cc>
   1a51c:	bl	21e08 <__assert_fail@plt+0xf164>
   1a520:	ldr	r3, [r4, #20]
   1a524:	cmp	r3, #0
   1a528:	beq	1a554 <__assert_fail@plt+0x78b0>
   1a52c:	ldrb	r2, [r4, #48]	; 0x30
   1a530:	ldr	r0, [r4]
   1a534:	tst	r2, #1
   1a538:	beq	1a54c <__assert_fail@plt+0x78a8>
   1a53c:	mov	r1, r9
   1a540:	blx	r3
   1a544:	ldr	r3, [r4, #20]
   1a548:	ldr	r0, [r4]
   1a54c:	mov	r1, r5
   1a550:	blx	r3
   1a554:	ldrb	r3, [r4, #48]	; 0x30
   1a558:	mov	r2, sp
   1a55c:	mov	r1, r5
   1a560:	orr	r3, r3, #1
   1a564:	strb	r3, [r4, #48]	; 0x30
   1a568:	mov	r0, r4
   1a56c:	bl	19f1c <__assert_fail@plt+0x7278>
   1a570:	cmp	r0, #0
   1a574:	beq	1a260 <__assert_fail@plt+0x75bc>
   1a578:	b	1a408 <__assert_fail@plt+0x7764>
   1a57c:	ldr	r3, [r4, #20]
   1a580:	cmp	r3, #0
   1a584:	beq	1a260 <__assert_fail@plt+0x75bc>
   1a588:	ldr	r3, [r4, #24]
   1a58c:	mov	r1, r5
   1a590:	ldr	r0, [r4]
   1a594:	blx	r3
   1a598:	ldr	r3, [r4, #24]
   1a59c:	mov	r1, r9
   1a5a0:	b	1a4c0 <__assert_fail@plt+0x781c>
   1a5a4:	mov	r2, sp
   1a5a8:	mov	r1, r5
   1a5ac:	mov	r0, r4
   1a5b0:	bl	19f1c <__assert_fail@plt+0x7278>
   1a5b4:	cmp	r0, #0
   1a5b8:	beq	1a260 <__assert_fail@plt+0x75bc>
   1a5bc:	b	1a408 <__assert_fail@plt+0x7764>
   1a5c0:	mov	r1, r5
   1a5c4:	ldr	r0, [pc, #168]	; 1a674 <__assert_fail@plt+0x79d0>
   1a5c8:	bl	21e08 <__assert_fail@plt+0xf164>
   1a5cc:	b	1a368 <__assert_fail@plt+0x76c4>
   1a5d0:	mov	r1, r5
   1a5d4:	ldr	r0, [pc, #156]	; 1a678 <__assert_fail@plt+0x79d4>
   1a5d8:	bl	21cbc <__assert_fail@plt+0xf018>
   1a5dc:	mov	r3, #11
   1a5e0:	str	r3, [r4, #44]	; 0x2c
   1a5e4:	b	1a260 <__assert_fail@plt+0x75bc>
   1a5e8:	mov	fp, r0
   1a5ec:	mov	r0, r8
   1a5f0:	bl	18588 <__assert_fail@plt+0x58e4>
   1a5f4:	mov	r8, fp
   1a5f8:	b	1a40c <__assert_fail@plt+0x7768>
   1a5fc:	bl	12914 <gpg_err_code_from_syserror@plt>
   1a600:	uxth	fp, r0
   1a604:	mov	r0, fp
   1a608:	bl	12b3c <gpg_strerror@plt>
   1a60c:	mov	r1, r0
   1a610:	ldr	r0, [pc, #100]	; 1a67c <__assert_fail@plt+0x79d8>
   1a614:	bl	21cbc <__assert_fail@plt+0xf018>
   1a618:	b	1a40c <__assert_fail@plt+0x7768>
   1a61c:	bl	12914 <gpg_err_code_from_syserror@plt>
   1a620:	uxth	fp, r0
   1a624:	mov	r0, fp
   1a628:	bl	12b3c <gpg_strerror@plt>
   1a62c:	mov	r1, r0
   1a630:	ldr	r0, [pc, #72]	; 1a680 <__assert_fail@plt+0x79dc>
   1a634:	bl	21cbc <__assert_fail@plt+0xf018>
   1a638:	b	1a40c <__assert_fail@plt+0x7768>
   1a63c:	bl	1262c <__stack_chk_fail@plt>
   1a640:	strdeq	r5, [r4], -r8
   1a644:	andeq	r9, r1, r4, lsr r6
   1a648:	muleq	r3, ip, r5
   1a64c:	andeq	r1, r0, r8, lsl #7
   1a650:	andeq	r2, r3, r8, lsr #6
   1a654:	andeq	r2, r3, r0, lsr #6
   1a658:	andeq	r2, r3, ip, lsr #7
   1a65c:			; <UNDEFINED> instruction: 0x000323bc
   1a660:	andeq	r2, r3, r4, lsl #7
   1a664:	andeq	r2, r3, r0, lsr #7
   1a668:	andeq	r1, r3, r8, ror #15
   1a66c:	strdeq	r2, [r3], -ip
   1a670:	andeq	r2, r3, ip, lsl #8
   1a674:	muleq	r3, r4, r3
   1a678:	andeq	r2, r3, r8, asr #7
   1a67c:	andeq	r2, r3, ip, ror #6
   1a680:	andeq	r2, r3, r4, lsl #6
   1a684:	push	{r4, r5, r6, lr}
   1a688:	ldr	r4, [r0, #4]
   1a68c:	cmp	r4, #0
   1a690:	beq	1a6d4 <__assert_fail@plt+0x7a30>
   1a694:	cmp	r4, r1
   1a698:	mov	r5, r1
   1a69c:	mov	r6, r0
   1a6a0:	beq	1a6cc <__assert_fail@plt+0x7a28>
   1a6a4:	mov	r1, r5
   1a6a8:	mov	r0, r4
   1a6ac:	bl	1a684 <__assert_fail@plt+0x79e0>
   1a6b0:	cmp	r0, #0
   1a6b4:	popne	{r4, r5, r6, pc}
   1a6b8:	ldr	r4, [r4]
   1a6bc:	cmp	r4, #0
   1a6c0:	popeq	{r4, r5, r6, pc}
   1a6c4:	cmp	r5, r4
   1a6c8:	bne	1a6a4 <__assert_fail@plt+0x7a00>
   1a6cc:	mov	r0, r6
   1a6d0:	pop	{r4, r5, r6, pc}
   1a6d4:	mov	r0, r4
   1a6d8:	pop	{r4, r5, r6, pc}
   1a6dc:	push	{r4, r5, r6, lr}
   1a6e0:	ldr	r4, [r0, #4]
   1a6e4:	cmp	r4, #0
   1a6e8:	beq	1a734 <__assert_fail@plt+0x7a90>
   1a6ec:	ldr	r3, [r4, #28]
   1a6f0:	mov	r5, r1
   1a6f4:	cmp	r1, r3
   1a6f8:	mov	r6, r0
   1a6fc:	beq	1a72c <__assert_fail@plt+0x7a88>
   1a700:	mov	r1, r5
   1a704:	mov	r0, r4
   1a708:	bl	1a6dc <__assert_fail@plt+0x7a38>
   1a70c:	cmp	r0, #0
   1a710:	popne	{r4, r5, r6, pc}
   1a714:	ldr	r4, [r4]
   1a718:	cmp	r4, #0
   1a71c:	popeq	{r4, r5, r6, pc}
   1a720:	ldr	r3, [r4, #28]
   1a724:	cmp	r3, r5
   1a728:	bne	1a700 <__assert_fail@plt+0x7a5c>
   1a72c:	mov	r0, r6
   1a730:	pop	{r4, r5, r6, pc}
   1a734:	mov	r0, r4
   1a738:	pop	{r4, r5, r6, pc}
   1a73c:	push	{r4, r5, r6, lr}
   1a740:	subs	r5, r0, #0
   1a744:	popeq	{r4, r5, r6, pc}
   1a748:	ldr	r0, [r5, #12]
   1a74c:	ldr	r6, [r5]
   1a750:	cmp	r0, #0
   1a754:	beq	1a76c <__assert_fail@plt+0x7ac8>
   1a758:	ldr	r4, [r0]
   1a75c:	bl	125e4 <gcry_free@plt>
   1a760:	subs	r0, r4, #0
   1a764:	str	r4, [r5, #12]
   1a768:	bne	1a758 <__assert_fail@plt+0x7ab4>
   1a76c:	ldr	r0, [r5, #4]
   1a770:	bl	1a73c <__assert_fail@plt+0x7a98>
   1a774:	ldr	r0, [r5, #8]
   1a778:	bl	125e4 <gcry_free@plt>
   1a77c:	ldr	r0, [r5, #24]
   1a780:	bl	125e4 <gcry_free@plt>
   1a784:	mov	r0, r5
   1a788:	bl	125e4 <gcry_free@plt>
   1a78c:	subs	r5, r6, #0
   1a790:	bne	1a748 <__assert_fail@plt+0x7aa4>
   1a794:	pop	{r4, r5, r6, pc}
   1a798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a79c:	subs	r7, r0, #0
   1a7a0:	sub	sp, sp, #20
   1a7a4:	beq	1a864 <__assert_fail@plt+0x7bc0>
   1a7a8:	ldr	r6, [pc, #188]	; 1a86c <__assert_fail@plt+0x7bc8>
   1a7ac:	ldr	r9, [pc, #188]	; 1a870 <__assert_fail@plt+0x7bcc>
   1a7b0:	ldr	r8, [pc, #188]	; 1a874 <__assert_fail@plt+0x7bd0>
   1a7b4:	ldr	fp, [pc, #188]	; 1a878 <__assert_fail@plt+0x7bd4>
   1a7b8:	ldr	sl, [pc, #188]	; 1a87c <__assert_fail@plt+0x7bd8>
   1a7bc:	lsl	r5, r1, #1
   1a7c0:	add	r3, r1, #1
   1a7c4:	str	r3, [sp, #12]
   1a7c8:	ldr	r3, [r7, #28]
   1a7cc:	mov	r2, r6
   1a7d0:	mov	r1, r5
   1a7d4:	mov	r0, r9
   1a7d8:	bl	21e08 <__assert_fail@plt+0xf164>
   1a7dc:	ldr	r4, [r7, #12]
   1a7e0:	cmp	r4, #0
   1a7e4:	beq	1a810 <__assert_fail@plt+0x7b6c>
   1a7e8:	ldr	r2, [r4, #4]
   1a7ec:	add	r3, r4, #8
   1a7f0:	str	r2, [sp]
   1a7f4:	mov	r1, r5
   1a7f8:	mov	r2, r6
   1a7fc:	mov	r0, r8
   1a800:	bl	21e08 <__assert_fail@plt+0xf164>
   1a804:	ldr	r4, [r4]
   1a808:	cmp	r4, #0
   1a80c:	bne	1a7e8 <__assert_fail@plt+0x7b44>
   1a810:	ldr	r3, [r7, #24]
   1a814:	cmp	r3, #0
   1a818:	beq	1a830 <__assert_fail@plt+0x7b8c>
   1a81c:	ldr	r3, [r7, #20]
   1a820:	mov	r2, r6
   1a824:	mov	r1, r5
   1a828:	mov	r0, fp
   1a82c:	bl	21e08 <__assert_fail@plt+0xf164>
   1a830:	ldr	r3, [r7, #4]
   1a834:	cmp	r3, #0
   1a838:	beq	1a858 <__assert_fail@plt+0x7bb4>
   1a83c:	mov	r1, r5
   1a840:	mov	r0, sl
   1a844:	mov	r2, r6
   1a848:	bl	21e08 <__assert_fail@plt+0xf164>
   1a84c:	ldr	r1, [sp, #12]
   1a850:	ldr	r0, [r7, #4]
   1a854:	bl	1a798 <__assert_fail@plt+0x7af4>
   1a858:	ldr	r7, [r7]
   1a85c:	cmp	r7, #0
   1a860:	bne	1a7c8 <__assert_fail@plt+0x7b24>
   1a864:	add	sp, sp, #20
   1a868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a86c:	andeq	r1, r3, r8, ror #15
   1a870:	andeq	r2, r3, r0, ror #9
   1a874:	strdeq	r2, [r3], -r0
   1a878:	strdeq	r2, [r3], -ip
   1a87c:	andeq	r2, r3, r4, lsl r5
   1a880:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a884:	subs	sl, r2, #0
   1a888:	mov	r6, r0
   1a88c:	mov	r9, r1
   1a890:	beq	1a9bc <__assert_fail@plt+0x7d18>
   1a894:	mov	r0, r1
   1a898:	bl	128d8 <strlen@plt>
   1a89c:	mov	r4, r0
   1a8a0:	add	r0, r4, #12
   1a8a4:	bl	12458 <gcry_malloc@plt>
   1a8a8:	subs	r5, r0, #0
   1a8ac:	beq	1a9e8 <__assert_fail@plt+0x7d44>
   1a8b0:	mov	r8, r5
   1a8b4:	mov	r7, #0
   1a8b8:	mov	r2, r4
   1a8bc:	add	r4, r5, r4
   1a8c0:	str	r7, [r8], #8
   1a8c4:	mov	r1, r9
   1a8c8:	mov	r0, r8
   1a8cc:	bl	125b4 <memcpy@plt>
   1a8d0:	mov	r0, r8
   1a8d4:	strb	r7, [r4, #8]
   1a8d8:	bl	182c4 <__assert_fail@plt+0x5620>
   1a8dc:	cmp	r0, r7
   1a8e0:	beq	1a9f8 <__assert_fail@plt+0x7d54>
   1a8e4:	mov	r0, r8
   1a8e8:	bl	18334 <__assert_fail@plt+0x5690>
   1a8ec:	mov	r0, sl
   1a8f0:	bl	12c68 <gcry_strdup@plt>
   1a8f4:	cmp	r0, #0
   1a8f8:	mov	r4, r0
   1a8fc:	str	r0, [r5, #4]
   1a900:	beq	1aa1c <__assert_fail@plt+0x7d78>
   1a904:	bl	128d8 <strlen@plt>
   1a908:	sub	r0, r0, #1
   1a90c:	adds	r2, r4, r0
   1a910:	bcs	1a980 <__assert_fail@plt+0x7cdc>
   1a914:	ldrb	r3, [r4, r0]
   1a918:	cmp	r3, #32
   1a91c:	cmpne	r3, #13
   1a920:	moveq	r1, #1
   1a924:	movne	r1, #0
   1a928:	sub	r3, r3, #9
   1a92c:	cmp	r3, #1
   1a930:	movhi	r3, r1
   1a934:	orrls	r3, r1, #1
   1a938:	cmp	r3, #0
   1a93c:	beq	1a99c <__assert_fail@plt+0x7cf8>
   1a940:	mov	r0, r7
   1a944:	b	1a974 <__assert_fail@plt+0x7cd0>
   1a948:	ldrb	r3, [r2]
   1a94c:	cmp	r3, #13
   1a950:	cmpne	r3, #32
   1a954:	moveq	r1, #1
   1a958:	movne	r1, #0
   1a95c:	sub	r3, r3, #9
   1a960:	cmp	r3, #1
   1a964:	movhi	r3, r1
   1a968:	orrls	r3, r1, #1
   1a96c:	cmp	r3, #0
   1a970:	beq	1a99c <__assert_fail@plt+0x7cf8>
   1a974:	strb	r0, [r2], #-1
   1a978:	cmp	r4, r2
   1a97c:	bls	1a948 <__assert_fail@plt+0x7ca4>
   1a980:	mov	r0, r4
   1a984:	bl	125e4 <gcry_free@plt>
   1a988:	mov	r0, r5
   1a98c:	bl	125e4 <gcry_free@plt>
   1a990:	mov	r4, #55	; 0x37
   1a994:	mov	r0, r4
   1a998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a99c:	cmp	r6, #0
   1a9a0:	beq	1aa0c <__assert_fail@plt+0x7d68>
   1a9a4:	ldr	r3, [r6, #16]
   1a9a8:	mov	r4, #0
   1a9ac:	mov	r0, r4
   1a9b0:	str	r5, [r3]
   1a9b4:	str	r5, [r6, #16]
   1a9b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9bc:	mov	r1, #61	; 0x3d
   1a9c0:	mov	r0, r9
   1a9c4:	bl	128fc <strchr@plt>
   1a9c8:	cmp	r0, #0
   1a9cc:	beq	1aa30 <__assert_fail@plt+0x7d8c>
   1a9d0:	sub	r4, r0, r9
   1a9d4:	add	sl, r0, #1
   1a9d8:	add	r0, r4, #12
   1a9dc:	bl	12458 <gcry_malloc@plt>
   1a9e0:	subs	r5, r0, #0
   1a9e4:	bne	1a8b0 <__assert_fail@plt+0x7c0c>
   1a9e8:	bl	12914 <gpg_err_code_from_syserror@plt>
   1a9ec:	uxth	r4, r0
   1a9f0:	mov	r0, r4
   1a9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9f8:	mov	r0, r5
   1a9fc:	mov	r4, #88	; 0x58
   1aa00:	bl	125e4 <gcry_free@plt>
   1aa04:	mov	r0, r4
   1aa08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa0c:	mov	r0, r5
   1aa10:	bl	125e4 <gcry_free@plt>
   1aa14:	mov	r4, r6
   1aa18:	b	1a994 <__assert_fail@plt+0x7cf0>
   1aa1c:	bl	12914 <gpg_err_code_from_syserror@plt>
   1aa20:	uxth	r4, r0
   1aa24:	mov	r0, r5
   1aa28:	bl	125e4 <gcry_free@plt>
   1aa2c:	b	1a994 <__assert_fail@plt+0x7cf0>
   1aa30:	mov	r4, #45	; 0x2d
   1aa34:	b	1a994 <__assert_fail@plt+0x7cf0>
   1aa38:	ldr	r3, [r0]
   1aa3c:	push	{r4, r5, r6, lr}
   1aa40:	cmp	r3, #0
   1aa44:	mov	r5, r0
   1aa48:	mov	r6, r1
   1aa4c:	mov	r4, r2
   1aa50:	beq	1aa84 <__assert_fail@plt+0x7de0>
   1aa54:	ldr	r1, [r1]
   1aa58:	cmp	r1, #0
   1aa5c:	beq	1aae0 <__assert_fail@plt+0x7e3c>
   1aa60:	cmp	r4, #0
   1aa64:	moveq	r3, r4
   1aa68:	beq	1aa7c <__assert_fail@plt+0x7dd8>
   1aa6c:	ldr	r0, [r5]
   1aa70:	bl	1a684 <__assert_fail@plt+0x79e0>
   1aa74:	mov	r3, #0
   1aa78:	str	r0, [r4]
   1aa7c:	mov	r0, r3
   1aa80:	pop	{r4, r5, r6, pc}
   1aa84:	mov	r1, #32
   1aa88:	mov	r0, #1
   1aa8c:	bl	129bc <gcry_calloc@plt>
   1aa90:	cmp	r0, #0
   1aa94:	mov	r1, r0
   1aa98:	str	r0, [r5]
   1aa9c:	beq	1aacc <__assert_fail@plt+0x7e28>
   1aaa0:	ldr	r3, [r6]
   1aaa4:	cmp	r3, #0
   1aaa8:	addeq	r3, r0, #12
   1aaac:	streq	r0, [r6]
   1aab0:	streq	r3, [r0, #16]
   1aab4:	beq	1aa60 <__assert_fail@plt+0x7dbc>
   1aab8:	ldr	r3, [pc, #52]	; 1aaf4 <__assert_fail@plt+0x7e50>
   1aabc:	mov	r2, #256	; 0x100
   1aac0:	ldr	r1, [pc, #48]	; 1aaf8 <__assert_fail@plt+0x7e54>
   1aac4:	ldr	r0, [pc, #48]	; 1aafc <__assert_fail@plt+0x7e58>
   1aac8:	bl	22044 <__assert_fail@plt+0xf3a0>
   1aacc:	cmp	r4, #0
   1aad0:	strne	r0, [r4]
   1aad4:	bl	12914 <gpg_err_code_from_syserror@plt>
   1aad8:	uxth	r3, r0
   1aadc:	b	1aa7c <__assert_fail@plt+0x7dd8>
   1aae0:	ldr	r3, [pc, #12]	; 1aaf4 <__assert_fail@plt+0x7e50>
   1aae4:	mov	r2, #260	; 0x104
   1aae8:	ldr	r1, [pc, #8]	; 1aaf8 <__assert_fail@plt+0x7e54>
   1aaec:	ldr	r0, [pc, #12]	; 1ab00 <__assert_fail@plt+0x7e5c>
   1aaf0:	bl	22044 <__assert_fail@plt+0xf3a0>
   1aaf4:			; <UNDEFINED> instruction: 0x000324b0
   1aaf8:	andeq	r2, r3, r4, lsr #10
   1aafc:	andeq	r2, r3, r0, asr #10
   1ab00:	andeq	r2, r3, r4, asr r5
   1ab04:	push	{r4, r5, r6, r7, r8, lr}
   1ab08:	sub	sp, sp, #8
   1ab0c:	ldr	r5, [pc, #156]	; 1abb0 <__assert_fail@plt+0x7f0c>
   1ab10:	mov	r4, r0
   1ab14:	mov	r8, r1
   1ab18:	ldr	r3, [r5]
   1ab1c:	add	r1, r0, #12
   1ab20:	mov	r6, r2
   1ab24:	add	r0, r0, #8
   1ab28:	mov	r2, sp
   1ab2c:	str	r3, [sp, #4]
   1ab30:	bl	1aa38 <__assert_fail@plt+0x7d94>
   1ab34:	subs	r7, r0, #0
   1ab38:	bne	1ab84 <__assert_fail@plt+0x7ee0>
   1ab3c:	ldr	r4, [r4, #12]
   1ab40:	ldr	r3, [r4, #24]
   1ab44:	cmp	r3, #0
   1ab48:	movne	r7, #70	; 0x46
   1ab4c:	bne	1ab84 <__assert_fail@plt+0x7ee0>
   1ab50:	cmp	r6, #0
   1ab54:	movne	r0, r6
   1ab58:	moveq	r0, #1
   1ab5c:	bl	12458 <gcry_malloc@plt>
   1ab60:	cmp	r0, #0
   1ab64:	str	r0, [r4, #24]
   1ab68:	beq	1aba0 <__assert_fail@plt+0x7efc>
   1ab6c:	cmp	r8, #0
   1ab70:	str	r6, [r4, #20]
   1ab74:	beq	1ab84 <__assert_fail@plt+0x7ee0>
   1ab78:	mov	r2, r6
   1ab7c:	mov	r1, r8
   1ab80:	bl	125b4 <memcpy@plt>
   1ab84:	ldr	r2, [sp, #4]
   1ab88:	ldr	r3, [r5]
   1ab8c:	mov	r0, r7
   1ab90:	cmp	r2, r3
   1ab94:	bne	1abac <__assert_fail@plt+0x7f08>
   1ab98:	add	sp, sp, #8
   1ab9c:	pop	{r4, r5, r6, r7, r8, pc}
   1aba0:	bl	12914 <gpg_err_code_from_syserror@plt>
   1aba4:	uxth	r7, r0
   1aba8:	b	1ab84 <__assert_fail@plt+0x7ee0>
   1abac:	bl	1262c <__stack_chk_fail@plt>
   1abb0:	strdeq	r5, [r4], -r8
   1abb4:	push	{r4, r5, r6, r7, r8, lr}
   1abb8:	ldr	r7, [r0]
   1abbc:	cmp	r7, #0
   1abc0:	beq	1ac90 <__assert_fail@plt+0x7fec>
   1abc4:	ldr	r5, [r7, #12]
   1abc8:	mov	r8, r0
   1abcc:	cmp	r5, #0
   1abd0:	beq	1ac34 <__assert_fail@plt+0x7f90>
   1abd4:	ldr	r6, [pc, #212]	; 1acb0 <__assert_fail@plt+0x800c>
   1abd8:	mov	r4, r5
   1abdc:	b	1abec <__assert_fail@plt+0x7f48>
   1abe0:	ldr	r4, [r4]
   1abe4:	cmp	r4, #0
   1abe8:	beq	1ac34 <__assert_fail@plt+0x7f90>
   1abec:	mov	r1, r6
   1abf0:	add	r0, r4, #8
   1abf4:	bl	124b8 <strcmp@plt>
   1abf8:	cmp	r0, #0
   1abfc:	bne	1abe0 <__assert_fail@plt+0x7f3c>
   1ac00:	ldr	r4, [pc, #172]	; 1acb4 <__assert_fail@plt+0x8010>
   1ac04:	b	1ac14 <__assert_fail@plt+0x7f70>
   1ac08:	ldr	r5, [r5]
   1ac0c:	cmp	r5, #0
   1ac10:	beq	1ac5c <__assert_fail@plt+0x7fb8>
   1ac14:	mov	r1, r4
   1ac18:	add	r0, r5, #8
   1ac1c:	bl	124b8 <strcmp@plt>
   1ac20:	cmp	r0, #0
   1ac24:	bne	1ac08 <__assert_fail@plt+0x7f64>
   1ac28:	mov	r4, r0
   1ac2c:	mov	r0, r4
   1ac30:	pop	{r4, r5, r6, r7, r8, pc}
   1ac34:	mov	r0, r7
   1ac38:	ldr	r2, [pc, #120]	; 1acb8 <__assert_fail@plt+0x8014>
   1ac3c:	ldr	r1, [pc, #108]	; 1acb0 <__assert_fail@plt+0x800c>
   1ac40:	bl	1a880 <__assert_fail@plt+0x7bdc>
   1ac44:	subs	r4, r0, #0
   1ac48:	bne	1ac2c <__assert_fail@plt+0x7f88>
   1ac4c:	ldr	r3, [r8]
   1ac50:	ldr	r5, [r3, #12]
   1ac54:	cmp	r5, #0
   1ac58:	bne	1ac00 <__assert_fail@plt+0x7f5c>
   1ac5c:	bl	24474 <__assert_fail@plt+0x117d0>
   1ac60:	bl	2515c <__assert_fail@plt+0x124b8>
   1ac64:	subs	r5, r0, #0
   1ac68:	beq	1ac9c <__assert_fail@plt+0x7ff8>
   1ac6c:	ldr	r0, [r8]
   1ac70:	mov	r2, r5
   1ac74:	ldr	r1, [pc, #56]	; 1acb4 <__assert_fail@plt+0x8010>
   1ac78:	bl	1a880 <__assert_fail@plt+0x7bdc>
   1ac7c:	mov	r4, r0
   1ac80:	mov	r0, r5
   1ac84:	bl	125e4 <gcry_free@plt>
   1ac88:	mov	r0, r4
   1ac8c:	pop	{r4, r5, r6, r7, r8, pc}
   1ac90:	mov	r4, #58	; 0x3a
   1ac94:	mov	r0, r4
   1ac98:	pop	{r4, r5, r6, r7, r8, pc}
   1ac9c:	bl	12914 <gpg_err_code_from_syserror@plt>
   1aca0:	subs	r4, r0, #0
   1aca4:	beq	1ac84 <__assert_fail@plt+0x7fe0>
   1aca8:	uxth	r4, r4
   1acac:	b	1ac80 <__assert_fail@plt+0x7fdc>
   1acb0:	andeq	r1, r3, ip, ror pc
   1acb4:	andeq	r2, r3, r8, ror #10
   1acb8:	andeq	r2, r3, r0, ror r5
   1acbc:	push	{r4, r5, r6, r7, r8, lr}
   1acc0:	mov	r7, r2
   1acc4:	mov	r5, r0
   1acc8:	mov	r2, r1
   1accc:	ldr	r0, [r0]
   1acd0:	ldr	r1, [pc, #200]	; 1ada0 <__assert_fail@plt+0x80fc>
   1acd4:	mov	r8, r3
   1acd8:	bl	12bc0 <gpgrt_fprintf@plt>
   1acdc:	ldrb	r3, [r7]
   1ace0:	cmp	r3, #0
   1ace4:	beq	1ad90 <__assert_fail@plt+0x80ec>
   1ace8:	ldr	r6, [pc, #180]	; 1ada4 <__assert_fail@plt+0x8100>
   1acec:	mov	r4, r7
   1acf0:	b	1ad04 <__assert_fail@plt+0x8060>
   1acf4:	bl	12770 <gpgrt_fputc@plt>
   1acf8:	ldrb	r3, [r4, #1]!
   1acfc:	cmp	r3, #0
   1ad00:	beq	1ad28 <__assert_fail@plt+0x8084>
   1ad04:	cmp	r3, #10
   1ad08:	mov	r0, r3
   1ad0c:	ldr	r1, [r5]
   1ad10:	bne	1acf4 <__assert_fail@plt+0x8050>
   1ad14:	mov	r0, r6
   1ad18:	bl	12a64 <gpgrt_fputs@plt>
   1ad1c:	ldrb	r3, [r4, #1]!
   1ad20:	cmp	r3, #0
   1ad24:	bne	1ad04 <__assert_fail@plt+0x8060>
   1ad28:	cmp	r8, #0
   1ad2c:	ldr	r1, [r5]
   1ad30:	beq	1ad5c <__assert_fail@plt+0x80b8>
   1ad34:	cmp	r4, r7
   1ad38:	bls	1ad48 <__assert_fail@plt+0x80a4>
   1ad3c:	ldrb	r3, [r4, #-1]
   1ad40:	cmp	r3, #59	; 0x3b
   1ad44:	bne	1ad80 <__assert_fail@plt+0x80dc>
   1ad48:	mov	r0, r1
   1ad4c:	mov	r2, r8
   1ad50:	ldr	r1, [pc, #80]	; 1ada8 <__assert_fail@plt+0x8104>
   1ad54:	bl	12bc0 <gpgrt_fprintf@plt>
   1ad58:	ldr	r1, [r5]
   1ad5c:	ldr	r0, [pc, #72]	; 1adac <__assert_fail@plt+0x8108>
   1ad60:	bl	12a64 <gpgrt_fputs@plt>
   1ad64:	ldr	r0, [r5]
   1ad68:	bl	1265c <gpgrt_ferror@plt>
   1ad6c:	cmp	r0, #0
   1ad70:	popeq	{r4, r5, r6, r7, r8, pc}
   1ad74:	bl	12914 <gpg_err_code_from_syserror@plt>
   1ad78:	uxth	r0, r0
   1ad7c:	pop	{r4, r5, r6, r7, r8, pc}
   1ad80:	mov	r0, #59	; 0x3b
   1ad84:	bl	12770 <gpgrt_fputc@plt>
   1ad88:	ldr	r1, [r5]
   1ad8c:	b	1ad48 <__assert_fail@plt+0x80a4>
   1ad90:	cmp	r8, #0
   1ad94:	ldr	r1, [r5]
   1ad98:	bne	1ad48 <__assert_fail@plt+0x80a4>
   1ad9c:	b	1ad5c <__assert_fail@plt+0x80b8>
   1ada0:	andeq	r2, r3, r4, ror r5
   1ada4:	andeq	r2, r3, ip, ror r5
   1ada8:	andeq	r2, r3, r0, lsl #11
   1adac:	muleq	r3, ip, r5
   1adb0:	ldr	ip, [pc, #60]	; 1adf4 <__assert_fail@plt+0x8150>
   1adb4:	cmp	r2, #0
   1adb8:	push	{r4, lr}
   1adbc:	mov	r4, r0
   1adc0:	ldr	r3, [pc, #48]	; 1adf8 <__assert_fail@plt+0x8154>
   1adc4:	mov	r2, r1
   1adc8:	movne	r3, ip
   1adcc:	ldr	r1, [pc, #40]	; 1adfc <__assert_fail@plt+0x8158>
   1add0:	ldr	r0, [r0]
   1add4:	bl	12bc0 <gpgrt_fprintf@plt>
   1add8:	ldr	r0, [r4]
   1addc:	bl	1265c <gpgrt_ferror@plt>
   1ade0:	cmp	r0, #0
   1ade4:	popeq	{r4, pc}
   1ade8:	bl	12914 <gpg_err_code_from_syserror@plt>
   1adec:	uxth	r0, r0
   1adf0:	pop	{r4, pc}
   1adf4:	andeq	r0, r3, r4, ror ip
   1adf8:	andeq	r1, r3, r8, ror #15
   1adfc:	muleq	r3, r4, r5
   1ae00:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae04:	subs	r6, r2, #0
   1ae08:	beq	1afdc <__assert_fail@plt+0x8338>
   1ae0c:	ldr	r8, [pc, #560]	; 1b044 <__assert_fail@plt+0x83a0>
   1ae10:	mov	r9, r0
   1ae14:	mov	sl, r1
   1ae18:	add	r7, r0, #32
   1ae1c:	ldr	r4, [r6, #12]
   1ae20:	cmp	r4, #0
   1ae24:	bne	1ae54 <__assert_fail@plt+0x81b0>
   1ae28:	b	1ae9c <__assert_fail@plt+0x81f8>
   1ae2c:	mov	r2, fp
   1ae30:	mov	r1, r5
   1ae34:	mov	r3, #0
   1ae38:	mov	r0, r7
   1ae3c:	bl	1acbc <__assert_fail@plt+0x8018>
   1ae40:	cmp	r0, #0
   1ae44:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae48:	ldr	r4, [r4]
   1ae4c:	cmp	r4, #0
   1ae50:	beq	1ae9c <__assert_fail@plt+0x81f8>
   1ae54:	ldr	r3, [r6, #4]
   1ae58:	add	r5, r4, #8
   1ae5c:	cmp	r3, #0
   1ae60:	ldr	fp, [r4, #4]
   1ae64:	beq	1ae2c <__assert_fail@plt+0x8188>
   1ae68:	mov	r1, r8
   1ae6c:	mov	r0, r5
   1ae70:	bl	124b8 <strcmp@plt>
   1ae74:	cmp	r0, #0
   1ae78:	bne	1ae2c <__assert_fail@plt+0x8188>
   1ae7c:	mov	r2, fp
   1ae80:	mov	r1, r5
   1ae84:	ldr	r3, [r6, #8]
   1ae88:	mov	r0, r7
   1ae8c:	bl	1acbc <__assert_fail@plt+0x8018>
   1ae90:	cmp	r0, #0
   1ae94:	beq	1ae48 <__assert_fail@plt+0x81a4>
   1ae98:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae9c:	ldr	r1, [r9, #32]
   1aea0:	ldr	r0, [pc, #416]	; 1b048 <__assert_fail@plt+0x83a4>
   1aea4:	bl	12a64 <gpgrt_fputs@plt>
   1aea8:	ldr	r0, [r9, #32]
   1aeac:	bl	1265c <gpgrt_ferror@plt>
   1aeb0:	cmp	r0, #0
   1aeb4:	bne	1afe4 <__assert_fail@plt+0x8340>
   1aeb8:	ldr	r5, [r6, #24]
   1aebc:	cmp	r5, #0
   1aec0:	beq	1af40 <__assert_fail@plt+0x829c>
   1aec4:	ldr	r4, [r6, #20]
   1aec8:	cmp	r4, #0
   1aecc:	subne	r4, r4, #1
   1aed0:	addne	r4, r5, r4
   1aed4:	subne	fp, r5, #1
   1aed8:	bne	1aef0 <__assert_fail@plt+0x824c>
   1aedc:	b	1af30 <__assert_fail@plt+0x828c>
   1aee0:	ldr	r1, [r9, #32]
   1aee4:	bl	12770 <gpgrt_fputc@plt>
   1aee8:	cmp	fp, r4
   1aeec:	beq	1af30 <__assert_fail@plt+0x828c>
   1aef0:	ldrb	r0, [fp, #1]!
   1aef4:	cmp	r0, #10
   1aef8:	bne	1aee0 <__assert_fail@plt+0x823c>
   1aefc:	cmp	fp, r5
   1af00:	bls	1af10 <__assert_fail@plt+0x826c>
   1af04:	ldrb	r2, [fp, #-1]
   1af08:	cmp	r2, #13
   1af0c:	beq	1aee0 <__assert_fail@plt+0x823c>
   1af10:	ldr	r1, [r9, #32]
   1af14:	mov	r0, #13
   1af18:	bl	12770 <gpgrt_fputc@plt>
   1af1c:	ldrb	r0, [fp]
   1af20:	ldr	r1, [r9, #32]
   1af24:	bl	12770 <gpgrt_fputc@plt>
   1af28:	cmp	fp, r4
   1af2c:	bne	1aef0 <__assert_fail@plt+0x824c>
   1af30:	ldr	r0, [r9, #32]
   1af34:	bl	1265c <gpgrt_ferror@plt>
   1af38:	cmp	r0, #0
   1af3c:	bne	1b000 <__assert_fail@plt+0x835c>
   1af40:	ldr	r3, [r6, #4]
   1af44:	cmp	r3, #0
   1af48:	beq	1af9c <__assert_fail@plt+0x82f8>
   1af4c:	ldr	r1, [r6, #8]
   1af50:	cmp	r1, #0
   1af54:	beq	1b030 <__assert_fail@plt+0x838c>
   1af58:	mov	r2, #0
   1af5c:	mov	r0, r7
   1af60:	bl	1adb0 <__assert_fail@plt+0x810c>
   1af64:	cmp	r0, #0
   1af68:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af6c:	ldr	r2, [r6, #4]
   1af70:	mov	r1, r6
   1af74:	mov	r0, r9
   1af78:	bl	1ae00 <__assert_fail@plt+0x815c>
   1af7c:	cmp	r0, #0
   1af80:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af84:	mov	r2, #1
   1af88:	ldr	r1, [r6, #8]
   1af8c:	mov	r0, r7
   1af90:	bl	1adb0 <__assert_fail@plt+0x810c>
   1af94:	cmp	r0, #0
   1af98:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af9c:	ldr	r3, [r6]
   1afa0:	cmp	r3, #0
   1afa4:	beq	1afdc <__assert_fail@plt+0x8338>
   1afa8:	cmp	sl, #0
   1afac:	beq	1b01c <__assert_fail@plt+0x8378>
   1afb0:	ldr	r1, [sl, #8]
   1afb4:	cmp	r1, #0
   1afb8:	beq	1b01c <__assert_fail@plt+0x8378>
   1afbc:	mov	r2, #0
   1afc0:	mov	r0, r7
   1afc4:	bl	1adb0 <__assert_fail@plt+0x810c>
   1afc8:	cmp	r0, #0
   1afcc:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afd0:	ldr	r6, [r6]
   1afd4:	cmp	r6, #0
   1afd8:	bne	1ae1c <__assert_fail@plt+0x8178>
   1afdc:	mov	r0, #0
   1afe0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afe4:	bl	12914 <gpg_err_code_from_syserror@plt>
   1afe8:	cmp	r0, #0
   1afec:	beq	1aeb8 <__assert_fail@plt+0x8214>
   1aff0:	uxth	r0, r0
   1aff4:	cmp	r0, #0
   1aff8:	beq	1aeb8 <__assert_fail@plt+0x8214>
   1affc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b000:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b004:	cmp	r0, #0
   1b008:	beq	1af40 <__assert_fail@plt+0x829c>
   1b00c:	uxth	r0, r0
   1b010:	cmp	r0, #0
   1b014:	beq	1af40 <__assert_fail@plt+0x829c>
   1b018:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b01c:	ldr	r3, [pc, #40]	; 1b04c <__assert_fail@plt+0x83a8>
   1b020:	ldr	r2, [pc, #40]	; 1b050 <__assert_fail@plt+0x83ac>
   1b024:	ldr	r1, [pc, #40]	; 1b054 <__assert_fail@plt+0x83b0>
   1b028:	ldr	r0, [pc, #40]	; 1b058 <__assert_fail@plt+0x83b4>
   1b02c:	bl	22044 <__assert_fail@plt+0xf3a0>
   1b030:	ldr	r3, [pc, #20]	; 1b04c <__assert_fail@plt+0x83a8>
   1b034:	ldr	r2, [pc, #32]	; 1b05c <__assert_fail@plt+0x83b8>
   1b038:	ldr	r1, [pc, #20]	; 1b054 <__assert_fail@plt+0x83b0>
   1b03c:	ldr	r0, [pc, #28]	; 1b060 <__assert_fail@plt+0x83bc>
   1b040:	bl	22044 <__assert_fail@plt+0xf3a0>
   1b044:	andeq	r0, r3, r4, lsr r8
   1b048:	muleq	r3, ip, r5
   1b04c:			; <UNDEFINED> instruction: 0x000324bc
   1b050:	muleq	r0, r7, r2
   1b054:	andeq	r2, r3, r4, lsr #10
   1b058:			; <UNDEFINED> instruction: 0x000325b0
   1b05c:	andeq	r0, r0, fp, lsl #5
   1b060:	andeq	r2, r3, r0, lsr #11
   1b064:	push	{r4, r5, r6, lr}
   1b068:	mov	r4, #0
   1b06c:	str	r4, [r0]
   1b070:	mov	r5, r0
   1b074:	mov	r6, r1
   1b078:	mov	r0, #1
   1b07c:	mov	r1, #36	; 0x24
   1b080:	bl	129bc <gcry_calloc@plt>
   1b084:	subs	r3, r0, #0
   1b088:	beq	1b09c <__assert_fail@plt+0x83f8>
   1b08c:	mov	r0, r4
   1b090:	str	r6, [r3]
   1b094:	str	r3, [r5]
   1b098:	pop	{r4, r5, r6, pc}
   1b09c:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b0a0:	uxth	r0, r0
   1b0a4:	pop	{r4, r5, r6, pc}
   1b0a8:	push	{r4, lr}
   1b0ac:	subs	r4, r0, #0
   1b0b0:	popeq	{r4, pc}
   1b0b4:	ldr	r0, [r4, #8]
   1b0b8:	bl	1a73c <__assert_fail@plt+0x7a98>
   1b0bc:	ldr	r0, [r4, #24]
   1b0c0:	bl	125e4 <gcry_free@plt>
   1b0c4:	mov	r0, r4
   1b0c8:	pop	{r4, lr}
   1b0cc:	b	125e4 <gcry_free@plt>
   1b0d0:	cmp	r1, #0
   1b0d4:	ldrb	r3, [r0, #4]
   1b0d8:	bne	1b0e8 <__assert_fail@plt+0x8444>
   1b0dc:	bic	r3, r3, #3
   1b0e0:	strb	r3, [r0, #4]
   1b0e4:	bx	lr
   1b0e8:	orr	r3, r3, #1
   1b0ec:	cmp	r1, #10
   1b0f0:	strb	r3, [r0, #4]
   1b0f4:	uxtbgt	r3, r3
   1b0f8:	orrgt	r3, r3, #2
   1b0fc:	strbgt	r3, [r0, #4]
   1b100:	bx	lr
   1b104:	ldr	r0, [r0, #8]
   1b108:	mov	r1, #0
   1b10c:	b	1a798 <__assert_fail@plt+0x7af4>
   1b110:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b114:	sub	sp, sp, #8
   1b118:	ldr	r6, [pc, #364]	; 1b28c <__assert_fail@plt+0x85e8>
   1b11c:	subs	r4, r0, #0
   1b120:	ldr	r3, [r6]
   1b124:	str	r3, [sp, #4]
   1b128:	beq	1b208 <__assert_fail@plt+0x8564>
   1b12c:	mov	r8, r1
   1b130:	mov	r9, r2
   1b134:	add	r1, r4, #12
   1b138:	mov	r2, sp
   1b13c:	add	r0, r4, #8
   1b140:	bl	1aa38 <__assert_fail@plt+0x7d94>
   1b144:	subs	r7, r0, #0
   1b148:	bne	1b210 <__assert_fail@plt+0x856c>
   1b14c:	ldr	r5, [r4, #12]
   1b150:	ldr	r3, [r5, #24]
   1b154:	cmp	r3, #0
   1b158:	beq	1b22c <__assert_fail@plt+0x8588>
   1b15c:	ldr	r3, [sp]
   1b160:	cmp	r3, #0
   1b164:	beq	1b244 <__assert_fail@plt+0x85a0>
   1b168:	mov	r1, #32
   1b16c:	mov	r0, #1
   1b170:	bl	129bc <gcry_calloc@plt>
   1b174:	subs	r5, r0, #0
   1b178:	beq	1b268 <__assert_fail@plt+0x85c4>
   1b17c:	ldrd	r2, [r4, #12]
   1b180:	ldr	r1, [r2]
   1b184:	add	r3, r3, #1
   1b188:	cmp	r1, #0
   1b18c:	add	r1, r5, #12
   1b190:	str	r3, [r4, #16]
   1b194:	str	r3, [r5, #28]
   1b198:	str	r1, [r5, #16]
   1b19c:	streq	r5, [r2]
   1b1a0:	streq	r5, [r4, #12]
   1b1a4:	bne	1b278 <__assert_fail@plt+0x85d4>
   1b1a8:	orrs	r3, r8, r9
   1b1ac:	beq	1b210 <__assert_fail@plt+0x856c>
   1b1b0:	ldr	r1, [pc, #216]	; 1b290 <__assert_fail@plt+0x85ec>
   1b1b4:	mov	r0, r8
   1b1b8:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   1b1bc:	cmp	r0, #0
   1b1c0:	bne	1b1fc <__assert_fail@plt+0x8558>
   1b1c4:	ldr	sl, [r4, #8]
   1b1c8:	ldr	r4, [sl, #12]
   1b1cc:	cmp	r4, #0
   1b1d0:	beq	1b24c <__assert_fail@plt+0x85a8>
   1b1d4:	ldr	r7, [pc, #184]	; 1b294 <__assert_fail@plt+0x85f0>
   1b1d8:	b	1b1e8 <__assert_fail@plt+0x8544>
   1b1dc:	ldr	r4, [r4]
   1b1e0:	cmp	r4, #0
   1b1e4:	beq	1b24c <__assert_fail@plt+0x85a8>
   1b1e8:	mov	r1, r7
   1b1ec:	add	r0, r4, #8
   1b1f0:	bl	124b8 <strcmp@plt>
   1b1f4:	cmp	r0, #0
   1b1f8:	bne	1b1dc <__assert_fail@plt+0x8538>
   1b1fc:	mov	r2, r9
   1b200:	mov	r1, r8
   1b204:	mov	r0, r5
   1b208:	bl	1a880 <__assert_fail@plt+0x7bdc>
   1b20c:	mov	r7, r0
   1b210:	ldr	r2, [sp, #4]
   1b214:	ldr	r3, [r6]
   1b218:	mov	r0, r7
   1b21c:	cmp	r2, r3
   1b220:	bne	1b274 <__assert_fail@plt+0x85d0>
   1b224:	add	sp, sp, #8
   1b228:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b22c:	ldr	r3, [r5, #4]
   1b230:	cmp	r3, #0
   1b234:	beq	1b1a8 <__assert_fail@plt+0x8504>
   1b238:	ldr	r3, [sp]
   1b23c:	cmp	r3, #0
   1b240:	bne	1b168 <__assert_fail@plt+0x84c4>
   1b244:	mov	r7, #70	; 0x46
   1b248:	b	1b210 <__assert_fail@plt+0x856c>
   1b24c:	mov	r0, sl
   1b250:	ldr	r2, [pc, #64]	; 1b298 <__assert_fail@plt+0x85f4>
   1b254:	ldr	r1, [pc, #56]	; 1b294 <__assert_fail@plt+0x85f0>
   1b258:	bl	1a880 <__assert_fail@plt+0x7bdc>
   1b25c:	subs	r7, r0, #0
   1b260:	beq	1b1fc <__assert_fail@plt+0x8558>
   1b264:	b	1b210 <__assert_fail@plt+0x856c>
   1b268:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b26c:	uxth	r7, r0
   1b270:	b	1b210 <__assert_fail@plt+0x856c>
   1b274:	bl	1262c <__stack_chk_fail@plt>
   1b278:	ldr	r3, [pc, #28]	; 1b29c <__assert_fail@plt+0x85f8>
   1b27c:	ldr	r2, [pc, #28]	; 1b2a0 <__assert_fail@plt+0x85fc>
   1b280:	ldr	r1, [pc, #28]	; 1b2a4 <__assert_fail@plt+0x8600>
   1b284:	ldr	r0, [pc, #28]	; 1b2a8 <__assert_fail@plt+0x8604>
   1b288:	bl	22044 <__assert_fail@plt+0xf3a0>
   1b28c:	strdeq	r5, [r4], -r8
   1b290:	andeq	r0, r3, r4, lsr r8
   1b294:	andeq	r1, r3, ip, ror pc
   1b298:	andeq	r2, r3, r0, ror r5
   1b29c:	andeq	r2, r3, r8, asr #9
   1b2a0:	andeq	r0, r0, r9, lsl #3
   1b2a4:	andeq	r2, r3, r4, lsr #10
   1b2a8:	andeq	r2, r3, ip, asr #11
   1b2ac:	push	{r4, r5, r6, lr}
   1b2b0:	mov	r5, r0
   1b2b4:	mov	r0, r1
   1b2b8:	mov	r4, r1
   1b2bc:	bl	128d8 <strlen@plt>
   1b2c0:	mov	r1, r4
   1b2c4:	mov	r2, r0
   1b2c8:	mov	r0, r5
   1b2cc:	pop	{r4, r5, r6, lr}
   1b2d0:	b	1ab04 <__assert_fail@plt+0x7e60>
   1b2d4:	b	1ab04 <__assert_fail@plt+0x7e60>
   1b2d8:	push	{r4, r5, r6, lr}
   1b2dc:	mov	r4, r1
   1b2e0:	ldr	r5, [pc, #100]	; 1b34c <__assert_fail@plt+0x86a8>
   1b2e4:	sub	sp, sp, #16
   1b2e8:	mov	r6, r0
   1b2ec:	ldr	r3, [r5]
   1b2f0:	ldr	r0, [r1]
   1b2f4:	str	r3, [sp, #12]
   1b2f8:	bl	12bb4 <gpgrt_rewind@plt>
   1b2fc:	ldr	r0, [r4]
   1b300:	add	r2, sp, #8
   1b304:	add	r1, sp, #4
   1b308:	bl	126d4 <gpgrt_fclose_snatch@plt>
   1b30c:	cmp	r0, #0
   1b310:	bne	1b33c <__assert_fail@plt+0x8698>
   1b314:	str	r0, [r4]
   1b318:	ldmib	sp, {r1, r2}
   1b31c:	mov	r0, r6
   1b320:	bl	1ab04 <__assert_fail@plt+0x7e60>
   1b324:	ldr	r2, [sp, #12]
   1b328:	ldr	r3, [r5]
   1b32c:	cmp	r2, r3
   1b330:	bne	1b348 <__assert_fail@plt+0x86a4>
   1b334:	add	sp, sp, #16
   1b338:	pop	{r4, r5, r6, pc}
   1b33c:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b340:	uxth	r0, r0
   1b344:	b	1b324 <__assert_fail@plt+0x8680>
   1b348:	bl	1262c <__stack_chk_fail@plt>
   1b34c:	strdeq	r5, [r4], -r8
   1b350:	push	{r4, r5, r6, r7, lr}
   1b354:	sub	sp, sp, #20
   1b358:	ldr	r5, [pc, #296]	; 1b488 <__assert_fail@plt+0x87e4>
   1b35c:	add	r1, r0, #12
   1b360:	mov	r4, r0
   1b364:	ldr	r3, [r5]
   1b368:	add	r0, r0, #8
   1b36c:	mov	r2, #0
   1b370:	str	r3, [sp, #12]
   1b374:	bl	1aa38 <__assert_fail@plt+0x7d94>
   1b378:	subs	r6, r0, #0
   1b37c:	bne	1b3ac <__assert_fail@plt+0x8708>
   1b380:	ldr	r7, [r4, #12]
   1b384:	ldr	r3, [r7, #24]
   1b388:	cmp	r3, #0
   1b38c:	bne	1b3a8 <__assert_fail@plt+0x8704>
   1b390:	ldr	r3, [r7, #4]
   1b394:	cmp	r3, #0
   1b398:	bne	1b3a8 <__assert_fail@plt+0x8704>
   1b39c:	ldr	r3, [r7, #8]
   1b3a0:	cmp	r3, #0
   1b3a4:	beq	1b3c8 <__assert_fail@plt+0x8724>
   1b3a8:	mov	r6, #70	; 0x46
   1b3ac:	ldr	r2, [sp, #12]
   1b3b0:	ldr	r3, [r5]
   1b3b4:	mov	r0, r6
   1b3b8:	cmp	r2, r3
   1b3bc:	bne	1b484 <__assert_fail@plt+0x87e0>
   1b3c0:	add	sp, sp, #20
   1b3c4:	pop	{r4, r5, r6, r7, pc}
   1b3c8:	mov	r1, #32
   1b3cc:	mov	r0, #1
   1b3d0:	bl	129bc <gcry_calloc@plt>
   1b3d4:	cmp	r0, #0
   1b3d8:	str	r0, [r7, #4]
   1b3dc:	beq	1b478 <__assert_fail@plt+0x87d4>
   1b3e0:	ldr	r2, [r4, #24]
   1b3e4:	add	r3, r0, #12
   1b3e8:	cmp	r2, #0
   1b3ec:	str	r3, [r0, #16]
   1b3f0:	beq	1b430 <__assert_fail@plt+0x878c>
   1b3f4:	ldr	r1, [r4, #20]
   1b3f8:	ldr	r0, [pc, #140]	; 1b48c <__assert_fail@plt+0x87e8>
   1b3fc:	add	r1, r1, #1
   1b400:	str	r1, [r4, #20]
   1b404:	bl	1241c <gpgrt_bsprintf@plt>
   1b408:	cmp	r0, #0
   1b40c:	str	r0, [r7, #8]
   1b410:	beq	1b45c <__assert_fail@plt+0x87b8>
   1b414:	ldr	r2, [r7, #4]
   1b418:	ldr	r3, [r4, #16]
   1b41c:	add	r3, r3, #1
   1b420:	str	r3, [r4, #16]
   1b424:	str	r3, [r2, #28]
   1b428:	str	r2, [r4, #12]
   1b42c:	b	1b3ac <__assert_fail@plt+0x8708>
   1b430:	mov	r0, sp
   1b434:	mov	r1, #12
   1b438:	bl	12b84 <gcry_create_nonce@plt>
   1b43c:	mov	r0, sp
   1b440:	mov	r1, #96	; 0x60
   1b444:	bl	26030 <__assert_fail@plt+0x1338c>
   1b448:	cmp	r0, #0
   1b44c:	str	r0, [r4, #24]
   1b450:	mov	r2, r0
   1b454:	streq	r0, [r7, #8]
   1b458:	bne	1b3f4 <__assert_fail@plt+0x8750>
   1b45c:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b460:	uxth	r6, r0
   1b464:	ldr	r0, [r7, #4]
   1b468:	bl	125e4 <gcry_free@plt>
   1b46c:	mov	r3, #0
   1b470:	str	r3, [r7, #4]
   1b474:	b	1b3ac <__assert_fail@plt+0x8708>
   1b478:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b47c:	uxth	r6, r0
   1b480:	b	1b3ac <__assert_fail@plt+0x8708>
   1b484:	bl	1262c <__stack_chk_fail@plt>
   1b488:	strdeq	r5, [r4], -r8
   1b48c:	andeq	r2, r3, r8, ror #11
   1b490:	push	{r4, r5, lr}
   1b494:	sub	sp, sp, #12
   1b498:	ldr	r5, [pc, #124]	; 1b51c <__assert_fail@plt+0x8878>
   1b49c:	add	r1, r0, #12
   1b4a0:	mov	r4, r0
   1b4a4:	ldr	r3, [r5]
   1b4a8:	add	r0, r0, #8
   1b4ac:	mov	r2, sp
   1b4b0:	str	r3, [sp, #4]
   1b4b4:	bl	1aa38 <__assert_fail@plt+0x7d94>
   1b4b8:	cmp	r0, #0
   1b4bc:	bne	1b4f0 <__assert_fail@plt+0x884c>
   1b4c0:	ldr	r3, [sp]
   1b4c4:	cmp	r3, #0
   1b4c8:	beq	1b508 <__assert_fail@plt+0x8864>
   1b4cc:	ldr	r2, [r3]
   1b4d0:	cmp	r2, #0
   1b4d4:	bne	1b4e0 <__assert_fail@plt+0x883c>
   1b4d8:	b	1b510 <__assert_fail@plt+0x886c>
   1b4dc:	mov	r2, r3
   1b4e0:	ldr	r3, [r2]
   1b4e4:	cmp	r3, #0
   1b4e8:	bne	1b4dc <__assert_fail@plt+0x8838>
   1b4ec:	str	r2, [r4, #12]
   1b4f0:	ldr	r2, [sp, #4]
   1b4f4:	ldr	r3, [r5]
   1b4f8:	cmp	r2, r3
   1b4fc:	bne	1b518 <__assert_fail@plt+0x8874>
   1b500:	add	sp, sp, #12
   1b504:	pop	{r4, r5, pc}
   1b508:	mov	r0, #70	; 0x46
   1b50c:	b	1b4f0 <__assert_fail@plt+0x884c>
   1b510:	mov	r2, r3
   1b514:	b	1b4ec <__assert_fail@plt+0x8848>
   1b518:	bl	1262c <__stack_chk_fail@plt>
   1b51c:	strdeq	r5, [r4], -r8
   1b520:	push	{r4, lr}
   1b524:	add	r1, r0, #12
   1b528:	mov	r4, r0
   1b52c:	mov	r2, #0
   1b530:	add	r0, r0, #8
   1b534:	bl	1aa38 <__assert_fail@plt+0x7d94>
   1b538:	cmp	r0, #0
   1b53c:	ldreq	r3, [r4, #12]
   1b540:	ldreq	r0, [r3, #28]
   1b544:	movne	r0, #0
   1b548:	pop	{r4, pc}
   1b54c:	push	{r4, r5, r6, lr}
   1b550:	mov	r4, r0
   1b554:	add	r0, r0, #8
   1b558:	mov	r5, r1
   1b55c:	bl	1abb4 <__assert_fail@plt+0x7f10>
   1b560:	cmp	r0, #0
   1b564:	popne	{r4, r5, r6, pc}
   1b568:	mov	r1, r0
   1b56c:	str	r5, [r4, #32]
   1b570:	ldr	r2, [r4, #8]
   1b574:	mov	r0, r4
   1b578:	bl	1ae00 <__assert_fail@plt+0x815c>
   1b57c:	mov	r3, #0
   1b580:	str	r3, [r4, #32]
   1b584:	pop	{r4, r5, r6, pc}
   1b588:	mov	r3, #0
   1b58c:	cmp	r1, #0
   1b590:	push	{r4, r5, r6, r7, r8, lr}
   1b594:	mov	r6, r2
   1b598:	mov	r4, r0
   1b59c:	str	r3, [r2]
   1b5a0:	bne	1b604 <__assert_fail@plt+0x8960>
   1b5a4:	add	r0, r0, #8
   1b5a8:	bl	1abb4 <__assert_fail@plt+0x7f10>
   1b5ac:	subs	r7, r0, #0
   1b5b0:	bne	1b5fc <__assert_fail@plt+0x8958>
   1b5b4:	ldr	r7, [r4, #8]
   1b5b8:	ldr	r1, [pc, #112]	; 1b630 <__assert_fail@plt+0x898c>
   1b5bc:	mov	r0, #0
   1b5c0:	bl	12920 <gpgrt_fopenmem@plt>
   1b5c4:	subs	r5, r0, #0
   1b5c8:	beq	1b620 <__assert_fail@plt+0x897c>
   1b5cc:	mov	r2, r7
   1b5d0:	str	r5, [r4, #32]
   1b5d4:	mov	r1, #0
   1b5d8:	mov	r0, r4
   1b5dc:	bl	1ae00 <__assert_fail@plt+0x815c>
   1b5e0:	mov	r3, #0
   1b5e4:	str	r3, [r4, #32]
   1b5e8:	subs	r7, r0, #0
   1b5ec:	mov	r0, r5
   1b5f0:	bne	1b614 <__assert_fail@plt+0x8970>
   1b5f4:	bl	12bb4 <gpgrt_rewind@plt>
   1b5f8:	str	r5, [r6]
   1b5fc:	mov	r0, r7
   1b600:	pop	{r4, r5, r6, r7, r8, pc}
   1b604:	ldr	r0, [r0, #8]
   1b608:	bl	1a6dc <__assert_fail@plt+0x7a38>
   1b60c:	mov	r7, r0
   1b610:	b	1b5b8 <__assert_fail@plt+0x8914>
   1b614:	bl	12788 <gpgrt_fclose@plt>
   1b618:	mov	r0, r7
   1b61c:	pop	{r4, r5, r6, r7, r8, pc}
   1b620:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b624:	uxth	r7, r0
   1b628:	mov	r0, r7
   1b62c:	pop	{r4, r5, r6, r7, r8, pc}
   1b630:	strdeq	r0, [r3], -r4
   1b634:	push	{r4, r5, r6, lr}
   1b638:	mov	r6, r0
   1b63c:	ldr	lr, [pc, #152]	; 1b6dc <__assert_fail@plt+0x8a38>
   1b640:	sub	sp, sp, #56	; 0x38
   1b644:	ldr	r5, [pc, #148]	; 1b6e0 <__assert_fail@plt+0x8a3c>
   1b648:	ldm	lr!, {r0, r1, r2, r3}
   1b64c:	add	ip, sp, #32
   1b650:	mov	r4, #0
   1b654:	str	r4, [sp, #8]
   1b658:	ldr	lr, [lr]
   1b65c:	stmia	ip!, {r0, r1, r2, r3}
   1b660:	mov	r3, r4
   1b664:	ldr	r0, [r5]
   1b668:	ldr	r1, [pc, #116]	; 1b6e4 <__assert_fail@plt+0x8a40>
   1b66c:	str	r4, [sp, #4]
   1b670:	str	r4, [sp]
   1b674:	strh	lr, [ip]
   1b678:	ldr	ip, [pc, #104]	; 1b6e8 <__assert_fail@plt+0x8a44>
   1b67c:	str	r0, [sp, #52]	; 0x34
   1b680:	str	r1, [sp, #20]
   1b684:	mov	r2, r6
   1b688:	add	r0, sp, #32
   1b68c:	add	r1, sp, #20
   1b690:	str	r4, [sp, #28]
   1b694:	str	ip, [sp, #24]
   1b698:	bl	2c71c <__assert_fail@plt+0x19a78>
   1b69c:	subs	r4, r0, #0
   1b6a0:	bne	1b6c0 <__assert_fail@plt+0x8a1c>
   1b6a4:	ldr	r2, [sp, #52]	; 0x34
   1b6a8:	ldr	r3, [r5]
   1b6ac:	mov	r0, r4
   1b6b0:	cmp	r2, r3
   1b6b4:	bne	1b6d8 <__assert_fail@plt+0x8a34>
   1b6b8:	add	sp, sp, #56	; 0x38
   1b6bc:	pop	{r4, r5, r6, pc}
   1b6c0:	bl	12b3c <gpg_strerror@plt>
   1b6c4:	add	r1, sp, #32
   1b6c8:	mov	r2, r0
   1b6cc:	ldr	r0, [pc, #24]	; 1b6ec <__assert_fail@plt+0x8a48>
   1b6d0:	bl	21cbc <__assert_fail@plt+0xf018>
   1b6d4:	b	1b6a4 <__assert_fail@plt+0x8a00>
   1b6d8:	bl	1262c <__stack_chk_fail@plt>
   1b6dc:	andeq	r2, r3, ip, lsl r6
   1b6e0:	strdeq	r5, [r4], -r8
   1b6e4:	strdeq	r2, [r3], -r8
   1b6e8:	strdeq	r2, [r3], -ip
   1b6ec:	andeq	r2, r3, r0, lsl #12
   1b6f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b6f4:	sub	sp, sp, #20
   1b6f8:	ldr	r7, [pc, #528]	; 1b910 <__assert_fail@plt+0x8c6c>
   1b6fc:	subs	r8, r1, #0
   1b700:	mov	r6, r0
   1b704:	ldr	r3, [r7]
   1b708:	mov	r0, #32768	; 0x8000
   1b70c:	str	r3, [sp, #12]
   1b710:	beq	1b81c <__assert_fail@plt+0x8b78>
   1b714:	bl	12458 <gcry_malloc@plt>
   1b718:	subs	r4, r0, #0
   1b71c:	beq	1b8d8 <__assert_fail@plt+0x8c34>
   1b720:	ldr	r1, [pc, #492]	; 1b914 <__assert_fail@plt+0x8c70>
   1b724:	mov	r0, r8
   1b728:	bl	124b8 <strcmp@plt>
   1b72c:	cmp	r0, #0
   1b730:	beq	1b82c <__assert_fail@plt+0x8b88>
   1b734:	ldr	r1, [pc, #476]	; 1b918 <__assert_fail@plt+0x8c74>
   1b738:	mov	r0, r8
   1b73c:	bl	12a04 <gpgrt_fopen@plt>
   1b740:	subs	r5, r0, #0
   1b744:	bne	1b780 <__assert_fail@plt+0x8adc>
   1b748:	b	1b8e4 <__assert_fail@plt+0x8c40>
   1b74c:	ldr	r2, [sp, #4]
   1b750:	cmp	r2, #0
   1b754:	beq	1b848 <__assert_fail@plt+0x8ba4>
   1b758:	add	r3, sp, #8
   1b75c:	mov	r1, r4
   1b760:	mov	r0, r5
   1b764:	bl	12470 <gpgrt_write@plt>
   1b768:	cmp	r0, #0
   1b76c:	bne	1b89c <__assert_fail@plt+0x8bf8>
   1b770:	ldr	r2, [sp, #8]
   1b774:	ldr	r3, [sp, #4]
   1b778:	cmp	r2, r3
   1b77c:	bne	1b8c0 <__assert_fail@plt+0x8c1c>
   1b780:	add	r3, sp, #4
   1b784:	mov	r2, #4
   1b788:	mov	r1, r4
   1b78c:	mov	r0, r6
   1b790:	bl	125cc <gpgrt_read@plt>
   1b794:	cmp	r0, #0
   1b798:	beq	1b74c <__assert_fail@plt+0x8aa8>
   1b79c:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b7a0:	uxth	r9, r0
   1b7a4:	mov	r0, r6
   1b7a8:	bl	12584 <gpgrt_fname_get@plt>
   1b7ac:	mov	r6, r0
   1b7b0:	mov	r0, r9
   1b7b4:	bl	12b3c <gpg_strerror@plt>
   1b7b8:	mov	r1, r6
   1b7bc:	mov	r2, r0
   1b7c0:	ldr	r0, [pc, #340]	; 1b91c <__assert_fail@plt+0x8c78>
   1b7c4:	bl	21cbc <__assert_fail@plt+0xf018>
   1b7c8:	cmp	r9, #0
   1b7cc:	beq	1b848 <__assert_fail@plt+0x8ba4>
   1b7d0:	cmp	r5, #0
   1b7d4:	beq	1b7f8 <__assert_fail@plt+0x8b54>
   1b7d8:	mov	r0, #1
   1b7dc:	bl	12890 <_gpgrt_get_std_stream@plt>
   1b7e0:	cmp	r5, r0
   1b7e4:	beq	1b7f8 <__assert_fail@plt+0x8b54>
   1b7e8:	mov	r0, r5
   1b7ec:	bl	12788 <gpgrt_fclose@plt>
   1b7f0:	mov	r0, r8
   1b7f4:	bl	22a2c <__assert_fail@plt+0xfd88>
   1b7f8:	mov	r0, r4
   1b7fc:	bl	125e4 <gcry_free@plt>
   1b800:	ldr	r2, [sp, #12]
   1b804:	ldr	r3, [r7]
   1b808:	mov	r0, r9
   1b80c:	cmp	r2, r3
   1b810:	bne	1b90c <__assert_fail@plt+0x8c68>
   1b814:	add	sp, sp, #20
   1b818:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b81c:	bl	12458 <gcry_malloc@plt>
   1b820:	subs	r4, r0, #0
   1b824:	beq	1b8d8 <__assert_fail@plt+0x8c34>
   1b828:	ldr	r8, [pc, #228]	; 1b914 <__assert_fail@plt+0x8c70>
   1b82c:	mov	r0, #1
   1b830:	bl	12890 <_gpgrt_get_std_stream@plt>
   1b834:	mov	r5, r0
   1b838:	mov	r0, #1
   1b83c:	bl	12890 <_gpgrt_get_std_stream@plt>
   1b840:	bl	124dc <gpgrt_set_binary@plt>
   1b844:	b	1b780 <__assert_fail@plt+0x8adc>
   1b848:	cmp	r5, #0
   1b84c:	beq	1b894 <__assert_fail@plt+0x8bf0>
   1b850:	mov	r0, #1
   1b854:	bl	12890 <_gpgrt_get_std_stream@plt>
   1b858:	cmp	r5, r0
   1b85c:	beq	1b894 <__assert_fail@plt+0x8bf0>
   1b860:	mov	r0, r5
   1b864:	bl	12788 <gpgrt_fclose@plt>
   1b868:	subs	r9, r0, #0
   1b86c:	beq	1b7f8 <__assert_fail@plt+0x8b54>
   1b870:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b874:	uxth	r9, r0
   1b878:	mov	r0, r9
   1b87c:	bl	12b3c <gpg_strerror@plt>
   1b880:	mov	r1, r8
   1b884:	mov	r2, r0
   1b888:	ldr	r0, [pc, #144]	; 1b920 <__assert_fail@plt+0x8c7c>
   1b88c:	bl	21cbc <__assert_fail@plt+0xf018>
   1b890:	b	1b7f8 <__assert_fail@plt+0x8b54>
   1b894:	mov	r9, #0
   1b898:	b	1b7f8 <__assert_fail@plt+0x8b54>
   1b89c:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b8a0:	uxth	r9, r0
   1b8a4:	mov	r0, r9
   1b8a8:	bl	12b3c <gpg_strerror@plt>
   1b8ac:	mov	r1, r8
   1b8b0:	mov	r2, r0
   1b8b4:	ldr	r0, [pc, #104]	; 1b924 <__assert_fail@plt+0x8c80>
   1b8b8:	bl	21cbc <__assert_fail@plt+0xf018>
   1b8bc:	b	1b7c8 <__assert_fail@plt+0x8b24>
   1b8c0:	ldr	r2, [pc, #96]	; 1b928 <__assert_fail@plt+0x8c84>
   1b8c4:	mov	r1, r8
   1b8c8:	ldr	r0, [pc, #84]	; 1b924 <__assert_fail@plt+0x8c80>
   1b8cc:	bl	21cbc <__assert_fail@plt+0xf018>
   1b8d0:	ldr	r9, [pc, #84]	; 1b92c <__assert_fail@plt+0x8c88>
   1b8d4:	b	1b7d0 <__assert_fail@plt+0x8b2c>
   1b8d8:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b8dc:	uxth	r9, r0
   1b8e0:	b	1b800 <__assert_fail@plt+0x8b5c>
   1b8e4:	bl	12914 <gpg_err_code_from_syserror@plt>
   1b8e8:	subs	r9, r0, #0
   1b8ec:	uxthne	r9, r9
   1b8f0:	movne	r0, r9
   1b8f4:	bl	12b3c <gpg_strerror@plt>
   1b8f8:	mov	r1, r8
   1b8fc:	mov	r2, r0
   1b900:	ldr	r0, [pc, #40]	; 1b930 <__assert_fail@plt+0x8c8c>
   1b904:	bl	21cbc <__assert_fail@plt+0xf018>
   1b908:	b	1b7f8 <__assert_fail@plt+0x8b54>
   1b90c:	bl	1262c <__stack_chk_fail@plt>
   1b910:	strdeq	r5, [r4], -r8
   1b914:	andeq	r1, r3, ip, lsr #26
   1b918:	andeq	r1, r3, r4, ror r7
   1b91c:	andeq	r0, r3, r4, lsr #7
   1b920:	andeq	r0, r3, r4, ror #10
   1b924:	andeq	r0, r3, r0, asr #10
   1b928:	andeq	r0, r3, r8, asr r5
   1b92c:	andeq	r8, r0, r1, lsr r0
   1b930:	andeq	r0, r3, r4, lsr #10
   1b934:	push	{r4, r5, r6, r7, lr}
   1b938:	ldrb	r6, [r0]
   1b93c:	cmp	r6, #48	; 0x30
   1b940:	beq	1ba08 <__assert_fail@plt+0x8d64>
   1b944:	sub	r7, r6, #48	; 0x30
   1b948:	uxtb	ip, r7
   1b94c:	cmp	ip, #9
   1b950:	movhi	ip, #0
   1b954:	bhi	1b994 <__assert_fail@plt+0x8cf0>
   1b958:	ldrb	r4, [r0, #1]
   1b95c:	sub	lr, r4, #48	; 0x30
   1b960:	add	r5, r0, #1
   1b964:	mov	ip, #0
   1b968:	b	1b978 <__assert_fail@plt+0x8cd4>
   1b96c:	ldrb	r4, [r5, #1]!
   1b970:	sub	r7, r6, #48	; 0x30
   1b974:	sub	lr, r4, #48	; 0x30
   1b978:	add	ip, ip, ip, lsl #2
   1b97c:	uxtb	lr, lr
   1b980:	cmp	lr, #9
   1b984:	mov	r6, r4
   1b988:	add	ip, r7, ip, lsl #1
   1b98c:	mov	r0, r5
   1b990:	bls	1b96c <__assert_fail@plt+0x8cc8>
   1b994:	str	ip, [r1]
   1b998:	ldrb	r1, [r0]
   1b99c:	cmp	r1, #46	; 0x2e
   1b9a0:	bne	1ba20 <__assert_fail@plt+0x8d7c>
   1b9a4:	ldrb	r4, [r0, #1]
   1b9a8:	add	lr, r0, #1
   1b9ac:	cmp	r4, #48	; 0x30
   1b9b0:	beq	1ba2c <__assert_fail@plt+0x8d88>
   1b9b4:	sub	ip, r4, #48	; 0x30
   1b9b8:	uxtb	r1, ip
   1b9bc:	cmp	r1, #9
   1b9c0:	movhi	r1, #0
   1b9c4:	bhi	1b9e8 <__assert_fail@plt+0x8d44>
   1b9c8:	mov	r1, #0
   1b9cc:	ldrb	r4, [lr, #1]!
   1b9d0:	add	r1, r1, r1, lsl #2
   1b9d4:	add	r1, ip, r1, lsl #1
   1b9d8:	sub	ip, r4, #48	; 0x30
   1b9dc:	uxtb	r0, ip
   1b9e0:	cmp	r0, #9
   1b9e4:	bls	1b9cc <__assert_fail@plt+0x8d28>
   1b9e8:	str	r1, [r2]
   1b9ec:	ldrb	r2, [lr]
   1b9f0:	cmp	r2, #46	; 0x2e
   1b9f4:	movne	r2, #0
   1b9f8:	beq	1ba44 <__assert_fail@plt+0x8da0>
   1b9fc:	str	r2, [r3]
   1ba00:	mov	r0, lr
   1ba04:	pop	{r4, r5, r6, r7, pc}
   1ba08:	ldrb	r4, [r0, #1]
   1ba0c:	sub	lr, r4, #48	; 0x30
   1ba10:	uxtb	ip, lr
   1ba14:	cmp	ip, #9
   1ba18:	movhi	r7, #0
   1ba1c:	bhi	1b960 <__assert_fail@plt+0x8cbc>
   1ba20:	mov	lr, #0
   1ba24:	mov	r0, lr
   1ba28:	pop	{r4, r5, r6, r7, pc}
   1ba2c:	ldrb	r1, [r0, #2]
   1ba30:	sub	r1, r1, #48	; 0x30
   1ba34:	cmp	r1, #9
   1ba38:	bls	1ba20 <__assert_fail@plt+0x8d7c>
   1ba3c:	mov	ip, #0
   1ba40:	b	1b9c8 <__assert_fail@plt+0x8d24>
   1ba44:	ldrb	r0, [lr, #1]
   1ba48:	add	r2, lr, #1
   1ba4c:	cmp	r0, #48	; 0x30
   1ba50:	beq	1ba94 <__assert_fail@plt+0x8df0>
   1ba54:	sub	r1, r0, #48	; 0x30
   1ba58:	uxtb	r0, r1
   1ba5c:	cmp	r0, #9
   1ba60:	movhi	lr, r2
   1ba64:	movhi	r2, #0
   1ba68:	bhi	1b9fc <__assert_fail@plt+0x8d58>
   1ba6c:	mov	lr, r2
   1ba70:	mov	r2, #0
   1ba74:	ldrb	r0, [lr, #1]!
   1ba78:	add	r2, r2, r2, lsl #2
   1ba7c:	add	r2, r1, r2, lsl #1
   1ba80:	sub	r1, r0, #48	; 0x30
   1ba84:	uxtb	r0, r1
   1ba88:	cmp	r0, #9
   1ba8c:	bls	1ba74 <__assert_fail@plt+0x8dd0>
   1ba90:	b	1b9fc <__assert_fail@plt+0x8d58>
   1ba94:	ldrb	r1, [lr, #2]
   1ba98:	sub	r1, r1, #48	; 0x30
   1ba9c:	cmp	r1, #9
   1baa0:	bls	1ba20 <__assert_fail@plt+0x8d7c>
   1baa4:	mov	r1, #0
   1baa8:	b	1ba6c <__assert_fail@plt+0x8dc8>
   1baac:	cmp	r1, #0
   1bab0:	push	{r4, lr}
   1bab4:	mov	r4, r0
   1bab8:	beq	1bae8 <__assert_fail@plt+0x8e44>
   1babc:	mov	r0, r1
   1bac0:	bl	12488 <getpwnam@plt>
   1bac4:	cmp	r0, #0
   1bac8:	popeq	{r4, pc}
   1bacc:	cmp	r4, #0
   1bad0:	ldr	r0, [r0, #20]
   1bad4:	beq	1bae0 <__assert_fail@plt+0x8e3c>
   1bad8:	pop	{r4, lr}
   1badc:	b	12a40 <gcry_xstrdup@plt>
   1bae0:	pop	{r4, lr}
   1bae4:	b	12c68 <gcry_strdup@plt>
   1bae8:	bl	1253c <getuid@plt>
   1baec:	bl	124e8 <getpwuid@plt>
   1baf0:	cmp	r0, #0
   1baf4:	bne	1bacc <__assert_fail@plt+0x8e28>
   1baf8:	pop	{r4, pc}
   1bafc:	push	{r4, r5, r6, r7, r8, lr}
   1bb00:	sub	sp, sp, #200	; 0xc8
   1bb04:	ldr	r8, [pc, #188]	; 1bbc8 <__assert_fail@plt+0x8f24>
   1bb08:	mov	r5, r1
   1bb0c:	str	r0, [sp, #4]
   1bb10:	ldr	r3, [r8]
   1bb14:	str	r3, [sp, #196]	; 0xc4
   1bb18:	bl	128d8 <strlen@plt>
   1bb1c:	mov	r6, r0
   1bb20:	ldr	r0, [r5], #4
   1bb24:	cmp	r0, #0
   1bb28:	str	r0, [sp, #8]
   1bb2c:	beq	1bb64 <__assert_fail@plt+0x8ec0>
   1bb30:	bl	128d8 <strlen@plt>
   1bb34:	add	r4, sp, #12
   1bb38:	add	r7, sp, #196	; 0xc4
   1bb3c:	add	r6, r6, r0
   1bb40:	b	1bb54 <__assert_fail@plt+0x8eb0>
   1bb44:	bl	128d8 <strlen@plt>
   1bb48:	cmp	r7, r4
   1bb4c:	add	r6, r6, r0
   1bb50:	beq	1bbb4 <__assert_fail@plt+0x8f10>
   1bb54:	ldr	r0, [r5], #4
   1bb58:	cmp	r0, #0
   1bb5c:	str	r0, [r4], #4
   1bb60:	bne	1bb44 <__assert_fail@plt+0x8ea0>
   1bb64:	add	r0, r6, #1
   1bb68:	bl	12458 <gcry_malloc@plt>
   1bb6c:	subs	r5, r0, #0
   1bb70:	beq	1bb98 <__assert_fail@plt+0x8ef4>
   1bb74:	ldr	r1, [sp, #4]
   1bb78:	cmp	r1, #0
   1bb7c:	beq	1bb98 <__assert_fail@plt+0x8ef4>
   1bb80:	add	r4, sp, #8
   1bb84:	mov	r0, r5
   1bb88:	bl	12608 <stpcpy@plt>
   1bb8c:	ldr	r1, [r4], #4
   1bb90:	cmp	r1, #0
   1bb94:	bne	1bb88 <__assert_fail@plt+0x8ee4>
   1bb98:	ldr	r2, [sp, #196]	; 0xc4
   1bb9c:	ldr	r3, [r8]
   1bba0:	mov	r0, r5
   1bba4:	cmp	r2, r3
   1bba8:	bne	1bbc4 <__assert_fail@plt+0x8f20>
   1bbac:	add	sp, sp, #200	; 0xc8
   1bbb0:	pop	{r4, r5, r6, r7, r8, pc}
   1bbb4:	mov	r0, #22
   1bbb8:	bl	12b0c <gpg_err_set_errno@plt>
   1bbbc:	mov	r5, #0
   1bbc0:	b	1bb98 <__assert_fail@plt+0x8ef4>
   1bbc4:	bl	1262c <__stack_chk_fail@plt>
   1bbc8:	strdeq	r5, [r4], -r8
   1bbcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbd0:	sub	sp, sp, #148	; 0x94
   1bbd4:	ldr	r7, [pc, #1020]	; 1bfd8 <__assert_fail@plt+0x9334>
   1bbd8:	mov	r9, r0
   1bbdc:	mov	r0, r1
   1bbe0:	ldr	r3, [r7]
   1bbe4:	mov	fp, r2
   1bbe8:	mov	r6, r1
   1bbec:	str	r3, [sp, #140]	; 0x8c
   1bbf0:	bl	128d8 <strlen@plt>
   1bbf4:	and	r8, r9, #1
   1bbf8:	mov	r5, r0
   1bbfc:	ldr	r0, [fp], #4
   1bc00:	cmp	r0, #0
   1bc04:	str	r0, [sp, #12]
   1bc08:	addeq	r5, r5, #1
   1bc0c:	beq	1bc4c <__assert_fail@plt+0x8fa8>
   1bc10:	bl	128d8 <strlen@plt>
   1bc14:	add	r5, r5, #2
   1bc18:	add	r4, sp, #16
   1bc1c:	add	sl, sp, #140	; 0x8c
   1bc20:	add	r5, r5, r0
   1bc24:	b	1bc3c <__assert_fail@plt+0x8f98>
   1bc28:	bl	128d8 <strlen@plt>
   1bc2c:	cmp	sl, r4
   1bc30:	add	r0, r0, #1
   1bc34:	add	r5, r5, r0
   1bc38:	beq	1bdd8 <__assert_fail@plt+0x9134>
   1bc3c:	ldr	r0, [fp], #4
   1bc40:	cmp	r0, #0
   1bc44:	str	r0, [r4], #4
   1bc48:	bne	1bc28 <__assert_fail@plt+0x8f84>
   1bc4c:	ldrb	r3, [r6]
   1bc50:	add	r5, r5, #1
   1bc54:	cmp	r3, #126	; 0x7e
   1bc58:	beq	1bd54 <__assert_fail@plt+0x90b0>
   1bc5c:	mov	r4, #0
   1bc60:	mov	fp, r4
   1bc64:	mov	r3, #1
   1bc68:	str	r3, [sp, #4]
   1bc6c:	cmp	r8, #0
   1bc70:	mov	r0, r5
   1bc74:	beq	1bdf0 <__assert_fail@plt+0x914c>
   1bc78:	bl	12410 <gcry_xmalloc@plt>
   1bc7c:	mov	sl, r0
   1bc80:	cmp	r4, #0
   1bc84:	beq	1bef4 <__assert_fail@plt+0x9250>
   1bc88:	mov	r1, r4
   1bc8c:	mov	r0, sl
   1bc90:	bl	12608 <stpcpy@plt>
   1bc94:	ldr	r3, [sp, #4]
   1bc98:	add	r1, r6, r3
   1bc9c:	bl	12608 <stpcpy@plt>
   1bca0:	mov	r4, r0
   1bca4:	mov	r0, fp
   1bca8:	bl	125e4 <gcry_free@plt>
   1bcac:	ldr	r1, [sp, #12]
   1bcb0:	cmp	r1, #0
   1bcb4:	addne	fp, sp, #16
   1bcb8:	movne	r6, #0
   1bcbc:	movne	r5, #47	; 0x2f
   1bcc0:	bne	1bce8 <__assert_fail@plt+0x9044>
   1bcc4:	b	1bd24 <__assert_fail@plt+0x9080>
   1bcc8:	mov	r0, r4
   1bccc:	add	r6, r6, #1
   1bcd0:	strb	r5, [r0], #1
   1bcd4:	bl	12608 <stpcpy@plt>
   1bcd8:	ldr	r1, [fp], #4
   1bcdc:	cmp	r1, #0
   1bce0:	mov	r4, r0
   1bce4:	beq	1bd24 <__assert_fail@plt+0x9080>
   1bce8:	cmp	r6, #0
   1bcec:	bne	1bcc8 <__assert_fail@plt+0x9024>
   1bcf0:	ldrb	r3, [sl]
   1bcf4:	cmp	r3, #47	; 0x2f
   1bcf8:	bne	1bcc8 <__assert_fail@plt+0x9024>
   1bcfc:	ldrb	r3, [sl, #1]
   1bd00:	cmp	r3, #0
   1bd04:	bne	1bcc8 <__assert_fail@plt+0x9024>
   1bd08:	mov	r0, r4
   1bd0c:	bl	12608 <stpcpy@plt>
   1bd10:	ldr	r1, [fp], #4
   1bd14:	add	r6, r6, #1
   1bd18:	cmp	r1, #0
   1bd1c:	mov	r4, r0
   1bd20:	bne	1bce8 <__assert_fail@plt+0x9044>
   1bd24:	tst	r9, #2
   1bd28:	beq	1bd38 <__assert_fail@plt+0x9094>
   1bd2c:	ldrb	r3, [sl]
   1bd30:	cmp	r3, #47	; 0x2f
   1bd34:	bne	1be08 <__assert_fail@plt+0x9164>
   1bd38:	ldr	r2, [sp, #140]	; 0x8c
   1bd3c:	ldr	r3, [r7]
   1bd40:	mov	r0, sl
   1bd44:	cmp	r2, r3
   1bd48:	bne	1bfd4 <__assert_fail@plt+0x9330>
   1bd4c:	add	sp, sp, #148	; 0x94
   1bd50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd54:	ldrb	r3, [r6, #1]
   1bd58:	cmp	r3, #0
   1bd5c:	cmpne	r3, #47	; 0x2f
   1bd60:	beq	1beac <__assert_fail@plt+0x9208>
   1bd64:	cmp	r8, #0
   1bd68:	add	r0, r6, #1
   1bd6c:	beq	1bf08 <__assert_fail@plt+0x9264>
   1bd70:	bl	12a40 <gcry_xstrdup@plt>
   1bd74:	mov	sl, r0
   1bd78:	mov	r1, #47	; 0x2f
   1bd7c:	mov	r0, sl
   1bd80:	bl	128fc <strchr@plt>
   1bd84:	cmp	r0, #0
   1bd88:	movne	r3, #0
   1bd8c:	strbne	r3, [r0]
   1bd90:	mov	r0, sl
   1bd94:	bl	128d8 <strlen@plt>
   1bd98:	mov	r1, sl
   1bd9c:	mov	r4, r0
   1bda0:	mov	r0, r8
   1bda4:	bl	1baac <__assert_fail@plt+0x8e08>
   1bda8:	mov	fp, r0
   1bdac:	mov	r0, sl
   1bdb0:	bl	125e4 <gcry_free@plt>
   1bdb4:	cmp	fp, #0
   1bdb8:	beq	1bee4 <__assert_fail@plt+0x9240>
   1bdbc:	mov	r0, fp
   1bdc0:	bl	128d8 <strlen@plt>
   1bdc4:	add	r3, r4, #1
   1bdc8:	str	r3, [sp, #4]
   1bdcc:	mov	r4, fp
   1bdd0:	add	r5, r5, r0
   1bdd4:	b	1bc6c <__assert_fail@plt+0x8fc8>
   1bdd8:	cmp	r8, #0
   1bddc:	bne	1bfc4 <__assert_fail@plt+0x9320>
   1bde0:	mov	r0, #22
   1bde4:	mov	sl, r8
   1bde8:	bl	12b0c <gpg_err_set_errno@plt>
   1bdec:	b	1bd38 <__assert_fail@plt+0x9094>
   1bdf0:	bl	12458 <gcry_malloc@plt>
   1bdf4:	subs	sl, r0, #0
   1bdf8:	bne	1bc80 <__assert_fail@plt+0x8fdc>
   1bdfc:	mov	r0, fp
   1be00:	bl	125e4 <gcry_free@plt>
   1be04:	b	1bd38 <__assert_fail@plt+0x9094>
   1be08:	bl	22db4 <__assert_fail@plt+0x10110>
   1be0c:	subs	r5, r0, #0
   1be10:	beq	1bf70 <__assert_fail@plt+0x92cc>
   1be14:	bl	128d8 <strlen@plt>
   1be18:	mov	r4, r0
   1be1c:	mov	r0, sl
   1be20:	bl	128d8 <strlen@plt>
   1be24:	cmp	r8, #0
   1be28:	add	r0, r4, r0
   1be2c:	add	r0, r0, #2
   1be30:	beq	1bf18 <__assert_fail@plt+0x9274>
   1be34:	bl	12410 <gcry_xmalloc@plt>
   1be38:	mov	r4, r0
   1be3c:	ldrb	r3, [r5]
   1be40:	cmp	r3, #47	; 0x2f
   1be44:	bne	1be54 <__assert_fail@plt+0x91b0>
   1be48:	ldrb	r2, [r5, #1]
   1be4c:	cmp	r2, #0
   1be50:	beq	1bf3c <__assert_fail@plt+0x9298>
   1be54:	mov	r1, r5
   1be58:	mov	r0, r4
   1be5c:	bl	12608 <stpcpy@plt>
   1be60:	mov	r3, #47	; 0x2f
   1be64:	mov	r1, sl
   1be68:	strb	r3, [r0], #1
   1be6c:	bl	12764 <strcpy@plt>
   1be70:	mov	r0, r5
   1be74:	bl	125e4 <gcry_free@plt>
   1be78:	mov	r0, sl
   1be7c:	bl	125e4 <gcry_free@plt>
   1be80:	mov	r0, r4
   1be84:	bl	128d8 <strlen@plt>
   1be88:	cmp	r0, #2
   1be8c:	bls	1bea4 <__assert_fail@plt+0x9200>
   1be90:	sub	r3, r0, #2
   1be94:	add	r2, r4, r3
   1be98:	ldrb	r3, [r4, r3]
   1be9c:	cmp	r3, #47	; 0x2f
   1bea0:	beq	1bf50 <__assert_fail@plt+0x92ac>
   1bea4:	mov	sl, r4
   1bea8:	b	1bd38 <__assert_fail@plt+0x9094>
   1beac:	ldr	r0, [pc, #296]	; 1bfdc <__assert_fail@plt+0x9338>
   1beb0:	bl	127c4 <getenv@plt>
   1beb4:	subs	r4, r0, #0
   1beb8:	movne	fp, #0
   1bebc:	beq	1bfa8 <__assert_fail@plt+0x9304>
   1bec0:	ldrb	r3, [r4]
   1bec4:	cmp	r3, #0
   1bec8:	beq	1bee8 <__assert_fail@plt+0x9244>
   1becc:	mov	r0, r4
   1bed0:	bl	128d8 <strlen@plt>
   1bed4:	mov	r3, #1
   1bed8:	str	r3, [sp, #4]
   1bedc:	add	r5, r5, r0
   1bee0:	b	1bc6c <__assert_fail@plt+0x8fc8>
   1bee4:	mov	r4, fp
   1bee8:	mov	r3, #1
   1beec:	str	r3, [sp, #4]
   1bef0:	b	1bc6c <__assert_fail@plt+0x8fc8>
   1bef4:	mov	r1, r6
   1bef8:	mov	r0, sl
   1befc:	bl	12608 <stpcpy@plt>
   1bf00:	mov	r4, r0
   1bf04:	b	1bca4 <__assert_fail@plt+0x9000>
   1bf08:	bl	12c68 <gcry_strdup@plt>
   1bf0c:	subs	sl, r0, #0
   1bf10:	bne	1bd78 <__assert_fail@plt+0x90d4>
   1bf14:	b	1bd38 <__assert_fail@plt+0x9094>
   1bf18:	bl	12458 <gcry_malloc@plt>
   1bf1c:	subs	r4, r0, #0
   1bf20:	bne	1be3c <__assert_fail@plt+0x9198>
   1bf24:	mov	r0, r5
   1bf28:	bl	125e4 <gcry_free@plt>
   1bf2c:	mov	r0, sl
   1bf30:	bl	125e4 <gcry_free@plt>
   1bf34:	mov	sl, r8
   1bf38:	b	1bd38 <__assert_fail@plt+0x9094>
   1bf3c:	mov	r0, r4
   1bf40:	mov	r1, sl
   1bf44:	strb	r3, [r0], #1
   1bf48:	bl	12764 <strcpy@plt>
   1bf4c:	b	1be70 <__assert_fail@plt+0x91cc>
   1bf50:	add	r0, r4, r0
   1bf54:	ldrb	r3, [r0, #-1]
   1bf58:	cmp	r3, #46	; 0x2e
   1bf5c:	moveq	r3, #0
   1bf60:	moveq	sl, r4
   1bf64:	strbeq	r3, [r2]
   1bf68:	bne	1bea4 <__assert_fail@plt+0x9200>
   1bf6c:	b	1bd38 <__assert_fail@plt+0x9094>
   1bf70:	cmp	r8, #0
   1bf74:	beq	1bf2c <__assert_fail@plt+0x9288>
   1bf78:	ldr	r3, [pc, #96]	; 1bfe0 <__assert_fail@plt+0x933c>
   1bf7c:	ldr	r4, [r3]
   1bf80:	bl	12968 <__errno_location@plt>
   1bf84:	ldr	r0, [r0]
   1bf88:	bl	12818 <strerror@plt>
   1bf8c:	ldr	r2, [pc, #80]	; 1bfe4 <__assert_fail@plt+0x9340>
   1bf90:	mov	r1, #1
   1bf94:	mov	r3, r0
   1bf98:	mov	r0, r4
   1bf9c:	bl	12a34 <__fprintf_chk@plt>
   1bfa0:	mov	r0, #2
   1bfa4:	bl	128b4 <exit@plt>
   1bfa8:	mov	r1, r4
   1bfac:	mov	r0, r8
   1bfb0:	bl	1baac <__assert_fail@plt+0x8e08>
   1bfb4:	subs	fp, r0, #0
   1bfb8:	mov	r4, fp
   1bfbc:	beq	1bee8 <__assert_fail@plt+0x9244>
   1bfc0:	b	1bec0 <__assert_fail@plt+0x921c>
   1bfc4:	ldr	r2, [pc, #28]	; 1bfe8 <__assert_fail@plt+0x9344>
   1bfc8:	mov	r1, #432	; 0x1b0
   1bfcc:	ldr	r0, [pc, #24]	; 1bfec <__assert_fail@plt+0x9348>
   1bfd0:	bl	2201c <__assert_fail@plt+0xf378>
   1bfd4:	bl	1262c <__stack_chk_fail@plt>
   1bfd8:	strdeq	r5, [r4], -r8
   1bfdc:	andeq	r2, r3, ip, ror #12
   1bfe0:	strdeq	r6, [r4], -r8
   1bfe4:	andeq	r2, r3, r4, ror r6
   1bfe8:	andeq	r2, r3, r0, lsr r6
   1bfec:	andeq	r2, r3, r0, asr r6
   1bff0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bff4:	mov	fp, r1
   1bff8:	ldrb	r1, [r0]
   1bffc:	mov	r7, r0
   1c000:	mov	r6, r2
   1c004:	cmp	r1, #0
   1c008:	beq	1c1dc <__assert_fail@plt+0x9538>
   1c00c:	mov	r4, r0
   1c010:	mov	r5, #0
   1c014:	rsb	r8, r0, #1
   1c018:	b	1c030 <__assert_fail@plt+0x938c>
   1c01c:	add	r5, r5, #1
   1c020:	add	r0, r8, r4
   1c024:	ldrb	r1, [r4, #1]!
   1c028:	cmp	r1, #0
   1c02c:	beq	1c074 <__assert_fail@plt+0x93d0>
   1c030:	cmp	r1, #37	; 0x25
   1c034:	cmpne	r1, #58	; 0x3a
   1c038:	moveq	r3, #1
   1c03c:	movne	r3, #0
   1c040:	cmp	r1, #10
   1c044:	orreq	r3, r3, #1
   1c048:	cmp	r3, #0
   1c04c:	bne	1c01c <__assert_fail@plt+0x9378>
   1c050:	subs	r0, fp, #0
   1c054:	beq	1c020 <__assert_fail@plt+0x937c>
   1c058:	bl	128fc <strchr@plt>
   1c05c:	cmp	r0, #0
   1c060:	bne	1c01c <__assert_fail@plt+0x9378>
   1c064:	add	r0, r8, r4
   1c068:	ldrb	r1, [r4, #1]!
   1c06c:	cmp	r1, #0
   1c070:	bne	1c030 <__assert_fail@plt+0x938c>
   1c074:	add	r0, r0, r5, lsl #1
   1c078:	add	r0, r0, #1
   1c07c:	cmp	r6, #0
   1c080:	beq	1c1bc <__assert_fail@plt+0x9518>
   1c084:	bl	12410 <gcry_xmalloc@plt>
   1c088:	ldrb	r5, [r7]
   1c08c:	cmp	r5, #0
   1c090:	mov	r6, r0
   1c094:	beq	1c1d4 <__assert_fail@plt+0x9530>
   1c098:	mov	r4, #0
   1c09c:	mov	r3, #37	; 0x25
   1c0a0:	mov	r2, #97	; 0x61
   1c0a4:	b	1c120 <__assert_fail@plt+0x947c>
   1c0a8:	cmp	r5, #37	; 0x25
   1c0ac:	beq	1c16c <__assert_fail@plt+0x94c8>
   1c0b0:	cmp	r5, #10
   1c0b4:	beq	1c190 <__assert_fail@plt+0x94ec>
   1c0b8:	cmp	fp, #0
   1c0bc:	beq	1c1b0 <__assert_fail@plt+0x950c>
   1c0c0:	mov	r1, r5
   1c0c4:	mov	r0, fp
   1c0c8:	bl	128fc <strchr@plt>
   1c0cc:	mov	r3, #37	; 0x25
   1c0d0:	mov	r2, #97	; 0x61
   1c0d4:	cmp	r0, #0
   1c0d8:	beq	1c1b0 <__assert_fail@plt+0x950c>
   1c0dc:	lsr	r1, r5, #4
   1c0e0:	cmp	r1, #9
   1c0e4:	addls	r1, r1, #48	; 0x30
   1c0e8:	addhi	r1, r1, #87	; 0x57
   1c0ec:	and	r5, r5, #15
   1c0f0:	strb	r3, [sl]
   1c0f4:	strb	r1, [r8]
   1c0f8:	add	r1, r4, #2
   1c0fc:	add	r4, r4, #3
   1c100:	cmp	r5, #9
   1c104:	add	r8, r6, r4
   1c108:	addls	r5, r5, #48	; 0x30
   1c10c:	addhi	r5, r5, #87	; 0x57
   1c110:	strb	r5, [r6, r1]
   1c114:	ldrb	r5, [r7, #1]!
   1c118:	cmp	r5, #0
   1c11c:	beq	1c15c <__assert_fail@plt+0x94b8>
   1c120:	add	r9, r4, #1
   1c124:	cmp	r5, #58	; 0x3a
   1c128:	add	r8, r6, r9
   1c12c:	add	sl, r6, r4
   1c130:	bne	1c0a8 <__assert_fail@plt+0x9404>
   1c134:	add	r1, r4, #2
   1c138:	mov	r0, #51	; 0x33
   1c13c:	strb	r3, [r6, r4]
   1c140:	strb	r0, [r6, r9]
   1c144:	strb	r2, [r6, r1]
   1c148:	ldrb	r5, [r7, #1]!
   1c14c:	add	r4, r4, #3
   1c150:	add	r8, r6, r4
   1c154:	cmp	r5, #0
   1c158:	bne	1c120 <__assert_fail@plt+0x947c>
   1c15c:	mov	r3, #0
   1c160:	strb	r3, [r8]
   1c164:	mov	r0, r6
   1c168:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c16c:	add	r1, r4, #2
   1c170:	mov	r0, #50	; 0x32
   1c174:	strb	r5, [sl]
   1c178:	add	r4, r4, #3
   1c17c:	strb	r0, [r8]
   1c180:	mov	r0, #53	; 0x35
   1c184:	strb	r0, [r6, r1]
   1c188:	add	r8, r6, r4
   1c18c:	b	1c114 <__assert_fail@plt+0x9470>
   1c190:	add	r1, r4, #2
   1c194:	mov	r0, #48	; 0x30
   1c198:	add	r4, r4, #3
   1c19c:	strb	r3, [sl]
   1c1a0:	strb	r0, [r8]
   1c1a4:	strb	r2, [r6, r1]
   1c1a8:	add	r8, r6, r4
   1c1ac:	b	1c114 <__assert_fail@plt+0x9470>
   1c1b0:	mov	r4, r9
   1c1b4:	strb	r5, [sl]
   1c1b8:	b	1c114 <__assert_fail@plt+0x9470>
   1c1bc:	bl	12458 <gcry_malloc@plt>
   1c1c0:	subs	r6, r0, #0
   1c1c4:	beq	1c164 <__assert_fail@plt+0x94c0>
   1c1c8:	ldrb	r5, [r7]
   1c1cc:	cmp	r5, #0
   1c1d0:	bne	1c098 <__assert_fail@plt+0x93f4>
   1c1d4:	mov	r8, r6
   1c1d8:	b	1c15c <__assert_fail@plt+0x94b8>
   1c1dc:	mov	r0, #1
   1c1e0:	b	1c07c <__assert_fail@plt+0x93d8>
   1c1e4:	ldrb	r3, [r0]
   1c1e8:	mov	r2, r0
   1c1ec:	cmp	r3, #0
   1c1f0:	beq	1c224 <__assert_fail@plt+0x9580>
   1c1f4:	mov	r0, #0
   1c1f8:	and	r3, r3, #192	; 0xc0
   1c1fc:	cmp	r3, #128	; 0x80
   1c200:	addne	r0, r0, #1
   1c204:	cmn	r1, #1
   1c208:	beq	1c214 <__assert_fail@plt+0x9570>
   1c20c:	subs	r1, r1, #1
   1c210:	bxeq	lr
   1c214:	ldrb	r3, [r2, #1]!
   1c218:	cmp	r3, #0
   1c21c:	bne	1c1f8 <__assert_fail@plt+0x9554>
   1c220:	bx	lr
   1c224:	mov	r0, r3
   1c228:	bx	lr
   1c22c:	cmp	r2, #0
   1c230:	beq	1c298 <__assert_fail@plt+0x95f4>
   1c234:	add	r2, r0, r2
   1c238:	push	{r4, r5, r6, lr}
   1c23c:	sub	r0, r0, #1
   1c240:	sub	r6, r2, #1
   1c244:	sub	r1, r1, #1
   1c248:	ldrb	lr, [r0, #1]!
   1c24c:	ldrb	ip, [r1, #1]!
   1c250:	mov	r2, lr
   1c254:	cmp	lr, ip
   1c258:	mov	r3, ip
   1c25c:	sub	r5, lr, #97	; 0x61
   1c260:	sub	r4, ip, #97	; 0x61
   1c264:	beq	1c280 <__assert_fail@plt+0x95dc>
   1c268:	cmp	r5, #25
   1c26c:	bicls	r2, lr, #32
   1c270:	cmp	r4, #25
   1c274:	bicls	r3, ip, #32
   1c278:	cmp	r3, r2
   1c27c:	bne	1c290 <__assert_fail@plt+0x95ec>
   1c280:	cmp	r0, r6
   1c284:	bne	1c248 <__assert_fail@plt+0x95a4>
   1c288:	mov	r0, #0
   1c28c:	pop	{r4, r5, r6, pc}
   1c290:	sub	r0, r2, r3
   1c294:	pop	{r4, r5, r6, pc}
   1c298:	mov	r0, r2
   1c29c:	bx	lr
   1c2a0:	push	{r4, r5, r6, lr}
   1c2a4:	mov	r4, r0
   1c2a8:	mov	r0, r1
   1c2ac:	mov	r6, r1
   1c2b0:	bl	128d8 <strlen@plt>
   1c2b4:	mov	r1, r6
   1c2b8:	mov	r2, r0
   1c2bc:	mov	r5, r0
   1c2c0:	mov	r0, r4
   1c2c4:	bl	12c2c <strncmp@plt>
   1c2c8:	cmp	r0, #0
   1c2cc:	bne	1c31c <__assert_fail@plt+0x9678>
   1c2d0:	ldrb	r2, [r4, r5]
   1c2d4:	add	r0, r4, r5
   1c2d8:	tst	r2, #223	; 0xdf
   1c2dc:	sub	r3, r2, #9
   1c2e0:	clz	r3, r3
   1c2e4:	lsr	r3, r3, #5
   1c2e8:	movne	r1, r3
   1c2ec:	moveq	r1, #1
   1c2f0:	cmp	r1, #0
   1c2f4:	beq	1c31c <__assert_fail@plt+0x9678>
   1c2f8:	cmp	r2, #32
   1c2fc:	orreq	r3, r3, #1
   1c300:	cmp	r3, #0
   1c304:	popeq	{r4, r5, r6, pc}
   1c308:	ldrb	r3, [r0, #1]!
   1c30c:	cmp	r3, #9
   1c310:	cmpne	r3, #32
   1c314:	beq	1c308 <__assert_fail@plt+0x9664>
   1c318:	pop	{r4, r5, r6, pc}
   1c31c:	mov	r0, #0
   1c320:	pop	{r4, r5, r6, pc}
   1c324:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c328:	subs	r5, r1, #0
   1c32c:	beq	1c3d8 <__assert_fail@plt+0x9734>
   1c330:	mov	r4, r0
   1c334:	mov	r8, r2
   1c338:	bl	12854 <__ctype_toupper_loc@plt>
   1c33c:	ldrb	r3, [r8]
   1c340:	mov	r1, r5
   1c344:	add	r9, r4, r1
   1c348:	mov	r5, r4
   1c34c:	ldr	r0, [r0]
   1c350:	ldr	sl, [r0, r3, lsl #2]
   1c354:	b	1c368 <__assert_fail@plt+0x96c4>
   1c358:	cmp	lr, #0
   1c35c:	beq	1c3e0 <__assert_fail@plt+0x973c>
   1c360:	mov	r1, lr
   1c364:	mov	r5, r3
   1c368:	mov	r3, r5
   1c36c:	sub	lr, r1, #1
   1c370:	ldrb	r2, [r3], #1
   1c374:	ldr	r2, [r0, r2, lsl #2]
   1c378:	cmp	r2, sl
   1c37c:	bne	1c358 <__assert_fail@plt+0x96b4>
   1c380:	cmp	r3, r9
   1c384:	add	r4, r8, #1
   1c388:	ldrb	ip, [r8, #1]
   1c38c:	beq	1c3ec <__assert_fail@plt+0x9748>
   1c390:	ldrb	r6, [r3]
   1c394:	ldr	r2, [r0, ip, lsl #2]
   1c398:	ldr	r6, [r0, r6, lsl #2]
   1c39c:	cmp	r6, r2
   1c3a0:	bne	1c3d0 <__assert_fail@plt+0x972c>
   1c3a4:	add	fp, r5, r1
   1c3a8:	add	r1, r3, #1
   1c3ac:	b	1c3c4 <__assert_fail@plt+0x9720>
   1c3b0:	ldrb	r2, [r1], #1
   1c3b4:	ldr	r6, [r0, ip, lsl #2]
   1c3b8:	ldr	r7, [r0, r2, lsl #2]
   1c3bc:	cmp	r7, r6
   1c3c0:	bne	1c3d0 <__assert_fail@plt+0x972c>
   1c3c4:	cmp	fp, r1
   1c3c8:	ldrb	ip, [r4, #1]!
   1c3cc:	bne	1c3b0 <__assert_fail@plt+0x970c>
   1c3d0:	cmp	ip, #0
   1c3d4:	bne	1c360 <__assert_fail@plt+0x96bc>
   1c3d8:	mov	r0, r5
   1c3dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3e0:	mov	r5, lr
   1c3e4:	mov	r0, r5
   1c3e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3ec:	cmp	ip, #0
   1c3f0:	bne	1c358 <__assert_fail@plt+0x96b4>
   1c3f4:	b	1c3d8 <__assert_fail@plt+0x9734>
   1c3f8:	cmp	r1, #0
   1c3fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c400:	beq	1c450 <__assert_fail@plt+0x97ac>
   1c404:	ldrb	r6, [r2]
   1c408:	add	r8, r1, #1
   1c40c:	add	r8, r2, r8
   1c410:	sub	r3, r6, #97	; 0x61
   1c414:	cmp	r3, #25
   1c418:	add	r8, r0, r8
   1c41c:	andls	r6, r6, #223	; 0xdf
   1c420:	add	r7, r0, r1
   1c424:	ldrb	r1, [r0]
   1c428:	add	r3, r0, #1
   1c42c:	mov	r9, r0
   1c430:	sub	r0, r1, #97	; 0x61
   1c434:	cmp	r0, #25
   1c438:	bicls	r1, r1, #32
   1c43c:	cmp	r6, r1
   1c440:	mov	r0, r3
   1c444:	beq	1c45c <__assert_fail@plt+0x97b8>
   1c448:	cmp	r7, r3
   1c44c:	bne	1c424 <__assert_fail@plt+0x9780>
   1c450:	mov	r9, #0
   1c454:	mov	r0, r9
   1c458:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c45c:	cmp	r3, r7
   1c460:	add	lr, r2, #1
   1c464:	ldrb	ip, [r2, #1]
   1c468:	beq	1c4bc <__assert_fail@plt+0x9818>
   1c46c:	sub	sl, r8, r3
   1c470:	b	1c480 <__assert_fail@plt+0x97dc>
   1c474:	ldrb	ip, [lr, #1]!
   1c478:	cmp	lr, sl
   1c47c:	beq	1c4ac <__assert_fail@plt+0x9808>
   1c480:	ldrb	r1, [r3]
   1c484:	sub	r4, ip, #97	; 0x61
   1c488:	add	r3, r3, #1
   1c48c:	sub	r5, r1, #97	; 0x61
   1c490:	cmp	r5, #25
   1c494:	bicls	r1, r1, #32
   1c498:	cmp	r4, #25
   1c49c:	mov	r4, ip
   1c4a0:	bicls	r4, ip, #32
   1c4a4:	cmp	r4, r1
   1c4a8:	beq	1c474 <__assert_fail@plt+0x97d0>
   1c4ac:	cmp	ip, #0
   1c4b0:	bne	1c424 <__assert_fail@plt+0x9780>
   1c4b4:	mov	r0, r9
   1c4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c4bc:	cmp	ip, #0
   1c4c0:	bne	1c450 <__assert_fail@plt+0x97ac>
   1c4c4:	b	1c454 <__assert_fail@plt+0x97b0>
   1c4c8:	push	{r4, lr}
   1c4cc:	subs	r4, r2, #0
   1c4d0:	sub	sp, sp, #8
   1c4d4:	beq	1c528 <__assert_fail@plt+0x9884>
   1c4d8:	cmp	r0, #0
   1c4dc:	beq	1c530 <__assert_fail@plt+0x988c>
   1c4e0:	cmp	r4, #1
   1c4e4:	beq	1c544 <__assert_fail@plt+0x98a0>
   1c4e8:	ldrb	r3, [r1]
   1c4ec:	cmp	r3, #0
   1c4f0:	beq	1c544 <__assert_fail@plt+0x98a0>
   1c4f4:	sub	ip, r1, #1
   1c4f8:	add	r2, ip, r4
   1c4fc:	add	r1, r1, #1
   1c500:	mov	ip, r0
   1c504:	b	1c514 <__assert_fail@plt+0x9870>
   1c508:	ldrb	r3, [r1], #1
   1c50c:	cmp	r3, #0
   1c510:	beq	1c520 <__assert_fail@plt+0x987c>
   1c514:	cmp	r1, r2
   1c518:	strb	r3, [ip], #1
   1c51c:	bne	1c508 <__assert_fail@plt+0x9864>
   1c520:	mov	r3, #0
   1c524:	strb	r3, [ip]
   1c528:	add	sp, sp, #8
   1c52c:	pop	{r4, pc}
   1c530:	mov	r0, r4
   1c534:	str	r1, [sp, #4]
   1c538:	bl	12410 <gcry_xmalloc@plt>
   1c53c:	ldr	r1, [sp, #4]
   1c540:	b	1c4e0 <__assert_fail@plt+0x983c>
   1c544:	mov	ip, r0
   1c548:	b	1c520 <__assert_fail@plt+0x987c>
   1c54c:	push	{r4, r5, r6, lr}
   1c550:	mov	r5, r0
   1c554:	ldrb	r4, [r0]
   1c558:	cmp	r4, #0
   1c55c:	beq	1c5d8 <__assert_fail@plt+0x9934>
   1c560:	bl	12884 <__ctype_b_loc@plt>
   1c564:	mov	r1, r5
   1c568:	ldr	r2, [r0]
   1c56c:	b	1c57c <__assert_fail@plt+0x98d8>
   1c570:	ldrb	r4, [r1, #1]!
   1c574:	cmp	r4, #0
   1c578:	beq	1c5e0 <__assert_fail@plt+0x993c>
   1c57c:	lsl	r4, r4, #1
   1c580:	ldrh	r3, [r2, r4]
   1c584:	ands	r3, r3, #8192	; 0x2000
   1c588:	bne	1c570 <__assert_fail@plt+0x98cc>
   1c58c:	ldrb	r2, [r1]
   1c590:	cmp	r2, #0
   1c594:	strb	r2, [r5]
   1c598:	movne	ip, r5
   1c59c:	beq	1c5d8 <__assert_fail@plt+0x9934>
   1c5a0:	ldr	lr, [r0]
   1c5a4:	lsl	r2, r2, #1
   1c5a8:	ldrh	r2, [lr, r2]
   1c5ac:	ands	r2, r2, #8192	; 0x2000
   1c5b0:	moveq	r3, r2
   1c5b4:	beq	1c5c0 <__assert_fail@plt+0x991c>
   1c5b8:	cmp	r3, #0
   1c5bc:	moveq	r3, ip
   1c5c0:	ldrb	r2, [r1, #1]!
   1c5c4:	cmp	r2, #0
   1c5c8:	strb	r2, [ip, #1]!
   1c5cc:	bne	1c5a0 <__assert_fail@plt+0x98fc>
   1c5d0:	cmp	r3, #0
   1c5d4:	strbne	r2, [r3]
   1c5d8:	mov	r0, r5
   1c5dc:	pop	{r4, r5, r6, pc}
   1c5e0:	strb	r4, [r5]
   1c5e4:	mov	r0, r5
   1c5e8:	pop	{r4, r5, r6, pc}
   1c5ec:	push	{r4, r5, r6, lr}
   1c5f0:	mov	r5, r0
   1c5f4:	ldrb	r4, [r0]
   1c5f8:	cmp	r4, #0
   1c5fc:	beq	1c640 <__assert_fail@plt+0x999c>
   1c600:	bl	12884 <__ctype_b_loc@plt>
   1c604:	mov	r2, r5
   1c608:	mov	r1, #0
   1c60c:	ldr	r0, [r0]
   1c610:	lsl	r4, r4, #1
   1c614:	ldrh	r3, [r0, r4]
   1c618:	ands	r3, r3, #8192	; 0x2000
   1c61c:	moveq	r1, r3
   1c620:	beq	1c62c <__assert_fail@plt+0x9988>
   1c624:	cmp	r1, #0
   1c628:	moveq	r1, r2
   1c62c:	ldrb	r4, [r2, #1]!
   1c630:	cmp	r4, #0
   1c634:	bne	1c610 <__assert_fail@plt+0x996c>
   1c638:	cmp	r1, #0
   1c63c:	strbne	r4, [r1]
   1c640:	mov	r0, r5
   1c644:	pop	{r4, r5, r6, pc}
   1c648:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c64c:	subs	r9, r1, #0
   1c650:	beq	1c6b0 <__assert_fail@plt+0x9a0c>
   1c654:	mov	r7, r2
   1c658:	mov	sl, r0
   1c65c:	mov	r4, r0
   1c660:	add	r8, r0, r9
   1c664:	mov	r5, #0
   1c668:	ldrb	r1, [r4]
   1c66c:	mov	r0, r7
   1c670:	bl	128fc <strchr@plt>
   1c674:	mov	r6, r4
   1c678:	add	r4, r4, #1
   1c67c:	cmp	r0, #0
   1c680:	moveq	r5, r0
   1c684:	beq	1c690 <__assert_fail@plt+0x99ec>
   1c688:	cmp	r5, #0
   1c68c:	moveq	r5, r6
   1c690:	cmp	r4, r8
   1c694:	bne	1c668 <__assert_fail@plt+0x99c4>
   1c698:	cmp	r5, #0
   1c69c:	beq	1c6b0 <__assert_fail@plt+0x9a0c>
   1c6a0:	mov	r3, #0
   1c6a4:	sub	r0, r5, sl
   1c6a8:	strb	r3, [r5]
   1c6ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c6b0:	mov	r0, r9
   1c6b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c6b8:	ldr	r2, [pc]	; 1c6c0 <__assert_fail@plt+0x9a1c>
   1c6bc:	b	1c648 <__assert_fail@plt+0x99a4>
   1c6c0:	andeq	r2, r3, r4, lsl r0
   1c6c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c6c8:	subs	r9, r1, #0
   1c6cc:	beq	1c724 <__assert_fail@plt+0x9a80>
   1c6d0:	mov	r7, r2
   1c6d4:	mov	sl, r0
   1c6d8:	mov	r4, r0
   1c6dc:	add	r8, r0, r9
   1c6e0:	mov	r6, #0
   1c6e4:	ldrb	r1, [r4]
   1c6e8:	mov	r0, r7
   1c6ec:	bl	128fc <strchr@plt>
   1c6f0:	mov	r5, r4
   1c6f4:	add	r4, r4, #1
   1c6f8:	cmp	r0, #0
   1c6fc:	moveq	r6, r0
   1c700:	beq	1c70c <__assert_fail@plt+0x9a68>
   1c704:	cmp	r6, #0
   1c708:	moveq	r6, r5
   1c70c:	cmp	r4, r8
   1c710:	bne	1c6e4 <__assert_fail@plt+0x9a40>
   1c714:	cmp	r6, #0
   1c718:	beq	1c724 <__assert_fail@plt+0x9a80>
   1c71c:	sub	r0, r6, sl
   1c720:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c724:	mov	r0, r9
   1c728:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c72c:	ldr	r2, [pc]	; 1c734 <__assert_fail@plt+0x9a90>
   1c730:	b	1c6c4 <__assert_fail@plt+0x9a20>
   1c734:	andeq	r2, r3, r4, lsl r0
   1c738:	push	{r4, lr}
   1c73c:	mov	r1, #47	; 0x2f
   1c740:	mov	r4, r0
   1c744:	bl	12adc <strrchr@plt>
   1c748:	cmp	r0, #0
   1c74c:	beq	1c75c <__assert_fail@plt+0x9ab8>
   1c750:	add	r0, r0, #1
   1c754:	pop	{r4, lr}
   1c758:	b	12a40 <gcry_xstrdup@plt>
   1c75c:	mov	r0, r4
   1c760:	pop	{r4, lr}
   1c764:	b	12a40 <gcry_xstrdup@plt>
   1c768:	push	{r4, r5, r6, lr}
   1c76c:	mov	r1, #47	; 0x2f
   1c770:	mov	r5, r0
   1c774:	bl	12adc <strrchr@plt>
   1c778:	cmp	r0, #0
   1c77c:	beq	1c7a4 <__assert_fail@plt+0x9b00>
   1c780:	sub	r4, r0, r5
   1c784:	add	r0, r4, #1
   1c788:	bl	12410 <gcry_xmalloc@plt>
   1c78c:	mov	r2, r4
   1c790:	mov	r1, r5
   1c794:	bl	129c8 <strncpy@plt>
   1c798:	mov	r2, #0
   1c79c:	strb	r2, [r0, r4]
   1c7a0:	pop	{r4, r5, r6, pc}
   1c7a4:	ldr	r0, [pc, #4]	; 1c7b0 <__assert_fail@plt+0x9b0c>
   1c7a8:	pop	{r4, r5, r6, lr}
   1c7ac:	b	12a40 <gcry_xstrdup@plt>
   1c7b0:	andeq	r2, r3, r0, lsl #26
   1c7b4:	push	{r0, r1, r2, r3}
   1c7b8:	mov	r0, #1
   1c7bc:	push	{r4, lr}
   1c7c0:	sub	sp, sp, #8
   1c7c4:	ldr	r4, [pc, #60]	; 1c808 <__assert_fail@plt+0x9b64>
   1c7c8:	add	r3, sp, #20
   1c7cc:	mov	r2, r3
   1c7d0:	ldr	ip, [r4]
   1c7d4:	ldr	r1, [sp, #16]
   1c7d8:	str	r3, [sp]
   1c7dc:	str	ip, [sp, #4]
   1c7e0:	bl	1bbcc <__assert_fail@plt+0x8f28>
   1c7e4:	ldr	r2, [sp, #4]
   1c7e8:	ldr	r3, [r4]
   1c7ec:	cmp	r2, r3
   1c7f0:	bne	1c804 <__assert_fail@plt+0x9b60>
   1c7f4:	add	sp, sp, #8
   1c7f8:	pop	{r4, lr}
   1c7fc:	add	sp, sp, #16
   1c800:	bx	lr
   1c804:	bl	1262c <__stack_chk_fail@plt>
   1c808:	strdeq	r5, [r4], -r8
   1c80c:	push	{r0, r1, r2, r3}
   1c810:	mov	r0, #0
   1c814:	push	{r4, lr}
   1c818:	sub	sp, sp, #8
   1c81c:	ldr	r4, [pc, #60]	; 1c860 <__assert_fail@plt+0x9bbc>
   1c820:	add	r3, sp, #20
   1c824:	mov	r2, r3
   1c828:	ldr	ip, [r4]
   1c82c:	ldr	r1, [sp, #16]
   1c830:	str	r3, [sp]
   1c834:	str	ip, [sp, #4]
   1c838:	bl	1bbcc <__assert_fail@plt+0x8f28>
   1c83c:	ldr	r2, [sp, #4]
   1c840:	ldr	r3, [r4]
   1c844:	cmp	r2, r3
   1c848:	bne	1c85c <__assert_fail@plt+0x9bb8>
   1c84c:	add	sp, sp, #8
   1c850:	pop	{r4, lr}
   1c854:	add	sp, sp, #16
   1c858:	bx	lr
   1c85c:	bl	1262c <__stack_chk_fail@plt>
   1c860:	strdeq	r5, [r4], -r8
   1c864:	push	{r0, r1, r2, r3}
   1c868:	mov	r0, #3
   1c86c:	push	{r4, lr}
   1c870:	sub	sp, sp, #8
   1c874:	ldr	r4, [pc, #60]	; 1c8b8 <__assert_fail@plt+0x9c14>
   1c878:	add	r3, sp, #20
   1c87c:	mov	r2, r3
   1c880:	ldr	ip, [r4]
   1c884:	ldr	r1, [sp, #16]
   1c888:	str	r3, [sp]
   1c88c:	str	ip, [sp, #4]
   1c890:	bl	1bbcc <__assert_fail@plt+0x8f28>
   1c894:	ldr	r2, [sp, #4]
   1c898:	ldr	r3, [r4]
   1c89c:	cmp	r2, r3
   1c8a0:	bne	1c8b4 <__assert_fail@plt+0x9c10>
   1c8a4:	add	sp, sp, #8
   1c8a8:	pop	{r4, lr}
   1c8ac:	add	sp, sp, #16
   1c8b0:	bx	lr
   1c8b4:	bl	1262c <__stack_chk_fail@plt>
   1c8b8:	strdeq	r5, [r4], -r8
   1c8bc:	push	{r0, r1, r2, r3}
   1c8c0:	mov	r0, #2
   1c8c4:	push	{r4, lr}
   1c8c8:	sub	sp, sp, #8
   1c8cc:	ldr	r4, [pc, #60]	; 1c910 <__assert_fail@plt+0x9c6c>
   1c8d0:	add	r3, sp, #20
   1c8d4:	mov	r2, r3
   1c8d8:	ldr	ip, [r4]
   1c8dc:	ldr	r1, [sp, #16]
   1c8e0:	str	r3, [sp]
   1c8e4:	str	ip, [sp, #4]
   1c8e8:	bl	1bbcc <__assert_fail@plt+0x8f28>
   1c8ec:	ldr	r2, [sp, #4]
   1c8f0:	ldr	r3, [r4]
   1c8f4:	cmp	r2, r3
   1c8f8:	bne	1c90c <__assert_fail@plt+0x9c68>
   1c8fc:	add	sp, sp, #8
   1c900:	pop	{r4, lr}
   1c904:	add	sp, sp, #16
   1c908:	bx	lr
   1c90c:	bl	1262c <__stack_chk_fail@plt>
   1c910:	strdeq	r5, [r4], -r8
   1c914:	b	124b8 <strcmp@plt>
   1c918:	push	{r4, r5, r6, lr}
   1c91c:	mov	lr, r0
   1c920:	ldrb	ip, [r0]
   1c924:	cmp	ip, #9
   1c928:	cmpne	ip, #32
   1c92c:	bne	1c940 <__assert_fail@plt+0x9c9c>
   1c930:	ldrb	ip, [lr, #1]!
   1c934:	cmp	ip, #9
   1c938:	cmpne	ip, #32
   1c93c:	beq	1c930 <__assert_fail@plt+0x9c8c>
   1c940:	sub	r6, ip, #48	; 0x30
   1c944:	mov	r0, #0
   1c948:	uxtb	r3, r6
   1c94c:	cmp	r3, #9
   1c950:	mov	r1, #0
   1c954:	pophi	{r4, r5, r6, pc}
   1c958:	lsl	r2, r1, #2
   1c95c:	lsl	r3, r0, #2
   1c960:	adds	r3, r3, r0
   1c964:	orr	r2, r2, r0, lsr #30
   1c968:	ldrb	ip, [lr, #1]!
   1c96c:	adc	r2, r2, r1
   1c970:	adds	r4, r3, r3
   1c974:	adc	r5, r2, r2
   1c978:	adds	r0, r4, r6
   1c97c:	adc	r1, r5, r6, asr #31
   1c980:	sub	r6, ip, #48	; 0x30
   1c984:	uxtb	r3, r6
   1c988:	cmp	r3, #9
   1c98c:	bls	1c958 <__assert_fail@plt+0x9cb4>
   1c990:	pop	{r4, r5, r6, pc}
   1c994:	ldrb	r2, [r0]
   1c998:	sub	r3, r2, #48	; 0x30
   1c99c:	uxtb	r1, r3
   1c9a0:	cmp	r1, #9
   1c9a4:	bls	1c9cc <__assert_fail@plt+0x9d28>
   1c9a8:	sub	r3, r2, #65	; 0x41
   1c9ac:	cmp	r3, #5
   1c9b0:	subls	r3, r2, #55	; 0x37
   1c9b4:	lslls	r3, r3, #4
   1c9b8:	bls	1c9d0 <__assert_fail@plt+0x9d2c>
   1c9bc:	sub	r3, r2, #97	; 0x61
   1c9c0:	cmp	r3, #5
   1c9c4:	bhi	1ca14 <__assert_fail@plt+0x9d70>
   1c9c8:	sub	r3, r2, #87	; 0x57
   1c9cc:	lsl	r3, r3, #4
   1c9d0:	ldrb	r2, [r0, #1]
   1c9d4:	sub	r0, r2, #48	; 0x30
   1c9d8:	uxtb	r1, r0
   1c9dc:	cmp	r1, #9
   1c9e0:	bls	1c9f4 <__assert_fail@plt+0x9d50>
   1c9e4:	sub	r1, r2, #65	; 0x41
   1c9e8:	cmp	r1, #5
   1c9ec:	bhi	1c9fc <__assert_fail@plt+0x9d58>
   1c9f0:	sub	r0, r2, #55	; 0x37
   1c9f4:	add	r0, r0, r3
   1c9f8:	bx	lr
   1c9fc:	sub	r1, r2, #97	; 0x61
   1ca00:	cmp	r1, #5
   1ca04:	bhi	1ca14 <__assert_fail@plt+0x9d70>
   1ca08:	sub	r0, r2, #87	; 0x57
   1ca0c:	add	r0, r0, r3
   1ca10:	bx	lr
   1ca14:	mvn	r0, #0
   1ca18:	bx	lr
   1ca1c:	subs	r3, r1, #0
   1ca20:	beq	1ca28 <__assert_fail@plt+0x9d84>
   1ca24:	b	1c1e4 <__assert_fail@plt+0x9540>
   1ca28:	mov	r0, r3
   1ca2c:	bx	lr
   1ca30:	sub	r0, r0, #65	; 0x41
   1ca34:	cmp	r0, #25
   1ca38:	movhi	r0, #0
   1ca3c:	movls	r0, #1
   1ca40:	bx	lr
   1ca44:	sub	r0, r0, #97	; 0x61
   1ca48:	cmp	r0, #25
   1ca4c:	movhi	r0, #0
   1ca50:	movls	r0, #1
   1ca54:	bx	lr
   1ca58:	sub	r3, r0, #97	; 0x61
   1ca5c:	cmp	r3, #25
   1ca60:	bicls	r0, r0, #32
   1ca64:	bx	lr
   1ca68:	sub	r3, r0, #65	; 0x41
   1ca6c:	cmp	r3, #25
   1ca70:	orrls	r0, r0, #32
   1ca74:	bx	lr
   1ca78:	ldrb	r3, [r0]
   1ca7c:	cmp	r3, #0
   1ca80:	bxeq	lr
   1ca84:	mov	r1, r0
   1ca88:	tst	r3, #128	; 0x80
   1ca8c:	moveq	r2, #1
   1ca90:	movne	r2, #0
   1ca94:	sub	ip, r3, #65	; 0x41
   1ca98:	cmp	ip, #25
   1ca9c:	movhi	r2, #0
   1caa0:	andls	r2, r2, #1
   1caa4:	cmp	r2, #0
   1caa8:	orrne	r3, r3, #32
   1caac:	strbne	r3, [r1]
   1cab0:	ldrb	r3, [r1, #1]!
   1cab4:	cmp	r3, #0
   1cab8:	bne	1ca88 <__assert_fail@plt+0x9de4>
   1cabc:	bx	lr
   1cac0:	cmp	r0, r1
   1cac4:	beq	1cb80 <__assert_fail@plt+0x9edc>
   1cac8:	push	{r4, r5, lr}
   1cacc:	ldrb	r2, [r0]
   1cad0:	ldrb	r3, [r1]
   1cad4:	cmp	r2, #0
   1cad8:	bne	1cb20 <__assert_fail@plt+0x9e7c>
   1cadc:	b	1cb54 <__assert_fail@plt+0x9eb0>
   1cae0:	cmp	r3, r2
   1cae4:	sub	ip, r2, #97	; 0x61
   1cae8:	beq	1cb10 <__assert_fail@plt+0x9e6c>
   1caec:	cmp	ip, #25
   1caf0:	sub	r4, r3, #97	; 0x61
   1caf4:	mov	lr, r2
   1caf8:	bicls	lr, r2, #32
   1cafc:	cmp	r4, #25
   1cb00:	bicls	r3, r3, #32
   1cb04:	cmp	r3, lr
   1cb08:	mov	r5, r2
   1cb0c:	bne	1cb68 <__assert_fail@plt+0x9ec4>
   1cb10:	ldrb	r2, [r0, #1]!
   1cb14:	ldrb	r3, [r1, #1]!
   1cb18:	cmp	r2, #0
   1cb1c:	beq	1cb54 <__assert_fail@plt+0x9eb0>
   1cb20:	cmp	r3, #0
   1cb24:	bne	1cae0 <__assert_fail@plt+0x9e3c>
   1cb28:	sub	r3, r2, #97	; 0x61
   1cb2c:	cmp	r3, #25
   1cb30:	mov	r5, r2
   1cb34:	mov	r3, #0
   1cb38:	bhi	1cb4c <__assert_fail@plt+0x9ea8>
   1cb3c:	bic	r5, r2, #32
   1cb40:	sub	r2, r3, #97	; 0x61
   1cb44:	cmp	r2, #25
   1cb48:	bicls	r3, r3, #32
   1cb4c:	sub	r0, r5, r3
   1cb50:	pop	{r4, r5, pc}
   1cb54:	cmp	r3, #0
   1cb58:	movne	r5, #0
   1cb5c:	bne	1cb40 <__assert_fail@plt+0x9e9c>
   1cb60:	mov	r0, #0
   1cb64:	pop	{r4, r5, pc}
   1cb68:	ldrb	r3, [r1]
   1cb6c:	cmp	r3, r2
   1cb70:	beq	1cb60 <__assert_fail@plt+0x9ebc>
   1cb74:	cmp	ip, #25
   1cb78:	bls	1cb3c <__assert_fail@plt+0x9e98>
   1cb7c:	b	1cb40 <__assert_fail@plt+0x9e9c>
   1cb80:	mov	r0, #0
   1cb84:	bx	lr
   1cb88:	cmp	r2, #0
   1cb8c:	cmpne	r0, r1
   1cb90:	beq	1cbf8 <__assert_fail@plt+0x9f54>
   1cb94:	push	{r4, r5, lr}
   1cb98:	sub	r1, r1, #1
   1cb9c:	sub	r4, r0, #1
   1cba0:	b	1cbac <__assert_fail@plt+0x9f08>
   1cba4:	cmp	r3, ip
   1cba8:	bne	1cbf0 <__assert_fail@plt+0x9f4c>
   1cbac:	ldrb	r3, [r4, #1]!
   1cbb0:	sub	ip, r3, #65	; 0x41
   1cbb4:	cmp	ip, #25
   1cbb8:	ldrb	ip, [r1, #1]!
   1cbbc:	mvn	lr, r4
   1cbc0:	add	lr, lr, r2
   1cbc4:	sub	r5, ip, #65	; 0x41
   1cbc8:	orrls	r3, r3, #32
   1cbcc:	cmp	r5, #25
   1cbd0:	orrls	ip, ip, #32
   1cbd4:	cmn	r0, lr
   1cbd8:	moveq	lr, #1
   1cbdc:	movne	lr, #0
   1cbe0:	cmp	r3, #0
   1cbe4:	moveq	lr, #1
   1cbe8:	cmp	lr, #0
   1cbec:	beq	1cba4 <__assert_fail@plt+0x9f00>
   1cbf0:	sub	r0, r3, ip
   1cbf4:	pop	{r4, r5, pc}
   1cbf8:	mov	r0, #0
   1cbfc:	bx	lr
   1cc00:	cmp	r1, r0
   1cc04:	beq	1cc0c <__assert_fail@plt+0x9f68>
   1cc08:	b	1c22c <__assert_fail@plt+0x9588>
   1cc0c:	mov	r0, #0
   1cc10:	bx	lr
   1cc14:	cmp	r0, r1
   1cc18:	beq	1cc78 <__assert_fail@plt+0x9fd4>
   1cc1c:	ldrb	r2, [r0]
   1cc20:	ldrb	ip, [r1]
   1cc24:	cmp	r2, #0
   1cc28:	beq	1cc60 <__assert_fail@plt+0x9fbc>
   1cc2c:	clz	r3, ip
   1cc30:	lsr	r3, r3, #5
   1cc34:	b	1cc50 <__assert_fail@plt+0x9fac>
   1cc38:	ldrb	r2, [r0, #1]!
   1cc3c:	ldrb	ip, [r1, #1]!
   1cc40:	clz	r3, ip
   1cc44:	cmp	r2, #0
   1cc48:	lsr	r3, r3, #5
   1cc4c:	beq	1cc60 <__assert_fail@plt+0x9fbc>
   1cc50:	cmp	ip, r2
   1cc54:	orrne	r3, r3, #1
   1cc58:	cmp	r3, #0
   1cc5c:	beq	1cc38 <__assert_fail@plt+0x9f94>
   1cc60:	cmp	ip, r2
   1cc64:	beq	1cc78 <__assert_fail@plt+0x9fd4>
   1cc68:	sxtb	r2, r2
   1cc6c:	sxtb	r0, ip
   1cc70:	sub	r0, r2, r0
   1cc74:	bx	lr
   1cc78:	mov	r0, #0
   1cc7c:	bx	lr
   1cc80:	push	{r4, r5, r6, r7, r8, lr}
   1cc84:	subs	r7, r3, #0
   1cc88:	mov	r4, r0
   1cc8c:	beq	1ccec <__assert_fail@plt+0xa048>
   1cc90:	cmp	r7, r1
   1cc94:	bhi	1cce4 <__assert_fail@plt+0xa040>
   1cc98:	sub	r1, r1, r7
   1cc9c:	adds	r5, r0, r1
   1cca0:	bcs	1cce4 <__assert_fail@plt+0xa040>
   1cca4:	cmp	r0, r2
   1cca8:	mov	r6, r2
   1ccac:	beq	1ccec <__assert_fail@plt+0xa048>
   1ccb0:	mov	r2, r7
   1ccb4:	mov	r1, r6
   1ccb8:	mov	r0, r4
   1ccbc:	bl	1c22c <__assert_fail@plt+0x9588>
   1ccc0:	cmp	r0, #0
   1ccc4:	beq	1ccec <__assert_fail@plt+0xa048>
   1ccc8:	add	r4, r4, #1
   1cccc:	cmp	r5, r4
   1ccd0:	bcc	1cce4 <__assert_fail@plt+0xa040>
   1ccd4:	cmp	r6, r4
   1ccd8:	bne	1ccb0 <__assert_fail@plt+0xa00c>
   1ccdc:	mov	r0, r6
   1cce0:	pop	{r4, r5, r6, r7, r8, pc}
   1cce4:	mov	r0, #0
   1cce8:	pop	{r4, r5, r6, r7, r8, pc}
   1ccec:	mov	r0, r4
   1ccf0:	pop	{r4, r5, r6, r7, r8, pc}
   1ccf4:	push	{r4, r5, r6, lr}
   1ccf8:	mov	r5, r0
   1ccfc:	ldrb	r4, [r0]
   1cd00:	cmp	r4, #0
   1cd04:	beq	1cd28 <__assert_fail@plt+0xa084>
   1cd08:	bl	12848 <__ctype_tolower_loc@plt>
   1cd0c:	mov	r3, r5
   1cd10:	ldr	r2, [r0]
   1cd14:	ldr	r2, [r2, r4, lsl #2]
   1cd18:	strb	r2, [r3]
   1cd1c:	ldrb	r4, [r3, #1]!
   1cd20:	cmp	r4, #0
   1cd24:	bne	1cd10 <__assert_fail@plt+0xa06c>
   1cd28:	mov	r0, r5
   1cd2c:	pop	{r4, r5, r6, pc}
   1cd30:	cmp	r2, #0
   1cd34:	beq	1cd88 <__assert_fail@plt+0xa0e4>
   1cd38:	push	{r4, r5, r6, r7, r8, lr}
   1cd3c:	sub	r4, r0, #1
   1cd40:	add	r8, r4, r2
   1cd44:	sub	r7, r1, #1
   1cd48:	ldrb	r5, [r4, #1]!
   1cd4c:	ldrb	r6, [r7, #1]!
   1cd50:	cmp	r5, r6
   1cd54:	beq	1cd70 <__assert_fail@plt+0xa0cc>
   1cd58:	bl	12854 <__ctype_toupper_loc@plt>
   1cd5c:	ldr	r3, [r0]
   1cd60:	ldr	r2, [r3, r5, lsl #2]
   1cd64:	ldr	r3, [r3, r6, lsl #2]
   1cd68:	cmp	r2, r3
   1cd6c:	bne	1cd80 <__assert_fail@plt+0xa0dc>
   1cd70:	cmp	r8, r4
   1cd74:	bne	1cd48 <__assert_fail@plt+0xa0a4>
   1cd78:	mov	r0, #0
   1cd7c:	pop	{r4, r5, r6, r7, r8, pc}
   1cd80:	sub	r0, r5, r6
   1cd84:	pop	{r4, r5, r6, r7, r8, pc}
   1cd88:	mov	r0, r2
   1cd8c:	bx	lr
   1cd90:	cmp	r0, #0
   1cd94:	bxeq	lr
   1cd98:	mov	r2, #1
   1cd9c:	b	1bff0 <__assert_fail@plt+0x934c>
   1cda0:	cmp	r0, #0
   1cda4:	bxeq	lr
   1cda8:	mov	r2, #0
   1cdac:	b	1bff0 <__assert_fail@plt+0x934c>
   1cdb0:	push	{r0, r1, r2, r3}
   1cdb4:	push	{r4, lr}
   1cdb8:	sub	sp, sp, #8
   1cdbc:	ldr	r4, [pc, #80]	; 1ce14 <__assert_fail@plt+0xa170>
   1cdc0:	ldr	r0, [sp, #16]
   1cdc4:	ldr	r3, [r4]
   1cdc8:	cmp	r0, #0
   1cdcc:	str	r3, [sp, #4]
   1cdd0:	beq	1ce04 <__assert_fail@plt+0xa160>
   1cdd4:	add	r3, sp, #20
   1cdd8:	mov	r1, r3
   1cddc:	str	r3, [sp]
   1cde0:	bl	1bafc <__assert_fail@plt+0x8e58>
   1cde4:	ldr	r2, [sp, #4]
   1cde8:	ldr	r3, [r4]
   1cdec:	cmp	r2, r3
   1cdf0:	bne	1ce10 <__assert_fail@plt+0xa16c>
   1cdf4:	add	sp, sp, #8
   1cdf8:	pop	{r4, lr}
   1cdfc:	add	sp, sp, #16
   1ce00:	bx	lr
   1ce04:	ldr	r0, [pc, #12]	; 1ce18 <__assert_fail@plt+0xa174>
   1ce08:	bl	12c68 <gcry_strdup@plt>
   1ce0c:	b	1cde4 <__assert_fail@plt+0xa140>
   1ce10:	bl	1262c <__stack_chk_fail@plt>
   1ce14:	strdeq	r5, [r4], -r8
   1ce18:	andeq	r1, r3, r8, ror #15
   1ce1c:	push	{r0, r1, r2, r3}
   1ce20:	push	{r4, lr}
   1ce24:	sub	sp, sp, #8
   1ce28:	ldr	r4, [pc, #144]	; 1cec0 <__assert_fail@plt+0xa21c>
   1ce2c:	ldr	r0, [sp, #16]
   1ce30:	ldr	r3, [r4]
   1ce34:	cmp	r0, #0
   1ce38:	str	r3, [sp, #4]
   1ce3c:	beq	1ce78 <__assert_fail@plt+0xa1d4>
   1ce40:	add	r3, sp, #20
   1ce44:	mov	r1, r3
   1ce48:	str	r3, [sp]
   1ce4c:	bl	1bafc <__assert_fail@plt+0x8e58>
   1ce50:	cmp	r0, #0
   1ce54:	beq	1ce88 <__assert_fail@plt+0xa1e4>
   1ce58:	ldr	r2, [sp, #4]
   1ce5c:	ldr	r3, [r4]
   1ce60:	cmp	r2, r3
   1ce64:	bne	1ce84 <__assert_fail@plt+0xa1e0>
   1ce68:	add	sp, sp, #8
   1ce6c:	pop	{r4, lr}
   1ce70:	add	sp, sp, #16
   1ce74:	bx	lr
   1ce78:	ldr	r0, [pc, #68]	; 1cec4 <__assert_fail@plt+0xa220>
   1ce7c:	bl	12a40 <gcry_xstrdup@plt>
   1ce80:	b	1ce50 <__assert_fail@plt+0xa1ac>
   1ce84:	bl	1262c <__stack_chk_fail@plt>
   1ce88:	bl	12968 <__errno_location@plt>
   1ce8c:	ldr	r3, [pc, #52]	; 1cec8 <__assert_fail@plt+0xa224>
   1ce90:	ldr	r3, [r3]
   1ce94:	ldr	r2, [r0]
   1ce98:	cmp	r2, #22
   1ce9c:	moveq	r2, #37	; 0x25
   1cea0:	moveq	r1, #1
   1cea4:	ldreq	r0, [pc, #32]	; 1cecc <__assert_fail@plt+0xa228>
   1cea8:	movne	r2, #22
   1ceac:	movne	r1, #1
   1ceb0:	ldrne	r0, [pc, #24]	; 1ced0 <__assert_fail@plt+0xa22c>
   1ceb4:	bl	12728 <fwrite@plt>
   1ceb8:	mov	r0, #2
   1cebc:	bl	128b4 <exit@plt>
   1cec0:	strdeq	r5, [r4], -r8
   1cec4:	andeq	r1, r3, r8, ror #15
   1cec8:	strdeq	r6, [r4], -r8
   1cecc:	muleq	r3, r0, r6
   1ced0:			; <UNDEFINED> instruction: 0x000326b8
   1ced4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ced8:	mov	r6, r2
   1cedc:	mov	r7, r3
   1cee0:	mov	r8, r0
   1cee4:	mov	r5, r1
   1cee8:	bl	128fc <strchr@plt>
   1ceec:	cmp	r0, #0
   1cef0:	beq	1cf7c <__assert_fail@plt+0xa2d8>
   1cef4:	mov	r4, #1
   1cef8:	b	1cf00 <__assert_fail@plt+0xa25c>
   1cefc:	mov	r4, r3
   1cf00:	add	r0, r0, #1
   1cf04:	mov	r1, r5
   1cf08:	bl	128fc <strchr@plt>
   1cf0c:	add	r3, r4, #1
   1cf10:	cmp	r0, #0
   1cf14:	bne	1cefc <__assert_fail@plt+0xa258>
   1cf18:	add	r0, r4, #2
   1cf1c:	mov	r1, #4
   1cf20:	bl	129bc <gcry_calloc@plt>
   1cf24:	subs	r9, r0, #0
   1cf28:	beq	1cf74 <__assert_fail@plt+0xa2d0>
   1cf2c:	str	r8, [r9]
   1cf30:	mov	r0, r8
   1cf34:	mov	r1, r5
   1cf38:	bl	128fc <strchr@plt>
   1cf3c:	subs	r3, r0, #0
   1cf40:	beq	1cf84 <__assert_fail@plt+0xa2e0>
   1cf44:	mov	r8, r9
   1cf48:	mov	r4, #1
   1cf4c:	add	r0, r3, #1
   1cf50:	strb	r6, [r3]
   1cf54:	str	r0, [r8, #4]!
   1cf58:	mov	r1, r5
   1cf5c:	bl	128fc <strchr@plt>
   1cf60:	add	r4, r4, #1
   1cf64:	subs	r3, r0, #0
   1cf68:	bne	1cf4c <__assert_fail@plt+0xa2a8>
   1cf6c:	cmp	r7, #0
   1cf70:	strne	r4, [r7]
   1cf74:	mov	r0, r9
   1cf78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf7c:	mov	r0, #2
   1cf80:	b	1cf1c <__assert_fail@plt+0xa278>
   1cf84:	mov	r4, #1
   1cf88:	b	1cf6c <__assert_fail@plt+0xa2c8>
   1cf8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cf90:	mov	r8, r0
   1cf94:	mov	r6, r1
   1cf98:	bl	12b9c <strpbrk@plt>
   1cf9c:	cmp	r0, #0
   1cfa0:	beq	1d158 <__assert_fail@plt+0xa4b4>
   1cfa4:	mov	r5, #1
   1cfa8:	b	1cfb0 <__assert_fail@plt+0xa30c>
   1cfac:	mov	r5, r3
   1cfb0:	add	r0, r0, #1
   1cfb4:	mov	r1, r6
   1cfb8:	bl	12b9c <strpbrk@plt>
   1cfbc:	add	r3, r5, #1
   1cfc0:	cmp	r0, #0
   1cfc4:	bne	1cfac <__assert_fail@plt+0xa308>
   1cfc8:	add	r5, r5, #2
   1cfcc:	tst	r5, #-1073741824	; 0xc0000000
   1cfd0:	lsl	r5, r5, #2
   1cfd4:	bne	1d0a4 <__assert_fail@plt+0xa400>
   1cfd8:	mov	r0, r8
   1cfdc:	bl	128d8 <strlen@plt>
   1cfe0:	add	r0, r0, #1
   1cfe4:	adds	r0, r5, r0
   1cfe8:	movcs	r7, #1
   1cfec:	movcc	r7, #0
   1cff0:	bcs	1d0a4 <__assert_fail@plt+0xa400>
   1cff4:	bl	12458 <gcry_malloc@plt>
   1cff8:	subs	r9, r0, #0
   1cffc:	beq	1d0b0 <__assert_fail@plt+0xa40c>
   1d000:	add	r5, r9, r5
   1d004:	mov	r1, r8
   1d008:	mov	r0, r5
   1d00c:	bl	12764 <strcpy@plt>
   1d010:	mov	r4, r5
   1d014:	sub	r8, r9, #4
   1d018:	mov	sl, r7
   1d01c:	mov	r1, r6
   1d020:	mov	r0, r4
   1d024:	bl	12b9c <strpbrk@plt>
   1d028:	cmp	r0, #0
   1d02c:	beq	1d0b8 <__assert_fail@plt+0xa414>
   1d030:	strb	sl, [r0]
   1d034:	ldrb	r3, [r4]
   1d038:	cmp	r3, #32
   1d03c:	cmpne	r3, #9
   1d040:	bne	1d054 <__assert_fail@plt+0xa3b0>
   1d044:	ldrb	r3, [r4, #1]!
   1d048:	cmp	r3, #9
   1d04c:	cmpne	r3, #32
   1d050:	beq	1d044 <__assert_fail@plt+0xa3a0>
   1d054:	sub	r3, r0, #1
   1d058:	cmp	r3, r4
   1d05c:	bcc	1d094 <__assert_fail@plt+0xa3f0>
   1d060:	ldrb	r2, [r0, #-1]
   1d064:	cmp	r2, #9
   1d068:	cmpne	r2, #32
   1d06c:	bne	1d094 <__assert_fail@plt+0xa3f0>
   1d070:	sub	r1, r4, #1
   1d074:	b	1d088 <__assert_fail@plt+0xa3e4>
   1d078:	ldrb	r2, [r3]
   1d07c:	cmp	r2, #9
   1d080:	cmpne	r2, #32
   1d084:	bne	1d094 <__assert_fail@plt+0xa3f0>
   1d088:	strb	sl, [r3], #-1
   1d08c:	cmp	r3, r1
   1d090:	bne	1d078 <__assert_fail@plt+0xa3d4>
   1d094:	str	r4, [r8, #4]!
   1d098:	add	r7, r7, #1
   1d09c:	add	r4, r0, #1
   1d0a0:	b	1d01c <__assert_fail@plt+0xa378>
   1d0a4:	mov	r0, #12
   1d0a8:	bl	12b0c <gpg_err_set_errno@plt>
   1d0ac:	mov	r9, #0
   1d0b0:	mov	r0, r9
   1d0b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d0b8:	ldrb	r3, [r4]
   1d0bc:	cmp	r3, #32
   1d0c0:	cmpne	r3, #9
   1d0c4:	bne	1d0d8 <__assert_fail@plt+0xa434>
   1d0c8:	ldrb	r3, [r4, #1]!
   1d0cc:	cmp	r3, #9
   1d0d0:	cmpne	r3, #32
   1d0d4:	beq	1d0c8 <__assert_fail@plt+0xa424>
   1d0d8:	mov	r0, r4
   1d0dc:	bl	128d8 <strlen@plt>
   1d0e0:	sub	r0, r0, #1
   1d0e4:	adds	r3, r4, r0
   1d0e8:	bcs	1d120 <__assert_fail@plt+0xa47c>
   1d0ec:	ldrb	r2, [r4, r0]
   1d0f0:	cmp	r2, #9
   1d0f4:	cmpne	r2, #32
   1d0f8:	bne	1d120 <__assert_fail@plt+0xa47c>
   1d0fc:	mov	r1, #0
   1d100:	b	1d114 <__assert_fail@plt+0xa470>
   1d104:	ldrb	r2, [r3]
   1d108:	cmp	r2, #9
   1d10c:	cmpne	r2, #32
   1d110:	bne	1d120 <__assert_fail@plt+0xa47c>
   1d114:	strb	r1, [r3], #-1
   1d118:	cmp	r3, r4
   1d11c:	bcs	1d104 <__assert_fail@plt+0xa460>
   1d120:	lsl	r3, r7, #2
   1d124:	add	r2, r3, #8
   1d128:	add	r2, r9, r2
   1d12c:	add	r3, r9, r3
   1d130:	cmp	r5, r2
   1d134:	mov	r2, #0
   1d138:	str	r4, [r9, r7, lsl #2]
   1d13c:	str	r2, [r3, #4]
   1d140:	beq	1d0b0 <__assert_fail@plt+0xa40c>
   1d144:	ldr	r3, [pc, #20]	; 1d160 <__assert_fail@plt+0xa4bc>
   1d148:	ldr	r2, [pc, #20]	; 1d164 <__assert_fail@plt+0xa4c0>
   1d14c:	ldr	r1, [pc, #20]	; 1d168 <__assert_fail@plt+0xa4c4>
   1d150:	ldr	r0, [pc, #20]	; 1d16c <__assert_fail@plt+0xa4c8>
   1d154:	bl	12ca4 <__assert_fail@plt>
   1d158:	mov	r5, #8
   1d15c:	b	1cfd8 <__assert_fail@plt+0xa334>
   1d160:	andeq	r2, r3, r4, asr #12
   1d164:	andeq	r0, r0, r2, lsl r5
   1d168:	andeq	r2, r3, r0, asr r6
   1d16c:	ldrdeq	r2, [r3], -r0
   1d170:	push	{r4, r5, r6, r7, r8, lr}
   1d174:	mov	r6, r2
   1d178:	ldrb	r3, [r0]
   1d17c:	cmp	r3, #32
   1d180:	bne	1d190 <__assert_fail@plt+0xa4ec>
   1d184:	ldrb	r3, [r0, #1]!
   1d188:	cmp	r3, #32
   1d18c:	beq	1d184 <__assert_fail@plt+0xa4e0>
   1d190:	cmp	r6, #0
   1d194:	beq	1d1f4 <__assert_fail@plt+0xa550>
   1d198:	mov	r4, #0
   1d19c:	sub	r5, r1, #4
   1d1a0:	mov	r7, r4
   1d1a4:	str	r0, [r5, #4]!
   1d1a8:	mov	r1, #32
   1d1ac:	bl	128fc <strchr@plt>
   1d1b0:	add	r4, r4, #1
   1d1b4:	subs	r3, r0, #0
   1d1b8:	beq	1d1ec <__assert_fail@plt+0xa548>
   1d1bc:	mov	r0, r3
   1d1c0:	strb	r7, [r0], #1
   1d1c4:	ldrb	r3, [r3, #1]
   1d1c8:	cmp	r3, #32
   1d1cc:	bne	1d1dc <__assert_fail@plt+0xa538>
   1d1d0:	ldrb	r3, [r0, #1]!
   1d1d4:	cmp	r3, #32
   1d1d8:	beq	1d1d0 <__assert_fail@plt+0xa52c>
   1d1dc:	cmp	r3, #0
   1d1e0:	beq	1d1ec <__assert_fail@plt+0xa548>
   1d1e4:	cmp	r6, r4
   1d1e8:	bne	1d1a4 <__assert_fail@plt+0xa500>
   1d1ec:	mov	r0, r4
   1d1f0:	pop	{r4, r5, r6, r7, r8, pc}
   1d1f4:	mov	r4, r6
   1d1f8:	b	1d1ec <__assert_fail@plt+0xa548>
   1d1fc:	push	{r4, r5, r6, r7, r8, lr}
   1d200:	subs	r7, r2, #0
   1d204:	beq	1d254 <__assert_fail@plt+0xa5b0>
   1d208:	mov	r4, #0
   1d20c:	sub	r5, r1, #4
   1d210:	mov	r6, r4
   1d214:	b	1d230 <__assert_fail@plt+0xa58c>
   1d218:	strb	r6, [r0], #1
   1d21c:	ldrb	r3, [r3, #1]
   1d220:	cmp	r3, #0
   1d224:	beq	1d24c <__assert_fail@plt+0xa5a8>
   1d228:	cmp	r7, r4
   1d22c:	beq	1d24c <__assert_fail@plt+0xa5a8>
   1d230:	str	r0, [r5, #4]!
   1d234:	mov	r1, #58	; 0x3a
   1d238:	bl	128fc <strchr@plt>
   1d23c:	add	r4, r4, #1
   1d240:	subs	r3, r0, #0
   1d244:	mov	r0, r3
   1d248:	bne	1d218 <__assert_fail@plt+0xa574>
   1d24c:	mov	r0, r4
   1d250:	pop	{r4, r5, r6, r7, r8, pc}
   1d254:	mov	r4, r7
   1d258:	b	1d24c <__assert_fail@plt+0xa5a8>
   1d25c:	push	{r4, r5, r6, lr}
   1d260:	sub	sp, sp, #32
   1d264:	ldr	r4, [pc, #220]	; 1d348 <__assert_fail@plt+0xa6a4>
   1d268:	cmp	r0, #0
   1d26c:	ldr	r3, [r4]
   1d270:	str	r3, [sp, #28]
   1d274:	beq	1d33c <__assert_fail@plt+0xa698>
   1d278:	mov	r5, r1
   1d27c:	add	r3, sp, #12
   1d280:	add	r2, sp, #8
   1d284:	add	r1, sp, #4
   1d288:	bl	1b934 <__assert_fail@plt+0x8c90>
   1d28c:	subs	r6, r0, #0
   1d290:	beq	1d33c <__assert_fail@plt+0xa698>
   1d294:	cmp	r5, #0
   1d298:	beq	1d30c <__assert_fail@plt+0xa668>
   1d29c:	add	r1, sp, #16
   1d2a0:	mov	r0, r5
   1d2a4:	add	r3, sp, #24
   1d2a8:	add	r2, sp, #20
   1d2ac:	bl	1b934 <__assert_fail@plt+0x8c90>
   1d2b0:	subs	r1, r0, #0
   1d2b4:	beq	1d33c <__assert_fail@plt+0xa698>
   1d2b8:	ldr	r3, [sp, #4]
   1d2bc:	ldr	r2, [sp, #16]
   1d2c0:	cmp	r3, r2
   1d2c4:	subne	r3, r3, r2
   1d2c8:	beq	1d2dc <__assert_fail@plt+0xa638>
   1d2cc:	cmp	r3, #0
   1d2d0:	mvnlt	r0, #0
   1d2d4:	movge	r0, #1
   1d2d8:	b	1d310 <__assert_fail@plt+0xa66c>
   1d2dc:	ldr	r3, [sp, #8]
   1d2e0:	ldr	r0, [sp, #20]
   1d2e4:	cmp	r3, r0
   1d2e8:	bne	1d328 <__assert_fail@plt+0xa684>
   1d2ec:	ldr	r3, [sp, #12]
   1d2f0:	ldr	r0, [sp, #24]
   1d2f4:	cmp	r3, r0
   1d2f8:	bne	1d328 <__assert_fail@plt+0xa684>
   1d2fc:	mov	r0, r6
   1d300:	bl	124b8 <strcmp@plt>
   1d304:	subs	r3, r0, #0
   1d308:	bne	1d2cc <__assert_fail@plt+0xa628>
   1d30c:	mov	r0, #0
   1d310:	ldr	r2, [sp, #28]
   1d314:	ldr	r3, [r4]
   1d318:	cmp	r2, r3
   1d31c:	bne	1d344 <__assert_fail@plt+0xa6a0>
   1d320:	add	sp, sp, #32
   1d324:	pop	{r4, r5, r6, pc}
   1d328:	sub	r3, r3, r0
   1d32c:	cmp	r3, #0
   1d330:	mvnlt	r0, #0
   1d334:	movge	r0, #1
   1d338:	b	1d310 <__assert_fail@plt+0xa66c>
   1d33c:	mov	r0, #-2147483648	; 0x80000000
   1d340:	b	1d310 <__assert_fail@plt+0xa66c>
   1d344:	bl	1262c <__stack_chk_fail@plt>
   1d348:	strdeq	r5, [r4], -r8
   1d34c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d350:	sub	sp, sp, #12
   1d354:	mov	r7, r1
   1d358:	str	r2, [sp]
   1d35c:	bl	12c68 <gcry_strdup@plt>
   1d360:	subs	r3, r0, #0
   1d364:	str	r3, [sp, #4]
   1d368:	beq	1d534 <__assert_fail@plt+0xa890>
   1d36c:	mov	r6, #0
   1d370:	ldr	r9, [pc, #464]	; 1d548 <__assert_fail@plt+0xa8a4>
   1d374:	mov	r5, r6
   1d378:	mov	r8, r6
   1d37c:	mov	r4, r3
   1d380:	mov	fp, r3
   1d384:	mov	r1, r9
   1d388:	mov	r0, fp
   1d38c:	bl	124f4 <strcspn@plt>
   1d390:	adds	sl, fp, r0
   1d394:	beq	1d434 <__assert_fail@plt+0xa790>
   1d398:	ldrb	fp, [sl]
   1d39c:	cmp	fp, #10
   1d3a0:	beq	1d450 <__assert_fail@plt+0xa7ac>
   1d3a4:	subs	r1, sl, r4
   1d3a8:	beq	1d3b8 <__assert_fail@plt+0xa714>
   1d3ac:	mov	r0, r4
   1d3b0:	bl	1c1e4 <__assert_fail@plt+0x9540>
   1d3b4:	mov	r1, r0
   1d3b8:	cmp	r7, r1
   1d3bc:	bgt	1d468 <__assert_fail@plt+0xa7c4>
   1d3c0:	ldr	r3, [sp]
   1d3c4:	sub	ip, r1, r7
   1d3c8:	cmp	r3, r1
   1d3cc:	sublt	r1, r1, r3
   1d3d0:	lsl	ip, ip, #1
   1d3d4:	sub	r0, r7, r5
   1d3d8:	addlt	ip, ip, r1, lsl #2
   1d3dc:	cmp	ip, r0
   1d3e0:	movlt	ip, #0
   1d3e4:	movge	ip, #1
   1d3e8:	cmp	r5, #0
   1d3ec:	movne	r5, ip
   1d3f0:	moveq	r5, #0
   1d3f4:	cmp	r5, #0
   1d3f8:	movne	sl, r8
   1d3fc:	ldrbne	fp, [r8]
   1d400:	cmp	fp, #0
   1d404:	beq	1d4e8 <__assert_fail@plt+0xa844>
   1d408:	mov	fp, sl
   1d40c:	mov	r1, #10
   1d410:	strb	r1, [fp], #1
   1d414:	ldrb	r1, [sl, #1]
   1d418:	cmp	r1, #32
   1d41c:	beq	1d498 <__assert_fail@plt+0xa7f4>
   1d420:	mov	r6, #0
   1d424:	mov	r5, r6
   1d428:	mov	r8, r6
   1d42c:	mov	r4, fp
   1d430:	b	1d384 <__assert_fail@plt+0xa6e0>
   1d434:	ldr	sl, [sp, #4]
   1d438:	mov	r0, sl
   1d43c:	bl	128d8 <strlen@plt>
   1d440:	add	sl, sl, r0
   1d444:	ldrb	fp, [sl]
   1d448:	cmp	fp, #10
   1d44c:	bne	1d3a4 <__assert_fail@plt+0xa700>
   1d450:	add	r4, sl, #1
   1d454:	mov	r5, #0
   1d458:	mov	fp, r4
   1d45c:	mov	r8, r5
   1d460:	mov	r6, #1
   1d464:	b	1d384 <__assert_fail@plt+0xa6e0>
   1d468:	cmp	fp, #0
   1d46c:	beq	1d4e8 <__assert_fail@plt+0xa844>
   1d470:	ldrb	r0, [sl, #1]
   1d474:	add	fp, sl, #1
   1d478:	cmp	r0, #32
   1d47c:	bne	1d48c <__assert_fail@plt+0xa7e8>
   1d480:	ldrb	r0, [fp, #1]!
   1d484:	cmp	r0, #32
   1d488:	beq	1d480 <__assert_fail@plt+0xa7dc>
   1d48c:	mov	r5, r1
   1d490:	mov	r8, sl
   1d494:	b	1d384 <__assert_fail@plt+0xa6e0>
   1d498:	ldrb	r1, [sl, #2]
   1d49c:	cmp	r1, #32
   1d4a0:	bne	1d540 <__assert_fail@plt+0xa89c>
   1d4a4:	add	r2, sl, #3
   1d4a8:	mov	r4, r2
   1d4ac:	add	r2, r2, #1
   1d4b0:	ldrb	r1, [r4]
   1d4b4:	cmp	r1, #32
   1d4b8:	beq	1d4a8 <__assert_fail@plt+0xa804>
   1d4bc:	mov	r0, r4
   1d4c0:	bl	128d8 <strlen@plt>
   1d4c4:	mov	r6, #0
   1d4c8:	mov	r1, r4
   1d4cc:	mov	r5, r6
   1d4d0:	mov	r8, r6
   1d4d4:	mov	r4, fp
   1d4d8:	add	r2, r0, #1
   1d4dc:	mov	r0, fp
   1d4e0:	bl	12554 <memmove@plt>
   1d4e4:	b	1d384 <__assert_fail@plt+0xa6e0>
   1d4e8:	ldr	r4, [sp, #4]
   1d4ec:	mov	r0, r4
   1d4f0:	bl	128d8 <strlen@plt>
   1d4f4:	ldr	r2, [pc, #80]	; 1d54c <__assert_fail@plt+0xa8a8>
   1d4f8:	mov	r1, r0
   1d4fc:	mov	r0, r4
   1d500:	bl	1c648 <__assert_fail@plt+0x99a4>
   1d504:	cmp	r6, #0
   1d508:	bne	1d534 <__assert_fail@plt+0xa890>
   1d50c:	ldrb	r3, [r4]
   1d510:	cmp	r3, #0
   1d514:	beq	1d534 <__assert_fail@plt+0xa890>
   1d518:	mov	r0, r4
   1d51c:	bl	128d8 <strlen@plt>
   1d520:	sub	r0, r0, #1
   1d524:	ldrb	r3, [r4, r0]
   1d528:	cmp	r3, #10
   1d52c:	ldreq	r3, [sp, #4]
   1d530:	strbeq	r6, [r3, r0]
   1d534:	ldr	r0, [sp, #4]
   1d538:	add	sp, sp, #12
   1d53c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d540:	add	r4, sl, #2
   1d544:	b	1d4bc <__assert_fail@plt+0xa818>
   1d548:	strdeq	r2, [r3], -r4
   1d54c:	andeq	r2, r3, ip, lsl #29
   1d550:	cmp	r0, #0
   1d554:	bxeq	lr
   1d558:	push	{r4, lr}
   1d55c:	ldr	r4, [r0]
   1d560:	bl	125e4 <gcry_free@plt>
   1d564:	subs	r0, r4, #0
   1d568:	bne	1d55c <__assert_fail@plt+0xa8b8>
   1d56c:	pop	{r4, pc}
   1d570:	push	{r4, r5, r6, lr}
   1d574:	subs	r4, r0, #0
   1d578:	popeq	{r4, r5, r6, pc}
   1d57c:	mov	r0, r4
   1d580:	ldr	r5, [r0], #8
   1d584:	bl	128d8 <strlen@plt>
   1d588:	add	r1, r0, #12
   1d58c:	mov	r0, r4
   1d590:	bl	22068 <__assert_fail@plt+0xf3c4>
   1d594:	mov	r0, r4
   1d598:	bl	125e4 <gcry_free@plt>
   1d59c:	subs	r4, r5, #0
   1d5a0:	bne	1d57c <__assert_fail@plt+0xa8d8>
   1d5a4:	pop	{r4, r5, r6, pc}
   1d5a8:	push	{r4, r5, r6, lr}
   1d5ac:	mov	r5, r0
   1d5b0:	mov	r0, r1
   1d5b4:	mov	r6, r1
   1d5b8:	bl	128d8 <strlen@plt>
   1d5bc:	add	r0, r0, #12
   1d5c0:	bl	12410 <gcry_xmalloc@plt>
   1d5c4:	mov	r3, #0
   1d5c8:	mov	r1, r6
   1d5cc:	mov	r4, r0
   1d5d0:	add	r0, r0, #8
   1d5d4:	str	r3, [r4, #4]
   1d5d8:	bl	12764 <strcpy@plt>
   1d5dc:	ldr	r3, [r5]
   1d5e0:	mov	r0, r4
   1d5e4:	str	r3, [r4]
   1d5e8:	str	r4, [r5]
   1d5ec:	pop	{r4, r5, r6, pc}
   1d5f0:	push	{r4, r5, r6, lr}
   1d5f4:	mov	r6, r0
   1d5f8:	mov	r0, r1
   1d5fc:	mov	r5, r1
   1d600:	bl	128d8 <strlen@plt>
   1d604:	add	r0, r0, #12
   1d608:	bl	12458 <gcry_malloc@plt>
   1d60c:	subs	r4, r0, #0
   1d610:	beq	1d634 <__assert_fail@plt+0xa990>
   1d614:	mov	r3, #0
   1d618:	str	r3, [r4, #4]
   1d61c:	mov	r1, r5
   1d620:	add	r0, r4, #8
   1d624:	bl	12764 <strcpy@plt>
   1d628:	ldr	r3, [r6]
   1d62c:	str	r4, [r6]
   1d630:	str	r3, [r4]
   1d634:	mov	r0, r4
   1d638:	pop	{r4, r5, r6, pc}
   1d63c:	cmp	r2, #0
   1d640:	beq	1d648 <__assert_fail@plt+0xa9a4>
   1d644:	b	1d5a8 <__assert_fail@plt+0xa904>
   1d648:	push	{r4, r5, r6, lr}
   1d64c:	mov	r4, r0
   1d650:	mov	r0, r1
   1d654:	bl	1e42c <__assert_fail@plt+0xb788>
   1d658:	mov	r1, r0
   1d65c:	mov	r5, r0
   1d660:	mov	r0, r4
   1d664:	bl	1d5a8 <__assert_fail@plt+0xa904>
   1d668:	mov	r4, r0
   1d66c:	mov	r0, r5
   1d670:	bl	125e4 <gcry_free@plt>
   1d674:	mov	r0, r4
   1d678:	pop	{r4, r5, r6, pc}
   1d67c:	push	{r4, r5, r6, r7, r8, lr}
   1d680:	mov	r7, r0
   1d684:	mov	r0, r1
   1d688:	mov	r5, r1
   1d68c:	bl	128d8 <strlen@plt>
   1d690:	add	r0, r0, #12
   1d694:	bl	12458 <gcry_malloc@plt>
   1d698:	subs	r4, r0, #0
   1d69c:	beq	1d6e0 <__assert_fail@plt+0xaa3c>
   1d6a0:	mov	r6, #0
   1d6a4:	mov	r1, r5
   1d6a8:	str	r6, [r4, #4]
   1d6ac:	add	r0, r4, #8
   1d6b0:	bl	12764 <strcpy@plt>
   1d6b4:	ldr	r2, [r7]
   1d6b8:	str	r6, [r4]
   1d6bc:	cmp	r2, r6
   1d6c0:	streq	r4, [r7]
   1d6c4:	bne	1d6d0 <__assert_fail@plt+0xaa2c>
   1d6c8:	b	1d6e0 <__assert_fail@plt+0xaa3c>
   1d6cc:	mov	r2, r3
   1d6d0:	ldr	r3, [r2]
   1d6d4:	cmp	r3, #0
   1d6d8:	bne	1d6cc <__assert_fail@plt+0xaa28>
   1d6dc:	str	r4, [r2]
   1d6e0:	mov	r0, r4
   1d6e4:	pop	{r4, r5, r6, r7, r8, pc}
   1d6e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1d6ec:	sub	sp, sp, #12
   1d6f0:	bl	1d67c <__assert_fail@plt+0xa9d8>
   1d6f4:	cmp	r0, #0
   1d6f8:	beq	1d704 <__assert_fail@plt+0xaa60>
   1d6fc:	add	sp, sp, #12
   1d700:	pop	{pc}		; (ldr pc, [sp], #4)
   1d704:	str	r0, [sp, #4]
   1d708:	bl	270d8 <__assert_fail@plt+0x14434>
   1d70c:	ldr	r0, [sp, #4]
   1d710:	add	sp, sp, #12
   1d714:	pop	{pc}		; (ldr pc, [sp], #4)
   1d718:	cmp	r2, #0
   1d71c:	push	{r4, r5, r6, lr}
   1d720:	beq	1d738 <__assert_fail@plt+0xaa94>
   1d724:	bl	1d67c <__assert_fail@plt+0xa9d8>
   1d728:	subs	r4, r0, #0
   1d72c:	beq	1d76c <__assert_fail@plt+0xaac8>
   1d730:	mov	r0, r4
   1d734:	pop	{r4, r5, r6, pc}
   1d738:	mov	r4, r0
   1d73c:	mov	r0, r1
   1d740:	bl	1e42c <__assert_fail@plt+0xb788>
   1d744:	mov	r1, r0
   1d748:	mov	r5, r0
   1d74c:	mov	r0, r4
   1d750:	bl	1d67c <__assert_fail@plt+0xa9d8>
   1d754:	subs	r4, r0, #0
   1d758:	beq	1d774 <__assert_fail@plt+0xaad0>
   1d75c:	mov	r0, r5
   1d760:	bl	125e4 <gcry_free@plt>
   1d764:	mov	r0, r4
   1d768:	pop	{r4, r5, r6, pc}
   1d76c:	bl	270d8 <__assert_fail@plt+0x14434>
   1d770:	b	1d730 <__assert_fail@plt+0xaa8c>
   1d774:	bl	270d8 <__assert_fail@plt+0x14434>
   1d778:	b	1d75c <__assert_fail@plt+0xaab8>
   1d77c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d780:	sub	sp, sp, #20
   1d784:	ldr	r9, [pc, #136]	; 1d814 <__assert_fail@plt+0xab70>
   1d788:	mov	r8, #0
   1d78c:	subs	r5, r0, #0
   1d790:	ldr	r3, [r9]
   1d794:	str	r8, [sp, #4]
   1d798:	str	r3, [sp, #12]
   1d79c:	beq	1d808 <__assert_fail@plt+0xab64>
   1d7a0:	add	r7, sp, #4
   1d7a4:	add	r6, r5, #8
   1d7a8:	mov	r0, r6
   1d7ac:	bl	128d8 <strlen@plt>
   1d7b0:	add	r0, r0, #12
   1d7b4:	bl	12410 <gcry_xmalloc@plt>
   1d7b8:	ldr	r3, [r5, #4]
   1d7bc:	mov	r1, r6
   1d7c0:	mov	r4, r0
   1d7c4:	add	r0, r0, #8
   1d7c8:	str	r4, [sp, #8]
   1d7cc:	str	r3, [r4, #4]
   1d7d0:	bl	12764 <strcpy@plt>
   1d7d4:	str	r8, [r4]
   1d7d8:	ldr	r5, [r5]
   1d7dc:	str	r4, [r7]
   1d7e0:	cmp	r5, #0
   1d7e4:	add	r7, sp, #8
   1d7e8:	bne	1d7a4 <__assert_fail@plt+0xab00>
   1d7ec:	ldr	r0, [sp, #4]
   1d7f0:	ldr	r2, [sp, #12]
   1d7f4:	ldr	r3, [r9]
   1d7f8:	cmp	r2, r3
   1d7fc:	bne	1d810 <__assert_fail@plt+0xab6c>
   1d800:	add	sp, sp, #20
   1d804:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d808:	mov	r0, r5
   1d80c:	b	1d7f0 <__assert_fail@plt+0xab4c>
   1d810:	bl	1262c <__stack_chk_fail@plt>
   1d814:	strdeq	r5, [r4], -r8
   1d818:	subs	r3, r0, r1
   1d81c:	movne	r3, #1
   1d820:	cmp	r0, #0
   1d824:	moveq	r3, #0
   1d828:	cmp	r3, #0
   1d82c:	beq	1d848 <__assert_fail@plt+0xaba4>
   1d830:	ldr	r3, [r0]
   1d834:	cmp	r3, #0
   1d838:	cmpne	r1, r3
   1d83c:	bxeq	lr
   1d840:	mov	r0, r3
   1d844:	b	1d830 <__assert_fail@plt+0xab8c>
   1d848:	mov	r0, r3
   1d84c:	bx	lr
   1d850:	cmp	r0, #0
   1d854:	bxeq	lr
   1d858:	ldr	r3, [r0]
   1d85c:	cmp	r3, #0
   1d860:	bxeq	lr
   1d864:	mov	r0, r3
   1d868:	b	1d858 <__assert_fail@plt+0xabb4>
   1d86c:	push	{r4, r5, r6, r7, r8, lr}
   1d870:	ldr	r4, [r0]
   1d874:	cmp	r4, #0
   1d878:	moveq	r7, r4
   1d87c:	beq	1d8b4 <__assert_fail@plt+0xac10>
   1d880:	add	r6, r4, #8
   1d884:	mov	r5, r0
   1d888:	mov	r0, r6
   1d88c:	bl	128d8 <strlen@plt>
   1d890:	add	r0, r0, #1
   1d894:	bl	12410 <gcry_xmalloc@plt>
   1d898:	mov	r1, r6
   1d89c:	mov	r7, r0
   1d8a0:	bl	12764 <strcpy@plt>
   1d8a4:	ldr	r3, [r4]
   1d8a8:	mov	r0, r4
   1d8ac:	str	r3, [r5]
   1d8b0:	bl	125e4 <gcry_free@plt>
   1d8b4:	mov	r0, r7
   1d8b8:	pop	{r4, r5, r6, r7, r8, pc}
   1d8bc:	push	{r4, r5, r6, lr}
   1d8c0:	subs	r4, r0, #0
   1d8c4:	beq	1d8f0 <__assert_fail@plt+0xac4c>
   1d8c8:	mov	r5, r1
   1d8cc:	b	1d8dc <__assert_fail@plt+0xac38>
   1d8d0:	ldr	r4, [r4]
   1d8d4:	cmp	r4, #0
   1d8d8:	beq	1d8f0 <__assert_fail@plt+0xac4c>
   1d8dc:	mov	r1, r5
   1d8e0:	add	r0, r4, #8
   1d8e4:	bl	124b8 <strcmp@plt>
   1d8e8:	cmp	r0, #0
   1d8ec:	bne	1d8d0 <__assert_fail@plt+0xac2c>
   1d8f0:	mov	r0, r4
   1d8f4:	pop	{r4, r5, r6, pc}
   1d8f8:	subs	r3, r0, #0
   1d8fc:	beq	1d918 <__assert_fail@plt+0xac74>
   1d900:	mov	r0, #0
   1d904:	ldr	r3, [r3]
   1d908:	add	r0, r0, #1
   1d90c:	cmp	r3, #0
   1d910:	bne	1d904 <__assert_fail@plt+0xac60>
   1d914:	bx	lr
   1d918:	mov	r0, r3
   1d91c:	bx	lr
   1d920:	ldr	r3, [r0]
   1d924:	cmp	r3, #0
   1d928:	beq	1d94c <__assert_fail@plt+0xaca8>
   1d92c:	mov	r1, #0
   1d930:	b	1d938 <__assert_fail@plt+0xac94>
   1d934:	mov	r3, r2
   1d938:	ldr	r2, [r3]
   1d93c:	str	r1, [r3]
   1d940:	cmp	r2, #0
   1d944:	mov	r1, r3
   1d948:	bne	1d934 <__assert_fail@plt+0xac90>
   1d94c:	str	r3, [r0]
   1d950:	mov	r0, r3
   1d954:	bx	lr
   1d958:	push	{r4, r5, r6, r7, r8, lr}
   1d95c:	mov	r7, r0
   1d960:	mov	r8, r1
   1d964:	mov	r6, r2
   1d968:	bl	12968 <__errno_location@plt>
   1d96c:	ldr	r3, [r0]
   1d970:	cmp	r3, #22
   1d974:	beq	1d9e0 <__assert_fail@plt+0xad3c>
   1d978:	ldr	r4, [pc, #200]	; 1da48 <__assert_fail@plt+0xada4>
   1d97c:	mov	r5, r0
   1d980:	ldr	r0, [r4, #8]
   1d984:	cmp	r0, #0
   1d988:	beq	1d9b8 <__assert_fail@plt+0xad14>
   1d98c:	mov	r3, #1
   1d990:	str	r3, [r4, #8]
   1d994:	cmp	r6, #0
   1d998:	popeq	{r4, r5, r6, r7, r8, pc}
   1d99c:	ldr	r2, [pc, #168]	; 1da4c <__assert_fail@plt+0xada8>
   1d9a0:	ldr	r1, [pc, #168]	; 1da50 <__assert_fail@plt+0xadac>
   1d9a4:	mov	r3, #0
   1d9a8:	str	r1, [r2]
   1d9ac:	str	r3, [r4, #12]
   1d9b0:	str	r3, [r4, #16]
   1d9b4:	pop	{r4, r5, r6, r7, r8, pc}
   1d9b8:	mov	r2, #5
   1d9bc:	ldr	r1, [pc, #144]	; 1da54 <__assert_fail@plt+0xadb0>
   1d9c0:	bl	12620 <dcgettext@plt>
   1d9c4:	mov	r7, r0
   1d9c8:	ldr	r0, [r5]
   1d9cc:	bl	12818 <strerror@plt>
   1d9d0:	mov	r1, r0
   1d9d4:	mov	r0, r7
   1d9d8:	bl	21c58 <__assert_fail@plt+0xefb4>
   1d9dc:	b	1d98c <__assert_fail@plt+0xace8>
   1d9e0:	cmp	r7, #0
   1d9e4:	ldr	r4, [pc, #92]	; 1da48 <__assert_fail@plt+0xada4>
   1d9e8:	beq	1da00 <__assert_fail@plt+0xad5c>
   1d9ec:	ldr	r1, [pc, #92]	; 1da50 <__assert_fail@plt+0xadac>
   1d9f0:	mov	r0, r7
   1d9f4:	bl	124b8 <strcmp@plt>
   1d9f8:	cmp	r0, #0
   1d9fc:	beq	1da38 <__assert_fail@plt+0xad94>
   1da00:	mov	r3, #1
   1da04:	ldr	r0, [r4, #4]
   1da08:	str	r3, [r4, #4]
   1da0c:	cmp	r0, #0
   1da10:	bne	1d994 <__assert_fail@plt+0xacf0>
   1da14:	mov	r2, #5
   1da18:	ldr	r1, [pc, #56]	; 1da58 <__assert_fail@plt+0xadb4>
   1da1c:	bl	12620 <dcgettext@plt>
   1da20:	mov	r2, r7
   1da24:	mov	r1, r8
   1da28:	bl	21c58 <__assert_fail@plt+0xefb4>
   1da2c:	cmp	r6, #0
   1da30:	popeq	{r4, r5, r6, r7, r8, pc}
   1da34:	b	1d99c <__assert_fail@plt+0xacf8>
   1da38:	mov	r3, #1
   1da3c:	ldr	r0, [r4]
   1da40:	str	r3, [r4]
   1da44:	b	1da0c <__assert_fail@plt+0xad68>
   1da48:	andeq	r6, r4, r0, lsl r2
   1da4c:	andeq	r6, r4, ip, ror #3
   1da50:	andeq	r2, r3, ip, lsl #14
   1da54:	andeq	r2, r3, r0, asr #14
   1da58:	andeq	r2, r3, r4, lsl r7
   1da5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da60:	sub	sp, sp, #76	; 0x4c
   1da64:	mov	r7, #0
   1da68:	str	r3, [sp, #36]	; 0x24
   1da6c:	ldr	r3, [pc, #1932]	; 1e200 <__assert_fail@plt+0xb55c>
   1da70:	str	r1, [sp, #28]
   1da74:	add	r1, r0, r1
   1da78:	ldr	r3, [r3]
   1da7c:	str	r0, [sp, #32]
   1da80:	str	r3, [sp, #68]	; 0x44
   1da84:	ldr	r3, [sp, #28]
   1da88:	ldr	sl, [pc, #1908]	; 1e204 <__assert_fail@plt+0xb560>
   1da8c:	cmp	r3, #0
   1da90:	str	r2, [sp, #24]
   1da94:	sub	fp, r1, #1
   1da98:	str	r7, [sp, #16]
   1da9c:	str	r7, [sp, #20]
   1daa0:	beq	1dbac <__assert_fail@plt+0xaf08>
   1daa4:	ldr	r3, [sp, #32]
   1daa8:	mov	r9, #0
   1daac:	mov	r5, r9
   1dab0:	mov	r8, r9
   1dab4:	sub	r6, r3, #1
   1dab8:	ldr	r4, [sp, #20]
   1dabc:	b	1db1c <__assert_fail@plt+0xae78>
   1dac0:	tst	r3, #128	; 0x80
   1dac4:	bne	1dc44 <__assert_fail@plt+0xafa0>
   1dac8:	ldr	r1, [sp, #24]
   1dacc:	cmn	r1, #1
   1dad0:	beq	1db04 <__assert_fail@plt+0xae60>
   1dad4:	cmp	r3, #127	; 0x7f
   1dad8:	cmpne	r3, #31
   1dadc:	bls	1dcdc <__assert_fail@plt+0xb038>
   1dae0:	cmp	r3, r1
   1dae4:	beq	1dcdc <__assert_fail@plt+0xb038>
   1dae8:	cmp	r1, #0
   1daec:	sub	r2, r3, #92	; 0x5c
   1daf0:	clz	r2, r2
   1daf4:	lsr	r2, r2, #5
   1daf8:	moveq	r2, #0
   1dafc:	cmp	r2, #0
   1db00:	bne	1ddec <__assert_fail@plt+0xb148>
   1db04:	add	r9, r9, #1
   1db08:	mov	r7, #0
   1db0c:	cmp	r4, #0
   1db10:	strbne	r3, [r4], #1
   1db14:	cmp	fp, r6
   1db18:	beq	1db88 <__assert_fail@plt+0xaee4>
   1db1c:	cmp	r7, #0
   1db20:	ldrb	r3, [r6, #1]!
   1db24:	beq	1db48 <__assert_fail@plt+0xaea4>
   1db28:	add	r1, r3, #64	; 0x40
   1db2c:	lsr	r2, r3, #7
   1db30:	uxtb	r1, r1
   1db34:	cmp	r1, #61	; 0x3d
   1db38:	movls	r2, #0
   1db3c:	andhi	r2, r2, #1
   1db40:	cmp	r2, #0
   1db44:	bne	1dcb0 <__assert_fail@plt+0xb00c>
   1db48:	cmp	r8, #0
   1db4c:	beq	1dac0 <__assert_fail@plt+0xae1c>
   1db50:	eor	r2, r3, #128	; 0x80
   1db54:	cmp	r2, #63	; 0x3f
   1db58:	add	r2, r5, #1
   1db5c:	str	r2, [sp, #12]
   1db60:	bls	1dbf4 <__assert_fail@plt+0xaf50>
   1db64:	cmp	r4, #0
   1db68:	bne	1de3c <__assert_fail@plt+0xb198>
   1db6c:	ldr	r3, [sp, #12]
   1db70:	mov	r5, #0
   1db74:	cmp	fp, r6
   1db78:	add	r9, r9, r3, lsl #2
   1db7c:	mov	r8, r5
   1db80:	mov	r7, #1
   1db84:	bne	1db1c <__assert_fail@plt+0xae78>
   1db88:	ldr	r3, [sp, #20]
   1db8c:	cmp	r3, #0
   1db90:	bne	1dbc0 <__assert_fail@plt+0xaf1c>
   1db94:	add	r0, r9, #1
   1db98:	bl	12410 <gcry_xmalloc@plt>
   1db9c:	ldr	r3, [sp, #28]
   1dba0:	cmp	r3, #0
   1dba4:	str	r0, [sp, #20]
   1dba8:	bne	1daa4 <__assert_fail@plt+0xae00>
   1dbac:	ldr	r3, [sp, #20]
   1dbb0:	ldr	r4, [sp, #20]
   1dbb4:	cmp	r3, #0
   1dbb8:	ldr	r9, [sp, #28]
   1dbbc:	beq	1db94 <__assert_fail@plt+0xaef0>
   1dbc0:	ldr	r3, [sp, #36]	; 0x24
   1dbc4:	cmp	r3, #0
   1dbc8:	bne	1e058 <__assert_fail@plt+0xb3b4>
   1dbcc:	ldr	r3, [sp, #36]	; 0x24
   1dbd0:	strb	r3, [r4]
   1dbd4:	ldr	r3, [pc, #1572]	; 1e200 <__assert_fail@plt+0xb55c>
   1dbd8:	ldr	r2, [sp, #68]	; 0x44
   1dbdc:	ldr	r0, [sp, #20]
   1dbe0:	ldr	r3, [r3]
   1dbe4:	cmp	r2, r3
   1dbe8:	bne	1e1ec <__assert_fail@plt+0xb548>
   1dbec:	add	sp, sp, #76	; 0x4c
   1dbf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbf4:	add	r2, sp, #72	; 0x48
   1dbf8:	add	r2, r2, r5
   1dbfc:	and	r1, r3, #63	; 0x3f
   1dc00:	strb	r3, [r2, #-12]
   1dc04:	ldr	r3, [sp, #16]
   1dc08:	subs	r8, r8, #1
   1dc0c:	orr	r3, r1, r3, lsl #6
   1dc10:	str	r3, [sp, #16]
   1dc14:	bne	1de30 <__assert_fail@plt+0xb18c>
   1dc18:	ldr	r3, [pc, #1512]	; 1e208 <__assert_fail@plt+0xb564>
   1dc1c:	ldr	r7, [r3, #12]
   1dc20:	cmp	r7, #0
   1dc24:	beq	1deb4 <__assert_fail@plt+0xb210>
   1dc28:	cmp	r4, #0
   1dc2c:	bne	1df94 <__assert_fail@plt+0xb2f0>
   1dc30:	ldr	r3, [sp, #12]
   1dc34:	mov	r7, #0
   1dc38:	add	r9, r9, r3
   1dc3c:	mov	r5, r7
   1dc40:	b	1db14 <__assert_fail@plt+0xae70>
   1dc44:	and	r2, r3, #224	; 0xe0
   1dc48:	cmp	r2, #192	; 0xc0
   1dc4c:	beq	1de98 <__assert_fail@plt+0xb1f4>
   1dc50:	and	r2, r3, #240	; 0xf0
   1dc54:	cmp	r2, #224	; 0xe0
   1dc58:	beq	1dedc <__assert_fail@plt+0xb238>
   1dc5c:	and	r2, r3, #248	; 0xf8
   1dc60:	cmp	r2, #240	; 0xf0
   1dc64:	beq	1df78 <__assert_fail@plt+0xb2d4>
   1dc68:	and	r2, r3, #252	; 0xfc
   1dc6c:	cmp	r2, #248	; 0xf8
   1dc70:	beq	1dfbc <__assert_fail@plt+0xb318>
   1dc74:	and	r2, r3, #254	; 0xfe
   1dc78:	cmp	r2, #252	; 0xfc
   1dc7c:	beq	1e024 <__assert_fail@plt+0xb380>
   1dc80:	cmp	r4, #0
   1dc84:	beq	1dca4 <__assert_fail@plt+0xb000>
   1dc88:	str	r3, [sp]
   1dc8c:	mov	r0, r4
   1dc90:	mov	r3, sl
   1dc94:	mvn	r2, #0
   1dc98:	mov	r1, #1
   1dc9c:	bl	1298c <__sprintf_chk@plt>
   1dca0:	add	r4, r4, #4
   1dca4:	add	r9, r9, #4
   1dca8:	mov	r7, #1
   1dcac:	b	1db14 <__assert_fail@plt+0xae70>
   1dcb0:	cmp	r4, #0
   1dcb4:	beq	1dcd4 <__assert_fail@plt+0xb030>
   1dcb8:	str	r3, [sp]
   1dcbc:	mov	r0, r4
   1dcc0:	mov	r3, sl
   1dcc4:	mvn	r2, #0
   1dcc8:	mov	r1, #1
   1dccc:	bl	1298c <__sprintf_chk@plt>
   1dcd0:	add	r4, r4, #4
   1dcd4:	add	r9, r9, #4
   1dcd8:	b	1db14 <__assert_fail@plt+0xae70>
   1dcdc:	cmp	r4, #0
   1dce0:	beq	1def8 <__assert_fail@plt+0xb254>
   1dce4:	mov	r7, r4
   1dce8:	mov	r2, #92	; 0x5c
   1dcec:	strb	r2, [r7], #1
   1dcf0:	cmp	r3, #13
   1dcf4:	ldrls	pc, [pc, r3, lsl #2]
   1dcf8:	b	1de00 <__assert_fail@plt+0xb15c>
   1dcfc:	andeq	sp, r1, ip, lsl #27
   1dd00:	andeq	sp, r1, r0, lsl #28
   1dd04:	andeq	sp, r1, r0, lsl #28
   1dd08:	andeq	sp, r1, r0, lsl #28
   1dd0c:	andeq	sp, r1, r0, lsl #28
   1dd10:	andeq	sp, r1, r0, lsl #28
   1dd14:	andeq	sp, r1, r0, lsl #28
   1dd18:	andeq	sp, r1, r0, lsl #28
   1dd1c:	andeq	sp, r1, r4, asr sp
   1dd20:	andeq	sp, r1, r0, lsl #28
   1dd24:	andeq	sp, r1, ip, ror #26
   1dd28:	andeq	sp, r1, r8, lsr sp
   1dd2c:	andeq	sp, r1, ip, asr #27
   1dd30:	andeq	sp, r1, ip, lsr #27
   1dd34:	mov	r7, #0
   1dd38:	subs	r4, r7, #0
   1dd3c:	add	r9, r9, #2
   1dd40:	movne	r3, #118	; 0x76
   1dd44:	strbne	r3, [r4], #1
   1dd48:	movne	r7, #0
   1dd4c:	b	1db14 <__assert_fail@plt+0xae70>
   1dd50:	mov	r7, #0
   1dd54:	subs	r4, r7, #0
   1dd58:	add	r9, r9, #2
   1dd5c:	movne	r3, #98	; 0x62
   1dd60:	strbne	r3, [r4], #1
   1dd64:	movne	r7, #0
   1dd68:	b	1db14 <__assert_fail@plt+0xae70>
   1dd6c:	cmp	r7, #0
   1dd70:	add	r9, r9, #2
   1dd74:	beq	1e15c <__assert_fail@plt+0xb4b8>
   1dd78:	mov	r3, #110	; 0x6e
   1dd7c:	strb	r3, [r4, #1]
   1dd80:	mov	r7, #0
   1dd84:	add	r4, r4, #2
   1dd88:	b	1db14 <__assert_fail@plt+0xae70>
   1dd8c:	cmp	r7, #0
   1dd90:	add	r9, r9, #2
   1dd94:	beq	1e15c <__assert_fail@plt+0xb4b8>
   1dd98:	mov	r3, #48	; 0x30
   1dd9c:	strb	r3, [r4, #1]
   1dda0:	mov	r7, #0
   1dda4:	add	r4, r4, #2
   1dda8:	b	1db14 <__assert_fail@plt+0xae70>
   1ddac:	cmp	r7, #0
   1ddb0:	add	r9, r9, #2
   1ddb4:	beq	1e15c <__assert_fail@plt+0xb4b8>
   1ddb8:	mov	r3, #114	; 0x72
   1ddbc:	strb	r3, [r4, #1]
   1ddc0:	mov	r7, #0
   1ddc4:	add	r4, r4, #2
   1ddc8:	b	1db14 <__assert_fail@plt+0xae70>
   1ddcc:	cmp	r7, #0
   1ddd0:	add	r9, r9, #2
   1ddd4:	beq	1e15c <__assert_fail@plt+0xb4b8>
   1ddd8:	mov	r3, #102	; 0x66
   1dddc:	strb	r3, [r4, #1]
   1dde0:	mov	r7, #0
   1dde4:	add	r4, r4, #2
   1dde8:	b	1db14 <__assert_fail@plt+0xae70>
   1ddec:	cmp	r4, #0
   1ddf0:	movne	r7, r4
   1ddf4:	movne	r3, #92	; 0x5c
   1ddf8:	strbne	r3, [r7], #1
   1ddfc:	beq	1e048 <__assert_fail@plt+0xb3a4>
   1de00:	cmp	r7, #0
   1de04:	add	r9, r9, #4
   1de08:	beq	1e050 <__assert_fail@plt+0xb3ac>
   1de0c:	str	r3, [sp]
   1de10:	mov	r0, r7
   1de14:	ldr	r3, [pc, #1008]	; 1e20c <__assert_fail@plt+0xb568>
   1de18:	mvn	r2, #0
   1de1c:	mov	r1, #1
   1de20:	add	r4, r7, #3
   1de24:	bl	1298c <__sprintf_chk@plt>
   1de28:	mov	r7, #0
   1de2c:	b	1db14 <__assert_fail@plt+0xae70>
   1de30:	ldr	r5, [sp, #12]
   1de34:	mov	r7, #0
   1de38:	b	1db14 <__assert_fail@plt+0xae70>
   1de3c:	cmp	r5, #0
   1de40:	beq	1e040 <__assert_fail@plt+0xb39c>
   1de44:	add	r5, r4, r5, lsl #2
   1de48:	add	r7, sp, #60	; 0x3c
   1de4c:	ldrb	r1, [r7], #1
   1de50:	mov	r0, r4
   1de54:	mov	r3, sl
   1de58:	str	r1, [sp]
   1de5c:	mvn	r2, #0
   1de60:	mov	r1, #1
   1de64:	add	r4, r4, #4
   1de68:	bl	1298c <__sprintf_chk@plt>
   1de6c:	cmp	r5, r4
   1de70:	bne	1de4c <__assert_fail@plt+0xb1a8>
   1de74:	ldrb	r3, [r6]
   1de78:	str	r3, [sp]
   1de7c:	mvn	r2, #0
   1de80:	mov	r3, sl
   1de84:	mov	r1, #1
   1de88:	mov	r0, r5
   1de8c:	bl	1298c <__sprintf_chk@plt>
   1de90:	add	r4, r5, #4
   1de94:	b	1db6c <__assert_fail@plt+0xaec8>
   1de98:	mov	r5, #1
   1de9c:	strb	r3, [sp, #60]	; 0x3c
   1dea0:	and	r3, r3, #31
   1dea4:	mov	r7, r8
   1dea8:	str	r3, [sp, #16]
   1deac:	mov	r8, r5
   1deb0:	b	1db14 <__assert_fail@plt+0xae70>
   1deb4:	ldr	r3, [sp, #36]	; 0x24
   1deb8:	cmp	r3, #0
   1debc:	beq	1df48 <__assert_fail@plt+0xb2a4>
   1dec0:	cmp	r4, #0
   1dec4:	bne	1dffc <__assert_fail@plt+0xb358>
   1dec8:	ldr	r3, [sp, #12]
   1decc:	mov	r5, #0
   1ded0:	add	r9, r9, r3
   1ded4:	mov	r8, r5
   1ded8:	b	1db14 <__assert_fail@plt+0xae70>
   1dedc:	strb	r3, [sp, #60]	; 0x3c
   1dee0:	and	r3, r3, #15
   1dee4:	mov	r7, r8
   1dee8:	str	r3, [sp, #16]
   1deec:	mov	r5, #1
   1def0:	mov	r8, #2
   1def4:	b	1db14 <__assert_fail@plt+0xae70>
   1def8:	cmp	r3, #13
   1defc:	ldrls	pc, [pc, r3, lsl #2]
   1df00:	b	1e048 <__assert_fail@plt+0xb3a4>
   1df04:	andeq	sp, r1, ip, lsr pc
   1df08:	andeq	lr, r1, r8, asr #32
   1df0c:	andeq	lr, r1, r8, asr #32
   1df10:	andeq	lr, r1, r8, asr #32
   1df14:	andeq	lr, r1, r8, asr #32
   1df18:	andeq	lr, r1, r8, asr #32
   1df1c:	andeq	lr, r1, r8, asr #32
   1df20:	andeq	lr, r1, r8, asr #32
   1df24:	andeq	sp, r1, r0, asr sp
   1df28:	andeq	lr, r1, r8, asr #32
   1df2c:	andeq	sp, r1, ip, lsr pc
   1df30:	andeq	sp, r1, r4, lsr sp
   1df34:	andeq	sp, r1, ip, lsr pc
   1df38:	andeq	sp, r1, ip, lsr pc
   1df3c:	add	r9, r9, #2
   1df40:	mov	r7, #0
   1df44:	b	1db14 <__assert_fail@plt+0xae70>
   1df48:	ldr	r2, [sp, #16]
   1df4c:	sub	r3, r2, #128	; 0x80
   1df50:	cmp	r3, #127	; 0x7f
   1df54:	bhi	1dfd8 <__assert_fail@plt+0xb334>
   1df58:	cmp	r4, #0
   1df5c:	ldr	r5, [sp, #12]
   1df60:	add	r9, r9, #1
   1df64:	beq	1e150 <__assert_fail@plt+0xb4ac>
   1df68:	ldr	r8, [sp, #36]	; 0x24
   1df6c:	strb	r2, [r4], #1
   1df70:	mov	r7, r8
   1df74:	b	1db14 <__assert_fail@plt+0xae70>
   1df78:	strb	r3, [sp, #60]	; 0x3c
   1df7c:	and	r3, r3, #7
   1df80:	mov	r7, r8
   1df84:	str	r3, [sp, #16]
   1df88:	mov	r5, #1
   1df8c:	mov	r8, #3
   1df90:	b	1db14 <__assert_fail@plt+0xae70>
   1df94:	add	r5, r4, r5
   1df98:	add	r2, sp, #60	; 0x3c
   1df9c:	sub	r3, r4, #1
   1dfa0:	ldrb	r1, [r2], #1
   1dfa4:	strb	r1, [r3, #1]!
   1dfa8:	cmp	r3, r5
   1dfac:	bne	1dfa0 <__assert_fail@plt+0xb2fc>
   1dfb0:	ldr	r3, [sp, #12]
   1dfb4:	add	r4, r4, r3
   1dfb8:	b	1dc30 <__assert_fail@plt+0xaf8c>
   1dfbc:	strb	r3, [sp, #60]	; 0x3c
   1dfc0:	and	r3, r3, #3
   1dfc4:	mov	r7, r8
   1dfc8:	str	r3, [sp, #16]
   1dfcc:	mov	r5, #1
   1dfd0:	mov	r8, #4
   1dfd4:	b	1db14 <__assert_fail@plt+0xae70>
   1dfd8:	ldr	r3, [sp, #12]
   1dfdc:	cmp	r4, #0
   1dfe0:	lsl	r8, r3, #2
   1dfe4:	bne	1e11c <__assert_fail@plt+0xb478>
   1dfe8:	mov	r7, #0
   1dfec:	add	r9, r9, r8
   1dff0:	mov	r5, r7
   1dff4:	mov	r8, r7
   1dff8:	b	1db14 <__assert_fail@plt+0xae70>
   1dffc:	add	r5, r4, r5
   1e000:	add	r2, sp, #60	; 0x3c
   1e004:	sub	r3, r4, #1
   1e008:	ldrb	r1, [r2], #1
   1e00c:	strb	r1, [r3, #1]!
   1e010:	cmp	r5, r3
   1e014:	bne	1e008 <__assert_fail@plt+0xb364>
   1e018:	ldr	r3, [sp, #12]
   1e01c:	add	r4, r4, r3
   1e020:	b	1dec8 <__assert_fail@plt+0xb224>
   1e024:	strb	r3, [sp, #60]	; 0x3c
   1e028:	and	r3, r3, #1
   1e02c:	mov	r7, r8
   1e030:	str	r3, [sp, #16]
   1e034:	mov	r5, #1
   1e038:	mov	r8, #5
   1e03c:	b	1db14 <__assert_fail@plt+0xae70>
   1e040:	mov	r5, r4
   1e044:	b	1de78 <__assert_fail@plt+0xb1d4>
   1e048:	mov	r7, #0
   1e04c:	add	r9, r9, #4
   1e050:	mov	r4, r7
   1e054:	b	1db14 <__assert_fail@plt+0xae70>
   1e058:	ldr	r7, [pc, #432]	; 1e210 <__assert_fail@plt+0xb56c>
   1e05c:	mov	r6, #0
   1e060:	strb	r6, [r4]
   1e064:	ldr	r0, [r7]
   1e068:	ldr	r1, [pc, #420]	; 1e214 <__assert_fail@plt+0xb570>
   1e06c:	bl	12800 <iconv_open@plt>
   1e070:	cmn	r0, #1
   1e074:	mov	r5, r0
   1e078:	beq	1e1b4 <__assert_fail@plt+0xb510>
   1e07c:	ldr	r3, [sp, #20]
   1e080:	sub	r4, r4, r3
   1e084:	add	r0, r4, #1
   1e088:	tst	r0, #-268435456	; 0xf0000000
   1e08c:	lsl	r0, r0, #4
   1e090:	str	r4, [sp, #52]	; 0x34
   1e094:	str	r0, [sp, #56]	; 0x38
   1e098:	str	r3, [sp, #44]	; 0x2c
   1e09c:	bne	1e1f0 <__assert_fail@plt+0xb54c>
   1e0a0:	bl	12410 <gcry_xmalloc@plt>
   1e0a4:	add	r3, sp, #56	; 0x38
   1e0a8:	str	r3, [sp]
   1e0ac:	add	r2, sp, #52	; 0x34
   1e0b0:	add	r3, sp, #48	; 0x30
   1e0b4:	add	r1, sp, #44	; 0x2c
   1e0b8:	mov	r4, r0
   1e0bc:	mov	r0, r5
   1e0c0:	str	r4, [sp, #48]	; 0x30
   1e0c4:	bl	124ac <iconv@plt>
   1e0c8:	cmn	r0, #1
   1e0cc:	bne	1e164 <__assert_fail@plt+0xb4c0>
   1e0d0:	ldr	r6, [pc, #304]	; 1e208 <__assert_fail@plt+0xb564>
   1e0d4:	ldr	r0, [r6, #20]
   1e0d8:	cmp	r0, #0
   1e0dc:	beq	1e17c <__assert_fail@plt+0xb4d8>
   1e0e0:	mov	r3, #1
   1e0e4:	ldr	r0, [sp, #20]
   1e0e8:	str	r3, [r6, #20]
   1e0ec:	bl	125e4 <gcry_free@plt>
   1e0f0:	mov	r0, r4
   1e0f4:	bl	125e4 <gcry_free@plt>
   1e0f8:	ldr	r2, [sp, #24]
   1e0fc:	ldr	r1, [sp, #28]
   1e100:	ldr	r0, [sp, #32]
   1e104:	mov	r3, #0
   1e108:	bl	1da5c <__assert_fail@plt+0xadb8>
   1e10c:	str	r0, [sp, #20]
   1e110:	mov	r0, r5
   1e114:	bl	124a0 <iconv_close@plt>
   1e118:	b	1dbd4 <__assert_fail@plt+0xaf30>
   1e11c:	add	r7, r4, r8
   1e120:	add	r5, sp, #60	; 0x3c
   1e124:	ldrb	r1, [r5], #1
   1e128:	mov	r0, r4
   1e12c:	mov	r3, sl
   1e130:	str	r1, [sp]
   1e134:	mvn	r2, #0
   1e138:	mov	r1, #1
   1e13c:	add	r4, r4, #4
   1e140:	bl	1298c <__sprintf_chk@plt>
   1e144:	cmp	r4, r7
   1e148:	bne	1e124 <__assert_fail@plt+0xb480>
   1e14c:	b	1dfe8 <__assert_fail@plt+0xb344>
   1e150:	mov	r7, r4
   1e154:	mov	r8, r4
   1e158:	b	1db14 <__assert_fail@plt+0xae70>
   1e15c:	mov	r4, r7
   1e160:	b	1db14 <__assert_fail@plt+0xae70>
   1e164:	ldr	r3, [sp, #48]	; 0x30
   1e168:	ldr	r0, [sp, #20]
   1e16c:	str	r4, [sp, #20]
   1e170:	strb	r6, [r3]
   1e174:	bl	125e4 <gcry_free@plt>
   1e178:	b	1e110 <__assert_fail@plt+0xb46c>
   1e17c:	mov	r2, #5
   1e180:	ldr	r1, [pc, #144]	; 1e218 <__assert_fail@plt+0xb574>
   1e184:	bl	12620 <dcgettext@plt>
   1e188:	mov	r8, r0
   1e18c:	bl	12968 <__errno_location@plt>
   1e190:	ldr	r7, [r7]
   1e194:	ldr	r0, [r0]
   1e198:	bl	12818 <strerror@plt>
   1e19c:	mov	r2, r7
   1e1a0:	ldr	r1, [pc, #108]	; 1e214 <__assert_fail@plt+0xb570>
   1e1a4:	mov	r3, r0
   1e1a8:	mov	r0, r8
   1e1ac:	bl	21c58 <__assert_fail@plt+0xefb4>
   1e1b0:	b	1e0e0 <__assert_fail@plt+0xb43c>
   1e1b4:	mov	r2, #1
   1e1b8:	ldr	r1, [pc, #84]	; 1e214 <__assert_fail@plt+0xb570>
   1e1bc:	ldr	r0, [r7]
   1e1c0:	bl	1d958 <__assert_fail@plt+0xacb4>
   1e1c4:	ldr	r0, [sp, #20]
   1e1c8:	bl	125e4 <gcry_free@plt>
   1e1cc:	ldr	r3, [pc, #52]	; 1e208 <__assert_fail@plt+0xb564>
   1e1d0:	ldr	r2, [sp, #24]
   1e1d4:	ldr	r1, [sp, #28]
   1e1d8:	ldr	r0, [sp, #32]
   1e1dc:	ldr	r3, [r3, #16]
   1e1e0:	bl	1da5c <__assert_fail@plt+0xadb8>
   1e1e4:	str	r0, [sp, #20]
   1e1e8:	b	1dbd4 <__assert_fail@plt+0xaf30>
   1e1ec:	bl	1262c <__stack_chk_fail@plt>
   1e1f0:	ldr	r2, [pc, #36]	; 1e21c <__assert_fail@plt+0xb578>
   1e1f4:	ldr	r1, [pc, #36]	; 1e220 <__assert_fail@plt+0xb57c>
   1e1f8:	ldr	r0, [pc, #36]	; 1e224 <__assert_fail@plt+0xb580>
   1e1fc:	bl	2201c <__assert_fail@plt+0xf378>
   1e200:	strdeq	r5, [r4], -r8
   1e204:	andeq	r2, r3, r8, asr r7
   1e208:	andeq	r6, r4, r0, lsl r2
   1e20c:	andeq	r2, r3, r0, ror #14
   1e210:	andeq	r6, r4, ip, ror #3
   1e214:	andeq	r2, r3, ip, lsl #14
   1e218:	andeq	r2, r3, r0, lsl #15
   1e21c:	strdeq	r2, [r3], -r8
   1e220:	andeq	r0, r0, r3, lsl #5
   1e224:	andeq	r2, r3, r8, ror #14
   1e228:	push	{r4, r5, r6, lr}
   1e22c:	subs	r5, r0, #0
   1e230:	beq	1e334 <__assert_fail@plt+0xb690>
   1e234:	mov	r0, r5
   1e238:	bl	128d8 <strlen@plt>
   1e23c:	cmp	r0, #3
   1e240:	bhi	1e274 <__assert_fail@plt+0xb5d0>
   1e244:	ldrb	r3, [r5]
   1e248:	mov	r4, r5
   1e24c:	cmp	r3, #0
   1e250:	bne	1e2ac <__assert_fail@plt+0xb608>
   1e254:	ldr	r3, [pc, #392]	; 1e3e4 <__assert_fail@plt+0xb740>
   1e258:	ldr	r2, [pc, #392]	; 1e3e8 <__assert_fail@plt+0xb744>
   1e25c:	ldr	r1, [pc, #392]	; 1e3ec <__assert_fail@plt+0xb748>
   1e260:	mov	r0, #0
   1e264:	str	r1, [r2]
   1e268:	str	r0, [r3, #12]
   1e26c:	str	r0, [r3, #16]
   1e270:	pop	{r4, r5, r6, pc}
   1e274:	mov	r2, #3
   1e278:	ldr	r1, [pc, #368]	; 1e3f0 <__assert_fail@plt+0xb74c>
   1e27c:	mov	r0, r5
   1e280:	bl	1cc00 <__assert_fail@plt+0x9f5c>
   1e284:	cmp	r0, #0
   1e288:	bne	1e244 <__assert_fail@plt+0xb5a0>
   1e28c:	ldrb	r3, [r5, #3]
   1e290:	cmp	r3, #95	; 0x5f
   1e294:	cmpne	r3, #45	; 0x2d
   1e298:	addne	r4, r5, #3
   1e29c:	ldrbeq	r3, [r5, #4]
   1e2a0:	addeq	r4, r5, #4
   1e2a4:	cmp	r3, #0
   1e2a8:	beq	1e254 <__assert_fail@plt+0xb5b0>
   1e2ac:	ldr	r1, [pc, #320]	; 1e3f4 <__assert_fail@plt+0xb750>
   1e2b0:	mov	r0, r4
   1e2b4:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   1e2b8:	cmp	r0, #0
   1e2bc:	beq	1e254 <__assert_fail@plt+0xb5b0>
   1e2c0:	ldr	r1, [pc, #304]	; 1e3f8 <__assert_fail@plt+0xb754>
   1e2c4:	mov	r0, r4
   1e2c8:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   1e2cc:	cmp	r0, #0
   1e2d0:	beq	1e254 <__assert_fail@plt+0xb5b0>
   1e2d4:	ldr	r1, [pc, #288]	; 1e3fc <__assert_fail@plt+0xb758>
   1e2d8:	mov	r0, r4
   1e2dc:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   1e2e0:	cmp	r0, #0
   1e2e4:	beq	1e254 <__assert_fail@plt+0xb5b0>
   1e2e8:	ldr	r1, [pc, #272]	; 1e400 <__assert_fail@plt+0xb75c>
   1e2ec:	mov	r0, r4
   1e2f0:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   1e2f4:	cmp	r0, #0
   1e2f8:	beq	1e254 <__assert_fail@plt+0xb5b0>
   1e2fc:	ldr	r1, [pc, #256]	; 1e404 <__assert_fail@plt+0xb760>
   1e300:	mov	r0, r4
   1e304:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   1e308:	ldr	r6, [pc, #248]	; 1e408 <__assert_fail@plt+0xb764>
   1e30c:	cmp	r0, #0
   1e310:	bne	1e344 <__assert_fail@plt+0xb6a0>
   1e314:	ldr	r3, [pc, #200]	; 1e3e4 <__assert_fail@plt+0xb740>
   1e318:	ldr	r1, [pc, #200]	; 1e3e8 <__assert_fail@plt+0xb744>
   1e31c:	mov	r2, #1
   1e320:	mov	r0, #0
   1e324:	str	r6, [r1]
   1e328:	str	r2, [r3, #12]
   1e32c:	str	r0, [r3, #16]
   1e330:	pop	{r4, r5, r6, pc}
   1e334:	mov	r0, #14
   1e338:	bl	12af4 <nl_langinfo@plt>
   1e33c:	mov	r5, r0
   1e340:	b	1e234 <__assert_fail@plt+0xb590>
   1e344:	mov	r0, r4
   1e348:	mov	r1, r6
   1e34c:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   1e350:	cmp	r0, #0
   1e354:	beq	1e314 <__assert_fail@plt+0xb670>
   1e358:	mov	r1, r6
   1e35c:	mov	r0, r5
   1e360:	bl	12800 <iconv_open@plt>
   1e364:	cmn	r0, #1
   1e368:	mov	r4, r0
   1e36c:	beq	1e3b4 <__assert_fail@plt+0xb710>
   1e370:	bl	124a0 <iconv_close@plt>
   1e374:	mov	r1, r5
   1e378:	mov	r0, r6
   1e37c:	bl	12800 <iconv_open@plt>
   1e380:	cmn	r0, #1
   1e384:	mov	r4, r0
   1e388:	beq	1e3cc <__assert_fail@plt+0xb728>
   1e38c:	bl	124a0 <iconv_close@plt>
   1e390:	ldr	r3, [pc, #76]	; 1e3e4 <__assert_fail@plt+0xb740>
   1e394:	ldr	ip, [pc, #76]	; 1e3e8 <__assert_fail@plt+0xb744>
   1e398:	mov	r2, #0
   1e39c:	mov	r1, #1
   1e3a0:	mov	r0, r2
   1e3a4:	str	r5, [ip]
   1e3a8:	str	r1, [r3, #16]
   1e3ac:	str	r2, [r3, #12]
   1e3b0:	pop	{r4, r5, r6, pc}
   1e3b4:	mov	r0, r5
   1e3b8:	mov	r1, r6
   1e3bc:	mov	r2, #0
   1e3c0:	bl	1d958 <__assert_fail@plt+0xacb4>
   1e3c4:	mov	r0, r4
   1e3c8:	pop	{r4, r5, r6, pc}
   1e3cc:	mov	r0, r6
   1e3d0:	mov	r1, r5
   1e3d4:	mov	r2, #0
   1e3d8:	bl	1d958 <__assert_fail@plt+0xacb4>
   1e3dc:	mov	r0, r4
   1e3e0:	pop	{r4, r5, r6, pc}
   1e3e4:	andeq	r6, r4, r0, lsl r2
   1e3e8:	andeq	r6, r4, ip, ror #3
   1e3ec:			; <UNDEFINED> instruction: 0x000327b0
   1e3f0:	andeq	r2, r3, ip, lsr #15
   1e3f4:			; <UNDEFINED> instruction: 0x000327b4
   1e3f8:			; <UNDEFINED> instruction: 0x000327bc
   1e3fc:	andeq	r2, r3, r0, asr #15
   1e400:	andeq	r2, r3, r8, asr #15
   1e404:	ldrdeq	r2, [r3], -r8
   1e408:	andeq	r2, r3, ip, lsl #14
   1e40c:	ldr	r3, [pc, #4]	; 1e418 <__assert_fail@plt+0xb774>
   1e410:	ldr	r0, [r3]
   1e414:	bx	lr
   1e418:	andeq	r6, r4, ip, ror #3
   1e41c:	ldr	r3, [pc, #4]	; 1e428 <__assert_fail@plt+0xb784>
   1e420:	ldr	r0, [r3, #12]
   1e424:	bx	lr
   1e428:	andeq	r6, r4, r0, lsl r2
   1e42c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e430:	sub	sp, sp, #32
   1e434:	ldr	r8, [pc, #520]	; 1e644 <__assert_fail@plt+0xb9a0>
   1e438:	ldr	r5, [pc, #520]	; 1e648 <__assert_fail@plt+0xb9a4>
   1e43c:	ldr	r7, [r8, #12]
   1e440:	ldr	r3, [r5]
   1e444:	cmp	r7, #0
   1e448:	str	r3, [sp, #28]
   1e44c:	bne	1e5b0 <__assert_fail@plt+0xb90c>
   1e450:	mov	r4, r0
   1e454:	ldr	r0, [r8, #16]
   1e458:	cmp	r0, #0
   1e45c:	bne	1e504 <__assert_fail@plt+0xb860>
   1e460:	ldrb	r3, [r4]
   1e464:	cmp	r3, #0
   1e468:	beq	1e638 <__assert_fail@plt+0xb994>
   1e46c:	mov	r2, r4
   1e470:	tst	r3, #128	; 0x80
   1e474:	ldrb	r3, [r2, #1]!
   1e478:	addeq	r0, r0, #1
   1e47c:	addne	r0, r0, #2
   1e480:	cmp	r3, #0
   1e484:	bne	1e470 <__assert_fail@plt+0xb7cc>
   1e488:	add	r0, r0, #1
   1e48c:	bl	12410 <gcry_xmalloc@plt>
   1e490:	ldrb	r3, [r4]
   1e494:	cmp	r3, #0
   1e498:	mov	r6, r0
   1e49c:	mov	r2, r0
   1e4a0:	beq	1e4e0 <__assert_fail@plt+0xb83c>
   1e4a4:	mvn	lr, #63	; 0x3f
   1e4a8:	mvn	ip, #127	; 0x7f
   1e4ac:	sxtb	r1, r3
   1e4b0:	cmp	r1, #0
   1e4b4:	movlt	r0, r2
   1e4b8:	orrlt	r3, lr, r3, lsr #6
   1e4bc:	strblt	r3, [r0], #2
   1e4c0:	strbge	r3, [r2], #1
   1e4c4:	ldrb	r3, [r4, #1]!
   1e4c8:	andlt	r1, r1, #63	; 0x3f
   1e4cc:	orrlt	r1, ip, r1
   1e4d0:	strblt	r1, [r2, #1]
   1e4d4:	movlt	r2, r0
   1e4d8:	cmp	r3, #0
   1e4dc:	bne	1e4ac <__assert_fail@plt+0xb808>
   1e4e0:	mov	r3, #0
   1e4e4:	strb	r3, [r2]
   1e4e8:	ldr	r2, [sp, #28]
   1e4ec:	ldr	r3, [r5]
   1e4f0:	mov	r0, r6
   1e4f4:	cmp	r2, r3
   1e4f8:	bne	1e640 <__assert_fail@plt+0xb99c>
   1e4fc:	add	sp, sp, #32
   1e500:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e504:	ldr	sl, [pc, #320]	; 1e64c <__assert_fail@plt+0xb9a8>
   1e508:	ldr	r0, [pc, #320]	; 1e650 <__assert_fail@plt+0xb9ac>
   1e50c:	ldr	r1, [sl]
   1e510:	bl	12800 <iconv_open@plt>
   1e514:	cmn	r0, #1
   1e518:	mov	r9, r0
   1e51c:	beq	1e618 <__assert_fail@plt+0xb974>
   1e520:	ldrb	r3, [r4]
   1e524:	cmp	r3, #0
   1e528:	moveq	r7, r3
   1e52c:	moveq	r0, #1
   1e530:	beq	1e554 <__assert_fail@plt+0xb8b0>
   1e534:	mov	r2, r4
   1e538:	tst	r3, #128	; 0x80
   1e53c:	ldrb	r3, [r2, #1]!
   1e540:	addeq	r7, r7, #1
   1e544:	addne	r7, r7, #6
   1e548:	cmp	r3, #0
   1e54c:	bne	1e538 <__assert_fail@plt+0xb894>
   1e550:	add	r0, r7, #1
   1e554:	bl	12410 <gcry_xmalloc@plt>
   1e558:	str	r4, [sp, #12]
   1e55c:	mov	r6, r0
   1e560:	mov	r0, r4
   1e564:	bl	128d8 <strlen@plt>
   1e568:	add	r3, sp, #24
   1e56c:	str	r3, [sp]
   1e570:	add	r2, sp, #20
   1e574:	add	r3, sp, #16
   1e578:	add	r1, sp, #12
   1e57c:	str	r6, [sp, #16]
   1e580:	str	r7, [sp, #24]
   1e584:	str	r0, [sp, #20]
   1e588:	mov	r0, r9
   1e58c:	bl	124ac <iconv@plt>
   1e590:	cmn	r0, #1
   1e594:	beq	1e5bc <__assert_fail@plt+0xb918>
   1e598:	ldr	r3, [sp, #16]
   1e59c:	mov	r2, #0
   1e5a0:	strb	r2, [r3]
   1e5a4:	mov	r0, r9
   1e5a8:	bl	124a0 <iconv_close@plt>
   1e5ac:	b	1e4e8 <__assert_fail@plt+0xb844>
   1e5b0:	bl	12a40 <gcry_xstrdup@plt>
   1e5b4:	mov	r6, r0
   1e5b8:	b	1e4e8 <__assert_fail@plt+0xb844>
   1e5bc:	ldr	r0, [r8, #24]
   1e5c0:	cmp	r0, #0
   1e5c4:	beq	1e5e0 <__assert_fail@plt+0xb93c>
   1e5c8:	mov	r3, #1
   1e5cc:	mov	r1, r4
   1e5d0:	mov	r0, r6
   1e5d4:	str	r3, [r8, #24]
   1e5d8:	bl	12764 <strcpy@plt>
   1e5dc:	b	1e5a4 <__assert_fail@plt+0xb900>
   1e5e0:	mov	r2, #5
   1e5e4:	ldr	r1, [pc, #104]	; 1e654 <__assert_fail@plt+0xb9b0>
   1e5e8:	bl	12620 <dcgettext@plt>
   1e5ec:	mov	r7, r0
   1e5f0:	bl	12968 <__errno_location@plt>
   1e5f4:	ldr	sl, [sl]
   1e5f8:	ldr	r0, [r0]
   1e5fc:	bl	12818 <strerror@plt>
   1e600:	mov	r1, sl
   1e604:	ldr	r2, [pc, #68]	; 1e650 <__assert_fail@plt+0xb9ac>
   1e608:	mov	r3, r0
   1e60c:	mov	r0, r7
   1e610:	bl	21c58 <__assert_fail@plt+0xefb4>
   1e614:	b	1e5c8 <__assert_fail@plt+0xb924>
   1e618:	ldr	r1, [sl]
   1e61c:	mov	r2, #1
   1e620:	ldr	r0, [pc, #40]	; 1e650 <__assert_fail@plt+0xb9ac>
   1e624:	bl	1d958 <__assert_fail@plt+0xacb4>
   1e628:	mov	r0, r4
   1e62c:	bl	1e42c <__assert_fail@plt+0xb788>
   1e630:	mov	r6, r0
   1e634:	b	1e4e8 <__assert_fail@plt+0xb844>
   1e638:	mov	r0, #1
   1e63c:	b	1e48c <__assert_fail@plt+0xb7e8>
   1e640:	bl	1262c <__stack_chk_fail@plt>
   1e644:	andeq	r6, r4, r0, lsl r2
   1e648:	strdeq	r5, [r4], -r8
   1e64c:	andeq	r6, r4, ip, ror #3
   1e650:	andeq	r2, r3, ip, lsl #14
   1e654:	andeq	r2, r3, r0, lsl #15
   1e658:	ldr	r3, [pc, #4]	; 1e664 <__assert_fail@plt+0xb9c0>
   1e65c:	ldr	r3, [r3, #16]
   1e660:	b	1da5c <__assert_fail@plt+0xadb8>
   1e664:	andeq	r6, r4, r0, lsl r2
   1e668:	b	12800 <iconv_open@plt>
   1e66c:	b	124ac <iconv@plt>
   1e670:	b	124a0 <iconv_close@plt>
   1e674:	push	{r4, r5, r6, lr}
   1e678:	mov	r5, r1
   1e67c:	ldr	r1, [r0, #8]
   1e680:	mov	r4, r0
   1e684:	ands	r3, r1, #32768	; 0x8000
   1e688:	bne	1e6d0 <__assert_fail@plt+0xba2c>
   1e68c:	ldr	r2, [r0]
   1e690:	orr	r1, r1, #32768	; 0x8000
   1e694:	str	r1, [r0, #8]
   1e698:	str	r3, [r0, #28]
   1e69c:	str	r3, [r0, #32]
   1e6a0:	str	r3, [r0, #36]	; 0x24
   1e6a4:	str	r3, [r0, #12]
   1e6a8:	ldr	r2, [r2]
   1e6ac:	str	r3, [r0, #40]	; 0x28
   1e6b0:	cmp	r2, #0
   1e6b4:	str	r3, [r0, #44]	; 0x2c
   1e6b8:	str	r3, [r0, #48]	; 0x30
   1e6bc:	str	r3, [r0, #52]	; 0x34
   1e6c0:	blt	1e828 <__assert_fail@plt+0xbb84>
   1e6c4:	mov	r3, #0
   1e6c8:	str	r3, [r4, #24]
   1e6cc:	pop	{r4, r5, r6, pc}
   1e6d0:	ldr	r3, [r0, #12]
   1e6d4:	cmp	r3, #0
   1e6d8:	beq	1e6c4 <__assert_fail@plt+0xba20>
   1e6dc:	cmp	r5, #0
   1e6e0:	ldr	r3, [r0, #16]
   1e6e4:	beq	1e76c <__assert_fail@plt+0xbac8>
   1e6e8:	cmn	r3, #6
   1e6ec:	mov	r6, r2
   1e6f0:	mov	r2, #5
   1e6f4:	beq	1e7d0 <__assert_fail@plt+0xbb2c>
   1e6f8:	cmn	r3, #5
   1e6fc:	beq	1e7e4 <__assert_fail@plt+0xbb40>
   1e700:	cmn	r3, #4
   1e704:	beq	1e7f8 <__assert_fail@plt+0xbb54>
   1e708:	cmn	r3, #3
   1e70c:	beq	1e830 <__assert_fail@plt+0xbb8c>
   1e710:	cmn	r3, #12
   1e714:	beq	1e860 <__assert_fail@plt+0xbbbc>
   1e718:	cmn	r3, #7
   1e71c:	beq	1e890 <__assert_fail@plt+0xbbec>
   1e720:	cmn	r3, #10
   1e724:	beq	1e8c0 <__assert_fail@plt+0xbc1c>
   1e728:	cmn	r3, #11
   1e72c:	mov	r0, #0
   1e730:	ldreq	r1, [pc, #496]	; 1e928 <__assert_fail@plt+0xbc84>
   1e734:	ldrne	r1, [pc, #496]	; 1e92c <__assert_fail@plt+0xbc88>
   1e738:	bl	12620 <dcgettext@plt>
   1e73c:	mov	r3, r0
   1e740:	ldr	r2, [r6]
   1e744:	mov	r1, r5
   1e748:	ldr	r0, [pc, #480]	; 1e930 <__assert_fail@plt+0xbc8c>
   1e74c:	bl	21cbc <__assert_fail@plt+0xf018>
   1e750:	ldr	r3, [r4, #12]
   1e754:	cmp	r3, #1
   1e758:	moveq	r3, #0
   1e75c:	streq	r3, [r4, #12]
   1e760:	beq	1e6c4 <__assert_fail@plt+0xba20>
   1e764:	mov	r0, #2
   1e768:	bl	128b4 <exit@plt>
   1e76c:	ldr	r6, [r0, #40]	; 0x28
   1e770:	ldr	r2, [pc, #444]	; 1e934 <__assert_fail@plt+0xbc90>
   1e774:	cmp	r6, #0
   1e778:	moveq	r6, r2
   1e77c:	cmn	r3, #3
   1e780:	beq	1e844 <__assert_fail@plt+0xbba0>
   1e784:	cmn	r3, #12
   1e788:	beq	1e874 <__assert_fail@plt+0xbbd0>
   1e78c:	cmn	r3, #6
   1e790:	beq	1e8a4 <__assert_fail@plt+0xbc00>
   1e794:	cmn	r3, #7
   1e798:	beq	1e8d4 <__assert_fail@plt+0xbc30>
   1e79c:	cmn	r3, #8
   1e7a0:	beq	1e80c <__assert_fail@plt+0xbb68>
   1e7a4:	cmn	r3, #9
   1e7a8:	beq	1e90c <__assert_fail@plt+0xbc68>
   1e7ac:	cmn	r3, #11
   1e7b0:	mov	r2, #5
   1e7b4:	beq	1e8f0 <__assert_fail@plt+0xbc4c>
   1e7b8:	ldr	r1, [pc, #376]	; 1e938 <__assert_fail@plt+0xbc94>
   1e7bc:	mov	r0, #0
   1e7c0:	bl	12620 <dcgettext@plt>
   1e7c4:	mov	r1, r6
   1e7c8:	bl	21cbc <__assert_fail@plt+0xf018>
   1e7cc:	b	1e750 <__assert_fail@plt+0xbaac>
   1e7d0:	ldr	r1, [pc, #356]	; 1e93c <__assert_fail@plt+0xbc98>
   1e7d4:	mov	r0, #0
   1e7d8:	bl	12620 <dcgettext@plt>
   1e7dc:	mov	r3, r0
   1e7e0:	b	1e740 <__assert_fail@plt+0xba9c>
   1e7e4:	ldr	r1, [pc, #340]	; 1e940 <__assert_fail@plt+0xbc9c>
   1e7e8:	mov	r0, #0
   1e7ec:	bl	12620 <dcgettext@plt>
   1e7f0:	mov	r3, r0
   1e7f4:	b	1e740 <__assert_fail@plt+0xba9c>
   1e7f8:	ldr	r1, [pc, #324]	; 1e944 <__assert_fail@plt+0xbca0>
   1e7fc:	mov	r0, #0
   1e800:	bl	12620 <dcgettext@plt>
   1e804:	mov	r3, r0
   1e808:	b	1e740 <__assert_fail@plt+0xba9c>
   1e80c:	mov	r0, r5
   1e810:	mov	r2, #5
   1e814:	ldr	r1, [pc, #300]	; 1e948 <__assert_fail@plt+0xbca4>
   1e818:	bl	12620 <dcgettext@plt>
   1e81c:	mov	r1, r6
   1e820:	bl	21cbc <__assert_fail@plt+0xf018>
   1e824:	b	1e750 <__assert_fail@plt+0xbaac>
   1e828:	ldr	r0, [pc, #284]	; 1e94c <__assert_fail@plt+0xbca8>
   1e82c:	bl	21dc4 <__assert_fail@plt+0xf120>
   1e830:	ldr	r1, [pc, #280]	; 1e950 <__assert_fail@plt+0xbcac>
   1e834:	mov	r0, #0
   1e838:	bl	12620 <dcgettext@plt>
   1e83c:	mov	r3, r0
   1e840:	b	1e740 <__assert_fail@plt+0xba9c>
   1e844:	mov	r0, r5
   1e848:	mov	r2, #5
   1e84c:	ldr	r1, [pc, #256]	; 1e954 <__assert_fail@plt+0xbcb0>
   1e850:	bl	12620 <dcgettext@plt>
   1e854:	mov	r1, r6
   1e858:	bl	21cbc <__assert_fail@plt+0xf018>
   1e85c:	b	1e750 <__assert_fail@plt+0xbaac>
   1e860:	ldr	r1, [pc, #240]	; 1e958 <__assert_fail@plt+0xbcb4>
   1e864:	mov	r0, #0
   1e868:	bl	12620 <dcgettext@plt>
   1e86c:	mov	r3, r0
   1e870:	b	1e740 <__assert_fail@plt+0xba9c>
   1e874:	mov	r0, r5
   1e878:	mov	r2, #5
   1e87c:	ldr	r1, [pc, #216]	; 1e95c <__assert_fail@plt+0xbcb8>
   1e880:	bl	12620 <dcgettext@plt>
   1e884:	mov	r1, r6
   1e888:	bl	21cbc <__assert_fail@plt+0xf018>
   1e88c:	b	1e750 <__assert_fail@plt+0xbaac>
   1e890:	ldr	r1, [pc, #200]	; 1e960 <__assert_fail@plt+0xbcbc>
   1e894:	mov	r0, #0
   1e898:	bl	12620 <dcgettext@plt>
   1e89c:	mov	r3, r0
   1e8a0:	b	1e740 <__assert_fail@plt+0xba9c>
   1e8a4:	mov	r0, r5
   1e8a8:	mov	r2, #5
   1e8ac:	ldr	r1, [pc, #176]	; 1e964 <__assert_fail@plt+0xbcc0>
   1e8b0:	bl	12620 <dcgettext@plt>
   1e8b4:	mov	r1, r6
   1e8b8:	bl	21cbc <__assert_fail@plt+0xf018>
   1e8bc:	b	1e750 <__assert_fail@plt+0xbaac>
   1e8c0:	ldr	r1, [pc, #160]	; 1e968 <__assert_fail@plt+0xbcc4>
   1e8c4:	mov	r0, #0
   1e8c8:	bl	12620 <dcgettext@plt>
   1e8cc:	mov	r3, r0
   1e8d0:	b	1e740 <__assert_fail@plt+0xba9c>
   1e8d4:	mov	r0, r5
   1e8d8:	mov	r2, #5
   1e8dc:	ldr	r1, [pc, #136]	; 1e96c <__assert_fail@plt+0xbcc8>
   1e8e0:	bl	12620 <dcgettext@plt>
   1e8e4:	mov	r1, r6
   1e8e8:	bl	21cbc <__assert_fail@plt+0xf018>
   1e8ec:	b	1e750 <__assert_fail@plt+0xbaac>
   1e8f0:	ldr	r1, [pc, #120]	; 1e970 <__assert_fail@plt+0xbccc>
   1e8f4:	mov	r0, #0
   1e8f8:	bl	12620 <dcgettext@plt>
   1e8fc:	mov	r1, r0
   1e900:	ldr	r0, [pc, #108]	; 1e974 <__assert_fail@plt+0xbcd0>
   1e904:	bl	21cbc <__assert_fail@plt+0xf018>
   1e908:	b	1e750 <__assert_fail@plt+0xbaac>
   1e90c:	mov	r0, r5
   1e910:	mov	r2, #5
   1e914:	ldr	r1, [pc, #92]	; 1e978 <__assert_fail@plt+0xbcd4>
   1e918:	bl	12620 <dcgettext@plt>
   1e91c:	mov	r1, r6
   1e920:	bl	21cbc <__assert_fail@plt+0xf018>
   1e924:	b	1e750 <__assert_fail@plt+0xbaac>
   1e928:	ldrdeq	r2, [r3], -r4
   1e92c:	andeq	r2, r3, r0, ror #17
   1e930:	strdeq	r2, [r3], -r0
   1e934:	andeq	r2, r3, r0, lsr #16
   1e938:	andeq	r2, r3, r4, ror #19
   1e93c:	andeq	r2, r3, r8, asr #16
   1e940:	andeq	r2, r3, r0, ror #16
   1e944:	andeq	r2, r3, ip, ror #16
   1e948:	muleq	r3, r4, r9
   1e94c:	andeq	r2, r3, r8, lsr #16
   1e950:	andeq	r2, r3, r0, lsl #17
   1e954:	strdeq	r2, [r3], -ip
   1e958:	muleq	r3, r4, r8
   1e95c:	andeq	r2, r3, r4, lsr #18
   1e960:	andeq	r2, r3, r8, lsr #17
   1e964:	andeq	r2, r3, ip, asr #18
   1e968:			; <UNDEFINED> instruction: 0x000328b8
   1e96c:	andeq	r2, r3, r8, ror r9
   1e970:	ldrdeq	r2, [r3], -r4
   1e974:			; <UNDEFINED> instruction: 0x000303b8
   1e978:			; <UNDEFINED> instruction: 0x000329b4
   1e97c:	tst	r1, #16
   1e980:	and	r1, r1, #7
   1e984:	push	{r4, r5, r6, r7, r8, lr}
   1e988:	movne	r7, #0
   1e98c:	moveq	r7, #10
   1e990:	cmp	r1, #3
   1e994:	mov	r6, r0
   1e998:	str	r1, [r0, #20]
   1e99c:	mov	r5, r2
   1e9a0:	beq	1e9c0 <__assert_fail@plt+0xbd1c>
   1e9a4:	cmp	r1, #4
   1e9a8:	beq	1ea00 <__assert_fail@plt+0xbd5c>
   1e9ac:	cmp	r1, #1
   1e9b0:	beq	1e9c0 <__assert_fail@plt+0xbd1c>
   1e9b4:	str	r2, [r6, #24]
   1e9b8:	mov	r0, #1
   1e9bc:	pop	{r4, r5, r6, r7, r8, pc}
   1e9c0:	bl	12968 <__errno_location@plt>
   1e9c4:	mov	r1, #0
   1e9c8:	mov	r2, r7
   1e9cc:	mov	r4, r0
   1e9d0:	mov	r0, r5
   1e9d4:	str	r1, [r4]
   1e9d8:	bl	124d0 <strtol@plt>
   1e9dc:	sub	r3, r0, #-2147483647	; 0x80000001
   1e9e0:	cmn	r3, #3
   1e9e4:	bls	1e9f4 <__assert_fail@plt+0xbd50>
   1e9e8:	ldr	r3, [r4]
   1e9ec:	cmp	r3, #34	; 0x22
   1e9f0:	beq	1ea7c <__assert_fail@plt+0xbdd8>
   1e9f4:	str	r0, [r6, #24]
   1e9f8:	mov	r0, #0
   1e9fc:	pop	{r4, r5, r6, r7, r8, pc}
   1ea00:	ldrb	r4, [r2]
   1ea04:	tst	r4, #128	; 0x80
   1ea08:	bne	1ea34 <__assert_fail@plt+0xbd90>
   1ea0c:	bl	12884 <__ctype_b_loc@plt>
   1ea10:	ldr	r2, [r0]
   1ea14:	b	1ea24 <__assert_fail@plt+0xbd80>
   1ea18:	ldrb	r4, [r5, #1]!
   1ea1c:	tst	r4, #128	; 0x80
   1ea20:	bne	1ea34 <__assert_fail@plt+0xbd90>
   1ea24:	lsl	r3, r4, #1
   1ea28:	ldrh	r3, [r2, r3]
   1ea2c:	tst	r3, #8192	; 0x2000
   1ea30:	bne	1ea18 <__assert_fail@plt+0xbd74>
   1ea34:	cmp	r4, #45	; 0x2d
   1ea38:	beq	1ea8c <__assert_fail@plt+0xbde8>
   1ea3c:	bl	12968 <__errno_location@plt>
   1ea40:	mov	r4, #0
   1ea44:	mov	r2, r7
   1ea48:	mov	r1, r4
   1ea4c:	mov	r8, r0
   1ea50:	mov	r0, r5
   1ea54:	str	r4, [r8]
   1ea58:	bl	128cc <strtoul@plt>
   1ea5c:	cmn	r0, #1
   1ea60:	str	r0, [r6, #24]
   1ea64:	beq	1ea70 <__assert_fail@plt+0xbdcc>
   1ea68:	mov	r0, r4
   1ea6c:	pop	{r4, r5, r6, r7, r8, pc}
   1ea70:	ldr	r3, [r8]
   1ea74:	cmp	r3, #34	; 0x22
   1ea78:	bne	1ea68 <__assert_fail@plt+0xbdc4>
   1ea7c:	mvn	r3, #11
   1ea80:	str	r3, [r6, #16]
   1ea84:	mvn	r0, #0
   1ea88:	pop	{r4, r5, r6, r7, r8, pc}
   1ea8c:	mov	r2, #0
   1ea90:	mvn	r3, #11
   1ea94:	str	r2, [r6, #24]
   1ea98:	str	r3, [r6, #16]
   1ea9c:	mvn	r0, #0
   1eaa0:	pop	{r4, r5, r6, r7, r8, pc}
   1eaa4:	push	{r1, r2, r3}
   1eaa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaac:	sub	sp, sp, #8
   1eab0:	ldr	r8, [pc, #188]	; 1eb74 <__assert_fail@plt+0xbed0>
   1eab4:	ldr	r4, [sp, #44]	; 0x2c
   1eab8:	ldr	r3, [r8]
   1eabc:	cmp	r4, #0
   1eac0:	str	r3, [sp, #4]
   1eac4:	moveq	r5, r4
   1eac8:	beq	1eb4c <__assert_fail@plt+0xbea8>
   1eacc:	cmp	r0, #0
   1ead0:	add	r2, sp, #48	; 0x30
   1ead4:	mov	r9, r0
   1ead8:	ldr	r6, [pc, #152]	; 1eb78 <__assert_fail@plt+0xbed4>
   1eadc:	ldr	fp, [pc, #152]	; 1eb7c <__assert_fail@plt+0xbed8>
   1eae0:	movne	r7, #2
   1eae4:	moveq	r7, #1
   1eae8:	mov	sl, r2
   1eaec:	mov	r5, #0
   1eaf0:	str	r2, [sp]
   1eaf4:	b	1eb24 <__assert_fail@plt+0xbe80>
   1eaf8:	mov	r1, r4
   1eafc:	mov	r0, r7
   1eb00:	blx	r2
   1eb04:	mov	r0, r4
   1eb08:	bl	128d8 <strlen@plt>
   1eb0c:	add	sl, sl, #4
   1eb10:	ldr	r4, [sl, #-4]
   1eb14:	str	sl, [sp]
   1eb18:	cmp	r4, #0
   1eb1c:	add	r5, r5, r0
   1eb20:	beq	1eb4c <__assert_fail@plt+0xbea8>
   1eb24:	ldr	r2, [r6]
   1eb28:	cmp	r2, #0
   1eb2c:	bne	1eaf8 <__assert_fail@plt+0xbe54>
   1eb30:	cmp	r9, #0
   1eb34:	mov	r0, r4
   1eb38:	ldrne	r3, [pc, #64]	; 1eb80 <__assert_fail@plt+0xbedc>
   1eb3c:	ldreq	r1, [fp]
   1eb40:	ldrne	r1, [r3]
   1eb44:	bl	12c20 <fputs@plt>
   1eb48:	b	1eb04 <__assert_fail@plt+0xbe60>
   1eb4c:	ldr	r2, [sp, #4]
   1eb50:	ldr	r3, [r8]
   1eb54:	mov	r0, r5
   1eb58:	cmp	r2, r3
   1eb5c:	bne	1eb70 <__assert_fail@plt+0xbecc>
   1eb60:	add	sp, sp, #8
   1eb64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb68:	add	sp, sp, #12
   1eb6c:	bx	lr
   1eb70:	bl	1262c <__stack_chk_fail@plt>
   1eb74:	strdeq	r5, [r4], -r8
   1eb78:	andeq	r6, r4, ip, lsr #4
   1eb7c:	strdeq	r6, [r4], -ip
   1eb80:	strdeq	r6, [r4], -r8
   1eb84:	ldr	r3, [pc, #48]	; 1ebbc <__assert_fail@plt+0xbf18>
   1eb88:	ldr	r3, [r3]
   1eb8c:	cmp	r3, #0
   1eb90:	beq	1eba8 <__assert_fail@plt+0xbf04>
   1eb94:	cmp	r0, #0
   1eb98:	movne	r0, #2
   1eb9c:	moveq	r0, #1
   1eba0:	mov	r1, #0
   1eba4:	bx	r3
   1eba8:	cmp	r0, #0
   1ebac:	ldrne	r3, [pc, #12]	; 1ebc0 <__assert_fail@plt+0xbf1c>
   1ebb0:	ldreq	r3, [pc, #12]	; 1ebc4 <__assert_fail@plt+0xbf20>
   1ebb4:	ldr	r0, [r3]
   1ebb8:	b	12530 <fflush@plt>
   1ebbc:	andeq	r6, r4, ip, lsr #4
   1ebc0:	strdeq	r6, [r4], -r8
   1ebc4:	strdeq	r6, [r4], -ip
   1ebc8:	ldr	r3, [pc, #4]	; 1ebd4 <__assert_fail@plt+0xbf30>
   1ebcc:	str	r0, [r3]
   1ebd0:	bx	lr
   1ebd4:	andeq	r6, r4, ip, lsr #4
   1ebd8:	ldr	r3, [pc, #244]	; 1ecd4 <__assert_fail@plt+0xc030>
   1ebdc:	push	{r4, lr}
   1ebe0:	mov	r4, r0
   1ebe4:	ldr	r3, [r3, #4]
   1ebe8:	cmp	r3, #0
   1ebec:	beq	1ebfc <__assert_fail@plt+0xbf58>
   1ebf0:	blx	r3
   1ebf4:	cmp	r0, #0
   1ebf8:	bne	1ec8c <__assert_fail@plt+0xbfe8>
   1ebfc:	sub	r0, r4, #10
   1ec00:	cmp	r0, #31
   1ec04:	ldrls	pc, [pc, r0, lsl #2]
   1ec08:	b	1eccc <__assert_fail@plt+0xc028>
   1ec0c:	muleq	r1, ip, ip
   1ec10:	andeq	lr, r1, r4, lsr #25
   1ec14:	andeq	lr, r1, ip, asr #25
   1ec18:	andeq	lr, r1, ip, lsr #25
   1ec1c:			; <UNDEFINED> instruction: 0x0001ecb4
   1ec20:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec24:	andeq	lr, r1, r4, asr #25
   1ec28:	andeq	lr, r1, ip, asr #25
   1ec2c:	andeq	lr, r1, ip, asr #25
   1ec30:	andeq	lr, r1, ip, asr #25
   1ec34:	andeq	lr, r1, ip, asr #25
   1ec38:	andeq	lr, r1, ip, asr #25
   1ec3c:	andeq	lr, r1, ip, asr #25
   1ec40:	andeq	lr, r1, ip, asr #25
   1ec44:	andeq	lr, r1, ip, asr #25
   1ec48:	andeq	lr, r1, ip, asr #25
   1ec4c:	andeq	lr, r1, ip, asr #25
   1ec50:	andeq	lr, r1, ip, asr #25
   1ec54:	andeq	lr, r1, ip, asr #25
   1ec58:	andeq	lr, r1, ip, asr #25
   1ec5c:	andeq	lr, r1, ip, asr #25
   1ec60:	andeq	lr, r1, ip, asr #25
   1ec64:	andeq	lr, r1, ip, asr #25
   1ec68:	andeq	lr, r1, ip, asr #25
   1ec6c:	andeq	lr, r1, ip, asr #25
   1ec70:	andeq	lr, r1, ip, asr #25
   1ec74:	andeq	lr, r1, ip, asr #25
   1ec78:	andeq	lr, r1, ip, asr #25
   1ec7c:	andeq	lr, r1, ip, asr #25
   1ec80:	andeq	lr, r1, ip, asr #25
   1ec84:	muleq	r1, r4, ip
   1ec88:	muleq	r1, r4, ip
   1ec8c:	pop	{r4, lr}
   1ec90:	b	2f574 <__assert_fail@plt+0x1c8d0>
   1ec94:	ldr	r0, [pc, #60]	; 1ecd8 <__assert_fail@plt+0xc034>
   1ec98:	pop	{r4, pc}
   1ec9c:	ldr	r0, [pc, #56]	; 1ecdc <__assert_fail@plt+0xc038>
   1eca0:	pop	{r4, pc}
   1eca4:	ldr	r0, [pc, #52]	; 1ece0 <__assert_fail@plt+0xc03c>
   1eca8:	pop	{r4, pc}
   1ecac:	ldr	r0, [pc, #48]	; 1ece4 <__assert_fail@plt+0xc040>
   1ecb0:	pop	{r4, pc}
   1ecb4:	ldr	r0, [pc, #44]	; 1ece8 <__assert_fail@plt+0xc044>
   1ecb8:	pop	{r4, pc}
   1ecbc:	ldr	r0, [pc, #40]	; 1ecec <__assert_fail@plt+0xc048>
   1ecc0:	pop	{r4, pc}
   1ecc4:	ldr	r0, [pc, #36]	; 1ecf0 <__assert_fail@plt+0xc04c>
   1ecc8:	pop	{r4, pc}
   1eccc:	mov	r0, #0
   1ecd0:	pop	{r4, pc}
   1ecd4:	andeq	r6, r4, ip, lsr #4
   1ecd8:	andeq	r1, r3, r8, ror #15
   1ecdc:	andeq	r2, r3, r8, lsl #26
   1ece0:	strdeq	r2, [r3], -ip
   1ece4:	andeq	r2, r3, r4, lsl #26
   1ece8:	ldrdeq	r2, [r3], -r0
   1ecec:	andeq	r2, r3, r4, asr ip
   1ecf0:	andeq	r2, r3, r0, lsl #20
   1ecf4:	push	{r4, r5, lr}
   1ecf8:	mov	r0, #11
   1ecfc:	sub	sp, sp, #12
   1ed00:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1ed04:	mov	r2, #0
   1ed08:	mov	r1, r0
   1ed0c:	mov	r0, r2
   1ed10:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ed14:	mov	r0, #12
   1ed18:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1ed1c:	subs	r2, r0, #0
   1ed20:	beq	1ed38 <__assert_fail@plt+0xc094>
   1ed24:	mov	r0, #0
   1ed28:	str	r0, [sp]
   1ed2c:	ldr	r3, [pc, #268]	; 1ee40 <__assert_fail@plt+0xc19c>
   1ed30:	ldr	r1, [pc, #268]	; 1ee44 <__assert_fail@plt+0xc1a0>
   1ed34:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ed38:	mov	r0, #13
   1ed3c:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1ed40:	mov	ip, #0
   1ed44:	ldr	r3, [pc, #252]	; 1ee48 <__assert_fail@plt+0xc1a4>
   1ed48:	str	ip, [sp]
   1ed4c:	ldr	r1, [pc, #248]	; 1ee4c <__assert_fail@plt+0xc1a8>
   1ed50:	mov	r5, r3
   1ed54:	mov	r4, #20
   1ed58:	mov	r2, r0
   1ed5c:	mov	r0, ip
   1ed60:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ed64:	mov	r0, r4
   1ed68:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1ed6c:	mov	r3, #0
   1ed70:	mov	r2, r5
   1ed74:	add	r4, r4, #1
   1ed78:	subs	r1, r0, #0
   1ed7c:	mov	r0, r3
   1ed80:	beq	1ed88 <__assert_fail@plt+0xc0e4>
   1ed84:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ed88:	cmp	r4, #30
   1ed8c:	bne	1ed64 <__assert_fail@plt+0xc0c0>
   1ed90:	mov	r0, #14
   1ed94:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1ed98:	subs	r1, r0, #0
   1ed9c:	beq	1edb0 <__assert_fail@plt+0xc10c>
   1eda0:	mov	r3, #0
   1eda4:	mov	r0, r3
   1eda8:	ldr	r2, [pc, #152]	; 1ee48 <__assert_fail@plt+0xc1a4>
   1edac:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1edb0:	mov	r0, #10
   1edb4:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1edb8:	subs	r1, r0, #0
   1edbc:	beq	1edd0 <__assert_fail@plt+0xc12c>
   1edc0:	mov	r3, #0
   1edc4:	mov	r0, r3
   1edc8:	ldr	r2, [pc, #120]	; 1ee48 <__assert_fail@plt+0xc1a4>
   1edcc:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1edd0:	mov	r0, #15
   1edd4:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1edd8:	subs	r1, r0, #0
   1eddc:	beq	1edec <__assert_fail@plt+0xc148>
   1ede0:	mov	r2, #0
   1ede4:	mov	r0, r2
   1ede8:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1edec:	mov	r0, #18
   1edf0:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1edf4:	subs	r1, r0, #0
   1edf8:	beq	1ee08 <__assert_fail@plt+0xc164>
   1edfc:	mov	r2, #0
   1ee00:	mov	r0, r2
   1ee04:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ee08:	mov	r0, r4
   1ee0c:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1ee10:	mov	r2, #0
   1ee14:	add	r4, r4, #1
   1ee18:	subs	r1, r0, #0
   1ee1c:	mov	r0, r2
   1ee20:	beq	1ee28 <__assert_fail@plt+0xc184>
   1ee24:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ee28:	cmp	r4, #40	; 0x28
   1ee2c:	bne	1ee08 <__assert_fail@plt+0xc164>
   1ee30:	mov	r0, #0
   1ee34:	add	sp, sp, #12
   1ee38:	pop	{r4, r5, lr}
   1ee3c:	b	1eb84 <__assert_fail@plt+0xbee0>
   1ee40:	andeq	r1, r3, ip, asr #7
   1ee44:	andeq	r2, r3, r8, asr sp
   1ee48:	andeq	r0, r3, r0, lsl #26
   1ee4c:	andeq	r2, r3, ip, lsl #29
   1ee50:	ldr	r3, [pc, #1504]	; 1f438 <__assert_fail@plt+0xc794>
   1ee54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee58:	sub	sp, sp, #28
   1ee5c:	ldr	r3, [r3]
   1ee60:	mov	r7, r0
   1ee64:	str	r3, [sp, #20]
   1ee68:	str	r1, [sp, #8]
   1ee6c:	bl	1ecf4 <__assert_fail@plt+0xc050>
   1ee70:	mov	r2, #0
   1ee74:	mov	r0, r2
   1ee78:	ldr	r1, [pc, #1468]	; 1f43c <__assert_fail@plt+0xc798>
   1ee7c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ee80:	mov	r0, #42	; 0x2a
   1ee84:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1ee88:	cmp	r0, #0
   1ee8c:	beq	1ee9c <__assert_fail@plt+0xc1f8>
   1ee90:	ldrb	r3, [r0]
   1ee94:	cmp	r3, #49	; 0x31
   1ee98:	beq	1f350 <__assert_fail@plt+0xc6ac>
   1ee9c:	mov	r0, #41	; 0x29
   1eea0:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1eea4:	mov	r3, #0
   1eea8:	ldr	r2, [pc, #1420]	; 1f43c <__assert_fail@plt+0xc798>
   1eeac:	mov	r1, r0
   1eeb0:	mov	r0, r3
   1eeb4:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1eeb8:	ldr	r3, [r7, #12]
   1eebc:	cmp	r3, #0
   1eec0:	beq	1ef6c <__assert_fail@plt+0xc2c8>
   1eec4:	ldr	r2, [r7]
   1eec8:	cmp	r2, #0
   1eecc:	beq	1ef44 <__assert_fail@plt+0xc2a0>
   1eed0:	mov	r4, r7
   1eed4:	mov	r6, #0
   1eed8:	b	1ef20 <__assert_fail@plt+0xc27c>
   1eedc:	ldrb	r8, [r3]
   1eee0:	cmp	r8, #64	; 0x40
   1eee4:	beq	1ef14 <__assert_fail@plt+0xc270>
   1eee8:	bl	128d8 <strlen@plt>
   1eeec:	cmp	r8, #124	; 0x7c
   1eef0:	mov	r5, r0
   1eef4:	beq	1f268 <__assert_fail@plt+0xc5c4>
   1eef8:	cmp	r5, #34	; 0x22
   1eefc:	movle	r3, #1
   1ef00:	movgt	r3, #0
   1ef04:	cmp	r5, r6
   1ef08:	movle	r3, #0
   1ef0c:	cmp	r3, #0
   1ef10:	movne	r6, r5
   1ef14:	ldr	r3, [r4, #16]!
   1ef18:	cmp	r3, #0
   1ef1c:	beq	1efac <__assert_fail@plt+0xc308>
   1ef20:	ldr	r0, [r4, #4]
   1ef24:	cmp	r0, #0
   1ef28:	beq	1ef14 <__assert_fail@plt+0xc270>
   1ef2c:	ldr	r3, [r4, #12]
   1ef30:	cmp	r3, #0
   1ef34:	bne	1eedc <__assert_fail@plt+0xc238>
   1ef38:	bl	128d8 <strlen@plt>
   1ef3c:	mov	r5, r0
   1ef40:	b	1eef8 <__assert_fail@plt+0xc254>
   1ef44:	ldrb	r3, [r3]
   1ef48:	cmp	r3, #64	; 0x40
   1ef4c:	bne	1f24c <__assert_fail@plt+0xc5a8>
   1ef50:	ldr	r3, [sp, #8]
   1ef54:	tst	r3, #32
   1ef58:	beq	1ef6c <__assert_fail@plt+0xc2c8>
   1ef5c:	mov	r2, #0
   1ef60:	mov	r0, r2
   1ef64:	ldr	r1, [pc, #1236]	; 1f440 <__assert_fail@plt+0xc79c>
   1ef68:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ef6c:	mov	r0, #19
   1ef70:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1ef74:	subs	r4, r0, #0
   1ef78:	beq	1ef9c <__assert_fail@plt+0xc2f8>
   1ef7c:	mov	r2, #0
   1ef80:	mov	r0, r2
   1ef84:	ldr	r1, [pc, #1200]	; 1f43c <__assert_fail@plt+0xc798>
   1ef88:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ef8c:	mov	r2, #0
   1ef90:	mov	r1, r4
   1ef94:	mov	r0, r2
   1ef98:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1ef9c:	mov	r0, #0
   1efa0:	bl	1eb84 <__assert_fail@plt+0xbee0>
   1efa4:	mov	r0, #0
   1efa8:	bl	128b4 <exit@plt>
   1efac:	ldr	r3, [r7, #12]
   1efb0:	add	r6, r6, #10
   1efb4:	ldrb	r3, [r3]
   1efb8:	cmp	r3, #64	; 0x40
   1efbc:	bne	1f250 <__assert_fail@plt+0xc5ac>
   1efc0:	ldr	r3, [r7]
   1efc4:	cmp	r3, #0
   1efc8:	beq	1ef50 <__assert_fail@plt+0xc2ac>
   1efcc:	ldr	fp, [pc, #1136]	; 1f444 <__assert_fail@plt+0xc7a0>
   1efd0:	ldr	sl, [pc, #1136]	; 1f448 <__assert_fail@plt+0xc7a4>
   1efd4:	add	r7, r7, #16
   1efd8:	mov	r2, #5
   1efdc:	ldr	r1, [r7, #-4]
   1efe0:	mov	r0, #0
   1efe4:	bl	12620 <dcgettext@plt>
   1efe8:	bl	2f574 <__assert_fail@plt+0x1c8d0>
   1efec:	subs	r5, r0, #0
   1eff0:	beq	1f000 <__assert_fail@plt+0xc35c>
   1eff4:	ldrb	r3, [r5]
   1eff8:	cmp	r3, #64	; 0x40
   1effc:	beq	1f1bc <__assert_fail@plt+0xc518>
   1f000:	ldr	r1, [r7, #-16]
   1f004:	cmp	r1, #255	; 0xff
   1f008:	bgt	1f0ec <__assert_fail@plt+0xc448>
   1f00c:	mov	ip, #0
   1f010:	add	r9, sp, #16
   1f014:	mov	r3, ip
   1f018:	strb	r1, [sp, #16]
   1f01c:	mov	r0, ip
   1f020:	mov	r2, r9
   1f024:	ldr	r1, [pc, #1056]	; 1f44c <__assert_fail@plt+0xc7a8>
   1f028:	strb	ip, [sp, #17]
   1f02c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f030:	ldr	r3, [r7, #-12]
   1f034:	cmp	r3, #0
   1f038:	movne	r4, #3
   1f03c:	beq	1f230 <__assert_fail@plt+0xc58c>
   1f040:	ldr	r2, [r7, #-16]
   1f044:	mov	r8, #0
   1f048:	cmp	r2, #256	; 0x100
   1f04c:	movlt	ip, #44	; 0x2c
   1f050:	movge	ip, #32
   1f054:	str	r8, [sp]
   1f058:	mov	r0, r8
   1f05c:	mov	r2, fp
   1f060:	mov	r1, r9
   1f064:	strb	ip, [sp, #16]
   1f068:	strb	r8, [sp, #17]
   1f06c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f070:	cmp	r5, r8
   1f074:	add	r4, r4, r0
   1f078:	beq	1f088 <__assert_fail@plt+0xc3e4>
   1f07c:	ldrb	r3, [r5]
   1f080:	cmp	r3, #124	; 0x7c
   1f084:	beq	1f2b8 <__assert_fail@plt+0xc614>
   1f088:	mov	r2, #0
   1f08c:	mov	r0, r2
   1f090:	mov	r1, sl
   1f094:	add	r4, r4, #3
   1f098:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f09c:	cmp	r6, r4
   1f0a0:	ble	1f0c4 <__assert_fail@plt+0xc420>
   1f0a4:	ldr	r8, [pc, #932]	; 1f450 <__assert_fail@plt+0xc7ac>
   1f0a8:	mov	r2, #0
   1f0ac:	add	r4, r4, #1
   1f0b0:	mov	r0, r2
   1f0b4:	mov	r1, r8
   1f0b8:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f0bc:	cmp	r6, r4
   1f0c0:	bne	1f0a8 <__assert_fail@plt+0xc404>
   1f0c4:	cmp	r5, #0
   1f0c8:	bne	1f114 <__assert_fail@plt+0xc470>
   1f0cc:	mov	r2, #0
   1f0d0:	mov	r0, r2
   1f0d4:	ldr	r1, [pc, #864]	; 1f43c <__assert_fail@plt+0xc798>
   1f0d8:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f0dc:	ldr	r3, [r7], #16
   1f0e0:	cmp	r3, #0
   1f0e4:	bne	1efd8 <__assert_fail@plt+0xc334>
   1f0e8:	b	1ef50 <__assert_fail@plt+0xc2ac>
   1f0ec:	mov	r2, #0
   1f0f0:	mov	r0, r2
   1f0f4:	mov	r1, sl
   1f0f8:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f0fc:	ldr	r3, [r7, #-12]
   1f100:	mov	r4, #3
   1f104:	cmp	r3, #0
   1f108:	addne	r9, sp, #16
   1f10c:	bne	1f040 <__assert_fail@plt+0xc39c>
   1f110:	b	1f0a4 <__assert_fail@plt+0xc400>
   1f114:	ldrb	r3, [r5]
   1f118:	cmp	r3, #0
   1f11c:	cmpne	r6, r4
   1f120:	blt	1f38c <__assert_fail@plt+0xc6e8>
   1f124:	cmp	r3, #0
   1f128:	beq	1f0cc <__assert_fail@plt+0xc428>
   1f12c:	cmp	r3, #10
   1f130:	mov	r8, #0
   1f134:	ldr	r4, [pc, #788]	; 1f450 <__assert_fail@plt+0xc7ac>
   1f138:	bne	1f190 <__assert_fail@plt+0xc4ec>
   1f13c:	ldrb	r3, [r5, #1]
   1f140:	cmp	r3, #0
   1f144:	beq	1f0cc <__assert_fail@plt+0xc428>
   1f148:	mov	r2, #0
   1f14c:	mov	r0, r2
   1f150:	ldr	r1, [pc, #740]	; 1f43c <__assert_fail@plt+0xc798>
   1f154:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f158:	mov	r9, #0
   1f15c:	mov	r2, #0
   1f160:	add	r9, r9, #1
   1f164:	mov	r0, r2
   1f168:	mov	r1, r4
   1f16c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f170:	cmp	r6, r9
   1f174:	bne	1f15c <__assert_fail@plt+0xc4b8>
   1f178:	ldrb	r3, [r5, #1]
   1f17c:	add	r5, r5, #1
   1f180:	cmp	r3, #0
   1f184:	beq	1f0cc <__assert_fail@plt+0xc428>
   1f188:	cmp	r3, #10
   1f18c:	beq	1f13c <__assert_fail@plt+0xc498>
   1f190:	mov	r2, #0
   1f194:	mov	r0, r2
   1f198:	add	r1, sp, #16
   1f19c:	strb	r3, [sp, #16]
   1f1a0:	strb	r8, [sp, #17]
   1f1a4:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f1a8:	ldrb	r3, [r5, #1]
   1f1ac:	add	r5, r5, #1
   1f1b0:	cmp	r3, #0
   1f1b4:	bne	1f188 <__assert_fail@plt+0xc4e4>
   1f1b8:	b	1f0cc <__assert_fail@plt+0xc428>
   1f1bc:	ldrb	r3, [r5, #1]
   1f1c0:	cmp	r3, #0
   1f1c4:	beq	1f0dc <__assert_fail@plt+0xc438>
   1f1c8:	cmp	r3, #10
   1f1cc:	add	r5, r5, #1
   1f1d0:	mov	r4, #0
   1f1d4:	ldr	r8, [pc, #608]	; 1f43c <__assert_fail@plt+0xc798>
   1f1d8:	bne	1f210 <__assert_fail@plt+0xc56c>
   1f1dc:	ldrb	r3, [r5, #1]
   1f1e0:	cmp	r3, #0
   1f1e4:	beq	1f0cc <__assert_fail@plt+0xc428>
   1f1e8:	mov	r2, #0
   1f1ec:	mov	r0, r2
   1f1f0:	mov	r1, r8
   1f1f4:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f1f8:	ldrb	r3, [r5, #1]
   1f1fc:	cmp	r3, #0
   1f200:	add	r5, r5, #1
   1f204:	beq	1f0cc <__assert_fail@plt+0xc428>
   1f208:	cmp	r3, #10
   1f20c:	beq	1f1dc <__assert_fail@plt+0xc538>
   1f210:	mov	r2, #0
   1f214:	mov	r0, r2
   1f218:	add	r1, sp, #16
   1f21c:	strb	r3, [sp, #16]
   1f220:	strb	r4, [sp, #17]
   1f224:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f228:	ldrb	r3, [r5, #1]
   1f22c:	b	1f1fc <__assert_fail@plt+0xc558>
   1f230:	cmp	r5, #0
   1f234:	beq	1f244 <__assert_fail@plt+0xc5a0>
   1f238:	ldrb	r2, [r5]
   1f23c:	cmp	r2, #124	; 0x7c
   1f240:	beq	1f3c8 <__assert_fail@plt+0xc724>
   1f244:	mov	r4, #3
   1f248:	b	1f0a4 <__assert_fail@plt+0xc400>
   1f24c:	mov	r6, #10
   1f250:	mov	r3, #0
   1f254:	mov	r0, r3
   1f258:	ldr	r2, [pc, #476]	; 1f43c <__assert_fail@plt+0xc798>
   1f25c:	ldr	r1, [pc, #496]	; 1f454 <__assert_fail@plt+0xc7b0>
   1f260:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f264:	b	1efc0 <__assert_fail@plt+0xc31c>
   1f268:	bl	1e41c <__assert_fail@plt+0xb778>
   1f26c:	ldr	r3, [r4, #12]
   1f270:	add	r2, r3, #1
   1f274:	ldrb	r3, [r3, #1]
   1f278:	cmp	r3, #61	; 0x3d
   1f27c:	beq	1f290 <__assert_fail@plt+0xc5ec>
   1f280:	cmp	r3, #124	; 0x7c
   1f284:	cmpne	r3, #0
   1f288:	add	r5, r5, #1
   1f28c:	beq	1eef8 <__assert_fail@plt+0xc254>
   1f290:	cmp	r0, #0
   1f294:	beq	1f2a4 <__assert_fail@plt+0xc600>
   1f298:	and	r3, r3, #192	; 0xc0
   1f29c:	cmp	r3, #128	; 0x80
   1f2a0:	addne	r5, r5, #1
   1f2a4:	ldrb	r3, [r2, #1]!
   1f2a8:	cmp	r3, #0
   1f2ac:	cmpne	r3, #124	; 0x7c
   1f2b0:	bne	1f290 <__assert_fail@plt+0xc5ec>
   1f2b4:	b	1eef8 <__assert_fail@plt+0xc254>
   1f2b8:	ldrb	ip, [r5, #1]
   1f2bc:	add	r3, r5, #1
   1f2c0:	str	r3, [sp, #12]
   1f2c4:	cmp	ip, #61	; 0x3d
   1f2c8:	bne	1f320 <__assert_fail@plt+0xc67c>
   1f2cc:	mvn	r8, r5
   1f2d0:	add	r8, r8, r4
   1f2d4:	add	r4, r5, #2
   1f2d8:	mov	r5, #0
   1f2dc:	mov	r2, #0
   1f2e0:	mov	r0, r2
   1f2e4:	mov	r1, r9
   1f2e8:	strb	ip, [sp, #16]
   1f2ec:	strb	r5, [sp, #17]
   1f2f0:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f2f4:	mov	r3, r4
   1f2f8:	add	r2, r8, r4
   1f2fc:	ldrb	ip, [r4], #1
   1f300:	cmp	ip, #0
   1f304:	cmpne	ip, #124	; 0x7c
   1f308:	bne	1f2dc <__assert_fail@plt+0xc638>
   1f30c:	mov	r4, r2
   1f310:	mov	r5, r3
   1f314:	cmp	ip, #0
   1f318:	addne	r5, r5, #1
   1f31c:	b	1f088 <__assert_fail@plt+0xc3e4>
   1f320:	mov	r2, r8
   1f324:	mov	r0, r8
   1f328:	ldr	r1, [pc, #288]	; 1f450 <__assert_fail@plt+0xc7ac>
   1f32c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f330:	ldrb	ip, [r5, #1]
   1f334:	ldr	r3, [sp, #12]
   1f338:	add	r4, r4, #1
   1f33c:	cmp	ip, #124	; 0x7c
   1f340:	cmpne	ip, r8
   1f344:	moveq	r5, r3
   1f348:	bne	1f2cc <__assert_fail@plt+0xc628>
   1f34c:	b	1f314 <__assert_fail@plt+0xc670>
   1f350:	mov	r0, #40	; 0x28
   1f354:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1f358:	mov	r2, #0
   1f35c:	mov	r4, r0
   1f360:	mov	r1, r0
   1f364:	mov	r0, #1
   1f368:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f36c:	ldrb	r3, [r4]
   1f370:	cmp	r3, #0
   1f374:	beq	1ee9c <__assert_fail@plt+0xc1f8>
   1f378:	mov	r2, #0
   1f37c:	ldr	r1, [pc, #184]	; 1f43c <__assert_fail@plt+0xc798>
   1f380:	mov	r0, #1
   1f384:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f388:	b	1ee9c <__assert_fail@plt+0xc1f8>
   1f38c:	mov	r2, #0
   1f390:	mov	r0, r2
   1f394:	ldr	r1, [pc, #160]	; 1f43c <__assert_fail@plt+0xc798>
   1f398:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f39c:	ldr	r8, [pc, #172]	; 1f450 <__assert_fail@plt+0xc7ac>
   1f3a0:	mov	r4, #0
   1f3a4:	mov	r2, #0
   1f3a8:	add	r4, r4, #1
   1f3ac:	mov	r0, r2
   1f3b0:	mov	r1, r8
   1f3b4:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f3b8:	cmp	r6, r4
   1f3bc:	bne	1f3a4 <__assert_fail@plt+0xc700>
   1f3c0:	ldrb	r3, [r5]
   1f3c4:	b	1f124 <__assert_fail@plt+0xc480>
   1f3c8:	mov	r2, r3
   1f3cc:	ldr	r1, [pc, #124]	; 1f450 <__assert_fail@plt+0xc7ac>
   1f3d0:	mov	r0, r3
   1f3d4:	str	r3, [sp, #12]
   1f3d8:	add	r8, r5, #1
   1f3dc:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f3e0:	rsb	r5, r5, #3
   1f3e4:	b	1f404 <__assert_fail@plt+0xc760>
   1f3e8:	mov	r2, #0
   1f3ec:	ldr	r3, [sp, #12]
   1f3f0:	mov	r0, r2
   1f3f4:	mov	r1, r9
   1f3f8:	strb	ip, [sp, #16]
   1f3fc:	strb	r3, [sp, #17]
   1f400:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1f404:	add	r4, r5, r8
   1f408:	mov	r2, r8
   1f40c:	ldrb	ip, [r8], #1
   1f410:	cmp	ip, #0
   1f414:	cmpne	ip, #124	; 0x7c
   1f418:	bne	1f3e8 <__assert_fail@plt+0xc744>
   1f41c:	cmp	ip, #0
   1f420:	movne	r5, r8
   1f424:	moveq	r5, r2
   1f428:	ldr	r3, [r7, #-12]
   1f42c:	cmp	r3, #0
   1f430:	bne	1f040 <__assert_fail@plt+0xc39c>
   1f434:	b	1f09c <__assert_fail@plt+0xc3f8>
   1f438:	strdeq	r5, [r4], -r8
   1f43c:	andeq	r0, r3, r0, lsl #26
   1f440:	andeq	r2, r3, r4, ror sp
   1f444:	andeq	r2, r3, r0, ror sp
   1f448:	andeq	r2, r3, ip, ror #26
   1f44c:	andeq	r2, r3, r8, ror #26
   1f450:	andeq	r2, r3, ip, lsl #29
   1f454:	andeq	r2, r3, ip, asr sp
   1f458:	ldr	ip, [pc, #2540]	; 1fe4c <__assert_fail@plt+0xd1a8>
   1f45c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f460:	sub	sp, sp, #108	; 0x6c
   1f464:	mov	r6, r1
   1f468:	str	r1, [sp, #16]
   1f46c:	mov	r4, r0
   1f470:	ldm	ip, {r0, r1, r2, r3}
   1f474:	add	r5, ip, #16
   1f478:	add	lr, sp, #40	; 0x28
   1f47c:	stm	lr, {r0, r1, r2, r3}
   1f480:	add	lr, ip, #32
   1f484:	ldm	r5, {r0, r1, r2, r3}
   1f488:	add	r5, sp, #56	; 0x38
   1f48c:	add	ip, ip, #48	; 0x30
   1f490:	stm	r5, {r0, r1, r2, r3}
   1f494:	ldm	lr, {r0, r1, r2, r3}
   1f498:	add	lr, sp, #72	; 0x48
   1f49c:	stm	lr, {r0, r1, r2, r3}
   1f4a0:	ldm	ip, {r0, r1, r2, r3}
   1f4a4:	add	ip, sp, #88	; 0x58
   1f4a8:	stm	ip, {r0, r1, r2, r3}
   1f4ac:	ldr	r7, [r6]
   1f4b0:	cmp	r7, #0
   1f4b4:	beq	1f7c0 <__assert_fail@plt+0xcb1c>
   1f4b8:	mov	r7, #0
   1f4bc:	mov	r5, r6
   1f4c0:	str	r7, [sp, #20]
   1f4c4:	str	r7, [sp, #12]
   1f4c8:	mov	r9, r7
   1f4cc:	mov	r6, r7
   1f4d0:	ldr	r8, [pc, #2424]	; 1fe50 <__assert_fail@plt+0xd1ac>
   1f4d4:	ldr	sl, [pc, #2424]	; 1fe54 <__assert_fail@plt+0xd1b0>
   1f4d8:	b	1f4e0 <__assert_fail@plt+0xc83c>
   1f4dc:	mov	r6, ip
   1f4e0:	ldr	fp, [r5, #4]
   1f4e4:	cmp	fp, #0
   1f4e8:	beq	1f550 <__assert_fail@plt+0xc8ac>
   1f4ec:	mov	r1, r8
   1f4f0:	mov	r0, fp
   1f4f4:	bl	124b8 <strcmp@plt>
   1f4f8:	cmp	r0, #0
   1f4fc:	moveq	r9, #1
   1f500:	beq	1f550 <__assert_fail@plt+0xc8ac>
   1f504:	mov	r1, sl
   1f508:	mov	r0, fp
   1f50c:	bl	124b8 <strcmp@plt>
   1f510:	cmp	r0, #0
   1f514:	moveq	r3, #1
   1f518:	streq	r3, [sp, #12]
   1f51c:	beq	1f550 <__assert_fail@plt+0xc8ac>
   1f520:	ldr	r1, [pc, #2352]	; 1fe58 <__assert_fail@plt+0xd1b4>
   1f524:	mov	r0, fp
   1f528:	bl	124b8 <strcmp@plt>
   1f52c:	cmp	r0, #0
   1f530:	moveq	r3, #1
   1f534:	streq	r3, [sp, #20]
   1f538:	beq	1f550 <__assert_fail@plt+0xc8ac>
   1f53c:	mov	r0, fp
   1f540:	ldr	r1, [pc, #2324]	; 1fe5c <__assert_fail@plt+0xd1b8>
   1f544:	bl	124b8 <strcmp@plt>
   1f548:	cmp	r0, #0
   1f54c:	moveq	r7, #1
   1f550:	ldr	r3, [r5, #16]!
   1f554:	add	ip, r6, #1
   1f558:	cmp	r3, #0
   1f55c:	bne	1f4dc <__assert_fail@plt+0xc838>
   1f560:	cmp	r9, #0
   1f564:	addeq	ip, r6, #2
   1f568:	beq	1f7d0 <__assert_fail@plt+0xcb2c>
   1f56c:	ldr	r3, [sp, #12]
   1f570:	cmp	r3, #0
   1f574:	bne	1f590 <__assert_fail@plt+0xc8ec>
   1f578:	add	r3, sp, #56	; 0x38
   1f57c:	ldr	lr, [sp, #16]
   1f580:	ldm	r3, {r0, r1, r2, r3}
   1f584:	add	lr, lr, ip, lsl #4
   1f588:	add	ip, ip, #1
   1f58c:	stm	lr, {r0, r1, r2, r3}
   1f590:	ldr	r3, [sp, #20]
   1f594:	cmp	r3, #0
   1f598:	bne	1f5b4 <__assert_fail@plt+0xc910>
   1f59c:	add	r3, sp, #72	; 0x48
   1f5a0:	ldr	lr, [sp, #16]
   1f5a4:	ldm	r3, {r0, r1, r2, r3}
   1f5a8:	add	lr, lr, ip, lsl #4
   1f5ac:	add	ip, ip, #1
   1f5b0:	stm	lr, {r0, r1, r2, r3}
   1f5b4:	cmp	r7, #0
   1f5b8:	addeq	r3, sp, #88	; 0x58
   1f5bc:	ldreq	lr, [sp, #16]
   1f5c0:	ldmeq	r3, {r0, r1, r2, r3}
   1f5c4:	addeq	ip, lr, ip, lsl #4
   1f5c8:	stmeq	ip, {r0, r1, r2, r3}
   1f5cc:	mov	r2, #0
   1f5d0:	mov	r1, r2
   1f5d4:	mov	r0, r4
   1f5d8:	bl	1e674 <__assert_fail@plt+0xb9d0>
   1f5dc:	ldr	fp, [r4]
   1f5e0:	ldr	r9, [r4, #28]
   1f5e4:	ldr	r3, [r4, #4]
   1f5e8:	ldr	r8, [fp]
   1f5ec:	mov	r1, fp
   1f5f0:	adds	r2, r8, #0
   1f5f4:	movne	r2, #1
   1f5f8:	cmp	r9, #0
   1f5fc:	movne	r2, #0
   1f600:	cmp	r2, #0
   1f604:	ldr	r7, [r3]
   1f608:	mov	r2, r3
   1f60c:	beq	1f628 <__assert_fail@plt+0xc984>
   1f610:	ldr	r0, [r4, #8]
   1f614:	tst	r0, #16
   1f618:	bne	1f7e0 <__assert_fail@plt+0xcb3c>
   1f61c:	sub	r8, r8, #1
   1f620:	add	r7, r7, #4
   1f624:	mov	r9, #1
   1f628:	cmp	r8, #0
   1f62c:	beq	1f7b4 <__assert_fail@plt+0xcb10>
   1f630:	ldr	sl, [r4, #36]	; 0x24
   1f634:	ldr	r5, [r7]
   1f638:	cmp	sl, #0
   1f63c:	str	r5, [r4, #40]	; 0x28
   1f640:	moveq	r1, #1
   1f644:	moveq	r0, sl
   1f648:	bne	1f688 <__assert_fail@plt+0xc9e4>
   1f64c:	ldrb	r2, [r5]
   1f650:	cmp	r2, #45	; 0x2d
   1f654:	beq	1f6b8 <__assert_fail@plt+0xca14>
   1f658:	ldr	r6, [r4, #32]
   1f65c:	cmp	r6, #0
   1f660:	bne	1f814 <__assert_fail@plt+0xcb70>
   1f664:	ldr	r2, [r4, #8]
   1f668:	tst	r2, #4
   1f66c:	bne	1f7e8 <__assert_fail@plt+0xcb44>
   1f670:	str	r1, [r4, #36]	; 0x24
   1f674:	ldr	r2, [r4, #36]	; 0x24
   1f678:	ldr	r5, [r7]
   1f67c:	cmp	r2, #0
   1f680:	str	r5, [r4, #40]	; 0x28
   1f684:	beq	1f64c <__assert_fail@plt+0xc9a8>
   1f688:	ldr	r2, [r4, #8]
   1f68c:	ands	r2, r2, #2
   1f690:	streq	r2, [r4, #16]
   1f694:	moveq	r1, fp
   1f698:	moveq	r2, r3
   1f69c:	bne	1f7e8 <__assert_fail@plt+0xcb44>
   1f6a0:	str	r8, [r1]
   1f6a4:	str	r7, [r2]
   1f6a8:	ldr	r0, [r4, #16]
   1f6ac:	str	r9, [r4, #28]
   1f6b0:	add	sp, sp, #108	; 0x6c
   1f6b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6b8:	ldrb	r2, [r5, #1]
   1f6bc:	cmp	r2, #45	; 0x2d
   1f6c0:	beq	1f774 <__assert_fail@plt+0xcad0>
   1f6c4:	cmp	r2, #0
   1f6c8:	beq	1f658 <__assert_fail@plt+0xc9b4>
   1f6cc:	ldr	r2, [sp, #16]
   1f6d0:	ldr	r6, [r4, #32]
   1f6d4:	ldr	r2, [r2]
   1f6d8:	cmp	r6, #0
   1f6dc:	str	r2, [sp, #20]
   1f6e0:	bne	1f820 <__assert_fail@plt+0xcb7c>
   1f6e4:	ldr	r1, [r4, #8]
   1f6e8:	mov	r2, #1
   1f6ec:	tst	r1, #32
   1f6f0:	add	r1, r5, r2
   1f6f4:	str	r2, [r4, #32]
   1f6f8:	str	r1, [sp, #12]
   1f6fc:	beq	1f970 <__assert_fail@plt+0xcccc>
   1f700:	ldr	r0, [sp, #20]
   1f704:	cmp	r0, #0
   1f708:	beq	1fcf0 <__assert_fail@plt+0xd04c>
   1f70c:	ldr	r2, [sp, #16]
   1f710:	str	sl, [sp, #28]
   1f714:	str	r5, [sp, #32]
   1f718:	str	r4, [sp, #24]
   1f71c:	mov	r5, r6
   1f720:	mov	sl, r1
   1f724:	mov	r4, r2
   1f728:	mov	r6, r3
   1f72c:	ldr	r0, [r4, #4]
   1f730:	cmp	r0, #0
   1f734:	beq	1f748 <__assert_fail@plt+0xcaa4>
   1f738:	mov	r1, sl
   1f73c:	bl	124b8 <strcmp@plt>
   1f740:	cmp	r0, #0
   1f744:	beq	1f8e0 <__assert_fail@plt+0xcc3c>
   1f748:	ldr	r1, [r4, #16]!
   1f74c:	add	r5, r5, #1
   1f750:	cmp	r1, #0
   1f754:	bne	1f72c <__assert_fail@plt+0xca88>
   1f758:	ldr	r5, [sp, #32]
   1f75c:	mov	r3, r6
   1f760:	ldr	sl, [sp, #28]
   1f764:	ldr	r4, [sp, #24]
   1f768:	ldrb	r1, [r5, #1]
   1f76c:	mov	r6, #1
   1f770:	b	1f83c <__assert_fail@plt+0xcb98>
   1f774:	str	r0, [r4, #32]
   1f778:	ldrb	r2, [r5, #2]
   1f77c:	cmp	r2, #0
   1f780:	bne	1f9d4 <__assert_fail@plt+0xcd30>
   1f784:	ldr	r2, [r4, #8]
   1f788:	tst	r2, #8
   1f78c:	bne	1fad8 <__assert_fail@plt+0xce34>
   1f790:	orr	r2, r2, #256	; 0x100
   1f794:	subs	r8, r8, #1
   1f798:	str	r2, [r4, #8]
   1f79c:	str	r1, [r4, #36]	; 0x24
   1f7a0:	add	r7, r7, #4
   1f7a4:	add	r9, r9, #1
   1f7a8:	bne	1f674 <__assert_fail@plt+0xc9d0>
   1f7ac:	mov	r1, fp
   1f7b0:	mov	r2, r3
   1f7b4:	mov	r8, #0
   1f7b8:	str	r8, [r4, #16]
   1f7bc:	b	1f6a0 <__assert_fail@plt+0xc9fc>
   1f7c0:	ldr	r5, [sp, #16]
   1f7c4:	mov	ip, #1
   1f7c8:	str	r7, [sp, #20]
   1f7cc:	str	r7, [sp, #12]
   1f7d0:	add	r3, sp, #40	; 0x28
   1f7d4:	ldm	r3, {r0, r1, r2, r3}
   1f7d8:	stm	r5, {r0, r1, r2, r3}
   1f7dc:	b	1f56c <__assert_fail@plt+0xc8c8>
   1f7e0:	mov	r9, #0
   1f7e4:	b	1f630 <__assert_fail@plt+0xc98c>
   1f7e8:	mvn	ip, #0
   1f7ec:	mov	r0, #2
   1f7f0:	str	r5, [r4, #24]
   1f7f4:	add	r8, r8, ip
   1f7f8:	add	r7, r7, #4
   1f7fc:	add	r9, r9, #1
   1f800:	mov	r1, fp
   1f804:	mov	r2, r3
   1f808:	str	ip, [r4, #16]
   1f80c:	str	r0, [r4, #20]
   1f810:	b	1f6a0 <__assert_fail@plt+0xc9fc>
   1f814:	ldr	r2, [sp, #16]
   1f818:	ldr	r2, [r2]
   1f81c:	str	r2, [sp, #20]
   1f820:	add	r2, r5, r6
   1f824:	str	r2, [sp, #12]
   1f828:	ldr	r2, [sp, #20]
   1f82c:	cmp	r2, #0
   1f830:	ldr	r2, [sp, #12]
   1f834:	ldrb	r1, [r2]
   1f838:	beq	1fcf8 <__assert_fail@plt+0xd054>
   1f83c:	ldr	r2, [sp, #20]
   1f840:	mov	ip, r1
   1f844:	cmp	r1, r2
   1f848:	beq	1fd00 <__assert_fail@plt+0xd05c>
   1f84c:	ldr	r2, [sp, #16]
   1f850:	add	r2, r2, #16
   1f854:	b	1f864 <__assert_fail@plt+0xcbc0>
   1f858:	cmp	lr, r1
   1f85c:	add	r2, r2, #16
   1f860:	beq	1f8fc <__assert_fail@plt+0xcc58>
   1f864:	ldr	lr, [r2]
   1f868:	mov	r0, r2
   1f86c:	cmp	lr, #0
   1f870:	bne	1f858 <__assert_fail@plt+0xcbb4>
   1f874:	cmp	r1, #63	; 0x3f
   1f878:	cmpne	r1, #104	; 0x68
   1f87c:	beq	1fe40 <__assert_fail@plt+0xd19c>
   1f880:	ldr	r2, [r0, #8]
   1f884:	ldr	r1, [sp, #12]
   1f888:	tst	r2, #128	; 0x80
   1f88c:	add	r6, r6, #1
   1f890:	mvnne	r2, #6
   1f894:	mvneq	r2, #1
   1f898:	str	r6, [r4, #32]
   1f89c:	str	r1, [r4, #24]
   1f8a0:	str	r2, [r4, #16]
   1f8a4:	ldr	r2, [sp, #12]
   1f8a8:	mov	r1, fp
   1f8ac:	ldrb	r0, [r2, #1]
   1f8b0:	mov	r2, r3
   1f8b4:	cmp	r0, #0
   1f8b8:	andne	sl, sl, #1
   1f8bc:	moveq	sl, #1
   1f8c0:	cmp	sl, #0
   1f8c4:	beq	1f6a0 <__assert_fail@plt+0xc9fc>
   1f8c8:	mov	r3, #0
   1f8cc:	sub	r8, r8, #1
   1f8d0:	add	r7, r7, #4
   1f8d4:	add	r9, r9, #1
   1f8d8:	str	r3, [r4, #32]
   1f8dc:	b	1f6a0 <__assert_fail@plt+0xc9fc>
   1f8e0:	ldr	r2, [sp, #16]
   1f8e4:	mov	r3, r6
   1f8e8:	ldr	r4, [sp, #24]
   1f8ec:	mov	r6, #1
   1f8f0:	ldr	ip, [r2, r5, lsl #4]
   1f8f4:	add	r0, r2, r5, lsl #4
   1f8f8:	mov	sl, r6
   1f8fc:	cmp	ip, #0
   1f900:	beq	1f988 <__assert_fail@plt+0xcce4>
   1f904:	ldr	r1, [r0, #8]
   1f908:	str	ip, [r4, #16]
   1f90c:	ands	r2, r1, #7
   1f910:	beq	1f978 <__assert_fail@plt+0xccd4>
   1f914:	ldr	r2, [sp, #12]
   1f918:	eor	sl, sl, #1
   1f91c:	ldrb	r0, [r2, #1]
   1f920:	cmp	r0, #0
   1f924:	andne	r0, sl, #1
   1f928:	moveq	r0, #0
   1f92c:	cmp	r0, #0
   1f930:	bne	1fcdc <__assert_fail@plt+0xd038>
   1f934:	ldr	r2, [r7, #4]
   1f938:	cmp	r2, #0
   1f93c:	beq	1f994 <__assert_fail@plt+0xccf0>
   1f940:	ldrb	ip, [r2]
   1f944:	cmp	ip, #45	; 0x2d
   1f948:	bne	1f9b8 <__assert_fail@plt+0xcd14>
   1f94c:	ldrb	ip, [r2, #1]
   1f950:	cmp	ip, #0
   1f954:	beq	1f9b8 <__assert_fail@plt+0xcd14>
   1f958:	tst	r1, #8
   1f95c:	beq	1f9b8 <__assert_fail@plt+0xcd14>
   1f960:	str	r0, [r4, #20]
   1f964:	mov	r1, fp
   1f968:	mov	r2, r3
   1f96c:	b	1f8c8 <__assert_fail@plt+0xcc24>
   1f970:	mov	r6, r2
   1f974:	b	1f828 <__assert_fail@plt+0xcb84>
   1f978:	add	r6, r6, #1
   1f97c:	str	r6, [r4, #32]
   1f980:	str	r2, [r4, #20]
   1f984:	b	1f8a4 <__assert_fail@plt+0xcc00>
   1f988:	ldr	r2, [sp, #12]
   1f98c:	ldrb	r1, [r2]
   1f990:	b	1f874 <__assert_fail@plt+0xcbd0>
   1f994:	tst	r1, #8
   1f998:	mvneq	r0, #2
   1f99c:	strne	r2, [r4, #20]
   1f9a0:	movne	r1, fp
   1f9a4:	movne	r2, r3
   1f9a8:	moveq	r1, fp
   1f9ac:	moveq	r2, r3
   1f9b0:	streq	r0, [r4, #16]
   1f9b4:	b	1f8c8 <__assert_fail@plt+0xcc24>
   1f9b8:	mov	r0, r4
   1f9bc:	bl	1e97c <__assert_fail@plt+0xbcd8>
   1f9c0:	sub	r8, r8, #1
   1f9c4:	add	r7, r7, #4
   1f9c8:	add	r9, r9, #1
   1f9cc:	ldm	r4, {r1, r2}
   1f9d0:	b	1f8c8 <__assert_fail@plt+0xcc24>
   1f9d4:	add	r6, r5, #2
   1f9d8:	mov	r0, r6
   1f9dc:	mov	r1, #61	; 0x3d
   1f9e0:	str	r3, [sp, #20]
   1f9e4:	bl	128fc <strchr@plt>
   1f9e8:	subs	r3, r0, #0
   1f9ec:	str	r3, [sp, #12]
   1f9f0:	ldr	r3, [sp, #20]
   1f9f4:	bne	1fafc <__assert_fail@plt+0xce58>
   1f9f8:	ldr	r2, [sp, #16]
   1f9fc:	ldr	r2, [r2]
   1fa00:	cmp	r2, #0
   1fa04:	str	r2, [sp, #20]
   1fa08:	beq	1fab4 <__assert_fail@plt+0xce10>
   1fa0c:	ldr	fp, [sp, #16]
   1fa10:	add	r5, fp, #4
   1fa14:	ldr	r0, [r5, sl, lsl #4]
   1fa18:	cmp	r0, #0
   1fa1c:	beq	1fa30 <__assert_fail@plt+0xcd8c>
   1fa20:	mov	r1, r6
   1fa24:	bl	124b8 <strcmp@plt>
   1fa28:	cmp	r0, #0
   1fa2c:	beq	1fbf8 <__assert_fail@plt+0xcf54>
   1fa30:	add	sl, sl, #1
   1fa34:	ldr	r3, [fp, sl, lsl #4]
   1fa38:	cmp	r3, #0
   1fa3c:	bne	1fa14 <__assert_fail@plt+0xcd70>
   1fa40:	mov	r0, r6
   1fa44:	mov	fp, r3
   1fa48:	bl	128d8 <strlen@plt>
   1fa4c:	str	r4, [sp, #24]
   1fa50:	ldr	r5, [sp, #16]
   1fa54:	ldr	r4, [sp, #20]
   1fa58:	mov	sl, r0
   1fa5c:	str	r0, [sp, #28]
   1fa60:	ldr	r0, [r5, #4]
   1fa64:	cmp	r0, #0
   1fa68:	beq	1fa80 <__assert_fail@plt+0xcddc>
   1fa6c:	mov	r2, sl
   1fa70:	mov	r1, r6
   1fa74:	bl	12c2c <strncmp@plt>
   1fa78:	cmp	r0, #0
   1fa7c:	beq	1fb3c <__assert_fail@plt+0xce98>
   1fa80:	ldr	r4, [r5, #16]!
   1fa84:	add	fp, fp, #1
   1fa88:	cmp	r4, #0
   1fa8c:	bne	1fa60 <__assert_fail@plt+0xcdbc>
   1fa90:	ldr	r3, [sp, #12]
   1fa94:	ldr	r4, [sp, #24]
   1fa98:	cmp	r3, #0
   1fa9c:	beq	1faac <__assert_fail@plt+0xce08>
   1faa0:	ldr	r2, [sp, #12]
   1faa4:	mov	r3, #61	; 0x3d
   1faa8:	strb	r3, [r2]
   1faac:	ldr	fp, [r4]
   1fab0:	ldr	r3, [r4, #4]
   1fab4:	mvn	r2, #1
   1fab8:	str	r6, [r4, #24]
   1fabc:	str	r2, [r4, #16]
   1fac0:	sub	r8, r8, #1
   1fac4:	add	r7, r7, #4
   1fac8:	add	r9, r9, #1
   1facc:	mov	r1, fp
   1fad0:	mov	r2, r3
   1fad4:	b	1f6a0 <__assert_fail@plt+0xc9fc>
   1fad8:	add	r6, r5, #2
   1fadc:	mov	r0, r6
   1fae0:	mov	r1, #61	; 0x3d
   1fae4:	str	r3, [sp, #20]
   1fae8:	bl	128fc <strchr@plt>
   1faec:	subs	r3, r0, #0
   1faf0:	str	r3, [sp, #12]
   1faf4:	ldr	r3, [sp, #20]
   1faf8:	beq	1fab4 <__assert_fail@plt+0xce10>
   1fafc:	ldr	r2, [sp, #12]
   1fb00:	mov	r3, #0
   1fb04:	strb	r3, [r2]
   1fb08:	ldrb	r3, [r5, #2]
   1fb0c:	cmp	r3, #0
   1fb10:	moveq	r3, #61	; 0x3d
   1fb14:	strbeq	r3, [r2]
   1fb18:	ldreq	fp, [r4]
   1fb1c:	ldreq	r3, [r4, #4]
   1fb20:	beq	1fab4 <__assert_fail@plt+0xce10>
   1fb24:	ldr	r3, [sp, #16]
   1fb28:	ldr	r3, [r3]
   1fb2c:	cmp	r3, #0
   1fb30:	str	r3, [sp, #20]
   1fb34:	bne	1fa0c <__assert_fail@plt+0xcd68>
   1fb38:	b	1faa0 <__assert_fail@plt+0xcdfc>
   1fb3c:	ldr	r2, [sp, #16]
   1fb40:	add	r3, fp, #1
   1fb44:	mov	r0, r4
   1fb48:	ldr	r1, [r2, r3, lsl #4]
   1fb4c:	lsl	r3, r3, #4
   1fb50:	cmp	r1, #0
   1fb54:	ldr	r4, [sp, #24]
   1fb58:	add	sl, r2, r3
   1fb5c:	beq	1fe38 <__assert_fail@plt+0xd194>
   1fb60:	sub	r3, r3, #16
   1fb64:	add	r3, r2, r3
   1fb68:	sub	r2, r3, sl
   1fb6c:	add	r2, r2, #32
   1fb70:	str	r7, [sp, #20]
   1fb74:	str	r8, [sp, #24]
   1fb78:	str	r9, [sp, #32]
   1fb7c:	str	fp, [sp, #36]	; 0x24
   1fb80:	ldr	r9, [sp, #28]
   1fb84:	mov	r7, r3
   1fb88:	str	r4, [sp, #28]
   1fb8c:	mov	fp, r0
   1fb90:	mov	r4, r1
   1fb94:	mov	r8, r2
   1fb98:	ldr	r0, [sl, #4]
   1fb9c:	cmp	r0, #0
   1fba0:	beq	1fbd0 <__assert_fail@plt+0xcf2c>
   1fba4:	mov	r2, r9
   1fba8:	mov	r1, r6
   1fbac:	bl	12c2c <strncmp@plt>
   1fbb0:	cmp	r0, #0
   1fbb4:	bne	1fbd0 <__assert_fail@plt+0xcf2c>
   1fbb8:	cmp	r4, fp
   1fbbc:	bne	1fdb0 <__assert_fail@plt+0xd10c>
   1fbc0:	ldr	r2, [sl, #8]
   1fbc4:	ldr	r3, [r5, #8]
   1fbc8:	cmp	r2, r3
   1fbcc:	bne	1fdb0 <__assert_fail@plt+0xd10c>
   1fbd0:	add	r7, r7, #16
   1fbd4:	ldr	r4, [r7, #16]
   1fbd8:	add	sl, sl, r8
   1fbdc:	cmp	r4, #0
   1fbe0:	bne	1fb98 <__assert_fail@plt+0xcef4>
   1fbe4:	add	r4, sp, #28
   1fbe8:	ldr	r7, [sp, #20]
   1fbec:	ldm	r4, {r4, r9, fp}
   1fbf0:	ldr	r8, [sp, #24]
   1fbf4:	mov	sl, fp
   1fbf8:	ldr	r2, [sp, #12]
   1fbfc:	cmp	r2, #0
   1fc00:	movne	r3, #61	; 0x3d
   1fc04:	strbne	r3, [r2]
   1fc08:	cmp	sl, #0
   1fc0c:	beq	1fc44 <__assert_fail@plt+0xcfa0>
   1fc10:	ldr	r3, [sp, #16]
   1fc14:	ldr	r3, [r3, sl, lsl #4]
   1fc18:	cmp	r3, #32768	; 0x8000
   1fc1c:	beq	1fe40 <__assert_fail@plt+0xd19c>
   1fc20:	ldr	r2, [pc, #568]	; 1fe60 <__assert_fail@plt+0xd1bc>
   1fc24:	cmp	r3, r2
   1fc28:	beq	1fc98 <__assert_fail@plt+0xcff4>
   1fc2c:	ldr	r2, [pc, #560]	; 1fe64 <__assert_fail@plt+0xd1c0>
   1fc30:	cmp	r3, r2
   1fc34:	beq	1fd8c <__assert_fail@plt+0xd0e8>
   1fc38:	ldr	r2, [pc, #552]	; 1fe68 <__assert_fail@plt+0xd1c4>
   1fc3c:	cmp	r3, r2
   1fc40:	beq	1fd0c <__assert_fail@plt+0xd068>
   1fc44:	ldr	r3, [sp, #16]
   1fc48:	add	r2, r3, sl, lsl #4
   1fc4c:	ldr	r3, [r3, sl, lsl #4]
   1fc50:	ldr	r1, [r2, #8]
   1fc54:	str	r3, [r4, #16]
   1fc58:	tst	r1, #7
   1fc5c:	beq	1fcb0 <__assert_fail@plt+0xd00c>
   1fc60:	ldr	r3, [sp, #12]
   1fc64:	cmp	r3, #0
   1fc68:	beq	1fde4 <__assert_fail@plt+0xd140>
   1fc6c:	ldrb	r3, [r3, #1]
   1fc70:	cmp	r3, #0
   1fc74:	beq	1fd6c <__assert_fail@plt+0xd0c8>
   1fc78:	ldr	r3, [sp, #12]
   1fc7c:	adds	r2, r3, #1
   1fc80:	beq	1fd6c <__assert_fail@plt+0xd0c8>
   1fc84:	mov	r0, r4
   1fc88:	bl	1e97c <__assert_fail@plt+0xbcd8>
   1fc8c:	ldr	fp, [r4]
   1fc90:	ldr	r3, [r4, #4]
   1fc94:	b	1fac0 <__assert_fail@plt+0xce1c>
   1fc98:	ldr	r3, [r4, #8]
   1fc9c:	ands	r5, r3, #64	; 0x40
   1fca0:	bne	1fc44 <__assert_fail@plt+0xcfa0>
   1fca4:	bl	1ecf4 <__assert_fail@plt+0xc050>
   1fca8:	mov	r0, r5
   1fcac:	bl	128b4 <exit@plt>
   1fcb0:	ldr	r3, [sp, #12]
   1fcb4:	cmp	r3, #0
   1fcb8:	mvnne	r3, #5
   1fcbc:	ldreq	r2, [sp, #12]
   1fcc0:	strne	r3, [r4, #20]
   1fcc4:	ldrne	fp, [r4]
   1fcc8:	ldrne	r3, [r4, #4]
   1fccc:	ldreq	fp, [r4]
   1fcd0:	ldreq	r3, [r4, #4]
   1fcd4:	streq	r2, [r4, #20]
   1fcd8:	b	1fac0 <__assert_fail@plt+0xce1c>
   1fcdc:	add	r2, r2, #1
   1fce0:	mov	r0, r4
   1fce4:	bl	1e97c <__assert_fail@plt+0xbcd8>
   1fce8:	ldm	r4, {r1, r2}
   1fcec:	b	1f8c8 <__assert_fail@plt+0xcc24>
   1fcf0:	ldrb	r1, [r5, #1]
   1fcf4:	mov	r6, r2
   1fcf8:	ldr	r0, [sp, #16]
   1fcfc:	b	1f874 <__assert_fail@plt+0xcbd0>
   1fd00:	ldr	r0, [sp, #16]
   1fd04:	ldr	ip, [sp, #20]
   1fd08:	b	1f904 <__assert_fail@plt+0xcc60>
   1fd0c:	ldr	r3, [sp, #16]
   1fd10:	ldr	r3, [r3]
   1fd14:	cmp	r3, #0
   1fd18:	beq	1fd64 <__assert_fail@plt+0xd0c0>
   1fd1c:	ldr	r6, [pc, #328]	; 1fe6c <__assert_fail@plt+0xd1c8>
   1fd20:	ldr	r5, [pc, #328]	; 1fe70 <__assert_fail@plt+0xd1cc>
   1fd24:	ldr	r4, [sp, #16]
   1fd28:	b	1fd38 <__assert_fail@plt+0xd094>
   1fd2c:	ldr	r3, [r4, #16]!
   1fd30:	cmp	r3, #0
   1fd34:	beq	1fd64 <__assert_fail@plt+0xd0c0>
   1fd38:	ldr	r2, [r4, #4]
   1fd3c:	cmp	r2, #0
   1fd40:	beq	1fd2c <__assert_fail@plt+0xd088>
   1fd44:	ldr	r3, [r4, #8]
   1fd48:	ands	r0, r3, #64	; 0x40
   1fd4c:	bne	1fd2c <__assert_fail@plt+0xd088>
   1fd50:	str	r0, [sp]
   1fd54:	mov	r3, r6
   1fd58:	mov	r1, r5
   1fd5c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1fd60:	b	1fd2c <__assert_fail@plt+0xd088>
   1fd64:	mov	r0, #0
   1fd68:	bl	128b4 <exit@plt>
   1fd6c:	tst	r1, #8
   1fd70:	movne	r3, #0
   1fd74:	mvneq	r3, #2
   1fd78:	strne	r3, [r4, #20]
   1fd7c:	streq	r3, [r4, #16]
   1fd80:	ldr	fp, [r4]
   1fd84:	ldr	r3, [r4, #4]
   1fd88:	b	1fac0 <__assert_fail@plt+0xce1c>
   1fd8c:	mov	r0, #16
   1fd90:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   1fd94:	mov	r3, #0
   1fd98:	ldr	r2, [pc, #204]	; 1fe6c <__assert_fail@plt+0xd1c8>
   1fd9c:	mov	r1, r0
   1fda0:	mov	r0, r3
   1fda4:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   1fda8:	mov	r0, #0
   1fdac:	bl	128b4 <exit@plt>
   1fdb0:	ldr	r2, [sp, #12]
   1fdb4:	ldr	r4, [sp, #28]
   1fdb8:	cmp	r2, #0
   1fdbc:	movne	r3, #61	; 0x3d
   1fdc0:	strbne	r3, [r2]
   1fdc4:	mvn	r3, #7
   1fdc8:	str	r3, [r4, #16]
   1fdcc:	ldr	r7, [sp, #20]
   1fdd0:	ldr	r8, [sp, #24]
   1fdd4:	ldr	r9, [sp, #32]
   1fdd8:	ldr	fp, [r4]
   1fddc:	ldr	r3, [r4, #4]
   1fde0:	b	1fac0 <__assert_fail@plt+0xce1c>
   1fde4:	ldr	r2, [r7, #4]
   1fde8:	cmp	r2, #0
   1fdec:	beq	1fd6c <__assert_fail@plt+0xd0c8>
   1fdf0:	ldrb	r3, [r2]
   1fdf4:	cmp	r3, #45	; 0x2d
   1fdf8:	beq	1fe1c <__assert_fail@plt+0xd178>
   1fdfc:	mov	r0, r4
   1fe00:	bl	1e97c <__assert_fail@plt+0xbcd8>
   1fe04:	sub	r8, r8, #1
   1fe08:	add	r7, r7, #4
   1fe0c:	add	r9, r9, #1
   1fe10:	ldr	fp, [r4]
   1fe14:	ldr	r3, [r4, #4]
   1fe18:	b	1fac0 <__assert_fail@plt+0xce1c>
   1fe1c:	tst	r1, #8
   1fe20:	beq	1fdfc <__assert_fail@plt+0xd158>
   1fe24:	ldr	r3, [sp, #12]
   1fe28:	ldr	fp, [r4]
   1fe2c:	str	r3, [r4, #20]
   1fe30:	ldr	r3, [r4, #4]
   1fe34:	b	1fac0 <__assert_fail@plt+0xce1c>
   1fe38:	mov	sl, fp
   1fe3c:	b	1fbf8 <__assert_fail@plt+0xcf54>
   1fe40:	ldr	r1, [r4, #8]
   1fe44:	ldr	r0, [sp, #16]
   1fe48:	bl	1ee50 <__assert_fail@plt+0xc1ac>
   1fe4c:	andeq	r2, r3, r0, ror #15
   1fe50:			; <UNDEFINED> instruction: 0x00032db0
   1fe54:			; <UNDEFINED> instruction: 0x00032db8
   1fe58:	andeq	r2, r3, r0, asr #27
   1fe5c:	andeq	r2, r3, ip, asr #27
   1fe60:	andeq	r8, r0, r1
   1fe64:	andeq	r8, r0, r2
   1fe68:	andeq	r8, r0, r3
   1fe6c:	andeq	r0, r3, r0, lsl #26
   1fe70:	andeq	r0, r3, r4, ror ip
   1fe74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe78:	cmp	r0, #0
   1fe7c:	sub	sp, sp, #252	; 0xfc
   1fe80:	stm	sp, {r0, r3}
   1fe84:	ldr	r3, [pc, #2536]	; 20874 <__assert_fail@plt+0xdbd0>
   1fe88:	ldr	r3, [r3]
   1fe8c:	str	r3, [sp, #244]	; 0xf4
   1fe90:	ldr	r3, [sp, #288]	; 0x120
   1fe94:	str	r3, [sp, #8]
   1fe98:	beq	20290 <__assert_fail@plt+0xd5ec>
   1fe9c:	mov	fp, r2
   1fea0:	ldr	r0, [sp, #4]
   1fea4:	bl	1e674 <__assert_fail@plt+0xb9d0>
   1fea8:	ldr	r3, [fp]
   1feac:	cmp	r3, #0
   1feb0:	beq	201c8 <__assert_fail@plt+0xd524>
   1feb4:	mov	sl, #0
   1feb8:	mov	r3, #0
   1febc:	mov	r4, r3
   1fec0:	mov	r6, r3
   1fec4:	mov	r8, r3
   1fec8:	str	r3, [sp, #20]
   1fecc:	str	r3, [sp, #16]
   1fed0:	str	r3, [sp, #12]
   1fed4:	cmp	sl, #0
   1fed8:	beq	1ff44 <__assert_fail@plt+0xd2a0>
   1fedc:	rsb	r3, sl, #3
   1fee0:	add	r2, sp, #248	; 0xf8
   1fee4:	add	r3, r2, r3, lsl #2
   1fee8:	sub	sl, sl, #1
   1feec:	ldr	r9, [r3, #-216]	; 0xffffff28
   1fef0:	cmn	r9, #1
   1fef4:	cmpne	r9, #10
   1fef8:	bne	1ff5c <__assert_fail@plt+0xd2b8>
   1fefc:	cmn	r9, #1
   1ff00:	ldrne	r3, [fp]
   1ff04:	addne	r3, r3, #1
   1ff08:	strne	r3, [fp]
   1ff0c:	cmn	r4, #1
   1ff10:	beq	20284 <__assert_fail@plt+0xd5e0>
   1ff14:	cmp	r4, #2
   1ff18:	beq	1fff8 <__assert_fail@plt+0xd354>
   1ff1c:	cmp	r4, #3
   1ff20:	beq	202a4 <__assert_fail@plt+0xd600>
   1ff24:	cmp	r4, #4
   1ff28:	beq	202d8 <__assert_fail@plt+0xd634>
   1ff2c:	cmn	r9, #1
   1ff30:	beq	20370 <__assert_fail@plt+0xd6cc>
   1ff34:	mov	r8, #0
   1ff38:	cmp	sl, #0
   1ff3c:	mov	r4, r8
   1ff40:	bne	1fedc <__assert_fail@plt+0xd238>
   1ff44:	ldr	r0, [sp]
   1ff48:	bl	12c44 <getc@plt>
   1ff4c:	mov	r9, r0
   1ff50:	cmn	r9, #1
   1ff54:	cmpne	r9, #10
   1ff58:	beq	1fefc <__assert_fail@plt+0xd258>
   1ff5c:	cmn	r4, #1
   1ff60:	beq	1fed4 <__assert_fail@plt+0xd230>
   1ff64:	cmp	r4, #0
   1ff68:	beq	1ff9c <__assert_fail@plt+0xd2f8>
   1ff6c:	cmp	r4, #1
   1ff70:	beq	1fed4 <__assert_fail@plt+0xd230>
   1ff74:	cmp	r4, #2
   1ff78:	beq	20078 <__assert_fail@plt+0xd3d4>
   1ff7c:	cmp	r4, #3
   1ff80:	bne	20194 <__assert_fail@plt+0xd4f0>
   1ff84:	bics	r3, r9, #127	; 0x7f
   1ff88:	beq	20170 <__assert_fail@plt+0xd4cc>
   1ff8c:	strb	r9, [sp, #44]	; 0x2c
   1ff90:	mov	r8, #1
   1ff94:	mov	r4, #4
   1ff98:	b	1fed4 <__assert_fail@plt+0xd230>
   1ff9c:	bics	r4, r9, #127	; 0x7f
   1ffa0:	beq	1ffd0 <__assert_fail@plt+0xd32c>
   1ffa4:	cmp	r8, #98	; 0x62
   1ffa8:	addle	r3, sp, #248	; 0xf8
   1ffac:	ldrgt	r2, [sp, #4]
   1ffb0:	addle	r3, r3, r8
   1ffb4:	mvngt	r3, #3
   1ffb8:	strgt	r3, [r2, #16]
   1ffbc:	mvngt	r4, #0
   1ffc0:	strble	r9, [r3, #-204]	; 0xffffff34
   1ffc4:	addle	r8, r8, #1
   1ffc8:	movle	r4, #2
   1ffcc:	b	1fed4 <__assert_fail@plt+0xd230>
   1ffd0:	bl	12884 <__ctype_b_loc@plt>
   1ffd4:	lsl	r3, r9, #1
   1ffd8:	ldr	r2, [r0]
   1ffdc:	ldrh	r3, [r2, r3]
   1ffe0:	tst	r3, #8192	; 0x2000
   1ffe4:	bne	1fed4 <__assert_fail@plt+0xd230>
   1ffe8:	cmp	r9, #35	; 0x23
   1ffec:	bne	1ffa4 <__assert_fail@plt+0xd300>
   1fff0:	mov	r4, #1
   1fff4:	b	1fed4 <__assert_fail@plt+0xd230>
   1fff8:	ldr	r5, [sp, #8]
   1fffc:	add	r3, sp, #248	; 0xf8
   20000:	mov	r6, #0
   20004:	ldr	r4, [r5]
   20008:	add	r8, r3, r8
   2000c:	cmp	r4, r6
   20010:	strb	r6, [r8, #-204]	; 0xffffff34
   20014:	beq	203ec <__assert_fail@plt+0xd748>
   20018:	ldr	r0, [r5, #4]
   2001c:	cmp	r0, #0
   20020:	beq	20034 <__assert_fail@plt+0xd390>
   20024:	add	r1, sp, #44	; 0x2c
   20028:	bl	124b8 <strcmp@plt>
   2002c:	cmp	r0, #0
   20030:	beq	20104 <__assert_fail@plt+0xd460>
   20034:	ldr	r4, [r5, #16]!
   20038:	add	r6, r6, #1
   2003c:	cmp	r4, #0
   20040:	bne	20018 <__assert_fail@plt+0xd374>
   20044:	ldr	r5, [r5, #8]
   20048:	ldr	r3, [sp, #4]
   2004c:	tst	r5, #64	; 0x40
   20050:	str	r4, [r3, #16]
   20054:	bne	20070 <__assert_fail@plt+0xd3cc>
   20058:	add	r8, sp, #44	; 0x2c
   2005c:	mov	r0, r8
   20060:	ldr	r1, [pc, #2064]	; 20878 <__assert_fail@plt+0xdbd4>
   20064:	bl	124b8 <strcmp@plt>
   20068:	subs	r4, r0, #0
   2006c:	bne	20130 <__assert_fail@plt+0xd48c>
   20070:	mov	r8, r4
   20074:	b	1fed4 <__assert_fail@plt+0xd230>
   20078:	bics	r5, r9, #127	; 0x7f
   2007c:	bne	1ffa4 <__assert_fail@plt+0xd300>
   20080:	bl	12884 <__ctype_b_loc@plt>
   20084:	lsl	r3, r9, #1
   20088:	ldr	r2, [r0]
   2008c:	mov	r7, r0
   20090:	ldrh	r3, [r2, r3]
   20094:	tst	r3, #8192	; 0x2000
   20098:	beq	1ffa4 <__assert_fail@plt+0xd300>
   2009c:	ldr	r4, [sp, #8]
   200a0:	add	r3, sp, #248	; 0xf8
   200a4:	add	r3, r3, r8
   200a8:	ldr	r8, [r4]
   200ac:	strb	r5, [r3, #-204]	; 0xffffff34
   200b0:	cmp	r8, #0
   200b4:	beq	204f8 <__assert_fail@plt+0xd854>
   200b8:	ldr	r0, [r4, #4]
   200bc:	cmp	r0, #0
   200c0:	beq	200d4 <__assert_fail@plt+0xd430>
   200c4:	add	r1, sp, #44	; 0x2c
   200c8:	bl	124b8 <strcmp@plt>
   200cc:	cmp	r0, #0
   200d0:	beq	204cc <__assert_fail@plt+0xd828>
   200d4:	ldr	r8, [r4, #16]!
   200d8:	add	r5, r5, #1
   200dc:	cmp	r8, #0
   200e0:	bne	200b8 <__assert_fail@plt+0xd414>
   200e4:	ldr	r6, [r4, #8]
   200e8:	ldr	r3, [sp, #4]
   200ec:	tst	r6, #64	; 0x40
   200f0:	str	r8, [r3, #16]
   200f4:	beq	20510 <__assert_fail@plt+0xd86c>
   200f8:	mov	r6, r5
   200fc:	mov	r8, r5
   20100:	b	1fff0 <__assert_fail@plt+0xd34c>
   20104:	ldr	r2, [r5, #8]
   20108:	ldr	r3, [sp, #4]
   2010c:	ands	r1, r2, #64	; 0x40
   20110:	mov	r8, r0
   20114:	str	r4, [r3, #16]
   20118:	bne	1ff38 <__assert_fail@plt+0xd294>
   2011c:	ands	r3, r2, #7
   20120:	bne	20738 <__assert_fail@plt+0xda94>
   20124:	ldr	r2, [sp, #4]
   20128:	str	r3, [r2, #20]
   2012c:	b	20264 <__assert_fail@plt+0xd5c0>
   20130:	ldr	r3, [sp, #4]
   20134:	ldr	r7, [r3, #52]	; 0x34
   20138:	cmp	r7, #0
   2013c:	bne	20150 <__assert_fail@plt+0xd4ac>
   20140:	b	20250 <__assert_fail@plt+0xd5ac>
   20144:	ldr	r7, [r7]
   20148:	cmp	r7, #0
   2014c:	beq	20250 <__assert_fail@plt+0xd5ac>
   20150:	mov	r1, r8
   20154:	add	r0, r7, #4
   20158:	bl	124b8 <strcmp@plt>
   2015c:	cmp	r0, #0
   20160:	bne	20144 <__assert_fail@plt+0xd4a0>
   20164:	mov	r4, r0
   20168:	mov	r8, r4
   2016c:	b	1fed4 <__assert_fail@plt+0xd230>
   20170:	bl	12884 <__ctype_b_loc@plt>
   20174:	lsl	r3, r9, #1
   20178:	ldr	r2, [r0]
   2017c:	ldrh	r3, [r2, r3]
   20180:	tst	r3, #8192	; 0x2000
   20184:	strbeq	r9, [sp, #44]	; 0x2c
   20188:	moveq	r8, #1
   2018c:	moveq	r4, #4
   20190:	b	1fed4 <__assert_fail@plt+0xd230>
   20194:	cmp	r4, #4
   20198:	bne	1ffa4 <__assert_fail@plt+0xd300>
   2019c:	ldr	r2, [sp, #12]
   201a0:	mov	r5, r8
   201a4:	cmp	r2, #0
   201a8:	beq	203b8 <__assert_fail@plt+0xd714>
   201ac:	ldr	r3, [sp, #16]
   201b0:	sub	r3, r3, #1
   201b4:	cmp	r3, r8
   201b8:	bls	20220 <__assert_fail@plt+0xd57c>
   201bc:	add	r8, r8, #1
   201c0:	strb	r9, [r2, r5]
   201c4:	b	1fed4 <__assert_fail@plt+0xd230>
   201c8:	ldr	r6, [sp]
   201cc:	mov	r0, r6
   201d0:	bl	12c44 <getc@plt>
   201d4:	mov	r4, r0
   201d8:	mov	r0, r6
   201dc:	str	r4, [sp, #32]
   201e0:	bl	12c44 <getc@plt>
   201e4:	mov	r5, r0
   201e8:	mov	r0, r6
   201ec:	str	r5, [sp, #36]	; 0x24
   201f0:	bl	12c44 <getc@plt>
   201f4:	cmp	r5, #187	; 0xbb
   201f8:	cmpeq	r4, #239	; 0xef
   201fc:	movne	r4, #1
   20200:	moveq	r4, #0
   20204:	cmp	r0, #191	; 0xbf
   20208:	orrne	r4, r4, #1
   2020c:	cmp	r4, #0
   20210:	str	r0, [sp, #40]	; 0x28
   20214:	movne	sl, #3
   20218:	bne	1feb8 <__assert_fail@plt+0xd214>
   2021c:	b	1feb4 <__assert_fail@plt+0xd210>
   20220:	ldr	r3, [sp, #16]
   20224:	ldr	r0, [sp, #12]
   20228:	add	r3, r3, #50	; 0x32
   2022c:	mov	r1, r3
   20230:	str	r3, [sp, #16]
   20234:	bl	12a58 <gcry_realloc@plt>
   20238:	cmp	r0, #0
   2023c:	beq	20800 <__assert_fail@plt+0xdb5c>
   20240:	add	r8, r8, #1
   20244:	strb	r9, [r0, r5]
   20248:	str	r0, [sp, #12]
   2024c:	b	1fed4 <__assert_fail@plt+0xd230>
   20250:	ldr	r3, [sp, #4]
   20254:	tst	r5, #128	; 0x80
   20258:	mvnne	r4, #6
   2025c:	mvneq	r4, #1
   20260:	str	r4, [r3, #16]
   20264:	ldr	r3, [pc, #1544]	; 20874 <__assert_fail@plt+0xdbd0>
   20268:	ldr	r2, [sp, #244]	; 0xf4
   2026c:	mov	r0, r4
   20270:	ldr	r3, [r3]
   20274:	cmp	r2, r3
   20278:	bne	20840 <__assert_fail@plt+0xdb9c>
   2027c:	add	sp, sp, #252	; 0xfc
   20280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20284:	ldr	r3, [sp, #4]
   20288:	ldr	r4, [r3, #16]
   2028c:	b	20264 <__assert_fail@plt+0xd5c0>
   20290:	mov	r1, r3
   20294:	ldr	r0, [sp, #4]
   20298:	bl	1f458 <__assert_fail@plt+0xc7b4>
   2029c:	mov	r4, r0
   202a0:	b	20264 <__assert_fail@plt+0xd5c0>
   202a4:	ldr	r3, [sp, #20]
   202a8:	cmp	r3, #0
   202ac:	bne	203dc <__assert_fail@plt+0xd738>
   202b0:	ldr	r3, [sp, #8]
   202b4:	add	r6, r3, r6, lsl #4
   202b8:	ldr	r3, [r6, #8]
   202bc:	tst	r3, #7
   202c0:	bne	203d4 <__assert_fail@plt+0xd730>
   202c4:	ldr	r2, [sp, #4]
   202c8:	mov	r3, #0
   202cc:	str	r3, [r2, #20]
   202d0:	ldr	r4, [r2, #16]
   202d4:	b	20264 <__assert_fail@plt+0xd5c0>
   202d8:	ldr	r3, [sp, #20]
   202dc:	cmp	r3, #0
   202e0:	beq	2034c <__assert_fail@plt+0xd6a8>
   202e4:	ldr	r3, [sp, #12]
   202e8:	cmp	r3, #0
   202ec:	beq	20360 <__assert_fail@plt+0xd6bc>
   202f0:	ldr	r3, [sp, #12]
   202f4:	mov	r6, #0
   202f8:	ldr	r1, [pc, #1404]	; 2087c <__assert_fail@plt+0xdbd8>
   202fc:	strb	r6, [r3, r8]
   20300:	mov	r0, r3
   20304:	bl	12b9c <strpbrk@plt>
   20308:	subs	r5, r0, #0
   2030c:	beq	20334 <__assert_fail@plt+0xd690>
   20310:	mov	r4, r5
   20314:	strb	r6, [r4], #1
   20318:	mov	r0, r4
   2031c:	bl	1c54c <__assert_fail@plt+0x98a8>
   20320:	cmp	r4, r6
   20324:	beq	20334 <__assert_fail@plt+0xd690>
   20328:	ldrb	r3, [r5, #1]
   2032c:	cmp	r3, r6
   20330:	bne	20284 <__assert_fail@plt+0xd5e0>
   20334:	ldr	r0, [sp, #12]
   20338:	bl	125e4 <gcry_free@plt>
   2033c:	ldr	r3, [sp, #4]
   20340:	mvn	r4, #9
   20344:	str	r4, [r3, #16]
   20348:	b	20264 <__assert_fail@plt+0xd5c0>
   2034c:	ldr	r3, [sp, #8]
   20350:	add	r6, r3, r6, lsl #4
   20354:	ldr	r3, [r6, #8]
   20358:	tst	r3, #7
   2035c:	bne	20440 <__assert_fail@plt+0xd79c>
   20360:	ldr	r3, [sp, #4]
   20364:	mvn	r4, #5
   20368:	str	r4, [r3, #16]
   2036c:	b	20264 <__assert_fail@plt+0xd5c0>
   20370:	ldr	r3, [sp, #4]
   20374:	ldr	r0, [r3, #52]	; 0x34
   20378:	cmp	r0, #0
   2037c:	beq	20390 <__assert_fail@plt+0xd6ec>
   20380:	ldr	r4, [r0]
   20384:	bl	125e4 <gcry_free@plt>
   20388:	subs	r0, r4, #0
   2038c:	bne	20380 <__assert_fail@plt+0xd6dc>
   20390:	ldm	sp, {r0, r2}
   20394:	mov	r3, #0
   20398:	str	r3, [r2, #52]	; 0x34
   2039c:	bl	12590 <ferror@plt>
   203a0:	subs	r4, r0, #0
   203a4:	beq	20434 <__assert_fail@plt+0xd790>
   203a8:	ldr	r3, [sp, #4]
   203ac:	mvn	r4, #4
   203b0:	str	r4, [r3, #16]
   203b4:	b	20264 <__assert_fail@plt+0xd5c0>
   203b8:	cmp	r8, #98	; 0x62
   203bc:	bgt	20494 <__assert_fail@plt+0xd7f0>
   203c0:	add	r3, sp, #248	; 0xf8
   203c4:	add	r3, r3, r8
   203c8:	add	r8, r8, #1
   203cc:	strb	r9, [r3, #-204]	; 0xffffff34
   203d0:	b	1fed4 <__assert_fail@plt+0xd230>
   203d4:	tst	r3, #8
   203d8:	bne	202c4 <__assert_fail@plt+0xd620>
   203dc:	ldr	r3, [sp, #4]
   203e0:	mvn	r4, #2
   203e4:	str	r4, [r3, #16]
   203e8:	b	20264 <__assert_fail@plt+0xd5c0>
   203ec:	ldr	r3, [sp, #8]
   203f0:	mov	r6, r4
   203f4:	ldr	r5, [r3, #8]
   203f8:	ldr	r3, [sp, #4]
   203fc:	tst	r5, #64	; 0x40
   20400:	str	r4, [r3, #16]
   20404:	beq	20058 <__assert_fail@plt+0xd3b4>
   20408:	b	20070 <__assert_fail@plt+0xd3cc>
   2040c:	add	r3, sp, #248	; 0xf8
   20410:	add	r8, r3, r8
   20414:	ldr	r3, [sp, #12]
   20418:	add	r0, sp, #44	; 0x2c
   2041c:	strb	r3, [r8, #-204]	; 0xffffff34
   20420:	bl	12c68 <gcry_strdup@plt>
   20424:	subs	r3, r0, #0
   20428:	str	r3, [sp, #12]
   2042c:	bne	20458 <__assert_fail@plt+0xd7b4>
   20430:	mvn	r4, #10
   20434:	ldr	r3, [sp, #4]
   20438:	str	r4, [r3, #16]
   2043c:	b	20264 <__assert_fail@plt+0xd5c0>
   20440:	ldr	r3, [sp, #12]
   20444:	cmp	r3, #0
   20448:	beq	2040c <__assert_fail@plt+0xd768>
   2044c:	ldr	r3, [sp, #12]
   20450:	ldr	r2, [sp, #20]
   20454:	strb	r2, [r3, r8]
   20458:	ldr	r4, [sp, #12]
   2045c:	mov	r0, r4
   20460:	bl	1c54c <__assert_fail@plt+0x98a8>
   20464:	ldrb	r3, [r4]
   20468:	cmp	r3, #34	; 0x22
   2046c:	beq	20760 <__assert_fail@plt+0xdabc>
   20470:	mov	r2, r4
   20474:	ldr	r4, [sp, #4]
   20478:	ldr	r1, [r6, #8]
   2047c:	mov	r0, r4
   20480:	bl	1e97c <__assert_fail@plt+0xbcd8>
   20484:	cmp	r0, #0
   20488:	beq	2074c <__assert_fail@plt+0xdaa8>
   2048c:	ldr	r4, [r4, #16]
   20490:	b	20264 <__assert_fail@plt+0xd5c0>
   20494:	mov	r0, #150	; 0x96
   20498:	bl	12458 <gcry_malloc@plt>
   2049c:	subs	r7, r0, #0
   204a0:	str	r7, [sp, #12]
   204a4:	beq	20430 <__assert_fail@plt+0xd78c>
   204a8:	mov	r2, r8
   204ac:	add	r1, sp, #44	; 0x2c
   204b0:	mov	r0, r7
   204b4:	bl	125b4 <memcpy@plt>
   204b8:	mov	r3, #150	; 0x96
   204bc:	add	r8, r8, #1
   204c0:	str	r3, [sp, #16]
   204c4:	strb	r9, [r7, r5]
   204c8:	b	1fed4 <__assert_fail@plt+0xd230>
   204cc:	ldr	r3, [r4, #8]
   204d0:	ldr	r2, [sp, #4]
   204d4:	tst	r3, #64	; 0x40
   204d8:	moveq	r6, r5
   204dc:	str	r8, [r2, #16]
   204e0:	moveq	r4, #3
   204e4:	mov	r8, r5
   204e8:	beq	1fed4 <__assert_fail@plt+0xd230>
   204ec:	mov	r6, r8
   204f0:	mov	r4, #1
   204f4:	b	1fed4 <__assert_fail@plt+0xd230>
   204f8:	ldr	r3, [sp, #8]
   204fc:	ldr	r6, [r3, #8]
   20500:	ldr	r3, [sp, #4]
   20504:	tst	r6, #64	; 0x40
   20508:	str	r8, [r3, #16]
   2050c:	bne	204ec <__assert_fail@plt+0xd848>
   20510:	add	r8, sp, #44	; 0x2c
   20514:	mov	r0, r8
   20518:	ldr	r1, [pc, #864]	; 20880 <__assert_fail@plt+0xdbdc>
   2051c:	bl	124b8 <strcmp@plt>
   20520:	cmp	r0, #0
   20524:	beq	20720 <__assert_fail@plt+0xda7c>
   20528:	ldr	r1, [pc, #840]	; 20878 <__assert_fail@plt+0xdbd4>
   2052c:	mov	r0, r8
   20530:	bl	124b8 <strcmp@plt>
   20534:	subs	r4, r0, #0
   20538:	bne	207ac <__assert_fail@plt+0xdb08>
   2053c:	ldr	r0, [sp]
   20540:	bl	12c44 <getc@plt>
   20544:	ldr	r8, [r7]
   20548:	str	r4, [sp, #28]
   2054c:	cmn	r0, #1
   20550:	cmpne	r0, #10
   20554:	moveq	r3, #1
   20558:	movne	r3, #0
   2055c:	cmp	r3, #0
   20560:	mov	r6, r0
   20564:	movne	r6, #10
   20568:	movne	r3, #1
   2056c:	moveq	r3, #0
   20570:	str	r3, [sp, #24]
   20574:	lsl	r3, r6, #1
   20578:	bics	r2, r6, #127	; 0x7f
   2057c:	ldrh	r3, [r8, r3]
   20580:	and	r3, r3, #8192	; 0x2000
   20584:	bne	206fc <__assert_fail@plt+0xda58>
   20588:	cmp	r3, #0
   2058c:	bne	20640 <__assert_fail@plt+0xd99c>
   20590:	mov	r3, #1
   20594:	ldr	r4, [sp, #24]
   20598:	mov	r8, r3
   2059c:	mov	r0, r6
   205a0:	add	r3, sp, #248	; 0xf8
   205a4:	add	r2, r3, r2
   205a8:	cmp	r4, #0
   205ac:	strb	r0, [r2, #-104]	; 0xffffff98
   205b0:	bne	20858 <__assert_fail@plt+0xdbb4>
   205b4:	ldr	r0, [sp]
   205b8:	bl	12c44 <getc@plt>
   205bc:	cmn	r0, #1
   205c0:	cmpne	r0, #10
   205c4:	bne	20850 <__assert_fail@plt+0xdbac>
   205c8:	mov	r3, #20
   205cc:	mov	r4, #1
   205d0:	mov	r0, #10
   205d4:	ldr	r2, [r7]
   205d8:	ldrh	r3, [r2, r3]
   205dc:	tst	r3, #8192	; 0x2000
   205e0:	bne	20674 <__assert_fail@plt+0xd9d0>
   205e4:	cmp	r8, #98	; 0x62
   205e8:	ble	20844 <__assert_fail@plt+0xdba0>
   205ec:	cmp	r4, #0
   205f0:	mov	r9, r4
   205f4:	bne	20858 <__assert_fail@plt+0xdbb4>
   205f8:	ldr	r0, [sp]
   205fc:	bl	12c44 <getc@plt>
   20600:	cmn	r0, #1
   20604:	cmpne	r0, #10
   20608:	mov	r6, r0
   2060c:	bne	20798 <__assert_fail@plt+0xdaf4>
   20610:	mov	r6, #10
   20614:	mov	r3, #20
   20618:	mov	r0, r6
   2061c:	mov	r2, #1
   20620:	str	r2, [sp, #24]
   20624:	ldr	r8, [r7]
   20628:	ldrh	r3, [r8, r3]
   2062c:	tst	r3, #8192	; 0x2000
   20630:	beq	2080c <__assert_fail@plt+0xdb68>
   20634:	bics	r3, r0, #127	; 0x7f
   20638:	mov	r6, r0
   2063c:	bne	20688 <__assert_fail@plt+0xd9e4>
   20640:	ldr	r3, [sp, #24]
   20644:	cmp	r3, #0
   20648:	bne	20858 <__assert_fail@plt+0xdbb4>
   2064c:	ldr	r0, [sp]
   20650:	bl	12c44 <getc@plt>
   20654:	ldr	r8, [r7]
   20658:	cmn	r0, #1
   2065c:	cmpne	r0, #10
   20660:	moveq	r3, #1
   20664:	mov	r6, r0
   20668:	streq	r3, [sp, #24]
   2066c:	moveq	r6, #10
   20670:	b	20574 <__assert_fail@plt+0xd8d0>
   20674:	mov	r3, r8
   20678:	mov	r6, r0
   2067c:	mov	r8, r2
   20680:	mov	r9, r3
   20684:	str	r4, [sp, #24]
   20688:	ldr	r3, [sp, #4]
   2068c:	ldr	r4, [r3, #52]	; 0x34
   20690:	add	r3, sp, #248	; 0xf8
   20694:	add	r2, r3, r9
   20698:	cmp	r4, #0
   2069c:	mov	r3, #0
   206a0:	strb	r3, [r2, #-104]	; 0xffffff98
   206a4:	beq	206c8 <__assert_fail@plt+0xda24>
   206a8:	add	r1, sp, #144	; 0x90
   206ac:	add	r0, r4, #4
   206b0:	bl	124b8 <strcmp@plt>
   206b4:	cmp	r0, #0
   206b8:	beq	20574 <__assert_fail@plt+0xd8d0>
   206bc:	ldr	r4, [r4]
   206c0:	cmp	r4, #0
   206c4:	bne	206a8 <__assert_fail@plt+0xda04>
   206c8:	add	r0, r9, #8
   206cc:	bl	12458 <gcry_malloc@plt>
   206d0:	subs	r8, r0, #0
   206d4:	beq	20430 <__assert_fail@plt+0xd78c>
   206d8:	add	r0, r8, #4
   206dc:	add	r1, sp, #144	; 0x90
   206e0:	bl	12764 <strcpy@plt>
   206e4:	ldr	r2, [sp, #4]
   206e8:	ldr	r3, [r2, #52]	; 0x34
   206ec:	str	r8, [r2, #52]	; 0x34
   206f0:	str	r3, [r8]
   206f4:	ldr	r8, [r7]
   206f8:	b	20574 <__assert_fail@plt+0xd8d0>
   206fc:	cmp	r3, #0
   20700:	movne	r9, #0
   20704:	bne	20688 <__assert_fail@plt+0xd9e4>
   20708:	mov	r2, r3
   2070c:	mov	r3, #1
   20710:	ldr	r4, [sp, #24]
   20714:	mov	r8, r3
   20718:	mov	r0, r6
   2071c:	b	205a0 <__assert_fail@plt+0xd8fc>
   20720:	mov	r3, #1
   20724:	mov	r6, r5
   20728:	mov	r8, r5
   2072c:	str	r3, [sp, #20]
   20730:	mov	r4, #3
   20734:	b	1fed4 <__assert_fail@plt+0xd230>
   20738:	tst	r2, #8
   2073c:	beq	203dc <__assert_fail@plt+0xd738>
   20740:	ldr	r3, [sp, #4]
   20744:	str	r1, [r3, #20]
   20748:	b	20264 <__assert_fail@plt+0xd5c0>
   2074c:	ldr	r0, [sp, #12]
   20750:	bl	125e4 <gcry_free@plt>
   20754:	ldr	r3, [sp, #4]
   20758:	ldr	r4, [r3, #16]
   2075c:	b	20264 <__assert_fail@plt+0xd5c0>
   20760:	ldr	r5, [sp, #12]
   20764:	add	r4, r5, #1
   20768:	ldrb	r3, [r5, #1]
   2076c:	cmp	r3, #0
   20770:	beq	20470 <__assert_fail@plt+0xd7cc>
   20774:	mov	r0, r4
   20778:	bl	128d8 <strlen@plt>
   2077c:	ldrb	r3, [r5, r0]
   20780:	cmp	r3, #34	; 0x22
   20784:	moveq	r3, #0
   20788:	ldreq	r2, [sp, #12]
   2078c:	strbeq	r3, [r2, r0]
   20790:	b	20470 <__assert_fail@plt+0xd7cc>
   20794:	mov	r6, r0
   20798:	mov	r2, #0
   2079c:	lsl	r3, r6, #1
   207a0:	str	r2, [sp, #24]
   207a4:	mov	r0, r6
   207a8:	b	20624 <__assert_fail@plt+0xd980>
   207ac:	ldr	r3, [sp, #4]
   207b0:	ldr	r4, [r3, #52]	; 0x34
   207b4:	cmp	r4, #0
   207b8:	beq	207dc <__assert_fail@plt+0xdb38>
   207bc:	mov	r1, r8
   207c0:	add	r0, r4, #4
   207c4:	bl	124b8 <strcmp@plt>
   207c8:	cmp	r0, #0
   207cc:	beq	200f8 <__assert_fail@plt+0xd454>
   207d0:	ldr	r4, [r4]
   207d4:	cmp	r4, #0
   207d8:	bne	207bc <__assert_fail@plt+0xdb18>
   207dc:	ldr	r2, [sp, #4]
   207e0:	tst	r6, #128	; 0x80
   207e4:	mvnne	r3, #6
   207e8:	mvneq	r3, #1
   207ec:	mov	r6, r5
   207f0:	str	r3, [r2, #16]
   207f4:	mov	r8, r5
   207f8:	mvn	r4, #0
   207fc:	b	1fed4 <__assert_fail@plt+0xd230>
   20800:	ldr	r0, [sp, #12]
   20804:	bl	125e4 <gcry_free@plt>
   20808:	b	20430 <__assert_fail@plt+0xd78c>
   2080c:	ldr	r3, [sp, #24]
   20810:	cmp	r3, #0
   20814:	bne	20858 <__assert_fail@plt+0xdbb4>
   20818:	ldr	r0, [sp]
   2081c:	bl	12c44 <getc@plt>
   20820:	mov	r3, #1
   20824:	str	r3, [sp, #24]
   20828:	mov	r3, #20
   2082c:	cmn	r0, #1
   20830:	cmpne	r0, #10
   20834:	bne	20794 <__assert_fail@plt+0xdaf0>
   20838:	mov	r0, #10
   2083c:	b	20624 <__assert_fail@plt+0xd980>
   20840:	bl	1262c <__stack_chk_fail@plt>
   20844:	mov	r2, r8
   20848:	add	r8, r8, #1
   2084c:	b	205a0 <__assert_fail@plt+0xd8fc>
   20850:	lsl	r3, r0, #1
   20854:	b	205d4 <__assert_fail@plt+0xd930>
   20858:	ldr	r3, [fp]
   2085c:	ldr	r4, [sp, #28]
   20860:	add	r3, r3, #1
   20864:	mov	r6, r5
   20868:	str	r3, [fp]
   2086c:	mov	r8, #0
   20870:	b	1fed4 <__assert_fail@plt+0xd230>
   20874:	strdeq	r5, [r4], -r8
   20878:	ldrdeq	r2, [r3], -ip
   2087c:	strdeq	r2, [r3], -r4
   20880:	strdeq	r2, [r3], -r8
   20884:	push	{r4, r5, r6, lr}
   20888:	subs	r4, r0, #0
   2088c:	sub	sp, sp, #16
   20890:	beq	208ac <__assert_fail@plt+0xdc08>
   20894:	cmp	r4, #1
   20898:	beq	20984 <__assert_fail@plt+0xdce0>
   2089c:	cmp	r4, #2
   208a0:	beq	20908 <__assert_fail@plt+0xdc64>
   208a4:	add	sp, sp, #16
   208a8:	pop	{r4, r5, r6, pc}
   208ac:	mov	r0, #11
   208b0:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   208b4:	mov	r5, r0
   208b8:	mov	r0, #13
   208bc:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   208c0:	mov	r6, r0
   208c4:	mov	r0, #14
   208c8:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   208cc:	ldr	ip, [pc, #240]	; 209c4 <__assert_fail@plt+0xdd20>
   208d0:	ldr	r2, [pc, #240]	; 209c8 <__assert_fail@plt+0xdd24>
   208d4:	mov	r3, r6
   208d8:	str	r2, [sp]
   208dc:	mov	r1, r5
   208e0:	str	r4, [sp, #12]
   208e4:	str	ip, [sp, #8]
   208e8:	ldr	r2, [pc, #220]	; 209cc <__assert_fail@plt+0xdd28>
   208ec:	str	r0, [sp, #4]
   208f0:	mov	r0, #1
   208f4:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   208f8:	mov	r0, #1
   208fc:	add	sp, sp, #16
   20900:	pop	{r4, r5, r6, lr}
   20904:	b	1eb84 <__assert_fail@plt+0xbee0>
   20908:	mov	r0, #42	; 0x2a
   2090c:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   20910:	cmp	r0, #0
   20914:	beq	20924 <__assert_fail@plt+0xdc80>
   20918:	ldrb	r3, [r0]
   2091c:	cmp	r3, #49	; 0x31
   20920:	beq	20948 <__assert_fail@plt+0xdca4>
   20924:	mov	r0, #41	; 0x29
   20928:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   2092c:	mov	r3, #0
   20930:	ldr	r2, [pc, #140]	; 209c4 <__assert_fail@plt+0xdd20>
   20934:	mov	r1, r0
   20938:	mov	r0, r3
   2093c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   20940:	mov	r0, #0
   20944:	bl	128b4 <exit@plt>
   20948:	mov	r0, #40	; 0x28
   2094c:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   20950:	mov	r2, #0
   20954:	mov	r4, r0
   20958:	mov	r1, r0
   2095c:	mov	r0, #1
   20960:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   20964:	ldrb	r3, [r4]
   20968:	cmp	r3, #0
   2096c:	beq	20924 <__assert_fail@plt+0xdc80>
   20970:	mov	r2, #0
   20974:	ldr	r1, [pc, #72]	; 209c4 <__assert_fail@plt+0xdd20>
   20978:	mov	r0, #1
   2097c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   20980:	b	20924 <__assert_fail@plt+0xdc80>
   20984:	mov	r0, #40	; 0x28
   20988:	bl	1ebd8 <__assert_fail@plt+0xbf34>
   2098c:	mov	r2, #0
   20990:	mov	r5, r0
   20994:	mov	r1, r0
   20998:	mov	r0, r4
   2099c:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   209a0:	ldrb	r3, [r5]
   209a4:	cmp	r3, #0
   209a8:	beq	209bc <__assert_fail@plt+0xdd18>
   209ac:	mov	r0, r4
   209b0:	mov	r2, #0
   209b4:	ldr	r1, [pc, #8]	; 209c4 <__assert_fail@plt+0xdd20>
   209b8:	bl	1eaa4 <__assert_fail@plt+0xbe00>
   209bc:	mov	r0, #2
   209c0:	bl	128b4 <exit@plt>
   209c4:	andeq	r0, r3, r0, lsl #26
   209c8:	andeq	r2, r3, r0, lsl #28
   209cc:	andeq	r2, r3, ip, lsl #29
   209d0:	ldr	r3, [pc, #4]	; 209dc <__assert_fail@plt+0xdd38>
   209d4:	str	r0, [r3, #4]
   209d8:	bx	lr
   209dc:	andeq	r6, r4, ip, lsr #4
   209e0:	push	{r4, lr}
   209e4:	mov	r4, r0
   209e8:	ldr	r0, [r0]
   209ec:	cmp	r0, #2
   209f0:	cmnne	r0, #1
   209f4:	bne	20a14 <__assert_fail@plt+0xdd70>
   209f8:	mov	r0, r4
   209fc:	bl	125e4 <gcry_free@plt>
   20a00:	ldr	r3, [pc, #20]	; 20a1c <__assert_fail@plt+0xdd78>
   20a04:	mvn	r2, #0
   20a08:	mov	r0, #0
   20a0c:	str	r2, [r3]
   20a10:	pop	{r4, pc}
   20a14:	bl	12c5c <close@plt>
   20a18:	b	209f8 <__assert_fail@plt+0xdd54>
   20a1c:	strdeq	r6, [r4], -r0
   20a20:	push	{r4, r5, r6, r7, r8, r9, lr}
   20a24:	mov	r6, r0
   20a28:	ldr	r7, [pc, #504]	; 20c28 <__assert_fail@plt+0xdf84>
   20a2c:	sub	sp, sp, #28
   20a30:	mov	r4, r1
   20a34:	ldr	r3, [r7]
   20a38:	cmp	r3, #0
   20a3c:	beq	20a64 <__assert_fail@plt+0xddc0>
   20a40:	mov	r0, #2
   20a44:	bl	12890 <_gpgrt_get_std_stream@plt>
   20a48:	ldr	r3, [r7]
   20a4c:	cmp	r3, r0
   20a50:	beq	20a5c <__assert_fail@plt+0xddb8>
   20a54:	mov	r0, r3
   20a58:	bl	12788 <gpgrt_fclose@plt>
   20a5c:	mov	r3, #0
   20a60:	str	r3, [r7]
   20a64:	cmp	r6, #0
   20a68:	beq	20bf0 <__assert_fail@plt+0xdf4c>
   20a6c:	ldr	r1, [pc, #440]	; 20c2c <__assert_fail@plt+0xdf88>
   20a70:	mov	r0, r6
   20a74:	bl	124b8 <strcmp@plt>
   20a78:	cmp	r0, #0
   20a7c:	beq	20be0 <__assert_fail@plt+0xdf3c>
   20a80:	mov	r2, #6
   20a84:	ldr	r1, [pc, #420]	; 20c30 <__assert_fail@plt+0xdf8c>
   20a88:	mov	r0, r6
   20a8c:	bl	12c2c <strncmp@plt>
   20a90:	mov	r4, r0
   20a94:	mov	r0, r6
   20a98:	bl	128d8 <strlen@plt>
   20a9c:	cmp	r4, #0
   20aa0:	add	r4, r0, #20
   20aa4:	bne	20b58 <__assert_fail@plt+0xdeb4>
   20aa8:	ldrb	r3, [r6, #6]
   20aac:	cmp	r3, #0
   20ab0:	beq	20b58 <__assert_fail@plt+0xdeb4>
   20ab4:	mov	r8, #1
   20ab8:	mov	r0, r4
   20abc:	bl	12410 <gcry_xmalloc@plt>
   20ac0:	mov	r1, r6
   20ac4:	mvn	r4, #0
   20ac8:	mov	r5, r0
   20acc:	add	r0, r0, #16
   20ad0:	bl	12764 <strcpy@plt>
   20ad4:	mov	r3, #0
   20ad8:	str	r3, [r5, #12]
   20adc:	stmib	r5, {r3, r8}
   20ae0:	str	r4, [r5]
   20ae4:	ldr	r1, [pc, #328]	; 20c34 <__assert_fail@plt+0xdf90>
   20ae8:	mov	r2, #0
   20aec:	str	r1, [sp, #20]
   20af0:	add	r1, sp, #24
   20af4:	str	r2, [sp, #16]
   20af8:	ldmdb	r1, {r0, r1}
   20afc:	ldr	ip, [pc, #308]	; 20c38 <__assert_fail@plt+0xdf94>
   20b00:	str	r2, [sp, #8]
   20b04:	add	r3, sp, #8
   20b08:	ldr	r2, [pc, #300]	; 20c3c <__assert_fail@plt+0xdf98>
   20b0c:	stm	sp, {r0, r1}
   20b10:	str	r2, [sp, #12]
   20b14:	mov	r0, r5
   20b18:	ldm	r3, {r2, r3}
   20b1c:	ldr	r1, [pc, #284]	; 20c40 <__assert_fail@plt+0xdf9c>
   20b20:	str	r4, [ip]
   20b24:	bl	12b48 <gpgrt_fopencookie@plt>
   20b28:	subs	r4, r0, #0
   20b2c:	beq	20c18 <__assert_fail@plt+0xdf74>
   20b30:	mov	r3, #0
   20b34:	mov	r1, r3
   20b38:	mov	r2, #1
   20b3c:	mov	r0, r4
   20b40:	bl	12794 <gpgrt_setvbuf@plt>
   20b44:	mov	r3, #0
   20b48:	stm	r7, {r4, r8}
   20b4c:	str	r3, [r7, #8]
   20b50:	add	sp, sp, #28
   20b54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20b58:	mov	r2, #9
   20b5c:	ldr	r1, [pc, #224]	; 20c44 <__assert_fail@plt+0xdfa0>
   20b60:	mov	r0, r6
   20b64:	bl	12c2c <strncmp@plt>
   20b68:	cmp	r0, #0
   20b6c:	moveq	r8, #2
   20b70:	beq	20ab8 <__assert_fail@plt+0xde14>
   20b74:	mov	r0, r4
   20b78:	bl	12410 <gcry_xmalloc@plt>
   20b7c:	mov	r1, r6
   20b80:	ldr	r9, [pc, #192]	; 20c48 <__assert_fail@plt+0xdfa4>
   20b84:	ldr	r8, [pc, #192]	; 20c4c <__assert_fail@plt+0xdfa8>
   20b88:	mov	r5, r0
   20b8c:	add	r0, r0, #16
   20b90:	bl	12764 <strcpy@plt>
   20b94:	mov	r3, #0
   20b98:	str	r3, [r5, #4]
   20b9c:	str	r3, [r5, #12]
   20ba0:	str	r3, [r5, #8]
   20ba4:	b	20bb8 <__assert_fail@plt+0xdf14>
   20ba8:	bl	12968 <__errno_location@plt>
   20bac:	ldr	r3, [r0]
   20bb0:	cmp	r3, #4
   20bb4:	bne	20bd8 <__assert_fail@plt+0xdf34>
   20bb8:	mov	r2, r9
   20bbc:	mov	r1, r8
   20bc0:	mov	r0, r6
   20bc4:	bl	127b8 <open64@plt>
   20bc8:	cmn	r0, #1
   20bcc:	mov	r4, r0
   20bd0:	str	r0, [r5]
   20bd4:	beq	20ba8 <__assert_fail@plt+0xdf04>
   20bd8:	mov	r8, #0
   20bdc:	b	20ae4 <__assert_fail@plt+0xde40>
   20be0:	mov	r0, #2
   20be4:	bl	12890 <_gpgrt_get_std_stream@plt>
   20be8:	bl	12c50 <gpgrt_fileno@plt>
   20bec:	mov	r4, r0
   20bf0:	mov	r0, #20
   20bf4:	bl	12410 <gcry_xmalloc@plt>
   20bf8:	mov	r8, #0
   20bfc:	mov	r5, r0
   20c00:	str	r4, [r0]
   20c04:	strb	r8, [r0, #16]
   20c08:	str	r8, [r0, #4]
   20c0c:	str	r8, [r0, #12]
   20c10:	str	r8, [r0, #8]
   20c14:	b	20ae4 <__assert_fail@plt+0xde40>
   20c18:	mov	r0, #2
   20c1c:	bl	12890 <_gpgrt_get_std_stream@plt>
   20c20:	mov	r4, r0
   20c24:	b	20b30 <__assert_fail@plt+0xde8c>
   20c28:	andeq	r6, r4, r4, lsr r2
   20c2c:	andeq	r1, r3, ip, lsr #26
   20c30:	andeq	r2, r3, ip, lsl lr
   20c34:	andeq	r0, r2, r0, ror #19
   20c38:	strdeq	r6, [r4], -r0
   20c3c:	andeq	r1, r2, ip, asr #6
   20c40:	andeq	r1, r3, r0, asr r2
   20c44:	andeq	r2, r3, r4, lsr #28
   20c48:			; <UNDEFINED> instruction: 0x000001b6
   20c4c:	andeq	r0, r0, r1, asr #8
   20c50:	push	{r4, r5, r6, r7, r8, r9, lr}
   20c54:	sub	sp, sp, #28
   20c58:	ldr	r6, [pc, #688]	; 20f10 <__assert_fail@plt+0xe26c>
   20c5c:	cmp	r0, #1
   20c60:	ldr	r3, [r6]
   20c64:	str	r3, [sp, #20]
   20c68:	beq	20d40 <__assert_fail@plt+0xe09c>
   20c6c:	ldr	r4, [pc, #672]	; 20f14 <__assert_fail@plt+0xe270>
   20c70:	mov	r5, r0
   20c74:	mov	r7, r1
   20c78:	ldr	r3, [r4, #12]
   20c7c:	ldr	r0, [r4, #4]
   20c80:	cmp	r3, #0
   20c84:	bne	20d58 <__assert_fail@plt+0xe0b4>
   20c88:	ldr	r3, [r4, #16]
   20c8c:	orrs	r0, r0, r3
   20c90:	bne	20ef0 <__assert_fail@plt+0xe24c>
   20c94:	ldr	r3, [r4, #100]	; 0x64
   20c98:	orrs	r3, r0, r3
   20c9c:	bne	20d80 <__assert_fail@plt+0xe0dc>
   20ca0:	ldr	r3, [r4, #12]
   20ca4:	cmp	r3, #0
   20ca8:	beq	20dd8 <__assert_fail@plt+0xe134>
   20cac:	cmp	r7, #0
   20cb0:	bne	20d08 <__assert_fail@plt+0xe064>
   20cb4:	ldr	r2, [r4, #16]
   20cb8:	ldr	r3, [r4, #12]
   20cbc:	ldr	r1, [r4, #100]	; 0x64
   20cc0:	orr	r3, r3, r2
   20cc4:	ldr	r2, [r4, #4]
   20cc8:	orr	r3, r3, r1
   20ccc:	orrs	r3, r3, r2
   20cd0:	beq	20d08 <__assert_fail@plt+0xe064>
   20cd4:	ldr	r1, [r4]
   20cd8:	ldrb	r3, [r1, #2]
   20cdc:	tst	r3, #1
   20ce0:	beq	20e3c <__assert_fail@plt+0xe198>
   20ce4:	ldr	r3, [r1, #16]
   20ce8:	ldr	r2, [r1, #8]
   20cec:	cmp	r3, r2
   20cf0:	bcs	20e3c <__assert_fail@plt+0xe198>
   20cf4:	ldr	r2, [r1, #4]
   20cf8:	add	r0, r3, #1
   20cfc:	str	r0, [r1, #16]
   20d00:	mov	r1, #32
   20d04:	strb	r1, [r2, r3]
   20d08:	cmp	r5, #7
   20d0c:	ldrls	pc, [pc, r5, lsl #2]
   20d10:	b	20efc <__assert_fail@plt+0xe258>
   20d14:	andeq	r0, r2, r0, asr #26
   20d18:	andeq	r0, r2, r0, asr #26
   20d1c:	andeq	r0, r2, r0, asr #26
   20d20:	andeq	r0, r2, r0, asr #26
   20d24:	andeq	r0, r2, r0, asr #26
   20d28:	andeq	r0, r2, ip, lsl lr
   20d2c:	andeq	r0, r2, ip, lsr #28
   20d30:	andeq	r0, r2, r4, lsr sp
   20d34:	ldr	r1, [r4]
   20d38:	ldr	r0, [pc, #472]	; 20f18 <__assert_fail@plt+0xe274>
   20d3c:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   20d40:	ldr	r2, [sp, #20]
   20d44:	ldr	r3, [r6]
   20d48:	cmp	r2, r3
   20d4c:	bne	20ef8 <__assert_fail@plt+0xe254>
   20d50:	add	sp, sp, #28
   20d54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20d58:	cmp	r0, #0
   20d5c:	ldr	r8, [r4]
   20d60:	beq	20e8c <__assert_fail@plt+0xe1e8>
   20d64:	mov	r1, r8
   20d68:	ldr	r0, [pc, #428]	; 20f1c <__assert_fail@plt+0xe278>
   20d6c:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   20d70:	ldr	r0, [r4, #4]
   20d74:	ldr	r3, [r4, #100]	; 0x64
   20d78:	orrs	r3, r0, r3
   20d7c:	beq	20ca0 <__assert_fail@plt+0xdffc>
   20d80:	ldr	r3, [r4, #104]	; 0x68
   20d84:	cmp	r3, #0
   20d88:	beq	20e70 <__assert_fail@plt+0xe1cc>
   20d8c:	add	r0, sp, #16
   20d90:	blx	r3
   20d94:	cmp	r0, #0
   20d98:	beq	20e70 <__assert_fail@plt+0xe1cc>
   20d9c:	ldr	r1, [pc, #380]	; 20f20 <__assert_fail@plt+0xe27c>
   20da0:	cmp	r0, #1
   20da4:	ldr	r8, [pc, #376]	; 20f24 <__assert_fail@plt+0xe280>
   20da8:	ldr	r9, [r4]
   20dac:	movne	r8, r1
   20db0:	bl	128a8 <getpid@plt>
   20db4:	mov	r1, r8
   20db8:	ldr	r3, [sp, #16]
   20dbc:	mov	r2, r0
   20dc0:	mov	r0, r9
   20dc4:	bl	128c0 <gpgrt_fprintf_unlocked@plt>
   20dc8:	ldr	r3, [r4, #12]
   20dcc:	cmp	r3, #0
   20dd0:	bne	20e48 <__assert_fail@plt+0xe1a4>
   20dd4:	ldr	r3, [r4, #100]	; 0x64
   20dd8:	ldr	r2, [r4, #16]
   20ddc:	orrs	r3, r3, r2
   20de0:	beq	20e48 <__assert_fail@plt+0xe1a4>
   20de4:	ldr	r1, [r4]
   20de8:	ldrb	r3, [r1, #2]
   20dec:	tst	r3, #1
   20df0:	beq	20e64 <__assert_fail@plt+0xe1c0>
   20df4:	ldr	r3, [r1, #16]
   20df8:	ldr	r2, [r1, #8]
   20dfc:	cmp	r3, r2
   20e00:	bcs	20e64 <__assert_fail@plt+0xe1c0>
   20e04:	ldr	r2, [r1, #4]
   20e08:	add	r0, r3, #1
   20e0c:	str	r0, [r1, #16]
   20e10:	mov	r1, #58	; 0x3a
   20e14:	strb	r1, [r2, r3]
   20e18:	b	20cac <__assert_fail@plt+0xe008>
   20e1c:	ldr	r1, [r4]
   20e20:	ldr	r0, [pc, #256]	; 20f28 <__assert_fail@plt+0xe284>
   20e24:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   20e28:	b	20d40 <__assert_fail@plt+0xe09c>
   20e2c:	ldr	r1, [r4]
   20e30:	ldr	r0, [pc, #244]	; 20f2c <__assert_fail@plt+0xe288>
   20e34:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   20e38:	b	20d40 <__assert_fail@plt+0xe09c>
   20e3c:	mov	r0, #32
   20e40:	bl	1256c <_gpgrt_putc_overflow@plt>
   20e44:	b	20d08 <__assert_fail@plt+0xe064>
   20e48:	ldr	r3, [r4, #4]
   20e4c:	cmp	r3, #0
   20e50:	beq	20cac <__assert_fail@plt+0xe008>
   20e54:	ldr	r1, [r4]
   20e58:	ldrb	r3, [r1, #2]
   20e5c:	tst	r3, #1
   20e60:	bne	20df4 <__assert_fail@plt+0xe150>
   20e64:	mov	r0, #58	; 0x3a
   20e68:	bl	1256c <_gpgrt_putc_overflow@plt>
   20e6c:	b	20cac <__assert_fail@plt+0xe008>
   20e70:	ldr	r8, [r4]
   20e74:	bl	128a8 <getpid@plt>
   20e78:	ldr	r1, [pc, #176]	; 20f30 <__assert_fail@plt+0xe28c>
   20e7c:	mov	r2, r0
   20e80:	mov	r0, r8
   20e84:	bl	128c0 <gpgrt_fprintf_unlocked@plt>
   20e88:	b	20dc8 <__assert_fail@plt+0xe124>
   20e8c:	bl	125d8 <time@plt>
   20e90:	str	r0, [sp, #16]
   20e94:	add	r0, sp, #16
   20e98:	bl	1283c <localtime@plt>
   20e9c:	mov	r1, r0
   20ea0:	mov	r0, r8
   20ea4:	ldr	ip, [r1]
   20ea8:	ldr	r3, [r1, #16]
   20eac:	ldr	r2, [r1, #20]
   20eb0:	str	ip, [sp, #12]
   20eb4:	ldr	ip, [r1, #4]
   20eb8:	add	r2, r2, #1888	; 0x760
   20ebc:	str	ip, [sp, #8]
   20ec0:	ldr	ip, [r1, #8]
   20ec4:	add	r3, r3, #1
   20ec8:	str	ip, [sp, #4]
   20ecc:	ldr	r1, [r1, #12]
   20ed0:	add	r2, r2, #12
   20ed4:	str	r1, [sp]
   20ed8:	ldr	r1, [pc, #84]	; 20f34 <__assert_fail@plt+0xe290>
   20edc:	bl	128c0 <gpgrt_fprintf_unlocked@plt>
   20ee0:	ldr	r0, [r4, #4]
   20ee4:	ldr	r3, [r4, #16]
   20ee8:	orrs	r0, r0, r3
   20eec:	beq	20c94 <__assert_fail@plt+0xdff0>
   20ef0:	ldr	r8, [r4]
   20ef4:	b	20d64 <__assert_fail@plt+0xe0c0>
   20ef8:	bl	1262c <__stack_chk_fail@plt>
   20efc:	mov	r2, r5
   20f00:	ldr	r0, [r4]
   20f04:	ldr	r1, [pc, #44]	; 20f38 <__assert_fail@plt+0xe294>
   20f08:	bl	128c0 <gpgrt_fprintf_unlocked@plt>
   20f0c:	b	20d40 <__assert_fail@plt+0xe09c>
   20f10:	strdeq	r5, [r4], -r8
   20f14:	andeq	r6, r4, r4, lsr r2
   20f18:	andeq	r2, r3, r8, lsl #29
   20f1c:	andeq	r6, r4, r8, asr #4
   20f20:	andeq	r2, r3, ip, lsr lr
   20f24:	andeq	r2, r3, r0, lsr lr
   20f28:	andeq	r2, r3, r0, ror lr
   20f2c:	andeq	r2, r3, r8, ror lr
   20f30:	andeq	r2, r3, r8, ror #28
   20f34:	andeq	r2, r3, r8, asr #28
   20f38:	muleq	r3, r0, lr
   20f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f40:	sub	sp, sp, #20
   20f44:	mov	r5, r3
   20f48:	ldr	r8, [sp, #56]	; 0x38
   20f4c:	ldr	r4, [pc, #868]	; 212b8 <__assert_fail@plt+0xe614>
   20f50:	cmp	r8, #0
   20f54:	mov	sl, r0
   20f58:	ldrbne	r3, [r8]
   20f5c:	ldr	r0, [r4]
   20f60:	streq	r8, [sp, #12]
   20f64:	subne	r3, r3, #8
   20f68:	clzne	r3, r3
   20f6c:	lsrne	r3, r3, #5
   20f70:	strne	r3, [sp, #12]
   20f74:	cmp	r0, #0
   20f78:	mov	r7, r1
   20f7c:	mov	r6, r2
   20f80:	ldr	fp, [sp, #60]	; 0x3c
   20f84:	beq	21218 <__assert_fail@plt+0xe574>
   20f88:	bl	1277c <gpgrt_flockfile@plt>
   20f8c:	ldr	r3, [r4, #8]
   20f90:	cmp	r3, #0
   20f94:	cmpne	sl, #1
   20f98:	bne	21244 <__assert_fail@plt+0xe5a0>
   20f9c:	ldr	r9, [sp, #12]
   20fa0:	mov	r3, #0
   20fa4:	mov	r1, r9
   20fa8:	mov	r0, sl
   20fac:	str	r3, [r4, #8]
   20fb0:	bl	20c50 <__assert_fail@plt+0xdfac>
   20fb4:	cmp	r9, #0
   20fb8:	addne	r8, r8, #1
   20fbc:	cmp	r8, #0
   20fc0:	beq	21168 <__assert_fail@plt+0xe4c4>
   20fc4:	cmp	r5, #0
   20fc8:	ldr	r9, [r4]
   20fcc:	beq	20fe0 <__assert_fail@plt+0xe33c>
   20fd0:	mov	r1, r9
   20fd4:	mov	r0, r5
   20fd8:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   20fdc:	ldr	r9, [r4]
   20fe0:	cmp	r7, #0
   20fe4:	beq	21204 <__assert_fail@plt+0xe560>
   20fe8:	ldr	fp, [pc, #716]	; 212bc <__assert_fail@plt+0xe618>
   20fec:	mov	r5, r8
   20ff0:	b	21040 <__assert_fail@plt+0xe39c>
   20ff4:	cmp	r8, r5
   20ff8:	moveq	r2, #0
   20ffc:	beq	2101c <__assert_fail@plt+0xe378>
   21000:	ldr	r2, [r4, #16]
   21004:	ldr	r0, [r4, #4]
   21008:	orrs	r2, r2, r0
   2100c:	beq	2101c <__assert_fail@plt+0xe378>
   21010:	ldr	r0, [pc, #680]	; 212c0 <__assert_fail@plt+0xe61c>
   21014:	bl	128d8 <strlen@plt>
   21018:	add	r2, r0, #2
   2101c:	sub	r3, r7, r5
   21020:	add	r3, r3, #1
   21024:	mov	r0, r9
   21028:	stm	sp, {r3, r5}
   2102c:	ldr	r1, [pc, #656]	; 212c4 <__assert_fail@plt+0xe620>
   21030:	mov	r3, fp
   21034:	bl	128c0 <gpgrt_fprintf_unlocked@plt>
   21038:	ldr	r9, [r4]
   2103c:	add	r5, r7, #1
   21040:	mov	r1, #10
   21044:	mov	r0, r5
   21048:	bl	128fc <strchr@plt>
   2104c:	subs	r7, r0, #0
   21050:	bne	20ff4 <__assert_fail@plt+0xe350>
   21054:	mov	r1, r9
   21058:	mov	r0, r5
   2105c:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   21060:	ldrb	r3, [r8]
   21064:	cmp	r3, #0
   21068:	beq	21168 <__assert_fail@plt+0xe4c4>
   2106c:	mov	r0, r8
   21070:	bl	128d8 <strlen@plt>
   21074:	add	r0, r8, r0
   21078:	ldrb	r3, [r0, #-1]
   2107c:	cmp	r3, #10
   21080:	beq	21168 <__assert_fail@plt+0xe4c4>
   21084:	mov	r3, #1
   21088:	cmp	r6, #0
   2108c:	str	r3, [r4, #8]
   21090:	beq	21284 <__assert_fail@plt+0xe5e0>
   21094:	ldr	r1, [r4]
   21098:	mov	r0, #10
   2109c:	bl	1256c <_gpgrt_putc_overflow@plt>
   210a0:	mov	r3, #0
   210a4:	str	r3, [r4, #8]
   210a8:	ldr	r1, [sp, #12]
   210ac:	mov	r0, sl
   210b0:	bl	20c50 <__assert_fail@plt+0xdfac>
   210b4:	ldr	r1, [r4]
   210b8:	ldr	r0, [pc, #520]	; 212c8 <__assert_fail@plt+0xe624>
   210bc:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   210c0:	ldr	r9, [pc, #516]	; 212cc <__assert_fail@plt+0xe628>
   210c4:	ldr	r1, [r4]
   210c8:	ldr	fp, [pc, #504]	; 212c8 <__assert_fail@plt+0xe624>
   210cc:	ldr	r8, [pc, #508]	; 212d0 <__assert_fail@plt+0xe62c>
   210d0:	ldr	r7, [pc, #508]	; 212d4 <__assert_fail@plt+0xe630>
   210d4:	mov	r5, #1
   210d8:	str	r5, [r4, #8]
   210dc:	ldrb	r0, [r6], #1
   210e0:	cmp	r0, #0
   210e4:	beq	2113c <__assert_fail@plt+0xe498>
   210e8:	cmp	r0, #92	; 0x5c
   210ec:	str	r5, [r4, #8]
   210f0:	beq	2118c <__assert_fail@plt+0xe4e8>
   210f4:	cmp	r0, #13
   210f8:	beq	2119c <__assert_fail@plt+0xe4f8>
   210fc:	cmp	r0, #10
   21100:	beq	211ac <__assert_fail@plt+0xe508>
   21104:	ldrb	r3, [r1, #2]
   21108:	tst	r3, #1
   2110c:	beq	21180 <__assert_fail@plt+0xe4dc>
   21110:	ldr	r3, [r1, #16]
   21114:	ldr	r2, [r1, #8]
   21118:	cmp	r3, r2
   2111c:	bcs	21180 <__assert_fail@plt+0xe4dc>
   21120:	ldr	r2, [r1, #4]
   21124:	add	ip, r3, #1
   21128:	str	ip, [r1, #16]
   2112c:	strb	r0, [r2, r3]
   21130:	ldrb	r0, [r6], #1
   21134:	cmp	r0, #0
   21138:	bne	210e8 <__assert_fail@plt+0xe444>
   2113c:	ldr	r2, [r4, #8]
   21140:	cmp	r2, #0
   21144:	bne	211e8 <__assert_fail@plt+0xe544>
   21148:	cmp	sl, #5
   2114c:	beq	21274 <__assert_fail@plt+0xe5d0>
   21150:	cmp	sl, #6
   21154:	beq	21294 <__assert_fail@plt+0xe5f0>
   21158:	mov	r0, r1
   2115c:	add	sp, sp, #20
   21160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21164:	b	1244c <gpgrt_funlockfile@plt>
   21168:	cmp	r6, #0
   2116c:	beq	21254 <__assert_fail@plt+0xe5b0>
   21170:	ldr	r3, [r4, #8]
   21174:	cmp	r3, #0
   21178:	beq	210a8 <__assert_fail@plt+0xe404>
   2117c:	b	21094 <__assert_fail@plt+0xe3f0>
   21180:	bl	1256c <_gpgrt_putc_overflow@plt>
   21184:	ldr	r1, [r4]
   21188:	b	210dc <__assert_fail@plt+0xe438>
   2118c:	mov	r0, r7
   21190:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   21194:	ldr	r1, [r4]
   21198:	b	210dc <__assert_fail@plt+0xe438>
   2119c:	mov	r0, r8
   211a0:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   211a4:	ldr	r1, [r4]
   211a8:	b	210dc <__assert_fail@plt+0xe438>
   211ac:	mov	r0, r9
   211b0:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   211b4:	ldrb	r3, [r6]
   211b8:	cmp	r3, #0
   211bc:	streq	r3, [r4, #8]
   211c0:	ldreq	r1, [r4]
   211c4:	beq	210dc <__assert_fail@plt+0xe438>
   211c8:	ldr	r1, [sp, #12]
   211cc:	mov	r0, sl
   211d0:	bl	20c50 <__assert_fail@plt+0xdfac>
   211d4:	ldr	r1, [r4]
   211d8:	mov	r0, fp
   211dc:	bl	126e0 <gpgrt_fputs_unlocked@plt>
   211e0:	ldr	r1, [r4]
   211e4:	b	210dc <__assert_fail@plt+0xe438>
   211e8:	str	r0, [sp, #12]
   211ec:	mov	r0, #10
   211f0:	bl	1256c <_gpgrt_putc_overflow@plt>
   211f4:	ldr	r3, [sp, #12]
   211f8:	ldr	r1, [r4]
   211fc:	str	r3, [r4, #8]
   21200:	b	21148 <__assert_fail@plt+0xe4a4>
   21204:	mov	r2, fp
   21208:	mov	r0, r9
   2120c:	mov	r1, r8
   21210:	bl	124c4 <gpgrt_vfprintf_unlocked@plt>
   21214:	b	21060 <__assert_fail@plt+0xe3bc>
   21218:	ldr	r0, [pc, #184]	; 212d8 <__assert_fail@plt+0xe634>
   2121c:	mvn	r1, #0
   21220:	bl	20a20 <__assert_fail@plt+0xdd7c>
   21224:	ldr	r0, [r4]
   21228:	cmp	r0, #0
   2122c:	bne	20f88 <__assert_fail@plt+0xe2e4>
   21230:	ldr	r3, [pc, #164]	; 212dc <__assert_fail@plt+0xe638>
   21234:	ldr	r2, [pc, #164]	; 212e0 <__assert_fail@plt+0xe63c>
   21238:	ldr	r1, [pc, #164]	; 212e4 <__assert_fail@plt+0xe640>
   2123c:	ldr	r0, [pc, #164]	; 212e8 <__assert_fail@plt+0xe644>
   21240:	bl	12ca4 <__assert_fail@plt>
   21244:	ldr	r1, [r4]
   21248:	mov	r0, #10
   2124c:	bl	1256c <_gpgrt_putc_overflow@plt>
   21250:	b	20f9c <__assert_fail@plt+0xe2f8>
   21254:	cmp	sl, #5
   21258:	ldr	r1, [r4]
   2125c:	bne	21150 <__assert_fail@plt+0xe4ac>
   21260:	ldr	r3, [r4, #8]
   21264:	cmp	r3, #0
   21268:	beq	21274 <__assert_fail@plt+0xe5d0>
   2126c:	mov	r0, #10
   21270:	bl	1256c <_gpgrt_putc_overflow@plt>
   21274:	ldr	r0, [r4]
   21278:	bl	1244c <gpgrt_funlockfile@plt>
   2127c:	mov	r0, #2
   21280:	bl	128b4 <exit@plt>
   21284:	cmp	sl, #5
   21288:	ldr	r1, [r4]
   2128c:	bne	21150 <__assert_fail@plt+0xe4ac>
   21290:	b	2126c <__assert_fail@plt+0xe5c8>
   21294:	ldr	r3, [r4, #8]
   21298:	cmp	r3, #0
   2129c:	bne	212ac <__assert_fail@plt+0xe608>
   212a0:	ldr	r0, [r4]
   212a4:	bl	1244c <gpgrt_funlockfile@plt>
   212a8:	bl	12c38 <abort@plt>
   212ac:	mov	r0, #10
   212b0:	bl	1256c <_gpgrt_putc_overflow@plt>
   212b4:	b	212a0 <__assert_fail@plt+0xe5fc>
   212b8:	andeq	r6, r4, r4, lsr r2
   212bc:	andeq	r1, r3, r8, ror #15
   212c0:	andeq	r6, r4, r8, asr #4
   212c4:	ldrdeq	r2, [r3], -r0
   212c8:	ldrdeq	r2, [r3], -r8
   212cc:	andeq	r2, r3, r4, ror #29
   212d0:	andeq	r2, r3, r0, ror #29
   212d4:	ldrdeq	r2, [r3], -ip
   212d8:	andeq	r1, r3, ip, lsr #26
   212dc:	andeq	r2, r3, r4, lsl #28
   212e0:	strdeq	r0, [r0], -r1
   212e4:	andeq	r2, r3, ip, lsr #29
   212e8:	andeq	r2, r3, r4, asr #29
   212ec:	push	{r1, r2, r3}
   212f0:	mov	r3, #0
   212f4:	push	{r4, lr}
   212f8:	sub	sp, sp, #20
   212fc:	ldr	r4, [pc, #68]	; 21348 <__assert_fail@plt+0xe6a4>
   21300:	ldr	r2, [sp, #28]
   21304:	add	ip, sp, #32
   21308:	ldr	r1, [r4]
   2130c:	stm	sp, {r2, ip}
   21310:	str	r1, [sp, #12]
   21314:	mov	r2, r3
   21318:	mov	r1, #1
   2131c:	str	ip, [sp, #8]
   21320:	bl	20f3c <__assert_fail@plt+0xe298>
   21324:	ldr	r2, [sp, #12]
   21328:	ldr	r3, [r4]
   2132c:	cmp	r2, r3
   21330:	bne	21344 <__assert_fail@plt+0xe6a0>
   21334:	add	sp, sp, #20
   21338:	pop	{r4, lr}
   2133c:	add	sp, sp, #12
   21340:	bx	lr
   21344:	bl	1262c <__stack_chk_fail@plt>
   21348:	strdeq	r5, [r4], -r8
   2134c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21350:	mov	r4, r0
   21354:	ldr	r8, [pc, #1564]	; 21978 <__assert_fail@plt+0xecd4>
   21358:	ldr	r0, [r0, #8]
   2135c:	sub	sp, sp, #180	; 0xb4
   21360:	ldr	r3, [r8]
   21364:	cmp	r0, #0
   21368:	mov	r7, r1
   2136c:	mov	r9, r2
   21370:	str	r3, [sp, #172]	; 0xac
   21374:	ldr	r6, [r4]
   21378:	beq	21534 <__assert_fail@plt+0xe890>
   2137c:	cmn	r6, #1
   21380:	beq	21484 <__assert_fail@plt+0xe7e0>
   21384:	ldr	sl, [pc, #1520]	; 2197c <__assert_fail@plt+0xecd8>
   21388:	str	r6, [sl]
   2138c:	cmp	r9, #0
   21390:	beq	21468 <__assert_fail@plt+0xe7c4>
   21394:	mov	r5, r9
   21398:	b	213a8 <__assert_fail@plt+0xe704>
   2139c:	subs	r5, r5, r0
   213a0:	add	r7, r7, r0
   213a4:	beq	21468 <__assert_fail@plt+0xe7c4>
   213a8:	mov	r2, r5
   213ac:	mov	r1, r7
   213b0:	mov	r0, r6
   213b4:	bl	12a10 <write@plt>
   213b8:	cmp	r0, #0
   213bc:	bge	2139c <__assert_fail@plt+0xe6f8>
   213c0:	bl	12968 <__errno_location@plt>
   213c4:	ldr	r3, [r0]
   213c8:	cmp	r3, #4
   213cc:	beq	213a8 <__assert_fail@plt+0xe704>
   213d0:	ldr	r5, [pc, #1448]	; 21980 <__assert_fail@plt+0xecdc>
   213d4:	ldr	r3, [r5, #112]	; 0x70
   213d8:	cmp	r3, #0
   213dc:	bne	21440 <__assert_fail@plt+0xe79c>
   213e0:	ldr	r3, [r4]
   213e4:	cmn	r3, #1
   213e8:	beq	21468 <__assert_fail@plt+0xe7c4>
   213ec:	mov	r0, #2
   213f0:	bl	12890 <_gpgrt_get_std_stream@plt>
   213f4:	bl	12c50 <gpgrt_fileno@plt>
   213f8:	bl	12c08 <isatty@plt>
   213fc:	cmp	r0, #0
   21400:	beq	21440 <__assert_fail@plt+0xe79c>
   21404:	bl	12968 <__errno_location@plt>
   21408:	ldrb	r3, [r4, #16]
   2140c:	cmp	r3, #0
   21410:	mov	r5, r0
   21414:	mov	r0, #2
   21418:	beq	21644 <__assert_fail@plt+0xe9a0>
   2141c:	bl	12890 <_gpgrt_get_std_stream@plt>
   21420:	mov	r6, r0
   21424:	ldr	r0, [r5]
   21428:	bl	12818 <strerror@plt>
   2142c:	add	r2, r4, #16
   21430:	ldr	r1, [pc, #1356]	; 21984 <__assert_fail@plt+0xece0>
   21434:	mov	r3, r0
   21438:	mov	r0, r6
   2143c:	bl	12bc0 <gpgrt_fprintf@plt>
   21440:	ldr	r3, [r4, #12]
   21444:	cmp	r3, #0
   21448:	beq	21468 <__assert_fail@plt+0xe7c4>
   2144c:	ldr	r0, [r4]
   21450:	cmn	r0, #1
   21454:	beq	21468 <__assert_fail@plt+0xe7c4>
   21458:	bl	12c5c <close@plt>
   2145c:	mvn	r3, #0
   21460:	str	r3, [r4]
   21464:	str	r3, [sl]
   21468:	ldr	r2, [sp, #172]	; 0xac
   2146c:	ldr	r3, [r8]
   21470:	mov	r0, r9
   21474:	cmp	r2, r3
   21478:	bne	21958 <__assert_fail@plt+0xecb4>
   2147c:	add	sp, sp, #180	; 0xb4
   21480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21484:	mov	r3, #0
   21488:	add	r6, r4, #16
   2148c:	mov	r0, r6
   21490:	str	r3, [r4, #12]
   21494:	mov	r2, #6
   21498:	ldr	r1, [pc, #1256]	; 21988 <__assert_fail@plt+0xece4>
   2149c:	bl	12c2c <strncmp@plt>
   214a0:	cmp	r0, #0
   214a4:	bne	214b4 <__assert_fail@plt+0xe810>
   214a8:	ldrb	r3, [r4, #22]
   214ac:	cmp	r3, #0
   214b0:	bne	21548 <__assert_fail@plt+0xe8a4>
   214b4:	mov	r2, #9
   214b8:	ldr	r1, [pc, #1228]	; 2198c <__assert_fail@plt+0xece8>
   214bc:	mov	r0, r6
   214c0:	bl	12c2c <strncmp@plt>
   214c4:	mov	sl, #1
   214c8:	strh	sl, [sp, #60]	; 0x3c
   214cc:	cmp	r0, #0
   214d0:	addeq	r5, r4, #25
   214d4:	movne	r5, r6
   214d8:	ldrb	fp, [r5]
   214dc:	cmp	fp, #0
   214e0:	beq	21760 <__assert_fail@plt+0xeabc>
   214e4:	mov	r0, r5
   214e8:	bl	128d8 <strlen@plt>
   214ec:	cmp	r0, #106	; 0x6a
   214f0:	bls	216b0 <__assert_fail@plt+0xea0c>
   214f4:	ldr	r5, [pc, #1156]	; 21980 <__assert_fail@plt+0xecdc>
   214f8:	mvn	r3, #0
   214fc:	str	r3, [r4]
   21500:	ldr	r3, [r4, #4]
   21504:	ldr	r2, [r5, #112]	; 0x70
   21508:	cmp	r3, #0
   2150c:	bne	2180c <__assert_fail@plt+0xeb68>
   21510:	cmp	r2, #0
   21514:	beq	2181c <__assert_fail@plt+0xeb78>
   21518:	ldr	r6, [r4]
   2151c:	cmn	r6, #1
   21520:	beq	21860 <__assert_fail@plt+0xebbc>
   21524:	mov	r2, #0
   21528:	mov	r3, #1
   2152c:	str	r2, [r4, #4]
   21530:	str	r3, [r4, #12]
   21534:	ldr	sl, [pc, #1088]	; 2197c <__assert_fail@plt+0xecd8>
   21538:	cmn	r6, #1
   2153c:	str	r6, [sl]
   21540:	beq	213d0 <__assert_fail@plt+0xe72c>
   21544:	b	2138c <__assert_fail@plt+0xe6e8>
   21548:	add	r5, r4, #22
   2154c:	mov	r0, r5
   21550:	bl	128d8 <strlen@plt>
   21554:	add	r0, r0, #1
   21558:	bl	12458 <gcry_malloc@plt>
   2155c:	subs	sl, r0, #0
   21560:	beq	21800 <__assert_fail@plt+0xeb5c>
   21564:	ldrb	r3, [r4, #22]
   21568:	cmp	r3, #91	; 0x5b
   2156c:	beq	21670 <__assert_fail@plt+0xe9cc>
   21570:	mov	r1, r5
   21574:	bl	12764 <strcpy@plt>
   21578:	mov	r1, #58	; 0x3a
   2157c:	mov	r0, sl
   21580:	bl	128fc <strchr@plt>
   21584:	cmp	r0, #0
   21588:	beq	21698 <__assert_fail@plt+0xe9f4>
   2158c:	ldrb	r3, [r0, #1]
   21590:	add	ip, r0, #1
   21594:	sub	r3, r3, #48	; 0x30
   21598:	uxtb	r2, r3
   2159c:	cmp	r2, #9
   215a0:	bhi	21698 <__assert_fail@plt+0xe9f4>
   215a4:	ldr	r5, [pc, #996]	; 21990 <__assert_fail@plt+0xecec>
   215a8:	b	215bc <__assert_fail@plt+0xe918>
   215ac:	add	r3, r3, r3, lsl #2
   215b0:	add	r3, r2, r3, lsl #1
   215b4:	cmp	r3, r5
   215b8:	bhi	21698 <__assert_fail@plt+0xe9f4>
   215bc:	ldrb	r1, [ip, #1]!
   215c0:	sub	r2, r1, #48	; 0x30
   215c4:	uxtb	lr, r2
   215c8:	cmp	lr, #9
   215cc:	bls	215ac <__assert_fail@plt+0xe908>
   215d0:	adds	r2, r1, #0
   215d4:	movne	r2, #1
   215d8:	cmp	r3, #0
   215dc:	moveq	r2, #1
   215e0:	cmp	r2, #0
   215e4:	bne	21698 <__assert_fail@plt+0xe9f4>
   215e8:	rev16	r3, r3
   215ec:	mov	r1, #2
   215f0:	strh	r3, [sp, #18]
   215f4:	strb	r2, [r0]
   215f8:	str	r2, [sp, #20]
   215fc:	str	r2, [sp, #24]
   21600:	str	r2, [sp, #28]
   21604:	mov	r3, r1
   21608:	add	r2, sp, #20
   2160c:	add	r5, sp, #16
   21610:	mov	fp, #16
   21614:	strh	r1, [sp, #16]
   21618:	mov	r0, r3
   2161c:	mov	r1, sl
   21620:	str	r3, [sp, #12]
   21624:	bl	1259c <inet_pton@plt>
   21628:	ldr	r3, [sp, #12]
   2162c:	cmp	r0, #1
   21630:	beq	2195c <__assert_fail@plt+0xecb8>
   21634:	mov	r0, sl
   21638:	bl	125e4 <gcry_free@plt>
   2163c:	ldr	r5, [pc, #828]	; 21980 <__assert_fail@plt+0xecdc>
   21640:	b	214f8 <__assert_fail@plt+0xe854>
   21644:	bl	12890 <_gpgrt_get_std_stream@plt>
   21648:	ldr	r7, [r4]
   2164c:	mov	r6, r0
   21650:	ldr	r0, [r5]
   21654:	bl	12818 <strerror@plt>
   21658:	mov	r2, r7
   2165c:	ldr	r1, [pc, #816]	; 21994 <__assert_fail@plt+0xecf0>
   21660:	mov	r3, r0
   21664:	mov	r0, r6
   21668:	bl	12bc0 <gpgrt_fprintf@plt>
   2166c:	b	21440 <__assert_fail@plt+0xe79c>
   21670:	add	r1, r4, #23
   21674:	bl	12764 <strcpy@plt>
   21678:	mov	r1, #93	; 0x5d
   2167c:	mov	r0, sl
   21680:	bl	128fc <strchr@plt>
   21684:	cmp	r0, #0
   21688:	beq	21698 <__assert_fail@plt+0xe9f4>
   2168c:	ldrb	r3, [r0, #1]
   21690:	cmp	r3, #58	; 0x3a
   21694:	beq	2186c <__assert_fail@plt+0xebc8>
   21698:	mov	r0, #22
   2169c:	bl	12b0c <gpg_err_set_errno@plt>
   216a0:	mov	r0, sl
   216a4:	bl	125e4 <gcry_free@plt>
   216a8:	ldr	r5, [pc, #720]	; 21980 <__assert_fail@plt+0xecdc>
   216ac:	b	214f8 <__assert_fail@plt+0xe854>
   216b0:	mov	r1, r5
   216b4:	mov	r2, #107	; 0x6b
   216b8:	add	r0, sp, #62	; 0x3e
   216bc:	bl	129c8 <strncpy@plt>
   216c0:	mov	r3, #0
   216c4:	add	r0, sp, #62	; 0x3e
   216c8:	strb	r3, [sp, #169]	; 0xa9
   216cc:	bl	128d8 <strlen@plt>
   216d0:	mov	r3, sl
   216d4:	ldr	sl, [pc, #700]	; 21998 <__assert_fail@plt+0xecf4>
   216d8:	add	r5, sp, #60	; 0x3c
   216dc:	add	fp, r0, #2
   216e0:	mov	r0, r3
   216e4:	mov	r2, #0
   216e8:	mov	r1, #1
   216ec:	bl	12ba8 <socket@plt>
   216f0:	cmn	r0, #1
   216f4:	str	r0, [r4]
   216f8:	ldreq	r5, [pc, #640]	; 21980 <__assert_fail@plt+0xecdc>
   216fc:	beq	21500 <__assert_fail@plt+0xe85c>
   21700:	mov	r2, fp
   21704:	mov	r1, r5
   21708:	bl	12c74 <connect@plt>
   2170c:	cmn	r0, #1
   21710:	beq	217d4 <__assert_fail@plt+0xeb30>
   21714:	ldr	r6, [r4]
   21718:	cmn	r6, #1
   2171c:	bne	21524 <__assert_fail@plt+0xe880>
   21720:	ldr	r5, [pc, #600]	; 21980 <__assert_fail@plt+0xecdc>
   21724:	ldr	r3, [r5, #112]	; 0x70
   21728:	cmp	r3, #0
   2172c:	bne	21814 <__assert_fail@plt+0xeb70>
   21730:	ldr	r3, [r4, #4]
   21734:	cmp	r3, #0
   21738:	moveq	r3, #1
   2173c:	streq	r3, [r4, #4]
   21740:	ldr	r3, [r5, #112]	; 0x70
   21744:	ldr	sl, [pc, #560]	; 2197c <__assert_fail@plt+0xecd8>
   21748:	cmp	r3, #0
   2174c:	mvn	r3, #0
   21750:	str	r3, [sl]
   21754:	str	r3, [r4]
   21758:	bne	21440 <__assert_fail@plt+0xe79c>
   2175c:	b	21468 <__assert_fail@plt+0xe7c4>
   21760:	ldr	r5, [pc, #536]	; 21980 <__assert_fail@plt+0xecdc>
   21764:	ldr	r3, [r5, #108]	; 0x6c
   21768:	blx	r3
   2176c:	subs	r1, r0, #0
   21770:	ldrb	r3, [r1]
   21774:	beq	21974 <__assert_fail@plt+0xecd0>
   21778:	cmp	r3, #0
   2177c:	str	r1, [sp, #12]
   21780:	beq	214f8 <__assert_fail@plt+0xe854>
   21784:	bl	128d8 <strlen@plt>
   21788:	ldr	r1, [sp, #12]
   2178c:	add	r0, r0, #7
   21790:	cmp	r0, #106	; 0x6a
   21794:	bhi	214f8 <__assert_fail@plt+0xe854>
   21798:	mov	r2, #107	; 0x6b
   2179c:	add	r0, sp, #62	; 0x3e
   217a0:	bl	129c8 <strncpy@plt>
   217a4:	mov	r2, #108	; 0x6c
   217a8:	ldr	r1, [pc, #492]	; 2199c <__assert_fail@plt+0xecf8>
   217ac:	add	r0, sp, #62	; 0x3e
   217b0:	bl	12974 <__strcat_chk@plt>
   217b4:	add	r0, sp, #62	; 0x3e
   217b8:	strb	fp, [sp, #169]	; 0xa9
   217bc:	bl	128d8 <strlen@plt>
   217c0:	add	r5, sp, #60	; 0x3c
   217c4:	mov	r3, sl
   217c8:	add	sl, sp, #62	; 0x3e
   217cc:	add	fp, r0, #2
   217d0:	b	216e0 <__assert_fail@plt+0xea3c>
   217d4:	ldr	r5, [pc, #420]	; 21980 <__assert_fail@plt+0xecdc>
   217d8:	ldr	r2, [r4, #4]
   217dc:	ldr	r3, [r5, #112]	; 0x70
   217e0:	orrs	r3, r2, r3
   217e4:	beq	2190c <__assert_fail@plt+0xec68>
   217e8:	ldr	r0, [r4]
   217ec:	bl	12c5c <close@plt>
   217f0:	mvn	r3, #0
   217f4:	str	r3, [r4]
   217f8:	ldr	r3, [r5, #112]	; 0x70
   217fc:	b	21728 <__assert_fail@plt+0xea84>
   21800:	bl	125e4 <gcry_free@plt>
   21804:	ldr	r5, [pc, #372]	; 21980 <__assert_fail@plt+0xecdc>
   21808:	b	214f8 <__assert_fail@plt+0xe854>
   2180c:	cmp	r2, #0
   21810:	beq	21740 <__assert_fail@plt+0xea9c>
   21814:	ldr	r6, [r4]
   21818:	b	21534 <__assert_fail@plt+0xe890>
   2181c:	mov	r0, #2
   21820:	bl	12890 <_gpgrt_get_std_stream@plt>
   21824:	bl	12c50 <gpgrt_fileno@plt>
   21828:	bl	12c08 <isatty@plt>
   2182c:	cmp	r0, #0
   21830:	beq	21714 <__assert_fail@plt+0xea70>
   21834:	mov	r0, #2
   21838:	bl	12890 <_gpgrt_get_std_stream@plt>
   2183c:	mov	r5, r0
   21840:	bl	12968 <__errno_location@plt>
   21844:	ldr	r0, [r0]
   21848:	bl	12818 <strerror@plt>
   2184c:	ldr	r1, [pc, #332]	; 219a0 <__assert_fail@plt+0xecfc>
   21850:	mov	r2, r0
   21854:	mov	r0, r5
   21858:	bl	12bc0 <gpgrt_fprintf@plt>
   2185c:	b	21714 <__assert_fail@plt+0xea70>
   21860:	ldr	sl, [pc, #276]	; 2197c <__assert_fail@plt+0xecd8>
   21864:	str	r6, [sl]
   21868:	b	213d4 <__assert_fail@plt+0xe730>
   2186c:	ldrb	r3, [r0, #2]
   21870:	add	lr, r0, #2
   21874:	sub	r3, r3, #48	; 0x30
   21878:	uxtb	r2, r3
   2187c:	cmp	r2, #9
   21880:	bhi	21698 <__assert_fail@plt+0xe9f4>
   21884:	ldr	r5, [pc, #260]	; 21990 <__assert_fail@plt+0xecec>
   21888:	b	2189c <__assert_fail@plt+0xebf8>
   2188c:	add	r3, r3, r3, lsl #2
   21890:	add	r3, r2, r3, lsl #1
   21894:	cmp	r3, r5
   21898:	bhi	21698 <__assert_fail@plt+0xe9f4>
   2189c:	ldrb	r1, [lr, #1]!
   218a0:	sub	r2, r1, #48	; 0x30
   218a4:	uxtb	ip, r2
   218a8:	cmp	ip, #9
   218ac:	bls	2188c <__assert_fail@plt+0xebe8>
   218b0:	cmp	r1, #0
   218b4:	clz	r2, r3
   218b8:	lsr	r2, r2, #5
   218bc:	moveq	r1, r2
   218c0:	movne	r1, #1
   218c4:	cmp	r1, #0
   218c8:	bne	21698 <__assert_fail@plt+0xe9f4>
   218cc:	mov	r2, #10
   218d0:	rev16	r3, r3
   218d4:	strh	r3, [sp, #34]	; 0x22
   218d8:	strh	r2, [sp, #32]
   218dc:	mov	r3, r2
   218e0:	strb	r1, [r0]
   218e4:	str	r1, [sp, #36]	; 0x24
   218e8:	str	r1, [sp, #40]	; 0x28
   218ec:	str	r1, [sp, #44]	; 0x2c
   218f0:	str	r1, [sp, #48]	; 0x30
   218f4:	str	r1, [sp, #52]	; 0x34
   218f8:	str	r1, [sp, #56]	; 0x38
   218fc:	add	r5, sp, #32
   21900:	add	r2, sp, #40	; 0x28
   21904:	mov	fp, #28
   21908:	b	21618 <__assert_fail@plt+0xe974>
   2190c:	mov	r0, #2
   21910:	bl	12890 <_gpgrt_get_std_stream@plt>
   21914:	bl	12c50 <gpgrt_fileno@plt>
   21918:	bl	12c08 <isatty@plt>
   2191c:	cmp	r0, #0
   21920:	beq	217e8 <__assert_fail@plt+0xeb44>
   21924:	mov	r0, #2
   21928:	bl	12890 <_gpgrt_get_std_stream@plt>
   2192c:	mov	fp, r0
   21930:	bl	12968 <__errno_location@plt>
   21934:	ldr	r0, [r0]
   21938:	bl	12818 <strerror@plt>
   2193c:	mov	r3, sl
   21940:	mov	r2, r6
   21944:	ldr	r1, [pc, #88]	; 219a4 <__assert_fail@plt+0xed00>
   21948:	str	r0, [sp]
   2194c:	mov	r0, fp
   21950:	bl	12bc0 <gpgrt_fprintf@plt>
   21954:	b	217e8 <__assert_fail@plt+0xeb44>
   21958:	bl	1262c <__stack_chk_fail@plt>
   2195c:	mov	r0, sl
   21960:	str	r3, [sp, #12]
   21964:	ldr	sl, [pc, #44]	; 21998 <__assert_fail@plt+0xecf4>
   21968:	bl	125e4 <gcry_free@plt>
   2196c:	ldr	r3, [sp, #12]
   21970:	b	216e0 <__assert_fail@plt+0xea3c>
   21974:	udf	#0
   21978:	strdeq	r5, [r4], -r8
   2197c:	strdeq	r6, [r4], -r0
   21980:	andeq	r6, r4, r4, lsr r2
   21984:	andeq	r2, r3, ip, lsr pc
   21988:	andeq	r2, r3, ip, lsl lr
   2198c:	andeq	r2, r3, r4, lsr #28
   21990:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   21994:	andeq	r2, r3, r8, asr pc
   21998:	andeq	r1, r3, r8, ror #15
   2199c:	andeq	r2, r3, r8, ror #29
   219a0:	strdeq	r2, [r3], -r0
   219a4:	andeq	r2, r3, ip, lsl pc
   219a8:	ldr	r3, [pc, #16]	; 219c0 <__assert_fail@plt+0xed1c>
   219ac:	cmp	r0, #0
   219b0:	movne	r2, #0
   219b4:	ldr	r0, [r3, #116]	; 0x74
   219b8:	strne	r2, [r3, #116]	; 0x74
   219bc:	bx	lr
   219c0:	andeq	r6, r4, r4, lsr r2
   219c4:	ldr	r2, [pc, #12]	; 219d8 <__assert_fail@plt+0xed34>
   219c8:	ldr	r3, [r2, #116]	; 0x74
   219cc:	add	r3, r3, #1
   219d0:	str	r3, [r2, #116]	; 0x74
   219d4:	bx	lr
   219d8:	andeq	r6, r4, r4, lsr r2
   219dc:	ldr	r3, [pc, #12]	; 219f0 <__assert_fail@plt+0xed4c>
   219e0:	cmp	r0, #0
   219e4:	mvn	r1, #0
   219e8:	moveq	r0, r3
   219ec:	b	20a20 <__assert_fail@plt+0xdd7c>
   219f0:	andeq	r1, r3, ip, lsr #26
   219f4:	ldr	r3, [pc, #4]	; 21a00 <__assert_fail@plt+0xed5c>
   219f8:	str	r0, [r3, #108]	; 0x6c
   219fc:	bx	lr
   21a00:	andeq	r6, r4, r4, lsr r2
   21a04:	ldr	r3, [pc, #4]	; 21a10 <__assert_fail@plt+0xed6c>
   21a08:	str	r0, [r3, #104]	; 0x68
   21a0c:	bx	lr
   21a10:	andeq	r6, r4, r4, lsr r2
   21a14:	cmp	r0, #0
   21a18:	push	{r4, r5, r6, lr}
   21a1c:	mov	r4, r1
   21a20:	ldr	r5, [pc, #60]	; 21a64 <__assert_fail@plt+0xedc0>
   21a24:	beq	21a40 <__assert_fail@plt+0xed9c>
   21a28:	mov	r1, r0
   21a2c:	mov	r2, #79	; 0x4f
   21a30:	add	r0, r5, #20
   21a34:	bl	129c8 <strncpy@plt>
   21a38:	mov	r3, #0
   21a3c:	strb	r3, [r5, #99]	; 0x63
   21a40:	and	r1, r4, #1
   21a44:	and	r2, r4, #2
   21a48:	and	r3, r4, #4
   21a4c:	and	r4, r4, #256	; 0x100
   21a50:	str	r1, [r5, #16]
   21a54:	str	r2, [r5, #12]
   21a58:	str	r3, [r5, #100]	; 0x64
   21a5c:	str	r4, [r5, #112]	; 0x70
   21a60:	pop	{r4, r5, r6, pc}
   21a64:	andeq	r6, r4, r4, lsr r2
   21a68:	cmp	r0, #0
   21a6c:	beq	21abc <__assert_fail@plt+0xee18>
   21a70:	ldr	r2, [pc, #76]	; 21ac4 <__assert_fail@plt+0xee20>
   21a74:	ldr	r3, [r2, #16]
   21a78:	ldr	r1, [r2, #12]
   21a7c:	adds	r3, r3, #0
   21a80:	movne	r3, #1
   21a84:	cmp	r1, #0
   21a88:	str	r3, [r0]
   21a8c:	orrne	r3, r3, #2
   21a90:	strne	r3, [r0]
   21a94:	ldr	r3, [r2, #100]	; 0x64
   21a98:	cmp	r3, #0
   21a9c:	ldrne	r3, [r0]
   21aa0:	orrne	r3, r3, #4
   21aa4:	strne	r3, [r0]
   21aa8:	ldr	r3, [r2, #112]	; 0x70
   21aac:	cmp	r3, #0
   21ab0:	ldrne	r3, [r0]
   21ab4:	orrne	r3, r3, #256	; 0x100
   21ab8:	strne	r3, [r0]
   21abc:	ldr	r0, [pc, #4]	; 21ac8 <__assert_fail@plt+0xee24>
   21ac0:	bx	lr
   21ac4:	andeq	r6, r4, r4, lsr r2
   21ac8:	andeq	r6, r4, r8, asr #4
   21acc:	ldr	r3, [pc, #88]	; 21b2c <__assert_fail@plt+0xee88>
   21ad0:	push	{r4, lr}
   21ad4:	mov	r4, r0
   21ad8:	ldr	r0, [r3]
   21adc:	cmp	r0, #0
   21ae0:	beq	21b04 <__assert_fail@plt+0xee60>
   21ae4:	bl	12c50 <gpgrt_fileno@plt>
   21ae8:	cmn	r0, #1
   21aec:	sub	r3, r0, r4
   21af0:	clz	r3, r3
   21af4:	lsr	r3, r3, #5
   21af8:	moveq	r3, #0
   21afc:	cmp	r3, #0
   21b00:	bne	21b24 <__assert_fail@plt+0xee80>
   21b04:	ldr	r3, [pc, #36]	; 21b30 <__assert_fail@plt+0xee8c>
   21b08:	ldr	r3, [r3]
   21b0c:	cmn	r3, #1
   21b10:	sub	r0, r3, r4
   21b14:	clz	r0, r0
   21b18:	lsr	r0, r0, #5
   21b1c:	moveq	r0, #0
   21b20:	pop	{r4, pc}
   21b24:	mov	r0, #1
   21b28:	pop	{r4, pc}
   21b2c:	andeq	r6, r4, r4, lsr r2
   21b30:	strdeq	r6, [r4], -r0
   21b34:	ldr	r3, [pc, #20]	; 21b50 <__assert_fail@plt+0xeeac>
   21b38:	ldr	r0, [r3]
   21b3c:	cmp	r0, #0
   21b40:	beq	21b48 <__assert_fail@plt+0xeea4>
   21b44:	b	12c50 <gpgrt_fileno@plt>
   21b48:	mvn	r0, #0
   21b4c:	bx	lr
   21b50:	andeq	r6, r4, r4, lsr r2
   21b54:	push	{r4, lr}
   21b58:	ldr	r4, [pc, #52]	; 21b94 <__assert_fail@plt+0xeef0>
   21b5c:	ldr	r0, [r4]
   21b60:	cmp	r0, #0
   21b64:	popne	{r4, pc}
   21b68:	ldr	r0, [pc, #40]	; 21b98 <__assert_fail@plt+0xeef4>
   21b6c:	mvn	r1, #0
   21b70:	bl	20a20 <__assert_fail@plt+0xdd7c>
   21b74:	ldr	r0, [r4]
   21b78:	cmp	r0, #0
   21b7c:	popne	{r4, pc}
   21b80:	ldr	r3, [pc, #20]	; 21b9c <__assert_fail@plt+0xeef8>
   21b84:	mov	r2, #672	; 0x2a0
   21b88:	ldr	r1, [pc, #16]	; 21ba0 <__assert_fail@plt+0xeefc>
   21b8c:	ldr	r0, [pc, #16]	; 21ba4 <__assert_fail@plt+0xef00>
   21b90:	bl	12ca4 <__assert_fail@plt>
   21b94:	andeq	r6, r4, r4, lsr r2
   21b98:	andeq	r1, r3, ip, lsr #26
   21b9c:	andeq	r2, r3, ip, lsl #28
   21ba0:	andeq	r2, r3, ip, lsr #29
   21ba4:	andeq	r2, r3, r4, asr #29
   21ba8:	push	{r1, r2, r3}
   21bac:	mov	r3, #0
   21bb0:	push	{r4, lr}
   21bb4:	sub	sp, sp, #20
   21bb8:	ldr	r4, [pc, #68]	; 21c04 <__assert_fail@plt+0xef60>
   21bbc:	ldr	r2, [sp, #28]
   21bc0:	add	ip, sp, #32
   21bc4:	ldr	r1, [r4]
   21bc8:	stm	sp, {r2, ip}
   21bcc:	str	r1, [sp, #12]
   21bd0:	mov	r2, r3
   21bd4:	mov	r1, r3
   21bd8:	str	ip, [sp, #8]
   21bdc:	bl	20f3c <__assert_fail@plt+0xe298>
   21be0:	ldr	r2, [sp, #12]
   21be4:	ldr	r3, [r4]
   21be8:	cmp	r2, r3
   21bec:	bne	21c00 <__assert_fail@plt+0xef5c>
   21bf0:	add	sp, sp, #20
   21bf4:	pop	{r4, lr}
   21bf8:	add	sp, sp, #12
   21bfc:	bx	lr
   21c00:	bl	1262c <__stack_chk_fail@plt>
   21c04:	strdeq	r5, [r4], -r8
   21c08:	push	{lr}		; (str lr, [sp, #-4]!)
   21c0c:	sub	sp, sp, #12
   21c10:	mov	r3, #0
   21c14:	stm	sp, {r1, r2}
   21c18:	mov	r2, r3
   21c1c:	mov	r1, r3
   21c20:	bl	20f3c <__assert_fail@plt+0xe298>
   21c24:	add	sp, sp, #12
   21c28:	pop	{pc}		; (ldr pc, [sp], #4)
   21c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   21c30:	sub	sp, sp, #12
   21c34:	str	r2, [sp]
   21c38:	mov	r2, #0
   21c3c:	str	r3, [sp, #4]
   21c40:	mov	r3, r1
   21c44:	mov	r1, r2
   21c48:	bl	20f3c <__assert_fail@plt+0xe298>
   21c4c:	add	sp, sp, #12
   21c50:	pop	{pc}		; (ldr pc, [sp], #4)
   21c54:	b	212ec <__assert_fail@plt+0xe648>
   21c58:	push	{r0, r1, r2, r3}
   21c5c:	mov	r3, #0
   21c60:	push	{r4, lr}
   21c64:	sub	sp, sp, #16
   21c68:	ldr	r4, [pc, #72]	; 21cb8 <__assert_fail@plt+0xf014>
   21c6c:	ldr	r2, [sp, #24]
   21c70:	add	ip, sp, #28
   21c74:	ldr	r0, [r4]
   21c78:	stm	sp, {r2, ip}
   21c7c:	mov	r1, r3
   21c80:	mov	r2, r3
   21c84:	str	r0, [sp, #12]
   21c88:	mov	r0, #2
   21c8c:	str	ip, [sp, #8]
   21c90:	bl	20f3c <__assert_fail@plt+0xe298>
   21c94:	ldr	r2, [sp, #12]
   21c98:	ldr	r3, [r4]
   21c9c:	cmp	r2, r3
   21ca0:	bne	21cb4 <__assert_fail@plt+0xf010>
   21ca4:	add	sp, sp, #16
   21ca8:	pop	{r4, lr}
   21cac:	add	sp, sp, #16
   21cb0:	bx	lr
   21cb4:	bl	1262c <__stack_chk_fail@plt>
   21cb8:	strdeq	r5, [r4], -r8
   21cbc:	push	{r0, r1, r2, r3}
   21cc0:	mov	r3, #0
   21cc4:	push	{r4, lr}
   21cc8:	sub	sp, sp, #16
   21ccc:	ldr	r4, [pc, #96]	; 21d34 <__assert_fail@plt+0xf090>
   21cd0:	ldr	r2, [sp, #24]
   21cd4:	add	ip, sp, #28
   21cd8:	ldr	r0, [r4]
   21cdc:	mov	r1, r3
   21ce0:	stm	sp, {r2, ip}
   21ce4:	str	r0, [sp, #12]
   21ce8:	mov	r2, r3
   21cec:	mov	r0, #4
   21cf0:	str	ip, [sp, #8]
   21cf4:	bl	20f3c <__assert_fail@plt+0xe298>
   21cf8:	ldr	r2, [pc, #56]	; 21d38 <__assert_fail@plt+0xf094>
   21cfc:	ldr	r1, [pc, #56]	; 21d3c <__assert_fail@plt+0xf098>
   21d00:	ldr	r3, [r2, #116]	; 0x74
   21d04:	cmp	r3, r1
   21d08:	addle	r3, r3, #1
   21d0c:	strle	r3, [r2, #116]	; 0x74
   21d10:	ldr	r2, [sp, #12]
   21d14:	ldr	r3, [r4]
   21d18:	cmp	r2, r3
   21d1c:	bne	21d30 <__assert_fail@plt+0xf08c>
   21d20:	add	sp, sp, #16
   21d24:	pop	{r4, lr}
   21d28:	add	sp, sp, #16
   21d2c:	bx	lr
   21d30:	bl	1262c <__stack_chk_fail@plt>
   21d34:	strdeq	r5, [r4], -r8
   21d38:	andeq	r6, r4, r4, lsr r2
   21d3c:	andeq	r7, r0, pc, lsr #10
   21d40:	push	{r0, r1, r2, r3}
   21d44:	mov	r0, #5
   21d48:	push	{lr}		; (str lr, [sp, #-4]!)
   21d4c:	sub	sp, sp, #20
   21d50:	ldr	r3, [pc, #40]	; 21d80 <__assert_fail@plt+0xf0dc>
   21d54:	ldr	r2, [sp, #24]
   21d58:	add	ip, sp, #28
   21d5c:	ldr	lr, [r3]
   21d60:	mov	r3, #0
   21d64:	stm	sp, {r2, ip}
   21d68:	mov	r1, r3
   21d6c:	mov	r2, r3
   21d70:	str	lr, [sp, #12]
   21d74:	str	ip, [sp, #8]
   21d78:	bl	20f3c <__assert_fail@plt+0xe298>
   21d7c:	bl	12c38 <abort@plt>
   21d80:	strdeq	r5, [r4], -r8
   21d84:	push	{r4, lr}
   21d88:	mov	r4, r0
   21d8c:	bl	2315c <__assert_fail@plt+0x104b8>
   21d90:	cmp	r0, #0
   21d94:	beq	21da8 <__assert_fail@plt+0xf104>
   21d98:	mov	r1, r4
   21d9c:	mov	r0, #0
   21da0:	pop	{r4, lr}
   21da4:	b	20a20 <__assert_fail@plt+0xdd7c>
   21da8:	bl	12968 <__errno_location@plt>
   21dac:	ldr	r0, [r0]
   21db0:	bl	12818 <strerror@plt>
   21db4:	mov	r1, r0
   21db8:	ldr	r0, [pc]	; 21dc0 <__assert_fail@plt+0xf11c>
   21dbc:	bl	21d40 <__assert_fail@plt+0xf09c>
   21dc0:	andeq	r2, r3, r4, lsl #31
   21dc4:	push	{r0, r1, r2, r3}
   21dc8:	mov	r0, #6
   21dcc:	push	{lr}		; (str lr, [sp, #-4]!)
   21dd0:	sub	sp, sp, #20
   21dd4:	ldr	r3, [pc, #40]	; 21e04 <__assert_fail@plt+0xf160>
   21dd8:	ldr	r2, [sp, #24]
   21ddc:	add	ip, sp, #28
   21de0:	ldr	lr, [r3]
   21de4:	mov	r3, #0
   21de8:	stm	sp, {r2, ip}
   21dec:	mov	r1, r3
   21df0:	mov	r2, r3
   21df4:	str	lr, [sp, #12]
   21df8:	str	ip, [sp, #8]
   21dfc:	bl	20f3c <__assert_fail@plt+0xe298>
   21e00:	bl	12c38 <abort@plt>
   21e04:	strdeq	r5, [r4], -r8
   21e08:	push	{r0, r1, r2, r3}
   21e0c:	mov	r3, #0
   21e10:	push	{r4, lr}
   21e14:	sub	sp, sp, #16
   21e18:	ldr	r4, [pc, #72]	; 21e68 <__assert_fail@plt+0xf1c4>
   21e1c:	ldr	r2, [sp, #24]
   21e20:	add	ip, sp, #28
   21e24:	ldr	r0, [r4]
   21e28:	stm	sp, {r2, ip}
   21e2c:	mov	r1, r3
   21e30:	mov	r2, r3
   21e34:	str	r0, [sp, #12]
   21e38:	mov	r0, #7
   21e3c:	str	ip, [sp, #8]
   21e40:	bl	20f3c <__assert_fail@plt+0xe298>
   21e44:	ldr	r2, [sp, #12]
   21e48:	ldr	r3, [r4]
   21e4c:	cmp	r2, r3
   21e50:	bne	21e64 <__assert_fail@plt+0xf1c0>
   21e54:	add	sp, sp, #16
   21e58:	pop	{r4, lr}
   21e5c:	add	sp, sp, #16
   21e60:	bx	lr
   21e64:	bl	1262c <__stack_chk_fail@plt>
   21e68:	strdeq	r5, [r4], -r8
   21e6c:	push	{r1, r2, r3}
   21e70:	mov	r3, #0
   21e74:	push	{r4, lr}
   21e78:	sub	sp, sp, #20
   21e7c:	ldr	r4, [pc, #72]	; 21ecc <__assert_fail@plt+0xf228>
   21e80:	ldr	r1, [sp, #28]
   21e84:	add	ip, sp, #32
   21e88:	ldr	lr, [r4]
   21e8c:	mov	r2, r0
   21e90:	stm	sp, {r1, ip}
   21e94:	mov	r0, #7
   21e98:	mov	r1, r3
   21e9c:	str	lr, [sp, #12]
   21ea0:	str	ip, [sp, #8]
   21ea4:	bl	20f3c <__assert_fail@plt+0xe298>
   21ea8:	ldr	r2, [sp, #12]
   21eac:	ldr	r3, [r4]
   21eb0:	cmp	r2, r3
   21eb4:	bne	21ec8 <__assert_fail@plt+0xf224>
   21eb8:	add	sp, sp, #20
   21ebc:	pop	{r4, lr}
   21ec0:	add	sp, sp, #12
   21ec4:	bx	lr
   21ec8:	bl	1262c <__stack_chk_fail@plt>
   21ecc:	strdeq	r5, [r4], -r8
   21ed0:	push	{r0, r1, r2, r3}
   21ed4:	mov	r3, #0
   21ed8:	push	{r4, lr}
   21edc:	sub	sp, sp, #16
   21ee0:	ldr	r4, [pc, #80]	; 21f38 <__assert_fail@plt+0xf294>
   21ee4:	ldr	r0, [sp, #24]
   21ee8:	add	ip, sp, #28
   21eec:	ldr	r1, [r4]
   21ef0:	str	r0, [sp]
   21ef4:	subs	r0, r0, r3
   21ef8:	mov	r2, r3
   21efc:	movne	r0, #1
   21f00:	str	r1, [sp, #12]
   21f04:	str	ip, [sp, #4]
   21f08:	mov	r1, r3
   21f0c:	str	ip, [sp, #8]
   21f10:	bl	20f3c <__assert_fail@plt+0xe298>
   21f14:	ldr	r2, [sp, #12]
   21f18:	ldr	r3, [r4]
   21f1c:	cmp	r2, r3
   21f20:	bne	21f34 <__assert_fail@plt+0xf290>
   21f24:	add	sp, sp, #16
   21f28:	pop	{r4, lr}
   21f2c:	add	sp, sp, #16
   21f30:	bx	lr
   21f34:	bl	1262c <__stack_chk_fail@plt>
   21f38:	strdeq	r5, [r4], -r8
   21f3c:	mov	r1, #0
   21f40:	mov	r0, #1
   21f44:	b	212ec <__assert_fail@plt+0xe648>
   21f48:	push	{r4, r5, r6, r7, r8, lr}
   21f4c:	subs	r7, r0, #0
   21f50:	mov	r4, r1
   21f54:	mov	r5, r2
   21f58:	beq	21fd8 <__assert_fail@plt+0xf334>
   21f5c:	ldrb	r3, [r7]
   21f60:	cmp	r3, #0
   21f64:	bne	21fc0 <__assert_fail@plt+0xf31c>
   21f68:	cmp	r5, #0
   21f6c:	bne	21f7c <__assert_fail@plt+0xf2d8>
   21f70:	ldr	r0, [pc, #132]	; 21ffc <__assert_fail@plt+0xf358>
   21f74:	pop	{r4, r5, r6, r7, r8, lr}
   21f78:	b	21ed0 <__assert_fail@plt+0xf22c>
   21f7c:	ldr	r0, [pc, #124]	; 22000 <__assert_fail@plt+0xf35c>
   21f80:	ldrb	r1, [r4], #1
   21f84:	bl	21ed0 <__assert_fail@plt+0xf22c>
   21f88:	cmp	r5, #1
   21f8c:	sub	r5, r5, #2
   21f90:	beq	21f70 <__assert_fail@plt+0xf2cc>
   21f94:	add	r5, r5, #1
   21f98:	ldr	r6, [pc, #100]	; 22004 <__assert_fail@plt+0xf360>
   21f9c:	add	r5, r4, r5
   21fa0:	ldrb	r1, [r4], #1
   21fa4:	mov	r0, r6
   21fa8:	bl	21ed0 <__assert_fail@plt+0xf22c>
   21fac:	cmp	r4, r5
   21fb0:	bne	21fa0 <__assert_fail@plt+0xf2fc>
   21fb4:	cmp	r7, #0
   21fb8:	popeq	{r4, r5, r6, r7, r8, pc}
   21fbc:	b	21f70 <__assert_fail@plt+0xf2cc>
   21fc0:	mov	r1, r7
   21fc4:	ldr	r0, [pc, #60]	; 22008 <__assert_fail@plt+0xf364>
   21fc8:	bl	21e08 <__assert_fail@plt+0xf164>
   21fcc:	cmp	r5, #0
   21fd0:	beq	21f70 <__assert_fail@plt+0xf2cc>
   21fd4:	b	21f7c <__assert_fail@plt+0xf2d8>
   21fd8:	cmp	r2, #0
   21fdc:	popeq	{r4, r5, r6, r7, r8, pc}
   21fe0:	ldr	r0, [pc, #24]	; 22000 <__assert_fail@plt+0xf35c>
   21fe4:	ldrb	r1, [r4], #1
   21fe8:	bl	21ed0 <__assert_fail@plt+0xf22c>
   21fec:	cmp	r5, #1
   21ff0:	sub	r5, r5, #2
   21ff4:	bne	21f94 <__assert_fail@plt+0xf2f0>
   21ff8:	pop	{r4, r5, r6, r7, r8, pc}
   21ffc:	andeq	r0, r3, r0, lsl #26
   22000:	andeq	r2, r3, ip, lsr #31
   22004:	andeq	r2, r3, r4, lsr #31
   22008:	andeq	r2, r3, r0, lsr #31
   2200c:	mov	r1, r0
   22010:	ldr	r0, [pc]	; 22018 <__assert_fail@plt+0xf374>
   22014:	b	21e08 <__assert_fail@plt+0xf164>
   22018:			; <UNDEFINED> instruction: 0x00032fb4
   2201c:	push	{lr}		; (str lr, [sp, #-4]!)
   22020:	sub	sp, sp, #12
   22024:	mov	r3, r1
   22028:	str	r2, [sp]
   2202c:	ldr	r1, [pc, #12]	; 22040 <__assert_fail@plt+0xf39c>
   22030:	mov	r2, r0
   22034:	mov	r0, #6
   22038:	bl	21ba8 <__assert_fail@plt+0xef04>
   2203c:	bl	12c38 <abort@plt>
   22040:	ldrdeq	r2, [r3], -r4
   22044:	push	{lr}		; (str lr, [sp, #-4]!)
   22048:	sub	sp, sp, #12
   2204c:	stm	sp, {r1, r2}
   22050:	mov	r2, r0
   22054:	ldr	r1, [pc, #8]	; 22064 <__assert_fail@plt+0xf3c0>
   22058:	mov	r0, #6
   2205c:	bl	21ba8 <__assert_fail@plt+0xef04>
   22060:	bl	12c38 <abort@plt>
   22064:	strdeq	r2, [r3], -r4
   22068:	mvn	r2, #0
   2206c:	b	12ad0 <__explicit_bzero_chk@plt>
   22070:	push	{r4, r5, r6, lr}
   22074:	sub	sp, sp, #216	; 0xd8
   22078:	ldr	r4, [pc, #160]	; 22120 <__assert_fail@plt+0xf47c>
   2207c:	mov	r5, r0
   22080:	mov	r6, r1
   22084:	ldr	r3, [r4]
   22088:	str	r3, [sp, #212]	; 0xd4
   2208c:	bl	1c914 <__assert_fail@plt+0x9c70>
   22090:	cmp	r0, #0
   22094:	moveq	r0, #1
   22098:	bne	220b4 <__assert_fail@plt+0xf410>
   2209c:	ldr	r2, [sp, #212]	; 0xd4
   220a0:	ldr	r3, [r4]
   220a4:	cmp	r2, r3
   220a8:	bne	2211c <__assert_fail@plt+0xf478>
   220ac:	add	sp, sp, #216	; 0xd8
   220b0:	pop	{r4, r5, r6, pc}
   220b4:	mov	r1, r5
   220b8:	mov	r2, sp
   220bc:	mov	r0, #3
   220c0:	bl	12bfc <__xstat64@plt>
   220c4:	cmp	r0, #0
   220c8:	beq	220d4 <__assert_fail@plt+0xf430>
   220cc:	mov	r0, #0
   220d0:	b	2209c <__assert_fail@plt+0xf3f8>
   220d4:	mov	r1, r6
   220d8:	add	r2, sp, #104	; 0x68
   220dc:	mov	r0, #3
   220e0:	bl	12bfc <__xstat64@plt>
   220e4:	cmp	r0, #0
   220e8:	bne	220cc <__assert_fail@plt+0xf428>
   220ec:	ldrd	r0, [sp]
   220f0:	ldrd	r2, [sp, #104]	; 0x68
   220f4:	cmp	r1, r3
   220f8:	cmpeq	r0, r2
   220fc:	bne	220cc <__assert_fail@plt+0xf428>
   22100:	ldrd	r0, [sp, #96]	; 0x60
   22104:	ldrd	r2, [sp, #200]	; 0xc8
   22108:	cmp	r1, r3
   2210c:	cmpeq	r0, r2
   22110:	moveq	r0, #1
   22114:	movne	r0, #0
   22118:	b	2209c <__assert_fail@plt+0xf3f8>
   2211c:	bl	1262c <__stack_chk_fail@plt>
   22120:	strdeq	r5, [r4], -r8
   22124:	cmp	r0, #100	; 0x64
   22128:	ldrls	r3, [pc, #16]	; 22140 <__assert_fail@plt+0xf49c>
   2212c:	addls	r0, r3, r0, lsl #2
   22130:	ldrls	r0, [r0, #1244]	; 0x4dc
   22134:	addls	r0, r3, r0
   22138:	ldrhi	r0, [pc, #4]	; 22144 <__assert_fail@plt+0xf4a0>
   2213c:	bx	lr
   22140:	andeq	r3, r3, ip, lsl r0
   22144:	andeq	r3, r3, ip, lsl #13
   22148:	uxth	r0, r0
   2214c:	cmp	r0, #96	; 0x60
   22150:	beq	2223c <__assert_fail@plt+0xf598>
   22154:	bls	2218c <__assert_fail@plt+0xf4e8>
   22158:	cmp	r0, #107	; 0x6b
   2215c:	beq	2222c <__assert_fail@plt+0xf588>
   22160:	bls	221bc <__assert_fail@plt+0xf518>
   22164:	cmp	r0, #125	; 0x7d
   22168:	beq	2221c <__assert_fail@plt+0xf578>
   2216c:	cmp	r0, #185	; 0xb9
   22170:	beq	22204 <__assert_fail@plt+0xf560>
   22174:	ldr	r2, [pc, #200]	; 22244 <__assert_fail@plt+0xf5a0>
   22178:	ldr	r3, [pc, #200]	; 22248 <__assert_fail@plt+0xf5a4>
   2217c:	cmp	r0, #116	; 0x74
   22180:	moveq	r0, r2
   22184:	movne	r0, r3
   22188:	bx	lr
   2218c:	cmp	r0, #54	; 0x36
   22190:	beq	22234 <__assert_fail@plt+0xf590>
   22194:	bls	221dc <__assert_fail@plt+0xf538>
   22198:	cmp	r0, #94	; 0x5e
   2219c:	beq	22224 <__assert_fail@plt+0xf580>
   221a0:	bhi	22214 <__assert_fail@plt+0xf570>
   221a4:	ldr	r2, [pc, #160]	; 2224c <__assert_fail@plt+0xf5a8>
   221a8:	ldr	r3, [pc, #152]	; 22248 <__assert_fail@plt+0xf5a4>
   221ac:	cmp	r0, #57	; 0x39
   221b0:	moveq	r0, r2
   221b4:	movne	r0, r3
   221b8:	bx	lr
   221bc:	cmp	r0, #98	; 0x62
   221c0:	beq	2220c <__assert_fail@plt+0xf568>
   221c4:	ldr	r2, [pc, #132]	; 22250 <__assert_fail@plt+0xf5ac>
   221c8:	ldr	r3, [pc, #120]	; 22248 <__assert_fail@plt+0xf5a4>
   221cc:	cmp	r0, #101	; 0x65
   221d0:	moveq	r0, r2
   221d4:	movne	r0, r3
   221d8:	bx	lr
   221dc:	cmp	r0, #9
   221e0:	bne	221ec <__assert_fail@plt+0xf548>
   221e4:	ldr	r0, [pc, #104]	; 22254 <__assert_fail@plt+0xf5b0>
   221e8:	bx	lr
   221ec:	ldr	r2, [pc, #100]	; 22258 <__assert_fail@plt+0xf5b4>
   221f0:	ldr	r3, [pc, #80]	; 22248 <__assert_fail@plt+0xf5a4>
   221f4:	cmp	r0, #17
   221f8:	moveq	r0, r2
   221fc:	movne	r0, r3
   22200:	bx	lr
   22204:	ldr	r0, [pc, #80]	; 2225c <__assert_fail@plt+0xf5b8>
   22208:	bx	lr
   2220c:	ldr	r0, [pc, #76]	; 22260 <__assert_fail@plt+0xf5bc>
   22210:	bx	lr
   22214:	ldr	r0, [pc, #72]	; 22264 <__assert_fail@plt+0xf5c0>
   22218:	bx	lr
   2221c:	ldr	r0, [pc, #68]	; 22268 <__assert_fail@plt+0xf5c4>
   22220:	bx	lr
   22224:	ldr	r0, [pc, #64]	; 2226c <__assert_fail@plt+0xf5c8>
   22228:	bx	lr
   2222c:	ldr	r0, [pc, #60]	; 22270 <__assert_fail@plt+0xf5cc>
   22230:	bx	lr
   22234:	ldr	r0, [pc, #28]	; 22258 <__assert_fail@plt+0xf5b4>
   22238:	bx	lr
   2223c:	ldr	r0, [pc, #48]	; 22274 <__assert_fail@plt+0xf5d0>
   22240:	bx	lr
   22244:	andeq	r2, r3, r0, lsl r7
   22248:			; <UNDEFINED> instruction: 0x000336b4
   2224c:	andeq	r3, r3, ip, lsr #13
   22250:	muleq	r3, r8, r6
   22254:	muleq	r3, r0, r6
   22258:	andeq	r3, r3, r4, lsr #13
   2225c:	ldrdeq	r1, [r3], -ip
   22260:	andeq	r3, r3, r8, lsr #13
   22264:	muleq	r3, ip, r6
   22268:	andeq	r0, r3, ip, asr #15
   2226c:	muleq	r3, r4, r6
   22270:	andeq	r4, r3, r0, lsr #31
   22274:	andeq	r3, r3, r0, lsr #13
   22278:	push	{r4, r5, r6, lr}
   2227c:	ldr	r5, [pc, #44]	; 222b0 <__assert_fail@plt+0xf60c>
   22280:	ldr	r3, [r5]
   22284:	cmp	r3, #0
   22288:	popeq	{r4, r5, r6, pc}
   2228c:	ldr	r4, [r3]
   22290:	ldr	r3, [r3, #4]
   22294:	blx	r3
   22298:	ldr	r0, [r5]
   2229c:	bl	12560 <free@plt>
   222a0:	subs	r3, r4, #0
   222a4:	str	r4, [r5]
   222a8:	bne	2228c <__assert_fail@plt+0xf5e8>
   222ac:	pop	{r4, r5, r6, pc}
   222b0:	andeq	r6, r4, ip, lsr #5
   222b4:	sub	r2, r0, #1
   222b8:	cmp	r2, #1
   222bc:	bhi	22300 <__assert_fail@plt+0xf65c>
   222c0:	cmp	r1, #0
   222c4:	push	{r4, lr}
   222c8:	mov	r4, r1
   222cc:	beq	222ec <__assert_fail@plt+0xf648>
   222d0:	cmp	r0, #1
   222d4:	movne	r0, #2
   222d8:	bl	12890 <_gpgrt_get_std_stream@plt>
   222dc:	mov	r1, r0
   222e0:	mov	r0, r4
   222e4:	pop	{r4, lr}
   222e8:	b	12a64 <gpgrt_fputs@plt>
   222ec:	cmp	r0, #1
   222f0:	movne	r0, #2
   222f4:	bl	12890 <_gpgrt_get_std_stream@plt>
   222f8:	pop	{r4, lr}
   222fc:	b	12680 <gpgrt_fflush@plt>
   22300:	mvn	r0, #0
   22304:	bx	lr
   22308:	push	{r4, r5, r6, lr}
   2230c:	ldr	r6, [pc, #84]	; 22368 <__assert_fail@plt+0xf6c4>
   22310:	ldr	r5, [r6]
   22314:	cmp	r5, #0
   22318:	beq	22348 <__assert_fail@plt+0xf6a4>
   2231c:	ldr	r3, [r5, #4]
   22320:	cmp	r0, r3
   22324:	popeq	{r4, r5, r6, pc}
   22328:	mov	r3, r5
   2232c:	b	2233c <__assert_fail@plt+0xf698>
   22330:	ldr	r2, [r3, #4]
   22334:	cmp	r2, r0
   22338:	popeq	{r4, r5, r6, pc}
   2233c:	ldr	r3, [r3]
   22340:	cmp	r3, #0
   22344:	bne	22330 <__assert_fail@plt+0xf68c>
   22348:	mov	r4, r0
   2234c:	mov	r0, #8
   22350:	bl	127f4 <malloc@plt>
   22354:	cmp	r0, #0
   22358:	strne	r0, [r6]
   2235c:	strne	r4, [r0, #4]
   22360:	strne	r5, [r0]
   22364:	pop	{r4, r5, r6, pc}
   22368:	andeq	r6, r4, ip, lsr #5
   2236c:	bx	lr
   22370:	ldr	r3, [pc, #136]	; 22400 <__assert_fail@plt+0xf75c>
   22374:	push	{r4, r5, r6, lr}
   22378:	str	r0, [r3, #4]
   2237c:	ldr	r0, [pc, #128]	; 22404 <__assert_fail@plt+0xf760>
   22380:	bl	3016c <__assert_fail@plt+0x1d4c8>
   22384:	mov	r0, #0
   22388:	bl	1e228 <__assert_fail@plt+0xb584>
   2238c:	ldr	r0, [pc, #116]	; 22408 <__assert_fail@plt+0xf764>
   22390:	bl	12740 <gcry_check_version@plt>
   22394:	subs	r4, r0, #0
   22398:	beq	223d4 <__assert_fail@plt+0xf730>
   2239c:	bl	12b6c <gpg_err_init@plt>
   223a0:	ldr	r0, [pc, #100]	; 2240c <__assert_fail@plt+0xf768>
   223a4:	bl	12638 <gpgrt_set_alloc_func@plt>
   223a8:	mov	r0, #0
   223ac:	bl	12890 <_gpgrt_get_std_stream@plt>
   223b0:	mov	r0, #1
   223b4:	bl	12890 <_gpgrt_get_std_stream@plt>
   223b8:	mov	r0, #2
   223bc:	bl	12890 <_gpgrt_get_std_stream@plt>
   223c0:	ldr	r0, [pc, #72]	; 22410 <__assert_fail@plt+0xf76c>
   223c4:	bl	1ebc8 <__assert_fail@plt+0xbf24>
   223c8:	ldr	r0, [pc, #68]	; 22414 <__assert_fail@plt+0xf770>
   223cc:	pop	{r4, r5, r6, lr}
   223d0:	b	219f4 <__assert_fail@plt+0xed50>
   223d4:	mov	r2, #5
   223d8:	ldr	r1, [pc, #56]	; 22418 <__assert_fail@plt+0xf774>
   223dc:	bl	12620 <dcgettext@plt>
   223e0:	mov	r5, r0
   223e4:	mov	r0, r4
   223e8:	bl	12740 <gcry_check_version@plt>
   223ec:	ldr	r2, [pc, #20]	; 22408 <__assert_fail@plt+0xf764>
   223f0:	ldr	r1, [pc, #36]	; 2241c <__assert_fail@plt+0xf778>
   223f4:	mov	r3, r0
   223f8:	mov	r0, r5
   223fc:	bl	21d40 <__assert_fail@plt+0xf09c>
   22400:	andeq	r6, r4, ip, lsr #5
   22404:	andeq	r2, r2, r8, ror r2
   22408:			; <UNDEFINED> instruction: 0x000336b0
   2240c:	andeq	r2, r1, r8, asr sl
   22410:			; <UNDEFINED> instruction: 0x000222b4
   22414:	andeq	r3, r2, r8, lsl #16
   22418:			; <UNDEFINED> instruction: 0x000336b8
   2241c:	ldrdeq	r3, [r3], -ip
   22420:	ldrb	r3, [r0, #1]
   22424:	mov	r2, r0
   22428:	cmp	r3, #0
   2242c:	beq	224d8 <__assert_fail@plt+0xf834>
   22430:	ldrb	r1, [r0, #2]
   22434:	cmp	r3, #114	; 0x72
   22438:	movne	r0, #0
   2243c:	moveq	r0, #256	; 0x100
   22440:	cmp	r1, #0
   22444:	bxeq	lr
   22448:	ldrb	r3, [r2, #3]
   2244c:	cmp	r1, #119	; 0x77
   22450:	orreq	r0, r0, #128	; 0x80
   22454:	cmp	r3, #0
   22458:	bxeq	lr
   2245c:	cmp	r3, #120	; 0x78
   22460:	ldrb	r3, [r2, #4]
   22464:	orreq	r0, r0, #64	; 0x40
   22468:	cmp	r3, #0
   2246c:	bxeq	lr
   22470:	cmp	r3, #114	; 0x72
   22474:	ldrb	r3, [r2, #5]
   22478:	orreq	r0, r0, #32
   2247c:	cmp	r3, #0
   22480:	bxeq	lr
   22484:	cmp	r3, #119	; 0x77
   22488:	ldrb	r3, [r2, #6]
   2248c:	orreq	r0, r0, #16
   22490:	cmp	r3, #0
   22494:	bxeq	lr
   22498:	cmp	r3, #120	; 0x78
   2249c:	ldrb	r3, [r2, #7]
   224a0:	orreq	r0, r0, #8
   224a4:	cmp	r3, #0
   224a8:	bxeq	lr
   224ac:	cmp	r3, #114	; 0x72
   224b0:	ldrb	r3, [r2, #8]
   224b4:	orreq	r0, r0, #4
   224b8:	cmp	r3, #0
   224bc:	bxeq	lr
   224c0:	cmp	r3, #119	; 0x77
   224c4:	ldrb	r3, [r2, #9]
   224c8:	orreq	r0, r0, #2
   224cc:	cmp	r3, #120	; 0x78
   224d0:	orreq	r0, r0, #1
   224d4:	bx	lr
   224d8:	mov	r0, r3
   224dc:	bx	lr
   224e0:	bx	lr
   224e4:	push	{r4, r5, lr}
   224e8:	sub	sp, sp, #28
   224ec:	ldr	r4, [pc, #160]	; 22594 <__assert_fail@plt+0xf8f0>
   224f0:	mov	r1, sp
   224f4:	mov	r0, #4
   224f8:	ldr	r3, [r4]
   224fc:	str	r3, [sp, #20]
   22500:	bl	12668 <getrlimit64@plt>
   22504:	mov	r1, sp
   22508:	cmp	r0, #0
   2250c:	movne	r2, #0
   22510:	movne	r3, #0
   22514:	mov	r0, #4
   22518:	strdne	r2, [sp, #8]
   2251c:	mov	r2, #0
   22520:	mov	r3, #0
   22524:	strd	r2, [sp]
   22528:	bl	1250c <setrlimit64@plt>
   2252c:	cmp	r0, #0
   22530:	beq	22550 <__assert_fail@plt+0xf8ac>
   22534:	bl	12968 <__errno_location@plt>
   22538:	ldr	r3, [r0]
   2253c:	mov	r5, r0
   22540:	sub	r3, r3, #22
   22544:	bics	r3, r3, #16
   22548:	moveq	r0, #1
   2254c:	bne	2256c <__assert_fail@plt+0xf8c8>
   22550:	ldr	r2, [sp, #20]
   22554:	ldr	r3, [r4]
   22558:	cmp	r2, r3
   2255c:	bne	22568 <__assert_fail@plt+0xf8c4>
   22560:	add	sp, sp, #28
   22564:	pop	{r4, r5, pc}
   22568:	bl	1262c <__stack_chk_fail@plt>
   2256c:	ldr	r1, [pc, #36]	; 22598 <__assert_fail@plt+0xf8f4>
   22570:	mov	r2, #5
   22574:	mov	r0, #0
   22578:	bl	12620 <dcgettext@plt>
   2257c:	mov	r4, r0
   22580:	ldr	r0, [r5]
   22584:	bl	12818 <strerror@plt>
   22588:	mov	r1, r0
   2258c:	mov	r0, r4
   22590:	bl	21d40 <__assert_fail@plt+0xf09c>
   22594:	strdeq	r5, [r4], -r8
   22598:	andeq	r3, r3, r8, lsr #14
   2259c:	push	{r4, lr}
   225a0:	sub	sp, sp, #24
   225a4:	ldr	r4, [pc, #76]	; 225f8 <__assert_fail@plt+0xf954>
   225a8:	mov	r1, sp
   225ac:	mov	r0, #4
   225b0:	ldr	r3, [r4]
   225b4:	str	r3, [sp, #20]
   225b8:	bl	12668 <getrlimit64@plt>
   225bc:	cmp	r0, #0
   225c0:	bne	225d8 <__assert_fail@plt+0xf934>
   225c4:	ldrd	r2, [sp, #8]
   225c8:	mov	r1, sp
   225cc:	mov	r0, #4
   225d0:	strd	r2, [sp]
   225d4:	bl	1250c <setrlimit64@plt>
   225d8:	ldr	r2, [sp, #20]
   225dc:	ldr	r3, [r4]
   225e0:	mov	r0, #1
   225e4:	cmp	r2, r3
   225e8:	bne	225f4 <__assert_fail@plt+0xf950>
   225ec:	add	sp, sp, #24
   225f0:	pop	{r4, pc}
   225f4:	bl	1262c <__stack_chk_fail@plt>
   225f8:	strdeq	r5, [r4], -r8
   225fc:	ldr	r3, [pc, #8]	; 2260c <__assert_fail@plt+0xf968>
   22600:	mov	r2, #1
   22604:	str	r2, [r3]
   22608:	bx	lr
   2260c:			; <UNDEFINED> instruction: 0x000462b4
   22610:	push	{r4, r5, r6, lr}
   22614:	mov	r5, r0
   22618:	ldr	r4, [pc, #48]	; 22650 <__assert_fail@plt+0xf9ac>
   2261c:	ldr	r3, [r4, #4]
   22620:	cmp	r3, #0
   22624:	beq	22638 <__assert_fail@plt+0xf994>
   22628:	mov	r3, #8
   2262c:	str	r3, [r5]
   22630:	ldr	r0, [pc, #28]	; 22654 <__assert_fail@plt+0xf9b0>
   22634:	pop	{r4, r5, r6, pc}
   22638:	mov	r1, #8
   2263c:	add	r0, r4, r1
   22640:	bl	12b84 <gcry_create_nonce@plt>
   22644:	mov	r3, #1
   22648:	str	r3, [r4, #4]
   2264c:	b	22628 <__assert_fail@plt+0xf984>
   22650:			; <UNDEFINED> instruction: 0x000462b4
   22654:			; <UNDEFINED> instruction: 0x000462bc
   22658:	push	{r4, lr}
   2265c:	sub	sp, sp, #8
   22660:	ldr	r4, [pc, #48]	; 22698 <__assert_fail@plt+0xf9f4>
   22664:	mov	r0, sp
   22668:	mov	r1, #4
   2266c:	ldr	r3, [r4]
   22670:	str	r3, [sp, #4]
   22674:	bl	12b84 <gcry_create_nonce@plt>
   22678:	ldr	r2, [sp, #4]
   2267c:	ldr	r3, [r4]
   22680:	ldr	r0, [sp]
   22684:	cmp	r2, r3
   22688:	bne	22694 <__assert_fail@plt+0xf9f0>
   2268c:	add	sp, sp, #8
   22690:	pop	{r4, pc}
   22694:	bl	1262c <__stack_chk_fail@plt>
   22698:	strdeq	r5, [r4], -r8
   2269c:	b	125fc <sleep@plt>
   226a0:	push	{r4, r5, r6, lr}
   226a4:	sub	sp, sp, #24
   226a8:	ldr	r6, [pc, #144]	; 22740 <__assert_fail@plt+0xfa9c>
   226ac:	cmp	r0, #0
   226b0:	ldr	r3, [r6]
   226b4:	str	r3, [sp, #20]
   226b8:	beq	22724 <__assert_fail@plt+0xfa80>
   226bc:	ldr	r3, [pc, #128]	; 22744 <__assert_fail@plt+0xfaa0>
   226c0:	add	r5, sp, #12
   226c4:	add	r4, sp, #4
   226c8:	umull	r2, r3, r3, r0
   226cc:	lsr	r3, r3, #18
   226d0:	str	r3, [sp, #4]
   226d4:	rsb	r2, r3, r3, lsl #5
   226d8:	rsb	r2, r2, r2, lsl #6
   226dc:	add	r3, r3, r2, lsl #3
   226e0:	sub	r0, r0, r3, lsl #6
   226e4:	rsb	r3, r0, r0, lsl #5
   226e8:	add	r0, r0, r3, lsl #2
   226ec:	lsl	r0, r0, #3
   226f0:	str	r0, [sp, #8]
   226f4:	b	22710 <__assert_fail@plt+0xfa6c>
   226f8:	bl	12968 <__errno_location@plt>
   226fc:	ldr	r3, [r0]
   22700:	cmp	r3, #4
   22704:	bne	22724 <__assert_fail@plt+0xfa80>
   22708:	ldm	r5, {r0, r1}
   2270c:	stm	r4, {r0, r1}
   22710:	mov	r1, r5
   22714:	mov	r0, r4
   22718:	bl	12578 <nanosleep@plt>
   2271c:	cmp	r0, #0
   22720:	blt	226f8 <__assert_fail@plt+0xfa54>
   22724:	ldr	r2, [sp, #20]
   22728:	ldr	r3, [r6]
   2272c:	cmp	r2, r3
   22730:	bne	2273c <__assert_fail@plt+0xfa98>
   22734:	add	sp, sp, #24
   22738:	pop	{r4, r5, r6, pc}
   2273c:	bl	1262c <__stack_chk_fail@plt>
   22740:	strdeq	r5, [r4], -r8
   22744:	tstmi	fp, #2096	; 0x830
   22748:	bx	lr
   2274c:	bx	lr
   22750:	ldr	r3, [pc, #184]	; 22810 <__assert_fail@plt+0xfb6c>
   22754:	ldr	r3, [r3]
   22758:	cmp	r3, #0
   2275c:	cmpne	r0, #0
   22760:	beq	22808 <__assert_fail@plt+0xfb64>
   22764:	ldrb	r3, [r0]
   22768:	cmp	r3, #45	; 0x2d
   2276c:	bne	22808 <__assert_fail@plt+0xfb64>
   22770:	ldrb	r3, [r0, #1]
   22774:	cmp	r3, #38	; 0x26
   22778:	bne	22808 <__assert_fail@plt+0xfb64>
   2277c:	ldrb	r3, [r0, #2]
   22780:	add	r0, r0, #2
   22784:	sub	r1, r3, #48	; 0x30
   22788:	cmp	r1, #9
   2278c:	bhi	227e0 <__assert_fail@plt+0xfb3c>
   22790:	mov	ip, r0
   22794:	push	{lr}		; (str lr, [sp, #-4]!)
   22798:	ldrb	r3, [ip, #1]!
   2279c:	sub	lr, r3, #48	; 0x30
   227a0:	cmp	lr, #9
   227a4:	bls	22798 <__assert_fail@plt+0xfaf4>
   227a8:	cmp	r3, #0
   227ac:	bne	227d8 <__assert_fail@plt+0xfb34>
   227b0:	cmp	r2, #0
   227b4:	beq	227c8 <__assert_fail@plt+0xfb24>
   227b8:	mov	r1, r3
   227bc:	mov	r2, #10
   227c0:	pop	{lr}		; (ldr lr, [sp], #4)
   227c4:	b	124d0 <strtol@plt>
   227c8:	mov	r1, r2
   227cc:	pop	{lr}		; (ldr lr, [sp], #4)
   227d0:	mov	r2, #10
   227d4:	b	124d0 <strtol@plt>
   227d8:	mvn	r0, #0
   227dc:	pop	{pc}		; (ldr pc, [sp], #4)
   227e0:	cmp	r3, #0
   227e4:	bne	22808 <__assert_fail@plt+0xfb64>
   227e8:	cmp	r2, #0
   227ec:	beq	227fc <__assert_fail@plt+0xfb58>
   227f0:	mov	r1, r3
   227f4:	mov	r2, #10
   227f8:	b	124d0 <strtol@plt>
   227fc:	mov	r1, r2
   22800:	mov	r2, #10
   22804:	b	124d0 <strtol@plt>
   22808:	mvn	r0, #0
   2280c:	bx	lr
   22810:			; <UNDEFINED> instruction: 0x000462b4
   22814:	b	126a4 <tmpfile64@plt>
   22818:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2281c:	mov	r1, #1
   22820:	mov	r8, r0
   22824:	mov	r0, #0
   22828:	bl	12a94 <fcntl64@plt>
   2282c:	cmn	r0, #1
   22830:	beq	22974 <__assert_fail@plt+0xfcd0>
   22834:	mov	r6, #0
   22838:	mov	r1, #1
   2283c:	mov	r0, r1
   22840:	bl	12a94 <fcntl64@plt>
   22844:	cmn	r0, #1
   22848:	beq	229a0 <__assert_fail@plt+0xfcfc>
   2284c:	mov	r4, #0
   22850:	mov	r1, #1
   22854:	mov	r0, #2
   22858:	bl	12a94 <fcntl64@plt>
   2285c:	cmn	r0, #1
   22860:	beq	228d0 <__assert_fail@plt+0xfc2c>
   22864:	ldr	r3, [pc, #392]	; 229f4 <__assert_fail@plt+0xfd50>
   22868:	cmp	r4, #2
   2286c:	cmpne	r6, #2
   22870:	moveq	r7, #1
   22874:	ldr	r5, [r3]
   22878:	movne	r7, #0
   2287c:	mov	r9, #0
   22880:	cmp	r5, #0
   22884:	beq	228c4 <__assert_fail@plt+0xfc20>
   22888:	cmp	r6, #1
   2288c:	beq	2291c <__assert_fail@plt+0xfc78>
   22890:	cmp	r4, #1
   22894:	beq	22938 <__assert_fail@plt+0xfc94>
   22898:	cmp	r9, #1
   2289c:	beq	22954 <__assert_fail@plt+0xfcb0>
   228a0:	cmp	r7, #0
   228a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   228a8:	mov	r3, r8
   228ac:	mov	r0, r5
   228b0:	ldr	r2, [pc, #320]	; 229f8 <__assert_fail@plt+0xfd54>
   228b4:	mov	r1, #1
   228b8:	bl	12a34 <__fprintf_chk@plt>
   228bc:	mov	r0, #3
   228c0:	bl	128b4 <exit@plt>
   228c4:	cmp	r7, #0
   228c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   228cc:	b	228bc <__assert_fail@plt+0xfc18>
   228d0:	bl	12968 <__errno_location@plt>
   228d4:	ldr	r3, [r0]
   228d8:	cmp	r3, #9
   228dc:	bne	22864 <__assert_fail@plt+0xfbc0>
   228e0:	mov	r1, #1
   228e4:	ldr	r0, [pc, #272]	; 229fc <__assert_fail@plt+0xfd58>
   228e8:	bl	127b8 <open64@plt>
   228ec:	cmp	r0, #2
   228f0:	beq	229cc <__assert_fail@plt+0xfd28>
   228f4:	cmp	r4, #0
   228f8:	bne	228bc <__assert_fail@plt+0xfc18>
   228fc:	ldr	r3, [pc, #252]	; 22a00 <__assert_fail@plt+0xfd5c>
   22900:	ldr	r5, [r3]
   22904:	cmp	r5, #0
   22908:	beq	228bc <__assert_fail@plt+0xfc18>
   2290c:	cmp	r6, #1
   22910:	bne	228a8 <__assert_fail@plt+0xfc04>
   22914:	mov	r7, r6
   22918:	mov	r9, #2
   2291c:	mov	r3, r8
   22920:	ldr	r2, [pc, #220]	; 22a04 <__assert_fail@plt+0xfd60>
   22924:	mov	r1, #1
   22928:	mov	r0, r5
   2292c:	bl	12a34 <__fprintf_chk@plt>
   22930:	cmp	r4, #1
   22934:	bne	22898 <__assert_fail@plt+0xfbf4>
   22938:	mov	r1, r4
   2293c:	mov	r3, r8
   22940:	ldr	r2, [pc, #192]	; 22a08 <__assert_fail@plt+0xfd64>
   22944:	mov	r0, r5
   22948:	bl	12a34 <__fprintf_chk@plt>
   2294c:	cmp	r9, #1
   22950:	bne	228a0 <__assert_fail@plt+0xfbfc>
   22954:	mov	r1, r9
   22958:	mov	r3, r8
   2295c:	ldr	r2, [pc, #168]	; 22a0c <__assert_fail@plt+0xfd68>
   22960:	mov	r0, r5
   22964:	bl	12a34 <__fprintf_chk@plt>
   22968:	cmp	r7, #0
   2296c:	bne	228a8 <__assert_fail@plt+0xfc04>
   22970:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22974:	bl	12968 <__errno_location@plt>
   22978:	ldr	r3, [r0]
   2297c:	cmp	r3, #9
   22980:	bne	22834 <__assert_fail@plt+0xfb90>
   22984:	mov	r1, #0
   22988:	ldr	r0, [pc, #108]	; 229fc <__assert_fail@plt+0xfd58>
   2298c:	bl	127b8 <open64@plt>
   22990:	cmp	r0, #0
   22994:	moveq	r6, #1
   22998:	movne	r6, #2
   2299c:	b	22838 <__assert_fail@plt+0xfb94>
   229a0:	bl	12968 <__errno_location@plt>
   229a4:	ldr	r3, [r0]
   229a8:	cmp	r3, #9
   229ac:	bne	2284c <__assert_fail@plt+0xfba8>
   229b0:	mov	r1, #1
   229b4:	ldr	r0, [pc, #64]	; 229fc <__assert_fail@plt+0xfd58>
   229b8:	bl	127b8 <open64@plt>
   229bc:	cmp	r0, #1
   229c0:	mov	r4, r0
   229c4:	movne	r4, #2
   229c8:	b	22850 <__assert_fail@plt+0xfbac>
   229cc:	cmp	r4, #2
   229d0:	cmpne	r6, #2
   229d4:	moveq	r7, #1
   229d8:	movne	r7, #0
   229dc:	cmp	r4, #0
   229e0:	bne	228c4 <__assert_fail@plt+0xfc20>
   229e4:	ldr	r3, [pc, #20]	; 22a00 <__assert_fail@plt+0xfd5c>
   229e8:	mov	r9, #1
   229ec:	ldr	r5, [r3]
   229f0:	b	22880 <__assert_fail@plt+0xfbdc>
   229f4:	strdeq	r6, [r4], -r8
   229f8:	andeq	r3, r3, ip, asr #15
   229fc:	andeq	r3, r3, r8, asr #14
   22a00:	strdeq	r6, [r4], -ip
   22a04:	andeq	r3, r3, r4, asr r7
   22a08:	andeq	r3, r3, ip, ror r7
   22a0c:	andeq	r3, r3, r4, lsr #15
   22a10:	subs	r2, r0, #0
   22a14:	bxne	lr
   22a18:	ldr	r1, [pc, #4]	; 22a24 <__assert_fail@plt+0xfd80>
   22a1c:	ldr	r0, [pc, #4]	; 22a28 <__assert_fail@plt+0xfd84>
   22a20:	b	21c58 <__assert_fail@plt+0xefb4>
   22a24:	andeq	r3, r3, ip, lsl #16
   22a28:	andeq	r3, r3, r0, lsr r8
   22a2c:	b	12b78 <remove@plt>
   22a30:	push	{r4, r5, r6, r7, r8, lr}
   22a34:	subs	r8, r2, #0
   22a38:	mov	r6, r0
   22a3c:	mov	r7, r1
   22a40:	beq	22af4 <__assert_fail@plt+0xfe50>
   22a44:	ldr	r3, [r8]
   22a48:	cmp	r3, #0
   22a4c:	bne	22aec <__assert_fail@plt+0xfe48>
   22a50:	mov	r1, r7
   22a54:	mov	r0, r6
   22a58:	bl	1286c <rename@plt>
   22a5c:	cmp	r0, #0
   22a60:	bne	22a70 <__assert_fail@plt+0xfdcc>
   22a64:	mov	r4, #0
   22a68:	mov	r0, r4
   22a6c:	pop	{r4, r5, r6, r7, r8, pc}
   22a70:	ldr	r3, [pc, #184]	; 22b30 <__assert_fail@plt+0xfe8c>
   22a74:	ldr	r4, [r3]
   22a78:	bl	12914 <gpg_err_code_from_syserror@plt>
   22a7c:	cmp	r0, #0
   22a80:	beq	22a64 <__assert_fail@plt+0xfdc0>
   22a84:	ldr	r3, [r8]
   22a88:	lsl	r4, r4, #24
   22a8c:	and	r4, r4, #2130706432	; 0x7f000000
   22a90:	uxth	r0, r0
   22a94:	cmp	r3, #0
   22a98:	orr	r4, r4, r0
   22a9c:	beq	22b24 <__assert_fail@plt+0xfe80>
   22aa0:	cmp	r4, #0
   22aa4:	beq	22a64 <__assert_fail@plt+0xfdc0>
   22aa8:	bl	2b7ec <__assert_fail@plt+0x18b48>
   22aac:	mov	r3, #0
   22ab0:	str	r3, [r8]
   22ab4:	mov	r2, #5
   22ab8:	ldr	r1, [pc, #116]	; 22b34 <__assert_fail@plt+0xfe90>
   22abc:	mov	r0, #0
   22ac0:	bl	12620 <dcgettext@plt>
   22ac4:	mov	r5, r0
   22ac8:	mov	r0, r4
   22acc:	bl	12b3c <gpg_strerror@plt>
   22ad0:	mov	r2, r7
   22ad4:	mov	r1, r6
   22ad8:	mov	r3, r0
   22adc:	mov	r0, r5
   22ae0:	bl	21cbc <__assert_fail@plt+0xf018>
   22ae4:	mov	r0, r4
   22ae8:	pop	{r4, r5, r6, r7, r8, pc}
   22aec:	bl	2b778 <__assert_fail@plt+0x18ad4>
   22af0:	b	22a50 <__assert_fail@plt+0xfdac>
   22af4:	bl	1286c <rename@plt>
   22af8:	cmp	r0, #0
   22afc:	beq	22a64 <__assert_fail@plt+0xfdc0>
   22b00:	ldr	r3, [pc, #40]	; 22b30 <__assert_fail@plt+0xfe8c>
   22b04:	ldr	r4, [r3]
   22b08:	bl	12914 <gpg_err_code_from_syserror@plt>
   22b0c:	cmp	r0, #0
   22b10:	beq	22a64 <__assert_fail@plt+0xfdc0>
   22b14:	lsl	r4, r4, #24
   22b18:	and	r4, r4, #2130706432	; 0x7f000000
   22b1c:	uxth	r0, r0
   22b20:	orr	r4, r4, r0
   22b24:	cmp	r4, #0
   22b28:	bne	22ab4 <__assert_fail@plt+0xfe10>
   22b2c:	b	22a64 <__assert_fail@plt+0xfdc0>
   22b30:			; <UNDEFINED> instruction: 0x000462b0
   22b34:	andeq	r3, r3, r0, asr r8
   22b38:	subs	r3, r1, #0
   22b3c:	push	{r4, lr}
   22b40:	moveq	r1, r3
   22b44:	mov	r4, r0
   22b48:	beq	22b64 <__assert_fail@plt+0xfec0>
   22b4c:	ldrb	r1, [r3]
   22b50:	cmp	r1, #0
   22b54:	beq	22b64 <__assert_fail@plt+0xfec0>
   22b58:	mov	r0, r3
   22b5c:	bl	22420 <__assert_fail@plt+0xf77c>
   22b60:	mov	r1, r0
   22b64:	mov	r0, r4
   22b68:	pop	{r4, lr}
   22b6c:	b	129a4 <mkdir@plt>
   22b70:	b	126b0 <chdir@plt>
   22b74:	subs	r3, r1, #0
   22b78:	push	{r4, lr}
   22b7c:	moveq	r1, r3
   22b80:	mov	r4, r0
   22b84:	beq	22ba0 <__assert_fail@plt+0xfefc>
   22b88:	ldrb	r1, [r3]
   22b8c:	cmp	r1, #0
   22b90:	beq	22ba0 <__assert_fail@plt+0xfefc>
   22b94:	mov	r0, r3
   22b98:	bl	22420 <__assert_fail@plt+0xf77c>
   22b9c:	mov	r1, r0
   22ba0:	mov	r0, r4
   22ba4:	pop	{r4, lr}
   22ba8:	b	12bf0 <chmod@plt>
   22bac:	ldr	r3, [pc, #476]	; 22d90 <__assert_fail@plt+0x100ec>
   22bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22bb4:	sub	sp, sp, #28
   22bb8:	ldr	r3, [r3]
   22bbc:	mov	r9, r0
   22bc0:	str	r3, [sp, #20]
   22bc4:	bl	128d8 <strlen@plt>
   22bc8:	cmp	r0, #5
   22bcc:	bls	22d64 <__assert_fail@plt+0x100c0>
   22bd0:	sub	r0, r0, #6
   22bd4:	add	r6, r9, r0
   22bd8:	mov	r0, r6
   22bdc:	ldr	r1, [pc, #432]	; 22d94 <__assert_fail@plt+0x100f0>
   22be0:	bl	124b8 <strcmp@plt>
   22be4:	cmp	r0, #0
   22be8:	bne	22d64 <__assert_fail@plt+0x100c0>
   22bec:	bl	12968 <__errno_location@plt>
   22bf0:	mov	r1, #8
   22bf4:	ldr	r8, [pc, #412]	; 22d98 <__assert_fail@plt+0x100f4>
   22bf8:	ldr	r7, [pc, #412]	; 22d9c <__assert_fail@plt+0x100f8>
   22bfc:	ldr	fp, [pc, #412]	; 22da0 <__assert_fail@plt+0x100fc>
   22c00:	mov	sl, r0
   22c04:	add	r0, sp, r1
   22c08:	ldr	r3, [sl]
   22c0c:	str	r3, [sp, #4]
   22c10:	bl	12b84 <gcry_create_nonce@plt>
   22c14:	ldrd	r4, [sp, #8]
   22c18:	b	22c44 <__assert_fail@plt+0xffa0>
   22c1c:	ldr	r0, [sl]
   22c20:	cmp	r0, #17
   22c24:	bne	22d74 <__assert_fail@plt+0x100d0>
   22c28:	ldrd	r4, [sp, #8]
   22c2c:	ldr	r3, [pc, #368]	; 22da4 <__assert_fail@plt+0x10100>
   22c30:	adds	r4, r4, r3
   22c34:	adc	r5, r5, #0
   22c38:	subs	r8, r8, #1
   22c3c:	strd	r4, [sp, #8]
   22c40:	beq	22d68 <__assert_fail@plt+0x100c4>
   22c44:	mov	r2, #62	; 0x3e
   22c48:	mov	r3, #0
   22c4c:	mov	r0, r4
   22c50:	mov	r1, r5
   22c54:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22c58:	mov	r3, #0
   22c5c:	mov	r0, r4
   22c60:	mov	r1, r5
   22c64:	ldrb	ip, [r7, r2]
   22c68:	mov	r2, #62	; 0x3e
   22c6c:	strb	ip, [r6]
   22c70:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22c74:	mov	r2, #62	; 0x3e
   22c78:	mov	r3, #0
   22c7c:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22c80:	mov	r3, #0
   22c84:	mov	r0, r4
   22c88:	mov	r1, r5
   22c8c:	ldrb	ip, [r7, r2]
   22c90:	ldr	r2, [pc, #272]	; 22da8 <__assert_fail@plt+0x10104>
   22c94:	strb	ip, [r6, #1]
   22c98:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22c9c:	mov	r2, #62	; 0x3e
   22ca0:	mov	r3, #0
   22ca4:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22ca8:	mov	r3, #0
   22cac:	mov	r0, r4
   22cb0:	mov	r1, r5
   22cb4:	ldrb	ip, [r7, r2]
   22cb8:	ldr	r2, [pc, #216]	; 22d98 <__assert_fail@plt+0x100f4>
   22cbc:	strb	ip, [r6, #2]
   22cc0:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22cc4:	mov	r2, #62	; 0x3e
   22cc8:	mov	r3, #0
   22ccc:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22cd0:	mov	r0, r4
   22cd4:	mov	r1, r5
   22cd8:	ldrb	ip, [r7, r2]
   22cdc:	add	r3, pc, #156	; 0x9c
   22ce0:	ldrd	r2, [r3]
   22ce4:	strb	ip, [r6, #3]
   22ce8:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22cec:	mov	r2, #62	; 0x3e
   22cf0:	mov	r3, #0
   22cf4:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22cf8:	mov	r0, r4
   22cfc:	mov	r1, r5
   22d00:	ldrb	ip, [r7, r2]
   22d04:	add	r3, pc, #124	; 0x7c
   22d08:	ldrd	r2, [r3]
   22d0c:	strb	ip, [r6, #4]
   22d10:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22d14:	mov	r2, #62	; 0x3e
   22d18:	mov	r3, #0
   22d1c:	bl	2ff94 <__assert_fail@plt+0x1d2f0>
   22d20:	mov	r1, fp
   22d24:	mov	r0, r9
   22d28:	ldrb	r3, [r7, r2]
   22d2c:	strb	r3, [r6, #5]
   22d30:	bl	22b38 <__assert_fail@plt+0xfe94>
   22d34:	cmp	r0, #0
   22d38:	bne	22c1c <__assert_fail@plt+0xff78>
   22d3c:	ldr	r0, [sp, #4]
   22d40:	bl	12b0c <gpg_err_set_errno@plt>
   22d44:	mov	r0, r9
   22d48:	ldr	r3, [pc, #64]	; 22d90 <__assert_fail@plt+0x100ec>
   22d4c:	ldr	r2, [sp, #20]
   22d50:	ldr	r3, [r3]
   22d54:	cmp	r2, r3
   22d58:	bne	22d7c <__assert_fail@plt+0x100d8>
   22d5c:	add	sp, sp, #28
   22d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d64:	mov	r0, #22
   22d68:	bl	12b0c <gpg_err_set_errno@plt>
   22d6c:	mov	r0, #0
   22d70:	b	22d48 <__assert_fail@plt+0x100a4>
   22d74:	mov	r0, #0
   22d78:	b	22d48 <__assert_fail@plt+0x100a4>
   22d7c:	bl	1262c <__stack_chk_fail@plt>
   22d80:	rsceq	r7, r1, r0, lsl r8
   22d84:	andeq	r0, r0, r0
   22d88:	ldrcc	r1, [fp], r0, ror #7
   22d8c:	andeq	r0, r0, r0
   22d90:	strdeq	r5, [r4], -r8
   22d94:	andeq	r3, r3, r4, ror r8
   22d98:	strdeq	sl, [r3], -r8
   22d9c:	andeq	r3, r3, r8, ror #13
   22da0:	andeq	r1, r3, r4, ror #8
   22da4:	andeq	r1, r0, r1, ror #28
   22da8:	andeq	r0, r0, r4, lsl #30
   22dac:	b	12908 <setenv@plt>
   22db0:	b	12c14 <unsetenv@plt>
   22db4:	push	{r4, r5, r6, lr}
   22db8:	mov	r4, #100	; 0x64
   22dbc:	b	22de8 <__assert_fail@plt+0x10144>
   22dc0:	bl	1289c <getcwd@plt>
   22dc4:	mov	r3, r0
   22dc8:	cmp	r5, r3
   22dcc:	mov	r0, r5
   22dd0:	beq	22e04 <__assert_fail@plt+0x10160>
   22dd4:	bl	125e4 <gcry_free@plt>
   22dd8:	bl	12968 <__errno_location@plt>
   22ddc:	ldr	r3, [r0]
   22de0:	cmp	r3, #34	; 0x22
   22de4:	bne	22e00 <__assert_fail@plt+0x1015c>
   22de8:	add	r0, r4, #1
   22dec:	bl	12458 <gcry_malloc@plt>
   22df0:	mov	r1, r4
   22df4:	lsl	r4, r4, #1
   22df8:	subs	r5, r0, #0
   22dfc:	bne	22dc0 <__assert_fail@plt+0x1011c>
   22e00:	mov	r3, #0
   22e04:	mov	r0, r3
   22e08:	pop	{r4, r5, r6, pc}
   22e0c:	push	{r4, r5, r6, lr}
   22e10:	mvn	r3, #0
   22e14:	subs	r4, r1, #0
   22e18:	str	r3, [r0]
   22e1c:	beq	22e58 <__assert_fail@plt+0x101b4>
   22e20:	mov	r5, r0
   22e24:	bl	128e4 <inotify_init@plt>
   22e28:	cmn	r0, #1
   22e2c:	mov	r6, r0
   22e30:	beq	22ea0 <__assert_fail@plt+0x101fc>
   22e34:	mov	r1, r4
   22e38:	mov	r2, #1024	; 0x400
   22e3c:	bl	1295c <inotify_add_watch@plt>
   22e40:	cmn	r0, #1
   22e44:	movne	r4, #0
   22e48:	strne	r6, [r5]
   22e4c:	beq	22e74 <__assert_fail@plt+0x101d0>
   22e50:	mov	r0, r4
   22e54:	pop	{r4, r5, r6, pc}
   22e58:	ldr	r3, [pc, #100]	; 22ec4 <__assert_fail@plt+0x10220>
   22e5c:	ldr	r4, [r3]
   22e60:	lsl	r4, r4, #24
   22e64:	and	r4, r4, #2130706432	; 0x7f000000
   22e68:	orr	r4, r4, #55	; 0x37
   22e6c:	mov	r0, r4
   22e70:	pop	{r4, r5, r6, pc}
   22e74:	ldr	r3, [pc, #72]	; 22ec4 <__assert_fail@plt+0x10220>
   22e78:	ldr	r5, [r3]
   22e7c:	bl	12914 <gpg_err_code_from_syserror@plt>
   22e80:	subs	r4, r0, #0
   22e84:	lslne	r5, r5, #24
   22e88:	andne	r5, r5, #2130706432	; 0x7f000000
   22e8c:	uxthne	r4, r4
   22e90:	mov	r0, r6
   22e94:	orrne	r4, r5, r4
   22e98:	bl	12c5c <close@plt>
   22e9c:	b	22e50 <__assert_fail@plt+0x101ac>
   22ea0:	ldr	r3, [pc, #28]	; 22ec4 <__assert_fail@plt+0x10220>
   22ea4:	ldr	r5, [r3]
   22ea8:	bl	12914 <gpg_err_code_from_syserror@plt>
   22eac:	subs	r4, r0, #0
   22eb0:	lslne	r5, r5, #24
   22eb4:	andne	r5, r5, #2130706432	; 0x7f000000
   22eb8:	uxthne	r4, r4
   22ebc:	orrne	r4, r5, r4
   22ec0:	b	22e50 <__assert_fail@plt+0x101ac>
   22ec4:			; <UNDEFINED> instruction: 0x000462b0
   22ec8:	mvn	r3, #0
   22ecc:	cmp	r1, #0
   22ed0:	push	{r4, r5, r6, r7, r8, lr}
   22ed4:	str	r3, [r0]
   22ed8:	beq	22f48 <__assert_fail@plt+0x102a4>
   22edc:	mov	r5, r0
   22ee0:	mov	r0, r1
   22ee4:	bl	12c68 <gcry_strdup@plt>
   22ee8:	subs	r6, r0, #0
   22eec:	beq	22f9c <__assert_fail@plt+0x102f8>
   22ef0:	bl	128e4 <inotify_init@plt>
   22ef4:	cmn	r0, #1
   22ef8:	mov	r7, r0
   22efc:	beq	22fc0 <__assert_fail@plt+0x1031c>
   22f00:	mov	r1, #47	; 0x2f
   22f04:	mov	r0, r6
   22f08:	bl	12adc <strrchr@plt>
   22f0c:	ldr	r2, [pc, #208]	; 22fe4 <__assert_fail@plt+0x10340>
   22f10:	mov	r1, r6
   22f14:	cmp	r0, #0
   22f18:	movne	r3, #0
   22f1c:	strbne	r3, [r0]
   22f20:	mov	r0, r7
   22f24:	bl	1295c <inotify_add_watch@plt>
   22f28:	cmn	r0, #1
   22f2c:	beq	22f64 <__assert_fail@plt+0x102c0>
   22f30:	mov	r4, #0
   22f34:	mov	r0, r6
   22f38:	bl	125e4 <gcry_free@plt>
   22f3c:	str	r7, [r5]
   22f40:	mov	r0, r4
   22f44:	pop	{r4, r5, r6, r7, r8, pc}
   22f48:	ldr	r3, [pc, #152]	; 22fe8 <__assert_fail@plt+0x10344>
   22f4c:	ldr	r4, [r3]
   22f50:	lsl	r4, r4, #24
   22f54:	and	r4, r4, #2130706432	; 0x7f000000
   22f58:	orr	r4, r4, #55	; 0x37
   22f5c:	mov	r0, r4
   22f60:	pop	{r4, r5, r6, r7, r8, pc}
   22f64:	ldr	r3, [pc, #124]	; 22fe8 <__assert_fail@plt+0x10344>
   22f68:	ldr	r5, [r3]
   22f6c:	bl	12914 <gpg_err_code_from_syserror@plt>
   22f70:	subs	r4, r0, #0
   22f74:	lslne	r5, r5, #24
   22f78:	andne	r5, r5, #2130706432	; 0x7f000000
   22f7c:	uxthne	r4, r4
   22f80:	mov	r0, r7
   22f84:	orrne	r4, r5, r4
   22f88:	bl	12c5c <close@plt>
   22f8c:	mov	r0, r6
   22f90:	bl	125e4 <gcry_free@plt>
   22f94:	mov	r0, r4
   22f98:	pop	{r4, r5, r6, r7, r8, pc}
   22f9c:	ldr	r3, [pc, #68]	; 22fe8 <__assert_fail@plt+0x10344>
   22fa0:	ldr	r5, [r3]
   22fa4:	bl	12914 <gpg_err_code_from_syserror@plt>
   22fa8:	subs	r4, r0, #0
   22fac:	lslne	r5, r5, #24
   22fb0:	andne	r5, r5, #2130706432	; 0x7f000000
   22fb4:	uxthne	r4, r4
   22fb8:	orrne	r4, r5, r4
   22fbc:	b	22f40 <__assert_fail@plt+0x1029c>
   22fc0:	ldr	r3, [pc, #32]	; 22fe8 <__assert_fail@plt+0x10344>
   22fc4:	ldr	r5, [r3]
   22fc8:	bl	12914 <gpg_err_code_from_syserror@plt>
   22fcc:	subs	r4, r0, #0
   22fd0:	lslne	r5, r5, #24
   22fd4:	andne	r5, r5, #2130706432	; 0x7f000000
   22fd8:	uxthne	r4, r4
   22fdc:	orrne	r4, r5, r4
   22fe0:	b	22f8c <__assert_fail@plt+0x102e8>
   22fe4:	streq	r0, [r0], #-1536	; 0xfffffa00
   22fe8:			; <UNDEFINED> instruction: 0x000462b0
   22fec:	mov	r0, #0
   22ff0:	bx	lr
   22ff4:	push	{r4, r5, r6, r7, r8, lr}
   22ff8:	sub	sp, sp, #120	; 0x78
   22ffc:	ldr	r5, [pc, #316]	; 23140 <__assert_fail@plt+0x1049c>
   23000:	mov	r4, #110	; 0x6e
   23004:	mov	r2, sp
   23008:	ldr	r3, [r5]
   2300c:	add	r1, sp, #4
   23010:	str	r3, [sp, #116]	; 0x74
   23014:	str	r4, [sp]
   23018:	mov	r8, r0
   2301c:	bl	12b60 <getsockname@plt>
   23020:	subs	r7, r0, #0
   23024:	bne	230b0 <__assert_fail@plt+0x1040c>
   23028:	ldrh	r3, [sp, #4]
   2302c:	cmp	r3, #1
   23030:	bne	23088 <__assert_fail@plt+0x103e4>
   23034:	ldr	r3, [sp]
   23038:	cmp	r3, #2
   2303c:	bls	2309c <__assert_fail@plt+0x103f8>
   23040:	cmp	r3, #110	; 0x6e
   23044:	bhi	230ec <__assert_fail@plt+0x10448>
   23048:	sub	r0, r3, #1
   2304c:	sub	r4, r3, #2
   23050:	bl	12458 <gcry_malloc@plt>
   23054:	subs	r6, r0, #0
   23058:	beq	23104 <__assert_fail@plt+0x10460>
   2305c:	mov	r2, r4
   23060:	add	r1, sp, #6
   23064:	bl	125b4 <memcpy@plt>
   23068:	strb	r7, [r6, r4]
   2306c:	ldr	r2, [sp, #116]	; 0x74
   23070:	ldr	r3, [r5]
   23074:	mov	r0, r6
   23078:	cmp	r2, r3
   2307c:	bne	2313c <__assert_fail@plt+0x10498>
   23080:	add	sp, sp, #120	; 0x78
   23084:	pop	{r4, r5, r6, r7, r8, pc}
   23088:	mov	r1, r8
   2308c:	ldr	r0, [pc, #176]	; 23144 <__assert_fail@plt+0x104a0>
   23090:	mov	r6, r7
   23094:	bl	21cbc <__assert_fail@plt+0xf018>
   23098:	b	2306c <__assert_fail@plt+0x103c8>
   2309c:	mov	r1, r8
   230a0:	ldr	r0, [pc, #160]	; 23148 <__assert_fail@plt+0x104a4>
   230a4:	mov	r6, r7
   230a8:	bl	21cbc <__assert_fail@plt+0xf018>
   230ac:	b	2306c <__assert_fail@plt+0x103c8>
   230b0:	ldr	r3, [pc, #148]	; 2314c <__assert_fail@plt+0x104a8>
   230b4:	mov	r6, #0
   230b8:	ldr	r4, [r3]
   230bc:	bl	12914 <gpg_err_code_from_syserror@plt>
   230c0:	cmp	r0, #0
   230c4:	lslne	r4, r4, #24
   230c8:	andne	r4, r4, #2130706432	; 0x7f000000
   230cc:	uxthne	r0, r0
   230d0:	orrne	r0, r4, r0
   230d4:	bl	12b3c <gpg_strerror@plt>
   230d8:	mov	r1, r8
   230dc:	mov	r2, r0
   230e0:	ldr	r0, [pc, #104]	; 23150 <__assert_fail@plt+0x104ac>
   230e4:	bl	21cbc <__assert_fail@plt+0xf018>
   230e8:	b	2306c <__assert_fail@plt+0x103c8>
   230ec:	mov	r2, r4
   230f0:	mov	r1, r8
   230f4:	ldr	r0, [pc, #88]	; 23154 <__assert_fail@plt+0x104b0>
   230f8:	mov	r6, r7
   230fc:	bl	21cbc <__assert_fail@plt+0xf018>
   23100:	b	2306c <__assert_fail@plt+0x103c8>
   23104:	ldr	r3, [pc, #64]	; 2314c <__assert_fail@plt+0x104a8>
   23108:	ldr	r4, [r3]
   2310c:	bl	12914 <gpg_err_code_from_syserror@plt>
   23110:	cmp	r0, #0
   23114:	lslne	r4, r4, #24
   23118:	andne	r4, r4, #2130706432	; 0x7f000000
   2311c:	uxthne	r0, r0
   23120:	orrne	r0, r4, r0
   23124:	bl	12b3c <gpg_strerror@plt>
   23128:	mov	r1, r8
   2312c:	mov	r2, r0
   23130:	ldr	r0, [pc, #32]	; 23158 <__assert_fail@plt+0x104b4>
   23134:	bl	21cbc <__assert_fail@plt+0xf018>
   23138:	b	2306c <__assert_fail@plt+0x103c8>
   2313c:	bl	1262c <__stack_chk_fail@plt>
   23140:	strdeq	r5, [r4], -r8
   23144:	muleq	r3, ip, r8
   23148:	andeq	r3, r3, ip, asr #17
   2314c:			; <UNDEFINED> instruction: 0x000462b0
   23150:	andeq	r3, r3, ip, ror r8
   23154:	strdeq	r3, [r3], -ip
   23158:	andeq	r3, r3, ip, asr #18
   2315c:	push	{r4, lr}
   23160:	bl	12698 <dup@plt>
   23164:	cmp	r0, #0
   23168:	blt	23178 <__assert_fail@plt+0x104d4>
   2316c:	bl	12c5c <close@plt>
   23170:	mov	r0, #1
   23174:	pop	{r4, pc}
   23178:	mov	r0, #0
   2317c:	pop	{r4, pc}
   23180:	ldr	r0, [pc]	; 23188 <__assert_fail@plt+0x104e4>
   23184:	bx	lr
   23188:			; <UNDEFINED> instruction: 0x000339b4
   2318c:	push	{r4, r5, r6, lr}
   23190:	mov	r1, #0
   23194:	bl	1c864 <__assert_fail@plt+0x9bc0>
   23198:	mov	r1, #0
   2319c:	mov	r4, r0
   231a0:	ldr	r0, [pc, #48]	; 231d8 <__assert_fail@plt+0x10534>
   231a4:	bl	1c864 <__assert_fail@plt+0x9bc0>
   231a8:	mov	r1, r0
   231ac:	mov	r5, r0
   231b0:	mov	r0, r4
   231b4:	bl	1c914 <__assert_fail@plt+0x9c70>
   231b8:	mov	r6, r0
   231bc:	mov	r0, r5
   231c0:	bl	125e4 <gcry_free@plt>
   231c4:	mov	r0, r4
   231c8:	bl	125e4 <gcry_free@plt>
   231cc:	clz	r0, r6
   231d0:	lsr	r0, r0, #5
   231d4:	pop	{r4, r5, r6, pc}
   231d8:	andeq	r3, r3, r0, asr #19
   231dc:	push	{r4, r5, r6, lr}
   231e0:	cmp	r0, #0
   231e4:	ldr	r5, [pc, #152]	; 23284 <__assert_fail@plt+0x105e0>
   231e8:	ldr	r4, [r5]
   231ec:	bne	23200 <__assert_fail@plt+0x1055c>
   231f0:	cmp	r4, #0
   231f4:	beq	23210 <__assert_fail@plt+0x1056c>
   231f8:	mov	r0, r4
   231fc:	pop	{r4, r5, r6, pc}
   23200:	mov	r0, r4
   23204:	bl	125e4 <gcry_free@plt>
   23208:	mov	r3, #0
   2320c:	str	r3, [r5]
   23210:	bl	23180 <__assert_fail@plt+0x104dc>
   23214:	mov	r2, #0
   23218:	ldr	r1, [pc, #104]	; 23288 <__assert_fail@plt+0x105e4>
   2321c:	mov	r6, r0
   23220:	bl	1ce1c <__assert_fail@plt+0xa178>
   23224:	mov	r1, #0
   23228:	mov	r4, r0
   2322c:	bl	12a4c <access@plt>
   23230:	cmp	r0, #0
   23234:	beq	23274 <__assert_fail@plt+0x105d0>
   23238:	mov	r2, #0
   2323c:	ldr	r1, [pc, #72]	; 2328c <__assert_fail@plt+0x105e8>
   23240:	mov	r0, r6
   23244:	str	r4, [r5]
   23248:	bl	1ce1c <__assert_fail@plt+0xa178>
   2324c:	mov	r1, #0
   23250:	mov	r4, r0
   23254:	bl	12a4c <access@plt>
   23258:	cmp	r0, #0
   2325c:	beq	23274 <__assert_fail@plt+0x105d0>
   23260:	mov	r0, r4
   23264:	bl	125e4 <gcry_free@plt>
   23268:	ldr	r4, [r5]
   2326c:	mov	r0, r4
   23270:	pop	{r4, r5, r6, pc}
   23274:	ldr	r0, [r5]
   23278:	bl	125e4 <gcry_free@plt>
   2327c:	str	r4, [r5]
   23280:	b	231f8 <__assert_fail@plt+0x10554>
   23284:	andeq	r6, r4, r4, asr #5
   23288:	andeq	r3, r3, ip, asr #19
   2328c:	ldrdeq	r3, [r3], -r8
   23290:	push	{r4, lr}
   23294:	ldrb	r4, [r0]
   23298:	cmp	r4, #0
   2329c:	beq	232bc <__assert_fail@plt+0x10618>
   232a0:	mov	r4, r0
   232a4:	bl	128d8 <strlen@plt>
   232a8:	add	r0, r4, r0
   232ac:	ldrb	r3, [r0, #-1]
   232b0:	cmp	r3, #47	; 0x2f
   232b4:	movne	r4, #0
   232b8:	beq	232c4 <__assert_fail@plt+0x10620>
   232bc:	mov	r0, r4
   232c0:	pop	{r4, pc}
   232c4:	mov	r0, r4
   232c8:	bl	12a40 <gcry_xstrdup@plt>
   232cc:	mov	r4, r0
   232d0:	bl	128d8 <strlen@plt>
   232d4:	sub	r0, r0, #1
   232d8:	add	r3, r4, r0
   232dc:	cmp	r4, r3
   232e0:	bcs	232bc <__assert_fail@plt+0x10618>
   232e4:	ldrb	r2, [r4, r0]
   232e8:	cmp	r2, #47	; 0x2f
   232ec:	bne	232bc <__assert_fail@plt+0x10618>
   232f0:	mov	r1, #0
   232f4:	b	23304 <__assert_fail@plt+0x10660>
   232f8:	ldrb	r2, [r3]
   232fc:	cmp	r2, #47	; 0x2f
   23300:	bne	232bc <__assert_fail@plt+0x10618>
   23304:	strb	r1, [r3], #-1
   23308:	cmp	r4, r3
   2330c:	bne	232f8 <__assert_fail@plt+0x10654>
   23310:	mov	r0, r4
   23314:	pop	{r4, pc}
   23318:	ldr	r0, [pc]	; 23320 <__assert_fail@plt+0x1067c>
   2331c:	bx	lr
   23320:	andeq	r3, r3, r0, asr #19
   23324:	push	{r4, lr}
   23328:	ldr	r0, [pc, #80]	; 23380 <__assert_fail@plt+0x106dc>
   2332c:	bl	127c4 <getenv@plt>
   23330:	subs	r4, r0, #0
   23334:	beq	23344 <__assert_fail@plt+0x106a0>
   23338:	ldrb	r3, [r4]
   2333c:	cmp	r3, #0
   23340:	bne	23350 <__assert_fail@plt+0x106ac>
   23344:	ldr	r4, [pc, #56]	; 23384 <__assert_fail@plt+0x106e0>
   23348:	mov	r0, r4
   2334c:	pop	{r4, pc}
   23350:	bl	23290 <__assert_fail@plt+0x105ec>
   23354:	cmp	r0, #0
   23358:	movne	r4, r0
   2335c:	mov	r0, r4
   23360:	bl	2318c <__assert_fail@plt+0x104e8>
   23364:	cmp	r0, #0
   23368:	bne	23348 <__assert_fail@plt+0x106a4>
   2336c:	ldr	r3, [pc, #20]	; 23388 <__assert_fail@plt+0x106e4>
   23370:	mov	r2, #1
   23374:	mov	r0, r4
   23378:	strb	r2, [r3, #4]
   2337c:	pop	{r4, pc}
   23380:	andeq	r3, r3, r8, ror #19
   23384:	andeq	r3, r3, r0, asr #19
   23388:	andeq	r6, r4, r4, asr #5
   2338c:	push	{r4, r5, r6, lr}
   23390:	subs	r4, r0, #0
   23394:	beq	233a4 <__assert_fail@plt+0x10700>
   23398:	ldrb	r3, [r4]
   2339c:	cmp	r3, #0
   233a0:	bne	233d8 <__assert_fail@plt+0x10734>
   233a4:	bl	23324 <__assert_fail@plt+0x10680>
   233a8:	ldr	r5, [pc, #80]	; 23400 <__assert_fail@plt+0x1075c>
   233ac:	mov	r6, #0
   233b0:	mov	r4, r0
   233b4:	ldr	r0, [r5, #8]
   233b8:	bl	125e4 <gcry_free@plt>
   233bc:	mov	r0, r4
   233c0:	mov	r1, #0
   233c4:	bl	1c864 <__assert_fail@plt+0x9bc0>
   233c8:	str	r0, [r5, #8]
   233cc:	mov	r0, r6
   233d0:	pop	{r4, r5, r6, lr}
   233d4:	b	125e4 <gcry_free@plt>
   233d8:	bl	23290 <__assert_fail@plt+0x105ec>
   233dc:	ldr	r5, [pc, #28]	; 23400 <__assert_fail@plt+0x1075c>
   233e0:	subs	r6, r0, #0
   233e4:	movne	r4, r6
   233e8:	mov	r0, r4
   233ec:	bl	2318c <__assert_fail@plt+0x104e8>
   233f0:	cmp	r0, #0
   233f4:	moveq	r3, #1
   233f8:	strbeq	r3, [r5, #4]
   233fc:	b	233b4 <__assert_fail@plt+0x10710>
   23400:	andeq	r6, r4, r4, asr #5
   23404:	push	{r4, r5, r6, lr}
   23408:	ldr	r5, [pc, #44]	; 2343c <__assert_fail@plt+0x10798>
   2340c:	ldr	r4, [r5, #8]
   23410:	cmp	r4, #0
   23414:	beq	23420 <__assert_fail@plt+0x1077c>
   23418:	mov	r0, r4
   2341c:	pop	{r4, r5, r6, pc}
   23420:	bl	23324 <__assert_fail@plt+0x10680>
   23424:	mov	r1, r4
   23428:	bl	1c864 <__assert_fail@plt+0x9bc0>
   2342c:	mov	r4, r0
   23430:	str	r0, [r5, #8]
   23434:	mov	r0, r4
   23438:	pop	{r4, r5, r6, pc}
   2343c:	andeq	r6, r4, r4, asr #5
   23440:	ldr	r3, [pc, #12]	; 23454 <__assert_fail@plt+0x107b0>
   23444:	ldrb	r0, [r3, #4]
   23448:	clz	r0, r0
   2344c:	lsr	r0, r0, #5
   23450:	bx	lr
   23454:	andeq	r6, r4, r4, asr #5
   23458:	ldr	r0, [pc]	; 23460 <__assert_fail@plt+0x107bc>
   2345c:	bx	lr
   23460:	andeq	r2, r3, ip, lsr #28
   23464:	push	{r4, r5, r6, r7, r8, r9, lr}
   23468:	mov	r2, #0
   2346c:	ldr	r8, [pc, #884]	; 237e8 <__assert_fail@plt+0x10b44>
   23470:	sub	sp, sp, #188	; 0xbc
   23474:	mov	r7, r1
   23478:	ldr	r3, [r8]
   2347c:	str	r2, [r1]
   23480:	mov	r9, r0
   23484:	str	r3, [sp, #180]	; 0xb4
   23488:	bl	23404 <__assert_fail@plt+0x10760>
   2348c:	ldr	r5, [pc, #856]	; 237ec <__assert_fail@plt+0x10b48>
   23490:	ldr	r4, [pc, #856]	; 237f0 <__assert_fail@plt+0x10b4c>
   23494:	ldr	r6, [pc, #856]	; 237f4 <__assert_fail@plt+0x10b50>
   23498:	bl	1253c <getuid@plt>
   2349c:	mov	r3, r4
   234a0:	mov	r2, r6
   234a4:	mov	r1, #47	; 0x2f
   234a8:	str	r0, [sp]
   234ac:	add	r0, sp, #132	; 0x84
   234b0:	bl	12a7c <gpgrt_snprintf@plt>
   234b4:	add	r2, sp, #8
   234b8:	add	r1, sp, #132	; 0x84
   234bc:	mov	r0, #3
   234c0:	bl	12bfc <__xstat64@plt>
   234c4:	cmp	r0, #0
   234c8:	bne	234dc <__assert_fail@plt+0x10838>
   234cc:	ldr	r3, [sp, #24]
   234d0:	and	r3, r3, #61440	; 0xf000
   234d4:	cmp	r3, #16384	; 0x4000
   234d8:	beq	23520 <__assert_fail@plt+0x1087c>
   234dc:	ldr	r4, [r5], #4
   234e0:	cmp	r4, #0
   234e4:	bne	23498 <__assert_fail@plt+0x107f4>
   234e8:	ldr	r3, [r7]
   234ec:	orr	r3, r3, #2
   234f0:	orr	r3, r3, #128	; 0x80
   234f4:	str	r3, [r7]
   234f8:	bl	23404 <__assert_fail@plt+0x10760>
   234fc:	bl	12a40 <gcry_xstrdup@plt>
   23500:	mov	r4, r0
   23504:	ldr	r2, [sp, #180]	; 0xb4
   23508:	ldr	r3, [r8]
   2350c:	mov	r0, r4
   23510:	cmp	r2, r3
   23514:	bne	237b0 <__assert_fail@plt+0x10b0c>
   23518:	add	sp, sp, #188	; 0xbc
   2351c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23520:	ldr	r4, [sp, #32]
   23524:	bl	1253c <getuid@plt>
   23528:	cmp	r4, r0
   2352c:	beq	23544 <__assert_fail@plt+0x108a0>
   23530:	ldr	r3, [r7]
   23534:	cmp	r9, #0
   23538:	orr	r3, r3, #4
   2353c:	str	r3, [r7]
   23540:	beq	234f0 <__assert_fail@plt+0x1084c>
   23544:	add	r0, sp, #132	; 0x84
   23548:	bl	128d8 <strlen@plt>
   2354c:	add	r2, r0, #7
   23550:	cmp	r2, #46	; 0x2e
   23554:	mov	r3, r0
   23558:	bls	23568 <__assert_fail@plt+0x108c4>
   2355c:	ldr	r3, [r7]
   23560:	orr	r3, r3, #1
   23564:	b	234f0 <__assert_fail@plt+0x1084c>
   23568:	ldr	r2, [pc, #648]	; 237f8 <__assert_fail@plt+0x10b54>
   2356c:	add	r1, sp, #132	; 0x84
   23570:	add	ip, r1, r0
   23574:	ldrb	lr, [r2, #6]
   23578:	ldrh	r1, [r2, #4]
   2357c:	ldr	r0, [r2]
   23580:	add	r2, sp, #132	; 0x84
   23584:	str	r0, [r2, r3]
   23588:	strh	r1, [ip, #4]
   2358c:	add	r2, sp, #8
   23590:	add	r1, sp, #132	; 0x84
   23594:	strb	lr, [ip, #6]
   23598:	mov	r0, #3
   2359c:	bl	12bfc <__xstat64@plt>
   235a0:	cmp	r0, #0
   235a4:	bne	23694 <__assert_fail@plt+0x109f0>
   235a8:	ldr	r3, [sp, #24]
   235ac:	and	r3, r3, #61440	; 0xf000
   235b0:	cmp	r3, #16384	; 0x4000
   235b4:	beq	236e0 <__assert_fail@plt+0x10a3c>
   235b8:	ldr	r3, [r7]
   235bc:	cmp	r9, #0
   235c0:	orr	r3, r3, #4
   235c4:	str	r3, [r7]
   235c8:	beq	234f0 <__assert_fail@plt+0x1084c>
   235cc:	ldr	r3, [pc, #552]	; 237fc <__assert_fail@plt+0x10b58>
   235d0:	ldrb	r3, [r3, #4]
   235d4:	cmp	r3, #0
   235d8:	beq	236c4 <__assert_fail@plt+0x10a20>
   235dc:	ldr	r3, [r7]
   235e0:	orr	r3, r3, #32
   235e4:	str	r3, [r7]
   235e8:	bl	23404 <__assert_fail@plt+0x10760>
   235ec:	mov	r4, r0
   235f0:	bl	128d8 <strlen@plt>
   235f4:	mov	r2, r4
   235f8:	add	r1, sp, #112	; 0x70
   235fc:	mov	r3, r0
   23600:	mov	r0, #2
   23604:	bl	12aa0 <gcry_md_hash_buffer@plt>
   23608:	add	r0, sp, #112	; 0x70
   2360c:	mov	r1, #120	; 0x78
   23610:	bl	26030 <__assert_fail@plt+0x1338c>
   23614:	subs	r5, r0, #0
   23618:	beq	2355c <__assert_fail@plt+0x108b8>
   2361c:	mov	r3, #0
   23620:	mov	r2, r5
   23624:	ldr	r1, [pc, #468]	; 23800 <__assert_fail@plt+0x10b5c>
   23628:	add	r0, sp, #132	; 0x84
   2362c:	bl	1cdb0 <__assert_fail@plt+0xa10c>
   23630:	mov	r4, r0
   23634:	mov	r0, r5
   23638:	bl	125e4 <gcry_free@plt>
   2363c:	cmp	r4, #0
   23640:	beq	23744 <__assert_fail@plt+0x10aa0>
   23644:	add	r2, sp, #8
   23648:	mov	r1, r4
   2364c:	mov	r0, #3
   23650:	bl	12bfc <__xstat64@plt>
   23654:	cmp	r0, #0
   23658:	beq	2371c <__assert_fail@plt+0x10a78>
   2365c:	bl	12968 <__errno_location@plt>
   23660:	ldr	r3, [r0]
   23664:	mov	r5, r0
   23668:	cmp	r3, #2
   2366c:	beq	23754 <__assert_fail@plt+0x10ab0>
   23670:	ldr	r3, [r7]
   23674:	cmp	r9, #0
   23678:	orr	r3, r3, #1
   2367c:	str	r3, [r7]
   23680:	bne	23504 <__assert_fail@plt+0x10860>
   23684:	mov	r0, r4
   23688:	bl	125e4 <gcry_free@plt>
   2368c:	ldr	r3, [r7]
   23690:	b	234f0 <__assert_fail@plt+0x1084c>
   23694:	bl	12968 <__errno_location@plt>
   23698:	ldr	r3, [r0]
   2369c:	cmp	r3, #2
   236a0:	bne	2355c <__assert_fail@plt+0x108b8>
   236a4:	ldr	r1, [pc, #344]	; 23804 <__assert_fail@plt+0x10b60>
   236a8:	add	r0, sp, #132	; 0x84
   236ac:	bl	22b38 <__assert_fail@plt+0xfe94>
   236b0:	cmp	r0, #0
   236b4:	beq	23700 <__assert_fail@plt+0x10a5c>
   236b8:	ldr	r3, [r7]
   236bc:	orr	r3, r3, #16
   236c0:	b	234f0 <__assert_fail@plt+0x1084c>
   236c4:	add	r0, sp, #132	; 0x84
   236c8:	bl	12a40 <gcry_xstrdup@plt>
   236cc:	mov	r4, r0
   236d0:	cmp	r4, #0
   236d4:	bne	23504 <__assert_fail@plt+0x10860>
   236d8:	ldr	r3, [r7]
   236dc:	b	234f0 <__assert_fail@plt+0x1084c>
   236e0:	ldr	r4, [sp, #32]
   236e4:	bl	1253c <getuid@plt>
   236e8:	cmp	r4, r0
   236ec:	bne	235b8 <__assert_fail@plt+0x10914>
   236f0:	ldr	r3, [sp, #24]
   236f4:	tst	r3, #63	; 0x3f
   236f8:	bne	235b8 <__assert_fail@plt+0x10914>
   236fc:	b	235cc <__assert_fail@plt+0x10928>
   23700:	add	r2, sp, #8
   23704:	add	r1, sp, #132	; 0x84
   23708:	mov	r0, #3
   2370c:	bl	12bfc <__xstat64@plt>
   23710:	cmp	r0, #0
   23714:	beq	235a8 <__assert_fail@plt+0x10904>
   23718:	b	2355c <__assert_fail@plt+0x108b8>
   2371c:	ldr	r3, [sp, #24]
   23720:	and	r3, r3, #61440	; 0xf000
   23724:	cmp	r3, #16384	; 0x4000
   23728:	beq	2376c <__assert_fail@plt+0x10ac8>
   2372c:	ldr	r3, [r7]
   23730:	cmp	r9, #0
   23734:	orr	r3, r3, #8
   23738:	str	r3, [r7]
   2373c:	bne	23504 <__assert_fail@plt+0x10860>
   23740:	b	23684 <__assert_fail@plt+0x109e0>
   23744:	ldr	r3, [r7]
   23748:	orr	r3, r3, #1
   2374c:	str	r3, [r7]
   23750:	b	234f0 <__assert_fail@plt+0x1084c>
   23754:	cmp	r9, #0
   23758:	beq	2378c <__assert_fail@plt+0x10ae8>
   2375c:	ldr	r3, [r7]
   23760:	orr	r3, r3, #64	; 0x40
   23764:	str	r3, [r7]
   23768:	b	23504 <__assert_fail@plt+0x10860>
   2376c:	ldr	r5, [sp, #32]
   23770:	bl	1253c <getuid@plt>
   23774:	cmp	r5, r0
   23778:	bne	2372c <__assert_fail@plt+0x10a88>
   2377c:	ldr	r3, [sp, #24]
   23780:	tst	r3, #63	; 0x3f
   23784:	bne	2372c <__assert_fail@plt+0x10a88>
   23788:	b	23504 <__assert_fail@plt+0x10860>
   2378c:	ldr	r1, [pc, #112]	; 23804 <__assert_fail@plt+0x10b60>
   23790:	mov	r0, r4
   23794:	bl	22b38 <__assert_fail@plt+0xfe94>
   23798:	cmp	r0, #0
   2379c:	beq	237b4 <__assert_fail@plt+0x10b10>
   237a0:	ldr	r3, [r7]
   237a4:	orr	r3, r3, #16
   237a8:	str	r3, [r7]
   237ac:	b	23684 <__assert_fail@plt+0x109e0>
   237b0:	bl	1262c <__stack_chk_fail@plt>
   237b4:	add	r2, sp, #8
   237b8:	add	r1, sp, #132	; 0x84
   237bc:	mov	r0, #3
   237c0:	bl	12bfc <__xstat64@plt>
   237c4:	cmp	r0, #0
   237c8:	beq	236d0 <__assert_fail@plt+0x10a2c>
   237cc:	ldr	r2, [r5]
   237d0:	ldr	r3, [r7]
   237d4:	cmp	r2, #2
   237d8:	orrne	r3, r3, #1
   237dc:	orreq	r3, r3, #64	; 0x40
   237e0:	str	r3, [r7]
   237e4:	b	23684 <__assert_fail@plt+0x109e0>
   237e8:	strdeq	r5, [r4], -r8
   237ec:	andeq	r3, r3, r4, lsl #19
   237f0:	andeq	r3, r3, ip, lsl #24
   237f4:	strdeq	r3, [r3], -r4
   237f8:	andeq	r3, r3, r8, lsl sl
   237fc:	andeq	r6, r4, r4, asr #5
   23800:	andeq	r3, r3, r0, lsl #20
   23804:	andeq	r1, r3, r4, ror #8
   23808:	push	{r4, r5, lr}
   2380c:	sub	sp, sp, #12
   23810:	ldr	r5, [pc, #64]	; 23858 <__assert_fail@plt+0x10bb4>
   23814:	ldr	r4, [pc, #64]	; 2385c <__assert_fail@plt+0x10bb8>
   23818:	ldr	r0, [r5, #12]
   2381c:	ldr	r3, [r4]
   23820:	cmp	r0, #0
   23824:	str	r3, [sp, #4]
   23828:	beq	23844 <__assert_fail@plt+0x10ba0>
   2382c:	ldr	r2, [sp, #4]
   23830:	ldr	r3, [r4]
   23834:	cmp	r2, r3
   23838:	bne	23854 <__assert_fail@plt+0x10bb0>
   2383c:	add	sp, sp, #12
   23840:	pop	{r4, r5, pc}
   23844:	mov	r1, sp
   23848:	bl	23464 <__assert_fail@plt+0x107c0>
   2384c:	str	r0, [r5, #12]
   23850:	b	2382c <__assert_fail@plt+0x10b88>
   23854:	bl	1262c <__stack_chk_fail@plt>
   23858:	andeq	r6, r4, r4, asr #5
   2385c:	strdeq	r5, [r4], -r8
   23860:	ldr	r0, [pc]	; 23868 <__assert_fail@plt+0x10bc4>
   23864:	bx	lr
   23868:	andeq	r3, r3, r4, lsl #20
   2386c:	ldr	r0, [pc]	; 23874 <__assert_fail@plt+0x10bd0>
   23870:	bx	lr
   23874:	andeq	r3, r3, r0, lsl sl
   23878:	ldr	r0, [pc]	; 23880 <__assert_fail@plt+0x10bdc>
   2387c:	bx	lr
   23880:	andeq	r3, r3, r0, lsr #20
   23884:	ldr	r0, [pc]	; 2388c <__assert_fail@plt+0x10be8>
   23888:	bx	lr
   2388c:	andeq	r3, r3, r4, asr #20
   23890:	ldr	r0, [pc]	; 23898 <__assert_fail@plt+0x10bf4>
   23894:	bx	lr
   23898:	andeq	r3, r3, r8, asr sl
   2389c:	ldr	r0, [pc]	; 238a4 <__assert_fail@plt+0x10c00>
   238a0:	bx	lr
   238a4:	andeq	r3, r3, ip, ror #20
   238a8:	push	{r4, r5, lr}
   238ac:	sub	sp, sp, #12
   238b0:	ldr	r5, [pc, #96]	; 23918 <__assert_fail@plt+0x10c74>
   238b4:	ldr	r4, [pc, #96]	; 2391c <__assert_fail@plt+0x10c78>
   238b8:	ldr	r0, [r5, #16]
   238bc:	ldr	r3, [r4]
   238c0:	cmp	r0, #0
   238c4:	str	r3, [sp, #4]
   238c8:	beq	238e4 <__assert_fail@plt+0x10c40>
   238cc:	ldr	r2, [sp, #4]
   238d0:	ldr	r3, [r4]
   238d4:	cmp	r2, r3
   238d8:	bne	23914 <__assert_fail@plt+0x10c70>
   238dc:	add	sp, sp, #12
   238e0:	pop	{r4, r5, pc}
   238e4:	ldr	r0, [r5, #12]
   238e8:	cmp	r0, #0
   238ec:	beq	23904 <__assert_fail@plt+0x10c60>
   238f0:	mov	r2, #0
   238f4:	ldr	r1, [pc, #36]	; 23920 <__assert_fail@plt+0x10c7c>
   238f8:	bl	1c7b4 <__assert_fail@plt+0x9b10>
   238fc:	str	r0, [r5, #16]
   23900:	b	238cc <__assert_fail@plt+0x10c28>
   23904:	mov	r1, sp
   23908:	bl	23464 <__assert_fail@plt+0x107c0>
   2390c:	str	r0, [r5, #12]
   23910:	b	238f0 <__assert_fail@plt+0x10c4c>
   23914:	bl	1262c <__stack_chk_fail@plt>
   23918:	andeq	r6, r4, r4, asr #5
   2391c:	strdeq	r5, [r4], -r8
   23920:	andeq	r3, r3, r0, lsl #21
   23924:	push	{r4, lr}
   23928:	ldr	r4, [pc, #72]	; 23978 <__assert_fail@plt+0x10cd4>
   2392c:	ldr	r3, [r4, #20]
   23930:	cmp	r3, #0
   23934:	bne	23950 <__assert_fail@plt+0x10cac>
   23938:	ldr	r3, [r4, #24]
   2393c:	cmp	r3, #0
   23940:	bne	23964 <__assert_fail@plt+0x10cc0>
   23944:	bl	12c68 <gcry_strdup@plt>
   23948:	str	r0, [r4, #24]
   2394c:	pop	{r4, pc}
   23950:	ldr	r3, [pc, #36]	; 2397c <__assert_fail@plt+0x10cd8>
   23954:	ldr	r2, [pc, #36]	; 23980 <__assert_fail@plt+0x10cdc>
   23958:	ldr	r1, [pc, #36]	; 23984 <__assert_fail@plt+0x10ce0>
   2395c:	ldr	r0, [pc, #36]	; 23988 <__assert_fail@plt+0x10ce4>
   23960:	bl	22044 <__assert_fail@plt+0xf3a0>
   23964:	ldr	r3, [pc, #16]	; 2397c <__assert_fail@plt+0x10cd8>
   23968:	ldr	r2, [pc, #28]	; 2398c <__assert_fail@plt+0x10ce8>
   2396c:	ldr	r1, [pc, #16]	; 23984 <__assert_fail@plt+0x10ce0>
   23970:	ldr	r0, [pc, #24]	; 23990 <__assert_fail@plt+0x10cec>
   23974:	bl	22044 <__assert_fail@plt+0xf3a0>
   23978:	andeq	r6, r4, r4, asr #5
   2397c:	andeq	r3, r3, ip, lsl #19
   23980:	andeq	r0, r0, sp, lsl #8
   23984:	andeq	r3, r3, ip, lsl #21
   23988:	andeq	r3, r3, r4, lsr #21
   2398c:	andeq	r0, r0, lr, lsl #8
   23990:	andeq	r3, r3, r0, asr #21
   23994:	push	{r4, lr}
   23998:	mov	r3, #1
   2399c:	ldr	r4, [pc, #664]	; 23c3c <__assert_fail@plt+0x10f98>
   239a0:	sub	r0, r0, #1
   239a4:	str	r3, [r4, #20]
   239a8:	cmp	r0, #11
   239ac:	ldrls	pc, [pc, r0, lsl #2]
   239b0:	b	23c2c <__assert_fail@plt+0x10f88>
   239b4:	andeq	r3, r2, r8, lsl sl
   239b8:	andeq	r3, r2, ip, asr #20
   239bc:	andeq	r3, r2, r8, asr sl
   239c0:	andeq	r3, r2, ip, lsl #21
   239c4:	andeq	r3, r2, r0, asr #21
   239c8:	strdeq	r3, [r2], -r4
   239cc:	andeq	r3, r2, r8, lsr #22
   239d0:	andeq	r3, r2, ip, asr fp
   239d4:	muleq	r2, r0, fp
   239d8:	andeq	r3, r2, r4, asr #23
   239dc:	strdeq	r3, [r2], -r8
   239e0:	andeq	r3, r2, r4, ror #19
   239e4:	ldr	r0, [r4, #60]	; 0x3c
   239e8:	cmp	r0, #0
   239ec:	popne	{r4, pc}
   239f0:	ldr	r3, [r4, #24]
   239f4:	mov	r2, r0
   239f8:	cmp	r3, #0
   239fc:	movne	r0, r3
   23a00:	ldrne	r1, [pc, #568]	; 23c40 <__assert_fail@plt+0x10f9c>
   23a04:	ldreq	r1, [pc, #568]	; 23c44 <__assert_fail@plt+0x10fa0>
   23a08:	ldreq	r0, [pc, #568]	; 23c48 <__assert_fail@plt+0x10fa4>
   23a0c:	bl	1ce1c <__assert_fail@plt+0xa178>
   23a10:	str	r0, [r4, #60]	; 0x3c
   23a14:	pop	{r4, pc}
   23a18:	ldr	r0, [r4, #28]
   23a1c:	cmp	r0, #0
   23a20:	popne	{r4, pc}
   23a24:	ldr	r3, [r4, #24]
   23a28:	mov	r2, r0
   23a2c:	cmp	r3, #0
   23a30:	movne	r0, r3
   23a34:	ldrne	r1, [pc, #528]	; 23c4c <__assert_fail@plt+0x10fa8>
   23a38:	ldreq	r1, [pc, #528]	; 23c50 <__assert_fail@plt+0x10fac>
   23a3c:	ldreq	r0, [pc, #516]	; 23c48 <__assert_fail@plt+0x10fa4>
   23a40:	bl	1ce1c <__assert_fail@plt+0xa178>
   23a44:	str	r0, [r4, #28]
   23a48:	pop	{r4, pc}
   23a4c:	mov	r0, #0
   23a50:	pop	{r4, lr}
   23a54:	b	231dc <__assert_fail@plt+0x10538>
   23a58:	ldr	r0, [r4, #32]
   23a5c:	cmp	r0, #0
   23a60:	popne	{r4, pc}
   23a64:	ldr	r3, [r4, #24]
   23a68:	mov	r2, r0
   23a6c:	cmp	r3, #0
   23a70:	movne	r0, r3
   23a74:	ldrne	r1, [pc, #472]	; 23c54 <__assert_fail@plt+0x10fb0>
   23a78:	ldreq	r1, [pc, #472]	; 23c58 <__assert_fail@plt+0x10fb4>
   23a7c:	ldreq	r0, [pc, #472]	; 23c5c <__assert_fail@plt+0x10fb8>
   23a80:	bl	1ce1c <__assert_fail@plt+0xa178>
   23a84:	str	r0, [r4, #32]
   23a88:	pop	{r4, pc}
   23a8c:	ldr	r0, [r4, #36]	; 0x24
   23a90:	cmp	r0, #0
   23a94:	popne	{r4, pc}
   23a98:	ldr	r3, [r4, #24]
   23a9c:	mov	r2, r0
   23aa0:	cmp	r3, #0
   23aa4:	movne	r0, r3
   23aa8:	ldrne	r1, [pc, #432]	; 23c60 <__assert_fail@plt+0x10fbc>
   23aac:	ldreq	r1, [pc, #432]	; 23c64 <__assert_fail@plt+0x10fc0>
   23ab0:	ldreq	r0, [pc, #400]	; 23c48 <__assert_fail@plt+0x10fa4>
   23ab4:	bl	1ce1c <__assert_fail@plt+0xa178>
   23ab8:	str	r0, [r4, #36]	; 0x24
   23abc:	pop	{r4, pc}
   23ac0:	ldr	r0, [r4, #40]	; 0x28
   23ac4:	cmp	r0, #0
   23ac8:	popne	{r4, pc}
   23acc:	ldr	r3, [r4, #24]
   23ad0:	mov	r2, r0
   23ad4:	cmp	r3, #0
   23ad8:	movne	r0, r3
   23adc:	ldrne	r1, [pc, #388]	; 23c68 <__assert_fail@plt+0x10fc4>
   23ae0:	ldreq	r1, [pc, #388]	; 23c6c <__assert_fail@plt+0x10fc8>
   23ae4:	ldreq	r0, [pc, #368]	; 23c5c <__assert_fail@plt+0x10fb8>
   23ae8:	bl	1ce1c <__assert_fail@plt+0xa178>
   23aec:	str	r0, [r4, #40]	; 0x28
   23af0:	pop	{r4, pc}
   23af4:	ldr	r0, [r4, #48]	; 0x30
   23af8:	cmp	r0, #0
   23afc:	popne	{r4, pc}
   23b00:	ldr	r3, [r4, #24]
   23b04:	mov	r2, r0
   23b08:	cmp	r3, #0
   23b0c:	movne	r0, r3
   23b10:	ldrne	r1, [pc, #344]	; 23c70 <__assert_fail@plt+0x10fcc>
   23b14:	ldreq	r1, [pc, #344]	; 23c74 <__assert_fail@plt+0x10fd0>
   23b18:	ldreq	r0, [pc, #316]	; 23c5c <__assert_fail@plt+0x10fb8>
   23b1c:	bl	1ce1c <__assert_fail@plt+0xa178>
   23b20:	str	r0, [r4, #48]	; 0x30
   23b24:	pop	{r4, pc}
   23b28:	ldr	r0, [r4, #52]	; 0x34
   23b2c:	cmp	r0, #0
   23b30:	popne	{r4, pc}
   23b34:	ldr	r3, [r4, #24]
   23b38:	mov	r2, r0
   23b3c:	cmp	r3, #0
   23b40:	movne	r0, r3
   23b44:	ldrne	r1, [pc, #300]	; 23c78 <__assert_fail@plt+0x10fd4>
   23b48:	ldreq	r1, [pc, #300]	; 23c7c <__assert_fail@plt+0x10fd8>
   23b4c:	ldreq	r0, [pc, #244]	; 23c48 <__assert_fail@plt+0x10fa4>
   23b50:	bl	1ce1c <__assert_fail@plt+0xa178>
   23b54:	str	r0, [r4, #52]	; 0x34
   23b58:	pop	{r4, pc}
   23b5c:	ldr	r0, [r4, #56]	; 0x38
   23b60:	cmp	r0, #0
   23b64:	popne	{r4, pc}
   23b68:	ldr	r3, [r4, #24]
   23b6c:	mov	r2, r0
   23b70:	cmp	r3, #0
   23b74:	movne	r0, r3
   23b78:	ldrne	r1, [pc, #256]	; 23c80 <__assert_fail@plt+0x10fdc>
   23b7c:	ldreq	r1, [pc, #256]	; 23c84 <__assert_fail@plt+0x10fe0>
   23b80:	ldreq	r0, [pc, #192]	; 23c48 <__assert_fail@plt+0x10fa4>
   23b84:	bl	1ce1c <__assert_fail@plt+0xa178>
   23b88:	str	r0, [r4, #56]	; 0x38
   23b8c:	pop	{r4, pc}
   23b90:	ldr	r0, [r4, #64]	; 0x40
   23b94:	cmp	r0, #0
   23b98:	popne	{r4, pc}
   23b9c:	ldr	r3, [r4, #24]
   23ba0:	mov	r2, r0
   23ba4:	cmp	r3, #0
   23ba8:	movne	r0, r3
   23bac:	ldrne	r1, [pc, #212]	; 23c88 <__assert_fail@plt+0x10fe4>
   23bb0:	ldreq	r1, [pc, #212]	; 23c8c <__assert_fail@plt+0x10fe8>
   23bb4:	ldreq	r0, [pc, #140]	; 23c48 <__assert_fail@plt+0x10fa4>
   23bb8:	bl	1ce1c <__assert_fail@plt+0xa178>
   23bbc:	str	r0, [r4, #64]	; 0x40
   23bc0:	pop	{r4, pc}
   23bc4:	ldr	r0, [r4, #68]	; 0x44
   23bc8:	cmp	r0, #0
   23bcc:	popne	{r4, pc}
   23bd0:	ldr	r3, [r4, #24]
   23bd4:	mov	r2, r0
   23bd8:	cmp	r3, #0
   23bdc:	movne	r0, r3
   23be0:	ldrne	r1, [pc, #168]	; 23c90 <__assert_fail@plt+0x10fec>
   23be4:	ldreq	r1, [pc, #168]	; 23c94 <__assert_fail@plt+0x10ff0>
   23be8:	ldreq	r0, [pc, #88]	; 23c48 <__assert_fail@plt+0x10fa4>
   23bec:	bl	1ce1c <__assert_fail@plt+0xa178>
   23bf0:	str	r0, [r4, #68]	; 0x44
   23bf4:	pop	{r4, pc}
   23bf8:	ldr	r0, [r4, #44]	; 0x2c
   23bfc:	cmp	r0, #0
   23c00:	popne	{r4, pc}
   23c04:	ldr	r3, [r4, #24]
   23c08:	mov	r2, r0
   23c0c:	cmp	r3, #0
   23c10:	movne	r0, r3
   23c14:	ldrne	r1, [pc, #124]	; 23c98 <__assert_fail@plt+0x10ff4>
   23c18:	ldreq	r1, [pc, #124]	; 23c9c <__assert_fail@plt+0x10ff8>
   23c1c:	ldreq	r0, [pc, #56]	; 23c5c <__assert_fail@plt+0x10fb8>
   23c20:	bl	1ce1c <__assert_fail@plt+0xa178>
   23c24:	str	r0, [r4, #44]	; 0x2c
   23c28:	pop	{r4, pc}
   23c2c:	ldr	r2, [pc, #108]	; 23ca0 <__assert_fail@plt+0x10ffc>
   23c30:	ldr	r1, [pc, #108]	; 23ca4 <__assert_fail@plt+0x11000>
   23c34:	ldr	r0, [pc, #108]	; 23ca8 <__assert_fail@plt+0x11004>
   23c38:	bl	2201c <__assert_fail@plt+0xf378>
   23c3c:	andeq	r6, r4, r4, asr #5
   23c40:			; <UNDEFINED> instruction: 0x00033bb0
   23c44:			; <UNDEFINED> instruction: 0x00033bb4
   23c48:			; <UNDEFINED> instruction: 0x000339b4
   23c4c:	ldrdeq	r3, [r3], -r8
   23c50:	andeq	r3, r3, ip, ror #21
   23c54:	strdeq	r3, [r3], -r8
   23c58:	strdeq	r3, [r3], -ip
   23c5c:	andeq	r3, r3, r0, lsl sl
   23c60:	andeq	r3, r3, r8, lsl #22
   23c64:	andeq	r3, r3, r0, lsl fp
   23c68:	andeq	r3, r3, ip, lsl fp
   23c6c:	andeq	r3, r3, r4, lsr fp
   23c70:	andeq	r3, r3, r0, ror #22
   23c74:	andeq	r3, r3, ip, ror fp
   23c78:	muleq	r3, r0, fp
   23c7c:	muleq	r3, ip, fp
   23c80:	andeq	r3, r3, r4, lsr #23
   23c84:	andeq	r3, r3, r8, lsr #23
   23c88:			; <UNDEFINED> instruction: 0x00033bbc
   23c8c:	ldrdeq	r3, [r3], -r8
   23c90:	andeq	r3, r3, ip, ror #23
   23c94:	strdeq	r3, [r3], -ip
   23c98:	andeq	r3, r3, r8, asr #22
   23c9c:	andeq	r3, r3, r0, asr fp
   23ca0:	andeq	r3, r3, r0, lsr #19
   23ca4:	andeq	r0, r0, lr, ror r4
   23ca8:	andeq	r3, r3, ip, lsl #21
   23cac:	mov	r0, #1
   23cb0:	b	231dc <__assert_fail@plt+0x10538>
   23cb4:	andeq	r0, r0, r0
   23cb8:	add	ip, r0, r0, lsl #3
   23cbc:	sub	r3, r1, #1
   23cc0:	add	ip, r0, ip, lsl #3
   23cc4:	cmp	r1, #2
   23cc8:	add	ip, ip, ip, lsl #2
   23ccc:	rsb	r3, r3, r3, lsl #5
   23cd0:	add	r3, r3, ip
   23cd4:	lslgt	r1, r1, #2
   23cd8:	add	r2, r3, r2
   23cdc:	ldrgt	r3, [pc, #88]	; 23d3c <__assert_fail@plt+0x11098>
   23ce0:	addgt	r1, r1, #23
   23ce4:	ldr	ip, [pc, #84]	; 23d40 <__assert_fail@plt+0x1109c>
   23ce8:	suble	r0, r0, #1
   23cec:	umullgt	r3, r1, r3, r1
   23cf0:	push	{lr}		; (str lr, [sp, #-4]!)
   23cf4:	smull	lr, ip, ip, r0
   23cf8:	add	r2, r2, #1720320	; 0x1a4000
   23cfc:	add	r2, r2, #740	; 0x2e4
   23d00:	subgt	r2, r2, r1, lsr #3
   23d04:	asr	r1, r0, #31
   23d08:	add	r3, r0, #3
   23d0c:	cmp	r0, #0
   23d10:	rsb	r1, r1, ip, asr #5
   23d14:	movlt	r0, r3
   23d18:	add	r1, r1, #1
   23d1c:	asr	r3, r0, #2
   23d20:	add	r0, r1, r1, lsl #1
   23d24:	add	r1, r0, #3
   23d28:	cmp	r0, #0
   23d2c:	movlt	r0, r1
   23d30:	sub	r0, r3, r0, asr #2
   23d34:	add	r0, r0, r2
   23d38:	pop	{pc}		; (ldr pc, [sp], #4)
   23d3c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   23d40:	mvnpl	r8, pc, lsl r5
   23d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d48:	sub	r4, r0, #1720320	; 0x1a4000
   23d4c:	mov	r6, r0
   23d50:	ldr	r0, [pc, #592]	; 23fa8 <__assert_fail@plt+0x11304>
   23d54:	sub	sp, sp, #20
   23d58:	sub	r4, r4, #740	; 0x2e4
   23d5c:	str	r1, [sp, #4]
   23d60:	umull	r1, r4, r0, r4
   23d64:	ldr	r7, [pc, #576]	; 23fac <__assert_fail@plt+0x11308>
   23d68:	strd	r2, [sp, #8]
   23d6c:	lsr	r4, r4, #8
   23d70:	ldr	r8, [pc, #568]	; 23fb0 <__assert_fail@plt+0x1130c>
   23d74:	ldr	r5, [pc, #568]	; 23fb4 <__assert_fail@plt+0x11310>
   23d78:	b	23d80 <__assert_fail@plt+0x110dc>
   23d7c:	add	r4, r4, #1
   23d80:	mov	r2, #1
   23d84:	mov	r1, r2
   23d88:	mov	r0, r4
   23d8c:	bl	23cb8 <__assert_fail@plt+0x11014>
   23d90:	umull	r3, r2, r7, r4
   23d94:	lsr	r3, r2, #5
   23d98:	add	r3, r3, r3, lsl #2
   23d9c:	add	r3, r3, r3, lsl #2
   23da0:	cmp	r4, r3, lsl #2
   23da4:	sub	r0, r6, r0
   23da8:	bne	23dc4 <__assert_fail@plt+0x11120>
   23dac:	lsr	r2, r2, #7
   23db0:	add	r2, r2, r2, lsl #2
   23db4:	add	r2, r2, r2, lsl #2
   23db8:	cmp	r4, r2, lsl #4
   23dbc:	movne	r3, r5
   23dc0:	bne	23dd0 <__assert_fail@plt+0x1112c>
   23dc4:	tst	r4, #3
   23dc8:	moveq	r3, r8
   23dcc:	movne	r3, r5
   23dd0:	cmp	r0, r3
   23dd4:	bgt	23d7c <__assert_fail@plt+0x110d8>
   23dd8:	ldr	r3, [pc, #472]	; 23fb8 <__assert_fail@plt+0x11314>
   23ddc:	asr	r5, r0, #31
   23de0:	ldr	sl, [pc, #452]	; 23fac <__assert_fail@plt+0x11308>
   23de4:	smull	r2, r3, r3, r0
   23de8:	add	r0, r3, r0
   23dec:	rsb	r5, r5, r0, asr #4
   23df0:	add	r5, r5, #1
   23df4:	umull	r3, r7, sl, r4
   23df8:	add	r5, r5, #1
   23dfc:	lsr	r8, r7, #5
   23e00:	lsr	r7, r7, #7
   23e04:	add	r8, r8, r8, lsl #2
   23e08:	add	r7, r7, r7, lsl #2
   23e0c:	add	r8, r8, r8, lsl #2
   23e10:	add	r7, r7, r7, lsl #2
   23e14:	sub	r8, r4, r8, lsl #2
   23e18:	sub	r7, r4, r7, lsl #4
   23e1c:	and	r9, r4, #3
   23e20:	sub	fp, r5, #1
   23e24:	mov	r1, fp
   23e28:	mov	r2, #1
   23e2c:	mov	r0, r4
   23e30:	bl	23cb8 <__assert_fail@plt+0x11014>
   23e34:	sub	r3, fp, #1
   23e38:	sub	r0, r6, r0
   23e3c:	cmp	r3, #11
   23e40:	ldrls	pc, [pc, r3, lsl #2]
   23e44:	b	23f98 <__assert_fail@plt+0x112f4>
   23e48:	andeq	r3, r2, r8, ror lr
   23e4c:	andeq	r3, r2, ip, lsr pc
   23e50:	andeq	r3, r2, r8, ror lr
   23e54:	muleq	r2, r4, lr
   23e58:	andeq	r3, r2, r8, ror lr
   23e5c:	muleq	r2, r4, lr
   23e60:	andeq	r3, r2, r8, ror lr
   23e64:	andeq	r3, r2, r8, ror lr
   23e68:	muleq	r2, r4, lr
   23e6c:	andeq	r3, r2, r8, ror lr
   23e70:	muleq	r2, r4, lr
   23e74:	andeq	r3, r2, r8, ror lr
   23e78:	mov	r2, #31
   23e7c:	cmp	r0, r2
   23e80:	ble	23ea0 <__assert_fail@plt+0x111fc>
   23e84:	cmp	r5, #13
   23e88:	beq	23f7c <__assert_fail@plt+0x112d8>
   23e8c:	add	r5, r5, #1
   23e90:	b	23e20 <__assert_fail@plt+0x1117c>
   23e94:	mov	r2, #30
   23e98:	cmp	r0, r2
   23e9c:	bgt	23e84 <__assert_fail@plt+0x111e0>
   23ea0:	add	r0, r0, #1
   23ea4:	cmp	r0, r2
   23ea8:	ble	23f74 <__assert_fail@plt+0x112d0>
   23eac:	cmp	r5, #13
   23eb0:	mov	fp, r5
   23eb4:	moveq	fp, #1
   23eb8:	moveq	r0, fp
   23ebc:	moveq	r2, r4
   23ec0:	addeq	r4, r4, r0
   23ec4:	bne	23f8c <__assert_fail@plt+0x112e8>
   23ec8:	ldr	r3, [sp, #4]
   23ecc:	ldr	r1, [pc, #216]	; 23fac <__assert_fail@plt+0x11308>
   23ed0:	cmp	r2, #0
   23ed4:	str	r4, [r3]
   23ed8:	ldr	r3, [sp, #8]
   23edc:	str	fp, [r3]
   23ee0:	smull	r1, r3, r1, r2
   23ee4:	ldr	r1, [sp, #12]
   23ee8:	str	r0, [r1]
   23eec:	asr	r0, r2, #31
   23ef0:	rsb	r0, r0, r3, asr #5
   23ef4:	add	r3, r4, r4, lsl #3
   23ef8:	add	r0, r0, #1
   23efc:	add	r4, r4, r3, lsl #3
   23f00:	add	r0, r0, r0, lsl #1
   23f04:	add	r1, r2, #3
   23f08:	movlt	r2, r1
   23f0c:	add	r4, r4, r4, lsl #2
   23f10:	cmp	r0, #0
   23f14:	add	r3, r0, #3
   23f18:	sub	r6, r6, r4
   23f1c:	movge	r3, r0
   23f20:	asr	r2, r2, #2
   23f24:	sub	r0, r6, #1720320	; 0x1a4000
   23f28:	sub	r3, r2, r3, asr #2
   23f2c:	sub	r0, r0, #740	; 0x2e4
   23f30:	sub	r0, r0, r3
   23f34:	add	sp, sp, #20
   23f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f3c:	cmp	r8, #0
   23f40:	bne	23f50 <__assert_fail@plt+0x112ac>
   23f44:	cmp	r7, #0
   23f48:	movne	r3, #28
   23f4c:	bne	23f5c <__assert_fail@plt+0x112b8>
   23f50:	cmp	r9, #0
   23f54:	moveq	r3, #29
   23f58:	movne	r3, #28
   23f5c:	cmp	r0, r3
   23f60:	bgt	23e8c <__assert_fail@plt+0x111e8>
   23f64:	add	r0, r0, #1
   23f68:	cmp	r0, r3
   23f6c:	bgt	23f88 <__assert_fail@plt+0x112e4>
   23f70:	mov	fp, #2
   23f74:	sub	r2, r4, #1
   23f78:	b	23ec8 <__assert_fail@plt+0x11224>
   23f7c:	add	r4, r4, #1
   23f80:	mov	r5, #1
   23f84:	b	23df4 <__assert_fail@plt+0x11150>
   23f88:	mov	fp, #3
   23f8c:	sub	r2, r4, #1
   23f90:	mov	r0, #1
   23f94:	b	23ec8 <__assert_fail@plt+0x11224>
   23f98:	ldr	r2, [pc, #28]	; 23fbc <__assert_fail@plt+0x11318>
   23f9c:	ldr	r1, [pc, #28]	; 23fc0 <__assert_fail@plt+0x1131c>
   23fa0:	ldr	r0, [pc, #28]	; 23fc4 <__assert_fail@plt+0x11320>
   23fa4:	bl	2201c <__assert_fail@plt+0xf378>
   23fa8:	movwlt	r6, #62291	; 0xf353
   23fac:	mvnpl	r8, pc, lsl r5
   23fb0:	andeq	r0, r0, lr, ror #2
   23fb4:	andeq	r0, r0, sp, ror #2
   23fb8:	strthi	r0, [r1], #-2115	; 0xfffff7bd
   23fbc:	andeq	r3, r3, r4, lsl ip
   23fc0:	andeq	r0, r0, r3, lsl r3
   23fc4:	andeq	r3, r3, r4, lsr ip
   23fc8:	add	r1, r0, #8
   23fcc:	b	23fd4 <__assert_fail@plt+0x11330>
   23fd0:	mov	r0, r3
   23fd4:	mov	r3, r0
   23fd8:	ldrb	r2, [r3], #1
   23fdc:	sub	r2, r2, #48	; 0x30
   23fe0:	cmp	r2, #9
   23fe4:	bhi	24074 <__assert_fail@plt+0x113d0>
   23fe8:	cmp	r3, r1
   23fec:	bne	23fd0 <__assert_fail@plt+0x1132c>
   23ff0:	ldrb	r3, [r1]
   23ff4:	cmp	r3, #84	; 0x54
   23ff8:	bne	24074 <__assert_fail@plt+0x113d0>
   23ffc:	add	r3, r0, #2
   24000:	add	r0, r0, #8
   24004:	mov	r1, r3
   24008:	add	r3, r3, #1
   2400c:	ldrb	r2, [r1]
   24010:	sub	r2, r2, #48	; 0x30
   24014:	cmp	r2, #9
   24018:	bhi	24074 <__assert_fail@plt+0x113d0>
   2401c:	cmp	r3, r0
   24020:	bne	24004 <__assert_fail@plt+0x11360>
   24024:	push	{r4, lr}
   24028:	ldrb	r4, [r3]
   2402c:	cmp	r4, #90	; 0x5a
   24030:	ldrbeq	r4, [r1, #2]
   24034:	cmp	r4, #0
   24038:	beq	2407c <__assert_fail@plt+0x113d8>
   2403c:	tst	r4, #128	; 0x80
   24040:	bne	2405c <__assert_fail@plt+0x113b8>
   24044:	bl	12884 <__ctype_b_loc@plt>
   24048:	lsl	r3, r4, #1
   2404c:	ldr	r2, [r0]
   24050:	ldrh	r3, [r2, r3]
   24054:	tst	r3, #8192	; 0x2000
   24058:	bne	2407c <__assert_fail@plt+0x113d8>
   2405c:	cmp	r4, #44	; 0x2c
   24060:	cmpne	r4, #58	; 0x3a
   24064:	movne	r4, #1
   24068:	moveq	r4, #0
   2406c:	eor	r0, r4, #1
   24070:	pop	{r4, pc}
   24074:	mov	r0, #0
   24078:	bx	lr
   2407c:	mov	r0, #1
   24080:	pop	{r4, pc}
   24084:	add	r2, r0, #4
   24088:	ldrb	r3, [r0], #1
   2408c:	sub	r3, r3, #48	; 0x30
   24090:	cmp	r3, #9
   24094:	bhi	2427c <__assert_fail@plt+0x115d8>
   24098:	cmp	r0, r2
   2409c:	bne	24088 <__assert_fail@plt+0x113e4>
   240a0:	ldrb	r3, [r0]
   240a4:	cmp	r3, #45	; 0x2d
   240a8:	bne	2427c <__assert_fail@plt+0x115d8>
   240ac:	ldrb	r3, [r0, #1]
   240b0:	sub	r3, r3, #48	; 0x30
   240b4:	uxtb	r2, r3
   240b8:	cmp	r2, #9
   240bc:	bhi	2427c <__assert_fail@plt+0x115d8>
   240c0:	ldrb	r2, [r0, #2]
   240c4:	sub	r2, r2, #48	; 0x30
   240c8:	uxtb	ip, r2
   240cc:	cmp	ip, #9
   240d0:	bhi	2427c <__assert_fail@plt+0x115d8>
   240d4:	ldrb	ip, [r0, #3]
   240d8:	cmp	ip, #45	; 0x2d
   240dc:	bne	2427c <__assert_fail@plt+0x115d8>
   240e0:	add	r3, r3, r3, lsl #2
   240e4:	add	r3, r2, r3, lsl #1
   240e8:	sub	r3, r3, #1
   240ec:	cmp	r3, #11
   240f0:	bhi	2427c <__assert_fail@plt+0x115d8>
   240f4:	ldrb	r3, [r0, #4]
   240f8:	sub	r3, r3, #48	; 0x30
   240fc:	uxtb	r2, r3
   24100:	cmp	r2, #9
   24104:	bhi	2427c <__assert_fail@plt+0x115d8>
   24108:	ldrb	r2, [r0, #5]
   2410c:	sub	r2, r2, #48	; 0x30
   24110:	uxtb	ip, r2
   24114:	cmp	ip, #9
   24118:	bhi	2427c <__assert_fail@plt+0x115d8>
   2411c:	add	r3, r3, r3, lsl #2
   24120:	add	r3, r2, r3, lsl #1
   24124:	sub	r3, r3, #1
   24128:	cmp	r3, #30
   2412c:	bhi	2427c <__assert_fail@plt+0x115d8>
   24130:	ldrb	r2, [r0, #6]
   24134:	cmp	r2, #0
   24138:	sub	r3, r2, #44	; 0x2c
   2413c:	clz	r3, r3
   24140:	lsr	r3, r3, #5
   24144:	moveq	r3, #1
   24148:	cmp	r3, #0
   2414c:	bne	24284 <__assert_fail@plt+0x115e0>
   24150:	cmp	r2, #32
   24154:	cmpne	r2, #9
   24158:	bne	2427c <__assert_fail@plt+0x115d8>
   2415c:	cmp	r1, #0
   24160:	bne	24284 <__assert_fail@plt+0x115e0>
   24164:	ldrb	r3, [r0, #7]
   24168:	cmp	r3, #9
   2416c:	cmpne	r3, #32
   24170:	beq	24284 <__assert_fail@plt+0x115e0>
   24174:	sub	r3, r3, #48	; 0x30
   24178:	uxtb	r2, r3
   2417c:	cmp	r2, #9
   24180:	bhi	2427c <__assert_fail@plt+0x115d8>
   24184:	ldrb	r2, [r0, #8]
   24188:	sub	r2, r2, #48	; 0x30
   2418c:	uxtb	ip, r2
   24190:	cmp	ip, #9
   24194:	bhi	2427c <__assert_fail@plt+0x115d8>
   24198:	add	r3, r3, r3, lsl #2
   2419c:	add	r3, r2, r3, lsl #1
   241a0:	cmp	r3, #23
   241a4:	bgt	2427c <__assert_fail@plt+0x115d8>
   241a8:	ldrb	r3, [r0, #9]
   241ac:	cmp	r3, #44	; 0x2c
   241b0:	cmpne	r3, #0
   241b4:	beq	24284 <__assert_fail@plt+0x115e0>
   241b8:	cmp	r3, #58	; 0x3a
   241bc:	bne	2427c <__assert_fail@plt+0x115d8>
   241c0:	ldrb	r3, [r0, #10]
   241c4:	sub	r3, r3, #48	; 0x30
   241c8:	uxtb	r2, r3
   241cc:	cmp	r2, #9
   241d0:	bhi	2427c <__assert_fail@plt+0x115d8>
   241d4:	ldrb	r2, [r0, #11]
   241d8:	sub	r2, r2, #48	; 0x30
   241dc:	uxtb	r1, r2
   241e0:	cmp	r1, #9
   241e4:	bhi	2427c <__assert_fail@plt+0x115d8>
   241e8:	mov	ip, #10
   241ec:	mla	r3, ip, r3, r2
   241f0:	cmp	r3, #59	; 0x3b
   241f4:	bgt	2427c <__assert_fail@plt+0x115d8>
   241f8:	ldrb	r2, [r0, #12]
   241fc:	cmp	r2, #0
   24200:	sub	r3, r2, #44	; 0x2c
   24204:	clz	r3, r3
   24208:	lsr	r3, r3, #5
   2420c:	moveq	r3, #1
   24210:	cmp	r3, #0
   24214:	bne	24284 <__assert_fail@plt+0x115e0>
   24218:	cmp	r2, #58	; 0x3a
   2421c:	bne	2427c <__assert_fail@plt+0x115d8>
   24220:	ldrb	r2, [r0, #13]
   24224:	sub	r2, r2, #48	; 0x30
   24228:	uxtb	r1, r2
   2422c:	cmp	r1, #9
   24230:	bhi	2427c <__assert_fail@plt+0x115d8>
   24234:	push	{lr}		; (str lr, [sp, #-4]!)
   24238:	ldrb	r1, [r0, #14]
   2423c:	sub	r1, r1, #48	; 0x30
   24240:	uxtb	lr, r1
   24244:	cmp	lr, #9
   24248:	bhi	24294 <__assert_fail@plt+0x115f0>
   2424c:	mla	r2, ip, r2, r1
   24250:	cmp	r2, #60	; 0x3c
   24254:	bgt	24294 <__assert_fail@plt+0x115f0>
   24258:	ldrb	r0, [r0, #15]
   2425c:	and	r3, r0, #223	; 0xdf
   24260:	cmp	r3, #0
   24264:	cmpne	r0, #44	; 0x2c
   24268:	beq	2428c <__assert_fail@plt+0x115e8>
   2426c:	sub	r0, r0, #9
   24270:	clz	r0, r0
   24274:	lsr	r0, r0, #5
   24278:	pop	{pc}		; (ldr pc, [sp], #4)
   2427c:	mov	r0, #0
   24280:	bx	lr
   24284:	mov	r0, #1
   24288:	bx	lr
   2428c:	mov	r0, #1
   24290:	pop	{pc}		; (ldr pc, [sp], #4)
   24294:	mov	r0, r3
   24298:	pop	{pc}		; (ldr pc, [sp], #4)
   2429c:	add	r1, r0, #8
   242a0:	b	242a8 <__assert_fail@plt+0x11604>
   242a4:	mov	r0, r3
   242a8:	mov	r3, r0
   242ac:	ldrb	r2, [r3], #1
   242b0:	sub	r2, r2, #48	; 0x30
   242b4:	cmp	r2, #9
   242b8:	bhi	242f4 <__assert_fail@plt+0x11650>
   242bc:	cmp	r3, r1
   242c0:	bne	242a4 <__assert_fail@plt+0x11600>
   242c4:	ldrb	r3, [r1]
   242c8:	cmp	r3, #84	; 0x54
   242cc:	bne	242f4 <__assert_fail@plt+0x11650>
   242d0:	add	r0, r0, #7
   242d4:	ldrb	r3, [r1, #1]!
   242d8:	sub	r3, r3, #48	; 0x30
   242dc:	cmp	r3, #9
   242e0:	bhi	242f4 <__assert_fail@plt+0x11650>
   242e4:	cmp	r0, r1
   242e8:	bne	242d4 <__assert_fail@plt+0x11630>
   242ec:	mov	r0, #0
   242f0:	bx	lr
   242f4:	mov	r0, #161	; 0xa1
   242f8:	bx	lr
   242fc:	push	{r4, lr}
   24300:	mov	r0, #0
   24304:	bl	125d8 <time@plt>
   24308:	cmn	r0, #1
   2430c:	beq	24344 <__assert_fail@plt+0x116a0>
   24310:	ldr	r2, [pc, #52]	; 2434c <__assert_fail@plt+0x116a8>
   24314:	ldr	r3, [r2]
   24318:	cmp	r3, #0
   2431c:	popeq	{r4, pc}
   24320:	cmp	r3, #1
   24324:	ldr	r2, [r2, #4]
   24328:	beq	2433c <__assert_fail@plt+0x11698>
   2432c:	cmp	r3, #2
   24330:	addeq	r0, r0, r2
   24334:	subne	r0, r0, r2
   24338:	pop	{r4, pc}
   2433c:	mov	r0, r2
   24340:	pop	{r4, pc}
   24344:	ldr	r0, [pc, #4]	; 24350 <__assert_fail@plt+0x116ac>
   24348:	bl	21d40 <__assert_fail@plt+0xf09c>
   2434c:	andeq	r6, r4, ip, lsl #6
   24350:	andeq	r3, r3, ip, asr #24
   24354:	b	12464 <gmtime_r@plt>
   24358:	push	{r4, r5, lr}
   2435c:	sub	sp, sp, #84	; 0x54
   24360:	ldr	r4, [pc, #140]	; 243f4 <__assert_fail@plt+0x11750>
   24364:	mov	r5, r0
   24368:	ldr	r3, [r4]
   2436c:	str	r3, [sp, #76]	; 0x4c
   24370:	bl	242fc <__assert_fail@plt+0x11658>
   24374:	add	r1, sp, #32
   24378:	str	r0, [sp, #28]
   2437c:	add	r0, sp, #28
   24380:	bl	12464 <gmtime_r@plt>
   24384:	subs	r2, r0, #0
   24388:	strbeq	r2, [r5]
   2438c:	beq	243d8 <__assert_fail@plt+0x11734>
   24390:	ldr	r1, [r2]
   24394:	ldr	r3, [r2, #20]
   24398:	str	r1, [sp, #16]
   2439c:	ldr	r1, [r2, #4]
   243a0:	add	r3, r3, #1888	; 0x760
   243a4:	str	r1, [sp, #12]
   243a8:	ldr	r1, [r2, #8]
   243ac:	mov	r0, r5
   243b0:	str	r1, [sp, #8]
   243b4:	ldr	r1, [r2, #12]
   243b8:	add	r3, r3, #12
   243bc:	str	r1, [sp, #4]
   243c0:	ldr	r1, [r2, #16]
   243c4:	ldr	r2, [pc, #44]	; 243f8 <__assert_fail@plt+0x11754>
   243c8:	add	r1, r1, #1
   243cc:	str	r1, [sp]
   243d0:	mov	r1, #16
   243d4:	bl	12a7c <gpgrt_snprintf@plt>
   243d8:	ldr	r2, [sp, #76]	; 0x4c
   243dc:	ldr	r3, [r4]
   243e0:	cmp	r2, r3
   243e4:	bne	243f0 <__assert_fail@plt+0x1174c>
   243e8:	add	sp, sp, #84	; 0x54
   243ec:	pop	{r4, r5, pc}
   243f0:	bl	1262c <__stack_chk_fail@plt>
   243f4:	strdeq	r5, [r4], -r8
   243f8:	andeq	r3, r3, ip, asr ip
   243fc:	push	{r4, r5, r6, lr}
   24400:	mov	r4, r0
   24404:	mov	r0, #0
   24408:	mov	r5, r1
   2440c:	bl	125d8 <time@plt>
   24410:	ldr	r3, [pc, #72]	; 24460 <__assert_fail@plt+0x117bc>
   24414:	cmn	r4, #1
   24418:	cmpne	r0, r4
   2441c:	bne	24430 <__assert_fail@plt+0x1178c>
   24420:	mov	r2, #0
   24424:	str	r2, [r3]
   24428:	str	r2, [r3, #4]
   2442c:	pop	{r4, r5, r6, pc}
   24430:	cmp	r5, #0
   24434:	beq	24444 <__assert_fail@plt+0x117a0>
   24438:	mov	r2, #1
   2443c:	stm	r3, {r2, r4}
   24440:	pop	{r4, r5, r6, pc}
   24444:	cmp	r0, r4
   24448:	sublt	r4, r4, r0
   2444c:	movlt	r2, #2
   24450:	subge	r4, r0, r4
   24454:	movge	r2, #3
   24458:	stm	r3, {r2, r4}
   2445c:	pop	{r4, r5, r6, pc}
   24460:	andeq	r6, r4, ip, lsl #6
   24464:	ldr	r3, [pc, #4]	; 24470 <__assert_fail@plt+0x117cc>
   24468:	ldr	r0, [r3]
   2446c:	bx	lr
   24470:	andeq	r6, r4, ip, lsl #6
   24474:	b	242fc <__assert_fail@plt+0x11658>
   24478:	push	{r4, r5, r6, r7, r8, lr}
   2447c:	sub	sp, sp, #48	; 0x30
   24480:	ldr	r4, [pc, #340]	; 245dc <__assert_fail@plt+0x11938>
   24484:	mov	r5, r0
   24488:	ldr	r3, [r4]
   2448c:	str	r3, [sp, #44]	; 0x2c
   24490:	bl	128d8 <strlen@plt>
   24494:	cmp	r0, #10
   24498:	bne	244a8 <__assert_fail@plt+0x11804>
   2449c:	ldrb	r3, [r5, #4]
   244a0:	cmp	r3, #45	; 0x2d
   244a4:	beq	244c4 <__assert_fail@plt+0x11820>
   244a8:	mov	r0, #0
   244ac:	ldr	r2, [sp, #44]	; 0x2c
   244b0:	ldr	r3, [r4]
   244b4:	cmp	r2, r3
   244b8:	bne	245d8 <__assert_fail@plt+0x11934>
   244bc:	add	sp, sp, #48	; 0x30
   244c0:	pop	{r4, r5, r6, r7, r8, pc}
   244c4:	ldrb	r3, [r5, #7]
   244c8:	cmp	r3, #45	; 0x2d
   244cc:	bne	244a8 <__assert_fail@plt+0x11804>
   244d0:	sub	r2, r5, #1
   244d4:	add	r1, r5, #3
   244d8:	ldrb	r3, [r2, #1]!
   244dc:	sub	r3, r3, #48	; 0x30
   244e0:	cmp	r3, #9
   244e4:	bhi	244a8 <__assert_fail@plt+0x11804>
   244e8:	cmp	r2, r1
   244ec:	bne	244d8 <__assert_fail@plt+0x11834>
   244f0:	ldrb	r3, [r5, #5]
   244f4:	sub	r3, r3, #48	; 0x30
   244f8:	cmp	r3, #9
   244fc:	bhi	244a8 <__assert_fail@plt+0x11804>
   24500:	ldrb	r3, [r5, #6]
   24504:	sub	r3, r3, #48	; 0x30
   24508:	cmp	r3, #9
   2450c:	bhi	244a8 <__assert_fail@plt+0x11804>
   24510:	ldrb	r3, [r5, #8]
   24514:	sub	r3, r3, #48	; 0x30
   24518:	cmp	r3, #9
   2451c:	bhi	244a8 <__assert_fail@plt+0x11804>
   24520:	ldrb	r3, [r5, #9]
   24524:	sub	r3, r3, #48	; 0x30
   24528:	cmp	r3, #9
   2452c:	bhi	244a8 <__assert_fail@plt+0x11804>
   24530:	mov	r2, #10
   24534:	mov	r1, #0
   24538:	mov	r0, r5
   2453c:	bl	124d0 <strtol@plt>
   24540:	mov	r2, #10
   24544:	mov	r1, #0
   24548:	mov	r7, r0
   2454c:	add	r0, r5, #5
   24550:	bl	124d0 <strtol@plt>
   24554:	mov	r1, #0
   24558:	mov	r2, #10
   2455c:	mov	r6, r0
   24560:	add	r0, r5, #8
   24564:	bl	124d0 <strtol@plt>
   24568:	ldr	r1, [pc, #112]	; 245e0 <__assert_fail@plt+0x1193c>
   2456c:	sub	r6, r6, #1
   24570:	cmp	r7, r1
   24574:	movgt	r1, #0
   24578:	movle	r1, #1
   2457c:	cmp	r6, #11
   24580:	orrhi	r1, r1, #1
   24584:	cmp	r1, #0
   24588:	mov	r8, r0
   2458c:	bne	244a8 <__assert_fail@plt+0x11804>
   24590:	sub	r3, r0, #1
   24594:	cmp	r3, #30
   24598:	bhi	244a8 <__assert_fail@plt+0x11804>
   2459c:	mov	r2, #44	; 0x2c
   245a0:	mov	r0, sp
   245a4:	bl	129b0 <memset@plt>
   245a8:	sub	r3, r7, #1888	; 0x760
   245ac:	sub	r3, r3, #12
   245b0:	mvn	r2, #0
   245b4:	mov	r0, sp
   245b8:	str	r3, [sp, #20]
   245bc:	str	r8, [sp, #12]
   245c0:	str	r6, [sp, #16]
   245c4:	str	r2, [sp, #32]
   245c8:	bl	12524 <mktime@plt>
   245cc:	cmn	r0, #1
   245d0:	bne	244ac <__assert_fail@plt+0x11808>
   245d4:	b	244a8 <__assert_fail@plt+0x11804>
   245d8:	bl	1262c <__stack_chk_fail@plt>
   245dc:	strdeq	r5, [r4], -r8
   245e0:			; <UNDEFINED> instruction: 0x000007b1
   245e4:	ldrb	r3, [r0]
   245e8:	cmp	r3, #0
   245ec:	beq	245f4 <__assert_fail@plt+0x11950>
   245f0:	b	23fc8 <__assert_fail@plt+0x11324>
   245f4:	mov	r0, r3
   245f8:	bx	lr
   245fc:	ldrb	r3, [r0]
   24600:	cmp	r3, #0
   24604:	beq	2460c <__assert_fail@plt+0x11968>
   24608:	b	24084 <__assert_fail@plt+0x113e0>
   2460c:	mov	r0, r3
   24610:	bx	lr
   24614:	push	{r4, r5, r6, r7, r8, r9, lr}
   24618:	subs	r5, r0, #0
   2461c:	sub	sp, sp, #28
   24620:	ldr	r7, [pc, #356]	; 2478c <__assert_fail@plt+0x11ae8>
   24624:	addeq	r5, sp, #4
   24628:	mov	r8, #0
   2462c:	ldr	r3, [r7]
   24630:	strb	r8, [r5]
   24634:	ldrb	r6, [r1]
   24638:	mov	r4, r1
   2463c:	str	r3, [sp, #20]
   24640:	cmp	r6, r8
   24644:	moveq	r0, r6
   24648:	beq	24670 <__assert_fail@plt+0x119cc>
   2464c:	mov	r0, r1
   24650:	bl	23fc8 <__assert_fail@plt+0x11324>
   24654:	subs	r9, r0, #0
   24658:	bne	24754 <__assert_fail@plt+0x11ab0>
   2465c:	mov	r1, r9
   24660:	mov	r0, r4
   24664:	bl	24084 <__assert_fail@plt+0x113e0>
   24668:	cmp	r0, #0
   2466c:	bne	24688 <__assert_fail@plt+0x119e4>
   24670:	ldr	r2, [sp, #20]
   24674:	ldr	r3, [r7]
   24678:	cmp	r2, r3
   2467c:	bne	24788 <__assert_fail@plt+0x11ae4>
   24680:	add	sp, sp, #28
   24684:	pop	{r4, r5, r6, r7, r8, r9, pc}
   24688:	strb	r6, [r5]
   2468c:	ldrb	r2, [r4, #1]
   24690:	ldr	r3, [pc, #248]	; 24790 <__assert_fail@plt+0x11aec>
   24694:	strb	r2, [r5, #1]
   24698:	ldrb	r1, [r4, #2]
   2469c:	mov	r2, #84	; 0x54
   246a0:	strb	r1, [r5, #2]
   246a4:	ldrb	r1, [r4, #3]
   246a8:	strb	r1, [r5, #3]
   246ac:	ldrb	r1, [r4, #5]
   246b0:	strb	r1, [r5, #4]
   246b4:	ldrb	r1, [r4, #6]
   246b8:	strb	r1, [r5, #5]
   246bc:	ldrb	r1, [r4, #8]
   246c0:	strb	r1, [r5, #6]
   246c4:	ldrb	r1, [r4, #9]
   246c8:	strb	r9, [r5, #15]
   246cc:	str	r3, [r5, #9]
   246d0:	strb	r1, [r5, #7]
   246d4:	strh	r3, [r5, #13]
   246d8:	strb	r2, [r5, #8]
   246dc:	ldrb	r3, [r4, #10]
   246e0:	cmp	r3, #32
   246e4:	cmpne	r3, #9
   246e8:	movne	r0, #10
   246ec:	bne	24670 <__assert_fail@plt+0x119cc>
   246f0:	ldrb	r3, [r4, #11]
   246f4:	cmp	r3, #9
   246f8:	cmpne	r3, #32
   246fc:	moveq	r0, #11
   24700:	beq	24670 <__assert_fail@plt+0x119cc>
   24704:	strb	r3, [r5, #9]
   24708:	ldrb	r3, [r4, #12]
   2470c:	strb	r3, [r5, #10]
   24710:	ldrb	r3, [r4, #13]
   24714:	cmp	r3, #58	; 0x3a
   24718:	movne	r0, #13
   2471c:	bne	24670 <__assert_fail@plt+0x119cc>
   24720:	ldrb	r3, [r4, #14]
   24724:	strb	r3, [r5, #11]
   24728:	ldrb	r3, [r4, #15]
   2472c:	strb	r3, [r5, #12]
   24730:	ldrb	r3, [r4, #16]
   24734:	cmp	r3, #58	; 0x3a
   24738:	moveq	r0, #19
   2473c:	ldrbeq	r3, [r4, #17]
   24740:	movne	r0, #16
   24744:	strbeq	r3, [r5, #13]
   24748:	ldrbeq	r3, [r4, #18]
   2474c:	strbeq	r3, [r5, #14]
   24750:	b	24670 <__assert_fail@plt+0x119cc>
   24754:	ldr	r2, [r4, #4]
   24758:	ldr	r3, [r4, #8]
   2475c:	ldr	r1, [r4]
   24760:	str	r2, [r5, #4]
   24764:	str	r1, [r5]
   24768:	str	r3, [r5, #8]
   2476c:	ldrh	r2, [r4, #12]
   24770:	ldrb	r3, [r4, #14]
   24774:	mov	r0, #15
   24778:	strh	r2, [r5, #12]
   2477c:	strb	r3, [r5, #14]
   24780:	strb	r8, [r5, #15]
   24784:	b	24670 <__assert_fail@plt+0x119cc>
   24788:	bl	1262c <__stack_chk_fail@plt>
   2478c:	strdeq	r5, [r4], -r8
   24790:	eorscc	r3, r0, r0, lsr r0
   24794:	push	{r4, r5, r6, r7, r8, r9, lr}
   24798:	sub	sp, sp, #52	; 0x34
   2479c:	ldr	r6, [pc, #376]	; 2491c <__assert_fail@plt+0x11c78>
   247a0:	ldrb	r5, [r0]
   247a4:	ldr	r3, [r6]
   247a8:	cmp	r5, #0
   247ac:	str	r3, [sp, #44]	; 0x2c
   247b0:	beq	24910 <__assert_fail@plt+0x11c6c>
   247b4:	mov	r4, r0
   247b8:	bl	23fc8 <__assert_fail@plt+0x11324>
   247bc:	cmp	r0, #0
   247c0:	beq	24910 <__assert_fail@plt+0x11c6c>
   247c4:	ldrb	r3, [r4, #1]
   247c8:	sub	r5, r5, #48	; 0x30
   247cc:	ldrb	r1, [r4, #2]
   247d0:	add	r5, r5, r5, lsl #2
   247d4:	sub	r3, r3, #48	; 0x30
   247d8:	ldrb	r2, [r4, #4]
   247dc:	add	r3, r3, r5, lsl #1
   247e0:	ldrb	r0, [r4, #3]
   247e4:	sub	r1, r1, #48	; 0x30
   247e8:	add	r3, r3, r3, lsl #2
   247ec:	sub	r2, r2, #48	; 0x30
   247f0:	add	r1, r1, r1, lsl #2
   247f4:	ldrb	r5, [r4, #5]
   247f8:	sub	r0, r0, #48	; 0x30
   247fc:	add	r3, r3, r3, lsl #2
   24800:	ldr	r8, [pc, #280]	; 24920 <__assert_fail@plt+0x11c7c>
   24804:	add	r1, r0, r1, lsl #1
   24808:	add	r2, r2, r2, lsl #2
   2480c:	ldrb	r0, [r4, #13]
   24810:	add	r3, r1, r3, lsl #2
   24814:	cmp	r3, r8
   24818:	ldrb	r7, [r4, #6]
   2481c:	ldrb	lr, [r4, #9]
   24820:	ldrb	ip, [r4, #11]
   24824:	add	r2, r5, r2, lsl #1
   24828:	sub	r1, r0, #48	; 0x30
   2482c:	movgt	r8, #0
   24830:	movle	r8, #1
   24834:	sub	r5, r2, #49	; 0x31
   24838:	cmp	r5, #11
   2483c:	orrhi	r8, r8, #1
   24840:	ldrb	r9, [r4, #7]
   24844:	add	r0, r1, r1, lsl #2
   24848:	ldrb	r2, [r4, #12]
   2484c:	ldrb	r1, [r4, #14]
   24850:	sub	r7, r7, #48	; 0x30
   24854:	sub	lr, lr, #48	; 0x30
   24858:	sub	ip, ip, #48	; 0x30
   2485c:	cmp	r8, #0
   24860:	ldrb	r8, [r4, #10]
   24864:	add	r7, r7, r7, lsl #2
   24868:	add	lr, lr, lr, lsl #2
   2486c:	add	ip, ip, ip, lsl #2
   24870:	sub	r9, r9, #48	; 0x30
   24874:	sub	r4, r8, #48	; 0x30
   24878:	sub	r2, r2, #48	; 0x30
   2487c:	sub	r1, r1, #48	; 0x30
   24880:	add	r7, r9, r7, lsl #1
   24884:	add	lr, r4, lr, lsl #1
   24888:	add	r2, r2, ip, lsl #1
   2488c:	add	r1, r1, r0, lsl #1
   24890:	bne	24910 <__assert_fail@plt+0x11c6c>
   24894:	sub	r0, r7, #1
   24898:	cmp	r0, #30
   2489c:	bhi	24910 <__assert_fail@plt+0x11c6c>
   248a0:	cmp	lr, #23
   248a4:	bgt	24910 <__assert_fail@plt+0x11c6c>
   248a8:	cmp	r1, #61	; 0x3d
   248ac:	cmple	r2, #59	; 0x3b
   248b0:	movgt	ip, #1
   248b4:	movle	ip, #0
   248b8:	bgt	24910 <__assert_fail@plt+0x11c6c>
   248bc:	sub	r3, r3, #1888	; 0x760
   248c0:	sub	r3, r3, #12
   248c4:	str	r3, [sp, #20]
   248c8:	mov	r0, sp
   248cc:	mvn	r3, #0
   248d0:	str	ip, [sp, #24]
   248d4:	str	r1, [sp]
   248d8:	stmib	sp, {r2, lr}
   248dc:	str	r7, [sp, #12]
   248e0:	str	r5, [sp, #16]
   248e4:	str	ip, [sp, #28]
   248e8:	str	ip, [sp, #36]	; 0x24
   248ec:	str	ip, [sp, #40]	; 0x28
   248f0:	str	r3, [sp, #32]
   248f4:	bl	12b30 <timegm@plt>
   248f8:	ldr	r2, [sp, #44]	; 0x2c
   248fc:	ldr	r3, [r6]
   24900:	cmp	r2, r3
   24904:	bne	24918 <__assert_fail@plt+0x11c74>
   24908:	add	sp, sp, #52	; 0x34
   2490c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   24910:	mvn	r0, #0
   24914:	b	248f8 <__assert_fail@plt+0x11c54>
   24918:	bl	1262c <__stack_chk_fail@plt>
   2491c:	strdeq	r5, [r4], -r8
   24920:			; <UNDEFINED> instruction: 0x000007b1
   24924:	push	{r4, r5, lr}
   24928:	sub	sp, sp, #84	; 0x54
   2492c:	ldr	r4, [pc, #144]	; 249c4 <__assert_fail@plt+0x11d20>
   24930:	cmn	r1, #1
   24934:	mov	r5, r0
   24938:	ldr	r3, [r4]
   2493c:	str	r1, [sp, #28]
   24940:	str	r3, [sp, #76]	; 0x4c
   24944:	moveq	r3, #0
   24948:	strbeq	r3, [r0]
   2494c:	beq	249a8 <__assert_fail@plt+0x11d04>
   24950:	add	r1, sp, #32
   24954:	add	r0, sp, #28
   24958:	bl	12464 <gmtime_r@plt>
   2495c:	mov	r1, r0
   24960:	mov	r0, r5
   24964:	ldr	r2, [r1]
   24968:	ldr	r3, [r1, #20]
   2496c:	str	r2, [sp, #16]
   24970:	ldr	r2, [r1, #4]
   24974:	add	r3, r3, #1888	; 0x760
   24978:	str	r2, [sp, #12]
   2497c:	ldr	r2, [r1, #8]
   24980:	add	r3, r3, #12
   24984:	str	r2, [sp, #8]
   24988:	ldr	ip, [r1, #12]
   2498c:	ldr	r2, [pc, #52]	; 249c8 <__assert_fail@plt+0x11d24>
   24990:	str	ip, [sp, #4]
   24994:	ldr	ip, [r1, #16]
   24998:	mov	r1, #16
   2499c:	add	ip, ip, #1
   249a0:	str	ip, [sp]
   249a4:	bl	12a7c <gpgrt_snprintf@plt>
   249a8:	ldr	r2, [sp, #76]	; 0x4c
   249ac:	ldr	r3, [r4]
   249b0:	cmp	r2, r3
   249b4:	bne	249c0 <__assert_fail@plt+0x11d1c>
   249b8:	add	sp, sp, #84	; 0x54
   249bc:	pop	{r4, r5, pc}
   249c0:	bl	1262c <__stack_chk_fail@plt>
   249c4:	strdeq	r5, [r4], -r8
   249c8:	andeq	r3, r3, ip, asr ip
   249cc:	push	{r4, r5, r6, lr}
   249d0:	ldrb	r6, [r0]
   249d4:	cmp	r6, #0
   249d8:	beq	24ac4 <__assert_fail@plt+0x11e20>
   249dc:	mov	r4, r1
   249e0:	mov	r1, #1
   249e4:	mov	r5, r0
   249e8:	bl	24084 <__assert_fail@plt+0x113e0>
   249ec:	cmp	r0, #0
   249f0:	beq	24ac4 <__assert_fail@plt+0x11e20>
   249f4:	sub	r6, r6, #48	; 0x30
   249f8:	ldrb	r3, [r5, #1]
   249fc:	add	r6, r6, r6, lsl #2
   24a00:	ldrb	r1, [r5, #2]
   24a04:	sub	r3, r3, #48	; 0x30
   24a08:	ldrb	r2, [r5, #5]
   24a0c:	add	r3, r3, r6, lsl #1
   24a10:	sub	r1, r1, #48	; 0x30
   24a14:	ldrb	lr, [r5, #3]
   24a18:	add	r3, r3, r3, lsl #2
   24a1c:	sub	r2, r2, #48	; 0x30
   24a20:	add	r0, r1, r1, lsl #2
   24a24:	add	r3, r3, r3, lsl #2
   24a28:	sub	lr, lr, #48	; 0x30
   24a2c:	ldrb	ip, [r5, #6]
   24a30:	add	r1, r2, r2, lsl #2
   24a34:	add	r0, lr, r0, lsl #1
   24a38:	ldrb	r2, [r5, #8]
   24a3c:	add	r3, r0, r3, lsl #2
   24a40:	ldr	r0, [pc, #132]	; 24acc <__assert_fail@plt+0x11e28>
   24a44:	add	r1, ip, r1, lsl #1
   24a48:	cmp	r3, r0
   24a4c:	sub	r2, r2, #48	; 0x30
   24a50:	ldrb	ip, [r5, #9]
   24a54:	movgt	r0, #0
   24a58:	movle	r0, #1
   24a5c:	sub	r1, r1, #49	; 0x31
   24a60:	cmp	r1, #11
   24a64:	orrhi	r0, r0, #1
   24a68:	add	r2, r2, r2, lsl #2
   24a6c:	sub	ip, ip, #48	; 0x30
   24a70:	cmp	r0, #0
   24a74:	add	r2, ip, r2, lsl #1
   24a78:	bne	24ac4 <__assert_fail@plt+0x11e20>
   24a7c:	sub	ip, r2, #1
   24a80:	cmp	ip, #30
   24a84:	bhi	24ac4 <__assert_fail@plt+0x11e20>
   24a88:	sub	r3, r3, #1888	; 0x760
   24a8c:	sub	r3, r3, #12
   24a90:	mvn	lr, #0
   24a94:	str	r0, [r4, #24]
   24a98:	str	r0, [r4, #28]
   24a9c:	str	r0, [r4, #36]	; 0x24
   24aa0:	str	r0, [r4, #40]	; 0x28
   24aa4:	str	r3, [r4, #20]
   24aa8:	str	r0, [r4]
   24aac:	str	r0, [r4, #4]
   24ab0:	str	r0, [r4, #8]
   24ab4:	str	r2, [r4, #12]
   24ab8:	str	r1, [r4, #16]
   24abc:	str	lr, [r4, #32]
   24ac0:	pop	{r4, r5, r6, pc}
   24ac4:	mvn	r0, #0
   24ac8:	pop	{r4, r5, r6, pc}
   24acc:			; <UNDEFINED> instruction: 0x000007b1
   24ad0:	push	{r4, r5, r6, r7, lr}
   24ad4:	sub	sp, sp, #52	; 0x34
   24ad8:	ldr	r6, [pc, #404]	; 24c74 <__assert_fail@plt+0x11fd0>
   24adc:	ldrb	r4, [r0]
   24ae0:	mov	r5, r0
   24ae4:	ldr	r3, [r6]
   24ae8:	cmp	r4, #32
   24aec:	mov	r7, r1
   24af0:	str	r3, [sp, #44]	; 0x2c
   24af4:	bne	24b04 <__assert_fail@plt+0x11e60>
   24af8:	ldrb	r4, [r5, #1]!
   24afc:	cmp	r4, #32
   24b00:	beq	24af8 <__assert_fail@plt+0x11e54>
   24b04:	cmp	r4, #0
   24b08:	moveq	r0, r4
   24b0c:	beq	24c44 <__assert_fail@plt+0x11fa0>
   24b10:	mov	r0, r5
   24b14:	bl	128d8 <strlen@plt>
   24b18:	cmp	r0, #14
   24b1c:	bls	24c5c <__assert_fail@plt+0x11fb8>
   24b20:	ldrb	r3, [r5, #8]
   24b24:	cmp	r3, #84	; 0x54
   24b28:	bne	24c5c <__assert_fail@plt+0x11fb8>
   24b2c:	sub	r4, r4, #48	; 0x30
   24b30:	ldrb	r3, [r5, #1]
   24b34:	ldrb	r2, [r5, #2]
   24b38:	add	r4, r4, r4, lsl #2
   24b3c:	sub	r3, r3, #48	; 0x30
   24b40:	add	r4, r3, r4, lsl #1
   24b44:	sub	r3, r2, #48	; 0x30
   24b48:	ldrb	r2, [r5, #3]
   24b4c:	add	r4, r4, r4, lsl #2
   24b50:	add	r3, r3, r3, lsl #2
   24b54:	sub	r2, r2, #48	; 0x30
   24b58:	add	r4, r4, r4, lsl #2
   24b5c:	add	r3, r2, r3, lsl #1
   24b60:	ldr	r2, [pc, #272]	; 24c78 <__assert_fail@plt+0x11fd4>
   24b64:	add	r4, r3, r4, lsl #2
   24b68:	cmp	r4, r2
   24b6c:	mvnle	r0, #0
   24b70:	ble	24c44 <__assert_fail@plt+0x11fa0>
   24b74:	cmp	r7, #0
   24b78:	addne	r3, r5, #15
   24b7c:	strne	r3, [r7]
   24b80:	ldr	r3, [pc, #244]	; 24c7c <__assert_fail@plt+0x11fd8>
   24b84:	cmp	r4, r3
   24b88:	ldrgt	r0, [pc, #240]	; 24c80 <__assert_fail@plt+0x11fdc>
   24b8c:	bgt	24c44 <__assert_fail@plt+0x11fa0>
   24b90:	ldrb	ip, [r5, #4]
   24b94:	ldrb	lr, [r5, #5]
   24b98:	ldrb	r0, [r5, #6]
   24b9c:	sub	ip, ip, #48	; 0x30
   24ba0:	ldrb	r1, [r5, #9]
   24ba4:	add	ip, ip, ip, lsl #2
   24ba8:	sub	r4, r4, #1888	; 0x760
   24bac:	sub	r4, r4, #12
   24bb0:	sub	r0, r0, #48	; 0x30
   24bb4:	sub	r1, r1, #48	; 0x30
   24bb8:	str	r4, [sp, #20]
   24bbc:	add	r4, lr, ip, lsl #1
   24bc0:	ldrb	lr, [r5, #7]
   24bc4:	ldrb	ip, [r5, #10]
   24bc8:	ldrb	r2, [r5, #11]
   24bcc:	ldrb	r3, [r5, #13]
   24bd0:	add	r0, r0, r0, lsl #2
   24bd4:	add	r1, r1, r1, lsl #2
   24bd8:	sub	ip, ip, #48	; 0x30
   24bdc:	sub	lr, lr, #48	; 0x30
   24be0:	add	lr, lr, r0, lsl #1
   24be4:	sub	r2, r2, #48	; 0x30
   24be8:	add	r0, ip, r1, lsl #1
   24bec:	sub	r3, r3, #48	; 0x30
   24bf0:	ldrb	ip, [r5, #12]
   24bf4:	ldrb	r1, [r5, #14]
   24bf8:	add	r2, r2, r2, lsl #2
   24bfc:	add	r3, r3, r3, lsl #2
   24c00:	sub	ip, ip, #48	; 0x30
   24c04:	sub	r1, r1, #48	; 0x30
   24c08:	add	ip, ip, r2, lsl #1
   24c0c:	add	r2, r1, r3, lsl #1
   24c10:	sub	r4, r4, #49	; 0x31
   24c14:	mov	r3, #0
   24c18:	str	r0, [sp, #8]
   24c1c:	mov	r0, sp
   24c20:	str	r4, [sp, #16]
   24c24:	str	lr, [sp, #12]
   24c28:	stm	sp, {r2, ip}
   24c2c:	str	r3, [sp, #28]
   24c30:	str	r3, [sp, #24]
   24c34:	str	r3, [sp, #32]
   24c38:	str	r3, [sp, #36]	; 0x24
   24c3c:	str	r3, [sp, #40]	; 0x28
   24c40:	bl	12b30 <timegm@plt>
   24c44:	ldr	r2, [sp, #44]	; 0x2c
   24c48:	ldr	r3, [r6]
   24c4c:	cmp	r2, r3
   24c50:	bne	24c70 <__assert_fail@plt+0x11fcc>
   24c54:	add	sp, sp, #52	; 0x34
   24c58:	pop	{r4, r5, r6, r7, pc}
   24c5c:	mov	r1, r7
   24c60:	mov	r0, r5
   24c64:	mov	r2, #10
   24c68:	bl	128cc <strtoul@plt>
   24c6c:	b	24c44 <__assert_fail@plt+0x11fa0>
   24c70:	bl	1262c <__stack_chk_fail@plt>
   24c74:	strdeq	r5, [r4], -r8
   24c78:	andeq	r0, r0, fp, ror #14
   24c7c:	strdeq	r0, [r0], -r5
   24c80:	svcvc	0x00e80eeb
   24c84:	add	r1, r1, r1, lsl #1
   24c88:	rsb	r1, r1, r1, lsl #4
   24c8c:	rsb	r1, r1, r1, lsl #4
   24c90:	add	r0, r0, r1, lsl #7
   24c94:	bx	lr
   24c98:	ldr	r2, [pc, #216]	; 24d78 <__assert_fail@plt+0x120d4>
   24c9c:	push	{r4, r5, r6, r7, lr}
   24ca0:	mov	r5, r0
   24ca4:	umull	r2, r0, r2, r0
   24ca8:	ldr	r3, [pc, #204]	; 24d7c <__assert_fail@plt+0x120d8>
   24cac:	ldr	r2, [pc, #204]	; 24d80 <__assert_fail@plt+0x120dc>
   24cb0:	ldr	r4, [pc, #204]	; 24d84 <__assert_fail@plt+0x120e0>
   24cb4:	lsr	r0, r0, #16
   24cb8:	umull	r1, ip, r3, r5
   24cbc:	umull	r1, r2, r2, r5
   24cc0:	umull	r1, r4, r4, r0
   24cc4:	ldr	r1, [pc, #188]	; 24d88 <__assert_fail@plt+0x120e4>
   24cc8:	sub	lr, r0, r4
   24ccc:	lsr	ip, ip, #5
   24cd0:	lsr	r2, r2, #11
   24cd4:	add	r4, r4, lr, lsr #1
   24cd8:	umull	lr, r3, r3, ip
   24cdc:	umull	lr, r1, r1, r2
   24ce0:	ldr	r6, [pc, #164]	; 24d8c <__assert_fail@plt+0x120e8>
   24ce4:	lsr	r4, r4, #8
   24ce8:	lsr	r3, r3, #5
   24cec:	add	lr, r4, r4, lsl #3
   24cf0:	umull	r7, r6, r6, r5
   24cf4:	lsr	r1, r1, #4
   24cf8:	add	r4, r4, lr, lsl #3
   24cfc:	rsb	r3, r3, r3, lsl #4
   24d00:	add	r1, r1, r1, lsl #1
   24d04:	sub	sp, sp, #20
   24d08:	add	r4, r4, r4, lsl #2
   24d0c:	sub	r3, ip, r3, lsl #2
   24d10:	sub	r1, r2, r1, lsl #3
   24d14:	sub	r4, r0, r4
   24d18:	lsr	r6, r6, #23
   24d1c:	str	r3, [sp, #12]
   24d20:	str	r1, [sp, #8]
   24d24:	ldr	r3, [pc, #100]	; 24d90 <__assert_fail@plt+0x120ec>
   24d28:	str	r4, [sp, #4]
   24d2c:	str	r6, [sp]
   24d30:	mov	r2, #30
   24d34:	mov	r1, #1
   24d38:	ldr	r0, [pc, #84]	; 24d94 <__assert_fail@plt+0x120f0>
   24d3c:	bl	1298c <__sprintf_chk@plt>
   24d40:	ldr	r3, [pc, #80]	; 24d98 <__assert_fail@plt+0x120f4>
   24d44:	cmp	r5, r3
   24d48:	bhi	24d6c <__assert_fail@plt+0x120c8>
   24d4c:	cmp	r4, #0
   24d50:	movne	r1, #121	; 0x79
   24d54:	moveq	r1, #100	; 0x64
   24d58:	ldr	r0, [pc, #52]	; 24d94 <__assert_fail@plt+0x120f0>
   24d5c:	bl	128fc <strchr@plt>
   24d60:	add	r0, r0, #1
   24d64:	add	sp, sp, #20
   24d68:	pop	{r4, r5, r6, r7, pc}
   24d6c:	ldr	r0, [pc, #32]	; 24d94 <__assert_fail@plt+0x120f0>
   24d70:	add	sp, sp, #20
   24d74:	pop	{r4, r5, r6, r7, pc}
   24d78:	eorgt	r4, lr, #29360128	; 0x1c00000
   24d7c:	stmhi	r8, {r0, r3, r7, fp, pc}
   24d80:			; <UNDEFINED> instruction: 0x91a2b3c5
   24d84:	ldrvs	pc, [r9, -r1, ror #6]
   24d88:	bge	feacf83c <stdout@@GLIBC_2.4+0xfea89640>
   24d8c:	ldrmi	sl, [r8], #-1147	; 0xfffffb85
   24d90:	andeq	r3, r3, r8, ror ip
   24d94:	andeq	r6, r4, r4, lsl r3
   24d98:	mvneq	r3, pc, ror r3
   24d9c:	subs	r3, r1, #0
   24da0:	push	{r4, r5, lr}
   24da4:	mov	r4, r0
   24da8:	sub	sp, sp, #12
   24dac:	beq	24e74 <__assert_fail@plt+0x121d0>
   24db0:	mov	r1, r4
   24db4:	mov	r0, r3
   24db8:	bl	12a28 <difftime@plt>
   24dbc:	vcmpe.f64	d0, #0.0
   24dc0:	vmrs	APSR_nzcv, fpscr
   24dc4:	bmi	24ed0 <__assert_fail@plt+0x1222c>
   24dc8:	vldr	d6, [pc, #272]	; 24ee0 <__assert_fail@plt+0x1223c>
   24dcc:	ldr	ip, [pc, #276]	; 24ee8 <__assert_fail@plt+0x12244>
   24dd0:	ldr	r5, [pc, #276]	; 24eec <__assert_fail@plt+0x12248>
   24dd4:	ldr	r0, [pc, #276]	; 24ef0 <__assert_fail@plt+0x1224c>
   24dd8:	vdiv.f64	d7, d0, d6
   24ddc:	vcvt.u32.f64	s13, d0
   24de0:	ldr	lr, [pc, #268]	; 24ef4 <__assert_fail@plt+0x12250>
   24de4:	vmov	r4, s13
   24de8:	umull	r3, r2, ip, r4
   24dec:	lsr	r2, r2, #5
   24df0:	rsb	r2, r2, r2, lsl #4
   24df4:	sub	r2, r4, r2, lsl #2
   24df8:	vcvt.u32.f64	s15, d7
   24dfc:	vmov	r3, s15
   24e00:	lsr	r4, r3, #5
   24e04:	umull	r1, ip, ip, r3
   24e08:	umull	r1, r4, r5, r4
   24e0c:	lsr	ip, ip, #5
   24e10:	umull	r1, r0, r0, r4
   24e14:	sub	r1, r4, r0
   24e18:	mov	r5, ip
   24e1c:	add	r0, r0, r1, lsr #1
   24e20:	umull	r1, lr, lr, ip
   24e24:	lsr	r0, r0, #8
   24e28:	lsr	lr, lr, #4
   24e2c:	add	r1, r0, r0, lsl #3
   24e30:	rsb	ip, ip, ip, lsl #4
   24e34:	add	r0, r0, r1, lsl #3
   24e38:	add	lr, lr, lr, lsl #1
   24e3c:	add	r0, r0, r0, lsl #2
   24e40:	subs	r0, r4, r0
   24e44:	sub	ip, r3, ip, lsl #2
   24e48:	sub	lr, r5, lr, lsl #3
   24e4c:	bne	24e80 <__assert_fail@plt+0x121dc>
   24e50:	cmp	lr, #0
   24e54:	bne	24eb4 <__assert_fail@plt+0x12210>
   24e58:	cmp	ip, #0
   24e5c:	beq	24ea0 <__assert_fail@plt+0x121fc>
   24e60:	mov	r1, ip
   24e64:	ldr	r0, [pc, #140]	; 24ef8 <__assert_fail@plt+0x12254>
   24e68:	add	sp, sp, #12
   24e6c:	pop	{r4, r5, lr}
   24e70:	b	27b08 <__assert_fail@plt+0x14e64>
   24e74:	bl	242fc <__assert_fail@plt+0x11658>
   24e78:	mov	r3, r0
   24e7c:	b	24db0 <__assert_fail@plt+0x1210c>
   24e80:	str	r2, [sp]
   24e84:	mov	r1, r0
   24e88:	mov	r3, ip
   24e8c:	mov	r2, lr
   24e90:	ldr	r0, [pc, #100]	; 24efc <__assert_fail@plt+0x12258>
   24e94:	bl	27b08 <__assert_fail@plt+0x14e64>
   24e98:	add	sp, sp, #12
   24e9c:	pop	{r4, r5, pc}
   24ea0:	mov	r1, r2
   24ea4:	ldr	r0, [pc, #84]	; 24f00 <__assert_fail@plt+0x1225c>
   24ea8:	add	sp, sp, #12
   24eac:	pop	{r4, r5, lr}
   24eb0:	b	27b08 <__assert_fail@plt+0x14e64>
   24eb4:	mov	r3, r2
   24eb8:	mov	r1, lr
   24ebc:	mov	r2, ip
   24ec0:	ldr	r0, [pc, #60]	; 24f04 <__assert_fail@plt+0x12260>
   24ec4:	add	sp, sp, #12
   24ec8:	pop	{r4, r5, lr}
   24ecc:	b	27b08 <__assert_fail@plt+0x14e64>
   24ed0:	ldr	r0, [pc, #48]	; 24f08 <__assert_fail@plt+0x12264>
   24ed4:	add	sp, sp, #12
   24ed8:	pop	{r4, r5, lr}
   24edc:	b	12c68 <gcry_strdup@plt>
   24ee0:	andeq	r0, r0, r0
   24ee4:	submi	r0, lr, r0
   24ee8:	stmhi	r8, {r0, r3, r7, fp, pc}
   24eec:	ldreq	r5, [r0, #2822]!	; 0xb06
   24ef0:	ldrvs	pc, [r9, -r1, ror #6]
   24ef4:	bge	feacf9a8 <stdout@@GLIBC_2.4+0xfea897ac>
   24ef8:			; <UNDEFINED> instruction: 0x00033cb0
   24efc:	muleq	r3, r4, ip
   24f00:			; <UNDEFINED> instruction: 0x00033cb8
   24f04:	andeq	r3, r3, r4, lsr #25
   24f08:	andeq	r3, r3, r8, lsl #25
   24f0c:	push	{r4, lr}
   24f10:	sub	sp, sp, #16
   24f14:	ldr	r4, [pc, #136]	; 24fa4 <__assert_fail@plt+0x12300>
   24f18:	cmp	r0, #0
   24f1c:	str	r0, [sp, #8]
   24f20:	ldr	r3, [r4]
   24f24:	str	r3, [sp, #12]
   24f28:	blt	24f80 <__assert_fail@plt+0x122dc>
   24f2c:	add	r0, sp, #8
   24f30:	bl	129ec <gmtime@plt>
   24f34:	ldr	r2, [pc, #108]	; 24fa8 <__assert_fail@plt+0x12304>
   24f38:	ldr	r1, [r0, #12]
   24f3c:	ldr	r3, [r0, #20]
   24f40:	str	r1, [sp, #4]
   24f44:	ldr	r1, [r0, #16]
   24f48:	add	r3, r3, #1888	; 0x760
   24f4c:	add	r1, r1, #1
   24f50:	str	r1, [sp]
   24f54:	add	r3, r3, #12
   24f58:	mov	r1, #16
   24f5c:	ldr	r0, [pc, #72]	; 24fac <__assert_fail@plt+0x12308>
   24f60:	bl	12a7c <gpgrt_snprintf@plt>
   24f64:	ldr	r2, [sp, #12]
   24f68:	ldr	r3, [r4]
   24f6c:	ldr	r0, [pc, #56]	; 24fac <__assert_fail@plt+0x12308>
   24f70:	cmp	r2, r3
   24f74:	bne	24fa0 <__assert_fail@plt+0x122fc>
   24f78:	add	sp, sp, #16
   24f7c:	pop	{r4, pc}
   24f80:	ldr	r2, [pc, #40]	; 24fb0 <__assert_fail@plt+0x1230c>
   24f84:	ldr	r3, [pc, #32]	; 24fac <__assert_fail@plt+0x12308>
   24f88:	ldm	r2, {r0, r1, r2}
   24f8c:	lsr	ip, r2, #16
   24f90:	stmia	r3!, {r0, r1}
   24f94:	strh	r2, [r3], #2
   24f98:	strb	ip, [r3]
   24f9c:	b	24f64 <__assert_fail@plt+0x122c0>
   24fa0:	bl	1262c <__stack_chk_fail@plt>
   24fa4:	strdeq	r5, [r4], -r8
   24fa8:	andeq	r3, r3, r8, asr #25
   24fac:	andeq	r6, r4, r4, lsr r3
   24fb0:			; <UNDEFINED> instruction: 0x00033cbc
   24fb4:	push	{r4, lr}
   24fb8:	sub	sp, sp, #32
   24fbc:	ldr	r4, [pc, #156]	; 25060 <__assert_fail@plt+0x123bc>
   24fc0:	cmp	r0, #0
   24fc4:	str	r0, [sp, #24]
   24fc8:	ldr	r3, [r4]
   24fcc:	str	r3, [sp, #28]
   24fd0:	blt	25040 <__assert_fail@plt+0x1239c>
   24fd4:	add	r0, sp, #24
   24fd8:	bl	129ec <gmtime@plt>
   24fdc:	ldr	r2, [pc, #128]	; 25064 <__assert_fail@plt+0x123c0>
   24fe0:	ldr	r1, [r0]
   24fe4:	ldr	r3, [r0, #20]
   24fe8:	str	r1, [sp, #16]
   24fec:	ldr	r1, [r0, #4]
   24ff0:	add	r3, r3, #1888	; 0x760
   24ff4:	str	r1, [sp, #12]
   24ff8:	ldr	r1, [r0, #8]
   24ffc:	add	r3, r3, #12
   25000:	str	r1, [sp, #8]
   25004:	ldr	ip, [r0, #12]
   25008:	mov	r1, #30
   2500c:	str	ip, [sp, #4]
   25010:	ldr	ip, [r0, #16]
   25014:	ldr	r0, [pc, #76]	; 25068 <__assert_fail@plt+0x123c4>
   25018:	add	ip, ip, #1
   2501c:	str	ip, [sp]
   25020:	bl	12a7c <gpgrt_snprintf@plt>
   25024:	ldr	r2, [sp, #28]
   25028:	ldr	r3, [r4]
   2502c:	ldr	r0, [pc, #52]	; 25068 <__assert_fail@plt+0x123c4>
   25030:	cmp	r2, r3
   25034:	bne	2505c <__assert_fail@plt+0x123b8>
   25038:	add	sp, sp, #32
   2503c:	pop	{r4, pc}
   25040:	ldr	lr, [pc, #36]	; 2506c <__assert_fail@plt+0x123c8>
   25044:	ldr	ip, [pc, #28]	; 25068 <__assert_fail@plt+0x123c4>
   25048:	ldm	lr!, {r0, r1, r2, r3}
   2504c:	ldr	lr, [lr]
   25050:	stmia	ip!, {r0, r1, r2, r3}
   25054:	str	lr, [ip]
   25058:	b	25024 <__assert_fail@plt+0x12380>
   2505c:	bl	1262c <__stack_chk_fail@plt>
   25060:	strdeq	r5, [r4], -r8
   25064:	andeq	r3, r3, ip, ror #25
   25068:	andeq	r6, r4, r4, asr #6
   2506c:	ldrdeq	r3, [r3], -r8
   25070:	push	{r4, r5, r6, lr}
   25074:	sub	sp, sp, #8
   25078:	ldr	r4, [pc, #188]	; 2513c <__assert_fail@plt+0x12498>
   2507c:	cmp	r0, #0
   25080:	str	r0, [sp]
   25084:	ldr	r3, [r4]
   25088:	str	r3, [sp, #4]
   2508c:	blt	25104 <__assert_fail@plt+0x12460>
   25090:	mov	r0, sp
   25094:	bl	1283c <localtime@plt>
   25098:	mov	r6, r0
   2509c:	ldr	r0, [pc, #156]	; 25140 <__assert_fail@plt+0x1249c>
   250a0:	bl	12af4 <nl_langinfo@plt>
   250a4:	mov	r2, #47	; 0x2f
   250a8:	mov	r1, r0
   250ac:	ldr	r0, [pc, #144]	; 25144 <__assert_fail@plt+0x124a0>
   250b0:	bl	1c4c8 <__assert_fail@plt+0x9824>
   250b4:	ldr	r1, [pc, #140]	; 25148 <__assert_fail@plt+0x124a4>
   250b8:	ldr	r0, [pc, #132]	; 25144 <__assert_fail@plt+0x124a0>
   250bc:	bl	12434 <strstr@plt>
   250c0:	cmp	r0, #0
   250c4:	beq	25124 <__assert_fail@plt+0x12480>
   250c8:	ldr	r5, [pc, #124]	; 2514c <__assert_fail@plt+0x124a8>
   250cc:	mov	r3, r6
   250d0:	add	r2, r5, #140	; 0x8c
   250d4:	add	r0, r5, #88	; 0x58
   250d8:	mov	r1, #49	; 0x31
   250dc:	bl	12830 <strftime@plt>
   250e0:	mov	r3, #0
   250e4:	strb	r3, [r5, #137]	; 0x89
   250e8:	ldr	r2, [sp, #4]
   250ec:	ldr	r3, [r4]
   250f0:	ldr	r0, [pc, #88]	; 25150 <__assert_fail@plt+0x124ac>
   250f4:	cmp	r2, r3
   250f8:	bne	25138 <__assert_fail@plt+0x12494>
   250fc:	add	sp, sp, #8
   25100:	pop	{r4, r5, r6, pc}
   25104:	ldr	r2, [pc, #72]	; 25154 <__assert_fail@plt+0x124b0>
   25108:	ldr	r3, [pc, #64]	; 25150 <__assert_fail@plt+0x124ac>
   2510c:	ldm	r2, {r0, r1, r2}
   25110:	lsr	ip, r2, #16
   25114:	stmia	r3!, {r0, r1}
   25118:	strh	r2, [r3], #2
   2511c:	strb	ip, [r3]
   25120:	b	250e8 <__assert_fail@plt+0x12444>
   25124:	mov	r2, #50	; 0x32
   25128:	ldr	r1, [pc, #40]	; 25158 <__assert_fail@plt+0x124b4>
   2512c:	ldr	r0, [pc, #16]	; 25144 <__assert_fail@plt+0x124a0>
   25130:	bl	12974 <__strcat_chk@plt>
   25134:	b	250c8 <__assert_fail@plt+0x12424>
   25138:	bl	1262c <__stack_chk_fail@plt>
   2513c:	strdeq	r5, [r4], -r8
   25140:	andeq	r0, r2, r8, lsr #32
   25144:	muleq	r4, r8, r3
   25148:	andeq	r3, r3, ip, lsl #26
   2514c:	andeq	r6, r4, ip, lsl #6
   25150:	andeq	r6, r4, r4, ror #6
   25154:			; <UNDEFINED> instruction: 0x00033cbc
   25158:	andeq	r3, r3, r0, lsl sp
   2515c:	push	{r4, r5, r6, r7, lr}
   25160:	sub	sp, sp, #76	; 0x4c
   25164:	ldr	r4, [pc, #216]	; 25244 <__assert_fail@plt+0x125a0>
   25168:	cmp	r0, #0
   2516c:	str	r0, [sp, #20]
   25170:	ldr	r3, [r4]
   25174:	str	r3, [sp, #68]	; 0x44
   25178:	blt	25230 <__assert_fail@plt+0x1258c>
   2517c:	add	r1, sp, #24
   25180:	add	r0, sp, #20
   25184:	bl	12464 <gmtime_r@plt>
   25188:	cmp	r0, #0
   2518c:	beq	25218 <__assert_fail@plt+0x12574>
   25190:	ldr	r1, [r0, #24]
   25194:	ldr	lr, [pc, #172]	; 25248 <__assert_fail@plt+0x125a4>
   25198:	ldr	r3, [r0, #16]
   2519c:	ldr	ip, [pc, #168]	; 2524c <__assert_fail@plt+0x125a8>
   251a0:	ldr	r7, [r0]
   251a4:	smull	r2, lr, lr, r1
   251a8:	smull	r2, r6, ip, r3
   251ac:	ldr	r2, [r0, #12]
   251b0:	str	r7, [sp, #12]
   251b4:	ldr	ip, [r0, #4]
   251b8:	add	r5, lr, r1
   251bc:	str	ip, [sp, #8]
   251c0:	ldr	lr, [r0, #8]
   251c4:	asr	ip, r3, #31
   251c8:	str	lr, [sp, #4]
   251cc:	rsb	ip, ip, r6, asr #1
   251d0:	asr	lr, r1, #31
   251d4:	rsb	lr, lr, r5, asr #2
   251d8:	add	ip, ip, ip, lsl #1
   251dc:	ldr	r0, [r0, #20]
   251e0:	rsb	lr, lr, lr, lsl #3
   251e4:	sub	r1, r1, lr
   251e8:	sub	r3, r3, ip, lsl #2
   251ec:	add	r0, r0, #1888	; 0x760
   251f0:	ldr	lr, [pc, #88]	; 25250 <__assert_fail@plt+0x125ac>
   251f4:	ldr	ip, [pc, #88]	; 25254 <__assert_fail@plt+0x125b0>
   251f8:	add	r0, r0, #12
   251fc:	add	r1, r1, r1, lsl #1
   25200:	add	r3, r3, r3, lsl #1
   25204:	str	r0, [sp]
   25208:	add	r1, lr, r1
   2520c:	add	r3, ip, r3
   25210:	ldr	r0, [pc, #64]	; 25258 <__assert_fail@plt+0x125b4>
   25214:	bl	27b08 <__assert_fail@plt+0x14e64>
   25218:	ldr	r2, [sp, #68]	; 0x44
   2521c:	ldr	r3, [r4]
   25220:	cmp	r2, r3
   25224:	bne	25240 <__assert_fail@plt+0x1259c>
   25228:	add	sp, sp, #76	; 0x4c
   2522c:	pop	{r4, r5, r6, r7, pc}
   25230:	mov	r0, #22
   25234:	bl	12b0c <gpg_err_set_errno@plt>
   25238:	mov	r0, #0
   2523c:	b	25218 <__assert_fail@plt+0x12574>
   25240:	bl	1262c <__stack_chk_fail@plt>
   25244:	strdeq	r5, [r4], -r8
   25248:	subls	r2, r9, #-1828716544	; 0x93000000
   2524c:	bcs	feacfd00 <stdout@@GLIBC_2.4+0xfea89b04>
   25250:	andeq	r3, r3, ip, lsr sp
   25254:	andeq	r3, r3, r4, lsl sp
   25258:	andeq	r3, r3, r4, asr sp
   2525c:	ldrb	r3, [r0]
   25260:	cmp	r3, #0
   25264:	beq	2526c <__assert_fail@plt+0x125c8>
   25268:	b	2429c <__assert_fail@plt+0x115f8>
   2526c:	mov	r0, #26
   25270:	bx	lr
   25274:	subs	r1, r0, #0
   25278:	push	{lr}		; (str lr, [sp, #-4]!)
   2527c:	sub	sp, sp, #20
   25280:	beq	25290 <__assert_fail@plt+0x125ec>
   25284:	ldrb	r3, [r1]
   25288:	cmp	r3, #0
   2528c:	bne	252b4 <__assert_fail@plt+0x12610>
   25290:	mov	r2, #5
   25294:	ldr	r1, [pc, #72]	; 252e4 <__assert_fail@plt+0x12640>
   25298:	mov	r0, #0
   2529c:	bl	12620 <dcgettext@plt>
   252a0:	mov	r1, r0
   252a4:	ldr	r0, [pc, #60]	; 252e8 <__assert_fail@plt+0x12644>
   252a8:	add	sp, sp, #20
   252ac:	pop	{lr}		; (ldr lr, [sp], #4)
   252b0:	b	21ed0 <__assert_fail@plt+0xf22c>
   252b4:	add	r0, r1, #13
   252b8:	add	r2, r1, #11
   252bc:	add	r3, r1, #9
   252c0:	str	r0, [sp, #8]
   252c4:	str	r2, [sp, #4]
   252c8:	str	r3, [sp]
   252cc:	add	r2, r1, #4
   252d0:	add	r3, r1, #6
   252d4:	ldr	r0, [pc, #16]	; 252ec <__assert_fail@plt+0x12648>
   252d8:	bl	21ed0 <__assert_fail@plt+0xf22c>
   252dc:	add	sp, sp, #20
   252e0:	pop	{pc}		; (ldr pc, [sp], #4)
   252e4:	andeq	r3, r3, r0, lsl #27
   252e8:	andeq	r5, r3, r0, lsr r5
   252ec:	andeq	r3, r3, r8, lsl #27
   252f0:	ldrb	r3, [r1]
   252f4:	cmp	r3, #0
   252f8:	beq	25358 <__assert_fail@plt+0x126b4>
   252fc:	push	{r4, r5, r6, lr}
   25300:	mov	r5, r0
   25304:	mov	r0, r1
   25308:	mov	r4, r1
   2530c:	bl	128d8 <strlen@plt>
   25310:	cmp	r0, #15
   25314:	bne	25360 <__assert_fail@plt+0x126bc>
   25318:	ldrb	r3, [r4, #8]
   2531c:	cmp	r3, #84	; 0x54
   25320:	bne	25360 <__assert_fail@plt+0x126bc>
   25324:	ldr	r1, [r4]
   25328:	ldr	r2, [r4, #4]
   2532c:	ldr	r3, [r4, #8]
   25330:	str	r1, [r5]
   25334:	str	r3, [r5, #8]
   25338:	str	r2, [r5, #4]
   2533c:	ldrh	r1, [r4, #12]
   25340:	ldrb	r2, [r4, #14]
   25344:	mov	r3, #0
   25348:	strh	r1, [r5, #12]
   2534c:	strb	r2, [r5, #14]
   25350:	strb	r3, [r5, #15]
   25354:	pop	{r4, r5, r6, pc}
   25358:	strb	r3, [r0]
   2535c:	bx	lr
   25360:	ldr	r2, [pc, #8]	; 25370 <__assert_fail@plt+0x126cc>
   25364:	ldr	r1, [pc, #8]	; 25374 <__assert_fail@plt+0x126d0>
   25368:	ldr	r0, [pc, #8]	; 25378 <__assert_fail@plt+0x126d4>
   2536c:	bl	2201c <__assert_fail@plt+0xf378>
   25370:	andeq	r3, r3, r4, lsr #24
   25374:	andeq	r0, r0, r9, lsl #7
   25378:	andeq	r3, r3, r4, lsr ip
   2537c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25380:	sub	sp, sp, #52	; 0x34
   25384:	ldr	r8, [pc, #576]	; 255cc <__assert_fail@plt+0x12928>
   25388:	ldrb	r5, [r0]
   2538c:	ldr	r3, [r8]
   25390:	cmp	r5, #0
   25394:	str	r3, [sp, #44]	; 0x2c
   25398:	moveq	r9, #26
   2539c:	beq	255a4 <__assert_fail@plt+0x12900>
   253a0:	mov	r4, r0
   253a4:	mov	r7, r1
   253a8:	bl	2429c <__assert_fail@plt+0x115f8>
   253ac:	subs	r9, r0, #0
   253b0:	bne	255a4 <__assert_fail@plt+0x12900>
   253b4:	cmn	r7, #-2147483585	; 0x8000003f
   253b8:	bhi	255c0 <__assert_fail@plt+0x1291c>
   253bc:	sub	r5, r5, #48	; 0x30
   253c0:	ldrb	r3, [r4, #1]
   253c4:	ldrb	r6, [r4, #2]
   253c8:	add	r5, r5, r5, lsl #2
   253cc:	sub	r3, r3, #48	; 0x30
   253d0:	add	r5, r3, r5, lsl #1
   253d4:	ldrb	fp, [r4, #4]
   253d8:	sub	r3, r6, #48	; 0x30
   253dc:	ldrb	ip, [r4, #3]
   253e0:	add	r5, r5, r5, lsl #2
   253e4:	add	r6, r3, r3, lsl #2
   253e8:	ldrb	r2, [r4, #6]
   253ec:	sub	fp, fp, #48	; 0x30
   253f0:	ldrb	r1, [r4, #5]
   253f4:	add	r5, r5, r5, lsl #2
   253f8:	sub	r3, ip, #48	; 0x30
   253fc:	ldrb	sl, [r4, #9]
   25400:	ldrb	lr, [r4, #11]
   25404:	ldrb	r0, [r4, #13]
   25408:	add	r3, r3, r6, lsl #1
   2540c:	add	fp, fp, fp, lsl #2
   25410:	ldr	r6, [pc, #440]	; 255d0 <__assert_fail@plt+0x1292c>
   25414:	add	r3, r3, r5, lsl #2
   25418:	sub	r2, r2, #48	; 0x30
   2541c:	ldrb	ip, [r4, #7]
   25420:	sub	r1, r1, #48	; 0x30
   25424:	add	r1, r1, fp, lsl #1
   25428:	sub	sl, sl, #48	; 0x30
   2542c:	sub	lr, lr, #48	; 0x30
   25430:	sub	r0, r0, #48	; 0x30
   25434:	cmp	r3, r6
   25438:	ldrb	r5, [r4, #10]
   2543c:	ldrb	r6, [r4, #12]
   25440:	ldrb	fp, [r4, #14]
   25444:	add	r2, r2, r2, lsl #2
   25448:	sub	ip, ip, #48	; 0x30
   2544c:	add	sl, sl, sl, lsl #2
   25450:	add	lr, lr, lr, lsl #2
   25454:	add	r0, r0, r0, lsl #2
   25458:	add	r2, ip, r2, lsl #1
   2545c:	sub	r5, r5, #48	; 0x30
   25460:	sub	r6, r6, #48	; 0x30
   25464:	sub	fp, fp, #48	; 0x30
   25468:	str	r3, [sp, #32]
   2546c:	str	r1, [sp, #36]	; 0x24
   25470:	str	r2, [sp, #40]	; 0x28
   25474:	add	ip, r5, sl, lsl #1
   25478:	add	lr, r6, lr, lsl #1
   2547c:	add	r0, fp, r0, lsl #1
   25480:	ble	255c0 <__assert_fail@plt+0x1291c>
   25484:	ldr	r5, [pc, #328]	; 255d4 <__assert_fail@plt+0x12930>
   25488:	add	r7, r7, r0
   2548c:	str	r3, [sp, #24]
   25490:	smull	r0, r6, r5, r7
   25494:	add	r6, r6, r7
   25498:	asr	fp, r7, #31
   2549c:	rsb	r6, fp, r6, asr #5
   254a0:	add	r6, r6, lr
   254a4:	smull	r0, r5, r5, r6
   254a8:	add	r5, r5, r6
   254ac:	asr	sl, r6, #31
   254b0:	mov	r0, r3
   254b4:	rsb	r5, sl, r5, asr #5
   254b8:	add	r5, r5, ip
   254bc:	bl	23cb8 <__assert_fail@plt+0x11014>
   254c0:	ldr	r2, [pc, #272]	; 255d8 <__assert_fail@plt+0x12934>
   254c4:	asr	r3, r5, #31
   254c8:	ldr	r1, [pc, #268]	; 255dc <__assert_fail@plt+0x12938>
   254cc:	smull	ip, r2, r2, r5
   254d0:	ldr	ip, [pc, #264]	; 255e0 <__assert_fail@plt+0x1293c>
   254d4:	str	r3, [sp, #28]
   254d8:	rsb	r2, r3, r2, asr #2
   254dc:	ldr	r3, [sp, #24]
   254e0:	add	r0, r2, r0
   254e4:	add	r1, r0, r1
   254e8:	cmp	r1, ip
   254ec:	bhi	25504 <__assert_fail@plt+0x12860>
   254f0:	add	r3, sp, #40	; 0x28
   254f4:	add	r2, sp, #36	; 0x24
   254f8:	add	r1, sp, #32
   254fc:	bl	23d44 <__assert_fail@plt+0x110a0>
   25500:	ldr	r3, [sp, #32]
   25504:	ldr	r2, [pc, #216]	; 255e4 <__assert_fail@plt+0x12940>
   25508:	cmp	r3, r2
   2550c:	bgt	255c0 <__assert_fail@plt+0x1291c>
   25510:	ldr	r1, [sp, #36]	; 0x24
   25514:	cmp	r1, #12
   25518:	bgt	255c0 <__assert_fail@plt+0x1291c>
   2551c:	ldr	ip, [sp, #40]	; 0x28
   25520:	cmp	r1, #0
   25524:	movgt	r2, #0
   25528:	movle	r2, #1
   2552c:	sub	r0, ip, #1
   25530:	cmp	r0, #30
   25534:	orrhi	r2, r2, #1
   25538:	orrs	r2, r2, r3, lsr #31
   2553c:	bne	255c0 <__assert_fail@plt+0x1291c>
   25540:	ldr	r0, [pc, #140]	; 255d4 <__assert_fail@plt+0x12930>
   25544:	ldr	r2, [pc, #140]	; 255d8 <__assert_fail@plt+0x12934>
   25548:	str	ip, [sp, #4]
   2554c:	smull	lr, ip, r0, r7
   25550:	smull	lr, r0, r0, r6
   25554:	smull	lr, r2, r2, r5
   25558:	str	r1, [sp]
   2555c:	add	r1, r0, r6
   25560:	add	ip, ip, r7
   25564:	rsb	sl, sl, r1, asr #5
   25568:	ldr	r1, [sp, #28]
   2556c:	rsb	fp, fp, ip, asr #5
   25570:	rsb	r2, r1, r2, asr #2
   25574:	rsb	fp, fp, fp, lsl #4
   25578:	rsb	sl, sl, sl, lsl #4
   2557c:	add	r2, r2, r2, lsl #1
   25580:	sub	r7, r7, fp, lsl #2
   25584:	sub	r6, r6, sl, lsl #2
   25588:	sub	r5, r5, r2, lsl #3
   2558c:	mov	r0, r4
   25590:	strd	r6, [sp, #12]
   25594:	str	r5, [sp, #8]
   25598:	ldr	r2, [pc, #72]	; 255e8 <__assert_fail@plt+0x12944>
   2559c:	mov	r1, #16
   255a0:	bl	12a7c <gpgrt_snprintf@plt>
   255a4:	ldr	r2, [sp, #44]	; 0x2c
   255a8:	ldr	r3, [r8]
   255ac:	mov	r0, r9
   255b0:	cmp	r2, r3
   255b4:	bne	255c8 <__assert_fail@plt+0x12924>
   255b8:	add	sp, sp, #52	; 0x34
   255bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255c0:	mov	r9, #55	; 0x37
   255c4:	b	255a4 <__assert_fail@plt+0x12900>
   255c8:	bl	1262c <__stack_chk_fail@plt>
   255cc:	strdeq	r5, [r4], -r8
   255d0:	andeq	r0, r0, lr, lsr #12
   255d4:	stmhi	r8, {r0, r3, r7, fp, pc}
   255d8:	bcs	fead008c <stdout@@GLIBC_2.4+0xfea89e90>
   255dc:			; <UNDEFINED> instruction: 0xffe5bbaf
   255e0:	andseq	r1, r1, ip, ror sp
   255e4:	andeq	r2, r0, pc, lsl #14
   255e8:	andeq	r3, r3, ip, asr ip
   255ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255f0:	sub	sp, sp, #60	; 0x3c
   255f4:	ldr	r5, [pc, #456]	; 257c4 <__assert_fail@plt+0x12b20>
   255f8:	ldrb	r8, [r0]
   255fc:	ldr	r3, [r5]
   25600:	cmp	r8, #0
   25604:	str	r3, [sp, #52]	; 0x34
   25608:	moveq	r7, #26
   2560c:	beq	2579c <__assert_fail@plt+0x12af8>
   25610:	mov	r4, r0
   25614:	mov	r6, r1
   25618:	bl	2429c <__assert_fail@plt+0x115f8>
   2561c:	subs	r7, r0, #0
   25620:	bne	2579c <__assert_fail@plt+0x12af8>
   25624:	ldr	r3, [pc, #412]	; 257c8 <__assert_fail@plt+0x12b24>
   25628:	cmp	r6, r3
   2562c:	bhi	257b8 <__assert_fail@plt+0x12b14>
   25630:	sub	r8, r8, #48	; 0x30
   25634:	ldrb	r3, [r4, #1]
   25638:	ldrb	r1, [r4, #2]
   2563c:	add	r8, r8, r8, lsl #2
   25640:	sub	r3, r3, #48	; 0x30
   25644:	add	r8, r3, r8, lsl #1
   25648:	ldrb	r0, [r4, #3]
   2564c:	sub	r3, r1, #48	; 0x30
   25650:	ldrb	ip, [r4, #4]
   25654:	ldrb	r2, [r4, #6]
   25658:	add	r3, r3, r3, lsl #2
   2565c:	sub	r0, r0, #48	; 0x30
   25660:	add	r8, r8, r8, lsl #2
   25664:	add	r3, r0, r3, lsl #1
   25668:	sub	ip, ip, #48	; 0x30
   2566c:	sub	r2, r2, #48	; 0x30
   25670:	ldrb	r1, [r4, #5]
   25674:	ldrb	r0, [r4, #7]
   25678:	add	r8, r8, r8, lsl #2
   2567c:	add	ip, ip, ip, lsl #2
   25680:	add	r2, r2, r2, lsl #2
   25684:	ldr	lr, [pc, #320]	; 257cc <__assert_fail@plt+0x12b28>
   25688:	add	fp, r3, r8, lsl #2
   2568c:	sub	r1, r1, #48	; 0x30
   25690:	sub	r0, r0, #48	; 0x30
   25694:	add	r1, r1, ip, lsl #1
   25698:	add	r2, r0, r2, lsl #1
   2569c:	cmp	fp, lr
   256a0:	str	fp, [sp, #40]	; 0x28
   256a4:	str	r1, [sp, #44]	; 0x2c
   256a8:	str	r2, [sp, #48]	; 0x30
   256ac:	ble	257b8 <__assert_fail@plt+0x12b14>
   256b0:	mov	r0, fp
   256b4:	bl	23cb8 <__assert_fail@plt+0x11014>
   256b8:	ldrb	r3, [r4, #10]
   256bc:	ldr	r2, [pc, #268]	; 257d0 <__assert_fail@plt+0x12b2c>
   256c0:	ldr	r1, [pc, #268]	; 257d4 <__assert_fail@plt+0x12b30>
   256c4:	str	r3, [sp, #28]
   256c8:	ldrb	r3, [r4, #12]
   256cc:	ldrb	r8, [r4, #9]
   256d0:	ldrb	r9, [r4, #11]
   256d4:	str	r3, [sp, #32]
   256d8:	ldrb	r3, [r4, #14]
   256dc:	ldrb	sl, [r4, #13]
   256e0:	str	r3, [sp, #36]	; 0x24
   256e4:	add	r0, r6, r0
   256e8:	add	r2, r0, r2
   256ec:	cmp	r2, r1
   256f0:	bhi	25708 <__assert_fail@plt+0x12a64>
   256f4:	add	r3, sp, #48	; 0x30
   256f8:	add	r2, sp, #44	; 0x2c
   256fc:	add	r1, sp, #40	; 0x28
   25700:	bl	23d44 <__assert_fail@plt+0x110a0>
   25704:	ldr	fp, [sp, #40]	; 0x28
   25708:	ldr	r2, [pc, #200]	; 257d8 <__assert_fail@plt+0x12b34>
   2570c:	cmp	fp, r2
   25710:	bgt	257b8 <__assert_fail@plt+0x12b14>
   25714:	ldr	r1, [sp, #44]	; 0x2c
   25718:	cmp	r1, #12
   2571c:	bgt	257b8 <__assert_fail@plt+0x12b14>
   25720:	ldr	r0, [sp, #48]	; 0x30
   25724:	cmp	r1, #0
   25728:	movgt	r2, #0
   2572c:	movle	r2, #1
   25730:	sub	ip, r0, #1
   25734:	cmp	ip, #30
   25738:	orrhi	r2, r2, #1
   2573c:	orrs	r3, r2, fp, lsr #31
   25740:	bne	257b8 <__assert_fail@plt+0x12b14>
   25744:	ldr	r2, [sp, #32]
   25748:	sub	sl, sl, #48	; 0x30
   2574c:	sub	r9, r9, #48	; 0x30
   25750:	sub	r8, r8, #48	; 0x30
   25754:	sub	ip, r2, #48	; 0x30
   25758:	ldr	r3, [sp, #36]	; 0x24
   2575c:	ldr	r2, [sp, #28]
   25760:	add	sl, sl, sl, lsl #2
   25764:	add	r9, r9, r9, lsl #2
   25768:	add	r8, r8, r8, lsl #2
   2576c:	sub	r3, r3, #48	; 0x30
   25770:	sub	r2, r2, #48	; 0x30
   25774:	add	sl, r3, sl, lsl #1
   25778:	add	r8, r2, r8, lsl #1
   2577c:	add	r9, ip, r9, lsl #1
   25780:	str	r1, [sp]
   25784:	stmib	sp, {r0, r8, r9, sl}
   25788:	mov	r3, fp
   2578c:	mov	r0, r4
   25790:	ldr	r2, [pc, #68]	; 257dc <__assert_fail@plt+0x12b38>
   25794:	mov	r1, #16
   25798:	bl	12a7c <gpgrt_snprintf@plt>
   2579c:	ldr	r2, [sp, #52]	; 0x34
   257a0:	ldr	r3, [r5]
   257a4:	mov	r0, r7
   257a8:	cmp	r2, r3
   257ac:	bne	257c0 <__assert_fail@plt+0x12b1c>
   257b0:	add	sp, sp, #60	; 0x3c
   257b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   257b8:	mov	r7, #55	; 0x37
   257bc:	b	2579c <__assert_fail@plt+0x12af8>
   257c0:	bl	1262c <__stack_chk_fail@plt>
   257c4:	strdeq	r5, [r4], -r8
   257c8:	eorseq	sp, r7, r1, ror r7
   257cc:	andeq	r0, r0, lr, lsr #12
   257d0:			; <UNDEFINED> instruction: 0xffe5bbaf
   257d4:	andseq	r1, r1, ip, ror sp
   257d8:	andeq	r2, r0, pc, lsl #14
   257dc:	andeq	r3, r3, ip, asr ip
   257e0:	push	{r4, r5, r6, lr}
   257e4:	mov	r2, #40	; 0x28
   257e8:	mov	r5, r1
   257ec:	mov	r1, #0
   257f0:	mov	r4, r0
   257f4:	bl	129b0 <memset@plt>
   257f8:	cmp	r5, #0
   257fc:	beq	25824 <__assert_fail@plt+0x12b80>
   25800:	mov	r0, r5
   25804:	bl	12c68 <gcry_strdup@plt>
   25808:	cmp	r0, #0
   2580c:	str	r0, [r4, #20]
   25810:	beq	25834 <__assert_fail@plt+0x12b90>
   25814:	mov	r3, #0
   25818:	str	r3, [r4, #4]
   2581c:	ldr	r0, [r4, #36]	; 0x24
   25820:	pop	{r4, r5, r6, pc}
   25824:	mov	r3, #7
   25828:	ldr	r0, [r4, #36]	; 0x24
   2582c:	str	r3, [r4, #4]
   25830:	pop	{r4, r5, r6, pc}
   25834:	bl	12914 <gpg_err_code_from_syserror@plt>
   25838:	uxth	r0, r0
   2583c:	str	r0, [r4, #36]	; 0x24
   25840:	pop	{r4, r5, r6, pc}
   25844:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25848:	sub	sp, sp, #12
   2584c:	ldr	r7, [r0, #36]	; 0x24
   25850:	cmp	r7, #0
   25854:	bne	259a0 <__assert_fail@plt+0x12cfc>
   25858:	ldrb	lr, [r0, #32]
   2585c:	mov	r4, r0
   25860:	tst	lr, #1
   25864:	bne	25d0c <__assert_fail@plt+0x13068>
   25868:	ldrb	ip, [r4, #24]
   2586c:	ldr	r0, [r0, #4]
   25870:	cmp	r2, #0
   25874:	mov	r8, r0
   25878:	str	ip, [sp]
   2587c:	ldr	r5, [r4, #8]
   25880:	moveq	r1, r7
   25884:	beq	2598c <__assert_fail@plt+0x12ce8>
   25888:	mov	ip, r1
   2588c:	mov	fp, r1
   25890:	mov	sl, r7
   25894:	cmp	r8, #12
   25898:	ldrls	pc, [pc, r8, lsl #2]
   2589c:	b	25fd4 <__assert_fail@plt+0x13330>
   258a0:	ldrdeq	r5, [r2], -r4
   258a4:			; <UNDEFINED> instruction: 0x00025db4
   258a8:	andeq	r5, r2, r4, lsl #28
   258ac:	andeq	r5, r2, ip, lsl #24
   258b0:	strdeq	r5, [r2], -r0
   258b4:	andeq	r5, r2, r4, lsr #23
   258b8:	andeq	r5, r2, r0, ror #22
   258bc:	andeq	r5, r2, r0, asr #19
   258c0:	andeq	r5, r2, r0, asr #19
   258c4:	andeq	r5, r2, r0, asr #19
   258c8:	andeq	r5, r2, r0, asr #19
   258cc:	andeq	r5, r2, r0, asr ip
   258d0:	andeq	r5, r2, r4, ror #27
   258d4:	ldr	r0, [pc, #1800]	; 25fe4 <__assert_fail@plt+0x13340>
   258d8:	ldrb	r6, [ip]
   258dc:	ldrb	r7, [r0, r5]
   258e0:	sub	r0, r2, #1
   258e4:	cmp	r7, r6
   258e8:	bne	25928 <__assert_fail@plt+0x12c84>
   258ec:	cmp	r5, #10
   258f0:	beq	25b34 <__assert_fail@plt+0x12e90>
   258f4:	cmp	r0, #0
   258f8:	add	r5, r5, #1
   258fc:	add	ip, ip, #1
   25900:	beq	25dd4 <__assert_fail@plt+0x13130>
   25904:	tst	lr, #1
   25908:	bne	25dd4 <__assert_fail@plt+0x13130>
   2590c:	ldr	r2, [pc, #1744]	; 25fe4 <__assert_fail@plt+0x13340>
   25910:	ldrb	r7, [r2, r5]
   25914:	mov	r2, r0
   25918:	ldrb	r6, [ip]
   2591c:	sub	r0, r2, #1
   25920:	cmp	r6, r7
   25924:	beq	25b2c <__assert_fail@plt+0x12e88>
   25928:	cmp	r6, #10
   2592c:	add	r7, ip, #1
   25930:	beq	25a3c <__assert_fail@plt+0x12d98>
   25934:	cmp	r0, #0
   25938:	beq	25980 <__assert_fail@plt+0x12cdc>
   2593c:	tst	lr, #1
   25940:	bne	25980 <__assert_fail@plt+0x12cdc>
   25944:	mov	r6, r7
   25948:	mov	r2, r0
   2594c:	and	r9, lr, #1
   25950:	mov	ip, r6
   25954:	add	r6, r6, #1
   25958:	ldrb	r8, [ip]
   2595c:	sub	r0, r0, #1
   25960:	mov	r7, r6
   25964:	cmp	r8, #10
   25968:	beq	25a3c <__assert_fail@plt+0x12d98>
   2596c:	cmp	r0, #0
   25970:	beq	25980 <__assert_fail@plt+0x12cdc>
   25974:	cmp	r9, #0
   25978:	mov	r2, r0
   2597c:	beq	25950 <__assert_fail@plt+0x12cac>
   25980:	mov	r7, sl
   25984:	sub	r1, fp, r1
   25988:	mov	r0, #1
   2598c:	ldr	r2, [sp]
   25990:	str	r0, [r4, #4]
   25994:	strb	r2, [r4, #24]
   25998:	str	r5, [r4, #8]
   2599c:	str	r1, [r3]
   259a0:	mov	r0, r7
   259a4:	add	sp, sp, #12
   259a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259ac:	cmp	r2, #0
   259b0:	beq	25e30 <__assert_fail@plt+0x1318c>
   259b4:	tst	lr, #1
   259b8:	bne	25e30 <__assert_fail@plt+0x1318c>
   259bc:	mov	r8, #7
   259c0:	add	r0, ip, r2
   259c4:	mov	r6, ip
   259c8:	mov	r9, r0
   259cc:	str	lr, [sp, #4]
   259d0:	mov	ip, r6
   259d4:	sub	r2, r9, r6
   259d8:	ldrb	r0, [r6], #1
   259dc:	cmp	r0, #45	; 0x2d
   259e0:	beq	25a74 <__assert_fail@plt+0x12dd0>
   259e4:	cmp	r0, #61	; 0x3d
   259e8:	beq	25c9c <__assert_fail@plt+0x12ff8>
   259ec:	cmp	r0, #13
   259f0:	cmpne	r0, #32
   259f4:	moveq	lr, #1
   259f8:	movne	lr, #0
   259fc:	sub	r7, r0, #9
   25a00:	cmp	r7, #1
   25a04:	orrls	lr, lr, #1
   25a08:	cmp	lr, #0
   25a0c:	beq	25e10 <__assert_fail@plt+0x1316c>
   25a10:	sub	r2, r2, #1
   25a14:	add	ip, ip, #1
   25a18:	cmp	r2, #0
   25a1c:	beq	25a2c <__assert_fail@plt+0x12d88>
   25a20:	ldrb	lr, [r4, #32]
   25a24:	tst	lr, #1
   25a28:	beq	25894 <__assert_fail@plt+0x12bf0>
   25a2c:	mov	r7, sl
   25a30:	mov	r0, r8
   25a34:	sub	r1, fp, r1
   25a38:	b	2598c <__assert_fail@plt+0x12ce8>
   25a3c:	cmp	r0, #0
   25a40:	beq	25e40 <__assert_fail@plt+0x1319c>
   25a44:	ands	r5, lr, #1
   25a48:	bne	25e54 <__assert_fail@plt+0x131b0>
   25a4c:	ldrb	r6, [ip, #1]
   25a50:	cmp	r6, #45	; 0x2d
   25a54:	beq	25bf4 <__assert_fail@plt+0x12f50>
   25a58:	mov	ip, r7
   25a5c:	cmp	r6, #10
   25a60:	mov	r2, r0
   25a64:	add	r7, ip, #1
   25a68:	sub	r0, r0, #1
   25a6c:	bne	25934 <__assert_fail@plt+0x12c90>
   25a70:	b	25a3c <__assert_fail@plt+0x12d98>
   25a74:	ldr	r7, [r4, #20]
   25a78:	cmp	r7, #0
   25a7c:	beq	25d44 <__assert_fail@plt+0x130a0>
   25a80:	subs	r2, r2, #1
   25a84:	mov	r7, sl
   25a88:	ldr	lr, [sp, #4]
   25a8c:	add	ip, ip, #1
   25a90:	sub	r1, fp, r1
   25a94:	beq	25c94 <__assert_fail@plt+0x12ff0>
   25a98:	tst	lr, #1
   25a9c:	bne	25c94 <__assert_fail@plt+0x12ff0>
   25aa0:	add	r2, ip, r2
   25aa4:	b	25ab8 <__assert_fail@plt+0x12e14>
   25aa8:	cmp	ip, r2
   25aac:	beq	25c94 <__assert_fail@plt+0x12ff0>
   25ab0:	tst	lr, #1
   25ab4:	bne	25c94 <__assert_fail@plt+0x12ff0>
   25ab8:	ldrb	r0, [ip], #1
   25abc:	cmp	r0, #10
   25ac0:	bne	25aa8 <__assert_fail@plt+0x12e04>
   25ac4:	ldrb	r0, [r4, #32]
   25ac8:	cmp	ip, r2
   25acc:	orr	r0, r0, #1
   25ad0:	strb	r0, [r4, #32]
   25ad4:	beq	25c94 <__assert_fail@plt+0x12ff0>
   25ad8:	ldrb	lr, [r4, #32]
   25adc:	b	25ab0 <__assert_fail@plt+0x12e0c>
   25ae0:	cmp	r2, #0
   25ae4:	beq	25b1c <__assert_fail@plt+0x12e78>
   25ae8:	tst	lr, #1
   25aec:	bne	25b1c <__assert_fail@plt+0x12e78>
   25af0:	mov	r0, ip
   25af4:	and	r6, lr, #1
   25af8:	ldrb	ip, [r0], #1
   25afc:	sub	r2, r2, #1
   25b00:	cmp	ip, #10
   25b04:	mov	ip, r0
   25b08:	beq	25b94 <__assert_fail@plt+0x12ef0>
   25b0c:	cmp	r2, #0
   25b10:	beq	25b1c <__assert_fail@plt+0x12e78>
   25b14:	cmp	r6, #0
   25b18:	beq	25af8 <__assert_fail@plt+0x12e54>
   25b1c:	mov	r7, sl
   25b20:	sub	r1, fp, r1
   25b24:	mov	r0, #4
   25b28:	b	2598c <__assert_fail@plt+0x12ce8>
   25b2c:	cmp	r5, #10
   25b30:	bne	25dc0 <__assert_fail@plt+0x1311c>
   25b34:	cmp	r0, #0
   25b38:	beq	25e90 <__assert_fail@plt+0x131ec>
   25b3c:	ands	r5, lr, #1
   25b40:	bne	25ec8 <__assert_fail@plt+0x13224>
   25b44:	ldrb	r0, [ip, #1]
   25b48:	sub	r2, r2, #2
   25b4c:	add	ip, ip, #2
   25b50:	cmp	r0, #80	; 0x50
   25b54:	beq	25c3c <__assert_fail@plt+0x12f98>
   25b58:	cmp	r2, #0
   25b5c:	beq	25df0 <__assert_fail@plt+0x1314c>
   25b60:	and	r6, lr, #1
   25b64:	ldrb	r0, [ip], #1
   25b68:	sub	r2, r2, #1
   25b6c:	cmp	r0, #10
   25b70:	beq	259ac <__assert_fail@plt+0x12d08>
   25b74:	cmp	r2, #0
   25b78:	beq	25b84 <__assert_fail@plt+0x12ee0>
   25b7c:	cmp	r6, #0
   25b80:	beq	25b64 <__assert_fail@plt+0x12ec0>
   25b84:	mov	r7, sl
   25b88:	sub	r1, fp, r1
   25b8c:	mov	r0, #6
   25b90:	b	2598c <__assert_fail@plt+0x12ce8>
   25b94:	cmp	r2, #0
   25b98:	beq	25be4 <__assert_fail@plt+0x12f40>
   25b9c:	tst	lr, #1
   25ba0:	bne	25be4 <__assert_fail@plt+0x12f40>
   25ba4:	mov	r6, ip
   25ba8:	add	r0, ip, r2
   25bac:	and	r9, lr, #1
   25bb0:	ldrb	r7, [r6], #1
   25bb4:	cmp	r7, #10
   25bb8:	sub	r2, r0, r6
   25bbc:	mov	ip, r6
   25bc0:	beq	259ac <__assert_fail@plt+0x12d08>
   25bc4:	and	r8, r7, #251	; 0xfb
   25bc8:	cmp	r7, #32
   25bcc:	cmpne	r8, #9
   25bd0:	bne	25ae0 <__assert_fail@plt+0x12e3c>
   25bd4:	cmp	r2, #0
   25bd8:	beq	25be4 <__assert_fail@plt+0x12f40>
   25bdc:	cmp	r9, #0
   25be0:	beq	25bb0 <__assert_fail@plt+0x12f0c>
   25be4:	mov	r7, sl
   25be8:	sub	r1, fp, r1
   25bec:	mov	r0, #5
   25bf0:	b	2598c <__assert_fail@plt+0x12ce8>
   25bf4:	subs	r2, r2, #2
   25bf8:	add	ip, ip, #2
   25bfc:	beq	25eb4 <__assert_fail@plt+0x13210>
   25c00:	mov	r5, #1
   25c04:	mov	r7, r6
   25c08:	b	25918 <__assert_fail@plt+0x12c74>
   25c0c:	ldr	r0, [pc, #980]	; 25fe8 <__assert_fail@plt+0x13344>
   25c10:	ldrb	r6, [r0, r5]
   25c14:	and	r7, lr, #1
   25c18:	ldrb	r0, [ip], #1
   25c1c:	sub	r2, r2, #1
   25c20:	cmp	r0, r6
   25c24:	beq	25ce4 <__assert_fail@plt+0x13040>
   25c28:	cmp	r2, #0
   25c2c:	beq	25b84 <__assert_fail@plt+0x12ee0>
   25c30:	tst	lr, #1
   25c34:	beq	25b60 <__assert_fail@plt+0x12ebc>
   25c38:	b	25b84 <__assert_fail@plt+0x12ee0>
   25c3c:	cmp	r2, #0
   25c40:	beq	25f54 <__assert_fail@plt+0x132b0>
   25c44:	mov	r6, #71	; 0x47
   25c48:	mov	r5, #1
   25c4c:	b	25c14 <__assert_fail@plt+0x12f70>
   25c50:	mov	r7, sl
   25c54:	sub	r1, fp, r1
   25c58:	mov	r0, ip
   25c5c:	and	r6, lr, #1
   25c60:	ldrb	ip, [r0], #1
   25c64:	sub	r2, r2, #1
   25c68:	cmp	ip, #45	; 0x2d
   25c6c:	mov	ip, r0
   25c70:	beq	25c8c <__assert_fail@plt+0x12fe8>
   25c74:	cmp	r2, #0
   25c78:	beq	25c84 <__assert_fail@plt+0x12fe0>
   25c7c:	cmp	r6, #0
   25c80:	beq	25c60 <__assert_fail@plt+0x12fbc>
   25c84:	mov	r0, #11
   25c88:	b	2598c <__assert_fail@plt+0x12ce8>
   25c8c:	cmp	r2, #0
   25c90:	bne	25a98 <__assert_fail@plt+0x12df4>
   25c94:	mov	r0, #12
   25c98:	b	2598c <__assert_fail@plt+0x12ce8>
   25c9c:	cmp	r8, #8
   25ca0:	moveq	r0, fp
   25ca4:	ldreq	lr, [sp]
   25ca8:	mov	r7, sl
   25cac:	strbeq	lr, [r0], #1
   25cb0:	moveq	fp, r0
   25cb4:	ldr	r0, [r4, #20]
   25cb8:	sub	r2, r2, #1
   25cbc:	cmp	r0, #0
   25cc0:	add	ip, ip, #1
   25cc4:	sub	r1, fp, r1
   25cc8:	beq	25d34 <__assert_fail@plt+0x13090>
   25ccc:	cmp	r2, #0
   25cd0:	beq	25c84 <__assert_fail@plt+0x12fe0>
   25cd4:	ldrb	lr, [r4, #32]
   25cd8:	tst	lr, #1
   25cdc:	beq	25c58 <__assert_fail@plt+0x12fb4>
   25ce0:	b	25c84 <__assert_fail@plt+0x12fe0>
   25ce4:	cmp	r5, #3
   25ce8:	beq	25ae0 <__assert_fail@plt+0x12e3c>
   25cec:	cmp	r2, #0
   25cf0:	add	r5, r5, #1
   25cf4:	beq	25ea4 <__assert_fail@plt+0x13200>
   25cf8:	cmp	r7, #0
   25cfc:	bne	25ea4 <__assert_fail@plt+0x13200>
   25d00:	ldr	r0, [pc, #736]	; 25fe8 <__assert_fail@plt+0x13344>
   25d04:	ldrb	r6, [r0, r5]
   25d08:	b	25c18 <__assert_fail@plt+0x12f74>
   25d0c:	ldr	r2, [pc, #728]	; 25fec <__assert_fail@plt+0x13348>
   25d10:	str	r7, [r3]
   25d14:	ldr	r0, [r0, #20]
   25d18:	str	r2, [r4, #36]	; 0x24
   25d1c:	bl	125e4 <gcry_free@plt>
   25d20:	str	r7, [r4, #20]
   25d24:	ldr	r7, [r4, #36]	; 0x24
   25d28:	mov	r0, r7
   25d2c:	add	sp, sp, #12
   25d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d34:	cmp	r2, #0
   25d38:	beq	25c94 <__assert_fail@plt+0x12ff0>
   25d3c:	ldrb	lr, [r4, #32]
   25d40:	b	25a98 <__assert_fail@plt+0x12df4>
   25d44:	sub	r2, r9, r6
   25d48:	mov	ip, r6
   25d4c:	ldr	r7, [pc, #668]	; 25ff0 <__assert_fail@plt+0x1334c>
   25d50:	ldrb	r0, [r7, r0]
   25d54:	cmp	r0, #255	; 0xff
   25d58:	beq	25e20 <__assert_fail@plt+0x1317c>
   25d5c:	cmp	r8, #7
   25d60:	beq	25e68 <__assert_fail@plt+0x131c4>
   25d64:	cmp	r8, #8
   25d68:	ldrsb	ip, [sp]
   25d6c:	add	r7, fp, #1
   25d70:	beq	25edc <__assert_fail@plt+0x13238>
   25d74:	cmp	r8, #9
   25d78:	beq	25f18 <__assert_fail@plt+0x13274>
   25d7c:	and	r0, r0, #63	; 0x3f
   25d80:	orr	r0, ip, r0
   25d84:	cmp	r2, #0
   25d88:	uxtb	r2, r0
   25d8c:	str	r2, [sp]
   25d90:	strb	r2, [fp]
   25d94:	beq	25fa4 <__assert_fail@plt+0x13300>
   25d98:	ldrb	r2, [r4, #32]
   25d9c:	tst	r2, #1
   25da0:	str	r2, [sp, #4]
   25da4:	bne	25fa4 <__assert_fail@plt+0x13300>
   25da8:	mov	fp, r7
   25dac:	mov	r8, #7
   25db0:	b	259d0 <__assert_fail@plt+0x12d2c>
   25db4:	mov	r7, ip
   25db8:	mov	r0, r2
   25dbc:	b	25944 <__assert_fail@plt+0x12ca0>
   25dc0:	cmp	r0, #0
   25dc4:	add	r5, r5, #1
   25dc8:	beq	25dd4 <__assert_fail@plt+0x13130>
   25dcc:	tst	lr, #1
   25dd0:	beq	25f68 <__assert_fail@plt+0x132c4>
   25dd4:	mov	r7, sl
   25dd8:	sub	r1, fp, r1
   25ddc:	mov	r0, #2
   25de0:	b	2598c <__assert_fail@plt+0x12ce8>
   25de4:	mov	r7, sl
   25de8:	sub	r1, fp, r1
   25dec:	b	25aa0 <__assert_fail@plt+0x12dfc>
   25df0:	mov	r7, sl
   25df4:	sub	r1, fp, r1
   25df8:	mov	r5, r2
   25dfc:	mov	r0, #6
   25e00:	b	2598c <__assert_fail@plt+0x12ce8>
   25e04:	ldr	r0, [pc, #472]	; 25fe4 <__assert_fail@plt+0x13340>
   25e08:	ldrb	r7, [r0, r5]
   25e0c:	b	25918 <__assert_fail@plt+0x12c74>
   25e10:	tst	r0, #128	; 0x80
   25e14:	sub	r2, r9, r6
   25e18:	mov	ip, r6
   25e1c:	beq	25d4c <__assert_fail@plt+0x130a8>
   25e20:	ldrb	r0, [r4, #32]
   25e24:	orr	r0, r0, #2
   25e28:	strb	r0, [r4, #32]
   25e2c:	b	25a18 <__assert_fail@plt+0x12d74>
   25e30:	mov	r7, sl
   25e34:	sub	r1, fp, r1
   25e38:	mov	r0, #7
   25e3c:	b	2598c <__assert_fail@plt+0x12ce8>
   25e40:	mov	r5, r0
   25e44:	mov	r7, sl
   25e48:	sub	r1, fp, r1
   25e4c:	mov	r0, #2
   25e50:	b	2598c <__assert_fail@plt+0x12ce8>
   25e54:	mov	r7, sl
   25e58:	sub	r1, fp, r1
   25e5c:	mov	r0, #2
   25e60:	mov	r5, #0
   25e64:	b	2598c <__assert_fail@plt+0x12ce8>
   25e68:	lsl	r0, r0, #2
   25e6c:	cmp	r2, #0
   25e70:	uxtb	r2, r0
   25e74:	str	r2, [sp]
   25e78:	beq	25f7c <__assert_fail@plt+0x132d8>
   25e7c:	ldr	r2, [sp, #4]
   25e80:	tst	r2, #1
   25e84:	bne	25f7c <__assert_fail@plt+0x132d8>
   25e88:	mov	r8, #8
   25e8c:	b	259d0 <__assert_fail@plt+0x12d2c>
   25e90:	mov	r5, r0
   25e94:	mov	r7, sl
   25e98:	sub	r1, fp, r1
   25e9c:	mov	r0, #3
   25ea0:	b	2598c <__assert_fail@plt+0x12ce8>
   25ea4:	mov	r7, sl
   25ea8:	sub	r1, fp, r1
   25eac:	mov	r0, #3
   25eb0:	b	2598c <__assert_fail@plt+0x12ce8>
   25eb4:	mov	r7, sl
   25eb8:	sub	r1, fp, r1
   25ebc:	mov	r0, #2
   25ec0:	mov	r5, #1
   25ec4:	b	2598c <__assert_fail@plt+0x12ce8>
   25ec8:	mov	r7, sl
   25ecc:	sub	r1, fp, r1
   25ed0:	mov	r0, #3
   25ed4:	mov	r5, #0
   25ed8:	b	2598c <__assert_fail@plt+0x12ce8>
   25edc:	lsl	lr, r0, #26
   25ee0:	lsl	r0, r0, #4
   25ee4:	cmp	r2, #0
   25ee8:	orr	ip, ip, lr, lsr #30
   25eec:	uxtb	r2, r0
   25ef0:	strb	ip, [fp]
   25ef4:	str	r2, [sp]
   25ef8:	beq	25f8c <__assert_fail@plt+0x132e8>
   25efc:	ldrb	r2, [r4, #32]
   25f00:	tst	r2, #1
   25f04:	str	r2, [sp, #4]
   25f08:	bne	25f8c <__assert_fail@plt+0x132e8>
   25f0c:	mov	fp, r7
   25f10:	mov	r8, #9
   25f14:	b	259d0 <__assert_fail@plt+0x12d2c>
   25f18:	lsl	lr, r0, #26
   25f1c:	lsl	r0, r0, #6
   25f20:	cmp	r2, #0
   25f24:	orr	ip, ip, lr, lsr #28
   25f28:	uxtb	r2, r0
   25f2c:	strb	ip, [fp]
   25f30:	str	r2, [sp]
   25f34:	beq	25fbc <__assert_fail@plt+0x13318>
   25f38:	ldrb	r2, [r4, #32]
   25f3c:	tst	r2, #1
   25f40:	str	r2, [sp, #4]
   25f44:	bne	25fbc <__assert_fail@plt+0x13318>
   25f48:	mov	fp, r7
   25f4c:	mov	r8, #10
   25f50:	b	259d0 <__assert_fail@plt+0x12d2c>
   25f54:	mov	r7, sl
   25f58:	sub	r1, fp, r1
   25f5c:	mov	r0, #3
   25f60:	mov	r5, #1
   25f64:	b	2598c <__assert_fail@plt+0x12ce8>
   25f68:	mov	r2, r0
   25f6c:	ldr	r0, [pc, #112]	; 25fe4 <__assert_fail@plt+0x13340>
   25f70:	add	ip, ip, #1
   25f74:	ldrb	r6, [r0, r5]
   25f78:	b	25c04 <__assert_fail@plt+0x12f60>
   25f7c:	mov	r7, sl
   25f80:	sub	r1, fp, r1
   25f84:	mov	r0, #8
   25f88:	b	2598c <__assert_fail@plt+0x12ce8>
   25f8c:	mov	r2, sl
   25f90:	mov	sl, r7
   25f94:	sub	r1, sl, r1
   25f98:	mov	r7, r2
   25f9c:	mov	r0, #9
   25fa0:	b	2598c <__assert_fail@plt+0x12ce8>
   25fa4:	mov	r2, sl
   25fa8:	mov	sl, r7
   25fac:	sub	r1, sl, r1
   25fb0:	mov	r7, r2
   25fb4:	mov	r0, #7
   25fb8:	b	2598c <__assert_fail@plt+0x12ce8>
   25fbc:	mov	r2, sl
   25fc0:	mov	sl, r7
   25fc4:	sub	r1, sl, r1
   25fc8:	mov	r7, r2
   25fcc:	mov	r0, #10
   25fd0:	b	2598c <__assert_fail@plt+0x12ce8>
   25fd4:	ldr	r2, [pc, #24]	; 25ff4 <__assert_fail@plt+0x13350>
   25fd8:	mov	r1, #228	; 0xe4
   25fdc:	ldr	r0, [pc, #20]	; 25ff8 <__assert_fail@plt+0x13354>
   25fe0:	bl	2201c <__assert_fail@plt+0xf378>
   25fe4:	andeq	r3, r3, r8, asr #28
   25fe8:	andeq	r3, r3, r4, asr lr
   25fec:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   25ff0:	andeq	r3, r3, r4, lsr #27
   25ff4:	andeq	r3, r3, r4, lsr #28
   25ff8:	andeq	r3, r3, r0, lsr lr
   25ffc:	push	{r4, lr}
   26000:	mov	r4, r0
   26004:	ldr	r0, [r0, #20]
   26008:	bl	125e4 <gcry_free@plt>
   2600c:	ldr	r0, [r4, #36]	; 0x24
   26010:	mov	r3, #0
   26014:	cmp	r0, r3
   26018:	str	r3, [r4, #20]
   2601c:	popne	{r4, pc}
   26020:	ldrb	r3, [r4, #32]
   26024:	tst	r3, #2
   26028:	movne	r0, #89	; 0x59
   2602c:	pop	{r4, pc}
   26030:	ldr	r2, [pc, #748]	; 26324 <__assert_fail@plt+0x13680>
   26034:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26038:	add	r3, r1, #7
   2603c:	cmp	r3, r2
   26040:	bhi	26220 <__assert_fail@plt+0x1357c>
   26044:	ldr	r2, [pc, #732]	; 26328 <__assert_fail@plt+0x13684>
   26048:	lsr	r8, r3, #3
   2604c:	mov	r9, r1
   26050:	mov	r4, r0
   26054:	umull	r1, r0, r2, r8
   26058:	umull	r2, r3, r2, r3
   2605c:	lsr	r0, r0, #2
   26060:	lsr	r3, r3, #5
   26064:	add	r0, r0, r0, lsl #2
   26068:	sub	r0, r8, r0
   2606c:	add	r3, r0, r3, lsl #2
   26070:	lsl	r3, r3, #1
   26074:	cmp	r0, #2
   26078:	movhi	r0, r3
   2607c:	addls	r0, r3, #1
   26080:	bl	12458 <gcry_malloc@plt>
   26084:	subs	sl, r0, #0
   26088:	beq	26218 <__assert_fail@plt+0x13574>
   2608c:	cmp	r8, #4
   26090:	bls	2631c <__assert_fail@plt+0x13678>
   26094:	ldr	r0, [pc, #656]	; 2632c <__assert_fail@plt+0x13688>
   26098:	add	r2, r4, #5
   2609c:	add	r3, sl, #8
   260a0:	ldrb	lr, [r2, #-4]
   260a4:	ldrb	r4, [r2, #-3]
   260a8:	ldrb	fp, [r2, #-5]
   260ac:	ldrb	ip, [r2, #-2]
   260b0:	ldrb	r1, [r2, #-1]
   260b4:	lsl	r6, lr, #4
   260b8:	lsl	r7, fp, #2
   260bc:	lsl	r5, r4, #1
   260c0:	and	r6, r6, #16
   260c4:	orr	r6, r6, r4, lsr #4
   260c8:	and	r7, r7, #28
   260cc:	lsl	r4, ip, #3
   260d0:	and	r5, r5, #30
   260d4:	orr	r7, r7, lr, lsr #6
   260d8:	orr	r5, r5, ip, lsr #7
   260dc:	asr	lr, lr, #1
   260e0:	and	r4, r4, #24
   260e4:	asr	ip, ip, #2
   260e8:	orr	r4, r4, r1, lsr #5
   260ec:	and	lr, lr, #31
   260f0:	and	ip, ip, #31
   260f4:	and	r1, r1, #31
   260f8:	ldrb	ip, [r0, ip]
   260fc:	ldrb	r4, [r0, r4]
   26100:	ldrb	fp, [r0, fp, lsr #3]
   26104:	ldrb	r7, [r0, r7]
   26108:	ldrb	lr, [r0, lr]
   2610c:	ldrb	r6, [r0, r6]
   26110:	ldrb	r5, [r0, r5]
   26114:	ldrb	r1, [r0, r1]
   26118:	sub	r8, r8, #5
   2611c:	cmp	r8, #4
   26120:	strb	ip, [r3, #-3]
   26124:	strb	r4, [r3, #-2]
   26128:	strb	fp, [r3, #-8]
   2612c:	strb	r7, [r3, #-7]
   26130:	strb	lr, [r3, #-6]
   26134:	strb	r6, [r3, #-5]
   26138:	strb	r5, [r3, #-4]
   2613c:	strb	r1, [r3, #-1]
   26140:	mov	r4, r2
   26144:	mov	ip, r3
   26148:	add	r2, r2, #5
   2614c:	add	r3, r3, #8
   26150:	bhi	260a0 <__assert_fail@plt+0x133fc>
   26154:	sub	r8, r8, #1
   26158:	cmp	r8, #3
   2615c:	ldrls	pc, [pc, r8, lsl #2]
   26160:	b	26200 <__assert_fail@plt+0x1355c>
   26164:	andeq	r6, r2, r8, lsr r2
   26168:	andeq	r6, r2, r4, ror #4
   2616c:			; <UNDEFINED> instruction: 0x000262b4
   26170:	andeq	r6, r2, r4, ror r1
   26174:	ldrb	r0, [r4, #1]
   26178:	ldrb	r3, [r4, #2]
   2617c:	ldrb	r5, [r4]
   26180:	ldrb	r2, [r4, #3]
   26184:	lsl	lr, r0, #4
   26188:	and	lr, lr, #16
   2618c:	orr	lr, lr, r3, lsr #4
   26190:	lsl	r4, r5, #2
   26194:	lsl	r3, r3, #1
   26198:	and	r4, r4, #28
   2619c:	and	r3, r3, #30
   261a0:	ldr	r1, [pc, #388]	; 2632c <__assert_fail@plt+0x13688>
   261a4:	orr	r3, r3, r2, lsr #7
   261a8:	orr	r4, r4, r0, lsr #6
   261ac:	asr	r6, r2, #2
   261b0:	asr	r0, r0, #1
   261b4:	lsl	r2, r2, #3
   261b8:	and	r0, r0, #31
   261bc:	and	r6, r6, #31
   261c0:	and	r2, r2, #24
   261c4:	ldrb	r7, [r1, r0]
   261c8:	ldrb	r8, [r1, lr]
   261cc:	ldrb	r4, [r1, r4]
   261d0:	ldrb	lr, [r1, r3]
   261d4:	ldrb	r5, [r1, r5, lsr #3]
   261d8:	ldrb	r0, [r1, r6]
   261dc:	ldrb	r3, [r1, r2]
   261e0:	strb	r4, [ip, #1]
   261e4:	strb	r5, [ip]
   261e8:	strb	r7, [ip, #2]
   261ec:	strb	r8, [ip, #3]
   261f0:	strb	lr, [ip, #4]
   261f4:	strb	r0, [ip, #5]
   261f8:	strb	r3, [ip, #6]
   261fc:	add	ip, ip, #7
   26200:	ldr	r1, [pc, #288]	; 26328 <__assert_fail@plt+0x13684>
   26204:	add	r9, r9, #4
   26208:	mov	r3, #0
   2620c:	umull	r2, r9, r1, r9
   26210:	strb	r3, [ip]
   26214:	strb	r3, [sl, r9, lsr #2]
   26218:	mov	r0, sl
   2621c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26220:	bl	12968 <__errno_location@plt>
   26224:	mov	sl, #0
   26228:	mov	r3, #22
   2622c:	str	r3, [r0]
   26230:	mov	r0, sl
   26234:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26238:	ldrb	r0, [r4]
   2623c:	ldr	r1, [pc, #232]	; 2632c <__assert_fail@plt+0x13688>
   26240:	mov	r3, ip
   26244:	lsl	r2, r0, #2
   26248:	and	r2, r2, #28
   2624c:	ldrb	r0, [r1, r0, lsr #3]
   26250:	ldrb	r2, [r1, r2]
   26254:	strb	r0, [r3], #2
   26258:	strb	r2, [ip, #1]
   2625c:	mov	ip, r3
   26260:	b	26200 <__assert_fail@plt+0x1355c>
   26264:	ldrb	lr, [r4]
   26268:	ldrb	r3, [r4, #1]
   2626c:	ldr	r1, [pc, #184]	; 2632c <__assert_fail@plt+0x13688>
   26270:	add	ip, ip, #4
   26274:	lsl	r2, lr, #2
   26278:	and	r2, r2, #28
   2627c:	orr	r2, r2, r3, lsr #6
   26280:	asr	r0, r3, #1
   26284:	lsl	r3, r3, #4
   26288:	and	r0, r0, #31
   2628c:	and	r3, r3, #16
   26290:	ldrb	r4, [r1, r2]
   26294:	ldrb	lr, [r1, lr, lsr #3]
   26298:	ldrb	r2, [r1, r0]
   2629c:	ldrb	r3, [r1, r3]
   262a0:	strb	r4, [ip, #-3]
   262a4:	strb	lr, [ip, #-4]
   262a8:	strb	r2, [ip, #-2]
   262ac:	strb	r3, [ip, #-1]
   262b0:	b	26200 <__assert_fail@plt+0x1355c>
   262b4:	ldrb	r3, [r4, #1]
   262b8:	ldrb	lr, [r4]
   262bc:	ldrb	r2, [r4, #2]
   262c0:	ldr	r1, [pc, #100]	; 2632c <__assert_fail@plt+0x13688>
   262c4:	lsl	r0, r3, #4
   262c8:	lsl	r4, lr, #2
   262cc:	and	r4, r4, #28
   262d0:	and	r0, r0, #16
   262d4:	orr	r4, r4, r3, lsr #6
   262d8:	orr	r0, r0, r2, lsr #4
   262dc:	asr	r3, r3, #1
   262e0:	lsl	r2, r2, #1
   262e4:	and	r3, r3, #31
   262e8:	and	r2, r2, #30
   262ec:	ldrb	r5, [r1, r4]
   262f0:	ldrb	r4, [r1, lr, lsr #3]
   262f4:	ldrb	lr, [r1, r0]
   262f8:	ldrb	r0, [r1, r3]
   262fc:	ldrb	r3, [r1, r2]
   26300:	strb	r5, [ip, #1]
   26304:	strb	r4, [ip]
   26308:	strb	lr, [ip, #3]
   2630c:	strb	r0, [ip, #2]
   26310:	strb	r3, [ip, #4]
   26314:	add	ip, ip, #5
   26318:	b	26200 <__assert_fail@plt+0x1355c>
   2631c:	mov	ip, sl
   26320:	b	26154 <__assert_fail@plt+0x134b0>
   26324:	andeq	r0, r8, r7
   26328:	stclgt	12, cr12, [ip], {205}	; 0xcd
   2632c:	andeq	r3, r3, ip, asr lr
   26330:	push	{r4, r5, r6, r7, r8, lr}
   26334:	subs	r6, r2, #0
   26338:	mov	r5, r0
   2633c:	mov	r4, r1
   26340:	mov	r7, r3
   26344:	beq	263d0 <__assert_fail@plt+0x1372c>
   26348:	cmp	r1, #0
   2634c:	beq	26434 <__assert_fail@plt+0x13790>
   26350:	and	r3, r7, #1
   26354:	add	r1, r5, r4
   26358:	mov	lr, r5
   2635c:	mov	ip, r6
   26360:	mov	r7, #58	; 0x3a
   26364:	b	26384 <__assert_fail@plt+0x136e0>
   26368:	cmp	r5, lr
   2636c:	moveq	r2, #0
   26370:	andne	r2, r3, #1
   26374:	cmp	r2, #0
   26378:	strbne	r7, [ip, #2]
   2637c:	moveq	ip, r0
   26380:	addne	ip, ip, #3
   26384:	ldrb	r0, [lr], #1
   26388:	lsr	r0, r0, #4
   2638c:	cmp	r0, #9
   26390:	add	r2, r0, #55	; 0x37
   26394:	addls	r2, r0, #48	; 0x30
   26398:	strb	r2, [ip]
   2639c:	ldrb	r0, [lr, #-1]
   263a0:	and	r0, r0, #15
   263a4:	cmp	r0, #9
   263a8:	add	r4, r0, #55	; 0x37
   263ac:	addls	r4, r0, #48	; 0x30
   263b0:	cmp	r1, lr
   263b4:	strb	r4, [ip, #1]
   263b8:	add	r0, ip, #2
   263bc:	bne	26368 <__assert_fail@plt+0x136c4>
   263c0:	mov	r3, #0
   263c4:	strb	r3, [r0]
   263c8:	mov	r0, r6
   263cc:	pop	{r4, r5, r6, r7, r8, pc}
   263d0:	cmp	r3, #0
   263d4:	movne	r1, #3
   263d8:	moveq	r1, #2
   263dc:	cmp	r4, #0
   263e0:	mul	r0, r4, r1
   263e4:	add	r8, r0, #1
   263e8:	beq	26410 <__assert_fail@plt+0x1376c>
   263ec:	bl	2fa74 <__assert_fail@plt+0x1cdd0>
   263f0:	cmp	r0, r4
   263f4:	bne	26428 <__assert_fail@plt+0x13784>
   263f8:	mov	r0, r8
   263fc:	bl	12458 <gcry_malloc@plt>
   26400:	cmp	r0, #0
   26404:	movne	r6, r0
   26408:	bne	26350 <__assert_fail@plt+0x136ac>
   2640c:	b	263c8 <__assert_fail@plt+0x13724>
   26410:	mov	r0, r8
   26414:	bl	12458 <gcry_malloc@plt>
   26418:	cmp	r0, #0
   2641c:	beq	263c8 <__assert_fail@plt+0x13724>
   26420:	mov	r6, r0
   26424:	b	263c0 <__assert_fail@plt+0x1371c>
   26428:	mov	r0, #12
   2642c:	bl	12b0c <gpg_err_set_errno@plt>
   26430:	b	263c8 <__assert_fail@plt+0x13724>
   26434:	mov	r0, r6
   26438:	b	263c0 <__assert_fail@plt+0x1371c>
   2643c:	cmp	r2, #0
   26440:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26444:	ldrb	r8, [r0]
   26448:	beq	26574 <__assert_fail@plt+0x138d0>
   2644c:	add	r6, r1, r2
   26450:	sub	r6, r6, #1
   26454:	add	lr, r0, #2
   26458:	sub	r4, r1, #1
   2645c:	sub	r3, r8, #48	; 0x30
   26460:	bic	ip, r8, #32
   26464:	uxtb	r3, r3
   26468:	sub	ip, ip, #65	; 0x41
   2646c:	cmp	ip, #5
   26470:	cmphi	r3, #9
   26474:	bls	26480 <__assert_fail@plt+0x137dc>
   26478:	mvn	r0, #0
   2647c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26480:	ldrb	r7, [lr, #-1]
   26484:	mov	r5, lr
   26488:	sub	ip, r7, #48	; 0x30
   2648c:	bic	r9, r7, #32
   26490:	uxtb	ip, ip
   26494:	sub	r9, r9, #65	; 0x41
   26498:	cmp	r9, #5
   2649c:	cmphi	ip, #9
   264a0:	bhi	26478 <__assert_fail@plt+0x137d4>
   264a4:	cmp	r8, #57	; 0x39
   264a8:	bls	26508 <__assert_fail@plt+0x13864>
   264ac:	cmp	r8, #70	; 0x46
   264b0:	bhi	26504 <__assert_fail@plt+0x13860>
   264b4:	sub	r3, r8, #55	; 0x37
   264b8:	lsl	r3, r3, #4
   264bc:	uxtb	r3, r3
   264c0:	cmp	r7, #57	; 0x39
   264c4:	bls	264d8 <__assert_fail@plt+0x13834>
   264c8:	cmp	r7, #70	; 0x46
   264cc:	subls	ip, r7, #55	; 0x37
   264d0:	subhi	ip, r7, #87	; 0x57
   264d4:	uxtb	ip, ip
   264d8:	add	r7, r4, #1
   264dc:	add	r3, r3, ip
   264e0:	cmp	r7, r6
   264e4:	add	ip, r4, #2
   264e8:	strb	r3, [r4, #1]
   264ec:	add	lr, lr, #2
   264f0:	sub	r4, ip, r1
   264f4:	beq	26514 <__assert_fail@plt+0x13870>
   264f8:	mov	r4, r7
   264fc:	ldrb	r8, [lr, #-2]
   26500:	b	2645c <__assert_fail@plt+0x137b8>
   26504:	sub	r3, r8, #87	; 0x57
   26508:	lsl	r3, r3, #4
   2650c:	uxtb	r3, r3
   26510:	b	264c0 <__assert_fail@plt+0x1381c>
   26514:	ldrb	r8, [r5]
   26518:	cmp	r8, #0
   2651c:	beq	26564 <__assert_fail@plt+0x138c0>
   26520:	tst	r8, #128	; 0x80
   26524:	bne	26478 <__assert_fail@plt+0x137d4>
   26528:	mov	r7, r2
   2652c:	mov	r6, r0
   26530:	bl	12884 <__ctype_b_loc@plt>
   26534:	lsl	r3, r8, #1
   26538:	ldr	r2, [r0]
   2653c:	ldrh	ip, [r2, r3]
   26540:	lsr	ip, ip, #13
   26544:	eor	ip, ip, #1
   26548:	cmp	r7, r4
   2654c:	orrne	ip, ip, #1
   26550:	tst	ip, #1
   26554:	bne	26478 <__assert_fail@plt+0x137d4>
   26558:	add	r0, r5, #1
   2655c:	sub	r0, r0, r6
   26560:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26564:	cmp	r4, r2
   26568:	bne	26478 <__assert_fail@plt+0x137d4>
   2656c:	sub	r0, r5, r0
   26570:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26574:	cmp	r8, #0
   26578:	bne	26584 <__assert_fail@plt+0x138e0>
   2657c:	mov	r0, r8
   26580:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26584:	mov	r4, r2
   26588:	mov	r5, r0
   2658c:	b	26520 <__assert_fail@plt+0x1387c>
   26590:	cmp	r2, #0
   26594:	push	{r4, r5, r6, r7, r8, lr}
   26598:	beq	266fc <__assert_fail@plt+0x13a58>
   2659c:	mov	r5, #0
   265a0:	sub	r1, r1, #1
   265a4:	mov	lr, r5
   265a8:	mov	r4, r0
   265ac:	cmp	lr, #1
   265b0:	ldrb	r7, [r4]
   265b4:	beq	266c8 <__assert_fail@plt+0x13a24>
   265b8:	cmp	r5, #0
   265bc:	beq	265dc <__assert_fail@plt+0x13938>
   265c0:	cmp	r7, #58	; 0x3a
   265c4:	beq	266e0 <__assert_fail@plt+0x13a3c>
   265c8:	mvn	r0, #0
   265cc:	pop	{r4, r5, r6, r7, r8, pc}
   265d0:	ldrb	r7, [r4, #1]
   265d4:	mov	r5, lr
   265d8:	add	r4, r4, #1
   265dc:	sub	r3, r7, #48	; 0x30
   265e0:	bic	ip, r7, #32
   265e4:	uxtb	r3, r3
   265e8:	sub	ip, ip, #65	; 0x41
   265ec:	cmp	ip, #5
   265f0:	cmphi	r3, #9
   265f4:	bhi	265c8 <__assert_fail@plt+0x13924>
   265f8:	ldrb	r6, [r4, #1]
   265fc:	sub	ip, r6, #48	; 0x30
   26600:	bic	r8, r6, #32
   26604:	uxtb	ip, ip
   26608:	sub	r8, r8, #65	; 0x41
   2660c:	cmp	r8, #5
   26610:	cmphi	ip, #9
   26614:	bhi	265c8 <__assert_fail@plt+0x13924>
   26618:	cmp	r7, #57	; 0x39
   2661c:	bls	266bc <__assert_fail@plt+0x13a18>
   26620:	cmp	r7, #70	; 0x46
   26624:	bhi	266b8 <__assert_fail@plt+0x13a14>
   26628:	sub	r3, r7, #55	; 0x37
   2662c:	lsl	r3, r3, #4
   26630:	uxtb	r3, r3
   26634:	cmp	r6, #57	; 0x39
   26638:	bls	2664c <__assert_fail@plt+0x139a8>
   2663c:	cmp	r6, #70	; 0x46
   26640:	subls	ip, r6, #55	; 0x37
   26644:	subhi	ip, r6, #87	; 0x57
   26648:	uxtb	ip, ip
   2664c:	add	lr, lr, #1
   26650:	add	r3, r3, ip
   26654:	cmp	r2, lr
   26658:	strb	r3, [r1, #1]!
   2665c:	add	r4, r4, #2
   26660:	mov	r6, lr
   26664:	bne	265ac <__assert_fail@plt+0x13908>
   26668:	ldrb	r8, [r4]
   2666c:	cmp	r8, #58	; 0x3a
   26670:	beq	265c8 <__assert_fail@plt+0x13924>
   26674:	cmp	r8, #0
   26678:	mov	r7, r0
   2667c:	mov	r5, r2
   26680:	beq	266ec <__assert_fail@plt+0x13a48>
   26684:	tst	r8, #128	; 0x80
   26688:	bne	265c8 <__assert_fail@plt+0x13924>
   2668c:	bl	12884 <__ctype_b_loc@plt>
   26690:	lsl	r8, r8, #1
   26694:	ldr	r3, [r0]
   26698:	ldrh	r3, [r3, r8]
   2669c:	tst	r3, #8192	; 0x2000
   266a0:	beq	265c8 <__assert_fail@plt+0x13924>
   266a4:	cmp	r5, r6
   266a8:	addeq	r4, r4, #1
   266ac:	bne	265c8 <__assert_fail@plt+0x13924>
   266b0:	sub	r0, r4, r7
   266b4:	pop	{r4, r5, r6, r7, r8, pc}
   266b8:	sub	r3, r7, #87	; 0x57
   266bc:	lsl	r3, r3, #4
   266c0:	uxtb	r3, r3
   266c4:	b	26634 <__assert_fail@plt+0x13990>
   266c8:	cmp	r7, #58	; 0x3a
   266cc:	beq	265d0 <__assert_fail@plt+0x1392c>
   266d0:	cmp	r5, #0
   266d4:	beq	265dc <__assert_fail@plt+0x13938>
   266d8:	mvn	r0, #0
   266dc:	pop	{r4, r5, r6, r7, r8, pc}
   266e0:	ldrb	r7, [r4, #1]
   266e4:	add	r4, r4, #1
   266e8:	b	265dc <__assert_fail@plt+0x13938>
   266ec:	cmp	r2, r6
   266f0:	bne	265c8 <__assert_fail@plt+0x13924>
   266f4:	sub	r0, r4, r7
   266f8:	pop	{r4, r5, r6, r7, r8, pc}
   266fc:	mov	r4, r0
   26700:	mov	r6, r2
   26704:	b	26668 <__assert_fail@plt+0x139c4>
   26708:	mov	r3, #0
   2670c:	b	26330 <__assert_fail@plt+0x1368c>
   26710:	mov	r3, #1
   26714:	b	26330 <__assert_fail@plt+0x1368c>
   26718:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2671c:	subs	r7, r3, #0
   26720:	mov	r6, r0
   26724:	mov	r8, r1
   26728:	mov	sl, r2
   2672c:	mov	r4, r0
   26730:	mov	r9, #0
   26734:	movne	r3, #0
   26738:	strne	r3, [r7]
   2673c:	ldrb	r5, [r6, r9, lsl #1]
   26740:	bic	r0, r5, #32
   26744:	sub	r0, r0, #65	; 0x41
   26748:	sub	r3, r5, #48	; 0x30
   2674c:	cmp	r3, #9
   26750:	cmphi	r0, #5
   26754:	bls	267f8 <__assert_fail@plt+0x13b54>
   26758:	cmp	r5, #0
   2675c:	beq	26780 <__assert_fail@plt+0x13adc>
   26760:	tst	r5, #128	; 0x80
   26764:	bne	268ac <__assert_fail@plt+0x13c08>
   26768:	bl	12884 <__ctype_b_loc@plt>
   2676c:	lsl	r5, r5, #1
   26770:	ldr	r3, [r0]
   26774:	ldrh	r3, [r3, r5]
   26778:	tst	r3, #8192	; 0x2000
   2677c:	beq	268ac <__assert_fail@plt+0x13c08>
   26780:	cmp	r4, r6
   26784:	beq	26794 <__assert_fail@plt+0x13af0>
   26788:	ldrb	r3, [r4, #-2]
   2678c:	cmp	r3, #48	; 0x30
   26790:	beq	26898 <__assert_fail@plt+0x13bf4>
   26794:	add	r9, r9, #1
   26798:	mov	r0, #1
   2679c:	cmp	r8, #0
   267a0:	beq	267e4 <__assert_fail@plt+0x13b40>
   267a4:	cmp	r9, sl
   267a8:	bhi	268ac <__assert_fail@plt+0x13c08>
   267ac:	sub	ip, r8, #1
   267b0:	mov	r4, r6
   267b4:	mov	r1, #0
   267b8:	ldrb	r5, [r6, r1, lsl #1]
   267bc:	sub	r2, r5, #48	; 0x30
   267c0:	bic	r3, r5, #32
   267c4:	uxtb	r2, r2
   267c8:	sub	r3, r3, #65	; 0x41
   267cc:	cmp	r2, #9
   267d0:	cmphi	r3, #5
   267d4:	bls	26820 <__assert_fail@plt+0x13b7c>
   267d8:	cmp	r0, #0
   267dc:	movne	r3, #0
   267e0:	strbne	r3, [r8, r1]
   267e4:	cmp	r7, #0
   267e8:	subne	r9, r9, r0
   267ec:	strne	r9, [r7]
   267f0:	mov	r0, r4
   267f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   267f8:	ldrb	r0, [r4, #1]
   267fc:	bic	r3, r0, #32
   26800:	sub	r3, r3, #65	; 0x41
   26804:	sub	r0, r0, #48	; 0x30
   26808:	cmp	r0, #9
   2680c:	cmphi	r3, #5
   26810:	bhi	26758 <__assert_fail@plt+0x13ab4>
   26814:	add	r4, r4, #2
   26818:	add	r9, r9, #1
   2681c:	b	2673c <__assert_fail@plt+0x13a98>
   26820:	ldrb	lr, [r4, #1]
   26824:	sub	r3, lr, #48	; 0x30
   26828:	bic	sl, lr, #32
   2682c:	uxtb	r3, r3
   26830:	sub	sl, sl, #65	; 0x41
   26834:	cmp	r3, #9
   26838:	cmphi	sl, #5
   2683c:	bhi	267d8 <__assert_fail@plt+0x13b34>
   26840:	cmp	r5, #57	; 0x39
   26844:	bls	2688c <__assert_fail@plt+0x13be8>
   26848:	cmp	r5, #70	; 0x46
   2684c:	bhi	26888 <__assert_fail@plt+0x13be4>
   26850:	sub	r2, r5, #55	; 0x37
   26854:	lsl	r2, r2, #4
   26858:	uxtb	r2, r2
   2685c:	cmp	lr, #57	; 0x39
   26860:	bls	26874 <__assert_fail@plt+0x13bd0>
   26864:	cmp	lr, #70	; 0x46
   26868:	subls	r3, lr, #55	; 0x37
   2686c:	subhi	r3, lr, #87	; 0x57
   26870:	uxtb	r3, r3
   26874:	add	r2, r2, r3
   26878:	add	r1, r1, #1
   2687c:	add	r4, r4, #2
   26880:	strb	r2, [ip, #1]!
   26884:	b	267b8 <__assert_fail@plt+0x13b14>
   26888:	sub	r2, r5, #87	; 0x57
   2688c:	lsl	r2, r2, #4
   26890:	uxtb	r2, r2
   26894:	b	2685c <__assert_fail@plt+0x13bb8>
   26898:	ldrb	r3, [r4, #-1]
   2689c:	cmp	r3, #48	; 0x30
   268a0:	moveq	r0, #0
   268a4:	bne	26794 <__assert_fail@plt+0x13af0>
   268a8:	b	2679c <__assert_fail@plt+0x13af8>
   268ac:	mov	r0, #22
   268b0:	mov	r4, #0
   268b4:	bl	12b0c <gpg_err_set_errno@plt>
   268b8:	mov	r0, r4
   268bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   268c0:	push	{r4, r5, r6, r7, lr}
   268c4:	mov	r2, #0
   268c8:	ldr	r5, [pc, #172]	; 2697c <__assert_fail@plt+0x13cd8>
   268cc:	sub	sp, sp, #12
   268d0:	mov	r6, r1
   268d4:	ldr	ip, [r5]
   268d8:	mov	r1, r2
   268dc:	mov	r3, sp
   268e0:	str	ip, [sp, #4]
   268e4:	mov	r7, r0
   268e8:	bl	26718 <__assert_fail@plt+0x13a74>
   268ec:	subs	r4, r0, #0
   268f0:	beq	26954 <__assert_fail@plt+0x13cb0>
   268f4:	cmp	r6, #0
   268f8:	ldr	r0, [sp]
   268fc:	subne	r4, r4, r7
   26900:	strne	r4, [r6]
   26904:	add	r0, r0, #1
   26908:	bl	12458 <gcry_malloc@plt>
   2690c:	cmp	r0, #0
   26910:	mov	r4, r0
   26914:	beq	26960 <__assert_fail@plt+0x13cbc>
   26918:	ldr	r2, [sp]
   2691c:	mov	r1, r0
   26920:	add	r2, r2, #1
   26924:	mov	r0, r7
   26928:	mov	r3, #0
   2692c:	bl	26718 <__assert_fail@plt+0x13a74>
   26930:	cmp	r0, #0
   26934:	beq	2696c <__assert_fail@plt+0x13cc8>
   26938:	ldr	r2, [sp, #4]
   2693c:	ldr	r3, [r5]
   26940:	mov	r0, r4
   26944:	cmp	r2, r3
   26948:	bne	26968 <__assert_fail@plt+0x13cc4>
   2694c:	add	sp, sp, #12
   26950:	pop	{r4, r5, r6, r7, pc}
   26954:	cmp	r6, #0
   26958:	strne	r4, [r6]
   2695c:	bne	26938 <__assert_fail@plt+0x13c94>
   26960:	mov	r4, #0
   26964:	b	26938 <__assert_fail@plt+0x13c94>
   26968:	bl	1262c <__stack_chk_fail@plt>
   2696c:	ldr	r2, [pc, #12]	; 26980 <__assert_fail@plt+0x13cdc>
   26970:	mov	r1, #264	; 0x108
   26974:	ldr	r0, [pc, #8]	; 26984 <__assert_fail@plt+0x13ce0>
   26978:	bl	2201c <__assert_fail@plt+0xf378>
   2697c:	strdeq	r5, [r4], -r8
   26980:	andeq	r3, r3, ip, ror lr
   26984:	andeq	r3, r3, ip, lsl #29
   26988:	cmp	r1, #0
   2698c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26990:	beq	26a08 <__assert_fail@plt+0x13d64>
   26994:	ldrb	r4, [r0]
   26998:	cmp	r4, #0
   2699c:	beq	26a08 <__assert_fail@plt+0x13d64>
   269a0:	sub	r6, r1, #1
   269a4:	mov	r5, r0
   269a8:	ldr	r7, [pc, #144]	; 26a40 <__assert_fail@plt+0x13d9c>
   269ac:	ldr	r9, [pc, #144]	; 26a44 <__assert_fail@plt+0x13da0>
   269b0:	add	r6, r0, r6
   269b4:	mov	r8, #0
   269b8:	b	269e4 <__assert_fail@plt+0x13d40>
   269bc:	bl	128fc <strchr@plt>
   269c0:	cmp	r8, #0
   269c4:	bne	26a14 <__assert_fail@plt+0x13d70>
   269c8:	cmp	r0, #0
   269cc:	beq	26a24 <__assert_fail@plt+0x13d80>
   269d0:	cmp	r5, r6
   269d4:	beq	26a08 <__assert_fail@plt+0x13d64>
   269d8:	ldrb	r4, [r5, #1]!
   269dc:	cmp	r4, #0
   269e0:	beq	26a08 <__assert_fail@plt+0x13d64>
   269e4:	tst	r4, #128	; 0x80
   269e8:	mov	r1, r4
   269ec:	mov	r0, r7
   269f0:	bne	269d0 <__assert_fail@plt+0x13d2c>
   269f4:	cmp	r4, #64	; 0x40
   269f8:	bne	269bc <__assert_fail@plt+0x13d18>
   269fc:	cmp	r5, r6
   26a00:	mov	r8, #1
   26a04:	bne	269d8 <__assert_fail@plt+0x13d34>
   26a08:	mov	r8, #0
   26a0c:	mov	r0, r8
   26a10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26a14:	cmp	r0, #0
   26a18:	bne	269d0 <__assert_fail@plt+0x13d2c>
   26a1c:	mov	r0, r8
   26a20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26a24:	mov	r1, r4
   26a28:	mov	r0, r9
   26a2c:	bl	128fc <strchr@plt>
   26a30:	cmp	r0, #0
   26a34:	bne	269d0 <__assert_fail@plt+0x13d2c>
   26a38:	mov	r8, #1
   26a3c:	b	26a0c <__assert_fail@plt+0x13d68>
   26a40:	andeq	r3, r3, r8, ror #29
   26a44:	andeq	r3, r3, ip, lsr #30
   26a48:	adds	r3, r1, #0
   26a4c:	movne	r3, #1
   26a50:	cmp	r0, #0
   26a54:	moveq	r3, #0
   26a58:	cmp	r3, #0
   26a5c:	beq	26ac4 <__assert_fail@plt+0x13e20>
   26a60:	push	{r4, r5, r6, lr}
   26a64:	mov	r4, r0
   26a68:	mov	r5, r1
   26a6c:	bl	26988 <__assert_fail@plt+0x13ce4>
   26a70:	cmp	r0, #0
   26a74:	bne	26acc <__assert_fail@plt+0x13e28>
   26a78:	sub	ip, r5, #1
   26a7c:	add	r1, r4, ip
   26a80:	sub	r3, r4, #1
   26a84:	mov	lr, r0
   26a88:	ldrb	r2, [r3, #1]!
   26a8c:	cmp	r2, #64	; 0x40
   26a90:	addeq	lr, lr, #1
   26a94:	cmp	r3, r1
   26a98:	bne	26a88 <__assert_fail@plt+0x13de4>
   26a9c:	cmp	lr, #1
   26aa0:	popne	{r4, r5, r6, pc}
   26aa4:	ldrb	r3, [r4]
   26aa8:	cmp	r3, #64	; 0x40
   26aac:	popeq	{r4, r5, r6, pc}
   26ab0:	ldrb	r2, [r4, ip]
   26ab4:	cmp	r2, #46	; 0x2e
   26ab8:	cmpne	r2, #64	; 0x40
   26abc:	popeq	{r4, r5, r6, pc}
   26ac0:	b	26ae8 <__assert_fail@plt+0x13e44>
   26ac4:	mov	r0, r3
   26ac8:	bx	lr
   26acc:	mov	r0, #0
   26ad0:	pop	{r4, r5, r6, pc}
   26ad4:	cmp	ip, #0
   26ad8:	beq	26b40 <__assert_fail@plt+0x13e9c>
   26adc:	ldrb	r3, [r4, #1]!
   26ae0:	mov	r5, ip
   26ae4:	sub	ip, ip, #1
   26ae8:	cmp	r3, #46	; 0x2e
   26aec:	bne	26ad4 <__assert_fail@plt+0x13e30>
   26af0:	cmp	ip, #0
   26af4:	beq	26b40 <__assert_fail@plt+0x13e9c>
   26af8:	ldrb	r3, [r4, #1]
   26afc:	cmp	r3, #46	; 0x2e
   26b00:	bne	26adc <__assert_fail@plt+0x13e38>
   26b04:	sub	r3, r1, ip
   26b08:	add	r5, r3, r5
   26b0c:	ldr	lr, [pc, #52]	; 26b48 <__assert_fail@plt+0x13ea4>
   26b10:	add	r3, r4, #2
   26b14:	mov	r2, #0
   26b18:	b	26b2c <__assert_fail@plt+0x13e88>
   26b1c:	ldrb	r6, [r3], #1
   26b20:	cmp	r6, r2
   26b24:	bne	26b34 <__assert_fail@plt+0x13e90>
   26b28:	ldrb	r2, [lr, #1]!
   26b2c:	cmp	r3, r5
   26b30:	bne	26b1c <__assert_fail@plt+0x13e78>
   26b34:	cmp	r2, #0
   26b38:	bne	26adc <__assert_fail@plt+0x13e38>
   26b3c:	pop	{r4, r5, r6, pc}
   26b40:	mov	r0, #1
   26b44:	pop	{r4, r5, r6, pc}
   26b48:	andeq	r3, r3, r2, asr #30
   26b4c:	subs	r3, r0, #0
   26b50:	bxeq	lr
   26b54:	push	{r4, lr}
   26b58:	mov	r4, r3
   26b5c:	bl	128d8 <strlen@plt>
   26b60:	mov	r1, r0
   26b64:	mov	r0, r4
   26b68:	pop	{r4, lr}
   26b6c:	b	26a48 <__assert_fail@plt+0x13da4>
   26b70:	push	{r4, r5, r6, lr}
   26b74:	mov	r1, #60	; 0x3c
   26b78:	mov	r4, r0
   26b7c:	bl	128fc <strchr@plt>
   26b80:	cmp	r0, #0
   26b84:	beq	26c84 <__assert_fail@plt+0x13fe0>
   26b88:	add	r4, r0, #1
   26b8c:	mov	r0, r4
   26b90:	mov	r1, #62	; 0x3e
   26b94:	bl	128fc <strchr@plt>
   26b98:	cmp	r0, #0
   26b9c:	cmpne	r4, r0
   26ba0:	mov	r5, r0
   26ba4:	bcs	26c94 <__assert_fail@plt+0x13ff0>
   26ba8:	sub	r5, r0, r4
   26bac:	add	r0, r5, #1
   26bb0:	bl	12458 <gcry_malloc@plt>
   26bb4:	subs	r6, r0, #0
   26bb8:	beq	26ca0 <__assert_fail@plt+0x13ffc>
   26bbc:	mov	r1, r4
   26bc0:	mov	r2, r5
   26bc4:	bl	129c8 <strncpy@plt>
   26bc8:	mov	r1, #0
   26bcc:	strb	r1, [r6, r5]
   26bd0:	ldrb	r0, [r6]
   26bd4:	cmp	r0, r1
   26bd8:	beq	26c68 <__assert_fail@plt+0x13fc4>
   26bdc:	mov	r2, r6
   26be0:	mov	r3, r0
   26be4:	cmp	r3, #64	; 0x40
   26be8:	ldrb	r3, [r2, #1]!
   26bec:	addeq	r1, r1, #1
   26bf0:	cmp	r3, #0
   26bf4:	bne	26be4 <__assert_fail@plt+0x13f40>
   26bf8:	cmp	r1, #1
   26bfc:	bne	26c68 <__assert_fail@plt+0x13fc4>
   26c00:	cmp	r0, #64	; 0x40
   26c04:	beq	26c68 <__assert_fail@plt+0x13fc4>
   26c08:	add	r2, r6, r5
   26c0c:	ldrb	r3, [r2, #-1]
   26c10:	cmp	r3, #64	; 0x40
   26c14:	cmpne	r3, #46	; 0x2e
   26c18:	beq	26c68 <__assert_fail@plt+0x13fc4>
   26c1c:	cmp	r0, #32
   26c20:	bls	26c68 <__assert_fail@plt+0x13fc4>
   26c24:	mov	r2, r6
   26c28:	b	26c34 <__assert_fail@plt+0x13f90>
   26c2c:	cmp	r3, #32
   26c30:	bls	26c68 <__assert_fail@plt+0x13fc4>
   26c34:	ldrb	r3, [r2, #1]!
   26c38:	cmp	r3, #0
   26c3c:	bne	26c2c <__assert_fail@plt+0x13f88>
   26c40:	mov	r1, #64	; 0x40
   26c44:	mov	r0, r6
   26c48:	bl	128fc <strchr@plt>
   26c4c:	cmp	r0, #0
   26c50:	beq	26cb8 <__assert_fail@plt+0x14014>
   26c54:	add	r0, r0, #1
   26c58:	ldr	r1, [pc, #100]	; 26cc4 <__assert_fail@plt+0x14020>
   26c5c:	bl	12434 <strstr@plt>
   26c60:	cmp	r0, #0
   26c64:	beq	26cb8 <__assert_fail@plt+0x14014>
   26c68:	mov	r0, r6
   26c6c:	bl	125e4 <gcry_free@plt>
   26c70:	bl	12968 <__errno_location@plt>
   26c74:	mov	r3, #22
   26c78:	str	r3, [r0]
   26c7c:	mov	r0, #0
   26c80:	pop	{r4, r5, r6, pc}
   26c84:	mov	r0, r4
   26c88:	bl	26b4c <__assert_fail@plt+0x13ea8>
   26c8c:	cmp	r0, #0
   26c90:	bne	26ca8 <__assert_fail@plt+0x14004>
   26c94:	bl	12968 <__errno_location@plt>
   26c98:	mov	r3, #22
   26c9c:	str	r3, [r0]
   26ca0:	mov	r0, #0
   26ca4:	pop	{r4, r5, r6, pc}
   26ca8:	mov	r0, r4
   26cac:	bl	12c68 <gcry_strdup@plt>
   26cb0:	subs	r6, r0, #0
   26cb4:	beq	26ca0 <__assert_fail@plt+0x13ffc>
   26cb8:	mov	r0, r6
   26cbc:	pop	{r4, r5, r6, lr}
   26cc0:	b	1ca78 <__assert_fail@plt+0x9dd4>
   26cc4:	andeq	r3, r3, r0, asr #30
   26cc8:	cmp	r0, #0
   26ccc:	bxeq	lr
   26cd0:	ldrb	r0, [r0]
   26cd4:	adds	r0, r0, #0
   26cd8:	movne	r0, #1
   26cdc:	bx	lr
   26ce0:	push	{r4, r5, r6, r7, r8, lr}
   26ce4:	ldrb	r8, [r0]
   26ce8:	cmp	r8, #0
   26cec:	beq	26d34 <__assert_fail@plt+0x14090>
   26cf0:	ldr	r7, [pc, #144]	; 26d88 <__assert_fail@plt+0x140e4>
   26cf4:	mov	r6, r0
   26cf8:	mov	r5, r0
   26cfc:	mov	r4, r8
   26d00:	cmp	r4, #46	; 0x2e
   26d04:	beq	26d40 <__assert_fail@plt+0x1409c>
   26d08:	mov	r1, r4
   26d0c:	mov	r0, r7
   26d10:	bl	128fc <strchr@plt>
   26d14:	cmp	r0, #0
   26d18:	popeq	{r4, r5, r6, r7, r8, pc}
   26d1c:	cmp	r4, #45	; 0x2d
   26d20:	beq	26d5c <__assert_fail@plt+0x140b8>
   26d24:	ldrb	r4, [r5, #1]
   26d28:	cmp	r4, #0
   26d2c:	add	r5, r5, #1
   26d30:	bne	26d00 <__assert_fail@plt+0x1405c>
   26d34:	adds	r0, r8, #0
   26d38:	movne	r0, #1
   26d3c:	pop	{r4, r5, r6, r7, r8, pc}
   26d40:	cmp	r6, r5
   26d44:	beq	26d54 <__assert_fail@plt+0x140b0>
   26d48:	ldrb	r4, [r5, #1]
   26d4c:	cmp	r4, #46	; 0x2e
   26d50:	bne	26d28 <__assert_fail@plt+0x14084>
   26d54:	mov	r0, #0
   26d58:	pop	{r4, r5, r6, r7, r8, pc}
   26d5c:	cmp	r6, r5
   26d60:	beq	26d54 <__assert_fail@plt+0x140b0>
   26d64:	ldrb	r3, [r5, #-1]
   26d68:	cmp	r3, #46	; 0x2e
   26d6c:	beq	26d54 <__assert_fail@plt+0x140b0>
   26d70:	ldrb	r4, [r5, #1]
   26d74:	cmp	r4, #0
   26d78:	cmpne	r4, #46	; 0x2e
   26d7c:	beq	26d54 <__assert_fail@plt+0x140b0>
   26d80:	add	r5, r5, #1
   26d84:	b	26d00 <__assert_fail@plt+0x1405c>
   26d88:	andeq	r3, r3, r4, lsr #29
   26d8c:	push	{r4, r5, r6, r7, lr}
   26d90:	ldrb	r6, [r0]
   26d94:	cmp	r6, #48	; 0x30
   26d98:	beq	26e9c <__assert_fail@plt+0x141f8>
   26d9c:	sub	r7, r6, #48	; 0x30
   26da0:	uxtb	ip, r7
   26da4:	cmp	ip, #9
   26da8:	movhi	ip, #0
   26dac:	bhi	26dec <__assert_fail@plt+0x14148>
   26db0:	ldrb	r4, [r0, #1]
   26db4:	sub	lr, r4, #48	; 0x30
   26db8:	add	r5, r0, #1
   26dbc:	mov	ip, #0
   26dc0:	b	26dd0 <__assert_fail@plt+0x1412c>
   26dc4:	ldrb	r4, [r5, #1]!
   26dc8:	sub	r7, r6, #48	; 0x30
   26dcc:	sub	lr, r4, #48	; 0x30
   26dd0:	add	ip, ip, ip, lsl #2
   26dd4:	uxtb	lr, lr
   26dd8:	cmp	lr, #9
   26ddc:	mov	r6, r4
   26de0:	add	ip, r7, ip, lsl #1
   26de4:	mov	r0, r5
   26de8:	bls	26dc4 <__assert_fail@plt+0x14120>
   26dec:	str	ip, [r1]
   26df0:	ldrb	r1, [r0]
   26df4:	cmp	r1, #46	; 0x2e
   26df8:	bne	26eb4 <__assert_fail@plt+0x14210>
   26dfc:	ldrb	lr, [r0, #1]
   26e00:	add	ip, r0, #1
   26e04:	cmp	lr, #48	; 0x30
   26e08:	beq	26ebc <__assert_fail@plt+0x14218>
   26e0c:	sub	r0, lr, #48	; 0x30
   26e10:	uxtb	r1, r0
   26e14:	cmp	r1, #9
   26e18:	movhi	r1, #0
   26e1c:	bhi	26e40 <__assert_fail@plt+0x1419c>
   26e20:	mov	r1, #0
   26e24:	ldrb	lr, [ip, #1]!
   26e28:	add	r1, r1, r1, lsl #2
   26e2c:	add	r1, r0, r1, lsl #1
   26e30:	sub	r0, lr, #48	; 0x30
   26e34:	uxtb	lr, r0
   26e38:	cmp	lr, #9
   26e3c:	bls	26e24 <__assert_fail@plt+0x14180>
   26e40:	str	r1, [r2]
   26e44:	ldrb	r2, [ip]
   26e48:	cmp	r2, #46	; 0x2e
   26e4c:	bne	26eb4 <__assert_fail@plt+0x14210>
   26e50:	ldrb	lr, [ip, #1]
   26e54:	add	r0, ip, #1
   26e58:	cmp	lr, #48	; 0x30
   26e5c:	beq	26ed4 <__assert_fail@plt+0x14230>
   26e60:	sub	r1, lr, #48	; 0x30
   26e64:	uxtb	r2, r1
   26e68:	cmp	r2, #9
   26e6c:	movhi	r2, #0
   26e70:	bhi	26e94 <__assert_fail@plt+0x141f0>
   26e74:	mov	r2, #0
   26e78:	ldrb	lr, [r0, #1]!
   26e7c:	add	r2, r2, r2, lsl #2
   26e80:	add	r2, r1, r2, lsl #1
   26e84:	sub	r1, lr, #48	; 0x30
   26e88:	uxtb	ip, r1
   26e8c:	cmp	ip, #9
   26e90:	bls	26e78 <__assert_fail@plt+0x141d4>
   26e94:	str	r2, [r3]
   26e98:	pop	{r4, r5, r6, r7, pc}
   26e9c:	ldrb	r4, [r0, #1]
   26ea0:	sub	lr, r4, #48	; 0x30
   26ea4:	uxtb	ip, lr
   26ea8:	cmp	ip, #9
   26eac:	movhi	r7, #0
   26eb0:	bhi	26db8 <__assert_fail@plt+0x14114>
   26eb4:	mov	r0, #0
   26eb8:	pop	{r4, r5, r6, r7, pc}
   26ebc:	ldrb	r1, [r0, #2]
   26ec0:	sub	r1, r1, #48	; 0x30
   26ec4:	cmp	r1, #9
   26ec8:	bls	26eb4 <__assert_fail@plt+0x14210>
   26ecc:	mov	r0, #0
   26ed0:	b	26e20 <__assert_fail@plt+0x1417c>
   26ed4:	ldrb	r2, [ip, #2]
   26ed8:	sub	r2, r2, #48	; 0x30
   26edc:	cmp	r2, #9
   26ee0:	bls	26eb4 <__assert_fail@plt+0x14210>
   26ee4:	mov	r1, #0
   26ee8:	b	26e74 <__assert_fail@plt+0x141d0>
   26eec:	subs	r0, r2, #0
   26ef0:	push	{r4, lr}
   26ef4:	beq	26f04 <__assert_fail@plt+0x14260>
   26ef8:	mov	r1, r0
   26efc:	ldr	r0, [pc, #12]	; 26f10 <__assert_fail@plt+0x1426c>
   26f00:	bl	21d40 <__assert_fail@plt+0xf09c>
   26f04:	mov	r0, r1
   26f08:	bl	12b3c <gpg_strerror@plt>
   26f0c:	b	26ef8 <__assert_fail@plt+0x14254>
   26f10:	andeq	r3, r3, ip, asr pc
   26f14:	cmp	r1, #20
   26f18:	mov	ip, r2
   26f1c:	beq	26f78 <__assert_fail@plt+0x142d4>
   26f20:	ble	26f54 <__assert_fail@plt+0x142b0>
   26f24:	cmp	r1, #50	; 0x32
   26f28:	moveq	r0, #6
   26f2c:	beq	26f48 <__assert_fail@plt+0x142a4>
   26f30:	cmp	r1, #100	; 0x64
   26f34:	moveq	r0, #7
   26f38:	beq	26f48 <__assert_fail@plt+0x142a4>
   26f3c:	cmp	r1, #40	; 0x28
   26f40:	moveq	r0, #5
   26f44:	movne	r0, #4
   26f48:	mov	r2, r3
   26f4c:	mov	r1, ip
   26f50:	b	21c08 <__assert_fail@plt+0xef64>
   26f54:	cmp	r1, #0
   26f58:	moveq	r0, #1
   26f5c:	beq	26f48 <__assert_fail@plt+0x142a4>
   26f60:	cmp	r1, #10
   26f64:	moveq	r0, #2
   26f68:	movne	r0, #4
   26f6c:	mov	r2, r3
   26f70:	mov	r1, ip
   26f74:	b	21c08 <__assert_fail@plt+0xef64>
   26f78:	mov	r0, #3
   26f7c:	b	26f48 <__assert_fail@plt+0x142a4>
   26f80:	ldr	r3, [pc, #84]	; 26fdc <__assert_fail@plt+0x14338>
   26f84:	ldr	r0, [r3]
   26f88:	cmp	r0, #0
   26f8c:	bne	26fd4 <__assert_fail@plt+0x14330>
   26f90:	push	{r4, lr}
   26f94:	ands	r2, r2, #1
   26f98:	mov	r4, r1
   26f9c:	mov	r1, #1
   26fa0:	str	r1, [r3]
   26fa4:	beq	26fbc <__assert_fail@plt+0x14318>
   26fa8:	ldr	r1, [pc, #48]	; 26fe0 <__assert_fail@plt+0x1433c>
   26fac:	mov	r2, #5
   26fb0:	bl	12620 <dcgettext@plt>
   26fb4:	mov	r1, r4
   26fb8:	bl	21d40 <__assert_fail@plt+0xf09c>
   26fbc:	mov	r0, r2
   26fc0:	ldr	r1, [pc, #28]	; 26fe4 <__assert_fail@plt+0x14340>
   26fc4:	mov	r2, #5
   26fc8:	bl	12620 <dcgettext@plt>
   26fcc:	mov	r1, r4
   26fd0:	bl	21d40 <__assert_fail@plt+0xf09c>
   26fd4:	mov	r0, #0
   26fd8:	bx	lr
   26fdc:	andeq	r6, r4, ip, asr #7
   26fe0:	andeq	r3, r3, r4, ror pc
   26fe4:	andeq	r3, r3, ip, lsr #31
   26fe8:	push	{r4, r5, r6, r7, lr}
   26fec:	subs	r7, r2, #0
   26ff0:	mov	r6, r0
   26ff4:	sub	sp, sp, #12
   26ff8:	mov	r0, r1
   26ffc:	beq	27034 <__assert_fail@plt+0x14390>
   27000:	ldrsb	r2, [r1]
   27004:	cmp	r2, #0
   27008:	blt	2705c <__assert_fail@plt+0x143b8>
   2700c:	sub	lr, r7, #1
   27010:	add	lr, lr, r1
   27014:	rsb	r4, r1, #1
   27018:	b	27028 <__assert_fail@plt+0x14384>
   2701c:	ldrsb	ip, [r1, #1]!
   27020:	cmp	ip, #0
   27024:	blt	27060 <__assert_fail@plt+0x143bc>
   27028:	cmp	r1, lr
   2702c:	add	r5, r4, r1
   27030:	bne	2701c <__assert_fail@plt+0x14378>
   27034:	mov	ip, #0
   27038:	mov	r1, r0
   2703c:	mov	r2, r7
   27040:	mov	r0, r6
   27044:	str	ip, [sp]
   27048:	bl	129f8 <gpgrt_write_sanitized@plt>
   2704c:	mov	r4, r0
   27050:	mov	r0, r4
   27054:	add	sp, sp, #12
   27058:	pop	{r4, r5, r6, r7, pc}
   2705c:	mov	r5, #0
   27060:	cmp	r3, #0
   27064:	moveq	r2, r3
   27068:	ldrbne	r2, [r3]
   2706c:	mov	r1, r7
   27070:	bl	1e658 <__assert_fail@plt+0xb9b4>
   27074:	mov	r1, r6
   27078:	mov	r7, r0
   2707c:	bl	12a64 <gpgrt_fputs@plt>
   27080:	mov	r4, r0
   27084:	mov	r0, r7
   27088:	bl	125e4 <gcry_free@plt>
   2708c:	cmn	r4, #1
   27090:	movne	r4, r5
   27094:	mov	r0, r4
   27098:	add	sp, sp, #12
   2709c:	pop	{r4, r5, r6, r7, pc}
   270a0:	push	{r4, lr}
   270a4:	mov	r1, #0
   270a8:	ldr	r0, [pc, #28]	; 270cc <__assert_fail@plt+0x14428>
   270ac:	bl	12bd8 <gcry_set_log_handler@plt>
   270b0:	mov	r1, #0
   270b4:	ldr	r0, [pc, #20]	; 270d0 <__assert_fail@plt+0x1442c>
   270b8:	bl	12be4 <gcry_set_fatalerror_handler@plt>
   270bc:	mov	r1, #0
   270c0:	ldr	r0, [pc, #12]	; 270d4 <__assert_fail@plt+0x14430>
   270c4:	pop	{r4, lr}
   270c8:	b	12ae8 <gcry_set_outofcore_handler@plt>
   270cc:	andeq	r6, r2, r4, lsl pc
   270d0:	andeq	r6, r2, ip, ror #29
   270d4:	andeq	r6, r2, r0, lsl #31
   270d8:	push	{r4, r5, r6, lr}
   270dc:	bl	12914 <gpg_err_code_from_syserror@plt>
   270e0:	ldr	r1, [pc, #40]	; 27110 <__assert_fail@plt+0x1446c>
   270e4:	mov	r2, #5
   270e8:	subs	r4, r0, #0
   270ec:	mov	r0, #0
   270f0:	uxthne	r4, r4
   270f4:	bl	12620 <dcgettext@plt>
   270f8:	mov	r5, r0
   270fc:	mov	r0, r4
   27100:	bl	12b3c <gpg_strerror@plt>
   27104:	mov	r1, r0
   27108:	mov	r0, r5
   2710c:	bl	21d40 <__assert_fail@plt+0xf09c>
   27110:	ldrdeq	r3, [r3], -r4
   27114:	push	{r4, lr}
   27118:	bl	129e0 <gcry_cipher_algo_name@plt>
   2711c:	ldr	r1, [pc, #24]	; 2713c <__assert_fail@plt+0x14498>
   27120:	mov	r4, r0
   27124:	bl	124b8 <strcmp@plt>
   27128:	ldr	r3, [pc, #16]	; 27140 <__assert_fail@plt+0x1449c>
   2712c:	cmp	r0, #0
   27130:	movne	r0, r4
   27134:	moveq	r0, r3
   27138:	pop	{r4, pc}
   2713c:	andeq	r4, r3, r0
   27140:	strdeq	r3, [r3], -r8
   27144:	push	{r4, r5, r6, lr}
   27148:	subs	r5, r0, #0
   2714c:	mov	r4, r2
   27150:	beq	2717c <__assert_fail@plt+0x144d8>
   27154:	mov	r6, r1
   27158:	mov	r2, #5
   2715c:	ldr	r1, [pc, #52]	; 27198 <__assert_fail@plt+0x144f4>
   27160:	mov	r0, #0
   27164:	bl	12620 <dcgettext@plt>
   27168:	mov	r3, r4
   2716c:	mov	r2, r6
   27170:	mov	r1, r5
   27174:	pop	{r4, r5, r6, lr}
   27178:	b	21c58 <__assert_fail@plt+0xefb4>
   2717c:	mov	r2, #5
   27180:	ldr	r1, [pc, #20]	; 2719c <__assert_fail@plt+0x144f8>
   27184:	bl	12620 <dcgettext@plt>
   27188:	mov	r2, r4
   2718c:	ldr	r1, [pc, #12]	; 271a0 <__assert_fail@plt+0x144fc>
   27190:	pop	{r4, r5, r6, lr}
   27194:	b	21c58 <__assert_fail@plt+0xefb4>
   27198:	andeq	r4, r3, r4
   2719c:	andeq	r4, r3, r4, lsr r0
   271a0:	andeq	r0, r3, r4, ror ip
   271a4:	cmp	r0, #0
   271a8:	beq	271cc <__assert_fail@plt+0x14528>
   271ac:	ldrb	r3, [r0]
   271b0:	cmp	r3, #45	; 0x2d
   271b4:	bxne	lr
   271b8:	ldrb	r2, [r0, #1]
   271bc:	ldr	r3, [pc, #16]	; 271d4 <__assert_fail@plt+0x14530>
   271c0:	cmp	r2, #0
   271c4:	moveq	r0, r3
   271c8:	bx	lr
   271cc:	ldr	r0, [pc]	; 271d4 <__assert_fail@plt+0x14530>
   271d0:	bx	lr
   271d4:	andeq	r4, r3, r0, ror r0
   271d8:	cmp	r0, #0
   271dc:	beq	27200 <__assert_fail@plt+0x1455c>
   271e0:	ldrb	r3, [r0]
   271e4:	cmp	r3, #45	; 0x2d
   271e8:	bxne	lr
   271ec:	ldrb	r2, [r0, #1]
   271f0:	ldr	r3, [pc, #16]	; 27208 <__assert_fail@plt+0x14564>
   271f4:	cmp	r2, #0
   271f8:	moveq	r0, r3
   271fc:	bx	lr
   27200:	ldr	r0, [pc]	; 27208 <__assert_fail@plt+0x14564>
   27204:	bx	lr
   27208:	andeq	r4, r3, ip, ror r0
   2720c:	b	26fe8 <__assert_fail@plt+0x14344>
   27210:	push	{r4, lr}
   27214:	sub	sp, sp, #8
   27218:	ldr	r4, [pc, #52]	; 27254 <__assert_fail@plt+0x145b0>
   2721c:	strb	r3, [sp]
   27220:	mov	r3, #0
   27224:	ldr	ip, [r4]
   27228:	strb	r3, [sp, #1]
   2722c:	mov	r3, sp
   27230:	str	ip, [sp, #4]
   27234:	bl	26fe8 <__assert_fail@plt+0x14344>
   27238:	ldr	r2, [sp, #4]
   2723c:	ldr	r3, [r4]
   27240:	cmp	r2, r3
   27244:	bne	27250 <__assert_fail@plt+0x145ac>
   27248:	add	sp, sp, #8
   2724c:	pop	{r4, pc}
   27250:	bl	1262c <__stack_chk_fail@plt>
   27254:	strdeq	r5, [r4], -r8
   27258:	mov	r3, #0
   2725c:	b	26fe8 <__assert_fail@plt+0x14344>
   27260:	push	{r4, r5, r6, lr}
   27264:	subs	r4, r1, #0
   27268:	mov	r5, r0
   2726c:	beq	27290 <__assert_fail@plt+0x145ec>
   27270:	mov	r0, r4
   27274:	bl	128d8 <strlen@plt>
   27278:	mov	r2, r0
   2727c:	mov	r1, r4
   27280:	mov	r0, r5
   27284:	mov	r3, #0
   27288:	pop	{r4, r5, r6, lr}
   2728c:	b	26fe8 <__assert_fail@plt+0x14344>
   27290:	mov	r2, r4
   27294:	ldr	r4, [pc]	; 2729c <__assert_fail@plt+0x145f8>
   27298:	b	2727c <__assert_fail@plt+0x145d8>
   2729c:	andeq	r1, r3, r8, ror #15
   272a0:	cmp	r2, #0
   272a4:	bxeq	lr
   272a8:	push	{r4, r5, r6, lr}
   272ac:	sub	r6, r2, #1
   272b0:	mov	r5, r0
   272b4:	add	r6, r1, r6
   272b8:	sub	r4, r1, #1
   272bc:	ldrb	r3, [r4, #1]!
   272c0:	mov	r1, r5
   272c4:	lsr	r3, r3, #4
   272c8:	cmp	r3, #9
   272cc:	add	r0, r3, #55	; 0x37
   272d0:	addls	r0, r3, #48	; 0x30
   272d4:	bl	12b54 <putc@plt>
   272d8:	ldrb	r3, [r4]
   272dc:	mov	r1, r5
   272e0:	and	r3, r3, #15
   272e4:	cmp	r3, #9
   272e8:	add	r0, r3, #55	; 0x37
   272ec:	addls	r0, r3, #48	; 0x30
   272f0:	bl	12b54 <putc@plt>
   272f4:	cmp	r4, r6
   272f8:	bne	272bc <__assert_fail@plt+0x14618>
   272fc:	pop	{r4, r5, r6, pc}
   27300:	cmp	r1, #0
   27304:	push	{r4, r5, r6, r7, r8, r9, lr}
   27308:	sub	sp, sp, #12
   2730c:	beq	274cc <__assert_fail@plt+0x14828>
   27310:	sub	r5, r0, #1
   27314:	sub	r1, r1, #1
   27318:	mov	r7, r2
   2731c:	add	r6, r0, r1
   27320:	mov	r2, r5
   27324:	mov	r0, #1
   27328:	b	2735c <__assert_fail@plt+0x146b8>
   2732c:	cmp	ip, r7
   27330:	beq	27418 <__assert_fail@plt+0x14774>
   27334:	cmp	r7, #0
   27338:	sub	r3, ip, #92	; 0x5c
   2733c:	clz	r3, r3
   27340:	lsr	r3, r3, #5
   27344:	moveq	r3, #0
   27348:	cmp	r3, #0
   2734c:	addeq	r0, r0, #1
   27350:	bne	2742c <__assert_fail@plt+0x14788>
   27354:	cmp	r2, r6
   27358:	beq	27384 <__assert_fail@plt+0x146e0>
   2735c:	ldrb	ip, [r2, #1]!
   27360:	cmp	ip, #127	; 0x7f
   27364:	cmpne	ip, #31
   27368:	bhi	2732c <__assert_fail@plt+0x14688>
   2736c:	cmp	ip, #13
   27370:	cmpne	ip, #10
   27374:	bne	27418 <__assert_fail@plt+0x14774>
   27378:	cmp	r2, r6
   2737c:	add	r0, r0, #2
   27380:	bne	2735c <__assert_fail@plt+0x146b8>
   27384:	bl	12458 <gcry_malloc@plt>
   27388:	ldr	r9, [pc, #336]	; 274e0 <__assert_fail@plt+0x1483c>
   2738c:	mov	r8, r0
   27390:	mov	r4, r0
   27394:	b	273cc <__assert_fail@plt+0x14728>
   27398:	cmp	r3, r7
   2739c:	beq	27478 <__assert_fail@plt+0x147d4>
   273a0:	cmp	r7, #0
   273a4:	sub	r2, r3, #92	; 0x5c
   273a8:	clz	r2, r2
   273ac:	lsr	r2, r2, #5
   273b0:	moveq	r2, #0
   273b4:	cmp	r2, #0
   273b8:	strbeq	r3, [r4]
   273bc:	moveq	r4, r0
   273c0:	bne	27478 <__assert_fail@plt+0x147d4>
   273c4:	cmp	r5, r6
   273c8:	beq	27404 <__assert_fail@plt+0x14760>
   273cc:	ldrb	r3, [r5, #1]!
   273d0:	add	r0, r4, #1
   273d4:	cmp	r3, #127	; 0x7f
   273d8:	cmpne	r3, #31
   273dc:	bhi	27398 <__assert_fail@plt+0x146f4>
   273e0:	mov	r2, #92	; 0x5c
   273e4:	cmp	r3, #10
   273e8:	strb	r2, [r4]
   273ec:	bne	27434 <__assert_fail@plt+0x14790>
   273f0:	mov	r3, #110	; 0x6e
   273f4:	cmp	r5, r6
   273f8:	strb	r3, [r4, #1]
   273fc:	add	r4, r4, #2
   27400:	bne	273cc <__assert_fail@plt+0x14728>
   27404:	mov	r3, #0
   27408:	mov	r0, r8
   2740c:	strb	r3, [r4]
   27410:	add	sp, sp, #12
   27414:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27418:	and	r1, ip, #247	; 0xf7
   2741c:	sub	r3, ip, #11
   27420:	cmp	r1, #0
   27424:	cmpne	r3, #1
   27428:	bls	27378 <__assert_fail@plt+0x146d4>
   2742c:	add	r0, r0, #5
   27430:	b	27354 <__assert_fail@plt+0x146b0>
   27434:	cmp	r3, #13
   27438:	moveq	r3, #114	; 0x72
   2743c:	strbeq	r3, [r4, #1]
   27440:	addeq	r4, r4, #2
   27444:	beq	273c4 <__assert_fail@plt+0x14720>
   27448:	cmp	r3, #12
   2744c:	beq	2749c <__assert_fail@plt+0x147f8>
   27450:	cmp	r3, #11
   27454:	beq	274ac <__assert_fail@plt+0x14808>
   27458:	cmp	r3, #8
   2745c:	beq	274bc <__assert_fail@plt+0x14818>
   27460:	cmp	r3, #0
   27464:	bne	27480 <__assert_fail@plt+0x147dc>
   27468:	mov	r3, #48	; 0x30
   2746c:	strb	r3, [r4, #1]
   27470:	add	r4, r4, #2
   27474:	b	273c4 <__assert_fail@plt+0x14720>
   27478:	mov	r2, #92	; 0x5c
   2747c:	strb	r2, [r4]
   27480:	str	r3, [sp]
   27484:	mvn	r2, #0
   27488:	mov	r3, r9
   2748c:	mov	r1, #1
   27490:	add	r4, r4, #4
   27494:	bl	1298c <__sprintf_chk@plt>
   27498:	b	273c4 <__assert_fail@plt+0x14720>
   2749c:	mov	r3, #102	; 0x66
   274a0:	strb	r3, [r4, #1]
   274a4:	add	r4, r4, #2
   274a8:	b	273c4 <__assert_fail@plt+0x14720>
   274ac:	mov	r3, #118	; 0x76
   274b0:	strb	r3, [r4, #1]
   274b4:	add	r4, r4, #2
   274b8:	b	273c4 <__assert_fail@plt+0x14720>
   274bc:	mov	r3, #98	; 0x62
   274c0:	strb	r3, [r4, #1]
   274c4:	add	r4, r4, #2
   274c8:	b	273c4 <__assert_fail@plt+0x14720>
   274cc:	mov	r0, #1
   274d0:	bl	12458 <gcry_malloc@plt>
   274d4:	mov	r4, r0
   274d8:	mov	r8, r0
   274dc:	b	27404 <__assert_fail@plt+0x14760>
   274e0:	andeq	r2, r3, r0, ror #14
   274e4:	push	{r4, lr}
   274e8:	bl	27300 <__assert_fail@plt+0x1465c>
   274ec:	cmp	r0, #0
   274f0:	popne	{r4, pc}
   274f4:	bl	270d8 <__assert_fail@plt+0x14434>
   274f8:	push	{r4, r5, r6, r7, lr}
   274fc:	mov	r6, r0
   27500:	ldr	lr, [pc, #380]	; 27684 <__assert_fail@plt+0x149e0>
   27504:	mov	r7, r1
   27508:	sub	sp, sp, #44	; 0x2c
   2750c:	ldm	lr!, {r0, r1, r2, r3}
   27510:	add	ip, sp, #4
   27514:	ldr	r5, [pc, #364]	; 27688 <__assert_fail@plt+0x149e4>
   27518:	stmia	ip!, {r0, r1, r2, r3}
   2751c:	ldm	lr, {r0, r1}
   27520:	ldr	r3, [r5]
   27524:	stm	ip, {r0, r1}
   27528:	mov	r0, r6
   2752c:	str	r3, [sp, #36]	; 0x24
   27530:	bl	29550 <__assert_fail@plt+0x168ac>
   27534:	clz	r3, r7
   27538:	lsr	r3, r3, #5
   2753c:	cmp	r0, #0
   27540:	movne	r4, #1
   27544:	moveq	r4, r3
   27548:	cmp	r4, #0
   2754c:	movne	r4, #0
   27550:	beq	27570 <__assert_fail@plt+0x148cc>
   27554:	ldr	r2, [sp, #36]	; 0x24
   27558:	ldr	r3, [r5]
   2755c:	mov	r0, r4
   27560:	cmp	r2, r3
   27564:	bne	27680 <__assert_fail@plt+0x149dc>
   27568:	add	sp, sp, #44	; 0x2c
   2756c:	pop	{r4, r5, r6, r7, pc}
   27570:	mov	r0, r6
   27574:	bl	29594 <__assert_fail@plt+0x168f0>
   27578:	subs	r6, r0, #0
   2757c:	beq	2765c <__assert_fail@plt+0x149b8>
   27580:	mov	r3, r4
   27584:	mov	r2, #1
   27588:	mov	r1, #3
   2758c:	bl	29700 <__assert_fail@plt+0x16a5c>
   27590:	mov	r1, sp
   27594:	mov	r0, r6
   27598:	bl	2ada0 <__assert_fail@plt+0x180fc>
   2759c:	cmp	r0, #6
   275a0:	sbcs	r3, r1, #0
   275a4:	bge	275b8 <__assert_fail@plt+0x14914>
   275a8:	ldr	r4, [sp]
   275ac:	cmp	r4, #0
   275b0:	streq	r4, [r7]
   275b4:	beq	27648 <__assert_fail@plt+0x149a4>
   275b8:	add	r1, sp, #28
   275bc:	mov	r2, #6
   275c0:	mov	r0, r6
   275c4:	bl	29da0 <__assert_fail@plt+0x170fc>
   275c8:	cmn	r0, #1
   275cc:	beq	27670 <__assert_fail@plt+0x149cc>
   275d0:	ldr	r2, [sp, #4]
   275d4:	add	r1, sp, #8
   275d8:	add	r0, sp, #28
   275dc:	bl	125f0 <memcmp@plt>
   275e0:	cmp	r0, #0
   275e4:	beq	2763c <__assert_fail@plt+0x14998>
   275e8:	ldr	r2, [sp, #12]
   275ec:	add	r1, sp, #16
   275f0:	add	r0, sp, #28
   275f4:	bl	125f0 <memcmp@plt>
   275f8:	cmp	r0, #0
   275fc:	beq	2763c <__assert_fail@plt+0x14998>
   27600:	add	r0, sp, #28
   27604:	ldr	r2, [sp, #20]
   27608:	add	r1, sp, #24
   2760c:	bl	125f0 <memcmp@plt>
   27610:	cmp	r0, #0
   27614:	beq	2763c <__assert_fail@plt+0x14998>
   27618:	ldrb	r3, [sp, #28]
   2761c:	tst	r3, #128	; 0x80
   27620:	beq	27654 <__assert_fail@plt+0x149b0>
   27624:	tst	r3, #64	; 0x40
   27628:	asreq	r3, r3, #2
   2762c:	andne	r3, r3, #63	; 0x3f
   27630:	andeq	r3, r3, #15
   27634:	cmp	r3, #8
   27638:	bne	27654 <__assert_fail@plt+0x149b0>
   2763c:	mov	r4, #1
   27640:	mov	r3, #0
   27644:	str	r3, [r7]
   27648:	mov	r0, r6
   2764c:	bl	292a8 <__assert_fail@plt+0x16604>
   27650:	b	27554 <__assert_fail@plt+0x148b0>
   27654:	mov	r4, #0
   27658:	b	27648 <__assert_fail@plt+0x149a4>
   2765c:	bl	12914 <gpg_err_code_from_syserror@plt>
   27660:	mov	r4, r6
   27664:	uxth	r0, r0
   27668:	str	r0, [r7]
   2766c:	b	27554 <__assert_fail@plt+0x148b0>
   27670:	ldr	r3, [r6, #56]	; 0x38
   27674:	mov	r4, #0
   27678:	str	r3, [r7]
   2767c:	b	27648 <__assert_fail@plt+0x149a4>
   27680:	bl	1262c <__stack_chk_fail@plt>
   27684:	andeq	r3, r3, r4, asr #30
   27688:	strdeq	r5, [r4], -r8
   2768c:	push	{r4, r5, r6, r7, r8, lr}
   27690:	mov	r5, r0
   27694:	ldr	r7, [pc, #88]	; 276f4 <__assert_fail@plt+0x14a50>
   27698:	mov	r6, r1
   2769c:	b	276c4 <__assert_fail@plt+0x14a20>
   276a0:	bl	12980 <strncasecmp@plt>
   276a4:	cmp	r0, #0
   276a8:	beq	276ec <__assert_fail@plt+0x14a48>
   276ac:	ldrb	r0, [r5, r4]!
   276b0:	cmp	r0, #124	; 0x7c
   276b4:	ldrbeq	r0, [r5, #1]
   276b8:	addeq	r5, r5, #1
   276bc:	cmp	r0, #0
   276c0:	popeq	{r4, r5, r6, r7, r8, pc}
   276c4:	mov	r1, r7
   276c8:	mov	r0, r5
   276cc:	bl	124f4 <strcspn@plt>
   276d0:	mov	r1, r6
   276d4:	subs	r4, r0, #0
   276d8:	mov	r2, r4
   276dc:	mov	r0, r5
   276e0:	bne	276a0 <__assert_fail@plt+0x149fc>
   276e4:	mov	r0, r4
   276e8:	pop	{r4, r5, r6, r7, r8, pc}
   276ec:	mov	r0, #1
   276f0:	pop	{r4, r5, r6, r7, r8, pc}
   276f4:	andeq	r4, r3, r4, lsl #1
   276f8:	push	{r4, r5, r6, lr}
   276fc:	sub	sp, sp, #32
   27700:	ldr	r4, [pc, #196]	; 277cc <__assert_fail@plt+0x14b28>
   27704:	cmp	r1, #0
   27708:	cmpne	r0, #0
   2770c:	ldr	r3, [r4]
   27710:	str	r3, [sp, #28]
   27714:	bne	27734 <__assert_fail@plt+0x14a90>
   27718:	mov	r0, #0
   2771c:	ldr	r2, [sp, #28]
   27720:	ldr	r3, [r4]
   27724:	cmp	r2, r3
   27728:	bne	277c8 <__assert_fail@plt+0x14b24>
   2772c:	add	sp, sp, #32
   27730:	pop	{r4, r5, r6, pc}
   27734:	mov	r5, r1
   27738:	add	r3, sp, #12
   2773c:	add	r2, sp, #8
   27740:	add	r1, sp, #4
   27744:	bl	26d8c <__assert_fail@plt+0x140e8>
   27748:	subs	r6, r0, #0
   2774c:	beq	27718 <__assert_fail@plt+0x14a74>
   27750:	mov	r0, r5
   27754:	add	r3, sp, #24
   27758:	add	r2, sp, #20
   2775c:	add	r1, sp, #16
   27760:	bl	26d8c <__assert_fail@plt+0x140e8>
   27764:	cmp	r0, #0
   27768:	beq	27718 <__assert_fail@plt+0x14a74>
   2776c:	ldr	r2, [sp, #4]
   27770:	ldr	r3, [sp, #16]
   27774:	cmp	r2, r3
   27778:	ble	27784 <__assert_fail@plt+0x14ae0>
   2777c:	mov	r0, #1
   27780:	b	2771c <__assert_fail@plt+0x14a78>
   27784:	bne	27718 <__assert_fail@plt+0x14a74>
   27788:	ldr	r2, [sp, #8]
   2778c:	ldr	r3, [sp, #20]
   27790:	cmp	r2, r3
   27794:	bgt	2777c <__assert_fail@plt+0x14ad8>
   27798:	bne	27718 <__assert_fail@plt+0x14a74>
   2779c:	ldr	r2, [sp, #12]
   277a0:	ldr	r3, [sp, #24]
   277a4:	cmp	r2, r3
   277a8:	bgt	2777c <__assert_fail@plt+0x14ad8>
   277ac:	bne	27718 <__assert_fail@plt+0x14a74>
   277b0:	mov	r1, r0
   277b4:	mov	r0, r6
   277b8:	bl	124b8 <strcmp@plt>
   277bc:	cmp	r0, #0
   277c0:	bge	2777c <__assert_fail@plt+0x14ad8>
   277c4:	b	27718 <__assert_fail@plt+0x14a74>
   277c8:	bl	1262c <__stack_chk_fail@plt>
   277cc:	strdeq	r5, [r4], -r8
   277d0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277d4:	subs	r5, r0, #0
   277d8:	mov	r7, r1
   277dc:	mov	r6, r2
   277e0:	beq	27978 <__assert_fail@plt+0x14cd4>
   277e4:	ldrb	r4, [r5]
   277e8:	cmp	r4, #32
   277ec:	cmpne	r4, #9
   277f0:	bne	27804 <__assert_fail@plt+0x14b60>
   277f4:	ldrb	r4, [r5, #1]!
   277f8:	cmp	r4, #9
   277fc:	cmpne	r4, #32
   27800:	beq	277f4 <__assert_fail@plt+0x14b50>
   27804:	cmp	r4, #45	; 0x2d
   27808:	beq	27a48 <__assert_fail@plt+0x14da4>
   2780c:	ldr	r1, [pc, #584]	; 27a5c <__assert_fail@plt+0x14db8>
   27810:	mov	r0, r5
   27814:	bl	124b8 <strcmp@plt>
   27818:	cmp	r0, #0
   2781c:	beq	27834 <__assert_fail@plt+0x14b90>
   27820:	ldr	r1, [pc, #568]	; 27a60 <__assert_fail@plt+0x14dbc>
   27824:	mov	r0, r5
   27828:	bl	124b8 <strcmp@plt>
   2782c:	cmp	r0, #0
   27830:	bne	27890 <__assert_fail@plt+0x14bec>
   27834:	ldr	r0, [pc, #552]	; 27a64 <__assert_fail@plt+0x14dc0>
   27838:	bl	21c58 <__assert_fail@plt+0xefb4>
   2783c:	ldr	r2, [r6, #4]
   27840:	cmp	r2, #0
   27844:	beq	27870 <__assert_fail@plt+0x14bcc>
   27848:	ldr	r5, [pc, #536]	; 27a68 <__assert_fail@plt+0x14dc4>
   2784c:	add	r4, r6, #8
   27850:	ldr	r1, [r4, #-8]
   27854:	mov	r6, r4
   27858:	add	r4, r4, #8
   2785c:	mov	r0, r5
   27860:	bl	21c58 <__assert_fail@plt+0xefb4>
   27864:	ldr	r2, [r4, #-4]
   27868:	cmp	r2, #0
   2786c:	bne	27850 <__assert_fail@plt+0x14bac>
   27870:	ldr	r3, [r6]
   27874:	cmp	r3, #77	; 0x4d
   27878:	bne	27940 <__assert_fail@plt+0x14c9c>
   2787c:	ldr	r0, [r7]
   27880:	str	r0, [r7]
   27884:	mov	r7, #0
   27888:	mov	r0, r7
   2788c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27890:	sub	r4, r4, #48	; 0x30
   27894:	cmp	r4, #9
   27898:	bls	27948 <__assert_fail@plt+0x14ca4>
   2789c:	mov	r0, r5
   278a0:	ldr	r1, [pc, #452]	; 27a6c <__assert_fail@plt+0x14dc8>
   278a4:	bl	1cf8c <__assert_fail@plt+0xa2e8>
   278a8:	subs	r8, r0, #0
   278ac:	beq	27a38 <__assert_fail@plt+0x14d94>
   278b0:	ldr	fp, [r8]
   278b4:	cmp	fp, #0
   278b8:	beq	27a40 <__assert_fail@plt+0x14d9c>
   278bc:	ldr	r9, [pc, #428]	; 27a70 <__assert_fail@plt+0x14dcc>
   278c0:	mov	r4, r8
   278c4:	mov	r5, #0
   278c8:	b	278d8 <__assert_fail@plt+0x14c34>
   278cc:	ldr	fp, [r4, #4]!
   278d0:	cmp	fp, #0
   278d4:	beq	2792c <__assert_fail@plt+0x14c88>
   278d8:	ldrb	r3, [fp]
   278dc:	cmp	r3, #0
   278e0:	beq	278cc <__assert_fail@plt+0x14c28>
   278e4:	ldr	r1, [r6, #4]
   278e8:	cmp	r1, #0
   278ec:	beq	279dc <__assert_fail@plt+0x14d38>
   278f0:	mov	sl, r6
   278f4:	b	27908 <__assert_fail@plt+0x14c64>
   278f8:	add	sl, sl, #8
   278fc:	ldr	r1, [sl, #4]
   27900:	cmp	r1, #0
   27904:	beq	279dc <__assert_fail@plt+0x14d38>
   27908:	mov	r0, fp
   2790c:	bl	124b8 <strcmp@plt>
   27910:	cmp	r0, #0
   27914:	bne	278f8 <__assert_fail@plt+0x14c54>
   27918:	ldr	fp, [r4, #4]!
   2791c:	ldr	r3, [sl]
   27920:	cmp	fp, #0
   27924:	orr	r5, r5, r3
   27928:	bne	278d8 <__assert_fail@plt+0x14c34>
   2792c:	mov	r0, r8
   27930:	bl	125e4 <gcry_free@plt>
   27934:	ldr	r0, [r7]
   27938:	orr	r0, r5, r0
   2793c:	b	27880 <__assert_fail@plt+0x14bdc>
   27940:	mov	r0, #0
   27944:	bl	128b4 <exit@plt>
   27948:	bl	12968 <__errno_location@plt>
   2794c:	mov	r2, #0
   27950:	mov	r1, r2
   27954:	mov	r4, r0
   27958:	mov	r0, r5
   2795c:	str	r2, [r4]
   27960:	bl	128cc <strtoul@plt>
   27964:	cmn	r0, #1
   27968:	beq	27a2c <__assert_fail@plt+0x14d88>
   2796c:	ldr	r3, [r7]
   27970:	orr	r0, r0, r3
   27974:	b	27880 <__assert_fail@plt+0x14bdc>
   27978:	cmp	r1, #0
   2797c:	beq	27888 <__assert_fail@plt+0x14be4>
   27980:	ldr	r0, [pc, #236]	; 27a74 <__assert_fail@plt+0x14dd0>
   27984:	bl	21c58 <__assert_fail@plt+0xefb4>
   27988:	ldr	r1, [r6, #4]
   2798c:	cmp	r1, #0
   27990:	addne	r6, r6, #8
   27994:	ldrne	r4, [pc, #220]	; 27a78 <__assert_fail@plt+0x14dd4>
   27998:	bne	279b0 <__assert_fail@plt+0x14d0c>
   2799c:	b	279cc <__assert_fail@plt+0x14d28>
   279a0:	add	r6, r6, #8
   279a4:	ldr	r1, [r6, #-4]
   279a8:	cmp	r1, #0
   279ac:	beq	279cc <__assert_fail@plt+0x14d28>
   279b0:	ldr	r2, [r7]
   279b4:	ldr	r3, [r6, #-8]
   279b8:	tst	r2, r3
   279bc:	beq	279a0 <__assert_fail@plt+0x14cfc>
   279c0:	mov	r0, r4
   279c4:	bl	21ed0 <__assert_fail@plt+0xf22c>
   279c8:	b	279a0 <__assert_fail@plt+0x14cfc>
   279cc:	ldr	r0, [pc, #168]	; 27a7c <__assert_fail@plt+0x14dd8>
   279d0:	bl	21ed0 <__assert_fail@plt+0xf22c>
   279d4:	mov	r7, #0
   279d8:	b	27888 <__assert_fail@plt+0x14be4>
   279dc:	mov	r1, r9
   279e0:	mov	r0, fp
   279e4:	bl	124b8 <strcmp@plt>
   279e8:	cmp	r0, #0
   279ec:	streq	r0, [r7]
   279f0:	moveq	r5, r0
   279f4:	beq	278cc <__assert_fail@plt+0x14c28>
   279f8:	mov	r0, fp
   279fc:	ldr	r1, [pc, #124]	; 27a80 <__assert_fail@plt+0x14ddc>
   27a00:	bl	124b8 <strcmp@plt>
   27a04:	cmp	r0, #0
   27a08:	mvneq	r5, #0
   27a0c:	beq	278cc <__assert_fail@plt+0x14c28>
   27a10:	mov	r2, #5
   27a14:	ldr	r1, [pc, #104]	; 27a84 <__assert_fail@plt+0x14de0>
   27a18:	mov	r0, #0
   27a1c:	bl	12620 <dcgettext@plt>
   27a20:	ldr	r1, [r4]
   27a24:	bl	21c58 <__assert_fail@plt+0xefb4>
   27a28:	b	278cc <__assert_fail@plt+0x14c28>
   27a2c:	ldr	r3, [r4]
   27a30:	cmp	r3, #34	; 0x22
   27a34:	bne	27880 <__assert_fail@plt+0x14bdc>
   27a38:	mvn	r7, #0
   27a3c:	b	27888 <__assert_fail@plt+0x14be4>
   27a40:	mov	r5, fp
   27a44:	b	2792c <__assert_fail@plt+0x14c88>
   27a48:	bl	12968 <__errno_location@plt>
   27a4c:	mov	r3, #22
   27a50:	mvn	r7, #0
   27a54:	str	r3, [r0]
   27a58:	b	27888 <__assert_fail@plt+0x14be4>
   27a5c:	andeq	r3, r3, ip, lsl #13
   27a60:			; <UNDEFINED> instruction: 0x00032db0
   27a64:	andeq	r4, r3, r0, lsr #1
   27a68:	strheq	r4, [r3], -r8
   27a6c:	andeq	r4, r3, r4, asr #1
   27a70:	strdeq	r4, [r3], -r0
   27a74:	andeq	r4, r3, r8, lsl #1
   27a78:	strdeq	r1, [r3], -r8
   27a7c:	andeq	r0, r3, r0, lsl #26
   27a80:	andeq	r4, r3, r8, asr #1
   27a84:	andeq	r4, r3, ip, asr #1
   27a88:	push	{r0, r1, r2, r3}
   27a8c:	push	{r4, lr}
   27a90:	sub	sp, sp, #16
   27a94:	ldr	r4, [pc, #100]	; 27b00 <__assert_fail@plt+0x14e5c>
   27a98:	add	r3, sp, #28
   27a9c:	mov	r2, r3
   27aa0:	ldr	ip, [r4]
   27aa4:	ldr	r1, [sp, #24]
   27aa8:	add	r0, sp, #8
   27aac:	str	ip, [sp, #12]
   27ab0:	str	r3, [sp, #4]
   27ab4:	bl	129d4 <gpgrt_vasprintf@plt>
   27ab8:	cmp	r0, #0
   27abc:	blt	27ae4 <__assert_fail@plt+0x14e40>
   27ac0:	ldr	r2, [sp, #12]
   27ac4:	ldr	r3, [r4]
   27ac8:	ldr	r0, [sp, #8]
   27acc:	cmp	r2, r3
   27ad0:	bne	27afc <__assert_fail@plt+0x14e58>
   27ad4:	add	sp, sp, #16
   27ad8:	pop	{r4, lr}
   27adc:	add	sp, sp, #16
   27ae0:	bx	lr
   27ae4:	bl	12968 <__errno_location@plt>
   27ae8:	ldr	r0, [r0]
   27aec:	bl	12818 <strerror@plt>
   27af0:	mov	r1, r0
   27af4:	ldr	r0, [pc, #8]	; 27b04 <__assert_fail@plt+0x14e60>
   27af8:	bl	21d40 <__assert_fail@plt+0xf09c>
   27afc:	bl	1262c <__stack_chk_fail@plt>
   27b00:	strdeq	r5, [r4], -r8
   27b04:	strdeq	r4, [r3], -r8
   27b08:	push	{r0, r1, r2, r3}
   27b0c:	push	{r4, lr}
   27b10:	sub	sp, sp, #16
   27b14:	ldr	r4, [pc, #76]	; 27b68 <__assert_fail@plt+0x14ec4>
   27b18:	add	r3, sp, #28
   27b1c:	mov	r2, r3
   27b20:	ldr	ip, [r4]
   27b24:	ldr	r1, [sp, #24]
   27b28:	add	r0, sp, #8
   27b2c:	str	r3, [sp, #4]
   27b30:	str	ip, [sp, #12]
   27b34:	bl	129d4 <gpgrt_vasprintf@plt>
   27b38:	ldr	r2, [sp, #12]
   27b3c:	ldr	r3, [r4]
   27b40:	cmp	r0, #0
   27b44:	movlt	r0, #0
   27b48:	ldrge	r0, [sp, #8]
   27b4c:	cmp	r2, r3
   27b50:	bne	27b64 <__assert_fail@plt+0x14ec0>
   27b54:	add	sp, sp, #16
   27b58:	pop	{r4, lr}
   27b5c:	add	sp, sp, #16
   27b60:	bx	lr
   27b64:	bl	1262c <__stack_chk_fail@plt>
   27b68:	strdeq	r5, [r4], -r8
   27b6c:	cmp	r1, #0
   27b70:	moveq	r1, #16
   27b74:	push	{r4, lr}
   27b78:	mov	r4, r0
   27b7c:	streq	r1, [r0, #4]
   27b80:	beq	27b98 <__assert_fail@plt+0x14ef4>
   27b84:	cmp	r1, #65536	; 0x10000
   27b88:	movcs	r3, #65536	; 0x10000
   27b8c:	movcs	r1, r3
   27b90:	strcc	r1, [r0, #4]
   27b94:	strcs	r3, [r0, #4]
   27b98:	mov	r3, #0
   27b9c:	mov	r0, r1
   27ba0:	str	r3, [r4]
   27ba4:	str	r3, [r4, #8]
   27ba8:	mov	r1, #4
   27bac:	bl	129bc <gcry_calloc@plt>
   27bb0:	cmp	r0, #0
   27bb4:	str	r0, [r4, #12]
   27bb8:	popne	{r4, pc}
   27bbc:	bl	12968 <__errno_location@plt>
   27bc0:	ldr	r3, [r0]
   27bc4:	str	r3, [r4, #8]
   27bc8:	pop	{r4, pc}
   27bcc:	ldr	r3, [r0, #8]
   27bd0:	cmp	r3, #0
   27bd4:	bxne	lr
   27bd8:	push	{r4, r5, r6, r7, r8, lr}
   27bdc:	mov	r6, r1
   27be0:	ldm	r0, {r3, r5}
   27be4:	mov	r4, r0
   27be8:	add	r2, r3, #1
   27bec:	cmp	r2, r5
   27bf0:	bcc	27c64 <__assert_fail@plt+0x14fc0>
   27bf4:	cmp	r5, #7
   27bf8:	bls	27c8c <__assert_fail@plt+0x14fe8>
   27bfc:	cmp	r5, #4096	; 0x1000
   27c00:	lslcc	r5, r5, #1
   27c04:	bcs	27c74 <__assert_fail@plt+0x14fd0>
   27c08:	mov	r1, #4
   27c0c:	mov	r0, r5
   27c10:	bl	129bc <gcry_calloc@plt>
   27c14:	subs	r7, r0, #0
   27c18:	beq	27c94 <__assert_fail@plt+0x14ff0>
   27c1c:	ldr	lr, [r4, #4]
   27c20:	ldr	r0, [r4, #12]
   27c24:	cmp	lr, #0
   27c28:	addne	lr, r0, lr, lsl #2
   27c2c:	subne	lr, lr, #4
   27c30:	subne	r3, r0, #4
   27c34:	subne	r2, r7, #4
   27c38:	beq	27c4c <__assert_fail@plt+0x14fa8>
   27c3c:	ldr	ip, [r3, #4]!
   27c40:	cmp	lr, r3
   27c44:	str	ip, [r2, #4]!
   27c48:	bne	27c3c <__assert_fail@plt+0x14f98>
   27c4c:	bl	125e4 <gcry_free@plt>
   27c50:	ldr	r3, [r4]
   27c54:	str	r7, [r4, #12]
   27c58:	str	r5, [r4, #4]
   27c5c:	add	r2, r3, #1
   27c60:	b	27c68 <__assert_fail@plt+0x14fc4>
   27c64:	ldr	r7, [r0, #12]
   27c68:	str	r2, [r4]
   27c6c:	str	r6, [r7, r3, lsl #2]
   27c70:	pop	{r4, r5, r6, r7, r8, pc}
   27c74:	cmp	r5, #65536	; 0x10000
   27c78:	addcc	r5, r5, #2048	; 0x800
   27c7c:	bcc	27c08 <__assert_fail@plt+0x14f64>
   27c80:	mov	r3, #12
   27c84:	str	r3, [r0, #8]
   27c88:	pop	{r4, r5, r6, r7, r8, pc}
   27c8c:	mov	r5, #16
   27c90:	b	27c08 <__assert_fail@plt+0x14f64>
   27c94:	bl	12968 <__errno_location@plt>
   27c98:	ldr	r3, [r0]
   27c9c:	cmp	r3, #0
   27ca0:	moveq	r3, #12
   27ca4:	str	r3, [r4, #8]
   27ca8:	pop	{r4, r5, r6, r7, r8, pc}
   27cac:	ldr	r2, [r0, #8]
   27cb0:	push	{r4, lr}
   27cb4:	cmp	r2, #0
   27cb8:	mov	r4, r0
   27cbc:	ldr	r0, [r0, #12]
   27cc0:	bne	27ce4 <__assert_fail@plt+0x15040>
   27cc4:	cmp	r1, #0
   27cc8:	ldrne	r2, [r4]
   27ccc:	strne	r2, [r1]
   27cd0:	mov	r1, #0
   27cd4:	mov	r2, #12
   27cd8:	str	r1, [r4, #12]
   27cdc:	str	r2, [r4, #8]
   27ce0:	pop	{r4, pc}
   27ce4:	cmp	r0, #0
   27ce8:	beq	27cfc <__assert_fail@plt+0x15058>
   27cec:	bl	125e4 <gcry_free@plt>
   27cf0:	ldr	r2, [r4, #8]
   27cf4:	mov	r3, #0
   27cf8:	str	r3, [r4, #12]
   27cfc:	mov	r0, r2
   27d00:	bl	12b0c <gpg_err_set_errno@plt>
   27d04:	mov	r0, #0
   27d08:	pop	{r4, pc}
   27d0c:	push	{r4, r5, r6, lr}
   27d10:	sub	sp, sp, #16
   27d14:	ldr	r5, [pc, #244]	; 27e10 <__assert_fail@plt+0x1516c>
   27d18:	ldr	r3, [r0]
   27d1c:	mov	r4, r0
   27d20:	ldr	r2, [r5]
   27d24:	cmp	r3, #3
   27d28:	str	r2, [sp, #12]
   27d2c:	beq	27db8 <__assert_fail@plt+0x15114>
   27d30:	cmp	r3, #2
   27d34:	bne	27e08 <__assert_fail@plt+0x15164>
   27d38:	ldr	r6, [r0, #60]	; 0x3c
   27d3c:	cmp	r6, #0
   27d40:	beq	27e00 <__assert_fail@plt+0x1515c>
   27d44:	ldr	r2, [r0, #44]	; 0x2c
   27d48:	add	r3, sp, #8
   27d4c:	str	r3, [sp]
   27d50:	str	r2, [sp, #8]
   27d54:	ldr	r3, [r0, #48]	; 0x30
   27d58:	ldr	r2, [r0, #76]	; 0x4c
   27d5c:	mov	r1, #4
   27d60:	ldr	r0, [r0, #64]	; 0x40
   27d64:	blx	r6
   27d68:	subs	r3, r0, #0
   27d6c:	strne	r3, [r4, #56]	; 0x38
   27d70:	beq	27d98 <__assert_fail@plt+0x150f4>
   27d74:	mov	r2, #0
   27d78:	str	r2, [r4, #44]	; 0x2c
   27d7c:	ldr	r1, [sp, #12]
   27d80:	ldr	r2, [r5]
   27d84:	mov	r0, r3
   27d88:	cmp	r1, r2
   27d8c:	bne	27dfc <__assert_fail@plt+0x15158>
   27d90:	add	sp, sp, #16
   27d94:	pop	{r4, r5, r6, pc}
   27d98:	ldr	r1, [r4, #44]	; 0x2c
   27d9c:	ldr	r2, [sp, #8]
   27da0:	cmp	r1, r2
   27da4:	beq	27d74 <__assert_fail@plt+0x150d0>
   27da8:	ldr	r0, [pc, #100]	; 27e14 <__assert_fail@plt+0x15170>
   27dac:	bl	21c58 <__assert_fail@plt+0xefb4>
   27db0:	mov	r3, #63	; 0x3f
   27db4:	b	27d74 <__assert_fail@plt+0x150d0>
   27db8:	ldr	r3, [pc, #88]	; 27e18 <__assert_fail@plt+0x15174>
   27dbc:	ldr	r1, [r0, #36]	; 0x24
   27dc0:	ldr	r3, [r3]
   27dc4:	add	r6, r1, #8192	; 0x2000
   27dc8:	cmp	r3, #0
   27dcc:	bne	27dec <__assert_fail@plt+0x15148>
   27dd0:	mov	r1, r6
   27dd4:	ldr	r0, [r4, #48]	; 0x30
   27dd8:	bl	127e8 <gcry_xrealloc@plt>
   27ddc:	str	r6, [r4, #36]	; 0x24
   27de0:	mov	r3, #0
   27de4:	str	r0, [r4, #48]	; 0x30
   27de8:	b	27d7c <__assert_fail@plt+0x150d8>
   27dec:	mov	r2, r6
   27df0:	ldr	r0, [pc, #36]	; 27e1c <__assert_fail@plt+0x15178>
   27df4:	bl	21e08 <__assert_fail@plt+0xf164>
   27df8:	b	27dd0 <__assert_fail@plt+0x1512c>
   27dfc:	bl	1262c <__stack_chk_fail@plt>
   27e00:	ldr	r0, [pc, #24]	; 27e20 <__assert_fail@plt+0x1517c>
   27e04:	bl	21dc4 <__assert_fail@plt+0xf120>
   27e08:	ldr	r0, [pc, #20]	; 27e24 <__assert_fail@plt+0x15180>
   27e0c:	bl	21dc4 <__assert_fail@plt+0xf120>
   27e10:	strdeq	r5, [r4], -r8
   27e14:	muleq	r3, r4, r2
   27e18:	muleq	r4, r4, r4
   27e1c:	andeq	r4, r3, r4, lsr r2
   27e20:	andeq	r4, r3, r8, ror r2
   27e24:	andeq	r4, r3, ip, asr r2
   27e28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27e2c:	cmp	r1, #3
   27e30:	ldr	r8, [sp, #32]
   27e34:	mov	r6, r0
   27e38:	mov	r9, r3
   27e3c:	ldr	r5, [r0]
   27e40:	ldr	r4, [r8]
   27e44:	beq	27efc <__assert_fail@plt+0x15258>
   27e48:	cmp	r1, #4
   27e4c:	beq	27e74 <__assert_fail@plt+0x151d0>
   27e50:	cmp	r1, #1
   27e54:	beq	27fc8 <__assert_fail@plt+0x15324>
   27e58:	cmp	r1, #5
   27e5c:	beq	28014 <__assert_fail@plt+0x15370>
   27e60:	cmp	r1, #2
   27e64:	movne	r7, #0
   27e68:	beq	27f68 <__assert_fail@plt+0x152c4>
   27e6c:	mov	r0, r7
   27e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27e74:	cmp	r4, #0
   27e78:	moveq	r7, r4
   27e7c:	beq	27ef0 <__assert_fail@plt+0x1524c>
   27e80:	mov	sl, r3
   27e84:	mov	r2, r4
   27e88:	mov	r1, sl
   27e8c:	mov	r0, r5
   27e90:	bl	12a10 <write@plt>
   27e94:	cmn	r0, #1
   27e98:	beq	27eb8 <__assert_fail@plt+0x15214>
   27e9c:	cmp	r0, #0
   27ea0:	ble	27e84 <__assert_fail@plt+0x151e0>
   27ea4:	subs	r4, r4, r0
   27ea8:	add	sl, sl, r0
   27eac:	bne	27e84 <__assert_fail@plt+0x151e0>
   27eb0:	mov	r7, r4
   27eb4:	b	27eec <__assert_fail@plt+0x15248>
   27eb8:	bl	12968 <__errno_location@plt>
   27ebc:	ldr	r3, [r0]
   27ec0:	cmp	r3, #4
   27ec4:	beq	27e84 <__assert_fail@plt+0x151e0>
   27ec8:	bl	12914 <gpg_err_code_from_syserror@plt>
   27ecc:	uxth	r7, r0
   27ed0:	bl	12968 <__errno_location@plt>
   27ed4:	ldr	r0, [r0]
   27ed8:	bl	12818 <strerror@plt>
   27edc:	add	r1, r6, #20
   27ee0:	mov	r2, r0
   27ee4:	ldr	r0, [pc, #552]	; 28114 <__assert_fail@plt+0x15470>
   27ee8:	bl	21cbc <__assert_fail@plt+0xf018>
   27eec:	sub	r4, sl, r9
   27ef0:	str	r4, [r8]
   27ef4:	mov	r0, r7
   27ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27efc:	cmp	r4, #0
   27f00:	beq	28100 <__assert_fail@plt+0x1545c>
   27f04:	ldr	r7, [r0, #12]
   27f08:	cmp	r7, #0
   27f0c:	movne	r3, #0
   27f10:	strne	r3, [r8]
   27f14:	mvnne	r7, #0
   27f18:	beq	27f34 <__assert_fail@plt+0x15290>
   27f1c:	b	27e6c <__assert_fail@plt+0x151c8>
   27f20:	bl	12968 <__errno_location@plt>
   27f24:	ldr	r3, [r0]
   27f28:	mov	sl, r0
   27f2c:	cmp	r3, #4
   27f30:	bne	27fe0 <__assert_fail@plt+0x1533c>
   27f34:	mov	r2, r4
   27f38:	mov	r1, r9
   27f3c:	mov	r0, r5
   27f40:	bl	12518 <read@plt>
   27f44:	cmn	r0, #1
   27f48:	beq	27f20 <__assert_fail@plt+0x1527c>
   27f4c:	cmp	r0, #0
   27f50:	mvneq	r7, #0
   27f54:	moveq	r3, #1
   27f58:	streq	r3, [r6, #12]
   27f5c:	str	r0, [r8]
   27f60:	mov	r0, r7
   27f64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27f68:	cmp	r5, #1
   27f6c:	bls	27fb8 <__assert_fail@plt+0x15314>
   27f70:	ldr	r7, [pc, #416]	; 28118 <__assert_fail@plt+0x15474>
   27f74:	ldr	r3, [r7]
   27f78:	cmp	r3, #0
   27f7c:	bne	2809c <__assert_fail@plt+0x153f8>
   27f80:	ldr	r3, [r6, #4]
   27f84:	cmp	r3, #0
   27f88:	bne	27fb8 <__assert_fail@plt+0x15314>
   27f8c:	ldr	r3, [r6, #8]
   27f90:	cmp	r3, #0
   27f94:	beq	2802c <__assert_fail@plt+0x15388>
   27f98:	mov	r0, r5
   27f9c:	bl	12c5c <close@plt>
   27fa0:	ldr	r3, [r7]
   27fa4:	cmp	r3, #0
   27fa8:	beq	27fb8 <__assert_fail@plt+0x15314>
   27fac:	mov	r1, r5
   27fb0:	ldr	r0, [pc, #356]	; 2811c <__assert_fail@plt+0x15478>
   27fb4:	bl	21e08 <__assert_fail@plt+0xf164>
   27fb8:	mov	r0, r6
   27fbc:	bl	125e4 <gcry_free@plt>
   27fc0:	mov	r7, #0
   27fc4:	b	27e6c <__assert_fail@plt+0x151c8>
   27fc8:	mov	r7, #0
   27fcc:	str	r7, [r0, #12]
   27fd0:	str	r7, [r0, #4]
   27fd4:	str	r7, [r0, #8]
   27fd8:	mov	r0, r7
   27fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27fe0:	cmp	r3, #32
   27fe4:	moveq	r0, #0
   27fe8:	beq	27f5c <__assert_fail@plt+0x152b8>
   27fec:	bl	12914 <gpg_err_code_from_syserror@plt>
   27ff0:	uxth	r7, r0
   27ff4:	ldr	r0, [sl]
   27ff8:	bl	12818 <strerror@plt>
   27ffc:	add	r1, r6, #20
   28000:	mov	r2, r0
   28004:	ldr	r0, [pc, #276]	; 28120 <__assert_fail@plt+0x1547c>
   28008:	bl	21cbc <__assert_fail@plt+0xf018>
   2800c:	mov	r0, #0
   28010:	b	27f5c <__assert_fail@plt+0x152b8>
   28014:	mov	r2, r4
   28018:	mov	r0, r3
   2801c:	ldr	r1, [pc, #256]	; 28124 <__assert_fail@plt+0x15480>
   28020:	bl	1c4c8 <__assert_fail@plt+0x9824>
   28024:	mov	r7, #0
   28028:	b	27e6c <__assert_fail@plt+0x151c8>
   2802c:	ldrb	r3, [r6, #20]
   28030:	cmp	r3, #0
   28034:	beq	27f98 <__assert_fail@plt+0x152f4>
   28038:	ldr	r9, [pc, #232]	; 28128 <__assert_fail@plt+0x15484>
   2803c:	add	r8, r6, #20
   28040:	ldr	r4, [r9]
   28044:	cmp	r4, #0
   28048:	bne	2805c <__assert_fail@plt+0x153b8>
   2804c:	b	280b0 <__assert_fail@plt+0x1540c>
   28050:	ldr	r4, [r4]
   28054:	cmp	r4, #0
   28058:	beq	280b0 <__assert_fail@plt+0x1540c>
   2805c:	ldr	r3, [r4, #4]
   28060:	cmn	r3, #1
   28064:	bne	28050 <__assert_fail@plt+0x153ac>
   28068:	mov	r1, r8
   2806c:	add	r0, r4, #8
   28070:	bl	124b8 <strcmp@plt>
   28074:	cmp	r0, #0
   28078:	bne	28050 <__assert_fail@plt+0x153ac>
   2807c:	ldr	r3, [r7]
   28080:	str	r5, [r4, #4]
   28084:	cmp	r3, #0
   28088:	beq	27fb8 <__assert_fail@plt+0x15314>
   2808c:	mov	r1, r8
   28090:	ldr	r0, [pc, #148]	; 2812c <__assert_fail@plt+0x15488>
   28094:	bl	21e08 <__assert_fail@plt+0xf164>
   28098:	b	27fb8 <__assert_fail@plt+0x15314>
   2809c:	add	r1, r0, #20
   280a0:	mov	r2, r5
   280a4:	ldr	r0, [pc, #132]	; 28130 <__assert_fail@plt+0x1548c>
   280a8:	bl	21e08 <__assert_fail@plt+0xf164>
   280ac:	b	27f80 <__assert_fail@plt+0x152dc>
   280b0:	ldr	r3, [r7]
   280b4:	cmp	r3, #0
   280b8:	bne	280f0 <__assert_fail@plt+0x1544c>
   280bc:	mov	r0, r8
   280c0:	bl	128d8 <strlen@plt>
   280c4:	add	r1, r0, #12
   280c8:	mov	r0, #1
   280cc:	bl	12bcc <gcry_xcalloc@plt>
   280d0:	mov	r1, r8
   280d4:	mov	r4, r0
   280d8:	add	r0, r0, #8
   280dc:	bl	12764 <strcpy@plt>
   280e0:	ldr	r3, [r9]
   280e4:	str	r4, [r9]
   280e8:	stm	r4, {r3, r5}
   280ec:	b	27fb8 <__assert_fail@plt+0x15314>
   280f0:	mov	r1, r8
   280f4:	ldr	r0, [pc, #56]	; 28134 <__assert_fail@plt+0x15490>
   280f8:	bl	21e08 <__assert_fail@plt+0xf164>
   280fc:	b	280bc <__assert_fail@plt+0x15418>
   28100:	ldr	r3, [pc, #48]	; 28138 <__assert_fail@plt+0x15494>
   28104:	ldr	r2, [pc, #48]	; 2813c <__assert_fail@plt+0x15498>
   28108:	ldr	r1, [pc, #48]	; 28140 <__assert_fail@plt+0x1549c>
   2810c:	ldr	r0, [pc, #48]	; 28144 <__assert_fail@plt+0x154a0>
   28110:	bl	12ca4 <__assert_fail@plt>
   28114:	andeq	r4, r3, r8, ror r3
   28118:	muleq	r4, r4, r4
   2811c:	andeq	r4, r3, ip, lsl #6
   28120:	ldrdeq	r4, [r3], -r0
   28124:	andeq	r4, r3, r4, ror #5
   28128:	ldrdeq	r6, [r4], -r0
   2812c:	andeq	r4, r3, r8, lsr #6
   28130:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   28134:	andeq	r4, r3, r0, asr r3
   28138:	andeq	r4, r3, r8, lsl r1
   2813c:	andeq	r0, r0, r6, asr #3
   28140:			; <UNDEFINED> instruction: 0x000342b8
   28144:	andeq	r4, r3, ip, lsr fp
   28148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2814c:	sub	sp, sp, #20
   28150:	ldr	r6, [pc, #512]	; 28358 <__assert_fail@plt+0x156b4>
   28154:	ldr	r8, [sp, #56]	; 0x38
   28158:	mov	fp, #0
   2815c:	ldr	r2, [r6]
   28160:	cmp	r1, #3
   28164:	str	r2, [sp, #12]
   28168:	mov	r7, r0
   2816c:	mov	sl, r3
   28170:	ldr	r9, [r0]
   28174:	ldr	r2, [r8]
   28178:	str	fp, [sp, #4]
   2817c:	beq	28244 <__assert_fail@plt+0x155a0>
   28180:	cmp	r1, #4
   28184:	beq	281c4 <__assert_fail@plt+0x15520>
   28188:	cmp	r1, #1
   2818c:	streq	fp, [r0, #12]
   28190:	streq	fp, [r0, #8]
   28194:	beq	281a8 <__assert_fail@plt+0x15504>
   28198:	cmp	r1, #5
   2819c:	beq	282c4 <__assert_fail@plt+0x15620>
   281a0:	cmp	r1, #2
   281a4:	beq	282d4 <__assert_fail@plt+0x15630>
   281a8:	ldr	r2, [sp, #12]
   281ac:	ldr	r3, [r6]
   281b0:	mov	r0, fp
   281b4:	cmp	r2, r3
   281b8:	bne	28340 <__assert_fail@plt+0x1569c>
   281bc:	add	sp, sp, #20
   281c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   281c4:	cmp	r2, #0
   281c8:	moveq	fp, r2
   281cc:	beq	2823c <__assert_fail@plt+0x15598>
   281d0:	mov	r4, fp
   281d4:	mov	r5, r3
   281d8:	str	r2, [sp, #4]
   281dc:	b	281f8 <__assert_fail@plt+0x15554>
   281e0:	ldrd	r2, [sp, #4]
   281e4:	sub	r2, r2, r3
   281e8:	cmp	r2, #0
   281ec:	add	r5, r5, r3
   281f0:	str	r2, [sp, #4]
   281f4:	beq	28238 <__assert_fail@plt+0x15594>
   281f8:	add	r3, sp, #8
   281fc:	mov	r1, r5
   28200:	mov	r0, r9
   28204:	str	r4, [sp, #8]
   28208:	bl	12470 <gpgrt_write@plt>
   2820c:	subs	fp, r0, #0
   28210:	beq	281e0 <__assert_fail@plt+0x1553c>
   28214:	bl	12914 <gpg_err_code_from_syserror@plt>
   28218:	uxth	fp, r0
   2821c:	bl	12968 <__errno_location@plt>
   28220:	ldr	r0, [r0]
   28224:	bl	12818 <strerror@plt>
   28228:	add	r1, r7, #20
   2822c:	mov	r2, r0
   28230:	ldr	r0, [pc, #292]	; 2835c <__assert_fail@plt+0x156b8>
   28234:	bl	21cbc <__assert_fail@plt+0xf018>
   28238:	sub	r2, r5, sl
   2823c:	str	r2, [r8]
   28240:	b	281a8 <__assert_fail@plt+0x15504>
   28244:	cmp	r2, fp
   28248:	beq	28344 <__assert_fail@plt+0x156a0>
   2824c:	ldr	r3, [r0, #12]
   28250:	cmp	r3, #0
   28254:	strne	fp, [r8]
   28258:	mvnne	fp, #0
   2825c:	bne	281a8 <__assert_fail@plt+0x15504>
   28260:	mov	r1, sl
   28264:	mov	r0, r9
   28268:	add	r3, sp, #4
   2826c:	bl	125cc <gpgrt_read@plt>
   28270:	cmn	r0, #1
   28274:	mov	fp, r0
   28278:	beq	28298 <__assert_fail@plt+0x155f4>
   2827c:	ldr	r3, [sp, #4]
   28280:	cmp	r3, #0
   28284:	mvneq	fp, #0
   28288:	moveq	r2, #1
   2828c:	streq	r2, [r7, #12]
   28290:	str	r3, [r8]
   28294:	b	281a8 <__assert_fail@plt+0x15504>
   28298:	bl	12914 <gpg_err_code_from_syserror@plt>
   2829c:	uxth	fp, r0
   282a0:	bl	12968 <__errno_location@plt>
   282a4:	ldr	r0, [r0]
   282a8:	bl	12818 <strerror@plt>
   282ac:	add	r1, r7, #20
   282b0:	mov	r2, r0
   282b4:	ldr	r0, [pc, #164]	; 28360 <__assert_fail@plt+0x156bc>
   282b8:	bl	21cbc <__assert_fail@plt+0xf018>
   282bc:	ldr	r3, [sp, #4]
   282c0:	b	28290 <__assert_fail@plt+0x155ec>
   282c4:	mov	r0, r3
   282c8:	ldr	r1, [pc, #148]	; 28364 <__assert_fail@plt+0x156c0>
   282cc:	bl	1c4c8 <__assert_fail@plt+0x9824>
   282d0:	b	281a8 <__assert_fail@plt+0x15504>
   282d4:	mov	r0, fp
   282d8:	bl	12890 <_gpgrt_get_std_stream@plt>
   282dc:	cmp	r9, r0
   282e0:	beq	28310 <__assert_fail@plt+0x1566c>
   282e4:	mov	r0, #1
   282e8:	bl	12890 <_gpgrt_get_std_stream@plt>
   282ec:	cmp	r9, r0
   282f0:	beq	28310 <__assert_fail@plt+0x1566c>
   282f4:	ldr	r3, [pc, #108]	; 28368 <__assert_fail@plt+0x156c4>
   282f8:	ldr	r3, [r3]
   282fc:	cmp	r3, #0
   28300:	bne	2832c <__assert_fail@plt+0x15688>
   28304:	ldr	r3, [r7, #4]
   28308:	cmp	r3, #0
   2830c:	beq	28320 <__assert_fail@plt+0x1567c>
   28310:	mov	r0, r7
   28314:	bl	125e4 <gcry_free@plt>
   28318:	mov	fp, #0
   2831c:	b	281a8 <__assert_fail@plt+0x15504>
   28320:	mov	r0, r9
   28324:	bl	12788 <gpgrt_fclose@plt>
   28328:	b	28310 <__assert_fail@plt+0x1566c>
   2832c:	mov	r2, r9
   28330:	add	r1, r7, #20
   28334:	ldr	r0, [pc, #48]	; 2836c <__assert_fail@plt+0x156c8>
   28338:	bl	21e08 <__assert_fail@plt+0xf164>
   2833c:	b	28304 <__assert_fail@plt+0x15660>
   28340:	bl	1262c <__stack_chk_fail@plt>
   28344:	ldr	r3, [pc, #36]	; 28370 <__assert_fail@plt+0x156cc>
   28348:	ldr	r2, [pc, #36]	; 28374 <__assert_fail@plt+0x156d0>
   2834c:	ldr	r1, [pc, #36]	; 28378 <__assert_fail@plt+0x156d4>
   28350:	ldr	r0, [pc, #36]	; 2837c <__assert_fail@plt+0x156d8>
   28354:	bl	12ca4 <__assert_fail@plt>
   28358:	strdeq	r5, [r4], -r8
   2835c:	andeq	r4, r3, r8, ror r3
   28360:	ldrdeq	r4, [r3], -r0
   28364:	muleq	r3, r0, r3
   28368:	muleq	r4, r4, r4
   2836c:	andeq	r4, r3, r0, lsr #7
   28370:	andeq	r4, r3, r4, lsr #2
   28374:	andeq	r0, r0, r2, ror #4
   28378:			; <UNDEFINED> instruction: 0x000342b8
   2837c:	andeq	r4, r3, ip, lsr fp
   28380:	push	{r4, r5, r6, lr}
   28384:	sub	sp, sp, #16
   28388:	ldr	r5, [pc, #108]	; 283fc <__assert_fail@plt+0x15758>
   2838c:	mov	r3, #32
   28390:	cmp	r0, #0
   28394:	ldr	r2, [r5]
   28398:	mov	r4, r1
   2839c:	str	r2, [sp, #12]
   283a0:	str	r3, [sp, #8]
   283a4:	beq	283ec <__assert_fail@plt+0x15748>
   283a8:	ldr	r6, [r0, #60]	; 0x3c
   283ac:	cmp	r6, #0
   283b0:	beq	283ec <__assert_fail@plt+0x15748>
   283b4:	add	r3, sp, #8
   283b8:	str	r3, [sp]
   283bc:	mov	r2, #0
   283c0:	mov	r3, r1
   283c4:	ldr	r0, [r0, #64]	; 0x40
   283c8:	mov	r1, #5
   283cc:	blx	r6
   283d0:	ldr	r2, [sp, #12]
   283d4:	ldr	r3, [r5]
   283d8:	mov	r0, r4
   283dc:	cmp	r2, r3
   283e0:	bne	283f8 <__assert_fail@plt+0x15754>
   283e4:	add	sp, sp, #16
   283e8:	pop	{r4, r5, r6, pc}
   283ec:	mov	r3, #63	; 0x3f
   283f0:	strh	r3, [r4]
   283f4:	b	283d0 <__assert_fail@plt+0x1572c>
   283f8:	bl	1262c <__stack_chk_fail@plt>
   283fc:	strdeq	r5, [r4], -r8
   28400:	push	{r4, r5, r6, r7, r8, lr}
   28404:	sub	sp, sp, #56	; 0x38
   28408:	ldr	r8, [pc, #120]	; 28488 <__assert_fail@plt+0x157e4>
   2840c:	subs	r4, r0, #0
   28410:	ldr	r3, [r8]
   28414:	str	r3, [sp, #52]	; 0x34
   28418:	beq	2846c <__assert_fail@plt+0x157c8>
   2841c:	ldr	r7, [pc, #104]	; 2848c <__assert_fail@plt+0x157e8>
   28420:	add	r1, sp, #20
   28424:	mov	r0, r4
   28428:	ldr	r5, [r4, #80]	; 0x50
   2842c:	ldr	r6, [r4, #84]	; 0x54
   28430:	bl	28380 <__assert_fail@plt+0x156dc>
   28434:	ldr	r3, [r4, #44]	; 0x2c
   28438:	mov	r2, r6
   2843c:	str	r3, [sp, #8]
   28440:	ldr	r3, [r4, #40]	; 0x28
   28444:	mov	r1, r5
   28448:	str	r3, [sp, #4]
   2844c:	ldr	r3, [r4, #52]	; 0x34
   28450:	str	r3, [sp]
   28454:	mov	r3, r0
   28458:	mov	r0, r7
   2845c:	bl	21e08 <__assert_fail@plt+0xf164>
   28460:	ldr	r4, [r4, #76]	; 0x4c
   28464:	cmp	r4, #0
   28468:	bne	28420 <__assert_fail@plt+0x1577c>
   2846c:	ldr	r2, [sp, #52]	; 0x34
   28470:	ldr	r3, [r8]
   28474:	cmp	r2, r3
   28478:	bne	28484 <__assert_fail@plt+0x157e0>
   2847c:	add	sp, sp, #56	; 0x38
   28480:	pop	{r4, r5, r6, r7, r8, pc}
   28484:	bl	1262c <__stack_chk_fail@plt>
   28488:	strdeq	r5, [r4], -r8
   2848c:			; <UNDEFINED> instruction: 0x000343b4
   28490:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28494:	mov	r4, r0
   28498:	ldr	r7, [pc, #1204]	; 28954 <__assert_fail@plt+0x15cb0>
   2849c:	ldr	r6, [pc, #1204]	; 28958 <__assert_fail@plt+0x15cb4>
   284a0:	sub	sp, sp, #24
   284a4:	ldr	r0, [r7]
   284a8:	ldr	r3, [r6]
   284ac:	cmp	r0, #0
   284b0:	mov	r9, r1
   284b4:	mov	r8, r2
   284b8:	str	r3, [sp, #20]
   284bc:	bne	28600 <__assert_fail@plt+0x1595c>
   284c0:	ldr	r5, [r4]
   284c4:	cmp	r5, #1
   284c8:	beq	287c8 <__assert_fail@plt+0x15b24>
   284cc:	cmp	r5, #0
   284d0:	bne	288f0 <__assert_fail@plt+0x15c4c>
   284d4:	ldr	r1, [r4, #40]	; 0x28
   284d8:	ldr	r2, [r4, #44]	; 0x2c
   284dc:	cmp	r1, r2
   284e0:	bhi	28908 <__assert_fail@plt+0x15c64>
   284e4:	ldr	r0, [r4, #48]	; 0x30
   284e8:	sub	r2, r2, r1
   284ec:	str	r2, [r4, #44]	; 0x2c
   284f0:	add	r1, r0, r1
   284f4:	bl	12554 <memmove@plt>
   284f8:	ldr	r2, [r4, #44]	; 0x2c
   284fc:	str	r5, [r4, #40]	; 0x28
   28500:	cmp	r2, r8
   28504:	mov	r1, r2
   28508:	bcs	28588 <__assert_fail@plt+0x158e4>
   2850c:	ldr	r3, [r4, #52]	; 0x34
   28510:	cmp	r3, #0
   28514:	beq	28588 <__assert_fail@plt+0x158e4>
   28518:	ldr	r3, [r7]
   2851c:	cmp	r3, #0
   28520:	bne	287d0 <__assert_fail@plt+0x15b2c>
   28524:	cmp	r9, #0
   28528:	beq	287c8 <__assert_fail@plt+0x15b24>
   2852c:	ldr	r5, [r4, #76]	; 0x4c
   28530:	cmp	r5, #0
   28534:	beq	2882c <__assert_fail@plt+0x15b88>
   28538:	ldr	r3, [r7]
   2853c:	cmp	r3, #0
   28540:	bne	2885c <__assert_fail@plt+0x15bb8>
   28544:	ldr	r0, [r4, #48]	; 0x30
   28548:	bl	125e4 <gcry_free@plt>
   2854c:	ldr	r0, [r4, #72]	; 0x48
   28550:	bl	125e4 <gcry_free@plt>
   28554:	mov	r2, #88	; 0x58
   28558:	mov	r1, r5
   2855c:	mov	r0, r4
   28560:	bl	125b4 <memcpy@plt>
   28564:	mov	r0, r5
   28568:	bl	125e4 <gcry_free@plt>
   2856c:	ldr	r3, [r7]
   28570:	cmp	r3, #0
   28574:	beq	287c8 <__assert_fail@plt+0x15b24>
   28578:	mov	r0, r4
   2857c:	bl	28400 <__assert_fail@plt+0x1575c>
   28580:	mvn	r0, #0
   28584:	b	285d8 <__assert_fail@plt+0x15934>
   28588:	cmp	r2, #0
   2858c:	bne	285f0 <__assert_fail@plt+0x1594c>
   28590:	ldr	r0, [r4, #56]	; 0x38
   28594:	cmp	r0, #0
   28598:	bne	288bc <__assert_fail@plt+0x15c18>
   2859c:	ldr	r8, [r4, #60]	; 0x3c
   285a0:	cmp	r8, #0
   285a4:	beq	287c8 <__assert_fail@plt+0x15b24>
   285a8:	ldr	r3, [r4, #52]	; 0x34
   285ac:	cmp	r3, #0
   285b0:	bne	285c0 <__assert_fail@plt+0x1591c>
   285b4:	ldr	r3, [r4, #56]	; 0x38
   285b8:	cmp	r3, #0
   285bc:	beq	28634 <__assert_fail@plt+0x15990>
   285c0:	cmp	r5, r1
   285c4:	bcs	287c8 <__assert_fail@plt+0x15b24>
   285c8:	ldr	r3, [r4, #48]	; 0x30
   285cc:	add	r2, r5, #1
   285d0:	str	r2, [r4, #40]	; 0x28
   285d4:	ldrb	r0, [r3, r5]
   285d8:	ldr	r2, [sp, #20]
   285dc:	ldr	r3, [r6]
   285e0:	cmp	r2, r3
   285e4:	bne	28904 <__assert_fail@plt+0x15c60>
   285e8:	add	sp, sp, #24
   285ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   285f0:	ldr	r8, [r4, #60]	; 0x3c
   285f4:	cmp	r8, #0
   285f8:	beq	285c0 <__assert_fail@plt+0x1591c>
   285fc:	b	285a8 <__assert_fail@plt+0x15904>
   28600:	ldr	r0, [r4, #40]	; 0x28
   28604:	ldr	r3, [r4, #36]	; 0x24
   28608:	ldr	r2, [r4, #44]	; 0x2c
   2860c:	add	r1, r3, r0
   28610:	sub	r1, r1, r2
   28614:	sub	r2, r2, r0
   28618:	str	r1, [sp, #4]
   2861c:	str	r2, [sp]
   28620:	ldr	r0, [pc, #820]	; 2895c <__assert_fail@plt+0x15cb8>
   28624:	ldr	r2, [r4, #84]	; 0x54
   28628:	ldr	r1, [r4, #80]	; 0x50
   2862c:	bl	21e08 <__assert_fail@plt+0xf164>
   28630:	b	284c0 <__assert_fail@plt+0x1581c>
   28634:	ldr	r3, [r4, #36]	; 0x24
   28638:	ldr	r0, [r7]
   2863c:	sub	r3, r3, r2
   28640:	cmp	r0, #0
   28644:	str	r3, [sp, #12]
   28648:	bne	287e4 <__assert_fail@plt+0x15b40>
   2864c:	cmp	r3, #0
   28650:	beq	28854 <__assert_fail@plt+0x15bb0>
   28654:	ldr	r3, [r4, #48]	; 0x30
   28658:	add	r2, sp, #12
   2865c:	add	r3, r3, r1
   28660:	str	r2, [sp]
   28664:	mov	r1, #3
   28668:	ldr	r2, [r4, #76]	; 0x4c
   2866c:	ldr	r0, [r4, #64]	; 0x40
   28670:	blx	r8
   28674:	ldr	r1, [r4, #44]	; 0x2c
   28678:	ldr	r3, [sp, #12]
   2867c:	ldr	r2, [r7]
   28680:	add	r1, r1, r3
   28684:	cmp	r2, #0
   28688:	str	r1, [r4, #44]	; 0x2c
   2868c:	mov	r5, r0
   28690:	beq	28700 <__assert_fail@plt+0x15a5c>
   28694:	cmp	r0, #0
   28698:	ldr	r8, [r4, #80]	; 0x50
   2869c:	ldr	sl, [r4, #84]	; 0x54
   286a0:	beq	28930 <__assert_fail@plt+0x15c8c>
   286a4:	cmn	r0, #1
   286a8:	beq	28870 <__assert_fail@plt+0x15bcc>
   286ac:	bl	12b3c <gpg_strerror@plt>
   286b0:	ldr	r3, [sp, #12]
   286b4:	mov	r1, r8
   286b8:	str	r3, [sp, #4]
   286bc:	mov	r2, sl
   286c0:	mov	r3, r5
   286c4:	str	r0, [sp]
   286c8:	ldr	r0, [pc, #656]	; 28960 <__assert_fail@plt+0x15cbc>
   286cc:	bl	21e08 <__assert_fail@plt+0xf164>
   286d0:	ldr	r1, [r4, #44]	; 0x2c
   286d4:	cmp	r1, #0
   286d8:	str	r5, [r4, #56]	; 0x38
   286dc:	beq	287c8 <__assert_fail@plt+0x15b24>
   286e0:	ldr	r5, [r4, #40]	; 0x28
   286e4:	cmp	r5, r1
   286e8:	bls	285c0 <__assert_fail@plt+0x1591c>
   286ec:	ldr	r3, [pc, #624]	; 28964 <__assert_fail@plt+0x15cc0>
   286f0:	ldr	r2, [pc, #624]	; 28968 <__assert_fail@plt+0x15cc4>
   286f4:	ldr	r1, [pc, #624]	; 2896c <__assert_fail@plt+0x15cc8>
   286f8:	ldr	r0, [pc, #624]	; 28970 <__assert_fail@plt+0x15ccc>
   286fc:	bl	12ca4 <__assert_fail@plt>
   28700:	cmn	r0, #1
   28704:	bne	28838 <__assert_fail@plt+0x15b94>
   28708:	mov	r3, #0
   2870c:	add	r2, sp, #16
   28710:	str	r2, [sp]
   28714:	str	r3, [sp, #16]
   28718:	ldr	r5, [r4, #60]	; 0x3c
   2871c:	ldr	r2, [r4, #76]	; 0x4c
   28720:	mov	r1, #2
   28724:	ldr	r0, [r4, #64]	; 0x40
   28728:	blx	r5
   2872c:	cmp	r0, #0
   28730:	bne	28894 <__assert_fail@plt+0x15bf0>
   28734:	ldr	r0, [r4, #64]	; 0x40
   28738:	cmp	r0, #0
   2873c:	beq	2874c <__assert_fail@plt+0x15aa8>
   28740:	ldr	r3, [r4, #68]	; 0x44
   28744:	cmp	r3, #0
   28748:	bne	288b4 <__assert_fail@plt+0x15c10>
   2874c:	mov	r3, #0
   28750:	mov	r2, #1
   28754:	cmp	r9, #0
   28758:	str	r3, [r4, #64]	; 0x40
   2875c:	str	r3, [r4, #60]	; 0x3c
   28760:	str	r2, [r4, #52]	; 0x34
   28764:	ldr	r1, [r4, #44]	; 0x2c
   28768:	beq	28844 <__assert_fail@plt+0x15ba0>
   2876c:	cmp	r1, r3
   28770:	bne	286e0 <__assert_fail@plt+0x15a3c>
   28774:	ldr	r5, [r4, #76]	; 0x4c
   28778:	cmp	r5, r3
   2877c:	beq	287c8 <__assert_fail@plt+0x15b24>
   28780:	ldr	r3, [r7]
   28784:	cmp	r3, #0
   28788:	bne	2891c <__assert_fail@plt+0x15c78>
   2878c:	ldr	r0, [r4, #48]	; 0x30
   28790:	bl	125e4 <gcry_free@plt>
   28794:	ldr	r0, [r4, #72]	; 0x48
   28798:	bl	125e4 <gcry_free@plt>
   2879c:	mov	r2, #88	; 0x58
   287a0:	mov	r1, r5
   287a4:	mov	r0, r4
   287a8:	bl	125b4 <memcpy@plt>
   287ac:	mov	r0, r5
   287b0:	bl	125e4 <gcry_free@plt>
   287b4:	ldr	r3, [r7]
   287b8:	cmp	r3, #0
   287bc:	beq	287c8 <__assert_fail@plt+0x15b24>
   287c0:	mov	r0, r4
   287c4:	bl	28400 <__assert_fail@plt+0x1575c>
   287c8:	mvn	r0, #0
   287cc:	b	285d8 <__assert_fail@plt+0x15934>
   287d0:	ldr	r2, [r4, #84]	; 0x54
   287d4:	ldr	r1, [r4, #80]	; 0x50
   287d8:	ldr	r0, [pc, #404]	; 28974 <__assert_fail@plt+0x15cd0>
   287dc:	bl	21e08 <__assert_fail@plt+0xf164>
   287e0:	b	28524 <__assert_fail@plt+0x15880>
   287e4:	ldr	r2, [r4, #84]	; 0x54
   287e8:	ldr	r1, [r4, #80]	; 0x50
   287ec:	ldr	r0, [pc, #388]	; 28978 <__assert_fail@plt+0x15cd4>
   287f0:	bl	21e08 <__assert_fail@plt+0xf164>
   287f4:	ldr	r3, [sp, #12]
   287f8:	cmp	r3, #0
   287fc:	bne	288a8 <__assert_fail@plt+0x15c04>
   28800:	ldr	r2, [r7]
   28804:	cmp	r2, #0
   28808:	beq	28850 <__assert_fail@plt+0x15bac>
   2880c:	ldr	r2, [pc, #360]	; 2897c <__assert_fail@plt+0x15cd8>
   28810:	ldr	r0, [pc, #328]	; 28960 <__assert_fail@plt+0x15cbc>
   28814:	strd	r2, [sp]
   28818:	ldr	r2, [r4, #84]	; 0x54
   2881c:	ldr	r1, [r4, #80]	; 0x50
   28820:	bl	21e08 <__assert_fail@plt+0xf164>
   28824:	ldr	r1, [r4, #44]	; 0x2c
   28828:	b	286e0 <__assert_fail@plt+0x15a3c>
   2882c:	str	r5, [r4, #52]	; 0x34
   28830:	mvn	r0, #0
   28834:	b	285d8 <__assert_fail@plt+0x15934>
   28838:	cmp	r0, #0
   2883c:	bne	286d4 <__assert_fail@plt+0x15a30>
   28840:	b	286e0 <__assert_fail@plt+0x15a3c>
   28844:	cmp	r1, #0
   28848:	bne	286e0 <__assert_fail@plt+0x15a3c>
   2884c:	b	287c8 <__assert_fail@plt+0x15b24>
   28850:	ldr	r2, [r4, #44]	; 0x2c
   28854:	mov	r1, r2
   28858:	b	286e0 <__assert_fail@plt+0x15a3c>
   2885c:	ldr	r2, [r4, #84]	; 0x54
   28860:	ldr	r1, [r4, #80]	; 0x50
   28864:	ldr	r0, [pc, #276]	; 28980 <__assert_fail@plt+0x15cdc>
   28868:	bl	21e08 <__assert_fail@plt+0xf164>
   2886c:	b	28544 <__assert_fail@plt+0x158a0>
   28870:	ldr	r0, [pc, #268]	; 28984 <__assert_fail@plt+0x15ce0>
   28874:	str	r3, [sp, #4]
   28878:	str	r0, [sp]
   2887c:	mov	r3, r5
   28880:	mov	r2, sl
   28884:	mov	r1, r8
   28888:	ldr	r0, [pc, #208]	; 28960 <__assert_fail@plt+0x15cbc>
   2888c:	bl	21e08 <__assert_fail@plt+0xf164>
   28890:	b	28708 <__assert_fail@plt+0x15a64>
   28894:	bl	12b3c <gpg_strerror@plt>
   28898:	mov	r1, r0
   2889c:	ldr	r0, [pc, #228]	; 28988 <__assert_fail@plt+0x15ce4>
   288a0:	bl	21cbc <__assert_fail@plt+0xf018>
   288a4:	b	28734 <__assert_fail@plt+0x15a90>
   288a8:	ldr	r8, [r4, #60]	; 0x3c
   288ac:	ldr	r1, [r4, #44]	; 0x2c
   288b0:	b	28654 <__assert_fail@plt+0x159b0>
   288b4:	bl	125e4 <gcry_free@plt>
   288b8:	b	2874c <__assert_fail@plt+0x15aa8>
   288bc:	ldr	r3, [r7]
   288c0:	cmp	r3, #0
   288c4:	beq	287c8 <__assert_fail@plt+0x15b24>
   288c8:	ldr	r5, [r4, #80]	; 0x50
   288cc:	ldr	r4, [r4, #84]	; 0x54
   288d0:	bl	12b3c <gpg_strerror@plt>
   288d4:	mov	r2, r4
   288d8:	mov	r1, r5
   288dc:	mov	r3, r0
   288e0:	ldr	r0, [pc, #164]	; 2898c <__assert_fail@plt+0x15ce8>
   288e4:	bl	21e08 <__assert_fail@plt+0xf164>
   288e8:	mvn	r0, #0
   288ec:	b	285d8 <__assert_fail@plt+0x15934>
   288f0:	ldr	r3, [pc, #108]	; 28964 <__assert_fail@plt+0x15cc0>
   288f4:	ldr	r2, [pc, #148]	; 28990 <__assert_fail@plt+0x15cec>
   288f8:	ldr	r1, [pc, #108]	; 2896c <__assert_fail@plt+0x15cc8>
   288fc:	ldr	r0, [pc, #144]	; 28994 <__assert_fail@plt+0x15cf0>
   28900:	bl	12ca4 <__assert_fail@plt>
   28904:	bl	1262c <__stack_chk_fail@plt>
   28908:	ldr	r3, [pc, #84]	; 28964 <__assert_fail@plt+0x15cc0>
   2890c:	ldr	r2, [pc, #132]	; 28998 <__assert_fail@plt+0x15cf4>
   28910:	ldr	r1, [pc, #84]	; 2896c <__assert_fail@plt+0x15cc8>
   28914:	ldr	r0, [pc, #84]	; 28970 <__assert_fail@plt+0x15ccc>
   28918:	bl	12ca4 <__assert_fail@plt>
   2891c:	ldr	r2, [r4, #84]	; 0x54
   28920:	ldr	r1, [r4, #80]	; 0x50
   28924:	ldr	r0, [pc, #112]	; 2899c <__assert_fail@plt+0x15cf8>
   28928:	bl	21e08 <__assert_fail@plt+0xf164>
   2892c:	b	2878c <__assert_fail@plt+0x15ae8>
   28930:	ldr	r0, [pc, #68]	; 2897c <__assert_fail@plt+0x15cd8>
   28934:	str	r3, [sp, #4]
   28938:	str	r0, [sp]
   2893c:	mov	r3, r5
   28940:	mov	r2, sl
   28944:	mov	r1, r8
   28948:	ldr	r0, [pc, #16]	; 28960 <__assert_fail@plt+0x15cbc>
   2894c:	bl	21e08 <__assert_fail@plt+0xf164>
   28950:	b	28824 <__assert_fail@plt+0x15b80>
   28954:	muleq	r4, r4, r4
   28958:	strdeq	r5, [r4], -r8
   2895c:	andeq	r4, r3, ip, ror #7
   28960:	andeq	r4, r3, ip, lsr #10
   28964:	andeq	r4, r3, r4, lsr r1
   28968:	andeq	r0, r0, r4, ror r7
   2896c:			; <UNDEFINED> instruction: 0x000342b8
   28970:	andeq	r4, r3, r8, asr r4
   28974:	andeq	r4, r3, r0, ror r4
   28978:	strdeq	r4, [r3], -ip
   2897c:	andeq	r4, r3, ip, ror #10
   28980:	muleq	r3, ip, r4
   28984:	andeq	r4, r3, r8, asr #11
   28988:	andeq	r4, r3, r0, ror r5
   2898c:	ldrdeq	r4, [r3], -r0
   28990:	andeq	r0, r0, pc, ror #13
   28994:	andeq	r4, r3, r0, asr #8
   28998:	strdeq	r0, [r0], -r4
   2899c:	andeq	r4, r3, ip, lsl #11
   289a0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289a4:	subs	r7, r0, #0
   289a8:	beq	28a68 <__assert_fail@plt+0x15dc4>
   289ac:	ldr	r8, [pc, #200]	; 28a7c <__assert_fail@plt+0x15dd8>
   289b0:	ldr	r3, [r8]
   289b4:	cmp	r3, #0
   289b8:	bne	28a40 <__assert_fail@plt+0x15d9c>
   289bc:	ldr	r3, [pc, #188]	; 28a80 <__assert_fail@plt+0x15ddc>
   289c0:	ldr	r4, [r3]
   289c4:	cmp	r4, #0
   289c8:	beq	28a5c <__assert_fail@plt+0x15db8>
   289cc:	ldr	sl, [pc, #176]	; 28a84 <__assert_fail@plt+0x15de0>
   289d0:	mov	fp, #0
   289d4:	mvn	r9, #0
   289d8:	ldr	r5, [r4, #4]
   289dc:	cmn	r5, #1
   289e0:	beq	28a18 <__assert_fail@plt+0x15d74>
   289e4:	add	r6, r4, #8
   289e8:	mov	r0, r6
   289ec:	mov	r1, r7
   289f0:	bl	124b8 <strcmp@plt>
   289f4:	cmp	r0, #0
   289f8:	bne	28a18 <__assert_fail@plt+0x15d74>
   289fc:	ldr	r3, [r8]
   28a00:	cmp	r3, #0
   28a04:	bne	28a2c <__assert_fail@plt+0x15d88>
   28a08:	mov	r0, r5
   28a0c:	bl	12c5c <close@plt>
   28a10:	str	r9, [r4, #4]
   28a14:	mov	fp, r0
   28a18:	ldr	r4, [r4]
   28a1c:	cmp	r4, #0
   28a20:	bne	289d8 <__assert_fail@plt+0x15d34>
   28a24:	mov	r0, fp
   28a28:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a2c:	mov	r1, r6
   28a30:	mov	r0, sl
   28a34:	bl	21e08 <__assert_fail@plt+0xf164>
   28a38:	ldr	r5, [r4, #4]
   28a3c:	b	28a08 <__assert_fail@plt+0x15d64>
   28a40:	mov	r1, r7
   28a44:	ldr	r0, [pc, #60]	; 28a88 <__assert_fail@plt+0x15de4>
   28a48:	bl	21e08 <__assert_fail@plt+0xf164>
   28a4c:	ldr	r3, [pc, #44]	; 28a80 <__assert_fail@plt+0x15ddc>
   28a50:	ldr	r4, [r3]
   28a54:	cmp	r4, #0
   28a58:	bne	289cc <__assert_fail@plt+0x15d28>
   28a5c:	mov	fp, r4
   28a60:	mov	r0, fp
   28a64:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a68:	ldr	r3, [pc, #28]	; 28a8c <__assert_fail@plt+0x15de8>
   28a6c:	mov	r2, #204	; 0xcc
   28a70:	ldr	r1, [pc, #24]	; 28a90 <__assert_fail@plt+0x15dec>
   28a74:	ldr	r0, [pc, #24]	; 28a94 <__assert_fail@plt+0x15df0>
   28a78:	bl	12ca4 <__assert_fail@plt>
   28a7c:	muleq	r4, r4, r4
   28a80:	ldrdeq	r6, [r4], -r0
   28a84:	strdeq	r4, [r3], -r0
   28a88:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   28a8c:	andeq	r4, r3, r8, asr #2
   28a90:			; <UNDEFINED> instruction: 0x000342b8
   28a94:	andeq	r4, r3, ip, asr #11
   28a98:	ldr	r3, [pc, #140]	; 28b2c <__assert_fail@plt+0x15e88>
   28a9c:	push	{r4, r5, r6, lr}
   28aa0:	cmp	r2, #0
   28aa4:	mov	r6, r1
   28aa8:	mov	r5, r0
   28aac:	mov	r0, r1
   28ab0:	mov	r1, #43	; 0x2b
   28ab4:	movne	r4, #384	; 0x180
   28ab8:	moveq	r4, r3
   28abc:	bl	128fc <strchr@plt>
   28ac0:	cmp	r0, #0
   28ac4:	beq	28aec <__assert_fail@plt+0x15e48>
   28ac8:	mov	r0, r5
   28acc:	bl	289a0 <__assert_fail@plt+0x15cfc>
   28ad0:	cmp	r0, #0
   28ad4:	moveq	r1, #2
   28ad8:	bne	28b24 <__assert_fail@plt+0x15e80>
   28adc:	mov	r2, r4
   28ae0:	mov	r0, r5
   28ae4:	pop	{r4, r5, r6, lr}
   28ae8:	b	127b8 <open64@plt>
   28aec:	mov	r1, #119	; 0x77
   28af0:	mov	r0, r6
   28af4:	bl	128fc <strchr@plt>
   28af8:	subs	r1, r0, #0
   28afc:	beq	28adc <__assert_fail@plt+0x15e38>
   28b00:	mov	r0, r5
   28b04:	bl	289a0 <__assert_fail@plt+0x15cfc>
   28b08:	cmp	r0, #0
   28b0c:	bne	28b24 <__assert_fail@plt+0x15e80>
   28b10:	mov	r2, r4
   28b14:	mov	r0, r5
   28b18:	ldr	r1, [pc, #16]	; 28b30 <__assert_fail@plt+0x15e8c>
   28b1c:	pop	{r4, r5, r6, lr}
   28b20:	b	127b8 <open64@plt>
   28b24:	mvn	r0, #0
   28b28:	pop	{r4, r5, r6, pc}
   28b2c:			; <UNDEFINED> instruction: 0x000001b6
   28b30:	andeq	r0, r0, r1, asr #4
   28b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b38:	sub	sp, sp, #52	; 0x34
   28b3c:	ldr	r9, [pc, #564]	; 28d78 <__assert_fail@plt+0x160d4>
   28b40:	cmp	r1, #2
   28b44:	mov	r5, r0
   28b48:	ldr	ip, [r9]
   28b4c:	mov	r4, r2
   28b50:	mov	r6, r3
   28b54:	str	ip, [sp, #44]	; 0x2c
   28b58:	beq	28ca8 <__assert_fail@plt+0x16004>
   28b5c:	cmp	r1, #3
   28b60:	beq	28c40 <__assert_fail@plt+0x15f9c>
   28b64:	cmp	r1, #4
   28b68:	bne	28c88 <__assert_fail@plt+0x15fe4>
   28b6c:	ldr	sl, [pc, #520]	; 28d7c <__assert_fail@plt+0x160d8>
   28b70:	orrs	r3, r0, r2
   28b74:	moveq	r3, #1
   28b78:	ldr	r2, [sl]
   28b7c:	movne	r3, #0
   28b80:	cmp	r6, #0
   28b84:	movne	r4, r3
   28b88:	moveq	r4, #0
   28b8c:	cmp	r2, #0
   28b90:	beq	28cec <__assert_fail@plt+0x16048>
   28b94:	cmp	r6, #0
   28b98:	beq	28d44 <__assert_fail@plt+0x160a0>
   28b9c:	mov	r1, r6
   28ba0:	ldr	r0, [pc, #472]	; 28d80 <__assert_fail@plt+0x160dc>
   28ba4:	bl	21e08 <__assert_fail@plt+0xf164>
   28ba8:	cmp	r4, #0
   28bac:	beq	28c88 <__assert_fail@plt+0x15fe4>
   28bb0:	ldr	r3, [sl]
   28bb4:	cmp	r3, #0
   28bb8:	beq	28bc8 <__assert_fail@plt+0x15f24>
   28bbc:	mov	r1, r6
   28bc0:	ldr	r0, [pc, #444]	; 28d84 <__assert_fail@plt+0x160e0>
   28bc4:	bl	21e08 <__assert_fail@plt+0xf164>
   28bc8:	ldr	r3, [pc, #440]	; 28d88 <__assert_fail@plt+0x160e4>
   28bcc:	ldr	r4, [r3]
   28bd0:	cmp	r4, #0
   28bd4:	beq	28d64 <__assert_fail@plt+0x160c0>
   28bd8:	ldr	fp, [pc, #428]	; 28d8c <__assert_fail@plt+0x160e8>
   28bdc:	mov	r8, #0
   28be0:	b	28bfc <__assert_fail@plt+0x15f58>
   28be4:	mov	r0, r5
   28be8:	bl	12494 <fsync@plt>
   28bec:	mov	r8, r0
   28bf0:	ldr	r4, [r4]
   28bf4:	cmp	r4, #0
   28bf8:	beq	28c8c <__assert_fail@plt+0x15fe8>
   28bfc:	ldr	r5, [r4, #4]
   28c00:	cmn	r5, #1
   28c04:	beq	28bf0 <__assert_fail@plt+0x15f4c>
   28c08:	add	r7, r4, #8
   28c0c:	mov	r0, r7
   28c10:	mov	r1, r6
   28c14:	bl	124b8 <strcmp@plt>
   28c18:	cmp	r0, #0
   28c1c:	bne	28bf0 <__assert_fail@plt+0x15f4c>
   28c20:	ldr	r3, [sl]
   28c24:	cmp	r3, #0
   28c28:	beq	28be4 <__assert_fail@plt+0x15f40>
   28c2c:	mov	r1, r7
   28c30:	mov	r0, fp
   28c34:	bl	21e08 <__assert_fail@plt+0xf164>
   28c38:	ldr	r5, [r4, #4]
   28c3c:	b	28be4 <__assert_fail@plt+0x15f40>
   28c40:	ldr	r3, [pc, #308]	; 28d7c <__assert_fail@plt+0x160d8>
   28c44:	ldr	r3, [r3]
   28c48:	cmp	r3, #0
   28c4c:	bne	28d10 <__assert_fail@plt+0x1606c>
   28c50:	cmp	r5, #0
   28c54:	beq	28c88 <__assert_fail@plt+0x15fe4>
   28c58:	ldr	r2, [r5, #76]	; 0x4c
   28c5c:	cmp	r2, #0
   28c60:	bne	28c6c <__assert_fail@plt+0x15fc8>
   28c64:	b	28d6c <__assert_fail@plt+0x160c8>
   28c68:	mov	r2, r3
   28c6c:	ldr	r3, [r2, #76]	; 0x4c
   28c70:	cmp	r3, #0
   28c74:	bne	28c68 <__assert_fail@plt+0x15fc4>
   28c78:	ldr	r3, [pc, #272]	; 28d90 <__assert_fail@plt+0x160ec>
   28c7c:	ldr	r1, [r2, #60]	; 0x3c
   28c80:	cmp	r1, r3
   28c84:	beq	28d54 <__assert_fail@plt+0x160b0>
   28c88:	mvn	r8, #0
   28c8c:	ldr	r2, [sp, #44]	; 0x2c
   28c90:	ldr	r3, [r9]
   28c94:	mov	r0, r8
   28c98:	cmp	r2, r3
   28c9c:	bne	28d74 <__assert_fail@plt+0x160d0>
   28ca0:	add	sp, sp, #52	; 0x34
   28ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ca8:	ldr	r3, [pc, #204]	; 28d7c <__assert_fail@plt+0x160d8>
   28cac:	ldr	r3, [r3]
   28cb0:	cmp	r3, #0
   28cb4:	bne	28cf8 <__assert_fail@plt+0x16054>
   28cb8:	orrs	r3, r5, r4
   28cbc:	moveq	r3, #1
   28cc0:	movne	r3, #0
   28cc4:	cmp	r6, #0
   28cc8:	moveq	r3, #0
   28ccc:	cmp	r3, #0
   28cd0:	beq	28c88 <__assert_fail@plt+0x15fe4>
   28cd4:	mov	r0, r6
   28cd8:	bl	289a0 <__assert_fail@plt+0x15cfc>
   28cdc:	adds	r0, r0, #0
   28ce0:	movne	r0, #1
   28ce4:	rsb	r8, r0, #0
   28ce8:	b	28c8c <__assert_fail@plt+0x15fe8>
   28cec:	cmp	r4, #0
   28cf0:	bne	28bc8 <__assert_fail@plt+0x15f24>
   28cf4:	b	28c88 <__assert_fail@plt+0x15fe4>
   28cf8:	cmp	r6, #0
   28cfc:	ldr	r1, [pc, #144]	; 28d94 <__assert_fail@plt+0x160f0>
   28d00:	ldr	r0, [pc, #144]	; 28d98 <__assert_fail@plt+0x160f4>
   28d04:	movne	r1, r6
   28d08:	bl	21e08 <__assert_fail@plt+0xf164>
   28d0c:	b	28cb8 <__assert_fail@plt+0x16014>
   28d10:	cmp	r0, #0
   28d14:	mvneq	r6, #0
   28d18:	add	r1, sp, #12
   28d1c:	ldrdne	r6, [r0, #80]	; 0x50
   28d20:	moveq	r7, r6
   28d24:	bl	28380 <__assert_fail@plt+0x156dc>
   28d28:	str	r4, [sp]
   28d2c:	mov	r2, r7
   28d30:	mov	r1, r6
   28d34:	mov	r3, r0
   28d38:	ldr	r0, [pc, #92]	; 28d9c <__assert_fail@plt+0x160f8>
   28d3c:	bl	21e08 <__assert_fail@plt+0xf164>
   28d40:	b	28c50 <__assert_fail@plt+0x15fac>
   28d44:	ldr	r1, [pc, #84]	; 28da0 <__assert_fail@plt+0x160fc>
   28d48:	ldr	r0, [pc, #48]	; 28d80 <__assert_fail@plt+0x160dc>
   28d4c:	bl	21e08 <__assert_fail@plt+0xf164>
   28d50:	b	28c88 <__assert_fail@plt+0x15fe4>
   28d54:	ldr	r3, [r2, #64]	; 0x40
   28d58:	mov	r8, #0
   28d5c:	str	r4, [r3, #8]
   28d60:	b	28c8c <__assert_fail@plt+0x15fe8>
   28d64:	mov	r8, r4
   28d68:	b	28c8c <__assert_fail@plt+0x15fe8>
   28d6c:	mov	r2, r5
   28d70:	b	28c78 <__assert_fail@plt+0x15fd4>
   28d74:	bl	1262c <__stack_chk_fail@plt>
   28d78:	strdeq	r5, [r4], -r8
   28d7c:	muleq	r4, r4, r4
   28d80:	andeq	r4, r3, r8, asr r6
   28d84:	andeq	r4, r3, r8, ror r6
   28d88:	ldrdeq	r6, [r4], -r0
   28d8c:	muleq	r3, r4, r6
   28d90:	andeq	r7, r2, r8, lsr #28
   28d94:	andeq	r3, r3, ip, lsl #13
   28d98:	andeq	r4, r3, ip, lsl #12
   28d9c:	andeq	r4, r3, r0, lsr r6
   28da0:			; <UNDEFINED> instruction: 0x000346b0
   28da4:	cmp	r0, #0
   28da8:	bxeq	lr
   28dac:	ldr	r2, [r0, #76]	; 0x4c
   28db0:	cmp	r2, #0
   28db4:	bne	28dc0 <__assert_fail@plt+0x1611c>
   28db8:	b	28de4 <__assert_fail@plt+0x16140>
   28dbc:	mov	r2, r3
   28dc0:	ldr	r3, [r2, #76]	; 0x4c
   28dc4:	cmp	r3, #0
   28dc8:	bne	28dbc <__assert_fail@plt+0x16118>
   28dcc:	ldr	r3, [pc, #48]	; 28e04 <__assert_fail@plt+0x16160>
   28dd0:	ldr	r1, [r2, #60]	; 0x3c
   28dd4:	cmp	r1, r3
   28dd8:	beq	28dec <__assert_fail@plt+0x16148>
   28ddc:	mov	r0, #0
   28de0:	bx	lr
   28de4:	mov	r2, r0
   28de8:	b	28dcc <__assert_fail@plt+0x16128>
   28dec:	ldr	r0, [r2, #64]	; 0x40
   28df0:	ldr	r3, [r0, #16]
   28df4:	cmp	r3, #0
   28df8:	bne	28ddc <__assert_fail@plt+0x16138>
   28dfc:	add	r0, r0, #20
   28e00:	bx	lr
   28e04:	andeq	r7, r2, r8, lsr #28
   28e08:	ldr	r3, [pc, #32]	; 28e30 <__assert_fail@plt+0x1618c>
   28e0c:	ldr	r3, [r3]
   28e10:	cmp	r3, #0
   28e14:	beq	28e28 <__assert_fail@plt+0x16184>
   28e18:	push	{r4, lr}
   28e1c:	bl	28400 <__assert_fail@plt+0x1575c>
   28e20:	mov	r0, #0
   28e24:	pop	{r4, pc}
   28e28:	mov	r0, #0
   28e2c:	bx	lr
   28e30:	muleq	r4, r4, r4
   28e34:	cmp	r0, #3
   28e38:	push	{r4, r5, r6, lr}
   28e3c:	bhi	28e9c <__assert_fail@plt+0x161f8>
   28e40:	cmp	r1, #0
   28e44:	mov	r5, r1
   28e48:	beq	28eb0 <__assert_fail@plt+0x1620c>
   28e4c:	mov	r6, r0
   28e50:	mov	r1, #88	; 0x58
   28e54:	mov	r0, #1
   28e58:	bl	12bcc <gcry_xcalloc@plt>
   28e5c:	mov	r4, r0
   28e60:	mov	r0, r5
   28e64:	str	r6, [r4]
   28e68:	bl	12410 <gcry_xmalloc@plt>
   28e6c:	ldr	r1, [pc, #68]	; 28eb8 <__assert_fail@plt+0x16214>
   28e70:	mov	r2, #0
   28e74:	str	r5, [r4, #36]	; 0x24
   28e78:	ldr	r3, [r1, #4]
   28e7c:	str	r2, [r4, #84]	; 0x54
   28e80:	add	r3, r3, #1
   28e84:	str	r3, [r1, #4]
   28e88:	str	r3, [r4, #80]	; 0x50
   28e8c:	str	r2, [r4, #72]	; 0x48
   28e90:	str	r0, [r4, #48]	; 0x30
   28e94:	mov	r0, r4
   28e98:	pop	{r4, r5, r6, pc}
   28e9c:	ldr	r3, [pc, #24]	; 28ebc <__assert_fail@plt+0x16218>
   28ea0:	mov	r2, #1104	; 0x450
   28ea4:	ldr	r1, [pc, #20]	; 28ec0 <__assert_fail@plt+0x1621c>
   28ea8:	ldr	r0, [pc, #20]	; 28ec4 <__assert_fail@plt+0x16220>
   28eac:	bl	12ca4 <__assert_fail@plt>
   28eb0:	ldr	r0, [pc, #16]	; 28ec8 <__assert_fail@plt+0x16224>
   28eb4:	bl	21dc4 <__assert_fail@plt+0xf120>
   28eb8:	ldrdeq	r6, [r4], -r0
   28ebc:	andeq	r4, r3, ip, asr r1
   28ec0:			; <UNDEFINED> instruction: 0x000342b8
   28ec4:			; <UNDEFINED> instruction: 0x000346b8
   28ec8:	andeq	r4, r3, ip, lsl r7
   28ecc:	mov	r3, r1
   28ed0:	push	{r4, r5, r6, r7, r8, lr}
   28ed4:	mov	r1, #119	; 0x77
   28ed8:	sub	sp, sp, #8
   28edc:	mov	r6, r0
   28ee0:	mov	r0, r3
   28ee4:	mov	r7, r2
   28ee8:	bl	128fc <strchr@plt>
   28eec:	mov	r1, #8192	; 0x2000
   28ef0:	cmp	r0, #0
   28ef4:	movne	r0, #2
   28ef8:	moveq	r0, #0
   28efc:	bl	28e34 <__assert_fail@plt+0x16190>
   28f00:	mov	r5, r0
   28f04:	mov	r0, #44	; 0x2c
   28f08:	bl	12410 <gcry_xmalloc@plt>
   28f0c:	mov	ip, #1
   28f10:	mov	r1, ip
   28f14:	ldr	r3, [pc, #144]	; 28fac <__assert_fail@plt+0x16308>
   28f18:	mvn	r2, #0
   28f1c:	str	r6, [sp]
   28f20:	mov	r4, r0
   28f24:	add	r8, r0, #20
   28f28:	mov	r0, r8
   28f2c:	str	r6, [r4]
   28f30:	str	r7, [r4, #4]
   28f34:	str	ip, [r4, #16]
   28f38:	bl	1298c <__sprintf_chk@plt>
   28f3c:	ldr	r1, [pc, #108]	; 28fb0 <__assert_fail@plt+0x1630c>
   28f40:	mov	r3, #0
   28f44:	ldr	r2, [pc, #104]	; 28fb4 <__assert_fail@plt+0x16310>
   28f48:	ldr	r1, [r1]
   28f4c:	str	r4, [r5, #64]	; 0x40
   28f50:	cmp	r1, r3
   28f54:	str	r2, [r5, #60]	; 0x3c
   28f58:	str	r3, [r4, #12]
   28f5c:	str	r3, [r4, #4]
   28f60:	str	r3, [r4, #8]
   28f64:	beq	28f8c <__assert_fail@plt+0x162e8>
   28f68:	ldr	r0, [pc, #72]	; 28fb8 <__assert_fail@plt+0x16314>
   28f6c:	cmp	r7, #0
   28f70:	ldr	r1, [r5, #80]	; 0x50
   28f74:	ldr	r2, [r5, #84]	; 0x54
   28f78:	ldr	r3, [pc, #60]	; 28fbc <__assert_fail@plt+0x16318>
   28f7c:	str	r8, [sp]
   28f80:	movne	r3, r0
   28f84:	ldr	r0, [pc, #52]	; 28fc0 <__assert_fail@plt+0x1631c>
   28f88:	bl	21e08 <__assert_fail@plt+0xf164>
   28f8c:	mov	r3, #0
   28f90:	mov	r2, #1
   28f94:	mov	r1, #3
   28f98:	mov	r0, r5
   28f9c:	bl	28b34 <__assert_fail@plt+0x15e90>
   28fa0:	mov	r0, r5
   28fa4:	add	sp, sp, #8
   28fa8:	pop	{r4, r5, r6, r7, r8, pc}
   28fac:	andeq	r4, r3, r8, asr #14
   28fb0:	muleq	r4, r4, r4
   28fb4:	andeq	r7, r2, r8, lsr #28
   28fb8:	andeq	r4, r3, r4, asr #14
   28fbc:	andeq	r1, r3, r8, ror #15
   28fc0:	andeq	r4, r3, r0, asr r7
   28fc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28fc8:	subs	r7, r1, #0
   28fcc:	ldr	r8, [pc, #684]	; 29280 <__assert_fail@plt+0x165dc>
   28fd0:	sub	sp, sp, #48	; 0x30
   28fd4:	mov	r4, r0
   28fd8:	ldr	r1, [r8]
   28fdc:	mov	r9, r2
   28fe0:	mov	r6, r3
   28fe4:	str	r1, [sp, #44]	; 0x2c
   28fe8:	beq	29130 <__assert_fail@plt+0x1648c>
   28fec:	cmp	r0, #0
   28ff0:	beq	29090 <__assert_fail@plt+0x163ec>
   28ff4:	ldrb	r3, [r0]
   28ff8:	cmp	r3, #45	; 0x2d
   28ffc:	beq	29084 <__assert_fail@plt+0x163e0>
   29000:	mov	r2, #1
   29004:	mov	r1, #0
   29008:	mov	r0, r4
   2900c:	bl	22750 <__assert_fail@plt+0xfaac>
   29010:	cmn	r0, #1
   29014:	bne	291e4 <__assert_fail@plt+0x16540>
   29018:	cmp	r9, #0
   2901c:	bne	29140 <__assert_fail@plt+0x1649c>
   29020:	ldr	r3, [pc, #604]	; 29284 <__assert_fail@plt+0x165e0>
   29024:	ldr	r5, [r3]
   29028:	cmp	r5, #0
   2902c:	beq	2905c <__assert_fail@plt+0x163b8>
   29030:	ldr	r7, [r5, #4]
   29034:	cmn	r7, #1
   29038:	beq	29050 <__assert_fail@plt+0x163ac>
   2903c:	mov	r1, r4
   29040:	add	r0, r5, #8
   29044:	bl	124b8 <strcmp@plt>
   29048:	cmp	r0, #0
   2904c:	beq	291f8 <__assert_fail@plt+0x16554>
   29050:	ldr	r5, [r5]
   29054:	cmp	r5, #0
   29058:	bne	29030 <__assert_fail@plt+0x1638c>
   2905c:	ldr	sl, [pc, #548]	; 29288 <__assert_fail@plt+0x165e4>
   29060:	ldr	r3, [sl]
   29064:	cmp	r3, #0
   29068:	bne	2925c <__assert_fail@plt+0x165b8>
   2906c:	mov	r1, r6
   29070:	mov	r2, #0
   29074:	mov	r0, r4
   29078:	bl	28a98 <__assert_fail@plt+0x15df4>
   2907c:	mov	r7, r0
   29080:	b	29154 <__assert_fail@plt+0x164b0>
   29084:	ldrb	r3, [r0, #1]
   29088:	cmp	r3, #0
   2908c:	bne	29000 <__assert_fail@plt+0x1635c>
   29090:	ldr	r3, [pc, #500]	; 2928c <__assert_fail@plt+0x165e8>
   29094:	cmp	r9, #0
   29098:	mov	r1, #8192	; 0x2000
   2909c:	mov	r0, r9
   290a0:	moveq	r7, #0
   290a4:	ldr	r4, [pc, #484]	; 29290 <__assert_fail@plt+0x165ec>
   290a8:	movne	r4, r3
   290ac:	bl	28e34 <__assert_fail@plt+0x16190>
   290b0:	ldr	sl, [pc, #464]	; 29288 <__assert_fail@plt+0x165e4>
   290b4:	mov	r6, r0
   290b8:	mov	r0, r4
   290bc:	bl	128d8 <strlen@plt>
   290c0:	mov	r9, r0
   290c4:	add	r0, r0, #24
   290c8:	bl	12410 <gcry_xmalloc@plt>
   290cc:	mov	r3, #1
   290d0:	add	r2, r9, r3
   290d4:	mov	r1, r4
   290d8:	str	r7, [r0]
   290dc:	str	r3, [r0, #16]
   290e0:	mov	r5, r0
   290e4:	add	r0, r0, #20
   290e8:	bl	125b4 <memcpy@plt>
   290ec:	ldr	r3, [sl]
   290f0:	ldr	r2, [pc, #412]	; 29294 <__assert_fail@plt+0x165f0>
   290f4:	cmp	r3, #0
   290f8:	mov	r3, #0
   290fc:	str	r5, [r6, #64]	; 0x40
   29100:	str	r2, [r6, #60]	; 0x3c
   29104:	str	r3, [r5, #12]
   29108:	str	r3, [r5, #4]
   2910c:	str	r3, [r5, #8]
   29110:	bne	291ac <__assert_fail@plt+0x16508>
   29114:	ldr	r2, [sp, #44]	; 0x2c
   29118:	ldr	r3, [r8]
   2911c:	mov	r0, r6
   29120:	cmp	r2, r3
   29124:	bne	2927c <__assert_fail@plt+0x165d8>
   29128:	add	sp, sp, #48	; 0x30
   2912c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29130:	cmp	r0, #0
   29134:	bne	29018 <__assert_fail@plt+0x16374>
   29138:	mov	r6, #0
   2913c:	b	29114 <__assert_fail@plt+0x16470>
   29140:	mov	r1, r6
   29144:	ldr	r2, [sp, #80]	; 0x50
   29148:	mov	r0, r4
   2914c:	bl	28a98 <__assert_fail@plt+0x15df4>
   29150:	mov	r7, r0
   29154:	cmn	r7, #1
   29158:	beq	29138 <__assert_fail@plt+0x16494>
   2915c:	ldr	sl, [pc, #292]	; 29288 <__assert_fail@plt+0x165e4>
   29160:	mov	r1, #8192	; 0x2000
   29164:	mov	r0, r9
   29168:	bl	28e34 <__assert_fail@plt+0x16190>
   2916c:	mov	r6, r0
   29170:	mov	r0, r4
   29174:	bl	128d8 <strlen@plt>
   29178:	add	r0, r0, #24
   2917c:	bl	12410 <gcry_xmalloc@plt>
   29180:	mov	r3, #0
   29184:	mov	r1, r4
   29188:	str	r3, [r0, #16]
   2918c:	str	r7, [r0]
   29190:	mov	r5, r0
   29194:	add	r0, r0, #20
   29198:	bl	12764 <strcpy@plt>
   2919c:	mov	r0, r4
   291a0:	bl	12a40 <gcry_xstrdup@plt>
   291a4:	str	r0, [r6, #72]	; 0x48
   291a8:	b	290ec <__assert_fail@plt+0x16448>
   291ac:	add	r1, sp, #12
   291b0:	mov	r0, r6
   291b4:	ldr	r7, [r6, #80]	; 0x50
   291b8:	ldr	r9, [r6, #84]	; 0x54
   291bc:	bl	28380 <__assert_fail@plt+0x156dc>
   291c0:	ldr	r3, [r5]
   291c4:	mov	r2, r9
   291c8:	str	r3, [sp, #4]
   291cc:	mov	r1, r7
   291d0:	mov	r3, r4
   291d4:	str	r0, [sp]
   291d8:	ldr	r0, [pc, #184]	; 29298 <__assert_fail@plt+0x165f4>
   291dc:	bl	21e08 <__assert_fail@plt+0xf164>
   291e0:	b	29114 <__assert_fail@plt+0x16470>
   291e4:	mov	r1, r6
   291e8:	mov	r2, #0
   291ec:	bl	28ecc <__assert_fail@plt+0x16228>
   291f0:	mov	r6, r0
   291f4:	b	29114 <__assert_fail@plt+0x16470>
   291f8:	ldr	sl, [pc, #136]	; 29288 <__assert_fail@plt+0x165e4>
   291fc:	mvn	r3, #0
   29200:	str	r3, [r5, #4]
   29204:	ldr	r3, [sl]
   29208:	cmp	r3, #0
   2920c:	bne	2926c <__assert_fail@plt+0x165c8>
   29210:	mov	r6, #0
   29214:	mov	r2, #0
   29218:	mov	r3, #0
   2921c:	str	r6, [sp]
   29220:	mov	r0, r7
   29224:	bl	12734 <lseek64@plt>
   29228:	mvn	r3, #0
   2922c:	mvn	r2, #0
   29230:	cmp	r1, r3
   29234:	cmpeq	r0, r2
   29238:	bne	29160 <__assert_fail@plt+0x164bc>
   2923c:	bl	12968 <__errno_location@plt>
   29240:	ldr	r0, [r0]
   29244:	bl	12818 <strerror@plt>
   29248:	mov	r1, r7
   2924c:	mov	r2, r0
   29250:	ldr	r0, [pc, #68]	; 2929c <__assert_fail@plt+0x165f8>
   29254:	bl	21cbc <__assert_fail@plt+0xf018>
   29258:	b	29114 <__assert_fail@plt+0x16470>
   2925c:	mov	r1, r4
   29260:	ldr	r0, [pc, #56]	; 292a0 <__assert_fail@plt+0x165fc>
   29264:	bl	21e08 <__assert_fail@plt+0xf164>
   29268:	b	2906c <__assert_fail@plt+0x163c8>
   2926c:	mov	r1, r4
   29270:	ldr	r0, [pc, #44]	; 292a4 <__assert_fail@plt+0x16600>
   29274:	bl	21e08 <__assert_fail@plt+0xf164>
   29278:	b	29210 <__assert_fail@plt+0x1656c>
   2927c:	bl	1262c <__stack_chk_fail@plt>
   29280:	strdeq	r5, [r4], -r8
   29284:	ldrdeq	r6, [r4], -r0
   29288:	muleq	r4, r4, r4
   2928c:	andeq	r4, r3, r0, ror r0
   29290:	andeq	r4, r3, ip, ror r0
   29294:	andeq	r7, r2, r8, lsr #28
   29298:	andeq	r4, r3, r8, asr #15
   2929c:	muleq	r3, r0, r7
   292a0:	andeq	r4, r3, r8, lsr #15
   292a4:	andeq	r4, r3, ip, ror #14
   292a8:	ldr	r3, [pc, #324]	; 293f4 <__assert_fail@plt+0x16750>
   292ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292b0:	sub	sp, sp, #52	; 0x34
   292b4:	ldr	r3, [r3]
   292b8:	mov	r6, #0
   292bc:	subs	r4, r0, #0
   292c0:	str	r6, [sp, #8]
   292c4:	str	r3, [sp, #44]	; 0x2c
   292c8:	beq	293cc <__assert_fail@plt+0x16728>
   292cc:	ldr	r8, [pc, #292]	; 293f8 <__assert_fail@plt+0x16754>
   292d0:	ldr	sl, [pc, #292]	; 293fc <__assert_fail@plt+0x16758>
   292d4:	ldr	r9, [pc, #292]	; 29400 <__assert_fail@plt+0x1675c>
   292d8:	b	29360 <__assert_fail@plt+0x166bc>
   292dc:	ldr	r7, [r4, #60]	; 0x3c
   292e0:	cmp	r7, #0
   292e4:	beq	29328 <__assert_fail@plt+0x16684>
   292e8:	add	r3, sp, #8
   292ec:	ldr	r2, [r4, #76]	; 0x4c
   292f0:	ldr	r0, [r4, #64]	; 0x40
   292f4:	mov	r1, #2
   292f8:	str	r3, [sp]
   292fc:	mov	r3, #0
   29300:	blx	r7
   29304:	subs	r7, r0, #0
   29308:	beq	29328 <__assert_fail@plt+0x16684>
   2930c:	mov	r0, r6
   29310:	bl	12b3c <gpg_strerror@plt>
   29314:	mov	r1, r0
   29318:	mov	r0, r9
   2931c:	bl	21cbc <__assert_fail@plt+0xf018>
   29320:	cmp	r6, #0
   29324:	moveq	r6, r7
   29328:	ldr	r0, [r4, #72]	; 0x48
   2932c:	bl	125e4 <gcry_free@plt>
   29330:	ldr	r0, [r4, #48]	; 0x30
   29334:	cmp	r0, #0
   29338:	beq	29350 <__assert_fail@plt+0x166ac>
   2933c:	ldr	r2, [r4, #36]	; 0x24
   29340:	mov	r1, #0
   29344:	bl	129b0 <memset@plt>
   29348:	ldr	r0, [r4, #48]	; 0x30
   2934c:	bl	125e4 <gcry_free@plt>
   29350:	mov	r0, r4
   29354:	bl	125e4 <gcry_free@plt>
   29358:	subs	r4, r5, #0
   2935c:	beq	293d0 <__assert_fail@plt+0x1672c>
   29360:	ldr	r3, [r4]
   29364:	ldr	r5, [r4, #76]	; 0x4c
   29368:	cmp	r3, #2
   2936c:	beq	293a8 <__assert_fail@plt+0x16704>
   29370:	ldr	r3, [r8]
   29374:	cmp	r3, #0
   29378:	beq	292dc <__assert_fail@plt+0x16638>
   2937c:	add	r1, sp, #12
   29380:	mov	r0, r4
   29384:	ldr	r7, [r4, #80]	; 0x50
   29388:	ldr	fp, [r4, #84]	; 0x54
   2938c:	bl	28380 <__assert_fail@plt+0x156dc>
   29390:	mov	r2, fp
   29394:	mov	r1, r7
   29398:	mov	r3, r0
   2939c:	mov	r0, sl
   293a0:	bl	21e08 <__assert_fail@plt+0xf164>
   293a4:	b	292dc <__assert_fail@plt+0x16638>
   293a8:	mov	r0, r4
   293ac:	bl	27d0c <__assert_fail@plt+0x15068>
   293b0:	subs	r6, r0, #0
   293b4:	beq	29370 <__assert_fail@plt+0x166cc>
   293b8:	bl	12b3c <gpg_strerror@plt>
   293bc:	mov	r1, r0
   293c0:	ldr	r0, [pc, #60]	; 29404 <__assert_fail@plt+0x16760>
   293c4:	bl	21cbc <__assert_fail@plt+0xf018>
   293c8:	b	29370 <__assert_fail@plt+0x166cc>
   293cc:	mov	r6, r4
   293d0:	ldr	r3, [pc, #28]	; 293f4 <__assert_fail@plt+0x16750>
   293d4:	ldr	r2, [sp, #44]	; 0x2c
   293d8:	mov	r0, r6
   293dc:	ldr	r3, [r3]
   293e0:	cmp	r2, r3
   293e4:	bne	293f0 <__assert_fail@plt+0x1674c>
   293e8:	add	sp, sp, #52	; 0x34
   293ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293f0:	bl	1262c <__stack_chk_fail@plt>
   293f4:	strdeq	r5, [r4], -r8
   293f8:	muleq	r4, r4, r4
   293fc:	andeq	r4, r3, r4, lsl r8
   29400:	andeq	r4, r3, r0, lsr r8
   29404:	strdeq	r4, [r3], -r0
   29408:	push	{r4, r5, r6, r7, r8, lr}
   2940c:	sub	sp, sp, #16
   29410:	ldr	r8, [pc, #172]	; 294c4 <__assert_fail@plt+0x16820>
   29414:	subs	r7, r0, #0
   29418:	ldr	r3, [r8]
   2941c:	str	r3, [sp, #12]
   29420:	beq	2946c <__assert_fail@plt+0x167c8>
   29424:	ldr	r3, [r7]
   29428:	cmp	r3, #2
   2942c:	beq	2948c <__assert_fail@plt+0x167e8>
   29430:	mov	r4, r7
   29434:	add	r6, sp, #8
   29438:	ldr	r5, [r4, #60]	; 0x3c
   2943c:	ldr	r2, [r4, #76]	; 0x4c
   29440:	cmp	r5, #0
   29444:	moveq	r4, r2
   29448:	beq	29464 <__assert_fail@plt+0x167c0>
   2944c:	ldr	r0, [r4, #64]	; 0x40
   29450:	mov	r3, #0
   29454:	str	r6, [sp]
   29458:	mov	r1, #6
   2945c:	blx	r5
   29460:	ldr	r4, [r4, #76]	; 0x4c
   29464:	cmp	r4, #0
   29468:	bne	29438 <__assert_fail@plt+0x16794>
   2946c:	mov	r0, r7
   29470:	bl	292a8 <__assert_fail@plt+0x16604>
   29474:	ldr	r2, [sp, #12]
   29478:	ldr	r3, [r8]
   2947c:	cmp	r2, r3
   29480:	bne	294c0 <__assert_fail@plt+0x1681c>
   29484:	add	sp, sp, #16
   29488:	pop	{r4, r5, r6, r7, r8, pc}
   2948c:	ldr	r3, [r7, #72]	; 0x48
   29490:	cmp	r3, #0
   29494:	beq	294b0 <__assert_fail@plt+0x1680c>
   29498:	ldrb	r2, [r3]
   2949c:	cmp	r2, #0
   294a0:	beq	29430 <__assert_fail@plt+0x1678c>
   294a4:	mov	r0, r3
   294a8:	bl	12b78 <remove@plt>
   294ac:	b	29430 <__assert_fail@plt+0x1678c>
   294b0:	bl	28da4 <__assert_fail@plt+0x16100>
   294b4:	subs	r3, r0, #0
   294b8:	beq	29430 <__assert_fail@plt+0x1678c>
   294bc:	b	29498 <__assert_fail@plt+0x167f4>
   294c0:	bl	1262c <__stack_chk_fail@plt>
   294c4:	strdeq	r5, [r4], -r8
   294c8:	mov	r1, #8192	; 0x2000
   294cc:	mov	r0, #3
   294d0:	b	28e34 <__assert_fail@plt+0x16190>
   294d4:	push	{r4, r5, r6, lr}
   294d8:	mov	r4, r0
   294dc:	mov	r0, #1
   294e0:	mov	r6, r1
   294e4:	bl	28e34 <__assert_fail@plt+0x16190>
   294e8:	ldr	r3, [r0, #36]	; 0x24
   294ec:	cmp	r3, r6
   294f0:	bne	2952c <__assert_fail@plt+0x16888>
   294f4:	cmp	r6, #0
   294f8:	addne	r5, r4, r6
   294fc:	subne	r5, r5, #1
   29500:	subne	r3, r4, #1
   29504:	rsbne	lr, r4, #1
   29508:	beq	29524 <__assert_fail@plt+0x16880>
   2950c:	add	r2, lr, r3
   29510:	ldrb	ip, [r3, #1]!
   29514:	ldr	r1, [r0, #48]	; 0x30
   29518:	cmp	r3, r5
   2951c:	strb	ip, [r1, r2]
   29520:	bne	2950c <__assert_fail@plt+0x16868>
   29524:	str	r6, [r0, #44]	; 0x2c
   29528:	pop	{r4, r5, r6, pc}
   2952c:	ldr	r3, [pc, #12]	; 29540 <__assert_fail@plt+0x1689c>
   29530:	ldr	r2, [pc, #12]	; 29544 <__assert_fail@plt+0x168a0>
   29534:	ldr	r1, [pc, #12]	; 29548 <__assert_fail@plt+0x168a4>
   29538:	ldr	r0, [pc, #12]	; 2954c <__assert_fail@plt+0x168a8>
   2953c:	bl	12ca4 <__assert_fail@plt>
   29540:	andeq	r4, r3, r8, ror #2
   29544:	andeq	r0, r0, sl, asr #9
   29548:			; <UNDEFINED> instruction: 0x000342b8
   2954c:	andeq	r4, r3, r4, asr r8
   29550:	cmp	r0, #0
   29554:	beq	2958c <__assert_fail@plt+0x168e8>
   29558:	ldrb	r3, [r0]
   2955c:	cmp	r3, #45	; 0x2d
   29560:	bne	29570 <__assert_fail@plt+0x168cc>
   29564:	ldrb	r3, [r0, #1]
   29568:	cmp	r3, #0
   2956c:	beq	2958c <__assert_fail@plt+0x168e8>
   29570:	push	{r4, lr}
   29574:	mov	r2, #1
   29578:	mov	r1, #0
   2957c:	bl	22750 <__assert_fail@plt+0xfaac>
   29580:	adds	r0, r0, #1
   29584:	movne	r0, #1
   29588:	pop	{r4, pc}
   2958c:	mov	r0, #1
   29590:	bx	lr
   29594:	push	{lr}		; (str lr, [sp, #-4]!)
   29598:	sub	sp, sp, #12
   2959c:	mov	r2, #0
   295a0:	str	r2, [sp]
   295a4:	ldr	r3, [pc, #12]	; 295b8 <__assert_fail@plt+0x16914>
   295a8:	mov	r1, #1
   295ac:	bl	28fc4 <__assert_fail@plt+0x16320>
   295b0:	add	sp, sp, #12
   295b4:	pop	{pc}		; (ldr pc, [sp], #4)
   295b8:	andeq	r0, r3, r0, lsl ip
   295bc:	push	{lr}		; (str lr, [sp, #-4]!)
   295c0:	sub	sp, sp, #12
   295c4:	ldr	r3, [pc, #20]	; 295e0 <__assert_fail@plt+0x1693c>
   295c8:	str	r1, [sp]
   295cc:	mov	r2, #2
   295d0:	mov	r1, #1
   295d4:	bl	28fc4 <__assert_fail@plt+0x16320>
   295d8:	add	sp, sp, #12
   295dc:	pop	{pc}		; (ldr pc, [sp], #4)
   295e0:	andeq	r1, r3, r4, ror r7
   295e4:	push	{lr}		; (str lr, [sp, #-4]!)
   295e8:	sub	sp, sp, #12
   295ec:	mov	r1, #0
   295f0:	str	r1, [sp]
   295f4:	ldr	r3, [pc, #12]	; 29608 <__assert_fail@plt+0x16964>
   295f8:	mov	r2, #2
   295fc:	bl	28fc4 <__assert_fail@plt+0x16320>
   29600:	add	sp, sp, #12
   29604:	pop	{pc}		; (ldr pc, [sp], #4)
   29608:	andeq	r4, r3, r8, ror #16
   2960c:	mov	r2, #0
   29610:	b	28ecc <__assert_fail@plt+0x16228>
   29614:	mov	r2, #1
   29618:	b	28ecc <__assert_fail@plt+0x16228>
   2961c:	mov	r3, r1
   29620:	push	{r4, r5, r6, r7, r8, lr}
   29624:	mov	r1, #119	; 0x77
   29628:	sub	sp, sp, #8
   2962c:	mov	r6, r0
   29630:	mov	r0, r3
   29634:	mov	r7, r2
   29638:	bl	128fc <strchr@plt>
   2963c:	mov	r1, #8192	; 0x2000
   29640:	cmp	r0, #0
   29644:	movne	r0, #2
   29648:	moveq	r0, #0
   2964c:	bl	28e34 <__assert_fail@plt+0x16190>
   29650:	mov	r5, r0
   29654:	mov	r0, #54	; 0x36
   29658:	bl	12458 <gcry_malloc@plt>
   2965c:	mov	ip, #1
   29660:	mov	r1, ip
   29664:	ldr	r3, [pc, #120]	; 296e4 <__assert_fail@plt+0x16a40>
   29668:	mvn	r2, #0
   2966c:	str	r6, [sp]
   29670:	mov	r4, r0
   29674:	add	r8, r0, #20
   29678:	mov	r0, r8
   2967c:	str	r6, [r4]
   29680:	str	r7, [r4, #4]
   29684:	str	ip, [r4, #16]
   29688:	bl	1298c <__sprintf_chk@plt>
   2968c:	ldr	r1, [pc, #84]	; 296e8 <__assert_fail@plt+0x16a44>
   29690:	mov	r3, #0
   29694:	ldr	r2, [pc, #80]	; 296ec <__assert_fail@plt+0x16a48>
   29698:	ldr	r1, [r1]
   2969c:	str	r4, [r5, #64]	; 0x40
   296a0:	cmp	r1, r3
   296a4:	str	r2, [r5, #60]	; 0x3c
   296a8:	str	r3, [r4, #12]
   296ac:	str	r3, [r4, #8]
   296b0:	beq	296d8 <__assert_fail@plt+0x16a34>
   296b4:	ldr	r0, [pc, #52]	; 296f0 <__assert_fail@plt+0x16a4c>
   296b8:	cmp	r7, #0
   296bc:	ldr	r1, [r5, #80]	; 0x50
   296c0:	ldr	r2, [r5, #84]	; 0x54
   296c4:	ldr	r3, [pc, #40]	; 296f4 <__assert_fail@plt+0x16a50>
   296c8:	str	r8, [sp]
   296cc:	movne	r3, r0
   296d0:	ldr	r0, [pc, #32]	; 296f8 <__assert_fail@plt+0x16a54>
   296d4:	bl	21e08 <__assert_fail@plt+0xf164>
   296d8:	mov	r0, r5
   296dc:	add	sp, sp, #8
   296e0:	pop	{r4, r5, r6, r7, r8, pc}
   296e4:	andeq	r4, r3, ip, ror #16
   296e8:	muleq	r4, r4, r4
   296ec:	andeq	r8, r2, r8, asr #2
   296f0:	andeq	r4, r3, r4, asr #14
   296f4:	andeq	r1, r3, r8, ror #15
   296f8:	andeq	r4, r3, r4, ror r8
   296fc:	b	2960c <__assert_fail@plt+0x16968>
   29700:	push	{r4, r5, r6, r7, r8, lr}
   29704:	sub	sp, sp, #48	; 0x30
   29708:	ldr	r4, [pc, #212]	; 297e4 <__assert_fail@plt+0x16b40>
   2970c:	cmp	r1, #1
   29710:	ldr	ip, [r4]
   29714:	str	ip, [sp, #44]	; 0x2c
   29718:	beq	29738 <__assert_fail@plt+0x16a94>
   2971c:	bl	28b34 <__assert_fail@plt+0x15e90>
   29720:	ldr	r2, [sp, #44]	; 0x2c
   29724:	ldr	r3, [r4]
   29728:	cmp	r2, r3
   2972c:	bne	297e0 <__assert_fail@plt+0x16b3c>
   29730:	add	sp, sp, #48	; 0x30
   29734:	pop	{r4, r5, r6, r7, r8, pc}
   29738:	ldr	r3, [pc, #168]	; 297e8 <__assert_fail@plt+0x16b44>
   2973c:	mov	r5, r0
   29740:	mov	r6, r2
   29744:	ldr	r3, [r3]
   29748:	cmp	r3, #0
   2974c:	bne	29790 <__assert_fail@plt+0x16aec>
   29750:	cmp	r5, #0
   29754:	beq	29788 <__assert_fail@plt+0x16ae4>
   29758:	ldr	r2, [r5, #76]	; 0x4c
   2975c:	cmp	r2, #0
   29760:	bne	2976c <__assert_fail@plt+0x16ac8>
   29764:	b	297c8 <__assert_fail@plt+0x16b24>
   29768:	mov	r2, r3
   2976c:	ldr	r3, [r2, #76]	; 0x4c
   29770:	cmp	r3, #0
   29774:	bne	29768 <__assert_fail@plt+0x16ac4>
   29778:	ldr	r3, [pc, #108]	; 297ec <__assert_fail@plt+0x16b48>
   2977c:	ldr	r1, [r2, #60]	; 0x3c
   29780:	cmp	r1, r3
   29784:	beq	297d0 <__assert_fail@plt+0x16b2c>
   29788:	mvn	r0, #0
   2978c:	b	29720 <__assert_fail@plt+0x16a7c>
   29790:	cmp	r0, #0
   29794:	mvneq	r7, #0
   29798:	add	r1, sp, #12
   2979c:	ldrne	r7, [r0, #80]	; 0x50
   297a0:	ldrne	r8, [r0, #84]	; 0x54
   297a4:	moveq	r8, r7
   297a8:	bl	28380 <__assert_fail@plt+0x156dc>
   297ac:	str	r6, [sp]
   297b0:	mov	r2, r8
   297b4:	mov	r1, r7
   297b8:	mov	r3, r0
   297bc:	ldr	r0, [pc, #44]	; 297f0 <__assert_fail@plt+0x16b4c>
   297c0:	bl	21e08 <__assert_fail@plt+0xf164>
   297c4:	b	29750 <__assert_fail@plt+0x16aac>
   297c8:	mov	r2, r5
   297cc:	b	29778 <__assert_fail@plt+0x16ad4>
   297d0:	ldr	r3, [r2, #64]	; 0x40
   297d4:	mov	r0, #0
   297d8:	str	r6, [r3, #4]
   297dc:	b	29720 <__assert_fail@plt+0x16a7c>
   297e0:	bl	1262c <__stack_chk_fail@plt>
   297e4:	strdeq	r5, [r4], -r8
   297e8:	muleq	r4, r4, r4
   297ec:	andeq	r7, r2, r8, lsr #28
   297f0:	muleq	r3, r0, r8
   297f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   297f8:	sub	sp, sp, #48	; 0x30
   297fc:	ldr	r7, [pc, #492]	; 299f0 <__assert_fail@plt+0x16d4c>
   29800:	ldr	lr, [r0]
   29804:	mov	ip, #0
   29808:	cmp	lr, #2
   2980c:	ldr	lr, [r7]
   29810:	mov	r4, r0
   29814:	mov	r6, r1
   29818:	mov	r9, r2
   2981c:	mov	r8, r3
   29820:	str	lr, [sp, #44]	; 0x2c
   29824:	str	ip, [sp, #8]
   29828:	beq	299b0 <__assert_fail@plt+0x16d0c>
   2982c:	ldr	r3, [r4, #84]	; 0x54
   29830:	cmp	r3, #63	; 0x3f
   29834:	bgt	299c8 <__assert_fail@plt+0x16d24>
   29838:	mov	r0, #88	; 0x58
   2983c:	bl	12410 <gcry_xmalloc@plt>
   29840:	mov	r2, #88	; 0x58
   29844:	mov	r1, r4
   29848:	mov	r5, r0
   2984c:	bl	125b4 <memcpy@plt>
   29850:	ldr	r0, [r4, #72]	; 0x48
   29854:	cmp	r0, #0
   29858:	beq	29860 <__assert_fail@plt+0x16bbc>
   2985c:	bl	12a40 <gcry_xstrdup@plt>
   29860:	ldr	r2, [r4]
   29864:	mov	r3, #0
   29868:	cmp	r2, #3
   2986c:	str	r0, [r5, #72]	; 0x48
   29870:	str	r3, [r4, #60]	; 0x3c
   29874:	str	r3, [r4, #64]	; 0x40
   29878:	str	r3, [r4, #68]	; 0x44
   2987c:	str	r3, [r4, #52]	; 0x34
   29880:	beq	2995c <__assert_fail@plt+0x16cb8>
   29884:	cmp	r2, #1
   29888:	moveq	r2, #8192	; 0x2000
   2988c:	ldrne	r0, [r4, #36]	; 0x24
   29890:	moveq	r0, r2
   29894:	streq	r3, [r4]
   29898:	streq	r2, [r4, #36]	; 0x24
   2989c:	bl	12410 <gcry_xmalloc@plt>
   298a0:	ldr	sl, [pc, #332]	; 299f4 <__assert_fail@plt+0x16d50>
   298a4:	ldr	r3, [r5, #24]
   298a8:	ldr	r1, [r5, #16]
   298ac:	ldr	r2, [r5, #20]
   298b0:	adds	r1, r3, r1
   298b4:	ldr	r3, [r5, #28]
   298b8:	str	r5, [r4, #76]	; 0x4c
   298bc:	ldr	ip, [sl]
   298c0:	ldr	r5, [r5, #84]	; 0x54
   298c4:	adc	r3, r3, r2
   298c8:	str	r9, [r4, #64]	; 0x40
   298cc:	str	r8, [r4, #68]	; 0x44
   298d0:	mov	r9, #0
   298d4:	mov	r8, #0
   298d8:	add	r5, r5, #1
   298dc:	str	r3, [r4, #28]
   298e0:	cmp	ip, #0
   298e4:	mov	r3, #0
   298e8:	str	r6, [r4, #60]	; 0x3c
   298ec:	str	r1, [r4, #24]
   298f0:	str	r5, [r4, #84]	; 0x54
   298f4:	strd	r8, [r4, #16]
   298f8:	strd	r8, [r4, #8]
   298fc:	str	r3, [r4, #44]	; 0x2c
   29900:	str	r3, [r4, #40]	; 0x28
   29904:	str	r3, [r4, #32]
   29908:	str	r0, [r4, #48]	; 0x30
   2990c:	bne	29970 <__assert_fail@plt+0x16ccc>
   29910:	cmp	r6, #0
   29914:	moveq	r5, r6
   29918:	beq	29940 <__assert_fail@plt+0x16c9c>
   2991c:	add	r3, sp, #8
   29920:	str	r3, [sp]
   29924:	mov	r1, #1
   29928:	mov	r3, #0
   2992c:	ldr	r2, [r4, #76]	; 0x4c
   29930:	ldr	r0, [r4, #64]	; 0x40
   29934:	blx	r6
   29938:	subs	r5, r0, #0
   2993c:	bne	299d8 <__assert_fail@plt+0x16d34>
   29940:	ldr	r2, [sp, #44]	; 0x2c
   29944:	ldr	r3, [r7]
   29948:	mov	r0, r5
   2994c:	cmp	r2, r3
   29950:	bne	299ec <__assert_fail@plt+0x16d48>
   29954:	add	sp, sp, #48	; 0x30
   29958:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2995c:	mov	r3, #2
   29960:	mov	r0, #8192	; 0x2000
   29964:	str	r3, [r4]
   29968:	str	r0, [r4, #36]	; 0x24
   2996c:	b	2989c <__assert_fail@plt+0x16bf8>
   29970:	add	r1, sp, #12
   29974:	mov	r0, r4
   29978:	ldr	r6, [r4, #80]	; 0x50
   2997c:	bl	28380 <__assert_fail@plt+0x156dc>
   29980:	mov	r2, r5
   29984:	mov	r1, r6
   29988:	mov	r3, r0
   2998c:	ldr	r0, [pc, #100]	; 299f8 <__assert_fail@plt+0x16d54>
   29990:	bl	21e08 <__assert_fail@plt+0xf164>
   29994:	ldr	r3, [sl]
   29998:	cmp	r3, #0
   2999c:	beq	299a8 <__assert_fail@plt+0x16d04>
   299a0:	mov	r0, r4
   299a4:	bl	28400 <__assert_fail@plt+0x1575c>
   299a8:	ldr	r6, [r4, #60]	; 0x3c
   299ac:	b	29910 <__assert_fail@plt+0x16c6c>
   299b0:	bl	27d0c <__assert_fail@plt+0x15068>
   299b4:	subs	r5, r0, #0
   299b8:	bne	29940 <__assert_fail@plt+0x16c9c>
   299bc:	ldr	r3, [r4, #84]	; 0x54
   299c0:	cmp	r3, #63	; 0x3f
   299c4:	ble	29838 <__assert_fail@plt+0x16b94>
   299c8:	ldr	r0, [pc, #44]	; 299fc <__assert_fail@plt+0x16d58>
   299cc:	bl	21cbc <__assert_fail@plt+0xf018>
   299d0:	mov	r5, #89	; 0x59
   299d4:	b	29940 <__assert_fail@plt+0x16c9c>
   299d8:	bl	12b3c <gpg_strerror@plt>
   299dc:	mov	r1, r0
   299e0:	ldr	r0, [pc, #24]	; 29a00 <__assert_fail@plt+0x16d5c>
   299e4:	bl	21cbc <__assert_fail@plt+0xf018>
   299e8:	b	29940 <__assert_fail@plt+0x16c9c>
   299ec:	bl	1262c <__stack_chk_fail@plt>
   299f0:	strdeq	r5, [r4], -r8
   299f4:	muleq	r4, r4, r4
   299f8:	andeq	r4, r3, r8, ror #17
   299fc:			; <UNDEFINED> instruction: 0x000348b8
   29a00:	andeq	r4, r3, r0, lsl #18
   29a04:	mov	r3, #0
   29a08:	b	297f4 <__assert_fail@plt+0x16b50>
   29a0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29a10:	mov	r6, r1
   29a14:	ldr	sl, [pc, #596]	; 29c70 <__assert_fail@plt+0x16fcc>
   29a18:	ldr	r9, [pc, #596]	; 29c74 <__assert_fail@plt+0x16fd0>
   29a1c:	sub	sp, sp, #48	; 0x30
   29a20:	ldr	r3, [sl]
   29a24:	ldr	r1, [r9]
   29a28:	cmp	r3, #0
   29a2c:	mov	r3, #0
   29a30:	mov	r8, r2
   29a34:	str	r1, [sp, #44]	; 0x2c
   29a38:	str	r3, [sp, #8]
   29a3c:	mov	r7, r0
   29a40:	bne	29b70 <__assert_fail@plt+0x16ecc>
   29a44:	ldr	r2, [r7]
   29a48:	bic	r3, r2, #2
   29a4c:	cmp	r3, #1
   29a50:	bne	29a80 <__assert_fail@plt+0x16ddc>
   29a54:	ldr	r3, [r7, #76]	; 0x4c
   29a58:	cmp	r3, #0
   29a5c:	bne	29c3c <__assert_fail@plt+0x16f98>
   29a60:	mov	r5, #0
   29a64:	ldr	r2, [sp, #44]	; 0x2c
   29a68:	ldr	r3, [r9]
   29a6c:	mov	r0, r5
   29a70:	cmp	r2, r3
   29a74:	bne	29c50 <__assert_fail@plt+0x16fac>
   29a78:	add	sp, sp, #48	; 0x30
   29a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29a80:	ldr	r5, [r7, #60]	; 0x3c
   29a84:	cmp	r5, #0
   29a88:	movne	r4, r7
   29a8c:	bne	29aec <__assert_fail@plt+0x16e48>
   29a90:	ldr	r4, [r7, #76]	; 0x4c
   29a94:	cmp	r4, #0
   29a98:	beq	29c54 <__assert_fail@plt+0x16fb0>
   29a9c:	ldr	r0, [r7, #48]	; 0x30
   29aa0:	bl	125e4 <gcry_free@plt>
   29aa4:	ldr	r0, [r7, #72]	; 0x48
   29aa8:	bl	125e4 <gcry_free@plt>
   29aac:	mov	r0, r7
   29ab0:	mov	r2, #88	; 0x58
   29ab4:	mov	r1, r4
   29ab8:	bl	125b4 <memcpy@plt>
   29abc:	mov	r0, r4
   29ac0:	bl	125e4 <gcry_free@plt>
   29ac4:	b	29a64 <__assert_fail@plt+0x16dc0>
   29ac8:	cmp	r8, #0
   29acc:	beq	29b08 <__assert_fail@plt+0x16e64>
   29ad0:	ldr	r3, [r4, #64]	; 0x40
   29ad4:	cmp	r3, r8
   29ad8:	beq	29b08 <__assert_fail@plt+0x16e64>
   29adc:	ldr	r4, [r4, #76]	; 0x4c
   29ae0:	cmp	r4, #0
   29ae4:	beq	29b00 <__assert_fail@plt+0x16e5c>
   29ae8:	ldr	r5, [r4, #60]	; 0x3c
   29aec:	cmp	r6, r5
   29af0:	beq	29ac8 <__assert_fail@plt+0x16e24>
   29af4:	ldr	r4, [r4, #76]	; 0x4c
   29af8:	cmp	r4, #0
   29afc:	bne	29ae8 <__assert_fail@plt+0x16e44>
   29b00:	ldr	r0, [pc, #368]	; 29c78 <__assert_fail@plt+0x16fd4>
   29b04:	bl	21dc4 <__assert_fail@plt+0xf120>
   29b08:	cmp	r2, #2
   29b0c:	beq	29c00 <__assert_fail@plt+0x16f5c>
   29b10:	cmp	r5, #0
   29b14:	ldr	r0, [r4, #64]	; 0x40
   29b18:	beq	29b40 <__assert_fail@plt+0x16e9c>
   29b1c:	add	r3, sp, #8
   29b20:	ldr	r2, [r4, #76]	; 0x4c
   29b24:	mov	r1, #2
   29b28:	str	r3, [sp]
   29b2c:	mov	r3, #0
   29b30:	blx	r5
   29b34:	subs	r5, r0, #0
   29b38:	bne	29c28 <__assert_fail@plt+0x16f84>
   29b3c:	ldr	r0, [r4, #64]	; 0x40
   29b40:	cmp	r0, #0
   29b44:	beq	29b54 <__assert_fail@plt+0x16eb0>
   29b48:	ldr	r3, [r4, #68]	; 0x44
   29b4c:	cmp	r3, #0
   29b50:	bne	29b9c <__assert_fail@plt+0x16ef8>
   29b54:	cmp	r7, r4
   29b58:	ldr	r4, [r4, #76]	; 0x4c
   29b5c:	beq	29bac <__assert_fail@plt+0x16f08>
   29b60:	cmp	r4, #0
   29b64:	beq	29b94 <__assert_fail@plt+0x16ef0>
   29b68:	ldr	r0, [pc, #268]	; 29c7c <__assert_fail@plt+0x16fd8>
   29b6c:	bl	21dc4 <__assert_fail@plt+0xf120>
   29b70:	add	r1, sp, #12
   29b74:	ldrd	r4, [r0, #80]	; 0x50
   29b78:	bl	28380 <__assert_fail@plt+0x156dc>
   29b7c:	mov	r2, r5
   29b80:	mov	r1, r4
   29b84:	mov	r3, r0
   29b88:	ldr	r0, [pc, #240]	; 29c80 <__assert_fail@plt+0x16fdc>
   29b8c:	bl	21e08 <__assert_fail@plt+0xf164>
   29b90:	b	29a44 <__assert_fail@plt+0x16da0>
   29b94:	ldr	r0, [pc, #232]	; 29c84 <__assert_fail@plt+0x16fe0>
   29b98:	bl	21dc4 <__assert_fail@plt+0xf120>
   29b9c:	bl	125e4 <gcry_free@plt>
   29ba0:	mov	r3, #0
   29ba4:	str	r3, [r4, #64]	; 0x40
   29ba8:	b	29b54 <__assert_fail@plt+0x16eb0>
   29bac:	cmp	r4, #0
   29bb0:	beq	29c68 <__assert_fail@plt+0x16fc4>
   29bb4:	ldr	r0, [r7, #48]	; 0x30
   29bb8:	bl	125e4 <gcry_free@plt>
   29bbc:	ldr	r0, [r7, #72]	; 0x48
   29bc0:	bl	125e4 <gcry_free@plt>
   29bc4:	mov	r2, #88	; 0x58
   29bc8:	mov	r1, r4
   29bcc:	mov	r0, r7
   29bd0:	bl	125b4 <memcpy@plt>
   29bd4:	mov	r0, r4
   29bd8:	bl	125e4 <gcry_free@plt>
   29bdc:	ldr	r3, [sl]
   29be0:	cmp	r3, #0
   29be4:	beq	29a60 <__assert_fail@plt+0x16dbc>
   29be8:	ldr	r2, [r7, #84]	; 0x54
   29bec:	ldr	r1, [r7, #80]	; 0x50
   29bf0:	ldr	r0, [pc, #144]	; 29c88 <__assert_fail@plt+0x16fe4>
   29bf4:	bl	21e08 <__assert_fail@plt+0xf164>
   29bf8:	mov	r5, #0
   29bfc:	b	29a64 <__assert_fail@plt+0x16dc0>
   29c00:	mov	r0, r4
   29c04:	bl	27d0c <__assert_fail@plt+0x15068>
   29c08:	subs	r5, r0, #0
   29c0c:	ldreq	r5, [r4, #60]	; 0x3c
   29c10:	beq	29b10 <__assert_fail@plt+0x16e6c>
   29c14:	bl	12b3c <gpg_strerror@plt>
   29c18:	mov	r1, r0
   29c1c:	ldr	r0, [pc, #104]	; 29c8c <__assert_fail@plt+0x16fe8>
   29c20:	bl	21cbc <__assert_fail@plt+0xf018>
   29c24:	b	29a64 <__assert_fail@plt+0x16dc0>
   29c28:	bl	12b3c <gpg_strerror@plt>
   29c2c:	mov	r1, r0
   29c30:	ldr	r0, [pc, #88]	; 29c90 <__assert_fail@plt+0x16fec>
   29c34:	bl	21cbc <__assert_fail@plt+0xf018>
   29c38:	b	29a64 <__assert_fail@plt+0x16dc0>
   29c3c:	ldr	r3, [pc, #80]	; 29c94 <__assert_fail@plt+0x16ff0>
   29c40:	ldr	r2, [pc, #80]	; 29c98 <__assert_fail@plt+0x16ff4>
   29c44:	ldr	r1, [pc, #80]	; 29c9c <__assert_fail@plt+0x16ff8>
   29c48:	ldr	r0, [pc, #80]	; 29ca0 <__assert_fail@plt+0x16ffc>
   29c4c:	bl	12ca4 <__assert_fail@plt>
   29c50:	bl	1262c <__stack_chk_fail@plt>
   29c54:	ldr	r3, [pc, #56]	; 29c94 <__assert_fail@plt+0x16ff0>
   29c58:	mov	r2, #1680	; 0x690
   29c5c:	ldr	r1, [pc, #56]	; 29c9c <__assert_fail@plt+0x16ff8>
   29c60:	ldr	r0, [pc, #60]	; 29ca4 <__assert_fail@plt+0x17000>
   29c64:	bl	12ca4 <__assert_fail@plt>
   29c68:	ldr	r0, [pc, #56]	; 29ca8 <__assert_fail@plt+0x17004>
   29c6c:	bl	21dc4 <__assert_fail@plt+0xf120>
   29c70:	muleq	r4, r4, r4
   29c74:	strdeq	r5, [r4], -r8
   29c78:	andeq	r4, r3, r0, lsr #20
   29c7c:	andeq	r4, r3, ip, ror #19
   29c80:	andeq	r4, r3, ip, lsl r9
   29c84:	andeq	r4, r3, r0, asr #19
   29c88:	andeq	r4, r3, r4, lsr #19
   29c8c:	andeq	r4, r3, r4, asr #18
   29c90:	andeq	r4, r3, r0, ror r5
   29c94:	andeq	r4, r3, r0, lsl #3
   29c98:	andeq	r0, r0, sl, lsl #13
   29c9c:			; <UNDEFINED> instruction: 0x000342b8
   29ca0:	andeq	r4, r3, r4, lsr r9
   29ca4:	andeq	r4, r3, r0, asr #18
   29ca8:	andeq	r4, r3, r4, ror r9
   29cac:	ldr	r3, [r0]
   29cb0:	push	{r4, r6, r7, lr}
   29cb4:	sub	r3, r3, #2
   29cb8:	cmp	r3, #1
   29cbc:	bls	29d80 <__assert_fail@plt+0x170dc>
   29cc0:	ldr	r3, [r0, #40]	; 0x28
   29cc4:	ldr	r2, [r0, #44]	; 0x2c
   29cc8:	mov	r4, r0
   29ccc:	cmp	r3, r2
   29cd0:	bhi	29d6c <__assert_fail@plt+0x170c8>
   29cd4:	ldrd	r6, [r0, #8]
   29cd8:	orrs	r1, r6, r7
   29cdc:	bne	29d1c <__assert_fail@plt+0x17078>
   29ce0:	cmp	r3, r2
   29ce4:	bcs	29d34 <__assert_fail@plt+0x17090>
   29ce8:	ldr	r0, [r4, #48]	; 0x30
   29cec:	add	r1, r3, #1
   29cf0:	str	r1, [r4, #40]	; 0x28
   29cf4:	ldrb	r0, [r0, r3]
   29cf8:	cmp	r2, r1
   29cfc:	bcc	29d58 <__assert_fail@plt+0x170b4>
   29d00:	ldr	r3, [r4, #16]
   29d04:	ldr	r2, [r4, #20]
   29d08:	adds	r3, r3, #1
   29d0c:	adc	r2, r2, #0
   29d10:	str	r3, [r4, #16]
   29d14:	str	r2, [r4, #20]
   29d18:	pop	{r4, r6, r7, pc}
   29d1c:	ldrd	r0, [r0, #16]
   29d20:	cmp	r0, r6
   29d24:	sbcs	r1, r1, r7
   29d28:	blt	29ce0 <__assert_fail@plt+0x1703c>
   29d2c:	mvn	r0, #0
   29d30:	pop	{r4, r6, r7, pc}
   29d34:	mov	r2, #1
   29d38:	mov	r1, r2
   29d3c:	mov	r0, r4
   29d40:	bl	28490 <__assert_fail@plt+0x157ec>
   29d44:	cmn	r0, #1
   29d48:	beq	29d2c <__assert_fail@plt+0x17088>
   29d4c:	ldr	r1, [r4, #40]	; 0x28
   29d50:	ldr	r2, [r4, #44]	; 0x2c
   29d54:	b	29cf8 <__assert_fail@plt+0x17054>
   29d58:	ldr	r3, [pc, #40]	; 29d88 <__assert_fail@plt+0x170e4>
   29d5c:	ldr	r2, [pc, #40]	; 29d8c <__assert_fail@plt+0x170e8>
   29d60:	ldr	r1, [pc, #40]	; 29d90 <__assert_fail@plt+0x170ec>
   29d64:	ldr	r0, [pc, #40]	; 29d94 <__assert_fail@plt+0x170f0>
   29d68:	bl	12ca4 <__assert_fail@plt>
   29d6c:	ldr	r3, [pc, #20]	; 29d88 <__assert_fail@plt+0x170e4>
   29d70:	ldr	r2, [pc, #32]	; 29d98 <__assert_fail@plt+0x170f4>
   29d74:	ldr	r1, [pc, #20]	; 29d90 <__assert_fail@plt+0x170ec>
   29d78:	ldr	r0, [pc, #20]	; 29d94 <__assert_fail@plt+0x170f0>
   29d7c:	bl	12ca4 <__assert_fail@plt>
   29d80:	ldr	r0, [pc, #20]	; 29d9c <__assert_fail@plt+0x170f8>
   29d84:	bl	21dc4 <__assert_fail@plt+0xf120>
   29d88:	muleq	r3, r4, r1
   29d8c:			; <UNDEFINED> instruction: 0x000007b9
   29d90:			; <UNDEFINED> instruction: 0x000342b8
   29d94:	andeq	r4, r3, r8, asr r4
   29d98:	andeq	r0, r0, sp, lsr #15
   29d9c:	andeq	r4, r3, r0, asr sl
   29da0:	ldr	r3, [r0]
   29da4:	push	{r4, r5, r6, r7, r8, lr}
   29da8:	sub	r3, r3, #2
   29dac:	cmp	r3, #1
   29db0:	bls	29ee8 <__assert_fail@plt+0x17244>
   29db4:	mov	r6, r2
   29db8:	ldrd	r2, [r0, #8]
   29dbc:	mov	r7, r0
   29dc0:	mov	r5, r1
   29dc4:	orrs	r3, r2, r3
   29dc8:	beq	29e10 <__assert_fail@plt+0x1716c>
   29dcc:	cmp	r6, #0
   29dd0:	beq	29ee0 <__assert_fail@plt+0x1723c>
   29dd4:	mov	r4, #0
   29dd8:	b	29df0 <__assert_fail@plt+0x1714c>
   29ddc:	cmp	r5, #0
   29de0:	add	r4, r4, #1
   29de4:	strbne	r0, [r5], #1
   29de8:	cmp	r4, r6
   29dec:	beq	29e2c <__assert_fail@plt+0x17188>
   29df0:	mov	r0, r7
   29df4:	bl	29cac <__assert_fail@plt+0x17008>
   29df8:	cmn	r0, #1
   29dfc:	bne	29ddc <__assert_fail@plt+0x17138>
   29e00:	cmp	r4, #0
   29e04:	bne	29e2c <__assert_fail@plt+0x17188>
   29e08:	mvn	r4, #0
   29e0c:	b	29e2c <__assert_fail@plt+0x17188>
   29e10:	mov	r4, #0
   29e14:	cmp	r6, r4
   29e18:	bhi	29e34 <__assert_fail@plt+0x17190>
   29e1c:	ldrd	r2, [r7, #16]
   29e20:	adds	r0, r2, r4
   29e24:	adc	r1, r3, r4, asr #31
   29e28:	strd	r0, [r7, #16]
   29e2c:	mov	r0, r4
   29e30:	pop	{r4, r5, r6, r7, r8, pc}
   29e34:	ldr	r1, [r7, #40]	; 0x28
   29e38:	ldr	r8, [r7, #44]	; 0x2c
   29e3c:	cmp	r1, r8
   29e40:	bcs	29e94 <__assert_fail@plt+0x171f0>
   29e44:	sub	r3, r8, r1
   29e48:	sub	r8, r6, r4
   29e4c:	cmp	r8, r3
   29e50:	movcs	r8, r3
   29e54:	cmp	r5, #0
   29e58:	add	r4, r8, r4
   29e5c:	addeq	r8, r8, r1
   29e60:	streq	r8, [r7, #40]	; 0x28
   29e64:	beq	29e8c <__assert_fail@plt+0x171e8>
   29e68:	ldr	r3, [r7, #48]	; 0x30
   29e6c:	mov	r2, r8
   29e70:	add	r1, r3, r1
   29e74:	mov	r0, r5
   29e78:	bl	125b4 <memcpy@plt>
   29e7c:	ldr	r3, [r7, #40]	; 0x28
   29e80:	add	r5, r5, r8
   29e84:	add	r8, r3, r8
   29e88:	str	r8, [r7, #40]	; 0x28
   29e8c:	cmp	r4, r6
   29e90:	bcs	29e1c <__assert_fail@plt+0x17178>
   29e94:	mov	r2, #1
   29e98:	mov	r1, r2
   29e9c:	mov	r0, r7
   29ea0:	bl	28490 <__assert_fail@plt+0x157ec>
   29ea4:	cmn	r0, #1
   29ea8:	beq	29ec4 <__assert_fail@plt+0x17220>
   29eac:	cmp	r5, #0
   29eb0:	add	r4, r4, #1
   29eb4:	strbne	r0, [r5], #1
   29eb8:	cmp	r6, r4
   29ebc:	bhi	29e14 <__assert_fail@plt+0x17170>
   29ec0:	b	29e1c <__assert_fail@plt+0x17178>
   29ec4:	ldrd	r2, [r7, #16]
   29ec8:	adds	r0, r2, r4
   29ecc:	adc	r1, r3, r4, asr #31
   29ed0:	cmp	r4, #0
   29ed4:	strd	r0, [r7, #16]
   29ed8:	bne	29e2c <__assert_fail@plt+0x17188>
   29edc:	b	29e08 <__assert_fail@plt+0x17164>
   29ee0:	mov	r4, r6
   29ee4:	b	29e2c <__assert_fail@plt+0x17188>
   29ee8:	ldr	r0, [pc]	; 29ef0 <__assert_fail@plt+0x1724c>
   29eec:	bl	21dc4 <__assert_fail@plt+0xf120>
   29ef0:	andeq	r4, r3, r0, lsl #21
   29ef4:	push	{r4, r5, r6, r7, r8, lr}
   29ef8:	subs	r5, r2, #0
   29efc:	beq	29fcc <__assert_fail@plt+0x17328>
   29f00:	ldr	r3, [r0]
   29f04:	mov	r4, r0
   29f08:	cmp	r3, #1
   29f0c:	bhi	29fe0 <__assert_fail@plt+0x1733c>
   29f10:	ldr	r2, [r0, #36]	; 0x24
   29f14:	mov	r6, r1
   29f18:	ldr	r3, [r0, #44]	; 0x2c
   29f1c:	ldr	r1, [r0, #40]	; 0x28
   29f20:	cmp	r5, r2
   29f24:	movcs	r5, r2
   29f28:	sub	r3, r3, r1
   29f2c:	cmp	r3, r5
   29f30:	bcs	29f7c <__assert_fail@plt+0x172d8>
   29f34:	mov	r7, #0
   29f38:	b	29f58 <__assert_fail@plt+0x172b4>
   29f3c:	ldr	r3, [r4, #40]	; 0x28
   29f40:	cmp	r3, #1
   29f44:	bne	29fb8 <__assert_fail@plt+0x17314>
   29f48:	ldr	r3, [r4, #44]	; 0x2c
   29f4c:	str	r7, [r4, #40]	; 0x28
   29f50:	cmp	r3, r5
   29f54:	bcs	29fa8 <__assert_fail@plt+0x17304>
   29f58:	mov	r2, r5
   29f5c:	mov	r1, #0
   29f60:	mov	r0, r4
   29f64:	bl	28490 <__assert_fail@plt+0x157ec>
   29f68:	cmn	r0, #1
   29f6c:	bne	29f3c <__assert_fail@plt+0x17298>
   29f70:	ldr	r1, [r4, #40]	; 0x28
   29f74:	ldr	r3, [r4, #44]	; 0x2c
   29f78:	sub	r3, r3, r1
   29f7c:	cmp	r3, r5
   29f80:	movcc	r5, r3
   29f84:	cmp	r5, #0
   29f88:	beq	29fb0 <__assert_fail@plt+0x1730c>
   29f8c:	ldr	r3, [r4, #48]	; 0x30
   29f90:	mov	r0, r6
   29f94:	add	r1, r3, r1
   29f98:	mov	r2, r5
   29f9c:	bl	125b4 <memcpy@plt>
   29fa0:	mov	r0, r5
   29fa4:	pop	{r4, r5, r6, r7, r8, pc}
   29fa8:	mov	r1, #0
   29fac:	b	29f7c <__assert_fail@plt+0x172d8>
   29fb0:	mvn	r5, #0
   29fb4:	b	29fa0 <__assert_fail@plt+0x172fc>
   29fb8:	ldr	r3, [pc, #52]	; 29ff4 <__assert_fail@plt+0x17350>
   29fbc:	ldr	r2, [pc, #52]	; 29ff8 <__assert_fail@plt+0x17354>
   29fc0:	ldr	r1, [pc, #52]	; 29ffc <__assert_fail@plt+0x17358>
   29fc4:	ldr	r0, [pc, #52]	; 2a000 <__assert_fail@plt+0x1735c>
   29fc8:	bl	12ca4 <__assert_fail@plt>
   29fcc:	ldr	r3, [pc, #32]	; 29ff4 <__assert_fail@plt+0x17350>
   29fd0:	ldr	r2, [pc, #44]	; 2a004 <__assert_fail@plt+0x17360>
   29fd4:	ldr	r1, [pc, #32]	; 29ffc <__assert_fail@plt+0x17358>
   29fd8:	ldr	r0, [pc, #40]	; 2a008 <__assert_fail@plt+0x17364>
   29fdc:	bl	12ca4 <__assert_fail@plt>
   29fe0:	ldr	r3, [pc, #12]	; 29ff4 <__assert_fail@plt+0x17350>
   29fe4:	ldr	r2, [pc, #32]	; 2a00c <__assert_fail@plt+0x17368>
   29fe8:	ldr	r1, [pc, #12]	; 29ffc <__assert_fail@plt+0x17358>
   29fec:	ldr	r0, [pc, #28]	; 2a010 <__assert_fail@plt+0x1736c>
   29ff0:	bl	12ca4 <__assert_fail@plt>
   29ff4:	andeq	r4, r3, r4, lsr #3
   29ff8:	andeq	r0, r0, r2, lsr #16
   29ffc:			; <UNDEFINED> instruction: 0x000342b8
   2a000:	andeq	r4, r3, ip, ror #21
   2a004:	andeq	r0, r0, r1, lsl r8
   2a008:	andeq	r4, r3, ip, lsr #21
   2a00c:	andeq	r0, r0, r2, lsl r8
   2a010:			; <UNDEFINED> instruction: 0x00034ab8
   2a014:	ldr	r3, [r0]
   2a018:	push	{r4, r5, r6, lr}
   2a01c:	cmp	r3, #1
   2a020:	bls	2a088 <__assert_fail@plt+0x173e4>
   2a024:	ldr	r3, [r0, #44]	; 0x2c
   2a028:	ldr	r2, [r0, #36]	; 0x24
   2a02c:	mov	r4, r0
   2a030:	cmp	r3, r2
   2a034:	mov	r5, r1
   2a038:	beq	2a05c <__assert_fail@plt+0x173b8>
   2a03c:	cmp	r2, r3
   2a040:	bls	2a074 <__assert_fail@plt+0x173d0>
   2a044:	ldr	r2, [r4, #48]	; 0x30
   2a048:	add	r1, r3, #1
   2a04c:	str	r1, [r4, #44]	; 0x2c
   2a050:	mov	r0, #0
   2a054:	strb	r5, [r2, r3]
   2a058:	pop	{r4, r5, r6, pc}
   2a05c:	bl	27d0c <__assert_fail@plt+0x15068>
   2a060:	cmp	r0, #0
   2a064:	popne	{r4, r5, r6, pc}
   2a068:	ldr	r3, [r4, #44]	; 0x2c
   2a06c:	ldr	r2, [r4, #36]	; 0x24
   2a070:	b	2a03c <__assert_fail@plt+0x17398>
   2a074:	ldr	r3, [pc, #20]	; 2a090 <__assert_fail@plt+0x173ec>
   2a078:	ldr	r2, [pc, #20]	; 2a094 <__assert_fail@plt+0x173f0>
   2a07c:	ldr	r1, [pc, #20]	; 2a098 <__assert_fail@plt+0x173f4>
   2a080:	ldr	r0, [pc, #20]	; 2a09c <__assert_fail@plt+0x173f8>
   2a084:	bl	12ca4 <__assert_fail@plt>
   2a088:	ldr	r0, [pc, #16]	; 2a0a0 <__assert_fail@plt+0x173fc>
   2a08c:	bl	21dc4 <__assert_fail@plt+0xf120>
   2a090:			; <UNDEFINED> instruction: 0x000341b0
   2a094:	andeq	r0, r0, r5, asr #16
   2a098:			; <UNDEFINED> instruction: 0x000342b8
   2a09c:	andeq	r4, r3, ip, lsr #22
   2a0a0:	strdeq	r4, [r3], -ip
   2a0a4:	ldr	r3, [r0]
   2a0a8:	push	{r4, r5, r6, r7, r8, lr}
   2a0ac:	cmp	r3, #1
   2a0b0:	bls	2a140 <__assert_fail@plt+0x1749c>
   2a0b4:	cmp	r2, #0
   2a0b8:	mov	r5, r0
   2a0bc:	mov	r7, r1
   2a0c0:	mov	r6, r2
   2a0c4:	beq	2a10c <__assert_fail@plt+0x17468>
   2a0c8:	ldr	r3, [r5, #44]	; 0x2c
   2a0cc:	ldr	r4, [r5, #36]	; 0x24
   2a0d0:	cmp	r3, r4
   2a0d4:	bcs	2a114 <__assert_fail@plt+0x17470>
   2a0d8:	sub	r4, r4, r3
   2a0dc:	cmp	r4, r6
   2a0e0:	ldr	r0, [r5, #48]	; 0x30
   2a0e4:	movcs	r4, r6
   2a0e8:	add	r0, r0, r3
   2a0ec:	mov	r2, r4
   2a0f0:	mov	r1, r7
   2a0f4:	bl	125b4 <memcpy@plt>
   2a0f8:	ldr	r3, [r5, #44]	; 0x2c
   2a0fc:	subs	r6, r6, r4
   2a100:	add	r3, r3, r4
   2a104:	str	r3, [r5, #44]	; 0x2c
   2a108:	bne	2a128 <__assert_fail@plt+0x17484>
   2a10c:	mov	r0, #0
   2a110:	pop	{r4, r5, r6, r7, r8, pc}
   2a114:	mov	r0, r5
   2a118:	bl	27d0c <__assert_fail@plt+0x15068>
   2a11c:	cmp	r0, #0
   2a120:	beq	2a0c8 <__assert_fail@plt+0x17424>
   2a124:	pop	{r4, r5, r6, r7, r8, pc}
   2a128:	mov	r0, r5
   2a12c:	bl	27d0c <__assert_fail@plt+0x15068>
   2a130:	cmp	r0, #0
   2a134:	popne	{r4, r5, r6, r7, r8, pc}
   2a138:	add	r7, r7, r4
   2a13c:	b	2a0c8 <__assert_fail@plt+0x17424>
   2a140:	ldr	r0, [pc]	; 2a148 <__assert_fail@plt+0x174a4>
   2a144:	bl	21dc4 <__assert_fail@plt+0xf120>
   2a148:	andeq	r4, r3, r4, asr #22
   2a14c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a150:	mov	r6, r3
   2a154:	ldr	r3, [sp, #40]	; 0x28
   2a158:	cmp	r1, #3
   2a15c:	mov	r5, r0
   2a160:	mov	r7, r2
   2a164:	ldr	fp, [r3]
   2a168:	beq	2a318 <__assert_fail@plt+0x17674>
   2a16c:	cmp	r1, #4
   2a170:	beq	2a1c4 <__assert_fail@plt+0x17520>
   2a174:	cmp	r1, #1
   2a178:	beq	2a778 <__assert_fail@plt+0x17ad4>
   2a17c:	cmp	r1, #5
   2a180:	beq	2a7c8 <__assert_fail@plt+0x17b24>
   2a184:	cmp	r1, #2
   2a188:	movne	r9, #0
   2a18c:	bne	2a274 <__assert_fail@plt+0x175d0>
   2a190:	ldr	r3, [r0]
   2a194:	cmp	r3, #2
   2a198:	beq	2a820 <__assert_fail@plt+0x17b7c>
   2a19c:	ldr	r9, [r0, #4]
   2a1a0:	cmp	r9, #0
   2a1a4:	bne	2a7e0 <__assert_fail@plt+0x17b3c>
   2a1a8:	ldr	r3, [pc, #2184]	; 2aa38 <__assert_fail@plt+0x17d94>
   2a1ac:	ldr	r3, [r3]
   2a1b0:	cmp	r3, #0
   2a1b4:	bne	2a810 <__assert_fail@plt+0x17b6c>
   2a1b8:	mov	r0, r5
   2a1bc:	bl	125e4 <gcry_free@plt>
   2a1c0:	b	2a274 <__assert_fail@plt+0x175d0>
   2a1c4:	ldr	r2, [r0, #12]
   2a1c8:	cmp	r2, #0
   2a1cc:	beq	2a98c <__assert_fail@plt+0x17ce8>
   2a1d0:	ldr	r2, [r0, #20]
   2a1d4:	cmp	r2, #512	; 0x200
   2a1d8:	add	r4, r2, fp
   2a1dc:	bhi	2a99c <__assert_fail@plt+0x17cf8>
   2a1e0:	ldr	r8, [pc, #2132]	; 2aa3c <__assert_fail@plt+0x17d98>
   2a1e4:	cmp	r4, r8
   2a1e8:	ldrhi	sl, [pc, #2128]	; 2aa40 <__assert_fail@plt+0x17d9c>
   2a1ec:	bls	2a468 <__assert_fail@plt+0x177c4>
   2a1f0:	cmp	r4, sl
   2a1f4:	bls	2a428 <__assert_fail@plt+0x17784>
   2a1f8:	mov	r3, #1024	; 0x400
   2a1fc:	mov	r1, #10
   2a200:	b	2a208 <__assert_fail@plt+0x17564>
   2a204:	mov	r1, r2
   2a208:	lsl	r3, r3, #1
   2a20c:	cmp	r4, r3
   2a210:	add	r2, r1, #1
   2a214:	bcs	2a204 <__assert_fail@plt+0x17560>
   2a218:	cmp	r1, #31
   2a21c:	lsr	fp, r3, #1
   2a220:	bgt	2a9fc <__assert_fail@plt+0x17d58>
   2a224:	orr	r1, r1, #224	; 0xe0
   2a228:	mov	r0, r7
   2a22c:	bl	2a014 <__assert_fail@plt+0x17370>
   2a230:	ldr	r2, [r5, #20]
   2a234:	cmp	r2, #0
   2a238:	beq	2a27c <__assert_fail@plt+0x175d8>
   2a23c:	cmp	r2, #512	; 0x200
   2a240:	bne	2aa10 <__assert_fail@plt+0x17d6c>
   2a244:	ldr	r1, [r5, #16]
   2a248:	mov	r0, r7
   2a24c:	bl	2a0a4 <__assert_fail@plt+0x17400>
   2a250:	subs	r9, r0, #0
   2a254:	bne	2a30c <__assert_fail@plt+0x17668>
   2a258:	sub	r4, r4, #512	; 0x200
   2a25c:	mov	r3, #0
   2a260:	cmp	r4, fp
   2a264:	str	r3, [r5, #20]
   2a268:	bhi	2a288 <__assert_fail@plt+0x175e4>
   2a26c:	cmp	r4, r3
   2a270:	bne	2a434 <__assert_fail@plt+0x17790>
   2a274:	mov	r0, r9
   2a278:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a27c:	cmp	r4, fp
   2a280:	mov	r9, r2
   2a284:	bls	2a434 <__assert_fail@plt+0x17790>
   2a288:	mov	r2, fp
   2a28c:	mov	r1, r6
   2a290:	mov	r0, r7
   2a294:	bl	2a0a4 <__assert_fail@plt+0x17400>
   2a298:	cmp	r0, #0
   2a29c:	bne	2a450 <__assert_fail@plt+0x177ac>
   2a2a0:	sub	r4, r4, fp
   2a2a4:	clz	r3, r9
   2a2a8:	lsr	r3, r3, #5
   2a2ac:	cmp	r4, r8
   2a2b0:	movls	r2, #0
   2a2b4:	andhi	r2, r3, #1
   2a2b8:	cmp	r2, #0
   2a2bc:	add	r6, r6, fp
   2a2c0:	bne	2a1f0 <__assert_fail@plt+0x1754c>
   2a2c4:	cmp	r4, #0
   2a2c8:	moveq	r3, #0
   2a2cc:	cmp	r3, #0
   2a2d0:	beq	2a274 <__assert_fail@plt+0x175d0>
   2a2d4:	ldr	r3, [r5, #20]
   2a2d8:	cmp	r3, #0
   2a2dc:	bne	2a9e8 <__assert_fail@plt+0x17d44>
   2a2e0:	cmp	r4, r8
   2a2e4:	bhi	2a9d4 <__assert_fail@plt+0x17d30>
   2a2e8:	ldr	r0, [r5, #16]
   2a2ec:	cmp	r0, #0
   2a2f0:	beq	2a7f0 <__assert_fail@plt+0x17b4c>
   2a2f4:	mov	r1, r6
   2a2f8:	mov	r2, r4
   2a2fc:	bl	125b4 <memcpy@plt>
   2a300:	mov	r9, #0
   2a304:	str	r4, [r5, #20]
   2a308:	b	2a274 <__assert_fail@plt+0x175d0>
   2a30c:	bl	12914 <gpg_err_code_from_syserror@plt>
   2a310:	uxth	r9, r0
   2a314:	b	2a258 <__assert_fail@plt+0x175b4>
   2a318:	cmp	fp, #0
   2a31c:	beq	2aa24 <__assert_fail@plt+0x17d80>
   2a320:	ldr	r9, [r0, #28]
   2a324:	cmp	r9, #0
   2a328:	bne	2a45c <__assert_fail@plt+0x177b8>
   2a32c:	mov	r8, r9
   2a330:	mov	sl, #2
   2a334:	ldr	r2, [r5, #4]
   2a338:	cmp	r2, #0
   2a33c:	bne	2a3c4 <__assert_fail@plt+0x17720>
   2a340:	ldr	r3, [r5, #12]
   2a344:	cmp	r3, #2
   2a348:	beq	2a5a0 <__assert_fail@plt+0x178fc>
   2a34c:	cmp	r3, #0
   2a350:	beq	2a97c <__assert_fail@plt+0x17cd8>
   2a354:	ldr	r0, [r5, #24]
   2a358:	cmp	r0, #0
   2a35c:	strne	r2, [r5, #24]
   2a360:	bne	2a3a8 <__assert_fail@plt+0x17704>
   2a364:	ldr	r3, [r7, #32]
   2a368:	cmp	r3, #0
   2a36c:	bne	2a538 <__assert_fail@plt+0x17894>
   2a370:	ldr	r1, [r7, #40]	; 0x28
   2a374:	ldr	r3, [r7, #44]	; 0x2c
   2a378:	cmp	r1, r3
   2a37c:	bcs	2a538 <__assert_fail@plt+0x17894>
   2a380:	ldr	r3, [r7, #16]
   2a384:	ldr	r2, [r7, #20]
   2a388:	ldr	r0, [r7, #48]	; 0x30
   2a38c:	adds	r3, r3, #1
   2a390:	str	r3, [r7, #16]
   2a394:	adc	r2, r2, #0
   2a398:	add	r3, r1, #1
   2a39c:	str	r2, [r7, #20]
   2a3a0:	str	r3, [r7, #40]	; 0x28
   2a3a4:	ldrb	r0, [r0, r1]
   2a3a8:	cmp	r0, #191	; 0xbf
   2a3ac:	bgt	2a4cc <__assert_fail@plt+0x17828>
   2a3b0:	cmp	r0, #0
   2a3b4:	str	r0, [r5, #4]
   2a3b8:	mov	r2, r0
   2a3bc:	str	sl, [r5, #12]
   2a3c0:	beq	2a5a0 <__assert_fail@plt+0x178fc>
   2a3c4:	cmp	r2, #0
   2a3c8:	beq	2a4c0 <__assert_fail@plt+0x1781c>
   2a3cc:	cmp	r2, fp
   2a3d0:	movcc	r4, r2
   2a3d4:	movcs	r4, fp
   2a3d8:	mov	r2, r4
   2a3dc:	mov	r1, r6
   2a3e0:	mov	r0, r7
   2a3e4:	bl	29da0 <__assert_fail@plt+0x170fc>
   2a3e8:	cmp	r4, r0
   2a3ec:	ble	2a49c <__assert_fail@plt+0x177f8>
   2a3f0:	cmn	r0, #1
   2a3f4:	ldr	r3, [r5, #4]
   2a3f8:	addne	fp, fp, r0
   2a3fc:	moveq	r0, #0
   2a400:	add	r3, r0, r3
   2a404:	mov	r2, fp
   2a408:	mov	r1, r5
   2a40c:	ldr	r0, [pc, #1584]	; 2aa44 <__assert_fail@plt+0x17da0>
   2a410:	bl	21cbc <__assert_fail@plt+0xf018>
   2a414:	mov	r9, #89	; 0x59
   2a418:	ldr	r3, [sp, #40]	; 0x28
   2a41c:	mov	r0, r9
   2a420:	str	r8, [r3]
   2a424:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a428:	mov	r1, #233	; 0xe9
   2a42c:	mov	fp, #512	; 0x200
   2a430:	b	2a228 <__assert_fail@plt+0x17584>
   2a434:	mov	r2, r4
   2a438:	mov	r1, r6
   2a43c:	mov	r0, r7
   2a440:	bl	2a0a4 <__assert_fail@plt+0x17400>
   2a444:	mov	fp, r4
   2a448:	cmp	r0, #0
   2a44c:	beq	2a274 <__assert_fail@plt+0x175d0>
   2a450:	bl	12914 <gpg_err_code_from_syserror@plt>
   2a454:	uxth	r9, r0
   2a458:	b	2a2a0 <__assert_fail@plt+0x175fc>
   2a45c:	mov	r8, #0
   2a460:	mvn	r9, #0
   2a464:	b	2a418 <__assert_fail@plt+0x17774>
   2a468:	ldr	r0, [r0, #16]
   2a46c:	cmp	r0, #0
   2a470:	beq	2a8a4 <__assert_fail@plt+0x17c00>
   2a474:	mov	r1, r6
   2a478:	add	r0, r0, r2
   2a47c:	mov	r2, fp
   2a480:	bl	125b4 <memcpy@plt>
   2a484:	ldr	r2, [r5, #20]
   2a488:	mov	r9, #0
   2a48c:	add	r3, r2, fp
   2a490:	str	r3, [r5, #20]
   2a494:	mov	r0, r9
   2a498:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a49c:	ldr	r2, [r5, #4]
   2a4a0:	subs	fp, fp, r0
   2a4a4:	sub	r2, r2, r0
   2a4a8:	add	r6, r6, r0
   2a4ac:	add	r8, r8, r0
   2a4b0:	str	r2, [r5, #4]
   2a4b4:	beq	2a418 <__assert_fail@plt+0x17774>
   2a4b8:	cmp	r2, #0
   2a4bc:	bne	2a3cc <__assert_fail@plt+0x17728>
   2a4c0:	cmp	fp, #0
   2a4c4:	bne	2a334 <__assert_fail@plt+0x17690>
   2a4c8:	b	2a418 <__assert_fail@plt+0x17774>
   2a4cc:	cmp	r0, #223	; 0xdf
   2a4d0:	bgt	2a558 <__assert_fail@plt+0x178b4>
   2a4d4:	ldr	r2, [r7, #32]
   2a4d8:	sub	r3, r0, #192	; 0xc0
   2a4dc:	cmp	r2, #0
   2a4e0:	lsl	r3, r3, #8
   2a4e4:	str	r3, [r5, #4]
   2a4e8:	bne	2a574 <__assert_fail@plt+0x178d0>
   2a4ec:	ldr	r0, [r7, #40]	; 0x28
   2a4f0:	ldr	r2, [r7, #44]	; 0x2c
   2a4f4:	cmp	r0, r2
   2a4f8:	bcs	2a574 <__assert_fail@plt+0x178d0>
   2a4fc:	ldr	r2, [r7, #16]
   2a500:	ldr	r1, [r7, #20]
   2a504:	ldr	ip, [r7, #48]	; 0x30
   2a508:	adds	r2, r2, #1
   2a50c:	str	r2, [r7, #16]
   2a510:	adc	r1, r1, #0
   2a514:	add	r2, r0, #1
   2a518:	str	r1, [r7, #20]
   2a51c:	str	r2, [r7, #40]	; 0x28
   2a520:	ldrb	r2, [ip, r0]
   2a524:	add	r3, r3, #192	; 0xc0
   2a528:	str	sl, [r5, #12]
   2a52c:	add	r2, r2, r3
   2a530:	str	r2, [r5, #4]
   2a534:	b	2a3c4 <__assert_fail@plt+0x17720>
   2a538:	mov	r0, r7
   2a53c:	bl	29cac <__assert_fail@plt+0x17008>
   2a540:	cmn	r0, #1
   2a544:	bne	2a3a8 <__assert_fail@plt+0x17704>
   2a548:	ldr	r0, [pc, #1272]	; 2aa48 <__assert_fail@plt+0x17da4>
   2a54c:	bl	21cbc <__assert_fail@plt+0xf018>
   2a550:	mov	r9, #89	; 0x59
   2a554:	b	2a418 <__assert_fail@plt+0x17774>
   2a558:	cmp	r0, #255	; 0xff
   2a55c:	beq	2a5b8 <__assert_fail@plt+0x17914>
   2a560:	and	r2, r0, #31
   2a564:	mov	r3, #1
   2a568:	lsl	r2, r3, r2
   2a56c:	str	r2, [r5, #4]
   2a570:	b	2a3c4 <__assert_fail@plt+0x17720>
   2a574:	mov	r0, r7
   2a578:	bl	29cac <__assert_fail@plt+0x17008>
   2a57c:	cmn	r0, #1
   2a580:	beq	2a894 <__assert_fail@plt+0x17bf0>
   2a584:	ldr	r2, [r5, #4]
   2a588:	str	sl, [r5, #12]
   2a58c:	add	r2, r2, #192	; 0xc0
   2a590:	add	r2, r2, r0
   2a594:	cmp	r2, #0
   2a598:	str	r2, [r5, #4]
   2a59c:	bne	2a3c4 <__assert_fail@plt+0x17720>
   2a5a0:	clz	r9, r8
   2a5a4:	mov	r3, #1
   2a5a8:	lsr	r9, r9, #5
   2a5ac:	rsb	r9, r9, #0
   2a5b0:	str	r3, [r5, #28]
   2a5b4:	b	2a418 <__assert_fail@plt+0x17774>
   2a5b8:	ldr	r3, [r7, #32]
   2a5bc:	cmp	r3, #0
   2a5c0:	bne	2a6c4 <__assert_fail@plt+0x17a20>
   2a5c4:	ldrd	r2, [r7, #40]	; 0x28
   2a5c8:	cmp	r2, r3
   2a5cc:	bcs	2a6c4 <__assert_fail@plt+0x17a20>
   2a5d0:	ldr	r1, [r7, #16]
   2a5d4:	ldr	r0, [r7, #20]
   2a5d8:	ldr	ip, [r7, #48]	; 0x30
   2a5dc:	adds	r1, r1, #1
   2a5e0:	str	r1, [r7, #16]
   2a5e4:	adc	r0, r0, #0
   2a5e8:	add	r1, r2, #1
   2a5ec:	str	r1, [r7, #40]	; 0x28
   2a5f0:	str	r0, [r7, #20]
   2a5f4:	ldrb	r2, [ip, r2]
   2a5f8:	ldr	r1, [r7, #40]	; 0x28
   2a5fc:	cmp	r1, r3
   2a600:	lsl	r2, r2, #24
   2a604:	str	r2, [r5, #4]
   2a608:	bcs	2a6f0 <__assert_fail@plt+0x17a4c>
   2a60c:	ldr	r0, [r7, #16]
   2a610:	ldr	ip, [r7, #20]
   2a614:	ldr	lr, [r7, #48]	; 0x30
   2a618:	adds	r0, r0, #1
   2a61c:	str	r0, [r7, #16]
   2a620:	adc	ip, ip, #0
   2a624:	add	r0, r1, #1
   2a628:	str	r0, [r7, #40]	; 0x28
   2a62c:	str	ip, [r7, #20]
   2a630:	ldrb	r1, [lr, r1]
   2a634:	orr	r2, r2, r1, lsl #16
   2a638:	ldr	r1, [r7, #40]	; 0x28
   2a63c:	str	r2, [r5, #4]
   2a640:	cmp	r1, r3
   2a644:	bcs	2a728 <__assert_fail@plt+0x17a84>
   2a648:	ldr	r0, [r7, #16]
   2a64c:	ldr	ip, [r7, #20]
   2a650:	ldr	lr, [r7, #48]	; 0x30
   2a654:	adds	r0, r0, #1
   2a658:	str	r0, [r7, #16]
   2a65c:	adc	ip, ip, #0
   2a660:	add	r0, r1, #1
   2a664:	str	r0, [r7, #40]	; 0x28
   2a668:	str	ip, [r7, #20]
   2a66c:	ldrb	r1, [lr, r1]
   2a670:	orr	r2, r2, r1, lsl #8
   2a674:	ldr	r1, [r7, #40]	; 0x28
   2a678:	str	r2, [r5, #4]
   2a67c:	cmp	r1, r3
   2a680:	bcs	2a760 <__assert_fail@plt+0x17abc>
   2a684:	ldr	r3, [r7, #16]
   2a688:	ldr	r0, [r7, #20]
   2a68c:	ldr	ip, [r7, #48]	; 0x30
   2a690:	adds	r3, r3, #1
   2a694:	adc	r0, r0, #0
   2a698:	str	r3, [r7, #16]
   2a69c:	add	r3, r1, #1
   2a6a0:	str	r0, [r7, #20]
   2a6a4:	str	r3, [r7, #40]	; 0x28
   2a6a8:	ldrb	r0, [ip, r1]
   2a6ac:	orr	r2, r0, r2
   2a6b0:	cmp	r2, #0
   2a6b4:	str	r2, [r5, #4]
   2a6b8:	str	sl, [r5, #12]
   2a6bc:	bne	2a3c4 <__assert_fail@plt+0x17720>
   2a6c0:	b	2a5a0 <__assert_fail@plt+0x178fc>
   2a6c4:	mov	r0, r7
   2a6c8:	bl	29cac <__assert_fail@plt+0x17008>
   2a6cc:	ldr	r3, [r7, #32]
   2a6d0:	cmp	r3, #0
   2a6d4:	lsl	r2, r0, #24
   2a6d8:	str	r2, [r5, #4]
   2a6dc:	bne	2a6f0 <__assert_fail@plt+0x17a4c>
   2a6e0:	ldr	r3, [r7, #44]	; 0x2c
   2a6e4:	ldr	r1, [r7, #40]	; 0x28
   2a6e8:	cmp	r1, r3
   2a6ec:	bcc	2a60c <__assert_fail@plt+0x17968>
   2a6f0:	mov	r0, r7
   2a6f4:	bl	29cac <__assert_fail@plt+0x17008>
   2a6f8:	ldr	r2, [r7, #32]
   2a6fc:	ldr	r3, [r5, #4]
   2a700:	cmp	r2, #0
   2a704:	lsl	r2, r0, #16
   2a708:	and	r2, r2, #16711680	; 0xff0000
   2a70c:	orr	r2, r2, r3
   2a710:	str	r2, [r5, #4]
   2a714:	bne	2a728 <__assert_fail@plt+0x17a84>
   2a718:	ldr	r3, [r7, #44]	; 0x2c
   2a71c:	ldr	r1, [r7, #40]	; 0x28
   2a720:	cmp	r1, r3
   2a724:	bcc	2a648 <__assert_fail@plt+0x179a4>
   2a728:	mov	r0, r7
   2a72c:	bl	29cac <__assert_fail@plt+0x17008>
   2a730:	ldr	r2, [r7, #32]
   2a734:	ldr	r3, [r5, #4]
   2a738:	cmp	r2, #0
   2a73c:	lsl	r2, r0, #8
   2a740:	uxth	r2, r2
   2a744:	orr	r2, r2, r3
   2a748:	str	r2, [r5, #4]
   2a74c:	bne	2a760 <__assert_fail@plt+0x17abc>
   2a750:	ldr	r3, [r7, #44]	; 0x2c
   2a754:	ldr	r1, [r7, #40]	; 0x28
   2a758:	cmp	r1, r3
   2a75c:	bcc	2a684 <__assert_fail@plt+0x179e0>
   2a760:	mov	r0, r7
   2a764:	bl	29cac <__assert_fail@plt+0x17008>
   2a768:	cmn	r0, #1
   2a76c:	beq	2a96c <__assert_fail@plt+0x17cc8>
   2a770:	ldr	r2, [r5, #4]
   2a774:	b	2a6ac <__assert_fail@plt+0x17a08>
   2a778:	ldr	r3, [pc, #696]	; 2aa38 <__assert_fail@plt+0x17d94>
   2a77c:	ldr	r3, [r3]
   2a780:	cmp	r3, #0
   2a784:	bne	2a800 <__assert_fail@plt+0x17b5c>
   2a788:	ldr	r3, [r5, #12]
   2a78c:	cmp	r3, #0
   2a790:	movne	r3, #0
   2a794:	strne	r3, [r5, #8]
   2a798:	bne	2a7b0 <__assert_fail@plt+0x17b0c>
   2a79c:	ldr	r3, [r5]
   2a7a0:	cmp	r3, #0
   2a7a4:	streq	r3, [r5, #4]
   2a7a8:	ldrne	r3, [r5, #4]
   2a7ac:	str	r3, [r5, #8]
   2a7b0:	mov	r9, #0
   2a7b4:	str	r9, [r5, #28]
   2a7b8:	str	r9, [r5, #16]
   2a7bc:	str	r9, [r5, #20]
   2a7c0:	mov	r0, r9
   2a7c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7c8:	mov	r2, fp
   2a7cc:	mov	r0, r6
   2a7d0:	ldr	r1, [pc, #628]	; 2aa4c <__assert_fail@plt+0x17da8>
   2a7d4:	bl	1c4c8 <__assert_fail@plt+0x9824>
   2a7d8:	mov	r9, #0
   2a7dc:	b	2a274 <__assert_fail@plt+0x175d0>
   2a7e0:	ldr	r0, [pc, #616]	; 2aa50 <__assert_fail@plt+0x17dac>
   2a7e4:	bl	21cbc <__assert_fail@plt+0xf018>
   2a7e8:	mov	r9, #0
   2a7ec:	b	2a1a8 <__assert_fail@plt+0x17504>
   2a7f0:	mov	r0, #512	; 0x200
   2a7f4:	bl	12410 <gcry_xmalloc@plt>
   2a7f8:	str	r0, [r5, #16]
   2a7fc:	b	2a2f4 <__assert_fail@plt+0x17650>
   2a800:	mov	r1, r0
   2a804:	ldr	r0, [pc, #584]	; 2aa54 <__assert_fail@plt+0x17db0>
   2a808:	bl	21e08 <__assert_fail@plt+0xf164>
   2a80c:	b	2a788 <__assert_fail@plt+0x17ae4>
   2a810:	mov	r1, r5
   2a814:	ldr	r0, [pc, #572]	; 2aa58 <__assert_fail@plt+0x17db4>
   2a818:	bl	21e08 <__assert_fail@plt+0xf164>
   2a81c:	b	2a1b8 <__assert_fail@plt+0x17514>
   2a820:	ldr	r3, [r0, #12]
   2a824:	cmp	r3, #0
   2a828:	beq	2a9c4 <__assert_fail@plt+0x17d20>
   2a82c:	ldr	r4, [r0, #20]
   2a830:	cmp	r4, #191	; 0xbf
   2a834:	bls	2a958 <__assert_fail@plt+0x17cb4>
   2a838:	cmp	r4, #8384	; 0x20c0
   2a83c:	bcs	2a8b8 <__assert_fail@plt+0x17c14>
   2a840:	sub	r6, r4, #192	; 0xc0
   2a844:	mov	r0, r2
   2a848:	lsr	r1, r6, #8
   2a84c:	add	r1, r1, #192	; 0xc0
   2a850:	bl	2a014 <__assert_fail@plt+0x17370>
   2a854:	cmp	r0, #0
   2a858:	beq	2a9b0 <__assert_fail@plt+0x17d0c>
   2a85c:	bl	12968 <__errno_location@plt>
   2a860:	ldr	r0, [r0]
   2a864:	bl	12818 <strerror@plt>
   2a868:	mov	r1, r0
   2a86c:	ldr	r0, [pc, #488]	; 2aa5c <__assert_fail@plt+0x17db8>
   2a870:	bl	21cbc <__assert_fail@plt+0xf018>
   2a874:	bl	12914 <gpg_err_code_from_syserror@plt>
   2a878:	uxth	r9, r0
   2a87c:	ldr	r0, [r5, #16]
   2a880:	bl	125e4 <gcry_free@plt>
   2a884:	mov	r3, #0
   2a888:	str	r3, [r5, #16]
   2a88c:	str	r3, [r5, #20]
   2a890:	b	2a1a8 <__assert_fail@plt+0x17504>
   2a894:	ldr	r0, [pc, #452]	; 2aa60 <__assert_fail@plt+0x17dbc>
   2a898:	bl	21cbc <__assert_fail@plt+0xf018>
   2a89c:	mov	r9, #89	; 0x59
   2a8a0:	b	2a418 <__assert_fail@plt+0x17774>
   2a8a4:	mov	r0, #512	; 0x200
   2a8a8:	bl	12410 <gcry_xmalloc@plt>
   2a8ac:	ldr	r2, [r5, #20]
   2a8b0:	str	r0, [r5, #16]
   2a8b4:	b	2a474 <__assert_fail@plt+0x177d0>
   2a8b8:	mov	r1, #255	; 0xff
   2a8bc:	mov	r0, r2
   2a8c0:	bl	2a014 <__assert_fail@plt+0x17370>
   2a8c4:	cmp	r0, #0
   2a8c8:	bne	2a85c <__assert_fail@plt+0x17bb8>
   2a8cc:	lsr	r1, r4, #24
   2a8d0:	mov	r0, r7
   2a8d4:	bl	2a014 <__assert_fail@plt+0x17370>
   2a8d8:	cmp	r0, #0
   2a8dc:	bne	2a85c <__assert_fail@plt+0x17bb8>
   2a8e0:	lsr	r1, r4, #16
   2a8e4:	mov	r0, r7
   2a8e8:	uxtb	r1, r1
   2a8ec:	bl	2a014 <__assert_fail@plt+0x17370>
   2a8f0:	cmp	r0, #0
   2a8f4:	bne	2a85c <__assert_fail@plt+0x17bb8>
   2a8f8:	lsr	r1, r4, #8
   2a8fc:	mov	r0, r7
   2a900:	uxtb	r1, r1
   2a904:	bl	2a014 <__assert_fail@plt+0x17370>
   2a908:	cmp	r0, #0
   2a90c:	bne	2a85c <__assert_fail@plt+0x17bb8>
   2a910:	uxtb	r1, r4
   2a914:	mov	r0, r7
   2a918:	bl	2a014 <__assert_fail@plt+0x17370>
   2a91c:	mov	r9, r0
   2a920:	adds	r3, r4, #0
   2a924:	movne	r3, #1
   2a928:	cmp	r9, #0
   2a92c:	movne	r3, #0
   2a930:	cmp	r3, #0
   2a934:	beq	2a94c <__assert_fail@plt+0x17ca8>
   2a938:	mov	r2, r4
   2a93c:	mov	r0, r7
   2a940:	ldr	r1, [r5, #16]
   2a944:	bl	2a0a4 <__assert_fail@plt+0x17400>
   2a948:	mov	r9, r0
   2a94c:	cmp	r9, #0
   2a950:	beq	2a87c <__assert_fail@plt+0x17bd8>
   2a954:	b	2a85c <__assert_fail@plt+0x17bb8>
   2a958:	mov	r1, r4
   2a95c:	mov	r0, r2
   2a960:	bl	2a014 <__assert_fail@plt+0x17370>
   2a964:	mov	r9, r0
   2a968:	b	2a920 <__assert_fail@plt+0x17c7c>
   2a96c:	ldr	r0, [pc, #240]	; 2aa64 <__assert_fail@plt+0x17dc0>
   2a970:	bl	21cbc <__assert_fail@plt+0xf018>
   2a974:	mov	r9, #89	; 0x59
   2a978:	b	2a418 <__assert_fail@plt+0x17774>
   2a97c:	ldr	r2, [pc, #228]	; 2aa68 <__assert_fail@plt+0x17dc4>
   2a980:	ldr	r1, [pc, #228]	; 2aa6c <__assert_fail@plt+0x17dc8>
   2a984:	ldr	r0, [pc, #228]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2a988:	bl	2201c <__assert_fail@plt+0xf378>
   2a98c:	ldr	r2, [pc, #212]	; 2aa68 <__assert_fail@plt+0x17dc4>
   2a990:	ldr	r1, [pc, #220]	; 2aa74 <__assert_fail@plt+0x17dd0>
   2a994:	ldr	r0, [pc, #212]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2a998:	bl	2201c <__assert_fail@plt+0xf378>
   2a99c:	ldr	r3, [pc, #212]	; 2aa78 <__assert_fail@plt+0x17dd4>
   2a9a0:	ldr	r2, [pc, #212]	; 2aa7c <__assert_fail@plt+0x17dd8>
   2a9a4:	ldr	r1, [pc, #196]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2a9a8:	ldr	r0, [pc, #208]	; 2aa80 <__assert_fail@plt+0x17ddc>
   2a9ac:	bl	12ca4 <__assert_fail@plt>
   2a9b0:	uxtb	r1, r6
   2a9b4:	mov	r0, r7
   2a9b8:	bl	2a014 <__assert_fail@plt+0x17370>
   2a9bc:	mov	r9, r0
   2a9c0:	b	2a920 <__assert_fail@plt+0x17c7c>
   2a9c4:	ldr	r2, [pc, #156]	; 2aa68 <__assert_fail@plt+0x17dc4>
   2a9c8:	ldr	r1, [pc, #180]	; 2aa84 <__assert_fail@plt+0x17de0>
   2a9cc:	ldr	r0, [pc, #156]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2a9d0:	bl	2201c <__assert_fail@plt+0xf378>
   2a9d4:	ldr	r3, [pc, #156]	; 2aa78 <__assert_fail@plt+0x17dd4>
   2a9d8:	ldr	r2, [pc, #168]	; 2aa88 <__assert_fail@plt+0x17de4>
   2a9dc:	ldr	r1, [pc, #140]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2a9e0:	ldr	r0, [pc, #164]	; 2aa8c <__assert_fail@plt+0x17de8>
   2a9e4:	bl	12ca4 <__assert_fail@plt>
   2a9e8:	ldr	r3, [pc, #136]	; 2aa78 <__assert_fail@plt+0x17dd4>
   2a9ec:	mov	r2, #964	; 0x3c4
   2a9f0:	ldr	r1, [pc, #120]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2a9f4:	ldr	r0, [pc, #148]	; 2aa90 <__assert_fail@plt+0x17dec>
   2a9f8:	bl	12ca4 <__assert_fail@plt>
   2a9fc:	ldr	r3, [pc, #116]	; 2aa78 <__assert_fail@plt+0x17dd4>
   2aa00:	ldr	r2, [pc, #140]	; 2aa94 <__assert_fail@plt+0x17df0>
   2aa04:	ldr	r1, [pc, #100]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2aa08:	ldr	r0, [pc, #136]	; 2aa98 <__assert_fail@plt+0x17df4>
   2aa0c:	bl	12ca4 <__assert_fail@plt>
   2aa10:	ldr	r3, [pc, #96]	; 2aa78 <__assert_fail@plt+0x17dd4>
   2aa14:	ldr	r2, [pc, #128]	; 2aa9c <__assert_fail@plt+0x17df8>
   2aa18:	ldr	r1, [pc, #80]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2aa1c:	ldr	r0, [pc, #124]	; 2aaa0 <__assert_fail@plt+0x17dfc>
   2aa20:	bl	12ca4 <__assert_fail@plt>
   2aa24:	ldr	r3, [pc, #76]	; 2aa78 <__assert_fail@plt+0x17dd4>
   2aa28:	mov	r2, #796	; 0x31c
   2aa2c:	ldr	r1, [pc, #60]	; 2aa70 <__assert_fail@plt+0x17dcc>
   2aa30:	ldr	r0, [pc, #108]	; 2aaa4 <__assert_fail@plt+0x17e00>
   2aa34:	bl	12ca4 <__assert_fail@plt>
   2aa38:	muleq	r4, r4, r4
   2aa3c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2aa40:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2aa44:	andeq	r4, r3, r8, ror #23
   2aa48:	andeq	r4, r3, r0, ror fp
   2aa4c:	andeq	r4, r3, ip, lsr #25
   2aa50:			; <UNDEFINED> instruction: 0x00034cbc
   2aa54:	muleq	r3, r4, ip
   2aa58:	ldrdeq	r4, [r3], -ip
   2aa5c:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   2aa60:	muleq	r3, r8, fp
   2aa64:	andeq	r4, r3, r0, asr #23
   2aa68:	ldrdeq	r4, [r3], -r0
   2aa6c:	andeq	r0, r0, r5, ror r3
   2aa70:			; <UNDEFINED> instruction: 0x000342b8
   2aa74:	andeq	r0, r0, lr, asr #7
   2aa78:	andeq	r4, r3, r0, asr #3
   2aa7c:	muleq	r0, r6, r3
   2aa80:	andeq	r4, r3, ip, lsl ip
   2aa84:	andeq	r0, r0, r2, lsl r4
   2aa88:	andeq	r0, r0, r5, asr #7
   2aa8c:	andeq	r4, r3, r4, ror ip
   2aa90:	andeq	r4, r3, r8, ror #24
   2aa94:	andeq	r0, r0, lr, lsr #7
   2aa98:	andeq	r4, r3, r0, asr #24
   2aa9c:			; <UNDEFINED> instruction: 0x000003b3
   2aaa0:	andeq	r4, r3, ip, asr #24
   2aaa4:	andeq	r4, r3, ip, lsr fp
   2aaa8:	ldr	r3, [r0]
   2aaac:	push	{r4, r5, r6, lr}
   2aab0:	cmp	r3, #1
   2aab4:	bls	2aadc <__assert_fail@plt+0x17e38>
   2aab8:	mov	r4, r0
   2aabc:	mov	r0, r1
   2aac0:	mov	r5, r1
   2aac4:	bl	128d8 <strlen@plt>
   2aac8:	mov	r1, r5
   2aacc:	mov	r2, r0
   2aad0:	mov	r0, r4
   2aad4:	pop	{r4, r5, r6, lr}
   2aad8:	b	2a0a4 <__assert_fail@plt+0x17400>
   2aadc:	ldr	r0, [pc]	; 2aae4 <__assert_fail@plt+0x17e40>
   2aae0:	bl	21dc4 <__assert_fail@plt+0xf120>
   2aae4:	andeq	r4, r3, r4, lsl sp
   2aae8:	push	{r4, r5, r6, r7, r8, lr}
   2aaec:	sub	sp, sp, #40	; 0x28
   2aaf0:	ldr	r6, [pc, #152]	; 2ab90 <__assert_fail@plt+0x17eec>
   2aaf4:	mov	r4, r0
   2aaf8:	mov	r8, r1
   2aafc:	ldr	r3, [r6]
   2ab00:	mov	r7, r2
   2ab04:	str	r3, [sp, #36]	; 0x24
   2ab08:	b	2ab10 <__assert_fail@plt+0x17e6c>
   2ab0c:	mov	r4, r3
   2ab10:	mov	r0, r4
   2ab14:	bl	27d0c <__assert_fail@plt+0x15068>
   2ab18:	cmp	r0, #0
   2ab1c:	bne	2ab64 <__assert_fail@plt+0x17ec0>
   2ab20:	ldr	r3, [r4, #76]	; 0x4c
   2ab24:	cmp	r3, #0
   2ab28:	bne	2ab0c <__assert_fail@plt+0x17e68>
   2ab2c:	ldr	r5, [r4, #44]	; 0x2c
   2ab30:	mov	r0, r8
   2ab34:	cmp	r5, r7
   2ab38:	movcs	r5, r7
   2ab3c:	mov	r2, r5
   2ab40:	ldr	r1, [r4, #48]	; 0x30
   2ab44:	bl	125b4 <memcpy@plt>
   2ab48:	ldr	r2, [sp, #36]	; 0x24
   2ab4c:	ldr	r3, [r6]
   2ab50:	mov	r0, r5
   2ab54:	cmp	r2, r3
   2ab58:	bne	2ab8c <__assert_fail@plt+0x17ee8>
   2ab5c:	add	sp, sp, #40	; 0x28
   2ab60:	pop	{r4, r5, r6, r7, r8, pc}
   2ab64:	add	r1, sp, #4
   2ab68:	mov	r0, r4
   2ab6c:	ldr	r5, [r4, #80]	; 0x50
   2ab70:	ldr	r6, [r4, #84]	; 0x54
   2ab74:	bl	28380 <__assert_fail@plt+0x156dc>
   2ab78:	mov	r2, r6
   2ab7c:	mov	r1, r5
   2ab80:	mov	r3, r0
   2ab84:	ldr	r0, [pc, #8]	; 2ab94 <__assert_fail@plt+0x17ef0>
   2ab88:	bl	21dc4 <__assert_fail@plt+0xf120>
   2ab8c:	bl	1262c <__stack_chk_fail@plt>
   2ab90:	strdeq	r5, [r4], -r8
   2ab94:	andeq	r4, r3, r4, asr #26
   2ab98:	ldr	r3, [r1]
   2ab9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2aba0:	cmp	r3, #1
   2aba4:	bhi	2ac5c <__assert_fail@plt+0x17fb8>
   2aba8:	ldr	r3, [r0]
   2abac:	mov	r8, r0
   2abb0:	cmp	r3, #2
   2abb4:	bne	2ac48 <__assert_fail@plt+0x17fa4>
   2abb8:	ldr	r5, [r0, #56]	; 0x38
   2abbc:	cmp	r5, #0
   2abc0:	mvnne	r7, #0
   2abc4:	bne	2ac30 <__assert_fail@plt+0x17f8c>
   2abc8:	mov	r0, #32768	; 0x8000
   2abcc:	mov	r9, r1
   2abd0:	bl	12410 <gcry_xmalloc@plt>
   2abd4:	mov	r7, r5
   2abd8:	mov	r6, r0
   2abdc:	b	2ac04 <__assert_fail@plt+0x17f60>
   2abe0:	cmp	r5, r0
   2abe4:	mov	r2, r0
   2abe8:	mov	r1, r6
   2abec:	mov	r0, r8
   2abf0:	movcc	r5, r4
   2abf4:	bl	2a0a4 <__assert_fail@plt+0x17400>
   2abf8:	cmp	r0, #0
   2abfc:	bne	2ac20 <__assert_fail@plt+0x17f7c>
   2ac00:	add	r7, r7, r4
   2ac04:	mov	r2, #32768	; 0x8000
   2ac08:	mov	r1, r6
   2ac0c:	mov	r0, r9
   2ac10:	bl	29da0 <__assert_fail@plt+0x170fc>
   2ac14:	cmn	r0, #1
   2ac18:	mov	r4, r0
   2ac1c:	bne	2abe0 <__assert_fail@plt+0x17f3c>
   2ac20:	cmp	r5, #0
   2ac24:	bne	2ac38 <__assert_fail@plt+0x17f94>
   2ac28:	mov	r0, r6
   2ac2c:	bl	125e4 <gcry_free@plt>
   2ac30:	mov	r0, r7
   2ac34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ac38:	mov	r1, r5
   2ac3c:	mov	r0, r6
   2ac40:	bl	22068 <__assert_fail@plt+0xf3c4>
   2ac44:	b	2ac28 <__assert_fail@plt+0x17f84>
   2ac48:	ldr	r3, [pc, #32]	; 2ac70 <__assert_fail@plt+0x17fcc>
   2ac4c:	ldr	r2, [pc, #32]	; 2ac74 <__assert_fail@plt+0x17fd0>
   2ac50:	ldr	r1, [pc, #32]	; 2ac78 <__assert_fail@plt+0x17fd4>
   2ac54:	ldr	r0, [pc, #32]	; 2ac7c <__assert_fail@plt+0x17fd8>
   2ac58:	bl	12ca4 <__assert_fail@plt>
   2ac5c:	ldr	r3, [pc, #12]	; 2ac70 <__assert_fail@plt+0x17fcc>
   2ac60:	ldr	r2, [pc, #24]	; 2ac80 <__assert_fail@plt+0x17fdc>
   2ac64:	ldr	r1, [pc, #12]	; 2ac78 <__assert_fail@plt+0x17fd4>
   2ac68:	ldr	r0, [pc, #20]	; 2ac84 <__assert_fail@plt+0x17fe0>
   2ac6c:	bl	12ca4 <__assert_fail@plt>
   2ac70:	andeq	r4, r3, r0, ror #3
   2ac74:	andeq	r0, r0, pc, lsr #17
   2ac78:			; <UNDEFINED> instruction: 0x000342b8
   2ac7c:	andeq	r4, r3, ip, asr #27
   2ac80:	andeq	r0, r0, lr, lsr #17
   2ac84:	andeq	r4, r3, ip, lsl #27
   2ac88:	ldr	r3, [r0]
   2ac8c:	push	{r4, lr}
   2ac90:	cmp	r3, #1
   2ac94:	bls	2acc8 <__assert_fail@plt+0x18024>
   2ac98:	ldr	r3, [r0, #76]	; 0x4c
   2ac9c:	mov	r4, r0
   2aca0:	cmp	r3, #0
   2aca4:	popeq	{r4, pc}
   2aca8:	mov	r2, #0
   2acac:	ldr	r1, [r4, #60]	; 0x3c
   2acb0:	mov	r0, r4
   2acb4:	bl	29a0c <__assert_fail@plt+0x16d68>
   2acb8:	ldr	r3, [r4, #76]	; 0x4c
   2acbc:	cmp	r3, #0
   2acc0:	bne	2aca8 <__assert_fail@plt+0x18004>
   2acc4:	pop	{r4, pc}
   2acc8:	ldr	r0, [pc]	; 2acd0 <__assert_fail@plt+0x1802c>
   2accc:	bl	21dc4 <__assert_fail@plt+0xf120>
   2acd0:	andeq	r4, r3, ip, lsl #28
   2acd4:	ldr	r3, [r1]
   2acd8:	push	{r4, r5, r6, lr}
   2acdc:	sub	r3, r3, #2
   2ace0:	cmp	r3, #1
   2ace4:	bhi	2ad1c <__assert_fail@plt+0x18078>
   2ace8:	ldr	r3, [r0]
   2acec:	mov	r5, r0
   2acf0:	sub	r3, r3, #2
   2acf4:	cmp	r3, #1
   2acf8:	bhi	2ad30 <__assert_fail@plt+0x1808c>
   2acfc:	mov	r4, r1
   2ad00:	mov	r0, r1
   2ad04:	bl	2ac88 <__assert_fail@plt+0x17fe4>
   2ad08:	mov	r0, r5
   2ad0c:	ldr	r2, [r4, #44]	; 0x2c
   2ad10:	ldr	r1, [r4, #48]	; 0x30
   2ad14:	pop	{r4, r5, r6, lr}
   2ad18:	b	2a0a4 <__assert_fail@plt+0x17400>
   2ad1c:	ldr	r3, [pc, #32]	; 2ad44 <__assert_fail@plt+0x180a0>
   2ad20:	mov	r2, #2176	; 0x880
   2ad24:	ldr	r1, [pc, #28]	; 2ad48 <__assert_fail@plt+0x180a4>
   2ad28:	ldr	r0, [pc, #28]	; 2ad4c <__assert_fail@plt+0x180a8>
   2ad2c:	bl	12ca4 <__assert_fail@plt>
   2ad30:	ldr	r3, [pc, #12]	; 2ad44 <__assert_fail@plt+0x180a0>
   2ad34:	ldr	r2, [pc, #20]	; 2ad50 <__assert_fail@plt+0x180ac>
   2ad38:	ldr	r1, [pc, #8]	; 2ad48 <__assert_fail@plt+0x180a4>
   2ad3c:	ldr	r0, [pc, #16]	; 2ad54 <__assert_fail@plt+0x180b0>
   2ad40:	bl	12ca4 <__assert_fail@plt>
   2ad44:	andeq	r4, r3, ip, ror #3
   2ad48:			; <UNDEFINED> instruction: 0x000342b8
   2ad4c:	andeq	r4, r3, ip, lsr lr
   2ad50:	andeq	r0, r0, r1, lsl #17
   2ad54:	andeq	r4, r3, ip, ror lr
   2ad58:	push	{r4, r5, lr}
   2ad5c:	orrs	ip, r2, r3
   2ad60:	ldr	r1, [r0, #24]
   2ad64:	ldr	lr, [r0, #16]
   2ad68:	ldr	ip, [r0, #28]
   2ad6c:	ldr	r5, [r0, #20]
   2ad70:	strd	r2, [r0, #8]
   2ad74:	movne	r4, #1
   2ad78:	moveq	r4, #0
   2ad7c:	mov	r2, #0
   2ad80:	adds	r1, r1, lr
   2ad84:	mov	r3, #0
   2ad88:	adc	ip, ip, r5
   2ad8c:	str	r4, [r0, #32]
   2ad90:	str	r1, [r0, #24]
   2ad94:	str	ip, [r0, #28]
   2ad98:	strd	r2, [r0, #16]
   2ad9c:	pop	{r4, r5, pc}
   2ada0:	push	{r4, lr}
   2ada4:	sub	sp, sp, #112	; 0x70
   2ada8:	ldr	r4, [pc, #156]	; 2ae4c <__assert_fail@plt+0x181a8>
   2adac:	cmp	r1, #0
   2adb0:	ldr	r3, [r4]
   2adb4:	str	r3, [sp, #108]	; 0x6c
   2adb8:	movne	r3, #0
   2adbc:	strne	r3, [r1]
   2adc0:	b	2adc8 <__assert_fail@plt+0x18124>
   2adc4:	mov	r0, r3
   2adc8:	ldr	r3, [r0, #76]	; 0x4c
   2adcc:	cmp	r3, #0
   2add0:	bne	2adc4 <__assert_fail@plt+0x18120>
   2add4:	ldr	r2, [r0, #60]	; 0x3c
   2add8:	ldr	r3, [pc, #112]	; 2ae50 <__assert_fail@plt+0x181ac>
   2addc:	cmp	r2, r3
   2ade0:	movne	r0, #0
   2ade4:	movne	r1, #0
   2ade8:	beq	2ae04 <__assert_fail@plt+0x18160>
   2adec:	ldr	r2, [sp, #108]	; 0x6c
   2adf0:	ldr	r3, [r4]
   2adf4:	cmp	r2, r3
   2adf8:	bne	2ae48 <__assert_fail@plt+0x181a4>
   2adfc:	add	sp, sp, #112	; 0x70
   2ae00:	pop	{r4, pc}
   2ae04:	ldr	r3, [r0, #64]	; 0x40
   2ae08:	mov	r2, sp
   2ae0c:	mov	r0, #3
   2ae10:	ldr	r1, [r3]
   2ae14:	bl	126f8 <__fxstat64@plt>
   2ae18:	cmp	r0, #0
   2ae1c:	ldrdeq	r0, [sp, #48]	; 0x30
   2ae20:	beq	2adec <__assert_fail@plt+0x18148>
   2ae24:	bl	12968 <__errno_location@plt>
   2ae28:	ldr	r0, [r0]
   2ae2c:	bl	12818 <strerror@plt>
   2ae30:	mov	r1, r0
   2ae34:	ldr	r0, [pc, #24]	; 2ae54 <__assert_fail@plt+0x181b0>
   2ae38:	bl	21cbc <__assert_fail@plt+0xf018>
   2ae3c:	mov	r0, #0
   2ae40:	mov	r1, #0
   2ae44:	b	2adec <__assert_fail@plt+0x18148>
   2ae48:	bl	1262c <__stack_chk_fail@plt>
   2ae4c:	strdeq	r5, [r4], -r8
   2ae50:	andeq	r7, r2, r8, lsr #28
   2ae54:			; <UNDEFINED> instruction: 0x00034eb8
   2ae58:	b	2ae60 <__assert_fail@plt+0x181bc>
   2ae5c:	mov	r0, r3
   2ae60:	ldr	r3, [r0, #76]	; 0x4c
   2ae64:	cmp	r3, #0
   2ae68:	bne	2ae5c <__assert_fail@plt+0x181b8>
   2ae6c:	ldr	r3, [pc, #20]	; 2ae88 <__assert_fail@plt+0x181e4>
   2ae70:	ldr	r2, [r0, #60]	; 0x3c
   2ae74:	cmp	r2, r3
   2ae78:	ldreq	r3, [r0, #64]	; 0x40
   2ae7c:	ldreq	r0, [r3]
   2ae80:	mvnne	r0, #0
   2ae84:	bx	lr
   2ae88:	andeq	r7, r2, r8, lsr #28
   2ae8c:	ldr	r3, [r0, #24]
   2ae90:	ldr	r2, [r0, #16]
   2ae94:	ldr	ip, [r0, #28]
   2ae98:	ldr	r1, [r0, #20]
   2ae9c:	adds	r0, r3, r2
   2aea0:	adc	r1, ip, r1
   2aea4:	bx	lr
   2aea8:	push	{r4, r5, r6, r7, lr}
   2aeac:	mov	r7, r3
   2aeb0:	ldr	r3, [r0]
   2aeb4:	sub	sp, sp, #12
   2aeb8:	bics	r3, r3, #2
   2aebc:	mov	r4, r0
   2aec0:	mov	r6, r2
   2aec4:	beq	2af38 <__assert_fail@plt+0x18294>
   2aec8:	ldr	r3, [r4, #76]	; 0x4c
   2aecc:	mov	r0, #0
   2aed0:	mov	r1, #0
   2aed4:	cmp	r3, #0
   2aed8:	mov	r3, #0
   2aedc:	strd	r6, [r4, #24]
   2aee0:	strd	r0, [r4, #16]
   2aee4:	strd	r0, [r4, #8]
   2aee8:	str	r3, [r4, #40]	; 0x28
   2aeec:	str	r3, [r4, #32]
   2aef0:	str	r3, [r4, #56]	; 0x38
   2aef4:	beq	2af28 <__assert_fail@plt+0x18284>
   2aef8:	ldr	r0, [pc, #172]	; 2afac <__assert_fail@plt+0x18308>
   2aefc:	bl	21e08 <__assert_fail@plt+0xf164>
   2af00:	ldr	r3, [r4, #76]	; 0x4c
   2af04:	cmp	r3, #0
   2af08:	beq	2af28 <__assert_fail@plt+0x18284>
   2af0c:	mov	r2, #0
   2af10:	ldr	r1, [r4, #60]	; 0x3c
   2af14:	mov	r0, r4
   2af18:	bl	29a0c <__assert_fail@plt+0x16d68>
   2af1c:	ldr	r3, [r4, #76]	; 0x4c
   2af20:	cmp	r3, #0
   2af24:	bne	2af0c <__assert_fail@plt+0x18268>
   2af28:	mov	r0, #0
   2af2c:	add	sp, sp, #12
   2af30:	pop	{r4, r5, r6, r7, pc}
   2af34:	mov	r4, r5
   2af38:	ldr	r5, [r4, #76]	; 0x4c
   2af3c:	cmp	r5, #0
   2af40:	bne	2af34 <__assert_fail@plt+0x18290>
   2af44:	ldr	r3, [pc, #100]	; 2afb0 <__assert_fail@plt+0x1830c>
   2af48:	ldr	r2, [r4, #60]	; 0x3c
   2af4c:	cmp	r2, r3
   2af50:	bne	2afa4 <__assert_fail@plt+0x18300>
   2af54:	ldr	r1, [r4, #64]	; 0x40
   2af58:	mov	r2, r6
   2af5c:	mov	r3, r7
   2af60:	ldr	r0, [r1]
   2af64:	str	r5, [sp]
   2af68:	bl	12734 <lseek64@plt>
   2af6c:	mvn	r3, #0
   2af70:	mvn	r2, #0
   2af74:	cmp	r1, r3
   2af78:	cmpeq	r0, r2
   2af7c:	strne	r5, [r4, #44]	; 0x2c
   2af80:	bne	2aec8 <__assert_fail@plt+0x18224>
   2af84:	bl	12968 <__errno_location@plt>
   2af88:	ldr	r0, [r0]
   2af8c:	bl	12818 <strerror@plt>
   2af90:	mov	r1, r0
   2af94:	ldr	r0, [pc, #24]	; 2afb4 <__assert_fail@plt+0x18310>
   2af98:	bl	21cbc <__assert_fail@plt+0xf018>
   2af9c:	mvn	r0, #0
   2afa0:	b	2af2c <__assert_fail@plt+0x18288>
   2afa4:	mvn	r0, #0
   2afa8:	b	2af2c <__assert_fail@plt+0x18288>
   2afac:	andeq	r4, r3, r0, ror #29
   2afb0:	andeq	r7, r2, r8, lsr #28
   2afb4:	andeq	r4, r3, ip, asr #29
   2afb8:	ldr	r3, [r0, #72]	; 0x48
   2afbc:	cmp	r3, #0
   2afc0:	beq	2afcc <__assert_fail@plt+0x18328>
   2afc4:	mov	r0, r3
   2afc8:	bx	lr
   2afcc:	b	28da4 <__assert_fail@plt+0x16100>
   2afd0:	cmp	r0, #0
   2afd4:	bxeq	lr
   2afd8:	ldr	r2, [r0, #76]	; 0x4c
   2afdc:	cmp	r2, #0
   2afe0:	bne	2afec <__assert_fail@plt+0x18348>
   2afe4:	b	2b010 <__assert_fail@plt+0x1836c>
   2afe8:	mov	r2, r3
   2afec:	ldr	r3, [r2, #76]	; 0x4c
   2aff0:	cmp	r3, #0
   2aff4:	bne	2afe8 <__assert_fail@plt+0x18344>
   2aff8:	ldr	r3, [pc, #36]	; 2b024 <__assert_fail@plt+0x18380>
   2affc:	ldr	r1, [r2, #60]	; 0x3c
   2b000:	cmp	r1, r3
   2b004:	beq	2b018 <__assert_fail@plt+0x18374>
   2b008:	mov	r0, #0
   2b00c:	bx	lr
   2b010:	mov	r2, r0
   2b014:	b	2aff8 <__assert_fail@plt+0x18354>
   2b018:	ldr	r0, [r2, #64]	; 0x40
   2b01c:	add	r0, r0, #20
   2b020:	bx	lr
   2b024:	andeq	r7, r2, r8, lsr #28
   2b028:	cmp	r0, #0
   2b02c:	beq	2b060 <__assert_fail@plt+0x183bc>
   2b030:	ldr	r2, [r0, #76]	; 0x4c
   2b034:	cmp	r2, #0
   2b038:	bne	2b044 <__assert_fail@plt+0x183a0>
   2b03c:	b	2b07c <__assert_fail@plt+0x183d8>
   2b040:	mov	r2, r3
   2b044:	ldr	r3, [r2, #76]	; 0x4c
   2b048:	cmp	r3, #0
   2b04c:	bne	2b040 <__assert_fail@plt+0x1839c>
   2b050:	ldr	r3, [pc, #44]	; 2b084 <__assert_fail@plt+0x183e0>
   2b054:	ldr	r1, [r2, #60]	; 0x3c
   2b058:	cmp	r1, r3
   2b05c:	beq	2b068 <__assert_fail@plt+0x183c4>
   2b060:	ldr	r0, [pc, #32]	; 2b088 <__assert_fail@plt+0x183e4>
   2b064:	bx	lr
   2b068:	ldr	r0, [r2, #64]	; 0x40
   2b06c:	ldr	r3, [pc, #20]	; 2b088 <__assert_fail@plt+0x183e4>
   2b070:	adds	r0, r0, #20
   2b074:	moveq	r0, r3
   2b078:	bx	lr
   2b07c:	mov	r2, r0
   2b080:	b	2b050 <__assert_fail@plt+0x183ac>
   2b084:	andeq	r7, r2, r8, lsr #28
   2b088:	andeq	r4, r3, r8, lsl pc
   2b08c:	push	{r4, r5, r6, lr}
   2b090:	subs	r5, r1, #0
   2b094:	mov	r4, r0
   2b098:	bne	2b0d4 <__assert_fail@plt+0x18430>
   2b09c:	ldr	r3, [r0]
   2b0a0:	cmp	r3, #0
   2b0a4:	beq	2b0c8 <__assert_fail@plt+0x18424>
   2b0a8:	ldr	r3, [pc, #124]	; 2b12c <__assert_fail@plt+0x18488>
   2b0ac:	ldr	r1, [r4, #60]	; 0x3c
   2b0b0:	cmp	r1, r3
   2b0b4:	bne	2b118 <__assert_fail@plt+0x18474>
   2b0b8:	mov	r0, r4
   2b0bc:	mov	r2, #0
   2b0c0:	pop	{r4, r5, r6, lr}
   2b0c4:	b	29a0c <__assert_fail@plt+0x16d68>
   2b0c8:	ldr	r0, [pc, #96]	; 2b130 <__assert_fail@plt+0x1848c>
   2b0cc:	bl	21e08 <__assert_fail@plt+0xf164>
   2b0d0:	b	2b0a8 <__assert_fail@plt+0x18404>
   2b0d4:	mov	r1, #32
   2b0d8:	mov	r0, #1
   2b0dc:	bl	12bcc <gcry_xcalloc@plt>
   2b0e0:	ldr	r3, [r4]
   2b0e4:	mov	lr, #0
   2b0e8:	mov	r1, #1
   2b0ec:	mov	ip, r0
   2b0f0:	mov	r2, ip
   2b0f4:	mov	r0, r4
   2b0f8:	str	r5, [ip, #24]
   2b0fc:	str	r3, [ip]
   2b100:	str	r1, [ip, #12]
   2b104:	mov	r3, lr
   2b108:	str	lr, [ip, #4]
   2b10c:	ldr	r1, [pc, #24]	; 2b12c <__assert_fail@plt+0x18488>
   2b110:	pop	{r4, r5, r6, lr}
   2b114:	b	297f4 <__assert_fail@plt+0x16b50>
   2b118:	ldr	r3, [pc, #20]	; 2b134 <__assert_fail@plt+0x18490>
   2b11c:	mov	r2, #2528	; 0x9e0
   2b120:	ldr	r1, [pc, #16]	; 2b138 <__assert_fail@plt+0x18494>
   2b124:	ldr	r0, [pc, #16]	; 2b13c <__assert_fail@plt+0x18498>
   2b128:	bl	22044 <__assert_fail@plt+0xf3a0>
   2b12c:	andeq	sl, r2, ip, asr #2
   2b130:	andeq	r4, r3, ip, lsl pc
   2b134:	andeq	r4, r3, r0, lsl #4
   2b138:			; <UNDEFINED> instruction: 0x000342b8
   2b13c:	andeq	r4, r3, r0, ror #30
   2b140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b144:	sub	sp, sp, #12
   2b148:	ldr	r8, [r2]
   2b14c:	ldr	sl, [r1]
   2b150:	clz	ip, sl
   2b154:	lsr	ip, ip, #5
   2b158:	mov	r9, r2
   2b15c:	str	r3, [sp, #4]
   2b160:	mov	r2, r3
   2b164:	cmp	r8, #1
   2b168:	movls	r3, ip
   2b16c:	orrhi	r3, ip, #1
   2b170:	cmp	r3, #0
   2b174:	str	r1, [sp]
   2b178:	mov	r4, r0
   2b17c:	ldr	r7, [r2]
   2b180:	bne	2b1b8 <__assert_fail@plt+0x18514>
   2b184:	cmp	r7, #1
   2b188:	bls	2b350 <__assert_fail@plt+0x186ac>
   2b18c:	cmp	r7, #256	; 0x100
   2b190:	movcc	r8, r7
   2b194:	movcs	r8, #256	; 0x100
   2b198:	mov	r0, sl
   2b19c:	mov	r1, r8
   2b1a0:	bl	127e8 <gcry_xrealloc@plt>
   2b1a4:	ldr	r3, [sp]
   2b1a8:	mov	sl, r0
   2b1ac:	str	r0, [r3]
   2b1b0:	str	r8, [r9]
   2b1b4:	b	2b1c8 <__assert_fail@plt+0x18524>
   2b1b8:	cmp	r8, #1
   2b1bc:	orrls	ip, ip, #1
   2b1c0:	cmp	ip, #0
   2b1c4:	bne	2b18c <__assert_fail@plt+0x184e8>
   2b1c8:	mov	fp, sl
   2b1cc:	mov	r6, #0
   2b1d0:	b	2b224 <__assert_fail@plt+0x18580>
   2b1d4:	ldr	ip, [r4, #16]
   2b1d8:	ldr	lr, [r4, #20]
   2b1dc:	ldr	r5, [r4, #48]	; 0x30
   2b1e0:	adds	ip, ip, #1
   2b1e4:	str	ip, [r4, #16]
   2b1e8:	adc	lr, lr, #0
   2b1ec:	add	ip, r0, #1
   2b1f0:	str	lr, [r4, #20]
   2b1f4:	str	ip, [r4, #40]	; 0x28
   2b1f8:	ldrb	ip, [r5, r0]
   2b1fc:	mov	r0, ip
   2b200:	mov	r5, fp
   2b204:	cmp	r0, #10
   2b208:	add	r6, r6, #1
   2b20c:	strb	ip, [r5], #1
   2b210:	beq	2b320 <__assert_fail@plt+0x1867c>
   2b214:	sub	r0, r8, #1
   2b218:	cmp	r0, r6
   2b21c:	beq	2b258 <__assert_fail@plt+0x185b4>
   2b220:	mov	fp, r5
   2b224:	ldr	r0, [r4, #32]
   2b228:	cmp	r0, #0
   2b22c:	bne	2b240 <__assert_fail@plt+0x1859c>
   2b230:	ldr	r0, [r4, #40]	; 0x28
   2b234:	ldr	ip, [r4, #44]	; 0x2c
   2b238:	cmp	r0, ip
   2b23c:	bcc	2b1d4 <__assert_fail@plt+0x18530>
   2b240:	mov	r0, r4
   2b244:	bl	29cac <__assert_fail@plt+0x17008>
   2b248:	cmn	r0, #1
   2b24c:	beq	2b334 <__assert_fail@plt+0x18690>
   2b250:	uxtb	ip, r0
   2b254:	b	2b200 <__assert_fail@plt+0x1855c>
   2b258:	cmp	r8, r7
   2b25c:	beq	2b2bc <__assert_fail@plt+0x18618>
   2b260:	ldr	r3, [pc, #252]	; 2b364 <__assert_fail@plt+0x186c0>
   2b264:	mov	r0, sl
   2b268:	cmp	r8, r3
   2b26c:	movls	r3, #256	; 0x100
   2b270:	movhi	r3, #1024	; 0x400
   2b274:	add	r2, r8, r3
   2b278:	cmp	r7, r2
   2b27c:	movcc	r8, r7
   2b280:	movcs	r8, r2
   2b284:	mov	r1, r8
   2b288:	bl	127e8 <gcry_xrealloc@plt>
   2b28c:	ldr	r3, [sp]
   2b290:	mov	sl, r0
   2b294:	str	r0, [r3]
   2b298:	add	r5, r0, r6
   2b29c:	str	r8, [r9]
   2b2a0:	b	2b220 <__assert_fail@plt+0x1857c>
   2b2a4:	mov	r0, r4
   2b2a8:	bl	29cac <__assert_fail@plt+0x17008>
   2b2ac:	cmn	r0, #1
   2b2b0:	beq	2b304 <__assert_fail@plt+0x18660>
   2b2b4:	cmp	r0, #10
   2b2b8:	beq	2b304 <__assert_fail@plt+0x18660>
   2b2bc:	ldr	r2, [r4, #32]
   2b2c0:	cmp	r2, #0
   2b2c4:	bne	2b2a4 <__assert_fail@plt+0x18600>
   2b2c8:	ldr	r2, [r4, #40]	; 0x28
   2b2cc:	ldr	r0, [r4, #44]	; 0x2c
   2b2d0:	cmp	r2, r0
   2b2d4:	bcs	2b2a4 <__assert_fail@plt+0x18600>
   2b2d8:	ldr	r0, [r4, #16]
   2b2dc:	ldr	ip, [r4, #20]
   2b2e0:	ldr	lr, [r4, #48]	; 0x30
   2b2e4:	adds	r0, r0, #1
   2b2e8:	str	r0, [r4, #16]
   2b2ec:	adc	ip, ip, #0
   2b2f0:	add	r0, r2, #1
   2b2f4:	str	ip, [r4, #20]
   2b2f8:	str	r0, [r4, #40]	; 0x28
   2b2fc:	ldrb	r0, [lr, r2]
   2b300:	b	2b2b4 <__assert_fail@plt+0x18610>
   2b304:	cmp	sl, r5
   2b308:	bcs	2b33c <__assert_fail@plt+0x18698>
   2b30c:	ldr	r3, [sp, #4]
   2b310:	mov	r1, #10
   2b314:	mov	r2, #0
   2b318:	strb	r1, [fp]
   2b31c:	str	r2, [r3]
   2b320:	mov	r3, #0
   2b324:	mov	r0, r6
   2b328:	strb	r3, [r5]
   2b32c:	add	sp, sp, #12
   2b330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b334:	mov	r5, fp
   2b338:	b	2b320 <__assert_fail@plt+0x1867c>
   2b33c:	ldr	r3, [pc, #36]	; 2b368 <__assert_fail@plt+0x186c4>
   2b340:	ldr	r2, [pc, #36]	; 2b36c <__assert_fail@plt+0x186c8>
   2b344:	ldr	r1, [pc, #36]	; 2b370 <__assert_fail@plt+0x186cc>
   2b348:	ldr	r0, [pc, #36]	; 2b374 <__assert_fail@plt+0x186d0>
   2b34c:	bl	12ca4 <__assert_fail@plt>
   2b350:	ldr	r3, [pc, #16]	; 2b368 <__assert_fail@plt+0x186c4>
   2b354:	mov	r2, #2560	; 0xa00
   2b358:	ldr	r1, [pc, #16]	; 2b370 <__assert_fail@plt+0x186cc>
   2b35c:	ldr	r0, [pc, #20]	; 2b378 <__assert_fail@plt+0x186d4>
   2b360:	bl	12ca4 <__assert_fail@plt>
   2b364:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2b368:	andeq	r4, r3, r4, lsr #4
   2b36c:	andeq	r0, r0, r1, lsr #20
   2b370:			; <UNDEFINED> instruction: 0x000342b8
   2b374:	andeq	r4, r3, r4, lsr #31
   2b378:	andeq	r4, r3, ip, ror pc
   2b37c:	cmp	r2, #0
   2b380:	push	{r4, r5, r6, r7, r8, lr}
   2b384:	mov	r4, r0
   2b388:	bne	2b460 <__assert_fail@plt+0x187bc>
   2b38c:	cmp	r1, #0
   2b390:	mov	r5, r1
   2b394:	popeq	{r4, r5, r6, r7, r8, pc}
   2b398:	ldr	r3, [r4, #32]
   2b39c:	mov	r0, r4
   2b3a0:	cmp	r3, #0
   2b3a4:	beq	2b400 <__assert_fail@plt+0x1875c>
   2b3a8:	bl	29cac <__assert_fail@plt+0x17008>
   2b3ac:	sub	r5, r5, #1
   2b3b0:	cmn	r0, #1
   2b3b4:	popeq	{r4, r5, r6, r7, r8, pc}
   2b3b8:	cmp	r5, #0
   2b3bc:	bne	2b3f0 <__assert_fail@plt+0x1874c>
   2b3c0:	pop	{r4, r5, r6, r7, r8, pc}
   2b3c4:	ldrd	r2, [r4, #16]
   2b3c8:	cmp	ip, r5
   2b3cc:	movcs	ip, r5
   2b3d0:	adds	r6, r2, ip
   2b3d4:	sub	r5, r5, ip
   2b3d8:	adc	r7, r3, #0
   2b3dc:	cmp	r5, #0
   2b3e0:	add	r1, r1, ip
   2b3e4:	str	r1, [r4, #40]	; 0x28
   2b3e8:	strd	r6, [r4, #16]
   2b3ec:	popeq	{r4, r5, r6, r7, r8, pc}
   2b3f0:	ldr	r3, [r4, #32]
   2b3f4:	mov	r0, r4
   2b3f8:	cmp	r3, #0
   2b3fc:	bne	2b3a8 <__assert_fail@plt+0x18704>
   2b400:	ldr	r1, [r4, #40]	; 0x28
   2b404:	ldr	r3, [r4, #44]	; 0x2c
   2b408:	cmp	r1, r3
   2b40c:	sub	ip, r3, r1
   2b410:	bcc	2b3c4 <__assert_fail@plt+0x18720>
   2b414:	b	2b3a8 <__assert_fail@plt+0x18704>
   2b418:	ldr	r2, [r4, #44]	; 0x2c
   2b41c:	ldr	r3, [r4, #40]	; 0x28
   2b420:	cmp	r3, r2
   2b424:	sub	ip, r2, r3
   2b428:	bcs	2b450 <__assert_fail@plt+0x187ac>
   2b42c:	ldrd	r0, [r4, #16]
   2b430:	str	r2, [r4, #40]	; 0x28
   2b434:	ldr	r3, [r4, #40]	; 0x28
   2b438:	adds	r6, r0, ip
   2b43c:	adc	r7, r1, #0
   2b440:	cmp	r3, r2
   2b444:	strd	r6, [r4, #16]
   2b448:	sub	ip, r2, r3
   2b44c:	bcc	2b42c <__assert_fail@plt+0x18788>
   2b450:	mov	r0, r4
   2b454:	bl	29cac <__assert_fail@plt+0x17008>
   2b458:	cmn	r0, #1
   2b45c:	popeq	{r4, r5, r6, r7, r8, pc}
   2b460:	ldr	r3, [r4, #32]
   2b464:	cmp	r3, #0
   2b468:	bne	2b450 <__assert_fail@plt+0x187ac>
   2b46c:	b	2b418 <__assert_fail@plt+0x18774>
   2b470:	ldr	r3, [pc, #8]	; 2b480 <__assert_fail@plt+0x187dc>
   2b474:	mov	r2, #1
   2b478:	str	r2, [r3]
   2b47c:	bx	lr
   2b480:	ldrdeq	r6, [r4], -r8
   2b484:	push	{r4, r5, r6, lr}
   2b488:	sub	sp, sp, #288	; 0x120
   2b48c:	ldr	r4, [pc, #108]	; 2b500 <__assert_fail@plt+0x1885c>
   2b490:	cmp	r2, #0
   2b494:	mov	r6, r1
   2b498:	ldr	r3, [r4]
   2b49c:	mov	r5, r0
   2b4a0:	str	r3, [sp, #284]	; 0x11c
   2b4a4:	beq	2b4c0 <__assert_fail@plt+0x1881c>
   2b4a8:	add	r2, sp, #4
   2b4ac:	mov	r1, #0
   2b4b0:	bl	12704 <sigaction@plt>
   2b4b4:	ldr	r3, [sp, #4]
   2b4b8:	cmp	r3, #1
   2b4bc:	beq	2b4e4 <__assert_fail@plt+0x18840>
   2b4c0:	add	r0, sp, #148	; 0x94
   2b4c4:	str	r6, [sp, #144]	; 0x90
   2b4c8:	bl	12aac <sigemptyset@plt>
   2b4cc:	mov	r3, #0
   2b4d0:	mov	r0, r5
   2b4d4:	add	r1, sp, #144	; 0x90
   2b4d8:	mov	r2, r3
   2b4dc:	str	r3, [sp, #276]	; 0x114
   2b4e0:	bl	12704 <sigaction@plt>
   2b4e4:	ldr	r2, [sp, #284]	; 0x11c
   2b4e8:	ldr	r3, [r4]
   2b4ec:	cmp	r2, r3
   2b4f0:	bne	2b4fc <__assert_fail@plt+0x18858>
   2b4f4:	add	sp, sp, #288	; 0x120
   2b4f8:	pop	{r4, r5, r6, pc}
   2b4fc:	bl	1262c <__stack_chk_fail@plt>
   2b500:	strdeq	r5, [r4], -r8
   2b504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b508:	mov	r7, r0
   2b50c:	ldr	r4, [pc, #392]	; 2b69c <__assert_fail@plt+0x189f8>
   2b510:	sub	sp, sp, #12
   2b514:	ldr	r3, [r4, #4]
   2b518:	cmp	r3, #0
   2b51c:	bne	2b67c <__assert_fail@plt+0x189d8>
   2b520:	ldr	r3, [r4, #8]
   2b524:	mov	r2, #1
   2b528:	cmp	r3, #0
   2b52c:	str	r2, [r4, #4]
   2b530:	beq	2b538 <__assert_fail@plt+0x18894>
   2b534:	blx	r3
   2b538:	mov	r2, #1
   2b53c:	ldr	r1, [pc, #348]	; 2b6a0 <__assert_fail@plt+0x189fc>
   2b540:	mov	r0, #2
   2b544:	bl	12a10 <write@plt>
   2b548:	mov	r0, #0
   2b54c:	bl	21a68 <__assert_fail@plt+0xedc4>
   2b550:	subs	r4, r0, #0
   2b554:	beq	2b56c <__assert_fail@plt+0x188c8>
   2b558:	bl	128d8 <strlen@plt>
   2b55c:	mov	r1, r4
   2b560:	mov	r2, r0
   2b564:	mov	r0, #2
   2b568:	bl	12a10 <write@plt>
   2b56c:	mov	r2, #9
   2b570:	ldr	r1, [pc, #300]	; 2b6a4 <__assert_fail@plt+0x18a00>
   2b574:	mov	r0, #2
   2b578:	bl	12a10 <write@plt>
   2b57c:	cmp	r7, #64	; 0x40
   2b580:	bhi	2b618 <__assert_fail@plt+0x18974>
   2b584:	ldr	r3, [pc, #284]	; 2b6a8 <__assert_fail@plt+0x18a04>
   2b588:	ldr	r1, [r3, r7, lsl #2]
   2b58c:	cmp	r1, #0
   2b590:	bne	2b684 <__assert_fail@plt+0x189e0>
   2b594:	ldr	r4, [pc, #272]	; 2b6ac <__assert_fail@plt+0x18a08>
   2b598:	ldr	r9, [pc, #272]	; 2b6b0 <__assert_fail@plt+0x18a0c>
   2b59c:	ldr	r8, [pc, #272]	; 2b6b4 <__assert_fail@plt+0x18a10>
   2b5a0:	mov	r5, r1
   2b5a4:	mov	sl, r7
   2b5a8:	mov	r6, #5
   2b5ac:	cmp	r4, sl
   2b5b0:	and	r3, r5, #1
   2b5b4:	mov	r1, r4
   2b5b8:	mov	r0, sl
   2b5bc:	ble	2b658 <__assert_fail@plt+0x189b4>
   2b5c0:	cmp	r4, #1
   2b5c4:	orreq	r3, r3, #1
   2b5c8:	cmp	r3, #0
   2b5cc:	moveq	r5, r3
   2b5d0:	beq	2b600 <__assert_fail@plt+0x1895c>
   2b5d4:	bl	2fc80 <__assert_fail@plt+0x1cfdc>
   2b5d8:	mov	r2, #1
   2b5dc:	mov	r1, r9
   2b5e0:	cmp	r0, #0
   2b5e4:	mov	r0, #2
   2b5e8:	bne	2b600 <__assert_fail@plt+0x1895c>
   2b5ec:	bl	12a10 <write@plt>
   2b5f0:	mov	r0, sl
   2b5f4:	mov	r1, r4
   2b5f8:	bl	2fea0 <__assert_fail@plt+0x1d1fc>
   2b5fc:	mov	sl, r1
   2b600:	smull	r2, r3, r8, r4
   2b604:	subs	r6, r6, #1
   2b608:	asr	r4, r4, #31
   2b60c:	rsb	r4, r4, r3, asr #2
   2b610:	bne	2b5ac <__assert_fail@plt+0x18908>
   2b614:	b	2b628 <__assert_fail@plt+0x18984>
   2b618:	ldr	r1, [pc, #152]	; 2b6b8 <__assert_fail@plt+0x18a14>
   2b61c:	mov	r2, #1
   2b620:	mov	r0, #2
   2b624:	bl	12a10 <write@plt>
   2b628:	mov	r2, #20
   2b62c:	ldr	r1, [pc, #136]	; 2b6bc <__assert_fail@plt+0x18a18>
   2b630:	mov	r0, #2
   2b634:	bl	12a10 <write@plt>
   2b638:	mov	r2, #0
   2b63c:	mov	r0, r7
   2b640:	mov	r1, r2
   2b644:	bl	2b484 <__assert_fail@plt+0x187e0>
   2b648:	mov	r0, r7
   2b64c:	add	sp, sp, #12
   2b650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b654:	b	12440 <raise@plt>
   2b658:	bl	2fc80 <__assert_fail@plt+0x1cfdc>
   2b65c:	mov	r2, #1
   2b660:	mov	fp, r0
   2b664:	add	r1, r9, r0
   2b668:	mov	r0, #2
   2b66c:	bl	12a10 <write@plt>
   2b670:	cmp	fp, #0
   2b674:	movne	r5, #1
   2b678:	b	2b5f0 <__assert_fail@plt+0x1894c>
   2b67c:	bl	12440 <raise@plt>
   2b680:	b	2b520 <__assert_fail@plt+0x1887c>
   2b684:	mov	r0, r1
   2b688:	str	r1, [sp, #4]
   2b68c:	bl	128d8 <strlen@plt>
   2b690:	ldr	r1, [sp, #4]
   2b694:	mov	r2, r0
   2b698:	b	2b620 <__assert_fail@plt+0x1897c>
   2b69c:	ldrdeq	r6, [r4], -r8
   2b6a0:	andeq	r0, r3, r0, lsl #26
   2b6a4:	andeq	r4, r3, r4, asr #31
   2b6a8:	strdeq	r5, [r4], -ip
   2b6ac:	andeq	r2, r0, r0, lsl r7
   2b6b0:	ldrdeq	r4, [r3], -r0
   2b6b4:	strbtvs	r6, [r6], -r7, ror #12
   2b6b8:	andeq	r3, r3, ip, lsl #13
   2b6bc:	ldrdeq	r4, [r3], -ip
   2b6c0:	push	{r4, lr}
   2b6c4:	subs	r4, r0, #0
   2b6c8:	bne	2b74c <__assert_fail@plt+0x18aa8>
   2b6cc:	ldr	ip, [pc, #140]	; 2b760 <__assert_fail@plt+0x18abc>
   2b6d0:	mov	r3, r1
   2b6d4:	mov	r2, #1
   2b6d8:	ldr	r1, [pc, #132]	; 2b764 <__assert_fail@plt+0x18ac0>
   2b6dc:	mov	r0, #2
   2b6e0:	str	r3, [ip, #8]
   2b6e4:	bl	2b484 <__assert_fail@plt+0x187e0>
   2b6e8:	mov	r2, #1
   2b6ec:	mov	r0, r2
   2b6f0:	ldr	r1, [pc, #108]	; 2b764 <__assert_fail@plt+0x18ac0>
   2b6f4:	bl	2b484 <__assert_fail@plt+0x187e0>
   2b6f8:	mov	r2, #1
   2b6fc:	ldr	r1, [pc, #96]	; 2b764 <__assert_fail@plt+0x18ac0>
   2b700:	mov	r0, #15
   2b704:	bl	2b484 <__assert_fail@plt+0x187e0>
   2b708:	mov	r2, #1
   2b70c:	ldr	r1, [pc, #80]	; 2b764 <__assert_fail@plt+0x18ac0>
   2b710:	mov	r0, #3
   2b714:	bl	2b484 <__assert_fail@plt+0x187e0>
   2b718:	mov	r2, #1
   2b71c:	ldr	r1, [pc, #64]	; 2b764 <__assert_fail@plt+0x18ac0>
   2b720:	mov	r0, #11
   2b724:	bl	2b484 <__assert_fail@plt+0x187e0>
   2b728:	mov	r2, r4
   2b72c:	ldr	r1, [pc, #52]	; 2b768 <__assert_fail@plt+0x18ac4>
   2b730:	mov	r0, #10
   2b734:	bl	2b484 <__assert_fail@plt+0x187e0>
   2b738:	mov	r2, r4
   2b73c:	mov	r1, #1
   2b740:	mov	r0, #13
   2b744:	pop	{r4, lr}
   2b748:	b	2b484 <__assert_fail@plt+0x187e0>
   2b74c:	ldr	r3, [pc, #24]	; 2b76c <__assert_fail@plt+0x18ac8>
   2b750:	mov	r2, #169	; 0xa9
   2b754:	ldr	r1, [pc, #20]	; 2b770 <__assert_fail@plt+0x18acc>
   2b758:	ldr	r0, [pc, #20]	; 2b774 <__assert_fail@plt+0x18ad0>
   2b75c:	bl	12ca4 <__assert_fail@plt>
   2b760:	ldrdeq	r6, [r4], -r8
   2b764:	andeq	fp, r2, r4, lsl #10
   2b768:	andeq	fp, r2, r0, ror r4
   2b76c:			; <UNDEFINED> instruction: 0x00034fb0
   2b770:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   2b774:	andeq	r5, r3, ip
   2b778:	push	{r4, r5, r6, lr}
   2b77c:	sub	sp, sp, #136	; 0x88
   2b780:	ldr	r4, [pc, #88]	; 2b7e0 <__assert_fail@plt+0x18b3c>
   2b784:	ldr	r5, [pc, #88]	; 2b7e4 <__assert_fail@plt+0x18b40>
   2b788:	ldr	r6, [r4, #12]
   2b78c:	ldr	r3, [r5]
   2b790:	cmp	r6, #0
   2b794:	str	r3, [sp, #132]	; 0x84
   2b798:	bne	2b7d4 <__assert_fail@plt+0x18b30>
   2b79c:	add	r0, sp, #4
   2b7a0:	bl	12950 <sigfillset@plt>
   2b7a4:	add	r1, sp, #4
   2b7a8:	add	r2, r4, #16
   2b7ac:	mov	r0, r6
   2b7b0:	bl	12548 <sigprocmask@plt>
   2b7b4:	ldr	r1, [sp, #132]	; 0x84
   2b7b8:	ldr	r2, [r5]
   2b7bc:	mov	r3, #1
   2b7c0:	cmp	r1, r2
   2b7c4:	str	r3, [r4, #12]
   2b7c8:	bne	2b7dc <__assert_fail@plt+0x18b38>
   2b7cc:	add	sp, sp, #136	; 0x88
   2b7d0:	pop	{r4, r5, r6, pc}
   2b7d4:	ldr	r0, [pc, #12]	; 2b7e8 <__assert_fail@plt+0x18b44>
   2b7d8:	bl	21dc4 <__assert_fail@plt+0xf120>
   2b7dc:	bl	1262c <__stack_chk_fail@plt>
   2b7e0:	ldrdeq	r6, [r4], -r8
   2b7e4:	strdeq	r5, [r4], -r8
   2b7e8:	andeq	r5, r3, r4, lsl r0
   2b7ec:	push	{r4, lr}
   2b7f0:	ldr	r4, [pc, #44]	; 2b824 <__assert_fail@plt+0x18b80>
   2b7f4:	ldr	r3, [r4, #12]
   2b7f8:	cmp	r3, #0
   2b7fc:	beq	2b81c <__assert_fail@plt+0x18b78>
   2b800:	mov	r2, #0
   2b804:	add	r1, r4, #16
   2b808:	mov	r0, #2
   2b80c:	bl	12548 <sigprocmask@plt>
   2b810:	mov	r3, #0
   2b814:	str	r3, [r4, #12]
   2b818:	pop	{r4, pc}
   2b81c:	ldr	r0, [pc, #4]	; 2b828 <__assert_fail@plt+0x18b84>
   2b820:	bl	21dc4 <__assert_fail@plt+0xf120>
   2b824:	ldrdeq	r6, [r4], -r8
   2b828:	andeq	r5, r3, r4, lsr r0
   2b82c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b830:	subs	r5, r1, #0
   2b834:	ldr	r6, [pc, #2172]	; 2c0b8 <__assert_fail@plt+0x19414>
   2b838:	sub	sp, sp, #76	; 0x4c
   2b83c:	addeq	r5, sp, #8
   2b840:	ldr	r1, [r6]
   2b844:	mov	fp, r0
   2b848:	str	r1, [sp, #68]	; 0x44
   2b84c:	mov	r7, r2
   2b850:	mov	r1, #0
   2b854:	mov	r2, #48	; 0x30
   2b858:	mov	r0, r5
   2b85c:	bl	129b0 <memset@plt>
   2b860:	ldrb	r4, [fp]
   2b864:	cmp	r4, #0
   2b868:	bne	2b87c <__assert_fail@plt+0x18bd8>
   2b86c:	b	2b9f0 <__assert_fail@plt+0x18d4c>
   2b870:	ldrb	r4, [fp, #1]!
   2b874:	cmp	r4, #0
   2b878:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2b87c:	cmp	r4, #32
   2b880:	cmpne	r4, #9
   2b884:	beq	2b870 <__assert_fail@plt+0x18bcc>
   2b888:	mov	r0, fp
   2b88c:	bl	128d8 <strlen@plt>
   2b890:	add	r0, fp, r0
   2b894:	ldrb	r4, [r0, #-1]
   2b898:	cmp	r4, #9
   2b89c:	cmpne	r4, #32
   2b8a0:	moveq	r4, #1
   2b8a4:	movne	r4, #0
   2b8a8:	beq	2ba18 <__assert_fail@plt+0x18d74>
   2b8ac:	ldrb	r2, [fp]
   2b8b0:	cmp	r2, #64	; 0x40
   2b8b4:	ldrls	pc, [pc, r2, lsl #2]
   2b8b8:	b	2bb84 <__assert_fail@plt+0x18ee0>
   2b8bc:	strdeq	fp, [r2], -r0
   2b8c0:	andeq	fp, r2, r4, lsl #23
   2b8c4:	andeq	fp, r2, r4, lsl #23
   2b8c8:	andeq	fp, r2, r4, lsl #23
   2b8cc:	andeq	fp, r2, r4, lsl #23
   2b8d0:	andeq	fp, r2, r4, lsl #23
   2b8d4:	andeq	fp, r2, r4, lsl #23
   2b8d8:	andeq	fp, r2, r4, lsl #23
   2b8dc:	andeq	fp, r2, r4, lsl #23
   2b8e0:	andeq	fp, r2, r4, lsl #23
   2b8e4:	andeq	fp, r2, r4, lsl #23
   2b8e8:	andeq	fp, r2, r4, lsl #23
   2b8ec:	andeq	fp, r2, r4, lsl #23
   2b8f0:	andeq	fp, r2, r4, lsl #23
   2b8f4:	andeq	fp, r2, r4, lsl #23
   2b8f8:	andeq	fp, r2, r4, lsl #23
   2b8fc:	andeq	fp, r2, r4, lsl #23
   2b900:	andeq	fp, r2, r4, lsl #23
   2b904:	andeq	fp, r2, r4, lsl #23
   2b908:	andeq	fp, r2, r4, lsl #23
   2b90c:	andeq	fp, r2, r4, lsl #23
   2b910:	andeq	fp, r2, r4, lsl #23
   2b914:	andeq	fp, r2, r4, lsl #23
   2b918:	andeq	fp, r2, r4, lsl #23
   2b91c:	andeq	fp, r2, r4, lsl #23
   2b920:	andeq	fp, r2, r4, lsl #23
   2b924:	andeq	fp, r2, r4, lsl #23
   2b928:	andeq	fp, r2, r4, lsl #23
   2b92c:	andeq	fp, r2, r4, lsl #23
   2b930:	andeq	fp, r2, r4, lsl #23
   2b934:	andeq	fp, r2, r4, lsl #23
   2b938:	andeq	fp, r2, r4, lsl #23
   2b93c:	andeq	fp, r2, r4, lsl #23
   2b940:	andeq	fp, r2, r4, lsl #23
   2b944:	andeq	fp, r2, r4, lsl #23
   2b948:	andeq	fp, r2, r4, lsr sl
   2b94c:	andeq	fp, r2, r4, lsl #23
   2b950:	andeq	fp, r2, r4, lsl #23
   2b954:	andeq	fp, r2, r0, lsl #21
   2b958:	andeq	fp, r2, r4, lsl #23
   2b95c:	andeq	fp, r2, r4, lsl #23
   2b960:	andeq	fp, r2, r4, lsl #23
   2b964:	andeq	fp, r2, r8, lsr #21
   2b968:			; <UNDEFINED> instruction: 0x0002bab8
   2b96c:	andeq	fp, r2, r4, lsl #23
   2b970:	andeq	fp, r2, r4, lsl #23
   2b974:	andeq	fp, r2, r8, asr #21
   2b978:	ldrdeq	fp, [r2], -r8
   2b97c:	andeq	fp, r2, r4, lsl #23
   2b980:	andeq	fp, r2, r4, lsl #23
   2b984:	andeq	fp, r2, r4, lsl #23
   2b988:	andeq	fp, r2, r4, lsl #23
   2b98c:	andeq	fp, r2, r4, lsl #23
   2b990:	andeq	fp, r2, r4, lsl #23
   2b994:	andeq	fp, r2, r4, lsl #23
   2b998:	andeq	fp, r2, r4, lsl #23
   2b99c:	andeq	fp, r2, r4, lsl #23
   2b9a0:	andeq	fp, r2, r4, lsl #23
   2b9a4:	strdeq	fp, [r2], -ip
   2b9a8:	andeq	fp, r2, r4, lsl #23
   2b9ac:	andeq	fp, r2, r0, asr fp
   2b9b0:	andeq	fp, r2, r4, ror #22
   2b9b4:	andeq	fp, r2, r4, lsl #23
   2b9b8:	andeq	fp, r2, r4, lsl #23
   2b9bc:	andeq	fp, r2, r4, ror fp
   2b9c0:	ldr	r2, [r5, #44]	; 0x2c
   2b9c4:	cmp	r2, #0
   2b9c8:	bne	2be78 <__assert_fail@plt+0x191d4>
   2b9cc:	cmp	r0, #8
   2b9d0:	bne	2be0c <__assert_fail@plt+0x19168>
   2b9d4:	ldrb	r2, [fp, #8]
   2b9d8:	cmp	r2, #0
   2b9dc:	beq	2be34 <__assert_fail@plt+0x19190>
   2b9e0:	cmp	r2, #33	; 0x21
   2b9e4:	beq	2bef0 <__assert_fail@plt+0x1924c>
   2b9e8:	cmp	r7, #0
   2b9ec:	beq	2bbdc <__assert_fail@plt+0x18f38>
   2b9f0:	mov	r5, #37	; 0x25
   2b9f4:	mov	r0, r4
   2b9f8:	bl	125e4 <gcry_free@plt>
   2b9fc:	ldr	r2, [sp, #68]	; 0x44
   2ba00:	ldr	r3, [r6]
   2ba04:	mov	r0, r5
   2ba08:	cmp	r2, r3
   2ba0c:	bne	2bfd0 <__assert_fail@plt+0x1932c>
   2ba10:	add	sp, sp, #76	; 0x4c
   2ba14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba18:	mov	r0, fp
   2ba1c:	bl	12c68 <gcry_strdup@plt>
   2ba20:	subs	fp, r0, #0
   2ba24:	beq	2bce0 <__assert_fail@plt+0x1903c>
   2ba28:	bl	1c5ec <__assert_fail@plt+0x9948>
   2ba2c:	mov	r4, fp
   2ba30:	b	2b8ac <__assert_fail@plt+0x18c08>
   2ba34:	ldrb	r1, [fp, #1]
   2ba38:	cmp	r1, #47	; 0x2f
   2ba3c:	beq	2bde8 <__assert_fail@plt+0x19144>
   2ba40:	cmp	r1, #0
   2ba44:	add	fp, fp, #1
   2ba48:	moveq	r7, fp
   2ba4c:	beq	2bd30 <__assert_fail@plt+0x1908c>
   2ba50:	ldr	r8, [pc, #1636]	; 2c0bc <__assert_fail@plt+0x19418>
   2ba54:	mov	r7, fp
   2ba58:	b	2ba6c <__assert_fail@plt+0x18dc8>
   2ba5c:	ldrb	r1, [r7, #1]!
   2ba60:	cmp	r1, #0
   2ba64:	cmpne	r1, #47	; 0x2f
   2ba68:	beq	2bd30 <__assert_fail@plt+0x1908c>
   2ba6c:	mov	r0, r8
   2ba70:	bl	128fc <strchr@plt>
   2ba74:	cmp	r0, #0
   2ba78:	bne	2ba5c <__assert_fail@plt+0x18db8>
   2ba7c:	b	2b9f0 <__assert_fail@plt+0x18d4c>
   2ba80:	mov	r2, #20
   2ba84:	add	r0, fp, #1
   2ba88:	add	r1, r5, r2
   2ba8c:	bl	2643c <__assert_fail@plt+0x13798>
   2ba90:	cmp	r0, #0
   2ba94:	movge	r3, #16
   2ba98:	blt	2b9f0 <__assert_fail@plt+0x18d4c>
   2ba9c:	str	r3, [r5]
   2baa0:	mov	r5, #0
   2baa4:	b	2b9f4 <__assert_fail@plt+0x18d50>
   2baa8:	add	r3, fp, #1
   2baac:	str	r3, [r5, #20]
   2bab0:	mov	r3, #2
   2bab4:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bab8:	add	r3, fp, #1
   2babc:	str	r3, [r5, #20]
   2bac0:	mov	r3, #6
   2bac4:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bac8:	add	r3, fp, #1
   2bacc:	str	r3, [r5, #20]
   2bad0:	mov	r3, #5
   2bad4:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bad8:	ldrb	r2, [fp, #1]
   2badc:	tst	r2, #223	; 0xdf
   2bae0:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2bae4:	cmp	r2, #9
   2bae8:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2baec:	add	r3, fp, #1
   2baf0:	str	r3, [r5, #20]
   2baf4:	mov	r3, #15
   2baf8:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bafc:	add	r7, fp, #1
   2bb00:	mov	r0, r7
   2bb04:	mov	r1, #58	; 0x3a
   2bb08:	bl	128fc <strchr@plt>
   2bb0c:	subs	r8, r0, #0
   2bb10:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2bb14:	cmp	r7, r8
   2bb18:	bcs	2b9f0 <__assert_fail@plt+0x18d4c>
   2bb1c:	mov	sl, r7
   2bb20:	mvn	r9, fp
   2bb24:	b	2bb30 <__assert_fail@plt+0x18e8c>
   2bb28:	cmp	sl, r8
   2bb2c:	beq	2bd6c <__assert_fail@plt+0x190c8>
   2bb30:	add	r3, r9, sl
   2bb34:	ldr	r0, [pc, #1408]	; 2c0bc <__assert_fail@plt+0x19418>
   2bb38:	ldrb	r1, [sl], #1
   2bb3c:	str	r3, [sp, #4]
   2bb40:	bl	128fc <strchr@plt>
   2bb44:	cmp	r0, #0
   2bb48:	bne	2bb28 <__assert_fail@plt+0x18e84>
   2bb4c:	b	2b9f0 <__assert_fail@plt+0x18d4c>
   2bb50:	cmp	r7, #0
   2bb54:	addeq	fp, fp, #1
   2bb58:	str	fp, [r5, #20]
   2bb5c:	mov	r3, #3
   2bb60:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bb64:	add	r3, fp, #1
   2bb68:	str	r3, [r5, #20]
   2bb6c:	mov	r3, #1
   2bb70:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bb74:	add	r3, fp, #1
   2bb78:	str	r3, [r5, #20]
   2bb7c:	mov	r3, #4
   2bb80:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bb84:	cmp	r2, #48	; 0x30
   2bb88:	beq	2bdd0 <__assert_fail@plt+0x1912c>
   2bb8c:	mov	r7, #0
   2bb90:	ldr	r1, [pc, #1320]	; 2c0c0 <__assert_fail@plt+0x1941c>
   2bb94:	mov	r0, fp
   2bb98:	bl	12c98 <strspn@plt>
   2bb9c:	cmp	r0, #7
   2bba0:	bgt	2bcf0 <__assert_fail@plt+0x1904c>
   2bba4:	cmp	r0, #0
   2bba8:	bne	2c084 <__assert_fail@plt+0x193e0>
   2bbac:	ldr	r0, [r5, #44]	; 0x2c
   2bbb0:	cmp	r0, #0
   2bbb4:	eoreq	r2, r7, #1
   2bbb8:	bne	2bd24 <__assert_fail@plt+0x19080>
   2bbbc:	cmp	r0, #41	; 0x29
   2bbc0:	movne	r2, #0
   2bbc4:	andeq	r2, r2, #1
   2bbc8:	cmp	r2, #0
   2bbcc:	beq	2b9e8 <__assert_fail@plt+0x18d44>
   2bbd0:	ldrb	r2, [fp]
   2bbd4:	cmp	r2, #48	; 0x30
   2bbd8:	beq	2bf88 <__assert_fail@plt+0x192e4>
   2bbdc:	mov	r2, #0
   2bbe0:	str	r2, [r5, #44]	; 0x2c
   2bbe4:	ldr	r1, [pc, #1240]	; 2c0c4 <__assert_fail@plt+0x19420>
   2bbe8:	mov	r0, fp
   2bbec:	bl	12c98 <strspn@plt>
   2bbf0:	cmp	r0, #59	; 0x3b
   2bbf4:	beq	2bf14 <__assert_fail@plt+0x19270>
   2bbf8:	ldr	r1, [pc, #1224]	; 2c0c8 <__assert_fail@plt+0x19424>
   2bbfc:	mov	r0, fp
   2bc00:	bl	12c98 <strspn@plt>
   2bc04:	ldrb	r2, [fp, r0]
   2bc08:	tst	r2, #223	; 0xdf
   2bc0c:	bne	2bf08 <__assert_fail@plt+0x19264>
   2bc10:	cmp	r0, #0
   2bc14:	beq	2bf08 <__assert_fail@plt+0x19264>
   2bc18:	add	r2, fp, r0
   2bc1c:	ldrb	r2, [r2, #-1]
   2bc20:	cmp	r2, #32
   2bc24:	bne	2bc50 <__assert_fail@plt+0x18fac>
   2bc28:	sub	r2, r0, #2
   2bc2c:	add	r2, fp, r2
   2bc30:	sub	lr, fp, #1
   2bc34:	rsb	ip, fp, #1
   2bc38:	cmp	lr, r2
   2bc3c:	add	r0, ip, r2
   2bc40:	beq	2bf08 <__assert_fail@plt+0x19264>
   2bc44:	ldrb	r1, [r2], #-1
   2bc48:	cmp	r1, #32
   2bc4c:	beq	2bc38 <__assert_fail@plt+0x18f94>
   2bc50:	sub	r2, r0, #49	; 0x31
   2bc54:	cmp	r2, #1
   2bc58:	bhi	2bf08 <__assert_fail@plt+0x19264>
   2bc5c:	ldrb	r2, [fp, r0]
   2bc60:	ands	r2, r2, #223	; 0xdf
   2bc64:	bne	2bf08 <__assert_fail@plt+0x19264>
   2bc68:	mov	r7, r2
   2bc6c:	add	r8, r5, #20
   2bc70:	b	2bcbc <__assert_fail@plt+0x19018>
   2bc74:	tst	r7, #1
   2bc78:	bne	2bc98 <__assert_fail@plt+0x18ff4>
   2bc7c:	ldrb	r2, [fp]
   2bc80:	cmp	r2, #32
   2bc84:	bne	2bf08 <__assert_fail@plt+0x19264>
   2bc88:	cmp	r7, #10
   2bc8c:	add	r2, fp, #1
   2bc90:	movne	fp, r2
   2bc94:	beq	2bfbc <__assert_fail@plt+0x19318>
   2bc98:	mov	r0, fp
   2bc9c:	bl	1c994 <__assert_fail@plt+0x9cf0>
   2bca0:	cmn	r0, #1
   2bca4:	beq	2bf08 <__assert_fail@plt+0x19264>
   2bca8:	cmp	r7, #19
   2bcac:	strb	r0, [r8, r7]
   2bcb0:	add	fp, fp, #2
   2bcb4:	beq	2bf00 <__assert_fail@plt+0x1925c>
   2bcb8:	add	r7, r7, #1
   2bcbc:	cmp	r7, #0
   2bcc0:	bne	2bc74 <__assert_fail@plt+0x18fd0>
   2bcc4:	mov	r0, fp
   2bcc8:	bl	1c994 <__assert_fail@plt+0x9cf0>
   2bccc:	cmn	r0, #1
   2bcd0:	beq	2bf08 <__assert_fail@plt+0x19264>
   2bcd4:	strb	r0, [r8, r7]
   2bcd8:	add	fp, fp, #2
   2bcdc:	b	2bcb8 <__assert_fail@plt+0x19014>
   2bce0:	bl	12914 <gpg_err_code_from_syserror@plt>
   2bce4:	mov	r4, fp
   2bce8:	uxth	r5, r0
   2bcec:	b	2b9f4 <__assert_fail@plt+0x18d50>
   2bcf0:	ldrb	r2, [fp, r0]
   2bcf4:	cmp	r2, #33	; 0x21
   2bcf8:	beq	2be50 <__assert_fail@plt+0x191ac>
   2bcfc:	cmp	r2, #0
   2bd00:	beq	2b9c0 <__assert_fail@plt+0x18d1c>
   2bd04:	cmp	r2, #32
   2bd08:	cmpne	r2, #9
   2bd0c:	beq	2b9c0 <__assert_fail@plt+0x18d1c>
   2bd10:	cmp	r7, #0
   2bd14:	bne	2b9f0 <__assert_fail@plt+0x18d4c>
   2bd18:	ldr	r2, [r5, #44]	; 0x2c
   2bd1c:	cmp	r2, #0
   2bd20:	beq	2bbdc <__assert_fail@plt+0x18f38>
   2bd24:	eor	r2, r7, #1
   2bd28:	mvn	r0, #0
   2bd2c:	b	2bbbc <__assert_fail@plt+0x18f18>
   2bd30:	mvn	r3, #0
   2bd34:	str	fp, [r5, #12]
   2bd38:	str	r3, [r5, #16]
   2bd3c:	ldrb	r3, [r7]
   2bd40:	cmp	r3, #0
   2bd44:	beq	2be80 <__assert_fail@plt+0x191dc>
   2bd48:	ldrb	r3, [r7, #1]
   2bd4c:	tst	r3, #223	; 0xdf
   2bd50:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2bd54:	cmp	r3, #9
   2bd58:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2bd5c:	add	r7, r7, #1
   2bd60:	str	r7, [r5, #20]
   2bd64:	mov	r3, #13
   2bd68:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bd6c:	ldr	r3, [sp, #4]
   2bd70:	sub	r9, r3, #31
   2bd74:	bics	r3, r9, #8
   2bd78:	bne	2b9f0 <__assert_fail@plt+0x18d4c>
   2bd7c:	add	r9, r5, #19
   2bd80:	mov	r0, r7
   2bd84:	bl	1c994 <__assert_fail@plt+0x9cf0>
   2bd88:	add	r7, r7, #2
   2bd8c:	cmp	r8, r7
   2bd90:	strb	r0, [r9, #1]!
   2bd94:	bhi	2bd80 <__assert_fail@plt+0x190dc>
   2bd98:	sub	r3, sl, fp
   2bd9c:	sub	r3, r3, #2
   2bda0:	lsr	r3, r3, #1
   2bda4:	cmp	r3, #18
   2bda8:	bgt	2bdc8 <__assert_fail@plt+0x19124>
   2bdac:	add	r3, r3, #21
   2bdb0:	add	r3, r5, r3
   2bdb4:	add	r1, r5, #40	; 0x28
   2bdb8:	mov	r2, #0
   2bdbc:	strb	r2, [r3], #1
   2bdc0:	cmp	r3, r1
   2bdc4:	bne	2bdbc <__assert_fail@plt+0x19118>
   2bdc8:	mov	r3, #11
   2bdcc:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bdd0:	ldrb	r2, [fp, #1]
   2bdd4:	cmp	r2, #120	; 0x78
   2bdd8:	addeq	fp, fp, #2
   2bddc:	moveq	r7, #1
   2bde0:	bne	2bb8c <__assert_fail@plt+0x18ee8>
   2bde4:	b	2bb90 <__assert_fail@plt+0x18eec>
   2bde8:	ldrb	r2, [fp, #2]
   2bdec:	tst	r2, #223	; 0xdf
   2bdf0:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2bdf4:	cmp	r2, #9
   2bdf8:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2bdfc:	add	r3, fp, #2
   2be00:	str	r3, [r5, #20]
   2be04:	mov	r3, #12
   2be08:	b	2ba9c <__assert_fail@plt+0x18df8>
   2be0c:	eor	r2, r7, #1
   2be10:	cmp	r0, #9
   2be14:	movne	r1, #0
   2be18:	andeq	r1, r2, #1
   2be1c:	cmp	r1, #0
   2be20:	beq	2be88 <__assert_fail@plt+0x191e4>
   2be24:	ldrb	r2, [fp]
   2be28:	cmp	r2, #48	; 0x30
   2be2c:	bne	2b9e8 <__assert_fail@plt+0x18d44>
   2be30:	add	fp, fp, #1
   2be34:	mov	r0, fp
   2be38:	mov	r2, #16
   2be3c:	mov	r1, #0
   2be40:	bl	128cc <strtoul@plt>
   2be44:	mov	r3, #7
   2be48:	str	r0, [r5, #24]
   2be4c:	b	2ba9c <__assert_fail@plt+0x18df8>
   2be50:	add	r1, r0, #1
   2be54:	mov	r2, #1
   2be58:	str	r2, [r5, #44]	; 0x2c
   2be5c:	ldrb	r2, [fp, r1]
   2be60:	cmp	r2, #0
   2be64:	beq	2b9cc <__assert_fail@plt+0x18d28>
   2be68:	cmp	r2, #32
   2be6c:	cmpne	r2, #9
   2be70:	moveq	r0, r1
   2be74:	bne	2bd10 <__assert_fail@plt+0x1906c>
   2be78:	sub	r0, r0, #1
   2be7c:	b	2b9cc <__assert_fail@plt+0x18d28>
   2be80:	mov	r3, #14
   2be84:	b	2ba9c <__assert_fail@plt+0x18df8>
   2be88:	cmp	r0, #16
   2be8c:	bne	2bfd4 <__assert_fail@plt+0x19330>
   2be90:	ldrb	r1, [fp, #16]
   2be94:	cmp	r1, #0
   2be98:	beq	2beb0 <__assert_fail@plt+0x1920c>
   2be9c:	cmp	r1, #33	; 0x21
   2bea0:	bne	2bbbc <__assert_fail@plt+0x18f18>
   2bea4:	ldrb	r1, [fp, #17]
   2bea8:	cmp	r1, #0
   2beac:	bne	2bbbc <__assert_fail@plt+0x18f18>
   2beb0:	mov	r2, #9
   2beb4:	mov	r1, fp
   2beb8:	add	r0, sp, #56	; 0x38
   2bebc:	bl	1c4c8 <__assert_fail@plt+0x9824>
   2bec0:	mov	r2, #16
   2bec4:	mov	r1, #0
   2bec8:	add	r0, sp, #56	; 0x38
   2becc:	bl	128cc <strtoul@plt>
   2bed0:	mov	r2, #16
   2bed4:	mov	r1, #0
   2bed8:	str	r0, [r5, #20]
   2bedc:	add	r0, fp, #8
   2bee0:	bl	128cc <strtoul@plt>
   2bee4:	mov	r3, #8
   2bee8:	str	r0, [r5, #24]
   2beec:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bef0:	ldrb	r2, [fp, #9]
   2bef4:	cmp	r2, #0
   2bef8:	beq	2be34 <__assert_fail@plt+0x19190>
   2befc:	b	2b9e8 <__assert_fail@plt+0x18d44>
   2bf00:	mov	r3, #10
   2bf04:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bf08:	str	fp, [r5, #20]
   2bf0c:	mov	r3, #2
   2bf10:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bf14:	ldrb	r2, [fp, #59]	; 0x3b
   2bf18:	tst	r2, #223	; 0xdf
   2bf1c:	beq	2bf28 <__assert_fail@plt+0x19284>
   2bf20:	cmp	r2, #9
   2bf24:	bne	2bbf8 <__assert_fail@plt+0x18f54>
   2bf28:	mvn	sl, #18
   2bf2c:	sub	sl, sl, r5
   2bf30:	add	r7, r5, #19
   2bf34:	add	r9, fp, #60	; 0x3c
   2bf38:	add	r8, fp, #57	; 0x39
   2bf3c:	b	2bf5c <__assert_fail@plt+0x192b8>
   2bf40:	ldrb	r2, [fp, #2]
   2bf44:	cmp	r2, #58	; 0x3a
   2bf48:	bne	2bbf8 <__assert_fail@plt+0x18f54>
   2bf4c:	add	fp, fp, #3
   2bf50:	cmp	fp, r9
   2bf54:	strb	r0, [r7, #1]!
   2bf58:	beq	2bf00 <__assert_fail@plt+0x1925c>
   2bf5c:	mov	r0, fp
   2bf60:	bl	1c994 <__assert_fail@plt+0x9cf0>
   2bf64:	add	r2, sl, r7
   2bf68:	cmn	r0, #1
   2bf6c:	beq	2bbf8 <__assert_fail@plt+0x18f54>
   2bf70:	cmp	r8, fp
   2bf74:	bne	2bf40 <__assert_fail@plt+0x1929c>
   2bf78:	add	r2, r5, r2
   2bf7c:	mov	r3, #10
   2bf80:	strb	r0, [r2, #20]
   2bf84:	b	2ba9c <__assert_fail@plt+0x18df8>
   2bf88:	add	fp, fp, #1
   2bf8c:	add	r7, r5, #19
   2bf90:	add	r8, fp, #40	; 0x28
   2bf94:	b	2bfa8 <__assert_fail@plt+0x19304>
   2bf98:	add	fp, fp, #2
   2bf9c:	cmp	fp, r8
   2bfa0:	strb	r0, [r7, #1]!
   2bfa4:	beq	2bf00 <__assert_fail@plt+0x1925c>
   2bfa8:	mov	r0, fp
   2bfac:	bl	1c994 <__assert_fail@plt+0x9cf0>
   2bfb0:	cmn	r0, #1
   2bfb4:	bne	2bf98 <__assert_fail@plt+0x192f4>
   2bfb8:	b	2b9f0 <__assert_fail@plt+0x18d4c>
   2bfbc:	ldrb	r1, [fp, #1]
   2bfc0:	cmp	r1, #32
   2bfc4:	addeq	fp, fp, #2
   2bfc8:	movne	fp, r2
   2bfcc:	b	2bcc4 <__assert_fail@plt+0x19020>
   2bfd0:	bl	1262c <__stack_chk_fail@plt>
   2bfd4:	cmp	r0, #17
   2bfd8:	movne	r1, #0
   2bfdc:	andeq	r1, r2, #1
   2bfe0:	cmp	r1, #0
   2bfe4:	beq	2bffc <__assert_fail@plt+0x19358>
   2bfe8:	ldrb	r2, [fp]
   2bfec:	cmp	r2, #48	; 0x30
   2bff0:	bne	2b9e8 <__assert_fail@plt+0x18d44>
   2bff4:	add	fp, fp, #1
   2bff8:	b	2beb0 <__assert_fail@plt+0x1920c>
   2bffc:	cmp	r0, #32
   2c000:	bne	2c05c <__assert_fail@plt+0x193b8>
   2c004:	ldrb	r2, [fp, #32]
   2c008:	cmp	r2, #0
   2c00c:	beq	2c024 <__assert_fail@plt+0x19380>
   2c010:	cmp	r2, #33	; 0x21
   2c014:	bne	2b9e8 <__assert_fail@plt+0x18d44>
   2c018:	ldrb	r2, [fp, #33]	; 0x21
   2c01c:	cmp	r2, #0
   2c020:	bne	2b9e8 <__assert_fail@plt+0x18d44>
   2c024:	add	r7, r5, #19
   2c028:	add	r8, fp, #32
   2c02c:	mov	r2, #0
   2c030:	str	r2, [r5, #36]	; 0x24
   2c034:	mov	r0, fp
   2c038:	bl	1c994 <__assert_fail@plt+0x9cf0>
   2c03c:	cmn	r0, #1
   2c040:	beq	2b9f0 <__assert_fail@plt+0x18d4c>
   2c044:	add	fp, fp, #2
   2c048:	cmp	r8, fp
   2c04c:	strb	r0, [r7, #1]!
   2c050:	bne	2c034 <__assert_fail@plt+0x19390>
   2c054:	mov	r3, #9
   2c058:	b	2ba9c <__assert_fail@plt+0x18df8>
   2c05c:	cmp	r0, #33	; 0x21
   2c060:	movne	r1, #0
   2c064:	andeq	r1, r2, #1
   2c068:	cmp	r1, #0
   2c06c:	beq	2c08c <__assert_fail@plt+0x193e8>
   2c070:	ldrb	r2, [fp]
   2c074:	cmp	r2, #48	; 0x30
   2c078:	bne	2b9e8 <__assert_fail@plt+0x18d44>
   2c07c:	add	fp, fp, #1
   2c080:	b	2c024 <__assert_fail@plt+0x19380>
   2c084:	ldrb	r2, [fp, r0]
   2c088:	b	2bcfc <__assert_fail@plt+0x19058>
   2c08c:	cmp	r0, #40	; 0x28
   2c090:	bne	2bbbc <__assert_fail@plt+0x18f18>
   2c094:	ldrb	r2, [fp, #40]	; 0x28
   2c098:	cmp	r2, #0
   2c09c:	beq	2bf8c <__assert_fail@plt+0x192e8>
   2c0a0:	cmp	r2, #33	; 0x21
   2c0a4:	bne	2b9e8 <__assert_fail@plt+0x18d44>
   2c0a8:	ldrb	r2, [fp, #41]	; 0x29
   2c0ac:	cmp	r2, #0
   2c0b0:	beq	2bf8c <__assert_fail@plt+0x192e8>
   2c0b4:	b	2b9e8 <__assert_fail@plt+0x18d44>
   2c0b8:	strdeq	r5, [r4], -r8
   2c0bc:	andeq	r5, r3, r0, asr r0
   2c0c0:	andeq	r5, r3, r8, rrx
   2c0c4:	andeq	r5, r3, r0, lsl #1
   2c0c8:	muleq	r3, r8, r0
   2c0cc:	bx	lr
   2c0d0:	push	{r4, r5, r6, r7, r8, lr}
   2c0d4:	add	r4, r0, #4096	; 0x1000
   2c0d8:	ldr	r6, [pc, #268]	; 2c1ec <__assert_fail@plt+0x19548>
   2c0dc:	sub	sp, sp, #8
   2c0e0:	mov	r7, r1
   2c0e4:	ldr	r3, [r6]
   2c0e8:	mov	ip, #0
   2c0ec:	str	r3, [sp, #4]
   2c0f0:	mov	r5, r0
   2c0f4:	ldm	r4, {r1, r2}
   2c0f8:	mov	r0, r7
   2c0fc:	mov	r3, sp
   2c100:	str	ip, [sp]
   2c104:	bl	12470 <gpgrt_write@plt>
   2c108:	cmp	r0, #0
   2c10c:	bne	2c198 <__assert_fail@plt+0x194f4>
   2c110:	mov	r8, #0
   2c114:	ldr	r3, [r4, #4]
   2c118:	ldr	r1, [sp]
   2c11c:	cmp	r3, r1
   2c120:	bcc	2c1c0 <__assert_fail@plt+0x1951c>
   2c124:	ldr	r2, [r4]
   2c128:	sub	r3, r3, r1
   2c12c:	add	r2, r2, r1
   2c130:	sub	r5, r2, r5
   2c134:	cmp	r5, #4096	; 0x1000
   2c138:	strd	r2, [r4]
   2c13c:	bhi	2c1d8 <__assert_fail@plt+0x19534>
   2c140:	cmp	r8, #0
   2c144:	beq	2c164 <__assert_fail@plt+0x194c0>
   2c148:	ldr	r2, [sp, #4]
   2c14c:	ldr	r3, [r6]
   2c150:	mov	r0, r8
   2c154:	cmp	r2, r3
   2c158:	bne	2c1d4 <__assert_fail@plt+0x19530>
   2c15c:	add	sp, sp, #8
   2c160:	pop	{r4, r5, r6, r7, r8, pc}
   2c164:	mov	r0, r7
   2c168:	bl	12680 <gpgrt_fflush@plt>
   2c16c:	cmp	r0, #0
   2c170:	beq	2c148 <__assert_fail@plt+0x194a4>
   2c174:	ldr	r3, [pc, #116]	; 2c1f0 <__assert_fail@plt+0x1954c>
   2c178:	ldr	r4, [r3]
   2c17c:	bl	12914 <gpg_err_code_from_syserror@plt>
   2c180:	cmp	r0, #0
   2c184:	lslne	r8, r4, #24
   2c188:	andne	r8, r8, #2130706432	; 0x7f000000
   2c18c:	uxthne	r0, r0
   2c190:	orrne	r8, r8, r0
   2c194:	b	2c148 <__assert_fail@plt+0x194a4>
   2c198:	ldr	r3, [pc, #80]	; 2c1f0 <__assert_fail@plt+0x1954c>
   2c19c:	ldr	r8, [r3]
   2c1a0:	bl	12914 <gpg_err_code_from_syserror@plt>
   2c1a4:	cmp	r0, #0
   2c1a8:	beq	2c110 <__assert_fail@plt+0x1946c>
   2c1ac:	lsl	r8, r8, #24
   2c1b0:	and	r8, r8, #2130706432	; 0x7f000000
   2c1b4:	uxth	r0, r0
   2c1b8:	orr	r8, r8, r0
   2c1bc:	b	2c114 <__assert_fail@plt+0x19470>
   2c1c0:	ldr	r3, [pc, #44]	; 2c1f4 <__assert_fail@plt+0x19550>
   2c1c4:	ldr	r2, [pc, #44]	; 2c1f8 <__assert_fail@plt+0x19554>
   2c1c8:	ldr	r1, [pc, #44]	; 2c1fc <__assert_fail@plt+0x19558>
   2c1cc:	ldr	r0, [pc, #44]	; 2c200 <__assert_fail@plt+0x1955c>
   2c1d0:	bl	22044 <__assert_fail@plt+0xf3a0>
   2c1d4:	bl	1262c <__stack_chk_fail@plt>
   2c1d8:	ldr	r3, [pc, #20]	; 2c1f4 <__assert_fail@plt+0x19550>
   2c1dc:	ldr	r2, [pc, #32]	; 2c204 <__assert_fail@plt+0x19560>
   2c1e0:	ldr	r1, [pc, #20]	; 2c1fc <__assert_fail@plt+0x19558>
   2c1e4:	ldr	r0, [pc, #28]	; 2c208 <__assert_fail@plt+0x19564>
   2c1e8:	bl	22044 <__assert_fail@plt+0xf3a0>
   2c1ec:	strdeq	r5, [r4], -r8
   2c1f0:			; <UNDEFINED> instruction: 0x000462b0
   2c1f4:	strheq	r5, [r3], -r0
   2c1f8:	andeq	r0, r0, lr, lsl r1
   2c1fc:	andeq	r5, r3, r8, lsl #2
   2c200:	andeq	r5, r3, r0, lsr #2
   2c204:	andeq	r0, r0, r1, lsr #2
   2c208:	andeq	r5, r3, r8, lsr r1
   2c20c:	push	{r4, r5, r6, r7, r8, lr}
   2c210:	add	r4, r0, #4096	; 0x1000
   2c214:	ldr	r6, [pc, #484]	; 2c400 <__assert_fail@plt+0x1975c>
   2c218:	ldr	r3, [r4, #4]
   2c21c:	sub	sp, sp, #8
   2c220:	ldr	lr, [r6]
   2c224:	mov	ip, #0
   2c228:	cmp	r3, #0
   2c22c:	mov	r5, r0
   2c230:	mov	r7, r2
   2c234:	str	lr, [sp, #4]
   2c238:	str	ip, [sp]
   2c23c:	beq	2c2e4 <__assert_fail@plt+0x19640>
   2c240:	mov	r2, #0
   2c244:	cmp	r7, #0
   2c248:	str	r2, [sp]
   2c24c:	ldr	r1, [r4]
   2c250:	beq	2c2bc <__assert_fail@plt+0x19618>
   2c254:	mov	r2, r3
   2c258:	mov	r0, r7
   2c25c:	mov	r3, sp
   2c260:	bl	12470 <gpgrt_write@plt>
   2c264:	cmp	r0, #0
   2c268:	bne	2c398 <__assert_fail@plt+0x196f4>
   2c26c:	mov	r0, #0
   2c270:	ldr	r2, [r4, #4]
   2c274:	ldr	r1, [sp]
   2c278:	cmp	r2, r1
   2c27c:	bcc	2c3d8 <__assert_fail@plt+0x19734>
   2c280:	ldr	r3, [r4]
   2c284:	sub	r2, r2, r1
   2c288:	add	r3, r3, r1
   2c28c:	sub	r5, r3, r5
   2c290:	cmp	r5, #4096	; 0x1000
   2c294:	str	r2, [r4, #4]
   2c298:	str	r3, [r4]
   2c29c:	bhi	2c3c4 <__assert_fail@plt+0x19720>
   2c2a0:	cmp	r0, #0
   2c2a4:	beq	2c31c <__assert_fail@plt+0x19678>
   2c2a8:	ldr	r3, [pc, #340]	; 2c404 <__assert_fail@plt+0x19760>
   2c2ac:	uxth	r2, r0
   2c2b0:	cmp	r2, r3
   2c2b4:	bne	2c2cc <__assert_fail@plt+0x19628>
   2c2b8:	b	2c2c8 <__assert_fail@plt+0x19624>
   2c2bc:	sub	r1, r1, r5
   2c2c0:	cmp	r1, #4096	; 0x1000
   2c2c4:	bhi	2c3c4 <__assert_fail@plt+0x19720>
   2c2c8:	mov	r0, #0
   2c2cc:	ldr	r2, [sp, #4]
   2c2d0:	ldr	r3, [r6]
   2c2d4:	cmp	r2, r3
   2c2d8:	bne	2c3c0 <__assert_fail@plt+0x1971c>
   2c2dc:	add	sp, sp, #8
   2c2e0:	pop	{r4, r5, r6, r7, r8, pc}
   2c2e4:	mov	r3, r4
   2c2e8:	mov	r0, r1
   2c2ec:	str	r5, [r3], #4
   2c2f0:	mov	r2, #4096	; 0x1000
   2c2f4:	mov	r1, r5
   2c2f8:	bl	125cc <gpgrt_read@plt>
   2c2fc:	cmp	r0, #0
   2c300:	bne	2c364 <__assert_fail@plt+0x196c0>
   2c304:	ldr	r3, [r4, #4]
   2c308:	cmp	r3, #4096	; 0x1000
   2c30c:	bhi	2c3ec <__assert_fail@plt+0x19748>
   2c310:	cmp	r3, #0
   2c314:	beq	2c2c8 <__assert_fail@plt+0x19624>
   2c318:	b	2c240 <__assert_fail@plt+0x1959c>
   2c31c:	mov	r0, r7
   2c320:	bl	12680 <gpgrt_fflush@plt>
   2c324:	cmp	r0, #0
   2c328:	beq	2c2c8 <__assert_fail@plt+0x19624>
   2c32c:	bl	12968 <__errno_location@plt>
   2c330:	ldr	r3, [r0]
   2c334:	cmp	r3, #11
   2c338:	beq	2c2c8 <__assert_fail@plt+0x19624>
   2c33c:	ldr	r3, [pc, #196]	; 2c408 <__assert_fail@plt+0x19764>
   2c340:	ldr	r4, [r3]
   2c344:	bl	12914 <gpg_err_code_from_syserror@plt>
   2c348:	cmp	r0, #0
   2c34c:	beq	2c2c8 <__assert_fail@plt+0x19624>
   2c350:	lsl	r4, r4, #24
   2c354:	and	r4, r4, #2130706432	; 0x7f000000
   2c358:	uxth	r0, r0
   2c35c:	orr	r0, r4, r0
   2c360:	b	2c2cc <__assert_fail@plt+0x19628>
   2c364:	ldr	r3, [pc, #156]	; 2c408 <__assert_fail@plt+0x19764>
   2c368:	ldr	r4, [r3]
   2c36c:	bl	12914 <gpg_err_code_from_syserror@plt>
   2c370:	cmp	r0, #0
   2c374:	beq	2c2c8 <__assert_fail@plt+0x19624>
   2c378:	ldr	r3, [pc, #132]	; 2c404 <__assert_fail@plt+0x19760>
   2c37c:	uxth	r0, r0
   2c380:	lsl	r4, r4, #24
   2c384:	and	r4, r4, #2130706432	; 0x7f000000
   2c388:	cmp	r0, r3
   2c38c:	orr	r0, r4, r0
   2c390:	beq	2c2c8 <__assert_fail@plt+0x19624>
   2c394:	b	2c2cc <__assert_fail@plt+0x19628>
   2c398:	ldr	r3, [pc, #104]	; 2c408 <__assert_fail@plt+0x19764>
   2c39c:	ldr	r8, [r3]
   2c3a0:	bl	12914 <gpg_err_code_from_syserror@plt>
   2c3a4:	cmp	r0, #0
   2c3a8:	beq	2c26c <__assert_fail@plt+0x195c8>
   2c3ac:	lsl	r8, r8, #24
   2c3b0:	and	r8, r8, #2130706432	; 0x7f000000
   2c3b4:	uxth	r0, r0
   2c3b8:	orr	r0, r8, r0
   2c3bc:	b	2c270 <__assert_fail@plt+0x195cc>
   2c3c0:	bl	1262c <__stack_chk_fail@plt>
   2c3c4:	ldr	r3, [pc, #64]	; 2c40c <__assert_fail@plt+0x19768>
   2c3c8:	ldr	r2, [pc, #64]	; 2c410 <__assert_fail@plt+0x1976c>
   2c3cc:	ldr	r1, [pc, #64]	; 2c414 <__assert_fail@plt+0x19770>
   2c3d0:	ldr	r0, [pc, #64]	; 2c418 <__assert_fail@plt+0x19774>
   2c3d4:	bl	22044 <__assert_fail@plt+0xf3a0>
   2c3d8:	ldr	r3, [pc, #44]	; 2c40c <__assert_fail@plt+0x19768>
   2c3dc:	mov	r2, #256	; 0x100
   2c3e0:	ldr	r1, [pc, #44]	; 2c414 <__assert_fail@plt+0x19770>
   2c3e4:	ldr	r0, [pc, #48]	; 2c41c <__assert_fail@plt+0x19778>
   2c3e8:	bl	22044 <__assert_fail@plt+0xf3a0>
   2c3ec:	ldr	r3, [pc, #24]	; 2c40c <__assert_fail@plt+0x19768>
   2c3f0:	mov	r2, #244	; 0xf4
   2c3f4:	ldr	r1, [pc, #24]	; 2c414 <__assert_fail@plt+0x19770>
   2c3f8:	ldr	r0, [pc, #32]	; 2c420 <__assert_fail@plt+0x1977c>
   2c3fc:	bl	22044 <__assert_fail@plt+0xf3a0>
   2c400:	strdeq	r5, [r4], -r8
   2c404:	andeq	r8, r0, r6
   2c408:			; <UNDEFINED> instruction: 0x000462b0
   2c40c:	andeq	r5, r3, r4, asr #1
   2c410:	andeq	r0, r0, r3, lsl #2
   2c414:	andeq	r5, r3, r8, lsl #2
   2c418:	andeq	r5, r3, r8, lsr r1
   2c41c:	andeq	r5, r3, r0, lsr #2
   2c420:	andeq	r5, r3, r4, ror #2
   2c424:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c428:	subs	r6, r1, #0
   2c42c:	mov	r4, r0
   2c430:	beq	2c5ac <__assert_fail@plt+0x19908>
   2c434:	ldr	r8, [pc, #712]	; 2c704 <__assert_fail@plt+0x19a60>
   2c438:	mov	r9, #0
   2c43c:	ldr	r0, [r6]
   2c440:	bl	12a1c <gpgrt_fgetc@plt>
   2c444:	cmn	r0, #1
   2c448:	mov	r5, r0
   2c44c:	beq	2c4c4 <__assert_fail@plt+0x19820>
   2c450:	cmp	r0, #10
   2c454:	beq	2c4e4 <__assert_fail@plt+0x19840>
   2c458:	ldr	r0, [r4, #20]
   2c45c:	ldr	r3, [r4, #16]
   2c460:	sub	r2, r0, #1
   2c464:	cmp	r3, r2
   2c468:	bcs	2c480 <__assert_fail@plt+0x197dc>
   2c46c:	ldr	fp, [r4, #24]
   2c470:	add	r2, r3, #1
   2c474:	str	r2, [r4, #16]
   2c478:	strb	r5, [fp, r3]
   2c47c:	b	2c43c <__assert_fail@plt+0x19798>
   2c480:	ldr	r1, [r4, #4]
   2c484:	cmp	r1, #0
   2c488:	beq	2c4f4 <__assert_fail@plt+0x19850>
   2c48c:	add	sl, r0, #256	; 0x100
   2c490:	mov	r0, sl
   2c494:	bl	12458 <gcry_malloc@plt>
   2c498:	subs	fp, r0, #0
   2c49c:	beq	2c55c <__assert_fail@plt+0x198b8>
   2c4a0:	ldr	r7, [r4, #24]
   2c4a4:	ldr	r2, [r4, #16]
   2c4a8:	mov	r1, r7
   2c4ac:	bl	125b4 <memcpy@plt>
   2c4b0:	mov	r0, r7
   2c4b4:	bl	125e4 <gcry_free@plt>
   2c4b8:	strd	sl, [r4, #20]
   2c4bc:	ldr	r3, [r4, #16]
   2c4c0:	b	2c470 <__assert_fail@plt+0x197cc>
   2c4c4:	ldr	r0, [r6]
   2c4c8:	bl	12710 <gpgrt_feof@plt>
   2c4cc:	cmp	r0, #0
   2c4d0:	beq	2c510 <__assert_fail@plt+0x1986c>
   2c4d4:	ldrb	r3, [r6, #6]
   2c4d8:	orr	r3, r3, #128	; 0x80
   2c4dc:	strb	r3, [r6, #6]
   2c4e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4e4:	mov	r1, #0
   2c4e8:	mov	r0, r4
   2c4ec:	bl	2c424 <__assert_fail@plt+0x19780>
   2c4f0:	b	2c43c <__assert_fail@plt+0x19798>
   2c4f4:	mov	r0, r4
   2c4f8:	bl	2c424 <__assert_fail@plt+0x19780>
   2c4fc:	mov	r2, #1
   2c500:	ldr	fp, [r4, #24]
   2c504:	ldr	r3, [r4, #16]
   2c508:	str	r2, [r4, #12]
   2c50c:	b	2c470 <__assert_fail@plt+0x197cc>
   2c510:	ldr	r0, [r6]
   2c514:	bl	1265c <gpgrt_ferror@plt>
   2c518:	cmp	r0, #0
   2c51c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c520:	ldr	r3, [pc, #476]	; 2c704 <__assert_fail@plt+0x19a60>
   2c524:	ldr	r5, [r3]
   2c528:	bl	12914 <gpg_err_code_from_syserror@plt>
   2c52c:	ldr	r4, [r4]
   2c530:	cmp	r0, #0
   2c534:	lslne	r3, r5, #24
   2c538:	andne	r3, r3, #2130706432	; 0x7f000000
   2c53c:	uxthne	r0, r0
   2c540:	orrne	r0, r3, r0
   2c544:	bl	12b3c <gpg_strerror@plt>
   2c548:	mov	r1, r4
   2c54c:	mov	r2, r0
   2c550:	ldr	r0, [pc, #432]	; 2c708 <__assert_fail@plt+0x19a64>
   2c554:	bl	21cbc <__assert_fail@plt+0xf018>
   2c558:	b	2c4d4 <__assert_fail@plt+0x19830>
   2c55c:	ldr	sl, [r8]
   2c560:	bl	12914 <gpg_err_code_from_syserror@plt>
   2c564:	cmp	r0, #0
   2c568:	lslne	sl, sl, #24
   2c56c:	andne	sl, sl, #2130706432	; 0x7f000000
   2c570:	uxthne	r0, r0
   2c574:	orrne	r0, sl, r0
   2c578:	bl	12b3c <gpg_strerror@plt>
   2c57c:	mov	r1, r0
   2c580:	ldr	r0, [pc, #388]	; 2c70c <__assert_fail@plt+0x19a68>
   2c584:	bl	21cbc <__assert_fail@plt+0xf018>
   2c588:	str	r9, [r4, #4]
   2c58c:	mov	r1, #0
   2c590:	mov	r0, r4
   2c594:	bl	2c424 <__assert_fail@plt+0x19780>
   2c598:	mov	r3, #1
   2c59c:	str	r3, [r4, #12]
   2c5a0:	ldr	fp, [r4, #24]
   2c5a4:	ldr	r3, [r4, #16]
   2c5a8:	b	2c470 <__assert_fail@plt+0x197cc>
   2c5ac:	ldr	r3, [r0, #16]
   2c5b0:	cmp	r3, #0
   2c5b4:	beq	2c65c <__assert_fail@plt+0x199b8>
   2c5b8:	ldr	r2, [r0, #24]
   2c5bc:	mov	r1, #47	; 0x2f
   2c5c0:	strb	r6, [r2, r3]
   2c5c4:	ldr	r5, [r0]
   2c5c8:	str	r6, [r0, #16]
   2c5cc:	mov	r0, r5
   2c5d0:	bl	12adc <strrchr@plt>
   2c5d4:	cmp	r5, r0
   2c5d8:	cmpne	r0, #0
   2c5dc:	bne	2c6bc <__assert_fail@plt+0x19a18>
   2c5e0:	ldr	r7, [r4, #4]
   2c5e4:	ldr	r6, [r4, #24]
   2c5e8:	cmp	r7, #0
   2c5ec:	beq	2c668 <__assert_fail@plt+0x199c4>
   2c5f0:	mov	r2, #9
   2c5f4:	ldr	r1, [pc, #276]	; 2c710 <__assert_fail@plt+0x19a6c>
   2c5f8:	mov	r0, r6
   2c5fc:	bl	12c2c <strncmp@plt>
   2c600:	subs	r8, r0, #0
   2c604:	bne	2c668 <__assert_fail@plt+0x199c4>
   2c608:	ldrb	r3, [r6, #9]
   2c60c:	sub	r3, r3, #65	; 0x41
   2c610:	cmp	r3, #25
   2c614:	bhi	2c668 <__assert_fail@plt+0x199c4>
   2c618:	add	r5, r6, #9
   2c61c:	mov	r0, r5
   2c620:	mov	r1, #32
   2c624:	bl	128fc <strchr@plt>
   2c628:	cmp	r0, #0
   2c62c:	beq	2c6e4 <__assert_fail@plt+0x19a40>
   2c630:	mov	r6, r0
   2c634:	strb	r8, [r6], #1
   2c638:	mov	r0, r6
   2c63c:	bl	1c54c <__assert_fail@plt+0x98a8>
   2c640:	ldr	r5, [r4, #24]
   2c644:	ldr	r7, [r4, #4]
   2c648:	add	r5, r5, #9
   2c64c:	mov	r2, r6
   2c650:	mov	r1, r5
   2c654:	ldr	r0, [r4, #8]
   2c658:	blx	r7
   2c65c:	mov	r3, #0
   2c660:	str	r3, [r4, #12]
   2c664:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c668:	ldr	r3, [r4, #12]
   2c66c:	cmp	r3, #0
   2c670:	bne	2c6cc <__assert_fail@plt+0x19a28>
   2c674:	mov	r0, r5
   2c678:	bl	128d8 <strlen@plt>
   2c67c:	mov	r1, r5
   2c680:	mov	r2, r0
   2c684:	mov	r7, r0
   2c688:	mov	r0, r6
   2c68c:	bl	12c2c <strncmp@plt>
   2c690:	cmp	r0, #0
   2c694:	bne	2c6b4 <__assert_fail@plt+0x19a10>
   2c698:	mov	r0, r6
   2c69c:	bl	128d8 <strlen@plt>
   2c6a0:	cmp	r7, r0
   2c6a4:	bcs	2c6b4 <__assert_fail@plt+0x19a10>
   2c6a8:	ldrb	r3, [r6, r7]
   2c6ac:	cmp	r3, #58	; 0x3a
   2c6b0:	beq	2c6f4 <__assert_fail@plt+0x19a50>
   2c6b4:	mov	r2, #58	; 0x3a
   2c6b8:	b	2c6d0 <__assert_fail@plt+0x19a2c>
   2c6bc:	ldrb	r3, [r0, #1]
   2c6c0:	cmp	r3, #0
   2c6c4:	addne	r5, r0, #1
   2c6c8:	b	2c5e0 <__assert_fail@plt+0x1993c>
   2c6cc:	mov	r2, #43	; 0x2b
   2c6d0:	mov	r3, r6
   2c6d4:	mov	r1, r5
   2c6d8:	ldr	r0, [pc, #52]	; 2c714 <__assert_fail@plt+0x19a70>
   2c6dc:	bl	21c58 <__assert_fail@plt+0xefb4>
   2c6e0:	b	2c65c <__assert_fail@plt+0x199b8>
   2c6e4:	mov	r0, r6
   2c6e8:	bl	128d8 <strlen@plt>
   2c6ec:	add	r6, r6, r0
   2c6f0:	b	2c64c <__assert_fail@plt+0x199a8>
   2c6f4:	mov	r1, r6
   2c6f8:	ldr	r0, [pc, #24]	; 2c718 <__assert_fail@plt+0x19a74>
   2c6fc:	bl	21c58 <__assert_fail@plt+0xefb4>
   2c700:	b	2c65c <__assert_fail@plt+0x199b8>
   2c704:			; <UNDEFINED> instruction: 0x000462b0
   2c708:	muleq	r3, r0, r1
   2c70c:			; <UNDEFINED> instruction: 0x000351b4
   2c710:	andeq	r1, r3, ip, lsr #15
   2c714:	andeq	r5, r3, r4, lsl #3
   2c718:			; <UNDEFINED> instruction: 0x000303b8
   2c71c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c720:	sub	sp, sp, #172	; 0xac
   2c724:	ldr	ip, [pc, #1804]	; 2ce38 <__assert_fail@plt+0x1a194>
   2c728:	mov	r7, r3
   2c72c:	ldr	r3, [sp, #208]	; 0xd0
   2c730:	str	r0, [sp, #24]
   2c734:	str	r1, [sp, #32]
   2c738:	ldm	ip, {r0, r1}
   2c73c:	ldr	ip, [pc, #1784]	; 2ce3c <__assert_fail@plt+0x1a198>
   2c740:	str	r3, [sp, #28]
   2c744:	ldr	r3, [sp, #212]	; 0xd4
   2c748:	add	r9, sp, #104	; 0x68
   2c74c:	mov	r4, #0
   2c750:	ldr	ip, [ip]
   2c754:	str	r3, [sp, #36]	; 0x24
   2c758:	ldr	r3, [sp, #216]	; 0xd8
   2c75c:	stm	r9, {r0, r1}
   2c760:	mov	sl, r2
   2c764:	mov	r1, r4
   2c768:	mov	r2, #32
   2c76c:	mvn	fp, #0
   2c770:	add	r0, sp, #112	; 0x70
   2c774:	str	ip, [sp, #164]	; 0xa4
   2c778:	str	r3, [sp, #40]	; 0x28
   2c77c:	str	r4, [sp, #52]	; 0x34
   2c780:	str	r4, [sp, #56]	; 0x38
   2c784:	str	r4, [sp, #60]	; 0x3c
   2c788:	str	r4, [sp, #64]	; 0x40
   2c78c:	str	fp, [sp, #48]	; 0x30
   2c790:	bl	129b0 <memset@plt>
   2c794:	ldr	r0, [pc, #1700]	; 2ce40 <__assert_fail@plt+0x1a19c>
   2c798:	str	r4, [sp, #68]	; 0x44
   2c79c:	str	r4, [sp, #72]	; 0x48
   2c7a0:	str	r4, [sp, #76]	; 0x4c
   2c7a4:	str	r4, [sp, #80]	; 0x50
   2c7a8:	str	r4, [sp, #84]	; 0x54
   2c7ac:	str	r4, [sp, #88]	; 0x58
   2c7b0:	str	r4, [sp, #92]	; 0x5c
   2c7b4:	bl	12458 <gcry_malloc@plt>
   2c7b8:	subs	r6, r0, #0
   2c7bc:	beq	2cca8 <__assert_fail@plt+0x1a004>
   2c7c0:	add	r3, r6, #4096	; 0x1000
   2c7c4:	ldr	r0, [pc, #1652]	; 2ce40 <__assert_fail@plt+0x1a19c>
   2c7c8:	str	r6, [r3]
   2c7cc:	str	r4, [r3, #4]
   2c7d0:	bl	12458 <gcry_malloc@plt>
   2c7d4:	subs	r8, r0, #0
   2c7d8:	beq	2cce8 <__assert_fail@plt+0x1a044>
   2c7dc:	add	r3, r8, #4096	; 0x1000
   2c7e0:	ldr	r0, [pc, #1624]	; 2ce40 <__assert_fail@plt+0x1a19c>
   2c7e4:	str	r8, [r3]
   2c7e8:	str	r4, [r3, #4]
   2c7ec:	bl	12458 <gcry_malloc@plt>
   2c7f0:	subs	r5, r0, #0
   2c7f4:	beq	2cc78 <__assert_fail@plt+0x19fd4>
   2c7f8:	ldr	r2, [sp, #24]
   2c7fc:	add	r3, r5, #4096	; 0x1000
   2c800:	str	r2, [sp, #68]	; 0x44
   2c804:	ldr	r2, [sp, #36]	; 0x24
   2c808:	str	r5, [r3]
   2c80c:	str	r4, [r3, #4]
   2c810:	str	r2, [sp, #72]	; 0x48
   2c814:	mov	r3, #256	; 0x100
   2c818:	ldr	r2, [sp, #40]	; 0x28
   2c81c:	mov	r0, r3
   2c820:	str	r2, [sp, #76]	; 0x4c
   2c824:	str	r3, [sp, #88]	; 0x58
   2c828:	bl	12458 <gcry_malloc@plt>
   2c82c:	cmp	r0, #0
   2c830:	str	r0, [sp, #92]	; 0x5c
   2c834:	beq	2cc78 <__assert_fail@plt+0x19fd4>
   2c838:	cmp	r7, #0
   2c83c:	beq	2c8dc <__assert_fail@plt+0x19c38>
   2c840:	mov	r0, r9
   2c844:	mov	r2, #1
   2c848:	add	r1, sp, #56	; 0x38
   2c84c:	bl	2e85c <__assert_fail@plt+0x1bbb8>
   2c850:	subs	r4, r0, #0
   2c854:	bne	2cb64 <__assert_fail@plt+0x19ec0>
   2c858:	ldr	ip, [sp, #104]	; 0x68
   2c85c:	add	r0, sp, #144	; 0x90
   2c860:	mov	r3, ip
   2c864:	ldr	r2, [pc, #1496]	; 2ce44 <__assert_fail@plt+0x1a1a0>
   2c868:	mov	r1, #20
   2c86c:	str	fp, [sp, #100]	; 0x64
   2c870:	str	ip, [sp, #96]	; 0x60
   2c874:	bl	12a7c <gpgrt_snprintf@plt>
   2c878:	ldr	r3, [sp, #32]
   2c87c:	ldr	r9, [r3]
   2c880:	cmp	r9, #0
   2c884:	beq	2ce18 <__assert_fail@plt+0x1a174>
   2c888:	mov	r2, r4
   2c88c:	str	r5, [sp, #36]	; 0x24
   2c890:	ldr	fp, [pc, #1456]	; 2ce48 <__assert_fail@plt+0x1a1a4>
   2c894:	mov	r5, r3
   2c898:	mov	r4, r2
   2c89c:	b	2c8b0 <__assert_fail@plt+0x19c0c>
   2c8a0:	ldr	r9, [r5, #4]!
   2c8a4:	add	r4, r4, #1
   2c8a8:	cmp	r9, #0
   2c8ac:	beq	2cdf4 <__assert_fail@plt+0x1a150>
   2c8b0:	mov	r1, fp
   2c8b4:	mov	r0, r9
   2c8b8:	bl	124b8 <strcmp@plt>
   2c8bc:	cmp	r0, #0
   2c8c0:	bne	2c8a0 <__assert_fail@plt+0x19bfc>
   2c8c4:	str	r4, [sp, #44]	; 0x2c
   2c8c8:	mov	r4, r5
   2c8cc:	add	r3, sp, #144	; 0x90
   2c8d0:	ldr	r5, [sp, #36]	; 0x24
   2c8d4:	str	r3, [r4]
   2c8d8:	b	2c8e4 <__assert_fail@plt+0x19c40>
   2c8dc:	mov	r9, r7
   2c8e0:	str	fp, [sp, #96]	; 0x60
   2c8e4:	cmp	sl, #0
   2c8e8:	moveq	ip, sl
   2c8ec:	addne	ip, sp, #52	; 0x34
   2c8f0:	add	r0, sp, #48	; 0x30
   2c8f4:	add	r1, sp, #64	; 0x40
   2c8f8:	add	r2, sp, #60	; 0x3c
   2c8fc:	mov	r3, #16
   2c900:	str	r0, [sp, #16]
   2c904:	str	r1, [sp, #12]
   2c908:	str	r2, [sp, #8]
   2c90c:	str	r3, [sp]
   2c910:	str	ip, [sp, #4]
   2c914:	mov	r3, #0
   2c918:	add	r2, sp, #96	; 0x60
   2c91c:	ldr	r1, [sp, #32]
   2c920:	ldr	r0, [sp, #24]
   2c924:	bl	2e878 <__assert_fail@plt+0x1bbd4>
   2c928:	mov	r4, r0
   2c92c:	ldr	r0, [sp, #104]	; 0x68
   2c930:	cmn	r0, #1
   2c934:	beq	2c93c <__assert_fail@plt+0x19c98>
   2c938:	bl	12c5c <close@plt>
   2c93c:	cmp	r9, #0
   2c940:	ldrne	r3, [sp, #32]
   2c944:	ldrne	r2, [sp, #44]	; 0x2c
   2c948:	strne	r9, [r3, r2, lsl #2]
   2c94c:	cmp	r4, #0
   2c950:	bne	2cd84 <__assert_fail@plt+0x1a0e0>
   2c954:	ldrb	r3, [sp, #116]	; 0x74
   2c958:	cmp	sl, #0
   2c95c:	ldr	r2, [sp, #52]	; 0x34
   2c960:	orr	r3, r3, #2
   2c964:	strb	r3, [sp, #116]	; 0x74
   2c968:	ldrbeq	r3, [sp, #118]	; 0x76
   2c96c:	ldrb	r1, [sp, #124]	; 0x7c
   2c970:	str	r2, [sp, #112]	; 0x70
   2c974:	orreq	r3, r3, #128	; 0x80
   2c978:	strbeq	r3, [sp, #118]	; 0x76
   2c97c:	ldrb	r3, [sp, #140]	; 0x8c
   2c980:	cmp	r7, #0
   2c984:	ldrb	r2, [sp, #132]	; 0x84
   2c988:	orr	r3, r3, #2
   2c98c:	strb	r3, [sp, #140]	; 0x8c
   2c990:	ldr	r3, [sp, #56]	; 0x38
   2c994:	orr	r1, r1, #1
   2c998:	str	r3, [sp, #136]	; 0x88
   2c99c:	ldrbeq	r3, [sp, #142]	; 0x8e
   2c9a0:	orr	r2, r2, #1
   2c9a4:	ldr	r9, [pc, #1184]	; 2ce4c <__assert_fail@plt+0x1a1a8>
   2c9a8:	strb	r1, [sp, #124]	; 0x7c
   2c9ac:	strb	r2, [sp, #132]	; 0x84
   2c9b0:	ldr	r1, [sp, #60]	; 0x3c
   2c9b4:	ldr	r2, [sp, #64]	; 0x40
   2c9b8:	orreq	r3, r3, #128	; 0x80
   2c9bc:	str	r1, [sp, #120]	; 0x78
   2c9c0:	str	r2, [sp, #128]	; 0x80
   2c9c4:	strbeq	r3, [sp, #142]	; 0x8e
   2c9c8:	ldrsb	r3, [sp, #126]	; 0x7e
   2c9cc:	cmp	r3, #0
   2c9d0:	bge	2c9e0 <__assert_fail@plt+0x19d3c>
   2c9d4:	ldrsb	r3, [sp, #134]	; 0x86
   2c9d8:	cmp	r3, #0
   2c9dc:	blt	2cd20 <__assert_fail@plt+0x1a07c>
   2c9e0:	mvn	r2, #0
   2c9e4:	mov	r1, #4
   2c9e8:	add	r0, sp, #112	; 0x70
   2c9ec:	bl	12824 <gpgrt_poll@plt>
   2c9f0:	cmn	r0, #1
   2c9f4:	beq	2cda0 <__assert_fail@plt+0x1a0fc>
   2c9f8:	cmp	r0, #0
   2c9fc:	beq	2cd14 <__assert_fail@plt+0x1a070>
   2ca00:	ldrb	r3, [sp, #117]	; 0x75
   2ca04:	tst	r3, #2
   2ca08:	bne	2ca70 <__assert_fail@plt+0x19dcc>
   2ca0c:	ldrb	r3, [sp, #141]	; 0x8d
   2ca10:	tst	r3, #2
   2ca14:	beq	2ca48 <__assert_fail@plt+0x19da4>
   2ca18:	cmp	r7, #0
   2ca1c:	beq	2ce20 <__assert_fail@plt+0x1a17c>
   2ca20:	ldr	r2, [sp, #136]	; 0x88
   2ca24:	mov	r1, r7
   2ca28:	mov	r0, r5
   2ca2c:	bl	2c20c <__assert_fail@plt+0x19568>
   2ca30:	subs	r4, r0, #0
   2ca34:	bne	2cddc <__assert_fail@plt+0x1a138>
   2ca38:	mov	r0, r7
   2ca3c:	bl	12710 <gpgrt_feof@plt>
   2ca40:	cmp	r0, #0
   2ca44:	bne	2cb24 <__assert_fail@plt+0x19e80>
   2ca48:	ldrb	r3, [sp, #125]	; 0x7d
   2ca4c:	tst	r3, #1
   2ca50:	bne	2cad8 <__assert_fail@plt+0x19e34>
   2ca54:	ldrb	r3, [sp, #133]	; 0x85
   2ca58:	tst	r3, #1
   2ca5c:	beq	2c9c8 <__assert_fail@plt+0x19d24>
   2ca60:	add	r1, sp, #128	; 0x80
   2ca64:	add	r0, sp, #68	; 0x44
   2ca68:	bl	2c424 <__assert_fail@plt+0x19780>
   2ca6c:	b	2c9c8 <__assert_fail@plt+0x19d24>
   2ca70:	ldr	r2, [sp, #112]	; 0x70
   2ca74:	mov	r1, sl
   2ca78:	mov	r0, r6
   2ca7c:	bl	2c20c <__assert_fail@plt+0x19568>
   2ca80:	subs	r4, r0, #0
   2ca84:	bne	2cddc <__assert_fail@plt+0x1a138>
   2ca88:	mov	r0, sl
   2ca8c:	bl	12710 <gpgrt_feof@plt>
   2ca90:	cmp	r0, #0
   2ca94:	beq	2ca0c <__assert_fail@plt+0x19d68>
   2ca98:	ldr	r1, [sp, #112]	; 0x70
   2ca9c:	mov	r0, r6
   2caa0:	bl	2c0d0 <__assert_fail@plt+0x1942c>
   2caa4:	uxth	r3, r0
   2caa8:	cmp	r3, r9
   2caac:	mov	r4, r0
   2cab0:	beq	2c9c8 <__assert_fail@plt+0x19d24>
   2cab4:	cmp	r0, #0
   2cab8:	bne	2cddc <__assert_fail@plt+0x1a138>
   2cabc:	ldrb	r3, [sp, #118]	; 0x76
   2cac0:	ldr	r0, [sp, #52]	; 0x34
   2cac4:	orr	r3, r3, #128	; 0x80
   2cac8:	strb	r3, [sp, #118]	; 0x76
   2cacc:	bl	12788 <gpgrt_fclose@plt>
   2cad0:	str	r4, [sp, #52]	; 0x34
   2cad4:	b	2ca0c <__assert_fail@plt+0x19d68>
   2cad8:	ldr	r2, [sp, #28]
   2cadc:	ldr	r1, [sp, #120]	; 0x78
   2cae0:	mov	r0, r8
   2cae4:	bl	2c20c <__assert_fail@plt+0x19568>
   2cae8:	subs	r4, r0, #0
   2caec:	bne	2ce00 <__assert_fail@plt+0x1a15c>
   2caf0:	ldr	r0, [sp, #120]	; 0x78
   2caf4:	bl	12710 <gpgrt_feof@plt>
   2caf8:	cmp	r0, #0
   2cafc:	beq	2ca54 <__assert_fail@plt+0x19db0>
   2cb00:	ldr	r1, [sp, #28]
   2cb04:	mov	r0, r8
   2cb08:	bl	2c0d0 <__assert_fail@plt+0x1942c>
   2cb0c:	subs	r4, r0, #0
   2cb10:	bne	2ce00 <__assert_fail@plt+0x1a15c>
   2cb14:	ldrb	r3, [sp, #126]	; 0x7e
   2cb18:	orr	r3, r3, #128	; 0x80
   2cb1c:	strb	r3, [sp, #126]	; 0x7e
   2cb20:	b	2ca54 <__assert_fail@plt+0x19db0>
   2cb24:	ldr	r1, [sp, #136]	; 0x88
   2cb28:	mov	r0, r5
   2cb2c:	bl	2c0d0 <__assert_fail@plt+0x1942c>
   2cb30:	uxth	r3, r0
   2cb34:	cmp	r3, r9
   2cb38:	mov	r4, r0
   2cb3c:	beq	2c9c8 <__assert_fail@plt+0x19d24>
   2cb40:	cmp	r0, #0
   2cb44:	bne	2cddc <__assert_fail@plt+0x1a138>
   2cb48:	ldrb	r3, [sp, #142]	; 0x8e
   2cb4c:	ldr	r0, [sp, #56]	; 0x38
   2cb50:	orr	r3, r3, #128	; 0x80
   2cb54:	strb	r3, [sp, #142]	; 0x8e
   2cb58:	bl	12788 <gpgrt_fclose@plt>
   2cb5c:	str	r4, [sp, #56]	; 0x38
   2cb60:	b	2ca48 <__assert_fail@plt+0x19da4>
   2cb64:	bl	12b3c <gpg_strerror@plt>
   2cb68:	mov	r1, r0
   2cb6c:	ldr	r0, [pc, #732]	; 2ce50 <__assert_fail@plt+0x1a1ac>
   2cb70:	bl	21cbc <__assert_fail@plt+0xf018>
   2cb74:	ldr	r0, [sp, #48]	; 0x30
   2cb78:	cmn	r0, #1
   2cb7c:	beq	2cb84 <__assert_fail@plt+0x19ee0>
   2cb80:	bl	2f45c <__assert_fail@plt+0x1c7b8>
   2cb84:	ldr	r0, [sp, #52]	; 0x34
   2cb88:	bl	12788 <gpgrt_fclose@plt>
   2cb8c:	ldr	r0, [sp, #56]	; 0x38
   2cb90:	bl	12788 <gpgrt_fclose@plt>
   2cb94:	ldr	r0, [sp, #60]	; 0x3c
   2cb98:	bl	12788 <gpgrt_fclose@plt>
   2cb9c:	ldr	r0, [sp, #64]	; 0x40
   2cba0:	bl	12788 <gpgrt_fclose@plt>
   2cba4:	ldr	r0, [sp, #48]	; 0x30
   2cba8:	cmn	r0, #1
   2cbac:	beq	2cbc8 <__assert_fail@plt+0x19f24>
   2cbb0:	mov	r1, r0
   2cbb4:	mov	r3, #0
   2cbb8:	ldr	r0, [sp, #24]
   2cbbc:	mov	r2, #1
   2cbc0:	bl	2ed3c <__assert_fail@plt+0x1c098>
   2cbc4:	ldr	r0, [sp, #48]	; 0x30
   2cbc8:	bl	2f290 <__assert_fail@plt+0x1c5ec>
   2cbcc:	cmp	r6, #0
   2cbd0:	beq	2cbf0 <__assert_fail@plt+0x19f4c>
   2cbd4:	mov	r1, #4096	; 0x1000
   2cbd8:	mov	r0, r6
   2cbdc:	bl	22068 <__assert_fail@plt+0xf3c4>
   2cbe0:	mov	sl, #0
   2cbe4:	add	r3, r6, #4096	; 0x1000
   2cbe8:	mvn	fp, #0
   2cbec:	strd	sl, [r3]
   2cbf0:	mov	r0, r6
   2cbf4:	bl	125e4 <gcry_free@plt>
   2cbf8:	cmp	r8, #0
   2cbfc:	beq	2cc1c <__assert_fail@plt+0x19f78>
   2cc00:	mov	r1, #4096	; 0x1000
   2cc04:	mov	r0, r8
   2cc08:	bl	22068 <__assert_fail@plt+0xf3c4>
   2cc0c:	mov	sl, #0
   2cc10:	add	r3, r8, #4096	; 0x1000
   2cc14:	mvn	fp, #0
   2cc18:	strd	sl, [r3]
   2cc1c:	mov	r0, r8
   2cc20:	bl	125e4 <gcry_free@plt>
   2cc24:	cmp	r5, #0
   2cc28:	beq	2cc48 <__assert_fail@plt+0x19fa4>
   2cc2c:	mov	r1, #4096	; 0x1000
   2cc30:	mov	r0, r5
   2cc34:	bl	22068 <__assert_fail@plt+0xf3c4>
   2cc38:	mov	r6, #0
   2cc3c:	add	r3, r5, #4096	; 0x1000
   2cc40:	mvn	r7, #0
   2cc44:	strd	r6, [r3]
   2cc48:	mov	r0, r5
   2cc4c:	bl	125e4 <gcry_free@plt>
   2cc50:	ldr	r0, [sp, #92]	; 0x5c
   2cc54:	bl	125e4 <gcry_free@plt>
   2cc58:	ldr	r3, [pc, #476]	; 2ce3c <__assert_fail@plt+0x1a198>
   2cc5c:	ldr	r2, [sp, #164]	; 0xa4
   2cc60:	mov	r0, r4
   2cc64:	ldr	r3, [r3]
   2cc68:	cmp	r2, r3
   2cc6c:	bne	2ce34 <__assert_fail@plt+0x1a190>
   2cc70:	add	sp, sp, #172	; 0xac
   2cc74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc78:	ldr	r3, [pc, #468]	; 2ce54 <__assert_fail@plt+0x1a1b0>
   2cc7c:	ldr	r7, [r3]
   2cc80:	bl	12914 <gpg_err_code_from_syserror@plt>
   2cc84:	subs	r4, r0, #0
   2cc88:	beq	2cb84 <__assert_fail@plt+0x19ee0>
   2cc8c:	lsl	r3, r7, #24
   2cc90:	and	r3, r3, #2130706432	; 0x7f000000
   2cc94:	uxth	r4, r4
   2cc98:	orr	r4, r3, r4
   2cc9c:	cmp	r4, #0
   2cca0:	beq	2cb84 <__assert_fail@plt+0x19ee0>
   2cca4:	b	2cb74 <__assert_fail@plt+0x19ed0>
   2cca8:	ldr	r3, [pc, #420]	; 2ce54 <__assert_fail@plt+0x1a1b0>
   2ccac:	ldr	r4, [r3]
   2ccb0:	bl	12914 <gpg_err_code_from_syserror@plt>
   2ccb4:	cmp	r0, #0
   2ccb8:	beq	2ccd8 <__assert_fail@plt+0x1a034>
   2ccbc:	lsl	r4, r4, #24
   2ccc0:	and	r4, r4, #2130706432	; 0x7f000000
   2ccc4:	uxth	r0, r0
   2ccc8:	orr	r4, r4, r0
   2cccc:	mov	r5, r6
   2ccd0:	mov	r8, r6
   2ccd4:	b	2cc9c <__assert_fail@plt+0x19ff8>
   2ccd8:	mov	r5, #0
   2ccdc:	mov	r8, r5
   2cce0:	mov	r4, r5
   2cce4:	b	2cb84 <__assert_fail@plt+0x19ee0>
   2cce8:	ldr	r3, [pc, #356]	; 2ce54 <__assert_fail@plt+0x1a1b0>
   2ccec:	ldr	r4, [r3]
   2ccf0:	bl	12914 <gpg_err_code_from_syserror@plt>
   2ccf4:	cmp	r0, #0
   2ccf8:	beq	2ccd8 <__assert_fail@plt+0x1a034>
   2ccfc:	lsl	r4, r4, #24
   2cd00:	and	r4, r4, #2130706432	; 0x7f000000
   2cd04:	uxth	r0, r0
   2cd08:	orr	r4, r4, r0
   2cd0c:	mov	r5, r8
   2cd10:	b	2cc9c <__assert_fail@plt+0x19ff8>
   2cd14:	ldr	r1, [sp, #24]
   2cd18:	ldr	r0, [pc, #312]	; 2ce58 <__assert_fail@plt+0x1a1b4>
   2cd1c:	bl	21e08 <__assert_fail@plt+0xf164>
   2cd20:	mov	r1, #0
   2cd24:	add	r0, sp, #68	; 0x44
   2cd28:	bl	2c424 <__assert_fail@plt+0x19780>
   2cd2c:	ldr	r0, [sp, #52]	; 0x34
   2cd30:	bl	12788 <gpgrt_fclose@plt>
   2cd34:	mov	r4, #0
   2cd38:	ldr	r0, [sp, #56]	; 0x38
   2cd3c:	str	r4, [sp, #52]	; 0x34
   2cd40:	bl	12788 <gpgrt_fclose@plt>
   2cd44:	ldr	r0, [sp, #60]	; 0x3c
   2cd48:	str	r4, [sp, #56]	; 0x38
   2cd4c:	bl	12788 <gpgrt_fclose@plt>
   2cd50:	ldr	r0, [sp, #64]	; 0x40
   2cd54:	str	r4, [sp, #60]	; 0x3c
   2cd58:	bl	12788 <gpgrt_fclose@plt>
   2cd5c:	mov	r3, r4
   2cd60:	mov	r2, #1
   2cd64:	ldr	r1, [sp, #48]	; 0x30
   2cd68:	ldr	r0, [sp, #24]
   2cd6c:	str	r4, [sp, #64]	; 0x40
   2cd70:	bl	2ed3c <__assert_fail@plt+0x1c098>
   2cd74:	mvn	r3, #0
   2cd78:	str	r3, [sp, #48]	; 0x30
   2cd7c:	mov	r4, r0
   2cd80:	b	2cc9c <__assert_fail@plt+0x19ff8>
   2cd84:	mov	r0, r4
   2cd88:	bl	12b3c <gpg_strerror@plt>
   2cd8c:	ldr	r1, [sp, #24]
   2cd90:	mov	r2, r0
   2cd94:	ldr	r0, [pc, #192]	; 2ce5c <__assert_fail@plt+0x1a1b8>
   2cd98:	bl	21cbc <__assert_fail@plt+0xf018>
   2cd9c:	b	2cb74 <__assert_fail@plt+0x19ed0>
   2cda0:	ldr	r3, [pc, #172]	; 2ce54 <__assert_fail@plt+0x1a1b0>
   2cda4:	ldr	r7, [r3]
   2cda8:	bl	12914 <gpg_err_code_from_syserror@plt>
   2cdac:	subs	r4, r0, #0
   2cdb0:	lslne	r3, r7, #24
   2cdb4:	uxthne	r4, r4
   2cdb8:	andne	r3, r3, #2130706432	; 0x7f000000
   2cdbc:	orrne	r4, r3, r4
   2cdc0:	mov	r0, r4
   2cdc4:	bl	12b3c <gpg_strerror@plt>
   2cdc8:	ldr	r1, [sp, #24]
   2cdcc:	mov	r2, r0
   2cdd0:	ldr	r0, [pc, #136]	; 2ce60 <__assert_fail@plt+0x1a1bc>
   2cdd4:	bl	21cbc <__assert_fail@plt+0xf018>
   2cdd8:	b	2cc9c <__assert_fail@plt+0x19ff8>
   2cddc:	bl	12b3c <gpg_strerror@plt>
   2cde0:	ldr	r1, [sp, #24]
   2cde4:	mov	r2, r0
   2cde8:	ldr	r0, [pc, #116]	; 2ce64 <__assert_fail@plt+0x1a1c0>
   2cdec:	bl	21cbc <__assert_fail@plt+0xf018>
   2cdf0:	b	2cb74 <__assert_fail@plt+0x19ed0>
   2cdf4:	str	r4, [sp, #44]	; 0x2c
   2cdf8:	ldr	r5, [sp, #36]	; 0x24
   2cdfc:	b	2c8e4 <__assert_fail@plt+0x19c40>
   2ce00:	bl	12b3c <gpg_strerror@plt>
   2ce04:	ldr	r1, [sp, #24]
   2ce08:	mov	r2, r0
   2ce0c:	ldr	r0, [pc, #84]	; 2ce68 <__assert_fail@plt+0x1a1c4>
   2ce10:	bl	21cbc <__assert_fail@plt+0xf018>
   2ce14:	b	2cb74 <__assert_fail@plt+0x19ed0>
   2ce18:	str	r9, [sp, #44]	; 0x2c
   2ce1c:	b	2c8e4 <__assert_fail@plt+0x19c40>
   2ce20:	ldr	r3, [pc, #68]	; 2ce6c <__assert_fail@plt+0x1a1c8>
   2ce24:	ldr	r2, [pc, #68]	; 2ce70 <__assert_fail@plt+0x1a1cc>
   2ce28:	ldr	r1, [pc, #68]	; 2ce74 <__assert_fail@plt+0x1a1d0>
   2ce2c:	ldr	r0, [pc, #68]	; 2ce78 <__assert_fail@plt+0x1a1d4>
   2ce30:	bl	22044 <__assert_fail@plt+0xf3a0>
   2ce34:	bl	1262c <__stack_chk_fail@plt>
   2ce38:	ldrdeq	r5, [r3], -r8
   2ce3c:	strdeq	r5, [r4], -r8
   2ce40:	andeq	r1, r0, r8
   2ce44:	andeq	r5, r3, r0, lsl r2
   2ce48:	andeq	r1, r3, r0, lsr #26
   2ce4c:	andeq	r8, r0, r6
   2ce50:	andeq	r5, r3, r0, ror #3
   2ce54:			; <UNDEFINED> instruction: 0x000462b0
   2ce58:	andeq	r5, r3, r8, asr #4
   2ce5c:	andeq	r5, r3, r8, lsl r2
   2ce60:	andeq	r5, r3, r0, lsr r2
   2ce64:	andeq	r5, r3, r0, ror r2
   2ce68:	muleq	r3, r8, r2
   2ce6c:	andeq	r5, r3, r0, ror #1
   2ce70:	ldrdeq	r0, [r0], -lr
   2ce74:	andeq	r5, r3, r8, lsl #2
   2ce78:	muleq	r3, r0, r2
   2ce7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ce80:	sub	sp, sp, #24
   2ce84:	ldr	r7, [pc, #552]	; 2d0b4 <__assert_fail@plt+0x1a410>
   2ce88:	ldr	r8, [sp, #56]	; 0x38
   2ce8c:	mov	r9, r3
   2ce90:	ldr	ip, [r7]
   2ce94:	cmp	r8, #0
   2ce98:	mov	r3, #0
   2ce9c:	str	r3, [r9]
   2cea0:	strne	r3, [r8]
   2cea4:	cmp	r2, #0
   2cea8:	mov	r5, r0
   2ceac:	mov	sl, r1
   2ceb0:	mov	r4, r2
   2ceb4:	str	ip, [sp, #20]
   2ceb8:	beq	2cef0 <__assert_fail@plt+0x1a24c>
   2cebc:	mov	r0, r2
   2cec0:	bl	128d8 <strlen@plt>
   2cec4:	ldr	r3, [pc, #492]	; 2d0b8 <__assert_fail@plt+0x1a414>
   2cec8:	ldr	ip, [pc, #492]	; 2d0bc <__assert_fail@plt+0x1a418>
   2cecc:	str	r3, [sp, #8]
   2ced0:	mov	r3, #0
   2ced4:	stm	sp, {r3, ip}
   2ced8:	mov	r2, r0
   2cedc:	mov	r1, r2
   2cee0:	mov	r0, r4
   2cee4:	bl	12c8c <gpgrt_mopen@plt>
   2cee8:	subs	r4, r0, #0
   2ceec:	beq	2d024 <__assert_fail@plt+0x1a380>
   2cef0:	ldr	r1, [pc, #456]	; 2d0c0 <__assert_fail@plt+0x1a41c>
   2cef4:	mov	r0, #0
   2cef8:	bl	12920 <gpgrt_fopenmem@plt>
   2cefc:	subs	r6, r0, #0
   2cf00:	beq	2cfcc <__assert_fail@plt+0x1a328>
   2cf04:	mov	r3, #0
   2cf08:	mov	r0, r5
   2cf0c:	str	r6, [sp]
   2cf10:	mov	r1, sl
   2cf14:	str	r3, [sp, #8]
   2cf18:	str	r3, [sp, #4]
   2cf1c:	mov	r2, r4
   2cf20:	bl	2c71c <__assert_fail@plt+0x19a78>
   2cf24:	subs	r5, r0, #0
   2cf28:	beq	2cf68 <__assert_fail@plt+0x1a2c4>
   2cf2c:	mov	r0, r4
   2cf30:	bl	12788 <gpgrt_fclose@plt>
   2cf34:	mov	r0, r6
   2cf38:	bl	12788 <gpgrt_fclose@plt>
   2cf3c:	ldr	r0, [r9]
   2cf40:	bl	125e4 <gcry_free@plt>
   2cf44:	mov	r3, #0
   2cf48:	str	r3, [r9]
   2cf4c:	ldr	r2, [sp, #20]
   2cf50:	ldr	r3, [r7]
   2cf54:	mov	r0, r5
   2cf58:	cmp	r2, r3
   2cf5c:	bne	2d0a4 <__assert_fail@plt+0x1a400>
   2cf60:	add	sp, sp, #24
   2cf64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cf68:	mov	r0, r6
   2cf6c:	bl	1268c <gpgrt_ftello@plt>
   2cf70:	mov	r2, r5
   2cf74:	mov	r1, r5
   2cf78:	mov	sl, r0
   2cf7c:	mov	r0, r6
   2cf80:	bl	12b18 <gpgrt_fseek@plt>
   2cf84:	subs	r5, r0, #0
   2cf88:	bne	2cf2c <__assert_fail@plt+0x1a288>
   2cf8c:	add	r0, sl, #1
   2cf90:	bl	12458 <gcry_malloc@plt>
   2cf94:	cmp	r0, #0
   2cf98:	str	r0, [r9]
   2cf9c:	beq	2d07c <__assert_fail@plt+0x1a3d8>
   2cfa0:	cmp	sl, #0
   2cfa4:	bne	2d04c <__assert_fail@plt+0x1a3a8>
   2cfa8:	cmp	r8, #0
   2cfac:	mov	r3, #0
   2cfb0:	strb	r3, [r0, sl]
   2cfb4:	strne	sl, [r8]
   2cfb8:	mov	r0, r4
   2cfbc:	bl	12788 <gpgrt_fclose@plt>
   2cfc0:	mov	r0, r6
   2cfc4:	bl	12788 <gpgrt_fclose@plt>
   2cfc8:	b	2cf4c <__assert_fail@plt+0x1a2a8>
   2cfcc:	ldr	r3, [pc, #240]	; 2d0c4 <__assert_fail@plt+0x1a420>
   2cfd0:	ldr	r8, [r3]
   2cfd4:	bl	12914 <gpg_err_code_from_syserror@plt>
   2cfd8:	subs	r5, r0, #0
   2cfdc:	bne	2cff4 <__assert_fail@plt+0x1a350>
   2cfe0:	mov	r0, r4
   2cfe4:	bl	12788 <gpgrt_fclose@plt>
   2cfe8:	mov	r0, r5
   2cfec:	bl	12788 <gpgrt_fclose@plt>
   2cff0:	b	2cf4c <__assert_fail@plt+0x1a2a8>
   2cff4:	lsl	r8, r8, #24
   2cff8:	and	r8, r8, #2130706432	; 0x7f000000
   2cffc:	uxth	r5, r5
   2d000:	orr	r5, r8, r5
   2d004:	mov	r0, r4
   2d008:	bl	12788 <gpgrt_fclose@plt>
   2d00c:	mov	r0, r6
   2d010:	bl	12788 <gpgrt_fclose@plt>
   2d014:	cmp	r5, #0
   2d018:	bne	2cf3c <__assert_fail@plt+0x1a298>
   2d01c:	mov	r5, #0
   2d020:	b	2cf4c <__assert_fail@plt+0x1a2a8>
   2d024:	ldr	r3, [pc, #152]	; 2d0c4 <__assert_fail@plt+0x1a420>
   2d028:	ldr	r5, [r3]
   2d02c:	bl	12914 <gpg_err_code_from_syserror@plt>
   2d030:	cmp	r0, #0
   2d034:	beq	2d01c <__assert_fail@plt+0x1a378>
   2d038:	lsl	r5, r5, #24
   2d03c:	and	r5, r5, #2130706432	; 0x7f000000
   2d040:	uxth	r0, r0
   2d044:	orr	r5, r5, r0
   2d048:	b	2cf4c <__assert_fail@plt+0x1a2a8>
   2d04c:	mov	r1, r0
   2d050:	add	r3, sp, #16
   2d054:	mov	r2, sl
   2d058:	mov	r0, r6
   2d05c:	bl	125cc <gpgrt_read@plt>
   2d060:	cmp	r0, #0
   2d064:	bne	2d07c <__assert_fail@plt+0x1a3d8>
   2d068:	ldr	r3, [sp, #16]
   2d06c:	cmp	r3, sl
   2d070:	bne	2d0a8 <__assert_fail@plt+0x1a404>
   2d074:	ldr	r0, [r9]
   2d078:	b	2cfa8 <__assert_fail@plt+0x1a304>
   2d07c:	ldr	r3, [pc, #64]	; 2d0c4 <__assert_fail@plt+0x1a420>
   2d080:	ldr	r8, [r3]
   2d084:	bl	12914 <gpg_err_code_from_syserror@plt>
   2d088:	subs	r5, r0, #0
   2d08c:	beq	2cfb8 <__assert_fail@plt+0x1a314>
   2d090:	lsl	r3, r8, #24
   2d094:	and	r3, r3, #2130706432	; 0x7f000000
   2d098:	uxth	r5, r5
   2d09c:	orr	r5, r3, r5
   2d0a0:	b	2d004 <__assert_fail@plt+0x1a360>
   2d0a4:	bl	1262c <__stack_chk_fail@plt>
   2d0a8:	ldr	r1, [pc, #24]	; 2d0c8 <__assert_fail@plt+0x1a424>
   2d0ac:	ldr	r0, [pc, #24]	; 2d0cc <__assert_fail@plt+0x1a428>
   2d0b0:	bl	21d40 <__assert_fail@plt+0xf09c>
   2d0b4:	strdeq	r5, [r4], -r8
   2d0b8:	andeq	r0, r3, r0, lsl ip
   2d0bc:	andeq	ip, r2, ip, asr #1
   2d0c0:	andeq	r1, r3, r4, ror r7
   2d0c4:			; <UNDEFINED> instruction: 0x000462b0
   2d0c8:	strdeq	r5, [r3], -r8
   2d0cc:			; <UNDEFINED> instruction: 0x000352bc
   2d0d0:	push	{r4, r5, r6, lr}
   2d0d4:	mov	r5, r1
   2d0d8:	ldrb	r3, [r0]
   2d0dc:	ldr	r1, [r1]
   2d0e0:	mov	r6, r2
   2d0e4:	cmp	r3, #13
   2d0e8:	cmpne	r3, #32
   2d0ec:	moveq	r2, #1
   2d0f0:	movne	r2, #0
   2d0f4:	sub	r3, r3, #9
   2d0f8:	cmp	r3, #1
   2d0fc:	movhi	r3, r2
   2d100:	orrls	r3, r2, #1
   2d104:	cmp	r1, #0
   2d108:	mov	r4, r0
   2d10c:	beq	2d1e0 <__assert_fail@plt+0x1a53c>
   2d110:	cmp	r3, #0
   2d114:	beq	2d144 <__assert_fail@plt+0x1a4a0>
   2d118:	ldrb	r3, [r4, #1]!
   2d11c:	cmp	r3, #13
   2d120:	cmpne	r3, #32
   2d124:	moveq	r0, #1
   2d128:	movne	r0, #0
   2d12c:	sub	r3, r3, #9
   2d130:	cmp	r3, #1
   2d134:	movhi	r3, r0
   2d138:	orrls	r3, r0, #1
   2d13c:	cmp	r3, #0
   2d140:	bne	2d118 <__assert_fail@plt+0x1a474>
   2d144:	mov	r0, r4
   2d148:	bl	128d8 <strlen@plt>
   2d14c:	subs	ip, r0, #0
   2d150:	beq	2d1c8 <__assert_fail@plt+0x1a524>
   2d154:	sub	r0, ip, #1
   2d158:	add	r2, r4, r0
   2d15c:	ldrb	r3, [r4, r0]
   2d160:	cmp	r3, #32
   2d164:	cmpne	r3, #13
   2d168:	moveq	r1, #1
   2d16c:	movne	r1, #0
   2d170:	sub	r3, r3, #9
   2d174:	cmp	r3, #1
   2d178:	movhi	r3, r1
   2d17c:	orrls	r3, r1, #1
   2d180:	cmp	r3, #0
   2d184:	bne	2d1c0 <__assert_fail@plt+0x1a51c>
   2d188:	b	2d1ec <__assert_fail@plt+0x1a548>
   2d18c:	ldrb	r3, [r2, #-1]!
   2d190:	sub	r1, r0, #1
   2d194:	cmp	r3, #13
   2d198:	cmpne	r3, #32
   2d19c:	moveq	ip, #1
   2d1a0:	movne	ip, #0
   2d1a4:	sub	r3, r3, #9
   2d1a8:	cmp	r3, #1
   2d1ac:	movhi	r3, ip
   2d1b0:	orrls	r3, ip, #1
   2d1b4:	cmp	r3, #0
   2d1b8:	beq	2d1f0 <__assert_fail@plt+0x1a54c>
   2d1bc:	mov	r0, r1
   2d1c0:	cmp	r0, #0
   2d1c4:	bne	2d18c <__assert_fail@plt+0x1a4e8>
   2d1c8:	ldr	r4, [pc, #44]	; 2d1fc <__assert_fail@plt+0x1a558>
   2d1cc:	mov	r0, #1
   2d1d0:	str	r0, [r5]
   2d1d4:	cmp	r6, #0
   2d1d8:	strne	r4, [r6]
   2d1dc:	pop	{r4, r5, r6, pc}
   2d1e0:	cmp	r3, #0
   2d1e4:	addne	r4, r0, #1
   2d1e8:	b	2d144 <__assert_fail@plt+0x1a4a0>
   2d1ec:	mov	r0, ip
   2d1f0:	mov	r3, #0
   2d1f4:	str	r3, [r5]
   2d1f8:	b	2d1d4 <__assert_fail@plt+0x1a530>
   2d1fc:	andeq	r0, r3, r0, lsl #26
   2d200:	push	{r4, lr}
   2d204:	mov	r4, r0
   2d208:	bl	128d8 <strlen@plt>
   2d20c:	ldrb	r3, [r4]
   2d210:	bic	r3, r3, #32
   2d214:	sub	r2, r3, #65	; 0x41
   2d218:	clz	r3, r0
   2d21c:	lsr	r3, r3, #5
   2d220:	cmp	r2, #25
   2d224:	orrhi	r3, r3, #1
   2d228:	cmp	r3, #0
   2d22c:	beq	2d238 <__assert_fail@plt+0x1a594>
   2d230:	mov	r0, #0
   2d234:	pop	{r4, pc}
   2d238:	sub	r2, r0, #1
   2d23c:	ldrb	r1, [r4, r2]
   2d240:	cmp	r1, #58	; 0x3a
   2d244:	bne	2d230 <__assert_fail@plt+0x1a58c>
   2d248:	cmp	r2, #1
   2d24c:	bls	2d288 <__assert_fail@plt+0x1a5e4>
   2d250:	sub	r3, r4, #2
   2d254:	mov	r2, r4
   2d258:	add	r0, r3, r0
   2d25c:	ldrb	r1, [r2, #1]!
   2d260:	bic	r3, r1, #32
   2d264:	sub	r3, r3, #65	; 0x41
   2d268:	cmp	r3, #25
   2d26c:	sub	ip, r1, #48	; 0x30
   2d270:	bls	2d280 <__assert_fail@plt+0x1a5dc>
   2d274:	cmp	r1, #45	; 0x2d
   2d278:	cmpne	ip, #9
   2d27c:	bhi	2d230 <__assert_fail@plt+0x1a58c>
   2d280:	cmp	r0, r2
   2d284:	bne	2d25c <__assert_fail@plt+0x1a5b8>
   2d288:	mov	r0, #1
   2d28c:	pop	{r4, pc}
   2d290:	push	{r4, r5, r6, lr}
   2d294:	subs	r4, r0, #0
   2d298:	popeq	{r4, r5, r6, pc}
   2d29c:	ldr	r0, [r4, #8]
   2d2a0:	mov	r5, r1
   2d2a4:	bl	125e4 <gcry_free@plt>
   2d2a8:	ldr	r6, [r4, #16]
   2d2ac:	subs	r0, r6, #0
   2d2b0:	beq	2d2d4 <__assert_fail@plt+0x1a630>
   2d2b4:	cmp	r5, #0
   2d2b8:	bne	2d2f4 <__assert_fail@plt+0x1a650>
   2d2bc:	bl	125e4 <gcry_free@plt>
   2d2c0:	ldr	r0, [r4, #12]
   2d2c4:	bl	1d550 <__assert_fail@plt+0xa8ac>
   2d2c8:	mov	r0, r4
   2d2cc:	pop	{r4, r5, r6, lr}
   2d2d0:	b	125e4 <gcry_free@plt>
   2d2d4:	bl	125e4 <gcry_free@plt>
   2d2d8:	cmp	r5, #0
   2d2dc:	beq	2d2c0 <__assert_fail@plt+0x1a61c>
   2d2e0:	ldr	r0, [r4, #12]
   2d2e4:	bl	1d570 <__assert_fail@plt+0xa8cc>
   2d2e8:	mov	r0, r4
   2d2ec:	pop	{r4, r5, r6, lr}
   2d2f0:	b	125e4 <gcry_free@plt>
   2d2f4:	bl	128d8 <strlen@plt>
   2d2f8:	mov	r1, r0
   2d2fc:	mov	r0, r6
   2d300:	bl	22068 <__assert_fail@plt+0xf3c4>
   2d304:	ldr	r0, [r4, #16]
   2d308:	bl	125e4 <gcry_free@plt>
   2d30c:	ldr	r0, [r4, #12]
   2d310:	bl	1d570 <__assert_fail@plt+0xa8cc>
   2d314:	b	2d2e8 <__assert_fail@plt+0x1a644>
   2d318:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d31c:	sub	sp, sp, #16
   2d320:	ldr	r8, [pc, #304]	; 2d458 <__assert_fail@plt+0x1a7b4>
   2d324:	ldr	r4, [r0]
   2d328:	mov	r6, #0
   2d32c:	ldr	r3, [r8]
   2d330:	cmp	r4, #0
   2d334:	mov	r5, r0
   2d338:	mov	sl, r1
   2d33c:	str	r3, [sp, #12]
   2d340:	str	r6, [sp, #4]
   2d344:	beq	2d408 <__assert_fail@plt+0x1a764>
   2d348:	add	r9, sp, #4
   2d34c:	add	r0, r4, #8
   2d350:	mov	r2, #0
   2d354:	mov	r1, r9
   2d358:	bl	2d0d0 <__assert_fail@plt+0x1a42c>
   2d35c:	ldr	r4, [r4]
   2d360:	cmp	r4, #0
   2d364:	add	r6, r6, r0
   2d368:	bne	2d34c <__assert_fail@plt+0x1a6a8>
   2d36c:	add	r6, r6, #1
   2d370:	mov	r0, r6
   2d374:	bl	12458 <gcry_malloc@plt>
   2d378:	cmp	r0, #0
   2d37c:	mov	r4, r0
   2d380:	str	r0, [sl]
   2d384:	beq	2d418 <__assert_fail@plt+0x1a774>
   2d388:	ldr	r5, [r5]
   2d38c:	mov	r3, #0
   2d390:	cmp	r5, r3
   2d394:	str	r3, [sp, #4]
   2d398:	beq	2d410 <__assert_fail@plt+0x1a76c>
   2d39c:	add	r9, sp, #4
   2d3a0:	add	r2, sp, #8
   2d3a4:	mov	r1, r9
   2d3a8:	add	r0, r5, #8
   2d3ac:	bl	2d0d0 <__assert_fail@plt+0x1a42c>
   2d3b0:	ldr	r1, [sp, #8]
   2d3b4:	mov	r7, r0
   2d3b8:	mov	r2, r0
   2d3bc:	mov	r0, r4
   2d3c0:	bl	125b4 <memcpy@plt>
   2d3c4:	ldr	r5, [r5]
   2d3c8:	add	r4, r4, r7
   2d3cc:	cmp	r5, #0
   2d3d0:	bne	2d3a0 <__assert_fail@plt+0x1a6fc>
   2d3d4:	ldr	r2, [sl]
   2d3d8:	mov	r3, #0
   2d3dc:	strb	r3, [r4], #1
   2d3e0:	sub	r4, r4, r2
   2d3e4:	cmp	r4, r6
   2d3e8:	bne	2d444 <__assert_fail@plt+0x1a7a0>
   2d3ec:	mov	r0, #0
   2d3f0:	ldr	r2, [sp, #12]
   2d3f4:	ldr	r3, [r8]
   2d3f8:	cmp	r2, r3
   2d3fc:	bne	2d440 <__assert_fail@plt+0x1a79c>
   2d400:	add	sp, sp, #16
   2d404:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d408:	mov	r6, #1
   2d40c:	b	2d370 <__assert_fail@plt+0x1a6cc>
   2d410:	mov	r2, r0
   2d414:	b	2d3d8 <__assert_fail@plt+0x1a734>
   2d418:	ldr	r3, [pc, #60]	; 2d45c <__assert_fail@plt+0x1a7b8>
   2d41c:	ldr	r4, [r3]
   2d420:	bl	12914 <gpg_err_code_from_syserror@plt>
   2d424:	cmp	r0, #0
   2d428:	beq	2d3ec <__assert_fail@plt+0x1a748>
   2d42c:	lsl	r3, r4, #24
   2d430:	and	r3, r3, #2130706432	; 0x7f000000
   2d434:	uxth	r0, r0
   2d438:	orr	r0, r3, r0
   2d43c:	b	2d3f0 <__assert_fail@plt+0x1a74c>
   2d440:	bl	1262c <__stack_chk_fail@plt>
   2d444:	ldr	r3, [pc, #20]	; 2d460 <__assert_fail@plt+0x1a7bc>
   2d448:	ldr	r2, [pc, #20]	; 2d464 <__assert_fail@plt+0x1a7c0>
   2d44c:	ldr	r1, [pc, #20]	; 2d468 <__assert_fail@plt+0x1a7c4>
   2d450:	ldr	r0, [pc, #20]	; 2d46c <__assert_fail@plt+0x1a7c8>
   2d454:	bl	12ca4 <__assert_fail@plt>
   2d458:	strdeq	r5, [r4], -r8
   2d45c:			; <UNDEFINED> instruction: 0x000462b0
   2d460:	ldrdeq	r5, [r3], -ip
   2d464:	andeq	r0, r0, pc, lsr r1
   2d468:	strdeq	r5, [r3], -r8
   2d46c:	andeq	r5, r3, r4, lsl r3
   2d470:	mov	r1, #12
   2d474:	mov	r0, #1
   2d478:	b	129bc <gcry_calloc@plt>
   2d47c:	push	{r4, lr}
   2d480:	mov	r1, #12
   2d484:	mov	r0, #1
   2d488:	bl	129bc <gcry_calloc@plt>
   2d48c:	cmp	r0, #0
   2d490:	ldrbne	r3, [r0, #8]
   2d494:	orrne	r3, r3, #1
   2d498:	strbne	r3, [r0, #8]
   2d49c:	pop	{r4, pc}
   2d4a0:	push	{r4, r5, r6, lr}
   2d4a4:	subs	r5, r0, #0
   2d4a8:	popeq	{r4, r5, r6, pc}
   2d4ac:	ldr	r0, [r5]
   2d4b0:	cmp	r0, #0
   2d4b4:	beq	2d4d0 <__assert_fail@plt+0x1a82c>
   2d4b8:	ldrb	r1, [r5, #8]
   2d4bc:	ldr	r4, [r0, #4]
   2d4c0:	and	r1, r1, #1
   2d4c4:	bl	2d290 <__assert_fail@plt+0x1a5ec>
   2d4c8:	subs	r0, r4, #0
   2d4cc:	bne	2d4b8 <__assert_fail@plt+0x1a814>
   2d4d0:	mov	r0, r5
   2d4d4:	pop	{r4, r5, r6, lr}
   2d4d8:	b	125e4 <gcry_free@plt>
   2d4dc:	ldr	r0, [r0, #8]
   2d4e0:	bx	lr
   2d4e4:	push	{r4, r5, r6, lr}
   2d4e8:	ldr	r5, [r0, #16]
   2d4ec:	cmp	r5, #0
   2d4f0:	bne	2d50c <__assert_fail@plt+0x1a868>
   2d4f4:	mov	r4, r0
   2d4f8:	add	r1, r0, #16
   2d4fc:	add	r0, r0, #12
   2d500:	bl	2d318 <__assert_fail@plt+0x1a674>
   2d504:	cmp	r0, #0
   2d508:	ldreq	r5, [r4, #16]
   2d50c:	mov	r0, r5
   2d510:	pop	{r4, r5, r6, pc}
   2d514:	ldrd	r2, [r1]
   2d518:	cmp	r2, #0
   2d51c:	strne	r3, [r2, #4]
   2d520:	ldrne	r3, [r1, #4]
   2d524:	streq	r3, [r0]
   2d528:	cmp	r3, #0
   2d52c:	strne	r2, [r3]
   2d530:	ldrb	r3, [r0, #8]
   2d534:	streq	r2, [r0, #4]
   2d538:	mov	r0, r1
   2d53c:	and	r1, r3, #1
   2d540:	b	2d290 <__assert_fail@plt+0x1a5ec>
   2d544:	ldr	r0, [r0]
   2d548:	cmp	r0, #0
   2d54c:	bxeq	lr
   2d550:	ldr	r3, [r0, #8]
   2d554:	cmp	r3, #0
   2d558:	bxne	lr
   2d55c:	ldr	r0, [r0, #4]
   2d560:	cmp	r0, #0
   2d564:	bne	2d550 <__assert_fail@plt+0x1a8ac>
   2d568:	bx	lr
   2d56c:	push	{r4, r5, r6, lr}
   2d570:	ldr	r4, [r0]
   2d574:	cmp	r4, #0
   2d578:	beq	2d5a8 <__assert_fail@plt+0x1a904>
   2d57c:	mov	r5, r1
   2d580:	ldr	r3, [r4, #8]
   2d584:	mov	r1, r5
   2d588:	subs	r0, r3, #0
   2d58c:	beq	2d59c <__assert_fail@plt+0x1a8f8>
   2d590:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   2d594:	cmp	r0, #0
   2d598:	beq	2d5ac <__assert_fail@plt+0x1a908>
   2d59c:	ldr	r4, [r4, #4]
   2d5a0:	cmp	r4, #0
   2d5a4:	bne	2d580 <__assert_fail@plt+0x1a8dc>
   2d5a8:	mov	r4, #0
   2d5ac:	mov	r0, r4
   2d5b0:	pop	{r4, r5, r6, pc}
   2d5b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d5b8:	mov	r8, r3
   2d5bc:	orrs	r3, r2, r8
   2d5c0:	beq	2d77c <__assert_fail@plt+0x1aad8>
   2d5c4:	cmp	r1, #0
   2d5c8:	mov	r6, r2
   2d5cc:	mov	r7, r0
   2d5d0:	mov	r5, r1
   2d5d4:	beq	2d5f4 <__assert_fail@plt+0x1a950>
   2d5d8:	mov	r0, r1
   2d5dc:	bl	2d200 <__assert_fail@plt+0x1a55c>
   2d5e0:	cmp	r0, #0
   2d5e4:	beq	2d690 <__assert_fail@plt+0x1a9ec>
   2d5e8:	ldrb	r3, [r7, #8]
   2d5ec:	tst	r3, #1
   2d5f0:	bne	2d668 <__assert_fail@plt+0x1a9c4>
   2d5f4:	mov	r1, #20
   2d5f8:	mov	r0, #1
   2d5fc:	bl	129bc <gcry_calloc@plt>
   2d600:	subs	r9, r0, #0
   2d604:	beq	2d74c <__assert_fail@plt+0x1aaa8>
   2d608:	ldr	r4, [r7]
   2d60c:	str	r5, [r9, #8]
   2d610:	cmp	r4, #0
   2d614:	str	r6, [r9, #16]
   2d618:	str	r8, [r9, #12]
   2d61c:	beq	2d6e0 <__assert_fail@plt+0x1aa3c>
   2d620:	ldr	r3, [sp, #32]
   2d624:	cmp	r5, #0
   2d628:	andne	r3, r3, #1
   2d62c:	moveq	r3, #1
   2d630:	cmp	r3, #0
   2d634:	beq	2d6f0 <__assert_fail@plt+0x1aa4c>
   2d638:	ldr	r6, [r7, #4]
   2d63c:	ldr	r4, [r6, #4]
   2d640:	cmp	r4, #0
   2d644:	beq	2d734 <__assert_fail@plt+0x1aa90>
   2d648:	str	r4, [r9, #4]
   2d64c:	str	r6, [r9]
   2d650:	str	r9, [r6, #4]
   2d654:	ldr	r3, [r9, #4]
   2d658:	mov	r4, #0
   2d65c:	str	r9, [r3]
   2d660:	mov	r0, r4
   2d664:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d668:	ldr	r1, [pc, #288]	; 2d790 <__assert_fail@plt+0x1aaec>
   2d66c:	mov	r0, r5
   2d670:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   2d674:	cmp	r0, #0
   2d678:	bne	2d5f4 <__assert_fail@plt+0x1a950>
   2d67c:	ldr	r1, [pc, #268]	; 2d790 <__assert_fail@plt+0x1aaec>
   2d680:	mov	r0, r7
   2d684:	bl	2d56c <__assert_fail@plt+0x1a8c8>
   2d688:	cmp	r0, #0
   2d68c:	beq	2d5f4 <__assert_fail@plt+0x1a950>
   2d690:	ldr	r3, [pc, #252]	; 2d794 <__assert_fail@plt+0x1aaf0>
   2d694:	ldr	r4, [r3]
   2d698:	lsl	r4, r4, #24
   2d69c:	and	r4, r4, #2130706432	; 0x7f000000
   2d6a0:	orr	r4, r4, #88	; 0x58
   2d6a4:	mov	r0, r5
   2d6a8:	bl	125e4 <gcry_free@plt>
   2d6ac:	cmp	r6, #0
   2d6b0:	beq	2d6c8 <__assert_fail@plt+0x1aa24>
   2d6b4:	mov	r0, r6
   2d6b8:	bl	128d8 <strlen@plt>
   2d6bc:	mov	r1, r0
   2d6c0:	mov	r0, r6
   2d6c4:	bl	22068 <__assert_fail@plt+0xf3c4>
   2d6c8:	mov	r0, r6
   2d6cc:	bl	125e4 <gcry_free@plt>
   2d6d0:	mov	r0, r8
   2d6d4:	bl	1d570 <__assert_fail@plt+0xa8cc>
   2d6d8:	mov	r0, r4
   2d6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d6e0:	str	r9, [r7, #4]
   2d6e4:	str	r9, [r7]
   2d6e8:	mov	r0, r4
   2d6ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d6f0:	mov	r1, r5
   2d6f4:	mov	r0, r7
   2d6f8:	bl	2d56c <__assert_fail@plt+0x1a8c8>
   2d6fc:	subs	r6, r0, #0
   2d700:	bne	2d728 <__assert_fail@plt+0x1aa84>
   2d704:	b	2d638 <__assert_fail@plt+0x1a994>
   2d708:	ldr	r0, [r4, #8]
   2d70c:	cmp	r0, #0
   2d710:	beq	2d648 <__assert_fail@plt+0x1a9a4>
   2d714:	mov	r1, r5
   2d718:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   2d71c:	cmp	r0, #0
   2d720:	bne	2d63c <__assert_fail@plt+0x1a998>
   2d724:	mov	r6, r4
   2d728:	ldr	r4, [r6, #4]
   2d72c:	cmp	r4, #0
   2d730:	bne	2d708 <__assert_fail@plt+0x1aa64>
   2d734:	mov	r4, #0
   2d738:	str	r6, [r9]
   2d73c:	mov	r0, r4
   2d740:	str	r9, [r6, #4]
   2d744:	str	r9, [r7, #4]
   2d748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d74c:	ldr	r3, [pc, #64]	; 2d794 <__assert_fail@plt+0x1aaf0>
   2d750:	ldr	r7, [r3]
   2d754:	bl	12914 <gpg_err_code_from_syserror@plt>
   2d758:	subs	r4, r0, #0
   2d75c:	beq	2d660 <__assert_fail@plt+0x1a9bc>
   2d760:	lsl	r3, r7, #24
   2d764:	and	r3, r3, #2130706432	; 0x7f000000
   2d768:	uxth	r4, r4
   2d76c:	orrs	r4, r3, r4
   2d770:	bne	2d6a4 <__assert_fail@plt+0x1aa00>
   2d774:	mov	r0, r4
   2d778:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d77c:	ldr	r3, [pc, #20]	; 2d798 <__assert_fail@plt+0x1aaf4>
   2d780:	ldr	r2, [pc, #20]	; 2d79c <__assert_fail@plt+0x1aaf8>
   2d784:	ldr	r1, [pc, #20]	; 2d7a0 <__assert_fail@plt+0x1aafc>
   2d788:	ldr	r0, [pc, #20]	; 2d7a4 <__assert_fail@plt+0x1ab00>
   2d78c:	bl	12ca4 <__assert_fail@plt>
   2d790:	andeq	r5, r3, r0, asr #6
   2d794:			; <UNDEFINED> instruction: 0x000462b0
   2d798:	andeq	r5, r3, ip, ror #5
   2d79c:	andeq	r0, r0, r5, ror #2
   2d7a0:	strdeq	r5, [r3], -r8
   2d7a4:	andeq	r5, r3, ip, lsr #6
   2d7a8:	push	{r4, r5, r6, lr}
   2d7ac:	mov	r6, r0
   2d7b0:	sub	sp, sp, #8
   2d7b4:	mov	r0, r1
   2d7b8:	mov	r4, r2
   2d7bc:	bl	12c68 <gcry_strdup@plt>
   2d7c0:	subs	r5, r0, #0
   2d7c4:	beq	2d7fc <__assert_fail@plt+0x1ab58>
   2d7c8:	mov	r0, r4
   2d7cc:	bl	12c68 <gcry_strdup@plt>
   2d7d0:	subs	r2, r0, #0
   2d7d4:	beq	2d7f4 <__assert_fail@plt+0x1ab50>
   2d7d8:	mov	r3, #0
   2d7dc:	mov	r1, r5
   2d7e0:	mov	r0, r6
   2d7e4:	str	r3, [sp]
   2d7e8:	bl	2d5b4 <__assert_fail@plt+0x1a910>
   2d7ec:	add	sp, sp, #8
   2d7f0:	pop	{r4, r5, r6, pc}
   2d7f4:	mov	r0, r5
   2d7f8:	bl	125e4 <gcry_free@plt>
   2d7fc:	ldr	r3, [pc, #40]	; 2d82c <__assert_fail@plt+0x1ab88>
   2d800:	ldr	r4, [r3]
   2d804:	bl	12914 <gpg_err_code_from_syserror@plt>
   2d808:	cmp	r0, #0
   2d80c:	moveq	r0, #0
   2d810:	beq	2d7ec <__assert_fail@plt+0x1ab48>
   2d814:	lsl	r4, r4, #24
   2d818:	and	r4, r4, #2130706432	; 0x7f000000
   2d81c:	uxth	r0, r0
   2d820:	orr	r0, r4, r0
   2d824:	add	sp, sp, #8
   2d828:	pop	{r4, r5, r6, pc}
   2d82c:			; <UNDEFINED> instruction: 0x000462b0
   2d830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d834:	mov	r9, r0
   2d838:	ldr	sl, [pc, #760]	; 2db38 <__assert_fail@plt+0x1ae94>
   2d83c:	sub	sp, sp, #28
   2d840:	cmp	r3, #0
   2d844:	ldr	r0, [sl]
   2d848:	mov	r3, #0
   2d84c:	mov	r6, r1
   2d850:	str	r0, [sp, #20]
   2d854:	mov	r7, r2
   2d858:	str	r3, [sp, #8]
   2d85c:	str	r3, [sp, #12]
   2d860:	str	r3, [sp, #16]
   2d864:	mov	r1, #12
   2d868:	mov	r0, #1
   2d86c:	beq	2d890 <__assert_fail@plt+0x1abec>
   2d870:	bl	129bc <gcry_calloc@plt>
   2d874:	cmp	r0, #0
   2d878:	beq	2da8c <__assert_fail@plt+0x1ade8>
   2d87c:	ldrb	r3, [r0, #8]
   2d880:	str	r0, [r9]
   2d884:	orr	r3, r3, #1
   2d888:	strb	r3, [r0, #8]
   2d88c:	b	2d8a0 <__assert_fail@plt+0x1abfc>
   2d890:	bl	129bc <gcry_calloc@plt>
   2d894:	cmp	r0, #0
   2d898:	str	r0, [r9]
   2d89c:	beq	2da90 <__assert_fail@plt+0x1adec>
   2d8a0:	mov	r5, #0
   2d8a4:	cmp	r6, #0
   2d8a8:	mov	r8, r5
   2d8ac:	movne	r3, #0
   2d8b0:	strne	r3, [r6]
   2d8b4:	mov	r3, #0
   2d8b8:	add	r2, sp, #12
   2d8bc:	add	r1, sp, #8
   2d8c0:	mov	r0, r7
   2d8c4:	bl	1247c <gpgrt_read_line@plt>
   2d8c8:	cmp	r0, #0
   2d8cc:	ble	2dac0 <__assert_fail@plt+0x1ae1c>
   2d8d0:	cmp	r6, #0
   2d8d4:	ldr	fp, [sp, #8]
   2d8d8:	ldrne	r3, [r6]
   2d8dc:	addne	r3, r3, #1
   2d8e0:	strne	r3, [r6]
   2d8e4:	ldrb	r1, [fp]
   2d8e8:	cmp	r1, #0
   2d8ec:	beq	2da84 <__assert_fail@plt+0x1ade0>
   2d8f0:	sub	r0, r1, #32
   2d8f4:	clz	r0, r0
   2d8f8:	lsr	r0, r0, #5
   2d8fc:	cmp	r1, #13
   2d900:	movne	r3, r0
   2d904:	orreq	r3, r0, #1
   2d908:	sub	r2, r1, #9
   2d90c:	cmp	r2, #1
   2d910:	orrls	r3, r3, #1
   2d914:	cmp	r3, #0
   2d918:	mov	r4, fp
   2d91c:	bne	2d94c <__assert_fail@plt+0x1aca8>
   2d920:	b	2d9d8 <__assert_fail@plt+0x1ad34>
   2d924:	cmp	r3, #13
   2d928:	cmpne	r3, #32
   2d92c:	moveq	r2, #1
   2d930:	movne	r2, #0
   2d934:	sub	r3, r3, #9
   2d938:	cmp	r3, #1
   2d93c:	movhi	r3, r2
   2d940:	orrls	r3, r2, #1
   2d944:	cmp	r3, #0
   2d948:	beq	2d9bc <__assert_fail@plt+0x1ad18>
   2d94c:	ldrb	r3, [r4, #1]!
   2d950:	cmp	r3, #0
   2d954:	bne	2d924 <__assert_fail@plt+0x1ac80>
   2d958:	cmp	r5, #0
   2d95c:	beq	2d9d8 <__assert_fail@plt+0x1ad34>
   2d960:	mov	r1, fp
   2d964:	add	r0, sp, #16
   2d968:	bl	1d67c <__assert_fail@plt+0xa9d8>
   2d96c:	cmp	r0, #0
   2d970:	bne	2d8b4 <__assert_fail@plt+0x1ac10>
   2d974:	ldr	r3, [pc, #448]	; 2db3c <__assert_fail@plt+0x1ae98>
   2d978:	ldr	r4, [r3]
   2d97c:	bl	12914 <gpg_err_code_from_syserror@plt>
   2d980:	subs	r5, r0, #0
   2d984:	beq	2da60 <__assert_fail@plt+0x1adbc>
   2d988:	lsl	r3, r4, #24
   2d98c:	and	r3, r3, #2130706432	; 0x7f000000
   2d990:	uxth	r5, r5
   2d994:	orr	r5, r3, r5
   2d998:	ldr	r0, [sp, #8]
   2d99c:	bl	12b00 <gpgrt_free@plt>
   2d9a0:	cmp	r5, #0
   2d9a4:	beq	2dab8 <__assert_fail@plt+0x1ae14>
   2d9a8:	ldr	r0, [r9]
   2d9ac:	bl	2d4a0 <__assert_fail@plt+0x1a7fc>
   2d9b0:	mov	r3, #0
   2d9b4:	str	r3, [r9]
   2d9b8:	b	2da68 <__assert_fail@plt+0x1adc4>
   2d9bc:	cmp	r5, #0
   2d9c0:	beq	2d9d8 <__assert_fail@plt+0x1ad34>
   2d9c4:	cmp	r1, #9
   2d9c8:	movne	r1, r0
   2d9cc:	orreq	r1, r0, #1
   2d9d0:	cmp	r1, #0
   2d9d4:	bne	2d960 <__assert_fail@plt+0x1acbc>
   2d9d8:	ldr	r3, [sp, #16]
   2d9dc:	cmp	r3, #0
   2d9e0:	beq	2da08 <__assert_fail@plt+0x1ad64>
   2d9e4:	mov	r2, #1
   2d9e8:	str	r2, [sp]
   2d9ec:	mov	r1, r5
   2d9f0:	mov	r2, #0
   2d9f4:	ldr	r0, [r9]
   2d9f8:	bl	2d5b4 <__assert_fail@plt+0x1a910>
   2d9fc:	ldr	fp, [sp, #8]
   2da00:	subs	r5, r0, #0
   2da04:	bne	2db04 <__assert_fail@plt+0x1ae60>
   2da08:	str	r8, [sp, #16]
   2da0c:	ldrb	r3, [r4]
   2da10:	subs	r5, r3, #35	; 0x23
   2da14:	movne	r5, #1
   2da18:	cmp	r3, #0
   2da1c:	moveq	r5, #0
   2da20:	cmp	r5, #0
   2da24:	beq	2d960 <__assert_fail@plt+0x1acbc>
   2da28:	mov	r1, #58	; 0x3a
   2da2c:	mov	r0, fp
   2da30:	bl	128fc <strchr@plt>
   2da34:	subs	r5, r0, #0
   2da38:	beq	2daf0 <__assert_fail@plt+0x1ae4c>
   2da3c:	mov	r0, r4
   2da40:	ldrb	r4, [r5, #1]
   2da44:	strb	r8, [r5, #1]
   2da48:	bl	12c68 <gcry_strdup@plt>
   2da4c:	strb	r4, [r5, #1]
   2da50:	add	r1, r5, #1
   2da54:	subs	r5, r0, #0
   2da58:	bne	2d964 <__assert_fail@plt+0x1acc0>
   2da5c:	b	2d974 <__assert_fail@plt+0x1acd0>
   2da60:	ldr	r0, [sp, #8]
   2da64:	bl	12b00 <gpgrt_free@plt>
   2da68:	ldr	r2, [sp, #20]
   2da6c:	ldr	r3, [sl]
   2da70:	mov	r0, r5
   2da74:	cmp	r2, r3
   2da78:	bne	2db34 <__assert_fail@plt+0x1ae90>
   2da7c:	add	sp, sp, #28
   2da80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2da84:	mov	r4, fp
   2da88:	b	2d958 <__assert_fail@plt+0x1acb4>
   2da8c:	str	r0, [r9]
   2da90:	ldr	r3, [pc, #164]	; 2db3c <__assert_fail@plt+0x1ae98>
   2da94:	ldr	r5, [r3]
   2da98:	bl	12914 <gpg_err_code_from_syserror@plt>
   2da9c:	subs	r3, r0, #0
   2daa0:	beq	2dab8 <__assert_fail@plt+0x1ae14>
   2daa4:	lsl	r5, r5, #24
   2daa8:	and	r5, r5, #2130706432	; 0x7f000000
   2daac:	uxth	r3, r3
   2dab0:	orr	r5, r5, r3
   2dab4:	b	2da68 <__assert_fail@plt+0x1adc4>
   2dab8:	mov	r5, #0
   2dabc:	b	2da68 <__assert_fail@plt+0x1adc4>
   2dac0:	bne	2db20 <__assert_fail@plt+0x1ae7c>
   2dac4:	ldr	r3, [sp, #16]
   2dac8:	cmp	r3, #0
   2dacc:	beq	2db10 <__assert_fail@plt+0x1ae6c>
   2dad0:	mov	ip, #1
   2dad4:	mov	r2, r0
   2dad8:	mov	r1, r5
   2dadc:	str	ip, [sp]
   2dae0:	ldr	r0, [r9]
   2dae4:	bl	2d5b4 <__assert_fail@plt+0x1a910>
   2dae8:	mov	r5, r0
   2daec:	b	2d998 <__assert_fail@plt+0x1acf4>
   2daf0:	ldr	r3, [pc, #68]	; 2db3c <__assert_fail@plt+0x1ae98>
   2daf4:	ldr	r5, [r3]
   2daf8:	lsl	r5, r5, #24
   2dafc:	and	r5, r5, #2130706432	; 0x7f000000
   2db00:	orr	r5, r5, #55	; 0x37
   2db04:	mov	r0, fp
   2db08:	bl	12b00 <gpgrt_free@plt>
   2db0c:	b	2d9a8 <__assert_fail@plt+0x1ad04>
   2db10:	ldr	r0, [sp, #8]
   2db14:	mov	r5, r3
   2db18:	bl	12b00 <gpgrt_free@plt>
   2db1c:	b	2da68 <__assert_fail@plt+0x1adc4>
   2db20:	bl	12914 <gpg_err_code_from_syserror@plt>
   2db24:	subs	r5, r0, #0
   2db28:	beq	2da60 <__assert_fail@plt+0x1adbc>
   2db2c:	uxth	r5, r5
   2db30:	b	2d998 <__assert_fail@plt+0x1acf4>
   2db34:	bl	1262c <__stack_chk_fail@plt>
   2db38:	strdeq	r5, [r4], -r8
   2db3c:			; <UNDEFINED> instruction: 0x000462b0
   2db40:	push	{r4, r5, r6, r7, r8, lr}
   2db44:	mov	r6, r0
   2db48:	mov	r0, r1
   2db4c:	mov	r4, r1
   2db50:	mov	r7, r2
   2db54:	bl	2d200 <__assert_fail@plt+0x1a55c>
   2db58:	cmp	r0, #0
   2db5c:	beq	2dbcc <__assert_fail@plt+0x1af28>
   2db60:	mov	r1, r4
   2db64:	mov	r0, r6
   2db68:	bl	2d56c <__assert_fail@plt+0x1a8c8>
   2db6c:	subs	r5, r0, #0
   2db70:	beq	2dbfc <__assert_fail@plt+0x1af58>
   2db74:	mov	r0, r7
   2db78:	bl	12c68 <gcry_strdup@plt>
   2db7c:	subs	r6, r0, #0
   2db80:	beq	2dbd4 <__assert_fail@plt+0x1af30>
   2db84:	ldr	r0, [r5, #12]
   2db88:	bl	1d570 <__assert_fail@plt+0xa8cc>
   2db8c:	ldr	r4, [r5, #16]
   2db90:	mov	r3, #0
   2db94:	cmp	r4, r3
   2db98:	str	r3, [r5, #12]
   2db9c:	beq	2dbb8 <__assert_fail@plt+0x1af14>
   2dba0:	mov	r0, r4
   2dba4:	bl	128d8 <strlen@plt>
   2dba8:	mov	r1, r0
   2dbac:	mov	r0, r4
   2dbb0:	bl	22068 <__assert_fail@plt+0xf3c4>
   2dbb4:	ldr	r4, [r5, #16]
   2dbb8:	mov	r0, r4
   2dbbc:	bl	125e4 <gcry_free@plt>
   2dbc0:	str	r6, [r5, #16]
   2dbc4:	mov	r0, #0
   2dbc8:	pop	{r4, r5, r6, r7, r8, pc}
   2dbcc:	mov	r0, #88	; 0x58
   2dbd0:	pop	{r4, r5, r6, r7, r8, pc}
   2dbd4:	ldr	r3, [pc, #52]	; 2dc10 <__assert_fail@plt+0x1af6c>
   2dbd8:	ldr	r4, [r3]
   2dbdc:	bl	12914 <gpg_err_code_from_syserror@plt>
   2dbe0:	cmp	r0, #0
   2dbe4:	popeq	{r4, r5, r6, r7, r8, pc}
   2dbe8:	lsl	r4, r4, #24
   2dbec:	and	r4, r4, #2130706432	; 0x7f000000
   2dbf0:	uxth	r0, r0
   2dbf4:	orr	r0, r4, r0
   2dbf8:	pop	{r4, r5, r6, r7, r8, pc}
   2dbfc:	mov	r2, r7
   2dc00:	mov	r1, r4
   2dc04:	mov	r0, r6
   2dc08:	pop	{r4, r5, r6, r7, r8, lr}
   2dc0c:	b	2d7a8 <__assert_fail@plt+0x1ab04>
   2dc10:			; <UNDEFINED> instruction: 0x000462b0
   2dc14:	ldr	r0, [r0, #4]
   2dc18:	cmp	r0, #0
   2dc1c:	bxeq	lr
   2dc20:	ldr	r3, [r0, #8]
   2dc24:	cmp	r3, #0
   2dc28:	beq	2dc14 <__assert_fail@plt+0x1af70>
   2dc2c:	bx	lr
   2dc30:	push	{r4, r5, r6, lr}
   2dc34:	ldr	r4, [r0, #4]
   2dc38:	cmp	r4, #0
   2dc3c:	beq	2dc6c <__assert_fail@plt+0x1afc8>
   2dc40:	mov	r5, r1
   2dc44:	ldr	r3, [r4, #8]
   2dc48:	mov	r1, r5
   2dc4c:	subs	r0, r3, #0
   2dc50:	beq	2dc60 <__assert_fail@plt+0x1afbc>
   2dc54:	bl	1cac0 <__assert_fail@plt+0x9e1c>
   2dc58:	cmp	r0, #0
   2dc5c:	beq	2dc70 <__assert_fail@plt+0x1afcc>
   2dc60:	ldr	r4, [r4, #4]
   2dc64:	cmp	r4, #0
   2dc68:	bne	2dc44 <__assert_fail@plt+0x1afa0>
   2dc6c:	mov	r4, #0
   2dc70:	mov	r0, r4
   2dc74:	pop	{r4, r5, r6, pc}
   2dc78:	ldrb	r3, [r0, #8]
   2dc7c:	push	{r4, r5, r6, lr}
   2dc80:	tst	r3, #1
   2dc84:	bne	2dca0 <__assert_fail@plt+0x1affc>
   2dc88:	ldr	r3, [pc, #108]	; 2dcfc <__assert_fail@plt+0x1b058>
   2dc8c:	ldr	r0, [r3]
   2dc90:	lsl	r0, r0, #24
   2dc94:	and	r0, r0, #2130706432	; 0x7f000000
   2dc98:	orr	r0, r0, #181	; 0xb5
   2dc9c:	pop	{r4, r5, r6, pc}
   2dca0:	mov	r4, r1
   2dca4:	ldr	r1, [pc, #84]	; 2dd00 <__assert_fail@plt+0x1b05c>
   2dca8:	bl	2d56c <__assert_fail@plt+0x1a8c8>
   2dcac:	subs	r6, r0, #0
   2dcb0:	beq	2dc88 <__assert_fail@plt+0x1afe4>
   2dcb4:	ldr	r5, [r6, #16]
   2dcb8:	cmp	r5, #0
   2dcbc:	beq	2dce0 <__assert_fail@plt+0x1b03c>
   2dcc0:	mov	r0, r5
   2dcc4:	bl	128d8 <strlen@plt>
   2dcc8:	mov	r2, r5
   2dccc:	mov	r1, #0
   2dcd0:	mov	r3, r0
   2dcd4:	mov	r0, r4
   2dcd8:	pop	{r4, r5, r6, lr}
   2dcdc:	b	125c0 <gcry_sexp_sscan@plt>
   2dce0:	add	r1, r6, #16
   2dce4:	add	r0, r6, #12
   2dce8:	bl	2d318 <__assert_fail@plt+0x1a674>
   2dcec:	cmp	r0, #0
   2dcf0:	popne	{r4, r5, r6, pc}
   2dcf4:	ldr	r5, [r6, #16]
   2dcf8:	b	2dcc0 <__assert_fail@plt+0x1b01c>
   2dcfc:			; <UNDEFINED> instruction: 0x000462b0
   2dd00:	andeq	r5, r3, r0, asr #6
   2dd04:	ldrb	r3, [r0, #8]
   2dd08:	push	{r4, r5, r6, r7, r8, lr}
   2dd0c:	tst	r3, #1
   2dd10:	bne	2dd30 <__assert_fail@plt+0x1b08c>
   2dd14:	ldr	r3, [pc, #576]	; 2df5c <__assert_fail@plt+0x1b2b8>
   2dd18:	ldr	r5, [r3]
   2dd1c:	lsl	r5, r5, #24
   2dd20:	and	r5, r5, #2130706432	; 0x7f000000
   2dd24:	orr	r5, r5, #181	; 0xb5
   2dd28:	mov	r0, r5
   2dd2c:	pop	{r4, r5, r6, r7, r8, pc}
   2dd30:	mov	r3, #0
   2dd34:	mov	r7, r1
   2dd38:	mov	r2, r3
   2dd3c:	mov	r1, #3
   2dd40:	mov	r5, r0
   2dd44:	mov	r0, r7
   2dd48:	bl	12758 <gcry_sexp_sprint@plt>
   2dd4c:	mov	r8, r0
   2dd50:	bl	12458 <gcry_malloc@plt>
   2dd54:	subs	r4, r0, #0
   2dd58:	beq	2df24 <__assert_fail@plt+0x1b280>
   2dd5c:	mov	r0, r8
   2dd60:	bl	12458 <gcry_malloc@plt>
   2dd64:	subs	r6, r0, #0
   2dd68:	beq	2df1c <__assert_fail@plt+0x1b278>
   2dd6c:	mov	r3, r8
   2dd70:	mov	r2, r4
   2dd74:	mov	r1, #3
   2dd78:	mov	r0, r7
   2dd7c:	bl	12758 <gcry_sexp_sprint@plt>
   2dd80:	mov	r0, r4
   2dd84:	bl	128d8 <strlen@plt>
   2dd88:	subs	r3, r0, #1
   2dd8c:	beq	2df54 <__assert_fail@plt+0x1b2b0>
   2dd90:	ldrb	r3, [r4, r3]
   2dd94:	cmp	r3, #13
   2dd98:	cmpne	r3, #32
   2dd9c:	moveq	r2, #1
   2dda0:	movne	r2, #0
   2dda4:	sub	r3, r3, #9
   2dda8:	cmp	r3, #1
   2ddac:	movhi	r3, r2
   2ddb0:	orrls	r3, r2, #1
   2ddb4:	cmp	r3, #0
   2ddb8:	beq	2de10 <__assert_fail@plt+0x1b16c>
   2ddbc:	sub	r1, r0, #2
   2ddc0:	add	r1, r4, r1
   2ddc4:	add	r0, r4, r0
   2ddc8:	mov	ip, #0
   2ddcc:	b	2ddfc <__assert_fail@plt+0x1b158>
   2ddd0:	ldrb	r3, [r1], #-1
   2ddd4:	cmp	r3, #13
   2ddd8:	cmpne	r3, #32
   2dddc:	moveq	r2, #1
   2dde0:	movne	r2, #0
   2dde4:	sub	r3, r3, #9
   2dde8:	cmp	r3, #1
   2ddec:	movhi	r3, r2
   2ddf0:	orrls	r3, r2, #1
   2ddf4:	cmp	r3, #0
   2ddf8:	beq	2de08 <__assert_fail@plt+0x1b164>
   2ddfc:	cmp	r1, r4
   2de00:	strb	ip, [r0, #-1]!
   2de04:	bne	2ddd0 <__assert_fail@plt+0x1b12c>
   2de08:	mov	r0, r4
   2de0c:	bl	128d8 <strlen@plt>
   2de10:	cmp	r0, #0
   2de14:	beq	2df4c <__assert_fail@plt+0x1b2a8>
   2de18:	sub	ip, r4, #1
   2de1c:	mov	r2, r6
   2de20:	mov	r1, #0
   2de24:	b	2de80 <__assert_fail@plt+0x1b1dc>
   2de28:	and	lr, r3, #251	; 0xfb
   2de2c:	cmp	lr, #9
   2de30:	bne	2ded8 <__assert_fail@plt+0x1b234>
   2de34:	cmp	r1, #0
   2de38:	beq	2ded8 <__assert_fail@plt+0x1b234>
   2de3c:	ldrb	lr, [ip, #-1]
   2de40:	cmp	lr, #32
   2de44:	cmpne	lr, #13
   2de48:	moveq	r7, #1
   2de4c:	movne	r7, #0
   2de50:	sub	r8, lr, #9
   2de54:	cmp	r8, #1
   2de58:	orrls	r7, r7, #1
   2de5c:	sub	lr, lr, #40	; 0x28
   2de60:	cmp	lr, #1
   2de64:	movhi	lr, r7
   2de68:	orrls	lr, r7, #1
   2de6c:	cmp	lr, #0
   2de70:	beq	2ded8 <__assert_fail@plt+0x1b234>
   2de74:	add	r1, r1, #1
   2de78:	cmp	r1, r0
   2de7c:	bcs	2dee8 <__assert_fail@plt+0x1b244>
   2de80:	ldrb	r3, [ip, #1]!
   2de84:	cmp	r3, #10
   2de88:	cmpne	r3, #32
   2de8c:	bne	2de28 <__assert_fail@plt+0x1b184>
   2de90:	cmp	r1, #0
   2de94:	beq	2ded0 <__assert_fail@plt+0x1b22c>
   2de98:	ldrb	lr, [ip, #-1]
   2de9c:	cmp	lr, #13
   2dea0:	cmpne	lr, #32
   2dea4:	moveq	r7, #1
   2dea8:	movne	r7, #0
   2deac:	sub	r8, lr, #9
   2deb0:	cmp	r8, #1
   2deb4:	orrls	r7, r7, #1
   2deb8:	sub	lr, lr, #40	; 0x28
   2debc:	cmp	lr, #1
   2dec0:	movhi	lr, r7
   2dec4:	orrls	lr, r7, #1
   2dec8:	cmp	lr, #0
   2decc:	bne	2de74 <__assert_fail@plt+0x1b1d0>
   2ded0:	cmp	r3, #10
   2ded4:	moveq	r3, #32
   2ded8:	add	r1, r1, #1
   2dedc:	cmp	r1, r0
   2dee0:	strb	r3, [r2], #1
   2dee4:	bcc	2de80 <__assert_fail@plt+0x1b1dc>
   2dee8:	mov	r3, #0
   2deec:	strb	r3, [r2]
   2def0:	ldr	r1, [pc, #104]	; 2df60 <__assert_fail@plt+0x1b2bc>
   2def4:	mov	r2, r6
   2def8:	mov	r0, r5
   2defc:	bl	2db40 <__assert_fail@plt+0x1ae9c>
   2df00:	mov	r5, r0
   2df04:	mov	r0, r4
   2df08:	bl	125e4 <gcry_free@plt>
   2df0c:	mov	r0, r6
   2df10:	bl	125e4 <gcry_free@plt>
   2df14:	mov	r0, r5
   2df18:	pop	{r4, r5, r6, r7, r8, pc}
   2df1c:	mov	r0, r4
   2df20:	bl	125e4 <gcry_free@plt>
   2df24:	ldr	r3, [pc, #48]	; 2df5c <__assert_fail@plt+0x1b2b8>
   2df28:	ldr	r5, [r3]
   2df2c:	bl	12914 <gpg_err_code_from_syserror@plt>
   2df30:	cmp	r0, #0
   2df34:	moveq	r5, #0
   2df38:	lslne	r5, r5, #24
   2df3c:	andne	r5, r5, #2130706432	; 0x7f000000
   2df40:	uxthne	r0, r0
   2df44:	orrne	r5, r5, r0
   2df48:	b	2dd28 <__assert_fail@plt+0x1b084>
   2df4c:	mov	r2, r6
   2df50:	b	2dee8 <__assert_fail@plt+0x1b244>
   2df54:	mov	r0, #1
   2df58:	b	2de18 <__assert_fail@plt+0x1b174>
   2df5c:			; <UNDEFINED> instruction: 0x000462b0
   2df60:	andeq	r5, r3, r0, asr #6
   2df64:	mov	r3, #0
   2df68:	b	2d830 <__assert_fail@plt+0x1ab8c>
   2df6c:	mov	r3, #1
   2df70:	b	2d830 <__assert_fail@plt+0x1ab8c>
   2df74:	ldr	r3, [pc, #620]	; 2e1e8 <__assert_fail@plt+0x1b544>
   2df78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2df7c:	sub	sp, sp, #100	; 0x64
   2df80:	ldr	r6, [r0]
   2df84:	ldr	r3, [r3]
   2df88:	cmp	r6, #0
   2df8c:	str	r3, [sp, #92]	; 0x5c
   2df90:	beq	2dffc <__assert_fail@plt+0x1b358>
   2df94:	ldr	sl, [pc, #592]	; 2e1ec <__assert_fail@plt+0x1b548>
   2df98:	mov	r8, r1
   2df9c:	ldr	r0, [r6, #8]
   2dfa0:	cmp	r0, #0
   2dfa4:	beq	2dfb0 <__assert_fail@plt+0x1b30c>
   2dfa8:	mov	r1, r8
   2dfac:	bl	12a64 <gpgrt_fputs@plt>
   2dfb0:	ldr	r3, [r6, #12]
   2dfb4:	cmp	r3, #0
   2dfb8:	mov	r4, r3
   2dfbc:	beq	2e020 <__assert_fail@plt+0x1b37c>
   2dfc0:	cmp	r4, #0
   2dfc4:	beq	2dfe0 <__assert_fail@plt+0x1b33c>
   2dfc8:	add	r0, r4, #8
   2dfcc:	mov	r1, r8
   2dfd0:	bl	12a64 <gpgrt_fputs@plt>
   2dfd4:	ldr	r4, [r4]
   2dfd8:	cmp	r4, #0
   2dfdc:	bne	2dfc8 <__assert_fail@plt+0x1b324>
   2dfe0:	mov	r0, r8
   2dfe4:	bl	1265c <gpgrt_ferror@plt>
   2dfe8:	cmp	r0, #0
   2dfec:	bne	2e1bc <__assert_fail@plt+0x1b518>
   2dff0:	ldr	r6, [r6, #4]
   2dff4:	cmp	r6, #0
   2dff8:	bne	2df9c <__assert_fail@plt+0x1b2f8>
   2dffc:	mov	r4, #0
   2e000:	ldr	r3, [pc, #480]	; 2e1e8 <__assert_fail@plt+0x1b544>
   2e004:	ldr	r2, [sp, #92]	; 0x5c
   2e008:	mov	r0, r4
   2e00c:	ldr	r3, [r3]
   2e010:	cmp	r2, r3
   2e014:	bne	2e1e4 <__assert_fail@plt+0x1b540>
   2e018:	add	sp, sp, #100	; 0x64
   2e01c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e020:	ldr	fp, [r6, #16]
   2e024:	str	r3, [sp, #12]
   2e028:	mov	r0, fp
   2e02c:	bl	128d8 <strlen@plt>
   2e030:	subs	r5, r0, #0
   2e034:	beq	2dfc0 <__assert_fail@plt+0x1b31c>
   2e038:	ldr	r3, [sp, #12]
   2e03c:	add	r9, r6, #12
   2e040:	mov	r7, r3
   2e044:	cmp	r3, #0
   2e048:	beq	2e0cc <__assert_fail@plt+0x1b428>
   2e04c:	mov	r0, #70	; 0x46
   2e050:	cmp	r0, r5
   2e054:	bcc	2e0e8 <__assert_fail@plt+0x1b444>
   2e058:	add	r7, fp, r7
   2e05c:	mov	r3, r5
   2e060:	mov	r2, sl
   2e064:	mov	r1, #73	; 0x49
   2e068:	str	r7, [sp]
   2e06c:	add	r0, sp, #16
   2e070:	bl	12a7c <gpgrt_snprintf@plt>
   2e074:	add	r1, sp, #16
   2e078:	mov	r0, r9
   2e07c:	bl	1d67c <__assert_fail@plt+0xa9d8>
   2e080:	cmp	r0, #0
   2e084:	bne	2e0c4 <__assert_fail@plt+0x1b420>
   2e088:	ldr	r3, [pc, #352]	; 2e1f0 <__assert_fail@plt+0x1b54c>
   2e08c:	ldr	r4, [r3]
   2e090:	bl	12914 <gpg_err_code_from_syserror@plt>
   2e094:	cmp	r0, #0
   2e098:	beq	2e0c4 <__assert_fail@plt+0x1b420>
   2e09c:	lsl	r3, r4, #24
   2e0a0:	and	r3, r3, #2130706432	; 0x7f000000
   2e0a4:	uxth	r0, r0
   2e0a8:	orrs	r4, r3, r0
   2e0ac:	beq	2e0c4 <__assert_fail@plt+0x1b420>
   2e0b0:	ldr	r0, [r6, #12]
   2e0b4:	bl	1d570 <__assert_fail@plt+0xa8cc>
   2e0b8:	mov	r3, #0
   2e0bc:	str	r3, [r6, #12]
   2e0c0:	b	2e000 <__assert_fail@plt+0x1b35c>
   2e0c4:	ldr	r4, [r6, #12]
   2e0c8:	b	2dfc0 <__assert_fail@plt+0x1b31c>
   2e0cc:	ldr	r0, [r6, #8]
   2e0d0:	bl	128d8 <strlen@plt>
   2e0d4:	cmp	r0, #69	; 0x45
   2e0d8:	rsbls	r0, r0, #70	; 0x46
   2e0dc:	bhi	2e04c <__assert_fail@plt+0x1b3a8>
   2e0e0:	cmp	r0, r5
   2e0e4:	bcs	2e058 <__assert_fail@plt+0x1b3b4>
   2e0e8:	sub	r4, r0, #1
   2e0ec:	add	r1, fp, r4
   2e0f0:	ldrb	r2, [fp, r4]
   2e0f4:	cmp	r2, #32
   2e0f8:	cmpne	r2, #13
   2e0fc:	moveq	r3, #1
   2e100:	movne	r3, #0
   2e104:	sub	r2, r2, #9
   2e108:	cmp	r2, #1
   2e10c:	orrls	r3, r3, #1
   2e110:	cmp	r7, #0
   2e114:	bne	2e1b0 <__assert_fail@plt+0x1b50c>
   2e118:	cmp	r3, #0
   2e11c:	bne	2e164 <__assert_fail@plt+0x1b4c0>
   2e120:	mov	ip, #2
   2e124:	mvn	lr, fp
   2e128:	add	r4, lr, r1
   2e12c:	ldrb	r2, [r1, #-1]!
   2e130:	cmp	r2, #13
   2e134:	cmpne	r2, #32
   2e138:	moveq	r3, #1
   2e13c:	movne	r3, #0
   2e140:	sub	r2, r2, #9
   2e144:	cmp	r2, #1
   2e148:	movhi	r2, r3
   2e14c:	orrls	r2, r3, #1
   2e150:	cmp	ip, #29
   2e154:	bhi	2e1ac <__assert_fail@plt+0x1b508>
   2e158:	cmp	r2, #0
   2e15c:	add	ip, ip, #1
   2e160:	beq	2e128 <__assert_fail@plt+0x1b484>
   2e164:	add	fp, fp, r7
   2e168:	mov	r3, r4
   2e16c:	mov	r2, sl
   2e170:	mov	r1, #73	; 0x49
   2e174:	str	fp, [sp]
   2e178:	add	r0, sp, #16
   2e17c:	bl	12a7c <gpgrt_snprintf@plt>
   2e180:	add	r1, sp, #16
   2e184:	mov	r0, r9
   2e188:	bl	1d67c <__assert_fail@plt+0xa9d8>
   2e18c:	cmp	r0, #0
   2e190:	beq	2e088 <__assert_fail@plt+0x1b3e4>
   2e194:	subs	r5, r5, r4
   2e198:	add	r7, r7, r4
   2e19c:	beq	2e0c4 <__assert_fail@plt+0x1b420>
   2e1a0:	ldr	r3, [r6, #12]
   2e1a4:	ldr	fp, [r6, #16]
   2e1a8:	b	2e044 <__assert_fail@plt+0x1b3a0>
   2e1ac:	mov	r3, r2
   2e1b0:	cmp	r3, #0
   2e1b4:	moveq	r4, r0
   2e1b8:	b	2e164 <__assert_fail@plt+0x1b4c0>
   2e1bc:	ldr	r3, [pc, #44]	; 2e1f0 <__assert_fail@plt+0x1b54c>
   2e1c0:	ldr	r4, [r3]
   2e1c4:	bl	12914 <gpg_err_code_from_syserror@plt>
   2e1c8:	cmp	r0, #0
   2e1cc:	beq	2dffc <__assert_fail@plt+0x1b358>
   2e1d0:	lsl	r4, r4, #24
   2e1d4:	and	r3, r4, #2130706432	; 0x7f000000
   2e1d8:	uxth	r0, r0
   2e1dc:	orr	r4, r3, r0
   2e1e0:	b	2e000 <__assert_fail@plt+0x1b35c>
   2e1e4:	bl	1262c <__stack_chk_fail@plt>
   2e1e8:	strdeq	r5, [r4], -r8
   2e1ec:	andeq	r5, r3, r8, asr #6
   2e1f0:			; <UNDEFINED> instruction: 0x000462b0
   2e1f4:	push	{r4, r5, r6, r7, r8, lr}
   2e1f8:	mov	r6, r1
   2e1fc:	mov	r7, r2
   2e200:	mov	r4, r3
   2e204:	mov	r5, r0
   2e208:	bl	12a70 <pipe@plt>
   2e20c:	cmn	r0, #1
   2e210:	beq	2e254 <__assert_fail@plt+0x1b5b0>
   2e214:	cmp	r7, #0
   2e218:	ldreq	r3, [pc, #256]	; 2e320 <__assert_fail@plt+0x1b67c>
   2e21c:	ldreq	r1, [pc, #256]	; 2e324 <__assert_fail@plt+0x1b680>
   2e220:	ldreq	r0, [r5]
   2e224:	ldrne	r1, [pc, #252]	; 2e328 <__assert_fail@plt+0x1b684>
   2e228:	ldrne	r3, [pc, #252]	; 2e32c <__assert_fail@plt+0x1b688>
   2e22c:	ldrne	r0, [r5, #4]
   2e230:	cmp	r4, #0
   2e234:	moveq	r1, r3
   2e238:	bl	127dc <gpgrt_fdopen@plt>
   2e23c:	cmp	r0, #0
   2e240:	str	r0, [r6]
   2e244:	movne	r4, #0
   2e248:	beq	2e2b8 <__assert_fail@plt+0x1b614>
   2e24c:	mov	r0, r4
   2e250:	pop	{r4, r5, r6, r7, r8, pc}
   2e254:	ldr	r3, [pc, #212]	; 2e330 <__assert_fail@plt+0x1b68c>
   2e258:	ldr	r7, [r3]
   2e25c:	bl	12914 <gpg_err_code_from_syserror@plt>
   2e260:	mov	r2, #5
   2e264:	ldr	r1, [pc, #200]	; 2e334 <__assert_fail@plt+0x1b690>
   2e268:	subs	r4, r0, #0
   2e26c:	lslne	r7, r7, #24
   2e270:	uxthne	r4, r4
   2e274:	andne	r7, r7, #2130706432	; 0x7f000000
   2e278:	mov	r0, #0
   2e27c:	orrne	r4, r7, r4
   2e280:	bl	12620 <dcgettext@plt>
   2e284:	mov	r7, r0
   2e288:	mov	r0, r4
   2e28c:	bl	12b3c <gpg_strerror@plt>
   2e290:	mov	r1, r0
   2e294:	mov	r0, r7
   2e298:	bl	21cbc <__assert_fail@plt+0xf018>
   2e29c:	mvn	r3, #0
   2e2a0:	mov	r2, #0
   2e2a4:	str	r3, [r5, #4]
   2e2a8:	str	r3, [r5]
   2e2ac:	mov	r0, r4
   2e2b0:	str	r2, [r6]
   2e2b4:	pop	{r4, r5, r6, r7, r8, pc}
   2e2b8:	ldr	r3, [pc, #112]	; 2e330 <__assert_fail@plt+0x1b68c>
   2e2bc:	ldr	r6, [r3]
   2e2c0:	bl	12914 <gpg_err_code_from_syserror@plt>
   2e2c4:	mov	r2, #5
   2e2c8:	ldr	r1, [pc, #104]	; 2e338 <__assert_fail@plt+0x1b694>
   2e2cc:	subs	r4, r0, #0
   2e2d0:	lslne	r6, r6, #24
   2e2d4:	andne	r6, r6, #2130706432	; 0x7f000000
   2e2d8:	uxthne	r4, r4
   2e2dc:	mov	r0, #0
   2e2e0:	orrne	r4, r6, r4
   2e2e4:	bl	12620 <dcgettext@plt>
   2e2e8:	mov	r6, r0
   2e2ec:	mov	r0, r4
   2e2f0:	bl	12b3c <gpg_strerror@plt>
   2e2f4:	mov	r1, r0
   2e2f8:	mov	r0, r6
   2e2fc:	bl	21cbc <__assert_fail@plt+0xf018>
   2e300:	ldr	r0, [r5]
   2e304:	bl	12c5c <close@plt>
   2e308:	ldr	r0, [r5, #4]
   2e30c:	bl	12c5c <close@plt>
   2e310:	mvn	r3, #0
   2e314:	str	r3, [r5, #4]
   2e318:	str	r3, [r5]
   2e31c:	b	2e24c <__assert_fail@plt+0x1b5a8>
   2e320:	strdeq	r2, [r3], -r0
   2e324:	andeq	r5, r3, r8, asr r3
   2e328:	andeq	r5, r3, r4, ror #6
   2e32c:	andeq	r1, r3, r0, asr r2
   2e330:			; <UNDEFINED> instruction: 0x000462b0
   2e334:	andeq	r5, r3, r0, ror r3
   2e338:	andeq	r5, r3, ip, lsl #7
   2e33c:	push	{r4, r5, r6, lr}
   2e340:	mov	r4, r0
   2e344:	bl	12a70 <pipe@plt>
   2e348:	cmn	r0, #1
   2e34c:	beq	2e358 <__assert_fail@plt+0x1b6b4>
   2e350:	mov	r0, #0
   2e354:	pop	{r4, r5, r6, pc}
   2e358:	ldr	r3, [pc, #40]	; 2e388 <__assert_fail@plt+0x1b6e4>
   2e35c:	ldr	r5, [r3]
   2e360:	bl	12914 <gpg_err_code_from_syserror@plt>
   2e364:	mvn	r3, #0
   2e368:	str	r3, [r4, #4]
   2e36c:	str	r3, [r4]
   2e370:	cmp	r0, #0
   2e374:	lslne	r5, r5, #24
   2e378:	andne	r5, r5, #2130706432	; 0x7f000000
   2e37c:	uxthne	r0, r0
   2e380:	orrne	r0, r5, r0
   2e384:	pop	{r4, r5, r6, pc}
   2e388:			; <UNDEFINED> instruction: 0x000462b0
   2e38c:	push	{r4, r5, r6, lr}
   2e390:	sub	sp, sp, #24
   2e394:	ldr	r6, [pc, #248]	; 2e494 <__assert_fail@plt+0x1b7f0>
   2e398:	ldr	r0, [pc, #248]	; 2e498 <__assert_fail@plt+0x1b7f4>
   2e39c:	ldr	r3, [r6]
   2e3a0:	str	r3, [sp, #20]
   2e3a4:	bl	127ac <opendir@plt>
   2e3a8:	subs	r5, r0, #0
   2e3ac:	mvnne	r4, #0
   2e3b0:	beq	2e428 <__assert_fail@plt+0x1b784>
   2e3b4:	mov	r0, r5
   2e3b8:	bl	12b24 <readdir64@plt>
   2e3bc:	cmp	r0, #0
   2e3c0:	beq	2e3fc <__assert_fail@plt+0x1b758>
   2e3c4:	ldrb	r3, [r0, #19]
   2e3c8:	sub	r3, r3, #48	; 0x30
   2e3cc:	cmp	r3, #9
   2e3d0:	bhi	2e3b4 <__assert_fail@plt+0x1b710>
   2e3d4:	mov	r2, #10
   2e3d8:	mov	r1, #0
   2e3dc:	add	r0, r0, #19
   2e3e0:	bl	124d0 <strtol@plt>
   2e3e4:	cmp	r4, r0
   2e3e8:	movlt	r4, r0
   2e3ec:	mov	r0, r5
   2e3f0:	bl	12b24 <readdir64@plt>
   2e3f4:	cmp	r0, #0
   2e3f8:	bne	2e3c4 <__assert_fail@plt+0x1b720>
   2e3fc:	mov	r0, r5
   2e400:	bl	12c80 <closedir@plt>
   2e404:	cmn	r4, #1
   2e408:	addne	r0, r4, #1
   2e40c:	beq	2e428 <__assert_fail@plt+0x1b784>
   2e410:	ldr	r2, [sp, #20]
   2e414:	ldr	r3, [r6]
   2e418:	cmp	r2, r3
   2e41c:	bne	2e490 <__assert_fail@plt+0x1b7ec>
   2e420:	add	sp, sp, #24
   2e424:	pop	{r4, r5, r6, pc}
   2e428:	mov	r4, sp
   2e42c:	mov	r1, r4
   2e430:	mov	r0, #7
   2e434:	bl	12668 <getrlimit64@plt>
   2e438:	cmp	r0, #0
   2e43c:	bne	2e458 <__assert_fail@plt+0x1b7b4>
   2e440:	ldr	r0, [sp, #8]
   2e444:	cmn	r0, #1
   2e448:	beq	2e458 <__assert_fail@plt+0x1b7b4>
   2e44c:	cmn	r0, #-2147483647	; 0x80000001
   2e450:	moveq	r0, #256	; 0x100
   2e454:	b	2e410 <__assert_fail@plt+0x1b76c>
   2e458:	mov	r1, r4
   2e45c:	mov	r0, #7
   2e460:	bl	12668 <getrlimit64@plt>
   2e464:	cmp	r0, #0
   2e468:	bne	2e478 <__assert_fail@plt+0x1b7d4>
   2e46c:	ldr	r0, [sp, #8]
   2e470:	cmn	r0, #1
   2e474:	bne	2e44c <__assert_fail@plt+0x1b7a8>
   2e478:	mov	r0, #4
   2e47c:	bl	12644 <sysconf@plt>
   2e480:	cmp	r0, #0
   2e484:	bge	2e44c <__assert_fail@plt+0x1b7a8>
   2e488:	mov	r0, #20
   2e48c:	b	2e410 <__assert_fail@plt+0x1b76c>
   2e490:	bl	1262c <__stack_chk_fail@plt>
   2e494:	strdeq	r5, [r4], -r8
   2e498:			; <UNDEFINED> instruction: 0x000353b4
   2e49c:	push	{r4, r5, r6, r7, r8, lr}
   2e4a0:	mov	r6, r1
   2e4a4:	mov	r4, r0
   2e4a8:	bl	2e38c <__assert_fail@plt+0x1b6e8>
   2e4ac:	cmp	r6, #0
   2e4b0:	mov	r7, r0
   2e4b4:	beq	2e528 <__assert_fail@plt+0x1b884>
   2e4b8:	cmp	r0, r4
   2e4bc:	movgt	r5, #0
   2e4c0:	ble	2e510 <__assert_fail@plt+0x1b86c>
   2e4c4:	ldr	r3, [r6, r5, lsl #2]
   2e4c8:	add	r2, r6, r5, lsl #2
   2e4cc:	cmn	r3, #1
   2e4d0:	beq	2e4fc <__assert_fail@plt+0x1b858>
   2e4d4:	cmp	r3, r4
   2e4d8:	movne	r0, r5
   2e4dc:	bne	2e4ec <__assert_fail@plt+0x1b848>
   2e4e0:	b	2e51c <__assert_fail@plt+0x1b878>
   2e4e4:	cmp	r3, r4
   2e4e8:	beq	2e520 <__assert_fail@plt+0x1b87c>
   2e4ec:	ldr	r3, [r2, #4]!
   2e4f0:	add	r0, r0, #1
   2e4f4:	cmn	r3, #1
   2e4f8:	bne	2e4e4 <__assert_fail@plt+0x1b840>
   2e4fc:	mov	r0, r4
   2e500:	bl	12c5c <close@plt>
   2e504:	add	r4, r4, #1
   2e508:	cmp	r7, r4
   2e50c:	bne	2e4c4 <__assert_fail@plt+0x1b820>
   2e510:	mov	r0, #0
   2e514:	pop	{r4, r5, r6, r7, r8, lr}
   2e518:	b	12b0c <gpg_err_set_errno@plt>
   2e51c:	mov	r0, r5
   2e520:	add	r5, r0, #1
   2e524:	b	2e504 <__assert_fail@plt+0x1b860>
   2e528:	cmp	r0, r4
   2e52c:	ble	2e510 <__assert_fail@plt+0x1b86c>
   2e530:	mov	r0, r4
   2e534:	add	r4, r4, #1
   2e538:	bl	12c5c <close@plt>
   2e53c:	cmp	r7, r4
   2e540:	bne	2e530 <__assert_fail@plt+0x1b88c>
   2e544:	mov	r0, #0
   2e548:	pop	{r4, r5, r6, r7, r8, lr}
   2e54c:	b	12b0c <gpg_err_set_errno@plt>
   2e550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e554:	sub	sp, sp, #20
   2e558:	ldr	lr, [pc, #444]	; 2e71c <__assert_fail@plt+0x1ba78>
   2e55c:	mov	r8, r2
   2e560:	ldr	ip, [sp, #56]	; 0x38
   2e564:	ldr	r2, [lr]
   2e568:	subs	r4, r1, #0
   2e56c:	mov	r5, r0
   2e570:	str	r8, [sp]
   2e574:	str	r3, [sp, #4]
   2e578:	str	r2, [sp, #12]
   2e57c:	str	ip, [sp, #8]
   2e580:	ldr	r7, [sp, #60]	; 0x3c
   2e584:	ldr	r6, [sp, #64]	; 0x40
   2e588:	moveq	r0, r4
   2e58c:	beq	2e5b4 <__assert_fail@plt+0x1b910>
   2e590:	ldr	r0, [r4]
   2e594:	cmp	r0, #0
   2e598:	beq	2e5b4 <__assert_fail@plt+0x1b910>
   2e59c:	mov	r3, r4
   2e5a0:	mov	r0, #0
   2e5a4:	ldr	r2, [r3, #4]!
   2e5a8:	add	r0, r0, #1
   2e5ac:	cmp	r2, #0
   2e5b0:	bne	2e5a4 <__assert_fail@plt+0x1b900>
   2e5b4:	mov	r1, #4
   2e5b8:	add	r0, r0, #2
   2e5bc:	bl	12bcc <gcry_xcalloc@plt>
   2e5c0:	mov	r1, #47	; 0x2f
   2e5c4:	mov	r9, r0
   2e5c8:	mov	r0, r5
   2e5cc:	bl	12adc <strrchr@plt>
   2e5d0:	cmp	r0, #0
   2e5d4:	str	r0, [r9]
   2e5d8:	beq	2e6d0 <__assert_fail@plt+0x1ba2c>
   2e5dc:	add	r0, r0, #1
   2e5e0:	str	r0, [r9]
   2e5e4:	cmp	r4, #0
   2e5e8:	beq	2e610 <__assert_fail@plt+0x1b96c>
   2e5ec:	ldr	r3, [r4]
   2e5f0:	cmp	r3, #0
   2e5f4:	beq	2e610 <__assert_fail@plt+0x1b96c>
   2e5f8:	mov	r1, r4
   2e5fc:	mov	r2, r9
   2e600:	str	r3, [r2, #4]!
   2e604:	ldr	r3, [r1, #4]!
   2e608:	cmp	r3, #0
   2e60c:	bne	2e600 <__assert_fail@plt+0x1b95c>
   2e610:	cmn	r8, #1
   2e614:	add	sl, sp, #4
   2e618:	mov	r4, #0
   2e61c:	ldr	fp, [pc, #252]	; 2e720 <__assert_fail@plt+0x1ba7c>
   2e620:	beq	2e63c <__assert_fail@plt+0x1b998>
   2e624:	add	r4, r4, #1
   2e628:	cmp	r4, #3
   2e62c:	beq	2e674 <__assert_fail@plt+0x1b9d0>
   2e630:	ldr	r8, [sl], #4
   2e634:	cmn	r8, #1
   2e638:	bne	2e624 <__assert_fail@plt+0x1b980>
   2e63c:	adds	r1, r4, #0
   2e640:	movne	r1, #1
   2e644:	mov	r0, fp
   2e648:	bl	12944 <__open64_2@plt>
   2e64c:	cmn	r0, #1
   2e650:	str	r0, [sl, #-4]
   2e654:	bne	2e624 <__assert_fail@plt+0x1b980>
   2e658:	bl	12968 <__errno_location@plt>
   2e65c:	ldr	r0, [r0]
   2e660:	bl	12818 <strerror@plt>
   2e664:	ldr	r1, [pc, #180]	; 2e720 <__assert_fail@plt+0x1ba7c>
   2e668:	mov	r2, r0
   2e66c:	ldr	r0, [pc, #176]	; 2e724 <__assert_fail@plt+0x1ba80>
   2e670:	bl	21d40 <__assert_fail@plt+0xf09c>
   2e674:	mov	r8, sp
   2e678:	mov	r4, #0
   2e67c:	ldr	r0, [r8], #4
   2e680:	cmp	r0, r4
   2e684:	beq	2e698 <__assert_fail@plt+0x1b9f4>
   2e688:	mov	r1, r4
   2e68c:	bl	12650 <dup2@plt>
   2e690:	cmn	r0, #1
   2e694:	beq	2e6e0 <__assert_fail@plt+0x1ba3c>
   2e698:	add	r4, r4, #1
   2e69c:	cmp	r4, #3
   2e6a0:	bne	2e67c <__assert_fail@plt+0x1b9d8>
   2e6a4:	mov	r1, r7
   2e6a8:	mov	r0, r4
   2e6ac:	bl	2e49c <__assert_fail@plt+0x1b7f8>
   2e6b0:	cmp	r6, #0
   2e6b4:	beq	2e6bc <__assert_fail@plt+0x1ba18>
   2e6b8:	blx	r6
   2e6bc:	mov	r1, r9
   2e6c0:	mov	r0, r5
   2e6c4:	bl	12938 <execv@plt>
   2e6c8:	mov	r0, #127	; 0x7f
   2e6cc:	bl	125a8 <_exit@plt>
   2e6d0:	mov	r0, r5
   2e6d4:	bl	12a40 <gcry_xstrdup@plt>
   2e6d8:	str	r0, [r9]
   2e6dc:	b	2e5e4 <__assert_fail@plt+0x1b940>
   2e6e0:	cmp	r4, #0
   2e6e4:	ldreq	r4, [pc, #60]	; 2e728 <__assert_fail@plt+0x1ba84>
   2e6e8:	beq	2e700 <__assert_fail@plt+0x1ba5c>
   2e6ec:	ldr	r3, [pc, #56]	; 2e72c <__assert_fail@plt+0x1ba88>
   2e6f0:	ldr	r2, [pc, #56]	; 2e730 <__assert_fail@plt+0x1ba8c>
   2e6f4:	cmp	r4, #1
   2e6f8:	moveq	r4, r3
   2e6fc:	movne	r4, r2
   2e700:	bl	12968 <__errno_location@plt>
   2e704:	ldr	r0, [r0]
   2e708:	bl	12818 <strerror@plt>
   2e70c:	mov	r1, r4
   2e710:	mov	r2, r0
   2e714:	ldr	r0, [pc, #24]	; 2e734 <__assert_fail@plt+0x1ba90>
   2e718:	bl	21d40 <__assert_fail@plt+0xf09c>
   2e71c:	strdeq	r5, [r4], -r8
   2e720:	andeq	r3, r3, r8, asr #14
   2e724:	andeq	r5, r3, ip, asr #7
   2e728:	andeq	r4, r3, ip, lsr r9
   2e72c:	andeq	r5, r3, r4, asr #7
   2e730:	andeq	r5, r3, r8, asr #7
   2e734:	andeq	r5, r3, r8, ror #7
   2e738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e73c:	sub	sp, sp, #116	; 0x74
   2e740:	ldr	sl, [pc, #248]	; 2e840 <__assert_fail@plt+0x1bb9c>
   2e744:	ldr	r3, [sl]
   2e748:	str	r3, [sp, #108]	; 0x6c
   2e74c:	bl	2e38c <__assert_fail@plt+0x1b6e8>
   2e750:	mov	r1, #4
   2e754:	mov	r9, r0
   2e758:	mov	r0, #32
   2e75c:	bl	12428 <calloc@plt>
   2e760:	subs	r8, r0, #0
   2e764:	beq	2e808 <__assert_fail@plt+0x1bb64>
   2e768:	cmp	r9, #0
   2e76c:	ble	2e834 <__assert_fail@plt+0x1bb90>
   2e770:	mov	r5, #0
   2e774:	mov	r4, r5
   2e778:	mov	r6, #32
   2e77c:	b	2e7c8 <__assert_fail@plt+0x1bb24>
   2e780:	add	r7, r5, #1
   2e784:	cmp	r7, r6
   2e788:	bcc	2e7b4 <__assert_fail@plt+0x1bb10>
   2e78c:	cmp	r6, #256	; 0x100
   2e790:	movcc	r3, #32
   2e794:	movcs	r3, #256	; 0x100
   2e798:	add	r6, r6, r3
   2e79c:	mov	r0, r8
   2e7a0:	lsl	r1, r6, #2
   2e7a4:	bl	12674 <realloc@plt>
   2e7a8:	subs	fp, r0, #0
   2e7ac:	beq	2e824 <__assert_fail@plt+0x1bb80>
   2e7b0:	mov	r8, fp
   2e7b4:	str	r4, [r8, r5, lsl #2]
   2e7b8:	add	r4, r4, #1
   2e7bc:	cmp	r9, r4
   2e7c0:	mov	r5, r7
   2e7c4:	beq	2e7fc <__assert_fail@plt+0x1bb58>
   2e7c8:	mov	r2, sp
   2e7cc:	mov	r1, r4
   2e7d0:	mov	r0, #3
   2e7d4:	bl	126f8 <__fxstat64@plt>
   2e7d8:	cmn	r0, #1
   2e7dc:	bne	2e780 <__assert_fail@plt+0x1badc>
   2e7e0:	bl	12968 <__errno_location@plt>
   2e7e4:	ldr	r3, [r0]
   2e7e8:	cmp	r3, #9
   2e7ec:	bne	2e780 <__assert_fail@plt+0x1badc>
   2e7f0:	add	r4, r4, #1
   2e7f4:	cmp	r9, r4
   2e7f8:	bne	2e7c8 <__assert_fail@plt+0x1bb24>
   2e7fc:	add	r5, r8, r5, lsl #2
   2e800:	mvn	r3, #0
   2e804:	str	r3, [r5]
   2e808:	ldr	r2, [sp, #108]	; 0x6c
   2e80c:	ldr	r3, [sl]
   2e810:	mov	r0, r8
   2e814:	cmp	r2, r3
   2e818:	bne	2e83c <__assert_fail@plt+0x1bb98>
   2e81c:	add	sp, sp, #116	; 0x74
   2e820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e824:	mov	r0, r8
   2e828:	bl	12560 <free@plt>
   2e82c:	mov	r8, fp
   2e830:	b	2e808 <__assert_fail@plt+0x1bb64>
   2e834:	mov	r5, r8
   2e838:	b	2e800 <__assert_fail@plt+0x1bb5c>
   2e83c:	bl	1262c <__stack_chk_fail@plt>
   2e840:	strdeq	r5, [r4], -r8
   2e844:	cmp	r1, #0
   2e848:	beq	2e858 <__assert_fail@plt+0x1bbb4>
   2e84c:	mov	r3, r2
   2e850:	mov	r2, #0
   2e854:	b	2e1f4 <__assert_fail@plt+0x1b550>
   2e858:	b	2e33c <__assert_fail@plt+0x1b698>
   2e85c:	cmp	r1, #0
   2e860:	beq	2e870 <__assert_fail@plt+0x1bbcc>
   2e864:	mov	r3, r2
   2e868:	mov	r2, #1
   2e86c:	b	2e1f4 <__assert_fail@plt+0x1b550>
   2e870:	b	2e33c <__assert_fail@plt+0x1b698>
   2e874:	b	2e33c <__assert_fail@plt+0x1b698>
   2e878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e87c:	sub	sp, sp, #76	; 0x4c
   2e880:	ldr	sl, [pc, #976]	; 2ec58 <__assert_fail@plt+0x1bfb4>
   2e884:	ldr	ip, [pc, #976]	; 2ec5c <__assert_fail@plt+0x1bfb8>
   2e888:	ldr	r5, [sp, #116]	; 0x74
   2e88c:	ldr	r6, [sl]
   2e890:	cmp	r5, #0
   2e894:	str	r6, [sp, #68]	; 0x44
   2e898:	ldrd	r6, [sp, #120]	; 0x78
   2e89c:	strd	r0, [sp, #16]
   2e8a0:	ldm	ip, {r0, r1}
   2e8a4:	mov	ip, #0
   2e8a8:	strne	ip, [r5]
   2e8ac:	cmp	r6, #0
   2e8b0:	strd	r2, [sp, #24]
   2e8b4:	ldr	r4, [sp, #112]	; 0x70
   2e8b8:	movne	r3, #0
   2e8bc:	strne	r3, [r6]
   2e8c0:	ldr	fp, [sp, #128]	; 0x80
   2e8c4:	cmp	r7, #0
   2e8c8:	movne	r3, #0
   2e8cc:	add	lr, sp, #44	; 0x2c
   2e8d0:	add	r9, sp, #52	; 0x34
   2e8d4:	add	r8, sp, #60	; 0x3c
   2e8d8:	strne	r3, [r7]
   2e8dc:	lsr	r4, r4, #4
   2e8e0:	mvn	r3, #0
   2e8e4:	cmp	r5, #0
   2e8e8:	stm	lr, {r0, r1}
   2e8ec:	stm	r9, {r0, r1}
   2e8f0:	stm	r8, {r0, r1}
   2e8f4:	and	r4, r4, #1
   2e8f8:	str	ip, [sp, #32]
   2e8fc:	str	ip, [sp, #36]	; 0x24
   2e900:	str	ip, [sp, #40]	; 0x28
   2e904:	str	r3, [fp]
   2e908:	beq	2e928 <__assert_fail@plt+0x1bc84>
   2e90c:	mov	r3, r4
   2e910:	mov	r0, lr
   2e914:	mov	r2, #1
   2e918:	add	r1, sp, #32
   2e91c:	bl	2e1f4 <__assert_fail@plt+0x1b550>
   2e920:	subs	r3, r0, #0
   2e924:	bne	2e9e4 <__assert_fail@plt+0x1bd40>
   2e928:	cmp	r6, #0
   2e92c:	beq	2e94c <__assert_fail@plt+0x1bca8>
   2e930:	mov	r3, r4
   2e934:	mov	r0, r9
   2e938:	mov	r2, #0
   2e93c:	add	r1, sp, #36	; 0x24
   2e940:	bl	2e1f4 <__assert_fail@plt+0x1b550>
   2e944:	subs	r3, r0, #0
   2e948:	bne	2ea64 <__assert_fail@plt+0x1bdc0>
   2e94c:	cmp	r7, #0
   2e950:	beq	2e970 <__assert_fail@plt+0x1bccc>
   2e954:	mov	r3, r4
   2e958:	mov	r0, r8
   2e95c:	mov	r2, #0
   2e960:	add	r1, sp, #40	; 0x28
   2e964:	bl	2e1f4 <__assert_fail@plt+0x1b550>
   2e968:	subs	r3, r0, #0
   2e96c:	bne	2ea00 <__assert_fail@plt+0x1bd5c>
   2e970:	bl	12ab8 <fork@plt>
   2e974:	cmn	r0, #1
   2e978:	str	r0, [fp]
   2e97c:	beq	2ea8c <__assert_fail@plt+0x1bde8>
   2e980:	cmp	r0, #0
   2e984:	beq	2ec10 <__assert_fail@plt+0x1bf6c>
   2e988:	ldr	r0, [sp, #44]	; 0x2c
   2e98c:	cmn	r0, #1
   2e990:	beq	2e998 <__assert_fail@plt+0x1bcf4>
   2e994:	bl	12c5c <close@plt>
   2e998:	ldr	r0, [sp, #56]	; 0x38
   2e99c:	cmn	r0, #1
   2e9a0:	beq	2e9a8 <__assert_fail@plt+0x1bd04>
   2e9a4:	bl	12c5c <close@plt>
   2e9a8:	ldr	r0, [sp, #64]	; 0x40
   2e9ac:	cmn	r0, #1
   2e9b0:	beq	2e9b8 <__assert_fail@plt+0x1bd14>
   2e9b4:	bl	12c5c <close@plt>
   2e9b8:	cmp	r5, #0
   2e9bc:	ldrne	r3, [sp, #32]
   2e9c0:	strne	r3, [r5]
   2e9c4:	cmp	r6, #0
   2e9c8:	ldrne	r3, [sp, #36]	; 0x24
   2e9cc:	strne	r3, [r6]
   2e9d0:	cmp	r7, #0
   2e9d4:	movne	r3, #0
   2e9d8:	ldrne	r2, [sp, #40]	; 0x28
   2e9dc:	moveq	r3, r7
   2e9e0:	strne	r2, [r7]
   2e9e4:	ldr	r1, [sp, #68]	; 0x44
   2e9e8:	ldr	r2, [sl]
   2e9ec:	mov	r0, r3
   2e9f0:	cmp	r1, r2
   2e9f4:	bne	2ec0c <__assert_fail@plt+0x1bf68>
   2e9f8:	add	sp, sp, #76	; 0x4c
   2e9fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea00:	ldr	r0, [sp, #32]
   2ea04:	cmp	r0, #0
   2ea08:	beq	2eb64 <__assert_fail@plt+0x1bec0>
   2ea0c:	str	r3, [sp, #16]
   2ea10:	bl	12788 <gpgrt_fclose@plt>
   2ea14:	ldr	r3, [sp, #16]
   2ea18:	ldr	r0, [sp, #44]	; 0x2c
   2ea1c:	cmn	r0, #1
   2ea20:	beq	2ea30 <__assert_fail@plt+0x1bd8c>
   2ea24:	str	r3, [sp, #16]
   2ea28:	bl	12c5c <close@plt>
   2ea2c:	ldr	r3, [sp, #16]
   2ea30:	ldr	r0, [sp, #36]	; 0x24
   2ea34:	cmp	r0, #0
   2ea38:	beq	2eb80 <__assert_fail@plt+0x1bedc>
   2ea3c:	str	r3, [sp, #16]
   2ea40:	bl	12788 <gpgrt_fclose@plt>
   2ea44:	ldr	r3, [sp, #16]
   2ea48:	ldr	r0, [sp, #56]	; 0x38
   2ea4c:	cmn	r0, #1
   2ea50:	beq	2e9e4 <__assert_fail@plt+0x1bd40>
   2ea54:	str	r3, [sp, #16]
   2ea58:	bl	12c5c <close@plt>
   2ea5c:	ldr	r3, [sp, #16]
   2ea60:	b	2e9e4 <__assert_fail@plt+0x1bd40>
   2ea64:	ldr	r0, [sp, #32]
   2ea68:	cmp	r0, #0
   2ea6c:	beq	2eb9c <__assert_fail@plt+0x1bef8>
   2ea70:	str	r3, [sp, #16]
   2ea74:	bl	12788 <gpgrt_fclose@plt>
   2ea78:	ldr	r3, [sp, #16]
   2ea7c:	ldr	r0, [sp, #44]	; 0x2c
   2ea80:	cmn	r0, #1
   2ea84:	beq	2e9e4 <__assert_fail@plt+0x1bd40>
   2ea88:	b	2ea54 <__assert_fail@plt+0x1bdb0>
   2ea8c:	ldr	r3, [pc, #460]	; 2ec60 <__assert_fail@plt+0x1bfbc>
   2ea90:	ldr	r4, [r3]
   2ea94:	bl	12914 <gpg_err_code_from_syserror@plt>
   2ea98:	mov	r2, #5
   2ea9c:	ldr	r1, [pc, #448]	; 2ec64 <__assert_fail@plt+0x1bfc0>
   2eaa0:	subs	r3, r0, #0
   2eaa4:	lslne	r4, r4, #24
   2eaa8:	uxthne	r3, r3
   2eaac:	andne	r4, r4, #2130706432	; 0x7f000000
   2eab0:	orrne	r3, r4, r3
   2eab4:	mov	r0, #0
   2eab8:	str	r3, [sp, #16]
   2eabc:	bl	12620 <dcgettext@plt>
   2eac0:	ldr	r3, [sp, #16]
   2eac4:	mov	r4, r0
   2eac8:	mov	r0, r3
   2eacc:	bl	12b3c <gpg_strerror@plt>
   2ead0:	mov	r1, r0
   2ead4:	mov	r0, r4
   2ead8:	bl	21cbc <__assert_fail@plt+0xf018>
   2eadc:	ldr	r0, [sp, #32]
   2eae0:	ldr	r3, [sp, #16]
   2eae4:	cmp	r0, #0
   2eae8:	beq	2ebb8 <__assert_fail@plt+0x1bf14>
   2eaec:	bl	12788 <gpgrt_fclose@plt>
   2eaf0:	ldr	r3, [sp, #16]
   2eaf4:	ldr	r0, [sp, #44]	; 0x2c
   2eaf8:	cmn	r0, #1
   2eafc:	beq	2eb0c <__assert_fail@plt+0x1be68>
   2eb00:	str	r3, [sp, #16]
   2eb04:	bl	12c5c <close@plt>
   2eb08:	ldr	r3, [sp, #16]
   2eb0c:	ldr	r0, [sp, #36]	; 0x24
   2eb10:	cmp	r0, #0
   2eb14:	beq	2ebd4 <__assert_fail@plt+0x1bf30>
   2eb18:	str	r3, [sp, #16]
   2eb1c:	bl	12788 <gpgrt_fclose@plt>
   2eb20:	ldr	r3, [sp, #16]
   2eb24:	ldr	r0, [sp, #56]	; 0x38
   2eb28:	cmn	r0, #1
   2eb2c:	beq	2eb3c <__assert_fail@plt+0x1be98>
   2eb30:	str	r3, [sp, #16]
   2eb34:	bl	12c5c <close@plt>
   2eb38:	ldr	r3, [sp, #16]
   2eb3c:	ldr	r0, [sp, #40]	; 0x28
   2eb40:	cmp	r0, #0
   2eb44:	beq	2ebf0 <__assert_fail@plt+0x1bf4c>
   2eb48:	str	r3, [sp, #16]
   2eb4c:	bl	12788 <gpgrt_fclose@plt>
   2eb50:	ldr	r3, [sp, #16]
   2eb54:	ldr	r0, [sp, #64]	; 0x40
   2eb58:	cmn	r0, #1
   2eb5c:	beq	2e9e4 <__assert_fail@plt+0x1bd40>
   2eb60:	b	2ea54 <__assert_fail@plt+0x1bdb0>
   2eb64:	ldr	r0, [sp, #48]	; 0x30
   2eb68:	cmn	r0, #1
   2eb6c:	beq	2ea18 <__assert_fail@plt+0x1bd74>
   2eb70:	str	r3, [sp, #16]
   2eb74:	bl	12c5c <close@plt>
   2eb78:	ldr	r3, [sp, #16]
   2eb7c:	b	2ea18 <__assert_fail@plt+0x1bd74>
   2eb80:	ldr	r0, [sp, #52]	; 0x34
   2eb84:	cmn	r0, #1
   2eb88:	beq	2ea48 <__assert_fail@plt+0x1bda4>
   2eb8c:	str	r3, [sp, #16]
   2eb90:	bl	12c5c <close@plt>
   2eb94:	ldr	r3, [sp, #16]
   2eb98:	b	2ea48 <__assert_fail@plt+0x1bda4>
   2eb9c:	ldr	r0, [sp, #48]	; 0x30
   2eba0:	cmn	r0, #1
   2eba4:	beq	2ea7c <__assert_fail@plt+0x1bdd8>
   2eba8:	str	r3, [sp, #16]
   2ebac:	bl	12c5c <close@plt>
   2ebb0:	ldr	r3, [sp, #16]
   2ebb4:	b	2ea7c <__assert_fail@plt+0x1bdd8>
   2ebb8:	ldr	r0, [sp, #48]	; 0x30
   2ebbc:	cmn	r0, #1
   2ebc0:	beq	2eaf4 <__assert_fail@plt+0x1be50>
   2ebc4:	str	r3, [sp, #16]
   2ebc8:	bl	12c5c <close@plt>
   2ebcc:	ldr	r3, [sp, #16]
   2ebd0:	b	2eaf4 <__assert_fail@plt+0x1be50>
   2ebd4:	ldr	r0, [sp, #52]	; 0x34
   2ebd8:	cmn	r0, #1
   2ebdc:	beq	2eb24 <__assert_fail@plt+0x1be80>
   2ebe0:	str	r3, [sp, #16]
   2ebe4:	bl	12c5c <close@plt>
   2ebe8:	ldr	r3, [sp, #16]
   2ebec:	b	2eb24 <__assert_fail@plt+0x1be80>
   2ebf0:	ldr	r0, [sp, #60]	; 0x3c
   2ebf4:	cmn	r0, #1
   2ebf8:	beq	2eb54 <__assert_fail@plt+0x1beb0>
   2ebfc:	str	r3, [sp, #16]
   2ec00:	bl	12c5c <close@plt>
   2ec04:	ldr	r3, [sp, #16]
   2ec08:	b	2eb54 <__assert_fail@plt+0x1beb0>
   2ec0c:	bl	1262c <__stack_chk_fail@plt>
   2ec10:	mov	r0, #25
   2ec14:	bl	12b90 <gcry_control@plt>
   2ec18:	ldr	r0, [sp, #32]
   2ec1c:	bl	12788 <gpgrt_fclose@plt>
   2ec20:	ldr	r0, [sp, #36]	; 0x24
   2ec24:	bl	12788 <gpgrt_fclose@plt>
   2ec28:	ldr	r0, [sp, #40]	; 0x28
   2ec2c:	bl	12788 <gpgrt_fclose@plt>
   2ec30:	ldr	r2, [sp, #28]
   2ec34:	ldr	r3, [sp, #64]	; 0x40
   2ec38:	str	r2, [sp, #8]
   2ec3c:	ldr	r2, [sp, #24]
   2ec40:	str	r3, [sp]
   2ec44:	str	r2, [sp, #4]
   2ec48:	ldrd	r0, [sp, #16]
   2ec4c:	ldr	r3, [sp, #56]	; 0x38
   2ec50:	ldr	r2, [sp, #44]	; 0x2c
   2ec54:	bl	2e550 <__assert_fail@plt+0x1b8ac>
   2ec58:	strdeq	r5, [r4], -r8
   2ec5c:	andeq	r5, r3, r0, asr r3
   2ec60:			; <UNDEFINED> instruction: 0x000462b0
   2ec64:	andeq	r5, r3, r0, lsl #8
   2ec68:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ec6c:	sub	sp, sp, #20
   2ec70:	mov	r6, r0
   2ec74:	ldr	r5, [sp, #52]	; 0x34
   2ec78:	mov	r7, r1
   2ec7c:	mov	r8, r2
   2ec80:	mov	r9, r3
   2ec84:	bl	12ab8 <fork@plt>
   2ec88:	cmn	r0, #1
   2ec8c:	str	r0, [r5]
   2ec90:	beq	2ecb0 <__assert_fail@plt+0x1c00c>
   2ec94:	cmp	r0, #0
   2ec98:	mov	r4, r0
   2ec9c:	movne	r4, #0
   2eca0:	beq	2ed08 <__assert_fail@plt+0x1c064>
   2eca4:	mov	r0, r4
   2eca8:	add	sp, sp, #20
   2ecac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ecb0:	ldr	r3, [pc, #124]	; 2ed34 <__assert_fail@plt+0x1c090>
   2ecb4:	ldr	r5, [r3]
   2ecb8:	bl	12914 <gpg_err_code_from_syserror@plt>
   2ecbc:	mov	r2, #5
   2ecc0:	ldr	r1, [pc, #112]	; 2ed38 <__assert_fail@plt+0x1c094>
   2ecc4:	subs	r4, r0, #0
   2ecc8:	lslne	r5, r5, #24
   2eccc:	andne	r5, r5, #2130706432	; 0x7f000000
   2ecd0:	uxthne	r4, r4
   2ecd4:	mov	r0, #0
   2ecd8:	orrne	r4, r5, r4
   2ecdc:	bl	12620 <dcgettext@plt>
   2ece0:	mov	r5, r0
   2ece4:	bl	12968 <__errno_location@plt>
   2ece8:	ldr	r0, [r0]
   2ecec:	bl	12818 <strerror@plt>
   2ecf0:	mov	r1, r0
   2ecf4:	mov	r0, r5
   2ecf8:	bl	21cbc <__assert_fail@plt+0xf018>
   2ecfc:	mov	r0, r4
   2ed00:	add	sp, sp, #20
   2ed04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ed08:	mov	r0, #25
   2ed0c:	bl	12b90 <gcry_control@plt>
   2ed10:	ldr	r3, [sp, #48]	; 0x30
   2ed14:	str	r4, [sp, #8]
   2ed18:	str	r3, [sp]
   2ed1c:	str	r4, [sp, #4]
   2ed20:	mov	r3, r9
   2ed24:	mov	r2, r8
   2ed28:	mov	r1, r7
   2ed2c:	mov	r0, r6
   2ed30:	bl	2e550 <__assert_fail@plt+0x1b8ac>
   2ed34:			; <UNDEFINED> instruction: 0x000462b0
   2ed38:	andeq	r5, r3, r0, lsl #8
   2ed3c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ed40:	subs	r8, r3, #0
   2ed44:	ldr	r7, [pc, #376]	; 2eec4 <__assert_fail@plt+0x1c220>
   2ed48:	sub	sp, sp, #12
   2ed4c:	mov	r9, r0
   2ed50:	ldr	r3, [r7]
   2ed54:	mov	r6, r1
   2ed58:	str	r3, [sp, #4]
   2ed5c:	mvnne	r3, #0
   2ed60:	strne	r3, [r8]
   2ed64:	cmn	r1, #1
   2ed68:	beq	2ee98 <__assert_fail@plt+0x1c1f4>
   2ed6c:	clz	r5, r2
   2ed70:	lsr	r5, r5, #5
   2ed74:	b	2ed8c <__assert_fail@plt+0x1c0e8>
   2ed78:	bl	12968 <__errno_location@plt>
   2ed7c:	mov	r4, r0
   2ed80:	ldr	r0, [r0]
   2ed84:	cmp	r0, #4
   2ed88:	bne	2ee40 <__assert_fail@plt+0x1c19c>
   2ed8c:	mov	r2, r5
   2ed90:	mov	r1, sp
   2ed94:	mov	r0, r6
   2ed98:	bl	1274c <waitpid@plt>
   2ed9c:	cmn	r0, #1
   2eda0:	beq	2ed78 <__assert_fail@plt+0x1c0d4>
   2eda4:	cmp	r0, #0
   2eda8:	moveq	r0, #62	; 0x3e
   2edac:	bne	2edc8 <__assert_fail@plt+0x1c124>
   2edb0:	ldr	r2, [sp, #4]
   2edb4:	ldr	r3, [r7]
   2edb8:	cmp	r2, r3
   2edbc:	bne	2eec0 <__assert_fail@plt+0x1c21c>
   2edc0:	add	sp, sp, #12
   2edc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2edc8:	ldr	r3, [sp]
   2edcc:	ands	r2, r3, #127	; 0x7f
   2edd0:	bne	2ee20 <__assert_fail@plt+0x1c17c>
   2edd4:	asr	r3, r3, #8
   2edd8:	uxtb	r0, r3
   2eddc:	cmp	r0, #127	; 0x7f
   2ede0:	beq	2eea0 <__assert_fail@plt+0x1c1fc>
   2ede4:	cmp	r0, #0
   2ede8:	beq	2ee88 <__assert_fail@plt+0x1c1e4>
   2edec:	cmp	r8, #0
   2edf0:	strne	r0, [r8]
   2edf4:	movne	r0, #1
   2edf8:	bne	2edb0 <__assert_fail@plt+0x1c10c>
   2edfc:	mov	r2, #5
   2ee00:	ldr	r1, [pc, #192]	; 2eec8 <__assert_fail@plt+0x1c224>
   2ee04:	mov	r0, r8
   2ee08:	bl	12620 <dcgettext@plt>
   2ee0c:	mov	r1, r9
   2ee10:	ldrb	r2, [sp, #1]
   2ee14:	bl	21cbc <__assert_fail@plt+0xf018>
   2ee18:	mov	r0, #1
   2ee1c:	b	2edb0 <__assert_fail@plt+0x1c10c>
   2ee20:	mov	r2, #5
   2ee24:	ldr	r1, [pc, #160]	; 2eecc <__assert_fail@plt+0x1c228>
   2ee28:	mov	r0, #0
   2ee2c:	bl	12620 <dcgettext@plt>
   2ee30:	mov	r1, r9
   2ee34:	bl	21cbc <__assert_fail@plt+0xf018>
   2ee38:	mov	r0, #1
   2ee3c:	b	2edb0 <__assert_fail@plt+0x1c10c>
   2ee40:	bl	1271c <gpg_err_code_from_errno@plt>
   2ee44:	mov	r2, #5
   2ee48:	ldr	r1, [pc, #128]	; 2eed0 <__assert_fail@plt+0x1c22c>
   2ee4c:	mov	r5, r0
   2ee50:	mov	r0, #0
   2ee54:	bl	12620 <dcgettext@plt>
   2ee58:	mov	r8, r0
   2ee5c:	ldr	r0, [r4]
   2ee60:	bl	12818 <strerror@plt>
   2ee64:	mov	r1, r6
   2ee68:	mov	r2, r0
   2ee6c:	mov	r0, r8
   2ee70:	bl	21cbc <__assert_fail@plt+0xf018>
   2ee74:	cmp	r5, #0
   2ee78:	uxthne	r0, r5
   2ee7c:	bne	2edb0 <__assert_fail@plt+0x1c10c>
   2ee80:	mov	r0, #0
   2ee84:	b	2edb0 <__assert_fail@plt+0x1c10c>
   2ee88:	cmp	r8, #0
   2ee8c:	strne	r0, [r8]
   2ee90:	bne	2edb0 <__assert_fail@plt+0x1c10c>
   2ee94:	b	2ee80 <__assert_fail@plt+0x1c1dc>
   2ee98:	mov	r0, #55	; 0x37
   2ee9c:	b	2edb0 <__assert_fail@plt+0x1c10c>
   2eea0:	mov	r0, r2
   2eea4:	ldr	r1, [pc, #40]	; 2eed4 <__assert_fail@plt+0x1c230>
   2eea8:	mov	r2, #5
   2eeac:	bl	12620 <dcgettext@plt>
   2eeb0:	mov	r1, r9
   2eeb4:	bl	21cbc <__assert_fail@plt+0xf018>
   2eeb8:	mov	r0, #115	; 0x73
   2eebc:	b	2edb0 <__assert_fail@plt+0x1c10c>
   2eec0:	bl	1262c <__stack_chk_fail@plt>
   2eec4:	strdeq	r5, [r4], -r8
   2eec8:	andeq	r5, r3, r8, asr #8
   2eecc:	andeq	r5, r3, ip, ror #8
   2eed0:	andeq	r5, r3, ip, lsl #9
   2eed4:	andeq	r5, r3, ip, lsl r4
   2eed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eedc:	sub	sp, sp, #36	; 0x24
   2eee0:	mov	sl, r1
   2eee4:	str	r0, [sp, #16]
   2eee8:	ldr	r0, [pc, #896]	; 2f270 <__assert_fail@plt+0x1c5cc>
   2eeec:	ldr	ip, [sp, #72]	; 0x48
   2eef0:	str	r3, [sp, #12]
   2eef4:	cmp	ip, #0
   2eef8:	ldr	r0, [r0]
   2eefc:	movne	r3, #0
   2ef00:	str	ip, [sp, #4]
   2ef04:	mov	r7, r2
   2ef08:	str	r0, [sp, #28]
   2ef0c:	strne	r3, [sp, #8]
   2ef10:	beq	2f208 <__assert_fail@plt+0x1c564>
   2ef14:	cmp	r7, #0
   2ef18:	beq	2f234 <__assert_fail@plt+0x1c590>
   2ef1c:	ldr	ip, [sl]
   2ef20:	cmn	ip, #1
   2ef24:	beq	2f1c8 <__assert_fail@plt+0x1c524>
   2ef28:	ldr	r3, [sp, #4]
   2ef2c:	ldr	r9, [pc, #832]	; 2f274 <__assert_fail@plt+0x1c5d0>
   2ef30:	sub	r3, r3, #4
   2ef34:	mov	r6, r3
   2ef38:	mov	r4, sl
   2ef3c:	mov	r8, r7
   2ef40:	mov	r5, #0
   2ef44:	str	r3, [sp, #20]
   2ef48:	ldr	r2, [r9]
   2ef4c:	cmp	r2, #0
   2ef50:	beq	2ef80 <__assert_fail@plt+0x1c2dc>
   2ef54:	ldr	r3, [r2]
   2ef58:	cmp	r3, ip
   2ef5c:	bne	2ef74 <__assert_fail@plt+0x1c2d0>
   2ef60:	b	2f1e0 <__assert_fail@plt+0x1c53c>
   2ef64:	ldr	r1, [r3]
   2ef68:	cmp	r1, ip
   2ef6c:	beq	2efa8 <__assert_fail@plt+0x1c304>
   2ef70:	mov	r2, r3
   2ef74:	ldr	r3, [r2, #8]
   2ef78:	cmp	r3, #0
   2ef7c:	bne	2ef64 <__assert_fail@plt+0x1c2c0>
   2ef80:	add	r3, r5, #1
   2ef84:	mvn	fp, #0
   2ef88:	cmp	r7, r3
   2ef8c:	str	fp, [r6, #4]!
   2ef90:	beq	2efd4 <__assert_fail@plt+0x1c330>
   2ef94:	ldr	ip, [r4, #4]!
   2ef98:	cmn	ip, #1
   2ef9c:	beq	2f1c8 <__assert_fail@plt+0x1c524>
   2efa0:	mov	r5, r3
   2efa4:	b	2ef48 <__assert_fail@plt+0x1c2a4>
   2efa8:	add	r2, r2, #8
   2efac:	ldr	r1, [r3, #8]
   2efb0:	mov	r0, r3
   2efb4:	str	r1, [r2]
   2efb8:	ldr	fp, [r3, #4]
   2efbc:	bl	125e4 <gcry_free@plt>
   2efc0:	add	r3, r5, #1
   2efc4:	cmp	r7, r3
   2efc8:	sub	r8, r8, #1
   2efcc:	str	fp, [r6, #4]!
   2efd0:	bne	2ef94 <__assert_fail@plt+0x1c2f0>
   2efd4:	cmp	r8, #0
   2efd8:	beq	2f1c0 <__assert_fail@plt+0x1c51c>
   2efdc:	ldr	r3, [sp, #12]
   2efe0:	clz	r6, r3
   2efe4:	lsr	r6, r6, #5
   2efe8:	b	2effc <__assert_fail@plt+0x1c358>
   2efec:	bl	12968 <__errno_location@plt>
   2eff0:	ldr	r3, [r0]
   2eff4:	cmp	r3, #4
   2eff8:	bne	2f07c <__assert_fail@plt+0x1c3d8>
   2effc:	mov	r2, r6
   2f000:	add	r1, sp, #24
   2f004:	mvn	r0, #0
   2f008:	bl	1274c <waitpid@plt>
   2f00c:	cmn	r0, #1
   2f010:	mov	r4, r0
   2f014:	beq	2efec <__assert_fail@plt+0x1c348>
   2f018:	cmp	r0, #0
   2f01c:	beq	2f23c <__assert_fail@plt+0x1c598>
   2f020:	ldr	r3, [sl]
   2f024:	cmp	r0, r3
   2f028:	beq	2f22c <__assert_fail@plt+0x1c588>
   2f02c:	mov	r2, sl
   2f030:	mov	r3, #0
   2f034:	b	2f048 <__assert_fail@plt+0x1c3a4>
   2f038:	ldr	r1, [r2, #4]!
   2f03c:	lsl	r0, r3, #2
   2f040:	cmp	r1, r4
   2f044:	beq	2f19c <__assert_fail@plt+0x1c4f8>
   2f048:	cmp	r5, r3
   2f04c:	add	r3, r3, #1
   2f050:	bne	2f038 <__assert_fail@plt+0x1c394>
   2f054:	mov	r0, #12
   2f058:	ldr	fp, [sp, #24]
   2f05c:	bl	12458 <gcry_malloc@plt>
   2f060:	cmp	r0, #0
   2f064:	beq	2f244 <__assert_fail@plt+0x1c5a0>
   2f068:	ldr	r3, [r9]
   2f06c:	stm	r0, {r4, fp}
   2f070:	str	r3, [r0, #8]
   2f074:	str	r0, [r9]
   2f078:	b	2effc <__assert_fail@plt+0x1c358>
   2f07c:	mov	r4, r0
   2f080:	mov	r0, r3
   2f084:	bl	1271c <gpg_err_code_from_errno@plt>
   2f088:	mov	r2, #5
   2f08c:	ldr	r1, [pc, #484]	; 2f278 <__assert_fail@plt+0x1c5d4>
   2f090:	str	r0, [sp, #12]
   2f094:	mov	r0, #0
   2f098:	bl	12620 <dcgettext@plt>
   2f09c:	mov	r5, r0
   2f0a0:	ldr	r0, [r4]
   2f0a4:	bl	12818 <strerror@plt>
   2f0a8:	mov	r1, r0
   2f0ac:	mov	r0, r5
   2f0b0:	bl	21cbc <__assert_fail@plt+0xf018>
   2f0b4:	ldr	r3, [sp, #12]
   2f0b8:	ldr	r2, [sp, #4]
   2f0bc:	ldr	r4, [pc, #440]	; 2f27c <__assert_fail@plt+0x1c5d8>
   2f0c0:	add	r7, r2, r7, lsl #2
   2f0c4:	ldr	r5, [pc, #436]	; 2f280 <__assert_fail@plt+0x1c5dc>
   2f0c8:	ldr	r6, [pc, #436]	; 2f284 <__assert_fail@plt+0x1c5e0>
   2f0cc:	sub	r7, r7, #4
   2f0d0:	ldr	r8, [sp, #20]
   2f0d4:	ldr	r9, [sp, #16]
   2f0d8:	b	2f104 <__assert_fail@plt+0x1c460>
   2f0dc:	mov	r2, #5
   2f0e0:	mov	r1, r4
   2f0e4:	mov	r0, #0
   2f0e8:	bl	12620 <dcgettext@plt>
   2f0ec:	ldr	r1, [r9]
   2f0f0:	bl	21cbc <__assert_fail@plt+0xf018>
   2f0f4:	mov	r3, #1
   2f0f8:	cmp	r8, r7
   2f0fc:	add	r9, r9, #4
   2f100:	beq	2f16c <__assert_fail@plt+0x1c4c8>
   2f104:	ldr	r2, [r8, #4]!
   2f108:	cmn	r2, #1
   2f10c:	beq	2f0f8 <__assert_fail@plt+0x1c454>
   2f110:	ands	r0, r2, #127	; 0x7f
   2f114:	bne	2f0dc <__assert_fail@plt+0x1c438>
   2f118:	asr	r2, r2, #8
   2f11c:	uxtb	r2, r2
   2f120:	cmp	r2, #127	; 0x7f
   2f124:	beq	2f1ec <__assert_fail@plt+0x1c548>
   2f128:	cmp	r2, #0
   2f12c:	beq	2f0f8 <__assert_fail@plt+0x1c454>
   2f130:	ldr	r3, [sp, #8]
   2f134:	cmp	r3, #0
   2f138:	streq	r2, [r8]
   2f13c:	moveq	r3, #1
   2f140:	beq	2f0f8 <__assert_fail@plt+0x1c454>
   2f144:	mov	r2, #5
   2f148:	mov	r1, r5
   2f14c:	bl	12620 <dcgettext@plt>
   2f150:	ldr	r1, [r9]
   2f154:	ldrb	r2, [r8, #1]
   2f158:	bl	21cbc <__assert_fail@plt+0xf018>
   2f15c:	cmp	r8, r7
   2f160:	mov	r3, #1
   2f164:	add	r9, r9, #4
   2f168:	bne	2f104 <__assert_fail@plt+0x1c460>
   2f16c:	ldr	r0, [sp, #8]
   2f170:	str	r3, [sp, #4]
   2f174:	bl	125e4 <gcry_free@plt>
   2f178:	ldr	r3, [sp, #4]
   2f17c:	uxth	r0, r3
   2f180:	ldr	r3, [pc, #232]	; 2f270 <__assert_fail@plt+0x1c5cc>
   2f184:	ldr	r2, [sp, #28]
   2f188:	ldr	r3, [r3]
   2f18c:	cmp	r2, r3
   2f190:	bne	2f26c <__assert_fail@plt+0x1c5c8>
   2f194:	add	sp, sp, #36	; 0x24
   2f198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f19c:	ldr	r3, [sp, #4]
   2f1a0:	add	r0, r3, r0
   2f1a4:	ldr	r3, [r0]
   2f1a8:	cmn	r3, #1
   2f1ac:	bne	2f258 <__assert_fail@plt+0x1c5b4>
   2f1b0:	ldr	r3, [sp, #24]
   2f1b4:	subs	r8, r8, #1
   2f1b8:	str	r3, [r0]
   2f1bc:	bne	2effc <__assert_fail@plt+0x1c358>
   2f1c0:	mov	r3, #0
   2f1c4:	b	2f0b8 <__assert_fail@plt+0x1c414>
   2f1c8:	ldr	r3, [pc, #184]	; 2f288 <__assert_fail@plt+0x1c5e4>
   2f1cc:	ldr	r3, [r3]
   2f1d0:	lsl	r3, r3, #24
   2f1d4:	and	r3, r3, #2130706432	; 0x7f000000
   2f1d8:	orr	r0, r3, #55	; 0x37
   2f1dc:	b	2f180 <__assert_fail@plt+0x1c4dc>
   2f1e0:	mov	r3, r2
   2f1e4:	ldr	r2, [pc, #136]	; 2f274 <__assert_fail@plt+0x1c5d0>
   2f1e8:	b	2efac <__assert_fail@plt+0x1c308>
   2f1ec:	mov	r2, #5
   2f1f0:	mov	r1, r6
   2f1f4:	bl	12620 <dcgettext@plt>
   2f1f8:	ldr	r1, [r9]
   2f1fc:	bl	21cbc <__assert_fail@plt+0xf018>
   2f200:	mov	r3, #115	; 0x73
   2f204:	b	2f0f8 <__assert_fail@plt+0x1c454>
   2f208:	lsl	r0, r2, #2
   2f20c:	bl	12458 <gcry_malloc@plt>
   2f210:	subs	r3, r0, #0
   2f214:	str	r3, [sp, #4]
   2f218:	ldrne	r3, [sp, #4]
   2f21c:	strne	r3, [sp, #8]
   2f220:	bne	2ef14 <__assert_fail@plt+0x1c270>
   2f224:	bl	12914 <gpg_err_code_from_syserror@plt>
   2f228:	b	2f180 <__assert_fail@plt+0x1c4dc>
   2f22c:	ldr	r0, [sp, #4]
   2f230:	b	2f1a4 <__assert_fail@plt+0x1c500>
   2f234:	mov	r3, r7
   2f238:	b	2f16c <__assert_fail@plt+0x1c4c8>
   2f23c:	mov	r3, #62	; 0x3e
   2f240:	b	2f0b8 <__assert_fail@plt+0x1c414>
   2f244:	bl	12914 <gpg_err_code_from_syserror@plt>
   2f248:	cmp	r0, #0
   2f24c:	beq	2effc <__assert_fail@plt+0x1c358>
   2f250:	mov	r3, r0
   2f254:	b	2f0b8 <__assert_fail@plt+0x1c414>
   2f258:	mov	r1, r4
   2f25c:	ldr	r0, [pc, #40]	; 2f28c <__assert_fail@plt+0x1c5e8>
   2f260:	bl	21cbc <__assert_fail@plt+0xf018>
   2f264:	mov	r3, #1
   2f268:	b	2f0b8 <__assert_fail@plt+0x1c414>
   2f26c:	bl	1262c <__stack_chk_fail@plt>
   2f270:	strdeq	r5, [r4], -r8
   2f274:	muleq	r4, r8, r4
   2f278:	ldrdeq	r5, [r3], -r0
   2f27c:	andeq	r5, r3, ip, ror #8
   2f280:	andeq	r5, r3, r8, asr #8
   2f284:	andeq	r5, r3, ip, lsl r4
   2f288:			; <UNDEFINED> instruction: 0x000462b0
   2f28c:			; <UNDEFINED> instruction: 0x000354bc
   2f290:	bx	lr
   2f294:	push	{r4, r5, r6, r7, lr}
   2f298:	sub	sp, sp, #20
   2f29c:	mov	r7, r1
   2f2a0:	mov	r6, r2
   2f2a4:	mov	r5, r0
   2f2a8:	bl	1253c <getuid@plt>
   2f2ac:	mov	r4, r0
   2f2b0:	bl	126c8 <geteuid@plt>
   2f2b4:	cmp	r4, r0
   2f2b8:	beq	2f2d8 <__assert_fail@plt+0x1c634>
   2f2bc:	ldr	r3, [pc, #392]	; 2f44c <__assert_fail@plt+0x1c7a8>
   2f2c0:	ldr	r0, [r3]
   2f2c4:	lsl	r0, r0, #24
   2f2c8:	and	r0, r0, #2130706432	; 0x7f000000
   2f2cc:	orr	r0, r0, #59	; 0x3b
   2f2d0:	add	sp, sp, #20
   2f2d4:	pop	{r4, r5, r6, r7, pc}
   2f2d8:	mov	r1, #1
   2f2dc:	mov	r0, r5
   2f2e0:	bl	12a4c <access@plt>
   2f2e4:	subs	r4, r0, #0
   2f2e8:	bne	2f340 <__assert_fail@plt+0x1c69c>
   2f2ec:	bl	12ab8 <fork@plt>
   2f2f0:	cmn	r0, #1
   2f2f4:	beq	2f388 <__assert_fail@plt+0x1c6e4>
   2f2f8:	cmp	r0, #0
   2f2fc:	bne	2f368 <__assert_fail@plt+0x1c6c4>
   2f300:	mov	r0, #25
   2f304:	bl	12b90 <gcry_control@plt>
   2f308:	bl	128f0 <setsid@plt>
   2f30c:	cmn	r0, #1
   2f310:	beq	2f3fc <__assert_fail@plt+0x1c758>
   2f314:	ldr	r0, [pc, #308]	; 2f450 <__assert_fail@plt+0x1c7ac>
   2f318:	bl	126b0 <chdir@plt>
   2f31c:	subs	r4, r0, #0
   2f320:	bne	2f3fc <__assert_fail@plt+0x1c758>
   2f324:	bl	12ab8 <fork@plt>
   2f328:	cmn	r0, #1
   2f32c:	beq	2f3fc <__assert_fail@plt+0x1c758>
   2f330:	cmp	r0, #0
   2f334:	beq	2f404 <__assert_fail@plt+0x1c760>
   2f338:	mov	r0, r4
   2f33c:	bl	125a8 <_exit@plt>
   2f340:	ldr	r3, [pc, #260]	; 2f44c <__assert_fail@plt+0x1c7a8>
   2f344:	ldr	r4, [r3]
   2f348:	bl	12914 <gpg_err_code_from_syserror@plt>
   2f34c:	cmp	r0, #0
   2f350:	beq	2f37c <__assert_fail@plt+0x1c6d8>
   2f354:	lsl	r4, r4, #24
   2f358:	and	r4, r4, #2130706432	; 0x7f000000
   2f35c:	uxth	r0, r0
   2f360:	orr	r0, r4, r0
   2f364:	b	2f2d0 <__assert_fail@plt+0x1c62c>
   2f368:	mov	r2, r4
   2f36c:	mov	r1, r4
   2f370:	bl	1274c <waitpid@plt>
   2f374:	cmn	r0, #1
   2f378:	beq	2f3dc <__assert_fail@plt+0x1c738>
   2f37c:	mov	r0, #0
   2f380:	add	sp, sp, #20
   2f384:	pop	{r4, r5, r6, r7, pc}
   2f388:	mov	r2, #5
   2f38c:	ldr	r1, [pc, #192]	; 2f454 <__assert_fail@plt+0x1c7b0>
   2f390:	mov	r0, r4
   2f394:	bl	12620 <dcgettext@plt>
   2f398:	mov	r4, r0
   2f39c:	bl	12968 <__errno_location@plt>
   2f3a0:	ldr	r0, [r0]
   2f3a4:	bl	12818 <strerror@plt>
   2f3a8:	mov	r1, r0
   2f3ac:	mov	r0, r4
   2f3b0:	bl	21cbc <__assert_fail@plt+0xf018>
   2f3b4:	ldr	r3, [pc, #144]	; 2f44c <__assert_fail@plt+0x1c7a8>
   2f3b8:	ldr	r4, [r3]
   2f3bc:	bl	12914 <gpg_err_code_from_syserror@plt>
   2f3c0:	cmp	r0, #0
   2f3c4:	beq	2f37c <__assert_fail@plt+0x1c6d8>
   2f3c8:	lsl	r3, r4, #24
   2f3cc:	and	r3, r3, #2130706432	; 0x7f000000
   2f3d0:	uxth	r0, r0
   2f3d4:	orr	r0, r3, r0
   2f3d8:	b	2f2d0 <__assert_fail@plt+0x1c62c>
   2f3dc:	bl	12968 <__errno_location@plt>
   2f3e0:	ldr	r0, [r0]
   2f3e4:	bl	12818 <strerror@plt>
   2f3e8:	mov	r1, r0
   2f3ec:	ldr	r0, [pc, #100]	; 2f458 <__assert_fail@plt+0x1c7b4>
   2f3f0:	bl	21cbc <__assert_fail@plt+0xf018>
   2f3f4:	mov	r0, r4
   2f3f8:	b	2f2d0 <__assert_fail@plt+0x1c62c>
   2f3fc:	mov	r0, #1
   2f400:	bl	125a8 <_exit@plt>
   2f404:	cmp	r6, #0
   2f408:	subne	r6, r6, #4
   2f40c:	bne	2f41c <__assert_fail@plt+0x1c778>
   2f410:	b	2f428 <__assert_fail@plt+0x1c784>
   2f414:	bl	12a40 <gcry_xstrdup@plt>
   2f418:	bl	12ac4 <putenv@plt>
   2f41c:	ldr	r0, [r6, #4]!
   2f420:	cmp	r0, #0
   2f424:	bne	2f414 <__assert_fail@plt+0x1c770>
   2f428:	mov	r2, #0
   2f42c:	mvn	r3, #0
   2f430:	str	r2, [sp, #8]
   2f434:	str	r2, [sp, #4]
   2f438:	mov	r1, r7
   2f43c:	mov	r0, r5
   2f440:	str	r3, [sp]
   2f444:	mov	r2, r3
   2f448:	bl	2e550 <__assert_fail@plt+0x1b8ac>
   2f44c:			; <UNDEFINED> instruction: 0x000462b0
   2f450:	andeq	r2, r3, ip, lsr #28
   2f454:	andeq	r5, r3, r0, lsl #8
   2f458:	andeq	r5, r3, r0, lsl #10
   2f45c:	cmn	r0, #1
   2f460:	bxeq	lr
   2f464:	mov	r1, #15
   2f468:	b	12878 <kill@plt>
   2f46c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f470:	sub	sp, sp, #12
   2f474:	ldr	r9, [pc, #228]	; 2f560 <__assert_fail@plt+0x1c8bc>
   2f478:	str	r1, [sp]
   2f47c:	mov	r1, #64	; 0x40
   2f480:	str	r2, [sp, #4]
   2f484:	bl	128fc <strchr@plt>
   2f488:	ldr	r8, [pc, #212]	; 2f564 <__assert_fail@plt+0x1c8c0>
   2f48c:	mov	r4, r0
   2f490:	cmp	r4, #0
   2f494:	beq	2f4dc <__assert_fail@plt+0x1c838>
   2f498:	add	r5, r4, #1
   2f49c:	mov	r0, r5
   2f4a0:	mov	r1, #64	; 0x40
   2f4a4:	bl	128fc <strchr@plt>
   2f4a8:	ldrb	r3, [r4, #1]
   2f4ac:	sub	r3, r3, #65	; 0x41
   2f4b0:	cmp	r3, #25
   2f4b4:	mov	r7, r0
   2f4b8:	bhi	2f4d0 <__assert_fail@plt+0x1c82c>
   2f4bc:	cmp	r0, #0
   2f4c0:	bne	2f4ec <__assert_fail@plt+0x1c848>
   2f4c4:	mov	r0, r7
   2f4c8:	add	sp, sp, #12
   2f4cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f4d0:	mov	r4, r7
   2f4d4:	cmp	r4, #0
   2f4d8:	bne	2f498 <__assert_fail@plt+0x1c7f4>
   2f4dc:	mov	r7, r4
   2f4e0:	mov	r0, r7
   2f4e4:	add	sp, sp, #12
   2f4e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f4ec:	sub	r6, r0, r5
   2f4f0:	mov	fp, r9
   2f4f4:	mov	r0, #5
   2f4f8:	mov	sl, #0
   2f4fc:	b	2f518 <__assert_fail@plt+0x1c874>
   2f500:	add	sl, sl, #1
   2f504:	cmp	sl, #10
   2f508:	beq	2f4d0 <__assert_fail@plt+0x1c82c>
   2f50c:	ldr	fp, [r8, sl, lsl #3]
   2f510:	mov	r0, fp
   2f514:	bl	128d8 <strlen@plt>
   2f518:	cmp	r6, r0
   2f51c:	bne	2f500 <__assert_fail@plt+0x1c85c>
   2f520:	mov	r0, fp
   2f524:	mov	r2, r6
   2f528:	mov	r1, r5
   2f52c:	bl	125f0 <memcmp@plt>
   2f530:	cmp	r0, #0
   2f534:	bne	2f500 <__assert_fail@plt+0x1c85c>
   2f538:	ldr	r3, [sp]
   2f53c:	ldr	r2, [pc, #32]	; 2f564 <__assert_fail@plt+0x1c8c0>
   2f540:	str	r4, [r3]
   2f544:	add	r3, r2, sl, lsl #3
   2f548:	ldr	r2, [sp, #4]
   2f54c:	str	r7, [r2]
   2f550:	ldr	r7, [r3, #4]
   2f554:	mov	r0, r7
   2f558:	add	sp, sp, #12
   2f55c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f560:	andeq	r5, r3, r4, lsl #11
   2f564:	andeq	r5, r3, r4, lsr r5
   2f568:	cmp	r0, #0
   2f56c:	bxeq	lr
   2f570:	b	2f46c <__assert_fail@plt+0x1c7c8>
   2f574:	push	{r4, r5, r6, r7, r8, lr}
   2f578:	sub	sp, sp, #32
   2f57c:	ldr	r8, [pc, #336]	; 2f6d4 <__assert_fail@plt+0x1ca30>
   2f580:	ldr	r7, [pc, #336]	; 2f6d8 <__assert_fail@plt+0x1ca34>
   2f584:	mov	r5, r0
   2f588:	ldr	r3, [r8]
   2f58c:	ldr	r2, [r7]
   2f590:	cmp	r3, #0
   2f594:	str	r2, [sp, #28]
   2f598:	bne	2f5ac <__assert_fail@plt+0x1c908>
   2f59c:	b	2f5e0 <__assert_fail@plt+0x1c93c>
   2f5a0:	ldr	r3, [r3]
   2f5a4:	cmp	r3, #0
   2f5a8:	beq	2f5e0 <__assert_fail@plt+0x1c93c>
   2f5ac:	ldr	r2, [r3, #4]
   2f5b0:	cmp	r5, r2
   2f5b4:	bne	2f5a0 <__assert_fail@plt+0x1c8fc>
   2f5b8:	ldr	r4, [r3, #8]
   2f5bc:	cmp	r4, #0
   2f5c0:	beq	2f5e8 <__assert_fail@plt+0x1c944>
   2f5c4:	ldr	r2, [sp, #28]
   2f5c8:	ldr	r3, [r7]
   2f5cc:	mov	r0, r4
   2f5d0:	cmp	r2, r3
   2f5d4:	bne	2f6b8 <__assert_fail@plt+0x1ca14>
   2f5d8:	add	sp, sp, #32
   2f5dc:	pop	{r4, r5, r6, r7, r8, pc}
   2f5e0:	cmp	r5, #0
   2f5e4:	beq	2f6b0 <__assert_fail@plt+0x1ca0c>
   2f5e8:	add	r2, sp, #8
   2f5ec:	add	r1, sp, #4
   2f5f0:	mov	r0, r5
   2f5f4:	bl	2f46c <__assert_fail@plt+0x1c7c8>
   2f5f8:	subs	r6, r0, #0
   2f5fc:	beq	2f6b0 <__assert_fail@plt+0x1ca0c>
   2f600:	mov	r0, r5
   2f604:	bl	128d8 <strlen@plt>
   2f608:	mov	r4, r5
   2f60c:	add	r1, r0, #100	; 0x64
   2f610:	add	r0, sp, #12
   2f614:	bl	2f720 <__assert_fail@plt+0x1ca7c>
   2f618:	b	2f634 <__assert_fail@plt+0x1c990>
   2f61c:	add	r2, sp, #8
   2f620:	add	r1, sp, #4
   2f624:	mov	r0, r4
   2f628:	bl	2f46c <__assert_fail@plt+0x1c7c8>
   2f62c:	subs	r6, r0, #0
   2f630:	beq	2f660 <__assert_fail@plt+0x1c9bc>
   2f634:	ldr	r2, [sp, #4]
   2f638:	mov	r1, r4
   2f63c:	sub	r2, r2, r4
   2f640:	add	r0, sp, #12
   2f644:	bl	2f7d0 <__assert_fail@plt+0x1cb2c>
   2f648:	mov	r1, r6
   2f64c:	add	r0, sp, #12
   2f650:	bl	2f898 <__assert_fail@plt+0x1cbf4>
   2f654:	ldr	r4, [sp, #8]
   2f658:	adds	r4, r4, #1
   2f65c:	bne	2f61c <__assert_fail@plt+0x1c978>
   2f660:	mov	r1, r4
   2f664:	add	r0, sp, #12
   2f668:	bl	2f898 <__assert_fail@plt+0x1cbf4>
   2f66c:	mov	r2, #1
   2f670:	ldr	r1, [pc, #100]	; 2f6dc <__assert_fail@plt+0x1ca38>
   2f674:	add	r0, sp, #12
   2f678:	bl	2f7d0 <__assert_fail@plt+0x1cb2c>
   2f67c:	add	r0, sp, #12
   2f680:	mov	r1, #0
   2f684:	bl	2f998 <__assert_fail@plt+0x1ccf4>
   2f688:	subs	r4, r0, #0
   2f68c:	beq	2f6bc <__assert_fail@plt+0x1ca18>
   2f690:	mov	r0, #12
   2f694:	bl	12410 <gcry_xmalloc@plt>
   2f698:	ldr	r3, [r8]
   2f69c:	str	r5, [r0, #4]
   2f6a0:	str	r4, [r0, #8]
   2f6a4:	str	r3, [r0]
   2f6a8:	str	r0, [r8]
   2f6ac:	b	2f5c4 <__assert_fail@plt+0x1c920>
   2f6b0:	mov	r4, r5
   2f6b4:	b	2f5c4 <__assert_fail@plt+0x1c920>
   2f6b8:	bl	1262c <__stack_chk_fail@plt>
   2f6bc:	bl	12968 <__errno_location@plt>
   2f6c0:	ldr	r0, [r0]
   2f6c4:	bl	12818 <strerror@plt>
   2f6c8:	mov	r1, r0
   2f6cc:	ldr	r0, [pc, #12]	; 2f6e0 <__assert_fail@plt+0x1ca3c>
   2f6d0:	bl	21d40 <__assert_fail@plt+0xf09c>
   2f6d4:	andeq	r6, r4, r8, ror #8
   2f6d8:	strdeq	r5, [r4], -r8
   2f6dc:	andeq	r1, r3, r8, ror #15
   2f6e0:	andeq	r5, r3, ip, lsl #11
   2f6e4:	push	{r4, lr}
   2f6e8:	mov	r4, r0
   2f6ec:	ldr	r0, [r0, #8]
   2f6f0:	cmp	r0, #0
   2f6f4:	beq	2f710 <__assert_fail@plt+0x1ca6c>
   2f6f8:	ldr	r1, [r4]
   2f6fc:	bl	22068 <__assert_fail@plt+0xf3c4>
   2f700:	ldr	r0, [r4, #8]
   2f704:	bl	125e4 <gcry_free@plt>
   2f708:	mov	r3, #0
   2f70c:	str	r3, [r4, #8]
   2f710:	ldr	r0, [r4, #12]
   2f714:	bl	12b0c <gpg_err_set_errno@plt>
   2f718:	mov	r0, #0
   2f71c:	pop	{r4, pc}
   2f720:	push	{r4, lr}
   2f724:	mov	r4, r0
   2f728:	mov	r3, #0
   2f72c:	str	r1, [r0, #4]
   2f730:	mov	r0, r1
   2f734:	str	r3, [r4]
   2f738:	str	r3, [r4, #12]
   2f73c:	bl	12458 <gcry_malloc@plt>
   2f740:	cmp	r0, #0
   2f744:	str	r0, [r4, #8]
   2f748:	popne	{r4, pc}
   2f74c:	bl	12968 <__errno_location@plt>
   2f750:	ldr	r3, [r0]
   2f754:	str	r3, [r4, #12]
   2f758:	pop	{r4, pc}
   2f75c:	push	{r4, lr}
   2f760:	mov	r4, r0
   2f764:	mov	r3, #0
   2f768:	str	r1, [r0, #4]
   2f76c:	mov	r0, r1
   2f770:	str	r3, [r4]
   2f774:	str	r3, [r4, #12]
   2f778:	bl	127d0 <gcry_malloc_secure@plt>
   2f77c:	cmp	r0, #0
   2f780:	str	r0, [r4, #8]
   2f784:	popne	{r4, pc}
   2f788:	bl	12968 <__errno_location@plt>
   2f78c:	ldr	r3, [r0]
   2f790:	str	r3, [r4, #12]
   2f794:	pop	{r4, pc}
   2f798:	ldr	r3, [r0, #12]
   2f79c:	cmp	r3, #0
   2f7a0:	bxne	lr
   2f7a4:	ldr	r2, [r0]
   2f7a8:	cmp	r2, r1
   2f7ac:	bhi	2f7b8 <__assert_fail@plt+0x1cb14>
   2f7b0:	str	r3, [r0]
   2f7b4:	bx	lr
   2f7b8:	ldr	r3, [r0, #8]
   2f7bc:	sub	r2, r2, r1
   2f7c0:	str	r2, [r0]
   2f7c4:	add	r1, r3, r1
   2f7c8:	mov	r0, r3
   2f7cc:	b	12554 <memmove@plt>
   2f7d0:	ldr	ip, [r0, #12]
   2f7d4:	clz	r3, r2
   2f7d8:	cmp	ip, #0
   2f7dc:	lsr	r3, r3, #5
   2f7e0:	movne	r3, #1
   2f7e4:	cmp	r3, #0
   2f7e8:	bxne	lr
   2f7ec:	ldr	r3, [r0]
   2f7f0:	push	{r4, r5, r6, lr}
   2f7f4:	mov	r6, r1
   2f7f8:	ldr	r1, [r0, #4]
   2f7fc:	mov	r5, r2
   2f800:	add	r2, r3, r2
   2f804:	cmp	r2, r1
   2f808:	mov	r4, r0
   2f80c:	ldr	r0, [r0, #8]
   2f810:	bcc	2f834 <__assert_fail@plt+0x1cb90>
   2f814:	add	r3, r5, #1024	; 0x400
   2f818:	add	r1, r3, r1
   2f81c:	str	r1, [r4, #4]
   2f820:	bl	12a58 <gcry_realloc@plt>
   2f824:	cmp	r0, #0
   2f828:	beq	2f854 <__assert_fail@plt+0x1cbb0>
   2f82c:	ldr	r3, [r4]
   2f830:	str	r0, [r4, #8]
   2f834:	mov	r2, r5
   2f838:	mov	r1, r6
   2f83c:	add	r0, r0, r3
   2f840:	bl	125b4 <memcpy@plt>
   2f844:	ldr	r2, [r4]
   2f848:	add	r5, r2, r5
   2f84c:	str	r5, [r4]
   2f850:	pop	{r4, r5, r6, pc}
   2f854:	bl	12968 <__errno_location@plt>
   2f858:	ldr	r1, [r4]
   2f85c:	ldr	r3, [r0]
   2f860:	ldr	r0, [r4, #8]
   2f864:	cmp	r3, #0
   2f868:	moveq	r3, #12
   2f86c:	str	r3, [r4, #12]
   2f870:	pop	{r4, r5, r6, lr}
   2f874:	b	22068 <__assert_fail@plt+0xf3c4>
   2f878:	cmp	r1, #0
   2f87c:	beq	2f890 <__assert_fail@plt+0x1cbec>
   2f880:	push	{r4, lr}
   2f884:	bl	2f7d0 <__assert_fail@plt+0x1cb2c>
   2f888:	mov	r0, #0
   2f88c:	pop	{r4, pc}
   2f890:	mov	r0, #0
   2f894:	bx	lr
   2f898:	push	{r4, r5, r6, lr}
   2f89c:	mov	r5, r0
   2f8a0:	mov	r0, r1
   2f8a4:	mov	r4, r1
   2f8a8:	bl	128d8 <strlen@plt>
   2f8ac:	mov	r1, r4
   2f8b0:	mov	r2, r0
   2f8b4:	mov	r0, r5
   2f8b8:	pop	{r4, r5, r6, lr}
   2f8bc:	b	2f7d0 <__assert_fail@plt+0x1cb2c>
   2f8c0:	push	{r1, r2, r3}
   2f8c4:	push	{r4, r5, r6, lr}
   2f8c8:	mov	r5, r0
   2f8cc:	ldr	r4, [pc, #136]	; 2f95c <__assert_fail@plt+0x1ccb8>
   2f8d0:	sub	sp, sp, #20
   2f8d4:	add	r3, sp, #40	; 0x28
   2f8d8:	ldr	r0, [r4]
   2f8dc:	mov	r2, r3
   2f8e0:	str	r0, [sp, #12]
   2f8e4:	ldr	r1, [sp, #36]	; 0x24
   2f8e8:	add	r0, sp, #8
   2f8ec:	str	r3, [sp, #4]
   2f8f0:	bl	129d4 <gpgrt_vasprintf@plt>
   2f8f4:	cmp	r0, #0
   2f8f8:	blt	2f940 <__assert_fail@plt+0x1cc9c>
   2f8fc:	ldr	r6, [sp, #8]
   2f900:	mov	r0, r6
   2f904:	bl	128d8 <strlen@plt>
   2f908:	mov	r1, r6
   2f90c:	mov	r2, r0
   2f910:	mov	r0, r5
   2f914:	bl	2f7d0 <__assert_fail@plt+0x1cb2c>
   2f918:	ldr	r0, [sp, #8]
   2f91c:	bl	125e4 <gcry_free@plt>
   2f920:	ldr	r2, [sp, #12]
   2f924:	ldr	r3, [r4]
   2f928:	cmp	r2, r3
   2f92c:	bne	2f958 <__assert_fail@plt+0x1ccb4>
   2f930:	add	sp, sp, #20
   2f934:	pop	{r4, r5, r6, lr}
   2f938:	add	sp, sp, #12
   2f93c:	bx	lr
   2f940:	bl	12968 <__errno_location@plt>
   2f944:	ldr	r3, [r0]
   2f948:	cmp	r3, #0
   2f94c:	moveq	r3, #12
   2f950:	str	r3, [r5, #12]
   2f954:	b	2f920 <__assert_fail@plt+0x1cc7c>
   2f958:	bl	1262c <__stack_chk_fail@plt>
   2f95c:	strdeq	r5, [r4], -r8
   2f960:	ldr	r2, [r0, #12]
   2f964:	mov	r3, r0
   2f968:	cmp	r2, #0
   2f96c:	bne	2f994 <__assert_fail@plt+0x1ccf0>
   2f970:	cmp	r1, #0
   2f974:	ldr	r0, [r0, #8]
   2f978:	ldrne	r2, [r3]
   2f97c:	strne	r2, [r1]
   2f980:	mov	r1, #0
   2f984:	mov	r2, #12
   2f988:	str	r1, [r3, #8]
   2f98c:	str	r2, [r3, #12]
   2f990:	bx	lr
   2f994:	b	2f6e4 <__assert_fail@plt+0x1ca40>
   2f998:	push	{r4, r5, r6, lr}
   2f99c:	sub	sp, sp, #8
   2f9a0:	ldr	r6, [pc, #148]	; 2fa3c <__assert_fail@plt+0x1cd98>
   2f9a4:	subs	r5, r1, #0
   2f9a8:	ldr	r3, [r6]
   2f9ac:	str	r3, [sp, #4]
   2f9b0:	beq	2fa1c <__assert_fail@plt+0x1cd78>
   2f9b4:	ldr	r3, [r0, #12]
   2f9b8:	cmp	r3, #0
   2f9bc:	bne	2fa2c <__assert_fail@plt+0x1cd88>
   2f9c0:	ldr	r1, [r0]
   2f9c4:	mov	r2, #12
   2f9c8:	ldr	r4, [r0, #8]
   2f9cc:	str	r1, [r5]
   2f9d0:	str	r3, [r0, #8]
   2f9d4:	str	r2, [r0, #12]
   2f9d8:	cmp	r4, #0
   2f9dc:	beq	2f9ec <__assert_fail@plt+0x1cd48>
   2f9e0:	ldr	r1, [r5]
   2f9e4:	cmp	r1, #0
   2f9e8:	bne	2fa08 <__assert_fail@plt+0x1cd64>
   2f9ec:	ldr	r2, [sp, #4]
   2f9f0:	ldr	r3, [r6]
   2f9f4:	mov	r0, r4
   2f9f8:	cmp	r2, r3
   2f9fc:	bne	2fa38 <__assert_fail@plt+0x1cd94>
   2fa00:	add	sp, sp, #8
   2fa04:	pop	{r4, r5, r6, pc}
   2fa08:	mov	r0, r4
   2fa0c:	bl	12a58 <gcry_realloc@plt>
   2fa10:	cmp	r0, #0
   2fa14:	movne	r4, r0
   2fa18:	b	2f9ec <__assert_fail@plt+0x1cd48>
   2fa1c:	ldr	r3, [r0, #12]
   2fa20:	mov	r5, sp
   2fa24:	cmp	r3, #0
   2fa28:	beq	2f9c0 <__assert_fail@plt+0x1cd1c>
   2fa2c:	bl	2f6e4 <__assert_fail@plt+0x1ca40>
   2fa30:	mov	r4, r0
   2fa34:	b	2f9d8 <__assert_fail@plt+0x1cd34>
   2fa38:	bl	1262c <__stack_chk_fail@plt>
   2fa3c:	strdeq	r5, [r4], -r8
   2fa40:	mov	r3, r0
   2fa44:	ldr	r0, [r0, #12]
   2fa48:	cmp	r0, #0
   2fa4c:	bne	2fa64 <__assert_fail@plt+0x1cdc0>
   2fa50:	cmp	r1, #0
   2fa54:	ldr	r0, [r3, #8]
   2fa58:	ldrne	r3, [r3]
   2fa5c:	strne	r3, [r1]
   2fa60:	bx	lr
   2fa64:	push	{r4, lr}
   2fa68:	bl	12b0c <gpg_err_set_errno@plt>
   2fa6c:	mov	r0, #0
   2fa70:	pop	{r4, pc}
   2fa74:	subs	r2, r1, #1
   2fa78:	bxeq	lr
   2fa7c:	bcc	2fc54 <__assert_fail@plt+0x1cfb0>
   2fa80:	cmp	r0, r1
   2fa84:	bls	2fc38 <__assert_fail@plt+0x1cf94>
   2fa88:	tst	r1, r2
   2fa8c:	beq	2fc44 <__assert_fail@plt+0x1cfa0>
   2fa90:	clz	r3, r0
   2fa94:	clz	r2, r1
   2fa98:	sub	r3, r2, r3
   2fa9c:	rsbs	r3, r3, #31
   2faa0:	addne	r3, r3, r3, lsl #1
   2faa4:	mov	r2, #0
   2faa8:	addne	pc, pc, r3, lsl #2
   2faac:	nop			; (mov r0, r0)
   2fab0:	cmp	r0, r1, lsl #31
   2fab4:	adc	r2, r2, r2
   2fab8:	subcs	r0, r0, r1, lsl #31
   2fabc:	cmp	r0, r1, lsl #30
   2fac0:	adc	r2, r2, r2
   2fac4:	subcs	r0, r0, r1, lsl #30
   2fac8:	cmp	r0, r1, lsl #29
   2facc:	adc	r2, r2, r2
   2fad0:	subcs	r0, r0, r1, lsl #29
   2fad4:	cmp	r0, r1, lsl #28
   2fad8:	adc	r2, r2, r2
   2fadc:	subcs	r0, r0, r1, lsl #28
   2fae0:	cmp	r0, r1, lsl #27
   2fae4:	adc	r2, r2, r2
   2fae8:	subcs	r0, r0, r1, lsl #27
   2faec:	cmp	r0, r1, lsl #26
   2faf0:	adc	r2, r2, r2
   2faf4:	subcs	r0, r0, r1, lsl #26
   2faf8:	cmp	r0, r1, lsl #25
   2fafc:	adc	r2, r2, r2
   2fb00:	subcs	r0, r0, r1, lsl #25
   2fb04:	cmp	r0, r1, lsl #24
   2fb08:	adc	r2, r2, r2
   2fb0c:	subcs	r0, r0, r1, lsl #24
   2fb10:	cmp	r0, r1, lsl #23
   2fb14:	adc	r2, r2, r2
   2fb18:	subcs	r0, r0, r1, lsl #23
   2fb1c:	cmp	r0, r1, lsl #22
   2fb20:	adc	r2, r2, r2
   2fb24:	subcs	r0, r0, r1, lsl #22
   2fb28:	cmp	r0, r1, lsl #21
   2fb2c:	adc	r2, r2, r2
   2fb30:	subcs	r0, r0, r1, lsl #21
   2fb34:	cmp	r0, r1, lsl #20
   2fb38:	adc	r2, r2, r2
   2fb3c:	subcs	r0, r0, r1, lsl #20
   2fb40:	cmp	r0, r1, lsl #19
   2fb44:	adc	r2, r2, r2
   2fb48:	subcs	r0, r0, r1, lsl #19
   2fb4c:	cmp	r0, r1, lsl #18
   2fb50:	adc	r2, r2, r2
   2fb54:	subcs	r0, r0, r1, lsl #18
   2fb58:	cmp	r0, r1, lsl #17
   2fb5c:	adc	r2, r2, r2
   2fb60:	subcs	r0, r0, r1, lsl #17
   2fb64:	cmp	r0, r1, lsl #16
   2fb68:	adc	r2, r2, r2
   2fb6c:	subcs	r0, r0, r1, lsl #16
   2fb70:	cmp	r0, r1, lsl #15
   2fb74:	adc	r2, r2, r2
   2fb78:	subcs	r0, r0, r1, lsl #15
   2fb7c:	cmp	r0, r1, lsl #14
   2fb80:	adc	r2, r2, r2
   2fb84:	subcs	r0, r0, r1, lsl #14
   2fb88:	cmp	r0, r1, lsl #13
   2fb8c:	adc	r2, r2, r2
   2fb90:	subcs	r0, r0, r1, lsl #13
   2fb94:	cmp	r0, r1, lsl #12
   2fb98:	adc	r2, r2, r2
   2fb9c:	subcs	r0, r0, r1, lsl #12
   2fba0:	cmp	r0, r1, lsl #11
   2fba4:	adc	r2, r2, r2
   2fba8:	subcs	r0, r0, r1, lsl #11
   2fbac:	cmp	r0, r1, lsl #10
   2fbb0:	adc	r2, r2, r2
   2fbb4:	subcs	r0, r0, r1, lsl #10
   2fbb8:	cmp	r0, r1, lsl #9
   2fbbc:	adc	r2, r2, r2
   2fbc0:	subcs	r0, r0, r1, lsl #9
   2fbc4:	cmp	r0, r1, lsl #8
   2fbc8:	adc	r2, r2, r2
   2fbcc:	subcs	r0, r0, r1, lsl #8
   2fbd0:	cmp	r0, r1, lsl #7
   2fbd4:	adc	r2, r2, r2
   2fbd8:	subcs	r0, r0, r1, lsl #7
   2fbdc:	cmp	r0, r1, lsl #6
   2fbe0:	adc	r2, r2, r2
   2fbe4:	subcs	r0, r0, r1, lsl #6
   2fbe8:	cmp	r0, r1, lsl #5
   2fbec:	adc	r2, r2, r2
   2fbf0:	subcs	r0, r0, r1, lsl #5
   2fbf4:	cmp	r0, r1, lsl #4
   2fbf8:	adc	r2, r2, r2
   2fbfc:	subcs	r0, r0, r1, lsl #4
   2fc00:	cmp	r0, r1, lsl #3
   2fc04:	adc	r2, r2, r2
   2fc08:	subcs	r0, r0, r1, lsl #3
   2fc0c:	cmp	r0, r1, lsl #2
   2fc10:	adc	r2, r2, r2
   2fc14:	subcs	r0, r0, r1, lsl #2
   2fc18:	cmp	r0, r1, lsl #1
   2fc1c:	adc	r2, r2, r2
   2fc20:	subcs	r0, r0, r1, lsl #1
   2fc24:	cmp	r0, r1
   2fc28:	adc	r2, r2, r2
   2fc2c:	subcs	r0, r0, r1
   2fc30:	mov	r0, r2
   2fc34:	bx	lr
   2fc38:	moveq	r0, #1
   2fc3c:	movne	r0, #0
   2fc40:	bx	lr
   2fc44:	clz	r2, r1
   2fc48:	rsb	r2, r2, #31
   2fc4c:	lsr	r0, r0, r2
   2fc50:	bx	lr
   2fc54:	cmp	r0, #0
   2fc58:	mvnne	r0, #0
   2fc5c:	b	2ffd0 <__assert_fail@plt+0x1d32c>
   2fc60:	cmp	r1, #0
   2fc64:	beq	2fc54 <__assert_fail@plt+0x1cfb0>
   2fc68:	push	{r0, r1, lr}
   2fc6c:	bl	2fa74 <__assert_fail@plt+0x1cdd0>
   2fc70:	pop	{r1, r2, lr}
   2fc74:	mul	r3, r2, r0
   2fc78:	sub	r1, r1, r3
   2fc7c:	bx	lr
   2fc80:	cmp	r1, #0
   2fc84:	beq	2fe90 <__assert_fail@plt+0x1d1ec>
   2fc88:	eor	ip, r0, r1
   2fc8c:	rsbmi	r1, r1, #0
   2fc90:	subs	r2, r1, #1
   2fc94:	beq	2fe5c <__assert_fail@plt+0x1d1b8>
   2fc98:	movs	r3, r0
   2fc9c:	rsbmi	r3, r0, #0
   2fca0:	cmp	r3, r1
   2fca4:	bls	2fe68 <__assert_fail@plt+0x1d1c4>
   2fca8:	tst	r1, r2
   2fcac:	beq	2fe78 <__assert_fail@plt+0x1d1d4>
   2fcb0:	clz	r2, r3
   2fcb4:	clz	r0, r1
   2fcb8:	sub	r2, r0, r2
   2fcbc:	rsbs	r2, r2, #31
   2fcc0:	addne	r2, r2, r2, lsl #1
   2fcc4:	mov	r0, #0
   2fcc8:	addne	pc, pc, r2, lsl #2
   2fccc:	nop			; (mov r0, r0)
   2fcd0:	cmp	r3, r1, lsl #31
   2fcd4:	adc	r0, r0, r0
   2fcd8:	subcs	r3, r3, r1, lsl #31
   2fcdc:	cmp	r3, r1, lsl #30
   2fce0:	adc	r0, r0, r0
   2fce4:	subcs	r3, r3, r1, lsl #30
   2fce8:	cmp	r3, r1, lsl #29
   2fcec:	adc	r0, r0, r0
   2fcf0:	subcs	r3, r3, r1, lsl #29
   2fcf4:	cmp	r3, r1, lsl #28
   2fcf8:	adc	r0, r0, r0
   2fcfc:	subcs	r3, r3, r1, lsl #28
   2fd00:	cmp	r3, r1, lsl #27
   2fd04:	adc	r0, r0, r0
   2fd08:	subcs	r3, r3, r1, lsl #27
   2fd0c:	cmp	r3, r1, lsl #26
   2fd10:	adc	r0, r0, r0
   2fd14:	subcs	r3, r3, r1, lsl #26
   2fd18:	cmp	r3, r1, lsl #25
   2fd1c:	adc	r0, r0, r0
   2fd20:	subcs	r3, r3, r1, lsl #25
   2fd24:	cmp	r3, r1, lsl #24
   2fd28:	adc	r0, r0, r0
   2fd2c:	subcs	r3, r3, r1, lsl #24
   2fd30:	cmp	r3, r1, lsl #23
   2fd34:	adc	r0, r0, r0
   2fd38:	subcs	r3, r3, r1, lsl #23
   2fd3c:	cmp	r3, r1, lsl #22
   2fd40:	adc	r0, r0, r0
   2fd44:	subcs	r3, r3, r1, lsl #22
   2fd48:	cmp	r3, r1, lsl #21
   2fd4c:	adc	r0, r0, r0
   2fd50:	subcs	r3, r3, r1, lsl #21
   2fd54:	cmp	r3, r1, lsl #20
   2fd58:	adc	r0, r0, r0
   2fd5c:	subcs	r3, r3, r1, lsl #20
   2fd60:	cmp	r3, r1, lsl #19
   2fd64:	adc	r0, r0, r0
   2fd68:	subcs	r3, r3, r1, lsl #19
   2fd6c:	cmp	r3, r1, lsl #18
   2fd70:	adc	r0, r0, r0
   2fd74:	subcs	r3, r3, r1, lsl #18
   2fd78:	cmp	r3, r1, lsl #17
   2fd7c:	adc	r0, r0, r0
   2fd80:	subcs	r3, r3, r1, lsl #17
   2fd84:	cmp	r3, r1, lsl #16
   2fd88:	adc	r0, r0, r0
   2fd8c:	subcs	r3, r3, r1, lsl #16
   2fd90:	cmp	r3, r1, lsl #15
   2fd94:	adc	r0, r0, r0
   2fd98:	subcs	r3, r3, r1, lsl #15
   2fd9c:	cmp	r3, r1, lsl #14
   2fda0:	adc	r0, r0, r0
   2fda4:	subcs	r3, r3, r1, lsl #14
   2fda8:	cmp	r3, r1, lsl #13
   2fdac:	adc	r0, r0, r0
   2fdb0:	subcs	r3, r3, r1, lsl #13
   2fdb4:	cmp	r3, r1, lsl #12
   2fdb8:	adc	r0, r0, r0
   2fdbc:	subcs	r3, r3, r1, lsl #12
   2fdc0:	cmp	r3, r1, lsl #11
   2fdc4:	adc	r0, r0, r0
   2fdc8:	subcs	r3, r3, r1, lsl #11
   2fdcc:	cmp	r3, r1, lsl #10
   2fdd0:	adc	r0, r0, r0
   2fdd4:	subcs	r3, r3, r1, lsl #10
   2fdd8:	cmp	r3, r1, lsl #9
   2fddc:	adc	r0, r0, r0
   2fde0:	subcs	r3, r3, r1, lsl #9
   2fde4:	cmp	r3, r1, lsl #8
   2fde8:	adc	r0, r0, r0
   2fdec:	subcs	r3, r3, r1, lsl #8
   2fdf0:	cmp	r3, r1, lsl #7
   2fdf4:	adc	r0, r0, r0
   2fdf8:	subcs	r3, r3, r1, lsl #7
   2fdfc:	cmp	r3, r1, lsl #6
   2fe00:	adc	r0, r0, r0
   2fe04:	subcs	r3, r3, r1, lsl #6
   2fe08:	cmp	r3, r1, lsl #5
   2fe0c:	adc	r0, r0, r0
   2fe10:	subcs	r3, r3, r1, lsl #5
   2fe14:	cmp	r3, r1, lsl #4
   2fe18:	adc	r0, r0, r0
   2fe1c:	subcs	r3, r3, r1, lsl #4
   2fe20:	cmp	r3, r1, lsl #3
   2fe24:	adc	r0, r0, r0
   2fe28:	subcs	r3, r3, r1, lsl #3
   2fe2c:	cmp	r3, r1, lsl #2
   2fe30:	adc	r0, r0, r0
   2fe34:	subcs	r3, r3, r1, lsl #2
   2fe38:	cmp	r3, r1, lsl #1
   2fe3c:	adc	r0, r0, r0
   2fe40:	subcs	r3, r3, r1, lsl #1
   2fe44:	cmp	r3, r1
   2fe48:	adc	r0, r0, r0
   2fe4c:	subcs	r3, r3, r1
   2fe50:	cmp	ip, #0
   2fe54:	rsbmi	r0, r0, #0
   2fe58:	bx	lr
   2fe5c:	teq	ip, r0
   2fe60:	rsbmi	r0, r0, #0
   2fe64:	bx	lr
   2fe68:	movcc	r0, #0
   2fe6c:	asreq	r0, ip, #31
   2fe70:	orreq	r0, r0, #1
   2fe74:	bx	lr
   2fe78:	clz	r2, r1
   2fe7c:	rsb	r2, r2, #31
   2fe80:	cmp	ip, #0
   2fe84:	lsr	r0, r3, r2
   2fe88:	rsbmi	r0, r0, #0
   2fe8c:	bx	lr
   2fe90:	cmp	r0, #0
   2fe94:	mvngt	r0, #-2147483648	; 0x80000000
   2fe98:	movlt	r0, #-2147483648	; 0x80000000
   2fe9c:	b	2ffd0 <__assert_fail@plt+0x1d32c>
   2fea0:	cmp	r1, #0
   2fea4:	beq	2fe90 <__assert_fail@plt+0x1d1ec>
   2fea8:	push	{r0, r1, lr}
   2feac:	bl	2fc88 <__assert_fail@plt+0x1cfe4>
   2feb0:	pop	{r1, r2, lr}
   2feb4:	mul	r3, r2, r0
   2feb8:	sub	r1, r1, r3
   2febc:	bx	lr
   2fec0:	cmp	r3, #0
   2fec4:	cmpeq	r2, #0
   2fec8:	bne	2feec <__assert_fail@plt+0x1d248>
   2fecc:	cmp	r1, #0
   2fed0:	movlt	r1, #-2147483648	; 0x80000000
   2fed4:	movlt	r0, #0
   2fed8:	blt	2fee8 <__assert_fail@plt+0x1d244>
   2fedc:	cmpeq	r0, #0
   2fee0:	mvnne	r1, #-2147483648	; 0x80000000
   2fee4:	mvnne	r0, #0
   2fee8:	b	2ffd0 <__assert_fail@plt+0x1d32c>
   2feec:	sub	sp, sp, #8
   2fef0:	push	{sp, lr}
   2fef4:	cmp	r1, #0
   2fef8:	blt	2ff18 <__assert_fail@plt+0x1d274>
   2fefc:	cmp	r3, #0
   2ff00:	blt	2ff4c <__assert_fail@plt+0x1d2a8>
   2ff04:	bl	2ffe0 <__assert_fail@plt+0x1d33c>
   2ff08:	ldr	lr, [sp, #4]
   2ff0c:	add	sp, sp, #8
   2ff10:	pop	{r2, r3}
   2ff14:	bx	lr
   2ff18:	rsbs	r0, r0, #0
   2ff1c:	sbc	r1, r1, r1, lsl #1
   2ff20:	cmp	r3, #0
   2ff24:	blt	2ff70 <__assert_fail@plt+0x1d2cc>
   2ff28:	bl	2ffe0 <__assert_fail@plt+0x1d33c>
   2ff2c:	ldr	lr, [sp, #4]
   2ff30:	add	sp, sp, #8
   2ff34:	pop	{r2, r3}
   2ff38:	rsbs	r0, r0, #0
   2ff3c:	sbc	r1, r1, r1, lsl #1
   2ff40:	rsbs	r2, r2, #0
   2ff44:	sbc	r3, r3, r3, lsl #1
   2ff48:	bx	lr
   2ff4c:	rsbs	r2, r2, #0
   2ff50:	sbc	r3, r3, r3, lsl #1
   2ff54:	bl	2ffe0 <__assert_fail@plt+0x1d33c>
   2ff58:	ldr	lr, [sp, #4]
   2ff5c:	add	sp, sp, #8
   2ff60:	pop	{r2, r3}
   2ff64:	rsbs	r0, r0, #0
   2ff68:	sbc	r1, r1, r1, lsl #1
   2ff6c:	bx	lr
   2ff70:	rsbs	r2, r2, #0
   2ff74:	sbc	r3, r3, r3, lsl #1
   2ff78:	bl	2ffe0 <__assert_fail@plt+0x1d33c>
   2ff7c:	ldr	lr, [sp, #4]
   2ff80:	add	sp, sp, #8
   2ff84:	pop	{r2, r3}
   2ff88:	rsbs	r2, r2, #0
   2ff8c:	sbc	r3, r3, r3, lsl #1
   2ff90:	bx	lr
   2ff94:	cmp	r3, #0
   2ff98:	cmpeq	r2, #0
   2ff9c:	bne	2ffb4 <__assert_fail@plt+0x1d310>
   2ffa0:	cmp	r1, #0
   2ffa4:	cmpeq	r0, #0
   2ffa8:	mvnne	r1, #0
   2ffac:	mvnne	r0, #0
   2ffb0:	b	2ffd0 <__assert_fail@plt+0x1d32c>
   2ffb4:	sub	sp, sp, #8
   2ffb8:	push	{sp, lr}
   2ffbc:	bl	2ffe0 <__assert_fail@plt+0x1d33c>
   2ffc0:	ldr	lr, [sp, #4]
   2ffc4:	add	sp, sp, #8
   2ffc8:	pop	{r2, r3}
   2ffcc:	bx	lr
   2ffd0:	push	{r1, lr}
   2ffd4:	mov	r0, #8
   2ffd8:	bl	12440 <raise@plt>
   2ffdc:	pop	{r1, pc}
   2ffe0:	cmp	r1, r3
   2ffe4:	cmpeq	r0, r2
   2ffe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ffec:	mov	r4, r0
   2fff0:	movcc	r0, #0
   2fff4:	mov	r5, r1
   2fff8:	ldr	lr, [sp, #36]	; 0x24
   2fffc:	movcc	r1, r0
   30000:	bcc	300fc <__assert_fail@plt+0x1d458>
   30004:	cmp	r3, #0
   30008:	clzeq	ip, r2
   3000c:	clzne	ip, r3
   30010:	addeq	ip, ip, #32
   30014:	cmp	r5, #0
   30018:	clzeq	r1, r4
   3001c:	addeq	r1, r1, #32
   30020:	clzne	r1, r5
   30024:	sub	ip, ip, r1
   30028:	sub	sl, ip, #32
   3002c:	lsl	r9, r3, ip
   30030:	rsb	fp, ip, #32
   30034:	orr	r9, r9, r2, lsl sl
   30038:	orr	r9, r9, r2, lsr fp
   3003c:	lsl	r8, r2, ip
   30040:	cmp	r5, r9
   30044:	cmpeq	r4, r8
   30048:	movcc	r0, #0
   3004c:	movcc	r1, r0
   30050:	bcc	3006c <__assert_fail@plt+0x1d3c8>
   30054:	mov	r0, #1
   30058:	subs	r4, r4, r8
   3005c:	lsl	r1, r0, sl
   30060:	orr	r1, r1, r0, lsr fp
   30064:	lsl	r0, r0, ip
   30068:	sbc	r5, r5, r9
   3006c:	cmp	ip, #0
   30070:	beq	300fc <__assert_fail@plt+0x1d458>
   30074:	lsr	r6, r8, #1
   30078:	orr	r6, r6, r9, lsl #31
   3007c:	lsr	r7, r9, #1
   30080:	mov	r2, ip
   30084:	b	300a8 <__assert_fail@plt+0x1d404>
   30088:	subs	r3, r4, r6
   3008c:	sbc	r8, r5, r7
   30090:	adds	r3, r3, r3
   30094:	adc	r8, r8, r8
   30098:	adds	r4, r3, #1
   3009c:	adc	r5, r8, #0
   300a0:	subs	r2, r2, #1
   300a4:	beq	300c4 <__assert_fail@plt+0x1d420>
   300a8:	cmp	r5, r7
   300ac:	cmpeq	r4, r6
   300b0:	bcs	30088 <__assert_fail@plt+0x1d3e4>
   300b4:	adds	r4, r4, r4
   300b8:	adc	r5, r5, r5
   300bc:	subs	r2, r2, #1
   300c0:	bne	300a8 <__assert_fail@plt+0x1d404>
   300c4:	lsr	r3, r4, ip
   300c8:	orr	r3, r3, r5, lsl fp
   300cc:	lsr	r2, r5, ip
   300d0:	orr	r3, r3, r5, lsr sl
   300d4:	adds	r0, r0, r4
   300d8:	mov	r4, r3
   300dc:	lsl	r3, r2, ip
   300e0:	orr	r3, r3, r4, lsl sl
   300e4:	lsl	ip, r4, ip
   300e8:	orr	r3, r3, r4, lsr fp
   300ec:	adc	r1, r1, r5
   300f0:	subs	r0, r0, ip
   300f4:	mov	r5, r2
   300f8:	sbc	r1, r1, r3
   300fc:	cmp	lr, #0
   30100:	strdne	r4, [lr]
   30104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30108:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3010c:	mov	r7, r0
   30110:	ldr	r6, [pc, #72]	; 30160 <__assert_fail@plt+0x1d4bc>
   30114:	ldr	r5, [pc, #72]	; 30164 <__assert_fail@plt+0x1d4c0>
   30118:	add	r6, pc, r6
   3011c:	add	r5, pc, r5
   30120:	sub	r6, r6, r5
   30124:	mov	r8, r1
   30128:	mov	r9, r2
   3012c:	bl	123f0 <gcry_xmalloc@plt-0x20>
   30130:	asrs	r6, r6, #2
   30134:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   30138:	mov	r4, #0
   3013c:	add	r4, r4, #1
   30140:	ldr	r3, [r5], #4
   30144:	mov	r2, r9
   30148:	mov	r1, r8
   3014c:	mov	r0, r7
   30150:	blx	r3
   30154:	cmp	r6, r4
   30158:	bne	3013c <__assert_fail@plt+0x1d498>
   3015c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   30160:	ldrdeq	r5, [r1], -r4
   30164:	andeq	r5, r1, ip, asr #19
   30168:	bx	lr
   3016c:	ldr	r3, [pc, #12]	; 30180 <__assert_fail@plt+0x1d4dc>
   30170:	mov	r1, #0
   30174:	add	r3, pc, r3
   30178:	ldr	r2, [r3]
   3017c:	b	12998 <__cxa_atexit@plt>
   30180:	andeq	r5, r1, r8, lsl #29

Disassembly of section .fini:

00030184 <.fini>:
   30184:	push	{r3, lr}
   30188:	pop	{r3, pc}
