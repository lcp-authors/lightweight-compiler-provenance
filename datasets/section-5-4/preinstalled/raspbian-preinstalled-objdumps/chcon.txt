
raspbian-preinstalled/chcon:     file format elf32-littlearm


Disassembly of section .init:

000112e0 <.init>:
   112e0:	push	{r3, lr}
   112e4:	bl	124d8 <__assert_fail@plt+0xe0c>
   112e8:	pop	{r3, pc}

Disassembly of section .plt:

000112ec <fstatfs64@plt-0x14>:
   112ec:	push	{lr}		; (str lr, [sp, #-4]!)
   112f0:	ldr	lr, [pc, #4]	; 112fc <fstatfs64@plt-0x4>
   112f4:	add	lr, pc, lr
   112f8:	ldr	pc, [lr, #8]!
   112fc:	andeq	sl, r1, r4, lsl #26

00011300 <fstatfs64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3332]!	; 0xd04

0001130c <calloc@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3324]!	; 0xcfc

00011318 <fputs_unlocked@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3316]!	; 0xcf4

00011324 <raise@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3308]!	; 0xcec

00011330 <strcmp@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3300]!	; 0xce4

0001133c <fflush@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #106496	; 0x1a000
   11344:	ldr	pc, [ip, #3292]!	; 0xcdc

00011348 <lsetfilecon@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #106496	; 0x1a000
   11350:	ldr	pc, [ip, #3284]!	; 0xcd4

00011354 <memmove@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3276]!	; 0xccc

00011360 <free@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3268]!	; 0xcc4

0001136c <_exit@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3260]!	; 0xcbc

00011378 <memcpy@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3252]!	; 0xcb4

00011384 <mbsinit@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3244]!	; 0xcac

00011390 <context_new@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3236]!	; 0xca4

0001139c <memcmp@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3228]!	; 0xc9c

000113a8 <context_role_set@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3220]!	; 0xc94

000113b4 <dcgettext@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3212]!	; 0xc8c

000113c0 <__stack_chk_fail@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3204]!	; 0xc84

000113cc <context_type_set@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3196]!	; 0xc7c

000113d8 <realloc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3188]!	; 0xc74

000113e4 <fgetfilecon@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3180]!	; 0xc6c

000113f0 <textdomain@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3172]!	; 0xc64

000113fc <chdir@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3164]!	; 0xc5c

00011408 <__fxstatat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3156]!	; 0xc54

00011414 <iswprint@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3148]!	; 0xc4c

00011420 <__fxstat64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3140]!	; 0xc44

0001142c <fwrite@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3132]!	; 0xc3c

00011438 <lseek64@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3124]!	; 0xc34

00011444 <__ctype_get_mb_cur_max@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3116]!	; 0xc2c

00011450 <strcpy@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3108]!	; 0xc24

0001145c <__fpending@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3100]!	; 0xc1c

00011468 <mbrtowc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3092]!	; 0xc14

00011474 <error@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011480 <security_check_context@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3076]!	; 0xc04

0001148c <open64@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3068]!	; 0xbfc

00011498 <lgetfilecon@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3060]!	; 0xbf4

000114a4 <malloc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3052]!	; 0xbec

000114b0 <__libc_start_main@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3044]!	; 0xbe4

000114bc <__freading@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #3036]!	; 0xbdc

000114c8 <__gmon_start__@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #3028]!	; 0xbd4

000114d4 <context_free@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #3020]!	; 0xbcc

000114e0 <getopt_long@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #3012]!	; 0xbc4

000114ec <__ctype_b_loc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #3004]!	; 0xbbc

000114f8 <getcwd@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2996]!	; 0xbb4

00011504 <exit@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2988]!	; 0xbac

00011510 <context_user_set@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2980]!	; 0xba4

0001151c <getfilecon@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2972]!	; 0xb9c

00011528 <strlen@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2964]!	; 0xb94

00011534 <openat64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2956]!	; 0xb8c

00011540 <memrchr@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2948]!	; 0xb84

0001154c <__errno_location@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2940]!	; 0xb7c

00011558 <__sprintf_chk@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2932]!	; 0xb74

00011564 <__cxa_atexit@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011570 <memset@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2916]!	; 0xb64

0001157c <__printf_chk@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2908]!	; 0xb5c

00011588 <fileno@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2900]!	; 0xb54

00011594 <__fprintf_chk@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2892]!	; 0xb4c

000115a0 <memchr@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2884]!	; 0xb44

000115ac <setfilecon@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2876]!	; 0xb3c

000115b8 <access@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2868]!	; 0xb34

000115c4 <fclose@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2860]!	; 0xb2c

000115d0 <fseeko64@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2852]!	; 0xb24

000115dc <fcntl64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2844]!	; 0xb1c

000115e8 <setlocale@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2836]!	; 0xb14

000115f4 <strrchr@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2828]!	; 0xb0c

00011600 <nl_langinfo@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2820]!	; 0xb04

0001160c <readdir64@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2812]!	; 0xafc

00011618 <fdopendir@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2804]!	; 0xaf4

00011624 <dirfd@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2796]!	; 0xaec

00011630 <fchdir@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2788]!	; 0xae4

0001163c <qsort@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2780]!	; 0xadc

00011648 <freecon@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2772]!	; 0xad4

00011654 <bindtextdomain@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2764]!	; 0xacc

00011660 <context_range_set@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2756]!	; 0xac4

0001166c <context_str@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2748]!	; 0xabc

00011678 <__xstat64@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2740]!	; 0xab4

00011684 <strncmp@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2732]!	; 0xaac

00011690 <abort@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2724]!	; 0xaa4

0001169c <close@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2716]!	; 0xa9c

000116a8 <__lxstat64@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2708]!	; 0xa94

000116b4 <closedir@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2700]!	; 0xa8c

000116c0 <strspn@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2692]!	; 0xa84

000116cc <__assert_fail@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2684]!	; 0xa7c

Disassembly of section .text:

000116d8 <fts_open@@Base-0x53b4>:
   116d8:	ldr	r3, [pc, #3332]	; 123e4 <__assert_fail@plt+0xd18>
   116dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e0:	sub	sp, sp, #44	; 0x2c
   116e4:	ldr	r3, [r3]
   116e8:	mov	r8, r0
   116ec:	ldr	r0, [r1]
   116f0:	str	r3, [sp, #36]	; 0x24
   116f4:	mov	r7, r1
   116f8:	bl	12a4c <__assert_fail@plt+0x1380>
   116fc:	ldr	r1, [pc, #3300]	; 123e8 <__assert_fail@plt+0xd1c>
   11700:	mov	r0, #6
   11704:	bl	115e8 <setlocale@plt>
   11708:	ldr	r1, [pc, #3292]	; 123ec <__assert_fail@plt+0xd20>
   1170c:	ldr	r0, [pc, #3292]	; 123f0 <__assert_fail@plt+0xd24>
   11710:	bl	11654 <bindtextdomain@plt>
   11714:	ldr	sl, [pc, #3288]	; 123f4 <__assert_fail@plt+0xd28>
   11718:	ldr	r0, [pc, #3280]	; 123f0 <__assert_fail@plt+0xd24>
   1171c:	ldr	r9, [pc, #3284]	; 123f8 <__assert_fail@plt+0xd2c>
   11720:	ldr	fp, [pc, #3284]	; 123fc <__assert_fail@plt+0xd30>
   11724:	bl	113f0 <textdomain@plt>
   11728:	mvn	r5, #0
   1172c:	mov	r3, #0
   11730:	mov	r6, #16
   11734:	mov	r4, r3
   11738:	ldr	r0, [pc, #3264]	; 12400 <__assert_fail@plt+0xd34>
   1173c:	str	r3, [sp, #24]
   11740:	bl	1a1ac <fts_children@@Base+0x2a88>
   11744:	str	r4, [sp, #20]
   11748:	str	r4, [sp, #16]
   1174c:	mov	r4, #0
   11750:	str	r4, [sp]
   11754:	mov	r3, sl
   11758:	mov	r2, r9
   1175c:	mov	r1, r7
   11760:	mov	r0, r8
   11764:	bl	114e0 <getopt_long@plt>
   11768:	cmn	r0, #1
   1176c:	beq	1192c <__assert_fail@plt+0x260>
   11770:	cmp	r0, #108	; 0x6c
   11774:	beq	118ac <__assert_fail@plt+0x1e0>
   11778:	ble	117ac <__assert_fail@plt+0xe0>
   1177c:	cmp	r0, #118	; 0x76
   11780:	beq	1189c <__assert_fail@plt+0x1d0>
   11784:	ble	11830 <__assert_fail@plt+0x164>
   11788:	cmp	r0, fp
   1178c:	beq	1188c <__assert_fail@plt+0x1c0>
   11790:	ble	11820 <__assert_fail@plt+0x154>
   11794:	ldr	r3, [pc, #3176]	; 12404 <__assert_fail@plt+0xd38>
   11798:	cmp	r0, r3
   1179c:	bne	117dc <__assert_fail@plt+0x110>
   117a0:	mov	r3, #1
   117a4:	str	r3, [sp, #16]
   117a8:	b	1174c <__assert_fail@plt+0x80>
   117ac:	cmp	r0, #76	; 0x4c
   117b0:	beq	11894 <__assert_fail@plt+0x1c8>
   117b4:	ble	11808 <__assert_fail@plt+0x13c>
   117b8:	cmp	r0, #82	; 0x52
   117bc:	beq	118c8 <__assert_fail@plt+0x1fc>
   117c0:	ble	117f8 <__assert_fail@plt+0x12c>
   117c4:	cmp	r0, #102	; 0x66
   117c8:	beq	1174c <__assert_fail@plt+0x80>
   117cc:	cmp	r0, #104	; 0x68
   117d0:	bne	11860 <__assert_fail@plt+0x194>
   117d4:	mov	r5, r4
   117d8:	b	1174c <__assert_fail@plt+0x80>
   117dc:	add	r3, r3, #1
   117e0:	cmp	r0, r3
   117e4:	bne	11860 <__assert_fail@plt+0x194>
   117e8:	ldr	r3, [pc, #3096]	; 12408 <__assert_fail@plt+0xd3c>
   117ec:	ldr	r3, [r3]
   117f0:	str	r3, [sp, #24]
   117f4:	b	1174c <__assert_fail@plt+0x80>
   117f8:	cmp	r0, #80	; 0x50
   117fc:	bne	11860 <__assert_fail@plt+0x194>
   11800:	mov	r6, #16
   11804:	b	1174c <__assert_fail@plt+0x80>
   11808:	cmn	r0, #2
   1180c:	beq	1235c <__assert_fail@plt+0xc90>
   11810:	cmp	r0, #72	; 0x48
   11814:	bne	11858 <__assert_fail@plt+0x18c>
   11818:	mov	r6, #17
   1181c:	b	1174c <__assert_fail@plt+0x80>
   11820:	cmp	r0, #256	; 0x100
   11824:	bne	11860 <__assert_fail@plt+0x194>
   11828:	mov	r5, #1
   1182c:	b	1174c <__assert_fail@plt+0x80>
   11830:	cmp	r0, #116	; 0x74
   11834:	beq	118d8 <__assert_fail@plt+0x20c>
   11838:	ble	11868 <__assert_fail@plt+0x19c>
   1183c:	ldr	r3, [pc, #3012]	; 12408 <__assert_fail@plt+0xd3c>
   11840:	mov	r2, #1
   11844:	str	r2, [sp, #20]
   11848:	ldr	r2, [pc, #3004]	; 1240c <__assert_fail@plt+0xd40>
   1184c:	ldr	r3, [r3]
   11850:	str	r3, [r2, #4]
   11854:	b	1174c <__assert_fail@plt+0x80>
   11858:	cmn	r0, #3
   1185c:	beq	118f4 <__assert_fail@plt+0x228>
   11860:	mov	r0, #1
   11864:	bl	1258c <__assert_fail@plt+0xec0>
   11868:	cmp	r0, #114	; 0x72
   1186c:	bne	11860 <__assert_fail@plt+0x194>
   11870:	ldr	r3, [pc, #2960]	; 12408 <__assert_fail@plt+0xd3c>
   11874:	mov	r2, #1
   11878:	str	r2, [sp, #20]
   1187c:	ldr	r2, [pc, #2952]	; 1240c <__assert_fail@plt+0xd40>
   11880:	ldr	r3, [r3]
   11884:	str	r3, [r2, #8]
   11888:	b	1174c <__assert_fail@plt+0x80>
   1188c:	str	r4, [sp, #16]
   11890:	b	1174c <__assert_fail@plt+0x80>
   11894:	mov	r6, #2
   11898:	b	1174c <__assert_fail@plt+0x80>
   1189c:	ldr	r2, [pc, #2920]	; 1240c <__assert_fail@plt+0xd40>
   118a0:	mov	r3, #1
   118a4:	strb	r3, [r2, #1]
   118a8:	b	1174c <__assert_fail@plt+0x80>
   118ac:	ldr	r3, [pc, #2900]	; 12408 <__assert_fail@plt+0xd3c>
   118b0:	mov	r2, #1
   118b4:	str	r2, [sp, #20]
   118b8:	ldr	r2, [pc, #2892]	; 1240c <__assert_fail@plt+0xd40>
   118bc:	ldr	r3, [r3]
   118c0:	str	r3, [r2, #16]
   118c4:	b	1174c <__assert_fail@plt+0x80>
   118c8:	ldr	r2, [pc, #2876]	; 1240c <__assert_fail@plt+0xd40>
   118cc:	mov	r3, #1
   118d0:	strb	r3, [r2]
   118d4:	b	1174c <__assert_fail@plt+0x80>
   118d8:	ldr	r3, [pc, #2856]	; 12408 <__assert_fail@plt+0xd3c>
   118dc:	mov	r2, #1
   118e0:	str	r2, [sp, #20]
   118e4:	ldr	r2, [pc, #2848]	; 1240c <__assert_fail@plt+0xd40>
   118e8:	ldr	r3, [r3]
   118ec:	str	r3, [r2, #12]
   118f0:	b	1174c <__assert_fail@plt+0x80>
   118f4:	ldr	r3, [pc, #2836]	; 12410 <__assert_fail@plt+0xd44>
   118f8:	ldr	r0, [pc, #2836]	; 12414 <__assert_fail@plt+0xd48>
   118fc:	ldr	r1, [pc, #2836]	; 12418 <__assert_fail@plt+0xd4c>
   11900:	ldr	r2, [pc, #2836]	; 1241c <__assert_fail@plt+0xd50>
   11904:	str	r4, [sp, #8]
   11908:	ldr	r0, [r0]
   1190c:	ldr	r3, [r3]
   11910:	str	r1, [sp, #4]
   11914:	str	r2, [sp]
   11918:	ldr	r1, [pc, #2816]	; 12420 <__assert_fail@plt+0xd54>
   1191c:	ldr	r2, [pc, #2816]	; 12424 <__assert_fail@plt+0xd58>
   11920:	bl	15184 <__assert_fail@plt+0x3ab8>
   11924:	mov	r0, r4
   11928:	bl	11504 <exit@plt>
   1192c:	ldr	r9, [pc, #2776]	; 1240c <__assert_fail@plt+0xd40>
   11930:	ldrb	r3, [r9]
   11934:	cmp	r3, r4
   11938:	bne	11d3c <__assert_fail@plt+0x670>
   1193c:	adds	r5, r5, #0
   11940:	mov	r6, #16
   11944:	movne	r5, #1
   11948:	strb	r5, [r9, #20]
   1194c:	ldr	r3, [sp, #24]
   11950:	ldr	r4, [pc, #2768]	; 12428 <__assert_fail@plt+0xd5c>
   11954:	cmp	r3, #0
   11958:	ldr	r5, [sp, #20]
   1195c:	ldr	r3, [r4]
   11960:	movne	r5, #1
   11964:	cmp	r5, #0
   11968:	sub	r2, r8, r3
   1196c:	beq	11f1c <__assert_fail@plt+0x850>
   11970:	cmp	r2, #0
   11974:	ble	11f24 <__assert_fail@plt+0x858>
   11978:	ldr	r0, [sp, #24]
   1197c:	cmp	r0, #0
   11980:	beq	11ff0 <__assert_fail@plt+0x924>
   11984:	mov	r5, #0
   11988:	add	r1, sp, #32
   1198c:	str	r5, [sp, #32]
   11990:	bl	178e0 <fts_children@@Base+0x1bc>
   11994:	cmp	r0, r5
   11998:	blt	1238c <__assert_fail@plt+0xcc0>
   1199c:	ldr	r2, [sp, #20]
   119a0:	ldr	r3, [sp, #32]
   119a4:	cmp	r2, #0
   119a8:	str	r3, [r9, #24]
   119ac:	bne	12368 <__assert_fail@plt+0xc9c>
   119b0:	ldrb	r5, [r9]
   119b4:	ldr	r3, [sp, #16]
   119b8:	and	r3, r3, r5
   119bc:	mov	r5, r3
   119c0:	bl	1154c <__errno_location@plt>
   119c4:	cmp	r5, #0
   119c8:	streq	r5, [r9, #48]	; 0x30
   119cc:	str	r0, [sp, #16]
   119d0:	bne	12114 <__assert_fail@plt+0xa48>
   119d4:	ldr	r0, [r4]
   119d8:	orr	r1, r6, #8
   119dc:	mov	r2, #0
   119e0:	add	r0, r7, r0, lsl #2
   119e4:	bl	15510 <__assert_fail@plt+0x3e44>
   119e8:	mov	r8, #1
   119ec:	mov	r7, r0
   119f0:	mov	r6, r0
   119f4:	mov	r0, r7
   119f8:	bl	16fa8 <fts_read@@Base>
   119fc:	subs	r5, r0, #0
   11a00:	beq	11ab8 <__assert_fail@plt+0x3ec>
   11a04:	ldrh	r3, [r5, #60]	; 0x3c
   11a08:	ldr	r4, [r5, #28]
   11a0c:	sub	r3, r3, #1
   11a10:	cmp	r3, #9
   11a14:	ldrls	pc, [pc, r3, lsl #2]
   11a18:	b	11b4c <__assert_fail@plt+0x480>
   11a1c:	andeq	r1, r1, r8, ror ip
   11a20:	andeq	r1, r1, r8, lsr fp
   11a24:	andeq	r1, r1, ip, asr #22
   11a28:	andeq	r1, r1, ip, lsr #22
   11a2c:	andeq	r1, r1, ip, asr #22
   11a30:	andeq	r1, r1, r8, asr #23
   11a34:	strdeq	r1, [r1], -ip
   11a38:	andeq	r1, r1, ip, asr #22
   11a3c:	andeq	r1, r1, ip, asr #22
   11a40:	andeq	r1, r1, r4, asr #20
   11a44:	ldr	r3, [r5, #48]	; 0x30
   11a48:	cmp	r3, #0
   11a4c:	bne	11a5c <__assert_fail@plt+0x390>
   11a50:	ldr	r3, [r5, #16]
   11a54:	cmp	r3, #0
   11a58:	beq	12150 <__assert_fail@plt+0xa84>
   11a5c:	ldr	r1, [pc, #2504]	; 1242c <__assert_fail@plt+0xd60>
   11a60:	mov	r2, #5
   11a64:	mov	r0, #0
   11a68:	ldr	r6, [r5, #32]
   11a6c:	bl	113b4 <dcgettext@plt>
   11a70:	mov	r1, r4
   11a74:	mov	fp, r0
   11a78:	mov	r0, #4
   11a7c:	bl	14a08 <__assert_fail@plt+0x333c>
   11a80:	mov	r2, fp
   11a84:	mov	r1, r6
   11a88:	mov	r3, r0
   11a8c:	mov	r0, #0
   11a90:	bl	11474 <error@plt>
   11a94:	mov	r6, #0
   11a98:	ldrb	r3, [r9]
   11a9c:	cmp	r3, #0
   11aa0:	beq	11d74 <__assert_fail@plt+0x6a8>
   11aa4:	mov	r0, r7
   11aa8:	bl	16fa8 <fts_read@@Base>
   11aac:	and	r8, r8, r6
   11ab0:	subs	r5, r0, #0
   11ab4:	bne	11a04 <__assert_fail@plt+0x338>
   11ab8:	ldr	r3, [sp, #16]
   11abc:	mov	r6, r7
   11ac0:	ldr	r4, [r3]
   11ac4:	cmp	r4, #0
   11ac8:	bne	11fcc <__assert_fail@plt+0x900>
   11acc:	mov	r0, r6
   11ad0:	bl	16e28 <fts_close@@Base>
   11ad4:	cmp	r0, #0
   11ad8:	bne	11f9c <__assert_fail@plt+0x8d0>
   11adc:	ldr	r3, [pc, #2304]	; 123e4 <__assert_fail@plt+0xd18>
   11ae0:	ldr	r2, [sp, #36]	; 0x24
   11ae4:	eor	r0, r8, #1
   11ae8:	ldr	r3, [r3]
   11aec:	cmp	r2, r3
   11af0:	bne	12364 <__assert_fail@plt+0xc98>
   11af4:	add	sp, sp, #44	; 0x2c
   11af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11afc:	mov	r2, r4
   11b00:	mov	r1, #3
   11b04:	mov	r0, #0
   11b08:	ldr	r6, [r5, #32]
   11b0c:	bl	14ae4 <__assert_fail@plt+0x3418>
   11b10:	mov	r1, r6
   11b14:	ldr	r2, [pc, #2324]	; 12430 <__assert_fail@plt+0xd64>
   11b18:	mov	r6, #0
   11b1c:	mov	r3, r0
   11b20:	mov	r0, #0
   11b24:	bl	11474 <error@plt>
   11b28:	b	11a98 <__assert_fail@plt+0x3cc>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #2300]	; 12434 <__assert_fail@plt+0xd68>
   11b34:	b	11a64 <__assert_fail@plt+0x398>
   11b38:	mov	r1, r5
   11b3c:	mov	r0, r7
   11b40:	bl	15558 <__assert_fail@plt+0x3e8c>
   11b44:	cmp	r0, #0
   11b48:	bne	120a8 <__assert_fail@plt+0x9dc>
   11b4c:	ldrb	r3, [r9, #1]
   11b50:	ldr	fp, [r5, #24]
   11b54:	cmp	r3, #0
   11b58:	bne	11d88 <__assert_fail@plt+0x6bc>
   11b5c:	ldr	sl, [r9, #24]
   11b60:	mov	r2, #0
   11b64:	cmp	sl, r2
   11b68:	ldr	r4, [r7, #32]
   11b6c:	str	r2, [sp, #32]
   11b70:	ldrb	r2, [r9, #20]
   11b74:	beq	11dbc <__assert_fail@plt+0x6f0>
   11b78:	cmp	r2, #0
   11b7c:	mov	r0, r4
   11b80:	mov	r2, sl
   11b84:	mov	r1, fp
   11b88:	beq	11ea0 <__assert_fail@plt+0x7d4>
   11b8c:	bl	17d60 <fts_children@@Base+0x63c>
   11b90:	mov	r6, r0
   11b94:	cmp	r6, #0
   11b98:	bne	11eac <__assert_fail@plt+0x7e0>
   11b9c:	ldr	r3, [r9, #24]
   11ba0:	cmp	r3, #0
   11ba4:	movne	r6, #1
   11ba8:	bne	11a98 <__assert_fail@plt+0x3cc>
   11bac:	ldr	r0, [sp, #28]
   11bb0:	bl	114d4 <context_free@plt>
   11bb4:	eor	r6, r6, #1
   11bb8:	ldr	r0, [sp, #32]
   11bbc:	bl	11648 <freecon@plt>
   11bc0:	and	r6, r6, #1
   11bc4:	b	11a98 <__assert_fail@plt+0x3cc>
   11bc8:	ldrb	r3, [r9]
   11bcc:	cmp	r3, #0
   11bd0:	moveq	r6, #1
   11bd4:	beq	11aa4 <__assert_fail@plt+0x3d8>
   11bd8:	ldr	ip, [r9, #48]	; 0x30
   11bdc:	cmp	ip, #0
   11be0:	beq	11b4c <__assert_fail@plt+0x480>
   11be4:	ldrd	r0, [r5, #168]	; 0xa8
   11be8:	ldrd	r2, [ip]
   11bec:	cmp	r1, r3
   11bf0:	cmpeq	r0, r2
   11bf4:	bne	11b4c <__assert_fail@plt+0x480>
   11bf8:	ldrd	r0, [r5, #72]	; 0x48
   11bfc:	ldrd	r2, [ip, #8]
   11c00:	cmp	r1, r3
   11c04:	cmpeq	r0, r2
   11c08:	bne	11b4c <__assert_fail@plt+0x480>
   11c0c:	ldr	r1, [pc, #2084]	; 12438 <__assert_fail@plt+0xd6c>
   11c10:	mov	r0, r4
   11c14:	bl	11330 <strcmp@plt>
   11c18:	mov	r2, #5
   11c1c:	subs	r6, r0, #0
   11c20:	bne	122bc <__assert_fail@plt+0xbf0>
   11c24:	ldr	r1, [pc, #2064]	; 1243c <__assert_fail@plt+0xd70>
   11c28:	bl	113b4 <dcgettext@plt>
   11c2c:	mov	r1, r4
   11c30:	mov	fp, r0
   11c34:	mov	r0, #4
   11c38:	bl	14a08 <__assert_fail@plt+0x333c>
   11c3c:	mov	r2, fp
   11c40:	mov	r1, r6
   11c44:	mov	r3, r0
   11c48:	mov	r0, r6
   11c4c:	bl	11474 <error@plt>
   11c50:	mov	r2, #5
   11c54:	ldr	r1, [pc, #2020]	; 12440 <__assert_fail@plt+0xd74>
   11c58:	mov	r0, #0
   11c5c:	bl	113b4 <dcgettext@plt>
   11c60:	mov	r1, #0
   11c64:	mov	r6, #0
   11c68:	mov	r2, r0
   11c6c:	mov	r0, r1
   11c70:	bl	11474 <error@plt>
   11c74:	b	11a98 <__assert_fail@plt+0x3cc>
   11c78:	ldrb	r6, [r9]
   11c7c:	cmp	r6, #0
   11c80:	beq	11b4c <__assert_fail@plt+0x480>
   11c84:	ldr	ip, [r9, #48]	; 0x30
   11c88:	cmp	ip, #0
   11c8c:	beq	11aa4 <__assert_fail@plt+0x3d8>
   11c90:	ldrd	r0, [r5, #168]	; 0xa8
   11c94:	ldrd	r2, [ip]
   11c98:	cmp	r1, r3
   11c9c:	cmpeq	r0, r2
   11ca0:	bne	11aa4 <__assert_fail@plt+0x3d8>
   11ca4:	ldrd	r0, [r5, #72]	; 0x48
   11ca8:	ldrd	r2, [ip, #8]
   11cac:	cmp	r1, r3
   11cb0:	cmpeq	r0, r2
   11cb4:	bne	11aa4 <__assert_fail@plt+0x3d8>
   11cb8:	ldr	r1, [pc, #1912]	; 12438 <__assert_fail@plt+0xd6c>
   11cbc:	mov	r0, r4
   11cc0:	bl	11330 <strcmp@plt>
   11cc4:	mov	r2, #5
   11cc8:	subs	r6, r0, #0
   11ccc:	bne	1230c <__assert_fail@plt+0xc40>
   11cd0:	ldr	r1, [pc, #1892]	; 1243c <__assert_fail@plt+0xd70>
   11cd4:	bl	113b4 <dcgettext@plt>
   11cd8:	mov	r1, r4
   11cdc:	mov	fp, r0
   11ce0:	mov	r0, #4
   11ce4:	bl	14a08 <__assert_fail@plt+0x333c>
   11ce8:	mov	r2, fp
   11cec:	mov	r1, r6
   11cf0:	mov	r3, r0
   11cf4:	mov	r0, r6
   11cf8:	bl	11474 <error@plt>
   11cfc:	mov	r2, #5
   11d00:	ldr	r1, [pc, #1848]	; 12440 <__assert_fail@plt+0xd74>
   11d04:	mov	r0, #0
   11d08:	bl	113b4 <dcgettext@plt>
   11d0c:	mov	r1, #0
   11d10:	mov	r6, #0
   11d14:	mov	r2, r0
   11d18:	mov	r0, r1
   11d1c:	bl	11474 <error@plt>
   11d20:	mov	r1, r5
   11d24:	mov	r2, #4
   11d28:	mov	r0, r7
   11d2c:	bl	176f0 <fts_set@@Base>
   11d30:	mov	r0, r7
   11d34:	bl	16fa8 <fts_read@@Base>
   11d38:	b	11aa4 <__assert_fail@plt+0x3d8>
   11d3c:	cmp	r6, #16
   11d40:	beq	120e8 <__assert_fail@plt+0xa1c>
   11d44:	cmp	r5, #0
   11d48:	movne	r3, #1
   11d4c:	strbne	r3, [r9, #20]
   11d50:	bne	1194c <__assert_fail@plt+0x280>
   11d54:	mov	r2, #5
   11d58:	ldr	r1, [pc, #1764]	; 12444 <__assert_fail@plt+0xd78>
   11d5c:	mov	r0, r5
   11d60:	bl	113b4 <dcgettext@plt>
   11d64:	mov	r1, r5
   11d68:	mov	r2, r0
   11d6c:	mov	r0, #1
   11d70:	bl	11474 <error@plt>
   11d74:	mov	r1, r5
   11d78:	mov	r2, #4
   11d7c:	mov	r0, r7
   11d80:	bl	176f0 <fts_set@@Base>
   11d84:	b	11aa4 <__assert_fail@plt+0x3d8>
   11d88:	mov	r2, #5
   11d8c:	ldr	r1, [pc, #1716]	; 12448 <__assert_fail@plt+0xd7c>
   11d90:	mov	r0, #0
   11d94:	bl	113b4 <dcgettext@plt>
   11d98:	mov	r1, r4
   11d9c:	mov	r6, r0
   11da0:	mov	r0, #4
   11da4:	bl	14a08 <__assert_fail@plt+0x333c>
   11da8:	mov	r1, r6
   11dac:	mov	r2, r0
   11db0:	mov	r0, #1
   11db4:	bl	1157c <__printf_chk@plt>
   11db8:	b	11b5c <__assert_fail@plt+0x490>
   11dbc:	cmp	r2, #0
   11dc0:	mov	r1, fp
   11dc4:	add	r2, sp, #32
   11dc8:	mov	r0, r4
   11dcc:	beq	11f14 <__assert_fail@plt+0x848>
   11dd0:	bl	179a8 <fts_children@@Base+0x284>
   11dd4:	cmp	r0, #0
   11dd8:	blt	11f50 <__assert_fail@plt+0x884>
   11ddc:	ldr	r6, [sp, #32]
   11de0:	cmp	r6, #0
   11de4:	beq	1216c <__assert_fail@plt+0xaa0>
   11de8:	mov	r0, r6
   11dec:	bl	11390 <context_new@plt>
   11df0:	subs	r3, r0, #0
   11df4:	str	r3, [sp, #28]
   11df8:	beq	12284 <__assert_fail@plt+0xbb8>
   11dfc:	ldr	r1, [r9, #4]
   11e00:	cmp	r1, #0
   11e04:	beq	11e14 <__assert_fail@plt+0x748>
   11e08:	bl	11510 <context_user_set@plt>
   11e0c:	cmp	r0, #0
   11e10:	bne	121fc <__assert_fail@plt+0xb30>
   11e14:	mov	r6, #1
   11e18:	ldr	r1, [r9, #16]
   11e1c:	cmp	r1, #0
   11e20:	beq	11e34 <__assert_fail@plt+0x768>
   11e24:	ldr	r0, [sp, #28]
   11e28:	bl	11660 <context_range_set@plt>
   11e2c:	cmp	r0, #0
   11e30:	bne	12240 <__assert_fail@plt+0xb74>
   11e34:	ldr	r1, [r9, #8]
   11e38:	cmp	r1, #0
   11e3c:	beq	11e50 <__assert_fail@plt+0x784>
   11e40:	ldr	r0, [sp, #28]
   11e44:	bl	113a8 <context_role_set@plt>
   11e48:	cmp	r0, #0
   11e4c:	bne	11ffc <__assert_fail@plt+0x930>
   11e50:	ldr	r1, [r9, #12]
   11e54:	cmp	r1, #0
   11e58:	beq	11e6c <__assert_fail@plt+0x7a0>
   11e5c:	ldr	r0, [sp, #28]
   11e60:	bl	113cc <context_type_set@plt>
   11e64:	cmp	r0, #0
   11e68:	bne	12054 <__assert_fail@plt+0x988>
   11e6c:	cmp	r6, #0
   11e70:	beq	12090 <__assert_fail@plt+0x9c4>
   11e74:	ldr	r0, [sp, #28]
   11e78:	bl	1166c <context_str@plt>
   11e7c:	ldr	r1, [sp, #32]
   11e80:	cmp	r1, #0
   11e84:	mov	sl, r0
   11e88:	beq	11e98 <__assert_fail@plt+0x7cc>
   11e8c:	bl	11330 <strcmp@plt>
   11e90:	subs	r6, r0, #0
   11e94:	beq	11b9c <__assert_fail@plt+0x4d0>
   11e98:	ldrb	r2, [r9, #20]
   11e9c:	b	11b78 <__assert_fail@plt+0x4ac>
   11ea0:	bl	17f3c <fts_children@@Base+0x818>
   11ea4:	mov	r6, r0
   11ea8:	b	11b94 <__assert_fail@plt+0x4c8>
   11eac:	ldr	r3, [sp, #16]
   11eb0:	mov	r2, #5
   11eb4:	ldr	r1, [pc, #1424]	; 1244c <__assert_fail@plt+0xd80>
   11eb8:	mov	r0, #0
   11ebc:	ldr	r4, [r3]
   11ec0:	bl	113b4 <dcgettext@plt>
   11ec4:	mov	r2, fp
   11ec8:	mov	r1, #4
   11ecc:	mov	r6, r0
   11ed0:	mov	r0, #0
   11ed4:	bl	14954 <__assert_fail@plt+0x3288>
   11ed8:	mov	r1, sl
   11edc:	mov	fp, r0
   11ee0:	mov	r0, #1
   11ee4:	bl	14ca0 <__assert_fail@plt+0x35d4>
   11ee8:	mov	r3, fp
   11eec:	mov	r2, r6
   11ef0:	mov	r1, r4
   11ef4:	str	r0, [sp]
   11ef8:	mov	r0, #0
   11efc:	bl	11474 <error@plt>
   11f00:	ldr	r3, [r9, #24]
   11f04:	cmp	r3, #0
   11f08:	bne	11a94 <__assert_fail@plt+0x3c8>
   11f0c:	mov	r6, #1
   11f10:	b	11bac <__assert_fail@plt+0x4e0>
   11f14:	bl	17b84 <fts_children@@Base+0x460>
   11f18:	b	11dd4 <__assert_fail@plt+0x708>
   11f1c:	cmp	r2, #1
   11f20:	bgt	121a4 <__assert_fail@plt+0xad8>
   11f24:	cmp	r3, r8
   11f28:	mov	r2, #5
   11f2c:	blt	123b0 <__assert_fail@plt+0xce4>
   11f30:	ldr	r1, [pc, #1304]	; 12450 <__assert_fail@plt+0xd84>
   11f34:	mov	r0, #0
   11f38:	bl	113b4 <dcgettext@plt>
   11f3c:	mov	r1, #0
   11f40:	mov	r2, r0
   11f44:	mov	r0, r1
   11f48:	bl	11474 <error@plt>
   11f4c:	b	11860 <__assert_fail@plt+0x194>
   11f50:	ldr	r3, [sp, #16]
   11f54:	ldr	r6, [r3]
   11f58:	cmp	r6, #61	; 0x3d
   11f5c:	beq	11ddc <__assert_fail@plt+0x710>
   11f60:	mov	r2, #5
   11f64:	ldr	r1, [pc, #1256]	; 12454 <__assert_fail@plt+0xd88>
   11f68:	mov	r0, #0
   11f6c:	bl	113b4 <dcgettext@plt>
   11f70:	mov	r1, fp
   11f74:	mov	r4, r0
   11f78:	mov	r0, #4
   11f7c:	bl	14a08 <__assert_fail@plt+0x333c>
   11f80:	mov	r1, r6
   11f84:	mov	r2, r4
   11f88:	mov	r6, #0
   11f8c:	mov	r3, r0
   11f90:	mov	r0, #0
   11f94:	bl	11474 <error@plt>
   11f98:	b	11a98 <__assert_fail@plt+0x3cc>
   11f9c:	ldr	r3, [sp, #16]
   11fa0:	mov	r2, #5
   11fa4:	ldr	r1, [pc, #1196]	; 12458 <__assert_fail@plt+0xd8c>
   11fa8:	mov	r0, #0
   11fac:	ldr	r4, [r3]
   11fb0:	bl	113b4 <dcgettext@plt>
   11fb4:	mov	r1, r4
   11fb8:	mov	r8, #0
   11fbc:	mov	r2, r0
   11fc0:	mov	r0, #0
   11fc4:	bl	11474 <error@plt>
   11fc8:	b	11adc <__assert_fail@plt+0x410>
   11fcc:	mov	r2, #5
   11fd0:	ldr	r1, [pc, #1156]	; 1245c <__assert_fail@plt+0xd90>
   11fd4:	bl	113b4 <dcgettext@plt>
   11fd8:	mov	r1, r4
   11fdc:	mov	r8, r5
   11fe0:	mov	r2, r0
   11fe4:	mov	r0, r5
   11fe8:	bl	11474 <error@plt>
   11fec:	b	11acc <__assert_fail@plt+0x400>
   11ff0:	ldr	r3, [sp, #24]
   11ff4:	str	r3, [r9, #24]
   11ff8:	b	119b0 <__assert_fail@plt+0x2e4>
   11ffc:	ldr	r3, [sp, #16]
   12000:	mov	r2, #5
   12004:	ldr	r1, [pc, #1108]	; 12460 <__assert_fail@plt+0xd94>
   12008:	mov	r0, #0
   1200c:	ldr	r4, [r3]
   12010:	bl	113b4 <dcgettext@plt>
   12014:	mov	r6, r0
   12018:	ldr	r0, [r9, #8]
   1201c:	bl	14cb0 <__assert_fail@plt+0x35e4>
   12020:	mov	r1, r4
   12024:	mov	r2, r6
   12028:	ldr	r3, [pc, #1076]	; 12464 <__assert_fail@plt+0xd98>
   1202c:	str	r0, [sp]
   12030:	mov	r0, #0
   12034:	bl	11474 <error@plt>
   12038:	ldr	r1, [r9, #12]
   1203c:	cmp	r1, #0
   12040:	beq	12090 <__assert_fail@plt+0x9c4>
   12044:	ldr	r0, [sp, #28]
   12048:	bl	113cc <context_type_set@plt>
   1204c:	cmp	r0, #0
   12050:	beq	12090 <__assert_fail@plt+0x9c4>
   12054:	ldr	r3, [sp, #16]
   12058:	mov	r2, #5
   1205c:	ldr	r1, [pc, #1020]	; 12460 <__assert_fail@plt+0xd94>
   12060:	mov	r0, #0
   12064:	ldr	r4, [r3]
   12068:	bl	113b4 <dcgettext@plt>
   1206c:	mov	r6, r0
   12070:	ldr	r0, [r9, #12]
   12074:	bl	14cb0 <__assert_fail@plt+0x35e4>
   12078:	mov	r2, r6
   1207c:	mov	r1, r4
   12080:	ldr	r3, [pc, #992]	; 12468 <__assert_fail@plt+0xd9c>
   12084:	str	r0, [sp]
   12088:	mov	r0, #0
   1208c:	bl	11474 <error@plt>
   12090:	ldr	r6, [sp, #16]
   12094:	ldr	r0, [sp, #28]
   12098:	ldr	r4, [r6]
   1209c:	bl	114d4 <context_free@plt>
   120a0:	str	r4, [r6]
   120a4:	b	11a94 <__assert_fail@plt+0x3c8>
   120a8:	mov	r2, #5
   120ac:	ldr	r1, [pc, #952]	; 1246c <__assert_fail@plt+0xda0>
   120b0:	mov	r0, #0
   120b4:	bl	113b4 <dcgettext@plt>
   120b8:	mov	r2, r4
   120bc:	mov	r1, #3
   120c0:	mov	r6, #0
   120c4:	mov	r5, r0
   120c8:	mov	r0, #0
   120cc:	bl	14ae4 <__assert_fail@plt+0x3418>
   120d0:	mov	r1, #0
   120d4:	mov	r2, r5
   120d8:	mov	r3, r0
   120dc:	mov	r0, r1
   120e0:	bl	11474 <error@plt>
   120e4:	b	11aa4 <__assert_fail@plt+0x3d8>
   120e8:	cmp	r5, #1
   120ec:	strbne	r4, [r9, #20]
   120f0:	bne	1194c <__assert_fail@plt+0x280>
   120f4:	mov	r2, #5
   120f8:	ldr	r1, [pc, #880]	; 12470 <__assert_fail@plt+0xda4>
   120fc:	mov	r0, r4
   12100:	bl	113b4 <dcgettext@plt>
   12104:	mov	r1, r4
   12108:	mov	r2, r0
   1210c:	mov	r0, r5
   12110:	bl	11474 <error@plt>
   12114:	ldr	r0, [pc, #856]	; 12474 <__assert_fail@plt+0xda8>
   12118:	bl	14cc8 <__assert_fail@plt+0x35fc>
   1211c:	cmp	r0, #0
   12120:	str	r0, [r9, #48]	; 0x30
   12124:	bne	119d4 <__assert_fail@plt+0x308>
   12128:	ldr	r3, [sp, #16]
   1212c:	ldr	r1, [pc, #836]	; 12478 <__assert_fail@plt+0xdac>
   12130:	mov	r2, #5
   12134:	ldr	r4, [r3]
   12138:	bl	113b4 <dcgettext@plt>
   1213c:	ldr	r1, [pc, #756]	; 12438 <__assert_fail@plt+0xd6c>
   12140:	mov	r5, r0
   12144:	mov	r0, #4
   12148:	bl	14a08 <__assert_fail@plt+0x333c>
   1214c:	b	121e8 <__assert_fail@plt+0xb1c>
   12150:	mov	r2, #1
   12154:	str	r2, [r5, #16]
   12158:	mov	r1, r5
   1215c:	mov	r0, r7
   12160:	mov	r6, r2
   12164:	bl	176f0 <fts_set@@Base>
   12168:	b	11aa4 <__assert_fail@plt+0x3d8>
   1216c:	mov	r2, #5
   12170:	ldr	r1, [pc, #772]	; 1247c <__assert_fail@plt+0xdb0>
   12174:	mov	r0, r6
   12178:	bl	113b4 <dcgettext@plt>
   1217c:	mov	r1, fp
   12180:	mov	r4, r0
   12184:	mov	r0, #4
   12188:	bl	14a08 <__assert_fail@plt+0x333c>
   1218c:	mov	r2, r4
   12190:	mov	r1, r6
   12194:	mov	r3, r0
   12198:	mov	r0, r6
   1219c:	bl	11474 <error@plt>
   121a0:	b	11a98 <__assert_fail@plt+0x3cc>
   121a4:	ldr	r2, [r7, r3, lsl #2]
   121a8:	add	r3, r3, #1
   121ac:	mov	r0, r2
   121b0:	str	r2, [r9, #24]
   121b4:	str	r3, [r4]
   121b8:	bl	11480 <security_check_context@plt>
   121bc:	cmp	r0, #0
   121c0:	bge	119b0 <__assert_fail@plt+0x2e4>
   121c4:	bl	1154c <__errno_location@plt>
   121c8:	mov	r2, #5
   121cc:	ldr	r1, [pc, #684]	; 12480 <__assert_fail@plt+0xdb4>
   121d0:	ldr	r4, [r0]
   121d4:	mov	r0, r5
   121d8:	bl	113b4 <dcgettext@plt>
   121dc:	mov	r5, r0
   121e0:	ldr	r0, [r9, #24]
   121e4:	bl	14cb0 <__assert_fail@plt+0x35e4>
   121e8:	mov	r3, r0
   121ec:	mov	r2, r5
   121f0:	mov	r1, r4
   121f4:	mov	r0, #1
   121f8:	bl	11474 <error@plt>
   121fc:	ldr	r3, [sp, #16]
   12200:	mov	r2, #5
   12204:	ldr	r1, [pc, #596]	; 12460 <__assert_fail@plt+0xd94>
   12208:	mov	r0, #0
   1220c:	ldr	r6, [r3]
   12210:	bl	113b4 <dcgettext@plt>
   12214:	mov	sl, r0
   12218:	ldr	r0, [r9, #4]
   1221c:	bl	14cb0 <__assert_fail@plt+0x35e4>
   12220:	mov	r1, r6
   12224:	mov	r6, #0
   12228:	mov	r2, sl
   1222c:	ldr	r3, [pc, #592]	; 12484 <__assert_fail@plt+0xdb8>
   12230:	str	r0, [sp]
   12234:	mov	r0, r6
   12238:	bl	11474 <error@plt>
   1223c:	b	11e18 <__assert_fail@plt+0x74c>
   12240:	ldr	r3, [sp, #16]
   12244:	mov	r2, #5
   12248:	ldr	r1, [pc, #528]	; 12460 <__assert_fail@plt+0xd94>
   1224c:	mov	r0, #0
   12250:	ldr	r6, [r3]
   12254:	bl	113b4 <dcgettext@plt>
   12258:	mov	sl, r0
   1225c:	ldr	r0, [r9, #16]
   12260:	bl	14cb0 <__assert_fail@plt+0x35e4>
   12264:	mov	r1, r6
   12268:	mov	r6, #0
   1226c:	mov	r2, sl
   12270:	ldr	r3, [pc, #528]	; 12488 <__assert_fail@plt+0xdbc>
   12274:	str	r0, [sp]
   12278:	mov	r0, r6
   1227c:	bl	11474 <error@plt>
   12280:	b	11e34 <__assert_fail@plt+0x768>
   12284:	ldr	r3, [sp, #16]
   12288:	mov	r2, #5
   1228c:	ldr	r1, [pc, #504]	; 1248c <__assert_fail@plt+0xdc0>
   12290:	ldr	r4, [r3]
   12294:	bl	113b4 <dcgettext@plt>
   12298:	mov	fp, r0
   1229c:	mov	r0, r6
   122a0:	bl	14cb0 <__assert_fail@plt+0x35e4>
   122a4:	mov	r2, fp
   122a8:	mov	r1, r4
   122ac:	mov	r3, r0
   122b0:	ldr	r0, [sp, #28]
   122b4:	bl	11474 <error@plt>
   122b8:	b	11a94 <__assert_fail@plt+0x3c8>
   122bc:	ldr	r1, [pc, #460]	; 12490 <__assert_fail@plt+0xdc4>
   122c0:	mov	r0, #0
   122c4:	bl	113b4 <dcgettext@plt>
   122c8:	mov	r2, r4
   122cc:	mov	r1, #4
   122d0:	mov	r6, r0
   122d4:	mov	r0, #0
   122d8:	bl	14954 <__assert_fail@plt+0x3288>
   122dc:	ldr	r2, [pc, #340]	; 12438 <__assert_fail@plt+0xd6c>
   122e0:	mov	r1, #4
   122e4:	mov	r4, r0
   122e8:	mov	r0, #1
   122ec:	bl	14954 <__assert_fail@plt+0x3288>
   122f0:	mov	r1, #0
   122f4:	mov	r3, r4
   122f8:	mov	r2, r6
   122fc:	str	r0, [sp]
   12300:	mov	r0, r1
   12304:	bl	11474 <error@plt>
   12308:	b	11c50 <__assert_fail@plt+0x584>
   1230c:	ldr	r1, [pc, #380]	; 12490 <__assert_fail@plt+0xdc4>
   12310:	mov	r0, #0
   12314:	bl	113b4 <dcgettext@plt>
   12318:	mov	r2, r4
   1231c:	mov	r1, #4
   12320:	mov	r6, r0
   12324:	mov	r0, #0
   12328:	bl	14954 <__assert_fail@plt+0x3288>
   1232c:	ldr	r2, [pc, #260]	; 12438 <__assert_fail@plt+0xd6c>
   12330:	mov	r1, #4
   12334:	mov	r4, r0
   12338:	mov	r0, #1
   1233c:	bl	14954 <__assert_fail@plt+0x3288>
   12340:	mov	r1, #0
   12344:	mov	r3, r4
   12348:	mov	r2, r6
   1234c:	str	r0, [sp]
   12350:	mov	r0, r1
   12354:	bl	11474 <error@plt>
   12358:	b	11cfc <__assert_fail@plt+0x630>
   1235c:	mov	r0, r4
   12360:	bl	1258c <__assert_fail@plt+0xec0>
   12364:	bl	113c0 <__stack_chk_fail@plt>
   12368:	mov	r2, #5
   1236c:	ldr	r1, [pc, #288]	; 12494 <__assert_fail@plt+0xdc8>
   12370:	mov	r0, r5
   12374:	bl	113b4 <dcgettext@plt>
   12378:	mov	r1, r5
   1237c:	mov	r2, r0
   12380:	mov	r0, r5
   12384:	bl	11474 <error@plt>
   12388:	b	11860 <__assert_fail@plt+0x194>
   1238c:	bl	1154c <__errno_location@plt>
   12390:	ldr	r1, [pc, #188]	; 12454 <__assert_fail@plt+0xd88>
   12394:	mov	r2, #5
   12398:	ldr	r4, [r0]
   1239c:	mov	r0, r5
   123a0:	bl	113b4 <dcgettext@plt>
   123a4:	ldr	r1, [sp, #24]
   123a8:	mov	r5, r0
   123ac:	b	12144 <__assert_fail@plt+0xa78>
   123b0:	ldr	r1, [pc, #224]	; 12498 <__assert_fail@plt+0xdcc>
   123b4:	mov	r0, #0
   123b8:	bl	113b4 <dcgettext@plt>
   123bc:	sub	r8, r8, #-1073741823	; 0xc0000001
   123c0:	mov	r4, r0
   123c4:	ldr	r0, [r7, r8, lsl #2]
   123c8:	bl	14cb0 <__assert_fail@plt+0x35e4>
   123cc:	mov	r1, #0
   123d0:	mov	r2, r4
   123d4:	mov	r3, r0
   123d8:	mov	r0, r1
   123dc:	bl	11474 <error@plt>
   123e0:	b	11860 <__assert_fail@plt+0x194>
   123e4:	andeq	fp, r2, r0, lsl #30
   123e8:	andeq	sl, r1, ip, ror #19
   123ec:	andeq	sl, r1, r8, asr #22
   123f0:	muleq	r1, ip, sl
   123f4:	andeq	sl, r1, r8, lsl #4
   123f8:	andeq	sl, r1, ip, ror fp
   123fc:	andeq	r0, r0, r1, lsl #2
   12400:	andeq	r2, r1, r4, ror r9
   12404:	andeq	r0, r0, r2, lsl #2
   12408:	andeq	ip, r2, r0, asr #3
   1240c:	andeq	ip, r2, r8, asr #3
   12410:	andeq	ip, r2, r0, ror #2
   12414:			; <UNDEFINED> instruction: 0x0002c1bc
   12418:	andeq	sl, r1, ip, asr fp
   1241c:	andeq	sl, r1, ip, ror #22
   12420:	andeq	sl, r1, r8, ror #5
   12424:	muleq	r1, r8, sl
   12428:			; <UNDEFINED> instruction: 0x0002c1b0
   1242c:	andeq	sl, r1, r4, lsr sp
   12430:	andeq	fp, r1, r4, lsr #32
   12434:	andeq	sl, r1, r8, asr #26
   12438:			; <UNDEFINED> instruction: 0x0001b6b8
   1243c:	muleq	r1, r4, ip
   12440:	andeq	sl, r1, r0, lsl #26
   12444:			; <UNDEFINED> instruction: 0x0001abb8
   12448:	andeq	sl, r1, r0, lsr #28
   1244c:	strdeq	sl, [r1], -r4
   12450:	andeq	sl, r1, ip, asr #23
   12454:	strdeq	sl, [r1], -r8
   12458:	andeq	sl, r1, ip, lsl pc
   1245c:	andeq	sl, r1, r4, lsl #25
   12460:	andeq	sl, r1, r0, lsr #29
   12464:	andeq	sl, r1, r4, ror #29
   12468:	andeq	sl, r1, ip, ror #29
   1246c:	andeq	sl, r1, r4, ror #26
   12470:	andeq	sl, r1, ip, lsl #23
   12474:	andeq	ip, r2, r8, ror #3
   12478:	andeq	sl, r1, r4, ror #24
   1247c:	andeq	sl, r1, r4, asr #28
   12480:	andeq	sl, r1, r0, lsr #24
   12484:	ldrdeq	sl, [r1], -r4
   12488:	ldrdeq	sl, [r1], -ip
   1248c:	andeq	sl, r1, r8, ror lr
   12490:	andeq	sl, r1, r4, asr #25
   12494:	andeq	sl, r1, r4, lsr ip
   12498:	ldrdeq	sl, [r1], -ip
   1249c:	mov	fp, #0
   124a0:	mov	lr, #0
   124a4:	pop	{r1}		; (ldr r1, [sp], #4)
   124a8:	mov	r2, sp
   124ac:	push	{r2}		; (str r2, [sp, #-4]!)
   124b0:	push	{r0}		; (str r0, [sp, #-4]!)
   124b4:	ldr	ip, [pc, #16]	; 124cc <__assert_fail@plt+0xe00>
   124b8:	push	{ip}		; (str ip, [sp, #-4]!)
   124bc:	ldr	r0, [pc, #12]	; 124d0 <__assert_fail@plt+0xe04>
   124c0:	ldr	r3, [pc, #12]	; 124d4 <__assert_fail@plt+0xe08>
   124c4:	bl	114b0 <__libc_start_main@plt>
   124c8:	bl	11690 <abort@plt>
   124cc:	andeq	sl, r1, r8, lsr #3
   124d0:	ldrdeq	r1, [r1], -r8
   124d4:	andeq	sl, r1, r8, asr #2
   124d8:	ldr	r3, [pc, #20]	; 124f4 <__assert_fail@plt+0xe28>
   124dc:	ldr	r2, [pc, #20]	; 124f8 <__assert_fail@plt+0xe2c>
   124e0:	add	r3, pc, r3
   124e4:	ldr	r2, [r3, r2]
   124e8:	cmp	r2, #0
   124ec:	bxeq	lr
   124f0:	b	114c8 <__gmon_start__@plt>
   124f4:	andeq	r9, r1, r8, lsl fp
   124f8:	andeq	r0, r0, r4, asr r1
   124fc:	ldr	r0, [pc, #24]	; 1251c <__assert_fail@plt+0xe50>
   12500:	ldr	r3, [pc, #24]	; 12520 <__assert_fail@plt+0xe54>
   12504:	cmp	r3, r0
   12508:	bxeq	lr
   1250c:	ldr	r3, [pc, #16]	; 12524 <__assert_fail@plt+0xe58>
   12510:	cmp	r3, #0
   12514:	bxeq	lr
   12518:	bx	r3
   1251c:	andeq	ip, r2, r8, lsr #3
   12520:	andeq	ip, r2, r8, lsr #3
   12524:	andeq	r0, r0, r0
   12528:	ldr	r0, [pc, #36]	; 12554 <__assert_fail@plt+0xe88>
   1252c:	ldr	r1, [pc, #36]	; 12558 <__assert_fail@plt+0xe8c>
   12530:	sub	r1, r1, r0
   12534:	asr	r1, r1, #2
   12538:	add	r1, r1, r1, lsr #31
   1253c:	asrs	r1, r1, #1
   12540:	bxeq	lr
   12544:	ldr	r3, [pc, #16]	; 1255c <__assert_fail@plt+0xe90>
   12548:	cmp	r3, #0
   1254c:	bxeq	lr
   12550:	bx	r3
   12554:	andeq	ip, r2, r8, lsr #3
   12558:	andeq	ip, r2, r8, lsr #3
   1255c:	andeq	r0, r0, r0
   12560:	push	{r4, lr}
   12564:	ldr	r4, [pc, #24]	; 12584 <__assert_fail@plt+0xeb8>
   12568:	ldrb	r3, [r4]
   1256c:	cmp	r3, #0
   12570:	popne	{r4, pc}
   12574:	bl	124fc <__assert_fail@plt+0xe30>
   12578:	mov	r3, #1
   1257c:	strb	r3, [r4]
   12580:	pop	{r4, pc}
   12584:	andeq	ip, r2, r4, asr #3
   12588:	b	12528 <__assert_fail@plt+0xe5c>
   1258c:	ldr	r3, [pc, #848]	; 128e4 <__assert_fail@plt+0x1218>
   12590:	push	{r7, lr}
   12594:	sub	sp, sp, #72	; 0x48
   12598:	ldr	r3, [r3]
   1259c:	subs	r4, r0, #0
   125a0:	str	r3, [sp, #68]	; 0x44
   125a4:	beq	125e0 <__assert_fail@plt+0xf14>
   125a8:	ldr	r3, [pc, #824]	; 128e8 <__assert_fail@plt+0x121c>
   125ac:	mov	r2, #5
   125b0:	ldr	r1, [pc, #820]	; 128ec <__assert_fail@plt+0x1220>
   125b4:	mov	r0, #0
   125b8:	ldr	r5, [r3]
   125bc:	bl	113b4 <dcgettext@plt>
   125c0:	ldr	r3, [pc, #808]	; 128f0 <__assert_fail@plt+0x1224>
   125c4:	mov	r1, #1
   125c8:	ldr	r3, [r3]
   125cc:	mov	r2, r0
   125d0:	mov	r0, r5
   125d4:	bl	11594 <__fprintf_chk@plt>
   125d8:	mov	r0, r4
   125dc:	bl	11504 <exit@plt>
   125e0:	mov	r2, #5
   125e4:	ldr	r1, [pc, #776]	; 128f4 <__assert_fail@plt+0x1228>
   125e8:	bl	113b4 <dcgettext@plt>
   125ec:	ldr	r3, [pc, #764]	; 128f0 <__assert_fail@plt+0x1224>
   125f0:	ldr	r5, [pc, #768]	; 128f8 <__assert_fail@plt+0x122c>
   125f4:	ldr	r3, [r3]
   125f8:	mov	r2, r3
   125fc:	str	r3, [sp]
   12600:	mov	r1, r0
   12604:	mov	r0, #1
   12608:	bl	1157c <__printf_chk@plt>
   1260c:	mov	r2, #5
   12610:	ldr	r1, [pc, #740]	; 128fc <__assert_fail@plt+0x1230>
   12614:	mov	r0, r4
   12618:	bl	113b4 <dcgettext@plt>
   1261c:	ldr	r1, [r5]
   12620:	bl	11318 <fputs_unlocked@plt>
   12624:	mov	r2, #5
   12628:	ldr	r1, [pc, #720]	; 12900 <__assert_fail@plt+0x1234>
   1262c:	mov	r0, r4
   12630:	bl	113b4 <dcgettext@plt>
   12634:	ldr	r1, [r5]
   12638:	bl	11318 <fputs_unlocked@plt>
   1263c:	mov	r2, #5
   12640:	ldr	r1, [pc, #700]	; 12904 <__assert_fail@plt+0x1238>
   12644:	mov	r0, r4
   12648:	bl	113b4 <dcgettext@plt>
   1264c:	ldr	r1, [r5]
   12650:	bl	11318 <fputs_unlocked@plt>
   12654:	mov	r2, #5
   12658:	ldr	r1, [pc, #680]	; 12908 <__assert_fail@plt+0x123c>
   1265c:	mov	r0, r4
   12660:	bl	113b4 <dcgettext@plt>
   12664:	ldr	r1, [r5]
   12668:	bl	11318 <fputs_unlocked@plt>
   1266c:	mov	r2, #5
   12670:	ldr	r1, [pc, #660]	; 1290c <__assert_fail@plt+0x1240>
   12674:	mov	r0, r4
   12678:	bl	113b4 <dcgettext@plt>
   1267c:	ldr	r1, [r5]
   12680:	bl	11318 <fputs_unlocked@plt>
   12684:	mov	r2, #5
   12688:	ldr	r1, [pc, #640]	; 12910 <__assert_fail@plt+0x1244>
   1268c:	mov	r0, r4
   12690:	bl	113b4 <dcgettext@plt>
   12694:	ldr	r1, [r5]
   12698:	bl	11318 <fputs_unlocked@plt>
   1269c:	mov	r2, #5
   126a0:	ldr	r1, [pc, #620]	; 12914 <__assert_fail@plt+0x1248>
   126a4:	mov	r0, r4
   126a8:	bl	113b4 <dcgettext@plt>
   126ac:	ldr	r1, [r5]
   126b0:	bl	11318 <fputs_unlocked@plt>
   126b4:	mov	r2, #5
   126b8:	ldr	r1, [pc, #600]	; 12918 <__assert_fail@plt+0x124c>
   126bc:	mov	r0, r4
   126c0:	bl	113b4 <dcgettext@plt>
   126c4:	ldr	r1, [r5]
   126c8:	bl	11318 <fputs_unlocked@plt>
   126cc:	mov	r2, #5
   126d0:	ldr	r1, [pc, #580]	; 1291c <__assert_fail@plt+0x1250>
   126d4:	mov	r0, r4
   126d8:	bl	113b4 <dcgettext@plt>
   126dc:	ldr	r1, [r5]
   126e0:	bl	11318 <fputs_unlocked@plt>
   126e4:	mov	r2, #5
   126e8:	ldr	r1, [pc, #560]	; 12920 <__assert_fail@plt+0x1254>
   126ec:	mov	r0, r4
   126f0:	bl	113b4 <dcgettext@plt>
   126f4:	ldr	r1, [r5]
   126f8:	bl	11318 <fputs_unlocked@plt>
   126fc:	mov	r2, #5
   12700:	ldr	r1, [pc, #540]	; 12924 <__assert_fail@plt+0x1258>
   12704:	mov	r0, r4
   12708:	bl	113b4 <dcgettext@plt>
   1270c:	ldr	r1, [r5]
   12710:	bl	11318 <fputs_unlocked@plt>
   12714:	ldr	lr, [pc, #524]	; 12928 <__assert_fail@plt+0x125c>
   12718:	add	ip, sp, #12
   1271c:	ldm	lr!, {r0, r1, r2, r3}
   12720:	stmia	ip!, {r0, r1, r2, r3}
   12724:	ldm	lr!, {r0, r1, r2, r3}
   12728:	ldr	r6, [sp, #12]
   1272c:	stmia	ip!, {r0, r1, r2, r3}
   12730:	cmp	r6, #0
   12734:	ldm	lr!, {r0, r1, r2, r3}
   12738:	addeq	r5, sp, #12
   1273c:	stmia	ip!, {r0, r1, r2, r3}
   12740:	ldm	lr, {r0, r1}
   12744:	stm	ip, {r0, r1}
   12748:	beq	12778 <__assert_fail@plt+0x10ac>
   1274c:	ldr	r7, [pc, #472]	; 1292c <__assert_fail@plt+0x1260>
   12750:	add	r5, sp, #12
   12754:	b	12764 <__assert_fail@plt+0x1098>
   12758:	ldr	r6, [r5, #8]!
   1275c:	cmp	r6, #0
   12760:	beq	12778 <__assert_fail@plt+0x10ac>
   12764:	mov	r1, r6
   12768:	mov	r0, r7
   1276c:	bl	11330 <strcmp@plt>
   12770:	cmp	r0, #0
   12774:	bne	12758 <__assert_fail@plt+0x108c>
   12778:	ldr	r5, [r5, #4]
   1277c:	mov	r2, #5
   12780:	cmp	r5, #0
   12784:	ldr	r1, [pc, #420]	; 12930 <__assert_fail@plt+0x1264>
   12788:	beq	12830 <__assert_fail@plt+0x1164>
   1278c:	mov	r0, #0
   12790:	bl	113b4 <dcgettext@plt>
   12794:	ldr	r3, [pc, #408]	; 12934 <__assert_fail@plt+0x1268>
   12798:	ldr	r2, [pc, #408]	; 12938 <__assert_fail@plt+0x126c>
   1279c:	mov	r1, r0
   127a0:	mov	r0, #1
   127a4:	bl	1157c <__printf_chk@plt>
   127a8:	mov	r1, #0
   127ac:	mov	r0, #5
   127b0:	bl	115e8 <setlocale@plt>
   127b4:	cmp	r0, #0
   127b8:	ldreq	r6, [pc, #364]	; 1292c <__assert_fail@plt+0x1260>
   127bc:	beq	127d8 <__assert_fail@plt+0x110c>
   127c0:	mov	r2, #3
   127c4:	ldr	r1, [pc, #368]	; 1293c <__assert_fail@plt+0x1270>
   127c8:	bl	11684 <strncmp@plt>
   127cc:	ldr	r6, [pc, #344]	; 1292c <__assert_fail@plt+0x1260>
   127d0:	cmp	r0, #0
   127d4:	bne	128c0 <__assert_fail@plt+0x11f4>
   127d8:	mov	r2, #5
   127dc:	ldr	r1, [pc, #348]	; 12940 <__assert_fail@plt+0x1274>
   127e0:	mov	r0, #0
   127e4:	bl	113b4 <dcgettext@plt>
   127e8:	ldr	r3, [pc, #316]	; 1292c <__assert_fail@plt+0x1260>
   127ec:	ldr	r2, [pc, #320]	; 12934 <__assert_fail@plt+0x1268>
   127f0:	mov	r1, r0
   127f4:	mov	r0, #1
   127f8:	bl	1157c <__printf_chk@plt>
   127fc:	mov	r2, #5
   12800:	ldr	r1, [pc, #316]	; 12944 <__assert_fail@plt+0x1278>
   12804:	mov	r0, #0
   12808:	bl	113b4 <dcgettext@plt>
   1280c:	ldr	r2, [pc, #308]	; 12948 <__assert_fail@plt+0x127c>
   12810:	cmp	r5, r6
   12814:	ldr	r3, [pc, #304]	; 1294c <__assert_fail@plt+0x1280>
   12818:	movne	r3, r2
   1281c:	mov	r1, r0
   12820:	mov	r2, r5
   12824:	mov	r0, #1
   12828:	bl	1157c <__printf_chk@plt>
   1282c:	b	125d8 <__assert_fail@plt+0xf0c>
   12830:	mov	r0, r5
   12834:	bl	113b4 <dcgettext@plt>
   12838:	ldr	r3, [pc, #244]	; 12934 <__assert_fail@plt+0x1268>
   1283c:	ldr	r2, [pc, #244]	; 12938 <__assert_fail@plt+0x126c>
   12840:	mov	r1, r0
   12844:	mov	r0, #1
   12848:	bl	1157c <__printf_chk@plt>
   1284c:	mov	r1, r5
   12850:	mov	r0, #5
   12854:	bl	115e8 <setlocale@plt>
   12858:	cmp	r0, #0
   1285c:	beq	12874 <__assert_fail@plt+0x11a8>
   12860:	mov	r2, #3
   12864:	ldr	r1, [pc, #208]	; 1293c <__assert_fail@plt+0x1270>
   12868:	bl	11684 <strncmp@plt>
   1286c:	cmp	r0, #0
   12870:	bne	128b8 <__assert_fail@plt+0x11ec>
   12874:	mov	r2, #5
   12878:	ldr	r1, [pc, #192]	; 12940 <__assert_fail@plt+0x1274>
   1287c:	mov	r0, #0
   12880:	bl	113b4 <dcgettext@plt>
   12884:	ldr	r3, [pc, #160]	; 1292c <__assert_fail@plt+0x1260>
   12888:	ldr	r2, [pc, #164]	; 12934 <__assert_fail@plt+0x1268>
   1288c:	mov	r5, r3
   12890:	mov	r1, r0
   12894:	mov	r0, #1
   12898:	bl	1157c <__printf_chk@plt>
   1289c:	ldr	r1, [pc, #160]	; 12944 <__assert_fail@plt+0x1278>
   128a0:	mov	r2, #5
   128a4:	mov	r0, #0
   128a8:	bl	113b4 <dcgettext@plt>
   128ac:	ldr	r3, [pc, #152]	; 1294c <__assert_fail@plt+0x1280>
   128b0:	mov	r1, r0
   128b4:	b	12820 <__assert_fail@plt+0x1154>
   128b8:	ldr	r6, [pc, #108]	; 1292c <__assert_fail@plt+0x1260>
   128bc:	mov	r5, r6
   128c0:	mov	r2, #5
   128c4:	ldr	r1, [pc, #132]	; 12950 <__assert_fail@plt+0x1284>
   128c8:	mov	r0, #0
   128cc:	bl	113b4 <dcgettext@plt>
   128d0:	ldr	r2, [pc, #84]	; 1292c <__assert_fail@plt+0x1260>
   128d4:	mov	r1, r0
   128d8:	mov	r0, #1
   128dc:	bl	1157c <__printf_chk@plt>
   128e0:	b	127d8 <__assert_fail@plt+0x110c>
   128e4:	andeq	fp, r2, r0, lsl #30
   128e8:			; <UNDEFINED> instruction: 0x0002c1b8
   128ec:	strdeq	sl, [r1], -r0
   128f0:	andeq	ip, r2, r4, lsl #4
   128f4:	andeq	sl, r1, r8, lsl r3
   128f8:			; <UNDEFINED> instruction: 0x0002c1bc
   128fc:			; <UNDEFINED> instruction: 0x0001a3b8
   12900:	andeq	sl, r1, r4, asr #8
   12904:	muleq	r1, r0, r4
   12908:	andeq	sl, r1, r8, ror r5
   1290c:	muleq	r1, r4, r6
   12910:	andeq	sl, r1, r4, lsl r7
   12914:	andeq	sl, r1, ip, lsl #15
   12918:	ldrdeq	sl, [r1], -r4
   1291c:	andeq	sl, r1, ip, lsl r8
   12920:	strdeq	sl, [r1], -r0
   12924:	andeq	sl, r1, r0, lsr #20
   12928:	ldrdeq	sl, [r1], -r0
   1292c:	andeq	sl, r1, r8, ror #5
   12930:	andeq	sl, r1, r8, asr sl
   12934:	andeq	sl, r1, r0, ror sl
   12938:	muleq	r1, r8, sl
   1293c:	andeq	sl, r1, r8, lsr #21
   12940:	strdeq	sl, [r1], -r4
   12944:	andeq	sl, r1, r4, lsl fp
   12948:	andeq	sl, r1, ip, ror #19
   1294c:	andeq	sl, r1, r8, lsr pc
   12950:	andeq	sl, r1, ip, lsr #21
   12954:	ldr	r3, [pc, #4]	; 12960 <__assert_fail@plt+0x1294>
   12958:	str	r0, [r3]
   1295c:	bx	lr
   12960:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12964:	ldr	r3, [pc, #4]	; 12970 <__assert_fail@plt+0x12a4>
   12968:	strb	r0, [r3, #4]
   1296c:	bx	lr
   12970:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12974:	ldr	r3, [pc, #180]	; 12a30 <__assert_fail@plt+0x1364>
   12978:	push	{r4, r5, r6, lr}
   1297c:	sub	sp, sp, #8
   12980:	ldr	r0, [r3]
   12984:	bl	18118 <fts_children@@Base+0x9f4>
   12988:	cmp	r0, #0
   1298c:	beq	129b4 <__assert_fail@plt+0x12e8>
   12990:	bl	1154c <__errno_location@plt>
   12994:	ldr	r5, [pc, #152]	; 12a34 <__assert_fail@plt+0x1368>
   12998:	ldrb	r3, [r5, #4]
   1299c:	cmp	r3, #0
   129a0:	mov	r4, r0
   129a4:	beq	129d0 <__assert_fail@plt+0x1304>
   129a8:	ldr	r3, [r0]
   129ac:	cmp	r3, #32
   129b0:	bne	129d0 <__assert_fail@plt+0x1304>
   129b4:	ldr	r3, [pc, #124]	; 12a38 <__assert_fail@plt+0x136c>
   129b8:	ldr	r0, [r3]
   129bc:	bl	18118 <fts_children@@Base+0x9f4>
   129c0:	cmp	r0, #0
   129c4:	bne	12a10 <__assert_fail@plt+0x1344>
   129c8:	add	sp, sp, #8
   129cc:	pop	{r4, r5, r6, pc}
   129d0:	mov	r2, #5
   129d4:	ldr	r1, [pc, #96]	; 12a3c <__assert_fail@plt+0x1370>
   129d8:	mov	r0, #0
   129dc:	bl	113b4 <dcgettext@plt>
   129e0:	mov	r6, r0
   129e4:	ldr	r0, [r5]
   129e8:	cmp	r0, #0
   129ec:	beq	12a1c <__assert_fail@plt+0x1350>
   129f0:	ldr	r4, [r4]
   129f4:	bl	14ad0 <__assert_fail@plt+0x3404>
   129f8:	mov	r1, r4
   129fc:	str	r6, [sp]
   12a00:	ldr	r2, [pc, #56]	; 12a40 <__assert_fail@plt+0x1374>
   12a04:	mov	r3, r0
   12a08:	mov	r0, #0
   12a0c:	bl	11474 <error@plt>
   12a10:	ldr	r3, [pc, #44]	; 12a44 <__assert_fail@plt+0x1378>
   12a14:	ldr	r0, [r3]
   12a18:	bl	1136c <_exit@plt>
   12a1c:	mov	r3, r6
   12a20:	ldr	r1, [r4]
   12a24:	ldr	r2, [pc, #28]	; 12a48 <__assert_fail@plt+0x137c>
   12a28:	bl	11474 <error@plt>
   12a2c:	b	12a10 <__assert_fail@plt+0x1344>
   12a30:			; <UNDEFINED> instruction: 0x0002c1bc
   12a34:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12a38:			; <UNDEFINED> instruction: 0x0002c1b8
   12a3c:	andeq	fp, r1, r4, lsl r0
   12a40:	andeq	fp, r1, r0, lsr #32
   12a44:	andeq	ip, r2, r4, ror #2
   12a48:	andeq	fp, r1, r4, lsr #32
   12a4c:	push	{r4, r5, r6, lr}
   12a50:	subs	r4, r0, #0
   12a54:	beq	12ac8 <__assert_fail@plt+0x13fc>
   12a58:	mov	r1, #47	; 0x2f
   12a5c:	bl	115f4 <strrchr@plt>
   12a60:	subs	r5, r0, #0
   12a64:	beq	12ab4 <__assert_fail@plt+0x13e8>
   12a68:	add	r6, r5, #1
   12a6c:	sub	r3, r6, r4
   12a70:	cmp	r3, #6
   12a74:	ble	12ab4 <__assert_fail@plt+0x13e8>
   12a78:	mov	r2, #7
   12a7c:	ldr	r1, [pc, #96]	; 12ae4 <__assert_fail@plt+0x1418>
   12a80:	sub	r0, r5, #6
   12a84:	bl	11684 <strncmp@plt>
   12a88:	cmp	r0, #0
   12a8c:	bne	12ab4 <__assert_fail@plt+0x13e8>
   12a90:	mov	r2, #3
   12a94:	ldr	r1, [pc, #76]	; 12ae8 <__assert_fail@plt+0x141c>
   12a98:	mov	r0, r6
   12a9c:	bl	11684 <strncmp@plt>
   12aa0:	cmp	r0, #0
   12aa4:	movne	r4, r6
   12aa8:	ldreq	r3, [pc, #60]	; 12aec <__assert_fail@plt+0x1420>
   12aac:	addeq	r4, r5, #4
   12ab0:	streq	r4, [r3]
   12ab4:	ldr	r2, [pc, #52]	; 12af0 <__assert_fail@plt+0x1424>
   12ab8:	ldr	r3, [pc, #52]	; 12af4 <__assert_fail@plt+0x1428>
   12abc:	str	r4, [r2]
   12ac0:	str	r4, [r3]
   12ac4:	pop	{r4, r5, r6, pc}
   12ac8:	ldr	r3, [pc, #40]	; 12af8 <__assert_fail@plt+0x142c>
   12acc:	mov	r2, #55	; 0x37
   12ad0:	mov	r1, #1
   12ad4:	ldr	r3, [r3]
   12ad8:	ldr	r0, [pc, #28]	; 12afc <__assert_fail@plt+0x1430>
   12adc:	bl	1142c <fwrite@plt>
   12ae0:	bl	11690 <abort@plt>
   12ae4:	andeq	fp, r1, r0, rrx
   12ae8:	andeq	fp, r1, r8, rrx
   12aec:	andeq	ip, r2, r8, lsr #3
   12af0:	andeq	ip, r2, r4, lsl #4
   12af4:	andeq	ip, r2, ip, lsr #3
   12af8:			; <UNDEFINED> instruction: 0x0002c1b8
   12afc:	andeq	fp, r1, r8, lsr #32
   12b00:	push	{r4, lr}
   12b04:	mov	r2, #48	; 0x30
   12b08:	mov	r4, r1
   12b0c:	mov	r1, #0
   12b10:	bl	11570 <memset@plt>
   12b14:	cmp	r4, #10
   12b18:	beq	12b24 <__assert_fail@plt+0x1458>
   12b1c:	str	r4, [r0]
   12b20:	pop	{r4, pc}
   12b24:	bl	11690 <abort@plt>
   12b28:	push	{r4, r5, r6, lr}
   12b2c:	mov	r2, #5
   12b30:	mov	r5, r0
   12b34:	mov	r6, r1
   12b38:	mov	r1, r0
   12b3c:	mov	r0, #0
   12b40:	bl	113b4 <dcgettext@plt>
   12b44:	cmp	r5, r0
   12b48:	mov	r4, r0
   12b4c:	beq	12b58 <__assert_fail@plt+0x148c>
   12b50:	mov	r0, r4
   12b54:	pop	{r4, r5, r6, pc}
   12b58:	bl	194cc <fts_children@@Base+0x1da8>
   12b5c:	ldrb	r3, [r0]
   12b60:	bic	r3, r3, #32
   12b64:	cmp	r3, #85	; 0x55
   12b68:	bne	12bc8 <__assert_fail@plt+0x14fc>
   12b6c:	ldrb	r3, [r0, #1]
   12b70:	bic	r3, r3, #32
   12b74:	cmp	r3, #84	; 0x54
   12b78:	bne	12c40 <__assert_fail@plt+0x1574>
   12b7c:	ldrb	r3, [r0, #2]
   12b80:	bic	r3, r3, #32
   12b84:	cmp	r3, #70	; 0x46
   12b88:	bne	12c40 <__assert_fail@plt+0x1574>
   12b8c:	ldrb	r3, [r0, #3]
   12b90:	cmp	r3, #45	; 0x2d
   12b94:	bne	12c40 <__assert_fail@plt+0x1574>
   12b98:	ldrb	r3, [r0, #4]
   12b9c:	cmp	r3, #56	; 0x38
   12ba0:	bne	12c40 <__assert_fail@plt+0x1574>
   12ba4:	ldrb	r3, [r0, #5]
   12ba8:	cmp	r3, #0
   12bac:	bne	12c40 <__assert_fail@plt+0x1574>
   12bb0:	ldrb	r2, [r4]
   12bb4:	ldr	r3, [pc, #156]	; 12c58 <__assert_fail@plt+0x158c>
   12bb8:	ldr	r4, [pc, #156]	; 12c5c <__assert_fail@plt+0x1590>
   12bbc:	cmp	r2, #96	; 0x60
   12bc0:	movne	r4, r3
   12bc4:	b	12b50 <__assert_fail@plt+0x1484>
   12bc8:	cmp	r3, #71	; 0x47
   12bcc:	bne	12c40 <__assert_fail@plt+0x1574>
   12bd0:	ldrb	r3, [r0, #1]
   12bd4:	bic	r3, r3, #32
   12bd8:	cmp	r3, #66	; 0x42
   12bdc:	bne	12c40 <__assert_fail@plt+0x1574>
   12be0:	ldrb	r3, [r0, #2]
   12be4:	cmp	r3, #49	; 0x31
   12be8:	bne	12c40 <__assert_fail@plt+0x1574>
   12bec:	ldrb	r3, [r0, #3]
   12bf0:	cmp	r3, #56	; 0x38
   12bf4:	bne	12c40 <__assert_fail@plt+0x1574>
   12bf8:	ldrb	r3, [r0, #4]
   12bfc:	cmp	r3, #48	; 0x30
   12c00:	bne	12c40 <__assert_fail@plt+0x1574>
   12c04:	ldrb	r3, [r0, #5]
   12c08:	cmp	r3, #51	; 0x33
   12c0c:	bne	12c40 <__assert_fail@plt+0x1574>
   12c10:	ldrb	r3, [r0, #6]
   12c14:	cmp	r3, #48	; 0x30
   12c18:	bne	12c40 <__assert_fail@plt+0x1574>
   12c1c:	ldrb	r3, [r0, #7]
   12c20:	cmp	r3, #0
   12c24:	bne	12c40 <__assert_fail@plt+0x1574>
   12c28:	ldrb	r2, [r4]
   12c2c:	ldr	r3, [pc, #44]	; 12c60 <__assert_fail@plt+0x1594>
   12c30:	ldr	r4, [pc, #44]	; 12c64 <__assert_fail@plt+0x1598>
   12c34:	cmp	r2, #96	; 0x60
   12c38:	movne	r4, r3
   12c3c:	b	12b50 <__assert_fail@plt+0x1484>
   12c40:	ldr	r3, [pc, #32]	; 12c68 <__assert_fail@plt+0x159c>
   12c44:	ldr	r4, [pc, #32]	; 12c6c <__assert_fail@plt+0x15a0>
   12c48:	cmp	r6, #9
   12c4c:	movne	r4, r3
   12c50:	mov	r0, r4
   12c54:	pop	{r4, r5, r6, pc}
   12c58:	andeq	fp, r1, r4, asr #1
   12c5c:	ldrdeq	fp, [r1], -r0
   12c60:	andeq	fp, r1, r8, asr #1
   12c64:	andeq	fp, r1, ip, asr #1
   12c68:	ldrdeq	fp, [r1], -r4
   12c6c:	andeq	fp, r1, r0, asr #1
   12c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c74:	sub	sp, sp, #124	; 0x7c
   12c78:	ldr	ip, [pc, #3576]	; 13a78 <__assert_fail@plt+0x23ac>
   12c7c:	str	r3, [sp, #24]
   12c80:	ldr	r3, [sp, #168]	; 0xa8
   12c84:	ldr	ip, [ip]
   12c88:	str	r3, [sp, #56]	; 0x38
   12c8c:	ldr	r3, [sp, #172]	; 0xac
   12c90:	ldr	r8, [sp, #160]	; 0xa0
   12c94:	str	r3, [sp, #80]	; 0x50
   12c98:	ldr	r3, [sp, #176]	; 0xb0
   12c9c:	mov	fp, r0
   12ca0:	str	r3, [sp, #76]	; 0x4c
   12ca4:	mov	sl, r1
   12ca8:	str	r2, [sp, #36]	; 0x24
   12cac:	str	ip, [sp, #116]	; 0x74
   12cb0:	bl	11444 <__ctype_get_mb_cur_max@plt>
   12cb4:	ldr	r3, [sp, #164]	; 0xa4
   12cb8:	ands	r4, r3, #2
   12cbc:	movne	r3, #1
   12cc0:	moveq	r3, #0
   12cc4:	str	r3, [sp, #32]
   12cc8:	str	r0, [sp, #64]	; 0x40
   12ccc:	cmp	r8, #10
   12cd0:	ldrls	pc, [pc, r8, lsl #2]
   12cd4:	b	14484 <__assert_fail@plt+0x2db8>
   12cd8:	andeq	r3, r1, ip, asr #1
   12cdc:	andeq	r3, r1, r4, ror #2
   12ce0:	andeq	r3, r1, r4, ror #14
   12ce4:	andeq	r3, r1, r4, lsl #3
   12ce8:	andeq	r3, r1, r8, lsr r0
   12cec:	andeq	r3, r1, r0, lsl #1
   12cf0:	strdeq	r3, [r1], -ip
   12cf4:	andeq	r3, r1, r4, lsr r1
   12cf8:	andeq	r2, r1, r4, lsl #26
   12cfc:	andeq	r2, r1, r4, lsl #26
   12d00:	andeq	r2, r1, r4, lsl #26
   12d04:	cmp	r8, #10
   12d08:	beq	12d2c <__assert_fail@plt+0x1660>
   12d0c:	mov	r1, r8
   12d10:	ldr	r0, [pc, #3428]	; 13a7c <__assert_fail@plt+0x23b0>
   12d14:	bl	12b28 <__assert_fail@plt+0x145c>
   12d18:	mov	r1, r8
   12d1c:	str	r0, [sp, #80]	; 0x50
   12d20:	ldr	r0, [pc, #3420]	; 13a84 <__assert_fail@plt+0x23b8>
   12d24:	bl	12b28 <__assert_fail@plt+0x145c>
   12d28:	str	r0, [sp, #76]	; 0x4c
   12d2c:	cmp	r4, #0
   12d30:	movne	r4, #0
   12d34:	beq	14144 <__assert_fail@plt+0x2a78>
   12d38:	ldr	r7, [sp, #76]	; 0x4c
   12d3c:	mov	r5, #0
   12d40:	mov	r6, #1
   12d44:	mov	r0, r7
   12d48:	str	r6, [sp, #40]	; 0x28
   12d4c:	str	r5, [sp, #68]	; 0x44
   12d50:	bl	11528 <strlen@plt>
   12d54:	str	r6, [sp, #28]
   12d58:	str	r5, [sp, #44]	; 0x2c
   12d5c:	str	r5, [sp, #72]	; 0x48
   12d60:	str	r7, [sp, #60]	; 0x3c
   12d64:	str	r0, [sp, #52]	; 0x34
   12d68:	str	r8, [sp, #160]	; 0xa0
   12d6c:	mov	r8, fp
   12d70:	ldr	fp, [sp, #160]	; 0xa0
   12d74:	mov	r9, #0
   12d78:	ldr	r3, [sp, #24]
   12d7c:	cmn	r3, #1
   12d80:	beq	132e8 <__assert_fail@plt+0x1c1c>
   12d84:	ldr	r3, [sp, #24]
   12d88:	subs	r6, r3, r9
   12d8c:	movne	r6, #1
   12d90:	cmp	r6, #0
   12d94:	beq	13300 <__assert_fail@plt+0x1c34>
   12d98:	ldr	r7, [sp, #28]
   12d9c:	ldr	r0, [sp, #36]	; 0x24
   12da0:	cmp	fp, #2
   12da4:	moveq	r7, #0
   12da8:	andne	r7, r7, #1
   12dac:	add	r3, r0, r9
   12db0:	cmp	r7, #0
   12db4:	str	r3, [sp, #48]	; 0x30
   12db8:	beq	137a4 <__assert_fail@plt+0x20d8>
   12dbc:	ldr	r2, [sp, #52]	; 0x34
   12dc0:	cmp	r2, #0
   12dc4:	beq	13a88 <__assert_fail@plt+0x23bc>
   12dc8:	ldr	r1, [sp, #24]
   12dcc:	cmp	r2, #1
   12dd0:	mov	r3, r2
   12dd4:	movls	r3, #0
   12dd8:	movhi	r3, #1
   12ddc:	cmn	r1, #1
   12de0:	movne	r3, #0
   12de4:	cmp	r3, #0
   12de8:	add	r5, r9, r2
   12dec:	beq	12df8 <__assert_fail@plt+0x172c>
   12df0:	bl	11528 <strlen@plt>
   12df4:	str	r0, [sp, #24]
   12df8:	ldr	r3, [sp, #24]
   12dfc:	cmp	r5, r3
   12e00:	bhi	13a88 <__assert_fail@plt+0x23bc>
   12e04:	ldr	r2, [sp, #52]	; 0x34
   12e08:	ldr	r1, [sp, #60]	; 0x3c
   12e0c:	ldr	r0, [sp, #48]	; 0x30
   12e10:	bl	1139c <memcmp@plt>
   12e14:	cmp	r0, #0
   12e18:	bne	13a88 <__assert_fail@plt+0x23bc>
   12e1c:	ldr	r3, [sp, #32]
   12e20:	cmp	r3, #0
   12e24:	bne	14344 <__assert_fail@plt+0x2c78>
   12e28:	ldr	r3, [sp, #48]	; 0x30
   12e2c:	ldrb	r5, [r3]
   12e30:	cmp	r5, #126	; 0x7e
   12e34:	ldrls	pc, [pc, r5, lsl #2]
   12e38:	b	13708 <__assert_fail@plt+0x203c>
   12e3c:	strdeq	r3, [r1], -r4
   12e40:	andeq	r3, r1, r8, lsl #14
   12e44:	andeq	r3, r1, r8, lsl #14
   12e48:	andeq	r3, r1, r8, lsl #14
   12e4c:	andeq	r3, r1, r8, lsl #14
   12e50:	andeq	r3, r1, r8, lsl #14
   12e54:	andeq	r3, r1, r8, lsl #14
   12e58:	andeq	r3, r1, r0, asr #13
   12e5c:			; <UNDEFINED> instruction: 0x000136b0
   12e60:			; <UNDEFINED> instruction: 0x000135b0
   12e64:	andeq	r3, r1, r8, ror r5
   12e68:	ldrdeq	r3, [r1], -r0
   12e6c:			; <UNDEFINED> instruction: 0x000135b8
   12e70:	andeq	r3, r1, r8, ror #9
   12e74:	andeq	r3, r1, r8, lsl #14
   12e78:	andeq	r3, r1, r8, lsl #14
   12e7c:	andeq	r3, r1, r8, lsl #14
   12e80:	andeq	r3, r1, r8, lsl #14
   12e84:	andeq	r3, r1, r8, lsl #14
   12e88:	andeq	r3, r1, r8, lsl #14
   12e8c:	andeq	r3, r1, r8, lsl #14
   12e90:	andeq	r3, r1, r8, lsl #14
   12e94:	andeq	r3, r1, r8, lsl #14
   12e98:	andeq	r3, r1, r8, lsl #14
   12e9c:	andeq	r3, r1, r8, lsl #14
   12ea0:	andeq	r3, r1, r8, lsl #14
   12ea4:	andeq	r3, r1, r8, lsl #14
   12ea8:	andeq	r3, r1, r8, lsl #14
   12eac:	andeq	r3, r1, r8, lsl #14
   12eb0:	andeq	r3, r1, r8, lsl #14
   12eb4:	andeq	r3, r1, r8, lsl #14
   12eb8:	andeq	r3, r1, r8, lsl #14
   12ebc:	andeq	r3, r1, r8, asr #13
   12ec0:	ldrdeq	r3, [r1], -ip
   12ec4:	ldrdeq	r3, [r1], -ip
   12ec8:	andeq	r3, r1, r0, ror #13
   12ecc:	ldrdeq	r3, [r1], -ip
   12ed0:	strdeq	r3, [r1], -ip
   12ed4:	ldrdeq	r3, [r1], -ip
   12ed8:	andeq	r3, r1, ip, lsl r4
   12edc:	ldrdeq	r3, [r1], -ip
   12ee0:	ldrdeq	r3, [r1], -ip
   12ee4:	ldrdeq	r3, [r1], -ip
   12ee8:	strdeq	r3, [r1], -ip
   12eec:	strdeq	r3, [r1], -ip
   12ef0:	strdeq	r3, [r1], -ip
   12ef4:	strdeq	r3, [r1], -ip
   12ef8:	strdeq	r3, [r1], -ip
   12efc:	strdeq	r3, [r1], -ip
   12f00:	strdeq	r3, [r1], -ip
   12f04:	strdeq	r3, [r1], -ip
   12f08:	strdeq	r3, [r1], -ip
   12f0c:	strdeq	r3, [r1], -ip
   12f10:	strdeq	r3, [r1], -ip
   12f14:	strdeq	r3, [r1], -ip
   12f18:	strdeq	r3, [r1], -ip
   12f1c:	strdeq	r3, [r1], -ip
   12f20:	strdeq	r3, [r1], -ip
   12f24:	strdeq	r3, [r1], -ip
   12f28:	ldrdeq	r3, [r1], -ip
   12f2c:	ldrdeq	r3, [r1], -ip
   12f30:	ldrdeq	r3, [r1], -ip
   12f34:	ldrdeq	r3, [r1], -ip
   12f38:	strdeq	r3, [r1], -r0
   12f3c:	andeq	r3, r1, r8, lsl #14
   12f40:	strdeq	r3, [r1], -ip
   12f44:	strdeq	r3, [r1], -ip
   12f48:	strdeq	r3, [r1], -ip
   12f4c:	strdeq	r3, [r1], -ip
   12f50:	strdeq	r3, [r1], -ip
   12f54:	strdeq	r3, [r1], -ip
   12f58:	strdeq	r3, [r1], -ip
   12f5c:	strdeq	r3, [r1], -ip
   12f60:	strdeq	r3, [r1], -ip
   12f64:	strdeq	r3, [r1], -ip
   12f68:	strdeq	r3, [r1], -ip
   12f6c:	strdeq	r3, [r1], -ip
   12f70:	strdeq	r3, [r1], -ip
   12f74:	strdeq	r3, [r1], -ip
   12f78:	strdeq	r3, [r1], -ip
   12f7c:	strdeq	r3, [r1], -ip
   12f80:	strdeq	r3, [r1], -ip
   12f84:	strdeq	r3, [r1], -ip
   12f88:	strdeq	r3, [r1], -ip
   12f8c:	strdeq	r3, [r1], -ip
   12f90:	strdeq	r3, [r1], -ip
   12f94:	strdeq	r3, [r1], -ip
   12f98:	strdeq	r3, [r1], -ip
   12f9c:	strdeq	r3, [r1], -ip
   12fa0:	strdeq	r3, [r1], -ip
   12fa4:	strdeq	r3, [r1], -ip
   12fa8:	ldrdeq	r3, [r1], -ip
   12fac:	andeq	r3, r1, r8, lsr #7
   12fb0:	strdeq	r3, [r1], -ip
   12fb4:	ldrdeq	r3, [r1], -ip
   12fb8:	strdeq	r3, [r1], -ip
   12fbc:	ldrdeq	r3, [r1], -ip
   12fc0:	strdeq	r3, [r1], -ip
   12fc4:	strdeq	r3, [r1], -ip
   12fc8:	strdeq	r3, [r1], -ip
   12fcc:	strdeq	r3, [r1], -ip
   12fd0:	strdeq	r3, [r1], -ip
   12fd4:	strdeq	r3, [r1], -ip
   12fd8:	strdeq	r3, [r1], -ip
   12fdc:	strdeq	r3, [r1], -ip
   12fe0:	strdeq	r3, [r1], -ip
   12fe4:	strdeq	r3, [r1], -ip
   12fe8:	strdeq	r3, [r1], -ip
   12fec:	strdeq	r3, [r1], -ip
   12ff0:	strdeq	r3, [r1], -ip
   12ff4:	strdeq	r3, [r1], -ip
   12ff8:	strdeq	r3, [r1], -ip
   12ffc:	strdeq	r3, [r1], -ip
   13000:	strdeq	r3, [r1], -ip
   13004:	strdeq	r3, [r1], -ip
   13008:	strdeq	r3, [r1], -ip
   1300c:	strdeq	r3, [r1], -ip
   13010:	strdeq	r3, [r1], -ip
   13014:	strdeq	r3, [r1], -ip
   13018:	strdeq	r3, [r1], -ip
   1301c:	strdeq	r3, [r1], -ip
   13020:	strdeq	r3, [r1], -ip
   13024:	strdeq	r3, [r1], -ip
   13028:	andeq	r3, r1, r0, asr #3
   1302c:	ldrdeq	r3, [r1], -ip
   13030:	andeq	r3, r1, r0, asr #3
   13034:	andeq	r3, r1, r0, ror #13
   13038:	cmp	r4, #0
   1303c:	moveq	r3, #1
   13040:	streq	r3, [sp, #28]
   13044:	beq	13770 <__assert_fail@plt+0x20a4>
   13048:	mov	r3, #0
   1304c:	mov	r4, r3
   13050:	mov	r2, #1
   13054:	str	r2, [sp, #40]	; 0x28
   13058:	str	r3, [sp, #68]	; 0x44
   1305c:	str	r2, [sp, #32]
   13060:	str	r2, [sp, #52]	; 0x34
   13064:	ldr	r3, [pc, #2584]	; 13a84 <__assert_fail@plt+0x23b8>
   13068:	str	r4, [sp, #44]	; 0x2c
   1306c:	str	r4, [sp, #72]	; 0x48
   13070:	str	r4, [sp, #28]
   13074:	str	r3, [sp, #60]	; 0x3c
   13078:	mov	r8, #2
   1307c:	b	12d68 <__assert_fail@plt+0x169c>
   13080:	cmp	r4, #0
   13084:	bne	14310 <__assert_fail@plt+0x2c44>
   13088:	cmp	sl, #0
   1308c:	beq	140d0 <__assert_fail@plt+0x2a04>
   13090:	mov	r3, #34	; 0x22
   13094:	strb	r3, [fp]
   13098:	ldr	r3, [pc, #2528]	; 13a80 <__assert_fail@plt+0x23b4>
   1309c:	mov	r1, r4
   130a0:	mov	r2, #1
   130a4:	str	r4, [sp, #68]	; 0x44
   130a8:	str	r2, [sp, #40]	; 0x28
   130ac:	mov	r4, r2
   130b0:	str	r1, [sp, #44]	; 0x2c
   130b4:	str	r1, [sp, #72]	; 0x48
   130b8:	str	r1, [sp, #32]
   130bc:	str	r2, [sp, #28]
   130c0:	str	r2, [sp, #52]	; 0x34
   130c4:	str	r3, [sp, #60]	; 0x3c
   130c8:	b	12d68 <__assert_fail@plt+0x169c>
   130cc:	mov	r3, #0
   130d0:	str	r3, [sp, #68]	; 0x44
   130d4:	str	r3, [sp, #44]	; 0x2c
   130d8:	str	r3, [sp, #32]
   130dc:	str	r3, [sp, #28]
   130e0:	str	r3, [sp, #60]	; 0x3c
   130e4:	mov	r3, #1
   130e8:	str	r8, [sp, #72]	; 0x48
   130ec:	str	r8, [sp, #52]	; 0x34
   130f0:	mov	r4, r8
   130f4:	str	r3, [sp, #40]	; 0x28
   130f8:	b	12d68 <__assert_fail@plt+0x169c>
   130fc:	mov	r3, #1
   13100:	str	r3, [sp, #40]	; 0x28
   13104:	str	r3, [sp, #32]
   13108:	str	r3, [sp, #28]
   1310c:	str	r3, [sp, #52]	; 0x34
   13110:	ldr	r3, [pc, #2408]	; 13a80 <__assert_fail@plt+0x23b4>
   13114:	mov	r2, #0
   13118:	mov	r4, r2
   1311c:	str	r2, [sp, #68]	; 0x44
   13120:	str	r2, [sp, #44]	; 0x2c
   13124:	str	r2, [sp, #72]	; 0x48
   13128:	str	r3, [sp, #60]	; 0x3c
   1312c:	mov	r8, #5
   13130:	b	12d68 <__assert_fail@plt+0x169c>
   13134:	mov	r3, #0
   13138:	mov	r2, #1
   1313c:	str	r2, [sp, #40]	; 0x28
   13140:	mov	r4, r3
   13144:	str	r3, [sp, #68]	; 0x44
   13148:	str	r2, [sp, #28]
   1314c:	str	r3, [sp, #44]	; 0x2c
   13150:	str	r3, [sp, #72]	; 0x48
   13154:	str	r3, [sp, #32]
   13158:	str	r3, [sp, #52]	; 0x34
   1315c:	str	r3, [sp, #60]	; 0x3c
   13160:	b	12d68 <__assert_fail@plt+0x169c>
   13164:	mov	r2, #1
   13168:	mov	r3, #0
   1316c:	str	r2, [sp, #40]	; 0x28
   13170:	mov	r4, r3
   13174:	str	r3, [sp, #68]	; 0x44
   13178:	str	r8, [sp, #52]	; 0x34
   1317c:	str	r2, [sp, #32]
   13180:	b	13064 <__assert_fail@plt+0x1998>
   13184:	mov	r3, #1
   13188:	str	r3, [sp, #40]	; 0x28
   1318c:	str	r3, [sp, #32]
   13190:	str	r3, [sp, #28]
   13194:	str	r3, [sp, #52]	; 0x34
   13198:	ldr	r3, [pc, #2276]	; 13a84 <__assert_fail@plt+0x23b8>
   1319c:	mov	r2, #0
   131a0:	mov	r4, r2
   131a4:	str	r2, [sp, #68]	; 0x44
   131a8:	str	r2, [sp, #44]	; 0x2c
   131ac:	str	r2, [sp, #72]	; 0x48
   131b0:	str	r3, [sp, #60]	; 0x3c
   131b4:	mov	r8, #2
   131b8:	b	12d68 <__assert_fail@plt+0x169c>
   131bc:	mov	r7, #0
   131c0:	ldr	r3, [sp, #24]
   131c4:	cmn	r3, #1
   131c8:	beq	13d04 <__assert_fail@plt+0x2638>
   131cc:	ldr	r3, [sp, #24]
   131d0:	subs	r3, r3, #1
   131d4:	movne	r3, #1
   131d8:	cmp	r3, #0
   131dc:	sub	r2, fp, #2
   131e0:	clz	r2, r2
   131e4:	lsr	r2, r2, #5
   131e8:	bne	133e4 <__assert_fail@plt+0x1d18>
   131ec:	cmp	r9, #0
   131f0:	bne	133e4 <__assert_fail@plt+0x1d18>
   131f4:	ldr	r3, [sp, #32]
   131f8:	tst	r3, r2
   131fc:	bne	13504 <__assert_fail@plt+0x1e38>
   13200:	ldr	r3, [sp, #28]
   13204:	eor	r3, r3, #1
   13208:	orr	r3, r2, r3
   1320c:	ldr	r2, [sp, #32]
   13210:	eor	r3, r3, #1
   13214:	orrs	r3, r2, r3
   13218:	beq	13248 <__assert_fail@plt+0x1b7c>
   1321c:	mov	r3, #0
   13220:	ldr	r1, [sp, #56]	; 0x38
   13224:	cmp	r1, #0
   13228:	beq	13248 <__assert_fail@plt+0x1b7c>
   1322c:	lsr	r2, r5, #5
   13230:	and	r0, r5, #31
   13234:	uxtb	r2, r2
   13238:	ldr	r1, [r1, r2, lsl #2]
   1323c:	lsr	r2, r1, r0
   13240:	tst	r2, #1
   13244:	bne	13250 <__assert_fail@plt+0x1b84>
   13248:	cmp	r7, #0
   1324c:	beq	134a0 <__assert_fail@plt+0x1dd4>
   13250:	sub	r2, fp, #2
   13254:	clz	r2, r2
   13258:	lsr	r2, r2, #5
   1325c:	ldr	r3, [sp, #32]
   13260:	cmp	r3, #0
   13264:	bne	13590 <__assert_fail@plt+0x1ec4>
   13268:	ldr	r3, [sp, #44]	; 0x2c
   1326c:	eor	r3, r3, #1
   13270:	ands	r3, r2, r3
   13274:	beq	132ac <__assert_fail@plt+0x1be0>
   13278:	cmp	sl, r4
   1327c:	movhi	r2, #39	; 0x27
   13280:	strbhi	r2, [r8, r4]
   13284:	add	r2, r4, #1
   13288:	cmp	r2, sl
   1328c:	movcc	r1, #36	; 0x24
   13290:	strbcc	r1, [r8, r2]
   13294:	add	r2, r4, #2
   13298:	cmp	r2, sl
   1329c:	add	r4, r4, #3
   132a0:	movcc	r1, #39	; 0x27
   132a4:	strbcc	r1, [r8, r2]
   132a8:	str	r3, [sp, #44]	; 0x2c
   132ac:	cmp	r4, sl
   132b0:	movcc	r3, #92	; 0x5c
   132b4:	strbcc	r3, [r8, r4]
   132b8:	add	r9, r9, #1
   132bc:	add	r4, r4, #1
   132c0:	cmp	r4, sl
   132c4:	ldr	r3, [sp, #40]	; 0x28
   132c8:	strbcc	r5, [r8, r4]
   132cc:	cmp	r6, #0
   132d0:	moveq	r3, #0
   132d4:	str	r3, [sp, #40]	; 0x28
   132d8:	ldr	r3, [sp, #24]
   132dc:	add	r4, r4, #1
   132e0:	cmn	r3, #1
   132e4:	bne	12d84 <__assert_fail@plt+0x16b8>
   132e8:	ldr	r3, [sp, #36]	; 0x24
   132ec:	ldrb	r6, [r3, r9]
   132f0:	adds	r6, r6, #0
   132f4:	movne	r6, #1
   132f8:	cmp	r6, #0
   132fc:	bne	12d98 <__assert_fail@plt+0x16cc>
   13300:	str	fp, [sp, #160]	; 0xa0
   13304:	mov	fp, r8
   13308:	ldr	r8, [sp, #160]	; 0xa0
   1330c:	ldr	r1, [sp, #32]
   13310:	cmp	r4, #0
   13314:	sub	r2, r8, #2
   13318:	clz	r2, r2
   1331c:	lsr	r2, r2, #5
   13320:	andeq	r3, r2, r1
   13324:	movne	r3, #0
   13328:	cmp	r3, #0
   1332c:	bne	14418 <__assert_fail@plt+0x2d4c>
   13330:	eor	r3, r1, #1
   13334:	ands	r2, r2, r3
   13338:	beq	14354 <__assert_fail@plt+0x2c88>
   1333c:	ldr	r3, [sp, #68]	; 0x44
   13340:	cmp	r3, #0
   13344:	beq	14358 <__assert_fail@plt+0x2c8c>
   13348:	ldr	r3, [sp, #40]	; 0x28
   1334c:	cmp	r3, #0
   13350:	bne	143d4 <__assert_fail@plt+0x2d08>
   13354:	ldr	r3, [sp, #72]	; 0x48
   13358:	adds	r3, r3, #0
   1335c:	movne	r3, #1
   13360:	cmp	sl, #0
   13364:	movne	r3, #0
   13368:	cmp	r3, #0
   1336c:	ldreq	r2, [sp, #68]	; 0x44
   13370:	beq	14358 <__assert_fail@plt+0x2c8c>
   13374:	ldr	sl, [sp, #72]	; 0x48
   13378:	str	r3, [sp, #68]	; 0x44
   1337c:	ldr	r3, [pc, #1792]	; 13a84 <__assert_fail@plt+0x23b8>
   13380:	mov	r2, #39	; 0x27
   13384:	mov	r4, #1
   13388:	str	r3, [sp, #60]	; 0x3c
   1338c:	mov	r3, #0
   13390:	strb	r2, [fp]
   13394:	str	r4, [sp, #52]	; 0x34
   13398:	mov	r8, #2
   1339c:	str	r3, [sp, #32]
   133a0:	b	12d68 <__assert_fail@plt+0x169c>
   133a4:	mov	r7, #0
   133a8:	cmp	fp, #2
   133ac:	beq	13ce4 <__assert_fail@plt+0x2618>
   133b0:	ldr	r3, [sp, #52]	; 0x34
   133b4:	ldr	r2, [sp, #28]
   133b8:	ldr	r1, [sp, #32]
   133bc:	cmp	r3, #0
   133c0:	andne	r2, r2, r1
   133c4:	moveq	r2, #0
   133c8:	cmp	r2, #0
   133cc:	moveq	r5, #92	; 0x5c
   133d0:	moveq	r3, r5
   133d4:	bne	13cf0 <__assert_fail@plt+0x2624>
   133d8:	ldr	r1, [sp, #28]
   133dc:	cmp	r1, #0
   133e0:	bne	14460 <__assert_fail@plt+0x2d94>
   133e4:	mov	r6, #0
   133e8:	b	13200 <__assert_fail@plt+0x1b34>
   133ec:	mov	r7, #0
   133f0:	cmp	fp, #2
   133f4:	beq	13d54 <__assert_fail@plt+0x2688>
   133f8:	cmp	fp, #5
   133fc:	beq	13d18 <__assert_fail@plt+0x264c>
   13400:	sub	r2, fp, #2
   13404:	mov	r6, #0
   13408:	clz	r2, r2
   1340c:	mov	r5, #63	; 0x3f
   13410:	lsr	r2, r2, #5
   13414:	b	13200 <__assert_fail@plt+0x1b34>
   13418:	mov	r7, #0
   1341c:	cmp	fp, #2
   13420:	strne	r6, [sp, #68]	; 0x44
   13424:	movne	r2, #0
   13428:	movne	r5, #39	; 0x27
   1342c:	bne	13200 <__assert_fail@plt+0x1b34>
   13430:	ldr	r3, [sp, #32]
   13434:	cmp	r3, #0
   13438:	bne	14134 <__assert_fail@plt+0x2a68>
   1343c:	cmp	sl, #0
   13440:	ldr	r3, [sp, #72]	; 0x48
   13444:	clz	r3, r3
   13448:	lsr	r3, r3, #5
   1344c:	moveq	r3, #0
   13450:	cmp	r3, #0
   13454:	bne	14068 <__assert_fail@plt+0x299c>
   13458:	cmp	sl, r4
   1345c:	movhi	r3, #39	; 0x27
   13460:	strbhi	r3, [r8, r4]
   13464:	add	r3, r4, #1
   13468:	cmp	sl, r3
   1346c:	movhi	r2, #92	; 0x5c
   13470:	strbhi	r2, [r8, r3]
   13474:	add	r3, r4, #2
   13478:	cmp	sl, r3
   1347c:	movhi	r2, #39	; 0x27
   13480:	strbhi	r2, [r8, r3]
   13484:	mov	r3, #0
   13488:	cmp	r7, #0
   1348c:	add	r4, r4, #3
   13490:	str	r3, [sp, #44]	; 0x2c
   13494:	str	r6, [sp, #68]	; 0x44
   13498:	mov	r5, #39	; 0x27
   1349c:	bne	13250 <__assert_fail@plt+0x1b84>
   134a0:	ldr	r2, [sp, #44]	; 0x2c
   134a4:	eor	r3, r3, #1
   134a8:	and	r3, r3, r2
   134ac:	add	r9, r9, #1
   134b0:	uxtb	r3, r3
   134b4:	cmp	r3, #0
   134b8:	beq	132c0 <__assert_fail@plt+0x1bf4>
   134bc:	cmp	sl, r4
   134c0:	movhi	r3, #39	; 0x27
   134c4:	strbhi	r3, [r8, r4]
   134c8:	add	r3, r4, #1
   134cc:	cmp	sl, r3
   134d0:	movhi	r2, #39	; 0x27
   134d4:	strbhi	r2, [r8, r3]
   134d8:	mov	r3, #0
   134dc:	add	r4, r4, #2
   134e0:	str	r3, [sp, #44]	; 0x2c
   134e4:	b	132c0 <__assert_fail@plt+0x1bf4>
   134e8:	mov	r3, #114	; 0x72
   134ec:	ldr	r1, [sp, #32]
   134f0:	sub	r2, fp, #2
   134f4:	clz	r2, r2
   134f8:	lsr	r2, r2, #5
   134fc:	tst	r2, r1
   13500:	beq	133d8 <__assert_fail@plt+0x1d0c>
   13504:	mov	fp, r8
   13508:	mov	r8, #2
   1350c:	ldr	r3, [sp, #28]
   13510:	cmp	r3, #0
   13514:	movne	r8, #4
   13518:	ldr	r3, [sp, #164]	; 0xa4
   1351c:	mov	ip, #0
   13520:	bic	r3, r3, #2
   13524:	str	r3, [sp, #4]
   13528:	ldr	r3, [sp, #76]	; 0x4c
   1352c:	str	r8, [sp]
   13530:	str	r3, [sp, #16]
   13534:	ldr	r3, [sp, #80]	; 0x50
   13538:	ldr	r2, [sp, #36]	; 0x24
   1353c:	str	r3, [sp, #12]
   13540:	mov	r1, sl
   13544:	ldr	r3, [sp, #24]
   13548:	mov	r0, fp
   1354c:	str	ip, [sp, #8]
   13550:	bl	12c70 <__assert_fail@plt+0x15a4>
   13554:	mov	r4, r0
   13558:	ldr	r3, [pc, #1304]	; 13a78 <__assert_fail@plt+0x23ac>
   1355c:	ldr	r2, [sp, #116]	; 0x74
   13560:	mov	r0, r4
   13564:	ldr	r3, [r3]
   13568:	cmp	r2, r3
   1356c:	bne	1445c <__assert_fail@plt+0x2d90>
   13570:	add	sp, sp, #124	; 0x7c
   13574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13578:	mov	r5, #110	; 0x6e
   1357c:	ldr	r3, [sp, #32]
   13580:	mov	r2, #0
   13584:	cmp	r3, #0
   13588:	mov	r6, r2
   1358c:	beq	13268 <__assert_fail@plt+0x1b9c>
   13590:	str	fp, [sp, #160]	; 0xa0
   13594:	mov	fp, r8
   13598:	ldr	r8, [sp, #160]	; 0xa0
   1359c:	mov	r3, r2
   135a0:	ldr	r2, [sp, #28]
   135a4:	and	r2, r2, r3
   135a8:	str	r2, [sp, #28]
   135ac:	b	1350c <__assert_fail@plt+0x1e40>
   135b0:	mov	r5, #116	; 0x74
   135b4:	b	1357c <__assert_fail@plt+0x1eb0>
   135b8:	mov	r5, #102	; 0x66
   135bc:	ldr	r3, [sp, #32]
   135c0:	cmp	r3, #0
   135c4:	bne	14170 <__assert_fail@plt+0x2aa4>
   135c8:	mov	r6, #0
   135cc:	b	132ac <__assert_fail@plt+0x1be0>
   135d0:	mov	r5, #118	; 0x76
   135d4:	b	135bc <__assert_fail@plt+0x1ef0>
   135d8:	mov	r7, #0
   135dc:	mov	r6, #0
   135e0:	b	1321c <__assert_fail@plt+0x1b50>
   135e4:	ldr	r3, [sp, #32]
   135e8:	cmp	r3, #0
   135ec:	bne	143b4 <__assert_fail@plt+0x2ce8>
   135f0:	mov	r7, r3
   135f4:	ldr	r3, [sp, #44]	; 0x2c
   135f8:	sub	r2, fp, #2
   135fc:	eor	r3, r3, #1
   13600:	clz	r2, r2
   13604:	lsr	r2, r2, #5
   13608:	ands	r3, r2, r3
   1360c:	beq	14054 <__assert_fail@plt+0x2988>
   13610:	cmp	sl, r4
   13614:	movhi	r1, #39	; 0x27
   13618:	strbhi	r1, [r8, r4]
   1361c:	add	r1, r4, #1
   13620:	cmp	sl, r1
   13624:	movhi	r0, #36	; 0x24
   13628:	strbhi	r0, [r8, r1]
   1362c:	add	r1, r4, #2
   13630:	cmp	sl, r1
   13634:	movhi	r0, #39	; 0x27
   13638:	strbhi	r0, [r8, r1]
   1363c:	add	r1, r4, #3
   13640:	cmp	sl, r1
   13644:	bls	140b4 <__assert_fail@plt+0x29e8>
   13648:	mov	r4, r1
   1364c:	mov	r1, #92	; 0x5c
   13650:	strb	r1, [r8, r4]
   13654:	mov	r1, r4
   13658:	str	r3, [sp, #44]	; 0x2c
   1365c:	cmp	fp, #2
   13660:	add	r4, r4, #1
   13664:	beq	140fc <__assert_fail@plt+0x2a30>
   13668:	ldr	r0, [sp, #24]
   1366c:	add	r3, r9, #1
   13670:	cmp	r3, r0
   13674:	bcs	1368c <__assert_fail@plt+0x1fc0>
   13678:	ldr	r0, [sp, #36]	; 0x24
   1367c:	ldrb	r3, [r0, r3]
   13680:	sub	r3, r3, #48	; 0x30
   13684:	cmp	r3, #9
   13688:	bls	1410c <__assert_fail@plt+0x2a40>
   1368c:	mov	r5, #48	; 0x30
   13690:	ldr	r3, [sp, #28]
   13694:	eor	r3, r3, #1
   13698:	orrs	r2, r2, r3
   1369c:	mov	r3, r6
   136a0:	moveq	r6, r2
   136a4:	beq	13220 <__assert_fail@plt+0x1b54>
   136a8:	mov	r6, #0
   136ac:	b	13248 <__assert_fail@plt+0x1b7c>
   136b0:	mov	r2, #0
   136b4:	mov	r6, r2
   136b8:	mov	r5, #98	; 0x62
   136bc:	b	13268 <__assert_fail@plt+0x1b9c>
   136c0:	mov	r5, #97	; 0x61
   136c4:	b	135c8 <__assert_fail@plt+0x1efc>
   136c8:	mov	r3, r7
   136cc:	mov	r6, r7
   136d0:	mov	r2, #0
   136d4:	mov	r7, r3
   136d8:	mov	r5, #32
   136dc:	b	13200 <__assert_fail@plt+0x1b34>
   136e0:	cmp	r9, #0
   136e4:	mov	r3, r7
   136e8:	bne	13cb0 <__assert_fail@plt+0x25e4>
   136ec:	mov	r6, r7
   136f0:	mov	r2, r9
   136f4:	mov	r7, r3
   136f8:	b	13200 <__assert_fail@plt+0x1b34>
   136fc:	mov	r6, r7
   13700:	b	1321c <__assert_fail@plt+0x1b50>
   13704:	mov	r7, #0
   13708:	ldr	r3, [sp, #64]	; 0x40
   1370c:	cmp	r3, #1
   13710:	bne	13d6c <__assert_fail@plt+0x26a0>
   13714:	bl	114ec <__ctype_b_loc@plt>
   13718:	ldr	r2, [sp, #64]	; 0x40
   1371c:	sxth	r3, r5
   13720:	mov	ip, r2
   13724:	lsl	r3, r3, #1
   13728:	ldr	r2, [r0]
   1372c:	ldrh	r3, [r2, r3]
   13730:	and	r3, r3, #16384	; 0x4000
   13734:	cmp	r3, #0
   13738:	ldr	r3, [sp, #28]
   1373c:	movne	r6, #1
   13740:	moveq	r6, #0
   13744:	movne	r2, #0
   13748:	andeq	r2, r3, #1
   1374c:	cmp	r2, #0
   13750:	bne	1407c <__assert_fail@plt+0x29b0>
   13754:	sub	r2, fp, #2
   13758:	clz	r2, r2
   1375c:	lsr	r2, r2, #5
   13760:	b	13200 <__assert_fail@plt+0x1b34>
   13764:	cmp	r4, #0
   13768:	bne	14428 <__assert_fail@plt+0x2d5c>
   1376c:	str	r4, [sp, #28]
   13770:	cmp	sl, #0
   13774:	bne	1446c <__assert_fail@plt+0x2da0>
   13778:	ldr	r3, [pc, #772]	; 13a84 <__assert_fail@plt+0x23b8>
   1377c:	mov	r4, #1
   13780:	str	r4, [sp, #40]	; 0x28
   13784:	str	r3, [sp, #60]	; 0x3c
   13788:	str	r4, [sp, #52]	; 0x34
   1378c:	str	sl, [sp, #72]	; 0x48
   13790:	str	sl, [sp, #68]	; 0x44
   13794:	str	sl, [sp, #44]	; 0x2c
   13798:	str	sl, [sp, #32]
   1379c:	mov	r8, #2
   137a0:	b	12d68 <__assert_fail@plt+0x169c>
   137a4:	ldr	r3, [sp, #36]	; 0x24
   137a8:	ldrb	r5, [r3, r9]
   137ac:	cmp	r5, #126	; 0x7e
   137b0:	ldrls	pc, [pc, r5, lsl #2]
   137b4:	b	13708 <__assert_fail@plt+0x203c>
   137b8:	andeq	r3, r1, ip, ror #19
   137bc:	andeq	r3, r1, r8, lsl #14
   137c0:	andeq	r3, r1, r8, lsl #14
   137c4:	andeq	r3, r1, r8, lsl #14
   137c8:	andeq	r3, r1, r8, lsl #14
   137cc:	andeq	r3, r1, r8, lsl #14
   137d0:	andeq	r3, r1, r8, lsl #14
   137d4:	ldrdeq	r3, [r1], -r8
   137d8:	andeq	r3, r1, r4, asr #19
   137dc:			; <UNDEFINED> instruction: 0x000139bc
   137e0:			; <UNDEFINED> instruction: 0x000139b4
   137e4:	andeq	r3, r1, r4, ror #20
   137e8:	andeq	r3, r1, r0, asr sl
   137ec:	andeq	r3, r1, r8, ror #9
   137f0:	andeq	r3, r1, r8, lsl #14
   137f4:	andeq	r3, r1, r8, lsl #14
   137f8:	andeq	r3, r1, r8, lsl #14
   137fc:	andeq	r3, r1, r8, lsl #14
   13800:	andeq	r3, r1, r8, lsl #14
   13804:	andeq	r3, r1, r8, lsl #14
   13808:	andeq	r3, r1, r8, lsl #14
   1380c:	andeq	r3, r1, r8, lsl #14
   13810:	andeq	r3, r1, r8, lsl #14
   13814:	andeq	r3, r1, r8, lsl #14
   13818:	andeq	r3, r1, r8, lsl #14
   1381c:	andeq	r3, r1, r8, lsl #14
   13820:	andeq	r3, r1, r8, lsl #14
   13824:	andeq	r3, r1, r8, lsl #14
   13828:	andeq	r3, r1, r8, lsl #14
   1382c:	andeq	r3, r1, r8, lsl #14
   13830:	andeq	r3, r1, r8, lsl #14
   13834:	andeq	r3, r1, r8, lsl #14
   13838:	andeq	r3, r1, r0, asr #20
   1383c:	andeq	r3, r1, ip, lsr #20
   13840:	andeq	r3, r1, ip, lsr #20
   13844:	andeq	r3, r1, ip, lsl sl
   13848:	andeq	r3, r1, ip, lsr #20
   1384c:	andeq	r3, r1, r4, asr r7
   13850:	andeq	r3, r1, ip, lsr #20
   13854:	andeq	r3, r1, ip, lsl r4
   13858:	andeq	r3, r1, ip, lsr #20
   1385c:	andeq	r3, r1, ip, lsr #20
   13860:	andeq	r3, r1, ip, lsr #20
   13864:	andeq	r3, r1, r4, asr r7
   13868:	andeq	r3, r1, r4, asr r7
   1386c:	andeq	r3, r1, r4, asr r7
   13870:	andeq	r3, r1, r4, asr r7
   13874:	andeq	r3, r1, r4, asr r7
   13878:	andeq	r3, r1, r4, asr r7
   1387c:	andeq	r3, r1, r4, asr r7
   13880:	andeq	r3, r1, r4, asr r7
   13884:	andeq	r3, r1, r4, asr r7
   13888:	andeq	r3, r1, r4, asr r7
   1388c:	andeq	r3, r1, r4, asr r7
   13890:	andeq	r3, r1, r4, asr r7
   13894:	andeq	r3, r1, r4, asr r7
   13898:	andeq	r3, r1, r4, asr r7
   1389c:	andeq	r3, r1, r4, asr r7
   138a0:	andeq	r3, r1, r4, asr r7
   138a4:	andeq	r3, r1, ip, lsr #20
   138a8:	andeq	r3, r1, ip, lsr #20
   138ac:	andeq	r3, r1, ip, lsr #20
   138b0:	andeq	r3, r1, ip, lsr #20
   138b4:	strdeq	r3, [r1], -r0
   138b8:	andeq	r3, r1, r8, lsl #14
   138bc:	andeq	r3, r1, r4, asr r7
   138c0:	andeq	r3, r1, r4, asr r7
   138c4:	andeq	r3, r1, r4, asr r7
   138c8:	andeq	r3, r1, r4, asr r7
   138cc:	andeq	r3, r1, r4, asr r7
   138d0:	andeq	r3, r1, r4, asr r7
   138d4:	andeq	r3, r1, r4, asr r7
   138d8:	andeq	r3, r1, r4, asr r7
   138dc:	andeq	r3, r1, r4, asr r7
   138e0:	andeq	r3, r1, r4, asr r7
   138e4:	andeq	r3, r1, r4, asr r7
   138e8:	andeq	r3, r1, r4, asr r7
   138ec:	andeq	r3, r1, r4, asr r7
   138f0:	andeq	r3, r1, r4, asr r7
   138f4:	andeq	r3, r1, r4, asr r7
   138f8:	andeq	r3, r1, r4, asr r7
   138fc:	andeq	r3, r1, r4, asr r7
   13900:	andeq	r3, r1, r4, asr r7
   13904:	andeq	r3, r1, r4, asr r7
   13908:	andeq	r3, r1, r4, asr r7
   1390c:	andeq	r3, r1, r4, asr r7
   13910:	andeq	r3, r1, r4, asr r7
   13914:	andeq	r3, r1, r4, asr r7
   13918:	andeq	r3, r1, r4, asr r7
   1391c:	andeq	r3, r1, r4, asr r7
   13920:	andeq	r3, r1, r4, asr r7
   13924:	andeq	r3, r1, ip, lsr #20
   13928:	andeq	r3, r1, r8, lsr #7
   1392c:	andeq	r3, r1, r4, asr r7
   13930:	andeq	r3, r1, ip, lsr #20
   13934:	andeq	r3, r1, r4, asr r7
   13938:	andeq	r3, r1, ip, lsr #20
   1393c:	andeq	r3, r1, r4, asr r7
   13940:	andeq	r3, r1, r4, asr r7
   13944:	andeq	r3, r1, r4, asr r7
   13948:	andeq	r3, r1, r4, asr r7
   1394c:	andeq	r3, r1, r4, asr r7
   13950:	andeq	r3, r1, r4, asr r7
   13954:	andeq	r3, r1, r4, asr r7
   13958:	andeq	r3, r1, r4, asr r7
   1395c:	andeq	r3, r1, r4, asr r7
   13960:	andeq	r3, r1, r4, asr r7
   13964:	andeq	r3, r1, r4, asr r7
   13968:	andeq	r3, r1, r4, asr r7
   1396c:	andeq	r3, r1, r4, asr r7
   13970:	andeq	r3, r1, r4, asr r7
   13974:	andeq	r3, r1, r4, asr r7
   13978:	andeq	r3, r1, r4, asr r7
   1397c:	andeq	r3, r1, r4, asr r7
   13980:	andeq	r3, r1, r4, asr r7
   13984:	andeq	r3, r1, r4, asr r7
   13988:	andeq	r3, r1, r4, asr r7
   1398c:	andeq	r3, r1, r4, asr r7
   13990:	andeq	r3, r1, r4, asr r7
   13994:	andeq	r3, r1, r4, asr r7
   13998:	andeq	r3, r1, r4, asr r7
   1399c:	andeq	r3, r1, r4, asr r7
   139a0:	andeq	r3, r1, r4, asr r7
   139a4:	andeq	r3, r1, r0, asr #3
   139a8:	andeq	r3, r1, ip, lsr #20
   139ac:	andeq	r3, r1, r0, asr #3
   139b0:	andeq	r3, r1, ip, lsl sl
   139b4:	mov	r3, #110	; 0x6e
   139b8:	b	134ec <__assert_fail@plt+0x1e20>
   139bc:	mov	r3, #116	; 0x74
   139c0:	b	134ec <__assert_fail@plt+0x1e20>
   139c4:	sub	r2, fp, #2
   139c8:	mov	r3, #98	; 0x62
   139cc:	clz	r2, r2
   139d0:	lsr	r2, r2, #5
   139d4:	b	133d8 <__assert_fail@plt+0x1d0c>
   139d8:	sub	r2, fp, #2
   139dc:	mov	r3, #97	; 0x61
   139e0:	clz	r2, r2
   139e4:	lsr	r2, r2, #5
   139e8:	b	133d8 <__assert_fail@plt+0x1d0c>
   139ec:	ldr	r3, [sp, #28]
   139f0:	cmp	r3, #0
   139f4:	bne	135e4 <__assert_fail@plt+0x1f18>
   139f8:	ldr	r3, [sp, #164]	; 0xa4
   139fc:	tst	r3, #1
   13a00:	bne	14074 <__assert_fail@plt+0x29a8>
   13a04:	ldr	r6, [sp, #28]
   13a08:	sub	r2, fp, #2
   13a0c:	mov	r7, r6
   13a10:	clz	r2, r2
   13a14:	lsr	r2, r2, #5
   13a18:	b	13200 <__assert_fail@plt+0x1b34>
   13a1c:	sub	r2, fp, #2
   13a20:	clz	r2, r2
   13a24:	lsr	r2, r2, #5
   13a28:	b	131ec <__assert_fail@plt+0x1b20>
   13a2c:	sub	r2, fp, #2
   13a30:	mov	r6, #0
   13a34:	clz	r2, r2
   13a38:	lsr	r2, r2, #5
   13a3c:	b	131f4 <__assert_fail@plt+0x1b28>
   13a40:	sub	r2, fp, #2
   13a44:	clz	r2, r2
   13a48:	lsr	r2, r2, #5
   13a4c:	b	131f4 <__assert_fail@plt+0x1b28>
   13a50:	sub	r2, fp, #2
   13a54:	mov	r3, #102	; 0x66
   13a58:	clz	r2, r2
   13a5c:	lsr	r2, r2, #5
   13a60:	b	133d8 <__assert_fail@plt+0x1d0c>
   13a64:	sub	r2, fp, #2
   13a68:	mov	r3, #118	; 0x76
   13a6c:	clz	r2, r2
   13a70:	lsr	r2, r2, #5
   13a74:	b	133d8 <__assert_fail@plt+0x1d0c>
   13a78:	andeq	fp, r2, r0, lsl #30
   13a7c:	ldrdeq	fp, [r1], -r8
   13a80:	andeq	fp, r1, r0, asr #1
   13a84:	ldrdeq	fp, [r1], -r4
   13a88:	ldr	r3, [sp, #48]	; 0x30
   13a8c:	ldrb	r5, [r3]
   13a90:	cmp	r5, #126	; 0x7e
   13a94:	ldrls	pc, [pc, r5, lsl #2]
   13a98:	b	13704 <__assert_fail@plt+0x2038>
   13a9c:	andeq	r3, r1, r4, ror #11
   13aa0:	andeq	r3, r1, r4, lsl #14
   13aa4:	andeq	r3, r1, r4, lsl #14
   13aa8:	andeq	r3, r1, r4, lsl #14
   13aac:	andeq	r3, r1, r4, lsl #14
   13ab0:	andeq	r3, r1, r4, lsl #14
   13ab4:	andeq	r3, r1, r4, lsl #14
   13ab8:	ldrdeq	r3, [r1], -ip
   13abc:	ldrdeq	r3, [r1], -r4
   13ac0:			; <UNDEFINED> instruction: 0x000135b0
   13ac4:	andeq	r3, r1, r8, ror r5
   13ac8:	ldrdeq	r3, [r1], -r0
   13acc:			; <UNDEFINED> instruction: 0x000135b8
   13ad0:	andeq	r3, r1, r8, asr #25
   13ad4:	andeq	r3, r1, r4, lsl #14
   13ad8:	andeq	r3, r1, r4, lsl #14
   13adc:	andeq	r3, r1, r4, lsl #14
   13ae0:	andeq	r3, r1, r4, lsl #14
   13ae4:	andeq	r3, r1, r4, lsl #14
   13ae8:	andeq	r3, r1, r4, lsl #14
   13aec:	andeq	r3, r1, r4, lsl #14
   13af0:	andeq	r3, r1, r4, lsl #14
   13af4:	andeq	r3, r1, r4, lsl #14
   13af8:	andeq	r3, r1, r4, lsl #14
   13afc:	andeq	r3, r1, r4, lsl #14
   13b00:	andeq	r3, r1, r4, lsl #14
   13b04:	andeq	r3, r1, r4, lsl #14
   13b08:	andeq	r3, r1, r4, lsl #14
   13b0c:	andeq	r3, r1, r4, lsl #14
   13b10:	andeq	r3, r1, r4, lsl #14
   13b14:	andeq	r3, r1, r4, lsl #14
   13b18:	andeq	r3, r1, r4, lsl #14
   13b1c:	andeq	r3, r1, r0, asr #25
   13b20:	ldrdeq	r3, [r1], -r8
   13b24:	ldrdeq	r3, [r1], -r8
   13b28:	andeq	r3, r1, r4, lsr #25
   13b2c:	ldrdeq	r3, [r1], -r8
   13b30:	muleq	r1, r8, ip
   13b34:	ldrdeq	r3, [r1], -r8
   13b38:	andeq	r3, r1, r8, lsl r4
   13b3c:	ldrdeq	r3, [r1], -r8
   13b40:	ldrdeq	r3, [r1], -r8
   13b44:	ldrdeq	r3, [r1], -r8
   13b48:	muleq	r1, r8, ip
   13b4c:	muleq	r1, r8, ip
   13b50:	muleq	r1, r8, ip
   13b54:	muleq	r1, r8, ip
   13b58:	muleq	r1, r8, ip
   13b5c:	muleq	r1, r8, ip
   13b60:	muleq	r1, r8, ip
   13b64:	muleq	r1, r8, ip
   13b68:	muleq	r1, r8, ip
   13b6c:	muleq	r1, r8, ip
   13b70:	muleq	r1, r8, ip
   13b74:	muleq	r1, r8, ip
   13b78:	muleq	r1, r8, ip
   13b7c:	muleq	r1, r8, ip
   13b80:	muleq	r1, r8, ip
   13b84:	muleq	r1, r8, ip
   13b88:	ldrdeq	r3, [r1], -r8
   13b8c:	ldrdeq	r3, [r1], -r8
   13b90:	ldrdeq	r3, [r1], -r8
   13b94:	ldrdeq	r3, [r1], -r8
   13b98:	andeq	r3, r1, ip, ror #7
   13b9c:	andeq	r3, r1, r4, lsl #14
   13ba0:	muleq	r1, r8, ip
   13ba4:	muleq	r1, r8, ip
   13ba8:	muleq	r1, r8, ip
   13bac:	muleq	r1, r8, ip
   13bb0:	muleq	r1, r8, ip
   13bb4:	muleq	r1, r8, ip
   13bb8:	muleq	r1, r8, ip
   13bbc:	muleq	r1, r8, ip
   13bc0:	muleq	r1, r8, ip
   13bc4:	muleq	r1, r8, ip
   13bc8:	muleq	r1, r8, ip
   13bcc:	muleq	r1, r8, ip
   13bd0:	muleq	r1, r8, ip
   13bd4:	muleq	r1, r8, ip
   13bd8:	muleq	r1, r8, ip
   13bdc:	muleq	r1, r8, ip
   13be0:	muleq	r1, r8, ip
   13be4:	muleq	r1, r8, ip
   13be8:	muleq	r1, r8, ip
   13bec:	muleq	r1, r8, ip
   13bf0:	muleq	r1, r8, ip
   13bf4:	muleq	r1, r8, ip
   13bf8:	muleq	r1, r8, ip
   13bfc:	muleq	r1, r8, ip
   13c00:	muleq	r1, r8, ip
   13c04:	muleq	r1, r8, ip
   13c08:	ldrdeq	r3, [r1], -r8
   13c0c:	andeq	r3, r1, r4, lsr #7
   13c10:	muleq	r1, r8, ip
   13c14:	ldrdeq	r3, [r1], -r8
   13c18:	muleq	r1, r8, ip
   13c1c:	ldrdeq	r3, [r1], -r8
   13c20:	muleq	r1, r8, ip
   13c24:	muleq	r1, r8, ip
   13c28:	muleq	r1, r8, ip
   13c2c:	muleq	r1, r8, ip
   13c30:	muleq	r1, r8, ip
   13c34:	muleq	r1, r8, ip
   13c38:	muleq	r1, r8, ip
   13c3c:	muleq	r1, r8, ip
   13c40:	muleq	r1, r8, ip
   13c44:	muleq	r1, r8, ip
   13c48:	muleq	r1, r8, ip
   13c4c:	muleq	r1, r8, ip
   13c50:	muleq	r1, r8, ip
   13c54:	muleq	r1, r8, ip
   13c58:	muleq	r1, r8, ip
   13c5c:	muleq	r1, r8, ip
   13c60:	muleq	r1, r8, ip
   13c64:	muleq	r1, r8, ip
   13c68:	muleq	r1, r8, ip
   13c6c:	muleq	r1, r8, ip
   13c70:	muleq	r1, r8, ip
   13c74:	muleq	r1, r8, ip
   13c78:	muleq	r1, r8, ip
   13c7c:	muleq	r1, r8, ip
   13c80:	muleq	r1, r8, ip
   13c84:	muleq	r1, r8, ip
   13c88:			; <UNDEFINED> instruction: 0x000131bc
   13c8c:	ldrdeq	r3, [r1], -r8
   13c90:			; <UNDEFINED> instruction: 0x000131bc
   13c94:	andeq	r3, r1, r4, lsr #25
   13c98:	mov	r6, r7
   13c9c:	mov	r7, #0
   13ca0:	b	1321c <__assert_fail@plt+0x1b50>
   13ca4:	cmp	r9, #0
   13ca8:	mov	r3, #0
   13cac:	beq	136ec <__assert_fail@plt+0x2020>
   13cb0:	mov	r6, #0
   13cb4:	mov	r7, r3
   13cb8:	mov	r3, r6
   13cbc:	b	13220 <__assert_fail@plt+0x1b54>
   13cc0:	mov	r3, #0
   13cc4:	b	136cc <__assert_fail@plt+0x2000>
   13cc8:	mov	r7, #0
   13ccc:	mov	r3, #114	; 0x72
   13cd0:	b	134ec <__assert_fail@plt+0x1e20>
   13cd4:	mov	r5, #98	; 0x62
   13cd8:	b	1357c <__assert_fail@plt+0x1eb0>
   13cdc:	mov	r5, #97	; 0x61
   13ce0:	b	135bc <__assert_fail@plt+0x1ef0>
   13ce4:	ldr	r3, [sp, #32]
   13ce8:	cmp	r3, #0
   13cec:	bne	14134 <__assert_fail@plt+0x2a68>
   13cf0:	add	r9, r9, #1
   13cf4:	ldr	r3, [sp, #44]	; 0x2c
   13cf8:	mov	r6, #0
   13cfc:	mov	r5, #92	; 0x5c
   13d00:	b	134b4 <__assert_fail@plt+0x1de8>
   13d04:	ldr	r3, [sp, #36]	; 0x24
   13d08:	ldrb	r3, [r3, #1]
   13d0c:	adds	r3, r3, #0
   13d10:	movne	r3, #1
   13d14:	b	131d8 <__assert_fail@plt+0x1b0c>
   13d18:	ldr	r3, [sp, #164]	; 0xa4
   13d1c:	ands	r3, r3, #4
   13d20:	beq	13d44 <__assert_fail@plt+0x2678>
   13d24:	ldr	r2, [sp, #24]
   13d28:	add	r3, r9, #2
   13d2c:	cmp	r3, r2
   13d30:	bcs	13d44 <__assert_fail@plt+0x2678>
   13d34:	ldr	r2, [sp, #48]	; 0x30
   13d38:	ldrb	r5, [r2, #1]
   13d3c:	cmp	r5, #63	; 0x3f
   13d40:	beq	141a8 <__assert_fail@plt+0x2adc>
   13d44:	mov	r2, #0
   13d48:	mov	r6, r2
   13d4c:	mov	r5, #63	; 0x3f
   13d50:	b	13200 <__assert_fail@plt+0x1b34>
   13d54:	ldr	r3, [sp, #32]
   13d58:	cmp	r3, #0
   13d5c:	bne	14134 <__assert_fail@plt+0x2a68>
   13d60:	mov	r6, r3
   13d64:	mov	r5, #63	; 0x3f
   13d68:	b	13248 <__assert_fail@plt+0x1b7c>
   13d6c:	ldr	r3, [sp, #24]
   13d70:	cmn	r3, #1
   13d74:	mov	r3, #0
   13d78:	str	r3, [sp, #108]	; 0x6c
   13d7c:	str	r3, [sp, #112]	; 0x70
   13d80:	bne	13d90 <__assert_fail@plt+0x26c4>
   13d84:	ldr	r0, [sp, #36]	; 0x24
   13d88:	bl	11528 <strlen@plt>
   13d8c:	str	r0, [sp, #24]
   13d90:	mov	r3, #0
   13d94:	str	sl, [sp, #88]	; 0x58
   13d98:	ldr	sl, [sp, #36]	; 0x24
   13d9c:	str	r5, [sp, #92]	; 0x5c
   13da0:	mov	r5, r3
   13da4:	str	r7, [sp, #96]	; 0x60
   13da8:	str	r4, [sp, #100]	; 0x64
   13dac:	str	r8, [sp, #84]	; 0x54
   13db0:	ldr	r3, [sp, #24]
   13db4:	add	r4, r9, r5
   13db8:	add	r7, sl, r4
   13dbc:	sub	r2, r3, r4
   13dc0:	mov	r1, r7
   13dc4:	add	r3, sp, #108	; 0x6c
   13dc8:	add	r0, sp, #104	; 0x68
   13dcc:	bl	17928 <fts_children@@Base+0x204>
   13dd0:	subs	r8, r0, #0
   13dd4:	beq	13e24 <__assert_fail@plt+0x2758>
   13dd8:	cmn	r8, #1
   13ddc:	beq	14184 <__assert_fail@plt+0x2ab8>
   13de0:	cmn	r8, #2
   13de4:	beq	142a4 <__assert_fail@plt+0x2bd8>
   13de8:	ldr	r3, [sp, #32]
   13dec:	cmp	fp, #2
   13df0:	movne	r3, #0
   13df4:	andeq	r3, r3, #1
   13df8:	cmp	r3, #0
   13dfc:	bne	13f84 <__assert_fail@plt+0x28b8>
   13e00:	ldr	r0, [sp, #104]	; 0x68
   13e04:	bl	11414 <iswprint@plt>
   13e08:	add	r5, r5, r8
   13e0c:	cmp	r0, #0
   13e10:	add	r0, sp, #108	; 0x6c
   13e14:	moveq	r6, #0
   13e18:	bl	11384 <mbsinit@plt>
   13e1c:	cmp	r0, #0
   13e20:	beq	13db0 <__assert_fail@plt+0x26e4>
   13e24:	ldr	r3, [sp, #28]
   13e28:	mov	ip, r5
   13e2c:	eor	r2, r6, #1
   13e30:	ldr	r5, [sp, #92]	; 0x5c
   13e34:	ldr	r7, [sp, #96]	; 0x60
   13e38:	ldr	r4, [sp, #100]	; 0x64
   13e3c:	ldr	r8, [sp, #84]	; 0x54
   13e40:	ldr	sl, [sp, #88]	; 0x58
   13e44:	and	r2, r2, r3
   13e48:	cmp	ip, #1
   13e4c:	bls	1374c <__assert_fail@plt+0x2080>
   13e50:	add	r1, ip, r9
   13e54:	ldr	lr, [sp, #48]	; 0x30
   13e58:	mov	r0, #0
   13e5c:	str	r6, [sp, #48]	; 0x30
   13e60:	mov	ip, #39	; 0x27
   13e64:	ldr	r6, [sp, #44]	; 0x2c
   13e68:	b	13f20 <__assert_fail@plt+0x2854>
   13e6c:	ldr	r0, [sp, #32]
   13e70:	sub	r3, fp, #2
   13e74:	cmp	r0, #0
   13e78:	clz	r3, r3
   13e7c:	lsr	r3, r3, #5
   13e80:	bne	14088 <__assert_fail@plt+0x29bc>
   13e84:	eor	r0, r6, #1
   13e88:	ands	r3, r3, r0
   13e8c:	beq	13ebc <__assert_fail@plt+0x27f0>
   13e90:	add	r0, r4, #1
   13e94:	cmp	sl, r4
   13e98:	strbhi	ip, [r8, r4]
   13e9c:	cmp	sl, r0
   13ea0:	movhi	r6, #36	; 0x24
   13ea4:	strbhi	r6, [r8, r0]
   13ea8:	add	r0, r4, #2
   13eac:	mov	r6, r3
   13eb0:	add	r4, r4, #3
   13eb4:	cmp	sl, r0
   13eb8:	strbhi	ip, [r8, r0]
   13ebc:	cmp	sl, r4
   13ec0:	movhi	r3, #92	; 0x5c
   13ec4:	strbhi	r3, [r8, r4]
   13ec8:	add	r3, r4, #1
   13ecc:	cmp	sl, r3
   13ed0:	lsrhi	r0, r5, #6
   13ed4:	addhi	r0, r0, #48	; 0x30
   13ed8:	strbhi	r0, [r8, r3]
   13edc:	add	r0, r4, #2
   13ee0:	cmp	sl, r0
   13ee4:	lsrhi	r3, r5, #3
   13ee8:	andhi	r3, r3, #7
   13eec:	addhi	r3, r3, #48	; 0x30
   13ef0:	add	r9, r9, #1
   13ef4:	strbhi	r3, [r8, r0]
   13ef8:	and	r5, r5, #7
   13efc:	cmp	r9, r1
   13f00:	add	r5, r5, #48	; 0x30
   13f04:	add	r4, r4, #3
   13f08:	bcs	140a8 <__assert_fail@plt+0x29dc>
   13f0c:	mov	r0, r2
   13f10:	cmp	sl, r4
   13f14:	strbhi	r5, [r8, r4]
   13f18:	ldrb	r5, [lr, #1]!
   13f1c:	add	r4, r4, #1
   13f20:	cmp	r2, #0
   13f24:	bne	13e6c <__assert_fail@plt+0x27a0>
   13f28:	eor	r3, r0, #1
   13f2c:	and	r3, r3, r6
   13f30:	cmp	r7, #0
   13f34:	uxtb	r3, r3
   13f38:	beq	13f4c <__assert_fail@plt+0x2880>
   13f3c:	cmp	sl, r4
   13f40:	movhi	r7, #92	; 0x5c
   13f44:	strbhi	r7, [r8, r4]
   13f48:	add	r4, r4, #1
   13f4c:	add	r9, r9, #1
   13f50:	cmp	r9, r1
   13f54:	bcs	1409c <__assert_fail@plt+0x29d0>
   13f58:	cmp	r3, #0
   13f5c:	beq	140c8 <__assert_fail@plt+0x29fc>
   13f60:	cmp	sl, r4
   13f64:	add	r3, r4, #1
   13f68:	strbhi	ip, [r8, r4]
   13f6c:	mov	r7, #0
   13f70:	cmp	sl, r3
   13f74:	strbhi	ip, [r8, r3]
   13f78:	add	r4, r4, #2
   13f7c:	mov	r6, r7
   13f80:	b	13f10 <__assert_fail@plt+0x2844>
   13f84:	cmp	r8, #1
   13f88:	beq	13e00 <__assert_fail@plt+0x2734>
   13f8c:	add	r1, r4, #1
   13f90:	add	r3, sl, r8
   13f94:	add	r1, sl, r1
   13f98:	add	r4, r3, r4
   13f9c:	ldrb	r3, [r1], #1
   13fa0:	sub	r3, r3, #91	; 0x5b
   13fa4:	cmp	r3, #33	; 0x21
   13fa8:	ldrls	pc, [pc, r3, lsl #2]
   13fac:	b	14038 <__assert_fail@plt+0x296c>
   13fb0:	andeq	r4, r1, r4, asr #32
   13fb4:	andeq	r4, r1, r4, asr #32
   13fb8:	andeq	r4, r1, r8, lsr r0
   13fbc:	andeq	r4, r1, r4, asr #32
   13fc0:	andeq	r4, r1, r8, lsr r0
   13fc4:	andeq	r4, r1, r4, asr #32
   13fc8:	andeq	r4, r1, r8, lsr r0
   13fcc:	andeq	r4, r1, r8, lsr r0
   13fd0:	andeq	r4, r1, r8, lsr r0
   13fd4:	andeq	r4, r1, r8, lsr r0
   13fd8:	andeq	r4, r1, r8, lsr r0
   13fdc:	andeq	r4, r1, r8, lsr r0
   13fe0:	andeq	r4, r1, r8, lsr r0
   13fe4:	andeq	r4, r1, r8, lsr r0
   13fe8:	andeq	r4, r1, r8, lsr r0
   13fec:	andeq	r4, r1, r8, lsr r0
   13ff0:	andeq	r4, r1, r8, lsr r0
   13ff4:	andeq	r4, r1, r8, lsr r0
   13ff8:	andeq	r4, r1, r8, lsr r0
   13ffc:	andeq	r4, r1, r8, lsr r0
   14000:	andeq	r4, r1, r8, lsr r0
   14004:	andeq	r4, r1, r8, lsr r0
   14008:	andeq	r4, r1, r8, lsr r0
   1400c:	andeq	r4, r1, r8, lsr r0
   14010:	andeq	r4, r1, r8, lsr r0
   14014:	andeq	r4, r1, r8, lsr r0
   14018:	andeq	r4, r1, r8, lsr r0
   1401c:	andeq	r4, r1, r8, lsr r0
   14020:	andeq	r4, r1, r8, lsr r0
   14024:	andeq	r4, r1, r8, lsr r0
   14028:	andeq	r4, r1, r8, lsr r0
   1402c:	andeq	r4, r1, r8, lsr r0
   14030:	andeq	r4, r1, r8, lsr r0
   14034:	andeq	r4, r1, r4, asr #32
   14038:	cmp	r4, r1
   1403c:	bne	13f9c <__assert_fail@plt+0x28d0>
   14040:	b	13e00 <__assert_fail@plt+0x2734>
   14044:	ldr	fp, [sp, #84]	; 0x54
   14048:	ldr	sl, [sp, #88]	; 0x58
   1404c:	mov	r8, #2
   14050:	b	1350c <__assert_fail@plt+0x1e40>
   14054:	cmp	sl, r4
   14058:	movls	r1, r4
   1405c:	bls	1365c <__assert_fail@plt+0x1f90>
   14060:	ldr	r3, [sp, #44]	; 0x2c
   14064:	b	1364c <__assert_fail@plt+0x1f80>
   14068:	str	sl, [sp, #72]	; 0x48
   1406c:	ldr	sl, [sp, #32]
   14070:	b	13484 <__assert_fail@plt+0x1db8>
   14074:	add	r9, r9, #1
   14078:	b	12d78 <__assert_fail@plt+0x16ac>
   1407c:	ldr	r2, [sp, #28]
   14080:	mov	r6, #0
   14084:	b	13e50 <__assert_fail@plt+0x2784>
   14088:	str	fp, [sp, #160]	; 0xa0
   1408c:	str	r3, [sp, #28]
   14090:	mov	fp, r8
   14094:	ldr	r8, [sp, #160]	; 0xa0
   14098:	b	1350c <__assert_fail@plt+0x1e40>
   1409c:	str	r6, [sp, #44]	; 0x2c
   140a0:	ldr	r6, [sp, #48]	; 0x30
   140a4:	b	134b4 <__assert_fail@plt+0x1de8>
   140a8:	str	r6, [sp, #44]	; 0x2c
   140ac:	ldr	r6, [sp, #48]	; 0x30
   140b0:	b	132c0 <__assert_fail@plt+0x1bf4>
   140b4:	add	r4, r4, #4
   140b8:	str	r3, [sp, #44]	; 0x2c
   140bc:	mov	r6, #0
   140c0:	mov	r5, #48	; 0x30
   140c4:	b	13248 <__assert_fail@plt+0x1b7c>
   140c8:	mov	r7, r3
   140cc:	b	13f10 <__assert_fail@plt+0x2844>
   140d0:	ldr	r3, [pc, #-1624]	; 13a80 <__assert_fail@plt+0x23b4>
   140d4:	mov	r4, #1
   140d8:	str	r4, [sp, #40]	; 0x28
   140dc:	str	r4, [sp, #28]
   140e0:	str	r4, [sp, #52]	; 0x34
   140e4:	str	sl, [sp, #72]	; 0x48
   140e8:	str	sl, [sp, #68]	; 0x44
   140ec:	str	sl, [sp, #44]	; 0x2c
   140f0:	str	sl, [sp, #32]
   140f4:	str	r3, [sp, #60]	; 0x3c
   140f8:	b	12d68 <__assert_fail@plt+0x169c>
   140fc:	mov	r3, r6
   14100:	mov	r5, #48	; 0x30
   14104:	mov	r6, #0
   14108:	b	13248 <__assert_fail@plt+0x1b7c>
   1410c:	cmp	sl, r4
   14110:	movhi	r3, #48	; 0x30
   14114:	strbhi	r3, [r8, r4]
   14118:	add	r3, r1, #2
   1411c:	cmp	sl, r3
   14120:	movhi	r0, #48	; 0x30
   14124:	strbhi	r0, [r8, r3]
   14128:	add	r4, r1, #3
   1412c:	mov	r5, #48	; 0x30
   14130:	b	13690 <__assert_fail@plt+0x1fc4>
   14134:	str	fp, [sp, #160]	; 0xa0
   14138:	mov	fp, r8
   1413c:	ldr	r8, [sp, #160]	; 0xa0
   14140:	b	1350c <__assert_fail@plt+0x1e40>
   14144:	ldr	r2, [sp, #80]	; 0x50
   14148:	ldrb	r3, [r2]
   1414c:	cmp	r3, #0
   14150:	beq	12d38 <__assert_fail@plt+0x166c>
   14154:	cmp	sl, r4
   14158:	strbhi	r3, [fp, r4]
   1415c:	ldrb	r3, [r2, #1]!
   14160:	add	r4, r4, #1
   14164:	cmp	r3, #0
   14168:	bne	14154 <__assert_fail@plt+0x2a88>
   1416c:	b	12d38 <__assert_fail@plt+0x166c>
   14170:	str	fp, [sp, #160]	; 0xa0
   14174:	mov	r3, #0
   14178:	mov	fp, r8
   1417c:	ldr	r8, [sp, #160]	; 0xa0
   14180:	b	135a0 <__assert_fail@plt+0x1ed4>
   14184:	mov	ip, r5
   14188:	ldr	r7, [sp, #96]	; 0x60
   1418c:	ldr	r5, [sp, #92]	; 0x5c
   14190:	ldr	r4, [sp, #100]	; 0x64
   14194:	ldr	r8, [sp, #84]	; 0x54
   14198:	ldr	sl, [sp, #88]	; 0x58
   1419c:	ldr	r2, [sp, #28]
   141a0:	mov	r6, #0
   141a4:	b	13e48 <__assert_fail@plt+0x277c>
   141a8:	ldr	r2, [sp, #36]	; 0x24
   141ac:	ldrb	r1, [r2, r3]
   141b0:	sub	r2, r1, #33	; 0x21
   141b4:	cmp	r2, #29
   141b8:	ldrls	pc, [pc, r2, lsl #2]
   141bc:	b	14298 <__assert_fail@plt+0x2bcc>
   141c0:	andeq	r4, r1, r8, lsr r2
   141c4:	muleq	r1, r8, r2
   141c8:	muleq	r1, r8, r2
   141cc:	muleq	r1, r8, r2
   141d0:	muleq	r1, r8, r2
   141d4:	muleq	r1, r8, r2
   141d8:	andeq	r4, r1, r8, lsr r2
   141dc:	andeq	r4, r1, r8, lsr r2
   141e0:	andeq	r4, r1, r8, lsr r2
   141e4:	muleq	r1, r8, r2
   141e8:	muleq	r1, r8, r2
   141ec:	muleq	r1, r8, r2
   141f0:	andeq	r4, r1, r8, lsr r2
   141f4:	muleq	r1, r8, r2
   141f8:	andeq	r4, r1, r8, lsr r2
   141fc:	muleq	r1, r8, r2
   14200:	muleq	r1, r8, r2
   14204:	muleq	r1, r8, r2
   14208:	muleq	r1, r8, r2
   1420c:	muleq	r1, r8, r2
   14210:	muleq	r1, r8, r2
   14214:	muleq	r1, r8, r2
   14218:	muleq	r1, r8, r2
   1421c:	muleq	r1, r8, r2
   14220:	muleq	r1, r8, r2
   14224:	muleq	r1, r8, r2
   14228:	muleq	r1, r8, r2
   1422c:	andeq	r4, r1, r8, lsr r2
   14230:	andeq	r4, r1, r8, lsr r2
   14234:	andeq	r4, r1, r8, lsr r2
   14238:	ldr	r2, [sp, #32]
   1423c:	cmp	r2, #0
   14240:	bne	14344 <__assert_fail@plt+0x2c78>
   14244:	cmp	sl, r4
   14248:	movhi	r2, #63	; 0x3f
   1424c:	strbhi	r2, [r8, r4]
   14250:	add	r2, r4, #1
   14254:	cmp	sl, r2
   14258:	movhi	r0, #34	; 0x22
   1425c:	strbhi	r0, [r8, r2]
   14260:	add	r2, r4, #2
   14264:	cmp	sl, r2
   14268:	movhi	r0, #34	; 0x22
   1426c:	strbhi	r0, [r8, r2]
   14270:	add	r2, r4, #3
   14274:	cmp	sl, r2
   14278:	movhi	r0, #63	; 0x3f
   1427c:	strbhi	r0, [r8, r2]
   14280:	mov	r2, #0
   14284:	add	r4, r4, #4
   14288:	mov	r5, r1
   1428c:	mov	r9, r3
   14290:	mov	r6, r2
   14294:	b	13690 <__assert_fail@plt+0x1fc4>
   14298:	mov	r2, #0
   1429c:	mov	r6, r2
   142a0:	b	13200 <__assert_fail@plt+0x1b34>
   142a4:	ldr	r0, [sp, #24]
   142a8:	mov	r1, r4
   142ac:	cmp	r1, r0
   142b0:	mov	r2, r7
   142b4:	mov	r3, r5
   142b8:	mov	ip, r5
   142bc:	ldr	r7, [sp, #96]	; 0x60
   142c0:	ldr	r5, [sp, #92]	; 0x5c
   142c4:	ldr	r4, [sp, #100]	; 0x64
   142c8:	ldr	r8, [sp, #84]	; 0x54
   142cc:	ldr	sl, [sp, #88]	; 0x58
   142d0:	bcs	14304 <__assert_fail@plt+0x2c38>
   142d4:	ldrb	r6, [r2]
   142d8:	cmp	r6, #0
   142dc:	bne	142f0 <__assert_fail@plt+0x2c24>
   142e0:	b	14420 <__assert_fail@plt+0x2d54>
   142e4:	ldrb	r6, [r2, #1]!
   142e8:	cmp	r6, #0
   142ec:	beq	143a8 <__assert_fail@plt+0x2cdc>
   142f0:	add	r3, r3, #1
   142f4:	add	r1, r9, r3
   142f8:	cmp	r1, r0
   142fc:	bcc	142e4 <__assert_fail@plt+0x2c18>
   14300:	mov	ip, r3
   14304:	ldr	r2, [sp, #28]
   14308:	mov	r6, #0
   1430c:	b	13e48 <__assert_fail@plt+0x277c>
   14310:	mov	r3, #1
   14314:	str	r3, [sp, #40]	; 0x28
   14318:	str	r3, [sp, #32]
   1431c:	str	r3, [sp, #28]
   14320:	str	r3, [sp, #52]	; 0x34
   14324:	ldr	r3, [pc, #-2220]	; 13a80 <__assert_fail@plt+0x23b4>
   14328:	mov	r2, #0
   1432c:	str	r2, [sp, #68]	; 0x44
   14330:	str	r2, [sp, #44]	; 0x2c
   14334:	str	r2, [sp, #72]	; 0x48
   14338:	mov	r4, r2
   1433c:	str	r3, [sp, #60]	; 0x3c
   14340:	b	12d68 <__assert_fail@plt+0x169c>
   14344:	str	fp, [sp, #160]	; 0xa0
   14348:	mov	fp, r8
   1434c:	ldr	r8, [sp, #160]	; 0xa0
   14350:	b	13518 <__assert_fail@plt+0x1e4c>
   14354:	mov	r2, r3
   14358:	ldr	r3, [sp, #60]	; 0x3c
   1435c:	cmp	r3, #0
   14360:	moveq	r2, #0
   14364:	andne	r2, r2, #1
   14368:	cmp	r2, #0
   1436c:	beq	14398 <__assert_fail@plt+0x2ccc>
   14370:	mov	r2, r3
   14374:	ldrb	r3, [r3]
   14378:	cmp	r3, #0
   1437c:	beq	14398 <__assert_fail@plt+0x2ccc>
   14380:	cmp	sl, r4
   14384:	strbhi	r3, [fp, r4]
   14388:	ldrb	r3, [r2, #1]!
   1438c:	add	r4, r4, #1
   14390:	cmp	r3, #0
   14394:	bne	14380 <__assert_fail@plt+0x2cb4>
   14398:	cmp	sl, r4
   1439c:	movhi	r3, #0
   143a0:	strbhi	r3, [fp, r4]
   143a4:	b	13558 <__assert_fail@plt+0x1e8c>
   143a8:	mov	ip, r3
   143ac:	ldr	r2, [sp, #28]
   143b0:	b	13e48 <__assert_fail@plt+0x277c>
   143b4:	str	fp, [sp, #160]	; 0xa0
   143b8:	mov	fp, r8
   143bc:	ldr	r8, [sp, #160]	; 0xa0
   143c0:	sub	r3, r8, #2
   143c4:	clz	r3, r3
   143c8:	lsr	r3, r3, #5
   143cc:	str	r3, [sp, #28]
   143d0:	b	1350c <__assert_fail@plt+0x1e40>
   143d4:	ldr	r3, [sp, #76]	; 0x4c
   143d8:	mov	ip, #5
   143dc:	str	r3, [sp, #16]
   143e0:	ldr	r3, [sp, #80]	; 0x50
   143e4:	ldr	r2, [sp, #36]	; 0x24
   143e8:	str	r3, [sp, #12]
   143ec:	ldr	r3, [sp, #56]	; 0x38
   143f0:	ldr	r1, [sp, #72]	; 0x48
   143f4:	str	r3, [sp, #8]
   143f8:	ldr	r3, [sp, #164]	; 0xa4
   143fc:	mov	r0, fp
   14400:	str	r3, [sp, #4]
   14404:	str	ip, [sp]
   14408:	ldr	r3, [sp, #24]
   1440c:	bl	12c70 <__assert_fail@plt+0x15a4>
   14410:	mov	r4, r0
   14414:	b	13558 <__assert_fail@plt+0x1e8c>
   14418:	mov	r8, #2
   1441c:	b	1350c <__assert_fail@plt+0x1e40>
   14420:	ldr	r2, [sp, #28]
   14424:	b	13e48 <__assert_fail@plt+0x277c>
   14428:	mov	r3, #0
   1442c:	str	r3, [sp, #68]	; 0x44
   14430:	str	r3, [sp, #44]	; 0x2c
   14434:	str	r3, [sp, #72]	; 0x48
   14438:	str	r3, [sp, #28]
   1443c:	mov	r4, r3
   14440:	ldr	r3, [pc, #-2500]	; 13a84 <__assert_fail@plt+0x23b8>
   14444:	mov	r2, #1
   14448:	str	r2, [sp, #40]	; 0x28
   1444c:	str	r2, [sp, #32]
   14450:	str	r2, [sp, #52]	; 0x34
   14454:	str	r3, [sp, #60]	; 0x3c
   14458:	b	12d68 <__assert_fail@plt+0x169c>
   1445c:	bl	113c0 <__stack_chk_fail@plt>
   14460:	mov	r5, r3
   14464:	mov	r6, #0
   14468:	b	1325c <__assert_fail@plt+0x1b90>
   1446c:	mov	r3, #0
   14470:	mov	r2, #1
   14474:	str	r3, [sp, #44]	; 0x2c
   14478:	str	r3, [sp, #72]	; 0x48
   1447c:	str	r2, [sp, #40]	; 0x28
   14480:	b	13378 <__assert_fail@plt+0x1cac>
   14484:	bl	11690 <abort@plt>
   14488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1448c:	sub	sp, sp, #44	; 0x2c
   14490:	mov	r6, r0
   14494:	mov	r4, r3
   14498:	mov	sl, r1
   1449c:	mov	fp, r2
   144a0:	bl	1154c <__errno_location@plt>
   144a4:	ldr	r7, [pc, #364]	; 14618 <__assert_fail@plt+0x2f4c>
   144a8:	cmp	r6, #0
   144ac:	ldr	r5, [r7]
   144b0:	ldr	r3, [r0]
   144b4:	str	r3, [sp, #24]
   144b8:	blt	14614 <__assert_fail@plt+0x2f48>
   144bc:	ldr	r3, [r7, #4]
   144c0:	mov	r8, r0
   144c4:	cmp	r3, r6
   144c8:	bgt	14514 <__assert_fail@plt+0x2e48>
   144cc:	cmn	r6, #-268435454	; 0xf0000002
   144d0:	bgt	14610 <__assert_fail@plt+0x2f44>
   144d4:	add	r9, r6, #1
   144d8:	add	r3, r7, #8
   144dc:	cmp	r5, r3
   144e0:	lsl	r1, r9, #3
   144e4:	beq	145f0 <__assert_fail@plt+0x2f24>
   144e8:	mov	r0, r5
   144ec:	bl	152e4 <__assert_fail@plt+0x3c18>
   144f0:	mov	r5, r0
   144f4:	str	r0, [r7]
   144f8:	ldr	r0, [r7, #4]
   144fc:	mov	r1, #0
   14500:	sub	r2, r9, r0
   14504:	add	r0, r5, r0, lsl #3
   14508:	lsl	r2, r2, #3
   1450c:	bl	11570 <memset@plt>
   14510:	str	r9, [r7, #4]
   14514:	add	r3, r5, r6, lsl #3
   14518:	ldr	r1, [r4, #4]
   1451c:	ldr	r7, [r3, #4]
   14520:	ldr	r9, [r5, r6, lsl #3]
   14524:	ldr	r2, [r4, #40]	; 0x28
   14528:	ldr	ip, [r4, #44]	; 0x2c
   1452c:	str	r3, [sp, #28]
   14530:	ldr	r3, [r4]
   14534:	orr	r1, r1, #1
   14538:	add	lr, r4, #8
   1453c:	str	r1, [sp, #36]	; 0x24
   14540:	str	r1, [sp, #4]
   14544:	str	r2, [sp, #12]
   14548:	str	r3, [sp]
   1454c:	mov	r0, r7
   14550:	mov	r1, r9
   14554:	str	ip, [sp, #16]
   14558:	str	lr, [sp, #8]
   1455c:	mov	r3, fp
   14560:	mov	r2, sl
   14564:	str	lr, [sp, #32]
   14568:	bl	12c70 <__assert_fail@plt+0x15a4>
   1456c:	cmp	r9, r0
   14570:	bhi	145dc <__assert_fail@plt+0x2f10>
   14574:	ldr	r3, [pc, #160]	; 1461c <__assert_fail@plt+0x2f50>
   14578:	add	r9, r0, #1
   1457c:	cmp	r7, r3
   14580:	str	r9, [r5, r6, lsl #3]
   14584:	beq	14590 <__assert_fail@plt+0x2ec4>
   14588:	mov	r0, r7
   1458c:	bl	11360 <free@plt>
   14590:	mov	r0, r9
   14594:	bl	15288 <__assert_fail@plt+0x3bbc>
   14598:	ldr	lr, [sp, #28]
   1459c:	ldr	ip, [r4, #44]	; 0x2c
   145a0:	ldr	r5, [r4, #40]	; 0x28
   145a4:	mov	r3, fp
   145a8:	mov	r2, sl
   145ac:	mov	r1, r9
   145b0:	str	r0, [lr, #4]
   145b4:	ldr	lr, [r4]
   145b8:	ldr	r4, [sp, #32]
   145bc:	str	ip, [sp, #16]
   145c0:	str	r4, [sp, #8]
   145c4:	ldr	r4, [sp, #36]	; 0x24
   145c8:	str	r5, [sp, #12]
   145cc:	str	r4, [sp, #4]
   145d0:	str	lr, [sp]
   145d4:	mov	r7, r0
   145d8:	bl	12c70 <__assert_fail@plt+0x15a4>
   145dc:	ldr	r3, [sp, #24]
   145e0:	mov	r0, r7
   145e4:	str	r3, [r8]
   145e8:	add	sp, sp, #44	; 0x2c
   145ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f0:	mov	r0, #0
   145f4:	bl	152e4 <__assert_fail@plt+0x3c18>
   145f8:	ldr	r3, [pc, #32]	; 14620 <__assert_fail@plt+0x2f54>
   145fc:	mov	r5, r0
   14600:	ldm	r3, {r0, r1}
   14604:	str	r5, [r7]
   14608:	stm	r5, {r0, r1}
   1460c:	b	144f8 <__assert_fail@plt+0x2e2c>
   14610:	bl	154d0 <__assert_fail@plt+0x3e04>
   14614:	bl	11690 <abort@plt>
   14618:	andeq	ip, r2, r8, ror #2
   1461c:	andeq	ip, r2, r8, lsl #4
   14620:	andeq	ip, r2, r0, ror r1
   14624:	push	{r4, r5, r6, lr}
   14628:	mov	r5, r0
   1462c:	bl	1154c <__errno_location@plt>
   14630:	cmp	r5, #0
   14634:	mov	r1, #48	; 0x30
   14638:	mov	r4, r0
   1463c:	ldr	r0, [pc, #16]	; 14654 <__assert_fail@plt+0x2f88>
   14640:	ldr	r6, [r4]
   14644:	movne	r0, r5
   14648:	bl	15490 <__assert_fail@plt+0x3dc4>
   1464c:	str	r6, [r4]
   14650:	pop	{r4, r5, r6, pc}
   14654:	andeq	ip, r2, r8, lsl #6
   14658:	ldr	r3, [pc, #12]	; 1466c <__assert_fail@plt+0x2fa0>
   1465c:	cmp	r0, #0
   14660:	moveq	r0, r3
   14664:	ldr	r0, [r0]
   14668:	bx	lr
   1466c:	andeq	ip, r2, r8, lsl #6
   14670:	ldr	r3, [pc, #12]	; 14684 <__assert_fail@plt+0x2fb8>
   14674:	cmp	r0, #0
   14678:	moveq	r0, r3
   1467c:	str	r1, [r0]
   14680:	bx	lr
   14684:	andeq	ip, r2, r8, lsl #6
   14688:	ldr	r3, [pc, #52]	; 146c4 <__assert_fail@plt+0x2ff8>
   1468c:	cmp	r0, #0
   14690:	moveq	r0, r3
   14694:	add	r3, r0, #8
   14698:	push	{lr}		; (str lr, [sp, #-4]!)
   1469c:	lsr	lr, r1, #5
   146a0:	and	r1, r1, #31
   146a4:	ldr	ip, [r3, lr, lsl #2]
   146a8:	lsr	r0, ip, r1
   146ac:	eor	r2, r2, r0
   146b0:	and	r2, r2, #1
   146b4:	and	r0, r0, #1
   146b8:	eor	r1, ip, r2, lsl r1
   146bc:	str	r1, [r3, lr, lsl #2]
   146c0:	pop	{pc}		; (ldr pc, [sp], #4)
   146c4:	andeq	ip, r2, r8, lsl #6
   146c8:	ldr	r3, [pc, #16]	; 146e0 <__assert_fail@plt+0x3014>
   146cc:	cmp	r0, #0
   146d0:	movne	r3, r0
   146d4:	ldr	r0, [r3, #4]
   146d8:	str	r1, [r3, #4]
   146dc:	bx	lr
   146e0:	andeq	ip, r2, r8, lsl #6
   146e4:	ldr	r3, [pc, #44]	; 14718 <__assert_fail@plt+0x304c>
   146e8:	cmp	r0, #0
   146ec:	moveq	r0, r3
   146f0:	mov	ip, #10
   146f4:	cmp	r2, #0
   146f8:	cmpne	r1, #0
   146fc:	str	ip, [r0]
   14700:	beq	14710 <__assert_fail@plt+0x3044>
   14704:	str	r1, [r0, #40]	; 0x28
   14708:	str	r2, [r0, #44]	; 0x2c
   1470c:	bx	lr
   14710:	push	{r4, lr}
   14714:	bl	11690 <abort@plt>
   14718:	andeq	ip, r2, r8, lsl #6
   1471c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14720:	sub	sp, sp, #24
   14724:	ldr	ip, [pc, #108]	; 14798 <__assert_fail@plt+0x30cc>
   14728:	ldr	r4, [sp, #56]	; 0x38
   1472c:	mov	r9, r2
   14730:	cmp	r4, #0
   14734:	moveq	r4, ip
   14738:	mov	sl, r3
   1473c:	mov	r7, r0
   14740:	mov	r8, r1
   14744:	bl	1154c <__errno_location@plt>
   14748:	ldr	r3, [r4, #44]	; 0x2c
   1474c:	mov	r1, r8
   14750:	ldr	r6, [r0]
   14754:	str	r3, [sp, #16]
   14758:	ldr	r2, [r4, #40]	; 0x28
   1475c:	add	r3, r4, #8
   14760:	str	r3, [sp, #8]
   14764:	str	r2, [sp, #12]
   14768:	ldr	r2, [r4, #4]
   1476c:	mov	r5, r0
   14770:	str	r2, [sp, #4]
   14774:	ldr	ip, [r4]
   14778:	mov	r3, sl
   1477c:	mov	r2, r9
   14780:	mov	r0, r7
   14784:	str	ip, [sp]
   14788:	bl	12c70 <__assert_fail@plt+0x15a4>
   1478c:	str	r6, [r5]
   14790:	add	sp, sp, #24
   14794:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14798:	andeq	ip, r2, r8, lsl #6
   1479c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147a0:	cmp	r3, #0
   147a4:	sub	sp, sp, #44	; 0x2c
   147a8:	ldr	r4, [pc, #192]	; 14870 <__assert_fail@plt+0x31a4>
   147ac:	mov	r6, r2
   147b0:	movne	r4, r3
   147b4:	mov	r9, r1
   147b8:	mov	r8, r0
   147bc:	bl	1154c <__errno_location@plt>
   147c0:	ldr	r3, [r4, #44]	; 0x2c
   147c4:	ldr	r5, [r4, #4]
   147c8:	add	sl, r4, #8
   147cc:	cmp	r6, #0
   147d0:	orreq	r5, r5, #1
   147d4:	mov	r1, #0
   147d8:	ldr	r2, [r0]
   147dc:	str	r3, [sp, #16]
   147e0:	ldr	r3, [r4, #40]	; 0x28
   147e4:	stmib	sp, {r5, sl}
   147e8:	str	r3, [sp, #12]
   147ec:	ldr	r3, [r4]
   147f0:	mov	r7, r0
   147f4:	str	r2, [sp, #28]
   147f8:	str	r3, [sp]
   147fc:	mov	r2, r8
   14800:	mov	r3, r9
   14804:	mov	r0, r1
   14808:	bl	12c70 <__assert_fail@plt+0x15a4>
   1480c:	add	r1, r0, #1
   14810:	mov	fp, r0
   14814:	mov	r0, r1
   14818:	str	r1, [sp, #36]	; 0x24
   1481c:	bl	15288 <__assert_fail@plt+0x3bbc>
   14820:	ldr	r3, [r4, #44]	; 0x2c
   14824:	mov	r2, r8
   14828:	str	r3, [sp, #16]
   1482c:	ldr	r3, [r4, #40]	; 0x28
   14830:	str	r5, [sp, #4]
   14834:	str	r3, [sp, #12]
   14838:	str	sl, [sp, #8]
   1483c:	ldr	ip, [r4]
   14840:	ldr	r1, [sp, #36]	; 0x24
   14844:	mov	r3, r9
   14848:	str	ip, [sp]
   1484c:	str	r0, [sp, #32]
   14850:	bl	12c70 <__assert_fail@plt+0x15a4>
   14854:	ldr	r2, [sp, #28]
   14858:	cmp	r6, #0
   1485c:	str	r2, [r7]
   14860:	ldr	r0, [sp, #32]
   14864:	strne	fp, [r6]
   14868:	add	sp, sp, #44	; 0x2c
   1486c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14870:	andeq	ip, r2, r8, lsl #6
   14874:	mov	r3, r2
   14878:	mov	r2, #0
   1487c:	b	1479c <__assert_fail@plt+0x30d0>
   14880:	push	{r4, r5, r6, r7, r8, lr}
   14884:	ldr	r6, [pc, #112]	; 148fc <__assert_fail@plt+0x3230>
   14888:	ldr	r3, [r6, #4]
   1488c:	ldr	r7, [r6]
   14890:	cmp	r3, #1
   14894:	ble	148b8 <__assert_fail@plt+0x31ec>
   14898:	sub	r5, r7, #8
   1489c:	add	r5, r5, r3, lsl #3
   148a0:	mov	r4, r7
   148a4:	ldr	r0, [r4, #12]
   148a8:	add	r4, r4, #8
   148ac:	bl	11360 <free@plt>
   148b0:	cmp	r4, r5
   148b4:	bne	148a4 <__assert_fail@plt+0x31d8>
   148b8:	ldr	r0, [r7, #4]
   148bc:	ldr	r4, [pc, #60]	; 14900 <__assert_fail@plt+0x3234>
   148c0:	cmp	r0, r4
   148c4:	beq	148d8 <__assert_fail@plt+0x320c>
   148c8:	bl	11360 <free@plt>
   148cc:	mov	r3, #256	; 0x100
   148d0:	str	r4, [r6, #12]
   148d4:	str	r3, [r6, #8]
   148d8:	ldr	r4, [pc, #36]	; 14904 <__assert_fail@plt+0x3238>
   148dc:	cmp	r7, r4
   148e0:	beq	148f0 <__assert_fail@plt+0x3224>
   148e4:	mov	r0, r7
   148e8:	bl	11360 <free@plt>
   148ec:	str	r4, [r6]
   148f0:	mov	r3, #1
   148f4:	str	r3, [r6, #4]
   148f8:	pop	{r4, r5, r6, r7, r8, pc}
   148fc:	andeq	ip, r2, r8, ror #2
   14900:	andeq	ip, r2, r8, lsl #4
   14904:	andeq	ip, r2, r0, ror r1
   14908:	ldr	r3, [pc, #4]	; 14914 <__assert_fail@plt+0x3248>
   1490c:	mvn	r2, #0
   14910:	b	14488 <__assert_fail@plt+0x2dbc>
   14914:	andeq	ip, r2, r8, lsl #6
   14918:	ldr	r3, [pc]	; 14920 <__assert_fail@plt+0x3254>
   1491c:	b	14488 <__assert_fail@plt+0x2dbc>
   14920:	andeq	ip, r2, r8, lsl #6
   14924:	mov	r1, r0
   14928:	ldr	r3, [pc, #8]	; 14938 <__assert_fail@plt+0x326c>
   1492c:	mvn	r2, #0
   14930:	mov	r0, #0
   14934:	b	14488 <__assert_fail@plt+0x2dbc>
   14938:	andeq	ip, r2, r8, lsl #6
   1493c:	mov	r2, r1
   14940:	ldr	r3, [pc, #8]	; 14950 <__assert_fail@plt+0x3284>
   14944:	mov	r1, r0
   14948:	mov	r0, #0
   1494c:	b	14488 <__assert_fail@plt+0x2dbc>
   14950:	andeq	ip, r2, r8, lsl #6
   14954:	push	{r4, r5, r6, lr}
   14958:	sub	sp, sp, #56	; 0x38
   1495c:	ldr	r4, [pc, #68]	; 149a8 <__assert_fail@plt+0x32dc>
   14960:	mov	r6, r2
   14964:	mov	r5, r0
   14968:	ldr	r3, [r4]
   1496c:	add	r0, sp, #4
   14970:	str	r3, [sp, #52]	; 0x34
   14974:	bl	12b00 <__assert_fail@plt+0x1434>
   14978:	add	r3, sp, #4
   1497c:	mvn	r2, #0
   14980:	mov	r1, r6
   14984:	mov	r0, r5
   14988:	bl	14488 <__assert_fail@plt+0x2dbc>
   1498c:	ldr	r2, [sp, #52]	; 0x34
   14990:	ldr	r3, [r4]
   14994:	cmp	r2, r3
   14998:	bne	149a4 <__assert_fail@plt+0x32d8>
   1499c:	add	sp, sp, #56	; 0x38
   149a0:	pop	{r4, r5, r6, pc}
   149a4:	bl	113c0 <__stack_chk_fail@plt>
   149a8:	andeq	fp, r2, r0, lsl #30
   149ac:	push	{r4, r5, r6, r7, lr}
   149b0:	sub	sp, sp, #60	; 0x3c
   149b4:	ldr	r4, [pc, #72]	; 14a04 <__assert_fail@plt+0x3338>
   149b8:	mov	r6, r2
   149bc:	mov	r7, r3
   149c0:	ldr	ip, [r4]
   149c4:	mov	r5, r0
   149c8:	add	r0, sp, #4
   149cc:	str	ip, [sp, #52]	; 0x34
   149d0:	bl	12b00 <__assert_fail@plt+0x1434>
   149d4:	add	r3, sp, #4
   149d8:	mov	r2, r7
   149dc:	mov	r1, r6
   149e0:	mov	r0, r5
   149e4:	bl	14488 <__assert_fail@plt+0x2dbc>
   149e8:	ldr	r2, [sp, #52]	; 0x34
   149ec:	ldr	r3, [r4]
   149f0:	cmp	r2, r3
   149f4:	bne	14a00 <__assert_fail@plt+0x3334>
   149f8:	add	sp, sp, #60	; 0x3c
   149fc:	pop	{r4, r5, r6, r7, pc}
   14a00:	bl	113c0 <__stack_chk_fail@plt>
   14a04:	andeq	fp, r2, r0, lsl #30
   14a08:	mov	r2, r1
   14a0c:	mov	r1, r0
   14a10:	mov	r0, #0
   14a14:	b	14954 <__assert_fail@plt+0x3288>
   14a18:	mov	r3, r2
   14a1c:	mov	r2, r1
   14a20:	mov	r1, r0
   14a24:	mov	r0, #0
   14a28:	b	149ac <__assert_fail@plt+0x32e0>
   14a2c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14a30:	mov	r4, r2
   14a34:	ldr	lr, [pc, #128]	; 14abc <__assert_fail@plt+0x33f0>
   14a38:	mov	r8, r0
   14a3c:	mov	r9, r1
   14a40:	ldm	lr!, {r0, r1, r2, r3}
   14a44:	sub	sp, sp, #60	; 0x3c
   14a48:	add	ip, sp, #4
   14a4c:	lsr	r6, r4, #5
   14a50:	stmia	ip!, {r0, r1, r2, r3}
   14a54:	add	r7, sp, #12
   14a58:	ldm	lr!, {r0, r1, r2, r3}
   14a5c:	and	r4, r4, #31
   14a60:	ldr	r5, [pc, #88]	; 14ac0 <__assert_fail@plt+0x33f4>
   14a64:	stmia	ip!, {r0, r1, r2, r3}
   14a68:	ldm	lr, {r0, r1, r2, r3}
   14a6c:	stm	ip, {r0, r1, r2, r3}
   14a70:	mov	r2, r9
   14a74:	ldr	r3, [r7, r6, lsl #2]
   14a78:	ldr	ip, [r5]
   14a7c:	mov	r1, r8
   14a80:	mvn	r0, r3, lsr r4
   14a84:	and	r0, r0, #1
   14a88:	str	ip, [sp, #52]	; 0x34
   14a8c:	eor	r4, r3, r0, lsl r4
   14a90:	add	r3, sp, #4
   14a94:	mov	r0, #0
   14a98:	str	r4, [r7, r6, lsl #2]
   14a9c:	bl	14488 <__assert_fail@plt+0x2dbc>
   14aa0:	ldr	r2, [sp, #52]	; 0x34
   14aa4:	ldr	r3, [r5]
   14aa8:	cmp	r2, r3
   14aac:	bne	14ab8 <__assert_fail@plt+0x33ec>
   14ab0:	add	sp, sp, #60	; 0x3c
   14ab4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ab8:	bl	113c0 <__stack_chk_fail@plt>
   14abc:	andeq	ip, r2, r8, lsl #6
   14ac0:	andeq	fp, r2, r0, lsl #30
   14ac4:	mov	r2, r1
   14ac8:	mvn	r1, #0
   14acc:	b	14a2c <__assert_fail@plt+0x3360>
   14ad0:	mov	r2, #58	; 0x3a
   14ad4:	mvn	r1, #0
   14ad8:	b	14a2c <__assert_fail@plt+0x3360>
   14adc:	mov	r2, #58	; 0x3a
   14ae0:	b	14a2c <__assert_fail@plt+0x3360>
   14ae4:	push	{r4, r5, r6, r7, r8, lr}
   14ae8:	sub	sp, sp, #104	; 0x68
   14aec:	ldr	r5, [pc, #120]	; 14b6c <__assert_fail@plt+0x34a0>
   14af0:	mov	r6, r0
   14af4:	mov	r0, sp
   14af8:	ldr	r3, [r5]
   14afc:	mov	r7, r2
   14b00:	str	r3, [sp, #100]	; 0x64
   14b04:	bl	12b00 <__assert_fail@plt+0x1434>
   14b08:	mov	ip, sp
   14b0c:	add	lr, sp, #52	; 0x34
   14b10:	ldm	ip!, {r0, r1, r2, r3}
   14b14:	stmia	lr!, {r0, r1, r2, r3}
   14b18:	ldm	ip!, {r0, r1, r2, r3}
   14b1c:	ldr	r8, [sp, #64]	; 0x40
   14b20:	stmia	lr!, {r0, r1, r2, r3}
   14b24:	mvn	r4, r8
   14b28:	ldm	ip, {r0, r1, r2, r3}
   14b2c:	and	ip, r4, #67108864	; 0x4000000
   14b30:	eor	ip, ip, r8
   14b34:	str	ip, [sp, #64]	; 0x40
   14b38:	stm	lr, {r0, r1, r2, r3}
   14b3c:	add	r3, sp, #52	; 0x34
   14b40:	mvn	r2, #0
   14b44:	mov	r1, r7
   14b48:	mov	r0, r6
   14b4c:	bl	14488 <__assert_fail@plt+0x2dbc>
   14b50:	ldr	r2, [sp, #100]	; 0x64
   14b54:	ldr	r3, [r5]
   14b58:	cmp	r2, r3
   14b5c:	bne	14b68 <__assert_fail@plt+0x349c>
   14b60:	add	sp, sp, #104	; 0x68
   14b64:	pop	{r4, r5, r6, r7, r8, pc}
   14b68:	bl	113c0 <__stack_chk_fail@plt>
   14b6c:	andeq	fp, r2, r0, lsl #30
   14b70:	push	{r4, r5, r6, r7, r8, r9, lr}
   14b74:	mov	r6, r1
   14b78:	ldr	lr, [pc, #132]	; 14c04 <__assert_fail@plt+0x3538>
   14b7c:	mov	r5, r2
   14b80:	mov	r8, r0
   14b84:	mov	r9, r3
   14b88:	ldm	lr!, {r0, r1, r2, r3}
   14b8c:	sub	sp, sp, #60	; 0x3c
   14b90:	add	ip, sp, #4
   14b94:	ldr	r4, [pc, #108]	; 14c08 <__assert_fail@plt+0x353c>
   14b98:	stmia	ip!, {r0, r1, r2, r3}
   14b9c:	mov	r7, #10
   14ba0:	ldm	lr!, {r0, r1, r2, r3}
   14ba4:	cmp	r5, #0
   14ba8:	cmpne	r6, #0
   14bac:	str	r7, [sp, #4]
   14bb0:	stmia	ip!, {r0, r1, r2, r3}
   14bb4:	ldm	lr, {r0, r1, r2, r3}
   14bb8:	ldr	lr, [r4]
   14bbc:	stm	ip, {r0, r1, r2, r3}
   14bc0:	str	lr, [sp, #52]	; 0x34
   14bc4:	beq	14c00 <__assert_fail@plt+0x3534>
   14bc8:	add	r3, sp, #4
   14bcc:	ldr	r2, [sp, #88]	; 0x58
   14bd0:	mov	r1, r9
   14bd4:	mov	r0, r8
   14bd8:	str	r6, [sp, #44]	; 0x2c
   14bdc:	str	r5, [sp, #48]	; 0x30
   14be0:	bl	14488 <__assert_fail@plt+0x2dbc>
   14be4:	ldr	r2, [sp, #52]	; 0x34
   14be8:	ldr	r3, [r4]
   14bec:	cmp	r2, r3
   14bf0:	bne	14bfc <__assert_fail@plt+0x3530>
   14bf4:	add	sp, sp, #60	; 0x3c
   14bf8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14bfc:	bl	113c0 <__stack_chk_fail@plt>
   14c00:	bl	11690 <abort@plt>
   14c04:	andeq	ip, r2, r8, lsl #6
   14c08:	andeq	fp, r2, r0, lsl #30
   14c0c:	push	{lr}		; (str lr, [sp, #-4]!)
   14c10:	sub	sp, sp, #12
   14c14:	mvn	ip, #0
   14c18:	str	ip, [sp]
   14c1c:	bl	14b70 <__assert_fail@plt+0x34a4>
   14c20:	add	sp, sp, #12
   14c24:	pop	{pc}		; (ldr pc, [sp], #4)
   14c28:	push	{lr}		; (str lr, [sp, #-4]!)
   14c2c:	sub	sp, sp, #12
   14c30:	mvn	ip, #0
   14c34:	mov	r3, r2
   14c38:	str	ip, [sp]
   14c3c:	mov	r2, r1
   14c40:	mov	r1, r0
   14c44:	mov	r0, #0
   14c48:	bl	14b70 <__assert_fail@plt+0x34a4>
   14c4c:	add	sp, sp, #12
   14c50:	pop	{pc}		; (ldr pc, [sp], #4)
   14c54:	push	{lr}		; (str lr, [sp, #-4]!)
   14c58:	sub	sp, sp, #12
   14c5c:	str	r3, [sp]
   14c60:	mov	r3, r2
   14c64:	mov	r2, r1
   14c68:	mov	r1, r0
   14c6c:	mov	r0, #0
   14c70:	bl	14b70 <__assert_fail@plt+0x34a4>
   14c74:	add	sp, sp, #12
   14c78:	pop	{pc}		; (ldr pc, [sp], #4)
   14c7c:	ldr	r3, [pc]	; 14c84 <__assert_fail@plt+0x35b8>
   14c80:	b	14488 <__assert_fail@plt+0x2dbc>
   14c84:	andeq	ip, r2, r8, ror r1
   14c88:	mov	r2, r1
   14c8c:	ldr	r3, [pc, #8]	; 14c9c <__assert_fail@plt+0x35d0>
   14c90:	mov	r1, r0
   14c94:	mov	r0, #0
   14c98:	b	14488 <__assert_fail@plt+0x2dbc>
   14c9c:	andeq	ip, r2, r8, ror r1
   14ca0:	ldr	r3, [pc, #4]	; 14cac <__assert_fail@plt+0x35e0>
   14ca4:	mvn	r2, #0
   14ca8:	b	14488 <__assert_fail@plt+0x2dbc>
   14cac:	andeq	ip, r2, r8, ror r1
   14cb0:	mov	r1, r0
   14cb4:	ldr	r3, [pc, #8]	; 14cc4 <__assert_fail@plt+0x35f8>
   14cb8:	mvn	r2, #0
   14cbc:	mov	r0, #0
   14cc0:	b	14488 <__assert_fail@plt+0x2dbc>
   14cc4:	andeq	ip, r2, r8, ror r1
   14cc8:	push	{r4, r5, lr}
   14ccc:	sub	sp, sp, #116	; 0x74
   14cd0:	ldr	r5, [pc, #80]	; 14d28 <__assert_fail@plt+0x365c>
   14cd4:	mov	r4, r0
   14cd8:	mov	r2, sp
   14cdc:	ldr	r3, [r5]
   14ce0:	ldr	r1, [pc, #68]	; 14d2c <__assert_fail@plt+0x3660>
   14ce4:	mov	r0, #3
   14ce8:	str	r3, [sp, #108]	; 0x6c
   14cec:	bl	116a8 <__lxstat64@plt>
   14cf0:	cmp	r0, #0
   14cf4:	movne	r0, #0
   14cf8:	ldrdeq	r2, [sp]
   14cfc:	ldrdeq	r0, [sp, #96]	; 0x60
   14d00:	strdeq	r2, [r4, #8]
   14d04:	ldr	r2, [sp, #108]	; 0x6c
   14d08:	ldr	r3, [r5]
   14d0c:	strdeq	r0, [r4]
   14d10:	moveq	r0, r4
   14d14:	cmp	r2, r3
   14d18:	bne	14d24 <__assert_fail@plt+0x3658>
   14d1c:	add	sp, sp, #116	; 0x74
   14d20:	pop	{r4, r5, pc}
   14d24:	bl	113c0 <__stack_chk_fail@plt>
   14d28:	andeq	fp, r2, r0, lsl #30
   14d2c:			; <UNDEFINED> instruction: 0x0001b6b8
   14d30:	push	{r4, r5, r6, lr}
   14d34:	sub	sp, sp, #32
   14d38:	cmp	r1, #0
   14d3c:	mov	r5, r0
   14d40:	ldr	r4, [sp, #48]	; 0x30
   14d44:	ldr	r6, [sp, #52]	; 0x34
   14d48:	beq	14dd8 <__assert_fail@plt+0x370c>
   14d4c:	strd	r2, [sp]
   14d50:	mov	r3, r1
   14d54:	ldr	r2, [pc, #828]	; 15098 <__assert_fail@plt+0x39cc>
   14d58:	mov	r1, #1
   14d5c:	bl	11594 <__fprintf_chk@plt>
   14d60:	mov	r2, #5
   14d64:	ldr	r1, [pc, #816]	; 1509c <__assert_fail@plt+0x39d0>
   14d68:	mov	r0, #0
   14d6c:	bl	113b4 <dcgettext@plt>
   14d70:	ldr	r3, [pc, #808]	; 150a0 <__assert_fail@plt+0x39d4>
   14d74:	ldr	r2, [pc, #808]	; 150a4 <__assert_fail@plt+0x39d8>
   14d78:	str	r3, [sp]
   14d7c:	mov	r1, #1
   14d80:	mov	r3, r0
   14d84:	mov	r0, r5
   14d88:	bl	11594 <__fprintf_chk@plt>
   14d8c:	ldr	r1, [pc, #788]	; 150a8 <__assert_fail@plt+0x39dc>
   14d90:	mov	r2, #5
   14d94:	mov	r0, #0
   14d98:	bl	113b4 <dcgettext@plt>
   14d9c:	mov	r1, r5
   14da0:	bl	11318 <fputs_unlocked@plt>
   14da4:	cmp	r6, #9
   14da8:	ldrls	pc, [pc, r6, lsl #2]
   14dac:	b	15088 <__assert_fail@plt+0x39bc>
   14db0:	muleq	r1, r4, r0
   14db4:	andeq	r4, r1, ip, asr lr
   14db8:	andeq	r4, r1, r8, lsl #29
   14dbc:			; <UNDEFINED> instruction: 0x00014ebc
   14dc0:	strdeq	r4, [r1], -r8
   14dc4:	andeq	r4, r1, r8, lsr pc
   14dc8:	andeq	r4, r1, r0, lsl #31
   14dcc:	ldrdeq	r4, [r1], -r0
   14dd0:	andeq	r5, r1, r8, lsr #32
   14dd4:	strdeq	r4, [r1], -r0
   14dd8:	str	r3, [sp]
   14ddc:	mov	r1, #1
   14de0:	mov	r3, r2
   14de4:	ldr	r2, [pc, #704]	; 150ac <__assert_fail@plt+0x39e0>
   14de8:	bl	11594 <__fprintf_chk@plt>
   14dec:	b	14d60 <__assert_fail@plt+0x3694>
   14df0:	ldr	r1, [pc, #696]	; 150b0 <__assert_fail@plt+0x39e4>
   14df4:	mov	r2, #5
   14df8:	mov	r0, #0
   14dfc:	bl	113b4 <dcgettext@plt>
   14e00:	ldr	r2, [r4, #32]
   14e04:	ldr	r3, [r4, #28]
   14e08:	ldr	r1, [r4, #24]
   14e0c:	str	r2, [sp, #28]
   14e10:	ldr	r2, [r4, #20]
   14e14:	str	r3, [sp, #24]
   14e18:	ldr	r3, [r4, #16]
   14e1c:	str	r1, [sp, #20]
   14e20:	ldr	r1, [r4, #12]
   14e24:	str	r2, [sp, #16]
   14e28:	ldr	r2, [r4, #8]
   14e2c:	str	r3, [sp, #12]
   14e30:	ldr	r3, [r4, #4]
   14e34:	str	r1, [sp, #8]
   14e38:	str	r2, [sp, #4]
   14e3c:	str	r3, [sp]
   14e40:	mov	r1, #1
   14e44:	ldr	r3, [r4]
   14e48:	mov	r2, r0
   14e4c:	mov	r0, r5
   14e50:	bl	11594 <__fprintf_chk@plt>
   14e54:	add	sp, sp, #32
   14e58:	pop	{r4, r5, r6, pc}
   14e5c:	mov	r2, #5
   14e60:	ldr	r1, [pc, #588]	; 150b4 <__assert_fail@plt+0x39e8>
   14e64:	mov	r0, #0
   14e68:	bl	113b4 <dcgettext@plt>
   14e6c:	ldr	r3, [r4]
   14e70:	mov	r1, #1
   14e74:	mov	r2, r0
   14e78:	mov	r0, r5
   14e7c:	add	sp, sp, #32
   14e80:	pop	{r4, r5, r6, lr}
   14e84:	b	11594 <__fprintf_chk@plt>
   14e88:	mov	r2, #5
   14e8c:	ldr	r1, [pc, #548]	; 150b8 <__assert_fail@plt+0x39ec>
   14e90:	mov	r0, #0
   14e94:	bl	113b4 <dcgettext@plt>
   14e98:	ldr	r2, [r4, #4]
   14e9c:	ldr	r3, [r4]
   14ea0:	mov	r1, #1
   14ea4:	str	r2, [sp, #48]	; 0x30
   14ea8:	mov	r2, r0
   14eac:	mov	r0, r5
   14eb0:	add	sp, sp, #32
   14eb4:	pop	{r4, r5, r6, lr}
   14eb8:	b	11594 <__fprintf_chk@plt>
   14ebc:	mov	r2, #5
   14ec0:	ldr	r1, [pc, #500]	; 150bc <__assert_fail@plt+0x39f0>
   14ec4:	mov	r0, #0
   14ec8:	bl	113b4 <dcgettext@plt>
   14ecc:	ldr	r2, [r4, #8]
   14ed0:	ldr	r3, [r4, #4]
   14ed4:	mov	r1, #1
   14ed8:	str	r2, [sp, #52]	; 0x34
   14edc:	str	r3, [sp, #48]	; 0x30
   14ee0:	ldr	r3, [r4]
   14ee4:	mov	r2, r0
   14ee8:	mov	r0, r5
   14eec:	add	sp, sp, #32
   14ef0:	pop	{r4, r5, r6, lr}
   14ef4:	b	11594 <__fprintf_chk@plt>
   14ef8:	mov	r2, #5
   14efc:	ldr	r1, [pc, #444]	; 150c0 <__assert_fail@plt+0x39f4>
   14f00:	mov	r0, #0
   14f04:	bl	113b4 <dcgettext@plt>
   14f08:	ldr	r1, [r4, #12]
   14f0c:	ldr	r2, [r4, #8]
   14f10:	ldr	r3, [r4, #4]
   14f14:	str	r1, [sp, #8]
   14f18:	str	r2, [sp, #4]
   14f1c:	str	r3, [sp]
   14f20:	mov	r1, #1
   14f24:	ldr	r3, [r4]
   14f28:	mov	r2, r0
   14f2c:	mov	r0, r5
   14f30:	bl	11594 <__fprintf_chk@plt>
   14f34:	b	14e54 <__assert_fail@plt+0x3788>
   14f38:	mov	r2, #5
   14f3c:	ldr	r1, [pc, #384]	; 150c4 <__assert_fail@plt+0x39f8>
   14f40:	mov	r0, #0
   14f44:	bl	113b4 <dcgettext@plt>
   14f48:	ldr	r3, [r4, #16]
   14f4c:	ldr	r1, [r4, #12]
   14f50:	ldr	r2, [r4, #8]
   14f54:	str	r3, [sp, #12]
   14f58:	ldr	r3, [r4, #4]
   14f5c:	str	r1, [sp, #8]
   14f60:	str	r2, [sp, #4]
   14f64:	str	r3, [sp]
   14f68:	mov	r1, #1
   14f6c:	ldr	r3, [r4]
   14f70:	mov	r2, r0
   14f74:	mov	r0, r5
   14f78:	bl	11594 <__fprintf_chk@plt>
   14f7c:	b	14e54 <__assert_fail@plt+0x3788>
   14f80:	mov	r2, #5
   14f84:	ldr	r1, [pc, #316]	; 150c8 <__assert_fail@plt+0x39fc>
   14f88:	mov	r0, #0
   14f8c:	bl	113b4 <dcgettext@plt>
   14f90:	ldr	r2, [r4, #20]
   14f94:	ldr	r3, [r4, #16]
   14f98:	ldr	r1, [r4, #12]
   14f9c:	str	r2, [sp, #16]
   14fa0:	ldr	r2, [r4, #8]
   14fa4:	str	r3, [sp, #12]
   14fa8:	ldr	r3, [r4, #4]
   14fac:	str	r1, [sp, #8]
   14fb0:	str	r2, [sp, #4]
   14fb4:	str	r3, [sp]
   14fb8:	mov	r1, #1
   14fbc:	ldr	r3, [r4]
   14fc0:	mov	r2, r0
   14fc4:	mov	r0, r5
   14fc8:	bl	11594 <__fprintf_chk@plt>
   14fcc:	b	14e54 <__assert_fail@plt+0x3788>
   14fd0:	mov	r2, #5
   14fd4:	ldr	r1, [pc, #240]	; 150cc <__assert_fail@plt+0x3a00>
   14fd8:	mov	r0, #0
   14fdc:	bl	113b4 <dcgettext@plt>
   14fe0:	ldr	r1, [r4, #24]
   14fe4:	ldr	r2, [r4, #20]
   14fe8:	ldr	r3, [r4, #16]
   14fec:	str	r1, [sp, #20]
   14ff0:	ldr	r1, [r4, #12]
   14ff4:	str	r2, [sp, #16]
   14ff8:	ldr	r2, [r4, #8]
   14ffc:	str	r3, [sp, #12]
   15000:	ldr	r3, [r4, #4]
   15004:	str	r1, [sp, #8]
   15008:	str	r2, [sp, #4]
   1500c:	str	r3, [sp]
   15010:	mov	r1, #1
   15014:	ldr	r3, [r4]
   15018:	mov	r2, r0
   1501c:	mov	r0, r5
   15020:	bl	11594 <__fprintf_chk@plt>
   15024:	b	14e54 <__assert_fail@plt+0x3788>
   15028:	mov	r2, #5
   1502c:	ldr	r1, [pc, #156]	; 150d0 <__assert_fail@plt+0x3a04>
   15030:	mov	r0, #0
   15034:	bl	113b4 <dcgettext@plt>
   15038:	ldr	r3, [r4, #28]
   1503c:	ldr	r1, [r4, #24]
   15040:	ldr	r2, [r4, #20]
   15044:	str	r3, [sp, #24]
   15048:	ldr	r3, [r4, #16]
   1504c:	str	r1, [sp, #20]
   15050:	ldr	r1, [r4, #12]
   15054:	str	r2, [sp, #16]
   15058:	ldr	r2, [r4, #8]
   1505c:	str	r3, [sp, #12]
   15060:	ldr	r3, [r4, #4]
   15064:	str	r1, [sp, #8]
   15068:	str	r2, [sp, #4]
   1506c:	str	r3, [sp]
   15070:	mov	r1, #1
   15074:	ldr	r3, [r4]
   15078:	mov	r2, r0
   1507c:	mov	r0, r5
   15080:	bl	11594 <__fprintf_chk@plt>
   15084:	b	14e54 <__assert_fail@plt+0x3788>
   15088:	mov	r2, #5
   1508c:	ldr	r1, [pc, #64]	; 150d4 <__assert_fail@plt+0x3a08>
   15090:	b	14df8 <__assert_fail@plt+0x372c>
   15094:	bl	11690 <abort@plt>
   15098:	andeq	fp, r1, r0, asr #2
   1509c:	andeq	fp, r1, r4, asr r1
   150a0:	andeq	r0, r0, r2, ror #15
   150a4:	andeq	fp, r1, r8, lsr #8
   150a8:	andeq	fp, r1, r8, asr r1
   150ac:	andeq	fp, r1, ip, asr #2
   150b0:	andeq	fp, r1, r0, lsr r3
   150b4:	andeq	fp, r1, r4, lsr #4
   150b8:	andeq	fp, r1, r4, lsr r2
   150bc:	andeq	fp, r1, ip, asr #4
   150c0:	andeq	fp, r1, r8, ror #4
   150c4:	andeq	fp, r1, r8, lsl #5
   150c8:	andeq	fp, r1, ip, lsr #5
   150cc:	ldrdeq	fp, [r1], -r4
   150d0:	andeq	fp, r1, r0, lsl #6
   150d4:	andeq	fp, r1, r4, ror #6
   150d8:	push	{r4, r5, lr}
   150dc:	sub	sp, sp, #12
   150e0:	ldr	r5, [sp, #24]
   150e4:	ldr	ip, [r5]
   150e8:	cmp	ip, #0
   150ec:	beq	15108 <__assert_fail@plt+0x3a3c>
   150f0:	mov	lr, r5
   150f4:	mov	ip, #0
   150f8:	ldr	r4, [lr, #4]!
   150fc:	add	ip, ip, #1
   15100:	cmp	r4, #0
   15104:	bne	150f8 <__assert_fail@plt+0x3a2c>
   15108:	stm	sp, {r5, ip}
   1510c:	bl	14d30 <__assert_fail@plt+0x3664>
   15110:	add	sp, sp, #12
   15114:	pop	{r4, r5, pc}
   15118:	push	{r4, r5, r6, lr}
   1511c:	sub	sp, sp, #56	; 0x38
   15120:	ldr	r6, [pc, #88]	; 15180 <__assert_fail@plt+0x3ab4>
   15124:	ldr	r5, [sp, #72]	; 0x48
   15128:	add	r4, sp, #8
   1512c:	ldr	ip, [r6]
   15130:	str	ip, [sp, #52]	; 0x34
   15134:	mov	ip, #0
   15138:	ldr	lr, [r5], #4
   1513c:	cmp	lr, #0
   15140:	str	lr, [r4, #4]!
   15144:	beq	15154 <__assert_fail@plt+0x3a88>
   15148:	add	ip, ip, #1
   1514c:	cmp	ip, #10
   15150:	bne	15138 <__assert_fail@plt+0x3a6c>
   15154:	add	lr, sp, #12
   15158:	str	ip, [sp, #4]
   1515c:	str	lr, [sp]
   15160:	bl	14d30 <__assert_fail@plt+0x3664>
   15164:	ldr	r2, [sp, #52]	; 0x34
   15168:	ldr	r3, [r6]
   1516c:	cmp	r2, r3
   15170:	bne	1517c <__assert_fail@plt+0x3ab0>
   15174:	add	sp, sp, #56	; 0x38
   15178:	pop	{r4, r5, r6, pc}
   1517c:	bl	113c0 <__stack_chk_fail@plt>
   15180:	andeq	fp, r2, r0, lsl #30
   15184:	push	{r3}		; (str r3, [sp, #-4]!)
   15188:	mov	ip, #0
   1518c:	push	{r4, r5, r6, lr}
   15190:	sub	sp, sp, #60	; 0x3c
   15194:	ldr	r6, [pc, #100]	; 15200 <__assert_fail@plt+0x3b34>
   15198:	add	r5, sp, #8
   1519c:	add	r4, sp, #80	; 0x50
   151a0:	ldr	r3, [r6]
   151a4:	str	r4, [sp, #8]
   151a8:	str	r3, [sp, #52]	; 0x34
   151ac:	ldr	r3, [sp, #76]	; 0x4c
   151b0:	ldr	lr, [r4], #4
   151b4:	cmp	lr, #0
   151b8:	str	lr, [r5, #4]!
   151bc:	beq	151cc <__assert_fail@plt+0x3b00>
   151c0:	add	ip, ip, #1
   151c4:	cmp	ip, #10
   151c8:	bne	151b0 <__assert_fail@plt+0x3ae4>
   151cc:	add	lr, sp, #12
   151d0:	str	ip, [sp, #4]
   151d4:	str	lr, [sp]
   151d8:	bl	14d30 <__assert_fail@plt+0x3664>
   151dc:	ldr	r2, [sp, #52]	; 0x34
   151e0:	ldr	r3, [r6]
   151e4:	cmp	r2, r3
   151e8:	bne	151fc <__assert_fail@plt+0x3b30>
   151ec:	add	sp, sp, #60	; 0x3c
   151f0:	pop	{r4, r5, r6, lr}
   151f4:	add	sp, sp, #4
   151f8:	bx	lr
   151fc:	bl	113c0 <__stack_chk_fail@plt>
   15200:	andeq	fp, r2, r0, lsl #30
   15204:	push	{r4, lr}
   15208:	mov	r2, #5
   1520c:	ldr	r1, [pc, #88]	; 1526c <__assert_fail@plt+0x3ba0>
   15210:	mov	r0, #0
   15214:	bl	113b4 <dcgettext@plt>
   15218:	ldr	r2, [pc, #80]	; 15270 <__assert_fail@plt+0x3ba4>
   1521c:	mov	r1, r0
   15220:	mov	r0, #1
   15224:	bl	1157c <__printf_chk@plt>
   15228:	mov	r2, #5
   1522c:	ldr	r1, [pc, #64]	; 15274 <__assert_fail@plt+0x3ba8>
   15230:	mov	r0, #0
   15234:	bl	113b4 <dcgettext@plt>
   15238:	ldr	r3, [pc, #56]	; 15278 <__assert_fail@plt+0x3bac>
   1523c:	ldr	r2, [pc, #56]	; 1527c <__assert_fail@plt+0x3bb0>
   15240:	mov	r1, r0
   15244:	mov	r0, #1
   15248:	bl	1157c <__printf_chk@plt>
   1524c:	ldr	r1, [pc, #44]	; 15280 <__assert_fail@plt+0x3bb4>
   15250:	mov	r2, #5
   15254:	mov	r0, #0
   15258:	bl	113b4 <dcgettext@plt>
   1525c:	ldr	r3, [pc, #32]	; 15284 <__assert_fail@plt+0x3bb8>
   15260:	pop	{r4, lr}
   15264:	ldr	r1, [r3]
   15268:	b	11318 <fputs_unlocked@plt>
   1526c:	andeq	fp, r1, r0, lsr #7
   15270:			; <UNDEFINED> instruction: 0x0001b3b8
   15274:	ldrdeq	fp, [r1], -r0
   15278:	andeq	sl, r1, r0, ror sl
   1527c:	muleq	r1, r8, sl
   15280:	andeq	fp, r1, r4, ror #7
   15284:			; <UNDEFINED> instruction: 0x0002c1bc
   15288:	push	{r4, lr}
   1528c:	mov	r4, r0
   15290:	bl	114a4 <malloc@plt>
   15294:	adds	r4, r4, #0
   15298:	movne	r4, #1
   1529c:	cmp	r0, #0
   152a0:	movne	r4, #0
   152a4:	cmp	r4, #0
   152a8:	popeq	{r4, pc}
   152ac:	bl	154d0 <__assert_fail@plt+0x3e04>
   152b0:	push	{r4, r5, r6, lr}
   152b4:	umull	r4, r5, r0, r1
   152b8:	adds	r3, r5, #0
   152bc:	movne	r3, #1
   152c0:	cmp	r4, #0
   152c4:	blt	152dc <__assert_fail@plt+0x3c10>
   152c8:	cmp	r3, #0
   152cc:	bne	152dc <__assert_fail@plt+0x3c10>
   152d0:	mul	r0, r1, r0
   152d4:	pop	{r4, r5, r6, lr}
   152d8:	b	15288 <__assert_fail@plt+0x3bbc>
   152dc:	bl	154d0 <__assert_fail@plt+0x3e04>
   152e0:	b	15288 <__assert_fail@plt+0x3bbc>
   152e4:	adds	r3, r0, #0
   152e8:	movne	r3, #1
   152ec:	cmp	r1, #0
   152f0:	movne	r3, #0
   152f4:	cmp	r3, #0
   152f8:	push	{r4, lr}
   152fc:	bne	15324 <__assert_fail@plt+0x3c58>
   15300:	mov	r4, r1
   15304:	bl	113d8 <realloc@plt>
   15308:	adds	r4, r4, #0
   1530c:	movne	r4, #1
   15310:	cmp	r0, #0
   15314:	movne	r4, #0
   15318:	cmp	r4, #0
   1531c:	popeq	{r4, pc}
   15320:	bl	154d0 <__assert_fail@plt+0x3e04>
   15324:	bl	11360 <free@plt>
   15328:	mov	r0, #0
   1532c:	pop	{r4, pc}
   15330:	push	{r4, r5, r6, lr}
   15334:	umull	r4, r5, r1, r2
   15338:	adds	r3, r5, #0
   1533c:	movne	r3, #1
   15340:	cmp	r4, #0
   15344:	blt	1535c <__assert_fail@plt+0x3c90>
   15348:	cmp	r3, #0
   1534c:	bne	1535c <__assert_fail@plt+0x3c90>
   15350:	mul	r1, r2, r1
   15354:	pop	{r4, r5, r6, lr}
   15358:	b	152e4 <__assert_fail@plt+0x3c18>
   1535c:	bl	154d0 <__assert_fail@plt+0x3e04>
   15360:	push	{r4, r5, r6, r7, r8, lr}
   15364:	subs	r7, r0, #0
   15368:	mov	r6, r1
   1536c:	mov	r5, r2
   15370:	ldr	r4, [r1]
   15374:	beq	153a8 <__assert_fail@plt+0x3cdc>
   15378:	mov	r1, r2
   1537c:	ldr	r0, [pc, #104]	; 153ec <__assert_fail@plt+0x3d20>
   15380:	bl	19dc8 <fts_children@@Base+0x26a4>
   15384:	cmp	r0, r4
   15388:	bls	153cc <__assert_fail@plt+0x3d00>
   1538c:	add	r3, r4, #1
   15390:	add	r4, r3, r4, lsr #1
   15394:	str	r4, [r6]
   15398:	mul	r1, r5, r4
   1539c:	mov	r0, r7
   153a0:	pop	{r4, r5, r6, r7, r8, lr}
   153a4:	b	152e4 <__assert_fail@plt+0x3c18>
   153a8:	cmp	r4, #0
   153ac:	beq	153d0 <__assert_fail@plt+0x3d04>
   153b0:	umull	r0, r1, r4, r5
   153b4:	adds	r3, r1, #0
   153b8:	movne	r3, #1
   153bc:	cmp	r0, #0
   153c0:	blt	153cc <__assert_fail@plt+0x3d00>
   153c4:	cmp	r3, #0
   153c8:	beq	15394 <__assert_fail@plt+0x3cc8>
   153cc:	bl	154d0 <__assert_fail@plt+0x3e04>
   153d0:	mov	r1, r2
   153d4:	mov	r0, #64	; 0x40
   153d8:	bl	19dc8 <fts_children@@Base+0x26a4>
   153dc:	cmp	r5, #64	; 0x40
   153e0:	movls	r4, r0
   153e4:	addhi	r4, r0, #1
   153e8:	b	153b0 <__assert_fail@plt+0x3ce4>
   153ec:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   153f0:	cmp	r0, #0
   153f4:	ldr	r3, [r1]
   153f8:	beq	1541c <__assert_fail@plt+0x3d50>
   153fc:	ldr	r2, [pc, #60]	; 15440 <__assert_fail@plt+0x3d74>
   15400:	cmp	r3, r2
   15404:	bhi	15438 <__assert_fail@plt+0x3d6c>
   15408:	add	r2, r3, #1
   1540c:	add	r3, r2, r3, lsr #1
   15410:	str	r3, [r1]
   15414:	mov	r1, r3
   15418:	b	152e4 <__assert_fail@plt+0x3c18>
   1541c:	cmp	r3, #0
   15420:	bne	15434 <__assert_fail@plt+0x3d68>
   15424:	mov	r3, #64	; 0x40
   15428:	str	r3, [r1]
   1542c:	mov	r1, r3
   15430:	b	152e4 <__assert_fail@plt+0x3c18>
   15434:	bge	15410 <__assert_fail@plt+0x3d44>
   15438:	push	{r4, lr}
   1543c:	bl	154d0 <__assert_fail@plt+0x3e04>
   15440:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   15444:	push	{r4, lr}
   15448:	mov	r4, r0
   1544c:	bl	15288 <__assert_fail@plt+0x3bbc>
   15450:	mov	r2, r4
   15454:	mov	r1, #0
   15458:	pop	{r4, lr}
   1545c:	b	11570 <memset@plt>
   15460:	push	{r4, r5, r6, lr}
   15464:	umull	r4, r5, r0, r1
   15468:	adds	r3, r5, #0
   1546c:	movne	r3, #1
   15470:	cmp	r4, #0
   15474:	blt	1548c <__assert_fail@plt+0x3dc0>
   15478:	cmp	r3, #0
   1547c:	bne	1548c <__assert_fail@plt+0x3dc0>
   15480:	bl	1130c <calloc@plt>
   15484:	cmp	r0, #0
   15488:	popne	{r4, r5, r6, pc}
   1548c:	bl	154d0 <__assert_fail@plt+0x3e04>
   15490:	push	{r4, r5, r6, lr}
   15494:	mov	r4, r1
   15498:	mov	r5, r0
   1549c:	mov	r0, r1
   154a0:	bl	15288 <__assert_fail@plt+0x3bbc>
   154a4:	mov	r2, r4
   154a8:	mov	r1, r5
   154ac:	pop	{r4, r5, r6, lr}
   154b0:	b	11378 <memcpy@plt>
   154b4:	push	{r4, lr}
   154b8:	mov	r4, r0
   154bc:	bl	11528 <strlen@plt>
   154c0:	add	r1, r0, #1
   154c4:	mov	r0, r4
   154c8:	pop	{r4, lr}
   154cc:	b	15490 <__assert_fail@plt+0x3dc4>
   154d0:	ldr	r3, [pc, #44]	; 15504 <__assert_fail@plt+0x3e38>
   154d4:	push	{r4, lr}
   154d8:	mov	r2, #5
   154dc:	ldr	r1, [pc, #36]	; 15508 <__assert_fail@plt+0x3e3c>
   154e0:	mov	r0, #0
   154e4:	ldr	r4, [r3]
   154e8:	bl	113b4 <dcgettext@plt>
   154ec:	ldr	r2, [pc, #24]	; 1550c <__assert_fail@plt+0x3e40>
   154f0:	mov	r1, #0
   154f4:	mov	r3, r0
   154f8:	mov	r0, r4
   154fc:	bl	11474 <error@plt>
   15500:	bl	11690 <abort@plt>
   15504:	andeq	ip, r2, r4, ror #2
   15508:	andeq	fp, r1, r8, asr r4
   1550c:	andeq	fp, r1, r4, lsr #32
   15510:	push	{r4, lr}
   15514:	orr	r1, r1, #512	; 0x200
   15518:	bl	16a8c <fts_open@@Base>
   1551c:	cmp	r0, #0
   15520:	popne	{r4, pc}
   15524:	bl	1154c <__errno_location@plt>
   15528:	ldr	r3, [r0]
   1552c:	cmp	r3, #22
   15530:	beq	15538 <__assert_fail@plt+0x3e6c>
   15534:	bl	154d0 <__assert_fail@plt+0x3e04>
   15538:	ldr	r3, [pc, #12]	; 1554c <__assert_fail@plt+0x3e80>
   1553c:	mov	r2, #41	; 0x29
   15540:	ldr	r1, [pc, #8]	; 15550 <__assert_fail@plt+0x3e84>
   15544:	ldr	r0, [pc, #8]	; 15554 <__assert_fail@plt+0x3e88>
   15548:	bl	116cc <__assert_fail@plt>
   1554c:	andeq	fp, r1, ip, ror #8
   15550:	andeq	fp, r1, r8, ror r4
   15554:	andeq	fp, r1, r4, lsl #9
   15558:	ldr	r3, [r0, #48]	; 0x30
   1555c:	and	r3, r3, #17
   15560:	cmp	r3, #16
   15564:	beq	15588 <__assert_fail@plt+0x3ebc>
   15568:	cmp	r3, #17
   1556c:	beq	15578 <__assert_fail@plt+0x3eac>
   15570:	mov	r0, #0
   15574:	bx	lr
   15578:	ldr	r0, [r1, #48]	; 0x30
   1557c:	adds	r0, r0, #0
   15580:	movne	r0, #1
   15584:	bx	lr
   15588:	mov	r0, #1
   1558c:	bx	lr
   15590:	ldrd	r2, [r1, #8]
   15594:	push	{r4, r5}
   15598:	ldrd	r4, [r0, #8]
   1559c:	cmp	r5, r3
   155a0:	cmpeq	r4, r2
   155a4:	movne	r0, #0
   155a8:	bne	155c4 <__assert_fail@plt+0x3ef8>
   155ac:	ldrd	r4, [r0]
   155b0:	ldrd	r2, [r1]
   155b4:	cmp	r5, r3
   155b8:	cmpeq	r4, r2
   155bc:	moveq	r0, #1
   155c0:	movne	r0, #0
   155c4:	pop	{r4, r5}
   155c8:	bx	lr
   155cc:	push	{r4, lr}
   155d0:	mov	r2, r1
   155d4:	mov	r3, #0
   155d8:	ldrd	r0, [r0, #8]
   155dc:	bl	19fd4 <fts_children@@Base+0x28b0>
   155e0:	mov	r0, r2
   155e4:	pop	{r4, pc}
   155e8:	push	{r4, lr}
   155ec:	mov	r2, r1
   155f0:	mov	r3, #0
   155f4:	ldrd	r0, [r0]
   155f8:	bl	19fd4 <fts_children@@Base+0x28b0>
   155fc:	mov	r0, r2
   15600:	pop	{r4, pc}
   15604:	push	{r4, r5}
   15608:	ldrd	r2, [r1]
   1560c:	ldrd	r4, [r0]
   15610:	cmp	r5, r3
   15614:	cmpeq	r4, r2
   15618:	moveq	r0, #1
   1561c:	movne	r0, #0
   15620:	pop	{r4, r5}
   15624:	bx	lr
   15628:	ldr	r2, [r0]
   1562c:	ldr	r3, [r1]
   15630:	ldrd	r0, [r2, #168]	; 0xa8
   15634:	ldrd	r2, [r3, #168]	; 0xa8
   15638:	cmp	r1, r3
   1563c:	cmpeq	r0, r2
   15640:	bcc	15650 <__assert_fail@plt+0x3f84>
   15644:	movhi	r0, #1
   15648:	movls	r0, #0
   1564c:	bx	lr
   15650:	mvn	r0, #0
   15654:	bx	lr
   15658:	ldr	r3, [r0, #40]	; 0x28
   1565c:	push	{r4, r5, r6, r7, r8, lr}
   15660:	cmp	r3, r2
   15664:	mov	r6, r0
   15668:	ldr	r7, [r0, #44]	; 0x2c
   1566c:	mov	r5, r2
   15670:	mov	r4, r1
   15674:	ldr	r0, [r0, #8]
   15678:	bcs	156a0 <__assert_fail@plt+0x3fd4>
   1567c:	add	r1, r2, #40	; 0x28
   15680:	cmn	r1, #-1073741823	; 0xc0000001
   15684:	str	r1, [r6, #40]	; 0x28
   15688:	bhi	15718 <__assert_fail@plt+0x404c>
   1568c:	lsl	r1, r1, #2
   15690:	bl	113d8 <realloc@plt>
   15694:	cmp	r0, #0
   15698:	strne	r0, [r6, #8]
   1569c:	beq	15714 <__assert_fail@plt+0x4048>
   156a0:	cmp	r4, #0
   156a4:	movne	r2, r0
   156a8:	beq	156bc <__assert_fail@plt+0x3ff0>
   156ac:	str	r4, [r2], #4
   156b0:	ldr	r4, [r4, #8]
   156b4:	cmp	r4, #0
   156b8:	bne	156ac <__assert_fail@plt+0x3fe0>
   156bc:	mov	r3, r7
   156c0:	mov	r2, #4
   156c4:	mov	r1, r5
   156c8:	bl	1163c <qsort@plt>
   156cc:	ldr	lr, [r6, #8]
   156d0:	subs	r3, r5, #1
   156d4:	ldr	r0, [lr]
   156d8:	moveq	r2, r0
   156dc:	beq	15708 <__assert_fail@plt+0x403c>
   156e0:	mov	ip, r0
   156e4:	mov	r2, lr
   156e8:	b	156f0 <__assert_fail@plt+0x4024>
   156ec:	ldr	ip, [r2]
   156f0:	ldr	r1, [r2, #4]!
   156f4:	subs	r3, r3, #1
   156f8:	str	r1, [ip, #8]
   156fc:	bne	156ec <__assert_fail@plt+0x4020>
   15700:	add	r5, lr, r5, lsl #2
   15704:	ldr	r2, [r5, #-4]
   15708:	mov	r3, #0
   1570c:	str	r3, [r2, #8]
   15710:	pop	{r4, r5, r6, r7, r8, pc}
   15714:	ldr	r0, [r6, #8]
   15718:	bl	11360 <free@plt>
   1571c:	mov	r3, #0
   15720:	mov	r0, r4
   15724:	str	r3, [r6, #8]
   15728:	str	r3, [r6, #40]	; 0x28
   1572c:	pop	{r4, r5, r6, r7, r8, pc}
   15730:	add	r3, r2, #184	; 0xb8
   15734:	push	{r4, r5, r6, r7, r8, lr}
   15738:	mov	r6, r0
   1573c:	bic	r0, r3, #7
   15740:	mov	r5, r2
   15744:	mov	r7, r1
   15748:	bl	114a4 <malloc@plt>
   1574c:	subs	r4, r0, #0
   15750:	beq	1579c <__assert_fail@plt+0x40d0>
   15754:	mov	r1, r7
   15758:	mov	r2, r5
   1575c:	add	r0, r4, #176	; 0xb0
   15760:	bl	11378 <memcpy@plt>
   15764:	add	r0, r4, r5
   15768:	ldr	r1, [r6, #24]
   1576c:	mov	r3, #0
   15770:	mov	r2, #3
   15774:	strb	r3, [r0, #176]	; 0xb0
   15778:	str	r3, [r4, #32]
   1577c:	str	r3, [r4, #12]
   15780:	strh	r3, [r4, #62]	; 0x3e
   15784:	str	r3, [r4, #16]
   15788:	str	r3, [r4, #20]
   1578c:	str	r5, [r4, #52]	; 0x34
   15790:	str	r6, [r4, #44]	; 0x2c
   15794:	str	r1, [r4, #28]
   15798:	strh	r2, [r4, #64]	; 0x40
   1579c:	mov	r0, r4
   157a0:	pop	{r4, r5, r6, r7, r8, pc}
   157a4:	push	{r4, r5, r6, lr}
   157a8:	subs	r4, r0, #0
   157ac:	popeq	{r4, r5, r6, pc}
   157b0:	ldr	r3, [r4, #12]
   157b4:	ldr	r5, [r4, #8]
   157b8:	subs	r0, r3, #0
   157bc:	beq	157c4 <__assert_fail@plt+0x40f8>
   157c0:	bl	116b4 <closedir@plt>
   157c4:	mov	r0, r4
   157c8:	bl	11360 <free@plt>
   157cc:	subs	r4, r5, #0
   157d0:	bne	157b0 <__assert_fail@plt+0x40e4>
   157d4:	pop	{r4, r5, r6, pc}
   157d8:	push	{r4, lr}
   157dc:	mov	r4, r0
   157e0:	mov	r0, r4
   157e4:	bl	19438 <fts_children@@Base+0x1d14>
   157e8:	cmp	r0, #0
   157ec:	mov	r0, r4
   157f0:	popne	{r4, pc}
   157f4:	bl	19484 <fts_children@@Base+0x1d60>
   157f8:	cmp	r0, #0
   157fc:	blt	157e0 <__assert_fail@plt+0x4114>
   15800:	bl	1169c <close@plt>
   15804:	b	157e0 <__assert_fail@plt+0x4114>
   15808:	push	{r4, r5, r6, r7, r8, lr}
   1580c:	sub	sp, sp, #120	; 0x78
   15810:	ldr	r6, [r0, #44]	; 0x2c
   15814:	ldr	r5, [pc, #272]	; 1592c <__assert_fail@plt+0x4260>
   15818:	ldr	r3, [r6, #48]	; 0x30
   1581c:	ldr	r2, [r5]
   15820:	tst	r3, #512	; 0x200
   15824:	str	r2, [sp, #116]	; 0x74
   15828:	beq	158ac <__assert_fail@plt+0x41e0>
   1582c:	ldr	r4, [r6, #52]	; 0x34
   15830:	mov	r7, r0
   15834:	cmp	r4, #0
   15838:	mov	r8, r1
   1583c:	beq	15864 <__assert_fail@plt+0x4198>
   15840:	ldrd	r2, [r7, #72]	; 0x48
   15844:	add	r1, sp, #8
   15848:	mov	r0, r4
   1584c:	strd	r2, [sp, #8]
   15850:	bl	189a8 <fts_children@@Base+0x1284>
   15854:	cmp	r0, #0
   15858:	beq	15890 <__assert_fail@plt+0x41c4>
   1585c:	ldr	r6, [r0, #8]
   15860:	b	158b0 <__assert_fail@plt+0x41e4>
   15864:	ldr	r3, [pc, #196]	; 15930 <__assert_fail@plt+0x4264>
   15868:	mov	r1, r4
   1586c:	str	r3, [sp]
   15870:	ldr	r2, [pc, #188]	; 15934 <__assert_fail@plt+0x4268>
   15874:	ldr	r3, [pc, #188]	; 15938 <__assert_fail@plt+0x426c>
   15878:	mov	r0, #13
   1587c:	bl	18c60 <fts_children@@Base+0x153c>
   15880:	cmp	r0, #0
   15884:	mov	r4, r0
   15888:	str	r0, [r6, #52]	; 0x34
   1588c:	bne	15840 <__assert_fail@plt+0x4174>
   15890:	cmp	r8, #0
   15894:	blt	158ac <__assert_fail@plt+0x41e0>
   15898:	mov	r0, r8
   1589c:	add	r1, sp, #24
   158a0:	bl	11300 <fstatfs64@plt>
   158a4:	cmp	r0, #0
   158a8:	beq	158cc <__assert_fail@plt+0x4200>
   158ac:	mov	r6, #0
   158b0:	ldr	r2, [sp, #116]	; 0x74
   158b4:	ldr	r3, [r5]
   158b8:	mov	r0, r6
   158bc:	cmp	r2, r3
   158c0:	bne	15924 <__assert_fail@plt+0x4258>
   158c4:	add	sp, sp, #120	; 0x78
   158c8:	pop	{r4, r5, r6, r7, r8, pc}
   158cc:	cmp	r4, #0
   158d0:	ldr	r6, [sp, #24]
   158d4:	beq	158b0 <__assert_fail@plt+0x41e4>
   158d8:	mov	r0, #16
   158dc:	bl	114a4 <malloc@plt>
   158e0:	subs	r8, r0, #0
   158e4:	beq	158b0 <__assert_fail@plt+0x41e4>
   158e8:	ldrd	r2, [r7, #72]	; 0x48
   158ec:	str	r6, [r8, #8]
   158f0:	mov	r0, r4
   158f4:	strd	r2, [r8]
   158f8:	mov	r1, r8
   158fc:	bl	1928c <fts_children@@Base+0x1b68>
   15900:	cmp	r0, #0
   15904:	beq	15918 <__assert_fail@plt+0x424c>
   15908:	cmp	r8, r0
   1590c:	bne	15928 <__assert_fail@plt+0x425c>
   15910:	ldr	r6, [sp, #24]
   15914:	b	158b0 <__assert_fail@plt+0x41e4>
   15918:	mov	r0, r8
   1591c:	bl	11360 <free@plt>
   15920:	b	15910 <__assert_fail@plt+0x4244>
   15924:	bl	113c0 <__stack_chk_fail@plt>
   15928:	bl	11690 <abort@plt>
   1592c:	andeq	fp, r2, r0, lsl #30
   15930:	andeq	r1, r1, r0, ror #6
   15934:	andeq	r5, r1, r8, ror #11
   15938:	andeq	r5, r1, r4, lsl #12
   1593c:	push	{r4, lr}
   15940:	bl	15808 <__assert_fail@plt+0x413c>
   15944:	ldr	r3, [pc, #112]	; 159bc <__assert_fail@plt+0x42f0>
   15948:	cmp	r0, r3
   1594c:	beq	159ac <__assert_fail@plt+0x42e0>
   15950:	ble	15988 <__assert_fail@plt+0x42bc>
   15954:	ldr	r3, [pc, #100]	; 159c0 <__assert_fail@plt+0x42f4>
   15958:	cmp	r0, r3
   1595c:	beq	159ac <__assert_fail@plt+0x42e0>
   15960:	add	r3, r3, #83886080	; 0x5000000
   15964:	add	r3, r3, #4544	; 0x11c0
   15968:	add	r3, r3, #51	; 0x33
   1596c:	cmp	r0, r3
   15970:	beq	159b4 <__assert_fail@plt+0x42e8>
   15974:	ldr	r3, [pc, #72]	; 159c4 <__assert_fail@plt+0x42f8>
   15978:	cmp	r0, r3
   1597c:	moveq	r0, #2
   15980:	movne	r0, #1
   15984:	pop	{r4, pc}
   15988:	cmp	r0, #0
   1598c:	popeq	{r4, pc}
   15990:	ldr	r3, [pc, #48]	; 159c8 <__assert_fail@plt+0x42fc>
   15994:	cmp	r0, r3
   15998:	beq	159ac <__assert_fail@plt+0x42e0>
   1599c:	ldr	r3, [pc, #40]	; 159cc <__assert_fail@plt+0x4300>
   159a0:	subs	r0, r0, r3
   159a4:	movne	r0, #1
   159a8:	pop	{r4, pc}
   159ac:	mov	r0, #0
   159b0:	pop	{r4, pc}
   159b4:	mov	r0, #2
   159b8:	pop	{r4, pc}
   159bc:	andeq	r9, r0, r0, lsr #31
   159c0:	movtpl	r4, #24911	; 0x614f
   159c4:	rsbpl	r4, r5, #1884160	; 0x1cc000
   159c8:	andeq	r6, r0, r9, ror #18
   159cc:			; <UNDEFINED> instruction: 0xff534d42
   159d0:	push	{r4, r5, r6, lr}
   159d4:	mov	r5, r1
   159d8:	ldr	r1, [r0, #32]
   159dc:	cmn	r1, #100	; 0x64
   159e0:	sub	r3, r1, r5
   159e4:	clz	r3, r3
   159e8:	lsr	r3, r3, #5
   159ec:	moveq	r3, #0
   159f0:	cmp	r3, #0
   159f4:	bne	15a54 <__assert_fail@plt+0x4388>
   159f8:	cmp	r2, #0
   159fc:	mov	r4, r0
   15a00:	bne	15a2c <__assert_fail@plt+0x4360>
   15a04:	ldr	r3, [r0, #48]	; 0x30
   15a08:	lsr	r3, r3, #2
   15a0c:	eor	r3, r3, #1
   15a10:	cmp	r1, #0
   15a14:	movlt	r3, #0
   15a18:	andge	r3, r3, #1
   15a1c:	cmp	r3, #0
   15a20:	bne	15a48 <__assert_fail@plt+0x437c>
   15a24:	str	r5, [r4, #32]
   15a28:	pop	{r4, r5, r6, pc}
   15a2c:	add	r0, r0, #60	; 0x3c
   15a30:	bl	19440 <fts_children@@Base+0x1d1c>
   15a34:	cmp	r0, #0
   15a38:	blt	15a24 <__assert_fail@plt+0x4358>
   15a3c:	bl	1169c <close@plt>
   15a40:	str	r5, [r4, #32]
   15a44:	pop	{r4, r5, r6, pc}
   15a48:	mov	r0, r1
   15a4c:	bl	1169c <close@plt>
   15a50:	b	15a40 <__assert_fail@plt+0x4374>
   15a54:	bl	11690 <abort@plt>
   15a58:	ldr	r3, [r0, #48]	; 0x30
   15a5c:	push	{r4, r5, r6, lr}
   15a60:	ands	r5, r3, #4
   15a64:	mov	r4, r0
   15a68:	movne	r5, #0
   15a6c:	bne	15a84 <__assert_fail@plt+0x43b8>
   15a70:	tst	r3, #512	; 0x200
   15a74:	beq	15a94 <__assert_fail@plt+0x43c8>
   15a78:	mov	r2, #1
   15a7c:	mvn	r1, #99	; 0x63
   15a80:	bl	159d0 <__assert_fail@plt+0x4304>
   15a84:	add	r0, r4, #60	; 0x3c
   15a88:	bl	157d8 <__assert_fail@plt+0x410c>
   15a8c:	mov	r0, r5
   15a90:	pop	{r4, r5, r6, pc}
   15a94:	ldr	r0, [r0, #28]
   15a98:	bl	11630 <fchdir@plt>
   15a9c:	adds	r5, r0, #0
   15aa0:	movne	r5, #1
   15aa4:	b	15a84 <__assert_fail@plt+0x43b8>
   15aa8:	push	{r4, r5, r6, lr}
   15aac:	mov	r4, r2
   15ab0:	ldr	r2, [r2, #48]	; 0x30
   15ab4:	mov	r6, r1
   15ab8:	cmp	r2, #0
   15abc:	ldr	ip, [r1]
   15ac0:	sub	sp, sp, #8
   15ac4:	add	r5, r4, #72	; 0x48
   15ac8:	ldr	r1, [r4, #24]
   15acc:	bne	15b2c <__assert_fail@plt+0x4460>
   15ad0:	tst	ip, #1
   15ad4:	beq	15b2c <__assert_fail@plt+0x4460>
   15ad8:	mov	r2, r5
   15adc:	mov	r0, #3
   15ae0:	bl	11678 <__xstat64@plt>
   15ae4:	cmp	r0, #0
   15ae8:	beq	15b5c <__assert_fail@plt+0x4490>
   15aec:	bl	1154c <__errno_location@plt>
   15af0:	ldr	r3, [r0]
   15af4:	mov	r6, r0
   15af8:	cmp	r3, #2
   15afc:	bne	15b90 <__assert_fail@plt+0x44c4>
   15b00:	mov	r2, r5
   15b04:	ldr	r1, [r4, #24]
   15b08:	mov	r0, #3
   15b0c:	bl	116a8 <__lxstat64@plt>
   15b10:	cmp	r0, #0
   15b14:	ldrne	r3, [r6]
   15b18:	bne	15b90 <__assert_fail@plt+0x44c4>
   15b1c:	str	r0, [r6]
   15b20:	mov	r0, #13
   15b24:	add	sp, sp, #8
   15b28:	pop	{r4, r5, r6, pc}
   15b2c:	lsl	ip, ip, #30
   15b30:	orrs	r3, r3, ip, lsr #31
   15b34:	bne	15ad8 <__assert_fail@plt+0x440c>
   15b38:	mov	r3, #256	; 0x100
   15b3c:	mov	r2, r1
   15b40:	str	r3, [sp]
   15b44:	mov	r1, r0
   15b48:	mov	r3, r5
   15b4c:	mov	r0, #3
   15b50:	bl	11408 <__fxstatat64@plt>
   15b54:	cmp	r0, #0
   15b58:	bne	15b88 <__assert_fail@plt+0x44bc>
   15b5c:	ldr	r3, [r4, #88]	; 0x58
   15b60:	and	r3, r3, #61440	; 0xf000
   15b64:	cmp	r3, #16384	; 0x4000
   15b68:	beq	15bb0 <__assert_fail@plt+0x44e4>
   15b6c:	cmp	r3, #40960	; 0xa000
   15b70:	beq	15c2c <__assert_fail@plt+0x4560>
   15b74:	cmp	r3, #32768	; 0x8000
   15b78:	movne	r0, #3
   15b7c:	moveq	r0, #8
   15b80:	add	sp, sp, #8
   15b84:	pop	{r4, r5, r6, pc}
   15b88:	bl	1154c <__errno_location@plt>
   15b8c:	ldr	r3, [r0]
   15b90:	str	r3, [r4, #32]
   15b94:	mov	r0, r5
   15b98:	mov	r2, #104	; 0x68
   15b9c:	mov	r1, #0
   15ba0:	bl	11570 <memset@plt>
   15ba4:	mov	r0, #10
   15ba8:	add	sp, sp, #8
   15bac:	pop	{r4, r5, r6, pc}
   15bb0:	ldr	r3, [r4, #92]	; 0x5c
   15bb4:	cmp	r3, #1
   15bb8:	bls	15c24 <__assert_fail@plt+0x4558>
   15bbc:	ldr	r2, [r4, #48]	; 0x30
   15bc0:	cmp	r2, #0
   15bc4:	ble	15c24 <__assert_fail@plt+0x4558>
   15bc8:	ldr	r2, [r6]
   15bcc:	tst	r2, #32
   15bd0:	subeq	r3, r3, #2
   15bd4:	ldrb	r2, [r4, #176]	; 0xb0
   15bd8:	str	r3, [r4, #56]	; 0x38
   15bdc:	cmp	r2, #46	; 0x2e
   15be0:	bne	15c04 <__assert_fail@plt+0x4538>
   15be4:	ldrb	r3, [r4, #177]	; 0xb1
   15be8:	cmp	r3, #0
   15bec:	beq	15c10 <__assert_fail@plt+0x4544>
   15bf0:	ldr	r3, [r4, #176]	; 0xb0
   15bf4:	bic	r3, r3, #-16777216	; 0xff000000
   15bf8:	bic	r3, r3, #255	; 0xff
   15bfc:	cmp	r3, #11776	; 0x2e00
   15c00:	beq	15c10 <__assert_fail@plt+0x4544>
   15c04:	mov	r0, #1
   15c08:	add	sp, sp, #8
   15c0c:	pop	{r4, r5, r6, pc}
   15c10:	ldr	r3, [r4, #48]	; 0x30
   15c14:	cmp	r3, #0
   15c18:	moveq	r0, #1
   15c1c:	movne	r0, #5
   15c20:	b	15b80 <__assert_fail@plt+0x44b4>
   15c24:	mvn	r3, #0
   15c28:	b	15bd4 <__assert_fail@plt+0x4508>
   15c2c:	mov	r0, #12
   15c30:	b	15b80 <__assert_fail@plt+0x44b4>
   15c34:	ldr	ip, [r1]
   15c38:	push	{r4, r5, r6, lr}
   15c3c:	add	r3, ip, #256	; 0x100
   15c40:	add	r2, r3, r2
   15c44:	cmp	ip, r2
   15c48:	mov	r4, r0
   15c4c:	ldr	r0, [r0]
   15c50:	bhi	15c78 <__assert_fail@plt+0x45ac>
   15c54:	str	r2, [r1]
   15c58:	mov	r1, r2
   15c5c:	bl	113d8 <realloc@plt>
   15c60:	subs	r5, r0, #0
   15c64:	movne	r3, #1
   15c68:	strne	r5, [r4]
   15c6c:	beq	15c9c <__assert_fail@plt+0x45d0>
   15c70:	mov	r0, r3
   15c74:	pop	{r4, r5, r6, pc}
   15c78:	mov	r5, #0
   15c7c:	bl	11360 <free@plt>
   15c80:	str	r5, [r4]
   15c84:	bl	1154c <__errno_location@plt>
   15c88:	mov	r2, #36	; 0x24
   15c8c:	mov	r3, r5
   15c90:	str	r2, [r0]
   15c94:	mov	r0, r3
   15c98:	pop	{r4, r5, r6, pc}
   15c9c:	ldr	r0, [r4]
   15ca0:	bl	11360 <free@plt>
   15ca4:	str	r5, [r4]
   15ca8:	mov	r3, r5
   15cac:	b	15c70 <__assert_fail@plt+0x45a4>
   15cb0:	ldr	r3, [pc, #104]	; 15d20 <__assert_fail@plt+0x4654>
   15cb4:	push	{r4, lr}
   15cb8:	and	r3, r3, r0
   15cbc:	cmp	r3, #0
   15cc0:	sub	sp, sp, #8
   15cc4:	mov	r4, r1
   15cc8:	beq	15cfc <__assert_fail@plt+0x4630>
   15ccc:	ldr	r2, [pc, #80]	; 15d24 <__assert_fail@plt+0x4658>
   15cd0:	ldr	r3, [pc, #80]	; 15d28 <__assert_fail@plt+0x465c>
   15cd4:	str	r2, [sp]
   15cd8:	mov	r1, #0
   15cdc:	ldr	r2, [pc, #72]	; 15d2c <__assert_fail@plt+0x4660>
   15ce0:	mov	r0, #31
   15ce4:	bl	18c60 <fts_children@@Base+0x153c>
   15ce8:	str	r0, [r4]
   15cec:	adds	r0, r0, #0
   15cf0:	movne	r0, #1
   15cf4:	add	sp, sp, #8
   15cf8:	pop	{r4, pc}
   15cfc:	mov	r0, #32
   15d00:	bl	114a4 <malloc@plt>
   15d04:	cmp	r0, #0
   15d08:	str	r0, [r4]
   15d0c:	beq	15cf4 <__assert_fail@plt+0x4628>
   15d10:	bl	1818c <fts_children@@Base+0xa68>
   15d14:	mov	r0, #1
   15d18:	add	sp, sp, #8
   15d1c:	pop	{r4, pc}
   15d20:	andeq	r0, r0, r2, lsl #2
   15d24:	andeq	r1, r1, r0, ror #6
   15d28:	muleq	r1, r0, r5
   15d2c:	andeq	r5, r1, ip, asr #11
   15d30:	lsl	r3, r1, #11
   15d34:	lsl	ip, r1, #7
   15d38:	tst	r1, #512	; 0x200
   15d3c:	and	r1, r3, #32768	; 0x8000
   15d40:	and	r3, ip, #262144	; 0x40000
   15d44:	orr	r1, r1, r3
   15d48:	orr	r1, r1, #540672	; 0x84000
   15d4c:	mov	r3, r2
   15d50:	orr	r1, r1, #2304	; 0x900
   15d54:	beq	15d64 <__assert_fail@plt+0x4698>
   15d58:	mov	r2, r1
   15d5c:	mov	r1, r3
   15d60:	b	19578 <fts_children@@Base+0x1e54>
   15d64:	mov	r0, r2
   15d68:	b	18284 <fts_children@@Base+0xb60>
   15d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d70:	subs	fp, r3, #0
   15d74:	ldr	r5, [pc, #500]	; 15f70 <__assert_fail@plt+0x48a4>
   15d78:	sub	sp, sp, #116	; 0x74
   15d7c:	ldr	sl, [r0, #48]	; 0x30
   15d80:	ldr	r3, [r5]
   15d84:	mov	r6, r0
   15d88:	mov	r7, r1
   15d8c:	mov	r4, r2
   15d90:	and	r9, sl, #4
   15d94:	str	r3, [sp, #108]	; 0x6c
   15d98:	beq	15e6c <__assert_fail@plt+0x47a0>
   15d9c:	ldr	r1, [pc, #464]	; 15f74 <__assert_fail@plt+0x48a8>
   15da0:	mov	r0, fp
   15da4:	bl	11330 <strcmp@plt>
   15da8:	cmp	r0, #0
   15dac:	bne	15e6c <__assert_fail@plt+0x47a0>
   15db0:	cmp	r9, #0
   15db4:	bne	15ea8 <__assert_fail@plt+0x47dc>
   15db8:	cmp	r4, #0
   15dbc:	bge	15f5c <__assert_fail@plt+0x4890>
   15dc0:	tst	sl, #512	; 0x200
   15dc4:	bne	15ee8 <__assert_fail@plt+0x481c>
   15dc8:	mov	r9, #1
   15dcc:	mov	r1, sl
   15dd0:	mov	r2, fp
   15dd4:	ldr	r0, [r6, #32]
   15dd8:	bl	15d30 <__assert_fail@plt+0x4664>
   15ddc:	subs	r8, r0, #0
   15de0:	blt	15f50 <__assert_fail@plt+0x4884>
   15de4:	ldr	sl, [r6, #48]	; 0x30
   15de8:	tst	sl, #2
   15dec:	beq	15e88 <__assert_fail@plt+0x47bc>
   15df0:	mov	r2, sp
   15df4:	mov	r1, r8
   15df8:	mov	r0, #3
   15dfc:	bl	11420 <__fxstat64@plt>
   15e00:	cmp	r0, #0
   15e04:	bne	15ee0 <__assert_fail@plt+0x4814>
   15e08:	ldrd	r0, [r7, #72]	; 0x48
   15e0c:	ldrd	r2, [sp]
   15e10:	cmp	r1, r3
   15e14:	cmpeq	r0, r2
   15e18:	bne	15ed4 <__assert_fail@plt+0x4808>
   15e1c:	ldrd	r0, [r7, #168]	; 0xa8
   15e20:	ldrd	r2, [sp, #96]	; 0x60
   15e24:	cmp	r1, r3
   15e28:	cmpeq	r0, r2
   15e2c:	bne	15ed4 <__assert_fail@plt+0x4808>
   15e30:	ldr	sl, [r6, #48]	; 0x30
   15e34:	tst	sl, #512	; 0x200
   15e38:	bne	15f24 <__assert_fail@plt+0x4858>
   15e3c:	mov	r0, r8
   15e40:	bl	11630 <fchdir@plt>
   15e44:	mov	sl, r0
   15e48:	cmp	r4, #0
   15e4c:	bge	15eb8 <__assert_fail@plt+0x47ec>
   15e50:	bl	1154c <__errno_location@plt>
   15e54:	mov	r4, r0
   15e58:	mov	r0, r8
   15e5c:	ldr	r6, [r4]
   15e60:	bl	1169c <close@plt>
   15e64:	str	r6, [r4]
   15e68:	b	15eb8 <__assert_fail@plt+0x47ec>
   15e6c:	cmp	r9, #0
   15e70:	bne	15ea8 <__assert_fail@plt+0x47dc>
   15e74:	cmp	r4, #0
   15e78:	movge	r8, r4
   15e7c:	blt	15dcc <__assert_fail@plt+0x4700>
   15e80:	tst	sl, #2
   15e84:	bne	15df0 <__assert_fail@plt+0x4724>
   15e88:	cmp	fp, #0
   15e8c:	beq	15e34 <__assert_fail@plt+0x4768>
   15e90:	mov	r0, fp
   15e94:	ldr	r1, [pc, #216]	; 15f74 <__assert_fail@plt+0x48a8>
   15e98:	bl	11330 <strcmp@plt>
   15e9c:	cmp	r0, #0
   15ea0:	bne	15e34 <__assert_fail@plt+0x4768>
   15ea4:	b	15df0 <__assert_fail@plt+0x4724>
   15ea8:	mvn	r3, r4
   15eac:	lsr	r3, r3, #31
   15eb0:	ands	sl, r3, sl, lsr #9
   15eb4:	bne	15f40 <__assert_fail@plt+0x4874>
   15eb8:	ldr	r2, [sp, #108]	; 0x6c
   15ebc:	ldr	r3, [r5]
   15ec0:	mov	r0, sl
   15ec4:	cmp	r2, r3
   15ec8:	bne	15f58 <__assert_fail@plt+0x488c>
   15ecc:	add	sp, sp, #116	; 0x74
   15ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed4:	bl	1154c <__errno_location@plt>
   15ed8:	mov	r3, #2
   15edc:	str	r3, [r0]
   15ee0:	mvn	sl, #0
   15ee4:	b	15e48 <__assert_fail@plt+0x477c>
   15ee8:	add	r8, r6, #60	; 0x3c
   15eec:	mov	r0, r8
   15ef0:	bl	19438 <fts_children@@Base+0x1d14>
   15ef4:	subs	r9, r0, #0
   15ef8:	bne	15dcc <__assert_fail@plt+0x4700>
   15efc:	mov	r0, r8
   15f00:	bl	19484 <fts_children@@Base+0x1d60>
   15f04:	ldr	sl, [r6, #48]	; 0x30
   15f08:	subs	r8, r0, #0
   15f0c:	blt	15dc8 <__assert_fail@plt+0x46fc>
   15f10:	tst	sl, #2
   15f14:	mov	r4, r8
   15f18:	mov	r9, #1
   15f1c:	beq	15e34 <__assert_fail@plt+0x4768>
   15f20:	b	15df0 <__assert_fail@plt+0x4724>
   15f24:	eor	r2, r9, #1
   15f28:	mov	r1, r8
   15f2c:	uxtb	r2, r2
   15f30:	mov	r0, r6
   15f34:	bl	159d0 <__assert_fail@plt+0x4304>
   15f38:	mov	sl, #0
   15f3c:	b	15eb8 <__assert_fail@plt+0x47ec>
   15f40:	mov	r0, r4
   15f44:	bl	1169c <close@plt>
   15f48:	mov	sl, #0
   15f4c:	b	15eb8 <__assert_fail@plt+0x47ec>
   15f50:	mvn	sl, #0
   15f54:	b	15eb8 <__assert_fail@plt+0x47ec>
   15f58:	bl	113c0 <__stack_chk_fail@plt>
   15f5c:	tst	sl, #2
   15f60:	mov	r8, r4
   15f64:	mov	r9, #1
   15f68:	beq	15e90 <__assert_fail@plt+0x47c4>
   15f6c:	b	15df0 <__assert_fail@plt+0x4724>
   15f70:	andeq	fp, r2, r0, lsl #30
   15f74:	andeq	fp, r1, r4, asr #9
   15f78:	ldr	r3, [pc, #164]	; 16024 <__assert_fail@plt+0x4958>
   15f7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f80:	and	r3, r3, r0
   15f84:	cmp	r3, #0
   15f88:	mov	sl, r1
   15f8c:	mov	r8, r2
   15f90:	beq	15ff8 <__assert_fail@plt+0x492c>
   15f94:	mov	r0, #24
   15f98:	bl	114a4 <malloc@plt>
   15f9c:	subs	r9, r0, #0
   15fa0:	beq	1601c <__assert_fail@plt+0x4950>
   15fa4:	ldrd	r4, [r8, #168]	; 0xa8
   15fa8:	ldrd	r6, [r8, #72]	; 0x48
   15fac:	str	r8, [r9, #16]
   15fb0:	strd	r4, [r9, #8]
   15fb4:	ldr	r0, [sl]
   15fb8:	strd	r6, [r9]
   15fbc:	mov	r1, r9
   15fc0:	bl	1928c <fts_children@@Base+0x1b68>
   15fc4:	cmp	r9, r0
   15fc8:	mov	r4, r0
   15fcc:	beq	15ff0 <__assert_fail@plt+0x4924>
   15fd0:	mov	r0, r9
   15fd4:	bl	11360 <free@plt>
   15fd8:	cmp	r4, #0
   15fdc:	beq	1601c <__assert_fail@plt+0x4950>
   15fe0:	ldr	r2, [r4, #16]
   15fe4:	mov	r3, #2
   15fe8:	str	r2, [r8]
   15fec:	strh	r3, [r8, #60]	; 0x3c
   15ff0:	mov	r0, #1
   15ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ff8:	ldr	r0, [r1]
   15ffc:	add	r1, r2, #72	; 0x48
   16000:	bl	181b0 <fts_children@@Base+0xa8c>
   16004:	cmp	r0, #0
   16008:	beq	15ff0 <__assert_fail@plt+0x4924>
   1600c:	mov	r3, #2
   16010:	str	r8, [r8]
   16014:	strh	r3, [r8, #60]	; 0x3c
   16018:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1601c:	mov	r0, #0
   16020:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16024:	andeq	r0, r0, r2, lsl #2
   16028:	push	{r4, r5, r6, lr}
   1602c:	sub	sp, sp, #32
   16030:	ldr	r6, [pc, #192]	; 160f8 <__assert_fail@plt+0x4a2c>
   16034:	ldr	r3, [pc, #192]	; 160fc <__assert_fail@plt+0x4a30>
   16038:	ldr	ip, [r6]
   1603c:	and	r3, r3, r0
   16040:	cmp	r3, #0
   16044:	str	ip, [sp, #28]
   16048:	bne	160a0 <__assert_fail@plt+0x49d4>
   1604c:	ldr	r3, [r2, #4]
   16050:	cmp	r3, #0
   16054:	beq	16088 <__assert_fail@plt+0x49bc>
   16058:	ldr	r0, [r3, #48]	; 0x30
   1605c:	cmp	r0, #0
   16060:	blt	16088 <__assert_fail@plt+0x49bc>
   16064:	ldr	ip, [r1]
   16068:	ldrd	r0, [ip, #16]
   1606c:	orrs	r1, r0, r1
   16070:	beq	160f4 <__assert_fail@plt+0x4a28>
   16074:	ldrd	r4, [ip]
   16078:	ldrd	r0, [r2, #168]	; 0xa8
   1607c:	cmp	r5, r1
   16080:	cmpeq	r4, r0
   16084:	beq	160cc <__assert_fail@plt+0x4a00>
   16088:	ldr	r2, [sp, #28]
   1608c:	ldr	r3, [r6]
   16090:	cmp	r2, r3
   16094:	bne	160f0 <__assert_fail@plt+0x4a24>
   16098:	add	sp, sp, #32
   1609c:	pop	{r4, r5, r6, pc}
   160a0:	ldrd	r4, [r2, #72]	; 0x48
   160a4:	ldrd	r2, [r2, #168]	; 0xa8
   160a8:	ldr	r0, [r1]
   160ac:	mov	r1, sp
   160b0:	strd	r4, [sp]
   160b4:	strd	r2, [sp, #8]
   160b8:	bl	192e4 <fts_children@@Base+0x1bc0>
   160bc:	cmp	r0, #0
   160c0:	beq	160f4 <__assert_fail@plt+0x4a28>
   160c4:	bl	11360 <free@plt>
   160c8:	b	16088 <__assert_fail@plt+0x49bc>
   160cc:	ldrd	r4, [r2, #72]	; 0x48
   160d0:	ldrd	r0, [ip, #8]
   160d4:	cmp	r1, r5
   160d8:	cmpeq	r0, r4
   160dc:	ldrdeq	r0, [r3, #72]	; 0x48
   160e0:	ldrdeq	r2, [r3, #168]	; 0xa8
   160e4:	strdeq	r0, [ip, #8]
   160e8:	strdeq	r2, [ip]
   160ec:	b	16088 <__assert_fail@plt+0x49bc>
   160f0:	bl	113c0 <__stack_chk_fail@plt>
   160f4:	bl	11690 <abort@plt>
   160f8:	andeq	fp, r2, r0, lsl #30
   160fc:	andeq	r0, r0, r2, lsl #2
   16100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16104:	mov	r5, r0
   16108:	ldr	r9, [r0]
   1610c:	sub	sp, sp, #60	; 0x3c
   16110:	ldr	r0, [r9, #12]
   16114:	str	r1, [sp, #36]	; 0x24
   16118:	cmp	r0, #0
   1611c:	str	r0, [sp, #48]	; 0x30
   16120:	beq	1641c <__assert_fail@plt+0x4d50>
   16124:	bl	11624 <dirfd@plt>
   16128:	subs	r3, r0, #0
   1612c:	str	r3, [sp, #44]	; 0x2c
   16130:	blt	169ac <__assert_fail@plt+0x52e0>
   16134:	ldr	r3, [r5, #44]	; 0x2c
   16138:	cmp	r3, #0
   1613c:	beq	166f4 <__assert_fail@plt+0x5028>
   16140:	ldr	r0, [r5, #48]	; 0x30
   16144:	mvn	r3, #0
   16148:	str	r3, [sp, #20]
   1614c:	mov	r3, #1
   16150:	str	r3, [sp, #52]	; 0x34
   16154:	ldr	r2, [r9, #40]	; 0x28
   16158:	ldr	r3, [r9, #28]
   1615c:	sub	r1, r2, #1
   16160:	str	r2, [sp, #4]
   16164:	ldrb	r3, [r3, r1]
   16168:	str	r1, [sp, #32]
   1616c:	mov	sl, #0
   16170:	cmp	r3, #47	; 0x2f
   16174:	addne	r3, r2, #1
   16178:	strne	r3, [sp, #4]
   1617c:	strne	r2, [sp, #32]
   16180:	ands	r0, r0, #4
   16184:	movne	r1, #47	; 0x2f
   16188:	ldrne	r3, [r5, #24]
   1618c:	ldrne	r0, [sp, #32]
   16190:	streq	r0, [sp, #24]
   16194:	addne	r2, r3, r0
   16198:	strbne	r1, [r3, r0]
   1619c:	addne	r3, r2, #1
   161a0:	strne	r3, [sp, #24]
   161a4:	ldr	r3, [r9, #48]	; 0x30
   161a8:	ldr	fp, [r5, #36]	; 0x24
   161ac:	ldr	r2, [sp, #4]
   161b0:	add	r3, r3, #1
   161b4:	str	sl, [sp, #40]	; 0x28
   161b8:	sub	fp, fp, r2
   161bc:	str	r3, [sp, #16]
   161c0:	str	sl, [sp, #28]
   161c4:	mov	r7, sl
   161c8:	str	sl, [sp, #8]
   161cc:	str	r9, [sp, #12]
   161d0:	b	16220 <__assert_fail@plt+0x4b54>
   161d4:	mov	r3, #0
   161d8:	str	r3, [r4, #88]	; 0x58
   161dc:	mov	r2, #2
   161e0:	mov	r3, #0
   161e4:	strd	r2, [r4, #120]	; 0x78
   161e8:	ldr	r3, [sp, #8]
   161ec:	cmp	r3, #0
   161f0:	mov	r3, #0
   161f4:	str	r3, [r4, #8]
   161f8:	ldr	r3, [pc, #2148]	; 16a64 <__assert_fail@plt+0x5398>
   161fc:	strne	r4, [sl, #8]
   16200:	streq	r4, [sp, #8]
   16204:	cmp	r7, r3
   16208:	beq	16324 <__assert_fail@plt+0x4c58>
   1620c:	ldr	r3, [sp, #20]
   16210:	add	r7, r7, #1
   16214:	cmp	r7, r3
   16218:	bcs	165b0 <__assert_fail@plt+0x4ee4>
   1621c:	mov	sl, r4
   16220:	ldr	r3, [sp, #12]
   16224:	ldr	r4, [r3, #12]
   16228:	cmp	r4, #0
   1622c:	beq	1670c <__assert_fail@plt+0x5040>
   16230:	bl	1154c <__errno_location@plt>
   16234:	mov	r3, #0
   16238:	mov	r8, r0
   1623c:	mov	r0, r4
   16240:	str	r3, [r8]
   16244:	bl	1160c <readdir64@plt>
   16248:	subs	r9, r0, #0
   1624c:	beq	167d4 <__assert_fail@plt+0x5108>
   16250:	ldr	r3, [r5, #48]	; 0x30
   16254:	tst	r3, #32
   16258:	bne	16268 <__assert_fail@plt+0x4b9c>
   1625c:	ldrb	r3, [r9, #19]
   16260:	cmp	r3, #46	; 0x2e
   16264:	beq	163b0 <__assert_fail@plt+0x4ce4>
   16268:	add	r4, r9, #19
   1626c:	mov	r0, r4
   16270:	bl	11528 <strlen@plt>
   16274:	mov	r1, r4
   16278:	mov	r2, r0
   1627c:	mov	r6, r0
   16280:	mov	r0, r5
   16284:	bl	15730 <__assert_fail@plt+0x4064>
   16288:	subs	r4, r0, #0
   1628c:	beq	1665c <__assert_fail@plt+0x4f90>
   16290:	cmp	fp, r6
   16294:	bls	16338 <__assert_fail@plt+0x4c6c>
   16298:	ldr	r3, [sp, #4]
   1629c:	adds	r6, r3, r6
   162a0:	bcs	16a1c <__assert_fail@plt+0x5350>
   162a4:	ldr	r0, [r5, #48]	; 0x30
   162a8:	ldr	r1, [r5]
   162ac:	ldrd	r2, [r9]
   162b0:	ldr	ip, [sp, #16]
   162b4:	tst	r0, #4
   162b8:	str	r1, [r4, #4]
   162bc:	add	r1, r4, #176	; 0xb0
   162c0:	str	ip, [r4, #48]	; 0x30
   162c4:	strd	r2, [r4, #168]	; 0xa8
   162c8:	str	r6, [r4, #40]	; 0x28
   162cc:	streq	r1, [r4, #24]
   162d0:	bne	16390 <__assert_fail@plt+0x4cc4>
   162d4:	ldr	r3, [r5, #44]	; 0x2c
   162d8:	cmp	r3, #0
   162dc:	beq	162e8 <__assert_fail@plt+0x4c1c>
   162e0:	ands	r3, r0, #1024	; 0x400
   162e4:	beq	163fc <__assert_fail@plt+0x4d30>
   162e8:	ldrb	r2, [r9, #18]
   162ec:	and	r0, r0, #24
   162f0:	cmp	r0, #24
   162f4:	sub	r3, r2, #1
   162f8:	beq	163d0 <__assert_fail@plt+0x4d04>
   162fc:	mov	r2, #11
   16300:	cmp	r3, #11
   16304:	strh	r2, [r4, #60]	; 0x3c
   16308:	bhi	161d4 <__assert_fail@plt+0x4b08>
   1630c:	ldr	r2, [pc, #1876]	; 16a68 <__assert_fail@plt+0x539c>
   16310:	ldr	r1, [r2, r3, lsl #2]
   16314:	mov	r2, #2
   16318:	mov	r3, #0
   1631c:	str	r1, [r4, #88]	; 0x58
   16320:	b	161e4 <__assert_fail@plt+0x4b18>
   16324:	ldr	r6, [r5, #44]	; 0x2c
   16328:	cmp	r6, #0
   1632c:	beq	16564 <__assert_fail@plt+0x4e98>
   16330:	ldr	r7, [pc, #1844]	; 16a6c <__assert_fail@plt+0x53a0>
   16334:	b	1621c <__assert_fail@plt+0x4b50>
   16338:	ldr	r3, [sp, #32]
   1633c:	add	r1, r5, #36	; 0x24
   16340:	add	r2, r3, #2
   16344:	add	r2, r2, r6
   16348:	add	r0, r5, #24
   1634c:	ldr	fp, [r5, #24]
   16350:	bl	15c34 <__assert_fail@plt+0x4568>
   16354:	cmp	r0, #0
   16358:	beq	1665c <__assert_fail@plt+0x4f90>
   1635c:	ldr	r3, [r5, #24]
   16360:	cmp	r3, fp
   16364:	beq	16414 <__assert_fail@plt+0x4d48>
   16368:	ldr	r2, [r5, #48]	; 0x30
   1636c:	tst	r2, #4
   16370:	ldrne	r2, [sp, #4]
   16374:	addne	r3, r3, r2
   16378:	strne	r3, [sp, #24]
   1637c:	ldr	fp, [r5, #36]	; 0x24
   16380:	ldr	r3, [sp, #4]
   16384:	str	r0, [sp, #28]
   16388:	sub	fp, fp, r3
   1638c:	b	16298 <__assert_fail@plt+0x4bcc>
   16390:	ldr	r3, [r4, #28]
   16394:	ldr	r2, [r4, #52]	; 0x34
   16398:	str	r3, [r4, #24]
   1639c:	add	r2, r2, #1
   163a0:	ldr	r0, [sp, #24]
   163a4:	bl	11354 <memmove@plt>
   163a8:	ldr	r0, [r5, #48]	; 0x30
   163ac:	b	162d4 <__assert_fail@plt+0x4c08>
   163b0:	ldrb	r3, [r9, #20]
   163b4:	cmp	r3, #0
   163b8:	beq	163c8 <__assert_fail@plt+0x4cfc>
   163bc:	ldrh	r3, [r9, #20]
   163c0:	cmp	r3, #46	; 0x2e
   163c4:	bne	16268 <__assert_fail@plt+0x4b9c>
   163c8:	mov	r4, sl
   163cc:	b	1621c <__assert_fail@plt+0x4b50>
   163d0:	tst	r2, #251	; 0xfb
   163d4:	beq	162fc <__assert_fail@plt+0x4c30>
   163d8:	mov	r2, #11
   163dc:	cmp	r3, #11
   163e0:	strh	r2, [r4, #60]	; 0x3c
   163e4:	bls	16644 <__assert_fail@plt+0x4f78>
   163e8:	mov	r3, #0
   163ec:	str	r3, [r4, #88]	; 0x58
   163f0:	mov	r2, #1
   163f4:	mov	r3, #0
   163f8:	b	161e4 <__assert_fail@plt+0x4b18>
   163fc:	mov	r2, r4
   16400:	add	r1, r5, #48	; 0x30
   16404:	ldr	r0, [r5, #32]
   16408:	bl	15aa8 <__assert_fail@plt+0x43dc>
   1640c:	strh	r0, [r4, #60]	; 0x3c
   16410:	b	161e8 <__assert_fail@plt+0x4b1c>
   16414:	ldr	r0, [sp, #28]
   16418:	b	1637c <__assert_fail@plt+0x4cb0>
   1641c:	ldr	r3, [r5, #48]	; 0x30
   16420:	ldr	r1, [r9, #24]
   16424:	and	r2, r3, #516	; 0x204
   16428:	cmp	r2, #512	; 0x200
   1642c:	mvnne	r0, #99	; 0x63
   16430:	ldreq	r0, [r5, #32]
   16434:	ands	ip, r3, #16
   16438:	beq	16448 <__assert_fail@plt+0x4d7c>
   1643c:	tst	r3, #1
   16440:	moveq	ip, #32768	; 0x8000
   16444:	bne	166ac <__assert_fail@plt+0x4fe0>
   16448:	lsl	r2, r3, #7
   1644c:	and	r2, r2, #262144	; 0x40000
   16450:	orr	r2, r2, ip
   16454:	orr	r2, r2, #540672	; 0x84000
   16458:	orr	r2, r2, #2304	; 0x900
   1645c:	bl	19578 <fts_children@@Base+0x1e54>
   16460:	subs	r3, r0, #0
   16464:	str	r3, [sp, #44]	; 0x2c
   16468:	movlt	r3, #0
   1646c:	strlt	r3, [r9, #12]
   16470:	blt	16980 <__assert_fail@plt+0x52b4>
   16474:	bl	11618 <fdopendir@plt>
   16478:	subs	r4, r0, #0
   1647c:	beq	16964 <__assert_fail@plt+0x5298>
   16480:	ldrh	r3, [r9, #60]	; 0x3c
   16484:	str	r4, [r9, #12]
   16488:	cmp	r3, #11
   1648c:	beq	168e4 <__assert_fail@plt+0x5218>
   16490:	ldr	r0, [r5, #48]	; 0x30
   16494:	tst	r0, #256	; 0x100
   16498:	bne	16858 <__assert_fail@plt+0x518c>
   1649c:	ldr	r2, [r5, #44]	; 0x2c
   164a0:	ldr	r3, [pc, #1480]	; 16a70 <__assert_fail@plt+0x53a4>
   164a4:	cmp	r2, #0
   164a8:	mvnne	r3, #0
   164ac:	str	r3, [sp, #20]
   164b0:	ldr	r3, [sp, #36]	; 0x24
   164b4:	cmp	r3, #2
   164b8:	beq	16848 <__assert_fail@plt+0x517c>
   164bc:	ldr	r3, [r5, #48]	; 0x30
   164c0:	and	r3, r3, #56	; 0x38
   164c4:	cmp	r3, #24
   164c8:	beq	166bc <__assert_fail@plt+0x4ff0>
   164cc:	ldr	r3, [sp, #36]	; 0x24
   164d0:	mov	r6, #1
   164d4:	sub	r7, r3, #3
   164d8:	clz	r7, r7
   164dc:	lsr	r7, r7, #5
   164e0:	ldr	r3, [r5, #48]	; 0x30
   164e4:	tst	r3, #512	; 0x200
   164e8:	bne	16900 <__assert_fail@plt+0x5234>
   164ec:	mov	r3, #0
   164f0:	ldr	r2, [sp, #44]	; 0x2c
   164f4:	mov	r1, r9
   164f8:	mov	r0, r5
   164fc:	bl	15d6c <__assert_fail@plt+0x46a0>
   16500:	cmp	r0, #0
   16504:	beq	166fc <__assert_fail@plt+0x5030>
   16508:	ldrh	r4, [r9, #62]	; 0x3e
   1650c:	tst	r7, r6
   16510:	ldr	r6, [r9, #12]
   16514:	orr	r4, r4, #1
   16518:	beq	16528 <__assert_fail@plt+0x4e5c>
   1651c:	bl	1154c <__errno_location@plt>
   16520:	ldr	r3, [r0]
   16524:	str	r3, [r9, #32]
   16528:	strh	r4, [r9, #62]	; 0x3e
   1652c:	mov	r0, r6
   16530:	bl	116b4 <closedir@plt>
   16534:	ldr	r3, [sp, #44]	; 0x2c
   16538:	ldr	r0, [r5, #48]	; 0x30
   1653c:	mvn	r2, r3
   16540:	mov	r3, #0
   16544:	lsr	r2, r2, #31
   16548:	ands	r2, r2, r0, lsr #9
   1654c:	str	r3, [r9, #12]
   16550:	bne	169e4 <__assert_fail@plt+0x5318>
   16554:	mov	r3, #0
   16558:	str	r3, [r9, #12]
   1655c:	str	r3, [sp, #52]	; 0x34
   16560:	b	16154 <__assert_fail@plt+0x4a88>
   16564:	ldr	r1, [sp, #44]	; 0x2c
   16568:	ldr	r0, [sp, #12]
   1656c:	bl	15808 <__assert_fail@plt+0x413c>
   16570:	ldr	r3, [pc, #1276]	; 16a74 <__assert_fail@plt+0x53a8>
   16574:	cmp	r0, r3
   16578:	beq	1659c <__assert_fail@plt+0x4ed0>
   1657c:	ldr	r3, [pc, #1268]	; 16a78 <__assert_fail@plt+0x53ac>
   16580:	cmp	r0, r3
   16584:	beq	1659c <__assert_fail@plt+0x4ed0>
   16588:	ldr	r3, [pc, #1260]	; 16a7c <__assert_fail@plt+0x53b0>
   1658c:	cmp	r0, r3
   16590:	movne	r3, #1
   16594:	strne	r3, [sp, #40]	; 0x28
   16598:	bne	16330 <__assert_fail@plt+0x4c64>
   1659c:	ldr	r3, [sp, #20]
   165a0:	add	r7, r7, #1
   165a4:	cmp	r7, r3
   165a8:	str	r6, [sp, #40]	; 0x28
   165ac:	bcc	1621c <__assert_fail@plt+0x4b50>
   165b0:	ldr	r3, [sp, #28]
   165b4:	ldr	r9, [sp, #12]
   165b8:	cmp	r3, #0
   165bc:	beq	1671c <__assert_fail@plt+0x5050>
   165c0:	ldr	r3, [r5, #4]
   165c4:	ldr	r1, [r5, #24]
   165c8:	cmp	r3, #0
   165cc:	beq	165fc <__assert_fail@plt+0x4f30>
   165d0:	ldr	r2, [r3, #24]
   165d4:	add	r0, r3, #176	; 0xb0
   165d8:	cmp	r2, r0
   165dc:	ldrne	r0, [r3, #28]
   165e0:	str	r1, [r3, #28]
   165e4:	subne	r2, r2, r0
   165e8:	addne	r2, r1, r2
   165ec:	strne	r2, [r3, #24]
   165f0:	ldr	r3, [r3, #8]
   165f4:	cmp	r3, #0
   165f8:	bne	165d0 <__assert_fail@plt+0x4f04>
   165fc:	ldr	r3, [sp, #8]
   16600:	b	16630 <__assert_fail@plt+0x4f64>
   16604:	ldr	r2, [r3, #24]
   16608:	cmp	r2, r0
   1660c:	ldrne	r0, [r3, #28]
   16610:	str	r1, [r3, #28]
   16614:	subne	r2, r2, r0
   16618:	addne	r2, r1, r2
   1661c:	strne	r2, [r3, #24]
   16620:	ldr	r2, [r3, #8]
   16624:	cmp	r2, #0
   16628:	ldreq	r2, [r3, #4]
   1662c:	mov	r3, r2
   16630:	ldr	r2, [r3, #48]	; 0x30
   16634:	add	r0, r3, #176	; 0xb0
   16638:	cmp	r2, #0
   1663c:	bge	16604 <__assert_fail@plt+0x4f38>
   16640:	b	1671c <__assert_fail@plt+0x5050>
   16644:	ldr	r2, [pc, #1052]	; 16a68 <__assert_fail@plt+0x539c>
   16648:	ldr	r1, [r2, r3, lsl #2]
   1664c:	mov	r2, #1
   16650:	mov	r3, #0
   16654:	str	r1, [r4, #88]	; 0x58
   16658:	b	161e4 <__assert_fail@plt+0x4b18>
   1665c:	ldr	r9, [sp, #12]
   16660:	mov	r0, r4
   16664:	ldr	r4, [r8]
   16668:	bl	11360 <free@plt>
   1666c:	ldr	r0, [sp, #8]
   16670:	bl	157a4 <__assert_fail@plt+0x40d8>
   16674:	ldr	r0, [r9, #12]
   16678:	bl	116b4 <closedir@plt>
   1667c:	ldr	r3, [r5, #48]	; 0x30
   16680:	mov	r2, #0
   16684:	orr	r3, r3, #16384	; 0x4000
   16688:	mov	r1, #7
   1668c:	str	r2, [r9, #12]
   16690:	strh	r1, [r9, #60]	; 0x3c
   16694:	str	r2, [sp, #8]
   16698:	str	r3, [r5, #48]	; 0x30
   1669c:	str	r4, [r8]
   166a0:	ldr	r0, [sp, #8]
   166a4:	add	sp, sp, #60	; 0x3c
   166a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ac:	ldr	ip, [r9, #48]	; 0x30
   166b0:	cmp	ip, #0
   166b4:	movne	ip, #32768	; 0x8000
   166b8:	b	16448 <__assert_fail@plt+0x4d7c>
   166bc:	ldr	r3, [r9, #92]	; 0x5c
   166c0:	cmp	r3, #2
   166c4:	bne	164cc <__assert_fail@plt+0x4e00>
   166c8:	ldr	r1, [sp, #44]	; 0x2c
   166cc:	mov	r0, r9
   166d0:	bl	1593c <__assert_fail@plt+0x4270>
   166d4:	cmp	r0, #0
   166d8:	beq	164cc <__assert_fail@plt+0x4e00>
   166dc:	ldr	r3, [sp, #36]	; 0x24
   166e0:	cmp	r3, #3
   166e4:	bne	16848 <__assert_fail@plt+0x517c>
   166e8:	mov	r6, #0
   166ec:	mov	r7, #1
   166f0:	b	164e0 <__assert_fail@plt+0x4e14>
   166f4:	ldr	r3, [pc, #884]	; 16a70 <__assert_fail@plt+0x53a4>
   166f8:	str	r3, [sp, #20]
   166fc:	mov	r3, #1
   16700:	str	r3, [sp, #52]	; 0x34
   16704:	ldr	r0, [r5, #48]	; 0x30
   16708:	b	16154 <__assert_fail@plt+0x4a88>
   1670c:	mov	r9, r3
   16710:	ldr	r3, [sp, #28]
   16714:	cmp	r3, #0
   16718:	bne	165c0 <__assert_fail@plt+0x4ef4>
   1671c:	ldr	r3, [r5, #48]	; 0x30
   16720:	tst	r3, #4
   16724:	beq	16750 <__assert_fail@plt+0x5084>
   16728:	ldr	r3, [r5, #36]	; 0x24
   1672c:	ldr	r2, [sp, #4]
   16730:	cmp	r7, #0
   16734:	cmpne	r3, r2
   16738:	ldreq	r3, [sp, #24]
   1673c:	subeq	r3, r3, #1
   16740:	streq	r3, [sp, #24]
   16744:	ldr	r2, [sp, #24]
   16748:	mov	r3, #0
   1674c:	strb	r3, [r2]
   16750:	ldrd	r2, [sp, #48]	; 0x30
   16754:	cmp	r2, #0
   16758:	movne	r3, #0
   1675c:	cmp	r3, #0
   16760:	beq	16798 <__assert_fail@plt+0x50cc>
   16764:	ldr	r3, [sp, #36]	; 0x24
   16768:	cmp	r7, #0
   1676c:	cmpne	r3, #1
   16770:	bne	167a0 <__assert_fail@plt+0x50d4>
   16774:	ldr	r3, [r9, #48]	; 0x30
   16778:	cmp	r3, #0
   1677c:	bne	16944 <__assert_fail@plt+0x5278>
   16780:	mov	r0, r5
   16784:	bl	15a58 <__assert_fail@plt+0x438c>
   16788:	adds	r0, r0, #0
   1678c:	movne	r0, #1
   16790:	cmp	r0, #0
   16794:	bne	169f4 <__assert_fail@plt+0x5328>
   16798:	cmp	r7, #0
   1679c:	beq	168a8 <__assert_fail@plt+0x51dc>
   167a0:	ldr	r3, [sp, #40]	; 0x28
   167a4:	cmp	r3, #0
   167a8:	bne	16818 <__assert_fail@plt+0x514c>
   167ac:	ldr	r3, [r5, #44]	; 0x2c
   167b0:	cmp	r3, #0
   167b4:	cmpne	r7, #1
   167b8:	beq	166a0 <__assert_fail@plt+0x4fd4>
   167bc:	mov	r2, r7
   167c0:	ldr	r1, [sp, #8]
   167c4:	mov	r0, r5
   167c8:	add	sp, sp, #60	; 0x3c
   167cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167d0:	b	15658 <__assert_fail@plt+0x3f8c>
   167d4:	ldr	r3, [r8]
   167d8:	ldr	r9, [sp, #12]
   167dc:	cmp	r3, #0
   167e0:	beq	167fc <__assert_fail@plt+0x5130>
   167e4:	ldr	r2, [sp, #48]	; 0x30
   167e8:	str	r3, [r9, #32]
   167ec:	orrs	r2, r2, r7
   167f0:	moveq	r2, #4
   167f4:	movne	r2, #7
   167f8:	strh	r2, [r9, #60]	; 0x3c
   167fc:	ldr	r0, [r9, #12]
   16800:	cmp	r0, #0
   16804:	beq	16710 <__assert_fail@plt+0x5044>
   16808:	bl	116b4 <closedir@plt>
   1680c:	mov	r3, #0
   16810:	str	r3, [r9, #12]
   16814:	b	16710 <__assert_fail@plt+0x5044>
   16818:	ldr	r3, [pc, #608]	; 16a80 <__assert_fail@plt+0x53b4>
   1681c:	mov	r2, r7
   16820:	str	r3, [r5, #44]	; 0x2c
   16824:	ldr	r1, [sp, #8]
   16828:	mov	r0, r5
   1682c:	bl	15658 <__assert_fail@plt+0x3f8c>
   16830:	mov	r3, #0
   16834:	str	r3, [r5, #44]	; 0x2c
   16838:	str	r0, [sp, #8]
   1683c:	ldr	r0, [sp, #8]
   16840:	add	sp, sp, #60	; 0x3c
   16844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16848:	mov	r3, #0
   1684c:	str	r3, [sp, #52]	; 0x34
   16850:	ldr	r0, [r5, #48]	; 0x30
   16854:	b	16154 <__assert_fail@plt+0x4a88>
   16858:	add	r4, r5, #56	; 0x38
   1685c:	mov	r1, r4
   16860:	mov	r2, r9
   16864:	bl	16028 <__assert_fail@plt+0x495c>
   16868:	mov	r3, #0
   1686c:	mov	r2, r9
   16870:	add	r1, r5, #48	; 0x30
   16874:	ldr	r0, [r5, #32]
   16878:	bl	15aa8 <__assert_fail@plt+0x43dc>
   1687c:	mov	r1, r4
   16880:	mov	r2, r9
   16884:	ldr	r0, [r5, #48]	; 0x30
   16888:	bl	15f78 <__assert_fail@plt+0x48ac>
   1688c:	subs	r4, r0, #0
   16890:	bne	1649c <__assert_fail@plt+0x4dd0>
   16894:	bl	1154c <__errno_location@plt>
   16898:	mov	r3, #12
   1689c:	str	r4, [sp, #8]
   168a0:	str	r3, [r0]
   168a4:	b	166a0 <__assert_fail@plt+0x4fd4>
   168a8:	ldr	r3, [sp, #36]	; 0x24
   168ac:	cmp	r3, #3
   168b0:	bne	168c8 <__assert_fail@plt+0x51fc>
   168b4:	ldrh	r3, [r9, #60]	; 0x3c
   168b8:	cmp	r3, #4
   168bc:	cmpne	r3, #7
   168c0:	movne	r3, #6
   168c4:	strhne	r3, [r9, #60]	; 0x3c
   168c8:	ldr	r0, [sp, #8]
   168cc:	bl	157a4 <__assert_fail@plt+0x40d8>
   168d0:	mov	r3, #0
   168d4:	str	r3, [sp, #8]
   168d8:	ldr	r0, [sp, #8]
   168dc:	add	sp, sp, #60	; 0x3c
   168e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e4:	mov	r3, #0
   168e8:	mov	r2, r9
   168ec:	add	r1, r5, #48	; 0x30
   168f0:	ldr	r0, [r5, #32]
   168f4:	bl	15aa8 <__assert_fail@plt+0x43dc>
   168f8:	strh	r0, [r9, #60]	; 0x3c
   168fc:	b	1649c <__assert_fail@plt+0x4dd0>
   16900:	ldr	r0, [sp, #44]	; 0x2c
   16904:	mov	r2, #3
   16908:	ldr	r1, [pc, #372]	; 16a84 <__assert_fail@plt+0x53b8>
   1690c:	bl	19a44 <fts_children@@Base+0x2320>
   16910:	subs	r3, r0, #0
   16914:	str	r3, [sp, #44]	; 0x2c
   16918:	bge	164ec <__assert_fail@plt+0x4e20>
   1691c:	ldrh	r4, [r9, #62]	; 0x3e
   16920:	tst	r7, r6
   16924:	ldr	r6, [r9, #12]
   16928:	orr	r4, r4, #1
   1692c:	bne	1651c <__assert_fail@plt+0x4e50>
   16930:	strh	r4, [r9, #62]	; 0x3e
   16934:	mov	r0, r6
   16938:	bl	116b4 <closedir@plt>
   1693c:	ldr	r0, [r5, #48]	; 0x30
   16940:	b	16554 <__assert_fail@plt+0x4e88>
   16944:	ldr	r3, [pc, #316]	; 16a88 <__assert_fail@plt+0x53bc>
   16948:	mvn	r2, #0
   1694c:	ldr	r1, [r9, #4]
   16950:	mov	r0, r5
   16954:	bl	15d6c <__assert_fail@plt+0x46a0>
   16958:	adds	r0, r0, #0
   1695c:	movne	r0, #1
   16960:	b	16790 <__assert_fail@plt+0x50c4>
   16964:	bl	1154c <__errno_location@plt>
   16968:	mov	r5, r0
   1696c:	ldr	r0, [sp, #44]	; 0x2c
   16970:	ldr	r6, [r5]
   16974:	bl	1169c <close@plt>
   16978:	str	r6, [r5]
   1697c:	str	r4, [r9, #12]
   16980:	ldr	r3, [sp, #36]	; 0x24
   16984:	cmp	r3, #3
   16988:	bne	168d0 <__assert_fail@plt+0x5204>
   1698c:	mov	r3, #4
   16990:	strh	r3, [r9, #60]	; 0x3c
   16994:	bl	1154c <__errno_location@plt>
   16998:	mov	r3, #0
   1699c:	str	r3, [sp, #8]
   169a0:	ldr	r3, [r0]
   169a4:	str	r3, [r9, #32]
   169a8:	b	166a0 <__assert_fail@plt+0x4fd4>
   169ac:	ldr	r0, [r9, #12]
   169b0:	bl	116b4 <closedir@plt>
   169b4:	ldr	r3, [sp, #36]	; 0x24
   169b8:	mov	r4, #0
   169bc:	cmp	r3, #3
   169c0:	str	r4, [r9, #12]
   169c4:	bne	168d0 <__assert_fail@plt+0x5204>
   169c8:	mov	r3, #4
   169cc:	strh	r3, [r9, #60]	; 0x3c
   169d0:	bl	1154c <__errno_location@plt>
   169d4:	str	r4, [sp, #8]
   169d8:	ldr	r3, [r0]
   169dc:	str	r3, [r9, #32]
   169e0:	b	166a0 <__assert_fail@plt+0x4fd4>
   169e4:	ldr	r0, [sp, #44]	; 0x2c
   169e8:	bl	1169c <close@plt>
   169ec:	ldr	r0, [r5, #48]	; 0x30
   169f0:	b	16554 <__assert_fail@plt+0x4e88>
   169f4:	ldr	r3, [r5, #48]	; 0x30
   169f8:	mov	r2, #7
   169fc:	orr	r3, r3, #16384	; 0x4000
   16a00:	strh	r2, [r9, #60]	; 0x3c
   16a04:	ldr	r0, [sp, #8]
   16a08:	str	r3, [r5, #48]	; 0x30
   16a0c:	bl	157a4 <__assert_fail@plt+0x40d8>
   16a10:	mov	r3, #0
   16a14:	str	r3, [sp, #8]
   16a18:	b	166a0 <__assert_fail@plt+0x4fd4>
   16a1c:	ldr	r9, [sp, #12]
   16a20:	mov	r0, r4
   16a24:	bl	11360 <free@plt>
   16a28:	ldr	r0, [sp, #8]
   16a2c:	bl	157a4 <__assert_fail@plt+0x40d8>
   16a30:	ldr	r0, [r9, #12]
   16a34:	bl	116b4 <closedir@plt>
   16a38:	ldr	r3, [r5, #48]	; 0x30
   16a3c:	mov	r2, #0
   16a40:	orr	r3, r3, #16384	; 0x4000
   16a44:	mov	r0, #7
   16a48:	mov	r1, #36	; 0x24
   16a4c:	str	r2, [r9, #12]
   16a50:	strh	r0, [r9, #60]	; 0x3c
   16a54:	str	r2, [sp, #8]
   16a58:	str	r3, [r5, #48]	; 0x30
   16a5c:	str	r1, [r8]
   16a60:	b	166a0 <__assert_fail@plt+0x4fd4>
   16a64:	andeq	r2, r0, r0, lsl r7
   16a68:	muleq	r1, r4, r4
   16a6c:	andeq	r2, r0, r1, lsl r7
   16a70:	andeq	r8, r1, r0, lsr #13
   16a74:	andeq	r6, r0, r9, ror #18
   16a78:			; <UNDEFINED> instruction: 0x01021994
   16a7c:			; <UNDEFINED> instruction: 0xff534d42
   16a80:	andeq	r5, r1, r8, lsr #12
   16a84:	andeq	r0, r0, r6, lsl #8
   16a88:	andeq	fp, r1, r4, asr #9

00016a8c <fts_open@@Base>:
   16a8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a90:	bic	r5, r1, #8128	; 0x1fc0
   16a94:	bic	r5, r5, #63	; 0x3f
   16a98:	cmp	r5, #0
   16a9c:	sub	sp, sp, #20
   16aa0:	bne	16dc8 <fts_open@@Base+0x33c>
   16aa4:	and	r3, r1, #516	; 0x204
   16aa8:	cmp	r3, #516	; 0x204
   16aac:	mov	r7, r1
   16ab0:	beq	16d5c <fts_open@@Base+0x2d0>
   16ab4:	ands	r5, r1, #18
   16ab8:	beq	16d5c <fts_open@@Base+0x2d0>
   16abc:	mov	r6, r0
   16ac0:	mov	r1, #1
   16ac4:	mov	r0, #96	; 0x60
   16ac8:	mov	r9, r2
   16acc:	bl	1130c <calloc@plt>
   16ad0:	subs	r5, r0, #0
   16ad4:	beq	16d20 <fts_open@@Base+0x294>
   16ad8:	tst	r7, #2
   16adc:	bicne	r3, r7, #512	; 0x200
   16ae0:	orrne	r3, r3, #4
   16ae4:	strne	r3, [r5, #48]	; 0x30
   16ae8:	ldr	r3, [r6]
   16aec:	streq	r7, [r5, #48]	; 0x30
   16af0:	mvn	r2, #99	; 0x63
   16af4:	cmp	r3, #0
   16af8:	str	r9, [r5, #44]	; 0x2c
   16afc:	str	r2, [r5, #32]
   16b00:	beq	16de4 <fts_open@@Base+0x358>
   16b04:	mov	r8, r6
   16b08:	mov	r4, #0
   16b0c:	mov	r0, r3
   16b10:	bl	11528 <strlen@plt>
   16b14:	ldr	r3, [r8, #4]!
   16b18:	cmp	r4, r0
   16b1c:	movcc	r4, r0
   16b20:	cmp	r3, #0
   16b24:	bne	16b0c <fts_open@@Base+0x80>
   16b28:	add	r2, r4, #1
   16b2c:	cmp	r2, #4096	; 0x1000
   16b30:	movcc	r2, #4096	; 0x1000
   16b34:	add	r1, r5, #36	; 0x24
   16b38:	add	r0, r5, #24
   16b3c:	bl	15c34 <__assert_fail@plt+0x4568>
   16b40:	subs	fp, r0, #0
   16b44:	beq	16d44 <fts_open@@Base+0x2b8>
   16b48:	ldr	sl, [r6]
   16b4c:	cmp	sl, #0
   16b50:	beq	16d74 <fts_open@@Base+0x2e8>
   16b54:	mov	r2, #0
   16b58:	ldr	r1, [pc, #704]	; 16e20 <fts_open@@Base+0x394>
   16b5c:	mov	r0, r5
   16b60:	bl	15730 <__assert_fail@plt+0x4064>
   16b64:	subs	sl, r0, #0
   16b68:	beq	16d3c <fts_open@@Base+0x2b0>
   16b6c:	mvn	r3, #0
   16b70:	cmp	r9, #0
   16b74:	str	r3, [sl, #48]	; 0x30
   16b78:	str	r3, [sl, #56]	; 0x38
   16b7c:	ldr	r4, [r6]
   16b80:	beq	16b90 <fts_open@@Base+0x104>
   16b84:	ldr	fp, [r5, #48]	; 0x30
   16b88:	lsr	fp, fp, #10
   16b8c:	and	fp, fp, #1
   16b90:	cmp	r4, #0
   16b94:	beq	16e18 <fts_open@@Base+0x38c>
   16b98:	lsr	r7, r7, #12
   16b9c:	mov	r3, #0
   16ba0:	eor	r7, r7, #1
   16ba4:	and	r2, r7, #1
   16ba8:	str	r3, [sp, #8]
   16bac:	mov	r8, r3
   16bb0:	mov	r7, r3
   16bb4:	add	r3, r5, #48	; 0x30
   16bb8:	str	r2, [sp, #4]
   16bbc:	str	r3, [sp, #12]
   16bc0:	b	16bf8 <fts_open@@Base+0x16c>
   16bc4:	cmp	r9, r1
   16bc8:	mov	r0, #2
   16bcc:	mov	r1, #0
   16bd0:	mov	r3, #11
   16bd4:	strd	r0, [r4, #120]	; 0x78
   16bd8:	strh	r3, [r4, #60]	; 0x3c
   16bdc:	beq	16db4 <fts_open@@Base+0x328>
   16be0:	str	r7, [r4, #8]
   16be4:	mov	r7, r4
   16be8:	ldr	r4, [r6, #4]!
   16bec:	add	r8, r8, #1
   16bf0:	cmp	r4, #0
   16bf4:	beq	16ca4 <fts_open@@Base+0x218>
   16bf8:	mov	r0, r4
   16bfc:	bl	11528 <strlen@plt>
   16c00:	ldr	r3, [sp, #4]
   16c04:	cmp	r0, #2
   16c08:	movls	r3, #0
   16c0c:	andhi	r3, r3, #1
   16c10:	cmp	r3, #0
   16c14:	mov	r2, r0
   16c18:	bne	16d84 <fts_open@@Base+0x2f8>
   16c1c:	mov	r1, r4
   16c20:	mov	r0, r5
   16c24:	bl	15730 <__assert_fail@plt+0x4064>
   16c28:	subs	r4, r0, #0
   16c2c:	beq	16d2c <fts_open@@Base+0x2a0>
   16c30:	cmp	r7, #0
   16c34:	moveq	r3, #0
   16c38:	andne	r3, fp, #1
   16c3c:	add	r2, r4, #176	; 0xb0
   16c40:	mov	r1, #0
   16c44:	cmp	r3, #0
   16c48:	str	r1, [r4, #48]	; 0x30
   16c4c:	str	sl, [r4, #4]
   16c50:	str	r2, [r4, #24]
   16c54:	bne	16bc4 <fts_open@@Base+0x138>
   16c58:	mov	r2, r4
   16c5c:	ldr	r1, [sp, #12]
   16c60:	ldr	r0, [r5, #32]
   16c64:	bl	15aa8 <__assert_fail@plt+0x43dc>
   16c68:	cmp	r9, #0
   16c6c:	strh	r0, [r4, #60]	; 0x3c
   16c70:	bne	16be0 <fts_open@@Base+0x154>
   16c74:	cmp	r7, #0
   16c78:	str	r9, [r4, #8]
   16c7c:	streq	r4, [sp, #8]
   16c80:	moveq	r7, r4
   16c84:	beq	16be8 <fts_open@@Base+0x15c>
   16c88:	ldr	r3, [sp, #8]
   16c8c:	str	r4, [sp, #8]
   16c90:	str	r4, [r3, #8]
   16c94:	ldr	r4, [r6, #4]!
   16c98:	add	r8, r8, #1
   16c9c:	cmp	r4, #0
   16ca0:	bne	16bf8 <fts_open@@Base+0x16c>
   16ca4:	cmp	r9, #0
   16ca8:	cmpne	r8, #1
   16cac:	bls	16cc4 <fts_open@@Base+0x238>
   16cb0:	mov	r1, r7
   16cb4:	mov	r2, r8
   16cb8:	mov	r0, r5
   16cbc:	bl	15658 <__assert_fail@plt+0x3f8c>
   16cc0:	mov	r7, r0
   16cc4:	mov	r2, #0
   16cc8:	ldr	r1, [pc, #336]	; 16e20 <fts_open@@Base+0x394>
   16ccc:	mov	r0, r5
   16cd0:	bl	15730 <__assert_fail@plt+0x4064>
   16cd4:	cmp	r0, #0
   16cd8:	str	r0, [r5]
   16cdc:	beq	16d2c <fts_open@@Base+0x2a0>
   16ce0:	mov	r2, #1
   16ce4:	mov	r3, #9
   16ce8:	str	r7, [r0, #8]
   16cec:	str	r2, [r0, #48]	; 0x30
   16cf0:	strh	r3, [r0, #60]	; 0x3c
   16cf4:	add	r1, r5, #56	; 0x38
   16cf8:	ldr	r0, [r5, #48]	; 0x30
   16cfc:	bl	15cb0 <__assert_fail@plt+0x45e4>
   16d00:	cmp	r0, #0
   16d04:	beq	16d2c <fts_open@@Base+0x2a0>
   16d08:	ldr	r1, [r5, #48]	; 0x30
   16d0c:	tst	r1, #516	; 0x204
   16d10:	beq	16dec <fts_open@@Base+0x360>
   16d14:	mvn	r1, #0
   16d18:	add	r0, r5, #60	; 0x3c
   16d1c:	bl	1940c <fts_children@@Base+0x1ce8>
   16d20:	mov	r0, r5
   16d24:	add	sp, sp, #20
   16d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d2c:	mov	r0, r7
   16d30:	bl	157a4 <__assert_fail@plt+0x40d8>
   16d34:	mov	r0, sl
   16d38:	bl	11360 <free@plt>
   16d3c:	ldr	r0, [r5, #24]
   16d40:	bl	11360 <free@plt>
   16d44:	mov	r0, r5
   16d48:	bl	11360 <free@plt>
   16d4c:	mov	r5, #0
   16d50:	mov	r0, r5
   16d54:	add	sp, sp, #20
   16d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d5c:	bl	1154c <__errno_location@plt>
   16d60:	mov	r3, #22
   16d64:	str	r3, [r0]
   16d68:	mov	r0, r5
   16d6c:	add	sp, sp, #20
   16d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d74:	cmp	r9, #0
   16d78:	beq	16e10 <fts_open@@Base+0x384>
   16d7c:	mov	r4, sl
   16d80:	b	16b84 <fts_open@@Base+0xf8>
   16d84:	sub	r1, r0, #1
   16d88:	add	r3, r4, r1
   16d8c:	ldrb	r1, [r4, r1]
   16d90:	cmp	r1, #47	; 0x2f
   16d94:	bne	16c1c <fts_open@@Base+0x190>
   16d98:	ldrb	r1, [r3, #-1]!
   16d9c:	cmp	r1, #47	; 0x2f
   16da0:	bne	16c1c <fts_open@@Base+0x190>
   16da4:	sub	r2, r2, #1
   16da8:	cmp	r2, #1
   16dac:	bne	16d98 <fts_open@@Base+0x30c>
   16db0:	b	16c1c <fts_open@@Base+0x190>
   16db4:	ldr	r3, [sp, #8]
   16db8:	str	r9, [r4, #8]
   16dbc:	str	r4, [sp, #8]
   16dc0:	str	r4, [r3, #8]
   16dc4:	b	16c94 <fts_open@@Base+0x208>
   16dc8:	bl	1154c <__errno_location@plt>
   16dcc:	mov	r5, #0
   16dd0:	mov	r3, #22
   16dd4:	str	r3, [r0]
   16dd8:	mov	r0, r5
   16ddc:	add	sp, sp, #20
   16de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16de4:	mov	r2, #4096	; 0x1000
   16de8:	b	16b34 <fts_open@@Base+0xa8>
   16dec:	ldr	r2, [pc, #48]	; 16e24 <fts_open@@Base+0x398>
   16df0:	ldr	r0, [r5, #32]
   16df4:	bl	15d30 <__assert_fail@plt+0x4664>
   16df8:	cmp	r0, #0
   16dfc:	str	r0, [r5, #28]
   16e00:	ldrlt	r3, [r5, #48]	; 0x30
   16e04:	orrlt	r3, r3, #4
   16e08:	strlt	r3, [r5, #48]	; 0x30
   16e0c:	b	16d14 <fts_open@@Base+0x288>
   16e10:	mov	r7, sl
   16e14:	b	16cc4 <fts_open@@Base+0x238>
   16e18:	mov	r7, r4
   16e1c:	b	16cc4 <fts_open@@Base+0x238>
   16e20:	andeq	sl, r1, ip, ror #19
   16e24:	andeq	fp, r1, r8, asr #9

00016e28 <fts_close@@Base>:
   16e28:	ldr	r3, [r0]
   16e2c:	push	{r4, r5, r6, lr}
   16e30:	cmp	r3, #0
   16e34:	mov	r5, r0
   16e38:	beq	16e74 <fts_close@@Base+0x4c>
   16e3c:	ldr	r2, [r3, #48]	; 0x30
   16e40:	cmp	r2, #0
   16e44:	blt	16f8c <fts_close@@Base+0x164>
   16e48:	ldr	r4, [r3, #8]
   16e4c:	mov	r0, r3
   16e50:	cmp	r4, #0
   16e54:	ldreq	r4, [r3, #4]
   16e58:	bl	11360 <free@plt>
   16e5c:	mov	r3, r4
   16e60:	ldr	r2, [r4, #48]	; 0x30
   16e64:	cmp	r2, #0
   16e68:	bge	16e48 <fts_close@@Base+0x20>
   16e6c:	mov	r0, r4
   16e70:	bl	11360 <free@plt>
   16e74:	ldr	r0, [r5, #4]
   16e78:	cmp	r0, #0
   16e7c:	beq	16e84 <fts_close@@Base+0x5c>
   16e80:	bl	157a4 <__assert_fail@plt+0x40d8>
   16e84:	ldr	r0, [r5, #8]
   16e88:	bl	11360 <free@plt>
   16e8c:	ldr	r0, [r5, #24]
   16e90:	bl	11360 <free@plt>
   16e94:	ldr	r3, [r5, #48]	; 0x30
   16e98:	tst	r3, #512	; 0x200
   16e9c:	bne	16f00 <fts_close@@Base+0xd8>
   16ea0:	tst	r3, #4
   16ea4:	beq	16f2c <fts_close@@Base+0x104>
   16ea8:	mov	r4, #0
   16eac:	add	r0, r5, #60	; 0x3c
   16eb0:	bl	157d8 <__assert_fail@plt+0x410c>
   16eb4:	ldr	r0, [r5, #52]	; 0x34
   16eb8:	cmp	r0, #0
   16ebc:	beq	16ec4 <fts_close@@Base+0x9c>
   16ec0:	bl	18e60 <fts_children@@Base+0x173c>
   16ec4:	ldr	r2, [r5, #48]	; 0x30
   16ec8:	ldr	r3, [pc, #212]	; 16fa4 <fts_close@@Base+0x17c>
   16ecc:	ldr	r0, [r5, #56]	; 0x38
   16ed0:	and	r3, r3, r2
   16ed4:	cmp	r3, #0
   16ed8:	beq	16f24 <fts_close@@Base+0xfc>
   16edc:	cmp	r0, #0
   16ee0:	beq	16ee8 <fts_close@@Base+0xc0>
   16ee4:	bl	18e60 <fts_children@@Base+0x173c>
   16ee8:	mov	r0, r5
   16eec:	bl	11360 <free@plt>
   16ef0:	cmp	r4, #0
   16ef4:	bne	16f94 <fts_close@@Base+0x16c>
   16ef8:	mov	r0, r4
   16efc:	pop	{r4, r5, r6, pc}
   16f00:	ldr	r0, [r5, #32]
   16f04:	cmp	r0, #0
   16f08:	blt	16ea8 <fts_close@@Base+0x80>
   16f0c:	bl	1169c <close@plt>
   16f10:	cmp	r0, #0
   16f14:	beq	16ea8 <fts_close@@Base+0x80>
   16f18:	bl	1154c <__errno_location@plt>
   16f1c:	ldr	r4, [r0]
   16f20:	b	16eac <fts_close@@Base+0x84>
   16f24:	bl	11360 <free@plt>
   16f28:	b	16ee8 <fts_close@@Base+0xc0>
   16f2c:	ldr	r0, [r5, #28]
   16f30:	bl	11630 <fchdir@plt>
   16f34:	cmp	r0, #0
   16f38:	bne	16f5c <fts_close@@Base+0x134>
   16f3c:	ldr	r0, [r5, #28]
   16f40:	bl	1169c <close@plt>
   16f44:	cmp	r0, #0
   16f48:	beq	16ea8 <fts_close@@Base+0x80>
   16f4c:	bl	1154c <__errno_location@plt>
   16f50:	mov	r6, r0
   16f54:	ldr	r4, [r6]
   16f58:	b	16eac <fts_close@@Base+0x84>
   16f5c:	bl	1154c <__errno_location@plt>
   16f60:	mov	r6, r0
   16f64:	ldr	r0, [r5, #28]
   16f68:	ldr	r4, [r6]
   16f6c:	bl	1169c <close@plt>
   16f70:	clz	r3, r4
   16f74:	lsr	r3, r3, #5
   16f78:	cmp	r0, #0
   16f7c:	moveq	r3, #0
   16f80:	cmp	r3, #0
   16f84:	beq	16eac <fts_close@@Base+0x84>
   16f88:	b	16f54 <fts_close@@Base+0x12c>
   16f8c:	mov	r4, r3
   16f90:	b	16e6c <fts_close@@Base+0x44>
   16f94:	bl	1154c <__errno_location@plt>
   16f98:	str	r4, [r0]
   16f9c:	mvn	r4, #0
   16fa0:	b	16ef8 <fts_close@@Base+0xd0>
   16fa4:	andeq	r0, r0, r2, lsl #2

00016fa8 <fts_read@@Base>:
   16fa8:	push	{r4, r5, r6, r7, r8, lr}
   16fac:	ldr	r4, [r0]
   16fb0:	cmp	r4, #0
   16fb4:	beq	170d4 <fts_read@@Base+0x12c>
   16fb8:	ldr	r1, [r0, #48]	; 0x30
   16fbc:	ands	r3, r1, #16384	; 0x4000
   16fc0:	bne	170d4 <fts_read@@Base+0x12c>
   16fc4:	ldrh	r2, [r4, #64]	; 0x40
   16fc8:	mov	r8, r0
   16fcc:	mov	r0, #3
   16fd0:	cmp	r2, #1
   16fd4:	strh	r0, [r4, #64]	; 0x40
   16fd8:	beq	17390 <fts_read@@Base+0x3e8>
   16fdc:	cmp	r2, #2
   16fe0:	ldrh	r3, [r4, #60]	; 0x3c
   16fe4:	beq	170e0 <fts_read@@Base+0x138>
   16fe8:	cmp	r3, #1
   16fec:	bne	1701c <fts_read@@Base+0x74>
   16ff0:	b	1718c <fts_read@@Base+0x1e4>
   16ff4:	mov	r0, r4
   16ff8:	str	r5, [r8]
   16ffc:	bl	11360 <free@plt>
   17000:	ldr	r4, [r5, #48]	; 0x30
   17004:	cmp	r4, #0
   17008:	beq	171d4 <fts_read@@Base+0x22c>
   1700c:	ldrh	r3, [r5, #64]	; 0x40
   17010:	mov	r4, r5
   17014:	cmp	r3, #4
   17018:	bne	17284 <fts_read@@Base+0x2dc>
   1701c:	ldr	r5, [r4, #8]
   17020:	cmp	r5, #0
   17024:	bne	16ff4 <fts_read@@Base+0x4c>
   17028:	ldr	r6, [r4, #4]
   1702c:	ldr	r3, [r6, #12]
   17030:	cmp	r3, #0
   17034:	bne	17528 <fts_read@@Base+0x580>
   17038:	str	r6, [r8]
   1703c:	mov	r0, r4
   17040:	bl	11360 <free@plt>
   17044:	ldr	r3, [r6, #48]	; 0x30
   17048:	cmn	r3, #1
   1704c:	beq	1745c <fts_read@@Base+0x4b4>
   17050:	ldrh	r3, [r6, #60]	; 0x3c
   17054:	cmp	r3, #11
   17058:	beq	176e0 <fts_read@@Base+0x738>
   1705c:	ldr	r3, [r6, #40]	; 0x28
   17060:	ldr	r2, [r8, #24]
   17064:	mov	r1, #0
   17068:	strb	r1, [r2, r3]
   1706c:	ldr	r3, [r6, #48]	; 0x30
   17070:	cmp	r3, r1
   17074:	beq	1747c <fts_read@@Base+0x4d4>
   17078:	ldrh	r3, [r6, #62]	; 0x3e
   1707c:	tst	r3, #2
   17080:	bne	17410 <fts_read@@Base+0x468>
   17084:	tst	r3, #1
   17088:	beq	175b0 <fts_read@@Base+0x608>
   1708c:	ldrh	r3, [r6, #60]	; 0x3c
   17090:	ldr	r0, [r8, #48]	; 0x30
   17094:	cmp	r3, #2
   17098:	beq	170c8 <fts_read@@Base+0x120>
   1709c:	ldr	r3, [r6, #32]
   170a0:	cmp	r3, #0
   170a4:	movne	r3, #7
   170a8:	strhne	r3, [r6, #60]	; 0x3c
   170ac:	bne	170c8 <fts_read@@Base+0x120>
   170b0:	mov	r3, #6
   170b4:	strh	r3, [r6, #60]	; 0x3c
   170b8:	mov	r2, r6
   170bc:	add	r1, r8, #56	; 0x38
   170c0:	bl	16028 <__assert_fail@plt+0x495c>
   170c4:	ldr	r0, [r8, #48]	; 0x30
   170c8:	tst	r0, #16384	; 0x4000
   170cc:	moveq	r4, r6
   170d0:	beq	170d8 <fts_read@@Base+0x130>
   170d4:	mov	r4, #0
   170d8:	mov	r0, r4
   170dc:	pop	{r4, r5, r6, r7, r8, pc}
   170e0:	sub	r2, r3, #12
   170e4:	cmp	r2, #1
   170e8:	bls	17320 <fts_read@@Base+0x378>
   170ec:	cmp	r3, #1
   170f0:	bne	1701c <fts_read@@Base+0x74>
   170f4:	tst	r1, #64	; 0x40
   170f8:	beq	17110 <fts_read@@Base+0x168>
   170fc:	ldrd	r6, [r4, #72]	; 0x48
   17100:	ldrd	r2, [r8, #16]
   17104:	cmp	r7, r3
   17108:	cmpeq	r6, r2
   1710c:	bne	17194 <fts_read@@Base+0x1ec>
   17110:	ldr	r0, [r8, #4]
   17114:	cmp	r0, #0
   17118:	beq	173bc <fts_read@@Base+0x414>
   1711c:	tst	r1, #8192	; 0x2000
   17120:	bne	173a8 <fts_read@@Base+0x400>
   17124:	ldr	r3, [r4, #24]
   17128:	mvn	r2, #0
   1712c:	mov	r1, r4
   17130:	mov	r0, r8
   17134:	bl	15d6c <__assert_fail@plt+0x46a0>
   17138:	cmp	r0, #0
   1713c:	beq	17444 <fts_read@@Base+0x49c>
   17140:	bl	1154c <__errno_location@plt>
   17144:	ldrh	r3, [r4, #62]	; 0x3e
   17148:	ldr	r5, [r8, #4]
   1714c:	orr	r3, r3, #1
   17150:	cmp	r5, #0
   17154:	ldr	r2, [r0]
   17158:	strh	r3, [r4, #62]	; 0x3e
   1715c:	str	r2, [r4, #32]
   17160:	beq	17180 <fts_read@@Base+0x1d8>
   17164:	mov	r3, r5
   17168:	ldr	r2, [r3, #4]
   1716c:	ldr	r2, [r2, #24]
   17170:	str	r2, [r3, #24]
   17174:	ldr	r3, [r3, #8]
   17178:	cmp	r3, #0
   1717c:	bne	17168 <fts_read@@Base+0x1c0>
   17180:	mov	r3, #0
   17184:	str	r3, [r8, #4]
   17188:	b	1728c <fts_read@@Base+0x2e4>
   1718c:	cmp	r2, #4
   17190:	bne	170f4 <fts_read@@Base+0x14c>
   17194:	ldrh	r3, [r4, #62]	; 0x3e
   17198:	tst	r3, #2
   1719c:	bne	17578 <fts_read@@Base+0x5d0>
   171a0:	ldr	r0, [r8, #4]
   171a4:	cmp	r0, #0
   171a8:	beq	171b8 <fts_read@@Base+0x210>
   171ac:	bl	157a4 <__assert_fail@plt+0x40d8>
   171b0:	mov	r3, #0
   171b4:	str	r3, [r8, #4]
   171b8:	mov	r3, #6
   171bc:	strh	r3, [r4, #60]	; 0x3c
   171c0:	mov	r2, r4
   171c4:	add	r1, r8, #56	; 0x38
   171c8:	ldr	r0, [r8, #48]	; 0x30
   171cc:	bl	16028 <__assert_fail@plt+0x495c>
   171d0:	b	170d8 <fts_read@@Base+0x130>
   171d4:	mov	r0, r8
   171d8:	bl	15a58 <__assert_fail@plt+0x438c>
   171dc:	cmp	r0, #0
   171e0:	bne	17560 <fts_read@@Base+0x5b8>
   171e4:	ldr	r2, [r8, #48]	; 0x30
   171e8:	ldr	r3, [pc, #1268]	; 176e4 <fts_read@@Base+0x73c>
   171ec:	ldr	r0, [r8, #56]	; 0x38
   171f0:	and	r3, r3, r2
   171f4:	cmp	r3, #0
   171f8:	beq	17570 <fts_read@@Base+0x5c8>
   171fc:	cmp	r0, #0
   17200:	beq	17208 <fts_read@@Base+0x260>
   17204:	bl	18e60 <fts_children@@Base+0x173c>
   17208:	ldr	r2, [r5, #52]	; 0x34
   1720c:	add	r4, r5, #176	; 0xb0
   17210:	str	r2, [r5, #40]	; 0x28
   17214:	mov	r1, r4
   17218:	add	r2, r2, #1
   1721c:	ldr	r0, [r8, #24]
   17220:	bl	11354 <memmove@plt>
   17224:	mov	r0, r4
   17228:	mov	r1, #47	; 0x2f
   1722c:	bl	115f4 <strrchr@plt>
   17230:	cmp	r0, #0
   17234:	beq	17264 <fts_read@@Base+0x2bc>
   17238:	cmp	r4, r0
   1723c:	beq	1744c <fts_read@@Base+0x4a4>
   17240:	add	r6, r0, #1
   17244:	mov	r0, r6
   17248:	bl	11528 <strlen@plt>
   1724c:	mov	r1, r6
   17250:	mov	r7, r0
   17254:	add	r2, r7, #1
   17258:	mov	r0, r4
   1725c:	bl	11354 <memmove@plt>
   17260:	str	r7, [r5, #52]	; 0x34
   17264:	ldr	r3, [r8, #24]
   17268:	add	r1, r8, #56	; 0x38
   1726c:	str	r3, [r5, #28]
   17270:	str	r3, [r5, #24]
   17274:	ldr	r0, [r8, #48]	; 0x30
   17278:	bl	15cb0 <__assert_fail@plt+0x45e4>
   1727c:	ldrh	r0, [r5, #60]	; 0x3c
   17280:	b	172d0 <fts_read@@Base+0x328>
   17284:	cmp	r3, #2
   17288:	beq	17584 <fts_read@@Base+0x5dc>
   1728c:	ldr	r3, [r5, #4]
   17290:	mov	ip, #47	; 0x2f
   17294:	ldr	r2, [r8, #24]
   17298:	ldr	r1, [r3, #40]	; 0x28
   1729c:	ldr	r0, [r3, #28]
   172a0:	sub	r3, r1, #1
   172a4:	ldrb	r0, [r0, r3]
   172a8:	cmp	r0, ip
   172ac:	movne	r3, r1
   172b0:	add	r0, r2, r3
   172b4:	strb	ip, [r2, r3]
   172b8:	ldr	r2, [r5, #52]	; 0x34
   172bc:	add	r0, r0, #1
   172c0:	add	r2, r2, #1
   172c4:	add	r1, r5, #176	; 0xb0
   172c8:	bl	11354 <memmove@plt>
   172cc:	ldrh	r0, [r5, #60]	; 0x3c
   172d0:	cmp	r0, #11
   172d4:	str	r5, [r8]
   172d8:	beq	17350 <fts_read@@Base+0x3a8>
   172dc:	cmp	r0, #1
   172e0:	bne	1736c <fts_read@@Base+0x3c4>
   172e4:	ldr	r3, [r5, #48]	; 0x30
   172e8:	cmp	r3, #0
   172ec:	beq	17380 <fts_read@@Base+0x3d8>
   172f0:	mov	r4, r5
   172f4:	mov	r2, r5
   172f8:	add	r1, r8, #56	; 0x38
   172fc:	ldr	r0, [r8, #48]	; 0x30
   17300:	bl	15f78 <__assert_fail@plt+0x48ac>
   17304:	subs	r5, r0, #0
   17308:	bne	170d8 <fts_read@@Base+0x130>
   1730c:	bl	1154c <__errno_location@plt>
   17310:	mov	r3, #12
   17314:	mov	r4, r5
   17318:	str	r3, [r0]
   1731c:	b	170d8 <fts_read@@Base+0x130>
   17320:	mov	r3, #1
   17324:	mov	r2, r4
   17328:	add	r1, r8, #48	; 0x30
   1732c:	ldr	r0, [r8, #32]
   17330:	bl	15aa8 <__assert_fail@plt+0x43dc>
   17334:	cmp	r0, #1
   17338:	strh	r0, [r4, #60]	; 0x3c
   1733c:	beq	175f4 <fts_read@@Base+0x64c>
   17340:	cmp	r0, #11
   17344:	str	r4, [r8]
   17348:	bne	170d8 <fts_read@@Base+0x130>
   1734c:	mov	r5, r4
   17350:	ldrd	r2, [r5, #120]	; 0x78
   17354:	cmp	r3, #0
   17358:	cmpeq	r2, #2
   1735c:	beq	174b8 <fts_read@@Base+0x510>
   17360:	cmp	r3, #0
   17364:	cmpeq	r2, #1
   17368:	bne	176e0 <fts_read@@Base+0x738>
   1736c:	mov	r4, r5
   17370:	mov	r0, r4
   17374:	pop	{r4, r5, r6, r7, r8, pc}
   17378:	cmp	r0, #1
   1737c:	bne	1736c <fts_read@@Base+0x3c4>
   17380:	ldrd	r2, [r5, #72]	; 0x48
   17384:	mov	r4, r5
   17388:	strd	r2, [r8, #16]
   1738c:	b	172f4 <fts_read@@Base+0x34c>
   17390:	mov	r2, r4
   17394:	add	r1, r8, #48	; 0x30
   17398:	ldr	r0, [r8, #32]
   1739c:	bl	15aa8 <__assert_fail@plt+0x43dc>
   173a0:	strh	r0, [r4, #60]	; 0x3c
   173a4:	b	170d8 <fts_read@@Base+0x130>
   173a8:	bic	r1, r1, #8192	; 0x2000
   173ac:	str	r1, [r8, #48]	; 0x30
   173b0:	bl	157a4 <__assert_fail@plt+0x40d8>
   173b4:	mov	r3, #0
   173b8:	str	r3, [r8, #4]
   173bc:	mov	r1, #3
   173c0:	mov	r0, r8
   173c4:	bl	16100 <__assert_fail@plt+0x4a34>
   173c8:	cmp	r0, #0
   173cc:	mov	r5, r0
   173d0:	str	r0, [r8, #4]
   173d4:	bne	17180 <fts_read@@Base+0x1d8>
   173d8:	ldr	r0, [r8, #48]	; 0x30
   173dc:	tst	r0, #16384	; 0x4000
   173e0:	bne	170d4 <fts_read@@Base+0x12c>
   173e4:	ldr	r3, [r4, #32]
   173e8:	cmp	r3, #0
   173ec:	beq	17400 <fts_read@@Base+0x458>
   173f0:	ldrh	r3, [r4, #60]	; 0x3c
   173f4:	cmp	r3, #4
   173f8:	movne	r3, #7
   173fc:	strhne	r3, [r4, #60]	; 0x3c
   17400:	add	r1, r8, #56	; 0x38
   17404:	mov	r2, r4
   17408:	bl	16028 <__assert_fail@plt+0x495c>
   1740c:	b	170d8 <fts_read@@Base+0x130>
   17410:	ldr	r3, [r8, #48]	; 0x30
   17414:	ldr	r1, [r6, #36]	; 0x24
   17418:	tst	r3, #4
   1741c:	bne	17438 <fts_read@@Base+0x490>
   17420:	tst	r3, #512	; 0x200
   17424:	beq	175dc <fts_read@@Base+0x634>
   17428:	mov	r2, #1
   1742c:	mov	r0, r8
   17430:	bl	159d0 <__assert_fail@plt+0x4304>
   17434:	ldr	r1, [r6, #36]	; 0x24
   17438:	mov	r0, r1
   1743c:	bl	1169c <close@plt>
   17440:	b	1708c <fts_read@@Base+0xe4>
   17444:	ldr	r5, [r8, #4]
   17448:	b	17180 <fts_read@@Base+0x1d8>
   1744c:	ldrb	r3, [r4, #1]
   17450:	cmp	r3, #0
   17454:	beq	17264 <fts_read@@Base+0x2bc>
   17458:	b	17240 <fts_read@@Base+0x298>
   1745c:	mov	r0, r6
   17460:	bl	11360 <free@plt>
   17464:	bl	1154c <__errno_location@plt>
   17468:	mov	r3, #0
   1746c:	mov	r4, r3
   17470:	str	r3, [r0]
   17474:	str	r3, [r8]
   17478:	b	170d8 <fts_read@@Base+0x130>
   1747c:	mov	r0, r8
   17480:	bl	15a58 <__assert_fail@plt+0x438c>
   17484:	cmp	r0, #0
   17488:	beq	1708c <fts_read@@Base+0xe4>
   1748c:	bl	1154c <__errno_location@plt>
   17490:	ldr	r3, [r8, #48]	; 0x30
   17494:	orr	r3, r3, #16384	; 0x4000
   17498:	ldr	r2, [r0]
   1749c:	str	r2, [r6, #32]
   174a0:	str	r3, [r8, #48]	; 0x30
   174a4:	ldrh	r3, [r6, #60]	; 0x3c
   174a8:	cmp	r3, #2
   174ac:	beq	170d4 <fts_read@@Base+0x12c>
   174b0:	ldr	r0, [r8, #48]	; 0x30
   174b4:	b	1709c <fts_read@@Base+0xf4>
   174b8:	ldr	r4, [r5, #4]
   174bc:	ldr	r0, [r8, #32]
   174c0:	ldr	r3, [r4, #56]	; 0x38
   174c4:	cmp	r3, #0
   174c8:	bne	174dc <fts_read@@Base+0x534>
   174cc:	ldr	r3, [r8, #48]	; 0x30
   174d0:	and	r3, r3, #24
   174d4:	cmp	r3, #24
   174d8:	beq	1766c <fts_read@@Base+0x6c4>
   174dc:	mov	r3, #0
   174e0:	mov	r2, r5
   174e4:	add	r1, r8, #48	; 0x30
   174e8:	bl	15aa8 <__assert_fail@plt+0x43dc>
   174ec:	ldr	r3, [r5, #88]	; 0x58
   174f0:	and	r3, r3, #61440	; 0xf000
   174f4:	cmp	r3, #16384	; 0x4000
   174f8:	strh	r0, [r5, #60]	; 0x3c
   174fc:	bne	172dc <fts_read@@Base+0x334>
   17500:	ldr	r3, [r5, #48]	; 0x30
   17504:	cmp	r3, #0
   17508:	beq	17378 <fts_read@@Base+0x3d0>
   1750c:	ldr	r3, [r4, #56]	; 0x38
   17510:	sub	r3, r3, #1
   17514:	cmn	r3, #3
   17518:	strls	r3, [r4, #56]	; 0x38
   1751c:	cmp	r0, #1
   17520:	beq	172f0 <fts_read@@Base+0x348>
   17524:	b	1736c <fts_read@@Base+0x3c4>
   17528:	ldr	r3, [r6, #40]	; 0x28
   1752c:	ldr	r2, [r8, #24]
   17530:	str	r6, [r8]
   17534:	mov	r1, #3
   17538:	strb	r5, [r2, r3]
   1753c:	mov	r0, r8
   17540:	bl	16100 <__assert_fail@plt+0x4a34>
   17544:	subs	r5, r0, #0
   17548:	bne	175d0 <fts_read@@Base+0x628>
   1754c:	ldr	r3, [r8, #48]	; 0x30
   17550:	tst	r3, #16384	; 0x4000
   17554:	bne	170d4 <fts_read@@Base+0x12c>
   17558:	ldr	r6, [r4, #4]
   1755c:	b	17038 <fts_read@@Base+0x90>
   17560:	ldr	r3, [r8, #48]	; 0x30
   17564:	orr	r3, r3, #16384	; 0x4000
   17568:	str	r3, [r8, #48]	; 0x30
   1756c:	b	170d8 <fts_read@@Base+0x130>
   17570:	bl	11360 <free@plt>
   17574:	b	17208 <fts_read@@Base+0x260>
   17578:	ldr	r0, [r4, #36]	; 0x24
   1757c:	bl	1169c <close@plt>
   17580:	b	171a0 <fts_read@@Base+0x1f8>
   17584:	mov	r3, #1
   17588:	mov	r2, r5
   1758c:	add	r1, r8, #48	; 0x30
   17590:	ldr	r0, [r8, #32]
   17594:	bl	15aa8 <__assert_fail@plt+0x43dc>
   17598:	cmp	r0, #1
   1759c:	strh	r0, [r5, #60]	; 0x3c
   175a0:	beq	17638 <fts_read@@Base+0x690>
   175a4:	mov	r3, #3
   175a8:	strh	r3, [r5, #64]	; 0x40
   175ac:	b	1728c <fts_read@@Base+0x2e4>
   175b0:	ldr	r3, [pc, #304]	; 176e8 <fts_read@@Base+0x740>
   175b4:	mvn	r2, #0
   175b8:	ldr	r1, [r6, #4]
   175bc:	mov	r0, r8
   175c0:	bl	15d6c <__assert_fail@plt+0x46a0>
   175c4:	cmp	r0, #0
   175c8:	beq	1708c <fts_read@@Base+0xe4>
   175cc:	b	1748c <fts_read@@Base+0x4e4>
   175d0:	mov	r0, r4
   175d4:	bl	11360 <free@plt>
   175d8:	b	1728c <fts_read@@Base+0x2e4>
   175dc:	mov	r0, r1
   175e0:	bl	11630 <fchdir@plt>
   175e4:	cmp	r0, #0
   175e8:	bne	1768c <fts_read@@Base+0x6e4>
   175ec:	ldr	r1, [r6, #36]	; 0x24
   175f0:	b	17438 <fts_read@@Base+0x490>
   175f4:	ldr	r1, [r8, #48]	; 0x30
   175f8:	tst	r1, #4
   175fc:	strne	r4, [r8]
   17600:	movne	r5, r4
   17604:	bne	172e4 <fts_read@@Base+0x33c>
   17608:	ldr	r2, [pc, #220]	; 176ec <fts_read@@Base+0x744>
   1760c:	ldr	r0, [r8, #32]
   17610:	bl	15d30 <__assert_fail@plt+0x4664>
   17614:	cmp	r0, #0
   17618:	str	r0, [r4, #36]	; 0x24
   1761c:	blt	176ac <fts_read@@Base+0x704>
   17620:	ldrh	r3, [r4, #62]	; 0x3e
   17624:	ldrh	r0, [r4, #60]	; 0x3c
   17628:	mov	r5, r4
   1762c:	orr	r3, r3, #2
   17630:	strh	r3, [r4, #62]	; 0x3e
   17634:	b	172d0 <fts_read@@Base+0x328>
   17638:	ldr	r1, [r8, #48]	; 0x30
   1763c:	tst	r1, #4
   17640:	bne	175a4 <fts_read@@Base+0x5fc>
   17644:	ldr	r2, [pc, #160]	; 176ec <fts_read@@Base+0x744>
   17648:	ldr	r0, [r8, #32]
   1764c:	bl	15d30 <__assert_fail@plt+0x4664>
   17650:	cmp	r0, #0
   17654:	str	r0, [r5, #36]	; 0x24
   17658:	blt	176c8 <fts_read@@Base+0x720>
   1765c:	ldrh	r3, [r5, #62]	; 0x3e
   17660:	orr	r3, r3, #2
   17664:	strh	r3, [r5, #62]	; 0x3e
   17668:	b	175a4 <fts_read@@Base+0x5fc>
   1766c:	mov	r1, r0
   17670:	mov	r0, r4
   17674:	bl	1593c <__assert_fail@plt+0x4270>
   17678:	cmp	r0, #2
   1767c:	ldrheq	r0, [r5, #60]	; 0x3c
   17680:	beq	172dc <fts_read@@Base+0x334>
   17684:	ldr	r0, [r8, #32]
   17688:	b	174dc <fts_read@@Base+0x534>
   1768c:	bl	1154c <__errno_location@plt>
   17690:	ldr	r3, [r8, #48]	; 0x30
   17694:	ldr	r1, [r6, #36]	; 0x24
   17698:	orr	r3, r3, #16384	; 0x4000
   1769c:	ldr	r2, [r0]
   176a0:	str	r2, [r6, #32]
   176a4:	str	r3, [r8, #48]	; 0x30
   176a8:	b	17438 <fts_read@@Base+0x490>
   176ac:	bl	1154c <__errno_location@plt>
   176b0:	mov	r2, #7
   176b4:	ldr	r3, [r0]
   176b8:	strh	r2, [r4, #60]	; 0x3c
   176bc:	str	r3, [r4, #32]
   176c0:	str	r4, [r8]
   176c4:	b	170d8 <fts_read@@Base+0x130>
   176c8:	bl	1154c <__errno_location@plt>
   176cc:	mov	r2, #7
   176d0:	ldr	r3, [r0]
   176d4:	strh	r2, [r5, #60]	; 0x3c
   176d8:	str	r3, [r5, #32]
   176dc:	b	175a4 <fts_read@@Base+0x5fc>
   176e0:	bl	11690 <abort@plt>
   176e4:	andeq	r0, r0, r2, lsl #2
   176e8:	andeq	fp, r1, r4, asr #9
   176ec:	andeq	fp, r1, r8, asr #9

000176f0 <fts_set@@Base>:
   176f0:	cmp	r2, #4
   176f4:	bhi	17708 <fts_set@@Base+0x18>
   176f8:	mov	r3, #0
   176fc:	strh	r2, [r1, #64]	; 0x40
   17700:	mov	r0, r3
   17704:	bx	lr
   17708:	push	{r4, lr}
   1770c:	bl	1154c <__errno_location@plt>
   17710:	mov	r2, #22
   17714:	mov	r3, #1
   17718:	str	r2, [r0]
   1771c:	mov	r0, r3
   17720:	pop	{r4, pc}

00017724 <fts_children@@Base>:
   17724:	push	{r4, r5, r6, r7, r8, lr}
   17728:	mov	r4, r1
   1772c:	mov	r5, r0
   17730:	bl	1154c <__errno_location@plt>
   17734:	bics	r2, r4, #8192	; 0x2000
   17738:	mov	r7, r0
   1773c:	bne	177cc <fts_children@@Base+0xa8>
   17740:	ldr	r6, [r5]
   17744:	str	r2, [r0]
   17748:	ldr	r3, [r5, #48]	; 0x30
   1774c:	ands	r0, r3, #16384	; 0x4000
   17750:	bne	177d4 <fts_children@@Base+0xb0>
   17754:	ldrh	r3, [r6, #60]	; 0x3c
   17758:	cmp	r3, #9
   1775c:	beq	1782c <fts_children@@Base+0x108>
   17760:	cmp	r3, #1
   17764:	popne	{r4, r5, r6, r7, r8, pc}
   17768:	ldr	r0, [r5, #4]
   1776c:	cmp	r0, #0
   17770:	beq	17778 <fts_children@@Base+0x54>
   17774:	bl	157a4 <__assert_fail@plt+0x40d8>
   17778:	cmp	r4, #8192	; 0x2000
   1777c:	moveq	r8, #2
   17780:	ldreq	r3, [r5, #48]	; 0x30
   17784:	movne	r8, #1
   17788:	orreq	r3, r3, #8192	; 0x2000
   1778c:	streq	r3, [r5, #48]	; 0x30
   17790:	ldr	r3, [r6, #48]	; 0x30
   17794:	cmp	r3, #0
   17798:	bne	177b8 <fts_children@@Base+0x94>
   1779c:	ldr	r3, [r6, #24]
   177a0:	ldrb	r3, [r3]
   177a4:	cmp	r3, #47	; 0x2f
   177a8:	beq	177b8 <fts_children@@Base+0x94>
   177ac:	ldr	r1, [r5, #48]	; 0x30
   177b0:	ands	r4, r1, #4
   177b4:	beq	177dc <fts_children@@Base+0xb8>
   177b8:	mov	r1, r8
   177bc:	mov	r0, r5
   177c0:	bl	16100 <__assert_fail@plt+0x4a34>
   177c4:	str	r0, [r5, #4]
   177c8:	pop	{r4, r5, r6, r7, r8, pc}
   177cc:	mov	r3, #22
   177d0:	str	r3, [r0]
   177d4:	mov	r0, #0
   177d8:	pop	{r4, r5, r6, r7, r8, pc}
   177dc:	ldr	r2, [pc, #136]	; 1786c <fts_children@@Base+0x148>
   177e0:	ldr	r0, [r5, #32]
   177e4:	bl	15d30 <__assert_fail@plt+0x4664>
   177e8:	subs	r6, r0, #0
   177ec:	blt	17848 <fts_children@@Base+0x124>
   177f0:	mov	r1, r8
   177f4:	mov	r0, r5
   177f8:	bl	16100 <__assert_fail@plt+0x4a34>
   177fc:	ldr	r3, [r5, #48]	; 0x30
   17800:	ands	r4, r3, #512	; 0x200
   17804:	str	r0, [r5, #4]
   17808:	bne	17834 <fts_children@@Base+0x110>
   1780c:	mov	r0, r6
   17810:	bl	11630 <fchdir@plt>
   17814:	cmp	r0, #0
   17818:	bne	17854 <fts_children@@Base+0x130>
   1781c:	mov	r0, r6
   17820:	bl	1169c <close@plt>
   17824:	ldr	r0, [r5, #4]
   17828:	pop	{r4, r5, r6, r7, r8, pc}
   1782c:	ldr	r0, [r6, #8]
   17830:	pop	{r4, r5, r6, r7, r8, pc}
   17834:	mov	r1, r6
   17838:	mov	r2, #1
   1783c:	mov	r0, r5
   17840:	bl	159d0 <__assert_fail@plt+0x4304>
   17844:	b	17824 <fts_children@@Base+0x100>
   17848:	str	r4, [r5, #4]
   1784c:	mov	r0, r4
   17850:	pop	{r4, r5, r6, r7, r8, pc}
   17854:	ldr	r5, [r7]
   17858:	mov	r0, r6
   1785c:	bl	1169c <close@plt>
   17860:	str	r5, [r7]
   17864:	mov	r0, r4
   17868:	pop	{r4, r5, r6, r7, r8, pc}
   1786c:	andeq	fp, r1, r8, asr #9
   17870:	push	{r4, r5, r6, r7, r8, lr}
   17874:	subs	r4, r0, #0
   17878:	beq	178c8 <fts_children@@Base+0x1a4>
   1787c:	cmp	r4, #10
   17880:	beq	1788c <fts_children@@Base+0x168>
   17884:	mov	r0, r4
   17888:	pop	{r4, r5, r6, r7, r8, pc}
   1788c:	ldr	r6, [r1]
   17890:	mov	r5, r1
   17894:	mov	r0, r6
   17898:	ldr	r1, [pc, #60]	; 178dc <fts_children@@Base+0x1b8>
   1789c:	bl	11330 <strcmp@plt>
   178a0:	subs	r7, r0, #0
   178a4:	bne	17884 <fts_children@@Base+0x160>
   178a8:	mov	r0, r6
   178ac:	bl	11648 <freecon@plt>
   178b0:	str	r7, [r5]
   178b4:	bl	1154c <__errno_location@plt>
   178b8:	mov	r3, #61	; 0x3d
   178bc:	mvn	r4, #0
   178c0:	str	r3, [r0]
   178c4:	b	17884 <fts_children@@Base+0x160>
   178c8:	bl	1154c <__errno_location@plt>
   178cc:	mov	r3, #95	; 0x5f
   178d0:	mvn	r4, #0
   178d4:	str	r3, [r0]
   178d8:	b	17884 <fts_children@@Base+0x160>
   178dc:	andeq	fp, r1, ip, asr #9
   178e0:	push	{r4, lr}
   178e4:	mov	r4, r1
   178e8:	bl	1151c <getfilecon@plt>
   178ec:	mov	r1, r4
   178f0:	pop	{r4, lr}
   178f4:	b	17870 <fts_children@@Base+0x14c>
   178f8:	push	{r4, lr}
   178fc:	mov	r4, r1
   17900:	bl	11498 <lgetfilecon@plt>
   17904:	mov	r1, r4
   17908:	pop	{r4, lr}
   1790c:	b	17870 <fts_children@@Base+0x14c>
   17910:	push	{r4, lr}
   17914:	mov	r4, r1
   17918:	bl	113e4 <fgetfilecon@plt>
   1791c:	mov	r1, r4
   17920:	pop	{r4, lr}
   17924:	b	17870 <fts_children@@Base+0x14c>
   17928:	push	{r4, r5, r6, r7, r8, lr}
   1792c:	subs	r7, r0, #0
   17930:	ldr	r5, [pc, #108]	; 179a4 <fts_children@@Base+0x280>
   17934:	sub	sp, sp, #8
   17938:	mov	r8, r1
   1793c:	ldr	r1, [r5]
   17940:	moveq	r7, sp
   17944:	str	r1, [sp, #4]
   17948:	mov	r0, r7
   1794c:	mov	r1, r8
   17950:	mov	r6, r2
   17954:	bl	11468 <mbrtowc@plt>
   17958:	cmp	r6, #0
   1795c:	cmnne	r0, #3
   17960:	mov	r4, r0
   17964:	bhi	17984 <fts_children@@Base+0x260>
   17968:	ldr	r2, [sp, #4]
   1796c:	ldr	r3, [r5]
   17970:	mov	r0, r4
   17974:	cmp	r2, r3
   17978:	bne	179a0 <fts_children@@Base+0x27c>
   1797c:	add	sp, sp, #8
   17980:	pop	{r4, r5, r6, r7, r8, pc}
   17984:	mov	r0, #0
   17988:	bl	182e0 <fts_children@@Base+0xbbc>
   1798c:	cmp	r0, #0
   17990:	moveq	r4, #1
   17994:	ldrbeq	r3, [r8]
   17998:	streq	r3, [r7]
   1799c:	b	17968 <fts_children@@Base+0x244>
   179a0:	bl	113c0 <__stack_chk_fail@plt>
   179a4:	andeq	fp, r2, r0, lsl #30
   179a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179ac:	sub	sp, sp, #4048	; 0xfd0
   179b0:	ldr	r6, [pc, #456]	; 17b80 <fts_children@@Base+0x45c>
   179b4:	sub	sp, sp, #12
   179b8:	cmn	r0, #100	; 0x64
   179bc:	ldr	r3, [r6]
   179c0:	mov	r5, r1
   179c4:	mov	r8, r2
   179c8:	str	r3, [sp, #4052]	; 0xfd4
   179cc:	beq	17ac0 <fts_children@@Base+0x39c>
   179d0:	ldrb	r3, [r1]
   179d4:	cmp	r3, #47	; 0x2f
   179d8:	beq	17ac0 <fts_children@@Base+0x39c>
   179dc:	mov	r4, r0
   179e0:	add	r9, sp, #20
   179e4:	mov	r2, r1
   179e8:	mov	r0, r9
   179ec:	mov	r1, r4
   179f0:	bl	19c90 <fts_children@@Base+0x256c>
   179f4:	subs	sl, r0, #0
   179f8:	beq	17a34 <fts_children@@Base+0x310>
   179fc:	mov	r1, r8
   17a00:	bl	178e0 <fts_children@@Base+0x1bc>
   17a04:	mov	r7, r0
   17a08:	bl	1154c <__errno_location@plt>
   17a0c:	cmp	sl, r9
   17a10:	mov	fp, r0
   17a14:	ldr	r9, [r0]
   17a18:	beq	17a24 <fts_children@@Base+0x300>
   17a1c:	mov	r0, sl
   17a20:	bl	11360 <free@plt>
   17a24:	cmn	r7, #1
   17a28:	bne	17aa0 <fts_children@@Base+0x37c>
   17a2c:	cmp	r9, #20
   17a30:	bne	17ad4 <fts_children@@Base+0x3b0>
   17a34:	add	r3, sp, #12
   17a38:	mov	r0, r3
   17a3c:	str	r3, [sp, #4]
   17a40:	bl	195d4 <fts_children@@Base+0x1eb0>
   17a44:	cmp	r0, #0
   17a48:	bne	17b74 <fts_children@@Base+0x450>
   17a4c:	cmp	r4, #0
   17a50:	blt	17a60 <fts_children@@Base+0x33c>
   17a54:	ldr	r3, [sp, #12]
   17a58:	cmp	r3, r4
   17a5c:	beq	17b48 <fts_children@@Base+0x424>
   17a60:	mov	r0, r4
   17a64:	bl	11630 <fchdir@plt>
   17a68:	cmp	r0, #0
   17a6c:	bne	17b28 <fts_children@@Base+0x404>
   17a70:	mov	r1, r8
   17a74:	mov	r0, r5
   17a78:	bl	178e0 <fts_children@@Base+0x1bc>
   17a7c:	cmn	r0, #1
   17a80:	mov	r7, r0
   17a84:	beq	17af8 <fts_children@@Base+0x3d4>
   17a88:	ldr	r0, [sp, #4]
   17a8c:	bl	19628 <fts_children@@Base+0x1f04>
   17a90:	cmp	r0, #0
   17a94:	bne	17b68 <fts_children@@Base+0x444>
   17a98:	ldr	r0, [sp, #4]
   17a9c:	bl	19644 <fts_children@@Base+0x1f20>
   17aa0:	ldr	r2, [sp, #4052]	; 0xfd4
   17aa4:	ldr	r3, [r6]
   17aa8:	mov	r0, r7
   17aac:	cmp	r2, r3
   17ab0:	bne	17b64 <fts_children@@Base+0x440>
   17ab4:	add	sp, sp, #4048	; 0xfd0
   17ab8:	add	sp, sp, #12
   17abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ac0:	mov	r1, r8
   17ac4:	mov	r0, r5
   17ac8:	bl	178e0 <fts_children@@Base+0x1bc>
   17acc:	mov	r7, r0
   17ad0:	b	17aa0 <fts_children@@Base+0x37c>
   17ad4:	sub	r3, r9, #1
   17ad8:	cmp	r9, #13
   17adc:	cmpne	r3, #1
   17ae0:	bls	17a34 <fts_children@@Base+0x310>
   17ae4:	cmp	r9, #38	; 0x26
   17ae8:	cmpne	r9, #95	; 0x5f
   17aec:	strne	r9, [fp]
   17af0:	beq	17a34 <fts_children@@Base+0x310>
   17af4:	b	17aa0 <fts_children@@Base+0x37c>
   17af8:	bl	1154c <__errno_location@plt>
   17afc:	mov	r4, r0
   17b00:	ldr	r0, [sp, #4]
   17b04:	ldr	r5, [r4]
   17b08:	bl	19628 <fts_children@@Base+0x1f04>
   17b0c:	cmp	r0, #0
   17b10:	bne	17b68 <fts_children@@Base+0x444>
   17b14:	ldr	r0, [sp, #4]
   17b18:	bl	19644 <fts_children@@Base+0x1f20>
   17b1c:	cmp	r5, #0
   17b20:	strne	r5, [r4]
   17b24:	b	17aa0 <fts_children@@Base+0x37c>
   17b28:	bl	1154c <__errno_location@plt>
   17b2c:	mvn	r7, #0
   17b30:	mov	r4, r0
   17b34:	ldr	r0, [sp, #4]
   17b38:	ldr	r5, [r4]
   17b3c:	bl	19644 <fts_children@@Base+0x1f20>
   17b40:	str	r5, [r4]
   17b44:	b	17aa0 <fts_children@@Base+0x37c>
   17b48:	ldr	r0, [sp, #4]
   17b4c:	bl	19644 <fts_children@@Base+0x1f20>
   17b50:	bl	1154c <__errno_location@plt>
   17b54:	mov	r3, #9
   17b58:	mvn	r7, #0
   17b5c:	str	r3, [r0]
   17b60:	b	17aa0 <fts_children@@Base+0x37c>
   17b64:	bl	113c0 <__stack_chk_fail@plt>
   17b68:	bl	1154c <__errno_location@plt>
   17b6c:	ldr	r0, [r0]
   17b70:	bl	1953c <fts_children@@Base+0x1e18>
   17b74:	bl	1154c <__errno_location@plt>
   17b78:	ldr	r0, [r0]
   17b7c:	bl	19500 <fts_children@@Base+0x1ddc>
   17b80:	andeq	fp, r2, r0, lsl #30
   17b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b88:	sub	sp, sp, #4048	; 0xfd0
   17b8c:	ldr	r6, [pc, #456]	; 17d5c <fts_children@@Base+0x638>
   17b90:	sub	sp, sp, #12
   17b94:	cmn	r0, #100	; 0x64
   17b98:	ldr	r3, [r6]
   17b9c:	mov	r5, r1
   17ba0:	mov	r8, r2
   17ba4:	str	r3, [sp, #4052]	; 0xfd4
   17ba8:	beq	17c9c <fts_children@@Base+0x578>
   17bac:	ldrb	r3, [r1]
   17bb0:	cmp	r3, #47	; 0x2f
   17bb4:	beq	17c9c <fts_children@@Base+0x578>
   17bb8:	mov	r4, r0
   17bbc:	add	r9, sp, #20
   17bc0:	mov	r2, r1
   17bc4:	mov	r0, r9
   17bc8:	mov	r1, r4
   17bcc:	bl	19c90 <fts_children@@Base+0x256c>
   17bd0:	subs	sl, r0, #0
   17bd4:	beq	17c10 <fts_children@@Base+0x4ec>
   17bd8:	mov	r1, r8
   17bdc:	bl	178f8 <fts_children@@Base+0x1d4>
   17be0:	mov	r7, r0
   17be4:	bl	1154c <__errno_location@plt>
   17be8:	cmp	sl, r9
   17bec:	mov	fp, r0
   17bf0:	ldr	r9, [r0]
   17bf4:	beq	17c00 <fts_children@@Base+0x4dc>
   17bf8:	mov	r0, sl
   17bfc:	bl	11360 <free@plt>
   17c00:	cmn	r7, #1
   17c04:	bne	17c7c <fts_children@@Base+0x558>
   17c08:	cmp	r9, #20
   17c0c:	bne	17cb0 <fts_children@@Base+0x58c>
   17c10:	add	r3, sp, #12
   17c14:	mov	r0, r3
   17c18:	str	r3, [sp, #4]
   17c1c:	bl	195d4 <fts_children@@Base+0x1eb0>
   17c20:	cmp	r0, #0
   17c24:	bne	17d50 <fts_children@@Base+0x62c>
   17c28:	cmp	r4, #0
   17c2c:	blt	17c3c <fts_children@@Base+0x518>
   17c30:	ldr	r3, [sp, #12]
   17c34:	cmp	r3, r4
   17c38:	beq	17d24 <fts_children@@Base+0x600>
   17c3c:	mov	r0, r4
   17c40:	bl	11630 <fchdir@plt>
   17c44:	cmp	r0, #0
   17c48:	bne	17d04 <fts_children@@Base+0x5e0>
   17c4c:	mov	r1, r8
   17c50:	mov	r0, r5
   17c54:	bl	178f8 <fts_children@@Base+0x1d4>
   17c58:	cmn	r0, #1
   17c5c:	mov	r7, r0
   17c60:	beq	17cd4 <fts_children@@Base+0x5b0>
   17c64:	ldr	r0, [sp, #4]
   17c68:	bl	19628 <fts_children@@Base+0x1f04>
   17c6c:	cmp	r0, #0
   17c70:	bne	17d44 <fts_children@@Base+0x620>
   17c74:	ldr	r0, [sp, #4]
   17c78:	bl	19644 <fts_children@@Base+0x1f20>
   17c7c:	ldr	r2, [sp, #4052]	; 0xfd4
   17c80:	ldr	r3, [r6]
   17c84:	mov	r0, r7
   17c88:	cmp	r2, r3
   17c8c:	bne	17d40 <fts_children@@Base+0x61c>
   17c90:	add	sp, sp, #4048	; 0xfd0
   17c94:	add	sp, sp, #12
   17c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c9c:	mov	r1, r8
   17ca0:	mov	r0, r5
   17ca4:	bl	178f8 <fts_children@@Base+0x1d4>
   17ca8:	mov	r7, r0
   17cac:	b	17c7c <fts_children@@Base+0x558>
   17cb0:	sub	r3, r9, #1
   17cb4:	cmp	r9, #13
   17cb8:	cmpne	r3, #1
   17cbc:	bls	17c10 <fts_children@@Base+0x4ec>
   17cc0:	cmp	r9, #38	; 0x26
   17cc4:	cmpne	r9, #95	; 0x5f
   17cc8:	strne	r9, [fp]
   17ccc:	beq	17c10 <fts_children@@Base+0x4ec>
   17cd0:	b	17c7c <fts_children@@Base+0x558>
   17cd4:	bl	1154c <__errno_location@plt>
   17cd8:	mov	r4, r0
   17cdc:	ldr	r0, [sp, #4]
   17ce0:	ldr	r5, [r4]
   17ce4:	bl	19628 <fts_children@@Base+0x1f04>
   17ce8:	cmp	r0, #0
   17cec:	bne	17d44 <fts_children@@Base+0x620>
   17cf0:	ldr	r0, [sp, #4]
   17cf4:	bl	19644 <fts_children@@Base+0x1f20>
   17cf8:	cmp	r5, #0
   17cfc:	strne	r5, [r4]
   17d00:	b	17c7c <fts_children@@Base+0x558>
   17d04:	bl	1154c <__errno_location@plt>
   17d08:	mvn	r7, #0
   17d0c:	mov	r4, r0
   17d10:	ldr	r0, [sp, #4]
   17d14:	ldr	r5, [r4]
   17d18:	bl	19644 <fts_children@@Base+0x1f20>
   17d1c:	str	r5, [r4]
   17d20:	b	17c7c <fts_children@@Base+0x558>
   17d24:	ldr	r0, [sp, #4]
   17d28:	bl	19644 <fts_children@@Base+0x1f20>
   17d2c:	bl	1154c <__errno_location@plt>
   17d30:	mov	r3, #9
   17d34:	mvn	r7, #0
   17d38:	str	r3, [r0]
   17d3c:	b	17c7c <fts_children@@Base+0x558>
   17d40:	bl	113c0 <__stack_chk_fail@plt>
   17d44:	bl	1154c <__errno_location@plt>
   17d48:	ldr	r0, [r0]
   17d4c:	bl	1953c <fts_children@@Base+0x1e18>
   17d50:	bl	1154c <__errno_location@plt>
   17d54:	ldr	r0, [r0]
   17d58:	bl	19500 <fts_children@@Base+0x1ddc>
   17d5c:	andeq	fp, r2, r0, lsl #30
   17d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d64:	sub	sp, sp, #4048	; 0xfd0
   17d68:	ldr	r6, [pc, #456]	; 17f38 <fts_children@@Base+0x814>
   17d6c:	sub	sp, sp, #12
   17d70:	cmn	r0, #100	; 0x64
   17d74:	ldr	r3, [r6]
   17d78:	mov	r5, r1
   17d7c:	mov	r8, r2
   17d80:	str	r3, [sp, #4052]	; 0xfd4
   17d84:	beq	17e78 <fts_children@@Base+0x754>
   17d88:	ldrb	r3, [r1]
   17d8c:	cmp	r3, #47	; 0x2f
   17d90:	beq	17e78 <fts_children@@Base+0x754>
   17d94:	mov	r4, r0
   17d98:	add	r9, sp, #20
   17d9c:	mov	r2, r1
   17da0:	mov	r0, r9
   17da4:	mov	r1, r4
   17da8:	bl	19c90 <fts_children@@Base+0x256c>
   17dac:	subs	sl, r0, #0
   17db0:	beq	17dec <fts_children@@Base+0x6c8>
   17db4:	mov	r1, r8
   17db8:	bl	115ac <setfilecon@plt>
   17dbc:	mov	r7, r0
   17dc0:	bl	1154c <__errno_location@plt>
   17dc4:	cmp	sl, r9
   17dc8:	mov	fp, r0
   17dcc:	ldr	r9, [r0]
   17dd0:	beq	17ddc <fts_children@@Base+0x6b8>
   17dd4:	mov	r0, sl
   17dd8:	bl	11360 <free@plt>
   17ddc:	cmn	r7, #1
   17de0:	bne	17e58 <fts_children@@Base+0x734>
   17de4:	cmp	r9, #20
   17de8:	bne	17e8c <fts_children@@Base+0x768>
   17dec:	add	r3, sp, #12
   17df0:	mov	r0, r3
   17df4:	str	r3, [sp, #4]
   17df8:	bl	195d4 <fts_children@@Base+0x1eb0>
   17dfc:	cmp	r0, #0
   17e00:	bne	17f2c <fts_children@@Base+0x808>
   17e04:	cmp	r4, #0
   17e08:	blt	17e18 <fts_children@@Base+0x6f4>
   17e0c:	ldr	r3, [sp, #12]
   17e10:	cmp	r3, r4
   17e14:	beq	17f00 <fts_children@@Base+0x7dc>
   17e18:	mov	r0, r4
   17e1c:	bl	11630 <fchdir@plt>
   17e20:	cmp	r0, #0
   17e24:	bne	17ee0 <fts_children@@Base+0x7bc>
   17e28:	mov	r1, r8
   17e2c:	mov	r0, r5
   17e30:	bl	115ac <setfilecon@plt>
   17e34:	cmn	r0, #1
   17e38:	mov	r7, r0
   17e3c:	beq	17eb0 <fts_children@@Base+0x78c>
   17e40:	ldr	r0, [sp, #4]
   17e44:	bl	19628 <fts_children@@Base+0x1f04>
   17e48:	cmp	r0, #0
   17e4c:	bne	17f20 <fts_children@@Base+0x7fc>
   17e50:	ldr	r0, [sp, #4]
   17e54:	bl	19644 <fts_children@@Base+0x1f20>
   17e58:	ldr	r2, [sp, #4052]	; 0xfd4
   17e5c:	ldr	r3, [r6]
   17e60:	mov	r0, r7
   17e64:	cmp	r2, r3
   17e68:	bne	17f1c <fts_children@@Base+0x7f8>
   17e6c:	add	sp, sp, #4048	; 0xfd0
   17e70:	add	sp, sp, #12
   17e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e78:	mov	r1, r8
   17e7c:	mov	r0, r5
   17e80:	bl	115ac <setfilecon@plt>
   17e84:	mov	r7, r0
   17e88:	b	17e58 <fts_children@@Base+0x734>
   17e8c:	sub	r3, r9, #1
   17e90:	cmp	r9, #13
   17e94:	cmpne	r3, #1
   17e98:	bls	17dec <fts_children@@Base+0x6c8>
   17e9c:	cmp	r9, #38	; 0x26
   17ea0:	cmpne	r9, #95	; 0x5f
   17ea4:	strne	r9, [fp]
   17ea8:	beq	17dec <fts_children@@Base+0x6c8>
   17eac:	b	17e58 <fts_children@@Base+0x734>
   17eb0:	bl	1154c <__errno_location@plt>
   17eb4:	mov	r4, r0
   17eb8:	ldr	r0, [sp, #4]
   17ebc:	ldr	r5, [r4]
   17ec0:	bl	19628 <fts_children@@Base+0x1f04>
   17ec4:	cmp	r0, #0
   17ec8:	bne	17f20 <fts_children@@Base+0x7fc>
   17ecc:	ldr	r0, [sp, #4]
   17ed0:	bl	19644 <fts_children@@Base+0x1f20>
   17ed4:	cmp	r5, #0
   17ed8:	strne	r5, [r4]
   17edc:	b	17e58 <fts_children@@Base+0x734>
   17ee0:	bl	1154c <__errno_location@plt>
   17ee4:	mvn	r7, #0
   17ee8:	mov	r4, r0
   17eec:	ldr	r0, [sp, #4]
   17ef0:	ldr	r5, [r4]
   17ef4:	bl	19644 <fts_children@@Base+0x1f20>
   17ef8:	str	r5, [r4]
   17efc:	b	17e58 <fts_children@@Base+0x734>
   17f00:	ldr	r0, [sp, #4]
   17f04:	bl	19644 <fts_children@@Base+0x1f20>
   17f08:	bl	1154c <__errno_location@plt>
   17f0c:	mov	r3, #9
   17f10:	mvn	r7, #0
   17f14:	str	r3, [r0]
   17f18:	b	17e58 <fts_children@@Base+0x734>
   17f1c:	bl	113c0 <__stack_chk_fail@plt>
   17f20:	bl	1154c <__errno_location@plt>
   17f24:	ldr	r0, [r0]
   17f28:	bl	1953c <fts_children@@Base+0x1e18>
   17f2c:	bl	1154c <__errno_location@plt>
   17f30:	ldr	r0, [r0]
   17f34:	bl	19500 <fts_children@@Base+0x1ddc>
   17f38:	andeq	fp, r2, r0, lsl #30
   17f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f40:	sub	sp, sp, #4048	; 0xfd0
   17f44:	ldr	r6, [pc, #456]	; 18114 <fts_children@@Base+0x9f0>
   17f48:	sub	sp, sp, #12
   17f4c:	cmn	r0, #100	; 0x64
   17f50:	ldr	r3, [r6]
   17f54:	mov	r5, r1
   17f58:	mov	r8, r2
   17f5c:	str	r3, [sp, #4052]	; 0xfd4
   17f60:	beq	18054 <fts_children@@Base+0x930>
   17f64:	ldrb	r3, [r1]
   17f68:	cmp	r3, #47	; 0x2f
   17f6c:	beq	18054 <fts_children@@Base+0x930>
   17f70:	mov	r4, r0
   17f74:	add	r9, sp, #20
   17f78:	mov	r2, r1
   17f7c:	mov	r0, r9
   17f80:	mov	r1, r4
   17f84:	bl	19c90 <fts_children@@Base+0x256c>
   17f88:	subs	sl, r0, #0
   17f8c:	beq	17fc8 <fts_children@@Base+0x8a4>
   17f90:	mov	r1, r8
   17f94:	bl	11348 <lsetfilecon@plt>
   17f98:	mov	r7, r0
   17f9c:	bl	1154c <__errno_location@plt>
   17fa0:	cmp	sl, r9
   17fa4:	mov	fp, r0
   17fa8:	ldr	r9, [r0]
   17fac:	beq	17fb8 <fts_children@@Base+0x894>
   17fb0:	mov	r0, sl
   17fb4:	bl	11360 <free@plt>
   17fb8:	cmn	r7, #1
   17fbc:	bne	18034 <fts_children@@Base+0x910>
   17fc0:	cmp	r9, #20
   17fc4:	bne	18068 <fts_children@@Base+0x944>
   17fc8:	add	r3, sp, #12
   17fcc:	mov	r0, r3
   17fd0:	str	r3, [sp, #4]
   17fd4:	bl	195d4 <fts_children@@Base+0x1eb0>
   17fd8:	cmp	r0, #0
   17fdc:	bne	18108 <fts_children@@Base+0x9e4>
   17fe0:	cmp	r4, #0
   17fe4:	blt	17ff4 <fts_children@@Base+0x8d0>
   17fe8:	ldr	r3, [sp, #12]
   17fec:	cmp	r3, r4
   17ff0:	beq	180dc <fts_children@@Base+0x9b8>
   17ff4:	mov	r0, r4
   17ff8:	bl	11630 <fchdir@plt>
   17ffc:	cmp	r0, #0
   18000:	bne	180bc <fts_children@@Base+0x998>
   18004:	mov	r1, r8
   18008:	mov	r0, r5
   1800c:	bl	11348 <lsetfilecon@plt>
   18010:	cmn	r0, #1
   18014:	mov	r7, r0
   18018:	beq	1808c <fts_children@@Base+0x968>
   1801c:	ldr	r0, [sp, #4]
   18020:	bl	19628 <fts_children@@Base+0x1f04>
   18024:	cmp	r0, #0
   18028:	bne	180fc <fts_children@@Base+0x9d8>
   1802c:	ldr	r0, [sp, #4]
   18030:	bl	19644 <fts_children@@Base+0x1f20>
   18034:	ldr	r2, [sp, #4052]	; 0xfd4
   18038:	ldr	r3, [r6]
   1803c:	mov	r0, r7
   18040:	cmp	r2, r3
   18044:	bne	180f8 <fts_children@@Base+0x9d4>
   18048:	add	sp, sp, #4048	; 0xfd0
   1804c:	add	sp, sp, #12
   18050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18054:	mov	r1, r8
   18058:	mov	r0, r5
   1805c:	bl	11348 <lsetfilecon@plt>
   18060:	mov	r7, r0
   18064:	b	18034 <fts_children@@Base+0x910>
   18068:	sub	r3, r9, #1
   1806c:	cmp	r9, #13
   18070:	cmpne	r3, #1
   18074:	bls	17fc8 <fts_children@@Base+0x8a4>
   18078:	cmp	r9, #38	; 0x26
   1807c:	cmpne	r9, #95	; 0x5f
   18080:	strne	r9, [fp]
   18084:	beq	17fc8 <fts_children@@Base+0x8a4>
   18088:	b	18034 <fts_children@@Base+0x910>
   1808c:	bl	1154c <__errno_location@plt>
   18090:	mov	r4, r0
   18094:	ldr	r0, [sp, #4]
   18098:	ldr	r5, [r4]
   1809c:	bl	19628 <fts_children@@Base+0x1f04>
   180a0:	cmp	r0, #0
   180a4:	bne	180fc <fts_children@@Base+0x9d8>
   180a8:	ldr	r0, [sp, #4]
   180ac:	bl	19644 <fts_children@@Base+0x1f20>
   180b0:	cmp	r5, #0
   180b4:	strne	r5, [r4]
   180b8:	b	18034 <fts_children@@Base+0x910>
   180bc:	bl	1154c <__errno_location@plt>
   180c0:	mvn	r7, #0
   180c4:	mov	r4, r0
   180c8:	ldr	r0, [sp, #4]
   180cc:	ldr	r5, [r4]
   180d0:	bl	19644 <fts_children@@Base+0x1f20>
   180d4:	str	r5, [r4]
   180d8:	b	18034 <fts_children@@Base+0x910>
   180dc:	ldr	r0, [sp, #4]
   180e0:	bl	19644 <fts_children@@Base+0x1f20>
   180e4:	bl	1154c <__errno_location@plt>
   180e8:	mov	r3, #9
   180ec:	mvn	r7, #0
   180f0:	str	r3, [r0]
   180f4:	b	18034 <fts_children@@Base+0x910>
   180f8:	bl	113c0 <__stack_chk_fail@plt>
   180fc:	bl	1154c <__errno_location@plt>
   18100:	ldr	r0, [r0]
   18104:	bl	1953c <fts_children@@Base+0x1e18>
   18108:	bl	1154c <__errno_location@plt>
   1810c:	ldr	r0, [r0]
   18110:	bl	19500 <fts_children@@Base+0x1ddc>
   18114:	andeq	fp, r2, r0, lsl #30
   18118:	push	{r4, r5, r6, lr}
   1811c:	mov	r4, r0
   18120:	bl	1145c <__fpending@plt>
   18124:	ldr	r5, [r4]
   18128:	and	r5, r5, #32
   1812c:	mov	r6, r0
   18130:	mov	r0, r4
   18134:	bl	199a4 <fts_children@@Base+0x2280>
   18138:	cmp	r5, #0
   1813c:	mov	r4, r0
   18140:	bne	1816c <fts_children@@Base+0xa48>
   18144:	cmp	r0, #0
   18148:	beq	18164 <fts_children@@Base+0xa40>
   1814c:	cmp	r6, #0
   18150:	bne	18184 <fts_children@@Base+0xa60>
   18154:	bl	1154c <__errno_location@plt>
   18158:	ldr	r4, [r0]
   1815c:	subs	r4, r4, #9
   18160:	mvnne	r4, #0
   18164:	mov	r0, r4
   18168:	pop	{r4, r5, r6, pc}
   1816c:	cmp	r0, #0
   18170:	bne	18184 <fts_children@@Base+0xa60>
   18174:	bl	1154c <__errno_location@plt>
   18178:	str	r4, [r0]
   1817c:	mvn	r4, #0
   18180:	b	18164 <fts_children@@Base+0xa40>
   18184:	mvn	r4, #0
   18188:	b	18164 <fts_children@@Base+0xa40>
   1818c:	push	{r4, r5}
   18190:	mov	r4, #0
   18194:	mov	r5, #0
   18198:	ldr	r3, [pc, #12]	; 181ac <fts_children@@Base+0xa88>
   1819c:	strd	r4, [r0, #16]
   181a0:	str	r3, [r0, #24]
   181a4:	pop	{r4, r5}
   181a8:	bx	lr
   181ac:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   181b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181b4:	ldr	r2, [r0, #24]
   181b8:	ldr	r3, [pc, #180]	; 18274 <fts_children@@Base+0xb50>
   181bc:	cmp	r2, r3
   181c0:	bne	18260 <fts_children@@Base+0xb3c>
   181c4:	ldrd	r6, [r0, #16]
   181c8:	ldrd	sl, [r1, #96]	; 0x60
   181cc:	orrs	r3, r6, r7
   181d0:	beq	1820c <fts_children@@Base+0xae8>
   181d4:	ldrd	r2, [r0]
   181d8:	cmp	r3, fp
   181dc:	cmpeq	r2, sl
   181e0:	beq	18230 <fts_children@@Base+0xb0c>
   181e4:	adds	r8, r6, #1
   181e8:	adc	r9, r7, #0
   181ec:	and	r2, r6, r8
   181f0:	and	r3, r7, r9
   181f4:	orrs	r3, r2, r3
   181f8:	strd	r8, [r0, #16]
   181fc:	movne	r1, #0
   18200:	beq	18250 <fts_children@@Base+0xb2c>
   18204:	mov	r0, r1
   18208:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1820c:	mov	r2, #1
   18210:	mov	r3, #0
   18214:	strd	r2, [r0, #16]
   18218:	ldrd	r2, [r1]
   1821c:	mov	r1, #0
   18220:	strd	sl, [r0]
   18224:	strd	r2, [r0, #8]
   18228:	mov	r0, r1
   1822c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18230:	ldrd	r4, [r1]
   18234:	ldrd	r2, [r0, #8]
   18238:	cmp	r5, r3
   1823c:	cmpeq	r4, r2
   18240:	bne	181e4 <fts_children@@Base+0xac0>
   18244:	mov	r1, #1
   18248:	mov	r0, r1
   1824c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18250:	orrs	r3, r8, r9
   18254:	bne	18218 <fts_children@@Base+0xaf4>
   18258:	mov	r1, #1
   1825c:	b	18248 <fts_children@@Base+0xb24>
   18260:	ldr	r3, [pc, #16]	; 18278 <fts_children@@Base+0xb54>
   18264:	mov	r2, #60	; 0x3c
   18268:	ldr	r1, [pc, #12]	; 1827c <fts_children@@Base+0xb58>
   1826c:	ldr	r0, [pc, #12]	; 18280 <fts_children@@Base+0xb5c>
   18270:	bl	116cc <__assert_fail@plt>
   18274:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18278:	ldrdeq	fp, [r1], -r8
   1827c:	andeq	fp, r1, r4, ror #9
   18280:	strdeq	fp, [r1], -r8
   18284:	push	{r1, r2, r3}
   18288:	push	{r4, lr}
   1828c:	sub	sp, sp, #12
   18290:	ldr	r4, [pc, #68]	; 182dc <fts_children@@Base+0xbb8>
   18294:	ldr	r1, [sp, #20]
   18298:	ldr	r3, [r4]
   1829c:	ands	r2, r1, #64	; 0x40
   182a0:	str	r3, [sp, #4]
   182a4:	ldrne	r2, [sp, #24]
   182a8:	addne	r3, sp, #24
   182ac:	strne	r3, [sp]
   182b0:	bl	1148c <open64@plt>
   182b4:	bl	19668 <fts_children@@Base+0x1f44>
   182b8:	ldr	r2, [sp, #4]
   182bc:	ldr	r3, [r4]
   182c0:	cmp	r2, r3
   182c4:	bne	182d8 <fts_children@@Base+0xbb4>
   182c8:	add	sp, sp, #12
   182cc:	pop	{r4, lr}
   182d0:	add	sp, sp, #12
   182d4:	bx	lr
   182d8:	bl	113c0 <__stack_chk_fail@plt>
   182dc:	andeq	fp, r2, r0, lsl #30
   182e0:	push	{r4, lr}
   182e4:	mov	r1, #0
   182e8:	bl	115e8 <setlocale@plt>
   182ec:	subs	r4, r0, #0
   182f0:	beq	1831c <fts_children@@Base+0xbf8>
   182f4:	ldr	r1, [pc, #40]	; 18324 <fts_children@@Base+0xc00>
   182f8:	bl	11330 <strcmp@plt>
   182fc:	cmp	r0, #0
   18300:	popeq	{r4, pc}
   18304:	mov	r0, r4
   18308:	ldr	r1, [pc, #24]	; 18328 <fts_children@@Base+0xc04>
   1830c:	bl	11330 <strcmp@plt>
   18310:	adds	r0, r0, #0
   18314:	movne	r0, #1
   18318:	pop	{r4, pc}
   1831c:	mov	r0, #1
   18320:	pop	{r4, pc}
   18324:	andeq	fp, r1, r0, lsl r5
   18328:	andeq	fp, r1, r4, lsl r5
   1832c:	andeq	r0, r0, r0
   18330:	cmp	r0, #10
   18334:	movcc	r0, #10
   18338:	push	{r4, r5, r6, r7, r8, lr}
   1833c:	orr	r7, r0, #1
   18340:	cmn	r7, #1
   18344:	beq	183bc <fts_children@@Base+0xc98>
   18348:	ldr	r8, [pc, #116]	; 183c4 <fts_children@@Base+0xca0>
   1834c:	umull	r2, r3, r8, r7
   18350:	cmp	r7, #9
   18354:	lsr	r3, r3, #1
   18358:	add	r3, r3, r3, lsl #1
   1835c:	sub	r3, r7, r3
   18360:	bls	183a8 <fts_children@@Base+0xc84>
   18364:	cmp	r3, #0
   18368:	beq	183b0 <fts_children@@Base+0xc8c>
   1836c:	mov	r6, #16
   18370:	mov	r5, #9
   18374:	mov	r4, #3
   18378:	b	18388 <fts_children@@Base+0xc64>
   1837c:	cmp	r1, #0
   18380:	add	r6, r6, #8
   18384:	beq	183b0 <fts_children@@Base+0xc8c>
   18388:	add	r4, r4, #2
   1838c:	mov	r1, r4
   18390:	mov	r0, r7
   18394:	bl	19fb4 <fts_children@@Base+0x2890>
   18398:	add	r5, r5, r6
   1839c:	cmp	r5, r7
   183a0:	mov	r3, r1
   183a4:	bcc	1837c <fts_children@@Base+0xc58>
   183a8:	cmp	r3, #0
   183ac:	bne	183bc <fts_children@@Base+0xc98>
   183b0:	add	r7, r7, #2
   183b4:	cmn	r7, #1
   183b8:	bne	1834c <fts_children@@Base+0xc28>
   183bc:	mov	r0, r7
   183c0:	pop	{r4, r5, r6, r7, r8, pc}
   183c4:	bge	feac2e78 <optarg@@GLIBC_2.4+0xfea96cb8>
   183c8:	push	{r4, lr}
   183cc:	ror	r0, r0, #3
   183d0:	bl	19fb4 <fts_children@@Base+0x2890>
   183d4:	mov	r0, r1
   183d8:	pop	{r4, pc}
   183dc:	sub	r0, r1, r0
   183e0:	clz	r0, r0
   183e4:	lsr	r0, r0, #5
   183e8:	bx	lr
   183ec:	push	{r4, lr}
   183f0:	mov	r4, r0
   183f4:	mov	r0, r1
   183f8:	ldr	r3, [r4, #24]
   183fc:	ldr	r1, [r4, #8]
   18400:	blx	r3
   18404:	ldr	r3, [r4, #8]
   18408:	cmp	r3, r0
   1840c:	bls	1841c <fts_children@@Base+0xcf8>
   18410:	ldr	r3, [r4]
   18414:	add	r0, r3, r0, lsl #3
   18418:	pop	{r4, pc}
   1841c:	bl	11690 <abort@plt>
   18420:	push	{r4, r5, r6, r7, r8, lr}
   18424:	mov	r8, r2
   18428:	mov	r5, r1
   1842c:	mov	r7, r3
   18430:	mov	r6, r0
   18434:	bl	183ec <fts_children@@Base+0xcc8>
   18438:	str	r0, [r8]
   1843c:	ldr	r1, [r0]
   18440:	cmp	r1, #0
   18444:	beq	1852c <fts_children@@Base+0xe08>
   18448:	cmp	r1, r5
   1844c:	mov	r4, r0
   18450:	beq	184f0 <fts_children@@Base+0xdcc>
   18454:	ldr	r3, [r6, #28]
   18458:	mov	r0, r5
   1845c:	blx	r3
   18460:	cmp	r0, #0
   18464:	ldrne	r3, [r4]
   18468:	bne	184f4 <fts_children@@Base+0xdd0>
   1846c:	ldr	r2, [r4, #4]
   18470:	cmp	r2, #0
   18474:	beq	1852c <fts_children@@Base+0xe08>
   18478:	ldr	r3, [r2]
   1847c:	cmp	r5, r3
   18480:	bne	184a4 <fts_children@@Base+0xd80>
   18484:	b	184c4 <fts_children@@Base+0xda0>
   18488:	ldr	r4, [r4, #4]
   1848c:	ldr	r2, [r4, #4]
   18490:	cmp	r2, #0
   18494:	beq	1852c <fts_children@@Base+0xe08>
   18498:	ldr	r3, [r2]
   1849c:	cmp	r3, r5
   184a0:	beq	184c4 <fts_children@@Base+0xda0>
   184a4:	mov	r1, r3
   184a8:	mov	r0, r5
   184ac:	ldr	r3, [r6, #28]
   184b0:	blx	r3
   184b4:	cmp	r0, #0
   184b8:	beq	18488 <fts_children@@Base+0xd64>
   184bc:	ldr	r2, [r4, #4]
   184c0:	ldr	r3, [r2]
   184c4:	cmp	r7, #0
   184c8:	beq	18524 <fts_children@@Base+0xe00>
   184cc:	ldr	r0, [r2, #4]
   184d0:	mov	r1, #0
   184d4:	str	r0, [r4, #4]
   184d8:	str	r1, [r2]
   184dc:	ldr	r1, [r6, #36]	; 0x24
   184e0:	mov	r0, r3
   184e4:	str	r1, [r2, #4]
   184e8:	str	r2, [r6, #36]	; 0x24
   184ec:	pop	{r4, r5, r6, r7, r8, pc}
   184f0:	mov	r3, r1
   184f4:	cmp	r7, #0
   184f8:	beq	18524 <fts_children@@Base+0xe00>
   184fc:	ldr	r2, [r4, #4]
   18500:	cmp	r2, #0
   18504:	movne	ip, #0
   18508:	ldmne	r2, {r0, r1}
   1850c:	streq	r2, [r4]
   18510:	stmne	r4, {r0, r1}
   18514:	strne	ip, [r2]
   18518:	ldrne	r1, [r6, #36]	; 0x24
   1851c:	strne	r1, [r2, #4]
   18520:	strne	r2, [r6, #36]	; 0x24
   18524:	mov	r0, r3
   18528:	pop	{r4, r5, r6, r7, r8, pc}
   1852c:	mov	r3, #0
   18530:	mov	r0, r3
   18534:	pop	{r4, r5, r6, r7, r8, pc}
   18538:	ldr	r2, [pc, #164]	; 185e4 <fts_children@@Base+0xec0>
   1853c:	ldr	r3, [r0]
   18540:	cmp	r3, r2
   18544:	beq	185cc <fts_children@@Base+0xea8>
   18548:	vldr	s15, [r3, #8]
   1854c:	vldr	s14, [pc, #128]	; 185d4 <fts_children@@Base+0xeb0>
   18550:	vcmpe.f32	s15, s14
   18554:	vmrs	APSR_nzcv, fpscr
   18558:	ble	185c0 <fts_children@@Base+0xe9c>
   1855c:	vldr	s13, [pc, #116]	; 185d8 <fts_children@@Base+0xeb4>
   18560:	vcmpe.f32	s15, s13
   18564:	vmrs	APSR_nzcv, fpscr
   18568:	bpl	185c0 <fts_children@@Base+0xe9c>
   1856c:	vldr	s13, [pc, #104]	; 185dc <fts_children@@Base+0xeb8>
   18570:	vldr	s12, [r3, #12]
   18574:	vcmpe.f32	s12, s13
   18578:	vmrs	APSR_nzcv, fpscr
   1857c:	ble	185c0 <fts_children@@Base+0xe9c>
   18580:	vldr	s13, [r3]
   18584:	vcmpe.f32	s13, #0.0
   18588:	vmrs	APSR_nzcv, fpscr
   1858c:	blt	185c0 <fts_children@@Base+0xe9c>
   18590:	vadd.f32	s14, s13, s14
   18594:	vldr	s13, [r3, #4]
   18598:	vcmpe.f32	s14, s13
   1859c:	vmrs	APSR_nzcv, fpscr
   185a0:	bpl	185c0 <fts_children@@Base+0xe9c>
   185a4:	vldr	s12, [pc, #52]	; 185e0 <fts_children@@Base+0xebc>
   185a8:	vcmpe.f32	s13, s12
   185ac:	vmrs	APSR_nzcv, fpscr
   185b0:	bhi	185c0 <fts_children@@Base+0xe9c>
   185b4:	vcmpe.f32	s15, s14
   185b8:	vmrs	APSR_nzcv, fpscr
   185bc:	bgt	185cc <fts_children@@Base+0xea8>
   185c0:	str	r2, [r0]
   185c4:	mov	r0, #0
   185c8:	bx	lr
   185cc:	mov	r0, #1
   185d0:	bx	lr
   185d4:	stclcc	12, cr12, [ip, #820]	; 0x334
   185d8:	svccc	0x00666666
   185dc:	svccc	0x008ccccd
   185e0:	svccc	0x00800000
   185e4:	andeq	fp, r1, ip, lsl r5
   185e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   185ec:	ldr	r3, [r1, #4]
   185f0:	ldr	r6, [r1]
   185f4:	cmp	r6, r3
   185f8:	bcs	186c0 <fts_children@@Base+0xf9c>
   185fc:	mov	r8, r2
   18600:	mov	r5, r0
   18604:	mov	r7, r1
   18608:	add	r6, r6, #8
   1860c:	mov	r9, #0
   18610:	b	18620 <fts_children@@Base+0xefc>
   18614:	cmp	r3, r6
   18618:	add	r6, r6, #8
   1861c:	bls	186c0 <fts_children@@Base+0xf9c>
   18620:	ldr	sl, [r6, #-8]
   18624:	cmp	sl, #0
   18628:	beq	18614 <fts_children@@Base+0xef0>
   1862c:	ldr	r4, [r6, #-4]
   18630:	cmp	r4, #0
   18634:	bne	18654 <fts_children@@Base+0xf30>
   18638:	b	186a4 <fts_children@@Base+0xf80>
   1863c:	ldr	r2, [r0, #4]
   18640:	cmp	r3, #0
   18644:	str	r2, [r4, #4]
   18648:	str	r4, [r0, #4]
   1864c:	mov	r4, r3
   18650:	beq	186a0 <fts_children@@Base+0xf7c>
   18654:	ldr	sl, [r4]
   18658:	mov	r0, r5
   1865c:	mov	r1, sl
   18660:	bl	183ec <fts_children@@Base+0xcc8>
   18664:	ldr	r3, [r4, #4]
   18668:	ldr	r2, [r0]
   1866c:	cmp	r2, #0
   18670:	bne	1863c <fts_children@@Base+0xf18>
   18674:	ldr	r1, [r5, #12]
   18678:	str	sl, [r0]
   1867c:	add	r1, r1, #1
   18680:	str	r1, [r5, #12]
   18684:	str	r2, [r4]
   18688:	ldr	r2, [r5, #36]	; 0x24
   1868c:	cmp	r3, #0
   18690:	str	r2, [r4, #4]
   18694:	str	r4, [r5, #36]	; 0x24
   18698:	mov	r4, r3
   1869c:	bne	18654 <fts_children@@Base+0xf30>
   186a0:	ldr	sl, [r6, #-8]
   186a4:	cmp	r8, #0
   186a8:	str	r9, [r6, #-4]
   186ac:	beq	186c8 <fts_children@@Base+0xfa4>
   186b0:	ldr	r3, [r7, #4]
   186b4:	cmp	r3, r6
   186b8:	add	r6, r6, #8
   186bc:	bhi	18620 <fts_children@@Base+0xefc>
   186c0:	mov	r0, #1
   186c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   186c8:	mov	r1, sl
   186cc:	mov	r0, r5
   186d0:	bl	183ec <fts_children@@Base+0xcc8>
   186d4:	ldr	r3, [r0]
   186d8:	mov	r4, r0
   186dc:	cmp	r3, #0
   186e0:	beq	18720 <fts_children@@Base+0xffc>
   186e4:	ldr	r0, [r5, #36]	; 0x24
   186e8:	cmp	r0, #0
   186ec:	beq	18734 <fts_children@@Base+0x1010>
   186f0:	ldr	r3, [r0, #4]
   186f4:	str	r3, [r5, #36]	; 0x24
   186f8:	ldr	r3, [r4, #4]
   186fc:	str	sl, [r0]
   18700:	str	r3, [r0, #4]
   18704:	str	r0, [r4, #4]
   18708:	ldr	r2, [r7, #12]
   1870c:	str	r9, [r6, #-8]
   18710:	sub	r2, r2, #1
   18714:	ldr	r3, [r7, #4]
   18718:	str	r2, [r7, #12]
   1871c:	b	18614 <fts_children@@Base+0xef0>
   18720:	ldr	r3, [r5, #12]
   18724:	str	sl, [r0]
   18728:	add	r3, r3, #1
   1872c:	str	r3, [r5, #12]
   18730:	b	18708 <fts_children@@Base+0xfe4>
   18734:	mov	r0, #8
   18738:	bl	114a4 <malloc@plt>
   1873c:	cmp	r0, #0
   18740:	bne	186f8 <fts_children@@Base+0xfd4>
   18744:	mov	r0, r8
   18748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1874c:	ldr	r0, [r0, #8]
   18750:	bx	lr
   18754:	ldr	r0, [r0, #12]
   18758:	bx	lr
   1875c:	ldr	r0, [r0, #16]
   18760:	bx	lr
   18764:	ldm	r0, {r1, r3}
   18768:	cmp	r1, r3
   1876c:	bcs	187d4 <fts_children@@Base+0x10b0>
   18770:	sub	ip, r3, #1
   18774:	sub	ip, ip, r1
   18778:	add	r3, r1, #16
   1877c:	bic	ip, ip, #7
   18780:	add	ip, ip, r3
   18784:	add	r1, r1, #8
   18788:	mov	r0, #0
   1878c:	b	1879c <fts_children@@Base+0x1078>
   18790:	add	r1, r1, #8
   18794:	cmp	r1, ip
   18798:	bxeq	lr
   1879c:	ldr	r3, [r1, #-8]
   187a0:	cmp	r3, #0
   187a4:	beq	18790 <fts_children@@Base+0x106c>
   187a8:	ldr	r3, [r1, #-4]
   187ac:	mov	r2, #1
   187b0:	cmp	r3, #0
   187b4:	beq	187c8 <fts_children@@Base+0x10a4>
   187b8:	ldr	r3, [r3, #4]
   187bc:	add	r2, r2, #1
   187c0:	cmp	r3, #0
   187c4:	bne	187b8 <fts_children@@Base+0x1094>
   187c8:	cmp	r0, r2
   187cc:	movcc	r0, r2
   187d0:	b	18790 <fts_children@@Base+0x106c>
   187d4:	mov	r0, #0
   187d8:	bx	lr
   187dc:	ldm	r0, {r1, r3}
   187e0:	push	{lr}		; (str lr, [sp, #-4]!)
   187e4:	cmp	r1, r3
   187e8:	bcs	18878 <fts_children@@Base+0x1154>
   187ec:	sub	ip, r3, #1
   187f0:	sub	ip, ip, r1
   187f4:	add	r3, r1, #16
   187f8:	bic	ip, ip, #7
   187fc:	mov	r2, #0
   18800:	add	ip, ip, r3
   18804:	add	r1, r1, #8
   18808:	mov	lr, r2
   1880c:	b	1881c <fts_children@@Base+0x10f8>
   18810:	add	r1, r1, #8
   18814:	cmp	r1, ip
   18818:	beq	18858 <fts_children@@Base+0x1134>
   1881c:	ldr	r3, [r1, #-8]
   18820:	cmp	r3, #0
   18824:	beq	18810 <fts_children@@Base+0x10ec>
   18828:	ldr	r3, [r1, #-4]
   1882c:	add	lr, lr, #1
   18830:	cmp	r3, #0
   18834:	add	r2, r2, #1
   18838:	beq	18810 <fts_children@@Base+0x10ec>
   1883c:	ldr	r3, [r3, #4]
   18840:	add	r2, r2, #1
   18844:	cmp	r3, #0
   18848:	bne	1883c <fts_children@@Base+0x1118>
   1884c:	add	r1, r1, #8
   18850:	cmp	r1, ip
   18854:	bne	1881c <fts_children@@Base+0x10f8>
   18858:	ldr	r3, [r0, #12]
   1885c:	cmp	r3, lr
   18860:	ldreq	r0, [r0, #16]
   18864:	subeq	r0, r0, r2
   18868:	clzeq	r0, r0
   1886c:	lsreq	r0, r0, #5
   18870:	movne	r0, #0
   18874:	pop	{pc}		; (ldr pc, [sp], #4)
   18878:	mov	r2, #0
   1887c:	mov	lr, r2
   18880:	b	18858 <fts_children@@Base+0x1134>
   18884:	push	{r4, r5, r6, r7, lr}
   18888:	mov	r4, r1
   1888c:	ldr	r2, [r0]
   18890:	ldr	r1, [r0, #4]
   18894:	sub	sp, sp, #12
   18898:	cmp	r2, r1
   1889c:	ldr	r3, [r0, #16]
   188a0:	ldrd	r6, [r0, #8]
   188a4:	bcs	18988 <fts_children@@Base+0x1264>
   188a8:	sub	ip, r1, #1
   188ac:	sub	ip, ip, r2
   188b0:	bic	ip, ip, #7
   188b4:	add	r1, r2, #16
   188b8:	add	ip, ip, r1
   188bc:	add	r0, r2, #8
   188c0:	mov	r5, #0
   188c4:	b	188d4 <fts_children@@Base+0x11b0>
   188c8:	add	r0, r0, #8
   188cc:	cmp	r0, ip
   188d0:	beq	18914 <fts_children@@Base+0x11f0>
   188d4:	ldr	r2, [r0, #-8]
   188d8:	cmp	r2, #0
   188dc:	beq	188c8 <fts_children@@Base+0x11a4>
   188e0:	ldr	r2, [r0, #-4]
   188e4:	mov	r1, #1
   188e8:	cmp	r2, #0
   188ec:	beq	18900 <fts_children@@Base+0x11dc>
   188f0:	ldr	r2, [r2, #4]
   188f4:	add	r1, r1, #1
   188f8:	cmp	r2, #0
   188fc:	bne	188f0 <fts_children@@Base+0x11cc>
   18900:	cmp	r5, r1
   18904:	add	r0, r0, #8
   18908:	movcc	r5, r1
   1890c:	cmp	r0, ip
   18910:	bne	188d4 <fts_children@@Base+0x11b0>
   18914:	ldr	r2, [pc, #124]	; 18998 <fts_children@@Base+0x1274>
   18918:	mov	r1, #1
   1891c:	mov	r0, r4
   18920:	bl	11594 <__fprintf_chk@plt>
   18924:	mov	r3, r6
   18928:	ldr	r2, [pc, #108]	; 1899c <fts_children@@Base+0x1278>
   1892c:	mov	r1, #1
   18930:	mov	r0, r4
   18934:	bl	11594 <__fprintf_chk@plt>
   18938:	vmov	s15, r7
   1893c:	vldr	d5, [pc, #76]	; 18990 <fts_children@@Base+0x126c>
   18940:	mov	r3, r7
   18944:	ldr	r2, [pc, #84]	; 189a0 <fts_children@@Base+0x127c>
   18948:	vcvt.f64.u32	d6, s15
   1894c:	vmov	s15, r6
   18950:	mov	r1, #1
   18954:	mov	r0, r4
   18958:	vcvt.f64.u32	d7, s15
   1895c:	vmul.f64	d6, d6, d5
   18960:	vdiv.f64	d5, d6, d7
   18964:	vstr	d5, [sp]
   18968:	bl	11594 <__fprintf_chk@plt>
   1896c:	mov	r3, r5
   18970:	mov	r0, r4
   18974:	ldr	r2, [pc, #40]	; 189a4 <fts_children@@Base+0x1280>
   18978:	mov	r1, #1
   1897c:	add	sp, sp, #12
   18980:	pop	{r4, r5, r6, r7, lr}
   18984:	b	11594 <__fprintf_chk@plt>
   18988:	mov	r5, #0
   1898c:	b	18914 <fts_children@@Base+0x11f0>
   18990:	andeq	r0, r0, r0
   18994:	subsmi	r0, r9, r0
   18998:	andeq	fp, r1, r0, lsr r5
   1899c:	andeq	fp, r1, r8, asr #10
   189a0:	andeq	fp, r1, r0, ror #10
   189a4:	andeq	fp, r1, r4, lsl #11
   189a8:	push	{r4, r5, r6, lr}
   189ac:	mov	r6, r0
   189b0:	mov	r5, r1
   189b4:	bl	183ec <fts_children@@Base+0xcc8>
   189b8:	ldr	r3, [r0]
   189bc:	cmp	r3, #0
   189c0:	beq	189fc <fts_children@@Base+0x12d8>
   189c4:	mov	r4, r0
   189c8:	b	189d0 <fts_children@@Base+0x12ac>
   189cc:	ldr	r3, [r4]
   189d0:	cmp	r3, r5
   189d4:	mov	r1, r3
   189d8:	mov	r0, r5
   189dc:	beq	18a08 <fts_children@@Base+0x12e4>
   189e0:	ldr	r3, [r6, #28]
   189e4:	blx	r3
   189e8:	cmp	r0, #0
   189ec:	bne	18a04 <fts_children@@Base+0x12e0>
   189f0:	ldr	r4, [r4, #4]
   189f4:	cmp	r4, #0
   189f8:	bne	189cc <fts_children@@Base+0x12a8>
   189fc:	mov	r0, #0
   18a00:	pop	{r4, r5, r6, pc}
   18a04:	ldr	r5, [r4]
   18a08:	mov	r0, r5
   18a0c:	pop	{r4, r5, r6, pc}
   18a10:	ldr	r3, [r0, #16]
   18a14:	cmp	r3, #0
   18a18:	beq	18a68 <fts_children@@Base+0x1344>
   18a1c:	ldr	r3, [r0]
   18a20:	ldr	r2, [r0, #4]
   18a24:	cmp	r3, r2
   18a28:	bcs	18a60 <fts_children@@Base+0x133c>
   18a2c:	ldr	r0, [r3]
   18a30:	cmp	r0, #0
   18a34:	bxne	lr
   18a38:	sub	r2, r2, #1
   18a3c:	sub	r2, r2, r3
   18a40:	bic	r2, r2, #7
   18a44:	add	r2, r3, r2
   18a48:	b	18a58 <fts_children@@Base+0x1334>
   18a4c:	ldr	r0, [r3, #8]!
   18a50:	cmp	r0, #0
   18a54:	bxne	lr
   18a58:	cmp	r3, r2
   18a5c:	bne	18a4c <fts_children@@Base+0x1328>
   18a60:	push	{r4, lr}
   18a64:	bl	11690 <abort@plt>
   18a68:	mov	r0, r3
   18a6c:	bx	lr
   18a70:	push	{r4, r5, r6, lr}
   18a74:	mov	r5, r0
   18a78:	mov	r4, r1
   18a7c:	bl	183ec <fts_children@@Base+0xcc8>
   18a80:	mov	r2, r0
   18a84:	mov	r3, r0
   18a88:	b	18a94 <fts_children@@Base+0x1370>
   18a8c:	cmp	r3, #0
   18a90:	beq	18aa8 <fts_children@@Base+0x1384>
   18a94:	ldm	r3, {r1, r3}
   18a98:	cmp	r1, r4
   18a9c:	bne	18a8c <fts_children@@Base+0x1368>
   18aa0:	cmp	r3, #0
   18aa4:	bne	18ad0 <fts_children@@Base+0x13ac>
   18aa8:	ldr	r3, [r5, #4]
   18aac:	b	18abc <fts_children@@Base+0x1398>
   18ab0:	ldr	r0, [r2]
   18ab4:	cmp	r0, #0
   18ab8:	popne	{r4, r5, r6, pc}
   18abc:	add	r2, r2, #8
   18ac0:	cmp	r3, r2
   18ac4:	bhi	18ab0 <fts_children@@Base+0x138c>
   18ac8:	mov	r0, #0
   18acc:	pop	{r4, r5, r6, pc}
   18ad0:	ldr	r0, [r3]
   18ad4:	pop	{r4, r5, r6, pc}
   18ad8:	push	{r4, r5, lr}
   18adc:	ldm	r0, {r5, lr}
   18ae0:	cmp	lr, r5
   18ae4:	bls	18b68 <fts_children@@Base+0x1444>
   18ae8:	mov	ip, #0
   18aec:	ldr	r3, [r5]
   18af0:	cmp	r3, #0
   18af4:	bne	18b10 <fts_children@@Base+0x13ec>
   18af8:	add	r5, r5, #8
   18afc:	cmp	lr, r5
   18b00:	bhi	18aec <fts_children@@Base+0x13c8>
   18b04:	mov	r2, ip
   18b08:	mov	r0, r2
   18b0c:	pop	{r4, r5, pc}
   18b10:	cmp	r2, ip
   18b14:	bls	18b04 <fts_children@@Base+0x13e0>
   18b18:	str	r3, [r1, ip, lsl #2]
   18b1c:	ldr	r3, [r5, #4]
   18b20:	add	r4, ip, #1
   18b24:	cmp	r3, #0
   18b28:	add	lr, r1, ip, lsl #2
   18b2c:	beq	18b5c <fts_children@@Base+0x1438>
   18b30:	mov	ip, r4
   18b34:	cmp	r2, ip
   18b38:	beq	18b08 <fts_children@@Base+0x13e4>
   18b3c:	ldr	r4, [r3]
   18b40:	add	ip, ip, #1
   18b44:	str	r4, [lr, #4]!
   18b48:	ldr	r3, [r3, #4]
   18b4c:	cmp	r3, #0
   18b50:	bne	18b34 <fts_children@@Base+0x1410>
   18b54:	ldr	lr, [r0, #4]
   18b58:	b	18af8 <fts_children@@Base+0x13d4>
   18b5c:	ldr	lr, [r0, #4]
   18b60:	mov	ip, r4
   18b64:	b	18af8 <fts_children@@Base+0x13d4>
   18b68:	mov	r2, #0
   18b6c:	b	18b08 <fts_children@@Base+0x13e4>
   18b70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b74:	ldr	r3, [r0, #4]
   18b78:	ldr	r8, [r0]
   18b7c:	cmp	r3, r8
   18b80:	bls	18be8 <fts_children@@Base+0x14c4>
   18b84:	mov	r7, r2
   18b88:	mov	r6, r1
   18b8c:	mov	r9, r0
   18b90:	mov	r5, #0
   18b94:	ldr	r0, [r8]
   18b98:	cmp	r0, #0
   18b9c:	bne	18bb4 <fts_children@@Base+0x1490>
   18ba0:	add	r8, r8, #8
   18ba4:	cmp	r3, r8
   18ba8:	bhi	18b94 <fts_children@@Base+0x1470>
   18bac:	mov	r0, r5
   18bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bb4:	mov	r4, r8
   18bb8:	b	18bc0 <fts_children@@Base+0x149c>
   18bbc:	ldr	r0, [r4]
   18bc0:	mov	r1, r7
   18bc4:	blx	r6
   18bc8:	cmp	r0, #0
   18bcc:	beq	18bac <fts_children@@Base+0x1488>
   18bd0:	ldr	r4, [r4, #4]
   18bd4:	add	r5, r5, #1
   18bd8:	cmp	r4, #0
   18bdc:	bne	18bbc <fts_children@@Base+0x1498>
   18be0:	ldr	r3, [r9, #4]
   18be4:	b	18ba0 <fts_children@@Base+0x147c>
   18be8:	mov	r5, #0
   18bec:	b	18bac <fts_children@@Base+0x1488>
   18bf0:	push	{r4, r5, r6, lr}
   18bf4:	mov	r4, r0
   18bf8:	ldrb	r0, [r0]
   18bfc:	cmp	r0, #0
   18c00:	beq	18c30 <fts_children@@Base+0x150c>
   18c04:	mov	r5, r1
   18c08:	mov	r1, #0
   18c0c:	rsb	r1, r1, r1, lsl #5
   18c10:	add	r0, r1, r0
   18c14:	mov	r1, r5
   18c18:	bl	19fb4 <fts_children@@Base+0x2890>
   18c1c:	ldrb	r0, [r4, #1]!
   18c20:	cmp	r0, #0
   18c24:	bne	18c0c <fts_children@@Base+0x14e8>
   18c28:	mov	r0, r1
   18c2c:	pop	{r4, r5, r6, pc}
   18c30:	mov	r1, r0
   18c34:	mov	r0, r1
   18c38:	pop	{r4, r5, r6, pc}
   18c3c:	push	{lr}		; (str lr, [sp, #-4]!)
   18c40:	mov	ip, r0
   18c44:	ldr	lr, [pc, #16]	; 18c5c <fts_children@@Base+0x1538>
   18c48:	ldm	lr!, {r0, r1, r2, r3}
   18c4c:	ldr	lr, [lr]
   18c50:	stmia	ip!, {r0, r1, r2, r3}
   18c54:	str	lr, [ip]
   18c58:	pop	{pc}		; (ldr pc, [sp], #4)
   18c5c:	andeq	fp, r1, ip, lsl r5
   18c60:	push	{r4, r5, r6, r7, r8, lr}
   18c64:	sub	sp, sp, #8
   18c68:	cmp	r2, #0
   18c6c:	ldr	ip, [pc, #300]	; 18da0 <fts_children@@Base+0x167c>
   18c70:	str	r0, [sp, #4]
   18c74:	ldr	r5, [pc, #296]	; 18da4 <fts_children@@Base+0x1680>
   18c78:	mov	r0, #40	; 0x28
   18c7c:	movne	r5, r2
   18c80:	cmp	r3, #0
   18c84:	movne	r8, r3
   18c88:	moveq	r8, ip
   18c8c:	mov	r6, r1
   18c90:	bl	114a4 <malloc@plt>
   18c94:	subs	r4, r0, #0
   18c98:	beq	18d64 <fts_children@@Base+0x1640>
   18c9c:	cmp	r6, #0
   18ca0:	add	r0, r4, #20
   18ca4:	beq	18d40 <fts_children@@Base+0x161c>
   18ca8:	str	r6, [r4, #20]
   18cac:	bl	18538 <fts_children@@Base+0xe14>
   18cb0:	cmp	r0, #0
   18cb4:	beq	18d58 <fts_children@@Base+0x1634>
   18cb8:	ldrb	r3, [r6, #16]
   18cbc:	cmp	r3, #0
   18cc0:	vldreq	s13, [r6, #8]
   18cc4:	beq	18d70 <fts_children@@Base+0x164c>
   18cc8:	ldr	r0, [sp, #4]
   18ccc:	bl	18330 <fts_children@@Base+0xc0c>
   18cd0:	lsrs	r3, r0, #30
   18cd4:	movne	r7, #1
   18cd8:	moveq	r7, #0
   18cdc:	tst	r0, #536870912	; 0x20000000
   18ce0:	mov	r6, r0
   18ce4:	bne	18d58 <fts_children@@Base+0x1634>
   18ce8:	cmp	r7, #0
   18cec:	bne	18d58 <fts_children@@Base+0x1634>
   18cf0:	cmp	r0, #0
   18cf4:	str	r0, [r4, #8]
   18cf8:	beq	18d58 <fts_children@@Base+0x1634>
   18cfc:	mov	r1, #8
   18d00:	bl	1130c <calloc@plt>
   18d04:	cmp	r0, #0
   18d08:	str	r0, [r4]
   18d0c:	beq	18d58 <fts_children@@Base+0x1634>
   18d10:	ldr	r3, [sp, #32]
   18d14:	add	r0, r0, r6, lsl #3
   18d18:	str	r0, [r4, #4]
   18d1c:	str	r7, [r4, #12]
   18d20:	mov	r0, r4
   18d24:	str	r7, [r4, #16]
   18d28:	str	r5, [r4, #24]
   18d2c:	str	r8, [r4, #28]
   18d30:	str	r3, [r4, #32]
   18d34:	str	r7, [r4, #36]	; 0x24
   18d38:	add	sp, sp, #8
   18d3c:	pop	{r4, r5, r6, r7, r8, pc}
   18d40:	ldr	r3, [pc, #96]	; 18da8 <fts_children@@Base+0x1684>
   18d44:	str	r3, [r4, #20]
   18d48:	bl	18538 <fts_children@@Base+0xe14>
   18d4c:	cmp	r0, #0
   18d50:	vldrne	s13, [pc, #64]	; 18d98 <fts_children@@Base+0x1674>
   18d54:	bne	18d70 <fts_children@@Base+0x164c>
   18d58:	mov	r0, r4
   18d5c:	bl	11360 <free@plt>
   18d60:	mov	r4, #0
   18d64:	mov	r0, r4
   18d68:	add	sp, sp, #8
   18d6c:	pop	{r4, r5, r6, r7, r8, pc}
   18d70:	vldr	s15, [sp, #4]
   18d74:	vldr	s14, [pc, #32]	; 18d9c <fts_children@@Base+0x1678>
   18d78:	vcvt.f32.u32	s12, s15
   18d7c:	vdiv.f32	s15, s12, s13
   18d80:	vcmpe.f32	s15, s14
   18d84:	vmrs	APSR_nzcv, fpscr
   18d88:	bge	18d58 <fts_children@@Base+0x1634>
   18d8c:	vcvt.u32.f32	s15, s15
   18d90:	vstr	s15, [sp, #4]
   18d94:	b	18cc8 <fts_children@@Base+0x15a4>
   18d98:	svccc	0x004ccccd
   18d9c:	svcmi	0x00800000
   18da0:	ldrdeq	r8, [r1], -ip
   18da4:	andeq	r8, r1, r8, asr #7
   18da8:	andeq	fp, r1, ip, lsl r5
   18dac:	push	{r4, r5, r6, r7, r8, lr}
   18db0:	mov	r5, r0
   18db4:	ldr	r6, [r0]
   18db8:	ldr	r2, [r0, #4]
   18dbc:	cmp	r6, r2
   18dc0:	addcc	r6, r6, #8
   18dc4:	movcc	r7, #0
   18dc8:	bcc	18ddc <fts_children@@Base+0x16b8>
   18dcc:	b	18e50 <fts_children@@Base+0x172c>
   18dd0:	cmp	r2, r6
   18dd4:	add	r6, r6, #8
   18dd8:	bls	18e50 <fts_children@@Base+0x172c>
   18ddc:	ldr	r3, [r6, #-8]
   18de0:	cmp	r3, #0
   18de4:	beq	18dd0 <fts_children@@Base+0x16ac>
   18de8:	ldr	r4, [r6, #-4]
   18dec:	ldr	r2, [r5, #32]
   18df0:	cmp	r4, #0
   18df4:	beq	18e28 <fts_children@@Base+0x1704>
   18df8:	cmp	r2, #0
   18dfc:	beq	18e0c <fts_children@@Base+0x16e8>
   18e00:	ldr	r0, [r4]
   18e04:	blx	r2
   18e08:	ldr	r2, [r5, #32]
   18e0c:	ldr	r3, [r4, #4]
   18e10:	ldr	r1, [r5, #36]	; 0x24
   18e14:	str	r7, [r4]
   18e18:	str	r1, [r4, #4]
   18e1c:	str	r4, [r5, #36]	; 0x24
   18e20:	subs	r4, r3, #0
   18e24:	bne	18df8 <fts_children@@Base+0x16d4>
   18e28:	cmp	r2, #0
   18e2c:	beq	18e38 <fts_children@@Base+0x1714>
   18e30:	ldr	r0, [r6, #-8]
   18e34:	blx	r2
   18e38:	str	r7, [r6, #-8]
   18e3c:	str	r7, [r6, #-4]
   18e40:	ldr	r2, [r5, #4]
   18e44:	cmp	r2, r6
   18e48:	add	r6, r6, #8
   18e4c:	bhi	18ddc <fts_children@@Base+0x16b8>
   18e50:	mov	r3, #0
   18e54:	str	r3, [r5, #12]
   18e58:	str	r3, [r5, #16]
   18e5c:	pop	{r4, r5, r6, r7, r8, pc}
   18e60:	ldr	r3, [r0, #32]
   18e64:	push	{r4, r5, r6, lr}
   18e68:	cmp	r3, #0
   18e6c:	mov	r6, r0
   18e70:	ldr	r5, [r0]
   18e74:	ldr	r3, [r0, #4]
   18e78:	beq	18ee0 <fts_children@@Base+0x17bc>
   18e7c:	ldr	r2, [r0, #16]
   18e80:	cmp	r2, #0
   18e84:	beq	18ee0 <fts_children@@Base+0x17bc>
   18e88:	cmp	r5, r3
   18e8c:	bcc	18ea0 <fts_children@@Base+0x177c>
   18e90:	b	18f14 <fts_children@@Base+0x17f0>
   18e94:	add	r5, r5, #8
   18e98:	cmp	r3, r5
   18e9c:	bls	18edc <fts_children@@Base+0x17b8>
   18ea0:	ldr	r0, [r5]
   18ea4:	cmp	r0, #0
   18ea8:	beq	18e94 <fts_children@@Base+0x1770>
   18eac:	mov	r4, r5
   18eb0:	b	18eb8 <fts_children@@Base+0x1794>
   18eb4:	ldr	r0, [r4]
   18eb8:	ldr	r3, [r6, #32]
   18ebc:	blx	r3
   18ec0:	ldr	r4, [r4, #4]
   18ec4:	cmp	r4, #0
   18ec8:	bne	18eb4 <fts_children@@Base+0x1790>
   18ecc:	ldr	r3, [r6, #4]
   18ed0:	add	r5, r5, #8
   18ed4:	cmp	r3, r5
   18ed8:	bhi	18ea0 <fts_children@@Base+0x177c>
   18edc:	ldr	r5, [r6]
   18ee0:	cmp	r5, r3
   18ee4:	bcs	18f14 <fts_children@@Base+0x17f0>
   18ee8:	ldr	r0, [r5, #4]
   18eec:	cmp	r0, #0
   18ef0:	beq	18f08 <fts_children@@Base+0x17e4>
   18ef4:	ldr	r4, [r0, #4]
   18ef8:	bl	11360 <free@plt>
   18efc:	subs	r0, r4, #0
   18f00:	bne	18ef4 <fts_children@@Base+0x17d0>
   18f04:	ldr	r3, [r6, #4]
   18f08:	add	r5, r5, #8
   18f0c:	cmp	r3, r5
   18f10:	bhi	18ee8 <fts_children@@Base+0x17c4>
   18f14:	ldr	r0, [r6, #36]	; 0x24
   18f18:	cmp	r0, #0
   18f1c:	beq	18f30 <fts_children@@Base+0x180c>
   18f20:	ldr	r4, [r0, #4]
   18f24:	bl	11360 <free@plt>
   18f28:	subs	r0, r4, #0
   18f2c:	bne	18f20 <fts_children@@Base+0x17fc>
   18f30:	ldr	r0, [r6]
   18f34:	bl	11360 <free@plt>
   18f38:	mov	r0, r6
   18f3c:	pop	{r4, r5, r6, lr}
   18f40:	b	11360 <free@plt>
   18f44:	push	{r4, r5, r6, r7, r8, lr}
   18f48:	sub	sp, sp, #56	; 0x38
   18f4c:	ldr	r8, [r0, #20]
   18f50:	ldr	r7, [pc, #392]	; 190e0 <fts_children@@Base+0x19bc>
   18f54:	mov	r6, r0
   18f58:	ldrb	r3, [r8, #16]
   18f5c:	ldr	r2, [r7]
   18f60:	str	r1, [sp, #4]
   18f64:	cmp	r3, #0
   18f68:	str	r2, [sp, #52]	; 0x34
   18f6c:	bne	18f98 <fts_children@@Base+0x1874>
   18f70:	vmov	s15, r1
   18f74:	vldr	s13, [r8, #8]
   18f78:	vldr	s14, [pc, #348]	; 190dc <fts_children@@Base+0x19b8>
   18f7c:	vcvt.f32.u32	s12, s15
   18f80:	vdiv.f32	s15, s12, s13
   18f84:	vcmpe.f32	s15, s14
   18f88:	vmrs	APSR_nzcv, fpscr
   18f8c:	vcvtlt.u32.f32	s15, s15
   18f90:	vstrlt	s15, [sp, #4]
   18f94:	bge	18fc8 <fts_children@@Base+0x18a4>
   18f98:	ldr	r0, [sp, #4]
   18f9c:	bl	18330 <fts_children@@Base+0xc0c>
   18fa0:	lsrs	r3, r0, #30
   18fa4:	movne	r4, #1
   18fa8:	moveq	r4, #0
   18fac:	tst	r0, #536870912	; 0x20000000
   18fb0:	movne	r4, #1
   18fb4:	cmp	r0, #0
   18fb8:	moveq	r4, #1
   18fbc:	cmp	r4, #0
   18fc0:	mov	r5, r0
   18fc4:	beq	18fe8 <fts_children@@Base+0x18c4>
   18fc8:	mov	r4, #0
   18fcc:	ldr	r2, [sp, #52]	; 0x34
   18fd0:	ldr	r3, [r7]
   18fd4:	mov	r0, r4
   18fd8:	cmp	r2, r3
   18fdc:	bne	190d4 <fts_children@@Base+0x19b0>
   18fe0:	add	sp, sp, #56	; 0x38
   18fe4:	pop	{r4, r5, r6, r7, r8, pc}
   18fe8:	ldr	r3, [r6, #8]
   18fec:	cmp	r3, r0
   18ff0:	beq	1909c <fts_children@@Base+0x1978>
   18ff4:	mov	r1, #8
   18ff8:	bl	1130c <calloc@plt>
   18ffc:	cmp	r0, #0
   19000:	str	r0, [sp, #12]
   19004:	beq	18fc8 <fts_children@@Base+0x18a4>
   19008:	add	r0, r0, r5, lsl #3
   1900c:	ldr	r1, [r6, #32]
   19010:	str	r0, [sp, #16]
   19014:	ldr	r0, [r6, #28]
   19018:	ldr	ip, [r6, #24]
   1901c:	ldr	r3, [r6, #36]	; 0x24
   19020:	mov	r2, r4
   19024:	str	r0, [sp, #40]	; 0x28
   19028:	str	r1, [sp, #44]	; 0x2c
   1902c:	add	r0, sp, #12
   19030:	mov	r1, r6
   19034:	str	r4, [sp, #24]
   19038:	str	r4, [sp, #28]
   1903c:	str	r5, [sp, #20]
   19040:	str	r8, [sp, #32]
   19044:	str	ip, [sp, #36]	; 0x24
   19048:	str	r3, [sp, #48]	; 0x30
   1904c:	bl	185e8 <fts_children@@Base+0xec4>
   19050:	subs	r4, r0, #0
   19054:	bne	190a4 <fts_children@@Base+0x1980>
   19058:	ldr	r3, [sp, #48]	; 0x30
   1905c:	mov	r2, #1
   19060:	str	r3, [r6, #36]	; 0x24
   19064:	add	r1, sp, #12
   19068:	mov	r0, r6
   1906c:	bl	185e8 <fts_children@@Base+0xec4>
   19070:	cmp	r0, #0
   19074:	beq	190d8 <fts_children@@Base+0x19b4>
   19078:	add	r1, sp, #12
   1907c:	mov	r0, r6
   19080:	mov	r2, r4
   19084:	bl	185e8 <fts_children@@Base+0xec4>
   19088:	cmp	r0, #0
   1908c:	beq	190d8 <fts_children@@Base+0x19b4>
   19090:	ldr	r0, [sp, #12]
   19094:	bl	11360 <free@plt>
   19098:	b	18fcc <fts_children@@Base+0x18a8>
   1909c:	mov	r4, #1
   190a0:	b	18fcc <fts_children@@Base+0x18a8>
   190a4:	ldr	r0, [r6]
   190a8:	bl	11360 <free@plt>
   190ac:	ldrd	r2, [sp, #12]
   190b0:	ldr	r1, [sp, #20]
   190b4:	str	r2, [r6]
   190b8:	str	r3, [r6, #4]
   190bc:	ldr	r2, [sp, #24]
   190c0:	ldr	r3, [sp, #48]	; 0x30
   190c4:	str	r1, [r6, #8]
   190c8:	str	r2, [r6, #12]
   190cc:	str	r3, [r6, #36]	; 0x24
   190d0:	b	18fcc <fts_children@@Base+0x18a8>
   190d4:	bl	113c0 <__stack_chk_fail@plt>
   190d8:	bl	11690 <abort@plt>
   190dc:	svcmi	0x00800000
   190e0:	andeq	fp, r2, r0, lsl #30
   190e4:	push	{r4, r5, r6, r7, lr}
   190e8:	sub	sp, sp, #12
   190ec:	ldr	r6, [pc, #404]	; 19288 <fts_children@@Base+0x1b64>
   190f0:	subs	r7, r1, #0
   190f4:	ldr	r3, [r6]
   190f8:	str	r3, [sp, #4]
   190fc:	beq	1927c <fts_children@@Base+0x1b58>
   19100:	mov	r5, r2
   19104:	mov	r3, #0
   19108:	mov	r2, sp
   1910c:	mov	r4, r0
   19110:	bl	18420 <fts_children@@Base+0xcfc>
   19114:	cmp	r0, #0
   19118:	beq	19144 <fts_children@@Base+0x1a20>
   1911c:	cmp	r5, #0
   19120:	moveq	r0, r5
   19124:	strne	r0, [r5]
   19128:	movne	r0, #0
   1912c:	ldr	r2, [sp, #4]
   19130:	ldr	r3, [r6]
   19134:	cmp	r2, r3
   19138:	bne	19280 <fts_children@@Base+0x1b5c>
   1913c:	add	sp, sp, #12
   19140:	pop	{r4, r5, r6, r7, pc}
   19144:	vldr	s15, [r4, #8]
   19148:	ldr	r3, [r4, #20]
   1914c:	vldr	s14, [r4, #12]
   19150:	vcvt.f32.u32	s15, s15
   19154:	vldr	s13, [r3, #8]
   19158:	vcvt.f32.u32	s14, s14
   1915c:	vmul.f32	s15, s15, s13
   19160:	vcmpe.f32	s14, s15
   19164:	vmrs	APSR_nzcv, fpscr
   19168:	bgt	191b4 <fts_children@@Base+0x1a90>
   1916c:	ldr	r5, [sp]
   19170:	ldr	r3, [r5]
   19174:	cmp	r3, #0
   19178:	beq	19210 <fts_children@@Base+0x1aec>
   1917c:	ldr	r0, [r4, #36]	; 0x24
   19180:	cmp	r0, #0
   19184:	beq	19234 <fts_children@@Base+0x1b10>
   19188:	ldr	r3, [r0, #4]
   1918c:	str	r3, [r4, #36]	; 0x24
   19190:	ldr	r3, [r4, #16]
   19194:	ldr	r2, [r5, #4]
   19198:	add	r3, r3, #1
   1919c:	str	r7, [r0]
   191a0:	str	r2, [r0, #4]
   191a4:	str	r0, [r5, #4]
   191a8:	mov	r0, #1
   191ac:	str	r3, [r4, #16]
   191b0:	b	1912c <fts_children@@Base+0x1a08>
   191b4:	add	r0, r4, #20
   191b8:	bl	18538 <fts_children@@Base+0xe14>
   191bc:	vldr	s15, [r4, #8]
   191c0:	ldr	r3, [r4, #20]
   191c4:	vldr	s14, [r4, #12]
   191c8:	vcvt.f32.u32	s15, s15
   191cc:	vldr	s13, [r3, #8]
   191d0:	vcvt.f32.u32	s14, s14
   191d4:	vmul.f32	s12, s13, s15
   191d8:	vcmpe.f32	s14, s12
   191dc:	vmrs	APSR_nzcv, fpscr
   191e0:	ble	1916c <fts_children@@Base+0x1a48>
   191e4:	vldr	s14, [r3, #12]
   191e8:	ldrb	r3, [r3, #16]
   191ec:	vmul.f32	s15, s15, s14
   191f0:	cmp	r3, #0
   191f4:	vldr	s14, [pc, #136]	; 19284 <fts_children@@Base+0x1b60>
   191f8:	vmuleq.f32	s15, s15, s13
   191fc:	vcmpe.f32	s15, s14
   19200:	vmrs	APSR_nzcv, fpscr
   19204:	blt	19248 <fts_children@@Base+0x1b24>
   19208:	mvn	r0, #0
   1920c:	b	1912c <fts_children@@Base+0x1a08>
   19210:	ldr	r2, [r4, #16]
   19214:	ldr	r3, [r4, #12]
   19218:	add	r2, r2, #1
   1921c:	add	r3, r3, #1
   19220:	str	r7, [r5]
   19224:	mov	r0, #1
   19228:	str	r2, [r4, #16]
   1922c:	str	r3, [r4, #12]
   19230:	b	1912c <fts_children@@Base+0x1a08>
   19234:	mov	r0, #8
   19238:	bl	114a4 <malloc@plt>
   1923c:	cmp	r0, #0
   19240:	beq	19208 <fts_children@@Base+0x1ae4>
   19244:	b	19190 <fts_children@@Base+0x1a6c>
   19248:	vcvt.u32.f32	s15, s15
   1924c:	mov	r0, r4
   19250:	vmov	r1, s15
   19254:	bl	18f44 <fts_children@@Base+0x1820>
   19258:	cmp	r0, #0
   1925c:	beq	19208 <fts_children@@Base+0x1ae4>
   19260:	mov	r2, sp
   19264:	mov	r3, #0
   19268:	mov	r1, r7
   1926c:	mov	r0, r4
   19270:	bl	18420 <fts_children@@Base+0xcfc>
   19274:	cmp	r0, #0
   19278:	beq	1916c <fts_children@@Base+0x1a48>
   1927c:	bl	11690 <abort@plt>
   19280:	bl	113c0 <__stack_chk_fail@plt>
   19284:	svcmi	0x00800000
   19288:	andeq	fp, r2, r0, lsl #30
   1928c:	push	{r4, r5, lr}
   19290:	sub	sp, sp, #12
   19294:	ldr	r5, [pc, #68]	; 192e0 <fts_children@@Base+0x1bbc>
   19298:	mov	r2, sp
   1929c:	mov	r4, r1
   192a0:	ldr	r3, [r5]
   192a4:	str	r3, [sp, #4]
   192a8:	bl	190e4 <fts_children@@Base+0x19c0>
   192ac:	cmn	r0, #1
   192b0:	moveq	r0, #0
   192b4:	beq	192c4 <fts_children@@Base+0x1ba0>
   192b8:	cmp	r0, #0
   192bc:	movne	r0, r4
   192c0:	ldreq	r0, [sp]
   192c4:	ldr	r2, [sp, #4]
   192c8:	ldr	r3, [r5]
   192cc:	cmp	r2, r3
   192d0:	bne	192dc <fts_children@@Base+0x1bb8>
   192d4:	add	sp, sp, #12
   192d8:	pop	{r4, r5, pc}
   192dc:	bl	113c0 <__stack_chk_fail@plt>
   192e0:	andeq	fp, r2, r0, lsl #30
   192e4:	push	{r4, r5, r6, r7, lr}
   192e8:	sub	sp, sp, #12
   192ec:	ldr	r5, [pc, #276]	; 19408 <fts_children@@Base+0x1ce4>
   192f0:	mov	r3, #1
   192f4:	mov	r2, sp
   192f8:	ldr	ip, [r5]
   192fc:	mov	r4, r0
   19300:	str	ip, [sp, #4]
   19304:	bl	18420 <fts_children@@Base+0xcfc>
   19308:	subs	r6, r0, #0
   1930c:	beq	1932c <fts_children@@Base+0x1c08>
   19310:	ldr	r2, [sp]
   19314:	ldr	r3, [r4, #16]
   19318:	ldr	r2, [r2]
   1931c:	sub	r3, r3, #1
   19320:	cmp	r2, #0
   19324:	str	r3, [r4, #16]
   19328:	beq	19348 <fts_children@@Base+0x1c24>
   1932c:	ldr	r2, [sp, #4]
   19330:	ldr	r3, [r5]
   19334:	mov	r0, r6
   19338:	cmp	r2, r3
   1933c:	bne	19404 <fts_children@@Base+0x1ce0>
   19340:	add	sp, sp, #12
   19344:	pop	{r4, r5, r6, r7, pc}
   19348:	vldr	s15, [r4, #8]
   1934c:	ldr	r3, [r4, #12]
   19350:	ldr	r2, [r4, #20]
   19354:	sub	r3, r3, #1
   19358:	vcvt.f32.u32	s14, s15
   1935c:	vldr	s13, [r2]
   19360:	vmov	s15, r3
   19364:	str	r3, [r4, #12]
   19368:	vcvt.f32.u32	s15, s15
   1936c:	vmul.f32	s14, s14, s13
   19370:	vcmpe.f32	s15, s14
   19374:	vmrs	APSR_nzcv, fpscr
   19378:	bpl	1932c <fts_children@@Base+0x1c08>
   1937c:	add	r0, r4, #20
   19380:	bl	18538 <fts_children@@Base+0xe14>
   19384:	vldr	s15, [r4, #8]
   19388:	ldr	r3, [r4, #20]
   1938c:	vldr	s13, [r4, #12]
   19390:	vcvt.f32.u32	s15, s15
   19394:	vldr	s14, [r3]
   19398:	vcvt.f32.u32	s13, s13
   1939c:	vmul.f32	s14, s15, s14
   193a0:	vcmpe.f32	s13, s14
   193a4:	vmrs	APSR_nzcv, fpscr
   193a8:	bpl	1932c <fts_children@@Base+0x1c08>
   193ac:	vldr	s14, [r3, #4]
   193b0:	ldrb	r2, [r3, #16]
   193b4:	mov	r0, r4
   193b8:	vmul.f32	s15, s15, s14
   193bc:	cmp	r2, #0
   193c0:	vldreq	s14, [r3, #8]
   193c4:	vmuleq.f32	s15, s15, s14
   193c8:	vcvt.u32.f32	s15, s15
   193cc:	vmov	r1, s15
   193d0:	bl	18f44 <fts_children@@Base+0x1820>
   193d4:	cmp	r0, #0
   193d8:	bne	1932c <fts_children@@Base+0x1c08>
   193dc:	ldr	r0, [r4, #36]	; 0x24
   193e0:	cmp	r0, #0
   193e4:	beq	193f8 <fts_children@@Base+0x1cd4>
   193e8:	ldr	r7, [r0, #4]
   193ec:	bl	11360 <free@plt>
   193f0:	subs	r0, r7, #0
   193f4:	bne	193e8 <fts_children@@Base+0x1cc4>
   193f8:	mov	r3, #0
   193fc:	str	r3, [r4, #36]	; 0x24
   19400:	b	1932c <fts_children@@Base+0x1c08>
   19404:	bl	113c0 <__stack_chk_fail@plt>
   19408:	andeq	fp, r2, r0, lsl #30
   1940c:	mov	r3, #0
   19410:	mov	r2, #1
   19414:	str	r1, [r0]
   19418:	str	r1, [r0, #4]
   1941c:	str	r1, [r0, #8]
   19420:	str	r1, [r0, #12]
   19424:	str	r1, [r0, #16]
   19428:	strb	r2, [r0, #28]
   1942c:	str	r3, [r0, #20]
   19430:	str	r3, [r0, #24]
   19434:	bx	lr
   19438:	ldrb	r0, [r0, #28]
   1943c:	bx	lr
   19440:	ldrb	ip, [r0, #28]
   19444:	ldr	r3, [r0, #20]
   19448:	mov	r2, r0
   1944c:	eor	ip, ip, #1
   19450:	add	r3, ip, r3
   19454:	and	r3, r3, #3
   19458:	ldr	r0, [r0, r3, lsl #2]
   1945c:	str	r1, [r2, r3, lsl #2]
   19460:	ldr	r1, [r2, #24]
   19464:	str	r3, [r2, #20]
   19468:	cmp	r1, r3
   1946c:	addeq	ip, ip, r1
   19470:	andeq	ip, ip, #3
   19474:	mov	r3, #0
   19478:	streq	ip, [r2, #24]
   1947c:	strb	r3, [r2, #28]
   19480:	bx	lr
   19484:	ldrb	r3, [r0, #28]
   19488:	cmp	r3, #0
   1948c:	bne	194c4 <fts_children@@Base+0x1da0>
   19490:	ldr	r3, [r0, #20]
   19494:	ldr	r1, [r0, #16]
   19498:	ldr	r2, [r0, r3, lsl #2]
   1949c:	str	r1, [r0, r3, lsl #2]
   194a0:	ldr	r1, [r0, #24]
   194a4:	cmp	r3, r1
   194a8:	addne	r3, r3, #3
   194ac:	moveq	r3, #1
   194b0:	andne	r3, r3, #3
   194b4:	strbeq	r3, [r0, #28]
   194b8:	strne	r3, [r0, #20]
   194bc:	mov	r0, r2
   194c0:	bx	lr
   194c4:	push	{r4, lr}
   194c8:	bl	11690 <abort@plt>
   194cc:	push	{r4, lr}
   194d0:	mov	r0, #14
   194d4:	bl	11600 <nl_langinfo@plt>
   194d8:	cmp	r0, #0
   194dc:	beq	194f4 <fts_children@@Base+0x1dd0>
   194e0:	ldrb	r2, [r0]
   194e4:	ldr	r3, [pc, #16]	; 194fc <fts_children@@Base+0x1dd8>
   194e8:	cmp	r2, #0
   194ec:	moveq	r0, r3
   194f0:	pop	{r4, pc}
   194f4:	ldr	r0, [pc]	; 194fc <fts_children@@Base+0x1dd8>
   194f8:	pop	{r4, pc}
   194fc:	muleq	r1, ip, r5
   19500:	ldr	r3, [pc, #44]	; 19534 <fts_children@@Base+0x1e10>
   19504:	push	{r4, lr}
   19508:	mov	r5, r0
   1950c:	mov	r2, #5
   19510:	ldr	r1, [pc, #32]	; 19538 <fts_children@@Base+0x1e14>
   19514:	mov	r0, #0
   19518:	ldr	r4, [r3]
   1951c:	bl	113b4 <dcgettext@plt>
   19520:	mov	r1, r5
   19524:	mov	r2, r0
   19528:	mov	r0, r4
   1952c:	bl	11474 <error@plt>
   19530:	bl	11690 <abort@plt>
   19534:	andeq	ip, r2, r4, ror #2
   19538:	andeq	fp, r1, r4, lsr #11
   1953c:	ldr	r3, [pc, #44]	; 19570 <fts_children@@Base+0x1e4c>
   19540:	push	{r4, lr}
   19544:	mov	r5, r0
   19548:	mov	r2, #5
   1954c:	ldr	r1, [pc, #32]	; 19574 <fts_children@@Base+0x1e50>
   19550:	mov	r0, #0
   19554:	ldr	r4, [r3]
   19558:	bl	113b4 <dcgettext@plt>
   1955c:	mov	r1, r5
   19560:	mov	r2, r0
   19564:	mov	r0, r4
   19568:	bl	11474 <error@plt>
   1956c:	bl	11690 <abort@plt>
   19570:	andeq	ip, r2, r4, ror #2
   19574:	ldrdeq	fp, [r1], -r0
   19578:	push	{r2, r3}
   1957c:	push	{r4, lr}
   19580:	sub	sp, sp, #8
   19584:	ldr	r4, [pc, #68]	; 195d0 <fts_children@@Base+0x1eac>
   19588:	ldr	r2, [sp, #16]
   1958c:	ands	r3, r2, #64	; 0x40
   19590:	addne	r3, sp, #20
   19594:	ldr	ip, [r4]
   19598:	strne	r3, [sp]
   1959c:	ldrne	r3, [sp, #20]
   195a0:	str	ip, [sp, #4]
   195a4:	bl	11534 <openat64@plt>
   195a8:	bl	19668 <fts_children@@Base+0x1f44>
   195ac:	ldr	r2, [sp, #4]
   195b0:	ldr	r3, [r4]
   195b4:	cmp	r2, r3
   195b8:	bne	195cc <fts_children@@Base+0x1ea8>
   195bc:	add	sp, sp, #8
   195c0:	pop	{r4, lr}
   195c4:	add	sp, sp, #8
   195c8:	bx	lr
   195cc:	bl	113c0 <__stack_chk_fail@plt>
   195d0:	andeq	fp, r2, r0, lsl #30
   195d4:	push	{r4, r5, r6, lr}
   195d8:	mov	r4, #0
   195dc:	mov	r5, r0
   195e0:	str	r4, [r0, #4]
   195e4:	mov	r1, #524288	; 0x80000
   195e8:	ldr	r0, [pc, #52]	; 19624 <fts_children@@Base+0x1f00>
   195ec:	bl	18284 <fts_children@@Base+0xb60>
   195f0:	cmp	r0, r4
   195f4:	str	r0, [r5]
   195f8:	blt	19604 <fts_children@@Base+0x1ee0>
   195fc:	mov	r0, r4
   19600:	pop	{r4, r5, r6, pc}
   19604:	mov	r1, r4
   19608:	mov	r0, r4
   1960c:	bl	114f8 <getcwd@plt>
   19610:	clz	r4, r0
   19614:	lsr	r4, r4, #5
   19618:	str	r0, [r5, #4]
   1961c:	rsb	r0, r4, #0
   19620:	pop	{r4, r5, r6, pc}
   19624:	andeq	fp, r1, r8, asr #9
   19628:	ldr	r3, [r0]
   1962c:	cmp	r3, #0
   19630:	blt	1963c <fts_children@@Base+0x1f18>
   19634:	mov	r0, r3
   19638:	b	11630 <fchdir@plt>
   1963c:	ldr	r0, [r0, #4]
   19640:	b	1971c <fts_children@@Base+0x1ff8>
   19644:	push	{r4, lr}
   19648:	mov	r4, r0
   1964c:	ldr	r0, [r0]
   19650:	cmp	r0, #0
   19654:	blt	1965c <fts_children@@Base+0x1f38>
   19658:	bl	1169c <close@plt>
   1965c:	ldr	r0, [r4, #4]
   19660:	pop	{r4, lr}
   19664:	b	11360 <free@plt>
   19668:	cmp	r0, #2
   1966c:	push	{r4, r5, r6, r7, r8, lr}
   19670:	mov	r4, r0
   19674:	bls	19680 <fts_children@@Base+0x1f5c>
   19678:	mov	r0, r4
   1967c:	pop	{r4, r5, r6, r7, r8, pc}
   19680:	bl	19dbc <fts_children@@Base+0x2698>
   19684:	mov	r7, r0
   19688:	bl	1154c <__errno_location@plt>
   1968c:	mov	r5, r0
   19690:	mov	r0, r4
   19694:	ldr	r6, [r5]
   19698:	mov	r4, r7
   1969c:	bl	1169c <close@plt>
   196a0:	str	r6, [r5]
   196a4:	mov	r0, r4
   196a8:	pop	{r4, r5, r6, r7, r8, pc}
   196ac:	cmp	r0, #0
   196b0:	bxlt	lr
   196b4:	push	{r4, lr}
   196b8:	bl	1169c <close@plt>
   196bc:	cmp	r0, #0
   196c0:	popeq	{r4, pc}
   196c4:	ldr	r3, [pc, #12]	; 196d8 <fts_children@@Base+0x1fb4>
   196c8:	mov	r2, #64	; 0x40
   196cc:	ldr	r1, [pc, #8]	; 196dc <fts_children@@Base+0x1fb8>
   196d0:	ldr	r0, [pc, #8]	; 196e0 <fts_children@@Base+0x1fbc>
   196d4:	bl	116cc <__assert_fail@plt>
   196d8:	andeq	fp, r1, r0, lsl #12
   196dc:	andeq	fp, r1, r8, lsl r6
   196e0:	andeq	fp, r1, ip, lsr #12
   196e4:	push	{r4, r5, r6, lr}
   196e8:	mov	r2, #18688	; 0x4900
   196ec:	mov	r4, r0
   196f0:	ldr	r0, [r0]
   196f4:	bl	11534 <openat64@plt>
   196f8:	subs	r5, r0, #0
   196fc:	blt	19714 <fts_children@@Base+0x1ff0>
   19700:	ldr	r0, [r4]
   19704:	bl	196ac <fts_children@@Base+0x1f88>
   19708:	str	r5, [r4]
   1970c:	mov	r0, #0
   19710:	pop	{r4, r5, r6, pc}
   19714:	mvn	r0, #0
   19718:	pop	{r4, r5, r6, pc}
   1971c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19720:	sub	sp, sp, #8
   19724:	ldr	r9, [pc, #592]	; 1997c <fts_children@@Base+0x2258>
   19728:	mov	r7, r0
   1972c:	ldr	r3, [r9]
   19730:	str	r3, [sp, #4]
   19734:	bl	113fc <chdir@plt>
   19738:	subs	r4, r0, #0
   1973c:	beq	1983c <fts_children@@Base+0x2118>
   19740:	bl	1154c <__errno_location@plt>
   19744:	ldr	r3, [r0]
   19748:	mov	sl, r0
   1974c:	cmp	r3, #36	; 0x24
   19750:	bne	1983c <fts_children@@Base+0x2118>
   19754:	mov	r0, r7
   19758:	bl	11528 <strlen@plt>
   1975c:	mvn	r3, #99	; 0x63
   19760:	str	r3, [sp]
   19764:	subs	r6, r0, #0
   19768:	beq	19968 <fts_children@@Base+0x2244>
   1976c:	cmp	r6, #4096	; 0x1000
   19770:	bcc	19954 <fts_children@@Base+0x2230>
   19774:	ldr	r1, [pc, #516]	; 19980 <fts_children@@Base+0x225c>
   19778:	mov	r0, r7
   1977c:	bl	116c0 <strspn@plt>
   19780:	cmp	r0, #2
   19784:	mov	r5, r0
   19788:	beq	19888 <fts_children@@Base+0x2164>
   1978c:	cmp	r0, #0
   19790:	moveq	r5, r7
   19794:	bne	19858 <fts_children@@Base+0x2134>
   19798:	ldrb	r3, [r5]
   1979c:	cmp	r3, #47	; 0x2f
   197a0:	beq	19940 <fts_children@@Base+0x221c>
   197a4:	add	r7, r7, r6
   197a8:	cmp	r5, r7
   197ac:	bhi	1992c <fts_children@@Base+0x2208>
   197b0:	ldr	r6, [pc, #460]	; 19984 <fts_children@@Base+0x2260>
   197b4:	sub	r3, r7, r5
   197b8:	cmp	r3, r6
   197bc:	ble	198dc <fts_children@@Base+0x21b8>
   197c0:	ldr	r8, [pc, #440]	; 19980 <fts_children@@Base+0x225c>
   197c4:	b	19818 <fts_children@@Base+0x20f4>
   197c8:	sub	r3, r4, r5
   197cc:	cmp	r3, r6
   197d0:	mov	r3, #0
   197d4:	strb	r3, [r4]
   197d8:	bgt	19914 <fts_children@@Base+0x21f0>
   197dc:	mov	r1, r5
   197e0:	mov	r0, sp
   197e4:	bl	196e4 <fts_children@@Base+0x1fc0>
   197e8:	mov	r3, #47	; 0x2f
   197ec:	strb	r3, [r4]
   197f0:	cmp	r0, #0
   197f4:	bne	19870 <fts_children@@Base+0x214c>
   197f8:	add	r4, r4, #1
   197fc:	mov	r0, r4
   19800:	mov	r1, r8
   19804:	bl	116c0 <strspn@plt>
   19808:	add	r5, r4, r0
   1980c:	sub	r3, r7, r5
   19810:	cmp	r3, r6
   19814:	ble	198dc <fts_children@@Base+0x21b8>
   19818:	mov	r2, #4096	; 0x1000
   1981c:	mov	r1, #47	; 0x2f
   19820:	mov	r0, r5
   19824:	bl	11540 <memrchr@plt>
   19828:	subs	r4, r0, #0
   1982c:	bne	197c8 <fts_children@@Base+0x20a4>
   19830:	mov	r3, #36	; 0x24
   19834:	str	r3, [sl]
   19838:	mvn	r4, #0
   1983c:	ldr	r2, [sp, #4]
   19840:	ldr	r3, [r9]
   19844:	mov	r0, r4
   19848:	cmp	r2, r3
   1984c:	bne	19928 <fts_children@@Base+0x2204>
   19850:	add	sp, sp, #8
   19854:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19858:	ldr	r1, [pc, #288]	; 19980 <fts_children@@Base+0x225c>
   1985c:	mov	r0, sp
   19860:	bl	196e4 <fts_children@@Base+0x1fc0>
   19864:	cmp	r0, #0
   19868:	addeq	r5, r7, r5
   1986c:	beq	19798 <fts_children@@Base+0x2074>
   19870:	ldr	r5, [sl]
   19874:	ldr	r0, [sp]
   19878:	bl	196ac <fts_children@@Base+0x1f88>
   1987c:	mvn	r4, #0
   19880:	str	r5, [sl]
   19884:	b	1983c <fts_children@@Base+0x2118>
   19888:	sub	r2, r6, #3
   1988c:	mov	r1, #47	; 0x2f
   19890:	add	r0, r7, #3
   19894:	bl	115a0 <memchr@plt>
   19898:	subs	r4, r0, #0
   1989c:	beq	19838 <fts_children@@Base+0x2114>
   198a0:	mov	r3, #0
   198a4:	strb	r3, [r4]
   198a8:	mov	r1, r7
   198ac:	mov	r0, sp
   198b0:	bl	196e4 <fts_children@@Base+0x1fc0>
   198b4:	mov	r3, #47	; 0x2f
   198b8:	strb	r3, [r4]
   198bc:	cmp	r0, #0
   198c0:	bne	19870 <fts_children@@Base+0x214c>
   198c4:	add	r4, r4, #1
   198c8:	mov	r0, r4
   198cc:	ldr	r1, [pc, #172]	; 19980 <fts_children@@Base+0x225c>
   198d0:	bl	116c0 <strspn@plt>
   198d4:	add	r5, r4, r0
   198d8:	b	19798 <fts_children@@Base+0x2074>
   198dc:	cmp	r7, r5
   198e0:	bls	198f8 <fts_children@@Base+0x21d4>
   198e4:	mov	r1, r5
   198e8:	mov	r0, sp
   198ec:	bl	196e4 <fts_children@@Base+0x1fc0>
   198f0:	cmp	r0, #0
   198f4:	bne	19870 <fts_children@@Base+0x214c>
   198f8:	ldr	r0, [sp]
   198fc:	bl	11630 <fchdir@plt>
   19900:	subs	r4, r0, #0
   19904:	bne	19870 <fts_children@@Base+0x214c>
   19908:	ldr	r0, [sp]
   1990c:	bl	196ac <fts_children@@Base+0x1f88>
   19910:	b	1983c <fts_children@@Base+0x2118>
   19914:	ldr	r3, [pc, #108]	; 19988 <fts_children@@Base+0x2264>
   19918:	mov	r2, #179	; 0xb3
   1991c:	ldr	r1, [pc, #104]	; 1998c <fts_children@@Base+0x2268>
   19920:	ldr	r0, [pc, #104]	; 19990 <fts_children@@Base+0x226c>
   19924:	bl	116cc <__assert_fail@plt>
   19928:	bl	113c0 <__stack_chk_fail@plt>
   1992c:	ldr	r3, [pc, #84]	; 19988 <fts_children@@Base+0x2264>
   19930:	mov	r2, #163	; 0xa3
   19934:	ldr	r1, [pc, #80]	; 1998c <fts_children@@Base+0x2268>
   19938:	ldr	r0, [pc, #84]	; 19994 <fts_children@@Base+0x2270>
   1993c:	bl	116cc <__assert_fail@plt>
   19940:	ldr	r3, [pc, #64]	; 19988 <fts_children@@Base+0x2264>
   19944:	mov	r2, #162	; 0xa2
   19948:	ldr	r1, [pc, #60]	; 1998c <fts_children@@Base+0x2268>
   1994c:	ldr	r0, [pc, #68]	; 19998 <fts_children@@Base+0x2274>
   19950:	bl	116cc <__assert_fail@plt>
   19954:	ldr	r3, [pc, #44]	; 19988 <fts_children@@Base+0x2264>
   19958:	mov	r2, #127	; 0x7f
   1995c:	ldr	r1, [pc, #40]	; 1998c <fts_children@@Base+0x2268>
   19960:	ldr	r0, [pc, #52]	; 1999c <fts_children@@Base+0x2278>
   19964:	bl	116cc <__assert_fail@plt>
   19968:	ldr	r3, [pc, #24]	; 19988 <fts_children@@Base+0x2264>
   1996c:	mov	r2, #126	; 0x7e
   19970:	ldr	r1, [pc, #20]	; 1998c <fts_children@@Base+0x2268>
   19974:	ldr	r0, [pc, #36]	; 199a0 <fts_children@@Base+0x227c>
   19978:	bl	116cc <__assert_fail@plt>
   1997c:	andeq	fp, r2, r0, lsl #30
   19980:			; <UNDEFINED> instruction: 0x0001b6b8
   19984:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19988:	andeq	fp, r1, ip, lsl #12
   1998c:	andeq	fp, r1, r8, lsl r6
   19990:	andeq	fp, r1, ip, ror #12
   19994:	andeq	fp, r1, ip, asr r6
   19998:	andeq	fp, r1, r0, asr r6
   1999c:	andeq	fp, r1, r4, asr #12
   199a0:	andeq	fp, r1, ip, lsr r6
   199a4:	push	{r4, r5, lr}
   199a8:	sub	sp, sp, #12
   199ac:	mov	r4, r0
   199b0:	bl	11588 <fileno@plt>
   199b4:	cmp	r0, #0
   199b8:	mov	r0, r4
   199bc:	blt	19a38 <fts_children@@Base+0x2314>
   199c0:	bl	114bc <__freading@plt>
   199c4:	cmp	r0, #0
   199c8:	bne	19a04 <fts_children@@Base+0x22e0>
   199cc:	mov	r0, r4
   199d0:	bl	19b90 <fts_children@@Base+0x246c>
   199d4:	cmp	r0, #0
   199d8:	beq	19a34 <fts_children@@Base+0x2310>
   199dc:	bl	1154c <__errno_location@plt>
   199e0:	mov	r5, r0
   199e4:	mov	r0, r4
   199e8:	ldr	r4, [r5]
   199ec:	bl	115c4 <fclose@plt>
   199f0:	cmp	r4, #0
   199f4:	mvnne	r0, #0
   199f8:	strne	r4, [r5]
   199fc:	add	sp, sp, #12
   19a00:	pop	{r4, r5, pc}
   19a04:	mov	r0, r4
   19a08:	bl	11588 <fileno@plt>
   19a0c:	mov	r3, #1
   19a10:	str	r3, [sp]
   19a14:	mov	r2, #0
   19a18:	mov	r3, #0
   19a1c:	bl	11438 <lseek64@plt>
   19a20:	mvn	r3, #0
   19a24:	mvn	r2, #0
   19a28:	cmp	r1, r3
   19a2c:	cmpeq	r0, r2
   19a30:	bne	199cc <fts_children@@Base+0x22a8>
   19a34:	mov	r0, r4
   19a38:	add	sp, sp, #12
   19a3c:	pop	{r4, r5, lr}
   19a40:	b	115c4 <fclose@plt>
   19a44:	push	{r1, r2, r3}
   19a48:	push	{r4, r5, r6, r7, r8, lr}
   19a4c:	sub	sp, sp, #12
   19a50:	ldr	r4, [pc, #300]	; 19b84 <fts_children@@Base+0x2460>
   19a54:	ldr	r3, [pc, #300]	; 19b88 <fts_children@@Base+0x2464>
   19a58:	ldr	r1, [sp, #36]	; 0x24
   19a5c:	ldr	r2, [r4]
   19a60:	cmp	r1, r3
   19a64:	add	r3, sp, #40	; 0x28
   19a68:	str	r2, [sp, #4]
   19a6c:	str	r3, [sp]
   19a70:	bne	19b3c <fts_children@@Base+0x2418>
   19a74:	ldr	r6, [pc, #272]	; 19b8c <fts_children@@Base+0x2468>
   19a78:	add	r3, sp, #44	; 0x2c
   19a7c:	str	r3, [sp]
   19a80:	ldr	r3, [r6]
   19a84:	ldr	r7, [sp, #40]	; 0x28
   19a88:	cmp	r3, #0
   19a8c:	blt	19ad0 <fts_children@@Base+0x23ac>
   19a90:	mov	r2, r7
   19a94:	mov	r8, r0
   19a98:	bl	115dc <fcntl64@plt>
   19a9c:	subs	r5, r0, #0
   19aa0:	blt	19b4c <fts_children@@Base+0x2428>
   19aa4:	mov	r3, #1
   19aa8:	str	r3, [r6]
   19aac:	ldr	r2, [sp, #4]
   19ab0:	ldr	r3, [r4]
   19ab4:	mov	r0, r5
   19ab8:	cmp	r2, r3
   19abc:	bne	19b80 <fts_children@@Base+0x245c>
   19ac0:	add	sp, sp, #12
   19ac4:	pop	{r4, r5, r6, r7, r8, lr}
   19ac8:	add	sp, sp, #12
   19acc:	bx	lr
   19ad0:	mov	r2, r7
   19ad4:	mov	r1, #0
   19ad8:	bl	19a44 <fts_children@@Base+0x2320>
   19adc:	subs	r5, r0, #0
   19ae0:	blt	19aac <fts_children@@Base+0x2388>
   19ae4:	ldr	r3, [r6]
   19ae8:	cmn	r3, #1
   19aec:	bne	19aac <fts_children@@Base+0x2388>
   19af0:	mov	r1, #1
   19af4:	mov	r0, r5
   19af8:	bl	115dc <fcntl64@plt>
   19afc:	subs	r2, r0, #0
   19b00:	blt	19b1c <fts_children@@Base+0x23f8>
   19b04:	orr	r2, r2, #1
   19b08:	mov	r1, #2
   19b0c:	mov	r0, r5
   19b10:	bl	115dc <fcntl64@plt>
   19b14:	cmn	r0, #1
   19b18:	bne	19aac <fts_children@@Base+0x2388>
   19b1c:	bl	1154c <__errno_location@plt>
   19b20:	mov	r6, r0
   19b24:	mov	r0, r5
   19b28:	ldr	r7, [r6]
   19b2c:	mvn	r5, #0
   19b30:	bl	1169c <close@plt>
   19b34:	str	r7, [r6]
   19b38:	b	19aac <fts_children@@Base+0x2388>
   19b3c:	ldr	r2, [sp, #40]	; 0x28
   19b40:	bl	115dc <fcntl64@plt>
   19b44:	mov	r5, r0
   19b48:	b	19aac <fts_children@@Base+0x2388>
   19b4c:	bl	1154c <__errno_location@plt>
   19b50:	ldr	r3, [r0]
   19b54:	cmp	r3, #22
   19b58:	bne	19aa4 <fts_children@@Base+0x2380>
   19b5c:	mov	r2, r7
   19b60:	mov	r0, r8
   19b64:	mov	r1, #0
   19b68:	bl	19a44 <fts_children@@Base+0x2320>
   19b6c:	subs	r5, r0, #0
   19b70:	mvnge	r3, #0
   19b74:	strge	r3, [r6]
   19b78:	bge	19af0 <fts_children@@Base+0x23cc>
   19b7c:	b	19aac <fts_children@@Base+0x2388>
   19b80:	bl	113c0 <__stack_chk_fail@plt>
   19b84:	andeq	fp, r2, r0, lsl #30
   19b88:	andeq	r0, r0, r6, lsl #8
   19b8c:	andeq	ip, r2, r8, lsr r3
   19b90:	push	{r4, lr}
   19b94:	subs	r4, r0, #0
   19b98:	sub	sp, sp, #8
   19b9c:	beq	19bb8 <fts_children@@Base+0x2494>
   19ba0:	bl	114bc <__freading@plt>
   19ba4:	cmp	r0, #0
   19ba8:	beq	19bb8 <fts_children@@Base+0x2494>
   19bac:	ldr	r3, [r4]
   19bb0:	tst	r3, #256	; 0x100
   19bb4:	bne	19bc8 <fts_children@@Base+0x24a4>
   19bb8:	mov	r0, r4
   19bbc:	add	sp, sp, #8
   19bc0:	pop	{r4, lr}
   19bc4:	b	1133c <fflush@plt>
   19bc8:	mov	r3, #1
   19bcc:	str	r3, [sp]
   19bd0:	mov	r2, #0
   19bd4:	mov	r3, #0
   19bd8:	mov	r0, r4
   19bdc:	bl	19bf0 <fts_children@@Base+0x24cc>
   19be0:	mov	r0, r4
   19be4:	add	sp, sp, #8
   19be8:	pop	{r4, lr}
   19bec:	b	1133c <fflush@plt>
   19bf0:	push	{r4, r5, r6, r7, r8, lr}
   19bf4:	sub	sp, sp, #8
   19bf8:	ldmib	r0, {ip, lr}
   19bfc:	mov	r4, r0
   19c00:	ldr	r5, [sp, #32]
   19c04:	cmp	lr, ip
   19c08:	beq	19c20 <fts_children@@Base+0x24fc>
   19c0c:	str	r5, [sp, #32]
   19c10:	mov	r0, r4
   19c14:	add	sp, sp, #8
   19c18:	pop	{r4, r5, r6, r7, r8, lr}
   19c1c:	b	115d0 <fseeko64@plt>
   19c20:	ldr	lr, [r0, #20]
   19c24:	ldr	ip, [r0, #16]
   19c28:	cmp	lr, ip
   19c2c:	bne	19c0c <fts_children@@Base+0x24e8>
   19c30:	ldr	r8, [r0, #36]	; 0x24
   19c34:	cmp	r8, #0
   19c38:	bne	19c0c <fts_children@@Base+0x24e8>
   19c3c:	mov	r6, r2
   19c40:	mov	r7, r3
   19c44:	bl	11588 <fileno@plt>
   19c48:	mov	r2, r6
   19c4c:	mov	r3, r7
   19c50:	str	r5, [sp]
   19c54:	bl	11438 <lseek64@plt>
   19c58:	mvn	r3, #0
   19c5c:	mvn	r2, #0
   19c60:	cmp	r1, r3
   19c64:	cmpeq	r0, r2
   19c68:	beq	19c88 <fts_children@@Base+0x2564>
   19c6c:	ldr	r3, [r4]
   19c70:	strd	r0, [r4, #80]	; 0x50
   19c74:	mov	r0, r8
   19c78:	bic	r3, r3, #16
   19c7c:	str	r3, [r4]
   19c80:	add	sp, sp, #8
   19c84:	pop	{r4, r5, r6, r7, r8, pc}
   19c88:	mvn	r0, #0
   19c8c:	b	19c80 <fts_children@@Base+0x255c>
   19c90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19c94:	mov	r5, r2
   19c98:	ldr	r6, [pc, #264]	; 19da8 <fts_children@@Base+0x2684>
   19c9c:	ldrb	r3, [r2]
   19ca0:	sub	sp, sp, #48	; 0x30
   19ca4:	ldr	r2, [r6]
   19ca8:	cmp	r3, #0
   19cac:	mov	r4, r0
   19cb0:	str	r2, [sp, #44]	; 0x2c
   19cb4:	strbeq	r3, [r0]
   19cb8:	beq	19d14 <fts_children@@Base+0x25f0>
   19cbc:	ldr	r8, [pc, #232]	; 19dac <fts_children@@Base+0x2688>
   19cc0:	mov	r9, r1
   19cc4:	ldr	r7, [r8]
   19cc8:	cmp	r7, #0
   19ccc:	beq	19d40 <fts_children@@Base+0x261c>
   19cd0:	cmp	r7, #0
   19cd4:	blt	19d38 <fts_children@@Base+0x2614>
   19cd8:	mov	r0, r5
   19cdc:	bl	11528 <strlen@plt>
   19ce0:	add	r0, r0, #27
   19ce4:	cmp	r0, #4032	; 0xfc0
   19ce8:	bhi	19d2c <fts_children@@Base+0x2608>
   19cec:	ldr	r3, [pc, #188]	; 19db0 <fts_children@@Base+0x268c>
   19cf0:	mvn	r2, #0
   19cf4:	mov	r1, #1
   19cf8:	str	r9, [sp]
   19cfc:	mov	r0, r4
   19d00:	bl	11558 <__sprintf_chk@plt>
   19d04:	mov	r1, r5
   19d08:	add	r0, r4, r0
   19d0c:	bl	11450 <strcpy@plt>
   19d10:	mov	r0, r4
   19d14:	ldr	r2, [sp, #44]	; 0x2c
   19d18:	ldr	r3, [r6]
   19d1c:	cmp	r2, r3
   19d20:	bne	19da4 <fts_children@@Base+0x2680>
   19d24:	add	sp, sp, #48	; 0x30
   19d28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d2c:	bl	114a4 <malloc@plt>
   19d30:	subs	r4, r0, #0
   19d34:	bne	19cec <fts_children@@Base+0x25c8>
   19d38:	mov	r0, #0
   19d3c:	b	19d14 <fts_children@@Base+0x25f0>
   19d40:	mov	r1, #18688	; 0x4900
   19d44:	ldr	r0, [pc, #104]	; 19db4 <fts_children@@Base+0x2690>
   19d48:	bl	1148c <open64@plt>
   19d4c:	subs	sl, r0, #0
   19d50:	mvnlt	r3, #0
   19d54:	movlt	r0, r7
   19d58:	strlt	r3, [r8]
   19d5c:	blt	19d14 <fts_children@@Base+0x25f0>
   19d60:	ldr	r3, [pc, #80]	; 19db8 <fts_children@@Base+0x2694>
   19d64:	mov	r2, #32
   19d68:	mov	r1, #1
   19d6c:	str	sl, [sp]
   19d70:	add	r0, sp, #12
   19d74:	bl	11558 <__sprintf_chk@plt>
   19d78:	mov	r1, r7
   19d7c:	add	r0, sp, #12
   19d80:	bl	115b8 <access@plt>
   19d84:	cmp	r0, #0
   19d88:	mvnne	r3, #0
   19d8c:	moveq	r3, #1
   19d90:	mov	r0, sl
   19d94:	str	r3, [r8]
   19d98:	bl	1169c <close@plt>
   19d9c:	ldr	r7, [r8]
   19da0:	b	19cd0 <fts_children@@Base+0x25ac>
   19da4:	bl	113c0 <__stack_chk_fail@plt>
   19da8:	andeq	fp, r2, r0, lsl #30
   19dac:	andeq	ip, r2, ip, lsr r3
   19db0:	andeq	fp, r1, r8, lsr #13
   19db4:	andeq	fp, r1, r0, lsl #13
   19db8:	muleq	r1, r0, r6
   19dbc:	mov	r2, #3
   19dc0:	mov	r1, #0
   19dc4:	b	19a44 <fts_children@@Base+0x2320>
   19dc8:	subs	r2, r1, #1
   19dcc:	bxeq	lr
   19dd0:	bcc	19fa8 <fts_children@@Base+0x2884>
   19dd4:	cmp	r0, r1
   19dd8:	bls	19f8c <fts_children@@Base+0x2868>
   19ddc:	tst	r1, r2
   19de0:	beq	19f98 <fts_children@@Base+0x2874>
   19de4:	clz	r3, r0
   19de8:	clz	r2, r1
   19dec:	sub	r3, r2, r3
   19df0:	rsbs	r3, r3, #31
   19df4:	addne	r3, r3, r3, lsl #1
   19df8:	mov	r2, #0
   19dfc:	addne	pc, pc, r3, lsl #2
   19e00:	nop			; (mov r0, r0)
   19e04:	cmp	r0, r1, lsl #31
   19e08:	adc	r2, r2, r2
   19e0c:	subcs	r0, r0, r1, lsl #31
   19e10:	cmp	r0, r1, lsl #30
   19e14:	adc	r2, r2, r2
   19e18:	subcs	r0, r0, r1, lsl #30
   19e1c:	cmp	r0, r1, lsl #29
   19e20:	adc	r2, r2, r2
   19e24:	subcs	r0, r0, r1, lsl #29
   19e28:	cmp	r0, r1, lsl #28
   19e2c:	adc	r2, r2, r2
   19e30:	subcs	r0, r0, r1, lsl #28
   19e34:	cmp	r0, r1, lsl #27
   19e38:	adc	r2, r2, r2
   19e3c:	subcs	r0, r0, r1, lsl #27
   19e40:	cmp	r0, r1, lsl #26
   19e44:	adc	r2, r2, r2
   19e48:	subcs	r0, r0, r1, lsl #26
   19e4c:	cmp	r0, r1, lsl #25
   19e50:	adc	r2, r2, r2
   19e54:	subcs	r0, r0, r1, lsl #25
   19e58:	cmp	r0, r1, lsl #24
   19e5c:	adc	r2, r2, r2
   19e60:	subcs	r0, r0, r1, lsl #24
   19e64:	cmp	r0, r1, lsl #23
   19e68:	adc	r2, r2, r2
   19e6c:	subcs	r0, r0, r1, lsl #23
   19e70:	cmp	r0, r1, lsl #22
   19e74:	adc	r2, r2, r2
   19e78:	subcs	r0, r0, r1, lsl #22
   19e7c:	cmp	r0, r1, lsl #21
   19e80:	adc	r2, r2, r2
   19e84:	subcs	r0, r0, r1, lsl #21
   19e88:	cmp	r0, r1, lsl #20
   19e8c:	adc	r2, r2, r2
   19e90:	subcs	r0, r0, r1, lsl #20
   19e94:	cmp	r0, r1, lsl #19
   19e98:	adc	r2, r2, r2
   19e9c:	subcs	r0, r0, r1, lsl #19
   19ea0:	cmp	r0, r1, lsl #18
   19ea4:	adc	r2, r2, r2
   19ea8:	subcs	r0, r0, r1, lsl #18
   19eac:	cmp	r0, r1, lsl #17
   19eb0:	adc	r2, r2, r2
   19eb4:	subcs	r0, r0, r1, lsl #17
   19eb8:	cmp	r0, r1, lsl #16
   19ebc:	adc	r2, r2, r2
   19ec0:	subcs	r0, r0, r1, lsl #16
   19ec4:	cmp	r0, r1, lsl #15
   19ec8:	adc	r2, r2, r2
   19ecc:	subcs	r0, r0, r1, lsl #15
   19ed0:	cmp	r0, r1, lsl #14
   19ed4:	adc	r2, r2, r2
   19ed8:	subcs	r0, r0, r1, lsl #14
   19edc:	cmp	r0, r1, lsl #13
   19ee0:	adc	r2, r2, r2
   19ee4:	subcs	r0, r0, r1, lsl #13
   19ee8:	cmp	r0, r1, lsl #12
   19eec:	adc	r2, r2, r2
   19ef0:	subcs	r0, r0, r1, lsl #12
   19ef4:	cmp	r0, r1, lsl #11
   19ef8:	adc	r2, r2, r2
   19efc:	subcs	r0, r0, r1, lsl #11
   19f00:	cmp	r0, r1, lsl #10
   19f04:	adc	r2, r2, r2
   19f08:	subcs	r0, r0, r1, lsl #10
   19f0c:	cmp	r0, r1, lsl #9
   19f10:	adc	r2, r2, r2
   19f14:	subcs	r0, r0, r1, lsl #9
   19f18:	cmp	r0, r1, lsl #8
   19f1c:	adc	r2, r2, r2
   19f20:	subcs	r0, r0, r1, lsl #8
   19f24:	cmp	r0, r1, lsl #7
   19f28:	adc	r2, r2, r2
   19f2c:	subcs	r0, r0, r1, lsl #7
   19f30:	cmp	r0, r1, lsl #6
   19f34:	adc	r2, r2, r2
   19f38:	subcs	r0, r0, r1, lsl #6
   19f3c:	cmp	r0, r1, lsl #5
   19f40:	adc	r2, r2, r2
   19f44:	subcs	r0, r0, r1, lsl #5
   19f48:	cmp	r0, r1, lsl #4
   19f4c:	adc	r2, r2, r2
   19f50:	subcs	r0, r0, r1, lsl #4
   19f54:	cmp	r0, r1, lsl #3
   19f58:	adc	r2, r2, r2
   19f5c:	subcs	r0, r0, r1, lsl #3
   19f60:	cmp	r0, r1, lsl #2
   19f64:	adc	r2, r2, r2
   19f68:	subcs	r0, r0, r1, lsl #2
   19f6c:	cmp	r0, r1, lsl #1
   19f70:	adc	r2, r2, r2
   19f74:	subcs	r0, r0, r1, lsl #1
   19f78:	cmp	r0, r1
   19f7c:	adc	r2, r2, r2
   19f80:	subcs	r0, r0, r1
   19f84:	mov	r0, r2
   19f88:	bx	lr
   19f8c:	moveq	r0, #1
   19f90:	movne	r0, #0
   19f94:	bx	lr
   19f98:	clz	r2, r1
   19f9c:	rsb	r2, r2, #31
   19fa0:	lsr	r0, r0, r2
   19fa4:	bx	lr
   19fa8:	cmp	r0, #0
   19fac:	mvnne	r0, #0
   19fb0:	b	1a010 <fts_children@@Base+0x28ec>
   19fb4:	cmp	r1, #0
   19fb8:	beq	19fa8 <fts_children@@Base+0x2884>
   19fbc:	push	{r0, r1, lr}
   19fc0:	bl	19dc8 <fts_children@@Base+0x26a4>
   19fc4:	pop	{r1, r2, lr}
   19fc8:	mul	r3, r2, r0
   19fcc:	sub	r1, r1, r3
   19fd0:	bx	lr
   19fd4:	cmp	r3, #0
   19fd8:	cmpeq	r2, #0
   19fdc:	bne	19ff4 <fts_children@@Base+0x28d0>
   19fe0:	cmp	r1, #0
   19fe4:	cmpeq	r0, #0
   19fe8:	mvnne	r1, #0
   19fec:	mvnne	r0, #0
   19ff0:	b	1a010 <fts_children@@Base+0x28ec>
   19ff4:	sub	sp, sp, #8
   19ff8:	push	{sp, lr}
   19ffc:	bl	1a020 <fts_children@@Base+0x28fc>
   1a000:	ldr	lr, [sp, #4]
   1a004:	add	sp, sp, #8
   1a008:	pop	{r2, r3}
   1a00c:	bx	lr
   1a010:	push	{r1, lr}
   1a014:	mov	r0, #8
   1a018:	bl	11324 <raise@plt>
   1a01c:	pop	{r1, pc}
   1a020:	cmp	r1, r3
   1a024:	cmpeq	r0, r2
   1a028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a02c:	mov	r4, r0
   1a030:	movcc	r0, #0
   1a034:	mov	r5, r1
   1a038:	ldr	lr, [sp, #36]	; 0x24
   1a03c:	movcc	r1, r0
   1a040:	bcc	1a13c <fts_children@@Base+0x2a18>
   1a044:	cmp	r3, #0
   1a048:	clzeq	ip, r2
   1a04c:	clzne	ip, r3
   1a050:	addeq	ip, ip, #32
   1a054:	cmp	r5, #0
   1a058:	clzeq	r1, r4
   1a05c:	addeq	r1, r1, #32
   1a060:	clzne	r1, r5
   1a064:	sub	ip, ip, r1
   1a068:	sub	sl, ip, #32
   1a06c:	lsl	r9, r3, ip
   1a070:	rsb	fp, ip, #32
   1a074:	orr	r9, r9, r2, lsl sl
   1a078:	orr	r9, r9, r2, lsr fp
   1a07c:	lsl	r8, r2, ip
   1a080:	cmp	r5, r9
   1a084:	cmpeq	r4, r8
   1a088:	movcc	r0, #0
   1a08c:	movcc	r1, r0
   1a090:	bcc	1a0ac <fts_children@@Base+0x2988>
   1a094:	mov	r0, #1
   1a098:	subs	r4, r4, r8
   1a09c:	lsl	r1, r0, sl
   1a0a0:	orr	r1, r1, r0, lsr fp
   1a0a4:	lsl	r0, r0, ip
   1a0a8:	sbc	r5, r5, r9
   1a0ac:	cmp	ip, #0
   1a0b0:	beq	1a13c <fts_children@@Base+0x2a18>
   1a0b4:	lsr	r6, r8, #1
   1a0b8:	orr	r6, r6, r9, lsl #31
   1a0bc:	lsr	r7, r9, #1
   1a0c0:	mov	r2, ip
   1a0c4:	b	1a0e8 <fts_children@@Base+0x29c4>
   1a0c8:	subs	r3, r4, r6
   1a0cc:	sbc	r8, r5, r7
   1a0d0:	adds	r3, r3, r3
   1a0d4:	adc	r8, r8, r8
   1a0d8:	adds	r4, r3, #1
   1a0dc:	adc	r5, r8, #0
   1a0e0:	subs	r2, r2, #1
   1a0e4:	beq	1a104 <fts_children@@Base+0x29e0>
   1a0e8:	cmp	r5, r7
   1a0ec:	cmpeq	r4, r6
   1a0f0:	bcs	1a0c8 <fts_children@@Base+0x29a4>
   1a0f4:	adds	r4, r4, r4
   1a0f8:	adc	r5, r5, r5
   1a0fc:	subs	r2, r2, #1
   1a100:	bne	1a0e8 <fts_children@@Base+0x29c4>
   1a104:	lsr	r3, r4, ip
   1a108:	orr	r3, r3, r5, lsl fp
   1a10c:	lsr	r2, r5, ip
   1a110:	orr	r3, r3, r5, lsr sl
   1a114:	adds	r0, r0, r4
   1a118:	mov	r4, r3
   1a11c:	lsl	r3, r2, ip
   1a120:	orr	r3, r3, r4, lsl sl
   1a124:	lsl	ip, r4, ip
   1a128:	orr	r3, r3, r4, lsr fp
   1a12c:	adc	r1, r1, r5
   1a130:	subs	r0, r0, ip
   1a134:	mov	r5, r2
   1a138:	sbc	r1, r1, r3
   1a13c:	cmp	lr, #0
   1a140:	strdne	r4, [lr]
   1a144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a148:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a14c:	mov	r7, r0
   1a150:	ldr	r6, [pc, #72]	; 1a1a0 <fts_children@@Base+0x2a7c>
   1a154:	ldr	r5, [pc, #72]	; 1a1a4 <fts_children@@Base+0x2a80>
   1a158:	add	r6, pc, r6
   1a15c:	add	r5, pc, r5
   1a160:	sub	r6, r6, r5
   1a164:	mov	r8, r1
   1a168:	mov	r9, r2
   1a16c:	bl	112e0 <fstatfs64@plt-0x20>
   1a170:	asrs	r6, r6, #2
   1a174:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a178:	mov	r4, #0
   1a17c:	add	r4, r4, #1
   1a180:	ldr	r3, [r5], #4
   1a184:	mov	r2, r9
   1a188:	mov	r1, r8
   1a18c:	mov	r0, r7
   1a190:	blx	r3
   1a194:	cmp	r6, r4
   1a198:	bne	1a17c <fts_children@@Base+0x2a58>
   1a19c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a1a0:	muleq	r1, ip, sp
   1a1a4:	muleq	r1, r4, sp
   1a1a8:	bx	lr
   1a1ac:	ldr	r3, [pc, #12]	; 1a1c0 <fts_children@@Base+0x2a9c>
   1a1b0:	mov	r1, #0
   1a1b4:	add	r3, pc, r3
   1a1b8:	ldr	r2, [r3]
   1a1bc:	b	11564 <__cxa_atexit@plt>
   1a1c0:	andeq	r1, r1, r0, lsr #31

Disassembly of section .fini:

0001a1c4 <.fini>:
   1a1c4:	push	{r3, lr}
   1a1c8:	pop	{r3, pc}
