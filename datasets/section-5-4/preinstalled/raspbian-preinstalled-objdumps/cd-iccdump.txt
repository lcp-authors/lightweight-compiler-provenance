
raspbian-preinstalled/cd-iccdump:     file format elf32-littlearm


Disassembly of section .init:

00010790 <.init>:
   10790:	push	{r3, lr}
   10794:	bl	10b18 <cd_icc_to_string@plt+0x260>
   10798:	pop	{r3, pc}

Disassembly of section .plt:

0001079c <g_free@plt-0x14>:
   1079c:	push	{lr}		; (str lr, [sp, #-4]!)
   107a0:	ldr	lr, [pc, #4]	; 107ac <g_free@plt-0x4>
   107a4:	add	lr, pc, lr
   107a8:	ldr	pc, [lr, #8]!
   107ac:	andeq	r0, r1, r8, ror #15

000107b0 <g_free@plt>:
   107b0:	add	ip, pc, #0, 12
   107b4:	add	ip, ip, #16, 20	; 0x10000
   107b8:	ldr	pc, [ip, #2024]!	; 0x7e8

000107bc <abort@plt>:
   107bc:	add	ip, pc, #0, 12
   107c0:	add	ip, ip, #16, 20	; 0x10000
   107c4:	ldr	pc, [ip, #2016]!	; 0x7e0

000107c8 <__libc_start_main@plt>:
   107c8:	add	ip, pc, #0, 12
   107cc:	add	ip, ip, #16, 20	; 0x10000
   107d0:	ldr	pc, [ip, #2008]!	; 0x7d8

000107d4 <g_print@plt>:
   107d4:	add	ip, pc, #0, 12
   107d8:	add	ip, ip, #16, 20	; 0x10000
   107dc:	ldr	pc, [ip, #2000]!	; 0x7d0

000107e0 <g_option_context_free@plt>:
   107e0:	add	ip, pc, #0, 12
   107e4:	add	ip, ip, #16, 20	; 0x10000
   107e8:	ldr	pc, [ip, #1992]!	; 0x7c8

000107ec <__gmon_start__@plt>:
   107ec:	add	ip, pc, #0, 12
   107f0:	add	ip, ip, #16, 20	; 0x10000
   107f4:	ldr	pc, [ip, #1984]!	; 0x7c0

000107f8 <g_object_unref@plt>:
   107f8:	add	ip, pc, #0, 12
   107fc:	add	ip, ip, #16, 20	; 0x10000
   10800:	ldr	pc, [ip, #1976]!	; 0x7b8

00010804 <bindtextdomain@plt>:
   10804:	add	ip, pc, #0, 12
   10808:	add	ip, ip, #16, 20	; 0x10000
   1080c:	ldr	pc, [ip, #1968]!	; 0x7b0

00010810 <bind_textdomain_codeset@plt>:
   10810:	add	ip, pc, #0, 12
   10814:	add	ip, ip, #16, 20	; 0x10000
   10818:	ldr	pc, [ip, #1960]!	; 0x7a8

0001081c <dcgettext@plt>:
   1081c:	add	ip, pc, #0, 12
   10820:	add	ip, ip, #16, 20	; 0x10000
   10824:	ldr	pc, [ip, #1952]!	; 0x7a0

00010828 <cd_icc_load_file@plt>:
   10828:	add	ip, pc, #0, 12
   1082c:	add	ip, ip, #16, 20	; 0x10000
   10830:	ldr	pc, [ip, #1944]!	; 0x798

00010834 <g_option_context_parse@plt>:
   10834:	add	ip, pc, #0, 12
   10838:	add	ip, ip, #16, 20	; 0x10000
   1083c:	ldr	pc, [ip, #1936]!	; 0x790

00010840 <setlocale@plt>:
   10840:	add	ip, pc, #0, 12
   10844:	add	ip, ip, #16, 20	; 0x10000
   10848:	ldr	pc, [ip, #1928]!	; 0x788

0001084c <cmsSetLogErrorHandler@plt>:
   1084c:	add	ip, pc, #0, 12
   10850:	add	ip, ip, #16, 20	; 0x10000
   10854:	ldr	pc, [ip, #1920]!	; 0x780

00010858 <g_set_application_name@plt>:
   10858:	add	ip, pc, #0, 12
   1085c:	add	ip, ip, #16, 20	; 0x10000
   10860:	ldr	pc, [ip, #1912]!	; 0x778

00010864 <__stack_chk_fail@plt>:
   10864:	add	ip, pc, #0, 12
   10868:	add	ip, ip, #16, 20	; 0x10000
   1086c:	ldr	pc, [ip, #1904]!	; 0x770

00010870 <textdomain@plt>:
   10870:	add	ip, pc, #0, 12
   10874:	add	ip, ip, #16, 20	; 0x10000
   10878:	ldr	pc, [ip, #1896]!	; 0x768

0001087c <g_option_context_new@plt>:
   1087c:	add	ip, pc, #0, 12
   10880:	add	ip, ip, #16, 20	; 0x10000
   10884:	ldr	pc, [ip, #1888]!	; 0x760

00010888 <g_error_free@plt>:
   10888:	add	ip, pc, #0, 12
   1088c:	add	ip, ip, #16, 20	; 0x10000
   10890:	ldr	pc, [ip, #1880]!	; 0x758

00010894 <cd_icc_new@plt>:
   10894:	add	ip, pc, #0, 12
   10898:	add	ip, ip, #16, 20	; 0x10000
   1089c:	ldr	pc, [ip, #1872]!	; 0x750

000108a0 <g_file_new_for_path@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #16, 20	; 0x10000
   108a8:	ldr	pc, [ip, #1864]!	; 0x748

000108ac <g_log@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #16, 20	; 0x10000
   108b4:	ldr	pc, [ip, #1856]!	; 0x740

000108b8 <cd_icc_to_string@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #16, 20	; 0x10000
   108c0:	ldr	pc, [ip, #1848]!	; 0x738

Disassembly of section .text:

000108c4 <.text>:
   108c4:	ldr	r3, [pc, #480]	; 10aac <cd_icc_to_string@plt+0x1f4>
   108c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108cc:	sub	sp, sp, #36	; 0x24
   108d0:	ldr	r3, [r3]
   108d4:	mov	r4, #0
   108d8:	str	r0, [sp, #20]
   108dc:	str	r1, [sp, #16]
   108e0:	mov	r0, #6
   108e4:	ldr	r1, [pc, #452]	; 10ab0 <cd_icc_to_string@plt+0x1f8>
   108e8:	str	r3, [sp, #28]
   108ec:	str	r4, [sp, #24]
   108f0:	bl	10840 <setlocale@plt>
   108f4:	ldr	r1, [pc, #440]	; 10ab4 <cd_icc_to_string@plt+0x1fc>
   108f8:	ldr	r0, [pc, #440]	; 10ab8 <cd_icc_to_string@plt+0x200>
   108fc:	bl	10804 <bindtextdomain@plt>
   10900:	ldr	r1, [pc, #436]	; 10abc <cd_icc_to_string@plt+0x204>
   10904:	ldr	r0, [pc, #428]	; 10ab8 <cd_icc_to_string@plt+0x200>
   10908:	bl	10810 <bind_textdomain_codeset@plt>
   1090c:	ldr	r0, [pc, #420]	; 10ab8 <cd_icc_to_string@plt+0x200>
   10910:	bl	10870 <textdomain@plt>
   10914:	ldr	r0, [pc, #420]	; 10ac0 <cd_icc_to_string@plt+0x208>
   10918:	bl	1084c <cmsSetLogErrorHandler@plt>
   1091c:	mov	r0, r4
   10920:	bl	1087c <g_option_context_new@plt>
   10924:	mov	r2, #5
   10928:	ldr	r1, [pc, #404]	; 10ac4 <cd_icc_to_string@plt+0x20c>
   1092c:	add	r9, sp, #24
   10930:	mov	r5, r0
   10934:	str	r0, [sp, #12]
   10938:	mov	r0, r4
   1093c:	bl	1081c <dcgettext@plt>
   10940:	bl	10858 <g_set_application_name@plt>
   10944:	mov	r0, r5
   10948:	mov	r3, r9
   1094c:	add	r2, sp, #16
   10950:	add	r1, sp, #20
   10954:	bl	10834 <g_option_context_parse@plt>
   10958:	cmp	r0, r4
   1095c:	beq	10a80 <cd_icc_to_string@plt+0x1c8>
   10960:	ldr	r3, [sp, #20]
   10964:	cmp	r3, #1
   10968:	movgt	r4, #1
   1096c:	ldrgt	fp, [pc, #340]	; 10ac8 <cd_icc_to_string@plt+0x210>
   10970:	bgt	10988 <cd_icc_to_string@plt+0xd0>
   10974:	b	10a78 <cd_icc_to_string@plt+0x1c0>
   10978:	ldr	r3, [sp, #20]
   1097c:	add	r4, r4, #1
   10980:	cmp	r3, r4
   10984:	ble	10a78 <cd_icc_to_string@plt+0x1c0>
   10988:	ldr	r3, [sp, #16]
   1098c:	lsl	sl, r4, #2
   10990:	ldr	r6, [r3, r4, lsl #2]
   10994:	bl	10894 <cd_icc_new@plt>
   10998:	mov	r5, r0
   1099c:	mov	r0, r6
   109a0:	bl	108a0 <g_file_new_for_path@plt>
   109a4:	mov	r3, #0
   109a8:	str	r9, [sp]
   109ac:	mov	r2, r3
   109b0:	mov	r1, r0
   109b4:	mov	r6, r0
   109b8:	mov	r0, r5
   109bc:	bl	10828 <cd_icc_load_file@plt>
   109c0:	subs	r7, r0, #0
   109c4:	moveq	r8, r7
   109c8:	beq	109e8 <cd_icc_to_string@plt+0x130>
   109cc:	mov	r0, r5
   109d0:	bl	108b8 <cd_icc_to_string@plt>
   109d4:	mov	r7, #1
   109d8:	mov	r1, r0
   109dc:	mov	r8, r0
   109e0:	mov	r0, fp
   109e4:	bl	107d4 <g_print@plt>
   109e8:	cmp	r6, #0
   109ec:	beq	109f8 <cd_icc_to_string@plt+0x140>
   109f0:	mov	r0, r6
   109f4:	bl	107f8 <g_object_unref@plt>
   109f8:	cmp	r5, #0
   109fc:	beq	10a08 <cd_icc_to_string@plt+0x150>
   10a00:	mov	r0, r5
   10a04:	bl	107f8 <g_object_unref@plt>
   10a08:	mov	r0, r8
   10a0c:	bl	107b0 <g_free@plt>
   10a10:	cmp	r7, #0
   10a14:	bne	10978 <cd_icc_to_string@plt+0xc0>
   10a18:	ldr	r1, [sp, #24]
   10a1c:	ldr	r3, [sp, #16]
   10a20:	ldr	r2, [pc, #164]	; 10acc <cd_icc_to_string@plt+0x214>
   10a24:	ldr	r0, [r1, #8]
   10a28:	mov	r1, #16
   10a2c:	str	r0, [sp]
   10a30:	ldr	r0, [pc, #152]	; 10ad0 <cd_icc_to_string@plt+0x218>
   10a34:	ldr	r3, [r3, sl]
   10a38:	bl	108ac <g_log@plt>
   10a3c:	mov	r4, #1
   10a40:	ldr	r0, [sp, #12]
   10a44:	bl	107e0 <g_option_context_free@plt>
   10a48:	ldr	r0, [sp, #24]
   10a4c:	cmp	r0, #0
   10a50:	beq	10a58 <cd_icc_to_string@plt+0x1a0>
   10a54:	bl	10888 <g_error_free@plt>
   10a58:	ldr	r3, [pc, #76]	; 10aac <cd_icc_to_string@plt+0x1f4>
   10a5c:	ldr	r2, [sp, #28]
   10a60:	mov	r0, r4
   10a64:	ldr	r3, [r3]
   10a68:	cmp	r2, r3
   10a6c:	bne	10aa8 <cd_icc_to_string@plt+0x1f0>
   10a70:	add	sp, sp, #36	; 0x24
   10a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a78:	mov	r4, #0
   10a7c:	b	10a40 <cd_icc_to_string@plt+0x188>
   10a80:	mov	r2, #5
   10a84:	ldr	r1, [pc, #72]	; 10ad4 <cd_icc_to_string@plt+0x21c>
   10a88:	bl	1081c <dcgettext@plt>
   10a8c:	ldr	r3, [sp, #24]
   10a90:	mov	r4, #1
   10a94:	ldr	r2, [r3, #8]
   10a98:	mov	r1, r0
   10a9c:	ldr	r0, [pc, #52]	; 10ad8 <cd_icc_to_string@plt+0x220>
   10aa0:	bl	107d4 <g_print@plt>
   10aa4:	b	10a40 <cd_icc_to_string@plt+0x188>
   10aa8:	bl	10864 <__stack_chk_fail@plt>
   10aac:	andeq	r0, r2, r0, ror #28
   10ab0:	muleq	r1, r0, ip
   10ab4:	andeq	r0, r1, r4, lsl #25
   10ab8:	muleq	r1, r4, ip
   10abc:	muleq	r1, ip, ip
   10ac0:	andeq	r0, r1, ip, asr #23
   10ac4:	andeq	r0, r1, r4, lsr #25
   10ac8:	andeq	r0, r1, r0, ror #25
   10acc:	andeq	r0, r1, r4, ror #25
   10ad0:	andeq	r0, r1, r0, lsl #25
   10ad4:	andeq	r0, r1, r0, asr #25
   10ad8:	ldrdeq	r0, [r1], -ip
   10adc:	mov	fp, #0
   10ae0:	mov	lr, #0
   10ae4:	pop	{r1}		; (ldr r1, [sp], #4)
   10ae8:	mov	r2, sp
   10aec:	push	{r2}		; (str r2, [sp, #-4]!)
   10af0:	push	{r0}		; (str r0, [sp, #-4]!)
   10af4:	ldr	ip, [pc, #16]	; 10b0c <cd_icc_to_string@plt+0x254>
   10af8:	push	{ip}		; (str ip, [sp, #-4]!)
   10afc:	ldr	r0, [pc, #12]	; 10b10 <cd_icc_to_string@plt+0x258>
   10b00:	ldr	r3, [pc, #12]	; 10b14 <cd_icc_to_string@plt+0x25c>
   10b04:	bl	107c8 <__libc_start_main@plt>
   10b08:	bl	107bc <abort@plt>
   10b0c:	andeq	r0, r1, ip, asr ip
   10b10:	andeq	r0, r1, r4, asr #17
   10b14:	strdeq	r0, [r1], -ip
   10b18:	ldr	r3, [pc, #20]	; 10b34 <cd_icc_to_string@plt+0x27c>
   10b1c:	ldr	r2, [pc, #20]	; 10b38 <cd_icc_to_string@plt+0x280>
   10b20:	add	r3, pc, r3
   10b24:	ldr	r2, [r3, r2]
   10b28:	cmp	r2, #0
   10b2c:	bxeq	lr
   10b30:	b	107ec <__gmon_start__@plt>
   10b34:	andeq	r0, r1, ip, ror #8
   10b38:	andeq	r0, r0, r8, rrx
   10b3c:	ldr	r0, [pc, #24]	; 10b5c <cd_icc_to_string@plt+0x2a4>
   10b40:	ldr	r3, [pc, #24]	; 10b60 <cd_icc_to_string@plt+0x2a8>
   10b44:	cmp	r3, r0
   10b48:	bxeq	lr
   10b4c:	ldr	r3, [pc, #16]	; 10b64 <cd_icc_to_string@plt+0x2ac>
   10b50:	cmp	r3, #0
   10b54:	bxeq	lr
   10b58:	bx	r3
   10b5c:	andeq	r1, r2, r8
   10b60:	andeq	r1, r2, r8
   10b64:	andeq	r0, r0, r0
   10b68:	ldr	r0, [pc, #36]	; 10b94 <cd_icc_to_string@plt+0x2dc>
   10b6c:	ldr	r1, [pc, #36]	; 10b98 <cd_icc_to_string@plt+0x2e0>
   10b70:	sub	r1, r1, r0
   10b74:	asr	r1, r1, #2
   10b78:	add	r1, r1, r1, lsr #31
   10b7c:	asrs	r1, r1, #1
   10b80:	bxeq	lr
   10b84:	ldr	r3, [pc, #16]	; 10b9c <cd_icc_to_string@plt+0x2e4>
   10b88:	cmp	r3, #0
   10b8c:	bxeq	lr
   10b90:	bx	r3
   10b94:	andeq	r1, r2, r8
   10b98:	andeq	r1, r2, r8
   10b9c:	andeq	r0, r0, r0
   10ba0:	push	{r4, lr}
   10ba4:	ldr	r4, [pc, #24]	; 10bc4 <cd_icc_to_string@plt+0x30c>
   10ba8:	ldrb	r3, [r4]
   10bac:	cmp	r3, #0
   10bb0:	popne	{r4, pc}
   10bb4:	bl	10b3c <cd_icc_to_string@plt+0x284>
   10bb8:	mov	r3, #1
   10bbc:	strb	r3, [r4]
   10bc0:	pop	{r4, pc}
   10bc4:	andeq	r1, r2, r8
   10bc8:	b	10b68 <cd_icc_to_string@plt+0x2b0>
   10bcc:	push	{lr}		; (str lr, [sp, #-4]!)
   10bd0:	sub	sp, sp, #12
   10bd4:	mov	r3, r1
   10bd8:	str	r2, [sp]
   10bdc:	mov	r1, #16
   10be0:	ldr	r2, [pc, #12]	; 10bf4 <cd_icc_to_string@plt+0x33c>
   10be4:	ldr	r0, [pc, #12]	; 10bf8 <cd_icc_to_string@plt+0x340>
   10be8:	bl	108ac <g_log@plt>
   10bec:	add	sp, sp, #12
   10bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   10bf4:	andeq	r0, r1, ip, ror #24
   10bf8:	andeq	r0, r1, r0, lsl #25
   10bfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10c00:	mov	r7, r0
   10c04:	ldr	r6, [pc, #72]	; 10c54 <cd_icc_to_string@plt+0x39c>
   10c08:	ldr	r5, [pc, #72]	; 10c58 <cd_icc_to_string@plt+0x3a0>
   10c0c:	add	r6, pc, r6
   10c10:	add	r5, pc, r5
   10c14:	sub	r6, r6, r5
   10c18:	mov	r8, r1
   10c1c:	mov	r9, r2
   10c20:	bl	10790 <g_free@plt-0x20>
   10c24:	asrs	r6, r6, #2
   10c28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c2c:	mov	r4, #0
   10c30:	add	r4, r4, #1
   10c34:	ldr	r3, [r5], #4
   10c38:	mov	r2, r9
   10c3c:	mov	r1, r8
   10c40:	mov	r0, r7
   10c44:	blx	r3
   10c48:	cmp	r6, r4
   10c4c:	bne	10c30 <cd_icc_to_string@plt+0x378>
   10c50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c54:	andeq	r0, r1, r8, asr #4
   10c58:	andeq	r0, r1, r0, asr #4
   10c5c:	bx	lr

Disassembly of section .fini:

00010c60 <.fini>:
   10c60:	push	{r3, lr}
   10c64:	pop	{r3, pc}
