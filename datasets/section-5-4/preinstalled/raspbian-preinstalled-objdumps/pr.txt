
raspbian-preinstalled/pr:     file format elf32-littlearm


Disassembly of section .init:

000110c4 <.init>:
   110c4:	push	{r3, lr}
   110c8:	bl	12218 <__assert_fail@plt+0xdd4>
   110cc:	pop	{r3, pc}

Disassembly of section .plt:

000110d0 <fdopen@plt-0x14>:
   110d0:	push	{lr}		; (str lr, [sp, #-4]!)
   110d4:	ldr	lr, [pc, #4]	; 110e0 <fdopen@plt-0x4>
   110d8:	add	lr, pc, lr
   110dc:	ldr	pc, [lr, #8]!
   110e0:	andeq	sp, r1, r0, lsr #30

000110e4 <fdopen@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #118784	; 0x1d000
   110ec:	ldr	pc, [ip, #3872]!	; 0xf20

000110f0 <calloc@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #118784	; 0x1d000
   110f8:	ldr	pc, [ip, #3864]!	; 0xf18

000110fc <fputs_unlocked@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #118784	; 0x1d000
   11104:	ldr	pc, [ip, #3856]!	; 0xf10

00011108 <raise@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #118784	; 0x1d000
   11110:	ldr	pc, [ip, #3848]!	; 0xf08

00011114 <gmtime_r@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #118784	; 0x1d000
   1111c:	ldr	pc, [ip, #3840]!	; 0xf00

00011120 <strcmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #118784	; 0x1d000
   11128:	ldr	pc, [ip, #3832]!	; 0xef8

0001112c <strtol@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #118784	; 0x1d000
   11134:	ldr	pc, [ip, #3824]!	; 0xef0

00011138 <posix_fadvise64@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #118784	; 0x1d000
   11140:	ldr	pc, [ip, #3816]!	; 0xee8

00011144 <mktime@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #118784	; 0x1d000
   1114c:	ldr	pc, [ip, #3808]!	; 0xee0

00011150 <fflush@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #118784	; 0x1d000
   11158:	ldr	pc, [ip, #3800]!	; 0xed8

0001115c <wcwidth@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #118784	; 0x1d000
   11164:	ldr	pc, [ip, #3792]!	; 0xed0

00011168 <free@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #118784	; 0x1d000
   11170:	ldr	pc, [ip, #3784]!	; 0xec8

00011174 <clock_gettime@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #118784	; 0x1d000
   1117c:	ldr	pc, [ip, #3776]!	; 0xec0

00011180 <_exit@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #118784	; 0x1d000
   11188:	ldr	pc, [ip, #3768]!	; 0xeb8

0001118c <memcpy@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #118784	; 0x1d000
   11194:	ldr	pc, [ip, #3760]!	; 0xeb0

00011198 <__strtoull_internal@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #118784	; 0x1d000
   111a0:	ldr	pc, [ip, #3752]!	; 0xea8

000111a4 <mbsinit@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #118784	; 0x1d000
   111ac:	ldr	pc, [ip, #3744]!	; 0xea0

000111b0 <memcmp@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #118784	; 0x1d000
   111b8:	ldr	pc, [ip, #3736]!	; 0xe98

000111bc <dcgettext@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #118784	; 0x1d000
   111c4:	ldr	pc, [ip, #3728]!	; 0xe90

000111c8 <__stack_chk_fail@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #118784	; 0x1d000
   111d0:	ldr	pc, [ip, #3720]!	; 0xe88

000111d4 <realloc@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #118784	; 0x1d000
   111dc:	ldr	pc, [ip, #3712]!	; 0xe80

000111e0 <localtime_r@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #118784	; 0x1d000
   111e8:	ldr	pc, [ip, #3704]!	; 0xe78

000111ec <textdomain@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #118784	; 0x1d000
   111f4:	ldr	pc, [ip, #3696]!	; 0xe70

000111f8 <iswcntrl@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #118784	; 0x1d000
   11200:	ldr	pc, [ip, #3688]!	; 0xe68

00011204 <iswprint@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #118784	; 0x1d000
   1120c:	ldr	pc, [ip, #3680]!	; 0xe60

00011210 <tzset@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #118784	; 0x1d000
   11218:	ldr	pc, [ip, #3672]!	; 0xe58

0001121c <__fxstat64@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #118784	; 0x1d000
   11224:	ldr	pc, [ip, #3664]!	; 0xe50

00011228 <fwrite@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #118784	; 0x1d000
   11230:	ldr	pc, [ip, #3656]!	; 0xe48

00011234 <lseek64@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #118784	; 0x1d000
   1123c:	ldr	pc, [ip, #3648]!	; 0xe40

00011240 <__ctype_get_mb_cur_max@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #118784	; 0x1d000
   11248:	ldr	pc, [ip, #3640]!	; 0xe38

0001124c <gettimeofday@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #118784	; 0x1d000
   11254:	ldr	pc, [ip, #3632]!	; 0xe30

00011258 <__fpending@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #118784	; 0x1d000
   11260:	ldr	pc, [ip, #3624]!	; 0xe28

00011264 <mbrtowc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #118784	; 0x1d000
   1126c:	ldr	pc, [ip, #3616]!	; 0xe20

00011270 <error@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #118784	; 0x1d000
   11278:	ldr	pc, [ip, #3608]!	; 0xe18

0001127c <getenv@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #118784	; 0x1d000
   11284:	ldr	pc, [ip, #3600]!	; 0xe10

00011288 <malloc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3592]!	; 0xe08

00011294 <__libc_start_main@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3584]!	; 0xe00

000112a0 <strftime@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ac <__freading@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112b8 <__ctype_tolower_loc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3560]!	; 0xde8

000112c4 <__ctype_toupper_loc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3552]!	; 0xde0

000112d0 <__gmon_start__@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112dc <getopt_long@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3536]!	; 0xdd0

000112e8 <__ctype_b_loc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f4 <exit@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3520]!	; 0xdc0

00011300 <strlen@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3512]!	; 0xdb8

0001130c <strchr@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3504]!	; 0xdb0

00011318 <setenv@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3496]!	; 0xda8

00011324 <ungetc@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3488]!	; 0xda0

00011330 <__errno_location@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3480]!	; 0xd98

0001133c <__sprintf_chk@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3472]!	; 0xd90

00011348 <__cxa_atexit@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3464]!	; 0xd88

00011354 <memset@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3456]!	; 0xd80

00011360 <__printf_chk@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3448]!	; 0xd78

0001136c <fileno@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3440]!	; 0xd70

00011378 <__fprintf_chk@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3432]!	; 0xd68

00011384 <fclose@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3424]!	; 0xd60

00011390 <fseeko64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3416]!	; 0xd58

0001139c <fcntl64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3408]!	; 0xd50

000113a8 <__uflow@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3400]!	; 0xd48

000113b4 <__overflow@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3392]!	; 0xd40

000113c0 <setlocale@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3384]!	; 0xd38

000113cc <strrchr@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3376]!	; 0xd30

000113d8 <nl_langinfo@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3368]!	; 0xd28

000113e4 <timegm@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3360]!	; 0xd20

000113f0 <__strtoll_internal@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #118784	; 0x1d000
   113f8:	ldr	pc, [ip, #3352]!	; 0xd18

000113fc <fopen64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #118784	; 0x1d000
   11404:	ldr	pc, [ip, #3344]!	; 0xd10

00011408 <bindtextdomain@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #118784	; 0x1d000
   11410:	ldr	pc, [ip, #3336]!	; 0xd08

00011414 <unsetenv@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #118784	; 0x1d000
   1141c:	ldr	pc, [ip, #3328]!	; 0xd00

00011420 <strncmp@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #118784	; 0x1d000
   11428:	ldr	pc, [ip, #3320]!	; 0xcf8

0001142c <abort@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #118784	; 0x1d000
   11434:	ldr	pc, [ip, #3312]!	; 0xcf0

00011438 <close@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #118784	; 0x1d000
   11440:	ldr	pc, [ip, #3304]!	; 0xce8

00011444 <__assert_fail@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #118784	; 0x1d000
   1144c:	ldr	pc, [ip, #3296]!	; 0xce0

Disassembly of section .text:

00011450 <.text>:
   11450:	ldr	r3, [pc, #3320]	; 12150 <__assert_fail@plt+0xd0c>
   11454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11458:	sub	sp, sp, #68	; 0x44
   1145c:	ldr	r3, [r3]
   11460:	mov	r4, r0
   11464:	mov	r6, #0
   11468:	ldr	r0, [r1]
   1146c:	str	r3, [sp, #60]	; 0x3c
   11470:	mov	r5, r1
   11474:	str	r6, [sp, #52]	; 0x34
   11478:	bl	16aec <__assert_fail@plt+0x56a8>
   1147c:	ldr	r1, [pc, #3280]	; 12154 <__assert_fail@plt+0xd10>
   11480:	mov	r0, #6
   11484:	bl	113c0 <setlocale@plt>
   11488:	ldr	r1, [pc, #3272]	; 12158 <__assert_fail@plt+0xd14>
   1148c:	ldr	r0, [pc, #3272]	; 1215c <__assert_fail@plt+0xd18>
   11490:	bl	11408 <bindtextdomain@plt>
   11494:	ldr	r0, [pc, #3264]	; 1215c <__assert_fail@plt+0xd18>
   11498:	bl	111ec <textdomain@plt>
   1149c:	ldr	r0, [pc, #3260]	; 12160 <__assert_fail@plt+0xd1c>
   114a0:	bl	1c4c4 <__assert_fail@plt+0xb080>
   114a4:	cmp	r4, #1
   114a8:	ble	11fcc <__assert_fail@plt+0xb88>
   114ac:	sub	r0, r4, #1
   114b0:	lsrs	r3, r0, #30
   114b4:	movne	r3, #1
   114b8:	moveq	r3, r6
   114bc:	lsls	r0, r0, #2
   114c0:	bmi	120f0 <__assert_fail@plt+0xcac>
   114c4:	cmp	r3, r6
   114c8:	bne	120f0 <__assert_fail@plt+0xcac>
   114cc:	bl	192cc <__assert_fail@plt+0x7e88>
   114d0:	str	r0, [sp, #44]	; 0x2c
   114d4:	mov	sl, #0
   114d8:	ldr	r8, [pc, #3204]	; 12164 <__assert_fail@plt+0xd20>
   114dc:	ldr	r9, [pc, #3204]	; 12168 <__assert_fail@plt+0xd24>
   114e0:	mov	r6, sl
   114e4:	add	r7, sp, #56	; 0x38
   114e8:	str	sl, [sp, #40]	; 0x28
   114ec:	str	sl, [sp, #36]	; 0x24
   114f0:	str	sl, [sp, #32]
   114f4:	str	sl, [sp, #28]
   114f8:	mvn	ip, #0
   114fc:	str	r7, [sp]
   11500:	mov	r3, r8
   11504:	ldr	r2, [pc, #3168]	; 1216c <__assert_fail@plt+0xd28>
   11508:	mov	r1, r5
   1150c:	mov	r0, r4
   11510:	str	ip, [sp, #56]	; 0x38
   11514:	bl	112dc <getopt_long@plt>
   11518:	cmn	r0, #1
   1151c:	mov	fp, r0
   11520:	beq	11e38 <__assert_fail@plt+0x9f4>
   11524:	sub	r3, r0, #48	; 0x30
   11528:	cmp	r3, #9
   1152c:	bls	11dcc <__assert_fail@plt+0x988>
   11530:	add	fp, r0, #3
   11534:	cmp	fp, #260	; 0x104
   11538:	ldrls	pc, [pc, fp, lsl #2]
   1153c:	b	120e4 <__assert_fail@plt+0xca0>
   11540:			; <UNDEFINED> instruction: 0x00011cb4
   11544:	ldrdeq	r2, [r1], -ip
   11548:	andeq	r2, r1, r4, ror #1
   1154c:	andeq	r2, r1, r4, ror #1
   11550:	andeq	r1, r1, r8, lsl #25
   11554:	andeq	r2, r1, r4, ror #1
   11558:	andeq	r2, r1, r4, ror #1
   1155c:	andeq	r2, r1, r4, ror #1
   11560:	andeq	r2, r1, r4, ror #1
   11564:	andeq	r2, r1, r4, ror #1
   11568:	andeq	r2, r1, r4, ror #1
   1156c:	andeq	r2, r1, r4, ror #1
   11570:	andeq	r2, r1, r4, ror #1
   11574:	andeq	r2, r1, r4, ror #1
   11578:	andeq	r2, r1, r4, ror #1
   1157c:	andeq	r2, r1, r4, ror #1
   11580:	andeq	r2, r1, r4, ror #1
   11584:	andeq	r2, r1, r4, ror #1
   11588:	andeq	r2, r1, r4, ror #1
   1158c:	andeq	r2, r1, r4, ror #1
   11590:	andeq	r2, r1, r4, ror #1
   11594:	andeq	r2, r1, r4, ror #1
   11598:	andeq	r2, r1, r4, ror #1
   1159c:	andeq	r2, r1, r4, ror #1
   115a0:	andeq	r2, r1, r4, ror #1
   115a4:	andeq	r2, r1, r4, ror #1
   115a8:	andeq	r2, r1, r4, ror #1
   115ac:	andeq	r2, r1, r4, ror #1
   115b0:	andeq	r2, r1, r4, ror #1
   115b4:	andeq	r2, r1, r4, ror #1
   115b8:	andeq	r2, r1, r4, ror #1
   115bc:	andeq	r2, r1, r4, ror #1
   115c0:	andeq	r2, r1, r4, ror #1
   115c4:	andeq	r2, r1, r4, ror #1
   115c8:	andeq	r2, r1, r4, ror #1
   115cc:	andeq	r2, r1, r4, ror #1
   115d0:	andeq	r2, r1, r4, ror #1
   115d4:	andeq	r2, r1, r4, ror #1
   115d8:	andeq	r2, r1, r4, ror #1
   115dc:	andeq	r2, r1, r4, ror #1
   115e0:	andeq	r2, r1, r4, ror #1
   115e4:	andeq	r2, r1, r4, ror #1
   115e8:	andeq	r2, r1, r4, ror #1
   115ec:	andeq	r2, r1, r4, ror #1
   115f0:	andeq	r2, r1, r4, ror #1
   115f4:	andeq	r2, r1, r4, ror #1
   115f8:	andeq	r2, r1, r4, ror #1
   115fc:	andeq	r2, r1, r4, ror #1
   11600:	andeq	r2, r1, r4, ror #1
   11604:	andeq	r2, r1, r4, ror #1
   11608:	andeq	r2, r1, r4, ror #1
   1160c:	andeq	r2, r1, r4, ror #1
   11610:	andeq	r2, r1, r4, ror #1
   11614:	andeq	r2, r1, r4, ror #1
   11618:	andeq	r2, r1, r4, ror #1
   1161c:	andeq	r2, r1, r4, ror #1
   11620:	andeq	r2, r1, r4, ror #1
   11624:	andeq	r2, r1, r4, ror #1
   11628:	andeq	r2, r1, r4, ror #1
   1162c:	andeq	r2, r1, r4, ror #1
   11630:	andeq	r2, r1, r4, ror #1
   11634:	andeq	r2, r1, r4, ror #1
   11638:	andeq	r2, r1, r4, ror #1
   1163c:	andeq	r2, r1, r4, ror #1
   11640:	andeq	r2, r1, r4, ror #1
   11644:	andeq	r2, r1, r4, ror #1
   11648:	andeq	r2, r1, r4, ror #1
   1164c:	andeq	r2, r1, r4, ror #1
   11650:	andeq	r2, r1, r4, ror #1
   11654:	andeq	r2, r1, r4, ror #1
   11658:	andeq	r2, r1, r4, ror #1
   1165c:	andeq	r1, r1, r8, ror ip
   11660:	andeq	r2, r1, r4, ror #1
   11664:	andeq	r1, r1, ip, ror #24
   11668:	andeq	r2, r1, r4, ror #1
   1166c:	andeq	r2, r1, r4, ror #1
   11670:	andeq	r2, r1, r4, ror #1
   11674:	andeq	r1, r1, r0, ror #24
   11678:	andeq	r2, r1, r4, ror #1
   1167c:	andeq	r2, r1, r4, ror #1
   11680:	andeq	r2, r1, r4, ror #1
   11684:	andeq	r1, r1, r4, lsl #24
   11688:	andeq	r2, r1, r4, ror #1
   1168c:	andeq	r2, r1, r4, ror #1
   11690:	andeq	r2, r1, r4, ror #1
   11694:	andeq	r2, r1, r4, ror #1
   11698:			; <UNDEFINED> instruction: 0x00011bb8
   1169c:	andeq	r1, r1, r4, ror sp
   116a0:	andeq	r2, r1, r4, ror #1
   116a4:	andeq	r2, r1, r4, ror #1
   116a8:	andeq	r1, r1, r4, lsl sp
   116ac:	andeq	r2, r1, r4, ror #1
   116b0:	andeq	r2, r1, r4, ror #1
   116b4:	andeq	r2, r1, r4, ror #1
   116b8:	andeq	r2, r1, r4, ror #1
   116bc:	andeq	r2, r1, r4, ror #1
   116c0:	andeq	r2, r1, r4, ror #1
   116c4:	andeq	r2, r1, r4, ror #1
   116c8:	andeq	r2, r1, r4, ror #1
   116cc:	andeq	r2, r1, r4, ror #1
   116d0:	strdeq	r1, [r1], -ip
   116d4:	strdeq	r1, [r1], -r0
   116d8:	muleq	r1, r4, sp
   116dc:	andeq	r1, r1, r8, lsl #27
   116e0:	andeq	r1, r1, r0, lsr #27
   116e4:	andeq	r1, r1, ip, ror #24
   116e8:	andeq	r2, r1, r4, ror #1
   116ec:	andeq	r1, r1, r8, lsr #23
   116f0:	andeq	r1, r1, ip, ror fp
   116f4:	andeq	r2, r1, r4, ror #1
   116f8:	andeq	r2, r1, r4, ror #1
   116fc:	andeq	r1, r1, r8, lsr #22
   11700:	andeq	r1, r1, r0, lsl fp
   11704:	andeq	r1, r1, r4, ror #21
   11708:	muleq	r1, r4, sl
   1170c:	andeq	r2, r1, r4, ror #1
   11710:	andeq	r2, r1, r4, ror #1
   11714:	andeq	r1, r1, r8, lsl #21
   11718:	andeq	r1, r1, ip, lsr sl
   1171c:	andeq	r1, r1, r4, lsr #20
   11720:	andeq	r2, r1, r4, ror #1
   11724:	andeq	r1, r1, r8, lsl sl
   11728:	andeq	r1, r1, r0, lsr #19
   1172c:	andeq	r2, r1, r4, ror #1
   11730:	andeq	r2, r1, r4, ror #1
   11734:	andeq	r2, r1, r4, ror #1
   11738:	andeq	r2, r1, r4, ror #1
   1173c:	andeq	r2, r1, r4, ror #1
   11740:	andeq	r2, r1, r4, ror #1
   11744:	andeq	r2, r1, r4, ror #1
   11748:	andeq	r2, r1, r4, ror #1
   1174c:	andeq	r2, r1, r4, ror #1
   11750:	andeq	r2, r1, r4, ror #1
   11754:	andeq	r2, r1, r4, ror #1
   11758:	andeq	r2, r1, r4, ror #1
   1175c:	andeq	r2, r1, r4, ror #1
   11760:	andeq	r2, r1, r4, ror #1
   11764:	andeq	r2, r1, r4, ror #1
   11768:	andeq	r2, r1, r4, ror #1
   1176c:	andeq	r2, r1, r4, ror #1
   11770:	andeq	r2, r1, r4, ror #1
   11774:	andeq	r2, r1, r4, ror #1
   11778:	andeq	r2, r1, r4, ror #1
   1177c:	andeq	r2, r1, r4, ror #1
   11780:	andeq	r2, r1, r4, ror #1
   11784:	andeq	r2, r1, r4, ror #1
   11788:	andeq	r2, r1, r4, ror #1
   1178c:	andeq	r2, r1, r4, ror #1
   11790:	andeq	r2, r1, r4, ror #1
   11794:	andeq	r2, r1, r4, ror #1
   11798:	andeq	r2, r1, r4, ror #1
   1179c:	andeq	r2, r1, r4, ror #1
   117a0:	andeq	r2, r1, r4, ror #1
   117a4:	andeq	r2, r1, r4, ror #1
   117a8:	andeq	r2, r1, r4, ror #1
   117ac:	andeq	r2, r1, r4, ror #1
   117b0:	andeq	r2, r1, r4, ror #1
   117b4:	andeq	r2, r1, r4, ror #1
   117b8:	andeq	r2, r1, r4, ror #1
   117bc:	andeq	r2, r1, r4, ror #1
   117c0:	andeq	r2, r1, r4, ror #1
   117c4:	andeq	r2, r1, r4, ror #1
   117c8:	andeq	r2, r1, r4, ror #1
   117cc:	andeq	r2, r1, r4, ror #1
   117d0:	andeq	r2, r1, r4, ror #1
   117d4:	andeq	r2, r1, r4, ror #1
   117d8:	andeq	r2, r1, r4, ror #1
   117dc:	andeq	r2, r1, r4, ror #1
   117e0:	andeq	r2, r1, r4, ror #1
   117e4:	andeq	r2, r1, r4, ror #1
   117e8:	andeq	r2, r1, r4, ror #1
   117ec:	andeq	r2, r1, r4, ror #1
   117f0:	andeq	r2, r1, r4, ror #1
   117f4:	andeq	r2, r1, r4, ror #1
   117f8:	andeq	r2, r1, r4, ror #1
   117fc:	andeq	r2, r1, r4, ror #1
   11800:	andeq	r2, r1, r4, ror #1
   11804:	andeq	r2, r1, r4, ror #1
   11808:	andeq	r2, r1, r4, ror #1
   1180c:	andeq	r2, r1, r4, ror #1
   11810:	andeq	r2, r1, r4, ror #1
   11814:	andeq	r2, r1, r4, ror #1
   11818:	andeq	r2, r1, r4, ror #1
   1181c:	andeq	r2, r1, r4, ror #1
   11820:	andeq	r2, r1, r4, ror #1
   11824:	andeq	r2, r1, r4, ror #1
   11828:	andeq	r2, r1, r4, ror #1
   1182c:	andeq	r2, r1, r4, ror #1
   11830:	andeq	r2, r1, r4, ror #1
   11834:	andeq	r2, r1, r4, ror #1
   11838:	andeq	r2, r1, r4, ror #1
   1183c:	andeq	r2, r1, r4, ror #1
   11840:	andeq	r2, r1, r4, ror #1
   11844:	andeq	r2, r1, r4, ror #1
   11848:	andeq	r2, r1, r4, ror #1
   1184c:	andeq	r2, r1, r4, ror #1
   11850:	andeq	r2, r1, r4, ror #1
   11854:	andeq	r2, r1, r4, ror #1
   11858:	andeq	r2, r1, r4, ror #1
   1185c:	andeq	r2, r1, r4, ror #1
   11860:	andeq	r2, r1, r4, ror #1
   11864:	andeq	r2, r1, r4, ror #1
   11868:	andeq	r2, r1, r4, ror #1
   1186c:	andeq	r2, r1, r4, ror #1
   11870:	andeq	r2, r1, r4, ror #1
   11874:	andeq	r2, r1, r4, ror #1
   11878:	andeq	r2, r1, r4, ror #1
   1187c:	andeq	r2, r1, r4, ror #1
   11880:	andeq	r2, r1, r4, ror #1
   11884:	andeq	r2, r1, r4, ror #1
   11888:	andeq	r2, r1, r4, ror #1
   1188c:	andeq	r2, r1, r4, ror #1
   11890:	andeq	r2, r1, r4, ror #1
   11894:	andeq	r2, r1, r4, ror #1
   11898:	andeq	r2, r1, r4, ror #1
   1189c:	andeq	r2, r1, r4, ror #1
   118a0:	andeq	r2, r1, r4, ror #1
   118a4:	andeq	r2, r1, r4, ror #1
   118a8:	andeq	r2, r1, r4, ror #1
   118ac:	andeq	r2, r1, r4, ror #1
   118b0:	andeq	r2, r1, r4, ror #1
   118b4:	andeq	r2, r1, r4, ror #1
   118b8:	andeq	r2, r1, r4, ror #1
   118bc:	andeq	r2, r1, r4, ror #1
   118c0:	andeq	r2, r1, r4, ror #1
   118c4:	andeq	r2, r1, r4, ror #1
   118c8:	andeq	r2, r1, r4, ror #1
   118cc:	andeq	r2, r1, r4, ror #1
   118d0:	andeq	r2, r1, r4, ror #1
   118d4:	andeq	r2, r1, r4, ror #1
   118d8:	andeq	r2, r1, r4, ror #1
   118dc:	andeq	r2, r1, r4, ror #1
   118e0:	andeq	r2, r1, r4, ror #1
   118e4:	andeq	r2, r1, r4, ror #1
   118e8:	andeq	r2, r1, r4, ror #1
   118ec:	andeq	r2, r1, r4, ror #1
   118f0:	andeq	r2, r1, r4, ror #1
   118f4:	andeq	r2, r1, r4, ror #1
   118f8:	andeq	r2, r1, r4, ror #1
   118fc:	andeq	r2, r1, r4, ror #1
   11900:	andeq	r2, r1, r4, ror #1
   11904:	andeq	r2, r1, r4, ror #1
   11908:	andeq	r2, r1, r4, ror #1
   1190c:	andeq	r2, r1, r4, ror #1
   11910:	andeq	r2, r1, r4, ror #1
   11914:	andeq	r2, r1, r4, ror #1
   11918:	andeq	r2, r1, r4, ror #1
   1191c:	andeq	r2, r1, r4, ror #1
   11920:	andeq	r2, r1, r4, ror #1
   11924:	andeq	r2, r1, r4, ror #1
   11928:	andeq	r2, r1, r4, ror #1
   1192c:	andeq	r2, r1, r4, ror #1
   11930:	andeq	r2, r1, r4, ror #1
   11934:	andeq	r2, r1, r4, ror #1
   11938:	andeq	r2, r1, r4, ror #1
   1193c:	andeq	r2, r1, r4, ror #1
   11940:	andeq	r2, r1, r4, ror #1
   11944:	andeq	r2, r1, r4, ror #1
   11948:	andeq	r2, r1, r4, ror #1
   1194c:	andeq	r1, r1, r0, lsl #19
   11950:	andeq	r1, r1, r4, asr r9
   11954:	ldr	r3, [pc, #2068]	; 12170 <__assert_fail@plt+0xd2c>
   11958:	ldr	r2, [r3]
   1195c:	cmp	r2, #0
   11960:	beq	12124 <__assert_fail@plt+0xce0>
   11964:	mov	r1, #0
   11968:	ldr	r0, [sp, #56]	; 0x38
   1196c:	bl	12410 <__assert_fail@plt+0xfcc>
   11970:	subs	sl, r0, #0
   11974:	beq	120f4 <__assert_fail@plt+0xcb0>
   11978:	mov	sl, #0
   1197c:	b	114f8 <__assert_fail@plt+0xb4>
   11980:	ldr	r3, [pc, #2024]	; 12170 <__assert_fail@plt+0xd2c>
   11984:	ldr	r0, [r3]
   11988:	bl	1253c <__assert_fail@plt+0x10f8>
   1198c:	mov	r0, r6
   11990:	mov	r6, #0
   11994:	bl	11168 <free@plt>
   11998:	str	r6, [sp, #52]	; 0x34
   1199c:	b	11978 <__assert_fail@plt+0x534>
   119a0:	ldr	r3, [pc, #1992]	; 12170 <__assert_fail@plt+0xd2c>
   119a4:	mov	r2, #5
   119a8:	ldr	r1, [pc, #1988]	; 12174 <__assert_fail@plt+0xd30>
   119ac:	mov	r0, #0
   119b0:	ldr	sl, [r3]
   119b4:	bl	111bc <dcgettext@plt>
   119b8:	ldr	r3, [pc, #1940]	; 12154 <__assert_fail@plt+0xd10>
   119bc:	mvn	r2, #-2147483648	; 0x80000000
   119c0:	str	r3, [sp, #8]
   119c4:	mov	r3, #0
   119c8:	mov	r1, #0
   119cc:	strd	r2, [sp]
   119d0:	str	r1, [sp, #16]
   119d4:	mov	r3, #0
   119d8:	mov	r2, #1
   119dc:	str	r0, [sp, #12]
   119e0:	mov	r0, sl
   119e4:	bl	196c8 <__assert_fail@plt+0x8284>
   119e8:	ldrb	r3, [r9, #156]	; 0x9c
   119ec:	cmp	r3, #0
   119f0:	str	r3, [sp, #32]
   119f4:	ldrne	r3, [sp, #32]
   119f8:	strne	r3, [sp, #36]	; 0x24
   119fc:	bne	11978 <__assert_fail@plt+0x534>
   11a00:	ldr	r3, [pc, #1904]	; 12178 <__assert_fail@plt+0xd34>
   11a04:	mov	r2, #1
   11a08:	str	r2, [sp, #36]	; 0x24
   11a0c:	str	r0, [r3, #16]
   11a10:	str	r2, [sp, #32]
   11a14:	b	11978 <__assert_fail@plt+0x534>
   11a18:	mov	r3, #1
   11a1c:	strb	r3, [r9, #117]	; 0x75
   11a20:	b	11978 <__assert_fail@plt+0x534>
   11a24:	ldr	r2, [pc, #1868]	; 12178 <__assert_fail@plt+0xd34>
   11a28:	mov	r1, #0
   11a2c:	mov	r3, #1
   11a30:	strb	r1, [r2, #40]	; 0x28
   11a34:	strb	r3, [r9, #158]	; 0x9e
   11a38:	b	11978 <__assert_fail@plt+0x534>
   11a3c:	ldrb	r3, [r9, #132]	; 0x84
   11a40:	cmp	r3, #0
   11a44:	str	r3, [sp, #32]
   11a48:	ldrne	r3, [sp, #32]
   11a4c:	strne	r3, [sp, #40]	; 0x28
   11a50:	bne	11978 <__assert_fail@plt+0x534>
   11a54:	ldr	r3, [pc, #1812]	; 12170 <__assert_fail@plt+0xd2c>
   11a58:	ldr	sl, [r3]
   11a5c:	cmp	sl, #0
   11a60:	beq	12038 <__assert_fail@plt+0xbf4>
   11a64:	mov	r0, sl
   11a68:	bl	11300 <strlen@plt>
   11a6c:	ldr	r3, [pc, #1796]	; 12178 <__assert_fail@plt+0xd34>
   11a70:	mov	r2, #1
   11a74:	str	r2, [sp, #40]	; 0x28
   11a78:	str	sl, [r3, #28]
   11a7c:	str	r2, [sp, #32]
   11a80:	str	r0, [r9, #84]	; 0x54
   11a84:	b	11978 <__assert_fail@plt+0x534>
   11a88:	mov	r3, #1
   11a8c:	strb	r3, [r9, #168]	; 0xa8
   11a90:	b	11978 <__assert_fail@plt+0x534>
   11a94:	ldr	r3, [pc, #1748]	; 12170 <__assert_fail@plt+0xd2c>
   11a98:	mov	r2, #5
   11a9c:	ldr	r1, [pc, #1752]	; 1217c <__assert_fail@plt+0xd38>
   11aa0:	mov	r0, #0
   11aa4:	ldr	sl, [r3]
   11aa8:	bl	111bc <dcgettext@plt>
   11aac:	ldr	r3, [pc, #1696]	; 12154 <__assert_fail@plt+0xd10>
   11ab0:	mvn	r2, #-2147483648	; 0x80000000
   11ab4:	str	r3, [sp, #8]
   11ab8:	mov	r3, #0
   11abc:	mov	r1, #0
   11ac0:	strd	r2, [sp]
   11ac4:	str	r1, [sp, #16]
   11ac8:	mov	r2, #0
   11acc:	mov	r3, #0
   11ad0:	str	r0, [sp, #12]
   11ad4:	mov	r0, sl
   11ad8:	bl	196c8 <__assert_fail@plt+0x8284>
   11adc:	str	r0, [r9, #88]	; 0x58
   11ae0:	b	11978 <__assert_fail@plt+0x534>
   11ae4:	ldr	r3, [pc, #1668]	; 12170 <__assert_fail@plt+0xd2c>
   11ae8:	ldr	r0, [r3]
   11aec:	mov	r3, #1
   11af0:	cmp	r0, #0
   11af4:	strb	r3, [r9, #183]	; 0xb7
   11af8:	beq	11978 <__assert_fail@plt+0x534>
   11afc:	ldr	r3, [pc, #1660]	; 12180 <__assert_fail@plt+0xd3c>
   11b00:	mov	r1, #110	; 0x6e
   11b04:	add	r2, r3, #4
   11b08:	bl	14cc4 <__assert_fail@plt+0x3880>
   11b0c:	b	11978 <__assert_fail@plt+0x534>
   11b10:	ldr	r2, [pc, #1632]	; 12178 <__assert_fail@plt+0xd34>
   11b14:	mov	r1, #0
   11b18:	mov	r3, #1
   11b1c:	strb	r1, [r2, #4]
   11b20:	strb	r3, [r9, #33]	; 0x21
   11b24:	b	11978 <__assert_fail@plt+0x534>
   11b28:	ldr	r3, [pc, #1600]	; 12170 <__assert_fail@plt+0xd2c>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #1612]	; 12184 <__assert_fail@plt+0xd40>
   11b34:	mov	r0, #0
   11b38:	ldr	sl, [r3]
   11b3c:	bl	111bc <dcgettext@plt>
   11b40:	ldr	r3, [pc, #1548]	; 12154 <__assert_fail@plt+0xd10>
   11b44:	mvn	r2, #-2147483648	; 0x80000000
   11b48:	str	r3, [sp, #8]
   11b4c:	mov	r3, #0
   11b50:	mov	r1, #0
   11b54:	strd	r2, [sp]
   11b58:	str	r1, [sp, #16]
   11b5c:	mov	r3, #0
   11b60:	mov	r2, #1
   11b64:	str	r0, [sp, #12]
   11b68:	mov	r0, sl
   11b6c:	bl	196c8 <__assert_fail@plt+0x8284>
   11b70:	ldr	r3, [pc, #1536]	; 12178 <__assert_fail@plt+0xd34>
   11b74:	str	r0, [r3, #56]	; 0x38
   11b78:	b	11978 <__assert_fail@plt+0x534>
   11b7c:	ldr	r3, [pc, #1516]	; 12170 <__assert_fail@plt+0xd2c>
   11b80:	ldr	r0, [r3]
   11b84:	cmp	r0, #0
   11b88:	beq	11b9c <__assert_fail@plt+0x758>
   11b8c:	ldr	r3, [pc, #1524]	; 12188 <__assert_fail@plt+0xd44>
   11b90:	mov	r1, #105	; 0x69
   11b94:	sub	r2, r3, #4
   11b98:	bl	14cc4 <__assert_fail@plt+0x3880>
   11b9c:	mov	r3, #1
   11ba0:	strb	r3, [r9, #72]	; 0x48
   11ba4:	b	11978 <__assert_fail@plt+0x534>
   11ba8:	ldr	r3, [pc, #1472]	; 12170 <__assert_fail@plt+0xd2c>
   11bac:	ldr	r3, [r3]
   11bb0:	str	r3, [r9, #56]	; 0x38
   11bb4:	b	11978 <__assert_fail@plt+0x534>
   11bb8:	ldr	r3, [pc, #1456]	; 12170 <__assert_fail@plt+0xd2c>
   11bbc:	ldr	fp, [pc, #1460]	; 12178 <__assert_fail@plt+0xd34>
   11bc0:	ldr	r1, [pc, #1420]	; 12154 <__assert_fail@plt+0xd10>
   11bc4:	ldr	sl, [r3]
   11bc8:	mov	r2, #1
   11bcc:	cmp	sl, #0
   11bd0:	mov	r3, #0
   11bd4:	str	r1, [fp, #28]
   11bd8:	str	r3, [r9, #84]	; 0x54
   11bdc:	strb	r2, [r9, #132]	; 0x84
   11be0:	streq	sl, [sp, #40]	; 0x28
   11be4:	beq	11978 <__assert_fail@plt+0x534>
   11be8:	mov	r0, sl
   11bec:	bl	11300 <strlen@plt>
   11bf0:	mov	r3, #0
   11bf4:	str	r3, [sp, #40]	; 0x28
   11bf8:	str	sl, [fp, #28]
   11bfc:	str	r0, [r9, #84]	; 0x54
   11c00:	b	11978 <__assert_fail@plt+0x534>
   11c04:	ldr	sl, [pc, #1388]	; 12178 <__assert_fail@plt+0xd34>
   11c08:	mov	r3, #0
   11c0c:	mov	r0, r3
   11c10:	strb	r3, [sl, #41]	; 0x29
   11c14:	ldr	r3, [pc, #1364]	; 12170 <__assert_fail@plt+0xd2c>
   11c18:	mov	r2, #5
   11c1c:	ldr	r1, [pc, #1384]	; 1218c <__assert_fail@plt+0xd48>
   11c20:	ldr	fp, [r3]
   11c24:	bl	111bc <dcgettext@plt>
   11c28:	ldr	r2, [pc, #1316]	; 12154 <__assert_fail@plt+0xd10>
   11c2c:	mov	r3, #0
   11c30:	str	r3, [sp, #16]
   11c34:	str	r2, [sp, #8]
   11c38:	mov	r3, #0
   11c3c:	mvn	r2, #-2147483648	; 0x80000000
   11c40:	strd	r2, [sp]
   11c44:	mov	r2, #-2147483648	; 0x80000000
   11c48:	mvn	r3, #0
   11c4c:	str	r0, [sp, #12]
   11c50:	mov	r0, fp
   11c54:	bl	196c8 <__assert_fail@plt+0x8284>
   11c58:	str	r0, [sl, #60]	; 0x3c
   11c5c:	b	11978 <__assert_fail@plt+0x534>
   11c60:	mov	r3, #1
   11c64:	strb	r3, [r9, #182]	; 0xb6
   11c68:	b	11978 <__assert_fail@plt+0x534>
   11c6c:	mov	r3, #1
   11c70:	strb	r3, [r9, #184]	; 0xb8
   11c74:	b	11978 <__assert_fail@plt+0x534>
   11c78:	ldr	r3, [pc, #1264]	; 12170 <__assert_fail@plt+0xd2c>
   11c7c:	ldr	r3, [r3]
   11c80:	str	r3, [r9, #48]	; 0x30
   11c84:	b	11978 <__assert_fail@plt+0x534>
   11c88:	ldrd	r2, [r9, #24]
   11c8c:	orrs	r3, r2, r3
   11c90:	beq	11e0c <__assert_fail@plt+0x9c8>
   11c94:	ldr	r3, [pc, #1236]	; 12170 <__assert_fail@plt+0xd2c>
   11c98:	ldr	r2, [sp, #28]
   11c9c:	ldr	r1, [sp, #44]	; 0x2c
   11ca0:	ldr	r3, [r3]
   11ca4:	str	r3, [r1, r2, lsl #2]
   11ca8:	add	r3, r2, #1
   11cac:	str	r3, [sp, #28]
   11cb0:	b	11978 <__assert_fail@plt+0x534>
   11cb4:	ldr	r3, [pc, #1236]	; 12190 <__assert_fail@plt+0xd4c>
   11cb8:	ldr	r0, [pc, #1236]	; 12194 <__assert_fail@plt+0xd50>
   11cbc:	ldr	r1, [pc, #1236]	; 12198 <__assert_fail@plt+0xd54>
   11cc0:	ldr	r2, [pc, #1236]	; 1219c <__assert_fail@plt+0xd58>
   11cc4:	mov	r4, #0
   11cc8:	ldr	r0, [r0]
   11ccc:	ldr	r3, [r3]
   11cd0:	str	r1, [sp, #4]
   11cd4:	str	r2, [sp]
   11cd8:	str	r4, [sp, #8]
   11cdc:	ldr	r2, [pc, #1212]	; 121a0 <__assert_fail@plt+0xd5c>
   11ce0:	ldr	r1, [pc, #1212]	; 121a4 <__assert_fail@plt+0xd60>
   11ce4:	bl	191c8 <__assert_fail@plt+0x7d84>
   11ce8:	mov	r0, r4
   11cec:	bl	112f4 <exit@plt>
   11cf0:	mov	r3, #1
   11cf4:	strb	r3, [r9, #181]	; 0xb5
   11cf8:	b	11978 <__assert_fail@plt+0x534>
   11cfc:	ldr	r2, [pc, #1140]	; 12178 <__assert_fail@plt+0xd34>
   11d00:	mov	r1, #0
   11d04:	mov	r3, #1
   11d08:	strb	r1, [r2, #4]
   11d0c:	strb	r3, [r9, #185]	; 0xb9
   11d10:	b	11978 <__assert_fail@plt+0x534>
   11d14:	mov	r3, #1
   11d18:	strb	r3, [r9, #156]	; 0x9c
   11d1c:	ldr	r3, [pc, #1100]	; 12170 <__assert_fail@plt+0xd2c>
   11d20:	mov	r2, #5
   11d24:	ldr	r1, [pc, #1148]	; 121a8 <__assert_fail@plt+0xd64>
   11d28:	mov	r0, #0
   11d2c:	ldr	sl, [r3]
   11d30:	bl	111bc <dcgettext@plt>
   11d34:	ldr	r1, [pc, #1048]	; 12154 <__assert_fail@plt+0xd10>
   11d38:	mvn	r2, #-2147483648	; 0x80000000
   11d3c:	mov	r3, #0
   11d40:	str	r1, [sp, #8]
   11d44:	mov	r1, #0
   11d48:	strd	r2, [sp]
   11d4c:	str	r1, [sp, #16]
   11d50:	mov	r3, #0
   11d54:	mov	r2, #1
   11d58:	str	r1, [sp, #36]	; 0x24
   11d5c:	str	r0, [sp, #12]
   11d60:	mov	r0, sl
   11d64:	bl	196c8 <__assert_fail@plt+0x8284>
   11d68:	ldr	r3, [pc, #1032]	; 12178 <__assert_fail@plt+0xd34>
   11d6c:	str	r0, [r3, #16]
   11d70:	b	11978 <__assert_fail@plt+0x534>
   11d74:	ldr	r2, [pc, #1020]	; 12178 <__assert_fail@plt+0xd34>
   11d78:	mov	r3, #0
   11d7c:	strb	r3, [r9, #158]	; 0x9e
   11d80:	strb	r3, [r2, #40]	; 0x28
   11d84:	b	11978 <__assert_fail@plt+0x534>
   11d88:	mov	r3, #1
   11d8c:	strb	r3, [r9, #180]	; 0xb4
   11d90:	b	11978 <__assert_fail@plt+0x534>
   11d94:	mov	r3, #1
   11d98:	strb	r3, [r9, #118]	; 0x76
   11d9c:	b	11978 <__assert_fail@plt+0x534>
   11da0:	ldr	r3, [pc, #968]	; 12170 <__assert_fail@plt+0xd2c>
   11da4:	ldr	r0, [r3]
   11da8:	cmp	r0, #0
   11dac:	beq	11dc0 <__assert_fail@plt+0x97c>
   11db0:	ldr	r3, [pc, #1012]	; 121ac <__assert_fail@plt+0xd68>
   11db4:	mov	r1, #101	; 0x65
   11db8:	sub	r2, r3, #4
   11dbc:	bl	14cc4 <__assert_fail@plt+0x3880>
   11dc0:	mov	r3, #1
   11dc4:	strb	r3, [r9, #116]	; 0x74
   11dc8:	b	11978 <__assert_fail@plt+0x534>
   11dcc:	ldr	r2, [sp, #52]	; 0x34
   11dd0:	add	r3, sl, #1
   11dd4:	cmp	r3, r2
   11dd8:	bcs	11df0 <__assert_fail@plt+0x9ac>
   11ddc:	mov	r2, #0
   11de0:	strb	fp, [r6, sl]
   11de4:	strb	r2, [r6, r3]
   11de8:	mov	sl, r3
   11dec:	b	114f8 <__assert_fail@plt+0xb4>
   11df0:	mov	r0, r6
   11df4:	add	r1, sp, #52	; 0x34
   11df8:	str	r3, [sp, #24]
   11dfc:	bl	19434 <__assert_fail@plt+0x7ff0>
   11e00:	ldr	r3, [sp, #24]
   11e04:	mov	r6, r0
   11e08:	b	11ddc <__assert_fail@plt+0x998>
   11e0c:	ldr	r3, [pc, #860]	; 12170 <__assert_fail@plt+0xd2c>
   11e10:	ldr	r2, [r3]
   11e14:	ldrb	r1, [r2]
   11e18:	cmp	r1, #43	; 0x2b
   11e1c:	bne	11c94 <__assert_fail@plt+0x850>
   11e20:	add	r2, r2, #1
   11e24:	mvn	r0, #1
   11e28:	bl	12410 <__assert_fail@plt+0xfcc>
   11e2c:	cmp	r0, #0
   11e30:	bne	11978 <__assert_fail@plt+0x534>
   11e34:	b	11c94 <__assert_fail@plt+0x850>
   11e38:	cmp	r6, #0
   11e3c:	beq	11e50 <__assert_fail@plt+0xa0c>
   11e40:	mov	r0, r6
   11e44:	bl	1253c <__assert_fail@plt+0x10f8>
   11e48:	mov	r0, r6
   11e4c:	bl	11168 <free@plt>
   11e50:	ldr	r6, [pc, #784]	; 12168 <__assert_fail@plt+0xd24>
   11e54:	ldr	r3, [r6, #48]	; 0x30
   11e58:	cmp	r3, #0
   11e5c:	beq	120ac <__assert_fail@plt+0xc68>
   11e60:	ldr	r0, [pc, #840]	; 121b0 <__assert_fail@plt+0xd6c>
   11e64:	bl	1127c <getenv@plt>
   11e68:	bl	1b8b0 <__assert_fail@plt+0xa46c>
   11e6c:	ldrd	r2, [r6, #24]
   11e70:	orrs	r3, r2, r3
   11e74:	moveq	r2, #1
   11e78:	moveq	r3, #0
   11e7c:	strdeq	r2, [r6, #24]
   11e80:	ldrb	r2, [r6, #33]	; 0x21
   11e84:	cmp	r2, #0
   11e88:	str	r0, [r6, #44]	; 0x2c
   11e8c:	beq	11eb0 <__assert_fail@plt+0xa6c>
   11e90:	ldrb	r7, [r6, #32]
   11e94:	cmp	r7, #0
   11e98:	bne	12144 <__assert_fail@plt+0xd00>
   11e9c:	ldrb	r3, [r6, #185]	; 0xb9
   11ea0:	cmp	r3, #0
   11ea4:	movne	r2, #5
   11ea8:	ldrne	r1, [pc, #772]	; 121b4 <__assert_fail@plt+0xd70>
   11eac:	bne	1212c <__assert_fail@plt+0xce8>
   11eb0:	ldr	r3, [sp, #32]
   11eb4:	cmp	r3, #0
   11eb8:	beq	11ee4 <__assert_fail@plt+0xaa0>
   11ebc:	ldr	r3, [sp, #36]	; 0x24
   11ec0:	cmp	r3, #0
   11ec4:	beq	11fd4 <__assert_fail@plt+0xb90>
   11ec8:	cmp	r2, #0
   11ecc:	bne	12048 <__assert_fail@plt+0xc04>
   11ed0:	ldrb	r3, [r6, #32]
   11ed4:	cmp	r3, #0
   11ed8:	moveq	r3, #1
   11edc:	strbeq	r3, [r6, #182]	; 0xb6
   11ee0:	bne	12048 <__assert_fail@plt+0xc04>
   11ee4:	ldr	ip, [pc, #716]	; 121b8 <__assert_fail@plt+0xd74>
   11ee8:	ldr	r0, [ip]
   11eec:	cmp	r4, r0
   11ef0:	ble	11f38 <__assert_fail@plt+0xaf4>
   11ef4:	sub	r1, r0, #-1073741823	; 0xc0000001
   11ef8:	ldr	r3, [sp, #28]
   11efc:	add	lr, r5, r4, lsl #2
   11f00:	sub	r3, r3, #-1073741823	; 0xc0000001
   11f04:	add	r5, r5, r1, lsl #2
   11f08:	ldr	r1, [sp, #44]	; 0x2c
   11f0c:	sub	lr, lr, #4
   11f10:	add	r3, r1, r3, lsl #2
   11f14:	ldr	r1, [r5, #4]!
   11f18:	cmp	r5, lr
   11f1c:	str	r1, [r3, #4]!
   11f20:	bne	11f14 <__assert_fail@plt+0xad0>
   11f24:	ldr	r3, [sp, #28]
   11f28:	sub	r0, r4, r0
   11f2c:	add	r3, r3, r0
   11f30:	str	r3, [sp, #28]
   11f34:	str	r4, [ip]
   11f38:	ldr	r3, [sp, #28]
   11f3c:	cmp	r3, #0
   11f40:	beq	1209c <__assert_fail@plt+0xc58>
   11f44:	cmp	r2, #0
   11f48:	ldreq	r3, [sp, #28]
   11f4c:	ldreq	r4, [sp, #44]	; 0x2c
   11f50:	addeq	r5, r4, r3, lsl #2
   11f54:	bne	12028 <__assert_fail@plt+0xbe4>
   11f58:	mov	r1, r4
   11f5c:	mov	r0, #1
   11f60:	add	r4, r4, #4
   11f64:	bl	139b4 <__assert_fail@plt+0x2570>
   11f68:	cmp	r5, r4
   11f6c:	bne	11f58 <__assert_fail@plt+0xb14>
   11f70:	ldr	r0, [r6, #144]	; 0x90
   11f74:	bl	11168 <free@plt>
   11f78:	ldr	r0, [r6, #108]	; 0x6c
   11f7c:	bl	11168 <free@plt>
   11f80:	ldr	r0, [r6]
   11f84:	bl	11168 <free@plt>
   11f88:	ldr	r0, [r6, #120]	; 0x78
   11f8c:	bl	11168 <free@plt>
   11f90:	ldr	r0, [r6, #136]	; 0x88
   11f94:	bl	11168 <free@plt>
   11f98:	ldr	r0, [r6, #12]
   11f9c:	bl	11168 <free@plt>
   11fa0:	ldrb	r3, [r6, #166]	; 0xa6
   11fa4:	cmp	r3, #0
   11fa8:	bne	12060 <__assert_fail@plt+0xc1c>
   11fac:	ldr	r3, [pc, #412]	; 12150 <__assert_fail@plt+0xd0c>
   11fb0:	ldr	r2, [sp, #60]	; 0x3c
   11fb4:	ldrb	r0, [r6, #167]	; 0xa7
   11fb8:	ldr	r3, [r3]
   11fbc:	cmp	r2, r3
   11fc0:	bne	120ec <__assert_fail@plt+0xca8>
   11fc4:	add	sp, sp, #68	; 0x44
   11fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fcc:	str	r6, [sp, #44]	; 0x2c
   11fd0:	b	114d4 <__assert_fail@plt+0x90>
   11fd4:	ldrb	r3, [r6, #132]	; 0x84
   11fd8:	ldr	r1, [sp, #40]	; 0x28
   11fdc:	eor	r3, r3, #1
   11fe0:	tst	r1, r3
   11fe4:	beq	11ee4 <__assert_fail@plt+0xaa0>
   11fe8:	cmp	r2, #0
   11fec:	bne	11ffc <__assert_fail@plt+0xbb8>
   11ff0:	ldrb	r3, [r6, #32]
   11ff4:	cmp	r3, #0
   11ff8:	beq	11ee4 <__assert_fail@plt+0xaa0>
   11ffc:	ldrb	r3, [r6, #156]	; 0x9c
   12000:	cmp	r3, #0
   12004:	bne	1201c <__assert_fail@plt+0xbd8>
   12008:	ldr	r1, [r6, #84]	; 0x54
   1200c:	mov	r3, #1
   12010:	cmp	r1, #0
   12014:	strb	r3, [r6, #182]	; 0xb6
   12018:	ble	11ee4 <__assert_fail@plt+0xaa0>
   1201c:	mov	r3, #1
   12020:	strb	r3, [r6, #132]	; 0x84
   12024:	b	11ee4 <__assert_fail@plt+0xaa0>
   12028:	ldr	r1, [sp, #44]	; 0x2c
   1202c:	ldr	r0, [sp, #28]
   12030:	bl	139b4 <__assert_fail@plt+0x2570>
   12034:	b	11f70 <__assert_fail@plt+0xb2c>
   12038:	mov	r3, #1
   1203c:	str	r3, [sp, #40]	; 0x28
   12040:	str	r3, [sp, #32]
   12044:	b	11978 <__assert_fail@plt+0x534>
   12048:	ldr	r3, [sp, #40]	; 0x28
   1204c:	cmp	r3, #0
   12050:	mov	r3, #1
   12054:	strb	r3, [r6, #156]	; 0x9c
   12058:	beq	11ee4 <__assert_fail@plt+0xaa0>
   1205c:	b	1201c <__assert_fail@plt+0xbd8>
   12060:	ldr	r3, [pc, #340]	; 121bc <__assert_fail@plt+0xd78>
   12064:	ldr	r0, [r3]
   12068:	bl	1b4b0 <__assert_fail@plt+0xa06c>
   1206c:	cmn	r0, #1
   12070:	bne	11fac <__assert_fail@plt+0xb68>
   12074:	bl	11330 <__errno_location@plt>
   12078:	mov	r2, #5
   1207c:	ldr	r1, [pc, #316]	; 121c0 <__assert_fail@plt+0xd7c>
   12080:	ldr	r4, [r0]
   12084:	mov	r0, #0
   12088:	bl	111bc <dcgettext@plt>
   1208c:	mov	r1, r4
   12090:	mov	r2, r0
   12094:	mov	r0, #1
   12098:	bl	11270 <error@plt>
   1209c:	mov	r1, r3
   120a0:	mov	r0, r3
   120a4:	bl	139b4 <__assert_fail@plt+0x2570>
   120a8:	b	11f70 <__assert_fail@plt+0xb2c>
   120ac:	ldr	r0, [pc, #272]	; 121c4 <__assert_fail@plt+0xd80>
   120b0:	bl	1127c <getenv@plt>
   120b4:	cmp	r0, #0
   120b8:	beq	120d0 <__assert_fail@plt+0xc8c>
   120bc:	mov	r0, #2
   120c0:	bl	14fe0 <__assert_fail@plt+0x3b9c>
   120c4:	cmp	r0, #0
   120c8:	ldreq	r3, [pc, #248]	; 121c8 <__assert_fail@plt+0xd84>
   120cc:	beq	120d4 <__assert_fail@plt+0xc90>
   120d0:	ldr	r3, [pc, #244]	; 121cc <__assert_fail@plt+0xd88>
   120d4:	str	r3, [r6, #48]	; 0x30
   120d8:	b	11e60 <__assert_fail@plt+0xa1c>
   120dc:	mov	r0, #0
   120e0:	bl	14840 <__assert_fail@plt+0x33fc>
   120e4:	mov	r0, #1
   120e8:	bl	14840 <__assert_fail@plt+0x33fc>
   120ec:	bl	111c8 <__stack_chk_fail@plt>
   120f0:	bl	19514 <__assert_fail@plt+0x80d0>
   120f4:	mov	r2, #5
   120f8:	ldr	r1, [pc, #208]	; 121d0 <__assert_fail@plt+0xd8c>
   120fc:	bl	111bc <dcgettext@plt>
   12100:	ldr	r3, [pc, #104]	; 12170 <__assert_fail@plt+0xd2c>
   12104:	mov	r4, r0
   12108:	ldr	r0, [r3]
   1210c:	bl	18d50 <__assert_fail@plt+0x790c>
   12110:	mov	r2, r4
   12114:	mov	r1, sl
   12118:	mov	r3, r0
   1211c:	mov	r0, #1
   12120:	bl	11270 <error@plt>
   12124:	ldr	r1, [pc, #168]	; 121d4 <__assert_fail@plt+0xd90>
   12128:	mov	r2, #5
   1212c:	mov	r0, #0
   12130:	bl	111bc <dcgettext@plt>
   12134:	mov	r1, #0
   12138:	mov	r2, r0
   1213c:	mov	r0, #1
   12140:	bl	11270 <error@plt>
   12144:	mov	r2, #5
   12148:	ldr	r1, [pc, #136]	; 121d8 <__assert_fail@plt+0xd94>
   1214c:	b	1212c <__assert_fail@plt+0xce8>
   12150:	andeq	lr, r2, r8, lsl #30
   12154:	andeq	ip, r1, r8, ror #14
   12158:	andeq	sp, r1, r8, lsl r9
   1215c:	andeq	sp, r1, ip, lsl #16
   12160:	andeq	r4, r1, r8, asr #27
   12164:	andeq	ip, r1, r8, ror #9
   12168:	strdeq	pc, [r2], -r0
   1216c:	ldrdeq	ip, [r1], -r0
   12170:	andeq	pc, r2, r8, ror #3
   12174:	strdeq	sp, [r1], -r0
   12178:	andeq	pc, r2, r0, asr #2
   1217c:	ldrdeq	sp, [r1], -r0
   12180:	andeq	pc, r2, r0, ror r1	; <UNPREDICTABLE>
   12184:	andeq	sp, r1, r8, ror r9
   12188:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   1218c:	andeq	sp, r1, r4, lsr #19
   12190:	andeq	pc, r2, r0, lsl #3
   12194:	andeq	pc, r2, r4, ror #3
   12198:	andeq	sp, r1, r0, asr sl
   1219c:	andeq	sp, r1, r0, ror #20
   121a0:	andeq	sp, r1, r8, lsl #16
   121a4:	strdeq	ip, [r1], -r0
   121a8:	andeq	sp, r1, r0, lsr #20
   121ac:	andeq	pc, r2, r4, ror #2
   121b0:	andeq	sp, r1, r0, lsl #21
   121b4:	andeq	sp, r1, r0, asr #21
   121b8:	ldrdeq	pc, [r2], -r0
   121bc:	andeq	pc, r2, r0, ror #3
   121c0:	andeq	ip, r1, ip, ror r7
   121c4:	andeq	sp, r1, r0, ror sl
   121c8:	andeq	sp, r1, r8, lsl #18
   121cc:	strdeq	sp, [r1], -r8
   121d0:	andeq	sp, r1, r0, ror #18
   121d4:	andeq	sp, r1, ip, lsr #18
   121d8:	andeq	sp, r1, r4, lsl #21
   121dc:	mov	fp, #0
   121e0:	mov	lr, #0
   121e4:	pop	{r1}		; (ldr r1, [sp], #4)
   121e8:	mov	r2, sp
   121ec:	push	{r2}		; (str r2, [sp, #-4]!)
   121f0:	push	{r0}		; (str r0, [sp, #-4]!)
   121f4:	ldr	ip, [pc, #16]	; 1220c <__assert_fail@plt+0xdc8>
   121f8:	push	{ip}		; (str ip, [sp, #-4]!)
   121fc:	ldr	r0, [pc, #12]	; 12210 <__assert_fail@plt+0xdcc>
   12200:	ldr	r3, [pc, #12]	; 12214 <__assert_fail@plt+0xdd0>
   12204:	bl	11294 <__libc_start_main@plt>
   12208:	bl	1142c <abort@plt>
   1220c:	andeq	ip, r1, r0, asr #9
   12210:	andeq	r1, r1, r0, asr r4
   12214:	andeq	ip, r1, r0, ror #8
   12218:	ldr	r3, [pc, #20]	; 12234 <__assert_fail@plt+0xdf0>
   1221c:	ldr	r2, [pc, #20]	; 12238 <__assert_fail@plt+0xdf4>
   12220:	add	r3, pc, r3
   12224:	ldr	r2, [r3, r2]
   12228:	cmp	r2, #0
   1222c:	bxeq	lr
   12230:	b	112d0 <__gmon_start__@plt>
   12234:	ldrdeq	ip, [r1], -r8
   12238:	andeq	r0, r0, r0, lsr r1
   1223c:	ldr	r0, [pc, #24]	; 1225c <__assert_fail@plt+0xe18>
   12240:	ldr	r3, [pc, #24]	; 12260 <__assert_fail@plt+0xe1c>
   12244:	cmp	r3, r0
   12248:	bxeq	lr
   1224c:	ldr	r3, [pc, #16]	; 12264 <__assert_fail@plt+0xe20>
   12250:	cmp	r3, #0
   12254:	bxeq	lr
   12258:	bx	r3
   1225c:	andeq	pc, r2, r8, asr #3
   12260:	andeq	pc, r2, r8, asr #3
   12264:	andeq	r0, r0, r0
   12268:	ldr	r0, [pc, #36]	; 12294 <__assert_fail@plt+0xe50>
   1226c:	ldr	r1, [pc, #36]	; 12298 <__assert_fail@plt+0xe54>
   12270:	sub	r1, r1, r0
   12274:	asr	r1, r1, #2
   12278:	add	r1, r1, r1, lsr #31
   1227c:	asrs	r1, r1, #1
   12280:	bxeq	lr
   12284:	ldr	r3, [pc, #16]	; 1229c <__assert_fail@plt+0xe58>
   12288:	cmp	r3, #0
   1228c:	bxeq	lr
   12290:	bx	r3
   12294:	andeq	pc, r2, r8, asr #3
   12298:	andeq	pc, r2, r8, asr #3
   1229c:	andeq	r0, r0, r0
   122a0:	push	{r4, lr}
   122a4:	ldr	r4, [pc, #24]	; 122c4 <__assert_fail@plt+0xe80>
   122a8:	ldrb	r3, [r4]
   122ac:	cmp	r3, #0
   122b0:	popne	{r4, pc}
   122b4:	bl	1223c <__assert_fail@plt+0xdf8>
   122b8:	mov	r3, #1
   122bc:	strb	r3, [r4]
   122c0:	pop	{r4, pc}
   122c4:	andeq	pc, r2, ip, ror #3
   122c8:	b	12268 <__assert_fail@plt+0xe24>
   122cc:	ldr	r2, [pc, #108]	; 12340 <__assert_fail@plt+0xefc>
   122d0:	ldr	r3, [pc, #108]	; 12344 <__assert_fail@plt+0xf00>
   122d4:	ldr	ip, [r2]
   122d8:	ldr	r3, [r3]
   122dc:	cmp	ip, #0
   122e0:	beq	12338 <__assert_fail@plt+0xef4>
   122e4:	mov	r0, #0
   122e8:	push	{lr}		; (str lr, [sp, #-4]!)
   122ec:	ldrb	lr, [r2, #4]
   122f0:	mov	r2, r0
   122f4:	ldr	r1, [r3, #8]
   122f8:	add	r2, r2, #1
   122fc:	cmp	r1, #1
   12300:	bls	12324 <__assert_fail@plt+0xee0>
   12304:	cmp	lr, #0
   12308:	beq	12328 <__assert_fail@plt+0xee4>
   1230c:	ldr	r1, [r3, #24]
   12310:	cmp	r1, #0
   12314:	ble	12328 <__assert_fail@plt+0xee4>
   12318:	ldr	r1, [r3, #28]
   1231c:	cmp	r1, #0
   12320:	ble	12328 <__assert_fail@plt+0xee4>
   12324:	add	r0, r0, #1
   12328:	cmp	r2, ip
   1232c:	add	r3, r3, #40	; 0x28
   12330:	bne	122f4 <__assert_fail@plt+0xeb0>
   12334:	pop	{pc}		; (ldr pc, [sp], #4)
   12338:	mov	r0, ip
   1233c:	bx	lr
   12340:	andeq	pc, r2, r0, asr #2
   12344:	strdeq	pc, [r2], -r0
   12348:	push	{r4, r5, r6, lr}
   1234c:	ldr	r5, [pc, #108]	; 123c0 <__assert_fail@plt+0xf7c>
   12350:	ldr	lr, [pc, #108]	; 123c4 <__assert_fail@plt+0xf80>
   12354:	ldr	r2, [r5]
   12358:	ldr	r6, [lr]
   1235c:	cmp	r2, #0
   12360:	beq	1239c <__assert_fail@plt+0xf58>
   12364:	mov	ip, #0
   12368:	ldr	r0, [lr, #4]
   1236c:	mov	r4, ip
   12370:	mov	r3, r6
   12374:	ldr	r1, [r3, #8]
   12378:	add	r3, r3, #40	; 0x28
   1237c:	cmp	r1, #2
   12380:	streq	r4, [r3, #-32]	; 0xffffffe0
   12384:	addeq	r0, r0, #1
   12388:	moveq	ip, #1
   1238c:	subs	r2, r2, #1
   12390:	bne	12374 <__assert_fail@plt+0xf30>
   12394:	cmp	ip, #0
   12398:	strne	r0, [lr, #4]
   1239c:	ldrb	r3, [r5, #4]
   123a0:	cmp	r3, #0
   123a4:	popeq	{r4, r5, r6, pc}
   123a8:	ldr	r3, [r6, #8]
   123ac:	cmp	r3, #3
   123b0:	moveq	r3, #0
   123b4:	movne	r3, #1
   123b8:	str	r3, [lr, #4]
   123bc:	pop	{r4, r5, r6, pc}
   123c0:	andeq	pc, r2, r0, asr #2
   123c4:	strdeq	pc, [r2], -r0
   123c8:	push	{r4, r5, r6, lr}
   123cc:	mov	r5, r0
   123d0:	ldr	r4, [pc, #52]	; 1240c <__assert_fail@plt+0xfc8>
   123d4:	ldr	r3, [r4, #8]
   123d8:	ldr	r2, [r4, #16]
   123dc:	ldr	r0, [r4, #12]
   123e0:	cmp	r3, r2
   123e4:	bcs	123f8 <__assert_fail@plt+0xfb4>
   123e8:	add	r2, r3, #1
   123ec:	strb	r5, [r0, r3]
   123f0:	str	r2, [r4, #8]
   123f4:	pop	{r4, r5, r6, pc}
   123f8:	add	r1, r4, #16
   123fc:	bl	19434 <__assert_fail@plt+0x7ff0>
   12400:	ldr	r3, [r4, #8]
   12404:	str	r0, [r4, #12]
   12408:	b	123e8 <__assert_fail@plt+0xfa4>
   1240c:	strdeq	pc, [r2], -r0
   12410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12414:	sub	sp, sp, #44	; 0x2c
   12418:	ldr	r5, [pc, #264]	; 12528 <__assert_fail@plt+0x10e4>
   1241c:	ldr	r7, [pc, #264]	; 1252c <__assert_fail@plt+0x10e8>
   12420:	mvn	sl, #0
   12424:	ldr	r3, [r5]
   12428:	mvn	fp, #0
   1242c:	str	r3, [sp, #36]	; 0x24
   12430:	mov	r4, r2
   12434:	add	r3, sp, #16
   12438:	mov	r8, r0
   1243c:	mov	r9, r1
   12440:	mov	r0, r2
   12444:	str	r7, [sp]
   12448:	add	r1, sp, #12
   1244c:	mov	r2, #10
   12450:	strd	sl, [sp, #24]
   12454:	bl	1aaa8 <__assert_fail@plt+0x9664>
   12458:	bics	r3, r0, #2
   1245c:	bne	12514 <__assert_fail@plt+0x10d0>
   12460:	ldr	r0, [sp, #12]
   12464:	cmp	r0, r4
   12468:	beq	124a8 <__assert_fail@plt+0x1064>
   1246c:	ldrd	r2, [sp, #16]
   12470:	orrs	r1, r2, r3
   12474:	beq	124a8 <__assert_fail@plt+0x1064>
   12478:	ldrb	r1, [r0]
   1247c:	cmp	r1, #58	; 0x3a
   12480:	beq	124c4 <__assert_fail@plt+0x1080>
   12484:	cmp	r1, #0
   12488:	bne	124a8 <__assert_fail@plt+0x1064>
   1248c:	ldr	r0, [pc, #156]	; 12530 <__assert_fail@plt+0x10ec>
   12490:	ldr	r1, [pc, #156]	; 12534 <__assert_fail@plt+0x10f0>
   12494:	ldrd	r6, [sp, #24]
   12498:	strd	r2, [r0, #24]
   1249c:	mov	r0, #1
   124a0:	strd	r6, [r1, #8]
   124a4:	b	124ac <__assert_fail@plt+0x1068>
   124a8:	mov	r0, #0
   124ac:	ldr	r2, [sp, #36]	; 0x24
   124b0:	ldr	r3, [r5]
   124b4:	cmp	r2, r3
   124b8:	bne	12510 <__assert_fail@plt+0x10cc>
   124bc:	add	sp, sp, #44	; 0x2c
   124c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124c4:	add	r6, r0, #1
   124c8:	str	r7, [sp]
   124cc:	add	r1, sp, #12
   124d0:	mov	r0, r6
   124d4:	add	r3, sp, #24
   124d8:	mov	r2, #10
   124dc:	bl	1aaa8 <__assert_fail@plt+0x9664>
   124e0:	cmp	r0, #0
   124e4:	bne	12514 <__assert_fail@plt+0x10d0>
   124e8:	ldr	ip, [sp, #12]
   124ec:	cmp	ip, r6
   124f0:	beq	124a8 <__assert_fail@plt+0x1064>
   124f4:	ldrd	r0, [sp, #24]
   124f8:	ldrd	r2, [sp, #16]
   124fc:	cmp	r1, r3
   12500:	cmpeq	r0, r2
   12504:	bcc	124a8 <__assert_fail@plt+0x1064>
   12508:	ldrb	r1, [ip]
   1250c:	b	12484 <__assert_fail@plt+0x1040>
   12510:	bl	111c8 <__stack_chk_fail@plt>
   12514:	str	r4, [sp]
   12518:	mov	r2, r9
   1251c:	mov	r1, r8
   12520:	ldr	r3, [pc, #16]	; 12538 <__assert_fail@plt+0x10f4>
   12524:	bl	1aa10 <__assert_fail@plt+0x95cc>
   12528:	andeq	lr, r2, r8, lsl #30
   1252c:	andeq	ip, r1, r8, ror #14
   12530:	strdeq	pc, [r2], -r0
   12534:	andeq	pc, r2, r0, asr #2
   12538:	andeq	ip, r1, r8, ror #9
   1253c:	push	{r4, r6, r7, lr}
   12540:	mov	r2, #5
   12544:	sub	sp, sp, #24
   12548:	mov	r4, r0
   1254c:	ldr	r1, [pc, #80]	; 125a4 <__assert_fail@plt+0x1160>
   12550:	mov	r0, #0
   12554:	bl	111bc <dcgettext@plt>
   12558:	mvn	r6, #-2147483648	; 0x80000000
   1255c:	ldr	r2, [pc, #68]	; 125a8 <__assert_fail@plt+0x1164>
   12560:	mov	r7, #0
   12564:	mov	r3, #0
   12568:	str	r2, [sp, #8]
   1256c:	str	r3, [sp, #16]
   12570:	strd	r6, [sp]
   12574:	mov	r2, #1
   12578:	mov	r3, #0
   1257c:	str	r0, [sp, #12]
   12580:	mov	r0, r4
   12584:	bl	196c8 <__assert_fail@plt+0x8284>
   12588:	ldr	r3, [pc, #28]	; 125ac <__assert_fail@plt+0x1168>
   1258c:	ldr	r2, [pc, #28]	; 125b0 <__assert_fail@plt+0x116c>
   12590:	mov	r1, #1
   12594:	strb	r1, [r2, #32]
   12598:	str	r0, [r3]
   1259c:	add	sp, sp, #24
   125a0:	pop	{r4, r6, r7, pc}
   125a4:	andeq	ip, r1, r8, lsl #14
   125a8:	andeq	ip, r1, r8, ror #14
   125ac:	andeq	pc, r2, r0, asr #2
   125b0:	strdeq	pc, [r2], -r0
   125b4:	ldr	r3, [r0, #8]
   125b8:	cmp	r3, #3
   125bc:	bxeq	lr
   125c0:	push	{r4, r5, r6, lr}
   125c4:	mov	r4, r0
   125c8:	ldr	r0, [r0]
   125cc:	ldr	r3, [r0]
   125d0:	ands	r5, r3, #32
   125d4:	bne	12688 <__assert_fail@plt+0x1244>
   125d8:	bl	1136c <fileno@plt>
   125dc:	cmp	r0, #0
   125e0:	bne	1264c <__assert_fail@plt+0x1208>
   125e4:	ldr	r0, [pc, #200]	; 126b4 <__assert_fail@plt+0x1270>
   125e8:	ldrb	r3, [r0, #33]	; 0x21
   125ec:	cmp	r3, #0
   125f0:	bne	1262c <__assert_fail@plt+0x11e8>
   125f4:	ldr	r2, [pc, #188]	; 126b8 <__assert_fail@plt+0x1274>
   125f8:	ldr	r3, [r0]
   125fc:	ldr	r2, [r2]
   12600:	cmp	r2, #0
   12604:	beq	1263c <__assert_fail@plt+0x11f8>
   12608:	mov	ip, #3
   1260c:	ldr	r1, [r3, #24]
   12610:	str	ip, [r3, #8]
   12614:	cmp	r1, #0
   12618:	streq	r1, [r3, #28]
   1261c:	subs	r2, r2, #1
   12620:	add	r3, r3, #40	; 0x28
   12624:	bne	1260c <__assert_fail@plt+0x11c8>
   12628:	b	1263c <__assert_fail@plt+0x11f8>
   1262c:	mov	r2, #3
   12630:	mov	r3, #0
   12634:	str	r2, [r4, #8]
   12638:	str	r3, [r4, #28]
   1263c:	ldr	r3, [r0, #4]
   12640:	sub	r3, r3, #1
   12644:	str	r3, [r0, #4]
   12648:	pop	{r4, r5, r6, pc}
   1264c:	ldr	r0, [r4]
   12650:	bl	1b4b0 <__assert_fail@plt+0xa06c>
   12654:	cmp	r0, #0
   12658:	beq	125e4 <__assert_fail@plt+0x11a0>
   1265c:	bl	11330 <__errno_location@plt>
   12660:	ldr	r2, [r4, #4]
   12664:	mov	r1, #3
   12668:	ldr	r4, [r0]
   1266c:	mov	r0, r5
   12670:	bl	18b84 <__assert_fail@plt+0x7740>
   12674:	mov	r1, r4
   12678:	ldr	r2, [pc, #60]	; 126bc <__assert_fail@plt+0x1278>
   1267c:	mov	r3, r0
   12680:	mov	r0, #1
   12684:	bl	11270 <error@plt>
   12688:	bl	11330 <__errno_location@plt>
   1268c:	ldr	r2, [r4, #4]
   12690:	mov	r1, #3
   12694:	ldr	r4, [r0]
   12698:	mov	r0, #0
   1269c:	bl	18b84 <__assert_fail@plt+0x7740>
   126a0:	mov	r1, r4
   126a4:	ldr	r2, [pc, #16]	; 126bc <__assert_fail@plt+0x1278>
   126a8:	mov	r3, r0
   126ac:	mov	r0, #1
   126b0:	bl	11270 <error@plt>
   126b4:	strdeq	pc, [r2], -r0
   126b8:	andeq	pc, r2, r0, asr #2
   126bc:	andeq	sp, r1, r0, asr #25
   126c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   126c4:	sub	sp, sp, #200	; 0xc8
   126c8:	ldr	r6, [pc, #416]	; 12870 <__assert_fail@plt+0x142c>
   126cc:	mov	r7, r1
   126d0:	ldr	r1, [pc, #412]	; 12874 <__assert_fail@plt+0x1430>
   126d4:	ldr	r3, [r6]
   126d8:	mov	r8, r0
   126dc:	str	r3, [sp, #196]	; 0xc4
   126e0:	bl	11120 <strcmp@plt>
   126e4:	cmp	r0, #0
   126e8:	beq	127d8 <__assert_fail@plt+0x1394>
   126ec:	cmp	r7, #0
   126f0:	bge	127e0 <__assert_fail@plt+0x139c>
   126f4:	ldr	r4, [pc, #380]	; 12878 <__assert_fail@plt+0x1434>
   126f8:	add	r5, r4, #36	; 0x24
   126fc:	ldr	r3, [r4, #36]	; 0x24
   12700:	cmp	r3, #0
   12704:	beq	12860 <__assert_fail@plt+0x141c>
   12708:	ldm	r5, {r0, r1}
   1270c:	add	r3, sp, #12
   12710:	stm	r3, {r0, r1}
   12714:	ldr	r9, [sp, #16]
   12718:	mov	r1, r3
   1271c:	add	r2, sp, #20
   12720:	ldr	r0, [r4, #44]	; 0x2c
   12724:	bl	1bb3c <__assert_fail@plt+0xa6f8>
   12728:	cmp	r0, #0
   1272c:	beq	12824 <__assert_fail@plt+0x13e0>
   12730:	ldr	r3, [r4, #44]	; 0x2c
   12734:	ldr	r2, [r4, #48]	; 0x30
   12738:	mvn	r1, #0
   1273c:	stm	sp, {r3, r9}
   12740:	mov	r0, #0
   12744:	add	r3, sp, #20
   12748:	bl	16a90 <__assert_fail@plt+0x564c>
   1274c:	add	sl, r0, #1
   12750:	mov	r0, sl
   12754:	bl	192cc <__assert_fail@plt+0x7e88>
   12758:	ldr	r2, [r4, #44]	; 0x2c
   1275c:	mov	r1, sl
   12760:	str	r2, [sp]
   12764:	str	r9, [sp, #4]
   12768:	add	r3, sp, #20
   1276c:	ldr	r2, [r4, #48]	; 0x30
   12770:	mov	r5, r0
   12774:	bl	16a90 <__assert_fail@plt+0x564c>
   12778:	ldr	r0, [r4, #52]	; 0x34
   1277c:	bl	11168 <free@plt>
   12780:	ldr	r3, [r4, #56]	; 0x38
   12784:	str	r5, [r4, #52]	; 0x34
   12788:	cmp	r3, #0
   1278c:	beq	12814 <__assert_fail@plt+0x13d0>
   12790:	ldr	r2, [pc, #228]	; 1287c <__assert_fail@plt+0x1438>
   12794:	mov	r0, r5
   12798:	mov	r1, #0
   1279c:	ldr	r5, [r2, #16]
   127a0:	str	r3, [r4, #60]	; 0x3c
   127a4:	bl	152c4 <__assert_fail@plt+0x3e80>
   127a8:	mov	r1, #0
   127ac:	sub	r5, r5, r0
   127b0:	ldr	r0, [r4, #60]	; 0x3c
   127b4:	bl	152c4 <__assert_fail@plt+0x3e80>
   127b8:	ldr	r2, [sp, #196]	; 0xc4
   127bc:	ldr	r3, [r6]
   127c0:	cmp	r2, r3
   127c4:	sub	r0, r5, r0
   127c8:	str	r0, [r4, #64]	; 0x40
   127cc:	bne	1286c <__assert_fail@plt+0x1428>
   127d0:	add	sp, sp, #200	; 0xc8
   127d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   127d8:	mvn	r7, #0
   127dc:	b	126f4 <__assert_fail@plt+0x12b0>
   127e0:	add	r2, sp, #64	; 0x40
   127e4:	mov	r1, r7
   127e8:	mov	r0, #3
   127ec:	bl	1121c <__fxstat64@plt>
   127f0:	cmp	r0, #0
   127f4:	bne	126f4 <__assert_fail@plt+0x12b0>
   127f8:	ldr	r3, [sp, #144]	; 0x90
   127fc:	ldr	r9, [sp, #148]	; 0x94
   12800:	str	r3, [sp, #12]
   12804:	str	r9, [sp, #16]
   12808:	ldr	r4, [pc, #104]	; 12878 <__assert_fail@plt+0x1434>
   1280c:	add	r3, sp, #12
   12810:	b	12718 <__assert_fail@plt+0x12d4>
   12814:	cmp	r7, #0
   12818:	ldr	r3, [pc, #96]	; 12880 <__assert_fail@plt+0x143c>
   1281c:	movge	r3, r8
   12820:	b	12790 <__assert_fail@plt+0x134c>
   12824:	mov	r0, #33	; 0x21
   12828:	bl	192cc <__assert_fail@plt+0x7e88>
   1282c:	add	r2, sp, #172	; 0xac
   12830:	mov	r5, r0
   12834:	ldr	r0, [sp, #12]
   12838:	asr	r1, r0, #31
   1283c:	bl	1502c <__assert_fail@plt+0x3be8>
   12840:	str	r9, [sp, #4]
   12844:	ldr	r3, [pc, #56]	; 12884 <__assert_fail@plt+0x1440>
   12848:	mov	r2, #33	; 0x21
   1284c:	mov	r1, #1
   12850:	str	r0, [sp]
   12854:	mov	r0, r5
   12858:	bl	1133c <__sprintf_chk@plt>
   1285c:	b	12778 <__assert_fail@plt+0x1334>
   12860:	mov	r0, r5
   12864:	bl	14f70 <__assert_fail@plt+0x3b2c>
   12868:	b	12708 <__assert_fail@plt+0x12c4>
   1286c:	bl	111c8 <__stack_chk_fail@plt>
   12870:	andeq	lr, r2, r8, lsl #30
   12874:	andeq	ip, r1, r4, lsr #14
   12878:	strdeq	pc, [r2], -r0
   1287c:	andeq	pc, r2, r0, asr #2
   12880:	andeq	ip, r1, r8, ror #14
   12884:	andeq	ip, r1, r8, lsr #14
   12888:	push	{r4, r5, r6, r7, r8, lr}
   1288c:	ldr	r7, [pc, #104]	; 128fc <__assert_fail@plt+0x14b8>
   12890:	ldrb	r3, [r7, #72]	; 0x48
   12894:	ldr	r4, [r7, #68]	; 0x44
   12898:	cmp	r3, #0
   1289c:	bne	128e4 <__assert_fail@plt+0x14a0>
   128a0:	mov	r5, r0
   128a4:	ldr	r6, [pc, #84]	; 12900 <__assert_fail@plt+0x14bc>
   128a8:	mov	r8, #32
   128ac:	b	128d0 <__assert_fail@plt+0x148c>
   128b0:	ldr	r0, [r6]
   128b4:	ldr	r3, [r0, #20]
   128b8:	ldr	r2, [r0, #24]
   128bc:	add	r1, r3, #1
   128c0:	cmp	r3, r2
   128c4:	strcc	r1, [r0, #20]
   128c8:	strbcc	r8, [r3]
   128cc:	bcs	128f0 <__assert_fail@plt+0x14ac>
   128d0:	add	r4, r4, #1
   128d4:	cmp	r5, r4
   128d8:	bge	128b0 <__assert_fail@plt+0x146c>
   128dc:	str	r5, [r7, #68]	; 0x44
   128e0:	pop	{r4, r5, r6, r7, r8, pc}
   128e4:	sub	r0, r0, r4
   128e8:	str	r0, [r7, #76]	; 0x4c
   128ec:	pop	{r4, r5, r6, r7, r8, pc}
   128f0:	mov	r1, #32
   128f4:	bl	113b4 <__overflow@plt>
   128f8:	b	128d0 <__assert_fail@plt+0x148c>
   128fc:	strdeq	pc, [r2], -r0
   12900:	andeq	pc, r2, r4, ror #3
   12904:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12908:	ldr	r8, [pc, #196]	; 129d4 <__assert_fail@plt+0x1590>
   1290c:	ldr	r6, [pc, #196]	; 129d8 <__assert_fail@plt+0x1594>
   12910:	ldr	r7, [pc, #196]	; 129dc <__assert_fail@plt+0x1598>
   12914:	ldr	r5, [r8, #68]	; 0x44
   12918:	ldr	r9, [r8, #76]	; 0x4c
   1291c:	add	r9, r5, r9
   12920:	b	12928 <__assert_fail@plt+0x14e4>
   12924:	mov	r5, r4
   12928:	sub	r3, r9, r5
   1292c:	cmp	r3, #1
   12930:	mov	r0, r5
   12934:	ble	12980 <__assert_fail@plt+0x153c>
   12938:	ldr	r4, [r6, #24]
   1293c:	mov	r1, r4
   12940:	bl	1c1f8 <__assert_fail@plt+0xadb4>
   12944:	sub	r4, r4, r1
   12948:	add	r4, r4, r5
   1294c:	cmp	r9, r4
   12950:	blt	12980 <__assert_fail@plt+0x153c>
   12954:	ldr	r0, [r7]
   12958:	ldrb	r1, [r6, #20]
   1295c:	ldr	r3, [r0, #20]
   12960:	ldr	r2, [r0, #24]
   12964:	add	ip, r3, #1
   12968:	cmp	r3, r2
   1296c:	strcc	ip, [r0, #20]
   12970:	strbcc	r1, [r3]
   12974:	bcc	12924 <__assert_fail@plt+0x14e0>
   12978:	bl	113b4 <__overflow@plt>
   1297c:	b	12924 <__assert_fail@plt+0x14e0>
   12980:	ldr	r4, [pc, #84]	; 129dc <__assert_fail@plt+0x1598>
   12984:	mov	r6, #32
   12988:	b	129ac <__assert_fail@plt+0x1568>
   1298c:	ldr	r0, [r4]
   12990:	ldr	r3, [r0, #20]
   12994:	ldr	r2, [r0, #24]
   12998:	add	r1, r3, #1
   1299c:	cmp	r3, r2
   129a0:	strcc	r1, [r0, #20]
   129a4:	strbcc	r6, [r3]
   129a8:	bcs	129c8 <__assert_fail@plt+0x1584>
   129ac:	add	r5, r5, #1
   129b0:	cmp	r9, r5
   129b4:	bge	1298c <__assert_fail@plt+0x1548>
   129b8:	mov	r3, #0
   129bc:	str	r9, [r8, #68]	; 0x44
   129c0:	str	r3, [r8, #76]	; 0x4c
   129c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   129c8:	mov	r1, #32
   129cc:	bl	113b4 <__overflow@plt>
   129d0:	b	129ac <__assert_fail@plt+0x1568>
   129d4:	strdeq	pc, [r2], -r0
   129d8:	andeq	pc, r2, r0, asr #2
   129dc:	andeq	pc, r2, r4, ror #3
   129e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129e4:	ldr	r5, [pc, #220]	; 12ac8 <__assert_fail@plt+0x1684>
   129e8:	ldrd	r2, [r5, #76]	; 0x4c
   129ec:	cmp	r3, #0
   129f0:	ble	12ab8 <__assert_fail@plt+0x1674>
   129f4:	ldr	r3, [pc, #208]	; 12acc <__assert_fail@plt+0x1688>
   129f8:	ldr	r6, [r5, #84]	; 0x54
   129fc:	ldr	r7, [pc, #204]	; 12ad0 <__assert_fail@plt+0x168c>
   12a00:	ldr	r8, [r3, #28]
   12a04:	mov	r4, r8
   12a08:	add	r9, r8, r6
   12a0c:	sub	r3, r9, r4
   12a10:	cmp	r3, #0
   12a14:	ble	12a78 <__assert_fail@plt+0x1634>
   12a18:	ldrb	r1, [r4], #1
   12a1c:	cmp	r1, #32
   12a20:	addeq	r2, r2, #1
   12a24:	streq	r2, [r5, #76]	; 0x4c
   12a28:	beq	12a0c <__assert_fail@plt+0x15c8>
   12a2c:	cmp	r2, #0
   12a30:	ble	12a3c <__assert_fail@plt+0x15f8>
   12a34:	bl	12904 <__assert_fail@plt+0x14c0>
   12a38:	ldrb	r1, [r4, #-1]
   12a3c:	ldr	r0, [r7]
   12a40:	ldr	r3, [r0, #20]
   12a44:	ldr	r2, [r0, #24]
   12a48:	add	ip, r3, #1
   12a4c:	cmp	r3, r2
   12a50:	strcc	ip, [r0, #20]
   12a54:	strbcc	r1, [r3]
   12a58:	bcs	12ab0 <__assert_fail@plt+0x166c>
   12a5c:	ldr	r3, [r5, #68]	; 0x44
   12a60:	ldr	r2, [r5, #76]	; 0x4c
   12a64:	add	r3, r3, #1
   12a68:	str	r3, [r5, #68]	; 0x44
   12a6c:	sub	r3, r9, r4
   12a70:	cmp	r3, #0
   12a74:	bgt	12a18 <__assert_fail@plt+0x15d4>
   12a78:	bic	r3, r6, r6, asr #31
   12a7c:	cmp	r2, #0
   12a80:	sub	r6, r6, #1
   12a84:	add	r8, r8, r3
   12a88:	sub	r6, r6, r3
   12a8c:	ble	12a94 <__assert_fail@plt+0x1650>
   12a90:	bl	12904 <__assert_fail@plt+0x14c0>
   12a94:	ldr	r3, [r5, #80]	; 0x50
   12a98:	sub	r3, r3, #1
   12a9c:	cmp	r3, #0
   12aa0:	str	r3, [r5, #80]	; 0x50
   12aa4:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   12aa8:	ldr	r2, [r5, #76]	; 0x4c
   12aac:	b	12a04 <__assert_fail@plt+0x15c0>
   12ab0:	bl	113b4 <__overflow@plt>
   12ab4:	b	12a5c <__assert_fail@plt+0x1618>
   12ab8:	cmp	r2, #0
   12abc:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ac4:	b	12904 <__assert_fail@plt+0x14c0>
   12ac8:	strdeq	pc, [r2], -r0
   12acc:	andeq	pc, r2, r0, asr #2
   12ad0:	andeq	pc, r2, r4, ror #3
   12ad4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ad8:	sub	sp, sp, #312	; 0x138
   12adc:	ldr	r7, [pc, #240]	; 12bd4 <__assert_fail@plt+0x1790>
   12ae0:	ldr	r4, [pc, #240]	; 12bd8 <__assert_fail@plt+0x1794>
   12ae4:	mov	r6, #0
   12ae8:	ldr	r3, [r7]
   12aec:	ldr	r0, [r4, #88]	; 0x58
   12af0:	str	r3, [sp, #308]	; 0x134
   12af4:	str	r6, [r4, #68]	; 0x44
   12af8:	bl	12888 <__assert_fail@plt+0x1444>
   12afc:	bl	12904 <__assert_fail@plt+0x14c0>
   12b00:	ldrd	r8, [r4, #96]	; 0x60
   12b04:	mov	r2, #5
   12b08:	orrs	r3, r8, r9
   12b0c:	beq	12bb4 <__assert_fail@plt+0x1770>
   12b10:	ldr	r1, [pc, #196]	; 12bdc <__assert_fail@plt+0x1798>
   12b14:	mov	r0, r6
   12b18:	bl	111bc <dcgettext@plt>
   12b1c:	add	sl, sp, #32
   12b20:	mov	r2, #276	; 0x114
   12b24:	mov	r1, #1
   12b28:	strd	r8, [sp]
   12b2c:	mov	r3, r0
   12b30:	mov	r0, sl
   12b34:	bl	1133c <__sprintf_chk@plt>
   12b38:	mov	r1, r6
   12b3c:	mov	r0, sl
   12b40:	ldr	r5, [r4, #64]	; 0x40
   12b44:	bl	152c4 <__assert_fail@plt+0x3e80>
   12b48:	ldr	r3, [pc, #144]	; 12be0 <__assert_fail@plt+0x179c>
   12b4c:	ldr	r1, [r4, #60]	; 0x3c
   12b50:	ldr	r2, [r4, #52]	; 0x34
   12b54:	str	r3, [sp, #20]
   12b58:	str	r3, [sp, #8]
   12b5c:	str	r1, [sp, #12]
   12b60:	str	r2, [sp]
   12b64:	ldr	r3, [pc, #120]	; 12be4 <__assert_fail@plt+0x17a0>
   12b68:	ldr	r2, [r4, #88]	; 0x58
   12b6c:	str	sl, [sp, #24]
   12b70:	ldr	r1, [pc, #112]	; 12be8 <__assert_fail@plt+0x17a4>
   12b74:	sub	ip, r5, r0
   12b78:	mov	r0, #1
   12b7c:	bic	ip, ip, ip, asr #31
   12b80:	asr	lr, ip, r0
   12b84:	sub	ip, ip, lr
   12b88:	str	ip, [sp, #16]
   12b8c:	str	lr, [sp, #4]
   12b90:	bl	11360 <__printf_chk@plt>
   12b94:	ldr	r2, [sp, #308]	; 0x134
   12b98:	ldr	r3, [r7]
   12b9c:	strb	r6, [r4, #104]	; 0x68
   12ba0:	cmp	r2, r3
   12ba4:	str	r6, [r4, #68]	; 0x44
   12ba8:	bne	12bd0 <__assert_fail@plt+0x178c>
   12bac:	add	sp, sp, #312	; 0x138
   12bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12bb4:	ldr	r1, [pc, #48]	; 12bec <__assert_fail@plt+0x17a8>
   12bb8:	mov	r0, r6
   12bbc:	bl	111bc <dcgettext@plt>
   12bc0:	mov	r1, r6
   12bc4:	mov	r2, r0
   12bc8:	mov	r0, #1
   12bcc:	bl	11270 <error@plt>
   12bd0:	bl	111c8 <__stack_chk_fail@plt>
   12bd4:	andeq	lr, r2, r8, lsl #30
   12bd8:	strdeq	pc, [r2], -r0
   12bdc:	andeq	ip, r1, r8, asr #14
   12be0:	andeq	ip, r1, ip, ror #14
   12be4:	andeq	ip, r1, r8, ror #14
   12be8:	andeq	ip, r1, r4, asr r7
   12bec:	andeq	ip, r1, r0, lsr r7
   12bf0:	ldr	r3, [pc, #488]	; 12de0 <__assert_fail@plt+0x199c>
   12bf4:	push	{r4, r5, r6, r7, r8, r9, lr}
   12bf8:	sub	sp, sp, #20
   12bfc:	ldr	r9, [pc, #480]	; 12de4 <__assert_fail@plt+0x19a0>
   12c00:	ldrb	r1, [r3, #32]
   12c04:	ldr	r6, [pc, #476]	; 12de8 <__assert_fail@plt+0x19a4>
   12c08:	ldr	r2, [r9]
   12c0c:	cmp	r1, r0
   12c10:	mov	r7, r0
   12c14:	str	r2, [sp, #12]
   12c18:	ldr	r4, [r6, #108]	; 0x6c
   12c1c:	beq	12cd8 <__assert_fail@plt+0x1894>
   12c20:	cmp	r0, #9
   12c24:	beq	12c80 <__assert_fail@plt+0x183c>
   12c28:	bl	112e8 <__ctype_b_loc@plt>
   12c2c:	lsl	r3, r7, #1
   12c30:	ldr	r2, [r0]
   12c34:	ldrh	r3, [r2, r3]
   12c38:	tst	r3, #16384	; 0x4000
   12c3c:	bne	12d44 <__assert_fail@plt+0x1900>
   12c40:	ldrb	r3, [r6, #117]	; 0x75
   12c44:	cmp	r3, #0
   12c48:	bne	12d64 <__assert_fail@plt+0x1920>
   12c4c:	ldrb	r3, [r6, #118]	; 0x76
   12c50:	cmp	r3, #0
   12c54:	beq	12dac <__assert_fail@plt+0x1968>
   12c58:	tst	r7, #128	; 0x80
   12c5c:	bne	12d64 <__assert_fail@plt+0x1920>
   12c60:	ldr	r5, [r6, #112]	; 0x70
   12c64:	eor	r7, r7, #64	; 0x40
   12c68:	mov	r3, #94	; 0x5e
   12c6c:	strb	r7, [r4, #1]
   12c70:	add	r5, r5, #2
   12c74:	strb	r3, [r4]
   12c78:	mov	r0, #2
   12c7c:	b	12cbc <__assert_fail@plt+0x1878>
   12c80:	ldr	r5, [r6, #112]	; 0x70
   12c84:	ldrb	r2, [r6, #116]	; 0x74
   12c88:	rsbs	r3, r5, #0
   12c8c:	and	r3, r3, #7
   12c90:	and	r0, r5, #7
   12c94:	rsbpl	r0, r3, #0
   12c98:	rsb	r0, r0, #8
   12c9c:	cmp	r2, #0
   12ca0:	moveq	r1, r0
   12ca4:	bne	12d04 <__assert_fail@plt+0x18c0>
   12ca8:	cmp	r1, #0
   12cac:	strb	r7, [r4]
   12cb0:	mov	r0, #1
   12cb4:	blt	12d24 <__assert_fail@plt+0x18e0>
   12cb8:	add	r5, r5, r1
   12cbc:	str	r5, [r6, #112]	; 0x70
   12cc0:	ldr	r2, [sp, #12]
   12cc4:	ldr	r3, [r9]
   12cc8:	cmp	r2, r3
   12ccc:	bne	12ddc <__assert_fail@plt+0x1998>
   12cd0:	add	sp, sp, #20
   12cd4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12cd8:	ldr	r8, [r3, #36]	; 0x24
   12cdc:	ldr	r5, [r6, #112]	; 0x70
   12ce0:	mov	r1, r8
   12ce4:	mov	r0, r5
   12ce8:	bl	1c1f8 <__assert_fail@plt+0xadb4>
   12cec:	ldrb	r3, [r6, #116]	; 0x74
   12cf0:	cmp	r3, #0
   12cf4:	sub	r1, r8, r1
   12cf8:	beq	12ca8 <__assert_fail@plt+0x1864>
   12cfc:	subs	r0, r1, #0
   12d00:	beq	12cbc <__assert_fail@plt+0x1878>
   12d04:	add	r2, r4, r0
   12d08:	mov	r3, #32
   12d0c:	strb	r3, [r4], #1
   12d10:	cmp	r4, r2
   12d14:	bne	12d0c <__assert_fail@plt+0x18c8>
   12d18:	mov	r1, r0
   12d1c:	cmp	r1, #0
   12d20:	bge	12cb8 <__assert_fail@plt+0x1874>
   12d24:	cmp	r5, #0
   12d28:	rsbne	r3, r1, #0
   12d2c:	beq	12d58 <__assert_fail@plt+0x1914>
   12d30:	cmp	r3, r5
   12d34:	movge	r3, #0
   12d38:	strge	r3, [r6, #112]	; 0x70
   12d3c:	bge	12cc0 <__assert_fail@plt+0x187c>
   12d40:	b	12cb8 <__assert_fail@plt+0x1874>
   12d44:	ldr	r5, [r6, #112]	; 0x70
   12d48:	strb	r7, [r4]
   12d4c:	add	r5, r5, #1
   12d50:	mov	r0, #1
   12d54:	b	12cbc <__assert_fail@plt+0x1878>
   12d58:	mov	r0, #0
   12d5c:	str	r0, [r6, #112]	; 0x70
   12d60:	b	12cc0 <__assert_fail@plt+0x187c>
   12d64:	mov	r3, #92	; 0x5c
   12d68:	strb	r3, [r4]
   12d6c:	mov	r2, #4
   12d70:	ldr	r3, [pc, #116]	; 12dec <__assert_fail@plt+0x19a8>
   12d74:	str	r7, [sp]
   12d78:	mov	r1, #1
   12d7c:	add	r0, sp, #8
   12d80:	bl	1133c <__sprintf_chk@plt>
   12d84:	ldrb	r3, [sp, #8]
   12d88:	ldr	r5, [r6, #112]	; 0x70
   12d8c:	mov	r0, #4
   12d90:	strb	r3, [r4, #1]
   12d94:	ldrb	r3, [sp, #9]
   12d98:	add	r5, r5, r0
   12d9c:	strb	r3, [r4, #2]
   12da0:	ldrb	r3, [sp, #10]
   12da4:	strb	r3, [r4, #3]
   12da8:	b	12cbc <__assert_fail@plt+0x1878>
   12dac:	cmp	r7, #8
   12db0:	ldr	r5, [r6, #112]	; 0x70
   12db4:	strbne	r7, [r4]
   12db8:	movne	r0, #1
   12dbc:	bne	12cbc <__assert_fail@plt+0x1878>
   12dc0:	cmp	r5, #0
   12dc4:	strb	r7, [r4]
   12dc8:	beq	12d58 <__assert_fail@plt+0x1914>
   12dcc:	mov	r3, #1
   12dd0:	mov	r0, r3
   12dd4:	mvn	r1, #0
   12dd8:	b	12d30 <__assert_fail@plt+0x18ec>
   12ddc:	bl	111c8 <__stack_chk_fail@plt>
   12de0:	andeq	pc, r2, r0, asr #2
   12de4:	andeq	lr, r2, r8, lsl #30
   12de8:	strdeq	pc, [r2], -r0
   12dec:	andeq	ip, r1, r0, ror r7
   12df0:	push	{r4, r5, r6, lr}
   12df4:	mov	r5, r0
   12df8:	ldr	r4, [pc, #152]	; 12e98 <__assert_fail@plt+0x1a54>
   12dfc:	ldrb	r3, [r4, #72]	; 0x48
   12e00:	cmp	r3, #0
   12e04:	beq	12e48 <__assert_fail@plt+0x1a04>
   12e08:	cmp	r0, #32
   12e0c:	ldr	r3, [r4, #76]	; 0x4c
   12e10:	beq	12e80 <__assert_fail@plt+0x1a3c>
   12e14:	cmp	r3, #0
   12e18:	ble	12e20 <__assert_fail@plt+0x19dc>
   12e1c:	bl	12904 <__assert_fail@plt+0x14c0>
   12e20:	bl	112e8 <__ctype_b_loc@plt>
   12e24:	lsl	r3, r5, #1
   12e28:	ldr	r2, [r0]
   12e2c:	ldrh	r3, [r2, r3]
   12e30:	tst	r3, #16384	; 0x4000
   12e34:	bne	12e70 <__assert_fail@plt+0x1a2c>
   12e38:	cmp	r5, #8
   12e3c:	ldreq	r3, [r4, #68]	; 0x44
   12e40:	subeq	r3, r3, #1
   12e44:	streq	r3, [r4, #68]	; 0x44
   12e48:	ldr	r3, [pc, #76]	; 12e9c <__assert_fail@plt+0x1a58>
   12e4c:	ldr	r0, [r3]
   12e50:	ldr	r3, [r0, #20]
   12e54:	ldr	r2, [r0, #24]
   12e58:	cmp	r3, r2
   12e5c:	bcs	12e8c <__assert_fail@plt+0x1a48>
   12e60:	add	r2, r3, #1
   12e64:	str	r2, [r0, #20]
   12e68:	strb	r5, [r3]
   12e6c:	pop	{r4, r5, r6, pc}
   12e70:	ldr	r3, [r4, #68]	; 0x44
   12e74:	add	r3, r3, #1
   12e78:	str	r3, [r4, #68]	; 0x44
   12e7c:	b	12e48 <__assert_fail@plt+0x1a04>
   12e80:	add	r3, r3, #1
   12e84:	str	r3, [r4, #76]	; 0x4c
   12e88:	pop	{r4, r5, r6, pc}
   12e8c:	mov	r1, r5
   12e90:	pop	{r4, r5, r6, lr}
   12e94:	b	113b4 <__overflow@plt>
   12e98:	strdeq	pc, [r2], -r0
   12e9c:	andeq	pc, r2, r4, ror #3
   12ea0:	push	{r4, r5, r6, r7, r8, lr}
   12ea4:	mov	r2, #1
   12ea8:	ldr	r6, [pc, #300]	; 12fdc <__assert_fail@plt+0x1b98>
   12eac:	ldr	r7, [r0, #20]
   12eb0:	mov	r8, r0
   12eb4:	ldr	r3, [r6, #120]	; 0x78
   12eb8:	add	r0, r7, r2
   12ebc:	str	r0, [r8, #20]
   12ec0:	ldrb	r1, [r6, #104]	; 0x68
   12ec4:	add	r0, r3, r7, lsl #2
   12ec8:	ldr	r4, [r3, r7, lsl #2]
   12ecc:	ldr	r5, [r6, #12]
   12ed0:	ldr	r3, [r0, #4]
   12ed4:	cmp	r1, #0
   12ed8:	add	r4, r5, r4
   12edc:	strb	r2, [r6, #124]	; 0x7c
   12ee0:	add	r5, r5, r3
   12ee4:	bne	12fb8 <__assert_fail@plt+0x1b74>
   12ee8:	ldr	r3, [r8, #8]
   12eec:	cmp	r3, #1
   12ef0:	beq	12f68 <__assert_fail@plt+0x1b24>
   12ef4:	ldr	r3, [r6, #84]	; 0x54
   12ef8:	ldr	r0, [r6, #128]	; 0x80
   12efc:	cmp	r3, r0
   12f00:	blt	12fc8 <__assert_fail@plt+0x1b84>
   12f04:	ldrb	r3, [r6, #132]	; 0x84
   12f08:	cmp	r3, #0
   12f0c:	bne	12fc0 <__assert_fail@plt+0x1b7c>
   12f10:	cmp	r4, r5
   12f14:	beq	12f28 <__assert_fail@plt+0x1ae4>
   12f18:	ldrb	r0, [r4], #1
   12f1c:	bl	12df0 <__assert_fail@plt+0x19ac>
   12f20:	cmp	r5, r4
   12f24:	bne	12f18 <__assert_fail@plt+0x1ad4>
   12f28:	ldr	r3, [r6, #76]	; 0x4c
   12f2c:	cmp	r3, #0
   12f30:	bne	12f60 <__assert_fail@plt+0x1b1c>
   12f34:	ldr	r1, [r6, #136]	; 0x88
   12f38:	ldr	r3, [r8, #32]
   12f3c:	ldr	r2, [r6, #84]	; 0x54
   12f40:	ldr	ip, [r1, r7, lsl #2]
   12f44:	ldr	r1, [r6, #88]	; 0x58
   12f48:	sub	r0, r3, r2
   12f4c:	cmp	r0, r1
   12f50:	add	r3, r3, ip
   12f54:	str	r3, [r6, #68]	; 0x44
   12f58:	subeq	r3, r3, r2
   12f5c:	streq	r3, [r6, #68]	; 0x44
   12f60:	mov	r0, #1
   12f64:	pop	{r4, r5, r6, r7, r8, pc}
   12f68:	ldr	lr, [pc, #112]	; 12fe0 <__assert_fail@plt+0x1b9c>
   12f6c:	ldr	ip, [r6]
   12f70:	ldr	r1, [lr]
   12f74:	cmp	r1, #0
   12f78:	ble	12f9c <__assert_fail@plt+0x1b58>
   12f7c:	add	r1, r1, #1
   12f80:	mov	r2, ip
   12f84:	mov	r0, #2
   12f88:	add	r3, r3, #1
   12f8c:	cmp	r3, r1
   12f90:	str	r0, [r2, #8]
   12f94:	add	r2, r2, #40	; 0x28
   12f98:	bne	12f88 <__assert_fail@plt+0x1b44>
   12f9c:	ldr	r3, [ip, #28]
   12fa0:	cmp	r3, #0
   12fa4:	bgt	12ef4 <__assert_fail@plt+0x1ab0>
   12fa8:	ldrb	r3, [lr, #40]	; 0x28
   12fac:	cmp	r3, #0
   12fb0:	strbeq	r3, [r6, #124]	; 0x7c
   12fb4:	b	12f60 <__assert_fail@plt+0x1b1c>
   12fb8:	bl	12ad4 <__assert_fail@plt+0x1690>
   12fbc:	b	12ee8 <__assert_fail@plt+0x1aa4>
   12fc0:	bl	129e0 <__assert_fail@plt+0x159c>
   12fc4:	b	12f10 <__assert_fail@plt+0x1acc>
   12fc8:	sub	r0, r0, r3
   12fcc:	bl	12888 <__assert_fail@plt+0x1444>
   12fd0:	mov	r3, #0
   12fd4:	str	r3, [r6, #128]	; 0x80
   12fd8:	b	12f04 <__assert_fail@plt+0x1ac0>
   12fdc:	strdeq	pc, [r2], -r0
   12fe0:	andeq	pc, r2, r0, asr #2
   12fe4:	ldr	ip, [pc, #92]	; 13048 <__assert_fail@plt+0x1c04>
   12fe8:	ldrb	r3, [ip, #33]	; 0x21
   12fec:	cmp	r3, #0
   12ff0:	movne	r3, #2
   12ff4:	strne	r3, [r0]
   12ff8:	bne	13030 <__assert_fail@plt+0x1bec>
   12ffc:	ldr	r0, [pc, #72]	; 1304c <__assert_fail@plt+0x1c08>
   13000:	ldr	r2, [ip]
   13004:	ldr	r3, [r0]
   13008:	cmp	r3, #0
   1300c:	beq	13030 <__assert_fail@plt+0x1bec>
   13010:	ldrb	r0, [r0, #4]
   13014:	cmp	r0, #0
   13018:	movne	r0, #1
   1301c:	moveq	r0, #2
   13020:	subs	r3, r3, #1
   13024:	str	r0, [r2, #8]
   13028:	add	r2, r2, #40	; 0x28
   1302c:	bne	13020 <__assert_fail@plt+0x1bdc>
   13030:	ldr	r3, [ip, #4]
   13034:	mov	r2, #0
   13038:	sub	r3, r3, #1
   1303c:	str	r3, [ip, #4]
   13040:	str	r2, [r1]
   13044:	bx	lr
   13048:	strdeq	pc, [r2], -r0
   1304c:	andeq	pc, r2, r0, asr #2
   13050:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13054:	mov	r8, r0
   13058:	ldr	r4, [r0]
   1305c:	mov	r7, r1
   13060:	ldr	r3, [r4, #4]
   13064:	ldr	r2, [r4, #8]
   13068:	cmp	r3, r2
   1306c:	bcs	13220 <__assert_fail@plt+0x1ddc>
   13070:	add	r2, r3, #1
   13074:	str	r2, [r4, #4]
   13078:	ldrb	r0, [r3]
   1307c:	cmp	r0, #12
   13080:	movne	r5, #0
   13084:	strbne	r5, [r8, #37]	; 0x25
   13088:	beq	13124 <__assert_fail@plt+0x1ce0>
   1308c:	ldr	r6, [pc, #476]	; 13270 <__assert_fail@plt+0x1e2c>
   13090:	ldrb	r3, [r6, #140]	; 0x8c
   13094:	cmp	r3, #0
   13098:	movne	r3, #1
   1309c:	strbne	r3, [r8, #37]	; 0x25
   130a0:	cmp	r0, #10
   130a4:	beq	130e4 <__assert_fail@plt+0x1ca0>
   130a8:	cmp	r0, #12
   130ac:	beq	1319c <__assert_fail@plt+0x1d58>
   130b0:	cmn	r0, #1
   130b4:	beq	1318c <__assert_fail@plt+0x1d48>
   130b8:	ldr	r3, [r4, #4]
   130bc:	ldr	r2, [r4, #8]
   130c0:	add	r1, r3, #1
   130c4:	cmp	r3, r2
   130c8:	strcc	r1, [r4, #4]
   130cc:	ldrbcc	r0, [r3]
   130d0:	bcc	130a0 <__assert_fail@plt+0x1c5c>
   130d4:	mov	r0, r4
   130d8:	bl	113a8 <__uflow@plt>
   130dc:	cmp	r0, #10
   130e0:	bne	130a8 <__assert_fail@plt+0x1c64>
   130e4:	ldr	r9, [pc, #392]	; 13274 <__assert_fail@plt+0x1e30>
   130e8:	ldrb	r3, [r9, #41]	; 0x29
   130ec:	cmp	r3, #0
   130f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   130f4:	ldrb	r3, [r6, #33]	; 0x21
   130f8:	eor	r3, r3, #1
   130fc:	cmp	r7, #1
   13100:	movne	r7, r3
   13104:	orreq	r7, r3, #1
   13108:	cmp	r7, #0
   1310c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13110:	cmp	r5, #0
   13114:	ldreq	r3, [r9, #44]	; 0x2c
   13118:	addeq	r3, r3, #1
   1311c:	streq	r3, [r9, #44]	; 0x2c
   13120:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13124:	ldrb	r3, [r8, #37]	; 0x25
   13128:	cmp	r3, #0
   1312c:	bne	131e4 <__assert_fail@plt+0x1da0>
   13130:	ldr	r6, [pc, #312]	; 13270 <__assert_fail@plt+0x1e2c>
   13134:	ldrb	r5, [r6, #140]	; 0x8c
   13138:	cmp	r5, #0
   1313c:	movne	r3, #1
   13140:	strbne	r3, [r8, #37]	; 0x25
   13144:	bne	1319c <__assert_fail@plt+0x1d58>
   13148:	mov	r5, #1
   1314c:	ldr	r9, [pc, #288]	; 13274 <__assert_fail@plt+0x1e30>
   13150:	ldr	r3, [r4, #4]
   13154:	ldr	r2, [r4, #8]
   13158:	cmp	r3, r2
   1315c:	bcs	1324c <__assert_fail@plt+0x1e08>
   13160:	add	r2, r3, #1
   13164:	str	r2, [r4, #4]
   13168:	ldrb	r0, [r3]
   1316c:	cmp	r0, #10
   13170:	beq	1317c <__assert_fail@plt+0x1d38>
   13174:	mov	r1, r4
   13178:	bl	11324 <ungetc@plt>
   1317c:	add	r1, r8, #28
   13180:	add	r0, r8, #8
   13184:	bl	12fe4 <__assert_fail@plt+0x1ba0>
   13188:	b	130e8 <__assert_fail@plt+0x1ca4>
   1318c:	mov	r0, r8
   13190:	bl	125b4 <__assert_fail@plt+0x1170>
   13194:	ldr	r9, [pc, #216]	; 13274 <__assert_fail@plt+0x1e30>
   13198:	b	130e8 <__assert_fail@plt+0x1ca4>
   1319c:	ldrb	r3, [r6, #140]	; 0x8c
   131a0:	cmp	r3, #0
   131a4:	beq	1314c <__assert_fail@plt+0x1d08>
   131a8:	ldrb	r1, [r6, #33]	; 0x21
   131ac:	ldr	r9, [pc, #192]	; 13274 <__assert_fail@plt+0x1e30>
   131b0:	cmp	r1, #0
   131b4:	movne	r3, #0
   131b8:	strbne	r3, [r8, #37]	; 0x25
   131bc:	bne	13150 <__assert_fail@plt+0x1d0c>
   131c0:	ldr	r3, [r9]
   131c4:	ldr	r2, [r6]
   131c8:	cmp	r3, #0
   131cc:	beq	13150 <__assert_fail@plt+0x1d0c>
   131d0:	subs	r3, r3, #1
   131d4:	strb	r1, [r2, #37]	; 0x25
   131d8:	add	r2, r2, #40	; 0x28
   131dc:	bne	131d0 <__assert_fail@plt+0x1d8c>
   131e0:	b	13150 <__assert_fail@plt+0x1d0c>
   131e4:	ldr	r3, [r4, #4]
   131e8:	ldr	r2, [r4, #8]
   131ec:	cmp	r3, r2
   131f0:	bcs	13258 <__assert_fail@plt+0x1e14>
   131f4:	add	r2, r3, #1
   131f8:	str	r2, [r4, #4]
   131fc:	ldrb	r0, [r3]
   13200:	cmp	r0, #10
   13204:	beq	1322c <__assert_fail@plt+0x1de8>
   13208:	mov	r3, #0
   1320c:	sub	r5, r0, #12
   13210:	strb	r3, [r8, #37]	; 0x25
   13214:	clz	r5, r5
   13218:	lsr	r5, r5, #5
   1321c:	b	1308c <__assert_fail@plt+0x1c48>
   13220:	mov	r0, r4
   13224:	bl	113a8 <__uflow@plt>
   13228:	b	1307c <__assert_fail@plt+0x1c38>
   1322c:	ldr	r3, [r4, #4]
   13230:	ldr	r2, [r4, #8]
   13234:	cmp	r3, r2
   13238:	bcs	13264 <__assert_fail@plt+0x1e20>
   1323c:	add	r2, r3, #1
   13240:	str	r2, [r4, #4]
   13244:	ldrb	r0, [r3]
   13248:	b	13208 <__assert_fail@plt+0x1dc4>
   1324c:	mov	r0, r4
   13250:	bl	113a8 <__uflow@plt>
   13254:	b	1316c <__assert_fail@plt+0x1d28>
   13258:	mov	r0, r4
   1325c:	bl	113a8 <__uflow@plt>
   13260:	b	13200 <__assert_fail@plt+0x1dbc>
   13264:	mov	r0, r4
   13268:	bl	113a8 <__uflow@plt>
   1326c:	b	13208 <__assert_fail@plt+0x1dc4>
   13270:	strdeq	pc, [r2], -r0
   13274:	andeq	pc, r2, r0, asr #2
   13278:	push	{r4, r5, r6, r7, r8, lr}
   1327c:	sub	sp, sp, #8
   13280:	ldr	r7, [pc, #284]	; 133a4 <__assert_fail@plt+0x1f60>
   13284:	ldr	r8, [pc, #284]	; 133a8 <__assert_fail@plt+0x1f64>
   13288:	mov	r6, r0
   1328c:	ldr	r2, [r7, #148]	; 0x94
   13290:	ldr	r3, [r8, #48]	; 0x30
   13294:	str	r2, [sp, #4]
   13298:	str	r3, [sp]
   1329c:	ldr	r0, [r7, #144]	; 0x90
   132a0:	ldr	r3, [pc, #260]	; 133ac <__assert_fail@plt+0x1f68>
   132a4:	mvn	r2, #0
   132a8:	mov	r1, #1
   132ac:	bl	1133c <__sprintf_chk@plt>
   132b0:	ldr	r5, [r8, #48]	; 0x30
   132b4:	ldr	r3, [r7, #148]	; 0x94
   132b8:	ldr	r4, [r7, #144]	; 0x90
   132bc:	add	r3, r3, #1
   132c0:	cmp	r5, #0
   132c4:	str	r3, [r7, #148]	; 0x94
   132c8:	sub	r0, r0, r5
   132cc:	add	r4, r4, r0
   132d0:	addgt	r5, r4, r5
   132d4:	ble	132ec <__assert_fail@plt+0x1ea8>
   132d8:	ldrb	r0, [r4], #1
   132dc:	ldr	r3, [r6]
   132e0:	blx	r3
   132e4:	cmp	r4, r5
   132e8:	bne	132d8 <__assert_fail@plt+0x1e94>
   132ec:	ldr	r3, [r8]
   132f0:	ldrb	r0, [r8, #52]	; 0x34
   132f4:	cmp	r3, #1
   132f8:	ble	1336c <__assert_fail@plt+0x1f28>
   132fc:	cmp	r0, #9
   13300:	beq	13338 <__assert_fail@plt+0x1ef4>
   13304:	ldr	r3, [r6]
   13308:	blx	r3
   1330c:	ldrb	r3, [r7, #156]	; 0x9c
   13310:	cmp	r3, #0
   13314:	beq	13330 <__assert_fail@plt+0x1eec>
   13318:	ldrb	r3, [r7, #33]	; 0x21
   1331c:	cmp	r3, #0
   13320:	ldreq	r3, [r7, #112]	; 0x70
   13324:	ldreq	r2, [r7, #152]	; 0x98
   13328:	addeq	r3, r3, r2
   1332c:	streq	r3, [r7, #112]	; 0x70
   13330:	add	sp, sp, #8
   13334:	pop	{r4, r5, r6, r7, r8, pc}
   13338:	ldr	r3, [r8, #48]	; 0x30
   1333c:	ldr	r4, [r7, #152]	; 0x98
   13340:	sub	r4, r4, r3
   13344:	cmp	r4, #0
   13348:	sub	r4, r4, #1
   1334c:	ble	1330c <__assert_fail@plt+0x1ec8>
   13350:	sub	r4, r4, #1
   13354:	ldr	r3, [r6]
   13358:	mov	r0, #32
   1335c:	blx	r3
   13360:	cmn	r4, #1
   13364:	bne	13350 <__assert_fail@plt+0x1f0c>
   13368:	b	1330c <__assert_fail@plt+0x1ec8>
   1336c:	ldr	r3, [r6]
   13370:	blx	r3
   13374:	ldrb	r3, [r8, #52]	; 0x34
   13378:	cmp	r3, #9
   1337c:	bne	1330c <__assert_fail@plt+0x1ec8>
   13380:	ldr	r5, [r7, #68]	; 0x44
   13384:	ldr	r4, [r8, #24]
   13388:	mov	r0, r5
   1338c:	mov	r1, r4
   13390:	bl	1c1f8 <__assert_fail@plt+0xadb4>
   13394:	sub	r3, r4, r1
   13398:	add	r3, r3, r5
   1339c:	str	r3, [r7, #68]	; 0x44
   133a0:	b	1330c <__assert_fail@plt+0x1ec8>
   133a4:	strdeq	pc, [r2], -r0
   133a8:	andeq	pc, r2, r0, asr #2
   133ac:	andeq	ip, r1, r8, ror r7
   133b0:	push	{r4, r5, r6, lr}
   133b4:	mov	r5, r0
   133b8:	ldr	r4, [pc, #80]	; 13410 <__assert_fail@plt+0x1fcc>
   133bc:	ldr	r3, [r5, #32]
   133c0:	ldr	r0, [r4, #84]	; 0x54
   133c4:	str	r3, [r4, #128]	; 0x80
   133c8:	cmp	r3, r0
   133cc:	bgt	133fc <__assert_fail@plt+0x1fb8>
   133d0:	ldrb	r3, [r4, #132]	; 0x84
   133d4:	cmp	r3, #0
   133d8:	bne	133f4 <__assert_fail@plt+0x1fb0>
   133dc:	ldrb	r3, [r5, #36]	; 0x24
   133e0:	cmp	r3, #0
   133e4:	popeq	{r4, r5, r6, pc}
   133e8:	add	r0, r5, #16
   133ec:	pop	{r4, r5, r6, lr}
   133f0:	b	13278 <__assert_fail@plt+0x1e34>
   133f4:	bl	129e0 <__assert_fail@plt+0x159c>
   133f8:	b	133dc <__assert_fail@plt+0x1f98>
   133fc:	sub	r0, r3, r0
   13400:	bl	12888 <__assert_fail@plt+0x1444>
   13404:	mov	r3, #0
   13408:	str	r3, [r4, #128]	; 0x80
   1340c:	b	133d0 <__assert_fail@plt+0x1f8c>
   13410:	strdeq	pc, [r2], -r0
   13414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13418:	mov	r4, r0
   1341c:	ldr	r0, [r0]
   13420:	ldr	r3, [r0, #4]
   13424:	ldr	r2, [r0, #8]
   13428:	cmp	r3, r2
   1342c:	bcs	13798 <__assert_fail@plt+0x2354>
   13430:	add	r2, r3, #1
   13434:	str	r2, [r0, #4]
   13438:	ldrb	r6, [r3]
   1343c:	ldr	r5, [pc, #920]	; 137dc <__assert_fail@plt+0x2398>
   13440:	cmp	r6, #12
   13444:	ldr	r8, [r5, #112]	; 0x70
   13448:	beq	1362c <__assert_fail@plt+0x21e8>
   1344c:	mov	r3, #0
   13450:	cmp	r6, #10
   13454:	strb	r3, [r4, #37]	; 0x25
   13458:	beq	13478 <__assert_fail@plt+0x2034>
   1345c:	cmp	r6, #12
   13460:	beq	13684 <__assert_fail@plt+0x2240>
   13464:	cmn	r6, #1
   13468:	beq	13548 <__assert_fail@plt+0x2104>
   1346c:	uxtb	r0, r6
   13470:	bl	12bf0 <__assert_fail@plt+0x17ac>
   13474:	mov	r7, r0
   13478:	ldrb	r3, [r5, #156]	; 0x9c
   1347c:	cmp	r3, #0
   13480:	beq	13494 <__assert_fail@plt+0x2050>
   13484:	ldr	r2, [r5, #112]	; 0x70
   13488:	ldr	r3, [r5, #160]	; 0xa0
   1348c:	cmp	r2, r3
   13490:	bgt	13728 <__assert_fail@plt+0x22e4>
   13494:	ldr	r3, [pc, #836]	; 137e0 <__assert_fail@plt+0x239c>
   13498:	ldr	r2, [r4, #16]
   1349c:	cmp	r2, r3
   134a0:	beq	13574 <__assert_fail@plt+0x2130>
   134a4:	ldrb	r3, [r5, #104]	; 0x68
   134a8:	mov	r2, #1
   134ac:	strb	r2, [r5, #124]	; 0x7c
   134b0:	cmp	r3, #0
   134b4:	beq	134c8 <__assert_fail@plt+0x2084>
   134b8:	ldr	r3, [pc, #804]	; 137e4 <__assert_fail@plt+0x23a0>
   134bc:	ldrb	r3, [r3, #4]
   134c0:	cmp	r3, #0
   134c4:	beq	137a4 <__assert_fail@plt+0x2360>
   134c8:	ldrb	r3, [r5, #33]	; 0x21
   134cc:	cmp	r3, #0
   134d0:	beq	13558 <__assert_fail@plt+0x2114>
   134d4:	ldrb	r3, [r5, #164]	; 0xa4
   134d8:	cmp	r3, #0
   134dc:	beq	13558 <__assert_fail@plt+0x2114>
   134e0:	ldr	r9, [r5, #80]	; 0x50
   134e4:	mov	r3, #0
   134e8:	cmp	r9, r3
   134ec:	str	r3, [r5, #80]	; 0x50
   134f0:	ldr	r8, [r5]
   134f4:	addgt	r9, r9, #1
   134f8:	movgt	sl, #1
   134fc:	ble	13524 <__assert_fail@plt+0x20e0>
   13500:	mov	r0, r8
   13504:	bl	133b0 <__assert_fail@plt+0x1f6c>
   13508:	ldr	r3, [r5, #80]	; 0x50
   1350c:	add	sl, sl, #1
   13510:	add	r3, r3, #1
   13514:	cmp	sl, r9
   13518:	add	r8, r8, #40	; 0x28
   1351c:	str	r3, [r5, #80]	; 0x50
   13520:	bne	13500 <__assert_fail@plt+0x20bc>
   13524:	ldrb	r2, [r5, #156]	; 0x9c
   13528:	ldr	r3, [r4, #32]
   1352c:	cmp	r2, #0
   13530:	str	r3, [r5, #128]	; 0x80
   13534:	ldrne	r2, [r5, #160]	; 0xa0
   13538:	mov	r1, #0
   1353c:	str	r2, [r5, #76]	; 0x4c
   13540:	strb	r1, [r5, #164]	; 0xa4
   13544:	b	1355c <__assert_fail@plt+0x2118>
   13548:	mov	r0, r4
   1354c:	bl	125b4 <__assert_fail@plt+0x1170>
   13550:	mov	r0, #1
   13554:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13558:	ldr	r3, [r5, #128]	; 0x80
   1355c:	ldr	r0, [r5, #84]	; 0x54
   13560:	cmp	r0, r3
   13564:	blt	13714 <__assert_fail@plt+0x22d0>
   13568:	ldrb	r3, [r5, #132]	; 0x84
   1356c:	cmp	r3, #0
   13570:	bne	1370c <__assert_fail@plt+0x22c8>
   13574:	ldrb	r3, [r4, #36]	; 0x24
   13578:	cmp	r3, #0
   1357c:	bne	13758 <__assert_fail@plt+0x2314>
   13580:	mov	r3, #0
   13584:	cmp	r6, #10
   13588:	strb	r3, [r5, #165]	; 0xa5
   1358c:	beq	13750 <__assert_fail@plt+0x230c>
   13590:	cmp	r7, r3
   13594:	ldr	r6, [r5, #108]	; 0x6c
   13598:	beq	135b4 <__assert_fail@plt+0x2170>
   1359c:	add	r7, r6, r7
   135a0:	ldrb	r0, [r6], #1
   135a4:	ldr	r3, [r4, #16]
   135a8:	blx	r3
   135ac:	cmp	r6, r7
   135b0:	bne	135a0 <__assert_fail@plt+0x215c>
   135b4:	ldr	r0, [r4]
   135b8:	ldr	r3, [r0, #4]
   135bc:	ldr	r2, [r0, #8]
   135c0:	cmp	r3, r2
   135c4:	bcs	137ac <__assert_fail@plt+0x2368>
   135c8:	add	r2, r3, #1
   135cc:	str	r2, [r0, #4]
   135d0:	ldrb	r0, [r3]
   135d4:	cmp	r0, #10
   135d8:	beq	13750 <__assert_fail@plt+0x230c>
   135dc:	cmp	r0, #12
   135e0:	beq	13764 <__assert_fail@plt+0x2320>
   135e4:	cmn	r0, #1
   135e8:	beq	13548 <__assert_fail@plt+0x2104>
   135ec:	uxtb	r0, r0
   135f0:	ldr	r6, [r5, #112]	; 0x70
   135f4:	bl	12bf0 <__assert_fail@plt+0x17ac>
   135f8:	ldrb	r3, [r5, #156]	; 0x9c
   135fc:	cmp	r3, #0
   13600:	bne	13734 <__assert_fail@plt+0x22f0>
   13604:	cmp	r0, #0
   13608:	ldr	r6, [r5, #108]	; 0x6c
   1360c:	beq	135b4 <__assert_fail@plt+0x2170>
   13610:	add	r7, r6, r0
   13614:	ldrb	r0, [r6], #1
   13618:	ldr	r3, [r4, #16]
   1361c:	blx	r3
   13620:	cmp	r6, r7
   13624:	bne	13614 <__assert_fail@plt+0x21d0>
   13628:	b	135b4 <__assert_fail@plt+0x2170>
   1362c:	ldrb	r3, [r4, #37]	; 0x25
   13630:	ldr	r0, [r4]
   13634:	cmp	r3, #0
   13638:	ldr	r2, [r0, #8]
   1363c:	ldr	r3, [r0, #4]
   13640:	beq	13690 <__assert_fail@plt+0x224c>
   13644:	cmp	r3, r2
   13648:	bcs	137bc <__assert_fail@plt+0x2378>
   1364c:	add	r2, r3, #1
   13650:	str	r2, [r0, #4]
   13654:	ldrb	r6, [r3]
   13658:	cmp	r6, #10
   1365c:	bne	1344c <__assert_fail@plt+0x2008>
   13660:	ldr	r0, [r4]
   13664:	ldr	r3, [r0, #4]
   13668:	ldr	r2, [r0, #8]
   1366c:	cmp	r3, r2
   13670:	bcs	137d0 <__assert_fail@plt+0x238c>
   13674:	add	r2, r3, #1
   13678:	str	r2, [r0, #4]
   1367c:	ldrb	r6, [r3]
   13680:	b	1344c <__assert_fail@plt+0x2008>
   13684:	ldr	r0, [r4]
   13688:	ldr	r3, [r0, #4]
   1368c:	ldr	r2, [r0, #8]
   13690:	cmp	r3, r2
   13694:	bcs	137b4 <__assert_fail@plt+0x2370>
   13698:	add	r2, r3, #1
   1369c:	str	r2, [r0, #4]
   136a0:	ldrb	r0, [r3]
   136a4:	cmp	r0, #10
   136a8:	bne	13700 <__assert_fail@plt+0x22bc>
   136ac:	ldrb	r2, [r5, #104]	; 0x68
   136b0:	mov	r3, #1
   136b4:	strb	r3, [r5, #157]	; 0x9d
   136b8:	cmp	r2, #0
   136bc:	bne	136e4 <__assert_fail@plt+0x22a0>
   136c0:	ldrb	r3, [r5, #158]	; 0x9e
   136c4:	cmp	r3, #0
   136c8:	movne	r3, #1
   136cc:	strbne	r3, [r5, #159]	; 0x9f
   136d0:	add	r0, r4, #8
   136d4:	add	r1, r4, #28
   136d8:	bl	12fe4 <__assert_fail@plt+0x1ba0>
   136dc:	mov	r0, #1
   136e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136e4:	ldr	r2, [pc, #248]	; 137e4 <__assert_fail@plt+0x23a0>
   136e8:	ldrb	r2, [r2, #4]
   136ec:	cmp	r2, #0
   136f0:	bne	136c0 <__assert_fail@plt+0x227c>
   136f4:	strb	r3, [r5, #124]	; 0x7c
   136f8:	bl	12ad4 <__assert_fail@plt+0x1690>
   136fc:	b	136d0 <__assert_fail@plt+0x228c>
   13700:	ldr	r1, [r4]
   13704:	bl	11324 <ungetc@plt>
   13708:	b	136ac <__assert_fail@plt+0x2268>
   1370c:	bl	129e0 <__assert_fail@plt+0x159c>
   13710:	b	13574 <__assert_fail@plt+0x2130>
   13714:	sub	r0, r3, r0
   13718:	bl	12888 <__assert_fail@plt+0x1444>
   1371c:	mov	r3, #0
   13720:	str	r3, [r5, #128]	; 0x80
   13724:	b	13568 <__assert_fail@plt+0x2124>
   13728:	str	r8, [r5, #112]	; 0x70
   1372c:	mov	r0, #0
   13730:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13734:	ldr	r2, [r5, #112]	; 0x70
   13738:	ldr	r3, [r5, #160]	; 0xa0
   1373c:	cmp	r2, r3
   13740:	ble	13604 <__assert_fail@plt+0x21c0>
   13744:	str	r6, [r5, #112]	; 0x70
   13748:	mov	r0, #0
   1374c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13750:	mov	r0, #1
   13754:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13758:	add	r0, r4, #16
   1375c:	bl	13278 <__assert_fail@plt+0x1e34>
   13760:	b	13580 <__assert_fail@plt+0x213c>
   13764:	ldr	r0, [r4]
   13768:	ldr	r3, [r0, #4]
   1376c:	ldr	r2, [r0, #8]
   13770:	cmp	r3, r2
   13774:	bcs	137c8 <__assert_fail@plt+0x2384>
   13778:	add	r2, r3, #1
   1377c:	str	r2, [r0, #4]
   13780:	ldrb	r0, [r3]
   13784:	cmp	r0, #10
   13788:	beq	136c0 <__assert_fail@plt+0x227c>
   1378c:	ldr	r1, [r4]
   13790:	bl	11324 <ungetc@plt>
   13794:	b	136c0 <__assert_fail@plt+0x227c>
   13798:	bl	113a8 <__uflow@plt>
   1379c:	mov	r6, r0
   137a0:	b	1343c <__assert_fail@plt+0x1ff8>
   137a4:	bl	12ad4 <__assert_fail@plt+0x1690>
   137a8:	b	134c8 <__assert_fail@plt+0x2084>
   137ac:	bl	113a8 <__uflow@plt>
   137b0:	b	135d4 <__assert_fail@plt+0x2190>
   137b4:	bl	113a8 <__uflow@plt>
   137b8:	b	136a4 <__assert_fail@plt+0x2260>
   137bc:	bl	113a8 <__uflow@plt>
   137c0:	mov	r6, r0
   137c4:	b	13658 <__assert_fail@plt+0x2214>
   137c8:	bl	113a8 <__uflow@plt>
   137cc:	b	13784 <__assert_fail@plt+0x2340>
   137d0:	bl	113a8 <__uflow@plt>
   137d4:	mov	r6, r0
   137d8:	b	1344c <__assert_fail@plt+0x2008>
   137dc:	strdeq	pc, [r2], -r0
   137e0:	andeq	r2, r1, r8, asr #7
   137e4:	andeq	pc, r2, r0, asr #2
   137e8:	push	{r4, r5, r6, r7, r8, lr}
   137ec:	mov	r4, r1
   137f0:	ldr	r1, [pc, #220]	; 138d4 <__assert_fail@plt+0x2490>
   137f4:	mov	r7, r0
   137f8:	bl	11120 <strcmp@plt>
   137fc:	cmp	r0, #0
   13800:	bne	13864 <__assert_fail@plt+0x2420>
   13804:	mov	r2, #5
   13808:	ldr	r1, [pc, #200]	; 138d8 <__assert_fail@plt+0x2494>
   1380c:	bl	111bc <dcgettext@plt>
   13810:	ldr	r2, [pc, #196]	; 138dc <__assert_fail@plt+0x2498>
   13814:	ldr	r6, [pc, #196]	; 138e0 <__assert_fail@plt+0x249c>
   13818:	mov	r3, #1
   1381c:	ldr	r5, [r2]
   13820:	strb	r3, [r6, #166]	; 0xa6
   13824:	cmp	r5, #0
   13828:	str	r5, [r4]
   1382c:	str	r0, [r4, #4]
   13830:	beq	13888 <__assert_fail@plt+0x2444>
   13834:	mov	r0, r5
   13838:	mov	r1, #2
   1383c:	bl	14ea4 <__assert_fail@plt+0x3a60>
   13840:	ldr	r3, [r6, #172]	; 0xac
   13844:	mov	r2, #0
   13848:	str	r2, [r4, #8]
   1384c:	strb	r2, [r4, #37]	; 0x25
   13850:	mov	r4, #1
   13854:	add	r3, r3, #1
   13858:	str	r3, [r6, #172]	; 0xac
   1385c:	mov	r0, r4
   13860:	pop	{r4, r5, r6, r7, r8, pc}
   13864:	str	r7, [r4, #4]
   13868:	ldr	r1, [pc, #116]	; 138e4 <__assert_fail@plt+0x24a0>
   1386c:	mov	r0, r7
   13870:	bl	14ed8 <__assert_fail@plt+0x3a94>
   13874:	ldr	r6, [pc, #100]	; 138e0 <__assert_fail@plt+0x249c>
   13878:	mov	r5, r0
   1387c:	cmp	r5, #0
   13880:	str	r0, [r4]
   13884:	bne	13834 <__assert_fail@plt+0x23f0>
   13888:	ldrb	r4, [r6, #168]	; 0xa8
   1388c:	mov	r3, #1
   13890:	strb	r3, [r6, #167]	; 0xa7
   13894:	cmp	r4, #0
   13898:	movne	r4, r5
   1389c:	bne	1385c <__assert_fail@plt+0x2418>
   138a0:	bl	11330 <__errno_location@plt>
   138a4:	mov	r2, r7
   138a8:	mov	r1, #3
   138ac:	ldr	r6, [r0]
   138b0:	mov	r0, r5
   138b4:	bl	18b84 <__assert_fail@plt+0x7740>
   138b8:	mov	r1, r6
   138bc:	ldr	r2, [pc, #36]	; 138e8 <__assert_fail@plt+0x24a4>
   138c0:	mov	r3, r0
   138c4:	mov	r0, r5
   138c8:	bl	11270 <error@plt>
   138cc:	mov	r0, r4
   138d0:	pop	{r4, r5, r6, r7, r8, pc}
   138d4:	andeq	ip, r1, r4, lsr #14
   138d8:	andeq	ip, r1, ip, ror r7
   138dc:	andeq	pc, r2, r0, ror #3
   138e0:	strdeq	pc, [r2], -r0
   138e4:	andeq	sp, r1, ip, lsl ip
   138e8:	andeq	sp, r1, r0, asr #25
   138ec:	push	{r4, r5, r6, lr}
   138f0:	mov	r5, r0
   138f4:	ldr	r4, [r0]
   138f8:	b	13914 <__assert_fail@plt+0x24d0>
   138fc:	cmp	r0, #10
   13900:	popeq	{r4, r5, r6, pc}
   13904:	cmp	r0, #12
   13908:	beq	13944 <__assert_fail@plt+0x2500>
   1390c:	cmn	r0, #1
   13910:	beq	1398c <__assert_fail@plt+0x2548>
   13914:	ldr	r3, [r4, #4]
   13918:	ldr	r2, [r4, #8]
   1391c:	add	r1, r3, #1
   13920:	cmp	r3, r2
   13924:	strcc	r1, [r4, #4]
   13928:	ldrbcc	r0, [r3]
   1392c:	bcc	138fc <__assert_fail@plt+0x24b8>
   13930:	mov	r0, r4
   13934:	bl	113a8 <__uflow@plt>
   13938:	cmp	r0, #10
   1393c:	bne	13904 <__assert_fail@plt+0x24c0>
   13940:	pop	{r4, r5, r6, pc}
   13944:	ldr	r3, [r4, #4]
   13948:	ldr	r2, [r4, #8]
   1394c:	cmp	r3, r2
   13950:	bcs	139a4 <__assert_fail@plt+0x2560>
   13954:	add	r2, r3, #1
   13958:	str	r2, [r4, #4]
   1395c:	ldrb	r0, [r3]
   13960:	cmp	r0, #10
   13964:	bne	13998 <__assert_fail@plt+0x2554>
   13968:	ldr	r3, [pc, #64]	; 139b0 <__assert_fail@plt+0x256c>
   1396c:	add	r1, r5, #28
   13970:	add	r0, r5, #8
   13974:	ldrb	r2, [r3, #158]	; 0x9e
   13978:	pop	{r4, r5, r6, lr}
   1397c:	cmp	r2, #0
   13980:	movne	r2, #1
   13984:	strbne	r2, [r3, #159]	; 0x9f
   13988:	b	12fe4 <__assert_fail@plt+0x1ba0>
   1398c:	mov	r0, r5
   13990:	pop	{r4, r5, r6, lr}
   13994:	b	125b4 <__assert_fail@plt+0x1170>
   13998:	mov	r1, r4
   1399c:	bl	11324 <ungetc@plt>
   139a0:	b	13968 <__assert_fail@plt+0x2524>
   139a4:	mov	r0, r4
   139a8:	bl	113a8 <__uflow@plt>
   139ac:	b	13960 <__assert_fail@plt+0x251c>
   139b0:	strdeq	pc, [r2], -r0
   139b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139b8:	mov	r7, r0
   139bc:	ldr	r5, [pc, #3648]	; 14804 <__assert_fail@plt+0x33c0>
   139c0:	ldr	r4, [pc, #3648]	; 14808 <__assert_fail@plt+0x33c4>
   139c4:	sub	sp, sp, #44	; 0x2c
   139c8:	ldr	r2, [r5, #56]	; 0x38
   139cc:	mov	r8, r1
   139d0:	sub	r3, r2, #10
   139d4:	cmp	r3, #0
   139d8:	str	r3, [r4, #176]	; 0xb0
   139dc:	ble	13ed4 <__assert_fail@plt+0x2a90>
   139e0:	ldrb	r3, [r5, #40]	; 0x28
   139e4:	cmp	r3, #0
   139e8:	beq	13ee4 <__assert_fail@plt+0x2aa0>
   139ec:	ldrb	r3, [r4, #180]	; 0xb4
   139f0:	cmp	r3, #0
   139f4:	ldrne	r3, [r4, #176]	; 0xb0
   139f8:	addne	r3, r3, r3, lsr #31
   139fc:	asrne	r3, r3, #1
   13a00:	strne	r3, [r4, #176]	; 0xb0
   13a04:	cmp	r7, #0
   13a08:	bne	143c0 <__assert_fail@plt+0x2f7c>
   13a0c:	ldr	r1, [r5]
   13a10:	strb	r7, [r4, #33]	; 0x21
   13a14:	ldrb	r3, [r5, #4]
   13a18:	ldrb	ip, [r4, #182]	; 0xb6
   13a1c:	cmp	r3, #0
   13a20:	movne	r3, #1
   13a24:	strbne	r3, [r4, #181]	; 0xb5
   13a28:	cmp	r1, #1
   13a2c:	ble	14414 <__assert_fail@plt+0x2fd0>
   13a30:	ldrb	r3, [r4, #132]	; 0x84
   13a34:	cmp	r3, #0
   13a38:	bne	13eec <__assert_fail@plt+0x2aa8>
   13a3c:	ldr	r0, [pc, #3528]	; 1480c <__assert_fail@plt+0x33c8>
   13a40:	ldr	r3, [pc, #3528]	; 14810 <__assert_fail@plt+0x33cc>
   13a44:	cmp	ip, #0
   13a48:	mov	r2, #1
   13a4c:	movne	r3, r0
   13a50:	str	r3, [r5, #28]
   13a54:	mov	r3, r2
   13a58:	str	r2, [r4, #84]	; 0x54
   13a5c:	strb	r2, [r4, #132]	; 0x84
   13a60:	mov	r2, #1
   13a64:	strb	r2, [r4, #156]	; 0x9c
   13a68:	strb	r2, [r4, #72]	; 0x48
   13a6c:	ldrb	r6, [r4, #183]	; 0xb7
   13a70:	cmp	ip, #0
   13a74:	movne	r2, #0
   13a78:	strbne	r2, [r4, #156]	; 0x9c
   13a7c:	cmp	r6, #0
   13a80:	beq	13ac8 <__assert_fail@plt+0x2684>
   13a84:	ldrb	r0, [r5, #52]	; 0x34
   13a88:	ldr	r2, [r5, #60]	; 0x3c
   13a8c:	cmp	r0, #9
   13a90:	ldr	r0, [r5, #48]	; 0x30
   13a94:	str	r2, [r5, #44]	; 0x2c
   13a98:	addne	ip, r0, #1
   13a9c:	bne	13ab8 <__assert_fail@plt+0x2674>
   13aa0:	rsbs	r2, r0, #0
   13aa4:	and	r2, r2, #7
   13aa8:	and	ip, r0, #7
   13aac:	rsbpl	ip, r2, #0
   13ab0:	rsb	ip, ip, #8
   13ab4:	add	ip, ip, r0
   13ab8:	ldrb	r2, [r4, #33]	; 0x21
   13abc:	str	ip, [r4, #152]	; 0x98
   13ac0:	cmp	r2, #0
   13ac4:	bne	13acc <__assert_fail@plt+0x2688>
   13ac8:	mov	ip, #0
   13acc:	sub	r2, r1, #1
   13ad0:	ldr	r0, [r5, #16]
   13ad4:	smull	r2, r3, r2, r3
   13ad8:	sub	r0, r0, ip
   13adc:	cmp	r3, r2, asr #31
   13ae0:	mvnne	r2, #-2147483648	; 0x80000000
   13ae4:	subs	r0, r0, r2
   13ae8:	bvs	147b4 <__assert_fail@plt+0x3370>
   13aec:	bl	1bfd8 <__assert_fail@plt+0xab94>
   13af0:	cmp	r0, #0
   13af4:	str	r0, [r4, #160]	; 0xa0
   13af8:	ble	147bc <__assert_fail@plt+0x3378>
   13afc:	cmp	r6, #0
   13b00:	bne	14424 <__assert_fail@plt+0x2fe0>
   13b04:	ldr	r0, [r4, #108]	; 0x6c
   13b08:	bl	11168 <free@plt>
   13b0c:	ldr	r0, [r5, #36]	; 0x24
   13b10:	cmp	r0, #8
   13b14:	movlt	r0, #8
   13b18:	bl	192cc <__assert_fail@plt+0x7e88>
   13b1c:	mov	r3, #0
   13b20:	str	r3, [r4, #172]	; 0xac
   13b24:	str	r0, [r4, #108]	; 0x6c
   13b28:	ldr	r0, [r4]
   13b2c:	bl	11168 <free@plt>
   13b30:	ldr	r0, [r5]
   13b34:	mov	r2, #40	; 0x28
   13b38:	umull	sl, fp, r0, r2
   13b3c:	adds	r3, fp, #0
   13b40:	movne	r3, #1
   13b44:	cmp	sl, #0
   13b48:	blt	147dc <__assert_fail@plt+0x3398>
   13b4c:	cmp	r3, #0
   13b50:	bne	147dc <__assert_fail@plt+0x3398>
   13b54:	add	r0, r0, r0, lsl #2
   13b58:	lsl	r0, r0, #3
   13b5c:	bl	192cc <__assert_fail@plt+0x7e88>
   13b60:	ldrb	r9, [r4, #33]	; 0x21
   13b64:	cmp	r9, #0
   13b68:	mov	r6, r0
   13b6c:	str	r0, [r4]
   13b70:	beq	143d8 <__assert_fail@plt+0x2f94>
   13b74:	cmp	r7, #0
   13b78:	subne	r8, r8, #4
   13b7c:	sub	r7, r7, #1
   13b80:	beq	13bac <__assert_fail@plt+0x2768>
   13b84:	mov	r1, r6
   13b88:	ldr	r0, [r8, #4]!
   13b8c:	bl	137e8 <__assert_fail@plt+0x23a4>
   13b90:	cmp	r0, #0
   13b94:	addne	r6, r6, #40	; 0x28
   13b98:	ldreq	r3, [r5]
   13b9c:	subeq	r3, r3, #1
   13ba0:	streq	r3, [r5]
   13ba4:	subs	r7, r7, #1
   13ba8:	bcs	13b84 <__assert_fail@plt+0x2740>
   13bac:	ldr	r3, [r5]
   13bb0:	cmp	r3, #0
   13bb4:	beq	14074 <__assert_fail@plt+0x2c30>
   13bb8:	mvn	r1, #0
   13bbc:	ldr	r0, [pc, #3152]	; 14814 <__assert_fail@plt+0x33d0>
   13bc0:	bl	126c0 <__assert_fail@plt+0x127c>
   13bc4:	ldrb	r2, [r5, #4]
   13bc8:	ldr	r3, [r4, #172]	; 0xac
   13bcc:	cmp	r2, #0
   13bd0:	str	r3, [r4, #4]
   13bd4:	bne	145b4 <__assert_fail@plt+0x3170>
   13bd8:	ldrd	r2, [r4, #24]
   13bdc:	cmp	r3, #0
   13be0:	cmpeq	r2, #1
   13be4:	strd	r2, [sp, #16]
   13be8:	bhi	1447c <__assert_fail@plt+0x3038>
   13bec:	mov	r2, #1
   13bf0:	mov	r3, #0
   13bf4:	strd	r2, [r4, #96]	; 0x60
   13bf8:	ldrb	r0, [r4, #156]	; 0x9c
   13bfc:	ldr	r1, [r4, #88]	; 0x58
   13c00:	cmp	r0, #0
   13c04:	moveq	lr, r0
   13c08:	beq	13c20 <__assert_fail@plt+0x27dc>
   13c0c:	ldrb	r3, [r4, #33]	; 0x21
   13c10:	ldr	lr, [r4, #160]	; 0xa0
   13c14:	cmp	r3, #0
   13c18:	add	lr, r1, lr
   13c1c:	bne	14730 <__assert_fail@plt+0x32ec>
   13c20:	ldr	r7, [r5]
   13c24:	ldrb	ip, [r5, #4]
   13c28:	ldr	sl, [r4, #84]	; 0x54
   13c2c:	cmp	r7, #1
   13c30:	add	r1, r1, sl
   13c34:	ldr	r8, [r4]
   13c38:	str	ip, [sp, #32]
   13c3c:	ble	147ac <__assert_fail@plt+0x3368>
   13c40:	ldrb	r9, [r4, #33]	; 0x21
   13c44:	ldr	r3, [r4, #160]	; 0xa0
   13c48:	ldrb	r6, [r4, #183]	; 0xb7
   13c4c:	ldr	fp, [pc, #3012]	; 14818 <__assert_fail@plt+0x33d4>
   13c50:	str	r3, [sp, #16]
   13c54:	str	r8, [sp, #32]
   13c58:	mov	r3, r8
   13c5c:	eor	r9, r9, #1
   13c60:	mov	r2, #1
   13c64:	mov	r8, ip
   13c68:	cmp	r8, #0
   13c6c:	strne	fp, [r3, #12]
   13c70:	ldreq	ip, [pc, #2980]	; 1481c <__assert_fail@plt+0x33d8>
   13c74:	ldrne	ip, [pc, #2980]	; 14820 <__assert_fail@plt+0x33dc>
   13c78:	streq	ip, [r3, #16]
   13c7c:	ldreq	ip, [pc, #2976]	; 14824 <__assert_fail@plt+0x33e0>
   13c80:	strne	ip, [r3, #16]
   13c84:	streq	ip, [r3, #12]
   13c88:	cmp	r6, #0
   13c8c:	moveq	ip, r6
   13c90:	beq	13ca0 <__assert_fail@plt+0x285c>
   13c94:	cmp	r2, #1
   13c98:	movne	ip, r9
   13c9c:	orreq	ip, r9, #1
   13ca0:	cmp	r0, #0
   13ca4:	strb	ip, [r3, #36]	; 0x24
   13ca8:	ldrne	ip, [sp, #16]
   13cac:	str	r1, [r3, #32]
   13cb0:	add	r2, r2, #1
   13cb4:	addne	r1, sl, lr
   13cb8:	addne	lr, r1, ip
   13cbc:	moveq	lr, r0
   13cc0:	moveq	r1, r0
   13cc4:	cmp	r2, r7
   13cc8:	add	r3, r3, #40	; 0x28
   13ccc:	bne	13c68 <__assert_fail@plt+0x2824>
   13cd0:	ldr	r8, [sp, #32]
   13cd4:	add	r3, r7, r7, lsl #2
   13cd8:	ldrb	r2, [r5, #4]
   13cdc:	add	r8, r8, r3, lsl #3
   13ce0:	sub	r8, r8, #40	; 0x28
   13ce4:	str	r2, [sp, #32]
   13ce8:	ldr	r3, [sp, #32]
   13cec:	cmp	r3, #0
   13cf0:	beq	13d00 <__assert_fail@plt+0x28bc>
   13cf4:	ldrb	r3, [r4, #181]	; 0xb5
   13cf8:	cmp	r3, #0
   13cfc:	bne	1471c <__assert_fail@plt+0x32d8>
   13d00:	ldr	r2, [pc, #2836]	; 1481c <__assert_fail@plt+0x33d8>
   13d04:	ldr	r3, [pc, #2840]	; 14824 <__assert_fail@plt+0x33e0>
   13d08:	str	r2, [r8, #16]
   13d0c:	str	r3, [r8, #12]
   13d10:	ldrb	r3, [r4, #183]	; 0xb7
   13d14:	cmp	r3, #0
   13d18:	beq	13d2c <__assert_fail@plt+0x28e8>
   13d1c:	ldrb	r3, [r4, #33]	; 0x21
   13d20:	eor	r3, r3, #1
   13d24:	cmp	r7, #1
   13d28:	orreq	r3, r3, #1
   13d2c:	strb	r3, [r8, #36]	; 0x24
   13d30:	mov	r7, #0
   13d34:	ldr	r3, [r5, #44]	; 0x2c
   13d38:	str	r1, [r8, #32]
   13d3c:	str	r3, [r4, #148]	; 0x94
   13d40:	ldr	r3, [sp, #32]
   13d44:	ldr	r8, [r5]
   13d48:	cmp	r3, #0
   13d4c:	ldr	r6, [r4]
   13d50:	bne	140d4 <__assert_fail@plt+0x2c90>
   13d54:	cmp	r8, #0
   13d58:	beq	13d80 <__assert_fail@plt+0x293c>
   13d5c:	ldr	r2, [r4, #176]	; 0xb0
   13d60:	ldr	r3, [r6, #8]
   13d64:	add	r6, r6, #40	; 0x28
   13d68:	cmp	r3, #0
   13d6c:	moveq	r3, r2
   13d70:	movne	r3, #0
   13d74:	subs	r8, r8, #1
   13d78:	str	r3, [r6, #-12]
   13d7c:	bne	13d60 <__assert_fail@plt+0x291c>
   13d80:	bl	122cc <__assert_fail@plt+0xe88>
   13d84:	cmp	r0, #0
   13d88:	beq	14074 <__assert_fail@plt+0x2c30>
   13d8c:	ldrb	r3, [r5, #40]	; 0x28
   13d90:	ldr	r6, [r4, #176]	; 0xb0
   13d94:	strb	r7, [r4, #124]	; 0x7c
   13d98:	cmp	r3, #0
   13d9c:	movne	r3, #1
   13da0:	strbne	r3, [r4, #104]	; 0x68
   13da4:	ldrb	r3, [r4, #180]	; 0xb4
   13da8:	cmp	r3, #0
   13dac:	lslne	r6, r6, #1
   13db0:	cmp	r6, #0
   13db4:	movgt	r9, #0
   13db8:	ble	14780 <__assert_fail@plt+0x333c>
   13dbc:	bl	122cc <__assert_fail@plt+0xe88>
   13dc0:	cmp	r0, #0
   13dc4:	beq	13fe8 <__assert_fail@plt+0x2ba4>
   13dc8:	ldr	r3, [r5]
   13dcc:	mov	sl, #1
   13dd0:	cmp	r3, #0
   13dd4:	str	r7, [r4, #68]	; 0x44
   13dd8:	str	r7, [r4, #76]	; 0x4c
   13ddc:	str	r7, [r4, #80]	; 0x50
   13de0:	strb	r7, [r4, #124]	; 0x7c
   13de4:	strb	r7, [r4, #164]	; 0xa4
   13de8:	strb	sl, [r4, #165]	; 0xa5
   13dec:	ldr	r8, [r4]
   13df0:	ble	13f50 <__assert_fail@plt+0x2b0c>
   13df4:	mov	fp, sl
   13df8:	b	13e98 <__assert_fail@plt+0x2a54>
   13dfc:	ldr	r2, [r8, #32]
   13e00:	ldr	r3, [r8, #12]
   13e04:	mov	r0, r8
   13e08:	strb	r7, [r4, #157]	; 0x9d
   13e0c:	str	r2, [r4, #128]	; 0x80
   13e10:	blx	r3
   13e14:	cmp	r0, #0
   13e18:	beq	1407c <__assert_fail@plt+0x2c38>
   13e1c:	ldr	r3, [r8, #28]
   13e20:	ldrb	r2, [r4, #124]	; 0x7c
   13e24:	sub	r3, r3, #1
   13e28:	cmp	r3, #0
   13e2c:	str	r3, [r8, #28]
   13e30:	orr	r9, r2, r9
   13e34:	str	r2, [sp, #16]
   13e38:	ble	14088 <__assert_fail@plt+0x2c44>
   13e3c:	ldrb	r3, [r4, #33]	; 0x21
   13e40:	cmp	r3, #0
   13e44:	beq	13e70 <__assert_fail@plt+0x2a2c>
   13e48:	ldr	r3, [r8, #8]
   13e4c:	cmp	r3, #0
   13e50:	beq	13e70 <__assert_fail@plt+0x2a2c>
   13e54:	ldrb	r2, [r4, #165]	; 0xa5
   13e58:	cmp	r2, #0
   13e5c:	bne	13ecc <__assert_fail@plt+0x2a88>
   13e60:	cmp	r3, #3
   13e64:	beq	140bc <__assert_fail@plt+0x2c78>
   13e68:	cmp	r3, #2
   13e6c:	beq	140b0 <__assert_fail@plt+0x2c6c>
   13e70:	ldrb	r3, [r4, #132]	; 0x84
   13e74:	add	sl, sl, #1
   13e78:	add	r8, r8, #40	; 0x28
   13e7c:	cmp	r3, #0
   13e80:	ldrne	r3, [r4, #80]	; 0x50
   13e84:	addne	r3, r3, #1
   13e88:	strne	r3, [r4, #80]	; 0x50
   13e8c:	ldr	r3, [r5]
   13e90:	cmp	sl, r3
   13e94:	bgt	13f18 <__assert_fail@plt+0x2ad4>
   13e98:	ldr	r3, [r8, #28]
   13e9c:	str	r7, [r4, #112]	; 0x70
   13ea0:	cmp	r3, #0
   13ea4:	bgt	13dfc <__assert_fail@plt+0x29b8>
   13ea8:	ldr	r3, [r8, #8]
   13eac:	cmp	r3, #1
   13eb0:	beq	13dfc <__assert_fail@plt+0x29b8>
   13eb4:	ldrb	r3, [r4, #33]	; 0x21
   13eb8:	cmp	r3, #0
   13ebc:	beq	13e70 <__assert_fail@plt+0x2a2c>
   13ec0:	ldrb	r3, [r4, #165]	; 0xa5
   13ec4:	cmp	r3, #0
   13ec8:	beq	140bc <__assert_fail@plt+0x2c78>
   13ecc:	strb	fp, [r4, #164]	; 0xa4
   13ed0:	b	13e70 <__assert_fail@plt+0x2a2c>
   13ed4:	mov	r1, #0
   13ed8:	mov	r3, #1
   13edc:	strb	r1, [r5, #40]	; 0x28
   13ee0:	strb	r3, [r4, #158]	; 0x9e
   13ee4:	str	r2, [r4, #176]	; 0xb0
   13ee8:	b	139ec <__assert_fail@plt+0x25a8>
   13eec:	cmp	ip, #0
   13ef0:	ldr	r3, [r4, #84]	; 0x54
   13ef4:	bne	13a60 <__assert_fail@plt+0x261c>
   13ef8:	cmp	r3, #1
   13efc:	bne	13a60 <__assert_fail@plt+0x261c>
   13f00:	ldr	r2, [r5, #28]
   13f04:	ldrb	r2, [r2]
   13f08:	cmp	r2, #9
   13f0c:	ldreq	r2, [pc, #2300]	; 14810 <__assert_fail@plt+0x33cc>
   13f10:	streq	r2, [r5, #28]
   13f14:	b	13a60 <__assert_fail@plt+0x261c>
   13f18:	ldrb	r3, [r4, #124]	; 0x7c
   13f1c:	cmp	r3, #0
   13f20:	beq	13f50 <__assert_fail@plt+0x2b0c>
   13f24:	ldr	r3, [pc, #2300]	; 14828 <__assert_fail@plt+0x33e4>
   13f28:	ldr	r0, [r3]
   13f2c:	ldr	r3, [r0, #20]
   13f30:	ldr	r2, [r0, #24]
   13f34:	cmp	r3, r2
   13f38:	addcc	r1, r3, #1
   13f3c:	movcc	r2, #10
   13f40:	strcc	r1, [r0, #20]
   13f44:	strbcc	r2, [r3]
   13f48:	bcs	140c8 <__assert_fail@plt+0x2c84>
   13f4c:	sub	r6, r6, #1
   13f50:	bl	122cc <__assert_fail@plt+0xe88>
   13f54:	cmp	r0, #0
   13f58:	beq	140a0 <__assert_fail@plt+0x2c5c>
   13f5c:	ldrb	r3, [r4, #180]	; 0xb4
   13f60:	cmp	r3, #0
   13f64:	beq	13f9c <__assert_fail@plt+0x2b58>
   13f68:	cmp	r9, #0
   13f6c:	beq	13f9c <__assert_fail@plt+0x2b58>
   13f70:	ldr	r3, [pc, #2224]	; 14828 <__assert_fail@plt+0x33e4>
   13f74:	ldr	r0, [r3]
   13f78:	ldr	r3, [r0, #20]
   13f7c:	ldr	r2, [r0, #24]
   13f80:	cmp	r3, r2
   13f84:	addcc	r1, r3, #1
   13f88:	movcc	r2, #10
   13f8c:	strcc	r1, [r0, #20]
   13f90:	strbcc	r2, [r3]
   13f94:	bcs	1430c <__assert_fail@plt+0x2ec8>
   13f98:	sub	r6, r6, #1
   13f9c:	cmp	r6, #0
   13fa0:	bgt	13dbc <__assert_fail@plt+0x2978>
   13fa4:	cmp	r6, #0
   13fa8:	bne	13fe8 <__assert_fail@plt+0x2ba4>
   13fac:	ldr	r1, [r5]
   13fb0:	ldr	r3, [r4]
   13fb4:	cmp	r1, #0
   13fb8:	ble	13fe8 <__assert_fail@plt+0x2ba4>
   13fbc:	mov	r2, #1
   13fc0:	add	r1, r1, r2
   13fc4:	mov	ip, r2
   13fc8:	ldr	r0, [r3, #8]
   13fcc:	add	r2, r2, #1
   13fd0:	cmp	r0, #0
   13fd4:	strbeq	ip, [r3, #37]	; 0x25
   13fd8:	cmp	r1, r2
   13fdc:	add	r3, r3, #40	; 0x28
   13fe0:	bne	13fc8 <__assert_fail@plt+0x2b84>
   13fe4:	mov	r6, #0
   13fe8:	cmp	r9, #0
   13fec:	strb	r9, [r4, #124]	; 0x7c
   13ff0:	beq	14000 <__assert_fail@plt+0x2bbc>
   13ff4:	ldrb	r3, [r5, #40]	; 0x28
   13ff8:	cmp	r3, #0
   13ffc:	bne	1436c <__assert_fail@plt+0x2f28>
   14000:	ldrb	r3, [r4, #158]	; 0x9e
   14004:	cmp	r3, #0
   14008:	beq	14044 <__assert_fail@plt+0x2c00>
   1400c:	ldrb	r3, [r4, #159]	; 0x9f
   14010:	cmp	r3, #0
   14014:	beq	14044 <__assert_fail@plt+0x2c00>
   14018:	ldr	r3, [pc, #2056]	; 14828 <__assert_fail@plt+0x33e4>
   1401c:	ldr	r0, [r3]
   14020:	ldr	r3, [r0, #20]
   14024:	ldr	r2, [r0, #24]
   14028:	cmp	r3, r2
   1402c:	addcc	r1, r3, #1
   14030:	movcc	r2, #12
   14034:	strcc	r1, [r0, #20]
   14038:	strbcc	r2, [r3]
   1403c:	bcs	147a0 <__assert_fail@plt+0x335c>
   14040:	strb	r7, [r4, #159]	; 0x9f
   14044:	ldr	r1, [r4, #96]	; 0x60
   14048:	ldr	r0, [r4, #100]	; 0x64
   1404c:	adds	r1, r1, #1
   14050:	str	r1, [sp, #24]
   14054:	adc	r1, r0, #0
   14058:	str	r1, [sp, #28]
   1405c:	ldrd	r0, [sp, #24]
   14060:	ldrd	r2, [r5, #8]
   14064:	strd	r0, [r4, #96]	; 0x60
   14068:	cmp	r1, r3
   1406c:	cmpeq	r0, r2
   14070:	bls	142fc <__assert_fail@plt+0x2eb8>
   14074:	add	sp, sp, #44	; 0x2c
   14078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1407c:	mov	r0, r8
   14080:	bl	138ec <__assert_fail@plt+0x24a8>
   14084:	b	13e1c <__assert_fail@plt+0x29d8>
   14088:	bl	122cc <__assert_fail@plt+0xe88>
   1408c:	ldr	r2, [sp, #16]
   14090:	cmp	r0, #0
   14094:	bne	13e3c <__assert_fail@plt+0x29f8>
   14098:	cmp	r2, #0
   1409c:	bne	13f24 <__assert_fail@plt+0x2ae0>
   140a0:	ldrb	r3, [r5, #40]	; 0x28
   140a4:	cmp	r3, #0
   140a8:	bne	13f5c <__assert_fail@plt+0x2b18>
   140ac:	b	13fa4 <__assert_fail@plt+0x2b60>
   140b0:	ldrb	r3, [r4, #157]	; 0x9d
   140b4:	cmp	r3, #0
   140b8:	beq	13e70 <__assert_fail@plt+0x2a2c>
   140bc:	mov	r0, r8
   140c0:	bl	133b0 <__assert_fail@plt+0x1f6c>
   140c4:	b	13e70 <__assert_fail@plt+0x2a2c>
   140c8:	mov	r1, #10
   140cc:	bl	113b4 <__overflow@plt>
   140d0:	b	13f4c <__assert_fail@plt+0x2b08>
   140d4:	ldrb	r1, [r4, #181]	; 0xb5
   140d8:	str	r7, [r4, #8]
   140dc:	cmp	r1, #0
   140e0:	bne	14318 <__assert_fail@plt+0x2ed4>
   140e4:	sub	r3, r8, #1
   140e8:	cmp	r3, #0
   140ec:	str	r3, [sp, #36]	; 0x24
   140f0:	ble	14338 <__assert_fail@plt+0x2ef4>
   140f4:	ldr	r3, [sp, #36]	; 0x24
   140f8:	mov	r2, r6
   140fc:	add	r0, r3, #1
   14100:	mov	r3, #1
   14104:	add	r3, r3, #1
   14108:	cmp	r3, r0
   1410c:	str	r7, [r2, #24]
   14110:	add	r2, r2, #40	; 0x28
   14114:	bne	14104 <__assert_fail@plt+0x2cc0>
   14118:	ldr	r2, [r4, #4]
   1411c:	cmp	r2, #0
   14120:	moveq	r0, r2
   14124:	moveq	fp, r2
   14128:	beq	14254 <__assert_fail@plt+0x2e10>
   1412c:	mov	r8, #0
   14130:	mov	fp, r8
   14134:	mov	r9, r8
   14138:	mov	r3, #1
   1413c:	str	r3, [sp, #16]
   14140:	ldr	sl, [r4, #176]	; 0xb0
   14144:	str	r9, [r6, #20]
   14148:	cmp	sl, #0
   1414c:	beq	141e0 <__assert_fail@plt+0x2d9c>
   14150:	ldr	r3, [r4, #4]
   14154:	cmp	r3, #0
   14158:	beq	14234 <__assert_fail@plt+0x2df0>
   1415c:	ldr	r3, [r6, #8]
   14160:	b	14178 <__assert_fail@plt+0x2d34>
   14164:	subs	sl, sl, #1
   14168:	beq	141e0 <__assert_fail@plt+0x2d9c>
   1416c:	ldr	r2, [r4, #4]
   14170:	cmp	r2, #0
   14174:	beq	14234 <__assert_fail@plt+0x2df0>
   14178:	cmp	r3, #0
   1417c:	bne	14164 <__assert_fail@plt+0x2d20>
   14180:	mov	r0, r6
   14184:	str	r3, [r4, #112]	; 0x70
   14188:	bl	13414 <__assert_fail@plt+0x1fd0>
   1418c:	cmp	r0, #0
   14190:	beq	14228 <__assert_fail@plt+0x2de4>
   14194:	ldr	r3, [r6, #8]
   14198:	ldr	r1, [r4, #8]
   1419c:	cmp	r3, #0
   141a0:	beq	141ac <__assert_fail@plt+0x2d68>
   141a4:	cmp	fp, r1
   141a8:	beq	14164 <__assert_fail@plt+0x2d20>
   141ac:	ldr	r2, [r6, #24]
   141b0:	ldr	ip, [r4, #120]	; 0x78
   141b4:	add	r2, r2, #1
   141b8:	ldr	r0, [r4, #136]	; 0x88
   141bc:	str	r2, [r6, #24]
   141c0:	add	r9, r9, #1
   141c4:	ldr	r2, [r4, #112]	; 0x70
   141c8:	subs	sl, sl, #1
   141cc:	str	fp, [ip, r8]
   141d0:	str	r2, [r0, r8]
   141d4:	mov	fp, r1
   141d8:	lsl	r8, r9, #2
   141dc:	bne	1416c <__assert_fail@plt+0x2d28>
   141e0:	ldr	r3, [sp, #16]
   141e4:	ldr	r2, [sp, #36]	; 0x24
   141e8:	add	r3, r3, #1
   141ec:	cmp	r3, r2
   141f0:	str	r3, [sp, #16]
   141f4:	add	r6, r6, #40	; 0x28
   141f8:	mov	r0, r8
   141fc:	mov	ip, fp
   14200:	bgt	147ec <__assert_fail@plt+0x33a8>
   14204:	ldr	r3, [r4, #4]
   14208:	cmp	r3, #0
   1420c:	bne	14140 <__assert_fail@plt+0x2cfc>
   14210:	mov	fp, r9
   14214:	mov	r2, ip
   14218:	ldrb	r1, [r4, #181]	; 0xb5
   1421c:	ldr	r8, [r5]
   14220:	ldr	r6, [r4]
   14224:	b	14254 <__assert_fail@plt+0x2e10>
   14228:	mov	r0, r6
   1422c:	bl	138ec <__assert_fail@plt+0x24a8>
   14230:	b	14194 <__assert_fail@plt+0x2d50>
   14234:	mov	r3, r8
   14238:	ldrb	r1, [r4, #181]	; 0xb5
   1423c:	mov	r8, fp
   14240:	mov	r2, r8
   14244:	ldr	r6, [r4]
   14248:	ldr	r8, [r5]
   1424c:	mov	fp, r9
   14250:	mov	r0, r3
   14254:	ldr	r3, [r4, #120]	; 0x78
   14258:	cmp	r1, #0
   1425c:	sub	r9, r8, #1
   14260:	str	r2, [r3, r0]
   14264:	beq	14344 <__assert_fail@plt+0x2f00>
   14268:	cmp	r8, #0
   1426c:	ble	142b8 <__assert_fail@plt+0x2e74>
   14270:	mov	r0, fp
   14274:	mov	r1, r8
   14278:	bl	1c1f8 <__assert_fail@plt+0xadb4>
   1427c:	add	sl, r8, #1
   14280:	mov	ip, #0
   14284:	mov	r2, r6
   14288:	mov	r3, #1
   1428c:	add	fp, r0, #1
   14290:	cmp	r3, r1
   14294:	add	r3, r3, #1
   14298:	movle	lr, fp
   1429c:	movgt	lr, r0
   142a0:	cmp	r3, sl
   142a4:	str	ip, [r2, #20]
   142a8:	str	lr, [r2, #24]
   142ac:	add	ip, ip, lr
   142b0:	add	r2, r2, #40	; 0x28
   142b4:	bne	14290 <__assert_fail@plt+0x2e4c>
   142b8:	cmp	r9, #0
   142bc:	beq	142f0 <__assert_fail@plt+0x2eac>
   142c0:	mov	r3, r6
   142c4:	ldr	r2, [r3, #24]
   142c8:	subs	r9, r9, #1
   142cc:	str	r2, [r3, #28]
   142d0:	add	r3, r3, #40	; 0x28
   142d4:	bne	142c4 <__assert_fail@plt+0x2e80>
   142d8:	add	r8, r8, r8, lsl #2
   142dc:	ldr	r3, [sp, #32]
   142e0:	add	r6, r6, r8, lsl #3
   142e4:	cmp	r3, #0
   142e8:	sub	r6, r6, #40	; 0x28
   142ec:	beq	14354 <__assert_fail@plt+0x2f10>
   142f0:	ldr	r3, [r6, #24]
   142f4:	str	r3, [r6, #28]
   142f8:	b	13d80 <__assert_fail@plt+0x293c>
   142fc:	bl	12348 <__assert_fail@plt+0xf04>
   14300:	ldrb	r3, [r5, #4]
   14304:	str	r3, [sp, #32]
   14308:	b	13d40 <__assert_fail@plt+0x28fc>
   1430c:	mov	r1, #10
   14310:	bl	113b4 <__overflow@plt>
   14314:	b	13f98 <__assert_fail@plt+0x2b54>
   14318:	cmp	r8, #0
   1431c:	strgt	r8, [sp, #36]	; 0x24
   14320:	bgt	140f4 <__assert_fail@plt+0x2cb0>
   14324:	ldr	r3, [r4, #120]	; 0x78
   14328:	sub	r9, r8, #1
   1432c:	mov	fp, #0
   14330:	str	r7, [r3]
   14334:	b	14268 <__assert_fail@plt+0x2e24>
   14338:	ldr	r3, [r4, #120]	; 0x78
   1433c:	ldr	r9, [sp, #36]	; 0x24
   14340:	str	r1, [r3]
   14344:	cmp	r9, #0
   14348:	movne	r3, #0
   1434c:	strne	r3, [sp, #32]
   14350:	bne	142c0 <__assert_fail@plt+0x2e7c>
   14354:	ldr	r3, [r6, #8]
   14358:	cmp	r3, #0
   1435c:	strne	r7, [r6, #28]
   14360:	ldreq	r3, [r4, #176]	; 0xb0
   14364:	streq	r3, [r6, #28]
   14368:	b	13d80 <__assert_fail@plt+0x293c>
   1436c:	ldrb	r3, [r4, #184]	; 0xb8
   14370:	cmp	r3, #0
   14374:	bne	14448 <__assert_fail@plt+0x3004>
   14378:	adds	r6, r6, #5
   1437c:	beq	14044 <__assert_fail@plt+0x2c00>
   14380:	mov	r8, #10
   14384:	b	14390 <__assert_fail@plt+0x2f4c>
   14388:	subs	r6, r6, #1
   1438c:	beq	14044 <__assert_fail@plt+0x2c00>
   14390:	ldr	r3, [pc, #1168]	; 14828 <__assert_fail@plt+0x33e4>
   14394:	ldr	r0, [r3]
   14398:	ldr	r3, [r0, #20]
   1439c:	ldr	r2, [r0, #24]
   143a0:	cmp	r3, r2
   143a4:	addcc	r2, r3, #1
   143a8:	strcc	r2, [r0, #20]
   143ac:	strbcc	r8, [r3]
   143b0:	bcc	14388 <__assert_fail@plt+0x2f44>
   143b4:	mov	r1, #10
   143b8:	bl	113b4 <__overflow@plt>
   143bc:	b	14388 <__assert_fail@plt+0x2f44>
   143c0:	ldrb	r3, [r4, #33]	; 0x21
   143c4:	cmp	r3, #0
   143c8:	movne	r1, r7
   143cc:	ldreq	r1, [r5]
   143d0:	strne	r7, [r5]
   143d4:	b	13a14 <__assert_fail@plt+0x25d0>
   143d8:	cmp	r7, #0
   143dc:	ble	14690 <__assert_fail@plt+0x324c>
   143e0:	mov	r1, r0
   143e4:	ldr	r0, [r8]
   143e8:	bl	137e8 <__assert_fail@plt+0x23a4>
   143ec:	cmp	r0, #0
   143f0:	beq	14074 <__assert_fail@plt+0x2c30>
   143f4:	ldr	r0, [r6]
   143f8:	ldr	r7, [r8]
   143fc:	bl	1136c <fileno@plt>
   14400:	mov	r1, r0
   14404:	mov	r0, r7
   14408:	bl	126c0 <__assert_fail@plt+0x127c>
   1440c:	str	r9, [r6, #24]
   14410:	b	146dc <__assert_fail@plt+0x3298>
   14414:	mov	r2, #0
   14418:	ldr	r3, [r4, #84]	; 0x54
   1441c:	strb	r2, [r5, #4]
   14420:	b	13a6c <__assert_fail@plt+0x2628>
   14424:	ldr	r0, [r4, #144]	; 0x90
   14428:	bl	11168 <free@plt>
   1442c:	ldr	r0, [r5, #48]	; 0x30
   14430:	cmp	r0, #11
   14434:	movcc	r0, #11
   14438:	add	r0, r0, #1
   1443c:	bl	192cc <__assert_fail@plt+0x7e88>
   14440:	str	r0, [r4, #144]	; 0x90
   14444:	b	13b04 <__assert_fail@plt+0x26c0>
   14448:	ldr	r3, [pc, #984]	; 14828 <__assert_fail@plt+0x33e4>
   1444c:	ldr	r0, [r3]
   14450:	ldr	r3, [r0, #20]
   14454:	ldr	r2, [r0, #24]
   14458:	cmp	r3, r2
   1445c:	addcc	r1, r3, #1
   14460:	movcc	r2, #12
   14464:	strcc	r1, [r0, #20]
   14468:	strbcc	r2, [r3]
   1446c:	bcc	14044 <__assert_fail@plt+0x2c00>
   14470:	mov	r1, #12
   14474:	bl	113b4 <__overflow@plt>
   14478:	b	14044 <__assert_fail@plt+0x2c00>
   1447c:	mov	r8, #1
   14480:	mov	r9, #0
   14484:	mov	sl, #2
   14488:	ldr	r3, [r4, #176]	; 0xb0
   1448c:	ldr	r6, [r4]
   14490:	cmp	r3, #1
   14494:	movgt	fp, #1
   14498:	ldr	r3, [r5]
   1449c:	ble	144f4 <__assert_fail@plt+0x30b0>
   144a0:	cmp	r3, #0
   144a4:	ble	144e4 <__assert_fail@plt+0x30a0>
   144a8:	mov	r7, #1
   144ac:	b	144c4 <__assert_fail@plt+0x3080>
   144b0:	ldr	r3, [r5]
   144b4:	add	r7, r7, #1
   144b8:	cmp	r7, r3
   144bc:	add	r6, r6, #40	; 0x28
   144c0:	bgt	144e0 <__assert_fail@plt+0x309c>
   144c4:	ldr	r3, [r6, #8]
   144c8:	cmp	r3, #0
   144cc:	bne	144b0 <__assert_fail@plt+0x306c>
   144d0:	mov	r1, r7
   144d4:	mov	r0, r6
   144d8:	bl	13050 <__assert_fail@plt+0x1c0c>
   144dc:	b	144b0 <__assert_fail@plt+0x306c>
   144e0:	ldr	r6, [r4]
   144e4:	ldr	r2, [r4, #176]	; 0xb0
   144e8:	add	fp, fp, #1
   144ec:	cmp	fp, r2
   144f0:	blt	144a0 <__assert_fail@plt+0x305c>
   144f4:	cmp	r3, #0
   144f8:	mov	r3, #1
   144fc:	strb	r3, [r4, #140]	; 0x8c
   14500:	ble	14578 <__assert_fail@plt+0x3134>
   14504:	mov	r7, #1
   14508:	b	14520 <__assert_fail@plt+0x30dc>
   1450c:	ldr	r2, [r5]
   14510:	add	r7, r7, #1
   14514:	cmp	r7, r2
   14518:	add	r6, r6, #40	; 0x28
   1451c:	bgt	1453c <__assert_fail@plt+0x30f8>
   14520:	ldr	r3, [r6, #8]
   14524:	cmp	r3, #0
   14528:	bne	1450c <__assert_fail@plt+0x30c8>
   1452c:	mov	r1, r7
   14530:	mov	r0, r6
   14534:	bl	13050 <__assert_fail@plt+0x1c0c>
   14538:	b	1450c <__assert_fail@plt+0x30c8>
   1453c:	ldrb	r3, [r5, #4]
   14540:	cmp	r3, #0
   14544:	beq	14578 <__assert_fail@plt+0x3134>
   14548:	cmp	r2, #0
   1454c:	ldr	r3, [r4]
   14550:	ble	14578 <__assert_fail@plt+0x3134>
   14554:	add	r2, r2, #1
   14558:	mov	r1, #1
   1455c:	ldr	r0, [r3, #8]
   14560:	add	r1, r1, #1
   14564:	cmp	r0, #3
   14568:	strne	sl, [r3, #8]
   1456c:	cmp	r1, r2
   14570:	add	r3, r3, #40	; 0x28
   14574:	bne	1455c <__assert_fail@plt+0x3118>
   14578:	bl	12348 <__assert_fail@plt+0xf04>
   1457c:	ldr	r3, [r4, #4]
   14580:	mov	r6, #0
   14584:	cmp	r3, r6
   14588:	strb	r6, [r4, #140]	; 0x8c
   1458c:	ble	14744 <__assert_fail@plt+0x3300>
   14590:	ldrd	r2, [sp, #16]
   14594:	adds	r8, r8, #1
   14598:	adc	r9, r9, #0
   1459c:	cmp	r3, r9
   145a0:	cmpeq	r2, r8
   145a4:	bne	14488 <__assert_fail@plt+0x3044>
   145a8:	ldrd	r2, [r4, #24]
   145ac:	strd	r2, [r4, #96]	; 0x60
   145b0:	b	13bf8 <__assert_fail@plt+0x27b4>
   145b4:	ldr	r8, [r4, #176]	; 0xb0
   145b8:	ldr	r3, [r5]
   145bc:	smull	r8, r9, r8, r3
   145c0:	cmp	r9, r8, asr #31
   145c4:	bne	147e0 <__assert_fail@plt+0x339c>
   145c8:	mov	r3, #1
   145cc:	adds	sl, r8, r3
   145d0:	bvs	147e0 <__assert_fail@plt+0x339c>
   145d4:	ldr	r6, [r4, #160]	; 0xa0
   145d8:	adds	r6, r6, r3
   145dc:	bvs	147e0 <__assert_fail@plt+0x339c>
   145e0:	smull	r6, r7, r8, r6
   145e4:	cmp	r7, r6, asr #31
   145e8:	bne	147e0 <__assert_fail@plt+0x339c>
   145ec:	ldr	r0, [r4, #120]	; 0x78
   145f0:	bl	11168 <free@plt>
   145f4:	lsrs	r3, sl, #30
   145f8:	movne	r3, #1
   145fc:	moveq	r3, #0
   14600:	lsls	r0, sl, #2
   14604:	bmi	147dc <__assert_fail@plt+0x3398>
   14608:	cmp	r3, #0
   1460c:	bne	147dc <__assert_fail@plt+0x3398>
   14610:	bl	192cc <__assert_fail@plt+0x7e88>
   14614:	str	r0, [r4, #120]	; 0x78
   14618:	ldr	r0, [r4, #136]	; 0x88
   1461c:	bl	11168 <free@plt>
   14620:	lsrs	r3, r8, #30
   14624:	movne	r3, #1
   14628:	moveq	r3, #0
   1462c:	lsls	r0, r8, #2
   14630:	bmi	147dc <__assert_fail@plt+0x3398>
   14634:	cmp	r3, #0
   14638:	bne	147dc <__assert_fail@plt+0x3398>
   1463c:	bl	192cc <__assert_fail@plt+0x7e88>
   14640:	str	r0, [r4, #136]	; 0x88
   14644:	ldr	r0, [r4, #12]
   14648:	bl	11168 <free@plt>
   1464c:	ldrb	r0, [r4, #132]	; 0x84
   14650:	add	r0, r0, #1
   14654:	umull	r8, r9, r6, r0
   14658:	adds	r3, r9, #0
   1465c:	movne	r3, #1
   14660:	cmp	r8, #0
   14664:	blt	147dc <__assert_fail@plt+0x3398>
   14668:	cmp	r3, #0
   1466c:	bne	147dc <__assert_fail@plt+0x3398>
   14670:	mul	r0, r0, r6
   14674:	bl	192cc <__assert_fail@plt+0x7e88>
   14678:	ldrb	r3, [r4, #132]	; 0x84
   1467c:	add	r3, r3, #1
   14680:	mul	r6, r3, r6
   14684:	str	r6, [r4, #16]
   14688:	str	r0, [r4, #12]
   1468c:	b	13bd8 <__assert_fail@plt+0x2794>
   14690:	mov	r2, #5
   14694:	ldr	r1, [pc, #400]	; 1482c <__assert_fail@plt+0x33e8>
   14698:	mov	r0, r9
   1469c:	bl	111bc <dcgettext@plt>
   146a0:	ldr	r2, [pc, #392]	; 14830 <__assert_fail@plt+0x33ec>
   146a4:	ldr	r3, [r4, #172]	; 0xac
   146a8:	str	r9, [r6, #8]
   146ac:	ldr	r1, [r2]
   146b0:	add	r3, r3, #1
   146b4:	mov	r2, #1
   146b8:	str	r1, [r6]
   146bc:	strb	r9, [r6, #37]	; 0x25
   146c0:	mvn	r1, #0
   146c4:	str	r3, [r4, #172]	; 0xac
   146c8:	strb	r2, [r4, #166]	; 0xa6
   146cc:	str	r0, [r6, #4]
   146d0:	ldr	r0, [pc, #316]	; 14814 <__assert_fail@plt+0x33d0>
   146d4:	bl	126c0 <__assert_fail@plt+0x127c>
   146d8:	str	r9, [r6, #24]
   146dc:	ldr	r3, [r5]
   146e0:	ldr	r0, [r6, #4]
   146e4:	subs	r3, r3, #1
   146e8:	ldr	ip, [r6]
   146ec:	beq	13bc4 <__assert_fail@plt+0x2780>
   146f0:	add	r1, r6, #80	; 0x50
   146f4:	mov	r2, #0
   146f8:	subs	r3, r3, #1
   146fc:	str	r0, [r1, #-36]	; 0xffffffdc
   14700:	str	ip, [r1, #-40]	; 0xffffffd8
   14704:	str	r2, [r1, #-32]	; 0xffffffe0
   14708:	strb	r2, [r1, #-3]
   1470c:	str	r2, [r1, #-16]
   14710:	add	r1, r1, #40	; 0x28
   14714:	bne	146f8 <__assert_fail@plt+0x32b4>
   14718:	b	13bc4 <__assert_fail@plt+0x2780>
   1471c:	ldr	r2, [pc, #252]	; 14820 <__assert_fail@plt+0x33dc>
   14720:	ldr	r3, [pc, #240]	; 14818 <__assert_fail@plt+0x33d4>
   14724:	str	r2, [r8, #16]
   14728:	str	r3, [r8, #12]
   1472c:	b	13d10 <__assert_fail@plt+0x28cc>
   14730:	ldrb	r3, [r4, #183]	; 0xb7
   14734:	cmp	r3, #0
   14738:	ldrne	r3, [r4, #152]	; 0x98
   1473c:	addne	lr, lr, r3
   14740:	b	13c20 <__assert_fail@plt+0x27dc>
   14744:	mov	r2, #5
   14748:	ldr	r1, [pc, #228]	; 14834 <__assert_fail@plt+0x33f0>
   1474c:	mov	r0, r6
   14750:	bl	111bc <dcgettext@plt>
   14754:	ldrd	r2, [sp, #16]
   14758:	strd	r8, [sp, #8]
   1475c:	mov	r1, r6
   14760:	strd	r2, [sp]
   14764:	mov	r2, r0
   14768:	mov	r0, r6
   1476c:	bl	11270 <error@plt>
   14770:	ldr	r3, [r4, #4]
   14774:	cmp	r3, r6
   14778:	ble	14074 <__assert_fail@plt+0x2c30>
   1477c:	b	145a8 <__assert_fail@plt+0x3164>
   14780:	bne	14000 <__assert_fail@plt+0x2bbc>
   14784:	ldr	r1, [r5]
   14788:	ldr	r3, [r4]
   1478c:	cmp	r1, #0
   14790:	strble	r6, [r4, #124]	; 0x7c
   14794:	ble	14000 <__assert_fail@plt+0x2bbc>
   14798:	mov	r9, r6
   1479c:	b	13fbc <__assert_fail@plt+0x2b78>
   147a0:	mov	r1, #12
   147a4:	bl	113b4 <__overflow@plt>
   147a8:	b	14040 <__assert_fail@plt+0x2bfc>
   147ac:	mov	r7, #1
   147b0:	b	13ce8 <__assert_fail@plt+0x28a4>
   147b4:	mov	r3, #0
   147b8:	str	r3, [r4, #160]	; 0xa0
   147bc:	ldr	r1, [pc, #116]	; 14838 <__assert_fail@plt+0x33f4>
   147c0:	mov	r2, #5
   147c4:	mov	r0, #0
   147c8:	bl	111bc <dcgettext@plt>
   147cc:	mov	r1, #0
   147d0:	mov	r2, r0
   147d4:	mov	r0, #1
   147d8:	bl	11270 <error@plt>
   147dc:	bl	19514 <__assert_fail@plt+0x80d0>
   147e0:	mov	r2, #5
   147e4:	ldr	r1, [pc, #80]	; 1483c <__assert_fail@plt+0x33f8>
   147e8:	b	147c4 <__assert_fail@plt+0x3380>
   147ec:	mov	fp, r9
   147f0:	mov	r2, ip
   147f4:	ldr	r8, [r5]
   147f8:	ldrb	r1, [r4, #181]	; 0xb5
   147fc:	ldr	r6, [r4]
   14800:	b	14254 <__assert_fail@plt+0x2e10>
   14804:	andeq	pc, r2, r0, asr #2
   14808:	strdeq	pc, [r2], -r0
   1480c:	andeq	ip, r1, ip, lsl #15
   14810:	andeq	ip, r1, ip, ror #14
   14814:	andeq	ip, r1, r8, ror #14
   14818:	andeq	r2, r1, r0, lsr #29
   1481c:	strdeq	r2, [r1], -r0
   14820:	andeq	r2, r1, r8, asr #7
   14824:	andeq	r3, r1, r4, lsl r4
   14828:	andeq	pc, r2, r4, ror #3
   1482c:	andeq	ip, r1, ip, ror r7
   14830:	andeq	pc, r2, r0, ror #3
   14834:			; <UNDEFINED> instruction: 0x0001c7bc
   14838:	muleq	r1, r0, r7
   1483c:	andeq	ip, r1, r8, lsr #15
   14840:	ldr	r3, [pc, #1008]	; 14c38 <__assert_fail@plt+0x37f4>
   14844:	push	{r7, lr}
   14848:	sub	sp, sp, #64	; 0x40
   1484c:	ldr	r3, [r3]
   14850:	subs	r4, r0, #0
   14854:	str	r3, [sp, #60]	; 0x3c
   14858:	beq	14894 <__assert_fail@plt+0x3450>
   1485c:	ldr	r3, [pc, #984]	; 14c3c <__assert_fail@plt+0x37f8>
   14860:	mov	r2, #5
   14864:	ldr	r1, [pc, #980]	; 14c40 <__assert_fail@plt+0x37fc>
   14868:	mov	r0, #0
   1486c:	ldr	r5, [r3]
   14870:	bl	111bc <dcgettext@plt>
   14874:	ldr	r3, [pc, #968]	; 14c44 <__assert_fail@plt+0x3800>
   14878:	mov	r1, #1
   1487c:	ldr	r3, [r3]
   14880:	mov	r2, r0
   14884:	mov	r0, r5
   14888:	bl	11378 <__fprintf_chk@plt>
   1488c:	mov	r0, r4
   14890:	bl	112f4 <exit@plt>
   14894:	mov	r2, #5
   14898:	ldr	r1, [pc, #936]	; 14c48 <__assert_fail@plt+0x3804>
   1489c:	bl	111bc <dcgettext@plt>
   148a0:	ldr	r3, [pc, #924]	; 14c44 <__assert_fail@plt+0x3800>
   148a4:	ldr	r5, [pc, #928]	; 14c4c <__assert_fail@plt+0x3808>
   148a8:	ldr	r2, [r3]
   148ac:	mov	r1, r0
   148b0:	mov	r0, #1
   148b4:	bl	11360 <__printf_chk@plt>
   148b8:	mov	r2, #5
   148bc:	ldr	r1, [pc, #908]	; 14c50 <__assert_fail@plt+0x380c>
   148c0:	mov	r0, r4
   148c4:	bl	111bc <dcgettext@plt>
   148c8:	ldr	r1, [r5]
   148cc:	bl	110fc <fputs_unlocked@plt>
   148d0:	mov	r2, #5
   148d4:	ldr	r1, [pc, #888]	; 14c54 <__assert_fail@plt+0x3810>
   148d8:	mov	r0, r4
   148dc:	bl	111bc <dcgettext@plt>
   148e0:	ldr	r1, [r5]
   148e4:	bl	110fc <fputs_unlocked@plt>
   148e8:	mov	r2, #5
   148ec:	ldr	r1, [pc, #868]	; 14c58 <__assert_fail@plt+0x3814>
   148f0:	mov	r0, r4
   148f4:	bl	111bc <dcgettext@plt>
   148f8:	ldr	r1, [r5]
   148fc:	bl	110fc <fputs_unlocked@plt>
   14900:	mov	r2, #5
   14904:	ldr	r1, [pc, #848]	; 14c5c <__assert_fail@plt+0x3818>
   14908:	mov	r0, r4
   1490c:	bl	111bc <dcgettext@plt>
   14910:	ldr	r1, [r5]
   14914:	bl	110fc <fputs_unlocked@plt>
   14918:	mov	r2, #5
   1491c:	ldr	r1, [pc, #828]	; 14c60 <__assert_fail@plt+0x381c>
   14920:	mov	r0, r4
   14924:	bl	111bc <dcgettext@plt>
   14928:	ldr	r1, [r5]
   1492c:	bl	110fc <fputs_unlocked@plt>
   14930:	mov	r2, #5
   14934:	ldr	r1, [pc, #808]	; 14c64 <__assert_fail@plt+0x3820>
   14938:	mov	r0, r4
   1493c:	bl	111bc <dcgettext@plt>
   14940:	ldr	r1, [r5]
   14944:	bl	110fc <fputs_unlocked@plt>
   14948:	mov	r2, #5
   1494c:	ldr	r1, [pc, #788]	; 14c68 <__assert_fail@plt+0x3824>
   14950:	mov	r0, r4
   14954:	bl	111bc <dcgettext@plt>
   14958:	ldr	r1, [r5]
   1495c:	bl	110fc <fputs_unlocked@plt>
   14960:	mov	r2, #5
   14964:	ldr	r1, [pc, #768]	; 14c6c <__assert_fail@plt+0x3828>
   14968:	mov	r0, r4
   1496c:	bl	111bc <dcgettext@plt>
   14970:	ldr	r1, [r5]
   14974:	bl	110fc <fputs_unlocked@plt>
   14978:	mov	r2, #5
   1497c:	ldr	r1, [pc, #748]	; 14c70 <__assert_fail@plt+0x382c>
   14980:	mov	r0, r4
   14984:	bl	111bc <dcgettext@plt>
   14988:	ldr	r1, [r5]
   1498c:	bl	110fc <fputs_unlocked@plt>
   14990:	mov	r2, #5
   14994:	ldr	r1, [pc, #728]	; 14c74 <__assert_fail@plt+0x3830>
   14998:	mov	r0, r4
   1499c:	bl	111bc <dcgettext@plt>
   149a0:	ldr	r1, [r5]
   149a4:	bl	110fc <fputs_unlocked@plt>
   149a8:	mov	r2, #5
   149ac:	ldr	r1, [pc, #708]	; 14c78 <__assert_fail@plt+0x3834>
   149b0:	mov	r0, r4
   149b4:	bl	111bc <dcgettext@plt>
   149b8:	ldr	r1, [r5]
   149bc:	bl	110fc <fputs_unlocked@plt>
   149c0:	mov	r2, #5
   149c4:	ldr	r1, [pc, #688]	; 14c7c <__assert_fail@plt+0x3838>
   149c8:	mov	r0, r4
   149cc:	bl	111bc <dcgettext@plt>
   149d0:	ldr	r1, [r5]
   149d4:	bl	110fc <fputs_unlocked@plt>
   149d8:	mov	r2, #5
   149dc:	ldr	r1, [pc, #668]	; 14c80 <__assert_fail@plt+0x383c>
   149e0:	mov	r0, r4
   149e4:	bl	111bc <dcgettext@plt>
   149e8:	ldr	r1, [r5]
   149ec:	bl	110fc <fputs_unlocked@plt>
   149f0:	mov	r2, #5
   149f4:	ldr	r1, [pc, #648]	; 14c84 <__assert_fail@plt+0x3840>
   149f8:	mov	r0, r4
   149fc:	bl	111bc <dcgettext@plt>
   14a00:	ldr	r1, [r5]
   14a04:	bl	110fc <fputs_unlocked@plt>
   14a08:	mov	r2, #5
   14a0c:	ldr	r1, [pc, #628]	; 14c88 <__assert_fail@plt+0x3844>
   14a10:	mov	r0, r4
   14a14:	bl	111bc <dcgettext@plt>
   14a18:	ldr	r1, [r5]
   14a1c:	bl	110fc <fputs_unlocked@plt>
   14a20:	mov	r2, #5
   14a24:	ldr	r1, [pc, #608]	; 14c8c <__assert_fail@plt+0x3848>
   14a28:	mov	r0, r4
   14a2c:	bl	111bc <dcgettext@plt>
   14a30:	ldr	r1, [r5]
   14a34:	bl	110fc <fputs_unlocked@plt>
   14a38:	mov	r2, #5
   14a3c:	ldr	r1, [pc, #588]	; 14c90 <__assert_fail@plt+0x384c>
   14a40:	mov	r0, r4
   14a44:	bl	111bc <dcgettext@plt>
   14a48:	ldr	r1, [r5]
   14a4c:	bl	110fc <fputs_unlocked@plt>
   14a50:	mov	r2, #5
   14a54:	ldr	r1, [pc, #568]	; 14c94 <__assert_fail@plt+0x3850>
   14a58:	mov	r0, r4
   14a5c:	bl	111bc <dcgettext@plt>
   14a60:	ldr	r1, [r5]
   14a64:	bl	110fc <fputs_unlocked@plt>
   14a68:	ldr	lr, [pc, #552]	; 14c98 <__assert_fail@plt+0x3854>
   14a6c:	add	ip, sp, #4
   14a70:	ldm	lr!, {r0, r1, r2, r3}
   14a74:	stmia	ip!, {r0, r1, r2, r3}
   14a78:	ldm	lr!, {r0, r1, r2, r3}
   14a7c:	ldr	r6, [sp, #4]
   14a80:	stmia	ip!, {r0, r1, r2, r3}
   14a84:	cmp	r6, #0
   14a88:	ldm	lr!, {r0, r1, r2, r3}
   14a8c:	addeq	r5, sp, #4
   14a90:	stmia	ip!, {r0, r1, r2, r3}
   14a94:	ldm	lr, {r0, r1}
   14a98:	stm	ip, {r0, r1}
   14a9c:	beq	14acc <__assert_fail@plt+0x3688>
   14aa0:	ldr	r7, [pc, #500]	; 14c9c <__assert_fail@plt+0x3858>
   14aa4:	add	r5, sp, #4
   14aa8:	b	14ab8 <__assert_fail@plt+0x3674>
   14aac:	ldr	r6, [r5, #8]!
   14ab0:	cmp	r6, #0
   14ab4:	beq	14acc <__assert_fail@plt+0x3688>
   14ab8:	mov	r1, r6
   14abc:	mov	r0, r7
   14ac0:	bl	11120 <strcmp@plt>
   14ac4:	cmp	r0, #0
   14ac8:	bne	14aac <__assert_fail@plt+0x3668>
   14acc:	ldr	r5, [r5, #4]
   14ad0:	mov	r2, #5
   14ad4:	cmp	r5, #0
   14ad8:	ldr	r1, [pc, #448]	; 14ca0 <__assert_fail@plt+0x385c>
   14adc:	beq	14b84 <__assert_fail@plt+0x3740>
   14ae0:	mov	r0, #0
   14ae4:	bl	111bc <dcgettext@plt>
   14ae8:	ldr	r3, [pc, #436]	; 14ca4 <__assert_fail@plt+0x3860>
   14aec:	ldr	r2, [pc, #436]	; 14ca8 <__assert_fail@plt+0x3864>
   14af0:	mov	r1, r0
   14af4:	mov	r0, #1
   14af8:	bl	11360 <__printf_chk@plt>
   14afc:	mov	r1, #0
   14b00:	mov	r0, #5
   14b04:	bl	113c0 <setlocale@plt>
   14b08:	cmp	r0, #0
   14b0c:	ldreq	r6, [pc, #392]	; 14c9c <__assert_fail@plt+0x3858>
   14b10:	beq	14b2c <__assert_fail@plt+0x36e8>
   14b14:	mov	r2, #3
   14b18:	ldr	r1, [pc, #396]	; 14cac <__assert_fail@plt+0x3868>
   14b1c:	bl	11420 <strncmp@plt>
   14b20:	ldr	r6, [pc, #372]	; 14c9c <__assert_fail@plt+0x3858>
   14b24:	cmp	r0, #0
   14b28:	bne	14c14 <__assert_fail@plt+0x37d0>
   14b2c:	mov	r2, #5
   14b30:	ldr	r1, [pc, #376]	; 14cb0 <__assert_fail@plt+0x386c>
   14b34:	mov	r0, #0
   14b38:	bl	111bc <dcgettext@plt>
   14b3c:	ldr	r3, [pc, #344]	; 14c9c <__assert_fail@plt+0x3858>
   14b40:	ldr	r2, [pc, #348]	; 14ca4 <__assert_fail@plt+0x3860>
   14b44:	mov	r1, r0
   14b48:	mov	r0, #1
   14b4c:	bl	11360 <__printf_chk@plt>
   14b50:	mov	r2, #5
   14b54:	ldr	r1, [pc, #344]	; 14cb4 <__assert_fail@plt+0x3870>
   14b58:	mov	r0, #0
   14b5c:	bl	111bc <dcgettext@plt>
   14b60:	ldr	r2, [pc, #336]	; 14cb8 <__assert_fail@plt+0x3874>
   14b64:	cmp	r5, r6
   14b68:	ldr	r3, [pc, #332]	; 14cbc <__assert_fail@plt+0x3878>
   14b6c:	movne	r3, r2
   14b70:	mov	r1, r0
   14b74:	mov	r2, r5
   14b78:	mov	r0, #1
   14b7c:	bl	11360 <__printf_chk@plt>
   14b80:	b	1488c <__assert_fail@plt+0x3448>
   14b84:	mov	r0, r5
   14b88:	bl	111bc <dcgettext@plt>
   14b8c:	ldr	r3, [pc, #272]	; 14ca4 <__assert_fail@plt+0x3860>
   14b90:	ldr	r2, [pc, #272]	; 14ca8 <__assert_fail@plt+0x3864>
   14b94:	mov	r1, r0
   14b98:	mov	r0, #1
   14b9c:	bl	11360 <__printf_chk@plt>
   14ba0:	mov	r1, r5
   14ba4:	mov	r0, #5
   14ba8:	bl	113c0 <setlocale@plt>
   14bac:	cmp	r0, #0
   14bb0:	beq	14bc8 <__assert_fail@plt+0x3784>
   14bb4:	mov	r2, #3
   14bb8:	ldr	r1, [pc, #236]	; 14cac <__assert_fail@plt+0x3868>
   14bbc:	bl	11420 <strncmp@plt>
   14bc0:	cmp	r0, #0
   14bc4:	bne	14c0c <__assert_fail@plt+0x37c8>
   14bc8:	mov	r2, #5
   14bcc:	ldr	r1, [pc, #220]	; 14cb0 <__assert_fail@plt+0x386c>
   14bd0:	mov	r0, #0
   14bd4:	bl	111bc <dcgettext@plt>
   14bd8:	ldr	r3, [pc, #188]	; 14c9c <__assert_fail@plt+0x3858>
   14bdc:	ldr	r2, [pc, #192]	; 14ca4 <__assert_fail@plt+0x3860>
   14be0:	mov	r5, r3
   14be4:	mov	r1, r0
   14be8:	mov	r0, #1
   14bec:	bl	11360 <__printf_chk@plt>
   14bf0:	ldr	r1, [pc, #188]	; 14cb4 <__assert_fail@plt+0x3870>
   14bf4:	mov	r2, #5
   14bf8:	mov	r0, #0
   14bfc:	bl	111bc <dcgettext@plt>
   14c00:	ldr	r3, [pc, #180]	; 14cbc <__assert_fail@plt+0x3878>
   14c04:	mov	r1, r0
   14c08:	b	14b74 <__assert_fail@plt+0x3730>
   14c0c:	ldr	r6, [pc, #136]	; 14c9c <__assert_fail@plt+0x3858>
   14c10:	mov	r5, r6
   14c14:	mov	r2, #5
   14c18:	ldr	r1, [pc, #160]	; 14cc0 <__assert_fail@plt+0x387c>
   14c1c:	mov	r0, #0
   14c20:	bl	111bc <dcgettext@plt>
   14c24:	ldr	r2, [pc, #112]	; 14c9c <__assert_fail@plt+0x3858>
   14c28:	mov	r1, r0
   14c2c:	mov	r0, #1
   14c30:	bl	11360 <__printf_chk@plt>
   14c34:	b	14b2c <__assert_fail@plt+0x36e8>
   14c38:	andeq	lr, r2, r8, lsl #30
   14c3c:	ldrdeq	pc, [r2], -r8
   14c40:	strdeq	ip, [r1], -r4
   14c44:			; <UNDEFINED> instruction: 0x0002f2b4
   14c48:	andeq	ip, r1, ip, lsl r8
   14c4c:	andeq	pc, r2, r4, ror #3
   14c50:	andeq	ip, r1, r0, asr #16
   14c54:	andeq	ip, r1, r0, ror r8
   14c58:	andeq	ip, r1, r8, lsr #17
   14c5c:	strdeq	ip, [r1], -r4
   14c60:	andeq	ip, r1, r4, asr #20
   14c64:	andeq	ip, r1, r4, asr fp
   14c68:	andeq	ip, r1, r4, ror #25
   14c6c:	muleq	r1, r0, lr
   14c70:	andeq	ip, r1, ip, ror #30
   14c74:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14c78:	andeq	sp, r1, r8, asr r1
   14c7c:	andeq	sp, r1, r8, asr r2
   14c80:	andeq	sp, r1, r0, lsr #7
   14c84:	andeq	sp, r1, ip, lsl #9
   14c88:	strdeq	sp, [r1], -r4
   14c8c:	andeq	sp, r1, r8, lsl #13
   14c90:	andeq	sp, r1, r0, ror #14
   14c94:	muleq	r1, r0, r7
   14c98:	muleq	r1, r8, r6
   14c9c:	strdeq	ip, [r1], -r0
   14ca0:	andeq	sp, r1, r8, asr #15
   14ca4:	andeq	sp, r1, r0, ror #15
   14ca8:	andeq	sp, r1, r8, lsl #16
   14cac:	andeq	sp, r1, r8, lsl r8
   14cb0:	andeq	sp, r1, r4, ror #16
   14cb4:	andeq	sp, r1, r4, lsl #17
   14cb8:	andeq	ip, r1, r8, ror #14
   14cbc:	andeq	sp, r1, r8, lsl #22
   14cc0:	andeq	sp, r1, ip, lsl r8
   14cc4:	push	{r4, r5, r6, r7, lr}
   14cc8:	mov	r4, r0
   14ccc:	ldrb	r0, [r0]
   14cd0:	ldr	r5, [pc, #196]	; 14d9c <__assert_fail@plt+0x3958>
   14cd4:	mov	r7, r1
   14cd8:	sub	ip, r0, #48	; 0x30
   14cdc:	cmp	ip, #9
   14ce0:	ldr	r1, [r5]
   14ce4:	strbhi	r0, [r2]
   14ce8:	ldrbhi	r0, [r4, #1]
   14cec:	sub	sp, sp, #20
   14cf0:	addhi	r4, r4, #1
   14cf4:	cmp	r0, #0
   14cf8:	mov	r6, r3
   14cfc:	str	r1, [sp, #12]
   14d00:	bne	14d1c <__assert_fail@plt+0x38d8>
   14d04:	ldr	r2, [sp, #12]
   14d08:	ldr	r3, [r5]
   14d0c:	cmp	r2, r3
   14d10:	bne	14d54 <__assert_fail@plt+0x3910>
   14d14:	add	sp, sp, #20
   14d18:	pop	{r4, r5, r6, r7, pc}
   14d1c:	ldr	r2, [pc, #124]	; 14da0 <__assert_fail@plt+0x395c>
   14d20:	add	r3, sp, #8
   14d24:	str	r2, [sp]
   14d28:	mov	r1, #0
   14d2c:	mov	r2, #10
   14d30:	mov	r0, r4
   14d34:	bl	1a1c4 <__assert_fail@plt+0x8d80>
   14d38:	cmp	r0, #0
   14d3c:	bne	14d58 <__assert_fail@plt+0x3914>
   14d40:	ldr	r3, [sp, #8]
   14d44:	cmp	r3, #0
   14d48:	ble	14d58 <__assert_fail@plt+0x3914>
   14d4c:	str	r3, [r6]
   14d50:	b	14d04 <__assert_fail@plt+0x38c0>
   14d54:	bl	111c8 <__stack_chk_fail@plt>
   14d58:	bl	11330 <__errno_location@plt>
   14d5c:	mov	r2, #5
   14d60:	ldr	r1, [pc, #60]	; 14da4 <__assert_fail@plt+0x3960>
   14d64:	ldr	r6, [r0]
   14d68:	mov	r0, #0
   14d6c:	bl	111bc <dcgettext@plt>
   14d70:	mov	r5, r0
   14d74:	mov	r0, r4
   14d78:	bl	18d50 <__assert_fail@plt+0x790c>
   14d7c:	mov	r1, r6
   14d80:	mov	r2, r5
   14d84:	mov	r3, r7
   14d88:	str	r0, [sp]
   14d8c:	mov	r0, #0
   14d90:	bl	11270 <error@plt>
   14d94:	mov	r0, #1
   14d98:	bl	14840 <__assert_fail@plt+0x33fc>
   14d9c:	andeq	lr, r2, r8, lsl #30
   14da0:	andeq	ip, r1, r8, ror #14
   14da4:			; <UNDEFINED> instruction: 0x0001d8b8
   14da8:	ldr	r3, [pc, #4]	; 14db4 <__assert_fail@plt+0x3970>
   14dac:	str	r0, [r3]
   14db0:	bx	lr
   14db4:	andeq	pc, r2, ip, lsr #5
   14db8:	ldr	r3, [pc, #4]	; 14dc4 <__assert_fail@plt+0x3980>
   14dbc:	strb	r0, [r3, #4]
   14dc0:	bx	lr
   14dc4:	andeq	pc, r2, ip, lsr #5
   14dc8:	ldr	r3, [pc, #180]	; 14e84 <__assert_fail@plt+0x3a40>
   14dcc:	push	{r4, r5, r6, lr}
   14dd0:	sub	sp, sp, #8
   14dd4:	ldr	r0, [r3]
   14dd8:	bl	1bd24 <__assert_fail@plt+0xa8e0>
   14ddc:	cmp	r0, #0
   14de0:	beq	14e08 <__assert_fail@plt+0x39c4>
   14de4:	bl	11330 <__errno_location@plt>
   14de8:	ldr	r5, [pc, #152]	; 14e88 <__assert_fail@plt+0x3a44>
   14dec:	ldrb	r3, [r5, #4]
   14df0:	cmp	r3, #0
   14df4:	mov	r4, r0
   14df8:	beq	14e24 <__assert_fail@plt+0x39e0>
   14dfc:	ldr	r3, [r0]
   14e00:	cmp	r3, #32
   14e04:	bne	14e24 <__assert_fail@plt+0x39e0>
   14e08:	ldr	r3, [pc, #124]	; 14e8c <__assert_fail@plt+0x3a48>
   14e0c:	ldr	r0, [r3]
   14e10:	bl	1bd24 <__assert_fail@plt+0xa8e0>
   14e14:	cmp	r0, #0
   14e18:	bne	14e64 <__assert_fail@plt+0x3a20>
   14e1c:	add	sp, sp, #8
   14e20:	pop	{r4, r5, r6, pc}
   14e24:	mov	r2, #5
   14e28:	ldr	r1, [pc, #96]	; 14e90 <__assert_fail@plt+0x3a4c>
   14e2c:	mov	r0, #0
   14e30:	bl	111bc <dcgettext@plt>
   14e34:	mov	r6, r0
   14e38:	ldr	r0, [r5]
   14e3c:	cmp	r0, #0
   14e40:	beq	14e70 <__assert_fail@plt+0x3a2c>
   14e44:	ldr	r4, [r4]
   14e48:	bl	18b70 <__assert_fail@plt+0x772c>
   14e4c:	mov	r1, r4
   14e50:	str	r6, [sp]
   14e54:	ldr	r2, [pc, #56]	; 14e94 <__assert_fail@plt+0x3a50>
   14e58:	mov	r3, r0
   14e5c:	mov	r0, #0
   14e60:	bl	11270 <error@plt>
   14e64:	ldr	r3, [pc, #44]	; 14e98 <__assert_fail@plt+0x3a54>
   14e68:	ldr	r0, [r3]
   14e6c:	bl	11180 <_exit@plt>
   14e70:	mov	r3, r6
   14e74:	ldr	r1, [r4]
   14e78:	ldr	r2, [pc, #28]	; 14e9c <__assert_fail@plt+0x3a58>
   14e7c:	bl	11270 <error@plt>
   14e80:	b	14e64 <__assert_fail@plt+0x3a20>
   14e84:	andeq	pc, r2, r4, ror #3
   14e88:	andeq	pc, r2, ip, lsr #5
   14e8c:	ldrdeq	pc, [r2], -r8
   14e90:			; <UNDEFINED> instruction: 0x0001dcb0
   14e94:			; <UNDEFINED> instruction: 0x0001dcbc
   14e98:	andeq	pc, r2, r4, lsl #3
   14e9c:	andeq	sp, r1, r0, asr #25
   14ea0:	b	11138 <posix_fadvise64@plt>
   14ea4:	cmp	r0, #0
   14ea8:	bxeq	lr
   14eac:	push	{r4, lr}
   14eb0:	sub	sp, sp, #16
   14eb4:	mov	r4, r1
   14eb8:	bl	1136c <fileno@plt>
   14ebc:	mov	r2, #0
   14ec0:	mov	r3, #0
   14ec4:	str	r4, [sp, #8]
   14ec8:	strd	r2, [sp]
   14ecc:	bl	11138 <posix_fadvise64@plt>
   14ed0:	add	sp, sp, #16
   14ed4:	pop	{r4, pc}
   14ed8:	push	{r4, r5, r6, lr}
   14edc:	mov	r5, r1
   14ee0:	bl	113fc <fopen64@plt>
   14ee4:	subs	r4, r0, #0
   14ee8:	beq	14ef8 <__assert_fail@plt+0x3ab4>
   14eec:	bl	1136c <fileno@plt>
   14ef0:	cmp	r0, #2
   14ef4:	bls	14f00 <__assert_fail@plt+0x3abc>
   14ef8:	mov	r0, r4
   14efc:	pop	{r4, r5, r6, pc}
   14f00:	bl	18d68 <__assert_fail@plt+0x7924>
   14f04:	subs	r6, r0, #0
   14f08:	blt	14f50 <__assert_fail@plt+0x3b0c>
   14f0c:	mov	r0, r4
   14f10:	bl	1b4b0 <__assert_fail@plt+0xa06c>
   14f14:	cmp	r0, #0
   14f18:	bne	14f30 <__assert_fail@plt+0x3aec>
   14f1c:	mov	r1, r5
   14f20:	mov	r0, r6
   14f24:	bl	110e4 <fdopen@plt>
   14f28:	subs	r4, r0, #0
   14f2c:	bne	14ef8 <__assert_fail@plt+0x3ab4>
   14f30:	bl	11330 <__errno_location@plt>
   14f34:	mov	r4, #0
   14f38:	mov	r5, r0
   14f3c:	mov	r0, r6
   14f40:	ldr	r6, [r5]
   14f44:	bl	11438 <close@plt>
   14f48:	str	r6, [r5]
   14f4c:	b	14ef8 <__assert_fail@plt+0x3ab4>
   14f50:	bl	11330 <__errno_location@plt>
   14f54:	mov	r5, r0
   14f58:	mov	r0, r4
   14f5c:	ldr	r6, [r5]
   14f60:	mov	r4, #0
   14f64:	bl	1b4b0 <__assert_fail@plt+0xa06c>
   14f68:	str	r6, [r5]
   14f6c:	b	14ef8 <__assert_fail@plt+0x3ab4>
   14f70:	push	{r4, r5, lr}
   14f74:	sub	sp, sp, #20
   14f78:	ldr	r4, [pc, #92]	; 14fdc <__assert_fail@plt+0x3b98>
   14f7c:	mov	r1, r0
   14f80:	mov	r5, r0
   14f84:	ldr	r3, [r4]
   14f88:	mov	r0, #0
   14f8c:	str	r3, [sp, #12]
   14f90:	bl	11174 <clock_gettime@plt>
   14f94:	cmp	r0, #0
   14f98:	beq	14fc0 <__assert_fail@plt+0x3b7c>
   14f9c:	mov	r1, #0
   14fa0:	add	r0, sp, #4
   14fa4:	bl	1124c <gettimeofday@plt>
   14fa8:	ldmib	sp, {r1, r3}
   14fac:	rsb	r2, r3, r3, lsl #5
   14fb0:	str	r1, [r5]
   14fb4:	add	r3, r3, r2, lsl #2
   14fb8:	lsl	r3, r3, #3
   14fbc:	str	r3, [r5, #4]
   14fc0:	ldr	r2, [sp, #12]
   14fc4:	ldr	r3, [r4]
   14fc8:	cmp	r2, r3
   14fcc:	bne	14fd8 <__assert_fail@plt+0x3b94>
   14fd0:	add	sp, sp, #20
   14fd4:	pop	{r4, r5, pc}
   14fd8:	bl	111c8 <__stack_chk_fail@plt>
   14fdc:	andeq	lr, r2, r8, lsl #30
   14fe0:	push	{r4, lr}
   14fe4:	mov	r1, #0
   14fe8:	bl	113c0 <setlocale@plt>
   14fec:	subs	r4, r0, #0
   14ff0:	beq	1501c <__assert_fail@plt+0x3bd8>
   14ff4:	ldr	r1, [pc, #40]	; 15024 <__assert_fail@plt+0x3be0>
   14ff8:	bl	11120 <strcmp@plt>
   14ffc:	cmp	r0, #0
   15000:	popeq	{r4, pc}
   15004:	mov	r0, r4
   15008:	ldr	r1, [pc, #24]	; 15028 <__assert_fail@plt+0x3be4>
   1500c:	bl	11120 <strcmp@plt>
   15010:	adds	r0, r0, #0
   15014:	movne	r0, #1
   15018:	pop	{r4, pc}
   1501c:	mov	r0, #1
   15020:	pop	{r4, pc}
   15024:	andeq	sp, r1, r4, asr #25
   15028:	andeq	sp, r1, r8, asr #25
   1502c:	cmp	r0, #0
   15030:	sbcs	r3, r1, #0
   15034:	mov	r3, #0
   15038:	push	{r4, r5, r6, r7, r8, lr}
   1503c:	mov	r4, r0
   15040:	mov	r5, r1
   15044:	strb	r3, [r2, #20]
   15048:	add	r6, r2, #20
   1504c:	blt	1509c <__assert_fail@plt+0x3c58>
   15050:	mov	r0, r4
   15054:	mov	r1, r5
   15058:	mov	r2, #10
   1505c:	mov	r3, #0
   15060:	bl	1c218 <__assert_fail@plt+0xadd4>
   15064:	mov	r0, r4
   15068:	mov	r1, r5
   1506c:	mov	r3, #0
   15070:	add	r2, r2, #48	; 0x30
   15074:	strb	r2, [r6, #-1]!
   15078:	mov	r2, #10
   1507c:	bl	1c218 <__assert_fail@plt+0xadd4>
   15080:	mov	r4, r0
   15084:	mov	r5, r1
   15088:	orrs	r3, r4, r5
   1508c:	bne	15050 <__assert_fail@plt+0x3c0c>
   15090:	mov	r0, r6
   15094:	pop	{r4, r5, r6, r7, r8, pc}
   15098:	mov	r6, r7
   1509c:	mov	r0, r4
   150a0:	mov	r1, r5
   150a4:	mov	r2, #10
   150a8:	mov	r3, #0
   150ac:	bl	1c218 <__assert_fail@plt+0xadd4>
   150b0:	mov	r0, r4
   150b4:	mov	r1, r5
   150b8:	mov	r3, #0
   150bc:	sub	r7, r6, #1
   150c0:	rsb	r2, r2, #48	; 0x30
   150c4:	strb	r2, [r6, #-1]
   150c8:	mov	r2, #10
   150cc:	bl	1c218 <__assert_fail@plt+0xadd4>
   150d0:	mov	r4, r0
   150d4:	mov	r5, r1
   150d8:	orrs	r3, r4, r5
   150dc:	bne	15098 <__assert_fail@plt+0x3c54>
   150e0:	mov	r3, #45	; 0x2d
   150e4:	sub	r6, r6, #2
   150e8:	strb	r3, [r7, #-1]
   150ec:	mov	r0, r6
   150f0:	pop	{r4, r5, r6, r7, r8, pc}
   150f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f8:	sub	sp, sp, #20
   150fc:	ldr	sl, [pc, #444]	; 152c0 <__assert_fail@plt+0x3e7c>
   15100:	mov	r4, r0
   15104:	add	r7, r0, r1
   15108:	ldr	r3, [sl]
   1510c:	mov	r9, r2
   15110:	str	r3, [sp, #12]
   15114:	bl	11240 <__ctype_get_mb_cur_max@plt>
   15118:	cmp	r0, #1
   1511c:	bls	15248 <__assert_fail@plt+0x3e04>
   15120:	cmp	r4, r7
   15124:	mov	r6, #0
   15128:	bcs	1522c <__assert_fail@plt+0x3de8>
   1512c:	and	r8, r9, #2
   15130:	b	15158 <__assert_fail@plt+0x3d14>
   15134:	cmp	r3, #37	; 0x25
   15138:	bcs	15148 <__assert_fail@plt+0x3d04>
   1513c:	sub	r3, r3, #32
   15140:	cmp	r3, #3
   15144:	bhi	15180 <__assert_fail@plt+0x3d3c>
   15148:	add	r4, r4, #1
   1514c:	add	r6, r6, #1
   15150:	cmp	r4, r7
   15154:	bcs	1522c <__assert_fail@plt+0x3de8>
   15158:	ldrb	r3, [r4]
   1515c:	cmp	r3, #63	; 0x3f
   15160:	bls	15134 <__assert_fail@plt+0x3cf0>
   15164:	cmp	r3, #65	; 0x41
   15168:	bcc	15180 <__assert_fail@plt+0x3d3c>
   1516c:	cmp	r3, #95	; 0x5f
   15170:	bls	15148 <__assert_fail@plt+0x3d04>
   15174:	sub	r3, r3, #97	; 0x61
   15178:	cmp	r3, #29
   1517c:	bls	15148 <__assert_fail@plt+0x3d04>
   15180:	mov	r3, #0
   15184:	mvn	fp, #-2147483648	; 0x80000000
   15188:	str	r3, [sp, #4]
   1518c:	str	r3, [sp, #8]
   15190:	b	151b8 <__assert_fail@plt+0x3d74>
   15194:	sub	r3, fp, r6
   15198:	cmp	r3, r0
   1519c:	blt	152b4 <__assert_fail@plt+0x3e70>
   151a0:	add	r6, r6, r0
   151a4:	add	r0, sp, #4
   151a8:	bl	111a4 <mbsinit@plt>
   151ac:	add	r4, r4, r5
   151b0:	cmp	r0, #0
   151b4:	bne	15150 <__assert_fail@plt+0x3d0c>
   151b8:	add	r3, sp, #4
   151bc:	sub	r2, r7, r4
   151c0:	mov	r1, r4
   151c4:	mov	r0, sp
   151c8:	bl	1b79c <__assert_fail@plt+0xa358>
   151cc:	cmn	r0, #1
   151d0:	mov	r5, r0
   151d4:	beq	15220 <__assert_fail@plt+0x3ddc>
   151d8:	cmn	r0, #2
   151dc:	beq	152a0 <__assert_fail@plt+0x3e5c>
   151e0:	cmp	r0, #0
   151e4:	ldr	r0, [sp]
   151e8:	moveq	r5, #1
   151ec:	bl	1115c <wcwidth@plt>
   151f0:	cmp	r0, #0
   151f4:	bge	15194 <__assert_fail@plt+0x3d50>
   151f8:	cmp	r8, #0
   151fc:	bne	15228 <__assert_fail@plt+0x3de4>
   15200:	ldr	r0, [sp]
   15204:	bl	111f8 <iswcntrl@plt>
   15208:	cmp	r0, #0
   1520c:	bne	151a4 <__assert_fail@plt+0x3d60>
   15210:	cmn	r6, #-2147483647	; 0x80000001
   15214:	beq	152b4 <__assert_fail@plt+0x3e70>
   15218:	add	r6, r6, #1
   1521c:	b	151a4 <__assert_fail@plt+0x3d60>
   15220:	tst	r9, #1
   15224:	beq	15148 <__assert_fail@plt+0x3d04>
   15228:	mvn	r6, #0
   1522c:	ldr	r2, [sp, #12]
   15230:	ldr	r3, [sl]
   15234:	mov	r0, r6
   15238:	cmp	r2, r3
   1523c:	bne	152bc <__assert_fail@plt+0x3e78>
   15240:	add	sp, sp, #20
   15244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15248:	cmp	r4, r7
   1524c:	movcs	r6, #0
   15250:	bcs	1522c <__assert_fail@plt+0x3de8>
   15254:	bl	112e8 <__ctype_b_loc@plt>
   15258:	mov	r6, #0
   1525c:	and	r9, r9, #2
   15260:	ldr	r2, [r0]
   15264:	ldrb	r3, [r4], #1
   15268:	lsl	r3, r3, #1
   1526c:	ldrh	r3, [r2, r3]
   15270:	tst	r3, #16384	; 0x4000
   15274:	bne	15288 <__assert_fail@plt+0x3e44>
   15278:	cmp	r9, #0
   1527c:	bne	15228 <__assert_fail@plt+0x3de4>
   15280:	tst	r3, #2
   15284:	bne	15294 <__assert_fail@plt+0x3e50>
   15288:	cmn	r6, #-2147483647	; 0x80000001
   1528c:	beq	1522c <__assert_fail@plt+0x3de8>
   15290:	add	r6, r6, #1
   15294:	cmp	r7, r4
   15298:	bne	15264 <__assert_fail@plt+0x3e20>
   1529c:	b	1522c <__assert_fail@plt+0x3de8>
   152a0:	tst	r9, #1
   152a4:	bne	15228 <__assert_fail@plt+0x3de4>
   152a8:	add	r6, r6, #1
   152ac:	mov	r4, r7
   152b0:	b	15150 <__assert_fail@plt+0x3d0c>
   152b4:	mvn	r6, #-2147483648	; 0x80000000
   152b8:	b	1522c <__assert_fail@plt+0x3de8>
   152bc:	bl	111c8 <__stack_chk_fail@plt>
   152c0:	andeq	lr, r2, r8, lsl #30
   152c4:	push	{r4, r5, r6, lr}
   152c8:	mov	r5, r1
   152cc:	mov	r4, r0
   152d0:	bl	11300 <strlen@plt>
   152d4:	mov	r2, r5
   152d8:	mov	r1, r0
   152dc:	mov	r0, r4
   152e0:	pop	{r4, r5, r6, lr}
   152e4:	b	150f4 <__assert_fail@plt+0x3cb0>
   152e8:	push	{r4, r5, r6, lr}
   152ec:	subs	r4, r2, #0
   152f0:	mov	r6, r0
   152f4:	beq	15320 <__assert_fail@plt+0x3edc>
   152f8:	mov	r5, r1
   152fc:	bl	112b8 <__ctype_tolower_loc@plt>
   15300:	add	r3, r5, r4
   15304:	add	r2, r6, r4
   15308:	ldrb	lr, [r3, #-1]!
   1530c:	ldr	ip, [r0]
   15310:	cmp	r5, r3
   15314:	ldr	ip, [ip, lr, lsl #2]
   15318:	strb	ip, [r2, #-1]!
   1531c:	bne	15308 <__assert_fail@plt+0x3ec4>
   15320:	mov	r0, r6
   15324:	pop	{r4, r5, r6, pc}
   15328:	push	{r4, r5, r6, lr}
   1532c:	subs	r4, r2, #0
   15330:	mov	r6, r0
   15334:	beq	15360 <__assert_fail@plt+0x3f1c>
   15338:	mov	r5, r1
   1533c:	bl	112c4 <__ctype_toupper_loc@plt>
   15340:	add	r3, r5, r4
   15344:	add	r2, r6, r4
   15348:	ldrb	lr, [r3, #-1]!
   1534c:	ldr	ip, [r0]
   15350:	cmp	r5, r3
   15354:	ldr	ip, [ip, lr, lsl #2]
   15358:	strb	ip, [r2, #-1]!
   1535c:	bne	15348 <__assert_fail@plt+0x3f04>
   15360:	mov	r0, r6
   15364:	pop	{r4, r5, r6, pc}
   15368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1536c:	sub	sp, sp, #1136	; 0x470
   15370:	sub	sp, sp, #12
   15374:	ldr	r7, [r3, #40]	; 0x28
   15378:	ldr	r8, [r3, #8]
   1537c:	str	r3, [sp, #28]
   15380:	ldr	r3, [pc, #4012]	; 16334 <__assert_fail@plt+0x4ef0>
   15384:	ldr	ip, [pc, #4012]	; 16338 <__assert_fail@plt+0x4ef4>
   15388:	cmp	r7, #0
   1538c:	ldr	r3, [r3]
   15390:	moveq	r7, ip
   15394:	str	r3, [sp, #1140]	; 0x474
   15398:	ldrb	r3, [sp, #1184]	; 0x4a0
   1539c:	cmp	r8, #12
   153a0:	mov	r9, r0
   153a4:	str	r3, [sp, #24]
   153a8:	ldr	r3, [sp, #1188]	; 0x4a4
   153ac:	str	r1, [sp, #16]
   153b0:	str	r3, [sp, #36]	; 0x24
   153b4:	ldr	r3, [sp, #1192]	; 0x4a8
   153b8:	mov	r5, r2
   153bc:	str	r3, [sp, #32]
   153c0:	subgt	r8, r8, #12
   153c4:	bgt	153d0 <__assert_fail@plt+0x3f8c>
   153c8:	cmp	r8, #0
   153cc:	moveq	r8, #12
   153d0:	ldrb	r3, [r5]
   153d4:	cmp	r3, #0
   153d8:	beq	166d4 <__assert_fail@plt+0x5290>
   153dc:	mov	fp, #0
   153e0:	str	r8, [sp, #44]	; 0x2c
   153e4:	str	r7, [sp, #40]	; 0x28
   153e8:	cmp	r3, #37	; 0x25
   153ec:	beq	1546c <__assert_fail@plt+0x4028>
   153f0:	ldr	r2, [sp, #16]
   153f4:	sub	r2, r2, fp
   153f8:	cmp	r2, #1
   153fc:	bls	15444 <__assert_fail@plt+0x4000>
   15400:	add	fp, fp, #1
   15404:	cmp	r9, #0
   15408:	strbne	r3, [r9], #1
   1540c:	ldrb	r3, [r5, #1]
   15410:	add	r5, r5, #1
   15414:	cmp	r3, #0
   15418:	bne	153e8 <__assert_fail@plt+0x3fa4>
   1541c:	ldr	r3, [sp, #16]
   15420:	cmp	r9, #0
   15424:	cmpne	r3, #0
   15428:	movne	r3, #0
   1542c:	strbne	r3, [r9]
   15430:	b	15448 <__assert_fail@plt+0x4004>
   15434:	cmp	sl, #95	; 0x5f
   15438:	beq	16760 <__assert_fail@plt+0x531c>
   1543c:	cmp	r3, r2
   15440:	bcc	15f88 <__assert_fail@plt+0x4b44>
   15444:	mov	fp, #0
   15448:	ldr	r3, [pc, #3812]	; 16334 <__assert_fail@plt+0x4ef0>
   1544c:	ldr	r2, [sp, #1140]	; 0x474
   15450:	mov	r0, fp
   15454:	ldr	r3, [r3]
   15458:	cmp	r2, r3
   1545c:	bne	16a6c <__assert_fail@plt+0x5628>
   15460:	add	sp, sp, #1136	; 0x470
   15464:	add	sp, sp, #12
   15468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1546c:	mov	r8, #0
   15470:	ldr	r3, [sp, #24]
   15474:	mov	sl, r8
   15478:	str	r3, [sp, #20]
   1547c:	ldrb	r4, [r5, #1]!
   15480:	cmp	r4, #48	; 0x30
   15484:	mov	r7, r4
   15488:	beq	156d8 <__assert_fail@plt+0x4294>
   1548c:	bhi	156c0 <__assert_fail@plt+0x427c>
   15490:	cmp	r4, #35	; 0x23
   15494:	moveq	r8, #1
   15498:	beq	1547c <__assert_fail@plt+0x4038>
   1549c:	cmp	r4, #45	; 0x2d
   154a0:	beq	156d8 <__assert_fail@plt+0x4294>
   154a4:	sub	r3, r4, #48	; 0x30
   154a8:	cmp	r3, #9
   154ac:	mvnhi	r6, #0
   154b0:	bls	156ec <__assert_fail@plt+0x42a8>
   154b4:	cmp	r4, #69	; 0x45
   154b8:	beq	156e0 <__assert_fail@plt+0x429c>
   154bc:	cmp	r4, #79	; 0x4f
   154c0:	movne	r7, #0
   154c4:	beq	156e0 <__assert_fail@plt+0x429c>
   154c8:	cmp	r4, #122	; 0x7a
   154cc:	ldrls	pc, [pc, r4, lsl #2]
   154d0:	b	15aa8 <__assert_fail@plt+0x4664>
   154d4:	andeq	r6, r1, r8, lsr #5
   154d8:	andeq	r5, r1, r8, lsr #21
   154dc:	andeq	r5, r1, r8, lsr #21
   154e0:	andeq	r5, r1, r8, lsr #21
   154e4:	andeq	r5, r1, r8, lsr #21
   154e8:	andeq	r5, r1, r8, lsr #21
   154ec:	andeq	r5, r1, r8, lsr #21
   154f0:	andeq	r5, r1, r8, lsr #21
   154f4:	andeq	r5, r1, r8, lsr #21
   154f8:	andeq	r5, r1, r8, lsr #21
   154fc:	andeq	r5, r1, r8, lsr #21
   15500:	andeq	r5, r1, r8, lsr #21
   15504:	andeq	r5, r1, r8, lsr #21
   15508:	andeq	r5, r1, r8, lsr #21
   1550c:	andeq	r5, r1, r8, lsr #21
   15510:	andeq	r5, r1, r8, lsr #21
   15514:	andeq	r5, r1, r8, lsr #21
   15518:	andeq	r5, r1, r8, lsr #21
   1551c:	andeq	r5, r1, r8, lsr #21
   15520:	andeq	r5, r1, r8, lsr #21
   15524:	andeq	r5, r1, r8, lsr #21
   15528:	andeq	r5, r1, r8, lsr #21
   1552c:	andeq	r5, r1, r8, lsr #21
   15530:	andeq	r5, r1, r8, lsr #21
   15534:	andeq	r5, r1, r8, lsr #21
   15538:	andeq	r5, r1, r8, lsr #21
   1553c:	andeq	r5, r1, r8, lsr #21
   15540:	andeq	r5, r1, r8, lsr #21
   15544:	andeq	r5, r1, r8, lsr #21
   15548:	andeq	r5, r1, r8, lsr #21
   1554c:	andeq	r5, r1, r8, lsr #21
   15550:	andeq	r5, r1, r8, lsr #21
   15554:	andeq	r5, r1, r8, lsr #21
   15558:	andeq	r5, r1, r8, lsr #21
   1555c:	andeq	r5, r1, r8, lsr #21
   15560:	andeq	r5, r1, r8, lsr #21
   15564:	andeq	r5, r1, r8, lsr #21
   15568:	ldrdeq	r6, [r1], -ip
   1556c:	andeq	r5, r1, r8, lsr #21
   15570:	andeq	r5, r1, r8, lsr #21
   15574:	andeq	r5, r1, r8, lsr #21
   15578:	andeq	r5, r1, r8, lsr #21
   1557c:	andeq	r5, r1, r8, lsr #21
   15580:	andeq	r5, r1, r8, lsr #21
   15584:	andeq	r5, r1, r8, lsr #21
   15588:	andeq	r5, r1, r8, lsr #21
   1558c:	andeq	r5, r1, r8, lsr #21
   15590:	andeq	r5, r1, r8, lsr #21
   15594:	andeq	r5, r1, r8, lsr #21
   15598:	andeq	r5, r1, r8, lsr #21
   1559c:	andeq	r5, r1, r8, lsr #21
   155a0:	andeq	r5, r1, r8, lsr #21
   155a4:	andeq	r5, r1, r8, lsr #21
   155a8:	andeq	r5, r1, r8, lsr #21
   155ac:	andeq	r5, r1, r8, lsr #21
   155b0:	andeq	r5, r1, r8, lsr #21
   155b4:	andeq	r5, r1, r8, lsr #21
   155b8:	andeq	r5, r1, r8, lsr #21
   155bc:	andeq	r6, r1, r0, asr #10
   155c0:	andeq	r5, r1, r8, lsr #21
   155c4:	andeq	r5, r1, r8, lsr #21
   155c8:	andeq	r5, r1, r8, lsr #21
   155cc:	andeq	r5, r1, r8, lsr #21
   155d0:	andeq	r5, r1, r8, lsr #21
   155d4:	andeq	r5, r1, r8, lsr #21
   155d8:	andeq	r5, r1, r0, ror #16
   155dc:	andeq	r6, r1, r0, lsl #8
   155e0:	andeq	r6, r1, r4, lsr #8
   155e4:	andeq	r6, r1, r0, asr #1
   155e8:	andeq	r5, r1, r8, lsr #21
   155ec:	ldrdeq	r6, [r1], -r4
   155f0:	andeq	r6, r1, r8, ror #1
   155f4:	andeq	r6, r1, r0, asr r2
   155f8:	ldrdeq	r6, [r1], -ip
   155fc:	andeq	r5, r1, r8, lsr #21
   15600:	andeq	r5, r1, r8, lsr #21
   15604:	andeq	r5, r1, r8, lsr #21
   15608:	andeq	r6, r1, ip, ror #4
   1560c:	andeq	r6, r1, r8, lsl #5
   15610:	andeq	r5, r1, r8, lsr #21
   15614:	andeq	r6, r1, r8, ror #10
   15618:	andeq	r5, r1, r8, lsr #21
   1561c:	ldrdeq	r5, [r1], -ip
   15620:	andeq	r5, r1, ip, lsr #27
   15624:	andeq	r6, r1, r4, ror r5
   15628:	andeq	r5, r1, r8, asr #27
   1562c:	andeq	r6, r1, r8, ror #1
   15630:	andeq	r6, r1, ip, rrx
   15634:	andeq	r5, r1, ip, asr r7
   15638:	andeq	r5, r1, r0, lsl #28
   1563c:	andeq	r5, r1, ip, asr #31
   15640:	andeq	r5, r1, r8, lsr #21
   15644:	andeq	r5, r1, r8, lsr #21
   15648:	andeq	r5, r1, r8, lsr #21
   1564c:	andeq	r5, r1, r8, lsr #21
   15650:	andeq	r5, r1, r8, lsr #21
   15654:	andeq	r5, r1, r8, lsr #21
   15658:	andeq	r5, r1, r0, ror #16
   1565c:	muleq	r1, r0, sl
   15660:	andeq	r5, r1, ip, asr r7
   15664:	andeq	r5, r1, r0, asr #24
   15668:	andeq	r5, r1, ip, asr ip
   1566c:	andeq	r5, r1, r8, lsr #21
   15670:	andeq	r6, r1, r8, ror #1
   15674:	muleq	r1, r0, sl
   15678:	andeq	r5, r1, r8, lsr #21
   1567c:	andeq	r5, r1, r4, lsl #25
   15680:			; <UNDEFINED> instruction: 0x00015cb8
   15684:	andeq	r5, r1, ip, asr #25
   15688:	andeq	r6, r1, r8, lsr #9
   1568c:	andeq	r5, r1, r0, ror #23
   15690:	andeq	r5, r1, r8, lsr #21
   15694:	ldrdeq	r6, [r1], -r4
   15698:	strdeq	r6, [r1], -r4
   1569c:	andeq	r5, r1, r4, ror #14
   156a0:	andeq	r5, r1, r0, lsl r9
   156a4:	andeq	r6, r1, r8, ror r3
   156a8:	muleq	r1, r4, r8
   156ac:	andeq	r5, r1, r8, lsr #21
   156b0:	andeq	r6, r1, ip, lsl #9
   156b4:	andeq	r5, r1, ip, asr r7
   156b8:	andeq	r5, r1, r4, asr sl
   156bc:	andeq	r5, r1, ip, lsr fp
   156c0:	cmp	r4, #94	; 0x5e
   156c4:	moveq	r3, #1
   156c8:	streq	r3, [sp, #20]
   156cc:	beq	1547c <__assert_fail@plt+0x4038>
   156d0:	cmp	r4, #95	; 0x5f
   156d4:	bne	154a4 <__assert_fail@plt+0x4060>
   156d8:	mov	sl, r4
   156dc:	b	1547c <__assert_fail@plt+0x4038>
   156e0:	ldrb	r4, [r5, #1]
   156e4:	add	r5, r5, #1
   156e8:	b	154c8 <__assert_fail@plt+0x4084>
   156ec:	ldr	r0, [pc, #3144]	; 1633c <__assert_fail@plt+0x4ef8>
   156f0:	mov	r6, #0
   156f4:	mov	r3, r5
   156f8:	cmp	r6, r0
   156fc:	ldrb	r4, [r3, #1]!
   15700:	sub	r2, r4, #48	; 0x30
   15704:	bgt	15738 <__assert_fail@plt+0x42f4>
   15708:	ldrb	r1, [r5]
   1570c:	beq	15730 <__assert_fail@plt+0x42ec>
   15710:	add	r6, r6, r6, lsl #2
   15714:	sub	r1, r1, #48	; 0x30
   15718:	add	r6, r1, r6, lsl #1
   1571c:	mov	r5, r3
   15720:	cmp	r2, #9
   15724:	bls	156f4 <__assert_fail@plt+0x42b0>
   15728:	mov	r7, r4
   1572c:	b	154b4 <__assert_fail@plt+0x4070>
   15730:	cmp	r1, #55	; 0x37
   15734:	bls	15710 <__assert_fail@plt+0x42cc>
   15738:	cmp	r2, #9
   1573c:	ldrbls	r4, [r5, #2]!
   15740:	mvnls	r6, #-2147483648	; 0x80000000
   15744:	subls	r2, r4, #48	; 0x30
   15748:	bls	15720 <__assert_fail@plt+0x42dc>
   1574c:	mov	r5, r3
   15750:	mov	r7, r4
   15754:	mvn	r6, #-2147483648	; 0x80000000
   15758:	b	154b4 <__assert_fail@plt+0x4070>
   1575c:	cmp	r7, #79	; 0x4f
   15760:	beq	15aa8 <__assert_fail@plt+0x4664>
   15764:	mov	r3, #0
   15768:	str	r3, [sp, #52]	; 0x34
   1576c:	add	r8, sp, #120	; 0x78
   15770:	ldr	r3, [pc, #3016]	; 16340 <__assert_fail@plt+0x4efc>
   15774:	cmp	r7, #0
   15778:	strh	r3, [r8, #-12]
   1577c:	subeq	r0, r8, #10
   15780:	bne	16a70 <__assert_fail@plt+0x562c>
   15784:	mov	ip, #0
   15788:	strb	r4, [r0]
   1578c:	strb	ip, [r0, #1]
   15790:	ldr	r3, [sp, #28]
   15794:	sub	r2, r8, #12
   15798:	mov	r1, #1024	; 0x400
   1579c:	sub	r0, r8, #4
   157a0:	bl	112a0 <strftime@plt>
   157a4:	cmp	r0, #0
   157a8:	beq	1540c <__assert_fail@plt+0x3fc8>
   157ac:	bic	r2, r6, r6, asr #31
   157b0:	sub	r4, r0, #1
   157b4:	ldr	r1, [sp, #16]
   157b8:	cmp	r4, r2
   157bc:	movcs	r3, r4
   157c0:	movcc	r3, r2
   157c4:	sub	r1, r1, fp
   157c8:	cmp	r1, r3
   157cc:	bls	15444 <__assert_fail@plt+0x4000>
   157d0:	cmp	r9, #0
   157d4:	beq	15858 <__assert_fail@plt+0x4414>
   157d8:	cmp	r4, r2
   157dc:	movcs	r2, #0
   157e0:	movcc	r2, #1
   157e4:	cmp	r7, #0
   157e8:	moveq	r7, r2
   157ec:	movne	r7, #0
   157f0:	cmp	r7, #0
   157f4:	beq	15824 <__assert_fail@plt+0x43e0>
   157f8:	cmp	sl, #48	; 0x30
   157fc:	sub	r2, r6, r4
   15800:	moveq	r0, r9
   15804:	movne	r0, r9
   15808:	moveq	r1, sl
   1580c:	movne	r1, #32
   15810:	str	r3, [sp, #48]	; 0x30
   15814:	add	r7, r9, r2
   15818:	bl	11354 <memset@plt>
   1581c:	ldr	r3, [sp, #48]	; 0x30
   15820:	mov	r9, r7
   15824:	ldr	r2, [sp, #52]	; 0x34
   15828:	cmp	r2, #0
   1582c:	bne	166b8 <__assert_fail@plt+0x5274>
   15830:	ldr	r2, [sp, #20]
   15834:	sub	r1, r8, #3
   15838:	cmp	r2, #0
   1583c:	str	r3, [sp, #20]
   15840:	mov	r2, r4
   15844:	mov	r0, r9
   15848:	beq	166ac <__assert_fail@plt+0x5268>
   1584c:	bl	15328 <__assert_fail@plt+0x3ee4>
   15850:	ldr	r3, [sp, #20]
   15854:	add	r9, r9, r4
   15858:	add	fp, fp, r3
   1585c:	b	1540c <__assert_fail@plt+0x3fc8>
   15860:	cmp	r7, #0
   15864:	bne	15aa8 <__assert_fail@plt+0x4664>
   15868:	cmp	r8, #0
   1586c:	ldr	r3, [sp, #20]
   15870:	movne	r3, r8
   15874:	str	r3, [sp, #20]
   15878:	add	r8, sp, #120	; 0x78
   1587c:	ldr	r3, [pc, #2748]	; 16340 <__assert_fail@plt+0x4efc>
   15880:	mov	r7, #0
   15884:	str	r7, [sp, #52]	; 0x34
   15888:	strh	r3, [r8, #-12]
   1588c:	sub	r0, r8, #10
   15890:	b	15784 <__assert_fail@plt+0x4340>
   15894:	ldr	r3, [sp, #28]
   15898:	mov	r2, #1
   1589c:	str	r2, [sp, #48]	; 0x30
   158a0:	ldr	r3, [r3, #24]
   158a4:	ldr	r2, [pc, #2756]	; 16370 <__assert_fail@plt+0x4f2c>
   158a8:	add	r3, r3, #6
   158ac:	smull	r1, r2, r2, r3
   158b0:	add	r1, r2, r3
   158b4:	asr	r2, r3, #31
   158b8:	rsb	r2, r2, r1, asr #2
   158bc:	rsb	r2, r2, r2, lsl #3
   158c0:	sub	r3, r3, r2
   158c4:	add	r3, r3, #1
   158c8:	lsr	lr, r3, #31
   158cc:	mov	r0, #0
   158d0:	str	r0, [sp, #52]	; 0x34
   158d4:	eor	r2, lr, #1
   158d8:	cmp	r7, #79	; 0x4f
   158dc:	movne	r2, #0
   158e0:	andeq	r2, r2, #1
   158e4:	cmp	r2, #0
   158e8:	beq	15e40 <__assert_fail@plt+0x49fc>
   158ec:	add	r8, sp, #120	; 0x78
   158f0:	ldr	r3, [pc, #2632]	; 16340 <__assert_fail@plt+0x4efc>
   158f4:	mov	r2, #0
   158f8:	str	r2, [sp, #52]	; 0x34
   158fc:	strh	r3, [r8, #-12]
   15900:	strb	r7, [sp, #110]	; 0x6e
   15904:	sub	r0, r8, #9
   15908:	ldr	r7, [sp, #48]	; 0x30
   1590c:	b	15784 <__assert_fail@plt+0x4340>
   15910:	ldr	lr, [sp, #28]
   15914:	add	ip, sp, #64	; 0x40
   15918:	add	r8, sp, #120	; 0x78
   1591c:	ldm	lr!, {r0, r1, r2, r3}
   15920:	add	r4, r8, #10
   15924:	stmia	ip!, {r0, r1, r2, r3}
   15928:	ldm	lr!, {r0, r1, r2, r3}
   1592c:	stmia	ip!, {r0, r1, r2, r3}
   15930:	ldm	lr, {r0, r1, r2}
   15934:	stm	ip, {r0, r1, r2}
   15938:	add	r1, sp, #64	; 0x40
   1593c:	ldr	r0, [sp, #32]
   15940:	bl	1bbd8 <__assert_fail@plt+0xa794>
   15944:	mov	r1, r0
   15948:	ldr	r3, [pc, #2588]	; 1636c <__assert_fail@plt+0x4f28>
   1594c:	cmp	r0, #0
   15950:	smull	r2, r3, r3, r1
   15954:	asr	r2, r1, #31
   15958:	rsb	r2, r2, r3, asr #2
   1595c:	add	r3, r2, r2, lsl #2
   15960:	sub	r3, r1, r3, lsl #1
   15964:	mov	r1, r2
   15968:	uxtb	r3, r3
   1596c:	rsblt	r3, r3, #48	; 0x30
   15970:	addge	r3, r3, #48	; 0x30
   15974:	cmp	r2, #0
   15978:	uxtb	r3, r3
   1597c:	strb	r3, [r4, #-1]!
   15980:	bne	15948 <__assert_fail@plt+0x4504>
   15984:	cmp	r6, #1
   15988:	movge	r3, r6
   1598c:	movlt	r3, #1
   15990:	cmp	r0, #0
   15994:	blt	16624 <__assert_fail@plt+0x51e0>
   15998:	ldr	r2, [sp, #16]
   1599c:	add	r7, r8, #10
   159a0:	cmp	sl, #45	; 0x2d
   159a4:	sub	r7, r7, r4
   159a8:	sub	r2, r2, fp
   159ac:	beq	159c0 <__assert_fail@plt+0x457c>
   159b0:	sub	r1, r3, r7
   159b4:	cmp	r1, #0
   159b8:	str	r1, [sp, #48]	; 0x30
   159bc:	bgt	15434 <__assert_fail@plt+0x3ff0>
   159c0:	bic	r1, r6, r6, asr #31
   159c4:	str	r1, [sp, #48]	; 0x30
   159c8:	ldr	r1, [sp, #48]	; 0x30
   159cc:	cmp	r7, r1
   159d0:	movcs	r8, r7
   159d4:	movcc	r8, r1
   159d8:	cmp	r8, r2
   159dc:	bcs	15444 <__assert_fail@plt+0x4000>
   159e0:	cmp	r9, #0
   159e4:	beq	15a4c <__assert_fail@plt+0x4608>
   159e8:	cmp	r7, r1
   159ec:	movcs	r2, #0
   159f0:	movcc	r2, #1
   159f4:	cmp	r3, #0
   159f8:	moveq	r3, r2
   159fc:	movne	r3, #0
   15a00:	cmp	r3, #0
   15a04:	beq	15a2c <__assert_fail@plt+0x45e8>
   15a08:	cmp	sl, #48	; 0x30
   15a0c:	sub	r2, r6, r7
   15a10:	moveq	r0, r9
   15a14:	movne	r0, r9
   15a18:	moveq	r1, sl
   15a1c:	movne	r1, #32
   15a20:	add	r6, r9, r2
   15a24:	bl	11354 <memset@plt>
   15a28:	mov	r9, r6
   15a2c:	ldr	r3, [sp, #20]
   15a30:	mov	r1, r4
   15a34:	cmp	r3, #0
   15a38:	mov	r2, r7
   15a3c:	mov	r0, r9
   15a40:	beq	1669c <__assert_fail@plt+0x5258>
   15a44:	bl	15328 <__assert_fail@plt+0x3ee4>
   15a48:	add	r9, r9, r7
   15a4c:	add	fp, fp, r8
   15a50:	b	1540c <__assert_fail@plt+0x3fc8>
   15a54:	cmp	r7, #69	; 0x45
   15a58:	beq	167d4 <__assert_fail@plt+0x5390>
   15a5c:	ldr	r3, [sp, #28]
   15a60:	ldr	r2, [r3, #20]
   15a64:	ldr	r3, [pc, #2292]	; 16360 <__assert_fail@plt+0x4f1c>
   15a68:	smull	r3, r1, r3, r2
   15a6c:	asr	r3, r2, #31
   15a70:	rsb	r3, r3, r1, asr #5
   15a74:	add	r3, r3, r3, lsl #2
   15a78:	add	r3, r3, r3, lsl #2
   15a7c:	subs	r3, r2, r3, lsl #2
   15a80:	bmi	16994 <__assert_fail@plt+0x5550>
   15a84:	mov	r2, #2
   15a88:	str	r2, [sp, #48]	; 0x30
   15a8c:	b	158c8 <__assert_fail@plt+0x4484>
   15a90:	cmp	r8, #0
   15a94:	ldr	r3, [sp, #20]
   15a98:	movne	r3, r8
   15a9c:	cmp	r7, #69	; 0x45
   15aa0:	str	r3, [sp, #20]
   15aa4:	bne	15764 <__assert_fail@plt+0x4320>
   15aa8:	sub	r3, r5, #1
   15aac:	add	r1, r5, #1
   15ab0:	mov	r7, r3
   15ab4:	sub	r4, r1, r3
   15ab8:	ldrb	r2, [r3], #-1
   15abc:	cmp	r2, #37	; 0x25
   15ac0:	bne	15ab0 <__assert_fail@plt+0x466c>
   15ac4:	bic	r3, r6, r6, asr #31
   15ac8:	ldr	r2, [sp, #16]
   15acc:	cmp	r4, r3
   15ad0:	movcs	r8, r4
   15ad4:	movcc	r8, r3
   15ad8:	sub	r2, r2, fp
   15adc:	cmp	r2, r8
   15ae0:	bls	15444 <__assert_fail@plt+0x4000>
   15ae4:	cmp	r9, #0
   15ae8:	beq	15a4c <__assert_fail@plt+0x4608>
   15aec:	cmp	r4, r3
   15af0:	bcs	15b18 <__assert_fail@plt+0x46d4>
   15af4:	cmp	sl, #48	; 0x30
   15af8:	sub	r2, r6, r4
   15afc:	moveq	r0, r9
   15b00:	movne	r0, r9
   15b04:	moveq	r1, sl
   15b08:	movne	r1, #32
   15b0c:	add	r6, r9, r2
   15b10:	bl	11354 <memset@plt>
   15b14:	mov	r9, r6
   15b18:	ldr	r3, [sp, #20]
   15b1c:	mov	r1, r7
   15b20:	cmp	r3, #0
   15b24:	mov	r2, r4
   15b28:	mov	r0, r9
   15b2c:	beq	166a4 <__assert_fail@plt+0x5260>
   15b30:	bl	15328 <__assert_fail@plt+0x3ee4>
   15b34:	add	r9, r9, r4
   15b38:	b	15a4c <__assert_fail@plt+0x4608>
   15b3c:	mov	r3, #0
   15b40:	str	r3, [sp, #48]	; 0x30
   15b44:	ldr	r2, [sp, #28]
   15b48:	ldr	r3, [r2, #32]
   15b4c:	cmp	r3, #0
   15b50:	blt	1540c <__assert_fail@plt+0x3fc8>
   15b54:	ldr	r1, [r2, #36]	; 0x24
   15b58:	cmp	r1, #0
   15b5c:	movlt	lr, #1
   15b60:	blt	15b7c <__assert_fail@plt+0x4738>
   15b64:	ldreq	r3, [sp, #40]	; 0x28
   15b68:	movne	lr, #0
   15b6c:	ldrbeq	lr, [r3]
   15b70:	subeq	lr, lr, #45	; 0x2d
   15b74:	clzeq	lr, lr
   15b78:	lsreq	lr, lr, #5
   15b7c:	ldr	r0, [pc, #1984]	; 16344 <__assert_fail@plt+0x4f00>
   15b80:	smull	r3, r2, r0, r1
   15b84:	ldr	r3, [pc, #1980]	; 16348 <__assert_fail@plt+0x4f04>
   15b88:	add	r2, r2, r1
   15b8c:	smull	r3, ip, r3, r1
   15b90:	asr	r3, r1, #31
   15b94:	rsb	r2, r3, r2, asr #5
   15b98:	add	ip, ip, r1
   15b9c:	smull	r8, r0, r0, r2
   15ba0:	add	r0, r0, r2
   15ba4:	asr	r8, r2, #31
   15ba8:	rsb	r0, r8, r0, asr #5
   15bac:	rsb	r8, r2, r2, lsl #4
   15bb0:	rsb	r0, r0, r0, lsl #4
   15bb4:	rsb	r3, r3, ip, asr #11
   15bb8:	sub	r0, r2, r0, lsl #2
   15bbc:	ldr	r2, [sp, #48]	; 0x30
   15bc0:	sub	r1, r1, r8, lsl #2
   15bc4:	cmp	r2, #3
   15bc8:	ldrls	pc, [pc, r2, lsl #2]
   15bcc:	b	16a84 <__assert_fail@plt+0x5640>
   15bd0:	ldrdeq	r6, [r1], -ip
   15bd4:			; <UNDEFINED> instruction: 0x000165b8
   15bd8:	andeq	r6, r1, r0, lsl #11
   15bdc:	andeq	r6, r1, r0, lsl #12
   15be0:	bic	r7, r6, r6, asr #31
   15be4:	ldr	r3, [sp, #16]
   15be8:	cmp	r7, #1
   15bec:	movcc	r7, #1
   15bf0:	sub	r3, r3, fp
   15bf4:	cmp	r3, r7
   15bf8:	bls	15444 <__assert_fail@plt+0x4000>
   15bfc:	cmp	r9, #0
   15c00:	beq	15c38 <__assert_fail@plt+0x47f4>
   15c04:	cmp	r6, #1
   15c08:	ble	15c30 <__assert_fail@plt+0x47ec>
   15c0c:	cmp	sl, #48	; 0x30
   15c10:	sub	r2, r6, #1
   15c14:	moveq	r0, r9
   15c18:	movne	r0, r9
   15c1c:	moveq	r1, sl
   15c20:	movne	r1, #32
   15c24:	add	r4, r9, r2
   15c28:	bl	11354 <memset@plt>
   15c2c:	mov	r9, r4
   15c30:	mov	r3, #10
   15c34:	strb	r3, [r9], #1
   15c38:	add	fp, fp, r7
   15c3c:	b	1540c <__assert_fail@plt+0x3fc8>
   15c40:	cmp	r7, #69	; 0x45
   15c44:	beq	15aa8 <__assert_fail@plt+0x4664>
   15c48:	ldr	r3, [sp, #28]
   15c4c:	mov	r2, #2
   15c50:	str	r2, [sp, #48]	; 0x30
   15c54:	ldr	r3, [r3, #12]
   15c58:	b	158c8 <__assert_fail@plt+0x4484>
   15c5c:	cmp	r7, #69	; 0x45
   15c60:	beq	15aa8 <__assert_fail@plt+0x4664>
   15c64:	ldr	r3, [sp, #28]
   15c68:	ldr	r3, [r3, #12]
   15c6c:	cmp	sl, #48	; 0x30
   15c70:	cmpne	sl, #45	; 0x2d
   15c74:	mov	r2, #2
   15c78:	movne	sl, #95	; 0x5f
   15c7c:	str	r2, [sp, #48]	; 0x30
   15c80:	b	158c8 <__assert_fail@plt+0x4484>
   15c84:	cmp	r7, #69	; 0x45
   15c88:	beq	15aa8 <__assert_fail@plt+0x4664>
   15c8c:	ldr	r3, [sp, #28]
   15c90:	mov	r0, #0
   15c94:	mov	r2, #3
   15c98:	ldr	r3, [r3, #28]
   15c9c:	str	r0, [sp, #52]	; 0x34
   15ca0:	cmn	r3, #1
   15ca4:	movge	lr, #0
   15ca8:	movlt	lr, #1
   15cac:	add	r3, r3, #1
   15cb0:	str	r2, [sp, #48]	; 0x30
   15cb4:	b	158d4 <__assert_fail@plt+0x4490>
   15cb8:	cmp	r7, #69	; 0x45
   15cbc:	beq	15aa8 <__assert_fail@plt+0x4664>
   15cc0:	ldr	r3, [sp, #28]
   15cc4:	ldr	r3, [r3, #8]
   15cc8:	b	15c6c <__assert_fail@plt+0x4828>
   15ccc:	cmp	r7, #69	; 0x45
   15cd0:	beq	15aa8 <__assert_fail@plt+0x4664>
   15cd4:	ldr	r3, [sp, #44]	; 0x2c
   15cd8:	b	15c6c <__assert_fail@plt+0x4828>
   15cdc:	ldr	r3, [pc, #1640]	; 1634c <__assert_fail@plt+0x4f08>
   15ce0:	str	r3, [sp, #48]	; 0x30
   15ce4:	ldr	r3, [sp, #1196]	; 0x4ac
   15ce8:	ldr	r2, [sp, #48]	; 0x30
   15cec:	str	r3, [sp, #12]
   15cf0:	ldr	r3, [sp, #32]
   15cf4:	mvn	r1, #0
   15cf8:	str	r3, [sp, #8]
   15cfc:	ldr	r3, [sp, #36]	; 0x24
   15d00:	mov	r0, #0
   15d04:	str	r3, [sp, #4]
   15d08:	ldr	r3, [sp, #20]
   15d0c:	str	r3, [sp]
   15d10:	ldr	r3, [sp, #28]
   15d14:	bl	15368 <__assert_fail@plt+0x3f24>
   15d18:	bic	r3, r6, r6, asr #31
   15d1c:	ldr	r2, [sp, #16]
   15d20:	sub	r8, r2, fp
   15d24:	cmp	r0, r3
   15d28:	movcs	r7, r0
   15d2c:	movcc	r7, r3
   15d30:	cmp	r8, r7
   15d34:	mov	r4, r0
   15d38:	bls	15444 <__assert_fail@plt+0x4000>
   15d3c:	cmp	r9, #0
   15d40:	beq	15c38 <__assert_fail@plt+0x47f4>
   15d44:	cmp	r0, r3
   15d48:	bcs	15d70 <__assert_fail@plt+0x492c>
   15d4c:	cmp	sl, #48	; 0x30
   15d50:	sub	r2, r6, r0
   15d54:	moveq	r1, sl
   15d58:	moveq	r0, r9
   15d5c:	movne	r0, r9
   15d60:	movne	r1, #32
   15d64:	add	r6, r9, r2
   15d68:	bl	11354 <memset@plt>
   15d6c:	mov	r9, r6
   15d70:	ldr	r3, [sp, #1196]	; 0x4ac
   15d74:	mov	r0, r9
   15d78:	str	r3, [sp, #12]
   15d7c:	ldr	r3, [sp, #32]
   15d80:	ldr	r2, [sp, #48]	; 0x30
   15d84:	str	r3, [sp, #8]
   15d88:	ldr	r3, [sp, #36]	; 0x24
   15d8c:	mov	r1, r8
   15d90:	str	r3, [sp, #4]
   15d94:	ldr	r3, [sp, #20]
   15d98:	add	r9, r9, r4
   15d9c:	str	r3, [sp]
   15da0:	ldr	r3, [sp, #28]
   15da4:	bl	15368 <__assert_fail@plt+0x3f24>
   15da8:	b	15c38 <__assert_fail@plt+0x47f4>
   15dac:	cmp	r7, #69	; 0x45
   15db0:	beq	15aa8 <__assert_fail@plt+0x4664>
   15db4:	ldr	r3, [sp, #28]
   15db8:	mov	r2, #2
   15dbc:	str	r2, [sp, #48]	; 0x30
   15dc0:	ldr	r3, [r3]
   15dc4:	b	158c8 <__assert_fail@plt+0x4484>
   15dc8:	cmp	r7, #69	; 0x45
   15dcc:	beq	15aa8 <__assert_fail@plt+0x4664>
   15dd0:	ldr	r2, [sp, #28]
   15dd4:	mov	r1, #2
   15dd8:	str	r1, [sp, #48]	; 0x30
   15ddc:	ldrd	r2, [r2, #24]
   15de0:	sub	r3, r3, r2
   15de4:	ldr	r2, [pc, #1412]	; 16370 <__assert_fail@plt+0x4f2c>
   15de8:	add	r3, r3, #7
   15dec:	smull	r1, r2, r2, r3
   15df0:	add	r2, r2, r3
   15df4:	asr	r3, r3, #31
   15df8:	rsb	r3, r3, r2, asr #2
   15dfc:	b	158c8 <__assert_fail@plt+0x4484>
   15e00:	cmp	r7, #69	; 0x45
   15e04:	beq	167d4 <__assert_fail@plt+0x5390>
   15e08:	cmp	r7, #79	; 0x4f
   15e0c:	beq	15aa8 <__assert_fail@plt+0x4664>
   15e10:	ldr	r3, [sp, #28]
   15e14:	ldr	r2, [pc, #1368]	; 16374 <__assert_fail@plt+0x4f30>
   15e18:	mov	r0, #0
   15e1c:	ldr	lr, [r3, #20]
   15e20:	str	r0, [sp, #52]	; 0x34
   15e24:	add	r3, lr, #1888	; 0x760
   15e28:	cmp	lr, r2
   15e2c:	add	r3, r3, #12
   15e30:	movge	lr, #0
   15e34:	movlt	lr, #1
   15e38:	mov	r2, #4
   15e3c:	str	r2, [sp, #48]	; 0x30
   15e40:	cmp	lr, #0
   15e44:	rsbne	r3, r3, #0
   15e48:	add	r8, sp, #120	; 0x78
   15e4c:	add	ip, r8, #10
   15e50:	mov	r7, r3
   15e54:	b	15e5c <__assert_fail@plt+0x4a18>
   15e58:	mov	r7, r2
   15e5c:	tst	r0, #1
   15e60:	subne	r3, ip, #2
   15e64:	sub	r4, ip, #1
   15e68:	movne	r2, #58	; 0x3a
   15e6c:	strbne	r2, [ip, #-1]
   15e70:	movne	ip, r4
   15e74:	movne	r4, r3
   15e78:	ldr	r3, [pc, #1232]	; 16350 <__assert_fail@plt+0x4f0c>
   15e7c:	asrs	r0, r0, #1
   15e80:	movne	r1, #1
   15e84:	umull	r3, r2, r3, r7
   15e88:	moveq	r1, #0
   15e8c:	lsr	r2, r2, #3
   15e90:	cmp	r7, #9
   15e94:	orrhi	r1, r1, #1
   15e98:	add	r3, r2, r2, lsl #2
   15e9c:	cmp	r1, #0
   15ea0:	sub	r3, r7, r3, lsl #1
   15ea4:	add	r3, r3, #48	; 0x30
   15ea8:	strb	r3, [ip, #-1]
   15eac:	mov	ip, r4
   15eb0:	bne	15e58 <__assert_fail@plt+0x4a14>
   15eb4:	ldr	r3, [sp, #48]	; 0x30
   15eb8:	cmp	r3, r6
   15ebc:	movlt	r3, r6
   15ec0:	cmp	lr, #0
   15ec4:	bne	16624 <__assert_fail@plt+0x51e0>
   15ec8:	ldr	r2, [sp, #52]	; 0x34
   15ecc:	cmp	r2, #0
   15ed0:	beq	15998 <__assert_fail@plt+0x4554>
   15ed4:	cmp	sl, #45	; 0x2d
   15ed8:	beq	167e0 <__assert_fail@plt+0x539c>
   15edc:	mov	r2, #43	; 0x2b
   15ee0:	str	r2, [sp, #52]	; 0x34
   15ee4:	add	r7, r8, #10
   15ee8:	sub	r7, r7, r4
   15eec:	sub	r2, r3, r7
   15ef0:	sub	r2, r2, #1
   15ef4:	str	r2, [sp, #48]	; 0x30
   15ef8:	cmp	r2, #0
   15efc:	ldr	r2, [sp, #16]
   15f00:	sub	r2, r2, fp
   15f04:	ble	166dc <__assert_fail@plt+0x5298>
   15f08:	cmp	sl, #95	; 0x5f
   15f0c:	beq	16768 <__assert_fail@plt+0x5324>
   15f10:	cmp	r3, r2
   15f14:	bcs	15444 <__assert_fail@plt+0x4000>
   15f18:	bic	r0, r6, r6, asr #31
   15f1c:	cmp	r0, #1
   15f20:	movcs	r1, r0
   15f24:	movcc	r1, #1
   15f28:	cmp	r1, r2
   15f2c:	bcs	15444 <__assert_fail@plt+0x4000>
   15f30:	cmp	r9, #0
   15f34:	add	fp, fp, r1
   15f38:	beq	15fb0 <__assert_fail@plt+0x4b6c>
   15f3c:	cmp	r0, #1
   15f40:	movls	r2, #0
   15f44:	movhi	r2, #1
   15f48:	cmp	r3, #0
   15f4c:	movne	r2, #0
   15f50:	cmp	r2, #0
   15f54:	beq	15f80 <__assert_fail@plt+0x4b3c>
   15f58:	sub	r2, r6, #1
   15f5c:	cmp	sl, #48	; 0x30
   15f60:	str	r3, [sp, #56]	; 0x38
   15f64:	mov	r0, r9
   15f68:	add	r8, r9, r2
   15f6c:	beq	16a4c <__assert_fail@plt+0x5608>
   15f70:	mov	r1, #32
   15f74:	bl	11354 <memset@plt>
   15f78:	ldr	r3, [sp, #56]	; 0x38
   15f7c:	mov	r9, r8
   15f80:	ldr	r2, [sp, #52]	; 0x34
   15f84:	strb	r2, [r9], #1
   15f88:	cmp	r9, #0
   15f8c:	beq	15fb0 <__assert_fail@plt+0x4b6c>
   15f90:	ldr	r6, [sp, #48]	; 0x30
   15f94:	mov	r0, r9
   15f98:	mov	r2, r6
   15f9c:	mov	r1, #48	; 0x30
   15fa0:	str	r3, [sp, #52]	; 0x34
   15fa4:	bl	11354 <memset@plt>
   15fa8:	ldr	r3, [sp, #52]	; 0x34
   15fac:	add	r9, r9, r6
   15fb0:	ldr	r2, [sp, #48]	; 0x30
   15fb4:	mov	r6, #0
   15fb8:	add	fp, fp, r2
   15fbc:	ldr	r2, [sp, #16]
   15fc0:	str	r6, [sp, #48]	; 0x30
   15fc4:	sub	r2, r2, fp
   15fc8:	b	159c8 <__assert_fail@plt+0x4584>
   15fcc:	ldr	r3, [sp, #20]
   15fd0:	cmp	r8, #0
   15fd4:	movne	r3, #0
   15fd8:	ldr	r0, [sp, #40]	; 0x28
   15fdc:	str	r3, [sp, #20]
   15fe0:	bl	11300 <strlen@plt>
   15fe4:	bic	r3, r6, r6, asr #31
   15fe8:	ldr	r2, [sp, #16]
   15fec:	sub	r2, r2, fp
   15ff0:	cmp	r0, r3
   15ff4:	movcs	r4, r0
   15ff8:	movcc	r4, r3
   15ffc:	cmp	r2, r4
   16000:	mov	r7, r0
   16004:	bls	15444 <__assert_fail@plt+0x4000>
   16008:	cmp	r9, #0
   1600c:	beq	16064 <__assert_fail@plt+0x4c20>
   16010:	cmp	r0, r3
   16014:	bcs	1603c <__assert_fail@plt+0x4bf8>
   16018:	cmp	sl, #48	; 0x30
   1601c:	sub	r2, r6, r0
   16020:	moveq	r1, sl
   16024:	moveq	r0, r9
   16028:	movne	r0, r9
   1602c:	movne	r1, #32
   16030:	add	r6, r9, r2
   16034:	bl	11354 <memset@plt>
   16038:	mov	r9, r6
   1603c:	cmp	r8, #0
   16040:	bne	169b8 <__assert_fail@plt+0x5574>
   16044:	ldr	r3, [sp, #20]
   16048:	mov	r2, r7
   1604c:	cmp	r3, #0
   16050:	ldr	r1, [sp, #40]	; 0x28
   16054:	mov	r0, r9
   16058:	beq	169b0 <__assert_fail@plt+0x556c>
   1605c:	bl	15328 <__assert_fail@plt+0x3ee4>
   16060:	add	r9, r9, r7
   16064:	add	fp, fp, r4
   16068:	b	1540c <__assert_fail@plt+0x3fc8>
   1606c:	cmp	r7, #69	; 0x45
   16070:	beq	15aa8 <__assert_fail@plt+0x4664>
   16074:	ldr	r3, [sp, #28]
   16078:	ldr	ip, [pc, #752]	; 16370 <__assert_fail@plt+0x4f2c>
   1607c:	ldrd	r2, [r3, #24]
   16080:	add	r2, r2, #6
   16084:	smull	r0, r1, ip, r2
   16088:	add	r0, r1, r2
   1608c:	asr	r1, r2, #31
   16090:	rsb	r1, r1, r0, asr #2
   16094:	mov	r0, #2
   16098:	rsb	r1, r1, r1, lsl #3
   1609c:	sub	r2, r2, r1
   160a0:	sub	r3, r3, r2
   160a4:	add	r3, r3, #7
   160a8:	str	r0, [sp, #48]	; 0x30
   160ac:	smull	r1, r2, ip, r3
   160b0:	add	r2, r2, r3
   160b4:	asr	r3, r3, #31
   160b8:	rsb	r3, r3, r2, asr r0
   160bc:	b	158c8 <__assert_fail@plt+0x4484>
   160c0:	cmp	r7, #0
   160c4:	bne	15aa8 <__assert_fail@plt+0x4664>
   160c8:	ldr	r3, [pc, #644]	; 16354 <__assert_fail@plt+0x4f10>
   160cc:	str	r3, [sp, #48]	; 0x30
   160d0:	b	15ce4 <__assert_fail@plt+0x48a0>
   160d4:	cmp	r7, #0
   160d8:	bne	15aa8 <__assert_fail@plt+0x4664>
   160dc:	ldr	r3, [pc, #628]	; 16358 <__assert_fail@plt+0x4f14>
   160e0:	str	r3, [sp, #48]	; 0x30
   160e4:	b	15ce4 <__assert_fail@plt+0x48a0>
   160e8:	cmp	r7, #69	; 0x45
   160ec:	beq	15aa8 <__assert_fail@plt+0x4664>
   160f0:	ldr	r3, [sp, #28]
   160f4:	ldr	r0, [r3, #28]
   160f8:	ldr	r2, [r3, #24]
   160fc:	ldr	r8, [r3, #20]
   16100:	sub	r3, r0, r2
   16104:	str	r2, [sp, #52]	; 0x34
   16108:	add	r3, r3, #380	; 0x17c
   1610c:	ldr	r2, [pc, #604]	; 16370 <__assert_fail@plt+0x4f2c>
   16110:	add	r3, r3, #2
   16114:	cmp	r8, #0
   16118:	smull	r1, r2, r2, r3
   1611c:	str	r0, [sp, #48]	; 0x30
   16120:	add	r1, r2, r3
   16124:	asr	r2, r3, #31
   16128:	rsb	r2, r2, r1, asr #2
   1612c:	movlt	r1, #300	; 0x12c
   16130:	rsb	r2, r2, r2, lsl #3
   16134:	sub	r3, r3, r2
   16138:	sub	r3, r0, r3
   1613c:	mvnge	r1, #99	; 0x63
   16140:	adds	r3, r3, #3
   16144:	add	r1, r8, r1
   16148:	bmi	16848 <__assert_fail@plt+0x5404>
   1614c:	tst	r1, #3
   16150:	ldrne	r2, [pc, #524]	; 16364 <__assert_fail@plt+0x4f20>
   16154:	bne	16198 <__assert_fail@plt+0x4d54>
   16158:	ldr	r2, [pc, #512]	; 16360 <__assert_fail@plt+0x4f1c>
   1615c:	smull	r2, ip, r2, r1
   16160:	asr	r2, r1, #31
   16164:	rsb	r0, r2, ip, asr #5
   16168:	add	r0, r0, r0, lsl #2
   1616c:	add	r0, r0, r0, lsl #2
   16170:	cmp	r1, r0, lsl #2
   16174:	ldrne	r2, [pc, #492]	; 16368 <__assert_fail@plt+0x4f24>
   16178:	bne	16198 <__assert_fail@plt+0x4d54>
   1617c:	rsb	r0, r2, ip, asr #7
   16180:	ldr	ip, [pc, #480]	; 16368 <__assert_fail@plt+0x4f24>
   16184:	add	r0, r0, r0, lsl #2
   16188:	ldr	r2, [pc, #468]	; 16364 <__assert_fail@plt+0x4f20>
   1618c:	add	r0, r0, r0, lsl #2
   16190:	cmp	r1, r0, lsl #4
   16194:	moveq	r2, ip
   16198:	ldr	r1, [sp, #48]	; 0x30
   1619c:	sub	ip, r1, r2
   161a0:	ldr	r2, [sp, #52]	; 0x34
   161a4:	ldr	r1, [pc, #452]	; 16370 <__assert_fail@plt+0x4f2c>
   161a8:	sub	r2, ip, r2
   161ac:	add	r2, r2, #380	; 0x17c
   161b0:	add	r2, r2, #2
   161b4:	smull	r0, r1, r1, r2
   161b8:	add	r0, r1, r2
   161bc:	asr	r1, r2, #31
   161c0:	rsb	r1, r1, r0, asr #2
   161c4:	rsb	r1, r1, r1, lsl #3
   161c8:	sub	r2, r2, r1
   161cc:	sub	r2, ip, r2
   161d0:	add	r2, r2, #3
   161d4:	cmp	r2, #0
   161d8:	movge	r3, r2
   161dc:	movlt	r2, #0
   161e0:	movge	r2, #1
   161e4:	cmp	r4, #71	; 0x47
   161e8:	beq	16960 <__assert_fail@plt+0x551c>
   161ec:	cmp	r4, #103	; 0x67
   161f0:	bne	1693c <__assert_fail@plt+0x54f8>
   161f4:	ldr	r0, [pc, #356]	; 16360 <__assert_fail@plt+0x4f1c>
   161f8:	smull	r3, r1, r0, r8
   161fc:	asr	r3, r8, #31
   16200:	rsb	r3, r3, r1, asr #5
   16204:	add	r3, r3, r3, lsl #2
   16208:	add	r3, r3, r3, lsl #2
   1620c:	sub	r1, r8, r3, lsl #2
   16210:	add	r1, r1, r2
   16214:	smull	r3, r0, r0, r1
   16218:	asr	r3, r1, #31
   1621c:	rsb	r3, r3, r0, asr #5
   16220:	add	r3, r3, r3, lsl #2
   16224:	add	r3, r3, r3, lsl #2
   16228:	subs	r3, r1, r3, lsl #2
   1622c:	bpl	15a84 <__assert_fail@plt+0x4640>
   16230:	ldr	r1, [pc, #316]	; 16374 <__assert_fail@plt+0x4f30>
   16234:	sub	r1, r1, r2
   16238:	cmp	r1, r8
   1623c:	ble	169a0 <__assert_fail@plt+0x555c>
   16240:	mov	r2, #2
   16244:	rsb	r3, r3, #0
   16248:	str	r2, [sp, #48]	; 0x30
   1624c:	b	158c8 <__assert_fail@plt+0x4484>
   16250:	cmp	r7, #69	; 0x45
   16254:	beq	15aa8 <__assert_fail@plt+0x4664>
   16258:	ldr	r3, [sp, #28]
   1625c:	mov	r2, #2
   16260:	str	r2, [sp, #48]	; 0x30
   16264:	ldr	r3, [r3, #8]
   16268:	b	158c8 <__assert_fail@plt+0x4484>
   1626c:	cmp	r7, #69	; 0x45
   16270:	beq	15aa8 <__assert_fail@plt+0x4664>
   16274:	ldr	r3, [sp, #28]
   16278:	mov	r2, #2
   1627c:	str	r2, [sp, #48]	; 0x30
   16280:	ldr	r3, [r3, #4]
   16284:	b	158c8 <__assert_fail@plt+0x4484>
   16288:	cmp	r7, #69	; 0x45
   1628c:	beq	15aa8 <__assert_fail@plt+0x4664>
   16290:	cmn	r6, #1
   16294:	bne	168dc <__assert_fail@plt+0x5498>
   16298:	mov	r6, #9
   1629c:	str	r6, [sp, #48]	; 0x30
   162a0:	ldr	r3, [sp, #1196]	; 0x4ac
   162a4:	b	158c8 <__assert_fail@plt+0x4484>
   162a8:	ldrb	r3, [r5, #-1]
   162ac:	sub	r7, r5, #1
   162b0:	cmp	r3, #37	; 0x25
   162b4:	ldr	r3, [sp, #16]
   162b8:	sub	r2, r3, fp
   162bc:	bic	r3, r6, r6, asr #31
   162c0:	bne	16a7c <__assert_fail@plt+0x5638>
   162c4:	cmp	r3, #1
   162c8:	movcs	r8, r3
   162cc:	movcc	r8, #1
   162d0:	mov	r5, r7
   162d4:	mov	r4, #1
   162d8:	b	15adc <__assert_fail@plt+0x4698>
   162dc:	cmp	r7, #69	; 0x45
   162e0:	beq	15aa8 <__assert_fail@plt+0x4664>
   162e4:	mov	r2, #2
   162e8:	ldr	r3, [sp, #44]	; 0x2c
   162ec:	str	r2, [sp, #48]	; 0x30
   162f0:	b	158c8 <__assert_fail@plt+0x4484>
   162f4:	ldr	r3, [sp, #28]
   162f8:	cmp	r7, #79	; 0x4f
   162fc:	ldr	r3, [r3, #16]
   16300:	moveq	r3, #1
   16304:	streq	r3, [sp, #48]	; 0x30
   16308:	beq	158ec <__assert_fail@plt+0x44a8>
   1630c:	add	r2, r3, r3, lsl #2
   16310:	mov	r0, #0
   16314:	add	r3, r3, r2, lsl #1
   16318:	mov	r2, #1
   1631c:	asr	r3, r3, #5
   16320:	str	r0, [sp, #52]	; 0x34
   16324:	mov	lr, r0
   16328:	add	r3, r3, #1
   1632c:	str	r2, [sp, #48]	; 0x30
   16330:	b	15e48 <__assert_fail@plt+0x4a04>
   16334:	andeq	lr, r2, r8, lsl #30
   16338:	andeq	ip, r1, r8, ror #14
   1633c:	stcleq	12, cr12, [ip], {204}	; 0xcc
   16340:	andeq	r2, r0, r0, lsr #10
   16344:	stmhi	r8, {r0, r3, r7, fp, pc}
   16348:			; <UNDEFINED> instruction: 0x91a2b3c5
   1634c:	andeq	sp, r1, r8, ror #25
   16350:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16354:	ldrdeq	sp, [r1], -ip
   16358:	strdeq	sp, [r1], -r0
   1635c:	ldrdeq	sp, [r1], -r0
   16360:	mvnpl	r8, pc, lsl r5
   16364:	andeq	r0, r0, sp, ror #2
   16368:	andeq	r0, r0, lr, ror #2
   1636c:	strbtvs	r6, [r6], -r7, ror #12
   16370:	subls	r2, r9, #-1828716544	; 0x93000000
   16374:			; <UNDEFINED> instruction: 0xfffff894
   16378:	bic	r7, r6, r6, asr #31
   1637c:	ldr	r3, [sp, #16]
   16380:	cmp	r7, #1
   16384:	movcc	r7, #1
   16388:	sub	r3, r3, fp
   1638c:	cmp	r3, r7
   16390:	bls	15444 <__assert_fail@plt+0x4000>
   16394:	cmp	r9, #0
   16398:	beq	15c38 <__assert_fail@plt+0x47f4>
   1639c:	cmp	r6, #1
   163a0:	ble	163c8 <__assert_fail@plt+0x4f84>
   163a4:	cmp	sl, #48	; 0x30
   163a8:	sub	r2, r6, #1
   163ac:	moveq	r0, r9
   163b0:	movne	r0, r9
   163b4:	moveq	r1, sl
   163b8:	movne	r1, #32
   163bc:	add	r4, r9, r2
   163c0:	bl	11354 <memset@plt>
   163c4:	mov	r9, r4
   163c8:	mov	r3, #9
   163cc:	strb	r3, [r9], #1
   163d0:	b	15c38 <__assert_fail@plt+0x47f4>
   163d4:	mov	r3, #0
   163d8:	str	r3, [sp, #52]	; 0x34
   163dc:	ldr	r3, [sp, #52]	; 0x34
   163e0:	cmp	r8, #0
   163e4:	movne	r3, r8
   163e8:	str	r3, [sp, #52]	; 0x34
   163ec:	ldr	r3, [sp, #20]
   163f0:	movne	r3, #0
   163f4:	str	r3, [sp, #20]
   163f8:	mov	r4, #112	; 0x70
   163fc:	b	1576c <__assert_fail@plt+0x4328>
   16400:	cmp	r7, #69	; 0x45
   16404:	beq	15aa8 <__assert_fail@plt+0x4664>
   16408:	ldr	r3, [sp, #20]
   1640c:	cmp	r8, #0
   16410:	movne	r3, r8
   16414:	str	r3, [sp, #20]
   16418:	mov	r3, #0
   1641c:	str	r3, [sp, #52]	; 0x34
   16420:	b	1576c <__assert_fail@plt+0x4328>
   16424:	cmp	r7, #69	; 0x45
   16428:	beq	167d4 <__assert_fail@plt+0x5390>
   1642c:	ldr	r3, [sp, #28]
   16430:	mov	r0, #0
   16434:	ldr	lr, [pc, #-200]	; 16374 <__assert_fail@plt+0x4f30>
   16438:	ldr	ip, [r3, #20]
   1643c:	ldr	r3, [pc, #-228]	; 16360 <__assert_fail@plt+0x4f1c>
   16440:	str	r0, [sp, #52]	; 0x34
   16444:	smull	r2, r3, r3, ip
   16448:	asr	r2, ip, #31
   1644c:	rsb	r2, r2, r3, asr #5
   16450:	add	r3, r2, #19
   16454:	add	r2, r2, r2, lsl #2
   16458:	cmp	r3, r0
   1645c:	add	r2, r2, r2, lsl #2
   16460:	movle	r1, #0
   16464:	sub	r2, ip, r2, lsl #2
   16468:	movgt	r1, #1
   1646c:	and	r2, r1, r2, lsr #31
   16470:	cmp	ip, lr
   16474:	sub	r3, r3, r2
   16478:	mov	r2, #2
   1647c:	movge	lr, #0
   16480:	movlt	lr, #1
   16484:	str	r2, [sp, #48]	; 0x30
   16488:	b	158d4 <__assert_fail@plt+0x4490>
   1648c:	cmp	r7, #69	; 0x45
   16490:	beq	15aa8 <__assert_fail@plt+0x4664>
   16494:	ldr	r3, [sp, #28]
   16498:	mov	r2, #1
   1649c:	str	r2, [sp, #48]	; 0x30
   164a0:	ldr	r3, [r3, #24]
   164a4:	b	158c8 <__assert_fail@plt+0x4484>
   164a8:	cmp	r7, #69	; 0x45
   164ac:	beq	15aa8 <__assert_fail@plt+0x4664>
   164b0:	ldr	r3, [sp, #28]
   164b4:	mov	r0, #0
   164b8:	mov	r2, #2
   164bc:	ldr	r3, [r3, #16]
   164c0:	str	r0, [sp, #52]	; 0x34
   164c4:	cmn	r3, #1
   164c8:	movge	lr, #0
   164cc:	movlt	lr, #1
   164d0:	add	r3, r3, #1
   164d4:	str	r2, [sp, #48]	; 0x30
   164d8:	b	158d4 <__assert_fail@plt+0x4490>
   164dc:	bic	r3, r6, r6, asr #31
   164e0:	ldr	r2, [sp, #16]
   164e4:	cmp	r3, #1
   164e8:	movcs	r8, r3
   164ec:	movcc	r8, #1
   164f0:	cmp	r7, #0
   164f4:	sub	r2, r2, fp
   164f8:	bne	169f0 <__assert_fail@plt+0x55ac>
   164fc:	cmp	r8, r2
   16500:	bcs	15444 <__assert_fail@plt+0x4000>
   16504:	cmp	r9, #0
   16508:	beq	15a4c <__assert_fail@plt+0x4608>
   1650c:	cmp	r6, #1
   16510:	ble	16538 <__assert_fail@plt+0x50f4>
   16514:	sub	r2, r6, #1
   16518:	cmp	sl, #48	; 0x30
   1651c:	add	r7, r9, r2
   16520:	beq	16a10 <__assert_fail@plt+0x55cc>
   16524:	mov	r0, r9
   16528:	mov	r1, #32
   1652c:	bl	11354 <memset@plt>
   16530:	ldrb	r4, [r5]
   16534:	mov	r9, r7
   16538:	strb	r4, [r9], #1
   1653c:	b	15a4c <__assert_fail@plt+0x4608>
   16540:	ldrb	r3, [r5, #1]
   16544:	add	r2, r5, #1
   16548:	cmp	r3, #58	; 0x3a
   1654c:	beq	169cc <__assert_fail@plt+0x5588>
   16550:	mov	r1, #1
   16554:	str	r1, [sp, #48]	; 0x30
   16558:	cmp	r3, #122	; 0x7a
   1655c:	moveq	r5, r2
   16560:	beq	15b44 <__assert_fail@plt+0x4700>
   16564:	b	15aa8 <__assert_fail@plt+0x4664>
   16568:	mov	r3, #1
   1656c:	str	r3, [sp, #52]	; 0x34
   16570:	b	163dc <__assert_fail@plt+0x4f98>
   16574:	ldr	r3, [pc, #-544]	; 1635c <__assert_fail@plt+0x4f18>
   16578:	str	r3, [sp, #48]	; 0x30
   1657c:	b	15ce4 <__assert_fail@plt+0x48a0>
   16580:	rsb	r2, r3, r3, lsl #5
   16584:	add	r0, r0, r0, lsl #2
   16588:	add	r3, r3, r2, lsl #2
   1658c:	add	r0, r0, r0, lsl #2
   16590:	add	ip, r3, r3, lsl #2
   16594:	mov	r2, #1
   16598:	lsl	r3, r0, #2
   1659c:	add	r3, r3, ip, lsl #4
   165a0:	str	r2, [sp, #52]	; 0x34
   165a4:	mov	r2, #9
   165a8:	add	r3, r3, r1
   165ac:	mov	r0, #20
   165b0:	str	r2, [sp, #48]	; 0x30
   165b4:	b	158d4 <__assert_fail@plt+0x4490>
   165b8:	add	r3, r3, r3, lsl #2
   165bc:	mov	r2, #1
   165c0:	add	r3, r3, r3, lsl #2
   165c4:	str	r2, [sp, #52]	; 0x34
   165c8:	mov	r2, #6
   165cc:	add	r3, r0, r3, lsl #2
   165d0:	str	r2, [sp, #48]	; 0x30
   165d4:	mov	r0, #4
   165d8:	b	158d4 <__assert_fail@plt+0x4490>
   165dc:	add	r3, r3, r3, lsl #2
   165e0:	mov	r2, #1
   165e4:	add	r3, r3, r3, lsl #2
   165e8:	str	r2, [sp, #52]	; 0x34
   165ec:	mov	r2, #5
   165f0:	add	r3, r0, r3, lsl #2
   165f4:	str	r2, [sp, #48]	; 0x30
   165f8:	mov	r0, #0
   165fc:	b	158d4 <__assert_fail@plt+0x4490>
   16600:	cmp	r1, #0
   16604:	bne	16580 <__assert_fail@plt+0x513c>
   16608:	cmp	r0, #0
   1660c:	bne	165b8 <__assert_fail@plt+0x5174>
   16610:	mov	r2, #1
   16614:	str	r2, [sp, #52]	; 0x34
   16618:	mov	r2, #3
   1661c:	str	r2, [sp, #48]	; 0x30
   16620:	b	158d4 <__assert_fail@plt+0x4490>
   16624:	cmp	sl, #45	; 0x2d
   16628:	movne	r2, #45	; 0x2d
   1662c:	strne	r2, [sp, #52]	; 0x34
   16630:	bne	15ee4 <__assert_fail@plt+0x4aa0>
   16634:	bic	r1, r6, r6, asr #31
   16638:	ldr	r2, [sp, #16]
   1663c:	cmp	r1, #1
   16640:	movcs	r7, r1
   16644:	movcc	r7, #1
   16648:	sub	r2, r2, fp
   1664c:	cmp	r2, r7
   16650:	str	r1, [sp, #48]	; 0x30
   16654:	bls	15444 <__assert_fail@plt+0x4000>
   16658:	cmp	r9, #0
   1665c:	beq	16680 <__assert_fail@plt+0x523c>
   16660:	cmp	r1, #1
   16664:	movls	r2, #0
   16668:	movhi	r2, #1
   1666c:	cmp	r3, #0
   16670:	movne	r2, #0
   16674:	cmp	r2, #0
   16678:	bne	16910 <__assert_fail@plt+0x54cc>
   1667c:	strb	sl, [r9], #1
   16680:	ldr	r2, [sp, #16]
   16684:	add	fp, fp, r7
   16688:	add	r7, r8, #10
   1668c:	sub	r7, r7, r4
   16690:	sub	r2, r2, fp
   16694:	mov	sl, #45	; 0x2d
   16698:	b	159c8 <__assert_fail@plt+0x4584>
   1669c:	bl	1118c <memcpy@plt>
   166a0:	b	15a48 <__assert_fail@plt+0x4604>
   166a4:	bl	1118c <memcpy@plt>
   166a8:	b	15b34 <__assert_fail@plt+0x46f0>
   166ac:	bl	1118c <memcpy@plt>
   166b0:	ldr	r3, [sp, #20]
   166b4:	b	15854 <__assert_fail@plt+0x4410>
   166b8:	sub	r1, r8, #3
   166bc:	mov	r2, r4
   166c0:	mov	r0, r9
   166c4:	str	r3, [sp, #20]
   166c8:	bl	152e8 <__assert_fail@plt+0x3ea4>
   166cc:	ldr	r3, [sp, #20]
   166d0:	b	15854 <__assert_fail@plt+0x4410>
   166d4:	mov	fp, r3
   166d8:	b	1541c <__assert_fail@plt+0x3fd8>
   166dc:	bic	r1, r6, r6, asr #31
   166e0:	cmp	r1, #1
   166e4:	movcs	r8, r1
   166e8:	movcc	r8, #1
   166ec:	cmp	r8, r2
   166f0:	str	r1, [sp, #48]	; 0x30
   166f4:	bcs	15444 <__assert_fail@plt+0x4000>
   166f8:	cmp	r9, #0
   166fc:	beq	16750 <__assert_fail@plt+0x530c>
   16700:	cmp	r1, #1
   16704:	movls	r2, #0
   16708:	movhi	r2, #1
   1670c:	cmp	r3, #0
   16710:	movne	r2, #0
   16714:	cmp	r2, #0
   16718:	beq	16748 <__assert_fail@plt+0x5304>
   1671c:	sub	r2, r6, #1
   16720:	add	r1, r9, r2
   16724:	cmp	sl, #48	; 0x30
   16728:	str	r1, [sp, #56]	; 0x38
   1672c:	str	r3, [sp, #60]	; 0x3c
   16730:	mov	r0, r9
   16734:	beq	169fc <__assert_fail@plt+0x55b8>
   16738:	mov	r1, #32
   1673c:	bl	11354 <memset@plt>
   16740:	ldr	r9, [sp, #56]	; 0x38
   16744:	ldr	r3, [sp, #60]	; 0x3c
   16748:	ldr	r2, [sp, #52]	; 0x34
   1674c:	strb	r2, [r9], #1
   16750:	ldr	r2, [sp, #16]
   16754:	add	fp, fp, r8
   16758:	sub	r2, r2, fp
   1675c:	b	159c8 <__assert_fail@plt+0x4584>
   16760:	mov	r1, #0
   16764:	str	r1, [sp, #52]	; 0x34
   16768:	ldr	r7, [sp, #48]	; 0x30
   1676c:	cmp	r7, r2
   16770:	bcs	15444 <__assert_fail@plt+0x4000>
   16774:	cmp	r9, #0
   16778:	beq	16798 <__assert_fail@plt+0x5354>
   1677c:	mov	r0, r9
   16780:	mov	r2, r7
   16784:	mov	r1, #32
   16788:	str	r3, [sp, #56]	; 0x38
   1678c:	bl	11354 <memset@plt>
   16790:	ldr	r3, [sp, #56]	; 0x38
   16794:	add	r9, r9, r7
   16798:	ldr	r2, [sp, #48]	; 0x30
   1679c:	cmp	r2, r6
   167a0:	add	fp, fp, r2
   167a4:	sublt	r6, r6, r2
   167a8:	ldr	r2, [sp, #52]	; 0x34
   167ac:	movge	r6, #0
   167b0:	cmp	r2, #0
   167b4:	ldr	r2, [sp, #16]
   167b8:	sub	r2, r2, fp
   167bc:	bne	167e8 <__assert_fail@plt+0x53a4>
   167c0:	add	r7, r8, #10
   167c4:	sub	r7, r7, r4
   167c8:	str	r6, [sp, #48]	; 0x30
   167cc:	mov	sl, #95	; 0x5f
   167d0:	b	159c8 <__assert_fail@plt+0x4584>
   167d4:	mov	r3, #0
   167d8:	str	r3, [sp, #48]	; 0x30
   167dc:	b	158ec <__assert_fail@plt+0x44a8>
   167e0:	mov	sl, #43	; 0x2b
   167e4:	b	16634 <__assert_fail@plt+0x51f0>
   167e8:	cmp	r6, #1
   167ec:	movcs	sl, r6
   167f0:	movcc	sl, #1
   167f4:	cmp	sl, r2
   167f8:	bcs	15444 <__assert_fail@plt+0x4000>
   167fc:	cmp	r9, #0
   16800:	beq	16828 <__assert_fail@plt+0x53e4>
   16804:	cmp	r6, #1
   16808:	movls	r2, #0
   1680c:	movhi	r2, #1
   16810:	cmp	r3, #0
   16814:	movne	r2, #0
   16818:	cmp	r2, #0
   1681c:	bne	16a28 <__assert_fail@plt+0x55e4>
   16820:	ldr	r2, [sp, #52]	; 0x34
   16824:	strb	r2, [r9], #1
   16828:	ldr	r2, [sp, #16]
   1682c:	add	fp, fp, sl
   16830:	add	r7, r8, #10
   16834:	sub	r7, r7, r4
   16838:	sub	r2, r2, fp
   1683c:	str	r6, [sp, #48]	; 0x30
   16840:	mov	sl, #95	; 0x5f
   16844:	b	159c8 <__assert_fail@plt+0x4584>
   16848:	sub	r0, r1, #1
   1684c:	tst	r0, #3
   16850:	ldrne	r1, [pc, #-1268]	; 16364 <__assert_fail@plt+0x4f20>
   16854:	bne	16898 <__assert_fail@plt+0x5454>
   16858:	ldr	r3, [pc, #-1280]	; 16360 <__assert_fail@plt+0x4f1c>
   1685c:	smull	r3, r2, r3, r0
   16860:	asr	r3, r0, #31
   16864:	rsb	r3, r3, r2, asr #5
   16868:	add	r3, r3, r3, lsl #2
   1686c:	add	r3, r3, r3, lsl #2
   16870:	cmp	r0, r3, lsl #2
   16874:	ldrne	r1, [pc, #-1300]	; 16368 <__assert_fail@plt+0x4f24>
   16878:	bne	16898 <__assert_fail@plt+0x5454>
   1687c:	mov	r1, #400	; 0x190
   16880:	bl	1c1f8 <__assert_fail@plt+0xadb4>
   16884:	ldr	r3, [pc, #-1320]	; 16364 <__assert_fail@plt+0x4f20>
   16888:	ldr	r2, [pc, #-1320]	; 16368 <__assert_fail@plt+0x4f24>
   1688c:	cmp	r1, #0
   16890:	movne	r1, r3
   16894:	moveq	r1, r2
   16898:	ldr	r3, [sp, #48]	; 0x30
   1689c:	mvn	r2, #0
   168a0:	add	ip, r3, r1
   168a4:	ldr	r3, [sp, #52]	; 0x34
   168a8:	ldr	r1, [pc, #-1344]	; 16370 <__assert_fail@plt+0x4f2c>
   168ac:	sub	r3, ip, r3
   168b0:	add	r3, r3, #380	; 0x17c
   168b4:	add	r3, r3, #2
   168b8:	smull	r0, r1, r1, r3
   168bc:	add	r0, r1, r3
   168c0:	asr	r1, r3, #31
   168c4:	rsb	r1, r1, r0, asr #2
   168c8:	rsb	r1, r1, r1, lsl #3
   168cc:	sub	r3, r3, r1
   168d0:	sub	r3, ip, r3
   168d4:	add	r3, r3, #3
   168d8:	b	161e4 <__assert_fail@plt+0x4da0>
   168dc:	cmp	r6, #8
   168e0:	bgt	16a60 <__assert_fail@plt+0x561c>
   168e4:	ldr	r3, [sp, #1196]	; 0x4ac
   168e8:	mov	r2, r6
   168ec:	ldr	r1, [pc, #-1416]	; 1636c <__assert_fail@plt+0x4f28>
   168f0:	add	r2, r2, #1
   168f4:	cmp	r2, #9
   168f8:	smull	r0, r1, r1, r3
   168fc:	asr	r3, r3, #31
   16900:	rsb	r3, r3, r1, asr #2
   16904:	bne	168ec <__assert_fail@plt+0x54a8>
   16908:	str	r6, [sp, #48]	; 0x30
   1690c:	b	158c8 <__assert_fail@plt+0x4484>
   16910:	str	r3, [sp, #56]	; 0x38
   16914:	sub	r3, r6, #1
   16918:	mov	r2, r3
   1691c:	mov	r0, r9
   16920:	mov	r1, #32
   16924:	str	r3, [sp, #52]	; 0x34
   16928:	bl	11354 <memset@plt>
   1692c:	ldr	r3, [sp, #52]	; 0x34
   16930:	add	r9, r9, r3
   16934:	ldr	r3, [sp, #56]	; 0x38
   16938:	b	1667c <__assert_fail@plt+0x5238>
   1693c:	ldr	r2, [pc, #-1492]	; 16370 <__assert_fail@plt+0x4f2c>
   16940:	smull	r1, r2, r2, r3
   16944:	add	r2, r2, r3
   16948:	asr	r3, r3, #31
   1694c:	rsb	r3, r3, r2, asr #2
   16950:	mov	r2, #2
   16954:	add	r3, r3, #1
   16958:	str	r2, [sp, #48]	; 0x30
   1695c:	b	158c8 <__assert_fail@plt+0x4484>
   16960:	ldr	lr, [pc, #-1524]	; 16374 <__assert_fail@plt+0x4f30>
   16964:	add	r3, r8, #1888	; 0x760
   16968:	sub	lr, lr, r2
   1696c:	add	r3, r3, #12
   16970:	cmp	r8, lr
   16974:	mov	r0, #0
   16978:	add	r3, r3, r2
   1697c:	mov	r2, #4
   16980:	movge	lr, #0
   16984:	movlt	lr, #1
   16988:	str	r0, [sp, #52]	; 0x34
   1698c:	str	r2, [sp, #48]	; 0x30
   16990:	b	158d4 <__assert_fail@plt+0x4490>
   16994:	ldr	r1, [pc, #-1576]	; 16374 <__assert_fail@plt+0x4f30>
   16998:	cmp	r2, r1
   1699c:	blt	16240 <__assert_fail@plt+0x4dfc>
   169a0:	mov	r2, #2
   169a4:	add	r3, r3, #100	; 0x64
   169a8:	str	r2, [sp, #48]	; 0x30
   169ac:	b	158c8 <__assert_fail@plt+0x4484>
   169b0:	bl	1118c <memcpy@plt>
   169b4:	b	16060 <__assert_fail@plt+0x4c1c>
   169b8:	mov	r2, r7
   169bc:	ldr	r1, [sp, #40]	; 0x28
   169c0:	mov	r0, r9
   169c4:	bl	152e8 <__assert_fail@plt+0x3ea4>
   169c8:	b	16060 <__assert_fail@plt+0x4c1c>
   169cc:	add	r1, r5, #2
   169d0:	mov	r0, #1
   169d4:	mov	r2, r1
   169d8:	ldrb	r3, [r1], #1
   169dc:	add	r0, r0, #1
   169e0:	cmp	r3, #58	; 0x3a
   169e4:	beq	169d4 <__assert_fail@plt+0x5590>
   169e8:	str	r0, [sp, #48]	; 0x30
   169ec:	b	16558 <__assert_fail@plt+0x5114>
   169f0:	mov	r7, r5
   169f4:	mov	r4, #1
   169f8:	b	15adc <__assert_fail@plt+0x4698>
   169fc:	mov	r1, sl
   16a00:	ldr	r9, [sp, #56]	; 0x38
   16a04:	bl	11354 <memset@plt>
   16a08:	ldr	r3, [sp, #60]	; 0x3c
   16a0c:	b	16748 <__assert_fail@plt+0x5304>
   16a10:	mov	r0, r9
   16a14:	mov	r1, sl
   16a18:	bl	11354 <memset@plt>
   16a1c:	mov	r9, r7
   16a20:	ldrb	r4, [r5]
   16a24:	b	16538 <__assert_fail@plt+0x50f4>
   16a28:	sub	r7, r6, #1
   16a2c:	mov	r0, r9
   16a30:	mov	r2, r7
   16a34:	mov	r1, #32
   16a38:	str	r3, [sp, #48]	; 0x30
   16a3c:	add	r9, r9, r7
   16a40:	bl	11354 <memset@plt>
   16a44:	ldr	r3, [sp, #48]	; 0x30
   16a48:	b	16820 <__assert_fail@plt+0x53dc>
   16a4c:	mov	r1, sl
   16a50:	bl	11354 <memset@plt>
   16a54:	mov	r9, r8
   16a58:	ldr	r3, [sp, #56]	; 0x38
   16a5c:	b	15f80 <__assert_fail@plt+0x4b3c>
   16a60:	ldr	r3, [sp, #1196]	; 0x4ac
   16a64:	str	r6, [sp, #48]	; 0x30
   16a68:	b	158c8 <__assert_fail@plt+0x4484>
   16a6c:	bl	111c8 <__stack_chk_fail@plt>
   16a70:	mov	r3, #0
   16a74:	str	r3, [sp, #48]	; 0x30
   16a78:	b	15900 <__assert_fail@plt+0x44bc>
   16a7c:	mov	r5, r7
   16a80:	b	15aa8 <__assert_fail@plt+0x4664>
   16a84:	ldrb	r3, [r5]
   16a88:	mov	r7, r5
   16a8c:	b	162b0 <__assert_fail@plt+0x4e6c>
   16a90:	push	{r4, r5, lr}
   16a94:	sub	sp, sp, #28
   16a98:	ldr	r4, [pc, #72]	; 16ae8 <__assert_fail@plt+0x56a4>
   16a9c:	ldr	ip, [sp, #44]	; 0x2c
   16aa0:	ldr	r5, [sp, #40]	; 0x28
   16aa4:	ldr	lr, [r4]
   16aa8:	str	ip, [sp, #12]
   16aac:	str	lr, [sp, #20]
   16ab0:	mov	ip, #0
   16ab4:	add	lr, sp, #19
   16ab8:	str	r5, [sp, #8]
   16abc:	str	ip, [sp]
   16ac0:	str	lr, [sp, #4]
   16ac4:	strb	ip, [sp, #19]
   16ac8:	bl	15368 <__assert_fail@plt+0x3f24>
   16acc:	ldr	r2, [sp, #20]
   16ad0:	ldr	r3, [r4]
   16ad4:	cmp	r2, r3
   16ad8:	bne	16ae4 <__assert_fail@plt+0x56a0>
   16adc:	add	sp, sp, #28
   16ae0:	pop	{r4, r5, pc}
   16ae4:	bl	111c8 <__stack_chk_fail@plt>
   16ae8:	andeq	lr, r2, r8, lsl #30
   16aec:	push	{r4, r5, r6, lr}
   16af0:	subs	r4, r0, #0
   16af4:	beq	16b68 <__assert_fail@plt+0x5724>
   16af8:	mov	r1, #47	; 0x2f
   16afc:	bl	113cc <strrchr@plt>
   16b00:	subs	r5, r0, #0
   16b04:	beq	16b54 <__assert_fail@plt+0x5710>
   16b08:	add	r6, r5, #1
   16b0c:	sub	r3, r6, r4
   16b10:	cmp	r3, #6
   16b14:	ble	16b54 <__assert_fail@plt+0x5710>
   16b18:	mov	r2, #7
   16b1c:	ldr	r1, [pc, #96]	; 16b84 <__assert_fail@plt+0x5740>
   16b20:	sub	r0, r5, #6
   16b24:	bl	11420 <strncmp@plt>
   16b28:	cmp	r0, #0
   16b2c:	bne	16b54 <__assert_fail@plt+0x5710>
   16b30:	mov	r2, #3
   16b34:	ldr	r1, [pc, #76]	; 16b88 <__assert_fail@plt+0x5744>
   16b38:	mov	r0, r6
   16b3c:	bl	11420 <strncmp@plt>
   16b40:	cmp	r0, #0
   16b44:	movne	r4, r6
   16b48:	ldreq	r3, [pc, #60]	; 16b8c <__assert_fail@plt+0x5748>
   16b4c:	addeq	r4, r5, #4
   16b50:	streq	r4, [r3]
   16b54:	ldr	r2, [pc, #52]	; 16b90 <__assert_fail@plt+0x574c>
   16b58:	ldr	r3, [pc, #52]	; 16b94 <__assert_fail@plt+0x5750>
   16b5c:	str	r4, [r2]
   16b60:	str	r4, [r3]
   16b64:	pop	{r4, r5, r6, pc}
   16b68:	ldr	r3, [pc, #40]	; 16b98 <__assert_fail@plt+0x5754>
   16b6c:	mov	r2, #55	; 0x37
   16b70:	mov	r1, #1
   16b74:	ldr	r3, [r3]
   16b78:	ldr	r0, [pc, #28]	; 16b9c <__assert_fail@plt+0x5758>
   16b7c:	bl	11228 <fwrite@plt>
   16b80:	bl	1142c <abort@plt>
   16b84:	andeq	sp, r1, r4, lsr sp
   16b88:	andeq	sp, r1, ip, lsr sp
   16b8c:	andeq	pc, r2, r8, asr #3
   16b90:			; <UNDEFINED> instruction: 0x0002f2b4
   16b94:	andeq	pc, r2, ip, asr #3
   16b98:	ldrdeq	pc, [r2], -r8
   16b9c:	strdeq	sp, [r1], -ip
   16ba0:	push	{r4, lr}
   16ba4:	mov	r2, #48	; 0x30
   16ba8:	mov	r4, r1
   16bac:	mov	r1, #0
   16bb0:	bl	11354 <memset@plt>
   16bb4:	cmp	r4, #10
   16bb8:	beq	16bc4 <__assert_fail@plt+0x5780>
   16bbc:	str	r4, [r0]
   16bc0:	pop	{r4, pc}
   16bc4:	bl	1142c <abort@plt>
   16bc8:	push	{r4, r5, r6, lr}
   16bcc:	mov	r2, #5
   16bd0:	mov	r5, r0
   16bd4:	mov	r6, r1
   16bd8:	mov	r1, r0
   16bdc:	mov	r0, #0
   16be0:	bl	111bc <dcgettext@plt>
   16be4:	cmp	r5, r0
   16be8:	mov	r4, r0
   16bec:	beq	16bf8 <__assert_fail@plt+0x57b4>
   16bf0:	mov	r0, r4
   16bf4:	pop	{r4, r5, r6, pc}
   16bf8:	bl	1bd98 <__assert_fail@plt+0xa954>
   16bfc:	ldrb	r3, [r0]
   16c00:	bic	r3, r3, #32
   16c04:	cmp	r3, #85	; 0x55
   16c08:	bne	16c68 <__assert_fail@plt+0x5824>
   16c0c:	ldrb	r3, [r0, #1]
   16c10:	bic	r3, r3, #32
   16c14:	cmp	r3, #84	; 0x54
   16c18:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c1c:	ldrb	r3, [r0, #2]
   16c20:	bic	r3, r3, #32
   16c24:	cmp	r3, #70	; 0x46
   16c28:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c2c:	ldrb	r3, [r0, #3]
   16c30:	cmp	r3, #45	; 0x2d
   16c34:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c38:	ldrb	r3, [r0, #4]
   16c3c:	cmp	r3, #56	; 0x38
   16c40:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c44:	ldrb	r3, [r0, #5]
   16c48:	cmp	r3, #0
   16c4c:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c50:	ldrb	r2, [r4]
   16c54:	ldr	r3, [pc, #156]	; 16cf8 <__assert_fail@plt+0x58b4>
   16c58:	ldr	r4, [pc, #156]	; 16cfc <__assert_fail@plt+0x58b8>
   16c5c:	cmp	r2, #96	; 0x60
   16c60:	movne	r4, r3
   16c64:	b	16bf0 <__assert_fail@plt+0x57ac>
   16c68:	cmp	r3, #71	; 0x47
   16c6c:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c70:	ldrb	r3, [r0, #1]
   16c74:	bic	r3, r3, #32
   16c78:	cmp	r3, #66	; 0x42
   16c7c:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c80:	ldrb	r3, [r0, #2]
   16c84:	cmp	r3, #49	; 0x31
   16c88:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c8c:	ldrb	r3, [r0, #3]
   16c90:	cmp	r3, #56	; 0x38
   16c94:	bne	16ce0 <__assert_fail@plt+0x589c>
   16c98:	ldrb	r3, [r0, #4]
   16c9c:	cmp	r3, #48	; 0x30
   16ca0:	bne	16ce0 <__assert_fail@plt+0x589c>
   16ca4:	ldrb	r3, [r0, #5]
   16ca8:	cmp	r3, #51	; 0x33
   16cac:	bne	16ce0 <__assert_fail@plt+0x589c>
   16cb0:	ldrb	r3, [r0, #6]
   16cb4:	cmp	r3, #48	; 0x30
   16cb8:	bne	16ce0 <__assert_fail@plt+0x589c>
   16cbc:	ldrb	r3, [r0, #7]
   16cc0:	cmp	r3, #0
   16cc4:	bne	16ce0 <__assert_fail@plt+0x589c>
   16cc8:	ldrb	r2, [r4]
   16ccc:	ldr	r3, [pc, #44]	; 16d00 <__assert_fail@plt+0x58bc>
   16cd0:	ldr	r4, [pc, #44]	; 16d04 <__assert_fail@plt+0x58c0>
   16cd4:	cmp	r2, #96	; 0x60
   16cd8:	movne	r4, r3
   16cdc:	b	16bf0 <__assert_fail@plt+0x57ac>
   16ce0:	ldr	r3, [pc, #32]	; 16d08 <__assert_fail@plt+0x58c4>
   16ce4:	ldr	r4, [pc, #32]	; 16d0c <__assert_fail@plt+0x58c8>
   16ce8:	cmp	r6, #9
   16cec:	movne	r4, r3
   16cf0:	mov	r0, r4
   16cf4:	pop	{r4, r5, r6, pc}
   16cf8:	muleq	r1, r8, sp
   16cfc:	andeq	sp, r1, r4, lsr #27
   16d00:	muleq	r1, ip, sp
   16d04:	andeq	sp, r1, r0, lsr #27
   16d08:	andeq	sp, r1, r8, lsr #27
   16d0c:	muleq	r1, r4, sp
   16d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d14:	sub	sp, sp, #124	; 0x7c
   16d18:	ldr	ip, [pc, #3576]	; 17b18 <__assert_fail@plt+0x66d4>
   16d1c:	str	r3, [sp, #24]
   16d20:	ldr	r3, [sp, #168]	; 0xa8
   16d24:	ldr	ip, [ip]
   16d28:	str	r3, [sp, #56]	; 0x38
   16d2c:	ldr	r3, [sp, #172]	; 0xac
   16d30:	ldr	r8, [sp, #160]	; 0xa0
   16d34:	str	r3, [sp, #80]	; 0x50
   16d38:	ldr	r3, [sp, #176]	; 0xb0
   16d3c:	mov	fp, r0
   16d40:	str	r3, [sp, #76]	; 0x4c
   16d44:	mov	sl, r1
   16d48:	str	r2, [sp, #36]	; 0x24
   16d4c:	str	ip, [sp, #116]	; 0x74
   16d50:	bl	11240 <__ctype_get_mb_cur_max@plt>
   16d54:	ldr	r3, [sp, #164]	; 0xa4
   16d58:	ands	r4, r3, #2
   16d5c:	movne	r3, #1
   16d60:	moveq	r3, #0
   16d64:	str	r3, [sp, #32]
   16d68:	str	r0, [sp, #64]	; 0x40
   16d6c:	cmp	r8, #10
   16d70:	ldrls	pc, [pc, r8, lsl #2]
   16d74:	b	18524 <__assert_fail@plt+0x70e0>
   16d78:	andeq	r7, r1, ip, ror #2
   16d7c:	andeq	r7, r1, r4, lsl #4
   16d80:	andeq	r7, r1, r4, lsl #16
   16d84:	andeq	r7, r1, r4, lsr #4
   16d88:	ldrdeq	r7, [r1], -r8
   16d8c:	andeq	r7, r1, r0, lsr #2
   16d90:	muleq	r1, ip, r1
   16d94:	ldrdeq	r7, [r1], -r4
   16d98:	andeq	r6, r1, r4, lsr #27
   16d9c:	andeq	r6, r1, r4, lsr #27
   16da0:	andeq	r6, r1, r4, lsr #27
   16da4:	cmp	r8, #10
   16da8:	beq	16dcc <__assert_fail@plt+0x5988>
   16dac:	mov	r1, r8
   16db0:	ldr	r0, [pc, #3428]	; 17b1c <__assert_fail@plt+0x66d8>
   16db4:	bl	16bc8 <__assert_fail@plt+0x5784>
   16db8:	mov	r1, r8
   16dbc:	str	r0, [sp, #80]	; 0x50
   16dc0:	ldr	r0, [pc, #3420]	; 17b24 <__assert_fail@plt+0x66e0>
   16dc4:	bl	16bc8 <__assert_fail@plt+0x5784>
   16dc8:	str	r0, [sp, #76]	; 0x4c
   16dcc:	cmp	r4, #0
   16dd0:	movne	r4, #0
   16dd4:	beq	181e4 <__assert_fail@plt+0x6da0>
   16dd8:	ldr	r7, [sp, #76]	; 0x4c
   16ddc:	mov	r5, #0
   16de0:	mov	r6, #1
   16de4:	mov	r0, r7
   16de8:	str	r6, [sp, #40]	; 0x28
   16dec:	str	r5, [sp, #68]	; 0x44
   16df0:	bl	11300 <strlen@plt>
   16df4:	str	r6, [sp, #28]
   16df8:	str	r5, [sp, #44]	; 0x2c
   16dfc:	str	r5, [sp, #72]	; 0x48
   16e00:	str	r7, [sp, #60]	; 0x3c
   16e04:	str	r0, [sp, #52]	; 0x34
   16e08:	str	r8, [sp, #160]	; 0xa0
   16e0c:	mov	r8, fp
   16e10:	ldr	fp, [sp, #160]	; 0xa0
   16e14:	mov	r9, #0
   16e18:	ldr	r3, [sp, #24]
   16e1c:	cmn	r3, #1
   16e20:	beq	17388 <__assert_fail@plt+0x5f44>
   16e24:	ldr	r3, [sp, #24]
   16e28:	subs	r6, r3, r9
   16e2c:	movne	r6, #1
   16e30:	cmp	r6, #0
   16e34:	beq	173a0 <__assert_fail@plt+0x5f5c>
   16e38:	ldr	r7, [sp, #28]
   16e3c:	ldr	r0, [sp, #36]	; 0x24
   16e40:	cmp	fp, #2
   16e44:	moveq	r7, #0
   16e48:	andne	r7, r7, #1
   16e4c:	add	r3, r0, r9
   16e50:	cmp	r7, #0
   16e54:	str	r3, [sp, #48]	; 0x30
   16e58:	beq	17844 <__assert_fail@plt+0x6400>
   16e5c:	ldr	r2, [sp, #52]	; 0x34
   16e60:	cmp	r2, #0
   16e64:	beq	17b28 <__assert_fail@plt+0x66e4>
   16e68:	ldr	r1, [sp, #24]
   16e6c:	cmp	r2, #1
   16e70:	mov	r3, r2
   16e74:	movls	r3, #0
   16e78:	movhi	r3, #1
   16e7c:	cmn	r1, #1
   16e80:	movne	r3, #0
   16e84:	cmp	r3, #0
   16e88:	add	r5, r9, r2
   16e8c:	beq	16e98 <__assert_fail@plt+0x5a54>
   16e90:	bl	11300 <strlen@plt>
   16e94:	str	r0, [sp, #24]
   16e98:	ldr	r3, [sp, #24]
   16e9c:	cmp	r5, r3
   16ea0:	bhi	17b28 <__assert_fail@plt+0x66e4>
   16ea4:	ldr	r2, [sp, #52]	; 0x34
   16ea8:	ldr	r1, [sp, #60]	; 0x3c
   16eac:	ldr	r0, [sp, #48]	; 0x30
   16eb0:	bl	111b0 <memcmp@plt>
   16eb4:	cmp	r0, #0
   16eb8:	bne	17b28 <__assert_fail@plt+0x66e4>
   16ebc:	ldr	r3, [sp, #32]
   16ec0:	cmp	r3, #0
   16ec4:	bne	183e4 <__assert_fail@plt+0x6fa0>
   16ec8:	ldr	r3, [sp, #48]	; 0x30
   16ecc:	ldrb	r5, [r3]
   16ed0:	cmp	r5, #126	; 0x7e
   16ed4:	ldrls	pc, [pc, r5, lsl #2]
   16ed8:	b	177a8 <__assert_fail@plt+0x6364>
   16edc:	muleq	r1, r4, r6
   16ee0:	andeq	r7, r1, r8, lsr #15
   16ee4:	andeq	r7, r1, r8, lsr #15
   16ee8:	andeq	r7, r1, r8, lsr #15
   16eec:	andeq	r7, r1, r8, lsr #15
   16ef0:	andeq	r7, r1, r8, lsr #15
   16ef4:	andeq	r7, r1, r8, lsr #15
   16ef8:	andeq	r7, r1, r0, ror #14
   16efc:	andeq	r7, r1, r0, asr r7
   16f00:	andeq	r7, r1, r0, asr r6
   16f04:	andeq	r7, r1, r8, lsl r6
   16f08:	andeq	r7, r1, r0, ror r6
   16f0c:	andeq	r7, r1, r8, asr r6
   16f10:	andeq	r7, r1, r8, lsl #11
   16f14:	andeq	r7, r1, r8, lsr #15
   16f18:	andeq	r7, r1, r8, lsr #15
   16f1c:	andeq	r7, r1, r8, lsr #15
   16f20:	andeq	r7, r1, r8, lsr #15
   16f24:	andeq	r7, r1, r8, lsr #15
   16f28:	andeq	r7, r1, r8, lsr #15
   16f2c:	andeq	r7, r1, r8, lsr #15
   16f30:	andeq	r7, r1, r8, lsr #15
   16f34:	andeq	r7, r1, r8, lsr #15
   16f38:	andeq	r7, r1, r8, lsr #15
   16f3c:	andeq	r7, r1, r8, lsr #15
   16f40:	andeq	r7, r1, r8, lsr #15
   16f44:	andeq	r7, r1, r8, lsr #15
   16f48:	andeq	r7, r1, r8, lsr #15
   16f4c:	andeq	r7, r1, r8, lsr #15
   16f50:	andeq	r7, r1, r8, lsr #15
   16f54:	andeq	r7, r1, r8, lsr #15
   16f58:	andeq	r7, r1, r8, lsr #15
   16f5c:	andeq	r7, r1, r8, ror #14
   16f60:	andeq	r7, r1, ip, ror r6
   16f64:	andeq	r7, r1, ip, ror r6
   16f68:	andeq	r7, r1, r0, lsl #15
   16f6c:	andeq	r7, r1, ip, ror r6
   16f70:	muleq	r1, ip, r7
   16f74:	andeq	r7, r1, ip, ror r6
   16f78:			; <UNDEFINED> instruction: 0x000174bc
   16f7c:	andeq	r7, r1, ip, ror r6
   16f80:	andeq	r7, r1, ip, ror r6
   16f84:	andeq	r7, r1, ip, ror r6
   16f88:	muleq	r1, ip, r7
   16f8c:	muleq	r1, ip, r7
   16f90:	muleq	r1, ip, r7
   16f94:	muleq	r1, ip, r7
   16f98:	muleq	r1, ip, r7
   16f9c:	muleq	r1, ip, r7
   16fa0:	muleq	r1, ip, r7
   16fa4:	muleq	r1, ip, r7
   16fa8:	muleq	r1, ip, r7
   16fac:	muleq	r1, ip, r7
   16fb0:	muleq	r1, ip, r7
   16fb4:	muleq	r1, ip, r7
   16fb8:	muleq	r1, ip, r7
   16fbc:	muleq	r1, ip, r7
   16fc0:	muleq	r1, ip, r7
   16fc4:	muleq	r1, ip, r7
   16fc8:	andeq	r7, r1, ip, ror r6
   16fcc:	andeq	r7, r1, ip, ror r6
   16fd0:	andeq	r7, r1, ip, ror r6
   16fd4:	andeq	r7, r1, ip, ror r6
   16fd8:	muleq	r1, r0, r4
   16fdc:	andeq	r7, r1, r8, lsr #15
   16fe0:	muleq	r1, ip, r7
   16fe4:	muleq	r1, ip, r7
   16fe8:	muleq	r1, ip, r7
   16fec:	muleq	r1, ip, r7
   16ff0:	muleq	r1, ip, r7
   16ff4:	muleq	r1, ip, r7
   16ff8:	muleq	r1, ip, r7
   16ffc:	muleq	r1, ip, r7
   17000:	muleq	r1, ip, r7
   17004:	muleq	r1, ip, r7
   17008:	muleq	r1, ip, r7
   1700c:	muleq	r1, ip, r7
   17010:	muleq	r1, ip, r7
   17014:	muleq	r1, ip, r7
   17018:	muleq	r1, ip, r7
   1701c:	muleq	r1, ip, r7
   17020:	muleq	r1, ip, r7
   17024:	muleq	r1, ip, r7
   17028:	muleq	r1, ip, r7
   1702c:	muleq	r1, ip, r7
   17030:	muleq	r1, ip, r7
   17034:	muleq	r1, ip, r7
   17038:	muleq	r1, ip, r7
   1703c:	muleq	r1, ip, r7
   17040:	muleq	r1, ip, r7
   17044:	muleq	r1, ip, r7
   17048:	andeq	r7, r1, ip, ror r6
   1704c:	andeq	r7, r1, r8, asr #8
   17050:	muleq	r1, ip, r7
   17054:	andeq	r7, r1, ip, ror r6
   17058:	muleq	r1, ip, r7
   1705c:	andeq	r7, r1, ip, ror r6
   17060:	muleq	r1, ip, r7
   17064:	muleq	r1, ip, r7
   17068:	muleq	r1, ip, r7
   1706c:	muleq	r1, ip, r7
   17070:	muleq	r1, ip, r7
   17074:	muleq	r1, ip, r7
   17078:	muleq	r1, ip, r7
   1707c:	muleq	r1, ip, r7
   17080:	muleq	r1, ip, r7
   17084:	muleq	r1, ip, r7
   17088:	muleq	r1, ip, r7
   1708c:	muleq	r1, ip, r7
   17090:	muleq	r1, ip, r7
   17094:	muleq	r1, ip, r7
   17098:	muleq	r1, ip, r7
   1709c:	muleq	r1, ip, r7
   170a0:	muleq	r1, ip, r7
   170a4:	muleq	r1, ip, r7
   170a8:	muleq	r1, ip, r7
   170ac:	muleq	r1, ip, r7
   170b0:	muleq	r1, ip, r7
   170b4:	muleq	r1, ip, r7
   170b8:	muleq	r1, ip, r7
   170bc:	muleq	r1, ip, r7
   170c0:	muleq	r1, ip, r7
   170c4:	muleq	r1, ip, r7
   170c8:	andeq	r7, r1, r0, ror #4
   170cc:	andeq	r7, r1, ip, ror r6
   170d0:	andeq	r7, r1, r0, ror #4
   170d4:	andeq	r7, r1, r0, lsl #15
   170d8:	cmp	r4, #0
   170dc:	moveq	r3, #1
   170e0:	streq	r3, [sp, #28]
   170e4:	beq	17810 <__assert_fail@plt+0x63cc>
   170e8:	mov	r3, #0
   170ec:	mov	r4, r3
   170f0:	mov	r2, #1
   170f4:	str	r2, [sp, #40]	; 0x28
   170f8:	str	r3, [sp, #68]	; 0x44
   170fc:	str	r2, [sp, #32]
   17100:	str	r2, [sp, #52]	; 0x34
   17104:	ldr	r3, [pc, #2584]	; 17b24 <__assert_fail@plt+0x66e0>
   17108:	str	r4, [sp, #44]	; 0x2c
   1710c:	str	r4, [sp, #72]	; 0x48
   17110:	str	r4, [sp, #28]
   17114:	str	r3, [sp, #60]	; 0x3c
   17118:	mov	r8, #2
   1711c:	b	16e08 <__assert_fail@plt+0x59c4>
   17120:	cmp	r4, #0
   17124:	bne	183b0 <__assert_fail@plt+0x6f6c>
   17128:	cmp	sl, #0
   1712c:	beq	18170 <__assert_fail@plt+0x6d2c>
   17130:	mov	r3, #34	; 0x22
   17134:	strb	r3, [fp]
   17138:	ldr	r3, [pc, #2528]	; 17b20 <__assert_fail@plt+0x66dc>
   1713c:	mov	r1, r4
   17140:	mov	r2, #1
   17144:	str	r4, [sp, #68]	; 0x44
   17148:	str	r2, [sp, #40]	; 0x28
   1714c:	mov	r4, r2
   17150:	str	r1, [sp, #44]	; 0x2c
   17154:	str	r1, [sp, #72]	; 0x48
   17158:	str	r1, [sp, #32]
   1715c:	str	r2, [sp, #28]
   17160:	str	r2, [sp, #52]	; 0x34
   17164:	str	r3, [sp, #60]	; 0x3c
   17168:	b	16e08 <__assert_fail@plt+0x59c4>
   1716c:	mov	r3, #0
   17170:	str	r3, [sp, #68]	; 0x44
   17174:	str	r3, [sp, #44]	; 0x2c
   17178:	str	r3, [sp, #32]
   1717c:	str	r3, [sp, #28]
   17180:	str	r3, [sp, #60]	; 0x3c
   17184:	mov	r3, #1
   17188:	str	r8, [sp, #72]	; 0x48
   1718c:	str	r8, [sp, #52]	; 0x34
   17190:	mov	r4, r8
   17194:	str	r3, [sp, #40]	; 0x28
   17198:	b	16e08 <__assert_fail@plt+0x59c4>
   1719c:	mov	r3, #1
   171a0:	str	r3, [sp, #40]	; 0x28
   171a4:	str	r3, [sp, #32]
   171a8:	str	r3, [sp, #28]
   171ac:	str	r3, [sp, #52]	; 0x34
   171b0:	ldr	r3, [pc, #2408]	; 17b20 <__assert_fail@plt+0x66dc>
   171b4:	mov	r2, #0
   171b8:	mov	r4, r2
   171bc:	str	r2, [sp, #68]	; 0x44
   171c0:	str	r2, [sp, #44]	; 0x2c
   171c4:	str	r2, [sp, #72]	; 0x48
   171c8:	str	r3, [sp, #60]	; 0x3c
   171cc:	mov	r8, #5
   171d0:	b	16e08 <__assert_fail@plt+0x59c4>
   171d4:	mov	r3, #0
   171d8:	mov	r2, #1
   171dc:	str	r2, [sp, #40]	; 0x28
   171e0:	mov	r4, r3
   171e4:	str	r3, [sp, #68]	; 0x44
   171e8:	str	r2, [sp, #28]
   171ec:	str	r3, [sp, #44]	; 0x2c
   171f0:	str	r3, [sp, #72]	; 0x48
   171f4:	str	r3, [sp, #32]
   171f8:	str	r3, [sp, #52]	; 0x34
   171fc:	str	r3, [sp, #60]	; 0x3c
   17200:	b	16e08 <__assert_fail@plt+0x59c4>
   17204:	mov	r2, #1
   17208:	mov	r3, #0
   1720c:	str	r2, [sp, #40]	; 0x28
   17210:	mov	r4, r3
   17214:	str	r3, [sp, #68]	; 0x44
   17218:	str	r8, [sp, #52]	; 0x34
   1721c:	str	r2, [sp, #32]
   17220:	b	17104 <__assert_fail@plt+0x5cc0>
   17224:	mov	r3, #1
   17228:	str	r3, [sp, #40]	; 0x28
   1722c:	str	r3, [sp, #32]
   17230:	str	r3, [sp, #28]
   17234:	str	r3, [sp, #52]	; 0x34
   17238:	ldr	r3, [pc, #2276]	; 17b24 <__assert_fail@plt+0x66e0>
   1723c:	mov	r2, #0
   17240:	mov	r4, r2
   17244:	str	r2, [sp, #68]	; 0x44
   17248:	str	r2, [sp, #44]	; 0x2c
   1724c:	str	r2, [sp, #72]	; 0x48
   17250:	str	r3, [sp, #60]	; 0x3c
   17254:	mov	r8, #2
   17258:	b	16e08 <__assert_fail@plt+0x59c4>
   1725c:	mov	r7, #0
   17260:	ldr	r3, [sp, #24]
   17264:	cmn	r3, #1
   17268:	beq	17da4 <__assert_fail@plt+0x6960>
   1726c:	ldr	r3, [sp, #24]
   17270:	subs	r3, r3, #1
   17274:	movne	r3, #1
   17278:	cmp	r3, #0
   1727c:	sub	r2, fp, #2
   17280:	clz	r2, r2
   17284:	lsr	r2, r2, #5
   17288:	bne	17484 <__assert_fail@plt+0x6040>
   1728c:	cmp	r9, #0
   17290:	bne	17484 <__assert_fail@plt+0x6040>
   17294:	ldr	r3, [sp, #32]
   17298:	tst	r3, r2
   1729c:	bne	175a4 <__assert_fail@plt+0x6160>
   172a0:	ldr	r3, [sp, #28]
   172a4:	eor	r3, r3, #1
   172a8:	orr	r3, r2, r3
   172ac:	ldr	r2, [sp, #32]
   172b0:	eor	r3, r3, #1
   172b4:	orrs	r3, r2, r3
   172b8:	beq	172e8 <__assert_fail@plt+0x5ea4>
   172bc:	mov	r3, #0
   172c0:	ldr	r1, [sp, #56]	; 0x38
   172c4:	cmp	r1, #0
   172c8:	beq	172e8 <__assert_fail@plt+0x5ea4>
   172cc:	lsr	r2, r5, #5
   172d0:	and	r0, r5, #31
   172d4:	uxtb	r2, r2
   172d8:	ldr	r1, [r1, r2, lsl #2]
   172dc:	lsr	r2, r1, r0
   172e0:	tst	r2, #1
   172e4:	bne	172f0 <__assert_fail@plt+0x5eac>
   172e8:	cmp	r7, #0
   172ec:	beq	17540 <__assert_fail@plt+0x60fc>
   172f0:	sub	r2, fp, #2
   172f4:	clz	r2, r2
   172f8:	lsr	r2, r2, #5
   172fc:	ldr	r3, [sp, #32]
   17300:	cmp	r3, #0
   17304:	bne	17630 <__assert_fail@plt+0x61ec>
   17308:	ldr	r3, [sp, #44]	; 0x2c
   1730c:	eor	r3, r3, #1
   17310:	ands	r3, r2, r3
   17314:	beq	1734c <__assert_fail@plt+0x5f08>
   17318:	cmp	sl, r4
   1731c:	movhi	r2, #39	; 0x27
   17320:	strbhi	r2, [r8, r4]
   17324:	add	r2, r4, #1
   17328:	cmp	r2, sl
   1732c:	movcc	r1, #36	; 0x24
   17330:	strbcc	r1, [r8, r2]
   17334:	add	r2, r4, #2
   17338:	cmp	r2, sl
   1733c:	add	r4, r4, #3
   17340:	movcc	r1, #39	; 0x27
   17344:	strbcc	r1, [r8, r2]
   17348:	str	r3, [sp, #44]	; 0x2c
   1734c:	cmp	r4, sl
   17350:	movcc	r3, #92	; 0x5c
   17354:	strbcc	r3, [r8, r4]
   17358:	add	r9, r9, #1
   1735c:	add	r4, r4, #1
   17360:	cmp	r4, sl
   17364:	ldr	r3, [sp, #40]	; 0x28
   17368:	strbcc	r5, [r8, r4]
   1736c:	cmp	r6, #0
   17370:	moveq	r3, #0
   17374:	str	r3, [sp, #40]	; 0x28
   17378:	ldr	r3, [sp, #24]
   1737c:	add	r4, r4, #1
   17380:	cmn	r3, #1
   17384:	bne	16e24 <__assert_fail@plt+0x59e0>
   17388:	ldr	r3, [sp, #36]	; 0x24
   1738c:	ldrb	r6, [r3, r9]
   17390:	adds	r6, r6, #0
   17394:	movne	r6, #1
   17398:	cmp	r6, #0
   1739c:	bne	16e38 <__assert_fail@plt+0x59f4>
   173a0:	str	fp, [sp, #160]	; 0xa0
   173a4:	mov	fp, r8
   173a8:	ldr	r8, [sp, #160]	; 0xa0
   173ac:	ldr	r1, [sp, #32]
   173b0:	cmp	r4, #0
   173b4:	sub	r2, r8, #2
   173b8:	clz	r2, r2
   173bc:	lsr	r2, r2, #5
   173c0:	andeq	r3, r2, r1
   173c4:	movne	r3, #0
   173c8:	cmp	r3, #0
   173cc:	bne	184b8 <__assert_fail@plt+0x7074>
   173d0:	eor	r3, r1, #1
   173d4:	ands	r2, r2, r3
   173d8:	beq	183f4 <__assert_fail@plt+0x6fb0>
   173dc:	ldr	r3, [sp, #68]	; 0x44
   173e0:	cmp	r3, #0
   173e4:	beq	183f8 <__assert_fail@plt+0x6fb4>
   173e8:	ldr	r3, [sp, #40]	; 0x28
   173ec:	cmp	r3, #0
   173f0:	bne	18474 <__assert_fail@plt+0x7030>
   173f4:	ldr	r3, [sp, #72]	; 0x48
   173f8:	adds	r3, r3, #0
   173fc:	movne	r3, #1
   17400:	cmp	sl, #0
   17404:	movne	r3, #0
   17408:	cmp	r3, #0
   1740c:	ldreq	r2, [sp, #68]	; 0x44
   17410:	beq	183f8 <__assert_fail@plt+0x6fb4>
   17414:	ldr	sl, [sp, #72]	; 0x48
   17418:	str	r3, [sp, #68]	; 0x44
   1741c:	ldr	r3, [pc, #1792]	; 17b24 <__assert_fail@plt+0x66e0>
   17420:	mov	r2, #39	; 0x27
   17424:	mov	r4, #1
   17428:	str	r3, [sp, #60]	; 0x3c
   1742c:	mov	r3, #0
   17430:	strb	r2, [fp]
   17434:	str	r4, [sp, #52]	; 0x34
   17438:	mov	r8, #2
   1743c:	str	r3, [sp, #32]
   17440:	b	16e08 <__assert_fail@plt+0x59c4>
   17444:	mov	r7, #0
   17448:	cmp	fp, #2
   1744c:	beq	17d84 <__assert_fail@plt+0x6940>
   17450:	ldr	r3, [sp, #52]	; 0x34
   17454:	ldr	r2, [sp, #28]
   17458:	ldr	r1, [sp, #32]
   1745c:	cmp	r3, #0
   17460:	andne	r2, r2, r1
   17464:	moveq	r2, #0
   17468:	cmp	r2, #0
   1746c:	moveq	r5, #92	; 0x5c
   17470:	moveq	r3, r5
   17474:	bne	17d90 <__assert_fail@plt+0x694c>
   17478:	ldr	r1, [sp, #28]
   1747c:	cmp	r1, #0
   17480:	bne	18500 <__assert_fail@plt+0x70bc>
   17484:	mov	r6, #0
   17488:	b	172a0 <__assert_fail@plt+0x5e5c>
   1748c:	mov	r7, #0
   17490:	cmp	fp, #2
   17494:	beq	17df4 <__assert_fail@plt+0x69b0>
   17498:	cmp	fp, #5
   1749c:	beq	17db8 <__assert_fail@plt+0x6974>
   174a0:	sub	r2, fp, #2
   174a4:	mov	r6, #0
   174a8:	clz	r2, r2
   174ac:	mov	r5, #63	; 0x3f
   174b0:	lsr	r2, r2, #5
   174b4:	b	172a0 <__assert_fail@plt+0x5e5c>
   174b8:	mov	r7, #0
   174bc:	cmp	fp, #2
   174c0:	strne	r6, [sp, #68]	; 0x44
   174c4:	movne	r2, #0
   174c8:	movne	r5, #39	; 0x27
   174cc:	bne	172a0 <__assert_fail@plt+0x5e5c>
   174d0:	ldr	r3, [sp, #32]
   174d4:	cmp	r3, #0
   174d8:	bne	181d4 <__assert_fail@plt+0x6d90>
   174dc:	cmp	sl, #0
   174e0:	ldr	r3, [sp, #72]	; 0x48
   174e4:	clz	r3, r3
   174e8:	lsr	r3, r3, #5
   174ec:	moveq	r3, #0
   174f0:	cmp	r3, #0
   174f4:	bne	18108 <__assert_fail@plt+0x6cc4>
   174f8:	cmp	sl, r4
   174fc:	movhi	r3, #39	; 0x27
   17500:	strbhi	r3, [r8, r4]
   17504:	add	r3, r4, #1
   17508:	cmp	sl, r3
   1750c:	movhi	r2, #92	; 0x5c
   17510:	strbhi	r2, [r8, r3]
   17514:	add	r3, r4, #2
   17518:	cmp	sl, r3
   1751c:	movhi	r2, #39	; 0x27
   17520:	strbhi	r2, [r8, r3]
   17524:	mov	r3, #0
   17528:	cmp	r7, #0
   1752c:	add	r4, r4, #3
   17530:	str	r3, [sp, #44]	; 0x2c
   17534:	str	r6, [sp, #68]	; 0x44
   17538:	mov	r5, #39	; 0x27
   1753c:	bne	172f0 <__assert_fail@plt+0x5eac>
   17540:	ldr	r2, [sp, #44]	; 0x2c
   17544:	eor	r3, r3, #1
   17548:	and	r3, r3, r2
   1754c:	add	r9, r9, #1
   17550:	uxtb	r3, r3
   17554:	cmp	r3, #0
   17558:	beq	17360 <__assert_fail@plt+0x5f1c>
   1755c:	cmp	sl, r4
   17560:	movhi	r3, #39	; 0x27
   17564:	strbhi	r3, [r8, r4]
   17568:	add	r3, r4, #1
   1756c:	cmp	sl, r3
   17570:	movhi	r2, #39	; 0x27
   17574:	strbhi	r2, [r8, r3]
   17578:	mov	r3, #0
   1757c:	add	r4, r4, #2
   17580:	str	r3, [sp, #44]	; 0x2c
   17584:	b	17360 <__assert_fail@plt+0x5f1c>
   17588:	mov	r3, #114	; 0x72
   1758c:	ldr	r1, [sp, #32]
   17590:	sub	r2, fp, #2
   17594:	clz	r2, r2
   17598:	lsr	r2, r2, #5
   1759c:	tst	r2, r1
   175a0:	beq	17478 <__assert_fail@plt+0x6034>
   175a4:	mov	fp, r8
   175a8:	mov	r8, #2
   175ac:	ldr	r3, [sp, #28]
   175b0:	cmp	r3, #0
   175b4:	movne	r8, #4
   175b8:	ldr	r3, [sp, #164]	; 0xa4
   175bc:	mov	ip, #0
   175c0:	bic	r3, r3, #2
   175c4:	str	r3, [sp, #4]
   175c8:	ldr	r3, [sp, #76]	; 0x4c
   175cc:	str	r8, [sp]
   175d0:	str	r3, [sp, #16]
   175d4:	ldr	r3, [sp, #80]	; 0x50
   175d8:	ldr	r2, [sp, #36]	; 0x24
   175dc:	str	r3, [sp, #12]
   175e0:	mov	r1, sl
   175e4:	ldr	r3, [sp, #24]
   175e8:	mov	r0, fp
   175ec:	str	ip, [sp, #8]
   175f0:	bl	16d10 <__assert_fail@plt+0x58cc>
   175f4:	mov	r4, r0
   175f8:	ldr	r3, [pc, #1304]	; 17b18 <__assert_fail@plt+0x66d4>
   175fc:	ldr	r2, [sp, #116]	; 0x74
   17600:	mov	r0, r4
   17604:	ldr	r3, [r3]
   17608:	cmp	r2, r3
   1760c:	bne	184fc <__assert_fail@plt+0x70b8>
   17610:	add	sp, sp, #124	; 0x7c
   17614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17618:	mov	r5, #110	; 0x6e
   1761c:	ldr	r3, [sp, #32]
   17620:	mov	r2, #0
   17624:	cmp	r3, #0
   17628:	mov	r6, r2
   1762c:	beq	17308 <__assert_fail@plt+0x5ec4>
   17630:	str	fp, [sp, #160]	; 0xa0
   17634:	mov	fp, r8
   17638:	ldr	r8, [sp, #160]	; 0xa0
   1763c:	mov	r3, r2
   17640:	ldr	r2, [sp, #28]
   17644:	and	r2, r2, r3
   17648:	str	r2, [sp, #28]
   1764c:	b	175ac <__assert_fail@plt+0x6168>
   17650:	mov	r5, #116	; 0x74
   17654:	b	1761c <__assert_fail@plt+0x61d8>
   17658:	mov	r5, #102	; 0x66
   1765c:	ldr	r3, [sp, #32]
   17660:	cmp	r3, #0
   17664:	bne	18210 <__assert_fail@plt+0x6dcc>
   17668:	mov	r6, #0
   1766c:	b	1734c <__assert_fail@plt+0x5f08>
   17670:	mov	r5, #118	; 0x76
   17674:	b	1765c <__assert_fail@plt+0x6218>
   17678:	mov	r7, #0
   1767c:	mov	r6, #0
   17680:	b	172bc <__assert_fail@plt+0x5e78>
   17684:	ldr	r3, [sp, #32]
   17688:	cmp	r3, #0
   1768c:	bne	18454 <__assert_fail@plt+0x7010>
   17690:	mov	r7, r3
   17694:	ldr	r3, [sp, #44]	; 0x2c
   17698:	sub	r2, fp, #2
   1769c:	eor	r3, r3, #1
   176a0:	clz	r2, r2
   176a4:	lsr	r2, r2, #5
   176a8:	ands	r3, r2, r3
   176ac:	beq	180f4 <__assert_fail@plt+0x6cb0>
   176b0:	cmp	sl, r4
   176b4:	movhi	r1, #39	; 0x27
   176b8:	strbhi	r1, [r8, r4]
   176bc:	add	r1, r4, #1
   176c0:	cmp	sl, r1
   176c4:	movhi	r0, #36	; 0x24
   176c8:	strbhi	r0, [r8, r1]
   176cc:	add	r1, r4, #2
   176d0:	cmp	sl, r1
   176d4:	movhi	r0, #39	; 0x27
   176d8:	strbhi	r0, [r8, r1]
   176dc:	add	r1, r4, #3
   176e0:	cmp	sl, r1
   176e4:	bls	18154 <__assert_fail@plt+0x6d10>
   176e8:	mov	r4, r1
   176ec:	mov	r1, #92	; 0x5c
   176f0:	strb	r1, [r8, r4]
   176f4:	mov	r1, r4
   176f8:	str	r3, [sp, #44]	; 0x2c
   176fc:	cmp	fp, #2
   17700:	add	r4, r4, #1
   17704:	beq	1819c <__assert_fail@plt+0x6d58>
   17708:	ldr	r0, [sp, #24]
   1770c:	add	r3, r9, #1
   17710:	cmp	r3, r0
   17714:	bcs	1772c <__assert_fail@plt+0x62e8>
   17718:	ldr	r0, [sp, #36]	; 0x24
   1771c:	ldrb	r3, [r0, r3]
   17720:	sub	r3, r3, #48	; 0x30
   17724:	cmp	r3, #9
   17728:	bls	181ac <__assert_fail@plt+0x6d68>
   1772c:	mov	r5, #48	; 0x30
   17730:	ldr	r3, [sp, #28]
   17734:	eor	r3, r3, #1
   17738:	orrs	r2, r2, r3
   1773c:	mov	r3, r6
   17740:	moveq	r6, r2
   17744:	beq	172c0 <__assert_fail@plt+0x5e7c>
   17748:	mov	r6, #0
   1774c:	b	172e8 <__assert_fail@plt+0x5ea4>
   17750:	mov	r2, #0
   17754:	mov	r6, r2
   17758:	mov	r5, #98	; 0x62
   1775c:	b	17308 <__assert_fail@plt+0x5ec4>
   17760:	mov	r5, #97	; 0x61
   17764:	b	17668 <__assert_fail@plt+0x6224>
   17768:	mov	r3, r7
   1776c:	mov	r6, r7
   17770:	mov	r2, #0
   17774:	mov	r7, r3
   17778:	mov	r5, #32
   1777c:	b	172a0 <__assert_fail@plt+0x5e5c>
   17780:	cmp	r9, #0
   17784:	mov	r3, r7
   17788:	bne	17d50 <__assert_fail@plt+0x690c>
   1778c:	mov	r6, r7
   17790:	mov	r2, r9
   17794:	mov	r7, r3
   17798:	b	172a0 <__assert_fail@plt+0x5e5c>
   1779c:	mov	r6, r7
   177a0:	b	172bc <__assert_fail@plt+0x5e78>
   177a4:	mov	r7, #0
   177a8:	ldr	r3, [sp, #64]	; 0x40
   177ac:	cmp	r3, #1
   177b0:	bne	17e0c <__assert_fail@plt+0x69c8>
   177b4:	bl	112e8 <__ctype_b_loc@plt>
   177b8:	ldr	r2, [sp, #64]	; 0x40
   177bc:	sxth	r3, r5
   177c0:	mov	ip, r2
   177c4:	lsl	r3, r3, #1
   177c8:	ldr	r2, [r0]
   177cc:	ldrh	r3, [r2, r3]
   177d0:	and	r3, r3, #16384	; 0x4000
   177d4:	cmp	r3, #0
   177d8:	ldr	r3, [sp, #28]
   177dc:	movne	r6, #1
   177e0:	moveq	r6, #0
   177e4:	movne	r2, #0
   177e8:	andeq	r2, r3, #1
   177ec:	cmp	r2, #0
   177f0:	bne	1811c <__assert_fail@plt+0x6cd8>
   177f4:	sub	r2, fp, #2
   177f8:	clz	r2, r2
   177fc:	lsr	r2, r2, #5
   17800:	b	172a0 <__assert_fail@plt+0x5e5c>
   17804:	cmp	r4, #0
   17808:	bne	184c8 <__assert_fail@plt+0x7084>
   1780c:	str	r4, [sp, #28]
   17810:	cmp	sl, #0
   17814:	bne	1850c <__assert_fail@plt+0x70c8>
   17818:	ldr	r3, [pc, #772]	; 17b24 <__assert_fail@plt+0x66e0>
   1781c:	mov	r4, #1
   17820:	str	r4, [sp, #40]	; 0x28
   17824:	str	r3, [sp, #60]	; 0x3c
   17828:	str	r4, [sp, #52]	; 0x34
   1782c:	str	sl, [sp, #72]	; 0x48
   17830:	str	sl, [sp, #68]	; 0x44
   17834:	str	sl, [sp, #44]	; 0x2c
   17838:	str	sl, [sp, #32]
   1783c:	mov	r8, #2
   17840:	b	16e08 <__assert_fail@plt+0x59c4>
   17844:	ldr	r3, [sp, #36]	; 0x24
   17848:	ldrb	r5, [r3, r9]
   1784c:	cmp	r5, #126	; 0x7e
   17850:	ldrls	pc, [pc, r5, lsl #2]
   17854:	b	177a8 <__assert_fail@plt+0x6364>
   17858:	andeq	r7, r1, ip, lsl #21
   1785c:	andeq	r7, r1, r8, lsr #15
   17860:	andeq	r7, r1, r8, lsr #15
   17864:	andeq	r7, r1, r8, lsr #15
   17868:	andeq	r7, r1, r8, lsr #15
   1786c:	andeq	r7, r1, r8, lsr #15
   17870:	andeq	r7, r1, r8, lsr #15
   17874:	andeq	r7, r1, r8, ror sl
   17878:	andeq	r7, r1, r4, ror #20
   1787c:	andeq	r7, r1, ip, asr sl
   17880:	andeq	r7, r1, r4, asr sl
   17884:	andeq	r7, r1, r4, lsl #22
   17888:	strdeq	r7, [r1], -r0
   1788c:	andeq	r7, r1, r8, lsl #11
   17890:	andeq	r7, r1, r8, lsr #15
   17894:	andeq	r7, r1, r8, lsr #15
   17898:	andeq	r7, r1, r8, lsr #15
   1789c:	andeq	r7, r1, r8, lsr #15
   178a0:	andeq	r7, r1, r8, lsr #15
   178a4:	andeq	r7, r1, r8, lsr #15
   178a8:	andeq	r7, r1, r8, lsr #15
   178ac:	andeq	r7, r1, r8, lsr #15
   178b0:	andeq	r7, r1, r8, lsr #15
   178b4:	andeq	r7, r1, r8, lsr #15
   178b8:	andeq	r7, r1, r8, lsr #15
   178bc:	andeq	r7, r1, r8, lsr #15
   178c0:	andeq	r7, r1, r8, lsr #15
   178c4:	andeq	r7, r1, r8, lsr #15
   178c8:	andeq	r7, r1, r8, lsr #15
   178cc:	andeq	r7, r1, r8, lsr #15
   178d0:	andeq	r7, r1, r8, lsr #15
   178d4:	andeq	r7, r1, r8, lsr #15
   178d8:	andeq	r7, r1, r0, ror #21
   178dc:	andeq	r7, r1, ip, asr #21
   178e0:	andeq	r7, r1, ip, asr #21
   178e4:			; <UNDEFINED> instruction: 0x00017abc
   178e8:	andeq	r7, r1, ip, asr #21
   178ec:	strdeq	r7, [r1], -r4
   178f0:	andeq	r7, r1, ip, asr #21
   178f4:			; <UNDEFINED> instruction: 0x000174bc
   178f8:	andeq	r7, r1, ip, asr #21
   178fc:	andeq	r7, r1, ip, asr #21
   17900:	andeq	r7, r1, ip, asr #21
   17904:	strdeq	r7, [r1], -r4
   17908:	strdeq	r7, [r1], -r4
   1790c:	strdeq	r7, [r1], -r4
   17910:	strdeq	r7, [r1], -r4
   17914:	strdeq	r7, [r1], -r4
   17918:	strdeq	r7, [r1], -r4
   1791c:	strdeq	r7, [r1], -r4
   17920:	strdeq	r7, [r1], -r4
   17924:	strdeq	r7, [r1], -r4
   17928:	strdeq	r7, [r1], -r4
   1792c:	strdeq	r7, [r1], -r4
   17930:	strdeq	r7, [r1], -r4
   17934:	strdeq	r7, [r1], -r4
   17938:	strdeq	r7, [r1], -r4
   1793c:	strdeq	r7, [r1], -r4
   17940:	strdeq	r7, [r1], -r4
   17944:	andeq	r7, r1, ip, asr #21
   17948:	andeq	r7, r1, ip, asr #21
   1794c:	andeq	r7, r1, ip, asr #21
   17950:	andeq	r7, r1, ip, asr #21
   17954:	muleq	r1, r0, r4
   17958:	andeq	r7, r1, r8, lsr #15
   1795c:	strdeq	r7, [r1], -r4
   17960:	strdeq	r7, [r1], -r4
   17964:	strdeq	r7, [r1], -r4
   17968:	strdeq	r7, [r1], -r4
   1796c:	strdeq	r7, [r1], -r4
   17970:	strdeq	r7, [r1], -r4
   17974:	strdeq	r7, [r1], -r4
   17978:	strdeq	r7, [r1], -r4
   1797c:	strdeq	r7, [r1], -r4
   17980:	strdeq	r7, [r1], -r4
   17984:	strdeq	r7, [r1], -r4
   17988:	strdeq	r7, [r1], -r4
   1798c:	strdeq	r7, [r1], -r4
   17990:	strdeq	r7, [r1], -r4
   17994:	strdeq	r7, [r1], -r4
   17998:	strdeq	r7, [r1], -r4
   1799c:	strdeq	r7, [r1], -r4
   179a0:	strdeq	r7, [r1], -r4
   179a4:	strdeq	r7, [r1], -r4
   179a8:	strdeq	r7, [r1], -r4
   179ac:	strdeq	r7, [r1], -r4
   179b0:	strdeq	r7, [r1], -r4
   179b4:	strdeq	r7, [r1], -r4
   179b8:	strdeq	r7, [r1], -r4
   179bc:	strdeq	r7, [r1], -r4
   179c0:	strdeq	r7, [r1], -r4
   179c4:	andeq	r7, r1, ip, asr #21
   179c8:	andeq	r7, r1, r8, asr #8
   179cc:	strdeq	r7, [r1], -r4
   179d0:	andeq	r7, r1, ip, asr #21
   179d4:	strdeq	r7, [r1], -r4
   179d8:	andeq	r7, r1, ip, asr #21
   179dc:	strdeq	r7, [r1], -r4
   179e0:	strdeq	r7, [r1], -r4
   179e4:	strdeq	r7, [r1], -r4
   179e8:	strdeq	r7, [r1], -r4
   179ec:	strdeq	r7, [r1], -r4
   179f0:	strdeq	r7, [r1], -r4
   179f4:	strdeq	r7, [r1], -r4
   179f8:	strdeq	r7, [r1], -r4
   179fc:	strdeq	r7, [r1], -r4
   17a00:	strdeq	r7, [r1], -r4
   17a04:	strdeq	r7, [r1], -r4
   17a08:	strdeq	r7, [r1], -r4
   17a0c:	strdeq	r7, [r1], -r4
   17a10:	strdeq	r7, [r1], -r4
   17a14:	strdeq	r7, [r1], -r4
   17a18:	strdeq	r7, [r1], -r4
   17a1c:	strdeq	r7, [r1], -r4
   17a20:	strdeq	r7, [r1], -r4
   17a24:	strdeq	r7, [r1], -r4
   17a28:	strdeq	r7, [r1], -r4
   17a2c:	strdeq	r7, [r1], -r4
   17a30:	strdeq	r7, [r1], -r4
   17a34:	strdeq	r7, [r1], -r4
   17a38:	strdeq	r7, [r1], -r4
   17a3c:	strdeq	r7, [r1], -r4
   17a40:	strdeq	r7, [r1], -r4
   17a44:	andeq	r7, r1, r0, ror #4
   17a48:	andeq	r7, r1, ip, asr #21
   17a4c:	andeq	r7, r1, r0, ror #4
   17a50:			; <UNDEFINED> instruction: 0x00017abc
   17a54:	mov	r3, #110	; 0x6e
   17a58:	b	1758c <__assert_fail@plt+0x6148>
   17a5c:	mov	r3, #116	; 0x74
   17a60:	b	1758c <__assert_fail@plt+0x6148>
   17a64:	sub	r2, fp, #2
   17a68:	mov	r3, #98	; 0x62
   17a6c:	clz	r2, r2
   17a70:	lsr	r2, r2, #5
   17a74:	b	17478 <__assert_fail@plt+0x6034>
   17a78:	sub	r2, fp, #2
   17a7c:	mov	r3, #97	; 0x61
   17a80:	clz	r2, r2
   17a84:	lsr	r2, r2, #5
   17a88:	b	17478 <__assert_fail@plt+0x6034>
   17a8c:	ldr	r3, [sp, #28]
   17a90:	cmp	r3, #0
   17a94:	bne	17684 <__assert_fail@plt+0x6240>
   17a98:	ldr	r3, [sp, #164]	; 0xa4
   17a9c:	tst	r3, #1
   17aa0:	bne	18114 <__assert_fail@plt+0x6cd0>
   17aa4:	ldr	r6, [sp, #28]
   17aa8:	sub	r2, fp, #2
   17aac:	mov	r7, r6
   17ab0:	clz	r2, r2
   17ab4:	lsr	r2, r2, #5
   17ab8:	b	172a0 <__assert_fail@plt+0x5e5c>
   17abc:	sub	r2, fp, #2
   17ac0:	clz	r2, r2
   17ac4:	lsr	r2, r2, #5
   17ac8:	b	1728c <__assert_fail@plt+0x5e48>
   17acc:	sub	r2, fp, #2
   17ad0:	mov	r6, #0
   17ad4:	clz	r2, r2
   17ad8:	lsr	r2, r2, #5
   17adc:	b	17294 <__assert_fail@plt+0x5e50>
   17ae0:	sub	r2, fp, #2
   17ae4:	clz	r2, r2
   17ae8:	lsr	r2, r2, #5
   17aec:	b	17294 <__assert_fail@plt+0x5e50>
   17af0:	sub	r2, fp, #2
   17af4:	mov	r3, #102	; 0x66
   17af8:	clz	r2, r2
   17afc:	lsr	r2, r2, #5
   17b00:	b	17478 <__assert_fail@plt+0x6034>
   17b04:	sub	r2, fp, #2
   17b08:	mov	r3, #118	; 0x76
   17b0c:	clz	r2, r2
   17b10:	lsr	r2, r2, #5
   17b14:	b	17478 <__assert_fail@plt+0x6034>
   17b18:	andeq	lr, r2, r8, lsl #30
   17b1c:	andeq	sp, r1, ip, lsr #27
   17b20:	muleq	r1, r4, sp
   17b24:	andeq	sp, r1, r8, lsr #27
   17b28:	ldr	r3, [sp, #48]	; 0x30
   17b2c:	ldrb	r5, [r3]
   17b30:	cmp	r5, #126	; 0x7e
   17b34:	ldrls	pc, [pc, r5, lsl #2]
   17b38:	b	177a4 <__assert_fail@plt+0x6360>
   17b3c:	andeq	r7, r1, r4, lsl #13
   17b40:	andeq	r7, r1, r4, lsr #15
   17b44:	andeq	r7, r1, r4, lsr #15
   17b48:	andeq	r7, r1, r4, lsr #15
   17b4c:	andeq	r7, r1, r4, lsr #15
   17b50:	andeq	r7, r1, r4, lsr #15
   17b54:	andeq	r7, r1, r4, lsr #15
   17b58:	andeq	r7, r1, ip, ror sp
   17b5c:	andeq	r7, r1, r4, ror sp
   17b60:	andeq	r7, r1, r0, asr r6
   17b64:	andeq	r7, r1, r8, lsl r6
   17b68:	andeq	r7, r1, r0, ror r6
   17b6c:	andeq	r7, r1, r8, asr r6
   17b70:	andeq	r7, r1, r8, ror #26
   17b74:	andeq	r7, r1, r4, lsr #15
   17b78:	andeq	r7, r1, r4, lsr #15
   17b7c:	andeq	r7, r1, r4, lsr #15
   17b80:	andeq	r7, r1, r4, lsr #15
   17b84:	andeq	r7, r1, r4, lsr #15
   17b88:	andeq	r7, r1, r4, lsr #15
   17b8c:	andeq	r7, r1, r4, lsr #15
   17b90:	andeq	r7, r1, r4, lsr #15
   17b94:	andeq	r7, r1, r4, lsr #15
   17b98:	andeq	r7, r1, r4, lsr #15
   17b9c:	andeq	r7, r1, r4, lsr #15
   17ba0:	andeq	r7, r1, r4, lsr #15
   17ba4:	andeq	r7, r1, r4, lsr #15
   17ba8:	andeq	r7, r1, r4, lsr #15
   17bac:	andeq	r7, r1, r4, lsr #15
   17bb0:	andeq	r7, r1, r4, lsr #15
   17bb4:	andeq	r7, r1, r4, lsr #15
   17bb8:	andeq	r7, r1, r4, lsr #15
   17bbc:	andeq	r7, r1, r0, ror #26
   17bc0:	andeq	r7, r1, r8, ror r6
   17bc4:	andeq	r7, r1, r8, ror r6
   17bc8:	andeq	r7, r1, r4, asr #26
   17bcc:	andeq	r7, r1, r8, ror r6
   17bd0:	andeq	r7, r1, r8, lsr sp
   17bd4:	andeq	r7, r1, r8, ror r6
   17bd8:			; <UNDEFINED> instruction: 0x000174b8
   17bdc:	andeq	r7, r1, r8, ror r6
   17be0:	andeq	r7, r1, r8, ror r6
   17be4:	andeq	r7, r1, r8, ror r6
   17be8:	andeq	r7, r1, r8, lsr sp
   17bec:	andeq	r7, r1, r8, lsr sp
   17bf0:	andeq	r7, r1, r8, lsr sp
   17bf4:	andeq	r7, r1, r8, lsr sp
   17bf8:	andeq	r7, r1, r8, lsr sp
   17bfc:	andeq	r7, r1, r8, lsr sp
   17c00:	andeq	r7, r1, r8, lsr sp
   17c04:	andeq	r7, r1, r8, lsr sp
   17c08:	andeq	r7, r1, r8, lsr sp
   17c0c:	andeq	r7, r1, r8, lsr sp
   17c10:	andeq	r7, r1, r8, lsr sp
   17c14:	andeq	r7, r1, r8, lsr sp
   17c18:	andeq	r7, r1, r8, lsr sp
   17c1c:	andeq	r7, r1, r8, lsr sp
   17c20:	andeq	r7, r1, r8, lsr sp
   17c24:	andeq	r7, r1, r8, lsr sp
   17c28:	andeq	r7, r1, r8, ror r6
   17c2c:	andeq	r7, r1, r8, ror r6
   17c30:	andeq	r7, r1, r8, ror r6
   17c34:	andeq	r7, r1, r8, ror r6
   17c38:	andeq	r7, r1, ip, lsl #9
   17c3c:	andeq	r7, r1, r4, lsr #15
   17c40:	andeq	r7, r1, r8, lsr sp
   17c44:	andeq	r7, r1, r8, lsr sp
   17c48:	andeq	r7, r1, r8, lsr sp
   17c4c:	andeq	r7, r1, r8, lsr sp
   17c50:	andeq	r7, r1, r8, lsr sp
   17c54:	andeq	r7, r1, r8, lsr sp
   17c58:	andeq	r7, r1, r8, lsr sp
   17c5c:	andeq	r7, r1, r8, lsr sp
   17c60:	andeq	r7, r1, r8, lsr sp
   17c64:	andeq	r7, r1, r8, lsr sp
   17c68:	andeq	r7, r1, r8, lsr sp
   17c6c:	andeq	r7, r1, r8, lsr sp
   17c70:	andeq	r7, r1, r8, lsr sp
   17c74:	andeq	r7, r1, r8, lsr sp
   17c78:	andeq	r7, r1, r8, lsr sp
   17c7c:	andeq	r7, r1, r8, lsr sp
   17c80:	andeq	r7, r1, r8, lsr sp
   17c84:	andeq	r7, r1, r8, lsr sp
   17c88:	andeq	r7, r1, r8, lsr sp
   17c8c:	andeq	r7, r1, r8, lsr sp
   17c90:	andeq	r7, r1, r8, lsr sp
   17c94:	andeq	r7, r1, r8, lsr sp
   17c98:	andeq	r7, r1, r8, lsr sp
   17c9c:	andeq	r7, r1, r8, lsr sp
   17ca0:	andeq	r7, r1, r8, lsr sp
   17ca4:	andeq	r7, r1, r8, lsr sp
   17ca8:	andeq	r7, r1, r8, ror r6
   17cac:	andeq	r7, r1, r4, asr #8
   17cb0:	andeq	r7, r1, r8, lsr sp
   17cb4:	andeq	r7, r1, r8, ror r6
   17cb8:	andeq	r7, r1, r8, lsr sp
   17cbc:	andeq	r7, r1, r8, ror r6
   17cc0:	andeq	r7, r1, r8, lsr sp
   17cc4:	andeq	r7, r1, r8, lsr sp
   17cc8:	andeq	r7, r1, r8, lsr sp
   17ccc:	andeq	r7, r1, r8, lsr sp
   17cd0:	andeq	r7, r1, r8, lsr sp
   17cd4:	andeq	r7, r1, r8, lsr sp
   17cd8:	andeq	r7, r1, r8, lsr sp
   17cdc:	andeq	r7, r1, r8, lsr sp
   17ce0:	andeq	r7, r1, r8, lsr sp
   17ce4:	andeq	r7, r1, r8, lsr sp
   17ce8:	andeq	r7, r1, r8, lsr sp
   17cec:	andeq	r7, r1, r8, lsr sp
   17cf0:	andeq	r7, r1, r8, lsr sp
   17cf4:	andeq	r7, r1, r8, lsr sp
   17cf8:	andeq	r7, r1, r8, lsr sp
   17cfc:	andeq	r7, r1, r8, lsr sp
   17d00:	andeq	r7, r1, r8, lsr sp
   17d04:	andeq	r7, r1, r8, lsr sp
   17d08:	andeq	r7, r1, r8, lsr sp
   17d0c:	andeq	r7, r1, r8, lsr sp
   17d10:	andeq	r7, r1, r8, lsr sp
   17d14:	andeq	r7, r1, r8, lsr sp
   17d18:	andeq	r7, r1, r8, lsr sp
   17d1c:	andeq	r7, r1, r8, lsr sp
   17d20:	andeq	r7, r1, r8, lsr sp
   17d24:	andeq	r7, r1, r8, lsr sp
   17d28:	andeq	r7, r1, ip, asr r2
   17d2c:	andeq	r7, r1, r8, ror r6
   17d30:	andeq	r7, r1, ip, asr r2
   17d34:	andeq	r7, r1, r4, asr #26
   17d38:	mov	r6, r7
   17d3c:	mov	r7, #0
   17d40:	b	172bc <__assert_fail@plt+0x5e78>
   17d44:	cmp	r9, #0
   17d48:	mov	r3, #0
   17d4c:	beq	1778c <__assert_fail@plt+0x6348>
   17d50:	mov	r6, #0
   17d54:	mov	r7, r3
   17d58:	mov	r3, r6
   17d5c:	b	172c0 <__assert_fail@plt+0x5e7c>
   17d60:	mov	r3, #0
   17d64:	b	1776c <__assert_fail@plt+0x6328>
   17d68:	mov	r7, #0
   17d6c:	mov	r3, #114	; 0x72
   17d70:	b	1758c <__assert_fail@plt+0x6148>
   17d74:	mov	r5, #98	; 0x62
   17d78:	b	1761c <__assert_fail@plt+0x61d8>
   17d7c:	mov	r5, #97	; 0x61
   17d80:	b	1765c <__assert_fail@plt+0x6218>
   17d84:	ldr	r3, [sp, #32]
   17d88:	cmp	r3, #0
   17d8c:	bne	181d4 <__assert_fail@plt+0x6d90>
   17d90:	add	r9, r9, #1
   17d94:	ldr	r3, [sp, #44]	; 0x2c
   17d98:	mov	r6, #0
   17d9c:	mov	r5, #92	; 0x5c
   17da0:	b	17554 <__assert_fail@plt+0x6110>
   17da4:	ldr	r3, [sp, #36]	; 0x24
   17da8:	ldrb	r3, [r3, #1]
   17dac:	adds	r3, r3, #0
   17db0:	movne	r3, #1
   17db4:	b	17278 <__assert_fail@plt+0x5e34>
   17db8:	ldr	r3, [sp, #164]	; 0xa4
   17dbc:	ands	r3, r3, #4
   17dc0:	beq	17de4 <__assert_fail@plt+0x69a0>
   17dc4:	ldr	r2, [sp, #24]
   17dc8:	add	r3, r9, #2
   17dcc:	cmp	r3, r2
   17dd0:	bcs	17de4 <__assert_fail@plt+0x69a0>
   17dd4:	ldr	r2, [sp, #48]	; 0x30
   17dd8:	ldrb	r5, [r2, #1]
   17ddc:	cmp	r5, #63	; 0x3f
   17de0:	beq	18248 <__assert_fail@plt+0x6e04>
   17de4:	mov	r2, #0
   17de8:	mov	r6, r2
   17dec:	mov	r5, #63	; 0x3f
   17df0:	b	172a0 <__assert_fail@plt+0x5e5c>
   17df4:	ldr	r3, [sp, #32]
   17df8:	cmp	r3, #0
   17dfc:	bne	181d4 <__assert_fail@plt+0x6d90>
   17e00:	mov	r6, r3
   17e04:	mov	r5, #63	; 0x3f
   17e08:	b	172e8 <__assert_fail@plt+0x5ea4>
   17e0c:	ldr	r3, [sp, #24]
   17e10:	cmn	r3, #1
   17e14:	mov	r3, #0
   17e18:	str	r3, [sp, #108]	; 0x6c
   17e1c:	str	r3, [sp, #112]	; 0x70
   17e20:	bne	17e30 <__assert_fail@plt+0x69ec>
   17e24:	ldr	r0, [sp, #36]	; 0x24
   17e28:	bl	11300 <strlen@plt>
   17e2c:	str	r0, [sp, #24]
   17e30:	mov	r3, #0
   17e34:	str	sl, [sp, #88]	; 0x58
   17e38:	ldr	sl, [sp, #36]	; 0x24
   17e3c:	str	r5, [sp, #92]	; 0x5c
   17e40:	mov	r5, r3
   17e44:	str	r7, [sp, #96]	; 0x60
   17e48:	str	r4, [sp, #100]	; 0x64
   17e4c:	str	r8, [sp, #84]	; 0x54
   17e50:	ldr	r3, [sp, #24]
   17e54:	add	r4, r9, r5
   17e58:	add	r7, sl, r4
   17e5c:	sub	r2, r3, r4
   17e60:	mov	r1, r7
   17e64:	add	r3, sp, #108	; 0x6c
   17e68:	add	r0, sp, #104	; 0x68
   17e6c:	bl	1b79c <__assert_fail@plt+0xa358>
   17e70:	subs	r8, r0, #0
   17e74:	beq	17ec4 <__assert_fail@plt+0x6a80>
   17e78:	cmn	r8, #1
   17e7c:	beq	18224 <__assert_fail@plt+0x6de0>
   17e80:	cmn	r8, #2
   17e84:	beq	18344 <__assert_fail@plt+0x6f00>
   17e88:	ldr	r3, [sp, #32]
   17e8c:	cmp	fp, #2
   17e90:	movne	r3, #0
   17e94:	andeq	r3, r3, #1
   17e98:	cmp	r3, #0
   17e9c:	bne	18024 <__assert_fail@plt+0x6be0>
   17ea0:	ldr	r0, [sp, #104]	; 0x68
   17ea4:	bl	11204 <iswprint@plt>
   17ea8:	add	r5, r5, r8
   17eac:	cmp	r0, #0
   17eb0:	add	r0, sp, #108	; 0x6c
   17eb4:	moveq	r6, #0
   17eb8:	bl	111a4 <mbsinit@plt>
   17ebc:	cmp	r0, #0
   17ec0:	beq	17e50 <__assert_fail@plt+0x6a0c>
   17ec4:	ldr	r3, [sp, #28]
   17ec8:	mov	ip, r5
   17ecc:	eor	r2, r6, #1
   17ed0:	ldr	r5, [sp, #92]	; 0x5c
   17ed4:	ldr	r7, [sp, #96]	; 0x60
   17ed8:	ldr	r4, [sp, #100]	; 0x64
   17edc:	ldr	r8, [sp, #84]	; 0x54
   17ee0:	ldr	sl, [sp, #88]	; 0x58
   17ee4:	and	r2, r2, r3
   17ee8:	cmp	ip, #1
   17eec:	bls	177ec <__assert_fail@plt+0x63a8>
   17ef0:	add	r1, ip, r9
   17ef4:	ldr	lr, [sp, #48]	; 0x30
   17ef8:	mov	r0, #0
   17efc:	str	r6, [sp, #48]	; 0x30
   17f00:	mov	ip, #39	; 0x27
   17f04:	ldr	r6, [sp, #44]	; 0x2c
   17f08:	b	17fc0 <__assert_fail@plt+0x6b7c>
   17f0c:	ldr	r0, [sp, #32]
   17f10:	sub	r3, fp, #2
   17f14:	cmp	r0, #0
   17f18:	clz	r3, r3
   17f1c:	lsr	r3, r3, #5
   17f20:	bne	18128 <__assert_fail@plt+0x6ce4>
   17f24:	eor	r0, r6, #1
   17f28:	ands	r3, r3, r0
   17f2c:	beq	17f5c <__assert_fail@plt+0x6b18>
   17f30:	add	r0, r4, #1
   17f34:	cmp	sl, r4
   17f38:	strbhi	ip, [r8, r4]
   17f3c:	cmp	sl, r0
   17f40:	movhi	r6, #36	; 0x24
   17f44:	strbhi	r6, [r8, r0]
   17f48:	add	r0, r4, #2
   17f4c:	mov	r6, r3
   17f50:	add	r4, r4, #3
   17f54:	cmp	sl, r0
   17f58:	strbhi	ip, [r8, r0]
   17f5c:	cmp	sl, r4
   17f60:	movhi	r3, #92	; 0x5c
   17f64:	strbhi	r3, [r8, r4]
   17f68:	add	r3, r4, #1
   17f6c:	cmp	sl, r3
   17f70:	lsrhi	r0, r5, #6
   17f74:	addhi	r0, r0, #48	; 0x30
   17f78:	strbhi	r0, [r8, r3]
   17f7c:	add	r0, r4, #2
   17f80:	cmp	sl, r0
   17f84:	lsrhi	r3, r5, #3
   17f88:	andhi	r3, r3, #7
   17f8c:	addhi	r3, r3, #48	; 0x30
   17f90:	add	r9, r9, #1
   17f94:	strbhi	r3, [r8, r0]
   17f98:	and	r5, r5, #7
   17f9c:	cmp	r9, r1
   17fa0:	add	r5, r5, #48	; 0x30
   17fa4:	add	r4, r4, #3
   17fa8:	bcs	18148 <__assert_fail@plt+0x6d04>
   17fac:	mov	r0, r2
   17fb0:	cmp	sl, r4
   17fb4:	strbhi	r5, [r8, r4]
   17fb8:	ldrb	r5, [lr, #1]!
   17fbc:	add	r4, r4, #1
   17fc0:	cmp	r2, #0
   17fc4:	bne	17f0c <__assert_fail@plt+0x6ac8>
   17fc8:	eor	r3, r0, #1
   17fcc:	and	r3, r3, r6
   17fd0:	cmp	r7, #0
   17fd4:	uxtb	r3, r3
   17fd8:	beq	17fec <__assert_fail@plt+0x6ba8>
   17fdc:	cmp	sl, r4
   17fe0:	movhi	r7, #92	; 0x5c
   17fe4:	strbhi	r7, [r8, r4]
   17fe8:	add	r4, r4, #1
   17fec:	add	r9, r9, #1
   17ff0:	cmp	r9, r1
   17ff4:	bcs	1813c <__assert_fail@plt+0x6cf8>
   17ff8:	cmp	r3, #0
   17ffc:	beq	18168 <__assert_fail@plt+0x6d24>
   18000:	cmp	sl, r4
   18004:	add	r3, r4, #1
   18008:	strbhi	ip, [r8, r4]
   1800c:	mov	r7, #0
   18010:	cmp	sl, r3
   18014:	strbhi	ip, [r8, r3]
   18018:	add	r4, r4, #2
   1801c:	mov	r6, r7
   18020:	b	17fb0 <__assert_fail@plt+0x6b6c>
   18024:	cmp	r8, #1
   18028:	beq	17ea0 <__assert_fail@plt+0x6a5c>
   1802c:	add	r1, r4, #1
   18030:	add	r3, sl, r8
   18034:	add	r1, sl, r1
   18038:	add	r4, r3, r4
   1803c:	ldrb	r3, [r1], #1
   18040:	sub	r3, r3, #91	; 0x5b
   18044:	cmp	r3, #33	; 0x21
   18048:	ldrls	pc, [pc, r3, lsl #2]
   1804c:	b	180d8 <__assert_fail@plt+0x6c94>
   18050:	andeq	r8, r1, r4, ror #1
   18054:	andeq	r8, r1, r4, ror #1
   18058:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1805c:	andeq	r8, r1, r4, ror #1
   18060:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18064:	andeq	r8, r1, r4, ror #1
   18068:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1806c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18070:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18074:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18078:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1807c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18080:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18084:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18088:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1808c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18090:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18094:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18098:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1809c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180c8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180d4:	andeq	r8, r1, r4, ror #1
   180d8:	cmp	r4, r1
   180dc:	bne	1803c <__assert_fail@plt+0x6bf8>
   180e0:	b	17ea0 <__assert_fail@plt+0x6a5c>
   180e4:	ldr	fp, [sp, #84]	; 0x54
   180e8:	ldr	sl, [sp, #88]	; 0x58
   180ec:	mov	r8, #2
   180f0:	b	175ac <__assert_fail@plt+0x6168>
   180f4:	cmp	sl, r4
   180f8:	movls	r1, r4
   180fc:	bls	176fc <__assert_fail@plt+0x62b8>
   18100:	ldr	r3, [sp, #44]	; 0x2c
   18104:	b	176ec <__assert_fail@plt+0x62a8>
   18108:	str	sl, [sp, #72]	; 0x48
   1810c:	ldr	sl, [sp, #32]
   18110:	b	17524 <__assert_fail@plt+0x60e0>
   18114:	add	r9, r9, #1
   18118:	b	16e18 <__assert_fail@plt+0x59d4>
   1811c:	ldr	r2, [sp, #28]
   18120:	mov	r6, #0
   18124:	b	17ef0 <__assert_fail@plt+0x6aac>
   18128:	str	fp, [sp, #160]	; 0xa0
   1812c:	str	r3, [sp, #28]
   18130:	mov	fp, r8
   18134:	ldr	r8, [sp, #160]	; 0xa0
   18138:	b	175ac <__assert_fail@plt+0x6168>
   1813c:	str	r6, [sp, #44]	; 0x2c
   18140:	ldr	r6, [sp, #48]	; 0x30
   18144:	b	17554 <__assert_fail@plt+0x6110>
   18148:	str	r6, [sp, #44]	; 0x2c
   1814c:	ldr	r6, [sp, #48]	; 0x30
   18150:	b	17360 <__assert_fail@plt+0x5f1c>
   18154:	add	r4, r4, #4
   18158:	str	r3, [sp, #44]	; 0x2c
   1815c:	mov	r6, #0
   18160:	mov	r5, #48	; 0x30
   18164:	b	172e8 <__assert_fail@plt+0x5ea4>
   18168:	mov	r7, r3
   1816c:	b	17fb0 <__assert_fail@plt+0x6b6c>
   18170:	ldr	r3, [pc, #-1624]	; 17b20 <__assert_fail@plt+0x66dc>
   18174:	mov	r4, #1
   18178:	str	r4, [sp, #40]	; 0x28
   1817c:	str	r4, [sp, #28]
   18180:	str	r4, [sp, #52]	; 0x34
   18184:	str	sl, [sp, #72]	; 0x48
   18188:	str	sl, [sp, #68]	; 0x44
   1818c:	str	sl, [sp, #44]	; 0x2c
   18190:	str	sl, [sp, #32]
   18194:	str	r3, [sp, #60]	; 0x3c
   18198:	b	16e08 <__assert_fail@plt+0x59c4>
   1819c:	mov	r3, r6
   181a0:	mov	r5, #48	; 0x30
   181a4:	mov	r6, #0
   181a8:	b	172e8 <__assert_fail@plt+0x5ea4>
   181ac:	cmp	sl, r4
   181b0:	movhi	r3, #48	; 0x30
   181b4:	strbhi	r3, [r8, r4]
   181b8:	add	r3, r1, #2
   181bc:	cmp	sl, r3
   181c0:	movhi	r0, #48	; 0x30
   181c4:	strbhi	r0, [r8, r3]
   181c8:	add	r4, r1, #3
   181cc:	mov	r5, #48	; 0x30
   181d0:	b	17730 <__assert_fail@plt+0x62ec>
   181d4:	str	fp, [sp, #160]	; 0xa0
   181d8:	mov	fp, r8
   181dc:	ldr	r8, [sp, #160]	; 0xa0
   181e0:	b	175ac <__assert_fail@plt+0x6168>
   181e4:	ldr	r2, [sp, #80]	; 0x50
   181e8:	ldrb	r3, [r2]
   181ec:	cmp	r3, #0
   181f0:	beq	16dd8 <__assert_fail@plt+0x5994>
   181f4:	cmp	sl, r4
   181f8:	strbhi	r3, [fp, r4]
   181fc:	ldrb	r3, [r2, #1]!
   18200:	add	r4, r4, #1
   18204:	cmp	r3, #0
   18208:	bne	181f4 <__assert_fail@plt+0x6db0>
   1820c:	b	16dd8 <__assert_fail@plt+0x5994>
   18210:	str	fp, [sp, #160]	; 0xa0
   18214:	mov	r3, #0
   18218:	mov	fp, r8
   1821c:	ldr	r8, [sp, #160]	; 0xa0
   18220:	b	17640 <__assert_fail@plt+0x61fc>
   18224:	mov	ip, r5
   18228:	ldr	r7, [sp, #96]	; 0x60
   1822c:	ldr	r5, [sp, #92]	; 0x5c
   18230:	ldr	r4, [sp, #100]	; 0x64
   18234:	ldr	r8, [sp, #84]	; 0x54
   18238:	ldr	sl, [sp, #88]	; 0x58
   1823c:	ldr	r2, [sp, #28]
   18240:	mov	r6, #0
   18244:	b	17ee8 <__assert_fail@plt+0x6aa4>
   18248:	ldr	r2, [sp, #36]	; 0x24
   1824c:	ldrb	r1, [r2, r3]
   18250:	sub	r2, r1, #33	; 0x21
   18254:	cmp	r2, #29
   18258:	ldrls	pc, [pc, r2, lsl #2]
   1825c:	b	18338 <__assert_fail@plt+0x6ef4>
   18260:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18264:	andeq	r8, r1, r8, lsr r3
   18268:	andeq	r8, r1, r8, lsr r3
   1826c:	andeq	r8, r1, r8, lsr r3
   18270:	andeq	r8, r1, r8, lsr r3
   18274:	andeq	r8, r1, r8, lsr r3
   18278:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1827c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18280:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18284:	andeq	r8, r1, r8, lsr r3
   18288:	andeq	r8, r1, r8, lsr r3
   1828c:	andeq	r8, r1, r8, lsr r3
   18290:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18294:	andeq	r8, r1, r8, lsr r3
   18298:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1829c:	andeq	r8, r1, r8, lsr r3
   182a0:	andeq	r8, r1, r8, lsr r3
   182a4:	andeq	r8, r1, r8, lsr r3
   182a8:	andeq	r8, r1, r8, lsr r3
   182ac:	andeq	r8, r1, r8, lsr r3
   182b0:	andeq	r8, r1, r8, lsr r3
   182b4:	andeq	r8, r1, r8, lsr r3
   182b8:	andeq	r8, r1, r8, lsr r3
   182bc:	andeq	r8, r1, r8, lsr r3
   182c0:	andeq	r8, r1, r8, lsr r3
   182c4:	andeq	r8, r1, r8, lsr r3
   182c8:	andeq	r8, r1, r8, lsr r3
   182cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d8:	ldr	r2, [sp, #32]
   182dc:	cmp	r2, #0
   182e0:	bne	183e4 <__assert_fail@plt+0x6fa0>
   182e4:	cmp	sl, r4
   182e8:	movhi	r2, #63	; 0x3f
   182ec:	strbhi	r2, [r8, r4]
   182f0:	add	r2, r4, #1
   182f4:	cmp	sl, r2
   182f8:	movhi	r0, #34	; 0x22
   182fc:	strbhi	r0, [r8, r2]
   18300:	add	r2, r4, #2
   18304:	cmp	sl, r2
   18308:	movhi	r0, #34	; 0x22
   1830c:	strbhi	r0, [r8, r2]
   18310:	add	r2, r4, #3
   18314:	cmp	sl, r2
   18318:	movhi	r0, #63	; 0x3f
   1831c:	strbhi	r0, [r8, r2]
   18320:	mov	r2, #0
   18324:	add	r4, r4, #4
   18328:	mov	r5, r1
   1832c:	mov	r9, r3
   18330:	mov	r6, r2
   18334:	b	17730 <__assert_fail@plt+0x62ec>
   18338:	mov	r2, #0
   1833c:	mov	r6, r2
   18340:	b	172a0 <__assert_fail@plt+0x5e5c>
   18344:	ldr	r0, [sp, #24]
   18348:	mov	r1, r4
   1834c:	cmp	r1, r0
   18350:	mov	r2, r7
   18354:	mov	r3, r5
   18358:	mov	ip, r5
   1835c:	ldr	r7, [sp, #96]	; 0x60
   18360:	ldr	r5, [sp, #92]	; 0x5c
   18364:	ldr	r4, [sp, #100]	; 0x64
   18368:	ldr	r8, [sp, #84]	; 0x54
   1836c:	ldr	sl, [sp, #88]	; 0x58
   18370:	bcs	183a4 <__assert_fail@plt+0x6f60>
   18374:	ldrb	r6, [r2]
   18378:	cmp	r6, #0
   1837c:	bne	18390 <__assert_fail@plt+0x6f4c>
   18380:	b	184c0 <__assert_fail@plt+0x707c>
   18384:	ldrb	r6, [r2, #1]!
   18388:	cmp	r6, #0
   1838c:	beq	18448 <__assert_fail@plt+0x7004>
   18390:	add	r3, r3, #1
   18394:	add	r1, r9, r3
   18398:	cmp	r1, r0
   1839c:	bcc	18384 <__assert_fail@plt+0x6f40>
   183a0:	mov	ip, r3
   183a4:	ldr	r2, [sp, #28]
   183a8:	mov	r6, #0
   183ac:	b	17ee8 <__assert_fail@plt+0x6aa4>
   183b0:	mov	r3, #1
   183b4:	str	r3, [sp, #40]	; 0x28
   183b8:	str	r3, [sp, #32]
   183bc:	str	r3, [sp, #28]
   183c0:	str	r3, [sp, #52]	; 0x34
   183c4:	ldr	r3, [pc, #-2220]	; 17b20 <__assert_fail@plt+0x66dc>
   183c8:	mov	r2, #0
   183cc:	str	r2, [sp, #68]	; 0x44
   183d0:	str	r2, [sp, #44]	; 0x2c
   183d4:	str	r2, [sp, #72]	; 0x48
   183d8:	mov	r4, r2
   183dc:	str	r3, [sp, #60]	; 0x3c
   183e0:	b	16e08 <__assert_fail@plt+0x59c4>
   183e4:	str	fp, [sp, #160]	; 0xa0
   183e8:	mov	fp, r8
   183ec:	ldr	r8, [sp, #160]	; 0xa0
   183f0:	b	175b8 <__assert_fail@plt+0x6174>
   183f4:	mov	r2, r3
   183f8:	ldr	r3, [sp, #60]	; 0x3c
   183fc:	cmp	r3, #0
   18400:	moveq	r2, #0
   18404:	andne	r2, r2, #1
   18408:	cmp	r2, #0
   1840c:	beq	18438 <__assert_fail@plt+0x6ff4>
   18410:	mov	r2, r3
   18414:	ldrb	r3, [r3]
   18418:	cmp	r3, #0
   1841c:	beq	18438 <__assert_fail@plt+0x6ff4>
   18420:	cmp	sl, r4
   18424:	strbhi	r3, [fp, r4]
   18428:	ldrb	r3, [r2, #1]!
   1842c:	add	r4, r4, #1
   18430:	cmp	r3, #0
   18434:	bne	18420 <__assert_fail@plt+0x6fdc>
   18438:	cmp	sl, r4
   1843c:	movhi	r3, #0
   18440:	strbhi	r3, [fp, r4]
   18444:	b	175f8 <__assert_fail@plt+0x61b4>
   18448:	mov	ip, r3
   1844c:	ldr	r2, [sp, #28]
   18450:	b	17ee8 <__assert_fail@plt+0x6aa4>
   18454:	str	fp, [sp, #160]	; 0xa0
   18458:	mov	fp, r8
   1845c:	ldr	r8, [sp, #160]	; 0xa0
   18460:	sub	r3, r8, #2
   18464:	clz	r3, r3
   18468:	lsr	r3, r3, #5
   1846c:	str	r3, [sp, #28]
   18470:	b	175ac <__assert_fail@plt+0x6168>
   18474:	ldr	r3, [sp, #76]	; 0x4c
   18478:	mov	ip, #5
   1847c:	str	r3, [sp, #16]
   18480:	ldr	r3, [sp, #80]	; 0x50
   18484:	ldr	r2, [sp, #36]	; 0x24
   18488:	str	r3, [sp, #12]
   1848c:	ldr	r3, [sp, #56]	; 0x38
   18490:	ldr	r1, [sp, #72]	; 0x48
   18494:	str	r3, [sp, #8]
   18498:	ldr	r3, [sp, #164]	; 0xa4
   1849c:	mov	r0, fp
   184a0:	str	r3, [sp, #4]
   184a4:	str	ip, [sp]
   184a8:	ldr	r3, [sp, #24]
   184ac:	bl	16d10 <__assert_fail@plt+0x58cc>
   184b0:	mov	r4, r0
   184b4:	b	175f8 <__assert_fail@plt+0x61b4>
   184b8:	mov	r8, #2
   184bc:	b	175ac <__assert_fail@plt+0x6168>
   184c0:	ldr	r2, [sp, #28]
   184c4:	b	17ee8 <__assert_fail@plt+0x6aa4>
   184c8:	mov	r3, #0
   184cc:	str	r3, [sp, #68]	; 0x44
   184d0:	str	r3, [sp, #44]	; 0x2c
   184d4:	str	r3, [sp, #72]	; 0x48
   184d8:	str	r3, [sp, #28]
   184dc:	mov	r4, r3
   184e0:	ldr	r3, [pc, #-2500]	; 17b24 <__assert_fail@plt+0x66e0>
   184e4:	mov	r2, #1
   184e8:	str	r2, [sp, #40]	; 0x28
   184ec:	str	r2, [sp, #32]
   184f0:	str	r2, [sp, #52]	; 0x34
   184f4:	str	r3, [sp, #60]	; 0x3c
   184f8:	b	16e08 <__assert_fail@plt+0x59c4>
   184fc:	bl	111c8 <__stack_chk_fail@plt>
   18500:	mov	r5, r3
   18504:	mov	r6, #0
   18508:	b	172fc <__assert_fail@plt+0x5eb8>
   1850c:	mov	r3, #0
   18510:	mov	r2, #1
   18514:	str	r3, [sp, #44]	; 0x2c
   18518:	str	r3, [sp, #72]	; 0x48
   1851c:	str	r2, [sp, #40]	; 0x28
   18520:	b	17418 <__assert_fail@plt+0x5fd4>
   18524:	bl	1142c <abort@plt>
   18528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1852c:	sub	sp, sp, #44	; 0x2c
   18530:	mov	r6, r0
   18534:	mov	r4, r3
   18538:	mov	sl, r1
   1853c:	mov	fp, r2
   18540:	bl	11330 <__errno_location@plt>
   18544:	ldr	r7, [pc, #364]	; 186b8 <__assert_fail@plt+0x7274>
   18548:	cmp	r6, #0
   1854c:	ldr	r5, [r7]
   18550:	ldr	r3, [r0]
   18554:	str	r3, [sp, #24]
   18558:	blt	186b4 <__assert_fail@plt+0x7270>
   1855c:	ldr	r3, [r7, #4]
   18560:	mov	r8, r0
   18564:	cmp	r3, r6
   18568:	bgt	185b4 <__assert_fail@plt+0x7170>
   1856c:	cmn	r6, #-268435454	; 0xf0000002
   18570:	bgt	186b0 <__assert_fail@plt+0x726c>
   18574:	add	r9, r6, #1
   18578:	add	r3, r7, #8
   1857c:	cmp	r5, r3
   18580:	lsl	r1, r9, #3
   18584:	beq	18690 <__assert_fail@plt+0x724c>
   18588:	mov	r0, r5
   1858c:	bl	19328 <__assert_fail@plt+0x7ee4>
   18590:	mov	r5, r0
   18594:	str	r0, [r7]
   18598:	ldr	r0, [r7, #4]
   1859c:	mov	r1, #0
   185a0:	sub	r2, r9, r0
   185a4:	add	r0, r5, r0, lsl #3
   185a8:	lsl	r2, r2, #3
   185ac:	bl	11354 <memset@plt>
   185b0:	str	r9, [r7, #4]
   185b4:	add	r3, r5, r6, lsl #3
   185b8:	ldr	r1, [r4, #4]
   185bc:	ldr	r7, [r3, #4]
   185c0:	ldr	r9, [r5, r6, lsl #3]
   185c4:	ldr	r2, [r4, #40]	; 0x28
   185c8:	ldr	ip, [r4, #44]	; 0x2c
   185cc:	str	r3, [sp, #28]
   185d0:	ldr	r3, [r4]
   185d4:	orr	r1, r1, #1
   185d8:	add	lr, r4, #8
   185dc:	str	r1, [sp, #36]	; 0x24
   185e0:	str	r1, [sp, #4]
   185e4:	str	r2, [sp, #12]
   185e8:	str	r3, [sp]
   185ec:	mov	r0, r7
   185f0:	mov	r1, r9
   185f4:	str	ip, [sp, #16]
   185f8:	str	lr, [sp, #8]
   185fc:	mov	r3, fp
   18600:	mov	r2, sl
   18604:	str	lr, [sp, #32]
   18608:	bl	16d10 <__assert_fail@plt+0x58cc>
   1860c:	cmp	r9, r0
   18610:	bhi	1867c <__assert_fail@plt+0x7238>
   18614:	ldr	r3, [pc, #160]	; 186bc <__assert_fail@plt+0x7278>
   18618:	add	r9, r0, #1
   1861c:	cmp	r7, r3
   18620:	str	r9, [r5, r6, lsl #3]
   18624:	beq	18630 <__assert_fail@plt+0x71ec>
   18628:	mov	r0, r7
   1862c:	bl	11168 <free@plt>
   18630:	mov	r0, r9
   18634:	bl	192cc <__assert_fail@plt+0x7e88>
   18638:	ldr	lr, [sp, #28]
   1863c:	ldr	ip, [r4, #44]	; 0x2c
   18640:	ldr	r5, [r4, #40]	; 0x28
   18644:	mov	r3, fp
   18648:	mov	r2, sl
   1864c:	mov	r1, r9
   18650:	str	r0, [lr, #4]
   18654:	ldr	lr, [r4]
   18658:	ldr	r4, [sp, #32]
   1865c:	str	ip, [sp, #16]
   18660:	str	r4, [sp, #8]
   18664:	ldr	r4, [sp, #36]	; 0x24
   18668:	str	r5, [sp, #12]
   1866c:	str	r4, [sp, #4]
   18670:	str	lr, [sp]
   18674:	mov	r7, r0
   18678:	bl	16d10 <__assert_fail@plt+0x58cc>
   1867c:	ldr	r3, [sp, #24]
   18680:	mov	r0, r7
   18684:	str	r3, [r8]
   18688:	add	sp, sp, #44	; 0x2c
   1868c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18690:	mov	r0, #0
   18694:	bl	19328 <__assert_fail@plt+0x7ee4>
   18698:	ldr	r3, [pc, #32]	; 186c0 <__assert_fail@plt+0x727c>
   1869c:	mov	r5, r0
   186a0:	ldm	r3, {r0, r1}
   186a4:	str	r5, [r7]
   186a8:	stm	r5, {r0, r1}
   186ac:	b	18598 <__assert_fail@plt+0x7154>
   186b0:	bl	19514 <__assert_fail@plt+0x80d0>
   186b4:	bl	1142c <abort@plt>
   186b8:	andeq	pc, r2, r8, lsl #3
   186bc:			; <UNDEFINED> instruction: 0x0002f2b8
   186c0:	muleq	r2, r0, r1
   186c4:	push	{r4, r5, r6, lr}
   186c8:	mov	r5, r0
   186cc:	bl	11330 <__errno_location@plt>
   186d0:	cmp	r5, #0
   186d4:	mov	r1, #48	; 0x30
   186d8:	mov	r4, r0
   186dc:	ldr	r0, [pc, #16]	; 186f4 <__assert_fail@plt+0x72b0>
   186e0:	ldr	r6, [r4]
   186e4:	movne	r0, r5
   186e8:	bl	194d4 <__assert_fail@plt+0x8090>
   186ec:	str	r6, [r4]
   186f0:	pop	{r4, r5, r6, pc}
   186f4:			; <UNDEFINED> instruction: 0x0002f3b8
   186f8:	ldr	r3, [pc, #12]	; 1870c <__assert_fail@plt+0x72c8>
   186fc:	cmp	r0, #0
   18700:	moveq	r0, r3
   18704:	ldr	r0, [r0]
   18708:	bx	lr
   1870c:			; <UNDEFINED> instruction: 0x0002f3b8
   18710:	ldr	r3, [pc, #12]	; 18724 <__assert_fail@plt+0x72e0>
   18714:	cmp	r0, #0
   18718:	moveq	r0, r3
   1871c:	str	r1, [r0]
   18720:	bx	lr
   18724:			; <UNDEFINED> instruction: 0x0002f3b8
   18728:	ldr	r3, [pc, #52]	; 18764 <__assert_fail@plt+0x7320>
   1872c:	cmp	r0, #0
   18730:	moveq	r0, r3
   18734:	add	r3, r0, #8
   18738:	push	{lr}		; (str lr, [sp, #-4]!)
   1873c:	lsr	lr, r1, #5
   18740:	and	r1, r1, #31
   18744:	ldr	ip, [r3, lr, lsl #2]
   18748:	lsr	r0, ip, r1
   1874c:	eor	r2, r2, r0
   18750:	and	r2, r2, #1
   18754:	and	r0, r0, #1
   18758:	eor	r1, ip, r2, lsl r1
   1875c:	str	r1, [r3, lr, lsl #2]
   18760:	pop	{pc}		; (ldr pc, [sp], #4)
   18764:			; <UNDEFINED> instruction: 0x0002f3b8
   18768:	ldr	r3, [pc, #16]	; 18780 <__assert_fail@plt+0x733c>
   1876c:	cmp	r0, #0
   18770:	movne	r3, r0
   18774:	ldr	r0, [r3, #4]
   18778:	str	r1, [r3, #4]
   1877c:	bx	lr
   18780:			; <UNDEFINED> instruction: 0x0002f3b8
   18784:	ldr	r3, [pc, #44]	; 187b8 <__assert_fail@plt+0x7374>
   18788:	cmp	r0, #0
   1878c:	moveq	r0, r3
   18790:	mov	ip, #10
   18794:	cmp	r2, #0
   18798:	cmpne	r1, #0
   1879c:	str	ip, [r0]
   187a0:	beq	187b0 <__assert_fail@plt+0x736c>
   187a4:	str	r1, [r0, #40]	; 0x28
   187a8:	str	r2, [r0, #44]	; 0x2c
   187ac:	bx	lr
   187b0:	push	{r4, lr}
   187b4:	bl	1142c <abort@plt>
   187b8:			; <UNDEFINED> instruction: 0x0002f3b8
   187bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   187c0:	sub	sp, sp, #24
   187c4:	ldr	ip, [pc, #108]	; 18838 <__assert_fail@plt+0x73f4>
   187c8:	ldr	r4, [sp, #56]	; 0x38
   187cc:	mov	r9, r2
   187d0:	cmp	r4, #0
   187d4:	moveq	r4, ip
   187d8:	mov	sl, r3
   187dc:	mov	r7, r0
   187e0:	mov	r8, r1
   187e4:	bl	11330 <__errno_location@plt>
   187e8:	ldr	r3, [r4, #44]	; 0x2c
   187ec:	mov	r1, r8
   187f0:	ldr	r6, [r0]
   187f4:	str	r3, [sp, #16]
   187f8:	ldr	r2, [r4, #40]	; 0x28
   187fc:	add	r3, r4, #8
   18800:	str	r3, [sp, #8]
   18804:	str	r2, [sp, #12]
   18808:	ldr	r2, [r4, #4]
   1880c:	mov	r5, r0
   18810:	str	r2, [sp, #4]
   18814:	ldr	ip, [r4]
   18818:	mov	r3, sl
   1881c:	mov	r2, r9
   18820:	mov	r0, r7
   18824:	str	ip, [sp]
   18828:	bl	16d10 <__assert_fail@plt+0x58cc>
   1882c:	str	r6, [r5]
   18830:	add	sp, sp, #24
   18834:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18838:			; <UNDEFINED> instruction: 0x0002f3b8
   1883c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18840:	cmp	r3, #0
   18844:	sub	sp, sp, #44	; 0x2c
   18848:	ldr	r4, [pc, #192]	; 18910 <__assert_fail@plt+0x74cc>
   1884c:	mov	r6, r2
   18850:	movne	r4, r3
   18854:	mov	r9, r1
   18858:	mov	r8, r0
   1885c:	bl	11330 <__errno_location@plt>
   18860:	ldr	r3, [r4, #44]	; 0x2c
   18864:	ldr	r5, [r4, #4]
   18868:	add	sl, r4, #8
   1886c:	cmp	r6, #0
   18870:	orreq	r5, r5, #1
   18874:	mov	r1, #0
   18878:	ldr	r2, [r0]
   1887c:	str	r3, [sp, #16]
   18880:	ldr	r3, [r4, #40]	; 0x28
   18884:	stmib	sp, {r5, sl}
   18888:	str	r3, [sp, #12]
   1888c:	ldr	r3, [r4]
   18890:	mov	r7, r0
   18894:	str	r2, [sp, #28]
   18898:	str	r3, [sp]
   1889c:	mov	r2, r8
   188a0:	mov	r3, r9
   188a4:	mov	r0, r1
   188a8:	bl	16d10 <__assert_fail@plt+0x58cc>
   188ac:	add	r1, r0, #1
   188b0:	mov	fp, r0
   188b4:	mov	r0, r1
   188b8:	str	r1, [sp, #36]	; 0x24
   188bc:	bl	192cc <__assert_fail@plt+0x7e88>
   188c0:	ldr	r3, [r4, #44]	; 0x2c
   188c4:	mov	r2, r8
   188c8:	str	r3, [sp, #16]
   188cc:	ldr	r3, [r4, #40]	; 0x28
   188d0:	str	r5, [sp, #4]
   188d4:	str	r3, [sp, #12]
   188d8:	str	sl, [sp, #8]
   188dc:	ldr	ip, [r4]
   188e0:	ldr	r1, [sp, #36]	; 0x24
   188e4:	mov	r3, r9
   188e8:	str	ip, [sp]
   188ec:	str	r0, [sp, #32]
   188f0:	bl	16d10 <__assert_fail@plt+0x58cc>
   188f4:	ldr	r2, [sp, #28]
   188f8:	cmp	r6, #0
   188fc:	str	r2, [r7]
   18900:	ldr	r0, [sp, #32]
   18904:	strne	fp, [r6]
   18908:	add	sp, sp, #44	; 0x2c
   1890c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18910:			; <UNDEFINED> instruction: 0x0002f3b8
   18914:	mov	r3, r2
   18918:	mov	r2, #0
   1891c:	b	1883c <__assert_fail@plt+0x73f8>
   18920:	push	{r4, r5, r6, r7, r8, lr}
   18924:	ldr	r6, [pc, #112]	; 1899c <__assert_fail@plt+0x7558>
   18928:	ldr	r3, [r6, #4]
   1892c:	ldr	r7, [r6]
   18930:	cmp	r3, #1
   18934:	ble	18958 <__assert_fail@plt+0x7514>
   18938:	sub	r5, r7, #8
   1893c:	add	r5, r5, r3, lsl #3
   18940:	mov	r4, r7
   18944:	ldr	r0, [r4, #12]
   18948:	add	r4, r4, #8
   1894c:	bl	11168 <free@plt>
   18950:	cmp	r4, r5
   18954:	bne	18944 <__assert_fail@plt+0x7500>
   18958:	ldr	r0, [r7, #4]
   1895c:	ldr	r4, [pc, #60]	; 189a0 <__assert_fail@plt+0x755c>
   18960:	cmp	r0, r4
   18964:	beq	18978 <__assert_fail@plt+0x7534>
   18968:	bl	11168 <free@plt>
   1896c:	mov	r3, #256	; 0x100
   18970:	str	r4, [r6, #12]
   18974:	str	r3, [r6, #8]
   18978:	ldr	r4, [pc, #36]	; 189a4 <__assert_fail@plt+0x7560>
   1897c:	cmp	r7, r4
   18980:	beq	18990 <__assert_fail@plt+0x754c>
   18984:	mov	r0, r7
   18988:	bl	11168 <free@plt>
   1898c:	str	r4, [r6]
   18990:	mov	r3, #1
   18994:	str	r3, [r6, #4]
   18998:	pop	{r4, r5, r6, r7, r8, pc}
   1899c:	andeq	pc, r2, r8, lsl #3
   189a0:			; <UNDEFINED> instruction: 0x0002f2b8
   189a4:	muleq	r2, r0, r1
   189a8:	ldr	r3, [pc, #4]	; 189b4 <__assert_fail@plt+0x7570>
   189ac:	mvn	r2, #0
   189b0:	b	18528 <__assert_fail@plt+0x70e4>
   189b4:			; <UNDEFINED> instruction: 0x0002f3b8
   189b8:	ldr	r3, [pc]	; 189c0 <__assert_fail@plt+0x757c>
   189bc:	b	18528 <__assert_fail@plt+0x70e4>
   189c0:			; <UNDEFINED> instruction: 0x0002f3b8
   189c4:	mov	r1, r0
   189c8:	ldr	r3, [pc, #8]	; 189d8 <__assert_fail@plt+0x7594>
   189cc:	mvn	r2, #0
   189d0:	mov	r0, #0
   189d4:	b	18528 <__assert_fail@plt+0x70e4>
   189d8:			; <UNDEFINED> instruction: 0x0002f3b8
   189dc:	mov	r2, r1
   189e0:	ldr	r3, [pc, #8]	; 189f0 <__assert_fail@plt+0x75ac>
   189e4:	mov	r1, r0
   189e8:	mov	r0, #0
   189ec:	b	18528 <__assert_fail@plt+0x70e4>
   189f0:			; <UNDEFINED> instruction: 0x0002f3b8
   189f4:	push	{r4, r5, r6, lr}
   189f8:	sub	sp, sp, #56	; 0x38
   189fc:	ldr	r4, [pc, #68]	; 18a48 <__assert_fail@plt+0x7604>
   18a00:	mov	r6, r2
   18a04:	mov	r5, r0
   18a08:	ldr	r3, [r4]
   18a0c:	add	r0, sp, #4
   18a10:	str	r3, [sp, #52]	; 0x34
   18a14:	bl	16ba0 <__assert_fail@plt+0x575c>
   18a18:	add	r3, sp, #4
   18a1c:	mvn	r2, #0
   18a20:	mov	r1, r6
   18a24:	mov	r0, r5
   18a28:	bl	18528 <__assert_fail@plt+0x70e4>
   18a2c:	ldr	r2, [sp, #52]	; 0x34
   18a30:	ldr	r3, [r4]
   18a34:	cmp	r2, r3
   18a38:	bne	18a44 <__assert_fail@plt+0x7600>
   18a3c:	add	sp, sp, #56	; 0x38
   18a40:	pop	{r4, r5, r6, pc}
   18a44:	bl	111c8 <__stack_chk_fail@plt>
   18a48:	andeq	lr, r2, r8, lsl #30
   18a4c:	push	{r4, r5, r6, r7, lr}
   18a50:	sub	sp, sp, #60	; 0x3c
   18a54:	ldr	r4, [pc, #72]	; 18aa4 <__assert_fail@plt+0x7660>
   18a58:	mov	r6, r2
   18a5c:	mov	r7, r3
   18a60:	ldr	ip, [r4]
   18a64:	mov	r5, r0
   18a68:	add	r0, sp, #4
   18a6c:	str	ip, [sp, #52]	; 0x34
   18a70:	bl	16ba0 <__assert_fail@plt+0x575c>
   18a74:	add	r3, sp, #4
   18a78:	mov	r2, r7
   18a7c:	mov	r1, r6
   18a80:	mov	r0, r5
   18a84:	bl	18528 <__assert_fail@plt+0x70e4>
   18a88:	ldr	r2, [sp, #52]	; 0x34
   18a8c:	ldr	r3, [r4]
   18a90:	cmp	r2, r3
   18a94:	bne	18aa0 <__assert_fail@plt+0x765c>
   18a98:	add	sp, sp, #60	; 0x3c
   18a9c:	pop	{r4, r5, r6, r7, pc}
   18aa0:	bl	111c8 <__stack_chk_fail@plt>
   18aa4:	andeq	lr, r2, r8, lsl #30
   18aa8:	mov	r2, r1
   18aac:	mov	r1, r0
   18ab0:	mov	r0, #0
   18ab4:	b	189f4 <__assert_fail@plt+0x75b0>
   18ab8:	mov	r3, r2
   18abc:	mov	r2, r1
   18ac0:	mov	r1, r0
   18ac4:	mov	r0, #0
   18ac8:	b	18a4c <__assert_fail@plt+0x7608>
   18acc:	push	{r4, r5, r6, r7, r8, r9, lr}
   18ad0:	mov	r4, r2
   18ad4:	ldr	lr, [pc, #128]	; 18b5c <__assert_fail@plt+0x7718>
   18ad8:	mov	r8, r0
   18adc:	mov	r9, r1
   18ae0:	ldm	lr!, {r0, r1, r2, r3}
   18ae4:	sub	sp, sp, #60	; 0x3c
   18ae8:	add	ip, sp, #4
   18aec:	lsr	r6, r4, #5
   18af0:	stmia	ip!, {r0, r1, r2, r3}
   18af4:	add	r7, sp, #12
   18af8:	ldm	lr!, {r0, r1, r2, r3}
   18afc:	and	r4, r4, #31
   18b00:	ldr	r5, [pc, #88]	; 18b60 <__assert_fail@plt+0x771c>
   18b04:	stmia	ip!, {r0, r1, r2, r3}
   18b08:	ldm	lr, {r0, r1, r2, r3}
   18b0c:	stm	ip, {r0, r1, r2, r3}
   18b10:	mov	r2, r9
   18b14:	ldr	r3, [r7, r6, lsl #2]
   18b18:	ldr	ip, [r5]
   18b1c:	mov	r1, r8
   18b20:	mvn	r0, r3, lsr r4
   18b24:	and	r0, r0, #1
   18b28:	str	ip, [sp, #52]	; 0x34
   18b2c:	eor	r4, r3, r0, lsl r4
   18b30:	add	r3, sp, #4
   18b34:	mov	r0, #0
   18b38:	str	r4, [r7, r6, lsl #2]
   18b3c:	bl	18528 <__assert_fail@plt+0x70e4>
   18b40:	ldr	r2, [sp, #52]	; 0x34
   18b44:	ldr	r3, [r5]
   18b48:	cmp	r2, r3
   18b4c:	bne	18b58 <__assert_fail@plt+0x7714>
   18b50:	add	sp, sp, #60	; 0x3c
   18b54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18b58:	bl	111c8 <__stack_chk_fail@plt>
   18b5c:			; <UNDEFINED> instruction: 0x0002f3b8
   18b60:	andeq	lr, r2, r8, lsl #30
   18b64:	mov	r2, r1
   18b68:	mvn	r1, #0
   18b6c:	b	18acc <__assert_fail@plt+0x7688>
   18b70:	mov	r2, #58	; 0x3a
   18b74:	mvn	r1, #0
   18b78:	b	18acc <__assert_fail@plt+0x7688>
   18b7c:	mov	r2, #58	; 0x3a
   18b80:	b	18acc <__assert_fail@plt+0x7688>
   18b84:	push	{r4, r5, r6, r7, r8, lr}
   18b88:	sub	sp, sp, #104	; 0x68
   18b8c:	ldr	r5, [pc, #120]	; 18c0c <__assert_fail@plt+0x77c8>
   18b90:	mov	r6, r0
   18b94:	mov	r0, sp
   18b98:	ldr	r3, [r5]
   18b9c:	mov	r7, r2
   18ba0:	str	r3, [sp, #100]	; 0x64
   18ba4:	bl	16ba0 <__assert_fail@plt+0x575c>
   18ba8:	mov	ip, sp
   18bac:	add	lr, sp, #52	; 0x34
   18bb0:	ldm	ip!, {r0, r1, r2, r3}
   18bb4:	stmia	lr!, {r0, r1, r2, r3}
   18bb8:	ldm	ip!, {r0, r1, r2, r3}
   18bbc:	ldr	r8, [sp, #64]	; 0x40
   18bc0:	stmia	lr!, {r0, r1, r2, r3}
   18bc4:	mvn	r4, r8
   18bc8:	ldm	ip, {r0, r1, r2, r3}
   18bcc:	and	ip, r4, #67108864	; 0x4000000
   18bd0:	eor	ip, ip, r8
   18bd4:	str	ip, [sp, #64]	; 0x40
   18bd8:	stm	lr, {r0, r1, r2, r3}
   18bdc:	add	r3, sp, #52	; 0x34
   18be0:	mvn	r2, #0
   18be4:	mov	r1, r7
   18be8:	mov	r0, r6
   18bec:	bl	18528 <__assert_fail@plt+0x70e4>
   18bf0:	ldr	r2, [sp, #100]	; 0x64
   18bf4:	ldr	r3, [r5]
   18bf8:	cmp	r2, r3
   18bfc:	bne	18c08 <__assert_fail@plt+0x77c4>
   18c00:	add	sp, sp, #104	; 0x68
   18c04:	pop	{r4, r5, r6, r7, r8, pc}
   18c08:	bl	111c8 <__stack_chk_fail@plt>
   18c0c:	andeq	lr, r2, r8, lsl #30
   18c10:	push	{r4, r5, r6, r7, r8, r9, lr}
   18c14:	mov	r6, r1
   18c18:	ldr	lr, [pc, #132]	; 18ca4 <__assert_fail@plt+0x7860>
   18c1c:	mov	r5, r2
   18c20:	mov	r8, r0
   18c24:	mov	r9, r3
   18c28:	ldm	lr!, {r0, r1, r2, r3}
   18c2c:	sub	sp, sp, #60	; 0x3c
   18c30:	add	ip, sp, #4
   18c34:	ldr	r4, [pc, #108]	; 18ca8 <__assert_fail@plt+0x7864>
   18c38:	stmia	ip!, {r0, r1, r2, r3}
   18c3c:	mov	r7, #10
   18c40:	ldm	lr!, {r0, r1, r2, r3}
   18c44:	cmp	r5, #0
   18c48:	cmpne	r6, #0
   18c4c:	str	r7, [sp, #4]
   18c50:	stmia	ip!, {r0, r1, r2, r3}
   18c54:	ldm	lr, {r0, r1, r2, r3}
   18c58:	ldr	lr, [r4]
   18c5c:	stm	ip, {r0, r1, r2, r3}
   18c60:	str	lr, [sp, #52]	; 0x34
   18c64:	beq	18ca0 <__assert_fail@plt+0x785c>
   18c68:	add	r3, sp, #4
   18c6c:	ldr	r2, [sp, #88]	; 0x58
   18c70:	mov	r1, r9
   18c74:	mov	r0, r8
   18c78:	str	r6, [sp, #44]	; 0x2c
   18c7c:	str	r5, [sp, #48]	; 0x30
   18c80:	bl	18528 <__assert_fail@plt+0x70e4>
   18c84:	ldr	r2, [sp, #52]	; 0x34
   18c88:	ldr	r3, [r4]
   18c8c:	cmp	r2, r3
   18c90:	bne	18c9c <__assert_fail@plt+0x7858>
   18c94:	add	sp, sp, #60	; 0x3c
   18c98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18c9c:	bl	111c8 <__stack_chk_fail@plt>
   18ca0:	bl	1142c <abort@plt>
   18ca4:			; <UNDEFINED> instruction: 0x0002f3b8
   18ca8:	andeq	lr, r2, r8, lsl #30
   18cac:	push	{lr}		; (str lr, [sp, #-4]!)
   18cb0:	sub	sp, sp, #12
   18cb4:	mvn	ip, #0
   18cb8:	str	ip, [sp]
   18cbc:	bl	18c10 <__assert_fail@plt+0x77cc>
   18cc0:	add	sp, sp, #12
   18cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   18cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   18ccc:	sub	sp, sp, #12
   18cd0:	mvn	ip, #0
   18cd4:	mov	r3, r2
   18cd8:	str	ip, [sp]
   18cdc:	mov	r2, r1
   18ce0:	mov	r1, r0
   18ce4:	mov	r0, #0
   18ce8:	bl	18c10 <__assert_fail@plt+0x77cc>
   18cec:	add	sp, sp, #12
   18cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   18cf4:	push	{lr}		; (str lr, [sp, #-4]!)
   18cf8:	sub	sp, sp, #12
   18cfc:	str	r3, [sp]
   18d00:	mov	r3, r2
   18d04:	mov	r2, r1
   18d08:	mov	r1, r0
   18d0c:	mov	r0, #0
   18d10:	bl	18c10 <__assert_fail@plt+0x77cc>
   18d14:	add	sp, sp, #12
   18d18:	pop	{pc}		; (ldr pc, [sp], #4)
   18d1c:	ldr	r3, [pc]	; 18d24 <__assert_fail@plt+0x78e0>
   18d20:	b	18528 <__assert_fail@plt+0x70e4>
   18d24:	muleq	r2, r8, r1
   18d28:	mov	r2, r1
   18d2c:	ldr	r3, [pc, #8]	; 18d3c <__assert_fail@plt+0x78f8>
   18d30:	mov	r1, r0
   18d34:	mov	r0, #0
   18d38:	b	18528 <__assert_fail@plt+0x70e4>
   18d3c:	muleq	r2, r8, r1
   18d40:	ldr	r3, [pc, #4]	; 18d4c <__assert_fail@plt+0x7908>
   18d44:	mvn	r2, #0
   18d48:	b	18528 <__assert_fail@plt+0x70e4>
   18d4c:	muleq	r2, r8, r1
   18d50:	mov	r1, r0
   18d54:	ldr	r3, [pc, #8]	; 18d64 <__assert_fail@plt+0x7920>
   18d58:	mvn	r2, #0
   18d5c:	mov	r0, #0
   18d60:	b	18528 <__assert_fail@plt+0x70e4>
   18d64:	muleq	r2, r8, r1
   18d68:	mov	r2, #3
   18d6c:	mov	r1, #0
   18d70:	b	1b550 <__assert_fail@plt+0xa10c>
   18d74:	push	{r4, r5, r6, lr}
   18d78:	sub	sp, sp, #32
   18d7c:	cmp	r1, #0
   18d80:	mov	r5, r0
   18d84:	ldr	r4, [sp, #48]	; 0x30
   18d88:	ldr	r6, [sp, #52]	; 0x34
   18d8c:	beq	18e1c <__assert_fail@plt+0x79d8>
   18d90:	strd	r2, [sp]
   18d94:	mov	r3, r1
   18d98:	ldr	r2, [pc, #828]	; 190dc <__assert_fail@plt+0x7c98>
   18d9c:	mov	r1, #1
   18da0:	bl	11378 <__fprintf_chk@plt>
   18da4:	mov	r2, #5
   18da8:	ldr	r1, [pc, #816]	; 190e0 <__assert_fail@plt+0x7c9c>
   18dac:	mov	r0, #0
   18db0:	bl	111bc <dcgettext@plt>
   18db4:	ldr	r3, [pc, #808]	; 190e4 <__assert_fail@plt+0x7ca0>
   18db8:	ldr	r2, [pc, #808]	; 190e8 <__assert_fail@plt+0x7ca4>
   18dbc:	str	r3, [sp]
   18dc0:	mov	r1, #1
   18dc4:	mov	r3, r0
   18dc8:	mov	r0, r5
   18dcc:	bl	11378 <__fprintf_chk@plt>
   18dd0:	ldr	r1, [pc, #788]	; 190ec <__assert_fail@plt+0x7ca8>
   18dd4:	mov	r2, #5
   18dd8:	mov	r0, #0
   18ddc:	bl	111bc <dcgettext@plt>
   18de0:	mov	r1, r5
   18de4:	bl	110fc <fputs_unlocked@plt>
   18de8:	cmp	r6, #9
   18dec:	ldrls	pc, [pc, r6, lsl #2]
   18df0:	b	190cc <__assert_fail@plt+0x7c88>
   18df4:	ldrdeq	r9, [r1], -r8
   18df8:	andeq	r8, r1, r0, lsr #29
   18dfc:	andeq	r8, r1, ip, asr #29
   18e00:	andeq	r8, r1, r0, lsl #30
   18e04:	andeq	r8, r1, ip, lsr pc
   18e08:	andeq	r8, r1, ip, ror pc
   18e0c:	andeq	r8, r1, r4, asr #31
   18e10:	andeq	r9, r1, r4, lsl r0
   18e14:	andeq	r9, r1, ip, rrx
   18e18:	andeq	r8, r1, r4, lsr lr
   18e1c:	str	r3, [sp]
   18e20:	mov	r1, #1
   18e24:	mov	r3, r2
   18e28:	ldr	r2, [pc, #704]	; 190f0 <__assert_fail@plt+0x7cac>
   18e2c:	bl	11378 <__fprintf_chk@plt>
   18e30:	b	18da4 <__assert_fail@plt+0x7960>
   18e34:	ldr	r1, [pc, #696]	; 190f4 <__assert_fail@plt+0x7cb0>
   18e38:	mov	r2, #5
   18e3c:	mov	r0, #0
   18e40:	bl	111bc <dcgettext@plt>
   18e44:	ldr	r2, [r4, #32]
   18e48:	ldr	r3, [r4, #28]
   18e4c:	ldr	r1, [r4, #24]
   18e50:	str	r2, [sp, #28]
   18e54:	ldr	r2, [r4, #20]
   18e58:	str	r3, [sp, #24]
   18e5c:	ldr	r3, [r4, #16]
   18e60:	str	r1, [sp, #20]
   18e64:	ldr	r1, [r4, #12]
   18e68:	str	r2, [sp, #16]
   18e6c:	ldr	r2, [r4, #8]
   18e70:	str	r3, [sp, #12]
   18e74:	ldr	r3, [r4, #4]
   18e78:	str	r1, [sp, #8]
   18e7c:	str	r2, [sp, #4]
   18e80:	str	r3, [sp]
   18e84:	mov	r1, #1
   18e88:	ldr	r3, [r4]
   18e8c:	mov	r2, r0
   18e90:	mov	r0, r5
   18e94:	bl	11378 <__fprintf_chk@plt>
   18e98:	add	sp, sp, #32
   18e9c:	pop	{r4, r5, r6, pc}
   18ea0:	mov	r2, #5
   18ea4:	ldr	r1, [pc, #588]	; 190f8 <__assert_fail@plt+0x7cb4>
   18ea8:	mov	r0, #0
   18eac:	bl	111bc <dcgettext@plt>
   18eb0:	ldr	r3, [r4]
   18eb4:	mov	r1, #1
   18eb8:	mov	r2, r0
   18ebc:	mov	r0, r5
   18ec0:	add	sp, sp, #32
   18ec4:	pop	{r4, r5, r6, lr}
   18ec8:	b	11378 <__fprintf_chk@plt>
   18ecc:	mov	r2, #5
   18ed0:	ldr	r1, [pc, #548]	; 190fc <__assert_fail@plt+0x7cb8>
   18ed4:	mov	r0, #0
   18ed8:	bl	111bc <dcgettext@plt>
   18edc:	ldr	r2, [r4, #4]
   18ee0:	ldr	r3, [r4]
   18ee4:	mov	r1, #1
   18ee8:	str	r2, [sp, #48]	; 0x30
   18eec:	mov	r2, r0
   18ef0:	mov	r0, r5
   18ef4:	add	sp, sp, #32
   18ef8:	pop	{r4, r5, r6, lr}
   18efc:	b	11378 <__fprintf_chk@plt>
   18f00:	mov	r2, #5
   18f04:	ldr	r1, [pc, #500]	; 19100 <__assert_fail@plt+0x7cbc>
   18f08:	mov	r0, #0
   18f0c:	bl	111bc <dcgettext@plt>
   18f10:	ldr	r2, [r4, #8]
   18f14:	ldr	r3, [r4, #4]
   18f18:	mov	r1, #1
   18f1c:	str	r2, [sp, #52]	; 0x34
   18f20:	str	r3, [sp, #48]	; 0x30
   18f24:	ldr	r3, [r4]
   18f28:	mov	r2, r0
   18f2c:	mov	r0, r5
   18f30:	add	sp, sp, #32
   18f34:	pop	{r4, r5, r6, lr}
   18f38:	b	11378 <__fprintf_chk@plt>
   18f3c:	mov	r2, #5
   18f40:	ldr	r1, [pc, #444]	; 19104 <__assert_fail@plt+0x7cc0>
   18f44:	mov	r0, #0
   18f48:	bl	111bc <dcgettext@plt>
   18f4c:	ldr	r1, [r4, #12]
   18f50:	ldr	r2, [r4, #8]
   18f54:	ldr	r3, [r4, #4]
   18f58:	str	r1, [sp, #8]
   18f5c:	str	r2, [sp, #4]
   18f60:	str	r3, [sp]
   18f64:	mov	r1, #1
   18f68:	ldr	r3, [r4]
   18f6c:	mov	r2, r0
   18f70:	mov	r0, r5
   18f74:	bl	11378 <__fprintf_chk@plt>
   18f78:	b	18e98 <__assert_fail@plt+0x7a54>
   18f7c:	mov	r2, #5
   18f80:	ldr	r1, [pc, #384]	; 19108 <__assert_fail@plt+0x7cc4>
   18f84:	mov	r0, #0
   18f88:	bl	111bc <dcgettext@plt>
   18f8c:	ldr	r3, [r4, #16]
   18f90:	ldr	r1, [r4, #12]
   18f94:	ldr	r2, [r4, #8]
   18f98:	str	r3, [sp, #12]
   18f9c:	ldr	r3, [r4, #4]
   18fa0:	str	r1, [sp, #8]
   18fa4:	str	r2, [sp, #4]
   18fa8:	str	r3, [sp]
   18fac:	mov	r1, #1
   18fb0:	ldr	r3, [r4]
   18fb4:	mov	r2, r0
   18fb8:	mov	r0, r5
   18fbc:	bl	11378 <__fprintf_chk@plt>
   18fc0:	b	18e98 <__assert_fail@plt+0x7a54>
   18fc4:	mov	r2, #5
   18fc8:	ldr	r1, [pc, #316]	; 1910c <__assert_fail@plt+0x7cc8>
   18fcc:	mov	r0, #0
   18fd0:	bl	111bc <dcgettext@plt>
   18fd4:	ldr	r2, [r4, #20]
   18fd8:	ldr	r3, [r4, #16]
   18fdc:	ldr	r1, [r4, #12]
   18fe0:	str	r2, [sp, #16]
   18fe4:	ldr	r2, [r4, #8]
   18fe8:	str	r3, [sp, #12]
   18fec:	ldr	r3, [r4, #4]
   18ff0:	str	r1, [sp, #8]
   18ff4:	str	r2, [sp, #4]
   18ff8:	str	r3, [sp]
   18ffc:	mov	r1, #1
   19000:	ldr	r3, [r4]
   19004:	mov	r2, r0
   19008:	mov	r0, r5
   1900c:	bl	11378 <__fprintf_chk@plt>
   19010:	b	18e98 <__assert_fail@plt+0x7a54>
   19014:	mov	r2, #5
   19018:	ldr	r1, [pc, #240]	; 19110 <__assert_fail@plt+0x7ccc>
   1901c:	mov	r0, #0
   19020:	bl	111bc <dcgettext@plt>
   19024:	ldr	r1, [r4, #24]
   19028:	ldr	r2, [r4, #20]
   1902c:	ldr	r3, [r4, #16]
   19030:	str	r1, [sp, #20]
   19034:	ldr	r1, [r4, #12]
   19038:	str	r2, [sp, #16]
   1903c:	ldr	r2, [r4, #8]
   19040:	str	r3, [sp, #12]
   19044:	ldr	r3, [r4, #4]
   19048:	str	r1, [sp, #8]
   1904c:	str	r2, [sp, #4]
   19050:	str	r3, [sp]
   19054:	mov	r1, #1
   19058:	ldr	r3, [r4]
   1905c:	mov	r2, r0
   19060:	mov	r0, r5
   19064:	bl	11378 <__fprintf_chk@plt>
   19068:	b	18e98 <__assert_fail@plt+0x7a54>
   1906c:	mov	r2, #5
   19070:	ldr	r1, [pc, #156]	; 19114 <__assert_fail@plt+0x7cd0>
   19074:	mov	r0, #0
   19078:	bl	111bc <dcgettext@plt>
   1907c:	ldr	r3, [r4, #28]
   19080:	ldr	r1, [r4, #24]
   19084:	ldr	r2, [r4, #20]
   19088:	str	r3, [sp, #24]
   1908c:	ldr	r3, [r4, #16]
   19090:	str	r1, [sp, #20]
   19094:	ldr	r1, [r4, #12]
   19098:	str	r2, [sp, #16]
   1909c:	ldr	r2, [r4, #8]
   190a0:	str	r3, [sp, #12]
   190a4:	ldr	r3, [r4, #4]
   190a8:	str	r1, [sp, #8]
   190ac:	str	r2, [sp, #4]
   190b0:	str	r3, [sp]
   190b4:	mov	r1, #1
   190b8:	ldr	r3, [r4]
   190bc:	mov	r2, r0
   190c0:	mov	r0, r5
   190c4:	bl	11378 <__fprintf_chk@plt>
   190c8:	b	18e98 <__assert_fail@plt+0x7a54>
   190cc:	mov	r2, #5
   190d0:	ldr	r1, [pc, #64]	; 19118 <__assert_fail@plt+0x7cd4>
   190d4:	b	18e3c <__assert_fail@plt+0x79f8>
   190d8:	bl	1142c <abort@plt>
   190dc:	andeq	sp, r1, r4, lsl lr
   190e0:	andeq	sp, r1, r8, lsr #28
   190e4:	andeq	r0, r0, r2, ror #15
   190e8:	strdeq	lr, [r1], -ip
   190ec:	andeq	sp, r1, ip, lsr #28
   190f0:	andeq	sp, r1, r0, lsr #28
   190f4:	andeq	lr, r1, r4
   190f8:	strdeq	sp, [r1], -r8
   190fc:	andeq	sp, r1, r8, lsl #30
   19100:	andeq	sp, r1, r0, lsr #30
   19104:	andeq	sp, r1, ip, lsr pc
   19108:	andeq	sp, r1, ip, asr pc
   1910c:	andeq	sp, r1, r0, lsl #31
   19110:	andeq	sp, r1, r8, lsr #31
   19114:	ldrdeq	sp, [r1], -r4
   19118:	andeq	lr, r1, r8, lsr r0
   1911c:	push	{r4, r5, lr}
   19120:	sub	sp, sp, #12
   19124:	ldr	r5, [sp, #24]
   19128:	ldr	ip, [r5]
   1912c:	cmp	ip, #0
   19130:	beq	1914c <__assert_fail@plt+0x7d08>
   19134:	mov	lr, r5
   19138:	mov	ip, #0
   1913c:	ldr	r4, [lr, #4]!
   19140:	add	ip, ip, #1
   19144:	cmp	r4, #0
   19148:	bne	1913c <__assert_fail@plt+0x7cf8>
   1914c:	stm	sp, {r5, ip}
   19150:	bl	18d74 <__assert_fail@plt+0x7930>
   19154:	add	sp, sp, #12
   19158:	pop	{r4, r5, pc}
   1915c:	push	{r4, r5, r6, lr}
   19160:	sub	sp, sp, #56	; 0x38
   19164:	ldr	r6, [pc, #88]	; 191c4 <__assert_fail@plt+0x7d80>
   19168:	ldr	r5, [sp, #72]	; 0x48
   1916c:	add	r4, sp, #8
   19170:	ldr	ip, [r6]
   19174:	str	ip, [sp, #52]	; 0x34
   19178:	mov	ip, #0
   1917c:	ldr	lr, [r5], #4
   19180:	cmp	lr, #0
   19184:	str	lr, [r4, #4]!
   19188:	beq	19198 <__assert_fail@plt+0x7d54>
   1918c:	add	ip, ip, #1
   19190:	cmp	ip, #10
   19194:	bne	1917c <__assert_fail@plt+0x7d38>
   19198:	add	lr, sp, #12
   1919c:	str	ip, [sp, #4]
   191a0:	str	lr, [sp]
   191a4:	bl	18d74 <__assert_fail@plt+0x7930>
   191a8:	ldr	r2, [sp, #52]	; 0x34
   191ac:	ldr	r3, [r6]
   191b0:	cmp	r2, r3
   191b4:	bne	191c0 <__assert_fail@plt+0x7d7c>
   191b8:	add	sp, sp, #56	; 0x38
   191bc:	pop	{r4, r5, r6, pc}
   191c0:	bl	111c8 <__stack_chk_fail@plt>
   191c4:	andeq	lr, r2, r8, lsl #30
   191c8:	push	{r3}		; (str r3, [sp, #-4]!)
   191cc:	mov	ip, #0
   191d0:	push	{r4, r5, r6, lr}
   191d4:	sub	sp, sp, #60	; 0x3c
   191d8:	ldr	r6, [pc, #100]	; 19244 <__assert_fail@plt+0x7e00>
   191dc:	add	r5, sp, #8
   191e0:	add	r4, sp, #80	; 0x50
   191e4:	ldr	r3, [r6]
   191e8:	str	r4, [sp, #8]
   191ec:	str	r3, [sp, #52]	; 0x34
   191f0:	ldr	r3, [sp, #76]	; 0x4c
   191f4:	ldr	lr, [r4], #4
   191f8:	cmp	lr, #0
   191fc:	str	lr, [r5, #4]!
   19200:	beq	19210 <__assert_fail@plt+0x7dcc>
   19204:	add	ip, ip, #1
   19208:	cmp	ip, #10
   1920c:	bne	191f4 <__assert_fail@plt+0x7db0>
   19210:	add	lr, sp, #12
   19214:	str	ip, [sp, #4]
   19218:	str	lr, [sp]
   1921c:	bl	18d74 <__assert_fail@plt+0x7930>
   19220:	ldr	r2, [sp, #52]	; 0x34
   19224:	ldr	r3, [r6]
   19228:	cmp	r2, r3
   1922c:	bne	19240 <__assert_fail@plt+0x7dfc>
   19230:	add	sp, sp, #60	; 0x3c
   19234:	pop	{r4, r5, r6, lr}
   19238:	add	sp, sp, #4
   1923c:	bx	lr
   19240:	bl	111c8 <__stack_chk_fail@plt>
   19244:	andeq	lr, r2, r8, lsl #30
   19248:	push	{r4, lr}
   1924c:	mov	r2, #5
   19250:	ldr	r1, [pc, #88]	; 192b0 <__assert_fail@plt+0x7e6c>
   19254:	mov	r0, #0
   19258:	bl	111bc <dcgettext@plt>
   1925c:	ldr	r2, [pc, #80]	; 192b4 <__assert_fail@plt+0x7e70>
   19260:	mov	r1, r0
   19264:	mov	r0, #1
   19268:	bl	11360 <__printf_chk@plt>
   1926c:	mov	r2, #5
   19270:	ldr	r1, [pc, #64]	; 192b8 <__assert_fail@plt+0x7e74>
   19274:	mov	r0, #0
   19278:	bl	111bc <dcgettext@plt>
   1927c:	ldr	r3, [pc, #56]	; 192bc <__assert_fail@plt+0x7e78>
   19280:	ldr	r2, [pc, #56]	; 192c0 <__assert_fail@plt+0x7e7c>
   19284:	mov	r1, r0
   19288:	mov	r0, #1
   1928c:	bl	11360 <__printf_chk@plt>
   19290:	ldr	r1, [pc, #44]	; 192c4 <__assert_fail@plt+0x7e80>
   19294:	mov	r2, #5
   19298:	mov	r0, #0
   1929c:	bl	111bc <dcgettext@plt>
   192a0:	ldr	r3, [pc, #32]	; 192c8 <__assert_fail@plt+0x7e84>
   192a4:	pop	{r4, lr}
   192a8:	ldr	r1, [r3]
   192ac:	b	110fc <fputs_unlocked@plt>
   192b0:	andeq	lr, r1, r4, ror r0
   192b4:	andeq	lr, r1, ip, lsl #1
   192b8:	andeq	lr, r1, r4, lsr #1
   192bc:	andeq	sp, r1, r0, ror #15
   192c0:	andeq	sp, r1, r8, lsl #16
   192c4:	strheq	lr, [r1], -r8
   192c8:	andeq	pc, r2, r4, ror #3
   192cc:	push	{r4, lr}
   192d0:	mov	r4, r0
   192d4:	bl	11288 <malloc@plt>
   192d8:	adds	r4, r4, #0
   192dc:	movne	r4, #1
   192e0:	cmp	r0, #0
   192e4:	movne	r4, #0
   192e8:	cmp	r4, #0
   192ec:	popeq	{r4, pc}
   192f0:	bl	19514 <__assert_fail@plt+0x80d0>
   192f4:	push	{r4, r5, r6, lr}
   192f8:	umull	r4, r5, r0, r1
   192fc:	adds	r3, r5, #0
   19300:	movne	r3, #1
   19304:	cmp	r4, #0
   19308:	blt	19320 <__assert_fail@plt+0x7edc>
   1930c:	cmp	r3, #0
   19310:	bne	19320 <__assert_fail@plt+0x7edc>
   19314:	mul	r0, r1, r0
   19318:	pop	{r4, r5, r6, lr}
   1931c:	b	192cc <__assert_fail@plt+0x7e88>
   19320:	bl	19514 <__assert_fail@plt+0x80d0>
   19324:	b	192cc <__assert_fail@plt+0x7e88>
   19328:	adds	r3, r0, #0
   1932c:	movne	r3, #1
   19330:	cmp	r1, #0
   19334:	movne	r3, #0
   19338:	cmp	r3, #0
   1933c:	push	{r4, lr}
   19340:	bne	19368 <__assert_fail@plt+0x7f24>
   19344:	mov	r4, r1
   19348:	bl	111d4 <realloc@plt>
   1934c:	adds	r4, r4, #0
   19350:	movne	r4, #1
   19354:	cmp	r0, #0
   19358:	movne	r4, #0
   1935c:	cmp	r4, #0
   19360:	popeq	{r4, pc}
   19364:	bl	19514 <__assert_fail@plt+0x80d0>
   19368:	bl	11168 <free@plt>
   1936c:	mov	r0, #0
   19370:	pop	{r4, pc}
   19374:	push	{r4, r5, r6, lr}
   19378:	umull	r4, r5, r1, r2
   1937c:	adds	r3, r5, #0
   19380:	movne	r3, #1
   19384:	cmp	r4, #0
   19388:	blt	193a0 <__assert_fail@plt+0x7f5c>
   1938c:	cmp	r3, #0
   19390:	bne	193a0 <__assert_fail@plt+0x7f5c>
   19394:	mul	r1, r2, r1
   19398:	pop	{r4, r5, r6, lr}
   1939c:	b	19328 <__assert_fail@plt+0x7ee4>
   193a0:	bl	19514 <__assert_fail@plt+0x80d0>
   193a4:	push	{r4, r5, r6, r7, r8, lr}
   193a8:	subs	r7, r0, #0
   193ac:	mov	r6, r1
   193b0:	mov	r5, r2
   193b4:	ldr	r4, [r1]
   193b8:	beq	193ec <__assert_fail@plt+0x7fa8>
   193bc:	mov	r1, r2
   193c0:	ldr	r0, [pc, #104]	; 19430 <__assert_fail@plt+0x7fec>
   193c4:	bl	1bdcc <__assert_fail@plt+0xa988>
   193c8:	cmp	r0, r4
   193cc:	bls	19410 <__assert_fail@plt+0x7fcc>
   193d0:	add	r3, r4, #1
   193d4:	add	r4, r3, r4, lsr #1
   193d8:	str	r4, [r6]
   193dc:	mul	r1, r5, r4
   193e0:	mov	r0, r7
   193e4:	pop	{r4, r5, r6, r7, r8, lr}
   193e8:	b	19328 <__assert_fail@plt+0x7ee4>
   193ec:	cmp	r4, #0
   193f0:	beq	19414 <__assert_fail@plt+0x7fd0>
   193f4:	umull	r0, r1, r4, r5
   193f8:	adds	r3, r1, #0
   193fc:	movne	r3, #1
   19400:	cmp	r0, #0
   19404:	blt	19410 <__assert_fail@plt+0x7fcc>
   19408:	cmp	r3, #0
   1940c:	beq	193d8 <__assert_fail@plt+0x7f94>
   19410:	bl	19514 <__assert_fail@plt+0x80d0>
   19414:	mov	r1, r2
   19418:	mov	r0, #64	; 0x40
   1941c:	bl	1bdcc <__assert_fail@plt+0xa988>
   19420:	cmp	r5, #64	; 0x40
   19424:	movls	r4, r0
   19428:	addhi	r4, r0, #1
   1942c:	b	193f4 <__assert_fail@plt+0x7fb0>
   19430:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   19434:	cmp	r0, #0
   19438:	ldr	r3, [r1]
   1943c:	beq	19460 <__assert_fail@plt+0x801c>
   19440:	ldr	r2, [pc, #60]	; 19484 <__assert_fail@plt+0x8040>
   19444:	cmp	r3, r2
   19448:	bhi	1947c <__assert_fail@plt+0x8038>
   1944c:	add	r2, r3, #1
   19450:	add	r3, r2, r3, lsr #1
   19454:	str	r3, [r1]
   19458:	mov	r1, r3
   1945c:	b	19328 <__assert_fail@plt+0x7ee4>
   19460:	cmp	r3, #0
   19464:	bne	19478 <__assert_fail@plt+0x8034>
   19468:	mov	r3, #64	; 0x40
   1946c:	str	r3, [r1]
   19470:	mov	r1, r3
   19474:	b	19328 <__assert_fail@plt+0x7ee4>
   19478:	bge	19454 <__assert_fail@plt+0x8010>
   1947c:	push	{r4, lr}
   19480:	bl	19514 <__assert_fail@plt+0x80d0>
   19484:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   19488:	push	{r4, lr}
   1948c:	mov	r4, r0
   19490:	bl	192cc <__assert_fail@plt+0x7e88>
   19494:	mov	r2, r4
   19498:	mov	r1, #0
   1949c:	pop	{r4, lr}
   194a0:	b	11354 <memset@plt>
   194a4:	push	{r4, r5, r6, lr}
   194a8:	umull	r4, r5, r0, r1
   194ac:	adds	r3, r5, #0
   194b0:	movne	r3, #1
   194b4:	cmp	r4, #0
   194b8:	blt	194d0 <__assert_fail@plt+0x808c>
   194bc:	cmp	r3, #0
   194c0:	bne	194d0 <__assert_fail@plt+0x808c>
   194c4:	bl	110f0 <calloc@plt>
   194c8:	cmp	r0, #0
   194cc:	popne	{r4, r5, r6, pc}
   194d0:	bl	19514 <__assert_fail@plt+0x80d0>
   194d4:	push	{r4, r5, r6, lr}
   194d8:	mov	r4, r1
   194dc:	mov	r5, r0
   194e0:	mov	r0, r1
   194e4:	bl	192cc <__assert_fail@plt+0x7e88>
   194e8:	mov	r2, r4
   194ec:	mov	r1, r5
   194f0:	pop	{r4, r5, r6, lr}
   194f4:	b	1118c <memcpy@plt>
   194f8:	push	{r4, lr}
   194fc:	mov	r4, r0
   19500:	bl	11300 <strlen@plt>
   19504:	add	r1, r0, #1
   19508:	mov	r0, r4
   1950c:	pop	{r4, lr}
   19510:	b	194d4 <__assert_fail@plt+0x8090>
   19514:	ldr	r3, [pc, #44]	; 19548 <__assert_fail@plt+0x8104>
   19518:	push	{r4, lr}
   1951c:	mov	r2, #5
   19520:	ldr	r1, [pc, #36]	; 1954c <__assert_fail@plt+0x8108>
   19524:	mov	r0, #0
   19528:	ldr	r4, [r3]
   1952c:	bl	111bc <dcgettext@plt>
   19530:	ldr	r2, [pc, #24]	; 19550 <__assert_fail@plt+0x810c>
   19534:	mov	r1, #0
   19538:	mov	r3, r0
   1953c:	mov	r0, r4
   19540:	bl	11270 <error@plt>
   19544:	bl	1142c <abort@plt>
   19548:	andeq	pc, r2, r4, lsl #3
   1954c:	andeq	lr, r1, ip, lsr #2
   19550:	andeq	sp, r1, r0, asr #25
   19554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19558:	sub	sp, sp, #36	; 0x24
   1955c:	ldr	r6, [pc, #348]	; 196c0 <__assert_fail@plt+0x827c>
   19560:	ldr	lr, [sp, #80]	; 0x50
   19564:	mov	r8, r2
   19568:	ldr	ip, [r6]
   1956c:	mov	r2, r1
   19570:	mov	r9, r3
   19574:	str	lr, [sp]
   19578:	add	r3, sp, #16
   1957c:	mov	r1, #0
   19580:	str	ip, [sp, #28]
   19584:	mov	r7, r0
   19588:	ldr	sl, [sp, #84]	; 0x54
   1958c:	ldr	r5, [sp, #88]	; 0x58
   19590:	bl	196d0 <__assert_fail@plt+0x828c>
   19594:	subs	fp, r0, #0
   19598:	bne	19660 <__assert_fail@plt+0x821c>
   1959c:	ldrd	r2, [sp, #16]
   195a0:	cmp	r2, r8
   195a4:	sbcs	r1, r3, r9
   195a8:	ldrd	r8, [sp, #72]	; 0x48
   195ac:	movlt	r1, #1
   195b0:	movge	r1, #0
   195b4:	cmp	r8, r2
   195b8:	sbcs	r0, r9, r3
   195bc:	orrlt	r1, r1, #1
   195c0:	cmp	r1, #0
   195c4:	beq	19628 <__assert_fail@plt+0x81e4>
   195c8:	strd	r2, [sp, #8]
   195cc:	bl	11330 <__errno_location@plt>
   195d0:	ldrd	r2, [sp, #8]
   195d4:	cmp	r2, #1073741824	; 0x40000000
   195d8:	sbcs	r1, r3, #0
   195dc:	bge	19648 <__assert_fail@plt+0x8204>
   195e0:	mov	r8, #-1073741824	; 0xc0000000
   195e4:	mvn	r9, #0
   195e8:	cmp	r2, r8
   195ec:	sbcs	r3, r3, r9
   195f0:	blt	19648 <__assert_fail@plt+0x8204>
   195f4:	mov	r4, #34	; 0x22
   195f8:	cmp	r5, #0
   195fc:	str	r4, [r0]
   19600:	beq	196a0 <__assert_fail@plt+0x825c>
   19604:	mov	r0, r7
   19608:	bl	18d50 <__assert_fail@plt+0x790c>
   1960c:	mov	r3, sl
   19610:	ldr	r2, [pc, #172]	; 196c4 <__assert_fail@plt+0x8280>
   19614:	mov	r1, r4
   19618:	str	r0, [sp]
   1961c:	mov	r0, r5
   19620:	bl	11270 <error@plt>
   19624:	ldrd	r2, [sp, #16]
   19628:	ldr	lr, [sp, #28]
   1962c:	ldr	ip, [r6]
   19630:	mov	r0, r2
   19634:	cmp	lr, ip
   19638:	mov	r1, r3
   1963c:	bne	196bc <__assert_fail@plt+0x8278>
   19640:	add	sp, sp, #36	; 0x24
   19644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19648:	mov	r4, #75	; 0x4b
   1964c:	cmp	r5, #0
   19650:	str	r4, [r0]
   19654:	moveq	r5, #1
   19658:	moveq	r4, #75	; 0x4b
   1965c:	b	19604 <__assert_fail@plt+0x81c0>
   19660:	bl	11330 <__errno_location@plt>
   19664:	cmp	fp, #1
   19668:	beq	196a8 <__assert_fail@plt+0x8264>
   1966c:	cmp	fp, #3
   19670:	beq	1968c <__assert_fail@plt+0x8248>
   19674:	ldr	r4, [r0]
   19678:	cmp	r5, #0
   1967c:	moveq	r5, #1
   19680:	cmp	r4, #22
   19684:	moveq	r4, #0
   19688:	b	19604 <__assert_fail@plt+0x81c0>
   1968c:	mov	r4, #0
   19690:	cmp	r5, #0
   19694:	str	r4, [r0]
   19698:	bne	19604 <__assert_fail@plt+0x81c0>
   1969c:	mov	r4, r5
   196a0:	mov	r5, #1
   196a4:	b	19604 <__assert_fail@plt+0x81c0>
   196a8:	mov	r4, #75	; 0x4b
   196ac:	cmp	r5, #0
   196b0:	str	r4, [r0]
   196b4:	bne	19604 <__assert_fail@plt+0x81c0>
   196b8:	b	196a0 <__assert_fail@plt+0x825c>
   196bc:	bl	111c8 <__stack_chk_fail@plt>
   196c0:	andeq	lr, r2, r8, lsl #30
   196c4:			; <UNDEFINED> instruction: 0x0001dcbc
   196c8:	mov	r1, #10
   196cc:	b	19554 <__assert_fail@plt+0x8110>
   196d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196d4:	cmp	r2, #36	; 0x24
   196d8:	mov	r6, r2
   196dc:	ldr	r2, [pc, #2760]	; 1a1ac <__assert_fail@plt+0x8d68>
   196e0:	sub	sp, sp, #36	; 0x24
   196e4:	ldr	r2, [r2]
   196e8:	ldr	r9, [sp, #72]	; 0x48
   196ec:	str	r2, [sp, #28]
   196f0:	bhi	1a194 <__assert_fail@plt+0x8d50>
   196f4:	cmp	r1, #0
   196f8:	mov	r5, r1
   196fc:	mov	r8, r0
   19700:	addeq	r5, sp, #24
   19704:	mov	sl, r3
   19708:	bl	11330 <__errno_location@plt>
   1970c:	mov	r4, #0
   19710:	mov	r2, r6
   19714:	mov	r3, r4
   19718:	mov	r1, r5
   1971c:	str	r4, [r0]
   19720:	mov	fp, r0
   19724:	mov	r0, r8
   19728:	bl	113f0 <__strtoll_internal@plt>
   1972c:	ldr	r3, [r5]
   19730:	cmp	r3, r8
   19734:	str	r3, [sp, #8]
   19738:	mov	r6, r0
   1973c:	mov	r7, r1
   19740:	beq	19798 <__assert_fail@plt+0x8354>
   19744:	ldr	r4, [fp]
   19748:	cmp	r4, #0
   1974c:	beq	1975c <__assert_fail@plt+0x8318>
   19750:	cmp	r4, #34	; 0x22
   19754:	bne	19898 <__assert_fail@plt+0x8454>
   19758:	mov	r4, #1
   1975c:	cmp	r9, #0
   19760:	beq	19774 <__assert_fail@plt+0x8330>
   19764:	ldr	r3, [sp, #8]
   19768:	ldrb	r8, [r3]
   1976c:	cmp	r8, #0
   19770:	bne	199a0 <__assert_fail@plt+0x855c>
   19774:	strd	r6, [sl]
   19778:	ldr	r3, [pc, #2604]	; 1a1ac <__assert_fail@plt+0x8d68>
   1977c:	ldr	r2, [sp, #28]
   19780:	mov	r0, r4
   19784:	ldr	r3, [r3]
   19788:	cmp	r2, r3
   1978c:	bne	1a1a8 <__assert_fail@plt+0x8d64>
   19790:	add	sp, sp, #36	; 0x24
   19794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19798:	cmp	r9, r4
   1979c:	beq	19898 <__assert_fail@plt+0x8454>
   197a0:	ldrb	r8, [r8]
   197a4:	cmp	r8, r4
   197a8:	beq	19898 <__assert_fail@plt+0x8454>
   197ac:	mov	r1, r8
   197b0:	mov	r0, r9
   197b4:	bl	1130c <strchr@plt>
   197b8:	cmp	r0, r4
   197bc:	movne	r6, #1
   197c0:	movne	r7, #0
   197c4:	beq	19898 <__assert_fail@plt+0x8454>
   197c8:	sub	fp, r8, #69	; 0x45
   197cc:	cmp	fp, #47	; 0x2f
   197d0:	ldrls	pc, [pc, fp, lsl #2]
   197d4:	b	199c0 <__assert_fail@plt+0x857c>
   197d8:	andeq	r9, r1, r0, lsr #17
   197dc:	andeq	r9, r1, r0, asr #19
   197e0:	andeq	r9, r1, r0, lsr #17
   197e4:	andeq	r9, r1, r0, asr #19
   197e8:	andeq	r9, r1, r0, asr #19
   197ec:	andeq	r9, r1, r0, asr #19
   197f0:	andeq	r9, r1, r0, lsr #17
   197f4:	andeq	r9, r1, r0, asr #19
   197f8:	andeq	r9, r1, r0, lsr #17
   197fc:	andeq	r9, r1, r0, asr #19
   19800:	andeq	r9, r1, r0, asr #19
   19804:	andeq	r9, r1, r0, lsr #17
   19808:	andeq	r9, r1, r0, asr #19
   1980c:	andeq	r9, r1, r0, asr #19
   19810:	andeq	r9, r1, r0, asr #19
   19814:	andeq	r9, r1, r0, lsr #17
   19818:	andeq	r9, r1, r0, asr #19
   1981c:	andeq	r9, r1, r0, asr #19
   19820:	andeq	r9, r1, r0, asr #19
   19824:	andeq	r9, r1, r0, asr #19
   19828:	andeq	r9, r1, r0, lsr #17
   1982c:	andeq	r9, r1, r0, lsr #17
   19830:	andeq	r9, r1, r0, asr #19
   19834:	andeq	r9, r1, r0, asr #19
   19838:	andeq	r9, r1, r0, asr #19
   1983c:	andeq	r9, r1, r0, asr #19
   19840:	andeq	r9, r1, r0, asr #19
   19844:	andeq	r9, r1, r0, asr #19
   19848:	andeq	r9, r1, r0, asr #19
   1984c:	andeq	r9, r1, r0, asr #19
   19850:	andeq	r9, r1, r0, asr #19
   19854:	andeq	r9, r1, r0, asr #19
   19858:	andeq	r9, r1, r0, asr #19
   1985c:	andeq	r9, r1, r0, asr #19
   19860:	andeq	r9, r1, r0, lsr #17
   19864:	andeq	r9, r1, r0, asr #19
   19868:	andeq	r9, r1, r0, asr #19
   1986c:	andeq	r9, r1, r0, asr #19
   19870:	andeq	r9, r1, r0, lsr #17
   19874:	andeq	r9, r1, r0, asr #19
   19878:	andeq	r9, r1, r0, lsr #17
   1987c:	andeq	r9, r1, r0, asr #19
   19880:	andeq	r9, r1, r0, asr #19
   19884:	andeq	r9, r1, r0, asr #19
   19888:	andeq	r9, r1, r0, asr #19
   1988c:	andeq	r9, r1, r0, asr #19
   19890:	andeq	r9, r1, r0, asr #19
   19894:	andeq	r9, r1, r0, lsr #17
   19898:	mov	r4, #4
   1989c:	b	19778 <__assert_fail@plt+0x8334>
   198a0:	mov	r0, r9
   198a4:	mov	r1, #48	; 0x30
   198a8:	bl	1130c <strchr@plt>
   198ac:	cmp	r0, #0
   198b0:	beq	199c0 <__assert_fail@plt+0x857c>
   198b4:	ldr	r3, [sp, #8]
   198b8:	ldrb	r3, [r3, #1]
   198bc:	cmp	r3, #68	; 0x44
   198c0:	beq	1a16c <__assert_fail@plt+0x8d28>
   198c4:	cmp	r3, #105	; 0x69
   198c8:	beq	1a178 <__assert_fail@plt+0x8d34>
   198cc:	cmp	r3, #66	; 0x42
   198d0:	beq	1a16c <__assert_fail@plt+0x8d28>
   198d4:	cmp	fp, #47	; 0x2f
   198d8:	ldrls	pc, [pc, fp, lsl #2]
   198dc:	b	199b4 <__assert_fail@plt+0x8570>
   198e0:	andeq	sl, r1, ip, lsr #1
   198e4:			; <UNDEFINED> instruction: 0x000199b4
   198e8:	andeq	sl, r1, r8, lsl #1
   198ec:			; <UNDEFINED> instruction: 0x000199b4
   198f0:			; <UNDEFINED> instruction: 0x000199b4
   198f4:			; <UNDEFINED> instruction: 0x000199b4
   198f8:	andeq	sl, r1, r0, ror r0
   198fc:			; <UNDEFINED> instruction: 0x000199b4
   19900:	andeq	sl, r1, r4, asr r0
   19904:			; <UNDEFINED> instruction: 0x000199b4
   19908:			; <UNDEFINED> instruction: 0x000199b4
   1990c:	andeq	sl, r1, r0, lsr r0
   19910:			; <UNDEFINED> instruction: 0x000199b4
   19914:			; <UNDEFINED> instruction: 0x000199b4
   19918:			; <UNDEFINED> instruction: 0x000199b4
   1991c:	andeq	sl, r1, ip
   19920:			; <UNDEFINED> instruction: 0x000199b4
   19924:			; <UNDEFINED> instruction: 0x000199b4
   19928:			; <UNDEFINED> instruction: 0x000199b4
   1992c:			; <UNDEFINED> instruction: 0x000199b4
   19930:	andeq	r9, r1, r8, ror #31
   19934:	andeq	r9, r1, r4, asr #31
   19938:			; <UNDEFINED> instruction: 0x000199b4
   1993c:			; <UNDEFINED> instruction: 0x000199b4
   19940:			; <UNDEFINED> instruction: 0x000199b4
   19944:			; <UNDEFINED> instruction: 0x000199b4
   19948:			; <UNDEFINED> instruction: 0x000199b4
   1994c:			; <UNDEFINED> instruction: 0x000199b4
   19950:			; <UNDEFINED> instruction: 0x000199b4
   19954:	andeq	r9, r1, ip, ror fp
   19958:	ldrdeq	sl, [r1], -r0
   1995c:			; <UNDEFINED> instruction: 0x000199b4
   19960:			; <UNDEFINED> instruction: 0x000199b4
   19964:			; <UNDEFINED> instruction: 0x000199b4
   19968:	andeq	sl, r1, r8, lsl #1
   1996c:			; <UNDEFINED> instruction: 0x000199b4
   19970:			; <UNDEFINED> instruction: 0x000199b4
   19974:			; <UNDEFINED> instruction: 0x000199b4
   19978:	andeq	sl, r1, r0, ror r0
   1997c:			; <UNDEFINED> instruction: 0x000199b4
   19980:	andeq	sl, r1, r4, asr r0
   19984:			; <UNDEFINED> instruction: 0x000199b4
   19988:			; <UNDEFINED> instruction: 0x000199b4
   1998c:			; <UNDEFINED> instruction: 0x000199b4
   19990:			; <UNDEFINED> instruction: 0x000199b4
   19994:			; <UNDEFINED> instruction: 0x000199b4
   19998:			; <UNDEFINED> instruction: 0x000199b4
   1999c:	andeq	sl, r1, ip
   199a0:	mov	r1, r8
   199a4:	mov	r0, r9
   199a8:	bl	1130c <strchr@plt>
   199ac:	cmp	r0, #0
   199b0:	bne	197c8 <__assert_fail@plt+0x8384>
   199b4:	strd	r6, [sl]
   199b8:	orr	r4, r4, #2
   199bc:	b	19778 <__assert_fail@plt+0x8334>
   199c0:	mov	fp, #1
   199c4:	mov	r3, #1024	; 0x400
   199c8:	sub	r8, r8, #66	; 0x42
   199cc:	cmp	r8, #53	; 0x35
   199d0:	ldrls	pc, [pc, r8, lsl #2]
   199d4:	b	199b4 <__assert_fail@plt+0x8570>
   199d8:			; <UNDEFINED> instruction: 0x00019bb8
   199dc:			; <UNDEFINED> instruction: 0x000199b4
   199e0:			; <UNDEFINED> instruction: 0x000199b4
   199e4:	andeq	r9, r1, r0, lsr pc
   199e8:			; <UNDEFINED> instruction: 0x000199b4
   199ec:	andeq	r9, r1, r4, ror sp
   199f0:			; <UNDEFINED> instruction: 0x000199b4
   199f4:			; <UNDEFINED> instruction: 0x000199b4
   199f8:			; <UNDEFINED> instruction: 0x000199b4
   199fc:	andeq	r9, r1, r8, lsl sp
   19a00:			; <UNDEFINED> instruction: 0x000199b4
   19a04:			; <UNDEFINED> instruction: 0x00019ab0
   19a08:			; <UNDEFINED> instruction: 0x000199b4
   19a0c:			; <UNDEFINED> instruction: 0x000199b4
   19a10:	strdeq	r9, [r1], -r0
   19a14:			; <UNDEFINED> instruction: 0x000199b4
   19a18:			; <UNDEFINED> instruction: 0x000199b4
   19a1c:			; <UNDEFINED> instruction: 0x000199b4
   19a20:	andeq	r9, r1, r8, lsl #28
   19a24:			; <UNDEFINED> instruction: 0x000199b4
   19a28:			; <UNDEFINED> instruction: 0x000199b4
   19a2c:			; <UNDEFINED> instruction: 0x000199b4
   19a30:			; <UNDEFINED> instruction: 0x000199b4
   19a34:	andeq	r9, r1, r4, lsl #25
   19a38:	muleq	r1, ip, lr
   19a3c:			; <UNDEFINED> instruction: 0x000199b4
   19a40:			; <UNDEFINED> instruction: 0x000199b4
   19a44:			; <UNDEFINED> instruction: 0x000199b4
   19a48:			; <UNDEFINED> instruction: 0x000199b4
   19a4c:			; <UNDEFINED> instruction: 0x000199b4
   19a50:			; <UNDEFINED> instruction: 0x000199b4
   19a54:			; <UNDEFINED> instruction: 0x000199b4
   19a58:	andeq	r9, r1, r0, lsl #23
   19a5c:	andeq	r9, r1, ip, lsr fp
   19a60:			; <UNDEFINED> instruction: 0x000199b4
   19a64:			; <UNDEFINED> instruction: 0x000199b4
   19a68:			; <UNDEFINED> instruction: 0x000199b4
   19a6c:	andeq	r9, r1, r4, ror sp
   19a70:			; <UNDEFINED> instruction: 0x000199b4
   19a74:			; <UNDEFINED> instruction: 0x000199b4
   19a78:			; <UNDEFINED> instruction: 0x000199b4
   19a7c:	andeq	r9, r1, r8, lsl sp
   19a80:			; <UNDEFINED> instruction: 0x000199b4
   19a84:			; <UNDEFINED> instruction: 0x00019ab0
   19a88:			; <UNDEFINED> instruction: 0x000199b4
   19a8c:			; <UNDEFINED> instruction: 0x000199b4
   19a90:			; <UNDEFINED> instruction: 0x000199b4
   19a94:			; <UNDEFINED> instruction: 0x000199b4
   19a98:			; <UNDEFINED> instruction: 0x000199b4
   19a9c:			; <UNDEFINED> instruction: 0x000199b4
   19aa0:	andeq	r9, r1, r8, lsl #28
   19aa4:			; <UNDEFINED> instruction: 0x000199b4
   19aa8:			; <UNDEFINED> instruction: 0x000199b4
   19aac:	andeq	r9, r1, r8, asr fp
   19ab0:	asr	r9, r3, #31
   19ab4:	mov	r2, r3
   19ab8:	mov	r8, r3
   19abc:	mov	r0, #0
   19ac0:	mov	r3, r9
   19ac4:	mov	r1, #-2147483648	; 0x80000000
   19ac8:	bl	1c218 <__assert_fail@plt+0xadd4>
   19acc:	strd	r0, [sp]
   19ad0:	ldrd	r2, [sp]
   19ad4:	cmp	r6, r2
   19ad8:	sbcs	r3, r7, r3
   19adc:	blt	1a0ec <__assert_fail@plt+0x8ca8>
   19ae0:	mov	r3, r9
   19ae4:	mov	r2, r8
   19ae8:	mvn	r0, #0
   19aec:	mvn	r1, #-2147483648	; 0x80000000
   19af0:	bl	1c218 <__assert_fail@plt+0xadd4>
   19af4:	cmp	r0, r6
   19af8:	sbcs	r3, r1, r7
   19afc:	blt	1a0fc <__assert_fail@plt+0x8cb8>
   19b00:	mul	ip, r6, r9
   19b04:	umull	r2, r3, r6, r8
   19b08:	mla	ip, r8, r7, ip
   19b0c:	ldrd	r6, [sp]
   19b10:	add	r3, ip, r3
   19b14:	cmp	r2, r6
   19b18:	sbcs	ip, r3, r7
   19b1c:	blt	1a0ec <__assert_fail@plt+0x8ca8>
   19b20:	cmp	r0, r2
   19b24:	sbcs	r1, r1, r3
   19b28:	blt	1a0fc <__assert_fail@plt+0x8cb8>
   19b2c:	mul	r1, r2, r9
   19b30:	umull	r6, r7, r2, r8
   19b34:	mla	r8, r8, r3, r1
   19b38:	add	r7, r8, r7
   19b3c:	ldr	r2, [sp, #8]
   19b40:	add	r3, r2, fp
   19b44:	str	r3, [r5]
   19b48:	ldrb	r3, [r2, fp]
   19b4c:	cmp	r3, #0
   19b50:	orrne	r4, r4, #2
   19b54:	b	19774 <__assert_fail@plt+0x8330>
   19b58:	cmp	r6, #0
   19b5c:	sbcs	r3, r7, #-1073741824	; 0xc0000000
   19b60:	blt	1a0ec <__assert_fail@plt+0x8ca8>
   19b64:	cmp	r6, #0
   19b68:	sbcs	r3, r7, #1073741824	; 0x40000000
   19b6c:	bge	1a0fc <__assert_fail@plt+0x8cb8>
   19b70:	adds	r6, r6, r6
   19b74:	adc	r7, r7, r7
   19b78:	b	19b3c <__assert_fail@plt+0x86f8>
   19b7c:	mov	fp, #1
   19b80:	mov	r2, #0
   19b84:	ldr	r3, [pc, #1572]	; 1a1b0 <__assert_fail@plt+0x8d6c>
   19b88:	cmp	r6, r2
   19b8c:	sbcs	r3, r7, r3
   19b90:	blt	1a0ec <__assert_fail@plt+0x8ca8>
   19b94:	cmp	r6, #0
   19b98:	sbcs	r3, r7, #4194304	; 0x400000
   19b9c:	bge	1a0fc <__assert_fail@plt+0x8cb8>
   19ba0:	lsl	r3, r7, #9
   19ba4:	orr	r3, r3, r6, lsr #23
   19ba8:	lsl	r2, r6, #9
   19bac:	mov	r6, r2
   19bb0:	mov	r7, r3
   19bb4:	b	19b3c <__assert_fail@plt+0x86f8>
   19bb8:	mov	r2, #0
   19bbc:	ldr	r3, [pc, #1520]	; 1a1b4 <__assert_fail@plt+0x8d70>
   19bc0:	cmp	r6, r2
   19bc4:	sbcs	r3, r7, r3
   19bc8:	blt	1a0ec <__assert_fail@plt+0x8ca8>
   19bcc:	cmp	r6, #0
   19bd0:	sbcs	r3, r7, #2097152	; 0x200000
   19bd4:	bge	1a0fc <__assert_fail@plt+0x8cb8>
   19bd8:	lsl	r3, r7, #10
   19bdc:	orr	r3, r3, r6, lsr #22
   19be0:	lsl	r2, r6, #10
   19be4:	mov	r6, r2
   19be8:	mov	r7, r3
   19bec:	b	19b3c <__assert_fail@plt+0x86f8>
   19bf0:	asr	r1, r3, #31
   19bf4:	mov	r2, r3
   19bf8:	mov	r3, r1
   19bfc:	mov	r0, #0
   19c00:	mov	r1, #-2147483648	; 0x80000000
   19c04:	strd	r2, [sp]
   19c08:	bl	1c218 <__assert_fail@plt+0xadd4>
   19c0c:	str	fp, [sp, #12]
   19c10:	strd	r4, [sp, #16]
   19c14:	mov	r8, #5
   19c18:	ldrd	r4, [sp]
   19c1c:	mov	r9, #0
   19c20:	str	sl, [sp]
   19c24:	mov	fp, r1
   19c28:	mov	sl, r0
   19c2c:	b	19c68 <__assert_fail@plt+0x8824>
   19c30:	mov	r3, r5
   19c34:	mov	r2, r4
   19c38:	mvn	r0, #0
   19c3c:	mvn	r1, #-2147483648	; 0x80000000
   19c40:	bl	1c218 <__assert_fail@plt+0xadd4>
   19c44:	cmp	r0, r6
   19c48:	sbcs	r3, r1, r7
   19c4c:	blt	1a13c <__assert_fail@plt+0x8cf8>
   19c50:	mul	r3, r6, r5
   19c54:	mla	r3, r4, r7, r3
   19c58:	umull	r6, r7, r6, r4
   19c5c:	add	r7, r3, r7
   19c60:	subs	r8, r8, #1
   19c64:	beq	1a0d8 <__assert_fail@plt+0x8c94>
   19c68:	cmp	r6, sl
   19c6c:	sbcs	r3, r7, fp
   19c70:	bge	19c30 <__assert_fail@plt+0x87ec>
   19c74:	mov	r9, #1
   19c78:	mov	r6, #0
   19c7c:	mov	r7, #-2147483648	; 0x80000000
   19c80:	b	19c60 <__assert_fail@plt+0x881c>
   19c84:	asr	r1, r3, #31
   19c88:	mov	r2, r3
   19c8c:	mov	r3, r1
   19c90:	mov	r0, #0
   19c94:	mov	r1, #-2147483648	; 0x80000000
   19c98:	strd	r2, [sp]
   19c9c:	bl	1c218 <__assert_fail@plt+0xadd4>
   19ca0:	str	fp, [sp, #12]
   19ca4:	strd	r4, [sp, #16]
   19ca8:	mov	r8, #8
   19cac:	ldrd	r4, [sp]
   19cb0:	mov	r9, #0
   19cb4:	str	sl, [sp]
   19cb8:	mov	fp, r1
   19cbc:	mov	sl, r0
   19cc0:	b	19cfc <__assert_fail@plt+0x88b8>
   19cc4:	mov	r3, r5
   19cc8:	mov	r2, r4
   19ccc:	mvn	r0, #0
   19cd0:	mvn	r1, #-2147483648	; 0x80000000
   19cd4:	bl	1c218 <__assert_fail@plt+0xadd4>
   19cd8:	cmp	r0, r6
   19cdc:	sbcs	r3, r1, r7
   19ce0:	blt	1a11c <__assert_fail@plt+0x8cd8>
   19ce4:	mul	r3, r6, r5
   19ce8:	mla	r3, r4, r7, r3
   19cec:	umull	r6, r7, r6, r4
   19cf0:	add	r7, r3, r7
   19cf4:	subs	r8, r8, #1
   19cf8:	beq	1a0d8 <__assert_fail@plt+0x8c94>
   19cfc:	cmp	r6, sl
   19d00:	sbcs	r3, r7, fp
   19d04:	bge	19cc4 <__assert_fail@plt+0x8880>
   19d08:	mov	r9, #1
   19d0c:	mov	r6, #0
   19d10:	mov	r7, #-2147483648	; 0x80000000
   19d14:	b	19cf4 <__assert_fail@plt+0x88b0>
   19d18:	asr	r9, r3, #31
   19d1c:	mov	r8, r3
   19d20:	mov	r2, r3
   19d24:	mov	r0, #0
   19d28:	mov	r3, r9
   19d2c:	mov	r1, #-2147483648	; 0x80000000
   19d30:	bl	1c218 <__assert_fail@plt+0xadd4>
   19d34:	cmp	r6, r0
   19d38:	sbcs	r3, r7, r1
   19d3c:	blt	1a0ec <__assert_fail@plt+0x8ca8>
   19d40:	mov	r3, r9
   19d44:	mov	r2, r8
   19d48:	mvn	r0, #0
   19d4c:	mvn	r1, #-2147483648	; 0x80000000
   19d50:	bl	1c218 <__assert_fail@plt+0xadd4>
   19d54:	cmp	r0, r6
   19d58:	sbcs	r3, r1, r7
   19d5c:	blt	1a0fc <__assert_fail@plt+0x8cb8>
   19d60:	mul	r3, r6, r9
   19d64:	mla	r3, r8, r7, r3
   19d68:	umull	r6, r7, r6, r8
   19d6c:	add	r7, r3, r7
   19d70:	b	19b3c <__assert_fail@plt+0x86f8>
   19d74:	asr	r1, r3, #31
   19d78:	mov	r2, r3
   19d7c:	mov	r3, r1
   19d80:	mov	r0, #0
   19d84:	mov	r1, #-2147483648	; 0x80000000
   19d88:	strd	r2, [sp]
   19d8c:	bl	1c218 <__assert_fail@plt+0xadd4>
   19d90:	str	fp, [sp, #12]
   19d94:	strd	r4, [sp, #16]
   19d98:	mov	r8, #3
   19d9c:	ldrd	r4, [sp]
   19da0:	mov	r9, #0
   19da4:	str	sl, [sp]
   19da8:	mov	fp, r1
   19dac:	mov	sl, r0
   19db0:	b	19dec <__assert_fail@plt+0x89a8>
   19db4:	mov	r3, r5
   19db8:	mov	r2, r4
   19dbc:	mvn	r0, #0
   19dc0:	mvn	r1, #-2147483648	; 0x80000000
   19dc4:	bl	1c218 <__assert_fail@plt+0xadd4>
   19dc8:	cmp	r0, r6
   19dcc:	sbcs	r3, r1, r7
   19dd0:	blt	1a10c <__assert_fail@plt+0x8cc8>
   19dd4:	mul	r3, r6, r5
   19dd8:	mla	r3, r4, r7, r3
   19ddc:	umull	r6, r7, r6, r4
   19de0:	add	r7, r3, r7
   19de4:	subs	r8, r8, #1
   19de8:	beq	1a0d8 <__assert_fail@plt+0x8c94>
   19dec:	cmp	r6, sl
   19df0:	sbcs	r3, r7, fp
   19df4:	bge	19db4 <__assert_fail@plt+0x8970>
   19df8:	mov	r9, #1
   19dfc:	mov	r6, #0
   19e00:	mov	r7, #-2147483648	; 0x80000000
   19e04:	b	19de4 <__assert_fail@plt+0x89a0>
   19e08:	asr	r1, r3, #31
   19e0c:	mov	r2, r3
   19e10:	mov	r3, r1
   19e14:	mov	r0, #0
   19e18:	mov	r1, #-2147483648	; 0x80000000
   19e1c:	strd	r2, [sp]
   19e20:	bl	1c218 <__assert_fail@plt+0xadd4>
   19e24:	str	fp, [sp, #12]
   19e28:	strd	r4, [sp, #16]
   19e2c:	mov	r8, #4
   19e30:	ldrd	r4, [sp]
   19e34:	mov	r9, #0
   19e38:	str	sl, [sp]
   19e3c:	mov	fp, r1
   19e40:	mov	sl, r0
   19e44:	b	19e80 <__assert_fail@plt+0x8a3c>
   19e48:	mov	r3, r5
   19e4c:	mov	r2, r4
   19e50:	mvn	r0, #0
   19e54:	mvn	r1, #-2147483648	; 0x80000000
   19e58:	bl	1c218 <__assert_fail@plt+0xadd4>
   19e5c:	cmp	r0, r6
   19e60:	sbcs	r3, r1, r7
   19e64:	blt	1a15c <__assert_fail@plt+0x8d18>
   19e68:	mul	r3, r6, r5
   19e6c:	mla	r3, r4, r7, r3
   19e70:	umull	r6, r7, r6, r4
   19e74:	add	r7, r3, r7
   19e78:	subs	r8, r8, #1
   19e7c:	beq	1a0d8 <__assert_fail@plt+0x8c94>
   19e80:	cmp	r6, sl
   19e84:	sbcs	r3, r7, fp
   19e88:	bge	19e48 <__assert_fail@plt+0x8a04>
   19e8c:	mov	r9, #1
   19e90:	mov	r6, #0
   19e94:	mov	r7, #-2147483648	; 0x80000000
   19e98:	b	19e78 <__assert_fail@plt+0x8a34>
   19e9c:	asr	r1, r3, #31
   19ea0:	mov	r2, r3
   19ea4:	mov	r3, r1
   19ea8:	mov	r0, #0
   19eac:	mov	r1, #-2147483648	; 0x80000000
   19eb0:	strd	r2, [sp]
   19eb4:	bl	1c218 <__assert_fail@plt+0xadd4>
   19eb8:	str	fp, [sp, #12]
   19ebc:	strd	r4, [sp, #16]
   19ec0:	mov	r8, #7
   19ec4:	ldrd	r4, [sp]
   19ec8:	mov	r9, #0
   19ecc:	str	sl, [sp]
   19ed0:	mov	fp, r1
   19ed4:	mov	sl, r0
   19ed8:	b	19f14 <__assert_fail@plt+0x8ad0>
   19edc:	mov	r3, r5
   19ee0:	mov	r2, r4
   19ee4:	mvn	r0, #0
   19ee8:	mvn	r1, #-2147483648	; 0x80000000
   19eec:	bl	1c218 <__assert_fail@plt+0xadd4>
   19ef0:	cmp	r0, r6
   19ef4:	sbcs	r3, r1, r7
   19ef8:	blt	1a14c <__assert_fail@plt+0x8d08>
   19efc:	mul	r3, r6, r5
   19f00:	mla	r3, r4, r7, r3
   19f04:	umull	r6, r7, r6, r4
   19f08:	add	r7, r3, r7
   19f0c:	subs	r8, r8, #1
   19f10:	beq	1a0d8 <__assert_fail@plt+0x8c94>
   19f14:	cmp	r6, sl
   19f18:	sbcs	r3, r7, fp
   19f1c:	bge	19edc <__assert_fail@plt+0x8a98>
   19f20:	mov	r9, #1
   19f24:	mov	r6, #0
   19f28:	mov	r7, #-2147483648	; 0x80000000
   19f2c:	b	19f0c <__assert_fail@plt+0x8ac8>
   19f30:	asr	r1, r3, #31
   19f34:	mov	r2, r3
   19f38:	mov	r3, r1
   19f3c:	mov	r0, #0
   19f40:	mov	r1, #-2147483648	; 0x80000000
   19f44:	strd	r2, [sp]
   19f48:	bl	1c218 <__assert_fail@plt+0xadd4>
   19f4c:	str	fp, [sp, #12]
   19f50:	strd	r4, [sp, #16]
   19f54:	mov	r8, #6
   19f58:	ldrd	r4, [sp]
   19f5c:	mov	r9, #0
   19f60:	str	sl, [sp]
   19f64:	mov	fp, r1
   19f68:	mov	sl, r0
   19f6c:	b	19fa8 <__assert_fail@plt+0x8b64>
   19f70:	mov	r3, r5
   19f74:	mov	r2, r4
   19f78:	mvn	r0, #0
   19f7c:	mvn	r1, #-2147483648	; 0x80000000
   19f80:	bl	1c218 <__assert_fail@plt+0xadd4>
   19f84:	cmp	r0, r6
   19f88:	sbcs	r3, r1, r7
   19f8c:	blt	1a12c <__assert_fail@plt+0x8ce8>
   19f90:	mul	r3, r6, r5
   19f94:	mla	r3, r4, r7, r3
   19f98:	umull	r6, r7, r6, r4
   19f9c:	add	r7, r3, r7
   19fa0:	subs	r8, r8, #1
   19fa4:	beq	1a0d8 <__assert_fail@plt+0x8c94>
   19fa8:	cmp	r6, sl
   19fac:	sbcs	r3, r7, fp
   19fb0:	bge	19f70 <__assert_fail@plt+0x8b2c>
   19fb4:	mov	r9, #1
   19fb8:	mov	r6, #0
   19fbc:	mov	r7, #-2147483648	; 0x80000000
   19fc0:	b	19fa0 <__assert_fail@plt+0x8b5c>
   19fc4:	ldr	r3, [pc, #488]	; 1a1b4 <__assert_fail@plt+0x8d70>
   19fc8:	mov	r2, #0
   19fcc:	mov	r0, r2
   19fd0:	mov	r1, r3
   19fd4:	mov	r2, #1024	; 0x400
   19fd8:	mov	r3, #0
   19fdc:	mov	fp, #1
   19fe0:	strd	r2, [sp]
   19fe4:	b	19eb8 <__assert_fail@plt+0x8a74>
   19fe8:	ldr	r3, [pc, #452]	; 1a1b4 <__assert_fail@plt+0x8d70>
   19fec:	mov	r2, #0
   19ff0:	mov	r0, r2
   19ff4:	mov	r1, r3
   19ff8:	mov	r2, #1024	; 0x400
   19ffc:	mov	r3, #0
   1a000:	mov	fp, #1
   1a004:	strd	r2, [sp]
   1a008:	b	19ca0 <__assert_fail@plt+0x885c>
   1a00c:	ldr	r3, [pc, #416]	; 1a1b4 <__assert_fail@plt+0x8d70>
   1a010:	mov	r2, #0
   1a014:	mov	r0, r2
   1a018:	mov	r1, r3
   1a01c:	mov	r2, #1024	; 0x400
   1a020:	mov	r3, #0
   1a024:	mov	fp, #1
   1a028:	strd	r2, [sp]
   1a02c:	b	19e24 <__assert_fail@plt+0x89e0>
   1a030:	ldr	r3, [pc, #380]	; 1a1b4 <__assert_fail@plt+0x8d70>
   1a034:	mov	r2, #0
   1a038:	mov	r0, r2
   1a03c:	mov	r1, r3
   1a040:	mov	r2, #1024	; 0x400
   1a044:	mov	r3, #0
   1a048:	mov	fp, #1
   1a04c:	strd	r2, [sp]
   1a050:	b	19c0c <__assert_fail@plt+0x87c8>
   1a054:	ldr	r3, [pc, #344]	; 1a1b4 <__assert_fail@plt+0x8d70>
   1a058:	mov	r2, #0
   1a05c:	mov	fp, #1
   1a060:	strd	r2, [sp]
   1a064:	mov	r8, #1024	; 0x400
   1a068:	mov	r9, #0
   1a06c:	b	19ad0 <__assert_fail@plt+0x868c>
   1a070:	mov	fp, #1
   1a074:	mov	r0, #0
   1a078:	ldr	r1, [pc, #308]	; 1a1b4 <__assert_fail@plt+0x8d70>
   1a07c:	mov	r8, #1024	; 0x400
   1a080:	mov	r9, #0
   1a084:	b	19d34 <__assert_fail@plt+0x88f0>
   1a088:	ldr	r3, [pc, #292]	; 1a1b4 <__assert_fail@plt+0x8d70>
   1a08c:	mov	r2, #0
   1a090:	mov	r0, r2
   1a094:	mov	r1, r3
   1a098:	mov	r2, #1024	; 0x400
   1a09c:	mov	r3, #0
   1a0a0:	mov	fp, #1
   1a0a4:	strd	r2, [sp]
   1a0a8:	b	19d90 <__assert_fail@plt+0x894c>
   1a0ac:	ldr	r3, [pc, #256]	; 1a1b4 <__assert_fail@plt+0x8d70>
   1a0b0:	mov	r2, #0
   1a0b4:	mov	r0, r2
   1a0b8:	mov	r1, r3
   1a0bc:	mov	r2, #1024	; 0x400
   1a0c0:	mov	r3, #0
   1a0c4:	mov	fp, #1
   1a0c8:	strd	r2, [sp]
   1a0cc:	b	19f4c <__assert_fail@plt+0x8b08>
   1a0d0:	mov	fp, #1
   1a0d4:	b	19b3c <__assert_fail@plt+0x86f8>
   1a0d8:	ldrd	r4, [sp, #16]
   1a0dc:	ldr	fp, [sp, #12]
   1a0e0:	ldr	sl, [sp]
   1a0e4:	orr	r4, r4, r9
   1a0e8:	b	19b3c <__assert_fail@plt+0x86f8>
   1a0ec:	mov	r4, #1
   1a0f0:	mov	r6, #0
   1a0f4:	mov	r7, #-2147483648	; 0x80000000
   1a0f8:	b	19b3c <__assert_fail@plt+0x86f8>
   1a0fc:	mov	r4, #1
   1a100:	mvn	r6, #0
   1a104:	mvn	r7, #-2147483648	; 0x80000000
   1a108:	b	19b3c <__assert_fail@plt+0x86f8>
   1a10c:	mov	r9, #1
   1a110:	mvn	r6, #0
   1a114:	mvn	r7, #-2147483648	; 0x80000000
   1a118:	b	19de4 <__assert_fail@plt+0x89a0>
   1a11c:	mov	r9, #1
   1a120:	mvn	r6, #0
   1a124:	mvn	r7, #-2147483648	; 0x80000000
   1a128:	b	19cf4 <__assert_fail@plt+0x88b0>
   1a12c:	mov	r9, #1
   1a130:	mvn	r6, #0
   1a134:	mvn	r7, #-2147483648	; 0x80000000
   1a138:	b	19fa0 <__assert_fail@plt+0x8b5c>
   1a13c:	mov	r9, #1
   1a140:	mvn	r6, #0
   1a144:	mvn	r7, #-2147483648	; 0x80000000
   1a148:	b	19c60 <__assert_fail@plt+0x881c>
   1a14c:	mov	r9, #1
   1a150:	mvn	r6, #0
   1a154:	mvn	r7, #-2147483648	; 0x80000000
   1a158:	b	19f0c <__assert_fail@plt+0x8ac8>
   1a15c:	mov	r9, #1
   1a160:	mvn	r6, #0
   1a164:	mvn	r7, #-2147483648	; 0x80000000
   1a168:	b	19e78 <__assert_fail@plt+0x8a34>
   1a16c:	mov	fp, #2
   1a170:	mov	r3, #1000	; 0x3e8
   1a174:	b	199c8 <__assert_fail@plt+0x8584>
   1a178:	ldr	r3, [sp, #8]
   1a17c:	ldrb	r2, [r3, #2]
   1a180:	mov	r3, #1024	; 0x400
   1a184:	cmp	r2, #66	; 0x42
   1a188:	movne	fp, #1
   1a18c:	moveq	fp, #3
   1a190:	b	199c8 <__assert_fail@plt+0x8584>
   1a194:	ldr	r3, [pc, #28]	; 1a1b8 <__assert_fail@plt+0x8d74>
   1a198:	mov	r2, #96	; 0x60
   1a19c:	ldr	r1, [pc, #24]	; 1a1bc <__assert_fail@plt+0x8d78>
   1a1a0:	ldr	r0, [pc, #24]	; 1a1c0 <__assert_fail@plt+0x8d7c>
   1a1a4:	bl	11444 <__assert_fail@plt>
   1a1a8:	bl	111c8 <__stack_chk_fail@plt>
   1a1ac:	andeq	lr, r2, r8, lsl #30
   1a1b0:			; <UNDEFINED> instruction: 0xffc00000
   1a1b4:			; <UNDEFINED> instruction: 0xffe00000
   1a1b8:	andeq	lr, r1, r0, asr #2
   1a1bc:	andeq	lr, r1, ip, asr #2
   1a1c0:	andeq	lr, r1, ip, asr r1
   1a1c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1c8:	cmp	r2, #36	; 0x24
   1a1cc:	ldr	r7, [pc, #2088]	; 1a9fc <__assert_fail@plt+0x95b8>
   1a1d0:	sub	sp, sp, #28
   1a1d4:	mov	r5, r2
   1a1d8:	ldr	r2, [r7]
   1a1dc:	str	r3, [sp, #4]
   1a1e0:	str	r2, [sp, #20]
   1a1e4:	ldr	sl, [sp, #64]	; 0x40
   1a1e8:	bhi	1a9e4 <__assert_fail@plt+0x95a0>
   1a1ec:	cmp	r1, #0
   1a1f0:	mov	r6, r1
   1a1f4:	mov	r9, r0
   1a1f8:	addeq	r6, sp, #16
   1a1fc:	bl	11330 <__errno_location@plt>
   1a200:	mov	r4, #0
   1a204:	mov	r2, r5
   1a208:	mov	r1, r6
   1a20c:	str	r4, [r0]
   1a210:	mov	fp, r0
   1a214:	mov	r0, r9
   1a218:	bl	1112c <strtol@plt>
   1a21c:	ldr	r8, [r6]
   1a220:	cmp	r8, r9
   1a224:	mov	r5, r0
   1a228:	beq	1a27c <__assert_fail@plt+0x8e38>
   1a22c:	ldr	r4, [fp]
   1a230:	cmp	r4, #0
   1a234:	beq	1a244 <__assert_fail@plt+0x8e00>
   1a238:	cmp	r4, #34	; 0x22
   1a23c:	bne	1a378 <__assert_fail@plt+0x8f34>
   1a240:	mov	r4, #1
   1a244:	cmp	sl, #0
   1a248:	beq	1a258 <__assert_fail@plt+0x8e14>
   1a24c:	ldrb	fp, [r8]
   1a250:	cmp	fp, #0
   1a254:	bne	1a47c <__assert_fail@plt+0x9038>
   1a258:	ldr	r3, [sp, #4]
   1a25c:	str	r5, [r3]
   1a260:	ldr	r2, [sp, #20]
   1a264:	ldr	r3, [r7]
   1a268:	mov	r0, r4
   1a26c:	cmp	r2, r3
   1a270:	bne	1a9f8 <__assert_fail@plt+0x95b4>
   1a274:	add	sp, sp, #28
   1a278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a27c:	cmp	sl, r4
   1a280:	beq	1a378 <__assert_fail@plt+0x8f34>
   1a284:	ldrb	fp, [r9]
   1a288:	cmp	fp, r4
   1a28c:	beq	1a378 <__assert_fail@plt+0x8f34>
   1a290:	mov	r1, fp
   1a294:	mov	r0, sl
   1a298:	bl	1130c <strchr@plt>
   1a29c:	cmp	r0, r4
   1a2a0:	movne	r5, #1
   1a2a4:	beq	1a378 <__assert_fail@plt+0x8f34>
   1a2a8:	sub	r9, fp, #69	; 0x45
   1a2ac:	cmp	r9, #47	; 0x2f
   1a2b0:	ldrls	pc, [pc, r9, lsl #2]
   1a2b4:	b	1a4a0 <__assert_fail@plt+0x905c>
   1a2b8:	andeq	sl, r1, r0, lsl #7
   1a2bc:	andeq	sl, r1, r0, lsr #9
   1a2c0:	andeq	sl, r1, r0, lsl #7
   1a2c4:	andeq	sl, r1, r0, lsr #9
   1a2c8:	andeq	sl, r1, r0, lsr #9
   1a2cc:	andeq	sl, r1, r0, lsr #9
   1a2d0:	andeq	sl, r1, r0, lsl #7
   1a2d4:	andeq	sl, r1, r0, lsr #9
   1a2d8:	andeq	sl, r1, r0, lsl #7
   1a2dc:	andeq	sl, r1, r0, lsr #9
   1a2e0:	andeq	sl, r1, r0, lsr #9
   1a2e4:	andeq	sl, r1, r0, lsl #7
   1a2e8:	andeq	sl, r1, r0, lsr #9
   1a2ec:	andeq	sl, r1, r0, lsr #9
   1a2f0:	andeq	sl, r1, r0, lsr #9
   1a2f4:	andeq	sl, r1, r0, lsl #7
   1a2f8:	andeq	sl, r1, r0, lsr #9
   1a2fc:	andeq	sl, r1, r0, lsr #9
   1a300:	andeq	sl, r1, r0, lsr #9
   1a304:	andeq	sl, r1, r0, lsr #9
   1a308:	andeq	sl, r1, r0, lsl #7
   1a30c:	andeq	sl, r1, r0, lsl #7
   1a310:	andeq	sl, r1, r0, lsr #9
   1a314:	andeq	sl, r1, r0, lsr #9
   1a318:	andeq	sl, r1, r0, lsr #9
   1a31c:	andeq	sl, r1, r0, lsr #9
   1a320:	andeq	sl, r1, r0, lsr #9
   1a324:	andeq	sl, r1, r0, lsr #9
   1a328:	andeq	sl, r1, r0, lsr #9
   1a32c:	andeq	sl, r1, r0, lsr #9
   1a330:	andeq	sl, r1, r0, lsr #9
   1a334:	andeq	sl, r1, r0, lsr #9
   1a338:	andeq	sl, r1, r0, lsr #9
   1a33c:	andeq	sl, r1, r0, lsr #9
   1a340:	andeq	sl, r1, r0, lsl #7
   1a344:	andeq	sl, r1, r0, lsr #9
   1a348:	andeq	sl, r1, r0, lsr #9
   1a34c:	andeq	sl, r1, r0, lsr #9
   1a350:	andeq	sl, r1, r0, lsl #7
   1a354:	andeq	sl, r1, r0, lsr #9
   1a358:	andeq	sl, r1, r0, lsl #7
   1a35c:	andeq	sl, r1, r0, lsr #9
   1a360:	andeq	sl, r1, r0, lsr #9
   1a364:	andeq	sl, r1, r0, lsr #9
   1a368:	andeq	sl, r1, r0, lsr #9
   1a36c:	andeq	sl, r1, r0, lsr #9
   1a370:	andeq	sl, r1, r0, lsr #9
   1a374:	andeq	sl, r1, r0, lsl #7
   1a378:	mov	r4, #4
   1a37c:	b	1a260 <__assert_fail@plt+0x8e1c>
   1a380:	mov	r0, sl
   1a384:	mov	r1, #48	; 0x30
   1a388:	bl	1130c <strchr@plt>
   1a38c:	cmp	r0, #0
   1a390:	beq	1a4a0 <__assert_fail@plt+0x905c>
   1a394:	ldrb	r2, [r8, #1]
   1a398:	cmp	r2, #68	; 0x44
   1a39c:	beq	1a9c0 <__assert_fail@plt+0x957c>
   1a3a0:	cmp	r2, #105	; 0x69
   1a3a4:	beq	1a9cc <__assert_fail@plt+0x9588>
   1a3a8:	cmp	r2, #66	; 0x42
   1a3ac:	beq	1a9c0 <__assert_fail@plt+0x957c>
   1a3b0:	cmp	r9, #47	; 0x2f
   1a3b4:	ldrls	pc, [pc, r9, lsl #2]
   1a3b8:	b	1a490 <__assert_fail@plt+0x904c>
   1a3bc:	andeq	sl, r1, r8, asr #18
   1a3c0:	muleq	r1, r0, r4
   1a3c4:	andeq	sl, r1, r4, lsr r9
   1a3c8:	muleq	r1, r0, r4
   1a3cc:	muleq	r1, r0, r4
   1a3d0:	muleq	r1, r0, r4
   1a3d4:	andeq	sl, r1, r4, lsr #18
   1a3d8:	muleq	r1, r0, r4
   1a3dc:	andeq	sl, r1, r0, lsl #18
   1a3e0:	muleq	r1, r0, r4
   1a3e4:	muleq	r1, r0, r4
   1a3e8:	andeq	sl, r1, ip, ror #17
   1a3ec:	muleq	r1, r0, r4
   1a3f0:	muleq	r1, r0, r4
   1a3f4:	muleq	r1, r0, r4
   1a3f8:	ldrdeq	sl, [r1], -r8
   1a3fc:	muleq	r1, r0, r4
   1a400:	muleq	r1, r0, r4
   1a404:	muleq	r1, r0, r4
   1a408:	muleq	r1, r0, r4
   1a40c:	andeq	sl, r1, r4, asr #17
   1a410:	andeq	sl, r1, r0, lsl r9
   1a414:	muleq	r1, r0, r4
   1a418:	muleq	r1, r0, r4
   1a41c:	muleq	r1, r0, r4
   1a420:	muleq	r1, r0, r4
   1a424:	muleq	r1, r0, r4
   1a428:	muleq	r1, r0, r4
   1a42c:	muleq	r1, r0, r4
   1a430:	andeq	sl, r1, r8, lsl #12
   1a434:	andeq	sl, r1, ip, asr r9
   1a438:	muleq	r1, r0, r4
   1a43c:	muleq	r1, r0, r4
   1a440:	muleq	r1, r0, r4
   1a444:	andeq	sl, r1, r4, lsr r9
   1a448:	muleq	r1, r0, r4
   1a44c:	muleq	r1, r0, r4
   1a450:	muleq	r1, r0, r4
   1a454:	andeq	sl, r1, r4, lsr #18
   1a458:	muleq	r1, r0, r4
   1a45c:	andeq	sl, r1, r0, lsl #18
   1a460:	muleq	r1, r0, r4
   1a464:	muleq	r1, r0, r4
   1a468:	muleq	r1, r0, r4
   1a46c:	muleq	r1, r0, r4
   1a470:	muleq	r1, r0, r4
   1a474:	muleq	r1, r0, r4
   1a478:	ldrdeq	sl, [r1], -r8
   1a47c:	mov	r1, fp
   1a480:	mov	r0, sl
   1a484:	bl	1130c <strchr@plt>
   1a488:	cmp	r0, #0
   1a48c:	bne	1a2a8 <__assert_fail@plt+0x8e64>
   1a490:	ldr	r3, [sp, #4]
   1a494:	orr	r4, r4, #2
   1a498:	str	r5, [r3]
   1a49c:	b	1a260 <__assert_fail@plt+0x8e1c>
   1a4a0:	mov	sl, #1
   1a4a4:	mov	r9, #1024	; 0x400
   1a4a8:	sub	fp, fp, #66	; 0x42
   1a4ac:	cmp	fp, #53	; 0x35
   1a4b0:	ldrls	pc, [pc, fp, lsl #2]
   1a4b4:	b	1a490 <__assert_fail@plt+0x904c>
   1a4b8:	andeq	sl, r1, r4, lsr #12
   1a4bc:	muleq	r1, r0, r4
   1a4c0:	muleq	r1, r0, r4
   1a4c4:	andeq	sl, r1, ip, lsr r6
   1a4c8:	muleq	r1, r0, r4
   1a4cc:	muleq	r1, r8, r7
   1a4d0:	muleq	r1, r0, r4
   1a4d4:	muleq	r1, r0, r4
   1a4d8:	muleq	r1, r0, r4
   1a4dc:	andeq	sl, r1, r8, ror #14
   1a4e0:	muleq	r1, r0, r4
   1a4e4:	muleq	r1, r0, r5
   1a4e8:	muleq	r1, r0, r4
   1a4ec:	muleq	r1, r0, r4
   1a4f0:	andeq	sl, r1, r0, lsr #13
   1a4f4:	muleq	r1, r0, r4
   1a4f8:	muleq	r1, r0, r4
   1a4fc:	muleq	r1, r0, r4
   1a500:	andeq	sl, r1, r0, ror #16
   1a504:	muleq	r1, r0, r4
   1a508:	muleq	r1, r0, r4
   1a50c:	muleq	r1, r0, r4
   1a510:	muleq	r1, r0, r4
   1a514:	andeq	sl, r1, r4, lsl #14
   1a518:	strdeq	sl, [r1], -ip
   1a51c:	muleq	r1, r0, r4
   1a520:	muleq	r1, r0, r4
   1a524:	muleq	r1, r0, r4
   1a528:	muleq	r1, r0, r4
   1a52c:	muleq	r1, r0, r4
   1a530:	muleq	r1, r0, r4
   1a534:	muleq	r1, r0, r4
   1a538:	andeq	sl, r1, ip, lsl #12
   1a53c:	ldrdeq	sl, [r1], -r0
   1a540:	muleq	r1, r0, r4
   1a544:	muleq	r1, r0, r4
   1a548:	muleq	r1, r0, r4
   1a54c:	muleq	r1, r8, r7
   1a550:	muleq	r1, r0, r4
   1a554:	muleq	r1, r0, r4
   1a558:	muleq	r1, r0, r4
   1a55c:	andeq	sl, r1, r8, ror #14
   1a560:	muleq	r1, r0, r4
   1a564:	muleq	r1, r0, r5
   1a568:	muleq	r1, r0, r4
   1a56c:	muleq	r1, r0, r4
   1a570:	muleq	r1, r0, r4
   1a574:	muleq	r1, r0, r4
   1a578:	muleq	r1, r0, r4
   1a57c:	muleq	r1, r0, r4
   1a580:	andeq	sl, r1, r0, ror #16
   1a584:	muleq	r1, r0, r4
   1a588:	muleq	r1, r0, r4
   1a58c:	andeq	sl, r1, r8, ror #11
   1a590:	mov	r1, r9
   1a594:	mov	r0, #-2147483648	; 0x80000000
   1a598:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a59c:	mov	fp, r0
   1a5a0:	cmp	r5, fp
   1a5a4:	blt	1a5c8 <__assert_fail@plt+0x9184>
   1a5a8:	mov	r1, r9
   1a5ac:	mvn	r0, #-2147483648	; 0x80000000
   1a5b0:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a5b4:	cmp	r5, r0
   1a5b8:	bgt	1a5fc <__assert_fail@plt+0x91b8>
   1a5bc:	mul	r5, r9, r5
   1a5c0:	cmp	r5, fp
   1a5c4:	bge	1a788 <__assert_fail@plt+0x9344>
   1a5c8:	mov	r4, #1
   1a5cc:	mov	r5, #-2147483648	; 0x80000000
   1a5d0:	add	r2, r8, sl
   1a5d4:	str	r2, [r6]
   1a5d8:	ldrb	r3, [r8, sl]
   1a5dc:	cmp	r3, #0
   1a5e0:	orrne	r4, r4, #2
   1a5e4:	b	1a258 <__assert_fail@plt+0x8e14>
   1a5e8:	cmp	r5, #-1073741824	; 0xc0000000
   1a5ec:	blt	1a5c8 <__assert_fail@plt+0x9184>
   1a5f0:	cmn	r5, #-1073741823	; 0xc0000001
   1a5f4:	lslle	r5, r5, #1
   1a5f8:	ble	1a5d0 <__assert_fail@plt+0x918c>
   1a5fc:	mov	r4, #1
   1a600:	mvn	r5, #-2147483648	; 0x80000000
   1a604:	b	1a5d0 <__assert_fail@plt+0x918c>
   1a608:	mov	sl, #1
   1a60c:	cmn	r5, #4194304	; 0x400000
   1a610:	blt	1a5c8 <__assert_fail@plt+0x9184>
   1a614:	cmp	r5, #4194304	; 0x400000
   1a618:	lsllt	r5, r5, #9
   1a61c:	blt	1a5d0 <__assert_fail@plt+0x918c>
   1a620:	b	1a5fc <__assert_fail@plt+0x91b8>
   1a624:	cmn	r5, #2097152	; 0x200000
   1a628:	blt	1a5c8 <__assert_fail@plt+0x9184>
   1a62c:	cmp	r5, #2097152	; 0x200000
   1a630:	lsllt	r5, r5, #10
   1a634:	blt	1a5d0 <__assert_fail@plt+0x918c>
   1a638:	b	1a5fc <__assert_fail@plt+0x91b8>
   1a63c:	mov	r1, r9
   1a640:	mov	r0, #-2147483648	; 0x80000000
   1a644:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a648:	mov	r2, r0
   1a64c:	mov	fp, #6
   1a650:	mov	r3, #0
   1a654:	str	r4, [sp, #8]
   1a658:	str	r6, [sp, #12]
   1a65c:	mov	r4, r3
   1a660:	mov	r6, fp
   1a664:	mov	fp, r2
   1a668:	b	1a68c <__assert_fail@plt+0x9248>
   1a66c:	mov	r1, r9
   1a670:	mvn	r0, #-2147483648	; 0x80000000
   1a674:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a678:	cmp	r0, r5
   1a67c:	blt	1a984 <__assert_fail@plt+0x9540>
   1a680:	mul	r5, r9, r5
   1a684:	subs	r6, r6, #1
   1a688:	beq	1a964 <__assert_fail@plt+0x9520>
   1a68c:	cmp	r5, fp
   1a690:	bge	1a66c <__assert_fail@plt+0x9228>
   1a694:	mov	r4, #1
   1a698:	mov	r5, #-2147483648	; 0x80000000
   1a69c:	b	1a684 <__assert_fail@plt+0x9240>
   1a6a0:	mov	r1, r9
   1a6a4:	mov	r0, #-2147483648	; 0x80000000
   1a6a8:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a6ac:	mov	r2, r0
   1a6b0:	mov	fp, #5
   1a6b4:	mov	r3, #0
   1a6b8:	str	r4, [sp, #8]
   1a6bc:	str	r6, [sp, #12]
   1a6c0:	mov	r4, r3
   1a6c4:	mov	r6, fp
   1a6c8:	mov	fp, r2
   1a6cc:	b	1a6f0 <__assert_fail@plt+0x92ac>
   1a6d0:	mov	r1, r9
   1a6d4:	mvn	r0, #-2147483648	; 0x80000000
   1a6d8:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a6dc:	cmp	r0, r5
   1a6e0:	blt	1a9b4 <__assert_fail@plt+0x9570>
   1a6e4:	mul	r5, r9, r5
   1a6e8:	subs	r6, r6, #1
   1a6ec:	beq	1a964 <__assert_fail@plt+0x9520>
   1a6f0:	cmp	fp, r5
   1a6f4:	ble	1a6d0 <__assert_fail@plt+0x928c>
   1a6f8:	mov	r4, #1
   1a6fc:	mov	r5, #-2147483648	; 0x80000000
   1a700:	b	1a6e8 <__assert_fail@plt+0x92a4>
   1a704:	mov	r1, r9
   1a708:	mov	r0, #-2147483648	; 0x80000000
   1a70c:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a710:	mov	r2, r0
   1a714:	mov	fp, #8
   1a718:	mov	r3, #0
   1a71c:	str	r4, [sp, #8]
   1a720:	str	r6, [sp, #12]
   1a724:	mov	r4, r3
   1a728:	mov	r6, fp
   1a72c:	mov	fp, r2
   1a730:	b	1a754 <__assert_fail@plt+0x9310>
   1a734:	mov	r1, r9
   1a738:	mvn	r0, #-2147483648	; 0x80000000
   1a73c:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a740:	cmp	r0, r5
   1a744:	blt	1a99c <__assert_fail@plt+0x9558>
   1a748:	mul	r5, r9, r5
   1a74c:	subs	r6, r6, #1
   1a750:	beq	1a964 <__assert_fail@plt+0x9520>
   1a754:	cmp	fp, r5
   1a758:	ble	1a734 <__assert_fail@plt+0x92f0>
   1a75c:	mov	r4, #1
   1a760:	mov	r5, #-2147483648	; 0x80000000
   1a764:	b	1a74c <__assert_fail@plt+0x9308>
   1a768:	mov	r1, r9
   1a76c:	mov	r0, #-2147483648	; 0x80000000
   1a770:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a774:	cmp	r5, r0
   1a778:	blt	1a5c8 <__assert_fail@plt+0x9184>
   1a77c:	mov	r1, r9
   1a780:	mvn	r0, #-2147483648	; 0x80000000
   1a784:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a788:	cmp	r0, r5
   1a78c:	blt	1a5fc <__assert_fail@plt+0x91b8>
   1a790:	mul	r5, r9, r5
   1a794:	b	1a5d0 <__assert_fail@plt+0x918c>
   1a798:	mov	r1, r9
   1a79c:	mov	r0, #-2147483648	; 0x80000000
   1a7a0:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a7a4:	mov	r2, r0
   1a7a8:	mov	fp, #3
   1a7ac:	mov	r3, #0
   1a7b0:	str	r4, [sp, #8]
   1a7b4:	str	r6, [sp, #12]
   1a7b8:	mov	r4, r3
   1a7bc:	mov	r6, fp
   1a7c0:	mov	fp, r2
   1a7c4:	b	1a7e8 <__assert_fail@plt+0x93a4>
   1a7c8:	mov	r1, r9
   1a7cc:	mvn	r0, #-2147483648	; 0x80000000
   1a7d0:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a7d4:	cmp	r0, r5
   1a7d8:	blt	1a9a8 <__assert_fail@plt+0x9564>
   1a7dc:	mul	r5, r9, r5
   1a7e0:	subs	r6, r6, #1
   1a7e4:	beq	1a964 <__assert_fail@plt+0x9520>
   1a7e8:	cmp	r5, fp
   1a7ec:	bge	1a7c8 <__assert_fail@plt+0x9384>
   1a7f0:	mov	r4, #1
   1a7f4:	mov	r5, #-2147483648	; 0x80000000
   1a7f8:	b	1a7e0 <__assert_fail@plt+0x939c>
   1a7fc:	mov	r1, r9
   1a800:	mov	r0, #-2147483648	; 0x80000000
   1a804:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a808:	mov	r2, r0
   1a80c:	mov	fp, #7
   1a810:	mov	r3, #0
   1a814:	str	r4, [sp, #8]
   1a818:	str	r6, [sp, #12]
   1a81c:	mov	r4, r3
   1a820:	mov	r6, fp
   1a824:	mov	fp, r2
   1a828:	b	1a84c <__assert_fail@plt+0x9408>
   1a82c:	mov	r1, r9
   1a830:	mvn	r0, #-2147483648	; 0x80000000
   1a834:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a838:	cmp	r0, r5
   1a83c:	blt	1a990 <__assert_fail@plt+0x954c>
   1a840:	mul	r5, r9, r5
   1a844:	subs	r6, r6, #1
   1a848:	beq	1a964 <__assert_fail@plt+0x9520>
   1a84c:	cmp	fp, r5
   1a850:	ble	1a82c <__assert_fail@plt+0x93e8>
   1a854:	mov	r4, #1
   1a858:	mov	r5, #-2147483648	; 0x80000000
   1a85c:	b	1a844 <__assert_fail@plt+0x9400>
   1a860:	mov	r1, r9
   1a864:	mov	r0, #-2147483648	; 0x80000000
   1a868:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a86c:	mov	r2, r0
   1a870:	mov	fp, #4
   1a874:	mov	r3, #0
   1a878:	str	r4, [sp, #8]
   1a87c:	str	r6, [sp, #12]
   1a880:	mov	r4, r3
   1a884:	mov	r6, fp
   1a888:	mov	fp, r2
   1a88c:	b	1a8b0 <__assert_fail@plt+0x946c>
   1a890:	mov	r1, r9
   1a894:	mvn	r0, #-2147483648	; 0x80000000
   1a898:	bl	1bfd8 <__assert_fail@plt+0xab94>
   1a89c:	cmp	r0, r5
   1a8a0:	blt	1a978 <__assert_fail@plt+0x9534>
   1a8a4:	mul	r5, r9, r5
   1a8a8:	subs	r6, r6, #1
   1a8ac:	beq	1a964 <__assert_fail@plt+0x9520>
   1a8b0:	cmp	fp, r5
   1a8b4:	ble	1a890 <__assert_fail@plt+0x944c>
   1a8b8:	mov	r4, #1
   1a8bc:	mov	r5, #-2147483648	; 0x80000000
   1a8c0:	b	1a8a8 <__assert_fail@plt+0x9464>
   1a8c4:	ldr	r3, [pc, #308]	; 1aa00 <__assert_fail@plt+0x95bc>
   1a8c8:	mov	sl, #1
   1a8cc:	mov	r2, r3
   1a8d0:	mov	r9, #1024	; 0x400
   1a8d4:	b	1a714 <__assert_fail@plt+0x92d0>
   1a8d8:	ldr	r3, [pc, #288]	; 1aa00 <__assert_fail@plt+0x95bc>
   1a8dc:	mov	sl, #1
   1a8e0:	mov	r2, r3
   1a8e4:	mov	r9, #1024	; 0x400
   1a8e8:	b	1a870 <__assert_fail@plt+0x942c>
   1a8ec:	ldr	r3, [pc, #268]	; 1aa00 <__assert_fail@plt+0x95bc>
   1a8f0:	mov	sl, #1
   1a8f4:	mov	r2, r3
   1a8f8:	mov	r9, #1024	; 0x400
   1a8fc:	b	1a6b0 <__assert_fail@plt+0x926c>
   1a900:	ldr	fp, [pc, #248]	; 1aa00 <__assert_fail@plt+0x95bc>
   1a904:	mov	sl, #1
   1a908:	mov	r9, #1024	; 0x400
   1a90c:	b	1a5a0 <__assert_fail@plt+0x915c>
   1a910:	ldr	r3, [pc, #232]	; 1aa00 <__assert_fail@plt+0x95bc>
   1a914:	mov	sl, #1
   1a918:	mov	r2, r3
   1a91c:	mov	r9, #1024	; 0x400
   1a920:	b	1a80c <__assert_fail@plt+0x93c8>
   1a924:	ldr	r0, [pc, #212]	; 1aa00 <__assert_fail@plt+0x95bc>
   1a928:	mov	sl, #1
   1a92c:	mov	r9, #1024	; 0x400
   1a930:	b	1a774 <__assert_fail@plt+0x9330>
   1a934:	ldr	r3, [pc, #196]	; 1aa00 <__assert_fail@plt+0x95bc>
   1a938:	mov	sl, #1
   1a93c:	mov	r2, r3
   1a940:	mov	r9, #1024	; 0x400
   1a944:	b	1a7a8 <__assert_fail@plt+0x9364>
   1a948:	ldr	r3, [pc, #176]	; 1aa00 <__assert_fail@plt+0x95bc>
   1a94c:	mov	sl, #1
   1a950:	mov	r2, r3
   1a954:	mov	r9, #1024	; 0x400
   1a958:	b	1a64c <__assert_fail@plt+0x9208>
   1a95c:	mov	sl, #1
   1a960:	b	1a5d0 <__assert_fail@plt+0x918c>
   1a964:	mov	r3, r4
   1a968:	ldr	r4, [sp, #8]
   1a96c:	ldr	r6, [sp, #12]
   1a970:	orr	r4, r4, r3
   1a974:	b	1a5d0 <__assert_fail@plt+0x918c>
   1a978:	mov	r4, #1
   1a97c:	mvn	r5, #-2147483648	; 0x80000000
   1a980:	b	1a8a8 <__assert_fail@plt+0x9464>
   1a984:	mov	r4, #1
   1a988:	mvn	r5, #-2147483648	; 0x80000000
   1a98c:	b	1a684 <__assert_fail@plt+0x9240>
   1a990:	mov	r4, #1
   1a994:	mvn	r5, #-2147483648	; 0x80000000
   1a998:	b	1a844 <__assert_fail@plt+0x9400>
   1a99c:	mov	r4, #1
   1a9a0:	mvn	r5, #-2147483648	; 0x80000000
   1a9a4:	b	1a74c <__assert_fail@plt+0x9308>
   1a9a8:	mov	r4, #1
   1a9ac:	mvn	r5, #-2147483648	; 0x80000000
   1a9b0:	b	1a7e0 <__assert_fail@plt+0x939c>
   1a9b4:	mov	r4, #1
   1a9b8:	mvn	r5, #-2147483648	; 0x80000000
   1a9bc:	b	1a6e8 <__assert_fail@plt+0x92a4>
   1a9c0:	mov	sl, #2
   1a9c4:	mov	r9, #1000	; 0x3e8
   1a9c8:	b	1a4a8 <__assert_fail@plt+0x9064>
   1a9cc:	ldrb	r2, [r8, #2]
   1a9d0:	mov	r9, #1024	; 0x400
   1a9d4:	cmp	r2, #66	; 0x42
   1a9d8:	movne	sl, #1
   1a9dc:	moveq	sl, #3
   1a9e0:	b	1a4a8 <__assert_fail@plt+0x9064>
   1a9e4:	ldr	r3, [pc, #24]	; 1aa04 <__assert_fail@plt+0x95c0>
   1a9e8:	mov	r2, #96	; 0x60
   1a9ec:	ldr	r1, [pc, #20]	; 1aa08 <__assert_fail@plt+0x95c4>
   1a9f0:	ldr	r0, [pc, #20]	; 1aa0c <__assert_fail@plt+0x95c8>
   1a9f4:	bl	11444 <__assert_fail@plt>
   1a9f8:	bl	111c8 <__stack_chk_fail@plt>
   1a9fc:	andeq	lr, r2, r8, lsl #30
   1aa00:			; <UNDEFINED> instruction: 0xffe00000
   1aa04:	andeq	lr, r1, r4, lsl #3
   1aa08:	andeq	lr, r1, ip, asr #2
   1aa0c:	andeq	lr, r1, ip, asr r1
   1aa10:	ldr	ip, [pc, #128]	; 1aa98 <__assert_fail@plt+0x9654>
   1aa14:	push	{r7, lr}
   1aa18:	sub	r0, r0, #1
   1aa1c:	ldr	lr, [pc, #120]	; 1aa9c <__assert_fail@plt+0x9658>
   1aa20:	sub	sp, sp, #16
   1aa24:	ldr	r4, [ip]
   1aa28:	cmp	r0, #3
   1aa2c:	str	r4, [sp, #12]
   1aa30:	ldr	r6, [sp, #24]
   1aa34:	ldr	r5, [lr]
   1aa38:	bhi	1aa94 <__assert_fail@plt+0x9650>
   1aa3c:	mov	ip, r1
   1aa40:	cmp	ip, #0
   1aa44:	ldr	r1, [pc, #84]	; 1aaa0 <__assert_fail@plt+0x965c>
   1aa48:	ldrlt	r4, [pc, #84]	; 1aaa4 <__assert_fail@plt+0x9660>
   1aa4c:	movlt	r3, #0
   1aa50:	ldr	r1, [r1, r0, lsl #2]
   1aa54:	strblt	r2, [sp, #8]
   1aa58:	mov	r0, #0
   1aa5c:	mov	r2, #5
   1aa60:	ldrge	r7, [r3, ip, lsl #4]
   1aa64:	sublt	r4, r4, ip
   1aa68:	strblt	r3, [sp, #9]
   1aa6c:	addlt	r7, sp, #8
   1aa70:	ldrge	r4, [pc, #44]	; 1aaa4 <__assert_fail@plt+0x9660>
   1aa74:	bl	111bc <dcgettext@plt>
   1aa78:	str	r6, [sp, #4]
   1aa7c:	str	r7, [sp]
   1aa80:	mov	r3, r4
   1aa84:	mov	r1, #0
   1aa88:	mov	r2, r0
   1aa8c:	mov	r0, r5
   1aa90:	bl	11270 <error@plt>
   1aa94:	bl	1142c <abort@plt>
   1aa98:	andeq	lr, r2, r8, lsl #30
   1aa9c:	andeq	pc, r2, r4, lsl #3
   1aaa0:	andeq	lr, r1, ip, lsl #3
   1aaa4:	muleq	r1, ip, r1
   1aaa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaac:	sub	sp, sp, #36	; 0x24
   1aab0:	ldr	r5, [pc, #2536]	; 1b4a0 <__assert_fail@plt+0xa05c>
   1aab4:	mov	r9, r2
   1aab8:	cmp	r2, #36	; 0x24
   1aabc:	str	r3, [sp, #12]
   1aac0:	ldr	r2, [r5]
   1aac4:	ldr	r3, [sp, #72]	; 0x48
   1aac8:	str	r2, [sp, #28]
   1aacc:	str	r3, [sp]
   1aad0:	bhi	1b48c <__assert_fail@plt+0xa048>
   1aad4:	cmp	r1, #0
   1aad8:	mov	r4, r1
   1aadc:	mov	r6, r0
   1aae0:	addeq	r4, sp, #24
   1aae4:	bl	11330 <__errno_location@plt>
   1aae8:	mov	r3, #0
   1aaec:	str	r3, [r0]
   1aaf0:	mov	r7, r0
   1aaf4:	bl	112e8 <__ctype_b_loc@plt>
   1aaf8:	ldrb	r3, [r6]
   1aafc:	mov	r1, r6
   1ab00:	ldr	r0, [r0]
   1ab04:	b	1ab0c <__assert_fail@plt+0x96c8>
   1ab08:	ldrb	r3, [r1, #1]!
   1ab0c:	lsl	r2, r3, #1
   1ab10:	ldrh	r8, [r0, r2]
   1ab14:	ands	r8, r8, #8192	; 0x2000
   1ab18:	bne	1ab08 <__assert_fail@plt+0x96c4>
   1ab1c:	cmp	r3, #45	; 0x2d
   1ab20:	beq	1abbc <__assert_fail@plt+0x9778>
   1ab24:	mov	r2, r9
   1ab28:	mov	r3, r8
   1ab2c:	mov	r1, r4
   1ab30:	mov	r0, r6
   1ab34:	bl	11198 <__strtoull_internal@plt>
   1ab38:	ldr	r9, [r4]
   1ab3c:	cmp	r9, r6
   1ab40:	mov	sl, r0
   1ab44:	mov	fp, r1
   1ab48:	beq	1aba4 <__assert_fail@plt+0x9760>
   1ab4c:	ldr	r8, [r7]
   1ab50:	cmp	r8, #0
   1ab54:	bne	1ab94 <__assert_fail@plt+0x9750>
   1ab58:	ldr	r3, [sp]
   1ab5c:	cmp	r3, #0
   1ab60:	beq	1ab70 <__assert_fail@plt+0x972c>
   1ab64:	ldrb	r6, [r9]
   1ab68:	cmp	r6, #0
   1ab6c:	bne	1af44 <__assert_fail@plt+0x9b00>
   1ab70:	ldr	r3, [sp, #12]
   1ab74:	strd	sl, [r3]
   1ab78:	ldr	r2, [sp, #28]
   1ab7c:	ldr	r3, [r5]
   1ab80:	mov	r0, r8
   1ab84:	cmp	r2, r3
   1ab88:	bne	1b488 <__assert_fail@plt+0xa044>
   1ab8c:	add	sp, sp, #36	; 0x24
   1ab90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab94:	cmp	r8, #34	; 0x22
   1ab98:	bne	1abbc <__assert_fail@plt+0x9778>
   1ab9c:	mov	r8, #1
   1aba0:	b	1ab58 <__assert_fail@plt+0x9714>
   1aba4:	ldr	r0, [sp]
   1aba8:	cmp	r0, #0
   1abac:	beq	1abbc <__assert_fail@plt+0x9778>
   1abb0:	ldrb	r6, [r6]
   1abb4:	cmp	r6, #0
   1abb8:	bne	1abc4 <__assert_fail@plt+0x9780>
   1abbc:	mov	r8, #4
   1abc0:	b	1ab78 <__assert_fail@plt+0x9734>
   1abc4:	mov	r1, r6
   1abc8:	bl	1130c <strchr@plt>
   1abcc:	cmp	r0, #0
   1abd0:	movne	sl, #1
   1abd4:	movne	fp, #0
   1abd8:	beq	1abbc <__assert_fail@plt+0x9778>
   1abdc:	sub	r7, r6, #69	; 0x45
   1abe0:	cmp	r7, #47	; 0x2f
   1abe4:	ldrls	pc, [pc, r7, lsl #2]
   1abe8:	b	1ada8 <__assert_fail@plt+0x9964>
   1abec:	andeq	sl, r1, ip, lsr #25
   1abf0:	andeq	sl, r1, r8, lsr #27
   1abf4:	andeq	sl, r1, ip, lsr #25
   1abf8:	andeq	sl, r1, r8, lsr #27
   1abfc:	andeq	sl, r1, r8, lsr #27
   1ac00:	andeq	sl, r1, r8, lsr #27
   1ac04:	andeq	sl, r1, ip, lsr #25
   1ac08:	andeq	sl, r1, r8, lsr #27
   1ac0c:	andeq	sl, r1, ip, lsr #25
   1ac10:	andeq	sl, r1, r8, lsr #27
   1ac14:	andeq	sl, r1, r8, lsr #27
   1ac18:	andeq	sl, r1, ip, lsr #25
   1ac1c:	andeq	sl, r1, r8, lsr #27
   1ac20:	andeq	sl, r1, r8, lsr #27
   1ac24:	andeq	sl, r1, r8, lsr #27
   1ac28:	andeq	sl, r1, ip, lsr #25
   1ac2c:	andeq	sl, r1, r8, lsr #27
   1ac30:	andeq	sl, r1, r8, lsr #27
   1ac34:	andeq	sl, r1, r8, lsr #27
   1ac38:	andeq	sl, r1, r8, lsr #27
   1ac3c:	andeq	sl, r1, ip, lsr #25
   1ac40:	andeq	sl, r1, ip, lsr #25
   1ac44:	andeq	sl, r1, r8, lsr #27
   1ac48:	andeq	sl, r1, r8, lsr #27
   1ac4c:	andeq	sl, r1, r8, lsr #27
   1ac50:	andeq	sl, r1, r8, lsr #27
   1ac54:	andeq	sl, r1, r8, lsr #27
   1ac58:	andeq	sl, r1, r8, lsr #27
   1ac5c:	andeq	sl, r1, r8, lsr #27
   1ac60:	andeq	sl, r1, r8, lsr #27
   1ac64:	andeq	sl, r1, r8, lsr #27
   1ac68:	andeq	sl, r1, r8, lsr #27
   1ac6c:	andeq	sl, r1, r8, lsr #27
   1ac70:	andeq	sl, r1, r8, lsr #27
   1ac74:	andeq	sl, r1, ip, lsr #25
   1ac78:	andeq	sl, r1, r8, lsr #27
   1ac7c:	andeq	sl, r1, r8, lsr #27
   1ac80:	andeq	sl, r1, r8, lsr #27
   1ac84:	andeq	sl, r1, ip, lsr #25
   1ac88:	andeq	sl, r1, r8, lsr #27
   1ac8c:	andeq	sl, r1, ip, lsr #25
   1ac90:	andeq	sl, r1, r8, lsr #27
   1ac94:	andeq	sl, r1, r8, lsr #27
   1ac98:	andeq	sl, r1, r8, lsr #27
   1ac9c:	andeq	sl, r1, r8, lsr #27
   1aca0:	andeq	sl, r1, r8, lsr #27
   1aca4:	andeq	sl, r1, r8, lsr #27
   1aca8:	andeq	sl, r1, ip, lsr #25
   1acac:	ldr	r0, [sp]
   1acb0:	mov	r1, #48	; 0x30
   1acb4:	bl	1130c <strchr@plt>
   1acb8:	cmp	r0, #0
   1acbc:	beq	1ada8 <__assert_fail@plt+0x9964>
   1acc0:	ldrb	r3, [r9, #1]
   1acc4:	cmp	r3, #68	; 0x44
   1acc8:	beq	1b388 <__assert_fail@plt+0x9f44>
   1accc:	cmp	r3, #105	; 0x69
   1acd0:	beq	1af68 <__assert_fail@plt+0x9b24>
   1acd4:	cmp	r3, #66	; 0x42
   1acd8:	beq	1b388 <__assert_fail@plt+0x9f44>
   1acdc:	cmp	r7, #47	; 0x2f
   1ace0:	ldrls	pc, [pc, r7, lsl #2]
   1ace4:	b	1af58 <__assert_fail@plt+0x9b14>
   1ace8:	andeq	fp, r1, ip, ror #6
   1acec:	andeq	sl, r1, r8, asr pc
   1acf0:	andeq	fp, r1, ip, asr r3
   1acf4:	andeq	sl, r1, r8, asr pc
   1acf8:	andeq	sl, r1, r8, asr pc
   1acfc:	andeq	sl, r1, r8, asr pc
   1ad00:	andeq	fp, r1, ip, asr #6
   1ad04:	andeq	sl, r1, r8, asr pc
   1ad08:	andeq	fp, r1, ip, lsr r3
   1ad0c:	andeq	sl, r1, r8, asr pc
   1ad10:	andeq	sl, r1, r8, asr pc
   1ad14:	andeq	fp, r1, ip, lsr #6
   1ad18:	andeq	sl, r1, r8, asr pc
   1ad1c:	andeq	sl, r1, r8, asr pc
   1ad20:	andeq	sl, r1, r8, asr pc
   1ad24:	andeq	fp, r1, ip, lsl r3
   1ad28:	andeq	sl, r1, r8, asr pc
   1ad2c:	andeq	sl, r1, r8, asr pc
   1ad30:	andeq	sl, r1, r8, asr pc
   1ad34:	andeq	sl, r1, r8, asr pc
   1ad38:	andeq	fp, r1, ip, lsl #6
   1ad3c:	strdeq	fp, [r1], -ip
   1ad40:	andeq	sl, r1, r8, asr pc
   1ad44:	andeq	sl, r1, r8, asr pc
   1ad48:	andeq	sl, r1, r8, asr pc
   1ad4c:	andeq	sl, r1, r8, asr pc
   1ad50:	andeq	sl, r1, r8, asr pc
   1ad54:	andeq	sl, r1, r8, asr pc
   1ad58:	andeq	sl, r1, r8, asr pc
   1ad5c:	andeq	sl, r1, r4, lsr #31
   1ad60:	strdeq	fp, [r1], -r4
   1ad64:	andeq	sl, r1, r8, asr pc
   1ad68:	andeq	sl, r1, r8, asr pc
   1ad6c:	andeq	sl, r1, r8, asr pc
   1ad70:	andeq	fp, r1, ip, asr r3
   1ad74:	andeq	sl, r1, r8, asr pc
   1ad78:	andeq	sl, r1, r8, asr pc
   1ad7c:	andeq	sl, r1, r8, asr pc
   1ad80:	andeq	fp, r1, ip, asr #6
   1ad84:	andeq	sl, r1, r8, asr pc
   1ad88:	andeq	fp, r1, ip, lsr r3
   1ad8c:	andeq	sl, r1, r8, asr pc
   1ad90:	andeq	sl, r1, r8, asr pc
   1ad94:	andeq	sl, r1, r8, asr pc
   1ad98:	andeq	sl, r1, r8, asr pc
   1ad9c:	andeq	sl, r1, r8, asr pc
   1ada0:	andeq	sl, r1, r8, asr pc
   1ada4:	andeq	fp, r1, ip, lsl r3
   1ada8:	mov	lr, #1
   1adac:	mov	r0, #1024	; 0x400
   1adb0:	sub	r6, r6, #66	; 0x42
   1adb4:	cmp	r6, #53	; 0x35
   1adb8:	ldrls	pc, [pc, r6, lsl #2]
   1adbc:	b	1af58 <__assert_fail@plt+0x9b14>
   1adc0:	andeq	sl, r1, ip, asr #31
   1adc4:	andeq	sl, r1, r8, asr pc
   1adc8:	andeq	sl, r1, r8, asr pc
   1adcc:	strdeq	sl, [r1], -r0
   1add0:	andeq	sl, r1, r8, asr pc
   1add4:	muleq	r1, r8, lr
   1add8:	andeq	sl, r1, r8, asr pc
   1addc:	andeq	sl, r1, r8, asr pc
   1ade0:	andeq	sl, r1, r8, asr pc
   1ade4:	andeq	fp, r1, r8, ror #1
   1ade8:	andeq	sl, r1, r8, asr pc
   1adec:	andeq	fp, r1, ip, lsl #5
   1adf0:	andeq	sl, r1, r8, asr pc
   1adf4:	andeq	sl, r1, r8, asr pc
   1adf8:	andeq	fp, r1, r0, lsl r2
   1adfc:	andeq	sl, r1, r8, asr pc
   1ae00:	andeq	sl, r1, r8, asr pc
   1ae04:	andeq	sl, r1, r8, asr pc
   1ae08:	muleq	r1, r4, r1
   1ae0c:	andeq	sl, r1, r8, asr pc
   1ae10:	andeq	sl, r1, r8, asr pc
   1ae14:	andeq	sl, r1, r8, asr pc
   1ae18:	andeq	sl, r1, r8, asr pc
   1ae1c:	andeq	fp, r1, r8, lsl r1
   1ae20:	andeq	fp, r1, ip, rrx
   1ae24:	andeq	sl, r1, r8, asr pc
   1ae28:	andeq	sl, r1, r8, asr pc
   1ae2c:	andeq	sl, r1, r8, asr pc
   1ae30:	andeq	sl, r1, r8, asr pc
   1ae34:	andeq	sl, r1, r8, asr pc
   1ae38:	andeq	sl, r1, r8, asr pc
   1ae3c:	andeq	sl, r1, r8, asr pc
   1ae40:	andeq	sl, r1, r8, lsr #31
   1ae44:	andeq	sl, r1, ip, lsr #30
   1ae48:	andeq	sl, r1, r8, asr pc
   1ae4c:	andeq	sl, r1, r8, asr pc
   1ae50:	andeq	sl, r1, r8, asr pc
   1ae54:	muleq	r1, r8, lr
   1ae58:	andeq	sl, r1, r8, asr pc
   1ae5c:	andeq	sl, r1, r8, asr pc
   1ae60:	andeq	sl, r1, r8, asr pc
   1ae64:	andeq	fp, r1, r8, ror #1
   1ae68:	andeq	sl, r1, r8, asr pc
   1ae6c:	andeq	fp, r1, ip, lsl #5
   1ae70:	andeq	sl, r1, r8, asr pc
   1ae74:	andeq	sl, r1, r8, asr pc
   1ae78:	andeq	sl, r1, r8, asr pc
   1ae7c:	andeq	sl, r1, r8, asr pc
   1ae80:	andeq	sl, r1, r8, asr pc
   1ae84:	andeq	sl, r1, r8, asr pc
   1ae88:	muleq	r1, r4, r1
   1ae8c:	andeq	sl, r1, r8, asr pc
   1ae90:	andeq	sl, r1, r8, asr pc
   1ae94:	andeq	sl, r1, r0, lsl #31
   1ae98:	asr	r1, r0, #31
   1ae9c:	mov	r2, #0
   1aea0:	mov	r3, #0
   1aea4:	cmp	fp, #0
   1aea8:	strd	r2, [sp]
   1aeac:	bne	1b3cc <__assert_fail@plt+0x9f88>
   1aeb0:	ldrd	r2, [sp]
   1aeb4:	orrs	r3, r2, r3
   1aeb8:	bne	1b3bc <__assert_fail@plt+0x9f78>
   1aebc:	mul	r3, sl, r1
   1aec0:	umull	r6, r7, sl, r0
   1aec4:	mla	r3, r0, fp, r3
   1aec8:	ldrd	sl, [sp]
   1aecc:	add	ip, r3, r7
   1aed0:	cmp	ip, #0
   1aed4:	mov	r7, ip
   1aed8:	bne	1b460 <__assert_fail@plt+0xa01c>
   1aedc:	orrs	r3, sl, fp
   1aee0:	bne	1b3bc <__assert_fail@plt+0x9f78>
   1aee4:	umull	r2, r3, r6, r0
   1aee8:	mul	ip, r6, r1
   1aeec:	strd	r2, [sp]
   1aef0:	mla	r3, r0, r7, ip
   1aef4:	ldr	r2, [sp, #4]
   1aef8:	add	ip, r3, r2
   1aefc:	cmp	ip, #0
   1af00:	str	ip, [sp, #4]
   1af04:	bne	1b43c <__assert_fail@plt+0x9ff8>
   1af08:	orrs	r3, sl, fp
   1af0c:	bne	1b3bc <__assert_fail@plt+0x9f78>
   1af10:	ldrd	r6, [sp]
   1af14:	mov	r3, #0
   1af18:	mul	r2, r6, r1
   1af1c:	umull	sl, fp, r6, r0
   1af20:	mla	r2, r0, r7, r2
   1af24:	add	fp, r2, fp
   1af28:	orr	r8, r8, r3
   1af2c:	add	r3, r9, lr
   1af30:	str	r3, [r4]
   1af34:	ldrb	r3, [r9, lr]
   1af38:	cmp	r3, #0
   1af3c:	orrne	r8, r8, #2
   1af40:	b	1ab70 <__assert_fail@plt+0x972c>
   1af44:	mov	r1, r6
   1af48:	ldr	r0, [sp]
   1af4c:	bl	1130c <strchr@plt>
   1af50:	cmp	r0, #0
   1af54:	bne	1abdc <__assert_fail@plt+0x9798>
   1af58:	ldr	r3, [sp, #12]
   1af5c:	orr	r8, r8, #2
   1af60:	strd	sl, [r3]
   1af64:	b	1ab78 <__assert_fail@plt+0x9734>
   1af68:	ldrb	r3, [r9, #2]
   1af6c:	mov	r0, #1024	; 0x400
   1af70:	cmp	r3, #66	; 0x42
   1af74:	movne	lr, #1
   1af78:	moveq	lr, #3
   1af7c:	b	1adb0 <__assert_fail@plt+0x996c>
   1af80:	lsr	r3, fp, #31
   1af84:	adds	sl, sl, sl
   1af88:	adc	fp, fp, fp
   1af8c:	cmp	r3, #0
   1af90:	beq	1af2c <__assert_fail@plt+0x9ae8>
   1af94:	mov	r8, #1
   1af98:	mvn	sl, #0
   1af9c:	mvn	fp, #0
   1afa0:	b	1af2c <__assert_fail@plt+0x9ae8>
   1afa4:	mov	lr, #1
   1afa8:	lsr	r3, fp, #23
   1afac:	cmp	r3, #0
   1afb0:	bne	1af94 <__assert_fail@plt+0x9b50>
   1afb4:	lsl	r3, fp, #9
   1afb8:	orr	r3, r3, sl, lsr #23
   1afbc:	lsl	r2, sl, #9
   1afc0:	mov	sl, r2
   1afc4:	mov	fp, r3
   1afc8:	b	1af2c <__assert_fail@plt+0x9ae8>
   1afcc:	lsr	r3, fp, #22
   1afd0:	cmp	r3, #0
   1afd4:	bne	1af94 <__assert_fail@plt+0x9b50>
   1afd8:	lsl	r3, fp, #10
   1afdc:	orr	r3, r3, sl, lsr #22
   1afe0:	lsl	r2, sl, #10
   1afe4:	mov	sl, r2
   1afe8:	mov	fp, r3
   1afec:	b	1af2c <__assert_fail@plt+0x9ae8>
   1aff0:	mov	r6, r0
   1aff4:	asr	r7, r0, #31
   1aff8:	mov	r3, #0
   1affc:	mov	ip, #6
   1b000:	str	r3, [sp]
   1b004:	strd	r4, [sp, #16]
   1b008:	b	1b038 <__assert_fail@plt+0x9bf4>
   1b00c:	orrs	r3, r2, r3
   1b010:	movne	r3, #1
   1b014:	muleq	r3, sl, r7
   1b018:	strne	r3, [sp]
   1b01c:	mlaeq	r3, r6, fp, r3
   1b020:	umulleq	sl, fp, sl, r6
   1b024:	mvnne	sl, #0
   1b028:	addeq	fp, r3, fp
   1b02c:	mvnne	fp, #0
   1b030:	subs	ip, ip, #1
   1b034:	beq	1b37c <__assert_fail@plt+0x9f38>
   1b038:	cmp	fp, #0
   1b03c:	mov	r2, #0
   1b040:	mov	r3, #0
   1b044:	beq	1b00c <__assert_fail@plt+0x9bc8>
   1b048:	umull	r0, r1, sl, r6
   1b04c:	mov	r5, #0
   1b050:	mov	r0, r1
   1b054:	mov	r1, r5
   1b058:	umlal	r0, r1, fp, r6
   1b05c:	cmp	r1, r5
   1b060:	movne	r2, #1
   1b064:	movne	r3, #0
   1b068:	b	1b00c <__assert_fail@plt+0x9bc8>
   1b06c:	mov	r6, r0
   1b070:	asr	r7, r0, #31
   1b074:	mov	r3, #0
   1b078:	mov	ip, #7
   1b07c:	str	r3, [sp]
   1b080:	strd	r4, [sp, #16]
   1b084:	b	1b0b4 <__assert_fail@plt+0x9c70>
   1b088:	orrs	r3, r2, r3
   1b08c:	movne	r3, #1
   1b090:	muleq	r3, sl, r7
   1b094:	strne	r3, [sp]
   1b098:	mlaeq	r3, r6, fp, r3
   1b09c:	umulleq	sl, fp, sl, r6
   1b0a0:	mvnne	sl, #0
   1b0a4:	addeq	fp, r3, fp
   1b0a8:	mvnne	fp, #0
   1b0ac:	subs	ip, ip, #1
   1b0b0:	beq	1b37c <__assert_fail@plt+0x9f38>
   1b0b4:	cmp	fp, #0
   1b0b8:	mov	r2, #0
   1b0bc:	mov	r3, #0
   1b0c0:	beq	1b088 <__assert_fail@plt+0x9c44>
   1b0c4:	umull	r0, r1, sl, r6
   1b0c8:	mov	r5, #0
   1b0cc:	mov	r0, r1
   1b0d0:	mov	r1, r5
   1b0d4:	umlal	r0, r1, fp, r6
   1b0d8:	cmp	r1, r5
   1b0dc:	movne	r2, #1
   1b0e0:	movne	r3, #0
   1b0e4:	b	1b088 <__assert_fail@plt+0x9c44>
   1b0e8:	asr	r1, r0, #31
   1b0ec:	cmp	fp, #0
   1b0f0:	mov	r6, #0
   1b0f4:	mov	r7, #0
   1b0f8:	bne	1b394 <__assert_fail@plt+0x9f50>
   1b0fc:	orrs	r3, r6, r7
   1b100:	bne	1af94 <__assert_fail@plt+0x9b50>
   1b104:	mul	r3, sl, r1
   1b108:	mla	r3, r0, fp, r3
   1b10c:	umull	sl, fp, sl, r0
   1b110:	add	fp, r3, fp
   1b114:	b	1af2c <__assert_fail@plt+0x9ae8>
   1b118:	mov	r6, r0
   1b11c:	asr	r7, r0, #31
   1b120:	mov	r3, #0
   1b124:	mov	ip, #8
   1b128:	str	r3, [sp]
   1b12c:	strd	r4, [sp, #16]
   1b130:	b	1b160 <__assert_fail@plt+0x9d1c>
   1b134:	orrs	r3, r2, r3
   1b138:	movne	r3, #1
   1b13c:	muleq	r3, sl, r7
   1b140:	strne	r3, [sp]
   1b144:	mlaeq	r3, r6, fp, r3
   1b148:	umulleq	sl, fp, sl, r6
   1b14c:	mvnne	sl, #0
   1b150:	addeq	fp, r3, fp
   1b154:	mvnne	fp, #0
   1b158:	subs	ip, ip, #1
   1b15c:	beq	1b37c <__assert_fail@plt+0x9f38>
   1b160:	cmp	fp, #0
   1b164:	mov	r2, #0
   1b168:	mov	r3, #0
   1b16c:	beq	1b134 <__assert_fail@plt+0x9cf0>
   1b170:	umull	r0, r1, sl, r6
   1b174:	mov	r5, #0
   1b178:	mov	r0, r1
   1b17c:	mov	r1, r5
   1b180:	umlal	r0, r1, fp, r6
   1b184:	cmp	r1, r5
   1b188:	movne	r2, #1
   1b18c:	movne	r3, #0
   1b190:	b	1b134 <__assert_fail@plt+0x9cf0>
   1b194:	mov	r6, r0
   1b198:	asr	r7, r0, #31
   1b19c:	mov	r3, #0
   1b1a0:	mov	ip, #4
   1b1a4:	str	r3, [sp]
   1b1a8:	strd	r4, [sp, #16]
   1b1ac:	b	1b1dc <__assert_fail@plt+0x9d98>
   1b1b0:	orrs	r3, r2, r3
   1b1b4:	movne	r3, #1
   1b1b8:	muleq	r3, sl, r7
   1b1bc:	strne	r3, [sp]
   1b1c0:	mlaeq	r3, r6, fp, r3
   1b1c4:	umulleq	sl, fp, sl, r6
   1b1c8:	mvnne	sl, #0
   1b1cc:	addeq	fp, r3, fp
   1b1d0:	mvnne	fp, #0
   1b1d4:	subs	ip, ip, #1
   1b1d8:	beq	1b37c <__assert_fail@plt+0x9f38>
   1b1dc:	cmp	fp, #0
   1b1e0:	mov	r2, #0
   1b1e4:	mov	r3, #0
   1b1e8:	beq	1b1b0 <__assert_fail@plt+0x9d6c>
   1b1ec:	umull	r0, r1, sl, r6
   1b1f0:	mov	r5, #0
   1b1f4:	mov	r0, r1
   1b1f8:	mov	r1, r5
   1b1fc:	umlal	r0, r1, fp, r6
   1b200:	cmp	r1, r5
   1b204:	movne	r2, #1
   1b208:	movne	r3, #0
   1b20c:	b	1b1b0 <__assert_fail@plt+0x9d6c>
   1b210:	mov	r6, r0
   1b214:	asr	r7, r0, #31
   1b218:	mov	r3, #0
   1b21c:	mov	ip, #5
   1b220:	str	r3, [sp]
   1b224:	strd	r4, [sp, #16]
   1b228:	b	1b258 <__assert_fail@plt+0x9e14>
   1b22c:	orrs	r3, r2, r3
   1b230:	movne	r3, #1
   1b234:	muleq	r3, sl, r7
   1b238:	strne	r3, [sp]
   1b23c:	mlaeq	r3, r6, fp, r3
   1b240:	umulleq	sl, fp, sl, r6
   1b244:	mvnne	sl, #0
   1b248:	addeq	fp, r3, fp
   1b24c:	mvnne	fp, #0
   1b250:	subs	ip, ip, #1
   1b254:	beq	1b37c <__assert_fail@plt+0x9f38>
   1b258:	cmp	fp, #0
   1b25c:	mov	r2, #0
   1b260:	mov	r3, #0
   1b264:	beq	1b22c <__assert_fail@plt+0x9de8>
   1b268:	umull	r0, r1, sl, r6
   1b26c:	mov	r5, #0
   1b270:	mov	r0, r1
   1b274:	mov	r1, r5
   1b278:	umlal	r0, r1, fp, r6
   1b27c:	cmp	r1, r5
   1b280:	movne	r2, #1
   1b284:	movne	r3, #0
   1b288:	b	1b22c <__assert_fail@plt+0x9de8>
   1b28c:	asr	r1, r0, #31
   1b290:	cmp	fp, #0
   1b294:	mov	r6, #0
   1b298:	mov	r7, #0
   1b29c:	bne	1b3f0 <__assert_fail@plt+0x9fac>
   1b2a0:	orrs	r3, r6, r7
   1b2a4:	bne	1af94 <__assert_fail@plt+0x9b50>
   1b2a8:	umull	r2, r3, sl, r0
   1b2ac:	mul	ip, sl, r1
   1b2b0:	strd	r2, [sp]
   1b2b4:	mla	r3, r0, fp, ip
   1b2b8:	ldr	r2, [sp, #4]
   1b2bc:	mov	sl, r6
   1b2c0:	add	ip, r3, r2
   1b2c4:	cmp	ip, #0
   1b2c8:	mov	fp, r7
   1b2cc:	str	ip, [sp, #4]
   1b2d0:	bne	1b418 <__assert_fail@plt+0x9fd4>
   1b2d4:	orrs	r3, sl, fp
   1b2d8:	bne	1af94 <__assert_fail@plt+0x9b50>
   1b2dc:	ldrd	r6, [sp]
   1b2e0:	mul	r3, r6, r1
   1b2e4:	umull	sl, fp, r6, r0
   1b2e8:	mla	r0, r0, r7, r3
   1b2ec:	add	fp, r0, fp
   1b2f0:	b	1af2c <__assert_fail@plt+0x9ae8>
   1b2f4:	mov	lr, #1
   1b2f8:	b	1af2c <__assert_fail@plt+0x9ae8>
   1b2fc:	mov	lr, #1
   1b300:	mov	r6, #1024	; 0x400
   1b304:	mov	r7, #0
   1b308:	b	1b074 <__assert_fail@plt+0x9c30>
   1b30c:	mov	lr, #1
   1b310:	mov	r6, #1024	; 0x400
   1b314:	mov	r7, #0
   1b318:	b	1b120 <__assert_fail@plt+0x9cdc>
   1b31c:	mov	lr, #1
   1b320:	mov	r6, #1024	; 0x400
   1b324:	mov	r7, #0
   1b328:	b	1b19c <__assert_fail@plt+0x9d58>
   1b32c:	mov	lr, #1
   1b330:	mov	r6, #1024	; 0x400
   1b334:	mov	r7, #0
   1b338:	b	1b218 <__assert_fail@plt+0x9dd4>
   1b33c:	mov	lr, #1
   1b340:	mov	r0, #1024	; 0x400
   1b344:	mov	r1, #0
   1b348:	b	1b290 <__assert_fail@plt+0x9e4c>
   1b34c:	mov	lr, #1
   1b350:	mov	r0, #1024	; 0x400
   1b354:	mov	r1, #0
   1b358:	b	1b0ec <__assert_fail@plt+0x9ca8>
   1b35c:	mov	lr, #1
   1b360:	mov	r0, #1024	; 0x400
   1b364:	mov	r1, #0
   1b368:	b	1ae9c <__assert_fail@plt+0x9a58>
   1b36c:	mov	lr, #1
   1b370:	mov	r6, #1024	; 0x400
   1b374:	mov	r7, #0
   1b378:	b	1aff8 <__assert_fail@plt+0x9bb4>
   1b37c:	ldrd	r4, [sp, #16]
   1b380:	ldr	r3, [sp]
   1b384:	b	1af28 <__assert_fail@plt+0x9ae4>
   1b388:	mov	lr, #2
   1b38c:	mov	r0, #1000	; 0x3e8
   1b390:	b	1adb0 <__assert_fail@plt+0x996c>
   1b394:	umull	r2, r3, sl, r0
   1b398:	str	r3, [sp]
   1b39c:	mov	r3, #0
   1b3a0:	str	r3, [sp, #4]
   1b3a4:	ldrd	r2, [sp]
   1b3a8:	umlal	r2, r3, fp, r0
   1b3ac:	cmp	r3, #0
   1b3b0:	movne	r6, #1
   1b3b4:	movne	r7, #0
   1b3b8:	b	1b0fc <__assert_fail@plt+0x9cb8>
   1b3bc:	mov	r3, #1
   1b3c0:	mvn	sl, #0
   1b3c4:	mvn	fp, #0
   1b3c8:	b	1af28 <__assert_fail@plt+0x9ae4>
   1b3cc:	umull	r2, r3, sl, r0
   1b3d0:	mov	r7, #0
   1b3d4:	mov	r6, r3
   1b3d8:	umlal	r6, r7, fp, r0
   1b3dc:	cmp	r7, #0
   1b3e0:	movne	r2, #1
   1b3e4:	movne	r3, #0
   1b3e8:	strdne	r2, [sp]
   1b3ec:	b	1aeb0 <__assert_fail@plt+0x9a6c>
   1b3f0:	umull	r2, r3, sl, r0
   1b3f4:	str	r3, [sp]
   1b3f8:	mov	r3, #0
   1b3fc:	str	r3, [sp, #4]
   1b400:	ldrd	r2, [sp]
   1b404:	umlal	r2, r3, fp, r0
   1b408:	cmp	r3, #0
   1b40c:	movne	r6, #1
   1b410:	movne	r7, #0
   1b414:	b	1b2a0 <__assert_fail@plt+0x9e5c>
   1b418:	ldr	r3, [sp]
   1b41c:	mov	r7, #0
   1b420:	umull	r2, r3, r3, r0
   1b424:	mov	r6, r3
   1b428:	umlal	r6, r7, ip, r0
   1b42c:	cmp	r7, #0
   1b430:	movne	sl, #1
   1b434:	movne	fp, #0
   1b438:	b	1b2d4 <__assert_fail@plt+0x9e90>
   1b43c:	ldr	r3, [sp]
   1b440:	mov	r7, #0
   1b444:	umull	r2, r3, r3, r0
   1b448:	mov	r6, r3
   1b44c:	umlal	r6, r7, ip, r0
   1b450:	cmp	r7, #0
   1b454:	movne	sl, #1
   1b458:	movne	fp, #0
   1b45c:	b	1af08 <__assert_fail@plt+0x9ac4>
   1b460:	umull	r2, r3, r6, r0
   1b464:	str	r3, [sp]
   1b468:	mov	r3, #0
   1b46c:	str	r3, [sp, #4]
   1b470:	ldrd	r2, [sp]
   1b474:	umlal	r2, r3, ip, r0
   1b478:	cmp	r3, #0
   1b47c:	movne	sl, #1
   1b480:	movne	fp, #0
   1b484:	b	1aedc <__assert_fail@plt+0x9a98>
   1b488:	bl	111c8 <__stack_chk_fail@plt>
   1b48c:	ldr	r3, [pc, #16]	; 1b4a4 <__assert_fail@plt+0xa060>
   1b490:	mov	r2, #96	; 0x60
   1b494:	ldr	r1, [pc, #12]	; 1b4a8 <__assert_fail@plt+0xa064>
   1b498:	ldr	r0, [pc, #12]	; 1b4ac <__assert_fail@plt+0xa068>
   1b49c:	bl	11444 <__assert_fail@plt>
   1b4a0:	andeq	lr, r2, r8, lsl #30
   1b4a4:	andeq	lr, r1, r4, lsl #4
   1b4a8:	andeq	lr, r1, ip, asr #2
   1b4ac:	andeq	lr, r1, ip, asr r1
   1b4b0:	push	{r4, r5, lr}
   1b4b4:	sub	sp, sp, #12
   1b4b8:	mov	r4, r0
   1b4bc:	bl	1136c <fileno@plt>
   1b4c0:	cmp	r0, #0
   1b4c4:	mov	r0, r4
   1b4c8:	blt	1b544 <__assert_fail@plt+0xa100>
   1b4cc:	bl	112ac <__freading@plt>
   1b4d0:	cmp	r0, #0
   1b4d4:	bne	1b510 <__assert_fail@plt+0xa0cc>
   1b4d8:	mov	r0, r4
   1b4dc:	bl	1b69c <__assert_fail@plt+0xa258>
   1b4e0:	cmp	r0, #0
   1b4e4:	beq	1b540 <__assert_fail@plt+0xa0fc>
   1b4e8:	bl	11330 <__errno_location@plt>
   1b4ec:	mov	r5, r0
   1b4f0:	mov	r0, r4
   1b4f4:	ldr	r4, [r5]
   1b4f8:	bl	11384 <fclose@plt>
   1b4fc:	cmp	r4, #0
   1b500:	mvnne	r0, #0
   1b504:	strne	r4, [r5]
   1b508:	add	sp, sp, #12
   1b50c:	pop	{r4, r5, pc}
   1b510:	mov	r0, r4
   1b514:	bl	1136c <fileno@plt>
   1b518:	mov	r3, #1
   1b51c:	str	r3, [sp]
   1b520:	mov	r2, #0
   1b524:	mov	r3, #0
   1b528:	bl	11234 <lseek64@plt>
   1b52c:	mvn	r3, #0
   1b530:	mvn	r2, #0
   1b534:	cmp	r1, r3
   1b538:	cmpeq	r0, r2
   1b53c:	bne	1b4d8 <__assert_fail@plt+0xa094>
   1b540:	mov	r0, r4
   1b544:	add	sp, sp, #12
   1b548:	pop	{r4, r5, lr}
   1b54c:	b	11384 <fclose@plt>
   1b550:	push	{r1, r2, r3}
   1b554:	push	{r4, r5, r6, r7, r8, lr}
   1b558:	sub	sp, sp, #12
   1b55c:	ldr	r4, [pc, #300]	; 1b690 <__assert_fail@plt+0xa24c>
   1b560:	ldr	r3, [pc, #300]	; 1b694 <__assert_fail@plt+0xa250>
   1b564:	ldr	r1, [sp, #36]	; 0x24
   1b568:	ldr	r2, [r4]
   1b56c:	cmp	r1, r3
   1b570:	add	r3, sp, #40	; 0x28
   1b574:	str	r2, [sp, #4]
   1b578:	str	r3, [sp]
   1b57c:	bne	1b648 <__assert_fail@plt+0xa204>
   1b580:	ldr	r6, [pc, #272]	; 1b698 <__assert_fail@plt+0xa254>
   1b584:	add	r3, sp, #44	; 0x2c
   1b588:	str	r3, [sp]
   1b58c:	ldr	r3, [r6]
   1b590:	ldr	r7, [sp, #40]	; 0x28
   1b594:	cmp	r3, #0
   1b598:	blt	1b5dc <__assert_fail@plt+0xa198>
   1b59c:	mov	r2, r7
   1b5a0:	mov	r8, r0
   1b5a4:	bl	1139c <fcntl64@plt>
   1b5a8:	subs	r5, r0, #0
   1b5ac:	blt	1b658 <__assert_fail@plt+0xa214>
   1b5b0:	mov	r3, #1
   1b5b4:	str	r3, [r6]
   1b5b8:	ldr	r2, [sp, #4]
   1b5bc:	ldr	r3, [r4]
   1b5c0:	mov	r0, r5
   1b5c4:	cmp	r2, r3
   1b5c8:	bne	1b68c <__assert_fail@plt+0xa248>
   1b5cc:	add	sp, sp, #12
   1b5d0:	pop	{r4, r5, r6, r7, r8, lr}
   1b5d4:	add	sp, sp, #12
   1b5d8:	bx	lr
   1b5dc:	mov	r2, r7
   1b5e0:	mov	r1, #0
   1b5e4:	bl	1b550 <__assert_fail@plt+0xa10c>
   1b5e8:	subs	r5, r0, #0
   1b5ec:	blt	1b5b8 <__assert_fail@plt+0xa174>
   1b5f0:	ldr	r3, [r6]
   1b5f4:	cmn	r3, #1
   1b5f8:	bne	1b5b8 <__assert_fail@plt+0xa174>
   1b5fc:	mov	r1, #1
   1b600:	mov	r0, r5
   1b604:	bl	1139c <fcntl64@plt>
   1b608:	subs	r2, r0, #0
   1b60c:	blt	1b628 <__assert_fail@plt+0xa1e4>
   1b610:	orr	r2, r2, #1
   1b614:	mov	r1, #2
   1b618:	mov	r0, r5
   1b61c:	bl	1139c <fcntl64@plt>
   1b620:	cmn	r0, #1
   1b624:	bne	1b5b8 <__assert_fail@plt+0xa174>
   1b628:	bl	11330 <__errno_location@plt>
   1b62c:	mov	r6, r0
   1b630:	mov	r0, r5
   1b634:	ldr	r7, [r6]
   1b638:	mvn	r5, #0
   1b63c:	bl	11438 <close@plt>
   1b640:	str	r7, [r6]
   1b644:	b	1b5b8 <__assert_fail@plt+0xa174>
   1b648:	ldr	r2, [sp, #40]	; 0x28
   1b64c:	bl	1139c <fcntl64@plt>
   1b650:	mov	r5, r0
   1b654:	b	1b5b8 <__assert_fail@plt+0xa174>
   1b658:	bl	11330 <__errno_location@plt>
   1b65c:	ldr	r3, [r0]
   1b660:	cmp	r3, #22
   1b664:	bne	1b5b0 <__assert_fail@plt+0xa16c>
   1b668:	mov	r2, r7
   1b66c:	mov	r0, r8
   1b670:	mov	r1, #0
   1b674:	bl	1b550 <__assert_fail@plt+0xa10c>
   1b678:	subs	r5, r0, #0
   1b67c:	mvnge	r3, #0
   1b680:	strge	r3, [r6]
   1b684:	bge	1b5fc <__assert_fail@plt+0xa1b8>
   1b688:	b	1b5b8 <__assert_fail@plt+0xa174>
   1b68c:	bl	111c8 <__stack_chk_fail@plt>
   1b690:	andeq	lr, r2, r8, lsl #30
   1b694:	andeq	r0, r0, r6, lsl #8
   1b698:	andeq	pc, r2, r8, ror #7
   1b69c:	push	{r4, lr}
   1b6a0:	subs	r4, r0, #0
   1b6a4:	sub	sp, sp, #8
   1b6a8:	beq	1b6c4 <__assert_fail@plt+0xa280>
   1b6ac:	bl	112ac <__freading@plt>
   1b6b0:	cmp	r0, #0
   1b6b4:	beq	1b6c4 <__assert_fail@plt+0xa280>
   1b6b8:	ldr	r3, [r4]
   1b6bc:	tst	r3, #256	; 0x100
   1b6c0:	bne	1b6d4 <__assert_fail@plt+0xa290>
   1b6c4:	mov	r0, r4
   1b6c8:	add	sp, sp, #8
   1b6cc:	pop	{r4, lr}
   1b6d0:	b	11150 <fflush@plt>
   1b6d4:	mov	r3, #1
   1b6d8:	str	r3, [sp]
   1b6dc:	mov	r2, #0
   1b6e0:	mov	r3, #0
   1b6e4:	mov	r0, r4
   1b6e8:	bl	1b6fc <__assert_fail@plt+0xa2b8>
   1b6ec:	mov	r0, r4
   1b6f0:	add	sp, sp, #8
   1b6f4:	pop	{r4, lr}
   1b6f8:	b	11150 <fflush@plt>
   1b6fc:	push	{r4, r5, r6, r7, r8, lr}
   1b700:	sub	sp, sp, #8
   1b704:	ldmib	r0, {ip, lr}
   1b708:	mov	r4, r0
   1b70c:	ldr	r5, [sp, #32]
   1b710:	cmp	lr, ip
   1b714:	beq	1b72c <__assert_fail@plt+0xa2e8>
   1b718:	str	r5, [sp, #32]
   1b71c:	mov	r0, r4
   1b720:	add	sp, sp, #8
   1b724:	pop	{r4, r5, r6, r7, r8, lr}
   1b728:	b	11390 <fseeko64@plt>
   1b72c:	ldr	lr, [r0, #20]
   1b730:	ldr	ip, [r0, #16]
   1b734:	cmp	lr, ip
   1b738:	bne	1b718 <__assert_fail@plt+0xa2d4>
   1b73c:	ldr	r8, [r0, #36]	; 0x24
   1b740:	cmp	r8, #0
   1b744:	bne	1b718 <__assert_fail@plt+0xa2d4>
   1b748:	mov	r6, r2
   1b74c:	mov	r7, r3
   1b750:	bl	1136c <fileno@plt>
   1b754:	mov	r2, r6
   1b758:	mov	r3, r7
   1b75c:	str	r5, [sp]
   1b760:	bl	11234 <lseek64@plt>
   1b764:	mvn	r3, #0
   1b768:	mvn	r2, #0
   1b76c:	cmp	r1, r3
   1b770:	cmpeq	r0, r2
   1b774:	beq	1b794 <__assert_fail@plt+0xa350>
   1b778:	ldr	r3, [r4]
   1b77c:	strd	r0, [r4, #80]	; 0x50
   1b780:	mov	r0, r8
   1b784:	bic	r3, r3, #16
   1b788:	str	r3, [r4]
   1b78c:	add	sp, sp, #8
   1b790:	pop	{r4, r5, r6, r7, r8, pc}
   1b794:	mvn	r0, #0
   1b798:	b	1b78c <__assert_fail@plt+0xa348>
   1b79c:	push	{r4, r5, r6, r7, r8, lr}
   1b7a0:	subs	r7, r0, #0
   1b7a4:	ldr	r5, [pc, #108]	; 1b818 <__assert_fail@plt+0xa3d4>
   1b7a8:	sub	sp, sp, #8
   1b7ac:	mov	r8, r1
   1b7b0:	ldr	r1, [r5]
   1b7b4:	moveq	r7, sp
   1b7b8:	str	r1, [sp, #4]
   1b7bc:	mov	r0, r7
   1b7c0:	mov	r1, r8
   1b7c4:	mov	r6, r2
   1b7c8:	bl	11264 <mbrtowc@plt>
   1b7cc:	cmp	r6, #0
   1b7d0:	cmnne	r0, #3
   1b7d4:	mov	r4, r0
   1b7d8:	bhi	1b7f8 <__assert_fail@plt+0xa3b4>
   1b7dc:	ldr	r2, [sp, #4]
   1b7e0:	ldr	r3, [r5]
   1b7e4:	mov	r0, r4
   1b7e8:	cmp	r2, r3
   1b7ec:	bne	1b814 <__assert_fail@plt+0xa3d0>
   1b7f0:	add	sp, sp, #8
   1b7f4:	pop	{r4, r5, r6, r7, r8, pc}
   1b7f8:	mov	r0, #0
   1b7fc:	bl	14fe0 <__assert_fail@plt+0x3b9c>
   1b800:	cmp	r0, #0
   1b804:	moveq	r4, #1
   1b808:	ldrbeq	r3, [r8]
   1b80c:	streq	r3, [r7]
   1b810:	b	1b7dc <__assert_fail@plt+0xa398>
   1b814:	bl	111c8 <__stack_chk_fail@plt>
   1b818:	andeq	lr, r2, r8, lsl #30
   1b81c:	subs	r1, r0, #0
   1b820:	beq	1b830 <__assert_fail@plt+0xa3ec>
   1b824:	mov	r2, #1
   1b828:	ldr	r0, [pc, #8]	; 1b838 <__assert_fail@plt+0xa3f4>
   1b82c:	b	11318 <setenv@plt>
   1b830:	ldr	r0, [pc]	; 1b838 <__assert_fail@plt+0xa3f4>
   1b834:	b	11414 <unsetenv@plt>
   1b838:	andeq	sp, r1, r0, lsl #21
   1b83c:	cmp	r0, #0
   1b840:	bxeq	lr
   1b844:	push	{r4, lr}
   1b848:	ldr	r4, [r0]
   1b84c:	bl	11168 <free@plt>
   1b850:	subs	r0, r4, #0
   1b854:	bne	1b848 <__assert_fail@plt+0xa404>
   1b858:	pop	{r4, pc}
   1b85c:	push	{r4, r5, r6, r7, r8, lr}
   1b860:	mov	r5, r0
   1b864:	bl	11330 <__errno_location@plt>
   1b868:	mov	r4, r0
   1b86c:	ldrb	r0, [r5, #4]
   1b870:	ldr	r6, [r4]
   1b874:	cmp	r0, #0
   1b878:	addne	r0, r5, #5
   1b87c:	bl	1b81c <__assert_fail@plt+0xa3d8>
   1b880:	cmp	r0, #0
   1b884:	beq	1b8a4 <__assert_fail@plt+0xa460>
   1b888:	ldr	r6, [r4]
   1b88c:	mov	r7, #0
   1b890:	mov	r0, r5
   1b894:	bl	1b83c <__assert_fail@plt+0xa3f8>
   1b898:	str	r6, [r4]
   1b89c:	mov	r0, r7
   1b8a0:	pop	{r4, r5, r6, r7, r8, pc}
   1b8a4:	bl	11210 <tzset@plt>
   1b8a8:	mov	r7, #1
   1b8ac:	b	1b890 <__assert_fail@plt+0xa44c>
   1b8b0:	push	{r4, r5, r6, r7, r8, lr}
   1b8b4:	subs	r6, r0, #0
   1b8b8:	beq	1b914 <__assert_fail@plt+0xa4d0>
   1b8bc:	bl	11300 <strlen@plt>
   1b8c0:	add	r5, r0, #1
   1b8c4:	cmp	r5, #58	; 0x3a
   1b8c8:	movcs	r0, r5
   1b8cc:	movcc	r0, #58	; 0x3a
   1b8d0:	add	r0, r0, #9
   1b8d4:	bic	r0, r0, #3
   1b8d8:	bl	11288 <malloc@plt>
   1b8dc:	subs	r4, r0, #0
   1b8e0:	beq	1b90c <__assert_fail@plt+0xa4c8>
   1b8e4:	mov	r7, #0
   1b8e8:	mov	r2, #1
   1b8ec:	add	r3, r4, #5
   1b8f0:	strh	r2, [r4, #4]
   1b8f4:	mov	r1, r6
   1b8f8:	str	r7, [r4]
   1b8fc:	mov	r0, r3
   1b900:	mov	r2, r5
   1b904:	bl	1118c <memcpy@plt>
   1b908:	strb	r7, [r0, r5]
   1b90c:	mov	r0, r4
   1b910:	pop	{r4, r5, r6, r7, r8, pc}
   1b914:	mov	r0, #64	; 0x40
   1b918:	bl	11288 <malloc@plt>
   1b91c:	subs	r4, r0, #0
   1b920:	mov	r0, r4
   1b924:	strne	r6, [r4]
   1b928:	strhne	r6, [r4, #4]
   1b92c:	pop	{r4, r5, r6, r7, r8, pc}
   1b930:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b934:	ldr	r7, [r1, #40]	; 0x28
   1b938:	cmp	r7, #0
   1b93c:	beq	1ba18 <__assert_fail@plt+0xa5d4>
   1b940:	cmp	r1, r7
   1b944:	mov	r8, r1
   1b948:	mov	r6, r0
   1b94c:	bhi	1b95c <__assert_fail@plt+0xa518>
   1b950:	add	r3, r1, #44	; 0x2c
   1b954:	cmp	r7, r3
   1b958:	bcc	1ba18 <__assert_fail@plt+0xa5d4>
   1b95c:	ldrb	r3, [r7]
   1b960:	cmp	r3, #0
   1b964:	addne	r4, r6, #5
   1b968:	beq	1ba10 <__assert_fail@plt+0xa5cc>
   1b96c:	mov	r1, r7
   1b970:	mov	r0, r4
   1b974:	bl	11120 <strcmp@plt>
   1b978:	add	r5, r6, #5
   1b97c:	cmp	r0, #0
   1b980:	mov	r0, r4
   1b984:	beq	1ba00 <__assert_fail@plt+0xa5bc>
   1b988:	ldrb	r9, [r4]
   1b98c:	cmp	r9, #0
   1b990:	bne	1b9a8 <__assert_fail@plt+0xa564>
   1b994:	cmp	r5, r4
   1b998:	bne	1ba24 <__assert_fail@plt+0xa5e0>
   1b99c:	ldrb	r5, [r6, #4]
   1b9a0:	cmp	r5, #0
   1b9a4:	beq	1b9d0 <__assert_fail@plt+0xa58c>
   1b9a8:	bl	11300 <strlen@plt>
   1b9ac:	add	r0, r0, #1
   1b9b0:	ldrb	r3, [r4, r0]!
   1b9b4:	cmp	r3, #0
   1b9b8:	bne	1b96c <__assert_fail@plt+0xa528>
   1b9bc:	ldr	r3, [r6]
   1b9c0:	cmp	r3, #0
   1b9c4:	addne	r4, r3, #5
   1b9c8:	movne	r6, r3
   1b9cc:	b	1b96c <__assert_fail@plt+0xa528>
   1b9d0:	mov	r0, r7
   1b9d4:	bl	11300 <strlen@plt>
   1b9d8:	add	sl, r0, #1
   1b9dc:	add	r5, sl, r5
   1b9e0:	cmp	r5, #58	; 0x3a
   1b9e4:	bhi	1ba50 <__assert_fail@plt+0xa60c>
   1b9e8:	mov	r1, r7
   1b9ec:	mov	r2, sl
   1b9f0:	mov	r0, r4
   1b9f4:	bl	1118c <memcpy@plt>
   1b9f8:	mov	r3, #0
   1b9fc:	strb	r3, [r4, sl]
   1ba00:	mov	r9, #1
   1ba04:	str	r4, [r8, #40]	; 0x28
   1ba08:	mov	r0, r9
   1ba0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ba10:	ldr	r4, [pc, #96]	; 1ba78 <__assert_fail@plt+0xa634>
   1ba14:	b	1ba00 <__assert_fail@plt+0xa5bc>
   1ba18:	mov	r9, #1
   1ba1c:	mov	r0, r9
   1ba20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ba24:	mov	r0, r7
   1ba28:	bl	11300 <strlen@plt>
   1ba2c:	sub	r5, r4, r5
   1ba30:	mvn	r3, r5
   1ba34:	add	sl, r0, #1
   1ba38:	cmp	r3, sl
   1ba3c:	bcs	1b9dc <__assert_fail@plt+0xa598>
   1ba40:	bl	11330 <__errno_location@plt>
   1ba44:	mov	r3, #12
   1ba48:	str	r3, [r0]
   1ba4c:	b	1ba08 <__assert_fail@plt+0xa5c4>
   1ba50:	mov	r0, r7
   1ba54:	bl	1b8b0 <__assert_fail@plt+0xa46c>
   1ba58:	cmp	r0, #0
   1ba5c:	str	r0, [r6]
   1ba60:	moveq	r9, r0
   1ba64:	beq	1ba08 <__assert_fail@plt+0xa5c4>
   1ba68:	mov	r3, #0
   1ba6c:	strb	r3, [r0, #4]
   1ba70:	add	r4, r0, #5
   1ba74:	b	1ba00 <__assert_fail@plt+0xa5bc>
   1ba78:	andeq	ip, r1, r8, ror #14
   1ba7c:	push	{r4, r5, r6, lr}
   1ba80:	mov	r4, r0
   1ba84:	ldr	r0, [pc, #160]	; 1bb2c <__assert_fail@plt+0xa6e8>
   1ba88:	bl	1127c <getenv@plt>
   1ba8c:	ldrb	r3, [r4, #4]
   1ba90:	subs	r5, r0, #0
   1ba94:	beq	1bb14 <__assert_fail@plt+0xa6d0>
   1ba98:	cmp	r3, #0
   1ba9c:	bne	1baf4 <__assert_fail@plt+0xa6b0>
   1baa0:	mov	r0, r5
   1baa4:	bl	1b8b0 <__assert_fail@plt+0xa46c>
   1baa8:	subs	r5, r0, #0
   1baac:	beq	1bb0c <__assert_fail@plt+0xa6c8>
   1bab0:	ldrb	r0, [r4, #4]
   1bab4:	cmp	r0, #0
   1bab8:	addne	r0, r4, #5
   1babc:	bl	1b81c <__assert_fail@plt+0xa3d8>
   1bac0:	cmp	r0, #0
   1bac4:	beq	1bb20 <__assert_fail@plt+0xa6dc>
   1bac8:	bl	11330 <__errno_location@plt>
   1bacc:	cmp	r5, #1
   1bad0:	mov	r4, r0
   1bad4:	ldr	r6, [r0]
   1bad8:	beq	1bae4 <__assert_fail@plt+0xa6a0>
   1badc:	mov	r0, r5
   1bae0:	bl	1b83c <__assert_fail@plt+0xa3f8>
   1bae4:	mov	r5, #0
   1bae8:	str	r6, [r4]
   1baec:	mov	r0, r5
   1baf0:	pop	{r4, r5, r6, pc}
   1baf4:	mov	r1, r5
   1baf8:	add	r0, r4, #5
   1bafc:	bl	11120 <strcmp@plt>
   1bb00:	cmp	r0, #0
   1bb04:	bne	1baa0 <__assert_fail@plt+0xa65c>
   1bb08:	mov	r5, #1
   1bb0c:	mov	r0, r5
   1bb10:	pop	{r4, r5, r6, pc}
   1bb14:	cmp	r3, #0
   1bb18:	beq	1bb08 <__assert_fail@plt+0xa6c4>
   1bb1c:	b	1baa0 <__assert_fail@plt+0xa65c>
   1bb20:	bl	11210 <tzset@plt>
   1bb24:	mov	r0, r5
   1bb28:	pop	{r4, r5, r6, pc}
   1bb2c:	andeq	sp, r1, r0, lsl #21
   1bb30:	cmp	r0, #1
   1bb34:	bxeq	lr
   1bb38:	b	1b83c <__assert_fail@plt+0xa3f8>
   1bb3c:	subs	ip, r0, #0
   1bb40:	push	{r4, r5, r6, r7, r8, lr}
   1bb44:	mov	r5, r1
   1bb48:	beq	1bbc8 <__assert_fail@plt+0xa784>
   1bb4c:	mov	r4, r2
   1bb50:	mov	r6, ip
   1bb54:	bl	1ba7c <__assert_fail@plt+0xa638>
   1bb58:	subs	r7, r0, #0
   1bb5c:	beq	1bba8 <__assert_fail@plt+0xa764>
   1bb60:	mov	r0, r5
   1bb64:	mov	r1, r4
   1bb68:	bl	111e0 <localtime_r@plt>
   1bb6c:	cmp	r0, #0
   1bb70:	beq	1bb98 <__assert_fail@plt+0xa754>
   1bb74:	mov	r0, r6
   1bb78:	mov	r1, r4
   1bb7c:	bl	1b930 <__assert_fail@plt+0xa4ec>
   1bb80:	cmp	r0, #0
   1bb84:	beq	1bb98 <__assert_fail@plt+0xa754>
   1bb88:	cmp	r7, #1
   1bb8c:	bne	1bbb0 <__assert_fail@plt+0xa76c>
   1bb90:	mov	r0, r4
   1bb94:	pop	{r4, r5, r6, r7, r8, pc}
   1bb98:	cmp	r7, #1
   1bb9c:	beq	1bba8 <__assert_fail@plt+0xa764>
   1bba0:	mov	r0, r7
   1bba4:	bl	1b85c <__assert_fail@plt+0xa418>
   1bba8:	mov	r0, #0
   1bbac:	pop	{r4, r5, r6, r7, r8, pc}
   1bbb0:	mov	r0, r7
   1bbb4:	bl	1b85c <__assert_fail@plt+0xa418>
   1bbb8:	cmp	r0, #0
   1bbbc:	beq	1bba8 <__assert_fail@plt+0xa764>
   1bbc0:	mov	r0, r4
   1bbc4:	pop	{r4, r5, r6, r7, r8, pc}
   1bbc8:	mov	r0, r5
   1bbcc:	mov	r1, r2
   1bbd0:	pop	{r4, r5, r6, r7, r8, lr}
   1bbd4:	b	11114 <gmtime_r@plt>
   1bbd8:	push	{r4, r5, r6, r7, lr}
   1bbdc:	sub	sp, sp, #60	; 0x3c
   1bbe0:	ldr	r5, [pc, #312]	; 1bd20 <__assert_fail@plt+0xa8dc>
   1bbe4:	subs	r7, r0, #0
   1bbe8:	mov	r4, r1
   1bbec:	ldr	r3, [r5]
   1bbf0:	str	r3, [sp, #52]	; 0x34
   1bbf4:	beq	1bd08 <__assert_fail@plt+0xa8c4>
   1bbf8:	bl	1ba7c <__assert_fail@plt+0xa638>
   1bbfc:	subs	r6, r0, #0
   1bc00:	beq	1bd14 <__assert_fail@plt+0xa8d0>
   1bc04:	mov	r0, r4
   1bc08:	bl	11144 <mktime@plt>
   1bc0c:	cmn	r0, #1
   1bc10:	str	r0, [sp, #4]
   1bc14:	beq	1bc64 <__assert_fail@plt+0xa820>
   1bc18:	mov	r1, r4
   1bc1c:	mov	r0, r7
   1bc20:	bl	1b930 <__assert_fail@plt+0xa4ec>
   1bc24:	cmp	r0, #0
   1bc28:	mvneq	r3, #0
   1bc2c:	streq	r3, [sp, #4]
   1bc30:	cmp	r6, #1
   1bc34:	beq	1bc48 <__assert_fail@plt+0xa804>
   1bc38:	mov	r0, r6
   1bc3c:	bl	1b85c <__assert_fail@plt+0xa418>
   1bc40:	cmp	r0, #0
   1bc44:	beq	1bd14 <__assert_fail@plt+0xa8d0>
   1bc48:	ldr	r0, [sp, #4]
   1bc4c:	ldr	r2, [sp, #52]	; 0x34
   1bc50:	ldr	r3, [r5]
   1bc54:	cmp	r2, r3
   1bc58:	bne	1bd1c <__assert_fail@plt+0xa8d8>
   1bc5c:	add	sp, sp, #60	; 0x3c
   1bc60:	pop	{r4, r5, r6, r7, pc}
   1bc64:	add	r1, sp, #8
   1bc68:	add	r0, sp, #4
   1bc6c:	bl	111e0 <localtime_r@plt>
   1bc70:	cmp	r0, #0
   1bc74:	beq	1bc30 <__assert_fail@plt+0xa7ec>
   1bc78:	ldr	r0, [r4, #32]
   1bc7c:	ldr	r1, [sp, #40]	; 0x28
   1bc80:	clz	r2, r0
   1bc84:	clz	r3, r1
   1bc88:	lsr	r2, r2, #5
   1bc8c:	lsr	r3, r3, #5
   1bc90:	cmp	r2, r3
   1bc94:	beq	1bca4 <__assert_fail@plt+0xa860>
   1bc98:	cmp	r0, #0
   1bc9c:	cmpge	r1, #0
   1bca0:	bge	1bc30 <__assert_fail@plt+0xa7ec>
   1bca4:	ldr	r1, [sp, #24]
   1bca8:	ldr	r0, [sp, #28]
   1bcac:	ldr	r3, [r4, #16]
   1bcb0:	ldr	r2, [r4, #20]
   1bcb4:	eor	r3, r3, r1
   1bcb8:	eor	r2, r2, r0
   1bcbc:	ldr	r1, [r4, #12]
   1bcc0:	ldr	r0, [sp, #20]
   1bcc4:	orr	r3, r3, r2
   1bcc8:	eor	r1, r1, r0
   1bccc:	ldr	r2, [r4, #8]
   1bcd0:	ldr	r0, [sp, #16]
   1bcd4:	orr	r3, r3, r1
   1bcd8:	eor	r2, r2, r0
   1bcdc:	ldr	r1, [r4, #4]
   1bce0:	ldr	r0, [sp, #12]
   1bce4:	orr	r3, r3, r2
   1bce8:	eor	r1, r1, r0
   1bcec:	ldr	r2, [r4]
   1bcf0:	ldr	r0, [sp, #8]
   1bcf4:	orr	r3, r3, r1
   1bcf8:	eor	r2, r2, r0
   1bcfc:	orrs	r3, r3, r2
   1bd00:	beq	1bc18 <__assert_fail@plt+0xa7d4>
   1bd04:	b	1bc30 <__assert_fail@plt+0xa7ec>
   1bd08:	mov	r0, r1
   1bd0c:	bl	113e4 <timegm@plt>
   1bd10:	b	1bc4c <__assert_fail@plt+0xa808>
   1bd14:	mvn	r0, #0
   1bd18:	b	1bc4c <__assert_fail@plt+0xa808>
   1bd1c:	bl	111c8 <__stack_chk_fail@plt>
   1bd20:	andeq	lr, r2, r8, lsl #30
   1bd24:	push	{r4, r5, r6, lr}
   1bd28:	mov	r4, r0
   1bd2c:	bl	11258 <__fpending@plt>
   1bd30:	ldr	r5, [r4]
   1bd34:	and	r5, r5, #32
   1bd38:	mov	r6, r0
   1bd3c:	mov	r0, r4
   1bd40:	bl	1b4b0 <__assert_fail@plt+0xa06c>
   1bd44:	cmp	r5, #0
   1bd48:	mov	r4, r0
   1bd4c:	bne	1bd78 <__assert_fail@plt+0xa934>
   1bd50:	cmp	r0, #0
   1bd54:	beq	1bd70 <__assert_fail@plt+0xa92c>
   1bd58:	cmp	r6, #0
   1bd5c:	bne	1bd90 <__assert_fail@plt+0xa94c>
   1bd60:	bl	11330 <__errno_location@plt>
   1bd64:	ldr	r4, [r0]
   1bd68:	subs	r4, r4, #9
   1bd6c:	mvnne	r4, #0
   1bd70:	mov	r0, r4
   1bd74:	pop	{r4, r5, r6, pc}
   1bd78:	cmp	r0, #0
   1bd7c:	bne	1bd90 <__assert_fail@plt+0xa94c>
   1bd80:	bl	11330 <__errno_location@plt>
   1bd84:	str	r4, [r0]
   1bd88:	mvn	r4, #0
   1bd8c:	b	1bd70 <__assert_fail@plt+0xa92c>
   1bd90:	mvn	r4, #0
   1bd94:	b	1bd70 <__assert_fail@plt+0xa92c>
   1bd98:	push	{r4, lr}
   1bd9c:	mov	r0, #14
   1bda0:	bl	113d8 <nl_langinfo@plt>
   1bda4:	cmp	r0, #0
   1bda8:	beq	1bdc0 <__assert_fail@plt+0xa97c>
   1bdac:	ldrb	r2, [r0]
   1bdb0:	ldr	r3, [pc, #16]	; 1bdc8 <__assert_fail@plt+0xa984>
   1bdb4:	cmp	r2, #0
   1bdb8:	moveq	r0, r3
   1bdbc:	pop	{r4, pc}
   1bdc0:	ldr	r0, [pc]	; 1bdc8 <__assert_fail@plt+0xa984>
   1bdc4:	pop	{r4, pc}
   1bdc8:	andeq	lr, r1, r0, lsl r2
   1bdcc:	subs	r2, r1, #1
   1bdd0:	bxeq	lr
   1bdd4:	bcc	1bfac <__assert_fail@plt+0xab68>
   1bdd8:	cmp	r0, r1
   1bddc:	bls	1bf90 <__assert_fail@plt+0xab4c>
   1bde0:	tst	r1, r2
   1bde4:	beq	1bf9c <__assert_fail@plt+0xab58>
   1bde8:	clz	r3, r0
   1bdec:	clz	r2, r1
   1bdf0:	sub	r3, r2, r3
   1bdf4:	rsbs	r3, r3, #31
   1bdf8:	addne	r3, r3, r3, lsl #1
   1bdfc:	mov	r2, #0
   1be00:	addne	pc, pc, r3, lsl #2
   1be04:	nop			; (mov r0, r0)
   1be08:	cmp	r0, r1, lsl #31
   1be0c:	adc	r2, r2, r2
   1be10:	subcs	r0, r0, r1, lsl #31
   1be14:	cmp	r0, r1, lsl #30
   1be18:	adc	r2, r2, r2
   1be1c:	subcs	r0, r0, r1, lsl #30
   1be20:	cmp	r0, r1, lsl #29
   1be24:	adc	r2, r2, r2
   1be28:	subcs	r0, r0, r1, lsl #29
   1be2c:	cmp	r0, r1, lsl #28
   1be30:	adc	r2, r2, r2
   1be34:	subcs	r0, r0, r1, lsl #28
   1be38:	cmp	r0, r1, lsl #27
   1be3c:	adc	r2, r2, r2
   1be40:	subcs	r0, r0, r1, lsl #27
   1be44:	cmp	r0, r1, lsl #26
   1be48:	adc	r2, r2, r2
   1be4c:	subcs	r0, r0, r1, lsl #26
   1be50:	cmp	r0, r1, lsl #25
   1be54:	adc	r2, r2, r2
   1be58:	subcs	r0, r0, r1, lsl #25
   1be5c:	cmp	r0, r1, lsl #24
   1be60:	adc	r2, r2, r2
   1be64:	subcs	r0, r0, r1, lsl #24
   1be68:	cmp	r0, r1, lsl #23
   1be6c:	adc	r2, r2, r2
   1be70:	subcs	r0, r0, r1, lsl #23
   1be74:	cmp	r0, r1, lsl #22
   1be78:	adc	r2, r2, r2
   1be7c:	subcs	r0, r0, r1, lsl #22
   1be80:	cmp	r0, r1, lsl #21
   1be84:	adc	r2, r2, r2
   1be88:	subcs	r0, r0, r1, lsl #21
   1be8c:	cmp	r0, r1, lsl #20
   1be90:	adc	r2, r2, r2
   1be94:	subcs	r0, r0, r1, lsl #20
   1be98:	cmp	r0, r1, lsl #19
   1be9c:	adc	r2, r2, r2
   1bea0:	subcs	r0, r0, r1, lsl #19
   1bea4:	cmp	r0, r1, lsl #18
   1bea8:	adc	r2, r2, r2
   1beac:	subcs	r0, r0, r1, lsl #18
   1beb0:	cmp	r0, r1, lsl #17
   1beb4:	adc	r2, r2, r2
   1beb8:	subcs	r0, r0, r1, lsl #17
   1bebc:	cmp	r0, r1, lsl #16
   1bec0:	adc	r2, r2, r2
   1bec4:	subcs	r0, r0, r1, lsl #16
   1bec8:	cmp	r0, r1, lsl #15
   1becc:	adc	r2, r2, r2
   1bed0:	subcs	r0, r0, r1, lsl #15
   1bed4:	cmp	r0, r1, lsl #14
   1bed8:	adc	r2, r2, r2
   1bedc:	subcs	r0, r0, r1, lsl #14
   1bee0:	cmp	r0, r1, lsl #13
   1bee4:	adc	r2, r2, r2
   1bee8:	subcs	r0, r0, r1, lsl #13
   1beec:	cmp	r0, r1, lsl #12
   1bef0:	adc	r2, r2, r2
   1bef4:	subcs	r0, r0, r1, lsl #12
   1bef8:	cmp	r0, r1, lsl #11
   1befc:	adc	r2, r2, r2
   1bf00:	subcs	r0, r0, r1, lsl #11
   1bf04:	cmp	r0, r1, lsl #10
   1bf08:	adc	r2, r2, r2
   1bf0c:	subcs	r0, r0, r1, lsl #10
   1bf10:	cmp	r0, r1, lsl #9
   1bf14:	adc	r2, r2, r2
   1bf18:	subcs	r0, r0, r1, lsl #9
   1bf1c:	cmp	r0, r1, lsl #8
   1bf20:	adc	r2, r2, r2
   1bf24:	subcs	r0, r0, r1, lsl #8
   1bf28:	cmp	r0, r1, lsl #7
   1bf2c:	adc	r2, r2, r2
   1bf30:	subcs	r0, r0, r1, lsl #7
   1bf34:	cmp	r0, r1, lsl #6
   1bf38:	adc	r2, r2, r2
   1bf3c:	subcs	r0, r0, r1, lsl #6
   1bf40:	cmp	r0, r1, lsl #5
   1bf44:	adc	r2, r2, r2
   1bf48:	subcs	r0, r0, r1, lsl #5
   1bf4c:	cmp	r0, r1, lsl #4
   1bf50:	adc	r2, r2, r2
   1bf54:	subcs	r0, r0, r1, lsl #4
   1bf58:	cmp	r0, r1, lsl #3
   1bf5c:	adc	r2, r2, r2
   1bf60:	subcs	r0, r0, r1, lsl #3
   1bf64:	cmp	r0, r1, lsl #2
   1bf68:	adc	r2, r2, r2
   1bf6c:	subcs	r0, r0, r1, lsl #2
   1bf70:	cmp	r0, r1, lsl #1
   1bf74:	adc	r2, r2, r2
   1bf78:	subcs	r0, r0, r1, lsl #1
   1bf7c:	cmp	r0, r1
   1bf80:	adc	r2, r2, r2
   1bf84:	subcs	r0, r0, r1
   1bf88:	mov	r0, r2
   1bf8c:	bx	lr
   1bf90:	moveq	r0, #1
   1bf94:	movne	r0, #0
   1bf98:	bx	lr
   1bf9c:	clz	r2, r1
   1bfa0:	rsb	r2, r2, #31
   1bfa4:	lsr	r0, r0, r2
   1bfa8:	bx	lr
   1bfac:	cmp	r0, #0
   1bfb0:	mvnne	r0, #0
   1bfb4:	b	1c328 <__assert_fail@plt+0xaee4>
   1bfb8:	cmp	r1, #0
   1bfbc:	beq	1bfac <__assert_fail@plt+0xab68>
   1bfc0:	push	{r0, r1, lr}
   1bfc4:	bl	1bdcc <__assert_fail@plt+0xa988>
   1bfc8:	pop	{r1, r2, lr}
   1bfcc:	mul	r3, r2, r0
   1bfd0:	sub	r1, r1, r3
   1bfd4:	bx	lr
   1bfd8:	cmp	r1, #0
   1bfdc:	beq	1c1e8 <__assert_fail@plt+0xada4>
   1bfe0:	eor	ip, r0, r1
   1bfe4:	rsbmi	r1, r1, #0
   1bfe8:	subs	r2, r1, #1
   1bfec:	beq	1c1b4 <__assert_fail@plt+0xad70>
   1bff0:	movs	r3, r0
   1bff4:	rsbmi	r3, r0, #0
   1bff8:	cmp	r3, r1
   1bffc:	bls	1c1c0 <__assert_fail@plt+0xad7c>
   1c000:	tst	r1, r2
   1c004:	beq	1c1d0 <__assert_fail@plt+0xad8c>
   1c008:	clz	r2, r3
   1c00c:	clz	r0, r1
   1c010:	sub	r2, r0, r2
   1c014:	rsbs	r2, r2, #31
   1c018:	addne	r2, r2, r2, lsl #1
   1c01c:	mov	r0, #0
   1c020:	addne	pc, pc, r2, lsl #2
   1c024:	nop			; (mov r0, r0)
   1c028:	cmp	r3, r1, lsl #31
   1c02c:	adc	r0, r0, r0
   1c030:	subcs	r3, r3, r1, lsl #31
   1c034:	cmp	r3, r1, lsl #30
   1c038:	adc	r0, r0, r0
   1c03c:	subcs	r3, r3, r1, lsl #30
   1c040:	cmp	r3, r1, lsl #29
   1c044:	adc	r0, r0, r0
   1c048:	subcs	r3, r3, r1, lsl #29
   1c04c:	cmp	r3, r1, lsl #28
   1c050:	adc	r0, r0, r0
   1c054:	subcs	r3, r3, r1, lsl #28
   1c058:	cmp	r3, r1, lsl #27
   1c05c:	adc	r0, r0, r0
   1c060:	subcs	r3, r3, r1, lsl #27
   1c064:	cmp	r3, r1, lsl #26
   1c068:	adc	r0, r0, r0
   1c06c:	subcs	r3, r3, r1, lsl #26
   1c070:	cmp	r3, r1, lsl #25
   1c074:	adc	r0, r0, r0
   1c078:	subcs	r3, r3, r1, lsl #25
   1c07c:	cmp	r3, r1, lsl #24
   1c080:	adc	r0, r0, r0
   1c084:	subcs	r3, r3, r1, lsl #24
   1c088:	cmp	r3, r1, lsl #23
   1c08c:	adc	r0, r0, r0
   1c090:	subcs	r3, r3, r1, lsl #23
   1c094:	cmp	r3, r1, lsl #22
   1c098:	adc	r0, r0, r0
   1c09c:	subcs	r3, r3, r1, lsl #22
   1c0a0:	cmp	r3, r1, lsl #21
   1c0a4:	adc	r0, r0, r0
   1c0a8:	subcs	r3, r3, r1, lsl #21
   1c0ac:	cmp	r3, r1, lsl #20
   1c0b0:	adc	r0, r0, r0
   1c0b4:	subcs	r3, r3, r1, lsl #20
   1c0b8:	cmp	r3, r1, lsl #19
   1c0bc:	adc	r0, r0, r0
   1c0c0:	subcs	r3, r3, r1, lsl #19
   1c0c4:	cmp	r3, r1, lsl #18
   1c0c8:	adc	r0, r0, r0
   1c0cc:	subcs	r3, r3, r1, lsl #18
   1c0d0:	cmp	r3, r1, lsl #17
   1c0d4:	adc	r0, r0, r0
   1c0d8:	subcs	r3, r3, r1, lsl #17
   1c0dc:	cmp	r3, r1, lsl #16
   1c0e0:	adc	r0, r0, r0
   1c0e4:	subcs	r3, r3, r1, lsl #16
   1c0e8:	cmp	r3, r1, lsl #15
   1c0ec:	adc	r0, r0, r0
   1c0f0:	subcs	r3, r3, r1, lsl #15
   1c0f4:	cmp	r3, r1, lsl #14
   1c0f8:	adc	r0, r0, r0
   1c0fc:	subcs	r3, r3, r1, lsl #14
   1c100:	cmp	r3, r1, lsl #13
   1c104:	adc	r0, r0, r0
   1c108:	subcs	r3, r3, r1, lsl #13
   1c10c:	cmp	r3, r1, lsl #12
   1c110:	adc	r0, r0, r0
   1c114:	subcs	r3, r3, r1, lsl #12
   1c118:	cmp	r3, r1, lsl #11
   1c11c:	adc	r0, r0, r0
   1c120:	subcs	r3, r3, r1, lsl #11
   1c124:	cmp	r3, r1, lsl #10
   1c128:	adc	r0, r0, r0
   1c12c:	subcs	r3, r3, r1, lsl #10
   1c130:	cmp	r3, r1, lsl #9
   1c134:	adc	r0, r0, r0
   1c138:	subcs	r3, r3, r1, lsl #9
   1c13c:	cmp	r3, r1, lsl #8
   1c140:	adc	r0, r0, r0
   1c144:	subcs	r3, r3, r1, lsl #8
   1c148:	cmp	r3, r1, lsl #7
   1c14c:	adc	r0, r0, r0
   1c150:	subcs	r3, r3, r1, lsl #7
   1c154:	cmp	r3, r1, lsl #6
   1c158:	adc	r0, r0, r0
   1c15c:	subcs	r3, r3, r1, lsl #6
   1c160:	cmp	r3, r1, lsl #5
   1c164:	adc	r0, r0, r0
   1c168:	subcs	r3, r3, r1, lsl #5
   1c16c:	cmp	r3, r1, lsl #4
   1c170:	adc	r0, r0, r0
   1c174:	subcs	r3, r3, r1, lsl #4
   1c178:	cmp	r3, r1, lsl #3
   1c17c:	adc	r0, r0, r0
   1c180:	subcs	r3, r3, r1, lsl #3
   1c184:	cmp	r3, r1, lsl #2
   1c188:	adc	r0, r0, r0
   1c18c:	subcs	r3, r3, r1, lsl #2
   1c190:	cmp	r3, r1, lsl #1
   1c194:	adc	r0, r0, r0
   1c198:	subcs	r3, r3, r1, lsl #1
   1c19c:	cmp	r3, r1
   1c1a0:	adc	r0, r0, r0
   1c1a4:	subcs	r3, r3, r1
   1c1a8:	cmp	ip, #0
   1c1ac:	rsbmi	r0, r0, #0
   1c1b0:	bx	lr
   1c1b4:	teq	ip, r0
   1c1b8:	rsbmi	r0, r0, #0
   1c1bc:	bx	lr
   1c1c0:	movcc	r0, #0
   1c1c4:	asreq	r0, ip, #31
   1c1c8:	orreq	r0, r0, #1
   1c1cc:	bx	lr
   1c1d0:	clz	r2, r1
   1c1d4:	rsb	r2, r2, #31
   1c1d8:	cmp	ip, #0
   1c1dc:	lsr	r0, r3, r2
   1c1e0:	rsbmi	r0, r0, #0
   1c1e4:	bx	lr
   1c1e8:	cmp	r0, #0
   1c1ec:	mvngt	r0, #-2147483648	; 0x80000000
   1c1f0:	movlt	r0, #-2147483648	; 0x80000000
   1c1f4:	b	1c328 <__assert_fail@plt+0xaee4>
   1c1f8:	cmp	r1, #0
   1c1fc:	beq	1c1e8 <__assert_fail@plt+0xada4>
   1c200:	push	{r0, r1, lr}
   1c204:	bl	1bfe0 <__assert_fail@plt+0xab9c>
   1c208:	pop	{r1, r2, lr}
   1c20c:	mul	r3, r2, r0
   1c210:	sub	r1, r1, r3
   1c214:	bx	lr
   1c218:	cmp	r3, #0
   1c21c:	cmpeq	r2, #0
   1c220:	bne	1c244 <__assert_fail@plt+0xae00>
   1c224:	cmp	r1, #0
   1c228:	movlt	r1, #-2147483648	; 0x80000000
   1c22c:	movlt	r0, #0
   1c230:	blt	1c240 <__assert_fail@plt+0xadfc>
   1c234:	cmpeq	r0, #0
   1c238:	mvnne	r1, #-2147483648	; 0x80000000
   1c23c:	mvnne	r0, #0
   1c240:	b	1c328 <__assert_fail@plt+0xaee4>
   1c244:	sub	sp, sp, #8
   1c248:	push	{sp, lr}
   1c24c:	cmp	r1, #0
   1c250:	blt	1c270 <__assert_fail@plt+0xae2c>
   1c254:	cmp	r3, #0
   1c258:	blt	1c2a4 <__assert_fail@plt+0xae60>
   1c25c:	bl	1c338 <__assert_fail@plt+0xaef4>
   1c260:	ldr	lr, [sp, #4]
   1c264:	add	sp, sp, #8
   1c268:	pop	{r2, r3}
   1c26c:	bx	lr
   1c270:	rsbs	r0, r0, #0
   1c274:	sbc	r1, r1, r1, lsl #1
   1c278:	cmp	r3, #0
   1c27c:	blt	1c2c8 <__assert_fail@plt+0xae84>
   1c280:	bl	1c338 <__assert_fail@plt+0xaef4>
   1c284:	ldr	lr, [sp, #4]
   1c288:	add	sp, sp, #8
   1c28c:	pop	{r2, r3}
   1c290:	rsbs	r0, r0, #0
   1c294:	sbc	r1, r1, r1, lsl #1
   1c298:	rsbs	r2, r2, #0
   1c29c:	sbc	r3, r3, r3, lsl #1
   1c2a0:	bx	lr
   1c2a4:	rsbs	r2, r2, #0
   1c2a8:	sbc	r3, r3, r3, lsl #1
   1c2ac:	bl	1c338 <__assert_fail@plt+0xaef4>
   1c2b0:	ldr	lr, [sp, #4]
   1c2b4:	add	sp, sp, #8
   1c2b8:	pop	{r2, r3}
   1c2bc:	rsbs	r0, r0, #0
   1c2c0:	sbc	r1, r1, r1, lsl #1
   1c2c4:	bx	lr
   1c2c8:	rsbs	r2, r2, #0
   1c2cc:	sbc	r3, r3, r3, lsl #1
   1c2d0:	bl	1c338 <__assert_fail@plt+0xaef4>
   1c2d4:	ldr	lr, [sp, #4]
   1c2d8:	add	sp, sp, #8
   1c2dc:	pop	{r2, r3}
   1c2e0:	rsbs	r2, r2, #0
   1c2e4:	sbc	r3, r3, r3, lsl #1
   1c2e8:	bx	lr
   1c2ec:	cmp	r3, #0
   1c2f0:	cmpeq	r2, #0
   1c2f4:	bne	1c30c <__assert_fail@plt+0xaec8>
   1c2f8:	cmp	r1, #0
   1c2fc:	cmpeq	r0, #0
   1c300:	mvnne	r1, #0
   1c304:	mvnne	r0, #0
   1c308:	b	1c328 <__assert_fail@plt+0xaee4>
   1c30c:	sub	sp, sp, #8
   1c310:	push	{sp, lr}
   1c314:	bl	1c338 <__assert_fail@plt+0xaef4>
   1c318:	ldr	lr, [sp, #4]
   1c31c:	add	sp, sp, #8
   1c320:	pop	{r2, r3}
   1c324:	bx	lr
   1c328:	push	{r1, lr}
   1c32c:	mov	r0, #8
   1c330:	bl	11108 <raise@plt>
   1c334:	pop	{r1, pc}
   1c338:	cmp	r1, r3
   1c33c:	cmpeq	r0, r2
   1c340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c344:	mov	r4, r0
   1c348:	movcc	r0, #0
   1c34c:	mov	r5, r1
   1c350:	ldr	lr, [sp, #36]	; 0x24
   1c354:	movcc	r1, r0
   1c358:	bcc	1c454 <__assert_fail@plt+0xb010>
   1c35c:	cmp	r3, #0
   1c360:	clzeq	ip, r2
   1c364:	clzne	ip, r3
   1c368:	addeq	ip, ip, #32
   1c36c:	cmp	r5, #0
   1c370:	clzeq	r1, r4
   1c374:	addeq	r1, r1, #32
   1c378:	clzne	r1, r5
   1c37c:	sub	ip, ip, r1
   1c380:	sub	sl, ip, #32
   1c384:	lsl	r9, r3, ip
   1c388:	rsb	fp, ip, #32
   1c38c:	orr	r9, r9, r2, lsl sl
   1c390:	orr	r9, r9, r2, lsr fp
   1c394:	lsl	r8, r2, ip
   1c398:	cmp	r5, r9
   1c39c:	cmpeq	r4, r8
   1c3a0:	movcc	r0, #0
   1c3a4:	movcc	r1, r0
   1c3a8:	bcc	1c3c4 <__assert_fail@plt+0xaf80>
   1c3ac:	mov	r0, #1
   1c3b0:	subs	r4, r4, r8
   1c3b4:	lsl	r1, r0, sl
   1c3b8:	orr	r1, r1, r0, lsr fp
   1c3bc:	lsl	r0, r0, ip
   1c3c0:	sbc	r5, r5, r9
   1c3c4:	cmp	ip, #0
   1c3c8:	beq	1c454 <__assert_fail@plt+0xb010>
   1c3cc:	lsr	r6, r8, #1
   1c3d0:	orr	r6, r6, r9, lsl #31
   1c3d4:	lsr	r7, r9, #1
   1c3d8:	mov	r2, ip
   1c3dc:	b	1c400 <__assert_fail@plt+0xafbc>
   1c3e0:	subs	r3, r4, r6
   1c3e4:	sbc	r8, r5, r7
   1c3e8:	adds	r3, r3, r3
   1c3ec:	adc	r8, r8, r8
   1c3f0:	adds	r4, r3, #1
   1c3f4:	adc	r5, r8, #0
   1c3f8:	subs	r2, r2, #1
   1c3fc:	beq	1c41c <__assert_fail@plt+0xafd8>
   1c400:	cmp	r5, r7
   1c404:	cmpeq	r4, r6
   1c408:	bcs	1c3e0 <__assert_fail@plt+0xaf9c>
   1c40c:	adds	r4, r4, r4
   1c410:	adc	r5, r5, r5
   1c414:	subs	r2, r2, #1
   1c418:	bne	1c400 <__assert_fail@plt+0xafbc>
   1c41c:	lsr	r3, r4, ip
   1c420:	orr	r3, r3, r5, lsl fp
   1c424:	lsr	r2, r5, ip
   1c428:	orr	r3, r3, r5, lsr sl
   1c42c:	adds	r0, r0, r4
   1c430:	mov	r4, r3
   1c434:	lsl	r3, r2, ip
   1c438:	orr	r3, r3, r4, lsl sl
   1c43c:	lsl	ip, r4, ip
   1c440:	orr	r3, r3, r4, lsr fp
   1c444:	adc	r1, r1, r5
   1c448:	subs	r0, r0, ip
   1c44c:	mov	r5, r2
   1c450:	sbc	r1, r1, r3
   1c454:	cmp	lr, #0
   1c458:	strdne	r4, [lr]
   1c45c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c460:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c464:	mov	r7, r0
   1c468:	ldr	r6, [pc, #72]	; 1c4b8 <__assert_fail@plt+0xb074>
   1c46c:	ldr	r5, [pc, #72]	; 1c4bc <__assert_fail@plt+0xb078>
   1c470:	add	r6, pc, r6
   1c474:	add	r5, pc, r5
   1c478:	sub	r6, r6, r5
   1c47c:	mov	r8, r1
   1c480:	mov	r9, r2
   1c484:	bl	110c4 <fdopen@plt-0x20>
   1c488:	asrs	r6, r6, #2
   1c48c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c490:	mov	r4, #0
   1c494:	add	r4, r4, #1
   1c498:	ldr	r3, [r5], #4
   1c49c:	mov	r2, r9
   1c4a0:	mov	r1, r8
   1c4a4:	mov	r0, r7
   1c4a8:	blx	r3
   1c4ac:	cmp	r6, r4
   1c4b0:	bne	1c494 <__assert_fail@plt+0xb050>
   1c4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c4b8:	andeq	r2, r1, ip, lsl #21
   1c4bc:	andeq	r2, r1, r4, lsl #21
   1c4c0:	bx	lr
   1c4c4:	ldr	r3, [pc, #12]	; 1c4d8 <__assert_fail@plt+0xb094>
   1c4c8:	mov	r1, #0
   1c4cc:	add	r3, pc, r3
   1c4d0:	ldr	r2, [r3]
   1c4d4:	b	11348 <__cxa_atexit@plt>
   1c4d8:	andeq	r2, r1, r8, ror #24

Disassembly of section .fini:

0001c4dc <.fini>:
   1c4dc:	push	{r3, lr}
   1c4e0:	pop	{r3, pc}
