
raspbian-preinstalled/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c7c <.init>:
   10c7c:	push	{r3, lr}
   10c80:	bl	11a44 <__assert_fail@plt+0xb50>
   10c84:	pop	{r3, pc}

Disassembly of section .plt:

00010c88 <calloc@plt-0x14>:
   10c88:	push	{lr}		; (str lr, [sp, #-4]!)
   10c8c:	ldr	lr, [pc, #4]	; 10c98 <calloc@plt-0x4>
   10c90:	add	lr, pc, lr
   10c94:	ldr	pc, [lr, #8]!
   10c98:	andeq	r6, r1, r8, ror #6

00010c9c <calloc@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #872]!	; 0x368

00010ca8 <fputs_unlocked@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #864]!	; 0x360

00010cb4 <raise@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #856]!	; 0x358

00010cc0 <strcmp@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #848]!	; 0x350

00010ccc <fflush@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #840]!	; 0x348

00010cd8 <free@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #832]!	; 0x340

00010ce4 <_exit@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #824]!	; 0x338

00010cf0 <memcpy@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #816]!	; 0x330

00010cfc <mbsinit@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #808]!	; 0x328

00010d08 <ftruncate64@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #800]!	; 0x320

00010d14 <memcmp@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #792]!	; 0x318

00010d20 <dcgettext@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #784]!	; 0x310

00010d2c <__stack_chk_fail@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #776]!	; 0x308

00010d38 <realloc@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #768]!	; 0x300

00010d44 <textdomain@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d50 <iswprint@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #752]!	; 0x2f0

00010d5c <__fxstat64@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #744]!	; 0x2e8

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #736]!	; 0x2e0

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #720]!	; 0x2d0

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #712]!	; 0x2c8

00010d98 <mbrtowc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #704]!	; 0x2c0

00010da4 <error@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #696]!	; 0x2b8

00010db0 <open64@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dbc <malloc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc8 <__libc_start_main@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd4 <__freading@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #664]!	; 0x298

00010de0 <__gmon_start__@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #656]!	; 0x290

00010dec <getopt_long@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #648]!	; 0x288

00010df8 <__ctype_b_loc@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #640]!	; 0x280

00010e04 <exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #632]!	; 0x278

00010e10 <strlen@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #624]!	; 0x270

00010e1c <strchr@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #616]!	; 0x268

00010e28 <__errno_location@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #608]!	; 0x260

00010e34 <__cxa_atexit@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #600]!	; 0x258

00010e40 <memset@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #592]!	; 0x250

00010e4c <__printf_chk@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #584]!	; 0x248

00010e58 <fileno@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #576]!	; 0x240

00010e64 <__fprintf_chk@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #568]!	; 0x238

00010e70 <fclose@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #560]!	; 0x230

00010e7c <fseeko64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #552]!	; 0x228

00010e88 <setlocale@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #544]!	; 0x220

00010e94 <strrchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #536]!	; 0x218

00010ea0 <nl_langinfo@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #528]!	; 0x210

00010eac <__strtoll_internal@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #520]!	; 0x208

00010eb8 <bindtextdomain@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #512]!	; 0x200

00010ec4 <__xstat64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ed0 <strncmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #496]!	; 0x1f0

00010edc <abort@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee8 <close@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef4 <__assert_fail@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #472]!	; 0x1d8

Disassembly of section .text:

00010f00 <.text>:
   10f00:	ldr	r3, [pc, #2660]	; 1196c <__assert_fail@plt+0xa78>
   10f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f08:	sub	sp, sp, #180	; 0xb4
   10f0c:	ldr	r3, [r3]
   10f10:	mov	r7, r0
   10f14:	ldr	r0, [r1]
   10f18:	str	r3, [sp, #172]	; 0xac
   10f1c:	mov	r6, r1
   10f20:	bl	11f78 <__assert_fail@plt+0x1084>
   10f24:	ldr	r1, [pc, #2628]	; 11970 <__assert_fail@plt+0xa7c>
   10f28:	mov	r0, #6
   10f2c:	bl	10e88 <setlocale@plt>
   10f30:	ldr	r9, [pc, #2620]	; 11974 <__assert_fail@plt+0xa80>
   10f34:	ldr	r1, [pc, #2620]	; 11978 <__assert_fail@plt+0xa84>
   10f38:	ldr	r0, [pc, #2620]	; 1197c <__assert_fail@plt+0xa88>
   10f3c:	ldr	r8, [pc, #2620]	; 11980 <__assert_fail@plt+0xa8c>
   10f40:	ldr	sl, [pc, #2620]	; 11984 <__assert_fail@plt+0xa90>
   10f44:	ldr	r5, [pc, #2620]	; 11988 <__assert_fail@plt+0xa94>
   10f48:	bl	10eb8 <bindtextdomain@plt>
   10f4c:	ldr	r0, [pc, #2600]	; 1197c <__assert_fail@plt+0xa88>
   10f50:	bl	10d44 <textdomain@plt>
   10f54:	mov	fp, #0
   10f58:	ldr	r0, [pc, #2604]	; 1198c <__assert_fail@plt+0xa98>
   10f5c:	bl	15e10 <__assert_fail@plt+0x4f1c>
   10f60:	str	fp, [sp, #28]
   10f64:	mov	r4, #0
   10f68:	str	r4, [sp]
   10f6c:	mov	r3, r9
   10f70:	mov	r2, r8
   10f74:	mov	r1, r6
   10f78:	mov	r0, r7
   10f7c:	bl	10dec <getopt_long@plt>
   10f80:	cmn	r0, #1
   10f84:	beq	111f0 <__assert_fail@plt+0x2fc>
   10f88:	cmp	r0, #99	; 0x63
   10f8c:	beq	11140 <__assert_fail@plt+0x24c>
   10f90:	ble	110ec <__assert_fail@plt+0x1f8>
   10f94:	cmp	r0, #114	; 0x72
   10f98:	beq	11134 <__assert_fail@plt+0x240>
   10f9c:	cmp	r0, #115	; 0x73
   10fa0:	bne	110dc <__assert_fail@plt+0x1e8>
   10fa4:	bl	10df8 <__ctype_b_loc@plt>
   10fa8:	ldr	r3, [r5]
   10fac:	ldr	r0, [r0]
   10fb0:	b	10fb8 <__assert_fail@plt+0xc4>
   10fb4:	str	r3, [r5]
   10fb8:	ldrb	r2, [r3]
   10fbc:	mov	r1, r3
   10fc0:	add	r3, r3, #1
   10fc4:	lsl	ip, r2, #1
   10fc8:	ldrh	ip, [r0, ip]
   10fcc:	tst	ip, #8192	; 0x2000
   10fd0:	bne	10fb4 <__assert_fail@plt+0xc0>
   10fd4:	sub	r2, r2, #37	; 0x25
   10fd8:	cmp	r2, #25
   10fdc:	ldrls	pc, [pc, r2, lsl #2]
   10fe0:	b	11058 <__assert_fail@plt+0x164>
   10fe4:	ldrdeq	r1, [r1], -r0
   10fe8:	andeq	r1, r1, r8, asr r0
   10fec:	andeq	r1, r1, r8, asr r0
   10ff0:	andeq	r1, r1, r8, asr r0
   10ff4:	andeq	r1, r1, r8, asr r0
   10ff8:	andeq	r1, r1, r8, asr r0
   10ffc:	andeq	r1, r1, r8, asr r0
   11000:	andeq	r1, r1, r8, asr r0
   11004:	andeq	r1, r1, r8, asr r0
   11008:	andeq	r1, r1, r8, asr r0
   1100c:	andeq	r1, r1, r0, ror #3
   11010:	andeq	r1, r1, r8, asr r0
   11014:	andeq	r1, r1, r8, asr r0
   11018:	andeq	r1, r1, r8, asr r0
   1101c:	andeq	r1, r1, r8, asr r0
   11020:	andeq	r1, r1, r8, asr r0
   11024:	andeq	r1, r1, r8, asr r0
   11028:	andeq	r1, r1, r8, asr r0
   1102c:	andeq	r1, r1, r8, asr r0
   11030:	andeq	r1, r1, r8, asr r0
   11034:	andeq	r1, r1, r8, asr r0
   11038:	andeq	r1, r1, r8, asr r0
   1103c:	andeq	r1, r1, r8, asr r0
   11040:	andeq	r1, r1, ip, asr #32
   11044:	andeq	r1, r1, r8, asr r0
   11048:	andeq	r1, r1, r0, asr #3
   1104c:	mov	fp, #3
   11050:	add	r1, r1, #1
   11054:	str	r1, [r5]
   11058:	ldr	r4, [r5]
   1105c:	b	11068 <__assert_fail@plt+0x174>
   11060:	add	r4, r4, #1
   11064:	str	r4, [r5]
   11068:	ldrb	r3, [r4]
   1106c:	lsl	r2, r3, #1
   11070:	ldrh	r2, [r0, r2]
   11074:	tst	r2, #8192	; 0x2000
   11078:	bne	11060 <__assert_fail@plt+0x16c>
   1107c:	sub	r3, r3, #43	; 0x2b
   11080:	ands	r3, r3, #253	; 0xfd
   11084:	mov	r2, #5
   11088:	bne	11158 <__assert_fail@plt+0x264>
   1108c:	cmp	fp, #0
   11090:	bne	11888 <__assert_fail@plt+0x994>
   11094:	ldr	r1, [pc, #2292]	; 11990 <__assert_fail@plt+0xa9c>
   11098:	mov	r0, fp
   1109c:	bl	10d20 <dcgettext@plt>
   110a0:	mvn	r2, #0
   110a4:	mvn	r3, #-2147483648	; 0x80000000
   110a8:	ldr	r1, [pc, #2276]	; 11994 <__assert_fail@plt+0xaa0>
   110ac:	strd	r2, [sp]
   110b0:	str	fp, [sp, #16]
   110b4:	str	r1, [sp, #8]
   110b8:	mov	r2, #0
   110bc:	mov	r3, #-2147483648	; 0x80000000
   110c0:	mov	fp, #1
   110c4:	str	fp, [sp, #28]
   110c8:	str	r0, [sp, #12]
   110cc:	mov	r0, r4
   110d0:	bl	14b48 <__assert_fail@plt+0x3c54>
   110d4:	strd	r0, [sp, #32]
   110d8:	b	10f64 <__assert_fail@plt+0x70>
   110dc:	cmp	r0, #111	; 0x6f
   110e0:	beq	1114c <__assert_fail@plt+0x258>
   110e4:	mov	r0, #1
   110e8:	bl	11af8 <__assert_fail@plt+0xc04>
   110ec:	cmn	r0, #3
   110f0:	bne	11124 <__assert_fail@plt+0x230>
   110f4:	ldr	r1, [pc, #2204]	; 11998 <__assert_fail@plt+0xaa4>
   110f8:	ldr	r3, [pc, #2204]	; 1199c <__assert_fail@plt+0xaa8>
   110fc:	ldr	r2, [pc, #2204]	; 119a0 <__assert_fail@plt+0xaac>
   11100:	str	r4, [sp, #4]
   11104:	ldr	r0, [r1]
   11108:	ldr	r3, [r3]
   1110c:	ldr	r1, [pc, #2192]	; 119a4 <__assert_fail@plt+0xab0>
   11110:	str	r2, [sp]
   11114:	ldr	r2, [pc, #2188]	; 119a8 <__assert_fail@plt+0xab4>
   11118:	bl	14648 <__assert_fail@plt+0x3754>
   1111c:	mov	r0, r4
   11120:	bl	10e04 <exit@plt>
   11124:	cmn	r0, #2
   11128:	bne	110e4 <__assert_fail@plt+0x1f0>
   1112c:	mov	r0, r4
   11130:	bl	11af8 <__assert_fail@plt+0xc04>
   11134:	ldr	r3, [r5]
   11138:	str	r3, [sl, #4]
   1113c:	b	10f64 <__assert_fail@plt+0x70>
   11140:	mov	r3, #1
   11144:	strb	r3, [sl]
   11148:	b	10f64 <__assert_fail@plt+0x70>
   1114c:	mov	r3, #1
   11150:	strb	r3, [sl, #1]
   11154:	b	10f64 <__assert_fail@plt+0x70>
   11158:	ldr	r1, [pc, #2096]	; 11990 <__assert_fail@plt+0xa9c>
   1115c:	mov	r0, #0
   11160:	bl	10d20 <dcgettext@plt>
   11164:	mvn	r2, #0
   11168:	mvn	r3, #-2147483648	; 0x80000000
   1116c:	ldr	r1, [pc, #2080]	; 11994 <__assert_fail@plt+0xaa0>
   11170:	strd	r2, [sp]
   11174:	mov	r3, #0
   11178:	str	r3, [sp, #16]
   1117c:	mov	r2, #0
   11180:	mov	r3, #-2147483648	; 0x80000000
   11184:	str	r1, [sp, #8]
   11188:	str	r0, [sp, #12]
   1118c:	mov	r0, r4
   11190:	bl	14b48 <__assert_fail@plt+0x3c54>
   11194:	mov	r2, r0
   11198:	mov	r3, r1
   1119c:	strd	r2, [sp, #32]
   111a0:	orr	r3, r0, r3
   111a4:	sub	r2, fp, #4
   111a8:	cmp	r2, #1
   111ac:	cmpls	r3, #0
   111b0:	beq	118a0 <__assert_fail@plt+0x9ac>
   111b4:	mov	r3, #1
   111b8:	str	r3, [sp, #28]
   111bc:	b	10f64 <__assert_fail@plt+0x70>
   111c0:	add	r1, r1, #1
   111c4:	str	r1, [r5]
   111c8:	mov	fp, #2
   111cc:	b	11058 <__assert_fail@plt+0x164>
   111d0:	add	r1, r1, #1
   111d4:	str	r1, [r5]
   111d8:	mov	fp, #5
   111dc:	b	11058 <__assert_fail@plt+0x164>
   111e0:	add	r1, r1, #1
   111e4:	str	r1, [r5]
   111e8:	mov	fp, #4
   111ec:	b	11058 <__assert_fail@plt+0x164>
   111f0:	ldr	r3, [pc, #1972]	; 119ac <__assert_fail@plt+0xab8>
   111f4:	ldr	sl, [r3]
   111f8:	ldr	r3, [pc, #1924]	; 11984 <__assert_fail@plt+0xa90>
   111fc:	sub	r7, r7, sl
   11200:	add	sl, r6, sl, lsl #2
   11204:	ldr	r5, [r3, #4]
   11208:	cmp	r5, r4
   1120c:	beq	116d4 <__assert_fail@plt+0x7e0>
   11210:	ldr	r6, [sp, #28]
   11214:	cmp	fp, #0
   11218:	movne	r6, #0
   1121c:	cmp	r6, #0
   11220:	bne	11904 <__assert_fail@plt+0xa10>
   11224:	ldr	r3, [pc, #1880]	; 11984 <__assert_fail@plt+0xa90>
   11228:	ldrb	r4, [r3, #1]
   1122c:	ldr	r3, [sp, #28]
   11230:	eor	r4, r4, #1
   11234:	orrs	r4, r3, r4
   11238:	beq	118c0 <__assert_fail@plt+0x9cc>
   1123c:	cmp	r7, #0
   11240:	ble	11394 <__assert_fail@plt+0x4a0>
   11244:	mov	r1, r5
   11248:	add	r2, sp, #64	; 0x40
   1124c:	mov	r0, #3
   11250:	bl	10ec4 <__xstat64@plt>
   11254:	subs	r1, r0, #0
   11258:	bne	11930 <__assert_fail@plt+0xa3c>
   1125c:	ldr	r3, [sp, #80]	; 0x50
   11260:	and	r3, r3, #53248	; 0xd000
   11264:	cmp	r3, #32768	; 0x8000
   11268:	bne	1174c <__assert_fail@plt+0x858>
   1126c:	ldrd	r6, [sp, #112]	; 0x70
   11270:	cmp	r6, #0
   11274:	sbcs	r3, r7, #0
   11278:	blt	117a4 <__assert_fail@plt+0x8b0>
   1127c:	ldr	r3, [sp, #28]
   11280:	cmp	r3, #0
   11284:	mvneq	r2, #0
   11288:	strdne	r6, [sp, #40]	; 0x28
   1128c:	ldrdne	r6, [sp, #32]
   11290:	mvneq	r3, #0
   11294:	strd	r6, [sp, #32]
   11298:	strdeq	r2, [sp, #40]	; 0x28
   1129c:	ldr	r3, [pc, #1760]	; 11984 <__assert_fail@plt+0xa90>
   112a0:	mov	r0, #0
   112a4:	ldr	r2, [pc, #1796]	; 119b0 <__assert_fail@plt+0xabc>
   112a8:	ldrb	r1, [r3]
   112ac:	ldr	r3, [pc, #1792]	; 119b4 <__assert_fail@plt+0xac0>
   112b0:	str	r0, [sp, #28]
   112b4:	cmp	r1, r0
   112b8:	moveq	r2, r3
   112bc:	str	r2, [sp, #56]	; 0x38
   112c0:	ldr	r4, [sl], #4
   112c4:	cmp	r4, #0
   112c8:	beq	11628 <__assert_fail@plt+0x734>
   112cc:	ldr	r2, [pc, #1764]	; 119b8 <__assert_fail@plt+0xac4>
   112d0:	ldr	r1, [sp, #56]	; 0x38
   112d4:	mov	r0, r4
   112d8:	bl	10db0 <open64@plt>
   112dc:	cmn	r0, #1
   112e0:	mov	r5, r0
   112e4:	beq	114c8 <__assert_fail@plt+0x5d4>
   112e8:	ldr	r3, [pc, #1684]	; 11984 <__assert_fail@plt+0xa90>
   112ec:	ldrb	r3, [r3, #1]
   112f0:	cmp	r3, #0
   112f4:	bne	113bc <__assert_fail@plt+0x4c8>
   112f8:	ldr	r3, [sp, #44]	; 0x2c
   112fc:	cmp	fp, #0
   11300:	moveq	r3, #0
   11304:	lsrne	r3, r3, #31
   11308:	cmp	r3, #0
   1130c:	ldrdeq	r8, [sp, #32]
   11310:	beq	11444 <__assert_fail@plt+0x550>
   11314:	mov	r1, r0
   11318:	add	r2, sp, #64	; 0x40
   1131c:	mov	r0, #3
   11320:	bl	10d5c <__fxstat64@plt>
   11324:	cmp	r0, #0
   11328:	ldrdeq	r8, [sp, #32]
   1132c:	beq	11648 <__assert_fail@plt+0x754>
   11330:	bl	10e28 <__errno_location@plt>
   11334:	ldr	r1, [pc, #1664]	; 119bc <__assert_fail@plt+0xac8>
   11338:	mov	r2, #5
   1133c:	mov	r8, #0
   11340:	ldr	r6, [r0]
   11344:	mov	r0, r8
   11348:	bl	10d20 <dcgettext@plt>
   1134c:	mov	r1, r4
   11350:	mov	r7, r0
   11354:	mov	r0, #4
   11358:	bl	13f34 <__assert_fail@plt+0x3040>
   1135c:	mov	r2, r7
   11360:	mov	r1, r6
   11364:	mov	r3, r0
   11368:	mov	r0, r8
   1136c:	bl	10da4 <error@plt>
   11370:	mov	r0, r5
   11374:	bl	10ee8 <close@plt>
   11378:	cmp	r0, #0
   1137c:	bne	11528 <__assert_fail@plt+0x634>
   11380:	ldr	r3, [sp, #28]
   11384:	eor	r8, r8, #1
   11388:	orr	r3, r3, r8
   1138c:	str	r3, [sp, #28]
   11390:	b	112c0 <__assert_fail@plt+0x3cc>
   11394:	mov	r2, #5
   11398:	ldr	r1, [pc, #1568]	; 119c0 <__assert_fail@plt+0xacc>
   1139c:	mov	r0, #0
   113a0:	bl	10d20 <dcgettext@plt>
   113a4:	mov	r2, r0
   113a8:	mov	r1, #0
   113ac:	mov	r0, r1
   113b0:	bl	10da4 <error@plt>
   113b4:	mov	r0, #1
   113b8:	bl	11af8 <__assert_fail@plt+0xc04>
   113bc:	mov	r1, r0
   113c0:	add	r2, sp, #64	; 0x40
   113c4:	mov	r0, #3
   113c8:	bl	10d5c <__fxstat64@plt>
   113cc:	cmp	r0, #0
   113d0:	bne	11330 <__assert_fail@plt+0x43c>
   113d4:	ldr	r6, [sp, #120]	; 0x78
   113d8:	mov	r0, #0
   113dc:	sub	r3, r6, #1
   113e0:	cmp	r3, #536870912	; 0x20000000
   113e4:	movcs	r6, #512	; 0x200
   113e8:	mov	r2, r6
   113ec:	asr	r7, r6, #31
   113f0:	mov	r3, r7
   113f4:	mov	r1, #-2147483648	; 0x80000000
   113f8:	bl	15b64 <__assert_fail@plt+0x4c70>
   113fc:	ldrd	r2, [sp, #32]
   11400:	cmp	r2, r0
   11404:	sbcs	r3, r3, r1
   11408:	blt	115e0 <__assert_fail@plt+0x6ec>
   1140c:	mov	r2, r6
   11410:	mov	r3, r7
   11414:	mvn	r0, #0
   11418:	mvn	r1, #-2147483648	; 0x80000000
   1141c:	bl	15b64 <__assert_fail@plt+0x4c70>
   11420:	ldrd	r2, [sp, #32]
   11424:	cmp	r0, r2
   11428:	sbcs	r3, r1, r3
   1142c:	blt	115e0 <__assert_fail@plt+0x6ec>
   11430:	ldrd	r0, [sp, #32]
   11434:	mul	r3, r0, r7
   11438:	umull	r8, r9, r0, r6
   1143c:	mla	r6, r6, r1, r3
   11440:	add	r9, r6, r9
   11444:	cmp	fp, #0
   11448:	bne	11570 <__assert_fail@plt+0x67c>
   1144c:	cmp	r8, #0
   11450:	sbcs	r3, r9, #0
   11454:	mov	r6, r8
   11458:	mov	r7, r9
   1145c:	movlt	r6, #0
   11460:	movlt	r7, #0
   11464:	mov	r2, r6
   11468:	mov	r3, r7
   1146c:	mov	r0, r5
   11470:	bl	10d08 <ftruncate64@plt>
   11474:	cmn	r0, #1
   11478:	movne	r8, #1
   1147c:	bne	11370 <__assert_fail@plt+0x47c>
   11480:	bl	10e28 <__errno_location@plt>
   11484:	mov	r8, #0
   11488:	mov	r2, #5
   1148c:	ldr	r1, [pc, #1328]	; 119c4 <__assert_fail@plt+0xad0>
   11490:	ldr	r9, [r0]
   11494:	mov	r0, r8
   11498:	bl	10d20 <dcgettext@plt>
   1149c:	mov	r1, r4
   114a0:	str	r0, [sp, #60]	; 0x3c
   114a4:	mov	r0, #4
   114a8:	bl	13f34 <__assert_fail@plt+0x3040>
   114ac:	mov	r1, r9
   114b0:	ldr	r2, [sp, #60]	; 0x3c
   114b4:	strd	r6, [sp]
   114b8:	mov	r3, r0
   114bc:	mov	r0, r8
   114c0:	bl	10da4 <error@plt>
   114c4:	b	11370 <__assert_fail@plt+0x47c>
   114c8:	bl	10e28 <__errno_location@plt>
   114cc:	ldr	r3, [pc, #1200]	; 11984 <__assert_fail@plt+0xa90>
   114d0:	ldrb	r3, [r3]
   114d4:	cmp	r3, #0
   114d8:	ldr	r5, [r0]
   114dc:	beq	114e8 <__assert_fail@plt+0x5f4>
   114e0:	cmp	r5, #2
   114e4:	beq	112c0 <__assert_fail@plt+0x3cc>
   114e8:	mov	r2, #5
   114ec:	ldr	r1, [pc, #1236]	; 119c8 <__assert_fail@plt+0xad4>
   114f0:	mov	r0, #0
   114f4:	bl	10d20 <dcgettext@plt>
   114f8:	mov	r1, r4
   114fc:	mov	r6, r0
   11500:	mov	r0, #4
   11504:	bl	13f34 <__assert_fail@plt+0x3040>
   11508:	mov	r2, r6
   1150c:	mov	r1, r5
   11510:	mov	r3, r0
   11514:	mov	r0, #0
   11518:	bl	10da4 <error@plt>
   1151c:	mov	r3, #1
   11520:	str	r3, [sp, #28]
   11524:	b	112c0 <__assert_fail@plt+0x3cc>
   11528:	bl	10e28 <__errno_location@plt>
   1152c:	mov	r3, #1
   11530:	mov	r2, #5
   11534:	ldr	r1, [pc, #1168]	; 119cc <__assert_fail@plt+0xad8>
   11538:	str	r3, [sp, #28]
   1153c:	ldr	r5, [r0]
   11540:	mov	r0, #0
   11544:	bl	10d20 <dcgettext@plt>
   11548:	mov	r1, r4
   1154c:	mov	r6, r0
   11550:	mov	r0, #4
   11554:	bl	13f34 <__assert_fail@plt+0x3040>
   11558:	mov	r2, r6
   1155c:	mov	r1, r5
   11560:	mov	r3, r0
   11564:	mov	r0, #0
   11568:	bl	10da4 <error@plt>
   1156c:	b	112c0 <__assert_fail@plt+0x3cc>
   11570:	ldrd	r0, [sp, #40]	; 0x28
   11574:	mvn	r3, #0
   11578:	mvn	r2, #0
   1157c:	cmp	r1, r3
   11580:	cmpeq	r0, r2
   11584:	beq	11648 <__assert_fail@plt+0x754>
   11588:	cmp	fp, #2
   1158c:	beq	116a4 <__assert_fail@plt+0x7b0>
   11590:	cmp	fp, #3
   11594:	beq	116b8 <__assert_fail@plt+0x7c4>
   11598:	cmp	fp, #4
   1159c:	beq	116f8 <__assert_fail@plt+0x804>
   115a0:	cmp	fp, #5
   115a4:	beq	117e4 <__assert_fail@plt+0x8f0>
   115a8:	mvn	r3, #0
   115ac:	subs	r3, r3, r0
   115b0:	str	r3, [sp, #48]	; 0x30
   115b4:	mvn	r3, #-2147483648	; 0x80000000
   115b8:	sbc	r3, r3, r1
   115bc:	str	r3, [sp, #52]	; 0x34
   115c0:	ldrd	r2, [sp, #48]	; 0x30
   115c4:	cmp	r2, r8
   115c8:	sbcs	r3, r3, r9
   115cc:	blt	1182c <__assert_fail@plt+0x938>
   115d0:	mov	r3, r1
   115d4:	adds	r8, r8, r0
   115d8:	adc	r9, r9, r3
   115dc:	b	1144c <__assert_fail@plt+0x558>
   115e0:	mov	r2, #5
   115e4:	ldr	r1, [pc, #996]	; 119d0 <__assert_fail@plt+0xadc>
   115e8:	mov	r0, #0
   115ec:	bl	10d20 <dcgettext@plt>
   115f0:	mov	r1, r4
   115f4:	mov	r8, r0
   115f8:	mov	r0, #4
   115fc:	bl	13f34 <__assert_fail@plt+0x3040>
   11600:	strd	r6, [sp, #8]
   11604:	ldrd	r6, [sp, #32]
   11608:	mov	r1, #0
   1160c:	mov	r2, r8
   11610:	strd	r6, [sp]
   11614:	mov	r8, r1
   11618:	str	r0, [sp, #16]
   1161c:	mov	r0, r1
   11620:	bl	10da4 <error@plt>
   11624:	b	11370 <__assert_fail@plt+0x47c>
   11628:	ldr	r3, [pc, #828]	; 1196c <__assert_fail@plt+0xa78>
   1162c:	ldr	r2, [sp, #172]	; 0xac
   11630:	ldr	r0, [sp, #28]
   11634:	ldr	r3, [r3]
   11638:	cmp	r2, r3
   1163c:	bne	11900 <__assert_fail@plt+0xa0c>
   11640:	add	sp, sp, #180	; 0xb4
   11644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11648:	ldr	r3, [sp, #80]	; 0x50
   1164c:	and	r3, r3, #53248	; 0xd000
   11650:	cmp	r3, #32768	; 0x8000
   11654:	bne	11718 <__assert_fail@plt+0x824>
   11658:	ldrd	r0, [sp, #112]	; 0x70
   1165c:	cmp	r0, #0
   11660:	sbcs	r3, r1, #0
   11664:	movlt	r2, #5
   11668:	ldrlt	r1, [pc, #868]	; 119d4 <__assert_fail@plt+0xae0>
   1166c:	bge	11588 <__assert_fail@plt+0x694>
   11670:	mov	r0, #0
   11674:	bl	10d20 <dcgettext@plt>
   11678:	mov	r1, r4
   1167c:	mov	r8, #0
   11680:	mov	r6, r0
   11684:	mov	r0, #4
   11688:	bl	13f34 <__assert_fail@plt+0x3040>
   1168c:	mov	r1, #0
   11690:	mov	r2, r6
   11694:	mov	r3, r0
   11698:	mov	r0, r1
   1169c:	bl	10da4 <error@plt>
   116a0:	b	11370 <__assert_fail@plt+0x47c>
   116a4:	cmp	r9, r1
   116a8:	cmpeq	r8, r0
   116ac:	movcc	r8, r0
   116b0:	movcc	r9, r1
   116b4:	b	1144c <__assert_fail@plt+0x558>
   116b8:	cmp	r9, r1
   116bc:	cmpeq	r8, r0
   116c0:	mov	r6, r8
   116c4:	mov	r7, r9
   116c8:	movhi	r6, r0
   116cc:	movhi	r7, r1
   116d0:	b	11464 <__assert_fail@plt+0x570>
   116d4:	ldr	r3, [sp, #28]
   116d8:	cmp	r3, r4
   116dc:	beq	11838 <__assert_fail@plt+0x944>
   116e0:	cmp	r7, #0
   116e4:	ble	11394 <__assert_fail@plt+0x4a0>
   116e8:	mvn	r2, #0
   116ec:	mvn	r3, #0
   116f0:	strd	r2, [sp, #40]	; 0x28
   116f4:	b	1129c <__assert_fail@plt+0x3a8>
   116f8:	mov	r3, r9
   116fc:	mov	r2, r8
   11700:	bl	15c38 <__assert_fail@plt+0x4d44>
   11704:	mul	r3, r0, r9
   11708:	mla	r3, r1, r8, r3
   1170c:	umull	r8, r9, r0, r8
   11710:	add	r9, r3, r9
   11714:	b	1144c <__assert_fail@plt+0x558>
   11718:	mov	r3, #2
   1171c:	str	r3, [sp]
   11720:	mov	r2, #0
   11724:	mov	r3, #0
   11728:	mov	r0, r5
   1172c:	bl	10d74 <lseek64@plt>
   11730:	cmp	r0, #0
   11734:	sbcs	r3, r1, #0
   11738:	bge	11588 <__assert_fail@plt+0x694>
   1173c:	bl	10e28 <__errno_location@plt>
   11740:	mov	r2, #5
   11744:	ldr	r1, [pc, #652]	; 119d8 <__assert_fail@plt+0xae4>
   11748:	b	1133c <__assert_fail@plt+0x448>
   1174c:	mov	r0, r5
   11750:	bl	10db0 <open64@plt>
   11754:	mov	r4, r0
   11758:	bl	10e28 <__errno_location@plt>
   1175c:	cmp	r4, #0
   11760:	mov	r5, r0
   11764:	blt	117a4 <__assert_fail@plt+0x8b0>
   11768:	mov	r3, #2
   1176c:	str	r3, [sp]
   11770:	mov	r2, #0
   11774:	mov	r3, #0
   11778:	mov	r0, r4
   1177c:	bl	10d74 <lseek64@plt>
   11780:	mov	r6, r0
   11784:	mov	r0, r4
   11788:	mov	r7, r1
   1178c:	ldr	r4, [r5]
   11790:	bl	10ee8 <close@plt>
   11794:	cmp	r6, #0
   11798:	sbcs	r3, r7, #0
   1179c:	bge	1127c <__assert_fail@plt+0x388>
   117a0:	str	r4, [r5]
   117a4:	bl	10e28 <__errno_location@plt>
   117a8:	mov	r2, #5
   117ac:	ldr	r1, [pc, #548]	; 119d8 <__assert_fail@plt+0xae4>
   117b0:	ldr	r4, [r0]
   117b4:	mov	r0, #0
   117b8:	bl	10d20 <dcgettext@plt>
   117bc:	ldr	r3, [pc, #448]	; 11984 <__assert_fail@plt+0xa90>
   117c0:	ldr	r1, [r3, #4]
   117c4:	mov	r5, r0
   117c8:	mov	r0, #4
   117cc:	bl	13f34 <__assert_fail@plt+0x3040>
   117d0:	mov	r2, r5
   117d4:	mov	r1, r4
   117d8:	mov	r3, r0
   117dc:	mov	r0, #1
   117e0:	bl	10da4 <error@plt>
   117e4:	mov	r3, r1
   117e8:	subs	r0, r0, #1
   117ec:	sbc	r1, r3, #0
   117f0:	adds	r0, r0, r8
   117f4:	adc	r1, r1, r9
   117f8:	mov	r2, r8
   117fc:	mov	r3, r9
   11800:	bl	15c38 <__assert_fail@plt+0x4d44>
   11804:	mul	r3, r0, r9
   11808:	umull	r6, r7, r0, r8
   1180c:	mla	r3, r1, r8, r3
   11810:	cmp	r6, #0
   11814:	add	r7, r3, r7
   11818:	sbcs	r3, r7, #0
   1181c:	movlt	r2, fp
   11820:	ldrlt	r1, [pc, #436]	; 119dc <__assert_fail@plt+0xae8>
   11824:	bge	11464 <__assert_fail@plt+0x570>
   11828:	b	11670 <__assert_fail@plt+0x77c>
   1182c:	mov	r2, #5
   11830:	ldr	r1, [pc, #424]	; 119e0 <__assert_fail@plt+0xaec>
   11834:	b	11670 <__assert_fail@plt+0x77c>
   11838:	mov	r2, #5
   1183c:	mov	r0, r3
   11840:	ldr	r1, [pc, #412]	; 119e4 <__assert_fail@plt+0xaf0>
   11844:	mov	r6, r3
   11848:	bl	10d20 <dcgettext@plt>
   1184c:	ldr	r1, [pc, #404]	; 119e8 <__assert_fail@plt+0xaf4>
   11850:	mov	r4, r0
   11854:	mov	r0, r6
   11858:	bl	141cc <__assert_fail@plt+0x32d8>
   1185c:	ldr	r1, [pc, #392]	; 119ec <__assert_fail@plt+0xaf8>
   11860:	mov	r5, r0
   11864:	mov	r0, #1
   11868:	bl	141cc <__assert_fail@plt+0x32d8>
   1186c:	mov	r3, r5
   11870:	mov	r2, r4
   11874:	mov	r1, r6
   11878:	str	r0, [sp]
   1187c:	mov	r0, r1
   11880:	bl	10da4 <error@plt>
   11884:	b	110e4 <__assert_fail@plt+0x1f0>
   11888:	ldr	r1, [pc, #352]	; 119f0 <__assert_fail@plt+0xafc>
   1188c:	mov	r0, r3
   11890:	str	r3, [sp, #28]
   11894:	bl	10d20 <dcgettext@plt>
   11898:	mov	r2, r0
   1189c:	b	113a8 <__assert_fail@plt+0x4b4>
   118a0:	mov	r2, #5
   118a4:	ldr	r1, [pc, #328]	; 119f4 <__assert_fail@plt+0xb00>
   118a8:	mov	r0, #0
   118ac:	bl	10d20 <dcgettext@plt>
   118b0:	mov	r1, #0
   118b4:	mov	r2, r0
   118b8:	mov	r0, #1
   118bc:	bl	10da4 <error@plt>
   118c0:	mov	r2, #5
   118c4:	ldr	r1, [pc, #300]	; 119f8 <__assert_fail@plt+0xb04>
   118c8:	mov	r0, r4
   118cc:	bl	10d20 <dcgettext@plt>
   118d0:	ldr	r1, [pc, #292]	; 119fc <__assert_fail@plt+0xb08>
   118d4:	mov	r5, r0
   118d8:	mov	r0, r4
   118dc:	bl	141cc <__assert_fail@plt+0x32d8>
   118e0:	ldr	r1, [pc, #256]	; 119e8 <__assert_fail@plt+0xaf4>
   118e4:	mov	r6, r0
   118e8:	mov	r0, #1
   118ec:	bl	141cc <__assert_fail@plt+0x32d8>
   118f0:	mov	r3, r6
   118f4:	mov	r2, r5
   118f8:	mov	r1, r4
   118fc:	b	11878 <__assert_fail@plt+0x984>
   11900:	bl	10d2c <__stack_chk_fail@plt>
   11904:	mov	r2, #5
   11908:	ldr	r1, [pc, #240]	; 11a00 <__assert_fail@plt+0xb0c>
   1190c:	mov	r0, r4
   11910:	bl	10d20 <dcgettext@plt>
   11914:	ldr	r1, [pc, #204]	; 119e8 <__assert_fail@plt+0xaf4>
   11918:	mov	r5, r0
   1191c:	mov	r0, r4
   11920:	bl	141cc <__assert_fail@plt+0x32d8>
   11924:	ldr	r1, [pc, #192]	; 119ec <__assert_fail@plt+0xaf8>
   11928:	mov	r6, r0
   1192c:	b	118e8 <__assert_fail@plt+0x9f4>
   11930:	bl	10e28 <__errno_location@plt>
   11934:	mov	r2, #5
   11938:	ldr	r1, [pc, #196]	; 11a04 <__assert_fail@plt+0xb10>
   1193c:	ldr	r4, [r0]
   11940:	mov	r0, r6
   11944:	bl	10d20 <dcgettext@plt>
   11948:	mov	r1, r5
   1194c:	mov	r6, r0
   11950:	mov	r0, #4
   11954:	bl	13f34 <__assert_fail@plt+0x3040>
   11958:	mov	r2, r6
   1195c:	mov	r1, r4
   11960:	mov	r3, r0
   11964:	mov	r0, #1
   11968:	bl	10da4 <error@plt>
   1196c:	andeq	r6, r2, r8, lsl #30
   11970:	andeq	r6, r1, ip, ror r2
   11974:	andeq	r5, r1, ip, ror #28
   11978:	andeq	r6, r1, r0, lsr r4
   1197c:	andeq	r6, r1, r4, lsl #7
   11980:			; <UNDEFINED> instruction: 0x000164b0
   11984:	andeq	r7, r2, r0, asr r1
   11988:	andeq	r7, r2, r8, asr #2
   1198c:	andeq	r1, r1, r0, lsr #29
   11990:	andeq	r6, r1, ip, ror #8
   11994:	andeq	r6, r1, ip, ror r4
   11998:	andeq	r7, r2, r4, asr #2
   1199c:	andeq	r7, r2, r4, ror #1
   119a0:	andeq	r6, r1, r0, lsr #9
   119a4:	ldrdeq	r5, [r1], -ip
   119a8:	andeq	r6, r1, r0, lsl #7
   119ac:	andeq	r7, r2, r8, lsr r1
   119b0:	andeq	r0, r0, r1, lsl #16
   119b4:	andeq	r0, r0, r1, asr #16
   119b8:			; <UNDEFINED> instruction: 0x000001b6
   119bc:	andeq	r6, r1, r4, lsr #11
   119c0:	andeq	r6, r1, r4, asr #10
   119c4:	andeq	r6, r1, ip, asr r6
   119c8:	andeq	r6, r1, r8, lsl #11
   119cc:	andeq	r6, r1, r0, lsl #13
   119d0:			; <UNDEFINED> instruction: 0x000165b4
   119d4:	andeq	r6, r1, r4, ror #11
   119d8:	andeq	r6, r1, ip, ror #10
   119dc:	andeq	r6, r1, r0, lsl r6
   119e0:	andeq	r6, r1, r8, lsr r6
   119e4:			; <UNDEFINED> instruction: 0x000164b8
   119e8:	ldrdeq	r6, [r1], -ip
   119ec:	andeq	r6, r1, r4, ror #9
   119f0:	andeq	r6, r1, r4, asr #8
   119f4:	andeq	r6, r1, ip, lsl #9
   119f8:	andeq	r6, r1, r8, lsl r5
   119fc:	andeq	r6, r1, r8, lsr r5
   11a00:	strdeq	r6, [r1], -r0
   11a04:	andeq	r6, r1, ip, asr r5
   11a08:	mov	fp, #0
   11a0c:	mov	lr, #0
   11a10:	pop	{r1}		; (ldr r1, [sp], #4)
   11a14:	mov	r2, sp
   11a18:	push	{r2}		; (str r2, [sp, #-4]!)
   11a1c:	push	{r0}		; (str r0, [sp, #-4]!)
   11a20:	ldr	ip, [pc, #16]	; 11a38 <__assert_fail@plt+0xb44>
   11a24:	push	{ip}		; (str ip, [sp, #-4]!)
   11a28:	ldr	r0, [pc, #12]	; 11a3c <__assert_fail@plt+0xb48>
   11a2c:	ldr	r3, [pc, #12]	; 11a40 <__assert_fail@plt+0xb4c>
   11a30:	bl	10dc8 <__libc_start_main@plt>
   11a34:	bl	10edc <abort@plt>
   11a38:	andeq	r5, r1, ip, lsl #28
   11a3c:	andeq	r0, r1, r0, lsl #30
   11a40:	andeq	r5, r1, ip, lsr #27
   11a44:	ldr	r3, [pc, #20]	; 11a60 <__assert_fail@plt+0xb6c>
   11a48:	ldr	r2, [pc, #20]	; 11a64 <__assert_fail@plt+0xb70>
   11a4c:	add	r3, pc, r3
   11a50:	ldr	r2, [r3, r2]
   11a54:	cmp	r2, #0
   11a58:	bxeq	lr
   11a5c:	b	10de0 <__gmon_start__@plt>
   11a60:	andeq	r5, r1, ip, lsr #11
   11a64:	ldrdeq	r0, [r0], -r8
   11a68:	ldr	r0, [pc, #24]	; 11a88 <__assert_fail@plt+0xb94>
   11a6c:	ldr	r3, [pc, #24]	; 11a8c <__assert_fail@plt+0xb98>
   11a70:	cmp	r3, r0
   11a74:	bxeq	lr
   11a78:	ldr	r3, [pc, #16]	; 11a90 <__assert_fail@plt+0xb9c>
   11a7c:	cmp	r3, #0
   11a80:	bxeq	lr
   11a84:	bx	r3
   11a88:	andeq	r7, r2, ip, lsr #2
   11a8c:	andeq	r7, r2, ip, lsr #2
   11a90:	andeq	r0, r0, r0
   11a94:	ldr	r0, [pc, #36]	; 11ac0 <__assert_fail@plt+0xbcc>
   11a98:	ldr	r1, [pc, #36]	; 11ac4 <__assert_fail@plt+0xbd0>
   11a9c:	sub	r1, r1, r0
   11aa0:	asr	r1, r1, #2
   11aa4:	add	r1, r1, r1, lsr #31
   11aa8:	asrs	r1, r1, #1
   11aac:	bxeq	lr
   11ab0:	ldr	r3, [pc, #16]	; 11ac8 <__assert_fail@plt+0xbd4>
   11ab4:	cmp	r3, #0
   11ab8:	bxeq	lr
   11abc:	bx	r3
   11ac0:	andeq	r7, r2, ip, lsr #2
   11ac4:	andeq	r7, r2, ip, lsr #2
   11ac8:	andeq	r0, r0, r0
   11acc:	push	{r4, lr}
   11ad0:	ldr	r4, [pc, #24]	; 11af0 <__assert_fail@plt+0xbfc>
   11ad4:	ldrb	r3, [r4]
   11ad8:	cmp	r3, #0
   11adc:	popne	{r4, pc}
   11ae0:	bl	11a68 <__assert_fail@plt+0xb74>
   11ae4:	mov	r3, #1
   11ae8:	strb	r3, [r4]
   11aec:	pop	{r4, pc}
   11af0:	andeq	r7, r2, ip, asr #2
   11af4:	b	11a94 <__assert_fail@plt+0xba0>
   11af8:	ldr	r3, [pc, #792]	; 11e18 <__assert_fail@plt+0xf24>
   11afc:	push	{r7, lr}
   11b00:	sub	sp, sp, #64	; 0x40
   11b04:	ldr	r3, [r3]
   11b08:	subs	r4, r0, #0
   11b0c:	str	r3, [sp, #60]	; 0x3c
   11b10:	beq	11b4c <__assert_fail@plt+0xc58>
   11b14:	ldr	r3, [pc, #768]	; 11e1c <__assert_fail@plt+0xf28>
   11b18:	mov	r2, #5
   11b1c:	ldr	r1, [pc, #764]	; 11e20 <__assert_fail@plt+0xf2c>
   11b20:	mov	r0, #0
   11b24:	ldr	r5, [r3]
   11b28:	bl	10d20 <dcgettext@plt>
   11b2c:	ldr	r3, [pc, #752]	; 11e24 <__assert_fail@plt+0xf30>
   11b30:	mov	r1, #1
   11b34:	ldr	r3, [r3]
   11b38:	mov	r2, r0
   11b3c:	mov	r0, r5
   11b40:	bl	10e64 <__fprintf_chk@plt>
   11b44:	mov	r0, r4
   11b48:	bl	10e04 <exit@plt>
   11b4c:	mov	r2, #5
   11b50:	ldr	r1, [pc, #720]	; 11e28 <__assert_fail@plt+0xf34>
   11b54:	bl	10d20 <dcgettext@plt>
   11b58:	ldr	r3, [pc, #708]	; 11e24 <__assert_fail@plt+0xf30>
   11b5c:	ldr	r5, [pc, #712]	; 11e2c <__assert_fail@plt+0xf38>
   11b60:	ldr	r2, [r3]
   11b64:	mov	r1, r0
   11b68:	mov	r0, #1
   11b6c:	bl	10e4c <__printf_chk@plt>
   11b70:	mov	r2, #5
   11b74:	ldr	r1, [pc, #692]	; 11e30 <__assert_fail@plt+0xf3c>
   11b78:	mov	r0, r4
   11b7c:	bl	10d20 <dcgettext@plt>
   11b80:	ldr	r1, [r5]
   11b84:	bl	10ca8 <fputs_unlocked@plt>
   11b88:	mov	r2, #5
   11b8c:	ldr	r1, [pc, #672]	; 11e34 <__assert_fail@plt+0xf40>
   11b90:	mov	r0, r4
   11b94:	bl	10d20 <dcgettext@plt>
   11b98:	ldr	r1, [r5]
   11b9c:	bl	10ca8 <fputs_unlocked@plt>
   11ba0:	mov	r2, #5
   11ba4:	ldr	r1, [pc, #652]	; 11e38 <__assert_fail@plt+0xf44>
   11ba8:	mov	r0, r4
   11bac:	bl	10d20 <dcgettext@plt>
   11bb0:	ldr	r1, [r5]
   11bb4:	bl	10ca8 <fputs_unlocked@plt>
   11bb8:	mov	r2, #5
   11bbc:	ldr	r1, [pc, #632]	; 11e3c <__assert_fail@plt+0xf48>
   11bc0:	mov	r0, r4
   11bc4:	bl	10d20 <dcgettext@plt>
   11bc8:	ldr	r1, [r5]
   11bcc:	bl	10ca8 <fputs_unlocked@plt>
   11bd0:	mov	r2, #5
   11bd4:	ldr	r1, [pc, #612]	; 11e40 <__assert_fail@plt+0xf4c>
   11bd8:	mov	r0, r4
   11bdc:	bl	10d20 <dcgettext@plt>
   11be0:	ldr	r1, [r5]
   11be4:	bl	10ca8 <fputs_unlocked@plt>
   11be8:	mov	r2, #5
   11bec:	ldr	r1, [pc, #592]	; 11e44 <__assert_fail@plt+0xf50>
   11bf0:	mov	r0, r4
   11bf4:	bl	10d20 <dcgettext@plt>
   11bf8:	ldr	r1, [r5]
   11bfc:	bl	10ca8 <fputs_unlocked@plt>
   11c00:	mov	r2, #5
   11c04:	ldr	r1, [pc, #572]	; 11e48 <__assert_fail@plt+0xf54>
   11c08:	mov	r0, r4
   11c0c:	bl	10d20 <dcgettext@plt>
   11c10:	ldr	r1, [r5]
   11c14:	bl	10ca8 <fputs_unlocked@plt>
   11c18:	mov	r2, #5
   11c1c:	ldr	r1, [pc, #552]	; 11e4c <__assert_fail@plt+0xf58>
   11c20:	mov	r0, r4
   11c24:	bl	10d20 <dcgettext@plt>
   11c28:	ldr	r1, [r5]
   11c2c:	bl	10ca8 <fputs_unlocked@plt>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #532]	; 11e50 <__assert_fail@plt+0xf5c>
   11c38:	mov	r0, r4
   11c3c:	bl	10d20 <dcgettext@plt>
   11c40:	ldr	r1, [r5]
   11c44:	bl	10ca8 <fputs_unlocked@plt>
   11c48:	ldr	lr, [pc, #516]	; 11e54 <__assert_fail@plt+0xf60>
   11c4c:	add	ip, sp, #4
   11c50:	ldm	lr!, {r0, r1, r2, r3}
   11c54:	stmia	ip!, {r0, r1, r2, r3}
   11c58:	ldm	lr!, {r0, r1, r2, r3}
   11c5c:	ldr	r6, [sp, #4]
   11c60:	stmia	ip!, {r0, r1, r2, r3}
   11c64:	cmp	r6, #0
   11c68:	ldm	lr!, {r0, r1, r2, r3}
   11c6c:	addeq	r5, sp, #4
   11c70:	stmia	ip!, {r0, r1, r2, r3}
   11c74:	ldm	lr, {r0, r1}
   11c78:	stm	ip, {r0, r1}
   11c7c:	beq	11cac <__assert_fail@plt+0xdb8>
   11c80:	ldr	r7, [pc, #464]	; 11e58 <__assert_fail@plt+0xf64>
   11c84:	add	r5, sp, #4
   11c88:	b	11c98 <__assert_fail@plt+0xda4>
   11c8c:	ldr	r6, [r5, #8]!
   11c90:	cmp	r6, #0
   11c94:	beq	11cac <__assert_fail@plt+0xdb8>
   11c98:	mov	r1, r6
   11c9c:	mov	r0, r7
   11ca0:	bl	10cc0 <strcmp@plt>
   11ca4:	cmp	r0, #0
   11ca8:	bne	11c8c <__assert_fail@plt+0xd98>
   11cac:	ldr	r5, [r5, #4]
   11cb0:	mov	r2, #5
   11cb4:	cmp	r5, #0
   11cb8:	ldr	r1, [pc, #412]	; 11e5c <__assert_fail@plt+0xf68>
   11cbc:	beq	11d64 <__assert_fail@plt+0xe70>
   11cc0:	mov	r0, #0
   11cc4:	bl	10d20 <dcgettext@plt>
   11cc8:	ldr	r3, [pc, #400]	; 11e60 <__assert_fail@plt+0xf6c>
   11ccc:	ldr	r2, [pc, #400]	; 11e64 <__assert_fail@plt+0xf70>
   11cd0:	mov	r1, r0
   11cd4:	mov	r0, #1
   11cd8:	bl	10e4c <__printf_chk@plt>
   11cdc:	mov	r1, #0
   11ce0:	mov	r0, #5
   11ce4:	bl	10e88 <setlocale@plt>
   11ce8:	cmp	r0, #0
   11cec:	ldreq	r6, [pc, #356]	; 11e58 <__assert_fail@plt+0xf64>
   11cf0:	beq	11d0c <__assert_fail@plt+0xe18>
   11cf4:	mov	r2, #3
   11cf8:	ldr	r1, [pc, #360]	; 11e68 <__assert_fail@plt+0xf74>
   11cfc:	bl	10ed0 <strncmp@plt>
   11d00:	ldr	r6, [pc, #336]	; 11e58 <__assert_fail@plt+0xf64>
   11d04:	cmp	r0, #0
   11d08:	bne	11df4 <__assert_fail@plt+0xf00>
   11d0c:	mov	r2, #5
   11d10:	ldr	r1, [pc, #340]	; 11e6c <__assert_fail@plt+0xf78>
   11d14:	mov	r0, #0
   11d18:	bl	10d20 <dcgettext@plt>
   11d1c:	ldr	r3, [pc, #308]	; 11e58 <__assert_fail@plt+0xf64>
   11d20:	ldr	r2, [pc, #312]	; 11e60 <__assert_fail@plt+0xf6c>
   11d24:	mov	r1, r0
   11d28:	mov	r0, #1
   11d2c:	bl	10e4c <__printf_chk@plt>
   11d30:	mov	r2, #5
   11d34:	ldr	r1, [pc, #308]	; 11e70 <__assert_fail@plt+0xf7c>
   11d38:	mov	r0, #0
   11d3c:	bl	10d20 <dcgettext@plt>
   11d40:	ldr	r2, [pc, #300]	; 11e74 <__assert_fail@plt+0xf80>
   11d44:	cmp	r5, r6
   11d48:	ldr	r3, [pc, #296]	; 11e78 <__assert_fail@plt+0xf84>
   11d4c:	movne	r3, r2
   11d50:	mov	r1, r0
   11d54:	mov	r2, r5
   11d58:	mov	r0, #1
   11d5c:	bl	10e4c <__printf_chk@plt>
   11d60:	b	11b44 <__assert_fail@plt+0xc50>
   11d64:	mov	r0, r5
   11d68:	bl	10d20 <dcgettext@plt>
   11d6c:	ldr	r3, [pc, #236]	; 11e60 <__assert_fail@plt+0xf6c>
   11d70:	ldr	r2, [pc, #236]	; 11e64 <__assert_fail@plt+0xf70>
   11d74:	mov	r1, r0
   11d78:	mov	r0, #1
   11d7c:	bl	10e4c <__printf_chk@plt>
   11d80:	mov	r1, r5
   11d84:	mov	r0, #5
   11d88:	bl	10e88 <setlocale@plt>
   11d8c:	cmp	r0, #0
   11d90:	beq	11da8 <__assert_fail@plt+0xeb4>
   11d94:	mov	r2, #3
   11d98:	ldr	r1, [pc, #200]	; 11e68 <__assert_fail@plt+0xf74>
   11d9c:	bl	10ed0 <strncmp@plt>
   11da0:	cmp	r0, #0
   11da4:	bne	11dec <__assert_fail@plt+0xef8>
   11da8:	mov	r2, #5
   11dac:	ldr	r1, [pc, #184]	; 11e6c <__assert_fail@plt+0xf78>
   11db0:	mov	r0, #0
   11db4:	bl	10d20 <dcgettext@plt>
   11db8:	ldr	r3, [pc, #152]	; 11e58 <__assert_fail@plt+0xf64>
   11dbc:	ldr	r2, [pc, #156]	; 11e60 <__assert_fail@plt+0xf6c>
   11dc0:	mov	r5, r3
   11dc4:	mov	r1, r0
   11dc8:	mov	r0, #1
   11dcc:	bl	10e4c <__printf_chk@plt>
   11dd0:	ldr	r1, [pc, #152]	; 11e70 <__assert_fail@plt+0xf7c>
   11dd4:	mov	r2, #5
   11dd8:	mov	r0, #0
   11ddc:	bl	10d20 <dcgettext@plt>
   11de0:	ldr	r3, [pc, #144]	; 11e78 <__assert_fail@plt+0xf84>
   11de4:	mov	r1, r0
   11de8:	b	11d54 <__assert_fail@plt+0xe60>
   11dec:	ldr	r6, [pc, #100]	; 11e58 <__assert_fail@plt+0xf64>
   11df0:	mov	r5, r6
   11df4:	mov	r2, #5
   11df8:	ldr	r1, [pc, #124]	; 11e7c <__assert_fail@plt+0xf88>
   11dfc:	mov	r0, #0
   11e00:	bl	10d20 <dcgettext@plt>
   11e04:	ldr	r2, [pc, #76]	; 11e58 <__assert_fail@plt+0xf64>
   11e08:	mov	r1, r0
   11e0c:	mov	r0, #1
   11e10:	bl	10e4c <__printf_chk@plt>
   11e14:	b	11d0c <__assert_fail@plt+0xe18>
   11e18:	andeq	r6, r2, r8, lsl #30
   11e1c:	andeq	r7, r2, r0, asr #2
   11e20:	andeq	r5, r1, r8, ror #29
   11e24:	andeq	r7, r2, r0, ror #2
   11e28:	andeq	r5, r1, r0, lsl pc
   11e2c:	andeq	r7, r2, r4, asr #2
   11e30:	andeq	r5, r1, r0, lsr pc
   11e34:	andeq	r6, r1, ip, lsr r0
   11e38:	andeq	r6, r1, r8, lsl #1
   11e3c:	strheq	r6, [r1], -ip
   11e40:	andeq	r6, r1, ip, lsl #2
   11e44:	andeq	r6, r1, ip, ror r1
   11e48:	andeq	r6, r1, ip, lsr #3
   11e4c:	andeq	r6, r1, r4, ror #3
   11e50:	andeq	r6, r1, r0, lsl #5
   11e54:	andeq	r5, r1, r4, lsr lr
   11e58:	ldrdeq	r5, [r1], -ip
   11e5c:	andeq	r6, r1, r0, asr #6
   11e60:	andeq	r6, r1, r8, asr r3
   11e64:	andeq	r6, r1, r0, lsl #7
   11e68:	muleq	r1, r0, r3
   11e6c:	ldrdeq	r6, [r1], -ip
   11e70:	strdeq	r6, [r1], -ip
   11e74:	andeq	r6, r1, ip, ror r2
   11e78:	muleq	r1, ip, r6
   11e7c:	muleq	r1, r4, r3
   11e80:	ldr	r3, [pc, #4]	; 11e8c <__assert_fail@plt+0xf98>
   11e84:	str	r0, [r3]
   11e88:	bx	lr
   11e8c:	andeq	r7, r2, r8, asr r1
   11e90:	ldr	r3, [pc, #4]	; 11e9c <__assert_fail@plt+0xfa8>
   11e94:	strb	r0, [r3, #4]
   11e98:	bx	lr
   11e9c:	andeq	r7, r2, r8, asr r1
   11ea0:	ldr	r3, [pc, #180]	; 11f5c <__assert_fail@plt+0x1068>
   11ea4:	push	{r4, r5, r6, lr}
   11ea8:	sub	sp, sp, #8
   11eac:	ldr	r0, [r3]
   11eb0:	bl	156c4 <__assert_fail@plt+0x47d0>
   11eb4:	cmp	r0, #0
   11eb8:	beq	11ee0 <__assert_fail@plt+0xfec>
   11ebc:	bl	10e28 <__errno_location@plt>
   11ec0:	ldr	r5, [pc, #152]	; 11f60 <__assert_fail@plt+0x106c>
   11ec4:	ldrb	r3, [r5, #4]
   11ec8:	cmp	r3, #0
   11ecc:	mov	r4, r0
   11ed0:	beq	11efc <__assert_fail@plt+0x1008>
   11ed4:	ldr	r3, [r0]
   11ed8:	cmp	r3, #32
   11edc:	bne	11efc <__assert_fail@plt+0x1008>
   11ee0:	ldr	r3, [pc, #124]	; 11f64 <__assert_fail@plt+0x1070>
   11ee4:	ldr	r0, [r3]
   11ee8:	bl	156c4 <__assert_fail@plt+0x47d0>
   11eec:	cmp	r0, #0
   11ef0:	bne	11f3c <__assert_fail@plt+0x1048>
   11ef4:	add	sp, sp, #8
   11ef8:	pop	{r4, r5, r6, pc}
   11efc:	mov	r2, #5
   11f00:	ldr	r1, [pc, #96]	; 11f68 <__assert_fail@plt+0x1074>
   11f04:	mov	r0, #0
   11f08:	bl	10d20 <dcgettext@plt>
   11f0c:	mov	r6, r0
   11f10:	ldr	r0, [r5]
   11f14:	cmp	r0, #0
   11f18:	beq	11f48 <__assert_fail@plt+0x1054>
   11f1c:	ldr	r4, [r4]
   11f20:	bl	13ffc <__assert_fail@plt+0x3108>
   11f24:	mov	r1, r4
   11f28:	str	r6, [sp]
   11f2c:	ldr	r2, [pc, #56]	; 11f6c <__assert_fail@plt+0x1078>
   11f30:	mov	r3, r0
   11f34:	mov	r0, #0
   11f38:	bl	10da4 <error@plt>
   11f3c:	ldr	r3, [pc, #44]	; 11f70 <__assert_fail@plt+0x107c>
   11f40:	ldr	r0, [r3]
   11f44:	bl	10ce4 <_exit@plt>
   11f48:	mov	r3, r6
   11f4c:	ldr	r1, [r4]
   11f50:	ldr	r2, [pc, #28]	; 11f74 <__assert_fail@plt+0x1080>
   11f54:	bl	10da4 <error@plt>
   11f58:	b	11f3c <__assert_fail@plt+0x1048>
   11f5c:	andeq	r7, r2, r4, asr #2
   11f60:	andeq	r7, r2, r8, asr r1
   11f64:	andeq	r7, r2, r0, asr #2
   11f68:	andeq	r6, r1, r4, asr #14
   11f6c:	andeq	r6, r1, r0, asr r7
   11f70:	andeq	r7, r2, r8, ror #1
   11f74:	andeq	r6, r1, r4, asr r7
   11f78:	push	{r4, r5, r6, lr}
   11f7c:	subs	r4, r0, #0
   11f80:	beq	11ff4 <__assert_fail@plt+0x1100>
   11f84:	mov	r1, #47	; 0x2f
   11f88:	bl	10e94 <strrchr@plt>
   11f8c:	subs	r5, r0, #0
   11f90:	beq	11fe0 <__assert_fail@plt+0x10ec>
   11f94:	add	r6, r5, #1
   11f98:	sub	r3, r6, r4
   11f9c:	cmp	r3, #6
   11fa0:	ble	11fe0 <__assert_fail@plt+0x10ec>
   11fa4:	mov	r2, #7
   11fa8:	ldr	r1, [pc, #96]	; 12010 <__assert_fail@plt+0x111c>
   11fac:	sub	r0, r5, #6
   11fb0:	bl	10ed0 <strncmp@plt>
   11fb4:	cmp	r0, #0
   11fb8:	bne	11fe0 <__assert_fail@plt+0x10ec>
   11fbc:	mov	r2, #3
   11fc0:	ldr	r1, [pc, #76]	; 12014 <__assert_fail@plt+0x1120>
   11fc4:	mov	r0, r6
   11fc8:	bl	10ed0 <strncmp@plt>
   11fcc:	cmp	r0, #0
   11fd0:	movne	r4, r6
   11fd4:	ldreq	r3, [pc, #60]	; 12018 <__assert_fail@plt+0x1124>
   11fd8:	addeq	r4, r5, #4
   11fdc:	streq	r4, [r3]
   11fe0:	ldr	r2, [pc, #52]	; 1201c <__assert_fail@plt+0x1128>
   11fe4:	ldr	r3, [pc, #52]	; 12020 <__assert_fail@plt+0x112c>
   11fe8:	str	r4, [r2]
   11fec:	str	r4, [r3]
   11ff0:	pop	{r4, r5, r6, pc}
   11ff4:	ldr	r3, [pc, #40]	; 12024 <__assert_fail@plt+0x1130>
   11ff8:	mov	r2, #55	; 0x37
   11ffc:	mov	r1, #1
   12000:	ldr	r3, [r3]
   12004:	ldr	r0, [pc, #28]	; 12028 <__assert_fail@plt+0x1134>
   12008:	bl	10d68 <fwrite@plt>
   1200c:	bl	10edc <abort@plt>
   12010:	muleq	r1, r0, r7
   12014:	muleq	r1, r8, r7
   12018:	andeq	r7, r2, r0, lsr r1
   1201c:	andeq	r7, r2, r0, ror #2
   12020:	andeq	r7, r2, r4, lsr r1
   12024:	andeq	r7, r2, r0, asr #2
   12028:	andeq	r6, r1, r8, asr r7
   1202c:	push	{r4, lr}
   12030:	mov	r2, #48	; 0x30
   12034:	mov	r4, r1
   12038:	mov	r1, #0
   1203c:	bl	10e40 <memset@plt>
   12040:	cmp	r4, #10
   12044:	beq	12050 <__assert_fail@plt+0x115c>
   12048:	str	r4, [r0]
   1204c:	pop	{r4, pc}
   12050:	bl	10edc <abort@plt>
   12054:	push	{r4, r5, r6, lr}
   12058:	mov	r2, #5
   1205c:	mov	r5, r0
   12060:	mov	r6, r1
   12064:	mov	r1, r0
   12068:	mov	r0, #0
   1206c:	bl	10d20 <dcgettext@plt>
   12070:	cmp	r5, r0
   12074:	mov	r4, r0
   12078:	beq	12084 <__assert_fail@plt+0x1190>
   1207c:	mov	r0, r4
   12080:	pop	{r4, r5, r6, pc}
   12084:	bl	15784 <__assert_fail@plt+0x4890>
   12088:	ldrb	r3, [r0]
   1208c:	bic	r3, r3, #32
   12090:	cmp	r3, #85	; 0x55
   12094:	bne	120f4 <__assert_fail@plt+0x1200>
   12098:	ldrb	r3, [r0, #1]
   1209c:	bic	r3, r3, #32
   120a0:	cmp	r3, #84	; 0x54
   120a4:	bne	1216c <__assert_fail@plt+0x1278>
   120a8:	ldrb	r3, [r0, #2]
   120ac:	bic	r3, r3, #32
   120b0:	cmp	r3, #70	; 0x46
   120b4:	bne	1216c <__assert_fail@plt+0x1278>
   120b8:	ldrb	r3, [r0, #3]
   120bc:	cmp	r3, #45	; 0x2d
   120c0:	bne	1216c <__assert_fail@plt+0x1278>
   120c4:	ldrb	r3, [r0, #4]
   120c8:	cmp	r3, #56	; 0x38
   120cc:	bne	1216c <__assert_fail@plt+0x1278>
   120d0:	ldrb	r3, [r0, #5]
   120d4:	cmp	r3, #0
   120d8:	bne	1216c <__assert_fail@plt+0x1278>
   120dc:	ldrb	r2, [r4]
   120e0:	ldr	r3, [pc, #156]	; 12184 <__assert_fail@plt+0x1290>
   120e4:	ldr	r4, [pc, #156]	; 12188 <__assert_fail@plt+0x1294>
   120e8:	cmp	r2, #96	; 0x60
   120ec:	movne	r4, r3
   120f0:	b	1207c <__assert_fail@plt+0x1188>
   120f4:	cmp	r3, #71	; 0x47
   120f8:	bne	1216c <__assert_fail@plt+0x1278>
   120fc:	ldrb	r3, [r0, #1]
   12100:	bic	r3, r3, #32
   12104:	cmp	r3, #66	; 0x42
   12108:	bne	1216c <__assert_fail@plt+0x1278>
   1210c:	ldrb	r3, [r0, #2]
   12110:	cmp	r3, #49	; 0x31
   12114:	bne	1216c <__assert_fail@plt+0x1278>
   12118:	ldrb	r3, [r0, #3]
   1211c:	cmp	r3, #56	; 0x38
   12120:	bne	1216c <__assert_fail@plt+0x1278>
   12124:	ldrb	r3, [r0, #4]
   12128:	cmp	r3, #48	; 0x30
   1212c:	bne	1216c <__assert_fail@plt+0x1278>
   12130:	ldrb	r3, [r0, #5]
   12134:	cmp	r3, #51	; 0x33
   12138:	bne	1216c <__assert_fail@plt+0x1278>
   1213c:	ldrb	r3, [r0, #6]
   12140:	cmp	r3, #48	; 0x30
   12144:	bne	1216c <__assert_fail@plt+0x1278>
   12148:	ldrb	r3, [r0, #7]
   1214c:	cmp	r3, #0
   12150:	bne	1216c <__assert_fail@plt+0x1278>
   12154:	ldrb	r2, [r4]
   12158:	ldr	r3, [pc, #44]	; 1218c <__assert_fail@plt+0x1298>
   1215c:	ldr	r4, [pc, #44]	; 12190 <__assert_fail@plt+0x129c>
   12160:	cmp	r2, #96	; 0x60
   12164:	movne	r4, r3
   12168:	b	1207c <__assert_fail@plt+0x1188>
   1216c:	ldr	r3, [pc, #32]	; 12194 <__assert_fail@plt+0x12a0>
   12170:	ldr	r4, [pc, #32]	; 12198 <__assert_fail@plt+0x12a4>
   12174:	cmp	r6, #9
   12178:	movne	r4, r3
   1217c:	mov	r0, r4
   12180:	pop	{r4, r5, r6, pc}
   12184:	strdeq	r6, [r1], -r4
   12188:	andeq	r6, r1, r0, lsl #16
   1218c:	strdeq	r6, [r1], -r8
   12190:	strdeq	r6, [r1], -ip
   12194:	andeq	r6, r1, r4, lsl #16
   12198:	strdeq	r6, [r1], -r0
   1219c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121a0:	sub	sp, sp, #124	; 0x7c
   121a4:	ldr	ip, [pc, #3576]	; 12fa4 <__assert_fail@plt+0x20b0>
   121a8:	str	r3, [sp, #24]
   121ac:	ldr	r3, [sp, #168]	; 0xa8
   121b0:	ldr	ip, [ip]
   121b4:	str	r3, [sp, #56]	; 0x38
   121b8:	ldr	r3, [sp, #172]	; 0xac
   121bc:	ldr	r8, [sp, #160]	; 0xa0
   121c0:	str	r3, [sp, #80]	; 0x50
   121c4:	ldr	r3, [sp, #176]	; 0xb0
   121c8:	mov	fp, r0
   121cc:	str	r3, [sp, #76]	; 0x4c
   121d0:	mov	sl, r1
   121d4:	str	r2, [sp, #36]	; 0x24
   121d8:	str	ip, [sp, #116]	; 0x74
   121dc:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   121e0:	ldr	r3, [sp, #164]	; 0xa4
   121e4:	ands	r4, r3, #2
   121e8:	movne	r3, #1
   121ec:	moveq	r3, #0
   121f0:	str	r3, [sp, #32]
   121f4:	str	r0, [sp, #64]	; 0x40
   121f8:	cmp	r8, #10
   121fc:	ldrls	pc, [pc, r8, lsl #2]
   12200:	b	139b0 <__assert_fail@plt+0x2abc>
   12204:	strdeq	r2, [r1], -r8
   12208:	muleq	r1, r0, r6
   1220c:	muleq	r1, r0, ip
   12210:			; <UNDEFINED> instruction: 0x000126b0
   12214:	andeq	r2, r1, r4, ror #10
   12218:	andeq	r2, r1, ip, lsr #11
   1221c:	andeq	r2, r1, r8, lsr #12
   12220:	andeq	r2, r1, r0, ror #12
   12224:	andeq	r2, r1, r0, lsr r2
   12228:	andeq	r2, r1, r0, lsr r2
   1222c:	andeq	r2, r1, r0, lsr r2
   12230:	cmp	r8, #10
   12234:	beq	12258 <__assert_fail@plt+0x1364>
   12238:	mov	r1, r8
   1223c:	ldr	r0, [pc, #3428]	; 12fa8 <__assert_fail@plt+0x20b4>
   12240:	bl	12054 <__assert_fail@plt+0x1160>
   12244:	mov	r1, r8
   12248:	str	r0, [sp, #80]	; 0x50
   1224c:	ldr	r0, [pc, #3420]	; 12fb0 <__assert_fail@plt+0x20bc>
   12250:	bl	12054 <__assert_fail@plt+0x1160>
   12254:	str	r0, [sp, #76]	; 0x4c
   12258:	cmp	r4, #0
   1225c:	movne	r4, #0
   12260:	beq	13670 <__assert_fail@plt+0x277c>
   12264:	ldr	r7, [sp, #76]	; 0x4c
   12268:	mov	r5, #0
   1226c:	mov	r6, #1
   12270:	mov	r0, r7
   12274:	str	r6, [sp, #40]	; 0x28
   12278:	str	r5, [sp, #68]	; 0x44
   1227c:	bl	10e10 <strlen@plt>
   12280:	str	r6, [sp, #28]
   12284:	str	r5, [sp, #44]	; 0x2c
   12288:	str	r5, [sp, #72]	; 0x48
   1228c:	str	r7, [sp, #60]	; 0x3c
   12290:	str	r0, [sp, #52]	; 0x34
   12294:	str	r8, [sp, #160]	; 0xa0
   12298:	mov	r8, fp
   1229c:	ldr	fp, [sp, #160]	; 0xa0
   122a0:	mov	r9, #0
   122a4:	ldr	r3, [sp, #24]
   122a8:	cmn	r3, #1
   122ac:	beq	12814 <__assert_fail@plt+0x1920>
   122b0:	ldr	r3, [sp, #24]
   122b4:	subs	r6, r3, r9
   122b8:	movne	r6, #1
   122bc:	cmp	r6, #0
   122c0:	beq	1282c <__assert_fail@plt+0x1938>
   122c4:	ldr	r7, [sp, #28]
   122c8:	ldr	r0, [sp, #36]	; 0x24
   122cc:	cmp	fp, #2
   122d0:	moveq	r7, #0
   122d4:	andne	r7, r7, #1
   122d8:	add	r3, r0, r9
   122dc:	cmp	r7, #0
   122e0:	str	r3, [sp, #48]	; 0x30
   122e4:	beq	12cd0 <__assert_fail@plt+0x1ddc>
   122e8:	ldr	r2, [sp, #52]	; 0x34
   122ec:	cmp	r2, #0
   122f0:	beq	12fb4 <__assert_fail@plt+0x20c0>
   122f4:	ldr	r1, [sp, #24]
   122f8:	cmp	r2, #1
   122fc:	mov	r3, r2
   12300:	movls	r3, #0
   12304:	movhi	r3, #1
   12308:	cmn	r1, #1
   1230c:	movne	r3, #0
   12310:	cmp	r3, #0
   12314:	add	r5, r9, r2
   12318:	beq	12324 <__assert_fail@plt+0x1430>
   1231c:	bl	10e10 <strlen@plt>
   12320:	str	r0, [sp, #24]
   12324:	ldr	r3, [sp, #24]
   12328:	cmp	r5, r3
   1232c:	bhi	12fb4 <__assert_fail@plt+0x20c0>
   12330:	ldr	r2, [sp, #52]	; 0x34
   12334:	ldr	r1, [sp, #60]	; 0x3c
   12338:	ldr	r0, [sp, #48]	; 0x30
   1233c:	bl	10d14 <memcmp@plt>
   12340:	cmp	r0, #0
   12344:	bne	12fb4 <__assert_fail@plt+0x20c0>
   12348:	ldr	r3, [sp, #32]
   1234c:	cmp	r3, #0
   12350:	bne	13870 <__assert_fail@plt+0x297c>
   12354:	ldr	r3, [sp, #48]	; 0x30
   12358:	ldrb	r5, [r3]
   1235c:	cmp	r5, #126	; 0x7e
   12360:	ldrls	pc, [pc, r5, lsl #2]
   12364:	b	12c34 <__assert_fail@plt+0x1d40>
   12368:	andeq	r2, r1, r0, lsr #22
   1236c:	andeq	r2, r1, r4, lsr ip
   12370:	andeq	r2, r1, r4, lsr ip
   12374:	andeq	r2, r1, r4, lsr ip
   12378:	andeq	r2, r1, r4, lsr ip
   1237c:	andeq	r2, r1, r4, lsr ip
   12380:	andeq	r2, r1, r4, lsr ip
   12384:	andeq	r2, r1, ip, ror #23
   12388:	ldrdeq	r2, [r1], -ip
   1238c:	ldrdeq	r2, [r1], -ip
   12390:	andeq	r2, r1, r4, lsr #21
   12394:	strdeq	r2, [r1], -ip
   12398:	andeq	r2, r1, r4, ror #21
   1239c:	andeq	r2, r1, r4, lsl sl
   123a0:	andeq	r2, r1, r4, lsr ip
   123a4:	andeq	r2, r1, r4, lsr ip
   123a8:	andeq	r2, r1, r4, lsr ip
   123ac:	andeq	r2, r1, r4, lsr ip
   123b0:	andeq	r2, r1, r4, lsr ip
   123b4:	andeq	r2, r1, r4, lsr ip
   123b8:	andeq	r2, r1, r4, lsr ip
   123bc:	andeq	r2, r1, r4, lsr ip
   123c0:	andeq	r2, r1, r4, lsr ip
   123c4:	andeq	r2, r1, r4, lsr ip
   123c8:	andeq	r2, r1, r4, lsr ip
   123cc:	andeq	r2, r1, r4, lsr ip
   123d0:	andeq	r2, r1, r4, lsr ip
   123d4:	andeq	r2, r1, r4, lsr ip
   123d8:	andeq	r2, r1, r4, lsr ip
   123dc:	andeq	r2, r1, r4, lsr ip
   123e0:	andeq	r2, r1, r4, lsr ip
   123e4:	andeq	r2, r1, r4, lsr ip
   123e8:	strdeq	r2, [r1], -r4
   123ec:	andeq	r2, r1, r8, lsl #22
   123f0:	andeq	r2, r1, r8, lsl #22
   123f4:	andeq	r2, r1, ip, lsl #24
   123f8:	andeq	r2, r1, r8, lsl #22
   123fc:	andeq	r2, r1, r8, lsr #24
   12400:	andeq	r2, r1, r8, lsl #22
   12404:	andeq	r2, r1, r8, asr #18
   12408:	andeq	r2, r1, r8, lsl #22
   1240c:	andeq	r2, r1, r8, lsl #22
   12410:	andeq	r2, r1, r8, lsl #22
   12414:	andeq	r2, r1, r8, lsr #24
   12418:	andeq	r2, r1, r8, lsr #24
   1241c:	andeq	r2, r1, r8, lsr #24
   12420:	andeq	r2, r1, r8, lsr #24
   12424:	andeq	r2, r1, r8, lsr #24
   12428:	andeq	r2, r1, r8, lsr #24
   1242c:	andeq	r2, r1, r8, lsr #24
   12430:	andeq	r2, r1, r8, lsr #24
   12434:	andeq	r2, r1, r8, lsr #24
   12438:	andeq	r2, r1, r8, lsr #24
   1243c:	andeq	r2, r1, r8, lsr #24
   12440:	andeq	r2, r1, r8, lsr #24
   12444:	andeq	r2, r1, r8, lsr #24
   12448:	andeq	r2, r1, r8, lsr #24
   1244c:	andeq	r2, r1, r8, lsr #24
   12450:	andeq	r2, r1, r8, lsr #24
   12454:	andeq	r2, r1, r8, lsl #22
   12458:	andeq	r2, r1, r8, lsl #22
   1245c:	andeq	r2, r1, r8, lsl #22
   12460:	andeq	r2, r1, r8, lsl #22
   12464:	andeq	r2, r1, ip, lsl r9
   12468:	andeq	r2, r1, r4, lsr ip
   1246c:	andeq	r2, r1, r8, lsr #24
   12470:	andeq	r2, r1, r8, lsr #24
   12474:	andeq	r2, r1, r8, lsr #24
   12478:	andeq	r2, r1, r8, lsr #24
   1247c:	andeq	r2, r1, r8, lsr #24
   12480:	andeq	r2, r1, r8, lsr #24
   12484:	andeq	r2, r1, r8, lsr #24
   12488:	andeq	r2, r1, r8, lsr #24
   1248c:	andeq	r2, r1, r8, lsr #24
   12490:	andeq	r2, r1, r8, lsr #24
   12494:	andeq	r2, r1, r8, lsr #24
   12498:	andeq	r2, r1, r8, lsr #24
   1249c:	andeq	r2, r1, r8, lsr #24
   124a0:	andeq	r2, r1, r8, lsr #24
   124a4:	andeq	r2, r1, r8, lsr #24
   124a8:	andeq	r2, r1, r8, lsr #24
   124ac:	andeq	r2, r1, r8, lsr #24
   124b0:	andeq	r2, r1, r8, lsr #24
   124b4:	andeq	r2, r1, r8, lsr #24
   124b8:	andeq	r2, r1, r8, lsr #24
   124bc:	andeq	r2, r1, r8, lsr #24
   124c0:	andeq	r2, r1, r8, lsr #24
   124c4:	andeq	r2, r1, r8, lsr #24
   124c8:	andeq	r2, r1, r8, lsr #24
   124cc:	andeq	r2, r1, r8, lsr #24
   124d0:	andeq	r2, r1, r8, lsr #24
   124d4:	andeq	r2, r1, r8, lsl #22
   124d8:	ldrdeq	r2, [r1], -r4
   124dc:	andeq	r2, r1, r8, lsr #24
   124e0:	andeq	r2, r1, r8, lsl #22
   124e4:	andeq	r2, r1, r8, lsr #24
   124e8:	andeq	r2, r1, r8, lsl #22
   124ec:	andeq	r2, r1, r8, lsr #24
   124f0:	andeq	r2, r1, r8, lsr #24
   124f4:	andeq	r2, r1, r8, lsr #24
   124f8:	andeq	r2, r1, r8, lsr #24
   124fc:	andeq	r2, r1, r8, lsr #24
   12500:	andeq	r2, r1, r8, lsr #24
   12504:	andeq	r2, r1, r8, lsr #24
   12508:	andeq	r2, r1, r8, lsr #24
   1250c:	andeq	r2, r1, r8, lsr #24
   12510:	andeq	r2, r1, r8, lsr #24
   12514:	andeq	r2, r1, r8, lsr #24
   12518:	andeq	r2, r1, r8, lsr #24
   1251c:	andeq	r2, r1, r8, lsr #24
   12520:	andeq	r2, r1, r8, lsr #24
   12524:	andeq	r2, r1, r8, lsr #24
   12528:	andeq	r2, r1, r8, lsr #24
   1252c:	andeq	r2, r1, r8, lsr #24
   12530:	andeq	r2, r1, r8, lsr #24
   12534:	andeq	r2, r1, r8, lsr #24
   12538:	andeq	r2, r1, r8, lsr #24
   1253c:	andeq	r2, r1, r8, lsr #24
   12540:	andeq	r2, r1, r8, lsr #24
   12544:	andeq	r2, r1, r8, lsr #24
   12548:	andeq	r2, r1, r8, lsr #24
   1254c:	andeq	r2, r1, r8, lsr #24
   12550:	andeq	r2, r1, r8, lsr #24
   12554:	andeq	r2, r1, ip, ror #13
   12558:	andeq	r2, r1, r8, lsl #22
   1255c:	andeq	r2, r1, ip, ror #13
   12560:	andeq	r2, r1, ip, lsl #24
   12564:	cmp	r4, #0
   12568:	moveq	r3, #1
   1256c:	streq	r3, [sp, #28]
   12570:	beq	12c9c <__assert_fail@plt+0x1da8>
   12574:	mov	r3, #0
   12578:	mov	r4, r3
   1257c:	mov	r2, #1
   12580:	str	r2, [sp, #40]	; 0x28
   12584:	str	r3, [sp, #68]	; 0x44
   12588:	str	r2, [sp, #32]
   1258c:	str	r2, [sp, #52]	; 0x34
   12590:	ldr	r3, [pc, #2584]	; 12fb0 <__assert_fail@plt+0x20bc>
   12594:	str	r4, [sp, #44]	; 0x2c
   12598:	str	r4, [sp, #72]	; 0x48
   1259c:	str	r4, [sp, #28]
   125a0:	str	r3, [sp, #60]	; 0x3c
   125a4:	mov	r8, #2
   125a8:	b	12294 <__assert_fail@plt+0x13a0>
   125ac:	cmp	r4, #0
   125b0:	bne	1383c <__assert_fail@plt+0x2948>
   125b4:	cmp	sl, #0
   125b8:	beq	135fc <__assert_fail@plt+0x2708>
   125bc:	mov	r3, #34	; 0x22
   125c0:	strb	r3, [fp]
   125c4:	ldr	r3, [pc, #2528]	; 12fac <__assert_fail@plt+0x20b8>
   125c8:	mov	r1, r4
   125cc:	mov	r2, #1
   125d0:	str	r4, [sp, #68]	; 0x44
   125d4:	str	r2, [sp, #40]	; 0x28
   125d8:	mov	r4, r2
   125dc:	str	r1, [sp, #44]	; 0x2c
   125e0:	str	r1, [sp, #72]	; 0x48
   125e4:	str	r1, [sp, #32]
   125e8:	str	r2, [sp, #28]
   125ec:	str	r2, [sp, #52]	; 0x34
   125f0:	str	r3, [sp, #60]	; 0x3c
   125f4:	b	12294 <__assert_fail@plt+0x13a0>
   125f8:	mov	r3, #0
   125fc:	str	r3, [sp, #68]	; 0x44
   12600:	str	r3, [sp, #44]	; 0x2c
   12604:	str	r3, [sp, #32]
   12608:	str	r3, [sp, #28]
   1260c:	str	r3, [sp, #60]	; 0x3c
   12610:	mov	r3, #1
   12614:	str	r8, [sp, #72]	; 0x48
   12618:	str	r8, [sp, #52]	; 0x34
   1261c:	mov	r4, r8
   12620:	str	r3, [sp, #40]	; 0x28
   12624:	b	12294 <__assert_fail@plt+0x13a0>
   12628:	mov	r3, #1
   1262c:	str	r3, [sp, #40]	; 0x28
   12630:	str	r3, [sp, #32]
   12634:	str	r3, [sp, #28]
   12638:	str	r3, [sp, #52]	; 0x34
   1263c:	ldr	r3, [pc, #2408]	; 12fac <__assert_fail@plt+0x20b8>
   12640:	mov	r2, #0
   12644:	mov	r4, r2
   12648:	str	r2, [sp, #68]	; 0x44
   1264c:	str	r2, [sp, #44]	; 0x2c
   12650:	str	r2, [sp, #72]	; 0x48
   12654:	str	r3, [sp, #60]	; 0x3c
   12658:	mov	r8, #5
   1265c:	b	12294 <__assert_fail@plt+0x13a0>
   12660:	mov	r3, #0
   12664:	mov	r2, #1
   12668:	str	r2, [sp, #40]	; 0x28
   1266c:	mov	r4, r3
   12670:	str	r3, [sp, #68]	; 0x44
   12674:	str	r2, [sp, #28]
   12678:	str	r3, [sp, #44]	; 0x2c
   1267c:	str	r3, [sp, #72]	; 0x48
   12680:	str	r3, [sp, #32]
   12684:	str	r3, [sp, #52]	; 0x34
   12688:	str	r3, [sp, #60]	; 0x3c
   1268c:	b	12294 <__assert_fail@plt+0x13a0>
   12690:	mov	r2, #1
   12694:	mov	r3, #0
   12698:	str	r2, [sp, #40]	; 0x28
   1269c:	mov	r4, r3
   126a0:	str	r3, [sp, #68]	; 0x44
   126a4:	str	r8, [sp, #52]	; 0x34
   126a8:	str	r2, [sp, #32]
   126ac:	b	12590 <__assert_fail@plt+0x169c>
   126b0:	mov	r3, #1
   126b4:	str	r3, [sp, #40]	; 0x28
   126b8:	str	r3, [sp, #32]
   126bc:	str	r3, [sp, #28]
   126c0:	str	r3, [sp, #52]	; 0x34
   126c4:	ldr	r3, [pc, #2276]	; 12fb0 <__assert_fail@plt+0x20bc>
   126c8:	mov	r2, #0
   126cc:	mov	r4, r2
   126d0:	str	r2, [sp, #68]	; 0x44
   126d4:	str	r2, [sp, #44]	; 0x2c
   126d8:	str	r2, [sp, #72]	; 0x48
   126dc:	str	r3, [sp, #60]	; 0x3c
   126e0:	mov	r8, #2
   126e4:	b	12294 <__assert_fail@plt+0x13a0>
   126e8:	mov	r7, #0
   126ec:	ldr	r3, [sp, #24]
   126f0:	cmn	r3, #1
   126f4:	beq	13230 <__assert_fail@plt+0x233c>
   126f8:	ldr	r3, [sp, #24]
   126fc:	subs	r3, r3, #1
   12700:	movne	r3, #1
   12704:	cmp	r3, #0
   12708:	sub	r2, fp, #2
   1270c:	clz	r2, r2
   12710:	lsr	r2, r2, #5
   12714:	bne	12910 <__assert_fail@plt+0x1a1c>
   12718:	cmp	r9, #0
   1271c:	bne	12910 <__assert_fail@plt+0x1a1c>
   12720:	ldr	r3, [sp, #32]
   12724:	tst	r3, r2
   12728:	bne	12a30 <__assert_fail@plt+0x1b3c>
   1272c:	ldr	r3, [sp, #28]
   12730:	eor	r3, r3, #1
   12734:	orr	r3, r2, r3
   12738:	ldr	r2, [sp, #32]
   1273c:	eor	r3, r3, #1
   12740:	orrs	r3, r2, r3
   12744:	beq	12774 <__assert_fail@plt+0x1880>
   12748:	mov	r3, #0
   1274c:	ldr	r1, [sp, #56]	; 0x38
   12750:	cmp	r1, #0
   12754:	beq	12774 <__assert_fail@plt+0x1880>
   12758:	lsr	r2, r5, #5
   1275c:	and	r0, r5, #31
   12760:	uxtb	r2, r2
   12764:	ldr	r1, [r1, r2, lsl #2]
   12768:	lsr	r2, r1, r0
   1276c:	tst	r2, #1
   12770:	bne	1277c <__assert_fail@plt+0x1888>
   12774:	cmp	r7, #0
   12778:	beq	129cc <__assert_fail@plt+0x1ad8>
   1277c:	sub	r2, fp, #2
   12780:	clz	r2, r2
   12784:	lsr	r2, r2, #5
   12788:	ldr	r3, [sp, #32]
   1278c:	cmp	r3, #0
   12790:	bne	12abc <__assert_fail@plt+0x1bc8>
   12794:	ldr	r3, [sp, #44]	; 0x2c
   12798:	eor	r3, r3, #1
   1279c:	ands	r3, r2, r3
   127a0:	beq	127d8 <__assert_fail@plt+0x18e4>
   127a4:	cmp	sl, r4
   127a8:	movhi	r2, #39	; 0x27
   127ac:	strbhi	r2, [r8, r4]
   127b0:	add	r2, r4, #1
   127b4:	cmp	r2, sl
   127b8:	movcc	r1, #36	; 0x24
   127bc:	strbcc	r1, [r8, r2]
   127c0:	add	r2, r4, #2
   127c4:	cmp	r2, sl
   127c8:	add	r4, r4, #3
   127cc:	movcc	r1, #39	; 0x27
   127d0:	strbcc	r1, [r8, r2]
   127d4:	str	r3, [sp, #44]	; 0x2c
   127d8:	cmp	r4, sl
   127dc:	movcc	r3, #92	; 0x5c
   127e0:	strbcc	r3, [r8, r4]
   127e4:	add	r9, r9, #1
   127e8:	add	r4, r4, #1
   127ec:	cmp	r4, sl
   127f0:	ldr	r3, [sp, #40]	; 0x28
   127f4:	strbcc	r5, [r8, r4]
   127f8:	cmp	r6, #0
   127fc:	moveq	r3, #0
   12800:	str	r3, [sp, #40]	; 0x28
   12804:	ldr	r3, [sp, #24]
   12808:	add	r4, r4, #1
   1280c:	cmn	r3, #1
   12810:	bne	122b0 <__assert_fail@plt+0x13bc>
   12814:	ldr	r3, [sp, #36]	; 0x24
   12818:	ldrb	r6, [r3, r9]
   1281c:	adds	r6, r6, #0
   12820:	movne	r6, #1
   12824:	cmp	r6, #0
   12828:	bne	122c4 <__assert_fail@plt+0x13d0>
   1282c:	str	fp, [sp, #160]	; 0xa0
   12830:	mov	fp, r8
   12834:	ldr	r8, [sp, #160]	; 0xa0
   12838:	ldr	r1, [sp, #32]
   1283c:	cmp	r4, #0
   12840:	sub	r2, r8, #2
   12844:	clz	r2, r2
   12848:	lsr	r2, r2, #5
   1284c:	andeq	r3, r2, r1
   12850:	movne	r3, #0
   12854:	cmp	r3, #0
   12858:	bne	13944 <__assert_fail@plt+0x2a50>
   1285c:	eor	r3, r1, #1
   12860:	ands	r2, r2, r3
   12864:	beq	13880 <__assert_fail@plt+0x298c>
   12868:	ldr	r3, [sp, #68]	; 0x44
   1286c:	cmp	r3, #0
   12870:	beq	13884 <__assert_fail@plt+0x2990>
   12874:	ldr	r3, [sp, #40]	; 0x28
   12878:	cmp	r3, #0
   1287c:	bne	13900 <__assert_fail@plt+0x2a0c>
   12880:	ldr	r3, [sp, #72]	; 0x48
   12884:	adds	r3, r3, #0
   12888:	movne	r3, #1
   1288c:	cmp	sl, #0
   12890:	movne	r3, #0
   12894:	cmp	r3, #0
   12898:	ldreq	r2, [sp, #68]	; 0x44
   1289c:	beq	13884 <__assert_fail@plt+0x2990>
   128a0:	ldr	sl, [sp, #72]	; 0x48
   128a4:	str	r3, [sp, #68]	; 0x44
   128a8:	ldr	r3, [pc, #1792]	; 12fb0 <__assert_fail@plt+0x20bc>
   128ac:	mov	r2, #39	; 0x27
   128b0:	mov	r4, #1
   128b4:	str	r3, [sp, #60]	; 0x3c
   128b8:	mov	r3, #0
   128bc:	strb	r2, [fp]
   128c0:	str	r4, [sp, #52]	; 0x34
   128c4:	mov	r8, #2
   128c8:	str	r3, [sp, #32]
   128cc:	b	12294 <__assert_fail@plt+0x13a0>
   128d0:	mov	r7, #0
   128d4:	cmp	fp, #2
   128d8:	beq	13210 <__assert_fail@plt+0x231c>
   128dc:	ldr	r3, [sp, #52]	; 0x34
   128e0:	ldr	r2, [sp, #28]
   128e4:	ldr	r1, [sp, #32]
   128e8:	cmp	r3, #0
   128ec:	andne	r2, r2, r1
   128f0:	moveq	r2, #0
   128f4:	cmp	r2, #0
   128f8:	moveq	r5, #92	; 0x5c
   128fc:	moveq	r3, r5
   12900:	bne	1321c <__assert_fail@plt+0x2328>
   12904:	ldr	r1, [sp, #28]
   12908:	cmp	r1, #0
   1290c:	bne	1398c <__assert_fail@plt+0x2a98>
   12910:	mov	r6, #0
   12914:	b	1272c <__assert_fail@plt+0x1838>
   12918:	mov	r7, #0
   1291c:	cmp	fp, #2
   12920:	beq	13280 <__assert_fail@plt+0x238c>
   12924:	cmp	fp, #5
   12928:	beq	13244 <__assert_fail@plt+0x2350>
   1292c:	sub	r2, fp, #2
   12930:	mov	r6, #0
   12934:	clz	r2, r2
   12938:	mov	r5, #63	; 0x3f
   1293c:	lsr	r2, r2, #5
   12940:	b	1272c <__assert_fail@plt+0x1838>
   12944:	mov	r7, #0
   12948:	cmp	fp, #2
   1294c:	strne	r6, [sp, #68]	; 0x44
   12950:	movne	r2, #0
   12954:	movne	r5, #39	; 0x27
   12958:	bne	1272c <__assert_fail@plt+0x1838>
   1295c:	ldr	r3, [sp, #32]
   12960:	cmp	r3, #0
   12964:	bne	13660 <__assert_fail@plt+0x276c>
   12968:	cmp	sl, #0
   1296c:	ldr	r3, [sp, #72]	; 0x48
   12970:	clz	r3, r3
   12974:	lsr	r3, r3, #5
   12978:	moveq	r3, #0
   1297c:	cmp	r3, #0
   12980:	bne	13594 <__assert_fail@plt+0x26a0>
   12984:	cmp	sl, r4
   12988:	movhi	r3, #39	; 0x27
   1298c:	strbhi	r3, [r8, r4]
   12990:	add	r3, r4, #1
   12994:	cmp	sl, r3
   12998:	movhi	r2, #92	; 0x5c
   1299c:	strbhi	r2, [r8, r3]
   129a0:	add	r3, r4, #2
   129a4:	cmp	sl, r3
   129a8:	movhi	r2, #39	; 0x27
   129ac:	strbhi	r2, [r8, r3]
   129b0:	mov	r3, #0
   129b4:	cmp	r7, #0
   129b8:	add	r4, r4, #3
   129bc:	str	r3, [sp, #44]	; 0x2c
   129c0:	str	r6, [sp, #68]	; 0x44
   129c4:	mov	r5, #39	; 0x27
   129c8:	bne	1277c <__assert_fail@plt+0x1888>
   129cc:	ldr	r2, [sp, #44]	; 0x2c
   129d0:	eor	r3, r3, #1
   129d4:	and	r3, r3, r2
   129d8:	add	r9, r9, #1
   129dc:	uxtb	r3, r3
   129e0:	cmp	r3, #0
   129e4:	beq	127ec <__assert_fail@plt+0x18f8>
   129e8:	cmp	sl, r4
   129ec:	movhi	r3, #39	; 0x27
   129f0:	strbhi	r3, [r8, r4]
   129f4:	add	r3, r4, #1
   129f8:	cmp	sl, r3
   129fc:	movhi	r2, #39	; 0x27
   12a00:	strbhi	r2, [r8, r3]
   12a04:	mov	r3, #0
   12a08:	add	r4, r4, #2
   12a0c:	str	r3, [sp, #44]	; 0x2c
   12a10:	b	127ec <__assert_fail@plt+0x18f8>
   12a14:	mov	r3, #114	; 0x72
   12a18:	ldr	r1, [sp, #32]
   12a1c:	sub	r2, fp, #2
   12a20:	clz	r2, r2
   12a24:	lsr	r2, r2, #5
   12a28:	tst	r2, r1
   12a2c:	beq	12904 <__assert_fail@plt+0x1a10>
   12a30:	mov	fp, r8
   12a34:	mov	r8, #2
   12a38:	ldr	r3, [sp, #28]
   12a3c:	cmp	r3, #0
   12a40:	movne	r8, #4
   12a44:	ldr	r3, [sp, #164]	; 0xa4
   12a48:	mov	ip, #0
   12a4c:	bic	r3, r3, #2
   12a50:	str	r3, [sp, #4]
   12a54:	ldr	r3, [sp, #76]	; 0x4c
   12a58:	str	r8, [sp]
   12a5c:	str	r3, [sp, #16]
   12a60:	ldr	r3, [sp, #80]	; 0x50
   12a64:	ldr	r2, [sp, #36]	; 0x24
   12a68:	str	r3, [sp, #12]
   12a6c:	mov	r1, sl
   12a70:	ldr	r3, [sp, #24]
   12a74:	mov	r0, fp
   12a78:	str	ip, [sp, #8]
   12a7c:	bl	1219c <__assert_fail@plt+0x12a8>
   12a80:	mov	r4, r0
   12a84:	ldr	r3, [pc, #1304]	; 12fa4 <__assert_fail@plt+0x20b0>
   12a88:	ldr	r2, [sp, #116]	; 0x74
   12a8c:	mov	r0, r4
   12a90:	ldr	r3, [r3]
   12a94:	cmp	r2, r3
   12a98:	bne	13988 <__assert_fail@plt+0x2a94>
   12a9c:	add	sp, sp, #124	; 0x7c
   12aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aa4:	mov	r5, #110	; 0x6e
   12aa8:	ldr	r3, [sp, #32]
   12aac:	mov	r2, #0
   12ab0:	cmp	r3, #0
   12ab4:	mov	r6, r2
   12ab8:	beq	12794 <__assert_fail@plt+0x18a0>
   12abc:	str	fp, [sp, #160]	; 0xa0
   12ac0:	mov	fp, r8
   12ac4:	ldr	r8, [sp, #160]	; 0xa0
   12ac8:	mov	r3, r2
   12acc:	ldr	r2, [sp, #28]
   12ad0:	and	r2, r2, r3
   12ad4:	str	r2, [sp, #28]
   12ad8:	b	12a38 <__assert_fail@plt+0x1b44>
   12adc:	mov	r5, #116	; 0x74
   12ae0:	b	12aa8 <__assert_fail@plt+0x1bb4>
   12ae4:	mov	r5, #102	; 0x66
   12ae8:	ldr	r3, [sp, #32]
   12aec:	cmp	r3, #0
   12af0:	bne	1369c <__assert_fail@plt+0x27a8>
   12af4:	mov	r6, #0
   12af8:	b	127d8 <__assert_fail@plt+0x18e4>
   12afc:	mov	r5, #118	; 0x76
   12b00:	b	12ae8 <__assert_fail@plt+0x1bf4>
   12b04:	mov	r7, #0
   12b08:	mov	r6, #0
   12b0c:	b	12748 <__assert_fail@plt+0x1854>
   12b10:	ldr	r3, [sp, #32]
   12b14:	cmp	r3, #0
   12b18:	bne	138e0 <__assert_fail@plt+0x29ec>
   12b1c:	mov	r7, r3
   12b20:	ldr	r3, [sp, #44]	; 0x2c
   12b24:	sub	r2, fp, #2
   12b28:	eor	r3, r3, #1
   12b2c:	clz	r2, r2
   12b30:	lsr	r2, r2, #5
   12b34:	ands	r3, r2, r3
   12b38:	beq	13580 <__assert_fail@plt+0x268c>
   12b3c:	cmp	sl, r4
   12b40:	movhi	r1, #39	; 0x27
   12b44:	strbhi	r1, [r8, r4]
   12b48:	add	r1, r4, #1
   12b4c:	cmp	sl, r1
   12b50:	movhi	r0, #36	; 0x24
   12b54:	strbhi	r0, [r8, r1]
   12b58:	add	r1, r4, #2
   12b5c:	cmp	sl, r1
   12b60:	movhi	r0, #39	; 0x27
   12b64:	strbhi	r0, [r8, r1]
   12b68:	add	r1, r4, #3
   12b6c:	cmp	sl, r1
   12b70:	bls	135e0 <__assert_fail@plt+0x26ec>
   12b74:	mov	r4, r1
   12b78:	mov	r1, #92	; 0x5c
   12b7c:	strb	r1, [r8, r4]
   12b80:	mov	r1, r4
   12b84:	str	r3, [sp, #44]	; 0x2c
   12b88:	cmp	fp, #2
   12b8c:	add	r4, r4, #1
   12b90:	beq	13628 <__assert_fail@plt+0x2734>
   12b94:	ldr	r0, [sp, #24]
   12b98:	add	r3, r9, #1
   12b9c:	cmp	r3, r0
   12ba0:	bcs	12bb8 <__assert_fail@plt+0x1cc4>
   12ba4:	ldr	r0, [sp, #36]	; 0x24
   12ba8:	ldrb	r3, [r0, r3]
   12bac:	sub	r3, r3, #48	; 0x30
   12bb0:	cmp	r3, #9
   12bb4:	bls	13638 <__assert_fail@plt+0x2744>
   12bb8:	mov	r5, #48	; 0x30
   12bbc:	ldr	r3, [sp, #28]
   12bc0:	eor	r3, r3, #1
   12bc4:	orrs	r2, r2, r3
   12bc8:	mov	r3, r6
   12bcc:	moveq	r6, r2
   12bd0:	beq	1274c <__assert_fail@plt+0x1858>
   12bd4:	mov	r6, #0
   12bd8:	b	12774 <__assert_fail@plt+0x1880>
   12bdc:	mov	r2, #0
   12be0:	mov	r6, r2
   12be4:	mov	r5, #98	; 0x62
   12be8:	b	12794 <__assert_fail@plt+0x18a0>
   12bec:	mov	r5, #97	; 0x61
   12bf0:	b	12af4 <__assert_fail@plt+0x1c00>
   12bf4:	mov	r3, r7
   12bf8:	mov	r6, r7
   12bfc:	mov	r2, #0
   12c00:	mov	r7, r3
   12c04:	mov	r5, #32
   12c08:	b	1272c <__assert_fail@plt+0x1838>
   12c0c:	cmp	r9, #0
   12c10:	mov	r3, r7
   12c14:	bne	131dc <__assert_fail@plt+0x22e8>
   12c18:	mov	r6, r7
   12c1c:	mov	r2, r9
   12c20:	mov	r7, r3
   12c24:	b	1272c <__assert_fail@plt+0x1838>
   12c28:	mov	r6, r7
   12c2c:	b	12748 <__assert_fail@plt+0x1854>
   12c30:	mov	r7, #0
   12c34:	ldr	r3, [sp, #64]	; 0x40
   12c38:	cmp	r3, #1
   12c3c:	bne	13298 <__assert_fail@plt+0x23a4>
   12c40:	bl	10df8 <__ctype_b_loc@plt>
   12c44:	ldr	r2, [sp, #64]	; 0x40
   12c48:	sxth	r3, r5
   12c4c:	mov	ip, r2
   12c50:	lsl	r3, r3, #1
   12c54:	ldr	r2, [r0]
   12c58:	ldrh	r3, [r2, r3]
   12c5c:	and	r3, r3, #16384	; 0x4000
   12c60:	cmp	r3, #0
   12c64:	ldr	r3, [sp, #28]
   12c68:	movne	r6, #1
   12c6c:	moveq	r6, #0
   12c70:	movne	r2, #0
   12c74:	andeq	r2, r3, #1
   12c78:	cmp	r2, #0
   12c7c:	bne	135a8 <__assert_fail@plt+0x26b4>
   12c80:	sub	r2, fp, #2
   12c84:	clz	r2, r2
   12c88:	lsr	r2, r2, #5
   12c8c:	b	1272c <__assert_fail@plt+0x1838>
   12c90:	cmp	r4, #0
   12c94:	bne	13954 <__assert_fail@plt+0x2a60>
   12c98:	str	r4, [sp, #28]
   12c9c:	cmp	sl, #0
   12ca0:	bne	13998 <__assert_fail@plt+0x2aa4>
   12ca4:	ldr	r3, [pc, #772]	; 12fb0 <__assert_fail@plt+0x20bc>
   12ca8:	mov	r4, #1
   12cac:	str	r4, [sp, #40]	; 0x28
   12cb0:	str	r3, [sp, #60]	; 0x3c
   12cb4:	str	r4, [sp, #52]	; 0x34
   12cb8:	str	sl, [sp, #72]	; 0x48
   12cbc:	str	sl, [sp, #68]	; 0x44
   12cc0:	str	sl, [sp, #44]	; 0x2c
   12cc4:	str	sl, [sp, #32]
   12cc8:	mov	r8, #2
   12ccc:	b	12294 <__assert_fail@plt+0x13a0>
   12cd0:	ldr	r3, [sp, #36]	; 0x24
   12cd4:	ldrb	r5, [r3, r9]
   12cd8:	cmp	r5, #126	; 0x7e
   12cdc:	ldrls	pc, [pc, r5, lsl #2]
   12ce0:	b	12c34 <__assert_fail@plt+0x1d40>
   12ce4:	andeq	r2, r1, r8, lsl pc
   12ce8:	andeq	r2, r1, r4, lsr ip
   12cec:	andeq	r2, r1, r4, lsr ip
   12cf0:	andeq	r2, r1, r4, lsr ip
   12cf4:	andeq	r2, r1, r4, lsr ip
   12cf8:	andeq	r2, r1, r4, lsr ip
   12cfc:	andeq	r2, r1, r4, lsr ip
   12d00:	andeq	r2, r1, r4, lsl #30
   12d04:	strdeq	r2, [r1], -r0
   12d08:	andeq	r2, r1, r8, ror #29
   12d0c:	andeq	r2, r1, r0, ror #29
   12d10:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12d14:	andeq	r2, r1, ip, ror pc
   12d18:	andeq	r2, r1, r4, lsl sl
   12d1c:	andeq	r2, r1, r4, lsr ip
   12d20:	andeq	r2, r1, r4, lsr ip
   12d24:	andeq	r2, r1, r4, lsr ip
   12d28:	andeq	r2, r1, r4, lsr ip
   12d2c:	andeq	r2, r1, r4, lsr ip
   12d30:	andeq	r2, r1, r4, lsr ip
   12d34:	andeq	r2, r1, r4, lsr ip
   12d38:	andeq	r2, r1, r4, lsr ip
   12d3c:	andeq	r2, r1, r4, lsr ip
   12d40:	andeq	r2, r1, r4, lsr ip
   12d44:	andeq	r2, r1, r4, lsr ip
   12d48:	andeq	r2, r1, r4, lsr ip
   12d4c:	andeq	r2, r1, r4, lsr ip
   12d50:	andeq	r2, r1, r4, lsr ip
   12d54:	andeq	r2, r1, r4, lsr ip
   12d58:	andeq	r2, r1, r4, lsr ip
   12d5c:	andeq	r2, r1, r4, lsr ip
   12d60:	andeq	r2, r1, r4, lsr ip
   12d64:	andeq	r2, r1, ip, ror #30
   12d68:	andeq	r2, r1, r8, asr pc
   12d6c:	andeq	r2, r1, r8, asr pc
   12d70:	andeq	r2, r1, r8, asr #30
   12d74:	andeq	r2, r1, r8, asr pc
   12d78:	andeq	r2, r1, r0, lsl #25
   12d7c:	andeq	r2, r1, r8, asr pc
   12d80:	andeq	r2, r1, r8, asr #18
   12d84:	andeq	r2, r1, r8, asr pc
   12d88:	andeq	r2, r1, r8, asr pc
   12d8c:	andeq	r2, r1, r8, asr pc
   12d90:	andeq	r2, r1, r0, lsl #25
   12d94:	andeq	r2, r1, r0, lsl #25
   12d98:	andeq	r2, r1, r0, lsl #25
   12d9c:	andeq	r2, r1, r0, lsl #25
   12da0:	andeq	r2, r1, r0, lsl #25
   12da4:	andeq	r2, r1, r0, lsl #25
   12da8:	andeq	r2, r1, r0, lsl #25
   12dac:	andeq	r2, r1, r0, lsl #25
   12db0:	andeq	r2, r1, r0, lsl #25
   12db4:	andeq	r2, r1, r0, lsl #25
   12db8:	andeq	r2, r1, r0, lsl #25
   12dbc:	andeq	r2, r1, r0, lsl #25
   12dc0:	andeq	r2, r1, r0, lsl #25
   12dc4:	andeq	r2, r1, r0, lsl #25
   12dc8:	andeq	r2, r1, r0, lsl #25
   12dcc:	andeq	r2, r1, r0, lsl #25
   12dd0:	andeq	r2, r1, r8, asr pc
   12dd4:	andeq	r2, r1, r8, asr pc
   12dd8:	andeq	r2, r1, r8, asr pc
   12ddc:	andeq	r2, r1, r8, asr pc
   12de0:	andeq	r2, r1, ip, lsl r9
   12de4:	andeq	r2, r1, r4, lsr ip
   12de8:	andeq	r2, r1, r0, lsl #25
   12dec:	andeq	r2, r1, r0, lsl #25
   12df0:	andeq	r2, r1, r0, lsl #25
   12df4:	andeq	r2, r1, r0, lsl #25
   12df8:	andeq	r2, r1, r0, lsl #25
   12dfc:	andeq	r2, r1, r0, lsl #25
   12e00:	andeq	r2, r1, r0, lsl #25
   12e04:	andeq	r2, r1, r0, lsl #25
   12e08:	andeq	r2, r1, r0, lsl #25
   12e0c:	andeq	r2, r1, r0, lsl #25
   12e10:	andeq	r2, r1, r0, lsl #25
   12e14:	andeq	r2, r1, r0, lsl #25
   12e18:	andeq	r2, r1, r0, lsl #25
   12e1c:	andeq	r2, r1, r0, lsl #25
   12e20:	andeq	r2, r1, r0, lsl #25
   12e24:	andeq	r2, r1, r0, lsl #25
   12e28:	andeq	r2, r1, r0, lsl #25
   12e2c:	andeq	r2, r1, r0, lsl #25
   12e30:	andeq	r2, r1, r0, lsl #25
   12e34:	andeq	r2, r1, r0, lsl #25
   12e38:	andeq	r2, r1, r0, lsl #25
   12e3c:	andeq	r2, r1, r0, lsl #25
   12e40:	andeq	r2, r1, r0, lsl #25
   12e44:	andeq	r2, r1, r0, lsl #25
   12e48:	andeq	r2, r1, r0, lsl #25
   12e4c:	andeq	r2, r1, r0, lsl #25
   12e50:	andeq	r2, r1, r8, asr pc
   12e54:	ldrdeq	r2, [r1], -r4
   12e58:	andeq	r2, r1, r0, lsl #25
   12e5c:	andeq	r2, r1, r8, asr pc
   12e60:	andeq	r2, r1, r0, lsl #25
   12e64:	andeq	r2, r1, r8, asr pc
   12e68:	andeq	r2, r1, r0, lsl #25
   12e6c:	andeq	r2, r1, r0, lsl #25
   12e70:	andeq	r2, r1, r0, lsl #25
   12e74:	andeq	r2, r1, r0, lsl #25
   12e78:	andeq	r2, r1, r0, lsl #25
   12e7c:	andeq	r2, r1, r0, lsl #25
   12e80:	andeq	r2, r1, r0, lsl #25
   12e84:	andeq	r2, r1, r0, lsl #25
   12e88:	andeq	r2, r1, r0, lsl #25
   12e8c:	andeq	r2, r1, r0, lsl #25
   12e90:	andeq	r2, r1, r0, lsl #25
   12e94:	andeq	r2, r1, r0, lsl #25
   12e98:	andeq	r2, r1, r0, lsl #25
   12e9c:	andeq	r2, r1, r0, lsl #25
   12ea0:	andeq	r2, r1, r0, lsl #25
   12ea4:	andeq	r2, r1, r0, lsl #25
   12ea8:	andeq	r2, r1, r0, lsl #25
   12eac:	andeq	r2, r1, r0, lsl #25
   12eb0:	andeq	r2, r1, r0, lsl #25
   12eb4:	andeq	r2, r1, r0, lsl #25
   12eb8:	andeq	r2, r1, r0, lsl #25
   12ebc:	andeq	r2, r1, r0, lsl #25
   12ec0:	andeq	r2, r1, r0, lsl #25
   12ec4:	andeq	r2, r1, r0, lsl #25
   12ec8:	andeq	r2, r1, r0, lsl #25
   12ecc:	andeq	r2, r1, r0, lsl #25
   12ed0:	andeq	r2, r1, ip, ror #13
   12ed4:	andeq	r2, r1, r8, asr pc
   12ed8:	andeq	r2, r1, ip, ror #13
   12edc:	andeq	r2, r1, r8, asr #30
   12ee0:	mov	r3, #110	; 0x6e
   12ee4:	b	12a18 <__assert_fail@plt+0x1b24>
   12ee8:	mov	r3, #116	; 0x74
   12eec:	b	12a18 <__assert_fail@plt+0x1b24>
   12ef0:	sub	r2, fp, #2
   12ef4:	mov	r3, #98	; 0x62
   12ef8:	clz	r2, r2
   12efc:	lsr	r2, r2, #5
   12f00:	b	12904 <__assert_fail@plt+0x1a10>
   12f04:	sub	r2, fp, #2
   12f08:	mov	r3, #97	; 0x61
   12f0c:	clz	r2, r2
   12f10:	lsr	r2, r2, #5
   12f14:	b	12904 <__assert_fail@plt+0x1a10>
   12f18:	ldr	r3, [sp, #28]
   12f1c:	cmp	r3, #0
   12f20:	bne	12b10 <__assert_fail@plt+0x1c1c>
   12f24:	ldr	r3, [sp, #164]	; 0xa4
   12f28:	tst	r3, #1
   12f2c:	bne	135a0 <__assert_fail@plt+0x26ac>
   12f30:	ldr	r6, [sp, #28]
   12f34:	sub	r2, fp, #2
   12f38:	mov	r7, r6
   12f3c:	clz	r2, r2
   12f40:	lsr	r2, r2, #5
   12f44:	b	1272c <__assert_fail@plt+0x1838>
   12f48:	sub	r2, fp, #2
   12f4c:	clz	r2, r2
   12f50:	lsr	r2, r2, #5
   12f54:	b	12718 <__assert_fail@plt+0x1824>
   12f58:	sub	r2, fp, #2
   12f5c:	mov	r6, #0
   12f60:	clz	r2, r2
   12f64:	lsr	r2, r2, #5
   12f68:	b	12720 <__assert_fail@plt+0x182c>
   12f6c:	sub	r2, fp, #2
   12f70:	clz	r2, r2
   12f74:	lsr	r2, r2, #5
   12f78:	b	12720 <__assert_fail@plt+0x182c>
   12f7c:	sub	r2, fp, #2
   12f80:	mov	r3, #102	; 0x66
   12f84:	clz	r2, r2
   12f88:	lsr	r2, r2, #5
   12f8c:	b	12904 <__assert_fail@plt+0x1a10>
   12f90:	sub	r2, fp, #2
   12f94:	mov	r3, #118	; 0x76
   12f98:	clz	r2, r2
   12f9c:	lsr	r2, r2, #5
   12fa0:	b	12904 <__assert_fail@plt+0x1a10>
   12fa4:	andeq	r6, r2, r8, lsl #30
   12fa8:	andeq	r6, r1, r8, lsl #16
   12fac:	strdeq	r6, [r1], -r0
   12fb0:	andeq	r6, r1, r4, lsl #16
   12fb4:	ldr	r3, [sp, #48]	; 0x30
   12fb8:	ldrb	r5, [r3]
   12fbc:	cmp	r5, #126	; 0x7e
   12fc0:	ldrls	pc, [pc, r5, lsl #2]
   12fc4:	b	12c30 <__assert_fail@plt+0x1d3c>
   12fc8:	andeq	r2, r1, r0, lsl fp
   12fcc:	andeq	r2, r1, r0, lsr ip
   12fd0:	andeq	r2, r1, r0, lsr ip
   12fd4:	andeq	r2, r1, r0, lsr ip
   12fd8:	andeq	r2, r1, r0, lsr ip
   12fdc:	andeq	r2, r1, r0, lsr ip
   12fe0:	andeq	r2, r1, r0, lsr ip
   12fe4:	andeq	r3, r1, r8, lsl #4
   12fe8:	andeq	r3, r1, r0, lsl #4
   12fec:	ldrdeq	r2, [r1], -ip
   12ff0:	andeq	r2, r1, r4, lsr #21
   12ff4:	strdeq	r2, [r1], -ip
   12ff8:	andeq	r2, r1, r4, ror #21
   12ffc:	strdeq	r3, [r1], -r4
   13000:	andeq	r2, r1, r0, lsr ip
   13004:	andeq	r2, r1, r0, lsr ip
   13008:	andeq	r2, r1, r0, lsr ip
   1300c:	andeq	r2, r1, r0, lsr ip
   13010:	andeq	r2, r1, r0, lsr ip
   13014:	andeq	r2, r1, r0, lsr ip
   13018:	andeq	r2, r1, r0, lsr ip
   1301c:	andeq	r2, r1, r0, lsr ip
   13020:	andeq	r2, r1, r0, lsr ip
   13024:	andeq	r2, r1, r0, lsr ip
   13028:	andeq	r2, r1, r0, lsr ip
   1302c:	andeq	r2, r1, r0, lsr ip
   13030:	andeq	r2, r1, r0, lsr ip
   13034:	andeq	r2, r1, r0, lsr ip
   13038:	andeq	r2, r1, r0, lsr ip
   1303c:	andeq	r2, r1, r0, lsr ip
   13040:	andeq	r2, r1, r0, lsr ip
   13044:	andeq	r2, r1, r0, lsr ip
   13048:	andeq	r3, r1, ip, ror #3
   1304c:	andeq	r2, r1, r4, lsl #22
   13050:	andeq	r2, r1, r4, lsl #22
   13054:	ldrdeq	r3, [r1], -r0
   13058:	andeq	r2, r1, r4, lsl #22
   1305c:	andeq	r3, r1, r4, asr #3
   13060:	andeq	r2, r1, r4, lsl #22
   13064:	andeq	r2, r1, r4, asr #18
   13068:	andeq	r2, r1, r4, lsl #22
   1306c:	andeq	r2, r1, r4, lsl #22
   13070:	andeq	r2, r1, r4, lsl #22
   13074:	andeq	r3, r1, r4, asr #3
   13078:	andeq	r3, r1, r4, asr #3
   1307c:	andeq	r3, r1, r4, asr #3
   13080:	andeq	r3, r1, r4, asr #3
   13084:	andeq	r3, r1, r4, asr #3
   13088:	andeq	r3, r1, r4, asr #3
   1308c:	andeq	r3, r1, r4, asr #3
   13090:	andeq	r3, r1, r4, asr #3
   13094:	andeq	r3, r1, r4, asr #3
   13098:	andeq	r3, r1, r4, asr #3
   1309c:	andeq	r3, r1, r4, asr #3
   130a0:	andeq	r3, r1, r4, asr #3
   130a4:	andeq	r3, r1, r4, asr #3
   130a8:	andeq	r3, r1, r4, asr #3
   130ac:	andeq	r3, r1, r4, asr #3
   130b0:	andeq	r3, r1, r4, asr #3
   130b4:	andeq	r2, r1, r4, lsl #22
   130b8:	andeq	r2, r1, r4, lsl #22
   130bc:	andeq	r2, r1, r4, lsl #22
   130c0:	andeq	r2, r1, r4, lsl #22
   130c4:	andeq	r2, r1, r8, lsl r9
   130c8:	andeq	r2, r1, r0, lsr ip
   130cc:	andeq	r3, r1, r4, asr #3
   130d0:	andeq	r3, r1, r4, asr #3
   130d4:	andeq	r3, r1, r4, asr #3
   130d8:	andeq	r3, r1, r4, asr #3
   130dc:	andeq	r3, r1, r4, asr #3
   130e0:	andeq	r3, r1, r4, asr #3
   130e4:	andeq	r3, r1, r4, asr #3
   130e8:	andeq	r3, r1, r4, asr #3
   130ec:	andeq	r3, r1, r4, asr #3
   130f0:	andeq	r3, r1, r4, asr #3
   130f4:	andeq	r3, r1, r4, asr #3
   130f8:	andeq	r3, r1, r4, asr #3
   130fc:	andeq	r3, r1, r4, asr #3
   13100:	andeq	r3, r1, r4, asr #3
   13104:	andeq	r3, r1, r4, asr #3
   13108:	andeq	r3, r1, r4, asr #3
   1310c:	andeq	r3, r1, r4, asr #3
   13110:	andeq	r3, r1, r4, asr #3
   13114:	andeq	r3, r1, r4, asr #3
   13118:	andeq	r3, r1, r4, asr #3
   1311c:	andeq	r3, r1, r4, asr #3
   13120:	andeq	r3, r1, r4, asr #3
   13124:	andeq	r3, r1, r4, asr #3
   13128:	andeq	r3, r1, r4, asr #3
   1312c:	andeq	r3, r1, r4, asr #3
   13130:	andeq	r3, r1, r4, asr #3
   13134:	andeq	r2, r1, r4, lsl #22
   13138:	ldrdeq	r2, [r1], -r0
   1313c:	andeq	r3, r1, r4, asr #3
   13140:	andeq	r2, r1, r4, lsl #22
   13144:	andeq	r3, r1, r4, asr #3
   13148:	andeq	r2, r1, r4, lsl #22
   1314c:	andeq	r3, r1, r4, asr #3
   13150:	andeq	r3, r1, r4, asr #3
   13154:	andeq	r3, r1, r4, asr #3
   13158:	andeq	r3, r1, r4, asr #3
   1315c:	andeq	r3, r1, r4, asr #3
   13160:	andeq	r3, r1, r4, asr #3
   13164:	andeq	r3, r1, r4, asr #3
   13168:	andeq	r3, r1, r4, asr #3
   1316c:	andeq	r3, r1, r4, asr #3
   13170:	andeq	r3, r1, r4, asr #3
   13174:	andeq	r3, r1, r4, asr #3
   13178:	andeq	r3, r1, r4, asr #3
   1317c:	andeq	r3, r1, r4, asr #3
   13180:	andeq	r3, r1, r4, asr #3
   13184:	andeq	r3, r1, r4, asr #3
   13188:	andeq	r3, r1, r4, asr #3
   1318c:	andeq	r3, r1, r4, asr #3
   13190:	andeq	r3, r1, r4, asr #3
   13194:	andeq	r3, r1, r4, asr #3
   13198:	andeq	r3, r1, r4, asr #3
   1319c:	andeq	r3, r1, r4, asr #3
   131a0:	andeq	r3, r1, r4, asr #3
   131a4:	andeq	r3, r1, r4, asr #3
   131a8:	andeq	r3, r1, r4, asr #3
   131ac:	andeq	r3, r1, r4, asr #3
   131b0:	andeq	r3, r1, r4, asr #3
   131b4:	andeq	r2, r1, r8, ror #13
   131b8:	andeq	r2, r1, r4, lsl #22
   131bc:	andeq	r2, r1, r8, ror #13
   131c0:	ldrdeq	r3, [r1], -r0
   131c4:	mov	r6, r7
   131c8:	mov	r7, #0
   131cc:	b	12748 <__assert_fail@plt+0x1854>
   131d0:	cmp	r9, #0
   131d4:	mov	r3, #0
   131d8:	beq	12c18 <__assert_fail@plt+0x1d24>
   131dc:	mov	r6, #0
   131e0:	mov	r7, r3
   131e4:	mov	r3, r6
   131e8:	b	1274c <__assert_fail@plt+0x1858>
   131ec:	mov	r3, #0
   131f0:	b	12bf8 <__assert_fail@plt+0x1d04>
   131f4:	mov	r7, #0
   131f8:	mov	r3, #114	; 0x72
   131fc:	b	12a18 <__assert_fail@plt+0x1b24>
   13200:	mov	r5, #98	; 0x62
   13204:	b	12aa8 <__assert_fail@plt+0x1bb4>
   13208:	mov	r5, #97	; 0x61
   1320c:	b	12ae8 <__assert_fail@plt+0x1bf4>
   13210:	ldr	r3, [sp, #32]
   13214:	cmp	r3, #0
   13218:	bne	13660 <__assert_fail@plt+0x276c>
   1321c:	add	r9, r9, #1
   13220:	ldr	r3, [sp, #44]	; 0x2c
   13224:	mov	r6, #0
   13228:	mov	r5, #92	; 0x5c
   1322c:	b	129e0 <__assert_fail@plt+0x1aec>
   13230:	ldr	r3, [sp, #36]	; 0x24
   13234:	ldrb	r3, [r3, #1]
   13238:	adds	r3, r3, #0
   1323c:	movne	r3, #1
   13240:	b	12704 <__assert_fail@plt+0x1810>
   13244:	ldr	r3, [sp, #164]	; 0xa4
   13248:	ands	r3, r3, #4
   1324c:	beq	13270 <__assert_fail@plt+0x237c>
   13250:	ldr	r2, [sp, #24]
   13254:	add	r3, r9, #2
   13258:	cmp	r3, r2
   1325c:	bcs	13270 <__assert_fail@plt+0x237c>
   13260:	ldr	r2, [sp, #48]	; 0x30
   13264:	ldrb	r5, [r2, #1]
   13268:	cmp	r5, #63	; 0x3f
   1326c:	beq	136d4 <__assert_fail@plt+0x27e0>
   13270:	mov	r2, #0
   13274:	mov	r6, r2
   13278:	mov	r5, #63	; 0x3f
   1327c:	b	1272c <__assert_fail@plt+0x1838>
   13280:	ldr	r3, [sp, #32]
   13284:	cmp	r3, #0
   13288:	bne	13660 <__assert_fail@plt+0x276c>
   1328c:	mov	r6, r3
   13290:	mov	r5, #63	; 0x3f
   13294:	b	12774 <__assert_fail@plt+0x1880>
   13298:	ldr	r3, [sp, #24]
   1329c:	cmn	r3, #1
   132a0:	mov	r3, #0
   132a4:	str	r3, [sp, #108]	; 0x6c
   132a8:	str	r3, [sp, #112]	; 0x70
   132ac:	bne	132bc <__assert_fail@plt+0x23c8>
   132b0:	ldr	r0, [sp, #36]	; 0x24
   132b4:	bl	10e10 <strlen@plt>
   132b8:	str	r0, [sp, #24]
   132bc:	mov	r3, #0
   132c0:	str	sl, [sp, #88]	; 0x58
   132c4:	ldr	sl, [sp, #36]	; 0x24
   132c8:	str	r5, [sp, #92]	; 0x5c
   132cc:	mov	r5, r3
   132d0:	str	r7, [sp, #96]	; 0x60
   132d4:	str	r4, [sp, #100]	; 0x64
   132d8:	str	r8, [sp, #84]	; 0x54
   132dc:	ldr	r3, [sp, #24]
   132e0:	add	r4, r9, r5
   132e4:	add	r7, sl, r4
   132e8:	sub	r2, r3, r4
   132ec:	mov	r1, r7
   132f0:	add	r3, sp, #108	; 0x6c
   132f4:	add	r0, sp, #104	; 0x68
   132f8:	bl	15644 <__assert_fail@plt+0x4750>
   132fc:	subs	r8, r0, #0
   13300:	beq	13350 <__assert_fail@plt+0x245c>
   13304:	cmn	r8, #1
   13308:	beq	136b0 <__assert_fail@plt+0x27bc>
   1330c:	cmn	r8, #2
   13310:	beq	137d0 <__assert_fail@plt+0x28dc>
   13314:	ldr	r3, [sp, #32]
   13318:	cmp	fp, #2
   1331c:	movne	r3, #0
   13320:	andeq	r3, r3, #1
   13324:	cmp	r3, #0
   13328:	bne	134b0 <__assert_fail@plt+0x25bc>
   1332c:	ldr	r0, [sp, #104]	; 0x68
   13330:	bl	10d50 <iswprint@plt>
   13334:	add	r5, r5, r8
   13338:	cmp	r0, #0
   1333c:	add	r0, sp, #108	; 0x6c
   13340:	moveq	r6, #0
   13344:	bl	10cfc <mbsinit@plt>
   13348:	cmp	r0, #0
   1334c:	beq	132dc <__assert_fail@plt+0x23e8>
   13350:	ldr	r3, [sp, #28]
   13354:	mov	ip, r5
   13358:	eor	r2, r6, #1
   1335c:	ldr	r5, [sp, #92]	; 0x5c
   13360:	ldr	r7, [sp, #96]	; 0x60
   13364:	ldr	r4, [sp, #100]	; 0x64
   13368:	ldr	r8, [sp, #84]	; 0x54
   1336c:	ldr	sl, [sp, #88]	; 0x58
   13370:	and	r2, r2, r3
   13374:	cmp	ip, #1
   13378:	bls	12c78 <__assert_fail@plt+0x1d84>
   1337c:	add	r1, ip, r9
   13380:	ldr	lr, [sp, #48]	; 0x30
   13384:	mov	r0, #0
   13388:	str	r6, [sp, #48]	; 0x30
   1338c:	mov	ip, #39	; 0x27
   13390:	ldr	r6, [sp, #44]	; 0x2c
   13394:	b	1344c <__assert_fail@plt+0x2558>
   13398:	ldr	r0, [sp, #32]
   1339c:	sub	r3, fp, #2
   133a0:	cmp	r0, #0
   133a4:	clz	r3, r3
   133a8:	lsr	r3, r3, #5
   133ac:	bne	135b4 <__assert_fail@plt+0x26c0>
   133b0:	eor	r0, r6, #1
   133b4:	ands	r3, r3, r0
   133b8:	beq	133e8 <__assert_fail@plt+0x24f4>
   133bc:	add	r0, r4, #1
   133c0:	cmp	sl, r4
   133c4:	strbhi	ip, [r8, r4]
   133c8:	cmp	sl, r0
   133cc:	movhi	r6, #36	; 0x24
   133d0:	strbhi	r6, [r8, r0]
   133d4:	add	r0, r4, #2
   133d8:	mov	r6, r3
   133dc:	add	r4, r4, #3
   133e0:	cmp	sl, r0
   133e4:	strbhi	ip, [r8, r0]
   133e8:	cmp	sl, r4
   133ec:	movhi	r3, #92	; 0x5c
   133f0:	strbhi	r3, [r8, r4]
   133f4:	add	r3, r4, #1
   133f8:	cmp	sl, r3
   133fc:	lsrhi	r0, r5, #6
   13400:	addhi	r0, r0, #48	; 0x30
   13404:	strbhi	r0, [r8, r3]
   13408:	add	r0, r4, #2
   1340c:	cmp	sl, r0
   13410:	lsrhi	r3, r5, #3
   13414:	andhi	r3, r3, #7
   13418:	addhi	r3, r3, #48	; 0x30
   1341c:	add	r9, r9, #1
   13420:	strbhi	r3, [r8, r0]
   13424:	and	r5, r5, #7
   13428:	cmp	r9, r1
   1342c:	add	r5, r5, #48	; 0x30
   13430:	add	r4, r4, #3
   13434:	bcs	135d4 <__assert_fail@plt+0x26e0>
   13438:	mov	r0, r2
   1343c:	cmp	sl, r4
   13440:	strbhi	r5, [r8, r4]
   13444:	ldrb	r5, [lr, #1]!
   13448:	add	r4, r4, #1
   1344c:	cmp	r2, #0
   13450:	bne	13398 <__assert_fail@plt+0x24a4>
   13454:	eor	r3, r0, #1
   13458:	and	r3, r3, r6
   1345c:	cmp	r7, #0
   13460:	uxtb	r3, r3
   13464:	beq	13478 <__assert_fail@plt+0x2584>
   13468:	cmp	sl, r4
   1346c:	movhi	r7, #92	; 0x5c
   13470:	strbhi	r7, [r8, r4]
   13474:	add	r4, r4, #1
   13478:	add	r9, r9, #1
   1347c:	cmp	r9, r1
   13480:	bcs	135c8 <__assert_fail@plt+0x26d4>
   13484:	cmp	r3, #0
   13488:	beq	135f4 <__assert_fail@plt+0x2700>
   1348c:	cmp	sl, r4
   13490:	add	r3, r4, #1
   13494:	strbhi	ip, [r8, r4]
   13498:	mov	r7, #0
   1349c:	cmp	sl, r3
   134a0:	strbhi	ip, [r8, r3]
   134a4:	add	r4, r4, #2
   134a8:	mov	r6, r7
   134ac:	b	1343c <__assert_fail@plt+0x2548>
   134b0:	cmp	r8, #1
   134b4:	beq	1332c <__assert_fail@plt+0x2438>
   134b8:	add	r1, r4, #1
   134bc:	add	r3, sl, r8
   134c0:	add	r1, sl, r1
   134c4:	add	r4, r3, r4
   134c8:	ldrb	r3, [r1], #1
   134cc:	sub	r3, r3, #91	; 0x5b
   134d0:	cmp	r3, #33	; 0x21
   134d4:	ldrls	pc, [pc, r3, lsl #2]
   134d8:	b	13564 <__assert_fail@plt+0x2670>
   134dc:	andeq	r3, r1, r0, ror r5
   134e0:	andeq	r3, r1, r0, ror r5
   134e4:	andeq	r3, r1, r4, ror #10
   134e8:	andeq	r3, r1, r0, ror r5
   134ec:	andeq	r3, r1, r4, ror #10
   134f0:	andeq	r3, r1, r0, ror r5
   134f4:	andeq	r3, r1, r4, ror #10
   134f8:	andeq	r3, r1, r4, ror #10
   134fc:	andeq	r3, r1, r4, ror #10
   13500:	andeq	r3, r1, r4, ror #10
   13504:	andeq	r3, r1, r4, ror #10
   13508:	andeq	r3, r1, r4, ror #10
   1350c:	andeq	r3, r1, r4, ror #10
   13510:	andeq	r3, r1, r4, ror #10
   13514:	andeq	r3, r1, r4, ror #10
   13518:	andeq	r3, r1, r4, ror #10
   1351c:	andeq	r3, r1, r4, ror #10
   13520:	andeq	r3, r1, r4, ror #10
   13524:	andeq	r3, r1, r4, ror #10
   13528:	andeq	r3, r1, r4, ror #10
   1352c:	andeq	r3, r1, r4, ror #10
   13530:	andeq	r3, r1, r4, ror #10
   13534:	andeq	r3, r1, r4, ror #10
   13538:	andeq	r3, r1, r4, ror #10
   1353c:	andeq	r3, r1, r4, ror #10
   13540:	andeq	r3, r1, r4, ror #10
   13544:	andeq	r3, r1, r4, ror #10
   13548:	andeq	r3, r1, r4, ror #10
   1354c:	andeq	r3, r1, r4, ror #10
   13550:	andeq	r3, r1, r4, ror #10
   13554:	andeq	r3, r1, r4, ror #10
   13558:	andeq	r3, r1, r4, ror #10
   1355c:	andeq	r3, r1, r4, ror #10
   13560:	andeq	r3, r1, r0, ror r5
   13564:	cmp	r4, r1
   13568:	bne	134c8 <__assert_fail@plt+0x25d4>
   1356c:	b	1332c <__assert_fail@plt+0x2438>
   13570:	ldr	fp, [sp, #84]	; 0x54
   13574:	ldr	sl, [sp, #88]	; 0x58
   13578:	mov	r8, #2
   1357c:	b	12a38 <__assert_fail@plt+0x1b44>
   13580:	cmp	sl, r4
   13584:	movls	r1, r4
   13588:	bls	12b88 <__assert_fail@plt+0x1c94>
   1358c:	ldr	r3, [sp, #44]	; 0x2c
   13590:	b	12b78 <__assert_fail@plt+0x1c84>
   13594:	str	sl, [sp, #72]	; 0x48
   13598:	ldr	sl, [sp, #32]
   1359c:	b	129b0 <__assert_fail@plt+0x1abc>
   135a0:	add	r9, r9, #1
   135a4:	b	122a4 <__assert_fail@plt+0x13b0>
   135a8:	ldr	r2, [sp, #28]
   135ac:	mov	r6, #0
   135b0:	b	1337c <__assert_fail@plt+0x2488>
   135b4:	str	fp, [sp, #160]	; 0xa0
   135b8:	str	r3, [sp, #28]
   135bc:	mov	fp, r8
   135c0:	ldr	r8, [sp, #160]	; 0xa0
   135c4:	b	12a38 <__assert_fail@plt+0x1b44>
   135c8:	str	r6, [sp, #44]	; 0x2c
   135cc:	ldr	r6, [sp, #48]	; 0x30
   135d0:	b	129e0 <__assert_fail@plt+0x1aec>
   135d4:	str	r6, [sp, #44]	; 0x2c
   135d8:	ldr	r6, [sp, #48]	; 0x30
   135dc:	b	127ec <__assert_fail@plt+0x18f8>
   135e0:	add	r4, r4, #4
   135e4:	str	r3, [sp, #44]	; 0x2c
   135e8:	mov	r6, #0
   135ec:	mov	r5, #48	; 0x30
   135f0:	b	12774 <__assert_fail@plt+0x1880>
   135f4:	mov	r7, r3
   135f8:	b	1343c <__assert_fail@plt+0x2548>
   135fc:	ldr	r3, [pc, #-1624]	; 12fac <__assert_fail@plt+0x20b8>
   13600:	mov	r4, #1
   13604:	str	r4, [sp, #40]	; 0x28
   13608:	str	r4, [sp, #28]
   1360c:	str	r4, [sp, #52]	; 0x34
   13610:	str	sl, [sp, #72]	; 0x48
   13614:	str	sl, [sp, #68]	; 0x44
   13618:	str	sl, [sp, #44]	; 0x2c
   1361c:	str	sl, [sp, #32]
   13620:	str	r3, [sp, #60]	; 0x3c
   13624:	b	12294 <__assert_fail@plt+0x13a0>
   13628:	mov	r3, r6
   1362c:	mov	r5, #48	; 0x30
   13630:	mov	r6, #0
   13634:	b	12774 <__assert_fail@plt+0x1880>
   13638:	cmp	sl, r4
   1363c:	movhi	r3, #48	; 0x30
   13640:	strbhi	r3, [r8, r4]
   13644:	add	r3, r1, #2
   13648:	cmp	sl, r3
   1364c:	movhi	r0, #48	; 0x30
   13650:	strbhi	r0, [r8, r3]
   13654:	add	r4, r1, #3
   13658:	mov	r5, #48	; 0x30
   1365c:	b	12bbc <__assert_fail@plt+0x1cc8>
   13660:	str	fp, [sp, #160]	; 0xa0
   13664:	mov	fp, r8
   13668:	ldr	r8, [sp, #160]	; 0xa0
   1366c:	b	12a38 <__assert_fail@plt+0x1b44>
   13670:	ldr	r2, [sp, #80]	; 0x50
   13674:	ldrb	r3, [r2]
   13678:	cmp	r3, #0
   1367c:	beq	12264 <__assert_fail@plt+0x1370>
   13680:	cmp	sl, r4
   13684:	strbhi	r3, [fp, r4]
   13688:	ldrb	r3, [r2, #1]!
   1368c:	add	r4, r4, #1
   13690:	cmp	r3, #0
   13694:	bne	13680 <__assert_fail@plt+0x278c>
   13698:	b	12264 <__assert_fail@plt+0x1370>
   1369c:	str	fp, [sp, #160]	; 0xa0
   136a0:	mov	r3, #0
   136a4:	mov	fp, r8
   136a8:	ldr	r8, [sp, #160]	; 0xa0
   136ac:	b	12acc <__assert_fail@plt+0x1bd8>
   136b0:	mov	ip, r5
   136b4:	ldr	r7, [sp, #96]	; 0x60
   136b8:	ldr	r5, [sp, #92]	; 0x5c
   136bc:	ldr	r4, [sp, #100]	; 0x64
   136c0:	ldr	r8, [sp, #84]	; 0x54
   136c4:	ldr	sl, [sp, #88]	; 0x58
   136c8:	ldr	r2, [sp, #28]
   136cc:	mov	r6, #0
   136d0:	b	13374 <__assert_fail@plt+0x2480>
   136d4:	ldr	r2, [sp, #36]	; 0x24
   136d8:	ldrb	r1, [r2, r3]
   136dc:	sub	r2, r1, #33	; 0x21
   136e0:	cmp	r2, #29
   136e4:	ldrls	pc, [pc, r2, lsl #2]
   136e8:	b	137c4 <__assert_fail@plt+0x28d0>
   136ec:	andeq	r3, r1, r4, ror #14
   136f0:	andeq	r3, r1, r4, asr #15
   136f4:	andeq	r3, r1, r4, asr #15
   136f8:	andeq	r3, r1, r4, asr #15
   136fc:	andeq	r3, r1, r4, asr #15
   13700:	andeq	r3, r1, r4, asr #15
   13704:	andeq	r3, r1, r4, ror #14
   13708:	andeq	r3, r1, r4, ror #14
   1370c:	andeq	r3, r1, r4, ror #14
   13710:	andeq	r3, r1, r4, asr #15
   13714:	andeq	r3, r1, r4, asr #15
   13718:	andeq	r3, r1, r4, asr #15
   1371c:	andeq	r3, r1, r4, ror #14
   13720:	andeq	r3, r1, r4, asr #15
   13724:	andeq	r3, r1, r4, ror #14
   13728:	andeq	r3, r1, r4, asr #15
   1372c:	andeq	r3, r1, r4, asr #15
   13730:	andeq	r3, r1, r4, asr #15
   13734:	andeq	r3, r1, r4, asr #15
   13738:	andeq	r3, r1, r4, asr #15
   1373c:	andeq	r3, r1, r4, asr #15
   13740:	andeq	r3, r1, r4, asr #15
   13744:	andeq	r3, r1, r4, asr #15
   13748:	andeq	r3, r1, r4, asr #15
   1374c:	andeq	r3, r1, r4, asr #15
   13750:	andeq	r3, r1, r4, asr #15
   13754:	andeq	r3, r1, r4, asr #15
   13758:	andeq	r3, r1, r4, ror #14
   1375c:	andeq	r3, r1, r4, ror #14
   13760:	andeq	r3, r1, r4, ror #14
   13764:	ldr	r2, [sp, #32]
   13768:	cmp	r2, #0
   1376c:	bne	13870 <__assert_fail@plt+0x297c>
   13770:	cmp	sl, r4
   13774:	movhi	r2, #63	; 0x3f
   13778:	strbhi	r2, [r8, r4]
   1377c:	add	r2, r4, #1
   13780:	cmp	sl, r2
   13784:	movhi	r0, #34	; 0x22
   13788:	strbhi	r0, [r8, r2]
   1378c:	add	r2, r4, #2
   13790:	cmp	sl, r2
   13794:	movhi	r0, #34	; 0x22
   13798:	strbhi	r0, [r8, r2]
   1379c:	add	r2, r4, #3
   137a0:	cmp	sl, r2
   137a4:	movhi	r0, #63	; 0x3f
   137a8:	strbhi	r0, [r8, r2]
   137ac:	mov	r2, #0
   137b0:	add	r4, r4, #4
   137b4:	mov	r5, r1
   137b8:	mov	r9, r3
   137bc:	mov	r6, r2
   137c0:	b	12bbc <__assert_fail@plt+0x1cc8>
   137c4:	mov	r2, #0
   137c8:	mov	r6, r2
   137cc:	b	1272c <__assert_fail@plt+0x1838>
   137d0:	ldr	r0, [sp, #24]
   137d4:	mov	r1, r4
   137d8:	cmp	r1, r0
   137dc:	mov	r2, r7
   137e0:	mov	r3, r5
   137e4:	mov	ip, r5
   137e8:	ldr	r7, [sp, #96]	; 0x60
   137ec:	ldr	r5, [sp, #92]	; 0x5c
   137f0:	ldr	r4, [sp, #100]	; 0x64
   137f4:	ldr	r8, [sp, #84]	; 0x54
   137f8:	ldr	sl, [sp, #88]	; 0x58
   137fc:	bcs	13830 <__assert_fail@plt+0x293c>
   13800:	ldrb	r6, [r2]
   13804:	cmp	r6, #0
   13808:	bne	1381c <__assert_fail@plt+0x2928>
   1380c:	b	1394c <__assert_fail@plt+0x2a58>
   13810:	ldrb	r6, [r2, #1]!
   13814:	cmp	r6, #0
   13818:	beq	138d4 <__assert_fail@plt+0x29e0>
   1381c:	add	r3, r3, #1
   13820:	add	r1, r9, r3
   13824:	cmp	r1, r0
   13828:	bcc	13810 <__assert_fail@plt+0x291c>
   1382c:	mov	ip, r3
   13830:	ldr	r2, [sp, #28]
   13834:	mov	r6, #0
   13838:	b	13374 <__assert_fail@plt+0x2480>
   1383c:	mov	r3, #1
   13840:	str	r3, [sp, #40]	; 0x28
   13844:	str	r3, [sp, #32]
   13848:	str	r3, [sp, #28]
   1384c:	str	r3, [sp, #52]	; 0x34
   13850:	ldr	r3, [pc, #-2220]	; 12fac <__assert_fail@plt+0x20b8>
   13854:	mov	r2, #0
   13858:	str	r2, [sp, #68]	; 0x44
   1385c:	str	r2, [sp, #44]	; 0x2c
   13860:	str	r2, [sp, #72]	; 0x48
   13864:	mov	r4, r2
   13868:	str	r3, [sp, #60]	; 0x3c
   1386c:	b	12294 <__assert_fail@plt+0x13a0>
   13870:	str	fp, [sp, #160]	; 0xa0
   13874:	mov	fp, r8
   13878:	ldr	r8, [sp, #160]	; 0xa0
   1387c:	b	12a44 <__assert_fail@plt+0x1b50>
   13880:	mov	r2, r3
   13884:	ldr	r3, [sp, #60]	; 0x3c
   13888:	cmp	r3, #0
   1388c:	moveq	r2, #0
   13890:	andne	r2, r2, #1
   13894:	cmp	r2, #0
   13898:	beq	138c4 <__assert_fail@plt+0x29d0>
   1389c:	mov	r2, r3
   138a0:	ldrb	r3, [r3]
   138a4:	cmp	r3, #0
   138a8:	beq	138c4 <__assert_fail@plt+0x29d0>
   138ac:	cmp	sl, r4
   138b0:	strbhi	r3, [fp, r4]
   138b4:	ldrb	r3, [r2, #1]!
   138b8:	add	r4, r4, #1
   138bc:	cmp	r3, #0
   138c0:	bne	138ac <__assert_fail@plt+0x29b8>
   138c4:	cmp	sl, r4
   138c8:	movhi	r3, #0
   138cc:	strbhi	r3, [fp, r4]
   138d0:	b	12a84 <__assert_fail@plt+0x1b90>
   138d4:	mov	ip, r3
   138d8:	ldr	r2, [sp, #28]
   138dc:	b	13374 <__assert_fail@plt+0x2480>
   138e0:	str	fp, [sp, #160]	; 0xa0
   138e4:	mov	fp, r8
   138e8:	ldr	r8, [sp, #160]	; 0xa0
   138ec:	sub	r3, r8, #2
   138f0:	clz	r3, r3
   138f4:	lsr	r3, r3, #5
   138f8:	str	r3, [sp, #28]
   138fc:	b	12a38 <__assert_fail@plt+0x1b44>
   13900:	ldr	r3, [sp, #76]	; 0x4c
   13904:	mov	ip, #5
   13908:	str	r3, [sp, #16]
   1390c:	ldr	r3, [sp, #80]	; 0x50
   13910:	ldr	r2, [sp, #36]	; 0x24
   13914:	str	r3, [sp, #12]
   13918:	ldr	r3, [sp, #56]	; 0x38
   1391c:	ldr	r1, [sp, #72]	; 0x48
   13920:	str	r3, [sp, #8]
   13924:	ldr	r3, [sp, #164]	; 0xa4
   13928:	mov	r0, fp
   1392c:	str	r3, [sp, #4]
   13930:	str	ip, [sp]
   13934:	ldr	r3, [sp, #24]
   13938:	bl	1219c <__assert_fail@plt+0x12a8>
   1393c:	mov	r4, r0
   13940:	b	12a84 <__assert_fail@plt+0x1b90>
   13944:	mov	r8, #2
   13948:	b	12a38 <__assert_fail@plt+0x1b44>
   1394c:	ldr	r2, [sp, #28]
   13950:	b	13374 <__assert_fail@plt+0x2480>
   13954:	mov	r3, #0
   13958:	str	r3, [sp, #68]	; 0x44
   1395c:	str	r3, [sp, #44]	; 0x2c
   13960:	str	r3, [sp, #72]	; 0x48
   13964:	str	r3, [sp, #28]
   13968:	mov	r4, r3
   1396c:	ldr	r3, [pc, #-2500]	; 12fb0 <__assert_fail@plt+0x20bc>
   13970:	mov	r2, #1
   13974:	str	r2, [sp, #40]	; 0x28
   13978:	str	r2, [sp, #32]
   1397c:	str	r2, [sp, #52]	; 0x34
   13980:	str	r3, [sp, #60]	; 0x3c
   13984:	b	12294 <__assert_fail@plt+0x13a0>
   13988:	bl	10d2c <__stack_chk_fail@plt>
   1398c:	mov	r5, r3
   13990:	mov	r6, #0
   13994:	b	12788 <__assert_fail@plt+0x1894>
   13998:	mov	r3, #0
   1399c:	mov	r2, #1
   139a0:	str	r3, [sp, #44]	; 0x2c
   139a4:	str	r3, [sp, #72]	; 0x48
   139a8:	str	r2, [sp, #40]	; 0x28
   139ac:	b	128a4 <__assert_fail@plt+0x19b0>
   139b0:	bl	10edc <abort@plt>
   139b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139b8:	sub	sp, sp, #44	; 0x2c
   139bc:	mov	r6, r0
   139c0:	mov	r4, r3
   139c4:	mov	sl, r1
   139c8:	mov	fp, r2
   139cc:	bl	10e28 <__errno_location@plt>
   139d0:	ldr	r7, [pc, #364]	; 13b44 <__assert_fail@plt+0x2c50>
   139d4:	cmp	r6, #0
   139d8:	ldr	r5, [r7]
   139dc:	ldr	r3, [r0]
   139e0:	str	r3, [sp, #24]
   139e4:	blt	13b40 <__assert_fail@plt+0x2c4c>
   139e8:	ldr	r3, [r7, #4]
   139ec:	mov	r8, r0
   139f0:	cmp	r3, r6
   139f4:	bgt	13a40 <__assert_fail@plt+0x2b4c>
   139f8:	cmn	r6, #-268435454	; 0xf0000002
   139fc:	bgt	13b3c <__assert_fail@plt+0x2c48>
   13a00:	add	r9, r6, #1
   13a04:	add	r3, r7, #8
   13a08:	cmp	r5, r3
   13a0c:	lsl	r1, r9, #3
   13a10:	beq	13b1c <__assert_fail@plt+0x2c28>
   13a14:	mov	r0, r5
   13a18:	bl	147a8 <__assert_fail@plt+0x38b4>
   13a1c:	mov	r5, r0
   13a20:	str	r0, [r7]
   13a24:	ldr	r0, [r7, #4]
   13a28:	mov	r1, #0
   13a2c:	sub	r2, r9, r0
   13a30:	add	r0, r5, r0, lsl #3
   13a34:	lsl	r2, r2, #3
   13a38:	bl	10e40 <memset@plt>
   13a3c:	str	r9, [r7, #4]
   13a40:	add	r3, r5, r6, lsl #3
   13a44:	ldr	r1, [r4, #4]
   13a48:	ldr	r7, [r3, #4]
   13a4c:	ldr	r9, [r5, r6, lsl #3]
   13a50:	ldr	r2, [r4, #40]	; 0x28
   13a54:	ldr	ip, [r4, #44]	; 0x2c
   13a58:	str	r3, [sp, #28]
   13a5c:	ldr	r3, [r4]
   13a60:	orr	r1, r1, #1
   13a64:	add	lr, r4, #8
   13a68:	str	r1, [sp, #36]	; 0x24
   13a6c:	str	r1, [sp, #4]
   13a70:	str	r2, [sp, #12]
   13a74:	str	r3, [sp]
   13a78:	mov	r0, r7
   13a7c:	mov	r1, r9
   13a80:	str	ip, [sp, #16]
   13a84:	str	lr, [sp, #8]
   13a88:	mov	r3, fp
   13a8c:	mov	r2, sl
   13a90:	str	lr, [sp, #32]
   13a94:	bl	1219c <__assert_fail@plt+0x12a8>
   13a98:	cmp	r9, r0
   13a9c:	bhi	13b08 <__assert_fail@plt+0x2c14>
   13aa0:	ldr	r3, [pc, #160]	; 13b48 <__assert_fail@plt+0x2c54>
   13aa4:	add	r9, r0, #1
   13aa8:	cmp	r7, r3
   13aac:	str	r9, [r5, r6, lsl #3]
   13ab0:	beq	13abc <__assert_fail@plt+0x2bc8>
   13ab4:	mov	r0, r7
   13ab8:	bl	10cd8 <free@plt>
   13abc:	mov	r0, r9
   13ac0:	bl	1474c <__assert_fail@plt+0x3858>
   13ac4:	ldr	lr, [sp, #28]
   13ac8:	ldr	ip, [r4, #44]	; 0x2c
   13acc:	ldr	r5, [r4, #40]	; 0x28
   13ad0:	mov	r3, fp
   13ad4:	mov	r2, sl
   13ad8:	mov	r1, r9
   13adc:	str	r0, [lr, #4]
   13ae0:	ldr	lr, [r4]
   13ae4:	ldr	r4, [sp, #32]
   13ae8:	str	ip, [sp, #16]
   13aec:	str	r4, [sp, #8]
   13af0:	ldr	r4, [sp, #36]	; 0x24
   13af4:	str	r5, [sp, #12]
   13af8:	str	r4, [sp, #4]
   13afc:	str	lr, [sp]
   13b00:	mov	r7, r0
   13b04:	bl	1219c <__assert_fail@plt+0x12a8>
   13b08:	ldr	r3, [sp, #24]
   13b0c:	mov	r0, r7
   13b10:	str	r3, [r8]
   13b14:	add	sp, sp, #44	; 0x2c
   13b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b1c:	mov	r0, #0
   13b20:	bl	147a8 <__assert_fail@plt+0x38b4>
   13b24:	ldr	r3, [pc, #32]	; 13b4c <__assert_fail@plt+0x2c58>
   13b28:	mov	r5, r0
   13b2c:	ldm	r3, {r0, r1}
   13b30:	str	r5, [r7]
   13b34:	stm	r5, {r0, r1}
   13b38:	b	13a24 <__assert_fail@plt+0x2b30>
   13b3c:	bl	14994 <__assert_fail@plt+0x3aa0>
   13b40:	bl	10edc <abort@plt>
   13b44:	andeq	r7, r2, ip, ror #1
   13b48:	andeq	r7, r2, r4, ror #2
   13b4c:	strdeq	r7, [r2], -r4
   13b50:	push	{r4, r5, r6, lr}
   13b54:	mov	r5, r0
   13b58:	bl	10e28 <__errno_location@plt>
   13b5c:	cmp	r5, #0
   13b60:	mov	r1, #48	; 0x30
   13b64:	mov	r4, r0
   13b68:	ldr	r0, [pc, #16]	; 13b80 <__assert_fail@plt+0x2c8c>
   13b6c:	ldr	r6, [r4]
   13b70:	movne	r0, r5
   13b74:	bl	14954 <__assert_fail@plt+0x3a60>
   13b78:	str	r6, [r4]
   13b7c:	pop	{r4, r5, r6, pc}
   13b80:	andeq	r7, r2, r4, ror #4
   13b84:	ldr	r3, [pc, #12]	; 13b98 <__assert_fail@plt+0x2ca4>
   13b88:	cmp	r0, #0
   13b8c:	moveq	r0, r3
   13b90:	ldr	r0, [r0]
   13b94:	bx	lr
   13b98:	andeq	r7, r2, r4, ror #4
   13b9c:	ldr	r3, [pc, #12]	; 13bb0 <__assert_fail@plt+0x2cbc>
   13ba0:	cmp	r0, #0
   13ba4:	moveq	r0, r3
   13ba8:	str	r1, [r0]
   13bac:	bx	lr
   13bb0:	andeq	r7, r2, r4, ror #4
   13bb4:	ldr	r3, [pc, #52]	; 13bf0 <__assert_fail@plt+0x2cfc>
   13bb8:	cmp	r0, #0
   13bbc:	moveq	r0, r3
   13bc0:	add	r3, r0, #8
   13bc4:	push	{lr}		; (str lr, [sp, #-4]!)
   13bc8:	lsr	lr, r1, #5
   13bcc:	and	r1, r1, #31
   13bd0:	ldr	ip, [r3, lr, lsl #2]
   13bd4:	lsr	r0, ip, r1
   13bd8:	eor	r2, r2, r0
   13bdc:	and	r2, r2, #1
   13be0:	and	r0, r0, #1
   13be4:	eor	r1, ip, r2, lsl r1
   13be8:	str	r1, [r3, lr, lsl #2]
   13bec:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf0:	andeq	r7, r2, r4, ror #4
   13bf4:	ldr	r3, [pc, #16]	; 13c0c <__assert_fail@plt+0x2d18>
   13bf8:	cmp	r0, #0
   13bfc:	movne	r3, r0
   13c00:	ldr	r0, [r3, #4]
   13c04:	str	r1, [r3, #4]
   13c08:	bx	lr
   13c0c:	andeq	r7, r2, r4, ror #4
   13c10:	ldr	r3, [pc, #44]	; 13c44 <__assert_fail@plt+0x2d50>
   13c14:	cmp	r0, #0
   13c18:	moveq	r0, r3
   13c1c:	mov	ip, #10
   13c20:	cmp	r2, #0
   13c24:	cmpne	r1, #0
   13c28:	str	ip, [r0]
   13c2c:	beq	13c3c <__assert_fail@plt+0x2d48>
   13c30:	str	r1, [r0, #40]	; 0x28
   13c34:	str	r2, [r0, #44]	; 0x2c
   13c38:	bx	lr
   13c3c:	push	{r4, lr}
   13c40:	bl	10edc <abort@plt>
   13c44:	andeq	r7, r2, r4, ror #4
   13c48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c4c:	sub	sp, sp, #24
   13c50:	ldr	ip, [pc, #108]	; 13cc4 <__assert_fail@plt+0x2dd0>
   13c54:	ldr	r4, [sp, #56]	; 0x38
   13c58:	mov	r9, r2
   13c5c:	cmp	r4, #0
   13c60:	moveq	r4, ip
   13c64:	mov	sl, r3
   13c68:	mov	r7, r0
   13c6c:	mov	r8, r1
   13c70:	bl	10e28 <__errno_location@plt>
   13c74:	ldr	r3, [r4, #44]	; 0x2c
   13c78:	mov	r1, r8
   13c7c:	ldr	r6, [r0]
   13c80:	str	r3, [sp, #16]
   13c84:	ldr	r2, [r4, #40]	; 0x28
   13c88:	add	r3, r4, #8
   13c8c:	str	r3, [sp, #8]
   13c90:	str	r2, [sp, #12]
   13c94:	ldr	r2, [r4, #4]
   13c98:	mov	r5, r0
   13c9c:	str	r2, [sp, #4]
   13ca0:	ldr	ip, [r4]
   13ca4:	mov	r3, sl
   13ca8:	mov	r2, r9
   13cac:	mov	r0, r7
   13cb0:	str	ip, [sp]
   13cb4:	bl	1219c <__assert_fail@plt+0x12a8>
   13cb8:	str	r6, [r5]
   13cbc:	add	sp, sp, #24
   13cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cc4:	andeq	r7, r2, r4, ror #4
   13cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ccc:	cmp	r3, #0
   13cd0:	sub	sp, sp, #44	; 0x2c
   13cd4:	ldr	r4, [pc, #192]	; 13d9c <__assert_fail@plt+0x2ea8>
   13cd8:	mov	r6, r2
   13cdc:	movne	r4, r3
   13ce0:	mov	r9, r1
   13ce4:	mov	r8, r0
   13ce8:	bl	10e28 <__errno_location@plt>
   13cec:	ldr	r3, [r4, #44]	; 0x2c
   13cf0:	ldr	r5, [r4, #4]
   13cf4:	add	sl, r4, #8
   13cf8:	cmp	r6, #0
   13cfc:	orreq	r5, r5, #1
   13d00:	mov	r1, #0
   13d04:	ldr	r2, [r0]
   13d08:	str	r3, [sp, #16]
   13d0c:	ldr	r3, [r4, #40]	; 0x28
   13d10:	stmib	sp, {r5, sl}
   13d14:	str	r3, [sp, #12]
   13d18:	ldr	r3, [r4]
   13d1c:	mov	r7, r0
   13d20:	str	r2, [sp, #28]
   13d24:	str	r3, [sp]
   13d28:	mov	r2, r8
   13d2c:	mov	r3, r9
   13d30:	mov	r0, r1
   13d34:	bl	1219c <__assert_fail@plt+0x12a8>
   13d38:	add	r1, r0, #1
   13d3c:	mov	fp, r0
   13d40:	mov	r0, r1
   13d44:	str	r1, [sp, #36]	; 0x24
   13d48:	bl	1474c <__assert_fail@plt+0x3858>
   13d4c:	ldr	r3, [r4, #44]	; 0x2c
   13d50:	mov	r2, r8
   13d54:	str	r3, [sp, #16]
   13d58:	ldr	r3, [r4, #40]	; 0x28
   13d5c:	str	r5, [sp, #4]
   13d60:	str	r3, [sp, #12]
   13d64:	str	sl, [sp, #8]
   13d68:	ldr	ip, [r4]
   13d6c:	ldr	r1, [sp, #36]	; 0x24
   13d70:	mov	r3, r9
   13d74:	str	ip, [sp]
   13d78:	str	r0, [sp, #32]
   13d7c:	bl	1219c <__assert_fail@plt+0x12a8>
   13d80:	ldr	r2, [sp, #28]
   13d84:	cmp	r6, #0
   13d88:	str	r2, [r7]
   13d8c:	ldr	r0, [sp, #32]
   13d90:	strne	fp, [r6]
   13d94:	add	sp, sp, #44	; 0x2c
   13d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d9c:	andeq	r7, r2, r4, ror #4
   13da0:	mov	r3, r2
   13da4:	mov	r2, #0
   13da8:	b	13cc8 <__assert_fail@plt+0x2dd4>
   13dac:	push	{r4, r5, r6, r7, r8, lr}
   13db0:	ldr	r6, [pc, #112]	; 13e28 <__assert_fail@plt+0x2f34>
   13db4:	ldr	r3, [r6, #4]
   13db8:	ldr	r7, [r6]
   13dbc:	cmp	r3, #1
   13dc0:	ble	13de4 <__assert_fail@plt+0x2ef0>
   13dc4:	sub	r5, r7, #8
   13dc8:	add	r5, r5, r3, lsl #3
   13dcc:	mov	r4, r7
   13dd0:	ldr	r0, [r4, #12]
   13dd4:	add	r4, r4, #8
   13dd8:	bl	10cd8 <free@plt>
   13ddc:	cmp	r4, r5
   13de0:	bne	13dd0 <__assert_fail@plt+0x2edc>
   13de4:	ldr	r0, [r7, #4]
   13de8:	ldr	r4, [pc, #60]	; 13e2c <__assert_fail@plt+0x2f38>
   13dec:	cmp	r0, r4
   13df0:	beq	13e04 <__assert_fail@plt+0x2f10>
   13df4:	bl	10cd8 <free@plt>
   13df8:	mov	r3, #256	; 0x100
   13dfc:	str	r4, [r6, #12]
   13e00:	str	r3, [r6, #8]
   13e04:	ldr	r4, [pc, #36]	; 13e30 <__assert_fail@plt+0x2f3c>
   13e08:	cmp	r7, r4
   13e0c:	beq	13e1c <__assert_fail@plt+0x2f28>
   13e10:	mov	r0, r7
   13e14:	bl	10cd8 <free@plt>
   13e18:	str	r4, [r6]
   13e1c:	mov	r3, #1
   13e20:	str	r3, [r6, #4]
   13e24:	pop	{r4, r5, r6, r7, r8, pc}
   13e28:	andeq	r7, r2, ip, ror #1
   13e2c:	andeq	r7, r2, r4, ror #2
   13e30:	strdeq	r7, [r2], -r4
   13e34:	ldr	r3, [pc, #4]	; 13e40 <__assert_fail@plt+0x2f4c>
   13e38:	mvn	r2, #0
   13e3c:	b	139b4 <__assert_fail@plt+0x2ac0>
   13e40:	andeq	r7, r2, r4, ror #4
   13e44:	ldr	r3, [pc]	; 13e4c <__assert_fail@plt+0x2f58>
   13e48:	b	139b4 <__assert_fail@plt+0x2ac0>
   13e4c:	andeq	r7, r2, r4, ror #4
   13e50:	mov	r1, r0
   13e54:	ldr	r3, [pc, #8]	; 13e64 <__assert_fail@plt+0x2f70>
   13e58:	mvn	r2, #0
   13e5c:	mov	r0, #0
   13e60:	b	139b4 <__assert_fail@plt+0x2ac0>
   13e64:	andeq	r7, r2, r4, ror #4
   13e68:	mov	r2, r1
   13e6c:	ldr	r3, [pc, #8]	; 13e7c <__assert_fail@plt+0x2f88>
   13e70:	mov	r1, r0
   13e74:	mov	r0, #0
   13e78:	b	139b4 <__assert_fail@plt+0x2ac0>
   13e7c:	andeq	r7, r2, r4, ror #4
   13e80:	push	{r4, r5, r6, lr}
   13e84:	sub	sp, sp, #56	; 0x38
   13e88:	ldr	r4, [pc, #68]	; 13ed4 <__assert_fail@plt+0x2fe0>
   13e8c:	mov	r6, r2
   13e90:	mov	r5, r0
   13e94:	ldr	r3, [r4]
   13e98:	add	r0, sp, #4
   13e9c:	str	r3, [sp, #52]	; 0x34
   13ea0:	bl	1202c <__assert_fail@plt+0x1138>
   13ea4:	add	r3, sp, #4
   13ea8:	mvn	r2, #0
   13eac:	mov	r1, r6
   13eb0:	mov	r0, r5
   13eb4:	bl	139b4 <__assert_fail@plt+0x2ac0>
   13eb8:	ldr	r2, [sp, #52]	; 0x34
   13ebc:	ldr	r3, [r4]
   13ec0:	cmp	r2, r3
   13ec4:	bne	13ed0 <__assert_fail@plt+0x2fdc>
   13ec8:	add	sp, sp, #56	; 0x38
   13ecc:	pop	{r4, r5, r6, pc}
   13ed0:	bl	10d2c <__stack_chk_fail@plt>
   13ed4:	andeq	r6, r2, r8, lsl #30
   13ed8:	push	{r4, r5, r6, r7, lr}
   13edc:	sub	sp, sp, #60	; 0x3c
   13ee0:	ldr	r4, [pc, #72]	; 13f30 <__assert_fail@plt+0x303c>
   13ee4:	mov	r6, r2
   13ee8:	mov	r7, r3
   13eec:	ldr	ip, [r4]
   13ef0:	mov	r5, r0
   13ef4:	add	r0, sp, #4
   13ef8:	str	ip, [sp, #52]	; 0x34
   13efc:	bl	1202c <__assert_fail@plt+0x1138>
   13f00:	add	r3, sp, #4
   13f04:	mov	r2, r7
   13f08:	mov	r1, r6
   13f0c:	mov	r0, r5
   13f10:	bl	139b4 <__assert_fail@plt+0x2ac0>
   13f14:	ldr	r2, [sp, #52]	; 0x34
   13f18:	ldr	r3, [r4]
   13f1c:	cmp	r2, r3
   13f20:	bne	13f2c <__assert_fail@plt+0x3038>
   13f24:	add	sp, sp, #60	; 0x3c
   13f28:	pop	{r4, r5, r6, r7, pc}
   13f2c:	bl	10d2c <__stack_chk_fail@plt>
   13f30:	andeq	r6, r2, r8, lsl #30
   13f34:	mov	r2, r1
   13f38:	mov	r1, r0
   13f3c:	mov	r0, #0
   13f40:	b	13e80 <__assert_fail@plt+0x2f8c>
   13f44:	mov	r3, r2
   13f48:	mov	r2, r1
   13f4c:	mov	r1, r0
   13f50:	mov	r0, #0
   13f54:	b	13ed8 <__assert_fail@plt+0x2fe4>
   13f58:	push	{r4, r5, r6, r7, r8, r9, lr}
   13f5c:	mov	r4, r2
   13f60:	ldr	lr, [pc, #128]	; 13fe8 <__assert_fail@plt+0x30f4>
   13f64:	mov	r8, r0
   13f68:	mov	r9, r1
   13f6c:	ldm	lr!, {r0, r1, r2, r3}
   13f70:	sub	sp, sp, #60	; 0x3c
   13f74:	add	ip, sp, #4
   13f78:	lsr	r6, r4, #5
   13f7c:	stmia	ip!, {r0, r1, r2, r3}
   13f80:	add	r7, sp, #12
   13f84:	ldm	lr!, {r0, r1, r2, r3}
   13f88:	and	r4, r4, #31
   13f8c:	ldr	r5, [pc, #88]	; 13fec <__assert_fail@plt+0x30f8>
   13f90:	stmia	ip!, {r0, r1, r2, r3}
   13f94:	ldm	lr, {r0, r1, r2, r3}
   13f98:	stm	ip, {r0, r1, r2, r3}
   13f9c:	mov	r2, r9
   13fa0:	ldr	r3, [r7, r6, lsl #2]
   13fa4:	ldr	ip, [r5]
   13fa8:	mov	r1, r8
   13fac:	mvn	r0, r3, lsr r4
   13fb0:	and	r0, r0, #1
   13fb4:	str	ip, [sp, #52]	; 0x34
   13fb8:	eor	r4, r3, r0, lsl r4
   13fbc:	add	r3, sp, #4
   13fc0:	mov	r0, #0
   13fc4:	str	r4, [r7, r6, lsl #2]
   13fc8:	bl	139b4 <__assert_fail@plt+0x2ac0>
   13fcc:	ldr	r2, [sp, #52]	; 0x34
   13fd0:	ldr	r3, [r5]
   13fd4:	cmp	r2, r3
   13fd8:	bne	13fe4 <__assert_fail@plt+0x30f0>
   13fdc:	add	sp, sp, #60	; 0x3c
   13fe0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13fe4:	bl	10d2c <__stack_chk_fail@plt>
   13fe8:	andeq	r7, r2, r4, ror #4
   13fec:	andeq	r6, r2, r8, lsl #30
   13ff0:	mov	r2, r1
   13ff4:	mvn	r1, #0
   13ff8:	b	13f58 <__assert_fail@plt+0x3064>
   13ffc:	mov	r2, #58	; 0x3a
   14000:	mvn	r1, #0
   14004:	b	13f58 <__assert_fail@plt+0x3064>
   14008:	mov	r2, #58	; 0x3a
   1400c:	b	13f58 <__assert_fail@plt+0x3064>
   14010:	push	{r4, r5, r6, r7, r8, lr}
   14014:	sub	sp, sp, #104	; 0x68
   14018:	ldr	r5, [pc, #120]	; 14098 <__assert_fail@plt+0x31a4>
   1401c:	mov	r6, r0
   14020:	mov	r0, sp
   14024:	ldr	r3, [r5]
   14028:	mov	r7, r2
   1402c:	str	r3, [sp, #100]	; 0x64
   14030:	bl	1202c <__assert_fail@plt+0x1138>
   14034:	mov	ip, sp
   14038:	add	lr, sp, #52	; 0x34
   1403c:	ldm	ip!, {r0, r1, r2, r3}
   14040:	stmia	lr!, {r0, r1, r2, r3}
   14044:	ldm	ip!, {r0, r1, r2, r3}
   14048:	ldr	r8, [sp, #64]	; 0x40
   1404c:	stmia	lr!, {r0, r1, r2, r3}
   14050:	mvn	r4, r8
   14054:	ldm	ip, {r0, r1, r2, r3}
   14058:	and	ip, r4, #67108864	; 0x4000000
   1405c:	eor	ip, ip, r8
   14060:	str	ip, [sp, #64]	; 0x40
   14064:	stm	lr, {r0, r1, r2, r3}
   14068:	add	r3, sp, #52	; 0x34
   1406c:	mvn	r2, #0
   14070:	mov	r1, r7
   14074:	mov	r0, r6
   14078:	bl	139b4 <__assert_fail@plt+0x2ac0>
   1407c:	ldr	r2, [sp, #100]	; 0x64
   14080:	ldr	r3, [r5]
   14084:	cmp	r2, r3
   14088:	bne	14094 <__assert_fail@plt+0x31a0>
   1408c:	add	sp, sp, #104	; 0x68
   14090:	pop	{r4, r5, r6, r7, r8, pc}
   14094:	bl	10d2c <__stack_chk_fail@plt>
   14098:	andeq	r6, r2, r8, lsl #30
   1409c:	push	{r4, r5, r6, r7, r8, r9, lr}
   140a0:	mov	r6, r1
   140a4:	ldr	lr, [pc, #132]	; 14130 <__assert_fail@plt+0x323c>
   140a8:	mov	r5, r2
   140ac:	mov	r8, r0
   140b0:	mov	r9, r3
   140b4:	ldm	lr!, {r0, r1, r2, r3}
   140b8:	sub	sp, sp, #60	; 0x3c
   140bc:	add	ip, sp, #4
   140c0:	ldr	r4, [pc, #108]	; 14134 <__assert_fail@plt+0x3240>
   140c4:	stmia	ip!, {r0, r1, r2, r3}
   140c8:	mov	r7, #10
   140cc:	ldm	lr!, {r0, r1, r2, r3}
   140d0:	cmp	r5, #0
   140d4:	cmpne	r6, #0
   140d8:	str	r7, [sp, #4]
   140dc:	stmia	ip!, {r0, r1, r2, r3}
   140e0:	ldm	lr, {r0, r1, r2, r3}
   140e4:	ldr	lr, [r4]
   140e8:	stm	ip, {r0, r1, r2, r3}
   140ec:	str	lr, [sp, #52]	; 0x34
   140f0:	beq	1412c <__assert_fail@plt+0x3238>
   140f4:	add	r3, sp, #4
   140f8:	ldr	r2, [sp, #88]	; 0x58
   140fc:	mov	r1, r9
   14100:	mov	r0, r8
   14104:	str	r6, [sp, #44]	; 0x2c
   14108:	str	r5, [sp, #48]	; 0x30
   1410c:	bl	139b4 <__assert_fail@plt+0x2ac0>
   14110:	ldr	r2, [sp, #52]	; 0x34
   14114:	ldr	r3, [r4]
   14118:	cmp	r2, r3
   1411c:	bne	14128 <__assert_fail@plt+0x3234>
   14120:	add	sp, sp, #60	; 0x3c
   14124:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14128:	bl	10d2c <__stack_chk_fail@plt>
   1412c:	bl	10edc <abort@plt>
   14130:	andeq	r7, r2, r4, ror #4
   14134:	andeq	r6, r2, r8, lsl #30
   14138:	push	{lr}		; (str lr, [sp, #-4]!)
   1413c:	sub	sp, sp, #12
   14140:	mvn	ip, #0
   14144:	str	ip, [sp]
   14148:	bl	1409c <__assert_fail@plt+0x31a8>
   1414c:	add	sp, sp, #12
   14150:	pop	{pc}		; (ldr pc, [sp], #4)
   14154:	push	{lr}		; (str lr, [sp, #-4]!)
   14158:	sub	sp, sp, #12
   1415c:	mvn	ip, #0
   14160:	mov	r3, r2
   14164:	str	ip, [sp]
   14168:	mov	r2, r1
   1416c:	mov	r1, r0
   14170:	mov	r0, #0
   14174:	bl	1409c <__assert_fail@plt+0x31a8>
   14178:	add	sp, sp, #12
   1417c:	pop	{pc}		; (ldr pc, [sp], #4)
   14180:	push	{lr}		; (str lr, [sp, #-4]!)
   14184:	sub	sp, sp, #12
   14188:	str	r3, [sp]
   1418c:	mov	r3, r2
   14190:	mov	r2, r1
   14194:	mov	r1, r0
   14198:	mov	r0, #0
   1419c:	bl	1409c <__assert_fail@plt+0x31a8>
   141a0:	add	sp, sp, #12
   141a4:	pop	{pc}		; (ldr pc, [sp], #4)
   141a8:	ldr	r3, [pc]	; 141b0 <__assert_fail@plt+0x32bc>
   141ac:	b	139b4 <__assert_fail@plt+0x2ac0>
   141b0:	strdeq	r7, [r2], -ip
   141b4:	mov	r2, r1
   141b8:	ldr	r3, [pc, #8]	; 141c8 <__assert_fail@plt+0x32d4>
   141bc:	mov	r1, r0
   141c0:	mov	r0, #0
   141c4:	b	139b4 <__assert_fail@plt+0x2ac0>
   141c8:	strdeq	r7, [r2], -ip
   141cc:	ldr	r3, [pc, #4]	; 141d8 <__assert_fail@plt+0x32e4>
   141d0:	mvn	r2, #0
   141d4:	b	139b4 <__assert_fail@plt+0x2ac0>
   141d8:	strdeq	r7, [r2], -ip
   141dc:	mov	r1, r0
   141e0:	ldr	r3, [pc, #8]	; 141f0 <__assert_fail@plt+0x32fc>
   141e4:	mvn	r2, #0
   141e8:	mov	r0, #0
   141ec:	b	139b4 <__assert_fail@plt+0x2ac0>
   141f0:	strdeq	r7, [r2], -ip
   141f4:	push	{r4, r5, r6, lr}
   141f8:	sub	sp, sp, #32
   141fc:	cmp	r1, #0
   14200:	mov	r5, r0
   14204:	ldr	r4, [sp, #48]	; 0x30
   14208:	ldr	r6, [sp, #52]	; 0x34
   1420c:	beq	1429c <__assert_fail@plt+0x33a8>
   14210:	strd	r2, [sp]
   14214:	mov	r3, r1
   14218:	ldr	r2, [pc, #828]	; 1455c <__assert_fail@plt+0x3668>
   1421c:	mov	r1, #1
   14220:	bl	10e64 <__fprintf_chk@plt>
   14224:	mov	r2, #5
   14228:	ldr	r1, [pc, #816]	; 14560 <__assert_fail@plt+0x366c>
   1422c:	mov	r0, #0
   14230:	bl	10d20 <dcgettext@plt>
   14234:	ldr	r3, [pc, #808]	; 14564 <__assert_fail@plt+0x3670>
   14238:	ldr	r2, [pc, #808]	; 14568 <__assert_fail@plt+0x3674>
   1423c:	str	r3, [sp]
   14240:	mov	r1, #1
   14244:	mov	r3, r0
   14248:	mov	r0, r5
   1424c:	bl	10e64 <__fprintf_chk@plt>
   14250:	ldr	r1, [pc, #788]	; 1456c <__assert_fail@plt+0x3678>
   14254:	mov	r2, #5
   14258:	mov	r0, #0
   1425c:	bl	10d20 <dcgettext@plt>
   14260:	mov	r1, r5
   14264:	bl	10ca8 <fputs_unlocked@plt>
   14268:	cmp	r6, #9
   1426c:	ldrls	pc, [pc, r6, lsl #2]
   14270:	b	1454c <__assert_fail@plt+0x3658>
   14274:	andeq	r4, r1, r8, asr r5
   14278:	andeq	r4, r1, r0, lsr #6
   1427c:	andeq	r4, r1, ip, asr #6
   14280:	andeq	r4, r1, r0, lsl #7
   14284:			; <UNDEFINED> instruction: 0x000143bc
   14288:	strdeq	r4, [r1], -ip
   1428c:	andeq	r4, r1, r4, asr #8
   14290:	muleq	r1, r4, r4
   14294:	andeq	r4, r1, ip, ror #9
   14298:			; <UNDEFINED> instruction: 0x000142b4
   1429c:	str	r3, [sp]
   142a0:	mov	r1, #1
   142a4:	mov	r3, r2
   142a8:	ldr	r2, [pc, #704]	; 14570 <__assert_fail@plt+0x367c>
   142ac:	bl	10e64 <__fprintf_chk@plt>
   142b0:	b	14224 <__assert_fail@plt+0x3330>
   142b4:	ldr	r1, [pc, #696]	; 14574 <__assert_fail@plt+0x3680>
   142b8:	mov	r2, #5
   142bc:	mov	r0, #0
   142c0:	bl	10d20 <dcgettext@plt>
   142c4:	ldr	r2, [r4, #32]
   142c8:	ldr	r3, [r4, #28]
   142cc:	ldr	r1, [r4, #24]
   142d0:	str	r2, [sp, #28]
   142d4:	ldr	r2, [r4, #20]
   142d8:	str	r3, [sp, #24]
   142dc:	ldr	r3, [r4, #16]
   142e0:	str	r1, [sp, #20]
   142e4:	ldr	r1, [r4, #12]
   142e8:	str	r2, [sp, #16]
   142ec:	ldr	r2, [r4, #8]
   142f0:	str	r3, [sp, #12]
   142f4:	ldr	r3, [r4, #4]
   142f8:	str	r1, [sp, #8]
   142fc:	str	r2, [sp, #4]
   14300:	str	r3, [sp]
   14304:	mov	r1, #1
   14308:	ldr	r3, [r4]
   1430c:	mov	r2, r0
   14310:	mov	r0, r5
   14314:	bl	10e64 <__fprintf_chk@plt>
   14318:	add	sp, sp, #32
   1431c:	pop	{r4, r5, r6, pc}
   14320:	mov	r2, #5
   14324:	ldr	r1, [pc, #588]	; 14578 <__assert_fail@plt+0x3684>
   14328:	mov	r0, #0
   1432c:	bl	10d20 <dcgettext@plt>
   14330:	ldr	r3, [r4]
   14334:	mov	r1, #1
   14338:	mov	r2, r0
   1433c:	mov	r0, r5
   14340:	add	sp, sp, #32
   14344:	pop	{r4, r5, r6, lr}
   14348:	b	10e64 <__fprintf_chk@plt>
   1434c:	mov	r2, #5
   14350:	ldr	r1, [pc, #548]	; 1457c <__assert_fail@plt+0x3688>
   14354:	mov	r0, #0
   14358:	bl	10d20 <dcgettext@plt>
   1435c:	ldr	r2, [r4, #4]
   14360:	ldr	r3, [r4]
   14364:	mov	r1, #1
   14368:	str	r2, [sp, #48]	; 0x30
   1436c:	mov	r2, r0
   14370:	mov	r0, r5
   14374:	add	sp, sp, #32
   14378:	pop	{r4, r5, r6, lr}
   1437c:	b	10e64 <__fprintf_chk@plt>
   14380:	mov	r2, #5
   14384:	ldr	r1, [pc, #500]	; 14580 <__assert_fail@plt+0x368c>
   14388:	mov	r0, #0
   1438c:	bl	10d20 <dcgettext@plt>
   14390:	ldr	r2, [r4, #8]
   14394:	ldr	r3, [r4, #4]
   14398:	mov	r1, #1
   1439c:	str	r2, [sp, #52]	; 0x34
   143a0:	str	r3, [sp, #48]	; 0x30
   143a4:	ldr	r3, [r4]
   143a8:	mov	r2, r0
   143ac:	mov	r0, r5
   143b0:	add	sp, sp, #32
   143b4:	pop	{r4, r5, r6, lr}
   143b8:	b	10e64 <__fprintf_chk@plt>
   143bc:	mov	r2, #5
   143c0:	ldr	r1, [pc, #444]	; 14584 <__assert_fail@plt+0x3690>
   143c4:	mov	r0, #0
   143c8:	bl	10d20 <dcgettext@plt>
   143cc:	ldr	r1, [r4, #12]
   143d0:	ldr	r2, [r4, #8]
   143d4:	ldr	r3, [r4, #4]
   143d8:	str	r1, [sp, #8]
   143dc:	str	r2, [sp, #4]
   143e0:	str	r3, [sp]
   143e4:	mov	r1, #1
   143e8:	ldr	r3, [r4]
   143ec:	mov	r2, r0
   143f0:	mov	r0, r5
   143f4:	bl	10e64 <__fprintf_chk@plt>
   143f8:	b	14318 <__assert_fail@plt+0x3424>
   143fc:	mov	r2, #5
   14400:	ldr	r1, [pc, #384]	; 14588 <__assert_fail@plt+0x3694>
   14404:	mov	r0, #0
   14408:	bl	10d20 <dcgettext@plt>
   1440c:	ldr	r3, [r4, #16]
   14410:	ldr	r1, [r4, #12]
   14414:	ldr	r2, [r4, #8]
   14418:	str	r3, [sp, #12]
   1441c:	ldr	r3, [r4, #4]
   14420:	str	r1, [sp, #8]
   14424:	str	r2, [sp, #4]
   14428:	str	r3, [sp]
   1442c:	mov	r1, #1
   14430:	ldr	r3, [r4]
   14434:	mov	r2, r0
   14438:	mov	r0, r5
   1443c:	bl	10e64 <__fprintf_chk@plt>
   14440:	b	14318 <__assert_fail@plt+0x3424>
   14444:	mov	r2, #5
   14448:	ldr	r1, [pc, #316]	; 1458c <__assert_fail@plt+0x3698>
   1444c:	mov	r0, #0
   14450:	bl	10d20 <dcgettext@plt>
   14454:	ldr	r2, [r4, #20]
   14458:	ldr	r3, [r4, #16]
   1445c:	ldr	r1, [r4, #12]
   14460:	str	r2, [sp, #16]
   14464:	ldr	r2, [r4, #8]
   14468:	str	r3, [sp, #12]
   1446c:	ldr	r3, [r4, #4]
   14470:	str	r1, [sp, #8]
   14474:	str	r2, [sp, #4]
   14478:	str	r3, [sp]
   1447c:	mov	r1, #1
   14480:	ldr	r3, [r4]
   14484:	mov	r2, r0
   14488:	mov	r0, r5
   1448c:	bl	10e64 <__fprintf_chk@plt>
   14490:	b	14318 <__assert_fail@plt+0x3424>
   14494:	mov	r2, #5
   14498:	ldr	r1, [pc, #240]	; 14590 <__assert_fail@plt+0x369c>
   1449c:	mov	r0, #0
   144a0:	bl	10d20 <dcgettext@plt>
   144a4:	ldr	r1, [r4, #24]
   144a8:	ldr	r2, [r4, #20]
   144ac:	ldr	r3, [r4, #16]
   144b0:	str	r1, [sp, #20]
   144b4:	ldr	r1, [r4, #12]
   144b8:	str	r2, [sp, #16]
   144bc:	ldr	r2, [r4, #8]
   144c0:	str	r3, [sp, #12]
   144c4:	ldr	r3, [r4, #4]
   144c8:	str	r1, [sp, #8]
   144cc:	str	r2, [sp, #4]
   144d0:	str	r3, [sp]
   144d4:	mov	r1, #1
   144d8:	ldr	r3, [r4]
   144dc:	mov	r2, r0
   144e0:	mov	r0, r5
   144e4:	bl	10e64 <__fprintf_chk@plt>
   144e8:	b	14318 <__assert_fail@plt+0x3424>
   144ec:	mov	r2, #5
   144f0:	ldr	r1, [pc, #156]	; 14594 <__assert_fail@plt+0x36a0>
   144f4:	mov	r0, #0
   144f8:	bl	10d20 <dcgettext@plt>
   144fc:	ldr	r3, [r4, #28]
   14500:	ldr	r1, [r4, #24]
   14504:	ldr	r2, [r4, #20]
   14508:	str	r3, [sp, #24]
   1450c:	ldr	r3, [r4, #16]
   14510:	str	r1, [sp, #20]
   14514:	ldr	r1, [r4, #12]
   14518:	str	r2, [sp, #16]
   1451c:	ldr	r2, [r4, #8]
   14520:	str	r3, [sp, #12]
   14524:	ldr	r3, [r4, #4]
   14528:	str	r1, [sp, #8]
   1452c:	str	r2, [sp, #4]
   14530:	str	r3, [sp]
   14534:	mov	r1, #1
   14538:	ldr	r3, [r4]
   1453c:	mov	r2, r0
   14540:	mov	r0, r5
   14544:	bl	10e64 <__fprintf_chk@plt>
   14548:	b	14318 <__assert_fail@plt+0x3424>
   1454c:	mov	r2, #5
   14550:	ldr	r1, [pc, #64]	; 14598 <__assert_fail@plt+0x36a4>
   14554:	b	142bc <__assert_fail@plt+0x33c8>
   14558:	bl	10edc <abort@plt>
   1455c:	andeq	r6, r1, r0, ror r8
   14560:	andeq	r6, r1, r4, lsl #17
   14564:	andeq	r0, r0, r2, ror #15
   14568:	andeq	r6, r1, r8, asr fp
   1456c:	andeq	r6, r1, r8, lsl #17
   14570:	andeq	r6, r1, ip, ror r8
   14574:	andeq	r6, r1, r0, ror #20
   14578:	andeq	r6, r1, r4, asr r9
   1457c:	andeq	r6, r1, r4, ror #18
   14580:	andeq	r6, r1, ip, ror r9
   14584:	muleq	r1, r8, r9
   14588:			; <UNDEFINED> instruction: 0x000169b8
   1458c:	ldrdeq	r6, [r1], -ip
   14590:	andeq	r6, r1, r4, lsl #20
   14594:	andeq	r6, r1, r0, lsr sl
   14598:	muleq	r1, r4, sl
   1459c:	push	{r4, r5, lr}
   145a0:	sub	sp, sp, #12
   145a4:	ldr	r5, [sp, #24]
   145a8:	ldr	ip, [r5]
   145ac:	cmp	ip, #0
   145b0:	beq	145cc <__assert_fail@plt+0x36d8>
   145b4:	mov	lr, r5
   145b8:	mov	ip, #0
   145bc:	ldr	r4, [lr, #4]!
   145c0:	add	ip, ip, #1
   145c4:	cmp	r4, #0
   145c8:	bne	145bc <__assert_fail@plt+0x36c8>
   145cc:	stm	sp, {r5, ip}
   145d0:	bl	141f4 <__assert_fail@plt+0x3300>
   145d4:	add	sp, sp, #12
   145d8:	pop	{r4, r5, pc}
   145dc:	push	{r4, r5, r6, lr}
   145e0:	sub	sp, sp, #56	; 0x38
   145e4:	ldr	r6, [pc, #88]	; 14644 <__assert_fail@plt+0x3750>
   145e8:	ldr	r5, [sp, #72]	; 0x48
   145ec:	add	r4, sp, #8
   145f0:	ldr	ip, [r6]
   145f4:	str	ip, [sp, #52]	; 0x34
   145f8:	mov	ip, #0
   145fc:	ldr	lr, [r5], #4
   14600:	cmp	lr, #0
   14604:	str	lr, [r4, #4]!
   14608:	beq	14618 <__assert_fail@plt+0x3724>
   1460c:	add	ip, ip, #1
   14610:	cmp	ip, #10
   14614:	bne	145fc <__assert_fail@plt+0x3708>
   14618:	add	lr, sp, #12
   1461c:	str	ip, [sp, #4]
   14620:	str	lr, [sp]
   14624:	bl	141f4 <__assert_fail@plt+0x3300>
   14628:	ldr	r2, [sp, #52]	; 0x34
   1462c:	ldr	r3, [r6]
   14630:	cmp	r2, r3
   14634:	bne	14640 <__assert_fail@plt+0x374c>
   14638:	add	sp, sp, #56	; 0x38
   1463c:	pop	{r4, r5, r6, pc}
   14640:	bl	10d2c <__stack_chk_fail@plt>
   14644:	andeq	r6, r2, r8, lsl #30
   14648:	push	{r3}		; (str r3, [sp, #-4]!)
   1464c:	mov	ip, #0
   14650:	push	{r4, r5, r6, lr}
   14654:	sub	sp, sp, #60	; 0x3c
   14658:	ldr	r6, [pc, #100]	; 146c4 <__assert_fail@plt+0x37d0>
   1465c:	add	r5, sp, #8
   14660:	add	r4, sp, #80	; 0x50
   14664:	ldr	r3, [r6]
   14668:	str	r4, [sp, #8]
   1466c:	str	r3, [sp, #52]	; 0x34
   14670:	ldr	r3, [sp, #76]	; 0x4c
   14674:	ldr	lr, [r4], #4
   14678:	cmp	lr, #0
   1467c:	str	lr, [r5, #4]!
   14680:	beq	14690 <__assert_fail@plt+0x379c>
   14684:	add	ip, ip, #1
   14688:	cmp	ip, #10
   1468c:	bne	14674 <__assert_fail@plt+0x3780>
   14690:	add	lr, sp, #12
   14694:	str	ip, [sp, #4]
   14698:	str	lr, [sp]
   1469c:	bl	141f4 <__assert_fail@plt+0x3300>
   146a0:	ldr	r2, [sp, #52]	; 0x34
   146a4:	ldr	r3, [r6]
   146a8:	cmp	r2, r3
   146ac:	bne	146c0 <__assert_fail@plt+0x37cc>
   146b0:	add	sp, sp, #60	; 0x3c
   146b4:	pop	{r4, r5, r6, lr}
   146b8:	add	sp, sp, #4
   146bc:	bx	lr
   146c0:	bl	10d2c <__stack_chk_fail@plt>
   146c4:	andeq	r6, r2, r8, lsl #30
   146c8:	push	{r4, lr}
   146cc:	mov	r2, #5
   146d0:	ldr	r1, [pc, #88]	; 14730 <__assert_fail@plt+0x383c>
   146d4:	mov	r0, #0
   146d8:	bl	10d20 <dcgettext@plt>
   146dc:	ldr	r2, [pc, #80]	; 14734 <__assert_fail@plt+0x3840>
   146e0:	mov	r1, r0
   146e4:	mov	r0, #1
   146e8:	bl	10e4c <__printf_chk@plt>
   146ec:	mov	r2, #5
   146f0:	ldr	r1, [pc, #64]	; 14738 <__assert_fail@plt+0x3844>
   146f4:	mov	r0, #0
   146f8:	bl	10d20 <dcgettext@plt>
   146fc:	ldr	r3, [pc, #56]	; 1473c <__assert_fail@plt+0x3848>
   14700:	ldr	r2, [pc, #56]	; 14740 <__assert_fail@plt+0x384c>
   14704:	mov	r1, r0
   14708:	mov	r0, #1
   1470c:	bl	10e4c <__printf_chk@plt>
   14710:	ldr	r1, [pc, #44]	; 14744 <__assert_fail@plt+0x3850>
   14714:	mov	r2, #5
   14718:	mov	r0, #0
   1471c:	bl	10d20 <dcgettext@plt>
   14720:	ldr	r3, [pc, #32]	; 14748 <__assert_fail@plt+0x3854>
   14724:	pop	{r4, lr}
   14728:	ldr	r1, [r3]
   1472c:	b	10ca8 <fputs_unlocked@plt>
   14730:	ldrdeq	r6, [r1], -r0
   14734:	andeq	r6, r1, r8, ror #21
   14738:	andeq	r6, r1, r0, lsl #22
   1473c:	andeq	r6, r1, r8, asr r3
   14740:	andeq	r6, r1, r0, lsl #7
   14744:	andeq	r6, r1, r4, lsl fp
   14748:	andeq	r7, r2, r4, asr #2
   1474c:	push	{r4, lr}
   14750:	mov	r4, r0
   14754:	bl	10dbc <malloc@plt>
   14758:	adds	r4, r4, #0
   1475c:	movne	r4, #1
   14760:	cmp	r0, #0
   14764:	movne	r4, #0
   14768:	cmp	r4, #0
   1476c:	popeq	{r4, pc}
   14770:	bl	14994 <__assert_fail@plt+0x3aa0>
   14774:	push	{r4, r5, r6, lr}
   14778:	umull	r4, r5, r0, r1
   1477c:	adds	r3, r5, #0
   14780:	movne	r3, #1
   14784:	cmp	r4, #0
   14788:	blt	147a0 <__assert_fail@plt+0x38ac>
   1478c:	cmp	r3, #0
   14790:	bne	147a0 <__assert_fail@plt+0x38ac>
   14794:	mul	r0, r1, r0
   14798:	pop	{r4, r5, r6, lr}
   1479c:	b	1474c <__assert_fail@plt+0x3858>
   147a0:	bl	14994 <__assert_fail@plt+0x3aa0>
   147a4:	b	1474c <__assert_fail@plt+0x3858>
   147a8:	adds	r3, r0, #0
   147ac:	movne	r3, #1
   147b0:	cmp	r1, #0
   147b4:	movne	r3, #0
   147b8:	cmp	r3, #0
   147bc:	push	{r4, lr}
   147c0:	bne	147e8 <__assert_fail@plt+0x38f4>
   147c4:	mov	r4, r1
   147c8:	bl	10d38 <realloc@plt>
   147cc:	adds	r4, r4, #0
   147d0:	movne	r4, #1
   147d4:	cmp	r0, #0
   147d8:	movne	r4, #0
   147dc:	cmp	r4, #0
   147e0:	popeq	{r4, pc}
   147e4:	bl	14994 <__assert_fail@plt+0x3aa0>
   147e8:	bl	10cd8 <free@plt>
   147ec:	mov	r0, #0
   147f0:	pop	{r4, pc}
   147f4:	push	{r4, r5, r6, lr}
   147f8:	umull	r4, r5, r1, r2
   147fc:	adds	r3, r5, #0
   14800:	movne	r3, #1
   14804:	cmp	r4, #0
   14808:	blt	14820 <__assert_fail@plt+0x392c>
   1480c:	cmp	r3, #0
   14810:	bne	14820 <__assert_fail@plt+0x392c>
   14814:	mul	r1, r2, r1
   14818:	pop	{r4, r5, r6, lr}
   1481c:	b	147a8 <__assert_fail@plt+0x38b4>
   14820:	bl	14994 <__assert_fail@plt+0x3aa0>
   14824:	push	{r4, r5, r6, r7, r8, lr}
   14828:	subs	r7, r0, #0
   1482c:	mov	r6, r1
   14830:	mov	r5, r2
   14834:	ldr	r4, [r1]
   14838:	beq	1486c <__assert_fail@plt+0x3978>
   1483c:	mov	r1, r2
   14840:	ldr	r0, [pc, #104]	; 148b0 <__assert_fail@plt+0x39bc>
   14844:	bl	15958 <__assert_fail@plt+0x4a64>
   14848:	cmp	r0, r4
   1484c:	bls	14890 <__assert_fail@plt+0x399c>
   14850:	add	r3, r4, #1
   14854:	add	r4, r3, r4, lsr #1
   14858:	str	r4, [r6]
   1485c:	mul	r1, r5, r4
   14860:	mov	r0, r7
   14864:	pop	{r4, r5, r6, r7, r8, lr}
   14868:	b	147a8 <__assert_fail@plt+0x38b4>
   1486c:	cmp	r4, #0
   14870:	beq	14894 <__assert_fail@plt+0x39a0>
   14874:	umull	r0, r1, r4, r5
   14878:	adds	r3, r1, #0
   1487c:	movne	r3, #1
   14880:	cmp	r0, #0
   14884:	blt	14890 <__assert_fail@plt+0x399c>
   14888:	cmp	r3, #0
   1488c:	beq	14858 <__assert_fail@plt+0x3964>
   14890:	bl	14994 <__assert_fail@plt+0x3aa0>
   14894:	mov	r1, r2
   14898:	mov	r0, #64	; 0x40
   1489c:	bl	15958 <__assert_fail@plt+0x4a64>
   148a0:	cmp	r5, #64	; 0x40
   148a4:	movls	r4, r0
   148a8:	addhi	r4, r0, #1
   148ac:	b	14874 <__assert_fail@plt+0x3980>
   148b0:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   148b4:	cmp	r0, #0
   148b8:	ldr	r3, [r1]
   148bc:	beq	148e0 <__assert_fail@plt+0x39ec>
   148c0:	ldr	r2, [pc, #60]	; 14904 <__assert_fail@plt+0x3a10>
   148c4:	cmp	r3, r2
   148c8:	bhi	148fc <__assert_fail@plt+0x3a08>
   148cc:	add	r2, r3, #1
   148d0:	add	r3, r2, r3, lsr #1
   148d4:	str	r3, [r1]
   148d8:	mov	r1, r3
   148dc:	b	147a8 <__assert_fail@plt+0x38b4>
   148e0:	cmp	r3, #0
   148e4:	bne	148f8 <__assert_fail@plt+0x3a04>
   148e8:	mov	r3, #64	; 0x40
   148ec:	str	r3, [r1]
   148f0:	mov	r1, r3
   148f4:	b	147a8 <__assert_fail@plt+0x38b4>
   148f8:	bge	148d4 <__assert_fail@plt+0x39e0>
   148fc:	push	{r4, lr}
   14900:	bl	14994 <__assert_fail@plt+0x3aa0>
   14904:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14908:	push	{r4, lr}
   1490c:	mov	r4, r0
   14910:	bl	1474c <__assert_fail@plt+0x3858>
   14914:	mov	r2, r4
   14918:	mov	r1, #0
   1491c:	pop	{r4, lr}
   14920:	b	10e40 <memset@plt>
   14924:	push	{r4, r5, r6, lr}
   14928:	umull	r4, r5, r0, r1
   1492c:	adds	r3, r5, #0
   14930:	movne	r3, #1
   14934:	cmp	r4, #0
   14938:	blt	14950 <__assert_fail@plt+0x3a5c>
   1493c:	cmp	r3, #0
   14940:	bne	14950 <__assert_fail@plt+0x3a5c>
   14944:	bl	10c9c <calloc@plt>
   14948:	cmp	r0, #0
   1494c:	popne	{r4, r5, r6, pc}
   14950:	bl	14994 <__assert_fail@plt+0x3aa0>
   14954:	push	{r4, r5, r6, lr}
   14958:	mov	r4, r1
   1495c:	mov	r5, r0
   14960:	mov	r0, r1
   14964:	bl	1474c <__assert_fail@plt+0x3858>
   14968:	mov	r2, r4
   1496c:	mov	r1, r5
   14970:	pop	{r4, r5, r6, lr}
   14974:	b	10cf0 <memcpy@plt>
   14978:	push	{r4, lr}
   1497c:	mov	r4, r0
   14980:	bl	10e10 <strlen@plt>
   14984:	add	r1, r0, #1
   14988:	mov	r0, r4
   1498c:	pop	{r4, lr}
   14990:	b	14954 <__assert_fail@plt+0x3a60>
   14994:	ldr	r3, [pc, #44]	; 149c8 <__assert_fail@plt+0x3ad4>
   14998:	push	{r4, lr}
   1499c:	mov	r2, #5
   149a0:	ldr	r1, [pc, #36]	; 149cc <__assert_fail@plt+0x3ad8>
   149a4:	mov	r0, #0
   149a8:	ldr	r4, [r3]
   149ac:	bl	10d20 <dcgettext@plt>
   149b0:	ldr	r2, [pc, #24]	; 149d0 <__assert_fail@plt+0x3adc>
   149b4:	mov	r1, #0
   149b8:	mov	r3, r0
   149bc:	mov	r0, r4
   149c0:	bl	10da4 <error@plt>
   149c4:	bl	10edc <abort@plt>
   149c8:	andeq	r7, r2, r8, ror #1
   149cc:	andeq	r6, r1, r8, lsl #23
   149d0:	andeq	r6, r1, r4, asr r7
   149d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d8:	sub	sp, sp, #36	; 0x24
   149dc:	ldr	r6, [pc, #348]	; 14b40 <__assert_fail@plt+0x3c4c>
   149e0:	ldr	lr, [sp, #80]	; 0x50
   149e4:	mov	r8, r2
   149e8:	ldr	ip, [r6]
   149ec:	mov	r2, r1
   149f0:	mov	r9, r3
   149f4:	str	lr, [sp]
   149f8:	add	r3, sp, #16
   149fc:	mov	r1, #0
   14a00:	str	ip, [sp, #28]
   14a04:	mov	r7, r0
   14a08:	ldr	sl, [sp, #84]	; 0x54
   14a0c:	ldr	r5, [sp, #88]	; 0x58
   14a10:	bl	14b50 <__assert_fail@plt+0x3c5c>
   14a14:	subs	fp, r0, #0
   14a18:	bne	14ae0 <__assert_fail@plt+0x3bec>
   14a1c:	ldrd	r2, [sp, #16]
   14a20:	cmp	r2, r8
   14a24:	sbcs	r1, r3, r9
   14a28:	ldrd	r8, [sp, #72]	; 0x48
   14a2c:	movlt	r1, #1
   14a30:	movge	r1, #0
   14a34:	cmp	r8, r2
   14a38:	sbcs	r0, r9, r3
   14a3c:	orrlt	r1, r1, #1
   14a40:	cmp	r1, #0
   14a44:	beq	14aa8 <__assert_fail@plt+0x3bb4>
   14a48:	strd	r2, [sp, #8]
   14a4c:	bl	10e28 <__errno_location@plt>
   14a50:	ldrd	r2, [sp, #8]
   14a54:	cmp	r2, #1073741824	; 0x40000000
   14a58:	sbcs	r1, r3, #0
   14a5c:	bge	14ac8 <__assert_fail@plt+0x3bd4>
   14a60:	mov	r8, #-1073741824	; 0xc0000000
   14a64:	mvn	r9, #0
   14a68:	cmp	r2, r8
   14a6c:	sbcs	r3, r3, r9
   14a70:	blt	14ac8 <__assert_fail@plt+0x3bd4>
   14a74:	mov	r4, #34	; 0x22
   14a78:	cmp	r5, #0
   14a7c:	str	r4, [r0]
   14a80:	beq	14b20 <__assert_fail@plt+0x3c2c>
   14a84:	mov	r0, r7
   14a88:	bl	141dc <__assert_fail@plt+0x32e8>
   14a8c:	mov	r3, sl
   14a90:	ldr	r2, [pc, #172]	; 14b44 <__assert_fail@plt+0x3c50>
   14a94:	mov	r1, r4
   14a98:	str	r0, [sp]
   14a9c:	mov	r0, r5
   14aa0:	bl	10da4 <error@plt>
   14aa4:	ldrd	r2, [sp, #16]
   14aa8:	ldr	lr, [sp, #28]
   14aac:	ldr	ip, [r6]
   14ab0:	mov	r0, r2
   14ab4:	cmp	lr, ip
   14ab8:	mov	r1, r3
   14abc:	bne	14b3c <__assert_fail@plt+0x3c48>
   14ac0:	add	sp, sp, #36	; 0x24
   14ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac8:	mov	r4, #75	; 0x4b
   14acc:	cmp	r5, #0
   14ad0:	str	r4, [r0]
   14ad4:	moveq	r5, #1
   14ad8:	moveq	r4, #75	; 0x4b
   14adc:	b	14a84 <__assert_fail@plt+0x3b90>
   14ae0:	bl	10e28 <__errno_location@plt>
   14ae4:	cmp	fp, #1
   14ae8:	beq	14b28 <__assert_fail@plt+0x3c34>
   14aec:	cmp	fp, #3
   14af0:	beq	14b0c <__assert_fail@plt+0x3c18>
   14af4:	ldr	r4, [r0]
   14af8:	cmp	r5, #0
   14afc:	moveq	r5, #1
   14b00:	cmp	r4, #22
   14b04:	moveq	r4, #0
   14b08:	b	14a84 <__assert_fail@plt+0x3b90>
   14b0c:	mov	r4, #0
   14b10:	cmp	r5, #0
   14b14:	str	r4, [r0]
   14b18:	bne	14a84 <__assert_fail@plt+0x3b90>
   14b1c:	mov	r4, r5
   14b20:	mov	r5, #1
   14b24:	b	14a84 <__assert_fail@plt+0x3b90>
   14b28:	mov	r4, #75	; 0x4b
   14b2c:	cmp	r5, #0
   14b30:	str	r4, [r0]
   14b34:	bne	14a84 <__assert_fail@plt+0x3b90>
   14b38:	b	14b20 <__assert_fail@plt+0x3c2c>
   14b3c:	bl	10d2c <__stack_chk_fail@plt>
   14b40:	andeq	r6, r2, r8, lsl #30
   14b44:	andeq	r6, r1, r0, asr r7
   14b48:	mov	r1, #10
   14b4c:	b	149d4 <__assert_fail@plt+0x3ae0>
   14b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b54:	cmp	r2, #36	; 0x24
   14b58:	mov	r6, r2
   14b5c:	ldr	r2, [pc, #2760]	; 1562c <__assert_fail@plt+0x4738>
   14b60:	sub	sp, sp, #36	; 0x24
   14b64:	ldr	r2, [r2]
   14b68:	ldr	r9, [sp, #72]	; 0x48
   14b6c:	str	r2, [sp, #28]
   14b70:	bhi	15614 <__assert_fail@plt+0x4720>
   14b74:	cmp	r1, #0
   14b78:	mov	r5, r1
   14b7c:	mov	r8, r0
   14b80:	addeq	r5, sp, #24
   14b84:	mov	sl, r3
   14b88:	bl	10e28 <__errno_location@plt>
   14b8c:	mov	r4, #0
   14b90:	mov	r2, r6
   14b94:	mov	r3, r4
   14b98:	mov	r1, r5
   14b9c:	str	r4, [r0]
   14ba0:	mov	fp, r0
   14ba4:	mov	r0, r8
   14ba8:	bl	10eac <__strtoll_internal@plt>
   14bac:	ldr	r3, [r5]
   14bb0:	cmp	r3, r8
   14bb4:	str	r3, [sp, #8]
   14bb8:	mov	r6, r0
   14bbc:	mov	r7, r1
   14bc0:	beq	14c18 <__assert_fail@plt+0x3d24>
   14bc4:	ldr	r4, [fp]
   14bc8:	cmp	r4, #0
   14bcc:	beq	14bdc <__assert_fail@plt+0x3ce8>
   14bd0:	cmp	r4, #34	; 0x22
   14bd4:	bne	14d18 <__assert_fail@plt+0x3e24>
   14bd8:	mov	r4, #1
   14bdc:	cmp	r9, #0
   14be0:	beq	14bf4 <__assert_fail@plt+0x3d00>
   14be4:	ldr	r3, [sp, #8]
   14be8:	ldrb	r8, [r3]
   14bec:	cmp	r8, #0
   14bf0:	bne	14e20 <__assert_fail@plt+0x3f2c>
   14bf4:	strd	r6, [sl]
   14bf8:	ldr	r3, [pc, #2604]	; 1562c <__assert_fail@plt+0x4738>
   14bfc:	ldr	r2, [sp, #28]
   14c00:	mov	r0, r4
   14c04:	ldr	r3, [r3]
   14c08:	cmp	r2, r3
   14c0c:	bne	15628 <__assert_fail@plt+0x4734>
   14c10:	add	sp, sp, #36	; 0x24
   14c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c18:	cmp	r9, r4
   14c1c:	beq	14d18 <__assert_fail@plt+0x3e24>
   14c20:	ldrb	r8, [r8]
   14c24:	cmp	r8, r4
   14c28:	beq	14d18 <__assert_fail@plt+0x3e24>
   14c2c:	mov	r1, r8
   14c30:	mov	r0, r9
   14c34:	bl	10e1c <strchr@plt>
   14c38:	cmp	r0, r4
   14c3c:	movne	r6, #1
   14c40:	movne	r7, #0
   14c44:	beq	14d18 <__assert_fail@plt+0x3e24>
   14c48:	sub	fp, r8, #69	; 0x45
   14c4c:	cmp	fp, #47	; 0x2f
   14c50:	ldrls	pc, [pc, fp, lsl #2]
   14c54:	b	14e40 <__assert_fail@plt+0x3f4c>
   14c58:	andeq	r4, r1, r0, lsr #26
   14c5c:	andeq	r4, r1, r0, asr #28
   14c60:	andeq	r4, r1, r0, lsr #26
   14c64:	andeq	r4, r1, r0, asr #28
   14c68:	andeq	r4, r1, r0, asr #28
   14c6c:	andeq	r4, r1, r0, asr #28
   14c70:	andeq	r4, r1, r0, lsr #26
   14c74:	andeq	r4, r1, r0, asr #28
   14c78:	andeq	r4, r1, r0, lsr #26
   14c7c:	andeq	r4, r1, r0, asr #28
   14c80:	andeq	r4, r1, r0, asr #28
   14c84:	andeq	r4, r1, r0, lsr #26
   14c88:	andeq	r4, r1, r0, asr #28
   14c8c:	andeq	r4, r1, r0, asr #28
   14c90:	andeq	r4, r1, r0, asr #28
   14c94:	andeq	r4, r1, r0, lsr #26
   14c98:	andeq	r4, r1, r0, asr #28
   14c9c:	andeq	r4, r1, r0, asr #28
   14ca0:	andeq	r4, r1, r0, asr #28
   14ca4:	andeq	r4, r1, r0, asr #28
   14ca8:	andeq	r4, r1, r0, lsr #26
   14cac:	andeq	r4, r1, r0, lsr #26
   14cb0:	andeq	r4, r1, r0, asr #28
   14cb4:	andeq	r4, r1, r0, asr #28
   14cb8:	andeq	r4, r1, r0, asr #28
   14cbc:	andeq	r4, r1, r0, asr #28
   14cc0:	andeq	r4, r1, r0, asr #28
   14cc4:	andeq	r4, r1, r0, asr #28
   14cc8:	andeq	r4, r1, r0, asr #28
   14ccc:	andeq	r4, r1, r0, asr #28
   14cd0:	andeq	r4, r1, r0, asr #28
   14cd4:	andeq	r4, r1, r0, asr #28
   14cd8:	andeq	r4, r1, r0, asr #28
   14cdc:	andeq	r4, r1, r0, asr #28
   14ce0:	andeq	r4, r1, r0, lsr #26
   14ce4:	andeq	r4, r1, r0, asr #28
   14ce8:	andeq	r4, r1, r0, asr #28
   14cec:	andeq	r4, r1, r0, asr #28
   14cf0:	andeq	r4, r1, r0, lsr #26
   14cf4:	andeq	r4, r1, r0, asr #28
   14cf8:	andeq	r4, r1, r0, lsr #26
   14cfc:	andeq	r4, r1, r0, asr #28
   14d00:	andeq	r4, r1, r0, asr #28
   14d04:	andeq	r4, r1, r0, asr #28
   14d08:	andeq	r4, r1, r0, asr #28
   14d0c:	andeq	r4, r1, r0, asr #28
   14d10:	andeq	r4, r1, r0, asr #28
   14d14:	andeq	r4, r1, r0, lsr #26
   14d18:	mov	r4, #4
   14d1c:	b	14bf8 <__assert_fail@plt+0x3d04>
   14d20:	mov	r0, r9
   14d24:	mov	r1, #48	; 0x30
   14d28:	bl	10e1c <strchr@plt>
   14d2c:	cmp	r0, #0
   14d30:	beq	14e40 <__assert_fail@plt+0x3f4c>
   14d34:	ldr	r3, [sp, #8]
   14d38:	ldrb	r3, [r3, #1]
   14d3c:	cmp	r3, #68	; 0x44
   14d40:	beq	155ec <__assert_fail@plt+0x46f8>
   14d44:	cmp	r3, #105	; 0x69
   14d48:	beq	155f8 <__assert_fail@plt+0x4704>
   14d4c:	cmp	r3, #66	; 0x42
   14d50:	beq	155ec <__assert_fail@plt+0x46f8>
   14d54:	cmp	fp, #47	; 0x2f
   14d58:	ldrls	pc, [pc, fp, lsl #2]
   14d5c:	b	14e34 <__assert_fail@plt+0x3f40>
   14d60:	andeq	r5, r1, ip, lsr #10
   14d64:	andeq	r4, r1, r4, lsr lr
   14d68:	andeq	r5, r1, r8, lsl #10
   14d6c:	andeq	r4, r1, r4, lsr lr
   14d70:	andeq	r4, r1, r4, lsr lr
   14d74:	andeq	r4, r1, r4, lsr lr
   14d78:	strdeq	r5, [r1], -r0
   14d7c:	andeq	r4, r1, r4, lsr lr
   14d80:	ldrdeq	r5, [r1], -r4
   14d84:	andeq	r4, r1, r4, lsr lr
   14d88:	andeq	r4, r1, r4, lsr lr
   14d8c:			; <UNDEFINED> instruction: 0x000154b0
   14d90:	andeq	r4, r1, r4, lsr lr
   14d94:	andeq	r4, r1, r4, lsr lr
   14d98:	andeq	r4, r1, r4, lsr lr
   14d9c:	andeq	r5, r1, ip, lsl #9
   14da0:	andeq	r4, r1, r4, lsr lr
   14da4:	andeq	r4, r1, r4, lsr lr
   14da8:	andeq	r4, r1, r4, lsr lr
   14dac:	andeq	r4, r1, r4, lsr lr
   14db0:	andeq	r5, r1, r8, ror #8
   14db4:	andeq	r5, r1, r4, asr #8
   14db8:	andeq	r4, r1, r4, lsr lr
   14dbc:	andeq	r4, r1, r4, lsr lr
   14dc0:	andeq	r4, r1, r4, lsr lr
   14dc4:	andeq	r4, r1, r4, lsr lr
   14dc8:	andeq	r4, r1, r4, lsr lr
   14dcc:	andeq	r4, r1, r4, lsr lr
   14dd0:	andeq	r4, r1, r4, lsr lr
   14dd4:	strdeq	r4, [r1], -ip
   14dd8:	andeq	r5, r1, r0, asr r5
   14ddc:	andeq	r4, r1, r4, lsr lr
   14de0:	andeq	r4, r1, r4, lsr lr
   14de4:	andeq	r4, r1, r4, lsr lr
   14de8:	andeq	r5, r1, r8, lsl #10
   14dec:	andeq	r4, r1, r4, lsr lr
   14df0:	andeq	r4, r1, r4, lsr lr
   14df4:	andeq	r4, r1, r4, lsr lr
   14df8:	strdeq	r5, [r1], -r0
   14dfc:	andeq	r4, r1, r4, lsr lr
   14e00:	ldrdeq	r5, [r1], -r4
   14e04:	andeq	r4, r1, r4, lsr lr
   14e08:	andeq	r4, r1, r4, lsr lr
   14e0c:	andeq	r4, r1, r4, lsr lr
   14e10:	andeq	r4, r1, r4, lsr lr
   14e14:	andeq	r4, r1, r4, lsr lr
   14e18:	andeq	r4, r1, r4, lsr lr
   14e1c:	andeq	r5, r1, ip, lsl #9
   14e20:	mov	r1, r8
   14e24:	mov	r0, r9
   14e28:	bl	10e1c <strchr@plt>
   14e2c:	cmp	r0, #0
   14e30:	bne	14c48 <__assert_fail@plt+0x3d54>
   14e34:	strd	r6, [sl]
   14e38:	orr	r4, r4, #2
   14e3c:	b	14bf8 <__assert_fail@plt+0x3d04>
   14e40:	mov	fp, #1
   14e44:	mov	r3, #1024	; 0x400
   14e48:	sub	r8, r8, #66	; 0x42
   14e4c:	cmp	r8, #53	; 0x35
   14e50:	ldrls	pc, [pc, r8, lsl #2]
   14e54:	b	14e34 <__assert_fail@plt+0x3f40>
   14e58:	andeq	r5, r1, r8, lsr r0
   14e5c:	andeq	r4, r1, r4, lsr lr
   14e60:	andeq	r4, r1, r4, lsr lr
   14e64:			; <UNDEFINED> instruction: 0x000153b0
   14e68:	andeq	r4, r1, r4, lsr lr
   14e6c:	strdeq	r5, [r1], -r4
   14e70:	andeq	r4, r1, r4, lsr lr
   14e74:	andeq	r4, r1, r4, lsr lr
   14e78:	andeq	r4, r1, r4, lsr lr
   14e7c:	muleq	r1, r8, r1
   14e80:	andeq	r4, r1, r4, lsr lr
   14e84:	andeq	r4, r1, r0, lsr pc
   14e88:	andeq	r4, r1, r4, lsr lr
   14e8c:	andeq	r4, r1, r4, lsr lr
   14e90:	andeq	r5, r1, r0, ror r0
   14e94:	andeq	r4, r1, r4, lsr lr
   14e98:	andeq	r4, r1, r4, lsr lr
   14e9c:	andeq	r4, r1, r4, lsr lr
   14ea0:	andeq	r5, r1, r8, lsl #5
   14ea4:	andeq	r4, r1, r4, lsr lr
   14ea8:	andeq	r4, r1, r4, lsr lr
   14eac:	andeq	r4, r1, r4, lsr lr
   14eb0:	andeq	r4, r1, r4, lsr lr
   14eb4:	andeq	r5, r1, r4, lsl #2
   14eb8:	andeq	r5, r1, ip, lsl r3
   14ebc:	andeq	r4, r1, r4, lsr lr
   14ec0:	andeq	r4, r1, r4, lsr lr
   14ec4:	andeq	r4, r1, r4, lsr lr
   14ec8:	andeq	r4, r1, r4, lsr lr
   14ecc:	andeq	r4, r1, r4, lsr lr
   14ed0:	andeq	r4, r1, r4, lsr lr
   14ed4:	andeq	r4, r1, r4, lsr lr
   14ed8:	andeq	r5, r1, r0
   14edc:			; <UNDEFINED> instruction: 0x00014fbc
   14ee0:	andeq	r4, r1, r4, lsr lr
   14ee4:	andeq	r4, r1, r4, lsr lr
   14ee8:	andeq	r4, r1, r4, lsr lr
   14eec:	strdeq	r5, [r1], -r4
   14ef0:	andeq	r4, r1, r4, lsr lr
   14ef4:	andeq	r4, r1, r4, lsr lr
   14ef8:	andeq	r4, r1, r4, lsr lr
   14efc:	muleq	r1, r8, r1
   14f00:	andeq	r4, r1, r4, lsr lr
   14f04:	andeq	r4, r1, r0, lsr pc
   14f08:	andeq	r4, r1, r4, lsr lr
   14f0c:	andeq	r4, r1, r4, lsr lr
   14f10:	andeq	r4, r1, r4, lsr lr
   14f14:	andeq	r4, r1, r4, lsr lr
   14f18:	andeq	r4, r1, r4, lsr lr
   14f1c:	andeq	r4, r1, r4, lsr lr
   14f20:	andeq	r5, r1, r8, lsl #5
   14f24:	andeq	r4, r1, r4, lsr lr
   14f28:	andeq	r4, r1, r4, lsr lr
   14f2c:	ldrdeq	r4, [r1], -r8
   14f30:	asr	r9, r3, #31
   14f34:	mov	r2, r3
   14f38:	mov	r8, r3
   14f3c:	mov	r0, #0
   14f40:	mov	r3, r9
   14f44:	mov	r1, #-2147483648	; 0x80000000
   14f48:	bl	15b64 <__assert_fail@plt+0x4c70>
   14f4c:	strd	r0, [sp]
   14f50:	ldrd	r2, [sp]
   14f54:	cmp	r6, r2
   14f58:	sbcs	r3, r7, r3
   14f5c:	blt	1556c <__assert_fail@plt+0x4678>
   14f60:	mov	r3, r9
   14f64:	mov	r2, r8
   14f68:	mvn	r0, #0
   14f6c:	mvn	r1, #-2147483648	; 0x80000000
   14f70:	bl	15b64 <__assert_fail@plt+0x4c70>
   14f74:	cmp	r0, r6
   14f78:	sbcs	r3, r1, r7
   14f7c:	blt	1557c <__assert_fail@plt+0x4688>
   14f80:	mul	ip, r6, r9
   14f84:	umull	r2, r3, r6, r8
   14f88:	mla	ip, r8, r7, ip
   14f8c:	ldrd	r6, [sp]
   14f90:	add	r3, ip, r3
   14f94:	cmp	r2, r6
   14f98:	sbcs	ip, r3, r7
   14f9c:	blt	1556c <__assert_fail@plt+0x4678>
   14fa0:	cmp	r0, r2
   14fa4:	sbcs	r1, r1, r3
   14fa8:	blt	1557c <__assert_fail@plt+0x4688>
   14fac:	mul	r1, r2, r9
   14fb0:	umull	r6, r7, r2, r8
   14fb4:	mla	r8, r8, r3, r1
   14fb8:	add	r7, r8, r7
   14fbc:	ldr	r2, [sp, #8]
   14fc0:	add	r3, r2, fp
   14fc4:	str	r3, [r5]
   14fc8:	ldrb	r3, [r2, fp]
   14fcc:	cmp	r3, #0
   14fd0:	orrne	r4, r4, #2
   14fd4:	b	14bf4 <__assert_fail@plt+0x3d00>
   14fd8:	cmp	r6, #0
   14fdc:	sbcs	r3, r7, #-1073741824	; 0xc0000000
   14fe0:	blt	1556c <__assert_fail@plt+0x4678>
   14fe4:	cmp	r6, #0
   14fe8:	sbcs	r3, r7, #1073741824	; 0x40000000
   14fec:	bge	1557c <__assert_fail@plt+0x4688>
   14ff0:	adds	r6, r6, r6
   14ff4:	adc	r7, r7, r7
   14ff8:	b	14fbc <__assert_fail@plt+0x40c8>
   14ffc:	mov	fp, #1
   15000:	mov	r2, #0
   15004:	ldr	r3, [pc, #1572]	; 15630 <__assert_fail@plt+0x473c>
   15008:	cmp	r6, r2
   1500c:	sbcs	r3, r7, r3
   15010:	blt	1556c <__assert_fail@plt+0x4678>
   15014:	cmp	r6, #0
   15018:	sbcs	r3, r7, #4194304	; 0x400000
   1501c:	bge	1557c <__assert_fail@plt+0x4688>
   15020:	lsl	r3, r7, #9
   15024:	orr	r3, r3, r6, lsr #23
   15028:	lsl	r2, r6, #9
   1502c:	mov	r6, r2
   15030:	mov	r7, r3
   15034:	b	14fbc <__assert_fail@plt+0x40c8>
   15038:	mov	r2, #0
   1503c:	ldr	r3, [pc, #1520]	; 15634 <__assert_fail@plt+0x4740>
   15040:	cmp	r6, r2
   15044:	sbcs	r3, r7, r3
   15048:	blt	1556c <__assert_fail@plt+0x4678>
   1504c:	cmp	r6, #0
   15050:	sbcs	r3, r7, #2097152	; 0x200000
   15054:	bge	1557c <__assert_fail@plt+0x4688>
   15058:	lsl	r3, r7, #10
   1505c:	orr	r3, r3, r6, lsr #22
   15060:	lsl	r2, r6, #10
   15064:	mov	r6, r2
   15068:	mov	r7, r3
   1506c:	b	14fbc <__assert_fail@plt+0x40c8>
   15070:	asr	r1, r3, #31
   15074:	mov	r2, r3
   15078:	mov	r3, r1
   1507c:	mov	r0, #0
   15080:	mov	r1, #-2147483648	; 0x80000000
   15084:	strd	r2, [sp]
   15088:	bl	15b64 <__assert_fail@plt+0x4c70>
   1508c:	str	fp, [sp, #12]
   15090:	strd	r4, [sp, #16]
   15094:	mov	r8, #5
   15098:	ldrd	r4, [sp]
   1509c:	mov	r9, #0
   150a0:	str	sl, [sp]
   150a4:	mov	fp, r1
   150a8:	mov	sl, r0
   150ac:	b	150e8 <__assert_fail@plt+0x41f4>
   150b0:	mov	r3, r5
   150b4:	mov	r2, r4
   150b8:	mvn	r0, #0
   150bc:	mvn	r1, #-2147483648	; 0x80000000
   150c0:	bl	15b64 <__assert_fail@plt+0x4c70>
   150c4:	cmp	r0, r6
   150c8:	sbcs	r3, r1, r7
   150cc:	blt	155bc <__assert_fail@plt+0x46c8>
   150d0:	mul	r3, r6, r5
   150d4:	mla	r3, r4, r7, r3
   150d8:	umull	r6, r7, r6, r4
   150dc:	add	r7, r3, r7
   150e0:	subs	r8, r8, #1
   150e4:	beq	15558 <__assert_fail@plt+0x4664>
   150e8:	cmp	r6, sl
   150ec:	sbcs	r3, r7, fp
   150f0:	bge	150b0 <__assert_fail@plt+0x41bc>
   150f4:	mov	r9, #1
   150f8:	mov	r6, #0
   150fc:	mov	r7, #-2147483648	; 0x80000000
   15100:	b	150e0 <__assert_fail@plt+0x41ec>
   15104:	asr	r1, r3, #31
   15108:	mov	r2, r3
   1510c:	mov	r3, r1
   15110:	mov	r0, #0
   15114:	mov	r1, #-2147483648	; 0x80000000
   15118:	strd	r2, [sp]
   1511c:	bl	15b64 <__assert_fail@plt+0x4c70>
   15120:	str	fp, [sp, #12]
   15124:	strd	r4, [sp, #16]
   15128:	mov	r8, #8
   1512c:	ldrd	r4, [sp]
   15130:	mov	r9, #0
   15134:	str	sl, [sp]
   15138:	mov	fp, r1
   1513c:	mov	sl, r0
   15140:	b	1517c <__assert_fail@plt+0x4288>
   15144:	mov	r3, r5
   15148:	mov	r2, r4
   1514c:	mvn	r0, #0
   15150:	mvn	r1, #-2147483648	; 0x80000000
   15154:	bl	15b64 <__assert_fail@plt+0x4c70>
   15158:	cmp	r0, r6
   1515c:	sbcs	r3, r1, r7
   15160:	blt	1559c <__assert_fail@plt+0x46a8>
   15164:	mul	r3, r6, r5
   15168:	mla	r3, r4, r7, r3
   1516c:	umull	r6, r7, r6, r4
   15170:	add	r7, r3, r7
   15174:	subs	r8, r8, #1
   15178:	beq	15558 <__assert_fail@plt+0x4664>
   1517c:	cmp	r6, sl
   15180:	sbcs	r3, r7, fp
   15184:	bge	15144 <__assert_fail@plt+0x4250>
   15188:	mov	r9, #1
   1518c:	mov	r6, #0
   15190:	mov	r7, #-2147483648	; 0x80000000
   15194:	b	15174 <__assert_fail@plt+0x4280>
   15198:	asr	r9, r3, #31
   1519c:	mov	r8, r3
   151a0:	mov	r2, r3
   151a4:	mov	r0, #0
   151a8:	mov	r3, r9
   151ac:	mov	r1, #-2147483648	; 0x80000000
   151b0:	bl	15b64 <__assert_fail@plt+0x4c70>
   151b4:	cmp	r6, r0
   151b8:	sbcs	r3, r7, r1
   151bc:	blt	1556c <__assert_fail@plt+0x4678>
   151c0:	mov	r3, r9
   151c4:	mov	r2, r8
   151c8:	mvn	r0, #0
   151cc:	mvn	r1, #-2147483648	; 0x80000000
   151d0:	bl	15b64 <__assert_fail@plt+0x4c70>
   151d4:	cmp	r0, r6
   151d8:	sbcs	r3, r1, r7
   151dc:	blt	1557c <__assert_fail@plt+0x4688>
   151e0:	mul	r3, r6, r9
   151e4:	mla	r3, r8, r7, r3
   151e8:	umull	r6, r7, r6, r8
   151ec:	add	r7, r3, r7
   151f0:	b	14fbc <__assert_fail@plt+0x40c8>
   151f4:	asr	r1, r3, #31
   151f8:	mov	r2, r3
   151fc:	mov	r3, r1
   15200:	mov	r0, #0
   15204:	mov	r1, #-2147483648	; 0x80000000
   15208:	strd	r2, [sp]
   1520c:	bl	15b64 <__assert_fail@plt+0x4c70>
   15210:	str	fp, [sp, #12]
   15214:	strd	r4, [sp, #16]
   15218:	mov	r8, #3
   1521c:	ldrd	r4, [sp]
   15220:	mov	r9, #0
   15224:	str	sl, [sp]
   15228:	mov	fp, r1
   1522c:	mov	sl, r0
   15230:	b	1526c <__assert_fail@plt+0x4378>
   15234:	mov	r3, r5
   15238:	mov	r2, r4
   1523c:	mvn	r0, #0
   15240:	mvn	r1, #-2147483648	; 0x80000000
   15244:	bl	15b64 <__assert_fail@plt+0x4c70>
   15248:	cmp	r0, r6
   1524c:	sbcs	r3, r1, r7
   15250:	blt	1558c <__assert_fail@plt+0x4698>
   15254:	mul	r3, r6, r5
   15258:	mla	r3, r4, r7, r3
   1525c:	umull	r6, r7, r6, r4
   15260:	add	r7, r3, r7
   15264:	subs	r8, r8, #1
   15268:	beq	15558 <__assert_fail@plt+0x4664>
   1526c:	cmp	r6, sl
   15270:	sbcs	r3, r7, fp
   15274:	bge	15234 <__assert_fail@plt+0x4340>
   15278:	mov	r9, #1
   1527c:	mov	r6, #0
   15280:	mov	r7, #-2147483648	; 0x80000000
   15284:	b	15264 <__assert_fail@plt+0x4370>
   15288:	asr	r1, r3, #31
   1528c:	mov	r2, r3
   15290:	mov	r3, r1
   15294:	mov	r0, #0
   15298:	mov	r1, #-2147483648	; 0x80000000
   1529c:	strd	r2, [sp]
   152a0:	bl	15b64 <__assert_fail@plt+0x4c70>
   152a4:	str	fp, [sp, #12]
   152a8:	strd	r4, [sp, #16]
   152ac:	mov	r8, #4
   152b0:	ldrd	r4, [sp]
   152b4:	mov	r9, #0
   152b8:	str	sl, [sp]
   152bc:	mov	fp, r1
   152c0:	mov	sl, r0
   152c4:	b	15300 <__assert_fail@plt+0x440c>
   152c8:	mov	r3, r5
   152cc:	mov	r2, r4
   152d0:	mvn	r0, #0
   152d4:	mvn	r1, #-2147483648	; 0x80000000
   152d8:	bl	15b64 <__assert_fail@plt+0x4c70>
   152dc:	cmp	r0, r6
   152e0:	sbcs	r3, r1, r7
   152e4:	blt	155dc <__assert_fail@plt+0x46e8>
   152e8:	mul	r3, r6, r5
   152ec:	mla	r3, r4, r7, r3
   152f0:	umull	r6, r7, r6, r4
   152f4:	add	r7, r3, r7
   152f8:	subs	r8, r8, #1
   152fc:	beq	15558 <__assert_fail@plt+0x4664>
   15300:	cmp	r6, sl
   15304:	sbcs	r3, r7, fp
   15308:	bge	152c8 <__assert_fail@plt+0x43d4>
   1530c:	mov	r9, #1
   15310:	mov	r6, #0
   15314:	mov	r7, #-2147483648	; 0x80000000
   15318:	b	152f8 <__assert_fail@plt+0x4404>
   1531c:	asr	r1, r3, #31
   15320:	mov	r2, r3
   15324:	mov	r3, r1
   15328:	mov	r0, #0
   1532c:	mov	r1, #-2147483648	; 0x80000000
   15330:	strd	r2, [sp]
   15334:	bl	15b64 <__assert_fail@plt+0x4c70>
   15338:	str	fp, [sp, #12]
   1533c:	strd	r4, [sp, #16]
   15340:	mov	r8, #7
   15344:	ldrd	r4, [sp]
   15348:	mov	r9, #0
   1534c:	str	sl, [sp]
   15350:	mov	fp, r1
   15354:	mov	sl, r0
   15358:	b	15394 <__assert_fail@plt+0x44a0>
   1535c:	mov	r3, r5
   15360:	mov	r2, r4
   15364:	mvn	r0, #0
   15368:	mvn	r1, #-2147483648	; 0x80000000
   1536c:	bl	15b64 <__assert_fail@plt+0x4c70>
   15370:	cmp	r0, r6
   15374:	sbcs	r3, r1, r7
   15378:	blt	155cc <__assert_fail@plt+0x46d8>
   1537c:	mul	r3, r6, r5
   15380:	mla	r3, r4, r7, r3
   15384:	umull	r6, r7, r6, r4
   15388:	add	r7, r3, r7
   1538c:	subs	r8, r8, #1
   15390:	beq	15558 <__assert_fail@plt+0x4664>
   15394:	cmp	r6, sl
   15398:	sbcs	r3, r7, fp
   1539c:	bge	1535c <__assert_fail@plt+0x4468>
   153a0:	mov	r9, #1
   153a4:	mov	r6, #0
   153a8:	mov	r7, #-2147483648	; 0x80000000
   153ac:	b	1538c <__assert_fail@plt+0x4498>
   153b0:	asr	r1, r3, #31
   153b4:	mov	r2, r3
   153b8:	mov	r3, r1
   153bc:	mov	r0, #0
   153c0:	mov	r1, #-2147483648	; 0x80000000
   153c4:	strd	r2, [sp]
   153c8:	bl	15b64 <__assert_fail@plt+0x4c70>
   153cc:	str	fp, [sp, #12]
   153d0:	strd	r4, [sp, #16]
   153d4:	mov	r8, #6
   153d8:	ldrd	r4, [sp]
   153dc:	mov	r9, #0
   153e0:	str	sl, [sp]
   153e4:	mov	fp, r1
   153e8:	mov	sl, r0
   153ec:	b	15428 <__assert_fail@plt+0x4534>
   153f0:	mov	r3, r5
   153f4:	mov	r2, r4
   153f8:	mvn	r0, #0
   153fc:	mvn	r1, #-2147483648	; 0x80000000
   15400:	bl	15b64 <__assert_fail@plt+0x4c70>
   15404:	cmp	r0, r6
   15408:	sbcs	r3, r1, r7
   1540c:	blt	155ac <__assert_fail@plt+0x46b8>
   15410:	mul	r3, r6, r5
   15414:	mla	r3, r4, r7, r3
   15418:	umull	r6, r7, r6, r4
   1541c:	add	r7, r3, r7
   15420:	subs	r8, r8, #1
   15424:	beq	15558 <__assert_fail@plt+0x4664>
   15428:	cmp	r6, sl
   1542c:	sbcs	r3, r7, fp
   15430:	bge	153f0 <__assert_fail@plt+0x44fc>
   15434:	mov	r9, #1
   15438:	mov	r6, #0
   1543c:	mov	r7, #-2147483648	; 0x80000000
   15440:	b	15420 <__assert_fail@plt+0x452c>
   15444:	ldr	r3, [pc, #488]	; 15634 <__assert_fail@plt+0x4740>
   15448:	mov	r2, #0
   1544c:	mov	r0, r2
   15450:	mov	r1, r3
   15454:	mov	r2, #1024	; 0x400
   15458:	mov	r3, #0
   1545c:	mov	fp, #1
   15460:	strd	r2, [sp]
   15464:	b	15338 <__assert_fail@plt+0x4444>
   15468:	ldr	r3, [pc, #452]	; 15634 <__assert_fail@plt+0x4740>
   1546c:	mov	r2, #0
   15470:	mov	r0, r2
   15474:	mov	r1, r3
   15478:	mov	r2, #1024	; 0x400
   1547c:	mov	r3, #0
   15480:	mov	fp, #1
   15484:	strd	r2, [sp]
   15488:	b	15120 <__assert_fail@plt+0x422c>
   1548c:	ldr	r3, [pc, #416]	; 15634 <__assert_fail@plt+0x4740>
   15490:	mov	r2, #0
   15494:	mov	r0, r2
   15498:	mov	r1, r3
   1549c:	mov	r2, #1024	; 0x400
   154a0:	mov	r3, #0
   154a4:	mov	fp, #1
   154a8:	strd	r2, [sp]
   154ac:	b	152a4 <__assert_fail@plt+0x43b0>
   154b0:	ldr	r3, [pc, #380]	; 15634 <__assert_fail@plt+0x4740>
   154b4:	mov	r2, #0
   154b8:	mov	r0, r2
   154bc:	mov	r1, r3
   154c0:	mov	r2, #1024	; 0x400
   154c4:	mov	r3, #0
   154c8:	mov	fp, #1
   154cc:	strd	r2, [sp]
   154d0:	b	1508c <__assert_fail@plt+0x4198>
   154d4:	ldr	r3, [pc, #344]	; 15634 <__assert_fail@plt+0x4740>
   154d8:	mov	r2, #0
   154dc:	mov	fp, #1
   154e0:	strd	r2, [sp]
   154e4:	mov	r8, #1024	; 0x400
   154e8:	mov	r9, #0
   154ec:	b	14f50 <__assert_fail@plt+0x405c>
   154f0:	mov	fp, #1
   154f4:	mov	r0, #0
   154f8:	ldr	r1, [pc, #308]	; 15634 <__assert_fail@plt+0x4740>
   154fc:	mov	r8, #1024	; 0x400
   15500:	mov	r9, #0
   15504:	b	151b4 <__assert_fail@plt+0x42c0>
   15508:	ldr	r3, [pc, #292]	; 15634 <__assert_fail@plt+0x4740>
   1550c:	mov	r2, #0
   15510:	mov	r0, r2
   15514:	mov	r1, r3
   15518:	mov	r2, #1024	; 0x400
   1551c:	mov	r3, #0
   15520:	mov	fp, #1
   15524:	strd	r2, [sp]
   15528:	b	15210 <__assert_fail@plt+0x431c>
   1552c:	ldr	r3, [pc, #256]	; 15634 <__assert_fail@plt+0x4740>
   15530:	mov	r2, #0
   15534:	mov	r0, r2
   15538:	mov	r1, r3
   1553c:	mov	r2, #1024	; 0x400
   15540:	mov	r3, #0
   15544:	mov	fp, #1
   15548:	strd	r2, [sp]
   1554c:	b	153cc <__assert_fail@plt+0x44d8>
   15550:	mov	fp, #1
   15554:	b	14fbc <__assert_fail@plt+0x40c8>
   15558:	ldrd	r4, [sp, #16]
   1555c:	ldr	fp, [sp, #12]
   15560:	ldr	sl, [sp]
   15564:	orr	r4, r4, r9
   15568:	b	14fbc <__assert_fail@plt+0x40c8>
   1556c:	mov	r4, #1
   15570:	mov	r6, #0
   15574:	mov	r7, #-2147483648	; 0x80000000
   15578:	b	14fbc <__assert_fail@plt+0x40c8>
   1557c:	mov	r4, #1
   15580:	mvn	r6, #0
   15584:	mvn	r7, #-2147483648	; 0x80000000
   15588:	b	14fbc <__assert_fail@plt+0x40c8>
   1558c:	mov	r9, #1
   15590:	mvn	r6, #0
   15594:	mvn	r7, #-2147483648	; 0x80000000
   15598:	b	15264 <__assert_fail@plt+0x4370>
   1559c:	mov	r9, #1
   155a0:	mvn	r6, #0
   155a4:	mvn	r7, #-2147483648	; 0x80000000
   155a8:	b	15174 <__assert_fail@plt+0x4280>
   155ac:	mov	r9, #1
   155b0:	mvn	r6, #0
   155b4:	mvn	r7, #-2147483648	; 0x80000000
   155b8:	b	15420 <__assert_fail@plt+0x452c>
   155bc:	mov	r9, #1
   155c0:	mvn	r6, #0
   155c4:	mvn	r7, #-2147483648	; 0x80000000
   155c8:	b	150e0 <__assert_fail@plt+0x41ec>
   155cc:	mov	r9, #1
   155d0:	mvn	r6, #0
   155d4:	mvn	r7, #-2147483648	; 0x80000000
   155d8:	b	1538c <__assert_fail@plt+0x4498>
   155dc:	mov	r9, #1
   155e0:	mvn	r6, #0
   155e4:	mvn	r7, #-2147483648	; 0x80000000
   155e8:	b	152f8 <__assert_fail@plt+0x4404>
   155ec:	mov	fp, #2
   155f0:	mov	r3, #1000	; 0x3e8
   155f4:	b	14e48 <__assert_fail@plt+0x3f54>
   155f8:	ldr	r3, [sp, #8]
   155fc:	ldrb	r2, [r3, #2]
   15600:	mov	r3, #1024	; 0x400
   15604:	cmp	r2, #66	; 0x42
   15608:	movne	fp, #1
   1560c:	moveq	fp, #3
   15610:	b	14e48 <__assert_fail@plt+0x3f54>
   15614:	ldr	r3, [pc, #28]	; 15638 <__assert_fail@plt+0x4744>
   15618:	mov	r2, #96	; 0x60
   1561c:	ldr	r1, [pc, #24]	; 1563c <__assert_fail@plt+0x4748>
   15620:	ldr	r0, [pc, #24]	; 15640 <__assert_fail@plt+0x474c>
   15624:	bl	10ef4 <__assert_fail@plt>
   15628:	bl	10d2c <__stack_chk_fail@plt>
   1562c:	andeq	r6, r2, r8, lsl #30
   15630:			; <UNDEFINED> instruction: 0xffc00000
   15634:			; <UNDEFINED> instruction: 0xffe00000
   15638:	muleq	r1, ip, fp
   1563c:	andeq	r6, r1, r8, lsr #23
   15640:			; <UNDEFINED> instruction: 0x00016bb8
   15644:	push	{r4, r5, r6, r7, r8, lr}
   15648:	subs	r7, r0, #0
   1564c:	ldr	r5, [pc, #108]	; 156c0 <__assert_fail@plt+0x47cc>
   15650:	sub	sp, sp, #8
   15654:	mov	r8, r1
   15658:	ldr	r1, [r5]
   1565c:	moveq	r7, sp
   15660:	str	r1, [sp, #4]
   15664:	mov	r0, r7
   15668:	mov	r1, r8
   1566c:	mov	r6, r2
   15670:	bl	10d98 <mbrtowc@plt>
   15674:	cmp	r6, #0
   15678:	cmnne	r0, #3
   1567c:	mov	r4, r0
   15680:	bhi	156a0 <__assert_fail@plt+0x47ac>
   15684:	ldr	r2, [sp, #4]
   15688:	ldr	r3, [r5]
   1568c:	mov	r0, r4
   15690:	cmp	r2, r3
   15694:	bne	156bc <__assert_fail@plt+0x47c8>
   15698:	add	sp, sp, #8
   1569c:	pop	{r4, r5, r6, r7, r8, pc}
   156a0:	mov	r0, #0
   156a4:	bl	15738 <__assert_fail@plt+0x4844>
   156a8:	cmp	r0, #0
   156ac:	moveq	r4, #1
   156b0:	ldrbeq	r3, [r8]
   156b4:	streq	r3, [r7]
   156b8:	b	15684 <__assert_fail@plt+0x4790>
   156bc:	bl	10d2c <__stack_chk_fail@plt>
   156c0:	andeq	r6, r2, r8, lsl #30
   156c4:	push	{r4, r5, r6, lr}
   156c8:	mov	r4, r0
   156cc:	bl	10d8c <__fpending@plt>
   156d0:	ldr	r5, [r4]
   156d4:	and	r5, r5, #32
   156d8:	mov	r6, r0
   156dc:	mov	r0, r4
   156e0:	bl	157b8 <__assert_fail@plt+0x48c4>
   156e4:	cmp	r5, #0
   156e8:	mov	r4, r0
   156ec:	bne	15718 <__assert_fail@plt+0x4824>
   156f0:	cmp	r0, #0
   156f4:	beq	15710 <__assert_fail@plt+0x481c>
   156f8:	cmp	r6, #0
   156fc:	bne	15730 <__assert_fail@plt+0x483c>
   15700:	bl	10e28 <__errno_location@plt>
   15704:	ldr	r4, [r0]
   15708:	subs	r4, r4, #9
   1570c:	mvnne	r4, #0
   15710:	mov	r0, r4
   15714:	pop	{r4, r5, r6, pc}
   15718:	cmp	r0, #0
   1571c:	bne	15730 <__assert_fail@plt+0x483c>
   15720:	bl	10e28 <__errno_location@plt>
   15724:	str	r4, [r0]
   15728:	mvn	r4, #0
   1572c:	b	15710 <__assert_fail@plt+0x481c>
   15730:	mvn	r4, #0
   15734:	b	15710 <__assert_fail@plt+0x481c>
   15738:	push	{r4, lr}
   1573c:	mov	r1, #0
   15740:	bl	10e88 <setlocale@plt>
   15744:	subs	r4, r0, #0
   15748:	beq	15774 <__assert_fail@plt+0x4880>
   1574c:	ldr	r1, [pc, #40]	; 1577c <__assert_fail@plt+0x4888>
   15750:	bl	10cc0 <strcmp@plt>
   15754:	cmp	r0, #0
   15758:	popeq	{r4, pc}
   1575c:	mov	r0, r4
   15760:	ldr	r1, [pc, #24]	; 15780 <__assert_fail@plt+0x488c>
   15764:	bl	10cc0 <strcmp@plt>
   15768:	adds	r0, r0, #0
   1576c:	movne	r0, #1
   15770:	pop	{r4, pc}
   15774:	mov	r0, #1
   15778:	pop	{r4, pc}
   1577c:	andeq	r6, r1, r0, ror #23
   15780:	andeq	r6, r1, r4, ror #23
   15784:	push	{r4, lr}
   15788:	mov	r0, #14
   1578c:	bl	10ea0 <nl_langinfo@plt>
   15790:	cmp	r0, #0
   15794:	beq	157ac <__assert_fail@plt+0x48b8>
   15798:	ldrb	r2, [r0]
   1579c:	ldr	r3, [pc, #16]	; 157b4 <__assert_fail@plt+0x48c0>
   157a0:	cmp	r2, #0
   157a4:	moveq	r0, r3
   157a8:	pop	{r4, pc}
   157ac:	ldr	r0, [pc]	; 157b4 <__assert_fail@plt+0x48c0>
   157b0:	pop	{r4, pc}
   157b4:	andeq	r6, r1, ip, ror #23
   157b8:	push	{r4, r5, lr}
   157bc:	sub	sp, sp, #12
   157c0:	mov	r4, r0
   157c4:	bl	10e58 <fileno@plt>
   157c8:	cmp	r0, #0
   157cc:	mov	r0, r4
   157d0:	blt	1584c <__assert_fail@plt+0x4958>
   157d4:	bl	10dd4 <__freading@plt>
   157d8:	cmp	r0, #0
   157dc:	bne	15818 <__assert_fail@plt+0x4924>
   157e0:	mov	r0, r4
   157e4:	bl	15858 <__assert_fail@plt+0x4964>
   157e8:	cmp	r0, #0
   157ec:	beq	15848 <__assert_fail@plt+0x4954>
   157f0:	bl	10e28 <__errno_location@plt>
   157f4:	mov	r5, r0
   157f8:	mov	r0, r4
   157fc:	ldr	r4, [r5]
   15800:	bl	10e70 <fclose@plt>
   15804:	cmp	r4, #0
   15808:	mvnne	r0, #0
   1580c:	strne	r4, [r5]
   15810:	add	sp, sp, #12
   15814:	pop	{r4, r5, pc}
   15818:	mov	r0, r4
   1581c:	bl	10e58 <fileno@plt>
   15820:	mov	r3, #1
   15824:	str	r3, [sp]
   15828:	mov	r2, #0
   1582c:	mov	r3, #0
   15830:	bl	10d74 <lseek64@plt>
   15834:	mvn	r3, #0
   15838:	mvn	r2, #0
   1583c:	cmp	r1, r3
   15840:	cmpeq	r0, r2
   15844:	bne	157e0 <__assert_fail@plt+0x48ec>
   15848:	mov	r0, r4
   1584c:	add	sp, sp, #12
   15850:	pop	{r4, r5, lr}
   15854:	b	10e70 <fclose@plt>
   15858:	push	{r4, lr}
   1585c:	subs	r4, r0, #0
   15860:	sub	sp, sp, #8
   15864:	beq	15880 <__assert_fail@plt+0x498c>
   15868:	bl	10dd4 <__freading@plt>
   1586c:	cmp	r0, #0
   15870:	beq	15880 <__assert_fail@plt+0x498c>
   15874:	ldr	r3, [r4]
   15878:	tst	r3, #256	; 0x100
   1587c:	bne	15890 <__assert_fail@plt+0x499c>
   15880:	mov	r0, r4
   15884:	add	sp, sp, #8
   15888:	pop	{r4, lr}
   1588c:	b	10ccc <fflush@plt>
   15890:	mov	r3, #1
   15894:	str	r3, [sp]
   15898:	mov	r2, #0
   1589c:	mov	r3, #0
   158a0:	mov	r0, r4
   158a4:	bl	158b8 <__assert_fail@plt+0x49c4>
   158a8:	mov	r0, r4
   158ac:	add	sp, sp, #8
   158b0:	pop	{r4, lr}
   158b4:	b	10ccc <fflush@plt>
   158b8:	push	{r4, r5, r6, r7, r8, lr}
   158bc:	sub	sp, sp, #8
   158c0:	ldmib	r0, {ip, lr}
   158c4:	mov	r4, r0
   158c8:	ldr	r5, [sp, #32]
   158cc:	cmp	lr, ip
   158d0:	beq	158e8 <__assert_fail@plt+0x49f4>
   158d4:	str	r5, [sp, #32]
   158d8:	mov	r0, r4
   158dc:	add	sp, sp, #8
   158e0:	pop	{r4, r5, r6, r7, r8, lr}
   158e4:	b	10e7c <fseeko64@plt>
   158e8:	ldr	lr, [r0, #20]
   158ec:	ldr	ip, [r0, #16]
   158f0:	cmp	lr, ip
   158f4:	bne	158d4 <__assert_fail@plt+0x49e0>
   158f8:	ldr	r8, [r0, #36]	; 0x24
   158fc:	cmp	r8, #0
   15900:	bne	158d4 <__assert_fail@plt+0x49e0>
   15904:	mov	r6, r2
   15908:	mov	r7, r3
   1590c:	bl	10e58 <fileno@plt>
   15910:	mov	r2, r6
   15914:	mov	r3, r7
   15918:	str	r5, [sp]
   1591c:	bl	10d74 <lseek64@plt>
   15920:	mvn	r3, #0
   15924:	mvn	r2, #0
   15928:	cmp	r1, r3
   1592c:	cmpeq	r0, r2
   15930:	beq	15950 <__assert_fail@plt+0x4a5c>
   15934:	ldr	r3, [r4]
   15938:	strd	r0, [r4, #80]	; 0x50
   1593c:	mov	r0, r8
   15940:	bic	r3, r3, #16
   15944:	str	r3, [r4]
   15948:	add	sp, sp, #8
   1594c:	pop	{r4, r5, r6, r7, r8, pc}
   15950:	mvn	r0, #0
   15954:	b	15948 <__assert_fail@plt+0x4a54>
   15958:	subs	r2, r1, #1
   1595c:	bxeq	lr
   15960:	bcc	15b38 <__assert_fail@plt+0x4c44>
   15964:	cmp	r0, r1
   15968:	bls	15b1c <__assert_fail@plt+0x4c28>
   1596c:	tst	r1, r2
   15970:	beq	15b28 <__assert_fail@plt+0x4c34>
   15974:	clz	r3, r0
   15978:	clz	r2, r1
   1597c:	sub	r3, r2, r3
   15980:	rsbs	r3, r3, #31
   15984:	addne	r3, r3, r3, lsl #1
   15988:	mov	r2, #0
   1598c:	addne	pc, pc, r3, lsl #2
   15990:	nop			; (mov r0, r0)
   15994:	cmp	r0, r1, lsl #31
   15998:	adc	r2, r2, r2
   1599c:	subcs	r0, r0, r1, lsl #31
   159a0:	cmp	r0, r1, lsl #30
   159a4:	adc	r2, r2, r2
   159a8:	subcs	r0, r0, r1, lsl #30
   159ac:	cmp	r0, r1, lsl #29
   159b0:	adc	r2, r2, r2
   159b4:	subcs	r0, r0, r1, lsl #29
   159b8:	cmp	r0, r1, lsl #28
   159bc:	adc	r2, r2, r2
   159c0:	subcs	r0, r0, r1, lsl #28
   159c4:	cmp	r0, r1, lsl #27
   159c8:	adc	r2, r2, r2
   159cc:	subcs	r0, r0, r1, lsl #27
   159d0:	cmp	r0, r1, lsl #26
   159d4:	adc	r2, r2, r2
   159d8:	subcs	r0, r0, r1, lsl #26
   159dc:	cmp	r0, r1, lsl #25
   159e0:	adc	r2, r2, r2
   159e4:	subcs	r0, r0, r1, lsl #25
   159e8:	cmp	r0, r1, lsl #24
   159ec:	adc	r2, r2, r2
   159f0:	subcs	r0, r0, r1, lsl #24
   159f4:	cmp	r0, r1, lsl #23
   159f8:	adc	r2, r2, r2
   159fc:	subcs	r0, r0, r1, lsl #23
   15a00:	cmp	r0, r1, lsl #22
   15a04:	adc	r2, r2, r2
   15a08:	subcs	r0, r0, r1, lsl #22
   15a0c:	cmp	r0, r1, lsl #21
   15a10:	adc	r2, r2, r2
   15a14:	subcs	r0, r0, r1, lsl #21
   15a18:	cmp	r0, r1, lsl #20
   15a1c:	adc	r2, r2, r2
   15a20:	subcs	r0, r0, r1, lsl #20
   15a24:	cmp	r0, r1, lsl #19
   15a28:	adc	r2, r2, r2
   15a2c:	subcs	r0, r0, r1, lsl #19
   15a30:	cmp	r0, r1, lsl #18
   15a34:	adc	r2, r2, r2
   15a38:	subcs	r0, r0, r1, lsl #18
   15a3c:	cmp	r0, r1, lsl #17
   15a40:	adc	r2, r2, r2
   15a44:	subcs	r0, r0, r1, lsl #17
   15a48:	cmp	r0, r1, lsl #16
   15a4c:	adc	r2, r2, r2
   15a50:	subcs	r0, r0, r1, lsl #16
   15a54:	cmp	r0, r1, lsl #15
   15a58:	adc	r2, r2, r2
   15a5c:	subcs	r0, r0, r1, lsl #15
   15a60:	cmp	r0, r1, lsl #14
   15a64:	adc	r2, r2, r2
   15a68:	subcs	r0, r0, r1, lsl #14
   15a6c:	cmp	r0, r1, lsl #13
   15a70:	adc	r2, r2, r2
   15a74:	subcs	r0, r0, r1, lsl #13
   15a78:	cmp	r0, r1, lsl #12
   15a7c:	adc	r2, r2, r2
   15a80:	subcs	r0, r0, r1, lsl #12
   15a84:	cmp	r0, r1, lsl #11
   15a88:	adc	r2, r2, r2
   15a8c:	subcs	r0, r0, r1, lsl #11
   15a90:	cmp	r0, r1, lsl #10
   15a94:	adc	r2, r2, r2
   15a98:	subcs	r0, r0, r1, lsl #10
   15a9c:	cmp	r0, r1, lsl #9
   15aa0:	adc	r2, r2, r2
   15aa4:	subcs	r0, r0, r1, lsl #9
   15aa8:	cmp	r0, r1, lsl #8
   15aac:	adc	r2, r2, r2
   15ab0:	subcs	r0, r0, r1, lsl #8
   15ab4:	cmp	r0, r1, lsl #7
   15ab8:	adc	r2, r2, r2
   15abc:	subcs	r0, r0, r1, lsl #7
   15ac0:	cmp	r0, r1, lsl #6
   15ac4:	adc	r2, r2, r2
   15ac8:	subcs	r0, r0, r1, lsl #6
   15acc:	cmp	r0, r1, lsl #5
   15ad0:	adc	r2, r2, r2
   15ad4:	subcs	r0, r0, r1, lsl #5
   15ad8:	cmp	r0, r1, lsl #4
   15adc:	adc	r2, r2, r2
   15ae0:	subcs	r0, r0, r1, lsl #4
   15ae4:	cmp	r0, r1, lsl #3
   15ae8:	adc	r2, r2, r2
   15aec:	subcs	r0, r0, r1, lsl #3
   15af0:	cmp	r0, r1, lsl #2
   15af4:	adc	r2, r2, r2
   15af8:	subcs	r0, r0, r1, lsl #2
   15afc:	cmp	r0, r1, lsl #1
   15b00:	adc	r2, r2, r2
   15b04:	subcs	r0, r0, r1, lsl #1
   15b08:	cmp	r0, r1
   15b0c:	adc	r2, r2, r2
   15b10:	subcs	r0, r0, r1
   15b14:	mov	r0, r2
   15b18:	bx	lr
   15b1c:	moveq	r0, #1
   15b20:	movne	r0, #0
   15b24:	bx	lr
   15b28:	clz	r2, r1
   15b2c:	rsb	r2, r2, #31
   15b30:	lsr	r0, r0, r2
   15b34:	bx	lr
   15b38:	cmp	r0, #0
   15b3c:	mvnne	r0, #0
   15b40:	b	15c74 <__assert_fail@plt+0x4d80>
   15b44:	cmp	r1, #0
   15b48:	beq	15b38 <__assert_fail@plt+0x4c44>
   15b4c:	push	{r0, r1, lr}
   15b50:	bl	15958 <__assert_fail@plt+0x4a64>
   15b54:	pop	{r1, r2, lr}
   15b58:	mul	r3, r2, r0
   15b5c:	sub	r1, r1, r3
   15b60:	bx	lr
   15b64:	cmp	r3, #0
   15b68:	cmpeq	r2, #0
   15b6c:	bne	15b90 <__assert_fail@plt+0x4c9c>
   15b70:	cmp	r1, #0
   15b74:	movlt	r1, #-2147483648	; 0x80000000
   15b78:	movlt	r0, #0
   15b7c:	blt	15b8c <__assert_fail@plt+0x4c98>
   15b80:	cmpeq	r0, #0
   15b84:	mvnne	r1, #-2147483648	; 0x80000000
   15b88:	mvnne	r0, #0
   15b8c:	b	15c74 <__assert_fail@plt+0x4d80>
   15b90:	sub	sp, sp, #8
   15b94:	push	{sp, lr}
   15b98:	cmp	r1, #0
   15b9c:	blt	15bbc <__assert_fail@plt+0x4cc8>
   15ba0:	cmp	r3, #0
   15ba4:	blt	15bf0 <__assert_fail@plt+0x4cfc>
   15ba8:	bl	15c84 <__assert_fail@plt+0x4d90>
   15bac:	ldr	lr, [sp, #4]
   15bb0:	add	sp, sp, #8
   15bb4:	pop	{r2, r3}
   15bb8:	bx	lr
   15bbc:	rsbs	r0, r0, #0
   15bc0:	sbc	r1, r1, r1, lsl #1
   15bc4:	cmp	r3, #0
   15bc8:	blt	15c14 <__assert_fail@plt+0x4d20>
   15bcc:	bl	15c84 <__assert_fail@plt+0x4d90>
   15bd0:	ldr	lr, [sp, #4]
   15bd4:	add	sp, sp, #8
   15bd8:	pop	{r2, r3}
   15bdc:	rsbs	r0, r0, #0
   15be0:	sbc	r1, r1, r1, lsl #1
   15be4:	rsbs	r2, r2, #0
   15be8:	sbc	r3, r3, r3, lsl #1
   15bec:	bx	lr
   15bf0:	rsbs	r2, r2, #0
   15bf4:	sbc	r3, r3, r3, lsl #1
   15bf8:	bl	15c84 <__assert_fail@plt+0x4d90>
   15bfc:	ldr	lr, [sp, #4]
   15c00:	add	sp, sp, #8
   15c04:	pop	{r2, r3}
   15c08:	rsbs	r0, r0, #0
   15c0c:	sbc	r1, r1, r1, lsl #1
   15c10:	bx	lr
   15c14:	rsbs	r2, r2, #0
   15c18:	sbc	r3, r3, r3, lsl #1
   15c1c:	bl	15c84 <__assert_fail@plt+0x4d90>
   15c20:	ldr	lr, [sp, #4]
   15c24:	add	sp, sp, #8
   15c28:	pop	{r2, r3}
   15c2c:	rsbs	r2, r2, #0
   15c30:	sbc	r3, r3, r3, lsl #1
   15c34:	bx	lr
   15c38:	cmp	r3, #0
   15c3c:	cmpeq	r2, #0
   15c40:	bne	15c58 <__assert_fail@plt+0x4d64>
   15c44:	cmp	r1, #0
   15c48:	cmpeq	r0, #0
   15c4c:	mvnne	r1, #0
   15c50:	mvnne	r0, #0
   15c54:	b	15c74 <__assert_fail@plt+0x4d80>
   15c58:	sub	sp, sp, #8
   15c5c:	push	{sp, lr}
   15c60:	bl	15c84 <__assert_fail@plt+0x4d90>
   15c64:	ldr	lr, [sp, #4]
   15c68:	add	sp, sp, #8
   15c6c:	pop	{r2, r3}
   15c70:	bx	lr
   15c74:	push	{r1, lr}
   15c78:	mov	r0, #8
   15c7c:	bl	10cb4 <raise@plt>
   15c80:	pop	{r1, pc}
   15c84:	cmp	r1, r3
   15c88:	cmpeq	r0, r2
   15c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c90:	mov	r4, r0
   15c94:	movcc	r0, #0
   15c98:	mov	r5, r1
   15c9c:	ldr	lr, [sp, #36]	; 0x24
   15ca0:	movcc	r1, r0
   15ca4:	bcc	15da0 <__assert_fail@plt+0x4eac>
   15ca8:	cmp	r3, #0
   15cac:	clzeq	ip, r2
   15cb0:	clzne	ip, r3
   15cb4:	addeq	ip, ip, #32
   15cb8:	cmp	r5, #0
   15cbc:	clzeq	r1, r4
   15cc0:	addeq	r1, r1, #32
   15cc4:	clzne	r1, r5
   15cc8:	sub	ip, ip, r1
   15ccc:	sub	sl, ip, #32
   15cd0:	lsl	r9, r3, ip
   15cd4:	rsb	fp, ip, #32
   15cd8:	orr	r9, r9, r2, lsl sl
   15cdc:	orr	r9, r9, r2, lsr fp
   15ce0:	lsl	r8, r2, ip
   15ce4:	cmp	r5, r9
   15ce8:	cmpeq	r4, r8
   15cec:	movcc	r0, #0
   15cf0:	movcc	r1, r0
   15cf4:	bcc	15d10 <__assert_fail@plt+0x4e1c>
   15cf8:	mov	r0, #1
   15cfc:	subs	r4, r4, r8
   15d00:	lsl	r1, r0, sl
   15d04:	orr	r1, r1, r0, lsr fp
   15d08:	lsl	r0, r0, ip
   15d0c:	sbc	r5, r5, r9
   15d10:	cmp	ip, #0
   15d14:	beq	15da0 <__assert_fail@plt+0x4eac>
   15d18:	lsr	r6, r8, #1
   15d1c:	orr	r6, r6, r9, lsl #31
   15d20:	lsr	r7, r9, #1
   15d24:	mov	r2, ip
   15d28:	b	15d4c <__assert_fail@plt+0x4e58>
   15d2c:	subs	r3, r4, r6
   15d30:	sbc	r8, r5, r7
   15d34:	adds	r3, r3, r3
   15d38:	adc	r8, r8, r8
   15d3c:	adds	r4, r3, #1
   15d40:	adc	r5, r8, #0
   15d44:	subs	r2, r2, #1
   15d48:	beq	15d68 <__assert_fail@plt+0x4e74>
   15d4c:	cmp	r5, r7
   15d50:	cmpeq	r4, r6
   15d54:	bcs	15d2c <__assert_fail@plt+0x4e38>
   15d58:	adds	r4, r4, r4
   15d5c:	adc	r5, r5, r5
   15d60:	subs	r2, r2, #1
   15d64:	bne	15d4c <__assert_fail@plt+0x4e58>
   15d68:	lsr	r3, r4, ip
   15d6c:	orr	r3, r3, r5, lsl fp
   15d70:	lsr	r2, r5, ip
   15d74:	orr	r3, r3, r5, lsr sl
   15d78:	adds	r0, r0, r4
   15d7c:	mov	r4, r3
   15d80:	lsl	r3, r2, ip
   15d84:	orr	r3, r3, r4, lsl sl
   15d88:	lsl	ip, r4, ip
   15d8c:	orr	r3, r3, r4, lsr fp
   15d90:	adc	r1, r1, r5
   15d94:	subs	r0, r0, ip
   15d98:	mov	r5, r2
   15d9c:	sbc	r1, r1, r3
   15da0:	cmp	lr, #0
   15da4:	strdne	r4, [lr]
   15da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15db0:	mov	r7, r0
   15db4:	ldr	r6, [pc, #72]	; 15e04 <__assert_fail@plt+0x4f10>
   15db8:	ldr	r5, [pc, #72]	; 15e08 <__assert_fail@plt+0x4f14>
   15dbc:	add	r6, pc, r6
   15dc0:	add	r5, pc, r5
   15dc4:	sub	r6, r6, r5
   15dc8:	mov	r8, r1
   15dcc:	mov	r9, r2
   15dd0:	bl	10c7c <calloc@plt-0x20>
   15dd4:	asrs	r6, r6, #2
   15dd8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ddc:	mov	r4, #0
   15de0:	add	r4, r4, #1
   15de4:	ldr	r3, [r5], #4
   15de8:	mov	r2, r9
   15dec:	mov	r1, r8
   15df0:	mov	r0, r7
   15df4:	blx	r3
   15df8:	cmp	r6, r4
   15dfc:	bne	15de0 <__assert_fail@plt+0x4eec>
   15e00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e04:	andeq	r1, r1, r0, asr #2
   15e08:	andeq	r1, r1, r8, lsr r1
   15e0c:	bx	lr
   15e10:	ldr	r3, [pc, #12]	; 15e24 <__assert_fail@plt+0x4f30>
   15e14:	mov	r1, #0
   15e18:	add	r3, pc, r3
   15e1c:	ldr	r2, [r3]
   15e20:	b	10e34 <__cxa_atexit@plt>
   15e24:	andeq	r1, r1, r0, asr #5

Disassembly of section .fini:

00015e28 <.fini>:
   15e28:	push	{r3, lr}
   15e2c:	pop	{r3, pc}
