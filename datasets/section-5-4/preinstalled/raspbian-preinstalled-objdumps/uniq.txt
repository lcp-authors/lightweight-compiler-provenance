
raspbian-preinstalled/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010e24 <.init>:
   10e24:	push	{r3, lr}
   10e28:	bl	11d28 <__assert_fail@plt+0xc38>
   10e2c:	pop	{r3, pc}

Disassembly of section .plt:

00010e30 <calloc@plt-0x14>:
   10e30:	push	{lr}		; (str lr, [sp, #-4]!)
   10e34:	ldr	lr, [pc, #4]	; 10e40 <calloc@plt-0x4>
   10e38:	add	lr, pc, lr
   10e3c:	ldr	pc, [lr, #8]!
   10e40:	andeq	r7, r1, r0, asr #3

00010e44 <calloc@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e50 <fputs_unlocked@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #440]!	; 0x1b8

00010e5c <raise@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #432]!	; 0x1b0

00010e68 <strcmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #424]!	; 0x1a8

00010e74 <strtol@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e80 <posix_fadvise64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #408]!	; 0x198

00010e8c <fflush@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #400]!	; 0x190

00010e98 <free@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #392]!	; 0x188

00010ea4 <_exit@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #384]!	; 0x180

00010eb0 <memcpy@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #376]!	; 0x178

00010ebc <mbsinit@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #368]!	; 0x170

00010ec8 <fwrite_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #360]!	; 0x168

00010ed4 <memcmp@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #352]!	; 0x160

00010ee0 <dcgettext@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #344]!	; 0x158

00010eec <__stack_chk_fail@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #336]!	; 0x150

00010ef8 <dup2@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #328]!	; 0x148

00010f04 <realloc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #320]!	; 0x140

00010f10 <textdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #312]!	; 0x138

00010f1c <iswprint@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #304]!	; 0x130

00010f28 <fwrite@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #296]!	; 0x128

00010f34 <lseek64@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #288]!	; 0x120

00010f40 <__ctype_get_mb_cur_max@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #280]!	; 0x118

00010f4c <__fpending@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #272]!	; 0x110

00010f58 <mbrtowc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #264]!	; 0x108

00010f64 <error@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #256]!	; 0x100

00010f70 <open64@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #248]!	; 0xf8

00010f7c <strcoll@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #240]!	; 0xf0

00010f88 <getenv@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #232]!	; 0xe8

00010f94 <malloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #224]!	; 0xe0

00010fa0 <__libc_start_main@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #216]!	; 0xd8

00010fac <__freading@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #208]!	; 0xd0

00010fb8 <__ctype_toupper_loc@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #200]!	; 0xc8

00010fc4 <__gmon_start__@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #192]!	; 0xc0

00010fd0 <freopen64@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #184]!	; 0xb8

00010fdc <getopt_long@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #176]!	; 0xb0

00010fe8 <__ctype_b_loc@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #168]!	; 0xa8

00010ff4 <exit@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #160]!	; 0xa0

00011000 <strtoul@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #152]!	; 0x98

0001100c <strlen@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #144]!	; 0x90

00011018 <strchr@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #136]!	; 0x88

00011024 <__errno_location@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #128]!	; 0x80

00011030 <__cxa_atexit@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #120]!	; 0x78

0001103c <memset@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #112]!	; 0x70

00011048 <__printf_chk@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #104]!	; 0x68

00011054 <fileno@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #96]!	; 0x60

00011060 <__fprintf_chk@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #88]!	; 0x58

0001106c <fclose@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #80]!	; 0x50

00011078 <fseeko64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #72]!	; 0x48

00011084 <__uflow@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #64]!	; 0x40

00011090 <__overflow@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #56]!	; 0x38

0001109c <setlocale@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #48]!	; 0x30

000110a8 <strrchr@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #40]!	; 0x28

000110b4 <nl_langinfo@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #32]!

000110c0 <bindtextdomain@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #94208	; 0x17000
   110c8:	ldr	pc, [ip, #24]!

000110cc <strncmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #94208	; 0x17000
   110d4:	ldr	pc, [ip, #16]!

000110d8 <abort@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #94208	; 0x17000
   110e0:	ldr	pc, [ip, #8]!

000110e4 <close@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #94208	; 0x17000
   110ec:	ldr	pc, [ip, #0]!

000110f0 <__assert_fail@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4088]!	; 0xff8

Disassembly of section .text:

000110fc <.text>:
   110fc:	ldr	r3, [pc, #2900]	; 11c58 <__assert_fail@plt+0xb68>
   11100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11104:	sub	sp, sp, #92	; 0x5c
   11108:	ldr	r3, [r3]
   1110c:	mov	r9, r0
   11110:	ldr	r0, [pc, #2884]	; 11c5c <__assert_fail@plt+0xb6c>
   11114:	mov	r8, r1
   11118:	str	r3, [sp, #84]	; 0x54
   1111c:	bl	10f88 <getenv@plt>
   11120:	ldr	r3, [pc, #2872]	; 11c60 <__assert_fail@plt+0xb70>
   11124:	ldr	fp, [pc, #2872]	; 11c64 <__assert_fail@plt+0xb74>
   11128:	str	r3, [sp, #80]	; 0x50
   1112c:	str	r3, [sp, #76]	; 0x4c
   11130:	mov	r3, #10
   11134:	str	r3, [sp, #20]
   11138:	ldr	r6, [pc, #2856]	; 11c68 <__assert_fail@plt+0xb78>
   1113c:	adds	sl, r0, #0
   11140:	ldr	r0, [r8]
   11144:	movne	sl, #1
   11148:	bl	12cb8 <__assert_fail@plt+0x1bc8>
   1114c:	ldr	r1, [pc, #2840]	; 11c6c <__assert_fail@plt+0xb7c>
   11150:	mov	r0, #6
   11154:	bl	1109c <setlocale@plt>
   11158:	ldr	r1, [pc, #2832]	; 11c70 <__assert_fail@plt+0xb80>
   1115c:	ldr	r0, [pc, #2832]	; 11c74 <__assert_fail@plt+0xb84>
   11160:	bl	110c0 <bindtextdomain@plt>
   11164:	ldr	r0, [pc, #2824]	; 11c74 <__assert_fail@plt+0xb84>
   11168:	bl	10f10 <textdomain@plt>
   1116c:	mov	r0, #3
   11170:	bl	12a80 <__assert_fail@plt+0x1990>
   11174:	strb	r0, [fp, #5]
   11178:	ldr	r0, [pc, #2808]	; 11c78 <__assert_fail@plt+0xb88>
   1117c:	bl	1659c <__assert_fail@plt+0x54ac>
   11180:	mov	r3, #0
   11184:	mov	r5, r3
   11188:	str	r3, [sp, #24]
   1118c:	mov	r4, r3
   11190:	str	r3, [sp, #28]
   11194:	mvn	r2, #0
   11198:	str	r3, [fp, #16]
   1119c:	str	r3, [fp, #12]
   111a0:	strb	r3, [fp, #22]
   111a4:	str	r3, [fp, #24]
   111a8:	mov	r3, #1
   111ac:	str	r2, [fp]
   111b0:	strb	r3, [fp, #20]
   111b4:	strb	r3, [fp, #21]
   111b8:	str	r3, [fp, #8]
   111bc:	b	111f0 <__assert_fail@plt+0x100>
   111c0:	ldr	r3, [r6]
   111c4:	cmp	r3, r9
   111c8:	bge	1141c <__assert_fail@plt+0x32c>
   111cc:	cmp	r4, #2
   111d0:	beq	11bdc <__assert_fail@plt+0xaec>
   111d4:	add	r2, sp, #88	; 0x58
   111d8:	ldr	r1, [r8, r3, lsl #2]
   111dc:	add	r2, r2, r4, lsl #2
   111e0:	add	r4, r4, #1
   111e4:	add	r3, r3, #1
   111e8:	str	r1, [r2, #-12]
   111ec:	str	r3, [r6]
   111f0:	cmn	r5, #1
   111f4:	beq	111c0 <__assert_fail@plt+0xd0>
   111f8:	cmp	r4, #0
   111fc:	movne	r7, sl
   11200:	moveq	r7, #0
   11204:	cmp	r7, #0
   11208:	bne	111c0 <__assert_fail@plt+0xd0>
   1120c:	str	r7, [sp]
   11210:	ldr	r3, [pc, #2660]	; 11c7c <__assert_fail@plt+0xb8c>
   11214:	ldr	r2, [pc, #2660]	; 11c80 <__assert_fail@plt+0xb90>
   11218:	mov	r1, r8
   1121c:	mov	r0, r9
   11220:	bl	10fdc <getopt_long@plt>
   11224:	cmn	r0, #1
   11228:	mov	r5, r0
   1122c:	beq	111c0 <__assert_fail@plt+0xd0>
   11230:	cmp	r0, #100	; 0x64
   11234:	beq	117f4 <__assert_fail@plt+0x704>
   11238:	ble	11270 <__assert_fail@plt+0x180>
   1123c:	cmp	r0, #117	; 0x75
   11240:	beq	11864 <__assert_fail@plt+0x774>
   11244:	bgt	112d8 <__assert_fail@plt+0x1e8>
   11248:	cmp	r0, #105	; 0x69
   1124c:	beq	11858 <__assert_fail@plt+0x768>
   11250:	cmp	r0, #115	; 0x73
   11254:	bne	112c8 <__assert_fail@plt+0x1d8>
   11258:	ldr	r3, [pc, #2596]	; 11c84 <__assert_fail@plt+0xb94>
   1125c:	ldr	r1, [pc, #2596]	; 11c88 <__assert_fail@plt+0xb98>
   11260:	ldr	r0, [r3]
   11264:	bl	11e7c <__assert_fail@plt+0xd8c>
   11268:	str	r0, [fp, #16]
   1126c:	b	111f8 <__assert_fail@plt+0x108>
   11270:	cmp	r0, #57	; 0x39
   11274:	bgt	11378 <__assert_fail@plt+0x288>
   11278:	cmp	r0, #48	; 0x30
   1127c:	bge	11824 <__assert_fail@plt+0x734>
   11280:	cmn	r0, #2
   11284:	beq	11c14 <__assert_fail@plt+0xb24>
   11288:	cmp	r0, #1
   1128c:	bne	11338 <__assert_fail@plt+0x248>
   11290:	ldr	r3, [pc, #2540]	; 11c84 <__assert_fail@plt+0xb94>
   11294:	ldr	r3, [r3]
   11298:	ldrb	r3, [r3]
   1129c:	cmp	r3, #43	; 0x2b
   112a0:	beq	1197c <__assert_fail@plt+0x88c>
   112a4:	cmp	r4, #2
   112a8:	beq	11c28 <__assert_fail@plt+0xb38>
   112ac:	ldr	r3, [pc, #2512]	; 11c84 <__assert_fail@plt+0xb94>
   112b0:	ldr	r2, [r3]
   112b4:	add	r3, sp, #88	; 0x58
   112b8:	add	r3, r3, r4, lsl #2
   112bc:	add	r4, r4, #1
   112c0:	str	r2, [r3, #-12]
   112c4:	b	111f8 <__assert_fail@plt+0x108>
   112c8:	cmp	r0, #102	; 0x66
   112cc:	beq	11804 <__assert_fail@plt+0x714>
   112d0:	mov	r0, #1
   112d4:	bl	1206c <__assert_fail@plt+0xf7c>
   112d8:	cmp	r0, #122	; 0x7a
   112dc:	beq	11414 <__assert_fail@plt+0x324>
   112e0:	cmp	r0, #256	; 0x100
   112e4:	bne	113dc <__assert_fail@plt+0x2ec>
   112e8:	ldr	r3, [pc, #2452]	; 11c84 <__assert_fail@plt+0xb94>
   112ec:	ldr	r1, [r3]
   112f0:	cmp	r1, #0
   112f4:	moveq	r3, #3
   112f8:	streq	r3, [fp, #28]
   112fc:	beq	111f8 <__assert_fail@plt+0x108>
   11300:	ldr	r2, [pc, #2436]	; 11c8c <__assert_fail@plt+0xb9c>
   11304:	ldr	r3, [pc, #2436]	; 11c90 <__assert_fail@plt+0xba0>
   11308:	mov	r0, #4
   1130c:	ldr	r2, [r2]
   11310:	str	r0, [sp]
   11314:	str	r2, [sp, #4]
   11318:	ldr	r0, [pc, #2420]	; 11c94 <__assert_fail@plt+0xba4>
   1131c:	add	r2, r3, #16
   11320:	bl	126d4 <__assert_fail@plt+0x15e4>
   11324:	ldr	r3, [pc, #2412]	; 11c98 <__assert_fail@plt+0xba8>
   11328:	add	r0, r3, r0, lsl #2
   1132c:	ldr	r3, [r0, #292]	; 0x124
   11330:	str	r3, [fp, #28]
   11334:	b	111f8 <__assert_fail@plt+0x108>
   11338:	cmn	r0, #3
   1133c:	bne	112d0 <__assert_fail@plt+0x1e0>
   11340:	ldr	r3, [pc, #2388]	; 11c9c <__assert_fail@plt+0xbac>
   11344:	ldr	r0, [pc, #2388]	; 11ca0 <__assert_fail@plt+0xbb0>
   11348:	ldr	r1, [pc, #2388]	; 11ca4 <__assert_fail@plt+0xbb4>
   1134c:	ldr	r2, [pc, #2388]	; 11ca8 <__assert_fail@plt+0xbb8>
   11350:	str	r7, [sp, #8]
   11354:	ldr	r0, [r0]
   11358:	ldr	r3, [r3]
   1135c:	str	r1, [sp, #4]
   11360:	str	r2, [sp]
   11364:	ldr	r1, [pc, #2368]	; 11cac <__assert_fail@plt+0xbbc>
   11368:	ldr	r2, [pc, #2368]	; 11cb0 <__assert_fail@plt+0xbc0>
   1136c:	bl	15388 <__assert_fail@plt+0x4298>
   11370:	mov	r0, r7
   11374:	bl	10ff4 <exit@plt>
   11378:	cmp	r0, #68	; 0x44
   1137c:	bne	113fc <__assert_fail@plt+0x30c>
   11380:	ldr	r3, [pc, #2300]	; 11c84 <__assert_fail@plt+0xb94>
   11384:	strb	r7, [fp, #21]
   11388:	ldr	r1, [r3]
   1138c:	mov	r3, #1
   11390:	cmp	r1, #0
   11394:	strb	r3, [fp, #22]
   11398:	beq	11948 <__assert_fail@plt+0x858>
   1139c:	ldr	r2, [pc, #2280]	; 11c8c <__assert_fail@plt+0xb9c>
   113a0:	ldr	r3, [pc, #2316]	; 11cb4 <__assert_fail@plt+0xbc4>
   113a4:	mov	r0, #4
   113a8:	ldr	r2, [r2]
   113ac:	str	r0, [sp]
   113b0:	str	r2, [sp, #4]
   113b4:	ldr	r0, [pc, #2300]	; 11cb8 <__assert_fail@plt+0xbc8>
   113b8:	add	r2, r3, #12
   113bc:	bl	126d4 <__assert_fail@plt+0x15e4>
   113c0:	mov	r3, #1
   113c4:	str	r3, [sp, #24]
   113c8:	ldr	r3, [pc, #2248]	; 11c98 <__assert_fail@plt+0xba8>
   113cc:	add	r0, r3, r0, lsl #2
   113d0:	ldr	r3, [r0, #264]	; 0x108
   113d4:	str	r3, [fp, #24]
   113d8:	b	111f8 <__assert_fail@plt+0x108>
   113dc:	cmp	r0, #119	; 0x77
   113e0:	bne	112d0 <__assert_fail@plt+0x1e0>
   113e4:	ldr	r3, [pc, #2200]	; 11c84 <__assert_fail@plt+0xb94>
   113e8:	ldr	r1, [pc, #2252]	; 11cbc <__assert_fail@plt+0xbcc>
   113ec:	ldr	r0, [r3]
   113f0:	bl	11e7c <__assert_fail@plt+0xd8c>
   113f4:	str	r0, [fp]
   113f8:	b	111f8 <__assert_fail@plt+0x108>
   113fc:	cmp	r0, #99	; 0x63
   11400:	bne	112d0 <__assert_fail@plt+0x1e0>
   11404:	mov	r3, #1
   11408:	str	r7, [fp, #8]
   1140c:	str	r3, [sp, #24]
   11410:	b	111f8 <__assert_fail@plt+0x108>
   11414:	str	r7, [sp, #20]
   11418:	b	111f8 <__assert_fail@plt+0x108>
   1141c:	ldr	r3, [fp, #28]
   11420:	cmp	r3, #0
   11424:	bne	1161c <__assert_fail@plt+0x52c>
   11428:	ldr	r4, [fp, #8]
   1142c:	cmp	r4, #0
   11430:	bne	11448 <__assert_fail@plt+0x358>
   11434:	ldrb	r3, [fp, #22]
   11438:	cmp	r3, #0
   1143c:	movne	r2, #5
   11440:	ldrne	r1, [pc, #2168]	; 11cc0 <__assert_fail@plt+0xbd0>
   11444:	bne	1163c <__assert_fail@plt+0x54c>
   11448:	ldr	r3, [sp, #76]	; 0x4c
   1144c:	ldr	r1, [pc, #2060]	; 11c60 <__assert_fail@plt+0xb70>
   11450:	mov	r0, r3
   11454:	str	r3, [sp, #44]	; 0x2c
   11458:	bl	10e68 <strcmp@plt>
   1145c:	ldr	r4, [sp, #80]	; 0x50
   11460:	cmp	r0, #0
   11464:	bne	11a60 <__assert_fail@plt+0x970>
   11468:	ldr	r1, [pc, #2032]	; 11c60 <__assert_fail@plt+0xb70>
   1146c:	mov	r0, r4
   11470:	bl	10e68 <strcmp@plt>
   11474:	cmp	r0, #0
   11478:	beq	11498 <__assert_fail@plt+0x3a8>
   1147c:	ldr	r3, [pc, #2076]	; 11ca0 <__assert_fail@plt+0xbb0>
   11480:	ldr	r1, [pc, #2108]	; 11cc4 <__assert_fail@plt+0xbd4>
   11484:	mov	r0, r4
   11488:	ldr	r2, [r3]
   1148c:	bl	12910 <__assert_fail@plt+0x1820>
   11490:	subs	r5, r0, #0
   11494:	beq	11c1c <__assert_fail@plt+0xb2c>
   11498:	ldr	r6, [pc, #2088]	; 11cc8 <__assert_fail@plt+0xbd8>
   1149c:	mov	r1, #2
   114a0:	ldr	r0, [r6]
   114a4:	bl	12884 <__assert_fail@plt+0x1794>
   114a8:	add	r0, sp, #52	; 0x34
   114ac:	bl	12acc <__assert_fail@plt+0x19dc>
   114b0:	add	r0, sp, #64	; 0x40
   114b4:	bl	12acc <__assert_fail@plt+0x19dc>
   114b8:	ldrb	r3, [fp, #21]
   114bc:	cmp	r3, #0
   114c0:	beq	114d0 <__assert_fail@plt+0x3e0>
   114c4:	ldrb	r8, [fp, #20]
   114c8:	cmp	r8, #0
   114cc:	bne	11874 <__assert_fail@plt+0x784>
   114d0:	ldr	r2, [sp, #20]
   114d4:	ldr	r1, [r6]
   114d8:	add	r0, sp, #64	; 0x40
   114dc:	bl	12ae0 <__assert_fail@plt+0x19f0>
   114e0:	cmp	r0, #0
   114e4:	beq	11758 <__assert_fail@plt+0x668>
   114e8:	ldr	r9, [sp, #68]	; 0x44
   114ec:	ldr	r4, [sp, #72]	; 0x48
   114f0:	mov	r0, r9
   114f4:	mov	r1, r4
   114f8:	bl	11f68 <__assert_fail@plt+0xe78>
   114fc:	sub	r9, r9, #1
   11500:	add	r3, sp, #64	; 0x40
   11504:	str	r3, [sp, #24]
   11508:	add	r5, sp, #52	; 0x34
   1150c:	mov	r8, #0
   11510:	sub	r4, r0, r4
   11514:	sub	r3, r9, r4
   11518:	mov	r9, #0
   1151c:	str	r3, [sp, #28]
   11520:	mov	r3, #1
   11524:	str	r0, [sp, #32]
   11528:	str	r3, [sp, #40]	; 0x28
   1152c:	ldr	r1, [r6]
   11530:	ldr	r3, [r1]
   11534:	ands	r3, r3, #16
   11538:	str	r3, [sp, #36]	; 0x24
   1153c:	bne	11724 <__assert_fail@plt+0x634>
   11540:	ldr	r2, [sp, #20]
   11544:	mov	r0, r5
   11548:	bl	12ae0 <__assert_fail@plt+0x19f0>
   1154c:	cmp	r0, #0
   11550:	beq	11714 <__assert_fail@plt+0x624>
   11554:	ldmib	r5, {r4, sl}
   11558:	mov	r1, sl
   1155c:	mov	r0, r4
   11560:	bl	11f68 <__assert_fail@plt+0xe78>
   11564:	sub	r4, r4, #1
   11568:	ldr	r3, [sp, #28]
   1156c:	ldr	r1, [sp, #32]
   11570:	sub	sl, r0, sl
   11574:	sub	r4, r4, sl
   11578:	mov	r2, r4
   1157c:	mov	r7, r0
   11580:	bl	11ddc <__assert_fail@plt+0xcec>
   11584:	mvn	r1, #0
   11588:	ldr	r2, [fp, #24]
   1158c:	eor	r3, r0, #1
   11590:	mov	sl, r0
   11594:	uxtb	r3, r3
   11598:	adds	r8, r8, r3
   1159c:	adc	r9, r9, #0
   115a0:	mvn	r0, #0
   115a4:	cmp	r9, r1
   115a8:	cmpeq	r8, r0
   115ac:	beq	11658 <__assert_fail@plt+0x568>
   115b0:	cmp	r2, #0
   115b4:	beq	116b0 <__assert_fail@plt+0x5c0>
   115b8:	cmp	sl, #0
   115bc:	beq	117a4 <__assert_fail@plt+0x6b4>
   115c0:	orrs	r2, r8, r9
   115c4:	ldr	r2, [sp, #24]
   115c8:	add	ip, r2, #4
   115cc:	add	r2, r2, #8
   115d0:	mov	r0, ip
   115d4:	mov	r1, r2
   115d8:	bne	11ae8 <__assert_fail@plt+0x9f8>
   115dc:	ldrb	r3, [fp, #21]
   115e0:	cmp	r3, #0
   115e4:	movne	r8, #0
   115e8:	movne	r9, #0
   115ec:	beq	11690 <__assert_fail@plt+0x5a0>
   115f0:	mov	r2, r8
   115f4:	mov	r3, r9
   115f8:	bl	11f0c <__assert_fail@plt+0xe1c>
   115fc:	cmp	sl, #0
   11600:	bne	11690 <__assert_fail@plt+0x5a0>
   11604:	mov	r3, r5
   11608:	str	r4, [sp, #28]
   1160c:	ldr	r5, [sp, #24]
   11610:	str	r7, [sp, #32]
   11614:	str	r3, [sp, #24]
   11618:	b	1152c <__assert_fail@plt+0x43c>
   1161c:	ldr	r3, [sp, #24]
   11620:	cmp	r3, #0
   11624:	bne	11c48 <__assert_fail@plt+0xb58>
   11628:	ldr	r3, [fp, #8]
   1162c:	cmp	r3, #1
   11630:	movne	r2, #5
   11634:	ldrne	r1, [pc, #1680]	; 11ccc <__assert_fail@plt+0xbdc>
   11638:	beq	11448 <__assert_fail@plt+0x358>
   1163c:	mov	r0, #0
   11640:	bl	10ee0 <dcgettext@plt>
   11644:	mov	r1, #0
   11648:	mov	r2, r0
   1164c:	mov	r0, r1
   11650:	bl	10f64 <error@plt>
   11654:	b	112d0 <__assert_fail@plt+0x1e0>
   11658:	cmp	r2, #0
   1165c:	beq	116e8 <__assert_fail@plt+0x5f8>
   11660:	cmp	sl, #0
   11664:	beq	117dc <__assert_fail@plt+0x6ec>
   11668:	ldr	r3, [sp, #36]	; 0x24
   1166c:	mvn	r8, #1
   11670:	str	r3, [sp, #40]	; 0x28
   11674:	ldr	r3, [sp, #24]
   11678:	mvn	r9, #0
   1167c:	add	r0, r3, #4
   11680:	add	r1, r3, #8
   11684:	ldrb	r3, [fp, #20]
   11688:	cmp	r3, #0
   1168c:	bne	115f0 <__assert_fail@plt+0x500>
   11690:	mov	r3, r5
   11694:	str	r4, [sp, #28]
   11698:	ldr	r5, [sp, #24]
   1169c:	str	r7, [sp, #32]
   116a0:	str	r3, [sp, #24]
   116a4:	mov	r8, #0
   116a8:	mov	r9, #0
   116ac:	b	1152c <__assert_fail@plt+0x43c>
   116b0:	cmp	sl, #0
   116b4:	bne	11aa8 <__assert_fail@plt+0x9b8>
   116b8:	ldrb	r2, [fp, #22]
   116bc:	cmp	r2, #0
   116c0:	beq	1152c <__assert_fail@plt+0x43c>
   116c4:	orrs	r2, r8, r9
   116c8:	ldr	r2, [sp, #24]
   116cc:	add	r0, r2, #4
   116d0:	add	r1, r2, #8
   116d4:	bne	11bd0 <__assert_fail@plt+0xae0>
   116d8:	ldrb	r3, [fp, #21]
   116dc:	cmp	r3, #0
   116e0:	bne	115f0 <__assert_fail@plt+0x500>
   116e4:	b	11604 <__assert_fail@plt+0x514>
   116e8:	cmp	sl, #0
   116ec:	bne	11b04 <__assert_fail@plt+0xa14>
   116f0:	ldrb	r3, [fp, #22]
   116f4:	cmp	r3, #0
   116f8:	beq	117e8 <__assert_fail@plt+0x6f8>
   116fc:	ldr	r3, [sp, #24]
   11700:	mvn	r8, #1
   11704:	add	r0, r3, #4
   11708:	add	r1, r3, #8
   1170c:	mvn	r9, #0
   11710:	b	115f0 <__assert_fail@plt+0x500>
   11714:	ldr	r3, [r6]
   11718:	ldr	r3, [r3]
   1171c:	tst	r3, #32
   11720:	bne	119c4 <__assert_fail@plt+0x8d4>
   11724:	orrs	r3, r8, r9
   11728:	ldrbeq	r3, [fp, #21]
   1172c:	eoreq	r3, r3, #1
   11730:	ldrbne	r3, [fp, #20]
   11734:	eorne	r3, r3, #1
   11738:	cmp	r3, #0
   1173c:	bne	11758 <__assert_fail@plt+0x668>
   11740:	ldr	r0, [sp, #24]
   11744:	mov	r2, r8
   11748:	add	r1, r0, #8
   1174c:	mov	r3, r9
   11750:	add	r0, r0, #4
   11754:	bl	11f0c <__assert_fail@plt+0xe1c>
   11758:	ldr	r0, [r6]
   1175c:	ldr	r3, [r0]
   11760:	tst	r3, #32
   11764:	bne	119c4 <__assert_fail@plt+0x8d4>
   11768:	bl	15ee8 <__assert_fail@plt+0x4df8>
   1176c:	subs	r4, r0, #0
   11770:	bne	119c4 <__assert_fail@plt+0x8d4>
   11774:	ldr	r0, [sp, #60]	; 0x3c
   11778:	bl	10e98 <free@plt>
   1177c:	ldr	r0, [sp, #72]	; 0x48
   11780:	bl	10e98 <free@plt>
   11784:	ldr	r3, [pc, #1228]	; 11c58 <__assert_fail@plt+0xb68>
   11788:	ldr	r2, [sp, #84]	; 0x54
   1178c:	mov	r0, r4
   11790:	ldr	r3, [r3]
   11794:	cmp	r2, r3
   11798:	bne	11c54 <__assert_fail@plt+0xb64>
   1179c:	add	sp, sp, #92	; 0x5c
   117a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117a4:	cmp	r9, #0
   117a8:	cmpeq	r8, #1
   117ac:	bne	116b8 <__assert_fail@plt+0x5c8>
   117b0:	cmp	r2, #1
   117b4:	beq	11a04 <__assert_fail@plt+0x914>
   117b8:	cmp	r2, #2
   117bc:	beq	119f8 <__assert_fail@plt+0x908>
   117c0:	ldrb	r3, [fp, #22]
   117c4:	cmp	r3, #0
   117c8:	beq	1152c <__assert_fail@plt+0x43c>
   117cc:	ldr	r3, [sp, #24]
   117d0:	add	r0, r3, #4
   117d4:	add	r1, r3, #8
   117d8:	b	115f0 <__assert_fail@plt+0x500>
   117dc:	ldrb	r3, [fp, #22]
   117e0:	cmp	r3, #0
   117e4:	bne	11958 <__assert_fail@plt+0x868>
   117e8:	mvn	r8, #1
   117ec:	mvn	r9, #0
   117f0:	b	1152c <__assert_fail@plt+0x43c>
   117f4:	mov	r3, #1
   117f8:	strb	r7, [fp, #21]
   117fc:	str	r3, [sp, #24]
   11800:	b	111f8 <__assert_fail@plt+0x108>
   11804:	ldr	r3, [pc, #1144]	; 11c84 <__assert_fail@plt+0xb94>
   11808:	ldr	r1, [pc, #1216]	; 11cd0 <__assert_fail@plt+0xbe0>
   1180c:	ldr	r0, [r3]
   11810:	bl	11e7c <__assert_fail@plt+0xd8c>
   11814:	mov	r3, #2
   11818:	str	r3, [sp, #28]
   1181c:	str	r0, [fp, #12]
   11820:	b	111f8 <__assert_fail@plt+0x108>
   11824:	ldr	r3, [sp, #28]
   11828:	cmp	r3, #2
   1182c:	subeq	r2, r0, #48	; 0x30
   11830:	beq	11a50 <__assert_fail@plt+0x960>
   11834:	ldr	r3, [fp, #12]
   11838:	ldr	r2, [pc, #1172]	; 11cd4 <__assert_fail@plt+0xbe4>
   1183c:	cmp	r3, r2
   11840:	bls	11a3c <__assert_fail@plt+0x94c>
   11844:	mvn	r3, #0
   11848:	str	r3, [fp, #12]
   1184c:	mov	r3, #1
   11850:	str	r3, [sp, #28]
   11854:	b	111f0 <__assert_fail@plt+0x100>
   11858:	mov	r3, #1
   1185c:	strb	r3, [fp, #4]
   11860:	b	111f8 <__assert_fail@plt+0x108>
   11864:	mov	r3, #1
   11868:	strb	r7, [fp, #20]
   1186c:	str	r3, [sp, #24]
   11870:	b	111f8 <__assert_fail@plt+0x108>
   11874:	ldr	r3, [fp, #8]
   11878:	cmp	r3, #1
   1187c:	bne	114d0 <__assert_fail@plt+0x3e0>
   11880:	add	sl, sp, #64	; 0x40
   11884:	add	r4, sp, #52	; 0x34
   11888:	mov	r3, #0
   1188c:	str	r3, [sp, #24]
   11890:	ldr	r1, [r6]
   11894:	ldr	r3, [r1]
   11898:	tst	r3, #16
   1189c:	bne	11b50 <__assert_fail@plt+0xa60>
   118a0:	ldr	r2, [sp, #20]
   118a4:	mov	r0, r4
   118a8:	bl	12ae0 <__assert_fail@plt+0x19f0>
   118ac:	cmp	r0, #0
   118b0:	beq	11b50 <__assert_fail@plt+0xa60>
   118b4:	ldr	r9, [r4, #4]
   118b8:	ldr	r5, [r4, #8]
   118bc:	mov	r0, r9
   118c0:	mov	r1, r5
   118c4:	bl	11f68 <__assert_fail@plt+0xe78>
   118c8:	ldr	r2, [sl, #4]
   118cc:	sub	r3, r9, #1
   118d0:	cmp	r2, #0
   118d4:	sub	r5, r0, r5
   118d8:	mov	r7, r0
   118dc:	sub	r5, r3, r5
   118e0:	bne	11ac0 <__assert_fail@plt+0x9d0>
   118e4:	ldr	r3, [fp, #28]
   118e8:	cmp	r3, #0
   118ec:	beq	11914 <__assert_fail@plt+0x824>
   118f0:	cmp	r3, #4
   118f4:	cmpne	r3, #1
   118f8:	beq	11b1c <__assert_fail@plt+0xa2c>
   118fc:	ldr	r2, [sp, #24]
   11900:	cmp	r2, #0
   11904:	beq	11914 <__assert_fail@plt+0x824>
   11908:	sub	r3, r3, #2
   1190c:	cmp	r3, #1
   11910:	bls	11b1c <__assert_fail@plt+0xa2c>
   11914:	ldr	r3, [pc, #900]	; 11ca0 <__assert_fail@plt+0xbb0>
   11918:	ldr	r2, [r4, #4]
   1191c:	ldr	r0, [r4, #8]
   11920:	ldr	r3, [r3]
   11924:	mov	r1, #1
   11928:	bl	10ec8 <fwrite_unlocked@plt>
   1192c:	mov	r3, r4
   11930:	str	r5, [sp, #36]	; 0x24
   11934:	mov	r4, sl
   11938:	str	r7, [sp, #32]
   1193c:	str	r8, [sp, #24]
   11940:	mov	sl, r3
   11944:	b	11890 <__assert_fail@plt+0x7a0>
   11948:	mov	r3, #1
   1194c:	str	r1, [fp, #24]
   11950:	str	r3, [sp, #24]
   11954:	b	111f8 <__assert_fail@plt+0x108>
   11958:	ldr	r3, [sp, #24]
   1195c:	mvn	r8, #1
   11960:	add	r0, r3, #4
   11964:	add	r1, r3, #8
   11968:	mvn	r9, #0
   1196c:	ldrb	r3, [fp, #22]
   11970:	cmp	r3, #0
   11974:	beq	11604 <__assert_fail@plt+0x514>
   11978:	b	115f0 <__assert_fail@plt+0x500>
   1197c:	bl	12c38 <__assert_fail@plt+0x1b48>
   11980:	sub	r0, r0, #199680	; 0x30c00
   11984:	sub	r0, r0, #432	; 0x1b0
   11988:	cmp	r0, #696	; 0x2b8
   1198c:	bls	112a4 <__assert_fail@plt+0x1b4>
   11990:	ldr	r0, [pc, #748]	; 11c84 <__assert_fail@plt+0xb94>
   11994:	ldr	r2, [pc, #720]	; 11c6c <__assert_fail@plt+0xb7c>
   11998:	add	r3, sp, #64	; 0x40
   1199c:	str	r2, [sp]
   119a0:	mov	r1, #0
   119a4:	mov	r2, #10
   119a8:	ldr	r0, [r0]
   119ac:	bl	1589c <__assert_fail@plt+0x47ac>
   119b0:	cmp	r0, #0
   119b4:	ldreq	r3, [sp, #64]	; 0x40
   119b8:	streq	r3, [fp, #16]
   119bc:	beq	111f8 <__assert_fail@plt+0x108>
   119c0:	b	112a4 <__assert_fail@plt+0x1b4>
   119c4:	mov	r2, #5
   119c8:	ldr	r1, [pc, #776]	; 11cd8 <__assert_fail@plt+0xbe8>
   119cc:	mov	r0, #0
   119d0:	bl	10ee0 <dcgettext@plt>
   119d4:	ldr	r1, [sp, #44]	; 0x2c
   119d8:	mov	r4, r0
   119dc:	mov	r0, #4
   119e0:	bl	14c74 <__assert_fail@plt+0x3b84>
   119e4:	mov	r2, r4
   119e8:	mov	r1, #0
   119ec:	mov	r3, r0
   119f0:	mov	r0, #1
   119f4:	bl	10f64 <error@plt>
   119f8:	ldr	r3, [sp, #40]	; 0x28
   119fc:	cmp	r3, #0
   11a00:	bne	11ba4 <__assert_fail@plt+0xab4>
   11a04:	ldr	r3, [pc, #660]	; 11ca0 <__assert_fail@plt+0xbb0>
   11a08:	ldr	r0, [r3]
   11a0c:	ldr	r3, [r0, #20]
   11a10:	ldr	r2, [r0, #24]
   11a14:	cmp	r3, r2
   11a18:	bcs	11bc4 <__assert_fail@plt+0xad4>
   11a1c:	ldrb	r2, [fp, #22]
   11a20:	add	r1, r3, #1
   11a24:	str	r1, [r0, #20]
   11a28:	cmp	r2, #0
   11a2c:	ldr	r2, [sp, #20]
   11a30:	strb	r2, [r3]
   11a34:	beq	1152c <__assert_fail@plt+0x43c>
   11a38:	b	117cc <__assert_fail@plt+0x6dc>
   11a3c:	mov	r2, #10
   11a40:	sub	r1, r0, #48	; 0x30
   11a44:	mla	r2, r2, r3, r1
   11a48:	cmp	r3, r2
   11a4c:	bhi	11844 <__assert_fail@plt+0x754>
   11a50:	mov	r3, #1
   11a54:	str	r2, [fp, #12]
   11a58:	str	r3, [sp, #28]
   11a5c:	b	111f0 <__assert_fail@plt+0x100>
   11a60:	ldr	r3, [pc, #608]	; 11cc8 <__assert_fail@plt+0xbd8>
   11a64:	ldr	r1, [pc, #624]	; 11cdc <__assert_fail@plt+0xbec>
   11a68:	ldr	r0, [sp, #44]	; 0x2c
   11a6c:	ldr	r2, [r3]
   11a70:	bl	12910 <__assert_fail@plt+0x1820>
   11a74:	subs	r5, r0, #0
   11a78:	bne	11468 <__assert_fail@plt+0x378>
   11a7c:	bl	11024 <__errno_location@plt>
   11a80:	ldr	r2, [sp, #44]	; 0x2c
   11a84:	ldr	r4, [r0]
   11a88:	mov	r1, #3
   11a8c:	mov	r0, r5
   11a90:	bl	14d50 <__assert_fail@plt+0x3c60>
   11a94:	mov	r1, r4
   11a98:	ldr	r2, [pc, #576]	; 11ce0 <__assert_fail@plt+0xbf0>
   11a9c:	mov	r3, r0
   11aa0:	mov	r0, #1
   11aa4:	bl	10f64 <error@plt>
   11aa8:	orrs	r3, r8, r9
   11aac:	ldr	r3, [sp, #24]
   11ab0:	add	r0, r3, #4
   11ab4:	add	r1, r3, #8
   11ab8:	beq	115dc <__assert_fail@plt+0x4ec>
   11abc:	b	11684 <__assert_fail@plt+0x594>
   11ac0:	ldr	r3, [sp, #36]	; 0x24
   11ac4:	mov	r2, r5
   11ac8:	ldr	r1, [sp, #32]
   11acc:	bl	11ddc <__assert_fail@plt+0xcec>
   11ad0:	cmp	r0, #0
   11ad4:	bne	118e4 <__assert_fail@plt+0x7f4>
   11ad8:	ldr	r3, [fp, #28]
   11adc:	cmp	r3, #0
   11ae0:	bne	11914 <__assert_fail@plt+0x824>
   11ae4:	b	11890 <__assert_fail@plt+0x7a0>
   11ae8:	ldr	r1, [sp, #36]	; 0x24
   11aec:	str	r1, [sp, #40]	; 0x28
   11af0:	cmp	r3, #0
   11af4:	mov	r0, ip
   11af8:	mov	r1, r2
   11afc:	beq	11684 <__assert_fail@plt+0x594>
   11b00:	b	1196c <__assert_fail@plt+0x87c>
   11b04:	ldr	r2, [sp, #24]
   11b08:	mvn	r8, #1
   11b0c:	add	ip, r2, #4
   11b10:	mvn	r9, #0
   11b14:	add	r2, r2, #8
   11b18:	b	11af0 <__assert_fail@plt+0xa00>
   11b1c:	ldr	r3, [pc, #380]	; 11ca0 <__assert_fail@plt+0xbb0>
   11b20:	ldr	r0, [r3]
   11b24:	ldr	r2, [r0, #24]
   11b28:	ldr	r3, [r0, #20]
   11b2c:	cmp	r3, r2
   11b30:	addcc	r2, r3, #1
   11b34:	strcc	r2, [r0, #20]
   11b38:	ldrcc	r2, [sp, #20]
   11b3c:	strbcc	r2, [r3]
   11b40:	bcc	11914 <__assert_fail@plt+0x824>
   11b44:	ldr	r1, [sp, #20]
   11b48:	bl	11090 <__overflow@plt>
   11b4c:	b	11914 <__assert_fail@plt+0x824>
   11b50:	ldr	r3, [fp, #28]
   11b54:	sub	r3, r3, #2
   11b58:	bics	r3, r3, #2
   11b5c:	ldr	r3, [sp, #24]
   11b60:	movne	r9, #0
   11b64:	andeq	r9, r3, #1
   11b68:	cmp	r9, #0
   11b6c:	beq	11758 <__assert_fail@plt+0x668>
   11b70:	ldr	r3, [pc, #296]	; 11ca0 <__assert_fail@plt+0xbb0>
   11b74:	ldr	r0, [r3]
   11b78:	ldr	r2, [r0, #24]
   11b7c:	ldr	r3, [r0, #20]
   11b80:	cmp	r3, r2
   11b84:	addcc	r2, r3, #1
   11b88:	strcc	r2, [r0, #20]
   11b8c:	ldrcc	r2, [sp, #20]
   11b90:	strbcc	r2, [r3]
   11b94:	bcc	11758 <__assert_fail@plt+0x668>
   11b98:	ldr	r1, [sp, #20]
   11b9c:	bl	11090 <__overflow@plt>
   11ba0:	b	11758 <__assert_fail@plt+0x668>
   11ba4:	ldrb	r3, [fp, #22]
   11ba8:	cmp	r3, #0
   11bac:	beq	1152c <__assert_fail@plt+0x43c>
   11bb0:	str	r3, [sp, #40]	; 0x28
   11bb4:	ldr	r3, [sp, #24]
   11bb8:	add	r0, r3, #4
   11bbc:	add	r1, r3, #8
   11bc0:	b	115f0 <__assert_fail@plt+0x500>
   11bc4:	ldr	r1, [sp, #20]
   11bc8:	bl	11090 <__overflow@plt>
   11bcc:	b	117c0 <__assert_fail@plt+0x6d0>
   11bd0:	cmp	r3, #0
   11bd4:	beq	11684 <__assert_fail@plt+0x594>
   11bd8:	b	115f0 <__assert_fail@plt+0x500>
   11bdc:	mov	r2, #5
   11be0:	ldr	r1, [pc, #252]	; 11ce4 <__assert_fail@plt+0xbf4>
   11be4:	mov	r0, #0
   11be8:	bl	10ee0 <dcgettext@plt>
   11bec:	ldr	r3, [r6]
   11bf0:	mov	r4, r0
   11bf4:	ldr	r0, [r8, r3, lsl #2]
   11bf8:	bl	14f1c <__assert_fail@plt+0x3e2c>
   11bfc:	mov	r1, #0
   11c00:	mov	r2, r4
   11c04:	mov	r3, r0
   11c08:	mov	r0, r1
   11c0c:	bl	10f64 <error@plt>
   11c10:	b	112d0 <__assert_fail@plt+0x1e0>
   11c14:	mov	r0, r7
   11c18:	bl	1206c <__assert_fail@plt+0xf7c>
   11c1c:	bl	11024 <__errno_location@plt>
   11c20:	mov	r2, r4
   11c24:	b	11a84 <__assert_fail@plt+0x994>
   11c28:	mov	r2, #5
   11c2c:	ldr	r1, [pc, #176]	; 11ce4 <__assert_fail@plt+0xbf4>
   11c30:	mov	r0, #0
   11c34:	bl	10ee0 <dcgettext@plt>
   11c38:	ldr	r3, [pc, #68]	; 11c84 <__assert_fail@plt+0xb94>
   11c3c:	mov	r4, r0
   11c40:	ldr	r0, [r3]
   11c44:	b	11bf8 <__assert_fail@plt+0xb08>
   11c48:	mov	r2, #5
   11c4c:	ldr	r1, [pc, #148]	; 11ce8 <__assert_fail@plt+0xbf8>
   11c50:	b	1163c <__assert_fail@plt+0x54c>
   11c54:	bl	10eec <__stack_chk_fail@plt>
   11c58:	andeq	r7, r2, r8, lsl #30
   11c5c:	muleq	r1, r8, lr
   11c60:	andeq	r6, r1, r8, lsr #29
   11c64:	andeq	r8, r2, r8, ror r1
   11c68:	andeq	r8, r2, r8, asr r1
   11c6c:	andeq	r6, r1, ip, lsl r8
   11c70:	andeq	r6, r1, ip, lsr #29
   11c74:	andeq	r6, r1, ip, ror #27
   11c78:	andeq	r2, r1, r8, lsr #15
   11c7c:	strdeq	r6, [r1], -r8
   11c80:	andeq	r6, r1, r0, asr #29
   11c84:	andeq	r8, r2, r0, ror r1
   11c88:	andeq	r6, r1, r8, lsr #30
   11c8c:	andeq	r8, r2, r4, lsl #2
   11c90:	andeq	r6, r1, r4, ror #13
   11c94:	strdeq	r6, [r1], -ip
   11c98:	andeq	r6, r1, r0, asr #11
   11c9c:	andeq	r8, r2, r0, lsl #2
   11ca0:	andeq	r8, r2, ip, ror #2
   11ca4:	andeq	r6, r1, ip, ror #30
   11ca8:	andeq	r6, r1, ip, ror pc
   11cac:	andeq	r6, r1, r8, lsl r7
   11cb0:	andeq	r6, r1, r8, ror #27
   11cb4:	andeq	r6, r1, r8, asr #13
   11cb8:	andeq	r6, r1, ip, ror #29
   11cbc:	andeq	r6, r1, r8, asr #30
   11cc0:	strdeq	r6, [r1], -r4
   11cc4:	andeq	r7, r1, r8, lsr r0
   11cc8:	andeq	r8, r2, r8, ror #2
   11ccc:	andeq	r6, r1, r0, asr #31
   11cd0:	andeq	r6, r1, r4, lsl #30
   11cd4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11cd8:	andeq	r7, r1, ip, lsr r0
   11cdc:	andeq	r7, r1, r4, lsr r0
   11ce0:	andeq	r6, r1, ip, lsl #14
   11ce4:	ldrdeq	r6, [r1], -r8
   11ce8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11cec:	mov	fp, #0
   11cf0:	mov	lr, #0
   11cf4:	pop	{r1}		; (ldr r1, [sp], #4)
   11cf8:	mov	r2, sp
   11cfc:	push	{r2}		; (str r2, [sp, #-4]!)
   11d00:	push	{r0}		; (str r0, [sp, #-4]!)
   11d04:	ldr	ip, [pc, #16]	; 11d1c <__assert_fail@plt+0xc2c>
   11d08:	push	{ip}		; (str ip, [sp, #-4]!)
   11d0c:	ldr	r0, [pc, #12]	; 11d20 <__assert_fail@plt+0xc30>
   11d10:	ldr	r3, [pc, #12]	; 11d24 <__assert_fail@plt+0xc34>
   11d14:	bl	10fa0 <__libc_start_main@plt>
   11d18:	bl	110d8 <abort@plt>
   11d1c:	muleq	r1, r8, r5
   11d20:	strdeq	r1, [r1], -ip
   11d24:	andeq	r6, r1, r8, lsr r5
   11d28:	ldr	r3, [pc, #20]	; 11d44 <__assert_fail@plt+0xc54>
   11d2c:	ldr	r2, [pc, #20]	; 11d48 <__assert_fail@plt+0xc58>
   11d30:	add	r3, pc, r3
   11d34:	ldr	r2, [r3, r2]
   11d38:	cmp	r2, #0
   11d3c:	bxeq	lr
   11d40:	b	10fc4 <__gmon_start__@plt>
   11d44:	andeq	r6, r1, r8, asr #5
   11d48:	strdeq	r0, [r0], -r4
   11d4c:	ldr	r0, [pc, #24]	; 11d6c <__assert_fail@plt+0xc7c>
   11d50:	ldr	r3, [pc, #24]	; 11d70 <__assert_fail@plt+0xc80>
   11d54:	cmp	r3, r0
   11d58:	bxeq	lr
   11d5c:	ldr	r3, [pc, #16]	; 11d74 <__assert_fail@plt+0xc84>
   11d60:	cmp	r3, #0
   11d64:	bxeq	lr
   11d68:	bx	r3
   11d6c:	andeq	r8, r2, ip, asr #2
   11d70:	andeq	r8, r2, ip, asr #2
   11d74:	andeq	r0, r0, r0
   11d78:	ldr	r0, [pc, #36]	; 11da4 <__assert_fail@plt+0xcb4>
   11d7c:	ldr	r1, [pc, #36]	; 11da8 <__assert_fail@plt+0xcb8>
   11d80:	sub	r1, r1, r0
   11d84:	asr	r1, r1, #2
   11d88:	add	r1, r1, r1, lsr #31
   11d8c:	asrs	r1, r1, #1
   11d90:	bxeq	lr
   11d94:	ldr	r3, [pc, #16]	; 11dac <__assert_fail@plt+0xcbc>
   11d98:	cmp	r3, #0
   11d9c:	bxeq	lr
   11da0:	bx	r3
   11da4:	andeq	r8, r2, ip, asr #2
   11da8:	andeq	r8, r2, ip, asr #2
   11dac:	andeq	r0, r0, r0
   11db0:	push	{r4, lr}
   11db4:	ldr	r4, [pc, #24]	; 11dd4 <__assert_fail@plt+0xce4>
   11db8:	ldrb	r3, [r4]
   11dbc:	cmp	r3, #0
   11dc0:	popne	{r4, pc}
   11dc4:	bl	11d4c <__assert_fail@plt+0xc5c>
   11dc8:	mov	r3, #1
   11dcc:	strb	r3, [r4]
   11dd0:	pop	{r4, pc}
   11dd4:	andeq	r8, r2, r4, ror r1
   11dd8:	b	11d78 <__assert_fail@plt+0xc88>
   11ddc:	push	{r4, r5, r6, lr}
   11de0:	ldr	r4, [pc, #144]	; 11e78 <__assert_fail@plt+0xd88>
   11de4:	ldr	ip, [r4]
   11de8:	ldrb	lr, [r4, #4]
   11dec:	cmp	ip, r2
   11df0:	movcc	r5, ip
   11df4:	movcs	r5, r2
   11df8:	cmp	ip, r3
   11dfc:	movcc	r3, ip
   11e00:	cmp	lr, #0
   11e04:	bne	11e58 <__assert_fail@plt+0xd68>
   11e08:	ldrb	r2, [r4, #5]
   11e0c:	cmp	r2, #0
   11e10:	bne	11e38 <__assert_fail@plt+0xd48>
   11e14:	cmp	r5, r3
   11e18:	movne	lr, #1
   11e1c:	bne	11e50 <__assert_fail@plt+0xd60>
   11e20:	mov	r2, r5
   11e24:	bl	10ed4 <memcmp@plt>
   11e28:	adds	lr, r0, #0
   11e2c:	movne	lr, #1
   11e30:	mov	r0, lr
   11e34:	pop	{r4, r5, r6, pc}
   11e38:	mov	r2, r1
   11e3c:	mov	r6, r1
   11e40:	mov	r1, r5
   11e44:	bl	157e0 <__assert_fail@plt+0x46f0>
   11e48:	adds	lr, r0, #0
   11e4c:	movne	lr, #1
   11e50:	mov	r0, lr
   11e54:	pop	{r4, r5, r6, pc}
   11e58:	cmp	r5, r3
   11e5c:	bne	11e50 <__assert_fail@plt+0xd60>
   11e60:	mov	r2, r5
   11e64:	bl	12be4 <__assert_fail@plt+0x1af4>
   11e68:	adds	lr, r0, #0
   11e6c:	movne	lr, #1
   11e70:	mov	r0, lr
   11e74:	pop	{r4, r5, r6, pc}
   11e78:	andeq	r8, r2, r8, ror r1
   11e7c:	push	{r4, r5, r6, lr}
   11e80:	sub	sp, sp, #16
   11e84:	ldr	r4, [pc, #116]	; 11f00 <__assert_fail@plt+0xe10>
   11e88:	ldr	r3, [pc, #116]	; 11f04 <__assert_fail@plt+0xe14>
   11e8c:	mov	r6, r1
   11e90:	ldr	ip, [r4]
   11e94:	str	r3, [sp]
   11e98:	mov	r2, #10
   11e9c:	add	r3, sp, #8
   11ea0:	mov	r1, #0
   11ea4:	str	ip, [sp, #12]
   11ea8:	mov	r5, r0
   11eac:	bl	1589c <__assert_fail@plt+0x47ac>
   11eb0:	cmp	r0, #1
   11eb4:	bhi	11ed4 <__assert_fail@plt+0xde4>
   11eb8:	ldr	r2, [sp, #12]
   11ebc:	ldr	r3, [r4]
   11ec0:	ldr	r0, [sp, #8]
   11ec4:	cmp	r2, r3
   11ec8:	bne	11efc <__assert_fail@plt+0xe0c>
   11ecc:	add	sp, sp, #16
   11ed0:	pop	{r4, r5, r6, pc}
   11ed4:	mov	r1, r6
   11ed8:	mov	r2, #5
   11edc:	mov	r0, #0
   11ee0:	bl	10ee0 <dcgettext@plt>
   11ee4:	mov	r3, r5
   11ee8:	ldr	r2, [pc, #24]	; 11f08 <__assert_fail@plt+0xe18>
   11eec:	mov	r1, #0
   11ef0:	str	r0, [sp]
   11ef4:	mov	r0, #1
   11ef8:	bl	10f64 <error@plt>
   11efc:	bl	10eec <__stack_chk_fail@plt>
   11f00:	andeq	r7, r2, r8, lsl #30
   11f04:	andeq	r6, r1, ip, lsl r8
   11f08:	andeq	r6, r1, r8, lsl #14
   11f0c:	ldr	ip, [pc, #72]	; 11f5c <__assert_fail@plt+0xe6c>
   11f10:	push	{r4, r5, r6, lr}
   11f14:	mov	r4, r1
   11f18:	ldr	r1, [ip, #8]
   11f1c:	mov	r5, r0
   11f20:	cmp	r1, #0
   11f24:	beq	11f44 <__assert_fail@plt+0xe54>
   11f28:	ldr	r3, [pc, #48]	; 11f60 <__assert_fail@plt+0xe70>
   11f2c:	ldr	r2, [r5]
   11f30:	ldr	r0, [r4]
   11f34:	ldr	r3, [r3]
   11f38:	mov	r1, #1
   11f3c:	pop	{r4, r5, r6, lr}
   11f40:	b	10ec8 <fwrite_unlocked@plt>
   11f44:	adds	r2, r2, #1
   11f48:	adc	r3, r3, #0
   11f4c:	ldr	r1, [pc, #16]	; 11f64 <__assert_fail@plt+0xe74>
   11f50:	mov	r0, #1
   11f54:	bl	11048 <__printf_chk@plt>
   11f58:	b	11f28 <__assert_fail@plt+0xe38>
   11f5c:	andeq	r8, r2, r8, ror r1
   11f60:	andeq	r8, r2, ip, ror #2
   11f64:	andeq	r6, r1, r0, lsl r7
   11f68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11f6c:	subs	r4, r0, #1
   11f70:	ldr	r6, [pc, #240]	; 12068 <__assert_fail@plt+0xf78>
   11f74:	movne	r2, #1
   11f78:	moveq	r2, #0
   11f7c:	ldr	r5, [r6, #12]
   11f80:	mov	r7, r1
   11f84:	cmp	r5, #0
   11f88:	moveq	r2, #0
   11f8c:	cmp	r2, #0
   11f90:	beq	12030 <__assert_fail@plt+0xf40>
   11f94:	bl	10fe8 <__ctype_b_loc@plt>
   11f98:	ldrb	ip, [r7]
   11f9c:	mov	r2, #0
   11fa0:	mov	r8, r2
   11fa4:	lsl	r3, ip, #1
   11fa8:	ldr	r9, [r0]
   11fac:	ldrh	r3, [r9, r3]
   11fb0:	and	r3, r3, #1
   11fb4:	add	r1, r7, r2
   11fb8:	b	11fd8 <__assert_fail@plt+0xee8>
   11fbc:	add	r2, r2, #1
   11fc0:	cmp	r4, r2
   11fc4:	bls	1202c <__assert_fail@plt+0xf3c>
   11fc8:	ldrb	ip, [r1, #1]!
   11fcc:	lsl	r3, ip, #1
   11fd0:	ldrh	r3, [r9, r3]
   11fd4:	and	r3, r3, #1
   11fd8:	cmp	ip, #10
   11fdc:	movne	r0, r3
   11fe0:	orreq	r0, r3, #1
   11fe4:	cmp	r0, #0
   11fe8:	bne	11fbc <__assert_fail@plt+0xecc>
   11fec:	cmp	r4, r2
   11ff0:	bls	1202c <__assert_fail@plt+0xf3c>
   11ff4:	add	r0, r7, r2
   11ff8:	cmp	ip, #10
   11ffc:	movne	lr, r3
   12000:	orreq	lr, r3, #1
   12004:	cmp	lr, #0
   12008:	beq	12048 <__assert_fail@plt+0xf58>
   1200c:	add	r8, r8, #1
   12010:	cmp	r8, r5
   12014:	movcs	r1, #0
   12018:	movcc	r1, #1
   1201c:	cmp	r4, r2
   12020:	movls	r1, #0
   12024:	cmp	r1, #0
   12028:	bne	11fb4 <__assert_fail@plt+0xec4>
   1202c:	sub	r4, r4, r2
   12030:	ldr	r0, [r6, #16]
   12034:	cmp	r4, r0
   12038:	addls	r2, r2, r4
   1203c:	addhi	r2, r2, r0
   12040:	add	r0, r7, r2
   12044:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12048:	add	r2, r2, #1
   1204c:	cmp	r4, r2
   12050:	bls	1202c <__assert_fail@plt+0xf3c>
   12054:	ldrb	ip, [r0, #1]!
   12058:	lsl	r3, ip, #1
   1205c:	ldrh	r3, [r9, r3]
   12060:	and	r3, r3, #1
   12064:	b	11ff8 <__assert_fail@plt+0xf08>
   12068:	andeq	r8, r2, r8, ror r1
   1206c:	ldr	r3, [pc, #888]	; 123ec <__assert_fail@plt+0x12fc>
   12070:	push	{r7, lr}
   12074:	sub	sp, sp, #64	; 0x40
   12078:	ldr	r3, [r3]
   1207c:	subs	r4, r0, #0
   12080:	str	r3, [sp, #60]	; 0x3c
   12084:	beq	120c0 <__assert_fail@plt+0xfd0>
   12088:	ldr	r3, [pc, #864]	; 123f0 <__assert_fail@plt+0x1300>
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #860]	; 123f4 <__assert_fail@plt+0x1304>
   12094:	mov	r0, #0
   12098:	ldr	r5, [r3]
   1209c:	bl	10ee0 <dcgettext@plt>
   120a0:	ldr	r3, [pc, #848]	; 123f8 <__assert_fail@plt+0x1308>
   120a4:	mov	r1, #1
   120a8:	ldr	r3, [r3]
   120ac:	mov	r2, r0
   120b0:	mov	r0, r5
   120b4:	bl	11060 <__fprintf_chk@plt>
   120b8:	mov	r0, r4
   120bc:	bl	10ff4 <exit@plt>
   120c0:	mov	r2, #5
   120c4:	ldr	r1, [pc, #816]	; 123fc <__assert_fail@plt+0x130c>
   120c8:	bl	10ee0 <dcgettext@plt>
   120cc:	ldr	r3, [pc, #804]	; 123f8 <__assert_fail@plt+0x1308>
   120d0:	ldr	r5, [pc, #808]	; 12400 <__assert_fail@plt+0x1310>
   120d4:	ldr	r2, [r3]
   120d8:	mov	r1, r0
   120dc:	mov	r0, #1
   120e0:	bl	11048 <__printf_chk@plt>
   120e4:	mov	r2, #5
   120e8:	ldr	r1, [pc, #788]	; 12404 <__assert_fail@plt+0x1314>
   120ec:	mov	r0, r4
   120f0:	bl	10ee0 <dcgettext@plt>
   120f4:	ldr	r1, [r5]
   120f8:	bl	10e50 <fputs_unlocked@plt>
   120fc:	mov	r2, #5
   12100:	ldr	r1, [pc, #768]	; 12408 <__assert_fail@plt+0x1318>
   12104:	mov	r0, r4
   12108:	bl	10ee0 <dcgettext@plt>
   1210c:	ldr	r1, [r5]
   12110:	bl	10e50 <fputs_unlocked@plt>
   12114:	mov	r2, #5
   12118:	ldr	r1, [pc, #748]	; 1240c <__assert_fail@plt+0x131c>
   1211c:	mov	r0, r4
   12120:	bl	10ee0 <dcgettext@plt>
   12124:	ldr	r1, [r5]
   12128:	bl	10e50 <fputs_unlocked@plt>
   1212c:	mov	r2, #5
   12130:	ldr	r1, [pc, #728]	; 12410 <__assert_fail@plt+0x1320>
   12134:	mov	r0, r4
   12138:	bl	10ee0 <dcgettext@plt>
   1213c:	ldr	r1, [r5]
   12140:	bl	10e50 <fputs_unlocked@plt>
   12144:	mov	r2, #5
   12148:	ldr	r1, [pc, #708]	; 12414 <__assert_fail@plt+0x1324>
   1214c:	mov	r0, r4
   12150:	bl	10ee0 <dcgettext@plt>
   12154:	ldr	r1, [r5]
   12158:	bl	10e50 <fputs_unlocked@plt>
   1215c:	mov	r2, #5
   12160:	ldr	r1, [pc, #688]	; 12418 <__assert_fail@plt+0x1328>
   12164:	mov	r0, r4
   12168:	bl	10ee0 <dcgettext@plt>
   1216c:	ldr	r1, [r5]
   12170:	bl	10e50 <fputs_unlocked@plt>
   12174:	mov	r2, #5
   12178:	ldr	r1, [pc, #668]	; 1241c <__assert_fail@plt+0x132c>
   1217c:	mov	r0, r4
   12180:	bl	10ee0 <dcgettext@plt>
   12184:	ldr	r1, [r5]
   12188:	bl	10e50 <fputs_unlocked@plt>
   1218c:	mov	r2, #5
   12190:	ldr	r1, [pc, #648]	; 12420 <__assert_fail@plt+0x1330>
   12194:	mov	r0, r4
   12198:	bl	10ee0 <dcgettext@plt>
   1219c:	ldr	r1, [r5]
   121a0:	bl	10e50 <fputs_unlocked@plt>
   121a4:	mov	r2, #5
   121a8:	ldr	r1, [pc, #628]	; 12424 <__assert_fail@plt+0x1334>
   121ac:	mov	r0, r4
   121b0:	bl	10ee0 <dcgettext@plt>
   121b4:	ldr	r1, [r5]
   121b8:	bl	10e50 <fputs_unlocked@plt>
   121bc:	mov	r2, #5
   121c0:	ldr	r1, [pc, #608]	; 12428 <__assert_fail@plt+0x1338>
   121c4:	mov	r0, r4
   121c8:	bl	10ee0 <dcgettext@plt>
   121cc:	ldr	r1, [r5]
   121d0:	bl	10e50 <fputs_unlocked@plt>
   121d4:	mov	r2, #5
   121d8:	ldr	r1, [pc, #588]	; 1242c <__assert_fail@plt+0x133c>
   121dc:	mov	r0, r4
   121e0:	bl	10ee0 <dcgettext@plt>
   121e4:	ldr	r1, [r5]
   121e8:	bl	10e50 <fputs_unlocked@plt>
   121ec:	mov	r2, #5
   121f0:	ldr	r1, [pc, #568]	; 12430 <__assert_fail@plt+0x1340>
   121f4:	mov	r0, r4
   121f8:	bl	10ee0 <dcgettext@plt>
   121fc:	ldr	r1, [r5]
   12200:	bl	10e50 <fputs_unlocked@plt>
   12204:	mov	r2, #5
   12208:	ldr	r1, [pc, #548]	; 12434 <__assert_fail@plt+0x1344>
   1220c:	mov	r0, r4
   12210:	bl	10ee0 <dcgettext@plt>
   12214:	ldr	r1, [r5]
   12218:	bl	10e50 <fputs_unlocked@plt>
   1221c:	ldr	lr, [pc, #532]	; 12438 <__assert_fail@plt+0x1348>
   12220:	add	ip, sp, #4
   12224:	ldm	lr!, {r0, r1, r2, r3}
   12228:	stmia	ip!, {r0, r1, r2, r3}
   1222c:	ldm	lr!, {r0, r1, r2, r3}
   12230:	ldr	r6, [sp, #4]
   12234:	stmia	ip!, {r0, r1, r2, r3}
   12238:	cmp	r6, #0
   1223c:	ldm	lr!, {r0, r1, r2, r3}
   12240:	addeq	r5, sp, #4
   12244:	stmia	ip!, {r0, r1, r2, r3}
   12248:	ldm	lr, {r0, r1}
   1224c:	stm	ip, {r0, r1}
   12250:	beq	12280 <__assert_fail@plt+0x1190>
   12254:	ldr	r7, [pc, #480]	; 1243c <__assert_fail@plt+0x134c>
   12258:	add	r5, sp, #4
   1225c:	b	1226c <__assert_fail@plt+0x117c>
   12260:	ldr	r6, [r5, #8]!
   12264:	cmp	r6, #0
   12268:	beq	12280 <__assert_fail@plt+0x1190>
   1226c:	mov	r1, r6
   12270:	mov	r0, r7
   12274:	bl	10e68 <strcmp@plt>
   12278:	cmp	r0, #0
   1227c:	bne	12260 <__assert_fail@plt+0x1170>
   12280:	ldr	r5, [r5, #4]
   12284:	mov	r2, #5
   12288:	cmp	r5, #0
   1228c:	ldr	r1, [pc, #428]	; 12440 <__assert_fail@plt+0x1350>
   12290:	beq	12338 <__assert_fail@plt+0x1248>
   12294:	mov	r0, #0
   12298:	bl	10ee0 <dcgettext@plt>
   1229c:	ldr	r3, [pc, #416]	; 12444 <__assert_fail@plt+0x1354>
   122a0:	ldr	r2, [pc, #416]	; 12448 <__assert_fail@plt+0x1358>
   122a4:	mov	r1, r0
   122a8:	mov	r0, #1
   122ac:	bl	11048 <__printf_chk@plt>
   122b0:	mov	r1, #0
   122b4:	mov	r0, #5
   122b8:	bl	1109c <setlocale@plt>
   122bc:	cmp	r0, #0
   122c0:	ldreq	r6, [pc, #372]	; 1243c <__assert_fail@plt+0x134c>
   122c4:	beq	122e0 <__assert_fail@plt+0x11f0>
   122c8:	mov	r2, #3
   122cc:	ldr	r1, [pc, #376]	; 1244c <__assert_fail@plt+0x135c>
   122d0:	bl	110cc <strncmp@plt>
   122d4:	ldr	r6, [pc, #352]	; 1243c <__assert_fail@plt+0x134c>
   122d8:	cmp	r0, #0
   122dc:	bne	123c8 <__assert_fail@plt+0x12d8>
   122e0:	mov	r2, #5
   122e4:	ldr	r1, [pc, #356]	; 12450 <__assert_fail@plt+0x1360>
   122e8:	mov	r0, #0
   122ec:	bl	10ee0 <dcgettext@plt>
   122f0:	ldr	r3, [pc, #324]	; 1243c <__assert_fail@plt+0x134c>
   122f4:	ldr	r2, [pc, #328]	; 12444 <__assert_fail@plt+0x1354>
   122f8:	mov	r1, r0
   122fc:	mov	r0, #1
   12300:	bl	11048 <__printf_chk@plt>
   12304:	mov	r2, #5
   12308:	ldr	r1, [pc, #324]	; 12454 <__assert_fail@plt+0x1364>
   1230c:	mov	r0, #0
   12310:	bl	10ee0 <dcgettext@plt>
   12314:	ldr	r2, [pc, #316]	; 12458 <__assert_fail@plt+0x1368>
   12318:	cmp	r5, r6
   1231c:	ldr	r3, [pc, #312]	; 1245c <__assert_fail@plt+0x136c>
   12320:	movne	r3, r2
   12324:	mov	r1, r0
   12328:	mov	r2, r5
   1232c:	mov	r0, #1
   12330:	bl	11048 <__printf_chk@plt>
   12334:	b	120b8 <__assert_fail@plt+0xfc8>
   12338:	mov	r0, r5
   1233c:	bl	10ee0 <dcgettext@plt>
   12340:	ldr	r3, [pc, #252]	; 12444 <__assert_fail@plt+0x1354>
   12344:	ldr	r2, [pc, #252]	; 12448 <__assert_fail@plt+0x1358>
   12348:	mov	r1, r0
   1234c:	mov	r0, #1
   12350:	bl	11048 <__printf_chk@plt>
   12354:	mov	r1, r5
   12358:	mov	r0, #5
   1235c:	bl	1109c <setlocale@plt>
   12360:	cmp	r0, #0
   12364:	beq	1237c <__assert_fail@plt+0x128c>
   12368:	mov	r2, #3
   1236c:	ldr	r1, [pc, #216]	; 1244c <__assert_fail@plt+0x135c>
   12370:	bl	110cc <strncmp@plt>
   12374:	cmp	r0, #0
   12378:	bne	123c0 <__assert_fail@plt+0x12d0>
   1237c:	mov	r2, #5
   12380:	ldr	r1, [pc, #200]	; 12450 <__assert_fail@plt+0x1360>
   12384:	mov	r0, #0
   12388:	bl	10ee0 <dcgettext@plt>
   1238c:	ldr	r3, [pc, #168]	; 1243c <__assert_fail@plt+0x134c>
   12390:	ldr	r2, [pc, #172]	; 12444 <__assert_fail@plt+0x1354>
   12394:	mov	r5, r3
   12398:	mov	r1, r0
   1239c:	mov	r0, #1
   123a0:	bl	11048 <__printf_chk@plt>
   123a4:	ldr	r1, [pc, #168]	; 12454 <__assert_fail@plt+0x1364>
   123a8:	mov	r2, #5
   123ac:	mov	r0, #0
   123b0:	bl	10ee0 <dcgettext@plt>
   123b4:	ldr	r3, [pc, #160]	; 1245c <__assert_fail@plt+0x136c>
   123b8:	mov	r1, r0
   123bc:	b	12328 <__assert_fail@plt+0x1238>
   123c0:	ldr	r6, [pc, #116]	; 1243c <__assert_fail@plt+0x134c>
   123c4:	mov	r5, r6
   123c8:	mov	r2, #5
   123cc:	ldr	r1, [pc, #140]	; 12460 <__assert_fail@plt+0x1370>
   123d0:	mov	r0, #0
   123d4:	bl	10ee0 <dcgettext@plt>
   123d8:	ldr	r2, [pc, #92]	; 1243c <__assert_fail@plt+0x134c>
   123dc:	mov	r1, r0
   123e0:	mov	r0, #1
   123e4:	bl	11048 <__printf_chk@plt>
   123e8:	b	122e0 <__assert_fail@plt+0x11f0>
   123ec:	andeq	r7, r2, r8, lsl #30
   123f0:	andeq	r8, r2, r0, ror #2
   123f4:	andeq	r6, r1, r0, lsr #14
   123f8:	andeq	r8, r2, r0, lsr #3
   123fc:	andeq	r6, r1, r8, asr #14
   12400:	andeq	r8, r2, ip, ror #2
   12404:	andeq	r6, r1, r0, ror r7
   12408:	andeq	r6, r1, r0, lsr #16
   1240c:	andeq	r6, r1, ip, ror #16
   12410:	strdeq	r6, [r1], -r8
   12414:	strdeq	r6, [r1], -r0
   12418:	andeq	r6, r1, ip, lsr #20
   1241c:	andeq	r6, r1, r4, asr #21
   12420:	andeq	r6, r1, r8, ror fp
   12424:			; <UNDEFINED> instruction: 0x00016bb8
   12428:	strdeq	r6, [r1], -ip
   1242c:	andeq	r6, r1, ip, lsr #24
   12430:	andeq	r6, r1, r4, ror #24
   12434:	ldrdeq	r6, [r1], -ip
   12438:	andeq	r6, r1, r0, asr #11
   1243c:	andeq	r6, r1, r8, lsl r7
   12440:	andeq	r6, r1, r8, lsr #27
   12444:	andeq	r6, r1, r0, asr #27
   12448:	andeq	r6, r1, r8, ror #27
   1244c:	strdeq	r6, [r1], -r8
   12450:	andeq	r6, r1, r4, asr #28
   12454:	andeq	r6, r1, r4, ror #28
   12458:	andeq	r6, r1, ip, lsl r8
   1245c:	andeq	r7, r1, r8, asr r0
   12460:	strdeq	r6, [r1], -ip
   12464:	mov	r0, #1
   12468:	b	1206c <__assert_fail@plt+0xf7c>
   1246c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12470:	mov	r5, r1
   12474:	sub	sp, sp, #12
   12478:	mov	r4, r2
   1247c:	str	r2, [sp]
   12480:	mov	r7, r3
   12484:	mov	sl, r0
   12488:	bl	1100c <strlen@plt>
   1248c:	ldr	fp, [r5]
   12490:	cmp	fp, #0
   12494:	beq	12558 <__assert_fail@plt+0x1468>
   12498:	mov	r6, #0
   1249c:	mov	r8, r0
   124a0:	str	r6, [sp, #4]
   124a4:	mvn	r9, #0
   124a8:	b	124d4 <__assert_fail@plt+0x13e4>
   124ac:	bl	10ed4 <memcmp@plt>
   124b0:	ldr	r3, [sp, #4]
   124b4:	cmp	r0, #0
   124b8:	movne	r3, #1
   124bc:	str	r3, [sp, #4]
   124c0:	ldr	fp, [r5, #4]!
   124c4:	add	r6, r6, #1
   124c8:	cmp	fp, #0
   124cc:	add	r4, r4, r7
   124d0:	beq	12530 <__assert_fail@plt+0x1440>
   124d4:	mov	r2, r8
   124d8:	mov	r1, sl
   124dc:	mov	r0, fp
   124e0:	bl	110cc <strncmp@plt>
   124e4:	cmp	r0, #0
   124e8:	mov	r0, fp
   124ec:	bne	124c0 <__assert_fail@plt+0x13d0>
   124f0:	bl	1100c <strlen@plt>
   124f4:	ldr	r3, [sp]
   124f8:	mov	r2, r7
   124fc:	mov	r1, r4
   12500:	cmp	r0, r8
   12504:	mla	r0, r7, r9, r3
   12508:	beq	12548 <__assert_fail@plt+0x1458>
   1250c:	cmn	r9, #1
   12510:	moveq	r9, r6
   12514:	beq	124c0 <__assert_fail@plt+0x13d0>
   12518:	ldr	r3, [sp]
   1251c:	cmp	r3, #0
   12520:	bne	124ac <__assert_fail@plt+0x13bc>
   12524:	mov	r3, #1
   12528:	str	r3, [sp, #4]
   1252c:	b	124c0 <__assert_fail@plt+0x13d0>
   12530:	ldr	r3, [sp, #4]
   12534:	cmp	r3, #0
   12538:	mvnne	r9, #1
   1253c:	mov	r0, r9
   12540:	add	sp, sp, #12
   12544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12548:	mov	r9, r6
   1254c:	mov	r0, r9
   12550:	add	sp, sp, #12
   12554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12558:	mvn	r9, #0
   1255c:	b	1253c <__assert_fail@plt+0x144c>
   12560:	cmn	r2, #1
   12564:	push	{r4, r5, r6, lr}
   12568:	mov	r2, #5
   1256c:	sub	sp, sp, #8
   12570:	mov	r5, r1
   12574:	mov	r6, r0
   12578:	ldreq	r1, [pc, #76]	; 125cc <__assert_fail@plt+0x14dc>
   1257c:	ldrne	r1, [pc, #76]	; 125d0 <__assert_fail@plt+0x14e0>
   12580:	mov	r0, #0
   12584:	bl	10ee0 <dcgettext@plt>
   12588:	mov	r2, r5
   1258c:	mov	r1, #8
   12590:	mov	r4, r0
   12594:	mov	r0, #0
   12598:	bl	14bc0 <__assert_fail@plt+0x3ad0>
   1259c:	mov	r1, r6
   125a0:	mov	r5, r0
   125a4:	mov	r0, #1
   125a8:	bl	14f0c <__assert_fail@plt+0x3e1c>
   125ac:	mov	r1, #0
   125b0:	mov	r3, r5
   125b4:	mov	r2, r4
   125b8:	str	r0, [sp]
   125bc:	mov	r0, r1
   125c0:	bl	10f64 <error@plt>
   125c4:	add	sp, sp, #8
   125c8:	pop	{r4, r5, r6, pc}
   125cc:	andeq	r7, r1, r8, ror #2
   125d0:	andeq	r7, r1, r4, lsl #3
   125d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d8:	mov	r6, r0
   125dc:	ldr	sl, [pc, #224]	; 126c4 <__assert_fail@plt+0x15d4>
   125e0:	mov	r4, r1
   125e4:	mov	r7, r2
   125e8:	ldr	r1, [pc, #216]	; 126c8 <__assert_fail@plt+0x15d8>
   125ec:	mov	r2, #5
   125f0:	mov	r0, #0
   125f4:	bl	10ee0 <dcgettext@plt>
   125f8:	ldr	r1, [sl]
   125fc:	bl	10e50 <fputs_unlocked@plt>
   12600:	ldr	fp, [r6]
   12604:	cmp	fp, #0
   12608:	movne	r9, #0
   1260c:	movne	r5, r9
   12610:	bne	1264c <__assert_fail@plt+0x155c>
   12614:	b	12690 <__assert_fail@plt+0x15a0>
   12618:	mov	r0, fp
   1261c:	bl	14f1c <__assert_fail@plt+0x3e2c>
   12620:	ldr	r2, [pc, #164]	; 126cc <__assert_fail@plt+0x15dc>
   12624:	mov	r1, #1
   12628:	mov	r9, r4
   1262c:	mov	r3, r0
   12630:	mov	r0, r8
   12634:	bl	11060 <__fprintf_chk@plt>
   12638:	ldr	fp, [r6, #4]!
   1263c:	add	r5, r5, #1
   12640:	cmp	fp, #0
   12644:	add	r4, r4, r7
   12648:	beq	12690 <__assert_fail@plt+0x15a0>
   1264c:	cmp	r5, #0
   12650:	mov	r1, r4
   12654:	mov	r2, r7
   12658:	mov	r0, r9
   1265c:	ldr	r8, [sl]
   12660:	beq	12618 <__assert_fail@plt+0x1528>
   12664:	bl	10ed4 <memcmp@plt>
   12668:	cmp	r0, #0
   1266c:	bne	12618 <__assert_fail@plt+0x1528>
   12670:	mov	r0, fp
   12674:	bl	14f1c <__assert_fail@plt+0x3e2c>
   12678:	ldr	r2, [pc, #80]	; 126d0 <__assert_fail@plt+0x15e0>
   1267c:	mov	r1, #1
   12680:	mov	r3, r0
   12684:	mov	r0, r8
   12688:	bl	11060 <__fprintf_chk@plt>
   1268c:	b	12638 <__assert_fail@plt+0x1548>
   12690:	ldr	r0, [sl]
   12694:	ldr	r3, [r0, #20]
   12698:	ldr	r2, [r0, #24]
   1269c:	cmp	r3, r2
   126a0:	bcs	126b8 <__assert_fail@plt+0x15c8>
   126a4:	add	r1, r3, #1
   126a8:	mov	r2, #10
   126ac:	str	r1, [r0, #20]
   126b0:	strb	r2, [r3]
   126b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126b8:	mov	r1, #10
   126bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c0:	b	11090 <__overflow@plt>
   126c4:	andeq	r8, r2, r0, ror #2
   126c8:	andeq	r7, r1, r4, lsr #3
   126cc:			; <UNDEFINED> instruction: 0x000171bc
   126d0:	andeq	r7, r1, r4, asr #3
   126d4:	push	{r4, r5, r6, r7, r8, lr}
   126d8:	mov	r6, r1
   126dc:	mov	r4, r2
   126e0:	mov	r5, r3
   126e4:	mov	r7, r0
   126e8:	ldr	r3, [sp, #24]
   126ec:	mov	r2, r5
   126f0:	mov	r1, r4
   126f4:	mov	r0, r6
   126f8:	bl	1246c <__assert_fail@plt+0x137c>
   126fc:	cmp	r0, #0
   12700:	popge	{r4, r5, r6, r7, r8, pc}
   12704:	mov	r2, r0
   12708:	mov	r1, r6
   1270c:	mov	r0, r7
   12710:	bl	12560 <__assert_fail@plt+0x1470>
   12714:	mov	r0, r4
   12718:	ldr	r2, [sp, #24]
   1271c:	mov	r1, r5
   12720:	bl	125d4 <__assert_fail@plt+0x14e4>
   12724:	ldr	r3, [sp, #28]
   12728:	blx	r3
   1272c:	mvn	r0, #0
   12730:	pop	{r4, r5, r6, r7, r8, pc}
   12734:	push	{r4, r5, r6, r7, r8, lr}
   12738:	ldr	r7, [r1]
   1273c:	cmp	r7, #0
   12740:	beq	12780 <__assert_fail@plt+0x1690>
   12744:	mov	r6, r3
   12748:	mov	r8, r0
   1274c:	mov	r4, r2
   12750:	mov	r5, r1
   12754:	b	12764 <__assert_fail@plt+0x1674>
   12758:	ldr	r7, [r5, #4]!
   1275c:	cmp	r7, #0
   12760:	beq	12780 <__assert_fail@plt+0x1690>
   12764:	mov	r1, r4
   12768:	mov	r2, r6
   1276c:	mov	r0, r8
   12770:	bl	10ed4 <memcmp@plt>
   12774:	add	r4, r4, r6
   12778:	cmp	r0, #0
   1277c:	bne	12758 <__assert_fail@plt+0x1668>
   12780:	mov	r0, r7
   12784:	pop	{r4, r5, r6, r7, r8, pc}
   12788:	ldr	r3, [pc, #4]	; 12794 <__assert_fail@plt+0x16a4>
   1278c:	str	r0, [r3]
   12790:	bx	lr
   12794:	muleq	r2, r8, r1
   12798:	ldr	r3, [pc, #4]	; 127a4 <__assert_fail@plt+0x16b4>
   1279c:	strb	r0, [r3, #4]
   127a0:	bx	lr
   127a4:	muleq	r2, r8, r1
   127a8:	ldr	r3, [pc, #180]	; 12864 <__assert_fail@plt+0x1774>
   127ac:	push	{r4, r5, r6, lr}
   127b0:	sub	sp, sp, #8
   127b4:	ldr	r0, [r3]
   127b8:	bl	16108 <__assert_fail@plt+0x5018>
   127bc:	cmp	r0, #0
   127c0:	beq	127e8 <__assert_fail@plt+0x16f8>
   127c4:	bl	11024 <__errno_location@plt>
   127c8:	ldr	r5, [pc, #152]	; 12868 <__assert_fail@plt+0x1778>
   127cc:	ldrb	r3, [r5, #4]
   127d0:	cmp	r3, #0
   127d4:	mov	r4, r0
   127d8:	beq	12804 <__assert_fail@plt+0x1714>
   127dc:	ldr	r3, [r0]
   127e0:	cmp	r3, #32
   127e4:	bne	12804 <__assert_fail@plt+0x1714>
   127e8:	ldr	r3, [pc, #124]	; 1286c <__assert_fail@plt+0x177c>
   127ec:	ldr	r0, [r3]
   127f0:	bl	16108 <__assert_fail@plt+0x5018>
   127f4:	cmp	r0, #0
   127f8:	bne	12844 <__assert_fail@plt+0x1754>
   127fc:	add	sp, sp, #8
   12800:	pop	{r4, r5, r6, pc}
   12804:	mov	r2, #5
   12808:	ldr	r1, [pc, #96]	; 12870 <__assert_fail@plt+0x1780>
   1280c:	mov	r0, #0
   12810:	bl	10ee0 <dcgettext@plt>
   12814:	mov	r6, r0
   12818:	ldr	r0, [r5]
   1281c:	cmp	r0, #0
   12820:	beq	12850 <__assert_fail@plt+0x1760>
   12824:	ldr	r4, [r4]
   12828:	bl	14d3c <__assert_fail@plt+0x3c4c>
   1282c:	mov	r1, r4
   12830:	str	r6, [sp]
   12834:	ldr	r2, [pc, #56]	; 12874 <__assert_fail@plt+0x1784>
   12838:	mov	r3, r0
   1283c:	mov	r0, #0
   12840:	bl	10f64 <error@plt>
   12844:	ldr	r3, [pc, #44]	; 12878 <__assert_fail@plt+0x1788>
   12848:	ldr	r0, [r3]
   1284c:	bl	10ea4 <_exit@plt>
   12850:	mov	r3, r6
   12854:	ldr	r1, [r4]
   12858:	ldr	r2, [pc, #28]	; 1287c <__assert_fail@plt+0x178c>
   1285c:	bl	10f64 <error@plt>
   12860:	b	12844 <__assert_fail@plt+0x1754>
   12864:	andeq	r8, r2, ip, ror #2
   12868:	muleq	r2, r8, r1
   1286c:	andeq	r8, r2, r0, ror #2
   12870:	andeq	r7, r1, ip, asr #3
   12874:	andeq	r6, r1, r8, lsl #14
   12878:	andeq	r8, r2, r8, lsl #2
   1287c:	andeq	r6, r1, ip, lsl #14
   12880:	b	10e80 <posix_fadvise64@plt>
   12884:	cmp	r0, #0
   12888:	bxeq	lr
   1288c:	push	{r4, lr}
   12890:	sub	sp, sp, #16
   12894:	mov	r4, r1
   12898:	bl	11054 <fileno@plt>
   1289c:	mov	r2, #0
   128a0:	mov	r3, #0
   128a4:	str	r4, [sp, #8]
   128a8:	strd	r2, [sp]
   128ac:	bl	10e80 <posix_fadvise64@plt>
   128b0:	add	sp, sp, #16
   128b4:	pop	{r4, pc}
   128b8:	push	{r4, lr}
   128bc:	mov	r1, #0
   128c0:	mov	r4, r0
   128c4:	ldr	r0, [pc, #64]	; 1290c <__assert_fail@plt+0x181c>
   128c8:	bl	10f70 <open64@plt>
   128cc:	cmp	r4, r0
   128d0:	moveq	r3, #1
   128d4:	beq	128e8 <__assert_fail@plt+0x17f8>
   128d8:	cmp	r0, #0
   128dc:	mov	r3, r0
   128e0:	movlt	r3, #0
   128e4:	bge	128f0 <__assert_fail@plt+0x1800>
   128e8:	mov	r0, r3
   128ec:	pop	{r4, pc}
   128f0:	bl	110e4 <close@plt>
   128f4:	bl	11024 <__errno_location@plt>
   128f8:	mov	r2, #9
   128fc:	mov	r3, #0
   12900:	str	r2, [r0]
   12904:	mov	r0, r3
   12908:	pop	{r4, pc}
   1290c:	ldrdeq	r7, [r1], -r8
   12910:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12914:	mov	sl, r0
   12918:	mov	r0, r2
   1291c:	mov	r8, r2
   12920:	mov	fp, r1
   12924:	bl	11054 <fileno@plt>
   12928:	mov	r4, r0
   1292c:	bl	11024 <__errno_location@plt>
   12930:	cmp	r4, #1
   12934:	mov	r9, r0
   12938:	beq	12a6c <__assert_fail@plt+0x197c>
   1293c:	cmp	r4, #2
   12940:	beq	12a0c <__assert_fail@plt+0x191c>
   12944:	cmp	r4, #0
   12948:	beq	12a00 <__assert_fail@plt+0x1910>
   1294c:	mov	r1, #2
   12950:	mov	r0, r1
   12954:	bl	10ef8 <dup2@plt>
   12958:	subs	r4, r0, #2
   1295c:	movne	r4, #1
   12960:	mov	r1, #1
   12964:	mov	r0, r1
   12968:	bl	10ef8 <dup2@plt>
   1296c:	subs	r7, r0, #1
   12970:	movne	r7, #1
   12974:	mov	r1, #0
   12978:	mov	r0, r1
   1297c:	bl	10ef8 <dup2@plt>
   12980:	subs	r5, r0, #0
   12984:	beq	129a0 <__assert_fail@plt+0x18b0>
   12988:	mov	r0, #0
   1298c:	bl	128b8 <__assert_fail@plt+0x17c8>
   12990:	cmp	r0, #0
   12994:	mov	r5, r0
   12998:	mov	r6, r0
   1299c:	beq	12a78 <__assert_fail@plt+0x1988>
   129a0:	cmp	r7, #0
   129a4:	bne	12a20 <__assert_fail@plt+0x1930>
   129a8:	cmp	r4, #0
   129ac:	beq	129c0 <__assert_fail@plt+0x18d0>
   129b0:	mov	r0, #2
   129b4:	bl	128b8 <__assert_fail@plt+0x17c8>
   129b8:	subs	r4, r0, #0
   129bc:	beq	12a58 <__assert_fail@plt+0x1968>
   129c0:	mov	r2, r8
   129c4:	mov	r1, fp
   129c8:	mov	r0, sl
   129cc:	bl	10fd0 <freopen64@plt>
   129d0:	mov	r6, r0
   129d4:	cmp	r4, #0
   129d8:	ldr	r8, [r9]
   129dc:	bne	12a60 <__assert_fail@plt+0x1970>
   129e0:	cmp	r7, #0
   129e4:	bne	12a4c <__assert_fail@plt+0x195c>
   129e8:	cmp	r5, #0
   129ec:	bne	12a14 <__assert_fail@plt+0x1924>
   129f0:	cmp	r6, #0
   129f4:	streq	r8, [r9]
   129f8:	mov	r0, r6
   129fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a00:	mov	r7, r4
   12a04:	mov	r5, r4
   12a08:	b	129c0 <__assert_fail@plt+0x18d0>
   12a0c:	mov	r4, #0
   12a10:	b	12960 <__assert_fail@plt+0x1870>
   12a14:	mov	r0, #0
   12a18:	bl	110e4 <close@plt>
   12a1c:	b	129f0 <__assert_fail@plt+0x1900>
   12a20:	mov	r0, #1
   12a24:	bl	128b8 <__assert_fail@plt+0x17c8>
   12a28:	subs	r7, r0, #0
   12a2c:	bne	129a8 <__assert_fail@plt+0x18b8>
   12a30:	cmp	r4, #0
   12a34:	ldr	r8, [r9]
   12a38:	moveq	r6, r4
   12a3c:	beq	12a4c <__assert_fail@plt+0x195c>
   12a40:	mov	r0, #2
   12a44:	mov	r6, r7
   12a48:	bl	110e4 <close@plt>
   12a4c:	mov	r0, #1
   12a50:	bl	110e4 <close@plt>
   12a54:	b	129e8 <__assert_fail@plt+0x18f8>
   12a58:	ldr	r8, [r9]
   12a5c:	mov	r6, r4
   12a60:	mov	r0, #2
   12a64:	bl	110e4 <close@plt>
   12a68:	b	129e0 <__assert_fail@plt+0x18f0>
   12a6c:	mov	r4, #0
   12a70:	mov	r7, r4
   12a74:	b	12974 <__assert_fail@plt+0x1884>
   12a78:	mov	r5, #1
   12a7c:	b	129d4 <__assert_fail@plt+0x18e4>
   12a80:	push	{r4, lr}
   12a84:	mov	r1, #0
   12a88:	bl	1109c <setlocale@plt>
   12a8c:	subs	r4, r0, #0
   12a90:	beq	12abc <__assert_fail@plt+0x19cc>
   12a94:	ldr	r1, [pc, #40]	; 12ac4 <__assert_fail@plt+0x19d4>
   12a98:	bl	10e68 <strcmp@plt>
   12a9c:	cmp	r0, #0
   12aa0:	popeq	{r4, pc}
   12aa4:	mov	r0, r4
   12aa8:	ldr	r1, [pc, #24]	; 12ac8 <__assert_fail@plt+0x19d8>
   12aac:	bl	10e68 <strcmp@plt>
   12ab0:	adds	r0, r0, #0
   12ab4:	movne	r0, #1
   12ab8:	pop	{r4, pc}
   12abc:	mov	r0, #1
   12ac0:	pop	{r4, pc}
   12ac4:	andeq	r7, r1, r4, ror #3
   12ac8:	andeq	r7, r1, r8, ror #3
   12acc:	mov	r3, #0
   12ad0:	str	r3, [r0]
   12ad4:	str	r3, [r0, #4]
   12ad8:	str	r3, [r0, #8]
   12adc:	bx	lr
   12ae0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae4:	ldr	r3, [r1]
   12ae8:	ldr	r9, [r0, #8]
   12aec:	ldr	fp, [r0]
   12af0:	tst	r3, #16
   12af4:	add	fp, r9, fp
   12af8:	bne	12bc4 <__assert_fail@plt+0x1ad4>
   12afc:	mov	r8, r2
   12b00:	mov	r7, r0
   12b04:	mov	sl, r1
   12b08:	mov	r4, r9
   12b0c:	b	12b34 <__assert_fail@plt+0x1a44>
   12b10:	add	r2, r3, #1
   12b14:	str	r2, [sl, #4]
   12b18:	ldrb	r5, [r3]
   12b1c:	mov	r6, r5
   12b20:	cmp	r4, fp
   12b24:	beq	12b88 <__assert_fail@plt+0x1a98>
   12b28:	cmp	r6, r8
   12b2c:	strb	r5, [r4], #1
   12b30:	beq	12bb4 <__assert_fail@plt+0x1ac4>
   12b34:	ldr	r3, [sl, #4]
   12b38:	ldr	r2, [sl, #8]
   12b3c:	cmp	r3, r2
   12b40:	bcc	12b10 <__assert_fail@plt+0x1a20>
   12b44:	mov	r0, sl
   12b48:	bl	11084 <__uflow@plt>
   12b4c:	cmn	r0, #1
   12b50:	mov	r6, r0
   12b54:	bne	12bcc <__assert_fail@plt+0x1adc>
   12b58:	cmp	r9, r4
   12b5c:	beq	12bc4 <__assert_fail@plt+0x1ad4>
   12b60:	ldr	r3, [sl]
   12b64:	tst	r3, #32
   12b68:	bne	12bc4 <__assert_fail@plt+0x1ad4>
   12b6c:	ldrb	r3, [r4, #-1]
   12b70:	cmp	r3, r8
   12b74:	beq	12bb4 <__assert_fail@plt+0x1ac4>
   12b78:	cmp	r4, fp
   12b7c:	mov	r6, r8
   12b80:	bne	12bb0 <__assert_fail@plt+0x1ac0>
   12b84:	mov	r5, r8
   12b88:	mov	r0, r9
   12b8c:	mov	r1, r7
   12b90:	ldr	r4, [r7]
   12b94:	bl	155f4 <__assert_fail@plt+0x4504>
   12b98:	ldr	fp, [r7]
   12b9c:	mov	r9, r0
   12ba0:	add	r4, r0, r4
   12ba4:	str	r0, [r7, #8]
   12ba8:	add	fp, r0, fp
   12bac:	b	12b28 <__assert_fail@plt+0x1a38>
   12bb0:	strb	r8, [r4], #1
   12bb4:	sub	r4, r4, r9
   12bb8:	str	r4, [r7, #4]
   12bbc:	mov	r0, r7
   12bc0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc4:	mov	r0, #0
   12bc8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bcc:	uxtb	r5, r0
   12bd0:	b	12b20 <__assert_fail@plt+0x1a30>
   12bd4:	mov	r2, #10
   12bd8:	b	12ae0 <__assert_fail@plt+0x19f0>
   12bdc:	ldr	r0, [r0, #8]
   12be0:	b	10e98 <free@plt>
   12be4:	push	{r4, r5, r6, lr}
   12be8:	subs	r6, r2, #0
   12bec:	beq	12c30 <__assert_fail@plt+0x1b40>
   12bf0:	mov	r4, r0
   12bf4:	mov	r5, r1
   12bf8:	bl	10fb8 <__ctype_toupper_loc@plt>
   12bfc:	sub	r3, r4, #1
   12c00:	add	r4, r3, r6
   12c04:	sub	r1, r5, #1
   12c08:	ldr	ip, [r0]
   12c0c:	ldrb	lr, [r3, #1]!
   12c10:	ldrb	r2, [r1, #1]!
   12c14:	ldr	r0, [ip, lr, lsl #2]
   12c18:	ldr	r2, [ip, r2, lsl #2]
   12c1c:	subs	r0, r0, r2
   12c20:	popne	{r4, r5, r6, pc}
   12c24:	cmp	r4, r3
   12c28:	bne	12c0c <__assert_fail@plt+0x1b1c>
   12c2c:	pop	{r4, r5, r6, pc}
   12c30:	mov	r0, r6
   12c34:	pop	{r4, r5, r6, pc}
   12c38:	push	{r4, lr}
   12c3c:	sub	sp, sp, #8
   12c40:	ldr	r4, [pc, #100]	; 12cac <__assert_fail@plt+0x1bbc>
   12c44:	ldr	r0, [pc, #100]	; 12cb0 <__assert_fail@plt+0x1bc0>
   12c48:	ldr	r3, [r4]
   12c4c:	str	r3, [sp, #4]
   12c50:	bl	10f88 <getenv@plt>
   12c54:	subs	r3, r0, #0
   12c58:	beq	12c68 <__assert_fail@plt+0x1b78>
   12c5c:	ldrb	r3, [r3]
   12c60:	cmp	r3, #0
   12c64:	bne	12c84 <__assert_fail@plt+0x1b94>
   12c68:	ldr	r0, [pc, #68]	; 12cb4 <__assert_fail@plt+0x1bc4>
   12c6c:	ldr	r2, [sp, #4]
   12c70:	ldr	r3, [r4]
   12c74:	cmp	r2, r3
   12c78:	bne	12ca8 <__assert_fail@plt+0x1bb8>
   12c7c:	add	sp, sp, #8
   12c80:	pop	{r4, pc}
   12c84:	mov	r2, #10
   12c88:	mov	r1, sp
   12c8c:	bl	10e74 <strtol@plt>
   12c90:	ldr	r2, [sp]
   12c94:	ldr	r3, [pc, #24]	; 12cb4 <__assert_fail@plt+0x1bc4>
   12c98:	ldrb	r2, [r2]
   12c9c:	cmp	r2, #0
   12ca0:	movne	r0, r3
   12ca4:	b	12c6c <__assert_fail@plt+0x1b7c>
   12ca8:	bl	10eec <__stack_chk_fail@plt>
   12cac:	andeq	r7, r2, r8, lsl #30
   12cb0:	strdeq	r7, [r1], -r0
   12cb4:	andeq	r1, r3, r9, rrx
   12cb8:	push	{r4, r5, r6, lr}
   12cbc:	subs	r4, r0, #0
   12cc0:	beq	12d34 <__assert_fail@plt+0x1c44>
   12cc4:	mov	r1, #47	; 0x2f
   12cc8:	bl	110a8 <strrchr@plt>
   12ccc:	subs	r5, r0, #0
   12cd0:	beq	12d20 <__assert_fail@plt+0x1c30>
   12cd4:	add	r6, r5, #1
   12cd8:	sub	r3, r6, r4
   12cdc:	cmp	r3, #6
   12ce0:	ble	12d20 <__assert_fail@plt+0x1c30>
   12ce4:	mov	r2, #7
   12ce8:	ldr	r1, [pc, #96]	; 12d50 <__assert_fail@plt+0x1c60>
   12cec:	sub	r0, r5, #6
   12cf0:	bl	110cc <strncmp@plt>
   12cf4:	cmp	r0, #0
   12cf8:	bne	12d20 <__assert_fail@plt+0x1c30>
   12cfc:	mov	r2, #3
   12d00:	ldr	r1, [pc, #76]	; 12d54 <__assert_fail@plt+0x1c64>
   12d04:	mov	r0, r6
   12d08:	bl	110cc <strncmp@plt>
   12d0c:	cmp	r0, #0
   12d10:	movne	r4, r6
   12d14:	ldreq	r3, [pc, #60]	; 12d58 <__assert_fail@plt+0x1c68>
   12d18:	addeq	r4, r5, #4
   12d1c:	streq	r4, [r3]
   12d20:	ldr	r2, [pc, #52]	; 12d5c <__assert_fail@plt+0x1c6c>
   12d24:	ldr	r3, [pc, #52]	; 12d60 <__assert_fail@plt+0x1c70>
   12d28:	str	r4, [r2]
   12d2c:	str	r4, [r3]
   12d30:	pop	{r4, r5, r6, pc}
   12d34:	ldr	r3, [pc, #40]	; 12d64 <__assert_fail@plt+0x1c74>
   12d38:	mov	r2, #55	; 0x37
   12d3c:	mov	r1, #1
   12d40:	ldr	r3, [r3]
   12d44:	ldr	r0, [pc, #28]	; 12d68 <__assert_fail@plt+0x1c78>
   12d48:	bl	10f28 <fwrite@plt>
   12d4c:	bl	110d8 <abort@plt>
   12d50:	andeq	r7, r1, r8, lsr r2
   12d54:	andeq	r7, r1, r0, asr #4
   12d58:	andeq	r8, r2, r0, asr r1
   12d5c:	andeq	r8, r2, r0, lsr #3
   12d60:	andeq	r8, r2, r4, asr r1
   12d64:	andeq	r8, r2, r0, ror #2
   12d68:	andeq	r7, r1, r0, lsl #4
   12d6c:	push	{r4, lr}
   12d70:	mov	r2, #48	; 0x30
   12d74:	mov	r4, r1
   12d78:	mov	r1, #0
   12d7c:	bl	1103c <memset@plt>
   12d80:	cmp	r4, #10
   12d84:	beq	12d90 <__assert_fail@plt+0x1ca0>
   12d88:	str	r4, [r0]
   12d8c:	pop	{r4, pc}
   12d90:	bl	110d8 <abort@plt>
   12d94:	push	{r4, r5, r6, lr}
   12d98:	mov	r2, #5
   12d9c:	mov	r5, r0
   12da0:	mov	r6, r1
   12da4:	mov	r1, r0
   12da8:	mov	r0, #0
   12dac:	bl	10ee0 <dcgettext@plt>
   12db0:	cmp	r5, r0
   12db4:	mov	r4, r0
   12db8:	beq	12dc4 <__assert_fail@plt+0x1cd4>
   12dbc:	mov	r0, r4
   12dc0:	pop	{r4, r5, r6, pc}
   12dc4:	bl	1617c <__assert_fail@plt+0x508c>
   12dc8:	ldrb	r3, [r0]
   12dcc:	bic	r3, r3, #32
   12dd0:	cmp	r3, #85	; 0x55
   12dd4:	bne	12e34 <__assert_fail@plt+0x1d44>
   12dd8:	ldrb	r3, [r0, #1]
   12ddc:	bic	r3, r3, #32
   12de0:	cmp	r3, #84	; 0x54
   12de4:	bne	12eac <__assert_fail@plt+0x1dbc>
   12de8:	ldrb	r3, [r0, #2]
   12dec:	bic	r3, r3, #32
   12df0:	cmp	r3, #70	; 0x46
   12df4:	bne	12eac <__assert_fail@plt+0x1dbc>
   12df8:	ldrb	r3, [r0, #3]
   12dfc:	cmp	r3, #45	; 0x2d
   12e00:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e04:	ldrb	r3, [r0, #4]
   12e08:	cmp	r3, #56	; 0x38
   12e0c:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e10:	ldrb	r3, [r0, #5]
   12e14:	cmp	r3, #0
   12e18:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e1c:	ldrb	r2, [r4]
   12e20:	ldr	r3, [pc, #156]	; 12ec4 <__assert_fail@plt+0x1dd4>
   12e24:	ldr	r4, [pc, #156]	; 12ec8 <__assert_fail@plt+0x1dd8>
   12e28:	cmp	r2, #96	; 0x60
   12e2c:	movne	r4, r3
   12e30:	b	12dbc <__assert_fail@plt+0x1ccc>
   12e34:	cmp	r3, #71	; 0x47
   12e38:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e3c:	ldrb	r3, [r0, #1]
   12e40:	bic	r3, r3, #32
   12e44:	cmp	r3, #66	; 0x42
   12e48:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e4c:	ldrb	r3, [r0, #2]
   12e50:	cmp	r3, #49	; 0x31
   12e54:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e58:	ldrb	r3, [r0, #3]
   12e5c:	cmp	r3, #56	; 0x38
   12e60:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e64:	ldrb	r3, [r0, #4]
   12e68:	cmp	r3, #48	; 0x30
   12e6c:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e70:	ldrb	r3, [r0, #5]
   12e74:	cmp	r3, #51	; 0x33
   12e78:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e7c:	ldrb	r3, [r0, #6]
   12e80:	cmp	r3, #48	; 0x30
   12e84:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e88:	ldrb	r3, [r0, #7]
   12e8c:	cmp	r3, #0
   12e90:	bne	12eac <__assert_fail@plt+0x1dbc>
   12e94:	ldrb	r2, [r4]
   12e98:	ldr	r3, [pc, #44]	; 12ecc <__assert_fail@plt+0x1ddc>
   12e9c:	ldr	r4, [pc, #44]	; 12ed0 <__assert_fail@plt+0x1de0>
   12ea0:	cmp	r2, #96	; 0x60
   12ea4:	movne	r4, r3
   12ea8:	b	12dbc <__assert_fail@plt+0x1ccc>
   12eac:	ldr	r3, [pc, #32]	; 12ed4 <__assert_fail@plt+0x1de4>
   12eb0:	ldr	r4, [pc, #32]	; 12ed8 <__assert_fail@plt+0x1de8>
   12eb4:	cmp	r6, #9
   12eb8:	movne	r4, r3
   12ebc:	mov	r0, r4
   12ec0:	pop	{r4, r5, r6, pc}
   12ec4:	muleq	r1, ip, r2
   12ec8:	andeq	r7, r1, r8, lsr #5
   12ecc:	andeq	r7, r1, r0, lsr #5
   12ed0:	andeq	r7, r1, r4, lsr #5
   12ed4:	andeq	r7, r1, ip, lsr #5
   12ed8:	muleq	r1, r8, r2
   12edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee0:	sub	sp, sp, #124	; 0x7c
   12ee4:	ldr	ip, [pc, #3576]	; 13ce4 <__assert_fail@plt+0x2bf4>
   12ee8:	str	r3, [sp, #24]
   12eec:	ldr	r3, [sp, #168]	; 0xa8
   12ef0:	ldr	ip, [ip]
   12ef4:	str	r3, [sp, #56]	; 0x38
   12ef8:	ldr	r3, [sp, #172]	; 0xac
   12efc:	ldr	r8, [sp, #160]	; 0xa0
   12f00:	str	r3, [sp, #80]	; 0x50
   12f04:	ldr	r3, [sp, #176]	; 0xb0
   12f08:	mov	fp, r0
   12f0c:	str	r3, [sp, #76]	; 0x4c
   12f10:	mov	sl, r1
   12f14:	str	r2, [sp, #36]	; 0x24
   12f18:	str	ip, [sp, #116]	; 0x74
   12f1c:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   12f20:	ldr	r3, [sp, #164]	; 0xa4
   12f24:	ands	r4, r3, #2
   12f28:	movne	r3, #1
   12f2c:	moveq	r3, #0
   12f30:	str	r3, [sp, #32]
   12f34:	str	r0, [sp, #64]	; 0x40
   12f38:	cmp	r8, #10
   12f3c:	ldrls	pc, [pc, r8, lsl #2]
   12f40:	b	146f0 <__assert_fail@plt+0x3600>
   12f44:	andeq	r3, r1, r8, lsr r3
   12f48:	ldrdeq	r3, [r1], -r0
   12f4c:	ldrdeq	r3, [r1], -r0
   12f50:	strdeq	r3, [r1], -r0
   12f54:	andeq	r3, r1, r4, lsr #5
   12f58:	andeq	r3, r1, ip, ror #5
   12f5c:	andeq	r3, r1, r8, ror #6
   12f60:	andeq	r3, r1, r0, lsr #7
   12f64:	andeq	r2, r1, r0, ror pc
   12f68:	andeq	r2, r1, r0, ror pc
   12f6c:	andeq	r2, r1, r0, ror pc
   12f70:	cmp	r8, #10
   12f74:	beq	12f98 <__assert_fail@plt+0x1ea8>
   12f78:	mov	r1, r8
   12f7c:	ldr	r0, [pc, #3428]	; 13ce8 <__assert_fail@plt+0x2bf8>
   12f80:	bl	12d94 <__assert_fail@plt+0x1ca4>
   12f84:	mov	r1, r8
   12f88:	str	r0, [sp, #80]	; 0x50
   12f8c:	ldr	r0, [pc, #3420]	; 13cf0 <__assert_fail@plt+0x2c00>
   12f90:	bl	12d94 <__assert_fail@plt+0x1ca4>
   12f94:	str	r0, [sp, #76]	; 0x4c
   12f98:	cmp	r4, #0
   12f9c:	movne	r4, #0
   12fa0:	beq	143b0 <__assert_fail@plt+0x32c0>
   12fa4:	ldr	r7, [sp, #76]	; 0x4c
   12fa8:	mov	r5, #0
   12fac:	mov	r6, #1
   12fb0:	mov	r0, r7
   12fb4:	str	r6, [sp, #40]	; 0x28
   12fb8:	str	r5, [sp, #68]	; 0x44
   12fbc:	bl	1100c <strlen@plt>
   12fc0:	str	r6, [sp, #28]
   12fc4:	str	r5, [sp, #44]	; 0x2c
   12fc8:	str	r5, [sp, #72]	; 0x48
   12fcc:	str	r7, [sp, #60]	; 0x3c
   12fd0:	str	r0, [sp, #52]	; 0x34
   12fd4:	str	r8, [sp, #160]	; 0xa0
   12fd8:	mov	r8, fp
   12fdc:	ldr	fp, [sp, #160]	; 0xa0
   12fe0:	mov	r9, #0
   12fe4:	ldr	r3, [sp, #24]
   12fe8:	cmn	r3, #1
   12fec:	beq	13554 <__assert_fail@plt+0x2464>
   12ff0:	ldr	r3, [sp, #24]
   12ff4:	subs	r6, r3, r9
   12ff8:	movne	r6, #1
   12ffc:	cmp	r6, #0
   13000:	beq	1356c <__assert_fail@plt+0x247c>
   13004:	ldr	r7, [sp, #28]
   13008:	ldr	r0, [sp, #36]	; 0x24
   1300c:	cmp	fp, #2
   13010:	moveq	r7, #0
   13014:	andne	r7, r7, #1
   13018:	add	r3, r0, r9
   1301c:	cmp	r7, #0
   13020:	str	r3, [sp, #48]	; 0x30
   13024:	beq	13a10 <__assert_fail@plt+0x2920>
   13028:	ldr	r2, [sp, #52]	; 0x34
   1302c:	cmp	r2, #0
   13030:	beq	13cf4 <__assert_fail@plt+0x2c04>
   13034:	ldr	r1, [sp, #24]
   13038:	cmp	r2, #1
   1303c:	mov	r3, r2
   13040:	movls	r3, #0
   13044:	movhi	r3, #1
   13048:	cmn	r1, #1
   1304c:	movne	r3, #0
   13050:	cmp	r3, #0
   13054:	add	r5, r9, r2
   13058:	beq	13064 <__assert_fail@plt+0x1f74>
   1305c:	bl	1100c <strlen@plt>
   13060:	str	r0, [sp, #24]
   13064:	ldr	r3, [sp, #24]
   13068:	cmp	r5, r3
   1306c:	bhi	13cf4 <__assert_fail@plt+0x2c04>
   13070:	ldr	r2, [sp, #52]	; 0x34
   13074:	ldr	r1, [sp, #60]	; 0x3c
   13078:	ldr	r0, [sp, #48]	; 0x30
   1307c:	bl	10ed4 <memcmp@plt>
   13080:	cmp	r0, #0
   13084:	bne	13cf4 <__assert_fail@plt+0x2c04>
   13088:	ldr	r3, [sp, #32]
   1308c:	cmp	r3, #0
   13090:	bne	145b0 <__assert_fail@plt+0x34c0>
   13094:	ldr	r3, [sp, #48]	; 0x30
   13098:	ldrb	r5, [r3]
   1309c:	cmp	r5, #126	; 0x7e
   130a0:	ldrls	pc, [pc, r5, lsl #2]
   130a4:	b	13974 <__assert_fail@plt+0x2884>
   130a8:	andeq	r3, r1, r0, ror #16
   130ac:	andeq	r3, r1, r4, ror r9
   130b0:	andeq	r3, r1, r4, ror r9
   130b4:	andeq	r3, r1, r4, ror r9
   130b8:	andeq	r3, r1, r4, ror r9
   130bc:	andeq	r3, r1, r4, ror r9
   130c0:	andeq	r3, r1, r4, ror r9
   130c4:	andeq	r3, r1, ip, lsr #18
   130c8:	andeq	r3, r1, ip, lsl r9
   130cc:	andeq	r3, r1, ip, lsl r8
   130d0:	andeq	r3, r1, r4, ror #15
   130d4:	andeq	r3, r1, ip, lsr r8
   130d8:	andeq	r3, r1, r4, lsr #16
   130dc:	andeq	r3, r1, r4, asr r7
   130e0:	andeq	r3, r1, r4, ror r9
   130e4:	andeq	r3, r1, r4, ror r9
   130e8:	andeq	r3, r1, r4, ror r9
   130ec:	andeq	r3, r1, r4, ror r9
   130f0:	andeq	r3, r1, r4, ror r9
   130f4:	andeq	r3, r1, r4, ror r9
   130f8:	andeq	r3, r1, r4, ror r9
   130fc:	andeq	r3, r1, r4, ror r9
   13100:	andeq	r3, r1, r4, ror r9
   13104:	andeq	r3, r1, r4, ror r9
   13108:	andeq	r3, r1, r4, ror r9
   1310c:	andeq	r3, r1, r4, ror r9
   13110:	andeq	r3, r1, r4, ror r9
   13114:	andeq	r3, r1, r4, ror r9
   13118:	andeq	r3, r1, r4, ror r9
   1311c:	andeq	r3, r1, r4, ror r9
   13120:	andeq	r3, r1, r4, ror r9
   13124:	andeq	r3, r1, r4, ror r9
   13128:	andeq	r3, r1, r4, lsr r9
   1312c:	andeq	r3, r1, r8, asr #16
   13130:	andeq	r3, r1, r8, asr #16
   13134:	andeq	r3, r1, ip, asr #18
   13138:	andeq	r3, r1, r8, asr #16
   1313c:	andeq	r3, r1, r8, ror #18
   13140:	andeq	r3, r1, r8, asr #16
   13144:	andeq	r3, r1, r8, lsl #13
   13148:	andeq	r3, r1, r8, asr #16
   1314c:	andeq	r3, r1, r8, asr #16
   13150:	andeq	r3, r1, r8, asr #16
   13154:	andeq	r3, r1, r8, ror #18
   13158:	andeq	r3, r1, r8, ror #18
   1315c:	andeq	r3, r1, r8, ror #18
   13160:	andeq	r3, r1, r8, ror #18
   13164:	andeq	r3, r1, r8, ror #18
   13168:	andeq	r3, r1, r8, ror #18
   1316c:	andeq	r3, r1, r8, ror #18
   13170:	andeq	r3, r1, r8, ror #18
   13174:	andeq	r3, r1, r8, ror #18
   13178:	andeq	r3, r1, r8, ror #18
   1317c:	andeq	r3, r1, r8, ror #18
   13180:	andeq	r3, r1, r8, ror #18
   13184:	andeq	r3, r1, r8, ror #18
   13188:	andeq	r3, r1, r8, ror #18
   1318c:	andeq	r3, r1, r8, ror #18
   13190:	andeq	r3, r1, r8, ror #18
   13194:	andeq	r3, r1, r8, asr #16
   13198:	andeq	r3, r1, r8, asr #16
   1319c:	andeq	r3, r1, r8, asr #16
   131a0:	andeq	r3, r1, r8, asr #16
   131a4:	andeq	r3, r1, ip, asr r6
   131a8:	andeq	r3, r1, r4, ror r9
   131ac:	andeq	r3, r1, r8, ror #18
   131b0:	andeq	r3, r1, r8, ror #18
   131b4:	andeq	r3, r1, r8, ror #18
   131b8:	andeq	r3, r1, r8, ror #18
   131bc:	andeq	r3, r1, r8, ror #18
   131c0:	andeq	r3, r1, r8, ror #18
   131c4:	andeq	r3, r1, r8, ror #18
   131c8:	andeq	r3, r1, r8, ror #18
   131cc:	andeq	r3, r1, r8, ror #18
   131d0:	andeq	r3, r1, r8, ror #18
   131d4:	andeq	r3, r1, r8, ror #18
   131d8:	andeq	r3, r1, r8, ror #18
   131dc:	andeq	r3, r1, r8, ror #18
   131e0:	andeq	r3, r1, r8, ror #18
   131e4:	andeq	r3, r1, r8, ror #18
   131e8:	andeq	r3, r1, r8, ror #18
   131ec:	andeq	r3, r1, r8, ror #18
   131f0:	andeq	r3, r1, r8, ror #18
   131f4:	andeq	r3, r1, r8, ror #18
   131f8:	andeq	r3, r1, r8, ror #18
   131fc:	andeq	r3, r1, r8, ror #18
   13200:	andeq	r3, r1, r8, ror #18
   13204:	andeq	r3, r1, r8, ror #18
   13208:	andeq	r3, r1, r8, ror #18
   1320c:	andeq	r3, r1, r8, ror #18
   13210:	andeq	r3, r1, r8, ror #18
   13214:	andeq	r3, r1, r8, asr #16
   13218:	andeq	r3, r1, r4, lsl r6
   1321c:	andeq	r3, r1, r8, ror #18
   13220:	andeq	r3, r1, r8, asr #16
   13224:	andeq	r3, r1, r8, ror #18
   13228:	andeq	r3, r1, r8, asr #16
   1322c:	andeq	r3, r1, r8, ror #18
   13230:	andeq	r3, r1, r8, ror #18
   13234:	andeq	r3, r1, r8, ror #18
   13238:	andeq	r3, r1, r8, ror #18
   1323c:	andeq	r3, r1, r8, ror #18
   13240:	andeq	r3, r1, r8, ror #18
   13244:	andeq	r3, r1, r8, ror #18
   13248:	andeq	r3, r1, r8, ror #18
   1324c:	andeq	r3, r1, r8, ror #18
   13250:	andeq	r3, r1, r8, ror #18
   13254:	andeq	r3, r1, r8, ror #18
   13258:	andeq	r3, r1, r8, ror #18
   1325c:	andeq	r3, r1, r8, ror #18
   13260:	andeq	r3, r1, r8, ror #18
   13264:	andeq	r3, r1, r8, ror #18
   13268:	andeq	r3, r1, r8, ror #18
   1326c:	andeq	r3, r1, r8, ror #18
   13270:	andeq	r3, r1, r8, ror #18
   13274:	andeq	r3, r1, r8, ror #18
   13278:	andeq	r3, r1, r8, ror #18
   1327c:	andeq	r3, r1, r8, ror #18
   13280:	andeq	r3, r1, r8, ror #18
   13284:	andeq	r3, r1, r8, ror #18
   13288:	andeq	r3, r1, r8, ror #18
   1328c:	andeq	r3, r1, r8, ror #18
   13290:	andeq	r3, r1, r8, ror #18
   13294:	andeq	r3, r1, ip, lsr #8
   13298:	andeq	r3, r1, r8, asr #16
   1329c:	andeq	r3, r1, ip, lsr #8
   132a0:	andeq	r3, r1, ip, asr #18
   132a4:	cmp	r4, #0
   132a8:	moveq	r3, #1
   132ac:	streq	r3, [sp, #28]
   132b0:	beq	139dc <__assert_fail@plt+0x28ec>
   132b4:	mov	r3, #0
   132b8:	mov	r4, r3
   132bc:	mov	r2, #1
   132c0:	str	r2, [sp, #40]	; 0x28
   132c4:	str	r3, [sp, #68]	; 0x44
   132c8:	str	r2, [sp, #32]
   132cc:	str	r2, [sp, #52]	; 0x34
   132d0:	ldr	r3, [pc, #2584]	; 13cf0 <__assert_fail@plt+0x2c00>
   132d4:	str	r4, [sp, #44]	; 0x2c
   132d8:	str	r4, [sp, #72]	; 0x48
   132dc:	str	r4, [sp, #28]
   132e0:	str	r3, [sp, #60]	; 0x3c
   132e4:	mov	r8, #2
   132e8:	b	12fd4 <__assert_fail@plt+0x1ee4>
   132ec:	cmp	r4, #0
   132f0:	bne	1457c <__assert_fail@plt+0x348c>
   132f4:	cmp	sl, #0
   132f8:	beq	1433c <__assert_fail@plt+0x324c>
   132fc:	mov	r3, #34	; 0x22
   13300:	strb	r3, [fp]
   13304:	ldr	r3, [pc, #2528]	; 13cec <__assert_fail@plt+0x2bfc>
   13308:	mov	r1, r4
   1330c:	mov	r2, #1
   13310:	str	r4, [sp, #68]	; 0x44
   13314:	str	r2, [sp, #40]	; 0x28
   13318:	mov	r4, r2
   1331c:	str	r1, [sp, #44]	; 0x2c
   13320:	str	r1, [sp, #72]	; 0x48
   13324:	str	r1, [sp, #32]
   13328:	str	r2, [sp, #28]
   1332c:	str	r2, [sp, #52]	; 0x34
   13330:	str	r3, [sp, #60]	; 0x3c
   13334:	b	12fd4 <__assert_fail@plt+0x1ee4>
   13338:	mov	r3, #0
   1333c:	str	r3, [sp, #68]	; 0x44
   13340:	str	r3, [sp, #44]	; 0x2c
   13344:	str	r3, [sp, #32]
   13348:	str	r3, [sp, #28]
   1334c:	str	r3, [sp, #60]	; 0x3c
   13350:	mov	r3, #1
   13354:	str	r8, [sp, #72]	; 0x48
   13358:	str	r8, [sp, #52]	; 0x34
   1335c:	mov	r4, r8
   13360:	str	r3, [sp, #40]	; 0x28
   13364:	b	12fd4 <__assert_fail@plt+0x1ee4>
   13368:	mov	r3, #1
   1336c:	str	r3, [sp, #40]	; 0x28
   13370:	str	r3, [sp, #32]
   13374:	str	r3, [sp, #28]
   13378:	str	r3, [sp, #52]	; 0x34
   1337c:	ldr	r3, [pc, #2408]	; 13cec <__assert_fail@plt+0x2bfc>
   13380:	mov	r2, #0
   13384:	mov	r4, r2
   13388:	str	r2, [sp, #68]	; 0x44
   1338c:	str	r2, [sp, #44]	; 0x2c
   13390:	str	r2, [sp, #72]	; 0x48
   13394:	str	r3, [sp, #60]	; 0x3c
   13398:	mov	r8, #5
   1339c:	b	12fd4 <__assert_fail@plt+0x1ee4>
   133a0:	mov	r3, #0
   133a4:	mov	r2, #1
   133a8:	str	r2, [sp, #40]	; 0x28
   133ac:	mov	r4, r3
   133b0:	str	r3, [sp, #68]	; 0x44
   133b4:	str	r2, [sp, #28]
   133b8:	str	r3, [sp, #44]	; 0x2c
   133bc:	str	r3, [sp, #72]	; 0x48
   133c0:	str	r3, [sp, #32]
   133c4:	str	r3, [sp, #52]	; 0x34
   133c8:	str	r3, [sp, #60]	; 0x3c
   133cc:	b	12fd4 <__assert_fail@plt+0x1ee4>
   133d0:	mov	r2, #1
   133d4:	mov	r3, #0
   133d8:	str	r2, [sp, #40]	; 0x28
   133dc:	mov	r4, r3
   133e0:	str	r3, [sp, #68]	; 0x44
   133e4:	str	r8, [sp, #52]	; 0x34
   133e8:	str	r2, [sp, #32]
   133ec:	b	132d0 <__assert_fail@plt+0x21e0>
   133f0:	mov	r3, #1
   133f4:	str	r3, [sp, #40]	; 0x28
   133f8:	str	r3, [sp, #32]
   133fc:	str	r3, [sp, #28]
   13400:	str	r3, [sp, #52]	; 0x34
   13404:	ldr	r3, [pc, #2276]	; 13cf0 <__assert_fail@plt+0x2c00>
   13408:	mov	r2, #0
   1340c:	mov	r4, r2
   13410:	str	r2, [sp, #68]	; 0x44
   13414:	str	r2, [sp, #44]	; 0x2c
   13418:	str	r2, [sp, #72]	; 0x48
   1341c:	str	r3, [sp, #60]	; 0x3c
   13420:	mov	r8, #2
   13424:	b	12fd4 <__assert_fail@plt+0x1ee4>
   13428:	mov	r7, #0
   1342c:	ldr	r3, [sp, #24]
   13430:	cmn	r3, #1
   13434:	beq	13f70 <__assert_fail@plt+0x2e80>
   13438:	ldr	r3, [sp, #24]
   1343c:	subs	r3, r3, #1
   13440:	movne	r3, #1
   13444:	cmp	r3, #0
   13448:	sub	r2, fp, #2
   1344c:	clz	r2, r2
   13450:	lsr	r2, r2, #5
   13454:	bne	13650 <__assert_fail@plt+0x2560>
   13458:	cmp	r9, #0
   1345c:	bne	13650 <__assert_fail@plt+0x2560>
   13460:	ldr	r3, [sp, #32]
   13464:	tst	r3, r2
   13468:	bne	13770 <__assert_fail@plt+0x2680>
   1346c:	ldr	r3, [sp, #28]
   13470:	eor	r3, r3, #1
   13474:	orr	r3, r2, r3
   13478:	ldr	r2, [sp, #32]
   1347c:	eor	r3, r3, #1
   13480:	orrs	r3, r2, r3
   13484:	beq	134b4 <__assert_fail@plt+0x23c4>
   13488:	mov	r3, #0
   1348c:	ldr	r1, [sp, #56]	; 0x38
   13490:	cmp	r1, #0
   13494:	beq	134b4 <__assert_fail@plt+0x23c4>
   13498:	lsr	r2, r5, #5
   1349c:	and	r0, r5, #31
   134a0:	uxtb	r2, r2
   134a4:	ldr	r1, [r1, r2, lsl #2]
   134a8:	lsr	r2, r1, r0
   134ac:	tst	r2, #1
   134b0:	bne	134bc <__assert_fail@plt+0x23cc>
   134b4:	cmp	r7, #0
   134b8:	beq	1370c <__assert_fail@plt+0x261c>
   134bc:	sub	r2, fp, #2
   134c0:	clz	r2, r2
   134c4:	lsr	r2, r2, #5
   134c8:	ldr	r3, [sp, #32]
   134cc:	cmp	r3, #0
   134d0:	bne	137fc <__assert_fail@plt+0x270c>
   134d4:	ldr	r3, [sp, #44]	; 0x2c
   134d8:	eor	r3, r3, #1
   134dc:	ands	r3, r2, r3
   134e0:	beq	13518 <__assert_fail@plt+0x2428>
   134e4:	cmp	sl, r4
   134e8:	movhi	r2, #39	; 0x27
   134ec:	strbhi	r2, [r8, r4]
   134f0:	add	r2, r4, #1
   134f4:	cmp	r2, sl
   134f8:	movcc	r1, #36	; 0x24
   134fc:	strbcc	r1, [r8, r2]
   13500:	add	r2, r4, #2
   13504:	cmp	r2, sl
   13508:	add	r4, r4, #3
   1350c:	movcc	r1, #39	; 0x27
   13510:	strbcc	r1, [r8, r2]
   13514:	str	r3, [sp, #44]	; 0x2c
   13518:	cmp	r4, sl
   1351c:	movcc	r3, #92	; 0x5c
   13520:	strbcc	r3, [r8, r4]
   13524:	add	r9, r9, #1
   13528:	add	r4, r4, #1
   1352c:	cmp	r4, sl
   13530:	ldr	r3, [sp, #40]	; 0x28
   13534:	strbcc	r5, [r8, r4]
   13538:	cmp	r6, #0
   1353c:	moveq	r3, #0
   13540:	str	r3, [sp, #40]	; 0x28
   13544:	ldr	r3, [sp, #24]
   13548:	add	r4, r4, #1
   1354c:	cmn	r3, #1
   13550:	bne	12ff0 <__assert_fail@plt+0x1f00>
   13554:	ldr	r3, [sp, #36]	; 0x24
   13558:	ldrb	r6, [r3, r9]
   1355c:	adds	r6, r6, #0
   13560:	movne	r6, #1
   13564:	cmp	r6, #0
   13568:	bne	13004 <__assert_fail@plt+0x1f14>
   1356c:	str	fp, [sp, #160]	; 0xa0
   13570:	mov	fp, r8
   13574:	ldr	r8, [sp, #160]	; 0xa0
   13578:	ldr	r1, [sp, #32]
   1357c:	cmp	r4, #0
   13580:	sub	r2, r8, #2
   13584:	clz	r2, r2
   13588:	lsr	r2, r2, #5
   1358c:	andeq	r3, r2, r1
   13590:	movne	r3, #0
   13594:	cmp	r3, #0
   13598:	bne	14684 <__assert_fail@plt+0x3594>
   1359c:	eor	r3, r1, #1
   135a0:	ands	r2, r2, r3
   135a4:	beq	145c0 <__assert_fail@plt+0x34d0>
   135a8:	ldr	r3, [sp, #68]	; 0x44
   135ac:	cmp	r3, #0
   135b0:	beq	145c4 <__assert_fail@plt+0x34d4>
   135b4:	ldr	r3, [sp, #40]	; 0x28
   135b8:	cmp	r3, #0
   135bc:	bne	14640 <__assert_fail@plt+0x3550>
   135c0:	ldr	r3, [sp, #72]	; 0x48
   135c4:	adds	r3, r3, #0
   135c8:	movne	r3, #1
   135cc:	cmp	sl, #0
   135d0:	movne	r3, #0
   135d4:	cmp	r3, #0
   135d8:	ldreq	r2, [sp, #68]	; 0x44
   135dc:	beq	145c4 <__assert_fail@plt+0x34d4>
   135e0:	ldr	sl, [sp, #72]	; 0x48
   135e4:	str	r3, [sp, #68]	; 0x44
   135e8:	ldr	r3, [pc, #1792]	; 13cf0 <__assert_fail@plt+0x2c00>
   135ec:	mov	r2, #39	; 0x27
   135f0:	mov	r4, #1
   135f4:	str	r3, [sp, #60]	; 0x3c
   135f8:	mov	r3, #0
   135fc:	strb	r2, [fp]
   13600:	str	r4, [sp, #52]	; 0x34
   13604:	mov	r8, #2
   13608:	str	r3, [sp, #32]
   1360c:	b	12fd4 <__assert_fail@plt+0x1ee4>
   13610:	mov	r7, #0
   13614:	cmp	fp, #2
   13618:	beq	13f50 <__assert_fail@plt+0x2e60>
   1361c:	ldr	r3, [sp, #52]	; 0x34
   13620:	ldr	r2, [sp, #28]
   13624:	ldr	r1, [sp, #32]
   13628:	cmp	r3, #0
   1362c:	andne	r2, r2, r1
   13630:	moveq	r2, #0
   13634:	cmp	r2, #0
   13638:	moveq	r5, #92	; 0x5c
   1363c:	moveq	r3, r5
   13640:	bne	13f5c <__assert_fail@plt+0x2e6c>
   13644:	ldr	r1, [sp, #28]
   13648:	cmp	r1, #0
   1364c:	bne	146cc <__assert_fail@plt+0x35dc>
   13650:	mov	r6, #0
   13654:	b	1346c <__assert_fail@plt+0x237c>
   13658:	mov	r7, #0
   1365c:	cmp	fp, #2
   13660:	beq	13fc0 <__assert_fail@plt+0x2ed0>
   13664:	cmp	fp, #5
   13668:	beq	13f84 <__assert_fail@plt+0x2e94>
   1366c:	sub	r2, fp, #2
   13670:	mov	r6, #0
   13674:	clz	r2, r2
   13678:	mov	r5, #63	; 0x3f
   1367c:	lsr	r2, r2, #5
   13680:	b	1346c <__assert_fail@plt+0x237c>
   13684:	mov	r7, #0
   13688:	cmp	fp, #2
   1368c:	strne	r6, [sp, #68]	; 0x44
   13690:	movne	r2, #0
   13694:	movne	r5, #39	; 0x27
   13698:	bne	1346c <__assert_fail@plt+0x237c>
   1369c:	ldr	r3, [sp, #32]
   136a0:	cmp	r3, #0
   136a4:	bne	143a0 <__assert_fail@plt+0x32b0>
   136a8:	cmp	sl, #0
   136ac:	ldr	r3, [sp, #72]	; 0x48
   136b0:	clz	r3, r3
   136b4:	lsr	r3, r3, #5
   136b8:	moveq	r3, #0
   136bc:	cmp	r3, #0
   136c0:	bne	142d4 <__assert_fail@plt+0x31e4>
   136c4:	cmp	sl, r4
   136c8:	movhi	r3, #39	; 0x27
   136cc:	strbhi	r3, [r8, r4]
   136d0:	add	r3, r4, #1
   136d4:	cmp	sl, r3
   136d8:	movhi	r2, #92	; 0x5c
   136dc:	strbhi	r2, [r8, r3]
   136e0:	add	r3, r4, #2
   136e4:	cmp	sl, r3
   136e8:	movhi	r2, #39	; 0x27
   136ec:	strbhi	r2, [r8, r3]
   136f0:	mov	r3, #0
   136f4:	cmp	r7, #0
   136f8:	add	r4, r4, #3
   136fc:	str	r3, [sp, #44]	; 0x2c
   13700:	str	r6, [sp, #68]	; 0x44
   13704:	mov	r5, #39	; 0x27
   13708:	bne	134bc <__assert_fail@plt+0x23cc>
   1370c:	ldr	r2, [sp, #44]	; 0x2c
   13710:	eor	r3, r3, #1
   13714:	and	r3, r3, r2
   13718:	add	r9, r9, #1
   1371c:	uxtb	r3, r3
   13720:	cmp	r3, #0
   13724:	beq	1352c <__assert_fail@plt+0x243c>
   13728:	cmp	sl, r4
   1372c:	movhi	r3, #39	; 0x27
   13730:	strbhi	r3, [r8, r4]
   13734:	add	r3, r4, #1
   13738:	cmp	sl, r3
   1373c:	movhi	r2, #39	; 0x27
   13740:	strbhi	r2, [r8, r3]
   13744:	mov	r3, #0
   13748:	add	r4, r4, #2
   1374c:	str	r3, [sp, #44]	; 0x2c
   13750:	b	1352c <__assert_fail@plt+0x243c>
   13754:	mov	r3, #114	; 0x72
   13758:	ldr	r1, [sp, #32]
   1375c:	sub	r2, fp, #2
   13760:	clz	r2, r2
   13764:	lsr	r2, r2, #5
   13768:	tst	r2, r1
   1376c:	beq	13644 <__assert_fail@plt+0x2554>
   13770:	mov	fp, r8
   13774:	mov	r8, #2
   13778:	ldr	r3, [sp, #28]
   1377c:	cmp	r3, #0
   13780:	movne	r8, #4
   13784:	ldr	r3, [sp, #164]	; 0xa4
   13788:	mov	ip, #0
   1378c:	bic	r3, r3, #2
   13790:	str	r3, [sp, #4]
   13794:	ldr	r3, [sp, #76]	; 0x4c
   13798:	str	r8, [sp]
   1379c:	str	r3, [sp, #16]
   137a0:	ldr	r3, [sp, #80]	; 0x50
   137a4:	ldr	r2, [sp, #36]	; 0x24
   137a8:	str	r3, [sp, #12]
   137ac:	mov	r1, sl
   137b0:	ldr	r3, [sp, #24]
   137b4:	mov	r0, fp
   137b8:	str	ip, [sp, #8]
   137bc:	bl	12edc <__assert_fail@plt+0x1dec>
   137c0:	mov	r4, r0
   137c4:	ldr	r3, [pc, #1304]	; 13ce4 <__assert_fail@plt+0x2bf4>
   137c8:	ldr	r2, [sp, #116]	; 0x74
   137cc:	mov	r0, r4
   137d0:	ldr	r3, [r3]
   137d4:	cmp	r2, r3
   137d8:	bne	146c8 <__assert_fail@plt+0x35d8>
   137dc:	add	sp, sp, #124	; 0x7c
   137e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137e4:	mov	r5, #110	; 0x6e
   137e8:	ldr	r3, [sp, #32]
   137ec:	mov	r2, #0
   137f0:	cmp	r3, #0
   137f4:	mov	r6, r2
   137f8:	beq	134d4 <__assert_fail@plt+0x23e4>
   137fc:	str	fp, [sp, #160]	; 0xa0
   13800:	mov	fp, r8
   13804:	ldr	r8, [sp, #160]	; 0xa0
   13808:	mov	r3, r2
   1380c:	ldr	r2, [sp, #28]
   13810:	and	r2, r2, r3
   13814:	str	r2, [sp, #28]
   13818:	b	13778 <__assert_fail@plt+0x2688>
   1381c:	mov	r5, #116	; 0x74
   13820:	b	137e8 <__assert_fail@plt+0x26f8>
   13824:	mov	r5, #102	; 0x66
   13828:	ldr	r3, [sp, #32]
   1382c:	cmp	r3, #0
   13830:	bne	143dc <__assert_fail@plt+0x32ec>
   13834:	mov	r6, #0
   13838:	b	13518 <__assert_fail@plt+0x2428>
   1383c:	mov	r5, #118	; 0x76
   13840:	b	13828 <__assert_fail@plt+0x2738>
   13844:	mov	r7, #0
   13848:	mov	r6, #0
   1384c:	b	13488 <__assert_fail@plt+0x2398>
   13850:	ldr	r3, [sp, #32]
   13854:	cmp	r3, #0
   13858:	bne	14620 <__assert_fail@plt+0x3530>
   1385c:	mov	r7, r3
   13860:	ldr	r3, [sp, #44]	; 0x2c
   13864:	sub	r2, fp, #2
   13868:	eor	r3, r3, #1
   1386c:	clz	r2, r2
   13870:	lsr	r2, r2, #5
   13874:	ands	r3, r2, r3
   13878:	beq	142c0 <__assert_fail@plt+0x31d0>
   1387c:	cmp	sl, r4
   13880:	movhi	r1, #39	; 0x27
   13884:	strbhi	r1, [r8, r4]
   13888:	add	r1, r4, #1
   1388c:	cmp	sl, r1
   13890:	movhi	r0, #36	; 0x24
   13894:	strbhi	r0, [r8, r1]
   13898:	add	r1, r4, #2
   1389c:	cmp	sl, r1
   138a0:	movhi	r0, #39	; 0x27
   138a4:	strbhi	r0, [r8, r1]
   138a8:	add	r1, r4, #3
   138ac:	cmp	sl, r1
   138b0:	bls	14320 <__assert_fail@plt+0x3230>
   138b4:	mov	r4, r1
   138b8:	mov	r1, #92	; 0x5c
   138bc:	strb	r1, [r8, r4]
   138c0:	mov	r1, r4
   138c4:	str	r3, [sp, #44]	; 0x2c
   138c8:	cmp	fp, #2
   138cc:	add	r4, r4, #1
   138d0:	beq	14368 <__assert_fail@plt+0x3278>
   138d4:	ldr	r0, [sp, #24]
   138d8:	add	r3, r9, #1
   138dc:	cmp	r3, r0
   138e0:	bcs	138f8 <__assert_fail@plt+0x2808>
   138e4:	ldr	r0, [sp, #36]	; 0x24
   138e8:	ldrb	r3, [r0, r3]
   138ec:	sub	r3, r3, #48	; 0x30
   138f0:	cmp	r3, #9
   138f4:	bls	14378 <__assert_fail@plt+0x3288>
   138f8:	mov	r5, #48	; 0x30
   138fc:	ldr	r3, [sp, #28]
   13900:	eor	r3, r3, #1
   13904:	orrs	r2, r2, r3
   13908:	mov	r3, r6
   1390c:	moveq	r6, r2
   13910:	beq	1348c <__assert_fail@plt+0x239c>
   13914:	mov	r6, #0
   13918:	b	134b4 <__assert_fail@plt+0x23c4>
   1391c:	mov	r2, #0
   13920:	mov	r6, r2
   13924:	mov	r5, #98	; 0x62
   13928:	b	134d4 <__assert_fail@plt+0x23e4>
   1392c:	mov	r5, #97	; 0x61
   13930:	b	13834 <__assert_fail@plt+0x2744>
   13934:	mov	r3, r7
   13938:	mov	r6, r7
   1393c:	mov	r2, #0
   13940:	mov	r7, r3
   13944:	mov	r5, #32
   13948:	b	1346c <__assert_fail@plt+0x237c>
   1394c:	cmp	r9, #0
   13950:	mov	r3, r7
   13954:	bne	13f1c <__assert_fail@plt+0x2e2c>
   13958:	mov	r6, r7
   1395c:	mov	r2, r9
   13960:	mov	r7, r3
   13964:	b	1346c <__assert_fail@plt+0x237c>
   13968:	mov	r6, r7
   1396c:	b	13488 <__assert_fail@plt+0x2398>
   13970:	mov	r7, #0
   13974:	ldr	r3, [sp, #64]	; 0x40
   13978:	cmp	r3, #1
   1397c:	bne	13fd8 <__assert_fail@plt+0x2ee8>
   13980:	bl	10fe8 <__ctype_b_loc@plt>
   13984:	ldr	r2, [sp, #64]	; 0x40
   13988:	sxth	r3, r5
   1398c:	mov	ip, r2
   13990:	lsl	r3, r3, #1
   13994:	ldr	r2, [r0]
   13998:	ldrh	r3, [r2, r3]
   1399c:	and	r3, r3, #16384	; 0x4000
   139a0:	cmp	r3, #0
   139a4:	ldr	r3, [sp, #28]
   139a8:	movne	r6, #1
   139ac:	moveq	r6, #0
   139b0:	movne	r2, #0
   139b4:	andeq	r2, r3, #1
   139b8:	cmp	r2, #0
   139bc:	bne	142e8 <__assert_fail@plt+0x31f8>
   139c0:	sub	r2, fp, #2
   139c4:	clz	r2, r2
   139c8:	lsr	r2, r2, #5
   139cc:	b	1346c <__assert_fail@plt+0x237c>
   139d0:	cmp	r4, #0
   139d4:	bne	14694 <__assert_fail@plt+0x35a4>
   139d8:	str	r4, [sp, #28]
   139dc:	cmp	sl, #0
   139e0:	bne	146d8 <__assert_fail@plt+0x35e8>
   139e4:	ldr	r3, [pc, #772]	; 13cf0 <__assert_fail@plt+0x2c00>
   139e8:	mov	r4, #1
   139ec:	str	r4, [sp, #40]	; 0x28
   139f0:	str	r3, [sp, #60]	; 0x3c
   139f4:	str	r4, [sp, #52]	; 0x34
   139f8:	str	sl, [sp, #72]	; 0x48
   139fc:	str	sl, [sp, #68]	; 0x44
   13a00:	str	sl, [sp, #44]	; 0x2c
   13a04:	str	sl, [sp, #32]
   13a08:	mov	r8, #2
   13a0c:	b	12fd4 <__assert_fail@plt+0x1ee4>
   13a10:	ldr	r3, [sp, #36]	; 0x24
   13a14:	ldrb	r5, [r3, r9]
   13a18:	cmp	r5, #126	; 0x7e
   13a1c:	ldrls	pc, [pc, r5, lsl #2]
   13a20:	b	13974 <__assert_fail@plt+0x2884>
   13a24:	andeq	r3, r1, r8, asr ip
   13a28:	andeq	r3, r1, r4, ror r9
   13a2c:	andeq	r3, r1, r4, ror r9
   13a30:	andeq	r3, r1, r4, ror r9
   13a34:	andeq	r3, r1, r4, ror r9
   13a38:	andeq	r3, r1, r4, ror r9
   13a3c:	andeq	r3, r1, r4, ror r9
   13a40:	andeq	r3, r1, r4, asr #24
   13a44:	andeq	r3, r1, r0, lsr ip
   13a48:	andeq	r3, r1, r8, lsr #24
   13a4c:	andeq	r3, r1, r0, lsr #24
   13a50:	ldrdeq	r3, [r1], -r0
   13a54:			; <UNDEFINED> instruction: 0x00013cbc
   13a58:	andeq	r3, r1, r4, asr r7
   13a5c:	andeq	r3, r1, r4, ror r9
   13a60:	andeq	r3, r1, r4, ror r9
   13a64:	andeq	r3, r1, r4, ror r9
   13a68:	andeq	r3, r1, r4, ror r9
   13a6c:	andeq	r3, r1, r4, ror r9
   13a70:	andeq	r3, r1, r4, ror r9
   13a74:	andeq	r3, r1, r4, ror r9
   13a78:	andeq	r3, r1, r4, ror r9
   13a7c:	andeq	r3, r1, r4, ror r9
   13a80:	andeq	r3, r1, r4, ror r9
   13a84:	andeq	r3, r1, r4, ror r9
   13a88:	andeq	r3, r1, r4, ror r9
   13a8c:	andeq	r3, r1, r4, ror r9
   13a90:	andeq	r3, r1, r4, ror r9
   13a94:	andeq	r3, r1, r4, ror r9
   13a98:	andeq	r3, r1, r4, ror r9
   13a9c:	andeq	r3, r1, r4, ror r9
   13aa0:	andeq	r3, r1, r4, ror r9
   13aa4:	andeq	r3, r1, ip, lsr #25
   13aa8:	muleq	r1, r8, ip
   13aac:	muleq	r1, r8, ip
   13ab0:	andeq	r3, r1, r8, lsl #25
   13ab4:	muleq	r1, r8, ip
   13ab8:	andeq	r3, r1, r0, asr #19
   13abc:	muleq	r1, r8, ip
   13ac0:	andeq	r3, r1, r8, lsl #13
   13ac4:	muleq	r1, r8, ip
   13ac8:	muleq	r1, r8, ip
   13acc:	muleq	r1, r8, ip
   13ad0:	andeq	r3, r1, r0, asr #19
   13ad4:	andeq	r3, r1, r0, asr #19
   13ad8:	andeq	r3, r1, r0, asr #19
   13adc:	andeq	r3, r1, r0, asr #19
   13ae0:	andeq	r3, r1, r0, asr #19
   13ae4:	andeq	r3, r1, r0, asr #19
   13ae8:	andeq	r3, r1, r0, asr #19
   13aec:	andeq	r3, r1, r0, asr #19
   13af0:	andeq	r3, r1, r0, asr #19
   13af4:	andeq	r3, r1, r0, asr #19
   13af8:	andeq	r3, r1, r0, asr #19
   13afc:	andeq	r3, r1, r0, asr #19
   13b00:	andeq	r3, r1, r0, asr #19
   13b04:	andeq	r3, r1, r0, asr #19
   13b08:	andeq	r3, r1, r0, asr #19
   13b0c:	andeq	r3, r1, r0, asr #19
   13b10:	muleq	r1, r8, ip
   13b14:	muleq	r1, r8, ip
   13b18:	muleq	r1, r8, ip
   13b1c:	muleq	r1, r8, ip
   13b20:	andeq	r3, r1, ip, asr r6
   13b24:	andeq	r3, r1, r4, ror r9
   13b28:	andeq	r3, r1, r0, asr #19
   13b2c:	andeq	r3, r1, r0, asr #19
   13b30:	andeq	r3, r1, r0, asr #19
   13b34:	andeq	r3, r1, r0, asr #19
   13b38:	andeq	r3, r1, r0, asr #19
   13b3c:	andeq	r3, r1, r0, asr #19
   13b40:	andeq	r3, r1, r0, asr #19
   13b44:	andeq	r3, r1, r0, asr #19
   13b48:	andeq	r3, r1, r0, asr #19
   13b4c:	andeq	r3, r1, r0, asr #19
   13b50:	andeq	r3, r1, r0, asr #19
   13b54:	andeq	r3, r1, r0, asr #19
   13b58:	andeq	r3, r1, r0, asr #19
   13b5c:	andeq	r3, r1, r0, asr #19
   13b60:	andeq	r3, r1, r0, asr #19
   13b64:	andeq	r3, r1, r0, asr #19
   13b68:	andeq	r3, r1, r0, asr #19
   13b6c:	andeq	r3, r1, r0, asr #19
   13b70:	andeq	r3, r1, r0, asr #19
   13b74:	andeq	r3, r1, r0, asr #19
   13b78:	andeq	r3, r1, r0, asr #19
   13b7c:	andeq	r3, r1, r0, asr #19
   13b80:	andeq	r3, r1, r0, asr #19
   13b84:	andeq	r3, r1, r0, asr #19
   13b88:	andeq	r3, r1, r0, asr #19
   13b8c:	andeq	r3, r1, r0, asr #19
   13b90:	muleq	r1, r8, ip
   13b94:	andeq	r3, r1, r4, lsl r6
   13b98:	andeq	r3, r1, r0, asr #19
   13b9c:	muleq	r1, r8, ip
   13ba0:	andeq	r3, r1, r0, asr #19
   13ba4:	muleq	r1, r8, ip
   13ba8:	andeq	r3, r1, r0, asr #19
   13bac:	andeq	r3, r1, r0, asr #19
   13bb0:	andeq	r3, r1, r0, asr #19
   13bb4:	andeq	r3, r1, r0, asr #19
   13bb8:	andeq	r3, r1, r0, asr #19
   13bbc:	andeq	r3, r1, r0, asr #19
   13bc0:	andeq	r3, r1, r0, asr #19
   13bc4:	andeq	r3, r1, r0, asr #19
   13bc8:	andeq	r3, r1, r0, asr #19
   13bcc:	andeq	r3, r1, r0, asr #19
   13bd0:	andeq	r3, r1, r0, asr #19
   13bd4:	andeq	r3, r1, r0, asr #19
   13bd8:	andeq	r3, r1, r0, asr #19
   13bdc:	andeq	r3, r1, r0, asr #19
   13be0:	andeq	r3, r1, r0, asr #19
   13be4:	andeq	r3, r1, r0, asr #19
   13be8:	andeq	r3, r1, r0, asr #19
   13bec:	andeq	r3, r1, r0, asr #19
   13bf0:	andeq	r3, r1, r0, asr #19
   13bf4:	andeq	r3, r1, r0, asr #19
   13bf8:	andeq	r3, r1, r0, asr #19
   13bfc:	andeq	r3, r1, r0, asr #19
   13c00:	andeq	r3, r1, r0, asr #19
   13c04:	andeq	r3, r1, r0, asr #19
   13c08:	andeq	r3, r1, r0, asr #19
   13c0c:	andeq	r3, r1, r0, asr #19
   13c10:	andeq	r3, r1, ip, lsr #8
   13c14:	muleq	r1, r8, ip
   13c18:	andeq	r3, r1, ip, lsr #8
   13c1c:	andeq	r3, r1, r8, lsl #25
   13c20:	mov	r3, #110	; 0x6e
   13c24:	b	13758 <__assert_fail@plt+0x2668>
   13c28:	mov	r3, #116	; 0x74
   13c2c:	b	13758 <__assert_fail@plt+0x2668>
   13c30:	sub	r2, fp, #2
   13c34:	mov	r3, #98	; 0x62
   13c38:	clz	r2, r2
   13c3c:	lsr	r2, r2, #5
   13c40:	b	13644 <__assert_fail@plt+0x2554>
   13c44:	sub	r2, fp, #2
   13c48:	mov	r3, #97	; 0x61
   13c4c:	clz	r2, r2
   13c50:	lsr	r2, r2, #5
   13c54:	b	13644 <__assert_fail@plt+0x2554>
   13c58:	ldr	r3, [sp, #28]
   13c5c:	cmp	r3, #0
   13c60:	bne	13850 <__assert_fail@plt+0x2760>
   13c64:	ldr	r3, [sp, #164]	; 0xa4
   13c68:	tst	r3, #1
   13c6c:	bne	142e0 <__assert_fail@plt+0x31f0>
   13c70:	ldr	r6, [sp, #28]
   13c74:	sub	r2, fp, #2
   13c78:	mov	r7, r6
   13c7c:	clz	r2, r2
   13c80:	lsr	r2, r2, #5
   13c84:	b	1346c <__assert_fail@plt+0x237c>
   13c88:	sub	r2, fp, #2
   13c8c:	clz	r2, r2
   13c90:	lsr	r2, r2, #5
   13c94:	b	13458 <__assert_fail@plt+0x2368>
   13c98:	sub	r2, fp, #2
   13c9c:	mov	r6, #0
   13ca0:	clz	r2, r2
   13ca4:	lsr	r2, r2, #5
   13ca8:	b	13460 <__assert_fail@plt+0x2370>
   13cac:	sub	r2, fp, #2
   13cb0:	clz	r2, r2
   13cb4:	lsr	r2, r2, #5
   13cb8:	b	13460 <__assert_fail@plt+0x2370>
   13cbc:	sub	r2, fp, #2
   13cc0:	mov	r3, #102	; 0x66
   13cc4:	clz	r2, r2
   13cc8:	lsr	r2, r2, #5
   13ccc:	b	13644 <__assert_fail@plt+0x2554>
   13cd0:	sub	r2, fp, #2
   13cd4:	mov	r3, #118	; 0x76
   13cd8:	clz	r2, r2
   13cdc:	lsr	r2, r2, #5
   13ce0:	b	13644 <__assert_fail@plt+0x2554>
   13ce4:	andeq	r7, r2, r8, lsl #30
   13ce8:			; <UNDEFINED> instruction: 0x000172b0
   13cec:	muleq	r1, r8, r2
   13cf0:	andeq	r7, r1, ip, lsr #5
   13cf4:	ldr	r3, [sp, #48]	; 0x30
   13cf8:	ldrb	r5, [r3]
   13cfc:	cmp	r5, #126	; 0x7e
   13d00:	ldrls	pc, [pc, r5, lsl #2]
   13d04:	b	13970 <__assert_fail@plt+0x2880>
   13d08:	andeq	r3, r1, r0, asr r8
   13d0c:	andeq	r3, r1, r0, ror r9
   13d10:	andeq	r3, r1, r0, ror r9
   13d14:	andeq	r3, r1, r0, ror r9
   13d18:	andeq	r3, r1, r0, ror r9
   13d1c:	andeq	r3, r1, r0, ror r9
   13d20:	andeq	r3, r1, r0, ror r9
   13d24:	andeq	r3, r1, r8, asr #30
   13d28:	andeq	r3, r1, r0, asr #30
   13d2c:	andeq	r3, r1, ip, lsl r8
   13d30:	andeq	r3, r1, r4, ror #15
   13d34:	andeq	r3, r1, ip, lsr r8
   13d38:	andeq	r3, r1, r4, lsr #16
   13d3c:	andeq	r3, r1, r4, lsr pc
   13d40:	andeq	r3, r1, r0, ror r9
   13d44:	andeq	r3, r1, r0, ror r9
   13d48:	andeq	r3, r1, r0, ror r9
   13d4c:	andeq	r3, r1, r0, ror r9
   13d50:	andeq	r3, r1, r0, ror r9
   13d54:	andeq	r3, r1, r0, ror r9
   13d58:	andeq	r3, r1, r0, ror r9
   13d5c:	andeq	r3, r1, r0, ror r9
   13d60:	andeq	r3, r1, r0, ror r9
   13d64:	andeq	r3, r1, r0, ror r9
   13d68:	andeq	r3, r1, r0, ror r9
   13d6c:	andeq	r3, r1, r0, ror r9
   13d70:	andeq	r3, r1, r0, ror r9
   13d74:	andeq	r3, r1, r0, ror r9
   13d78:	andeq	r3, r1, r0, ror r9
   13d7c:	andeq	r3, r1, r0, ror r9
   13d80:	andeq	r3, r1, r0, ror r9
   13d84:	andeq	r3, r1, r0, ror r9
   13d88:	andeq	r3, r1, ip, lsr #30
   13d8c:	andeq	r3, r1, r4, asr #16
   13d90:	andeq	r3, r1, r4, asr #16
   13d94:	andeq	r3, r1, r0, lsl pc
   13d98:	andeq	r3, r1, r4, asr #16
   13d9c:	andeq	r3, r1, r4, lsl #30
   13da0:	andeq	r3, r1, r4, asr #16
   13da4:	andeq	r3, r1, r4, lsl #13
   13da8:	andeq	r3, r1, r4, asr #16
   13dac:	andeq	r3, r1, r4, asr #16
   13db0:	andeq	r3, r1, r4, asr #16
   13db4:	andeq	r3, r1, r4, lsl #30
   13db8:	andeq	r3, r1, r4, lsl #30
   13dbc:	andeq	r3, r1, r4, lsl #30
   13dc0:	andeq	r3, r1, r4, lsl #30
   13dc4:	andeq	r3, r1, r4, lsl #30
   13dc8:	andeq	r3, r1, r4, lsl #30
   13dcc:	andeq	r3, r1, r4, lsl #30
   13dd0:	andeq	r3, r1, r4, lsl #30
   13dd4:	andeq	r3, r1, r4, lsl #30
   13dd8:	andeq	r3, r1, r4, lsl #30
   13ddc:	andeq	r3, r1, r4, lsl #30
   13de0:	andeq	r3, r1, r4, lsl #30
   13de4:	andeq	r3, r1, r4, lsl #30
   13de8:	andeq	r3, r1, r4, lsl #30
   13dec:	andeq	r3, r1, r4, lsl #30
   13df0:	andeq	r3, r1, r4, lsl #30
   13df4:	andeq	r3, r1, r4, asr #16
   13df8:	andeq	r3, r1, r4, asr #16
   13dfc:	andeq	r3, r1, r4, asr #16
   13e00:	andeq	r3, r1, r4, asr #16
   13e04:	andeq	r3, r1, r8, asr r6
   13e08:	andeq	r3, r1, r0, ror r9
   13e0c:	andeq	r3, r1, r4, lsl #30
   13e10:	andeq	r3, r1, r4, lsl #30
   13e14:	andeq	r3, r1, r4, lsl #30
   13e18:	andeq	r3, r1, r4, lsl #30
   13e1c:	andeq	r3, r1, r4, lsl #30
   13e20:	andeq	r3, r1, r4, lsl #30
   13e24:	andeq	r3, r1, r4, lsl #30
   13e28:	andeq	r3, r1, r4, lsl #30
   13e2c:	andeq	r3, r1, r4, lsl #30
   13e30:	andeq	r3, r1, r4, lsl #30
   13e34:	andeq	r3, r1, r4, lsl #30
   13e38:	andeq	r3, r1, r4, lsl #30
   13e3c:	andeq	r3, r1, r4, lsl #30
   13e40:	andeq	r3, r1, r4, lsl #30
   13e44:	andeq	r3, r1, r4, lsl #30
   13e48:	andeq	r3, r1, r4, lsl #30
   13e4c:	andeq	r3, r1, r4, lsl #30
   13e50:	andeq	r3, r1, r4, lsl #30
   13e54:	andeq	r3, r1, r4, lsl #30
   13e58:	andeq	r3, r1, r4, lsl #30
   13e5c:	andeq	r3, r1, r4, lsl #30
   13e60:	andeq	r3, r1, r4, lsl #30
   13e64:	andeq	r3, r1, r4, lsl #30
   13e68:	andeq	r3, r1, r4, lsl #30
   13e6c:	andeq	r3, r1, r4, lsl #30
   13e70:	andeq	r3, r1, r4, lsl #30
   13e74:	andeq	r3, r1, r4, asr #16
   13e78:	andeq	r3, r1, r0, lsl r6
   13e7c:	andeq	r3, r1, r4, lsl #30
   13e80:	andeq	r3, r1, r4, asr #16
   13e84:	andeq	r3, r1, r4, lsl #30
   13e88:	andeq	r3, r1, r4, asr #16
   13e8c:	andeq	r3, r1, r4, lsl #30
   13e90:	andeq	r3, r1, r4, lsl #30
   13e94:	andeq	r3, r1, r4, lsl #30
   13e98:	andeq	r3, r1, r4, lsl #30
   13e9c:	andeq	r3, r1, r4, lsl #30
   13ea0:	andeq	r3, r1, r4, lsl #30
   13ea4:	andeq	r3, r1, r4, lsl #30
   13ea8:	andeq	r3, r1, r4, lsl #30
   13eac:	andeq	r3, r1, r4, lsl #30
   13eb0:	andeq	r3, r1, r4, lsl #30
   13eb4:	andeq	r3, r1, r4, lsl #30
   13eb8:	andeq	r3, r1, r4, lsl #30
   13ebc:	andeq	r3, r1, r4, lsl #30
   13ec0:	andeq	r3, r1, r4, lsl #30
   13ec4:	andeq	r3, r1, r4, lsl #30
   13ec8:	andeq	r3, r1, r4, lsl #30
   13ecc:	andeq	r3, r1, r4, lsl #30
   13ed0:	andeq	r3, r1, r4, lsl #30
   13ed4:	andeq	r3, r1, r4, lsl #30
   13ed8:	andeq	r3, r1, r4, lsl #30
   13edc:	andeq	r3, r1, r4, lsl #30
   13ee0:	andeq	r3, r1, r4, lsl #30
   13ee4:	andeq	r3, r1, r4, lsl #30
   13ee8:	andeq	r3, r1, r4, lsl #30
   13eec:	andeq	r3, r1, r4, lsl #30
   13ef0:	andeq	r3, r1, r4, lsl #30
   13ef4:	andeq	r3, r1, r8, lsr #8
   13ef8:	andeq	r3, r1, r4, asr #16
   13efc:	andeq	r3, r1, r8, lsr #8
   13f00:	andeq	r3, r1, r0, lsl pc
   13f04:	mov	r6, r7
   13f08:	mov	r7, #0
   13f0c:	b	13488 <__assert_fail@plt+0x2398>
   13f10:	cmp	r9, #0
   13f14:	mov	r3, #0
   13f18:	beq	13958 <__assert_fail@plt+0x2868>
   13f1c:	mov	r6, #0
   13f20:	mov	r7, r3
   13f24:	mov	r3, r6
   13f28:	b	1348c <__assert_fail@plt+0x239c>
   13f2c:	mov	r3, #0
   13f30:	b	13938 <__assert_fail@plt+0x2848>
   13f34:	mov	r7, #0
   13f38:	mov	r3, #114	; 0x72
   13f3c:	b	13758 <__assert_fail@plt+0x2668>
   13f40:	mov	r5, #98	; 0x62
   13f44:	b	137e8 <__assert_fail@plt+0x26f8>
   13f48:	mov	r5, #97	; 0x61
   13f4c:	b	13828 <__assert_fail@plt+0x2738>
   13f50:	ldr	r3, [sp, #32]
   13f54:	cmp	r3, #0
   13f58:	bne	143a0 <__assert_fail@plt+0x32b0>
   13f5c:	add	r9, r9, #1
   13f60:	ldr	r3, [sp, #44]	; 0x2c
   13f64:	mov	r6, #0
   13f68:	mov	r5, #92	; 0x5c
   13f6c:	b	13720 <__assert_fail@plt+0x2630>
   13f70:	ldr	r3, [sp, #36]	; 0x24
   13f74:	ldrb	r3, [r3, #1]
   13f78:	adds	r3, r3, #0
   13f7c:	movne	r3, #1
   13f80:	b	13444 <__assert_fail@plt+0x2354>
   13f84:	ldr	r3, [sp, #164]	; 0xa4
   13f88:	ands	r3, r3, #4
   13f8c:	beq	13fb0 <__assert_fail@plt+0x2ec0>
   13f90:	ldr	r2, [sp, #24]
   13f94:	add	r3, r9, #2
   13f98:	cmp	r3, r2
   13f9c:	bcs	13fb0 <__assert_fail@plt+0x2ec0>
   13fa0:	ldr	r2, [sp, #48]	; 0x30
   13fa4:	ldrb	r5, [r2, #1]
   13fa8:	cmp	r5, #63	; 0x3f
   13fac:	beq	14414 <__assert_fail@plt+0x3324>
   13fb0:	mov	r2, #0
   13fb4:	mov	r6, r2
   13fb8:	mov	r5, #63	; 0x3f
   13fbc:	b	1346c <__assert_fail@plt+0x237c>
   13fc0:	ldr	r3, [sp, #32]
   13fc4:	cmp	r3, #0
   13fc8:	bne	143a0 <__assert_fail@plt+0x32b0>
   13fcc:	mov	r6, r3
   13fd0:	mov	r5, #63	; 0x3f
   13fd4:	b	134b4 <__assert_fail@plt+0x23c4>
   13fd8:	ldr	r3, [sp, #24]
   13fdc:	cmn	r3, #1
   13fe0:	mov	r3, #0
   13fe4:	str	r3, [sp, #108]	; 0x6c
   13fe8:	str	r3, [sp, #112]	; 0x70
   13fec:	bne	13ffc <__assert_fail@plt+0x2f0c>
   13ff0:	ldr	r0, [sp, #36]	; 0x24
   13ff4:	bl	1100c <strlen@plt>
   13ff8:	str	r0, [sp, #24]
   13ffc:	mov	r3, #0
   14000:	str	sl, [sp, #88]	; 0x58
   14004:	ldr	sl, [sp, #36]	; 0x24
   14008:	str	r5, [sp, #92]	; 0x5c
   1400c:	mov	r5, r3
   14010:	str	r7, [sp, #96]	; 0x60
   14014:	str	r4, [sp, #100]	; 0x64
   14018:	str	r8, [sp, #84]	; 0x54
   1401c:	ldr	r3, [sp, #24]
   14020:	add	r4, r9, r5
   14024:	add	r7, sl, r4
   14028:	sub	r2, r3, r4
   1402c:	mov	r1, r7
   14030:	add	r3, sp, #108	; 0x6c
   14034:	add	r0, sp, #104	; 0x68
   14038:	bl	16088 <__assert_fail@plt+0x4f98>
   1403c:	subs	r8, r0, #0
   14040:	beq	14090 <__assert_fail@plt+0x2fa0>
   14044:	cmn	r8, #1
   14048:	beq	143f0 <__assert_fail@plt+0x3300>
   1404c:	cmn	r8, #2
   14050:	beq	14510 <__assert_fail@plt+0x3420>
   14054:	ldr	r3, [sp, #32]
   14058:	cmp	fp, #2
   1405c:	movne	r3, #0
   14060:	andeq	r3, r3, #1
   14064:	cmp	r3, #0
   14068:	bne	141f0 <__assert_fail@plt+0x3100>
   1406c:	ldr	r0, [sp, #104]	; 0x68
   14070:	bl	10f1c <iswprint@plt>
   14074:	add	r5, r5, r8
   14078:	cmp	r0, #0
   1407c:	add	r0, sp, #108	; 0x6c
   14080:	moveq	r6, #0
   14084:	bl	10ebc <mbsinit@plt>
   14088:	cmp	r0, #0
   1408c:	beq	1401c <__assert_fail@plt+0x2f2c>
   14090:	ldr	r3, [sp, #28]
   14094:	mov	ip, r5
   14098:	eor	r2, r6, #1
   1409c:	ldr	r5, [sp, #92]	; 0x5c
   140a0:	ldr	r7, [sp, #96]	; 0x60
   140a4:	ldr	r4, [sp, #100]	; 0x64
   140a8:	ldr	r8, [sp, #84]	; 0x54
   140ac:	ldr	sl, [sp, #88]	; 0x58
   140b0:	and	r2, r2, r3
   140b4:	cmp	ip, #1
   140b8:	bls	139b8 <__assert_fail@plt+0x28c8>
   140bc:	add	r1, ip, r9
   140c0:	ldr	lr, [sp, #48]	; 0x30
   140c4:	mov	r0, #0
   140c8:	str	r6, [sp, #48]	; 0x30
   140cc:	mov	ip, #39	; 0x27
   140d0:	ldr	r6, [sp, #44]	; 0x2c
   140d4:	b	1418c <__assert_fail@plt+0x309c>
   140d8:	ldr	r0, [sp, #32]
   140dc:	sub	r3, fp, #2
   140e0:	cmp	r0, #0
   140e4:	clz	r3, r3
   140e8:	lsr	r3, r3, #5
   140ec:	bne	142f4 <__assert_fail@plt+0x3204>
   140f0:	eor	r0, r6, #1
   140f4:	ands	r3, r3, r0
   140f8:	beq	14128 <__assert_fail@plt+0x3038>
   140fc:	add	r0, r4, #1
   14100:	cmp	sl, r4
   14104:	strbhi	ip, [r8, r4]
   14108:	cmp	sl, r0
   1410c:	movhi	r6, #36	; 0x24
   14110:	strbhi	r6, [r8, r0]
   14114:	add	r0, r4, #2
   14118:	mov	r6, r3
   1411c:	add	r4, r4, #3
   14120:	cmp	sl, r0
   14124:	strbhi	ip, [r8, r0]
   14128:	cmp	sl, r4
   1412c:	movhi	r3, #92	; 0x5c
   14130:	strbhi	r3, [r8, r4]
   14134:	add	r3, r4, #1
   14138:	cmp	sl, r3
   1413c:	lsrhi	r0, r5, #6
   14140:	addhi	r0, r0, #48	; 0x30
   14144:	strbhi	r0, [r8, r3]
   14148:	add	r0, r4, #2
   1414c:	cmp	sl, r0
   14150:	lsrhi	r3, r5, #3
   14154:	andhi	r3, r3, #7
   14158:	addhi	r3, r3, #48	; 0x30
   1415c:	add	r9, r9, #1
   14160:	strbhi	r3, [r8, r0]
   14164:	and	r5, r5, #7
   14168:	cmp	r9, r1
   1416c:	add	r5, r5, #48	; 0x30
   14170:	add	r4, r4, #3
   14174:	bcs	14314 <__assert_fail@plt+0x3224>
   14178:	mov	r0, r2
   1417c:	cmp	sl, r4
   14180:	strbhi	r5, [r8, r4]
   14184:	ldrb	r5, [lr, #1]!
   14188:	add	r4, r4, #1
   1418c:	cmp	r2, #0
   14190:	bne	140d8 <__assert_fail@plt+0x2fe8>
   14194:	eor	r3, r0, #1
   14198:	and	r3, r3, r6
   1419c:	cmp	r7, #0
   141a0:	uxtb	r3, r3
   141a4:	beq	141b8 <__assert_fail@plt+0x30c8>
   141a8:	cmp	sl, r4
   141ac:	movhi	r7, #92	; 0x5c
   141b0:	strbhi	r7, [r8, r4]
   141b4:	add	r4, r4, #1
   141b8:	add	r9, r9, #1
   141bc:	cmp	r9, r1
   141c0:	bcs	14308 <__assert_fail@plt+0x3218>
   141c4:	cmp	r3, #0
   141c8:	beq	14334 <__assert_fail@plt+0x3244>
   141cc:	cmp	sl, r4
   141d0:	add	r3, r4, #1
   141d4:	strbhi	ip, [r8, r4]
   141d8:	mov	r7, #0
   141dc:	cmp	sl, r3
   141e0:	strbhi	ip, [r8, r3]
   141e4:	add	r4, r4, #2
   141e8:	mov	r6, r7
   141ec:	b	1417c <__assert_fail@plt+0x308c>
   141f0:	cmp	r8, #1
   141f4:	beq	1406c <__assert_fail@plt+0x2f7c>
   141f8:	add	r1, r4, #1
   141fc:	add	r3, sl, r8
   14200:	add	r1, sl, r1
   14204:	add	r4, r3, r4
   14208:	ldrb	r3, [r1], #1
   1420c:	sub	r3, r3, #91	; 0x5b
   14210:	cmp	r3, #33	; 0x21
   14214:	ldrls	pc, [pc, r3, lsl #2]
   14218:	b	142a4 <__assert_fail@plt+0x31b4>
   1421c:			; <UNDEFINED> instruction: 0x000142b0
   14220:			; <UNDEFINED> instruction: 0x000142b0
   14224:	andeq	r4, r1, r4, lsr #5
   14228:			; <UNDEFINED> instruction: 0x000142b0
   1422c:	andeq	r4, r1, r4, lsr #5
   14230:			; <UNDEFINED> instruction: 0x000142b0
   14234:	andeq	r4, r1, r4, lsr #5
   14238:	andeq	r4, r1, r4, lsr #5
   1423c:	andeq	r4, r1, r4, lsr #5
   14240:	andeq	r4, r1, r4, lsr #5
   14244:	andeq	r4, r1, r4, lsr #5
   14248:	andeq	r4, r1, r4, lsr #5
   1424c:	andeq	r4, r1, r4, lsr #5
   14250:	andeq	r4, r1, r4, lsr #5
   14254:	andeq	r4, r1, r4, lsr #5
   14258:	andeq	r4, r1, r4, lsr #5
   1425c:	andeq	r4, r1, r4, lsr #5
   14260:	andeq	r4, r1, r4, lsr #5
   14264:	andeq	r4, r1, r4, lsr #5
   14268:	andeq	r4, r1, r4, lsr #5
   1426c:	andeq	r4, r1, r4, lsr #5
   14270:	andeq	r4, r1, r4, lsr #5
   14274:	andeq	r4, r1, r4, lsr #5
   14278:	andeq	r4, r1, r4, lsr #5
   1427c:	andeq	r4, r1, r4, lsr #5
   14280:	andeq	r4, r1, r4, lsr #5
   14284:	andeq	r4, r1, r4, lsr #5
   14288:	andeq	r4, r1, r4, lsr #5
   1428c:	andeq	r4, r1, r4, lsr #5
   14290:	andeq	r4, r1, r4, lsr #5
   14294:	andeq	r4, r1, r4, lsr #5
   14298:	andeq	r4, r1, r4, lsr #5
   1429c:	andeq	r4, r1, r4, lsr #5
   142a0:			; <UNDEFINED> instruction: 0x000142b0
   142a4:	cmp	r4, r1
   142a8:	bne	14208 <__assert_fail@plt+0x3118>
   142ac:	b	1406c <__assert_fail@plt+0x2f7c>
   142b0:	ldr	fp, [sp, #84]	; 0x54
   142b4:	ldr	sl, [sp, #88]	; 0x58
   142b8:	mov	r8, #2
   142bc:	b	13778 <__assert_fail@plt+0x2688>
   142c0:	cmp	sl, r4
   142c4:	movls	r1, r4
   142c8:	bls	138c8 <__assert_fail@plt+0x27d8>
   142cc:	ldr	r3, [sp, #44]	; 0x2c
   142d0:	b	138b8 <__assert_fail@plt+0x27c8>
   142d4:	str	sl, [sp, #72]	; 0x48
   142d8:	ldr	sl, [sp, #32]
   142dc:	b	136f0 <__assert_fail@plt+0x2600>
   142e0:	add	r9, r9, #1
   142e4:	b	12fe4 <__assert_fail@plt+0x1ef4>
   142e8:	ldr	r2, [sp, #28]
   142ec:	mov	r6, #0
   142f0:	b	140bc <__assert_fail@plt+0x2fcc>
   142f4:	str	fp, [sp, #160]	; 0xa0
   142f8:	str	r3, [sp, #28]
   142fc:	mov	fp, r8
   14300:	ldr	r8, [sp, #160]	; 0xa0
   14304:	b	13778 <__assert_fail@plt+0x2688>
   14308:	str	r6, [sp, #44]	; 0x2c
   1430c:	ldr	r6, [sp, #48]	; 0x30
   14310:	b	13720 <__assert_fail@plt+0x2630>
   14314:	str	r6, [sp, #44]	; 0x2c
   14318:	ldr	r6, [sp, #48]	; 0x30
   1431c:	b	1352c <__assert_fail@plt+0x243c>
   14320:	add	r4, r4, #4
   14324:	str	r3, [sp, #44]	; 0x2c
   14328:	mov	r6, #0
   1432c:	mov	r5, #48	; 0x30
   14330:	b	134b4 <__assert_fail@plt+0x23c4>
   14334:	mov	r7, r3
   14338:	b	1417c <__assert_fail@plt+0x308c>
   1433c:	ldr	r3, [pc, #-1624]	; 13cec <__assert_fail@plt+0x2bfc>
   14340:	mov	r4, #1
   14344:	str	r4, [sp, #40]	; 0x28
   14348:	str	r4, [sp, #28]
   1434c:	str	r4, [sp, #52]	; 0x34
   14350:	str	sl, [sp, #72]	; 0x48
   14354:	str	sl, [sp, #68]	; 0x44
   14358:	str	sl, [sp, #44]	; 0x2c
   1435c:	str	sl, [sp, #32]
   14360:	str	r3, [sp, #60]	; 0x3c
   14364:	b	12fd4 <__assert_fail@plt+0x1ee4>
   14368:	mov	r3, r6
   1436c:	mov	r5, #48	; 0x30
   14370:	mov	r6, #0
   14374:	b	134b4 <__assert_fail@plt+0x23c4>
   14378:	cmp	sl, r4
   1437c:	movhi	r3, #48	; 0x30
   14380:	strbhi	r3, [r8, r4]
   14384:	add	r3, r1, #2
   14388:	cmp	sl, r3
   1438c:	movhi	r0, #48	; 0x30
   14390:	strbhi	r0, [r8, r3]
   14394:	add	r4, r1, #3
   14398:	mov	r5, #48	; 0x30
   1439c:	b	138fc <__assert_fail@plt+0x280c>
   143a0:	str	fp, [sp, #160]	; 0xa0
   143a4:	mov	fp, r8
   143a8:	ldr	r8, [sp, #160]	; 0xa0
   143ac:	b	13778 <__assert_fail@plt+0x2688>
   143b0:	ldr	r2, [sp, #80]	; 0x50
   143b4:	ldrb	r3, [r2]
   143b8:	cmp	r3, #0
   143bc:	beq	12fa4 <__assert_fail@plt+0x1eb4>
   143c0:	cmp	sl, r4
   143c4:	strbhi	r3, [fp, r4]
   143c8:	ldrb	r3, [r2, #1]!
   143cc:	add	r4, r4, #1
   143d0:	cmp	r3, #0
   143d4:	bne	143c0 <__assert_fail@plt+0x32d0>
   143d8:	b	12fa4 <__assert_fail@plt+0x1eb4>
   143dc:	str	fp, [sp, #160]	; 0xa0
   143e0:	mov	r3, #0
   143e4:	mov	fp, r8
   143e8:	ldr	r8, [sp, #160]	; 0xa0
   143ec:	b	1380c <__assert_fail@plt+0x271c>
   143f0:	mov	ip, r5
   143f4:	ldr	r7, [sp, #96]	; 0x60
   143f8:	ldr	r5, [sp, #92]	; 0x5c
   143fc:	ldr	r4, [sp, #100]	; 0x64
   14400:	ldr	r8, [sp, #84]	; 0x54
   14404:	ldr	sl, [sp, #88]	; 0x58
   14408:	ldr	r2, [sp, #28]
   1440c:	mov	r6, #0
   14410:	b	140b4 <__assert_fail@plt+0x2fc4>
   14414:	ldr	r2, [sp, #36]	; 0x24
   14418:	ldrb	r1, [r2, r3]
   1441c:	sub	r2, r1, #33	; 0x21
   14420:	cmp	r2, #29
   14424:	ldrls	pc, [pc, r2, lsl #2]
   14428:	b	14504 <__assert_fail@plt+0x3414>
   1442c:	andeq	r4, r1, r4, lsr #9
   14430:	andeq	r4, r1, r4, lsl #10
   14434:	andeq	r4, r1, r4, lsl #10
   14438:	andeq	r4, r1, r4, lsl #10
   1443c:	andeq	r4, r1, r4, lsl #10
   14440:	andeq	r4, r1, r4, lsl #10
   14444:	andeq	r4, r1, r4, lsr #9
   14448:	andeq	r4, r1, r4, lsr #9
   1444c:	andeq	r4, r1, r4, lsr #9
   14450:	andeq	r4, r1, r4, lsl #10
   14454:	andeq	r4, r1, r4, lsl #10
   14458:	andeq	r4, r1, r4, lsl #10
   1445c:	andeq	r4, r1, r4, lsr #9
   14460:	andeq	r4, r1, r4, lsl #10
   14464:	andeq	r4, r1, r4, lsr #9
   14468:	andeq	r4, r1, r4, lsl #10
   1446c:	andeq	r4, r1, r4, lsl #10
   14470:	andeq	r4, r1, r4, lsl #10
   14474:	andeq	r4, r1, r4, lsl #10
   14478:	andeq	r4, r1, r4, lsl #10
   1447c:	andeq	r4, r1, r4, lsl #10
   14480:	andeq	r4, r1, r4, lsl #10
   14484:	andeq	r4, r1, r4, lsl #10
   14488:	andeq	r4, r1, r4, lsl #10
   1448c:	andeq	r4, r1, r4, lsl #10
   14490:	andeq	r4, r1, r4, lsl #10
   14494:	andeq	r4, r1, r4, lsl #10
   14498:	andeq	r4, r1, r4, lsr #9
   1449c:	andeq	r4, r1, r4, lsr #9
   144a0:	andeq	r4, r1, r4, lsr #9
   144a4:	ldr	r2, [sp, #32]
   144a8:	cmp	r2, #0
   144ac:	bne	145b0 <__assert_fail@plt+0x34c0>
   144b0:	cmp	sl, r4
   144b4:	movhi	r2, #63	; 0x3f
   144b8:	strbhi	r2, [r8, r4]
   144bc:	add	r2, r4, #1
   144c0:	cmp	sl, r2
   144c4:	movhi	r0, #34	; 0x22
   144c8:	strbhi	r0, [r8, r2]
   144cc:	add	r2, r4, #2
   144d0:	cmp	sl, r2
   144d4:	movhi	r0, #34	; 0x22
   144d8:	strbhi	r0, [r8, r2]
   144dc:	add	r2, r4, #3
   144e0:	cmp	sl, r2
   144e4:	movhi	r0, #63	; 0x3f
   144e8:	strbhi	r0, [r8, r2]
   144ec:	mov	r2, #0
   144f0:	add	r4, r4, #4
   144f4:	mov	r5, r1
   144f8:	mov	r9, r3
   144fc:	mov	r6, r2
   14500:	b	138fc <__assert_fail@plt+0x280c>
   14504:	mov	r2, #0
   14508:	mov	r6, r2
   1450c:	b	1346c <__assert_fail@plt+0x237c>
   14510:	ldr	r0, [sp, #24]
   14514:	mov	r1, r4
   14518:	cmp	r1, r0
   1451c:	mov	r2, r7
   14520:	mov	r3, r5
   14524:	mov	ip, r5
   14528:	ldr	r7, [sp, #96]	; 0x60
   1452c:	ldr	r5, [sp, #92]	; 0x5c
   14530:	ldr	r4, [sp, #100]	; 0x64
   14534:	ldr	r8, [sp, #84]	; 0x54
   14538:	ldr	sl, [sp, #88]	; 0x58
   1453c:	bcs	14570 <__assert_fail@plt+0x3480>
   14540:	ldrb	r6, [r2]
   14544:	cmp	r6, #0
   14548:	bne	1455c <__assert_fail@plt+0x346c>
   1454c:	b	1468c <__assert_fail@plt+0x359c>
   14550:	ldrb	r6, [r2, #1]!
   14554:	cmp	r6, #0
   14558:	beq	14614 <__assert_fail@plt+0x3524>
   1455c:	add	r3, r3, #1
   14560:	add	r1, r9, r3
   14564:	cmp	r1, r0
   14568:	bcc	14550 <__assert_fail@plt+0x3460>
   1456c:	mov	ip, r3
   14570:	ldr	r2, [sp, #28]
   14574:	mov	r6, #0
   14578:	b	140b4 <__assert_fail@plt+0x2fc4>
   1457c:	mov	r3, #1
   14580:	str	r3, [sp, #40]	; 0x28
   14584:	str	r3, [sp, #32]
   14588:	str	r3, [sp, #28]
   1458c:	str	r3, [sp, #52]	; 0x34
   14590:	ldr	r3, [pc, #-2220]	; 13cec <__assert_fail@plt+0x2bfc>
   14594:	mov	r2, #0
   14598:	str	r2, [sp, #68]	; 0x44
   1459c:	str	r2, [sp, #44]	; 0x2c
   145a0:	str	r2, [sp, #72]	; 0x48
   145a4:	mov	r4, r2
   145a8:	str	r3, [sp, #60]	; 0x3c
   145ac:	b	12fd4 <__assert_fail@plt+0x1ee4>
   145b0:	str	fp, [sp, #160]	; 0xa0
   145b4:	mov	fp, r8
   145b8:	ldr	r8, [sp, #160]	; 0xa0
   145bc:	b	13784 <__assert_fail@plt+0x2694>
   145c0:	mov	r2, r3
   145c4:	ldr	r3, [sp, #60]	; 0x3c
   145c8:	cmp	r3, #0
   145cc:	moveq	r2, #0
   145d0:	andne	r2, r2, #1
   145d4:	cmp	r2, #0
   145d8:	beq	14604 <__assert_fail@plt+0x3514>
   145dc:	mov	r2, r3
   145e0:	ldrb	r3, [r3]
   145e4:	cmp	r3, #0
   145e8:	beq	14604 <__assert_fail@plt+0x3514>
   145ec:	cmp	sl, r4
   145f0:	strbhi	r3, [fp, r4]
   145f4:	ldrb	r3, [r2, #1]!
   145f8:	add	r4, r4, #1
   145fc:	cmp	r3, #0
   14600:	bne	145ec <__assert_fail@plt+0x34fc>
   14604:	cmp	sl, r4
   14608:	movhi	r3, #0
   1460c:	strbhi	r3, [fp, r4]
   14610:	b	137c4 <__assert_fail@plt+0x26d4>
   14614:	mov	ip, r3
   14618:	ldr	r2, [sp, #28]
   1461c:	b	140b4 <__assert_fail@plt+0x2fc4>
   14620:	str	fp, [sp, #160]	; 0xa0
   14624:	mov	fp, r8
   14628:	ldr	r8, [sp, #160]	; 0xa0
   1462c:	sub	r3, r8, #2
   14630:	clz	r3, r3
   14634:	lsr	r3, r3, #5
   14638:	str	r3, [sp, #28]
   1463c:	b	13778 <__assert_fail@plt+0x2688>
   14640:	ldr	r3, [sp, #76]	; 0x4c
   14644:	mov	ip, #5
   14648:	str	r3, [sp, #16]
   1464c:	ldr	r3, [sp, #80]	; 0x50
   14650:	ldr	r2, [sp, #36]	; 0x24
   14654:	str	r3, [sp, #12]
   14658:	ldr	r3, [sp, #56]	; 0x38
   1465c:	ldr	r1, [sp, #72]	; 0x48
   14660:	str	r3, [sp, #8]
   14664:	ldr	r3, [sp, #164]	; 0xa4
   14668:	mov	r0, fp
   1466c:	str	r3, [sp, #4]
   14670:	str	ip, [sp]
   14674:	ldr	r3, [sp, #24]
   14678:	bl	12edc <__assert_fail@plt+0x1dec>
   1467c:	mov	r4, r0
   14680:	b	137c4 <__assert_fail@plt+0x26d4>
   14684:	mov	r8, #2
   14688:	b	13778 <__assert_fail@plt+0x2688>
   1468c:	ldr	r2, [sp, #28]
   14690:	b	140b4 <__assert_fail@plt+0x2fc4>
   14694:	mov	r3, #0
   14698:	str	r3, [sp, #68]	; 0x44
   1469c:	str	r3, [sp, #44]	; 0x2c
   146a0:	str	r3, [sp, #72]	; 0x48
   146a4:	str	r3, [sp, #28]
   146a8:	mov	r4, r3
   146ac:	ldr	r3, [pc, #-2500]	; 13cf0 <__assert_fail@plt+0x2c00>
   146b0:	mov	r2, #1
   146b4:	str	r2, [sp, #40]	; 0x28
   146b8:	str	r2, [sp, #32]
   146bc:	str	r2, [sp, #52]	; 0x34
   146c0:	str	r3, [sp, #60]	; 0x3c
   146c4:	b	12fd4 <__assert_fail@plt+0x1ee4>
   146c8:	bl	10eec <__stack_chk_fail@plt>
   146cc:	mov	r5, r3
   146d0:	mov	r6, #0
   146d4:	b	134c8 <__assert_fail@plt+0x23d8>
   146d8:	mov	r3, #0
   146dc:	mov	r2, #1
   146e0:	str	r3, [sp, #44]	; 0x2c
   146e4:	str	r3, [sp, #72]	; 0x48
   146e8:	str	r2, [sp, #40]	; 0x28
   146ec:	b	135e4 <__assert_fail@plt+0x24f4>
   146f0:	bl	110d8 <abort@plt>
   146f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146f8:	sub	sp, sp, #44	; 0x2c
   146fc:	mov	r6, r0
   14700:	mov	r4, r3
   14704:	mov	sl, r1
   14708:	mov	fp, r2
   1470c:	bl	11024 <__errno_location@plt>
   14710:	ldr	r7, [pc, #364]	; 14884 <__assert_fail@plt+0x3794>
   14714:	cmp	r6, #0
   14718:	ldr	r5, [r7]
   1471c:	ldr	r3, [r0]
   14720:	str	r3, [sp, #24]
   14724:	blt	14880 <__assert_fail@plt+0x3790>
   14728:	ldr	r3, [r7, #4]
   1472c:	mov	r8, r0
   14730:	cmp	r3, r6
   14734:	bgt	14780 <__assert_fail@plt+0x3690>
   14738:	cmn	r6, #-268435454	; 0xf0000002
   1473c:	bgt	1487c <__assert_fail@plt+0x378c>
   14740:	add	r9, r6, #1
   14744:	add	r3, r7, #8
   14748:	cmp	r5, r3
   1474c:	lsl	r1, r9, #3
   14750:	beq	1485c <__assert_fail@plt+0x376c>
   14754:	mov	r0, r5
   14758:	bl	154e8 <__assert_fail@plt+0x43f8>
   1475c:	mov	r5, r0
   14760:	str	r0, [r7]
   14764:	ldr	r0, [r7, #4]
   14768:	mov	r1, #0
   1476c:	sub	r2, r9, r0
   14770:	add	r0, r5, r0, lsl #3
   14774:	lsl	r2, r2, #3
   14778:	bl	1103c <memset@plt>
   1477c:	str	r9, [r7, #4]
   14780:	add	r3, r5, r6, lsl #3
   14784:	ldr	r1, [r4, #4]
   14788:	ldr	r7, [r3, #4]
   1478c:	ldr	r9, [r5, r6, lsl #3]
   14790:	ldr	r2, [r4, #40]	; 0x28
   14794:	ldr	ip, [r4, #44]	; 0x2c
   14798:	str	r3, [sp, #28]
   1479c:	ldr	r3, [r4]
   147a0:	orr	r1, r1, #1
   147a4:	add	lr, r4, #8
   147a8:	str	r1, [sp, #36]	; 0x24
   147ac:	str	r1, [sp, #4]
   147b0:	str	r2, [sp, #12]
   147b4:	str	r3, [sp]
   147b8:	mov	r0, r7
   147bc:	mov	r1, r9
   147c0:	str	ip, [sp, #16]
   147c4:	str	lr, [sp, #8]
   147c8:	mov	r3, fp
   147cc:	mov	r2, sl
   147d0:	str	lr, [sp, #32]
   147d4:	bl	12edc <__assert_fail@plt+0x1dec>
   147d8:	cmp	r9, r0
   147dc:	bhi	14848 <__assert_fail@plt+0x3758>
   147e0:	ldr	r3, [pc, #160]	; 14888 <__assert_fail@plt+0x3798>
   147e4:	add	r9, r0, #1
   147e8:	cmp	r7, r3
   147ec:	str	r9, [r5, r6, lsl #3]
   147f0:	beq	147fc <__assert_fail@plt+0x370c>
   147f4:	mov	r0, r7
   147f8:	bl	10e98 <free@plt>
   147fc:	mov	r0, r9
   14800:	bl	1548c <__assert_fail@plt+0x439c>
   14804:	ldr	lr, [sp, #28]
   14808:	ldr	ip, [r4, #44]	; 0x2c
   1480c:	ldr	r5, [r4, #40]	; 0x28
   14810:	mov	r3, fp
   14814:	mov	r2, sl
   14818:	mov	r1, r9
   1481c:	str	r0, [lr, #4]
   14820:	ldr	lr, [r4]
   14824:	ldr	r4, [sp, #32]
   14828:	str	ip, [sp, #16]
   1482c:	str	r4, [sp, #8]
   14830:	ldr	r4, [sp, #36]	; 0x24
   14834:	str	r5, [sp, #12]
   14838:	str	r4, [sp, #4]
   1483c:	str	lr, [sp]
   14840:	mov	r7, r0
   14844:	bl	12edc <__assert_fail@plt+0x1dec>
   14848:	ldr	r3, [sp, #24]
   1484c:	mov	r0, r7
   14850:	str	r3, [r8]
   14854:	add	sp, sp, #44	; 0x2c
   14858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1485c:	mov	r0, #0
   14860:	bl	154e8 <__assert_fail@plt+0x43f8>
   14864:	ldr	r3, [pc, #32]	; 1488c <__assert_fail@plt+0x379c>
   14868:	mov	r5, r0
   1486c:	ldm	r3, {r0, r1}
   14870:	str	r5, [r7]
   14874:	stm	r5, {r0, r1}
   14878:	b	14764 <__assert_fail@plt+0x3674>
   1487c:	bl	156d4 <__assert_fail@plt+0x45e4>
   14880:	bl	110d8 <abort@plt>
   14884:	andeq	r8, r2, ip, lsl #2
   14888:	andeq	r8, r2, r4, lsr #3
   1488c:	andeq	r8, r2, r4, lsl r1
   14890:	push	{r4, r5, r6, lr}
   14894:	mov	r5, r0
   14898:	bl	11024 <__errno_location@plt>
   1489c:	cmp	r5, #0
   148a0:	mov	r1, #48	; 0x30
   148a4:	mov	r4, r0
   148a8:	ldr	r0, [pc, #16]	; 148c0 <__assert_fail@plt+0x37d0>
   148ac:	ldr	r6, [r4]
   148b0:	movne	r0, r5
   148b4:	bl	15694 <__assert_fail@plt+0x45a4>
   148b8:	str	r6, [r4]
   148bc:	pop	{r4, r5, r6, pc}
   148c0:	andeq	r8, r2, r4, lsr #5
   148c4:	ldr	r3, [pc, #12]	; 148d8 <__assert_fail@plt+0x37e8>
   148c8:	cmp	r0, #0
   148cc:	moveq	r0, r3
   148d0:	ldr	r0, [r0]
   148d4:	bx	lr
   148d8:	andeq	r8, r2, r4, lsr #5
   148dc:	ldr	r3, [pc, #12]	; 148f0 <__assert_fail@plt+0x3800>
   148e0:	cmp	r0, #0
   148e4:	moveq	r0, r3
   148e8:	str	r1, [r0]
   148ec:	bx	lr
   148f0:	andeq	r8, r2, r4, lsr #5
   148f4:	ldr	r3, [pc, #52]	; 14930 <__assert_fail@plt+0x3840>
   148f8:	cmp	r0, #0
   148fc:	moveq	r0, r3
   14900:	add	r3, r0, #8
   14904:	push	{lr}		; (str lr, [sp, #-4]!)
   14908:	lsr	lr, r1, #5
   1490c:	and	r1, r1, #31
   14910:	ldr	ip, [r3, lr, lsl #2]
   14914:	lsr	r0, ip, r1
   14918:	eor	r2, r2, r0
   1491c:	and	r2, r2, #1
   14920:	and	r0, r0, #1
   14924:	eor	r1, ip, r2, lsl r1
   14928:	str	r1, [r3, lr, lsl #2]
   1492c:	pop	{pc}		; (ldr pc, [sp], #4)
   14930:	andeq	r8, r2, r4, lsr #5
   14934:	ldr	r3, [pc, #16]	; 1494c <__assert_fail@plt+0x385c>
   14938:	cmp	r0, #0
   1493c:	movne	r3, r0
   14940:	ldr	r0, [r3, #4]
   14944:	str	r1, [r3, #4]
   14948:	bx	lr
   1494c:	andeq	r8, r2, r4, lsr #5
   14950:	ldr	r3, [pc, #44]	; 14984 <__assert_fail@plt+0x3894>
   14954:	cmp	r0, #0
   14958:	moveq	r0, r3
   1495c:	mov	ip, #10
   14960:	cmp	r2, #0
   14964:	cmpne	r1, #0
   14968:	str	ip, [r0]
   1496c:	beq	1497c <__assert_fail@plt+0x388c>
   14970:	str	r1, [r0, #40]	; 0x28
   14974:	str	r2, [r0, #44]	; 0x2c
   14978:	bx	lr
   1497c:	push	{r4, lr}
   14980:	bl	110d8 <abort@plt>
   14984:	andeq	r8, r2, r4, lsr #5
   14988:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1498c:	sub	sp, sp, #24
   14990:	ldr	ip, [pc, #108]	; 14a04 <__assert_fail@plt+0x3914>
   14994:	ldr	r4, [sp, #56]	; 0x38
   14998:	mov	r9, r2
   1499c:	cmp	r4, #0
   149a0:	moveq	r4, ip
   149a4:	mov	sl, r3
   149a8:	mov	r7, r0
   149ac:	mov	r8, r1
   149b0:	bl	11024 <__errno_location@plt>
   149b4:	ldr	r3, [r4, #44]	; 0x2c
   149b8:	mov	r1, r8
   149bc:	ldr	r6, [r0]
   149c0:	str	r3, [sp, #16]
   149c4:	ldr	r2, [r4, #40]	; 0x28
   149c8:	add	r3, r4, #8
   149cc:	str	r3, [sp, #8]
   149d0:	str	r2, [sp, #12]
   149d4:	ldr	r2, [r4, #4]
   149d8:	mov	r5, r0
   149dc:	str	r2, [sp, #4]
   149e0:	ldr	ip, [r4]
   149e4:	mov	r3, sl
   149e8:	mov	r2, r9
   149ec:	mov	r0, r7
   149f0:	str	ip, [sp]
   149f4:	bl	12edc <__assert_fail@plt+0x1dec>
   149f8:	str	r6, [r5]
   149fc:	add	sp, sp, #24
   14a00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a04:	andeq	r8, r2, r4, lsr #5
   14a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a0c:	cmp	r3, #0
   14a10:	sub	sp, sp, #44	; 0x2c
   14a14:	ldr	r4, [pc, #192]	; 14adc <__assert_fail@plt+0x39ec>
   14a18:	mov	r6, r2
   14a1c:	movne	r4, r3
   14a20:	mov	r9, r1
   14a24:	mov	r8, r0
   14a28:	bl	11024 <__errno_location@plt>
   14a2c:	ldr	r3, [r4, #44]	; 0x2c
   14a30:	ldr	r5, [r4, #4]
   14a34:	add	sl, r4, #8
   14a38:	cmp	r6, #0
   14a3c:	orreq	r5, r5, #1
   14a40:	mov	r1, #0
   14a44:	ldr	r2, [r0]
   14a48:	str	r3, [sp, #16]
   14a4c:	ldr	r3, [r4, #40]	; 0x28
   14a50:	stmib	sp, {r5, sl}
   14a54:	str	r3, [sp, #12]
   14a58:	ldr	r3, [r4]
   14a5c:	mov	r7, r0
   14a60:	str	r2, [sp, #28]
   14a64:	str	r3, [sp]
   14a68:	mov	r2, r8
   14a6c:	mov	r3, r9
   14a70:	mov	r0, r1
   14a74:	bl	12edc <__assert_fail@plt+0x1dec>
   14a78:	add	r1, r0, #1
   14a7c:	mov	fp, r0
   14a80:	mov	r0, r1
   14a84:	str	r1, [sp, #36]	; 0x24
   14a88:	bl	1548c <__assert_fail@plt+0x439c>
   14a8c:	ldr	r3, [r4, #44]	; 0x2c
   14a90:	mov	r2, r8
   14a94:	str	r3, [sp, #16]
   14a98:	ldr	r3, [r4, #40]	; 0x28
   14a9c:	str	r5, [sp, #4]
   14aa0:	str	r3, [sp, #12]
   14aa4:	str	sl, [sp, #8]
   14aa8:	ldr	ip, [r4]
   14aac:	ldr	r1, [sp, #36]	; 0x24
   14ab0:	mov	r3, r9
   14ab4:	str	ip, [sp]
   14ab8:	str	r0, [sp, #32]
   14abc:	bl	12edc <__assert_fail@plt+0x1dec>
   14ac0:	ldr	r2, [sp, #28]
   14ac4:	cmp	r6, #0
   14ac8:	str	r2, [r7]
   14acc:	ldr	r0, [sp, #32]
   14ad0:	strne	fp, [r6]
   14ad4:	add	sp, sp, #44	; 0x2c
   14ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14adc:	andeq	r8, r2, r4, lsr #5
   14ae0:	mov	r3, r2
   14ae4:	mov	r2, #0
   14ae8:	b	14a08 <__assert_fail@plt+0x3918>
   14aec:	push	{r4, r5, r6, r7, r8, lr}
   14af0:	ldr	r6, [pc, #112]	; 14b68 <__assert_fail@plt+0x3a78>
   14af4:	ldr	r3, [r6, #4]
   14af8:	ldr	r7, [r6]
   14afc:	cmp	r3, #1
   14b00:	ble	14b24 <__assert_fail@plt+0x3a34>
   14b04:	sub	r5, r7, #8
   14b08:	add	r5, r5, r3, lsl #3
   14b0c:	mov	r4, r7
   14b10:	ldr	r0, [r4, #12]
   14b14:	add	r4, r4, #8
   14b18:	bl	10e98 <free@plt>
   14b1c:	cmp	r4, r5
   14b20:	bne	14b10 <__assert_fail@plt+0x3a20>
   14b24:	ldr	r0, [r7, #4]
   14b28:	ldr	r4, [pc, #60]	; 14b6c <__assert_fail@plt+0x3a7c>
   14b2c:	cmp	r0, r4
   14b30:	beq	14b44 <__assert_fail@plt+0x3a54>
   14b34:	bl	10e98 <free@plt>
   14b38:	mov	r3, #256	; 0x100
   14b3c:	str	r4, [r6, #12]
   14b40:	str	r3, [r6, #8]
   14b44:	ldr	r4, [pc, #36]	; 14b70 <__assert_fail@plt+0x3a80>
   14b48:	cmp	r7, r4
   14b4c:	beq	14b5c <__assert_fail@plt+0x3a6c>
   14b50:	mov	r0, r7
   14b54:	bl	10e98 <free@plt>
   14b58:	str	r4, [r6]
   14b5c:	mov	r3, #1
   14b60:	str	r3, [r6, #4]
   14b64:	pop	{r4, r5, r6, r7, r8, pc}
   14b68:	andeq	r8, r2, ip, lsl #2
   14b6c:	andeq	r8, r2, r4, lsr #3
   14b70:	andeq	r8, r2, r4, lsl r1
   14b74:	ldr	r3, [pc, #4]	; 14b80 <__assert_fail@plt+0x3a90>
   14b78:	mvn	r2, #0
   14b7c:	b	146f4 <__assert_fail@plt+0x3604>
   14b80:	andeq	r8, r2, r4, lsr #5
   14b84:	ldr	r3, [pc]	; 14b8c <__assert_fail@plt+0x3a9c>
   14b88:	b	146f4 <__assert_fail@plt+0x3604>
   14b8c:	andeq	r8, r2, r4, lsr #5
   14b90:	mov	r1, r0
   14b94:	ldr	r3, [pc, #8]	; 14ba4 <__assert_fail@plt+0x3ab4>
   14b98:	mvn	r2, #0
   14b9c:	mov	r0, #0
   14ba0:	b	146f4 <__assert_fail@plt+0x3604>
   14ba4:	andeq	r8, r2, r4, lsr #5
   14ba8:	mov	r2, r1
   14bac:	ldr	r3, [pc, #8]	; 14bbc <__assert_fail@plt+0x3acc>
   14bb0:	mov	r1, r0
   14bb4:	mov	r0, #0
   14bb8:	b	146f4 <__assert_fail@plt+0x3604>
   14bbc:	andeq	r8, r2, r4, lsr #5
   14bc0:	push	{r4, r5, r6, lr}
   14bc4:	sub	sp, sp, #56	; 0x38
   14bc8:	ldr	r4, [pc, #68]	; 14c14 <__assert_fail@plt+0x3b24>
   14bcc:	mov	r6, r2
   14bd0:	mov	r5, r0
   14bd4:	ldr	r3, [r4]
   14bd8:	add	r0, sp, #4
   14bdc:	str	r3, [sp, #52]	; 0x34
   14be0:	bl	12d6c <__assert_fail@plt+0x1c7c>
   14be4:	add	r3, sp, #4
   14be8:	mvn	r2, #0
   14bec:	mov	r1, r6
   14bf0:	mov	r0, r5
   14bf4:	bl	146f4 <__assert_fail@plt+0x3604>
   14bf8:	ldr	r2, [sp, #52]	; 0x34
   14bfc:	ldr	r3, [r4]
   14c00:	cmp	r2, r3
   14c04:	bne	14c10 <__assert_fail@plt+0x3b20>
   14c08:	add	sp, sp, #56	; 0x38
   14c0c:	pop	{r4, r5, r6, pc}
   14c10:	bl	10eec <__stack_chk_fail@plt>
   14c14:	andeq	r7, r2, r8, lsl #30
   14c18:	push	{r4, r5, r6, r7, lr}
   14c1c:	sub	sp, sp, #60	; 0x3c
   14c20:	ldr	r4, [pc, #72]	; 14c70 <__assert_fail@plt+0x3b80>
   14c24:	mov	r6, r2
   14c28:	mov	r7, r3
   14c2c:	ldr	ip, [r4]
   14c30:	mov	r5, r0
   14c34:	add	r0, sp, #4
   14c38:	str	ip, [sp, #52]	; 0x34
   14c3c:	bl	12d6c <__assert_fail@plt+0x1c7c>
   14c40:	add	r3, sp, #4
   14c44:	mov	r2, r7
   14c48:	mov	r1, r6
   14c4c:	mov	r0, r5
   14c50:	bl	146f4 <__assert_fail@plt+0x3604>
   14c54:	ldr	r2, [sp, #52]	; 0x34
   14c58:	ldr	r3, [r4]
   14c5c:	cmp	r2, r3
   14c60:	bne	14c6c <__assert_fail@plt+0x3b7c>
   14c64:	add	sp, sp, #60	; 0x3c
   14c68:	pop	{r4, r5, r6, r7, pc}
   14c6c:	bl	10eec <__stack_chk_fail@plt>
   14c70:	andeq	r7, r2, r8, lsl #30
   14c74:	mov	r2, r1
   14c78:	mov	r1, r0
   14c7c:	mov	r0, #0
   14c80:	b	14bc0 <__assert_fail@plt+0x3ad0>
   14c84:	mov	r3, r2
   14c88:	mov	r2, r1
   14c8c:	mov	r1, r0
   14c90:	mov	r0, #0
   14c94:	b	14c18 <__assert_fail@plt+0x3b28>
   14c98:	push	{r4, r5, r6, r7, r8, r9, lr}
   14c9c:	mov	r4, r2
   14ca0:	ldr	lr, [pc, #128]	; 14d28 <__assert_fail@plt+0x3c38>
   14ca4:	mov	r8, r0
   14ca8:	mov	r9, r1
   14cac:	ldm	lr!, {r0, r1, r2, r3}
   14cb0:	sub	sp, sp, #60	; 0x3c
   14cb4:	add	ip, sp, #4
   14cb8:	lsr	r6, r4, #5
   14cbc:	stmia	ip!, {r0, r1, r2, r3}
   14cc0:	add	r7, sp, #12
   14cc4:	ldm	lr!, {r0, r1, r2, r3}
   14cc8:	and	r4, r4, #31
   14ccc:	ldr	r5, [pc, #88]	; 14d2c <__assert_fail@plt+0x3c3c>
   14cd0:	stmia	ip!, {r0, r1, r2, r3}
   14cd4:	ldm	lr, {r0, r1, r2, r3}
   14cd8:	stm	ip, {r0, r1, r2, r3}
   14cdc:	mov	r2, r9
   14ce0:	ldr	r3, [r7, r6, lsl #2]
   14ce4:	ldr	ip, [r5]
   14ce8:	mov	r1, r8
   14cec:	mvn	r0, r3, lsr r4
   14cf0:	and	r0, r0, #1
   14cf4:	str	ip, [sp, #52]	; 0x34
   14cf8:	eor	r4, r3, r0, lsl r4
   14cfc:	add	r3, sp, #4
   14d00:	mov	r0, #0
   14d04:	str	r4, [r7, r6, lsl #2]
   14d08:	bl	146f4 <__assert_fail@plt+0x3604>
   14d0c:	ldr	r2, [sp, #52]	; 0x34
   14d10:	ldr	r3, [r5]
   14d14:	cmp	r2, r3
   14d18:	bne	14d24 <__assert_fail@plt+0x3c34>
   14d1c:	add	sp, sp, #60	; 0x3c
   14d20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d24:	bl	10eec <__stack_chk_fail@plt>
   14d28:	andeq	r8, r2, r4, lsr #5
   14d2c:	andeq	r7, r2, r8, lsl #30
   14d30:	mov	r2, r1
   14d34:	mvn	r1, #0
   14d38:	b	14c98 <__assert_fail@plt+0x3ba8>
   14d3c:	mov	r2, #58	; 0x3a
   14d40:	mvn	r1, #0
   14d44:	b	14c98 <__assert_fail@plt+0x3ba8>
   14d48:	mov	r2, #58	; 0x3a
   14d4c:	b	14c98 <__assert_fail@plt+0x3ba8>
   14d50:	push	{r4, r5, r6, r7, r8, lr}
   14d54:	sub	sp, sp, #104	; 0x68
   14d58:	ldr	r5, [pc, #120]	; 14dd8 <__assert_fail@plt+0x3ce8>
   14d5c:	mov	r6, r0
   14d60:	mov	r0, sp
   14d64:	ldr	r3, [r5]
   14d68:	mov	r7, r2
   14d6c:	str	r3, [sp, #100]	; 0x64
   14d70:	bl	12d6c <__assert_fail@plt+0x1c7c>
   14d74:	mov	ip, sp
   14d78:	add	lr, sp, #52	; 0x34
   14d7c:	ldm	ip!, {r0, r1, r2, r3}
   14d80:	stmia	lr!, {r0, r1, r2, r3}
   14d84:	ldm	ip!, {r0, r1, r2, r3}
   14d88:	ldr	r8, [sp, #64]	; 0x40
   14d8c:	stmia	lr!, {r0, r1, r2, r3}
   14d90:	mvn	r4, r8
   14d94:	ldm	ip, {r0, r1, r2, r3}
   14d98:	and	ip, r4, #67108864	; 0x4000000
   14d9c:	eor	ip, ip, r8
   14da0:	str	ip, [sp, #64]	; 0x40
   14da4:	stm	lr, {r0, r1, r2, r3}
   14da8:	add	r3, sp, #52	; 0x34
   14dac:	mvn	r2, #0
   14db0:	mov	r1, r7
   14db4:	mov	r0, r6
   14db8:	bl	146f4 <__assert_fail@plt+0x3604>
   14dbc:	ldr	r2, [sp, #100]	; 0x64
   14dc0:	ldr	r3, [r5]
   14dc4:	cmp	r2, r3
   14dc8:	bne	14dd4 <__assert_fail@plt+0x3ce4>
   14dcc:	add	sp, sp, #104	; 0x68
   14dd0:	pop	{r4, r5, r6, r7, r8, pc}
   14dd4:	bl	10eec <__stack_chk_fail@plt>
   14dd8:	andeq	r7, r2, r8, lsl #30
   14ddc:	push	{r4, r5, r6, r7, r8, r9, lr}
   14de0:	mov	r6, r1
   14de4:	ldr	lr, [pc, #132]	; 14e70 <__assert_fail@plt+0x3d80>
   14de8:	mov	r5, r2
   14dec:	mov	r8, r0
   14df0:	mov	r9, r3
   14df4:	ldm	lr!, {r0, r1, r2, r3}
   14df8:	sub	sp, sp, #60	; 0x3c
   14dfc:	add	ip, sp, #4
   14e00:	ldr	r4, [pc, #108]	; 14e74 <__assert_fail@plt+0x3d84>
   14e04:	stmia	ip!, {r0, r1, r2, r3}
   14e08:	mov	r7, #10
   14e0c:	ldm	lr!, {r0, r1, r2, r3}
   14e10:	cmp	r5, #0
   14e14:	cmpne	r6, #0
   14e18:	str	r7, [sp, #4]
   14e1c:	stmia	ip!, {r0, r1, r2, r3}
   14e20:	ldm	lr, {r0, r1, r2, r3}
   14e24:	ldr	lr, [r4]
   14e28:	stm	ip, {r0, r1, r2, r3}
   14e2c:	str	lr, [sp, #52]	; 0x34
   14e30:	beq	14e6c <__assert_fail@plt+0x3d7c>
   14e34:	add	r3, sp, #4
   14e38:	ldr	r2, [sp, #88]	; 0x58
   14e3c:	mov	r1, r9
   14e40:	mov	r0, r8
   14e44:	str	r6, [sp, #44]	; 0x2c
   14e48:	str	r5, [sp, #48]	; 0x30
   14e4c:	bl	146f4 <__assert_fail@plt+0x3604>
   14e50:	ldr	r2, [sp, #52]	; 0x34
   14e54:	ldr	r3, [r4]
   14e58:	cmp	r2, r3
   14e5c:	bne	14e68 <__assert_fail@plt+0x3d78>
   14e60:	add	sp, sp, #60	; 0x3c
   14e64:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e68:	bl	10eec <__stack_chk_fail@plt>
   14e6c:	bl	110d8 <abort@plt>
   14e70:	andeq	r8, r2, r4, lsr #5
   14e74:	andeq	r7, r2, r8, lsl #30
   14e78:	push	{lr}		; (str lr, [sp, #-4]!)
   14e7c:	sub	sp, sp, #12
   14e80:	mvn	ip, #0
   14e84:	str	ip, [sp]
   14e88:	bl	14ddc <__assert_fail@plt+0x3cec>
   14e8c:	add	sp, sp, #12
   14e90:	pop	{pc}		; (ldr pc, [sp], #4)
   14e94:	push	{lr}		; (str lr, [sp, #-4]!)
   14e98:	sub	sp, sp, #12
   14e9c:	mvn	ip, #0
   14ea0:	mov	r3, r2
   14ea4:	str	ip, [sp]
   14ea8:	mov	r2, r1
   14eac:	mov	r1, r0
   14eb0:	mov	r0, #0
   14eb4:	bl	14ddc <__assert_fail@plt+0x3cec>
   14eb8:	add	sp, sp, #12
   14ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec0:	push	{lr}		; (str lr, [sp, #-4]!)
   14ec4:	sub	sp, sp, #12
   14ec8:	str	r3, [sp]
   14ecc:	mov	r3, r2
   14ed0:	mov	r2, r1
   14ed4:	mov	r1, r0
   14ed8:	mov	r0, #0
   14edc:	bl	14ddc <__assert_fail@plt+0x3cec>
   14ee0:	add	sp, sp, #12
   14ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ee8:	ldr	r3, [pc]	; 14ef0 <__assert_fail@plt+0x3e00>
   14eec:	b	146f4 <__assert_fail@plt+0x3604>
   14ef0:	andeq	r8, r2, ip, lsl r1
   14ef4:	mov	r2, r1
   14ef8:	ldr	r3, [pc, #8]	; 14f08 <__assert_fail@plt+0x3e18>
   14efc:	mov	r1, r0
   14f00:	mov	r0, #0
   14f04:	b	146f4 <__assert_fail@plt+0x3604>
   14f08:	andeq	r8, r2, ip, lsl r1
   14f0c:	ldr	r3, [pc, #4]	; 14f18 <__assert_fail@plt+0x3e28>
   14f10:	mvn	r2, #0
   14f14:	b	146f4 <__assert_fail@plt+0x3604>
   14f18:	andeq	r8, r2, ip, lsl r1
   14f1c:	mov	r1, r0
   14f20:	ldr	r3, [pc, #8]	; 14f30 <__assert_fail@plt+0x3e40>
   14f24:	mvn	r2, #0
   14f28:	mov	r0, #0
   14f2c:	b	146f4 <__assert_fail@plt+0x3604>
   14f30:	andeq	r8, r2, ip, lsl r1
   14f34:	push	{r4, r5, r6, lr}
   14f38:	sub	sp, sp, #32
   14f3c:	cmp	r1, #0
   14f40:	mov	r5, r0
   14f44:	ldr	r4, [sp, #48]	; 0x30
   14f48:	ldr	r6, [sp, #52]	; 0x34
   14f4c:	beq	14fdc <__assert_fail@plt+0x3eec>
   14f50:	strd	r2, [sp]
   14f54:	mov	r3, r1
   14f58:	ldr	r2, [pc, #828]	; 1529c <__assert_fail@plt+0x41ac>
   14f5c:	mov	r1, #1
   14f60:	bl	11060 <__fprintf_chk@plt>
   14f64:	mov	r2, #5
   14f68:	ldr	r1, [pc, #816]	; 152a0 <__assert_fail@plt+0x41b0>
   14f6c:	mov	r0, #0
   14f70:	bl	10ee0 <dcgettext@plt>
   14f74:	ldr	r3, [pc, #808]	; 152a4 <__assert_fail@plt+0x41b4>
   14f78:	ldr	r2, [pc, #808]	; 152a8 <__assert_fail@plt+0x41b8>
   14f7c:	str	r3, [sp]
   14f80:	mov	r1, #1
   14f84:	mov	r3, r0
   14f88:	mov	r0, r5
   14f8c:	bl	11060 <__fprintf_chk@plt>
   14f90:	ldr	r1, [pc, #788]	; 152ac <__assert_fail@plt+0x41bc>
   14f94:	mov	r2, #5
   14f98:	mov	r0, #0
   14f9c:	bl	10ee0 <dcgettext@plt>
   14fa0:	mov	r1, r5
   14fa4:	bl	10e50 <fputs_unlocked@plt>
   14fa8:	cmp	r6, #9
   14fac:	ldrls	pc, [pc, r6, lsl #2]
   14fb0:	b	1528c <__assert_fail@plt+0x419c>
   14fb4:	muleq	r1, r8, r2
   14fb8:	andeq	r5, r1, r0, rrx
   14fbc:	andeq	r5, r1, ip, lsl #1
   14fc0:	andeq	r5, r1, r0, asr #1
   14fc4:	strdeq	r5, [r1], -ip
   14fc8:	andeq	r5, r1, ip, lsr r1
   14fcc:	andeq	r5, r1, r4, lsl #3
   14fd0:	ldrdeq	r5, [r1], -r4
   14fd4:	andeq	r5, r1, ip, lsr #4
   14fd8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fdc:	str	r3, [sp]
   14fe0:	mov	r1, #1
   14fe4:	mov	r3, r2
   14fe8:	ldr	r2, [pc, #704]	; 152b0 <__assert_fail@plt+0x41c0>
   14fec:	bl	11060 <__fprintf_chk@plt>
   14ff0:	b	14f64 <__assert_fail@plt+0x3e74>
   14ff4:	ldr	r1, [pc, #696]	; 152b4 <__assert_fail@plt+0x41c4>
   14ff8:	mov	r2, #5
   14ffc:	mov	r0, #0
   15000:	bl	10ee0 <dcgettext@plt>
   15004:	ldr	r2, [r4, #32]
   15008:	ldr	r3, [r4, #28]
   1500c:	ldr	r1, [r4, #24]
   15010:	str	r2, [sp, #28]
   15014:	ldr	r2, [r4, #20]
   15018:	str	r3, [sp, #24]
   1501c:	ldr	r3, [r4, #16]
   15020:	str	r1, [sp, #20]
   15024:	ldr	r1, [r4, #12]
   15028:	str	r2, [sp, #16]
   1502c:	ldr	r2, [r4, #8]
   15030:	str	r3, [sp, #12]
   15034:	ldr	r3, [r4, #4]
   15038:	str	r1, [sp, #8]
   1503c:	str	r2, [sp, #4]
   15040:	str	r3, [sp]
   15044:	mov	r1, #1
   15048:	ldr	r3, [r4]
   1504c:	mov	r2, r0
   15050:	mov	r0, r5
   15054:	bl	11060 <__fprintf_chk@plt>
   15058:	add	sp, sp, #32
   1505c:	pop	{r4, r5, r6, pc}
   15060:	mov	r2, #5
   15064:	ldr	r1, [pc, #588]	; 152b8 <__assert_fail@plt+0x41c8>
   15068:	mov	r0, #0
   1506c:	bl	10ee0 <dcgettext@plt>
   15070:	ldr	r3, [r4]
   15074:	mov	r1, #1
   15078:	mov	r2, r0
   1507c:	mov	r0, r5
   15080:	add	sp, sp, #32
   15084:	pop	{r4, r5, r6, lr}
   15088:	b	11060 <__fprintf_chk@plt>
   1508c:	mov	r2, #5
   15090:	ldr	r1, [pc, #548]	; 152bc <__assert_fail@plt+0x41cc>
   15094:	mov	r0, #0
   15098:	bl	10ee0 <dcgettext@plt>
   1509c:	ldr	r2, [r4, #4]
   150a0:	ldr	r3, [r4]
   150a4:	mov	r1, #1
   150a8:	str	r2, [sp, #48]	; 0x30
   150ac:	mov	r2, r0
   150b0:	mov	r0, r5
   150b4:	add	sp, sp, #32
   150b8:	pop	{r4, r5, r6, lr}
   150bc:	b	11060 <__fprintf_chk@plt>
   150c0:	mov	r2, #5
   150c4:	ldr	r1, [pc, #500]	; 152c0 <__assert_fail@plt+0x41d0>
   150c8:	mov	r0, #0
   150cc:	bl	10ee0 <dcgettext@plt>
   150d0:	ldr	r2, [r4, #8]
   150d4:	ldr	r3, [r4, #4]
   150d8:	mov	r1, #1
   150dc:	str	r2, [sp, #52]	; 0x34
   150e0:	str	r3, [sp, #48]	; 0x30
   150e4:	ldr	r3, [r4]
   150e8:	mov	r2, r0
   150ec:	mov	r0, r5
   150f0:	add	sp, sp, #32
   150f4:	pop	{r4, r5, r6, lr}
   150f8:	b	11060 <__fprintf_chk@plt>
   150fc:	mov	r2, #5
   15100:	ldr	r1, [pc, #444]	; 152c4 <__assert_fail@plt+0x41d4>
   15104:	mov	r0, #0
   15108:	bl	10ee0 <dcgettext@plt>
   1510c:	ldr	r1, [r4, #12]
   15110:	ldr	r2, [r4, #8]
   15114:	ldr	r3, [r4, #4]
   15118:	str	r1, [sp, #8]
   1511c:	str	r2, [sp, #4]
   15120:	str	r3, [sp]
   15124:	mov	r1, #1
   15128:	ldr	r3, [r4]
   1512c:	mov	r2, r0
   15130:	mov	r0, r5
   15134:	bl	11060 <__fprintf_chk@plt>
   15138:	b	15058 <__assert_fail@plt+0x3f68>
   1513c:	mov	r2, #5
   15140:	ldr	r1, [pc, #384]	; 152c8 <__assert_fail@plt+0x41d8>
   15144:	mov	r0, #0
   15148:	bl	10ee0 <dcgettext@plt>
   1514c:	ldr	r3, [r4, #16]
   15150:	ldr	r1, [r4, #12]
   15154:	ldr	r2, [r4, #8]
   15158:	str	r3, [sp, #12]
   1515c:	ldr	r3, [r4, #4]
   15160:	str	r1, [sp, #8]
   15164:	str	r2, [sp, #4]
   15168:	str	r3, [sp]
   1516c:	mov	r1, #1
   15170:	ldr	r3, [r4]
   15174:	mov	r2, r0
   15178:	mov	r0, r5
   1517c:	bl	11060 <__fprintf_chk@plt>
   15180:	b	15058 <__assert_fail@plt+0x3f68>
   15184:	mov	r2, #5
   15188:	ldr	r1, [pc, #316]	; 152cc <__assert_fail@plt+0x41dc>
   1518c:	mov	r0, #0
   15190:	bl	10ee0 <dcgettext@plt>
   15194:	ldr	r2, [r4, #20]
   15198:	ldr	r3, [r4, #16]
   1519c:	ldr	r1, [r4, #12]
   151a0:	str	r2, [sp, #16]
   151a4:	ldr	r2, [r4, #8]
   151a8:	str	r3, [sp, #12]
   151ac:	ldr	r3, [r4, #4]
   151b0:	str	r1, [sp, #8]
   151b4:	str	r2, [sp, #4]
   151b8:	str	r3, [sp]
   151bc:	mov	r1, #1
   151c0:	ldr	r3, [r4]
   151c4:	mov	r2, r0
   151c8:	mov	r0, r5
   151cc:	bl	11060 <__fprintf_chk@plt>
   151d0:	b	15058 <__assert_fail@plt+0x3f68>
   151d4:	mov	r2, #5
   151d8:	ldr	r1, [pc, #240]	; 152d0 <__assert_fail@plt+0x41e0>
   151dc:	mov	r0, #0
   151e0:	bl	10ee0 <dcgettext@plt>
   151e4:	ldr	r1, [r4, #24]
   151e8:	ldr	r2, [r4, #20]
   151ec:	ldr	r3, [r4, #16]
   151f0:	str	r1, [sp, #20]
   151f4:	ldr	r1, [r4, #12]
   151f8:	str	r2, [sp, #16]
   151fc:	ldr	r2, [r4, #8]
   15200:	str	r3, [sp, #12]
   15204:	ldr	r3, [r4, #4]
   15208:	str	r1, [sp, #8]
   1520c:	str	r2, [sp, #4]
   15210:	str	r3, [sp]
   15214:	mov	r1, #1
   15218:	ldr	r3, [r4]
   1521c:	mov	r2, r0
   15220:	mov	r0, r5
   15224:	bl	11060 <__fprintf_chk@plt>
   15228:	b	15058 <__assert_fail@plt+0x3f68>
   1522c:	mov	r2, #5
   15230:	ldr	r1, [pc, #156]	; 152d4 <__assert_fail@plt+0x41e4>
   15234:	mov	r0, #0
   15238:	bl	10ee0 <dcgettext@plt>
   1523c:	ldr	r3, [r4, #28]
   15240:	ldr	r1, [r4, #24]
   15244:	ldr	r2, [r4, #20]
   15248:	str	r3, [sp, #24]
   1524c:	ldr	r3, [r4, #16]
   15250:	str	r1, [sp, #20]
   15254:	ldr	r1, [r4, #12]
   15258:	str	r2, [sp, #16]
   1525c:	ldr	r2, [r4, #8]
   15260:	str	r3, [sp, #12]
   15264:	ldr	r3, [r4, #4]
   15268:	str	r1, [sp, #8]
   1526c:	str	r2, [sp, #4]
   15270:	str	r3, [sp]
   15274:	mov	r1, #1
   15278:	ldr	r3, [r4]
   1527c:	mov	r2, r0
   15280:	mov	r0, r5
   15284:	bl	11060 <__fprintf_chk@plt>
   15288:	b	15058 <__assert_fail@plt+0x3f68>
   1528c:	mov	r2, #5
   15290:	ldr	r1, [pc, #64]	; 152d8 <__assert_fail@plt+0x41e8>
   15294:	b	14ffc <__assert_fail@plt+0x3f0c>
   15298:	bl	110d8 <abort@plt>
   1529c:	andeq	r7, r1, r8, lsl r3
   152a0:	andeq	r7, r1, ip, lsr #6
   152a4:	andeq	r0, r0, r2, ror #15
   152a8:	andeq	r7, r1, r0, lsl #12
   152ac:	andeq	r7, r1, r0, lsr r3
   152b0:	andeq	r7, r1, r4, lsr #6
   152b4:	andeq	r7, r1, r8, lsl #10
   152b8:	strdeq	r7, [r1], -ip
   152bc:	andeq	r7, r1, ip, lsl #8
   152c0:	andeq	r7, r1, r4, lsr #8
   152c4:	andeq	r7, r1, r0, asr #8
   152c8:	andeq	r7, r1, r0, ror #8
   152cc:	andeq	r7, r1, r4, lsl #9
   152d0:	andeq	r7, r1, ip, lsr #9
   152d4:	ldrdeq	r7, [r1], -r8
   152d8:	andeq	r7, r1, ip, lsr r5
   152dc:	push	{r4, r5, lr}
   152e0:	sub	sp, sp, #12
   152e4:	ldr	r5, [sp, #24]
   152e8:	ldr	ip, [r5]
   152ec:	cmp	ip, #0
   152f0:	beq	1530c <__assert_fail@plt+0x421c>
   152f4:	mov	lr, r5
   152f8:	mov	ip, #0
   152fc:	ldr	r4, [lr, #4]!
   15300:	add	ip, ip, #1
   15304:	cmp	r4, #0
   15308:	bne	152fc <__assert_fail@plt+0x420c>
   1530c:	stm	sp, {r5, ip}
   15310:	bl	14f34 <__assert_fail@plt+0x3e44>
   15314:	add	sp, sp, #12
   15318:	pop	{r4, r5, pc}
   1531c:	push	{r4, r5, r6, lr}
   15320:	sub	sp, sp, #56	; 0x38
   15324:	ldr	r6, [pc, #88]	; 15384 <__assert_fail@plt+0x4294>
   15328:	ldr	r5, [sp, #72]	; 0x48
   1532c:	add	r4, sp, #8
   15330:	ldr	ip, [r6]
   15334:	str	ip, [sp, #52]	; 0x34
   15338:	mov	ip, #0
   1533c:	ldr	lr, [r5], #4
   15340:	cmp	lr, #0
   15344:	str	lr, [r4, #4]!
   15348:	beq	15358 <__assert_fail@plt+0x4268>
   1534c:	add	ip, ip, #1
   15350:	cmp	ip, #10
   15354:	bne	1533c <__assert_fail@plt+0x424c>
   15358:	add	lr, sp, #12
   1535c:	str	ip, [sp, #4]
   15360:	str	lr, [sp]
   15364:	bl	14f34 <__assert_fail@plt+0x3e44>
   15368:	ldr	r2, [sp, #52]	; 0x34
   1536c:	ldr	r3, [r6]
   15370:	cmp	r2, r3
   15374:	bne	15380 <__assert_fail@plt+0x4290>
   15378:	add	sp, sp, #56	; 0x38
   1537c:	pop	{r4, r5, r6, pc}
   15380:	bl	10eec <__stack_chk_fail@plt>
   15384:	andeq	r7, r2, r8, lsl #30
   15388:	push	{r3}		; (str r3, [sp, #-4]!)
   1538c:	mov	ip, #0
   15390:	push	{r4, r5, r6, lr}
   15394:	sub	sp, sp, #60	; 0x3c
   15398:	ldr	r6, [pc, #100]	; 15404 <__assert_fail@plt+0x4314>
   1539c:	add	r5, sp, #8
   153a0:	add	r4, sp, #80	; 0x50
   153a4:	ldr	r3, [r6]
   153a8:	str	r4, [sp, #8]
   153ac:	str	r3, [sp, #52]	; 0x34
   153b0:	ldr	r3, [sp, #76]	; 0x4c
   153b4:	ldr	lr, [r4], #4
   153b8:	cmp	lr, #0
   153bc:	str	lr, [r5, #4]!
   153c0:	beq	153d0 <__assert_fail@plt+0x42e0>
   153c4:	add	ip, ip, #1
   153c8:	cmp	ip, #10
   153cc:	bne	153b4 <__assert_fail@plt+0x42c4>
   153d0:	add	lr, sp, #12
   153d4:	str	ip, [sp, #4]
   153d8:	str	lr, [sp]
   153dc:	bl	14f34 <__assert_fail@plt+0x3e44>
   153e0:	ldr	r2, [sp, #52]	; 0x34
   153e4:	ldr	r3, [r6]
   153e8:	cmp	r2, r3
   153ec:	bne	15400 <__assert_fail@plt+0x4310>
   153f0:	add	sp, sp, #60	; 0x3c
   153f4:	pop	{r4, r5, r6, lr}
   153f8:	add	sp, sp, #4
   153fc:	bx	lr
   15400:	bl	10eec <__stack_chk_fail@plt>
   15404:	andeq	r7, r2, r8, lsl #30
   15408:	push	{r4, lr}
   1540c:	mov	r2, #5
   15410:	ldr	r1, [pc, #88]	; 15470 <__assert_fail@plt+0x4380>
   15414:	mov	r0, #0
   15418:	bl	10ee0 <dcgettext@plt>
   1541c:	ldr	r2, [pc, #80]	; 15474 <__assert_fail@plt+0x4384>
   15420:	mov	r1, r0
   15424:	mov	r0, #1
   15428:	bl	11048 <__printf_chk@plt>
   1542c:	mov	r2, #5
   15430:	ldr	r1, [pc, #64]	; 15478 <__assert_fail@plt+0x4388>
   15434:	mov	r0, #0
   15438:	bl	10ee0 <dcgettext@plt>
   1543c:	ldr	r3, [pc, #56]	; 1547c <__assert_fail@plt+0x438c>
   15440:	ldr	r2, [pc, #56]	; 15480 <__assert_fail@plt+0x4390>
   15444:	mov	r1, r0
   15448:	mov	r0, #1
   1544c:	bl	11048 <__printf_chk@plt>
   15450:	ldr	r1, [pc, #44]	; 15484 <__assert_fail@plt+0x4394>
   15454:	mov	r2, #5
   15458:	mov	r0, #0
   1545c:	bl	10ee0 <dcgettext@plt>
   15460:	ldr	r3, [pc, #32]	; 15488 <__assert_fail@plt+0x4398>
   15464:	pop	{r4, lr}
   15468:	ldr	r1, [r3]
   1546c:	b	10e50 <fputs_unlocked@plt>
   15470:	andeq	r7, r1, r8, ror r5
   15474:	muleq	r1, r0, r5
   15478:	andeq	r7, r1, r8, lsr #11
   1547c:	andeq	r6, r1, r0, asr #27
   15480:	andeq	r6, r1, r8, ror #27
   15484:			; <UNDEFINED> instruction: 0x000175bc
   15488:	andeq	r8, r2, ip, ror #2
   1548c:	push	{r4, lr}
   15490:	mov	r4, r0
   15494:	bl	10f94 <malloc@plt>
   15498:	adds	r4, r4, #0
   1549c:	movne	r4, #1
   154a0:	cmp	r0, #0
   154a4:	movne	r4, #0
   154a8:	cmp	r4, #0
   154ac:	popeq	{r4, pc}
   154b0:	bl	156d4 <__assert_fail@plt+0x45e4>
   154b4:	push	{r4, r5, r6, lr}
   154b8:	umull	r4, r5, r0, r1
   154bc:	adds	r3, r5, #0
   154c0:	movne	r3, #1
   154c4:	cmp	r4, #0
   154c8:	blt	154e0 <__assert_fail@plt+0x43f0>
   154cc:	cmp	r3, #0
   154d0:	bne	154e0 <__assert_fail@plt+0x43f0>
   154d4:	mul	r0, r1, r0
   154d8:	pop	{r4, r5, r6, lr}
   154dc:	b	1548c <__assert_fail@plt+0x439c>
   154e0:	bl	156d4 <__assert_fail@plt+0x45e4>
   154e4:	b	1548c <__assert_fail@plt+0x439c>
   154e8:	adds	r3, r0, #0
   154ec:	movne	r3, #1
   154f0:	cmp	r1, #0
   154f4:	movne	r3, #0
   154f8:	cmp	r3, #0
   154fc:	push	{r4, lr}
   15500:	bne	15528 <__assert_fail@plt+0x4438>
   15504:	mov	r4, r1
   15508:	bl	10f04 <realloc@plt>
   1550c:	adds	r4, r4, #0
   15510:	movne	r4, #1
   15514:	cmp	r0, #0
   15518:	movne	r4, #0
   1551c:	cmp	r4, #0
   15520:	popeq	{r4, pc}
   15524:	bl	156d4 <__assert_fail@plt+0x45e4>
   15528:	bl	10e98 <free@plt>
   1552c:	mov	r0, #0
   15530:	pop	{r4, pc}
   15534:	push	{r4, r5, r6, lr}
   15538:	umull	r4, r5, r1, r2
   1553c:	adds	r3, r5, #0
   15540:	movne	r3, #1
   15544:	cmp	r4, #0
   15548:	blt	15560 <__assert_fail@plt+0x4470>
   1554c:	cmp	r3, #0
   15550:	bne	15560 <__assert_fail@plt+0x4470>
   15554:	mul	r1, r2, r1
   15558:	pop	{r4, r5, r6, lr}
   1555c:	b	154e8 <__assert_fail@plt+0x43f8>
   15560:	bl	156d4 <__assert_fail@plt+0x45e4>
   15564:	push	{r4, r5, r6, r7, r8, lr}
   15568:	subs	r7, r0, #0
   1556c:	mov	r6, r1
   15570:	mov	r5, r2
   15574:	ldr	r4, [r1]
   15578:	beq	155ac <__assert_fail@plt+0x44bc>
   1557c:	mov	r1, r2
   15580:	ldr	r0, [pc, #104]	; 155f0 <__assert_fail@plt+0x4500>
   15584:	bl	1631c <__assert_fail@plt+0x522c>
   15588:	cmp	r0, r4
   1558c:	bls	155d0 <__assert_fail@plt+0x44e0>
   15590:	add	r3, r4, #1
   15594:	add	r4, r3, r4, lsr #1
   15598:	str	r4, [r6]
   1559c:	mul	r1, r5, r4
   155a0:	mov	r0, r7
   155a4:	pop	{r4, r5, r6, r7, r8, lr}
   155a8:	b	154e8 <__assert_fail@plt+0x43f8>
   155ac:	cmp	r4, #0
   155b0:	beq	155d4 <__assert_fail@plt+0x44e4>
   155b4:	umull	r0, r1, r4, r5
   155b8:	adds	r3, r1, #0
   155bc:	movne	r3, #1
   155c0:	cmp	r0, #0
   155c4:	blt	155d0 <__assert_fail@plt+0x44e0>
   155c8:	cmp	r3, #0
   155cc:	beq	15598 <__assert_fail@plt+0x44a8>
   155d0:	bl	156d4 <__assert_fail@plt+0x45e4>
   155d4:	mov	r1, r2
   155d8:	mov	r0, #64	; 0x40
   155dc:	bl	1631c <__assert_fail@plt+0x522c>
   155e0:	cmp	r5, #64	; 0x40
   155e4:	movls	r4, r0
   155e8:	addhi	r4, r0, #1
   155ec:	b	155b4 <__assert_fail@plt+0x44c4>
   155f0:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   155f4:	cmp	r0, #0
   155f8:	ldr	r3, [r1]
   155fc:	beq	15620 <__assert_fail@plt+0x4530>
   15600:	ldr	r2, [pc, #60]	; 15644 <__assert_fail@plt+0x4554>
   15604:	cmp	r3, r2
   15608:	bhi	1563c <__assert_fail@plt+0x454c>
   1560c:	add	r2, r3, #1
   15610:	add	r3, r2, r3, lsr #1
   15614:	str	r3, [r1]
   15618:	mov	r1, r3
   1561c:	b	154e8 <__assert_fail@plt+0x43f8>
   15620:	cmp	r3, #0
   15624:	bne	15638 <__assert_fail@plt+0x4548>
   15628:	mov	r3, #64	; 0x40
   1562c:	str	r3, [r1]
   15630:	mov	r1, r3
   15634:	b	154e8 <__assert_fail@plt+0x43f8>
   15638:	bge	15614 <__assert_fail@plt+0x4524>
   1563c:	push	{r4, lr}
   15640:	bl	156d4 <__assert_fail@plt+0x45e4>
   15644:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   15648:	push	{r4, lr}
   1564c:	mov	r4, r0
   15650:	bl	1548c <__assert_fail@plt+0x439c>
   15654:	mov	r2, r4
   15658:	mov	r1, #0
   1565c:	pop	{r4, lr}
   15660:	b	1103c <memset@plt>
   15664:	push	{r4, r5, r6, lr}
   15668:	umull	r4, r5, r0, r1
   1566c:	adds	r3, r5, #0
   15670:	movne	r3, #1
   15674:	cmp	r4, #0
   15678:	blt	15690 <__assert_fail@plt+0x45a0>
   1567c:	cmp	r3, #0
   15680:	bne	15690 <__assert_fail@plt+0x45a0>
   15684:	bl	10e44 <calloc@plt>
   15688:	cmp	r0, #0
   1568c:	popne	{r4, r5, r6, pc}
   15690:	bl	156d4 <__assert_fail@plt+0x45e4>
   15694:	push	{r4, r5, r6, lr}
   15698:	mov	r4, r1
   1569c:	mov	r5, r0
   156a0:	mov	r0, r1
   156a4:	bl	1548c <__assert_fail@plt+0x439c>
   156a8:	mov	r2, r4
   156ac:	mov	r1, r5
   156b0:	pop	{r4, r5, r6, lr}
   156b4:	b	10eb0 <memcpy@plt>
   156b8:	push	{r4, lr}
   156bc:	mov	r4, r0
   156c0:	bl	1100c <strlen@plt>
   156c4:	add	r1, r0, #1
   156c8:	mov	r0, r4
   156cc:	pop	{r4, lr}
   156d0:	b	15694 <__assert_fail@plt+0x45a4>
   156d4:	ldr	r3, [pc, #44]	; 15708 <__assert_fail@plt+0x4618>
   156d8:	push	{r4, lr}
   156dc:	mov	r2, #5
   156e0:	ldr	r1, [pc, #36]	; 1570c <__assert_fail@plt+0x461c>
   156e4:	mov	r0, #0
   156e8:	ldr	r4, [r3]
   156ec:	bl	10ee0 <dcgettext@plt>
   156f0:	ldr	r2, [pc, #24]	; 15710 <__assert_fail@plt+0x4620>
   156f4:	mov	r1, #0
   156f8:	mov	r3, r0
   156fc:	mov	r0, r4
   15700:	bl	10f64 <error@plt>
   15704:	bl	110d8 <abort@plt>
   15708:	andeq	r8, r2, r8, lsl #2
   1570c:	andeq	r7, r1, r0, lsr r6
   15710:	andeq	r6, r1, ip, lsl #14
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15718:	mov	r4, r0
   1571c:	mov	r6, r1
   15720:	mov	r9, r2
   15724:	ldr	r1, [pc, #164]	; 157d0 <__assert_fail@plt+0x46e0>
   15728:	mov	r2, #5
   1572c:	mov	r0, #0
   15730:	mov	r7, r3
   15734:	ldr	r8, [sp, #32]
   15738:	bl	10ee0 <dcgettext@plt>
   1573c:	mov	r1, r4
   15740:	mov	r2, r0
   15744:	mov	r0, #0
   15748:	bl	10f64 <error@plt>
   1574c:	mov	r2, #5
   15750:	ldr	r1, [pc, #124]	; 157d4 <__assert_fail@plt+0x46e4>
   15754:	mov	r0, #0
   15758:	bl	10ee0 <dcgettext@plt>
   1575c:	mov	r1, #0
   15760:	mov	r2, r0
   15764:	mov	r0, r1
   15768:	bl	10f64 <error@plt>
   1576c:	ldr	r3, [pc, #100]	; 157d8 <__assert_fail@plt+0x46e8>
   15770:	mov	r2, #5
   15774:	ldr	r1, [pc, #96]	; 157dc <__assert_fail@plt+0x46ec>
   15778:	mov	r0, #0
   1577c:	ldr	r4, [r3]
   15780:	bl	10ee0 <dcgettext@plt>
   15784:	mov	r3, r9
   15788:	mov	r2, r6
   1578c:	mov	r1, #8
   15790:	mov	r5, r0
   15794:	mov	r0, #0
   15798:	bl	14c18 <__assert_fail@plt+0x3b28>
   1579c:	mov	r3, r8
   157a0:	mov	r2, r7
   157a4:	mov	r1, #8
   157a8:	mov	r6, r0
   157ac:	mov	r0, #1
   157b0:	bl	14c18 <__assert_fail@plt+0x3b28>
   157b4:	mov	r3, r6
   157b8:	mov	r2, r5
   157bc:	mov	r1, #0
   157c0:	str	r0, [sp, #32]
   157c4:	mov	r0, r4
   157c8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   157cc:	b	10f64 <error@plt>
   157d0:	andeq	r7, r1, r4, asr #12
   157d4:	andeq	r7, r1, r0, ror #12
   157d8:	andeq	r8, r2, r8, lsl #2
   157dc:	andeq	r7, r1, ip, lsl #13
   157e0:	push	{r4, r5, r6, r7, r8, lr}
   157e4:	sub	sp, sp, #8
   157e8:	mov	r6, r1
   157ec:	mov	r7, r2
   157f0:	mov	r8, r3
   157f4:	mov	r5, r0
   157f8:	bl	16248 <__assert_fail@plt+0x5158>
   157fc:	mov	r4, r0
   15800:	bl	11024 <__errno_location@plt>
   15804:	ldr	r0, [r0]
   15808:	cmp	r0, #0
   1580c:	bne	1581c <__assert_fail@plt+0x472c>
   15810:	mov	r0, r4
   15814:	add	sp, sp, #8
   15818:	pop	{r4, r5, r6, r7, r8, pc}
   1581c:	str	r8, [sp]
   15820:	mov	r3, r7
   15824:	mov	r2, r6
   15828:	mov	r1, r5
   1582c:	bl	15714 <__assert_fail@plt+0x4624>
   15830:	mov	r0, r4
   15834:	add	sp, sp, #8
   15838:	pop	{r4, r5, r6, r7, r8, pc}
   1583c:	push	{r4, r5, r6, r7, r8, lr}
   15840:	sub	sp, sp, #8
   15844:	mov	r7, r1
   15848:	mov	r8, r2
   1584c:	mov	r5, r3
   15850:	mov	r6, r0
   15854:	bl	162c4 <__assert_fail@plt+0x51d4>
   15858:	mov	r4, r0
   1585c:	bl	11024 <__errno_location@plt>
   15860:	ldr	r0, [r0]
   15864:	cmp	r0, #0
   15868:	bne	15878 <__assert_fail@plt+0x4788>
   1586c:	mov	r0, r4
   15870:	add	sp, sp, #8
   15874:	pop	{r4, r5, r6, r7, r8, pc}
   15878:	sub	r5, r5, #1
   1587c:	str	r5, [sp]
   15880:	mov	r3, r8
   15884:	sub	r2, r7, #1
   15888:	mov	r1, r6
   1588c:	bl	15714 <__assert_fail@plt+0x4624>
   15890:	mov	r0, r4
   15894:	add	sp, sp, #8
   15898:	pop	{r4, r5, r6, r7, r8, pc}
   1589c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158a0:	cmp	r2, #36	; 0x24
   158a4:	ldr	r7, [pc, #1580]	; 15ed8 <__assert_fail@plt+0x4de8>
   158a8:	sub	sp, sp, #20
   158ac:	mov	fp, r2
   158b0:	ldr	r2, [r7]
   158b4:	ldr	r9, [sp, #56]	; 0x38
   158b8:	str	r2, [sp, #12]
   158bc:	bhi	15ec0 <__assert_fail@plt+0x4dd0>
   158c0:	cmp	r1, #0
   158c4:	mov	r6, r1
   158c8:	mov	r5, r0
   158cc:	mov	sl, r3
   158d0:	addeq	r6, sp, #8
   158d4:	bl	11024 <__errno_location@plt>
   158d8:	mov	r3, #0
   158dc:	str	r3, [r0]
   158e0:	mov	r8, r0
   158e4:	bl	10fe8 <__ctype_b_loc@plt>
   158e8:	ldrb	r3, [r5]
   158ec:	mov	r1, r5
   158f0:	ldr	ip, [r0]
   158f4:	b	158fc <__assert_fail@plt+0x480c>
   158f8:	ldrb	r3, [r1, #1]!
   158fc:	lsl	r2, r3, #1
   15900:	ldrh	r0, [ip, r2]
   15904:	ands	r4, r0, #8192	; 0x2000
   15908:	bne	158f8 <__assert_fail@plt+0x4808>
   1590c:	cmp	r3, #45	; 0x2d
   15910:	beq	1599c <__assert_fail@plt+0x48ac>
   15914:	mov	r2, fp
   15918:	mov	r1, r6
   1591c:	mov	r0, r5
   15920:	bl	11000 <strtoul@plt>
   15924:	ldr	r3, [r6]
   15928:	cmp	r3, r5
   1592c:	mov	fp, r0
   15930:	beq	15984 <__assert_fail@plt+0x4894>
   15934:	ldr	r4, [r8]
   15938:	cmp	r4, #0
   1593c:	bne	15974 <__assert_fail@plt+0x4884>
   15940:	cmp	r9, #0
   15944:	beq	15954 <__assert_fail@plt+0x4864>
   15948:	ldrb	r5, [r3]
   1594c:	cmp	r5, #0
   15950:	bne	15d0c <__assert_fail@plt+0x4c1c>
   15954:	str	fp, [sl]
   15958:	ldr	r2, [sp, #12]
   1595c:	ldr	r3, [r7]
   15960:	mov	r0, r4
   15964:	cmp	r2, r3
   15968:	bne	15ed4 <__assert_fail@plt+0x4de4>
   1596c:	add	sp, sp, #20
   15970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15974:	cmp	r4, #34	; 0x22
   15978:	bne	1599c <__assert_fail@plt+0x48ac>
   1597c:	mov	r4, #1
   15980:	b	15940 <__assert_fail@plt+0x4850>
   15984:	cmp	r9, #0
   15988:	str	r3, [sp, #4]
   1598c:	beq	1599c <__assert_fail@plt+0x48ac>
   15990:	ldrb	r5, [r5]
   15994:	cmp	r5, #0
   15998:	bne	159a4 <__assert_fail@plt+0x48b4>
   1599c:	mov	r4, #4
   159a0:	b	15958 <__assert_fail@plt+0x4868>
   159a4:	mov	r1, r5
   159a8:	mov	r0, r9
   159ac:	bl	11018 <strchr@plt>
   159b0:	ldr	r3, [sp, #4]
   159b4:	cmp	r0, #0
   159b8:	movne	fp, #1
   159bc:	beq	1599c <__assert_fail@plt+0x48ac>
   159c0:	sub	r8, r5, #69	; 0x45
   159c4:	cmp	r8, #47	; 0x2f
   159c8:	ldrls	pc, [pc, r8, lsl #2]
   159cc:	b	15b94 <__assert_fail@plt+0x4aa4>
   159d0:	muleq	r1, r0, sl
   159d4:	muleq	r1, r4, fp
   159d8:	muleq	r1, r0, sl
   159dc:	muleq	r1, r4, fp
   159e0:	muleq	r1, r4, fp
   159e4:	muleq	r1, r4, fp
   159e8:	muleq	r1, r0, sl
   159ec:	muleq	r1, r4, fp
   159f0:	muleq	r1, r0, sl
   159f4:	muleq	r1, r4, fp
   159f8:	muleq	r1, r4, fp
   159fc:	muleq	r1, r0, sl
   15a00:	muleq	r1, r4, fp
   15a04:	muleq	r1, r4, fp
   15a08:	muleq	r1, r4, fp
   15a0c:	muleq	r1, r0, sl
   15a10:	muleq	r1, r4, fp
   15a14:	muleq	r1, r4, fp
   15a18:	muleq	r1, r4, fp
   15a1c:	muleq	r1, r4, fp
   15a20:	muleq	r1, r0, sl
   15a24:	muleq	r1, r0, sl
   15a28:	muleq	r1, r4, fp
   15a2c:	muleq	r1, r4, fp
   15a30:	muleq	r1, r4, fp
   15a34:	muleq	r1, r4, fp
   15a38:	muleq	r1, r4, fp
   15a3c:	muleq	r1, r4, fp
   15a40:	muleq	r1, r4, fp
   15a44:	muleq	r1, r4, fp
   15a48:	muleq	r1, r4, fp
   15a4c:	muleq	r1, r4, fp
   15a50:	muleq	r1, r4, fp
   15a54:	muleq	r1, r4, fp
   15a58:	muleq	r1, r0, sl
   15a5c:	muleq	r1, r4, fp
   15a60:	muleq	r1, r4, fp
   15a64:	muleq	r1, r4, fp
   15a68:	muleq	r1, r0, sl
   15a6c:	muleq	r1, r4, fp
   15a70:	muleq	r1, r0, sl
   15a74:	muleq	r1, r4, fp
   15a78:	muleq	r1, r4, fp
   15a7c:	muleq	r1, r4, fp
   15a80:	muleq	r1, r4, fp
   15a84:	muleq	r1, r4, fp
   15a88:	muleq	r1, r4, fp
   15a8c:	muleq	r1, r0, sl
   15a90:	mov	r0, r9
   15a94:	mov	r1, #48	; 0x30
   15a98:	str	r3, [sp, #4]
   15a9c:	bl	11018 <strchr@plt>
   15aa0:	ldr	r3, [sp, #4]
   15aa4:	cmp	r0, #0
   15aa8:	beq	15b94 <__assert_fail@plt+0x4aa4>
   15aac:	ldrb	r2, [r3, #1]
   15ab0:	cmp	r2, #68	; 0x44
   15ab4:	beq	15eac <__assert_fail@plt+0x4dbc>
   15ab8:	cmp	r2, #105	; 0x69
   15abc:	beq	15d34 <__assert_fail@plt+0x4c44>
   15ac0:	cmp	r2, #66	; 0x42
   15ac4:	beq	15eac <__assert_fail@plt+0x4dbc>
   15ac8:	cmp	r8, #47	; 0x2f
   15acc:	ldrls	pc, [pc, r8, lsl #2]
   15ad0:	b	15d28 <__assert_fail@plt+0x4c38>
   15ad4:	andeq	r5, r1, r4, ror #28
   15ad8:	andeq	r5, r1, r8, lsr #26
   15adc:	andeq	r5, r1, r4, lsl #25
   15ae0:	andeq	r5, r1, r8, lsr #26
   15ae4:	andeq	r5, r1, r8, lsr #26
   15ae8:	andeq	r5, r1, r8, lsr #26
   15aec:	strdeq	r5, [r1], -r0
   15af0:	andeq	r5, r1, r8, lsr #26
   15af4:	andeq	r5, r1, r4, lsr lr
   15af8:	andeq	r5, r1, r8, lsr #26
   15afc:	andeq	r5, r1, r8, lsr #26
   15b00:	andeq	r5, r1, r4, lsl #28
   15b04:	andeq	r5, r1, r8, lsr #26
   15b08:	andeq	r5, r1, r8, lsr #26
   15b0c:	andeq	r5, r1, r8, lsr #26
   15b10:	ldrdeq	r5, [r1], -r4
   15b14:	andeq	r5, r1, r8, lsr #26
   15b18:	andeq	r5, r1, r8, lsr #26
   15b1c:	andeq	r5, r1, r8, lsr #26
   15b20:	andeq	r5, r1, r8, lsr #26
   15b24:	andeq	r5, r1, r4, lsr #27
   15b28:	andeq	r5, r1, r0, ror sp
   15b2c:	andeq	r5, r1, r8, lsr #26
   15b30:	andeq	r5, r1, r8, lsr #26
   15b34:	andeq	r5, r1, r8, lsr #26
   15b38:	andeq	r5, r1, r8, lsr #26
   15b3c:	andeq	r5, r1, r8, lsr #26
   15b40:	andeq	r5, r1, r8, lsr #26
   15b44:	andeq	r5, r1, r8, lsr #26
   15b48:	andeq	r5, r1, ip, asr sp
   15b4c:	andeq	r5, r1, r4, lsr #29
   15b50:	andeq	r5, r1, r8, lsr #26
   15b54:	andeq	r5, r1, r8, lsr #26
   15b58:	andeq	r5, r1, r8, lsr #26
   15b5c:	andeq	r5, r1, r4, lsl #25
   15b60:	andeq	r5, r1, r8, lsr #26
   15b64:	andeq	r5, r1, r8, lsr #26
   15b68:	andeq	r5, r1, r8, lsr #26
   15b6c:	strdeq	r5, [r1], -r0
   15b70:	andeq	r5, r1, r8, lsr #26
   15b74:	andeq	r5, r1, r4, lsr lr
   15b78:	andeq	r5, r1, r8, lsr #26
   15b7c:	andeq	r5, r1, r8, lsr #26
   15b80:	andeq	r5, r1, r8, lsr #26
   15b84:	andeq	r5, r1, r8, lsr #26
   15b88:	andeq	r5, r1, r8, lsr #26
   15b8c:	andeq	r5, r1, r8, lsr #26
   15b90:	ldrdeq	r5, [r1], -r4
   15b94:	mov	r1, #1
   15b98:	mov	r2, #1024	; 0x400
   15b9c:	sub	r5, r5, #66	; 0x42
   15ba0:	cmp	r5, #53	; 0x35
   15ba4:	ldrls	pc, [pc, r5, lsl #2]
   15ba8:	b	15d28 <__assert_fail@plt+0x4c38>
   15bac:	muleq	r1, r4, lr
   15bb0:	andeq	r5, r1, r8, lsr #26
   15bb4:	andeq	r5, r1, r8, lsr #26
   15bb8:	andeq	r5, r1, ip, ror #28
   15bbc:	andeq	r5, r1, r8, lsr #26
   15bc0:	andeq	r5, r1, ip, lsl #25
   15bc4:	andeq	r5, r1, r8, lsr #26
   15bc8:	andeq	r5, r1, r8, lsr #26
   15bcc:	andeq	r5, r1, r8, lsr #26
   15bd0:	strdeq	r5, [r1], -r8
   15bd4:	andeq	r5, r1, r8, lsr #26
   15bd8:	andeq	r5, r1, ip, lsr lr
   15bdc:	andeq	r5, r1, r8, lsr #26
   15be0:	andeq	r5, r1, r8, lsr #26
   15be4:	andeq	r5, r1, ip, lsl #28
   15be8:	andeq	r5, r1, r8, lsr #26
   15bec:	andeq	r5, r1, r8, lsr #26
   15bf0:	andeq	r5, r1, r8, lsr #26
   15bf4:	ldrdeq	r5, [r1], -ip
   15bf8:	andeq	r5, r1, r8, lsr #26
   15bfc:	andeq	r5, r1, r8, lsr #26
   15c00:	andeq	r5, r1, r8, lsr #26
   15c04:	andeq	r5, r1, r8, lsr #26
   15c08:	andeq	r5, r1, ip, lsr #27
   15c0c:	andeq	r5, r1, r8, ror sp
   15c10:	andeq	r5, r1, r8, lsr #26
   15c14:	andeq	r5, r1, r8, lsr #26
   15c18:	andeq	r5, r1, r8, lsr #26
   15c1c:	andeq	r5, r1, r8, lsr #26
   15c20:	andeq	r5, r1, r8, lsr #26
   15c24:	andeq	r5, r1, r8, lsr #26
   15c28:	andeq	r5, r1, r8, lsr #26
   15c2c:	andeq	r5, r1, r0, ror #26
   15c30:	ldrdeq	r5, [r1], -r8
   15c34:	andeq	r5, r1, r8, lsr #26
   15c38:	andeq	r5, r1, r8, lsr #26
   15c3c:	andeq	r5, r1, r8, lsr #26
   15c40:	andeq	r5, r1, ip, lsl #25
   15c44:	andeq	r5, r1, r8, lsr #26
   15c48:	andeq	r5, r1, r8, lsr #26
   15c4c:	andeq	r5, r1, r8, lsr #26
   15c50:	strdeq	r5, [r1], -r8
   15c54:	andeq	r5, r1, r8, lsr #26
   15c58:	andeq	r5, r1, ip, lsr lr
   15c5c:	andeq	r5, r1, r8, lsr #26
   15c60:	andeq	r5, r1, r8, lsr #26
   15c64:	andeq	r5, r1, r8, lsr #26
   15c68:	andeq	r5, r1, r8, lsr #26
   15c6c:	andeq	r5, r1, r8, lsr #26
   15c70:	andeq	r5, r1, r8, lsr #26
   15c74:	ldrdeq	r5, [r1], -ip
   15c78:	andeq	r5, r1, r8, lsr #26
   15c7c:	andeq	r5, r1, r8, lsr #26
   15c80:	andeq	r5, r1, ip, asr #26
   15c84:	mov	r1, #1
   15c88:	mov	r2, #1024	; 0x400
   15c8c:	umull	ip, r0, r2, fp
   15c90:	adds	r0, r0, #0
   15c94:	movne	r0, #1
   15c98:	cmp	r0, #0
   15c9c:	bne	15eb8 <__assert_fail@plt+0x4dc8>
   15ca0:	mul	fp, r2, fp
   15ca4:	umull	ip, r0, r2, fp
   15ca8:	adds	r0, r0, #0
   15cac:	movne	r0, #1
   15cb0:	cmp	r0, #0
   15cb4:	bne	15eb8 <__assert_fail@plt+0x4dc8>
   15cb8:	mul	fp, r2, fp
   15cbc:	umull	ip, r0, r2, fp
   15cc0:	adds	r0, r0, #0
   15cc4:	movne	r0, #1
   15cc8:	cmp	r0, #0
   15ccc:	muleq	fp, r2, fp
   15cd0:	bne	15eb8 <__assert_fail@plt+0x4dc8>
   15cd4:	orr	r4, r4, r0
   15cd8:	add	r2, r3, r1
   15cdc:	str	r2, [r6]
   15ce0:	ldrb	r3, [r3, r1]
   15ce4:	cmp	r3, #0
   15ce8:	orrne	r4, r4, #2
   15cec:	b	15954 <__assert_fail@plt+0x4864>
   15cf0:	mov	r1, #1
   15cf4:	mov	r2, #1024	; 0x400
   15cf8:	umull	ip, r0, r2, fp
   15cfc:	cmp	r0, #0
   15d00:	bne	15e58 <__assert_fail@plt+0x4d68>
   15d04:	mul	fp, r2, fp
   15d08:	b	15cd8 <__assert_fail@plt+0x4be8>
   15d0c:	mov	r1, r5
   15d10:	mov	r0, r9
   15d14:	str	r3, [sp, #4]
   15d18:	bl	11018 <strchr@plt>
   15d1c:	ldr	r3, [sp, #4]
   15d20:	cmp	r0, #0
   15d24:	bne	159c0 <__assert_fail@plt+0x48d0>
   15d28:	str	fp, [sl]
   15d2c:	orr	r4, r4, #2
   15d30:	b	15958 <__assert_fail@plt+0x4868>
   15d34:	ldrb	r1, [r3, #2]
   15d38:	mov	r2, #1024	; 0x400
   15d3c:	cmp	r1, #66	; 0x42
   15d40:	movne	r1, #1
   15d44:	moveq	r1, #3
   15d48:	b	15b9c <__assert_fail@plt+0x4aac>
   15d4c:	cmp	fp, #0
   15d50:	blt	15e58 <__assert_fail@plt+0x4d68>
   15d54:	lsl	fp, fp, #1
   15d58:	b	15cd8 <__assert_fail@plt+0x4be8>
   15d5c:	mov	r1, #1
   15d60:	lsrs	r2, fp, #23
   15d64:	bne	15e58 <__assert_fail@plt+0x4d68>
   15d68:	lsl	fp, fp, #9
   15d6c:	b	15cd8 <__assert_fail@plt+0x4be8>
   15d70:	mov	r1, #1
   15d74:	mov	r2, #1024	; 0x400
   15d78:	mov	r0, #7
   15d7c:	mov	lr, #0
   15d80:	umull	r5, ip, r2, fp
   15d84:	cmp	ip, #0
   15d88:	movne	lr, #1
   15d8c:	muleq	fp, r2, fp
   15d90:	mvnne	fp, #0
   15d94:	subs	r0, r0, #1
   15d98:	bne	15d80 <__assert_fail@plt+0x4c90>
   15d9c:	orr	r4, r4, lr
   15da0:	b	15cd8 <__assert_fail@plt+0x4be8>
   15da4:	mov	r1, #1
   15da8:	mov	r2, #1024	; 0x400
   15dac:	mov	r0, #8
   15db0:	mov	lr, #0
   15db4:	umull	r5, ip, r2, fp
   15db8:	cmp	ip, #0
   15dbc:	movne	lr, #1
   15dc0:	muleq	fp, r2, fp
   15dc4:	mvnne	fp, #0
   15dc8:	subs	r0, r0, #1
   15dcc:	bne	15db4 <__assert_fail@plt+0x4cc4>
   15dd0:	b	15d9c <__assert_fail@plt+0x4cac>
   15dd4:	mov	r1, #1
   15dd8:	mov	r2, #1024	; 0x400
   15ddc:	mov	r0, #4
   15de0:	mov	lr, #0
   15de4:	umull	r5, ip, r2, fp
   15de8:	cmp	ip, #0
   15dec:	movne	lr, #1
   15df0:	muleq	fp, r2, fp
   15df4:	mvnne	fp, #0
   15df8:	subs	r0, r0, #1
   15dfc:	bne	15de4 <__assert_fail@plt+0x4cf4>
   15e00:	b	15d9c <__assert_fail@plt+0x4cac>
   15e04:	mov	r1, #1
   15e08:	mov	r2, #1024	; 0x400
   15e0c:	mov	r0, #5
   15e10:	mov	lr, #0
   15e14:	umull	r5, ip, r2, fp
   15e18:	cmp	ip, #0
   15e1c:	movne	lr, #1
   15e20:	muleq	fp, r2, fp
   15e24:	mvnne	fp, #0
   15e28:	subs	r0, r0, #1
   15e2c:	bne	15e14 <__assert_fail@plt+0x4d24>
   15e30:	b	15d9c <__assert_fail@plt+0x4cac>
   15e34:	mov	r1, #1
   15e38:	mov	r2, #1024	; 0x400
   15e3c:	umull	ip, r0, r2, fp
   15e40:	cmp	r0, #0
   15e44:	bne	15e58 <__assert_fail@plt+0x4d68>
   15e48:	mul	fp, r2, fp
   15e4c:	umull	ip, r0, r2, fp
   15e50:	cmp	r0, #0
   15e54:	beq	15d04 <__assert_fail@plt+0x4c14>
   15e58:	mov	r4, #1
   15e5c:	mvn	fp, #0
   15e60:	b	15cd8 <__assert_fail@plt+0x4be8>
   15e64:	mov	r1, #1
   15e68:	mov	r2, #1024	; 0x400
   15e6c:	mov	r0, #6
   15e70:	mov	lr, #0
   15e74:	umull	r5, ip, r2, fp
   15e78:	cmp	ip, #0
   15e7c:	movne	lr, #1
   15e80:	muleq	fp, r2, fp
   15e84:	mvnne	fp, #0
   15e88:	subs	r0, r0, #1
   15e8c:	bne	15e74 <__assert_fail@plt+0x4d84>
   15e90:	b	15d9c <__assert_fail@plt+0x4cac>
   15e94:	lsrs	r2, fp, #22
   15e98:	bne	15e58 <__assert_fail@plt+0x4d68>
   15e9c:	lsl	fp, fp, #10
   15ea0:	b	15cd8 <__assert_fail@plt+0x4be8>
   15ea4:	mov	r1, #1
   15ea8:	b	15cd8 <__assert_fail@plt+0x4be8>
   15eac:	mov	r1, #2
   15eb0:	mov	r2, #1000	; 0x3e8
   15eb4:	b	15b9c <__assert_fail@plt+0x4aac>
   15eb8:	mvn	fp, #0
   15ebc:	b	15cd4 <__assert_fail@plt+0x4be4>
   15ec0:	ldr	r3, [pc, #20]	; 15edc <__assert_fail@plt+0x4dec>
   15ec4:	mov	r2, #96	; 0x60
   15ec8:	ldr	r1, [pc, #16]	; 15ee0 <__assert_fail@plt+0x4df0>
   15ecc:	ldr	r0, [pc, #16]	; 15ee4 <__assert_fail@plt+0x4df4>
   15ed0:	bl	110f0 <__assert_fail@plt>
   15ed4:	bl	10eec <__stack_chk_fail@plt>
   15ed8:	andeq	r7, r2, r8, lsl #30
   15edc:			; <UNDEFINED> instruction: 0x000176b4
   15ee0:	andeq	r7, r1, r0, asr #13
   15ee4:	ldrdeq	r7, [r1], -r0
   15ee8:	push	{r4, r5, lr}
   15eec:	sub	sp, sp, #12
   15ef0:	mov	r4, r0
   15ef4:	bl	11054 <fileno@plt>
   15ef8:	cmp	r0, #0
   15efc:	mov	r0, r4
   15f00:	blt	15f7c <__assert_fail@plt+0x4e8c>
   15f04:	bl	10fac <__freading@plt>
   15f08:	cmp	r0, #0
   15f0c:	bne	15f48 <__assert_fail@plt+0x4e58>
   15f10:	mov	r0, r4
   15f14:	bl	15f88 <__assert_fail@plt+0x4e98>
   15f18:	cmp	r0, #0
   15f1c:	beq	15f78 <__assert_fail@plt+0x4e88>
   15f20:	bl	11024 <__errno_location@plt>
   15f24:	mov	r5, r0
   15f28:	mov	r0, r4
   15f2c:	ldr	r4, [r5]
   15f30:	bl	1106c <fclose@plt>
   15f34:	cmp	r4, #0
   15f38:	mvnne	r0, #0
   15f3c:	strne	r4, [r5]
   15f40:	add	sp, sp, #12
   15f44:	pop	{r4, r5, pc}
   15f48:	mov	r0, r4
   15f4c:	bl	11054 <fileno@plt>
   15f50:	mov	r3, #1
   15f54:	str	r3, [sp]
   15f58:	mov	r2, #0
   15f5c:	mov	r3, #0
   15f60:	bl	10f34 <lseek64@plt>
   15f64:	mvn	r3, #0
   15f68:	mvn	r2, #0
   15f6c:	cmp	r1, r3
   15f70:	cmpeq	r0, r2
   15f74:	bne	15f10 <__assert_fail@plt+0x4e20>
   15f78:	mov	r0, r4
   15f7c:	add	sp, sp, #12
   15f80:	pop	{r4, r5, lr}
   15f84:	b	1106c <fclose@plt>
   15f88:	push	{r4, lr}
   15f8c:	subs	r4, r0, #0
   15f90:	sub	sp, sp, #8
   15f94:	beq	15fb0 <__assert_fail@plt+0x4ec0>
   15f98:	bl	10fac <__freading@plt>
   15f9c:	cmp	r0, #0
   15fa0:	beq	15fb0 <__assert_fail@plt+0x4ec0>
   15fa4:	ldr	r3, [r4]
   15fa8:	tst	r3, #256	; 0x100
   15fac:	bne	15fc0 <__assert_fail@plt+0x4ed0>
   15fb0:	mov	r0, r4
   15fb4:	add	sp, sp, #8
   15fb8:	pop	{r4, lr}
   15fbc:	b	10e8c <fflush@plt>
   15fc0:	mov	r3, #1
   15fc4:	str	r3, [sp]
   15fc8:	mov	r2, #0
   15fcc:	mov	r3, #0
   15fd0:	mov	r0, r4
   15fd4:	bl	15fe8 <__assert_fail@plt+0x4ef8>
   15fd8:	mov	r0, r4
   15fdc:	add	sp, sp, #8
   15fe0:	pop	{r4, lr}
   15fe4:	b	10e8c <fflush@plt>
   15fe8:	push	{r4, r5, r6, r7, r8, lr}
   15fec:	sub	sp, sp, #8
   15ff0:	ldmib	r0, {ip, lr}
   15ff4:	mov	r4, r0
   15ff8:	ldr	r5, [sp, #32]
   15ffc:	cmp	lr, ip
   16000:	beq	16018 <__assert_fail@plt+0x4f28>
   16004:	str	r5, [sp, #32]
   16008:	mov	r0, r4
   1600c:	add	sp, sp, #8
   16010:	pop	{r4, r5, r6, r7, r8, lr}
   16014:	b	11078 <fseeko64@plt>
   16018:	ldr	lr, [r0, #20]
   1601c:	ldr	ip, [r0, #16]
   16020:	cmp	lr, ip
   16024:	bne	16004 <__assert_fail@plt+0x4f14>
   16028:	ldr	r8, [r0, #36]	; 0x24
   1602c:	cmp	r8, #0
   16030:	bne	16004 <__assert_fail@plt+0x4f14>
   16034:	mov	r6, r2
   16038:	mov	r7, r3
   1603c:	bl	11054 <fileno@plt>
   16040:	mov	r2, r6
   16044:	mov	r3, r7
   16048:	str	r5, [sp]
   1604c:	bl	10f34 <lseek64@plt>
   16050:	mvn	r3, #0
   16054:	mvn	r2, #0
   16058:	cmp	r1, r3
   1605c:	cmpeq	r0, r2
   16060:	beq	16080 <__assert_fail@plt+0x4f90>
   16064:	ldr	r3, [r4]
   16068:	strd	r0, [r4, #80]	; 0x50
   1606c:	mov	r0, r8
   16070:	bic	r3, r3, #16
   16074:	str	r3, [r4]
   16078:	add	sp, sp, #8
   1607c:	pop	{r4, r5, r6, r7, r8, pc}
   16080:	mvn	r0, #0
   16084:	b	16078 <__assert_fail@plt+0x4f88>
   16088:	push	{r4, r5, r6, r7, r8, lr}
   1608c:	subs	r7, r0, #0
   16090:	ldr	r5, [pc, #108]	; 16104 <__assert_fail@plt+0x5014>
   16094:	sub	sp, sp, #8
   16098:	mov	r8, r1
   1609c:	ldr	r1, [r5]
   160a0:	moveq	r7, sp
   160a4:	str	r1, [sp, #4]
   160a8:	mov	r0, r7
   160ac:	mov	r1, r8
   160b0:	mov	r6, r2
   160b4:	bl	10f58 <mbrtowc@plt>
   160b8:	cmp	r6, #0
   160bc:	cmnne	r0, #3
   160c0:	mov	r4, r0
   160c4:	bhi	160e4 <__assert_fail@plt+0x4ff4>
   160c8:	ldr	r2, [sp, #4]
   160cc:	ldr	r3, [r5]
   160d0:	mov	r0, r4
   160d4:	cmp	r2, r3
   160d8:	bne	16100 <__assert_fail@plt+0x5010>
   160dc:	add	sp, sp, #8
   160e0:	pop	{r4, r5, r6, r7, r8, pc}
   160e4:	mov	r0, #0
   160e8:	bl	12a80 <__assert_fail@plt+0x1990>
   160ec:	cmp	r0, #0
   160f0:	moveq	r4, #1
   160f4:	ldrbeq	r3, [r8]
   160f8:	streq	r3, [r7]
   160fc:	b	160c8 <__assert_fail@plt+0x4fd8>
   16100:	bl	10eec <__stack_chk_fail@plt>
   16104:	andeq	r7, r2, r8, lsl #30
   16108:	push	{r4, r5, r6, lr}
   1610c:	mov	r4, r0
   16110:	bl	10f4c <__fpending@plt>
   16114:	ldr	r5, [r4]
   16118:	and	r5, r5, #32
   1611c:	mov	r6, r0
   16120:	mov	r0, r4
   16124:	bl	15ee8 <__assert_fail@plt+0x4df8>
   16128:	cmp	r5, #0
   1612c:	mov	r4, r0
   16130:	bne	1615c <__assert_fail@plt+0x506c>
   16134:	cmp	r0, #0
   16138:	beq	16154 <__assert_fail@plt+0x5064>
   1613c:	cmp	r6, #0
   16140:	bne	16174 <__assert_fail@plt+0x5084>
   16144:	bl	11024 <__errno_location@plt>
   16148:	ldr	r4, [r0]
   1614c:	subs	r4, r4, #9
   16150:	mvnne	r4, #0
   16154:	mov	r0, r4
   16158:	pop	{r4, r5, r6, pc}
   1615c:	cmp	r0, #0
   16160:	bne	16174 <__assert_fail@plt+0x5084>
   16164:	bl	11024 <__errno_location@plt>
   16168:	str	r4, [r0]
   1616c:	mvn	r4, #0
   16170:	b	16154 <__assert_fail@plt+0x5064>
   16174:	mvn	r4, #0
   16178:	b	16154 <__assert_fail@plt+0x5064>
   1617c:	push	{r4, lr}
   16180:	mov	r0, #14
   16184:	bl	110b4 <nl_langinfo@plt>
   16188:	cmp	r0, #0
   1618c:	beq	161a4 <__assert_fail@plt+0x50b4>
   16190:	ldrb	r2, [r0]
   16194:	ldr	r3, [pc, #16]	; 161ac <__assert_fail@plt+0x50bc>
   16198:	cmp	r2, #0
   1619c:	moveq	r0, r3
   161a0:	pop	{r4, pc}
   161a4:	ldr	r0, [pc]	; 161ac <__assert_fail@plt+0x50bc>
   161a8:	pop	{r4, pc}
   161ac:	strdeq	r7, [r1], -r8
   161b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161b4:	mov	r4, r0
   161b8:	mov	r8, r1
   161bc:	mov	r5, r2
   161c0:	mov	r7, r3
   161c4:	bl	11024 <__errno_location@plt>
   161c8:	mov	sl, #0
   161cc:	mov	r9, r0
   161d0:	b	16204 <__assert_fail@plt+0x5114>
   161d4:	bl	1100c <strlen@plt>
   161d8:	add	r6, r0, #1
   161dc:	mov	r0, r5
   161e0:	bl	1100c <strlen@plt>
   161e4:	subs	r8, r8, r6
   161e8:	add	r4, r4, r6
   161ec:	add	r0, r0, #1
   161f0:	add	r5, r5, r0
   161f4:	sub	r7, r7, r0
   161f8:	beq	16228 <__assert_fail@plt+0x5138>
   161fc:	cmp	r7, #0
   16200:	beq	1623c <__assert_fail@plt+0x514c>
   16204:	str	sl, [r9]
   16208:	mov	r1, r5
   1620c:	mov	r0, r4
   16210:	bl	10f7c <strcoll@plt>
   16214:	subs	r3, r0, #0
   16218:	mov	r0, r4
   1621c:	beq	161d4 <__assert_fail@plt+0x50e4>
   16220:	mov	r0, r3
   16224:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16228:	adds	r7, r7, #0
   1622c:	movne	r7, #1
   16230:	rsb	r3, r7, #0
   16234:	mov	r0, r3
   16238:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1623c:	mov	r3, #1
   16240:	mov	r0, r3
   16244:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16248:	cmp	r1, r3
   1624c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16250:	mov	r4, r1
   16254:	mov	r5, r3
   16258:	mov	r6, r2
   1625c:	mov	r7, r0
   16260:	bne	16278 <__assert_fail@plt+0x5188>
   16264:	mov	r2, r1
   16268:	mov	r1, r6
   1626c:	bl	10ed4 <memcmp@plt>
   16270:	subs	r8, r0, #0
   16274:	beq	162b4 <__assert_fail@plt+0x51c4>
   16278:	mov	r1, #0
   1627c:	ldrb	sl, [r7, r4]
   16280:	ldrb	r9, [r6, r5]
   16284:	add	r3, r5, #1
   16288:	strb	r1, [r7, r4]
   1628c:	mov	r2, r6
   16290:	strb	r1, [r6, r5]
   16294:	mov	r0, r7
   16298:	add	r1, r4, #1
   1629c:	bl	161b0 <__assert_fail@plt+0x50c0>
   162a0:	strb	sl, [r7, r4]
   162a4:	strb	r9, [r6, r5]
   162a8:	mov	r8, r0
   162ac:	mov	r0, r8
   162b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162b4:	bl	11024 <__errno_location@plt>
   162b8:	str	r8, [r0]
   162bc:	mov	r0, r8
   162c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162c4:	cmp	r1, r3
   162c8:	push	{r4, r5, r6, r7, r8, lr}
   162cc:	mov	r4, r1
   162d0:	mov	r5, r3
   162d4:	mov	r6, r2
   162d8:	mov	r7, r0
   162dc:	bne	16304 <__assert_fail@plt+0x5214>
   162e0:	mov	r2, r1
   162e4:	mov	r1, r6
   162e8:	bl	10ed4 <memcmp@plt>
   162ec:	subs	r8, r0, #0
   162f0:	bne	16304 <__assert_fail@plt+0x5214>
   162f4:	bl	11024 <__errno_location@plt>
   162f8:	str	r8, [r0]
   162fc:	mov	r0, r8
   16300:	pop	{r4, r5, r6, r7, r8, pc}
   16304:	mov	r3, r5
   16308:	mov	r2, r6
   1630c:	mov	r1, r4
   16310:	mov	r0, r7
   16314:	pop	{r4, r5, r6, r7, r8, lr}
   16318:	b	161b0 <__assert_fail@plt+0x50c0>
   1631c:	subs	r2, r1, #1
   16320:	bxeq	lr
   16324:	bcc	164fc <__assert_fail@plt+0x540c>
   16328:	cmp	r0, r1
   1632c:	bls	164e0 <__assert_fail@plt+0x53f0>
   16330:	tst	r1, r2
   16334:	beq	164ec <__assert_fail@plt+0x53fc>
   16338:	clz	r3, r0
   1633c:	clz	r2, r1
   16340:	sub	r3, r2, r3
   16344:	rsbs	r3, r3, #31
   16348:	addne	r3, r3, r3, lsl #1
   1634c:	mov	r2, #0
   16350:	addne	pc, pc, r3, lsl #2
   16354:	nop			; (mov r0, r0)
   16358:	cmp	r0, r1, lsl #31
   1635c:	adc	r2, r2, r2
   16360:	subcs	r0, r0, r1, lsl #31
   16364:	cmp	r0, r1, lsl #30
   16368:	adc	r2, r2, r2
   1636c:	subcs	r0, r0, r1, lsl #30
   16370:	cmp	r0, r1, lsl #29
   16374:	adc	r2, r2, r2
   16378:	subcs	r0, r0, r1, lsl #29
   1637c:	cmp	r0, r1, lsl #28
   16380:	adc	r2, r2, r2
   16384:	subcs	r0, r0, r1, lsl #28
   16388:	cmp	r0, r1, lsl #27
   1638c:	adc	r2, r2, r2
   16390:	subcs	r0, r0, r1, lsl #27
   16394:	cmp	r0, r1, lsl #26
   16398:	adc	r2, r2, r2
   1639c:	subcs	r0, r0, r1, lsl #26
   163a0:	cmp	r0, r1, lsl #25
   163a4:	adc	r2, r2, r2
   163a8:	subcs	r0, r0, r1, lsl #25
   163ac:	cmp	r0, r1, lsl #24
   163b0:	adc	r2, r2, r2
   163b4:	subcs	r0, r0, r1, lsl #24
   163b8:	cmp	r0, r1, lsl #23
   163bc:	adc	r2, r2, r2
   163c0:	subcs	r0, r0, r1, lsl #23
   163c4:	cmp	r0, r1, lsl #22
   163c8:	adc	r2, r2, r2
   163cc:	subcs	r0, r0, r1, lsl #22
   163d0:	cmp	r0, r1, lsl #21
   163d4:	adc	r2, r2, r2
   163d8:	subcs	r0, r0, r1, lsl #21
   163dc:	cmp	r0, r1, lsl #20
   163e0:	adc	r2, r2, r2
   163e4:	subcs	r0, r0, r1, lsl #20
   163e8:	cmp	r0, r1, lsl #19
   163ec:	adc	r2, r2, r2
   163f0:	subcs	r0, r0, r1, lsl #19
   163f4:	cmp	r0, r1, lsl #18
   163f8:	adc	r2, r2, r2
   163fc:	subcs	r0, r0, r1, lsl #18
   16400:	cmp	r0, r1, lsl #17
   16404:	adc	r2, r2, r2
   16408:	subcs	r0, r0, r1, lsl #17
   1640c:	cmp	r0, r1, lsl #16
   16410:	adc	r2, r2, r2
   16414:	subcs	r0, r0, r1, lsl #16
   16418:	cmp	r0, r1, lsl #15
   1641c:	adc	r2, r2, r2
   16420:	subcs	r0, r0, r1, lsl #15
   16424:	cmp	r0, r1, lsl #14
   16428:	adc	r2, r2, r2
   1642c:	subcs	r0, r0, r1, lsl #14
   16430:	cmp	r0, r1, lsl #13
   16434:	adc	r2, r2, r2
   16438:	subcs	r0, r0, r1, lsl #13
   1643c:	cmp	r0, r1, lsl #12
   16440:	adc	r2, r2, r2
   16444:	subcs	r0, r0, r1, lsl #12
   16448:	cmp	r0, r1, lsl #11
   1644c:	adc	r2, r2, r2
   16450:	subcs	r0, r0, r1, lsl #11
   16454:	cmp	r0, r1, lsl #10
   16458:	adc	r2, r2, r2
   1645c:	subcs	r0, r0, r1, lsl #10
   16460:	cmp	r0, r1, lsl #9
   16464:	adc	r2, r2, r2
   16468:	subcs	r0, r0, r1, lsl #9
   1646c:	cmp	r0, r1, lsl #8
   16470:	adc	r2, r2, r2
   16474:	subcs	r0, r0, r1, lsl #8
   16478:	cmp	r0, r1, lsl #7
   1647c:	adc	r2, r2, r2
   16480:	subcs	r0, r0, r1, lsl #7
   16484:	cmp	r0, r1, lsl #6
   16488:	adc	r2, r2, r2
   1648c:	subcs	r0, r0, r1, lsl #6
   16490:	cmp	r0, r1, lsl #5
   16494:	adc	r2, r2, r2
   16498:	subcs	r0, r0, r1, lsl #5
   1649c:	cmp	r0, r1, lsl #4
   164a0:	adc	r2, r2, r2
   164a4:	subcs	r0, r0, r1, lsl #4
   164a8:	cmp	r0, r1, lsl #3
   164ac:	adc	r2, r2, r2
   164b0:	subcs	r0, r0, r1, lsl #3
   164b4:	cmp	r0, r1, lsl #2
   164b8:	adc	r2, r2, r2
   164bc:	subcs	r0, r0, r1, lsl #2
   164c0:	cmp	r0, r1, lsl #1
   164c4:	adc	r2, r2, r2
   164c8:	subcs	r0, r0, r1, lsl #1
   164cc:	cmp	r0, r1
   164d0:	adc	r2, r2, r2
   164d4:	subcs	r0, r0, r1
   164d8:	mov	r0, r2
   164dc:	bx	lr
   164e0:	moveq	r0, #1
   164e4:	movne	r0, #0
   164e8:	bx	lr
   164ec:	clz	r2, r1
   164f0:	rsb	r2, r2, #31
   164f4:	lsr	r0, r0, r2
   164f8:	bx	lr
   164fc:	cmp	r0, #0
   16500:	mvnne	r0, #0
   16504:	b	16528 <__assert_fail@plt+0x5438>
   16508:	cmp	r1, #0
   1650c:	beq	164fc <__assert_fail@plt+0x540c>
   16510:	push	{r0, r1, lr}
   16514:	bl	1631c <__assert_fail@plt+0x522c>
   16518:	pop	{r1, r2, lr}
   1651c:	mul	r3, r2, r0
   16520:	sub	r1, r1, r3
   16524:	bx	lr
   16528:	push	{r1, lr}
   1652c:	mov	r0, #8
   16530:	bl	10e5c <raise@plt>
   16534:	pop	{r1, pc}
   16538:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1653c:	mov	r7, r0
   16540:	ldr	r6, [pc, #72]	; 16590 <__assert_fail@plt+0x54a0>
   16544:	ldr	r5, [pc, #72]	; 16594 <__assert_fail@plt+0x54a4>
   16548:	add	r6, pc, r6
   1654c:	add	r5, pc, r5
   16550:	sub	r6, r6, r5
   16554:	mov	r8, r1
   16558:	mov	r9, r2
   1655c:	bl	10e24 <calloc@plt-0x20>
   16560:	asrs	r6, r6, #2
   16564:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16568:	mov	r4, #0
   1656c:	add	r4, r4, #1
   16570:	ldr	r3, [r5], #4
   16574:	mov	r2, r9
   16578:	mov	r1, r8
   1657c:	mov	r0, r7
   16580:	blx	r3
   16584:	cmp	r6, r4
   16588:	bne	1656c <__assert_fail@plt+0x547c>
   1658c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16590:			; <UNDEFINED> instruction: 0x000119b4
   16594:	andeq	r1, r1, ip, lsr #19
   16598:	bx	lr
   1659c:	ldr	r3, [pc, #12]	; 165b0 <__assert_fail@plt+0x54c0>
   165a0:	mov	r1, #0
   165a4:	add	r3, pc, r3
   165a8:	ldr	r2, [r3]
   165ac:	b	11030 <__cxa_atexit@plt>
   165b0:	andeq	r1, r1, r0, asr fp

Disassembly of section .fini:

000165b4 <.fini>:
   165b4:	push	{r3, lr}
   165b8:	pop	{r3, pc}
