
raspbian-preinstalled/fdtdump:     file format elf32-littlearm


Disassembly of section .init:

000107fc <.init>:
   107fc:	push	{r3, lr}
   10800:	bl	112e0 <__assert_fail@plt+0x95c>
   10804:	pop	{r3, pc}

Disassembly of section .plt:

00010808 <strcmp@plt-0x14>:
   10808:	push	{lr}		; (str lr, [sp, #-4]!)
   1080c:	ldr	lr, [pc, #4]	; 10818 <strcmp@plt-0x4>
   10810:	add	lr, pc, lr
   10814:	ldr	pc, [lr, #8]!
   10818:	andeq	r2, r1, ip, asr #14

0001081c <strcmp@plt>:
   1081c:	add	ip, pc, #0, 12
   10820:	add	ip, ip, #73728	; 0x12000
   10824:	ldr	pc, [ip, #1868]!	; 0x74c

00010828 <strtol@plt>:
   10828:	add	ip, pc, #0, 12
   1082c:	add	ip, ip, #73728	; 0x12000
   10830:	ldr	pc, [ip, #1860]!	; 0x744

00010834 <read@plt>:
   10834:	add	ip, pc, #0, 12
   10838:	add	ip, ip, #73728	; 0x12000
   1083c:	ldr	pc, [ip, #1852]!	; 0x73c

00010840 <free@plt>:
   10840:	add	ip, pc, #0, 12
   10844:	add	ip, ip, #73728	; 0x12000
   10848:	ldr	pc, [ip, #1844]!	; 0x734

0001084c <__vsnprintf_chk@plt>:
   1084c:	add	ip, pc, #0, 12
   10850:	add	ip, ip, #73728	; 0x12000
   10854:	ldr	pc, [ip, #1836]!	; 0x72c

00010858 <memcpy@plt>:
   10858:	add	ip, pc, #0, 12
   1085c:	add	ip, ip, #73728	; 0x12000
   10860:	ldr	pc, [ip, #1828]!	; 0x724

00010864 <__stack_chk_fail@plt>:
   10864:	add	ip, pc, #0, 12
   10868:	add	ip, ip, #73728	; 0x12000
   1086c:	ldr	pc, [ip, #1820]!	; 0x71c

00010870 <realloc@plt>:
   10870:	add	ip, pc, #0, 12
   10874:	add	ip, ip, #73728	; 0x12000
   10878:	ldr	pc, [ip, #1812]!	; 0x714

0001087c <fwrite@plt>:
   1087c:	add	ip, pc, #0, 12
   10880:	add	ip, ip, #73728	; 0x12000
   10884:	ldr	pc, [ip, #1804]!	; 0x70c

00010888 <puts@plt>:
   10888:	add	ip, pc, #0, 12
   1088c:	add	ip, ip, #73728	; 0x12000
   10890:	ldr	pc, [ip, #1796]!	; 0x704

00010894 <malloc@plt>:
   10894:	add	ip, pc, #0, 12
   10898:	add	ip, ip, #73728	; 0x12000
   1089c:	ldr	pc, [ip, #1788]!	; 0x6fc

000108a0 <__libc_start_main@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #73728	; 0x12000
   108a8:	ldr	pc, [ip, #1780]!	; 0x6f4

000108ac <strerror@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #73728	; 0x12000
   108b4:	ldr	pc, [ip, #1772]!	; 0x6ec

000108b8 <__vfprintf_chk@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #73728	; 0x12000
   108c0:	ldr	pc, [ip, #1764]!	; 0x6e4

000108c4 <__gmon_start__@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #73728	; 0x12000
   108cc:	ldr	pc, [ip, #1756]!	; 0x6dc

000108d0 <open@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #73728	; 0x12000
   108d8:	ldr	pc, [ip, #1748]!	; 0x6d4

000108dc <getopt_long@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #73728	; 0x12000
   108e4:	ldr	pc, [ip, #1740]!	; 0x6cc

000108e8 <__ctype_b_loc@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #73728	; 0x12000
   108f0:	ldr	pc, [ip, #1732]!	; 0x6c4

000108f4 <exit@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #73728	; 0x12000
   108fc:	ldr	pc, [ip, #1724]!	; 0x6bc

00010900 <strlen@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #73728	; 0x12000
   10908:	ldr	pc, [ip, #1716]!	; 0x6b4

0001090c <strchr@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #73728	; 0x12000
   10914:	ldr	pc, [ip, #1708]!	; 0x6ac

00010918 <__errno_location@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #73728	; 0x12000
   10920:	ldr	pc, [ip, #1700]!	; 0x6a4

00010924 <putchar@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #73728	; 0x12000
   1092c:	ldr	pc, [ip, #1692]!	; 0x69c

00010930 <strncpy@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #73728	; 0x12000
   10938:	ldr	pc, [ip, #1684]!	; 0x694

0001093c <__printf_chk@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #73728	; 0x12000
   10944:	ldr	pc, [ip, #1676]!	; 0x68c

00010948 <write@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #73728	; 0x12000
   10950:	ldr	pc, [ip, #1668]!	; 0x684

00010954 <__fprintf_chk@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #73728	; 0x12000
   1095c:	ldr	pc, [ip, #1660]!	; 0x67c

00010960 <memchr@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #73728	; 0x12000
   10968:	ldr	pc, [ip, #1652]!	; 0x674

0001096c <abort@plt>:
   1096c:	add	ip, pc, #0, 12
   10970:	add	ip, ip, #73728	; 0x12000
   10974:	ldr	pc, [ip, #1644]!	; 0x66c

00010978 <close@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #73728	; 0x12000
   10980:	ldr	pc, [ip, #1636]!	; 0x664

00010984 <__assert_fail@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #73728	; 0x12000
   1098c:	ldr	pc, [ip, #1628]!	; 0x65c

Disassembly of section .text:

00010990 <.text>:
   10990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10994:	mov	r5, r0
   10998:	ldr	fp, [pc, #2128]	; 111f0 <__assert_fail@plt+0x86c>
   1099c:	ldr	r2, [pc, #2128]	; 111f4 <__assert_fail@plt+0x870>
   109a0:	add	fp, pc, fp
   109a4:	sub	sp, sp, #60	; 0x3c
   109a8:	ldr	r2, [fp, r2]
   109ac:	ldr	r3, [pc, #2116]	; 111f8 <__assert_fail@plt+0x874>
   109b0:	mov	r0, r2
   109b4:	str	r2, [sp, #28]
   109b8:	ldr	r0, [r0]
   109bc:	ldr	r8, [pc, #2104]	; 111fc <__assert_fail@plt+0x878>
   109c0:	str	r0, [sp, #52]	; 0x34
   109c4:	ldr	r3, [fp, r3]
   109c8:	ldr	r0, [pc, #2096]	; 11200 <__assert_fail@plt+0x87c>
   109cc:	ldr	r9, [pc, #2096]	; 11204 <__assert_fail@plt+0x880>
   109d0:	str	r3, [sp, #36]	; 0x24
   109d4:	mov	r4, #0
   109d8:	mov	r7, r1
   109dc:	mov	r2, #166	; 0xa6
   109e0:	mov	r1, #1
   109e4:	add	r0, pc, r0
   109e8:	ldr	r3, [r3]
   109ec:	bl	1087c <fwrite@plt>
   109f0:	mov	r6, r4
   109f4:	mov	sl, r4
   109f8:	add	r8, pc, r8
   109fc:	add	r9, pc, r9
   10a00:	b	10a18 <__assert_fail@plt+0x94>
   10a04:	ble	10a48 <__assert_fail@plt+0xc4>
   10a08:	cmp	r0, #104	; 0x68
   10a0c:	beq	11184 <__assert_fail@plt+0x800>
   10a10:	cmp	r0, #115	; 0x73
   10a14:	moveq	r4, #1
   10a18:	str	sl, [sp]
   10a1c:	mov	r3, r8
   10a20:	mov	r2, r9
   10a24:	mov	r1, r7
   10a28:	mov	r0, r5
   10a2c:	bl	108dc <getopt_long@plt>
   10a30:	cmn	r0, #1
   10a34:	beq	10a5c <__assert_fail@plt+0xd8>
   10a38:	cmp	r0, #100	; 0x64
   10a3c:	bne	10a04 <__assert_fail@plt+0x80>
   10a40:	mov	r6, #1
   10a44:	b	10a18 <__assert_fail@plt+0x94>
   10a48:	cmp	r0, #63	; 0x3f
   10a4c:	beq	11164 <__assert_fail@plt+0x7e0>
   10a50:	cmp	r0, #86	; 0x56
   10a54:	bne	10a18 <__assert_fail@plt+0x94>
   10a58:	bl	120b0 <__assert_fail@plt+0x172c>
   10a5c:	ldr	r3, [pc, #1956]	; 11208 <__assert_fail@plt+0x884>
   10a60:	sub	r5, r5, #1
   10a64:	ldr	r3, [fp, r3]
   10a68:	ldr	r3, [r3]
   10a6c:	cmp	r5, r3
   10a70:	bne	111d0 <__assert_fail@plt+0x84c>
   10a74:	ldr	r9, [r7, r5, lsl #2]
   10a78:	add	r1, sp, #48	; 0x30
   10a7c:	mov	r0, r9
   10a80:	bl	11bc0 <__assert_fail@plt+0x123c>
   10a84:	subs	r7, r0, #0
   10a88:	beq	111c0 <__assert_fail@plt+0x83c>
   10a8c:	cmp	r4, #0
   10a90:	ldr	r1, [sp, #48]	; 0x30
   10a94:	beq	10b48 <__assert_fail@plt+0x1c4>
   10a98:	cmp	r1, #3
   10a9c:	add	r5, r7, r1
   10aa0:	ble	111a0 <__assert_fail@plt+0x81c>
   10aa4:	ldr	sl, [pc, #1888]	; 1120c <__assert_fail@plt+0x888>
   10aa8:	ldr	r8, [pc, #1888]	; 11210 <__assert_fail@plt+0x88c>
   10aac:	add	sl, pc, sl
   10ab0:	mov	r4, r7
   10ab4:	mov	r2, r1
   10ab8:	b	10ad0 <__assert_fail@plt+0x14c>
   10abc:	add	r4, r4, #1
   10ac0:	sub	fp, r5, r4
   10ac4:	cmp	fp, #3
   10ac8:	mov	r2, fp
   10acc:	ble	11074 <__assert_fail@plt+0x6f0>
   10ad0:	mov	r0, r4
   10ad4:	sub	r2, r2, #4
   10ad8:	mov	r1, #208	; 0xd0
   10adc:	bl	10960 <memchr@plt>
   10ae0:	subs	r4, r0, #0
   10ae4:	beq	11154 <__assert_fail@plt+0x7d0>
   10ae8:	ldr	r3, [r4]
   10aec:	lsr	r2, r3, #24
   10af0:	lsl	r1, r3, #8
   10af4:	orr	r2, r2, r3, lsl #24
   10af8:	and	r1, r1, #16711680	; 0xff0000
   10afc:	lsr	r3, r3, #8
   10b00:	orr	r2, r2, r1
   10b04:	and	r3, r3, #65280	; 0xff00
   10b08:	orr	r3, r2, r3
   10b0c:	cmp	r3, r8
   10b10:	bne	10abc <__assert_fail@plt+0x138>
   10b14:	sub	fp, r5, r4
   10b18:	mov	r1, fp
   10b1c:	bl	11394 <__assert_fail@plt+0xa10>
   10b20:	cmp	r0, #0
   10b24:	bne	1107c <__assert_fail@plt+0x6f8>
   10b28:	cmp	r6, #0
   10b2c:	beq	10abc <__assert_fail@plt+0x138>
   10b30:	sub	r3, r4, r7
   10b34:	mov	r2, r9
   10b38:	mov	r1, sl
   10b3c:	mov	r0, #1
   10b40:	bl	1093c <__printf_chk@plt>
   10b44:	b	10abc <__assert_fail@plt+0x138>
   10b48:	bl	11394 <__assert_fail@plt+0xa10>
   10b4c:	cmp	r0, #0
   10b50:	beq	111ac <__assert_fail@plt+0x828>
   10b54:	add	r0, r7, #8
   10b58:	ldr	r2, [r7, #20]
   10b5c:	ldm	r0, {r0, r1, r5}
   10b60:	ldr	r3, [r7, #4]
   10b64:	lsr	sl, r5, #24
   10b68:	lsl	lr, r5, #8
   10b6c:	orr	r8, sl, r5, lsl #24
   10b70:	and	lr, lr, #16711680	; 0xff0000
   10b74:	orr	sl, r8, lr
   10b78:	lsr	r4, r0, #24
   10b7c:	lsr	r8, r1, #24
   10b80:	lsl	ip, r0, #8
   10b84:	orr	lr, r8, r1, lsl #24
   10b88:	orr	r4, r4, r0, lsl #24
   10b8c:	lsl	r8, r1, #8
   10b90:	and	ip, ip, #16711680	; 0xff0000
   10b94:	orr	r4, r4, ip
   10b98:	and	ip, r8, #16711680	; 0xff0000
   10b9c:	orr	r8, lr, ip
   10ba0:	lsr	lr, r2, #24
   10ba4:	orr	r9, lr, r2, lsl #24
   10ba8:	lsl	lr, r2, #8
   10bac:	and	ip, lr, #16711680	; 0xff0000
   10bb0:	lsr	r0, r0, #8
   10bb4:	orr	lr, r9, ip
   10bb8:	and	r0, r0, #65280	; 0xff00
   10bbc:	lsr	ip, r3, #24
   10bc0:	orr	r9, ip, r3, lsl #24
   10bc4:	orr	r4, r4, r0
   10bc8:	lsl	ip, r3, #8
   10bcc:	lsr	r5, r5, #8
   10bd0:	lsr	r1, r1, #8
   10bd4:	lsr	r2, r2, #8
   10bd8:	ldr	r0, [pc, #1588]	; 11214 <__assert_fail@plt+0x890>
   10bdc:	and	r1, r1, #65280	; 0xff00
   10be0:	and	r2, r2, #65280	; 0xff00
   10be4:	and	r5, r5, #65280	; 0xff00
   10be8:	and	ip, ip, #16711680	; 0xff0000
   10bec:	lsr	r3, r3, #8
   10bf0:	orr	ip, r9, ip
   10bf4:	and	r3, r3, #65280	; 0xff00
   10bf8:	orr	r9, lr, r2
   10bfc:	orr	r5, sl, r5
   10c00:	add	r0, pc, r0
   10c04:	orr	sl, r8, r1
   10c08:	str	sl, [sp, #12]
   10c0c:	orr	r8, ip, r3
   10c10:	str	r9, [sp, #16]
   10c14:	bl	10888 <puts@plt>
   10c18:	ldr	r3, [r7]
   10c1c:	ldr	r1, [pc, #1524]	; 11218 <__assert_fail@plt+0x894>
   10c20:	lsr	r2, r3, #24
   10c24:	lsl	r0, r3, #8
   10c28:	orr	r2, r2, r3, lsl #24
   10c2c:	and	r0, r0, #16711680	; 0xff0000
   10c30:	lsr	r3, r3, #8
   10c34:	and	r3, r3, #65280	; 0xff00
   10c38:	orr	r2, r2, r0
   10c3c:	orr	r2, r2, r3
   10c40:	add	r1, pc, r1
   10c44:	mov	r0, #1
   10c48:	bl	1093c <__printf_chk@plt>
   10c4c:	ldr	r1, [pc, #1480]	; 1121c <__assert_fail@plt+0x898>
   10c50:	mov	r3, r8
   10c54:	mov	r2, r8
   10c58:	add	r1, pc, r1
   10c5c:	mov	r0, #1
   10c60:	bl	1093c <__printf_chk@plt>
   10c64:	ldr	r1, [pc, #1460]	; 11220 <__assert_fail@plt+0x89c>
   10c68:	mov	r2, r4
   10c6c:	add	r1, pc, r1
   10c70:	mov	r0, #1
   10c74:	bl	1093c <__printf_chk@plt>
   10c78:	ldr	r1, [pc, #1444]	; 11224 <__assert_fail@plt+0x8a0>
   10c7c:	mov	r2, sl
   10c80:	add	r1, pc, r1
   10c84:	mov	r0, #1
   10c88:	bl	1093c <__printf_chk@plt>
   10c8c:	ldr	r1, [pc, #1428]	; 11228 <__assert_fail@plt+0x8a4>
   10c90:	mov	r2, r5
   10c94:	add	r1, pc, r1
   10c98:	mov	r0, #1
   10c9c:	bl	1093c <__printf_chk@plt>
   10ca0:	ldr	r1, [pc, #1412]	; 1122c <__assert_fail@plt+0x8a8>
   10ca4:	mov	r2, r9
   10ca8:	add	r1, pc, r1
   10cac:	mov	r0, #1
   10cb0:	bl	1093c <__printf_chk@plt>
   10cb4:	ldr	r3, [r7, #24]
   10cb8:	ldr	r1, [pc, #1392]	; 11230 <__assert_fail@plt+0x8ac>
   10cbc:	add	r4, r7, r4
   10cc0:	lsr	r2, r3, #24
   10cc4:	lsl	r0, r3, #8
   10cc8:	orr	r2, r2, r3, lsl #24
   10ccc:	and	r0, r0, #16711680	; 0xff0000
   10cd0:	lsr	r3, r3, #8
   10cd4:	orr	r2, r2, r0
   10cd8:	and	r3, r3, #65280	; 0xff00
   10cdc:	add	r1, pc, r1
   10ce0:	orr	r2, r2, r3
   10ce4:	mov	r0, #1
   10ce8:	bl	1093c <__printf_chk@plt>
   10cec:	cmp	r9, #1
   10cf0:	bhi	110a4 <__assert_fail@plt+0x720>
   10cf4:	mov	r0, #10
   10cf8:	bl	10924 <putchar@plt>
   10cfc:	ldr	r3, [pc, #1328]	; 11234 <__assert_fail@plt+0x8b0>
   10d00:	add	r5, r7, r5
   10d04:	add	r3, pc, r3
   10d08:	str	r7, [sp, #20]
   10d0c:	str	r6, [sp, #24]
   10d10:	str	r4, [sp, #32]
   10d14:	mov	r6, r5
   10d18:	mov	r7, r3
   10d1c:	b	10d30 <__assert_fail@plt+0x3ac>
   10d20:	stm	sp, {r8, ip}
   10d24:	mov	r1, r7
   10d28:	mov	r0, #1
   10d2c:	bl	1093c <__printf_chk@plt>
   10d30:	ldr	r3, [r6, #4]
   10d34:	ldr	r0, [r6, #12]
   10d38:	ldr	lr, [r6]
   10d3c:	lsr	sl, r3, #8
   10d40:	lsl	r2, r3, #24
   10d44:	orr	r2, r2, r3, lsr #24
   10d48:	lsr	r8, r0, #8
   10d4c:	lsr	r3, r3, #16
   10d50:	uxtb	sl, sl
   10d54:	uxtb	r8, r8
   10d58:	orr	sl, r2, sl, lsl #16
   10d5c:	uxtb	r2, r3
   10d60:	lsl	r3, r0, #24
   10d64:	ldr	ip, [r6, #8]
   10d68:	orr	r3, r3, r0, lsr #24
   10d6c:	lsr	r0, r0, #16
   10d70:	orr	r8, r3, r8, lsl #16
   10d74:	lsl	r3, lr, #8
   10d78:	orr	r2, sl, r2, lsl #8
   10d7c:	and	r3, r3, #16711680	; 0xff0000
   10d80:	uxtb	sl, r0
   10d84:	lsr	r0, lr, #8
   10d88:	lsl	r1, ip, #8
   10d8c:	and	r0, r0, #65280	; 0xff00
   10d90:	orr	r3, r3, lr, lsl #24
   10d94:	orr	r3, r3, r0
   10d98:	and	r1, r1, #16711680	; 0xff0000
   10d9c:	lsr	r0, ip, #8
   10da0:	orr	r1, r1, ip, lsl #24
   10da4:	and	r0, r0, #65280	; 0xff00
   10da8:	orr	r1, r1, r0
   10dac:	orr	ip, r1, ip, lsr #24
   10db0:	orr	r8, r8, sl, lsl #8
   10db4:	orr	r3, r3, lr, lsr #24
   10db8:	orr	r4, r2, r8
   10dbc:	orr	r5, r3, ip
   10dc0:	orrs	r1, r4, r5
   10dc4:	add	r6, r6, #16
   10dc8:	bne	10d20 <__assert_fail@plt+0x39c>
   10dcc:	ldr	r7, [sp, #20]
   10dd0:	ldr	r2, [pc, #1120]	; 11238 <__assert_fail@plt+0x8b4>
   10dd4:	ldr	r4, [sp, #32]
   10dd8:	mvn	r3, #3
   10ddc:	mov	r9, #0
   10de0:	add	r2, pc, r2
   10de4:	sub	r3, r3, r7
   10de8:	ldr	r6, [sp, #24]
   10dec:	str	r3, [sp, #20]
   10df0:	str	r2, [sp, #24]
   10df4:	mov	r8, r4
   10df8:	ldr	r3, [r8], #4
   10dfc:	lsr	r5, r3, #24
   10e00:	lsl	r2, r3, #8
   10e04:	orr	r5, r5, r3, lsl #24
   10e08:	and	r2, r2, #16711680	; 0xff0000
   10e0c:	lsr	r3, r3, #8
   10e10:	orr	r5, r5, r2
   10e14:	and	r3, r3, #65280	; 0xff00
   10e18:	orr	r5, r5, r3
   10e1c:	cmp	r5, #9
   10e20:	beq	11008 <__assert_fail@plt+0x684>
   10e24:	cmp	r6, #0
   10e28:	beq	10e6c <__assert_fail@plt+0x4e8>
   10e2c:	ldr	r3, [sp, #20]
   10e30:	cmp	r5, #9
   10e34:	add	r2, r8, r3
   10e38:	bhi	10f58 <__assert_fail@plt+0x5d4>
   10e3c:	ldr	r3, [pc, #1016]	; 1123c <__assert_fail@plt+0x8b8>
   10e40:	add	r3, pc, r3
   10e44:	add	r3, r3, r5, lsl #2
   10e48:	ldr	r3, [r3, #100]	; 0x64
   10e4c:	cmp	r3, #0
   10e50:	ldreq	r3, [pc, #1000]	; 11240 <__assert_fail@plt+0x8bc>
   10e54:	addeq	r3, pc, r3
   10e58:	str	r3, [sp]
   10e5c:	ldr	r1, [sp, #24]
   10e60:	mov	r3, r5
   10e64:	mov	r0, #1
   10e68:	bl	1093c <__printf_chk@plt>
   10e6c:	cmp	r5, #1
   10e70:	beq	10f64 <__assert_fail@plt+0x5e0>
   10e74:	cmp	r5, #2
   10e78:	beq	11028 <__assert_fail@plt+0x6a4>
   10e7c:	cmp	r5, #4
   10e80:	lsl	sl, r9, #2
   10e84:	beq	11050 <__assert_fail@plt+0x6cc>
   10e88:	cmp	r5, #3
   10e8c:	bne	10fdc <__assert_fail@plt+0x658>
   10e90:	ldrd	r2, [r4, #4]
   10e94:	add	r8, r4, #12
   10e98:	lsr	r5, r2, #24
   10e9c:	lsl	r0, r2, #8
   10ea0:	orr	r5, r5, r2, lsl #24
   10ea4:	lsr	r1, r2, #8
   10ea8:	and	r0, r0, #16711680	; 0xff0000
   10eac:	and	r1, r1, #65280	; 0xff00
   10eb0:	orr	r5, r5, r0
   10eb4:	orr	r5, r5, r1
   10eb8:	lsr	r2, r3, #24
   10ebc:	lsl	r1, r3, #8
   10ec0:	orr	r2, r2, r3, lsl #24
   10ec4:	and	r1, r1, #16711680	; 0xff0000
   10ec8:	orr	r2, r2, r1
   10ecc:	ldr	r1, [sp, #16]
   10ed0:	lsr	r3, r3, #8
   10ed4:	cmp	r1, #15
   10ed8:	movhi	r1, #0
   10edc:	movls	r1, #1
   10ee0:	cmp	r5, #7
   10ee4:	movle	r1, #0
   10ee8:	cmp	r1, #0
   10eec:	addne	r4, r4, #19
   10ef0:	and	r3, r3, #65280	; 0xff00
   10ef4:	orr	r2, r2, r3
   10ef8:	bicne	r8, r4, #7
   10efc:	ldr	r3, [sp, #12]
   10f00:	add	r4, r8, r5
   10f04:	add	r2, r2, r3
   10f08:	add	r4, r4, #3
   10f0c:	cmp	r6, #0
   10f10:	add	fp, r7, r2
   10f14:	bic	r4, r4, #3
   10f18:	bne	10fb0 <__assert_fail@plt+0x62c>
   10f1c:	ldr	r3, [pc, #800]	; 11244 <__assert_fail@plt+0x8c0>
   10f20:	ldr	r1, [pc, #800]	; 11248 <__assert_fail@plt+0x8c4>
   10f24:	mov	r2, sl
   10f28:	add	r3, pc, r3
   10f2c:	str	fp, [sp]
   10f30:	add	r1, pc, r1
   10f34:	mov	r0, #1
   10f38:	bl	1093c <__printf_chk@plt>
   10f3c:	mov	r0, r8
   10f40:	mov	r1, r5
   10f44:	bl	11ef0 <__assert_fail@plt+0x156c>
   10f48:	ldr	r0, [pc, #764]	; 1124c <__assert_fail@plt+0x8c8>
   10f4c:	add	r0, pc, r0
   10f50:	bl	10888 <puts@plt>
   10f54:	b	10df4 <__assert_fail@plt+0x470>
   10f58:	ldr	r3, [pc, #752]	; 11250 <__assert_fail@plt+0x8cc>
   10f5c:	add	r3, pc, r3
   10f60:	b	10e58 <__assert_fail@plt+0x4d4>
   10f64:	mov	r0, r8
   10f68:	bl	10900 <strlen@plt>
   10f6c:	ldrb	r3, [r4, #4]
   10f70:	cmp	r3, #0
   10f74:	add	r4, r8, r0
   10f78:	add	r4, r4, #4
   10f7c:	bic	r4, r4, #3
   10f80:	ldreq	r8, [pc, #716]	; 11254 <__assert_fail@plt+0x8d0>
   10f84:	addeq	r8, pc, r8
   10f88:	ldr	r3, [pc, #712]	; 11258 <__assert_fail@plt+0x8d4>
   10f8c:	ldr	r1, [pc, #712]	; 1125c <__assert_fail@plt+0x8d8>
   10f90:	lsl	r2, r9, #2
   10f94:	str	r8, [sp]
   10f98:	add	r3, pc, r3
   10f9c:	add	r1, pc, r1
   10fa0:	mov	r0, #1
   10fa4:	add	r9, r9, r0
   10fa8:	bl	1093c <__printf_chk@plt>
   10fac:	b	10df4 <__assert_fail@plt+0x470>
   10fb0:	ldr	r1, [pc, #680]	; 11260 <__assert_fail@plt+0x8dc>
   10fb4:	mov	r3, fp
   10fb8:	add	r1, pc, r1
   10fbc:	mov	r0, #1
   10fc0:	bl	1093c <__printf_chk@plt>
   10fc4:	ldr	r1, [pc, #664]	; 11264 <__assert_fail@plt+0x8e0>
   10fc8:	sub	r2, r8, r7
   10fcc:	add	r1, pc, r1
   10fd0:	mov	r0, #1
   10fd4:	bl	1093c <__printf_chk@plt>
   10fd8:	b	10f1c <__assert_fail@plt+0x598>
   10fdc:	ldr	r1, [sp, #36]	; 0x24
   10fe0:	ldr	r2, [pc, #640]	; 11268 <__assert_fail@plt+0x8e4>
   10fe4:	str	r5, [sp, #4]
   10fe8:	add	r2, pc, r2
   10fec:	ldr	r0, [r1]
   10ff0:	str	r2, [sp]
   10ff4:	ldr	r2, [pc, #624]	; 1126c <__assert_fail@plt+0x8e8>
   10ff8:	mov	r3, sl
   10ffc:	add	r2, pc, r2
   11000:	mov	r1, #1
   11004:	bl	10954 <__fprintf_chk@plt>
   11008:	ldr	r3, [sp, #28]
   1100c:	ldr	r2, [sp, #52]	; 0x34
   11010:	mov	r0, #0
   11014:	ldr	r3, [r3]
   11018:	cmp	r2, r3
   1101c:	bne	111bc <__assert_fail@plt+0x838>
   11020:	add	sp, sp, #60	; 0x3c
   11024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11028:	sub	r9, r9, #1
   1102c:	ldr	r3, [pc, #572]	; 11270 <__assert_fail@plt+0x8ec>
   11030:	ldr	r1, [pc, #572]	; 11274 <__assert_fail@plt+0x8f0>
   11034:	add	r3, pc, r3
   11038:	lsl	r2, r9, #2
   1103c:	add	r1, pc, r1
   11040:	mov	r0, #1
   11044:	mov	r4, r8
   11048:	bl	1093c <__printf_chk@plt>
   1104c:	b	10df4 <__assert_fail@plt+0x470>
   11050:	ldr	r3, [pc, #544]	; 11278 <__assert_fail@plt+0x8f4>
   11054:	ldr	r1, [pc, #544]	; 1127c <__assert_fail@plt+0x8f8>
   11058:	mov	r2, sl
   1105c:	add	r3, pc, r3
   11060:	add	r1, pc, r1
   11064:	mov	r0, #1
   11068:	mov	r4, r8
   1106c:	bl	1093c <__printf_chk@plt>
   11070:	b	10df4 <__assert_fail@plt+0x470>
   11074:	cmp	r4, #0
   11078:	beq	11154 <__assert_fail@plt+0x7d0>
   1107c:	cmp	fp, #39	; 0x27
   11080:	bls	11154 <__assert_fail@plt+0x7d0>
   11084:	ldr	r1, [pc, #500]	; 11280 <__assert_fail@plt+0x8fc>
   11088:	sub	r3, r4, r7
   1108c:	mov	r2, r9
   11090:	add	r1, pc, r1
   11094:	mov	r0, #1
   11098:	mov	r7, r4
   1109c:	bl	1093c <__printf_chk@plt>
   110a0:	b	10b54 <__assert_fail@plt+0x1d0>
   110a4:	ldr	r3, [r7, #28]
   110a8:	ldr	r1, [pc, #468]	; 11284 <__assert_fail@plt+0x900>
   110ac:	lsr	r2, r3, #24
   110b0:	lsl	r0, r3, #8
   110b4:	orr	r2, r2, r3, lsl #24
   110b8:	and	r0, r0, #16711680	; 0xff0000
   110bc:	lsr	r3, r3, #8
   110c0:	orr	r2, r2, r0
   110c4:	and	r3, r3, #65280	; 0xff00
   110c8:	add	r1, pc, r1
   110cc:	orr	r2, r2, r3
   110d0:	mov	r0, #1
   110d4:	bl	1093c <__printf_chk@plt>
   110d8:	cmp	r9, #2
   110dc:	beq	10cf4 <__assert_fail@plt+0x370>
   110e0:	ldr	r3, [r7, #32]
   110e4:	ldr	r1, [pc, #412]	; 11288 <__assert_fail@plt+0x904>
   110e8:	lsr	r2, r3, #24
   110ec:	lsl	r0, r3, #8
   110f0:	orr	r2, r2, r3, lsl #24
   110f4:	and	r0, r0, #16711680	; 0xff0000
   110f8:	lsr	r3, r3, #8
   110fc:	orr	r2, r2, r0
   11100:	and	r3, r3, #65280	; 0xff00
   11104:	add	r1, pc, r1
   11108:	orr	r2, r2, r3
   1110c:	mov	r0, #1
   11110:	bl	1093c <__printf_chk@plt>
   11114:	cmp	r9, #16
   11118:	bls	10cf4 <__assert_fail@plt+0x370>
   1111c:	ldr	r3, [r7, #36]	; 0x24
   11120:	ldr	r1, [pc, #356]	; 1128c <__assert_fail@plt+0x908>
   11124:	lsr	r2, r3, #24
   11128:	lsl	r0, r3, #8
   1112c:	orr	r2, r2, r3, lsl #24
   11130:	and	r0, r0, #16711680	; 0xff0000
   11134:	lsr	r3, r3, #8
   11138:	orr	r2, r2, r0
   1113c:	and	r3, r3, #65280	; 0xff00
   11140:	add	r1, pc, r1
   11144:	orr	r2, r2, r3
   11148:	mov	r0, #1
   1114c:	bl	1093c <__printf_chk@plt>
   11150:	b	10cf4 <__assert_fail@plt+0x370>
   11154:	ldr	r0, [pc, #308]	; 11290 <__assert_fail@plt+0x90c>
   11158:	mov	r1, r9
   1115c:	add	r0, pc, r0
   11160:	bl	114c8 <__assert_fail@plt+0xb44>
   11164:	ldr	r0, [pc, #296]	; 11294 <__assert_fail@plt+0x910>
   11168:	add	r3, r8, #80	; 0x50
   1116c:	str	r3, [sp]
   11170:	mov	r2, r9
   11174:	mov	r3, r8
   11178:	add	r1, r9, #8
   1117c:	add	r0, pc, r0
   11180:	bl	120dc <__assert_fail@plt+0x1758>
   11184:	add	r3, r8, #80	; 0x50
   11188:	str	r3, [sp]
   1118c:	mov	r2, r9
   11190:	mov	r3, r8
   11194:	add	r1, r9, #8
   11198:	mov	r0, #0
   1119c:	bl	120dc <__assert_fail@plt+0x1758>
   111a0:	sub	fp, r5, r7
   111a4:	mov	r4, r7
   111a8:	b	1107c <__assert_fail@plt+0x6f8>
   111ac:	ldr	r0, [pc, #228]	; 11298 <__assert_fail@plt+0x914>
   111b0:	mov	r1, r9
   111b4:	add	r0, pc, r0
   111b8:	bl	114c8 <__assert_fail@plt+0xb44>
   111bc:	bl	10864 <__stack_chk_fail@plt>
   111c0:	ldr	r0, [pc, #212]	; 1129c <__assert_fail@plt+0x918>
   111c4:	mov	r1, r9
   111c8:	add	r0, pc, r0
   111cc:	bl	114c8 <__assert_fail@plt+0xb44>
   111d0:	ldr	r0, [pc, #200]	; 112a0 <__assert_fail@plt+0x91c>
   111d4:	add	r3, r8, #80	; 0x50
   111d8:	str	r3, [sp]
   111dc:	mov	r2, r9
   111e0:	mov	r3, r8
   111e4:	add	r1, r9, #8
   111e8:	add	r0, pc, r0
   111ec:	bl	120dc <__assert_fail@plt+0x1758>
   111f0:			; <UNDEFINED> instruction: 0x000125bc
   111f4:	andeq	r0, r0, r8, lsl #1
   111f8:	muleq	r0, r0, r0
   111fc:	ldrdeq	r2, [r1], -r8
   11200:	andeq	r1, r0, r8, asr sl
   11204:	andeq	r1, r0, r0, lsl #20
   11208:	andeq	r0, r0, ip, lsl #1
   1120c:	muleq	r0, r4, sl
   11210:	andle	pc, sp, sp, ror #29
   11214:	andeq	r1, r0, r4, lsr #19
   11218:	andeq	r1, r0, r0, ror r9
   1121c:	andeq	r1, r0, ip, ror #18
   11220:	andeq	r1, r0, r4, ror r9
   11224:	andeq	r1, r0, r8, ror r9
   11228:	andeq	r1, r0, r0, lsl #19
   1122c:	andeq	r1, r0, r8, lsl #19
   11230:	andeq	r1, r0, r8, ror #18
   11234:			; <UNDEFINED> instruction: 0x000019b0
   11238:	strdeq	r1, [r0], -r0
   1123c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11240:	ldrdeq	r1, [r0], -ip
   11244:	andeq	r1, r0, r4, ror #15
   11248:	andeq	r1, r0, r8, lsr #16
   1124c:	andeq	r1, r0, r0, ror #12
   11250:	ldrdeq	r1, [r0], -r4
   11254:			; <UNDEFINED> instruction: 0x000014b4
   11258:	andeq	r1, r0, r4, ror r7
   1125c:	andeq	r1, r0, r0, asr r7
   11260:	andeq	r1, r0, r4, ror r7
   11264:	andeq	r1, r0, r8, ror r7
   11268:	andeq	r1, r0, r4, lsr #14
   1126c:	andeq	r1, r0, r4, lsl r7
   11270:	ldrdeq	r1, [r0], -r8
   11274:			; <UNDEFINED> instruction: 0x000016bc
   11278:			; <UNDEFINED> instruction: 0x000016b0
   1127c:	andeq	r1, r0, r0, lsr #13
   11280:	ldrdeq	r1, [r0], -r8
   11284:	muleq	r0, r8, r5
   11288:	andeq	r1, r0, r8, ror r5
   1128c:	andeq	r1, r0, r8, asr r5
   11290:	andeq	r1, r0, r4, asr #7
   11294:	andeq	r1, r0, r8, ror #6
   11298:	ldrdeq	r1, [r0], -r4
   1129c:	andeq	r1, r0, r4, asr #6
   112a0:	andeq	r1, r0, ip, lsl #6
   112a4:	mov	fp, #0
   112a8:	mov	lr, #0
   112ac:	pop	{r1}		; (ldr r1, [sp], #4)
   112b0:	mov	r2, sp
   112b4:	push	{r2}		; (str r2, [sp, #-4]!)
   112b8:	push	{r0}		; (str r0, [sp, #-4]!)
   112bc:	ldr	ip, [pc, #16]	; 112d4 <__assert_fail@plt+0x950>
   112c0:	push	{ip}		; (str ip, [sp, #-4]!)
   112c4:	ldr	r0, [pc, #12]	; 112d8 <__assert_fail@plt+0x954>
   112c8:	ldr	r3, [pc, #12]	; 112dc <__assert_fail@plt+0x958>
   112cc:	bl	108a0 <__libc_start_main@plt>
   112d0:	bl	1096c <abort@plt>
   112d4:	strdeq	r2, [r1], -r4
   112d8:	muleq	r1, r0, r9
   112dc:	muleq	r1, r4, r3
   112e0:	ldr	r3, [pc, #20]	; 112fc <__assert_fail@plt+0x978>
   112e4:	ldr	r2, [pc, #20]	; 11300 <__assert_fail@plt+0x97c>
   112e8:	add	r3, pc, r3
   112ec:	ldr	r2, [r3, r2]
   112f0:	cmp	r2, #0
   112f4:	bxeq	lr
   112f8:	b	108c4 <__gmon_start__@plt>
   112fc:	andeq	r1, r1, r4, ror ip
   11300:	muleq	r0, r4, r0
   11304:	ldr	r0, [pc, #24]	; 11324 <__assert_fail@plt+0x9a0>
   11308:	ldr	r3, [pc, #24]	; 11328 <__assert_fail@plt+0x9a4>
   1130c:	cmp	r3, r0
   11310:	bxeq	lr
   11314:	ldr	r3, [pc, #16]	; 1132c <__assert_fail@plt+0x9a8>
   11318:	cmp	r3, #0
   1131c:	bxeq	lr
   11320:	bx	r3
   11324:	andeq	r3, r2, r8
   11328:	andeq	r3, r2, r8
   1132c:	andeq	r0, r0, r0
   11330:	ldr	r0, [pc, #36]	; 1135c <__assert_fail@plt+0x9d8>
   11334:	ldr	r1, [pc, #36]	; 11360 <__assert_fail@plt+0x9dc>
   11338:	sub	r1, r1, r0
   1133c:	asr	r1, r1, #2
   11340:	add	r1, r1, r1, lsr #31
   11344:	asrs	r1, r1, #1
   11348:	bxeq	lr
   1134c:	ldr	r3, [pc, #16]	; 11364 <__assert_fail@plt+0x9e0>
   11350:	cmp	r3, #0
   11354:	bxeq	lr
   11358:	bx	r3
   1135c:	andeq	r3, r2, r8
   11360:	andeq	r3, r2, r8
   11364:	andeq	r0, r0, r0
   11368:	push	{r4, lr}
   1136c:	ldr	r4, [pc, #24]	; 1138c <__assert_fail@plt+0xa08>
   11370:	ldrb	r3, [r4]
   11374:	cmp	r3, #0
   11378:	popne	{r4, pc}
   1137c:	bl	11304 <__assert_fail@plt+0x980>
   11380:	mov	r3, #1
   11384:	strb	r3, [r4]
   11388:	pop	{r4, pc}
   1138c:	andeq	r3, r2, r8
   11390:	b	11330 <__assert_fail@plt+0x9ac>
   11394:	cmp	r1, #39	; 0x27
   11398:	bls	114bc <__assert_fail@plt+0xb38>
   1139c:	push	{lr}		; (str lr, [sp, #-4]!)
   113a0:	ldr	r3, [r0]
   113a4:	ldr	lr, [pc, #280]	; 114c4 <__assert_fail@plt+0xb40>
   113a8:	lsr	r2, r3, #24
   113ac:	lsl	ip, r3, #8
   113b0:	orr	r2, r2, r3, lsl #24
   113b4:	and	ip, ip, #16711680	; 0xff0000
   113b8:	lsr	r3, r3, #8
   113bc:	orr	r2, r2, ip
   113c0:	and	r3, r3, #65280	; 0xff00
   113c4:	orr	r3, r2, r3
   113c8:	cmp	r3, lr
   113cc:	bne	114b4 <__assert_fail@plt+0xb30>
   113d0:	ldr	r3, [r0, #20]
   113d4:	lsr	r2, r3, #24
   113d8:	lsl	ip, r3, #8
   113dc:	orr	r2, r2, r3, lsl #24
   113e0:	and	ip, ip, #16711680	; 0xff0000
   113e4:	lsr	r3, r3, #8
   113e8:	orr	r2, r2, ip
   113ec:	and	r3, r3, #65280	; 0xff00
   113f0:	orr	r3, r2, r3
   113f4:	cmp	r3, #17
   113f8:	bhi	114b4 <__assert_fail@plt+0xb30>
   113fc:	ldr	r3, [r0, #24]
   11400:	lsr	r2, r3, #24
   11404:	lsl	ip, r3, #8
   11408:	orr	r2, r2, r3, lsl #24
   1140c:	and	ip, ip, #16711680	; 0xff0000
   11410:	lsr	r3, r3, #8
   11414:	orr	r2, r2, ip
   11418:	and	r3, r3, #65280	; 0xff00
   1141c:	orr	r3, r2, r3
   11420:	cmp	r3, #17
   11424:	bhi	114b4 <__assert_fail@plt+0xb30>
   11428:	ldr	r3, [r0, #4]
   1142c:	lsr	r2, r3, #24
   11430:	lsl	ip, r3, #8
   11434:	orr	r2, r2, r3, lsl #24
   11438:	and	ip, ip, #16711680	; 0xff0000
   1143c:	lsr	r3, r3, #8
   11440:	orr	r2, r2, ip
   11444:	and	r3, r3, #65280	; 0xff00
   11448:	orr	r3, r2, r3
   1144c:	cmp	r1, r3
   11450:	bls	114b4 <__assert_fail@plt+0xb30>
   11454:	ldr	r3, [r0, #8]
   11458:	lsr	r2, r3, #24
   1145c:	lsl	ip, r3, #8
   11460:	orr	r2, r2, r3, lsl #24
   11464:	and	ip, ip, #16711680	; 0xff0000
   11468:	lsr	r3, r3, #8
   1146c:	orr	r2, r2, ip
   11470:	and	r3, r3, #65280	; 0xff00
   11474:	orr	r3, r2, r3
   11478:	cmp	r1, r3
   1147c:	bls	114b4 <__assert_fail@plt+0xb30>
   11480:	ldr	r3, [r0, #12]
   11484:	lsr	r0, r3, #24
   11488:	lsl	r2, r3, #8
   1148c:	orr	r0, r0, r3, lsl #24
   11490:	and	r2, r2, #16711680	; 0xff0000
   11494:	lsr	r3, r3, #8
   11498:	orr	r0, r0, r2
   1149c:	and	r3, r3, #65280	; 0xff00
   114a0:	orr	r0, r0, r3
   114a4:	cmp	r1, r0
   114a8:	movls	r0, #0
   114ac:	movhi	r0, #1
   114b0:	pop	{pc}		; (ldr pc, [sp], #4)
   114b4:	mov	r0, #0
   114b8:	pop	{pc}		; (ldr pc, [sp], #4)
   114bc:	mov	r0, #0
   114c0:	bx	lr
   114c4:	andle	pc, sp, sp, ror #29
   114c8:	ldr	ip, [pc, #100]	; 11534 <__assert_fail@plt+0xbb0>
   114cc:	push	{r0, r1, r2, r3}
   114d0:	add	ip, pc, ip
   114d4:	ldr	r2, [pc, #92]	; 11538 <__assert_fail@plt+0xbb4>
   114d8:	push	{lr}		; (str lr, [sp, #-4]!)
   114dc:	sub	sp, sp, #12
   114e0:	ldr	r2, [ip, r2]
   114e4:	ldr	r3, [pc, #80]	; 1153c <__assert_fail@plt+0xbb8>
   114e8:	add	r1, sp, #20
   114ec:	str	r1, [sp]
   114f0:	ldr	r1, [r2]
   114f4:	ldr	r0, [pc, #68]	; 11540 <__assert_fail@plt+0xbbc>
   114f8:	str	r1, [sp, #4]
   114fc:	ldr	r4, [ip, r3]
   11500:	ldr	r5, [sp, #16]
   11504:	mov	r2, #13
   11508:	mov	r1, #1
   1150c:	ldr	r3, [r4]
   11510:	add	r0, pc, r0
   11514:	bl	1087c <fwrite@plt>
   11518:	ldr	r0, [r4]
   1151c:	mov	r2, r5
   11520:	ldr	r3, [sp]
   11524:	mov	r1, #1
   11528:	bl	108b8 <__vfprintf_chk@plt>
   1152c:	mov	r0, #1
   11530:	bl	108f4 <exit@plt>
   11534:	andeq	r1, r1, ip, lsl #21
   11538:	andeq	r0, r0, r8, lsl #1
   1153c:	muleq	r0, r0, r0
   11540:	andeq	r0, r0, r0, lsl pc
   11544:	ldr	ip, [pc, #100]	; 115b0 <__assert_fail@plt+0xc2c>
   11548:	push	{r0, r1, r2, r3}
   1154c:	add	ip, pc, ip
   11550:	ldr	r2, [pc, #92]	; 115b4 <__assert_fail@plt+0xc30>
   11554:	push	{lr}		; (str lr, [sp, #-4]!)
   11558:	sub	sp, sp, #12
   1155c:	ldr	r2, [ip, r2]
   11560:	ldr	r3, [pc, #80]	; 115b8 <__assert_fail@plt+0xc34>
   11564:	add	r1, sp, #20
   11568:	str	r1, [sp]
   1156c:	ldr	r1, [r2]
   11570:	ldr	r0, [pc, #68]	; 115bc <__assert_fail@plt+0xc38>
   11574:	str	r1, [sp, #4]
   11578:	ldr	r4, [ip, r3]
   1157c:	ldr	r5, [sp, #16]
   11580:	mov	r2, #13
   11584:	mov	r1, #1
   11588:	ldr	r3, [r4]
   1158c:	add	r0, pc, r0
   11590:	bl	1087c <fwrite@plt>
   11594:	ldr	r0, [r4]
   11598:	mov	r2, r5
   1159c:	ldr	r3, [sp]
   115a0:	mov	r1, #1
   115a4:	bl	108b8 <__vfprintf_chk@plt>
   115a8:	mov	r0, #1
   115ac:	bl	108f4 <exit@plt>
   115b0:	andeq	r1, r1, r0, lsl sl
   115b4:	andeq	r0, r0, r8, lsl #1
   115b8:	muleq	r0, r0, r0
   115bc:	muleq	r0, r4, lr
   115c0:	push	{r4, r5, r6, lr}
   115c4:	mov	r6, r0
   115c8:	bl	10900 <strlen@plt>
   115cc:	add	r4, r0, #1
   115d0:	mov	r0, r4
   115d4:	bl	10894 <malloc@plt>
   115d8:	subs	r5, r0, #0
   115dc:	beq	115f4 <__assert_fail@plt+0xc70>
   115e0:	mov	r2, r4
   115e4:	mov	r1, r6
   115e8:	bl	10858 <memcpy@plt>
   115ec:	mov	r0, r5
   115f0:	pop	{r4, r5, r6, pc}
   115f4:	ldr	r0, [pc, #4]	; 11600 <__assert_fail@plt+0xc7c>
   115f8:	add	r0, pc, r0
   115fc:	bl	11544 <__assert_fail@plt+0xbc0>
   11600:	andeq	r1, r0, r8, ror #4
   11604:	push	{r1, r2, r3}
   11608:	ldr	r3, [pc, #180]	; 116c4 <__assert_fail@plt+0xd40>
   1160c:	ldr	r2, [pc, #180]	; 116c8 <__assert_fail@plt+0xd44>
   11610:	add	r3, pc, r3
   11614:	push	{r4, r5, r6, r7, r8, r9, lr}
   11618:	sub	sp, sp, #16
   1161c:	ldr	r9, [r3, r2]
   11620:	ldr	r7, [sp, #44]	; 0x2c
   11624:	mov	r8, r0
   11628:	ldr	r2, [r9]
   1162c:	mov	r5, #0
   11630:	mov	r4, #128	; 0x80
   11634:	add	r6, sp, #48	; 0x30
   11638:	str	r2, [sp, #12]
   1163c:	b	1164c <__assert_fail@plt+0xcc8>
   11640:	cmp	r0, #0
   11644:	addge	r4, r0, #1
   11648:	lsllt	r4, r4, #1
   1164c:	mov	r0, r5
   11650:	mov	r1, r4
   11654:	bl	10870 <realloc@plt>
   11658:	subs	r5, r0, #0
   1165c:	beq	116b0 <__assert_fail@plt+0xd2c>
   11660:	str	r6, [sp, #4]
   11664:	str	r7, [sp]
   11668:	mvn	r3, #0
   1166c:	mov	r2, #1
   11670:	mov	r1, r4
   11674:	str	r6, [sp, #8]
   11678:	bl	1084c <__vsnprintf_chk@plt>
   1167c:	cmp	r4, r0
   11680:	bls	11640 <__assert_fail@plt+0xcbc>
   11684:	str	r5, [r8]
   11688:	mov	r0, r5
   1168c:	bl	10900 <strlen@plt>
   11690:	ldr	r2, [sp, #12]
   11694:	ldr	r3, [r9]
   11698:	cmp	r2, r3
   1169c:	bne	116c0 <__assert_fail@plt+0xd3c>
   116a0:	add	sp, sp, #16
   116a4:	pop	{r4, r5, r6, r7, r8, r9, lr}
   116a8:	add	sp, sp, #12
   116ac:	bx	lr
   116b0:	ldr	r0, [pc, #20]	; 116cc <__assert_fail@plt+0xd48>
   116b4:	mov	r1, r4
   116b8:	add	r0, pc, r0
   116bc:	bl	11544 <__assert_fail@plt+0xbc0>
   116c0:	bl	10864 <__stack_chk_fail@plt>
   116c4:	andeq	r1, r1, ip, asr #18
   116c8:	andeq	r0, r0, r8, lsl #1
   116cc:			; <UNDEFINED> instruction: 0x000011bc
   116d0:	push	{r4, r5, r6, r7, r8, lr}
   116d4:	mov	r6, r1
   116d8:	mov	r8, r0
   116dc:	bl	10900 <strlen@plt>
   116e0:	mov	r4, r0
   116e4:	mov	r0, r6
   116e8:	bl	10900 <strlen@plt>
   116ec:	cmp	r4, #0
   116f0:	add	r3, r4, r0
   116f4:	mov	r7, r0
   116f8:	add	r0, r3, #2
   116fc:	beq	11710 <__assert_fail@plt+0xd8c>
   11700:	add	r2, r8, r4
   11704:	ldrb	r2, [r2, #-1]
   11708:	cmp	r2, #47	; 0x2f
   1170c:	beq	11758 <__assert_fail@plt+0xdd4>
   11710:	bl	10894 <malloc@plt>
   11714:	subs	r5, r0, #0
   11718:	beq	1174c <__assert_fail@plt+0xdc8>
   1171c:	mov	r2, r4
   11720:	mov	r1, r8
   11724:	bl	10858 <memcpy@plt>
   11728:	mov	r3, #47	; 0x2f
   1172c:	strb	r3, [r5, r4]
   11730:	add	r4, r4, #1
   11734:	add	r2, r7, #1
   11738:	mov	r1, r6
   1173c:	add	r0, r5, r4
   11740:	bl	10858 <memcpy@plt>
   11744:	mov	r0, r5
   11748:	pop	{r4, r5, r6, r7, r8, pc}
   1174c:	ldr	r0, [pc, #36]	; 11778 <__assert_fail@plt+0xdf4>
   11750:	add	r0, pc, r0
   11754:	bl	11544 <__assert_fail@plt+0xbc0>
   11758:	add	r0, r3, #1
   1175c:	bl	10894 <malloc@plt>
   11760:	subs	r5, r0, #0
   11764:	beq	1174c <__assert_fail@plt+0xdc8>
   11768:	mov	r1, r8
   1176c:	mov	r2, r4
   11770:	bl	10858 <memcpy@plt>
   11774:	b	11734 <__assert_fail@plt+0xdb0>
   11778:	andeq	r1, r0, r0, lsl r1
   1177c:	cmp	r1, #0
   11780:	beq	1181c <__assert_fail@plt+0xe98>
   11784:	push	{r4, r5, r6, r7, r8, lr}
   11788:	add	r8, r0, r1
   1178c:	mov	r7, r0
   11790:	ldrb	r3, [r8, #-1]
   11794:	cmp	r3, #0
   11798:	bne	11814 <__assert_fail@plt+0xe90>
   1179c:	cmp	r0, r8
   117a0:	bcs	1180c <__assert_fail@plt+0xe88>
   117a4:	mov	r5, r7
   117a8:	mov	r6, r5
   117ac:	ldrb	r4, [r5], #1
   117b0:	cmp	r4, #0
   117b4:	beq	117e0 <__assert_fail@plt+0xe5c>
   117b8:	bl	108e8 <__ctype_b_loc@plt>
   117bc:	lsl	r4, r4, #1
   117c0:	ldr	r3, [r0]
   117c4:	ldrh	r0, [r3, r4]
   117c8:	ands	r0, r0, #16384	; 0x4000
   117cc:	popeq	{r4, r5, r6, r7, r8, pc}
   117d0:	cmp	r8, r5
   117d4:	bhi	117a8 <__assert_fail@plt+0xe24>
   117d8:	ldrb	r4, [r6, #1]
   117dc:	mov	r6, r5
   117e0:	cmp	r4, #0
   117e4:	sub	r7, r6, r7
   117e8:	clz	r7, r7
   117ec:	lsr	r7, r7, #5
   117f0:	moveq	r4, r7
   117f4:	movne	r4, #1
   117f8:	cmp	r4, #0
   117fc:	bne	11814 <__assert_fail@plt+0xe90>
   11800:	add	r7, r6, #1
   11804:	cmp	r8, r7
   11808:	bhi	117a4 <__assert_fail@plt+0xe20>
   1180c:	mov	r0, #1
   11810:	pop	{r4, r5, r6, r7, r8, pc}
   11814:	mov	r0, #0
   11818:	pop	{r4, r5, r6, r7, r8, pc}
   1181c:	mov	r0, r1
   11820:	bx	lr
   11824:	ldr	r3, [pc, #616]	; 11a94 <__assert_fail@plt+0x1110>
   11828:	ldr	r2, [pc, #616]	; 11a98 <__assert_fail@plt+0x1114>
   1182c:	push	{r4, r5, r6, r7, r8, lr}
   11830:	add	r3, pc, r3
   11834:	ldr	r4, [r1]
   11838:	ldr	r6, [r3, r2]
   1183c:	mov	ip, r0
   11840:	ldrb	r0, [r0, r4]
   11844:	sub	sp, sp, #16
   11848:	ldr	r2, [r6]
   1184c:	sub	r3, r0, #48	; 0x30
   11850:	mov	r5, r1
   11854:	str	r2, [sp, #12]
   11858:	add	r1, ip, r4
   1185c:	add	r7, r4, #1
   11860:	cmp	r3, #72	; 0x48
   11864:	addls	pc, pc, r3, lsl #2
   11868:	b	11994 <__assert_fail@plt+0x1010>
   1186c:	b	11a30 <__assert_fail@plt+0x10ac>
   11870:	b	11a30 <__assert_fail@plt+0x10ac>
   11874:	b	11a30 <__assert_fail@plt+0x10ac>
   11878:	b	11a30 <__assert_fail@plt+0x10ac>
   1187c:	b	11a30 <__assert_fail@plt+0x10ac>
   11880:	b	11a30 <__assert_fail@plt+0x10ac>
   11884:	b	11a30 <__assert_fail@plt+0x10ac>
   11888:	b	11a30 <__assert_fail@plt+0x10ac>
   1188c:	b	11994 <__assert_fail@plt+0x1010>
   11890:	b	11994 <__assert_fail@plt+0x1010>
   11894:	b	11994 <__assert_fail@plt+0x1010>
   11898:	b	11994 <__assert_fail@plt+0x1010>
   1189c:	b	11994 <__assert_fail@plt+0x1010>
   118a0:	b	11994 <__assert_fail@plt+0x1010>
   118a4:	b	11994 <__assert_fail@plt+0x1010>
   118a8:	b	11994 <__assert_fail@plt+0x1010>
   118ac:	b	11994 <__assert_fail@plt+0x1010>
   118b0:	b	11994 <__assert_fail@plt+0x1010>
   118b4:	b	11994 <__assert_fail@plt+0x1010>
   118b8:	b	11994 <__assert_fail@plt+0x1010>
   118bc:	b	11994 <__assert_fail@plt+0x1010>
   118c0:	b	11994 <__assert_fail@plt+0x1010>
   118c4:	b	11994 <__assert_fail@plt+0x1010>
   118c8:	b	11994 <__assert_fail@plt+0x1010>
   118cc:	b	11994 <__assert_fail@plt+0x1010>
   118d0:	b	11994 <__assert_fail@plt+0x1010>
   118d4:	b	11994 <__assert_fail@plt+0x1010>
   118d8:	b	11994 <__assert_fail@plt+0x1010>
   118dc:	b	11994 <__assert_fail@plt+0x1010>
   118e0:	b	11994 <__assert_fail@plt+0x1010>
   118e4:	b	11994 <__assert_fail@plt+0x1010>
   118e8:	b	11994 <__assert_fail@plt+0x1010>
   118ec:	b	11994 <__assert_fail@plt+0x1010>
   118f0:	b	11994 <__assert_fail@plt+0x1010>
   118f4:	b	11994 <__assert_fail@plt+0x1010>
   118f8:	b	11994 <__assert_fail@plt+0x1010>
   118fc:	b	11994 <__assert_fail@plt+0x1010>
   11900:	b	11994 <__assert_fail@plt+0x1010>
   11904:	b	11994 <__assert_fail@plt+0x1010>
   11908:	b	11994 <__assert_fail@plt+0x1010>
   1190c:	b	11994 <__assert_fail@plt+0x1010>
   11910:	b	11994 <__assert_fail@plt+0x1010>
   11914:	b	11994 <__assert_fail@plt+0x1010>
   11918:	b	11994 <__assert_fail@plt+0x1010>
   1191c:	b	11994 <__assert_fail@plt+0x1010>
   11920:	b	11994 <__assert_fail@plt+0x1010>
   11924:	b	11994 <__assert_fail@plt+0x1010>
   11928:	b	11994 <__assert_fail@plt+0x1010>
   1192c:	b	11994 <__assert_fail@plt+0x1010>
   11930:	b	11990 <__assert_fail@plt+0x100c>
   11934:	b	119b0 <__assert_fail@plt+0x102c>
   11938:	b	11994 <__assert_fail@plt+0x1010>
   1193c:	b	11994 <__assert_fail@plt+0x1010>
   11940:	b	11994 <__assert_fail@plt+0x1010>
   11944:	b	119b8 <__assert_fail@plt+0x1034>
   11948:	b	11994 <__assert_fail@plt+0x1010>
   1194c:	b	11994 <__assert_fail@plt+0x1010>
   11950:	b	11994 <__assert_fail@plt+0x1010>
   11954:	b	11994 <__assert_fail@plt+0x1010>
   11958:	b	11994 <__assert_fail@plt+0x1010>
   1195c:	b	11994 <__assert_fail@plt+0x1010>
   11960:	b	11994 <__assert_fail@plt+0x1010>
   11964:	b	119c0 <__assert_fail@plt+0x103c>
   11968:	b	11994 <__assert_fail@plt+0x1010>
   1196c:	b	11994 <__assert_fail@plt+0x1010>
   11970:	b	11994 <__assert_fail@plt+0x1010>
   11974:	b	119c8 <__assert_fail@plt+0x1044>
   11978:	b	11994 <__assert_fail@plt+0x1010>
   1197c:	b	119d0 <__assert_fail@plt+0x104c>
   11980:	b	11994 <__assert_fail@plt+0x1010>
   11984:	b	119d8 <__assert_fail@plt+0x1054>
   11988:	b	11994 <__assert_fail@plt+0x1010>
   1198c:	b	119e0 <__assert_fail@plt+0x105c>
   11990:	mov	r0, #7
   11994:	ldr	r2, [sp, #12]
   11998:	ldr	r3, [r6]
   1199c:	str	r7, [r5]
   119a0:	cmp	r2, r3
   119a4:	bne	11a90 <__assert_fail@plt+0x110c>
   119a8:	add	sp, sp, #16
   119ac:	pop	{r4, r5, r6, r7, r8, pc}
   119b0:	mov	r0, #8
   119b4:	b	11994 <__assert_fail@plt+0x1010>
   119b8:	mov	r0, #12
   119bc:	b	11994 <__assert_fail@plt+0x1010>
   119c0:	mov	r0, #10
   119c4:	b	11994 <__assert_fail@plt+0x1010>
   119c8:	mov	r0, #13
   119cc:	b	11994 <__assert_fail@plt+0x1010>
   119d0:	mov	r0, #9
   119d4:	b	11994 <__assert_fail@plt+0x1010>
   119d8:	mov	r0, #11
   119dc:	b	11994 <__assert_fail@plt+0x1010>
   119e0:	add	r4, sp, #8
   119e4:	add	r1, ip, r7
   119e8:	mov	r3, #0
   119ec:	mov	r2, #2
   119f0:	mov	r0, r4
   119f4:	strb	r3, [sp, #10]
   119f8:	bl	10930 <strncpy@plt>
   119fc:	mov	r0, r4
   11a00:	mov	r2, #16
   11a04:	add	r1, sp, #4
   11a08:	bl	10828 <strtol@plt>
   11a0c:	ldr	r3, [sp, #4]
   11a10:	cmp	r3, r4
   11a14:	subhi	r3, r3, r4
   11a18:	addhi	r7, r7, r3
   11a1c:	uxtbhi	r0, r0
   11a20:	bhi	11994 <__assert_fail@plt+0x1010>
   11a24:	ldr	r0, [pc, #112]	; 11a9c <__assert_fail@plt+0x1118>
   11a28:	add	r0, pc, r0
   11a2c:	bl	11544 <__assert_fail@plt+0xbc0>
   11a30:	add	r8, sp, #8
   11a34:	mov	r3, #0
   11a38:	mov	r2, #3
   11a3c:	mov	r0, r8
   11a40:	strb	r3, [sp, #11]
   11a44:	bl	10930 <strncpy@plt>
   11a48:	mov	r0, r8
   11a4c:	mov	r2, #8
   11a50:	add	r1, sp, #4
   11a54:	bl	10828 <strtol@plt>
   11a58:	ldr	r7, [sp, #4]
   11a5c:	cmp	r7, r8
   11a60:	subhi	r7, r7, r8
   11a64:	addhi	r7, r7, r4
   11a68:	uxtbhi	r0, r0
   11a6c:	bhi	11994 <__assert_fail@plt+0x1010>
   11a70:	ldr	r3, [pc, #40]	; 11aa0 <__assert_fail@plt+0x111c>
   11a74:	ldr	r1, [pc, #40]	; 11aa4 <__assert_fail@plt+0x1120>
   11a78:	ldr	r0, [pc, #40]	; 11aa8 <__assert_fail@plt+0x1124>
   11a7c:	add	r3, pc, r3
   11a80:	mov	r2, #150	; 0x96
   11a84:	add	r1, pc, r1
   11a88:	add	r0, pc, r0
   11a8c:	bl	10984 <__assert_fail@plt>
   11a90:	bl	10864 <__stack_chk_fail@plt>
   11a94:	andeq	r1, r1, ip, lsr #14
   11a98:	andeq	r0, r0, r8, lsl #1
   11a9c:	andeq	r0, r0, ip, ror lr
   11aa0:	andeq	r0, r0, r8, asr #27
   11aa4:	andeq	r0, r0, ip, lsl #28
   11aa8:	andeq	r0, r0, r0, lsl lr
   11aac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ab0:	mov	r4, #0
   11ab4:	str	r4, [r1]
   11ab8:	mov	r8, r1
   11abc:	ldr	r1, [pc, #240]	; 11bb4 <__assert_fail@plt+0x1230>
   11ac0:	mov	r9, r2
   11ac4:	add	r1, pc, r1
   11ac8:	mov	r5, r0
   11acc:	bl	1081c <strcmp@plt>
   11ad0:	subs	r7, r0, #0
   11ad4:	beq	11aec <__assert_fail@plt+0x1168>
   11ad8:	mov	r1, r4
   11adc:	mov	r0, r5
   11ae0:	bl	108d0 <open@plt>
   11ae4:	subs	r7, r0, #0
   11ae8:	blt	11b98 <__assert_fail@plt+0x1214>
   11aec:	mov	r0, #1024	; 0x400
   11af0:	bl	10894 <malloc@plt>
   11af4:	subs	r6, r0, #0
   11af8:	movne	r4, #0
   11afc:	movne	r5, #1024	; 0x400
   11b00:	beq	11ba8 <__assert_fail@plt+0x1224>
   11b04:	sub	r2, r5, r4
   11b08:	add	r1, r6, r4
   11b0c:	mov	r0, r7
   11b10:	bl	10834 <read@plt>
   11b14:	cmp	r0, #0
   11b18:	blt	11b54 <__assert_fail@plt+0x11d0>
   11b1c:	add	r4, r4, r0
   11b20:	beq	11b84 <__assert_fail@plt+0x1200>
   11b24:	cmp	r5, r4
   11b28:	bne	11b04 <__assert_fail@plt+0x1180>
   11b2c:	lsl	r5, r5, #1
   11b30:	mov	r0, r6
   11b34:	mov	r1, r5
   11b38:	bl	10870 <realloc@plt>
   11b3c:	subs	r6, r0, #0
   11b40:	bne	11b04 <__assert_fail@plt+0x1180>
   11b44:	ldr	r0, [pc, #108]	; 11bb8 <__assert_fail@plt+0x1234>
   11b48:	mov	r1, r5
   11b4c:	add	r0, pc, r0
   11b50:	bl	11544 <__assert_fail@plt+0xbc0>
   11b54:	bl	10918 <__errno_location@plt>
   11b58:	ldr	r4, [r0]
   11b5c:	mov	r0, r7
   11b60:	bl	10978 <close@plt>
   11b64:	cmp	r4, #0
   11b68:	beq	11b8c <__assert_fail@plt+0x1208>
   11b6c:	mov	r0, r6
   11b70:	bl	10840 <free@plt>
   11b74:	cmp	r9, #0
   11b78:	strne	r5, [r9]
   11b7c:	mov	r0, r4
   11b80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b84:	mov	r0, r7
   11b88:	bl	10978 <close@plt>
   11b8c:	mov	r4, #0
   11b90:	str	r6, [r8]
   11b94:	b	11b74 <__assert_fail@plt+0x11f0>
   11b98:	bl	10918 <__errno_location@plt>
   11b9c:	ldr	r4, [r0]
   11ba0:	mov	r0, r4
   11ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ba8:	ldr	r0, [pc, #12]	; 11bbc <__assert_fail@plt+0x1238>
   11bac:	add	r0, pc, r0
   11bb0:	bl	11544 <__assert_fail@plt+0xbc0>
   11bb4:	andeq	r0, r0, r8, lsl #28
   11bb8:	andeq	r0, r0, r8, lsr #26
   11bbc:			; <UNDEFINED> instruction: 0x00000cb4
   11bc0:	push	{r4, r5, r6, lr}
   11bc4:	sub	sp, sp, #16
   11bc8:	ldr	r4, [pc, #124]	; 11c4c <__assert_fail@plt+0x12c8>
   11bcc:	ldr	r3, [pc, #124]	; 11c50 <__assert_fail@plt+0x12cc>
   11bd0:	add	r4, pc, r4
   11bd4:	mov	r2, r1
   11bd8:	ldr	r5, [r4, r3]
   11bdc:	add	r1, sp, #8
   11be0:	mov	r6, r0
   11be4:	ldr	r3, [r5]
   11be8:	str	r3, [sp, #12]
   11bec:	bl	11aac <__assert_fail@plt+0x1128>
   11bf0:	cmp	r0, #0
   11bf4:	ldreq	r0, [sp, #8]
   11bf8:	bne	11c14 <__assert_fail@plt+0x1290>
   11bfc:	ldr	r2, [sp, #12]
   11c00:	ldr	r3, [r5]
   11c04:	cmp	r2, r3
   11c08:	bne	11c48 <__assert_fail@plt+0x12c4>
   11c0c:	add	sp, sp, #16
   11c10:	pop	{r4, r5, r6, pc}
   11c14:	ldr	r3, [pc, #56]	; 11c54 <__assert_fail@plt+0x12d0>
   11c18:	ldr	r3, [r4, r3]
   11c1c:	ldr	r4, [r3]
   11c20:	bl	108ac <strerror@plt>
   11c24:	ldr	r2, [pc, #44]	; 11c58 <__assert_fail@plt+0x12d4>
   11c28:	mov	r3, r6
   11c2c:	add	r2, pc, r2
   11c30:	mov	r1, #1
   11c34:	str	r0, [sp]
   11c38:	mov	r0, r4
   11c3c:	bl	10954 <__fprintf_chk@plt>
   11c40:	mov	r0, #0
   11c44:	b	11bfc <__assert_fail@plt+0x1278>
   11c48:	bl	10864 <__stack_chk_fail@plt>
   11c4c:	andeq	r1, r1, ip, lsl #7
   11c50:	andeq	r0, r0, r8, lsl #1
   11c54:	muleq	r0, r0, r0
   11c58:	andeq	r0, r0, r4, lsr #25
   11c5c:	push	{r4, r5, r6, r7, r8, lr}
   11c60:	mov	r6, r1
   11c64:	ldr	r1, [pc, #268]	; 11d78 <__assert_fail@plt+0x13f4>
   11c68:	mov	r4, r0
   11c6c:	add	r1, pc, r1
   11c70:	bl	1081c <strcmp@plt>
   11c74:	cmp	r0, #0
   11c78:	bne	11d04 <__assert_fail@plt+0x1380>
   11c7c:	ldr	r3, [r6, #4]
   11c80:	lsr	r5, r3, #24
   11c84:	lsl	r2, r3, #8
   11c88:	orr	r5, r5, r3, lsl #24
   11c8c:	and	r2, r2, #16711680	; 0xff0000
   11c90:	lsr	r3, r3, #8
   11c94:	orr	r5, r5, r2
   11c98:	and	r3, r3, #65280	; 0xff00
   11c9c:	orr	r5, r5, r3
   11ca0:	cmp	r5, #0
   11ca4:	movgt	r8, #1
   11ca8:	ble	11d54 <__assert_fail@plt+0x13d0>
   11cac:	mov	r4, #0
   11cb0:	b	11cbc <__assert_fail@plt+0x1338>
   11cb4:	cmp	r4, r5
   11cb8:	bge	11d5c <__assert_fail@plt+0x13d8>
   11cbc:	sub	r2, r5, r4
   11cc0:	add	r1, r6, r4
   11cc4:	mov	r0, r8
   11cc8:	bl	10948 <write@plt>
   11ccc:	subs	r7, r0, #0
   11cd0:	add	r4, r4, r7
   11cd4:	bge	11cb4 <__assert_fail@plt+0x1330>
   11cd8:	bl	10918 <__errno_location@plt>
   11cdc:	cmp	r8, #1
   11ce0:	ldr	r7, [r0]
   11ce4:	rsb	r7, r7, #0
   11ce8:	beq	11cf4 <__assert_fail@plt+0x1370>
   11cec:	mov	r0, r8
   11cf0:	bl	10978 <close@plt>
   11cf4:	cmp	r7, #0
   11cf8:	bge	11d54 <__assert_fail@plt+0x13d0>
   11cfc:	rsb	r0, r7, #0
   11d00:	pop	{r4, r5, r6, r7, r8, pc}
   11d04:	mov	r0, r4
   11d08:	ldr	r2, [pc, #108]	; 11d7c <__assert_fail@plt+0x13f8>
   11d0c:	ldr	r1, [pc, #108]	; 11d80 <__assert_fail@plt+0x13fc>
   11d10:	bl	108d0 <open@plt>
   11d14:	subs	r8, r0, #0
   11d18:	blt	11d6c <__assert_fail@plt+0x13e8>
   11d1c:	ldr	r3, [r6, #4]
   11d20:	lsr	r5, r3, #24
   11d24:	lsl	r2, r3, #8
   11d28:	orr	r5, r5, r3, lsl #24
   11d2c:	and	r2, r2, #16711680	; 0xff0000
   11d30:	lsr	r3, r3, #8
   11d34:	orr	r5, r5, r2
   11d38:	and	r3, r3, #65280	; 0xff00
   11d3c:	orr	r5, r5, r3
   11d40:	cmp	r5, #0
   11d44:	bgt	11cac <__assert_fail@plt+0x1328>
   11d48:	cmp	r8, #1
   11d4c:	beq	11d54 <__assert_fail@plt+0x13d0>
   11d50:	bl	10978 <close@plt>
   11d54:	mov	r0, #0
   11d58:	pop	{r4, r5, r6, r7, r8, pc}
   11d5c:	cmp	r8, #1
   11d60:	bne	11cec <__assert_fail@plt+0x1368>
   11d64:	mov	r0, #0
   11d68:	pop	{r4, r5, r6, r7, r8, pc}
   11d6c:	bl	10918 <__errno_location@plt>
   11d70:	ldr	r0, [r0]
   11d74:	pop	{r4, r5, r6, r7, r8, pc}
   11d78:	andeq	r0, r0, r0, ror #24
   11d7c:			; <UNDEFINED> instruction: 0x000001b6
   11d80:	andeq	r0, r0, r1, asr #4
   11d84:	push	{r4, r5, lr}
   11d88:	sub	sp, sp, #12
   11d8c:	mov	r4, r0
   11d90:	bl	11c5c <__assert_fail@plt+0x12d8>
   11d94:	ldr	r2, [pc, #80]	; 11dec <__assert_fail@plt+0x1468>
   11d98:	add	r2, pc, r2
   11d9c:	subs	r3, r0, #0
   11da0:	bne	11db0 <__assert_fail@plt+0x142c>
   11da4:	mov	r0, r3
   11da8:	add	sp, sp, #12
   11dac:	pop	{r4, r5, pc}
   11db0:	ldr	r3, [pc, #56]	; 11df0 <__assert_fail@plt+0x146c>
   11db4:	ldr	r3, [r2, r3]
   11db8:	ldr	r5, [r3]
   11dbc:	bl	108ac <strerror@plt>
   11dc0:	ldr	r2, [pc, #44]	; 11df4 <__assert_fail@plt+0x1470>
   11dc4:	mov	r3, r4
   11dc8:	add	r2, pc, r2
   11dcc:	mov	r1, #1
   11dd0:	str	r0, [sp]
   11dd4:	mov	r0, r5
   11dd8:	bl	10954 <__fprintf_chk@plt>
   11ddc:	mvn	r3, #0
   11de0:	mov	r0, r3
   11de4:	add	sp, sp, #12
   11de8:	pop	{r4, r5, pc}
   11dec:	andeq	r1, r1, r4, asr #3
   11df0:	muleq	r0, r0, r0
   11df4:	andeq	r0, r0, ip, lsr #22
   11df8:	ldrb	r3, [r0]
   11dfc:	cmp	r3, #0
   11e00:	beq	11ee0 <__assert_fail@plt+0x155c>
   11e04:	mvn	r3, #0
   11e08:	push	{r4, r5, r6, r7, r8, lr}
   11e0c:	mov	r5, r0
   11e10:	str	r3, [r2]
   11e14:	ldrb	r4, [r0]
   11e18:	ldr	r0, [pc, #200]	; 11ee8 <__assert_fail@plt+0x1564>
   11e1c:	mov	r8, r1
   11e20:	add	r0, pc, r0
   11e24:	mov	r1, r4
   11e28:	mov	r7, r2
   11e2c:	bl	1090c <strchr@plt>
   11e30:	mov	r6, r4
   11e34:	cmp	r0, #0
   11e38:	moveq	r6, r0
   11e3c:	beq	11e54 <__assert_fail@plt+0x14d0>
   11e40:	ldrb	r3, [r5, #1]
   11e44:	cmp	r4, r3
   11e48:	beq	11ec0 <__assert_fail@plt+0x153c>
   11e4c:	add	r5, r5, #1
   11e50:	mov	r4, r3
   11e54:	cmp	r4, #0
   11e58:	beq	11ed8 <__assert_fail@plt+0x1554>
   11e5c:	ldr	r0, [pc, #136]	; 11eec <__assert_fail@plt+0x1568>
   11e60:	mov	r1, r4
   11e64:	add	r0, pc, r0
   11e68:	bl	1090c <strchr@plt>
   11e6c:	cmp	r0, #0
   11e70:	beq	11ed8 <__assert_fail@plt+0x1554>
   11e74:	cmp	r4, #115	; 0x73
   11e78:	beq	11ea8 <__assert_fail@plt+0x1524>
   11e7c:	cmp	r6, #98	; 0x62
   11e80:	moveq	r3, #1
   11e84:	beq	11ea0 <__assert_fail@plt+0x151c>
   11e88:	cmp	r6, #104	; 0x68
   11e8c:	moveq	r3, #2
   11e90:	beq	11ea0 <__assert_fail@plt+0x151c>
   11e94:	cmp	r6, #108	; 0x6c
   11e98:	moveq	r3, #4
   11e9c:	mvnne	r3, #0
   11ea0:	str	r3, [r7]
   11ea4:	ldrb	r4, [r5]
   11ea8:	str	r4, [r8]
   11eac:	ldrb	r0, [r5, #1]
   11eb0:	adds	r0, r0, #0
   11eb4:	movne	r0, #1
   11eb8:	rsb	r0, r0, #0
   11ebc:	pop	{r4, r5, r6, r7, r8, pc}
   11ec0:	cmp	r6, #104	; 0x68
   11ec4:	add	r3, r5, #2
   11ec8:	ldrb	r4, [r5, #2]
   11ecc:	moveq	r6, #98	; 0x62
   11ed0:	mov	r5, r3
   11ed4:	b	11e54 <__assert_fail@plt+0x14d0>
   11ed8:	mvn	r0, #0
   11edc:	pop	{r4, r5, r6, r7, r8, pc}
   11ee0:	mvn	r0, #0
   11ee4:	bx	lr
   11ee8:	strdeq	r0, [r0], -r8
   11eec:			; <UNDEFINED> instruction: 0x00000abc
   11ef0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ef4:	subs	fp, r1, #0
   11ef8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11efc:	mov	r4, r0
   11f00:	bl	1177c <__assert_fail@plt+0xdf8>
   11f04:	cmp	r0, #0
   11f08:	bne	12028 <__assert_fail@plt+0x16a4>
   11f0c:	ands	r5, fp, #3
   11f10:	bne	11fb0 <__assert_fail@plt+0x162c>
   11f14:	ldr	r1, [pc, #360]	; 12084 <__assert_fail@plt+0x1700>
   11f18:	mov	r0, #1
   11f1c:	add	r1, pc, r1
   11f20:	bl	1093c <__printf_chk@plt>
   11f24:	cmp	fp, #0
   11f28:	add	r6, fp, #3
   11f2c:	movge	r6, fp
   11f30:	cmp	fp, #3
   11f34:	asr	r6, r6, #2
   11f38:	ble	11fa4 <__assert_fail@plt+0x1620>
   11f3c:	ldr	sl, [pc, #324]	; 12088 <__assert_fail@plt+0x1704>
   11f40:	ldr	r9, [pc, #324]	; 1208c <__assert_fail@plt+0x1708>
   11f44:	ldr	r8, [pc, #324]	; 12090 <__assert_fail@plt+0x170c>
   11f48:	add	sl, pc, sl
   11f4c:	add	r9, pc, r9
   11f50:	add	r8, pc, r8
   11f54:	sub	r4, r4, #4
   11f58:	sub	r7, r6, #1
   11f5c:	ldr	r1, [r4, #4]!
   11f60:	cmp	r5, r7
   11f64:	movlt	r3, sl
   11f68:	lsr	r2, r1, #24
   11f6c:	lsl	r0, r1, #8
   11f70:	orr	r2, r2, r1, lsl #24
   11f74:	and	r0, r0, #16711680	; 0xff0000
   11f78:	lsr	r1, r1, #8
   11f7c:	orr	r2, r2, r0
   11f80:	and	r1, r1, #65280	; 0xff00
   11f84:	movge	r3, r9
   11f88:	orr	r2, r2, r1
   11f8c:	add	r5, r5, #1
   11f90:	mov	r1, r8
   11f94:	mov	r0, #1
   11f98:	bl	1093c <__printf_chk@plt>
   11f9c:	cmp	r6, r5
   11fa0:	bgt	11f5c <__assert_fail@plt+0x15d8>
   11fa4:	mov	r0, #62	; 0x3e
   11fa8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fac:	b	10924 <putchar@plt>
   11fb0:	ldr	r1, [pc, #220]	; 12094 <__assert_fail@plt+0x1710>
   11fb4:	mov	r0, #1
   11fb8:	add	r1, pc, r1
   11fbc:	bl	1093c <__printf_chk@plt>
   11fc0:	cmp	fp, #0
   11fc4:	ble	1201c <__assert_fail@plt+0x1698>
   11fc8:	ldr	sl, [pc, #200]	; 12098 <__assert_fail@plt+0x1714>
   11fcc:	ldr	r9, [pc, #200]	; 1209c <__assert_fail@plt+0x1718>
   11fd0:	ldr	r8, [pc, #200]	; 120a0 <__assert_fail@plt+0x171c>
   11fd4:	sub	r7, fp, #1
   11fd8:	add	sl, pc, sl
   11fdc:	add	r9, pc, r9
   11fe0:	add	r8, pc, r8
   11fe4:	add	fp, r4, fp
   11fe8:	mov	r6, r4
   11fec:	add	r6, r6, #1
   11ff0:	mov	r3, r6
   11ff4:	mov	r1, r8
   11ff8:	ldrb	r2, [r3, #-1]!
   11ffc:	mov	r0, #1
   12000:	sub	r3, r3, r4
   12004:	cmp	r3, r7
   12008:	movge	r3, sl
   1200c:	movlt	r3, r9
   12010:	bl	1093c <__printf_chk@plt>
   12014:	cmp	r6, fp
   12018:	bne	11fec <__assert_fail@plt+0x1668>
   1201c:	mov	r0, #93	; 0x5d
   12020:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12024:	b	10924 <putchar@plt>
   12028:	ldr	r1, [pc, #116]	; 120a4 <__assert_fail@plt+0x1720>
   1202c:	mov	r0, #1
   12030:	add	r1, pc, r1
   12034:	bl	1093c <__printf_chk@plt>
   12038:	ldr	r6, [pc, #104]	; 120a8 <__assert_fail@plt+0x1724>
   1203c:	ldr	r7, [pc, #104]	; 120ac <__assert_fail@plt+0x1728>
   12040:	add	r6, pc, r6
   12044:	add	r7, pc, r7
   12048:	add	fp, r4, fp
   1204c:	mov	r2, r4
   12050:	mov	r1, r6
   12054:	mov	r0, #1
   12058:	bl	1093c <__printf_chk@plt>
   1205c:	mov	r0, r4
   12060:	bl	10900 <strlen@plt>
   12064:	add	r0, r0, #1
   12068:	add	r4, r4, r0
   1206c:	cmp	r4, fp
   12070:	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12074:	mov	r1, r7
   12078:	mov	r0, #1
   1207c:	bl	1093c <__printf_chk@plt>
   12080:	b	1204c <__assert_fail@plt+0x16c8>
   12084:	andeq	r0, r0, ip, lsl sl
   12088:	andeq	r0, r0, r4, ror #9
   1208c:	andeq	r0, r0, r0, asr #15
   12090:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12094:	muleq	r0, r4, r9
   12098:	andeq	r0, r0, r4, lsr r7
   1209c:	andeq	r0, r0, r0, asr r4
   120a0:	andeq	r0, r0, r4, ror r9
   120a4:	strdeq	r0, [r0], -r8
   120a8:	andeq	r0, r0, ip, ror #17
   120ac:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   120b0:	ldr	r2, [pc, #28]	; 120d4 <__assert_fail@plt+0x1750>
   120b4:	ldr	r1, [pc, #28]	; 120d8 <__assert_fail@plt+0x1754>
   120b8:	push	{r4, lr}
   120bc:	add	r2, pc, r2
   120c0:	add	r1, pc, r1
   120c4:	mov	r0, #1
   120c8:	bl	1093c <__printf_chk@plt>
   120cc:	mov	r0, #0
   120d0:	bl	108f4 <exit@plt>
   120d4:	andeq	r0, r0, r0, lsr #17
   120d8:	andeq	r0, r0, r8, lsr #17
   120dc:	push	{r7, fp, lr}
   120e0:	sub	sp, sp, #44	; 0x2c
   120e4:	ldr	lr, [pc, #604]	; 12348 <__assert_fail@plt+0x19c4>
   120e8:	ldr	ip, [pc, #604]	; 1234c <__assert_fail@plt+0x19c8>
   120ec:	add	lr, pc, lr
   120f0:	cmp	r0, #0
   120f4:	str	r0, [sp, #20]
   120f8:	mov	r5, r1
   120fc:	ldr	r1, [lr, ip]
   12100:	mov	r4, r3
   12104:	mov	r8, r2
   12108:	ldr	r3, [r1]
   1210c:	ldr	r6, [sp, #56]	; 0x38
   12110:	str	r3, [sp, #36]	; 0x24
   12114:	beq	122f4 <__assert_fail@plt+0x1970>
   12118:	ldr	r3, [pc, #560]	; 12350 <__assert_fail@plt+0x19cc>
   1211c:	ldr	r2, [pc, #560]	; 12354 <__assert_fail@plt+0x19d0>
   12120:	add	r3, pc, r3
   12124:	ldm	r3, {r0, r1}
   12128:	ldr	r3, [lr, r2]
   1212c:	str	r0, [sp, #28]
   12130:	add	r0, sp, #28
   12134:	ldr	r7, [r3]
   12138:	strh	r1, [sp, #32]
   1213c:	bl	10900 <strlen@plt>
   12140:	ldr	r2, [pc, #528]	; 12358 <__assert_fail@plt+0x19d4>
   12144:	mov	r1, #1
   12148:	str	r8, [sp]
   1214c:	mov	r3, r5
   12150:	add	r2, pc, r2
   12154:	add	r8, r0, r1
   12158:	mov	r0, r7
   1215c:	bl	10954 <__fprintf_chk@plt>
   12160:	ldr	r0, [r4]
   12164:	cmp	r0, #0
   12168:	beq	122d4 <__assert_fail@plt+0x1950>
   1216c:	mov	r9, r4
   12170:	mov	r5, #0
   12174:	bl	10900 <strlen@plt>
   12178:	ldr	r3, [r9, #4]
   1217c:	cmp	r3, #1
   12180:	add	r3, r0, #1
   12184:	addeq	r3, r3, r8
   12188:	ldr	r0, [r9, #16]!
   1218c:	cmp	r5, r3
   12190:	movlt	r5, r3
   12194:	cmp	r0, #0
   12198:	bne	12174 <__assert_fail@plt+0x17f0>
   1219c:	ldr	r3, [r6]
   121a0:	cmp	r3, #0
   121a4:	beq	122a4 <__assert_fail@plt+0x1920>
   121a8:	ldr	sl, [pc, #428]	; 1235c <__assert_fail@plt+0x19d8>
   121ac:	ldr	r9, [pc, #428]	; 12360 <__assert_fail@plt+0x19dc>
   121b0:	add	sl, pc, sl
   121b4:	add	r9, pc, r9
   121b8:	add	r4, r4, #16
   121bc:	b	12234 <__assert_fail@plt+0x18b0>
   121c0:	mov	r2, #6
   121c4:	mov	r3, r7
   121c8:	mov	r1, #1
   121cc:	mov	r0, r9
   121d0:	bl	1087c <fwrite@plt>
   121d4:	ldr	r2, [r4, #-12]
   121d8:	ldr	fp, [r4, #-16]
   121dc:	cmp	r2, #0
   121e0:	bne	12260 <__assert_fail@plt+0x18dc>
   121e4:	ldr	r2, [pc, #376]	; 12364 <__assert_fail@plt+0x19e0>
   121e8:	str	fp, [sp]
   121ec:	mov	r3, r5
   121f0:	add	r2, pc, r2
   121f4:	mov	r1, #1
   121f8:	mov	r0, r7
   121fc:	bl	10954 <__fprintf_chk@plt>
   12200:	ldr	r2, [pc, #352]	; 12368 <__assert_fail@plt+0x19e4>
   12204:	ldr	r3, [r6], #4
   12208:	add	r2, pc, r2
   1220c:	mov	r1, #1
   12210:	mov	r0, r7
   12214:	bl	10954 <__fprintf_chk@plt>
   12218:	ldr	r3, [r4]
   1221c:	cmp	r3, #0
   12220:	beq	122c8 <__assert_fail@plt+0x1944>
   12224:	ldr	r3, [r6]
   12228:	add	r4, r4, #16
   1222c:	cmp	r3, #0
   12230:	beq	122a4 <__assert_fail@plt+0x1920>
   12234:	ldr	r3, [r4, #-4]
   12238:	cmp	r3, #126	; 0x7e
   1223c:	bgt	121c0 <__assert_fail@plt+0x183c>
   12240:	mov	r2, sl
   12244:	mov	r1, #1
   12248:	mov	r0, r7
   1224c:	bl	10954 <__fprintf_chk@plt>
   12250:	ldr	r2, [r4, #-12]
   12254:	ldr	fp, [r4, #-16]
   12258:	cmp	r2, #0
   1225c:	beq	121e4 <__assert_fail@plt+0x1860>
   12260:	mov	r0, fp
   12264:	bl	10900 <strlen@plt>
   12268:	ldr	r2, [pc, #252]	; 1236c <__assert_fail@plt+0x19e8>
   1226c:	sub	ip, r5, r8
   12270:	add	r2, pc, r2
   12274:	str	r2, [sp, #8]
   12278:	add	r2, sp, #28
   1227c:	str	r2, [sp]
   12280:	ldr	r2, [pc, #232]	; 12370 <__assert_fail@plt+0x19ec>
   12284:	mov	r3, fp
   12288:	add	r2, pc, r2
   1228c:	mov	r1, #1
   12290:	sub	ip, ip, r0
   12294:	str	ip, [sp, #4]
   12298:	mov	r0, r7
   1229c:	bl	10954 <__fprintf_chk@plt>
   122a0:	b	12200 <__assert_fail@plt+0x187c>
   122a4:	ldr	r3, [pc, #200]	; 12374 <__assert_fail@plt+0x19f0>
   122a8:	ldr	r1, [pc, #200]	; 12378 <__assert_fail@plt+0x19f4>
   122ac:	ldr	r0, [pc, #200]	; 1237c <__assert_fail@plt+0x19f8>
   122b0:	add	r3, pc, r3
   122b4:	ldr	r2, [pc, #196]	; 12380 <__assert_fail@plt+0x19fc>
   122b8:	add	r3, r3, #16
   122bc:	add	r1, pc, r1
   122c0:	add	r0, pc, r0
   122c4:	bl	10984 <__assert_fail@plt>
   122c8:	ldr	r3, [sp, #20]
   122cc:	cmp	r3, #0
   122d0:	beq	12340 <__assert_fail@plt+0x19bc>
   122d4:	ldr	r2, [pc, #168]	; 12384 <__assert_fail@plt+0x1a00>
   122d8:	ldr	r3, [sp, #20]
   122dc:	mov	r0, r7
   122e0:	add	r2, pc, r2
   122e4:	mov	r1, #1
   122e8:	bl	10954 <__fprintf_chk@plt>
   122ec:	mov	r0, #1
   122f0:	bl	108f4 <exit@plt>
   122f4:	ldr	r1, [pc, #140]	; 12388 <__assert_fail@plt+0x1a04>
   122f8:	ldr	r2, [pc, #140]	; 1238c <__assert_fail@plt+0x1a08>
   122fc:	mov	r3, r5
   12300:	ldr	ip, [lr, r1]
   12304:	add	r2, pc, r2
   12308:	str	r8, [sp]
   1230c:	ldm	r2, {r0, r1}
   12310:	ldr	r7, [ip]
   12314:	ldr	r2, [pc, #116]	; 12390 <__assert_fail@plt+0x1a0c>
   12318:	str	r0, [sp, #28]
   1231c:	strh	r1, [sp, #32]
   12320:	mov	r0, r7
   12324:	add	r2, pc, r2
   12328:	mov	r1, #1
   1232c:	bl	10954 <__fprintf_chk@plt>
   12330:	ldr	r0, [r4]
   12334:	cmp	r0, #0
   12338:	movne	r8, #6
   1233c:	bne	1216c <__assert_fail@plt+0x17e8>
   12340:	mov	r0, #0
   12344:	bl	108f4 <exit@plt>
   12348:	andeq	r0, r1, r0, ror lr
   1234c:	andeq	r0, r0, r8, lsl #1
   12350:			; <UNDEFINED> instruction: 0x000008bc
   12354:	muleq	r0, r0, r0
   12358:	andeq	r0, r0, r8, lsr #16
   1235c:	andeq	r0, r0, r4, lsl #16
   12360:	strdeq	r0, [r0], -r8
   12364:	andeq	r0, r0, ip, asr #15
   12368:	andeq	r0, r0, r4, lsl r3
   1236c:	muleq	r0, ip, r4
   12370:	andeq	r0, r0, ip, lsr r7
   12374:	muleq	r0, r4, r5
   12378:	ldrdeq	r0, [r0], -r4
   1237c:	ldrdeq	r0, [r0], -r4
   12380:			; <UNDEFINED> instruction: 0x000001b7
   12384:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12388:	muleq	r0, r8, r0
   1238c:	ldrdeq	r0, [r0], -r8
   12390:	andeq	r0, r0, r4, asr r6
   12394:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12398:	mov	r7, r0
   1239c:	ldr	r6, [pc, #72]	; 123ec <__assert_fail@plt+0x1a68>
   123a0:	ldr	r5, [pc, #72]	; 123f0 <__assert_fail@plt+0x1a6c>
   123a4:	add	r6, pc, r6
   123a8:	add	r5, pc, r5
   123ac:	sub	r6, r6, r5
   123b0:	mov	r8, r1
   123b4:	mov	r9, r2
   123b8:	bl	107fc <strcmp@plt-0x20>
   123bc:	asrs	r6, r6, #2
   123c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   123c4:	mov	r4, #0
   123c8:	add	r4, r4, #1
   123cc:	ldr	r3, [r5], #4
   123d0:	mov	r2, r9
   123d4:	mov	r1, r8
   123d8:	mov	r0, r7
   123dc:	blx	r3
   123e0:	cmp	r6, r4
   123e4:	bne	123c8 <__assert_fail@plt+0x1a44>
   123e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   123ec:	andeq	r0, r1, r8, lsr #20
   123f0:	andeq	r0, r1, r0, lsr #20
   123f4:	bx	lr

Disassembly of section .fini:

000123f8 <.fini>:
   123f8:	push	{r3, lr}
   123fc:	pop	{r3, pc}
