
raspbian-preinstalled/lslocks:     file format elf32-littlearm


Disassembly of section .init:

00011358 <.init>:
   11358:	push	{r3, lr}
   1135c:	bl	1242c <__assert_fail@plt+0xcdc>
   11360:	pop	{r3, pc}

Disassembly of section .plt:

00011364 <fdopen@plt-0x14>:
   11364:	push	{lr}		; (str lr, [sp, #-4]!)
   11368:	ldr	lr, [pc, #4]	; 11374 <fdopen@plt-0x4>
   1136c:	add	lr, pc, lr
   11370:	ldr	pc, [lr, #8]!
   11374:	andeq	r5, r1, r8, lsr #22

00011378 <fdopen@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #86016	; 0x15000
   11380:	ldr	pc, [ip, #2856]!	; 0xb28

00011384 <scols_column_set_json_type@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #86016	; 0x15000
   1138c:	ldr	pc, [ip, #2848]!	; 0xb20

00011390 <calloc@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #86016	; 0x15000
   11398:	ldr	pc, [ip, #2840]!	; 0xb18

0001139c <raise@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #86016	; 0x15000
   113a4:	ldr	pc, [ip, #2832]!	; 0xb10

000113a8 <mnt_unref_table@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #86016	; 0x15000
   113b0:	ldr	pc, [ip, #2824]!	; 0xb08

000113b4 <scols_line_refer_data@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #86016	; 0x15000
   113bc:	ldr	pc, [ip, #2816]!	; 0xb00

000113c0 <strcmp@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #86016	; 0x15000
   113c8:	ldr	pc, [ip, #2808]!	; 0xaf8

000113cc <mnt_new_table_from_file@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #86016	; 0x15000
   113d4:	ldr	pc, [ip, #2800]!	; 0xaf0

000113d8 <strtol@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #86016	; 0x15000
   113e0:	ldr	pc, [ip, #2792]!	; 0xae8

000113e4 <strcspn@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #86016	; 0x15000
   113ec:	ldr	pc, [ip, #2784]!	; 0xae0

000113f0 <scols_table_set_name@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #86016	; 0x15000
   113f8:	ldr	pc, [ip, #2776]!	; 0xad8

000113fc <scols_table_enable_noheadings@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #86016	; 0x15000
   11404:	ldr	pc, [ip, #2768]!	; 0xad0

00011408 <read@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #86016	; 0x15000
   11410:	ldr	pc, [ip, #2760]!	; 0xac8

00011414 <scols_table_new_column@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #86016	; 0x15000
   1141c:	ldr	pc, [ip, #2752]!	; 0xac0

00011420 <free@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #86016	; 0x15000
   11428:	ldr	pc, [ip, #2744]!	; 0xab8

0001142c <fgets@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #86016	; 0x15000
   11434:	ldr	pc, [ip, #2736]!	; 0xab0

00011438 <nanosleep@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #86016	; 0x15000
   11440:	ldr	pc, [ip, #2728]!	; 0xaa8

00011444 <scols_table_enable_raw@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #86016	; 0x15000
   1144c:	ldr	pc, [ip, #2720]!	; 0xaa0

00011450 <ferror@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #86016	; 0x15000
   11458:	ldr	pc, [ip, #2712]!	; 0xa98

0001145c <strndup@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #86016	; 0x15000
   11464:	ldr	pc, [ip, #2704]!	; 0xa90

00011468 <_exit@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #86016	; 0x15000
   11470:	ldr	pc, [ip, #2696]!	; 0xa88

00011474 <memcpy@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #86016	; 0x15000
   1147c:	ldr	pc, [ip, #2688]!	; 0xa80

00011480 <mnt_table_find_devno@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #86016	; 0x15000
   11488:	ldr	pc, [ip, #2680]!	; 0xa78

0001148c <__strtoull_internal@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #86016	; 0x15000
   11494:	ldr	pc, [ip, #2672]!	; 0xa70

00011498 <dcgettext@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #86016	; 0x15000
   114a0:	ldr	pc, [ip, #2664]!	; 0xa68

000114a4 <strdup@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #86016	; 0x15000
   114ac:	ldr	pc, [ip, #2656]!	; 0xa60

000114b0 <__stack_chk_fail@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #86016	; 0x15000
   114b8:	ldr	pc, [ip, #2648]!	; 0xa58

000114bc <textdomain@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #86016	; 0x15000
   114c4:	ldr	pc, [ip, #2640]!	; 0xa50

000114c8 <err@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #86016	; 0x15000
   114d0:	ldr	pc, [ip, #2632]!	; 0xa48

000114d4 <__fxstatat64@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #86016	; 0x15000
   114dc:	ldr	pc, [ip, #2624]!	; 0xa40

000114e0 <scols_new_table@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #86016	; 0x15000
   114e8:	ldr	pc, [ip, #2616]!	; 0xa38

000114ec <__fpending@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #86016	; 0x15000
   114f4:	ldr	pc, [ip, #2608]!	; 0xa30

000114f8 <opendir@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #86016	; 0x15000
   11500:	ldr	pc, [ip, #2600]!	; 0xa28

00011504 <mnt_fs_get_target@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #86016	; 0x15000
   1150c:	ldr	pc, [ip, #2592]!	; 0xa20

00011510 <open64@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #86016	; 0x15000
   11518:	ldr	pc, [ip, #2584]!	; 0xa18

0001151c <malloc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #86016	; 0x15000
   11524:	ldr	pc, [ip, #2576]!	; 0xa10

00011528 <__libc_start_main@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #86016	; 0x15000
   11530:	ldr	pc, [ip, #2568]!	; 0xa08

00011534 <readlinkat@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #86016	; 0x15000
   1153c:	ldr	pc, [ip, #2560]!	; 0xa00

00011540 <scols_table_new_line@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #86016	; 0x15000
   11548:	ldr	pc, [ip, #2552]!	; 0x9f8

0001154c <scols_unref_table@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #86016	; 0x15000
   11554:	ldr	pc, [ip, #2544]!	; 0x9f0

00011558 <__gmon_start__@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #86016	; 0x15000
   11560:	ldr	pc, [ip, #2536]!	; 0x9e8

00011564 <getopt_long@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #86016	; 0x15000
   1156c:	ldr	pc, [ip, #2528]!	; 0x9e0

00011570 <__ctype_b_loc@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #86016	; 0x15000
   11578:	ldr	pc, [ip, #2520]!	; 0x9d8

0001157c <exit@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #86016	; 0x15000
   11584:	ldr	pc, [ip, #2512]!	; 0x9d0

00011588 <strtoul@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #86016	; 0x15000
   11590:	ldr	pc, [ip, #2504]!	; 0x9c8

00011594 <strlen@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #86016	; 0x15000
   1159c:	ldr	pc, [ip, #2496]!	; 0x9c0

000115a0 <strchr@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #86016	; 0x15000
   115a8:	ldr	pc, [ip, #2488]!	; 0x9b8

000115ac <openat64@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #86016	; 0x15000
   115b4:	ldr	pc, [ip, #2480]!	; 0x9b0

000115b8 <warnx@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #86016	; 0x15000
   115c0:	ldr	pc, [ip, #2472]!	; 0x9a8

000115c4 <__errno_location@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #86016	; 0x15000
   115cc:	ldr	pc, [ip, #2464]!	; 0x9a0

000115d0 <strncasecmp@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #86016	; 0x15000
   115d8:	ldr	pc, [ip, #2456]!	; 0x998

000115dc <__sprintf_chk@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #86016	; 0x15000
   115e4:	ldr	pc, [ip, #2448]!	; 0x990

000115e8 <__cxa_atexit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #86016	; 0x15000
   115f0:	ldr	pc, [ip, #2440]!	; 0x988

000115f4 <__vasprintf_chk@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #86016	; 0x15000
   115fc:	ldr	pc, [ip, #2432]!	; 0x980

00011600 <memset@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #86016	; 0x15000
   11608:	ldr	pc, [ip, #2424]!	; 0x978

0001160c <fgetc@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #86016	; 0x15000
   11614:	ldr	pc, [ip, #2416]!	; 0x970

00011618 <__printf_chk@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #86016	; 0x15000
   11620:	ldr	pc, [ip, #2408]!	; 0x968

00011624 <strtod@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #86016	; 0x15000
   1162c:	ldr	pc, [ip, #2400]!	; 0x960

00011630 <scols_table_enable_json@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #86016	; 0x15000
   11638:	ldr	pc, [ip, #2392]!	; 0x958

0001163c <__fprintf_chk@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #86016	; 0x15000
   11644:	ldr	pc, [ip, #2384]!	; 0x950

00011648 <fclose@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #86016	; 0x15000
   11650:	ldr	pc, [ip, #2376]!	; 0x948

00011654 <strtok@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #86016	; 0x15000
   1165c:	ldr	pc, [ip, #2368]!	; 0x940

00011660 <setlocale@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #86016	; 0x15000
   11668:	ldr	pc, [ip, #2360]!	; 0x938

0001166c <errx@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #86016	; 0x15000
   11674:	ldr	pc, [ip, #2352]!	; 0x930

00011678 <warn@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #86016	; 0x15000
   11680:	ldr	pc, [ip, #2344]!	; 0x928

00011684 <scols_print_table@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #86016	; 0x15000
   1168c:	ldr	pc, [ip, #2336]!	; 0x920

00011690 <fputc@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #86016	; 0x15000
   11698:	ldr	pc, [ip, #2328]!	; 0x918

0001169c <sscanf@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #86016	; 0x15000
   116a4:	ldr	pc, [ip, #2320]!	; 0x910

000116a8 <localeconv@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #86016	; 0x15000
   116b0:	ldr	pc, [ip, #2312]!	; 0x908

000116b4 <readdir64@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #86016	; 0x15000
   116bc:	ldr	pc, [ip, #2304]!	; 0x900

000116c0 <dirfd@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #86016	; 0x15000
   116c8:	ldr	pc, [ip, #2296]!	; 0x8f8

000116cc <__strtoll_internal@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #86016	; 0x15000
   116d4:	ldr	pc, [ip, #2288]!	; 0x8f0

000116d8 <fopen64@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #86016	; 0x15000
   116e0:	ldr	pc, [ip, #2280]!	; 0x8e8

000116e4 <bindtextdomain@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #86016	; 0x15000
   116ec:	ldr	pc, [ip, #2272]!	; 0x8e0

000116f0 <fputs@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #86016	; 0x15000
   116f8:	ldr	pc, [ip, #2264]!	; 0x8d8

000116fc <strncmp@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #86016	; 0x15000
   11704:	ldr	pc, [ip, #2256]!	; 0x8d0

00011708 <abort@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #86016	; 0x15000
   11710:	ldr	pc, [ip, #2248]!	; 0x8c8

00011714 <close@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #86016	; 0x15000
   1171c:	ldr	pc, [ip, #2240]!	; 0x8c0

00011720 <closedir@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #86016	; 0x15000
   11728:	ldr	pc, [ip, #2232]!	; 0x8b8

0001172c <__snprintf_chk@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #86016	; 0x15000
   11734:	ldr	pc, [ip, #2224]!	; 0x8b0

00011738 <scols_init_debug@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #86016	; 0x15000
   11740:	ldr	pc, [ip, #2216]!	; 0x8a8

00011744 <strspn@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #86016	; 0x15000
   1174c:	ldr	pc, [ip, #2208]!	; 0x8a0

00011750 <__assert_fail@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #86016	; 0x15000
   11758:	ldr	pc, [ip, #2200]!	; 0x898

Disassembly of section .text:

00011760 <.text>:
   11760:	ldr	r3, [pc, #2936]	; 122e0 <__assert_fail@plt+0xb90>
   11764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11768:	sub	sp, sp, #44	; 0x2c
   1176c:	ldr	r3, [r3]
   11770:	mov	sl, #0
   11774:	mov	r9, r0
   11778:	mov	r8, r1
   1177c:	mov	r0, #6
   11780:	ldr	r1, [pc, #2908]	; 122e4 <__assert_fail@plt+0xb94>
   11784:	str	r3, [sp, #36]	; 0x24
   11788:	str	sl, [sp, #32]
   1178c:	str	sl, [sp, #28]
   11790:	bl	11660 <setlocale@plt>
   11794:	ldr	r1, [pc, #2892]	; 122e8 <__assert_fail@plt+0xb98>
   11798:	ldr	r0, [pc, #2892]	; 122ec <__assert_fail@plt+0xb9c>
   1179c:	bl	116e4 <bindtextdomain@plt>
   117a0:	ldr	r0, [pc, #2884]	; 122ec <__assert_fail@plt+0xb9c>
   117a4:	bl	114bc <textdomain@plt>
   117a8:	ldr	r0, [pc, #2880]	; 122f0 <__assert_fail@plt+0xba0>
   117ac:	bl	156c0 <__assert_fail@plt+0x3f70>
   117b0:	ldr	r6, [pc, #2876]	; 122f4 <__assert_fail@plt+0xba4>
   117b4:	ldr	r5, [pc, #2876]	; 122f8 <__assert_fail@plt+0xba8>
   117b8:	ldr	fp, [pc, #2876]	; 122fc <__assert_fail@plt+0xbac>
   117bc:	mov	r7, sl
   117c0:	str	r7, [sp]
   117c4:	mov	r3, r6
   117c8:	mov	r2, r5
   117cc:	mov	r1, r8
   117d0:	mov	r0, r9
   117d4:	bl	11564 <getopt_long@plt>
   117d8:	cmn	r0, #1
   117dc:	beq	11a58 <__assert_fail@plt+0x308>
   117e0:	cmp	r0, #73	; 0x49
   117e4:	ble	11868 <__assert_fail@plt+0x118>
   117e8:	ldr	r4, [pc, #2832]	; 12300 <__assert_fail@plt+0xbb0>
   117ec:	add	r2, sp, #28
   117f0:	mov	r3, #74	; 0x4a
   117f4:	cmp	r0, r3
   117f8:	blt	11844 <__assert_fail@plt+0xf4>
   117fc:	beq	1182c <__assert_fail@plt+0xdc>
   11800:	mov	ip, r4
   11804:	ldr	r1, [ip, #4]!
   11808:	cmp	r0, r1
   1180c:	movlt	r3, #0
   11810:	movge	r3, #1
   11814:	cmp	r1, #0
   11818:	moveq	r3, #0
   1181c:	cmp	r3, #0
   11820:	beq	11844 <__assert_fail@plt+0xf4>
   11824:	cmp	r0, r1
   11828:	bne	11804 <__assert_fail@plt+0xb4>
   1182c:	ldr	r3, [r2]
   11830:	cmp	r3, #0
   11834:	streq	r0, [r2]
   11838:	beq	11844 <__assert_fail@plt+0xf4>
   1183c:	cmp	r0, r3
   11840:	bne	12170 <__assert_fail@plt+0xa20>
   11844:	ldr	r3, [r4, #64]!	; 0x40
   11848:	add	r2, r2, #4
   1184c:	cmp	r0, r3
   11850:	movlt	r1, #0
   11854:	movge	r1, #1
   11858:	cmp	r3, #0
   1185c:	moveq	r1, #0
   11860:	cmp	r1, #0
   11864:	bne	117f4 <__assert_fail@plt+0xa4>
   11868:	sub	r0, r0, #74	; 0x4a
   1186c:	cmp	r0, #54	; 0x36
   11870:	ldrls	pc, [pc, r0, lsl #2]
   11874:	b	11ecc <__assert_fail@plt+0x77c>
   11878:	andeq	r1, r1, ip, asr #20
   1187c:	andeq	r1, r1, ip, asr #29
   11880:	andeq	r1, r1, ip, asr #29
   11884:	andeq	r1, r1, ip, asr #29
   11888:	andeq	r1, r1, ip, asr #29
   1188c:	andeq	r1, r1, ip, asr #29
   11890:	andeq	r1, r1, ip, asr #29
   11894:	andeq	r1, r1, ip, asr #29
   11898:	andeq	r1, r1, ip, asr #29
   1189c:	andeq	r1, r1, ip, asr #29
   118a0:	andeq	r1, r1, ip, asr #29
   118a4:	andeq	r1, r1, ip, asr #29
   118a8:	andeq	r1, r1, r0, lsl #20
   118ac:	andeq	r1, r1, ip, asr #29
   118b0:	andeq	r1, r1, ip, asr #29
   118b4:	andeq	r1, r1, ip, asr #29
   118b8:	andeq	r1, r1, ip, asr #29
   118bc:	andeq	r1, r1, ip, asr #29
   118c0:	andeq	r1, r1, ip, asr #29
   118c4:	andeq	r1, r1, ip, asr #29
   118c8:	andeq	r1, r1, ip, asr #29
   118cc:	andeq	r1, r1, ip, asr #29
   118d0:	andeq	r1, r1, ip, asr #29
   118d4:	andeq	r1, r1, ip, asr #29
   118d8:	strdeq	r1, [r1], -r4
   118dc:	andeq	r1, r1, ip, asr #29
   118e0:	andeq	r1, r1, ip, asr #29
   118e4:	andeq	r1, r1, ip, asr #29
   118e8:	andeq	r1, r1, ip, asr #29
   118ec:	andeq	r1, r1, ip, asr #29
   118f0:	muleq	r1, r8, ip
   118f4:	andeq	r1, r1, r8, ror #19
   118f8:	andeq	r1, r1, ip, asr #29
   118fc:	andeq	r1, r1, ip, asr #29
   11900:	andeq	r1, r1, ip, asr #29
   11904:	andeq	r1, r1, ip, asr #29
   11908:	ldrdeq	r1, [r1], -ip
   1190c:	ldrdeq	r1, [r1], -r0
   11910:	andeq	r1, r1, r4, lsr #19
   11914:	andeq	r1, r1, ip, asr #29
   11918:	muleq	r1, r8, r9
   1191c:	andeq	r1, r1, ip, asr #29
   11920:	andeq	r1, r1, ip, asr #29
   11924:	andeq	r1, r1, r4, ror r9
   11928:	andeq	r1, r1, ip, asr #29
   1192c:	andeq	r1, r1, ip, asr #29
   11930:	andeq	r1, r1, ip, asr #29
   11934:	andeq	r1, r1, ip, asr #29
   11938:	andeq	r1, r1, ip, asr #29
   1193c:	andeq	r1, r1, ip, asr #29
   11940:	andeq	r1, r1, ip, asr #29
   11944:	andeq	r1, r1, ip, asr #29
   11948:	andeq	r1, r1, ip, asr #29
   1194c:	andeq	r1, r1, ip, asr #29
   11950:	andeq	r1, r1, r4, asr r9
   11954:	ldr	r2, [pc, #2472]	; 12304 <__assert_fail@plt+0xbb4>
   11958:	mov	r3, #0
   1195c:	str	r3, [r2, #4]!
   11960:	add	r3, r3, #1
   11964:	cmp	r3, #10
   11968:	bne	1195c <__assert_fail@plt+0x20c>
   1196c:	str	r3, [fp, #108]	; 0x6c
   11970:	b	117c0 <__assert_fail@plt+0x70>
   11974:	ldr	r3, [pc, #2444]	; 12308 <__assert_fail@plt+0xbb8>
   11978:	add	r1, r3, #240	; 0xf0
   1197c:	ldr	r2, [r3, #16]
   11980:	add	r3, r3, #24
   11984:	bic	r2, r2, #1
   11988:	str	r2, [r3, #-8]
   1198c:	cmp	r1, r3
   11990:	bne	1197c <__assert_fail@plt+0x22c>
   11994:	b	117c0 <__assert_fail@plt+0x70>
   11998:	mov	r3, #1
   1199c:	str	r3, [fp, #104]	; 0x68
   119a0:	b	117c0 <__assert_fail@plt+0x70>
   119a4:	ldr	r3, [pc, #2400]	; 1230c <__assert_fail@plt+0xbbc>
   119a8:	mov	r2, #5
   119ac:	ldr	r1, [pc, #2396]	; 12310 <__assert_fail@plt+0xbc0>
   119b0:	mov	r0, #0
   119b4:	ldr	r4, [r3]
   119b8:	bl	11498 <dcgettext@plt>
   119bc:	mov	r1, r0
   119c0:	mov	r0, r4
   119c4:	bl	13b98 <__assert_fail@plt+0x2448>
   119c8:	str	r0, [fp, #16]
   119cc:	b	117c0 <__assert_fail@plt+0x70>
   119d0:	ldr	r3, [pc, #2356]	; 1230c <__assert_fail@plt+0xbbc>
   119d4:	ldr	sl, [r3]
   119d8:	b	117c0 <__assert_fail@plt+0x70>
   119dc:	mov	r3, #1
   119e0:	str	r3, [fp, #100]	; 0x64
   119e4:	b	117c0 <__assert_fail@plt+0x70>
   119e8:	mov	r3, #1
   119ec:	str	r3, [fp]
   119f0:	b	117c0 <__assert_fail@plt+0x70>
   119f4:	mov	r3, #1
   119f8:	str	r3, [fp, #8]
   119fc:	b	117c0 <__assert_fail@plt+0x70>
   11a00:	mov	r2, #5
   11a04:	ldr	r1, [pc, #2312]	; 12314 <__assert_fail@plt+0xbc4>
   11a08:	mov	r0, #0
   11a0c:	bl	11498 <dcgettext@plt>
   11a10:	ldr	r2, [pc, #2304]	; 12318 <__assert_fail@plt+0xbc8>
   11a14:	ldr	r3, [pc, #2304]	; 1231c <__assert_fail@plt+0xbcc>
   11a18:	mov	r9, #0
   11a1c:	ldr	r2, [r2]
   11a20:	mov	r1, r0
   11a24:	mov	r0, #1
   11a28:	bl	11618 <__printf_chk@plt>
   11a2c:	ldr	r3, [pc, #2220]	; 122e0 <__assert_fail@plt+0xb90>
   11a30:	ldr	r2, [sp, #36]	; 0x24
   11a34:	mov	r0, r9
   11a38:	ldr	r3, [r3]
   11a3c:	cmp	r2, r3
   11a40:	bne	122b0 <__assert_fail@plt+0xb60>
   11a44:	add	sp, sp, #44	; 0x2c
   11a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a4c:	mov	r3, #1
   11a50:	str	r3, [fp, #12]
   11a54:	b	117c0 <__assert_fail@plt+0x70>
   11a58:	ldr	r5, [pc, #2204]	; 122fc <__assert_fail@plt+0xbac>
   11a5c:	add	fp, sp, #20
   11a60:	str	fp, [sp, #20]
   11a64:	ldr	r3, [r5, #108]	; 0x6c
   11a68:	str	fp, [sp, #24]
   11a6c:	cmp	r3, #0
   11a70:	bne	11ac0 <__assert_fail@plt+0x370>
   11a74:	mov	r2, #2
   11a78:	str	r3, [r5, #20]
   11a7c:	mov	r3, #3
   11a80:	str	r2, [r5, #28]
   11a84:	str	r3, [r5, #32]
   11a88:	mov	r2, #4
   11a8c:	mov	r3, #5
   11a90:	str	r2, [r5, #36]	; 0x24
   11a94:	str	r3, [r5, #40]	; 0x28
   11a98:	mov	r2, #6
   11a9c:	mov	r3, #7
   11aa0:	mov	r1, #1
   11aa4:	str	r2, [r5, #44]	; 0x2c
   11aa8:	str	r3, [r5, #48]	; 0x30
   11aac:	mov	r2, #9
   11ab0:	mov	r3, #8
   11ab4:	str	r1, [r5, #24]
   11ab8:	str	r2, [r5, #108]	; 0x6c
   11abc:	str	r3, [r5, #52]	; 0x34
   11ac0:	cmp	sl, #0
   11ac4:	beq	11aec <__assert_fail@plt+0x39c>
   11ac8:	ldr	r2, [pc, #2128]	; 12320 <__assert_fail@plt+0xbd0>
   11acc:	ldr	r3, [pc, #2128]	; 12324 <__assert_fail@plt+0xbd4>
   11ad0:	str	r2, [sp]
   11ad4:	mov	r0, sl
   11ad8:	sub	r1, r3, #88	; 0x58
   11adc:	mov	r2, #20
   11ae0:	bl	145f4 <__assert_fail@plt+0x2ea4>
   11ae4:	cmp	r0, #0
   11ae8:	blt	12168 <__assert_fail@plt+0xa18>
   11aec:	mov	r0, #0
   11af0:	bl	11738 <scols_init_debug@plt>
   11af4:	mov	r0, fp
   11af8:	bl	12768 <__assert_fail@plt+0x1018>
   11afc:	subs	r9, r0, #0
   11b00:	bne	11c50 <__assert_fail@plt+0x500>
   11b04:	ldr	r3, [sp, #20]
   11b08:	cmp	r3, fp
   11b0c:	beq	11c50 <__assert_fail@plt+0x500>
   11b10:	bl	114e0 <scols_new_table@plt>
   11b14:	subs	sl, r0, #0
   11b18:	beq	12298 <__assert_fail@plt+0xb48>
   11b1c:	ldr	r1, [r5, #104]	; 0x68
   11b20:	bl	11444 <scols_table_enable_raw@plt>
   11b24:	ldr	r1, [r5, #12]
   11b28:	mov	r0, sl
   11b2c:	bl	11630 <scols_table_enable_json@plt>
   11b30:	ldr	r1, [r5, #100]	; 0x64
   11b34:	mov	r0, sl
   11b38:	bl	113fc <scols_table_enable_noheadings@plt>
   11b3c:	ldr	r3, [r5, #12]
   11b40:	cmp	r3, #0
   11b44:	bne	12240 <__assert_fail@plt+0xaf0>
   11b48:	ldr	r3, [r5, #108]	; 0x6c
   11b4c:	cmp	r3, #0
   11b50:	beq	11f04 <__assert_fail@plt+0x7b4>
   11b54:	ldr	r3, [r5, #20]
   11b58:	cmp	r3, #9
   11b5c:	bgt	12004 <__assert_fail@plt+0x8b4>
   11b60:	mov	r6, #0
   11b64:	ldr	r7, [pc, #1980]	; 12328 <__assert_fail@plt+0xbd8>
   11b68:	ldr	r4, [pc, #1944]	; 12308 <__assert_fail@plt+0xbb8>
   11b6c:	mov	r8, r6
   11b70:	b	11b9c <__assert_fail@plt+0x44c>
   11b74:	ldr	r3, [r5, #108]	; 0x6c
   11b78:	add	r8, r8, #1
   11b7c:	cmp	r8, r3
   11b80:	bcs	11f04 <__assert_fail@plt+0x7b4>
   11b84:	cmp	r8, #0
   11b88:	mov	r6, r8
   11b8c:	blt	12250 <__assert_fail@plt+0xb00>
   11b90:	ldr	r3, [r7], #4
   11b94:	cmp	r3, #9
   11b98:	bgt	12004 <__assert_fail@plt+0x8b4>
   11b9c:	add	r3, r3, r3, lsl #1
   11ba0:	mov	r0, sl
   11ba4:	add	ip, r4, r3, lsl #3
   11ba8:	ldr	r1, [r4, r3, lsl #3]
   11bac:	ldr	r2, [ip, #16]
   11bb0:	vldr	d0, [ip, #8]
   11bb4:	bl	11414 <scols_table_new_column@plt>
   11bb8:	subs	r2, r0, #0
   11bbc:	beq	122c8 <__assert_fail@plt+0xb78>
   11bc0:	ldr	r3, [r5, #12]
   11bc4:	cmp	r3, #0
   11bc8:	beq	11b74 <__assert_fail@plt+0x424>
   11bcc:	ldr	r3, [r5, #108]	; 0x6c
   11bd0:	cmp	r8, r3
   11bd4:	bcs	122b4 <__assert_fail@plt+0xb64>
   11bd8:	add	r6, r5, r6, lsl #2
   11bdc:	ldr	r3, [r6, #20]
   11be0:	cmp	r3, #9
   11be4:	bgt	12004 <__assert_fail@plt+0x8b4>
   11be8:	sub	r3, r3, #1
   11bec:	cmp	r3, #8
   11bf0:	ldrls	pc, [pc, r3, lsl #2]
   11bf4:	b	11c88 <__assert_fail@plt+0x538>
   11bf8:	andeq	r1, r1, r8, ror #24
   11bfc:	andeq	r1, r1, r8, lsl #25
   11c00:	andeq	r1, r1, ip, asr ip
   11c04:	andeq	r1, r1, r8, lsl #25
   11c08:	andeq	r1, r1, r8, ror ip
   11c0c:	andeq	r1, r1, r8, ror #24
   11c10:	andeq	r1, r1, r8, ror #24
   11c14:	andeq	r1, r1, r8, lsl #25
   11c18:	andeq	r1, r1, r8, ror #24
   11c1c:	ldr	r0, [sp, #20]
   11c20:	ldr	r9, [sp, #12]
   11c24:	ldr	r4, [r0]
   11c28:	b	11c38 <__assert_fail@plt+0x4e8>
   11c2c:	bl	125f0 <__assert_fail@plt+0xea0>
   11c30:	mov	r0, r4
   11c34:	ldr	r4, [r4]
   11c38:	cmp	r0, fp
   11c3c:	bne	11c2c <__assert_fail@plt+0x4dc>
   11c40:	mov	r0, sl
   11c44:	bl	11684 <scols_print_table@plt>
   11c48:	mov	r0, sl
   11c4c:	bl	1154c <scols_unref_table@plt>
   11c50:	ldr	r0, [r5, #4]
   11c54:	bl	113a8 <mnt_unref_table@plt>
   11c58:	b	11a2c <__assert_fail@plt+0x2dc>
   11c5c:	ldr	r3, [r5, #8]
   11c60:	cmp	r3, #0
   11c64:	beq	11b74 <__assert_fail@plt+0x424>
   11c68:	mov	r0, r2
   11c6c:	mov	r1, #1
   11c70:	bl	11384 <scols_column_set_json_type@plt>
   11c74:	b	11b74 <__assert_fail@plt+0x424>
   11c78:	mov	r0, r2
   11c7c:	mov	r1, #2
   11c80:	bl	11384 <scols_column_set_json_type@plt>
   11c84:	b	11b74 <__assert_fail@plt+0x424>
   11c88:	mov	r0, r2
   11c8c:	mov	r1, #0
   11c90:	bl	11384 <scols_column_set_json_type@plt>
   11c94:	b	11b74 <__assert_fail@plt+0x424>
   11c98:	ldr	r3, [pc, #1676]	; 1232c <__assert_fail@plt+0xbdc>
   11c9c:	mov	r2, #5
   11ca0:	ldr	r1, [pc, #1672]	; 12330 <__assert_fail@plt+0xbe0>
   11ca4:	ldr	r4, [r3]
   11ca8:	mov	r0, #0
   11cac:	bl	11498 <dcgettext@plt>
   11cb0:	mov	r1, r4
   11cb4:	bl	116f0 <fputs@plt>
   11cb8:	mov	r2, #5
   11cbc:	ldr	r1, [pc, #1648]	; 12334 <__assert_fail@plt+0xbe4>
   11cc0:	mov	r0, #0
   11cc4:	bl	11498 <dcgettext@plt>
   11cc8:	ldr	r3, [pc, #1608]	; 12318 <__assert_fail@plt+0xbc8>
   11ccc:	mov	r1, #1
   11cd0:	mov	r6, #0
   11cd4:	ldr	r3, [r3]
   11cd8:	ldr	r5, [pc, #1576]	; 12308 <__assert_fail@plt+0xbb8>
   11cdc:	ldr	r8, [pc, #1620]	; 12338 <__assert_fail@plt+0xbe8>
   11ce0:	mov	r2, r0
   11ce4:	mov	r0, r4
   11ce8:	bl	1163c <__fprintf_chk@plt>
   11cec:	mov	r1, r4
   11cf0:	mov	r0, #10
   11cf4:	bl	11690 <fputc@plt>
   11cf8:	mov	r2, #5
   11cfc:	ldr	r1, [pc, #1592]	; 1233c <__assert_fail@plt+0xbec>
   11d00:	mov	r0, r6
   11d04:	bl	11498 <dcgettext@plt>
   11d08:	mov	r1, r4
   11d0c:	bl	116f0 <fputs@plt>
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #1572]	; 12340 <__assert_fail@plt+0xbf0>
   11d18:	mov	r0, r6
   11d1c:	bl	11498 <dcgettext@plt>
   11d20:	mov	r1, r4
   11d24:	bl	116f0 <fputs@plt>
   11d28:	mov	r2, #5
   11d2c:	ldr	r1, [pc, #1552]	; 12344 <__assert_fail@plt+0xbf4>
   11d30:	mov	r0, r6
   11d34:	bl	11498 <dcgettext@plt>
   11d38:	mov	r1, r4
   11d3c:	bl	116f0 <fputs@plt>
   11d40:	mov	r2, #5
   11d44:	ldr	r1, [pc, #1532]	; 12348 <__assert_fail@plt+0xbf8>
   11d48:	mov	r0, r6
   11d4c:	bl	11498 <dcgettext@plt>
   11d50:	mov	r1, r4
   11d54:	bl	116f0 <fputs@plt>
   11d58:	mov	r2, #5
   11d5c:	ldr	r1, [pc, #1512]	; 1234c <__assert_fail@plt+0xbfc>
   11d60:	mov	r0, r6
   11d64:	bl	11498 <dcgettext@plt>
   11d68:	mov	r1, r4
   11d6c:	bl	116f0 <fputs@plt>
   11d70:	mov	r2, #5
   11d74:	ldr	r1, [pc, #1492]	; 12350 <__assert_fail@plt+0xc00>
   11d78:	mov	r0, r6
   11d7c:	bl	11498 <dcgettext@plt>
   11d80:	mov	r1, r4
   11d84:	bl	116f0 <fputs@plt>
   11d88:	mov	r2, #5
   11d8c:	ldr	r1, [pc, #1472]	; 12354 <__assert_fail@plt+0xc04>
   11d90:	mov	r0, r6
   11d94:	bl	11498 <dcgettext@plt>
   11d98:	mov	r1, r4
   11d9c:	bl	116f0 <fputs@plt>
   11da0:	mov	r2, #5
   11da4:	ldr	r1, [pc, #1452]	; 12358 <__assert_fail@plt+0xc08>
   11da8:	mov	r0, r6
   11dac:	bl	11498 <dcgettext@plt>
   11db0:	mov	r1, r4
   11db4:	bl	116f0 <fputs@plt>
   11db8:	mov	r2, #5
   11dbc:	ldr	r1, [pc, #1432]	; 1235c <__assert_fail@plt+0xc0c>
   11dc0:	mov	r0, r6
   11dc4:	bl	11498 <dcgettext@plt>
   11dc8:	mov	r1, r4
   11dcc:	bl	116f0 <fputs@plt>
   11dd0:	mov	r2, #5
   11dd4:	ldr	r1, [pc, #1412]	; 12360 <__assert_fail@plt+0xc10>
   11dd8:	mov	r0, r6
   11ddc:	bl	11498 <dcgettext@plt>
   11de0:	mov	r1, r4
   11de4:	bl	116f0 <fputs@plt>
   11de8:	mov	r2, #5
   11dec:	ldr	r1, [pc, #1392]	; 12364 <__assert_fail@plt+0xc14>
   11df0:	mov	r0, r6
   11df4:	bl	11498 <dcgettext@plt>
   11df8:	mov	r1, r4
   11dfc:	bl	116f0 <fputs@plt>
   11e00:	mov	r1, r4
   11e04:	mov	r0, #10
   11e08:	bl	11690 <fputc@plt>
   11e0c:	mov	r2, #5
   11e10:	ldr	r1, [pc, #1360]	; 12368 <__assert_fail@plt+0xc18>
   11e14:	mov	r0, r6
   11e18:	bl	11498 <dcgettext@plt>
   11e1c:	mov	r2, #5
   11e20:	ldr	r1, [pc, #1348]	; 1236c <__assert_fail@plt+0xc1c>
   11e24:	mov	r7, r0
   11e28:	mov	r0, r6
   11e2c:	bl	11498 <dcgettext@plt>
   11e30:	ldr	r2, [pc, #1336]	; 12370 <__assert_fail@plt+0xc20>
   11e34:	mov	r3, r7
   11e38:	str	r2, [sp]
   11e3c:	ldr	r1, [pc, #1328]	; 12374 <__assert_fail@plt+0xc24>
   11e40:	ldr	r2, [pc, #1328]	; 12378 <__assert_fail@plt+0xc28>
   11e44:	str	r0, [sp, #4]
   11e48:	mov	r0, #1
   11e4c:	bl	11618 <__printf_chk@plt>
   11e50:	ldr	r1, [pc, #1316]	; 1237c <__assert_fail@plt+0xc2c>
   11e54:	mov	r2, #5
   11e58:	mov	r0, r6
   11e5c:	bl	11498 <dcgettext@plt>
   11e60:	mov	r1, r4
   11e64:	bl	116f0 <fputs@plt>
   11e68:	ldr	r1, [r5, #20]
   11e6c:	mov	r2, #5
   11e70:	mov	r0, #0
   11e74:	ldr	r7, [r5]
   11e78:	bl	11498 <dcgettext@plt>
   11e7c:	add	r6, r6, #1
   11e80:	mov	r3, r7
   11e84:	mov	r2, r8
   11e88:	mov	r1, #1
   11e8c:	add	r5, r5, #24
   11e90:	str	r0, [sp]
   11e94:	mov	r0, r4
   11e98:	bl	1163c <__fprintf_chk@plt>
   11e9c:	cmp	r6, #10
   11ea0:	bne	11e68 <__assert_fail@plt+0x718>
   11ea4:	mov	r2, #5
   11ea8:	ldr	r1, [pc, #1232]	; 12380 <__assert_fail@plt+0xc30>
   11eac:	mov	r0, #0
   11eb0:	bl	11498 <dcgettext@plt>
   11eb4:	ldr	r2, [pc, #1224]	; 12384 <__assert_fail@plt+0xc34>
   11eb8:	mov	r1, r0
   11ebc:	mov	r0, #1
   11ec0:	bl	11618 <__printf_chk@plt>
   11ec4:	mov	r0, #0
   11ec8:	bl	1157c <exit@plt>
   11ecc:	ldr	r3, [pc, #1204]	; 12388 <__assert_fail@plt+0xc38>
   11ed0:	mov	r2, #5
   11ed4:	ldr	r1, [pc, #1200]	; 1238c <__assert_fail@plt+0xc3c>
   11ed8:	mov	r0, #0
   11edc:	ldr	r4, [r3]
   11ee0:	bl	11498 <dcgettext@plt>
   11ee4:	ldr	r3, [pc, #1068]	; 12318 <__assert_fail@plt+0xbc8>
   11ee8:	mov	r1, #1
   11eec:	ldr	r3, [r3]
   11ef0:	mov	r2, r0
   11ef4:	mov	r0, r4
   11ef8:	bl	1163c <__fprintf_chk@plt>
   11efc:	mov	r0, #1
   11f00:	bl	1157c <exit@plt>
   11f04:	ldr	r7, [sp, #20]
   11f08:	str	r9, [sp, #12]
   11f0c:	cmp	r7, fp
   11f10:	beq	11c1c <__assert_fail@plt+0x4cc>
   11f14:	ldr	r3, [r5, #16]
   11f18:	cmp	r3, #0
   11f1c:	beq	12140 <__assert_fail@plt+0x9f0>
   11f20:	ldr	r2, [r7, #12]
   11f24:	cmp	r3, r2
   11f28:	bne	12138 <__assert_fail@plt+0x9e8>
   11f2c:	mov	r1, #0
   11f30:	mov	r0, sl
   11f34:	bl	11540 <scols_table_new_line@plt>
   11f38:	subs	r8, r0, #0
   11f3c:	beq	12280 <__assert_fail@plt+0xb30>
   11f40:	ldr	r3, [r5, #108]	; 0x6c
   11f44:	cmp	r3, #0
   11f48:	beq	12138 <__assert_fail@plt+0x9e8>
   11f4c:	ldr	r3, [r5, #20]
   11f50:	mov	r4, #0
   11f54:	cmp	r3, #9
   11f58:	str	r4, [sp, #16]
   11f5c:	bgt	12004 <__assert_fail@plt+0x8b4>
   11f60:	ldr	r6, [pc, #960]	; 12328 <__assert_fail@plt+0xbd8>
   11f64:	ldr	r9, [pc, #1060]	; 12390 <__assert_fail@plt+0xc40>
   11f68:	cmp	r3, #9
   11f6c:	ldrls	pc, [pc, r3, lsl #2]
   11f70:	b	11fb8 <__assert_fail@plt+0x868>
   11f74:	andeq	r2, r1, ip, rrx
   11f78:	andeq	r2, r1, r8, asr r0
   11f7c:	strdeq	r2, [r1], -r4
   11f80:	andeq	r2, r1, ip, asr #1
   11f84:	andeq	r2, r1, r4, lsr #1
   11f88:	andeq	r2, r1, ip, lsl #1
   11f8c:	andeq	r2, r1, ip, lsl r1
   11f90:	andeq	r2, r1, r8, lsl #2
   11f94:	andeq	r2, r1, r0, lsr r1
   11f98:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11f9c:	ldrb	r3, [r7, #48]	; 0x30
   11fa0:	tst	r3, #2
   11fa4:	beq	11fb8 <__assert_fail@plt+0x868>
   11fa8:	ldr	r1, [r7, #64]	; 0x40
   11fac:	cmp	r1, #0
   11fb0:	ldrne	r3, [sp, #20]
   11fb4:	bne	1201c <__assert_fail@plt+0x8cc>
   11fb8:	ldr	r2, [sp, #16]
   11fbc:	cmp	r2, #0
   11fc0:	beq	11fd8 <__assert_fail@plt+0x888>
   11fc4:	mov	r1, r4
   11fc8:	mov	r0, r8
   11fcc:	bl	113b4 <scols_line_refer_data@plt>
   11fd0:	cmp	r0, #0
   11fd4:	bne	12264 <__assert_fail@plt+0xb14>
   11fd8:	ldr	r3, [r5, #108]	; 0x6c
   11fdc:	add	r4, r4, #1
   11fe0:	cmp	r4, r3
   11fe4:	bcs	12138 <__assert_fail@plt+0x9e8>
   11fe8:	mov	r3, #0
   11fec:	cmp	r4, #0
   11ff0:	str	r3, [sp, #16]
   11ff4:	blt	12250 <__assert_fail@plt+0xb00>
   11ff8:	ldr	r3, [r6], #4
   11ffc:	cmp	r3, #9
   12000:	ble	11f68 <__assert_fail@plt+0x818>
   12004:	ldr	r3, [pc, #904]	; 12394 <__assert_fail@plt+0xc44>
   12008:	mov	r2, #352	; 0x160
   1200c:	ldr	r1, [pc, #900]	; 12398 <__assert_fail@plt+0xc48>
   12010:	ldr	r0, [pc, #900]	; 1239c <__assert_fail@plt+0xc4c>
   12014:	bl	11750 <__assert_fail@plt>
   12018:	ldr	r3, [r3]
   1201c:	cmp	r3, fp
   12020:	beq	11fb8 <__assert_fail@plt+0x868>
   12024:	ldr	r2, [r3, #64]	; 0x40
   12028:	cmp	r1, r2
   1202c:	bne	12018 <__assert_fail@plt+0x8c8>
   12030:	ldrb	r2, [r3, #48]	; 0x30
   12034:	tst	r2, #2
   12038:	bne	12018 <__assert_fail@plt+0x8c8>
   1203c:	ldr	r2, [r3, #12]
   12040:	cmp	r2, #0
   12044:	beq	11fb8 <__assert_fail@plt+0x868>
   12048:	ldr	r1, [pc, #848]	; 123a0 <__assert_fail@plt+0xc50>
   1204c:	add	r0, sp, #16
   12050:	bl	124e0 <__assert_fail@plt+0xd90>
   12054:	b	11fb8 <__assert_fail@plt+0x868>
   12058:	ldr	r2, [r7, #12]
   1205c:	ldr	r1, [pc, #828]	; 123a0 <__assert_fail@plt+0xc50>
   12060:	add	r0, sp, #16
   12064:	bl	124e0 <__assert_fail@plt+0xd90>
   12068:	b	11fb8 <__assert_fail@plt+0x868>
   1206c:	ldr	r2, [r7, #8]
   12070:	ldr	r3, [pc, #620]	; 122e4 <__assert_fail@plt+0xb94>
   12074:	cmp	r2, #0
   12078:	mov	r1, r9
   1207c:	moveq	r2, r3
   12080:	add	r0, sp, #16
   12084:	bl	124e0 <__assert_fail@plt+0xd90>
   12088:	b	11fb8 <__assert_fail@plt+0x868>
   1208c:	ldrb	r2, [r7, #48]	; 0x30
   12090:	ldr	r1, [pc, #776]	; 123a0 <__assert_fail@plt+0xc50>
   12094:	add	r0, sp, #16
   12098:	and	r2, r2, #1
   1209c:	bl	124e0 <__assert_fail@plt+0xd90>
   120a0:	b	11fb8 <__assert_fail@plt+0x868>
   120a4:	ldrb	r1, [r7, #48]	; 0x30
   120a8:	ldr	r3, [pc, #756]	; 123a4 <__assert_fail@plt+0xc54>
   120ac:	ldr	r2, [r7, #24]
   120b0:	tst	r1, #2
   120b4:	ldr	r1, [pc, #552]	; 122e4 <__assert_fail@plt+0xb94>
   120b8:	add	r0, sp, #16
   120bc:	moveq	r3, r1
   120c0:	ldr	r1, [pc, #736]	; 123a8 <__assert_fail@plt+0xc58>
   120c4:	bl	124e0 <__assert_fail@plt+0xd90>
   120c8:	b	11fb8 <__assert_fail@plt+0x868>
   120cc:	ldrd	r2, [r7, #56]	; 0x38
   120d0:	orrs	r1, r2, r3
   120d4:	beq	11fb8 <__assert_fail@plt+0x868>
   120d8:	ldr	r0, [r5, #8]
   120dc:	cmp	r0, #0
   120e0:	beq	1215c <__assert_fail@plt+0xa0c>
   120e4:	ldr	r1, [pc, #704]	; 123ac <__assert_fail@plt+0xc5c>
   120e8:	add	r0, sp, #16
   120ec:	bl	124e0 <__assert_fail@plt+0xd90>
   120f0:	b	11fb8 <__assert_fail@plt+0x868>
   120f4:	ldr	r2, [r7, #20]
   120f8:	mov	r1, r9
   120fc:	add	r0, sp, #16
   12100:	bl	124e0 <__assert_fail@plt+0xd90>
   12104:	b	11fb8 <__assert_fail@plt+0x868>
   12108:	ldrd	r2, [r7, #40]	; 0x28
   1210c:	ldr	r1, [pc, #668]	; 123b0 <__assert_fail@plt+0xc60>
   12110:	add	r0, sp, #16
   12114:	bl	124e0 <__assert_fail@plt+0xd90>
   12118:	b	11fb8 <__assert_fail@plt+0x868>
   1211c:	ldrd	r2, [r7, #32]
   12120:	ldr	r1, [pc, #648]	; 123b0 <__assert_fail@plt+0xc60>
   12124:	add	r0, sp, #16
   12128:	bl	124e0 <__assert_fail@plt+0xd90>
   1212c:	b	11fb8 <__assert_fail@plt+0x868>
   12130:	ldr	r2, [r7, #16]
   12134:	b	12070 <__assert_fail@plt+0x920>
   12138:	ldr	r7, [r7]
   1213c:	b	11f0c <__assert_fail@plt+0x7bc>
   12140:	cmp	r7, #0
   12144:	bne	11f2c <__assert_fail@plt+0x7dc>
   12148:	ldr	r3, [pc, #612]	; 123b4 <__assert_fail@plt+0xc64>
   1214c:	mov	r2, #388	; 0x184
   12150:	ldr	r1, [pc, #576]	; 12398 <__assert_fail@plt+0xc48>
   12154:	ldr	r0, [pc, #604]	; 123b8 <__assert_fail@plt+0xc68>
   12158:	bl	11750 <__assert_fail@plt>
   1215c:	bl	14230 <__assert_fail@plt+0x2ae0>
   12160:	str	r0, [sp, #16]
   12164:	b	11fb8 <__assert_fail@plt+0x868>
   12168:	mov	r9, #1
   1216c:	b	11a2c <__assert_fail@plt+0x2dc>
   12170:	ldr	r6, [pc, #528]	; 12388 <__assert_fail@plt+0xc38>
   12174:	mov	r2, #5
   12178:	ldr	r1, [pc, #572]	; 123bc <__assert_fail@plt+0xc6c>
   1217c:	mov	r0, #0
   12180:	ldr	sl, [r6]
   12184:	bl	11498 <dcgettext@plt>
   12188:	ldr	r3, [pc, #392]	; 12318 <__assert_fail@plt+0xbc8>
   1218c:	mov	r1, #1
   12190:	sub	r5, r4, #4
   12194:	ldr	r3, [r3]
   12198:	add	r4, r4, #56	; 0x38
   1219c:	ldr	r7, [pc, #540]	; 123c0 <__assert_fail@plt+0xc70>
   121a0:	ldr	r9, [pc, #540]	; 123c4 <__assert_fail@plt+0xc74>
   121a4:	ldr	r8, [pc, #540]	; 123c8 <__assert_fail@plt+0xc78>
   121a8:	mov	r2, r0
   121ac:	mov	r0, sl
   121b0:	bl	1163c <__fprintf_chk@plt>
   121b4:	ldr	r0, [r5, #4]!
   121b8:	cmp	r0, #0
   121bc:	beq	12214 <__assert_fail@plt+0xac4>
   121c0:	cmp	r0, #98	; 0x62
   121c4:	beq	12228 <__assert_fail@plt+0xad8>
   121c8:	ldr	r2, [pc, #292]	; 122f4 <__assert_fail@plt+0xba4>
   121cc:	b	121e0 <__assert_fail@plt+0xa90>
   121d0:	add	r2, r2, #16
   121d4:	ldr	r1, [r2, #12]
   121d8:	cmp	r0, r1
   121dc:	beq	1222c <__assert_fail@plt+0xadc>
   121e0:	ldr	r3, [r2, #16]
   121e4:	cmp	r3, #0
   121e8:	bne	121d0 <__assert_fail@plt+0xa80>
   121ec:	sub	r3, r0, #33	; 0x21
   121f0:	cmp	r3, #93	; 0x5d
   121f4:	bhi	1220c <__assert_fail@plt+0xabc>
   121f8:	mov	r3, r0
   121fc:	mov	r2, r8
   12200:	mov	r1, #1
   12204:	ldr	r0, [r6]
   12208:	bl	1163c <__fprintf_chk@plt>
   1220c:	cmp	r5, r4
   12210:	bne	121b4 <__assert_fail@plt+0xa64>
   12214:	ldr	r1, [r6]
   12218:	mov	r0, #10
   1221c:	bl	11690 <fputc@plt>
   12220:	mov	r0, #1
   12224:	bl	1157c <exit@plt>
   12228:	mov	r3, r9
   1222c:	mov	r2, r7
   12230:	mov	r1, #1
   12234:	ldr	r0, [r6]
   12238:	bl	1163c <__fprintf_chk@plt>
   1223c:	b	1220c <__assert_fail@plt+0xabc>
   12240:	ldr	r1, [pc, #388]	; 123cc <__assert_fail@plt+0xc7c>
   12244:	mov	r0, sl
   12248:	bl	113f0 <scols_table_set_name@plt>
   1224c:	b	11b48 <__assert_fail@plt+0x3f8>
   12250:	ldr	r3, [pc, #316]	; 12394 <__assert_fail@plt+0xc44>
   12254:	ldr	r2, [pc, #372]	; 123d0 <__assert_fail@plt+0xc80>
   12258:	ldr	r1, [pc, #312]	; 12398 <__assert_fail@plt+0xc48>
   1225c:	ldr	r0, [pc, #368]	; 123d4 <__assert_fail@plt+0xc84>
   12260:	bl	11750 <__assert_fail@plt>
   12264:	ldr	r1, [pc, #364]	; 123d8 <__assert_fail@plt+0xc88>
   12268:	mov	r2, #5
   1226c:	mov	r0, #0
   12270:	bl	11498 <dcgettext@plt>
   12274:	mov	r1, r0
   12278:	mov	r0, #1
   1227c:	bl	114c8 <err@plt>
   12280:	ldr	r1, [pc, #340]	; 123dc <__assert_fail@plt+0xc8c>
   12284:	mov	r2, #5
   12288:	bl	11498 <dcgettext@plt>
   1228c:	mov	r1, r0
   12290:	mov	r0, #1
   12294:	bl	114c8 <err@plt>
   12298:	ldr	r1, [pc, #320]	; 123e0 <__assert_fail@plt+0xc90>
   1229c:	mov	r2, #5
   122a0:	bl	11498 <dcgettext@plt>
   122a4:	mov	r1, r0
   122a8:	mov	r0, #1
   122ac:	bl	114c8 <err@plt>
   122b0:	bl	114b0 <__stack_chk_fail@plt>
   122b4:	ldr	r3, [pc, #216]	; 12394 <__assert_fail@plt+0xc44>
   122b8:	ldr	r2, [pc, #292]	; 123e4 <__assert_fail@plt+0xc94>
   122bc:	ldr	r1, [pc, #212]	; 12398 <__assert_fail@plt+0xc48>
   122c0:	ldr	r0, [pc, #288]	; 123e8 <__assert_fail@plt+0xc98>
   122c4:	bl	11750 <__assert_fail@plt>
   122c8:	ldr	r1, [pc, #284]	; 123ec <__assert_fail@plt+0xc9c>
   122cc:	mov	r2, #5
   122d0:	bl	11498 <dcgettext@plt>
   122d4:	mov	r1, r0
   122d8:	mov	r0, #1
   122dc:	bl	114c8 <err@plt>
   122e0:	andeq	r6, r2, r8, lsl #27
   122e4:	andeq	r5, r1, r0, asr #20
   122e8:			; <UNDEFINED> instruction: 0x000159b4
   122ec:	andeq	r5, r1, r8, asr #19
   122f0:	andeq	r2, r1, r0, lsr r6
   122f4:	strdeq	r5, [r1], -r8
   122f8:	andeq	r5, r1, r4, asr sp
   122fc:	andeq	r7, r2, r8, lsl r1
   12300:			; <UNDEFINED> instruction: 0x000157b8
   12304:	andeq	r7, r2, r8, lsr #2
   12308:	andeq	r7, r2, r8
   1230c:	andeq	r7, r2, r0, lsl r1
   12310:	andeq	r5, r1, r0, lsl #20
   12314:	andeq	r5, r1, r8, lsl sl
   12318:	andeq	r7, r2, r0, lsl #2
   1231c:	andeq	r5, r1, r4, lsr #20
   12320:	andeq	r2, r1, r0, asr r5
   12324:	andeq	r7, r2, r4, lsl #3
   12328:	andeq	r7, r2, r0, lsr r1
   1232c:	andeq	r7, r2, ip, lsl #2
   12330:	andeq	r5, r1, r8, lsr sl
   12334:	andeq	r5, r1, r4, asr #20
   12338:	strdeq	r5, [r1], -r8
   1233c:	andeq	r5, r1, r4, asr sl
   12340:	andeq	r5, r1, r0, ror sl
   12344:	andeq	r5, r1, ip, ror sl
   12348:	ldrdeq	r5, [r1], -r0
   1234c:	andeq	r5, r1, r0, lsl #22
   12350:	andeq	r5, r1, r0, asr #22
   12354:	andeq	r5, r1, r0, ror fp
   12358:	andeq	r5, r1, ip, lsr #23
   1235c:	ldrdeq	r5, [r1], -r8
   12360:	andeq	r5, r1, ip, lsl ip
   12364:	andeq	r5, r1, r0, asr ip
   12368:	andeq	r5, r1, r8, lsl #25
   1236c:	muleq	r1, ip, ip
   12370:	andeq	r5, r1, ip, asr #25
   12374:			; <UNDEFINED> instruction: 0x00015cb8
   12378:	andeq	r5, r1, ip, lsr #25
   1237c:	ldrdeq	r5, [r1], -ip
   12380:	andeq	r5, r1, r4, lsl #26
   12384:	andeq	r5, r1, r0, lsr #26
   12388:	andeq	r7, r2, r8, lsl #2
   1238c:	andeq	r5, r1, ip, lsr #26
   12390:	andeq	r5, r1, r0, lsr #17
   12394:	andeq	r5, r1, r8, lsr r8
   12398:	andeq	r5, r1, r0, ror r8
   1239c:	muleq	r1, r8, sp
   123a0:	andeq	r5, r1, r0, lsr #28
   123a4:			; <UNDEFINED> instruction: 0x000159b0
   123a8:	andeq	r5, r1, r8, lsr #28
   123ac:	andeq	r5, r1, r4, lsr #28
   123b0:	andeq	r5, r1, r0, lsr lr
   123b4:	andeq	r5, r1, r8, asr #16
   123b8:	strdeq	r5, [r1], -ip
   123bc:	ldrdeq	r5, [r1], -r4
   123c0:	andeq	r5, r1, r0, asr lr
   123c4:	ldrdeq	r5, [r1], -r4
   123c8:	strdeq	r5, [r1], -r8
   123cc:	andeq	r5, r1, r4, lsl #27
   123d0:	andeq	r0, r0, lr, asr r1
   123d4:	andeq	r5, r1, ip, lsl #27
   123d8:	andeq	r5, r1, r4, lsr lr
   123dc:	andeq	r5, r1, r0, lsl #28
   123e0:	andeq	r5, r1, r4, ror #26
   123e4:	andeq	r0, r0, pc, asr r1
   123e8:	andeq	r5, r1, r4, ror #27
   123ec:	andeq	r5, r1, r0, asr #27
   123f0:	mov	fp, #0
   123f4:	mov	lr, #0
   123f8:	pop	{r1}		; (ldr r1, [sp], #4)
   123fc:	mov	r2, sp
   12400:	push	{r2}		; (str r2, [sp, #-4]!)
   12404:	push	{r0}		; (str r0, [sp, #-4]!)
   12408:	ldr	ip, [pc, #16]	; 12420 <__assert_fail@plt+0xcd0>
   1240c:	push	{ip}		; (str ip, [sp, #-4]!)
   12410:	ldr	r0, [pc, #12]	; 12424 <__assert_fail@plt+0xcd4>
   12414:	ldr	r3, [pc, #12]	; 12428 <__assert_fail@plt+0xcd8>
   12418:	bl	11528 <__libc_start_main@plt>
   1241c:	bl	11708 <abort@plt>
   12420:			; <UNDEFINED> instruction: 0x000156bc
   12424:	andeq	r1, r1, r0, ror #14
   12428:	andeq	r5, r1, ip, asr r6
   1242c:	ldr	r3, [pc, #20]	; 12448 <__assert_fail@plt+0xcf8>
   12430:	ldr	r2, [pc, #20]	; 1244c <__assert_fail@plt+0xcfc>
   12434:	add	r3, pc, r3
   12438:	ldr	r2, [r3, r2]
   1243c:	cmp	r2, #0
   12440:	bxeq	lr
   12444:	b	11558 <__gmon_start__@plt>
   12448:	andeq	r4, r1, r0, ror #20
   1244c:	andeq	r0, r0, ip, asr r1
   12450:	ldr	r0, [pc, #24]	; 12470 <__assert_fail@plt+0xd20>
   12454:	ldr	r3, [pc, #24]	; 12474 <__assert_fail@plt+0xd24>
   12458:	cmp	r3, r0
   1245c:	bxeq	lr
   12460:	ldr	r3, [pc, #16]	; 12478 <__assert_fail@plt+0xd28>
   12464:	cmp	r3, #0
   12468:	bxeq	lr
   1246c:	bx	r3
   12470:	strdeq	r7, [r2], -ip
   12474:	strdeq	r7, [r2], -ip
   12478:	andeq	r0, r0, r0
   1247c:	ldr	r0, [pc, #36]	; 124a8 <__assert_fail@plt+0xd58>
   12480:	ldr	r1, [pc, #36]	; 124ac <__assert_fail@plt+0xd5c>
   12484:	sub	r1, r1, r0
   12488:	asr	r1, r1, #2
   1248c:	add	r1, r1, r1, lsr #31
   12490:	asrs	r1, r1, #1
   12494:	bxeq	lr
   12498:	ldr	r3, [pc, #16]	; 124b0 <__assert_fail@plt+0xd60>
   1249c:	cmp	r3, #0
   124a0:	bxeq	lr
   124a4:	bx	r3
   124a8:	strdeq	r7, [r2], -ip
   124ac:	strdeq	r7, [r2], -ip
   124b0:	andeq	r0, r0, r0
   124b4:	push	{r4, lr}
   124b8:	ldr	r4, [pc, #24]	; 124d8 <__assert_fail@plt+0xd88>
   124bc:	ldrb	r3, [r4]
   124c0:	cmp	r3, #0
   124c4:	popne	{r4, pc}
   124c8:	bl	12450 <__assert_fail@plt+0xd00>
   124cc:	mov	r3, #1
   124d0:	strb	r3, [r4]
   124d4:	pop	{r4, pc}
   124d8:	andeq	r7, r2, r4, lsl r1
   124dc:	b	1247c <__assert_fail@plt+0xd2c>
   124e0:	push	{r1, r2, r3}
   124e4:	push	{r4, lr}
   124e8:	sub	sp, sp, #12
   124ec:	ldr	r4, [pc, #84]	; 12548 <__assert_fail@plt+0xdf8>
   124f0:	add	ip, sp, #24
   124f4:	mov	r3, ip
   124f8:	ldr	r1, [r4]
   124fc:	ldr	r2, [sp, #20]
   12500:	str	r1, [sp, #4]
   12504:	mov	r1, #1
   12508:	str	ip, [sp]
   1250c:	bl	115f4 <__vasprintf_chk@plt>
   12510:	cmp	r0, #0
   12514:	blt	12538 <__assert_fail@plt+0xde8>
   12518:	ldr	r2, [sp, #4]
   1251c:	ldr	r3, [r4]
   12520:	cmp	r2, r3
   12524:	bne	12544 <__assert_fail@plt+0xdf4>
   12528:	add	sp, sp, #12
   1252c:	pop	{r4, lr}
   12530:	add	sp, sp, #12
   12534:	bx	lr
   12538:	ldr	r1, [pc, #12]	; 1254c <__assert_fail@plt+0xdfc>
   1253c:	mov	r0, #1
   12540:	bl	114c8 <err@plt>
   12544:	bl	114b0 <__stack_chk_fail@plt>
   12548:	andeq	r6, r2, r8, lsl #27
   1254c:	andeq	r5, r1, r8, asr r8
   12550:	push	{r4, r5, r6, r7, r8, lr}
   12554:	subs	r8, r0, #0
   12558:	beq	125c8 <__assert_fail@plt+0xe78>
   1255c:	ldr	r5, [pc, #120]	; 125dc <__assert_fail@plt+0xe8c>
   12560:	mov	r7, r1
   12564:	mov	r4, #0
   12568:	ldr	r6, [r5]
   1256c:	mov	r2, r7
   12570:	mov	r1, r6
   12574:	mov	r0, r8
   12578:	bl	115d0 <strncasecmp@plt>
   1257c:	cmp	r0, #0
   12580:	bne	12590 <__assert_fail@plt+0xe40>
   12584:	ldrsb	r3, [r6, r7]
   12588:	cmp	r3, #0
   1258c:	beq	125c0 <__assert_fail@plt+0xe70>
   12590:	add	r4, r4, #1
   12594:	cmp	r4, #10
   12598:	add	r5, r5, #24
   1259c:	bne	12568 <__assert_fail@plt+0xe18>
   125a0:	mov	r2, #5
   125a4:	ldr	r1, [pc, #52]	; 125e0 <__assert_fail@plt+0xe90>
   125a8:	mov	r0, #0
   125ac:	bl	11498 <dcgettext@plt>
   125b0:	mov	r1, r8
   125b4:	bl	115b8 <warnx@plt>
   125b8:	mvn	r0, #0
   125bc:	pop	{r4, r5, r6, r7, r8, pc}
   125c0:	mov	r0, r4
   125c4:	pop	{r4, r5, r6, r7, r8, pc}
   125c8:	ldr	r3, [pc, #20]	; 125e4 <__assert_fail@plt+0xe94>
   125cc:	mov	r2, #336	; 0x150
   125d0:	ldr	r1, [pc, #16]	; 125e8 <__assert_fail@plt+0xe98>
   125d4:	ldr	r0, [pc, #16]	; 125ec <__assert_fail@plt+0xe9c>
   125d8:	bl	11750 <__assert_fail@plt>
   125dc:	andeq	r7, r2, r8
   125e0:	muleq	r1, r0, r8
   125e4:	andeq	r5, r1, r4, ror #13
   125e8:	andeq	r5, r1, r0, ror r8
   125ec:	andeq	r5, r1, r8, lsl #17
   125f0:	push	{r4, lr}
   125f4:	mov	r4, r0
   125f8:	ldr	r0, [r0, #16]
   125fc:	bl	11420 <free@plt>
   12600:	ldr	r0, [r4, #24]
   12604:	bl	11420 <free@plt>
   12608:	ldr	r0, [r4, #8]
   1260c:	bl	11420 <free@plt>
   12610:	ldr	r0, [r4, #20]
   12614:	bl	11420 <free@plt>
   12618:	ldrd	r2, [r4]
   1261c:	mov	r0, r4
   12620:	pop	{r4, lr}
   12624:	str	r3, [r2, #4]
   12628:	str	r2, [r3]
   1262c:	b	11420 <free@plt>
   12630:	ldr	r3, [pc, #292]	; 1275c <__assert_fail@plt+0x100c>
   12634:	push	{r4, r5, r6, lr}
   12638:	ldr	r4, [r3]
   1263c:	mov	r0, r4
   12640:	bl	114ec <__fpending@plt>
   12644:	mov	r6, r0
   12648:	mov	r0, r4
   1264c:	bl	11450 <ferror@plt>
   12650:	mov	r5, r0
   12654:	mov	r0, r4
   12658:	bl	11648 <fclose@plt>
   1265c:	cmp	r5, #0
   12660:	mov	r4, r0
   12664:	bne	1270c <__assert_fail@plt+0xfbc>
   12668:	cmp	r0, #0
   1266c:	beq	12688 <__assert_fail@plt+0xf38>
   12670:	bl	115c4 <__errno_location@plt>
   12674:	cmp	r6, #0
   12678:	ldr	r3, [r0]
   1267c:	bne	126e4 <__assert_fail@plt+0xf94>
   12680:	cmp	r3, #9
   12684:	bne	126e4 <__assert_fail@plt+0xf94>
   12688:	ldr	r3, [pc, #208]	; 12760 <__assert_fail@plt+0x1010>
   1268c:	ldr	r4, [r3]
   12690:	mov	r0, r4
   12694:	bl	114ec <__fpending@plt>
   12698:	mov	r6, r0
   1269c:	mov	r0, r4
   126a0:	bl	11450 <ferror@plt>
   126a4:	mov	r5, r0
   126a8:	mov	r0, r4
   126ac:	bl	11648 <fclose@plt>
   126b0:	cmp	r5, #0
   126b4:	mov	r4, r0
   126b8:	bne	12740 <__assert_fail@plt+0xff0>
   126bc:	cmp	r0, #0
   126c0:	popeq	{r4, r5, r6, pc}
   126c4:	cmp	r6, #0
   126c8:	bne	126dc <__assert_fail@plt+0xf8c>
   126cc:	bl	115c4 <__errno_location@plt>
   126d0:	ldr	r3, [r0]
   126d4:	cmp	r3, #9
   126d8:	popeq	{r4, r5, r6, pc}
   126dc:	mov	r0, #1
   126e0:	bl	11468 <_exit@plt>
   126e4:	cmp	r3, #32
   126e8:	beq	12688 <__assert_fail@plt+0xf38>
   126ec:	cmp	r3, #0
   126f0:	beq	12728 <__assert_fail@plt+0xfd8>
   126f4:	mov	r2, #5
   126f8:	ldr	r1, [pc, #100]	; 12764 <__assert_fail@plt+0x1014>
   126fc:	mov	r0, #0
   12700:	bl	11498 <dcgettext@plt>
   12704:	bl	11678 <warn@plt>
   12708:	b	126dc <__assert_fail@plt+0xf8c>
   1270c:	bl	115c4 <__errno_location@plt>
   12710:	cmp	r4, #0
   12714:	ldr	r3, [r0]
   12718:	bne	126e4 <__assert_fail@plt+0xf94>
   1271c:	cmp	r3, #32
   12720:	strne	r4, [r0]
   12724:	beq	12688 <__assert_fail@plt+0xf38>
   12728:	mov	r2, #5
   1272c:	ldr	r1, [pc, #48]	; 12764 <__assert_fail@plt+0x1014>
   12730:	mov	r0, #0
   12734:	bl	11498 <dcgettext@plt>
   12738:	bl	115b8 <warnx@plt>
   1273c:	b	126dc <__assert_fail@plt+0xf8c>
   12740:	cmp	r0, #0
   12744:	bne	126dc <__assert_fail@plt+0xf8c>
   12748:	bl	115c4 <__errno_location@plt>
   1274c:	ldr	r3, [r0]
   12750:	cmp	r3, #32
   12754:	strne	r4, [r0]
   12758:	b	126dc <__assert_fail@plt+0xf8c>
   1275c:	andeq	r7, r2, ip, lsl #2
   12760:	andeq	r7, r2, r8, lsl #2
   12764:	andeq	r5, r1, r4, lsr #17
   12768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1276c:	sub	sp, sp, #12416	; 0x3080
   12770:	ldr	r3, [pc, #1664]	; 12df8 <__assert_fail@plt+0x16a8>
   12774:	sub	sp, sp, #28
   12778:	add	r2, sp, #12416	; 0x3080
   1277c:	ldr	r3, [r3]
   12780:	add	r2, r2, #20
   12784:	mov	fp, r0
   12788:	ldr	r1, [pc, #1644]	; 12dfc <__assert_fail@plt+0x16ac>
   1278c:	ldr	r0, [pc, #1644]	; 12e00 <__assert_fail@plt+0x16b0>
   12790:	str	r3, [r2]
   12794:	bl	116d8 <fopen64@plt>
   12798:	subs	sl, r0, #0
   1279c:	beq	12de0 <__assert_fail@plt+0x1690>
   127a0:	ldr	r6, [pc, #1628]	; 12e04 <__assert_fail@plt+0x16b4>
   127a4:	mov	r2, #0
   127a8:	mov	r3, #0
   127ac:	mov	r9, #0
   127b0:	strd	r2, [sp, #8]
   127b4:	str	r9, [sp, #16]
   127b8:	str	r2, [sp, #20]
   127bc:	str	r3, [sp, #24]
   127c0:	mov	r2, sl
   127c4:	mov	r1, #4096	; 0x1000
   127c8:	add	r0, sp, #148	; 0x94
   127cc:	bl	1142c <fgets@plt>
   127d0:	cmp	r0, #0
   127d4:	beq	12d38 <__assert_fail@plt+0x15e8>
   127d8:	mov	r1, #72	; 0x48
   127dc:	mov	r0, #1
   127e0:	bl	11390 <calloc@plt>
   127e4:	subs	r4, r0, #0
   127e8:	bne	127fc <__assert_fail@plt+0x10ac>
   127ec:	mov	r2, #72	; 0x48
   127f0:	ldr	r1, [pc, #1552]	; 12e08 <__assert_fail@plt+0x16b8>
   127f4:	mov	r0, #1
   127f8:	bl	114c8 <err@plt>
   127fc:	str	r4, [r4]
   12800:	str	r4, [r4, #4]
   12804:	mov	r1, r6
   12808:	add	r0, sp, #148	; 0x94
   1280c:	bl	11654 <strtok@plt>
   12810:	subs	r5, r0, #0
   12814:	beq	128c8 <__assert_fail@plt+0x1178>
   12818:	ldr	r7, [pc, #1516]	; 12e0c <__assert_fail@plt+0x16bc>
   1281c:	mov	r8, #0
   12820:	cmp	r8, #7
   12824:	ldrls	pc, [pc, r8, lsl #2]
   12828:	b	12ba4 <__assert_fail@plt+0x1454>
   1282c:	andeq	r2, r1, ip, asr #16
   12830:	muleq	r1, r4, r8
   12834:	strdeq	r2, [r1], -r8
   12838:	andeq	r2, r1, r4, lsr #20
   1283c:	andeq	r2, r1, ip, asr #20
   12840:	muleq	r1, ip, sl
   12844:	andeq	r2, r1, r4, lsr #22
   12848:	andeq	r2, r1, r8, asr fp
   1284c:	mov	r0, r5
   12850:	bl	11594 <strlen@plt>
   12854:	mov	r8, #0
   12858:	mov	r2, #5
   1285c:	mov	r1, r7
   12860:	add	r3, r5, r0
   12864:	mov	r0, r8
   12868:	strb	r8, [r3, #-1]
   1286c:	bl	11498 <dcgettext@plt>
   12870:	mov	r1, r0
   12874:	mov	r0, r5
   12878:	bl	13b98 <__assert_fail@plt+0x2448>
   1287c:	mov	r1, r6
   12880:	str	r0, [r4, #64]	; 0x40
   12884:	mov	r0, r8
   12888:	bl	11654 <strtok@plt>
   1288c:	subs	r5, r0, #0
   12890:	beq	128c8 <__assert_fail@plt+0x1178>
   12894:	ldr	r8, [pc, #1396]	; 12e10 <__assert_fail@plt+0x16c0>
   12898:	mov	r1, r8
   1289c:	mov	r0, r5
   128a0:	bl	113c0 <strcmp@plt>
   128a4:	cmp	r0, #0
   128a8:	bne	129d0 <__assert_fail@plt+0x1280>
   128ac:	ldrb	r3, [r4, #48]	; 0x30
   128b0:	mov	r1, r6
   128b4:	orr	r3, r3, #2
   128b8:	strb	r3, [r4, #48]	; 0x30
   128bc:	bl	11654 <strtok@plt>
   128c0:	subs	r5, r0, #0
   128c4:	bne	12898 <__assert_fail@plt+0x1148>
   128c8:	add	r0, sp, #4224	; 0x1080
   128cc:	mov	r2, #4096	; 0x1000
   128d0:	mov	r1, #0
   128d4:	add	r0, r0, #20
   128d8:	ldr	r5, [r4, #12]
   128dc:	bl	11600 <memset@plt>
   128e0:	add	r0, sp, #8320	; 0x2080
   128e4:	mov	r2, #4096	; 0x1000
   128e8:	mov	r1, #0
   128ec:	add	r0, r0, #20
   128f0:	bl	11600 <memset@plt>
   128f4:	add	r0, sp, #4224	; 0x1080
   128f8:	ldr	r3, [pc, #1300]	; 12e14 <__assert_fail@plt+0x16c4>
   128fc:	mov	r2, #4096	; 0x1000
   12900:	mov	r1, #1
   12904:	str	r5, [sp]
   12908:	add	r0, r0, #20
   1290c:	bl	115dc <__sprintf_chk@plt>
   12910:	add	r0, sp, #4224	; 0x1080
   12914:	add	r0, r0, #20
   12918:	bl	114f8 <opendir@plt>
   1291c:	subs	r7, r0, #0
   12920:	streq	r7, [r4, #16]
   12924:	beq	12950 <__assert_fail@plt+0x1200>
   12928:	add	r0, sp, #4224	; 0x1080
   1292c:	add	r0, r0, #20
   12930:	bl	11594 <strlen@plt>
   12934:	ldr	r3, [pc, #1244]	; 12e18 <__assert_fail@plt+0x16c8>
   12938:	cmp	r0, r3
   1293c:	mov	r0, r7
   12940:	bls	12bc0 <__assert_fail@plt+0x1470>
   12944:	bl	11720 <closedir@plt>
   12948:	mov	r3, #0
   1294c:	str	r3, [r4, #16]
   12950:	ldr	r5, [pc, #1220]	; 12e1c <__assert_fail@plt+0x16cc>
   12954:	ldr	r3, [r5]
   12958:	cmp	r3, #0
   1295c:	bne	12db0 <__assert_fail@plt+0x1660>
   12960:	ldr	r2, [r5, #4]
   12964:	str	r3, [sp, #40]	; 0x28
   12968:	cmp	r2, #0
   1296c:	beq	12dc4 <__assert_fail@plt+0x1674>
   12970:	mov	r3, #1
   12974:	ldr	r0, [r5, #4]
   12978:	mov	r2, r9
   1297c:	str	r3, [sp]
   12980:	ldr	r3, [sp, #16]
   12984:	bl	11480 <mnt_table_find_devno@plt>
   12988:	cmp	r0, #0
   1298c:	beq	12dd8 <__assert_fail@plt+0x1688>
   12990:	bl	11504 <mnt_fs_get_target@plt>
   12994:	ldr	r1, [pc, #1156]	; 12e20 <__assert_fail@plt+0x16d0>
   12998:	mov	r2, r0
   1299c:	add	r0, sp, #40	; 0x28
   129a0:	bl	124e0 <__assert_fail@plt+0xd90>
   129a4:	ldr	r3, [sp, #40]	; 0x28
   129a8:	str	r3, [r4, #16]
   129ac:	ldr	r3, [sp, #20]
   129b0:	str	r3, [r4, #56]	; 0x38
   129b4:	ldr	r3, [sp, #24]
   129b8:	str	r3, [r4, #60]	; 0x3c
   129bc:	ldr	r3, [fp]
   129c0:	str	r4, [r3, #4]
   129c4:	stm	r4, {r3, fp}
   129c8:	str	r4, [fp]
   129cc:	b	127c0 <__assert_fail@plt+0x1070>
   129d0:	mov	r0, r5
   129d4:	bl	114a4 <strdup@plt>
   129d8:	cmp	r0, #0
   129dc:	beq	12dec <__assert_fail@plt+0x169c>
   129e0:	str	r0, [r4, #20]
   129e4:	mov	r1, r6
   129e8:	mov	r0, #0
   129ec:	bl	11654 <strtok@plt>
   129f0:	subs	r5, r0, #0
   129f4:	beq	128c8 <__assert_fail@plt+0x1178>
   129f8:	ldrb	r3, [r4, #48]	; 0x30
   129fc:	ldrsb	r2, [r5]
   12a00:	mov	r1, r6
   12a04:	bic	r3, r3, #1
   12a08:	cmp	r2, #77	; 0x4d
   12a0c:	orreq	r3, r3, #1
   12a10:	strb	r3, [r4, #48]	; 0x30
   12a14:	mov	r0, #0
   12a18:	bl	11654 <strtok@plt>
   12a1c:	subs	r5, r0, #0
   12a20:	beq	128c8 <__assert_fail@plt+0x1178>
   12a24:	mov	r0, r5
   12a28:	bl	114a4 <strdup@plt>
   12a2c:	cmp	r0, #0
   12a30:	beq	12dec <__assert_fail@plt+0x169c>
   12a34:	str	r0, [r4, #24]
   12a38:	mov	r1, r6
   12a3c:	mov	r0, #0
   12a40:	bl	11654 <strtok@plt>
   12a44:	subs	r5, r0, #0
   12a48:	beq	128c8 <__assert_fail@plt+0x1178>
   12a4c:	mov	r2, #5
   12a50:	ldr	r1, [pc, #972]	; 12e24 <__assert_fail@plt+0x16d4>
   12a54:	mov	r0, #0
   12a58:	bl	11498 <dcgettext@plt>
   12a5c:	mov	r1, r0
   12a60:	mov	r0, r5
   12a64:	bl	13b98 <__assert_fail@plt+0x2448>
   12a68:	cmp	r0, #0
   12a6c:	str	r0, [r4, #12]
   12a70:	ble	12ccc <__assert_fail@plt+0x157c>
   12a74:	bl	151c0 <__assert_fail@plt+0x3a70>
   12a78:	cmp	r0, #0
   12a7c:	mov	r5, r0
   12a80:	str	r0, [r4, #8]
   12a84:	beq	12d88 <__assert_fail@plt+0x1638>
   12a88:	mov	r1, r6
   12a8c:	mov	r0, #0
   12a90:	bl	11654 <strtok@plt>
   12a94:	subs	r5, r0, #0
   12a98:	beq	128c8 <__assert_fail@plt+0x1178>
   12a9c:	ldr	ip, [sp, #20]
   12aa0:	add	r3, sp, #40	; 0x28
   12aa4:	str	ip, [sp, #40]	; 0x28
   12aa8:	ldr	ip, [sp, #24]
   12aac:	mov	r0, r5
   12ab0:	str	r3, [sp]
   12ab4:	mov	r5, #0
   12ab8:	add	r3, sp, #36	; 0x24
   12abc:	add	r2, sp, #32
   12ac0:	ldr	r1, [pc, #864]	; 12e28 <__assert_fail@plt+0x16d8>
   12ac4:	str	ip, [sp, #44]	; 0x2c
   12ac8:	str	r5, [sp, #32]
   12acc:	str	r5, [sp, #36]	; 0x24
   12ad0:	bl	1169c <sscanf@plt>
   12ad4:	ldr	r3, [sp, #32]
   12ad8:	ldr	ip, [sp, #36]	; 0x24
   12adc:	ldr	r1, [pc, #840]	; 12e2c <__assert_fail@plt+0x16dc>
   12ae0:	ldr	r9, [pc, #840]	; 12e30 <__assert_fail@plt+0x16e0>
   12ae4:	and	r1, r1, r3, lsl #8
   12ae8:	bic	r3, r3, #4080	; 0xff0
   12aec:	uxtb	r2, ip
   12af0:	bic	r3, r3, #15
   12af4:	orr	r2, r2, r1
   12af8:	orr	r3, r3, ip, lsr #20
   12afc:	and	r9, r9, ip, lsl #12
   12b00:	str	r3, [sp, #16]
   12b04:	orr	r9, r9, r2
   12b08:	ldrd	r2, [sp, #40]	; 0x28
   12b0c:	mov	r0, r5
   12b10:	mov	r1, r6
   12b14:	strd	r2, [sp, #8]
   12b18:	bl	11654 <strtok@plt>
   12b1c:	subs	r5, r0, #0
   12b20:	beq	128c8 <__assert_fail@plt+0x1178>
   12b24:	ldr	r1, [pc, #776]	; 12e34 <__assert_fail@plt+0x16e4>
   12b28:	mov	r0, r5
   12b2c:	bl	113c0 <strcmp@plt>
   12b30:	cmp	r0, #0
   12b34:	moveq	r0, #0
   12b38:	moveq	r1, #0
   12b3c:	bne	12cf8 <__assert_fail@plt+0x15a8>
   12b40:	strd	r0, [r4, #32]
   12b44:	mov	r1, r6
   12b48:	mov	r0, #0
   12b4c:	bl	11654 <strtok@plt>
   12b50:	subs	r5, r0, #0
   12b54:	beq	128c8 <__assert_fail@plt+0x1178>
   12b58:	mov	r0, r5
   12b5c:	bl	11594 <strlen@plt>
   12b60:	mov	r8, #0
   12b64:	ldr	r1, [pc, #712]	; 12e34 <__assert_fail@plt+0x16e4>
   12b68:	add	r3, r5, r0
   12b6c:	mov	r0, r5
   12b70:	strb	r8, [r3, #-1]
   12b74:	bl	113c0 <strcmp@plt>
   12b78:	cmp	r0, r8
   12b7c:	moveq	r0, #0
   12b80:	moveq	r1, #0
   12b84:	bne	12d18 <__assert_fail@plt+0x15c8>
   12b88:	strd	r0, [r4, #40]	; 0x28
   12b8c:	mov	r1, r6
   12b90:	mov	r0, #0
   12b94:	bl	11654 <strtok@plt>
   12b98:	cmp	r0, #0
   12b9c:	beq	128c8 <__assert_fail@plt+0x1178>
   12ba0:	mov	r8, #8
   12ba4:	mov	r1, r6
   12ba8:	mov	r0, #0
   12bac:	bl	11654 <strtok@plt>
   12bb0:	add	r8, r8, #1
   12bb4:	subs	r5, r0, #0
   12bb8:	bne	12820 <__assert_fail@plt+0x10d0>
   12bbc:	b	128c8 <__assert_fail@plt+0x1178>
   12bc0:	bl	116c0 <dirfd@plt>
   12bc4:	subs	r3, r0, #0
   12bc8:	str	r3, [sp, #28]
   12bcc:	blt	12d80 <__assert_fail@plt+0x1630>
   12bd0:	ldr	r8, [pc, #608]	; 12e38 <__assert_fail@plt+0x16e8>
   12bd4:	mov	r0, r7
   12bd8:	bl	116b4 <readdir64@plt>
   12bdc:	subs	r5, r0, #0
   12be0:	beq	12d70 <__assert_fail@plt+0x1620>
   12be4:	add	r5, r5, #19
   12be8:	mov	r0, r5
   12bec:	mov	r1, r8
   12bf0:	bl	113c0 <strcmp@plt>
   12bf4:	cmp	r0, #0
   12bf8:	beq	12bd4 <__assert_fail@plt+0x1484>
   12bfc:	ldr	r1, [pc, #568]	; 12e3c <__assert_fail@plt+0x16ec>
   12c00:	mov	r0, r5
   12c04:	bl	113c0 <strcmp@plt>
   12c08:	cmp	r0, #0
   12c0c:	beq	12bd4 <__assert_fail@plt+0x1484>
   12c10:	mov	r2, #10
   12c14:	mov	r1, #0
   12c18:	mov	r0, r5
   12c1c:	bl	113d8 <strtol@plt>
   12c20:	cmp	r0, #0
   12c24:	beq	12bd4 <__assert_fail@plt+0x1484>
   12c28:	mov	r3, #0
   12c2c:	str	r3, [sp]
   12c30:	mov	r2, r5
   12c34:	add	r3, sp, #40	; 0x28
   12c38:	ldr	r1, [sp, #28]
   12c3c:	mov	r0, #3
   12c40:	bl	114d4 <__fxstatat64@plt>
   12c44:	cmp	r0, #0
   12c48:	bne	12c60 <__assert_fail@plt+0x1510>
   12c4c:	ldrd	r2, [sp, #136]	; 0x88
   12c50:	ldrd	r0, [sp, #8]
   12c54:	cmp	r3, r1
   12c58:	cmpeq	r2, r0
   12c5c:	bne	12bd4 <__assert_fail@plt+0x1484>
   12c60:	add	r2, sp, #8320	; 0x2080
   12c64:	mov	r1, r5
   12c68:	ldr	r0, [sp, #28]
   12c6c:	ldr	r3, [pc, #460]	; 12e40 <__assert_fail@plt+0x16f0>
   12c70:	add	r2, r2, #20
   12c74:	bl	11534 <readlinkat@plt>
   12c78:	subs	r5, r0, #0
   12c7c:	beq	12d70 <__assert_fail@plt+0x1620>
   12c80:	add	r3, sp, #8320	; 0x2080
   12c84:	add	r3, r3, #24
   12c88:	add	r3, r3, r5
   12c8c:	add	r0, sp, #8320	; 0x2080
   12c90:	add	r0, r0, #20
   12c94:	mov	r5, #0
   12c98:	strb	r5, [r3, #-4]
   12c9c:	ldr	r8, [sp, #88]	; 0x58
   12ca0:	bl	114a4 <strdup@plt>
   12ca4:	subs	r3, r0, #0
   12ca8:	str	r3, [sp, #28]
   12cac:	beq	12dec <__assert_fail@plt+0x169c>
   12cb0:	mov	r0, r7
   12cb4:	bl	11720 <closedir@plt>
   12cb8:	ldr	r3, [sp, #28]
   12cbc:	str	r8, [r4, #56]	; 0x38
   12cc0:	str	r3, [r4, #16]
   12cc4:	str	r5, [r4, #60]	; 0x3c
   12cc8:	b	129bc <__assert_fail@plt+0x126c>
   12ccc:	mov	r2, #5
   12cd0:	ldr	r1, [pc, #364]	; 12e44 <__assert_fail@plt+0x16f4>
   12cd4:	mov	r0, #0
   12cd8:	bl	11498 <dcgettext@plt>
   12cdc:	subs	r3, r0, #0
   12ce0:	beq	12dbc <__assert_fail@plt+0x166c>
   12ce4:	bl	114a4 <strdup@plt>
   12ce8:	cmp	r0, #0
   12cec:	beq	12dec <__assert_fail@plt+0x169c>
   12cf0:	str	r0, [r4, #8]
   12cf4:	b	12a88 <__assert_fail@plt+0x1338>
   12cf8:	mov	r2, #5
   12cfc:	ldr	r1, [pc, #324]	; 12e48 <__assert_fail@plt+0x16f8>
   12d00:	mov	r0, #0
   12d04:	bl	11498 <dcgettext@plt>
   12d08:	mov	r1, r0
   12d0c:	mov	r0, r5
   12d10:	bl	13c50 <__assert_fail@plt+0x2500>
   12d14:	b	12b40 <__assert_fail@plt+0x13f0>
   12d18:	mov	r0, r8
   12d1c:	mov	r2, #5
   12d20:	ldr	r1, [pc, #292]	; 12e4c <__assert_fail@plt+0x16fc>
   12d24:	bl	11498 <dcgettext@plt>
   12d28:	mov	r1, r0
   12d2c:	mov	r0, r5
   12d30:	bl	13c50 <__assert_fail@plt+0x2500>
   12d34:	b	12b88 <__assert_fail@plt+0x1438>
   12d38:	mov	r4, r0
   12d3c:	mov	r0, sl
   12d40:	bl	11648 <fclose@plt>
   12d44:	mov	r0, r4
   12d48:	add	r3, sp, #12416	; 0x3080
   12d4c:	add	r3, r3, #20
   12d50:	ldr	r2, [r3]
   12d54:	ldr	r3, [pc, #156]	; 12df8 <__assert_fail@plt+0x16a8>
   12d58:	ldr	r3, [r3]
   12d5c:	cmp	r2, r3
   12d60:	bne	12de8 <__assert_fail@plt+0x1698>
   12d64:	add	sp, sp, #12416	; 0x3080
   12d68:	add	sp, sp, #28
   12d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d70:	mov	r0, r7
   12d74:	bl	11720 <closedir@plt>
   12d78:	str	r5, [r4, #16]
   12d7c:	b	12950 <__assert_fail@plt+0x1200>
   12d80:	mov	r0, r7
   12d84:	b	12944 <__assert_fail@plt+0x11f4>
   12d88:	mov	r2, #5
   12d8c:	ldr	r1, [pc, #188]	; 12e50 <__assert_fail@plt+0x1700>
   12d90:	bl	11498 <dcgettext@plt>
   12d94:	cmp	r0, #0
   12d98:	beq	12da8 <__assert_fail@plt+0x1658>
   12d9c:	bl	114a4 <strdup@plt>
   12da0:	subs	r5, r0, #0
   12da4:	beq	12dec <__assert_fail@plt+0x169c>
   12da8:	str	r5, [r4, #8]
   12dac:	b	12a88 <__assert_fail@plt+0x1338>
   12db0:	mov	r0, r4
   12db4:	bl	125f0 <__assert_fail@plt+0xea0>
   12db8:	b	127c0 <__assert_fail@plt+0x1070>
   12dbc:	mov	r0, r3
   12dc0:	b	12cf0 <__assert_fail@plt+0x15a0>
   12dc4:	ldr	r0, [pc, #136]	; 12e54 <__assert_fail@plt+0x1704>
   12dc8:	bl	113cc <mnt_new_table_from_file@plt>
   12dcc:	cmp	r0, #0
   12dd0:	str	r0, [r5, #4]
   12dd4:	bne	12970 <__assert_fail@plt+0x1220>
   12dd8:	mov	r3, #0
   12ddc:	b	129a8 <__assert_fail@plt+0x1258>
   12de0:	mvn	r0, #0
   12de4:	b	12d48 <__assert_fail@plt+0x15f8>
   12de8:	bl	114b0 <__stack_chk_fail@plt>
   12dec:	ldr	r1, [pc, #100]	; 12e58 <__assert_fail@plt+0x1708>
   12df0:	mov	r0, #1
   12df4:	bl	114c8 <err@plt>
   12df8:	andeq	r6, r2, r8, lsl #27
   12dfc:			; <UNDEFINED> instruction: 0x000158b0
   12e00:			; <UNDEFINED> instruction: 0x000158b4
   12e04:	ldrdeq	r5, [r1], -ip
   12e08:	andeq	r5, r1, r0, asr #17
   12e0c:	andeq	r5, r1, r0, ror #17
   12e10:	strdeq	r5, [r1], -r4
   12e14:	andeq	r5, r1, ip, ror r9
   12e18:	strdeq	r0, [r0], -sp
   12e1c:	andeq	r7, r2, r8, lsl r1
   12e20:	andeq	r5, r1, r8, lsr #19
   12e24:	andeq	r5, r1, r0, lsl r9
   12e28:	andeq	r5, r1, ip, lsr r9
   12e2c:	andeq	pc, pc, r0, lsl #30
   12e30:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   12e34:	andeq	r5, r1, ip, asr #18
   12e38:	andeq	r5, r1, ip, lsr #19
   12e3c:	andeq	r5, r1, ip, lsl #19
   12e40:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12e44:	andeq	r5, r1, r0, lsr r9
   12e48:	andeq	r5, r1, r0, asr r9
   12e4c:	andeq	r5, r1, r8, ror #18
   12e50:	andeq	r5, r1, r4, lsr #18
   12e54:	muleq	r1, r0, r9
   12e58:	strdeq	r5, [r1], -r8
   12e5c:	andeq	r0, r0, r0
   12e60:	cmp	r0, #0
   12e64:	mov	r3, #0
   12e68:	str	r3, [r1]
   12e6c:	bxeq	lr
   12e70:	ldrsb	r2, [r0]
   12e74:	cmp	r2, #47	; 0x2f
   12e78:	bne	12eb4 <__assert_fail@plt+0x1764>
   12e7c:	ldrsb	r3, [r0, #1]
   12e80:	cmp	r3, #47	; 0x2f
   12e84:	bne	12ebc <__assert_fail@plt+0x176c>
   12e88:	add	r3, r0, #1
   12e8c:	b	12e9c <__assert_fail@plt+0x174c>
   12e90:	ldrsb	r2, [r3]
   12e94:	cmp	r2, #47	; 0x2f
   12e98:	bne	12ebc <__assert_fail@plt+0x176c>
   12e9c:	cmp	r3, #0
   12ea0:	mov	r0, r3
   12ea4:	bxeq	lr
   12ea8:	ldrsb	r2, [r3], #1
   12eac:	cmp	r2, #47	; 0x2f
   12eb0:	beq	12e90 <__assert_fail@plt+0x1740>
   12eb4:	cmp	r2, #0
   12eb8:	beq	12ef8 <__assert_fail@plt+0x17a8>
   12ebc:	mov	r3, #1
   12ec0:	str	r3, [r1]
   12ec4:	ldrsb	r3, [r0, #1]
   12ec8:	add	r2, r0, #1
   12ecc:	cmp	r3, #47	; 0x2f
   12ed0:	cmpne	r3, #0
   12ed4:	bxeq	lr
   12ed8:	rsb	r3, r0, #1
   12edc:	add	ip, r2, r3
   12ee0:	str	ip, [r1]
   12ee4:	ldrsb	ip, [r2, #1]!
   12ee8:	cmp	ip, #0
   12eec:	cmpne	ip, #47	; 0x2f
   12ef0:	bne	12edc <__assert_fail@plt+0x178c>
   12ef4:	bx	lr
   12ef8:	mov	r0, r2
   12efc:	bx	lr
   12f00:	push	{r4, r5, r6, r7, r8, lr}
   12f04:	mov	r7, r1
   12f08:	ldrsb	r1, [r0]
   12f0c:	cmp	r1, #0
   12f10:	movne	r5, r0
   12f14:	movne	r4, #0
   12f18:	beq	12f84 <__assert_fail@plt+0x1834>
   12f1c:	cmp	r1, #92	; 0x5c
   12f20:	addne	r6, r5, r4
   12f24:	beq	12f54 <__assert_fail@plt+0x1804>
   12f28:	mov	r0, r7
   12f2c:	bl	115a0 <strchr@plt>
   12f30:	cmp	r0, #0
   12f34:	bne	12f7c <__assert_fail@plt+0x182c>
   12f38:	ldrsb	r1, [r6, #1]!
   12f3c:	add	r4, r4, #1
   12f40:	mov	r0, r4
   12f44:	cmp	r1, #0
   12f48:	popeq	{r4, r5, r6, r7, r8, pc}
   12f4c:	cmp	r1, #92	; 0x5c
   12f50:	bne	12f28 <__assert_fail@plt+0x17d8>
   12f54:	add	r3, r5, r4
   12f58:	ldrsb	r3, [r3, #1]
   12f5c:	cmp	r3, #0
   12f60:	beq	12f7c <__assert_fail@plt+0x182c>
   12f64:	add	r4, r4, #2
   12f68:	mov	r0, r4
   12f6c:	ldrsb	r1, [r5, r4]
   12f70:	cmp	r1, #0
   12f74:	bne	12f1c <__assert_fail@plt+0x17cc>
   12f78:	pop	{r4, r5, r6, r7, r8, pc}
   12f7c:	mov	r0, r4
   12f80:	pop	{r4, r5, r6, r7, r8, pc}
   12f84:	mov	r0, r1
   12f88:	pop	{r4, r5, r6, r7, r8, pc}
   12f8c:	ldr	ip, [pc, #244]	; 13088 <__assert_fail@plt+0x1938>
   12f90:	push	{r4, r5, r6, r7, r8, r9, lr}
   12f94:	add	ip, pc, ip
   12f98:	ldr	lr, [pc, #236]	; 1308c <__assert_fail@plt+0x193c>
   12f9c:	sub	sp, sp, #12
   12fa0:	mov	r5, #0
   12fa4:	ldr	r7, [ip, lr]
   12fa8:	mov	r4, r0
   12fac:	mov	r8, r1
   12fb0:	ldr	r3, [r7]
   12fb4:	mov	r0, ip
   12fb8:	mov	r9, r2
   12fbc:	str	r5, [sp]
   12fc0:	str	r3, [sp, #4]
   12fc4:	bl	115c4 <__errno_location@plt>
   12fc8:	cmp	r4, r5
   12fcc:	str	r5, [r0]
   12fd0:	beq	12fe0 <__assert_fail@plt+0x1890>
   12fd4:	ldrsb	r3, [r4]
   12fd8:	cmp	r3, r5
   12fdc:	bne	13000 <__assert_fail@plt+0x18b0>
   12fe0:	ldr	r1, [pc, #168]	; 13090 <__assert_fail@plt+0x1940>
   12fe4:	mov	r3, r4
   12fe8:	add	r1, pc, r1
   12fec:	mov	r2, r8
   12ff0:	ldr	r0, [r1]
   12ff4:	ldr	r1, [pc, #152]	; 13094 <__assert_fail@plt+0x1944>
   12ff8:	add	r1, pc, r1
   12ffc:	bl	1166c <errx@plt>
   13000:	mov	r6, r0
   13004:	mov	r2, r9
   13008:	mov	r3, r5
   1300c:	mov	r1, sp
   13010:	mov	r0, r4
   13014:	bl	1148c <__strtoull_internal@plt>
   13018:	ldr	r2, [r6]
   1301c:	cmp	r2, r5
   13020:	bne	1305c <__assert_fail@plt+0x190c>
   13024:	ldr	r3, [sp]
   13028:	cmp	r3, r4
   1302c:	beq	12fe0 <__assert_fail@plt+0x1890>
   13030:	cmp	r3, r5
   13034:	beq	13044 <__assert_fail@plt+0x18f4>
   13038:	ldrsb	r3, [r3]
   1303c:	cmp	r3, r5
   13040:	bne	12fe0 <__assert_fail@plt+0x1890>
   13044:	ldr	r2, [sp, #4]
   13048:	ldr	r3, [r7]
   1304c:	cmp	r2, r3
   13050:	bne	13084 <__assert_fail@plt+0x1934>
   13054:	add	sp, sp, #12
   13058:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1305c:	ldr	r3, [pc, #52]	; 13098 <__assert_fail@plt+0x1948>
   13060:	cmp	r2, #34	; 0x22
   13064:	add	r3, pc, r3
   13068:	ldr	r0, [r3]
   1306c:	bne	12fe0 <__assert_fail@plt+0x1890>
   13070:	ldr	r1, [pc, #36]	; 1309c <__assert_fail@plt+0x194c>
   13074:	mov	r3, r4
   13078:	mov	r2, r8
   1307c:	add	r1, pc, r1
   13080:	bl	114c8 <err@plt>
   13084:	bl	114b0 <__stack_chk_fail@plt>
   13088:	andeq	r3, r1, r0, lsl #30
   1308c:	andeq	r0, r0, r8, asr r1
   13090:	andeq	r4, r1, r8, lsl #2
   13094:	andeq	r3, r0, r0, lsr #32
   13098:	andeq	r4, r1, ip, lsl #1
   1309c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   130a0:	push	{r4, lr}
   130a4:	mov	r5, r0
   130a8:	mov	r4, r1
   130ac:	bl	115c4 <__errno_location@plt>
   130b0:	ldr	ip, [pc, #32]	; 130d8 <__assert_fail@plt+0x1988>
   130b4:	ldr	r1, [pc, #32]	; 130dc <__assert_fail@plt+0x198c>
   130b8:	add	ip, pc, ip
   130bc:	mov	lr, #34	; 0x22
   130c0:	mov	r3, r5
   130c4:	mov	r2, r4
   130c8:	add	r1, pc, r1
   130cc:	str	lr, [r0]
   130d0:	ldr	r0, [ip]
   130d4:	bl	114c8 <err@plt>
   130d8:	andeq	r4, r1, r8, lsr r0
   130dc:	andeq	r2, r0, r0, asr pc
   130e0:	push	{r4, r5, r6, lr}
   130e4:	mov	r4, r0
   130e8:	mov	r5, r1
   130ec:	bl	12f8c <__assert_fail@plt+0x183c>
   130f0:	mov	r3, #0
   130f4:	mvn	r2, #0
   130f8:	cmp	r1, r3
   130fc:	cmpeq	r0, r2
   13100:	popls	{r4, r5, r6, pc}
   13104:	mov	r1, r5
   13108:	mov	r0, r4
   1310c:	bl	130a0 <__assert_fail@plt+0x1950>
   13110:	ldr	r3, [pc, #8]	; 13120 <__assert_fail@plt+0x19d0>
   13114:	add	r3, pc, r3
   13118:	str	r0, [r3]
   1311c:	bx	lr
   13120:	ldrdeq	r3, [r1], -ip
   13124:	ldr	r3, [pc, #1648]	; 1379c <__assert_fail@plt+0x204c>
   13128:	ldr	ip, [pc, #1648]	; 137a0 <__assert_fail@plt+0x2050>
   1312c:	add	r3, pc, r3
   13130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13134:	mov	r5, r1
   13138:	ldr	r1, [r3, ip]
   1313c:	sub	sp, sp, #52	; 0x34
   13140:	mov	ip, r1
   13144:	mov	r8, r0
   13148:	str	r1, [sp, #24]
   1314c:	mov	r0, #0
   13150:	mov	r1, #0
   13154:	ldr	r3, [ip]
   13158:	strd	r0, [r5]
   1315c:	mov	r9, r2
   13160:	str	r3, [sp, #44]	; 0x2c
   13164:	bl	115c4 <__errno_location@plt>
   13168:	cmp	r8, #0
   1316c:	mov	r4, r0
   13170:	beq	13350 <__assert_fail@plt+0x1c00>
   13174:	ldrsb	fp, [r8]
   13178:	cmp	fp, #0
   1317c:	beq	13350 <__assert_fail@plt+0x1c00>
   13180:	bl	11570 <__ctype_b_loc@plt>
   13184:	mov	r2, r8
   13188:	ldr	r1, [r0]
   1318c:	b	13194 <__assert_fail@plt+0x1a44>
   13190:	ldrsb	fp, [r2, #1]!
   13194:	uxtb	r3, fp
   13198:	lsl	r3, r3, #1
   1319c:	ldrh	ip, [r1, r3]
   131a0:	ands	ip, ip, #8192	; 0x2000
   131a4:	bne	13190 <__assert_fail@plt+0x1a40>
   131a8:	cmp	fp, #45	; 0x2d
   131ac:	beq	13350 <__assert_fail@plt+0x1c00>
   131b0:	add	fp, sp, #40	; 0x28
   131b4:	mov	r3, ip
   131b8:	mov	r2, ip
   131bc:	str	ip, [r4]
   131c0:	mov	r1, fp
   131c4:	mov	r0, r8
   131c8:	str	ip, [sp, #40]	; 0x28
   131cc:	bl	1148c <__strtoull_internal@plt>
   131d0:	ldr	sl, [sp, #40]	; 0x28
   131d4:	cmp	sl, r8
   131d8:	mov	r2, r0
   131dc:	mov	r3, r1
   131e0:	ldr	r0, [r4]
   131e4:	strd	r2, [sp, #16]
   131e8:	beq	134d0 <__assert_fail@plt+0x1d80>
   131ec:	cmp	r0, #0
   131f0:	bne	13378 <__assert_fail@plt+0x1c28>
   131f4:	cmp	sl, #0
   131f8:	beq	13504 <__assert_fail@plt+0x1db4>
   131fc:	ldrsb	r0, [sl]
   13200:	cmp	r0, #0
   13204:	beq	134f8 <__assert_fail@plt+0x1da8>
   13208:	mov	r8, #0
   1320c:	mov	r2, #0
   13210:	mov	r3, #0
   13214:	str	r9, [sp, #32]
   13218:	mov	r6, fp
   1321c:	mov	r9, sl
   13220:	mov	r7, r8
   13224:	mov	sl, r2
   13228:	mov	fp, r3
   1322c:	str	r5, [sp, #28]
   13230:	ldrsb	r2, [r9, #1]
   13234:	cmp	r2, #105	; 0x69
   13238:	beq	133bc <__assert_fail@plt+0x1c6c>
   1323c:	bic	r1, r2, #32
   13240:	cmp	r1, #66	; 0x42
   13244:	bne	134dc <__assert_fail@plt+0x1d8c>
   13248:	ldrsb	r2, [r9, #2]
   1324c:	cmp	r2, #0
   13250:	beq	136c0 <__assert_fail@plt+0x1f70>
   13254:	bl	116a8 <localeconv@plt>
   13258:	cmp	r0, #0
   1325c:	beq	13350 <__assert_fail@plt+0x1c00>
   13260:	ldr	r2, [r0]
   13264:	cmp	r2, #0
   13268:	beq	13350 <__assert_fail@plt+0x1c00>
   1326c:	mov	r0, r2
   13270:	str	r2, [sp]
   13274:	bl	11594 <strlen@plt>
   13278:	orrs	r3, sl, fp
   1327c:	mov	r5, r0
   13280:	bne	13350 <__assert_fail@plt+0x1c00>
   13284:	ldrsb	r1, [r9]
   13288:	cmp	r1, #0
   1328c:	beq	13350 <__assert_fail@plt+0x1c00>
   13290:	ldr	r2, [sp]
   13294:	mov	r1, r9
   13298:	mov	r0, r2
   1329c:	mov	r2, r5
   132a0:	bl	116fc <strncmp@plt>
   132a4:	cmp	r0, #0
   132a8:	bne	13350 <__assert_fail@plt+0x1c00>
   132ac:	ldrsb	r2, [r9, r5]
   132b0:	add	r5, r9, r5
   132b4:	cmp	r2, #48	; 0x30
   132b8:	bne	132d8 <__assert_fail@plt+0x1b88>
   132bc:	add	r8, r8, #1
   132c0:	sub	r1, r8, r5
   132c4:	mov	r3, r5
   132c8:	add	r8, r3, r1
   132cc:	ldrsb	r2, [r3, #1]!
   132d0:	cmp	r2, #48	; 0x30
   132d4:	beq	132c8 <__assert_fail@plt+0x1b78>
   132d8:	mov	r3, #0
   132dc:	str	r7, [r4]
   132e0:	mov	r2, r3
   132e4:	mov	r1, r6
   132e8:	mov	r0, r5
   132ec:	str	r7, [sp, #40]	; 0x28
   132f0:	bl	1148c <__strtoull_internal@plt>
   132f4:	ldr	r9, [sp, #40]	; 0x28
   132f8:	cmp	r9, r5
   132fc:	mov	sl, r0
   13300:	mov	fp, r1
   13304:	beq	134cc <__assert_fail@plt+0x1d7c>
   13308:	ldr	ip, [r4]
   1330c:	cmp	ip, #0
   13310:	beq	133a8 <__assert_fail@plt+0x1c58>
   13314:	subs	r3, r0, #1
   13318:	str	r3, [sp, #8]
   1331c:	sbc	r3, r1, #0
   13320:	str	r3, [sp, #12]
   13324:	ldrd	r2, [sp, #8]
   13328:	mvn	r1, #0
   1332c:	mvn	r0, #2
   13330:	cmp	r3, r1
   13334:	cmpeq	r2, r0
   13338:	bhi	136fc <__assert_fail@plt+0x1fac>
   1333c:	cmp	r9, #0
   13340:	beq	13350 <__assert_fail@plt+0x1c00>
   13344:	ldrsb	r2, [r9]
   13348:	cmp	r2, #0
   1334c:	bne	13230 <__assert_fail@plt+0x1ae0>
   13350:	mov	r3, #22
   13354:	mvn	r0, #21
   13358:	str	r3, [r4]
   1335c:	ldr	r3, [sp, #24]
   13360:	ldr	r2, [sp, #44]	; 0x2c
   13364:	ldr	r3, [r3]
   13368:	cmp	r2, r3
   1336c:	bne	13798 <__assert_fail@plt+0x2048>
   13370:	add	sp, sp, #52	; 0x34
   13374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13378:	subs	r6, r2, #1
   1337c:	sbc	r7, r3, #0
   13380:	mvn	r3, #0
   13384:	mvn	r2, #2
   13388:	cmp	r7, r3
   1338c:	cmpeq	r6, r2
   13390:	bls	131f4 <__assert_fail@plt+0x1aa4>
   13394:	rsb	r0, r0, #0
   13398:	cmp	r0, #0
   1339c:	bge	1335c <__assert_fail@plt+0x1c0c>
   133a0:	rsb	r3, r0, #0
   133a4:	b	13358 <__assert_fail@plt+0x1c08>
   133a8:	orrs	r3, sl, fp
   133ac:	bne	1333c <__assert_fail@plt+0x1bec>
   133b0:	ldrsb	r2, [r9, #1]
   133b4:	cmp	r2, #105	; 0x69
   133b8:	bne	1323c <__assert_fail@plt+0x1aec>
   133bc:	ldrsb	r2, [r9, #2]
   133c0:	bic	r2, r2, #32
   133c4:	cmp	r2, #66	; 0x42
   133c8:	bne	13254 <__assert_fail@plt+0x1b04>
   133cc:	ldrsb	r2, [r9, #3]
   133d0:	cmp	r2, #0
   133d4:	bne	13254 <__assert_fail@plt+0x1b04>
   133d8:	strd	sl, [sp]
   133dc:	mov	sl, r9
   133e0:	ldr	r9, [sp, #32]
   133e4:	mov	r3, #1024	; 0x400
   133e8:	ldr	r5, [sp, #28]
   133ec:	str	r3, [sp, #28]
   133f0:	ldrsb	r7, [sl]
   133f4:	ldr	r6, [pc, #936]	; 137a4 <__assert_fail@plt+0x2054>
   133f8:	add	r6, pc, r6
   133fc:	mov	r1, r7
   13400:	mov	r0, r6
   13404:	bl	115a0 <strchr@plt>
   13408:	cmp	r0, #0
   1340c:	beq	136dc <__assert_fail@plt+0x1f8c>
   13410:	sub	ip, r0, r6
   13414:	add	fp, ip, #1
   13418:	cmp	fp, #0
   1341c:	beq	134e8 <__assert_fail@plt+0x1d98>
   13420:	ldr	r3, [sp, #20]
   13424:	ldr	r6, [sp, #28]
   13428:	cmp	r3, #0
   1342c:	mov	r0, #0
   13430:	asr	r7, r6, #31
   13434:	mov	r1, #0
   13438:	bne	13738 <__assert_fail@plt+0x1fe8>
   1343c:	orrs	r3, r0, r1
   13440:	bne	1352c <__assert_fail@plt+0x1ddc>
   13444:	str	fp, [sp, #32]
   13448:	sub	ip, ip, #1
   1344c:	str	r8, [sp, #36]	; 0x24
   13450:	mov	fp, r4
   13454:	ldrd	r0, [sp, #16]
   13458:	mov	lr, r5
   1345c:	mov	sl, r9
   13460:	b	13470 <__assert_fail@plt+0x1d20>
   13464:	orrs	r3, r4, r5
   13468:	sub	ip, ip, #1
   1346c:	bne	13514 <__assert_fail@plt+0x1dc4>
   13470:	mul	r2, r0, r7
   13474:	cmn	ip, #1
   13478:	mla	r2, r6, r1, r2
   1347c:	umull	r0, r1, r0, r6
   13480:	add	r2, r2, r1
   13484:	mov	r1, r2
   13488:	beq	136a0 <__assert_fail@plt+0x1f50>
   1348c:	cmp	r2, #0
   13490:	mov	r4, #0
   13494:	mov	r5, #0
   13498:	beq	13464 <__assert_fail@plt+0x1d14>
   1349c:	umull	r2, r3, r6, r2
   134a0:	umull	r8, r9, r0, r6
   134a4:	strd	r2, [sp, #8]
   134a8:	mov	r8, r9
   134ac:	ldr	r3, [sp, #12]
   134b0:	adds	r8, r2, r8
   134b4:	mov	r2, #0
   134b8:	adc	r3, r3, r2
   134bc:	cmp	r3, r2
   134c0:	movne	r4, #1
   134c4:	movne	r5, #0
   134c8:	b	13464 <__assert_fail@plt+0x1d14>
   134cc:	ldr	r0, [r4]
   134d0:	cmp	r0, #0
   134d4:	beq	13350 <__assert_fail@plt+0x1c00>
   134d8:	b	13394 <__assert_fail@plt+0x1c44>
   134dc:	cmp	r2, #0
   134e0:	bne	13254 <__assert_fail@plt+0x1b04>
   134e4:	b	133d8 <__assert_fail@plt+0x1c88>
   134e8:	cmp	r9, #0
   134ec:	movne	r0, fp
   134f0:	bne	13538 <__assert_fail@plt+0x1de8>
   134f4:	mov	r0, r9
   134f8:	ldrd	r2, [sp, #16]
   134fc:	strd	r2, [r5]
   13500:	b	1335c <__assert_fail@plt+0x1c0c>
   13504:	ldrd	r2, [sp, #16]
   13508:	mov	r0, sl
   1350c:	strd	r2, [r5]
   13510:	b	1335c <__assert_fail@plt+0x1c0c>
   13514:	mov	r4, fp
   13518:	ldr	r8, [sp, #36]	; 0x24
   1351c:	ldr	fp, [sp, #32]
   13520:	mov	r5, lr
   13524:	mov	r9, sl
   13528:	strd	r0, [sp, #16]
   1352c:	mvn	r0, #33	; 0x21
   13530:	cmp	r9, #0
   13534:	beq	1353c <__assert_fail@plt+0x1dec>
   13538:	str	fp, [r9]
   1353c:	ldrd	r2, [sp]
   13540:	mov	r1, r2
   13544:	orrs	r3, r1, r3
   13548:	movne	r3, #1
   1354c:	moveq	r3, #0
   13550:	cmp	fp, #0
   13554:	moveq	r3, #0
   13558:	cmp	r3, #0
   1355c:	beq	13694 <__assert_fail@plt+0x1f44>
   13560:	ldr	r3, [pc, #576]	; 137a8 <__assert_fail@plt+0x2058>
   13564:	ldr	r1, [pc, #576]	; 137ac <__assert_fail@plt+0x205c>
   13568:	umull	ip, r3, r3, r8
   1356c:	smull	ip, r1, r1, r8
   13570:	lsr	r3, r3, #1
   13574:	rsb	r1, r1, r8, asr #31
   13578:	add	r3, r3, r3, lsl #1
   1357c:	add	r1, r1, fp
   13580:	subs	r3, r8, r3
   13584:	sub	r6, r1, #1
   13588:	bne	13704 <__assert_fail@plt+0x1fb4>
   1358c:	ldrd	r8, [sp]
   13590:	adds	r3, r8, r8
   13594:	adc	r2, r9, r9
   13598:	adds	r3, r3, r8
   1359c:	adc	r2, r2, r9
   135a0:	lsl	ip, r3, #5
   135a4:	lsl	lr, r2, #5
   135a8:	orr	lr, lr, r3, lsr #27
   135ac:	adds	r3, r3, ip
   135b0:	adc	r2, r2, lr
   135b4:	adds	r3, r8, r3
   135b8:	str	r3, [sp]
   135bc:	ldr	r3, [sp, #4]
   135c0:	adc	r3, r3, r2
   135c4:	str	r3, [sp, #4]
   135c8:	cmp	r6, #0
   135cc:	blt	13350 <__assert_fail@plt+0x1c00>
   135d0:	beq	13678 <__assert_fail@plt+0x1f28>
   135d4:	ldr	r3, [sp, #4]
   135d8:	ldr	r8, [sp, #28]
   135dc:	cmp	r3, #0
   135e0:	mov	r6, #0
   135e4:	asr	r9, r8, #31
   135e8:	mov	r7, #0
   135ec:	bne	1376c <__assert_fail@plt+0x201c>
   135f0:	orrs	r3, r6, r7
   135f4:	bne	13678 <__assert_fail@plt+0x1f28>
   135f8:	sub	r1, r1, #3
   135fc:	ldrd	r2, [sp]
   13600:	mov	lr, r4
   13604:	str	r5, [sp, #8]
   13608:	b	13618 <__assert_fail@plt+0x1ec8>
   1360c:	orrs	ip, r6, r7
   13610:	sub	r1, r1, #1
   13614:	bne	1366c <__assert_fail@plt+0x1f1c>
   13618:	mul	ip, r2, r9
   1361c:	cmn	r1, #1
   13620:	mla	ip, r8, r3, ip
   13624:	umull	r2, r3, r2, r8
   13628:	add	ip, ip, r3
   1362c:	mov	r3, ip
   13630:	beq	1366c <__assert_fail@plt+0x1f1c>
   13634:	cmp	ip, #0
   13638:	mov	r6, #0
   1363c:	mov	r7, #0
   13640:	beq	1360c <__assert_fail@plt+0x1ebc>
   13644:	umull	sl, fp, r2, r8
   13648:	umull	r4, r5, r8, ip
   1364c:	mov	ip, fp
   13650:	adds	ip, r4, ip
   13654:	mov	ip, #0
   13658:	adc	ip, r5, ip
   1365c:	cmp	ip, #0
   13660:	movne	r6, #1
   13664:	movne	r7, #0
   13668:	b	1360c <__assert_fail@plt+0x1ebc>
   1366c:	ldr	r5, [sp, #8]
   13670:	mov	r4, lr
   13674:	strd	r2, [sp]
   13678:	ldrd	r2, [sp]
   1367c:	ldr	r1, [sp, #16]
   13680:	adds	r1, r1, r2
   13684:	str	r1, [sp, #16]
   13688:	ldr	r1, [sp, #20]
   1368c:	adc	r3, r1, r3
   13690:	str	r3, [sp, #20]
   13694:	ldrd	r2, [sp, #16]
   13698:	strd	r2, [r5]
   1369c:	b	13398 <__assert_fail@plt+0x1c48>
   136a0:	mov	r4, fp
   136a4:	strd	r0, [sp, #16]
   136a8:	ldr	r8, [sp, #36]	; 0x24
   136ac:	ldr	fp, [sp, #32]
   136b0:	mov	r5, lr
   136b4:	mov	r9, sl
   136b8:	mov	r0, #0
   136bc:	b	13530 <__assert_fail@plt+0x1de0>
   136c0:	mov	r3, #1000	; 0x3e8
   136c4:	strd	sl, [sp]
   136c8:	ldr	r5, [sp, #28]
   136cc:	mov	sl, r9
   136d0:	str	r3, [sp, #28]
   136d4:	ldr	r9, [sp, #32]
   136d8:	b	133f0 <__assert_fail@plt+0x1ca0>
   136dc:	ldr	r6, [pc, #204]	; 137b0 <__assert_fail@plt+0x2060>
   136e0:	mov	r1, r7
   136e4:	add	r6, pc, r6
   136e8:	mov	r0, r6
   136ec:	bl	115a0 <strchr@plt>
   136f0:	cmp	r0, #0
   136f4:	bne	13410 <__assert_fail@plt+0x1cc0>
   136f8:	b	13350 <__assert_fail@plt+0x1c00>
   136fc:	mov	r0, ip
   13700:	b	13394 <__assert_fail@plt+0x1c44>
   13704:	cmp	r3, #1
   13708:	bne	135c8 <__assert_fail@plt+0x1e78>
   1370c:	ldrd	r8, [sp]
   13710:	lsl	r2, r9, #2
   13714:	lsl	r3, r8, #2
   13718:	adds	r3, r3, r8
   1371c:	orr	r2, r2, r8, lsr #30
   13720:	adc	r2, r2, r9
   13724:	adds	r3, r3, r3
   13728:	str	r3, [sp]
   1372c:	adc	r3, r2, r2
   13730:	str	r3, [sp, #4]
   13734:	b	135c8 <__assert_fail@plt+0x1e78>
   13738:	ldr	lr, [sp, #28]
   1373c:	ldr	r3, [sp, #16]
   13740:	ldr	sl, [sp, #20]
   13744:	umull	r2, r3, r3, lr
   13748:	str	r3, [sp, #8]
   1374c:	mov	r3, #0
   13750:	str	r3, [sp, #12]
   13754:	ldrd	r2, [sp, #8]
   13758:	umlal	r2, r3, sl, lr
   1375c:	cmp	r3, #0
   13760:	movne	r0, #1
   13764:	movne	r1, #0
   13768:	b	1343c <__assert_fail@plt+0x1cec>
   1376c:	ldr	r3, [sp]
   13770:	ldr	ip, [sp, #28]
   13774:	ldr	lr, [sp, #4]
   13778:	umull	sl, fp, r3, ip
   1377c:	mov	r3, #0
   13780:	mov	r2, fp
   13784:	umlal	r2, r3, lr, ip
   13788:	cmp	r3, #0
   1378c:	movne	r6, #1
   13790:	movne	r7, #0
   13794:	b	135f0 <__assert_fail@plt+0x1ea0>
   13798:	bl	114b0 <__stack_chk_fail@plt>
   1379c:	andeq	r3, r1, r8, ror #26
   137a0:	andeq	r0, r0, r8, asr r1
   137a4:	andeq	r2, r0, ip, lsr #24
   137a8:	bge	feabe25c <optarg@@GLIBC_2.4+0xfea9714c>
   137ac:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   137b0:	andeq	r2, r0, ip, asr #18
   137b4:	mov	r2, #0
   137b8:	b	13124 <__assert_fail@plt+0x19d4>
   137bc:	push	{r4, r5, r6, lr}
   137c0:	subs	r5, r0, #0
   137c4:	mov	r6, r1
   137c8:	beq	13834 <__assert_fail@plt+0x20e4>
   137cc:	ldrsb	r4, [r5]
   137d0:	cmp	r4, #0
   137d4:	beq	13848 <__assert_fail@plt+0x20f8>
   137d8:	bl	11570 <__ctype_b_loc@plt>
   137dc:	mov	r3, r5
   137e0:	ldr	r0, [r0]
   137e4:	b	137fc <__assert_fail@plt+0x20ac>
   137e8:	adds	r3, r3, #1
   137ec:	beq	13834 <__assert_fail@plt+0x20e4>
   137f0:	ldrsb	r4, [r3]
   137f4:	cmp	r4, #0
   137f8:	beq	13810 <__assert_fail@plt+0x20c0>
   137fc:	uxtb	r4, r4
   13800:	lsl	r4, r4, #1
   13804:	ldrh	r2, [r0, r4]
   13808:	tst	r2, #2048	; 0x800
   1380c:	bne	137e8 <__assert_fail@plt+0x2098>
   13810:	cmp	r6, #0
   13814:	strne	r3, [r6]
   13818:	cmp	r5, r3
   1381c:	bcs	13840 <__assert_fail@plt+0x20f0>
   13820:	ldrsb	r3, [r3]
   13824:	cmp	r3, #0
   13828:	bne	13840 <__assert_fail@plt+0x20f0>
   1382c:	mov	r0, #1
   13830:	pop	{r4, r5, r6, pc}
   13834:	cmp	r6, #0
   13838:	movne	r3, #0
   1383c:	strne	r3, [r6]
   13840:	mov	r0, #0
   13844:	pop	{r4, r5, r6, pc}
   13848:	cmp	r1, #0
   1384c:	strne	r5, [r1]
   13850:	b	13840 <__assert_fail@plt+0x20f0>
   13854:	push	{r4, r5, r6, lr}
   13858:	subs	r5, r0, #0
   1385c:	mov	r6, r1
   13860:	beq	138cc <__assert_fail@plt+0x217c>
   13864:	ldrsb	r4, [r5]
   13868:	cmp	r4, #0
   1386c:	beq	138e0 <__assert_fail@plt+0x2190>
   13870:	bl	11570 <__ctype_b_loc@plt>
   13874:	mov	r3, r5
   13878:	ldr	r0, [r0]
   1387c:	b	13894 <__assert_fail@plt+0x2144>
   13880:	adds	r3, r3, #1
   13884:	beq	138cc <__assert_fail@plt+0x217c>
   13888:	ldrsb	r4, [r3]
   1388c:	cmp	r4, #0
   13890:	beq	138a8 <__assert_fail@plt+0x2158>
   13894:	uxtb	r4, r4
   13898:	lsl	r4, r4, #1
   1389c:	ldrh	r2, [r0, r4]
   138a0:	tst	r2, #4096	; 0x1000
   138a4:	bne	13880 <__assert_fail@plt+0x2130>
   138a8:	cmp	r6, #0
   138ac:	strne	r3, [r6]
   138b0:	cmp	r5, r3
   138b4:	bcs	138d8 <__assert_fail@plt+0x2188>
   138b8:	ldrsb	r3, [r3]
   138bc:	cmp	r3, #0
   138c0:	bne	138d8 <__assert_fail@plt+0x2188>
   138c4:	mov	r0, #1
   138c8:	pop	{r4, r5, r6, pc}
   138cc:	cmp	r6, #0
   138d0:	movne	r3, #0
   138d4:	strne	r3, [r6]
   138d8:	mov	r0, #0
   138dc:	pop	{r4, r5, r6, pc}
   138e0:	cmp	r1, #0
   138e4:	strne	r5, [r1]
   138e8:	b	138d8 <__assert_fail@plt+0x2188>
   138ec:	push	{r1, r2, r3}
   138f0:	ldr	r3, [pc, #188]	; 139b4 <__assert_fail@plt+0x2264>
   138f4:	ldr	r2, [pc, #188]	; 139b8 <__assert_fail@plt+0x2268>
   138f8:	add	r3, pc, r3
   138fc:	push	{r4, r5, r6, r7, r8, lr}
   13900:	sub	sp, sp, #12
   13904:	ldr	r7, [r3, r2]
   13908:	ldr	r8, [sp, #36]	; 0x24
   1390c:	mov	r6, r0
   13910:	ldr	r3, [r7]
   13914:	add	r4, sp, #48	; 0x30
   13918:	str	r3, [sp, #4]
   1391c:	b	13938 <__assert_fail@plt+0x21e8>
   13920:	mov	r1, r5
   13924:	mov	r0, r6
   13928:	bl	113c0 <strcmp@plt>
   1392c:	add	r4, r4, #8
   13930:	cmp	r0, #0
   13934:	beq	13970 <__assert_fail@plt+0x2220>
   13938:	ldr	r1, [r4, #-8]
   1393c:	sub	r3, r4, #4
   13940:	cmp	r1, #0
   13944:	str	r3, [sp]
   13948:	beq	13990 <__assert_fail@plt+0x2240>
   1394c:	ldr	r5, [r4, #-4]
   13950:	str	r4, [sp]
   13954:	cmp	r5, #0
   13958:	beq	13990 <__assert_fail@plt+0x2240>
   1395c:	mov	r0, r6
   13960:	bl	113c0 <strcmp@plt>
   13964:	cmp	r0, #0
   13968:	bne	13920 <__assert_fail@plt+0x21d0>
   1396c:	mov	r0, #1
   13970:	ldr	r2, [sp, #4]
   13974:	ldr	r3, [r7]
   13978:	cmp	r2, r3
   1397c:	bne	139b0 <__assert_fail@plt+0x2260>
   13980:	add	sp, sp, #12
   13984:	pop	{r4, r5, r6, r7, r8, lr}
   13988:	add	sp, sp, #12
   1398c:	bx	lr
   13990:	ldr	r1, [pc, #36]	; 139bc <__assert_fail@plt+0x226c>
   13994:	mov	r3, r6
   13998:	add	r1, pc, r1
   1399c:	mov	r2, r8
   139a0:	ldr	r0, [r1]
   139a4:	ldr	r1, [pc, #20]	; 139c0 <__assert_fail@plt+0x2270>
   139a8:	add	r1, pc, r1
   139ac:	bl	1166c <errx@plt>
   139b0:	bl	114b0 <__stack_chk_fail@plt>
   139b4:	muleq	r1, ip, r5
   139b8:	andeq	r0, r0, r8, asr r1
   139bc:	andeq	r3, r1, r8, asr r7
   139c0:	andeq	r2, r0, r0, ror r6
   139c4:	cmp	r1, #0
   139c8:	beq	13a14 <__assert_fail@plt+0x22c4>
   139cc:	ldrsb	r3, [r0]
   139d0:	cmp	r3, #0
   139d4:	beq	13a14 <__assert_fail@plt+0x22c4>
   139d8:	sxtb	r2, r2
   139dc:	cmp	r3, r2
   139e0:	bxeq	lr
   139e4:	add	r1, r0, r1
   139e8:	add	r3, r0, #1
   139ec:	b	13a08 <__assert_fail@plt+0x22b8>
   139f0:	ldrsb	ip, [r3]
   139f4:	add	r3, r3, #1
   139f8:	cmp	ip, #0
   139fc:	beq	13a14 <__assert_fail@plt+0x22c4>
   13a00:	cmp	ip, r2
   13a04:	bxeq	lr
   13a08:	cmp	r3, r1
   13a0c:	mov	r0, r3
   13a10:	bne	139f0 <__assert_fail@plt+0x22a0>
   13a14:	mov	r0, #0
   13a18:	bx	lr
   13a1c:	push	{r4, r5, r6, lr}
   13a20:	mov	r2, #10
   13a24:	mov	r4, r0
   13a28:	mov	r5, r1
   13a2c:	bl	130e0 <__assert_fail@plt+0x1990>
   13a30:	cmp	r0, #65536	; 0x10000
   13a34:	bcs	13a40 <__assert_fail@plt+0x22f0>
   13a38:	uxth	r0, r0
   13a3c:	pop	{r4, r5, r6, pc}
   13a40:	mov	r1, r5
   13a44:	mov	r0, r4
   13a48:	bl	130a0 <__assert_fail@plt+0x1950>
   13a4c:	push	{r4, r5, r6, lr}
   13a50:	mov	r2, #16
   13a54:	mov	r4, r0
   13a58:	mov	r5, r1
   13a5c:	bl	130e0 <__assert_fail@plt+0x1990>
   13a60:	cmp	r0, #65536	; 0x10000
   13a64:	bcs	13a70 <__assert_fail@plt+0x2320>
   13a68:	uxth	r0, r0
   13a6c:	pop	{r4, r5, r6, pc}
   13a70:	mov	r1, r5
   13a74:	mov	r0, r4
   13a78:	bl	130a0 <__assert_fail@plt+0x1950>
   13a7c:	mov	r2, #10
   13a80:	b	130e0 <__assert_fail@plt+0x1990>
   13a84:	mov	r2, #16
   13a88:	b	130e0 <__assert_fail@plt+0x1990>
   13a8c:	ldr	r2, [pc, #236]	; 13b80 <__assert_fail@plt+0x2430>
   13a90:	ldr	ip, [pc, #236]	; 13b84 <__assert_fail@plt+0x2434>
   13a94:	add	r2, pc, r2
   13a98:	push	{r4, r5, r6, r7, r8, lr}
   13a9c:	sub	sp, sp, #8
   13aa0:	ldr	r7, [r2, ip]
   13aa4:	mov	r5, #0
   13aa8:	mov	r4, r0
   13aac:	ldr	r3, [r7]
   13ab0:	mov	r8, r1
   13ab4:	str	r5, [sp]
   13ab8:	str	r3, [sp, #4]
   13abc:	bl	115c4 <__errno_location@plt>
   13ac0:	cmp	r4, r5
   13ac4:	str	r5, [r0]
   13ac8:	beq	13ad8 <__assert_fail@plt+0x2388>
   13acc:	ldrsb	r3, [r4]
   13ad0:	cmp	r3, r5
   13ad4:	bne	13af8 <__assert_fail@plt+0x23a8>
   13ad8:	ldr	r1, [pc, #168]	; 13b88 <__assert_fail@plt+0x2438>
   13adc:	mov	r3, r4
   13ae0:	add	r1, pc, r1
   13ae4:	mov	r2, r8
   13ae8:	ldr	r0, [r1]
   13aec:	ldr	r1, [pc, #152]	; 13b8c <__assert_fail@plt+0x243c>
   13af0:	add	r1, pc, r1
   13af4:	bl	1166c <errx@plt>
   13af8:	mov	r6, r0
   13afc:	mov	r2, #10
   13b00:	mov	r3, r5
   13b04:	mov	r1, sp
   13b08:	mov	r0, r4
   13b0c:	bl	116cc <__strtoll_internal@plt>
   13b10:	ldr	r2, [r6]
   13b14:	cmp	r2, r5
   13b18:	bne	13b54 <__assert_fail@plt+0x2404>
   13b1c:	ldr	r3, [sp]
   13b20:	cmp	r3, r4
   13b24:	beq	13ad8 <__assert_fail@plt+0x2388>
   13b28:	cmp	r3, r5
   13b2c:	beq	13b3c <__assert_fail@plt+0x23ec>
   13b30:	ldrsb	r3, [r3]
   13b34:	cmp	r3, r5
   13b38:	bne	13ad8 <__assert_fail@plt+0x2388>
   13b3c:	ldr	r2, [sp, #4]
   13b40:	ldr	r3, [r7]
   13b44:	cmp	r2, r3
   13b48:	bne	13b7c <__assert_fail@plt+0x242c>
   13b4c:	add	sp, sp, #8
   13b50:	pop	{r4, r5, r6, r7, r8, pc}
   13b54:	ldr	r3, [pc, #52]	; 13b90 <__assert_fail@plt+0x2440>
   13b58:	cmp	r2, #34	; 0x22
   13b5c:	add	r3, pc, r3
   13b60:	ldr	r0, [r3]
   13b64:	bne	13ad8 <__assert_fail@plt+0x2388>
   13b68:	ldr	r1, [pc, #36]	; 13b94 <__assert_fail@plt+0x2444>
   13b6c:	mov	r3, r4
   13b70:	mov	r2, r8
   13b74:	add	r1, pc, r1
   13b78:	bl	114c8 <err@plt>
   13b7c:	bl	114b0 <__stack_chk_fail@plt>
   13b80:	andeq	r3, r1, r0, lsl #8
   13b84:	andeq	r0, r0, r8, asr r1
   13b88:	andeq	r3, r1, r0, lsl r6
   13b8c:	andeq	r2, r0, r8, lsr #10
   13b90:	muleq	r1, r4, r5
   13b94:	andeq	r2, r0, r4, lsr #9
   13b98:	push	{r4, r5, r6, r7, r8, lr}
   13b9c:	mov	r7, r0
   13ba0:	mov	r6, r1
   13ba4:	bl	13a8c <__assert_fail@plt+0x233c>
   13ba8:	mov	r3, #0
   13bac:	mvn	r2, #0
   13bb0:	adds	r4, r0, #-2147483648	; 0x80000000
   13bb4:	adc	r5, r1, #0
   13bb8:	cmp	r5, r3
   13bbc:	cmpeq	r4, r2
   13bc0:	popls	{r4, r5, r6, r7, r8, pc}
   13bc4:	bl	115c4 <__errno_location@plt>
   13bc8:	ldr	ip, [pc, #32]	; 13bf0 <__assert_fail@plt+0x24a0>
   13bcc:	ldr	r1, [pc, #32]	; 13bf4 <__assert_fail@plt+0x24a4>
   13bd0:	add	ip, pc, ip
   13bd4:	mov	lr, #34	; 0x22
   13bd8:	mov	r3, r7
   13bdc:	mov	r2, r6
   13be0:	add	r1, pc, r1
   13be4:	str	lr, [r0]
   13be8:	ldr	r0, [ip]
   13bec:	bl	114c8 <err@plt>
   13bf0:	andeq	r3, r1, r0, lsr #10
   13bf4:	andeq	r2, r0, r8, lsr r4
   13bf8:	push	{r4, r5, r6, lr}
   13bfc:	mov	r5, r0
   13c00:	mov	r4, r1
   13c04:	bl	13b98 <__assert_fail@plt+0x2448>
   13c08:	add	r3, r0, #32768	; 0x8000
   13c0c:	cmp	r3, #65536	; 0x10000
   13c10:	bcs	13c1c <__assert_fail@plt+0x24cc>
   13c14:	sxth	r0, r0
   13c18:	pop	{r4, r5, r6, pc}
   13c1c:	bl	115c4 <__errno_location@plt>
   13c20:	ldr	ip, [pc, #32]	; 13c48 <__assert_fail@plt+0x24f8>
   13c24:	ldr	r1, [pc, #32]	; 13c4c <__assert_fail@plt+0x24fc>
   13c28:	add	ip, pc, ip
   13c2c:	mov	lr, #34	; 0x22
   13c30:	mov	r3, r5
   13c34:	mov	r2, r4
   13c38:	add	r1, pc, r1
   13c3c:	str	lr, [r0]
   13c40:	ldr	r0, [ip]
   13c44:	bl	114c8 <err@plt>
   13c48:	andeq	r3, r1, r8, asr #9
   13c4c:	andeq	r2, r0, r0, ror #7
   13c50:	mov	r2, #10
   13c54:	b	12f8c <__assert_fail@plt+0x183c>
   13c58:	mov	r2, #16
   13c5c:	b	12f8c <__assert_fail@plt+0x183c>
   13c60:	ldr	r2, [pc, #228]	; 13d4c <__assert_fail@plt+0x25fc>
   13c64:	ldr	r3, [pc, #228]	; 13d50 <__assert_fail@plt+0x2600>
   13c68:	add	r2, pc, r2
   13c6c:	push	{r4, r5, r6, r7, r8, lr}
   13c70:	sub	sp, sp, #8
   13c74:	ldr	r7, [r2, r3]
   13c78:	mov	r5, #0
   13c7c:	mov	r4, r0
   13c80:	ldr	r3, [r7]
   13c84:	mov	r8, r1
   13c88:	str	r5, [sp]
   13c8c:	str	r3, [sp, #4]
   13c90:	bl	115c4 <__errno_location@plt>
   13c94:	cmp	r4, r5
   13c98:	str	r5, [r0]
   13c9c:	beq	13cac <__assert_fail@plt+0x255c>
   13ca0:	ldrsb	r3, [r4]
   13ca4:	cmp	r3, r5
   13ca8:	bne	13ccc <__assert_fail@plt+0x257c>
   13cac:	ldr	r1, [pc, #160]	; 13d54 <__assert_fail@plt+0x2604>
   13cb0:	mov	r3, r4
   13cb4:	add	r1, pc, r1
   13cb8:	mov	r2, r8
   13cbc:	ldr	r0, [r1]
   13cc0:	ldr	r1, [pc, #144]	; 13d58 <__assert_fail@plt+0x2608>
   13cc4:	add	r1, pc, r1
   13cc8:	bl	1166c <errx@plt>
   13ccc:	mov	r6, r0
   13cd0:	mov	r1, sp
   13cd4:	mov	r0, r4
   13cd8:	bl	11624 <strtod@plt>
   13cdc:	ldr	r2, [r6]
   13ce0:	cmp	r2, r5
   13ce4:	bne	13d20 <__assert_fail@plt+0x25d0>
   13ce8:	ldr	r3, [sp]
   13cec:	cmp	r3, r4
   13cf0:	beq	13cac <__assert_fail@plt+0x255c>
   13cf4:	cmp	r3, r5
   13cf8:	beq	13d08 <__assert_fail@plt+0x25b8>
   13cfc:	ldrsb	r3, [r3]
   13d00:	cmp	r3, r5
   13d04:	bne	13cac <__assert_fail@plt+0x255c>
   13d08:	ldr	r2, [sp, #4]
   13d0c:	ldr	r3, [r7]
   13d10:	cmp	r2, r3
   13d14:	bne	13d48 <__assert_fail@plt+0x25f8>
   13d18:	add	sp, sp, #8
   13d1c:	pop	{r4, r5, r6, r7, r8, pc}
   13d20:	ldr	r3, [pc, #52]	; 13d5c <__assert_fail@plt+0x260c>
   13d24:	cmp	r2, #34	; 0x22
   13d28:	add	r3, pc, r3
   13d2c:	ldr	r0, [r3]
   13d30:	bne	13cac <__assert_fail@plt+0x255c>
   13d34:	ldr	r1, [pc, #36]	; 13d60 <__assert_fail@plt+0x2610>
   13d38:	mov	r3, r4
   13d3c:	mov	r2, r8
   13d40:	add	r1, pc, r1
   13d44:	bl	114c8 <err@plt>
   13d48:	bl	114b0 <__stack_chk_fail@plt>
   13d4c:	andeq	r3, r1, ip, lsr #4
   13d50:	andeq	r0, r0, r8, asr r1
   13d54:	andeq	r3, r1, ip, lsr r4
   13d58:	andeq	r2, r0, r4, asr r3
   13d5c:	andeq	r3, r1, r8, asr #7
   13d60:	ldrdeq	r2, [r0], -r8
   13d64:	ldr	r2, [pc, #232]	; 13e54 <__assert_fail@plt+0x2704>
   13d68:	ldr	r3, [pc, #232]	; 13e58 <__assert_fail@plt+0x2708>
   13d6c:	add	r2, pc, r2
   13d70:	push	{r4, r5, r6, r7, r8, lr}
   13d74:	sub	sp, sp, #8
   13d78:	ldr	r7, [r2, r3]
   13d7c:	mov	r5, #0
   13d80:	mov	r4, r0
   13d84:	ldr	r3, [r7]
   13d88:	mov	r8, r1
   13d8c:	str	r5, [sp]
   13d90:	str	r3, [sp, #4]
   13d94:	bl	115c4 <__errno_location@plt>
   13d98:	cmp	r4, r5
   13d9c:	str	r5, [r0]
   13da0:	beq	13db0 <__assert_fail@plt+0x2660>
   13da4:	ldrsb	r3, [r4]
   13da8:	cmp	r3, r5
   13dac:	bne	13dd0 <__assert_fail@plt+0x2680>
   13db0:	ldr	r1, [pc, #164]	; 13e5c <__assert_fail@plt+0x270c>
   13db4:	mov	r3, r4
   13db8:	add	r1, pc, r1
   13dbc:	mov	r2, r8
   13dc0:	ldr	r0, [r1]
   13dc4:	ldr	r1, [pc, #148]	; 13e60 <__assert_fail@plt+0x2710>
   13dc8:	add	r1, pc, r1
   13dcc:	bl	1166c <errx@plt>
   13dd0:	mov	r6, r0
   13dd4:	mov	r2, #10
   13dd8:	mov	r1, sp
   13ddc:	mov	r0, r4
   13de0:	bl	113d8 <strtol@plt>
   13de4:	ldr	r2, [r6]
   13de8:	cmp	r2, r5
   13dec:	bne	13e28 <__assert_fail@plt+0x26d8>
   13df0:	ldr	r3, [sp]
   13df4:	cmp	r3, r4
   13df8:	beq	13db0 <__assert_fail@plt+0x2660>
   13dfc:	cmp	r3, r5
   13e00:	beq	13e10 <__assert_fail@plt+0x26c0>
   13e04:	ldrsb	r3, [r3]
   13e08:	cmp	r3, r5
   13e0c:	bne	13db0 <__assert_fail@plt+0x2660>
   13e10:	ldr	r2, [sp, #4]
   13e14:	ldr	r3, [r7]
   13e18:	cmp	r2, r3
   13e1c:	bne	13e50 <__assert_fail@plt+0x2700>
   13e20:	add	sp, sp, #8
   13e24:	pop	{r4, r5, r6, r7, r8, pc}
   13e28:	ldr	r3, [pc, #52]	; 13e64 <__assert_fail@plt+0x2714>
   13e2c:	cmp	r2, #34	; 0x22
   13e30:	add	r3, pc, r3
   13e34:	ldr	r0, [r3]
   13e38:	bne	13db0 <__assert_fail@plt+0x2660>
   13e3c:	ldr	r1, [pc, #36]	; 13e68 <__assert_fail@plt+0x2718>
   13e40:	mov	r3, r4
   13e44:	mov	r2, r8
   13e48:	add	r1, pc, r1
   13e4c:	bl	114c8 <err@plt>
   13e50:	bl	114b0 <__stack_chk_fail@plt>
   13e54:	andeq	r3, r1, r8, lsr #2
   13e58:	andeq	r0, r0, r8, asr r1
   13e5c:	andeq	r3, r1, r8, lsr r3
   13e60:	andeq	r2, r0, r0, asr r2
   13e64:	andeq	r3, r1, r0, asr #5
   13e68:	ldrdeq	r2, [r0], -r0
   13e6c:	ldr	r2, [pc, #232]	; 13f5c <__assert_fail@plt+0x280c>
   13e70:	ldr	r3, [pc, #232]	; 13f60 <__assert_fail@plt+0x2810>
   13e74:	add	r2, pc, r2
   13e78:	push	{r4, r5, r6, r7, r8, lr}
   13e7c:	sub	sp, sp, #8
   13e80:	ldr	r7, [r2, r3]
   13e84:	mov	r5, #0
   13e88:	mov	r4, r0
   13e8c:	ldr	r3, [r7]
   13e90:	mov	r8, r1
   13e94:	str	r5, [sp]
   13e98:	str	r3, [sp, #4]
   13e9c:	bl	115c4 <__errno_location@plt>
   13ea0:	cmp	r4, r5
   13ea4:	str	r5, [r0]
   13ea8:	beq	13eb8 <__assert_fail@plt+0x2768>
   13eac:	ldrsb	r3, [r4]
   13eb0:	cmp	r3, r5
   13eb4:	bne	13ed8 <__assert_fail@plt+0x2788>
   13eb8:	ldr	r1, [pc, #164]	; 13f64 <__assert_fail@plt+0x2814>
   13ebc:	mov	r3, r4
   13ec0:	add	r1, pc, r1
   13ec4:	mov	r2, r8
   13ec8:	ldr	r0, [r1]
   13ecc:	ldr	r1, [pc, #148]	; 13f68 <__assert_fail@plt+0x2818>
   13ed0:	add	r1, pc, r1
   13ed4:	bl	1166c <errx@plt>
   13ed8:	mov	r6, r0
   13edc:	mov	r2, #10
   13ee0:	mov	r1, sp
   13ee4:	mov	r0, r4
   13ee8:	bl	11588 <strtoul@plt>
   13eec:	ldr	r2, [r6]
   13ef0:	cmp	r2, r5
   13ef4:	bne	13f30 <__assert_fail@plt+0x27e0>
   13ef8:	ldr	r3, [sp]
   13efc:	cmp	r3, r4
   13f00:	beq	13eb8 <__assert_fail@plt+0x2768>
   13f04:	cmp	r3, r5
   13f08:	beq	13f18 <__assert_fail@plt+0x27c8>
   13f0c:	ldrsb	r3, [r3]
   13f10:	cmp	r3, r5
   13f14:	bne	13eb8 <__assert_fail@plt+0x2768>
   13f18:	ldr	r2, [sp, #4]
   13f1c:	ldr	r3, [r7]
   13f20:	cmp	r2, r3
   13f24:	bne	13f58 <__assert_fail@plt+0x2808>
   13f28:	add	sp, sp, #8
   13f2c:	pop	{r4, r5, r6, r7, r8, pc}
   13f30:	ldr	r3, [pc, #52]	; 13f6c <__assert_fail@plt+0x281c>
   13f34:	cmp	r2, #34	; 0x22
   13f38:	add	r3, pc, r3
   13f3c:	ldr	r0, [r3]
   13f40:	bne	13eb8 <__assert_fail@plt+0x2768>
   13f44:	ldr	r1, [pc, #36]	; 13f70 <__assert_fail@plt+0x2820>
   13f48:	mov	r3, r4
   13f4c:	mov	r2, r8
   13f50:	add	r1, pc, r1
   13f54:	bl	114c8 <err@plt>
   13f58:	bl	114b0 <__stack_chk_fail@plt>
   13f5c:	andeq	r3, r1, r0, lsr #32
   13f60:	andeq	r0, r0, r8, asr r1
   13f64:	andeq	r3, r1, r0, lsr r2
   13f68:	andeq	r2, r0, r8, asr #2
   13f6c:			; <UNDEFINED> instruction: 0x000131b8
   13f70:	andeq	r2, r0, r8, asr #1
   13f74:	ldr	r3, [pc, #140]	; 14008 <__assert_fail@plt+0x28b8>
   13f78:	ldr	r2, [pc, #140]	; 1400c <__assert_fail@plt+0x28bc>
   13f7c:	add	r3, pc, r3
   13f80:	push	{r4, r5, r6, lr}
   13f84:	sub	sp, sp, #16
   13f88:	ldr	r4, [r3, r2]
   13f8c:	mov	r5, r1
   13f90:	mov	r1, sp
   13f94:	ldr	r3, [r4]
   13f98:	mov	r6, r0
   13f9c:	str	r3, [sp, #12]
   13fa0:	bl	137b4 <__assert_fail@plt+0x2064>
   13fa4:	cmp	r0, #0
   13fa8:	beq	13fe8 <__assert_fail@plt+0x2898>
   13fac:	bl	115c4 <__errno_location@plt>
   13fb0:	ldr	r3, [pc, #88]	; 14010 <__assert_fail@plt+0x28c0>
   13fb4:	mov	r2, r5
   13fb8:	ldr	r1, [pc, r3]
   13fbc:	ldr	r3, [r0]
   13fc0:	mov	r0, r1
   13fc4:	cmp	r3, #0
   13fc8:	mov	r3, r6
   13fcc:	beq	13fdc <__assert_fail@plt+0x288c>
   13fd0:	ldr	r1, [pc, #60]	; 14014 <__assert_fail@plt+0x28c4>
   13fd4:	add	r1, pc, r1
   13fd8:	bl	114c8 <err@plt>
   13fdc:	ldr	r1, [pc, #52]	; 14018 <__assert_fail@plt+0x28c8>
   13fe0:	add	r1, pc, r1
   13fe4:	bl	1166c <errx@plt>
   13fe8:	ldr	r2, [sp, #12]
   13fec:	ldr	r3, [r4]
   13ff0:	ldrd	r0, [sp]
   13ff4:	cmp	r2, r3
   13ff8:	bne	14004 <__assert_fail@plt+0x28b4>
   13ffc:	add	sp, sp, #16
   14000:	pop	{r4, r5, r6, pc}
   14004:	bl	114b0 <__stack_chk_fail@plt>
   14008:	andeq	r2, r1, r8, lsl pc
   1400c:	andeq	r0, r0, r8, asr r1
   14010:	andeq	r3, r1, r8, lsr r1
   14014:	andeq	r2, r0, r4, asr #32
   14018:	andeq	r2, r0, r8, lsr r0
   1401c:	push	{r4, lr}
   14020:	mov	r4, r1
   14024:	mov	r1, r2
   14028:	bl	13c60 <__assert_fail@plt+0x2510>
   1402c:	vldr	d6, [pc, #28]	; 14050 <__assert_fail@plt+0x2900>
   14030:	vcvt.s32.f64	s15, d0
   14034:	vcvt.f64.s32	d5, s15
   14038:	vstr	s15, [r4]
   1403c:	vsub.f64	d0, d0, d5
   14040:	vmul.f64	d0, d0, d6
   14044:	vcvt.s32.f64	s0, d0
   14048:	vstr	s0, [r4, #4]
   1404c:	pop	{r4, pc}
   14050:	andeq	r0, r0, r0
   14054:	smlawbmi	lr, r0, r4, r8
   14058:	and	r2, r0, #61440	; 0xf000
   1405c:	cmp	r2, #16384	; 0x4000
   14060:	moveq	r2, r1
   14064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14068:	moveq	sl, #100	; 0x64
   1406c:	mov	r3, r0
   14070:	add	r9, r1, #1
   14074:	add	r8, r1, #2
   14078:	add	r7, r1, #3
   1407c:	add	r6, r1, #4
   14080:	add	r5, r1, #5
   14084:	add	r4, r1, #6
   14088:	add	lr, r1, #7
   1408c:	add	ip, r1, #8
   14090:	add	r0, r1, #9
   14094:	strbeq	sl, [r2], #10
   14098:	beq	1413c <__assert_fail@plt+0x29ec>
   1409c:	cmp	r2, #40960	; 0xa000
   140a0:	moveq	r2, r1
   140a4:	moveq	sl, #108	; 0x6c
   140a8:	strbeq	sl, [r2], #10
   140ac:	beq	1413c <__assert_fail@plt+0x29ec>
   140b0:	cmp	r2, #8192	; 0x2000
   140b4:	moveq	r2, r1
   140b8:	moveq	sl, #99	; 0x63
   140bc:	strbeq	sl, [r2], #10
   140c0:	beq	1413c <__assert_fail@plt+0x29ec>
   140c4:	cmp	r2, #24576	; 0x6000
   140c8:	moveq	r2, r1
   140cc:	moveq	sl, #98	; 0x62
   140d0:	strbeq	sl, [r2], #10
   140d4:	beq	1413c <__assert_fail@plt+0x29ec>
   140d8:	cmp	r2, #49152	; 0xc000
   140dc:	moveq	r2, r1
   140e0:	moveq	sl, #115	; 0x73
   140e4:	strbeq	sl, [r2], #10
   140e8:	beq	1413c <__assert_fail@plt+0x29ec>
   140ec:	cmp	r2, #4096	; 0x1000
   140f0:	moveq	r2, r1
   140f4:	moveq	sl, #112	; 0x70
   140f8:	strbeq	sl, [r2], #10
   140fc:	beq	1413c <__assert_fail@plt+0x29ec>
   14100:	cmp	r2, #32768	; 0x8000
   14104:	moveq	r2, r1
   14108:	moveq	sl, #45	; 0x2d
   1410c:	strbeq	sl, [r2], #10
   14110:	beq	1413c <__assert_fail@plt+0x29ec>
   14114:	mov	r2, r0
   14118:	mov	r0, ip
   1411c:	mov	ip, lr
   14120:	mov	lr, r4
   14124:	mov	r4, r5
   14128:	mov	r5, r6
   1412c:	mov	r6, r7
   14130:	mov	r7, r8
   14134:	mov	r8, r9
   14138:	mov	r9, r1
   1413c:	tst	r3, #256	; 0x100
   14140:	movne	fp, #114	; 0x72
   14144:	moveq	fp, #45	; 0x2d
   14148:	tst	r3, #128	; 0x80
   1414c:	movne	sl, #119	; 0x77
   14150:	moveq	sl, #45	; 0x2d
   14154:	tst	r3, #2048	; 0x800
   14158:	strb	fp, [r9]
   1415c:	and	r9, r3, #64	; 0x40
   14160:	strb	sl, [r8]
   14164:	beq	14200 <__assert_fail@plt+0x2ab0>
   14168:	cmp	r9, #0
   1416c:	movne	r9, #115	; 0x73
   14170:	moveq	r9, #83	; 0x53
   14174:	tst	r3, #32
   14178:	movne	r8, #114	; 0x72
   1417c:	moveq	r8, #45	; 0x2d
   14180:	tst	r3, #16
   14184:	strb	r9, [r7]
   14188:	movne	r7, #119	; 0x77
   1418c:	moveq	r7, #45	; 0x2d
   14190:	tst	r3, #1024	; 0x400
   14194:	strb	r8, [r6]
   14198:	and	r6, r3, #8
   1419c:	strb	r7, [r5]
   141a0:	beq	14210 <__assert_fail@plt+0x2ac0>
   141a4:	cmp	r6, #0
   141a8:	movne	r6, #115	; 0x73
   141ac:	moveq	r6, #83	; 0x53
   141b0:	tst	r3, #4
   141b4:	movne	r5, #114	; 0x72
   141b8:	moveq	r5, #45	; 0x2d
   141bc:	tst	r3, #2
   141c0:	strb	r6, [r4]
   141c4:	movne	r4, #119	; 0x77
   141c8:	moveq	r4, #45	; 0x2d
   141cc:	tst	r3, #512	; 0x200
   141d0:	strb	r5, [lr]
   141d4:	and	r3, r3, #1
   141d8:	strb	r4, [ip]
   141dc:	beq	14220 <__assert_fail@plt+0x2ad0>
   141e0:	cmp	r3, #0
   141e4:	movne	ip, #116	; 0x74
   141e8:	moveq	ip, #84	; 0x54
   141ec:	mov	r3, #0
   141f0:	strb	ip, [r0]
   141f4:	mov	r0, r1
   141f8:	strb	r3, [r2]
   141fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14200:	cmp	r9, #0
   14204:	movne	r9, #120	; 0x78
   14208:	moveq	r9, #45	; 0x2d
   1420c:	b	14174 <__assert_fail@plt+0x2a24>
   14210:	cmp	r6, #0
   14214:	movne	r6, #120	; 0x78
   14218:	moveq	r6, #45	; 0x2d
   1421c:	b	141b0 <__assert_fail@plt+0x2a60>
   14220:	cmp	r3, #0
   14224:	movne	ip, #120	; 0x78
   14228:	moveq	ip, #45	; 0x2d
   1422c:	b	141ec <__assert_fail@plt+0x2a9c>
   14230:	ldr	r1, [pc, #680]	; 144e0 <__assert_fail@plt+0x2d90>
   14234:	ldr	ip, [pc, #680]	; 144e4 <__assert_fail@plt+0x2d94>
   14238:	add	r1, pc, r1
   1423c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14240:	sub	sp, sp, #108	; 0x6c
   14244:	ldr	r8, [r1, ip]
   14248:	tst	r0, #2
   1424c:	strd	r2, [sp, #32]
   14250:	ldr	r1, [r8]
   14254:	addeq	r9, sp, #60	; 0x3c
   14258:	str	r1, [sp, #100]	; 0x64
   1425c:	ldrd	r2, [sp, #32]
   14260:	movne	r1, #32
   14264:	strbne	r1, [sp, #60]	; 0x3c
   14268:	addne	ip, sp, #61	; 0x3d
   1426c:	addne	r9, sp, #60	; 0x3c
   14270:	moveq	ip, r9
   14274:	mov	r1, #10
   14278:	mov	sl, #1
   1427c:	sub	lr, r1, #32
   14280:	lsl	r4, sl, r1
   14284:	lsl	r5, sl, lr
   14288:	rsb	lr, r1, #32
   1428c:	orr	r5, r5, sl, lsr lr
   14290:	cmp	r3, r5
   14294:	cmpeq	r2, r4
   14298:	bcc	14454 <__assert_fail@plt+0x2d04>
   1429c:	add	r1, r1, #10
   142a0:	cmp	r1, #70	; 0x46
   142a4:	bne	1427c <__assert_fail@plt+0x2b2c>
   142a8:	mov	lr, ip
   142ac:	strd	r2, [sp, #32]
   142b0:	mov	r4, r2
   142b4:	tst	r0, #1
   142b8:	mov	r2, #69	; 0x45
   142bc:	bic	r5, r3, #-268435456	; 0xf0000000
   142c0:	lsr	sl, r3, #28
   142c4:	strb	r2, [lr], #1
   142c8:	bne	1443c <__assert_fail@plt+0x2cec>
   142cc:	orrs	r3, r4, r5
   142d0:	mov	r3, #0
   142d4:	strb	r3, [lr]
   142d8:	beq	1447c <__assert_fail@plt+0x2d2c>
   142dc:	sub	r2, r1, #20
   142e0:	rsb	r0, r2, #32
   142e4:	lsr	r3, r4, r2
   142e8:	sub	r1, r1, #52	; 0x34
   142ec:	orr	r3, r3, r5, lsl r0
   142f0:	orr	r3, r3, r5, lsr r1
   142f4:	lsr	r2, r5, r2
   142f8:	adds	r6, r3, #50	; 0x32
   142fc:	adc	r7, r2, #0
   14300:	mov	r3, #0
   14304:	mov	r2, #100	; 0x64
   14308:	mov	r0, r6
   1430c:	mov	r1, r7
   14310:	bl	154e8 <__assert_fail@plt+0x3d98>
   14314:	cmp	r1, #0
   14318:	cmpeq	r0, #10
   1431c:	mov	r2, r0
   14320:	mov	r3, r1
   14324:	addeq	sl, sl, #1
   14328:	beq	1447c <__assert_fail@plt+0x2d2c>
   1432c:	cmp	r7, #0
   14330:	cmpeq	r6, #99	; 0x63
   14334:	strd	r2, [sp, #32]
   14338:	bls	1447c <__assert_fail@plt+0x2d2c>
   1433c:	bl	116a8 <localeconv@plt>
   14340:	ldrd	r2, [sp, #32]
   14344:	cmp	r0, #0
   14348:	beq	144c4 <__assert_fail@plt+0x2d74>
   1434c:	ldr	r0, [r0]
   14350:	cmp	r0, #0
   14354:	beq	144d0 <__assert_fail@plt+0x2d80>
   14358:	ldrsb	r1, [r0]
   1435c:	cmp	r1, #0
   14360:	ldreq	r0, [pc, #384]	; 144e8 <__assert_fail@plt+0x2d98>
   14364:	addeq	r0, pc, r0
   14368:	ldr	r1, [pc, #380]	; 144ec <__assert_fail@plt+0x2d9c>
   1436c:	strd	r2, [sp, #16]
   14370:	add	r1, pc, r1
   14374:	add	r4, sp, #68	; 0x44
   14378:	mov	r3, #32
   1437c:	str	r0, [sp, #8]
   14380:	str	r1, [sp]
   14384:	str	r9, [sp, #24]
   14388:	str	sl, [sp, #4]
   1438c:	mov	r0, r4
   14390:	mov	r1, r3
   14394:	mov	r2, #1
   14398:	bl	1172c <__snprintf_chk@plt>
   1439c:	b	144a4 <__assert_fail@plt+0x2d54>
   143a0:	ldr	r4, [pc, #328]	; 144f0 <__assert_fail@plt+0x2da0>
   143a4:	mvn	sl, #0
   143a8:	ldr	fp, [pc, #324]	; 144f4 <__assert_fail@plt+0x2da4>
   143ac:	umull	r2, r3, lr, r4
   143b0:	sub	r4, r1, #42	; 0x2a
   143b4:	strd	r2, [sp, #40]	; 0x28
   143b8:	ldr	r3, [sp, #44]	; 0x2c
   143bc:	lsl	r2, sl, lr
   143c0:	lsr	r3, r3, #3
   143c4:	str	r3, [sp, #52]	; 0x34
   143c8:	ldr	r3, [sp, #32]
   143cc:	str	r4, [sp, #48]	; 0x30
   143d0:	orr	r4, r2, sl, lsl r4
   143d4:	lsr	r2, r3, lr
   143d8:	mov	r3, r2
   143dc:	ldr	r2, [sp, #52]	; 0x34
   143e0:	add	fp, pc, fp
   143e4:	str	r4, [sp, #40]	; 0x28
   143e8:	ldrsb	fp, [fp, r2]
   143ec:	mov	r2, r3
   143f0:	ldr	r3, [sp, #36]	; 0x24
   143f4:	rsb	r5, lr, #32
   143f8:	ldr	r4, [sp, #40]	; 0x28
   143fc:	orr	r2, r2, r3, lsl r5
   14400:	orr	r4, r4, sl, lsr r5
   14404:	ldr	r3, [sp, #32]
   14408:	str	r4, [sp, #40]	; 0x28
   1440c:	cmp	r0, #0
   14410:	bic	r4, r3, sl, lsl lr
   14414:	ldr	r0, [sp, #36]	; 0x24
   14418:	ldr	r3, [sp, #48]	; 0x30
   1441c:	mov	lr, ip
   14420:	orr	sl, r2, r0, lsr r3
   14424:	ldr	r3, [sp, #40]	; 0x28
   14428:	strb	fp, [lr], #1
   1442c:	bic	r5, r0, r3
   14430:	beq	142cc <__assert_fail@plt+0x2b7c>
   14434:	cmp	fp, #66	; 0x42
   14438:	beq	142cc <__assert_fail@plt+0x2b7c>
   1443c:	mov	r3, #105	; 0x69
   14440:	strb	r3, [ip, #1]
   14444:	mov	r3, #66	; 0x42
   14448:	add	lr, ip, #3
   1444c:	strb	r3, [ip, #2]
   14450:	b	142cc <__assert_fail@plt+0x2b7c>
   14454:	subs	lr, r1, #10
   14458:	strd	r2, [sp, #32]
   1445c:	and	r0, r0, #1
   14460:	bne	143a0 <__assert_fail@plt+0x2c50>
   14464:	ldr	sl, [sp, #32]
   14468:	cmp	r0, #0
   1446c:	movne	r0, lr
   14470:	mov	r3, #66	; 0x42
   14474:	strb	r0, [ip, #1]
   14478:	strb	r3, [ip]
   1447c:	ldr	r2, [pc, #116]	; 144f8 <__assert_fail@plt+0x2da8>
   14480:	add	r4, sp, #68	; 0x44
   14484:	add	r2, pc, r2
   14488:	mov	r3, #32
   1448c:	stm	sp, {r2, sl}
   14490:	str	r9, [sp, #8]
   14494:	mov	r0, r4
   14498:	mov	r1, r3
   1449c:	mov	r2, #1
   144a0:	bl	1172c <__snprintf_chk@plt>
   144a4:	mov	r0, r4
   144a8:	bl	114a4 <strdup@plt>
   144ac:	ldr	r2, [sp, #100]	; 0x64
   144b0:	ldr	r3, [r8]
   144b4:	cmp	r2, r3
   144b8:	bne	144dc <__assert_fail@plt+0x2d8c>
   144bc:	add	sp, sp, #108	; 0x6c
   144c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c4:	ldr	r0, [pc, #48]	; 144fc <__assert_fail@plt+0x2dac>
   144c8:	add	r0, pc, r0
   144cc:	b	14368 <__assert_fail@plt+0x2c18>
   144d0:	ldr	r0, [pc, #40]	; 14500 <__assert_fail@plt+0x2db0>
   144d4:	add	r0, pc, r0
   144d8:	b	14368 <__assert_fail@plt+0x2c18>
   144dc:	bl	114b0 <__stack_chk_fail@plt>
   144e0:	andeq	r2, r1, ip, asr ip
   144e4:	andeq	r0, r0, r8, asr r1
   144e8:	andeq	r1, r0, r0, asr #12
   144ec:	ldrdeq	r1, [r0], -r4
   144f0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   144f4:	andeq	r1, r0, ip, asr ip
   144f8:	andeq	r1, r0, ip, asr #23
   144fc:	ldrdeq	r1, [r0], -ip
   14500:	ldrdeq	r1, [r0], -r0
   14504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14508:	subs	r4, r0, #0
   1450c:	beq	145dc <__assert_fail@plt+0x2e8c>
   14510:	ldrsb	lr, [r4]
   14514:	cmp	lr, #0
   14518:	beq	145dc <__assert_fail@plt+0x2e8c>
   1451c:	cmp	r1, #0
   14520:	clz	ip, r2
   14524:	lsr	ip, ip, #5
   14528:	moveq	r0, #1
   1452c:	movne	r0, ip
   14530:	cmp	r3, #0
   14534:	moveq	r0, #1
   14538:	cmp	r0, #0
   1453c:	bne	145dc <__assert_fail@plt+0x2e8c>
   14540:	mov	r8, r3
   14544:	mov	r7, r2
   14548:	mov	r9, r1
   1454c:	mov	r5, r0
   14550:	b	145ac <__assert_fail@plt+0x2e5c>
   14554:	cmp	r3, #0
   14558:	bne	14598 <__assert_fail@plt+0x2e48>
   1455c:	cmn	r4, #1
   14560:	add	r6, r4, #1
   14564:	beq	145e4 <__assert_fail@plt+0x2e94>
   14568:	cmp	r0, r6
   1456c:	bcs	145dc <__assert_fail@plt+0x2e8c>
   14570:	sub	r1, r6, r0
   14574:	blx	r8
   14578:	cmn	r0, #1
   1457c:	beq	145dc <__assert_fail@plt+0x2e8c>
   14580:	str	r0, [r9, r5, lsl #2]
   14584:	ldrsb	r3, [r6]
   14588:	add	r5, r5, #1
   1458c:	cmp	r3, #0
   14590:	beq	145e4 <__assert_fail@plt+0x2e94>
   14594:	mov	r0, #0
   14598:	cmn	r4, #1
   1459c:	beq	145e4 <__assert_fail@plt+0x2e94>
   145a0:	ldrsb	lr, [r4, #1]!
   145a4:	cmp	lr, #0
   145a8:	beq	145e4 <__assert_fail@plt+0x2e94>
   145ac:	cmp	r7, r5
   145b0:	mov	r6, r4
   145b4:	bls	145ec <__assert_fail@plt+0x2e9c>
   145b8:	cmp	r0, #0
   145bc:	moveq	r0, r4
   145c0:	cmp	lr, #44	; 0x2c
   145c4:	ldrsb	r3, [r4, #1]
   145c8:	bne	14554 <__assert_fail@plt+0x2e04>
   145cc:	cmp	r3, #0
   145d0:	beq	1455c <__assert_fail@plt+0x2e0c>
   145d4:	cmp	r0, r6
   145d8:	bcc	14570 <__assert_fail@plt+0x2e20>
   145dc:	mvn	r0, #0
   145e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145e4:	mov	r0, r5
   145e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145ec:	mvn	r0, #1
   145f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145f4:	cmp	r0, #0
   145f8:	beq	14664 <__assert_fail@plt+0x2f14>
   145fc:	push	{r4, lr}
   14600:	mov	r4, r3
   14604:	cmp	r4, #0
   14608:	ldrsb	ip, [r0]
   1460c:	clz	r3, ip
   14610:	lsr	r3, r3, #5
   14614:	moveq	r3, #1
   14618:	cmp	r3, #0
   1461c:	bne	1465c <__assert_fail@plt+0x2f0c>
   14620:	ldr	lr, [r4]
   14624:	cmp	lr, r2
   14628:	bhi	1465c <__assert_fail@plt+0x2f0c>
   1462c:	cmp	ip, #43	; 0x2b
   14630:	strne	r3, [r4]
   14634:	addeq	r0, r0, #1
   14638:	ldr	r3, [sp, #8]
   1463c:	addeq	r1, r1, lr, lsl #2
   14640:	subeq	r2, r2, lr
   14644:	bl	14504 <__assert_fail@plt+0x2db4>
   14648:	cmp	r0, #0
   1464c:	ldrgt	r3, [r4]
   14650:	addgt	r3, r3, r0
   14654:	strgt	r3, [r4]
   14658:	pop	{r4, pc}
   1465c:	mvn	r0, #0
   14660:	pop	{r4, pc}
   14664:	mvn	r0, #0
   14668:	bx	lr
   1466c:	cmp	r2, #0
   14670:	clz	r3, r1
   14674:	lsr	r3, r3, #5
   14678:	moveq	r3, #1
   1467c:	cmp	r0, #0
   14680:	moveq	r3, #1
   14684:	cmp	r3, #0
   14688:	bne	14754 <__assert_fail@plt+0x3004>
   1468c:	push	{r4, r5, r6, r7, r8, lr}
   14690:	mov	r6, r2
   14694:	mov	r2, r3
   14698:	ldrsb	r3, [r0]
   1469c:	mov	r8, r1
   146a0:	mov	r4, r0
   146a4:	mov	r7, #1
   146a8:	cmp	r3, #0
   146ac:	beq	1471c <__assert_fail@plt+0x2fcc>
   146b0:	cmp	r2, #0
   146b4:	moveq	r2, r4
   146b8:	cmp	r3, #44	; 0x2c
   146bc:	mov	r5, r4
   146c0:	ldrsb	r3, [r4, #1]!
   146c4:	beq	14724 <__assert_fail@plt+0x2fd4>
   146c8:	cmp	r3, #0
   146cc:	bne	14744 <__assert_fail@plt+0x2ff4>
   146d0:	mov	r5, r4
   146d4:	cmp	r2, r5
   146d8:	sub	r1, r5, r2
   146dc:	mov	r0, r2
   146e0:	bcs	1473c <__assert_fail@plt+0x2fec>
   146e4:	blx	r6
   146e8:	mov	r2, r4
   146ec:	cmp	r0, #0
   146f0:	and	r1, r0, #7
   146f4:	poplt	{r4, r5, r6, r7, r8, pc}
   146f8:	ldrb	r3, [r8, r0, asr #3]
   146fc:	orr	r3, r3, r7, lsl r1
   14700:	strb	r3, [r8, r0, asr #3]
   14704:	ldrsb	r3, [r5]
   14708:	cmp	r3, #0
   1470c:	beq	1471c <__assert_fail@plt+0x2fcc>
   14710:	ldrsb	r3, [r4]
   14714:	cmp	r3, #0
   14718:	bne	146b8 <__assert_fail@plt+0x2f68>
   1471c:	mov	r0, #0
   14720:	pop	{r4, r5, r6, r7, r8, pc}
   14724:	cmp	r3, #0
   14728:	moveq	r5, r4
   1472c:	cmp	r2, r5
   14730:	sub	r1, r5, r2
   14734:	mov	r0, r2
   14738:	bcc	146e4 <__assert_fail@plt+0x2f94>
   1473c:	mvn	r0, #0
   14740:	pop	{r4, r5, r6, r7, r8, pc}
   14744:	adds	r4, r5, #1
   14748:	bne	146a8 <__assert_fail@plt+0x2f58>
   1474c:	mov	r0, #0
   14750:	pop	{r4, r5, r6, r7, r8, pc}
   14754:	mvn	r0, #21
   14758:	bx	lr
   1475c:	cmp	r2, #0
   14760:	clz	r3, r1
   14764:	lsr	r3, r3, #5
   14768:	moveq	r3, #1
   1476c:	cmp	r0, #0
   14770:	moveq	r3, #1
   14774:	cmp	r3, #0
   14778:	bne	1483c <__assert_fail@plt+0x30ec>
   1477c:	push	{r4, r5, r6, r7, r8, lr}
   14780:	mov	r6, r2
   14784:	mov	r2, r3
   14788:	ldrsb	r3, [r0]
   1478c:	mov	r7, r1
   14790:	mov	r4, r0
   14794:	cmp	r3, #0
   14798:	beq	14804 <__assert_fail@plt+0x30b4>
   1479c:	cmp	r2, #0
   147a0:	moveq	r2, r4
   147a4:	cmp	r3, #44	; 0x2c
   147a8:	mov	r5, r4
   147ac:	ldrsb	r3, [r4, #1]!
   147b0:	beq	1480c <__assert_fail@plt+0x30bc>
   147b4:	cmp	r3, #0
   147b8:	bne	1482c <__assert_fail@plt+0x30dc>
   147bc:	mov	r5, r4
   147c0:	cmp	r2, r5
   147c4:	sub	r1, r5, r2
   147c8:	mov	r0, r2
   147cc:	bcs	14824 <__assert_fail@plt+0x30d4>
   147d0:	blx	r6
   147d4:	mov	r2, r4
   147d8:	cmp	r0, #0
   147dc:	poplt	{r4, r5, r6, r7, r8, pc}
   147e0:	ldr	r3, [r7]
   147e4:	orr	r3, r3, r0
   147e8:	str	r3, [r7]
   147ec:	ldrsb	r3, [r5]
   147f0:	cmp	r3, #0
   147f4:	beq	14804 <__assert_fail@plt+0x30b4>
   147f8:	ldrsb	r3, [r4]
   147fc:	cmp	r3, #0
   14800:	bne	147a4 <__assert_fail@plt+0x3054>
   14804:	mov	r0, #0
   14808:	pop	{r4, r5, r6, r7, r8, pc}
   1480c:	cmp	r3, #0
   14810:	moveq	r5, r4
   14814:	cmp	r2, r5
   14818:	sub	r1, r5, r2
   1481c:	mov	r0, r2
   14820:	bcc	147d0 <__assert_fail@plt+0x3080>
   14824:	mvn	r0, #0
   14828:	pop	{r4, r5, r6, r7, r8, pc}
   1482c:	adds	r4, r5, #1
   14830:	bne	14794 <__assert_fail@plt+0x3044>
   14834:	mov	r0, #0
   14838:	pop	{r4, r5, r6, r7, r8, pc}
   1483c:	mvn	r0, #21
   14840:	bx	lr
   14844:	ldr	ip, [pc, #396]	; 149d8 <__assert_fail@plt+0x3288>
   14848:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1484c:	add	ip, pc, ip
   14850:	ldr	lr, [pc, #388]	; 149dc <__assert_fail@plt+0x328c>
   14854:	sub	sp, sp, #8
   14858:	mov	r9, r3
   1485c:	ldr	r5, [ip, lr]
   14860:	mov	sl, #0
   14864:	subs	r4, r0, #0
   14868:	ldr	r3, [r5]
   1486c:	mov	r7, r1
   14870:	str	sl, [sp]
   14874:	mov	r1, ip
   14878:	str	r3, [sp, #4]
   1487c:	beq	148f0 <__assert_fail@plt+0x31a0>
   14880:	str	r9, [r7]
   14884:	str	r9, [r2]
   14888:	mov	r6, r2
   1488c:	bl	115c4 <__errno_location@plt>
   14890:	str	sl, [r0]
   14894:	ldrsb	r3, [r4]
   14898:	mov	r8, r0
   1489c:	cmp	r3, #58	; 0x3a
   148a0:	beq	1490c <__assert_fail@plt+0x31bc>
   148a4:	mov	sl, sp
   148a8:	mov	r1, sl
   148ac:	mov	r2, #10
   148b0:	mov	r0, r4
   148b4:	bl	113d8 <strtol@plt>
   148b8:	str	r0, [r7]
   148bc:	str	r0, [r6]
   148c0:	ldr	r0, [r8]
   148c4:	cmp	r0, #0
   148c8:	bne	1495c <__assert_fail@plt+0x320c>
   148cc:	ldr	r2, [sp]
   148d0:	cmp	r2, #0
   148d4:	cmpne	r2, r4
   148d8:	beq	1495c <__assert_fail@plt+0x320c>
   148dc:	ldrsb	r3, [r2]
   148e0:	cmp	r3, #58	; 0x3a
   148e4:	beq	14964 <__assert_fail@plt+0x3214>
   148e8:	cmp	r3, #45	; 0x2d
   148ec:	beq	14974 <__assert_fail@plt+0x3224>
   148f0:	mov	r0, #0
   148f4:	ldr	r2, [sp, #4]
   148f8:	ldr	r3, [r5]
   148fc:	cmp	r2, r3
   14900:	bne	149d4 <__assert_fail@plt+0x3284>
   14904:	add	sp, sp, #8
   14908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1490c:	add	r4, r4, #1
   14910:	mov	r0, r4
   14914:	mov	r2, #10
   14918:	mov	r1, sp
   1491c:	bl	113d8 <strtol@plt>
   14920:	str	r0, [r6]
   14924:	ldr	r3, [r8]
   14928:	cmp	r3, #0
   1492c:	bne	1495c <__assert_fail@plt+0x320c>
   14930:	ldr	r3, [sp]
   14934:	cmp	r3, #0
   14938:	beq	1495c <__assert_fail@plt+0x320c>
   1493c:	ldrsb	r2, [r3]
   14940:	sub	r3, r3, r4
   14944:	clz	r3, r3
   14948:	cmp	r2, #0
   1494c:	lsr	r3, r3, #5
   14950:	movne	r3, #1
   14954:	cmp	r3, #0
   14958:	beq	148f0 <__assert_fail@plt+0x31a0>
   1495c:	mvn	r0, #0
   14960:	b	148f4 <__assert_fail@plt+0x31a4>
   14964:	ldrsb	r3, [r2, #1]
   14968:	cmp	r3, #0
   1496c:	streq	r9, [r6]
   14970:	beq	148f4 <__assert_fail@plt+0x31a4>
   14974:	mov	r3, #0
   14978:	add	r4, r2, #1
   1497c:	str	r3, [r8]
   14980:	mov	r1, sl
   14984:	mov	r0, r4
   14988:	mov	r2, #10
   1498c:	str	r3, [sp]
   14990:	bl	113d8 <strtol@plt>
   14994:	str	r0, [r6]
   14998:	ldr	r3, [r8]
   1499c:	cmp	r3, #0
   149a0:	bne	1495c <__assert_fail@plt+0x320c>
   149a4:	ldr	r2, [sp]
   149a8:	cmp	r2, #0
   149ac:	beq	1495c <__assert_fail@plt+0x320c>
   149b0:	ldrsb	r3, [r2]
   149b4:	sub	r2, r2, r4
   149b8:	clz	r2, r2
   149bc:	cmp	r3, #0
   149c0:	lsr	r2, r2, #5
   149c4:	movne	r2, #1
   149c8:	cmp	r2, #0
   149cc:	beq	148f0 <__assert_fail@plt+0x31a0>
   149d0:	b	1495c <__assert_fail@plt+0x320c>
   149d4:	bl	114b0 <__stack_chk_fail@plt>
   149d8:	andeq	r2, r1, r8, asr #12
   149dc:	andeq	r0, r0, r8, asr r1
   149e0:	ldr	r3, [pc, #244]	; 14adc <__assert_fail@plt+0x338c>
   149e4:	ldr	r2, [pc, #244]	; 14ae0 <__assert_fail@plt+0x3390>
   149e8:	add	r3, pc, r3
   149ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   149f0:	sub	sp, sp, #20
   149f4:	ldr	r9, [r3, r2]
   149f8:	cmp	r0, #0
   149fc:	cmpne	r1, #0
   14a00:	ldr	r3, [r9]
   14a04:	str	r3, [sp, #12]
   14a08:	beq	14ad0 <__assert_fail@plt+0x3380>
   14a0c:	mov	r4, r1
   14a10:	add	r8, sp, #4
   14a14:	add	r7, sp, #8
   14a18:	b	14a58 <__assert_fail@plt+0x3308>
   14a1c:	cmp	r4, r3
   14a20:	bne	14ad0 <__assert_fail@plt+0x3380>
   14a24:	mov	r2, r4
   14a28:	mov	r1, r6
   14a2c:	mov	r0, r5
   14a30:	bl	116fc <strncmp@plt>
   14a34:	cmp	r0, #0
   14a38:	bne	14ad0 <__assert_fail@plt+0x3380>
   14a3c:	adds	r0, r5, r4
   14a40:	moveq	r3, #0
   14a44:	movne	r3, #1
   14a48:	adds	r4, r6, r4
   14a4c:	moveq	r3, #0
   14a50:	cmp	r3, #0
   14a54:	beq	14ad0 <__assert_fail@plt+0x3380>
   14a58:	mov	r1, r8
   14a5c:	bl	12e60 <__assert_fail@plt+0x1710>
   14a60:	mov	r1, r7
   14a64:	mov	r5, r0
   14a68:	mov	r0, r4
   14a6c:	bl	12e60 <__assert_fail@plt+0x1710>
   14a70:	ldr	r4, [sp, #4]
   14a74:	ldr	r3, [sp, #8]
   14a78:	mov	r6, r0
   14a7c:	adds	r0, r4, r3
   14a80:	beq	14ab4 <__assert_fail@plt+0x3364>
   14a84:	cmp	r0, #1
   14a88:	bne	14a1c <__assert_fail@plt+0x32cc>
   14a8c:	cmp	r5, #0
   14a90:	beq	14aa0 <__assert_fail@plt+0x3350>
   14a94:	ldrsb	r2, [r5]
   14a98:	cmp	r2, #47	; 0x2f
   14a9c:	beq	14ab8 <__assert_fail@plt+0x3368>
   14aa0:	cmp	r6, #0
   14aa4:	beq	14a1c <__assert_fail@plt+0x32cc>
   14aa8:	ldrsb	r2, [r6]
   14aac:	cmp	r2, #47	; 0x2f
   14ab0:	bne	14a1c <__assert_fail@plt+0x32cc>
   14ab4:	mov	r0, #1
   14ab8:	ldr	r2, [sp, #12]
   14abc:	ldr	r3, [r9]
   14ac0:	cmp	r2, r3
   14ac4:	bne	14ad8 <__assert_fail@plt+0x3388>
   14ac8:	add	sp, sp, #20
   14acc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ad0:	mov	r0, #0
   14ad4:	b	14ab8 <__assert_fail@plt+0x3368>
   14ad8:	bl	114b0 <__stack_chk_fail@plt>
   14adc:	andeq	r2, r1, ip, lsr #9
   14ae0:	andeq	r0, r0, r8, asr r1
   14ae4:	orrs	r3, r0, r1
   14ae8:	beq	14b64 <__assert_fail@plt+0x3414>
   14aec:	cmp	r0, #0
   14af0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14af4:	mov	r4, r1
   14af8:	mov	r5, r0
   14afc:	beq	14b70 <__assert_fail@plt+0x3420>
   14b00:	cmp	r1, #0
   14b04:	beq	14b80 <__assert_fail@plt+0x3430>
   14b08:	mov	r6, r2
   14b0c:	bl	11594 <strlen@plt>
   14b10:	mvn	r3, r0
   14b14:	cmp	r6, r3
   14b18:	mov	r7, r0
   14b1c:	movhi	r8, #0
   14b20:	bhi	14b5c <__assert_fail@plt+0x340c>
   14b24:	add	r9, r6, r0
   14b28:	add	r0, r9, #1
   14b2c:	bl	1151c <malloc@plt>
   14b30:	subs	r8, r0, #0
   14b34:	beq	14b5c <__assert_fail@plt+0x340c>
   14b38:	mov	r1, r5
   14b3c:	mov	r2, r7
   14b40:	bl	11474 <memcpy@plt>
   14b44:	mov	r2, r6
   14b48:	mov	r1, r4
   14b4c:	add	r0, r8, r7
   14b50:	bl	11474 <memcpy@plt>
   14b54:	mov	r3, #0
   14b58:	strb	r3, [r8, r9]
   14b5c:	mov	r0, r8
   14b60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b64:	ldr	r0, [pc, #28]	; 14b88 <__assert_fail@plt+0x3438>
   14b68:	add	r0, pc, r0
   14b6c:	b	114a4 <strdup@plt>
   14b70:	mov	r0, r4
   14b74:	mov	r1, r2
   14b78:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b7c:	b	1145c <strndup@plt>
   14b80:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b84:	b	114a4 <strdup@plt>
   14b88:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   14b8c:	push	{r4, r5, r6, lr}
   14b90:	subs	r4, r1, #0
   14b94:	mov	r5, r0
   14b98:	moveq	r2, r4
   14b9c:	beq	14bac <__assert_fail@plt+0x345c>
   14ba0:	mov	r0, r4
   14ba4:	bl	11594 <strlen@plt>
   14ba8:	mov	r2, r0
   14bac:	mov	r1, r4
   14bb0:	mov	r0, r5
   14bb4:	pop	{r4, r5, r6, lr}
   14bb8:	b	14ae4 <__assert_fail@plt+0x3394>
   14bbc:	push	{r1, r2, r3}
   14bc0:	ldr	r1, [pc, #132]	; 14c4c <__assert_fail@plt+0x34fc>
   14bc4:	ldr	r3, [pc, #132]	; 14c50 <__assert_fail@plt+0x3500>
   14bc8:	add	r1, pc, r1
   14bcc:	push	{r4, r5, lr}
   14bd0:	mov	r5, r0
   14bd4:	ldr	r4, [r1, r3]
   14bd8:	sub	sp, sp, #16
   14bdc:	add	ip, sp, #32
   14be0:	ldr	r0, [r4]
   14be4:	ldr	r2, [sp, #28]
   14be8:	str	r0, [sp, #12]
   14bec:	mov	r3, ip
   14bf0:	add	r0, sp, #8
   14bf4:	mov	r1, #1
   14bf8:	str	ip, [sp, #4]
   14bfc:	bl	115f4 <__vasprintf_chk@plt>
   14c00:	subs	r2, r0, #0
   14c04:	movlt	r5, #0
   14c08:	blt	14c24 <__assert_fail@plt+0x34d4>
   14c0c:	mov	r0, r5
   14c10:	ldr	r1, [sp, #8]
   14c14:	bl	14ae4 <__assert_fail@plt+0x3394>
   14c18:	mov	r5, r0
   14c1c:	ldr	r0, [sp, #8]
   14c20:	bl	11420 <free@plt>
   14c24:	ldr	r2, [sp, #12]
   14c28:	ldr	r3, [r4]
   14c2c:	mov	r0, r5
   14c30:	cmp	r2, r3
   14c34:	bne	14c48 <__assert_fail@plt+0x34f8>
   14c38:	add	sp, sp, #16
   14c3c:	pop	{r4, r5, lr}
   14c40:	add	sp, sp, #12
   14c44:	bx	lr
   14c48:	bl	114b0 <__stack_chk_fail@plt>
   14c4c:	andeq	r2, r1, ip, asr #5
   14c50:	andeq	r0, r0, r8, asr r1
   14c54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c58:	mov	r6, r0
   14c5c:	ldr	r0, [pc, #348]	; 14dc0 <__assert_fail@plt+0x3670>
   14c60:	ldr	ip, [pc, #348]	; 14dc4 <__assert_fail@plt+0x3674>
   14c64:	add	r0, pc, r0
   14c68:	ldr	r5, [r6]
   14c6c:	ldr	r8, [r0, ip]
   14c70:	sub	sp, sp, #8
   14c74:	ldrsb	r4, [r5]
   14c78:	mov	r9, r2
   14c7c:	ldr	r2, [r8]
   14c80:	cmp	r4, #0
   14c84:	mov	r7, r1
   14c88:	str	r2, [sp, #4]
   14c8c:	mov	r1, r0
   14c90:	beq	14d40 <__assert_fail@plt+0x35f0>
   14c94:	mov	r0, r5
   14c98:	mov	r1, r9
   14c9c:	mov	sl, r3
   14ca0:	bl	11744 <strspn@plt>
   14ca4:	add	r4, r5, r0
   14ca8:	ldrsb	r5, [r5, r0]
   14cac:	cmp	r5, #0
   14cb0:	beq	14da8 <__assert_fail@plt+0x3658>
   14cb4:	cmp	sl, #0
   14cb8:	beq	14d5c <__assert_fail@plt+0x360c>
   14cbc:	ldr	r0, [pc, #260]	; 14dc8 <__assert_fail@plt+0x3678>
   14cc0:	mov	r1, r5
   14cc4:	add	r0, pc, r0
   14cc8:	bl	115a0 <strchr@plt>
   14ccc:	cmp	r0, #0
   14cd0:	beq	14d78 <__assert_fail@plt+0x3628>
   14cd4:	add	sl, r4, #1
   14cd8:	mov	r3, #0
   14cdc:	mov	r0, sl
   14ce0:	mov	r1, sp
   14ce4:	strb	r5, [sp]
   14ce8:	strb	r3, [sp, #1]
   14cec:	bl	12f00 <__assert_fail@plt+0x17b0>
   14cf0:	add	r3, r4, r0
   14cf4:	str	r0, [r7]
   14cf8:	ldrsb	r3, [r3, #1]
   14cfc:	subs	r5, r5, r3
   14d00:	movne	r5, #1
   14d04:	cmp	r3, #0
   14d08:	moveq	r5, #1
   14d0c:	cmp	r5, #0
   14d10:	bne	14da8 <__assert_fail@plt+0x3658>
   14d14:	add	r0, r0, #2
   14d18:	add	r5, r4, r0
   14d1c:	ldrsb	r1, [r4, r0]
   14d20:	cmp	r1, #0
   14d24:	beq	14d38 <__assert_fail@plt+0x35e8>
   14d28:	mov	r0, r9
   14d2c:	bl	115a0 <strchr@plt>
   14d30:	cmp	r0, #0
   14d34:	beq	14da8 <__assert_fail@plt+0x3658>
   14d38:	mov	r4, sl
   14d3c:	str	r5, [r6]
   14d40:	ldr	r2, [sp, #4]
   14d44:	ldr	r3, [r8]
   14d48:	mov	r0, r4
   14d4c:	cmp	r2, r3
   14d50:	bne	14dbc <__assert_fail@plt+0x366c>
   14d54:	add	sp, sp, #8
   14d58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d5c:	mov	r1, r9
   14d60:	mov	r0, r4
   14d64:	bl	113e4 <strcspn@plt>
   14d68:	add	r3, r4, r0
   14d6c:	str	r0, [r7]
   14d70:	str	r3, [r6]
   14d74:	b	14d40 <__assert_fail@plt+0x35f0>
   14d78:	mov	r1, r9
   14d7c:	mov	r0, r4
   14d80:	bl	12f00 <__assert_fail@plt+0x17b0>
   14d84:	str	r0, [r7]
   14d88:	ldrsb	r1, [r4, r0]
   14d8c:	add	r5, r4, r0
   14d90:	cmp	r1, #0
   14d94:	beq	14db4 <__assert_fail@plt+0x3664>
   14d98:	mov	r0, r9
   14d9c:	bl	115a0 <strchr@plt>
   14da0:	cmp	r0, #0
   14da4:	bne	14db4 <__assert_fail@plt+0x3664>
   14da8:	str	r4, [r6]
   14dac:	mov	r4, #0
   14db0:	b	14d40 <__assert_fail@plt+0x35f0>
   14db4:	str	r5, [r6]
   14db8:	b	14d40 <__assert_fail@plt+0x35f0>
   14dbc:	bl	114b0 <__stack_chk_fail@plt>
   14dc0:	andeq	r2, r1, r0, lsr r2
   14dc4:	andeq	r0, r0, r8, asr r1
   14dc8:	muleq	r0, r4, r3
   14dcc:	push	{r4, lr}
   14dd0:	mov	r4, r0
   14dd4:	b	14de0 <__assert_fail@plt+0x3690>
   14dd8:	cmp	r0, #10
   14ddc:	beq	14df8 <__assert_fail@plt+0x36a8>
   14de0:	mov	r0, r4
   14de4:	bl	1160c <fgetc@plt>
   14de8:	cmn	r0, #1
   14dec:	bne	14dd8 <__assert_fail@plt+0x3688>
   14df0:	mov	r0, #1
   14df4:	pop	{r4, pc}
   14df8:	mov	r0, #0
   14dfc:	pop	{r4, pc}
   14e00:	ldr	r2, [pc, #400]	; 14f98 <__assert_fail@plt+0x3848>
   14e04:	ldr	r3, [pc, #400]	; 14f9c <__assert_fail@plt+0x384c>
   14e08:	add	r2, pc, r2
   14e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e10:	sub	sp, sp, #8192	; 0x2000
   14e14:	ldr	r3, [r2, r3]
   14e18:	ldr	ip, [pc, #384]	; 14fa0 <__assert_fail@plt+0x3850>
   14e1c:	sub	sp, sp, #44	; 0x2c
   14e20:	mov	lr, r3
   14e24:	add	ip, pc, ip
   14e28:	str	r1, [sp, #8]
   14e2c:	ldr	lr, [lr]
   14e30:	str	ip, [sp]
   14e34:	add	ip, sp, #8192	; 0x2000
   14e38:	add	ip, ip, #36	; 0x24
   14e3c:	add	r7, sp, #40	; 0x28
   14e40:	sub	r6, r7, #4
   14e44:	str	r3, [sp, #16]
   14e48:	mov	r3, #8192	; 0x2000
   14e4c:	str	r0, [sp, #4]
   14e50:	mov	r1, r3
   14e54:	str	lr, [ip]
   14e58:	mov	r0, r6
   14e5c:	mov	r2, #1
   14e60:	bl	1172c <__snprintf_chk@plt>
   14e64:	mov	r0, r6
   14e68:	mov	r1, #0
   14e6c:	bl	11510 <open64@plt>
   14e70:	subs	r8, r0, #0
   14e74:	movlt	r7, #0
   14e78:	blt	14f48 <__assert_fail@plt+0x37f8>
   14e7c:	mov	r1, #0
   14e80:	mov	sl, r1
   14e84:	mov	r2, #8192	; 0x2000
   14e88:	mov	r0, r6
   14e8c:	mov	r9, sl
   14e90:	mov	fp, sl
   14e94:	mov	r4, #8192	; 0x2000
   14e98:	mov	r5, r6
   14e9c:	bl	11600 <memset@plt>
   14ea0:	sub	r3, r7, #12
   14ea4:	str	r3, [sp, #20]
   14ea8:	mov	r2, r4
   14eac:	mov	r1, r5
   14eb0:	mov	r0, r8
   14eb4:	bl	11408 <read@plt>
   14eb8:	cmp	r0, #0
   14ebc:	ble	14ed8 <__assert_fail@plt+0x3788>
   14ec0:	subs	r4, r4, r0
   14ec4:	add	r5, r5, r0
   14ec8:	add	sl, sl, r0
   14ecc:	beq	14f04 <__assert_fail@plt+0x37b4>
   14ed0:	mov	r9, #0
   14ed4:	b	14ea8 <__assert_fail@plt+0x3758>
   14ed8:	beq	14ef8 <__assert_fail@plt+0x37a8>
   14edc:	bl	115c4 <__errno_location@plt>
   14ee0:	ldr	r3, [r0]
   14ee4:	cmp	r3, #4
   14ee8:	cmpne	r3, #11
   14eec:	bne	14ef8 <__assert_fail@plt+0x37a8>
   14ef0:	cmp	r9, #4
   14ef4:	ble	14f74 <__assert_fail@plt+0x3824>
   14ef8:	cmp	sl, #0
   14efc:	moveq	r7, sl
   14f00:	beq	14f40 <__assert_fail@plt+0x37f0>
   14f04:	mov	r1, r6
   14f08:	mov	r2, #0
   14f0c:	mov	ip, #32
   14f10:	ldrsb	r3, [r1], #1
   14f14:	add	r2, r2, #1
   14f18:	cmp	r3, #0
   14f1c:	strbeq	ip, [r1, #-1]
   14f20:	cmp	r2, sl
   14f24:	bcc	14f10 <__assert_fail@plt+0x37c0>
   14f28:	add	r7, r7, sl
   14f2c:	mov	r3, #0
   14f30:	mov	r0, r6
   14f34:	strb	r3, [r7, #-5]
   14f38:	bl	114a4 <strdup@plt>
   14f3c:	mov	r7, r0
   14f40:	mov	r0, r8
   14f44:	bl	11714 <close@plt>
   14f48:	add	r3, sp, #8192	; 0x2000
   14f4c:	add	r3, r3, #36	; 0x24
   14f50:	ldr	r2, [r3]
   14f54:	ldr	r3, [sp, #16]
   14f58:	mov	r0, r7
   14f5c:	ldr	r3, [r3]
   14f60:	cmp	r2, r3
   14f64:	bne	14f94 <__assert_fail@plt+0x3844>
   14f68:	add	sp, sp, #8192	; 0x2000
   14f6c:	add	sp, sp, #44	; 0x2c
   14f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f74:	ldr	r3, [pc, #40]	; 14fa4 <__assert_fail@plt+0x3854>
   14f78:	mov	r1, #0
   14f7c:	ldr	r0, [sp, #20]
   14f80:	add	r9, r9, #1
   14f84:	str	fp, [r7, #-12]
   14f88:	str	r3, [r7, #-8]
   14f8c:	bl	11438 <nanosleep@plt>
   14f90:	b	14ea8 <__assert_fail@plt+0x3758>
   14f94:	bl	114b0 <__stack_chk_fail@plt>
   14f98:	andeq	r2, r1, ip, lsl #1
   14f9c:	andeq	r0, r0, r8, asr r1
   14fa0:	andeq	r1, r0, r8, lsr r2
   14fa4:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   14fa8:	ldr	r1, [pc, #164]	; 15054 <__assert_fail@plt+0x3904>
   14fac:	ldr	r2, [pc, #164]	; 15058 <__assert_fail@plt+0x3908>
   14fb0:	add	r1, pc, r1
   14fb4:	push	{r4, r5, r6, lr}
   14fb8:	sub	sp, sp, #4096	; 0x1000
   14fbc:	ldr	r5, [r1, r2]
   14fc0:	sub	sp, sp, #16
   14fc4:	add	lr, sp, #4096	; 0x1000
   14fc8:	str	r0, [sp]
   14fcc:	add	lr, lr, #12
   14fd0:	ldr	ip, [r5]
   14fd4:	ldr	r3, [pc, #128]	; 1505c <__assert_fail@plt+0x390c>
   14fd8:	add	r6, sp, #12
   14fdc:	add	r3, pc, r3
   14fe0:	mov	r2, #4096	; 0x1000
   14fe4:	str	ip, [lr]
   14fe8:	mov	r0, r6
   14fec:	mov	r1, #1
   14ff0:	bl	115dc <__sprintf_chk@plt>
   14ff4:	mov	r0, #4
   14ff8:	bl	1151c <malloc@plt>
   14ffc:	subs	r4, r0, #0
   15000:	beq	15040 <__assert_fail@plt+0x38f0>
   15004:	mov	r0, r6
   15008:	bl	114f8 <opendir@plt>
   1500c:	cmp	r0, #0
   15010:	str	r0, [r4]
   15014:	beq	15040 <__assert_fail@plt+0x38f0>
   15018:	add	r3, sp, #4096	; 0x1000
   1501c:	add	r3, r3, #12
   15020:	ldr	r2, [r3]
   15024:	ldr	r3, [r5]
   15028:	mov	r0, r4
   1502c:	cmp	r2, r3
   15030:	bne	15050 <__assert_fail@plt+0x3900>
   15034:	add	sp, sp, #4096	; 0x1000
   15038:	add	sp, sp, #16
   1503c:	pop	{r4, r5, r6, pc}
   15040:	mov	r0, r4
   15044:	bl	11420 <free@plt>
   15048:	mov	r4, #0
   1504c:	b	15018 <__assert_fail@plt+0x38c8>
   15050:	bl	114b0 <__stack_chk_fail@plt>
   15054:	andeq	r1, r1, r4, ror #29
   15058:	andeq	r0, r0, r8, asr r1
   1505c:	andeq	r1, r0, ip, lsl #1
   15060:	push	{r4, lr}
   15064:	subs	r4, r0, #0
   15068:	beq	1507c <__assert_fail@plt+0x392c>
   1506c:	ldr	r0, [r4]
   15070:	cmp	r0, #0
   15074:	beq	1507c <__assert_fail@plt+0x392c>
   15078:	bl	11720 <closedir@plt>
   1507c:	mov	r0, r4
   15080:	pop	{r4, lr}
   15084:	b	11420 <free@plt>
   15088:	ldr	r3, [pc, #280]	; 151a8 <__assert_fail@plt+0x3a58>
   1508c:	ldr	r2, [pc, #280]	; 151ac <__assert_fail@plt+0x3a5c>
   15090:	add	r3, pc, r3
   15094:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15098:	cmp	r0, #0
   1509c:	ldr	r9, [r3, r2]
   150a0:	sub	sp, sp, #8
   150a4:	clz	sl, r1
   150a8:	ldr	r2, [r9]
   150ac:	lsr	sl, sl, #5
   150b0:	moveq	sl, #1
   150b4:	cmp	sl, #0
   150b8:	str	r2, [sp, #4]
   150bc:	bne	1519c <__assert_fail@plt+0x3a4c>
   150c0:	str	sl, [r1]
   150c4:	mov	r6, r0
   150c8:	mov	r5, r1
   150cc:	bl	115c4 <__errno_location@plt>
   150d0:	mov	r8, sl
   150d4:	mov	r7, sp
   150d8:	mov	r4, r0
   150dc:	str	sl, [r0]
   150e0:	b	150f0 <__assert_fail@plt+0x39a0>
   150e4:	ldr	r0, [r5]
   150e8:	cmp	r0, #0
   150ec:	bne	15194 <__assert_fail@plt+0x3a44>
   150f0:	ldr	r0, [r6]
   150f4:	bl	116b4 <readdir64@plt>
   150f8:	subs	sl, r0, #0
   150fc:	beq	15180 <__assert_fail@plt+0x3a30>
   15100:	bl	11570 <__ctype_b_loc@plt>
   15104:	ldrb	r3, [sl, #19]
   15108:	lsl	r3, r3, #1
   1510c:	ldr	r2, [r0]
   15110:	ldrh	r3, [r2, r3]
   15114:	tst	r3, #2048	; 0x800
   15118:	beq	150e4 <__assert_fail@plt+0x3994>
   1511c:	add	sl, sl, #19
   15120:	str	r8, [r4]
   15124:	mov	r0, sl
   15128:	mov	r2, #10
   1512c:	mov	r1, r7
   15130:	bl	113d8 <strtol@plt>
   15134:	str	r0, [r5]
   15138:	ldr	r3, [r4]
   1513c:	cmp	r3, #0
   15140:	bne	15164 <__assert_fail@plt+0x3a14>
   15144:	ldr	r3, [sp]
   15148:	cmp	sl, r3
   1514c:	beq	15164 <__assert_fail@plt+0x3a14>
   15150:	cmp	r3, #0
   15154:	beq	150e8 <__assert_fail@plt+0x3998>
   15158:	ldrsb	r3, [r3]
   1515c:	cmp	r3, #0
   15160:	beq	150e8 <__assert_fail@plt+0x3998>
   15164:	mvn	r0, #0
   15168:	ldr	r2, [sp, #4]
   1516c:	ldr	r3, [r9]
   15170:	cmp	r2, r3
   15174:	bne	151a4 <__assert_fail@plt+0x3a54>
   15178:	add	sp, sp, #8
   1517c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15180:	ldr	r3, [r4]
   15184:	cmp	r3, #0
   15188:	moveq	r0, #1
   1518c:	beq	15168 <__assert_fail@plt+0x3a18>
   15190:	b	15164 <__assert_fail@plt+0x3a14>
   15194:	mov	r0, #0
   15198:	b	15168 <__assert_fail@plt+0x3a18>
   1519c:	mvn	r0, #21
   151a0:	b	15168 <__assert_fail@plt+0x3a18>
   151a4:	bl	114b0 <__stack_chk_fail@plt>
   151a8:	andeq	r1, r1, r4, lsl #28
   151ac:	andeq	r0, r0, r8, asr r1
   151b0:	ldr	r1, [pc, #4]	; 151bc <__assert_fail@plt+0x3a6c>
   151b4:	add	r1, pc, r1
   151b8:	b	14e00 <__assert_fail@plt+0x36b0>
   151bc:	andeq	r0, r0, r4, asr #29
   151c0:	ldr	r1, [pc, #4]	; 151cc <__assert_fail@plt+0x3a7c>
   151c4:	add	r1, pc, r1
   151c8:	b	14e00 <__assert_fail@plt+0x36b0>
   151cc:			; <UNDEFINED> instruction: 0x00000ebc
   151d0:	push	{r4, lr}
   151d4:	mov	r1, #16
   151d8:	mov	r0, #1
   151dc:	bl	11390 <calloc@plt>
   151e0:	subs	r4, r0, #0
   151e4:	beq	15208 <__assert_fail@plt+0x3ab8>
   151e8:	ldr	r0, [pc, #44]	; 1521c <__assert_fail@plt+0x3acc>
   151ec:	add	r0, pc, r0
   151f0:	bl	114f8 <opendir@plt>
   151f4:	cmp	r0, #0
   151f8:	str	r0, [r4]
   151fc:	beq	15208 <__assert_fail@plt+0x3ab8>
   15200:	mov	r0, r4
   15204:	pop	{r4, pc}
   15208:	mov	r0, r4
   1520c:	mov	r4, #0
   15210:	bl	11420 <free@plt>
   15214:	mov	r0, r4
   15218:	pop	{r4, pc}
   1521c:	muleq	r0, ip, lr
   15220:	push	{r4, lr}
   15224:	subs	r4, r0, #0
   15228:	beq	1523c <__assert_fail@plt+0x3aec>
   1522c:	ldr	r0, [r4]
   15230:	cmp	r0, #0
   15234:	beq	1523c <__assert_fail@plt+0x3aec>
   15238:	bl	11720 <closedir@plt>
   1523c:	mov	r0, r4
   15240:	pop	{r4, lr}
   15244:	b	11420 <free@plt>
   15248:	ldrb	r3, [r0, #12]
   1524c:	str	r1, [r0, #4]
   15250:	bic	r3, r3, #1
   15254:	cmp	r1, #0
   15258:	orrne	r3, r3, #1
   1525c:	strb	r3, [r0, #12]
   15260:	bx	lr
   15264:	ldrb	r3, [r0, #12]
   15268:	str	r1, [r0, #8]
   1526c:	orr	r3, r3, #2
   15270:	strb	r3, [r0, #12]
   15274:	bx	lr
   15278:	ldr	r2, [pc, #596]	; 154d4 <__assert_fail@plt+0x3d84>
   1527c:	ldr	ip, [pc, #596]	; 154d8 <__assert_fail@plt+0x3d88>
   15280:	add	r2, pc, r2
   15284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15288:	sub	sp, sp, #8576	; 0x2180
   1528c:	ldr	ip, [r2, ip]
   15290:	sub	sp, sp, #12
   15294:	cmp	r0, #0
   15298:	add	r2, sp, #8576	; 0x2180
   1529c:	clz	r3, r1
   152a0:	str	ip, [sp, #16]
   152a4:	lsr	r3, r3, #5
   152a8:	ldr	ip, [ip]
   152ac:	moveq	r3, #1
   152b0:	add	r2, r2, #4
   152b4:	cmp	r3, #0
   152b8:	str	ip, [r2]
   152bc:	bne	154c8 <__assert_fail@plt+0x3d78>
   152c0:	str	r3, [r1]
   152c4:	ldr	r3, [pc, #528]	; 154dc <__assert_fail@plt+0x3d8c>
   152c8:	mov	r5, r0
   152cc:	add	r3, pc, r3
   152d0:	mov	sl, r1
   152d4:	str	r3, [sp, #12]
   152d8:	bl	115c4 <__errno_location@plt>
   152dc:	ldr	r9, [pc, #508]	; 154e0 <__assert_fail@plt+0x3d90>
   152e0:	ldr	fp, [pc, #508]	; 154e4 <__assert_fail@plt+0x3d94>
   152e4:	add	r9, pc, r9
   152e8:	add	fp, pc, fp
   152ec:	mov	r8, r0
   152f0:	mov	r6, #0
   152f4:	str	r6, [r8]
   152f8:	ldr	r0, [r5]
   152fc:	bl	116b4 <readdir64@plt>
   15300:	subs	r4, r0, #0
   15304:	beq	154b0 <__assert_fail@plt+0x3d60>
   15308:	bl	11570 <__ctype_b_loc@plt>
   1530c:	ldrb	r3, [r4, #19]
   15310:	lsl	r3, r3, #1
   15314:	ldr	r2, [r0]
   15318:	ldrh	r3, [r2, r3]
   1531c:	tst	r3, #2048	; 0x800
   15320:	beq	152f0 <__assert_fail@plt+0x3ba0>
   15324:	ldrb	r3, [r5, #12]
   15328:	add	r4, r4, #19
   1532c:	tst	r3, #2
   15330:	addeq	r7, sp, #392	; 0x188
   15334:	bne	1546c <__assert_fail@plt+0x3d1c>
   15338:	tst	r3, #1
   1533c:	beq	153f4 <__assert_fail@plt+0x3ca4>
   15340:	mov	r3, #8192	; 0x2000
   15344:	sub	r6, r7, #4
   15348:	mov	r1, r3
   1534c:	mov	r2, #1
   15350:	str	r4, [sp, #4]
   15354:	str	r9, [sp]
   15358:	mov	r0, r6
   1535c:	bl	1172c <__snprintf_chk@plt>
   15360:	ldr	r0, [r5]
   15364:	bl	116c0 <dirfd@plt>
   15368:	mov	r1, r6
   1536c:	mov	r2, #524288	; 0x80000
   15370:	bl	115ac <openat64@plt>
   15374:	cmp	r0, #0
   15378:	blt	152f0 <__assert_fail@plt+0x3ba0>
   1537c:	mov	r1, fp
   15380:	bl	11378 <fdopen@plt>
   15384:	subs	r3, r0, #0
   15388:	beq	152f0 <__assert_fail@plt+0x3ba0>
   1538c:	mov	r2, r3
   15390:	mov	r1, #8192	; 0x2000
   15394:	mov	r0, r6
   15398:	str	r3, [sp, #20]
   1539c:	bl	1142c <fgets@plt>
   153a0:	ldr	r3, [sp, #20]
   153a4:	str	r0, [r7, #-368]	; 0xfffffe90
   153a8:	mov	r0, r3
   153ac:	bl	11648 <fclose@plt>
   153b0:	ldr	r3, [r7, #-368]	; 0xfffffe90
   153b4:	cmp	r3, #0
   153b8:	beq	152f0 <__assert_fail@plt+0x3ba0>
   153bc:	add	r3, sp, #132	; 0x84
   153c0:	mov	r0, r6
   153c4:	mov	r2, r3
   153c8:	ldr	r1, [sp, #12]
   153cc:	str	r3, [sp, #20]
   153d0:	bl	1169c <sscanf@plt>
   153d4:	cmp	r0, #1
   153d8:	bne	152f0 <__assert_fail@plt+0x3ba0>
   153dc:	ldr	r3, [sp, #20]
   153e0:	ldr	r1, [r5, #4]
   153e4:	mov	r0, r3
   153e8:	bl	113c0 <strcmp@plt>
   153ec:	cmp	r0, #0
   153f0:	bne	152f0 <__assert_fail@plt+0x3ba0>
   153f4:	mov	r3, #0
   153f8:	str	r3, [r8]
   153fc:	mov	r2, #10
   15400:	add	r1, sp, #24
   15404:	mov	r0, r4
   15408:	str	r3, [r7, #-368]	; 0xfffffe90
   1540c:	bl	113d8 <strtol@plt>
   15410:	str	r0, [sl]
   15414:	ldr	r0, [r8]
   15418:	cmp	r0, #0
   1541c:	rsbne	r0, r0, #0
   15420:	bne	15444 <__assert_fail@plt+0x3cf4>
   15424:	ldr	r3, [r7, #-368]	; 0xfffffe90
   15428:	cmp	r3, r4
   1542c:	beq	154c0 <__assert_fail@plt+0x3d70>
   15430:	cmp	r3, #0
   15434:	beq	15444 <__assert_fail@plt+0x3cf4>
   15438:	ldrsb	r3, [r3]
   1543c:	cmp	r3, #0
   15440:	bne	154c0 <__assert_fail@plt+0x3d70>
   15444:	add	r3, sp, #8576	; 0x2180
   15448:	add	r3, r3, #4
   1544c:	ldr	r2, [r3]
   15450:	ldr	r3, [sp, #16]
   15454:	ldr	r3, [r3]
   15458:	cmp	r2, r3
   1545c:	bne	154d0 <__assert_fail@plt+0x3d80>
   15460:	add	sp, sp, #8576	; 0x2180
   15464:	add	sp, sp, #12
   15468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1546c:	ldr	r0, [r5]
   15470:	bl	116c0 <dirfd@plt>
   15474:	str	r6, [sp]
   15478:	add	r3, sp, #24
   1547c:	mov	r2, r4
   15480:	mov	r1, r0
   15484:	mov	r0, #3
   15488:	bl	114d4 <__fxstatat64@plt>
   1548c:	cmp	r0, #0
   15490:	bne	152f0 <__assert_fail@plt+0x3ba0>
   15494:	add	r7, sp, #392	; 0x188
   15498:	ldr	r2, [r5, #8]
   1549c:	ldr	r3, [r7, #-344]	; 0xfffffea8
   154a0:	cmp	r2, r3
   154a4:	bne	152f0 <__assert_fail@plt+0x3ba0>
   154a8:	ldrb	r3, [r5, #12]
   154ac:	b	15338 <__assert_fail@plt+0x3be8>
   154b0:	ldr	r3, [r8]
   154b4:	cmp	r3, r6
   154b8:	moveq	r0, #1
   154bc:	beq	15444 <__assert_fail@plt+0x3cf4>
   154c0:	mvn	r0, #0
   154c4:	b	15444 <__assert_fail@plt+0x3cf4>
   154c8:	mvn	r0, #21
   154cc:	b	15444 <__assert_fail@plt+0x3cf4>
   154d0:	bl	114b0 <__stack_chk_fail@plt>
   154d4:	andeq	r1, r1, r4, lsl ip
   154d8:	andeq	r0, r0, r8, asr r1
   154dc:	andeq	r0, r0, ip, asr #27
   154e0:	andeq	r0, r0, ip, lsr #27
   154e4:	andeq	r0, r0, r0, asr #11
   154e8:	cmp	r3, #0
   154ec:	cmpeq	r2, #0
   154f0:	bne	15508 <__assert_fail@plt+0x3db8>
   154f4:	cmp	r1, #0
   154f8:	cmpeq	r0, #0
   154fc:	mvnne	r1, #0
   15500:	mvnne	r0, #0
   15504:	b	15524 <__assert_fail@plt+0x3dd4>
   15508:	sub	sp, sp, #8
   1550c:	push	{sp, lr}
   15510:	bl	15534 <__assert_fail@plt+0x3de4>
   15514:	ldr	lr, [sp, #4]
   15518:	add	sp, sp, #8
   1551c:	pop	{r2, r3}
   15520:	bx	lr
   15524:	push	{r1, lr}
   15528:	mov	r0, #8
   1552c:	bl	1139c <raise@plt>
   15530:	pop	{r1, pc}
   15534:	cmp	r1, r3
   15538:	cmpeq	r0, r2
   1553c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15540:	mov	r4, r0
   15544:	movcc	r0, #0
   15548:	mov	r5, r1
   1554c:	ldr	lr, [sp, #36]	; 0x24
   15550:	movcc	r1, r0
   15554:	bcc	15650 <__assert_fail@plt+0x3f00>
   15558:	cmp	r3, #0
   1555c:	clzeq	ip, r2
   15560:	clzne	ip, r3
   15564:	addeq	ip, ip, #32
   15568:	cmp	r5, #0
   1556c:	clzeq	r1, r4
   15570:	addeq	r1, r1, #32
   15574:	clzne	r1, r5
   15578:	sub	ip, ip, r1
   1557c:	sub	sl, ip, #32
   15580:	lsl	r9, r3, ip
   15584:	rsb	fp, ip, #32
   15588:	orr	r9, r9, r2, lsl sl
   1558c:	orr	r9, r9, r2, lsr fp
   15590:	lsl	r8, r2, ip
   15594:	cmp	r5, r9
   15598:	cmpeq	r4, r8
   1559c:	movcc	r0, #0
   155a0:	movcc	r1, r0
   155a4:	bcc	155c0 <__assert_fail@plt+0x3e70>
   155a8:	mov	r0, #1
   155ac:	subs	r4, r4, r8
   155b0:	lsl	r1, r0, sl
   155b4:	orr	r1, r1, r0, lsr fp
   155b8:	lsl	r0, r0, ip
   155bc:	sbc	r5, r5, r9
   155c0:	cmp	ip, #0
   155c4:	beq	15650 <__assert_fail@plt+0x3f00>
   155c8:	lsr	r6, r8, #1
   155cc:	orr	r6, r6, r9, lsl #31
   155d0:	lsr	r7, r9, #1
   155d4:	mov	r2, ip
   155d8:	b	155fc <__assert_fail@plt+0x3eac>
   155dc:	subs	r3, r4, r6
   155e0:	sbc	r8, r5, r7
   155e4:	adds	r3, r3, r3
   155e8:	adc	r8, r8, r8
   155ec:	adds	r4, r3, #1
   155f0:	adc	r5, r8, #0
   155f4:	subs	r2, r2, #1
   155f8:	beq	15618 <__assert_fail@plt+0x3ec8>
   155fc:	cmp	r5, r7
   15600:	cmpeq	r4, r6
   15604:	bcs	155dc <__assert_fail@plt+0x3e8c>
   15608:	adds	r4, r4, r4
   1560c:	adc	r5, r5, r5
   15610:	subs	r2, r2, #1
   15614:	bne	155fc <__assert_fail@plt+0x3eac>
   15618:	lsr	r3, r4, ip
   1561c:	orr	r3, r3, r5, lsl fp
   15620:	lsr	r2, r5, ip
   15624:	orr	r3, r3, r5, lsr sl
   15628:	adds	r0, r0, r4
   1562c:	mov	r4, r3
   15630:	lsl	r3, r2, ip
   15634:	orr	r3, r3, r4, lsl sl
   15638:	lsl	ip, r4, ip
   1563c:	orr	r3, r3, r4, lsr fp
   15640:	adc	r1, r1, r5
   15644:	subs	r0, r0, ip
   15648:	mov	r5, r2
   1564c:	sbc	r1, r1, r3
   15650:	cmp	lr, #0
   15654:	strdne	r4, [lr]
   15658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1565c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15660:	mov	r7, r0
   15664:	ldr	r6, [pc, #72]	; 156b4 <__assert_fail@plt+0x3f64>
   15668:	ldr	r5, [pc, #72]	; 156b8 <__assert_fail@plt+0x3f68>
   1566c:	add	r6, pc, r6
   15670:	add	r5, pc, r5
   15674:	sub	r6, r6, r5
   15678:	mov	r8, r1
   1567c:	mov	r9, r2
   15680:	bl	11358 <fdopen@plt-0x20>
   15684:	asrs	r6, r6, #2
   15688:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1568c:	mov	r4, #0
   15690:	add	r4, r4, #1
   15694:	ldr	r3, [r5], #4
   15698:	mov	r2, r9
   1569c:	mov	r1, r8
   156a0:	mov	r0, r7
   156a4:	blx	r3
   156a8:	cmp	r6, r4
   156ac:	bne	15690 <__assert_fail@plt+0x3f40>
   156b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156b4:	andeq	r1, r1, r0, lsl r7
   156b8:	andeq	r1, r1, r8, lsl #14
   156bc:	bx	lr
   156c0:	ldr	r3, [pc, #12]	; 156d4 <__assert_fail@plt+0x3f84>
   156c4:	mov	r1, #0
   156c8:	add	r3, pc, r3
   156cc:	ldr	r2, [r3]
   156d0:	b	115e8 <__cxa_atexit@plt>
   156d4:	andeq	r1, r1, r4, lsr r9

Disassembly of section .fini:

000156d8 <.fini>:
   156d8:	push	{r3, lr}
   156dc:	pop	{r3, pc}
