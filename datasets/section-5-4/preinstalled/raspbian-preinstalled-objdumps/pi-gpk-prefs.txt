
raspbian-preinstalled/pi-gpk-prefs:     file format elf32-littlearm


Disassembly of section .init:

00013090 <.init>:
   13090:	push	{r3, lr}
   13094:	bl	13b98 <g_strcmp0@plt+0x1d0>
   13098:	pop	{r3, pc}

Disassembly of section .plt:

0001309c <gtk_expander_get_expanded@plt-0x14>:
   1309c:	push	{lr}		; (str lr, [sp, #-4]!)
   130a0:	ldr	lr, [pc, #4]	; 130ac <gtk_expander_get_expanded@plt-0x4>
   130a4:	add	lr, pc, lr
   130a8:	ldr	pc, [lr, #8]!
   130ac:	andeq	sl, r1, r4, asr pc

000130b0 <gtk_expander_get_expanded@plt>:
   130b0:	add	ip, pc, #0, 12
   130b4:	add	ip, ip, #106496	; 0x1a000
   130b8:	ldr	pc, [ip, #3924]!	; 0xf54

000130bc <g_object_new@plt>:
   130bc:	add	ip, pc, #0, 12
   130c0:	add	ip, ip, #106496	; 0x1a000
   130c4:	ldr	pc, [ip, #3916]!	; 0xf4c

000130c8 <gtk_application_new@plt>:
   130c8:	add	ip, pc, #0, 12
   130cc:	add	ip, ip, #106496	; 0x1a000
   130d0:	ldr	pc, [ip, #3908]!	; 0xf44

000130d4 <g_malloc_n@plt>:
   130d4:	add	ip, pc, #0, 12
   130d8:	add	ip, ip, #106496	; 0x1a000
   130dc:	ldr	pc, [ip, #3900]!	; 0xf3c

000130e0 <gtk_tree_view_append_column@plt>:
   130e0:	add	ip, pc, #0, 12
   130e4:	add	ip, ip, #106496	; 0x1a000
   130e8:	ldr	pc, [ip, #3892]!	; 0xf34

000130ec <pk_control_get_properties_async@plt>:
   130ec:	add	ip, pc, #0, 12
   130f0:	add	ip, ip, #106496	; 0x1a000
   130f4:	ldr	pc, [ip, #3884]!	; 0xf2c

000130f8 <g_option_context_parse@plt>:
   130f8:	add	ip, pc, #0, 12
   130fc:	add	ip, ip, #106496	; 0x1a000
   13100:	ldr	pc, [ip, #3876]!	; 0xf24

00013104 <g_option_context_add_group@plt>:
   13104:	add	ip, pc, #0, 12
   13108:	add	ip, ip, #106496	; 0x1a000
   1310c:	ldr	pc, [ip, #3868]!	; 0xf1c

00013110 <g_settings_new@plt>:
   13110:	add	ip, pc, #0, 12
   13114:	add	ip, ip, #106496	; 0x1a000
   13118:	ldr	pc, [ip, #3860]!	; 0xf14

0001311c <gtk_message_dialog_format_secondary_text@plt>:
   1311c:	add	ip, pc, #0, 12
   13120:	add	ip, ip, #106496	; 0x1a000
   13124:	ldr	pc, [ip, #3852]!	; 0xf0c

00013128 <g_return_if_fail_warning@plt>:
   13128:	add	ip, pc, #0, 12
   1312c:	add	ip, ip, #106496	; 0x1a000
   13130:	ldr	pc, [ip, #3844]!	; 0xf04

00013134 <g_type_register_static_simple@plt>:
   13134:	add	ip, pc, #0, 12
   13138:	add	ip, ip, #106496	; 0x1a000
   1313c:	ldr	pc, [ip, #3836]!	; 0xefc

00013140 <gtk_list_store_set@plt>:
   13140:	add	ip, pc, #0, 12
   13144:	add	ip, ip, #106496	; 0x1a000
   13148:	ldr	pc, [ip, #3828]!	; 0xef4

0001314c <pk_package_get_id@plt>:
   1314c:	add	ip, pc, #0, 12
   13150:	add	ip, ip, #106496	; 0x1a000
   13154:	ldr	pc, [ip, #3820]!	; 0xeec

00013158 <gtk_dialog_add_button@plt>:
   13158:	add	ip, pc, #0, 12
   1315c:	add	ip, ip, #106496	; 0x1a000
   13160:	ldr	pc, [ip, #3812]!	; 0xee4

00013164 <g_type_class_adjust_private_offset@plt>:
   13164:	add	ip, pc, #0, 12
   13168:	add	ip, ip, #106496	; 0x1a000
   1316c:	ldr	pc, [ip, #3804]!	; 0xedc

00013170 <g_timeout_add@plt>:
   13170:	add	ip, pc, #0, 12
   13174:	add	ip, ip, #106496	; 0x1a000
   13178:	ldr	pc, [ip, #3796]!	; 0xed4

0001317c <gtk_tree_model_foreach@plt>:
   1317c:	add	ip, pc, #0, 12
   13180:	add	ip, ip, #106496	; 0x1a000
   13184:	ldr	pc, [ip, #3788]!	; 0xecc

00013188 <g_application_get_type@plt>:
   13188:	add	ip, pc, #0, 12
   1318c:	add	ip, ip, #106496	; 0x1a000
   13190:	ldr	pc, [ip, #3780]!	; 0xec4

00013194 <g_error_free@plt>:
   13194:	add	ip, pc, #0, 12
   13198:	add	ip, ip, #106496	; 0x1a000
   1319c:	ldr	pc, [ip, #3772]!	; 0xebc

000131a0 <bind_textdomain_codeset@plt>:
   131a0:	add	ip, pc, #0, 12
   131a4:	add	ip, ip, #106496	; 0x1a000
   131a8:	ldr	pc, [ip, #3764]!	; 0xeb4

000131ac <gtk_label_get_type@plt>:
   131ac:	add	ip, pc, #0, 12
   131b0:	add	ip, ip, #106496	; 0x1a000
   131b4:	ldr	pc, [ip, #3756]!	; 0xeac

000131b8 <gtk_label_set_label@plt>:
   131b8:	add	ip, pc, #0, 12
   131bc:	add	ip, ip, #106496	; 0x1a000
   131c0:	ldr	pc, [ip, #3748]!	; 0xea4

000131c4 <g_log_set_handler@plt>:
   131c4:	add	ip, pc, #0, 12
   131c8:	add	ip, ip, #106496	; 0x1a000
   131cc:	ldr	pc, [ip, #3740]!	; 0xe9c

000131d0 <gtk_widget_get_type@plt>:
   131d0:	add	ip, pc, #0, 12
   131d4:	add	ip, ip, #106496	; 0x1a000
   131d8:	ldr	pc, [ip, #3732]!	; 0xe94

000131dc <g_string_new@plt>:
   131dc:	add	ip, pc, #0, 12
   131e0:	add	ip, ip, #106496	; 0x1a000
   131e4:	ldr	pc, [ip, #3724]!	; 0xe8c

000131e8 <gtk_tree_view_set_model@plt>:
   131e8:	add	ip, pc, #0, 12
   131ec:	add	ip, ip, #106496	; 0x1a000
   131f0:	ldr	pc, [ip, #3716]!	; 0xe84

000131f4 <pk_package_id_split@plt>:
   131f4:	add	ip, pc, #0, 12
   131f8:	add	ip, ip, #106496	; 0x1a000
   131fc:	ldr	pc, [ip, #3708]!	; 0xe7c

00013200 <gtk_text_buffer_delete_mark@plt>:
   13200:	add	ip, pc, #0, 12
   13204:	add	ip, ip, #106496	; 0x1a000
   13208:	ldr	pc, [ip, #3700]!	; 0xe74

0001320c <g_type_check_instance_cast@plt>:
   1320c:	add	ip, pc, #0, 12
   13210:	add	ip, ip, #106496	; 0x1a000
   13214:	ldr	pc, [ip, #3692]!	; 0xe6c

00013218 <gtk_tree_view_column_new_with_attributes@plt>:
   13218:	add	ip, pc, #0, 12
   1321c:	add	ip, ip, #106496	; 0x1a000
   13220:	ldr	pc, [ip, #3684]!	; 0xe64

00013224 <gtk_tree_view_columns_autosize@plt>:
   13224:	add	ip, pc, #0, 12
   13228:	add	ip, ip, #106496	; 0x1a000
   1322c:	ldr	pc, [ip, #3676]!	; 0xe5c

00013230 <gtk_text_view_get_type@plt>:
   13230:	add	ip, pc, #0, 12
   13234:	add	ip, ip, #106496	; 0x1a000
   13238:	ldr	pc, [ip, #3668]!	; 0xe54

0001323c <g_option_context_new@plt>:
   1323c:	add	ip, pc, #0, 12
   13240:	add	ip, ip, #106496	; 0x1a000
   13244:	ldr	pc, [ip, #3660]!	; 0xe4c

00013248 <gtk_widget_get_window@plt>:
   13248:	add	ip, pc, #0, 12
   1324c:	add	ip, ip, #106496	; 0x1a000
   13250:	ldr	pc, [ip, #3652]!	; 0xe44

00013254 <gtk_widget_hide@plt>:
   13254:	add	ip, pc, #0, 12
   13258:	add	ip, ip, #106496	; 0x1a000
   1325c:	ldr	pc, [ip, #3644]!	; 0xe3c

00013260 <g_option_group_new@plt>:
   13260:	add	ip, pc, #0, 12
   13264:	add	ip, ip, #106496	; 0x1a000
   13268:	ldr	pc, [ip, #3636]!	; 0xe34

0001326c <pk_role_enum_to_string@plt>:
   1326c:	add	ip, pc, #0, 12
   13270:	add	ip, ip, #106496	; 0x1a000
   13274:	ldr	pc, [ip, #3628]!	; 0xe2c

00013278 <g_log@plt>:
   13278:	add	ip, pc, #0, 12
   1327c:	add	ip, ip, #106496	; 0x1a000
   13280:	ldr	pc, [ip, #3620]!	; 0xe24

00013284 <g_option_context_set_summary@plt>:
   13284:	add	ip, pc, #0, 12
   13288:	add	ip, ip, #106496	; 0x1a000
   1328c:	ldr	pc, [ip, #3612]!	; 0xe1c

00013290 <g_cancellable_cancel@plt>:
   13290:	add	ip, pc, #0, 12
   13294:	add	ip, ip, #106496	; 0x1a000
   13298:	ldr	pc, [ip, #3604]!	; 0xe14

0001329c <pk_status_enum_to_string@plt>:
   1329c:	add	ip, pc, #0, 12
   132a0:	add	ip, ip, #106496	; 0x1a000
   132a4:	ldr	pc, [ip, #3596]!	; 0xe0c

000132a8 <gtk_expander_get_type@plt>:
   132a8:	add	ip, pc, #0, 12
   132ac:	add	ip, ip, #106496	; 0x1a000
   132b0:	ldr	pc, [ip, #3588]!	; 0xe04

000132b4 <pk_results_get_error_code@plt>:
   132b4:	add	ip, pc, #0, 12
   132b8:	add	ip, ip, #106496	; 0x1a000
   132bc:	ldr	pc, [ip, #3580]!	; 0xdfc

000132c0 <gtk_text_buffer_insert@plt>:
   132c0:	add	ip, pc, #0, 12
   132c4:	add	ip, ip, #106496	; 0x1a000
   132c8:	ldr	pc, [ip, #3572]!	; 0xdf4

000132cc <gtk_toggle_button_get_type@plt>:
   132cc:	add	ip, pc, #0, 12
   132d0:	add	ip, ip, #106496	; 0x1a000
   132d4:	ldr	pc, [ip, #3564]!	; 0xdec

000132d8 <pk_client_get_type@plt>:
   132d8:	add	ip, pc, #0, 12
   132dc:	add	ip, ip, #106496	; 0x1a000
   132e0:	ldr	pc, [ip, #3556]!	; 0xde4

000132e4 <pk_control_get_properties_finish@plt>:
   132e4:	add	ip, pc, #0, 12
   132e8:	add	ip, ip, #106496	; 0x1a000
   132ec:	ldr	pc, [ip, #3548]!	; 0xddc

000132f0 <gtk_application_add_window@plt>:
   132f0:	add	ip, pc, #0, 12
   132f4:	add	ip, ip, #106496	; 0x1a000
   132f8:	ldr	pc, [ip, #3540]!	; 0xdd4

000132fc <gtk_window_set_icon_name@plt>:
   132fc:	add	ip, pc, #0, 12
   13300:	add	ip, ip, #106496	; 0x1a000
   13304:	ldr	pc, [ip, #3532]!	; 0xdcc

00013308 <pk_error_get_details@plt>:
   13308:	add	ip, pc, #0, 12
   1330c:	add	ip, ip, #106496	; 0x1a000
   13310:	ldr	pc, [ip, #3524]!	; 0xdc4

00013314 <pk_error_get_code@plt>:
   13314:	add	ip, pc, #0, 12
   13318:	add	ip, ip, #106496	; 0x1a000
   1331c:	ldr	pc, [ip, #3516]!	; 0xdbc

00013320 <gtk_tree_view_get_model@plt>:
   13320:	add	ip, pc, #0, 12
   13324:	add	ip, ip, #106496	; 0x1a000
   13328:	ldr	pc, [ip, #3508]!	; 0xdb4

0001332c <gtk_list_store_remove@plt>:
   1332c:	add	ip, pc, #0, 12
   13330:	add	ip, ip, #106496	; 0x1a000
   13334:	ldr	pc, [ip, #3500]!	; 0xdac

00013338 <textdomain@plt>:
   13338:	add	ip, pc, #0, 12
   1333c:	add	ip, ip, #106496	; 0x1a000
   13340:	ldr	pc, [ip, #3492]!	; 0xda4

00013344 <pk_results_get_repo_detail_array@plt>:
   13344:	add	ip, pc, #0, 12
   13348:	add	ip, ip, #106496	; 0x1a000
   1334c:	ldr	pc, [ip, #3484]!	; 0xd9c

00013350 <gdk_pixbuf_new_subpixbuf@plt>:
   13350:	add	ip, pc, #0, 12
   13354:	add	ip, ip, #106496	; 0x1a000
   13358:	ldr	pc, [ip, #3476]!	; 0xd94

0001335c <gtk_text_buffer_get_type@plt>:
   1335c:	add	ip, pc, #0, 12
   13360:	add	ip, ip, #106496	; 0x1a000
   13364:	ldr	pc, [ip, #3468]!	; 0xd8c

00013368 <gtk_tree_view_column_set_sort_column_id@plt>:
   13368:	add	ip, pc, #0, 12
   1336c:	add	ip, ip, #106496	; 0x1a000
   13370:	ldr	pc, [ip, #3460]!	; 0xd84

00013374 <g_option_group_set_parse_hooks@plt>:
   13374:	add	ip, pc, #0, 12
   13378:	add	ip, ip, #106496	; 0x1a000
   1337c:	ldr	pc, [ip, #3452]!	; 0xd7c

00013380 <pango_attr_list_unref@plt>:
   13380:	add	ip, pc, #0, 12
   13384:	add	ip, ip, #106496	; 0x1a000
   13388:	ldr	pc, [ip, #3444]!	; 0xd74

0001338c <g_application_release@plt>:
   1338c:	add	ip, pc, #0, 12
   13390:	add	ip, ip, #106496	; 0x1a000
   13394:	ldr	pc, [ip, #3436]!	; 0xd6c

00013398 <g_strdup@plt>:
   13398:	add	ip, pc, #0, 12
   1339c:	add	ip, ip, #106496	; 0x1a000
   133a0:	ldr	pc, [ip, #3428]!	; 0xd64

000133a4 <pk_control_new@plt>:
   133a4:	add	ip, pc, #0, 12
   133a8:	add	ip, ip, #106496	; 0x1a000
   133ac:	ldr	pc, [ip, #3420]!	; 0xd5c

000133b0 <strftime@plt>:
   133b0:	add	ip, pc, #0, 12
   133b4:	add	ip, ip, #106496	; 0x1a000
   133b8:	ldr	pc, [ip, #3412]!	; 0xd54

000133bc <memset@plt>:
   133bc:	add	ip, pc, #0, 12
   133c0:	add	ip, ip, #106496	; 0x1a000
   133c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000133c8 <gtk_tree_sortable_get_type@plt>:
   133c8:	add	ip, pc, #0, 12
   133cc:	add	ip, ip, #106496	; 0x1a000
   133d0:	ldr	pc, [ip, #3396]!	; 0xd44

000133d4 <gtk_builder_get_object@plt>:
   133d4:	add	ip, pc, #0, 12
   133d8:	add	ip, ip, #106496	; 0x1a000
   133dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000133e0 <gtk_text_buffer_get_iter_at_mark@plt>:
   133e0:	add	ip, pc, #0, 12
   133e4:	add	ip, ip, #106496	; 0x1a000
   133e8:	ldr	pc, [ip, #3380]!	; 0xd34

000133ec <pk_client_generic_finish@plt>:
   133ec:	add	ip, pc, #0, 12
   133f0:	add	ip, ip, #106496	; 0x1a000
   133f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000133f8 <gtk_image_set_from_pixbuf@plt>:
   133f8:	add	ip, pc, #0, 12
   133fc:	add	ip, ip, #106496	; 0x1a000
   13400:	ldr	pc, [ip, #3364]!	; 0xd24

00013404 <g_strdup_printf@plt>:
   13404:	add	ip, pc, #0, 12
   13408:	add	ip, ip, #106496	; 0x1a000
   1340c:	ldr	pc, [ip, #3356]!	; 0xd1c

00013410 <dcngettext@plt>:
   13410:	add	ip, pc, #0, 12
   13414:	add	ip, ip, #106496	; 0x1a000
   13418:	ldr	pc, [ip, #3348]!	; 0xd14

0001341c <gtk_icon_theme_append_search_path@plt>:
   1341c:	add	ip, pc, #0, 12
   13420:	add	ip, ip, #106496	; 0x1a000
   13424:	ldr	pc, [ip, #3340]!	; 0xd0c

00013428 <pk_error_enum_to_string@plt>:
   13428:	add	ip, pc, #0, 12
   1342c:	add	ip, ip, #106496	; 0x1a000
   13430:	ldr	pc, [ip, #3332]!	; 0xd04

00013434 <gtk_icon_theme_load_icon@plt>:
   13434:	add	ip, pc, #0, 12
   13438:	add	ip, ip, #106496	; 0x1a000
   1343c:	ldr	pc, [ip, #3324]!	; 0xcfc

00013440 <g_application_run@plt>:
   13440:	add	ip, pc, #0, 12
   13444:	add	ip, ip, #106496	; 0x1a000
   13448:	ldr	pc, [ip, #3316]!	; 0xcf4

0001344c <gtk_tree_path_free@plt>:
   1344c:	add	ip, pc, #0, 12
   13450:	add	ip, ip, #106496	; 0x1a000
   13454:	ldr	pc, [ip, #3308]!	; 0xcec

00013458 <abort@plt>:
   13458:	add	ip, pc, #0, 12
   1345c:	add	ip, ip, #106496	; 0x1a000
   13460:	ldr	pc, [ip, #3300]!	; 0xce4

00013464 <gdk_pixbuf_get_height@plt>:
   13464:	add	ip, pc, #0, 12
   13468:	add	ip, ip, #106496	; 0x1a000
   1346c:	ldr	pc, [ip, #3292]!	; 0xcdc

00013470 <g_application_command_line_get_arguments@plt>:
   13470:	add	ip, pc, #0, 12
   13474:	add	ip, ip, #106496	; 0x1a000
   13478:	ldr	pc, [ip, #3284]!	; 0xcd4

0001347c <gtk_cell_renderer_text_new@plt>:
   1347c:	add	ip, pc, #0, 12
   13480:	add	ip, ip, #106496	; 0x1a000
   13484:	ldr	pc, [ip, #3276]!	; 0xccc

00013488 <gtk_window_set_title@plt>:
   13488:	add	ip, pc, #0, 12
   1348c:	add	ip, ip, #106496	; 0x1a000
   13490:	ldr	pc, [ip, #3268]!	; 0xcc4

00013494 <gdk_pixbuf_get_width@plt>:
   13494:	add	ip, pc, #0, 12
   13498:	add	ip, ip, #106496	; 0x1a000
   1349c:	ldr	pc, [ip, #3260]!	; 0xcbc

000134a0 <gdk_display_get_default@plt>:
   134a0:	add	ip, pc, #0, 12
   134a4:	add	ip, ip, #106496	; 0x1a000
   134a8:	ldr	pc, [ip, #3252]!	; 0xcb4

000134ac <gtk_text_view_set_buffer@plt>:
   134ac:	add	ip, pc, #0, 12
   134b0:	add	ip, ip, #106496	; 0x1a000
   134b4:	ldr	pc, [ip, #3244]!	; 0xcac

000134b8 <gtk_window_set_default_size@plt>:
   134b8:	add	ip, pc, #0, 12
   134bc:	add	ip, ip, #106496	; 0x1a000
   134c0:	ldr	pc, [ip, #3236]!	; 0xca4

000134c4 <g_strjoin@plt>:
   134c4:	add	ip, pc, #0, 12
   134c8:	add	ip, ip, #106496	; 0x1a000
   134cc:	ldr	pc, [ip, #3228]!	; 0xc9c

000134d0 <g_str_has_prefix@plt>:
   134d0:	add	ip, pc, #0, 12
   134d4:	add	ip, ip, #106496	; 0x1a000
   134d8:	ldr	pc, [ip, #3220]!	; 0xc94

000134dc <localtime@plt>:
   134dc:	add	ip, pc, #0, 12
   134e0:	add	ip, ip, #106496	; 0x1a000
   134e4:	ldr	pc, [ip, #3212]!	; 0xc8c

000134e8 <g_cancellable_new@plt>:
   134e8:	add	ip, pc, #0, 12
   134ec:	add	ip, ip, #106496	; 0x1a000
   134f0:	ldr	pc, [ip, #3204]!	; 0xc84

000134f4 <g_signal_connect_data@plt>:
   134f4:	add	ip, pc, #0, 12
   134f8:	add	ip, ip, #106496	; 0x1a000
   134fc:	ldr	pc, [ip, #3196]!	; 0xc7c

00013500 <g_once_init_enter@plt>:
   13500:	add	ip, pc, #0, 12
   13504:	add	ip, ip, #106496	; 0x1a000
   13508:	ldr	pc, [ip, #3188]!	; 0xc74

0001350c <pk_client_repo_enable_async@plt>:
   1350c:	add	ip, pc, #0, 12
   13510:	add	ip, ip, #106496	; 0x1a000
   13514:	ldr	pc, [ip, #3180]!	; 0xc6c

00013518 <gtk_tree_path_new_from_string@plt>:
   13518:	add	ip, pc, #0, 12
   1351c:	add	ip, ip, #106496	; 0x1a000
   13520:	ldr	pc, [ip, #3172]!	; 0xc64

00013524 <gtk_text_tag_table_lookup@plt>:
   13524:	add	ip, pc, #0, 12
   13528:	add	ip, ip, #106496	; 0x1a000
   1352c:	ldr	pc, [ip, #3164]!	; 0xc5c

00013530 <gtk_widget_destroy@plt>:
   13530:	add	ip, pc, #0, 12
   13534:	add	ip, ip, #106496	; 0x1a000
   13538:	ldr	pc, [ip, #3156]!	; 0xc54

0001353c <gdk_window_set_transient_for@plt>:
   1353c:	add	ip, pc, #0, 12
   13540:	add	ip, ip, #106496	; 0x1a000
   13544:	ldr	pc, [ip, #3148]!	; 0xc4c

00013548 <gtk_text_tag_table_add@plt>:
   13548:	add	ip, pc, #0, 12
   1354c:	add	ip, ip, #106496	; 0x1a000
   13550:	ldr	pc, [ip, #3140]!	; 0xc44

00013554 <gtk_text_tag_new@plt>:
   13554:	add	ip, pc, #0, 12
   13558:	add	ip, ip, #106496	; 0x1a000
   1355c:	ldr	pc, [ip, #3132]!	; 0xc3c

00013560 <g_intern_static_string@plt>:
   13560:	add	ip, pc, #0, 12
   13564:	add	ip, ip, #106496	; 0x1a000
   13568:	ldr	pc, [ip, #3124]!	; 0xc34

0001356c <gtk_image_get_type@plt>:
   1356c:	add	ip, pc, #0, 12
   13570:	add	ip, ip, #106496	; 0x1a000
   13574:	ldr	pc, [ip, #3116]!	; 0xc2c

00013578 <g_strfreev@plt>:
   13578:	add	ip, pc, #0, 12
   1357c:	add	ip, ip, #106496	; 0x1a000
   13580:	ldr	pc, [ip, #3108]!	; 0xc24

00013584 <g_strv_length@plt>:
   13584:	add	ip, pc, #0, 12
   13588:	add	ip, ip, #106496	; 0x1a000
   1358c:	ldr	pc, [ip, #3100]!	; 0xc1c

00013590 <pango_attr_iterator_range@plt>:
   13590:	add	ip, pc, #0, 12
   13594:	add	ip, ip, #106496	; 0x1a000
   13598:	ldr	pc, [ip, #3092]!	; 0xc14

0001359c <g_option_context_free@plt>:
   1359c:	add	ip, pc, #0, 12
   135a0:	add	ip, ip, #106496	; 0x1a000
   135a4:	ldr	pc, [ip, #3084]!	; 0xc0c

000135a8 <fileno@plt>:
   135a8:	add	ip, pc, #0, 12
   135ac:	add	ip, ip, #106496	; 0x1a000
   135b0:	ldr	pc, [ip, #3076]!	; 0xc04

000135b4 <gtk_window_present_with_time@plt>:
   135b4:	add	ip, pc, #0, 12
   135b8:	add	ip, ip, #106496	; 0x1a000
   135bc:	ldr	pc, [ip, #3068]!	; 0xbfc

000135c0 <__stack_chk_fail@plt>:
   135c0:	add	ip, pc, #0, 12
   135c4:	add	ip, ip, #106496	; 0x1a000
   135c8:	ldr	pc, [ip, #3060]!	; 0xbf4

000135cc <gdk_x11_window_foreign_new_for_display@plt>:
   135cc:	add	ip, pc, #0, 12
   135d0:	add	ip, ip, #106496	; 0x1a000
   135d4:	ldr	pc, [ip, #3052]!	; 0xbec

000135d8 <gtk_tree_view_get_type@plt>:
   135d8:	add	ip, pc, #0, 12
   135dc:	add	ip, ip, #106496	; 0x1a000
   135e0:	ldr	pc, [ip, #3044]!	; 0xbe4

000135e4 <gtk_list_store_new@plt>:
   135e4:	add	ip, pc, #0, 12
   135e8:	add	ip, ip, #106496	; 0x1a000
   135ec:	ldr	pc, [ip, #3036]!	; 0xbdc

000135f0 <isatty@plt>:
   135f0:	add	ip, pc, #0, 12
   135f4:	add	ip, ip, #106496	; 0x1a000
   135f8:	ldr	pc, [ip, #3028]!	; 0xbd4

000135fc <g_free@plt>:
   135fc:	add	ip, pc, #0, 12
   13600:	add	ip, ip, #106496	; 0x1a000
   13604:	ldr	pc, [ip, #3020]!	; 0xbcc

00013608 <dcgettext@plt>:
   13608:	add	ip, pc, #0, 12
   1360c:	add	ip, ip, #106496	; 0x1a000
   13610:	ldr	pc, [ip, #3012]!	; 0xbc4

00013614 <g_settings_bind@plt>:
   13614:	add	ip, pc, #0, 12
   13618:	add	ip, ip, #106496	; 0x1a000
   1361c:	ldr	pc, [ip, #3004]!	; 0xbbc

00013620 <gtk_main@plt>:
   13620:	add	ip, pc, #0, 12
   13624:	add	ip, ip, #106496	; 0x1a000
   13628:	ldr	pc, [ip, #2996]!	; 0xbb4

0001362c <g_object_set@plt>:
   1362c:	add	ip, pc, #0, 12
   13630:	add	ip, ip, #106496	; 0x1a000
   13634:	ldr	pc, [ip, #2988]!	; 0xbac

00013638 <gtk_text_buffer_insert_at_cursor@plt>:
   13638:	add	ip, pc, #0, 12
   1363c:	add	ip, ip, #106496	; 0x1a000
   13640:	ldr	pc, [ip, #2980]!	; 0xba4

00013644 <gtk_message_dialog_get_type@plt>:
   13644:	add	ip, pc, #0, 12
   13648:	add	ip, ip, #106496	; 0x1a000
   1364c:	ldr	pc, [ip, #2972]!	; 0xb9c

00013650 <g_ptr_array_new@plt>:
   13650:	add	ip, pc, #0, 12
   13654:	add	ip, ip, #106496	; 0x1a000
   13658:	ldr	pc, [ip, #2964]!	; 0xb94

0001365c <g_object_get@plt>:
   1365c:	add	ip, pc, #0, 12
   13660:	add	ip, ip, #106496	; 0x1a000
   13664:	ldr	pc, [ip, #2956]!	; 0xb8c

00013668 <pk_client_get_repo_list_async@plt>:
   13668:	add	ip, pc, #0, 12
   1366c:	add	ip, ip, #106496	; 0x1a000
   13670:	ldr	pc, [ip, #2948]!	; 0xb84

00013674 <gtk_tree_selection_get_selected@plt>:
   13674:	add	ip, pc, #0, 12
   13678:	add	ip, ip, #106496	; 0x1a000
   1367c:	ldr	pc, [ip, #2940]!	; 0xb7c

00013680 <gtk_dialog_get_type@plt>:
   13680:	add	ip, pc, #0, 12
   13684:	add	ip, ip, #106496	; 0x1a000
   13688:	ldr	pc, [ip, #2932]!	; 0xb74

0001368c <gtk_tree_view_get_selection@plt>:
   1368c:	add	ip, pc, #0, 12
   13690:	add	ip, ip, #106496	; 0x1a000
   13694:	ldr	pc, [ip, #2924]!	; 0xb6c

00013698 <gtk_tree_model_get_type@plt>:
   13698:	add	ip, pc, #0, 12
   1369c:	add	ip, ip, #106496	; 0x1a000
   136a0:	ldr	pc, [ip, #2916]!	; 0xb64

000136a4 <gtk_list_store_append@plt>:
   136a4:	add	ip, pc, #0, 12
   136a8:	add	ip, ip, #106496	; 0x1a000
   136ac:	ldr	pc, [ip, #2908]!	; 0xb5c

000136b0 <gtk_text_buffer_create_mark@plt>:
   136b0:	add	ip, pc, #0, 12
   136b4:	add	ip, ip, #106496	; 0x1a000
   136b8:	ldr	pc, [ip, #2900]!	; 0xb54

000136bc <raise@plt>:
   136bc:	add	ip, pc, #0, 12
   136c0:	add	ip, ip, #106496	; 0x1a000
   136c4:	ldr	pc, [ip, #2892]!	; 0xb4c

000136c8 <pk_control_get_type@plt>:
   136c8:	add	ip, pc, #0, 12
   136cc:	add	ip, ip, #106496	; 0x1a000
   136d0:	ldr	pc, [ip, #2884]!	; 0xb44

000136d4 <g_type_check_instance_is_a@plt>:
   136d4:	add	ip, pc, #0, 12
   136d8:	add	ip, ip, #106496	; 0x1a000
   136dc:	ldr	pc, [ip, #2876]!	; 0xb3c

000136e0 <g_print@plt>:
   136e0:	add	ip, pc, #0, 12
   136e4:	add	ip, ip, #106496	; 0x1a000
   136e8:	ldr	pc, [ip, #2868]!	; 0xb34

000136ec <getuid@plt>:
   136ec:	add	ip, pc, #0, 12
   136f0:	add	ip, ip, #106496	; 0x1a000
   136f4:	ldr	pc, [ip, #2860]!	; 0xb2c

000136f8 <bindtextdomain@plt>:
   136f8:	add	ip, pc, #0, 12
   136fc:	add	ip, ip, #106496	; 0x1a000
   13700:	ldr	pc, [ip, #2852]!	; 0xb24

00013704 <gtk_style_context_get_color@plt>:
   13704:	add	ip, pc, #0, 12
   13708:	add	ip, ip, #106496	; 0x1a000
   1370c:	ldr	pc, [ip, #2844]!	; 0xb1c

00013710 <setlocale@plt>:
   13710:	add	ip, pc, #0, 12
   13714:	add	ip, ip, #106496	; 0x1a000
   13718:	ldr	pc, [ip, #2836]!	; 0xb14

0001371c <g_option_context_add_main_entries@plt>:
   1371c:	add	ip, pc, #0, 12
   13720:	add	ip, ip, #106496	; 0x1a000
   13724:	ldr	pc, [ip, #2828]!	; 0xb0c

00013728 <gtk_tree_path_copy@plt>:
   13728:	add	ip, pc, #0, 12
   1372c:	add	ip, ip, #106496	; 0x1a000
   13730:	ldr	pc, [ip, #2820]!	; 0xb04

00013734 <gtk_text_buffer_insert_with_tags@plt>:
   13734:	add	ip, pc, #0, 12
   13738:	add	ip, ip, #106496	; 0x1a000
   1373c:	ldr	pc, [ip, #2812]!	; 0xafc

00013740 <gtk_window_set_resizable@plt>:
   13740:	add	ip, pc, #0, 12
   13744:	add	ip, ip, #106496	; 0x1a000
   13748:	ldr	pc, [ip, #2804]!	; 0xaf4

0001374c <gtk_builder_new@plt>:
   1374c:	add	ip, pc, #0, 12
   13750:	add	ip, ip, #106496	; 0x1a000
   13754:	ldr	pc, [ip, #2796]!	; 0xaec

00013758 <g_string_free@plt>:
   13758:	add	ip, pc, #0, 12
   1375c:	add	ip, ip, #106496	; 0x1a000
   13760:	ldr	pc, [ip, #2788]!	; 0xae4

00013764 <gtk_dialog_run@plt>:
   13764:	add	ip, pc, #0, 12
   13768:	add	ip, ip, #106496	; 0x1a000
   1376c:	ldr	pc, [ip, #2780]!	; 0xadc

00013770 <gtk_window_present@plt>:
   13770:	add	ip, pc, #0, 12
   13774:	add	ip, ip, #106496	; 0x1a000
   13778:	ldr	pc, [ip, #2772]!	; 0xad4

0001377c <pango_attr_iterator_get@plt>:
   1377c:	add	ip, pc, #0, 12
   13780:	add	ip, ip, #106496	; 0x1a000
   13784:	ldr	pc, [ip, #2764]!	; 0xacc

00013788 <pango_attr_iterator_next@plt>:
   13788:	add	ip, pc, #0, 12
   1378c:	add	ip, ip, #106496	; 0x1a000
   13790:	ldr	pc, [ip, #2756]!	; 0xac4

00013794 <pk_info_enum_to_string@plt>:
   13794:	add	ip, pc, #0, 12
   13798:	add	ip, ip, #106496	; 0x1a000
   1379c:	ldr	pc, [ip, #2748]!	; 0xabc

000137a0 <gtk_widget_show@plt>:
   137a0:	add	ip, pc, #0, 12
   137a4:	add	ip, ip, #106496	; 0x1a000
   137a8:	ldr	pc, [ip, #2740]!	; 0xab4

000137ac <g_object_unref@plt>:
   137ac:	add	ip, pc, #0, 12
   137b0:	add	ip, ip, #106496	; 0x1a000
   137b4:	ldr	pc, [ip, #2732]!	; 0xaac

000137b8 <strlen@plt>:
   137b8:	add	ip, pc, #0, 12
   137bc:	add	ip, ip, #106496	; 0x1a000
   137c0:	ldr	pc, [ip, #2724]!	; 0xaa4

000137c4 <gtk_text_buffer_get_tag_table@plt>:
   137c4:	add	ip, pc, #0, 12
   137c8:	add	ip, ip, #106496	; 0x1a000
   137cc:	ldr	pc, [ip, #2716]!	; 0xa9c

000137d0 <pango_attr_iterator_destroy@plt>:
   137d0:	add	ip, pc, #0, 12
   137d4:	add	ip, ip, #106496	; 0x1a000
   137d8:	ldr	pc, [ip, #2708]!	; 0xa94

000137dc <g_once_init_leave@plt>:
   137dc:	add	ip, pc, #0, 12
   137e0:	add	ip, ip, #106496	; 0x1a000
   137e4:	ldr	pc, [ip, #2700]!	; 0xa8c

000137e8 <gtk_icon_size_lookup@plt>:
   137e8:	add	ip, pc, #0, 12
   137ec:	add	ip, ip, #106496	; 0x1a000
   137f0:	ldr	pc, [ip, #2692]!	; 0xa84

000137f4 <g_log_set_fatal_mask@plt>:
   137f4:	add	ip, pc, #0, 12
   137f8:	add	ip, ip, #106496	; 0x1a000
   137fc:	ldr	pc, [ip, #2684]!	; 0xa7c

00013800 <gtk_window_set_transient_for@plt>:
   13800:	add	ip, pc, #0, 12
   13804:	add	ip, ip, #106496	; 0x1a000
   13808:	ldr	pc, [ip, #2676]!	; 0xa74

0001380c <gtk_text_buffer_new@plt>:
   1380c:	add	ip, pc, #0, 12
   13810:	add	ip, ip, #106496	; 0x1a000
   13814:	ldr	pc, [ip, #2668]!	; 0xa6c

00013818 <g_source_set_name_by_id@plt>:
   13818:	add	ip, pc, #0, 12
   1381c:	add	ip, ip, #106496	; 0x1a000
   13820:	ldr	pc, [ip, #2660]!	; 0xa64

00013824 <g_malloc0_n@plt>:
   13824:	add	ip, pc, #0, 12
   13828:	add	ip, ip, #106496	; 0x1a000
   1382c:	ldr	pc, [ip, #2652]!	; 0xa5c

00013830 <gtk_tree_sortable_set_sort_column_id@plt>:
   13830:	add	ip, pc, #0, 12
   13834:	add	ip, ip, #106496	; 0x1a000
   13838:	ldr	pc, [ip, #2644]!	; 0xa54

0001383c <gtk_main_quit@plt>:
   1383c:	add	ip, pc, #0, 12
   13840:	add	ip, ip, #106496	; 0x1a000
   13844:	ldr	pc, [ip, #2636]!	; 0xa4c

00013848 <g_type_class_peek_parent@plt>:
   13848:	add	ip, pc, #0, 12
   1384c:	add	ip, ip, #106496	; 0x1a000
   13850:	ldr	pc, [ip, #2628]!	; 0xa44

00013854 <g_ptr_array_unref@plt>:
   13854:	add	ip, pc, #0, 12
   13858:	add	ip, ip, #106496	; 0x1a000
   1385c:	ldr	pc, [ip, #2620]!	; 0xa3c

00013860 <gtk_cell_renderer_toggle_new@plt>:
   13860:	add	ip, pc, #0, 12
   13864:	add	ip, ip, #106496	; 0x1a000
   13868:	ldr	pc, [ip, #2612]!	; 0xa34

0001386c <g_malloc0@plt>:
   1386c:	add	ip, pc, #0, 12
   13870:	add	ip, ip, #106496	; 0x1a000
   13874:	ldr	pc, [ip, #2604]!	; 0xa2c

00013878 <gtk_window_set_modal@plt>:
   13878:	add	ip, pc, #0, 12
   1387c:	add	ip, ip, #106496	; 0x1a000
   13880:	ldr	pc, [ip, #2596]!	; 0xa24

00013884 <strcmp@plt>:
   13884:	add	ip, pc, #0, 12
   13888:	add	ip, ip, #106496	; 0x1a000
   1388c:	ldr	pc, [ip, #2588]!	; 0xa1c

00013890 <g_ptr_array_add@plt>:
   13890:	add	ip, pc, #0, 12
   13894:	add	ip, ip, #106496	; 0x1a000
   13898:	ldr	pc, [ip, #2580]!	; 0xa14

0001389c <g_markup_escape_text@plt>:
   1389c:	add	ip, pc, #0, 12
   138a0:	add	ip, ip, #106496	; 0x1a000
   138a4:	ldr	pc, [ip, #2572]!	; 0xa0c

000138a8 <g_str_has_suffix@plt>:
   138a8:	add	ip, pc, #0, 12
   138ac:	add	ip, ip, #106496	; 0x1a000
   138b0:	ldr	pc, [ip, #2564]!	; 0xa04

000138b4 <gtk_init@plt>:
   138b4:	add	ip, pc, #0, 12
   138b8:	add	ip, ip, #106496	; 0x1a000
   138bc:	ldr	pc, [ip, #2556]!	; 0x9fc

000138c0 <gtk_image_set_from_icon_name@plt>:
   138c0:	add	ip, pc, #0, 12
   138c4:	add	ip, ip, #106496	; 0x1a000
   138c8:	ldr	pc, [ip, #2548]!	; 0x9f4

000138cc <time@plt>:
   138cc:	add	ip, pc, #0, 12
   138d0:	add	ip, ip, #106496	; 0x1a000
   138d4:	ldr	pc, [ip, #2540]!	; 0x9ec

000138d8 <pango_parse_markup@plt>:
   138d8:	add	ip, pc, #0, 12
   138dc:	add	ip, ip, #106496	; 0x1a000
   138e0:	ldr	pc, [ip, #2532]!	; 0x9e4

000138e4 <pk_client_new@plt>:
   138e4:	add	ip, pc, #0, 12
   138e8:	add	ip, ip, #106496	; 0x1a000
   138ec:	ldr	pc, [ip, #2524]!	; 0x9dc

000138f0 <gtk_message_dialog_new@plt>:
   138f0:	add	ip, pc, #0, 12
   138f4:	add	ip, ip, #106496	; 0x1a000
   138f8:	ldr	pc, [ip, #2516]!	; 0x9d4

000138fc <gtk_icon_theme_get_default@plt>:
   138fc:	add	ip, pc, #0, 12
   13900:	add	ip, ip, #106496	; 0x1a000
   13904:	ldr	pc, [ip, #2508]!	; 0x9cc

00013908 <gtk_label_set_markup@plt>:
   13908:	add	ip, pc, #0, 12
   1390c:	add	ip, ip, #106496	; 0x1a000
   13910:	ldr	pc, [ip, #2500]!	; 0x9c4

00013914 <g_string_append@plt>:
   13914:	add	ip, pc, #0, 12
   13918:	add	ip, ip, #106496	; 0x1a000
   1391c:	ldr	pc, [ip, #2492]!	; 0x9bc

00013920 <pk_enum_find_string@plt>:
   13920:	add	ip, pc, #0, 12
   13924:	add	ip, ip, #106496	; 0x1a000
   13928:	ldr	pc, [ip, #2484]!	; 0x9b4

0001392c <gtk_list_store_get_type@plt>:
   1392c:	add	ip, pc, #0, 12
   13930:	add	ip, ip, #106496	; 0x1a000
   13934:	ldr	pc, [ip, #2476]!	; 0x9ac

00013938 <gtk_tree_model_get_iter@plt>:
   13938:	add	ip, pc, #0, 12
   1393c:	add	ip, ip, #106496	; 0x1a000
   13940:	ldr	pc, [ip, #2468]!	; 0x9a4

00013944 <gtk_tree_model_get@plt>:
   13944:	add	ip, pc, #0, 12
   13948:	add	ip, ip, #106496	; 0x1a000
   1394c:	ldr	pc, [ip, #2460]!	; 0x99c

00013950 <g_string_append_printf@plt>:
   13950:	add	ip, pc, #0, 12
   13954:	add	ip, ip, #106496	; 0x1a000
   13958:	ldr	pc, [ip, #2452]!	; 0x994

0001395c <g_type_check_class_cast@plt>:
   1395c:	add	ip, pc, #0, 12
   13960:	add	ip, ip, #106496	; 0x1a000
   13964:	ldr	pc, [ip, #2444]!	; 0x98c

00013968 <__libc_start_main@plt>:
   13968:	add	ip, pc, #0, 12
   1396c:	add	ip, ip, #106496	; 0x1a000
   13970:	ldr	pc, [ip, #2436]!	; 0x984

00013974 <__gmon_start__@plt>:
   13974:	add	ip, pc, #0, 12
   13978:	add	ip, ip, #106496	; 0x1a000
   1397c:	ldr	pc, [ip, #2428]!	; 0x97c

00013980 <gtk_builder_add_from_file@plt>:
   13980:	add	ip, pc, #0, 12
   13984:	add	ip, ip, #106496	; 0x1a000
   13988:	ldr	pc, [ip, #2420]!	; 0x974

0001398c <pango_attr_list_get_iterator@plt>:
   1398c:	add	ip, pc, #0, 12
   13990:	add	ip, ip, #106496	; 0x1a000
   13994:	ldr	pc, [ip, #2412]!	; 0x96c

00013998 <gtk_window_get_type@plt>:
   13998:	add	ip, pc, #0, 12
   1399c:	add	ip, ip, #106496	; 0x1a000
   139a0:	ldr	pc, [ip, #2404]!	; 0x964

000139a4 <gtk_widget_set_sensitive@plt>:
   139a4:	add	ip, pc, #0, 12
   139a8:	add	ip, ip, #106496	; 0x1a000
   139ac:	ldr	pc, [ip, #2396]!	; 0x95c

000139b0 <g_source_remove@plt>:
   139b0:	add	ip, pc, #0, 12
   139b4:	add	ip, ip, #106496	; 0x1a000
   139b8:	ldr	pc, [ip, #2388]!	; 0x954

000139bc <gtk_toggle_button_get_active@plt>:
   139bc:	add	ip, pc, #0, 12
   139c0:	add	ip, ip, #106496	; 0x1a000
   139c4:	ldr	pc, [ip, #2380]!	; 0x94c

000139c8 <g_strcmp0@plt>:
   139c8:	add	ip, pc, #0, 12
   139cc:	add	ip, ip, #106496	; 0x1a000
   139d0:	ldr	pc, [ip, #2372]!	; 0x944

Disassembly of section .text:

000139d8 <.text>:
   139d8:	push	{r4, r5, lr}
   139dc:	sub	sp, sp, #20
   139e0:	ldr	r4, [pc, #328]	; 13b30 <g_strcmp0@plt+0x168>
   139e4:	str	r0, [sp, #12]
   139e8:	str	r1, [sp, #8]
   139ec:	mov	r0, #6
   139f0:	ldr	r1, [pc, #316]	; 13b34 <g_strcmp0@plt+0x16c>
   139f4:	bl	13710 <setlocale@plt>
   139f8:	mov	r0, r4
   139fc:	ldr	r1, [pc, #308]	; 13b38 <g_strcmp0@plt+0x170>
   13a00:	bl	136f8 <bindtextdomain@plt>
   13a04:	ldr	r1, [pc, #304]	; 13b3c <g_strcmp0@plt+0x174>
   13a08:	mov	r0, r4
   13a0c:	bl	131a0 <bind_textdomain_codeset@plt>
   13a10:	mov	r0, r4
   13a14:	bl	13338 <textdomain@plt>
   13a18:	add	r1, sp, #8
   13a1c:	add	r0, sp, #12
   13a20:	bl	138b4 <gtk_init@plt>
   13a24:	mov	r0, #48	; 0x30
   13a28:	bl	1386c <g_malloc0@plt>
   13a2c:	mov	r5, #0
   13a30:	mov	r4, r0
   13a34:	bl	134e8 <g_cancellable_new@plt>
   13a38:	str	r0, [r4, #4]
   13a3c:	bl	1374c <gtk_builder_new@plt>
   13a40:	str	r0, [r4, #16]
   13a44:	ldr	r0, [pc, #244]	; 13b40 <g_strcmp0@plt+0x178>
   13a48:	bl	13110 <g_settings_new@plt>
   13a4c:	mov	r1, #20
   13a50:	mov	r3, #64	; 0x40
   13a54:	str	r1, [sp, #4]
   13a58:	str	r1, [sp]
   13a5c:	mov	r2, r3
   13a60:	str	r0, [r4, #8]
   13a64:	mov	r0, #5
   13a68:	bl	135e4 <gtk_list_store_new@plt>
   13a6c:	str	r0, [r4, #20]
   13a70:	bl	138e4 <pk_client_new@plt>
   13a74:	mov	r3, r5
   13a78:	mov	r2, r5
   13a7c:	ldr	r1, [pc, #192]	; 13b44 <g_strcmp0@plt+0x17c>
   13a80:	str	r0, [r4, #40]	; 0x28
   13a84:	bl	1362c <g_object_set@plt>
   13a88:	mov	r1, #8
   13a8c:	ldr	r0, [pc, #180]	; 13b48 <g_strcmp0@plt+0x180>
   13a90:	bl	130c8 <gtk_application_new@plt>
   13a94:	str	r5, [sp, #4]
   13a98:	str	r5, [sp]
   13a9c:	mov	r3, r4
   13aa0:	ldr	r2, [pc, #164]	; 13b4c <g_strcmp0@plt+0x184>
   13aa4:	ldr	r1, [pc, #164]	; 13b50 <g_strcmp0@plt+0x188>
   13aa8:	str	r0, [r4, #12]
   13aac:	bl	134f4 <g_signal_connect_data@plt>
   13ab0:	mov	r3, r4
   13ab4:	str	r5, [sp, #4]
   13ab8:	str	r5, [sp]
   13abc:	ldr	r2, [pc, #144]	; 13b54 <g_strcmp0@plt+0x18c>
   13ac0:	ldr	r1, [pc, #144]	; 13b58 <g_strcmp0@plt+0x190>
   13ac4:	ldr	r0, [r4, #12]
   13ac8:	bl	134f4 <g_signal_connect_data@plt>
   13acc:	bl	13188 <g_application_get_type@plt>
   13ad0:	mov	r1, r0
   13ad4:	ldr	r0, [r4, #12]
   13ad8:	bl	1320c <g_type_check_instance_cast@plt>
   13adc:	ldr	r2, [sp, #8]
   13ae0:	ldr	r1, [sp, #12]
   13ae4:	bl	13440 <g_application_run@plt>
   13ae8:	mov	r5, r0
   13aec:	ldr	r0, [r4, #4]
   13af0:	bl	13290 <g_cancellable_cancel@plt>
   13af4:	ldr	r0, [r4, #4]
   13af8:	bl	137ac <g_object_unref@plt>
   13afc:	ldr	r0, [r4, #16]
   13b00:	bl	137ac <g_object_unref@plt>
   13b04:	ldr	r0, [r4, #8]
   13b08:	bl	137ac <g_object_unref@plt>
   13b0c:	ldr	r0, [r4, #20]
   13b10:	bl	137ac <g_object_unref@plt>
   13b14:	ldr	r0, [r4, #40]	; 0x28
   13b18:	bl	137ac <g_object_unref@plt>
   13b1c:	mov	r0, r4
   13b20:	bl	135fc <g_free@plt>
   13b24:	mov	r0, r5
   13b28:	add	sp, sp, #20
   13b2c:	pop	{r4, r5, pc}
   13b30:			; <UNDEFINED> instruction: 0x0001ddbc
   13b34:	andeq	r9, r1, ip, lsl #16
   13b38:	andeq	sp, r1, r8, lsr #27
   13b3c:	andeq	sp, r1, r8, asr #27
   13b40:	ldrdeq	sp, [r1], -r0
   13b44:	andeq	sp, r1, r4, ror #27
   13b48:	strdeq	sp, [r1], -r0
   13b4c:			; <UNDEFINED> instruction: 0x00018bb4
   13b50:	andeq	sp, r1, r4, lsl lr
   13b54:	andeq	r8, r1, ip, asr #3
   13b58:	andeq	sp, r1, ip, lsl lr
   13b5c:	mov	fp, #0
   13b60:	mov	lr, #0
   13b64:	pop	{r1}		; (ldr r1, [sp], #4)
   13b68:	mov	r2, sp
   13b6c:	push	{r2}		; (str r2, [sp, #-4]!)
   13b70:	push	{r0}		; (str r0, [sp, #-4]!)
   13b74:	ldr	ip, [pc, #16]	; 13b8c <g_strcmp0@plt+0x1c4>
   13b78:	push	{ip}		; (str ip, [sp, #-4]!)
   13b7c:	ldr	r0, [pc, #12]	; 13b90 <g_strcmp0@plt+0x1c8>
   13b80:	ldr	r3, [pc, #12]	; 13b94 <g_strcmp0@plt+0x1cc>
   13b84:	bl	13968 <__libc_start_main@plt>
   13b88:	bl	13458 <abort@plt>
   13b8c:	andeq	r9, r1, r4, lsr #14
   13b90:	ldrdeq	r3, [r1], -r8
   13b94:	andeq	r9, r1, r4, asr #13
   13b98:	ldr	r3, [pc, #20]	; 13bb4 <g_strcmp0@plt+0x1ec>
   13b9c:	ldr	r2, [pc, #20]	; 13bb8 <g_strcmp0@plt+0x1f0>
   13ba0:	add	r3, pc, r3
   13ba4:	ldr	r2, [r3, r2]
   13ba8:	cmp	r2, #0
   13bac:	bxeq	lr
   13bb0:	b	13974 <__gmon_start__@plt>
   13bb4:	andeq	sl, r1, r8, asr r4
   13bb8:	andeq	r0, r0, r8, lsl r3
   13bbc:	ldr	r0, [pc, #24]	; 13bdc <g_strcmp0@plt+0x214>
   13bc0:	ldr	r3, [pc, #24]	; 13be0 <g_strcmp0@plt+0x218>
   13bc4:	cmp	r3, r0
   13bc8:	bxeq	lr
   13bcc:	ldr	r3, [pc, #16]	; 13be4 <g_strcmp0@plt+0x21c>
   13bd0:	cmp	r3, #0
   13bd4:	bxeq	lr
   13bd8:	bx	r3
   13bdc:	andeq	lr, r2, r4, lsr #6
   13be0:	andeq	lr, r2, r4, lsr #6
   13be4:	andeq	r0, r0, r0
   13be8:	ldr	r0, [pc, #36]	; 13c14 <g_strcmp0@plt+0x24c>
   13bec:	ldr	r1, [pc, #36]	; 13c18 <g_strcmp0@plt+0x250>
   13bf0:	sub	r1, r1, r0
   13bf4:	asr	r1, r1, #2
   13bf8:	add	r1, r1, r1, lsr #31
   13bfc:	asrs	r1, r1, #1
   13c00:	bxeq	lr
   13c04:	ldr	r3, [pc, #16]	; 13c1c <g_strcmp0@plt+0x254>
   13c08:	cmp	r3, #0
   13c0c:	bxeq	lr
   13c10:	bx	r3
   13c14:	andeq	lr, r2, r4, lsr #6
   13c18:	andeq	lr, r2, r4, lsr #6
   13c1c:	andeq	r0, r0, r0
   13c20:	push	{r4, lr}
   13c24:	ldr	r4, [pc, #24]	; 13c44 <g_strcmp0@plt+0x27c>
   13c28:	ldrb	r3, [r4]
   13c2c:	cmp	r3, #0
   13c30:	popne	{r4, pc}
   13c34:	bl	13bbc <g_strcmp0@plt+0x1f4>
   13c38:	mov	r3, #1
   13c3c:	strb	r3, [r4]
   13c40:	pop	{r4, pc}
   13c44:	andeq	lr, r2, r8, lsr #6
   13c48:	b	13be8 <g_strcmp0@plt+0x220>
   13c4c:	bx	lr
   13c50:	push	{r4, r5, r6, r7, r8, lr}
   13c54:	sub	sp, sp, #272	; 0x110
   13c58:	ldr	r7, [pc, #312]	; 13d98 <g_strcmp0@plt+0x3d0>
   13c5c:	mov	r4, r0
   13c60:	add	r0, sp, #8
   13c64:	ldr	r3, [r7]
   13c68:	mov	r6, r1
   13c6c:	mov	r8, r2
   13c70:	str	r3, [sp, #268]	; 0x10c
   13c74:	bl	138cc <time@plt>
   13c78:	add	r0, sp, #8
   13c7c:	bl	134dc <localtime@plt>
   13c80:	ldr	r2, [pc, #276]	; 13d9c <g_strcmp0@plt+0x3d4>
   13c84:	mov	r1, #254	; 0xfe
   13c88:	mov	r3, r0
   13c8c:	add	r0, sp, #12
   13c90:	bl	133b0 <strftime@plt>
   13c94:	ldr	r3, [pc, #260]	; 13da0 <g_strcmp0@plt+0x3d8>
   13c98:	ldr	r3, [r3]
   13c9c:	cmp	r3, #0
   13ca0:	bne	13cd8 <g_strcmp0@plt+0x310>
   13ca4:	cmp	r6, #128	; 0x80
   13ca8:	mov	r3, r8
   13cac:	mov	r2, r4
   13cb0:	add	r1, sp, #12
   13cb4:	ldreq	r0, [pc, #232]	; 13da4 <g_strcmp0@plt+0x3dc>
   13cb8:	ldrne	r0, [pc, #232]	; 13da8 <g_strcmp0@plt+0x3e0>
   13cbc:	bl	136e0 <g_print@plt>
   13cc0:	ldr	r2, [sp, #268]	; 0x10c
   13cc4:	ldr	r3, [r7]
   13cc8:	cmp	r2, r3
   13ccc:	bne	13d94 <g_strcmp0@plt+0x3cc>
   13cd0:	add	sp, sp, #272	; 0x110
   13cd4:	pop	{r4, r5, r6, r7, r8, pc}
   13cd8:	add	r3, sp, #12
   13cdc:	mov	r2, #32
   13ce0:	mov	r1, #27
   13ce4:	ldr	r0, [pc, #192]	; 13dac <g_strcmp0@plt+0x3e4>
   13ce8:	bl	136e0 <g_print@plt>
   13cec:	ldr	r1, [pc, #188]	; 13db0 <g_strcmp0@plt+0x3e8>
   13cf0:	mov	r0, r4
   13cf4:	bl	139c8 <g_strcmp0@plt>
   13cf8:	cmp	r0, #0
   13cfc:	movne	r3, #0
   13d00:	movne	r1, #27
   13d04:	moveq	r1, #27
   13d08:	streq	r0, [sp, #4]
   13d0c:	moveq	r3, r4
   13d10:	stmne	sp, {r1, r3}
   13d14:	streq	r1, [sp]
   13d18:	movne	r3, r4
   13d1c:	moveq	r2, #34	; 0x22
   13d20:	movne	r2, #36	; 0x24
   13d24:	ldr	r0, [pc, #136]	; 13db4 <g_strcmp0@plt+0x3ec>
   13d28:	bl	136e0 <g_print@plt>
   13d2c:	mov	r0, r4
   13d30:	bl	137b8 <strlen@plt>
   13d34:	cmp	r0, #19
   13d38:	mov	r4, r0
   13d3c:	bhi	13d58 <g_strcmp0@plt+0x390>
   13d40:	ldr	r5, [pc, #112]	; 13db8 <g_strcmp0@plt+0x3f0>
   13d44:	add	r4, r4, #1
   13d48:	mov	r0, r5
   13d4c:	bl	136e0 <g_print@plt>
   13d50:	cmp	r4, #20
   13d54:	bne	13d44 <g_strcmp0@plt+0x37c>
   13d58:	sub	r6, r6, #4
   13d5c:	bics	r6, r6, #4
   13d60:	movne	r2, #0
   13d64:	movne	r1, #27
   13d68:	moveq	r1, #27
   13d6c:	stmne	sp, {r1, r2}
   13d70:	streq	r6, [sp, #4]
   13d74:	moveq	r3, r8
   13d78:	streq	r1, [sp]
   13d7c:	moveq	r2, #31
   13d80:	movne	r3, r8
   13d84:	movne	r2, #34	; 0x22
   13d88:	ldr	r0, [pc, #44]	; 13dbc <g_strcmp0@plt+0x3f4>
   13d8c:	bl	136e0 <g_print@plt>
   13d90:	b	13cc0 <g_strcmp0@plt+0x2f8>
   13d94:	bl	135c0 <__stack_chk_fail@plt>
   13d98:	andeq	sp, r2, r8, asr #28
   13d9c:	andeq	r9, r1, r4, lsr r7
   13da0:	andeq	lr, r2, ip, lsr #6
   13da4:	andeq	r9, r1, r0, asr #14
   13da8:	andeq	r9, r1, ip, asr #14
   13dac:	andeq	r9, r1, r0, ror #14
   13db0:	andeq	r9, r1, ip, ror #14
   13db4:	andeq	r9, r1, ip, ror r7
   13db8:	andeq	r9, r1, ip, lsl #15
   13dbc:	muleq	r1, r0, r7
   13dc0:	push	{r4, r5, lr}
   13dc4:	sub	sp, sp, #68	; 0x44
   13dc8:	ldr	r4, [pc, #104]	; 13e38 <g_strcmp0@plt+0x470>
   13dcc:	mov	r5, r0
   13dd0:	mov	r2, #52	; 0x34
   13dd4:	ldr	r3, [r4]
   13dd8:	mov	r1, #0
   13ddc:	add	r0, sp, #8
   13de0:	str	r3, [sp, #60]	; 0x3c
   13de4:	bl	133bc <memset@plt>
   13de8:	ldr	r2, [pc, #76]	; 13e3c <g_strcmp0@plt+0x474>
   13dec:	ldr	r1, [pc, #76]	; 13e40 <g_strcmp0@plt+0x478>
   13df0:	ldr	ip, [pc, #76]	; 13e44 <g_strcmp0@plt+0x47c>
   13df4:	mov	r3, #118	; 0x76
   13df8:	str	r2, [sp, #4]
   13dfc:	str	r1, [sp, #20]
   13e00:	mov	r2, #0
   13e04:	mov	r0, r5
   13e08:	add	r1, sp, #4
   13e0c:	strb	r3, [sp, #8]
   13e10:	str	ip, [sp, #24]
   13e14:	bl	1371c <g_option_context_add_main_entries@plt>
   13e18:	ldr	r2, [sp, #60]	; 0x3c
   13e1c:	ldr	r3, [r4]
   13e20:	cmp	r2, r3
   13e24:	bne	13e34 <g_strcmp0@plt+0x46c>
   13e28:	mov	r0, #1
   13e2c:	add	sp, sp, #68	; 0x44
   13e30:	pop	{r4, r5, pc}
   13e34:	bl	135c0 <__stack_chk_fail@plt>
   13e38:	andeq	sp, r2, r8, asr #28
   13e3c:	andeq	r9, r1, r0, lsr #15
   13e40:	andeq	lr, r2, r0, lsr r3
   13e44:	andeq	r9, r1, r8, lsr #15
   13e48:	ldr	r3, [pc, #60]	; 13e8c <g_strcmp0@plt+0x4c4>
   13e4c:	ldr	r3, [r3, #4]
   13e50:	cmp	r3, #0
   13e54:	beq	13e80 <g_strcmp0@plt+0x4b8>
   13e58:	push	{r4, lr}
   13e5c:	mov	r1, #12
   13e60:	mov	r4, r0
   13e64:	bl	137f4 <g_log_set_fatal_mask@plt>
   13e68:	mov	r0, r4
   13e6c:	mov	r3, #0
   13e70:	ldr	r2, [pc, #24]	; 13e90 <g_strcmp0@plt+0x4c8>
   13e74:	mov	r1, #156	; 0x9c
   13e78:	pop	{r4, lr}
   13e7c:	b	131c4 <g_log_set_handler@plt>
   13e80:	ldr	r2, [pc, #12]	; 13e94 <g_strcmp0@plt+0x4cc>
   13e84:	mov	r1, #144	; 0x90
   13e88:	b	131c4 <g_log_set_handler@plt>
   13e8c:	andeq	lr, r2, ip, lsr #6
   13e90:	andeq	r3, r1, r0, asr ip
   13e94:	andeq	r3, r1, ip, asr #24
   13e98:	push	{lr}		; (str lr, [sp, #-4]!)
   13e9c:	sub	sp, sp, #12
   13ea0:	ldr	r0, [pc, #88]	; 13f00 <g_strcmp0@plt+0x538>
   13ea4:	bl	13e48 <g_strcmp0@plt+0x480>
   13ea8:	ldr	r3, [pc, #84]	; 13f04 <g_strcmp0@plt+0x53c>
   13eac:	ldr	r0, [r3]
   13eb0:	bl	135a8 <fileno@plt>
   13eb4:	bl	135f0 <isatty@plt>
   13eb8:	ldr	ip, [pc, #72]	; 13f08 <g_strcmp0@plt+0x540>
   13ebc:	ldr	r1, [pc, #72]	; 13f0c <g_strcmp0@plt+0x544>
   13ec0:	ldr	r3, [pc, #72]	; 13f10 <g_strcmp0@plt+0x548>
   13ec4:	ldr	lr, [ip, #4]
   13ec8:	ldr	r2, [pc, #68]	; 13f14 <g_strcmp0@plt+0x54c>
   13ecc:	cmp	lr, #0
   13ed0:	moveq	r3, r1
   13ed4:	mov	r1, #128	; 0x80
   13ed8:	sub	lr, r0, #1
   13edc:	clz	lr, lr
   13ee0:	lsr	lr, lr, #5
   13ee4:	str	lr, [sp]
   13ee8:	ldr	r0, [pc, #16]	; 13f00 <g_strcmp0@plt+0x538>
   13eec:	str	lr, [ip]
   13ef0:	bl	13278 <g_log@plt>
   13ef4:	mov	r0, #1
   13ef8:	add	sp, sp, #12
   13efc:	pop	{pc}		; (ldr pc, [sp], #4)
   13f00:	andeq	r9, r1, ip, ror #14
   13f04:	andeq	lr, r2, r4, lsr #6
   13f08:	andeq	lr, r2, ip, lsr #6
   13f0c:	ldrdeq	r9, [r1], -ip
   13f10:	ldrdeq	r9, [r1], -r4
   13f14:	andeq	r9, r1, r8, ror #15
   13f18:	push	{r4, lr}
   13f1c:	mov	r2, #5
   13f20:	sub	sp, sp, #8
   13f24:	ldr	r1, [pc, #76]	; 13f78 <g_strcmp0@plt+0x5b0>
   13f28:	mov	r0, #0
   13f2c:	bl	13608 <dcgettext@plt>
   13f30:	mov	r2, #5
   13f34:	ldr	r1, [pc, #64]	; 13f7c <g_strcmp0@plt+0x5b4>
   13f38:	mov	r4, r0
   13f3c:	mov	r0, #0
   13f40:	bl	13608 <dcgettext@plt>
   13f44:	mov	r3, #0
   13f48:	mov	r1, r4
   13f4c:	str	r3, [sp]
   13f50:	mov	r2, r0
   13f54:	ldr	r0, [pc, #36]	; 13f80 <g_strcmp0@plt+0x5b8>
   13f58:	bl	13260 <g_option_group_new@plt>
   13f5c:	ldr	r2, [pc, #32]	; 13f84 <g_strcmp0@plt+0x5bc>
   13f60:	ldr	r1, [pc, #32]	; 13f88 <g_strcmp0@plt+0x5c0>
   13f64:	mov	r4, r0
   13f68:	bl	13374 <g_option_group_set_parse_hooks@plt>
   13f6c:	mov	r0, r4
   13f70:	add	sp, sp, #8
   13f74:	pop	{r4, pc}
   13f78:	andeq	r9, r1, r0, lsl r8
   13f7c:	andeq	r9, r1, r4, lsr #16
   13f80:	andeq	r9, r1, ip, lsr r8
   13f84:	muleq	r1, r8, lr
   13f88:	andeq	r3, r1, r0, asr #27
   13f8c:	push	{r4, lr}
   13f90:	sub	sp, sp, #16
   13f94:	bl	1356c <gtk_image_get_type@plt>
   13f98:	mov	r4, r0
   13f9c:	ldr	r0, [pc, #48]	; 13fd4 <g_strcmp0@plt+0x60c>
   13fa0:	bl	13560 <g_intern_static_string@plt>
   13fa4:	ldr	r1, [pc, #44]	; 13fd8 <g_strcmp0@plt+0x610>
   13fa8:	mov	r2, #0
   13fac:	mov	r3, #48	; 0x30
   13fb0:	stmib	sp, {r1, r2}
   13fb4:	str	r3, [sp]
   13fb8:	mov	r2, #444	; 0x1bc
   13fbc:	ldr	r3, [pc, #24]	; 13fdc <g_strcmp0@plt+0x614>
   13fc0:	mov	r1, r0
   13fc4:	mov	r0, r4
   13fc8:	bl	13134 <g_type_register_static_simple@plt>
   13fcc:	add	sp, sp, #16
   13fd0:	pop	{r4, pc}
   13fd4:	andeq	r9, r1, r8, lsl #18
   13fd8:	andeq	r4, r1, ip, asr #2
   13fdc:	andeq	r3, r1, r0, ror #31
   13fe0:	push	{r4, r5, r6, lr}
   13fe4:	mov	r5, r0
   13fe8:	ldr	r4, [pc, #68]	; 14034 <g_strcmp0@plt+0x66c>
   13fec:	bl	13848 <g_type_class_peek_parent@plt>
   13ff0:	ldr	r3, [r4]
   13ff4:	cmp	r3, #0
   13ff8:	bne	14024 <g_strcmp0@plt+0x65c>
   13ffc:	bl	131d0 <gtk_widget_get_type@plt>
   14000:	mov	r1, r0
   14004:	mov	r0, r5
   14008:	bl	1395c <g_type_check_class_cast@plt>
   1400c:	ldr	r3, [pc, #36]	; 14038 <g_strcmp0@plt+0x670>
   14010:	str	r3, [r0, #76]	; 0x4c
   14014:	mov	r0, r5
   14018:	bl	13848 <g_type_class_peek_parent@plt>
   1401c:	str	r0, [r4, #4]
   14020:	pop	{r4, r5, r6, pc}
   14024:	mov	r1, r4
   14028:	mov	r0, r5
   1402c:	bl	13164 <g_type_class_adjust_private_offset@plt>
   14030:	b	13ffc <g_strcmp0@plt+0x634>
   14034:	andeq	lr, r2, r4, lsr r3
   14038:	ldrdeq	r4, [r1], -ip
   1403c:	ldr	r1, [pc, #164]	; 140e8 <g_strcmp0@plt+0x720>
   14040:	ldr	r3, [pc, #164]	; 140ec <g_strcmp0@plt+0x724>
   14044:	push	{r4, r5, r6, lr}
   14048:	mov	r4, r0
   1404c:	ldr	r2, [r1, #8]
   14050:	add	r0, r2, #1
   14054:	umull	ip, r3, r3, r2
   14058:	str	r0, [r1, #8]
   1405c:	lsr	r3, r3, #4
   14060:	add	r3, r3, r3, lsl #2
   14064:	cmp	r2, r3, lsl #2
   14068:	beq	140b0 <g_strcmp0@plt+0x6e8>
   1406c:	ldr	r5, [r4, #44]	; 0x2c
   14070:	cmp	r5, #0
   14074:	beq	140cc <g_strcmp0@plt+0x704>
   14078:	bl	1356c <gtk_image_get_type@plt>
   1407c:	mov	r1, r0
   14080:	mov	r0, r4
   14084:	bl	1320c <g_type_check_instance_cast@plt>
   14088:	ldr	r2, [r4, #32]
   1408c:	ldr	r3, [r4, #44]	; 0x2c
   14090:	ldr	r1, [r3, r2, lsl #2]
   14094:	bl	133f8 <gtk_image_set_from_pixbuf@plt>
   14098:	ldrd	r0, [r4, #32]
   1409c:	add	r0, r0, #1
   140a0:	bl	19454 <g_strcmp0@plt+0x5a8c>
   140a4:	mov	r0, #1
   140a8:	str	r1, [r4, #32]
   140ac:	pop	{r4, r5, r6, pc}
   140b0:	ldr	r2, [pc, #56]	; 140f0 <g_strcmp0@plt+0x728>
   140b4:	mov	r1, #128	; 0x80
   140b8:	ldr	r0, [pc, #52]	; 140f4 <g_strcmp0@plt+0x72c>
   140bc:	bl	13278 <g_log@plt>
   140c0:	ldr	r5, [r4, #44]	; 0x2c
   140c4:	cmp	r5, #0
   140c8:	bne	14078 <g_strcmp0@plt+0x6b0>
   140cc:	ldr	r2, [pc, #36]	; 140f8 <g_strcmp0@plt+0x730>
   140d0:	mov	r1, #16
   140d4:	ldr	r0, [pc, #24]	; 140f4 <g_strcmp0@plt+0x72c>
   140d8:	bl	13278 <g_log@plt>
   140dc:	str	r5, [r4, #28]
   140e0:	mov	r0, r5
   140e4:	pop	{r4, r5, r6, pc}
   140e8:	andeq	lr, r2, r4, lsr r3
   140ec:	stclgt	12, cr12, [ip], {205}	; 0xcd
   140f0:	andeq	r9, r1, r8, lsl r9
   140f4:	andeq	r9, r1, ip, ror #14
   140f8:	andeq	r9, r1, r8, lsr #18
   140fc:	push	{r4, lr}
   14100:	mcr	15, 0, r0, cr7, cr10, {5}
   14104:	ldr	r4, [pc, #60]	; 14148 <g_strcmp0@plt+0x780>
   14108:	ldr	r3, [r4, #12]
   1410c:	mcr	15, 0, r0, cr7, cr10, {5}
   14110:	cmp	r3, #0
   14114:	beq	14120 <g_strcmp0@plt+0x758>
   14118:	ldr	r0, [r4, #12]
   1411c:	pop	{r4, pc}
   14120:	add	r0, r4, #12
   14124:	bl	13500 <g_once_init_enter@plt>
   14128:	cmp	r0, #0
   1412c:	beq	14118 <g_strcmp0@plt+0x750>
   14130:	bl	13f8c <g_strcmp0@plt+0x5c4>
   14134:	mov	r1, r0
   14138:	add	r0, r4, #12
   1413c:	bl	137dc <g_once_init_leave@plt>
   14140:	ldr	r0, [r4, #12]
   14144:	pop	{r4, pc}
   14148:	andeq	lr, r2, r4, lsr r3
   1414c:	push	{r4, r5, lr}
   14150:	mov	r4, r0
   14154:	sub	sp, sp, #12
   14158:	bl	140fc <g_strcmp0@plt+0x734>
   1415c:	cmp	r4, #0
   14160:	beq	141e0 <g_strcmp0@plt+0x818>
   14164:	ldr	r3, [r4]
   14168:	cmp	r3, #0
   1416c:	beq	1417c <g_strcmp0@plt+0x7b4>
   14170:	ldr	r3, [r3]
   14174:	cmp	r3, r0
   14178:	beq	14190 <g_strcmp0@plt+0x7c8>
   1417c:	mov	r1, r0
   14180:	mov	r0, r4
   14184:	bl	136d4 <g_type_check_instance_is_a@plt>
   14188:	cmp	r0, #0
   1418c:	beq	141e0 <g_strcmp0@plt+0x818>
   14190:	mov	r5, #0
   14194:	mov	r3, #200	; 0xc8
   14198:	str	r3, [r4, #40]	; 0x28
   1419c:	str	r5, [r4, #44]	; 0x2c
   141a0:	str	r5, [r4, #24]
   141a4:	str	r5, [r4, #28]
   141a8:	str	r5, [r4, #32]
   141ac:	str	r5, [r4, #36]	; 0x24
   141b0:	bl	131d0 <gtk_widget_get_type@plt>
   141b4:	mov	r1, r0
   141b8:	mov	r0, r4
   141bc:	bl	1320c <g_type_check_instance_cast@plt>
   141c0:	str	r5, [sp, #4]
   141c4:	str	r5, [sp]
   141c8:	mov	r3, r4
   141cc:	ldr	r2, [pc, #36]	; 141f8 <g_strcmp0@plt+0x830>
   141d0:	ldr	r1, [pc, #36]	; 141fc <g_strcmp0@plt+0x834>
   141d4:	bl	134f4 <g_signal_connect_data@plt>
   141d8:	add	sp, sp, #12
   141dc:	pop	{r4, r5, pc}
   141e0:	ldr	r2, [pc, #24]	; 14200 <g_strcmp0@plt+0x838>
   141e4:	ldr	r1, [pc, #24]	; 14204 <g_strcmp0@plt+0x83c>
   141e8:	ldr	r0, [pc, #24]	; 14208 <g_strcmp0@plt+0x840>
   141ec:	add	sp, sp, #12
   141f0:	pop	{r4, r5, lr}
   141f4:	b	13128 <g_return_if_fail_warning@plt>
   141f8:	andeq	r4, r1, ip, lsl r5
   141fc:	andeq	r9, r1, ip, asr r9
   14200:	andeq	r9, r1, r0, asr #18
   14204:	andeq	r9, r1, r4, asr #16
   14208:	andeq	r9, r1, ip, ror #14
   1420c:	push	{r4, r5, r6, lr}
   14210:	mov	r5, r0
   14214:	bl	140fc <g_strcmp0@plt+0x734>
   14218:	cmp	r5, #0
   1421c:	beq	1429c <g_strcmp0@plt+0x8d4>
   14220:	ldr	r3, [r5]
   14224:	cmp	r3, #0
   14228:	beq	14238 <g_strcmp0@plt+0x870>
   1422c:	ldr	r3, [r3]
   14230:	cmp	r3, r0
   14234:	beq	1424c <g_strcmp0@plt+0x884>
   14238:	mov	r1, r0
   1423c:	mov	r0, r5
   14240:	bl	136d4 <g_type_check_instance_is_a@plt>
   14244:	cmp	r0, #0
   14248:	beq	1429c <g_strcmp0@plt+0x8d4>
   1424c:	ldr	r6, [r5, #44]	; 0x2c
   14250:	cmp	r6, #0
   14254:	beq	142b4 <g_strcmp0@plt+0x8ec>
   14258:	ldr	r3, [r5, #36]	; 0x24
   1425c:	cmp	r3, #0
   14260:	movne	r4, #0
   14264:	beq	14284 <g_strcmp0@plt+0x8bc>
   14268:	ldr	r0, [r6, r4, lsl #2]
   1426c:	bl	137ac <g_object_unref@plt>
   14270:	ldr	r3, [r5, #36]	; 0x24
   14274:	add	r4, r4, #1
   14278:	cmp	r4, r3
   1427c:	ldr	r6, [r5, #44]	; 0x2c
   14280:	bcc	14268 <g_strcmp0@plt+0x8a0>
   14284:	mov	r0, r6
   14288:	bl	135fc <g_free@plt>
   1428c:	mov	r3, #0
   14290:	mov	r0, #1
   14294:	str	r3, [r5, #44]	; 0x2c
   14298:	pop	{r4, r5, r6, pc}
   1429c:	ldr	r2, [pc, #40]	; 142cc <g_strcmp0@plt+0x904>
   142a0:	ldr	r1, [pc, #40]	; 142d0 <g_strcmp0@plt+0x908>
   142a4:	ldr	r0, [pc, #40]	; 142d4 <g_strcmp0@plt+0x90c>
   142a8:	bl	13128 <g_return_if_fail_warning@plt>
   142ac:	mov	r0, #0
   142b0:	pop	{r4, r5, r6, pc}
   142b4:	ldr	r2, [pc, #28]	; 142d8 <g_strcmp0@plt+0x910>
   142b8:	mov	r1, #128	; 0x80
   142bc:	ldr	r0, [pc, #16]	; 142d4 <g_strcmp0@plt+0x90c>
   142c0:	bl	13278 <g_log@plt>
   142c4:	mov	r0, r6
   142c8:	pop	{r4, r5, r6, pc}
   142cc:	andeq	r9, r1, r0, asr #18
   142d0:	andeq	r9, r1, ip, asr r8
   142d4:	andeq	r9, r1, ip, ror #14
   142d8:	andeq	r9, r1, ip, ror #18
   142dc:	push	{r4, r5, r6, lr}
   142e0:	mov	r5, r0
   142e4:	bl	140fc <g_strcmp0@plt+0x734>
   142e8:	mov	r1, r0
   142ec:	mov	r0, r5
   142f0:	bl	1320c <g_type_check_instance_cast@plt>
   142f4:	mov	r4, r0
   142f8:	ldr	r0, [r0, #28]
   142fc:	cmp	r0, #0
   14300:	bne	14344 <g_strcmp0@plt+0x97c>
   14304:	ldr	r0, [r4, #24]
   14308:	bl	135fc <g_free@plt>
   1430c:	mov	r3, #0
   14310:	str	r3, [r4, #24]
   14314:	mov	r0, r4
   14318:	bl	1420c <g_strcmp0@plt+0x844>
   1431c:	ldr	r3, [pc, #40]	; 1434c <g_strcmp0@plt+0x984>
   14320:	ldr	r4, [r3, #4]
   14324:	bl	131d0 <gtk_widget_get_type@plt>
   14328:	mov	r1, r0
   1432c:	mov	r0, r4
   14330:	bl	1395c <g_type_check_class_cast@plt>
   14334:	ldr	r3, [r0, #76]	; 0x4c
   14338:	mov	r0, r5
   1433c:	pop	{r4, r5, r6, lr}
   14340:	bx	r3
   14344:	bl	139b0 <g_source_remove@plt>
   14348:	b	14304 <g_strcmp0@plt+0x93c>
   1434c:	andeq	lr, r2, r4, lsr r3
   14350:	push	{r4, r5, r6, lr}
   14354:	mov	r4, r0
   14358:	mov	r5, r1
   1435c:	bl	140fc <g_strcmp0@plt+0x734>
   14360:	cmp	r4, #0
   14364:	beq	143c0 <g_strcmp0@plt+0x9f8>
   14368:	ldr	r3, [r4]
   1436c:	cmp	r3, #0
   14370:	beq	14380 <g_strcmp0@plt+0x9b8>
   14374:	ldr	r3, [r3]
   14378:	cmp	r3, r0
   1437c:	beq	14394 <g_strcmp0@plt+0x9cc>
   14380:	mov	r1, r0
   14384:	mov	r0, r4
   14388:	bl	136d4 <g_type_check_instance_is_a@plt>
   1438c:	cmp	r0, #0
   14390:	beq	143c0 <g_strcmp0@plt+0x9f8>
   14394:	ldr	r0, [pc, #100]	; 14400 <g_strcmp0@plt+0xa38>
   14398:	mov	r3, r5
   1439c:	ldr	r2, [pc, #96]	; 14404 <g_strcmp0@plt+0xa3c>
   143a0:	mov	r1, #128	; 0x80
   143a4:	bl	13278 <g_log@plt>
   143a8:	ldr	r0, [r4, #28]
   143ac:	str	r5, [r4, #40]	; 0x28
   143b0:	cmp	r0, #0
   143b4:	bne	143d8 <g_strcmp0@plt+0xa10>
   143b8:	mov	r0, #1
   143bc:	pop	{r4, r5, r6, pc}
   143c0:	ldr	r2, [pc, #64]	; 14408 <g_strcmp0@plt+0xa40>
   143c4:	ldr	r1, [pc, #64]	; 1440c <g_strcmp0@plt+0xa44>
   143c8:	ldr	r0, [pc, #48]	; 14400 <g_strcmp0@plt+0xa38>
   143cc:	bl	13128 <g_return_if_fail_warning@plt>
   143d0:	mov	r0, #0
   143d4:	pop	{r4, r5, r6, pc}
   143d8:	bl	139b0 <g_source_remove@plt>
   143dc:	mov	r2, r4
   143e0:	ldr	r1, [pc, #40]	; 14410 <g_strcmp0@plt+0xa48>
   143e4:	ldr	r0, [r4, #40]	; 0x28
   143e8:	bl	13170 <g_timeout_add@plt>
   143ec:	ldr	r1, [pc, #32]	; 14414 <g_strcmp0@plt+0xa4c>
   143f0:	str	r0, [r4, #28]
   143f4:	bl	13818 <g_source_set_name_by_id@plt>
   143f8:	mov	r0, #1
   143fc:	pop	{r4, r5, r6, pc}
   14400:	andeq	r9, r1, ip, ror #14
   14404:	andeq	r9, r1, ip, ror r9
   14408:	andeq	r9, r1, r0, asr #18
   1440c:	andeq	r9, r1, ip, ror r8
   14410:	andeq	r4, r1, ip, lsr r0
   14414:	muleq	r1, r4, r9
   14418:	push	{r4, r5, r6, lr}
   1441c:	mov	r4, r0
   14420:	mov	r5, r1
   14424:	bl	140fc <g_strcmp0@plt+0x734>
   14428:	cmp	r4, #0
   1442c:	beq	14488 <g_strcmp0@plt+0xac0>
   14430:	ldr	r3, [r4]
   14434:	cmp	r3, #0
   14438:	beq	14448 <g_strcmp0@plt+0xa80>
   1443c:	ldr	r3, [r3]
   14440:	cmp	r3, r0
   14444:	beq	1445c <g_strcmp0@plt+0xa94>
   14448:	mov	r1, r0
   1444c:	mov	r0, r4
   14450:	bl	136d4 <g_type_check_instance_is_a@plt>
   14454:	cmp	r0, #0
   14458:	beq	14488 <g_strcmp0@plt+0xac0>
   1445c:	cmp	r5, #0
   14460:	ldr	r0, [r4, #28]
   14464:	bne	144a0 <g_strcmp0@plt+0xad8>
   14468:	cmp	r0, #0
   1446c:	bne	144d8 <g_strcmp0@plt+0xb10>
   14470:	ldr	r2, [pc, #136]	; 14500 <g_strcmp0@plt+0xb38>
   14474:	mov	r1, #128	; 0x80
   14478:	ldr	r0, [pc, #132]	; 14504 <g_strcmp0@plt+0xb3c>
   1447c:	bl	13278 <g_log@plt>
   14480:	mov	r0, r5
   14484:	pop	{r4, r5, r6, pc}
   14488:	ldr	r2, [pc, #120]	; 14508 <g_strcmp0@plt+0xb40>
   1448c:	ldr	r1, [pc, #120]	; 1450c <g_strcmp0@plt+0xb44>
   14490:	ldr	r0, [pc, #108]	; 14504 <g_strcmp0@plt+0xb3c>
   14494:	bl	13128 <g_return_if_fail_warning@plt>
   14498:	mov	r0, #0
   1449c:	pop	{r4, r5, r6, pc}
   144a0:	cmp	r0, #0
   144a4:	bne	144e8 <g_strcmp0@plt+0xb20>
   144a8:	mov	r2, r4
   144ac:	str	r0, [r4, #32]
   144b0:	ldr	r1, [pc, #88]	; 14510 <g_strcmp0@plt+0xb48>
   144b4:	ldr	r0, [r4, #40]	; 0x28
   144b8:	bl	13170 <g_timeout_add@plt>
   144bc:	ldr	r1, [pc, #80]	; 14514 <g_strcmp0@plt+0xb4c>
   144c0:	str	r0, [r4, #28]
   144c4:	bl	13818 <g_source_set_name_by_id@plt>
   144c8:	mov	r0, r4
   144cc:	bl	1403c <g_strcmp0@plt+0x674>
   144d0:	mov	r0, #1
   144d4:	pop	{r4, r5, r6, pc}
   144d8:	bl	139b0 <g_source_remove@plt>
   144dc:	str	r5, [r4, #28]
   144e0:	mov	r0, #1
   144e4:	pop	{r4, r5, r6, pc}
   144e8:	ldr	r2, [pc, #40]	; 14518 <g_strcmp0@plt+0xb50>
   144ec:	mov	r1, #128	; 0x80
   144f0:	ldr	r0, [pc, #12]	; 14504 <g_strcmp0@plt+0xb3c>
   144f4:	bl	13278 <g_log@plt>
   144f8:	mov	r0, #0
   144fc:	pop	{r4, r5, r6, pc}
   14500:	andeq	r9, r1, r0, asr #19
   14504:	andeq	r9, r1, ip, ror #14
   14508:	andeq	r9, r1, r0, asr #18
   1450c:	andeq	r9, r1, r0, lsr #17
   14510:	andeq	r4, r1, ip, lsr r0
   14514:	andeq	r9, r1, r0, lsl #20
   14518:	andeq	r9, r1, r0, ror #19
   1451c:	push	{r4, r5, r6, lr}
   14520:	sub	sp, sp, #8
   14524:	ldr	r4, [pc, #108]	; 14598 <g_strcmp0@plt+0xbd0>
   14528:	mov	r6, r2
   1452c:	mov	r3, #0
   14530:	ldr	ip, [r4]
   14534:	mov	r2, sp
   14538:	ldr	r1, [pc, #92]	; 1459c <g_strcmp0@plt+0xbd4>
   1453c:	str	ip, [sp, #4]
   14540:	bl	1365c <g_object_get@plt>
   14544:	ldr	r5, [sp]
   14548:	cmp	r5, #0
   1454c:	bne	1455c <g_strcmp0@plt+0xb94>
   14550:	ldr	r3, [r6, #28]
   14554:	cmp	r3, #0
   14558:	bne	14574 <g_strcmp0@plt+0xbac>
   1455c:	ldr	r2, [sp, #4]
   14560:	ldr	r3, [r4]
   14564:	cmp	r2, r3
   14568:	bne	14594 <g_strcmp0@plt+0xbcc>
   1456c:	add	sp, sp, #8
   14570:	pop	{r4, r5, r6, pc}
   14574:	ldr	r2, [pc, #36]	; 145a0 <g_strcmp0@plt+0xbd8>
   14578:	mov	r1, #128	; 0x80
   1457c:	ldr	r0, [pc, #32]	; 145a4 <g_strcmp0@plt+0xbdc>
   14580:	bl	13278 <g_log@plt>
   14584:	mov	r1, r5
   14588:	mov	r0, r6
   1458c:	bl	14418 <g_strcmp0@plt+0xa50>
   14590:	b	1455c <g_strcmp0@plt+0xb94>
   14594:	bl	135c0 <__stack_chk_fail@plt>
   14598:	andeq	sp, r2, r8, asr #28
   1459c:	andeq	r9, r1, r4, ror #18
   145a0:	andeq	r9, r1, r0, lsr #20
   145a4:	andeq	r9, r1, ip, ror #14
   145a8:	push	{r4, r5, r6, lr}
   145ac:	mov	r5, r0
   145b0:	mov	r6, r1
   145b4:	mov	r4, r2
   145b8:	bl	140fc <g_strcmp0@plt+0x734>
   145bc:	cmp	r5, #0
   145c0:	beq	14628 <g_strcmp0@plt+0xc60>
   145c4:	ldr	r3, [r5]
   145c8:	cmp	r3, #0
   145cc:	beq	145dc <g_strcmp0@plt+0xc14>
   145d0:	ldr	r3, [r3]
   145d4:	cmp	r3, r0
   145d8:	beq	145f0 <g_strcmp0@plt+0xc28>
   145dc:	mov	r1, r0
   145e0:	mov	r0, r5
   145e4:	bl	136d4 <g_type_check_instance_is_a@plt>
   145e8:	cmp	r0, #0
   145ec:	beq	14628 <g_strcmp0@plt+0xc60>
   145f0:	cmp	r4, #0
   145f4:	beq	14640 <g_strcmp0@plt+0xc78>
   145f8:	mov	r1, #0
   145fc:	mov	r0, r5
   14600:	bl	14418 <g_strcmp0@plt+0xa50>
   14604:	bl	1356c <gtk_image_get_type@plt>
   14608:	mov	r1, r0
   1460c:	mov	r0, r5
   14610:	bl	1320c <g_type_check_instance_cast@plt>
   14614:	mov	r2, r6
   14618:	mov	r1, r4
   1461c:	bl	138c0 <gtk_image_set_from_icon_name@plt>
   14620:	mov	r0, #1
   14624:	pop	{r4, r5, r6, pc}
   14628:	ldr	r2, [pc, #40]	; 14658 <g_strcmp0@plt+0xc90>
   1462c:	ldr	r1, [pc, #40]	; 1465c <g_strcmp0@plt+0xc94>
   14630:	ldr	r0, [pc, #40]	; 14660 <g_strcmp0@plt+0xc98>
   14634:	bl	13128 <g_return_if_fail_warning@plt>
   14638:	mov	r0, #0
   1463c:	pop	{r4, r5, r6, pc}
   14640:	ldr	r2, [pc, #28]	; 14664 <g_strcmp0@plt+0xc9c>
   14644:	ldr	r1, [pc, #16]	; 1465c <g_strcmp0@plt+0xc94>
   14648:	ldr	r0, [pc, #16]	; 14660 <g_strcmp0@plt+0xc98>
   1464c:	bl	13128 <g_return_if_fail_warning@plt>
   14650:	mov	r0, r4
   14654:	pop	{r4, r5, r6, pc}
   14658:	andeq	r9, r1, r0, asr #18
   1465c:	andeq	r9, r1, r4, asr #17
   14660:	andeq	r9, r1, ip, ror #14
   14664:	andeq	r9, r1, r0, asr #20
   14668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1466c:	sub	sp, sp, #36	; 0x24
   14670:	ldr	fp, [pc, #704]	; 14938 <g_strcmp0@plt+0xf70>
   14674:	mov	r7, r0
   14678:	mov	r5, r1
   1467c:	ldr	r3, [fp]
   14680:	mov	r4, r2
   14684:	str	r3, [sp, #28]
   14688:	bl	140fc <g_strcmp0@plt+0x734>
   1468c:	cmp	r7, #0
   14690:	beq	14798 <g_strcmp0@plt+0xdd0>
   14694:	ldr	r3, [r7]
   14698:	cmp	r3, #0
   1469c:	beq	146ac <g_strcmp0@plt+0xce4>
   146a0:	ldr	r3, [r3]
   146a4:	cmp	r3, r0
   146a8:	beq	146c0 <g_strcmp0@plt+0xcf8>
   146ac:	mov	r1, r0
   146b0:	mov	r0, r7
   146b4:	bl	136d4 <g_type_check_instance_is_a@plt>
   146b8:	cmp	r0, #0
   146bc:	beq	14798 <g_strcmp0@plt+0xdd0>
   146c0:	cmp	r4, #0
   146c4:	beq	147e0 <g_strcmp0@plt+0xe18>
   146c8:	mov	r1, r4
   146cc:	ldr	r0, [r7, #24]
   146d0:	bl	139c8 <g_strcmp0@plt>
   146d4:	subs	r8, r0, #0
   146d8:	beq	147c8 <g_strcmp0@plt+0xe00>
   146dc:	mov	r1, #0
   146e0:	mov	r0, r7
   146e4:	bl	14418 <g_strcmp0@plt+0xa50>
   146e8:	ldr	r0, [r7, #24]
   146ec:	bl	135fc <g_free@plt>
   146f0:	mov	r0, r4
   146f4:	bl	13398 <g_strdup@plt>
   146f8:	ldr	r3, [r7, #44]	; 0x2c
   146fc:	cmp	r3, #0
   14700:	str	r0, [r7, #24]
   14704:	beq	14710 <g_strcmp0@plt+0xd48>
   14708:	mov	r0, r7
   1470c:	bl	1420c <g_strcmp0@plt+0x844>
   14710:	mov	r3, r4
   14714:	ldr	r2, [pc, #544]	; 1493c <g_strcmp0@plt+0xf74>
   14718:	mov	r1, #128	; 0x80
   1471c:	ldr	r0, [pc, #540]	; 14940 <g_strcmp0@plt+0xf78>
   14720:	bl	13278 <g_log@plt>
   14724:	mov	r0, r5
   14728:	add	r2, sp, #24
   1472c:	add	r1, sp, #20
   14730:	bl	137e8 <gtk_icon_size_lookup@plt>
   14734:	subs	r8, r0, #0
   14738:	beq	147f8 <g_strcmp0@plt+0xe30>
   1473c:	bl	138fc <gtk_icon_theme_get_default@plt>
   14740:	mov	r3, #0
   14744:	str	r3, [sp]
   14748:	ldr	r2, [sp, #20]
   1474c:	mov	r1, r4
   14750:	bl	13434 <gtk_icon_theme_load_icon@plt>
   14754:	subs	r8, r0, #0
   14758:	beq	1491c <g_strcmp0@plt+0xf54>
   1475c:	mov	r0, r4
   14760:	ldr	r1, [pc, #476]	; 14944 <g_strcmp0@plt+0xf7c>
   14764:	bl	139c8 <g_strcmp0@plt>
   14768:	cmp	r0, #0
   1476c:	beq	148e0 <g_strcmp0@plt+0xf18>
   14770:	ldr	r3, [sp, #20]
   14774:	mov	r0, r8
   14778:	cmp	r3, #0
   1477c:	beq	1478c <g_strcmp0@plt+0xdc4>
   14780:	ldr	r3, [sp, #24]
   14784:	cmp	r3, #0
   14788:	bne	1480c <g_strcmp0@plt+0xe44>
   1478c:	bl	137ac <g_object_unref@plt>
   14790:	mov	r8, #0
   14794:	b	147ac <g_strcmp0@plt+0xde4>
   14798:	ldr	r2, [pc, #424]	; 14948 <g_strcmp0@plt+0xf80>
   1479c:	ldr	r1, [pc, #424]	; 1494c <g_strcmp0@plt+0xf84>
   147a0:	ldr	r0, [pc, #408]	; 14940 <g_strcmp0@plt+0xf78>
   147a4:	bl	13128 <g_return_if_fail_warning@plt>
   147a8:	mov	r8, #0
   147ac:	ldr	r2, [sp, #28]
   147b0:	ldr	r3, [fp]
   147b4:	mov	r0, r8
   147b8:	cmp	r2, r3
   147bc:	bne	14934 <g_strcmp0@plt+0xf6c>
   147c0:	add	sp, sp, #36	; 0x24
   147c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c8:	mov	r3, r4
   147cc:	ldr	r2, [pc, #380]	; 14950 <g_strcmp0@plt+0xf88>
   147d0:	mov	r1, #128	; 0x80
   147d4:	ldr	r0, [pc, #356]	; 14940 <g_strcmp0@plt+0xf78>
   147d8:	bl	13278 <g_log@plt>
   147dc:	b	147ac <g_strcmp0@plt+0xde4>
   147e0:	ldr	r2, [pc, #364]	; 14954 <g_strcmp0@plt+0xf8c>
   147e4:	ldr	r1, [pc, #352]	; 1494c <g_strcmp0@plt+0xf84>
   147e8:	ldr	r0, [pc, #336]	; 14940 <g_strcmp0@plt+0xf78>
   147ec:	mov	r8, r4
   147f0:	bl	13128 <g_return_if_fail_warning@plt>
   147f4:	b	147ac <g_strcmp0@plt+0xde4>
   147f8:	ldr	r2, [pc, #344]	; 14958 <g_strcmp0@plt+0xf90>
   147fc:	mov	r1, #16
   14800:	ldr	r0, [pc, #312]	; 14940 <g_strcmp0@plt+0xf78>
   14804:	bl	13278 <g_log@plt>
   14808:	b	147ac <g_strcmp0@plt+0xde4>
   1480c:	bl	13494 <gdk_pixbuf_get_width@plt>
   14810:	ldr	r1, [sp, #20]
   14814:	bl	19474 <g_strcmp0@plt+0x5aac>
   14818:	mov	r4, #0
   1481c:	mov	sl, r0
   14820:	mov	r0, r8
   14824:	bl	13464 <gdk_pixbuf_get_height@plt>
   14828:	ldr	r1, [sp, #24]
   1482c:	bl	19474 <g_strcmp0@plt+0x5aac>
   14830:	str	r4, [r7, #32]
   14834:	mov	r1, #4
   14838:	mov	r5, r0
   1483c:	str	r0, [sp, #12]
   14840:	mul	r0, r0, sl
   14844:	str	r0, [r7, #36]	; 0x24
   14848:	bl	130d4 <g_malloc_n@plt>
   1484c:	cmp	r5, r4
   14850:	strgt	r4, [sp, #8]
   14854:	movgt	r9, r4
   14858:	str	r0, [r7, #44]	; 0x2c
   1485c:	ble	148c4 <g_strcmp0@plt+0xefc>
   14860:	cmp	sl, #0
   14864:	ble	148b4 <g_strcmp0@plt+0xeec>
   14868:	ldr	r3, [sp, #8]
   1486c:	mov	r4, #0
   14870:	lsl	r5, r3, #2
   14874:	ldr	r2, [sp, #24]
   14878:	ldr	r3, [sp, #20]
   1487c:	str	r2, [sp]
   14880:	mov	r0, r8
   14884:	mul	r1, r4, r3
   14888:	mul	r2, r9, r2
   1488c:	ldr	r6, [r7, #44]	; 0x2c
   14890:	bl	13350 <gdk_pixbuf_new_subpixbuf@plt>
   14894:	add	r4, r4, #1
   14898:	cmp	sl, r4
   1489c:	str	r0, [r6, r5]
   148a0:	add	r5, r5, #4
   148a4:	bne	14874 <g_strcmp0@plt+0xeac>
   148a8:	ldr	r3, [sp, #8]
   148ac:	add	r3, sl, r3
   148b0:	str	r3, [sp, #8]
   148b4:	ldr	r3, [sp, #12]
   148b8:	add	r9, r9, #1
   148bc:	cmp	r3, r9
   148c0:	bne	14860 <g_strcmp0@plt+0xe98>
   148c4:	mov	r0, r8
   148c8:	bl	137ac <g_object_unref@plt>
   148cc:	mov	r0, r7
   148d0:	mov	r1, #1
   148d4:	bl	14418 <g_strcmp0@plt+0xa50>
   148d8:	mov	r8, #1
   148dc:	b	147ac <g_strcmp0@plt+0xde4>
   148e0:	mov	r0, r8
   148e4:	bl	13494 <gdk_pixbuf_get_width@plt>
   148e8:	cmp	r0, #0
   148ec:	add	r3, r0, #7
   148f0:	movge	r3, r0
   148f4:	mov	r0, r8
   148f8:	asr	r3, r3, #3
   148fc:	str	r3, [sp, #20]
   14900:	bl	13464 <gdk_pixbuf_get_height@plt>
   14904:	add	r3, r0, #3
   14908:	cmp	r0, #0
   1490c:	movlt	r0, r3
   14910:	asr	r3, r0, #2
   14914:	str	r3, [sp, #24]
   14918:	b	14770 <g_strcmp0@plt+0xda8>
   1491c:	mov	r3, r4
   14920:	ldr	r2, [pc, #52]	; 1495c <g_strcmp0@plt+0xf94>
   14924:	mov	r1, #128	; 0x80
   14928:	ldr	r0, [pc, #16]	; 14940 <g_strcmp0@plt+0xf78>
   1492c:	bl	13278 <g_log@plt>
   14930:	b	147ac <g_strcmp0@plt+0xde4>
   14934:	bl	135c0 <__stack_chk_fail@plt>
   14938:	andeq	sp, r2, r8, asr #28
   1493c:	andeq	r9, r1, ip, ror sl
   14940:	andeq	r9, r1, ip, ror #14
   14944:	andeq	r9, r1, r0, asr #21
   14948:	andeq	r9, r1, r0, asr #18
   1494c:	andeq	r9, r1, r4, ror #17
   14950:	andeq	r9, r1, r0, asr sl
   14954:	andeq	r9, r1, r0, asr #20
   14958:	andeq	r9, r1, ip, lsl #21
   1495c:	andeq	r9, r1, r8, lsr #21
   14960:	push	{r4, lr}
   14964:	bl	140fc <g_strcmp0@plt+0x734>
   14968:	mov	r1, #0
   1496c:	pop	{r4, lr}
   14970:	b	130bc <g_object_new@plt>
   14974:	cmp	r0, #3
   14978:	ldrls	pc, [pc, r0, lsl #2]
   1497c:	b	149d0 <g_strcmp0@plt+0x1008>
   14980:	andeq	r4, r1, r0, asr #19
   14984:			; <UNDEFINED> instruction: 0x000149b0
   14988:	andeq	r4, r1, r0, lsr #19
   1498c:	muleq	r1, r0, r9
   14990:	mov	r2, #5
   14994:	ldr	r1, [pc, #80]	; 149ec <g_strcmp0@plt+0x1024>
   14998:	mov	r0, #0
   1499c:	b	13608 <dcgettext@plt>
   149a0:	mov	r2, #5
   149a4:	ldr	r1, [pc, #68]	; 149f0 <g_strcmp0@plt+0x1028>
   149a8:	mov	r0, #0
   149ac:	b	13608 <dcgettext@plt>
   149b0:	mov	r2, #5
   149b4:	ldr	r1, [pc, #56]	; 149f4 <g_strcmp0@plt+0x102c>
   149b8:	mov	r0, #0
   149bc:	b	13608 <dcgettext@plt>
   149c0:	mov	r2, #5
   149c4:	ldr	r1, [pc, #44]	; 149f8 <g_strcmp0@plt+0x1030>
   149c8:	mov	r0, #0
   149cc:	b	13608 <dcgettext@plt>
   149d0:	push	{r4, lr}
   149d4:	mov	r1, #16
   149d8:	ldr	r2, [pc, #28]	; 149fc <g_strcmp0@plt+0x1034>
   149dc:	ldr	r0, [pc, #28]	; 14a00 <g_strcmp0@plt+0x1038>
   149e0:	bl	13278 <g_log@plt>
   149e4:	mov	r0, #0
   149e8:	pop	{r4, pc}
   149ec:	andeq	sl, r1, r8, lsr #1
   149f0:	andeq	sl, r1, r4, lsr #1
   149f4:	andeq	sl, r1, r0, lsr #1
   149f8:	strheq	sl, [r1], -r0
   149fc:	strheq	sl, [r1], -r8
   14a00:	andeq	r9, r1, ip, ror #14
   14a04:	cmp	r0, #67	; 0x43
   14a08:	ldrls	pc, [pc, r0, lsl #2]
   14a0c:	b	14f60 <g_strcmp0@plt+0x1598>
   14a10:	andeq	r4, r1, r0, asr pc
   14a14:	andeq	r4, r1, r0, asr #30
   14a18:	andeq	r4, r1, r0, lsr pc
   14a1c:	andeq	r4, r1, r0, lsr #30
   14a20:	andeq	r4, r1, r0, lsl pc
   14a24:	andeq	r4, r1, r0, lsl #30
   14a28:	strdeq	r4, [r1], -r0
   14a2c:	andeq	r4, r1, r0, ror #29
   14a30:	ldrdeq	r4, [r1], -r0
   14a34:	andeq	r4, r1, r0, asr #29
   14a38:			; <UNDEFINED> instruction: 0x00014eb0
   14a3c:	andeq	r4, r1, r0, lsr #29
   14a40:	muleq	r1, r0, lr
   14a44:	andeq	r4, r1, r0, lsl #29
   14a48:	andeq	r4, r1, r0, ror lr
   14a4c:	andeq	r4, r1, r0, ror #28
   14a50:	andeq	r4, r1, r0, asr lr
   14a54:	andeq	r4, r1, r0, asr #28
   14a58:	andeq	r4, r1, r0, lsr lr
   14a5c:	andeq	r4, r1, r0, lsr #28
   14a60:	andeq	r4, r1, r0, lsl lr
   14a64:	andeq	r4, r1, r0, lsl #28
   14a68:	strdeq	r4, [r1], -r0
   14a6c:	andeq	r4, r1, r0, ror #27
   14a70:	ldrdeq	r4, [r1], -r0
   14a74:	andeq	r4, r1, r0, asr #27
   14a78:			; <UNDEFINED> instruction: 0x00014db0
   14a7c:	andeq	r4, r1, r0, lsr #27
   14a80:	muleq	r1, r0, sp
   14a84:	andeq	r4, r1, r0, lsl #27
   14a88:	andeq	r4, r1, r0, ror sp
   14a8c:	andeq	r4, r1, r0, ror #26
   14a90:	andeq	r4, r1, r0, asr sp
   14a94:	andeq	r4, r1, r0, asr #26
   14a98:	andeq	r4, r1, r0, lsr sp
   14a9c:	andeq	r4, r1, r0, lsr #26
   14aa0:	andeq	r4, r1, r0, lsl sp
   14aa4:	andeq	r4, r1, r0, lsl #26
   14aa8:	strdeq	r4, [r1], -r0
   14aac:	andeq	r4, r1, r0, ror #25
   14ab0:	ldrdeq	r4, [r1], -r0
   14ab4:	andeq	r4, r1, r0, asr #25
   14ab8:			; <UNDEFINED> instruction: 0x00014cb0
   14abc:	andeq	r4, r1, r0, lsr #25
   14ac0:	muleq	r1, r0, ip
   14ac4:	andeq	r4, r1, r0, lsl #25
   14ac8:	andeq	r4, r1, r0, ror ip
   14acc:	andeq	r4, r1, r0, ror #24
   14ad0:	andeq	r4, r1, r0, asr ip
   14ad4:	andeq	r4, r1, r0, asr #24
   14ad8:	andeq	r4, r1, r0, lsr ip
   14adc:	andeq	r4, r1, r0, lsr #24
   14ae0:	andeq	r4, r1, r0, lsl ip
   14ae4:	andeq	r4, r1, r0, lsl #24
   14ae8:	strdeq	r4, [r1], -r0
   14aec:	andeq	r4, r1, r0, ror #23
   14af0:	ldrdeq	r4, [r1], -r0
   14af4:	andeq	r4, r1, r0, asr #23
   14af8:			; <UNDEFINED> instruction: 0x00014bb0
   14afc:	andeq	r4, r1, r0, lsr #23
   14b00:	muleq	r1, r0, fp
   14b04:	andeq	r4, r1, r0, lsl #23
   14b08:	andeq	r4, r1, r0, ror fp
   14b0c:	andeq	r4, r1, r0, ror #22
   14b10:	andeq	r4, r1, r0, asr fp
   14b14:	andeq	r4, r1, r0, asr #22
   14b18:	andeq	r4, r1, r0, lsr fp
   14b1c:	andeq	r4, r1, r0, lsr #22
   14b20:	mov	r2, #5
   14b24:	ldr	r1, [pc, #1104]	; 14f7c <g_strcmp0@plt+0x15b4>
   14b28:	mov	r0, #0
   14b2c:	b	13608 <dcgettext@plt>
   14b30:	mov	r2, #5
   14b34:	ldr	r1, [pc, #1092]	; 14f80 <g_strcmp0@plt+0x15b8>
   14b38:	mov	r0, #0
   14b3c:	b	13608 <dcgettext@plt>
   14b40:	mov	r2, #5
   14b44:	ldr	r1, [pc, #1080]	; 14f84 <g_strcmp0@plt+0x15bc>
   14b48:	mov	r0, #0
   14b4c:	b	13608 <dcgettext@plt>
   14b50:	mov	r2, #5
   14b54:	ldr	r1, [pc, #1068]	; 14f88 <g_strcmp0@plt+0x15c0>
   14b58:	mov	r0, #0
   14b5c:	b	13608 <dcgettext@plt>
   14b60:	mov	r2, #5
   14b64:	ldr	r1, [pc, #1056]	; 14f8c <g_strcmp0@plt+0x15c4>
   14b68:	mov	r0, #0
   14b6c:	b	13608 <dcgettext@plt>
   14b70:	mov	r2, #5
   14b74:	ldr	r1, [pc, #1044]	; 14f90 <g_strcmp0@plt+0x15c8>
   14b78:	mov	r0, #0
   14b7c:	b	13608 <dcgettext@plt>
   14b80:	mov	r2, #5
   14b84:	ldr	r1, [pc, #1032]	; 14f94 <g_strcmp0@plt+0x15cc>
   14b88:	mov	r0, #0
   14b8c:	b	13608 <dcgettext@plt>
   14b90:	mov	r2, #5
   14b94:	ldr	r1, [pc, #1020]	; 14f98 <g_strcmp0@plt+0x15d0>
   14b98:	mov	r0, #0
   14b9c:	b	13608 <dcgettext@plt>
   14ba0:	mov	r2, #5
   14ba4:	ldr	r1, [pc, #1008]	; 14f9c <g_strcmp0@plt+0x15d4>
   14ba8:	mov	r0, #0
   14bac:	b	13608 <dcgettext@plt>
   14bb0:	mov	r2, #5
   14bb4:	ldr	r1, [pc, #996]	; 14fa0 <g_strcmp0@plt+0x15d8>
   14bb8:	mov	r0, #0
   14bbc:	b	13608 <dcgettext@plt>
   14bc0:	mov	r2, #5
   14bc4:	ldr	r1, [pc, #984]	; 14fa4 <g_strcmp0@plt+0x15dc>
   14bc8:	mov	r0, #0
   14bcc:	b	13608 <dcgettext@plt>
   14bd0:	mov	r2, #5
   14bd4:	ldr	r1, [pc, #972]	; 14fa8 <g_strcmp0@plt+0x15e0>
   14bd8:	mov	r0, #0
   14bdc:	b	13608 <dcgettext@plt>
   14be0:	mov	r2, #5
   14be4:	ldr	r1, [pc, #960]	; 14fac <g_strcmp0@plt+0x15e4>
   14be8:	mov	r0, #0
   14bec:	b	13608 <dcgettext@plt>
   14bf0:	mov	r2, #5
   14bf4:	ldr	r1, [pc, #948]	; 14fb0 <g_strcmp0@plt+0x15e8>
   14bf8:	mov	r0, #0
   14bfc:	b	13608 <dcgettext@plt>
   14c00:	mov	r2, #5
   14c04:	ldr	r1, [pc, #936]	; 14fb4 <g_strcmp0@plt+0x15ec>
   14c08:	mov	r0, #0
   14c0c:	b	13608 <dcgettext@plt>
   14c10:	mov	r2, #5
   14c14:	ldr	r1, [pc, #924]	; 14fb8 <g_strcmp0@plt+0x15f0>
   14c18:	mov	r0, #0
   14c1c:	b	13608 <dcgettext@plt>
   14c20:	mov	r2, #5
   14c24:	ldr	r1, [pc, #912]	; 14fbc <g_strcmp0@plt+0x15f4>
   14c28:	mov	r0, #0
   14c2c:	b	13608 <dcgettext@plt>
   14c30:	mov	r2, #5
   14c34:	ldr	r1, [pc, #900]	; 14fc0 <g_strcmp0@plt+0x15f8>
   14c38:	mov	r0, #0
   14c3c:	b	13608 <dcgettext@plt>
   14c40:	mov	r2, #5
   14c44:	ldr	r1, [pc, #888]	; 14fc4 <g_strcmp0@plt+0x15fc>
   14c48:	mov	r0, #0
   14c4c:	b	13608 <dcgettext@plt>
   14c50:	mov	r2, #5
   14c54:	ldr	r1, [pc, #876]	; 14fc8 <g_strcmp0@plt+0x1600>
   14c58:	mov	r0, #0
   14c5c:	b	13608 <dcgettext@plt>
   14c60:	mov	r2, #5
   14c64:	ldr	r1, [pc, #864]	; 14fcc <g_strcmp0@plt+0x1604>
   14c68:	mov	r0, #0
   14c6c:	b	13608 <dcgettext@plt>
   14c70:	mov	r2, #5
   14c74:	ldr	r1, [pc, #852]	; 14fd0 <g_strcmp0@plt+0x1608>
   14c78:	mov	r0, #0
   14c7c:	b	13608 <dcgettext@plt>
   14c80:	mov	r2, #5
   14c84:	ldr	r1, [pc, #840]	; 14fd4 <g_strcmp0@plt+0x160c>
   14c88:	mov	r0, #0
   14c8c:	b	13608 <dcgettext@plt>
   14c90:	mov	r2, #5
   14c94:	ldr	r1, [pc, #828]	; 14fd8 <g_strcmp0@plt+0x1610>
   14c98:	mov	r0, #0
   14c9c:	b	13608 <dcgettext@plt>
   14ca0:	mov	r2, #5
   14ca4:	ldr	r1, [pc, #816]	; 14fdc <g_strcmp0@plt+0x1614>
   14ca8:	mov	r0, #0
   14cac:	b	13608 <dcgettext@plt>
   14cb0:	mov	r2, #5
   14cb4:	ldr	r1, [pc, #804]	; 14fe0 <g_strcmp0@plt+0x1618>
   14cb8:	mov	r0, #0
   14cbc:	b	13608 <dcgettext@plt>
   14cc0:	mov	r2, #5
   14cc4:	ldr	r1, [pc, #792]	; 14fe4 <g_strcmp0@plt+0x161c>
   14cc8:	mov	r0, #0
   14ccc:	b	13608 <dcgettext@plt>
   14cd0:	mov	r2, #5
   14cd4:	ldr	r1, [pc, #780]	; 14fe8 <g_strcmp0@plt+0x1620>
   14cd8:	mov	r0, #0
   14cdc:	b	13608 <dcgettext@plt>
   14ce0:	mov	r2, #5
   14ce4:	ldr	r1, [pc, #768]	; 14fec <g_strcmp0@plt+0x1624>
   14ce8:	mov	r0, #0
   14cec:	b	13608 <dcgettext@plt>
   14cf0:	mov	r2, #5
   14cf4:	ldr	r1, [pc, #756]	; 14ff0 <g_strcmp0@plt+0x1628>
   14cf8:	mov	r0, #0
   14cfc:	b	13608 <dcgettext@plt>
   14d00:	mov	r2, #5
   14d04:	ldr	r1, [pc, #744]	; 14ff4 <g_strcmp0@plt+0x162c>
   14d08:	mov	r0, #0
   14d0c:	b	13608 <dcgettext@plt>
   14d10:	mov	r2, #5
   14d14:	ldr	r1, [pc, #732]	; 14ff8 <g_strcmp0@plt+0x1630>
   14d18:	mov	r0, #0
   14d1c:	b	13608 <dcgettext@plt>
   14d20:	mov	r2, #5
   14d24:	ldr	r1, [pc, #720]	; 14ffc <g_strcmp0@plt+0x1634>
   14d28:	mov	r0, #0
   14d2c:	b	13608 <dcgettext@plt>
   14d30:	mov	r2, #5
   14d34:	ldr	r1, [pc, #708]	; 15000 <g_strcmp0@plt+0x1638>
   14d38:	mov	r0, #0
   14d3c:	b	13608 <dcgettext@plt>
   14d40:	mov	r2, #5
   14d44:	ldr	r1, [pc, #696]	; 15004 <g_strcmp0@plt+0x163c>
   14d48:	mov	r0, #0
   14d4c:	b	13608 <dcgettext@plt>
   14d50:	mov	r2, #5
   14d54:	ldr	r1, [pc, #684]	; 15008 <g_strcmp0@plt+0x1640>
   14d58:	mov	r0, #0
   14d5c:	b	13608 <dcgettext@plt>
   14d60:	mov	r2, #5
   14d64:	ldr	r1, [pc, #672]	; 1500c <g_strcmp0@plt+0x1644>
   14d68:	mov	r0, #0
   14d6c:	b	13608 <dcgettext@plt>
   14d70:	mov	r2, #5
   14d74:	ldr	r1, [pc, #660]	; 15010 <g_strcmp0@plt+0x1648>
   14d78:	mov	r0, #0
   14d7c:	b	13608 <dcgettext@plt>
   14d80:	mov	r2, #5
   14d84:	ldr	r1, [pc, #648]	; 15014 <g_strcmp0@plt+0x164c>
   14d88:	mov	r0, #0
   14d8c:	b	13608 <dcgettext@plt>
   14d90:	mov	r2, #5
   14d94:	ldr	r1, [pc, #636]	; 15018 <g_strcmp0@plt+0x1650>
   14d98:	mov	r0, #0
   14d9c:	b	13608 <dcgettext@plt>
   14da0:	mov	r2, #5
   14da4:	ldr	r1, [pc, #624]	; 1501c <g_strcmp0@plt+0x1654>
   14da8:	mov	r0, #0
   14dac:	b	13608 <dcgettext@plt>
   14db0:	mov	r2, #5
   14db4:	ldr	r1, [pc, #612]	; 15020 <g_strcmp0@plt+0x1658>
   14db8:	mov	r0, #0
   14dbc:	b	13608 <dcgettext@plt>
   14dc0:	mov	r2, #5
   14dc4:	ldr	r1, [pc, #600]	; 15024 <g_strcmp0@plt+0x165c>
   14dc8:	mov	r0, #0
   14dcc:	b	13608 <dcgettext@plt>
   14dd0:	mov	r2, #5
   14dd4:	ldr	r1, [pc, #588]	; 15028 <g_strcmp0@plt+0x1660>
   14dd8:	mov	r0, #0
   14ddc:	b	13608 <dcgettext@plt>
   14de0:	mov	r2, #5
   14de4:	ldr	r1, [pc, #576]	; 1502c <g_strcmp0@plt+0x1664>
   14de8:	mov	r0, #0
   14dec:	b	13608 <dcgettext@plt>
   14df0:	mov	r2, #5
   14df4:	ldr	r1, [pc, #564]	; 15030 <g_strcmp0@plt+0x1668>
   14df8:	mov	r0, #0
   14dfc:	b	13608 <dcgettext@plt>
   14e00:	mov	r2, #5
   14e04:	ldr	r1, [pc, #552]	; 15034 <g_strcmp0@plt+0x166c>
   14e08:	mov	r0, #0
   14e0c:	b	13608 <dcgettext@plt>
   14e10:	mov	r2, #5
   14e14:	ldr	r1, [pc, #540]	; 15038 <g_strcmp0@plt+0x1670>
   14e18:	mov	r0, #0
   14e1c:	b	13608 <dcgettext@plt>
   14e20:	mov	r2, #5
   14e24:	ldr	r1, [pc, #528]	; 1503c <g_strcmp0@plt+0x1674>
   14e28:	mov	r0, #0
   14e2c:	b	13608 <dcgettext@plt>
   14e30:	mov	r2, #5
   14e34:	ldr	r1, [pc, #516]	; 15040 <g_strcmp0@plt+0x1678>
   14e38:	mov	r0, #0
   14e3c:	b	13608 <dcgettext@plt>
   14e40:	mov	r2, #5
   14e44:	ldr	r1, [pc, #504]	; 15044 <g_strcmp0@plt+0x167c>
   14e48:	mov	r0, #0
   14e4c:	b	13608 <dcgettext@plt>
   14e50:	mov	r2, #5
   14e54:	ldr	r1, [pc, #492]	; 15048 <g_strcmp0@plt+0x1680>
   14e58:	mov	r0, #0
   14e5c:	b	13608 <dcgettext@plt>
   14e60:	mov	r2, #5
   14e64:	ldr	r1, [pc, #480]	; 1504c <g_strcmp0@plt+0x1684>
   14e68:	mov	r0, #0
   14e6c:	b	13608 <dcgettext@plt>
   14e70:	mov	r2, #5
   14e74:	ldr	r1, [pc, #468]	; 15050 <g_strcmp0@plt+0x1688>
   14e78:	mov	r0, #0
   14e7c:	b	13608 <dcgettext@plt>
   14e80:	mov	r2, #5
   14e84:	ldr	r1, [pc, #456]	; 15054 <g_strcmp0@plt+0x168c>
   14e88:	mov	r0, #0
   14e8c:	b	13608 <dcgettext@plt>
   14e90:	mov	r2, #5
   14e94:	ldr	r1, [pc, #444]	; 15058 <g_strcmp0@plt+0x1690>
   14e98:	mov	r0, #0
   14e9c:	b	13608 <dcgettext@plt>
   14ea0:	mov	r2, #5
   14ea4:	ldr	r1, [pc, #432]	; 1505c <g_strcmp0@plt+0x1694>
   14ea8:	mov	r0, #0
   14eac:	b	13608 <dcgettext@plt>
   14eb0:	mov	r2, #5
   14eb4:	ldr	r1, [pc, #420]	; 15060 <g_strcmp0@plt+0x1698>
   14eb8:	mov	r0, #0
   14ebc:	b	13608 <dcgettext@plt>
   14ec0:	mov	r2, #5
   14ec4:	ldr	r1, [pc, #408]	; 15064 <g_strcmp0@plt+0x169c>
   14ec8:	mov	r0, #0
   14ecc:	b	13608 <dcgettext@plt>
   14ed0:	mov	r2, #5
   14ed4:	ldr	r1, [pc, #396]	; 15068 <g_strcmp0@plt+0x16a0>
   14ed8:	mov	r0, #0
   14edc:	b	13608 <dcgettext@plt>
   14ee0:	mov	r2, #5
   14ee4:	ldr	r1, [pc, #384]	; 1506c <g_strcmp0@plt+0x16a4>
   14ee8:	mov	r0, #0
   14eec:	b	13608 <dcgettext@plt>
   14ef0:	mov	r2, #5
   14ef4:	ldr	r1, [pc, #372]	; 15070 <g_strcmp0@plt+0x16a8>
   14ef8:	mov	r0, #0
   14efc:	b	13608 <dcgettext@plt>
   14f00:	mov	r2, #5
   14f04:	ldr	r1, [pc, #360]	; 15074 <g_strcmp0@plt+0x16ac>
   14f08:	mov	r0, #0
   14f0c:	b	13608 <dcgettext@plt>
   14f10:	mov	r2, #5
   14f14:	ldr	r1, [pc, #348]	; 15078 <g_strcmp0@plt+0x16b0>
   14f18:	mov	r0, #0
   14f1c:	b	13608 <dcgettext@plt>
   14f20:	mov	r2, #5
   14f24:	ldr	r1, [pc, #336]	; 1507c <g_strcmp0@plt+0x16b4>
   14f28:	mov	r0, #0
   14f2c:	b	13608 <dcgettext@plt>
   14f30:	mov	r2, #5
   14f34:	ldr	r1, [pc, #324]	; 15080 <g_strcmp0@plt+0x16b8>
   14f38:	mov	r0, #0
   14f3c:	b	13608 <dcgettext@plt>
   14f40:	mov	r2, #5
   14f44:	ldr	r1, [pc, #312]	; 15084 <g_strcmp0@plt+0x16bc>
   14f48:	mov	r0, #0
   14f4c:	b	13608 <dcgettext@plt>
   14f50:	mov	r2, #5
   14f54:	ldr	r1, [pc, #300]	; 15088 <g_strcmp0@plt+0x16c0>
   14f58:	mov	r0, #0
   14f5c:	b	13608 <dcgettext@plt>
   14f60:	push	{r4, lr}
   14f64:	mov	r1, #16
   14f68:	ldr	r2, [pc, #284]	; 1508c <g_strcmp0@plt+0x16c4>
   14f6c:	ldr	r0, [pc, #284]	; 15090 <g_strcmp0@plt+0x16c8>
   14f70:	bl	13278 <g_log@plt>
   14f74:	mov	r0, #0
   14f78:	pop	{r4, pc}
   14f7c:	andeq	sl, r1, ip, asr #17
   14f80:			; <UNDEFINED> instruction: 0x0001a8b4
   14f84:	muleq	r1, r8, r8
   14f88:	andeq	sl, r1, r8, ror r8
   14f8c:	andeq	sl, r1, r0, ror #16
   14f90:	andeq	sl, r1, r8, lsr r8
   14f94:	andeq	sl, r1, r4, lsl r8
   14f98:	andeq	sl, r1, ip, ror #15
   14f9c:	andeq	sl, r1, ip, asr #15
   14fa0:			; <UNDEFINED> instruction: 0x0001a7b0
   14fa4:	muleq	r1, r8, r7
   14fa8:	andeq	sl, r1, ip, ror r7
   14fac:	andeq	sl, r1, r8, ror #14
   14fb0:	andeq	sl, r1, r0, asr r7
   14fb4:	andeq	sl, r1, r4, lsr r7
   14fb8:	andeq	sl, r1, r8, lsl r7
   14fbc:	strdeq	sl, [r1], -r4
   14fc0:	andeq	sl, r1, ip, asr #13
   14fc4:			; <UNDEFINED> instruction: 0x0001a6b8
   14fc8:	andeq	sl, r1, r0, lsr #13
   14fcc:	andeq	sl, r1, r4, lsl #13
   14fd0:	andeq	sl, r1, r4, ror #12
   14fd4:	andeq	sl, r1, r8, lsr r6
   14fd8:	andeq	sl, r1, ip, lsl #12
   14fdc:	andeq	sl, r1, ip, ror #11
   14fe0:	andeq	sl, r1, r4, asr #11
   14fe4:	andeq	sl, r1, r0, lsr #11
   14fe8:	andeq	sl, r1, ip, lsl #11
   14fec:	andeq	sl, r1, r4, ror r5
   14ff0:	andeq	sl, r1, ip, asr r5
   14ff4:	andeq	sl, r1, r8, asr #8
   14ff8:	andeq	sl, r1, ip, lsr #8
   14ffc:	andeq	sl, r1, r4, lsl #8
   15000:	andeq	sl, r1, r4, ror #7
   15004:	andeq	sl, r1, r8, lsr r5
   15008:	andeq	sl, r1, r0, asr #7
   1500c:	andeq	sl, r1, ip, lsl r5
   15010:	andeq	sl, r1, r4, lsl #10
   15014:	andeq	sl, r1, ip, ror #9
   15018:	andeq	sl, r1, r4, asr #9
   1501c:	andeq	sl, r1, ip, lsr #9
   15020:	muleq	r1, ip, r4
   15024:	andeq	sl, r1, r0, lsr #7
   15028:	andeq	sl, r1, r8, ror r3
   1502c:	andeq	sl, r1, r8, lsl #9
   15030:	andeq	sl, r1, r0, ror r4
   15034:	andeq	sl, r1, r4, asr r3
   15038:	andeq	sl, r1, r0, lsl r3
   1503c:	strdeq	sl, [r1], -r0
   15040:	andeq	sl, r1, ip, lsl #2
   15044:	andeq	sl, r1, ip, lsr r3
   15048:	ldrdeq	sl, [r1], -ip
   1504c:	andeq	sl, r1, ip, lsr r1
   15050:	muleq	r1, r4, r2
   15054:	andeq	sl, r1, r4, ror r2
   15058:	andeq	sl, r1, r8, asr r2
   1505c:	andeq	sl, r1, r0, asr #4
   15060:	andeq	sl, r1, r4, lsr #4
   15064:	andeq	sl, r1, r0, lsl #4
   15068:	andeq	sl, r1, r4, ror #3
   1506c:	andeq	sl, r1, r4, asr #3
   15070:			; <UNDEFINED> instruction: 0x0001a2b0
   15074:	andeq	sl, r1, r0, lsr #3
   15078:	andeq	sl, r1, r8, ror r1
   1507c:	andeq	sl, r1, r8, asr r1
   15080:	andeq	sl, r1, ip, ror #1
   15084:	andeq	sl, r1, ip, lsr #2
   15088:	andeq	sl, r1, ip, asr #1
   1508c:	ldrdeq	sl, [r1], -ip
   15090:	andeq	r9, r1, ip, ror #14
   15094:	cmp	r0, #67	; 0x43
   15098:	ldrls	pc, [pc, r0, lsl #2]
   1509c:	b	155f0 <g_strcmp0@plt+0x1c28>
   150a0:	andeq	r5, r1, r0, ror #11
   150a4:	ldrdeq	r5, [r1], -r0
   150a8:	andeq	r5, r1, r0, asr #11
   150ac:			; <UNDEFINED> instruction: 0x000155b0
   150b0:	andeq	r5, r1, r0, lsr #11
   150b4:	muleq	r1, r0, r5
   150b8:	andeq	r5, r1, r0, lsl #11
   150bc:	andeq	r5, r1, r0, ror r5
   150c0:	andeq	r5, r1, r0, ror #10
   150c4:	andeq	r5, r1, r0, asr r5
   150c8:	andeq	r5, r1, r0, asr #10
   150cc:	andeq	r5, r1, r0, lsr r5
   150d0:	andeq	r5, r1, r0, lsr #10
   150d4:	andeq	r5, r1, r0, lsl r5
   150d8:	andeq	r5, r1, r0, lsl #10
   150dc:	strdeq	r5, [r1], -r0
   150e0:	andeq	r5, r1, r0, ror #9
   150e4:	ldrdeq	r5, [r1], -r0
   150e8:	andeq	r5, r1, r0, asr #9
   150ec:			; <UNDEFINED> instruction: 0x000154b0
   150f0:	andeq	r5, r1, r0, lsr #9
   150f4:	muleq	r1, r0, r4
   150f8:	andeq	r5, r1, r0, lsl #9
   150fc:	andeq	r5, r1, r0, ror r4
   15100:	andeq	r5, r1, r0, ror #8
   15104:	andeq	r5, r1, r0, asr r4
   15108:	andeq	r5, r1, r0, asr #8
   1510c:	andeq	r5, r1, r0, lsr r4
   15110:	andeq	r5, r1, r0, lsr #8
   15114:	andeq	r5, r1, r0, lsl r4
   15118:	andeq	r5, r1, r0, lsl #8
   1511c:	strdeq	r5, [r1], -r0
   15120:	andeq	r5, r1, r0, ror #7
   15124:	ldrdeq	r5, [r1], -r0
   15128:	andeq	r5, r1, r0, asr #7
   1512c:			; <UNDEFINED> instruction: 0x000153b0
   15130:	andeq	r5, r1, r0, lsr #7
   15134:	muleq	r1, r0, r3
   15138:	andeq	r5, r1, r0, lsl #7
   1513c:	andeq	r5, r1, r0, ror r3
   15140:	andeq	r5, r1, r0, ror #6
   15144:	andeq	r5, r1, r0, asr r3
   15148:	andeq	r5, r1, r0, asr #6
   1514c:	andeq	r5, r1, r0, lsr r3
   15150:	andeq	r5, r1, r0, lsr #6
   15154:	andeq	r5, r1, r0, lsl r3
   15158:	andeq	r5, r1, r0, lsl #6
   1515c:	strdeq	r5, [r1], -r0
   15160:	andeq	r5, r1, r0, ror #5
   15164:	ldrdeq	r5, [r1], -r0
   15168:	andeq	r5, r1, r0, asr #5
   1516c:			; <UNDEFINED> instruction: 0x000152b0
   15170:	andeq	r5, r1, r0, lsr #5
   15174:	muleq	r1, r0, r2
   15178:	andeq	r5, r1, r0, lsl #5
   1517c:	andeq	r5, r1, r0, ror r2
   15180:	andeq	r5, r1, r0, ror #4
   15184:	andeq	r5, r1, r0, asr r2
   15188:	andeq	r5, r1, r0, asr #4
   1518c:	andeq	r5, r1, r0, lsr r2
   15190:	andeq	r5, r1, r0, lsr #4
   15194:	andeq	r5, r1, r0, lsl r2
   15198:	andeq	r5, r1, r0, lsl #4
   1519c:	strdeq	r5, [r1], -r0
   151a0:	andeq	r5, r1, r0, ror #3
   151a4:	ldrdeq	r5, [r1], -r0
   151a8:	andeq	r5, r1, r0, asr #3
   151ac:			; <UNDEFINED> instruction: 0x000151b0
   151b0:	mov	r2, #5
   151b4:	ldr	r1, [pc, #1084]	; 155f8 <g_strcmp0@plt+0x1c30>
   151b8:	mov	r0, #0
   151bc:	b	13608 <dcgettext@plt>
   151c0:	mov	r2, #5
   151c4:	ldr	r1, [pc, #1072]	; 155fc <g_strcmp0@plt+0x1c34>
   151c8:	mov	r0, #0
   151cc:	b	13608 <dcgettext@plt>
   151d0:	mov	r2, #5
   151d4:	ldr	r1, [pc, #1060]	; 15600 <g_strcmp0@plt+0x1c38>
   151d8:	mov	r0, #0
   151dc:	b	13608 <dcgettext@plt>
   151e0:	mov	r2, #5
   151e4:	ldr	r1, [pc, #1048]	; 15604 <g_strcmp0@plt+0x1c3c>
   151e8:	mov	r0, #0
   151ec:	b	13608 <dcgettext@plt>
   151f0:	mov	r2, #5
   151f4:	ldr	r1, [pc, #1036]	; 15608 <g_strcmp0@plt+0x1c40>
   151f8:	mov	r0, #0
   151fc:	b	13608 <dcgettext@plt>
   15200:	mov	r2, #5
   15204:	ldr	r1, [pc, #1024]	; 1560c <g_strcmp0@plt+0x1c44>
   15208:	mov	r0, #0
   1520c:	b	13608 <dcgettext@plt>
   15210:	mov	r2, #5
   15214:	ldr	r1, [pc, #1012]	; 15610 <g_strcmp0@plt+0x1c48>
   15218:	mov	r0, #0
   1521c:	b	13608 <dcgettext@plt>
   15220:	mov	r2, #5
   15224:	ldr	r1, [pc, #1000]	; 15614 <g_strcmp0@plt+0x1c4c>
   15228:	mov	r0, #0
   1522c:	b	13608 <dcgettext@plt>
   15230:	mov	r2, #5
   15234:	ldr	r1, [pc, #988]	; 15618 <g_strcmp0@plt+0x1c50>
   15238:	mov	r0, #0
   1523c:	b	13608 <dcgettext@plt>
   15240:	mov	r2, #5
   15244:	ldr	r1, [pc, #976]	; 1561c <g_strcmp0@plt+0x1c54>
   15248:	mov	r0, #0
   1524c:	b	13608 <dcgettext@plt>
   15250:	mov	r2, #5
   15254:	ldr	r1, [pc, #964]	; 15620 <g_strcmp0@plt+0x1c58>
   15258:	mov	r0, #0
   1525c:	b	13608 <dcgettext@plt>
   15260:	mov	r2, #5
   15264:	ldr	r1, [pc, #952]	; 15624 <g_strcmp0@plt+0x1c5c>
   15268:	mov	r0, #0
   1526c:	b	13608 <dcgettext@plt>
   15270:	mov	r2, #5
   15274:	ldr	r1, [pc, #940]	; 15628 <g_strcmp0@plt+0x1c60>
   15278:	mov	r0, #0
   1527c:	b	13608 <dcgettext@plt>
   15280:	mov	r2, #5
   15284:	ldr	r1, [pc, #928]	; 1562c <g_strcmp0@plt+0x1c64>
   15288:	mov	r0, #0
   1528c:	b	13608 <dcgettext@plt>
   15290:	mov	r2, #5
   15294:	ldr	r1, [pc, #916]	; 15630 <g_strcmp0@plt+0x1c68>
   15298:	mov	r0, #0
   1529c:	b	13608 <dcgettext@plt>
   152a0:	mov	r2, #5
   152a4:	ldr	r1, [pc, #904]	; 15634 <g_strcmp0@plt+0x1c6c>
   152a8:	mov	r0, #0
   152ac:	b	13608 <dcgettext@plt>
   152b0:	mov	r2, #5
   152b4:	ldr	r1, [pc, #892]	; 15638 <g_strcmp0@plt+0x1c70>
   152b8:	mov	r0, #0
   152bc:	b	13608 <dcgettext@plt>
   152c0:	mov	r2, #5
   152c4:	ldr	r1, [pc, #880]	; 1563c <g_strcmp0@plt+0x1c74>
   152c8:	mov	r0, #0
   152cc:	b	13608 <dcgettext@plt>
   152d0:	mov	r2, #5
   152d4:	ldr	r1, [pc, #868]	; 15640 <g_strcmp0@plt+0x1c78>
   152d8:	mov	r0, #0
   152dc:	b	13608 <dcgettext@plt>
   152e0:	mov	r2, #5
   152e4:	ldr	r1, [pc, #856]	; 15644 <g_strcmp0@plt+0x1c7c>
   152e8:	mov	r0, #0
   152ec:	b	13608 <dcgettext@plt>
   152f0:	mov	r2, #5
   152f4:	ldr	r1, [pc, #844]	; 15648 <g_strcmp0@plt+0x1c80>
   152f8:	mov	r0, #0
   152fc:	b	13608 <dcgettext@plt>
   15300:	mov	r2, #5
   15304:	ldr	r1, [pc, #832]	; 1564c <g_strcmp0@plt+0x1c84>
   15308:	mov	r0, #0
   1530c:	b	13608 <dcgettext@plt>
   15310:	mov	r2, #5
   15314:	ldr	r1, [pc, #820]	; 15650 <g_strcmp0@plt+0x1c88>
   15318:	mov	r0, #0
   1531c:	b	13608 <dcgettext@plt>
   15320:	mov	r2, #5
   15324:	ldr	r1, [pc, #808]	; 15654 <g_strcmp0@plt+0x1c8c>
   15328:	mov	r0, #0
   1532c:	b	13608 <dcgettext@plt>
   15330:	mov	r2, #5
   15334:	ldr	r1, [pc, #796]	; 15658 <g_strcmp0@plt+0x1c90>
   15338:	mov	r0, #0
   1533c:	b	13608 <dcgettext@plt>
   15340:	mov	r2, #5
   15344:	ldr	r1, [pc, #784]	; 1565c <g_strcmp0@plt+0x1c94>
   15348:	mov	r0, #0
   1534c:	b	13608 <dcgettext@plt>
   15350:	mov	r2, #5
   15354:	ldr	r1, [pc, #772]	; 15660 <g_strcmp0@plt+0x1c98>
   15358:	mov	r0, #0
   1535c:	b	13608 <dcgettext@plt>
   15360:	mov	r2, #5
   15364:	ldr	r1, [pc, #760]	; 15664 <g_strcmp0@plt+0x1c9c>
   15368:	mov	r0, #0
   1536c:	b	13608 <dcgettext@plt>
   15370:	mov	r2, #5
   15374:	ldr	r1, [pc, #748]	; 15668 <g_strcmp0@plt+0x1ca0>
   15378:	mov	r0, #0
   1537c:	b	13608 <dcgettext@plt>
   15380:	mov	r2, #5
   15384:	ldr	r1, [pc, #736]	; 1566c <g_strcmp0@plt+0x1ca4>
   15388:	mov	r0, #0
   1538c:	b	13608 <dcgettext@plt>
   15390:	mov	r2, #5
   15394:	ldr	r1, [pc, #724]	; 15670 <g_strcmp0@plt+0x1ca8>
   15398:	mov	r0, #0
   1539c:	b	13608 <dcgettext@plt>
   153a0:	mov	r2, #5
   153a4:	ldr	r1, [pc, #712]	; 15674 <g_strcmp0@plt+0x1cac>
   153a8:	mov	r0, #0
   153ac:	b	13608 <dcgettext@plt>
   153b0:	mov	r2, #5
   153b4:	ldr	r1, [pc, #700]	; 15678 <g_strcmp0@plt+0x1cb0>
   153b8:	mov	r0, #0
   153bc:	b	13608 <dcgettext@plt>
   153c0:	mov	r2, #5
   153c4:	ldr	r1, [pc, #688]	; 1567c <g_strcmp0@plt+0x1cb4>
   153c8:	mov	r0, #0
   153cc:	b	13608 <dcgettext@plt>
   153d0:	mov	r2, #5
   153d4:	ldr	r1, [pc, #676]	; 15680 <g_strcmp0@plt+0x1cb8>
   153d8:	mov	r0, #0
   153dc:	b	13608 <dcgettext@plt>
   153e0:	mov	r2, #5
   153e4:	ldr	r1, [pc, #664]	; 15684 <g_strcmp0@plt+0x1cbc>
   153e8:	mov	r0, #0
   153ec:	b	13608 <dcgettext@plt>
   153f0:	mov	r2, #5
   153f4:	ldr	r1, [pc, #652]	; 15688 <g_strcmp0@plt+0x1cc0>
   153f8:	mov	r0, #0
   153fc:	b	13608 <dcgettext@plt>
   15400:	mov	r2, #5
   15404:	ldr	r1, [pc, #640]	; 1568c <g_strcmp0@plt+0x1cc4>
   15408:	mov	r0, #0
   1540c:	b	13608 <dcgettext@plt>
   15410:	mov	r2, #5
   15414:	ldr	r1, [pc, #628]	; 15690 <g_strcmp0@plt+0x1cc8>
   15418:	mov	r0, #0
   1541c:	b	13608 <dcgettext@plt>
   15420:	mov	r2, #5
   15424:	ldr	r1, [pc, #616]	; 15694 <g_strcmp0@plt+0x1ccc>
   15428:	mov	r0, #0
   1542c:	b	13608 <dcgettext@plt>
   15430:	mov	r2, #5
   15434:	ldr	r1, [pc, #604]	; 15698 <g_strcmp0@plt+0x1cd0>
   15438:	mov	r0, #0
   1543c:	b	13608 <dcgettext@plt>
   15440:	mov	r2, #5
   15444:	ldr	r1, [pc, #592]	; 1569c <g_strcmp0@plt+0x1cd4>
   15448:	mov	r0, #0
   1544c:	b	13608 <dcgettext@plt>
   15450:	mov	r2, #5
   15454:	ldr	r1, [pc, #580]	; 156a0 <g_strcmp0@plt+0x1cd8>
   15458:	mov	r0, #0
   1545c:	b	13608 <dcgettext@plt>
   15460:	mov	r2, #5
   15464:	ldr	r1, [pc, #568]	; 156a4 <g_strcmp0@plt+0x1cdc>
   15468:	mov	r0, #0
   1546c:	b	13608 <dcgettext@plt>
   15470:	mov	r2, #5
   15474:	ldr	r1, [pc, #556]	; 156a8 <g_strcmp0@plt+0x1ce0>
   15478:	mov	r0, #0
   1547c:	b	13608 <dcgettext@plt>
   15480:	mov	r2, #5
   15484:	ldr	r1, [pc, #544]	; 156ac <g_strcmp0@plt+0x1ce4>
   15488:	mov	r0, #0
   1548c:	b	13608 <dcgettext@plt>
   15490:	mov	r2, #5
   15494:	ldr	r1, [pc, #532]	; 156b0 <g_strcmp0@plt+0x1ce8>
   15498:	mov	r0, #0
   1549c:	b	13608 <dcgettext@plt>
   154a0:	mov	r2, #5
   154a4:	ldr	r1, [pc, #520]	; 156b4 <g_strcmp0@plt+0x1cec>
   154a8:	mov	r0, #0
   154ac:	b	13608 <dcgettext@plt>
   154b0:	mov	r2, #5
   154b4:	ldr	r1, [pc, #508]	; 156b8 <g_strcmp0@plt+0x1cf0>
   154b8:	mov	r0, #0
   154bc:	b	13608 <dcgettext@plt>
   154c0:	mov	r2, #5
   154c4:	ldr	r1, [pc, #496]	; 156bc <g_strcmp0@plt+0x1cf4>
   154c8:	mov	r0, #0
   154cc:	b	13608 <dcgettext@plt>
   154d0:	mov	r2, #5
   154d4:	ldr	r1, [pc, #484]	; 156c0 <g_strcmp0@plt+0x1cf8>
   154d8:	mov	r0, #0
   154dc:	b	13608 <dcgettext@plt>
   154e0:	mov	r2, #5
   154e4:	ldr	r1, [pc, #472]	; 156c4 <g_strcmp0@plt+0x1cfc>
   154e8:	mov	r0, #0
   154ec:	b	13608 <dcgettext@plt>
   154f0:	mov	r2, #5
   154f4:	ldr	r1, [pc, #460]	; 156c8 <g_strcmp0@plt+0x1d00>
   154f8:	mov	r0, #0
   154fc:	b	13608 <dcgettext@plt>
   15500:	mov	r2, #5
   15504:	ldr	r1, [pc, #448]	; 156cc <g_strcmp0@plt+0x1d04>
   15508:	mov	r0, #0
   1550c:	b	13608 <dcgettext@plt>
   15510:	mov	r2, #5
   15514:	ldr	r1, [pc, #436]	; 156d0 <g_strcmp0@plt+0x1d08>
   15518:	mov	r0, #0
   1551c:	b	13608 <dcgettext@plt>
   15520:	mov	r2, #5
   15524:	ldr	r1, [pc, #424]	; 156d4 <g_strcmp0@plt+0x1d0c>
   15528:	mov	r0, #0
   1552c:	b	13608 <dcgettext@plt>
   15530:	mov	r2, #5
   15534:	ldr	r1, [pc, #412]	; 156d8 <g_strcmp0@plt+0x1d10>
   15538:	mov	r0, #0
   1553c:	b	13608 <dcgettext@plt>
   15540:	mov	r2, #5
   15544:	ldr	r1, [pc, #400]	; 156dc <g_strcmp0@plt+0x1d14>
   15548:	mov	r0, #0
   1554c:	b	13608 <dcgettext@plt>
   15550:	mov	r2, #5
   15554:	ldr	r1, [pc, #388]	; 156e0 <g_strcmp0@plt+0x1d18>
   15558:	mov	r0, #0
   1555c:	b	13608 <dcgettext@plt>
   15560:	mov	r2, #5
   15564:	ldr	r1, [pc, #376]	; 156e4 <g_strcmp0@plt+0x1d1c>
   15568:	mov	r0, #0
   1556c:	b	13608 <dcgettext@plt>
   15570:	mov	r2, #5
   15574:	ldr	r1, [pc, #364]	; 156e8 <g_strcmp0@plt+0x1d20>
   15578:	mov	r0, #0
   1557c:	b	13608 <dcgettext@plt>
   15580:	mov	r2, #5
   15584:	ldr	r1, [pc, #352]	; 156ec <g_strcmp0@plt+0x1d24>
   15588:	mov	r0, #0
   1558c:	b	13608 <dcgettext@plt>
   15590:	mov	r2, #5
   15594:	ldr	r1, [pc, #340]	; 156f0 <g_strcmp0@plt+0x1d28>
   15598:	mov	r0, #0
   1559c:	b	13608 <dcgettext@plt>
   155a0:	mov	r2, #5
   155a4:	ldr	r1, [pc, #328]	; 156f4 <g_strcmp0@plt+0x1d2c>
   155a8:	mov	r0, #0
   155ac:	b	13608 <dcgettext@plt>
   155b0:	mov	r2, #5
   155b4:	ldr	r1, [pc, #316]	; 156f8 <g_strcmp0@plt+0x1d30>
   155b8:	mov	r0, #0
   155bc:	b	13608 <dcgettext@plt>
   155c0:	mov	r2, #5
   155c4:	ldr	r1, [pc, #304]	; 156fc <g_strcmp0@plt+0x1d34>
   155c8:	mov	r0, #0
   155cc:	b	13608 <dcgettext@plt>
   155d0:	mov	r2, #5
   155d4:	ldr	r1, [pc, #292]	; 15700 <g_strcmp0@plt+0x1d38>
   155d8:	mov	r0, #0
   155dc:	b	13608 <dcgettext@plt>
   155e0:	mov	r2, #5
   155e4:	ldr	r1, [pc, #280]	; 15704 <g_strcmp0@plt+0x1d3c>
   155e8:	mov	r0, #0
   155ec:	b	13608 <dcgettext@plt>
   155f0:	mov	r0, #0
   155f4:	bx	lr
   155f8:	andeq	ip, r1, r8, lsl #1
   155fc:	strdeq	fp, [r1], -ip
   15600:	andeq	ip, r1, r8, lsr r0
   15604:	andeq	fp, r1, r4, asr #31
   15608:	andeq	fp, r1, r4, lsl #31
   1560c:	andeq	fp, r1, r8, asr #30
   15610:	andeq	fp, r1, r8, lsl #30
   15614:	andeq	fp, r1, r8, lsl #29
   15618:	andeq	fp, r1, r4, lsl lr
   1561c:	andeq	fp, r1, r4, lsr #27
   15620:	andeq	fp, r1, r4, lsr sp
   15624:	andeq	fp, r1, r0, asr #25
   15628:	andeq	fp, r1, r0, asr #24
   1562c:	andeq	fp, r1, ip, lsl #24
   15630:	andeq	fp, r1, r4, asr #23
   15634:	muleq	r1, r0, fp
   15638:	andeq	fp, r1, r8, asr fp
   1563c:	andeq	fp, r1, ip, lsl fp
   15640:	andeq	fp, r1, r0, lsr #21
   15644:	andeq	fp, r1, ip, lsr sl
   15648:	andeq	fp, r1, r0, lsl #20
   1564c:	muleq	r1, r4, r9
   15650:	andeq	fp, r1, r4, asr #18
   15654:			; <UNDEFINED> instruction: 0x0001b8b8
   15658:	andeq	fp, r1, r4, lsr r8
   1565c:	andeq	fp, r1, r8, asr #15
   15660:	andeq	fp, r1, r8, ror r7
   15664:	andeq	fp, r1, r8, lsr #14
   15668:	ldrdeq	fp, [r1], -r4
   1566c:	andeq	fp, r1, r0, ror #12
   15670:	andeq	fp, r1, r4, lsl #6
   15674:	andeq	fp, r1, r4, lsl #5
   15678:	andeq	fp, r1, r0, lsr #4
   1567c:	andeq	fp, r1, r0, asr #3
   15680:	andeq	fp, r1, r4, lsr #12
   15684:	andeq	fp, r1, r0, asr r1
   15688:			; <UNDEFINED> instruction: 0x0001b5b0
   1568c:	andeq	fp, r1, r8, ror r5
   15690:	andeq	fp, r1, r0, lsr #10
   15694:	andeq	fp, r1, ip, ror #9
   15698:			; <UNDEFINED> instruction: 0x0001b4bc
   1569c:	andeq	fp, r1, r4, asr #8
   156a0:	andeq	fp, r1, r4, lsr #2
   156a4:	andeq	fp, r1, r0, asr #1
   156a8:	strdeq	fp, [r1], -r4
   156ac:	andeq	fp, r1, r4, lsl #7
   156b0:	andeq	fp, r1, r8, asr r0
   156b4:	andeq	sl, r1, r0, ror #31
   156b8:	andeq	sl, r1, ip, ror pc
   156bc:	andeq	sl, r1, ip, ror #18
   156c0:	andeq	fp, r1, r4, lsl r0
   156c4:	andeq	sl, r1, r4, lsl pc
   156c8:	andeq	sl, r1, r8, lsr sl
   156cc:	andeq	sl, r1, r0, ror #28
   156d0:	andeq	sl, r1, r8, ror #27
   156d4:	andeq	sl, r1, r0, ror sp
   156d8:	andeq	sl, r1, r4, lsr #26
   156dc:	ldrdeq	sl, [r1], -ip
   156e0:	muleq	r1, r8, ip
   156e4:	andeq	sl, r1, ip, lsr ip
   156e8:	andeq	sl, r1, ip, ror #23
   156ec:	andeq	sl, r1, ip, lsl #29
   156f0:	andeq	sl, r1, r0, lsl #23
   156f4:	strdeq	sl, [r1], -r8
   156f8:	andeq	sl, r1, r4, ror sl
   156fc:	andeq	sl, r1, ip, lsl #18
   15700:	andeq	sl, r1, ip, asr #19
   15704:	andeq	sl, r1, ip, ror #17
   15708:	sub	r3, r0, #1
   1570c:	cmp	r3, #5
   15710:	ldrls	pc, [pc, r3, lsl #2]
   15714:	b	15790 <g_strcmp0@plt+0x1dc8>
   15718:	andeq	r5, r1, r0, asr #14
   1571c:	andeq	r5, r1, r0, asr r7
   15720:	andeq	r5, r1, r0, ror #14
   15724:	andeq	r5, r1, r0, ror r7
   15728:	andeq	r5, r1, r0, lsl #15
   1572c:	andeq	r5, r1, r0, lsr r7
   15730:	mov	r2, #5
   15734:	ldr	r1, [pc, #116]	; 157b0 <g_strcmp0@plt+0x1de8>
   15738:	mov	r0, #0
   1573c:	b	13608 <dcgettext@plt>
   15740:	mov	r2, #5
   15744:	ldr	r1, [pc, #104]	; 157b4 <g_strcmp0@plt+0x1dec>
   15748:	mov	r0, #0
   1574c:	b	13608 <dcgettext@plt>
   15750:	mov	r2, #5
   15754:	ldr	r1, [pc, #92]	; 157b8 <g_strcmp0@plt+0x1df0>
   15758:	mov	r0, #0
   1575c:	b	13608 <dcgettext@plt>
   15760:	mov	r2, #5
   15764:	ldr	r1, [pc, #80]	; 157bc <g_strcmp0@plt+0x1df4>
   15768:	mov	r0, #0
   1576c:	b	13608 <dcgettext@plt>
   15770:	mov	r2, #5
   15774:	ldr	r1, [pc, #68]	; 157c0 <g_strcmp0@plt+0x1df8>
   15778:	mov	r0, #0
   1577c:	b	13608 <dcgettext@plt>
   15780:	mov	r2, #5
   15784:	ldr	r1, [pc, #56]	; 157c4 <g_strcmp0@plt+0x1dfc>
   15788:	mov	r0, #0
   1578c:	b	13608 <dcgettext@plt>
   15790:	mov	r3, r0
   15794:	push	{r4, lr}
   15798:	mov	r1, #16
   1579c:	ldr	r2, [pc, #36]	; 157c8 <g_strcmp0@plt+0x1e00>
   157a0:	ldr	r0, [pc, #36]	; 157cc <g_strcmp0@plt+0x1e04>
   157a4:	bl	13278 <g_log@plt>
   157a8:	mov	r0, #0
   157ac:	pop	{r4, pc}
   157b0:	muleq	r1, r0, r1
   157b4:	andeq	ip, r1, ip, lsr #1
   157b8:	andeq	ip, r1, r8, asr #1
   157bc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   157c0:	andeq	ip, r1, ip, lsr #2
   157c4:	andeq	ip, r1, r8, asr #2
   157c8:	andeq	ip, r1, r8, asr #3
   157cc:	andeq	r9, r1, ip, ror #14
   157d0:	sub	r3, r0, #1
   157d4:	cmp	r3, #5
   157d8:	ldrls	pc, [pc, r3, lsl #2]
   157dc:	b	15858 <g_strcmp0@plt+0x1e90>
   157e0:	andeq	r5, r1, r8, lsl #16
   157e4:	andeq	r5, r1, r8, lsl r8
   157e8:	andeq	r5, r1, r8, lsr #16
   157ec:	andeq	r5, r1, r8, lsr r8
   157f0:	andeq	r5, r1, r8, asr #16
   157f4:	strdeq	r5, [r1], -r8
   157f8:	mov	r2, #5
   157fc:	ldr	r1, [pc, #116]	; 15878 <g_strcmp0@plt+0x1eb0>
   15800:	mov	r0, #0
   15804:	b	13608 <dcgettext@plt>
   15808:	mov	r2, #5
   1580c:	ldr	r1, [pc, #104]	; 1587c <g_strcmp0@plt+0x1eb4>
   15810:	mov	r0, #0
   15814:	b	13608 <dcgettext@plt>
   15818:	mov	r2, #5
   1581c:	ldr	r1, [pc, #92]	; 15880 <g_strcmp0@plt+0x1eb8>
   15820:	mov	r0, #0
   15824:	b	13608 <dcgettext@plt>
   15828:	mov	r2, #5
   1582c:	ldr	r1, [pc, #80]	; 15884 <g_strcmp0@plt+0x1ebc>
   15830:	mov	r0, #0
   15834:	b	13608 <dcgettext@plt>
   15838:	mov	r2, #5
   1583c:	ldr	r1, [pc, #68]	; 15888 <g_strcmp0@plt+0x1ec0>
   15840:	mov	r0, #0
   15844:	b	13608 <dcgettext@plt>
   15848:	mov	r2, #5
   1584c:	ldr	r1, [pc, #56]	; 1588c <g_strcmp0@plt+0x1ec4>
   15850:	mov	r0, #0
   15854:	b	13608 <dcgettext@plt>
   15858:	mov	r3, r0
   1585c:	push	{r4, lr}
   15860:	mov	r1, #16
   15864:	ldr	r2, [pc, #36]	; 15890 <g_strcmp0@plt+0x1ec8>
   15868:	ldr	r0, [pc, #36]	; 15894 <g_strcmp0@plt+0x1ecc>
   1586c:	bl	13278 <g_log@plt>
   15870:	mov	r0, #0
   15874:	pop	{r4, pc}
   15878:	muleq	r1, ip, r2
   1587c:	andeq	ip, r1, r4, ror #3
   15880:	andeq	ip, r1, ip, lsr r2
   15884:	andeq	ip, r1, r4, lsl r2
   15888:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1588c:	andeq	ip, r1, r4, ror #4
   15890:	andeq	ip, r1, r8, asr #3
   15894:	andeq	r9, r1, ip, ror #14
   15898:	cmp	r0, #2
   1589c:	beq	158d0 <g_strcmp0@plt+0x1f08>
   158a0:	cmp	r0, #3
   158a4:	beq	158f0 <g_strcmp0@plt+0x1f28>
   158a8:	cmp	r0, #1
   158ac:	beq	158e0 <g_strcmp0@plt+0x1f18>
   158b0:	mov	r3, r0
   158b4:	push	{r4, lr}
   158b8:	mov	r1, #16
   158bc:	ldr	r2, [pc, #60]	; 15900 <g_strcmp0@plt+0x1f38>
   158c0:	ldr	r0, [pc, #60]	; 15904 <g_strcmp0@plt+0x1f3c>
   158c4:	bl	13278 <g_log@plt>
   158c8:	mov	r0, #0
   158cc:	pop	{r4, pc}
   158d0:	mov	r2, #5
   158d4:	ldr	r1, [pc, #44]	; 15908 <g_strcmp0@plt+0x1f40>
   158d8:	mov	r0, #0
   158dc:	b	13608 <dcgettext@plt>
   158e0:	mov	r2, #5
   158e4:	ldr	r1, [pc, #32]	; 1590c <g_strcmp0@plt+0x1f44>
   158e8:	mov	r0, #0
   158ec:	b	13608 <dcgettext@plt>
   158f0:	mov	r2, #5
   158f4:	ldr	r1, [pc, #20]	; 15910 <g_strcmp0@plt+0x1f48>
   158f8:	mov	r0, #0
   158fc:	b	13608 <dcgettext@plt>
   15900:	andeq	ip, r1, r0, ror #5
   15904:	andeq	r9, r1, ip, ror #14
   15908:	andeq	ip, r1, ip, asr #5
   1590c:	andeq	ip, r1, r4, asr #5
   15910:	ldrdeq	ip, [r1], -r8
   15914:	cmp	r0, #35	; 0x23
   15918:	ldrls	pc, [pc, r0, lsl #2]
   1591c:	b	15bf0 <g_strcmp0@plt+0x2228>
   15920:	andeq	r5, r1, r0, ror #23
   15924:	ldrdeq	r5, [r1], -r0
   15928:	andeq	r5, r1, r0, asr #23
   1592c:			; <UNDEFINED> instruction: 0x00015bb0
   15930:	andeq	r5, r1, r0, lsr #23
   15934:	muleq	r1, r0, fp
   15938:	andeq	r5, r1, r0, lsl #23
   1593c:	andeq	r5, r1, r0, ror fp
   15940:	andeq	r5, r1, r0, ror #22
   15944:	andeq	r5, r1, r0, asr fp
   15948:	andeq	r5, r1, r0, asr #22
   1594c:	andeq	r5, r1, r0, lsr fp
   15950:	andeq	r5, r1, r0, lsr #22
   15954:	andeq	r5, r1, r0, lsl fp
   15958:	andeq	r5, r1, r0, lsl #22
   1595c:	strdeq	r5, [r1], -r0
   15960:	andeq	r5, r1, r0, ror #21
   15964:	ldrdeq	r5, [r1], -r0
   15968:	andeq	r5, r1, r0, asr #21
   1596c:			; <UNDEFINED> instruction: 0x00015ab0
   15970:	andeq	r5, r1, r0, lsr #21
   15974:	muleq	r1, r0, sl
   15978:	andeq	r5, r1, r0, lsl #21
   1597c:	andeq	r5, r1, r0, ror sl
   15980:	andeq	r5, r1, r0, ror #20
   15984:	andeq	r5, r1, r0, asr sl
   15988:	andeq	r5, r1, r0, asr #20
   1598c:	andeq	r5, r1, r0, lsr sl
   15990:	andeq	r5, r1, r0, lsr #20
   15994:	andeq	r5, r1, r0, lsl sl
   15998:	andeq	r5, r1, r0, lsl #20
   1599c:	strdeq	r5, [r1], -r0
   159a0:	andeq	r5, r1, r0, ror #19
   159a4:	ldrdeq	r5, [r1], -r0
   159a8:	andeq	r5, r1, r0, asr #19
   159ac:			; <UNDEFINED> instruction: 0x000159b0
   159b0:	mov	r2, #5
   159b4:	ldr	r1, [pc, #600]	; 15c14 <g_strcmp0@plt+0x224c>
   159b8:	mov	r0, #0
   159bc:	b	13608 <dcgettext@plt>
   159c0:	mov	r2, #5
   159c4:	ldr	r1, [pc, #588]	; 15c18 <g_strcmp0@plt+0x2250>
   159c8:	mov	r0, #0
   159cc:	b	13608 <dcgettext@plt>
   159d0:	mov	r2, #5
   159d4:	ldr	r1, [pc, #576]	; 15c1c <g_strcmp0@plt+0x2254>
   159d8:	mov	r0, #0
   159dc:	b	13608 <dcgettext@plt>
   159e0:	mov	r2, #5
   159e4:	ldr	r1, [pc, #564]	; 15c20 <g_strcmp0@plt+0x2258>
   159e8:	mov	r0, #0
   159ec:	b	13608 <dcgettext@plt>
   159f0:	mov	r2, #5
   159f4:	ldr	r1, [pc, #552]	; 15c24 <g_strcmp0@plt+0x225c>
   159f8:	mov	r0, #0
   159fc:	b	13608 <dcgettext@plt>
   15a00:	mov	r2, #5
   15a04:	ldr	r1, [pc, #540]	; 15c28 <g_strcmp0@plt+0x2260>
   15a08:	mov	r0, #0
   15a0c:	b	13608 <dcgettext@plt>
   15a10:	mov	r2, #5
   15a14:	ldr	r1, [pc, #528]	; 15c2c <g_strcmp0@plt+0x2264>
   15a18:	mov	r0, #0
   15a1c:	b	13608 <dcgettext@plt>
   15a20:	mov	r2, #5
   15a24:	ldr	r1, [pc, #516]	; 15c30 <g_strcmp0@plt+0x2268>
   15a28:	mov	r0, #0
   15a2c:	b	13608 <dcgettext@plt>
   15a30:	mov	r2, #5
   15a34:	ldr	r1, [pc, #504]	; 15c34 <g_strcmp0@plt+0x226c>
   15a38:	mov	r0, #0
   15a3c:	b	13608 <dcgettext@plt>
   15a40:	mov	r2, #5
   15a44:	ldr	r1, [pc, #492]	; 15c38 <g_strcmp0@plt+0x2270>
   15a48:	mov	r0, #0
   15a4c:	b	13608 <dcgettext@plt>
   15a50:	mov	r2, #5
   15a54:	ldr	r1, [pc, #480]	; 15c3c <g_strcmp0@plt+0x2274>
   15a58:	mov	r0, #0
   15a5c:	b	13608 <dcgettext@plt>
   15a60:	mov	r2, #5
   15a64:	ldr	r1, [pc, #468]	; 15c40 <g_strcmp0@plt+0x2278>
   15a68:	mov	r0, #0
   15a6c:	b	13608 <dcgettext@plt>
   15a70:	mov	r2, #5
   15a74:	ldr	r1, [pc, #456]	; 15c44 <g_strcmp0@plt+0x227c>
   15a78:	mov	r0, #0
   15a7c:	b	13608 <dcgettext@plt>
   15a80:	mov	r2, #5
   15a84:	ldr	r1, [pc, #444]	; 15c48 <g_strcmp0@plt+0x2280>
   15a88:	mov	r0, #0
   15a8c:	b	13608 <dcgettext@plt>
   15a90:	mov	r2, #5
   15a94:	ldr	r1, [pc, #432]	; 15c4c <g_strcmp0@plt+0x2284>
   15a98:	mov	r0, #0
   15a9c:	b	13608 <dcgettext@plt>
   15aa0:	mov	r2, #5
   15aa4:	ldr	r1, [pc, #420]	; 15c50 <g_strcmp0@plt+0x2288>
   15aa8:	mov	r0, #0
   15aac:	b	13608 <dcgettext@plt>
   15ab0:	mov	r2, #5
   15ab4:	ldr	r1, [pc, #408]	; 15c54 <g_strcmp0@plt+0x228c>
   15ab8:	mov	r0, #0
   15abc:	b	13608 <dcgettext@plt>
   15ac0:	mov	r2, #5
   15ac4:	ldr	r1, [pc, #396]	; 15c58 <g_strcmp0@plt+0x2290>
   15ac8:	mov	r0, #0
   15acc:	b	13608 <dcgettext@plt>
   15ad0:	mov	r2, #5
   15ad4:	ldr	r1, [pc, #384]	; 15c5c <g_strcmp0@plt+0x2294>
   15ad8:	mov	r0, #0
   15adc:	b	13608 <dcgettext@plt>
   15ae0:	mov	r2, #5
   15ae4:	ldr	r1, [pc, #372]	; 15c60 <g_strcmp0@plt+0x2298>
   15ae8:	mov	r0, #0
   15aec:	b	13608 <dcgettext@plt>
   15af0:	mov	r2, #5
   15af4:	ldr	r1, [pc, #360]	; 15c64 <g_strcmp0@plt+0x229c>
   15af8:	mov	r0, #0
   15afc:	b	13608 <dcgettext@plt>
   15b00:	mov	r2, #5
   15b04:	ldr	r1, [pc, #348]	; 15c68 <g_strcmp0@plt+0x22a0>
   15b08:	mov	r0, #0
   15b0c:	b	13608 <dcgettext@plt>
   15b10:	mov	r2, #5
   15b14:	ldr	r1, [pc, #336]	; 15c6c <g_strcmp0@plt+0x22a4>
   15b18:	mov	r0, #0
   15b1c:	b	13608 <dcgettext@plt>
   15b20:	mov	r2, #5
   15b24:	ldr	r1, [pc, #324]	; 15c70 <g_strcmp0@plt+0x22a8>
   15b28:	mov	r0, #0
   15b2c:	b	13608 <dcgettext@plt>
   15b30:	mov	r2, #5
   15b34:	ldr	r1, [pc, #312]	; 15c74 <g_strcmp0@plt+0x22ac>
   15b38:	mov	r0, #0
   15b3c:	b	13608 <dcgettext@plt>
   15b40:	mov	r2, #5
   15b44:	ldr	r1, [pc, #300]	; 15c78 <g_strcmp0@plt+0x22b0>
   15b48:	mov	r0, #0
   15b4c:	b	13608 <dcgettext@plt>
   15b50:	mov	r2, #5
   15b54:	ldr	r1, [pc, #288]	; 15c7c <g_strcmp0@plt+0x22b4>
   15b58:	mov	r0, #0
   15b5c:	b	13608 <dcgettext@plt>
   15b60:	mov	r2, #5
   15b64:	ldr	r1, [pc, #276]	; 15c80 <g_strcmp0@plt+0x22b8>
   15b68:	mov	r0, #0
   15b6c:	b	13608 <dcgettext@plt>
   15b70:	mov	r2, #5
   15b74:	ldr	r1, [pc, #264]	; 15c84 <g_strcmp0@plt+0x22bc>
   15b78:	mov	r0, #0
   15b7c:	b	13608 <dcgettext@plt>
   15b80:	mov	r2, #5
   15b84:	ldr	r1, [pc, #252]	; 15c88 <g_strcmp0@plt+0x22c0>
   15b88:	mov	r0, #0
   15b8c:	b	13608 <dcgettext@plt>
   15b90:	mov	r2, #5
   15b94:	ldr	r1, [pc, #240]	; 15c8c <g_strcmp0@plt+0x22c4>
   15b98:	mov	r0, #0
   15b9c:	b	13608 <dcgettext@plt>
   15ba0:	mov	r2, #5
   15ba4:	ldr	r1, [pc, #228]	; 15c90 <g_strcmp0@plt+0x22c8>
   15ba8:	mov	r0, #0
   15bac:	b	13608 <dcgettext@plt>
   15bb0:	mov	r2, #5
   15bb4:	ldr	r1, [pc, #216]	; 15c94 <g_strcmp0@plt+0x22cc>
   15bb8:	mov	r0, #0
   15bbc:	b	13608 <dcgettext@plt>
   15bc0:	mov	r2, #5
   15bc4:	ldr	r1, [pc, #204]	; 15c98 <g_strcmp0@plt+0x22d0>
   15bc8:	mov	r0, #0
   15bcc:	b	13608 <dcgettext@plt>
   15bd0:	mov	r2, #5
   15bd4:	ldr	r1, [pc, #192]	; 15c9c <g_strcmp0@plt+0x22d4>
   15bd8:	mov	r0, #0
   15bdc:	b	13608 <dcgettext@plt>
   15be0:	mov	r2, #5
   15be4:	ldr	r1, [pc, #180]	; 15ca0 <g_strcmp0@plt+0x22d8>
   15be8:	mov	r0, #0
   15bec:	b	13608 <dcgettext@plt>
   15bf0:	push	{r4, lr}
   15bf4:	bl	1329c <pk_status_enum_to_string@plt>
   15bf8:	ldr	r2, [pc, #164]	; 15ca4 <g_strcmp0@plt+0x22dc>
   15bfc:	mov	r1, #16
   15c00:	mov	r3, r0
   15c04:	ldr	r0, [pc, #156]	; 15ca8 <g_strcmp0@plt+0x22e0>
   15c08:	bl	13278 <g_log@plt>
   15c0c:	mov	r0, #0
   15c10:	pop	{r4, pc}
   15c14:	andeq	ip, r1, r4, lsr r6
   15c18:	andeq	ip, r1, ip, lsl #12
   15c1c:	andeq	ip, r1, r0, ror #11
   15c20:			; <UNDEFINED> instruction: 0x0001c5b4
   15c24:	muleq	r1, r8, r5
   15c28:	andeq	ip, r1, r4, ror r5
   15c2c:	andeq	ip, r1, r8, asr r5
   15c30:	andeq	ip, r1, r8, lsr r5
   15c34:	andeq	ip, r1, r8, lsr #10
   15c38:	andeq	ip, r1, r4, lsl r5
   15c3c:	strdeq	ip, [r1], -r4
   15c40:	andeq	ip, r1, r0, ror #9
   15c44:	andeq	ip, r1, r0, asr #9
   15c48:	andeq	ip, r1, r8, lsr #9
   15c4c:	andeq	ip, r1, r8, lsl #9
   15c50:	andeq	ip, r1, r4, ror #8
   15c54:	andeq	ip, r1, r8, asr r4
   15c58:	andeq	ip, r1, ip, asr #8
   15c5c:	andeq	ip, r1, ip, lsr r4
   15c60:	andeq	ip, r1, r8, lsr #8
   15c64:	andeq	ip, r1, r8, lsl r4
   15c68:	andeq	ip, r1, r4, lsl #8
   15c6c:	andeq	ip, r1, ip, ror #7
   15c70:	ldrdeq	ip, [r1], -r8
   15c74:	andeq	ip, r1, r0, asr #7
   15c78:	andeq	ip, r1, ip, lsr #7
   15c7c:	andeq	ip, r1, ip, ror r3
   15c80:	andeq	ip, r1, r4, ror #6
   15c84:	muleq	r1, r0, r3
   15c88:	andeq	ip, r1, r0, asr r3
   15c8c:	andeq	ip, r1, ip, lsr r3
   15c90:	andeq	ip, r1, r0, lsr r3
   15c94:	andeq	ip, r1, r8, lsr #6
   15c98:	andeq	ip, r1, r8, lsl #6
   15c9c:	andeq	ip, r1, r4, lsl r3
   15ca0:	strdeq	ip, [r1], -r8
   15ca4:	andeq	ip, r1, r4, asr #12
   15ca8:	andeq	r9, r1, ip, ror #14
   15cac:	sub	r3, r0, #3
   15cb0:	push	{r4, lr}
   15cb4:	mov	r4, r1
   15cb8:	sub	sp, sp, #8
   15cbc:	cmp	r3, #6
   15cc0:	ldrls	pc, [pc, r3, lsl #2]
   15cc4:	b	15da0 <g_strcmp0@plt+0x23d8>
   15cc8:	andeq	r5, r1, r0, lsl sp
   15ccc:	andeq	r5, r1, r8, lsr #26
   15cd0:	andeq	r5, r1, r0, asr #26
   15cd4:	andeq	r5, r1, r8, asr sp
   15cd8:	andeq	r5, r1, r0, ror sp
   15cdc:	andeq	r5, r1, r8, lsl #27
   15ce0:	andeq	r5, r1, r4, ror #25
   15ce4:	mov	r3, #5
   15ce8:	str	r3, [sp]
   15cec:	ldr	r2, [pc, #208]	; 15dc4 <g_strcmp0@plt+0x23fc>
   15cf0:	mov	r3, r1
   15cf4:	ldr	r1, [pc, #204]	; 15dc8 <g_strcmp0@plt+0x2400>
   15cf8:	mov	r0, #0
   15cfc:	bl	13410 <dcngettext@plt>
   15d00:	mov	r1, r4
   15d04:	add	sp, sp, #8
   15d08:	pop	{r4, lr}
   15d0c:	b	13404 <g_strdup_printf@plt>
   15d10:	mov	r3, #5
   15d14:	str	r3, [sp]
   15d18:	ldr	r2, [pc, #172]	; 15dcc <g_strcmp0@plt+0x2404>
   15d1c:	mov	r3, r1
   15d20:	ldr	r1, [pc, #168]	; 15dd0 <g_strcmp0@plt+0x2408>
   15d24:	b	15cf8 <g_strcmp0@plt+0x2330>
   15d28:	mov	r3, #5
   15d2c:	str	r3, [sp]
   15d30:	ldr	r2, [pc, #156]	; 15dd4 <g_strcmp0@plt+0x240c>
   15d34:	mov	r3, r1
   15d38:	ldr	r1, [pc, #152]	; 15dd8 <g_strcmp0@plt+0x2410>
   15d3c:	b	15cf8 <g_strcmp0@plt+0x2330>
   15d40:	mov	r3, #5
   15d44:	str	r3, [sp]
   15d48:	ldr	r2, [pc, #140]	; 15ddc <g_strcmp0@plt+0x2414>
   15d4c:	mov	r3, r1
   15d50:	ldr	r1, [pc, #136]	; 15de0 <g_strcmp0@plt+0x2418>
   15d54:	b	15cf8 <g_strcmp0@plt+0x2330>
   15d58:	mov	r3, #5
   15d5c:	str	r3, [sp]
   15d60:	ldr	r2, [pc, #124]	; 15de4 <g_strcmp0@plt+0x241c>
   15d64:	mov	r3, r1
   15d68:	ldr	r1, [pc, #120]	; 15de8 <g_strcmp0@plt+0x2420>
   15d6c:	b	15cf8 <g_strcmp0@plt+0x2330>
   15d70:	mov	r3, #5
   15d74:	str	r3, [sp]
   15d78:	ldr	r2, [pc, #108]	; 15dec <g_strcmp0@plt+0x2424>
   15d7c:	mov	r3, r1
   15d80:	ldr	r1, [pc, #104]	; 15df0 <g_strcmp0@plt+0x2428>
   15d84:	b	15cf8 <g_strcmp0@plt+0x2330>
   15d88:	mov	r3, #5
   15d8c:	str	r3, [sp]
   15d90:	ldr	r2, [pc, #92]	; 15df4 <g_strcmp0@plt+0x242c>
   15d94:	mov	r3, r1
   15d98:	ldr	r1, [pc, #88]	; 15df8 <g_strcmp0@plt+0x2430>
   15d9c:	b	15cf8 <g_strcmp0@plt+0x2330>
   15da0:	bl	13794 <pk_info_enum_to_string@plt>
   15da4:	ldr	r2, [pc, #80]	; 15dfc <g_strcmp0@plt+0x2434>
   15da8:	mov	r1, #16
   15dac:	mov	r3, r0
   15db0:	ldr	r0, [pc, #72]	; 15e00 <g_strcmp0@plt+0x2438>
   15db4:	bl	13278 <g_log@plt>
   15db8:	mov	r0, #0
   15dbc:	add	sp, sp, #8
   15dc0:	pop	{r4, pc}
   15dc4:	andeq	ip, r1, r8, asr #14
   15dc8:	andeq	ip, r1, ip, asr r7
   15dcc:	andeq	ip, r1, ip, asr r6
   15dd0:	andeq	ip, r1, r0, ror r6
   15dd4:	andeq	ip, r1, r8, lsl r7
   15dd8:	andeq	ip, r1, r0, lsr r7
   15ddc:	andeq	ip, r1, r4, lsl #13
   15de0:	muleq	r1, r0, r6
   15de4:	strdeq	ip, [r1], -r0
   15de8:	andeq	ip, r1, r4, lsl #14
   15dec:	muleq	r1, ip, r6
   15df0:			; <UNDEFINED> instruction: 0x0001c6b4
   15df4:	andeq	ip, r1, r8, asr #13
   15df8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   15dfc:	andeq	ip, r1, r0, ror r7
   15e00:	andeq	r9, r1, ip, ror #14
   15e04:	sub	r3, r0, #1
   15e08:	cmp	r3, #23
   15e0c:	ldrls	pc, [pc, r3, lsl #2]
   15e10:	b	15f24 <g_strcmp0@plt+0x255c>
   15e14:	andeq	r5, r1, r4, lsl #29
   15e18:	muleq	r1, r4, lr
   15e1c:	andeq	r5, r1, r4, lsr #29
   15e20:			; <UNDEFINED> instruction: 0x00015eb4
   15e24:	andeq	r5, r1, r4, asr #29
   15e28:	ldrdeq	r5, [r1], -r4
   15e2c:	andeq	r5, r1, r4, ror #29
   15e30:	strdeq	r5, [r1], -r4
   15e34:	andeq	r5, r1, r4, lsl #30
   15e38:	andeq	r5, r1, r4, lsr #30
   15e3c:	andeq	r5, r1, r4, lsr #30
   15e40:	andeq	r5, r1, r4, lsr #30
   15e44:	andeq	r5, r1, r4, lsr #30
   15e48:	andeq	r5, r1, r4, lsr #30
   15e4c:	andeq	r5, r1, r4, lsr #30
   15e50:	andeq	r5, r1, r4, lsl #29
   15e54:	muleq	r1, r4, lr
   15e58:	andeq	r5, r1, r4, lsr #30
   15e5c:	andeq	r5, r1, r4, lsr #30
   15e60:	andeq	r5, r1, r4, lsr #30
   15e64:	andeq	r5, r1, r4, lsr #30
   15e68:	andeq	r5, r1, r4, lsr #30
   15e6c:	andeq	r5, r1, r4, lsl pc
   15e70:	andeq	r5, r1, r4, ror lr
   15e74:	mov	r2, #5
   15e78:	ldr	r1, [pc, #200]	; 15f48 <g_strcmp0@plt+0x2580>
   15e7c:	mov	r0, #0
   15e80:	b	13608 <dcgettext@plt>
   15e84:	mov	r2, #5
   15e88:	ldr	r1, [pc, #188]	; 15f4c <g_strcmp0@plt+0x2584>
   15e8c:	mov	r0, #0
   15e90:	b	13608 <dcgettext@plt>
   15e94:	mov	r2, #5
   15e98:	ldr	r1, [pc, #176]	; 15f50 <g_strcmp0@plt+0x2588>
   15e9c:	mov	r0, #0
   15ea0:	b	13608 <dcgettext@plt>
   15ea4:	mov	r2, #5
   15ea8:	ldr	r1, [pc, #164]	; 15f54 <g_strcmp0@plt+0x258c>
   15eac:	mov	r0, #0
   15eb0:	b	13608 <dcgettext@plt>
   15eb4:	mov	r2, #5
   15eb8:	ldr	r1, [pc, #152]	; 15f58 <g_strcmp0@plt+0x2590>
   15ebc:	mov	r0, #0
   15ec0:	b	13608 <dcgettext@plt>
   15ec4:	mov	r2, #5
   15ec8:	ldr	r1, [pc, #140]	; 15f5c <g_strcmp0@plt+0x2594>
   15ecc:	mov	r0, #0
   15ed0:	b	13608 <dcgettext@plt>
   15ed4:	mov	r2, #5
   15ed8:	ldr	r1, [pc, #128]	; 15f60 <g_strcmp0@plt+0x2598>
   15edc:	mov	r0, #0
   15ee0:	b	13608 <dcgettext@plt>
   15ee4:	mov	r2, #5
   15ee8:	ldr	r1, [pc, #116]	; 15f64 <g_strcmp0@plt+0x259c>
   15eec:	mov	r0, #0
   15ef0:	b	13608 <dcgettext@plt>
   15ef4:	mov	r2, #5
   15ef8:	ldr	r1, [pc, #104]	; 15f68 <g_strcmp0@plt+0x25a0>
   15efc:	mov	r0, #0
   15f00:	b	13608 <dcgettext@plt>
   15f04:	mov	r2, #5
   15f08:	ldr	r1, [pc, #92]	; 15f6c <g_strcmp0@plt+0x25a4>
   15f0c:	mov	r0, #0
   15f10:	b	13608 <dcgettext@plt>
   15f14:	mov	r2, #5
   15f18:	ldr	r1, [pc, #80]	; 15f70 <g_strcmp0@plt+0x25a8>
   15f1c:	mov	r0, #0
   15f20:	b	13608 <dcgettext@plt>
   15f24:	push	{r4, lr}
   15f28:	bl	13794 <pk_info_enum_to_string@plt>
   15f2c:	ldr	r2, [pc, #64]	; 15f74 <g_strcmp0@plt+0x25ac>
   15f30:	mov	r1, #16
   15f34:	mov	r3, r0
   15f38:	ldr	r0, [pc, #56]	; 15f78 <g_strcmp0@plt+0x25b0>
   15f3c:	bl	13278 <g_log@plt>
   15f40:	mov	r0, #0
   15f44:	pop	{r4, pc}
   15f48:	andeq	ip, r1, r0, lsr #16
   15f4c:	andeq	ip, r1, r8, lsl #16
   15f50:	andeq	ip, r1, r4, lsl r8
   15f54:	muleq	r1, r0, r7
   15f58:	andeq	ip, r1, r4, ror #15
   15f5c:	andeq	ip, r1, r0, lsr #15
   15f60:	ldrdeq	ip, [r1], -r4
   15f64:			; <UNDEFINED> instruction: 0x0001c7b0
   15f68:	andeq	ip, r1, r4, asr #15
   15f6c:	strdeq	ip, [r1], -r8
   15f70:	andeq	ip, r1, r8, lsr #16
   15f74:	andeq	ip, r1, r4, lsr r8
   15f78:	andeq	r9, r1, ip, ror #14
   15f7c:	sub	r3, r0, #10
   15f80:	cmp	r3, #12
   15f84:	ldrls	pc, [pc, r3, lsl #2]
   15f88:	b	16050 <g_strcmp0@plt+0x2688>
   15f8c:	ldrdeq	r5, [r1], -r0
   15f90:	andeq	r5, r1, r0, ror #31
   15f94:	strdeq	r5, [r1], -r0
   15f98:	andeq	r6, r1, r0
   15f9c:	andeq	r6, r1, r0, lsl r0
   15fa0:	andeq	r6, r1, r0, lsr #32
   15fa4:	andeq	r6, r1, r0, asr r0
   15fa8:	andeq	r6, r1, r0, asr r0
   15fac:	andeq	r6, r1, r0, asr r0
   15fb0:	andeq	r6, r1, r0, lsr r0
   15fb4:	andeq	r6, r1, r0, asr r0
   15fb8:	andeq	r6, r1, r0, asr #32
   15fbc:	andeq	r5, r1, r0, asr #31
   15fc0:	mov	r2, #5
   15fc4:	ldr	r1, [pc, #168]	; 16074 <g_strcmp0@plt+0x26ac>
   15fc8:	mov	r0, #0
   15fcc:	b	13608 <dcgettext@plt>
   15fd0:	mov	r2, #5
   15fd4:	ldr	r1, [pc, #156]	; 16078 <g_strcmp0@plt+0x26b0>
   15fd8:	mov	r0, #0
   15fdc:	b	13608 <dcgettext@plt>
   15fe0:	mov	r2, #5
   15fe4:	ldr	r1, [pc, #144]	; 1607c <g_strcmp0@plt+0x26b4>
   15fe8:	mov	r0, #0
   15fec:	b	13608 <dcgettext@plt>
   15ff0:	mov	r2, #5
   15ff4:	ldr	r1, [pc, #132]	; 16080 <g_strcmp0@plt+0x26b8>
   15ff8:	mov	r0, #0
   15ffc:	b	13608 <dcgettext@plt>
   16000:	mov	r2, #5
   16004:	ldr	r1, [pc, #120]	; 16084 <g_strcmp0@plt+0x26bc>
   16008:	mov	r0, #0
   1600c:	b	13608 <dcgettext@plt>
   16010:	mov	r2, #5
   16014:	ldr	r1, [pc, #108]	; 16088 <g_strcmp0@plt+0x26c0>
   16018:	mov	r0, #0
   1601c:	b	13608 <dcgettext@plt>
   16020:	mov	r2, #5
   16024:	ldr	r1, [pc, #96]	; 1608c <g_strcmp0@plt+0x26c4>
   16028:	mov	r0, #0
   1602c:	b	13608 <dcgettext@plt>
   16030:	mov	r2, #5
   16034:	ldr	r1, [pc, #84]	; 16090 <g_strcmp0@plt+0x26c8>
   16038:	mov	r0, #0
   1603c:	b	13608 <dcgettext@plt>
   16040:	mov	r2, #5
   16044:	ldr	r1, [pc, #72]	; 16094 <g_strcmp0@plt+0x26cc>
   16048:	mov	r0, #0
   1604c:	b	13608 <dcgettext@plt>
   16050:	push	{r4, lr}
   16054:	bl	13794 <pk_info_enum_to_string@plt>
   16058:	ldr	r2, [pc, #56]	; 16098 <g_strcmp0@plt+0x26d0>
   1605c:	mov	r1, #16
   16060:	mov	r3, r0
   16064:	ldr	r0, [pc, #48]	; 1609c <g_strcmp0@plt+0x26d4>
   16068:	bl	13278 <g_log@plt>
   1606c:	mov	r0, #0
   16070:	pop	{r4, pc}
   16074:			; <UNDEFINED> instruction: 0x0001c8b0
   16078:	andeq	ip, r1, ip, asr #16
   1607c:	andeq	ip, r1, r8, asr r8
   16080:	andeq	ip, r1, r4, ror #16
   16084:	andeq	ip, r1, r0, ror r8
   16088:	andeq	ip, r1, ip, ror r8
   1608c:	andeq	ip, r1, r8, lsl #17
   16090:	muleq	r1, r4, r8
   16094:	andeq	ip, r1, r4, lsr #17
   16098:	andeq	ip, r1, r4, lsr r8
   1609c:	andeq	r9, r1, ip, ror #14
   160a0:	sub	r3, r0, #10
   160a4:	cmp	r3, #12
   160a8:	ldrls	pc, [pc, r3, lsl #2]
   160ac:	b	16174 <g_strcmp0@plt+0x27ac>
   160b0:	strdeq	r6, [r1], -r4
   160b4:	andeq	r6, r1, r4, lsl #2
   160b8:	andeq	r6, r1, r4, lsl r1
   160bc:	andeq	r6, r1, r4, lsr #2
   160c0:	andeq	r6, r1, r4, lsr r1
   160c4:	andeq	r6, r1, r4, asr #2
   160c8:	andeq	r6, r1, r4, ror r1
   160cc:	andeq	r6, r1, r4, ror r1
   160d0:	andeq	r6, r1, r4, ror r1
   160d4:	andeq	r6, r1, r4, asr r1
   160d8:	andeq	r6, r1, r4, ror r1
   160dc:	andeq	r6, r1, r4, ror #2
   160e0:	andeq	r6, r1, r4, ror #1
   160e4:	mov	r2, #5
   160e8:	ldr	r1, [pc, #168]	; 16198 <g_strcmp0@plt+0x27d0>
   160ec:	mov	r0, #0
   160f0:	b	13608 <dcgettext@plt>
   160f4:	mov	r2, #5
   160f8:	ldr	r1, [pc, #156]	; 1619c <g_strcmp0@plt+0x27d4>
   160fc:	mov	r0, #0
   16100:	b	13608 <dcgettext@plt>
   16104:	mov	r2, #5
   16108:	ldr	r1, [pc, #144]	; 161a0 <g_strcmp0@plt+0x27d8>
   1610c:	mov	r0, #0
   16110:	b	13608 <dcgettext@plt>
   16114:	mov	r2, #5
   16118:	ldr	r1, [pc, #132]	; 161a4 <g_strcmp0@plt+0x27dc>
   1611c:	mov	r0, #0
   16120:	b	13608 <dcgettext@plt>
   16124:	mov	r2, #5
   16128:	ldr	r1, [pc, #120]	; 161a8 <g_strcmp0@plt+0x27e0>
   1612c:	mov	r0, #0
   16130:	b	13608 <dcgettext@plt>
   16134:	mov	r2, #5
   16138:	ldr	r1, [pc, #108]	; 161ac <g_strcmp0@plt+0x27e4>
   1613c:	mov	r0, #0
   16140:	b	13608 <dcgettext@plt>
   16144:	mov	r2, #5
   16148:	ldr	r1, [pc, #96]	; 161b0 <g_strcmp0@plt+0x27e8>
   1614c:	mov	r0, #0
   16150:	b	13608 <dcgettext@plt>
   16154:	mov	r2, #5
   16158:	ldr	r1, [pc, #84]	; 161b4 <g_strcmp0@plt+0x27ec>
   1615c:	mov	r0, #0
   16160:	b	13608 <dcgettext@plt>
   16164:	mov	r2, #5
   16168:	ldr	r1, [pc, #72]	; 161b8 <g_strcmp0@plt+0x27f0>
   1616c:	mov	r0, #0
   16170:	b	13608 <dcgettext@plt>
   16174:	push	{r4, lr}
   16178:	bl	13794 <pk_info_enum_to_string@plt>
   1617c:	ldr	r2, [pc, #56]	; 161bc <g_strcmp0@plt+0x27f4>
   16180:	mov	r1, #16
   16184:	mov	r3, r0
   16188:	ldr	r0, [pc, #48]	; 161c0 <g_strcmp0@plt+0x27f8>
   1618c:	bl	13278 <g_log@plt>
   16190:	mov	r0, #0
   16194:	pop	{r4, pc}
   16198:	andeq	ip, r1, ip, lsl #18
   1619c:	andeq	ip, r1, r0, asr #17
   161a0:	andeq	ip, r1, ip, asr #17
   161a4:	andeq	ip, r1, r8, lsl #16
   161a8:	ldrdeq	ip, [r1], -r4
   161ac:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   161b0:	andeq	ip, r1, r8, ror #17
   161b4:	strdeq	ip, [r1], -r4
   161b8:	andeq	ip, r1, r0, lsl #18
   161bc:	andeq	ip, r1, r4, lsr r8
   161c0:	andeq	r9, r1, ip, ror #14
   161c4:	cmp	r0, #32
   161c8:	ldrls	pc, [pc, r0, lsl #2]
   161cc:	b	16444 <g_strcmp0@plt+0x2a7c>
   161d0:	andeq	r6, r1, r4, lsr r4
   161d4:	andeq	r6, r1, r4, lsr #8
   161d8:	andeq	r6, r1, r4, lsl r4
   161dc:	andeq	r6, r1, r4, lsl #8
   161e0:	strdeq	r6, [r1], -r4
   161e4:	andeq	r6, r1, r4, ror #7
   161e8:	ldrdeq	r6, [r1], -r4
   161ec:	andeq	r6, r1, r4, asr #7
   161f0:			; <UNDEFINED> instruction: 0x000163b4
   161f4:	andeq	r6, r1, r4, lsr #7
   161f8:	muleq	r1, r4, r3
   161fc:	andeq	r6, r1, r4, lsl #7
   16200:	andeq	r6, r1, r4, ror r3
   16204:	andeq	r6, r1, r4, ror #6
   16208:	andeq	r6, r1, r4, asr r3
   1620c:	andeq	r6, r1, r4, asr #6
   16210:	andeq	r6, r1, r4, lsr r3
   16214:	andeq	r6, r1, r4, lsr #6
   16218:	andeq	r6, r1, r4, lsl r3
   1621c:	andeq	r6, r1, r4, lsl #6
   16220:	strdeq	r6, [r1], -r4
   16224:	andeq	r6, r1, r4, ror #5
   16228:	ldrdeq	r6, [r1], -r4
   1622c:	andeq	r6, r1, r4, asr #5
   16230:			; <UNDEFINED> instruction: 0x000162b4
   16234:	andeq	r6, r1, r4, lsr #5
   16238:	muleq	r1, r4, r2
   1623c:	andeq	r6, r1, r4, lsl #5
   16240:	andeq	r6, r1, r4, ror r2
   16244:	andeq	r6, r1, r4, ror #4
   16248:	andeq	r6, r1, r4, lsl #8
   1624c:	strdeq	r6, [r1], -r4
   16250:	andeq	r6, r1, r4, asr r2
   16254:	mov	r2, #5
   16258:	ldr	r1, [pc, #520]	; 16468 <g_strcmp0@plt+0x2aa0>
   1625c:	mov	r0, #0
   16260:	b	13608 <dcgettext@plt>
   16264:	mov	r2, #5
   16268:	ldr	r1, [pc, #508]	; 1646c <g_strcmp0@plt+0x2aa4>
   1626c:	mov	r0, #0
   16270:	b	13608 <dcgettext@plt>
   16274:	mov	r2, #5
   16278:	ldr	r1, [pc, #496]	; 16470 <g_strcmp0@plt+0x2aa8>
   1627c:	mov	r0, #0
   16280:	b	13608 <dcgettext@plt>
   16284:	mov	r2, #5
   16288:	ldr	r1, [pc, #484]	; 16474 <g_strcmp0@plt+0x2aac>
   1628c:	mov	r0, #0
   16290:	b	13608 <dcgettext@plt>
   16294:	mov	r2, #5
   16298:	ldr	r1, [pc, #472]	; 16478 <g_strcmp0@plt+0x2ab0>
   1629c:	mov	r0, #0
   162a0:	b	13608 <dcgettext@plt>
   162a4:	mov	r2, #5
   162a8:	ldr	r1, [pc, #460]	; 1647c <g_strcmp0@plt+0x2ab4>
   162ac:	mov	r0, #0
   162b0:	b	13608 <dcgettext@plt>
   162b4:	mov	r2, #5
   162b8:	ldr	r1, [pc, #448]	; 16480 <g_strcmp0@plt+0x2ab8>
   162bc:	mov	r0, #0
   162c0:	b	13608 <dcgettext@plt>
   162c4:	mov	r2, #5
   162c8:	ldr	r1, [pc, #436]	; 16484 <g_strcmp0@plt+0x2abc>
   162cc:	mov	r0, #0
   162d0:	b	13608 <dcgettext@plt>
   162d4:	mov	r2, #5
   162d8:	ldr	r1, [pc, #424]	; 16488 <g_strcmp0@plt+0x2ac0>
   162dc:	mov	r0, #0
   162e0:	b	13608 <dcgettext@plt>
   162e4:	mov	r2, #5
   162e8:	ldr	r1, [pc, #412]	; 1648c <g_strcmp0@plt+0x2ac4>
   162ec:	mov	r0, #0
   162f0:	b	13608 <dcgettext@plt>
   162f4:	mov	r2, #5
   162f8:	ldr	r1, [pc, #400]	; 16490 <g_strcmp0@plt+0x2ac8>
   162fc:	mov	r0, #0
   16300:	b	13608 <dcgettext@plt>
   16304:	mov	r2, #5
   16308:	ldr	r1, [pc, #388]	; 16494 <g_strcmp0@plt+0x2acc>
   1630c:	mov	r0, #0
   16310:	b	13608 <dcgettext@plt>
   16314:	mov	r2, #5
   16318:	ldr	r1, [pc, #376]	; 16498 <g_strcmp0@plt+0x2ad0>
   1631c:	mov	r0, #0
   16320:	b	13608 <dcgettext@plt>
   16324:	mov	r2, #5
   16328:	ldr	r1, [pc, #364]	; 1649c <g_strcmp0@plt+0x2ad4>
   1632c:	mov	r0, #0
   16330:	b	13608 <dcgettext@plt>
   16334:	mov	r2, #5
   16338:	ldr	r1, [pc, #352]	; 164a0 <g_strcmp0@plt+0x2ad8>
   1633c:	mov	r0, #0
   16340:	b	13608 <dcgettext@plt>
   16344:	mov	r2, #5
   16348:	ldr	r1, [pc, #340]	; 164a4 <g_strcmp0@plt+0x2adc>
   1634c:	mov	r0, #0
   16350:	b	13608 <dcgettext@plt>
   16354:	mov	r2, #5
   16358:	ldr	r1, [pc, #328]	; 164a8 <g_strcmp0@plt+0x2ae0>
   1635c:	mov	r0, #0
   16360:	b	13608 <dcgettext@plt>
   16364:	mov	r2, #5
   16368:	ldr	r1, [pc, #316]	; 164ac <g_strcmp0@plt+0x2ae4>
   1636c:	mov	r0, #0
   16370:	b	13608 <dcgettext@plt>
   16374:	mov	r2, #5
   16378:	ldr	r1, [pc, #304]	; 164b0 <g_strcmp0@plt+0x2ae8>
   1637c:	mov	r0, #0
   16380:	b	13608 <dcgettext@plt>
   16384:	mov	r2, #5
   16388:	ldr	r1, [pc, #292]	; 164b4 <g_strcmp0@plt+0x2aec>
   1638c:	mov	r0, #0
   16390:	b	13608 <dcgettext@plt>
   16394:	mov	r2, #5
   16398:	ldr	r1, [pc, #280]	; 164b8 <g_strcmp0@plt+0x2af0>
   1639c:	mov	r0, #0
   163a0:	b	13608 <dcgettext@plt>
   163a4:	mov	r2, #5
   163a8:	ldr	r1, [pc, #268]	; 164bc <g_strcmp0@plt+0x2af4>
   163ac:	mov	r0, #0
   163b0:	b	13608 <dcgettext@plt>
   163b4:	mov	r2, #5
   163b8:	ldr	r1, [pc, #256]	; 164c0 <g_strcmp0@plt+0x2af8>
   163bc:	mov	r0, #0
   163c0:	b	13608 <dcgettext@plt>
   163c4:	mov	r2, #5
   163c8:	ldr	r1, [pc, #244]	; 164c4 <g_strcmp0@plt+0x2afc>
   163cc:	mov	r0, #0
   163d0:	b	13608 <dcgettext@plt>
   163d4:	mov	r2, #5
   163d8:	ldr	r1, [pc, #232]	; 164c8 <g_strcmp0@plt+0x2b00>
   163dc:	mov	r0, #0
   163e0:	b	13608 <dcgettext@plt>
   163e4:	mov	r2, #5
   163e8:	ldr	r1, [pc, #220]	; 164cc <g_strcmp0@plt+0x2b04>
   163ec:	mov	r0, #0
   163f0:	b	13608 <dcgettext@plt>
   163f4:	mov	r2, #5
   163f8:	ldr	r1, [pc, #208]	; 164d0 <g_strcmp0@plt+0x2b08>
   163fc:	mov	r0, #0
   16400:	b	13608 <dcgettext@plt>
   16404:	mov	r2, #5
   16408:	ldr	r1, [pc, #196]	; 164d4 <g_strcmp0@plt+0x2b0c>
   1640c:	mov	r0, #0
   16410:	b	13608 <dcgettext@plt>
   16414:	mov	r2, #5
   16418:	ldr	r1, [pc, #184]	; 164d8 <g_strcmp0@plt+0x2b10>
   1641c:	mov	r0, #0
   16420:	b	13608 <dcgettext@plt>
   16424:	mov	r2, #5
   16428:	ldr	r1, [pc, #172]	; 164dc <g_strcmp0@plt+0x2b14>
   1642c:	mov	r0, #0
   16430:	b	13608 <dcgettext@plt>
   16434:	mov	r2, #5
   16438:	ldr	r1, [pc, #160]	; 164e0 <g_strcmp0@plt+0x2b18>
   1643c:	mov	r0, #0
   16440:	b	13608 <dcgettext@plt>
   16444:	push	{r4, lr}
   16448:	bl	1326c <pk_role_enum_to_string@plt>
   1644c:	ldr	r2, [pc, #144]	; 164e4 <g_strcmp0@plt+0x2b1c>
   16450:	mov	r1, #16
   16454:	mov	r3, r0
   16458:	ldr	r0, [pc, #136]	; 164e8 <g_strcmp0@plt+0x2b20>
   1645c:	bl	13278 <g_log@plt>
   16460:	mov	r0, #0
   16464:	pop	{r4, pc}
   16468:	andeq	ip, r1, r0, ror #20
   1646c:	andeq	ip, r1, r0, ror #22
   16470:	andeq	ip, r1, r4, asr #22
   16474:	andeq	ip, r1, r0, lsr fp
   16478:	andeq	ip, r1, r4, lsl #22
   1647c:	andeq	ip, r1, r4, ror #6
   16480:	strdeq	ip, [r1], -r4
   16484:	andeq	ip, r1, ip, lsr #21
   16488:	andeq	ip, r1, r8, lsl sl
   1648c:	ldrdeq	ip, [r1], -r0
   16490:			; <UNDEFINED> instruction: 0x0001c9bc
   16494:	andeq	ip, r1, r8, lsr #19
   16498:	muleq	r1, r4, r9
   1649c:	andeq	ip, r1, ip, lsl #21
   164a0:	andeq	ip, r1, r4, ror sl
   164a4:	andeq	ip, r1, ip, asr #20
   164a8:	andeq	ip, r1, r0, ror r8
   164ac:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   164b0:	andeq	ip, r1, r4, asr #21
   164b4:	andeq	ip, r1, r4, ror #16
   164b8:	andeq	ip, r1, ip, ror #19
   164bc:	andeq	ip, r1, r4, lsl #19
   164c0:	andeq	ip, r1, r8, asr #18
   164c4:	andeq	ip, r1, r0, ror r9
   164c8:	andeq	ip, r1, ip, lsr #20
   164cc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   164d0:	muleq	r1, r8, sl
   164d4:	andeq	ip, r1, r0, ror #18
   164d8:	andeq	ip, r1, r0, lsr r9
   164dc:	andeq	ip, r1, r8, asr r4
   164e0:	andeq	ip, r1, ip, lsl r9
   164e4:	andeq	ip, r1, r8, ror fp
   164e8:	andeq	r9, r1, ip, ror #14
   164ec:	cmp	r0, #32
   164f0:	ldrls	pc, [pc, r0, lsl #2]
   164f4:	b	1676c <g_strcmp0@plt+0x2da4>
   164f8:	andeq	r6, r1, ip, asr r7
   164fc:	andeq	r6, r1, ip, asr #14
   16500:	andeq	r6, r1, ip, lsr r7
   16504:	andeq	r6, r1, ip, lsr #14
   16508:	andeq	r6, r1, ip, lsl r7
   1650c:	andeq	r6, r1, ip, lsl #14
   16510:	strdeq	r6, [r1], -ip
   16514:	andeq	r6, r1, ip, ror #13
   16518:	ldrdeq	r6, [r1], -ip
   1651c:	andeq	r6, r1, ip, asr #13
   16520:			; <UNDEFINED> instruction: 0x000166bc
   16524:	andeq	r6, r1, ip, lsr #13
   16528:	muleq	r1, ip, r6
   1652c:	andeq	r6, r1, ip, lsl #13
   16530:	andeq	r6, r1, ip, ror r6
   16534:	andeq	r6, r1, ip, ror #12
   16538:	andeq	r6, r1, ip, asr r6
   1653c:	andeq	r6, r1, ip, asr #12
   16540:	andeq	r6, r1, ip, lsr r6
   16544:	andeq	r6, r1, ip, lsr #12
   16548:	andeq	r6, r1, ip, lsl r6
   1654c:	andeq	r6, r1, ip, lsl #12
   16550:	strdeq	r6, [r1], -ip
   16554:	andeq	r6, r1, ip, ror #11
   16558:	ldrdeq	r6, [r1], -ip
   1655c:	andeq	r6, r1, ip, asr #11
   16560:			; <UNDEFINED> instruction: 0x000165bc
   16564:	andeq	r6, r1, ip, lsr #11
   16568:	muleq	r1, ip, r5
   1656c:	andeq	r6, r1, ip, lsl #11
   16570:	andeq	r6, r1, ip, lsr #14
   16574:	andeq	r6, r1, ip, lsl r7
   16578:	andeq	r6, r1, ip, ror r5
   1657c:	mov	r2, #5
   16580:	ldr	r1, [pc, #520]	; 16790 <g_strcmp0@plt+0x2dc8>
   16584:	mov	r0, #0
   16588:	b	13608 <dcgettext@plt>
   1658c:	mov	r2, #5
   16590:	ldr	r1, [pc, #508]	; 16794 <g_strcmp0@plt+0x2dcc>
   16594:	mov	r0, #0
   16598:	b	13608 <dcgettext@plt>
   1659c:	mov	r2, #5
   165a0:	ldr	r1, [pc, #496]	; 16798 <g_strcmp0@plt+0x2dd0>
   165a4:	mov	r0, #0
   165a8:	b	13608 <dcgettext@plt>
   165ac:	mov	r2, #5
   165b0:	ldr	r1, [pc, #484]	; 1679c <g_strcmp0@plt+0x2dd4>
   165b4:	mov	r0, #0
   165b8:	b	13608 <dcgettext@plt>
   165bc:	mov	r2, #5
   165c0:	ldr	r1, [pc, #472]	; 167a0 <g_strcmp0@plt+0x2dd8>
   165c4:	mov	r0, #0
   165c8:	b	13608 <dcgettext@plt>
   165cc:	mov	r2, #5
   165d0:	ldr	r1, [pc, #460]	; 167a4 <g_strcmp0@plt+0x2ddc>
   165d4:	mov	r0, #0
   165d8:	b	13608 <dcgettext@plt>
   165dc:	mov	r2, #5
   165e0:	ldr	r1, [pc, #448]	; 167a8 <g_strcmp0@plt+0x2de0>
   165e4:	mov	r0, #0
   165e8:	b	13608 <dcgettext@plt>
   165ec:	mov	r2, #5
   165f0:	ldr	r1, [pc, #436]	; 167ac <g_strcmp0@plt+0x2de4>
   165f4:	mov	r0, #0
   165f8:	b	13608 <dcgettext@plt>
   165fc:	mov	r2, #5
   16600:	ldr	r1, [pc, #424]	; 167b0 <g_strcmp0@plt+0x2de8>
   16604:	mov	r0, #0
   16608:	b	13608 <dcgettext@plt>
   1660c:	mov	r2, #5
   16610:	ldr	r1, [pc, #412]	; 167b4 <g_strcmp0@plt+0x2dec>
   16614:	mov	r0, #0
   16618:	b	13608 <dcgettext@plt>
   1661c:	mov	r2, #5
   16620:	ldr	r1, [pc, #400]	; 167b8 <g_strcmp0@plt+0x2df0>
   16624:	mov	r0, #0
   16628:	b	13608 <dcgettext@plt>
   1662c:	mov	r2, #5
   16630:	ldr	r1, [pc, #388]	; 167bc <g_strcmp0@plt+0x2df4>
   16634:	mov	r0, #0
   16638:	b	13608 <dcgettext@plt>
   1663c:	mov	r2, #5
   16640:	ldr	r1, [pc, #376]	; 167c0 <g_strcmp0@plt+0x2df8>
   16644:	mov	r0, #0
   16648:	b	13608 <dcgettext@plt>
   1664c:	mov	r2, #5
   16650:	ldr	r1, [pc, #364]	; 167c4 <g_strcmp0@plt+0x2dfc>
   16654:	mov	r0, #0
   16658:	b	13608 <dcgettext@plt>
   1665c:	mov	r2, #5
   16660:	ldr	r1, [pc, #352]	; 167c8 <g_strcmp0@plt+0x2e00>
   16664:	mov	r0, #0
   16668:	b	13608 <dcgettext@plt>
   1666c:	mov	r2, #5
   16670:	ldr	r1, [pc, #340]	; 167cc <g_strcmp0@plt+0x2e04>
   16674:	mov	r0, #0
   16678:	b	13608 <dcgettext@plt>
   1667c:	mov	r2, #5
   16680:	ldr	r1, [pc, #328]	; 167d0 <g_strcmp0@plt+0x2e08>
   16684:	mov	r0, #0
   16688:	b	13608 <dcgettext@plt>
   1668c:	mov	r2, #5
   16690:	ldr	r1, [pc, #316]	; 167d4 <g_strcmp0@plt+0x2e0c>
   16694:	mov	r0, #0
   16698:	b	13608 <dcgettext@plt>
   1669c:	mov	r2, #5
   166a0:	ldr	r1, [pc, #304]	; 167d8 <g_strcmp0@plt+0x2e10>
   166a4:	mov	r0, #0
   166a8:	b	13608 <dcgettext@plt>
   166ac:	mov	r2, #5
   166b0:	ldr	r1, [pc, #292]	; 167dc <g_strcmp0@plt+0x2e14>
   166b4:	mov	r0, #0
   166b8:	b	13608 <dcgettext@plt>
   166bc:	mov	r2, #5
   166c0:	ldr	r1, [pc, #280]	; 167e0 <g_strcmp0@plt+0x2e18>
   166c4:	mov	r0, #0
   166c8:	b	13608 <dcgettext@plt>
   166cc:	mov	r2, #5
   166d0:	ldr	r1, [pc, #268]	; 167e4 <g_strcmp0@plt+0x2e1c>
   166d4:	mov	r0, #0
   166d8:	b	13608 <dcgettext@plt>
   166dc:	mov	r2, #5
   166e0:	ldr	r1, [pc, #256]	; 167e8 <g_strcmp0@plt+0x2e20>
   166e4:	mov	r0, #0
   166e8:	b	13608 <dcgettext@plt>
   166ec:	mov	r2, #5
   166f0:	ldr	r1, [pc, #244]	; 167ec <g_strcmp0@plt+0x2e24>
   166f4:	mov	r0, #0
   166f8:	b	13608 <dcgettext@plt>
   166fc:	mov	r2, #5
   16700:	ldr	r1, [pc, #232]	; 167f0 <g_strcmp0@plt+0x2e28>
   16704:	mov	r0, #0
   16708:	b	13608 <dcgettext@plt>
   1670c:	mov	r2, #5
   16710:	ldr	r1, [pc, #220]	; 167f4 <g_strcmp0@plt+0x2e2c>
   16714:	mov	r0, #0
   16718:	b	13608 <dcgettext@plt>
   1671c:	mov	r2, #5
   16720:	ldr	r1, [pc, #208]	; 167f8 <g_strcmp0@plt+0x2e30>
   16724:	mov	r0, #0
   16728:	b	13608 <dcgettext@plt>
   1672c:	mov	r2, #5
   16730:	ldr	r1, [pc, #196]	; 167fc <g_strcmp0@plt+0x2e34>
   16734:	mov	r0, #0
   16738:	b	13608 <dcgettext@plt>
   1673c:	mov	r2, #5
   16740:	ldr	r1, [pc, #184]	; 16800 <g_strcmp0@plt+0x2e38>
   16744:	mov	r0, #0
   16748:	b	13608 <dcgettext@plt>
   1674c:	mov	r2, #5
   16750:	ldr	r1, [pc, #172]	; 16804 <g_strcmp0@plt+0x2e3c>
   16754:	mov	r0, #0
   16758:	b	13608 <dcgettext@plt>
   1675c:	mov	r2, #5
   16760:	ldr	r1, [pc, #160]	; 16808 <g_strcmp0@plt+0x2e40>
   16764:	mov	r0, #0
   16768:	b	13608 <dcgettext@plt>
   1676c:	push	{r4, lr}
   16770:	bl	1326c <pk_role_enum_to_string@plt>
   16774:	ldr	r2, [pc, #144]	; 1680c <g_strcmp0@plt+0x2e44>
   16778:	mov	r1, #16
   1677c:	mov	r3, r0
   16780:	ldr	r0, [pc, #136]	; 16810 <g_strcmp0@plt+0x2e48>
   16784:	bl	13278 <g_log@plt>
   16788:	mov	r0, #0
   1678c:	pop	{r4, pc}
   16790:	andeq	ip, r1, r8, ror #25
   16794:	ldrdeq	ip, [r1], -r0
   16798:			; <UNDEFINED> instruction: 0x0001cdb8
   1679c:	andeq	ip, r1, r8, lsr #27
   167a0:	andeq	ip, r1, ip, lsl #27
   167a4:	andeq	ip, r1, r8, ror sp
   167a8:	andeq	ip, r1, r8, ror #26
   167ac:	andeq	ip, r1, ip, lsr #26
   167b0:	muleq	r1, r8, ip
   167b4:	andeq	ip, r1, r4, lsr #24
   167b8:	andeq	ip, r1, r4, lsl ip
   167bc:	andeq	ip, r1, r0, lsl #24
   167c0:	andeq	ip, r1, r0, ror #23
   167c4:	andeq	ip, r1, r0, lsl sp
   167c8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   167cc:	ldrdeq	ip, [r1], -r4
   167d0:	andeq	ip, r1, r0, asr #24
   167d4:	andeq	ip, r1, r0, lsl #25
   167d8:	andeq	ip, r1, r0, asr #26
   167dc:	andeq	ip, r1, r4, asr ip
   167e0:	andeq	ip, r1, r8, ror #24
   167e4:	ldrdeq	ip, [r1], -r4
   167e8:	andeq	ip, r1, r4, lsr #23
   167ec:	andeq	ip, r1, r4, asr #23
   167f0:			; <UNDEFINED> instruction: 0x0001ccb8
   167f4:	andeq	ip, r1, r4, asr sp
   167f8:	andeq	ip, r1, ip, lsl sp
   167fc:			; <UNDEFINED> instruction: 0x0001cbb8
   16800:	muleq	r1, r0, fp
   16804:	andeq	ip, r1, ip, lsr #25
   16808:	andeq	ip, r1, ip, lsl r9
   1680c:	andeq	ip, r1, r8, ror fp
   16810:	andeq	r9, r1, ip, ror #14
   16814:	cmp	r0, #34	; 0x22
   16818:	ldrls	pc, [pc, r0, lsl #2]
   1681c:	b	16adc <g_strcmp0@plt+0x3114>
   16820:	andeq	r6, r1, ip, asr #21
   16824:			; <UNDEFINED> instruction: 0x00016abc
   16828:	andeq	r6, r1, ip, lsr #21
   1682c:	muleq	r1, ip, sl
   16830:	andeq	r6, r1, ip, lsl #21
   16834:	andeq	r6, r1, ip, ror sl
   16838:	andeq	r6, r1, ip, ror #20
   1683c:	andeq	r6, r1, ip, asr sl
   16840:	andeq	r6, r1, ip, asr #20
   16844:	andeq	r6, r1, ip, lsr sl
   16848:	andeq	r6, r1, ip, lsr #20
   1684c:	andeq	r6, r1, ip, lsl sl
   16850:	andeq	r6, r1, ip, lsl #20
   16854:	strdeq	r6, [r1], -ip
   16858:	andeq	r6, r1, ip, ror #19
   1685c:	ldrdeq	r6, [r1], -ip
   16860:	andeq	r6, r1, ip, asr #19
   16864:			; <UNDEFINED> instruction: 0x000169bc
   16868:	andeq	r6, r1, ip, lsr #19
   1686c:	muleq	r1, ip, r9
   16870:	andeq	r6, r1, ip, lsl #19
   16874:	andeq	r6, r1, ip, ror r9
   16878:	andeq	r6, r1, ip, ror #18
   1687c:	andeq	r6, r1, ip, asr r9
   16880:	andeq	r6, r1, ip, asr #18
   16884:	andeq	r6, r1, ip, lsr r9
   16888:	andeq	r6, r1, ip, lsr #18
   1688c:	andeq	r6, r1, ip, lsl r9
   16890:	andeq	r6, r1, ip, lsl #18
   16894:	strdeq	r6, [r1], -ip
   16898:	andeq	r6, r1, ip, ror #17
   1689c:	ldrdeq	r6, [r1], -ip
   168a0:	andeq	r6, r1, ip, asr #17
   168a4:			; <UNDEFINED> instruction: 0x000168bc
   168a8:	andeq	r6, r1, ip, lsr #17
   168ac:	mov	r2, #5
   168b0:	ldr	r1, [pc, #580]	; 16afc <g_strcmp0@plt+0x3134>
   168b4:	mov	r0, #0
   168b8:	b	13608 <dcgettext@plt>
   168bc:	mov	r2, #5
   168c0:	ldr	r1, [pc, #568]	; 16b00 <g_strcmp0@plt+0x3138>
   168c4:	mov	r0, #0
   168c8:	b	13608 <dcgettext@plt>
   168cc:	mov	r2, #5
   168d0:	ldr	r1, [pc, #556]	; 16b04 <g_strcmp0@plt+0x313c>
   168d4:	mov	r0, #0
   168d8:	b	13608 <dcgettext@plt>
   168dc:	mov	r2, #5
   168e0:	ldr	r1, [pc, #544]	; 16b08 <g_strcmp0@plt+0x3140>
   168e4:	mov	r0, #0
   168e8:	b	13608 <dcgettext@plt>
   168ec:	mov	r2, #5
   168f0:	ldr	r1, [pc, #532]	; 16b0c <g_strcmp0@plt+0x3144>
   168f4:	mov	r0, #0
   168f8:	b	13608 <dcgettext@plt>
   168fc:	mov	r2, #5
   16900:	ldr	r1, [pc, #520]	; 16b10 <g_strcmp0@plt+0x3148>
   16904:	mov	r0, #0
   16908:	b	13608 <dcgettext@plt>
   1690c:	mov	r2, #5
   16910:	ldr	r1, [pc, #508]	; 16b14 <g_strcmp0@plt+0x314c>
   16914:	mov	r0, #0
   16918:	b	13608 <dcgettext@plt>
   1691c:	mov	r2, #5
   16920:	ldr	r1, [pc, #496]	; 16b18 <g_strcmp0@plt+0x3150>
   16924:	mov	r0, #0
   16928:	b	13608 <dcgettext@plt>
   1692c:	mov	r2, #5
   16930:	ldr	r1, [pc, #484]	; 16b1c <g_strcmp0@plt+0x3154>
   16934:	mov	r0, #0
   16938:	b	13608 <dcgettext@plt>
   1693c:	mov	r2, #5
   16940:	ldr	r1, [pc, #472]	; 16b20 <g_strcmp0@plt+0x3158>
   16944:	mov	r0, #0
   16948:	b	13608 <dcgettext@plt>
   1694c:	mov	r2, #5
   16950:	ldr	r1, [pc, #460]	; 16b24 <g_strcmp0@plt+0x315c>
   16954:	mov	r0, #0
   16958:	b	13608 <dcgettext@plt>
   1695c:	mov	r2, #5
   16960:	ldr	r1, [pc, #448]	; 16b28 <g_strcmp0@plt+0x3160>
   16964:	mov	r0, #0
   16968:	b	13608 <dcgettext@plt>
   1696c:	mov	r2, #5
   16970:	ldr	r1, [pc, #436]	; 16b2c <g_strcmp0@plt+0x3164>
   16974:	mov	r0, #0
   16978:	b	13608 <dcgettext@plt>
   1697c:	mov	r2, #5
   16980:	ldr	r1, [pc, #424]	; 16b30 <g_strcmp0@plt+0x3168>
   16984:	mov	r0, #0
   16988:	b	13608 <dcgettext@plt>
   1698c:	mov	r2, #5
   16990:	ldr	r1, [pc, #412]	; 16b34 <g_strcmp0@plt+0x316c>
   16994:	mov	r0, #0
   16998:	b	13608 <dcgettext@plt>
   1699c:	mov	r2, #5
   169a0:	ldr	r1, [pc, #400]	; 16b38 <g_strcmp0@plt+0x3170>
   169a4:	mov	r0, #0
   169a8:	b	13608 <dcgettext@plt>
   169ac:	mov	r2, #5
   169b0:	ldr	r1, [pc, #388]	; 16b3c <g_strcmp0@plt+0x3174>
   169b4:	mov	r0, #0
   169b8:	b	13608 <dcgettext@plt>
   169bc:	mov	r2, #5
   169c0:	ldr	r1, [pc, #376]	; 16b40 <g_strcmp0@plt+0x3178>
   169c4:	mov	r0, #0
   169c8:	b	13608 <dcgettext@plt>
   169cc:	mov	r2, #5
   169d0:	ldr	r1, [pc, #364]	; 16b44 <g_strcmp0@plt+0x317c>
   169d4:	mov	r0, #0
   169d8:	b	13608 <dcgettext@plt>
   169dc:	mov	r2, #5
   169e0:	ldr	r1, [pc, #352]	; 16b48 <g_strcmp0@plt+0x3180>
   169e4:	mov	r0, #0
   169e8:	b	13608 <dcgettext@plt>
   169ec:	mov	r2, #5
   169f0:	ldr	r1, [pc, #340]	; 16b4c <g_strcmp0@plt+0x3184>
   169f4:	mov	r0, #0
   169f8:	b	13608 <dcgettext@plt>
   169fc:	mov	r2, #5
   16a00:	ldr	r1, [pc, #328]	; 16b50 <g_strcmp0@plt+0x3188>
   16a04:	mov	r0, #0
   16a08:	b	13608 <dcgettext@plt>
   16a0c:	mov	r2, #5
   16a10:	ldr	r1, [pc, #316]	; 16b54 <g_strcmp0@plt+0x318c>
   16a14:	mov	r0, #0
   16a18:	b	13608 <dcgettext@plt>
   16a1c:	mov	r2, #5
   16a20:	ldr	r1, [pc, #304]	; 16b58 <g_strcmp0@plt+0x3190>
   16a24:	mov	r0, #0
   16a28:	b	13608 <dcgettext@plt>
   16a2c:	mov	r2, #5
   16a30:	ldr	r1, [pc, #292]	; 16b5c <g_strcmp0@plt+0x3194>
   16a34:	mov	r0, #0
   16a38:	b	13608 <dcgettext@plt>
   16a3c:	mov	r2, #5
   16a40:	ldr	r1, [pc, #280]	; 16b60 <g_strcmp0@plt+0x3198>
   16a44:	mov	r0, #0
   16a48:	b	13608 <dcgettext@plt>
   16a4c:	mov	r2, #5
   16a50:	ldr	r1, [pc, #268]	; 16b64 <g_strcmp0@plt+0x319c>
   16a54:	mov	r0, #0
   16a58:	b	13608 <dcgettext@plt>
   16a5c:	mov	r2, #5
   16a60:	ldr	r1, [pc, #256]	; 16b68 <g_strcmp0@plt+0x31a0>
   16a64:	mov	r0, #0
   16a68:	b	13608 <dcgettext@plt>
   16a6c:	mov	r2, #5
   16a70:	ldr	r1, [pc, #244]	; 16b6c <g_strcmp0@plt+0x31a4>
   16a74:	mov	r0, #0
   16a78:	b	13608 <dcgettext@plt>
   16a7c:	mov	r2, #5
   16a80:	ldr	r1, [pc, #232]	; 16b70 <g_strcmp0@plt+0x31a8>
   16a84:	mov	r0, #0
   16a88:	b	13608 <dcgettext@plt>
   16a8c:	mov	r2, #5
   16a90:	ldr	r1, [pc, #220]	; 16b74 <g_strcmp0@plt+0x31ac>
   16a94:	mov	r0, #0
   16a98:	b	13608 <dcgettext@plt>
   16a9c:	mov	r2, #5
   16aa0:	ldr	r1, [pc, #208]	; 16b78 <g_strcmp0@plt+0x31b0>
   16aa4:	mov	r0, #0
   16aa8:	b	13608 <dcgettext@plt>
   16aac:	mov	r2, #5
   16ab0:	ldr	r1, [pc, #196]	; 16b7c <g_strcmp0@plt+0x31b4>
   16ab4:	mov	r0, #0
   16ab8:	b	13608 <dcgettext@plt>
   16abc:	mov	r2, #5
   16ac0:	ldr	r1, [pc, #184]	; 16b80 <g_strcmp0@plt+0x31b8>
   16ac4:	mov	r0, #0
   16ac8:	b	13608 <dcgettext@plt>
   16acc:	mov	r2, #5
   16ad0:	ldr	r1, [pc, #172]	; 16b84 <g_strcmp0@plt+0x31bc>
   16ad4:	mov	r0, #0
   16ad8:	b	13608 <dcgettext@plt>
   16adc:	mov	r3, r0
   16ae0:	push	{r4, lr}
   16ae4:	mov	r1, #16
   16ae8:	ldr	r2, [pc, #152]	; 16b88 <g_strcmp0@plt+0x31c0>
   16aec:	ldr	r0, [pc, #152]	; 16b8c <g_strcmp0@plt+0x31c4>
   16af0:	bl	13278 <g_log@plt>
   16af4:	mov	r0, #0
   16af8:	pop	{r4, pc}
   16afc:	andeq	ip, r1, r8, ror pc
   16b00:	andeq	ip, r1, r0, ror pc
   16b04:	andeq	ip, r1, ip, asr pc
   16b08:	andeq	ip, r1, r0, asr pc
   16b0c:	andeq	ip, r1, r0, asr #30
   16b10:	andeq	ip, r1, r8, lsr pc
   16b14:	ldrdeq	ip, [r1], -r8
   16b18:	andeq	ip, r1, r4, asr lr
   16b1c:	andeq	ip, r1, r4, lsr #29
   16b20:	andeq	ip, r1, r8, ror #29
   16b24:	andeq	ip, r1, r8, lsr #30
   16b28:	muleq	r1, r8, lr
   16b2c:	andeq	ip, r1, ip, lsr lr
   16b30:	strdeq	ip, [r1], -r4
   16b34:	andeq	ip, r1, r4, lsr lr
   16b38:	andeq	ip, r1, ip, lsr #28
   16b3c:	andeq	ip, r1, r8, lsl pc
   16b40:	andeq	ip, r1, r8, asr #28
   16b44:	andeq	ip, r1, r0, lsr #30
   16b48:	andeq	ip, r1, r8, asr #29
   16b4c:	andeq	ip, r1, r0, asr #29
   16b50:	andeq	ip, r1, r0, lsr #28
   16b54:	andeq	ip, r1, r4, lsl lr
   16b58:	andeq	ip, r1, ip, lsl #28
   16b5c:	andeq	ip, r1, ip, lsr #29
   16b60:	andeq	ip, r1, r0, lsl #28
   16b64:	andeq	ip, r1, r8, ror lr
   16b68:	andeq	ip, r1, r8, lsl #29
   16b6c:	andeq	ip, r1, ip, ror #28
   16b70:	andeq	ip, r1, ip, asr lr
   16b74:	andeq	ip, r1, r8, lsl #30
   16b78:			; <UNDEFINED> instruction: 0x0001ceb4
   16b7c:	strdeq	ip, [r1], -r4
   16b80:	andeq	ip, r1, r4, ror #27
   16b84:	andeq	ip, r1, r8, lsl #31
   16b88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16b8c:	andeq	r9, r1, ip, ror #14
   16b90:	mov	r1, r0
   16b94:	ldr	r0, [pc]	; 16b9c <g_strcmp0@plt+0x31d4>
   16b98:	b	13920 <pk_enum_find_string@plt>
   16b9c:	ldrdeq	r9, [r1], -r0
   16ba0:	mov	r1, r0
   16ba4:	ldr	r0, [pc]	; 16bac <g_strcmp0@plt+0x31e4>
   16ba8:	b	13920 <pk_enum_find_string@plt>
   16bac:	andeq	r9, r1, r0, lsr #23
   16bb0:	mov	r1, r0
   16bb4:	ldr	r0, [pc]	; 16bbc <g_strcmp0@plt+0x31f4>
   16bb8:	b	13920 <pk_enum_find_string@plt>
   16bbc:	andeq	r9, r1, r8, asr #25
   16bc0:	mov	r1, r0
   16bc4:	ldr	r0, [pc]	; 16bcc <g_strcmp0@plt+0x3204>
   16bc8:	b	13920 <pk_enum_find_string@plt>
   16bcc:	strdeq	r9, [r1], -r0
   16bd0:	mov	r1, r0
   16bd4:	ldr	r0, [pc]	; 16bdc <g_strcmp0@plt+0x3214>
   16bd8:	b	13920 <pk_enum_find_string@plt>
   16bdc:	andeq	r9, r1, r0, lsl #30
   16be0:	mov	r1, r0
   16be4:	push	{r4, lr}
   16be8:	ldr	r0, [pc, #16]	; 16c00 <g_strcmp0@plt+0x3238>
   16bec:	bl	13920 <pk_enum_find_string@plt>
   16bf0:	ldrb	r3, [r0]
   16bf4:	cmp	r3, #0
   16bf8:	moveq	r0, #0
   16bfc:	pop	{r4, pc}
   16c00:	andeq	sl, r1, r0, lsr #32
   16c04:	mov	r1, r0
   16c08:	ldr	r0, [pc]	; 16c10 <g_strcmp0@plt+0x3248>
   16c0c:	b	13920 <pk_enum_find_string@plt>
   16c10:	andeq	sl, r1, r0, rrx
   16c14:	cmp	r0, #25
   16c18:	bhi	16c20 <g_strcmp0@plt+0x3258>
   16c1c:	b	15f7c <g_strcmp0@plt+0x25b4>
   16c20:	sub	r0, r0, #26
   16c24:	b	160a0 <g_strcmp0@plt+0x26d8>
   16c28:	cmp	r0, #10
   16c2c:	beq	16c50 <g_strcmp0@plt+0x3288>
   16c30:	sub	r3, r0, #11
   16c34:	cmp	r3, #1
   16c38:	bls	16c58 <g_strcmp0@plt+0x3290>
   16c3c:	cmp	r0, #25
   16c40:	bhi	16c60 <g_strcmp0@plt+0x3298>
   16c44:	mov	r1, r0
   16c48:	ldr	r0, [pc, #28]	; 16c6c <g_strcmp0@plt+0x32a4>
   16c4c:	b	13920 <pk_enum_find_string@plt>
   16c50:	ldr	r0, [pc, #24]	; 16c70 <g_strcmp0@plt+0x32a8>
   16c54:	bx	lr
   16c58:	ldr	r0, [pc, #20]	; 16c74 <g_strcmp0@plt+0x32ac>
   16c5c:	bx	lr
   16c60:	sub	r1, r0, #26
   16c64:	ldr	r0, [pc]	; 16c6c <g_strcmp0@plt+0x32a4>
   16c68:	b	13920 <pk_enum_find_string@plt>
   16c6c:	ldrdeq	r9, [r1], -r0
   16c70:			; <UNDEFINED> instruction: 0x0001cfb0
   16c74:	andeq	ip, r1, r8, asr #31
   16c78:	ldrb	r2, [r0]
   16c7c:	cmp	r2, #0
   16c80:	beq	16ce0 <g_strcmp0@plt+0x3318>
   16c84:	push	{r4, r5, r6, lr}
   16c88:	mov	r4, r0
   16c8c:	ldr	r1, [pc, #84]	; 16ce8 <g_strcmp0@plt+0x3320>
   16c90:	bl	134d0 <g_str_has_prefix@plt>
   16c94:	subs	r5, r0, #0
   16c98:	bne	16cb8 <g_strcmp0@plt+0x32f0>
   16c9c:	mov	r0, r4
   16ca0:	ldr	r1, [pc, #68]	; 16cec <g_strcmp0@plt+0x3324>
   16ca4:	bl	138a8 <g_str_has_suffix@plt>
   16ca8:	cmp	r0, #0
   16cac:	bne	16ccc <g_strcmp0@plt+0x3304>
   16cb0:	mov	r0, #0
   16cb4:	pop	{r4, r5, r6, pc}
   16cb8:	mov	r2, #5
   16cbc:	ldr	r1, [pc, #44]	; 16cf0 <g_strcmp0@plt+0x3328>
   16cc0:	mov	r0, #0
   16cc4:	pop	{r4, r5, r6, lr}
   16cc8:	b	13608 <dcgettext@plt>
   16ccc:	mov	r0, r5
   16cd0:	mov	r2, #5
   16cd4:	ldr	r1, [pc, #24]	; 16cf4 <g_strcmp0@plt+0x332c>
   16cd8:	pop	{r4, r5, r6, lr}
   16cdc:	b	13608 <dcgettext@plt>
   16ce0:	mov	r0, #0
   16ce4:	bx	lr
   16ce8:	ldrdeq	sp, [r1], -r4
   16cec:	andeq	sp, r1, r0, lsl #12
   16cf0:	strdeq	sp, [r1], -r8
   16cf4:	andeq	sp, r1, r4, lsl #12
   16cf8:	push	{r4, r5, r6, r7, r8, lr}
   16cfc:	mov	r5, r0
   16d00:	ldr	r0, [r0, #4]
   16d04:	mov	r1, #4
   16d08:	add	r0, r0, #1
   16d0c:	bl	13824 <g_malloc0_n@plt>
   16d10:	ldr	r3, [r5, #4]
   16d14:	cmp	r3, #0
   16d18:	mov	r7, r0
   16d1c:	beq	16d4c <g_strcmp0@plt+0x3384>
   16d20:	sub	r6, r0, #4
   16d24:	mov	r4, #0
   16d28:	ldr	r3, [r5]
   16d2c:	ldr	r0, [r3, r4, lsl #2]
   16d30:	bl	1314c <pk_package_get_id@plt>
   16d34:	bl	13398 <g_strdup@plt>
   16d38:	ldr	r3, [r5, #4]
   16d3c:	add	r4, r4, #1
   16d40:	cmp	r3, r4
   16d44:	str	r0, [r6, #4]!
   16d48:	bhi	16d28 <g_strcmp0@plt+0x3360>
   16d4c:	mov	r0, r7
   16d50:	pop	{r4, r5, r6, r7, r8, pc}
   16d54:	push	{r4, r5, r6, lr}
   16d58:	subs	r4, r0, #0
   16d5c:	beq	16da4 <g_strcmp0@plt+0x33dc>
   16d60:	bl	13650 <g_ptr_array_new@plt>
   16d64:	mov	r6, r0
   16d68:	mov	r0, r4
   16d6c:	bl	13584 <g_strv_length@plt>
   16d70:	cmp	r0, #0
   16d74:	subne	r4, r4, #4
   16d78:	addne	r5, r4, r0, lsl #2
   16d7c:	beq	16d9c <g_strcmp0@plt+0x33d4>
   16d80:	ldr	r0, [r4, #4]!
   16d84:	bl	13398 <g_strdup@plt>
   16d88:	mov	r1, r0
   16d8c:	mov	r0, r6
   16d90:	bl	13890 <g_ptr_array_add@plt>
   16d94:	cmp	r4, r5
   16d98:	bne	16d80 <g_strcmp0@plt+0x33b8>
   16d9c:	mov	r0, r6
   16da0:	pop	{r4, r5, r6, pc}
   16da4:	ldr	r2, [pc, #20]	; 16dc0 <g_strcmp0@plt+0x33f8>
   16da8:	ldr	r1, [pc, #20]	; 16dc4 <g_strcmp0@plt+0x33fc>
   16dac:	ldr	r0, [pc, #20]	; 16dc8 <g_strcmp0@plt+0x3400>
   16db0:	mov	r6, r4
   16db4:	bl	13128 <g_return_if_fail_warning@plt>
   16db8:	mov	r0, r6
   16dbc:	pop	{r4, r5, r6, pc}
   16dc0:	andeq	sp, r1, ip, lsl #12
   16dc4:	andeq	sp, r1, r4, ror #10
   16dc8:	andeq	r9, r1, ip, ror #14
   16dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd0:	mov	r7, r1
   16dd4:	ldr	r8, [pc, #1156]	; 17260 <g_strcmp0@plt+0x3898>
   16dd8:	sub	sp, sp, #60	; 0x3c
   16ddc:	mov	r3, #0
   16de0:	ldr	r1, [r8]
   16de4:	subs	r6, r0, #0
   16de8:	str	r1, [sp, #52]	; 0x34
   16dec:	str	r3, [sp, #24]
   16df0:	beq	16e54 <g_strcmp0@plt+0x348c>
   16df4:	mov	r4, r2
   16df8:	bl	1335c <gtk_text_buffer_get_type@plt>
   16dfc:	ldr	r3, [r6]
   16e00:	cmp	r3, #0
   16e04:	beq	16e14 <g_strcmp0@plt+0x344c>
   16e08:	ldr	r3, [r3]
   16e0c:	cmp	r3, r0
   16e10:	beq	16e28 <g_strcmp0@plt+0x3460>
   16e14:	mov	r1, r0
   16e18:	mov	r0, r6
   16e1c:	bl	136d4 <g_type_check_instance_is_a@plt>
   16e20:	cmp	r0, #0
   16e24:	beq	16e54 <g_strcmp0@plt+0x348c>
   16e28:	cmp	r4, #0
   16e2c:	beq	17204 <g_strcmp0@plt+0x383c>
   16e30:	ldrb	r3, [r4]
   16e34:	cmp	r3, #0
   16e38:	bne	16e68 <g_strcmp0@plt+0x34a0>
   16e3c:	ldr	r2, [sp, #52]	; 0x34
   16e40:	ldr	r3, [r8]
   16e44:	cmp	r2, r3
   16e48:	bne	1725c <g_strcmp0@plt+0x3894>
   16e4c:	add	sp, sp, #60	; 0x3c
   16e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e54:	ldr	r2, [pc, #1032]	; 17264 <g_strcmp0@plt+0x389c>
   16e58:	ldr	r1, [pc, #1032]	; 17268 <g_strcmp0@plt+0x38a0>
   16e5c:	ldr	r0, [pc, #1032]	; 1726c <g_strcmp0@plt+0x38a4>
   16e60:	bl	13128 <g_return_if_fail_warning@plt>
   16e64:	b	16e3c <g_strcmp0@plt+0x3474>
   16e68:	mov	r5, #0
   16e6c:	add	r2, sp, #24
   16e70:	add	r3, sp, #28
   16e74:	str	r2, [sp, #8]
   16e78:	str	r3, [sp]
   16e7c:	mov	r0, r4
   16e80:	str	r5, [sp, #4]
   16e84:	mov	r2, r5
   16e88:	add	r3, sp, #20
   16e8c:	mvn	r1, #0
   16e90:	bl	138d8 <pango_parse_markup@plt>
   16e94:	cmp	r0, r5
   16e98:	beq	17218 <g_strcmp0@plt+0x3850>
   16e9c:	ldr	r3, [sp, #20]
   16ea0:	cmp	r3, #0
   16ea4:	beq	1723c <g_strcmp0@plt+0x3874>
   16ea8:	mov	r3, r5
   16eac:	mov	r1, r5
   16eb0:	mov	r2, r7
   16eb4:	mov	r0, r6
   16eb8:	bl	136b0 <gtk_text_buffer_create_mark@plt>
   16ebc:	ldr	fp, [pc, #940]	; 17270 <g_strcmp0@plt+0x38a8>
   16ec0:	ldr	sl, [pc, #940]	; 17274 <g_strcmp0@plt+0x38ac>
   16ec4:	mov	r9, r0
   16ec8:	ldr	r0, [sp, #20]
   16ecc:	bl	1398c <pango_attr_list_get_iterator@plt>
   16ed0:	mov	r4, r0
   16ed4:	add	r2, sp, #36	; 0x24
   16ed8:	add	r1, sp, #32
   16edc:	mov	r0, r4
   16ee0:	bl	13590 <pango_attr_iterator_range@plt>
   16ee4:	ldr	r3, [sp, #36]	; 0x24
   16ee8:	mov	r0, #0
   16eec:	cmn	r3, #-2147483647	; 0x80000001
   16ef0:	ldreq	r3, [sp, #32]
   16ef4:	subeq	r3, r3, #1
   16ef8:	streq	r3, [sp, #36]	; 0x24
   16efc:	bl	13554 <gtk_text_tag_new@plt>
   16f00:	mov	r1, #1
   16f04:	mov	r5, r0
   16f08:	mov	r0, r4
   16f0c:	bl	1377c <pango_attr_iterator_get@plt>
   16f10:	cmp	r0, #0
   16f14:	beq	16f2c <g_strcmp0@plt+0x3564>
   16f18:	ldr	r2, [r0, #12]
   16f1c:	mov	r3, #0
   16f20:	mov	r1, fp
   16f24:	mov	r0, r5
   16f28:	bl	1362c <g_object_set@plt>
   16f2c:	mov	r1, #2
   16f30:	mov	r0, r4
   16f34:	bl	1377c <pango_attr_iterator_get@plt>
   16f38:	cmp	r0, #0
   16f3c:	beq	16f54 <g_strcmp0@plt+0x358c>
   16f40:	ldr	r2, [r0, #12]
   16f44:	mov	r3, #0
   16f48:	mov	r1, sl
   16f4c:	mov	r0, r5
   16f50:	bl	1362c <g_object_set@plt>
   16f54:	mov	r1, #3
   16f58:	mov	r0, r4
   16f5c:	bl	1377c <pango_attr_iterator_get@plt>
   16f60:	cmp	r0, #0
   16f64:	beq	16f7c <g_strcmp0@plt+0x35b4>
   16f68:	ldr	r2, [r0, #12]
   16f6c:	mov	r3, #0
   16f70:	ldr	r1, [pc, #768]	; 17278 <g_strcmp0@plt+0x38b0>
   16f74:	mov	r0, r5
   16f78:	bl	1362c <g_object_set@plt>
   16f7c:	mov	r1, #4
   16f80:	mov	r0, r4
   16f84:	bl	1377c <pango_attr_iterator_get@plt>
   16f88:	cmp	r0, #0
   16f8c:	beq	16fa4 <g_strcmp0@plt+0x35dc>
   16f90:	ldr	r2, [r0, #12]
   16f94:	mov	r3, #0
   16f98:	ldr	r1, [pc, #732]	; 1727c <g_strcmp0@plt+0x38b4>
   16f9c:	mov	r0, r5
   16fa0:	bl	1362c <g_object_set@plt>
   16fa4:	mov	r1, #5
   16fa8:	mov	r0, r4
   16fac:	bl	1377c <pango_attr_iterator_get@plt>
   16fb0:	cmp	r0, #0
   16fb4:	beq	16fcc <g_strcmp0@plt+0x3604>
   16fb8:	ldr	r2, [r0, #12]
   16fbc:	mov	r3, #0
   16fc0:	ldr	r1, [pc, #696]	; 17280 <g_strcmp0@plt+0x38b8>
   16fc4:	mov	r0, r5
   16fc8:	bl	1362c <g_object_set@plt>
   16fcc:	mov	r1, #6
   16fd0:	mov	r0, r4
   16fd4:	bl	1377c <pango_attr_iterator_get@plt>
   16fd8:	cmp	r0, #0
   16fdc:	beq	16ff4 <g_strcmp0@plt+0x362c>
   16fe0:	ldr	r2, [r0, #12]
   16fe4:	mov	r3, #0
   16fe8:	ldr	r1, [pc, #660]	; 17284 <g_strcmp0@plt+0x38bc>
   16fec:	mov	r0, r5
   16ff0:	bl	1362c <g_object_set@plt>
   16ff4:	mov	r1, #7
   16ff8:	mov	r0, r4
   16ffc:	bl	1377c <pango_attr_iterator_get@plt>
   17000:	cmp	r0, #0
   17004:	beq	1701c <g_strcmp0@plt+0x3654>
   17008:	ldr	r2, [r0, #12]
   1700c:	mov	r3, #0
   17010:	ldr	r1, [pc, #624]	; 17288 <g_strcmp0@plt+0x38c0>
   17014:	mov	r0, r5
   17018:	bl	1362c <g_object_set@plt>
   1701c:	mov	r1, #8
   17020:	mov	r0, r4
   17024:	bl	1377c <pango_attr_iterator_get@plt>
   17028:	cmp	r0, #0
   1702c:	beq	17044 <g_strcmp0@plt+0x367c>
   17030:	ldr	r2, [r0, #12]
   17034:	mov	r3, #0
   17038:	ldr	r1, [pc, #588]	; 1728c <g_strcmp0@plt+0x38c4>
   1703c:	mov	r0, r5
   17040:	bl	1362c <g_object_set@plt>
   17044:	mov	r1, #9
   17048:	mov	r0, r4
   1704c:	bl	1377c <pango_attr_iterator_get@plt>
   17050:	cmp	r0, #0
   17054:	beq	17084 <g_strcmp0@plt+0x36bc>
   17058:	ldr	r1, [r0, #12]
   1705c:	ldrh	lr, [r0, #16]
   17060:	mov	ip, #0
   17064:	str	r1, [sp, #44]	; 0x2c
   17068:	mov	r3, ip
   1706c:	add	r2, sp, #40	; 0x28
   17070:	ldr	r1, [pc, #536]	; 17290 <g_strcmp0@plt+0x38c8>
   17074:	mov	r0, r5
   17078:	strh	lr, [sp, #48]	; 0x30
   1707c:	str	ip, [sp, #40]	; 0x28
   17080:	bl	1362c <g_object_set@plt>
   17084:	mov	r1, #10
   17088:	mov	r0, r4
   1708c:	bl	1377c <pango_attr_iterator_get@plt>
   17090:	cmp	r0, #0
   17094:	beq	170c4 <g_strcmp0@plt+0x36fc>
   17098:	ldr	r1, [r0, #12]
   1709c:	ldrh	lr, [r0, #16]
   170a0:	mov	ip, #0
   170a4:	str	r1, [sp, #44]	; 0x2c
   170a8:	mov	r3, ip
   170ac:	add	r2, sp, #40	; 0x28
   170b0:	ldr	r1, [pc, #476]	; 17294 <g_strcmp0@plt+0x38cc>
   170b4:	mov	r0, r5
   170b8:	strh	lr, [sp, #48]	; 0x30
   170bc:	str	ip, [sp, #40]	; 0x28
   170c0:	bl	1362c <g_object_set@plt>
   170c4:	mov	r1, #11
   170c8:	mov	r0, r4
   170cc:	bl	1377c <pango_attr_iterator_get@plt>
   170d0:	cmp	r0, #0
   170d4:	beq	170ec <g_strcmp0@plt+0x3724>
   170d8:	ldr	r2, [r0, #12]
   170dc:	mov	r3, #0
   170e0:	ldr	r1, [pc, #432]	; 17298 <g_strcmp0@plt+0x38d0>
   170e4:	mov	r0, r5
   170e8:	bl	1362c <g_object_set@plt>
   170ec:	mov	r1, #12
   170f0:	mov	r0, r4
   170f4:	bl	1377c <pango_attr_iterator_get@plt>
   170f8:	cmp	r0, #0
   170fc:	beq	1711c <g_strcmp0@plt+0x3754>
   17100:	ldr	r2, [r0, #12]
   17104:	mov	r3, #0
   17108:	subs	r2, r2, r3
   1710c:	movne	r2, #1
   17110:	ldr	r1, [pc, #388]	; 1729c <g_strcmp0@plt+0x38d4>
   17114:	mov	r0, r5
   17118:	bl	1362c <g_object_set@plt>
   1711c:	mov	r1, #13
   17120:	mov	r0, r4
   17124:	bl	1377c <pango_attr_iterator_get@plt>
   17128:	cmp	r0, #0
   1712c:	beq	17144 <g_strcmp0@plt+0x377c>
   17130:	ldr	r2, [r0, #12]
   17134:	mov	r3, #0
   17138:	ldr	r1, [pc, #352]	; 172a0 <g_strcmp0@plt+0x38d8>
   1713c:	mov	r0, r5
   17140:	bl	1362c <g_object_set@plt>
   17144:	mov	r1, #15
   17148:	mov	r0, r4
   1714c:	bl	1377c <pango_attr_iterator_get@plt>
   17150:	cmp	r0, #0
   17154:	beq	17170 <g_strcmp0@plt+0x37a8>
   17158:	mov	r1, #0
   1715c:	ldrd	r2, [r0, #16]
   17160:	str	r1, [sp]
   17164:	mov	r0, r5
   17168:	ldr	r1, [pc, #308]	; 172a4 <g_strcmp0@plt+0x38dc>
   1716c:	bl	1362c <g_object_set@plt>
   17170:	mov	r0, r6
   17174:	bl	137c4 <gtk_text_buffer_get_tag_table@plt>
   17178:	mov	r1, r5
   1717c:	bl	13548 <gtk_text_tag_table_add@plt>
   17180:	mov	r0, r6
   17184:	bl	137c4 <gtk_text_buffer_get_tag_table@plt>
   17188:	ldr	r1, [pc, #280]	; 172a8 <g_strcmp0@plt+0x38e0>
   1718c:	bl	13524 <gtk_text_tag_table_lookup@plt>
   17190:	ldrd	r2, [sp, #32]
   17194:	ldr	ip, [sp, #28]
   17198:	mov	r1, #0
   1719c:	sub	r3, r3, r2
   171a0:	str	r1, [sp, #8]
   171a4:	add	r2, ip, r2
   171a8:	mov	r1, r7
   171ac:	str	r5, [sp]
   171b0:	str	r0, [sp, #4]
   171b4:	mov	r0, r6
   171b8:	bl	13734 <gtk_text_buffer_insert_with_tags@plt>
   171bc:	mov	r2, r9
   171c0:	mov	r1, r7
   171c4:	mov	r0, r6
   171c8:	bl	133e0 <gtk_text_buffer_get_iter_at_mark@plt>
   171cc:	mov	r0, r4
   171d0:	bl	13788 <pango_attr_iterator_next@plt>
   171d4:	cmp	r0, #0
   171d8:	bne	16ed4 <g_strcmp0@plt+0x350c>
   171dc:	mov	r1, r9
   171e0:	mov	r0, r6
   171e4:	bl	13200 <gtk_text_buffer_delete_mark@plt>
   171e8:	mov	r0, r4
   171ec:	bl	137d0 <pango_attr_iterator_destroy@plt>
   171f0:	ldr	r0, [sp, #20]
   171f4:	bl	13380 <pango_attr_list_unref@plt>
   171f8:	ldr	r0, [sp, #28]
   171fc:	bl	135fc <g_free@plt>
   17200:	b	16e3c <g_strcmp0@plt+0x3474>
   17204:	ldr	r2, [pc, #160]	; 172ac <g_strcmp0@plt+0x38e4>
   17208:	ldr	r1, [pc, #88]	; 17268 <g_strcmp0@plt+0x38a0>
   1720c:	ldr	r0, [pc, #88]	; 1726c <g_strcmp0@plt+0x38a4>
   17210:	bl	13128 <g_return_if_fail_warning@plt>
   17214:	b	16e3c <g_strcmp0@plt+0x3474>
   17218:	ldr	r3, [sp, #24]
   1721c:	ldr	r2, [pc, #140]	; 172b0 <g_strcmp0@plt+0x38e8>
   17220:	mov	r1, #16
   17224:	ldr	r3, [r3, #8]
   17228:	ldr	r0, [pc, #60]	; 1726c <g_strcmp0@plt+0x38a4>
   1722c:	bl	13278 <g_log@plt>
   17230:	ldr	r0, [sp, #24]
   17234:	bl	13194 <g_error_free@plt>
   17238:	b	16e3c <g_strcmp0@plt+0x3474>
   1723c:	mov	r0, r6
   17240:	mov	r1, r7
   17244:	mvn	r3, #0
   17248:	ldr	r2, [sp, #28]
   1724c:	bl	132c0 <gtk_text_buffer_insert@plt>
   17250:	ldr	r0, [sp, #28]
   17254:	bl	135fc <g_free@plt>
   17258:	b	16e3c <g_strcmp0@plt+0x3474>
   1725c:	bl	135c0 <__stack_chk_fail@plt>
   17260:	andeq	sp, r2, r8, asr #28
   17264:	andeq	sp, r1, ip, lsl r6
   17268:	andeq	sp, r1, ip, ror r5
   1726c:	andeq	r9, r1, ip, ror #14
   17270:	andeq	sp, r1, r4, ror #12
   17274:	andeq	sp, r1, r0, ror r6
   17278:	andeq	sp, r1, r8, ror r6
   1727c:	andeq	sp, r1, r0, lsl #13
   17280:	andeq	sp, r1, r8, lsl #13
   17284:	muleq	r1, r0, r6
   17288:	muleq	r1, r8, r6
   1728c:	andeq	sp, r1, r0, lsr #13
   17290:	andeq	sp, r1, ip, lsr #13
   17294:			; <UNDEFINED> instruction: 0x0001d6bc
   17298:	andeq	sp, r1, ip, asr #13
   1729c:	ldrdeq	sp, [r1], -r8
   172a0:	andeq	sp, r1, r8, ror #13
   172a4:	strdeq	sp, [r1], -r0
   172a8:	strdeq	sp, [r1], -r8
   172ac:	andeq	sp, r1, r8, lsr r6
   172b0:	andeq	sp, r1, r8, asr #12
   172b4:	cmp	r1, #0
   172b8:	clz	r3, r2
   172bc:	lsr	r3, r3, #5
   172c0:	push	{r4, r5, r6, r7, lr}
   172c4:	movne	r4, r3
   172c8:	moveq	r4, #1
   172cc:	cmp	r4, #0
   172d0:	sub	sp, sp, #12
   172d4:	beq	172f0 <g_strcmp0@plt+0x3928>
   172d8:	ldr	r3, [pc, #88]	; 17338 <g_strcmp0@plt+0x3970>
   172dc:	ldr	r0, [r3]
   172e0:	clz	r0, r0
   172e4:	lsr	r0, r0, #5
   172e8:	add	sp, sp, #12
   172ec:	pop	{r4, r5, r6, r7, pc}
   172f0:	mov	r3, r1
   172f4:	mov	r6, r2
   172f8:	mov	r5, r1
   172fc:	mov	r7, r0
   17300:	str	r2, [sp]
   17304:	mov	r1, #128	; 0x80
   17308:	ldr	r2, [pc, #44]	; 1733c <g_strcmp0@plt+0x3974>
   1730c:	ldr	r0, [pc, #44]	; 17340 <g_strcmp0@plt+0x3978>
   17310:	bl	13278 <g_log@plt>
   17314:	mov	r0, r7
   17318:	mov	r2, r6
   1731c:	mov	r1, r5
   17320:	bl	134b8 <gtk_window_set_default_size@plt>
   17324:	ldr	r3, [pc, #12]	; 17338 <g_strcmp0@plt+0x3970>
   17328:	mov	r0, #1
   1732c:	str	r4, [r3]
   17330:	add	sp, sp, #12
   17334:	pop	{r4, r5, r6, r7, pc}
   17338:	andeq	lr, r2, r4, asr #6
   1733c:	andeq	sp, r1, r0, lsl #14
   17340:	andeq	r9, r1, ip, ror #14
   17344:	push	{r4, r5, r6, lr}
   17348:	subs	r4, r1, #0
   1734c:	bne	17368 <g_strcmp0@plt+0x39a0>
   17350:	ldr	r2, [pc, #92]	; 173b4 <g_strcmp0@plt+0x39ec>
   17354:	ldr	r1, [pc, #92]	; 173b8 <g_strcmp0@plt+0x39f0>
   17358:	ldr	r0, [pc, #92]	; 173bc <g_strcmp0@plt+0x39f4>
   1735c:	bl	13128 <g_return_if_fail_warning@plt>
   17360:	mov	r0, r4
   17364:	pop	{r4, r5, r6, pc}
   17368:	mov	r5, r0
   1736c:	bl	134a0 <gdk_display_get_default@plt>
   17370:	mov	r1, r4
   17374:	bl	135cc <gdk_x11_window_foreign_new_for_display@plt>
   17378:	mov	r6, r0
   1737c:	bl	131d0 <gtk_widget_get_type@plt>
   17380:	mov	r1, r0
   17384:	mov	r0, r5
   17388:	bl	1320c <g_type_check_instance_cast@plt>
   1738c:	bl	13248 <gtk_widget_get_window@plt>
   17390:	mov	r1, #1
   17394:	mov	r4, r0
   17398:	mov	r0, r5
   1739c:	bl	13878 <gtk_window_set_modal@plt>
   173a0:	mov	r0, r4
   173a4:	mov	r1, r6
   173a8:	bl	1353c <gdk_window_set_transient_for@plt>
   173ac:	mov	r0, #1
   173b0:	pop	{r4, r5, r6, pc}
   173b4:	andeq	sp, r1, ip, lsl r7
   173b8:	muleq	r1, ip, r5
   173bc:	andeq	r9, r1, ip, ror #14
   173c0:	push	{r4, r5, r6, r7, r8, lr}
   173c4:	sub	sp, sp, #40	; 0x28
   173c8:	ldr	r6, [pc, #520]	; 175d8 <g_strcmp0@plt+0x3c10>
   173cc:	subs	r4, r1, #0
   173d0:	ldr	r3, [r6]
   173d4:	str	r3, [sp, #36]	; 0x24
   173d8:	beq	1756c <g_strcmp0@plt+0x3ba4>
   173dc:	cmp	r0, #0
   173e0:	mov	r7, r2
   173e4:	beq	17580 <g_strcmp0@plt+0x3bb8>
   173e8:	mov	r2, sp
   173ec:	mov	r1, #8
   173f0:	bl	13704 <gtk_style_context_get_color@plt>
   173f4:	vldr	d4, [pc, #468]	; 175d0 <g_strcmp0@plt+0x3c08>
   173f8:	vldr	d5, [sp, #16]
   173fc:	vldr	d6, [sp, #8]
   17400:	vldr	d7, [sp]
   17404:	ldr	r0, [pc, #464]	; 175dc <g_strcmp0@plt+0x3c14>
   17408:	vmul.f64	d5, d5, d4
   1740c:	vmul.f64	d6, d6, d4
   17410:	vmul.f64	d7, d7, d4
   17414:	vcvt.u32.f64	s11, d5
   17418:	vcvt.u32.f64	s13, d6
   1741c:	vcvt.u32.f64	s15, d7
   17420:	vmov	r3, s11
   17424:	vmov	r2, s13
   17428:	vmov	r1, s15
   1742c:	bl	13404 <g_strdup_printf@plt>
   17430:	mov	r8, r0
   17434:	mov	r0, r4
   17438:	bl	131f4 <pk_package_id_split@plt>
   1743c:	subs	r5, r0, #0
   17440:	beq	175ac <g_strcmp0@plt+0x3be4>
   17444:	cmp	r7, #0
   17448:	beq	17458 <g_strcmp0@plt+0x3a90>
   1744c:	ldrb	r3, [r7]
   17450:	cmp	r3, #0
   17454:	bne	174d8 <g_strcmp0@plt+0x3b10>
   17458:	ldr	r0, [r5]
   1745c:	bl	131dc <g_string_new@plt>
   17460:	ldr	r2, [r5, #4]
   17464:	ldrb	r3, [r2]
   17468:	cmp	r3, #0
   1746c:	mov	r4, r0
   17470:	bne	17590 <g_strcmp0@plt+0x3bc8>
   17474:	ldr	r0, [r5, #8]
   17478:	bl	16c78 <g_strcmp0@plt+0x32b0>
   1747c:	subs	r2, r0, #0
   17480:	beq	17490 <g_strcmp0@plt+0x3ac8>
   17484:	ldr	r1, [pc, #340]	; 175e0 <g_strcmp0@plt+0x3c18>
   17488:	mov	r0, r4
   1748c:	bl	13950 <g_string_append_printf@plt>
   17490:	mov	r0, r4
   17494:	mov	r1, #0
   17498:	bl	13758 <g_string_free@plt>
   1749c:	mov	r7, #0
   174a0:	mov	r4, r0
   174a4:	mov	r0, r7
   174a8:	bl	135fc <g_free@plt>
   174ac:	mov	r0, r8
   174b0:	bl	135fc <g_free@plt>
   174b4:	mov	r0, r5
   174b8:	bl	13578 <g_strfreev@plt>
   174bc:	ldr	r2, [sp, #36]	; 0x24
   174c0:	ldr	r3, [r6]
   174c4:	mov	r0, r4
   174c8:	cmp	r2, r3
   174cc:	bne	175cc <g_strcmp0@plt+0x3c04>
   174d0:	add	sp, sp, #40	; 0x28
   174d4:	pop	{r4, r5, r6, r7, r8, pc}
   174d8:	ldr	r0, [pc, #260]	; 175e4 <g_strcmp0@plt+0x3c1c>
   174dc:	bl	131dc <g_string_new@plt>
   174e0:	mvn	r1, #0
   174e4:	mov	r4, r0
   174e8:	mov	r0, r7
   174ec:	bl	1389c <g_markup_escape_text@plt>
   174f0:	ldr	r1, [pc, #240]	; 175e8 <g_strcmp0@plt+0x3c20>
   174f4:	mov	r2, r0
   174f8:	mov	r7, r0
   174fc:	mov	r0, r4
   17500:	bl	13950 <g_string_append_printf@plt>
   17504:	mov	r2, r8
   17508:	mov	r0, r4
   1750c:	ldr	r1, [pc, #216]	; 175ec <g_strcmp0@plt+0x3c24>
   17510:	bl	13950 <g_string_append_printf@plt>
   17514:	mov	r0, r4
   17518:	ldr	r1, [r5]
   1751c:	bl	13914 <g_string_append@plt>
   17520:	ldr	r2, [r5, #4]
   17524:	ldrb	r3, [r2]
   17528:	cmp	r3, #0
   1752c:	bne	1759c <g_strcmp0@plt+0x3bd4>
   17530:	ldr	r0, [r5, #8]
   17534:	bl	16c78 <g_strcmp0@plt+0x32b0>
   17538:	subs	r2, r0, #0
   1753c:	beq	1754c <g_strcmp0@plt+0x3b84>
   17540:	ldr	r1, [pc, #152]	; 175e0 <g_strcmp0@plt+0x3c18>
   17544:	mov	r0, r4
   17548:	bl	13950 <g_string_append_printf@plt>
   1754c:	ldr	r1, [pc, #156]	; 175f0 <g_strcmp0@plt+0x3c28>
   17550:	mov	r0, r4
   17554:	bl	13914 <g_string_append@plt>
   17558:	mov	r0, r4
   1755c:	mov	r1, #0
   17560:	bl	13758 <g_string_free@plt>
   17564:	mov	r4, r0
   17568:	b	174a4 <g_strcmp0@plt+0x3adc>
   1756c:	ldr	r2, [pc, #128]	; 175f4 <g_strcmp0@plt+0x3c2c>
   17570:	ldr	r1, [pc, #128]	; 175f8 <g_strcmp0@plt+0x3c30>
   17574:	ldr	r0, [pc, #128]	; 175fc <g_strcmp0@plt+0x3c34>
   17578:	bl	13128 <g_return_if_fail_warning@plt>
   1757c:	b	174bc <g_strcmp0@plt+0x3af4>
   17580:	ldr	r0, [pc, #120]	; 17600 <g_strcmp0@plt+0x3c38>
   17584:	bl	13398 <g_strdup@plt>
   17588:	mov	r8, r0
   1758c:	b	17434 <g_strcmp0@plt+0x3a6c>
   17590:	ldr	r1, [pc, #108]	; 17604 <g_strcmp0@plt+0x3c3c>
   17594:	bl	13950 <g_string_append_printf@plt>
   17598:	b	17474 <g_strcmp0@plt+0x3aac>
   1759c:	ldr	r1, [pc, #96]	; 17604 <g_strcmp0@plt+0x3c3c>
   175a0:	mov	r0, r4
   175a4:	bl	13950 <g_string_append_printf@plt>
   175a8:	b	17530 <g_strcmp0@plt+0x3b68>
   175ac:	mov	r3, r4
   175b0:	ldr	r2, [pc, #80]	; 17608 <g_strcmp0@plt+0x3c40>
   175b4:	mov	r1, #16
   175b8:	ldr	r0, [pc, #60]	; 175fc <g_strcmp0@plt+0x3c34>
   175bc:	bl	13278 <g_log@plt>
   175c0:	mov	r4, r5
   175c4:	mov	r7, r5
   175c8:	b	174a4 <g_strcmp0@plt+0x3adc>
   175cc:	bl	135c0 <__stack_chk_fail@plt>
   175d0:	andeq	r0, r0, r0
   175d4:	rsbmi	lr, pc, r0
   175d8:	andeq	sp, r2, r8, asr #28
   175dc:	andeq	sp, r1, ip, lsr r7
   175e0:	andeq	sp, r1, ip, ror #14
   175e4:	andeq	r9, r1, ip, lsl #16
   175e8:	andeq	sp, r1, r8, lsr #23
   175ec:	andeq	sp, r1, r4, ror r7
   175f0:	andeq	sp, r1, r8, lsl #15
   175f4:	andeq	sp, r1, r8, lsr #14
   175f8:			; <UNDEFINED> instruction: 0x0001d5b8
   175fc:	andeq	r9, r1, ip, ror #14
   17600:	andeq	sp, r1, ip, asr #14
   17604:	andeq	sp, r1, r8, ror #14
   17608:	andeq	sp, r1, r4, asr r7
   1760c:	push	{r4, r5, r6, lr}
   17610:	subs	r4, r0, #0
   17614:	beq	17684 <g_strcmp0@plt+0x3cbc>
   17618:	mov	r5, r1
   1761c:	bl	131f4 <pk_package_id_split@plt>
   17620:	cmp	r5, #0
   17624:	mov	r6, r0
   17628:	beq	17638 <g_strcmp0@plt+0x3c70>
   1762c:	ldrb	r3, [r5]
   17630:	cmp	r3, #0
   17634:	bne	17654 <g_strcmp0@plt+0x3c8c>
   17638:	ldr	r0, [r6]
   1763c:	bl	13398 <g_strdup@plt>
   17640:	mov	r4, r0
   17644:	mov	r0, r6
   17648:	bl	13578 <g_strfreev@plt>
   1764c:	mov	r0, r4
   17650:	pop	{r4, r5, r6, pc}
   17654:	mov	r0, r5
   17658:	mvn	r1, #0
   1765c:	bl	1389c <g_markup_escape_text@plt>
   17660:	ldr	r2, [r6]
   17664:	mov	r5, r0
   17668:	mov	r1, r0
   1766c:	ldr	r0, [pc, #40]	; 1769c <g_strcmp0@plt+0x3cd4>
   17670:	bl	13404 <g_strdup_printf@plt>
   17674:	mov	r4, r0
   17678:	mov	r0, r5
   1767c:	bl	135fc <g_free@plt>
   17680:	b	17644 <g_strcmp0@plt+0x3c7c>
   17684:	ldr	r2, [pc, #20]	; 176a0 <g_strcmp0@plt+0x3cd8>
   17688:	ldr	r1, [pc, #20]	; 176a4 <g_strcmp0@plt+0x3cdc>
   1768c:	ldr	r0, [pc, #20]	; 176a8 <g_strcmp0@plt+0x3ce0>
   17690:	bl	13128 <g_return_if_fail_warning@plt>
   17694:	mov	r0, r4
   17698:	pop	{r4, r5, r6, pc}
   1769c:	muleq	r1, r0, r7
   176a0:	andeq	sp, r1, r8, lsr #14
   176a4:	ldrdeq	sp, [r1], -r8
   176a8:	andeq	r9, r1, ip, ror #14
   176ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   176b0:	sub	sp, sp, #12
   176b4:	mov	r4, r1
   176b8:	mov	r5, r0
   176bc:	bl	136ec <getuid@plt>
   176c0:	adds	r0, r0, #0
   176c4:	movne	r0, #1
   176c8:	cmp	r4, #0
   176cc:	moveq	r0, #1
   176d0:	cmp	r0, #0
   176d4:	movne	r4, #0
   176d8:	movne	r5, r4
   176dc:	movne	r6, #1
   176e0:	beq	17700 <g_strcmp0@plt+0x3d38>
   176e4:	mov	r0, r4
   176e8:	bl	135fc <g_free@plt>
   176ec:	mov	r0, r5
   176f0:	bl	135fc <g_free@plt>
   176f4:	mov	r0, r6
   176f8:	add	sp, sp, #12
   176fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17700:	cmp	r5, #0
   17704:	beq	17830 <g_strcmp0@plt+0x3e68>
   17708:	mov	r2, #5
   1770c:	ldr	r1, [pc, #312]	; 1784c <g_strcmp0@plt+0x3e84>
   17710:	bl	13608 <dcgettext@plt>
   17714:	mov	r1, r5
   17718:	bl	13404 <g_strdup_printf@plt>
   1771c:	mov	r4, r0
   17720:	mov	r2, #5
   17724:	ldr	r1, [pc, #292]	; 17850 <g_strcmp0@plt+0x3e88>
   17728:	mov	r0, #0
   1772c:	bl	13608 <dcgettext@plt>
   17730:	mov	r2, #5
   17734:	ldr	r1, [pc, #280]	; 17854 <g_strcmp0@plt+0x3e8c>
   17738:	ldr	r8, [pc, #280]	; 17858 <g_strcmp0@plt+0x3e90>
   1773c:	mov	r5, r0
   17740:	mov	r0, #0
   17744:	bl	13608 <dcgettext@plt>
   17748:	mov	r1, r5
   1774c:	mov	r3, #0
   17750:	mov	r2, r0
   17754:	ldr	r0, [pc, #256]	; 1785c <g_strcmp0@plt+0x3e94>
   17758:	bl	134c4 <g_strjoin@plt>
   1775c:	mov	r2, #1
   17760:	mov	r3, #3
   17764:	mov	r1, r2
   17768:	str	r4, [sp, #4]
   1776c:	str	r8, [sp]
   17770:	mov	r5, r0
   17774:	mov	r0, #0
   17778:	bl	138f0 <gtk_message_dialog_new@plt>
   1777c:	mov	r6, r0
   17780:	bl	13680 <gtk_dialog_get_type@plt>
   17784:	mov	r7, r0
   17788:	mov	r1, r0
   1778c:	mov	r0, r6
   17790:	bl	1320c <g_type_check_instance_cast@plt>
   17794:	mov	r2, #5
   17798:	ldr	r1, [pc, #192]	; 17860 <g_strcmp0@plt+0x3e98>
   1779c:	mov	r9, r0
   177a0:	mov	r0, #0
   177a4:	bl	13608 <dcgettext@plt>
   177a8:	mvn	r2, #4
   177ac:	mov	r1, r0
   177b0:	mov	r0, r9
   177b4:	bl	13158 <gtk_dialog_add_button@plt>
   177b8:	bl	13644 <gtk_message_dialog_get_type@plt>
   177bc:	mov	r1, r0
   177c0:	mov	r0, r6
   177c4:	bl	1320c <g_type_check_instance_cast@plt>
   177c8:	mov	r2, r5
   177cc:	mov	r1, r8
   177d0:	bl	1311c <gtk_message_dialog_format_secondary_text@plt>
   177d4:	bl	13998 <gtk_window_get_type@plt>
   177d8:	mov	r1, r0
   177dc:	mov	r0, r6
   177e0:	bl	1320c <g_type_check_instance_cast@plt>
   177e4:	ldr	r1, [pc, #120]	; 17864 <g_strcmp0@plt+0x3e9c>
   177e8:	bl	132fc <gtk_window_set_icon_name@plt>
   177ec:	mov	r1, r7
   177f0:	mov	r0, r6
   177f4:	bl	1320c <g_type_check_instance_cast@plt>
   177f8:	bl	13764 <gtk_dialog_run@plt>
   177fc:	mov	r7, r0
   17800:	mov	r0, r6
   17804:	bl	13530 <gtk_widget_destroy@plt>
   17808:	cmn	r7, #5
   1780c:	moveq	r6, #1
   17810:	beq	176e4 <g_strcmp0@plt+0x3d1c>
   17814:	mov	r3, #0
   17818:	ldr	r2, [pc, #72]	; 17868 <g_strcmp0@plt+0x3ea0>
   1781c:	mov	r1, #16
   17820:	ldr	r0, [pc, #68]	; 1786c <g_strcmp0@plt+0x3ea4>
   17824:	bl	13278 <g_log@plt>
   17828:	mov	r6, #0
   1782c:	b	176e4 <g_strcmp0@plt+0x3d1c>
   17830:	mov	r2, #5
   17834:	ldr	r1, [pc, #52]	; 17870 <g_strcmp0@plt+0x3ea8>
   17838:	mov	r0, r5
   1783c:	bl	13608 <dcgettext@plt>
   17840:	bl	13398 <g_strdup@plt>
   17844:	mov	r4, r0
   17848:	b	17720 <g_strcmp0@plt+0x3d58>
   1784c:	ldrdeq	sp, [r1], -r4
   17850:	strdeq	sp, [r1], -r8
   17854:	andeq	sp, r1, r0, lsr r8
   17858:	andeq	sp, r1, r0, lsr #22
   1785c:	andeq	r9, r1, ip, asr r7
   17860:	andeq	sp, r1, ip, lsl #17
   17864:	andeq	sp, r1, r0, lsr #17
   17868:			; <UNDEFINED> instruction: 0x0001d8b8
   1786c:	andeq	r9, r1, ip, ror #14
   17870:	andeq	sp, r1, r0, lsr #15
   17874:	push	{r4, r5, r6, r7, r8, lr}
   17878:	mov	r4, r0
   1787c:	mov	r0, r1
   17880:	mov	r5, r1
   17884:	mov	r7, r2
   17888:	bl	16bb0 <g_strcmp0@plt+0x31e8>
   1788c:	ldr	r1, [pc, #124]	; 17910 <g_strcmp0@plt+0x3f48>
   17890:	mov	r6, r0
   17894:	bl	134d0 <g_str_has_prefix@plt>
   17898:	cmp	r0, #0
   1789c:	bne	178e0 <g_strcmp0@plt+0x3f18>
   178a0:	ldr	r1, [pc, #108]	; 17914 <g_strcmp0@plt+0x3f4c>
   178a4:	mov	r0, r6
   178a8:	bl	134d0 <g_str_has_prefix@plt>
   178ac:	cmp	r0, #0
   178b0:	movne	r1, #50	; 0x32
   178b4:	beq	178fc <g_strcmp0@plt+0x3f34>
   178b8:	mov	r0, r4
   178bc:	bl	14350 <g_strcmp0@plt+0x988>
   178c0:	mov	r2, r6
   178c4:	mov	r1, r7
   178c8:	mov	r0, r4
   178cc:	bl	14668 <g_strcmp0@plt+0xca0>
   178d0:	cmp	r5, #18
   178d4:	beq	178e8 <g_strcmp0@plt+0x3f20>
   178d8:	mov	r0, #1
   178dc:	pop	{r4, r5, r6, r7, r8, pc}
   178e0:	mov	r1, #150	; 0x96
   178e4:	b	178b8 <g_strcmp0@plt+0x3ef0>
   178e8:	mov	r0, r4
   178ec:	mov	r1, #0
   178f0:	bl	14418 <g_strcmp0@plt+0xa50>
   178f4:	mov	r0, #1
   178f8:	pop	{r4, r5, r6, r7, r8, pc}
   178fc:	mov	r2, r6
   17900:	mov	r1, r7
   17904:	mov	r0, r4
   17908:	bl	145a8 <g_strcmp0@plt+0xbe0>
   1790c:	b	178d0 <g_strcmp0@plt+0x3f08>
   17910:	andeq	sp, r1, ip, asr #17
   17914:	andeq	r9, r1, r0, asr #21
   17918:	push	{r4, lr}
   1791c:	subs	r4, r0, #0
   17920:	sub	sp, sp, #8
   17924:	beq	179a8 <g_strcmp0@plt+0x3fe0>
   17928:	cmp	r4, #59	; 0x3b
   1792c:	bls	179c0 <g_strcmp0@plt+0x3ff8>
   17930:	vmov	s15, r4
   17934:	vldr	d4, [pc, #156]	; 179d8 <g_strcmp0@plt+0x4010>
   17938:	vldr	d5, [pc, #160]	; 179e0 <g_strcmp0@plt+0x4018>
   1793c:	vcvt.f64.u32	d6, s15
   17940:	vdiv.f64	d7, d6, d4
   17944:	vadd.f64	d7, d7, d5
   17948:	vcvt.u32.f64	s15, d7
   1794c:	vmov	r4, s15
   17950:	cmp	r4, #59	; 0x3b
   17954:	bls	17990 <g_strcmp0@plt+0x3fc8>
   17958:	ldr	r3, [pc, #136]	; 179e8 <g_strcmp0@plt+0x4020>
   1795c:	mov	r2, #5
   17960:	str	r2, [sp]
   17964:	umull	r3, r4, r3, r4
   17968:	ldr	r2, [pc, #124]	; 179ec <g_strcmp0@plt+0x4024>
   1796c:	ldr	r1, [pc, #124]	; 179f0 <g_strcmp0@plt+0x4028>
   17970:	lsr	r4, r4, #5
   17974:	mov	r3, r4
   17978:	mov	r0, #0
   1797c:	bl	13410 <dcngettext@plt>
   17980:	mov	r1, r4
   17984:	add	sp, sp, #8
   17988:	pop	{r4, lr}
   1798c:	b	13404 <g_strdup_printf@plt>
   17990:	mov	r3, #5
   17994:	str	r3, [sp]
   17998:	ldr	r2, [pc, #84]	; 179f4 <g_strcmp0@plt+0x402c>
   1799c:	vmov	r3, s15
   179a0:	ldr	r1, [pc, #80]	; 179f8 <g_strcmp0@plt+0x4030>
   179a4:	b	17978 <g_strcmp0@plt+0x3fb0>
   179a8:	mov	r2, #5
   179ac:	ldr	r1, [pc, #72]	; 179fc <g_strcmp0@plt+0x4034>
   179b0:	bl	13608 <dcgettext@plt>
   179b4:	add	sp, sp, #8
   179b8:	pop	{r4, lr}
   179bc:	b	13404 <g_strdup_printf@plt>
   179c0:	mov	r3, #5
   179c4:	str	r3, [sp]
   179c8:	ldr	r2, [pc, #48]	; 17a00 <g_strcmp0@plt+0x4038>
   179cc:	mov	r3, r4
   179d0:	ldr	r1, [pc, #44]	; 17a04 <g_strcmp0@plt+0x403c>
   179d4:	b	17978 <g_strcmp0@plt+0x3fb0>
   179d8:	andeq	r0, r0, r0
   179dc:	submi	r0, lr, r0
   179e0:	andeq	r0, r0, r0
   179e4:	svccc	0x00e00000
   179e8:	stmhi	r8, {r0, r3, r7, fp, pc}
   179ec:	andeq	sp, r1, ip, lsl #18
   179f0:	andeq	sp, r1, r8, lsl r9
   179f4:	strdeq	sp, [r1], -r4
   179f8:	andeq	sp, r1, r0, lsl #18
   179fc:	ldrdeq	sp, [r1], -r8
   17a00:	ldrdeq	sp, [r1], -ip
   17a04:	andeq	sp, r1, r8, ror #17
   17a08:	push	{r4, r5, r6, r7, r8, lr}
   17a0c:	subs	r5, r0, #0
   17a10:	sub	sp, sp, #8
   17a14:	beq	17b3c <g_strcmp0@plt+0x4174>
   17a18:	cmp	r5, #59	; 0x3b
   17a1c:	bls	17bc0 <g_strcmp0@plt+0x41f8>
   17a20:	vmov	s15, r5
   17a24:	vldr	d5, [pc, #436]	; 17be0 <g_strcmp0@plt+0x4218>
   17a28:	vldr	d6, [pc, #440]	; 17be8 <g_strcmp0@plt+0x4220>
   17a2c:	vcvt.f64.u32	d4, s15
   17a30:	vdiv.f64	d7, d4, d5
   17a34:	vadd.f64	d7, d7, d6
   17a38:	vcvt.u32.f64	s15, d7
   17a3c:	vmov	r4, s15
   17a40:	cmp	r4, #59	; 0x3b
   17a44:	bls	17a8c <g_strcmp0@plt+0x40c4>
   17a48:	ldr	r5, [pc, #416]	; 17bf0 <g_strcmp0@plt+0x4228>
   17a4c:	umull	r3, r5, r5, r4
   17a50:	lsr	r5, r5, #5
   17a54:	rsb	r3, r5, r5, lsl #4
   17a58:	subs	r4, r4, r3, lsl #2
   17a5c:	bne	17ad0 <g_strcmp0@plt+0x4108>
   17a60:	mov	r3, #5
   17a64:	ldr	r2, [pc, #392]	; 17bf4 <g_strcmp0@plt+0x422c>
   17a68:	ldr	r1, [pc, #392]	; 17bf8 <g_strcmp0@plt+0x4230>
   17a6c:	str	r3, [sp]
   17a70:	mov	r0, r4
   17a74:	mov	r3, r5
   17a78:	bl	13410 <dcngettext@plt>
   17a7c:	mov	r1, r5
   17a80:	add	sp, sp, #8
   17a84:	pop	{r4, r5, r6, r7, r8, lr}
   17a88:	b	13404 <g_strdup_printf@plt>
   17a8c:	ldr	r6, [pc, #348]	; 17bf0 <g_strcmp0@plt+0x4228>
   17a90:	umull	r3, r6, r6, r5
   17a94:	lsr	r6, r6, #5
   17a98:	rsb	r6, r6, r6, lsl #4
   17a9c:	subs	r6, r5, r6, lsl #2
   17aa0:	bne	17b54 <g_strcmp0@plt+0x418c>
   17aa4:	mov	r3, #5
   17aa8:	str	r3, [sp]
   17aac:	mov	r0, r6
   17ab0:	vmov	r3, s15
   17ab4:	ldr	r2, [pc, #320]	; 17bfc <g_strcmp0@plt+0x4234>
   17ab8:	ldr	r1, [pc, #320]	; 17c00 <g_strcmp0@plt+0x4238>
   17abc:	bl	13410 <dcngettext@plt>
   17ac0:	mov	r1, r4
   17ac4:	add	sp, sp, #8
   17ac8:	pop	{r4, r5, r6, r7, r8, lr}
   17acc:	b	13404 <g_strdup_printf@plt>
   17ad0:	mov	r2, #5
   17ad4:	ldr	r1, [pc, #296]	; 17c04 <g_strcmp0@plt+0x423c>
   17ad8:	mov	r0, #0
   17adc:	mov	r6, r2
   17ae0:	bl	13608 <dcgettext@plt>
   17ae4:	mov	r3, r5
   17ae8:	str	r6, [sp]
   17aec:	ldr	r2, [pc, #276]	; 17c08 <g_strcmp0@plt+0x4240>
   17af0:	ldr	r1, [pc, #276]	; 17c0c <g_strcmp0@plt+0x4244>
   17af4:	mov	r7, r0
   17af8:	mov	r0, #0
   17afc:	bl	13410 <dcngettext@plt>
   17b00:	mov	r3, r4
   17b04:	str	r6, [sp]
   17b08:	ldr	r2, [pc, #256]	; 17c10 <g_strcmp0@plt+0x4248>
   17b0c:	ldr	r1, [pc, #256]	; 17c14 <g_strcmp0@plt+0x424c>
   17b10:	mov	r8, r0
   17b14:	mov	r0, #0
   17b18:	bl	13410 <dcngettext@plt>
   17b1c:	mov	r2, r8
   17b20:	mov	r3, r4
   17b24:	mov	r1, r5
   17b28:	str	r0, [sp]
   17b2c:	mov	r0, r7
   17b30:	bl	13404 <g_strdup_printf@plt>
   17b34:	add	sp, sp, #8
   17b38:	pop	{r4, r5, r6, r7, r8, pc}
   17b3c:	mov	r2, #5
   17b40:	ldr	r1, [pc, #208]	; 17c18 <g_strcmp0@plt+0x4250>
   17b44:	bl	13608 <dcgettext@plt>
   17b48:	add	sp, sp, #8
   17b4c:	pop	{r4, r5, r6, r7, r8, lr}
   17b50:	b	13404 <g_strdup_printf@plt>
   17b54:	mov	r2, #5
   17b58:	ldr	r1, [pc, #164]	; 17c04 <g_strcmp0@plt+0x423c>
   17b5c:	mov	r0, #0
   17b60:	mov	r5, r2
   17b64:	bl	13608 <dcgettext@plt>
   17b68:	mov	r3, r4
   17b6c:	str	r5, [sp]
   17b70:	ldr	r2, [pc, #152]	; 17c10 <g_strcmp0@plt+0x4248>
   17b74:	ldr	r1, [pc, #152]	; 17c14 <g_strcmp0@plt+0x424c>
   17b78:	mov	r7, r0
   17b7c:	mov	r0, #0
   17b80:	bl	13410 <dcngettext@plt>
   17b84:	mov	r3, r6
   17b88:	str	r5, [sp]
   17b8c:	ldr	r2, [pc, #136]	; 17c1c <g_strcmp0@plt+0x4254>
   17b90:	ldr	r1, [pc, #136]	; 17c20 <g_strcmp0@plt+0x4258>
   17b94:	mov	r8, r0
   17b98:	mov	r0, #0
   17b9c:	bl	13410 <dcngettext@plt>
   17ba0:	mov	r2, r8
   17ba4:	mov	r3, r6
   17ba8:	mov	r1, r4
   17bac:	str	r0, [sp]
   17bb0:	mov	r0, r7
   17bb4:	bl	13404 <g_strdup_printf@plt>
   17bb8:	add	sp, sp, #8
   17bbc:	pop	{r4, r5, r6, r7, r8, pc}
   17bc0:	mov	r3, #5
   17bc4:	str	r3, [sp]
   17bc8:	ldr	r2, [pc, #84]	; 17c24 <g_strcmp0@plt+0x425c>
   17bcc:	mov	r3, r5
   17bd0:	ldr	r1, [pc, #80]	; 17c28 <g_strcmp0@plt+0x4260>
   17bd4:	mov	r0, #0
   17bd8:	b	17a78 <g_strcmp0@plt+0x40b0>
   17bdc:	nop			; (mov r0, r0)
   17be0:	andeq	r0, r0, r0
   17be4:	submi	r0, lr, r0
   17be8:	andeq	r0, r0, r0
   17bec:	svccc	0x00e00000
   17bf0:	stmhi	r8, {r0, r3, r7, fp, pc}
   17bf4:	andeq	sp, r1, ip, lsl #18
   17bf8:	andeq	sp, r1, r8, lsl r9
   17bfc:	strdeq	sp, [r1], -r4
   17c00:	andeq	sp, r1, r0, lsl #18
   17c04:	andeq	sp, r1, r0, lsr #18
   17c08:	andeq	sp, r1, ip, asr #18
   17c0c:	andeq	sp, r1, r4, asr r9
   17c10:	andeq	sp, r1, ip, lsr #18
   17c14:	andeq	sp, r1, r4, lsr r9
   17c18:	ldrdeq	sp, [r1], -r8
   17c1c:	andeq	sp, r1, ip, lsr r9
   17c20:	andeq	sp, r1, r4, asr #18
   17c24:	ldrdeq	sp, [r1], -ip
   17c28:	andeq	sp, r1, r8, ror #17
   17c2c:	push	{r4, lr}
   17c30:	sub	sp, sp, #8
   17c34:	mov	r4, r0
   17c38:	bl	13584 <g_strv_length@plt>
   17c3c:	subs	r2, r0, #0
   17c40:	ldreq	r0, [pc, #224]	; 17d28 <g_strcmp0@plt+0x4360>
   17c44:	beq	17c80 <g_strcmp0@plt+0x42b8>
   17c48:	cmp	r2, #1
   17c4c:	beq	17c7c <g_strcmp0@plt+0x42b4>
   17c50:	cmp	r2, #2
   17c54:	beq	17ce4 <g_strcmp0@plt+0x431c>
   17c58:	cmp	r2, #3
   17c5c:	beq	17d04 <g_strcmp0@plt+0x433c>
   17c60:	cmp	r2, #4
   17c64:	beq	17c8c <g_strcmp0@plt+0x42c4>
   17c68:	cmp	r2, #5
   17c6c:	movne	r0, #0
   17c70:	beq	17cb4 <g_strcmp0@plt+0x42ec>
   17c74:	add	sp, sp, #8
   17c78:	pop	{r4, pc}
   17c7c:	ldr	r0, [r4]
   17c80:	add	sp, sp, #8
   17c84:	pop	{r4, lr}
   17c88:	b	13398 <g_strdup@plt>
   17c8c:	mov	r2, #5
   17c90:	ldr	r1, [pc, #148]	; 17d2c <g_strcmp0@plt+0x4364>
   17c94:	mov	r0, #0
   17c98:	bl	13608 <dcgettext@plt>
   17c9c:	ldr	r2, [r4, #12]
   17ca0:	ldr	r3, [r4, #8]
   17ca4:	str	r2, [sp]
   17ca8:	ldm	r4, {r1, r2}
   17cac:	bl	13404 <g_strdup_printf@plt>
   17cb0:	b	17c74 <g_strcmp0@plt+0x42ac>
   17cb4:	ldr	r1, [pc, #116]	; 17d30 <g_strcmp0@plt+0x4368>
   17cb8:	mov	r0, #0
   17cbc:	bl	13608 <dcgettext@plt>
   17cc0:	ldr	r2, [r4, #16]
   17cc4:	ldr	r3, [r4, #12]
   17cc8:	str	r2, [sp, #4]
   17ccc:	str	r3, [sp]
   17cd0:	ldrd	r2, [r4, #4]
   17cd4:	ldr	r1, [r4]
   17cd8:	bl	13404 <g_strdup_printf@plt>
   17cdc:	add	sp, sp, #8
   17ce0:	pop	{r4, pc}
   17ce4:	mov	r2, #5
   17ce8:	ldr	r1, [pc, #68]	; 17d34 <g_strcmp0@plt+0x436c>
   17cec:	mov	r0, #0
   17cf0:	bl	13608 <dcgettext@plt>
   17cf4:	ldm	r4, {r1, r2}
   17cf8:	add	sp, sp, #8
   17cfc:	pop	{r4, lr}
   17d00:	b	13404 <g_strdup_printf@plt>
   17d04:	mov	r2, #5
   17d08:	ldr	r1, [pc, #40]	; 17d38 <g_strcmp0@plt+0x4370>
   17d0c:	mov	r0, #0
   17d10:	bl	13608 <dcgettext@plt>
   17d14:	ldrd	r2, [r4, #4]
   17d18:	ldr	r1, [r4]
   17d1c:	add	sp, sp, #8
   17d20:	pop	{r4, lr}
   17d24:	b	13404 <g_strdup_printf@plt>
   17d28:	andeq	sp, r1, ip, asr r9
   17d2c:	andeq	sp, r1, r8, ror #18
   17d30:	andeq	sp, r1, r4, ror #18
   17d34:	andeq	sp, r1, r0, ror r9
   17d38:	andeq	sp, r1, ip, ror #18
   17d3c:	mov	r0, #0
   17d40:	bx	lr
   17d44:	push	{r4, r5, r6, lr}
   17d48:	mov	r4, r2
   17d4c:	mov	r5, r0
   17d50:	bl	132a8 <gtk_expander_get_type@plt>
   17d54:	mov	r1, r0
   17d58:	mov	r0, r5
   17d5c:	bl	1320c <g_type_check_instance_cast@plt>
   17d60:	ldr	r1, [pc, #72]	; 17db0 <g_strcmp0@plt+0x43e8>
   17d64:	mov	r5, r0
   17d68:	mov	r0, r4
   17d6c:	bl	133d4 <gtk_builder_get_object@plt>
   17d70:	mov	r4, r0
   17d74:	bl	13998 <gtk_window_get_type@plt>
   17d78:	mov	r1, r0
   17d7c:	mov	r0, r4
   17d80:	bl	1320c <g_type_check_instance_cast@plt>
   17d84:	mov	r4, r0
   17d88:	mov	r0, r5
   17d8c:	bl	130b0 <gtk_expander_get_expanded@plt>
   17d90:	subs	r1, r0, #0
   17d94:	mov	r0, r4
   17d98:	beq	17da8 <g_strcmp0@plt+0x43e0>
   17d9c:	mov	r1, #1
   17da0:	pop	{r4, r5, r6, lr}
   17da4:	b	13740 <gtk_window_set_resizable@plt>
   17da8:	pop	{r4, r5, r6, lr}
   17dac:	b	13740 <gtk_window_set_resizable@plt>
   17db0:	andeq	sp, r1, r0, lsr #19
   17db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17db8:	sub	sp, sp, #28
   17dbc:	ldr	r9, [pc, #884]	; 18138 <g_strcmp0@plt+0x4770>
   17dc0:	cmp	r2, #0
   17dc4:	str	r2, [sp, #8]
   17dc8:	ldr	r2, [r9]
   17dcc:	mov	r7, #0
   17dd0:	str	r1, [sp, #12]
   17dd4:	str	r2, [sp, #20]
   17dd8:	str	r7, [sp, #16]
   17ddc:	beq	1806c <g_strcmp0@plt+0x46a4>
   17de0:	mov	sl, r3
   17de4:	mov	fp, r0
   17de8:	bl	1374c <gtk_builder_new@plt>
   17dec:	add	r2, sp, #16
   17df0:	ldr	r1, [pc, #836]	; 1813c <g_strcmp0@plt+0x4774>
   17df4:	mov	r4, r0
   17df8:	bl	13980 <gtk_builder_add_from_file@plt>
   17dfc:	cmp	r0, r7
   17e00:	beq	18048 <g_strcmp0@plt+0x4680>
   17e04:	ldr	r1, [pc, #820]	; 18140 <g_strcmp0@plt+0x4778>
   17e08:	mov	r0, r4
   17e0c:	bl	133d4 <gtk_builder_get_object@plt>
   17e10:	mov	r6, r0
   17e14:	bl	131d0 <gtk_widget_get_type@plt>
   17e18:	mov	r1, r0
   17e1c:	mov	r5, r0
   17e20:	mov	r0, r6
   17e24:	bl	1320c <g_type_check_instance_cast@plt>
   17e28:	mov	r8, r0
   17e2c:	bl	13998 <gtk_window_get_type@plt>
   17e30:	mov	r6, r0
   17e34:	mov	r1, r0
   17e38:	mov	r0, r8
   17e3c:	bl	1320c <g_type_check_instance_cast@plt>
   17e40:	mov	r1, r7
   17e44:	bl	13740 <gtk_window_set_resizable@plt>
   17e48:	mov	r2, #2
   17e4c:	mov	r3, r7
   17e50:	str	r2, [sp, #4]
   17e54:	ldr	r1, [pc, #744]	; 18144 <g_strcmp0@plt+0x477c>
   17e58:	ldr	r2, [pc, #744]	; 18148 <g_strcmp0@plt+0x4780>
   17e5c:	str	r7, [sp]
   17e60:	mov	r0, r8
   17e64:	bl	134f4 <g_signal_connect_data@plt>
   17e68:	mov	r1, r6
   17e6c:	mov	r0, r8
   17e70:	bl	1320c <g_type_check_instance_cast@plt>
   17e74:	ldr	r1, [pc, #720]	; 1814c <g_strcmp0@plt+0x4784>
   17e78:	bl	13488 <gtk_window_set_title@plt>
   17e7c:	cmp	fp, #0
   17e80:	mov	r1, r6
   17e84:	mov	r0, r8
   17e88:	beq	18084 <g_strcmp0@plt+0x46bc>
   17e8c:	bl	1320c <g_type_check_instance_cast@plt>
   17e90:	mov	r1, fp
   17e94:	bl	13800 <gtk_window_set_transient_for@plt>
   17e98:	mov	r0, r8
   17e9c:	mov	r1, r6
   17ea0:	bl	1320c <g_type_check_instance_cast@plt>
   17ea4:	ldr	r1, [pc, #676]	; 18150 <g_strcmp0@plt+0x4788>
   17ea8:	bl	132fc <gtk_window_set_icon_name@plt>
   17eac:	ldr	r1, [pc, #672]	; 18154 <g_strcmp0@plt+0x478c>
   17eb0:	mov	r0, r4
   17eb4:	bl	133d4 <gtk_builder_get_object@plt>
   17eb8:	mov	r1, r5
   17ebc:	bl	1320c <g_type_check_instance_cast@plt>
   17ec0:	mov	r7, #0
   17ec4:	mov	r3, #2
   17ec8:	ldr	r2, [pc, #632]	; 18148 <g_strcmp0@plt+0x4780>
   17ecc:	str	r3, [sp, #4]
   17ed0:	ldr	r1, [pc, #640]	; 18158 <g_strcmp0@plt+0x4790>
   17ed4:	mov	r3, r7
   17ed8:	str	r7, [sp]
   17edc:	bl	134f4 <g_signal_connect_data@plt>
   17ee0:	ldr	r1, [pc, #628]	; 1815c <g_strcmp0@plt+0x4794>
   17ee4:	mov	r0, r4
   17ee8:	bl	133d4 <gtk_builder_get_object@plt>
   17eec:	mov	r1, r5
   17ef0:	bl	1320c <g_type_check_instance_cast@plt>
   17ef4:	mov	r3, r4
   17ef8:	ldr	r2, [pc, #608]	; 18160 <g_strcmp0@plt+0x4798>
   17efc:	ldr	r1, [pc, #608]	; 18164 <g_strcmp0@plt+0x479c>
   17f00:	str	r7, [sp, #4]
   17f04:	str	r7, [sp]
   17f08:	bl	134f4 <g_signal_connect_data@plt>
   17f0c:	ldr	r1, [pc, #596]	; 18168 <g_strcmp0@plt+0x47a0>
   17f10:	mov	r0, r4
   17f14:	bl	133d4 <gtk_builder_get_object@plt>
   17f18:	mov	r1, r5
   17f1c:	bl	1320c <g_type_check_instance_cast@plt>
   17f20:	mov	fp, r0
   17f24:	bl	131ac <gtk_label_get_type@plt>
   17f28:	mov	r1, r0
   17f2c:	mov	r8, r0
   17f30:	mov	r0, fp
   17f34:	bl	1320c <g_type_check_instance_cast@plt>
   17f38:	ldr	r1, [sp, #12]
   17f3c:	bl	131b8 <gtk_label_set_label@plt>
   17f40:	ldr	r1, [pc, #548]	; 1816c <g_strcmp0@plt+0x47a4>
   17f44:	mov	r0, r4
   17f48:	bl	133d4 <gtk_builder_get_object@plt>
   17f4c:	mov	r1, r5
   17f50:	bl	1320c <g_type_check_instance_cast@plt>
   17f54:	mov	r1, r8
   17f58:	bl	1320c <g_type_check_instance_cast@plt>
   17f5c:	ldr	r1, [sp, #8]
   17f60:	bl	13908 <gtk_label_set_markup@plt>
   17f64:	cmp	sl, r7
   17f68:	beq	17f78 <g_strcmp0@plt+0x45b0>
   17f6c:	ldrb	r3, [sl]
   17f70:	cmp	r3, r7
   17f74:	bne	18094 <g_strcmp0@plt+0x46cc>
   17f78:	ldr	r1, [pc, #476]	; 1815c <g_strcmp0@plt+0x4794>
   17f7c:	mov	r0, r4
   17f80:	bl	133d4 <gtk_builder_get_object@plt>
   17f84:	mov	r1, r5
   17f88:	bl	1320c <g_type_check_instance_cast@plt>
   17f8c:	bl	13254 <gtk_widget_hide@plt>
   17f90:	ldr	r1, [pc, #424]	; 18140 <g_strcmp0@plt+0x4778>
   17f94:	mov	r0, r4
   17f98:	bl	133d4 <gtk_builder_get_object@plt>
   17f9c:	mov	r1, r5
   17fa0:	bl	1320c <g_type_check_instance_cast@plt>
   17fa4:	mov	r1, r6
   17fa8:	mov	r7, r0
   17fac:	bl	1320c <g_type_check_instance_cast@plt>
   17fb0:	ldr	r1, [sp, #64]	; 0x40
   17fb4:	bl	135b4 <gtk_window_present_with_time@plt>
   17fb8:	mov	r1, r6
   17fbc:	mov	r0, r7
   17fc0:	bl	1320c <g_type_check_instance_cast@plt>
   17fc4:	ldr	r1, [pc, #388]	; 18150 <g_strcmp0@plt+0x4788>
   17fc8:	bl	132fc <gtk_window_set_icon_name@plt>
   17fcc:	bl	13620 <gtk_main@plt>
   17fd0:	cmp	r7, #0
   17fd4:	movne	r8, #0
   17fd8:	beq	18018 <g_strcmp0@plt+0x4650>
   17fdc:	ldr	r3, [r7]
   17fe0:	cmp	r3, #0
   17fe4:	beq	17ff4 <g_strcmp0@plt+0x462c>
   17fe8:	ldr	r3, [r3]
   17fec:	cmp	r5, r3
   17ff0:	beq	1803c <g_strcmp0@plt+0x4674>
   17ff4:	mov	r1, r5
   17ff8:	mov	r0, r7
   17ffc:	bl	136d4 <g_type_check_instance_is_a@plt>
   18000:	cmp	r0, #0
   18004:	bne	1803c <g_strcmp0@plt+0x4674>
   18008:	cmp	r8, #0
   1800c:	beq	18018 <g_strcmp0@plt+0x4650>
   18010:	mov	r0, r8
   18014:	bl	137ac <g_object_unref@plt>
   18018:	mov	r0, r4
   1801c:	bl	137ac <g_object_unref@plt>
   18020:	mov	r0, #1
   18024:	ldr	r2, [sp, #20]
   18028:	ldr	r3, [r9]
   1802c:	cmp	r2, r3
   18030:	bne	18134 <g_strcmp0@plt+0x476c>
   18034:	add	sp, sp, #28
   18038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1803c:	mov	r0, r7
   18040:	bl	13254 <gtk_widget_hide@plt>
   18044:	b	18008 <g_strcmp0@plt+0x4640>
   18048:	ldr	r3, [sp, #16]
   1804c:	ldr	r2, [pc, #284]	; 18170 <g_strcmp0@plt+0x47a8>
   18050:	mov	r1, #16
   18054:	ldr	r3, [r3, #8]
   18058:	ldr	r0, [pc, #276]	; 18174 <g_strcmp0@plt+0x47ac>
   1805c:	bl	13278 <g_log@plt>
   18060:	ldr	r0, [sp, #16]
   18064:	bl	13194 <g_error_free@plt>
   18068:	b	18018 <g_strcmp0@plt+0x4650>
   1806c:	ldr	r0, [pc, #256]	; 18174 <g_strcmp0@plt+0x47ac>
   18070:	ldr	r2, [pc, #256]	; 18178 <g_strcmp0@plt+0x47b0>
   18074:	ldr	r1, [pc, #256]	; 1817c <g_strcmp0@plt+0x47b4>
   18078:	bl	13128 <g_return_if_fail_warning@plt>
   1807c:	ldr	r0, [sp, #8]
   18080:	b	18024 <g_strcmp0@plt+0x465c>
   18084:	bl	1320c <g_type_check_instance_cast@plt>
   18088:	mov	r1, #1
   1808c:	bl	13878 <gtk_window_set_modal@plt>
   18090:	b	17e98 <g_strcmp0@plt+0x44d0>
   18094:	mov	r0, r7
   18098:	bl	1380c <gtk_text_buffer_new@plt>
   1809c:	mov	r8, r0
   180a0:	mov	r0, sl
   180a4:	bl	137b8 <strlen@plt>
   180a8:	mov	r1, sl
   180ac:	mov	r2, r0
   180b0:	mov	r0, r8
   180b4:	bl	13638 <gtk_text_buffer_insert_at_cursor@plt>
   180b8:	ldr	r1, [pc, #192]	; 18180 <g_strcmp0@plt+0x47b8>
   180bc:	mov	r0, r4
   180c0:	bl	133d4 <gtk_builder_get_object@plt>
   180c4:	mov	r1, r5
   180c8:	bl	1320c <g_type_check_instance_cast@plt>
   180cc:	mov	r7, r0
   180d0:	bl	13230 <gtk_text_view_get_type@plt>
   180d4:	mov	r1, r0
   180d8:	mov	r0, r7
   180dc:	bl	1320c <g_type_check_instance_cast@plt>
   180e0:	mov	r1, r8
   180e4:	bl	134ac <gtk_text_view_set_buffer@plt>
   180e8:	ldr	r1, [pc, #80]	; 18140 <g_strcmp0@plt+0x4778>
   180ec:	mov	r0, r4
   180f0:	bl	133d4 <gtk_builder_get_object@plt>
   180f4:	mov	r1, r5
   180f8:	bl	1320c <g_type_check_instance_cast@plt>
   180fc:	mov	r1, r6
   18100:	mov	r7, r0
   18104:	bl	1320c <g_type_check_instance_cast@plt>
   18108:	ldr	r1, [sp, #64]	; 0x40
   1810c:	bl	135b4 <gtk_window_present_with_time@plt>
   18110:	mov	r1, r6
   18114:	mov	r0, r7
   18118:	bl	1320c <g_type_check_instance_cast@plt>
   1811c:	ldr	r1, [pc, #44]	; 18150 <g_strcmp0@plt+0x4788>
   18120:	bl	132fc <gtk_window_set_icon_name@plt>
   18124:	bl	13620 <gtk_main@plt>
   18128:	cmp	r7, #0
   1812c:	bne	17fdc <g_strcmp0@plt+0x4614>
   18130:	b	18008 <g_strcmp0@plt+0x4640>
   18134:	bl	135c0 <__stack_chk_fail@plt>
   18138:	andeq	sp, r2, r8, asr #28
   1813c:			; <UNDEFINED> instruction: 0x0001d9b0
   18140:	andeq	sp, r1, r0, lsr #19
   18144:	andeq	sp, r1, r0, lsl #20
   18148:	andeq	r3, r1, ip, lsr r8
   1814c:	andeq	r9, r1, ip, lsl #16
   18150:	andeq	sp, r1, r0, lsr #17
   18154:	andeq	sp, r1, r0, lsl sl
   18158:	andeq	sp, r1, r0, lsr #20
   1815c:	andeq	sp, r1, r8, lsr #20
   18160:	andeq	r7, r1, r4, asr #26
   18164:	andeq	sp, r1, ip, lsr sl
   18168:	andeq	sp, r1, r0, asr sl
   1816c:	andeq	sp, r1, ip, asr sl
   18170:	andeq	sp, r1, r8, ror #19
   18174:	andeq	r9, r1, ip, ror #14
   18178:	ldrdeq	sp, [r1], -r8
   1817c:	andeq	sp, r1, ip, ror r9
   18180:	andeq	sp, r1, ip, ror #20
   18184:	push	{lr}		; (str lr, [sp, #-4]!)
   18188:	sub	sp, sp, #12
   1818c:	mov	ip, #0
   18190:	str	ip, [sp]
   18194:	bl	17db4 <g_strcmp0@plt+0x43ec>
   18198:	add	sp, sp, #12
   1819c:	pop	{pc}		; (ldr pc, [sp], #4)
   181a0:	push	{lr}		; (str lr, [sp, #-4]!)
   181a4:	sub	sp, sp, #12
   181a8:	mov	ip, #0
   181ac:	mov	r3, r2
   181b0:	str	ip, [sp]
   181b4:	mov	r2, r1
   181b8:	mov	r1, r0
   181bc:	mov	r0, ip
   181c0:	bl	17db4 <g_strcmp0@plt+0x43ec>
   181c4:	add	sp, sp, #12
   181c8:	pop	{pc}		; (ldr pc, [sp], #4)
   181cc:	push	{r4, r5, r6, r7, lr}
   181d0:	mov	r4, #0
   181d4:	ldr	r6, [pc, #336]	; 1832c <g_strcmp0@plt+0x4964>
   181d8:	sub	sp, sp, #76	; 0x4c
   181dc:	mov	r5, r1
   181e0:	ldr	r3, [r6]
   181e4:	mov	r1, r4
   181e8:	mov	r7, r2
   181ec:	add	r0, sp, #16
   181f0:	mov	r2, #52	; 0x34
   181f4:	str	r3, [sp, #68]	; 0x44
   181f8:	str	r4, [sp, #8]
   181fc:	bl	133bc <memset@plt>
   18200:	ldr	r2, [pc, #296]	; 18330 <g_strcmp0@plt+0x4968>
   18204:	mov	r1, #112	; 0x70
   18208:	mov	ip, #2
   1820c:	add	r3, sp, #8
   18210:	mov	r0, r4
   18214:	str	r2, [sp, #12]
   18218:	strb	r1, [sp, #16]
   1821c:	mov	r2, #5
   18220:	ldr	r1, [pc, #268]	; 18334 <g_strcmp0@plt+0x496c>
   18224:	str	ip, [sp, #24]
   18228:	str	r3, [sp, #28]
   1822c:	bl	13608 <dcgettext@plt>
   18230:	add	r1, sp, #4
   18234:	str	r0, [sp, #32]
   18238:	mov	r0, r5
   1823c:	bl	13470 <g_application_command_line_get_arguments@plt>
   18240:	str	r0, [sp]
   18244:	mov	r0, r4
   18248:	bl	1323c <g_option_context_new@plt>
   1824c:	mov	r2, #5
   18250:	ldr	r1, [pc, #224]	; 18338 <g_strcmp0@plt+0x4970>
   18254:	mov	r5, r0
   18258:	mov	r0, r4
   1825c:	bl	13608 <dcgettext@plt>
   18260:	mov	r1, r0
   18264:	mov	r0, r5
   18268:	bl	13284 <g_option_context_set_summary@plt>
   1826c:	mov	r2, r4
   18270:	add	r1, sp, #12
   18274:	mov	r0, r5
   18278:	bl	1371c <g_option_context_add_main_entries@plt>
   1827c:	bl	13f18 <g_strcmp0@plt+0x550>
   18280:	mov	r1, r0
   18284:	mov	r0, r5
   18288:	bl	13104 <g_option_context_add_group@plt>
   1828c:	mov	r3, r4
   18290:	add	r1, sp, #4
   18294:	mov	r0, r5
   18298:	mov	r2, sp
   1829c:	bl	130f8 <g_option_context_parse@plt>
   182a0:	subs	r4, r0, #0
   182a4:	bne	182d4 <g_strcmp0@plt+0x490c>
   182a8:	ldr	r0, [sp]
   182ac:	bl	13578 <g_strfreev@plt>
   182b0:	mov	r0, r5
   182b4:	bl	1359c <g_option_context_free@plt>
   182b8:	ldr	r2, [sp, #68]	; 0x44
   182bc:	ldr	r3, [r6]
   182c0:	mov	r0, r4
   182c4:	cmp	r2, r3
   182c8:	bne	18328 <g_strcmp0@plt+0x4960>
   182cc:	add	sp, sp, #76	; 0x4c
   182d0:	pop	{r4, r5, r6, r7, pc}
   182d4:	ldr	r1, [pc, #96]	; 1833c <g_strcmp0@plt+0x4974>
   182d8:	ldr	r0, [r7, #16]
   182dc:	bl	133d4 <gtk_builder_get_object@plt>
   182e0:	mov	r7, r0
   182e4:	bl	13998 <gtk_window_get_type@plt>
   182e8:	mov	r1, r0
   182ec:	mov	r0, r7
   182f0:	bl	1320c <g_type_check_instance_cast@plt>
   182f4:	mov	r7, r0
   182f8:	bl	13770 <gtk_window_present@plt>
   182fc:	ldr	r3, [sp, #8]
   18300:	cmp	r3, #0
   18304:	beq	182a8 <g_strcmp0@plt+0x48e0>
   18308:	ldr	r2, [pc, #48]	; 18340 <g_strcmp0@plt+0x4978>
   1830c:	mov	r1, #128	; 0x80
   18310:	ldr	r0, [pc, #44]	; 18344 <g_strcmp0@plt+0x497c>
   18314:	bl	13278 <g_log@plt>
   18318:	mov	r0, r7
   1831c:	ldr	r1, [sp, #8]
   18320:	bl	17344 <g_strcmp0@plt+0x397c>
   18324:	b	182a8 <g_strcmp0@plt+0x48e0>
   18328:	bl	135c0 <__stack_chk_fail@plt>
   1832c:	andeq	sp, r2, r8, asr #28
   18330:	andeq	sp, r1, r0, lsl #21
   18334:	muleq	r1, r0, sl
   18338:			; <UNDEFINED> instruction: 0x0001dabc
   1833c:	andeq	sp, r1, ip, asr #21
   18340:	ldrdeq	sp, [r1], -ip
   18344:	andeq	r9, r1, ip, ror #14
   18348:	push	{r4, r5, lr}
   1834c:	sub	sp, sp, #12
   18350:	mov	r4, r2
   18354:	mov	r5, r0
   18358:	bl	1392c <gtk_list_store_get_type@plt>
   1835c:	mov	r1, r0
   18360:	mov	r0, r5
   18364:	bl	1320c <g_type_check_instance_cast@plt>
   18368:	mvn	r3, #0
   1836c:	str	r3, [sp]
   18370:	mov	r1, r4
   18374:	mov	r3, #0
   18378:	mov	r2, #3
   1837c:	bl	13140 <gtk_list_store_set@plt>
   18380:	mov	r0, #0
   18384:	add	sp, sp, #12
   18388:	pop	{r4, r5, pc}
   1838c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18390:	sub	sp, sp, #20
   18394:	ldr	r4, [pc, #296]	; 184c4 <g_strcmp0@plt+0x4afc>
   18398:	mov	r6, #0
   1839c:	mov	r7, r0
   183a0:	ldr	r3, [r4]
   183a4:	mov	r5, r1
   183a8:	mov	r8, r2
   183ac:	str	r3, [sp, #12]
   183b0:	str	r6, [sp, #8]
   183b4:	bl	132d8 <pk_client_get_type@plt>
   183b8:	mov	r1, r0
   183bc:	mov	r0, r7
   183c0:	bl	1320c <g_type_check_instance_cast@plt>
   183c4:	mov	r1, r5
   183c8:	add	r2, sp, #8
   183cc:	bl	133ec <pk_client_generic_finish@plt>
   183d0:	subs	r7, r0, #0
   183d4:	beq	1849c <g_strcmp0@plt+0x4ad4>
   183d8:	bl	132b4 <pk_results_get_error_code@plt>
   183dc:	subs	r5, r0, #0
   183e0:	beq	1847c <g_strcmp0@plt+0x4ab4>
   183e4:	bl	13314 <pk_error_get_code@plt>
   183e8:	bl	13428 <pk_error_enum_to_string@plt>
   183ec:	mov	r9, r0
   183f0:	mov	r0, r5
   183f4:	bl	13308 <pk_error_get_details@plt>
   183f8:	mov	r3, r9
   183fc:	ldr	r2, [pc, #196]	; 184c8 <g_strcmp0@plt+0x4b00>
   18400:	mov	r1, #16
   18404:	str	r0, [sp]
   18408:	ldr	r0, [pc, #188]	; 184cc <g_strcmp0@plt+0x4b04>
   1840c:	bl	13278 <g_log@plt>
   18410:	ldr	r1, [pc, #184]	; 184d0 <g_strcmp0@plt+0x4b08>
   18414:	ldr	r0, [r8, #16]
   18418:	bl	133d4 <gtk_builder_get_object@plt>
   1841c:	mov	r8, r0
   18420:	bl	13998 <gtk_window_get_type@plt>
   18424:	mov	r1, r0
   18428:	mov	r0, r8
   1842c:	bl	1320c <g_type_check_instance_cast@plt>
   18430:	mov	r2, #5
   18434:	ldr	r1, [pc, #152]	; 184d4 <g_strcmp0@plt+0x4b0c>
   18438:	mov	r8, r0
   1843c:	mov	r0, r6
   18440:	bl	13608 <dcgettext@plt>
   18444:	mov	r6, r0
   18448:	mov	r0, r5
   1844c:	bl	13314 <pk_error_get_code@plt>
   18450:	bl	14a04 <g_strcmp0@plt+0x103c>
   18454:	mov	r9, r0
   18458:	mov	r0, r5
   1845c:	bl	13308 <pk_error_get_details@plt>
   18460:	mov	r2, r9
   18464:	mov	r1, r6
   18468:	mov	r3, r0
   1846c:	mov	r0, r8
   18470:	bl	18184 <g_strcmp0@plt+0x47bc>
   18474:	mov	r0, r5
   18478:	bl	137ac <g_object_unref@plt>
   1847c:	mov	r0, r7
   18480:	bl	137ac <g_object_unref@plt>
   18484:	ldr	r2, [sp, #12]
   18488:	ldr	r3, [r4]
   1848c:	cmp	r2, r3
   18490:	bne	184c0 <g_strcmp0@plt+0x4af8>
   18494:	add	sp, sp, #20
   18498:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1849c:	ldr	r3, [sp, #8]
   184a0:	ldr	r2, [pc, #48]	; 184d8 <g_strcmp0@plt+0x4b10>
   184a4:	mov	r1, #16
   184a8:	ldr	r3, [r3, #8]
   184ac:	ldr	r0, [pc, #24]	; 184cc <g_strcmp0@plt+0x4b04>
   184b0:	bl	13278 <g_log@plt>
   184b4:	ldr	r0, [sp, #8]
   184b8:	bl	13194 <g_error_free@plt>
   184bc:	b	18484 <g_strcmp0@plt+0x4abc>
   184c0:	bl	135c0 <__stack_chk_fail@plt>
   184c4:	andeq	sp, r2, r8, asr #28
   184c8:	andeq	sp, r1, r8, lsl #22
   184cc:	andeq	r9, r1, ip, ror #14
   184d0:	andeq	sp, r1, ip, asr #21
   184d4:	andeq	sp, r1, r4, lsr #22
   184d8:	andeq	sp, r1, ip, ror #21
   184dc:	push	{r4, r5, lr}
   184e0:	mov	r4, r0
   184e4:	sub	sp, sp, #28
   184e8:	ldr	r1, [pc, #168]	; 18598 <g_strcmp0@plt+0x4bd0>
   184ec:	ldr	r0, [r0, #16]
   184f0:	bl	133d4 <gtk_builder_get_object@plt>
   184f4:	mov	r5, r0
   184f8:	bl	135d8 <gtk_tree_view_get_type@plt>
   184fc:	mov	r1, r0
   18500:	mov	r0, r5
   18504:	bl	1320c <g_type_check_instance_cast@plt>
   18508:	bl	13320 <gtk_tree_view_get_model@plt>
   1850c:	mov	r2, r4
   18510:	ldr	r1, [pc, #132]	; 1859c <g_strcmp0@plt+0x4bd4>
   18514:	bl	1317c <gtk_tree_model_foreach@plt>
   18518:	ldr	r2, [pc, #128]	; 185a0 <g_strcmp0@plt+0x4bd8>
   1851c:	mov	r1, #128	; 0x80
   18520:	ldr	r0, [pc, #124]	; 185a4 <g_strcmp0@plt+0x4bdc>
   18524:	bl	13278 <g_log@plt>
   18528:	ldr	r1, [pc, #120]	; 185a8 <g_strcmp0@plt+0x4be0>
   1852c:	ldr	r0, [r4, #16]
   18530:	bl	133d4 <gtk_builder_get_object@plt>
   18534:	mov	r5, r0
   18538:	bl	131d0 <gtk_widget_get_type@plt>
   1853c:	mov	r1, r0
   18540:	mov	r0, r5
   18544:	bl	1320c <g_type_check_instance_cast@plt>
   18548:	mov	r5, r0
   1854c:	bl	132cc <gtk_toggle_button_get_type@plt>
   18550:	mov	r1, r0
   18554:	mov	r0, r5
   18558:	bl	1320c <g_type_check_instance_cast@plt>
   1855c:	bl	139bc <gtk_toggle_button_get_active@plt>
   18560:	ldr	ip, [pc, #68]	; 185ac <g_strcmp0@plt+0x4be4>
   18564:	ldr	r1, [r4, #4]
   18568:	mov	r3, #0
   1856c:	str	r4, [sp, #16]
   18570:	str	r1, [sp]
   18574:	cmp	r0, #0
   18578:	ldr	r0, [pc, #48]	; 185b0 <g_strcmp0@plt+0x4be8>
   1857c:	movne	r2, #2
   18580:	moveq	r2, #32
   18584:	stmib	sp, {r0, r4, ip}
   18588:	ldr	r0, [r4, #40]	; 0x28
   1858c:	bl	13668 <pk_client_get_repo_list_async@plt>
   18590:	add	sp, sp, #28
   18594:	pop	{r4, r5, pc}
   18598:	andeq	sp, r1, ip, lsr fp
   1859c:	andeq	r8, r1, r8, asr #6
   185a0:	andeq	sp, r1, ip, asr #22
   185a4:	andeq	r9, r1, ip, ror #14
   185a8:	andeq	sp, r1, ip, asr fp
   185ac:	andeq	r8, r1, r0, lsl #15
   185b0:	andeq	r9, r1, ip, asr #1
   185b4:	push	{r4, r5, r6, r7, r8, lr}
   185b8:	sub	sp, sp, #56	; 0x38
   185bc:	ldr	r6, [pc, #408]	; 1875c <g_strcmp0@plt+0x4d94>
   185c0:	mov	r4, #0
   185c4:	mov	r8, r0
   185c8:	ldr	r3, [r6]
   185cc:	mov	r7, r1
   185d0:	mov	r5, r2
   185d4:	str	r3, [sp, #52]	; 0x34
   185d8:	str	r4, [sp, #32]
   185dc:	bl	136c8 <pk_control_get_type@plt>
   185e0:	mov	r1, r0
   185e4:	mov	r0, r8
   185e8:	bl	1320c <g_type_check_instance_cast@plt>
   185ec:	mov	r1, r7
   185f0:	add	r2, sp, #32
   185f4:	mov	r8, r0
   185f8:	bl	132e4 <pk_control_get_properties_finish@plt>
   185fc:	cmp	r0, r4
   18600:	beq	1872c <g_strcmp0@plt+0x4d64>
   18604:	mov	r3, r4
   18608:	add	r2, r5, #32
   1860c:	ldr	r1, [pc, #332]	; 18760 <g_strcmp0@plt+0x4d98>
   18610:	mov	r0, r8
   18614:	bl	1365c <g_object_get@plt>
   18618:	ldr	r1, [r5, #32]
   1861c:	mov	r3, r4
   18620:	and	r2, r1, #64	; 0x40
   18624:	orrs	r3, r2, r3
   18628:	bne	18720 <g_strcmp0@plt+0x4d58>
   1862c:	ldr	r1, [pc, #304]	; 18764 <g_strcmp0@plt+0x4d9c>
   18630:	ldr	r0, [r5, #16]
   18634:	bl	133d4 <gtk_builder_get_object@plt>
   18638:	mov	r7, r0
   1863c:	bl	135d8 <gtk_tree_view_get_type@plt>
   18640:	mov	r1, r0
   18644:	mov	r0, r7
   18648:	bl	1320c <g_type_check_instance_cast@plt>
   1864c:	bl	13320 <gtk_tree_view_get_model@plt>
   18650:	mov	r7, r0
   18654:	bl	1392c <gtk_list_store_get_type@plt>
   18658:	mov	r1, r0
   1865c:	mov	r0, r7
   18660:	bl	1320c <g_type_check_instance_cast@plt>
   18664:	add	r1, sp, #36	; 0x24
   18668:	bl	136a4 <gtk_list_store_append@plt>
   1866c:	mov	r2, #5
   18670:	ldr	r1, [pc, #240]	; 18768 <g_strcmp0@plt+0x4da0>
   18674:	mov	r0, r4
   18678:	ldr	r7, [r5, #20]
   1867c:	bl	13608 <dcgettext@plt>
   18680:	mvn	r3, #0
   18684:	mov	ip, #4
   18688:	mov	r2, #3
   1868c:	str	r3, [sp, #24]
   18690:	mov	r3, #1
   18694:	str	ip, [sp, #16]
   18698:	add	r1, sp, #36	; 0x24
   1869c:	str	r2, [sp, #8]
   186a0:	str	r3, [sp]
   186a4:	mov	r2, r4
   186a8:	mov	r3, r4
   186ac:	str	r4, [sp, #20]
   186b0:	str	r4, [sp, #12]
   186b4:	str	r0, [sp, #4]
   186b8:	mov	r0, r7
   186bc:	bl	13140 <gtk_list_store_set@plt>
   186c0:	ldr	r1, [pc, #156]	; 18764 <g_strcmp0@plt+0x4d9c>
   186c4:	ldr	r0, [r5, #16]
   186c8:	bl	133d4 <gtk_builder_get_object@plt>
   186cc:	mov	r8, r0
   186d0:	bl	131d0 <gtk_widget_get_type@plt>
   186d4:	mov	r1, r0
   186d8:	mov	r7, r0
   186dc:	mov	r0, r8
   186e0:	bl	1320c <g_type_check_instance_cast@plt>
   186e4:	mov	r1, r4
   186e8:	bl	139a4 <gtk_widget_set_sensitive@plt>
   186ec:	ldr	r1, [pc, #120]	; 1876c <g_strcmp0@plt+0x4da4>
   186f0:	ldr	r0, [r5, #16]
   186f4:	bl	133d4 <gtk_builder_get_object@plt>
   186f8:	mov	r1, r7
   186fc:	bl	1320c <g_type_check_instance_cast@plt>
   18700:	mov	r1, r4
   18704:	bl	139a4 <gtk_widget_set_sensitive@plt>
   18708:	ldr	r2, [sp, #52]	; 0x34
   1870c:	ldr	r3, [r6]
   18710:	cmp	r2, r3
   18714:	bne	18758 <g_strcmp0@plt+0x4d90>
   18718:	add	sp, sp, #56	; 0x38
   1871c:	pop	{r4, r5, r6, r7, r8, pc}
   18720:	mov	r0, r5
   18724:	bl	184dc <g_strcmp0@plt+0x4b14>
   18728:	b	18708 <g_strcmp0@plt+0x4d40>
   1872c:	mov	r2, #5
   18730:	ldr	r1, [pc, #56]	; 18770 <g_strcmp0@plt+0x4da8>
   18734:	bl	13608 <dcgettext@plt>
   18738:	ldr	r3, [sp, #32]
   1873c:	ldr	r2, [r3, #8]
   18740:	mov	r1, r0
   18744:	ldr	r0, [pc, #40]	; 18774 <g_strcmp0@plt+0x4dac>
   18748:	bl	136e0 <g_print@plt>
   1874c:	ldr	r0, [sp, #32]
   18750:	bl	13194 <g_error_free@plt>
   18754:	b	18708 <g_strcmp0@plt+0x4d40>
   18758:	bl	135c0 <__stack_chk_fail@plt>
   1875c:	andeq	sp, r2, r8, asr #28
   18760:	andeq	sp, r1, ip, lsr #23
   18764:	andeq	sp, r1, ip, lsr fp
   18768:			; <UNDEFINED> instruction: 0x0001dbb4
   1876c:	andeq	sp, r1, ip, asr fp
   18770:	andeq	sp, r1, r0, ror fp
   18774:	andeq	sp, r1, r4, lsr #23
   18778:	mov	r0, r1
   1877c:	b	184dc <g_strcmp0@plt+0x4b14>
   18780:	ldr	r3, [pc, #756]	; 18a7c <g_strcmp0@plt+0x50b4>
   18784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18788:	sub	sp, sp, #92	; 0x5c
   1878c:	ldr	r3, [r3]
   18790:	mov	r6, #0
   18794:	str	r3, [sp, #84]	; 0x54
   18798:	mov	r5, r1
   1879c:	mov	r4, r2
   187a0:	mov	r7, r0
   187a4:	str	r6, [sp, #60]	; 0x3c
   187a8:	bl	132d8 <pk_client_get_type@plt>
   187ac:	mov	r1, r0
   187b0:	mov	r0, r7
   187b4:	bl	1320c <g_type_check_instance_cast@plt>
   187b8:	mov	r1, r5
   187bc:	add	r2, sp, #60	; 0x3c
   187c0:	bl	133ec <pk_client_generic_finish@plt>
   187c4:	subs	r3, r0, #0
   187c8:	str	r3, [sp, #44]	; 0x2c
   187cc:	beq	18a54 <g_strcmp0@plt+0x508c>
   187d0:	bl	132b4 <pk_results_get_error_code@plt>
   187d4:	subs	r5, r0, #0
   187d8:	beq	18898 <g_strcmp0@plt+0x4ed0>
   187dc:	bl	13314 <pk_error_get_code@plt>
   187e0:	bl	13428 <pk_error_enum_to_string@plt>
   187e4:	mov	r7, r0
   187e8:	mov	r0, r5
   187ec:	bl	13308 <pk_error_get_details@plt>
   187f0:	mov	r3, r7
   187f4:	ldr	r2, [pc, #644]	; 18a80 <g_strcmp0@plt+0x50b8>
   187f8:	mov	r1, #16
   187fc:	str	r0, [sp]
   18800:	ldr	r0, [pc, #636]	; 18a84 <g_strcmp0@plt+0x50bc>
   18804:	bl	13278 <g_log@plt>
   18808:	ldr	r1, [pc, #632]	; 18a88 <g_strcmp0@plt+0x50c0>
   1880c:	ldr	r0, [r4, #16]
   18810:	bl	133d4 <gtk_builder_get_object@plt>
   18814:	mov	r4, r0
   18818:	bl	13998 <gtk_window_get_type@plt>
   1881c:	mov	r1, r0
   18820:	mov	r0, r4
   18824:	bl	1320c <g_type_check_instance_cast@plt>
   18828:	mov	r2, #5
   1882c:	ldr	r1, [pc, #600]	; 18a8c <g_strcmp0@plt+0x50c4>
   18830:	mov	r4, r0
   18834:	mov	r0, r6
   18838:	bl	13608 <dcgettext@plt>
   1883c:	mov	r6, r0
   18840:	mov	r0, r5
   18844:	bl	13314 <pk_error_get_code@plt>
   18848:	bl	14a04 <g_strcmp0@plt+0x103c>
   1884c:	mov	r7, r0
   18850:	mov	r0, r5
   18854:	bl	13308 <pk_error_get_details@plt>
   18858:	mov	r2, r7
   1885c:	mov	r1, r6
   18860:	mov	r3, r0
   18864:	mov	r0, r4
   18868:	bl	18184 <g_strcmp0@plt+0x47bc>
   1886c:	mov	r0, r5
   18870:	bl	137ac <g_object_unref@plt>
   18874:	ldr	r0, [sp, #44]	; 0x2c
   18878:	bl	137ac <g_object_unref@plt>
   1887c:	ldr	r3, [pc, #504]	; 18a7c <g_strcmp0@plt+0x50b4>
   18880:	ldr	r2, [sp, #84]	; 0x54
   18884:	ldr	r3, [r3]
   18888:	cmp	r2, r3
   1888c:	bne	18a78 <g_strcmp0@plt+0x50b0>
   18890:	add	sp, sp, #92	; 0x5c
   18894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18898:	ldr	r1, [pc, #496]	; 18a90 <g_strcmp0@plt+0x50c8>
   1889c:	ldr	r0, [r4, #16]
   188a0:	bl	133d4 <gtk_builder_get_object@plt>
   188a4:	mov	r6, r0
   188a8:	bl	135d8 <gtk_tree_view_get_type@plt>
   188ac:	mov	r1, r0
   188b0:	mov	r0, r6
   188b4:	bl	1320c <g_type_check_instance_cast@plt>
   188b8:	bl	13320 <gtk_tree_view_get_model@plt>
   188bc:	mov	r6, r0
   188c0:	ldr	r0, [sp, #44]	; 0x2c
   188c4:	bl	13344 <pk_results_get_repo_detail_array@plt>
   188c8:	ldr	r3, [r0, #4]
   188cc:	mov	r7, r0
   188d0:	cmp	r3, #0
   188d4:	beq	18a04 <g_strcmp0@plt+0x503c>
   188d8:	ldr	fp, [pc, #436]	; 18a94 <g_strcmp0@plt+0x50cc>
   188dc:	ldr	sl, [pc, #436]	; 18a98 <g_strcmp0@plt+0x50d0>
   188e0:	ldr	r9, [pc, #436]	; 18a9c <g_strcmp0@plt+0x50d4>
   188e4:	mov	r8, r5
   188e8:	b	18974 <g_strcmp0@plt+0x4fac>
   188ec:	add	r1, sp, #68	; 0x44
   188f0:	mov	r0, r6
   188f4:	bl	13938 <gtk_tree_model_get_iter@plt>
   188f8:	ldr	r0, [r4, #24]
   188fc:	bl	1344c <gtk_tree_path_free@plt>
   18900:	ldr	r1, [sp, #56]	; 0x38
   18904:	ldr	r2, [sp, #52]	; 0x34
   18908:	mvn	ip, #0
   1890c:	mov	r3, #1
   18910:	str	r1, [sp, #12]
   18914:	str	r2, [sp, #4]
   18918:	mov	r0, #4
   1891c:	mov	r1, #3
   18920:	mov	r2, #2
   18924:	str	ip, [sp, #32]
   18928:	str	r3, [sp, #28]
   1892c:	str	r3, [sp, #20]
   18930:	str	r3, [sp]
   18934:	str	r1, [sp, #16]
   18938:	ldr	r3, [sp, #48]	; 0x30
   1893c:	str	r2, [sp, #8]
   18940:	add	r1, sp, #68	; 0x44
   18944:	mov	r2, #0
   18948:	str	r0, [sp, #24]
   1894c:	ldr	r0, [r4, #20]
   18950:	bl	13140 <gtk_list_store_set@plt>
   18954:	ldr	r0, [sp, #56]	; 0x38
   18958:	bl	135fc <g_free@plt>
   1895c:	ldr	r0, [sp, #52]	; 0x34
   18960:	bl	135fc <g_free@plt>
   18964:	ldr	r3, [r7, #4]
   18968:	add	r5, r5, #1
   1896c:	cmp	r3, r5
   18970:	bls	18a04 <g_strcmp0@plt+0x503c>
   18974:	ldr	r1, [r7]
   18978:	add	ip, sp, #48	; 0x30
   1897c:	mov	r3, sl
   18980:	ldr	r0, [r1, r5, lsl #2]
   18984:	stmib	sp, {fp, ip}
   18988:	add	ip, sp, #52	; 0x34
   1898c:	str	ip, [sp]
   18990:	add	r2, sp, #56	; 0x38
   18994:	mov	r1, r9
   18998:	str	r8, [sp, #12]
   1899c:	bl	1365c <g_object_get@plt>
   189a0:	ldrd	r2, [sp, #48]	; 0x30
   189a4:	mov	r1, #128	; 0x80
   189a8:	ldr	r0, [pc, #212]	; 18a84 <g_strcmp0@plt+0x50bc>
   189ac:	str	r2, [sp, #4]
   189b0:	str	r3, [sp]
   189b4:	ldr	r2, [pc, #228]	; 18aa0 <g_strcmp0@plt+0x50d8>
   189b8:	ldr	r3, [sp, #56]	; 0x38
   189bc:	bl	13278 <g_log@plt>
   189c0:	ldr	r3, [sp, #56]	; 0x38
   189c4:	mov	r2, r4
   189c8:	str	r8, [r4, #24]
   189cc:	str	r3, [r4]
   189d0:	ldr	r1, [pc, #204]	; 18aa4 <g_strcmp0@plt+0x50dc>
   189d4:	mov	r0, r6
   189d8:	bl	1317c <gtk_tree_model_foreach@plt>
   189dc:	ldr	r2, [r4, #24]
   189e0:	cmp	r2, #0
   189e4:	bne	188ec <g_strcmp0@plt+0x4f24>
   189e8:	bl	1392c <gtk_list_store_get_type@plt>
   189ec:	mov	r1, r0
   189f0:	mov	r0, r6
   189f4:	bl	1320c <g_type_check_instance_cast@plt>
   189f8:	add	r1, sp, #68	; 0x44
   189fc:	bl	136a4 <gtk_list_store_append@plt>
   18a00:	b	18900 <g_strcmp0@plt+0x4f38>
   18a04:	ldr	r9, [pc, #156]	; 18aa8 <g_strcmp0@plt+0x50e0>
   18a08:	mov	r8, #0
   18a0c:	add	r2, sp, #64	; 0x40
   18a10:	mov	r1, r9
   18a14:	mov	r0, r6
   18a18:	str	r8, [sp, #64]	; 0x40
   18a1c:	bl	1317c <gtk_tree_model_foreach@plt>
   18a20:	ldr	r5, [sp, #64]	; 0x40
   18a24:	cmp	r5, #0
   18a28:	bne	18a0c <g_strcmp0@plt+0x5044>
   18a2c:	bl	133c8 <gtk_tree_sortable_get_type@plt>
   18a30:	mov	r1, r0
   18a34:	ldr	r0, [r4, #20]
   18a38:	bl	1320c <g_type_check_instance_cast@plt>
   18a3c:	mov	r2, r5
   18a40:	mov	r1, #1
   18a44:	bl	13830 <gtk_tree_sortable_set_sort_column_id@plt>
   18a48:	mov	r0, r7
   18a4c:	bl	13854 <g_ptr_array_unref@plt>
   18a50:	b	18874 <g_strcmp0@plt+0x4eac>
   18a54:	ldr	r3, [sp, #60]	; 0x3c
   18a58:	ldr	r2, [pc, #76]	; 18aac <g_strcmp0@plt+0x50e4>
   18a5c:	mov	r1, #16
   18a60:	ldr	r3, [r3, #8]
   18a64:	ldr	r0, [pc, #24]	; 18a84 <g_strcmp0@plt+0x50bc>
   18a68:	bl	13278 <g_log@plt>
   18a6c:	ldr	r0, [sp, #60]	; 0x3c
   18a70:	bl	13194 <g_error_free@plt>
   18a74:	b	1887c <g_strcmp0@plt+0x4eb4>
   18a78:	bl	135c0 <__stack_chk_fail@plt>
   18a7c:	andeq	sp, r2, r8, asr #28
   18a80:	andeq	sp, r1, r8, lsl #24
   18a84:	andeq	r9, r1, ip, ror #14
   18a88:	andeq	sp, r1, ip, asr #21
   18a8c:	andeq	sp, r1, r8, lsr #24
   18a90:	andeq	sp, r1, ip, lsr fp
   18a94:	ldrdeq	r9, [r1], -r4
   18a98:	andeq	sp, r1, ip, asr #24
   18a9c:	andeq	sp, r1, r8, asr ip
   18aa0:	andeq	sp, r1, r0, ror #24
   18aa4:			; <UNDEFINED> instruction: 0x00018ab0
   18aa8:	andeq	r9, r1, ip, lsr r0
   18aac:	andeq	sp, r1, ip, ror #23
   18ab0:	push	{r4, r5, r6, r7, lr}
   18ab4:	sub	sp, sp, #20
   18ab8:	ldr	r5, [pc, #116]	; 18b34 <g_strcmp0@plt+0x516c>
   18abc:	mov	r6, r3
   18ac0:	mvn	r3, #0
   18ac4:	ldr	ip, [r5]
   18ac8:	str	r3, [sp]
   18acc:	mov	r4, #0
   18ad0:	add	r3, sp, #8
   18ad4:	mov	r7, r1
   18ad8:	mov	r1, r2
   18adc:	mov	r2, #2
   18ae0:	str	ip, [sp, #12]
   18ae4:	str	r4, [sp, #8]
   18ae8:	bl	13944 <gtk_tree_model_get@plt>
   18aec:	ldr	r1, [r6]
   18af0:	ldr	r0, [sp, #8]
   18af4:	bl	13884 <strcmp@plt>
   18af8:	cmp	r0, r4
   18afc:	beq	18b1c <g_strcmp0@plt+0x5154>
   18b00:	ldr	r2, [sp, #12]
   18b04:	ldr	r3, [r5]
   18b08:	mov	r0, r4
   18b0c:	cmp	r2, r3
   18b10:	bne	18b30 <g_strcmp0@plt+0x5168>
   18b14:	add	sp, sp, #20
   18b18:	pop	{r4, r5, r6, r7, pc}
   18b1c:	mov	r0, r7
   18b20:	bl	13728 <gtk_tree_path_copy@plt>
   18b24:	mov	r4, #1
   18b28:	str	r0, [r6, #24]
   18b2c:	b	18b00 <g_strcmp0@plt+0x5138>
   18b30:	bl	135c0 <__stack_chk_fail@plt>
   18b34:	andeq	sp, r2, r8, asr #28
   18b38:	push	{r4, r5, r6, lr}
   18b3c:	mov	r4, r0
   18b40:	ldr	r1, [pc, #68]	; 18b8c <g_strcmp0@plt+0x51c4>
   18b44:	ldr	r0, [r0, #16]
   18b48:	bl	133d4 <gtk_builder_get_object@plt>
   18b4c:	mov	r6, r0
   18b50:	bl	131d0 <gtk_widget_get_type@plt>
   18b54:	mov	r1, r0
   18b58:	mov	r5, r0
   18b5c:	mov	r0, r6
   18b60:	bl	1320c <g_type_check_instance_cast@plt>
   18b64:	bl	13254 <gtk_widget_hide@plt>
   18b68:	ldr	r0, [r4, #16]
   18b6c:	ldr	r1, [pc, #28]	; 18b90 <g_strcmp0@plt+0x51c8>
   18b70:	bl	133d4 <gtk_builder_get_object@plt>
   18b74:	mov	r1, r5
   18b78:	bl	1320c <g_type_check_instance_cast@plt>
   18b7c:	bl	137a0 <gtk_widget_show@plt>
   18b80:	mov	r0, #0
   18b84:	str	r0, [r4, #28]
   18b88:	pop	{r4, r5, r6, pc}
   18b8c:	andeq	sp, r1, r0, ror ip
   18b90:	andeq	sp, r1, r4, lsl #25
   18b94:	push	{r4, lr}
   18b98:	mov	r4, r1
   18b9c:	bl	13188 <g_application_get_type@plt>
   18ba0:	mov	r1, r0
   18ba4:	ldr	r0, [r4, #12]
   18ba8:	bl	1320c <g_type_check_instance_cast@plt>
   18bac:	pop	{r4, lr}
   18bb0:	b	1338c <g_application_release@plt>
   18bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bb8:	sub	sp, sp, #36	; 0x24
   18bbc:	ldr	r9, [pc, #680]	; 18e6c <g_strcmp0@plt+0x54a4>
   18bc0:	mov	r4, #0
   18bc4:	mov	r5, r1
   18bc8:	ldr	r3, [r9]
   18bcc:	str	r0, [sp, #20]
   18bd0:	str	r3, [sp, #28]
   18bd4:	str	r4, [sp, #24]
   18bd8:	bl	138fc <gtk_icon_theme_get_default@plt>
   18bdc:	ldr	r1, [pc, #652]	; 18e70 <g_strcmp0@plt+0x54a8>
   18be0:	bl	1341c <gtk_icon_theme_append_search_path@plt>
   18be4:	bl	133a4 <pk_control_new@plt>
   18be8:	mov	r3, r5
   18bec:	ldr	r2, [pc, #640]	; 18e74 <g_strcmp0@plt+0x54ac>
   18bf0:	ldr	r1, [pc, #640]	; 18e78 <g_strcmp0@plt+0x54b0>
   18bf4:	str	r4, [sp, #4]
   18bf8:	str	r4, [sp]
   18bfc:	mov	sl, r0
   18c00:	bl	134f4 <g_signal_connect_data@plt>
   18c04:	ldr	r0, [r5, #16]
   18c08:	add	r2, sp, #24
   18c0c:	ldr	r1, [pc, #616]	; 18e7c <g_strcmp0@plt+0x54b4>
   18c10:	bl	13980 <gtk_builder_add_from_file@plt>
   18c14:	cmp	r0, r4
   18c18:	beq	18e44 <g_strcmp0@plt+0x547c>
   18c1c:	ldr	r1, [pc, #604]	; 18e80 <g_strcmp0@plt+0x54b8>
   18c20:	ldr	r0, [r5, #16]
   18c24:	bl	133d4 <gtk_builder_get_object@plt>
   18c28:	mov	r7, r0
   18c2c:	bl	131d0 <gtk_widget_get_type@plt>
   18c30:	mov	r6, r0
   18c34:	mov	r1, r0
   18c38:	mov	r0, r7
   18c3c:	bl	1320c <g_type_check_instance_cast@plt>
   18c40:	mov	r3, r5
   18c44:	ldr	r2, [pc, #568]	; 18e84 <g_strcmp0@plt+0x54bc>
   18c48:	ldr	r1, [pc, #568]	; 18e88 <g_strcmp0@plt+0x54c0>
   18c4c:	str	r4, [sp, #4]
   18c50:	str	r4, [sp]
   18c54:	bl	134f4 <g_signal_connect_data@plt>
   18c58:	ldr	r1, [pc, #556]	; 18e8c <g_strcmp0@plt+0x54c4>
   18c5c:	ldr	r0, [r5, #16]
   18c60:	bl	133d4 <gtk_builder_get_object@plt>
   18c64:	mov	r1, r6
   18c68:	bl	1320c <g_type_check_instance_cast@plt>
   18c6c:	str	r4, [sp]
   18c70:	ldr	r3, [pc, #536]	; 18e90 <g_strcmp0@plt+0x54c8>
   18c74:	ldr	r1, [pc, #536]	; 18e94 <g_strcmp0@plt+0x54cc>
   18c78:	mov	r7, r0
   18c7c:	mov	r2, r0
   18c80:	ldr	r0, [r5, #8]
   18c84:	bl	13614 <g_settings_bind@plt>
   18c88:	mov	r3, r5
   18c8c:	ldr	r2, [pc, #516]	; 18e98 <g_strcmp0@plt+0x54d0>
   18c90:	mov	r0, r7
   18c94:	ldr	r1, [pc, #492]	; 18e88 <g_strcmp0@plt+0x54c0>
   18c98:	str	r4, [sp, #4]
   18c9c:	str	r4, [sp]
   18ca0:	bl	134f4 <g_signal_connect_data@plt>
   18ca4:	ldr	r1, [pc, #496]	; 18e9c <g_strcmp0@plt+0x54d4>
   18ca8:	ldr	r0, [r5, #16]
   18cac:	bl	133d4 <gtk_builder_get_object@plt>
   18cb0:	mov	r1, r6
   18cb4:	bl	1320c <g_type_check_instance_cast@plt>
   18cb8:	mov	r7, r0
   18cbc:	bl	135d8 <gtk_tree_view_get_type@plt>
   18cc0:	mov	r8, r0
   18cc4:	mov	r1, r0
   18cc8:	mov	r0, r7
   18ccc:	bl	1320c <g_type_check_instance_cast@plt>
   18cd0:	mov	fp, r0
   18cd4:	bl	13698 <gtk_tree_model_get_type@plt>
   18cd8:	mov	r1, r0
   18cdc:	ldr	r0, [r5, #20]
   18ce0:	bl	1320c <g_type_check_instance_cast@plt>
   18ce4:	mov	r1, r0
   18ce8:	mov	r0, fp
   18cec:	bl	131e8 <gtk_tree_view_set_model@plt>
   18cf0:	mov	r1, r8
   18cf4:	mov	r0, r7
   18cf8:	bl	1320c <g_type_check_instance_cast@plt>
   18cfc:	bl	1368c <gtk_tree_view_get_selection@plt>
   18d00:	mov	r3, r5
   18d04:	ldr	r2, [pc, #404]	; 18ea0 <g_strcmp0@plt+0x54d8>
   18d08:	ldr	r1, [pc, #404]	; 18ea4 <g_strcmp0@plt+0x54dc>
   18d0c:	str	r4, [sp, #4]
   18d10:	str	r4, [sp]
   18d14:	bl	134f4 <g_signal_connect_data@plt>
   18d18:	mov	r1, r8
   18d1c:	mov	r0, r7
   18d20:	bl	1320c <g_type_check_instance_cast@plt>
   18d24:	str	r0, [sp, #16]
   18d28:	bl	13860 <gtk_cell_renderer_toggle_new@plt>
   18d2c:	mov	r3, r5
   18d30:	ldr	r2, [pc, #368]	; 18ea8 <g_strcmp0@plt+0x54e0>
   18d34:	ldr	r1, [pc, #368]	; 18eac <g_strcmp0@plt+0x54e4>
   18d38:	str	r4, [sp, #4]
   18d3c:	str	r4, [sp]
   18d40:	mov	fp, r0
   18d44:	bl	134f4 <g_signal_connect_data@plt>
   18d48:	mov	r2, #5
   18d4c:	ldr	r1, [pc, #348]	; 18eb0 <g_strcmp0@plt+0x54e8>
   18d50:	mov	r0, r4
   18d54:	bl	13608 <dcgettext@plt>
   18d58:	ldr	r2, [pc, #340]	; 18eb4 <g_strcmp0@plt+0x54ec>
   18d5c:	mov	r3, #4
   18d60:	mov	r1, fp
   18d64:	stm	sp, {r2, r3, r4}
   18d68:	mov	r3, r4
   18d6c:	ldr	r2, [pc, #284]	; 18e90 <g_strcmp0@plt+0x54c8>
   18d70:	bl	13218 <gtk_tree_view_column_new_with_attributes@plt>
   18d74:	mov	r1, r0
   18d78:	ldr	r0, [sp, #16]
   18d7c:	bl	130e0 <gtk_tree_view_append_column@plt>
   18d80:	bl	1347c <gtk_cell_renderer_text_new@plt>
   18d84:	mov	r2, #5
   18d88:	ldr	r1, [pc, #296]	; 18eb8 <g_strcmp0@plt+0x54f0>
   18d8c:	mov	fp, r0
   18d90:	mov	r0, r4
   18d94:	bl	13608 <dcgettext@plt>
   18d98:	mov	r3, #1
   18d9c:	ldr	r2, [pc, #280]	; 18ebc <g_strcmp0@plt+0x54f4>
   18da0:	mov	r1, fp
   18da4:	str	r4, [sp]
   18da8:	bl	13218 <gtk_tree_view_column_new_with_attributes@plt>
   18dac:	mov	r1, #1
   18db0:	mov	fp, r0
   18db4:	bl	13368 <gtk_tree_view_column_set_sort_column_id@plt>
   18db8:	mov	r1, fp
   18dbc:	ldr	r0, [sp, #16]
   18dc0:	bl	130e0 <gtk_tree_view_append_column@plt>
   18dc4:	mov	r1, r8
   18dc8:	mov	r0, r7
   18dcc:	bl	1320c <g_type_check_instance_cast@plt>
   18dd0:	bl	13224 <gtk_tree_view_columns_autosize@plt>
   18dd4:	ldr	r1, [pc, #228]	; 18ec0 <g_strcmp0@plt+0x54f8>
   18dd8:	ldr	r0, [r5, #16]
   18ddc:	bl	133d4 <gtk_builder_get_object@plt>
   18de0:	mov	r1, r6
   18de4:	bl	1320c <g_type_check_instance_cast@plt>
   18de8:	mov	r6, r0
   18dec:	bl	13998 <gtk_window_get_type@plt>
   18df0:	mov	r1, r0
   18df4:	mov	r0, r6
   18df8:	bl	1320c <g_type_check_instance_cast@plt>
   18dfc:	mov	r1, r0
   18e00:	ldr	r0, [sp, #20]
   18e04:	bl	132f0 <gtk_application_add_window@plt>
   18e08:	mov	r0, r6
   18e0c:	bl	137a0 <gtk_widget_show@plt>
   18e10:	mov	r3, r5
   18e14:	mov	r1, r4
   18e18:	ldr	r2, [pc, #164]	; 18ec4 <g_strcmp0@plt+0x54fc>
   18e1c:	mov	r0, sl
   18e20:	bl	130ec <pk_control_get_properties_async@plt>
   18e24:	mov	r0, sl
   18e28:	bl	137ac <g_object_unref@plt>
   18e2c:	ldr	r2, [sp, #28]
   18e30:	ldr	r3, [r9]
   18e34:	cmp	r2, r3
   18e38:	bne	18e68 <g_strcmp0@plt+0x54a0>
   18e3c:	add	sp, sp, #36	; 0x24
   18e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e44:	ldr	r3, [sp, #24]
   18e48:	ldr	r2, [pc, #120]	; 18ec8 <g_strcmp0@plt+0x5500>
   18e4c:	mov	r1, #16
   18e50:	ldr	r3, [r3, #8]
   18e54:	ldr	r0, [pc, #112]	; 18ecc <g_strcmp0@plt+0x5504>
   18e58:	bl	13278 <g_log@plt>
   18e5c:	ldr	r0, [sp, #24]
   18e60:	bl	13194 <g_error_free@plt>
   18e64:	b	18e24 <g_strcmp0@plt+0x545c>
   18e68:	bl	135c0 <__stack_chk_fail@plt>
   18e6c:	andeq	sp, r2, r8, asr #28
   18e70:	muleq	r1, r0, ip
   18e74:	andeq	r8, r1, r8, ror r7
   18e78:	andeq	sp, r1, ip, lsr #25
   18e7c:	andeq	sp, r1, r0, asr #25
   18e80:	andeq	sp, r1, r0, lsl sl
   18e84:	muleq	r1, r4, fp
   18e88:	andeq	sp, r1, r0, lsr #20
   18e8c:	andeq	sp, r1, ip, asr fp
   18e90:	andeq	sp, r1, r8, ror #25
   18e94:	strdeq	sp, [r1], -r0
   18e98:	andeq	r9, r1, r0, ror #4
   18e9c:	andeq	sp, r1, ip, lsr fp
   18ea0:	andeq	r9, r1, r0, asr #3
   18ea4:	andeq	sp, r1, r4, lsl #26
   18ea8:	ldrdeq	r8, [r1], -r0
   18eac:	andeq	sp, r1, ip, lsl #26
   18eb0:	andeq	sp, r1, r4, lsl sp
   18eb4:	andeq	sp, r1, ip, lsl sp
   18eb8:	andeq	sp, r1, r8, lsr #26
   18ebc:	andeq	sp, r1, r8, lsr sp
   18ec0:	andeq	sp, r1, ip, asr #21
   18ec4:			; <UNDEFINED> instruction: 0x000185b4
   18ec8:	andeq	sp, r1, r8, ror #19
   18ecc:	andeq	r9, r1, ip, ror #14
   18ed0:	push	{r4, r5, r6, r7, r8, r9, lr}
   18ed4:	sub	sp, sp, #52	; 0x34
   18ed8:	ldr	r6, [pc, #320]	; 19020 <g_strcmp0@plt+0x5658>
   18edc:	mov	r0, r1
   18ee0:	mov	r5, #0
   18ee4:	ldr	r3, [r6]
   18ee8:	mov	r4, r2
   18eec:	str	r3, [sp, #44]	; 0x2c
   18ef0:	str	r5, [sp, #24]
   18ef4:	bl	13518 <gtk_tree_path_new_from_string@plt>
   18ef8:	ldr	r1, [r4, #32]
   18efc:	mov	r3, r5
   18f00:	and	r2, r1, #32768	; 0x8000
   18f04:	orrs	r3, r2, r3
   18f08:	mov	r7, r0
   18f0c:	beq	19008 <g_strcmp0@plt+0x5640>
   18f10:	ldr	r1, [pc, #268]	; 19024 <g_strcmp0@plt+0x565c>
   18f14:	ldr	r0, [r4, #16]
   18f18:	bl	133d4 <gtk_builder_get_object@plt>
   18f1c:	mov	r8, r0
   18f20:	bl	135d8 <gtk_tree_view_get_type@plt>
   18f24:	mov	r1, r0
   18f28:	mov	r0, r8
   18f2c:	bl	1320c <g_type_check_instance_cast@plt>
   18f30:	bl	13320 <gtk_tree_view_get_model@plt>
   18f34:	add	r1, sp, #28
   18f38:	mov	r2, r7
   18f3c:	mvn	r8, #0
   18f40:	mov	r9, r0
   18f44:	bl	13938 <gtk_tree_model_get_iter@plt>
   18f48:	add	r2, sp, #24
   18f4c:	mov	r3, #2
   18f50:	add	r1, sp, #28
   18f54:	mov	r0, r9
   18f58:	stmib	sp, {r2, r8}
   18f5c:	str	r3, [sp]
   18f60:	mov	r2, r5
   18f64:	add	r3, sp, #20
   18f68:	bl	13944 <gtk_tree_model_get@plt>
   18f6c:	ldr	r3, [sp, #20]
   18f70:	eor	r3, r3, #1
   18f74:	str	r3, [sp, #20]
   18f78:	bl	1392c <gtk_list_store_get_type@plt>
   18f7c:	mov	r1, r0
   18f80:	mov	r0, r9
   18f84:	bl	1320c <g_type_check_instance_cast@plt>
   18f88:	add	r1, sp, #28
   18f8c:	mov	r3, r5
   18f90:	mov	r2, #4
   18f94:	str	r8, [sp]
   18f98:	bl	13140 <gtk_list_store_set@plt>
   18f9c:	ldrd	r2, [sp, #20]
   18fa0:	mov	r1, #128	; 0x80
   18fa4:	ldr	r0, [pc, #124]	; 19028 <g_strcmp0@plt+0x5660>
   18fa8:	str	r2, [sp]
   18fac:	ldr	r2, [pc, #120]	; 1902c <g_strcmp0@plt+0x5664>
   18fb0:	bl	13278 <g_log@plt>
   18fb4:	ldr	r2, [pc, #116]	; 19030 <g_strcmp0@plt+0x5668>
   18fb8:	ldr	r3, [pc, #116]	; 19034 <g_strcmp0@plt+0x566c>
   18fbc:	str	r2, [sp, #8]
   18fc0:	str	r4, [sp, #12]
   18fc4:	str	r4, [sp, #4]
   18fc8:	str	r3, [sp]
   18fcc:	ldr	r2, [sp, #20]
   18fd0:	ldr	r3, [r4, #4]
   18fd4:	ldr	r0, [r4, #40]	; 0x28
   18fd8:	ldr	r1, [sp, #24]
   18fdc:	bl	1350c <pk_client_repo_enable_async@plt>
   18fe0:	ldr	r0, [sp, #24]
   18fe4:	bl	135fc <g_free@plt>
   18fe8:	mov	r0, r7
   18fec:	bl	1344c <gtk_tree_path_free@plt>
   18ff0:	ldr	r2, [sp, #44]	; 0x2c
   18ff4:	ldr	r3, [r6]
   18ff8:	cmp	r2, r3
   18ffc:	bne	1901c <g_strcmp0@plt+0x5654>
   19000:	add	sp, sp, #52	; 0x34
   19004:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19008:	ldr	r2, [pc, #40]	; 19038 <g_strcmp0@plt+0x5670>
   1900c:	mov	r1, #128	; 0x80
   19010:	ldr	r0, [pc, #16]	; 19028 <g_strcmp0@plt+0x5660>
   19014:	bl	13278 <g_log@plt>
   19018:	b	18fe0 <g_strcmp0@plt+0x5618>
   1901c:	bl	135c0 <__stack_chk_fail@plt>
   19020:	andeq	sp, r2, r8, asr #28
   19024:	andeq	sp, r1, ip, lsr fp
   19028:	andeq	r9, r1, ip, ror #14
   1902c:	andeq	sp, r1, r4, asr sp
   19030:	andeq	r8, r1, ip, lsl #7
   19034:	andeq	r9, r1, ip, asr #1
   19038:	andeq	sp, r1, r0, asr #26
   1903c:	push	{r4, r5, r6, r7, r8, lr}
   19040:	sub	sp, sp, #16
   19044:	ldr	r4, [pc, #124]	; 190c8 <g_strcmp0@plt+0x5700>
   19048:	mov	r6, r2
   1904c:	mvn	r2, #0
   19050:	ldr	ip, [r4]
   19054:	str	r2, [sp]
   19058:	mov	r8, r3
   1905c:	mov	r1, r6
   19060:	add	r3, sp, #8
   19064:	mov	r2, #3
   19068:	mov	r7, r0
   1906c:	str	ip, [sp, #12]
   19070:	bl	13944 <gtk_tree_model_get@plt>
   19074:	ldr	r3, [sp, #8]
   19078:	cmp	r3, #0
   1907c:	movne	r0, #0
   19080:	beq	1909c <g_strcmp0@plt+0x56d4>
   19084:	ldr	r2, [sp, #12]
   19088:	ldr	r3, [r4]
   1908c:	cmp	r2, r3
   19090:	bne	190c4 <g_strcmp0@plt+0x56fc>
   19094:	add	sp, sp, #16
   19098:	pop	{r4, r5, r6, r7, r8, pc}
   1909c:	mov	r5, #1
   190a0:	str	r5, [r8]
   190a4:	bl	1392c <gtk_list_store_get_type@plt>
   190a8:	mov	r1, r0
   190ac:	mov	r0, r7
   190b0:	bl	1320c <g_type_check_instance_cast@plt>
   190b4:	mov	r1, r6
   190b8:	bl	1332c <gtk_list_store_remove@plt>
   190bc:	mov	r0, r5
   190c0:	b	19084 <g_strcmp0@plt+0x56bc>
   190c4:	bl	135c0 <__stack_chk_fail@plt>
   190c8:	andeq	sp, r2, r8, asr #28
   190cc:	cmp	r1, #4
   190d0:	bxne	lr
   190d4:	push	{r4, r5, r6, lr}
   190d8:	mov	r4, r2
   190dc:	mov	r3, #0
   190e0:	add	r2, r2, #44	; 0x2c
   190e4:	ldr	r1, [pc, #180]	; 191a0 <g_strcmp0@plt+0x57d8>
   190e8:	bl	1365c <g_object_get@plt>
   190ec:	ldr	r0, [r4, #44]	; 0x2c
   190f0:	bl	1329c <pk_status_enum_to_string@plt>
   190f4:	ldr	r2, [pc, #168]	; 191a4 <g_strcmp0@plt+0x57dc>
   190f8:	mov	r1, #128	; 0x80
   190fc:	mov	r3, r0
   19100:	ldr	r0, [pc, #160]	; 191a8 <g_strcmp0@plt+0x57e0>
   19104:	bl	13278 <g_log@plt>
   19108:	ldr	r3, [r4, #44]	; 0x2c
   1910c:	cmp	r3, #18
   19110:	beq	19140 <g_strcmp0@plt+0x5778>
   19114:	ldr	r3, [r4, #28]
   19118:	cmp	r3, #0
   1911c:	popne	{r4, r5, r6, pc}
   19120:	mov	r2, r4
   19124:	ldr	r1, [pc, #128]	; 191ac <g_strcmp0@plt+0x57e4>
   19128:	ldr	r0, [pc, #128]	; 191b0 <g_strcmp0@plt+0x57e8>
   1912c:	bl	13170 <g_timeout_add@plt>
   19130:	ldr	r1, [pc, #124]	; 191b4 <g_strcmp0@plt+0x57ec>
   19134:	str	r0, [r4, #28]
   19138:	pop	{r4, r5, r6, lr}
   1913c:	b	13818 <g_source_set_name_by_id@plt>
   19140:	ldr	r0, [r4, #28]
   19144:	cmp	r0, #0
   19148:	bne	19190 <g_strcmp0@plt+0x57c8>
   1914c:	ldr	r1, [pc, #100]	; 191b8 <g_strcmp0@plt+0x57f0>
   19150:	ldr	r0, [r4, #16]
   19154:	bl	133d4 <gtk_builder_get_object@plt>
   19158:	mov	r6, r0
   1915c:	bl	131d0 <gtk_widget_get_type@plt>
   19160:	mov	r1, r0
   19164:	mov	r5, r0
   19168:	mov	r0, r6
   1916c:	bl	1320c <g_type_check_instance_cast@plt>
   19170:	bl	13254 <gtk_widget_hide@plt>
   19174:	ldr	r0, [r4, #16]
   19178:	ldr	r1, [pc, #60]	; 191bc <g_strcmp0@plt+0x57f4>
   1917c:	bl	133d4 <gtk_builder_get_object@plt>
   19180:	mov	r1, r5
   19184:	bl	1320c <g_type_check_instance_cast@plt>
   19188:	pop	{r4, r5, r6, lr}
   1918c:	b	137a0 <gtk_widget_show@plt>
   19190:	bl	139b0 <g_source_remove@plt>
   19194:	mov	r3, #0
   19198:	str	r3, [r4, #28]
   1919c:	b	1914c <g_strcmp0@plt+0x5784>
   191a0:	andeq	sp, r1, r8, lsl #25
   191a4:	andeq	sp, r1, r8, ror #26
   191a8:	andeq	r9, r1, ip, ror #14
   191ac:	andeq	r8, r1, r8, lsr fp
   191b0:	andeq	r0, r0, lr, ror #5
   191b4:	andeq	sp, r1, r0, ror sp
   191b8:	andeq	sp, r1, r4, lsl #25
   191bc:	andeq	sp, r1, r0, ror ip
   191c0:	push	{r4, lr}
   191c4:	sub	sp, sp, #40	; 0x28
   191c8:	ldr	r4, [pc, #128]	; 19250 <g_strcmp0@plt+0x5888>
   191cc:	add	r2, sp, #20
   191d0:	add	r1, sp, #16
   191d4:	ldr	r3, [r4]
   191d8:	str	r3, [sp, #36]	; 0x24
   191dc:	bl	13674 <gtk_tree_selection_get_selected@plt>
   191e0:	cmp	r0, #0
   191e4:	beq	19238 <g_strcmp0@plt+0x5870>
   191e8:	mvn	r3, #0
   191ec:	add	r1, sp, #20
   191f0:	str	r3, [sp]
   191f4:	mov	r2, #2
   191f8:	add	r3, sp, #12
   191fc:	ldr	r0, [sp, #16]
   19200:	bl	13944 <gtk_tree_model_get@plt>
   19204:	ldr	r0, [pc, #72]	; 19254 <g_strcmp0@plt+0x588c>
   19208:	ldr	r3, [sp, #12]
   1920c:	ldr	r2, [pc, #68]	; 19258 <g_strcmp0@plt+0x5890>
   19210:	mov	r1, #128	; 0x80
   19214:	bl	13278 <g_log@plt>
   19218:	ldr	r0, [sp, #12]
   1921c:	bl	135fc <g_free@plt>
   19220:	ldr	r2, [sp, #36]	; 0x24
   19224:	ldr	r3, [r4]
   19228:	cmp	r2, r3
   1922c:	bne	1924c <g_strcmp0@plt+0x5884>
   19230:	add	sp, sp, #40	; 0x28
   19234:	pop	{r4, pc}
   19238:	ldr	r2, [pc, #28]	; 1925c <g_strcmp0@plt+0x5894>
   1923c:	mov	r1, #128	; 0x80
   19240:	ldr	r0, [pc, #12]	; 19254 <g_strcmp0@plt+0x588c>
   19244:	bl	13278 <g_log@plt>
   19248:	b	19220 <g_strcmp0@plt+0x5858>
   1924c:	bl	135c0 <__stack_chk_fail@plt>
   19250:	andeq	sp, r2, r8, asr #28
   19254:	andeq	r9, r1, ip, ror #14
   19258:	andeq	sp, r1, r4, lsl #27
   1925c:	muleq	r1, r8, sp
   19260:	mov	r0, r1
   19264:	b	184dc <g_strcmp0@plt+0x4b14>
   19268:	subs	r2, r1, #1
   1926c:	bxeq	lr
   19270:	bcc	19448 <g_strcmp0@plt+0x5a80>
   19274:	cmp	r0, r1
   19278:	bls	1942c <g_strcmp0@plt+0x5a64>
   1927c:	tst	r1, r2
   19280:	beq	19438 <g_strcmp0@plt+0x5a70>
   19284:	clz	r3, r0
   19288:	clz	r2, r1
   1928c:	sub	r3, r2, r3
   19290:	rsbs	r3, r3, #31
   19294:	addne	r3, r3, r3, lsl #1
   19298:	mov	r2, #0
   1929c:	addne	pc, pc, r3, lsl #2
   192a0:	nop			; (mov r0, r0)
   192a4:	cmp	r0, r1, lsl #31
   192a8:	adc	r2, r2, r2
   192ac:	subcs	r0, r0, r1, lsl #31
   192b0:	cmp	r0, r1, lsl #30
   192b4:	adc	r2, r2, r2
   192b8:	subcs	r0, r0, r1, lsl #30
   192bc:	cmp	r0, r1, lsl #29
   192c0:	adc	r2, r2, r2
   192c4:	subcs	r0, r0, r1, lsl #29
   192c8:	cmp	r0, r1, lsl #28
   192cc:	adc	r2, r2, r2
   192d0:	subcs	r0, r0, r1, lsl #28
   192d4:	cmp	r0, r1, lsl #27
   192d8:	adc	r2, r2, r2
   192dc:	subcs	r0, r0, r1, lsl #27
   192e0:	cmp	r0, r1, lsl #26
   192e4:	adc	r2, r2, r2
   192e8:	subcs	r0, r0, r1, lsl #26
   192ec:	cmp	r0, r1, lsl #25
   192f0:	adc	r2, r2, r2
   192f4:	subcs	r0, r0, r1, lsl #25
   192f8:	cmp	r0, r1, lsl #24
   192fc:	adc	r2, r2, r2
   19300:	subcs	r0, r0, r1, lsl #24
   19304:	cmp	r0, r1, lsl #23
   19308:	adc	r2, r2, r2
   1930c:	subcs	r0, r0, r1, lsl #23
   19310:	cmp	r0, r1, lsl #22
   19314:	adc	r2, r2, r2
   19318:	subcs	r0, r0, r1, lsl #22
   1931c:	cmp	r0, r1, lsl #21
   19320:	adc	r2, r2, r2
   19324:	subcs	r0, r0, r1, lsl #21
   19328:	cmp	r0, r1, lsl #20
   1932c:	adc	r2, r2, r2
   19330:	subcs	r0, r0, r1, lsl #20
   19334:	cmp	r0, r1, lsl #19
   19338:	adc	r2, r2, r2
   1933c:	subcs	r0, r0, r1, lsl #19
   19340:	cmp	r0, r1, lsl #18
   19344:	adc	r2, r2, r2
   19348:	subcs	r0, r0, r1, lsl #18
   1934c:	cmp	r0, r1, lsl #17
   19350:	adc	r2, r2, r2
   19354:	subcs	r0, r0, r1, lsl #17
   19358:	cmp	r0, r1, lsl #16
   1935c:	adc	r2, r2, r2
   19360:	subcs	r0, r0, r1, lsl #16
   19364:	cmp	r0, r1, lsl #15
   19368:	adc	r2, r2, r2
   1936c:	subcs	r0, r0, r1, lsl #15
   19370:	cmp	r0, r1, lsl #14
   19374:	adc	r2, r2, r2
   19378:	subcs	r0, r0, r1, lsl #14
   1937c:	cmp	r0, r1, lsl #13
   19380:	adc	r2, r2, r2
   19384:	subcs	r0, r0, r1, lsl #13
   19388:	cmp	r0, r1, lsl #12
   1938c:	adc	r2, r2, r2
   19390:	subcs	r0, r0, r1, lsl #12
   19394:	cmp	r0, r1, lsl #11
   19398:	adc	r2, r2, r2
   1939c:	subcs	r0, r0, r1, lsl #11
   193a0:	cmp	r0, r1, lsl #10
   193a4:	adc	r2, r2, r2
   193a8:	subcs	r0, r0, r1, lsl #10
   193ac:	cmp	r0, r1, lsl #9
   193b0:	adc	r2, r2, r2
   193b4:	subcs	r0, r0, r1, lsl #9
   193b8:	cmp	r0, r1, lsl #8
   193bc:	adc	r2, r2, r2
   193c0:	subcs	r0, r0, r1, lsl #8
   193c4:	cmp	r0, r1, lsl #7
   193c8:	adc	r2, r2, r2
   193cc:	subcs	r0, r0, r1, lsl #7
   193d0:	cmp	r0, r1, lsl #6
   193d4:	adc	r2, r2, r2
   193d8:	subcs	r0, r0, r1, lsl #6
   193dc:	cmp	r0, r1, lsl #5
   193e0:	adc	r2, r2, r2
   193e4:	subcs	r0, r0, r1, lsl #5
   193e8:	cmp	r0, r1, lsl #4
   193ec:	adc	r2, r2, r2
   193f0:	subcs	r0, r0, r1, lsl #4
   193f4:	cmp	r0, r1, lsl #3
   193f8:	adc	r2, r2, r2
   193fc:	subcs	r0, r0, r1, lsl #3
   19400:	cmp	r0, r1, lsl #2
   19404:	adc	r2, r2, r2
   19408:	subcs	r0, r0, r1, lsl #2
   1940c:	cmp	r0, r1, lsl #1
   19410:	adc	r2, r2, r2
   19414:	subcs	r0, r0, r1, lsl #1
   19418:	cmp	r0, r1
   1941c:	adc	r2, r2, r2
   19420:	subcs	r0, r0, r1
   19424:	mov	r0, r2
   19428:	bx	lr
   1942c:	moveq	r0, #1
   19430:	movne	r0, #0
   19434:	bx	lr
   19438:	clz	r2, r1
   1943c:	rsb	r2, r2, #31
   19440:	lsr	r0, r0, r2
   19444:	bx	lr
   19448:	cmp	r0, #0
   1944c:	mvnne	r0, #0
   19450:	b	196b4 <g_strcmp0@plt+0x5cec>
   19454:	cmp	r1, #0
   19458:	beq	19448 <g_strcmp0@plt+0x5a80>
   1945c:	push	{r0, r1, lr}
   19460:	bl	19268 <g_strcmp0@plt+0x58a0>
   19464:	pop	{r1, r2, lr}
   19468:	mul	r3, r2, r0
   1946c:	sub	r1, r1, r3
   19470:	bx	lr
   19474:	cmp	r1, #0
   19478:	beq	19684 <g_strcmp0@plt+0x5cbc>
   1947c:	eor	ip, r0, r1
   19480:	rsbmi	r1, r1, #0
   19484:	subs	r2, r1, #1
   19488:	beq	19650 <g_strcmp0@plt+0x5c88>
   1948c:	movs	r3, r0
   19490:	rsbmi	r3, r0, #0
   19494:	cmp	r3, r1
   19498:	bls	1965c <g_strcmp0@plt+0x5c94>
   1949c:	tst	r1, r2
   194a0:	beq	1966c <g_strcmp0@plt+0x5ca4>
   194a4:	clz	r2, r3
   194a8:	clz	r0, r1
   194ac:	sub	r2, r0, r2
   194b0:	rsbs	r2, r2, #31
   194b4:	addne	r2, r2, r2, lsl #1
   194b8:	mov	r0, #0
   194bc:	addne	pc, pc, r2, lsl #2
   194c0:	nop			; (mov r0, r0)
   194c4:	cmp	r3, r1, lsl #31
   194c8:	adc	r0, r0, r0
   194cc:	subcs	r3, r3, r1, lsl #31
   194d0:	cmp	r3, r1, lsl #30
   194d4:	adc	r0, r0, r0
   194d8:	subcs	r3, r3, r1, lsl #30
   194dc:	cmp	r3, r1, lsl #29
   194e0:	adc	r0, r0, r0
   194e4:	subcs	r3, r3, r1, lsl #29
   194e8:	cmp	r3, r1, lsl #28
   194ec:	adc	r0, r0, r0
   194f0:	subcs	r3, r3, r1, lsl #28
   194f4:	cmp	r3, r1, lsl #27
   194f8:	adc	r0, r0, r0
   194fc:	subcs	r3, r3, r1, lsl #27
   19500:	cmp	r3, r1, lsl #26
   19504:	adc	r0, r0, r0
   19508:	subcs	r3, r3, r1, lsl #26
   1950c:	cmp	r3, r1, lsl #25
   19510:	adc	r0, r0, r0
   19514:	subcs	r3, r3, r1, lsl #25
   19518:	cmp	r3, r1, lsl #24
   1951c:	adc	r0, r0, r0
   19520:	subcs	r3, r3, r1, lsl #24
   19524:	cmp	r3, r1, lsl #23
   19528:	adc	r0, r0, r0
   1952c:	subcs	r3, r3, r1, lsl #23
   19530:	cmp	r3, r1, lsl #22
   19534:	adc	r0, r0, r0
   19538:	subcs	r3, r3, r1, lsl #22
   1953c:	cmp	r3, r1, lsl #21
   19540:	adc	r0, r0, r0
   19544:	subcs	r3, r3, r1, lsl #21
   19548:	cmp	r3, r1, lsl #20
   1954c:	adc	r0, r0, r0
   19550:	subcs	r3, r3, r1, lsl #20
   19554:	cmp	r3, r1, lsl #19
   19558:	adc	r0, r0, r0
   1955c:	subcs	r3, r3, r1, lsl #19
   19560:	cmp	r3, r1, lsl #18
   19564:	adc	r0, r0, r0
   19568:	subcs	r3, r3, r1, lsl #18
   1956c:	cmp	r3, r1, lsl #17
   19570:	adc	r0, r0, r0
   19574:	subcs	r3, r3, r1, lsl #17
   19578:	cmp	r3, r1, lsl #16
   1957c:	adc	r0, r0, r0
   19580:	subcs	r3, r3, r1, lsl #16
   19584:	cmp	r3, r1, lsl #15
   19588:	adc	r0, r0, r0
   1958c:	subcs	r3, r3, r1, lsl #15
   19590:	cmp	r3, r1, lsl #14
   19594:	adc	r0, r0, r0
   19598:	subcs	r3, r3, r1, lsl #14
   1959c:	cmp	r3, r1, lsl #13
   195a0:	adc	r0, r0, r0
   195a4:	subcs	r3, r3, r1, lsl #13
   195a8:	cmp	r3, r1, lsl #12
   195ac:	adc	r0, r0, r0
   195b0:	subcs	r3, r3, r1, lsl #12
   195b4:	cmp	r3, r1, lsl #11
   195b8:	adc	r0, r0, r0
   195bc:	subcs	r3, r3, r1, lsl #11
   195c0:	cmp	r3, r1, lsl #10
   195c4:	adc	r0, r0, r0
   195c8:	subcs	r3, r3, r1, lsl #10
   195cc:	cmp	r3, r1, lsl #9
   195d0:	adc	r0, r0, r0
   195d4:	subcs	r3, r3, r1, lsl #9
   195d8:	cmp	r3, r1, lsl #8
   195dc:	adc	r0, r0, r0
   195e0:	subcs	r3, r3, r1, lsl #8
   195e4:	cmp	r3, r1, lsl #7
   195e8:	adc	r0, r0, r0
   195ec:	subcs	r3, r3, r1, lsl #7
   195f0:	cmp	r3, r1, lsl #6
   195f4:	adc	r0, r0, r0
   195f8:	subcs	r3, r3, r1, lsl #6
   195fc:	cmp	r3, r1, lsl #5
   19600:	adc	r0, r0, r0
   19604:	subcs	r3, r3, r1, lsl #5
   19608:	cmp	r3, r1, lsl #4
   1960c:	adc	r0, r0, r0
   19610:	subcs	r3, r3, r1, lsl #4
   19614:	cmp	r3, r1, lsl #3
   19618:	adc	r0, r0, r0
   1961c:	subcs	r3, r3, r1, lsl #3
   19620:	cmp	r3, r1, lsl #2
   19624:	adc	r0, r0, r0
   19628:	subcs	r3, r3, r1, lsl #2
   1962c:	cmp	r3, r1, lsl #1
   19630:	adc	r0, r0, r0
   19634:	subcs	r3, r3, r1, lsl #1
   19638:	cmp	r3, r1
   1963c:	adc	r0, r0, r0
   19640:	subcs	r3, r3, r1
   19644:	cmp	ip, #0
   19648:	rsbmi	r0, r0, #0
   1964c:	bx	lr
   19650:	teq	ip, r0
   19654:	rsbmi	r0, r0, #0
   19658:	bx	lr
   1965c:	movcc	r0, #0
   19660:	asreq	r0, ip, #31
   19664:	orreq	r0, r0, #1
   19668:	bx	lr
   1966c:	clz	r2, r1
   19670:	rsb	r2, r2, #31
   19674:	cmp	ip, #0
   19678:	lsr	r0, r3, r2
   1967c:	rsbmi	r0, r0, #0
   19680:	bx	lr
   19684:	cmp	r0, #0
   19688:	mvngt	r0, #-2147483648	; 0x80000000
   1968c:	movlt	r0, #-2147483648	; 0x80000000
   19690:	b	196b4 <g_strcmp0@plt+0x5cec>
   19694:	cmp	r1, #0
   19698:	beq	19684 <g_strcmp0@plt+0x5cbc>
   1969c:	push	{r0, r1, lr}
   196a0:	bl	1947c <g_strcmp0@plt+0x5ab4>
   196a4:	pop	{r1, r2, lr}
   196a8:	mul	r3, r2, r0
   196ac:	sub	r1, r1, r3
   196b0:	bx	lr
   196b4:	push	{r1, lr}
   196b8:	mov	r0, #8
   196bc:	bl	136bc <raise@plt>
   196c0:	pop	{r1, pc}
   196c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   196c8:	mov	r7, r0
   196cc:	ldr	r6, [pc, #72]	; 1971c <g_strcmp0@plt+0x5d54>
   196d0:	ldr	r5, [pc, #72]	; 19720 <g_strcmp0@plt+0x5d58>
   196d4:	add	r6, pc, r6
   196d8:	add	r5, pc, r5
   196dc:	sub	r6, r6, r5
   196e0:	mov	r8, r1
   196e4:	mov	r9, r2
   196e8:	bl	13090 <gtk_expander_get_expanded@plt-0x20>
   196ec:	asrs	r6, r6, #2
   196f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   196f4:	mov	r4, #0
   196f8:	add	r4, r4, #1
   196fc:	ldr	r3, [r5], #4
   19700:	mov	r2, r9
   19704:	mov	r1, r8
   19708:	mov	r0, r7
   1970c:	blx	r3
   19710:	cmp	r6, r4
   19714:	bne	196f8 <g_strcmp0@plt+0x5d30>
   19718:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1971c:	andeq	r4, r1, r8, ror #14
   19720:	andeq	r4, r1, r0, ror #14
   19724:	bx	lr

Disassembly of section .fini:

00019728 <.fini>:
   19728:	push	{r3, lr}
   1972c:	pop	{r3, pc}
