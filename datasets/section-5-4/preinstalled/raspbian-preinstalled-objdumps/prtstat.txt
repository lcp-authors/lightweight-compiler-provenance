
raspbian-preinstalled/prtstat:     file format elf32-littlearm


Disassembly of section .init:

000107a0 <.init>:
   107a0:	push	{r3, lr}
   107a4:	bl	10b98 <__assert_fail@plt+0x294>
   107a8:	pop	{r3, pc}

Disassembly of section .plt:

000107ac <strtol@plt-0x14>:
   107ac:	push	{lr}		; (str lr, [sp, #-4]!)
   107b0:	ldr	lr, [pc, #4]	; 107bc <strtol@plt-0x4>
   107b4:	add	lr, pc, lr
   107b8:	ldr	pc, [lr, #8]!
   107bc:	andeq	r2, r1, r4, asr #16

000107c0 <strtol@plt>:
   107c0:	add	ip, pc, #0, 12
   107c4:	add	ip, ip, #73728	; 0x12000
   107c8:	ldr	pc, [ip, #2116]!	; 0x844

000107cc <free@plt>:
   107cc:	add	ip, pc, #0, 12
   107d0:	add	ip, ip, #73728	; 0x12000
   107d4:	ldr	pc, [ip, #2108]!	; 0x83c

000107d8 <fgets@plt>:
   107d8:	add	ip, pc, #0, 12
   107dc:	add	ip, ip, #73728	; 0x12000
   107e0:	ldr	pc, [ip, #2100]!	; 0x834

000107e4 <dcgettext@plt>:
   107e4:	add	ip, pc, #0, 12
   107e8:	add	ip, ip, #73728	; 0x12000
   107ec:	ldr	pc, [ip, #2092]!	; 0x82c

000107f0 <__stack_chk_fail@plt>:
   107f0:	add	ip, pc, #0, 12
   107f4:	add	ip, ip, #73728	; 0x12000
   107f8:	ldr	pc, [ip, #2084]!	; 0x824

000107fc <sysconf@plt>:
   107fc:	add	ip, pc, #0, 12
   10800:	add	ip, ip, #73728	; 0x12000
   10804:	ldr	pc, [ip, #2076]!	; 0x81c

00010808 <textdomain@plt>:
   10808:	add	ip, pc, #0, 12
   1080c:	add	ip, ip, #73728	; 0x12000
   10810:	ldr	pc, [ip, #2068]!	; 0x814

00010814 <perror@plt>:
   10814:	add	ip, pc, #0, 12
   10818:	add	ip, ip, #73728	; 0x12000
   1081c:	ldr	pc, [ip, #2060]!	; 0x80c

00010820 <__asprintf_chk@plt>:
   10820:	add	ip, pc, #0, 12
   10824:	add	ip, ip, #73728	; 0x12000
   10828:	ldr	pc, [ip, #2052]!	; 0x804

0001082c <malloc@plt>:
   1082c:	add	ip, pc, #0, 12
   10830:	add	ip, ip, #73728	; 0x12000
   10834:	ldr	pc, [ip, #2044]!	; 0x7fc

00010838 <__libc_start_main@plt>:
   10838:	add	ip, pc, #0, 12
   1083c:	add	ip, ip, #73728	; 0x12000
   10840:	ldr	pc, [ip, #2036]!	; 0x7f4

00010844 <strerror@plt>:
   10844:	add	ip, pc, #0, 12
   10848:	add	ip, ip, #73728	; 0x12000
   1084c:	ldr	pc, [ip, #2028]!	; 0x7ec

00010850 <__gmon_start__@plt>:
   10850:	add	ip, pc, #0, 12
   10854:	add	ip, ip, #73728	; 0x12000
   10858:	ldr	pc, [ip, #2020]!	; 0x7e4

0001085c <getopt_long@plt>:
   1085c:	add	ip, pc, #0, 12
   10860:	add	ip, ip, #73728	; 0x12000
   10864:	ldr	pc, [ip, #2012]!	; 0x7dc

00010868 <exit@plt>:
   10868:	add	ip, pc, #0, 12
   1086c:	add	ip, ip, #73728	; 0x12000
   10870:	ldr	pc, [ip, #2004]!	; 0x7d4

00010874 <strchr@plt>:
   10874:	add	ip, pc, #0, 12
   10878:	add	ip, ip, #73728	; 0x12000
   1087c:	ldr	pc, [ip, #1996]!	; 0x7cc

00010880 <__errno_location@plt>:
   10880:	add	ip, pc, #0, 12
   10884:	add	ip, ip, #73728	; 0x12000
   10888:	ldr	pc, [ip, #1988]!	; 0x7c4

0001088c <__sprintf_chk@plt>:
   1088c:	add	ip, pc, #0, 12
   10890:	add	ip, ip, #73728	; 0x12000
   10894:	ldr	pc, [ip, #1980]!	; 0x7bc

00010898 <__printf_chk@plt>:
   10898:	add	ip, pc, #0, 12
   1089c:	add	ip, ip, #73728	; 0x12000
   108a0:	ldr	pc, [ip, #1972]!	; 0x7b4

000108a4 <__fprintf_chk@plt>:
   108a4:	add	ip, pc, #0, 12
   108a8:	add	ip, ip, #73728	; 0x12000
   108ac:	ldr	pc, [ip, #1964]!	; 0x7ac

000108b0 <fclose@plt>:
   108b0:	add	ip, pc, #0, 12
   108b4:	add	ip, ip, #73728	; 0x12000
   108b8:	ldr	pc, [ip, #1956]!	; 0x7a4

000108bc <setlocale@plt>:
   108bc:	add	ip, pc, #0, 12
   108c0:	add	ip, ip, #73728	; 0x12000
   108c4:	ldr	pc, [ip, #1948]!	; 0x79c

000108c8 <sscanf@plt>:
   108c8:	add	ip, pc, #0, 12
   108cc:	add	ip, ip, #73728	; 0x12000
   108d0:	ldr	pc, [ip, #1940]!	; 0x794

000108d4 <fopen64@plt>:
   108d4:	add	ip, pc, #0, 12
   108d8:	add	ip, ip, #73728	; 0x12000
   108dc:	ldr	pc, [ip, #1932]!	; 0x78c

000108e0 <bindtextdomain@plt>:
   108e0:	add	ip, pc, #0, 12
   108e4:	add	ip, ip, #73728	; 0x12000
   108e8:	ldr	pc, [ip, #1924]!	; 0x784

000108ec <__xstat64@plt>:
   108ec:	add	ip, pc, #0, 12
   108f0:	add	ip, ip, #73728	; 0x12000
   108f4:	ldr	pc, [ip, #1916]!	; 0x77c

000108f8 <abort@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #73728	; 0x12000
   10900:	ldr	pc, [ip, #1908]!	; 0x774

00010904 <__assert_fail@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #73728	; 0x12000
   1090c:	ldr	pc, [ip, #1900]!	; 0x76c

Disassembly of section .text:

00010910 <.text>:
   10910:	push	{r4, r5, r6, r7, r8, r9, lr}
   10914:	mov	r6, r0
   10918:	ldr	lr, [pc, #504]	; 10b18 <__assert_fail@plt+0x214>
   1091c:	mov	r4, r1
   10920:	sub	sp, sp, #172	; 0xac
   10924:	ldm	lr!, {r0, r1, r2, r3}
   10928:	add	ip, sp, #116	; 0x74
   1092c:	ldr	r7, [pc, #488]	; 10b1c <__assert_fail@plt+0x218>
   10930:	mov	r5, #0
   10934:	stmia	ip!, {r0, r1, r2, r3}
   10938:	mov	r9, r5
   1093c:	ldm	lr!, {r0, r1, r2, r3}
   10940:	ldr	r8, [pc, #472]	; 10b20 <__assert_fail@plt+0x21c>
   10944:	stmia	ip!, {r0, r1, r2, r3}
   10948:	ldm	lr, {r0, r1, r2, r3}
   1094c:	ldr	lr, [r7]
   10950:	stm	ip, {r0, r1, r2, r3}
   10954:	mov	r0, #6
   10958:	ldr	r1, [pc, #452]	; 10b24 <__assert_fail@plt+0x220>
   1095c:	str	lr, [sp, #164]	; 0xa4
   10960:	bl	108bc <setlocale@plt>
   10964:	ldr	r1, [pc, #444]	; 10b28 <__assert_fail@plt+0x224>
   10968:	ldr	r0, [pc, #444]	; 10b2c <__assert_fail@plt+0x228>
   1096c:	bl	108e0 <bindtextdomain@plt>
   10970:	ldr	r0, [pc, #436]	; 10b2c <__assert_fail@plt+0x228>
   10974:	bl	10808 <textdomain@plt>
   10978:	str	r9, [sp]
   1097c:	add	r3, sp, #116	; 0x74
   10980:	mov	r2, r8
   10984:	mov	r1, r4
   10988:	mov	r0, r6
   1098c:	bl	1085c <getopt_long@plt>
   10990:	cmn	r0, #1
   10994:	beq	10a58 <__assert_fail@plt+0x154>
   10998:	cmp	r0, #86	; 0x56
   1099c:	beq	109c8 <__assert_fail@plt+0xc4>
   109a0:	cmp	r0, #114	; 0x72
   109a4:	moveq	r5, #1
   109a8:	beq	10978 <__assert_fail@plt+0x74>
   109ac:	cmp	r0, #63	; 0x3f
   109b0:	bne	10978 <__assert_fail@plt+0x74>
   109b4:	mov	r2, #5
   109b8:	ldr	r1, [pc, #368]	; 10b30 <__assert_fail@plt+0x22c>
   109bc:	mov	r0, #0
   109c0:	bl	107e4 <dcgettext@plt>
   109c4:	bl	10c4c <__assert_fail@plt+0x348>
   109c8:	ldr	r4, [pc, #356]	; 10b34 <__assert_fail@plt+0x230>
   109cc:	mov	r2, #5
   109d0:	ldr	r1, [pc, #352]	; 10b38 <__assert_fail@plt+0x234>
   109d4:	mov	r0, #0
   109d8:	ldr	r5, [r4]
   109dc:	bl	107e4 <dcgettext@plt>
   109e0:	ldr	r3, [pc, #340]	; 10b3c <__assert_fail@plt+0x238>
   109e4:	mov	r1, #1
   109e8:	mov	r2, r0
   109ec:	mov	r0, r5
   109f0:	bl	108a4 <__fprintf_chk@plt>
   109f4:	mov	r2, #5
   109f8:	ldr	r1, [pc, #320]	; 10b40 <__assert_fail@plt+0x23c>
   109fc:	mov	r0, #0
   10a00:	ldr	r5, [r4]
   10a04:	bl	107e4 <dcgettext@plt>
   10a08:	mov	r1, #1
   10a0c:	mov	r2, r0
   10a10:	mov	r0, r5
   10a14:	bl	108a4 <__fprintf_chk@plt>
   10a18:	mov	r2, #5
   10a1c:	ldr	r1, [pc, #288]	; 10b44 <__assert_fail@plt+0x240>
   10a20:	mov	r0, #0
   10a24:	ldr	r4, [r4]
   10a28:	bl	107e4 <dcgettext@plt>
   10a2c:	mov	r1, #1
   10a30:	mov	r2, r0
   10a34:	mov	r0, r4
   10a38:	bl	108a4 <__fprintf_chk@plt>
   10a3c:	ldr	r2, [sp, #164]	; 0xa4
   10a40:	ldr	r3, [r7]
   10a44:	mov	r0, #0
   10a48:	cmp	r2, r3
   10a4c:	bne	10ad0 <__assert_fail@plt+0x1cc>
   10a50:	add	sp, sp, #172	; 0xac
   10a54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10a58:	ldr	r8, [pc, #232]	; 10b48 <__assert_fail@plt+0x244>
   10a5c:	ldr	r3, [r8]
   10a60:	cmp	r3, r6
   10a64:	bge	10b04 <__assert_fail@plt+0x200>
   10a68:	add	r2, sp, #8
   10a6c:	ldr	r1, [pc, #216]	; 10b4c <__assert_fail@plt+0x248>
   10a70:	mov	r0, #3
   10a74:	bl	108ec <__xstat64@plt>
   10a78:	cmn	r0, #1
   10a7c:	beq	10ad4 <__assert_fail@plt+0x1d0>
   10a80:	mov	r0, #2
   10a84:	bl	107fc <sysconf@plt>
   10a88:	ldr	r3, [r8]
   10a8c:	ldr	r2, [pc, #188]	; 10b50 <__assert_fail@plt+0x24c>
   10a90:	cmp	r6, r3
   10a94:	str	r0, [r2, #20]
   10a98:	ble	10a3c <__assert_fail@plt+0x138>
   10a9c:	sub	r2, r3, #-1073741823	; 0xc0000001
   10aa0:	sub	r3, r4, #4
   10aa4:	add	r6, r3, r6, lsl #2
   10aa8:	add	r4, r4, r2, lsl #2
   10aac:	mov	r2, #10
   10ab0:	mov	r1, #0
   10ab4:	ldr	r0, [r4, #4]!
   10ab8:	bl	107c0 <strtol@plt>
   10abc:	mov	r1, r5
   10ac0:	bl	10d4c <__assert_fail@plt+0x448>
   10ac4:	cmp	r4, r6
   10ac8:	bne	10aac <__assert_fail@plt+0x1a8>
   10acc:	b	10a3c <__assert_fail@plt+0x138>
   10ad0:	bl	107f0 <__stack_chk_fail@plt>
   10ad4:	ldr	r3, [pc, #88]	; 10b34 <__assert_fail@plt+0x230>
   10ad8:	mov	r2, #5
   10adc:	ldr	r1, [pc, #112]	; 10b54 <__assert_fail@plt+0x250>
   10ae0:	mov	r0, #0
   10ae4:	ldr	r4, [r3]
   10ae8:	bl	107e4 <dcgettext@plt>
   10aec:	mov	r1, #1
   10af0:	mov	r2, r0
   10af4:	mov	r0, r4
   10af8:	bl	108a4 <__fprintf_chk@plt>
   10afc:	mov	r0, #1
   10b00:	bl	10868 <exit@plt>
   10b04:	mov	r2, #5
   10b08:	ldr	r1, [pc, #72]	; 10b58 <__assert_fail@plt+0x254>
   10b0c:	mov	r0, #0
   10b10:	bl	107e4 <dcgettext@plt>
   10b14:	bl	10c4c <__assert_fail@plt+0x348>
   10b18:	andeq	r1, r1, r8, lsr #18
   10b1c:	andeq	r2, r2, r8, lsl #30
   10b20:	andeq	r2, r1, r4, lsl r3
   10b24:	muleq	r1, r4, sl
   10b28:			; <UNDEFINED> instruction: 0x000121bc
   10b2c:	ldrdeq	r2, [r1], -r0
   10b30:	andeq	r2, r1, r4, lsl #6
   10b34:	muleq	r2, r0, r0
   10b38:	ldrdeq	r2, [r1], -r8
   10b3c:	strdeq	r2, [r1], -r0
   10b40:	strdeq	r2, [r1], -r8
   10b44:	andeq	r2, r1, r0, lsr #4
   10b48:	andeq	r3, r2, r8, lsl #1
   10b4c:	andeq	r2, r1, ip, lsr r3
   10b50:	muleq	r2, r8, r0
   10b54:	andeq	r2, r1, ip, asr #6
   10b58:	andeq	r2, r1, r8, lsl r3
   10b5c:	mov	fp, #0
   10b60:	mov	lr, #0
   10b64:	pop	{r1}		; (ldr r1, [sp], #4)
   10b68:	mov	r2, sp
   10b6c:	push	{r2}		; (str r2, [sp, #-4]!)
   10b70:	push	{r0}		; (str r0, [sp, #-4]!)
   10b74:	ldr	ip, [pc, #16]	; 10b8c <__assert_fail@plt+0x288>
   10b78:	push	{ip}		; (str ip, [sp, #-4]!)
   10b7c:	ldr	r0, [pc, #12]	; 10b90 <__assert_fail@plt+0x28c>
   10b80:	ldr	r3, [pc, #12]	; 10b94 <__assert_fail@plt+0x290>
   10b84:	bl	10838 <__libc_start_main@plt>
   10b88:	bl	108f8 <abort@plt>
   10b8c:	ldrdeq	r1, [r1], -ip
   10b90:	andeq	r0, r1, r0, lsl r9
   10b94:	andeq	r1, r1, ip, ror r8
   10b98:	ldr	r3, [pc, #20]	; 10bb4 <__assert_fail@plt+0x2b0>
   10b9c:	ldr	r2, [pc, #20]	; 10bb8 <__assert_fail@plt+0x2b4>
   10ba0:	add	r3, pc, r3
   10ba4:	ldr	r2, [r3, r2]
   10ba8:	cmp	r2, #0
   10bac:	bxeq	lr
   10bb0:	b	10850 <__gmon_start__@plt>
   10bb4:	andeq	r2, r1, r8, asr r4
   10bb8:	andeq	r0, r0, ip, ror r0
   10bbc:	ldr	r0, [pc, #24]	; 10bdc <__assert_fail@plt+0x2d8>
   10bc0:	ldr	r3, [pc, #24]	; 10be0 <__assert_fail@plt+0x2dc>
   10bc4:	cmp	r3, r0
   10bc8:	bxeq	lr
   10bcc:	ldr	r3, [pc, #16]	; 10be4 <__assert_fail@plt+0x2e0>
   10bd0:	cmp	r3, #0
   10bd4:	bxeq	lr
   10bd8:	bx	r3
   10bdc:	andeq	r3, r2, r8, lsl #1
   10be0:	andeq	r3, r2, r8, lsl #1
   10be4:	andeq	r0, r0, r0
   10be8:	ldr	r0, [pc, #36]	; 10c14 <__assert_fail@plt+0x310>
   10bec:	ldr	r1, [pc, #36]	; 10c18 <__assert_fail@plt+0x314>
   10bf0:	sub	r1, r1, r0
   10bf4:	asr	r1, r1, #2
   10bf8:	add	r1, r1, r1, lsr #31
   10bfc:	asrs	r1, r1, #1
   10c00:	bxeq	lr
   10c04:	ldr	r3, [pc, #16]	; 10c1c <__assert_fail@plt+0x318>
   10c08:	cmp	r3, #0
   10c0c:	bxeq	lr
   10c10:	bx	r3
   10c14:	andeq	r3, r2, r8, lsl #1
   10c18:	andeq	r3, r2, r8, lsl #1
   10c1c:	andeq	r0, r0, r0
   10c20:	push	{r4, lr}
   10c24:	ldr	r4, [pc, #24]	; 10c44 <__assert_fail@plt+0x340>
   10c28:	ldrb	r3, [r4]
   10c2c:	cmp	r3, #0
   10c30:	popne	{r4, pc}
   10c34:	bl	10bbc <__assert_fail@plt+0x2b8>
   10c38:	mov	r3, #1
   10c3c:	strb	r3, [r4]
   10c40:	pop	{r4, pc}
   10c44:	muleq	r2, r4, r0
   10c48:	b	10be8 <__assert_fail@plt+0x2e4>
   10c4c:	subs	r3, r0, #0
   10c50:	push	{r4, lr}
   10c54:	ldr	r4, [pc, #60]	; 10c98 <__assert_fail@plt+0x394>
   10c58:	beq	10c6c <__assert_fail@plt+0x368>
   10c5c:	ldr	r2, [pc, #56]	; 10c9c <__assert_fail@plt+0x398>
   10c60:	ldr	r0, [r4]
   10c64:	mov	r1, #1
   10c68:	bl	108a4 <__fprintf_chk@plt>
   10c6c:	mov	r2, #5
   10c70:	ldr	r1, [pc, #40]	; 10ca0 <__assert_fail@plt+0x39c>
   10c74:	mov	r0, #0
   10c78:	ldr	r4, [r4]
   10c7c:	bl	107e4 <dcgettext@plt>
   10c80:	mov	r1, #1
   10c84:	mov	r2, r0
   10c88:	mov	r0, r4
   10c8c:	bl	108a4 <__fprintf_chk@plt>
   10c90:	mov	r0, #1
   10c94:	bl	10868 <exit@plt>
   10c98:	muleq	r2, r0, r0
   10c9c:			; <UNDEFINED> instruction: 0x00011bb4
   10ca0:	andeq	r1, r1, r8, asr r9
   10ca4:	ldr	r3, [pc, #132]	; 10d30 <__assert_fail@plt+0x42c>
   10ca8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cac:	cmp	r1, r3
   10cb0:	sub	sp, sp, #12
   10cb4:	bhi	10d08 <__assert_fail@plt+0x404>
   10cb8:	ldr	r3, [pc, #116]	; 10d34 <__assert_fail@plt+0x430>
   10cbc:	cmp	r1, r3
   10cc0:	bhi	10ce0 <__assert_fail@plt+0x3dc>
   10cc4:	str	r1, [sp]
   10cc8:	ldr	r3, [pc, #104]	; 10d38 <__assert_fail@plt+0x434>
   10ccc:	mvn	r2, #0
   10cd0:	mov	r1, #1
   10cd4:	bl	1088c <__sprintf_chk@plt>
   10cd8:	add	sp, sp, #12
   10cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   10ce0:	ldr	ip, [pc, #84]	; 10d3c <__assert_fail@plt+0x438>
   10ce4:	ldr	r3, [pc, #84]	; 10d40 <__assert_fail@plt+0x43c>
   10ce8:	mvn	r2, #0
   10cec:	umull	r1, ip, ip, r1
   10cf0:	mov	r1, #1
   10cf4:	lsr	ip, ip, #6
   10cf8:	str	ip, [sp]
   10cfc:	bl	1088c <__sprintf_chk@plt>
   10d00:	add	sp, sp, #12
   10d04:	pop	{pc}		; (ldr pc, [sp], #4)
   10d08:	ldr	ip, [pc, #52]	; 10d44 <__assert_fail@plt+0x440>
   10d0c:	ldr	r3, [pc, #52]	; 10d48 <__assert_fail@plt+0x444>
   10d10:	mvn	r2, #0
   10d14:	umull	r1, ip, ip, r1
   10d18:	mov	r1, #1
   10d1c:	lsr	ip, ip, #18
   10d20:	str	ip, [sp]
   10d24:	bl	1088c <__sprintf_chk@plt>
   10d28:	add	sp, sp, #12
   10d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   10d30:	addseq	r9, r8, r0, lsl #13
   10d34:	andeq	r2, r0, r0, lsl r7
   10d38:	andeq	r1, r1, r4, lsr #20
   10d3c:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   10d40:	andeq	r1, r1, ip, lsl sl
   10d44:	tstmi	fp, #2096	; 0x830
   10d48:	andeq	r1, r1, r4, lsl sl
   10d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d50:	sub	sp, sp, #8640	; 0x21c0
   10d54:	ldr	r5, [pc, #2512]	; 1172c <__assert_fail@plt+0xe28>
   10d58:	sub	sp, sp, #28
   10d5c:	add	lr, sp, #8640	; 0x21c0
   10d60:	ldr	ip, [r5]
   10d64:	add	lr, lr, #20
   10d68:	mov	r3, r0
   10d6c:	mov	r6, r0
   10d70:	mov	r9, r1
   10d74:	add	r0, sp, #164	; 0xa4
   10d78:	ldr	r2, [pc, #2480]	; 11730 <__assert_fail@plt+0xe2c>
   10d7c:	mov	r1, #1
   10d80:	str	ip, [lr]
   10d84:	bl	10820 <__asprintf_chk@plt>
   10d88:	cmp	r0, #0
   10d8c:	blt	116e8 <__assert_fail@plt+0xde4>
   10d90:	ldr	r1, [pc, #2460]	; 11734 <__assert_fail@plt+0xe30>
   10d94:	ldr	r0, [sp, #164]	; 0xa4
   10d98:	bl	108d4 <fopen64@plt>
   10d9c:	subs	r4, r0, #0
   10da0:	beq	11250 <__assert_fail@plt+0x94c>
   10da4:	add	r3, sp, #468	; 0x1d4
   10da8:	ldr	r0, [sp, #164]	; 0xa4
   10dac:	str	r3, [sp, #152]	; 0x98
   10db0:	bl	107cc <free@plt>
   10db4:	ldr	r0, [sp, #152]	; 0x98
   10db8:	mov	r2, r4
   10dbc:	mov	r1, #8192	; 0x2000
   10dc0:	bl	107d8 <fgets@plt>
   10dc4:	cmp	r0, #0
   10dc8:	mov	r0, r4
   10dcc:	beq	112f8 <__assert_fail@plt+0x9f4>
   10dd0:	bl	108b0 <fclose@plt>
   10dd4:	ldr	r0, [sp, #152]	; 0x98
   10dd8:	mov	r1, #40	; 0x28
   10ddc:	bl	10874 <strchr@plt>
   10de0:	subs	r7, r0, #0
   10de4:	beq	112a8 <__assert_fail@plt+0x9a4>
   10de8:	mov	r0, #168	; 0xa8
   10dec:	bl	1082c <malloc@plt>
   10df0:	add	r7, r7, #1
   10df4:	subs	r4, r0, #0
   10df8:	beq	113c0 <__assert_fail@plt+0xabc>
   10dfc:	mov	r3, r4
   10e00:	add	ip, r4, #144	; 0x90
   10e04:	add	r1, r4, #112	; 0x70
   10e08:	mov	r8, #0
   10e0c:	str	r8, [r3], #4
   10e10:	add	r2, r4, #160	; 0xa0
   10e14:	str	ip, [sp, #144]	; 0x90
   10e18:	str	r1, [sp, #140]	; 0x8c
   10e1c:	add	ip, r4, #44	; 0x2c
   10e20:	add	r1, r4, #32
   10e24:	str	r2, [sp, #136]	; 0x88
   10e28:	str	ip, [sp, #132]	; 0x84
   10e2c:	add	r2, r4, #28
   10e30:	add	ip, r4, #108	; 0x6c
   10e34:	str	r1, [sp, #124]	; 0x7c
   10e38:	add	r1, r4, #104	; 0x68
   10e3c:	str	r2, [sp, #120]	; 0x78
   10e40:	str	ip, [sp, #116]	; 0x74
   10e44:	add	r2, r4, #100	; 0x64
   10e48:	add	ip, r4, #96	; 0x60
   10e4c:	str	r1, [sp, #112]	; 0x70
   10e50:	add	r1, r4, #92	; 0x5c
   10e54:	str	r2, [sp, #108]	; 0x6c
   10e58:	str	ip, [sp, #104]	; 0x68
   10e5c:	add	r2, r4, #88	; 0x58
   10e60:	add	ip, r4, #84	; 0x54
   10e64:	str	r1, [sp, #100]	; 0x64
   10e68:	add	r1, r4, #80	; 0x50
   10e6c:	str	r2, [sp, #96]	; 0x60
   10e70:	str	ip, [sp, #92]	; 0x5c
   10e74:	add	r2, r4, #76	; 0x4c
   10e78:	add	ip, r4, #140	; 0x8c
   10e7c:	str	r1, [sp, #88]	; 0x58
   10e80:	add	r1, r4, #72	; 0x48
   10e84:	str	r2, [sp, #84]	; 0x54
   10e88:	str	ip, [sp, #80]	; 0x50
   10e8c:	add	r2, r4, #152	; 0x98
   10e90:	add	ip, r4, #136	; 0x88
   10e94:	str	r1, [sp, #76]	; 0x4c
   10e98:	add	r1, r4, #132	; 0x84
   10e9c:	str	r2, [sp, #72]	; 0x48
   10ea0:	str	ip, [sp, #68]	; 0x44
   10ea4:	add	r2, r4, #128	; 0x80
   10ea8:	add	ip, r4, #124	; 0x7c
   10eac:	str	r1, [sp, #64]	; 0x40
   10eb0:	add	r1, r4, #120	; 0x78
   10eb4:	str	r2, [sp, #60]	; 0x3c
   10eb8:	str	ip, [sp, #56]	; 0x38
   10ebc:	add	r2, r4, #116	; 0x74
   10ec0:	add	ip, r4, #68	; 0x44
   10ec4:	str	r1, [sp, #52]	; 0x34
   10ec8:	add	r1, r4, #64	; 0x40
   10ecc:	str	r2, [sp, #48]	; 0x30
   10ed0:	str	ip, [sp, #44]	; 0x2c
   10ed4:	add	r2, r4, #60	; 0x3c
   10ed8:	add	ip, r4, #56	; 0x38
   10edc:	str	r1, [sp, #40]	; 0x28
   10ee0:	add	r1, r4, #52	; 0x34
   10ee4:	add	lr, r4, #40	; 0x28
   10ee8:	str	r2, [sp, #36]	; 0x24
   10eec:	str	ip, [sp, #32]
   10ef0:	add	r2, r4, #48	; 0x30
   10ef4:	add	ip, r4, #36	; 0x24
   10ef8:	str	r1, [sp, #28]
   10efc:	add	r1, r4, #24
   10f00:	str	lr, [sp, #128]	; 0x80
   10f04:	str	r2, [sp, #24]
   10f08:	str	ip, [sp, #20]
   10f0c:	add	r2, r4, #20
   10f10:	add	ip, r4, #16
   10f14:	str	r1, [sp, #16]
   10f18:	add	r1, r4, #12
   10f1c:	str	r2, [sp, #12]
   10f20:	add	r2, r4, #8
   10f24:	stmib	sp, {r1, ip}
   10f28:	str	r2, [sp]
   10f2c:	mov	r0, r7
   10f30:	mov	r2, r4
   10f34:	ldr	r1, [pc, #2044]	; 11738 <__assert_fail@plt+0xe34>
   10f38:	bl	108c8 <sscanf@plt>
   10f3c:	cmp	r0, #39	; 0x27
   10f40:	bne	112cc <__assert_fail@plt+0x9c8>
   10f44:	cmp	r9, r8
   10f48:	beq	11320 <__assert_fail@plt+0xa1c>
   10f4c:	ldr	r1, [r4]
   10f50:	ldr	r2, [pc, #2020]	; 1173c <__assert_fail@plt+0xe38>
   10f54:	mov	r3, r6
   10f58:	str	r1, [sp, #4]
   10f5c:	str	r2, [sp]
   10f60:	ldr	r1, [pc, #2008]	; 11740 <__assert_fail@plt+0xe3c>
   10f64:	ldr	r2, [pc, #2008]	; 11744 <__assert_fail@plt+0xe40>
   10f68:	mov	r0, #1
   10f6c:	bl	10898 <__printf_chk@plt>
   10f70:	ldr	r2, [r4, #8]
   10f74:	ldr	r3, [pc, #1996]	; 11748 <__assert_fail@plt+0xe44>
   10f78:	str	r2, [sp, #4]
   10f7c:	str	r3, [sp]
   10f80:	ldr	r2, [pc, #1988]	; 1174c <__assert_fail@plt+0xe48>
   10f84:	ldrb	r3, [r4, #4]
   10f88:	ldr	r1, [pc, #1984]	; 11750 <__assert_fail@plt+0xe4c>
   10f8c:	mov	r0, #1
   10f90:	bl	10898 <__printf_chk@plt>
   10f94:	ldr	r2, [r4, #16]
   10f98:	ldr	r3, [pc, #1972]	; 11754 <__assert_fail@plt+0xe50>
   10f9c:	str	r2, [sp, #4]
   10fa0:	str	r3, [sp]
   10fa4:	ldr	r2, [pc, #1964]	; 11758 <__assert_fail@plt+0xe54>
   10fa8:	ldr	r3, [r4, #12]
   10fac:	ldr	r1, [pc, #1960]	; 1175c <__assert_fail@plt+0xe58>
   10fb0:	mov	r0, #1
   10fb4:	bl	10898 <__printf_chk@plt>
   10fb8:	ldr	r2, [r4, #24]
   10fbc:	ldr	r3, [pc, #1948]	; 11760 <__assert_fail@plt+0xe5c>
   10fc0:	str	r2, [sp, #4]
   10fc4:	str	r3, [sp]
   10fc8:	ldr	r2, [pc, #1940]	; 11764 <__assert_fail@plt+0xe60>
   10fcc:	ldr	r3, [r4, #20]
   10fd0:	ldr	r1, [pc, #1924]	; 1175c <__assert_fail@plt+0xe58>
   10fd4:	mov	r0, #1
   10fd8:	bl	10898 <__printf_chk@plt>
   10fdc:	ldr	r2, [r4, #48]	; 0x30
   10fe0:	ldr	r3, [pc, #1920]	; 11768 <__assert_fail@plt+0xe64>
   10fe4:	str	r2, [sp, #4]
   10fe8:	str	r3, [sp]
   10fec:	ldr	r2, [pc, #1912]	; 1176c <__assert_fail@plt+0xe68>
   10ff0:	ldr	r3, [r4, #36]	; 0x24
   10ff4:	ldr	r1, [pc, #1908]	; 11770 <__assert_fail@plt+0xe6c>
   10ff8:	mov	r0, #1
   10ffc:	bl	10898 <__printf_chk@plt>
   11000:	ldr	r2, [r4, #56]	; 0x38
   11004:	ldr	r3, [pc, #1896]	; 11774 <__assert_fail@plt+0xe70>
   11008:	str	r2, [sp, #4]
   1100c:	str	r3, [sp]
   11010:	ldr	r2, [pc, #1888]	; 11778 <__assert_fail@plt+0xe74>
   11014:	ldr	r3, [r4, #52]	; 0x34
   11018:	ldr	r1, [pc, #1884]	; 1177c <__assert_fail@plt+0xe78>
   1101c:	mov	r0, #1
   11020:	bl	10898 <__printf_chk@plt>
   11024:	ldr	r2, [r4, #64]	; 0x40
   11028:	ldr	r3, [pc, #1872]	; 11780 <__assert_fail@plt+0xe7c>
   1102c:	str	r2, [sp, #4]
   11030:	str	r3, [sp]
   11034:	ldr	r2, [pc, #1864]	; 11784 <__assert_fail@plt+0xe80>
   11038:	ldr	r3, [r4, #60]	; 0x3c
   1103c:	ldr	r1, [pc, #1848]	; 1177c <__assert_fail@plt+0xe78>
   11040:	mov	r0, #1
   11044:	bl	10898 <__printf_chk@plt>
   11048:	ldr	r2, [r4, #116]	; 0x74
   1104c:	ldr	r3, [pc, #1844]	; 11788 <__assert_fail@plt+0xe84>
   11050:	str	r2, [sp, #4]
   11054:	str	r3, [sp]
   11058:	ldr	r2, [pc, #1836]	; 1178c <__assert_fail@plt+0xe88>
   1105c:	ldr	r3, [r4, #68]	; 0x44
   11060:	ldr	r1, [pc, #1832]	; 11790 <__assert_fail@plt+0xe8c>
   11064:	mov	r0, #1
   11068:	bl	10898 <__printf_chk@plt>
   1106c:	ldr	r2, [r4, #124]	; 0x7c
   11070:	ldr	r3, [pc, #1820]	; 11794 <__assert_fail@plt+0xe90>
   11074:	str	r2, [sp, #4]
   11078:	str	r3, [sp]
   1107c:	ldr	r2, [pc, #1812]	; 11798 <__assert_fail@plt+0xe94>
   11080:	ldr	r3, [r4, #120]	; 0x78
   11084:	ldr	r1, [pc, #1808]	; 1179c <__assert_fail@plt+0xe98>
   11088:	mov	r0, #1
   1108c:	bl	10898 <__printf_chk@plt>
   11090:	ldr	r2, [r4, #132]	; 0x84
   11094:	ldr	r3, [pc, #1796]	; 117a0 <__assert_fail@plt+0xe9c>
   11098:	str	r2, [sp, #4]
   1109c:	str	r3, [sp]
   110a0:	ldr	r2, [pc, #1788]	; 117a4 <__assert_fail@plt+0xea0>
   110a4:	ldr	r3, [r4, #128]	; 0x80
   110a8:	ldr	r1, [pc, #1772]	; 1179c <__assert_fail@plt+0xe98>
   110ac:	mov	r0, #1
   110b0:	bl	10898 <__printf_chk@plt>
   110b4:	ldrd	r0, [r4, #152]	; 0x98
   110b8:	ldr	r3, [pc, #1768]	; 117a8 <__assert_fail@plt+0xea4>
   110bc:	ldr	r2, [pc, #1768]	; 117ac <__assert_fail@plt+0xea8>
   110c0:	strd	r0, [sp, #8]
   110c4:	str	r3, [sp]
   110c8:	ldr	r1, [pc, #1760]	; 117b0 <__assert_fail@plt+0xeac>
   110cc:	ldr	r3, [r4, #136]	; 0x88
   110d0:	mov	r0, #1
   110d4:	bl	10898 <__printf_chk@plt>
   110d8:	ldr	r2, [r4, #140]	; 0x8c
   110dc:	ldr	r3, [pc, #1744]	; 117b4 <__assert_fail@plt+0xeb0>
   110e0:	str	r2, [sp, #4]
   110e4:	str	r3, [sp]
   110e8:	ldr	r2, [pc, #1736]	; 117b8 <__assert_fail@plt+0xeb4>
   110ec:	ldr	r3, [r4, #72]	; 0x48
   110f0:	ldr	r1, [pc, #1688]	; 11790 <__assert_fail@plt+0xe8c>
   110f4:	mov	r0, #1
   110f8:	bl	10898 <__printf_chk@plt>
   110fc:	ldr	r2, [r4, #80]	; 0x50
   11100:	ldr	r3, [pc, #1716]	; 117bc <__assert_fail@plt+0xeb8>
   11104:	str	r2, [sp, #4]
   11108:	str	r3, [sp]
   1110c:	ldr	r2, [pc, #1708]	; 117c0 <__assert_fail@plt+0xebc>
   11110:	ldr	r3, [r4, #76]	; 0x4c
   11114:	ldr	r1, [pc, #1632]	; 1177c <__assert_fail@plt+0xe78>
   11118:	mov	r0, #1
   1111c:	bl	10898 <__printf_chk@plt>
   11120:	ldr	r2, [r4, #88]	; 0x58
   11124:	ldr	r3, [pc, #1688]	; 117c4 <__assert_fail@plt+0xec0>
   11128:	str	r2, [sp, #4]
   1112c:	str	r3, [sp]
   11130:	ldr	r2, [pc, #1680]	; 117c8 <__assert_fail@plt+0xec4>
   11134:	ldr	r3, [r4, #84]	; 0x54
   11138:	ldr	r1, [pc, #1596]	; 1177c <__assert_fail@plt+0xe78>
   1113c:	mov	r0, #1
   11140:	bl	10898 <__printf_chk@plt>
   11144:	ldr	r2, [r4, #96]	; 0x60
   11148:	ldr	r3, [pc, #1660]	; 117cc <__assert_fail@plt+0xec8>
   1114c:	str	r2, [sp, #4]
   11150:	str	r3, [sp]
   11154:	ldr	r2, [pc, #1652]	; 117d0 <__assert_fail@plt+0xecc>
   11158:	ldr	r3, [r4, #92]	; 0x5c
   1115c:	ldr	r1, [pc, #1648]	; 117d4 <__assert_fail@plt+0xed0>
   11160:	mov	r0, #1
   11164:	bl	10898 <__printf_chk@plt>
   11168:	ldr	r2, [r4, #104]	; 0x68
   1116c:	ldr	r3, [pc, #1636]	; 117d8 <__assert_fail@plt+0xed4>
   11170:	str	r2, [sp, #4]
   11174:	str	r3, [sp]
   11178:	ldr	r2, [pc, #1628]	; 117dc <__assert_fail@plt+0xed8>
   1117c:	ldr	r3, [r4, #100]	; 0x64
   11180:	ldr	r1, [pc, #1524]	; 1177c <__assert_fail@plt+0xe78>
   11184:	mov	r0, #1
   11188:	bl	10898 <__printf_chk@plt>
   1118c:	ldr	r2, [r4, #28]
   11190:	ldr	r3, [pc, #1608]	; 117e0 <__assert_fail@plt+0xedc>
   11194:	str	r2, [sp, #4]
   11198:	str	r3, [sp]
   1119c:	ldr	r2, [pc, #1600]	; 117e4 <__assert_fail@plt+0xee0>
   111a0:	ldr	r3, [r4, #100]	; 0x64
   111a4:	ldr	r1, [pc, #1596]	; 117e8 <__assert_fail@plt+0xee4>
   111a8:	mov	r0, #1
   111ac:	bl	10898 <__printf_chk@plt>
   111b0:	ldr	r2, [r4, #40]	; 0x28
   111b4:	ldr	r3, [pc, #1584]	; 117ec <__assert_fail@plt+0xee8>
   111b8:	str	r2, [sp, #4]
   111bc:	str	r3, [sp]
   111c0:	ldr	r2, [pc, #1576]	; 117f0 <__assert_fail@plt+0xeec>
   111c4:	ldr	r3, [r4, #32]
   111c8:	ldr	r1, [pc, #1572]	; 117f4 <__assert_fail@plt+0xef0>
   111cc:	mov	r0, #1
   111d0:	bl	10898 <__printf_chk@plt>
   111d4:	ldrd	r0, [r4, #160]	; 0xa0
   111d8:	ldr	r3, [pc, #1560]	; 117f8 <__assert_fail@plt+0xef4>
   111dc:	ldr	r2, [pc, #1560]	; 117fc <__assert_fail@plt+0xef8>
   111e0:	strd	r0, [sp, #8]
   111e4:	str	r3, [sp]
   111e8:	ldr	r1, [pc, #1552]	; 11800 <__assert_fail@plt+0xefc>
   111ec:	ldr	r3, [r4, #44]	; 0x2c
   111f0:	mov	r0, #1
   111f4:	bl	10898 <__printf_chk@plt>
   111f8:	ldr	r2, [r4, #144]	; 0x90
   111fc:	ldr	r3, [pc, #1536]	; 11804 <__assert_fail@plt+0xf00>
   11200:	str	r2, [sp, #4]
   11204:	str	r3, [sp]
   11208:	ldr	r2, [pc, #1528]	; 11808 <__assert_fail@plt+0xf04>
   1120c:	ldr	r3, [r4, #112]	; 0x70
   11210:	ldr	r1, [pc, #1400]	; 11790 <__assert_fail@plt+0xe8c>
   11214:	mov	r0, #1
   11218:	bl	10898 <__printf_chk@plt>
   1121c:	ldr	r0, [r4]
   11220:	bl	107cc <free@plt>
   11224:	add	r3, sp, #8640	; 0x21c0
   11228:	add	r3, r3, #20
   1122c:	ldr	r2, [r3]
   11230:	ldr	r3, [r5]
   11234:	cmp	r2, r3
   11238:	bne	116e4 <__assert_fail@plt+0xde0>
   1123c:	mov	r0, r4
   11240:	add	sp, sp, #8640	; 0x21c0
   11244:	add	sp, sp, #28
   11248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1124c:	b	107cc <free@plt>
   11250:	bl	10880 <__errno_location@plt>
   11254:	ldr	r3, [pc, #1456]	; 1180c <__assert_fail@plt+0xf08>
   11258:	ldr	r8, [r3]
   1125c:	ldr	r2, [r0]
   11260:	mov	r7, r0
   11264:	cmp	r2, #2
   11268:	mov	r0, r4
   1126c:	mov	r2, #5
   11270:	beq	11300 <__assert_fail@plt+0x9fc>
   11274:	ldr	r1, [pc, #1428]	; 11810 <__assert_fail@plt+0xf0c>
   11278:	bl	107e4 <dcgettext@plt>
   1127c:	mov	r4, r0
   11280:	ldr	r0, [r7]
   11284:	bl	10844 <strerror@plt>
   11288:	mov	r2, r4
   1128c:	mov	r3, r6
   11290:	mov	r1, #1
   11294:	str	r0, [sp]
   11298:	mov	r0, r8
   1129c:	bl	108a4 <__fprintf_chk@plt>
   112a0:	ldr	r0, [sp, #164]	; 0xa4
   112a4:	bl	107cc <free@plt>
   112a8:	add	r3, sp, #8640	; 0x21c0
   112ac:	add	r3, r3, #20
   112b0:	ldr	r2, [r3]
   112b4:	ldr	r3, [r5]
   112b8:	cmp	r2, r3
   112bc:	bne	116e4 <__assert_fail@plt+0xde0>
   112c0:	add	sp, sp, #8640	; 0x21c0
   112c4:	add	sp, sp, #28
   112c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112cc:	ldr	r3, [pc, #1336]	; 1180c <__assert_fail@plt+0xf08>
   112d0:	mov	r0, r8
   112d4:	mov	r2, #5
   112d8:	ldr	r1, [pc, #1332]	; 11814 <__assert_fail@plt+0xf10>
   112dc:	ldr	r6, [r3]
   112e0:	bl	107e4 <dcgettext@plt>
   112e4:	mov	r1, #1
   112e8:	mov	r2, r0
   112ec:	mov	r0, r6
   112f0:	bl	108a4 <__fprintf_chk@plt>
   112f4:	b	1121c <__assert_fail@plt+0x918>
   112f8:	bl	108b0 <fclose@plt>
   112fc:	b	112a8 <__assert_fail@plt+0x9a4>
   11300:	ldr	r1, [pc, #1296]	; 11818 <__assert_fail@plt+0xf14>
   11304:	bl	107e4 <dcgettext@plt>
   11308:	mov	r3, r6
   1130c:	mov	r1, #1
   11310:	mov	r2, r0
   11314:	mov	r0, r8
   11318:	bl	108a4 <__fprintf_chk@plt>
   1131c:	b	112a0 <__assert_fail@plt+0x99c>
   11320:	mov	r0, #30
   11324:	bl	107fc <sysconf@plt>
   11328:	cmp	r0, #1
   1132c:	mov	r8, r0
   11330:	ble	11718 <__assert_fail@plt+0xe14>
   11334:	mov	r0, r9
   11338:	mov	r2, #5
   1133c:	ldr	r1, [pc, #1240]	; 1181c <__assert_fail@plt+0xf18>
   11340:	bl	107e4 <dcgettext@plt>
   11344:	ldrb	r9, [r4, #4]
   11348:	ldr	fp, [r4]
   1134c:	mov	r2, #5
   11350:	sub	r3, r9, #68	; 0x44
   11354:	mov	sl, r0
   11358:	cmp	r3, #22
   1135c:	ldrls	pc, [pc, r3, lsl #2]
   11360:	b	116d0 <__assert_fail@plt+0xdcc>
   11364:			; <UNDEFINED> instruction: 0x000116bc
   11368:	ldrdeq	r1, [r1], -r0
   1136c:	ldrdeq	r1, [r1], -r0
   11370:	ldrdeq	r1, [r1], -r0
   11374:	ldrdeq	r1, [r1], -r0
   11378:	ldrdeq	r1, [r1], -r0
   1137c:	ldrdeq	r1, [r1], -r0
   11380:	ldrdeq	r1, [r1], -r0
   11384:	ldrdeq	r1, [r1], -r0
   11388:	ldrdeq	r1, [r1], -r0
   1138c:	ldrdeq	r1, [r1], -r0
   11390:	ldrdeq	r1, [r1], -r0
   11394:	ldrdeq	r1, [r1], -r0
   11398:	ldrdeq	r1, [r1], -r0
   1139c:	andeq	r1, r1, r8, lsr #13
   113a0:	muleq	r1, r4, r6
   113a4:	andeq	r1, r1, r0, lsl #13
   113a8:	ldrdeq	r1, [r1], -r0
   113ac:	ldrdeq	r1, [r1], -r0
   113b0:	andeq	r1, r1, ip, ror #12
   113b4:	ldrdeq	r1, [r1], -r0
   113b8:	ldrdeq	r1, [r1], -r0
   113bc:	andeq	r1, r1, r8, ror #7
   113c0:	ldr	r3, [pc, #1092]	; 1180c <__assert_fail@plt+0xf08>
   113c4:	mov	r2, #5
   113c8:	ldr	r1, [pc, #1104]	; 11820 <__assert_fail@plt+0xf1c>
   113cc:	ldr	r4, [r3]
   113d0:	bl	107e4 <dcgettext@plt>
   113d4:	mov	r1, #1
   113d8:	mov	r2, r0
   113dc:	mov	r0, r4
   113e0:	bl	108a4 <__fprintf_chk@plt>
   113e4:	b	112a8 <__assert_fail@plt+0x9a4>
   113e8:	ldr	r1, [pc, #1076]	; 11824 <__assert_fail@plt+0xf20>
   113ec:	mov	r0, #0
   113f0:	bl	107e4 <dcgettext@plt>
   113f4:	str	r0, [sp, #156]	; 0x9c
   113f8:	ldr	r1, [r4, #20]
   113fc:	ldr	r3, [r4, #32]
   11400:	ldr	r7, [pc, #1056]	; 11828 <__assert_fail@plt+0xf24>
   11404:	asr	r2, r1, #8
   11408:	str	r3, [sp, #152]	; 0x98
   1140c:	uxtb	r3, r1
   11410:	orr	r3, r3, r1, lsr #20
   11414:	uxtb	r2, r2
   11418:	mov	r1, #1
   1141c:	strd	r2, [sp]
   11420:	mov	r0, r7
   11424:	ldr	r3, [pc, #1024]	; 1182c <__assert_fail@plt+0xf28>
   11428:	mov	r2, #20
   1142c:	bl	1088c <__sprintf_chk@plt>
   11430:	ldr	r0, [r4, #132]	; 0x84
   11434:	ldr	ip, [sp, #152]	; 0x98
   11438:	str	r0, [sp, #12]
   1143c:	ldr	r0, [sp, #156]	; 0x9c
   11440:	str	ip, [sp, #4]
   11444:	mov	r3, r9
   11448:	mov	r2, fp
   1144c:	mov	r1, sl
   11450:	str	r0, [sp]
   11454:	str	r7, [sp, #8]
   11458:	mov	r0, #1
   1145c:	bl	10898 <__printf_chk@plt>
   11460:	mov	r2, #5
   11464:	ldr	r1, [pc, #964]	; 11830 <__assert_fail@plt+0xf2c>
   11468:	mov	r0, #0
   1146c:	bl	107e4 <dcgettext@plt>
   11470:	ldr	r3, [r4, #24]
   11474:	mov	r2, r6
   11478:	str	r3, [sp, #8]
   1147c:	ldr	r3, [r4, #16]
   11480:	str	r3, [sp, #4]
   11484:	ldr	r3, [r4, #12]
   11488:	str	r3, [sp]
   1148c:	ldr	r3, [r4, #8]
   11490:	mov	r1, r0
   11494:	mov	r0, #1
   11498:	bl	10898 <__printf_chk@plt>
   1149c:	mov	r2, #5
   114a0:	ldr	r1, [pc, #908]	; 11834 <__assert_fail@plt+0xf30>
   114a4:	mov	r0, #0
   114a8:	bl	107e4 <dcgettext@plt>
   114ac:	ldr	r3, [r4, #60]	; 0x3c
   114b0:	str	r3, [sp, #4]
   114b4:	ldr	r3, [r4, #52]	; 0x34
   114b8:	str	r3, [sp]
   114bc:	ldr	r3, [r4, #56]	; 0x38
   114c0:	ldr	r2, [r4, #48]	; 0x30
   114c4:	mov	r1, r0
   114c8:	mov	r0, #1
   114cc:	bl	10898 <__printf_chk@plt>
   114d0:	ldr	r1, [pc, #864]	; 11838 <__assert_fail@plt+0xf34>
   114d4:	mov	r2, #5
   114d8:	mov	r0, #0
   114dc:	bl	107e4 <dcgettext@plt>
   114e0:	ldr	r3, [r7, #20]
   114e4:	vldr	s13, [r4, #64]	; 0x40
   114e8:	cmp	r3, #0
   114ec:	mov	r1, r0
   114f0:	ble	11704 <__assert_fail@plt+0xe00>
   114f4:	vldr	s14, [r4, #144]	; 0x90
   114f8:	vmov	s15, r3
   114fc:	vcvt.f32.u32	s13, s13
   11500:	add	r3, sp, #168	; 0xa8
   11504:	vcvt.f32.u32	s14, s14
   11508:	vcvt.f32.s32	s15, s15
   1150c:	str	r3, [sp, #152]	; 0x98
   11510:	mov	r0, #1
   11514:	add	r6, sp, #368	; 0x170
   11518:	vdiv.f32	s12, s14, s15
   1151c:	vdiv.f32	s11, s13, s15
   11520:	vcvt.f64.f32	d6, s12
   11524:	vstr	d6, [sp, #40]	; 0x28
   11528:	vldr	s14, [r4, #120]	; 0x78
   1152c:	vcvt.f64.f32	d5, s11
   11530:	vcvt.f32.u32	s14, s14
   11534:	vmov	r2, r3, d5
   11538:	vdiv.f32	s12, s14, s15
   1153c:	vcvt.f64.f32	d6, s12
   11540:	vstr	d6, [sp, #32]
   11544:	vldr	s14, [r4, #116]	; 0x74
   11548:	vcvt.f32.u32	s14, s14
   1154c:	vdiv.f32	s12, s14, s15
   11550:	vcvt.f64.f32	d6, s12
   11554:	vstr	d6, [sp, #24]
   11558:	vldr	s14, [r4, #160]	; 0xa0
   1155c:	vcvt.f32.u32	s14, s14
   11560:	vdiv.f32	s12, s14, s15
   11564:	vcvt.f64.f32	d6, s12
   11568:	vstr	d6, [sp, #16]
   1156c:	vldr	s14, [r4, #112]	; 0x70
   11570:	vcvt.f32.u32	s14, s14
   11574:	vdiv.f32	s12, s14, s15
   11578:	vcvt.f64.f32	d6, s12
   1157c:	vstr	d6, [sp, #8]
   11580:	vldr	s14, [r4, #68]	; 0x44
   11584:	vcvt.f32.u32	s13, s14
   11588:	vdiv.f32	s14, s13, s15
   1158c:	vcvt.f64.f32	d7, s14
   11590:	vstr	d7, [sp]
   11594:	bl	10898 <__printf_chk@plt>
   11598:	ldr	r0, [sp, #152]	; 0x98
   1159c:	ldr	r1, [r4, #72]	; 0x48
   115a0:	bl	10ca4 <__assert_fail@plt+0x3a0>
   115a4:	ldr	r1, [r4, #140]	; 0x8c
   115a8:	add	r0, sp, #268	; 0x10c
   115ac:	mul	r1, r1, r8
   115b0:	bl	10ca4 <__assert_fail@plt+0x3a0>
   115b4:	mov	r0, r6
   115b8:	ldr	r1, [r4, #76]	; 0x4c
   115bc:	bl	10ca4 <__assert_fail@plt+0x3a0>
   115c0:	mov	r2, #5
   115c4:	ldr	r1, [pc, #624]	; 1183c <__assert_fail@plt+0xf38>
   115c8:	mov	r0, #0
   115cc:	bl	107e4 <dcgettext@plt>
   115d0:	ldr	r2, [r4, #96]	; 0x60
   115d4:	add	r3, sp, #268	; 0x10c
   115d8:	str	r2, [sp, #20]
   115dc:	ldr	r1, [r4, #92]	; 0x5c
   115e0:	ldr	r2, [sp, #152]	; 0x98
   115e4:	str	r1, [sp, #16]
   115e8:	ldr	r1, [r4, #88]	; 0x58
   115ec:	str	r1, [sp, #12]
   115f0:	ldr	r1, [r4, #84]	; 0x54
   115f4:	str	r1, [sp, #8]
   115f8:	ldr	r1, [r4, #80]	; 0x50
   115fc:	str	r6, [sp]
   11600:	str	r1, [sp, #4]
   11604:	mov	r1, r0
   11608:	mov	r0, #1
   1160c:	bl	10898 <__printf_chk@plt>
   11610:	mov	r2, #5
   11614:	ldr	r1, [pc, #548]	; 11840 <__assert_fail@plt+0xf3c>
   11618:	mov	r0, #0
   1161c:	bl	107e4 <dcgettext@plt>
   11620:	ldr	r3, [r4, #44]	; 0x2c
   11624:	ldr	ip, [r4, #124]	; 0x7c
   11628:	cmp	r3, #5
   1162c:	ldrls	r2, [pc, #528]	; 11844 <__assert_fail@plt+0xf40>
   11630:	ldrhi	r2, [pc, #528]	; 11848 <__assert_fail@plt+0xf44>
   11634:	addls	r3, r2, r3, lsl #2
   11638:	mov	r1, r0
   1163c:	ldrls	r2, [r3, #36]	; 0x24
   11640:	cmp	ip, #0
   11644:	subgt	ip, ip, #20
   11648:	ldrgt	r0, [pc, #508]	; 1184c <__assert_fail@plt+0xf48>
   1164c:	ldrle	r0, [pc, #508]	; 11850 <__assert_fail@plt+0xf4c>
   11650:	rsble	ip, ip, #1
   11654:	ldr	r3, [r4, #128]	; 0x80
   11658:	str	r0, [sp, #4]
   1165c:	str	ip, [sp]
   11660:	mov	r0, #1
   11664:	bl	10898 <__printf_chk@plt>
   11668:	b	1121c <__assert_fail@plt+0x918>
   1166c:	ldr	r1, [pc, #480]	; 11854 <__assert_fail@plt+0xf50>
   11670:	mov	r0, #0
   11674:	bl	107e4 <dcgettext@plt>
   11678:	str	r0, [sp, #156]	; 0x9c
   1167c:	b	113f8 <__assert_fail@plt+0xaf4>
   11680:	ldr	r1, [pc, #464]	; 11858 <__assert_fail@plt+0xf54>
   11684:	mov	r0, #0
   11688:	bl	107e4 <dcgettext@plt>
   1168c:	str	r0, [sp, #156]	; 0x9c
   11690:	b	113f8 <__assert_fail@plt+0xaf4>
   11694:	ldr	r1, [pc, #448]	; 1185c <__assert_fail@plt+0xf58>
   11698:	mov	r0, #0
   1169c:	bl	107e4 <dcgettext@plt>
   116a0:	str	r0, [sp, #156]	; 0x9c
   116a4:	b	113f8 <__assert_fail@plt+0xaf4>
   116a8:	ldr	r1, [pc, #432]	; 11860 <__assert_fail@plt+0xf5c>
   116ac:	mov	r0, #0
   116b0:	bl	107e4 <dcgettext@plt>
   116b4:	str	r0, [sp, #156]	; 0x9c
   116b8:	b	113f8 <__assert_fail@plt+0xaf4>
   116bc:	ldr	r1, [pc, #416]	; 11864 <__assert_fail@plt+0xf60>
   116c0:	mov	r0, #0
   116c4:	bl	107e4 <dcgettext@plt>
   116c8:	str	r0, [sp, #156]	; 0x9c
   116cc:	b	113f8 <__assert_fail@plt+0xaf4>
   116d0:	ldr	r1, [pc, #368]	; 11848 <__assert_fail@plt+0xf44>
   116d4:	mov	r0, #0
   116d8:	bl	107e4 <dcgettext@plt>
   116dc:	str	r0, [sp, #156]	; 0x9c
   116e0:	b	113f8 <__assert_fail@plt+0xaf4>
   116e4:	bl	107f0 <__stack_chk_fail@plt>
   116e8:	mov	r2, #5
   116ec:	ldr	r1, [pc, #372]	; 11868 <__assert_fail@plt+0xf64>
   116f0:	mov	r0, #0
   116f4:	bl	107e4 <dcgettext@plt>
   116f8:	bl	10814 <perror@plt>
   116fc:	mov	r0, #1
   11700:	bl	10868 <exit@plt>
   11704:	ldr	r3, [pc, #352]	; 1186c <__assert_fail@plt+0xf68>
   11708:	mov	r2, #98	; 0x62
   1170c:	ldr	r1, [pc, #348]	; 11870 <__assert_fail@plt+0xf6c>
   11710:	ldr	r0, [pc, #348]	; 11874 <__assert_fail@plt+0xf70>
   11714:	bl	10904 <__assert_fail@plt>
   11718:	ldr	r3, [pc, #292]	; 11844 <__assert_fail@plt+0xf40>
   1171c:	mov	r2, #161	; 0xa1
   11720:	ldr	r1, [pc, #328]	; 11870 <__assert_fail@plt+0xf6c>
   11724:	ldr	r0, [pc, #332]	; 11878 <__assert_fail@plt+0xf74>
   11728:	bl	10904 <__assert_fail@plt>
   1172c:	andeq	r2, r2, r8, lsl #30
   11730:	andeq	r1, r1, r0, asr #20
   11734:	strdeq	r1, [r1], -r8
   11738:	strdeq	r1, [r1], -r0
   1173c:			; <UNDEFINED> instruction: 0x00011bb8
   11740:	muleq	r1, ip, fp
   11744:	muleq	r1, r8, fp
   11748:	andeq	r1, r1, r4, ror #23
   1174c:	andeq	r1, r1, r0, asr #23
   11750:	andeq	r1, r1, r8, asr #23
   11754:	andeq	r1, r1, r0, lsl ip
   11758:	andeq	r1, r1, ip, ror #23
   1175c:	strdeq	r1, [r1], -r4
   11760:	andeq	r1, r1, r0, lsr #24
   11764:	andeq	r1, r1, r8, lsl ip
   11768:	andeq	r1, r1, r0, asr ip
   1176c:	andeq	r1, r1, r8, lsr #24
   11770:	andeq	r1, r1, r0, lsr ip
   11774:	andeq	r1, r1, r0, lsl #25
   11778:	andeq	r1, r1, r8, asr ip
   1177c:	andeq	r1, r1, r0, ror #24
   11780:	muleq	r1, r0, ip
   11784:	andeq	r1, r1, r8, lsl #25
   11788:	andeq	r1, r1, r0, asr #25
   1178c:	muleq	r1, r8, ip
   11790:	andeq	r1, r1, r0, lsr #25
   11794:	strdeq	r1, [r1], -r0
   11798:	andeq	r1, r1, r8, asr #25
   1179c:	ldrdeq	r1, [r1], -r0
   117a0:	andeq	r1, r1, r4, lsl #26
   117a4:	strdeq	r1, [r1], -ip
   117a8:	andeq	r1, r1, ip, lsr sp
   117ac:	andeq	r1, r1, r0, lsl sp
   117b0:	andeq	r1, r1, ip, lsl sp
   117b4:	andeq	r1, r1, r0, asr sp
   117b8:	andeq	r1, r1, r8, asr #26
   117bc:	andeq	r1, r1, ip, asr sp
   117c0:	andeq	r1, r1, r4, asr sp
   117c4:	andeq	r1, r1, r0, ror sp
   117c8:	andeq	r1, r1, r8, ror #26
   117cc:	andeq	r1, r1, r4, lsr #27
   117d0:	andeq	r1, r1, ip, ror sp
   117d4:	andeq	r1, r1, r4, lsl #27
   117d8:			; <UNDEFINED> instruction: 0x00011db4
   117dc:	andeq	r1, r1, ip, lsr #27
   117e0:	andeq	r1, r1, r4, ror #27
   117e4:			; <UNDEFINED> instruction: 0x00011dbc
   117e8:	andeq	r1, r1, r4, asr #27
   117ec:	andeq	r1, r1, r8, lsl lr
   117f0:	strdeq	r1, [r1], -r0
   117f4:	strdeq	r1, [r1], -ip
   117f8:	andeq	r1, r1, ip, asr #28
   117fc:	andeq	r1, r1, r4, lsr #28
   11800:	andeq	r1, r1, ip, lsr #28
   11804:	andeq	r1, r1, r0, ror lr
   11808:	andeq	r1, r1, r4, ror #28
   1180c:	muleq	r2, r0, r0
   11810:	muleq	r1, r8, sl
   11814:	andeq	r2, r1, r0, lsr #3
   11818:	andeq	r1, r1, r0, ror sl
   1181c:	muleq	r1, r8, lr
   11820:	andeq	r1, r1, r4, asr #21
   11824:	strdeq	r1, [r1], -ip
   11828:	muleq	r2, r8, r0
   1182c:	andeq	r1, r1, r4, lsl pc
   11830:	andeq	r1, r1, ip, lsl pc
   11834:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11838:	strdeq	r1, [r1], -ip
   1183c:	muleq	r1, ip, r0
   11840:	andeq	r2, r1, r0, ror #2
   11844:	andeq	r1, r1, ip, ror #17
   11848:	andeq	r1, r1, ip, lsr #20
   1184c:	andeq	r1, r1, r4, lsr sl
   11850:	muleq	r1, r4, sl
   11854:	andeq	r1, r1, ip, lsl #30
   11858:	andeq	r1, r1, r4, lsl #30
   1185c:	andeq	r1, r1, r4, ror #29
   11860:	ldrdeq	r1, [r1], -ip
   11864:	strdeq	r1, [r1], -r0
   11868:	andeq	r1, r1, r0, asr sl
   1186c:	andeq	r1, r1, r0, lsl #18
   11870:	andeq	r1, r1, ip, ror lr
   11874:	andeq	r2, r1, ip, lsl #1
   11878:	andeq	r1, r1, ip, lsl #29
   1187c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11880:	mov	r7, r0
   11884:	ldr	r6, [pc, #72]	; 118d4 <__assert_fail@plt+0xfd0>
   11888:	ldr	r5, [pc, #72]	; 118d8 <__assert_fail@plt+0xfd4>
   1188c:	add	r6, pc, r6
   11890:	add	r5, pc, r5
   11894:	sub	r6, r6, r5
   11898:	mov	r8, r1
   1189c:	mov	r9, r2
   118a0:	bl	107a0 <strtol@plt-0x20>
   118a4:	asrs	r6, r6, #2
   118a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   118ac:	mov	r4, #0
   118b0:	add	r4, r4, #1
   118b4:	ldr	r3, [r5], #4
   118b8:	mov	r2, r9
   118bc:	mov	r1, r8
   118c0:	mov	r0, r7
   118c4:	blx	r3
   118c8:	cmp	r6, r4
   118cc:	bne	118b0 <__assert_fail@plt+0xfac>
   118d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118d4:	andeq	r1, r1, r0, ror r6
   118d8:	andeq	r1, r1, r8, ror #12
   118dc:	bx	lr

Disassembly of section .fini:

000118e0 <.fini>:
   118e0:	push	{r3, lr}
   118e4:	pop	{r3, pc}
