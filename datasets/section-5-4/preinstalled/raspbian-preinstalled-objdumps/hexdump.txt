
raspbian-preinstalled/hexdump:     file format elf32-littlearm


Disassembly of section .init:

00010bfc <.init>:
   10bfc:	push	{r3, lr}
   10c00:	bl	10fa0 <__assert_fail@plt+0x144>
   10c04:	pop	{r3, pc}

Disassembly of section .plt:

00010c08 <calloc@plt-0x14>:
   10c08:	push	{lr}		; (str lr, [sp, #-4]!)
   10c0c:	ldr	lr, [pc, #4]	; 10c18 <calloc@plt-0x4>
   10c10:	add	lr, pc, lr
   10c14:	ldr	pc, [lr, #8]!
   10c18:	andeq	r4, r1, r8, ror #7

00010c1c <calloc@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #20, 20	; 0x14000
   10c24:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c28 <raise@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #20, 20	; 0x14000
   10c30:	ldr	pc, [ip, #992]!	; 0x3e0

00010c34 <strtol@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #20, 20	; 0x14000
   10c3c:	ldr	pc, [ip, #984]!	; 0x3d8

00010c40 <wcwidth@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #20, 20	; 0x14000
   10c48:	ldr	pc, [ip, #976]!	; 0x3d0

00010c4c <free@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #20, 20	; 0x14000
   10c54:	ldr	pc, [ip, #968]!	; 0x3c8

00010c58 <fgets@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #20, 20	; 0x14000
   10c60:	ldr	pc, [ip, #960]!	; 0x3c0

00010c64 <ferror@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #20, 20	; 0x14000
   10c6c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c70 <_IO_getc@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #20, 20	; 0x14000
   10c78:	ldr	pc, [ip, #944]!	; 0x3b0

00010c7c <memcmp@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #20, 20	; 0x14000
   10c84:	ldr	pc, [ip, #936]!	; 0x3a8

00010c88 <__stack_chk_fail@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #928]!	; 0x3a0

00010c94 <rindex@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #920]!	; 0x398

00010ca0 <err@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #912]!	; 0x390

00010cac <iswprint@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #904]!	; 0x388

00010cb8 <__fxstat64@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #896]!	; 0x380

00010cc4 <fwrite@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #888]!	; 0x378

00010cd0 <strtoll@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #880]!	; 0x370

00010cdc <__ctype_get_mb_cur_max@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #872]!	; 0x368

00010ce8 <fread@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #864]!	; 0x360

00010cf4 <mbrtowc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #856]!	; 0x358

00010d00 <__asprintf_chk@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #848]!	; 0x350

00010d0c <puts@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #840]!	; 0x348

00010d18 <malloc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #832]!	; 0x340

00010d24 <__libc_start_main@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #824]!	; 0x338

00010d30 <__gmon_start__@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #816]!	; 0x330

00010d3c <freopen64@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #808]!	; 0x328

00010d48 <__ctype_b_loc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #800]!	; 0x320

00010d54 <exit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #792]!	; 0x318

00010d60 <strlcpy@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #784]!	; 0x310

00010d6c <strtoul@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #776]!	; 0x308

00010d78 <strlen@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #768]!	; 0x300

00010d84 <strchr@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d90 <warnx@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #752]!	; 0x2f0

00010d9c <getopt@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #744]!	; 0x2e8

00010da8 <ungetc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #736]!	; 0x2e0

00010db4 <__errno_location@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #728]!	; 0x2d8

00010dc0 <__sprintf_chk@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #720]!	; 0x2d0

00010dcc <memset@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #712]!	; 0x2c8

00010dd8 <__printf_chk@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #704]!	; 0x2c0

00010de4 <fileno@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #696]!	; 0x2b8

00010df0 <__fprintf_chk@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dfc <fclose@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #680]!	; 0x2a8

00010e08 <fseeko64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #672]!	; 0x2a0

00010e14 <setlocale@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #664]!	; 0x298

00010e20 <errx@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #656]!	; 0x290

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #648]!	; 0x288

00010e38 <warn@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #640]!	; 0x280

00010e44 <fopen64@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #632]!	; 0x278

00010e50 <abort@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #624]!	; 0x270

00010e5c <__assert_fail@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #616]!	; 0x268

Disassembly of section .text:

00010e68 <.text>:
   10e68:	push	{r4, r5, r6, lr}
   10e6c:	sub	sp, sp, #8
   10e70:	mov	r4, r0
   10e74:	str	r1, [sp, #4]
   10e78:	mov	r0, #6
   10e7c:	ldr	r1, [pc, #208]	; 10f54 <__assert_fail@plt+0xf8>
   10e80:	bl	10e14 <setlocale@plt>
   10e84:	ldr	r3, [sp, #4]
   10e88:	mov	r1, #111	; 0x6f
   10e8c:	ldr	r0, [r3]
   10e90:	bl	10e2c <strrchr@plt>
   10e94:	cmp	r0, #0
   10e98:	beq	10ed0 <__assert_fail@plt+0x74>
   10e9c:	ldrb	r3, [r0]
   10ea0:	cmp	r3, #111	; 0x6f
   10ea4:	bne	10ed0 <__assert_fail@plt+0x74>
   10ea8:	ldrb	r3, [r0, #1]
   10eac:	cmp	r3, #100	; 0x64
   10eb0:	bne	10ed0 <__assert_fail@plt+0x74>
   10eb4:	ldrb	r3, [r0, #2]
   10eb8:	cmp	r3, #0
   10ebc:	bne	10ed0 <__assert_fail@plt+0x74>
   10ec0:	mov	r0, r4
   10ec4:	add	r1, sp, #4
   10ec8:	bl	12a58 <__assert_fail@plt+0x1bfc>
   10ecc:	b	10edc <__assert_fail@plt+0x80>
   10ed0:	mov	r0, r4
   10ed4:	add	r1, sp, #4
   10ed8:	bl	12178 <__assert_fail@plt+0x131c>
   10edc:	ldr	r6, [pc, #116]	; 10f58 <__assert_fail@plt+0xfc>
   10ee0:	ldr	r5, [pc, #116]	; 10f5c <__assert_fail@plt+0x100>
   10ee4:	mov	r3, #0
   10ee8:	ldr	r4, [r6]
   10eec:	str	r3, [r5]
   10ef0:	cmp	r4, r3
   10ef4:	beq	10f3c <__assert_fail@plt+0xe0>
   10ef8:	mov	r0, r4
   10efc:	bl	1316c <__assert_fail@plt+0x2310>
   10f00:	ldr	r3, [r5]
   10f04:	str	r0, [r4, #8]
   10f08:	ldr	r4, [r4]
   10f0c:	cmp	r0, r3
   10f10:	strgt	r0, [r5]
   10f14:	cmp	r4, #0
   10f18:	bne	10ef8 <__assert_fail@plt+0x9c>
   10f1c:	ldr	r4, [r6]
   10f20:	cmp	r4, #0
   10f24:	beq	10f3c <__assert_fail@plt+0xe0>
   10f28:	mov	r0, r4
   10f2c:	bl	138b0 <__assert_fail@plt+0x2a54>
   10f30:	ldr	r4, [r4]
   10f34:	cmp	r4, #0
   10f38:	bne	10f28 <__assert_fail@plt+0xcc>
   10f3c:	ldr	r0, [sp, #4]
   10f40:	bl	1184c <__assert_fail@plt+0x9f0>
   10f44:	bl	11b94 <__assert_fail@plt+0xd38>
   10f48:	ldr	r3, [pc, #16]	; 10f60 <__assert_fail@plt+0x104>
   10f4c:	ldr	r0, [r3]
   10f50:	bl	10d54 <exit@plt>
   10f54:	andeq	r4, r1, r4, asr #23
   10f58:	andeq	r5, r2, r0, asr r1
   10f5c:	andeq	r5, r2, r4, asr r1
   10f60:	andeq	r5, r2, ip, asr #2
   10f64:	mov	fp, #0
   10f68:	mov	lr, #0
   10f6c:	pop	{r1}		; (ldr r1, [sp], #4)
   10f70:	mov	r2, sp
   10f74:	push	{r2}		; (str r2, [sp, #-4]!)
   10f78:	push	{r0}		; (str r0, [sp, #-4]!)
   10f7c:	ldr	ip, [pc, #16]	; 10f94 <__assert_fail@plt+0x138>
   10f80:	push	{ip}		; (str ip, [sp, #-4]!)
   10f84:	ldr	r0, [pc, #12]	; 10f98 <__assert_fail@plt+0x13c>
   10f88:	ldr	r3, [pc, #12]	; 10f9c <__assert_fail@plt+0x140>
   10f8c:	bl	10d24 <__libc_start_main@plt>
   10f90:	bl	10e50 <abort@plt>
   10f94:	andeq	r4, r1, r4, lsl r6
   10f98:	andeq	r0, r1, r8, ror #28
   10f9c:			; <UNDEFINED> instruction: 0x000145b4
   10fa0:	ldr	r3, [pc, #20]	; 10fbc <__assert_fail@plt+0x160>
   10fa4:	ldr	r2, [pc, #20]	; 10fc0 <__assert_fail@plt+0x164>
   10fa8:	add	r3, pc, r3
   10fac:	ldr	r2, [r3, r2]
   10fb0:	cmp	r2, #0
   10fb4:	bxeq	lr
   10fb8:	b	10d30 <__gmon_start__@plt>
   10fbc:	andeq	r4, r1, r0, asr r0
   10fc0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10fc4:	ldr	r0, [pc, #24]	; 10fe4 <__assert_fail@plt+0x188>
   10fc8:	ldr	r3, [pc, #24]	; 10fe8 <__assert_fail@plt+0x18c>
   10fcc:	cmp	r3, r0
   10fd0:	bxeq	lr
   10fd4:	ldr	r3, [pc, #16]	; 10fec <__assert_fail@plt+0x190>
   10fd8:	cmp	r3, #0
   10fdc:	bxeq	lr
   10fe0:	bx	r3
   10fe4:	strdeq	r5, [r2], -ip
   10fe8:	strdeq	r5, [r2], -ip
   10fec:	andeq	r0, r0, r0
   10ff0:	ldr	r0, [pc, #36]	; 1101c <__assert_fail@plt+0x1c0>
   10ff4:	ldr	r1, [pc, #36]	; 11020 <__assert_fail@plt+0x1c4>
   10ff8:	sub	r1, r1, r0
   10ffc:	asr	r1, r1, #2
   11000:	add	r1, r1, r1, lsr #31
   11004:	asrs	r1, r1, #1
   11008:	bxeq	lr
   1100c:	ldr	r3, [pc, #16]	; 11024 <__assert_fail@plt+0x1c8>
   11010:	cmp	r3, #0
   11014:	bxeq	lr
   11018:	bx	r3
   1101c:	strdeq	r5, [r2], -ip
   11020:	strdeq	r5, [r2], -ip
   11024:	andeq	r0, r0, r0
   11028:	push	{r4, lr}
   1102c:	ldr	r4, [pc, #24]	; 1104c <__assert_fail@plt+0x1f0>
   11030:	ldrb	r3, [r4]
   11034:	cmp	r3, #0
   11038:	popne	{r4, pc}
   1103c:	bl	10fc4 <__assert_fail@plt+0x168>
   11040:	mov	r3, #1
   11044:	strb	r3, [r4]
   11048:	pop	{r4, pc}
   1104c:	andeq	r5, r2, ip, lsl r1
   11050:	b	10ff0 <__assert_fail@plt+0x194>
   11054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11058:	mov	r6, r1
   1105c:	ldr	r5, [pc, #660]	; 112f8 <__assert_fail@plt+0x49c>
   11060:	ldr	r3, [r0, #24]
   11064:	sub	sp, sp, #52	; 0x34
   11068:	ldr	r1, [r5]
   1106c:	cmp	r3, #0
   11070:	mov	r4, r0
   11074:	str	r1, [sp, #44]	; 0x2c
   11078:	ble	110b8 <__assert_fail@plt+0x25c>
   1107c:	ldr	r2, [pc, #632]	; 112fc <__assert_fail@plt+0x4a0>
   11080:	sub	r3, r3, #1
   11084:	str	r3, [r0, #24]
   11088:	ldr	r3, [r4, #12]
   1108c:	mov	r1, #115	; 0x73
   11090:	mov	r0, #1
   11094:	strb	r1, [r3]
   11098:	ldr	r1, [r4, #16]
   1109c:	bl	10dd8 <__printf_chk@plt>
   110a0:	ldr	r2, [sp, #44]	; 0x2c
   110a4:	ldr	r3, [r5]
   110a8:	cmp	r2, r3
   110ac:	bne	112e0 <__assert_fail@plt+0x484>
   110b0:	add	sp, sp, #52	; 0x34
   110b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110b8:	ldrb	r0, [r6]
   110bc:	cmp	r0, #13
   110c0:	ldrls	pc, [pc, r0, lsl #2]
   110c4:	b	11140 <__assert_fail@plt+0x2e4>
   110c8:	andeq	r1, r1, r8, lsr r1
   110cc:	andeq	r1, r1, r0, asr #2
   110d0:	andeq	r1, r1, r0, asr #2
   110d4:	andeq	r1, r1, r0, asr #2
   110d8:	andeq	r1, r1, r0, asr #2
   110dc:	andeq	r1, r1, r0, asr #2
   110e0:	andeq	r1, r1, r0, asr #2
   110e4:	andeq	r1, r1, r0, lsl #2
   110e8:	andeq	r1, r1, r8, lsl #2
   110ec:	andeq	r1, r1, r0, lsl r1
   110f0:	andeq	r1, r1, r8, lsl r1
   110f4:	andeq	r1, r1, r0, lsr #2
   110f8:	andeq	r1, r1, r8, lsr #2
   110fc:	andeq	r1, r1, r0, lsr r1
   11100:	ldr	r2, [pc, #504]	; 11300 <__assert_fail@plt+0x4a4>
   11104:	b	11088 <__assert_fail@plt+0x22c>
   11108:	ldr	r2, [pc, #500]	; 11304 <__assert_fail@plt+0x4a8>
   1110c:	b	11088 <__assert_fail@plt+0x22c>
   11110:	ldr	r2, [pc, #496]	; 11308 <__assert_fail@plt+0x4ac>
   11114:	b	11088 <__assert_fail@plt+0x22c>
   11118:	ldr	r2, [pc, #492]	; 1130c <__assert_fail@plt+0x4b0>
   1111c:	b	11088 <__assert_fail@plt+0x22c>
   11120:	ldr	r2, [pc, #488]	; 11310 <__assert_fail@plt+0x4b4>
   11124:	b	11088 <__assert_fail@plt+0x22c>
   11128:	ldr	r2, [pc, #484]	; 11314 <__assert_fail@plt+0x4b8>
   1112c:	b	11088 <__assert_fail@plt+0x22c>
   11130:	ldr	r2, [pc, #480]	; 11318 <__assert_fail@plt+0x4bc>
   11134:	b	11088 <__assert_fail@plt+0x22c>
   11138:	ldr	r2, [pc, #476]	; 1131c <__assert_fail@plt+0x4c0>
   1113c:	b	11088 <__assert_fail@plt+0x22c>
   11140:	ldr	r9, [pc, #472]	; 11320 <__assert_fail@plt+0x4c4>
   11144:	ldr	r3, [r9]
   11148:	cmp	r3, #0
   1114c:	bne	111c4 <__assert_fail@plt+0x368>
   11150:	mov	fp, #1
   11154:	str	r0, [sp, #12]
   11158:	bl	10cac <iswprint@plt>
   1115c:	cmp	r0, #0
   11160:	beq	111a0 <__assert_fail@plt+0x344>
   11164:	ldr	r2, [r9]
   11168:	ldr	r3, [r4, #12]
   1116c:	cmp	r2, #0
   11170:	beq	112a4 <__assert_fail@plt+0x448>
   11174:	mov	r2, #67	; 0x43
   11178:	strb	r2, [r3]
   1117c:	ldr	r3, [r4, #16]
   11180:	ldrb	r2, [r3]
   11184:	cmp	r2, #37	; 0x25
   11188:	beq	11244 <__assert_fail@plt+0x3e8>
   1118c:	ldr	r3, [pc, #400]	; 11324 <__assert_fail@plt+0x4c8>
   11190:	mov	r2, #133	; 0x85
   11194:	ldr	r1, [pc, #396]	; 11328 <__assert_fail@plt+0x4cc>
   11198:	ldr	r0, [pc, #396]	; 1132c <__assert_fail@plt+0x4d0>
   1119c:	bl	10e5c <__assert_fail@plt>
   111a0:	ldrb	r3, [r6]
   111a4:	str	r3, [sp]
   111a8:	mov	r2, #10
   111ac:	add	r0, sp, #16
   111b0:	ldr	r3, [pc, #376]	; 11330 <__assert_fail@plt+0x4d4>
   111b4:	mov	r1, #1
   111b8:	bl	10dc0 <__sprintf_chk@plt>
   111bc:	add	r2, sp, #16
   111c0:	b	11088 <__assert_fail@plt+0x22c>
   111c4:	mov	r7, r2
   111c8:	bl	10cdc <__ctype_get_mb_cur_max@plt>
   111cc:	cmp	r0, #1
   111d0:	ldrbls	r0, [r6]
   111d4:	bls	11150 <__assert_fail@plt+0x2f4>
   111d8:	add	sl, r4, #28
   111dc:	mov	fp, #0
   111e0:	add	r8, sp, #28
   111e4:	mov	r3, sl
   111e8:	mov	r2, r7
   111ec:	mov	r1, r6
   111f0:	add	r0, sp, #12
   111f4:	bl	10cf4 <mbrtowc@plt>
   111f8:	cmp	r0, #0
   111fc:	beq	112d8 <__assert_fail@plt+0x47c>
   11200:	cmn	r0, #1
   11204:	beq	112c0 <__assert_fail@plt+0x464>
   11208:	cmn	r0, #2
   1120c:	beq	1121c <__assert_fail@plt+0x3c0>
   11210:	add	fp, r0, fp
   11214:	ldr	r0, [sp, #12]
   11218:	b	11158 <__assert_fail@plt+0x2fc>
   1121c:	cmp	r6, r8
   11220:	beq	112c0 <__assert_fail@plt+0x464>
   11224:	bl	10cdc <__ctype_get_mb_cur_max@plt>
   11228:	mov	fp, r7
   1122c:	mov	r6, r8
   11230:	mov	r1, r0
   11234:	mov	r0, r8
   11238:	bl	114f8 <__assert_fail@plt+0x69c>
   1123c:	mov	r7, r0
   11240:	b	111e4 <__assert_fail@plt+0x388>
   11244:	ldrb	r2, [r3, #1]
   11248:	cmp	r2, #51	; 0x33
   1124c:	bne	1118c <__assert_fail@plt+0x330>
   11250:	ldrb	r2, [r3, #2]
   11254:	cmp	r2, #67	; 0x43
   11258:	bne	1118c <__assert_fail@plt+0x330>
   1125c:	ldrb	r3, [r3, #3]
   11260:	cmp	r3, #0
   11264:	bne	1118c <__assert_fail@plt+0x330>
   11268:	ldr	r0, [sp, #12]
   1126c:	bl	10c40 <wcwidth@plt>
   11270:	subs	r2, r0, #0
   11274:	blt	112e4 <__assert_fail@plt+0x488>
   11278:	ldr	r3, [sp, #12]
   1127c:	rsb	r2, r2, #3
   11280:	str	r3, [sp]
   11284:	bic	r2, r2, r2, asr #31
   11288:	ldr	r3, [pc, #164]	; 11334 <__assert_fail@plt+0x4d8>
   1128c:	ldr	r1, [pc, #164]	; 11338 <__assert_fail@plt+0x4dc>
   11290:	mov	r0, #1
   11294:	sub	fp, fp, #1
   11298:	bl	10dd8 <__printf_chk@plt>
   1129c:	str	fp, [r4, #24]
   112a0:	b	110a0 <__assert_fail@plt+0x244>
   112a4:	mov	r2, #99	; 0x63
   112a8:	strb	r2, [r3]
   112ac:	ldr	r2, [sp, #12]
   112b0:	ldr	r1, [r4, #16]
   112b4:	mov	r0, #1
   112b8:	bl	10dd8 <__printf_chk@plt>
   112bc:	b	110a0 <__assert_fail@plt+0x244>
   112c0:	mov	r3, #0
   112c4:	str	r3, [r4, #28]
   112c8:	str	r3, [sl, #4]
   112cc:	ldrb	r3, [r6]
   112d0:	str	r3, [sp, #12]
   112d4:	b	111a4 <__assert_fail@plt+0x348>
   112d8:	mov	r0, #1
   112dc:	b	11210 <__assert_fail@plt+0x3b4>
   112e0:	bl	10c88 <__stack_chk_fail@plt>
   112e4:	ldr	r3, [pc, #56]	; 11324 <__assert_fail@plt+0x4c8>
   112e8:	mov	r2, #135	; 0x87
   112ec:	ldr	r1, [pc, #52]	; 11328 <__assert_fail@plt+0x4cc>
   112f0:	ldr	r0, [pc, #68]	; 1133c <__assert_fail@plt+0x4e0>
   112f4:	bl	10e5c <__assert_fail@plt>
   112f8:	andeq	r4, r2, r0, lsl #30
   112fc:	andeq	r4, r1, ip, lsr #13
   11300:			; <UNDEFINED> instruction: 0x000146b4
   11304:			; <UNDEFINED> instruction: 0x000146b8
   11308:	andeq	r4, r1, r8, asr #13
   1130c:	andeq	r4, r1, r0, asr #13
   11310:	andeq	r4, r1, ip, asr #13
   11314:			; <UNDEFINED> instruction: 0x000146bc
   11318:	andeq	r4, r1, r4, asr #13
   1131c:			; <UNDEFINED> instruction: 0x000146b0
   11320:	andeq	r5, r2, r0, ror #2
   11324:	andeq	r4, r1, r4, lsr #12
   11328:	ldrdeq	r4, [r1], -r0
   1132c:	ldrdeq	r4, [r1], -r8
   11330:	andeq	r4, r1, r8, lsl #14
   11334:	andeq	r4, r1, r4, asr #23
   11338:	andeq	r4, r1, r0, lsl #14
   1133c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11340:	push	{r4, r5, r6, r7, r8, lr}
   11344:	ldrb	r4, [r1]
   11348:	ldr	r7, [r0, #12]
   1134c:	cmp	r4, #31
   11350:	bhi	11394 <__assert_fail@plt+0x538>
   11354:	ldr	r3, [pc, #236]	; 11448 <__assert_fail@plt+0x5ec>
   11358:	mov	r2, #115	; 0x73
   1135c:	strb	r2, [r7]
   11360:	ldr	r3, [r3]
   11364:	ldrb	r2, [r1]
   11368:	cmp	r3, #0
   1136c:	beq	11378 <__assert_fail@plt+0x51c>
   11370:	cmp	r2, #10
   11374:	beq	11418 <__assert_fail@plt+0x5bc>
   11378:	ldr	r3, [pc, #204]	; 1144c <__assert_fail@plt+0x5f0>
   1137c:	ldr	r1, [r0, #16]
   11380:	add	r3, r3, r2, lsl #2
   11384:	mov	r0, #1
   11388:	ldr	r2, [r3, #8]
   1138c:	pop	{r4, r5, r6, r7, r8, lr}
   11390:	b	10dd8 <__printf_chk@plt>
   11394:	cmp	r4, #127	; 0x7f
   11398:	beq	113fc <__assert_fail@plt+0x5a0>
   1139c:	ldr	r2, [pc, #164]	; 11448 <__assert_fail@plt+0x5ec>
   113a0:	sub	r3, r4, #32
   113a4:	clz	r3, r3
   113a8:	ldr	r2, [r2]
   113ac:	lsr	r3, r3, #5
   113b0:	cmp	r2, #0
   113b4:	moveq	r3, #0
   113b8:	cmp	r3, #0
   113bc:	bne	1142c <__assert_fail@plt+0x5d0>
   113c0:	mov	r6, r1
   113c4:	mov	r5, r0
   113c8:	bl	10d48 <__ctype_b_loc@plt>
   113cc:	lsl	r4, r4, #1
   113d0:	ldr	r3, [r0]
   113d4:	mov	r0, #1
   113d8:	ldrh	r3, [r3, r4]
   113dc:	tst	r3, #16384	; 0x4000
   113e0:	movne	r3, #99	; 0x63
   113e4:	moveq	r3, #120	; 0x78
   113e8:	strb	r3, [r7]
   113ec:	ldrb	r2, [r6]
   113f0:	ldr	r1, [r5, #16]
   113f4:	pop	{r4, r5, r6, r7, r8, lr}
   113f8:	b	10dd8 <__printf_chk@plt>
   113fc:	mov	r3, #115	; 0x73
   11400:	strb	r3, [r7]
   11404:	ldr	r2, [pc, #68]	; 11450 <__assert_fail@plt+0x5f4>
   11408:	ldr	r1, [r0, #16]
   1140c:	pop	{r4, r5, r6, r7, r8, lr}
   11410:	mov	r0, #1
   11414:	b	10dd8 <__printf_chk@plt>
   11418:	ldr	r1, [r0, #16]
   1141c:	ldr	r2, [pc, #48]	; 11454 <__assert_fail@plt+0x5f8>
   11420:	mov	r0, #1
   11424:	pop	{r4, r5, r6, r7, r8, lr}
   11428:	b	10dd8 <__printf_chk@plt>
   1142c:	mov	r3, #115	; 0x73
   11430:	strb	r3, [r7]
   11434:	ldr	r2, [pc, #28]	; 11458 <__assert_fail@plt+0x5fc>
   11438:	ldr	r1, [r0, #16]
   1143c:	pop	{r4, r5, r6, r7, r8, lr}
   11440:	mov	r0, #1
   11444:	b	10dd8 <__printf_chk@plt>
   11448:	andeq	r5, r2, r0, ror #2
   1144c:	andeq	r4, r1, r4, lsr #12
   11450:	andeq	r4, r1, r4, lsl r7
   11454:	andeq	r4, r1, r0, lsl r7
   11458:	andeq	r4, r1, r8, lsl r7
   1145c:	ldr	r3, [r0, #12]
   11460:	mov	r2, #115	; 0x73
   11464:	mov	r1, #2
   11468:	push	{r4, r5, r6, lr}
   1146c:	str	r1, [r0, #4]
   11470:	strb	r2, [r3]
   11474:	ldr	r3, [r0, #12]
   11478:	mov	r2, #0
   1147c:	strb	r2, [r3, #1]
   11480:	ldr	r4, [r0, #16]
   11484:	ldrb	r3, [r4]
   11488:	cmp	r3, #37	; 0x25
   1148c:	beq	1149c <__assert_fail@plt+0x640>
   11490:	ldrb	r3, [r4, #1]!
   11494:	cmp	r3, #37	; 0x25
   11498:	bne	11490 <__assert_fail@plt+0x634>
   1149c:	ldrb	r1, [r4, #1]
   114a0:	add	r5, r4, #1
   114a4:	cmp	r1, #0
   114a8:	beq	114e8 <__assert_fail@plt+0x68c>
   114ac:	ldr	r6, [pc, #64]	; 114f4 <__assert_fail@plt+0x698>
   114b0:	b	114c0 <__assert_fail@plt+0x664>
   114b4:	ldrb	r1, [r5, #1]!
   114b8:	cmp	r1, #0
   114bc:	beq	114e8 <__assert_fail@plt+0x68c>
   114c0:	mov	r0, r6
   114c4:	bl	10d84 <strchr@plt>
   114c8:	mov	r3, r5
   114cc:	cmp	r0, #0
   114d0:	bne	114b4 <__assert_fail@plt+0x658>
   114d4:	ldrb	r2, [r3], #1
   114d8:	cmp	r2, #0
   114dc:	strb	r2, [r4, #1]!
   114e0:	bne	114d4 <__assert_fail@plt+0x678>
   114e4:	pop	{r4, r5, r6, pc}
   114e8:	mov	r3, #0
   114ec:	strb	r3, [r4, #1]
   114f0:	pop	{r4, r5, r6, pc}
   114f4:	muleq	r1, r8, r7
   114f8:	ldr	r3, [pc, #140]	; 1158c <__assert_fail@plt+0x730>
   114fc:	push	{r4, r5, r6, r7, r8, lr}
   11500:	mvn	r7, #0
   11504:	ldrd	r2, [r3]
   11508:	mvn	r6, #0
   1150c:	mov	r4, r0
   11510:	cmp	r3, r7
   11514:	cmpeq	r2, r6
   11518:	beq	11524 <__assert_fail@plt+0x6c8>
   1151c:	cmp	r1, r2
   11520:	movcs	r1, r2
   11524:	cmp	r1, #0
   11528:	beq	11584 <__assert_fail@plt+0x728>
   1152c:	add	r7, r4, r1
   11530:	mov	r5, #0
   11534:	ldr	r6, [pc, #84]	; 11590 <__assert_fail@plt+0x734>
   11538:	b	1154c <__assert_fail@plt+0x6f0>
   1153c:	strb	r0, [r4], #1
   11540:	cmp	r7, r4
   11544:	add	r5, r5, #1
   11548:	beq	11564 <__assert_fail@plt+0x708>
   1154c:	ldr	r0, [r6]
   11550:	bl	10c70 <_IO_getc@plt>
   11554:	cmn	r0, #1
   11558:	bne	1153c <__assert_fail@plt+0x6e0>
   1155c:	cmp	r5, #0
   11560:	beq	1157c <__assert_fail@plt+0x720>
   11564:	sub	r7, r4, r5
   11568:	ldrb	r0, [r4, #-1]!
   1156c:	ldr	r1, [r6]
   11570:	bl	10da8 <ungetc@plt>
   11574:	cmp	r4, r7
   11578:	bne	11568 <__assert_fail@plt+0x70c>
   1157c:	mov	r0, r5
   11580:	pop	{r4, r5, r6, r7, r8, pc}
   11584:	mov	r5, r1
   11588:	b	1157c <__assert_fail@plt+0x720>
   1158c:	andeq	r5, r2, r8, ror #1
   11590:	andeq	r5, r2, r0, lsl r1
   11594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11598:	sub	sp, sp, #124	; 0x7c
   1159c:	ldr	r5, [pc, #380]	; 11720 <__assert_fail@plt+0x8c4>
   115a0:	cmp	r1, #0
   115a4:	ldr	r3, [r5]
   115a8:	str	r3, [sp, #116]	; 0x74
   115ac:	bne	11654 <__assert_fail@plt+0x7f8>
   115b0:	ldr	r4, [pc, #364]	; 11724 <__assert_fail@plt+0x8c8>
   115b4:	ldrd	sl, [r4]
   115b8:	cmp	sl, #1
   115bc:	sbcs	r3, fp, #0
   115c0:	movlt	r2, #0
   115c4:	movlt	r3, #0
   115c8:	movlt	r6, r2
   115cc:	movlt	r7, r3
   115d0:	blt	1161c <__assert_fail@plt+0x7c0>
   115d4:	mov	r2, #0
   115d8:	mov	r3, #0
   115dc:	ldr	r8, [pc, #324]	; 11728 <__assert_fail@plt+0x8cc>
   115e0:	mov	r6, r2
   115e4:	mov	r7, r3
   115e8:	b	11608 <__assert_fail@plt+0x7ac>
   115ec:	adds	r2, r6, #1
   115f0:	adc	r3, r7, #0
   115f4:	cmp	r2, sl
   115f8:	mov	r7, r3
   115fc:	sbcs	r3, r3, fp
   11600:	mov	r6, r2
   11604:	bge	1161c <__assert_fail@plt+0x7c0>
   11608:	ldr	r0, [r8]
   1160c:	bl	10c70 <_IO_getc@plt>
   11610:	ldrd	sl, [r4]
   11614:	cmn	r0, #1
   11618:	bne	115ec <__assert_fail@plt+0x790>
   1161c:	ldr	ip, [pc, #264]	; 1172c <__assert_fail@plt+0x8d0>
   11620:	subs	r2, sl, r6
   11624:	sbc	r3, fp, r7
   11628:	ldrd	r0, [ip]
   1162c:	strd	r2, [r4]
   11630:	adds	r6, r6, r0
   11634:	adc	r7, r7, r1
   11638:	strd	r6, [ip]
   1163c:	ldr	r2, [sp, #116]	; 0x74
   11640:	ldr	r3, [r5]
   11644:	cmp	r2, r3
   11648:	bne	1170c <__assert_fail@plt+0x8b0>
   1164c:	add	sp, sp, #124	; 0x7c
   11650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11654:	ldr	r8, [pc, #204]	; 11728 <__assert_fail@plt+0x8cc>
   11658:	mov	r9, r0
   1165c:	ldr	r0, [r8]
   11660:	bl	10de4 <fileno@plt>
   11664:	add	r2, sp, #8
   11668:	mov	r1, r0
   1166c:	mov	r0, #3
   11670:	bl	10cb8 <__fxstat64@plt>
   11674:	subs	r1, r0, #0
   11678:	bne	11710 <__assert_fail@plt+0x8b4>
   1167c:	ldr	r3, [sp, #24]
   11680:	ldr	r4, [pc, #156]	; 11724 <__assert_fail@plt+0x8c8>
   11684:	and	r3, r3, #61440	; 0xf000
   11688:	cmp	r3, #32768	; 0x8000
   1168c:	ldrd	sl, [r4]
   11690:	bne	115b8 <__assert_fail@plt+0x75c>
   11694:	ldrd	r6, [sp, #56]	; 0x38
   11698:	cmp	r6, sl
   1169c:	sbcs	r3, r7, fp
   116a0:	blt	116e8 <__assert_fail@plt+0x88c>
   116a4:	ldr	r0, [r8]
   116a8:	mov	r2, sl
   116ac:	str	r1, [sp]
   116b0:	mov	r3, fp
   116b4:	bl	10e08 <fseeko64@plt>
   116b8:	cmp	r0, #0
   116bc:	bne	11710 <__assert_fail@plt+0x8b4>
   116c0:	ldr	ip, [pc, #100]	; 1172c <__assert_fail@plt+0x8d0>
   116c4:	ldrd	r0, [r4]
   116c8:	mov	r6, #0
   116cc:	ldrd	r2, [ip]
   116d0:	mov	r7, #0
   116d4:	adds	r8, r2, r0
   116d8:	adc	r9, r3, r1
   116dc:	strd	r6, [r4]
   116e0:	strd	r8, [ip]
   116e4:	b	1163c <__assert_fail@plt+0x7e0>
   116e8:	ldr	ip, [pc, #60]	; 1172c <__assert_fail@plt+0x8d0>
   116ec:	subs	r2, sl, r6
   116f0:	sbc	r3, fp, r7
   116f4:	ldrd	r0, [ip]
   116f8:	strd	r2, [r4]
   116fc:	adds	r2, r0, r6
   11700:	adc	r3, r1, r7
   11704:	strd	r2, [ip]
   11708:	b	1163c <__assert_fail@plt+0x7e0>
   1170c:	bl	10c88 <__stack_chk_fail@plt>
   11710:	mov	r2, r9
   11714:	ldr	r1, [pc, #20]	; 11730 <__assert_fail@plt+0x8d4>
   11718:	mov	r0, #1
   1171c:	bl	10ca0 <err@plt>
   11720:	andeq	r4, r2, r0, lsl #30
   11724:	andeq	r5, r2, r8, asr r1
   11728:	andeq	r5, r2, r0, lsl r1
   1172c:	andeq	r5, r2, r0, lsr #2
   11730:	andeq	r4, r1, r0, lsr #15
   11734:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11738:	ldr	r4, [pc, #240]	; 11830 <__assert_fail@plt+0x9d4>
   1173c:	ldr	r5, [pc, #240]	; 11834 <__assert_fail@plt+0x9d8>
   11740:	ldr	r8, [pc, #240]	; 11838 <__assert_fail@plt+0x9dc>
   11744:	ldr	r3, [r4, #8]
   11748:	ldr	r7, [pc, #236]	; 1183c <__assert_fail@plt+0x9e0>
   1174c:	ldr	r6, [pc, #236]	; 11840 <__assert_fail@plt+0x9e4>
   11750:	ldr	sl, [pc, #236]	; 11844 <__assert_fail@plt+0x9e8>
   11754:	ldr	r9, [pc, #236]	; 11848 <__assert_fail@plt+0x9ec>
   11758:	b	117b8 <__assert_fail@plt+0x95c>
   1175c:	mov	fp, #1
   11760:	ldr	r2, [r7]
   11764:	mov	r1, r6
   11768:	str	fp, [r4, #12]
   1176c:	bl	10d3c <freopen64@plt>
   11770:	cmp	r0, #0
   11774:	beq	1180c <__assert_fail@plt+0x9b0>
   11778:	ldrd	r2, [r5]
   1177c:	ldr	r1, [r4, #8]
   11780:	orrs	r3, r2, r3
   11784:	ldr	r0, [r1]
   11788:	beq	117ec <__assert_fail@plt+0x990>
   1178c:	mov	r1, fp
   11790:	bl	11594 <__assert_fail@plt+0x738>
   11794:	ldr	r3, [r4, #8]
   11798:	ldrd	r0, [r5]
   1179c:	ldr	r2, [r3]
   117a0:	cmp	r2, #0
   117a4:	addne	r3, r3, #4
   117a8:	strne	r3, [r4, #8]
   117ac:	orrs	r3, r0, r1
   117b0:	beq	117e4 <__assert_fail@plt+0x988>
   117b4:	ldr	r3, [r4, #8]
   117b8:	ldr	r0, [r3]
   117bc:	cmp	r0, #0
   117c0:	bne	1175c <__assert_fail@plt+0x900>
   117c4:	ldr	r1, [r4, #12]
   117c8:	cmp	r1, #0
   117cc:	add	r3, r1, #1
   117d0:	str	r3, [r4, #12]
   117d4:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117d8:	ldrd	r2, [r5]
   117dc:	orrs	r3, r2, r3
   117e0:	bne	11804 <__assert_fail@plt+0x9a8>
   117e4:	mov	r0, #1
   117e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117ec:	cmp	r0, #0
   117f0:	beq	117e4 <__assert_fail@plt+0x988>
   117f4:	add	r1, r1, #4
   117f8:	str	r1, [r4, #8]
   117fc:	mov	r0, #1
   11800:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11804:	mov	r0, r8
   11808:	b	11790 <__assert_fail@plt+0x934>
   1180c:	ldr	r3, [r4, #8]
   11810:	mov	r0, sl
   11814:	ldr	r1, [r3]
   11818:	bl	10e38 <warn@plt>
   1181c:	ldr	r3, [r4, #8]
   11820:	str	fp, [r9]
   11824:	add	r3, r3, #4
   11828:	str	r3, [r4, #8]
   1182c:	b	117b8 <__assert_fail@plt+0x95c>
   11830:	andeq	r5, r2, r0, lsr #2
   11834:	andeq	r5, r2, r8, asr r1
   11838:	andeq	r4, r1, r4, lsr #15
   1183c:	andeq	r5, r2, r0, lsl r1
   11840:	andeq	r4, r1, ip, lsr #21
   11844:	andeq	r4, r1, r0, lsr #15
   11848:	andeq	r5, r2, ip, asr #2
   1184c:	subs	r3, r0, #0
   11850:	beq	11864 <__assert_fail@plt+0xa08>
   11854:	ldr	r2, [pc, #12]	; 11868 <__assert_fail@plt+0xa0c>
   11858:	mov	r0, #1
   1185c:	str	r3, [r2, #8]
   11860:	bx	lr
   11864:	b	11734 <__assert_fail@plt+0x8d8>
   11868:	andeq	r5, r2, r0, lsr #2
   1186c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11870:	sub	sp, sp, #12
   11874:	ldr	r5, [pc, #752]	; 11b6c <__assert_fail@plt+0xd10>
   11878:	ldr	r3, [pc, #752]	; 11b70 <__assert_fail@plt+0xd14>
   1187c:	ldr	r6, [r5, #16]
   11880:	ldr	r4, [r3]
   11884:	cmp	r6, #0
   11888:	beq	11b18 <__assert_fail@plt+0xcbc>
   1188c:	ldrd	r2, [r5]
   11890:	ldr	r1, [r5, #20]
   11894:	str	r6, [r5, #20]
   11898:	adds	r6, r2, r4
   1189c:	adc	r7, r3, r4, asr #31
   118a0:	mov	r3, #1
   118a4:	str	r3, [sp, #4]
   118a8:	strd	r6, [r5]
   118ac:	str	r1, [r5, #16]
   118b0:	ldr	r7, [pc, #700]	; 11b74 <__assert_fail@plt+0xd18>
   118b4:	ldr	r6, [pc, #700]	; 11b78 <__assert_fail@plt+0xd1c>
   118b8:	mov	r8, #0
   118bc:	ldrd	r2, [r7]
   118c0:	orrs	r1, r2, r3
   118c4:	beq	119d0 <__assert_fail@plt+0xb74>
   118c8:	ldr	r1, [r6]
   118cc:	cmp	r1, #0
   118d0:	bne	11a4c <__assert_fail@plt+0xbf0>
   118d4:	mvn	r1, #0
   118d8:	cmp	r3, r1
   118dc:	ldr	ip, [r5, #16]
   118e0:	mvn	r0, #0
   118e4:	cmpeq	r2, r0
   118e8:	add	ip, ip, r8
   118ec:	moveq	r2, r4
   118f0:	beq	1190c <__assert_fail@plt+0xab0>
   118f4:	cmp	r2, r4
   118f8:	asr	r1, r4, #31
   118fc:	sbcs	lr, r3, r1
   11900:	mov	r0, r4
   11904:	movlt	r0, r2
   11908:	mov	r2, r0
   1190c:	ldr	r3, [pc, #616]	; 11b7c <__assert_fail@plt+0xd20>
   11910:	mov	r0, ip
   11914:	mov	r1, #1
   11918:	ldr	r3, [r3]
   1191c:	bl	10ce8 <fread@plt>
   11920:	cmp	r0, #0
   11924:	beq	11a60 <__assert_fail@plt+0xc04>
   11928:	ldrd	r2, [r7]
   1192c:	mov	r1, #0
   11930:	str	r1, [r6]
   11934:	mov	fp, r3
   11938:	mvn	r3, #0
   1193c:	mov	sl, r2
   11940:	cmp	fp, r3
   11944:	mvn	r2, #0
   11948:	cmpeq	sl, r2
   1194c:	beq	1195c <__assert_fail@plt+0xb00>
   11950:	subs	r2, sl, r0
   11954:	sbc	r3, fp, r0, asr #31
   11958:	strd	r2, [r7]
   1195c:	subs	r4, r4, r0
   11960:	bne	11a44 <__assert_fail@plt+0xbe8>
   11964:	ldr	r9, [r6, #4]
   11968:	ldr	r3, [sp, #4]
   1196c:	bics	r2, r9, #2
   11970:	eor	r3, r3, #1
   11974:	moveq	r3, #1
   11978:	cmp	r3, #0
   1197c:	ldr	fp, [r5, #16]
   11980:	bne	11acc <__assert_fail@plt+0xc70>
   11984:	ldr	r3, [pc, #484]	; 11b70 <__assert_fail@plt+0xd14>
   11988:	ldr	r1, [r5, #20]
   1198c:	mov	r0, fp
   11990:	ldr	r4, [r3]
   11994:	mov	r2, r4
   11998:	bl	10c7c <memcmp@plt>
   1199c:	subs	r8, r0, #0
   119a0:	bne	11acc <__assert_fail@plt+0xc70>
   119a4:	cmp	r9, #3
   119a8:	beq	11a80 <__assert_fail@plt+0xc24>
   119ac:	ldrd	r2, [r5]
   119b0:	mov	r1, #1
   119b4:	str	r1, [r6, #4]
   119b8:	adds	r0, r2, r4
   119bc:	adc	r1, r3, r4, asr #31
   119c0:	ldrd	r2, [r7]
   119c4:	strd	r0, [r5]
   119c8:	orrs	r1, r2, r3
   119cc:	bne	118c8 <__assert_fail@plt+0xa6c>
   119d0:	ldr	r3, [pc, #424]	; 11b80 <__assert_fail@plt+0xd24>
   119d4:	ldr	r3, [r3]
   119d8:	cmp	r3, #0
   119dc:	bne	11aa8 <__assert_fail@plt+0xc4c>
   119e0:	ldr	r3, [pc, #392]	; 11b70 <__assert_fail@plt+0xd14>
   119e4:	ldr	r3, [r3]
   119e8:	cmp	r3, r4
   119ec:	beq	11b58 <__assert_fail@plt+0xcfc>
   119f0:	ldr	r2, [pc, #384]	; 11b78 <__assert_fail@plt+0xd1c>
   119f4:	ldrd	r0, [r5]
   119f8:	ldr	fp, [r5, #16]
   119fc:	ldr	r6, [r2, #4]
   11a00:	adds	r2, r0, r8
   11a04:	adc	r3, r1, r8, asr #31
   11a08:	mov	r0, r2
   11a0c:	cmp	r6, #0
   11a10:	ldr	r2, [sp, #4]
   11a14:	mov	r1, r3
   11a18:	moveq	r2, #0
   11a1c:	cmp	r2, #0
   11a20:	strd	r0, [r5, #24]
   11a24:	bne	11ae8 <__assert_fail@plt+0xc8c>
   11a28:	mov	r2, r4
   11a2c:	add	r0, fp, r8
   11a30:	mov	r1, #0
   11a34:	bl	10dcc <memset@plt>
   11a38:	mov	r0, fp
   11a3c:	add	sp, sp, #12
   11a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a44:	add	r8, r8, r0
   11a48:	b	118bc <__assert_fail@plt+0xa60>
   11a4c:	bl	11734 <__assert_fail@plt+0x8d8>
   11a50:	cmp	r0, #0
   11a54:	beq	119d0 <__assert_fail@plt+0xb74>
   11a58:	ldrd	r2, [r7]
   11a5c:	b	118d4 <__assert_fail@plt+0xa78>
   11a60:	ldr	r3, [pc, #276]	; 11b7c <__assert_fail@plt+0xd20>
   11a64:	ldr	r0, [r3]
   11a68:	bl	10c64 <ferror@plt>
   11a6c:	cmp	r0, #0
   11a70:	bne	11a94 <__assert_fail@plt+0xc38>
   11a74:	mov	r3, #1
   11a78:	str	r3, [r6]
   11a7c:	b	118bc <__assert_fail@plt+0xa60>
   11a80:	ldr	r0, [pc, #252]	; 11b84 <__assert_fail@plt+0xd28>
   11a84:	bl	10d0c <puts@plt>
   11a88:	ldr	r3, [pc, #224]	; 11b70 <__assert_fail@plt+0xd14>
   11a8c:	ldr	r4, [r3]
   11a90:	b	119ac <__assert_fail@plt+0xb50>
   11a94:	ldr	r3, [r5, #8]
   11a98:	ldr	r0, [pc, #232]	; 11b88 <__assert_fail@plt+0xd2c>
   11a9c:	ldr	r1, [r3, #-4]
   11aa0:	bl	10e38 <warn@plt>
   11aa4:	b	11a74 <__assert_fail@plt+0xc18>
   11aa8:	ldr	r1, [pc, #220]	; 11b8c <__assert_fail@plt+0xd30>
   11aac:	ldrd	r2, [r5]
   11ab0:	ldrd	r0, [r1]
   11ab4:	cmp	r2, r0
   11ab8:	sbcs	r3, r3, r1
   11abc:	bge	119e0 <__assert_fail@plt+0xb84>
   11ac0:	ldr	r1, [pc, #200]	; 11b90 <__assert_fail@plt+0xd34>
   11ac4:	mov	r0, #1
   11ac8:	bl	10e20 <errx@plt>
   11acc:	sub	r9, r9, #1
   11ad0:	cmp	r9, #1
   11ad4:	movls	r2, #3
   11ad8:	mov	r0, fp
   11adc:	strls	r2, [r6, #4]
   11ae0:	add	sp, sp, #12
   11ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ae8:	mov	r2, r8
   11aec:	ldr	r1, [r5, #20]
   11af0:	mov	r0, fp
   11af4:	bl	10c7c <memcmp@plt>
   11af8:	subs	r2, r0, #0
   11afc:	bne	11a28 <__assert_fail@plt+0xbcc>
   11b00:	cmp	r6, #1
   11b04:	beq	11b58 <__assert_fail@plt+0xcfc>
   11b08:	ldr	r0, [pc, #116]	; 11b84 <__assert_fail@plt+0xd28>
   11b0c:	mov	fp, r2
   11b10:	bl	10d0c <puts@plt>
   11b14:	b	11a38 <__assert_fail@plt+0xbdc>
   11b18:	mov	r1, r4
   11b1c:	mov	r0, #1
   11b20:	bl	10c1c <calloc@plt>
   11b24:	cmp	r0, #0
   11b28:	str	r0, [r5, #16]
   11b2c:	beq	11b60 <__assert_fail@plt+0xd04>
   11b30:	ldr	r4, [pc, #56]	; 11b70 <__assert_fail@plt+0xd14>
   11b34:	mov	r0, #1
   11b38:	ldr	r1, [r4]
   11b3c:	bl	10c1c <calloc@plt>
   11b40:	cmp	r0, #0
   11b44:	str	r0, [r5, #20]
   11b48:	beq	11b60 <__assert_fail@plt+0xd04>
   11b4c:	str	r6, [sp, #4]
   11b50:	ldr	r4, [r4]
   11b54:	b	118b0 <__assert_fail@plt+0xa54>
   11b58:	mov	fp, #0
   11b5c:	b	11a38 <__assert_fail@plt+0xbdc>
   11b60:	mov	r1, #0
   11b64:	mov	r0, #1
   11b68:	bl	10ca0 <err@plt>
   11b6c:	andeq	r5, r2, r0, lsr #2
   11b70:	andeq	r5, r2, r4, asr r1
   11b74:	andeq	r5, r2, r8, ror #1
   11b78:	andeq	r5, r2, r0, ror #1
   11b7c:	andeq	r5, r2, r0, lsl r1
   11b80:	andeq	r5, r2, r0, ror #2
   11b84:	andeq	r4, r1, ip, asr #15
   11b88:	andeq	r4, r1, r0, lsr #15
   11b8c:	andeq	r5, r2, r8, asr r1
   11b90:	andeq	r4, r1, ip, lsr #15
   11b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b98:	sub	sp, sp, #52	; 0x34
   11b9c:	mov	r3, #0
   11ba0:	str	r3, [sp, #16]
   11ba4:	ldr	r3, [pc, #1372]	; 12108 <__assert_fail@plt+0x12ac>
   11ba8:	ldr	r3, [r3]
   11bac:	str	r3, [sp, #44]	; 0x2c
   11bb0:	bl	1186c <__assert_fail@plt+0xa10>
   11bb4:	subs	r3, r0, #0
   11bb8:	str	r3, [sp, #20]
   11bbc:	beq	11dc0 <__assert_fail@plt+0xf64>
   11bc0:	ldr	r3, [pc, #1348]	; 1210c <__assert_fail@plt+0x12b0>
   11bc4:	ldr	r5, [pc, #1348]	; 12110 <__assert_fail@plt+0x12b4>
   11bc8:	ldr	r1, [r3]
   11bcc:	ldrd	r2, [r5]
   11bd0:	cmp	r1, #0
   11bd4:	str	r1, [sp, #12]
   11bd8:	strd	r2, [sp, #24]
   11bdc:	beq	11bb0 <__assert_fail@plt+0xd54>
   11be0:	ldr	r3, [sp, #12]
   11be4:	ldr	r9, [r3, #4]
   11be8:	cmp	r9, #0
   11bec:	beq	11d94 <__assert_fail@plt+0xf38>
   11bf0:	ldr	r3, [r9, #8]
   11bf4:	tst	r3, #1
   11bf8:	bne	11d94 <__assert_fail@plt+0xf38>
   11bfc:	ldr	r7, [sp, #20]
   11c00:	ldr	r8, [r9, #12]
   11c04:	cmp	r8, #0
   11c08:	beq	11d7c <__assert_fail@plt+0xf20>
   11c0c:	ldr	r4, [r9, #4]
   11c10:	cmp	r4, #0
   11c14:	bne	11c7c <__assert_fail@plt+0xe20>
   11c18:	b	11d74 <__assert_fail@plt+0xf18>
   11c1c:	cmp	r1, #4
   11c20:	beq	11e78 <__assert_fail@plt+0x101c>
   11c24:	bhi	11d08 <__assert_fail@plt+0xeac>
   11c28:	cmp	r1, #1
   11c2c:	beq	11ef0 <__assert_fail@plt+0x1094>
   11c30:	cmp	r1, #2
   11c34:	bne	11c50 <__assert_fail@plt+0xdf4>
   11c38:	ldr	r2, [pc, #1236]	; 12114 <__assert_fail@plt+0x12b8>
   11c3c:	ldr	r1, [r4, #16]
   11c40:	mov	r0, #1
   11c44:	bl	10dd8 <__printf_chk@plt>
   11c48:	cmp	r8, #1
   11c4c:	beq	11cf4 <__assert_fail@plt+0xe98>
   11c50:	ldrd	r2, [r5]
   11c54:	ldr	r1, [r4, #8]
   11c58:	ldr	r4, [r4]
   11c5c:	adds	sl, r2, r1
   11c60:	adc	fp, r3, r1, asr #31
   11c64:	mov	r2, sl
   11c68:	mov	r3, fp
   11c6c:	cmp	r4, #0
   11c70:	strd	r2, [r5]
   11c74:	add	r7, r7, r1
   11c78:	beq	11d74 <__assert_fail@plt+0xf18>
   11c7c:	ldrd	r2, [r5, #24]
   11c80:	orrs	r1, r2, r3
   11c84:	beq	11ca8 <__assert_fail@plt+0xe4c>
   11c88:	ldrd	r0, [r5]
   11c8c:	cmp	r0, r2
   11c90:	sbcs	r1, r1, r3
   11c94:	blt	11ca8 <__assert_fail@plt+0xe4c>
   11c98:	ldr	r1, [r4, #4]
   11c9c:	ldr	r0, [pc, #1140]	; 12118 <__assert_fail@plt+0x12bc>
   11ca0:	tst	r0, r1
   11ca4:	beq	12038 <__assert_fail@plt+0x11dc>
   11ca8:	cmp	r8, #1
   11cac:	beq	12050 <__assert_fail@plt+0x11f4>
   11cb0:	ldr	r1, [r4, #4]
   11cb4:	cmp	r1, #32
   11cb8:	beq	11f04 <__assert_fail@plt+0x10a8>
   11cbc:	bls	11c1c <__assert_fail@plt+0xdc0>
   11cc0:	cmp	r1, #256	; 0x100
   11cc4:	beq	11e68 <__assert_fail@plt+0x100c>
   11cc8:	bhi	11d50 <__assert_fail@plt+0xef4>
   11ccc:	cmp	r1, #64	; 0x40
   11cd0:	beq	11eb0 <__assert_fail@plt+0x1054>
   11cd4:	cmp	r1, #128	; 0x80
   11cd8:	bne	11c50 <__assert_fail@plt+0xdf4>
   11cdc:	mov	r2, r7
   11ce0:	ldr	r1, [r4, #16]
   11ce4:	mov	r0, #1
   11ce8:	bl	10dd8 <__printf_chk@plt>
   11cec:	cmp	r8, #1
   11cf0:	bne	11c50 <__assert_fail@plt+0xdf4>
   11cf4:	ldr	r1, [r4, #20]
   11cf8:	cmp	r1, #0
   11cfc:	ldrne	r3, [sp, #16]
   11d00:	strbne	r3, [r1]
   11d04:	b	11c50 <__assert_fail@plt+0xdf4>
   11d08:	cmp	r1, #8
   11d0c:	beq	11edc <__assert_fail@plt+0x1080>
   11d10:	cmp	r1, #16
   11d14:	bne	11c50 <__assert_fail@plt+0xdf4>
   11d18:	ldr	r3, [r4, #8]
   11d1c:	cmp	r3, #4
   11d20:	beq	1209c <__assert_fail@plt+0x1240>
   11d24:	cmp	r3, #8
   11d28:	bne	11c48 <__assert_fail@plt+0xdec>
   11d2c:	ldr	r0, [r7]
   11d30:	ldr	r1, [r7, #4]
   11d34:	add	r3, sp, #32
   11d38:	stmia	r3!, {r0, r1}
   11d3c:	ldr	r1, [r4, #16]
   11d40:	ldrd	r2, [sp, #32]
   11d44:	mov	r0, #1
   11d48:	bl	10dd8 <__printf_chk@plt>
   11d4c:	b	11c48 <__assert_fail@plt+0xdec>
   11d50:	cmp	r1, #512	; 0x200
   11d54:	beq	11f98 <__assert_fail@plt+0x113c>
   11d58:	cmp	r1, #1024	; 0x400
   11d5c:	bne	11c50 <__assert_fail@plt+0xdf4>
   11d60:	ldr	r2, [r4, #16]
   11d64:	ldr	r1, [pc, #944]	; 1211c <__assert_fail@plt+0x12c0>
   11d68:	mov	r0, #1
   11d6c:	bl	10dd8 <__printf_chk@plt>
   11d70:	b	11c48 <__assert_fail@plt+0xdec>
   11d74:	subs	r8, r8, #1
   11d78:	bne	11c0c <__assert_fail@plt+0xdb0>
   11d7c:	ldr	r9, [r9]
   11d80:	cmp	r9, #0
   11d84:	beq	11d94 <__assert_fail@plt+0xf38>
   11d88:	ldr	r3, [r9, #8]
   11d8c:	tst	r3, #1
   11d90:	beq	11c00 <__assert_fail@plt+0xda4>
   11d94:	ldr	r3, [sp, #12]
   11d98:	ldrd	r0, [sp, #24]
   11d9c:	ldr	r3, [r3]
   11da0:	strd	r0, [r5]
   11da4:	cmp	r3, #0
   11da8:	str	r3, [sp, #12]
   11dac:	bne	11be0 <__assert_fail@plt+0xd84>
   11db0:	bl	1186c <__assert_fail@plt+0xa10>
   11db4:	subs	r3, r0, #0
   11db8:	str	r3, [sp, #20]
   11dbc:	bne	11bc0 <__assert_fail@plt+0xd64>
   11dc0:	ldr	r3, [pc, #856]	; 12120 <__assert_fail@plt+0x12c4>
   11dc4:	ldr	r1, [r3]
   11dc8:	cmp	r1, #0
   11dcc:	beq	11e4c <__assert_fail@plt+0xff0>
   11dd0:	ldr	r5, [pc, #824]	; 12110 <__assert_fail@plt+0x12b4>
   11dd4:	ldrd	r2, [r5, #24]
   11dd8:	orrs	r3, r2, r3
   11ddc:	bne	11df0 <__assert_fail@plt+0xf94>
   11de0:	ldrd	r2, [r5]
   11de4:	orrs	r0, r2, r3
   11de8:	beq	11e4c <__assert_fail@plt+0xff0>
   11dec:	strd	r2, [r5, #24]
   11df0:	ldr	r4, [r1, #4]
   11df4:	cmp	r4, #0
   11df8:	beq	11e4c <__assert_fail@plt+0xff0>
   11dfc:	ldr	r6, [pc, #792]	; 1211c <__assert_fail@plt+0x12c0>
   11e00:	b	11e28 <__assert_fail@plt+0xfcc>
   11e04:	cmp	r0, #1024	; 0x400
   11e08:	bne	11e1c <__assert_fail@plt+0xfc0>
   11e0c:	ldr	r2, [r4, #16]
   11e10:	mov	r1, r6
   11e14:	mov	r0, #1
   11e18:	bl	10dd8 <__printf_chk@plt>
   11e1c:	ldr	r4, [r4]
   11e20:	cmp	r4, #0
   11e24:	beq	11e4c <__assert_fail@plt+0xff0>
   11e28:	ldr	r0, [r4, #4]
   11e2c:	cmp	r0, #1
   11e30:	bne	11e04 <__assert_fail@plt+0xfa8>
   11e34:	ldr	r1, [r4, #16]
   11e38:	ldrd	r2, [r5, #24]
   11e3c:	bl	10dd8 <__printf_chk@plt>
   11e40:	ldr	r4, [r4]
   11e44:	cmp	r4, #0
   11e48:	bne	11e28 <__assert_fail@plt+0xfcc>
   11e4c:	ldr	r3, [pc, #692]	; 12108 <__assert_fail@plt+0x12ac>
   11e50:	ldr	r2, [sp, #44]	; 0x2c
   11e54:	ldr	r3, [r3]
   11e58:	cmp	r2, r3
   11e5c:	bne	12104 <__assert_fail@plt+0x12a8>
   11e60:	add	sp, sp, #52	; 0x34
   11e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e68:	mov	r1, r7
   11e6c:	mov	r0, r4
   11e70:	bl	11340 <__assert_fail@plt+0x4e4>
   11e74:	b	11c48 <__assert_fail@plt+0xdec>
   11e78:	orrs	r1, r2, r3
   11e7c:	ldrd	r0, [r5]
   11e80:	subne	r2, r2, r0
   11e84:	bne	11ea0 <__assert_fail@plt+0x1044>
   11e88:	ldr	r3, [pc, #660]	; 12124 <__assert_fail@plt+0x12c8>
   11e8c:	ldr	r6, [r3]
   11e90:	mov	r2, r6
   11e94:	asr	r3, r6, #31
   11e98:	bl	14378 <__assert_fail@plt+0x351c>
   11e9c:	sub	r2, r6, r2
   11ea0:	mov	r1, r7
   11ea4:	mov	r0, r4
   11ea8:	bl	11054 <__assert_fail@plt+0x1f8>
   11eac:	b	11c48 <__assert_fail@plt+0xdec>
   11eb0:	bl	10d48 <__ctype_b_loc@plt>
   11eb4:	ldrb	r2, [r7]
   11eb8:	ldr	r1, [r4, #16]
   11ebc:	lsl	r3, r2, #1
   11ec0:	ldr	ip, [r0]
   11ec4:	mov	r0, #1
   11ec8:	ldrh	r3, [ip, r3]
   11ecc:	tst	r3, #16384	; 0x4000
   11ed0:	moveq	r2, #46	; 0x2e
   11ed4:	bl	10dd8 <__printf_chk@plt>
   11ed8:	b	11c48 <__assert_fail@plt+0xdec>
   11edc:	ldrb	r2, [r7]
   11ee0:	ldr	r1, [r4, #16]
   11ee4:	mov	r0, #1
   11ee8:	bl	10dd8 <__printf_chk@plt>
   11eec:	b	11c48 <__assert_fail@plt+0xdec>
   11ef0:	ldrd	r2, [r5]
   11ef4:	ldr	r1, [r4, #16]
   11ef8:	mov	r0, #1
   11efc:	bl	10dd8 <__printf_chk@plt>
   11f00:	b	11c48 <__assert_fail@plt+0xdec>
   11f04:	ldr	r3, [r4, #8]
   11f08:	sub	r3, r3, #1
   11f0c:	cmp	r3, #7
   11f10:	ldrls	pc, [pc, r3, lsl #2]
   11f14:	b	11c48 <__assert_fail@plt+0xdec>
   11f18:	andeq	r1, r1, r0, lsl #31
   11f1c:	andeq	r1, r1, r4, ror #30
   11f20:	andeq	r1, r1, r8, asr #24
   11f24:	andeq	r1, r1, ip, asr #30
   11f28:	andeq	r1, r1, r8, asr #24
   11f2c:	andeq	r1, r1, r8, asr #24
   11f30:	andeq	r1, r1, r8, asr #24
   11f34:	andeq	r1, r1, r8, lsr pc
   11f38:	ldrsb	r2, [r7]
   11f3c:	ldr	r1, [r4, #16]
   11f40:	mov	r0, #1
   11f44:	bl	10dd8 <__printf_chk@plt>
   11f48:	b	11c48 <__assert_fail@plt+0xdec>
   11f4c:	ldr	r2, [r7]
   11f50:	ldr	r1, [r4, #16]
   11f54:	mov	r0, #1
   11f58:	asr	r3, r2, #31
   11f5c:	bl	10dd8 <__printf_chk@plt>
   11f60:	b	11c48 <__assert_fail@plt+0xdec>
   11f64:	ldrh	r2, [r7]
   11f68:	ldr	r1, [r4, #16]
   11f6c:	mov	r0, #1
   11f70:	sxth	r2, r2
   11f74:	asr	r3, r2, #31
   11f78:	bl	10dd8 <__printf_chk@plt>
   11f7c:	b	11c48 <__assert_fail@plt+0xdec>
   11f80:	ldrsb	r2, [r7]
   11f84:	ldr	r1, [r4, #16]
   11f88:	mov	r0, #1
   11f8c:	asr	r3, r2, #31
   11f90:	bl	10dd8 <__printf_chk@plt>
   11f94:	b	11c48 <__assert_fail@plt+0xdec>
   11f98:	ldr	r3, [r4, #8]
   11f9c:	sub	r3, r3, #1
   11fa0:	cmp	r3, #7
   11fa4:	ldrls	pc, [pc, r3, lsl #2]
   11fa8:	b	11c48 <__assert_fail@plt+0xdec>
   11fac:	andeq	r2, r1, r0, lsr #32
   11fb0:	andeq	r2, r1, r8
   11fb4:	andeq	r1, r1, r8, asr #24
   11fb8:	strdeq	r1, [r1], -r0
   11fbc:	andeq	r1, r1, r8, asr #24
   11fc0:	andeq	r1, r1, r8, asr #24
   11fc4:	andeq	r1, r1, r8, asr #24
   11fc8:	andeq	r1, r1, ip, asr #31
   11fcc:	ldr	r0, [r7]
   11fd0:	ldr	r1, [r7, #4]
   11fd4:	add	r3, sp, #32
   11fd8:	stmia	r3!, {r0, r1}
   11fdc:	ldr	r1, [r4, #16]
   11fe0:	ldrd	r2, [sp, #32]
   11fe4:	mov	r0, #1
   11fe8:	bl	10dd8 <__printf_chk@plt>
   11fec:	b	11c48 <__assert_fail@plt+0xdec>
   11ff0:	ldr	r2, [r7]
   11ff4:	mov	r3, #0
   11ff8:	ldr	r1, [r4, #16]
   11ffc:	mov	r0, #1
   12000:	bl	10dd8 <__printf_chk@plt>
   12004:	b	11c48 <__assert_fail@plt+0xdec>
   12008:	ldrh	r2, [r7]
   1200c:	ldr	r1, [r4, #16]
   12010:	mov	r3, #0
   12014:	mov	r0, #1
   12018:	bl	10dd8 <__printf_chk@plt>
   1201c:	b	11c48 <__assert_fail@plt+0xdec>
   12020:	ldrb	r2, [r7]
   12024:	mov	r3, #0
   12028:	ldr	r1, [r4, #16]
   1202c:	mov	r0, #1
   12030:	bl	10dd8 <__printf_chk@plt>
   12034:	b	11c48 <__assert_fail@plt+0xdec>
   12038:	mov	r0, r4
   1203c:	strd	r2, [sp]
   12040:	bl	1145c <__assert_fail@plt+0x600>
   12044:	cmp	r8, #1
   12048:	ldrd	r2, [sp]
   1204c:	bne	11cb0 <__assert_fail@plt+0xe54>
   12050:	ldr	r1, [r4, #20]
   12054:	cmp	r1, #0
   12058:	beq	11cb0 <__assert_fail@plt+0xe54>
   1205c:	mov	r0, #0
   12060:	ldrb	ip, [r1]
   12064:	strb	r0, [r1]
   12068:	ldr	r1, [r4, #4]
   1206c:	str	ip, [sp, #16]
   12070:	cmp	r1, #32
   12074:	beq	11f04 <__assert_fail@plt+0x10a8>
   12078:	bhi	120bc <__assert_fail@plt+0x1260>
   1207c:	cmp	r1, #4
   12080:	beq	11e78 <__assert_fail@plt+0x101c>
   12084:	bhi	120dc <__assert_fail@plt+0x1280>
   12088:	cmp	r1, #1
   1208c:	beq	11ef0 <__assert_fail@plt+0x1094>
   12090:	cmp	r1, #2
   12094:	beq	11c38 <__assert_fail@plt+0xddc>
   12098:	b	11cf4 <__assert_fail@plt+0xe98>
   1209c:	ldr	r2, [r7]
   120a0:	ldr	r1, [r4, #16]
   120a4:	mov	r0, #1
   120a8:	vmov	s15, r2
   120ac:	vcvt.f64.f32	d7, s15
   120b0:	vmov	r2, r3, d7
   120b4:	bl	10dd8 <__printf_chk@plt>
   120b8:	b	11c48 <__assert_fail@plt+0xdec>
   120bc:	cmp	r1, #256	; 0x100
   120c0:	beq	11e68 <__assert_fail@plt+0x100c>
   120c4:	bhi	120f0 <__assert_fail@plt+0x1294>
   120c8:	cmp	r1, #64	; 0x40
   120cc:	beq	11eb0 <__assert_fail@plt+0x1054>
   120d0:	cmp	r1, #128	; 0x80
   120d4:	beq	11cdc <__assert_fail@plt+0xe80>
   120d8:	b	11cf4 <__assert_fail@plt+0xe98>
   120dc:	cmp	r1, #8
   120e0:	beq	11edc <__assert_fail@plt+0x1080>
   120e4:	cmp	r1, #16
   120e8:	beq	11d18 <__assert_fail@plt+0xebc>
   120ec:	b	11cf4 <__assert_fail@plt+0xe98>
   120f0:	cmp	r1, #512	; 0x200
   120f4:	beq	11f98 <__assert_fail@plt+0x113c>
   120f8:	cmp	r1, #1024	; 0x400
   120fc:	beq	11d60 <__assert_fail@plt+0xf04>
   12100:	b	11cf4 <__assert_fail@plt+0xe98>
   12104:	bl	10c88 <__stack_chk_fail@plt>
   12108:	andeq	r4, r2, r0, lsl #30
   1210c:	andeq	r5, r2, r0, asr r1
   12110:	andeq	r5, r2, r0, lsr #2
   12114:	andeq	r4, r1, r4, asr #23
   12118:	andeq	r0, r0, r2, lsl #8
   1211c:	andeq	r4, r1, r0, lsr #15
   12120:	andeq	r5, r2, r4, ror #2
   12124:	andeq	r5, r2, r4, asr r1
   12128:	ldr	r1, [pc, #52]	; 12164 <__assert_fail@plt+0x1308>
   1212c:	push	{lr}		; (str lr, [sp, #-4]!)
   12130:	sub	sp, sp, #20
   12134:	ldr	r3, [pc, #44]	; 12168 <__assert_fail@plt+0x130c>
   12138:	ldr	r2, [pc, #44]	; 1216c <__assert_fail@plt+0x1310>
   1213c:	ldr	r0, [r1]
   12140:	str	r3, [sp, #8]
   12144:	str	r3, [sp]
   12148:	str	r2, [sp, #4]
   1214c:	ldr	r3, [pc, #28]	; 12170 <__assert_fail@plt+0x1314>
   12150:	ldr	r2, [pc, #28]	; 12174 <__assert_fail@plt+0x1318>
   12154:	mov	r1, #1
   12158:	bl	10df0 <__fprintf_chk@plt>
   1215c:	mov	r0, #1
   12160:	bl	10d54 <exit@plt>
   12164:	andeq	r5, r2, r8, lsl #2
   12168:	andeq	r4, r1, r0, lsr #16
   1216c:	andeq	r4, r1, r4, asr #16
   12170:	ldrdeq	r4, [r1], -r0
   12174:	andeq	r4, r1, r0, lsl r8
   12178:	ldr	r3, [pc, #916]	; 12514 <__assert_fail@plt+0x16b8>
   1217c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12180:	sub	sp, sp, #20
   12184:	ldr	r4, [r1]
   12188:	ldr	r3, [r3]
   1218c:	str	r1, [sp, #4]
   12190:	mov	r6, r0
   12194:	mov	r1, #104	; 0x68
   12198:	ldr	r0, [r4]
   1219c:	str	r3, [sp, #12]
   121a0:	bl	10e2c <strrchr@plt>
   121a4:	cmp	r0, #0
   121a8:	str	r0, [sp, #8]
   121ac:	beq	121bc <__assert_fail@plt+0x1360>
   121b0:	ldrb	r3, [r0]
   121b4:	cmp	r3, #104	; 0x68
   121b8:	beq	124b4 <__assert_fail@plt+0x1658>
   121bc:	ldr	r5, [pc, #852]	; 12518 <__assert_fail@plt+0x16bc>
   121c0:	ldr	r7, [pc, #852]	; 1251c <__assert_fail@plt+0x16c0>
   121c4:	ldr	sl, [pc, #852]	; 12520 <__assert_fail@plt+0x16c4>
   121c8:	ldr	fp, [pc, #852]	; 12524 <__assert_fail@plt+0x16c8>
   121cc:	ldr	r8, [pc, #852]	; 12528 <__assert_fail@plt+0x16cc>
   121d0:	ldr	r9, [pc, #852]	; 1252c <__assert_fail@plt+0x16d0>
   121d4:	mov	r2, r5
   121d8:	mov	r1, r4
   121dc:	mov	r0, r6
   121e0:	bl	10d9c <getopt@plt>
   121e4:	cmn	r0, #1
   121e8:	beq	12470 <__assert_fail@plt+0x1614>
   121ec:	sub	r0, r0, #63	; 0x3f
   121f0:	cmp	r0, #57	; 0x39
   121f4:	ldrls	pc, [pc, r0, lsl #2]
   121f8:	b	121d4 <__assert_fail@plt+0x1378>
   121fc:	strdeq	r2, [r1], -ip
   12200:	ldrdeq	r2, [r1], -r4
   12204:	ldrdeq	r2, [r1], -r4
   12208:	ldrdeq	r2, [r1], -r4
   1220c:	strdeq	r2, [r1], -r0
   12210:	ldrdeq	r2, [r1], -r4
   12214:	ldrdeq	r2, [r1], -r4
   12218:	ldrdeq	r2, [r1], -r4
   1221c:	ldrdeq	r2, [r1], -r4
   12220:	ldrdeq	r2, [r1], -r4
   12224:	ldrdeq	r2, [r1], -r4
   12228:	ldrdeq	r2, [r1], -r4
   1222c:	ldrdeq	r2, [r1], -r4
   12230:	ldrdeq	r2, [r1], -r4
   12234:	ldrdeq	r2, [r1], -r4
   12238:	ldrdeq	r2, [r1], -r4
   1223c:	ldrdeq	r2, [r1], -r4
   12240:	ldrdeq	r2, [r1], -r4
   12244:	ldrdeq	r2, [r1], -r4
   12248:	ldrdeq	r2, [r1], -r4
   1224c:	ldrdeq	r2, [r1], -r4
   12250:	ldrdeq	r2, [r1], -r4
   12254:	ldrdeq	r2, [r1], -r4
   12258:	ldrdeq	r2, [r1], -r4
   1225c:	ldrdeq	r2, [r1], -r4
   12260:	ldrdeq	r2, [r1], -r4
   12264:	ldrdeq	r2, [r1], -r4
   12268:	ldrdeq	r2, [r1], -r4
   1226c:	ldrdeq	r2, [r1], -r4
   12270:	ldrdeq	r2, [r1], -r4
   12274:	ldrdeq	r2, [r1], -r4
   12278:	ldrdeq	r2, [r1], -r4
   1227c:	ldrdeq	r2, [r1], -r4
   12280:	ldrdeq	r2, [r1], -r4
   12284:	ldrdeq	r2, [r1], -r4
   12288:	ldrdeq	r2, [r1], -ip
   1228c:	andeq	r2, r1, r8, asr #7
   12290:			; <UNDEFINED> instruction: 0x000123b4
   12294:	andeq	r2, r1, r8, lsr #7
   12298:	muleq	r1, ip, r3
   1229c:	ldrdeq	r2, [r1], -r4
   122a0:	ldrdeq	r2, [r1], -r4
   122a4:	ldrdeq	r2, [r1], -r4
   122a8:	ldrdeq	r2, [r1], -r4
   122ac:	ldrdeq	r2, [r1], -r4
   122b0:	ldrdeq	r2, [r1], -r4
   122b4:	ldrdeq	r2, [r1], -r4
   122b8:	andeq	r2, r1, r8, ror #6
   122bc:	andeq	r2, r1, r4, asr r3
   122c0:	ldrdeq	r2, [r1], -r4
   122c4:	ldrdeq	r2, [r1], -r4
   122c8:	ldrdeq	r2, [r1], -r4
   122cc:	andeq	r2, r1, r4, lsl #6
   122d0:	ldrdeq	r2, [r1], -r4
   122d4:	ldrdeq	r2, [r1], -r4
   122d8:	strdeq	r2, [r1], -r8
   122dc:	ldrdeq	r2, [r1], -r4
   122e0:	andeq	r2, r1, r4, ror #5
   122e4:	mov	r0, r7
   122e8:	bl	13508 <__assert_fail@plt+0x26ac>
   122ec:	mov	r0, sl
   122f0:	bl	13508 <__assert_fail@plt+0x26ac>
   122f4:	b	121d4 <__assert_fail@plt+0x1378>
   122f8:	mov	r3, #0
   122fc:	str	r3, [fp]
   12300:	b	121d4 <__assert_fail@plt+0x1378>
   12304:	mov	r2, #0
   12308:	add	r1, sp, #8
   1230c:	ldr	r0, [r8]
   12310:	bl	10cd0 <strtoll@plt>
   12314:	cmp	r0, #0
   12318:	sbcs	r3, r1, #0
   1231c:	strd	r0, [r9]
   12320:	blt	12504 <__assert_fail@plt+0x16a8>
   12324:	ldr	r3, [sp, #8]
   12328:	ldrb	r3, [r3]
   1232c:	cmp	r3, #107	; 0x6b
   12330:	beq	1245c <__assert_fail@plt+0x1600>
   12334:	cmp	r3, #109	; 0x6d
   12338:	beq	12448 <__assert_fail@plt+0x15ec>
   1233c:	cmp	r3, #98	; 0x62
   12340:	lsleq	r3, r1, #9
   12344:	orreq	r3, r3, r0, lsr #23
   12348:	lsleq	r0, r0, #9
   1234c:	stmeq	r9, {r0, r3}
   12350:	b	121d4 <__assert_fail@plt+0x1378>
   12354:	mov	r0, r7
   12358:	bl	13508 <__assert_fail@plt+0x26ac>
   1235c:	ldr	r0, [pc, #460]	; 12530 <__assert_fail@plt+0x16d4>
   12360:	bl	13508 <__assert_fail@plt+0x26ac>
   12364:	b	121d4 <__assert_fail@plt+0x1378>
   12368:	mov	r2, #10
   1236c:	mov	r1, #0
   12370:	ldr	r0, [r8]
   12374:	bl	10cd0 <strtoll@plt>
   12378:	ldr	r3, [pc, #436]	; 12534 <__assert_fail@plt+0x16d8>
   1237c:	cmp	r0, #0
   12380:	sbcs	r2, r1, #0
   12384:	strd	r0, [r3]
   12388:	bge	121d4 <__assert_fail@plt+0x1378>
   1238c:	ldr	r2, [r8]
   12390:	ldr	r1, [pc, #416]	; 12538 <__assert_fail@plt+0x16dc>
   12394:	mov	r0, #1
   12398:	bl	10e20 <errx@plt>
   1239c:	ldr	r0, [r8]
   123a0:	bl	13770 <__assert_fail@plt+0x2914>
   123a4:	b	121d4 <__assert_fail@plt+0x1378>
   123a8:	ldr	r0, [r8]
   123ac:	bl	13508 <__assert_fail@plt+0x26ac>
   123b0:	b	121d4 <__assert_fail@plt+0x1378>
   123b4:	mov	r0, r7
   123b8:	bl	13508 <__assert_fail@plt+0x26ac>
   123bc:	ldr	r0, [pc, #376]	; 1253c <__assert_fail@plt+0x16e0>
   123c0:	bl	13508 <__assert_fail@plt+0x26ac>
   123c4:	b	121d4 <__assert_fail@plt+0x1378>
   123c8:	mov	r0, r7
   123cc:	bl	13508 <__assert_fail@plt+0x26ac>
   123d0:	ldr	r0, [pc, #360]	; 12540 <__assert_fail@plt+0x16e4>
   123d4:	bl	13508 <__assert_fail@plt+0x26ac>
   123d8:	b	121d4 <__assert_fail@plt+0x1378>
   123dc:	mov	r0, r7
   123e0:	bl	13508 <__assert_fail@plt+0x26ac>
   123e4:	ldr	r0, [pc, #344]	; 12544 <__assert_fail@plt+0x16e8>
   123e8:	bl	13508 <__assert_fail@plt+0x26ac>
   123ec:	b	121d4 <__assert_fail@plt+0x1378>
   123f0:	ldr	r0, [r4]
   123f4:	mov	r1, #104	; 0x68
   123f8:	bl	10c94 <rindex@plt>
   123fc:	cmp	r0, #0
   12400:	str	r0, [sp, #8]
   12404:	beq	1242c <__assert_fail@plt+0x15d0>
   12408:	ldrb	r3, [r0]
   1240c:	cmp	r3, #104	; 0x68
   12410:	bne	1242c <__assert_fail@plt+0x15d0>
   12414:	ldrb	r3, [r0, #1]
   12418:	cmp	r3, #100	; 0x64
   1241c:	bne	1242c <__assert_fail@plt+0x15d0>
   12420:	ldrb	r3, [r0, #2]
   12424:	cmp	r3, #0
   12428:	beq	124fc <__assert_fail@plt+0x16a0>
   1242c:	ldr	r0, [pc, #276]	; 12548 <__assert_fail@plt+0x16ec>
   12430:	bl	13508 <__assert_fail@plt+0x26ac>
   12434:	ldr	r0, [pc, #272]	; 1254c <__assert_fail@plt+0x16f0>
   12438:	bl	13508 <__assert_fail@plt+0x26ac>
   1243c:	ldr	r0, [pc, #268]	; 12550 <__assert_fail@plt+0x16f4>
   12440:	bl	13508 <__assert_fail@plt+0x26ac>
   12444:	b	121d4 <__assert_fail@plt+0x1378>
   12448:	lsl	r3, r1, #20
   1244c:	orr	r3, r3, r0, lsr #12
   12450:	lsl	r0, r0, #20
   12454:	stm	r9, {r0, r3}
   12458:	b	121d4 <__assert_fail@plt+0x1378>
   1245c:	lsl	r3, r1, #10
   12460:	orr	r3, r3, r0, lsr #22
   12464:	lsl	r0, r0, #10
   12468:	stm	r9, {r0, r3}
   1246c:	b	121d4 <__assert_fail@plt+0x1378>
   12470:	ldr	r3, [pc, #220]	; 12554 <__assert_fail@plt+0x16f8>
   12474:	ldr	r3, [r3]
   12478:	cmp	r3, #0
   1247c:	beq	124e8 <__assert_fail@plt+0x168c>
   12480:	ldr	r1, [pc, #208]	; 12558 <__assert_fail@plt+0x16fc>
   12484:	ldr	r0, [sp, #4]
   12488:	ldr	r2, [sp, #12]
   1248c:	ldr	r1, [r1]
   12490:	ldr	r3, [r0]
   12494:	add	r3, r3, r1, lsl #2
   12498:	str	r3, [r0]
   1249c:	ldr	r3, [pc, #112]	; 12514 <__assert_fail@plt+0x16b8>
   124a0:	ldr	r3, [r3]
   124a4:	cmp	r2, r3
   124a8:	bne	12500 <__assert_fail@plt+0x16a4>
   124ac:	add	sp, sp, #20
   124b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b4:	ldrb	r3, [r0, #1]
   124b8:	cmp	r3, #100	; 0x64
   124bc:	bne	121bc <__assert_fail@plt+0x1360>
   124c0:	ldrb	r3, [r0, #2]
   124c4:	cmp	r3, #0
   124c8:	bne	121bc <__assert_fail@plt+0x1360>
   124cc:	ldr	r0, [pc, #116]	; 12548 <__assert_fail@plt+0x16ec>
   124d0:	bl	13508 <__assert_fail@plt+0x26ac>
   124d4:	ldr	r0, [pc, #112]	; 1254c <__assert_fail@plt+0x16f0>
   124d8:	bl	13508 <__assert_fail@plt+0x26ac>
   124dc:	ldr	r0, [pc, #108]	; 12550 <__assert_fail@plt+0x16f4>
   124e0:	bl	13508 <__assert_fail@plt+0x26ac>
   124e4:	b	121bc <__assert_fail@plt+0x1360>
   124e8:	ldr	r0, [pc, #44]	; 1251c <__assert_fail@plt+0x16c0>
   124ec:	bl	13508 <__assert_fail@plt+0x26ac>
   124f0:	ldr	r0, [pc, #100]	; 1255c <__assert_fail@plt+0x1700>
   124f4:	bl	13508 <__assert_fail@plt+0x26ac>
   124f8:	b	12480 <__assert_fail@plt+0x1624>
   124fc:	bl	12128 <__assert_fail@plt+0x12cc>
   12500:	bl	10c88 <__stack_chk_fail@plt>
   12504:	ldr	r2, [r8]
   12508:	ldr	r1, [pc, #80]	; 12560 <__assert_fail@plt+0x1704>
   1250c:	mov	r0, #1
   12510:	bl	10e20 <errx@plt>
   12514:	andeq	r4, r2, r0, lsl #30
   12518:	andeq	r4, r1, ip, lsr #19
   1251c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12520:	andeq	r4, r1, ip, lsl #19
   12524:	andeq	r5, r2, r4, ror #1
   12528:	andeq	r5, r2, r8, lsl r1
   1252c:	andeq	r5, r2, r8, asr r1
   12530:	andeq	r4, r1, r8, asr r9
   12534:	andeq	r5, r2, r8, ror #1
   12538:	andeq	r4, r1, r0, asr #18
   1253c:	andeq	r4, r1, r0, lsr #18
   12540:	andeq	r4, r1, r0, lsl #18
   12544:	andeq	r4, r1, r0, ror #17
   12548:	andeq	r4, r1, r4, lsl #17
   1254c:	muleq	r1, r0, r8
   12550:			; <UNDEFINED> instruction: 0x000148bc
   12554:	andeq	r5, r2, r0, asr r1
   12558:	andeq	r5, r2, r0, lsl #2
   1255c:			; <UNDEFINED> instruction: 0x000149bc
   12560:	andeq	r4, r1, r8, ror r9
   12564:	push	{r4, r5, r6, lr}
   12568:	mov	r5, r0
   1256c:	ldr	r4, [pc, #36]	; 12598 <__assert_fail@plt+0x173c>
   12570:	ldr	r3, [r4]
   12574:	cmp	r3, #0
   12578:	beq	12584 <__assert_fail@plt+0x1728>
   1257c:	ldr	r0, [pc, #24]	; 1259c <__assert_fail@plt+0x1740>
   12580:	bl	13508 <__assert_fail@plt+0x26ac>
   12584:	mov	r0, r5
   12588:	bl	13508 <__assert_fail@plt+0x26ac>
   1258c:	mov	r3, #1
   12590:	str	r3, [r4]
   12594:	pop	{r4, r5, r6, pc}
   12598:	andeq	r5, r2, r0, asr #2
   1259c:	ldrdeq	r4, [r1], -ip
   125a0:	ldr	r3, [pc, #1152]	; 12a28 <__assert_fail@plt+0x1bcc>
   125a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125a8:	mov	r7, r0
   125ac:	ldr	r8, [pc, #1144]	; 12a2c <__assert_fail@plt+0x1bd0>
   125b0:	sub	sp, sp, #60	; 0x3c
   125b4:	ldr	r3, [r3]
   125b8:	str	r3, [sp, #52]	; 0x34
   125bc:	ldrb	r6, [r7]
   125c0:	cmp	r6, #0
   125c4:	beq	126c0 <__assert_fail@plt+0x1864>
   125c8:	sub	r3, r6, #97	; 0x61
   125cc:	add	r4, r7, #1
   125d0:	cmp	r3, #23
   125d4:	ldrls	pc, [pc, r3, lsl #2]
   125d8:	b	129e8 <__assert_fail@plt+0x1b8c>
   125dc:	andeq	r2, r1, r4, asr #14
   125e0:	andeq	r2, r1, r8, ror #19
   125e4:	andeq	r2, r1, r4, lsr r7
   125e8:	ldrdeq	r2, [r1], -ip
   125ec:	andeq	r2, r1, r8, ror #19
   125f0:	andeq	r2, r1, ip, lsr r6
   125f4:	andeq	r2, r1, r8, ror #19
   125f8:	andeq	r2, r1, r8, ror #19
   125fc:	andeq	r2, r1, r8, ror #19
   12600:	andeq	r2, r1, r8, ror #19
   12604:	andeq	r2, r1, r8, ror #19
   12608:	andeq	r2, r1, r8, ror #19
   1260c:	andeq	r2, r1, r8, ror #19
   12610:	andeq	r2, r1, r8, ror #19
   12614:	ldrdeq	r2, [r1], -ip
   12618:	andeq	r2, r1, r8, ror #19
   1261c:	andeq	r2, r1, r8, ror #19
   12620:	andeq	r2, r1, r8, ror #19
   12624:	andeq	r2, r1, r8, ror #19
   12628:	andeq	r2, r1, r8, ror #19
   1262c:	ldrdeq	r2, [r1], -ip
   12630:	andeq	r2, r1, r8, ror #19
   12634:	andeq	r2, r1, r8, ror #19
   12638:	ldrdeq	r2, [r1], -ip
   1263c:	ldrb	r5, [r7, #1]
   12640:	cmp	r5, #70	; 0x46
   12644:	beq	12890 <__assert_fail@plt+0x1a34>
   12648:	cmp	r5, #76	; 0x4c
   1264c:	beq	12878 <__assert_fail@plt+0x1a1c>
   12650:	cmp	r5, #68	; 0x44
   12654:	beq	12878 <__assert_fail@plt+0x1a1c>
   12658:	bl	10d48 <__ctype_b_loc@plt>
   1265c:	lsl	r5, r5, #1
   12660:	ldr	r3, [r0]
   12664:	ldrh	r3, [r3, r5]
   12668:	tst	r3, #2048	; 0x800
   1266c:	bne	12968 <__assert_fail@plt+0x1b0c>
   12670:	mov	r7, r4
   12674:	mov	r2, #23
   12678:	mov	r3, #2
   1267c:	mov	r0, #8
   12680:	mov	r1, #15
   12684:	stm	sp, {r0, r2}
   12688:	str	r1, [sp, #8]
   1268c:	ldr	r2, [pc, #924]	; 12a30 <__assert_fail@plt+0x1bd4>
   12690:	mov	r1, #1
   12694:	add	r0, sp, #48	; 0x30
   12698:	bl	10d00 <__asprintf_chk@plt>
   1269c:	ldr	r0, [sp, #48]	; 0x30
   126a0:	cmp	r0, #0
   126a4:	beq	129f8 <__assert_fail@plt+0x1b9c>
   126a8:	bl	12564 <__assert_fail@plt+0x1708>
   126ac:	ldr	r0, [sp, #48]	; 0x30
   126b0:	bl	10c4c <free@plt>
   126b4:	ldrb	r6, [r7]
   126b8:	cmp	r6, #0
   126bc:	bne	125c8 <__assert_fail@plt+0x176c>
   126c0:	ldr	r3, [pc, #864]	; 12a28 <__assert_fail@plt+0x1bcc>
   126c4:	ldr	r2, [sp, #52]	; 0x34
   126c8:	ldr	r3, [r3]
   126cc:	cmp	r2, r3
   126d0:	bne	12a04 <__assert_fail@plt+0x1ba8>
   126d4:	add	sp, sp, #60	; 0x3c
   126d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126dc:	ldrb	r5, [r7, #1]
   126e0:	sub	r3, r5, #67	; 0x43
   126e4:	cmp	r3, #16
   126e8:	ldrls	pc, [pc, r3, lsl #2]
   126ec:	b	12844 <__assert_fail@plt+0x19e8>
   126f0:	andeq	r2, r1, r8, lsr #16
   126f4:	andeq	r2, r1, r4, asr #16
   126f8:	andeq	r2, r1, r4, asr #16
   126fc:	andeq	r2, r1, r4, asr #16
   12700:	andeq	r2, r1, r4, asr #16
   12704:	andeq	r2, r1, r4, asr #16
   12708:	andeq	r2, r1, r4, asr r7
   1270c:	andeq	r2, r1, r4, asr #16
   12710:	andeq	r2, r1, r4, asr #16
   12714:	andeq	r2, r1, r4, asr r7
   12718:	andeq	r2, r1, r4, asr #16
   1271c:	andeq	r2, r1, r4, asr #16
   12720:	andeq	r2, r1, r4, asr #16
   12724:	andeq	r2, r1, r4, asr #16
   12728:	andeq	r2, r1, r4, asr #16
   1272c:	andeq	r2, r1, r4, asr #16
   12730:	andeq	r2, r1, ip, lsl #16
   12734:	ldr	r0, [pc, #760]	; 12a34 <__assert_fail@plt+0x1bd8>
   12738:	mov	r7, r4
   1273c:	bl	12564 <__assert_fail@plt+0x1708>
   12740:	b	125bc <__assert_fail@plt+0x1760>
   12744:	ldr	r0, [pc, #748]	; 12a38 <__assert_fail@plt+0x1bdc>
   12748:	mov	r7, r4
   1274c:	bl	12564 <__assert_fail@plt+0x1708>
   12750:	b	125bc <__assert_fail@plt+0x1760>
   12754:	mov	r3, #4
   12758:	add	r7, r7, #2
   1275c:	mov	sl, r3
   12760:	mov	r0, #16
   12764:	mvn	r4, #0
   12768:	mov	r5, #0
   1276c:	cmp	r6, #120	; 0x78
   12770:	moveq	ip, #4
   12774:	movne	ip, #3
   12778:	rsb	fp, ip, #32
   1277c:	sub	r9, ip, #32
   12780:	mov	r1, #0
   12784:	lsr	r2, r4, ip
   12788:	orr	r2, r2, r5, lsl fp
   1278c:	lsr	lr, r5, ip
   12790:	orr	r2, r2, r5, lsr r9
   12794:	mov	r5, lr
   12798:	mov	r4, r2
   1279c:	orrs	r2, r4, r5
   127a0:	add	r1, r1, #1
   127a4:	bne	12784 <__assert_fail@plt+0x1928>
   127a8:	cmp	r6, #100	; 0x64
   127ac:	addeq	r1, r1, #1
   127b0:	subeq	r0, r0, r1
   127b4:	moveq	r2, r8
   127b8:	beq	127cc <__assert_fail@plt+0x1970>
   127bc:	cmp	r6, #117	; 0x75
   127c0:	ldr	r2, [pc, #628]	; 12a3c <__assert_fail@plt+0x1be0>
   127c4:	sub	r0, r0, r1
   127c8:	moveq	r2, r8
   127cc:	str	r1, [sp, #16]
   127d0:	str	r2, [sp, #12]
   127d4:	stmib	sp, {r0, r8}
   127d8:	str	r6, [sp, #20]
   127dc:	str	sl, [sp]
   127e0:	ldr	r2, [pc, #600]	; 12a40 <__assert_fail@plt+0x1be4>
   127e4:	mov	r1, #1
   127e8:	add	r0, sp, #40	; 0x28
   127ec:	bl	10d00 <__asprintf_chk@plt>
   127f0:	ldr	r0, [sp, #40]	; 0x28
   127f4:	cmp	r0, #0
   127f8:	beq	129f8 <__assert_fail@plt+0x1b9c>
   127fc:	bl	12564 <__assert_fail@plt+0x1708>
   12800:	ldr	r0, [sp, #40]	; 0x28
   12804:	bl	10c4c <free@plt>
   12808:	b	125bc <__assert_fail@plt+0x1760>
   1280c:	mov	r0, #8
   12810:	add	r7, r7, #2
   12814:	mov	r3, r0
   12818:	ldr	r4, [pc, #548]	; 12a44 <__assert_fail@plt+0x1be8>
   1281c:	mov	r5, #0
   12820:	mov	sl, #2
   12824:	b	1276c <__assert_fail@plt+0x1910>
   12828:	add	r7, r7, #2
   1282c:	mov	r0, #4
   12830:	mov	r3, #16
   12834:	mov	r4, #255	; 0xff
   12838:	mov	r5, #0
   1283c:	mov	sl, #1
   12840:	b	1276c <__assert_fail@plt+0x1910>
   12844:	bl	10d48 <__ctype_b_loc@plt>
   12848:	lsl	r5, r5, #1
   1284c:	ldr	r3, [r0]
   12850:	ldrh	r3, [r3, r5]
   12854:	tst	r3, #2048	; 0x800
   12858:	bne	128a8 <__assert_fail@plt+0x1a4c>
   1285c:	mov	r3, #4
   12860:	mov	r7, r4
   12864:	mov	sl, r3
   12868:	mov	r0, #16
   1286c:	mvn	r4, #0
   12870:	mov	r5, #0
   12874:	b	1276c <__assert_fail@plt+0x1910>
   12878:	add	r7, r7, #2
   1287c:	mov	r2, #23
   12880:	mov	r3, #2
   12884:	mov	r0, #8
   12888:	mov	r1, #15
   1288c:	b	12684 <__assert_fail@plt+0x1828>
   12890:	mov	r3, #4
   12894:	add	r7, r7, #2
   12898:	mov	r0, r3
   1289c:	mov	r2, #14
   128a0:	mov	r1, #6
   128a4:	b	12684 <__assert_fail@plt+0x1828>
   128a8:	bl	10db4 <__errno_location@plt>
   128ac:	mov	r3, #0
   128b0:	mov	r2, #10
   128b4:	add	r1, sp, #36	; 0x24
   128b8:	str	r3, [r0]
   128bc:	mov	r5, r0
   128c0:	mov	r0, r4
   128c4:	bl	10d6c <strtoul@plt>
   128c8:	ldr	r2, [r5]
   128cc:	cmp	r2, #0
   128d0:	clz	r3, r0
   128d4:	lsr	r3, r3, #5
   128d8:	movne	r3, #1
   128dc:	subs	r1, r0, #4
   128e0:	movne	r1, #1
   128e4:	cmp	r3, #0
   128e8:	mov	sl, r0
   128ec:	bne	12a08 <__assert_fail@plt+0x1bac>
   128f0:	sub	r9, r0, #1
   128f4:	cmp	r9, #1
   128f8:	movls	r9, #0
   128fc:	andhi	r9, r1, #1
   12900:	cmp	r9, #0
   12904:	bne	12a18 <__assert_fail@plt+0x1bbc>
   12908:	lsl	r3, r0, #3
   1290c:	mov	r2, #1
   12910:	sub	r1, r3, #32
   12914:	rsb	r0, r3, #32
   12918:	lsl	r1, r2, r1
   1291c:	str	r1, [sp, #28]
   12920:	ldr	ip, [sp, #28]
   12924:	lsl	r3, r2, r3
   12928:	orr	r0, ip, r2, lsr r0
   1292c:	str	r3, [sp, #24]
   12930:	str	r0, [sp, #28]
   12934:	ldrd	r4, [sp, #24]
   12938:	mov	r1, sl
   1293c:	mov	r0, #16
   12940:	subs	r4, r4, #1
   12944:	sbc	r5, r5, #0
   12948:	bl	13f2c <__assert_fail@plt+0x30d0>
   1294c:	orrs	r2, r4, r5
   12950:	ldr	r7, [sp, #36]	; 0x24
   12954:	moveq	r1, r9
   12958:	mov	r3, r0
   1295c:	lsl	r0, sl, #2
   12960:	beq	127a8 <__assert_fail@plt+0x194c>
   12964:	b	1276c <__assert_fail@plt+0x1910>
   12968:	bl	10db4 <__errno_location@plt>
   1296c:	mov	r3, #0
   12970:	mov	r2, #10
   12974:	add	r1, sp, #44	; 0x2c
   12978:	str	r3, [r0]
   1297c:	mov	r5, r0
   12980:	mov	r0, r4
   12984:	bl	10d6c <strtoul@plt>
   12988:	ldr	r2, [r5]
   1298c:	cmp	r2, #0
   12990:	clz	r3, r0
   12994:	lsr	r3, r3, #5
   12998:	movne	r3, #1
   1299c:	cmp	r3, #0
   129a0:	bne	12a08 <__assert_fail@plt+0x1bac>
   129a4:	cmp	r0, #4
   129a8:	ldr	r7, [sp, #44]	; 0x2c
   129ac:	beq	129c8 <__assert_fail@plt+0x1b6c>
   129b0:	cmp	r0, #8
   129b4:	beq	129d8 <__assert_fail@plt+0x1b7c>
   129b8:	mov	r2, r0
   129bc:	ldr	r1, [pc, #132]	; 12a48 <__assert_fail@plt+0x1bec>
   129c0:	mov	r0, #1
   129c4:	bl	10e20 <errx@plt>
   129c8:	mov	r2, #14
   129cc:	mov	r3, r0
   129d0:	mov	r1, #6
   129d4:	b	12684 <__assert_fail@plt+0x1828>
   129d8:	mov	r2, #23
   129dc:	mov	r3, #2
   129e0:	mov	r1, #15
   129e4:	b	12684 <__assert_fail@plt+0x1828>
   129e8:	mov	r2, r6
   129ec:	ldr	r1, [pc, #88]	; 12a4c <__assert_fail@plt+0x1bf0>
   129f0:	mov	r0, #1
   129f4:	bl	10e20 <errx@plt>
   129f8:	mov	r1, #0
   129fc:	mov	r0, #1
   12a00:	bl	10ca0 <err@plt>
   12a04:	bl	10c88 <__stack_chk_fail@plt>
   12a08:	mov	r2, r4
   12a0c:	ldr	r1, [pc, #60]	; 12a50 <__assert_fail@plt+0x1bf4>
   12a10:	mov	r0, #1
   12a14:	bl	10e20 <errx@plt>
   12a18:	mov	r2, r0
   12a1c:	ldr	r1, [pc, #48]	; 12a54 <__assert_fail@plt+0x1bf8>
   12a20:	mov	r0, #1
   12a24:	bl	10e20 <errx@plt>
   12a28:	andeq	r4, r2, r0, lsl #30
   12a2c:	andeq	r4, r1, r4, asr #23
   12a30:	andeq	r4, r1, r0, ror sl
   12a34:	andeq	r4, r1, ip, lsl #18
   12a38:	andeq	r4, r1, ip, ror #19
   12a3c:	andeq	r4, r1, r8, ror #19
   12a40:	andeq	r4, r1, r0, lsr sl
   12a44:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   12a48:	andeq	r4, r1, ip, asr #20
   12a4c:	andeq	r4, r1, ip, lsl #21
   12a50:	andeq	r4, r1, r0, lsl #20
   12a54:	andeq	r4, r1, r4, lsl sl
   12a58:	ldr	r3, [pc, #1668]	; 130e4 <__assert_fail@plt+0x2288>
   12a5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a60:	sub	sp, sp, #20
   12a64:	ldr	r3, [r3]
   12a68:	mov	r4, r0
   12a6c:	ldr	r0, [pc, #1652]	; 130e8 <__assert_fail@plt+0x228c>
   12a70:	mov	r8, r1
   12a74:	str	r3, [sp, #12]
   12a78:	bl	13508 <__assert_fail@plt+0x26ac>
   12a7c:	ldr	r0, [pc, #1640]	; 130ec <__assert_fail@plt+0x2290>
   12a80:	bl	13508 <__assert_fail@plt+0x26ac>
   12a84:	ldr	r5, [pc, #1636]	; 130f0 <__assert_fail@plt+0x2294>
   12a88:	ldr	r3, [pc, #1636]	; 130f4 <__assert_fail@plt+0x2298>
   12a8c:	ldr	fp, [pc, #1636]	; 130f8 <__assert_fail@plt+0x229c>
   12a90:	ldr	r7, [pc, #1636]	; 130fc <__assert_fail@plt+0x22a0>
   12a94:	ldr	sl, [pc, #1636]	; 13100 <__assert_fail@plt+0x22a4>
   12a98:	mov	r2, #1
   12a9c:	ldr	r6, [r8]
   12aa0:	str	r2, [r3]
   12aa4:	mov	r2, r5
   12aa8:	mov	r1, r6
   12aac:	mov	r0, r4
   12ab0:	bl	10d9c <getopt@plt>
   12ab4:	cmn	r0, #1
   12ab8:	beq	12df4 <__assert_fail@plt+0x1f98>
   12abc:	sub	r0, r0, #65	; 0x41
   12ac0:	cmp	r0, #55	; 0x37
   12ac4:	ldrls	pc, [pc, r0, lsl #2]
   12ac8:	b	12ff8 <__assert_fail@plt+0x219c>
   12acc:	andeq	r2, r1, ip, ror #25
   12ad0:	andeq	r2, r1, r0, ror #25
   12ad4:	strdeq	r2, [r1], -r8
   12ad8:	ldrdeq	r2, [r1], -r4
   12adc:	strdeq	r2, [r1], -r8
   12ae0:	andeq	r2, r1, r8, asr #25
   12ae4:	strdeq	r2, [r1], -r8
   12ae8:			; <UNDEFINED> instruction: 0x00012cbc
   12aec:			; <UNDEFINED> instruction: 0x00012cb0
   12af0:	strdeq	r2, [r1], -r8
   12af4:	strdeq	r2, [r1], -r8
   12af8:			; <UNDEFINED> instruction: 0x00012cb0
   12afc:	strdeq	r2, [r1], -r8
   12b00:	andeq	r2, r1, ip, ror ip
   12b04:	muleq	r1, r4, sp
   12b08:	strdeq	r2, [r1], -r8
   12b0c:	strdeq	r2, [r1], -r8
   12b10:	strdeq	r2, [r1], -r8
   12b14:	strdeq	r2, [r1], -r8
   12b18:	strdeq	r2, [r1], -r8
   12b1c:	strdeq	r2, [r1], -r8
   12b20:	strdeq	r2, [r1], -r8
   12b24:	strdeq	r2, [r1], -r8
   12b28:			; <UNDEFINED> instruction: 0x00012cbc
   12b2c:	strdeq	r2, [r1], -r8
   12b30:	strdeq	r2, [r1], -r8
   12b34:	strdeq	r2, [r1], -r8
   12b38:	strdeq	r2, [r1], -r8
   12b3c:	strdeq	r2, [r1], -r8
   12b40:	strdeq	r2, [r1], -r8
   12b44:	strdeq	r2, [r1], -r8
   12b48:	strdeq	r2, [r1], -r8
   12b4c:	andeq	r2, r1, r8, lsl #27
   12b50:	andeq	r2, r1, r4, ror #26
   12b54:	andeq	r2, r1, r8, asr sp
   12b58:	andeq	r2, r1, ip, ror sp
   12b5c:	andeq	r2, r1, r8, asr #25
   12b60:	andeq	r2, r1, r0, ror sp
   12b64:	strdeq	r2, [r1], -r8
   12b68:	andeq	r2, r1, r0, ror ip
   12b6c:	andeq	r2, r1, r4, ror #24
   12b70:	ldrdeq	r2, [r1], -r0
   12b74:	strdeq	r2, [r1], -r8
   12b78:			; <UNDEFINED> instruction: 0x00012cb0
   12b7c:	strdeq	r2, [r1], -r8
   12b80:	strdeq	r2, [r1], -r8
   12b84:	andeq	r2, r1, r0, ror #25
   12b88:	strdeq	r2, [r1], -r8
   12b8c:	strdeq	r2, [r1], -r8
   12b90:	strdeq	r2, [r1], -r8
   12b94:	andeq	r2, r1, r4, asr #23
   12b98:			; <UNDEFINED> instruction: 0x00012bb8
   12b9c:	strdeq	r2, [r1], -r8
   12ba0:	andeq	r2, r1, ip, lsr #23
   12ba4:	strdeq	r2, [r1], -r8
   12ba8:	andeq	r2, r1, r0, ror ip
   12bac:	mov	r3, #0
   12bb0:	str	r3, [fp]
   12bb4:	b	12aa4 <__assert_fail@plt+0x1c48>
   12bb8:	ldr	r0, [r7]
   12bbc:	bl	125a0 <__assert_fail@plt+0x1744>
   12bc0:	b	12aa4 <__assert_fail@plt+0x1c48>
   12bc4:	mov	r0, sl
   12bc8:	bl	125a0 <__assert_fail@plt+0x1744>
   12bcc:	b	12aa4 <__assert_fail@plt+0x1c48>
   12bd0:	bl	10db4 <__errno_location@plt>
   12bd4:	mov	r2, #0
   12bd8:	add	r1, sp, #4
   12bdc:	str	r2, [r0]
   12be0:	mov	r9, r0
   12be4:	ldr	r0, [r7]
   12be8:	bl	10cd0 <strtoll@plt>
   12bec:	ldr	r3, [pc, #1296]	; 13104 <__assert_fail@plt+0x22a8>
   12bf0:	mov	r2, r0
   12bf4:	ldr	r0, [sp, #4]
   12bf8:	str	r2, [r3]
   12bfc:	str	r1, [r3, #4]
   12c00:	ldrb	ip, [r0]
   12c04:	cmp	ip, #98	; 0x62
   12c08:	beq	12e44 <__assert_fail@plt+0x1fe8>
   12c0c:	cmp	ip, #107	; 0x6b
   12c10:	beq	12e5c <__assert_fail@plt+0x2000>
   12c14:	cmp	ip, #109	; 0x6d
   12c18:	lsleq	r1, r1, #20
   12c1c:	orreq	r1, r1, r2, lsr #12
   12c20:	lsleq	r2, r2, #20
   12c24:	streq	r1, [r3, #4]
   12c28:	streq	r2, [r3]
   12c2c:	ldr	r2, [r9]
   12c30:	cmp	r2, #0
   12c34:	bne	12c54 <__assert_fail@plt+0x1df8>
   12c38:	ldrd	r2, [r3]
   12c3c:	cmp	r2, #0
   12c40:	sbcs	r3, r3, #0
   12c44:	blt	12c54 <__assert_fail@plt+0x1df8>
   12c48:	bl	10d78 <strlen@plt>
   12c4c:	cmp	r0, #1
   12c50:	bls	12aa4 <__assert_fail@plt+0x1c48>
   12c54:	ldr	r2, [r7]
   12c58:	ldr	r1, [pc, #1192]	; 13108 <__assert_fail@plt+0x22ac>
   12c5c:	mov	r0, #1
   12c60:	bl	10e20 <errx@plt>
   12c64:	ldr	r0, [pc, #1184]	; 1310c <__assert_fail@plt+0x22b0>
   12c68:	bl	125a0 <__assert_fail@plt+0x1744>
   12c6c:	b	12aa4 <__assert_fail@plt+0x1c48>
   12c70:	ldr	r0, [pc, #1176]	; 13110 <__assert_fail@plt+0x22b4>
   12c74:	bl	125a0 <__assert_fail@plt+0x1744>
   12c78:	b	12aa4 <__assert_fail@plt+0x1c48>
   12c7c:	mov	r2, #10
   12c80:	mov	r1, #0
   12c84:	ldr	r0, [r7]
   12c88:	bl	10cd0 <strtoll@plt>
   12c8c:	cmp	r0, #1
   12c90:	sbcs	r3, r1, #0
   12c94:	ldr	r3, [pc, #1144]	; 13114 <__assert_fail@plt+0x22b8>
   12c98:	strd	r0, [r3]
   12c9c:	bge	12aa4 <__assert_fail@plt+0x1c48>
   12ca0:	ldr	r2, [r7]
   12ca4:	ldr	r1, [pc, #1132]	; 13118 <__assert_fail@plt+0x22bc>
   12ca8:	mov	r0, #1
   12cac:	bl	10e20 <errx@plt>
   12cb0:	ldr	r0, [pc, #1124]	; 1311c <__assert_fail@plt+0x22c0>
   12cb4:	bl	125a0 <__assert_fail@plt+0x1744>
   12cb8:	b	12aa4 <__assert_fail@plt+0x1c48>
   12cbc:	ldr	r0, [pc, #1116]	; 13120 <__assert_fail@plt+0x22c4>
   12cc0:	bl	125a0 <__assert_fail@plt+0x1744>
   12cc4:	b	12aa4 <__assert_fail@plt+0x1c48>
   12cc8:	ldr	r0, [pc, #1108]	; 13124 <__assert_fail@plt+0x22c8>
   12ccc:	bl	125a0 <__assert_fail@plt+0x1744>
   12cd0:	b	12aa4 <__assert_fail@plt+0x1c48>
   12cd4:	ldr	r0, [pc, #1100]	; 13128 <__assert_fail@plt+0x22cc>
   12cd8:	bl	125a0 <__assert_fail@plt+0x1744>
   12cdc:	b	12aa4 <__assert_fail@plt+0x1c48>
   12ce0:	ldr	r0, [pc, #1092]	; 1312c <__assert_fail@plt+0x22d0>
   12ce4:	bl	125a0 <__assert_fail@plt+0x1744>
   12ce8:	b	12aa4 <__assert_fail@plt+0x1c48>
   12cec:	ldr	r2, [r7]
   12cf0:	ldrb	r1, [r2]
   12cf4:	sub	r3, r1, #100	; 0x64
   12cf8:	cmp	r3, #20
   12cfc:	ldrls	pc, [pc, r3, lsl #2]
   12d00:	b	130d8 <__assert_fail@plt+0x227c>
   12d04:	andeq	r2, r1, r8, asr #27
   12d08:	ldrdeq	r3, [r1], -r8
   12d0c:	ldrdeq	r3, [r1], -r8
   12d10:	ldrdeq	r3, [r1], -r8
   12d14:	ldrdeq	r3, [r1], -r8
   12d18:	ldrdeq	r3, [r1], -r8
   12d1c:	ldrdeq	r3, [r1], -r8
   12d20:	ldrdeq	r3, [r1], -r8
   12d24:	ldrdeq	r3, [r1], -r8
   12d28:	ldrdeq	r3, [r1], -r8
   12d2c:	andeq	r2, r1, r0, lsr #27
   12d30:	andeq	r2, r1, r8, asr #27
   12d34:	ldrdeq	r3, [r1], -r8
   12d38:	ldrdeq	r3, [r1], -r8
   12d3c:	ldrdeq	r3, [r1], -r8
   12d40:	ldrdeq	r3, [r1], -r8
   12d44:	ldrdeq	r3, [r1], -r8
   12d48:	ldrdeq	r3, [r1], -r8
   12d4c:	ldrdeq	r3, [r1], -r8
   12d50:	ldrdeq	r3, [r1], -r8
   12d54:	andeq	r2, r1, r8, asr #27
   12d58:	ldr	r0, [pc, #976]	; 13130 <__assert_fail@plt+0x22d4>
   12d5c:	bl	125a0 <__assert_fail@plt+0x1744>
   12d60:	b	12aa4 <__assert_fail@plt+0x1c48>
   12d64:	ldr	r0, [pc, #968]	; 13134 <__assert_fail@plt+0x22d8>
   12d68:	bl	125a0 <__assert_fail@plt+0x1744>
   12d6c:	b	12aa4 <__assert_fail@plt+0x1c48>
   12d70:	ldr	r0, [pc, #960]	; 13138 <__assert_fail@plt+0x22dc>
   12d74:	bl	125a0 <__assert_fail@plt+0x1744>
   12d78:	b	12aa4 <__assert_fail@plt+0x1c48>
   12d7c:	ldr	r0, [pc, #952]	; 1313c <__assert_fail@plt+0x22e0>
   12d80:	bl	125a0 <__assert_fail@plt+0x1744>
   12d84:	b	12aa4 <__assert_fail@plt+0x1c48>
   12d88:	ldr	r0, [pc, #944]	; 13140 <__assert_fail@plt+0x22e4>
   12d8c:	bl	125a0 <__assert_fail@plt+0x1744>
   12d90:	b	12aa4 <__assert_fail@plt+0x1c48>
   12d94:	ldr	r0, [pc, #936]	; 13144 <__assert_fail@plt+0x22e8>
   12d98:	bl	125a0 <__assert_fail@plt+0x1744>
   12d9c:	b	12aa4 <__assert_fail@plt+0x1c48>
   12da0:	ldr	r3, [pc, #928]	; 13148 <__assert_fail@plt+0x22ec>
   12da4:	ldr	r0, [pc, #928]	; 1314c <__assert_fail@plt+0x22f0>
   12da8:	ldr	r2, [pc, #928]	; 13150 <__assert_fail@plt+0x22f4>
   12dac:	ldr	r3, [r3]
   12db0:	ldr	ip, [r3]
   12db4:	ldr	r1, [r3, #4]
   12db8:	ldr	r3, [ip, #4]
   12dbc:	str	r0, [r1, #20]
   12dc0:	str	r2, [r3, #20]
   12dc4:	b	12aa4 <__assert_fail@plt+0x1c48>
   12dc8:	ldr	r3, [pc, #888]	; 13148 <__assert_fail@plt+0x22ec>
   12dcc:	ldr	r3, [r3]
   12dd0:	ldr	r0, [r3, #4]
   12dd4:	ldr	r0, [r0, #20]
   12dd8:	strb	r1, [r0, #7]
   12ddc:	ldr	r3, [r3]
   12de0:	ldrb	r2, [r2]
   12de4:	ldr	r3, [r3, #4]
   12de8:	ldr	r3, [r3, #20]
   12dec:	strb	r2, [r3, #7]
   12df0:	b	12aa4 <__assert_fail@plt+0x1c48>
   12df4:	ldr	r6, [pc, #844]	; 13148 <__assert_fail@plt+0x22ec>
   12df8:	ldr	r3, [r6]
   12dfc:	ldr	r3, [r3]
   12e00:	ldr	r3, [r3]
   12e04:	cmp	r3, #0
   12e08:	beq	12f98 <__assert_fail@plt+0x213c>
   12e0c:	ldr	r3, [pc, #832]	; 13154 <__assert_fail@plt+0x22f8>
   12e10:	ldr	r1, [r8]
   12e14:	ldr	r3, [r3]
   12e18:	subs	r4, r4, r3
   12e1c:	add	r2, r1, r3, lsl #2
   12e20:	str	r2, [r8]
   12e24:	bne	12e74 <__assert_fail@plt+0x2018>
   12e28:	ldr	r3, [pc, #692]	; 130e4 <__assert_fail@plt+0x2288>
   12e2c:	ldr	r2, [sp, #12]
   12e30:	ldr	r3, [r3]
   12e34:	cmp	r2, r3
   12e38:	bne	130d4 <__assert_fail@plt+0x2278>
   12e3c:	add	sp, sp, #20
   12e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e44:	lsl	r1, r1, #9
   12e48:	orr	r1, r1, r2, lsr #23
   12e4c:	lsl	r2, r2, #9
   12e50:	str	r1, [r3, #4]
   12e54:	str	r2, [r3]
   12e58:	b	12c2c <__assert_fail@plt+0x1dd0>
   12e5c:	lsl	r1, r1, #10
   12e60:	orr	r1, r1, r2, lsr #22
   12e64:	lsl	r2, r2, #10
   12e68:	str	r1, [r3, #4]
   12e6c:	str	r2, [r3]
   12e70:	b	12c2c <__assert_fail@plt+0x1dd0>
   12e74:	cmp	r4, #1
   12e78:	beq	12ef4 <__assert_fail@plt+0x2098>
   12e7c:	ldr	r7, [r2, #4]
   12e80:	ldrb	r5, [r7]
   12e84:	cmp	r5, #43	; 0x2b
   12e88:	beq	12f04 <__assert_fail@plt+0x20a8>
   12e8c:	cmp	r4, #1
   12e90:	ble	12e28 <__assert_fail@plt+0x1fcc>
   12e94:	bl	10d48 <__ctype_b_loc@plt>
   12e98:	lsl	r3, r5, #1
   12e9c:	ldr	r2, [r0]
   12ea0:	ldrh	r3, [r2, r3]
   12ea4:	tst	r3, #2048	; 0x800
   12ea8:	bne	12f18 <__assert_fail@plt+0x20bc>
   12eac:	cmp	r5, #120	; 0x78
   12eb0:	bne	12e28 <__assert_fail@plt+0x1fcc>
   12eb4:	ldrb	r3, [r7, #1]
   12eb8:	lsl	r3, r3, #1
   12ebc:	ldrh	r3, [r2, r3]
   12ec0:	ands	r3, r3, #4096	; 0x1000
   12ec4:	beq	12e28 <__assert_fail@plt+0x1fcc>
   12ec8:	add	r7, r7, #1
   12ecc:	mov	r4, r7
   12ed0:	b	12ee4 <__assert_fail@plt+0x2088>
   12ed4:	ldrb	r3, [r4, #1]!
   12ed8:	lsl	r3, r3, #1
   12edc:	ldrh	r3, [r2, r3]
   12ee0:	and	r3, r3, #4096	; 0x1000
   12ee4:	cmp	r3, #0
   12ee8:	bne	12ed4 <__assert_fail@plt+0x2078>
   12eec:	mov	r5, #16
   12ef0:	b	12f48 <__assert_fail@plt+0x20ec>
   12ef4:	ldr	r7, [r1, r3, lsl #2]
   12ef8:	ldrb	r3, [r7]
   12efc:	cmp	r3, #43	; 0x2b
   12f00:	bne	12e28 <__assert_fail@plt+0x1fcc>
   12f04:	bl	10d48 <__ctype_b_loc@plt>
   12f08:	add	r3, r7, #1
   12f0c:	ldrb	r5, [r7, #1]
   12f10:	mov	r7, r3
   12f14:	ldr	r2, [r0]
   12f18:	cmp	r5, #120	; 0x78
   12f1c:	beq	12fc8 <__assert_fail@plt+0x216c>
   12f20:	cmp	r5, #48	; 0x30
   12f24:	beq	12fa4 <__assert_fail@plt+0x2148>
   12f28:	mov	r4, r7
   12f2c:	b	12f34 <__assert_fail@plt+0x20d8>
   12f30:	ldrb	r5, [r4, #1]!
   12f34:	lsl	r3, r5, #1
   12f38:	ldrh	r3, [r2, r3]
   12f3c:	ands	r3, r3, #2048	; 0x800
   12f40:	bne	12f30 <__assert_fail@plt+0x20d4>
   12f44:	mov	r5, r3
   12f48:	cmp	r4, r7
   12f4c:	beq	12e28 <__assert_fail@plt+0x1fcc>
   12f50:	ldrb	r3, [r4]
   12f54:	cmp	r3, #46	; 0x2e
   12f58:	beq	12fe4 <__assert_fail@plt+0x2188>
   12f5c:	cmp	r5, #0
   12f60:	movne	r2, r5
   12f64:	moveq	r2, #8
   12f68:	mov	r0, r7
   12f6c:	add	r1, sp, #8
   12f70:	bl	10cd0 <strtoll@plt>
   12f74:	ldr	r3, [pc, #392]	; 13104 <__assert_fail@plt+0x22a8>
   12f78:	ldr	r2, [sp, #8]
   12f7c:	cmp	r4, r2
   12f80:	strd	r0, [r3]
   12f84:	beq	1302c <__assert_fail@plt+0x21d0>
   12f88:	mov	r0, #0
   12f8c:	mov	r1, #0
   12f90:	strd	r0, [r3]
   12f94:	b	12e28 <__assert_fail@plt+0x1fcc>
   12f98:	ldr	r0, [pc, #440]	; 13158 <__assert_fail@plt+0x22fc>
   12f9c:	bl	125a0 <__assert_fail@plt+0x1744>
   12fa0:	b	12e0c <__assert_fail@plt+0x1fb0>
   12fa4:	ldrb	r3, [r7, #1]
   12fa8:	cmp	r3, #120	; 0x78
   12fac:	bne	12f28 <__assert_fail@plt+0x20cc>
   12fb0:	ldrb	r3, [r7, #2]
   12fb4:	add	r7, r7, #2
   12fb8:	lsl	r3, r3, #1
   12fbc:	ldrh	r3, [r2, r3]
   12fc0:	and	r3, r3, #4096	; 0x1000
   12fc4:	b	12ecc <__assert_fail@plt+0x2070>
   12fc8:	ldrb	r3, [r7, #1]
   12fcc:	lsl	r3, r3, #1
   12fd0:	ldrh	r3, [r2, r3]
   12fd4:	ands	r3, r3, #4096	; 0x1000
   12fd8:	bne	12ec8 <__assert_fail@plt+0x206c>
   12fdc:	ldrb	r5, [r7]
   12fe0:	b	12f28 <__assert_fail@plt+0x20cc>
   12fe4:	cmp	r5, #0
   12fe8:	moveq	r5, #10
   12fec:	moveq	r2, r5
   12ff0:	beq	12f68 <__assert_fail@plt+0x210c>
   12ff4:	b	12e28 <__assert_fail@plt+0x1fcc>
   12ff8:	ldr	r4, [pc, #348]	; 1315c <__assert_fail@plt+0x2300>
   12ffc:	mov	r2, #77	; 0x4d
   13000:	mov	r1, #1
   13004:	ldr	r3, [r4]
   13008:	ldr	r0, [pc, #336]	; 13160 <__assert_fail@plt+0x2304>
   1300c:	bl	10cc4 <fwrite@plt>
   13010:	ldr	r3, [r4]
   13014:	mov	r2, #40	; 0x28
   13018:	mov	r1, #1
   1301c:	ldr	r0, [pc, #320]	; 13164 <__assert_fail@plt+0x2308>
   13020:	bl	10cc4 <fwrite@plt>
   13024:	mov	r0, #1
   13028:	bl	10d54 <exit@plt>
   1302c:	ldrb	r2, [r4]
   13030:	cmp	r2, #0
   13034:	beq	13068 <__assert_fail@plt+0x220c>
   13038:	cmp	r2, #66	; 0x42
   1303c:	beq	13088 <__assert_fail@plt+0x222c>
   13040:	cmp	r2, #98	; 0x62
   13044:	bne	12f88 <__assert_fail@plt+0x212c>
   13048:	lsl	r1, r1, #9
   1304c:	orr	r1, r1, r0, lsr #23
   13050:	add	r2, r4, #1
   13054:	lsl	r0, r0, #9
   13058:	strd	r0, [r3]
   1305c:	ldrb	r2, [r2]
   13060:	cmp	r2, #0
   13064:	bne	12f88 <__assert_fail@plt+0x212c>
   13068:	cmp	r5, #16
   1306c:	beq	130c8 <__assert_fail@plt+0x226c>
   13070:	cmp	r5, #10
   13074:	beq	130a0 <__assert_fail@plt+0x2244>
   13078:	ldr	r3, [r8]
   1307c:	mov	r2, #0
   13080:	str	r2, [r3, #4]
   13084:	b	12e28 <__assert_fail@plt+0x1fcc>
   13088:	lsl	r1, r1, #10
   1308c:	orr	r1, r1, r0, lsr #22
   13090:	lsl	r0, r0, #10
   13094:	add	r2, r4, #1
   13098:	strd	r0, [r3]
   1309c:	b	1305c <__assert_fail@plt+0x2200>
   130a0:	ldr	r2, [r6]
   130a4:	mov	r3, #100	; 0x64
   130a8:	ldr	r1, [r2, #4]
   130ac:	ldr	r1, [r1, #20]
   130b0:	strb	r3, [r1, #7]
   130b4:	ldr	r2, [r2]
   130b8:	ldr	r2, [r2, #4]
   130bc:	ldr	r2, [r2, #20]
   130c0:	strb	r3, [r2, #7]
   130c4:	b	13078 <__assert_fail@plt+0x221c>
   130c8:	ldr	r2, [r6]
   130cc:	mov	r3, #120	; 0x78
   130d0:	b	130a8 <__assert_fail@plt+0x224c>
   130d4:	bl	10c88 <__stack_chk_fail@plt>
   130d8:	ldr	r1, [pc, #136]	; 13168 <__assert_fail@plt+0x230c>
   130dc:	mov	r0, #1
   130e0:	bl	10e20 <errx@plt>
   130e4:	andeq	r4, r2, r0, lsl #30
   130e8:			; <UNDEFINED> instruction: 0x00014ab0
   130ec:			; <UNDEFINED> instruction: 0x00014abc
   130f0:	andeq	r4, r1, r8, asr #23
   130f4:	andeq	r5, r2, r0, ror #2
   130f8:	andeq	r5, r2, r4, ror #1
   130fc:	andeq	r5, r2, r8, lsl r1
   13100:	andeq	r4, r1, r8, asr #22
   13104:	andeq	r5, r2, r8, asr r1
   13108:	andeq	r4, r1, r8, lsl fp
   1310c:	andeq	r4, r1, r4, lsl fp
   13110:	andeq	r4, r1, ip, lsl #22
   13114:	andeq	r5, r2, r8, ror #1
   13118:	andeq	r4, r1, r0, lsr fp
   1311c:	andeq	r4, r1, r0, lsl fp
   13120:	andeq	r4, r1, r8, lsl #22
   13124:	andeq	r4, r1, r0, lsl #22
   13128:	strdeq	r4, [r1], -ip
   1312c:	andeq	r4, r1, ip, ror #21
   13130:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13134:	strdeq	r4, [r1], -r0
   13138:	andeq	r4, r1, r4, lsl #22
   1313c:	strdeq	r4, [r1], -r8
   13140:	andeq	r4, r1, r8, ror #21
   13144:	andeq	r4, r1, r4, asr #22
   13148:	andeq	r5, r2, r0, asr r1
   1314c:	andeq	r5, r2, r4, asr #2
   13150:	strdeq	r5, [r2], -r0
   13154:	andeq	r5, r2, r0, lsl #2
   13158:	andeq	r4, r1, r8, ror #23
   1315c:	andeq	r5, r2, r8, lsl #2
   13160:	andeq	r4, r1, ip, asr #22
   13164:	muleq	r1, ip, fp
   13168:	andeq	r4, r1, ip, asr #21
   1316c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13170:	sub	sp, sp, #12
   13174:	ldr	r8, [r0, #4]
   13178:	cmp	r8, #0
   1317c:	moveq	fp, r8
   13180:	beq	13204 <__assert_fail@plt+0x23a8>
   13184:	ldr	r7, [pc, #600]	; 133e4 <__assert_fail@plt+0x2588>
   13188:	mov	fp, #0
   1318c:	b	131a4 <__assert_fail@plt+0x2348>
   13190:	ldr	r3, [r8, #12]
   13194:	ldr	r8, [r8]
   13198:	cmp	r8, #0
   1319c:	mla	fp, r3, r9, fp
   131a0:	beq	13204 <__assert_fail@plt+0x23a8>
   131a4:	ldr	r9, [r8, #16]
   131a8:	cmp	r9, #0
   131ac:	bne	13190 <__assert_fail@plt+0x2334>
   131b0:	ldr	r2, [r8, #20]
   131b4:	ldrb	r3, [r2]
   131b8:	cmp	r3, #0
   131bc:	moveq	sl, r3
   131c0:	beq	131f0 <__assert_fail@plt+0x2394>
   131c4:	mov	sl, r9
   131c8:	b	131d4 <__assert_fail@plt+0x2378>
   131cc:	cmp	r3, #0
   131d0:	beq	131f0 <__assert_fail@plt+0x2394>
   131d4:	ldrb	r4, [r2, #1]
   131d8:	cmp	r3, #37	; 0x25
   131dc:	add	r2, r2, #1
   131e0:	movne	r3, r4
   131e4:	beq	13214 <__assert_fail@plt+0x23b8>
   131e8:	cmp	r3, #0
   131ec:	bne	131d4 <__assert_fail@plt+0x2378>
   131f0:	ldr	r3, [r8, #12]
   131f4:	ldr	r8, [r8]
   131f8:	cmp	r8, #0
   131fc:	mla	fp, r3, sl, fp
   13200:	bne	131a4 <__assert_fail@plt+0x2348>
   13204:	mov	r0, fp
   13208:	add	sp, sp, #12
   1320c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13210:	mov	r4, r3
   13214:	mov	r1, r4
   13218:	mov	r0, r7
   1321c:	mov	r5, r2
   13220:	sub	r6, r2, #1
   13224:	bl	10d84 <strchr@plt>
   13228:	add	r2, r5, #1
   1322c:	ldrb	r3, [r5, #1]
   13230:	subs	r1, r0, #0
   13234:	bne	13210 <__assert_fail@plt+0x23b4>
   13238:	cmp	r4, #46	; 0x2e
   1323c:	beq	13374 <__assert_fail@plt+0x2518>
   13240:	sub	r4, r4, #69	; 0x45
   13244:	add	r2, r5, #1
   13248:	cmp	r4, #51	; 0x33
   1324c:	ldrls	pc, [pc, r4, lsl #2]
   13250:	b	131cc <__assert_fail@plt+0x2370>
   13254:	andeq	r3, r1, ip, ror #6
   13258:	andeq	r3, r1, ip, asr #3
   1325c:	andeq	r3, r1, ip, ror #6
   13260:	andeq	r3, r1, ip, asr #3
   13264:	andeq	r3, r1, ip, asr #3
   13268:	andeq	r3, r1, ip, asr #3
   1326c:	andeq	r3, r1, ip, asr #3
   13270:	andeq	r3, r1, ip, asr #3
   13274:	andeq	r3, r1, ip, asr #3
   13278:	andeq	r3, r1, ip, asr #3
   1327c:	andeq	r3, r1, ip, asr #3
   13280:	andeq	r3, r1, ip, asr #3
   13284:	andeq	r3, r1, ip, asr #3
   13288:	andeq	r3, r1, ip, asr #3
   1328c:	andeq	r3, r1, ip, asr #3
   13290:	andeq	r3, r1, ip, asr #3
   13294:	andeq	r3, r1, ip, asr #3
   13298:	andeq	r3, r1, ip, asr #3
   1329c:	andeq	r3, r1, ip, asr #3
   132a0:	andeq	r3, r1, r4, ror #6
   132a4:	andeq	r3, r1, ip, asr #3
   132a8:	andeq	r3, r1, ip, asr #3
   132ac:	andeq	r3, r1, ip, asr #3
   132b0:	andeq	r3, r1, ip, asr #3
   132b4:	andeq	r3, r1, ip, asr #3
   132b8:	andeq	r3, r1, ip, asr #3
   132bc:	andeq	r3, r1, r4, lsr r3
   132c0:	andeq	r3, r1, ip, asr #3
   132c4:	andeq	r3, r1, ip, asr #3
   132c8:	andeq	r3, r1, ip, asr #3
   132cc:	andeq	r3, r1, ip, lsr #6
   132d0:	andeq	r3, r1, r4, ror #6
   132d4:	andeq	r3, r1, ip, ror #6
   132d8:	andeq	r3, r1, ip, ror #6
   132dc:	andeq	r3, r1, ip, ror #6
   132e0:	andeq	r3, r1, ip, asr #3
   132e4:	andeq	r3, r1, r4, ror #6
   132e8:	andeq	r3, r1, ip, asr #3
   132ec:	andeq	r3, r1, ip, asr #3
   132f0:	andeq	r3, r1, ip, asr #3
   132f4:	andeq	r3, r1, ip, asr #3
   132f8:	andeq	r3, r1, ip, asr #3
   132fc:	andeq	r3, r1, r4, ror #6
   13300:	andeq	r3, r1, ip, asr #3
   13304:	andeq	r3, r1, ip, asr #3
   13308:	andeq	r3, r1, ip, asr #3
   1330c:	andeq	r3, r1, r4, lsr #6
   13310:	andeq	r3, r1, ip, asr #3
   13314:	andeq	r3, r1, r4, ror #6
   13318:	andeq	r3, r1, ip, asr #3
   1331c:	andeq	r3, r1, ip, asr #3
   13320:	andeq	r3, r1, r4, ror #6
   13324:	add	sl, sl, r9
   13328:	b	131cc <__assert_fail@plt+0x2370>
   1332c:	add	sl, sl, #1
   13330:	b	131cc <__assert_fail@plt+0x2370>
   13334:	mov	r2, r5
   13338:	cmp	r3, #112	; 0x70
   1333c:	ldrb	r1, [r2, #2]!
   13340:	beq	13358 <__assert_fail@plt+0x24fc>
   13344:	cmp	r3, #117	; 0x75
   13348:	beq	13358 <__assert_fail@plt+0x24fc>
   1334c:	cmp	r3, #99	; 0x63
   13350:	movne	r3, r1
   13354:	bne	131cc <__assert_fail@plt+0x2370>
   13358:	add	sl, sl, #1
   1335c:	mov	r3, r1
   13360:	b	131cc <__assert_fail@plt+0x2370>
   13364:	add	sl, sl, #4
   13368:	b	131cc <__assert_fail@plt+0x2370>
   1336c:	add	sl, sl, #8
   13370:	b	131cc <__assert_fail@plt+0x2370>
   13374:	stm	sp, {r1, r3}
   13378:	bl	10d48 <__ctype_b_loc@plt>
   1337c:	ldr	r3, [sp, #4]
   13380:	add	r5, r6, #2
   13384:	ldr	r1, [sp]
   13388:	lsl	r2, r3, #1
   1338c:	mov	r4, r0
   13390:	ldr	r0, [r0]
   13394:	ldrh	r2, [r0, r2]
   13398:	tst	r2, #2048	; 0x800
   1339c:	moveq	r4, r3
   133a0:	ldrbeq	r3, [r6, #3]
   133a4:	beq	13240 <__assert_fail@plt+0x23e4>
   133a8:	mov	r2, #10
   133ac:	mov	r0, r5
   133b0:	bl	10c34 <strtol@plt>
   133b4:	ldr	r1, [r4]
   133b8:	mov	r2, r5
   133bc:	mov	r9, r0
   133c0:	b	133c8 <__assert_fail@plt+0x256c>
   133c4:	mov	r2, r5
   133c8:	ldrb	r4, [r5, #1]!
   133cc:	lsl	r3, r4, #1
   133d0:	ldrh	r3, [r1, r3]
   133d4:	tst	r3, #2048	; 0x800
   133d8:	bne	133c4 <__assert_fail@plt+0x2568>
   133dc:	ldrb	r3, [r2, #2]
   133e0:	b	13240 <__assert_fail@plt+0x23e4>
   133e4:	andeq	r4, r1, sp, ror #23
   133e8:	push	{r4, r5, r6, r7, r8, lr}
   133ec:	mov	r3, r0
   133f0:	mov	r8, #12
   133f4:	mov	r7, #13
   133f8:	mov	r6, #9
   133fc:	mov	r5, #11
   13400:	mov	r4, #10
   13404:	mov	lr, #7
   13408:	mov	ip, #8
   1340c:	b	13428 <__assert_fail@plt+0x25cc>
   13410:	strb	r2, [r3]
   13414:	ldrb	r2, [r0]
   13418:	cmp	r2, #0
   1341c:	popeq	{r4, r5, r6, r7, r8, pc}
   13420:	add	r0, r0, #1
   13424:	add	r3, r3, #1
   13428:	ldrb	r2, [r0]
   1342c:	cmp	r2, #92	; 0x5c
   13430:	bne	13410 <__assert_fail@plt+0x25b4>
   13434:	ldrb	r1, [r0, #1]
   13438:	add	r0, r0, #1
   1343c:	cmp	r1, #102	; 0x66
   13440:	beq	134ac <__assert_fail@plt+0x2650>
   13444:	bls	13478 <__assert_fail@plt+0x261c>
   13448:	cmp	r1, #114	; 0x72
   1344c:	strbeq	r7, [r3]
   13450:	beq	13420 <__assert_fail@plt+0x25c4>
   13454:	bls	1349c <__assert_fail@plt+0x2640>
   13458:	cmp	r1, #116	; 0x74
   1345c:	strbeq	r6, [r3]
   13460:	beq	13420 <__assert_fail@plt+0x25c4>
   13464:	cmp	r1, #118	; 0x76
   13468:	strbeq	r5, [r3]
   1346c:	beq	13420 <__assert_fail@plt+0x25c4>
   13470:	strb	r1, [r3]
   13474:	b	13420 <__assert_fail@plt+0x25c4>
   13478:	cmp	r1, #97	; 0x61
   1347c:	beq	134bc <__assert_fail@plt+0x2660>
   13480:	cmp	r1, #98	; 0x62
   13484:	beq	134b4 <__assert_fail@plt+0x2658>
   13488:	cmp	r1, #0
   1348c:	bne	13470 <__assert_fail@plt+0x2614>
   13490:	strb	r2, [r3]
   13494:	strb	r1, [r3, #1]
   13498:	pop	{r4, r5, r6, r7, r8, pc}
   1349c:	cmp	r1, #110	; 0x6e
   134a0:	strbeq	r4, [r3]
   134a4:	strbne	r1, [r3]
   134a8:	b	13420 <__assert_fail@plt+0x25c4>
   134ac:	strb	r8, [r3]
   134b0:	b	13420 <__assert_fail@plt+0x25c4>
   134b4:	strb	ip, [r3]
   134b8:	b	13420 <__assert_fail@plt+0x25c4>
   134bc:	strb	lr, [r3]
   134c0:	b	13420 <__assert_fail@plt+0x25c4>
   134c4:	mov	r2, r0
   134c8:	push	{r4, lr}
   134cc:	mov	r0, #1
   134d0:	ldr	r1, [pc]	; 134d8 <__assert_fail@plt+0x267c>
   134d4:	bl	10e20 <errx@plt>
   134d8:	strdeq	r4, [r1], -ip
   134dc:	push	{r4, lr}
   134e0:	mov	r0, #1
   134e4:	ldr	r1, [pc]	; 134ec <__assert_fail@plt+0x2690>
   134e8:	bl	10e20 <errx@plt>
   134ec:	andeq	r4, r1, r0, lsl ip
   134f0:	mov	r2, r0
   134f4:	push	{r4, lr}
   134f8:	mov	r0, #1
   134fc:	ldr	r1, [pc]	; 13504 <__assert_fail@plt+0x26a8>
   13500:	bl	10e20 <errx@plt>
   13504:	andeq	r4, r1, ip, lsr ip
   13508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1350c:	sub	sp, sp, #12
   13510:	mov	r1, #12
   13514:	str	r0, [sp, #4]
   13518:	mov	r0, #1
   1351c:	bl	10c1c <calloc@plt>
   13520:	cmp	r0, #0
   13524:	beq	1375c <__assert_fail@plt+0x2900>
   13528:	ldr	r3, [pc, #568]	; 13768 <__assert_fail@plt+0x290c>
   1352c:	add	r6, r0, #4
   13530:	ldr	r2, [r3]
   13534:	cmp	r2, #0
   13538:	streq	r0, [r3]
   1353c:	ldrne	r3, [pc, #552]	; 1376c <__assert_fail@plt+0x2910>
   13540:	ldreq	r3, [pc, #548]	; 1376c <__assert_fail@plt+0x2910>
   13544:	ldrne	r2, [r3]
   13548:	str	r0, [r3]
   1354c:	strne	r0, [r2]
   13550:	bl	10d48 <__ctype_b_loc@plt>
   13554:	ldr	r4, [sp, #4]
   13558:	ldr	fp, [r0]
   1355c:	mov	r7, r0
   13560:	ldrb	r5, [r4]
   13564:	sxth	r9, r5
   13568:	lsl	r2, r9, #1
   1356c:	ldrh	r8, [fp, r2]
   13570:	tst	r8, #8192	; 0x2000
   13574:	bne	13744 <__assert_fail@plt+0x28e8>
   13578:	cmp	r5, #0
   1357c:	beq	1374c <__assert_fail@plt+0x28f0>
   13580:	mov	r1, #24
   13584:	mov	r0, #1
   13588:	bl	10c1c <calloc@plt>
   1358c:	subs	sl, r0, #0
   13590:	beq	1375c <__assert_fail@plt+0x2900>
   13594:	tst	r8, #2048	; 0x800
   13598:	mov	r3, #1
   1359c:	str	sl, [r6]
   135a0:	movne	r9, r4
   135a4:	str	r3, [sl, #12]
   135a8:	mov	r6, sl
   135ac:	bne	136a0 <__assert_fail@plt+0x2844>
   135b0:	cmp	r5, #47	; 0x2f
   135b4:	beq	1372c <__assert_fail@plt+0x28d0>
   135b8:	lsl	r3, r9, #1
   135bc:	ldrh	r3, [fp, r3]
   135c0:	tst	r3, #2048	; 0x800
   135c4:	movne	r9, r4
   135c8:	bne	13638 <__assert_fail@plt+0x27dc>
   135cc:	cmp	r5, #34	; 0x22
   135d0:	bne	13754 <__assert_fail@plt+0x28f8>
   135d4:	add	fp, r4, #1
   135d8:	mov	r2, fp
   135dc:	b	135ec <__assert_fail@plt+0x2790>
   135e0:	cmp	r3, #0
   135e4:	mov	r2, r4
   135e8:	beq	13754 <__assert_fail@plt+0x28f8>
   135ec:	mov	r4, r2
   135f0:	ldrb	r3, [r4], #1
   135f4:	cmp	r3, #34	; 0x22
   135f8:	bne	135e0 <__assert_fail@plt+0x2784>
   135fc:	sub	r2, r2, fp
   13600:	add	r5, r2, #1
   13604:	mov	r0, r5
   13608:	bl	10d18 <malloc@plt>
   1360c:	cmp	r0, #0
   13610:	str	r0, [sl, #20]
   13614:	beq	1375c <__assert_fail@plt+0x2900>
   13618:	mov	r1, fp
   1361c:	mov	r2, r5
   13620:	bl	10d60 <strlcpy@plt>
   13624:	ldr	r0, [sl, #20]
   13628:	bl	133e8 <__assert_fail@plt+0x258c>
   1362c:	ldr	fp, [r7]
   13630:	b	13560 <__assert_fail@plt+0x2704>
   13634:	mov	r9, r5
   13638:	ldrb	r2, [r9, #1]
   1363c:	add	r5, r9, #1
   13640:	lsl	r2, r2, #1
   13644:	ldrh	r2, [fp, r2]
   13648:	ands	r1, r2, #2048	; 0x800
   1364c:	bne	13634 <__assert_fail@plt+0x27d8>
   13650:	tst	r2, #8192	; 0x2000
   13654:	beq	13754 <__assert_fail@plt+0x28f8>
   13658:	mov	r0, r4
   1365c:	mov	r2, #10
   13660:	bl	10c34 <strtol@plt>
   13664:	ldrb	r5, [r5, #1]
   13668:	ldr	r2, [r7]
   1366c:	add	r4, r9, #2
   13670:	lsl	r3, r5, #1
   13674:	ldrh	r3, [r2, r3]
   13678:	tst	r3, #8192	; 0x2000
   1367c:	str	r0, [sl, #16]
   13680:	beq	135cc <__assert_fail@plt+0x2770>
   13684:	ldrb	r5, [r4, #1]!
   13688:	lsl	r3, r5, #1
   1368c:	ldrh	r3, [r2, r3]
   13690:	tst	r3, #8192	; 0x2000
   13694:	bne	13684 <__assert_fail@plt+0x2828>
   13698:	b	135cc <__assert_fail@plt+0x2770>
   1369c:	mov	r9, r5
   136a0:	ldrb	r0, [r9, #1]
   136a4:	add	r5, r9, #1
   136a8:	lsl	r2, r0, #1
   136ac:	ldrh	r2, [fp, r2]
   136b0:	tst	r2, #2048	; 0x800
   136b4:	bne	1369c <__assert_fail@plt+0x2840>
   136b8:	lsr	r1, r2, #13
   136bc:	eor	r1, r1, #1
   136c0:	cmp	r0, #47	; 0x2f
   136c4:	moveq	r1, #0
   136c8:	andne	r1, r1, #1
   136cc:	cmp	r1, #0
   136d0:	bne	13754 <__assert_fail@plt+0x28f8>
   136d4:	mov	r0, r4
   136d8:	mov	r2, #10
   136dc:	bl	10c34 <strtol@plt>
   136e0:	ldrb	r5, [r5, #1]
   136e4:	mov	r2, #2
   136e8:	add	r4, r9, r2
   136ec:	ldr	fp, [r7]
   136f0:	sxth	r9, r5
   136f4:	str	r2, [sl, #8]
   136f8:	lsl	r2, r9, #1
   136fc:	ldrh	r2, [fp, r2]
   13700:	tst	r2, #8192	; 0x2000
   13704:	str	r0, [sl, #12]
   13708:	beq	135b0 <__assert_fail@plt+0x2754>
   1370c:	ldrb	r5, [r4, #1]!
   13710:	sxth	r9, r5
   13714:	lsl	r2, r9, #1
   13718:	ldrh	r2, [fp, r2]
   1371c:	tst	r2, #8192	; 0x2000
   13720:	bne	1370c <__assert_fail@plt+0x28b0>
   13724:	cmp	r5, #47	; 0x2f
   13728:	bne	135b8 <__assert_fail@plt+0x275c>
   1372c:	ldrb	r5, [r4, #1]!
   13730:	lsl	r3, r5, #1
   13734:	ldrh	r3, [fp, r3]
   13738:	tst	r3, #8192	; 0x2000
   1373c:	bne	1372c <__assert_fail@plt+0x28d0>
   13740:	b	135c0 <__assert_fail@plt+0x2764>
   13744:	add	r4, r4, #1
   13748:	b	13560 <__assert_fail@plt+0x2704>
   1374c:	add	sp, sp, #12
   13750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13754:	ldr	r0, [sp, #4]
   13758:	bl	134f0 <__assert_fail@plt+0x2694>
   1375c:	mov	r1, #0
   13760:	mov	r0, #1
   13764:	bl	10ca0 <err@plt>
   13768:	andeq	r5, r2, r0, asr r1
   1376c:	andeq	r5, r2, r8, asr #2
   13770:	push	{r4, r5, r6, r7, r8, r9, lr}
   13774:	sub	sp, sp, #2048	; 0x800
   13778:	ldr	r8, [pc, #256]	; 13880 <__assert_fail@plt+0x2a24>
   1377c:	sub	sp, sp, #12
   13780:	ldr	r1, [pc, #252]	; 13884 <__assert_fail@plt+0x2a28>
   13784:	ldr	r3, [r8]
   13788:	mov	r4, r0
   1378c:	str	r3, [sp, #2052]	; 0x804
   13790:	bl	10e44 <fopen64@plt>
   13794:	subs	r5, r0, #0
   13798:	beq	1386c <__assert_fail@plt+0x2a10>
   1379c:	ldr	r6, [pc, #228]	; 13888 <__assert_fail@plt+0x2a2c>
   137a0:	ldr	r9, [pc, #228]	; 1388c <__assert_fail@plt+0x2a30>
   137a4:	ldr	r7, [pc, #228]	; 13890 <__assert_fail@plt+0x2a34>
   137a8:	mov	r2, r5
   137ac:	mov	r1, r6
   137b0:	mov	r0, sp
   137b4:	bl	10c58 <fgets@plt>
   137b8:	cmp	r0, #0
   137bc:	beq	13828 <__assert_fail@plt+0x29cc>
   137c0:	mov	r1, #10
   137c4:	mov	r0, sp
   137c8:	bl	10d84 <strchr@plt>
   137cc:	cmp	r0, #0
   137d0:	beq	1384c <__assert_fail@plt+0x29f0>
   137d4:	mov	r3, #0
   137d8:	strb	r3, [r0]
   137dc:	ldrb	r4, [sp]
   137e0:	cmp	r4, r3
   137e4:	beq	137a8 <__assert_fail@plt+0x294c>
   137e8:	bl	10d48 <__ctype_b_loc@plt>
   137ec:	mov	r3, sp
   137f0:	ldr	r1, [r0]
   137f4:	b	13804 <__assert_fail@plt+0x29a8>
   137f8:	ldrb	r4, [r3, #1]!
   137fc:	cmp	r4, #0
   13800:	beq	137a8 <__assert_fail@plt+0x294c>
   13804:	lsl	r2, r4, #1
   13808:	ldrh	r2, [r1, r2]
   1380c:	tst	r2, #8192	; 0x2000
   13810:	bne	137f8 <__assert_fail@plt+0x299c>
   13814:	cmp	r4, #35	; 0x23
   13818:	beq	137a8 <__assert_fail@plt+0x294c>
   1381c:	mov	r0, r3
   13820:	bl	13508 <__assert_fail@plt+0x26ac>
   13824:	b	137a8 <__assert_fail@plt+0x294c>
   13828:	mov	r0, r5
   1382c:	bl	10dfc <fclose@plt>
   13830:	ldr	r2, [sp, #2052]	; 0x804
   13834:	ldr	r3, [r8]
   13838:	cmp	r2, r3
   1383c:	bne	1387c <__assert_fail@plt+0x2a20>
   13840:	add	sp, sp, #2048	; 0x800
   13844:	add	sp, sp, #12
   13848:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1384c:	mov	r0, r9
   13850:	bl	10d90 <warnx@plt>
   13854:	ldr	r0, [r7]
   13858:	bl	10c70 <_IO_getc@plt>
   1385c:	cmp	r0, #10
   13860:	cmnne	r0, #1
   13864:	bne	13854 <__assert_fail@plt+0x29f8>
   13868:	b	137a8 <__assert_fail@plt+0x294c>
   1386c:	mov	r2, r4
   13870:	ldr	r1, [pc, #28]	; 13894 <__assert_fail@plt+0x2a38>
   13874:	mov	r0, #1
   13878:	bl	10ca0 <err@plt>
   1387c:	bl	10c88 <__stack_chk_fail@plt>
   13880:	andeq	r4, r2, r0, lsl #30
   13884:	andeq	r4, r1, ip, lsr #21
   13888:	andeq	r0, r0, r1, lsl #16
   1388c:	andeq	r4, r1, r0, asr ip
   13890:	andeq	r5, r2, r0, lsl r1
   13894:	andeq	r4, r1, r0, lsr #15
   13898:	mov	r2, r0
   1389c:	push	{r4, lr}
   138a0:	mov	r0, #1
   138a4:	ldr	r1, [pc]	; 138ac <__assert_fail@plt+0x2a50>
   138a8:	bl	10e20 <errx@plt>
   138ac:	andeq	r4, r1, r0, ror #24
   138b0:	ldr	r3, [pc, #1628]	; 13f14 <__assert_fail@plt+0x30b8>
   138b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b8:	sub	sp, sp, #44	; 0x2c
   138bc:	ldr	r8, [r0, #4]
   138c0:	ldr	r3, [r3]
   138c4:	cmp	r8, #0
   138c8:	str	r0, [sp, #28]
   138cc:	str	r3, [sp, #36]	; 0x24
   138d0:	beq	13c50 <__assert_fail@plt+0x2df4>
   138d4:	ldr	sl, [pc, #1596]	; 13f18 <__assert_fail@plt+0x30bc>
   138d8:	mov	r3, #0
   138dc:	add	fp, sl, #1
   138e0:	str	r3, [sp, #24]
   138e4:	ldr	r5, [r8, #20]
   138e8:	add	r4, r8, #4
   138ec:	ldrb	r3, [r5]
   138f0:	cmp	r3, #0
   138f4:	beq	13bb4 <__assert_fail@plt+0x2d58>
   138f8:	mov	r3, #0
   138fc:	str	r3, [sp, #12]
   13900:	mov	r1, #36	; 0x24
   13904:	mov	r0, #1
   13908:	bl	10c1c <calloc@plt>
   1390c:	subs	r6, r0, #0
   13910:	beq	13ed8 <__assert_fail@plt+0x307c>
   13914:	str	r6, [r4]
   13918:	ldrb	r2, [r5]
   1391c:	mov	r7, r5
   13920:	cmp	r2, #0
   13924:	cmpne	r2, #37	; 0x25
   13928:	beq	1393c <__assert_fail@plt+0x2ae0>
   1392c:	ldrb	r2, [r7, #1]!
   13930:	cmp	r2, #0
   13934:	cmpne	r2, #37	; 0x25
   13938:	bne	1392c <__assert_fail@plt+0x2ad0>
   1393c:	cmp	r2, #0
   13940:	ldr	r2, [r8, #16]
   13944:	beq	13e9c <__assert_fail@plt+0x3040>
   13948:	cmp	r2, #0
   1394c:	beq	13998 <__assert_fail@plt+0x2b3c>
   13950:	add	r3, r7, #1
   13954:	ldrb	r9, [r3]
   13958:	mov	r0, sl
   1395c:	mov	r4, r3
   13960:	mov	r1, r9
   13964:	bl	10d84 <strchr@plt>
   13968:	add	r3, r4, #1
   1396c:	cmp	r0, #0
   13970:	bne	13954 <__assert_fail@plt+0x2af8>
   13974:	cmp	r9, #0
   13978:	mov	r1, #1
   1397c:	bne	139c8 <__assert_fail@plt+0x2b6c>
   13980:	strh	r9, [sp, #32]
   13984:	mov	r3, #0
   13988:	strb	r3, [r4, #1]
   1398c:	mov	r0, r4
   13990:	bl	13898 <__assert_fail@plt+0x2a3c>
   13994:	mov	r7, r4
   13998:	ldrb	r9, [r7, #1]
   1399c:	mov	r0, fp
   139a0:	add	r4, r7, #1
   139a4:	mov	r1, r9
   139a8:	bl	10d84 <strchr@plt>
   139ac:	cmp	r0, #0
   139b0:	bne	13994 <__assert_fail@plt+0x2b38>
   139b4:	cmp	r9, #46	; 0x2e
   139b8:	mov	r1, r0
   139bc:	beq	13d78 <__assert_fail@plt+0x2f1c>
   139c0:	cmp	r9, #0
   139c4:	beq	13980 <__assert_fail@plt+0x2b24>
   139c8:	mov	r2, #0
   139cc:	sub	r3, r9, #69	; 0x45
   139d0:	strb	r9, [sp, #32]
   139d4:	strb	r2, [sp, #33]	; 0x21
   139d8:	add	r7, r4, #1
   139dc:	cmp	r3, #51	; 0x33
   139e0:	ldrls	pc, [pc, r3, lsl #2]
   139e4:	b	13984 <__assert_fail@plt+0x2b28>
   139e8:	andeq	r3, r1, r4, lsl #25
   139ec:	andeq	r3, r1, r4, lsl #19
   139f0:	andeq	r3, r1, r4, lsl #25
   139f4:	andeq	r3, r1, r4, lsl #19
   139f8:	andeq	r3, r1, r4, lsl #19
   139fc:	andeq	r3, r1, r4, lsl #19
   13a00:	andeq	r3, r1, r4, lsl #19
   13a04:	andeq	r3, r1, r4, lsl #19
   13a08:	andeq	r3, r1, r4, lsl #19
   13a0c:	andeq	r3, r1, r4, lsl #19
   13a10:	andeq	r3, r1, r4, lsl #19
   13a14:	andeq	r3, r1, r4, lsl #19
   13a18:	andeq	r3, r1, r4, lsl #19
   13a1c:	andeq	r3, r1, r4, lsl #19
   13a20:	andeq	r3, r1, r4, lsl #19
   13a24:	andeq	r3, r1, r4, lsl #19
   13a28:	andeq	r3, r1, r4, lsl #19
   13a2c:	andeq	r3, r1, r4, lsl #19
   13a30:	andeq	r3, r1, r4, lsl #19
   13a34:	andeq	r3, r1, r0, lsl sp
   13a38:	andeq	r3, r1, r4, lsl #19
   13a3c:	andeq	r3, r1, r4, lsl #19
   13a40:	andeq	r3, r1, r4, lsl #19
   13a44:	andeq	r3, r1, r4, lsl #19
   13a48:	andeq	r3, r1, r4, lsl #19
   13a4c:	andeq	r3, r1, r4, lsl #19
   13a50:			; <UNDEFINED> instruction: 0x00013cb8
   13a54:	andeq	r3, r1, r4, lsl #19
   13a58:	andeq	r3, r1, r4, lsl #19
   13a5c:	andeq	r3, r1, r4, lsl #19
   13a60:	andeq	r3, r1, r4, lsl fp
   13a64:	ldrdeq	r3, [r1], -r4
   13a68:	andeq	r3, r1, r4, lsl #25
   13a6c:	andeq	r3, r1, r4, lsl #25
   13a70:	andeq	r3, r1, r4, lsl #25
   13a74:	andeq	r3, r1, r4, lsl #19
   13a78:	ldrdeq	r3, [r1], -r4
   13a7c:	andeq	r3, r1, r4, lsl #19
   13a80:	andeq	r3, r1, r4, lsl #19
   13a84:	andeq	r3, r1, r4, lsl #19
   13a88:	andeq	r3, r1, r4, lsl #19
   13a8c:	andeq	r3, r1, r4, lsl #19
   13a90:	andeq	r3, r1, r0, lsl sp
   13a94:	andeq	r3, r1, r4, lsl #19
   13a98:	andeq	r3, r1, r4, lsl #19
   13a9c:	andeq	r3, r1, r4, lsl #19
   13aa0:			; <UNDEFINED> instruction: 0x00013ab8
   13aa4:	andeq	r3, r1, r4, lsl #19
   13aa8:	andeq	r3, r1, r0, lsl sp
   13aac:	andeq	r3, r1, r4, lsl #19
   13ab0:	andeq	r3, r1, r4, lsl #19
   13ab4:	andeq	r3, r1, r0, lsl sp
   13ab8:	mov	r3, #128	; 0x80
   13abc:	cmp	r1, #1
   13ac0:	str	r3, [r6, #4]
   13ac4:	beq	13ddc <__assert_fail@plt+0x2f80>
   13ac8:	cmp	r1, #2
   13acc:	beq	13e40 <__assert_fail@plt+0x2fe4>
   13ad0:	bl	134dc <__assert_fail@plt+0x2680>
   13ad4:	mov	r3, #32
   13ad8:	str	r3, [r6, #4]
   13adc:	mov	r2, #0
   13ae0:	ldr	r3, [r8, #16]
   13ae4:	strb	r2, [sp, #34]	; 0x22
   13ae8:	mov	r2, #113	; 0x71
   13aec:	strb	r9, [sp, #33]	; 0x21
   13af0:	strb	r2, [sp, #32]
   13af4:	cmp	r3, #4
   13af8:	ldrls	pc, [pc, r3, lsl #2]
   13afc:	b	13ca8 <__assert_fail@plt+0x2e4c>
   13b00:	andeq	r3, r1, ip, ror #24
   13b04:	andeq	r3, r1, r8, lsr #22
   13b08:	andeq	r3, r1, r8, ror ip
   13b0c:	andeq	r3, r1, r8, lsr #25
   13b10:	andeq	r3, r1, ip, ror #24
   13b14:	ldr	r2, [r8, #16]
   13b18:	mov	r3, #8
   13b1c:	cmp	r2, #1
   13b20:	str	r3, [r6, #4]
   13b24:	bhi	13ca8 <__assert_fail@plt+0x2e4c>
   13b28:	mov	r3, #1
   13b2c:	str	r3, [r6, #8]
   13b30:	mov	r2, #0
   13b34:	add	r1, sp, #32
   13b38:	ldrb	r9, [r7]
   13b3c:	mov	r3, r5
   13b40:	strb	r2, [r4]
   13b44:	add	r0, r6, #16
   13b48:	str	r1, [sp]
   13b4c:	ldr	r2, [pc, #968]	; 13f1c <__assert_fail@plt+0x30c0>
   13b50:	mov	r1, #1
   13b54:	bl	10d00 <__asprintf_chk@plt>
   13b58:	cmn	r0, #1
   13b5c:	beq	13ed8 <__assert_fail@plt+0x307c>
   13b60:	strb	r9, [r7]
   13b64:	ldr	r3, [r6, #16]
   13b68:	ldr	r2, [r6, #4]
   13b6c:	sub	r4, r4, r5
   13b70:	add	r4, r3, r4
   13b74:	tst	r2, #1
   13b78:	str	r4, [r6, #12]
   13b7c:	bne	13ba0 <__assert_fail@plt+0x2d44>
   13b80:	ldr	r3, [r8, #16]
   13b84:	cmp	r3, #0
   13b88:	beq	13ba0 <__assert_fail@plt+0x2d44>
   13b8c:	ldr	r3, [sp, #12]
   13b90:	cmp	r3, #0
   13b94:	bne	13f04 <__assert_fail@plt+0x30a8>
   13b98:	mov	r3, #1
   13b9c:	str	r3, [sp, #12]
   13ba0:	ldrb	r3, [r7]
   13ba4:	mov	r4, r6
   13ba8:	mov	r5, r7
   13bac:	cmp	r3, #0
   13bb0:	bne	13900 <__assert_fail@plt+0x2aa4>
   13bb4:	ldr	r2, [r8, #16]
   13bb8:	cmp	r2, #0
   13bbc:	beq	13eb0 <__assert_fail@plt+0x3054>
   13bc0:	ldr	r8, [r8]
   13bc4:	cmp	r8, #0
   13bc8:	bne	138e4 <__assert_fail@plt+0x2a88>
   13bcc:	ldr	r3, [sp, #28]
   13bd0:	ldr	r4, [r3, #4]
   13bd4:	cmp	r4, #0
   13bd8:	beq	13c50 <__assert_fail@plt+0x2df4>
   13bdc:	ldr	r3, [pc, #828]	; 13f20 <__assert_fail@plt+0x30c4>
   13be0:	ldr	r6, [r3]
   13be4:	b	13c00 <__assert_fail@plt+0x2da4>
   13be8:	cmp	r5, #1
   13bec:	ble	13bfc <__assert_fail@plt+0x2da0>
   13bf0:	ldr	r4, [r4, #4]
   13bf4:	cmp	r4, #0
   13bf8:	bne	13d20 <__assert_fail@plt+0x2ec4>
   13bfc:	mov	r4, r8
   13c00:	ldr	r8, [r4]
   13c04:	ldr	r5, [r4, #12]
   13c08:	cmp	r8, #0
   13c0c:	bne	13be8 <__assert_fail@plt+0x2d8c>
   13c10:	ldr	r3, [sp, #28]
   13c14:	ldr	r0, [r3, #8]
   13c18:	cmp	r0, r6
   13c1c:	bge	13c48 <__assert_fail@plt+0x2dec>
   13c20:	ldr	r3, [r4, #8]
   13c24:	tst	r3, #2
   13c28:	bne	13c48 <__assert_fail@plt+0x2dec>
   13c2c:	ldr	r1, [r4, #16]
   13c30:	cmp	r1, #0
   13c34:	beq	13c48 <__assert_fail@plt+0x2dec>
   13c38:	sub	r0, r6, r0
   13c3c:	bl	14138 <__assert_fail@plt+0x32dc>
   13c40:	add	r5, r5, r0
   13c44:	str	r5, [r4, #12]
   13c48:	cmp	r5, #1
   13c4c:	bgt	13ee4 <__assert_fail@plt+0x3088>
   13c50:	ldr	r3, [pc, #700]	; 13f14 <__assert_fail@plt+0x30b8>
   13c54:	ldr	r2, [sp, #36]	; 0x24
   13c58:	ldr	r3, [r3]
   13c5c:	cmp	r2, r3
   13c60:	bne	13f10 <__assert_fail@plt+0x30b4>
   13c64:	add	sp, sp, #44	; 0x2c
   13c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c6c:	mov	r3, #4
   13c70:	str	r3, [r6, #8]
   13c74:	b	13b30 <__assert_fail@plt+0x2cd4>
   13c78:	mov	r3, #2
   13c7c:	str	r3, [r6, #8]
   13c80:	b	13b30 <__assert_fail@plt+0x2cd4>
   13c84:	ldr	r3, [r8, #16]
   13c88:	mov	r2, #16
   13c8c:	cmp	r3, #4
   13c90:	str	r2, [r6, #4]
   13c94:	beq	13de0 <__assert_fail@plt+0x2f84>
   13c98:	cmp	r3, #8
   13c9c:	beq	13e34 <__assert_fail@plt+0x2fd8>
   13ca0:	cmp	r3, #0
   13ca4:	beq	13e34 <__assert_fail@plt+0x2fd8>
   13ca8:	mov	r3, #0
   13cac:	strb	r3, [r4, #1]
   13cb0:	mov	r0, r4
   13cb4:	bl	134c4 <__assert_fail@plt+0x2668>
   13cb8:	ldrb	r3, [r4, #1]
   13cbc:	cmp	r3, #99	; 0x63
   13cc0:	beq	13e64 <__assert_fail@plt+0x3008>
   13cc4:	bhi	13e00 <__assert_fail@plt+0x2fa4>
   13cc8:	cmp	r3, #65	; 0x41
   13ccc:	beq	13e4c <__assert_fail@plt+0x2ff0>
   13cd0:	cmp	r3, #97	; 0x61
   13cd4:	bne	13ef4 <__assert_fail@plt+0x3098>
   13cd8:	mov	r3, #1
   13cdc:	str	r3, [r6, #4]
   13ce0:	ldrb	r3, [r4, #2]
   13ce4:	add	r7, r4, #3
   13ce8:	cmp	r3, #111	; 0x6f
   13cec:	beq	13de8 <__assert_fail@plt+0x2f8c>
   13cf0:	cmp	r3, #120	; 0x78
   13cf4:	beq	13de8 <__assert_fail@plt+0x2f8c>
   13cf8:	cmp	r3, #100	; 0x64
   13cfc:	beq	13de8 <__assert_fail@plt+0x2f8c>
   13d00:	mov	r3, #0
   13d04:	strb	r3, [r4, #3]
   13d08:	mov	r0, r4
   13d0c:	bl	13898 <__assert_fail@plt+0x2a3c>
   13d10:	mov	r3, #512	; 0x200
   13d14:	str	r3, [r6, #4]
   13d18:	b	13adc <__assert_fail@plt+0x2c80>
   13d1c:	mov	r4, r3
   13d20:	ldr	r3, [r4]
   13d24:	cmp	r3, #0
   13d28:	bne	13d1c <__assert_fail@plt+0x2ec0>
   13d2c:	ldr	r7, [r4, #16]
   13d30:	ldrb	r5, [r7]
   13d34:	cmp	r5, #0
   13d38:	beq	13d6c <__assert_fail@plt+0x2f10>
   13d3c:	bl	10d48 <__ctype_b_loc@plt>
   13d40:	ldr	r2, [r0]
   13d44:	lsl	r5, r5, #1
   13d48:	ldrh	r3, [r2, r5]
   13d4c:	tst	r3, #8192	; 0x2000
   13d50:	movne	r3, r7
   13d54:	ldrb	r5, [r7, #1]!
   13d58:	moveq	r3, #0
   13d5c:	cmp	r5, #0
   13d60:	bne	13d44 <__assert_fail@plt+0x2ee8>
   13d64:	cmp	r3, #0
   13d68:	strne	r3, [r4, #20]
   13d6c:	cmp	r8, #0
   13d70:	bne	13bfc <__assert_fail@plt+0x2da0>
   13d74:	b	13c50 <__assert_fail@plt+0x2df4>
   13d78:	str	r0, [sp, #16]
   13d7c:	bl	10d48 <__ctype_b_loc@plt>
   13d80:	ldrb	r9, [r4, #1]
   13d84:	ldr	r1, [sp, #16]
   13d88:	add	r4, r7, #2
   13d8c:	lsl	r3, r9, #1
   13d90:	ldr	r2, [r0]
   13d94:	str	r0, [sp, #20]
   13d98:	ldrh	r3, [r2, r3]
   13d9c:	ands	r3, r3, #2048	; 0x800
   13da0:	moveq	r1, r3
   13da4:	beq	139c0 <__assert_fail@plt+0x2b64>
   13da8:	mov	r2, #10
   13dac:	mov	r0, r4
   13db0:	bl	10c34 <strtol@plt>
   13db4:	ldr	r3, [sp, #20]
   13db8:	ldr	r2, [r3]
   13dbc:	str	r0, [sp, #24]
   13dc0:	ldrb	r9, [r4, #1]!
   13dc4:	lsl	r3, r9, #1
   13dc8:	ldrh	r3, [r2, r3]
   13dcc:	tst	r3, #2048	; 0x800
   13dd0:	bne	13dc0 <__assert_fail@plt+0x2f64>
   13dd4:	mov	r1, #2
   13dd8:	b	139c0 <__assert_fail@plt+0x2b64>
   13ddc:	ldr	r3, [r8, #16]
   13de0:	str	r3, [r6, #8]
   13de4:	b	13b30 <__assert_fail@plt+0x2cd4>
   13de8:	mov	r2, #113	; 0x71
   13dec:	strb	r3, [sp, #33]	; 0x21
   13df0:	mov	r3, #0
   13df4:	strb	r2, [sp, #32]
   13df8:	strb	r3, [sp, #34]	; 0x22
   13dfc:	b	13b30 <__assert_fail@plt+0x2cd4>
   13e00:	cmp	r3, #112	; 0x70
   13e04:	beq	13e88 <__assert_fail@plt+0x302c>
   13e08:	cmp	r3, #117	; 0x75
   13e0c:	bne	13ef4 <__assert_fail@plt+0x3098>
   13e10:	mov	r3, #256	; 0x100
   13e14:	str	r3, [r6, #4]
   13e18:	ldr	r3, [r8, #16]
   13e1c:	cmp	r3, #1
   13e20:	bhi	13e78 <__assert_fail@plt+0x301c>
   13e24:	mov	r3, #1
   13e28:	str	r3, [r6, #8]
   13e2c:	add	r7, r4, #2
   13e30:	b	13b30 <__assert_fail@plt+0x2cd4>
   13e34:	mov	r3, #8
   13e38:	str	r3, [r6, #8]
   13e3c:	b	13b30 <__assert_fail@plt+0x2cd4>
   13e40:	ldr	r3, [sp, #24]
   13e44:	str	r3, [r6, #8]
   13e48:	b	13b30 <__assert_fail@plt+0x2cd4>
   13e4c:	ldr	r3, [r8, #8]
   13e50:	ldr	r2, [pc, #204]	; 13f24 <__assert_fail@plt+0x30c8>
   13e54:	orr	r3, r3, #1
   13e58:	str	r3, [r8, #8]
   13e5c:	str	r8, [r2]
   13e60:	b	13cd8 <__assert_fail@plt+0x2e7c>
   13e64:	mov	r3, #4
   13e68:	str	r3, [r6, #4]
   13e6c:	ldr	r3, [r8, #16]
   13e70:	cmp	r3, #1
   13e74:	bls	13e24 <__assert_fail@plt+0x2fc8>
   13e78:	mov	r3, #0
   13e7c:	strb	r3, [r4, #2]
   13e80:	mov	r0, r4
   13e84:	bl	134c4 <__assert_fail@plt+0x2668>
   13e88:	mov	r2, #64	; 0x40
   13e8c:	mov	r3, #99	; 0x63
   13e90:	str	r2, [r6, #4]
   13e94:	strb	r3, [sp, #32]
   13e98:	b	13e18 <__assert_fail@plt+0x2fbc>
   13e9c:	mov	r3, #1024	; 0x400
   13ea0:	cmp	r2, #0
   13ea4:	str	r5, [r6, #16]
   13ea8:	str	r3, [r6, #4]
   13eac:	bne	13bc0 <__assert_fail@plt+0x2d64>
   13eb0:	ldr	r3, [r8, #4]
   13eb4:	cmp	r3, #0
   13eb8:	beq	13bc0 <__assert_fail@plt+0x2d64>
   13ebc:	ldr	r1, [r3, #8]
   13ec0:	ldr	r3, [r3]
   13ec4:	add	r2, r2, r1
   13ec8:	cmp	r3, #0
   13ecc:	bne	13ebc <__assert_fail@plt+0x3060>
   13ed0:	str	r2, [r8, #16]
   13ed4:	b	13bc0 <__assert_fail@plt+0x2d64>
   13ed8:	mov	r1, #0
   13edc:	mov	r0, #1
   13ee0:	bl	10ca0 <err@plt>
   13ee4:	ldr	r4, [r4, #4]
   13ee8:	cmp	r4, #0
   13eec:	bne	13d20 <__assert_fail@plt+0x2ec4>
   13ef0:	b	13c50 <__assert_fail@plt+0x2df4>
   13ef4:	mov	r3, #0
   13ef8:	strb	r3, [r4, #2]
   13efc:	mov	r0, r4
   13f00:	bl	13898 <__assert_fail@plt+0x2a3c>
   13f04:	ldr	r1, [pc, #28]	; 13f28 <__assert_fail@plt+0x30cc>
   13f08:	mov	r0, #1
   13f0c:	bl	10e20 <errx@plt>
   13f10:	bl	10c88 <__stack_chk_fail@plt>
   13f14:	andeq	r4, r2, r0, lsl #30
   13f18:	andeq	r4, r1, ip, ror #23
   13f1c:	andeq	r4, r1, r0, lsl #25
   13f20:	andeq	r5, r2, r4, asr r1
   13f24:	andeq	r5, r2, r4, ror #2
   13f28:	andeq	r4, r1, r8, lsl #25
   13f2c:	subs	r2, r1, #1
   13f30:	bxeq	lr
   13f34:	bcc	1410c <__assert_fail@plt+0x32b0>
   13f38:	cmp	r0, r1
   13f3c:	bls	140f0 <__assert_fail@plt+0x3294>
   13f40:	tst	r1, r2
   13f44:	beq	140fc <__assert_fail@plt+0x32a0>
   13f48:	clz	r3, r0
   13f4c:	clz	r2, r1
   13f50:	sub	r3, r2, r3
   13f54:	rsbs	r3, r3, #31
   13f58:	addne	r3, r3, r3, lsl #1
   13f5c:	mov	r2, #0
   13f60:	addne	pc, pc, r3, lsl #2
   13f64:	nop			; (mov r0, r0)
   13f68:	cmp	r0, r1, lsl #31
   13f6c:	adc	r2, r2, r2
   13f70:	subcs	r0, r0, r1, lsl #31
   13f74:	cmp	r0, r1, lsl #30
   13f78:	adc	r2, r2, r2
   13f7c:	subcs	r0, r0, r1, lsl #30
   13f80:	cmp	r0, r1, lsl #29
   13f84:	adc	r2, r2, r2
   13f88:	subcs	r0, r0, r1, lsl #29
   13f8c:	cmp	r0, r1, lsl #28
   13f90:	adc	r2, r2, r2
   13f94:	subcs	r0, r0, r1, lsl #28
   13f98:	cmp	r0, r1, lsl #27
   13f9c:	adc	r2, r2, r2
   13fa0:	subcs	r0, r0, r1, lsl #27
   13fa4:	cmp	r0, r1, lsl #26
   13fa8:	adc	r2, r2, r2
   13fac:	subcs	r0, r0, r1, lsl #26
   13fb0:	cmp	r0, r1, lsl #25
   13fb4:	adc	r2, r2, r2
   13fb8:	subcs	r0, r0, r1, lsl #25
   13fbc:	cmp	r0, r1, lsl #24
   13fc0:	adc	r2, r2, r2
   13fc4:	subcs	r0, r0, r1, lsl #24
   13fc8:	cmp	r0, r1, lsl #23
   13fcc:	adc	r2, r2, r2
   13fd0:	subcs	r0, r0, r1, lsl #23
   13fd4:	cmp	r0, r1, lsl #22
   13fd8:	adc	r2, r2, r2
   13fdc:	subcs	r0, r0, r1, lsl #22
   13fe0:	cmp	r0, r1, lsl #21
   13fe4:	adc	r2, r2, r2
   13fe8:	subcs	r0, r0, r1, lsl #21
   13fec:	cmp	r0, r1, lsl #20
   13ff0:	adc	r2, r2, r2
   13ff4:	subcs	r0, r0, r1, lsl #20
   13ff8:	cmp	r0, r1, lsl #19
   13ffc:	adc	r2, r2, r2
   14000:	subcs	r0, r0, r1, lsl #19
   14004:	cmp	r0, r1, lsl #18
   14008:	adc	r2, r2, r2
   1400c:	subcs	r0, r0, r1, lsl #18
   14010:	cmp	r0, r1, lsl #17
   14014:	adc	r2, r2, r2
   14018:	subcs	r0, r0, r1, lsl #17
   1401c:	cmp	r0, r1, lsl #16
   14020:	adc	r2, r2, r2
   14024:	subcs	r0, r0, r1, lsl #16
   14028:	cmp	r0, r1, lsl #15
   1402c:	adc	r2, r2, r2
   14030:	subcs	r0, r0, r1, lsl #15
   14034:	cmp	r0, r1, lsl #14
   14038:	adc	r2, r2, r2
   1403c:	subcs	r0, r0, r1, lsl #14
   14040:	cmp	r0, r1, lsl #13
   14044:	adc	r2, r2, r2
   14048:	subcs	r0, r0, r1, lsl #13
   1404c:	cmp	r0, r1, lsl #12
   14050:	adc	r2, r2, r2
   14054:	subcs	r0, r0, r1, lsl #12
   14058:	cmp	r0, r1, lsl #11
   1405c:	adc	r2, r2, r2
   14060:	subcs	r0, r0, r1, lsl #11
   14064:	cmp	r0, r1, lsl #10
   14068:	adc	r2, r2, r2
   1406c:	subcs	r0, r0, r1, lsl #10
   14070:	cmp	r0, r1, lsl #9
   14074:	adc	r2, r2, r2
   14078:	subcs	r0, r0, r1, lsl #9
   1407c:	cmp	r0, r1, lsl #8
   14080:	adc	r2, r2, r2
   14084:	subcs	r0, r0, r1, lsl #8
   14088:	cmp	r0, r1, lsl #7
   1408c:	adc	r2, r2, r2
   14090:	subcs	r0, r0, r1, lsl #7
   14094:	cmp	r0, r1, lsl #6
   14098:	adc	r2, r2, r2
   1409c:	subcs	r0, r0, r1, lsl #6
   140a0:	cmp	r0, r1, lsl #5
   140a4:	adc	r2, r2, r2
   140a8:	subcs	r0, r0, r1, lsl #5
   140ac:	cmp	r0, r1, lsl #4
   140b0:	adc	r2, r2, r2
   140b4:	subcs	r0, r0, r1, lsl #4
   140b8:	cmp	r0, r1, lsl #3
   140bc:	adc	r2, r2, r2
   140c0:	subcs	r0, r0, r1, lsl #3
   140c4:	cmp	r0, r1, lsl #2
   140c8:	adc	r2, r2, r2
   140cc:	subcs	r0, r0, r1, lsl #2
   140d0:	cmp	r0, r1, lsl #1
   140d4:	adc	r2, r2, r2
   140d8:	subcs	r0, r0, r1, lsl #1
   140dc:	cmp	r0, r1
   140e0:	adc	r2, r2, r2
   140e4:	subcs	r0, r0, r1
   140e8:	mov	r0, r2
   140ec:	bx	lr
   140f0:	moveq	r0, #1
   140f4:	movne	r0, #0
   140f8:	bx	lr
   140fc:	clz	r2, r1
   14100:	rsb	r2, r2, #31
   14104:	lsr	r0, r0, r2
   14108:	bx	lr
   1410c:	cmp	r0, #0
   14110:	mvnne	r0, #0
   14114:	b	1444c <__assert_fail@plt+0x35f0>
   14118:	cmp	r1, #0
   1411c:	beq	1410c <__assert_fail@plt+0x32b0>
   14120:	push	{r0, r1, lr}
   14124:	bl	13f2c <__assert_fail@plt+0x30d0>
   14128:	pop	{r1, r2, lr}
   1412c:	mul	r3, r2, r0
   14130:	sub	r1, r1, r3
   14134:	bx	lr
   14138:	cmp	r1, #0
   1413c:	beq	14348 <__assert_fail@plt+0x34ec>
   14140:	eor	ip, r0, r1
   14144:	rsbmi	r1, r1, #0
   14148:	subs	r2, r1, #1
   1414c:	beq	14314 <__assert_fail@plt+0x34b8>
   14150:	movs	r3, r0
   14154:	rsbmi	r3, r0, #0
   14158:	cmp	r3, r1
   1415c:	bls	14320 <__assert_fail@plt+0x34c4>
   14160:	tst	r1, r2
   14164:	beq	14330 <__assert_fail@plt+0x34d4>
   14168:	clz	r2, r3
   1416c:	clz	r0, r1
   14170:	sub	r2, r0, r2
   14174:	rsbs	r2, r2, #31
   14178:	addne	r2, r2, r2, lsl #1
   1417c:	mov	r0, #0
   14180:	addne	pc, pc, r2, lsl #2
   14184:	nop			; (mov r0, r0)
   14188:	cmp	r3, r1, lsl #31
   1418c:	adc	r0, r0, r0
   14190:	subcs	r3, r3, r1, lsl #31
   14194:	cmp	r3, r1, lsl #30
   14198:	adc	r0, r0, r0
   1419c:	subcs	r3, r3, r1, lsl #30
   141a0:	cmp	r3, r1, lsl #29
   141a4:	adc	r0, r0, r0
   141a8:	subcs	r3, r3, r1, lsl #29
   141ac:	cmp	r3, r1, lsl #28
   141b0:	adc	r0, r0, r0
   141b4:	subcs	r3, r3, r1, lsl #28
   141b8:	cmp	r3, r1, lsl #27
   141bc:	adc	r0, r0, r0
   141c0:	subcs	r3, r3, r1, lsl #27
   141c4:	cmp	r3, r1, lsl #26
   141c8:	adc	r0, r0, r0
   141cc:	subcs	r3, r3, r1, lsl #26
   141d0:	cmp	r3, r1, lsl #25
   141d4:	adc	r0, r0, r0
   141d8:	subcs	r3, r3, r1, lsl #25
   141dc:	cmp	r3, r1, lsl #24
   141e0:	adc	r0, r0, r0
   141e4:	subcs	r3, r3, r1, lsl #24
   141e8:	cmp	r3, r1, lsl #23
   141ec:	adc	r0, r0, r0
   141f0:	subcs	r3, r3, r1, lsl #23
   141f4:	cmp	r3, r1, lsl #22
   141f8:	adc	r0, r0, r0
   141fc:	subcs	r3, r3, r1, lsl #22
   14200:	cmp	r3, r1, lsl #21
   14204:	adc	r0, r0, r0
   14208:	subcs	r3, r3, r1, lsl #21
   1420c:	cmp	r3, r1, lsl #20
   14210:	adc	r0, r0, r0
   14214:	subcs	r3, r3, r1, lsl #20
   14218:	cmp	r3, r1, lsl #19
   1421c:	adc	r0, r0, r0
   14220:	subcs	r3, r3, r1, lsl #19
   14224:	cmp	r3, r1, lsl #18
   14228:	adc	r0, r0, r0
   1422c:	subcs	r3, r3, r1, lsl #18
   14230:	cmp	r3, r1, lsl #17
   14234:	adc	r0, r0, r0
   14238:	subcs	r3, r3, r1, lsl #17
   1423c:	cmp	r3, r1, lsl #16
   14240:	adc	r0, r0, r0
   14244:	subcs	r3, r3, r1, lsl #16
   14248:	cmp	r3, r1, lsl #15
   1424c:	adc	r0, r0, r0
   14250:	subcs	r3, r3, r1, lsl #15
   14254:	cmp	r3, r1, lsl #14
   14258:	adc	r0, r0, r0
   1425c:	subcs	r3, r3, r1, lsl #14
   14260:	cmp	r3, r1, lsl #13
   14264:	adc	r0, r0, r0
   14268:	subcs	r3, r3, r1, lsl #13
   1426c:	cmp	r3, r1, lsl #12
   14270:	adc	r0, r0, r0
   14274:	subcs	r3, r3, r1, lsl #12
   14278:	cmp	r3, r1, lsl #11
   1427c:	adc	r0, r0, r0
   14280:	subcs	r3, r3, r1, lsl #11
   14284:	cmp	r3, r1, lsl #10
   14288:	adc	r0, r0, r0
   1428c:	subcs	r3, r3, r1, lsl #10
   14290:	cmp	r3, r1, lsl #9
   14294:	adc	r0, r0, r0
   14298:	subcs	r3, r3, r1, lsl #9
   1429c:	cmp	r3, r1, lsl #8
   142a0:	adc	r0, r0, r0
   142a4:	subcs	r3, r3, r1, lsl #8
   142a8:	cmp	r3, r1, lsl #7
   142ac:	adc	r0, r0, r0
   142b0:	subcs	r3, r3, r1, lsl #7
   142b4:	cmp	r3, r1, lsl #6
   142b8:	adc	r0, r0, r0
   142bc:	subcs	r3, r3, r1, lsl #6
   142c0:	cmp	r3, r1, lsl #5
   142c4:	adc	r0, r0, r0
   142c8:	subcs	r3, r3, r1, lsl #5
   142cc:	cmp	r3, r1, lsl #4
   142d0:	adc	r0, r0, r0
   142d4:	subcs	r3, r3, r1, lsl #4
   142d8:	cmp	r3, r1, lsl #3
   142dc:	adc	r0, r0, r0
   142e0:	subcs	r3, r3, r1, lsl #3
   142e4:	cmp	r3, r1, lsl #2
   142e8:	adc	r0, r0, r0
   142ec:	subcs	r3, r3, r1, lsl #2
   142f0:	cmp	r3, r1, lsl #1
   142f4:	adc	r0, r0, r0
   142f8:	subcs	r3, r3, r1, lsl #1
   142fc:	cmp	r3, r1
   14300:	adc	r0, r0, r0
   14304:	subcs	r3, r3, r1
   14308:	cmp	ip, #0
   1430c:	rsbmi	r0, r0, #0
   14310:	bx	lr
   14314:	teq	ip, r0
   14318:	rsbmi	r0, r0, #0
   1431c:	bx	lr
   14320:	movcc	r0, #0
   14324:	asreq	r0, ip, #31
   14328:	orreq	r0, r0, #1
   1432c:	bx	lr
   14330:	clz	r2, r1
   14334:	rsb	r2, r2, #31
   14338:	cmp	ip, #0
   1433c:	lsr	r0, r3, r2
   14340:	rsbmi	r0, r0, #0
   14344:	bx	lr
   14348:	cmp	r0, #0
   1434c:	mvngt	r0, #-2147483648	; 0x80000000
   14350:	movlt	r0, #-2147483648	; 0x80000000
   14354:	b	1444c <__assert_fail@plt+0x35f0>
   14358:	cmp	r1, #0
   1435c:	beq	14348 <__assert_fail@plt+0x34ec>
   14360:	push	{r0, r1, lr}
   14364:	bl	14140 <__assert_fail@plt+0x32e4>
   14368:	pop	{r1, r2, lr}
   1436c:	mul	r3, r2, r0
   14370:	sub	r1, r1, r3
   14374:	bx	lr
   14378:	cmp	r3, #0
   1437c:	cmpeq	r2, #0
   14380:	bne	143a4 <__assert_fail@plt+0x3548>
   14384:	cmp	r1, #0
   14388:	movlt	r1, #-2147483648	; 0x80000000
   1438c:	movlt	r0, #0
   14390:	blt	143a0 <__assert_fail@plt+0x3544>
   14394:	cmpeq	r0, #0
   14398:	mvnne	r1, #-2147483648	; 0x80000000
   1439c:	mvnne	r0, #0
   143a0:	b	1444c <__assert_fail@plt+0x35f0>
   143a4:	sub	sp, sp, #8
   143a8:	push	{sp, lr}
   143ac:	cmp	r1, #0
   143b0:	blt	143d0 <__assert_fail@plt+0x3574>
   143b4:	cmp	r3, #0
   143b8:	blt	14404 <__assert_fail@plt+0x35a8>
   143bc:	bl	1445c <__assert_fail@plt+0x3600>
   143c0:	ldr	lr, [sp, #4]
   143c4:	add	sp, sp, #8
   143c8:	pop	{r2, r3}
   143cc:	bx	lr
   143d0:	rsbs	r0, r0, #0
   143d4:	sbc	r1, r1, r1, lsl #1
   143d8:	cmp	r3, #0
   143dc:	blt	14428 <__assert_fail@plt+0x35cc>
   143e0:	bl	1445c <__assert_fail@plt+0x3600>
   143e4:	ldr	lr, [sp, #4]
   143e8:	add	sp, sp, #8
   143ec:	pop	{r2, r3}
   143f0:	rsbs	r0, r0, #0
   143f4:	sbc	r1, r1, r1, lsl #1
   143f8:	rsbs	r2, r2, #0
   143fc:	sbc	r3, r3, r3, lsl #1
   14400:	bx	lr
   14404:	rsbs	r2, r2, #0
   14408:	sbc	r3, r3, r3, lsl #1
   1440c:	bl	1445c <__assert_fail@plt+0x3600>
   14410:	ldr	lr, [sp, #4]
   14414:	add	sp, sp, #8
   14418:	pop	{r2, r3}
   1441c:	rsbs	r0, r0, #0
   14420:	sbc	r1, r1, r1, lsl #1
   14424:	bx	lr
   14428:	rsbs	r2, r2, #0
   1442c:	sbc	r3, r3, r3, lsl #1
   14430:	bl	1445c <__assert_fail@plt+0x3600>
   14434:	ldr	lr, [sp, #4]
   14438:	add	sp, sp, #8
   1443c:	pop	{r2, r3}
   14440:	rsbs	r2, r2, #0
   14444:	sbc	r3, r3, r3, lsl #1
   14448:	bx	lr
   1444c:	push	{r1, lr}
   14450:	mov	r0, #8
   14454:	bl	10c28 <raise@plt>
   14458:	pop	{r1, pc}
   1445c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14460:	cmp	r1, r3
   14464:	sub	sp, sp, #12
   14468:	cmpeq	r0, r2
   1446c:	mov	sl, r0
   14470:	mov	fp, r1
   14474:	ldr	r8, [sp, #48]	; 0x30
   14478:	bcc	14570 <__assert_fail@plt+0x3714>
   1447c:	cmp	r3, #0
   14480:	mov	r0, r2
   14484:	mov	r1, r3
   14488:	clzne	r2, r3
   1448c:	clzeq	r3, r0
   14490:	addeq	r2, r3, #32
   14494:	cmp	fp, #0
   14498:	clzeq	r3, sl
   1449c:	addeq	r3, r3, #32
   144a0:	clzne	r3, fp
   144a4:	sub	r3, r2, r3
   144a8:	sub	ip, r3, #32
   144ac:	lsl	r7, r1, r3
   144b0:	rsb	lr, r3, #32
   144b4:	orr	r7, r7, r0, lsl ip
   144b8:	orr	r7, r7, r0, lsr lr
   144bc:	lsl	r6, r0, r3
   144c0:	cmp	fp, r7
   144c4:	cmpeq	sl, r6
   144c8:	bcs	14590 <__assert_fail@plt+0x3734>
   144cc:	mov	r0, #0
   144d0:	mov	r1, #0
   144d4:	strd	r0, [sp]
   144d8:	cmp	r3, #0
   144dc:	beq	1457c <__assert_fail@plt+0x3720>
   144e0:	lsrs	r7, r7, #1
   144e4:	rrx	r6, r6
   144e8:	mov	r2, r3
   144ec:	b	14510 <__assert_fail@plt+0x36b4>
   144f0:	subs	r0, sl, r6
   144f4:	sbc	r1, fp, r7
   144f8:	adds	r4, r0, r0
   144fc:	adc	r5, r1, r1
   14500:	adds	sl, r4, #1
   14504:	adc	fp, r5, #0
   14508:	subs	r2, r2, #1
   1450c:	beq	1452c <__assert_fail@plt+0x36d0>
   14510:	cmp	fp, r7
   14514:	cmpeq	sl, r6
   14518:	bcs	144f0 <__assert_fail@plt+0x3694>
   1451c:	adds	sl, sl, sl
   14520:	adc	fp, fp, fp
   14524:	subs	r2, r2, #1
   14528:	bne	14510 <__assert_fail@plt+0x36b4>
   1452c:	lsr	r2, sl, r3
   14530:	lsr	r9, fp, r3
   14534:	orr	r2, r2, fp, lsl lr
   14538:	orr	r2, r2, fp, lsr ip
   1453c:	lsl	r1, r9, r3
   14540:	ldrd	r6, [sp]
   14544:	orr	r1, r1, r2, lsl ip
   14548:	lsl	r0, r2, r3
   1454c:	adds	r6, r6, sl
   14550:	orr	r1, r1, r2, lsr lr
   14554:	adc	r7, r7, fp
   14558:	subs	r6, r6, r0
   1455c:	sbc	r7, r7, r1
   14560:	mov	sl, r2
   14564:	mov	fp, r9
   14568:	strd	r6, [sp]
   1456c:	b	1457c <__assert_fail@plt+0x3720>
   14570:	mov	r2, #0
   14574:	mov	r3, #0
   14578:	strd	r2, [sp]
   1457c:	cmp	r8, #0
   14580:	strdne	sl, [r8]
   14584:	ldrd	r0, [sp]
   14588:	add	sp, sp, #12
   1458c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14590:	mov	r2, #1
   14594:	subs	sl, sl, r6
   14598:	lsl	r1, r2, ip
   1459c:	orr	r1, r1, r2, lsr lr
   145a0:	lsl	r2, r2, r3
   145a4:	str	r1, [sp, #4]
   145a8:	sbc	fp, fp, r7
   145ac:	str	r2, [sp]
   145b0:	b	144d8 <__assert_fail@plt+0x367c>
   145b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   145b8:	mov	r7, r0
   145bc:	ldr	r6, [pc, #72]	; 1460c <__assert_fail@plt+0x37b0>
   145c0:	ldr	r5, [pc, #72]	; 14610 <__assert_fail@plt+0x37b4>
   145c4:	add	r6, pc, r6
   145c8:	add	r5, pc, r5
   145cc:	sub	r6, r6, r5
   145d0:	mov	r8, r1
   145d4:	mov	r9, r2
   145d8:	bl	10bfc <calloc@plt-0x20>
   145dc:	asrs	r6, r6, #2
   145e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   145e4:	mov	r4, #0
   145e8:	add	r4, r4, #1
   145ec:	ldr	r3, [r5], #4
   145f0:	mov	r2, r9
   145f4:	mov	r1, r8
   145f8:	mov	r0, r7
   145fc:	blx	r3
   14600:	cmp	r6, r4
   14604:	bne	145e8 <__assert_fail@plt+0x378c>
   14608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1460c:	andeq	r0, r1, r0, lsr r9
   14610:	andeq	r0, r1, r8, lsr #18
   14614:	bx	lr

Disassembly of section .fini:

00014618 <.fini>:
   14618:	push	{r3, lr}
   1461c:	pop	{r3, pc}
