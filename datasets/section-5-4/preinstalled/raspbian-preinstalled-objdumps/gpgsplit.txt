
raspbian-preinstalled/gpgsplit:     file format elf32-littlearm


Disassembly of section .init:

00011a38 <.init>:
   11a38:	push	{r3, lr}
   11a3c:	bl	121e8 <__assert_fail@plt+0x1b4>
   11a40:	pop	{r3, pc}

Disassembly of section .plt:

00011a44 <gcry_xmalloc@plt-0x14>:
   11a44:	push	{lr}		; (str lr, [sp, #-4]!)
   11a48:	ldr	lr, [pc, #4]	; 11a54 <gcry_xmalloc@plt-0x4>
   11a4c:	add	lr, pc, lr
   11a50:	ldr	pc, [lr, #8]!
   11a54:	andeq	sp, r1, r4, lsr #7

00011a58 <gcry_xmalloc@plt>:
   11a58:	add	ip, pc, #0, 12
   11a5c:	add	ip, ip, #118784	; 0x1d000
   11a60:	ldr	pc, [ip, #932]!	; 0x3a4

00011a64 <raise@plt>:
   11a64:	add	ip, pc, #0, 12
   11a68:	add	ip, ip, #118784	; 0x1d000
   11a6c:	ldr	pc, [ip, #924]!	; 0x39c

00011a70 <gpgrt_funlockfile@plt>:
   11a70:	add	ip, pc, #0, 12
   11a74:	add	ip, ip, #118784	; 0x1d000
   11a78:	ldr	pc, [ip, #916]!	; 0x394

00011a7c <gcry_malloc@plt>:
   11a7c:	add	ip, pc, #0, 12
   11a80:	add	ip, ip, #118784	; 0x1d000
   11a84:	ldr	pc, [ip, #908]!	; 0x38c

00011a88 <getpwnam@plt>:
   11a88:	add	ip, pc, #0, 12
   11a8c:	add	ip, ip, #118784	; 0x1d000
   11a90:	ldr	pc, [ip, #900]!	; 0x384

00011a94 <iconv_close@plt>:
   11a94:	add	ip, pc, #0, 12
   11a98:	add	ip, ip, #118784	; 0x1d000
   11a9c:	ldr	pc, [ip, #892]!	; 0x37c

00011aa0 <iconv@plt>:
   11aa0:	add	ip, pc, #0, 12
   11aa4:	add	ip, ip, #118784	; 0x1d000
   11aa8:	ldr	pc, [ip, #884]!	; 0x374

00011aac <strcmp@plt>:
   11aac:	add	ip, pc, #0, 12
   11ab0:	add	ip, ip, #118784	; 0x1d000
   11ab4:	ldr	pc, [ip, #876]!	; 0x36c

00011ab8 <gpgrt_vfprintf_unlocked@plt>:
   11ab8:	add	ip, pc, #0, 12
   11abc:	add	ip, ip, #118784	; 0x1d000
   11ac0:	ldr	pc, [ip, #868]!	; 0x364

00011ac4 <strtol@plt>:
   11ac4:	add	ip, pc, #0, 12
   11ac8:	add	ip, ip, #118784	; 0x1d000
   11acc:	ldr	pc, [ip, #860]!	; 0x35c

00011ad0 <getpwuid@plt>:
   11ad0:	add	ip, pc, #0, 12
   11ad4:	add	ip, ip, #118784	; 0x1d000
   11ad8:	ldr	pc, [ip, #852]!	; 0x354

00011adc <strcspn@plt>:
   11adc:	add	ip, pc, #0, 12
   11ae0:	add	ip, ip, #118784	; 0x1d000
   11ae4:	ldr	pc, [ip, #844]!	; 0x34c

00011ae8 <setrlimit64@plt>:
   11ae8:	add	ip, pc, #0, 12
   11aec:	add	ip, ip, #118784	; 0x1d000
   11af0:	ldr	pc, [ip, #836]!	; 0x344

00011af4 <inflate@plt>:
   11af4:	add	ip, pc, #0, 12
   11af8:	add	ip, ip, #118784	; 0x1d000
   11afc:	ldr	pc, [ip, #828]!	; 0x33c

00011b00 <fflush@plt>:
   11b00:	add	ip, pc, #0, 12
   11b04:	add	ip, ip, #118784	; 0x1d000
   11b08:	ldr	pc, [ip, #820]!	; 0x334

00011b0c <getuid@plt>:
   11b0c:	add	ip, pc, #0, 12
   11b10:	add	ip, ip, #118784	; 0x1d000
   11b14:	ldr	pc, [ip, #812]!	; 0x32c

00011b18 <sigprocmask@plt>:
   11b18:	add	ip, pc, #0, 12
   11b1c:	add	ip, ip, #118784	; 0x1d000
   11b20:	ldr	pc, [ip, #804]!	; 0x324

00011b24 <memmove@plt>:
   11b24:	add	ip, pc, #0, 12
   11b28:	add	ip, ip, #118784	; 0x1d000
   11b2c:	ldr	pc, [ip, #796]!	; 0x31c

00011b30 <free@plt>:
   11b30:	add	ip, pc, #0, 12
   11b34:	add	ip, ip, #118784	; 0x1d000
   11b38:	ldr	pc, [ip, #788]!	; 0x314

00011b3c <_gpgrt_putc_overflow@plt>:
   11b3c:	add	ip, pc, #0, 12
   11b40:	add	ip, ip, #118784	; 0x1d000
   11b44:	ldr	pc, [ip, #780]!	; 0x30c

00011b48 <nanosleep@plt>:
   11b48:	add	ip, pc, #0, 12
   11b4c:	add	ip, ip, #118784	; 0x1d000
   11b50:	ldr	pc, [ip, #772]!	; 0x304

00011b54 <ferror@plt>:
   11b54:	add	ip, pc, #0, 12
   11b58:	add	ip, ip, #118784	; 0x1d000
   11b5c:	ldr	pc, [ip, #764]!	; 0x2fc

00011b60 <inet_pton@plt>:
   11b60:	add	ip, pc, #0, 12
   11b64:	add	ip, ip, #118784	; 0x1d000
   11b68:	ldr	pc, [ip, #756]!	; 0x2f4

00011b6c <memcpy@plt>:
   11b6c:	add	ip, pc, #0, 12
   11b70:	add	ip, ip, #118784	; 0x1d000
   11b74:	ldr	pc, [ip, #748]!	; 0x2ec

00011b78 <time@plt>:
   11b78:	add	ip, pc, #0, 12
   11b7c:	add	ip, ip, #118784	; 0x1d000
   11b80:	ldr	pc, [ip, #740]!	; 0x2e4

00011b84 <gcry_free@plt>:
   11b84:	add	ip, pc, #0, 12
   11b88:	add	ip, ip, #118784	; 0x1d000
   11b8c:	ldr	pc, [ip, #732]!	; 0x2dc

00011b90 <memcmp@plt>:
   11b90:	add	ip, pc, #0, 12
   11b94:	add	ip, ip, #118784	; 0x1d000
   11b98:	ldr	pc, [ip, #724]!	; 0x2d4

00011b9c <sleep@plt>:
   11b9c:	add	ip, pc, #0, 12
   11ba0:	add	ip, ip, #118784	; 0x1d000
   11ba4:	ldr	pc, [ip, #716]!	; 0x2cc

00011ba8 <stpcpy@plt>:
   11ba8:	add	ip, pc, #0, 12
   11bac:	add	ip, ip, #118784	; 0x1d000
   11bb0:	ldr	pc, [ip, #708]!	; 0x2c4

00011bb4 <dcgettext@plt>:
   11bb4:	add	ip, pc, #0, 12
   11bb8:	add	ip, ip, #118784	; 0x1d000
   11bbc:	ldr	pc, [ip, #700]!	; 0x2bc

00011bc0 <__stack_chk_fail@plt>:
   11bc0:	add	ip, pc, #0, 12
   11bc4:	add	ip, ip, #118784	; 0x1d000
   11bc8:	ldr	pc, [ip, #692]!	; 0x2b4

00011bcc <gpgrt_set_alloc_func@plt>:
   11bcc:	add	ip, pc, #0, 12
   11bd0:	add	ip, ip, #118784	; 0x1d000
   11bd4:	ldr	pc, [ip, #684]!	; 0x2ac

00011bd8 <getrlimit64@plt>:
   11bd8:	add	ip, pc, #0, 12
   11bdc:	add	ip, ip, #118784	; 0x1d000
   11be0:	ldr	pc, [ip, #676]!	; 0x2a4

00011be4 <gpgrt_fflush@plt>:
   11be4:	add	ip, pc, #0, 12
   11be8:	add	ip, ip, #118784	; 0x1d000
   11bec:	ldr	pc, [ip, #668]!	; 0x29c

00011bf0 <dup@plt>:
   11bf0:	add	ip, pc, #0, 12
   11bf4:	add	ip, ip, #118784	; 0x1d000
   11bf8:	ldr	pc, [ip, #660]!	; 0x294

00011bfc <BZ2_bzDecompressInit@plt>:
   11bfc:	add	ip, pc, #0, 12
   11c00:	add	ip, ip, #118784	; 0x1d000
   11c04:	ldr	pc, [ip, #652]!	; 0x28c

00011c08 <tmpfile64@plt>:
   11c08:	add	ip, pc, #0, 12
   11c0c:	add	ip, ip, #118784	; 0x1d000
   11c10:	ldr	pc, [ip, #644]!	; 0x284

00011c14 <chdir@plt>:
   11c14:	add	ip, pc, #0, 12
   11c18:	add	ip, ip, #118784	; 0x1d000
   11c1c:	ldr	pc, [ip, #636]!	; 0x27c

00011c20 <BZ2_bzDecompressEnd@plt>:
   11c20:	add	ip, pc, #0, 12
   11c24:	add	ip, ip, #118784	; 0x1d000
   11c28:	ldr	pc, [ip, #628]!	; 0x274

00011c2c <gpgrt_fputs_unlocked@plt>:
   11c2c:	add	ip, pc, #0, 12
   11c30:	add	ip, ip, #118784	; 0x1d000
   11c34:	ldr	pc, [ip, #620]!	; 0x26c

00011c38 <sigaction@plt>:
   11c38:	add	ip, pc, #0, 12
   11c3c:	add	ip, ip, #118784	; 0x1d000
   11c40:	ldr	pc, [ip, #612]!	; 0x264

00011c44 <fwrite@plt>:
   11c44:	add	ip, pc, #0, 12
   11c48:	add	ip, ip, #118784	; 0x1d000
   11c4c:	ldr	pc, [ip, #604]!	; 0x25c

00011c50 <gcry_check_version@plt>:
   11c50:	add	ip, pc, #0, 12
   11c54:	add	ip, ip, #118784	; 0x1d000
   11c58:	ldr	pc, [ip, #596]!	; 0x254

00011c5c <strcpy@plt>:
   11c5c:	add	ip, pc, #0, 12
   11c60:	add	ip, ip, #118784	; 0x1d000
   11c64:	ldr	pc, [ip, #588]!	; 0x24c

00011c68 <gpgrt_flockfile@plt>:
   11c68:	add	ip, pc, #0, 12
   11c6c:	add	ip, ip, #118784	; 0x1d000
   11c70:	ldr	pc, [ip, #580]!	; 0x244

00011c74 <gpgrt_fclose@plt>:
   11c74:	add	ip, pc, #0, 12
   11c78:	add	ip, ip, #118784	; 0x1d000
   11c7c:	ldr	pc, [ip, #572]!	; 0x23c

00011c80 <gpgrt_setvbuf@plt>:
   11c80:	add	ip, pc, #0, 12
   11c84:	add	ip, ip, #118784	; 0x1d000
   11c88:	ldr	pc, [ip, #564]!	; 0x234

00011c8c <open64@plt>:
   11c8c:	add	ip, pc, #0, 12
   11c90:	add	ip, ip, #118784	; 0x1d000
   11c94:	ldr	pc, [ip, #556]!	; 0x22c

00011c98 <getenv@plt>:
   11c98:	add	ip, pc, #0, 12
   11c9c:	add	ip, ip, #118784	; 0x1d000
   11ca0:	ldr	pc, [ip, #548]!	; 0x224

00011ca4 <gcry_malloc_secure@plt>:
   11ca4:	add	ip, pc, #0, 12
   11ca8:	add	ip, ip, #118784	; 0x1d000
   11cac:	ldr	pc, [ip, #540]!	; 0x21c

00011cb0 <malloc@plt>:
   11cb0:	add	ip, pc, #0, 12
   11cb4:	add	ip, ip, #118784	; 0x1d000
   11cb8:	ldr	pc, [ip, #532]!	; 0x214

00011cbc <iconv_open@plt>:
   11cbc:	add	ip, pc, #0, 12
   11cc0:	add	ip, ip, #118784	; 0x1d000
   11cc4:	ldr	pc, [ip, #524]!	; 0x20c

00011cc8 <__libc_start_main@plt>:
   11cc8:	add	ip, pc, #0, 12
   11ccc:	add	ip, ip, #118784	; 0x1d000
   11cd0:	ldr	pc, [ip, #516]!	; 0x204

00011cd4 <strerror@plt>:
   11cd4:	add	ip, pc, #0, 12
   11cd8:	add	ip, ip, #118784	; 0x1d000
   11cdc:	ldr	pc, [ip, #508]!	; 0x1fc

00011ce0 <localtime@plt>:
   11ce0:	add	ip, pc, #0, 12
   11ce4:	add	ip, ip, #118784	; 0x1d000
   11ce8:	ldr	pc, [ip, #500]!	; 0x1f4

00011cec <__ctype_tolower_loc@plt>:
   11cec:	add	ip, pc, #0, 12
   11cf0:	add	ip, ip, #118784	; 0x1d000
   11cf4:	ldr	pc, [ip, #492]!	; 0x1ec

00011cf8 <__ctype_toupper_loc@plt>:
   11cf8:	add	ip, pc, #0, 12
   11cfc:	add	ip, ip, #118784	; 0x1d000
   11d00:	ldr	pc, [ip, #484]!	; 0x1e4

00011d04 <__gmon_start__@plt>:
   11d04:	add	ip, pc, #0, 12
   11d08:	add	ip, ip, #118784	; 0x1d000
   11d0c:	ldr	pc, [ip, #476]!	; 0x1dc

00011d10 <rename@plt>:
   11d10:	add	ip, pc, #0, 12
   11d14:	add	ip, ip, #118784	; 0x1d000
   11d18:	ldr	pc, [ip, #468]!	; 0x1d4

00011d1c <__ctype_b_loc@plt>:
   11d1c:	add	ip, pc, #0, 12
   11d20:	add	ip, ip, #118784	; 0x1d000
   11d24:	ldr	pc, [ip, #460]!	; 0x1cc

00011d28 <_gpgrt_get_std_stream@plt>:
   11d28:	add	ip, pc, #0, 12
   11d2c:	add	ip, ip, #118784	; 0x1d000
   11d30:	ldr	pc, [ip, #452]!	; 0x1c4

00011d34 <getcwd@plt>:
   11d34:	add	ip, pc, #0, 12
   11d38:	add	ip, ip, #118784	; 0x1d000
   11d3c:	ldr	pc, [ip, #444]!	; 0x1bc

00011d40 <getpid@plt>:
   11d40:	add	ip, pc, #0, 12
   11d44:	add	ip, ip, #118784	; 0x1d000
   11d48:	ldr	pc, [ip, #436]!	; 0x1b4

00011d4c <exit@plt>:
   11d4c:	add	ip, pc, #0, 12
   11d50:	add	ip, ip, #118784	; 0x1d000
   11d54:	ldr	pc, [ip, #428]!	; 0x1ac

00011d58 <feof@plt>:
   11d58:	add	ip, pc, #0, 12
   11d5c:	add	ip, ip, #118784	; 0x1d000
   11d60:	ldr	pc, [ip, #420]!	; 0x1a4

00011d64 <gpgrt_fprintf_unlocked@plt>:
   11d64:	add	ip, pc, #0, 12
   11d68:	add	ip, ip, #118784	; 0x1d000
   11d6c:	ldr	pc, [ip, #412]!	; 0x19c

00011d70 <inflateEnd@plt>:
   11d70:	add	ip, pc, #0, 12
   11d74:	add	ip, ip, #118784	; 0x1d000
   11d78:	ldr	pc, [ip, #404]!	; 0x194

00011d7c <strtoul@plt>:
   11d7c:	add	ip, pc, #0, 12
   11d80:	add	ip, ip, #118784	; 0x1d000
   11d84:	ldr	pc, [ip, #396]!	; 0x18c

00011d88 <strlen@plt>:
   11d88:	add	ip, pc, #0, 12
   11d8c:	add	ip, ip, #118784	; 0x1d000
   11d90:	ldr	pc, [ip, #388]!	; 0x184

00011d94 <inotify_init@plt>:
   11d94:	add	ip, pc, #0, 12
   11d98:	add	ip, ip, #118784	; 0x1d000
   11d9c:	ldr	pc, [ip, #380]!	; 0x17c

00011da0 <strchr@plt>:
   11da0:	add	ip, pc, #0, 12
   11da4:	add	ip, ip, #118784	; 0x1d000
   11da8:	ldr	pc, [ip, #372]!	; 0x174

00011dac <setenv@plt>:
   11dac:	add	ip, pc, #0, 12
   11db0:	add	ip, ip, #118784	; 0x1d000
   11db4:	ldr	pc, [ip, #364]!	; 0x16c

00011db8 <gpg_err_code_from_syserror@plt>:
   11db8:	add	ip, pc, #0, 12
   11dbc:	add	ip, ip, #118784	; 0x1d000
   11dc0:	ldr	pc, [ip, #356]!	; 0x164

00011dc4 <sigfillset@plt>:
   11dc4:	add	ip, pc, #0, 12
   11dc8:	add	ip, ip, #118784	; 0x1d000
   11dcc:	ldr	pc, [ip, #348]!	; 0x15c

00011dd0 <inotify_add_watch@plt>:
   11dd0:	add	ip, pc, #0, 12
   11dd4:	add	ip, ip, #118784	; 0x1d000
   11dd8:	ldr	pc, [ip, #340]!	; 0x154

00011ddc <__errno_location@plt>:
   11ddc:	add	ip, pc, #0, 12
   11de0:	add	ip, ip, #118784	; 0x1d000
   11de4:	ldr	pc, [ip, #332]!	; 0x14c

00011de8 <__strcat_chk@plt>:
   11de8:	add	ip, pc, #0, 12
   11dec:	add	ip, ip, #118784	; 0x1d000
   11df0:	ldr	pc, [ip, #324]!	; 0x144

00011df4 <__sprintf_chk@plt>:
   11df4:	add	ip, pc, #0, 12
   11df8:	add	ip, ip, #118784	; 0x1d000
   11dfc:	ldr	pc, [ip, #316]!	; 0x13c

00011e00 <__cxa_atexit@plt>:
   11e00:	add	ip, pc, #0, 12
   11e04:	add	ip, ip, #118784	; 0x1d000
   11e08:	ldr	pc, [ip, #308]!	; 0x134

00011e0c <mkdir@plt>:
   11e0c:	add	ip, pc, #0, 12
   11e10:	add	ip, ip, #118784	; 0x1d000
   11e14:	ldr	pc, [ip, #300]!	; 0x12c

00011e18 <memset@plt>:
   11e18:	add	ip, pc, #0, 12
   11e1c:	add	ip, ip, #118784	; 0x1d000
   11e20:	ldr	pc, [ip, #292]!	; 0x124

00011e24 <gcry_calloc@plt>:
   11e24:	add	ip, pc, #0, 12
   11e28:	add	ip, ip, #118784	; 0x1d000
   11e2c:	ldr	pc, [ip, #284]!	; 0x11c

00011e30 <strncpy@plt>:
   11e30:	add	ip, pc, #0, 12
   11e34:	add	ip, ip, #118784	; 0x1d000
   11e38:	ldr	pc, [ip, #276]!	; 0x114

00011e3c <gpgrt_vasprintf@plt>:
   11e3c:	add	ip, pc, #0, 12
   11e40:	add	ip, ip, #118784	; 0x1d000
   11e44:	ldr	pc, [ip, #268]!	; 0x10c

00011e48 <write@plt>:
   11e48:	add	ip, pc, #0, 12
   11e4c:	add	ip, ip, #118784	; 0x1d000
   11e50:	ldr	pc, [ip, #260]!	; 0x104

00011e54 <BZ2_bzDecompress@plt>:
   11e54:	add	ip, pc, #0, 12
   11e58:	add	ip, ip, #118784	; 0x1d000
   11e5c:	ldr	pc, [ip, #252]!	; 0xfc

00011e60 <__fprintf_chk@plt>:
   11e60:	add	ip, pc, #0, 12
   11e64:	add	ip, ip, #118784	; 0x1d000
   11e68:	ldr	pc, [ip, #244]!	; 0xf4

00011e6c <gcry_xstrdup@plt>:
   11e6c:	add	ip, pc, #0, 12
   11e70:	add	ip, ip, #118784	; 0x1d000
   11e74:	ldr	pc, [ip, #236]!	; 0xec

00011e78 <access@plt>:
   11e78:	add	ip, pc, #0, 12
   11e7c:	add	ip, ip, #118784	; 0x1d000
   11e80:	ldr	pc, [ip, #228]!	; 0xe4

00011e84 <gcry_realloc@plt>:
   11e84:	add	ip, pc, #0, 12
   11e88:	add	ip, ip, #118784	; 0x1d000
   11e8c:	ldr	pc, [ip, #220]!	; 0xdc

00011e90 <fclose@plt>:
   11e90:	add	ip, pc, #0, 12
   11e94:	add	ip, ip, #118784	; 0x1d000
   11e98:	ldr	pc, [ip, #212]!	; 0xd4

00011e9c <gpgrt_fputs@plt>:
   11e9c:	add	ip, pc, #0, 12
   11ea0:	add	ip, ip, #118784	; 0x1d000
   11ea4:	ldr	pc, [ip, #204]!	; 0xcc

00011ea8 <gpgrt_snprintf@plt>:
   11ea8:	add	ip, pc, #0, 12
   11eac:	add	ip, ip, #118784	; 0x1d000
   11eb0:	ldr	pc, [ip, #196]!	; 0xc4

00011eb4 <inflateInit_@plt>:
   11eb4:	add	ip, pc, #0, 12
   11eb8:	add	ip, ip, #118784	; 0x1d000
   11ebc:	ldr	pc, [ip, #188]!	; 0xbc

00011ec0 <fcntl64@plt>:
   11ec0:	add	ip, pc, #0, 12
   11ec4:	add	ip, ip, #118784	; 0x1d000
   11ec8:	ldr	pc, [ip, #180]!	; 0xb4

00011ecc <gcry_md_hash_buffer@plt>:
   11ecc:	add	ip, pc, #0, 12
   11ed0:	add	ip, ip, #118784	; 0x1d000
   11ed4:	ldr	pc, [ip, #172]!	; 0xac

00011ed8 <sigemptyset@plt>:
   11ed8:	add	ip, pc, #0, 12
   11edc:	add	ip, ip, #118784	; 0x1d000
   11ee0:	ldr	pc, [ip, #164]!	; 0xa4

00011ee4 <__explicit_bzero_chk@plt>:
   11ee4:	add	ip, pc, #0, 12
   11ee8:	add	ip, ip, #118784	; 0x1d000
   11eec:	ldr	pc, [ip, #156]!	; 0x9c

00011ef0 <strrchr@plt>:
   11ef0:	add	ip, pc, #0, 12
   11ef4:	add	ip, ip, #118784	; 0x1d000
   11ef8:	ldr	pc, [ip, #148]!	; 0x94

00011efc <nl_langinfo@plt>:
   11efc:	add	ip, pc, #0, 12
   11f00:	add	ip, ip, #118784	; 0x1d000
   11f04:	ldr	pc, [ip, #140]!	; 0x8c

00011f08 <inflateInit2_@plt>:
   11f08:	add	ip, pc, #0, 12
   11f0c:	add	ip, ip, #118784	; 0x1d000
   11f10:	ldr	pc, [ip, #132]!	; 0x84

00011f14 <gpg_err_set_errno@plt>:
   11f14:	add	ip, pc, #0, 12
   11f18:	add	ip, ip, #118784	; 0x1d000
   11f1c:	ldr	pc, [ip, #124]!	; 0x7c

00011f20 <gpg_strerror@plt>:
   11f20:	add	ip, pc, #0, 12
   11f24:	add	ip, ip, #118784	; 0x1d000
   11f28:	ldr	pc, [ip, #116]!	; 0x74

00011f2c <gpgrt_fopencookie@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #118784	; 0x1d000
   11f34:	ldr	pc, [ip, #108]!	; 0x6c

00011f38 <putc@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #118784	; 0x1d000
   11f40:	ldr	pc, [ip, #100]!	; 0x64

00011f44 <getsockname@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #118784	; 0x1d000
   11f4c:	ldr	pc, [ip, #92]!	; 0x5c

00011f50 <gpg_err_init@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #118784	; 0x1d000
   11f58:	ldr	pc, [ip, #84]!	; 0x54

00011f5c <remove@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #118784	; 0x1d000
   11f64:	ldr	pc, [ip, #76]!	; 0x4c

00011f68 <fopen64@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #118784	; 0x1d000
   11f70:	ldr	pc, [ip, #68]!	; 0x44

00011f74 <gcry_create_nonce@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #118784	; 0x1d000
   11f7c:	ldr	pc, [ip, #60]!	; 0x3c

00011f80 <strpbrk@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #118784	; 0x1d000
   11f88:	ldr	pc, [ip, #52]!	; 0x34

00011f8c <socket@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #118784	; 0x1d000
   11f94:	ldr	pc, [ip, #44]!	; 0x2c

00011f98 <gpgrt_fprintf@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #118784	; 0x1d000
   11fa0:	ldr	pc, [ip, #36]!	; 0x24

00011fa4 <chmod@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #118784	; 0x1d000
   11fac:	ldr	pc, [ip, #28]!

00011fb0 <__xstat64@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #118784	; 0x1d000
   11fb8:	ldr	pc, [ip, #20]!

00011fbc <isatty@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #118784	; 0x1d000
   11fc4:	ldr	pc, [ip, #12]!

00011fc8 <unsetenv@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #118784	; 0x1d000
   11fd0:	ldr	pc, [ip, #4]!

00011fd4 <fputs@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #28, 20	; 0x1c000
   11fdc:	ldr	pc, [ip, #4092]!	; 0xffc

00011fe0 <strncmp@plt>:
   11fe0:	add	ip, pc, #0, 12
   11fe4:	add	ip, ip, #28, 20	; 0x1c000
   11fe8:	ldr	pc, [ip, #4084]!	; 0xff4

00011fec <abort@plt>:
   11fec:	add	ip, pc, #0, 12
   11ff0:	add	ip, ip, #28, 20	; 0x1c000
   11ff4:	ldr	pc, [ip, #4076]!	; 0xfec

00011ff8 <getc@plt>:
   11ff8:	add	ip, pc, #0, 12
   11ffc:	add	ip, ip, #28, 20	; 0x1c000
   12000:	ldr	pc, [ip, #4068]!	; 0xfe4

00012004 <gpgrt_fileno@plt>:
   12004:	add	ip, pc, #0, 12
   12008:	add	ip, ip, #28, 20	; 0x1c000
   1200c:	ldr	pc, [ip, #4060]!	; 0xfdc

00012010 <close@plt>:
   12010:	add	ip, pc, #0, 12
   12014:	add	ip, ip, #28, 20	; 0x1c000
   12018:	ldr	pc, [ip, #4052]!	; 0xfd4

0001201c <gcry_strdup@plt>:
   1201c:	add	ip, pc, #0, 12
   12020:	add	ip, ip, #28, 20	; 0x1c000
   12024:	ldr	pc, [ip, #4044]!	; 0xfcc

00012028 <connect@plt>:
   12028:	add	ip, pc, #0, 12
   1202c:	add	ip, ip, #28, 20	; 0x1c000
   12030:	ldr	pc, [ip, #4036]!	; 0xfc4

00012034 <__assert_fail@plt>:
   12034:	add	ip, pc, #0, 12
   12038:	add	ip, ip, #28, 20	; 0x1c000
   1203c:	ldr	pc, [ip, #4028]!	; 0xfbc

Disassembly of section .text:

00012040 <.text>:
   12040:	ldr	r3, [pc, #328]	; 12190 <__assert_fail@plt+0x15c>
   12044:	push	{r7, lr}
   12048:	sub	sp, sp, #80	; 0x50
   1204c:	ldr	r3, [r3]
   12050:	str	r0, [sp, #12]
   12054:	str	r1, [sp, #8]
   12058:	ldr	r0, [pc, #308]	; 12194 <__assert_fail@plt+0x160>
   1205c:	mov	r1, #1
   12060:	ldr	r8, [pc, #304]	; 12198 <__assert_fail@plt+0x164>
   12064:	str	r3, [sp, #76]	; 0x4c
   12068:	ldr	r7, [pc, #300]	; 1219c <__assert_fail@plt+0x168>
   1206c:	bl	16904 <__assert_fail@plt+0x48d0>
   12070:	ldr	r6, [pc, #296]	; 121a0 <__assert_fail@plt+0x16c>
   12074:	ldr	r0, [pc, #296]	; 121a4 <__assert_fail@plt+0x170>
   12078:	ldr	r5, [pc, #296]	; 121a8 <__assert_fail@plt+0x174>
   1207c:	bl	158c0 <__assert_fail@plt+0x388c>
   12080:	add	r4, r8, #4
   12084:	add	r2, sp, #8
   12088:	mov	r3, #1
   1208c:	add	r1, sp, #12
   12090:	str	r1, [sp, #20]
   12094:	strd	r2, [sp, #24]
   12098:	mov	r2, #0
   1209c:	str	r4, [sp]
   120a0:	mov	r1, r2
   120a4:	mov	r0, r2
   120a8:	add	r3, sp, #20
   120ac:	bl	14d64 <__assert_fail@plt+0x2d30>
   120b0:	cmp	r0, #0
   120b4:	beq	12128 <__assert_fail@plt+0xf4>
   120b8:	ldr	r3, [sp, #36]	; 0x24
   120bc:	cmp	r3, #500	; 0x1f4
   120c0:	beq	1211c <__assert_fail@plt+0xe8>
   120c4:	bgt	120ec <__assert_fail@plt+0xb8>
   120c8:	cmp	r3, #112	; 0x70
   120cc:	beq	12110 <__assert_fail@plt+0xdc>
   120d0:	cmp	r3, #118	; 0x76
   120d4:	moveq	r3, #1
   120d8:	streq	r3, [r7, #16]
   120dc:	beq	12098 <__assert_fail@plt+0x64>
   120e0:	mov	r3, #2
   120e4:	str	r3, [sp, #32]
   120e8:	b	12098 <__assert_fail@plt+0x64>
   120ec:	cmp	r3, r6
   120f0:	moveq	r3, #1
   120f4:	streq	r3, [r7, #20]
   120f8:	beq	12098 <__assert_fail@plt+0x64>
   120fc:	cmp	r3, r5
   12100:	moveq	r3, #1
   12104:	streq	r3, [r7, #12]
   12108:	beq	12098 <__assert_fail@plt+0x64>
   1210c:	b	120e0 <__assert_fail@plt+0xac>
   12110:	ldr	r3, [sp, #44]	; 0x2c
   12114:	str	r3, [r8]
   12118:	b	12098 <__assert_fail@plt+0x64>
   1211c:	mov	r3, #1
   12120:	str	r3, [r7, #8]
   12124:	b	12098 <__assert_fail@plt+0x64>
   12128:	bl	16898 <__assert_fail@plt+0x4864>
   1212c:	cmp	r0, #0
   12130:	bne	12188 <__assert_fail@plt+0x154>
   12134:	ldr	r3, [sp, #12]
   12138:	cmp	r3, #0
   1213c:	ldrne	r3, [sp, #8]
   12140:	beq	12180 <__assert_fail@plt+0x14c>
   12144:	ldr	r0, [r3]
   12148:	bl	1238c <__assert_fail@plt+0x358>
   1214c:	ldr	r2, [sp, #12]
   12150:	ldr	r3, [sp, #8]
   12154:	sub	r2, r2, #1
   12158:	add	r3, r3, #4
   1215c:	cmp	r2, #0
   12160:	str	r2, [sp, #12]
   12164:	str	r3, [sp, #8]
   12168:	bne	12144 <__assert_fail@plt+0x110>
   1216c:	mov	r0, #0
   12170:	bl	16898 <__assert_fail@plt+0x4864>
   12174:	cmp	r0, #0
   12178:	movne	r0, #2
   1217c:	bl	11d4c <exit@plt>
   12180:	bl	1238c <__assert_fail@plt+0x358>
   12184:	b	1216c <__assert_fail@plt+0x138>
   12188:	mov	r0, #2
   1218c:	bl	11d4c <exit@plt>
   12190:	ldrdeq	lr, [r2], -r0
   12194:	andeq	ip, r1, r8, lsr #18
   12198:	andeq	pc, r2, r8
   1219c:	ldrdeq	pc, [r2], -ip
   121a0:	strdeq	r0, [r0], -r5
   121a4:	muleq	r1, ip, r2
   121a8:	strdeq	r0, [r0], -r6
   121ac:	mov	fp, #0
   121b0:	mov	lr, #0
   121b4:	pop	{r1}		; (ldr r1, [sp], #4)
   121b8:	mov	r2, sp
   121bc:	push	{r2}		; (str r2, [sp, #-4]!)
   121c0:	push	{r0}		; (str r0, [sp, #-4]!)
   121c4:	ldr	ip, [pc, #16]	; 121dc <__assert_fail@plt+0x1a8>
   121c8:	push	{ip}		; (str ip, [sp, #-4]!)
   121cc:	ldr	r0, [pc, #12]	; 121e0 <__assert_fail@plt+0x1ac>
   121d0:	ldr	r3, [pc, #12]	; 121e4 <__assert_fail@plt+0x1b0>
   121d4:	bl	11cc8 <__libc_start_main@plt>
   121d8:	bl	11fec <abort@plt>
   121dc:	andeq	ip, r1, r4, lsr r5
   121e0:	andeq	r2, r1, r0, asr #32
   121e4:	ldrdeq	ip, [r1], -r4
   121e8:	ldr	r3, [pc, #20]	; 12204 <__assert_fail@plt+0x1d0>
   121ec:	ldr	r2, [pc, #20]	; 12208 <__assert_fail@plt+0x1d4>
   121f0:	add	r3, pc, r3
   121f4:	ldr	r2, [r3, r2]
   121f8:	cmp	r2, #0
   121fc:	bxeq	lr
   12200:	b	11d04 <__gmon_start__@plt>
   12204:	andeq	ip, r1, r0, lsl #24
   12208:	andeq	r0, r0, r4, lsl #4
   1220c:	ldr	r0, [pc, #24]	; 1222c <__assert_fail@plt+0x1f8>
   12210:	ldr	r3, [pc, #24]	; 12230 <__assert_fail@plt+0x1fc>
   12214:	cmp	r3, r0
   12218:	bxeq	lr
   1221c:	ldr	r3, [pc, #16]	; 12234 <__assert_fail@plt+0x200>
   12220:	cmp	r3, #0
   12224:	bxeq	lr
   12228:	bx	r3
   1222c:	andeq	pc, r2, r4, asr #1
   12230:	andeq	pc, r2, r4, asr #1
   12234:	andeq	r0, r0, r0
   12238:	ldr	r0, [pc, #36]	; 12264 <__assert_fail@plt+0x230>
   1223c:	ldr	r1, [pc, #36]	; 12268 <__assert_fail@plt+0x234>
   12240:	sub	r1, r1, r0
   12244:	asr	r1, r1, #2
   12248:	add	r1, r1, r1, lsr #31
   1224c:	asrs	r1, r1, #1
   12250:	bxeq	lr
   12254:	ldr	r3, [pc, #16]	; 1226c <__assert_fail@plt+0x238>
   12258:	cmp	r3, #0
   1225c:	bxeq	lr
   12260:	bx	r3
   12264:	andeq	pc, r2, r4, asr #1
   12268:	andeq	pc, r2, r4, asr #1
   1226c:	andeq	r0, r0, r0
   12270:	push	{r4, lr}
   12274:	ldr	r4, [pc, #24]	; 12294 <__assert_fail@plt+0x260>
   12278:	ldrb	r3, [r4]
   1227c:	cmp	r3, #0
   12280:	popne	{r4, pc}
   12284:	bl	1220c <__assert_fail@plt+0x1d8>
   12288:	mov	r3, #1
   1228c:	strb	r3, [r4]
   12290:	pop	{r4, pc}
   12294:	ldrdeq	pc, [r2], -r8
   12298:	b	12238 <__assert_fail@plt+0x204>
   1229c:	sub	r0, r0, #1
   122a0:	cmp	r0, #40	; 0x28
   122a4:	ldrls	r3, [pc, #8]	; 122b4 <__assert_fail@plt+0x280>
   122a8:	ldrls	r0, [r3, r0, lsl #2]
   122ac:	movhi	r0, #0
   122b0:	bx	lr
   122b4:	andeq	ip, r1, ip, asr r5
   122b8:	push	{r4, r5, r6, lr}
   122bc:	mov	r4, r1
   122c0:	mov	r5, r0
   122c4:	bl	11ff8 <getc@plt>
   122c8:	cmn	r0, #1
   122cc:	beq	12300 <__assert_fail@plt+0x2cc>
   122d0:	lsl	r0, r0, #8
   122d4:	str	r0, [r4]
   122d8:	mov	r0, r5
   122dc:	bl	11ff8 <getc@plt>
   122e0:	cmn	r0, #1
   122e4:	beq	12300 <__assert_fail@plt+0x2cc>
   122e8:	ldr	r3, [r4]
   122ec:	mov	r2, #0
   122f0:	orr	r3, r3, r0
   122f4:	str	r3, [r4]
   122f8:	mov	r0, r2
   122fc:	pop	{r4, r5, r6, pc}
   12300:	mvn	r2, #0
   12304:	b	122f8 <__assert_fail@plt+0x2c4>
   12308:	push	{r4, r5, r6, lr}
   1230c:	sub	sp, sp, #8
   12310:	ldr	r5, [pc, #112]	; 12388 <__assert_fail@plt+0x354>
   12314:	mov	r4, r1
   12318:	mov	r1, sp
   1231c:	ldr	r3, [r5]
   12320:	mov	r6, r0
   12324:	str	r3, [sp, #4]
   12328:	bl	122b8 <__assert_fail@plt+0x284>
   1232c:	cmp	r0, #0
   12330:	bne	1237c <__assert_fail@plt+0x348>
   12334:	ldr	r3, [sp]
   12338:	mov	r1, sp
   1233c:	mov	r0, r6
   12340:	lsl	r3, r3, #16
   12344:	str	r3, [r4]
   12348:	bl	122b8 <__assert_fail@plt+0x284>
   1234c:	cmp	r0, #0
   12350:	bne	1237c <__assert_fail@plt+0x348>
   12354:	ldr	r3, [r4]
   12358:	ldr	r2, [sp]
   1235c:	orr	r3, r3, r2
   12360:	str	r3, [r4]
   12364:	ldr	r2, [sp, #4]
   12368:	ldr	r3, [r5]
   1236c:	cmp	r2, r3
   12370:	bne	12384 <__assert_fail@plt+0x350>
   12374:	add	sp, sp, #8
   12378:	pop	{r4, r5, r6, pc}
   1237c:	mvn	r0, #0
   12380:	b	12364 <__assert_fail@plt+0x330>
   12384:	bl	11bc0 <__stack_chk_fail@plt>
   12388:	ldrdeq	lr, [r2], -r0
   1238c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12390:	sub	sp, sp, #132	; 0x84
   12394:	subs	r3, r0, #0
   12398:	str	r3, [sp, #36]	; 0x24
   1239c:	ldr	r3, [pc, #4044]	; 13370 <__assert_fail@plt+0x133c>
   123a0:	ldr	r3, [r3]
   123a4:	str	r3, [sp, #124]	; 0x7c
   123a8:	beq	123bc <__assert_fail@plt+0x388>
   123ac:	ldr	r1, [pc, #4032]	; 13374 <__assert_fail@plt+0x1340>
   123b0:	bl	11aac <strcmp@plt>
   123b4:	cmp	r0, #0
   123b8:	bne	12660 <__assert_fail@plt+0x62c>
   123bc:	ldr	r3, [pc, #4020]	; 13378 <__assert_fail@plt+0x1344>
   123c0:	ldr	r2, [pc, #4012]	; 13374 <__assert_fail@plt+0x1340>
   123c4:	ldr	r4, [r3]
   123c8:	str	r2, [sp, #36]	; 0x24
   123cc:	ldr	r5, [pc, #4008]	; 1337c <__assert_fail@plt+0x1348>
   123d0:	mov	r6, #0
   123d4:	mov	r0, r4
   123d8:	str	r6, [sp, #40]	; 0x28
   123dc:	bl	11ff8 <getc@plt>
   123e0:	cmn	r0, #1
   123e4:	mov	r1, r0
   123e8:	beq	125cc <__assert_fail@plt+0x598>
   123ec:	tst	r0, #128	; 0x80
   123f0:	strb	r0, [sp, #104]	; 0x68
   123f4:	beq	125c4 <__assert_fail@plt+0x590>
   123f8:	ands	r7, r0, #64	; 0x40
   123fc:	bne	12590 <__assert_fail@plt+0x55c>
   12400:	and	r3, r0, #3
   12404:	asr	r1, r0, #2
   12408:	cmp	r3, #3
   1240c:	and	r8, r1, #15
   12410:	beq	12600 <__assert_fail@plt+0x5cc>
   12414:	mov	r6, #1
   12418:	mov	sl, r6
   1241c:	lsl	r6, r6, r3
   12420:	ldr	r3, [sp, #40]	; 0x28
   12424:	add	r6, r6, sl
   12428:	add	r9, sp, #105	; 0x69
   1242c:	lsl	r3, r3, #8
   12430:	mov	r0, r4
   12434:	str	r3, [sp, #40]	; 0x28
   12438:	bl	11ff8 <getc@plt>
   1243c:	cmn	r0, #1
   12440:	beq	12960 <__assert_fail@plt+0x92c>
   12444:	ldr	r3, [sp, #40]	; 0x28
   12448:	add	sl, sl, #1
   1244c:	orr	r3, r0, r3
   12450:	cmp	sl, r6
   12454:	strb	r0, [r9], #1
   12458:	str	r3, [sp, #40]	; 0x28
   1245c:	bne	1242c <__assert_fail@plt+0x3f8>
   12460:	ldr	r0, [r5]
   12464:	str	r3, [sp, #44]	; 0x2c
   12468:	ldr	r3, [pc, #3856]	; 13380 <__assert_fail@plt+0x134c>
   1246c:	cmp	r0, #0
   12470:	ldr	r1, [r3]
   12474:	beq	12640 <__assert_fail@plt+0x60c>
   12478:	ldr	r2, [r5, #4]
   1247c:	sub	r3, r8, #1
   12480:	add	r2, r2, #1
   12484:	str	r2, [r5, #4]
   12488:	cmp	r3, #62	; 0x3e
   1248c:	ldrls	pc, [pc, r3, lsl #2]
   12490:	b	12a38 <__assert_fail@plt+0xa04>
   12494:	muleq	r1, r4, r6
   12498:	muleq	r1, r0, r9
   1249c:			; <UNDEFINED> instruction: 0x000129b0
   124a0:	andeq	r2, r1, r8, lsr #19
   124a4:	andeq	r2, r1, r0, lsr #19
   124a8:	muleq	r1, r8, r9
   124ac:	andeq	r2, r1, r0, lsr sl
   124b0:	andeq	r2, r1, r8, lsl sl
   124b4:	andeq	r2, r1, r0, lsl sl
   124b8:	andeq	r2, r1, r8, lsl #20
   124bc:	andeq	r2, r1, r0, lsl #20
   124c0:	strdeq	r2, [r1], -r8
   124c4:	strdeq	r2, [r1], -r0
   124c8:	andeq	r2, r1, r8, ror #19
   124cc:	andeq	r2, r1, r8, lsr sl
   124d0:	andeq	r2, r1, r0, ror #19
   124d4:	ldrdeq	r2, [r1], -r8
   124d8:	ldrdeq	r2, [r1], -r0
   124dc:	andeq	r2, r1, r8, asr #19
   124e0:	andeq	r2, r1, r8, lsr sl
   124e4:	andeq	r2, r1, r8, lsr sl
   124e8:	andeq	r2, r1, r8, lsr sl
   124ec:	andeq	r2, r1, r8, lsr sl
   124f0:	andeq	r2, r1, r8, lsr sl
   124f4:	andeq	r2, r1, r8, lsr sl
   124f8:	andeq	r2, r1, r8, lsr sl
   124fc:	andeq	r2, r1, r8, lsr sl
   12500:	andeq	r2, r1, r8, lsr sl
   12504:	andeq	r2, r1, r8, lsr sl
   12508:	andeq	r2, r1, r8, lsr sl
   1250c:	andeq	r2, r1, r8, lsr sl
   12510:	andeq	r2, r1, r8, lsr sl
   12514:	andeq	r2, r1, r8, lsr sl
   12518:	andeq	r2, r1, r8, lsr sl
   1251c:	andeq	r2, r1, r8, lsr sl
   12520:	andeq	r2, r1, r8, lsr sl
   12524:	andeq	r2, r1, r8, lsr sl
   12528:	andeq	r2, r1, r8, lsr sl
   1252c:	andeq	r2, r1, r8, lsr sl
   12530:	andeq	r2, r1, r8, lsr sl
   12534:	andeq	r2, r1, r8, lsr sl
   12538:	andeq	r2, r1, r8, lsr sl
   1253c:	andeq	r2, r1, r8, lsr sl
   12540:	andeq	r2, r1, r8, lsr sl
   12544:	andeq	r2, r1, r8, lsr sl
   12548:	andeq	r2, r1, r8, lsr sl
   1254c:	andeq	r2, r1, r8, lsr sl
   12550:	andeq	r2, r1, r8, lsr sl
   12554:	andeq	r2, r1, r8, lsr sl
   12558:	andeq	r2, r1, r8, lsr sl
   1255c:	andeq	r2, r1, r8, lsr sl
   12560:	andeq	r2, r1, r8, lsr sl
   12564:	andeq	r2, r1, r8, lsr sl
   12568:	andeq	r2, r1, r8, lsr sl
   1256c:	andeq	r2, r1, r8, lsr sl
   12570:	andeq	r2, r1, r8, lsr sl
   12574:	andeq	r2, r1, r8, lsr sl
   12578:	andeq	r2, r1, r8, lsr sl
   1257c:	andeq	r2, r1, r8, lsr sl
   12580:	andeq	r2, r1, r8, lsr sl
   12584:	andeq	r2, r1, r0, asr #19
   12588:	andeq	r2, r1, r8, lsr sl
   1258c:			; <UNDEFINED> instruction: 0x000129b8
   12590:	mov	r0, r4
   12594:	and	r8, r1, #63	; 0x3f
   12598:	bl	11ff8 <getc@plt>
   1259c:	cmn	r0, #1
   125a0:	beq	12960 <__assert_fail@plt+0x92c>
   125a4:	cmp	r0, #191	; 0xbf
   125a8:	strb	r0, [sp, #105]	; 0x69
   125ac:	bgt	1261c <__assert_fail@plt+0x5e8>
   125b0:	mov	r7, r6
   125b4:	mov	r3, r0
   125b8:	str	r0, [sp, #40]	; 0x28
   125bc:	mov	r6, #2
   125c0:	b	12460 <__assert_fail@plt+0x42c>
   125c4:	ldr	r0, [pc, #3512]	; 13384 <__assert_fail@plt+0x1350>
   125c8:	bl	16bac <__assert_fail@plt+0x4b78>
   125cc:	ldr	r3, [pc, #3492]	; 13378 <__assert_fail@plt+0x1344>
   125d0:	ldr	r3, [r3]
   125d4:	cmp	r3, r4
   125d8:	beq	125e4 <__assert_fail@plt+0x5b0>
   125dc:	mov	r0, r4
   125e0:	bl	11e90 <fclose@plt>
   125e4:	ldr	r3, [pc, #3460]	; 13370 <__assert_fail@plt+0x133c>
   125e8:	ldr	r2, [sp, #124]	; 0x7c
   125ec:	ldr	r3, [r3]
   125f0:	cmp	r2, r3
   125f4:	bne	13544 <__assert_fail@plt+0x1510>
   125f8:	add	sp, sp, #132	; 0x84
   125fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12600:	cmp	r8, #8
   12604:	str	r7, [sp, #40]	; 0x28
   12608:	mov	r3, r7
   1260c:	mov	r6, #1
   12610:	moveq	r7, #3
   12614:	movne	r7, #2
   12618:	b	12460 <__assert_fail@plt+0x42c>
   1261c:	cmp	r0, #223	; 0xdf
   12620:	ble	130f4 <__assert_fail@plt+0x10c0>
   12624:	cmp	r0, #255	; 0xff
   12628:	beq	131cc <__assert_fail@plt+0x1198>
   1262c:	mov	r3, r0
   12630:	str	r0, [sp, #40]	; 0x28
   12634:	mov	r6, #2
   12638:	mov	r7, #1
   1263c:	b	12460 <__assert_fail@plt+0x42c>
   12640:	mov	r0, r1
   12644:	bl	11d88 <strlen@plt>
   12648:	add	r0, r0, #100	; 0x64
   1264c:	bl	11a58 <gcry_xmalloc@plt>
   12650:	ldr	r3, [pc, #3368]	; 13380 <__assert_fail@plt+0x134c>
   12654:	ldr	r1, [r3]
   12658:	str	r0, [r5]
   1265c:	b	12478 <__assert_fail@plt+0x444>
   12660:	ldr	r1, [pc, #3360]	; 13388 <__assert_fail@plt+0x1354>
   12664:	ldr	r0, [sp, #36]	; 0x24
   12668:	bl	11f68 <fopen64@plt>
   1266c:	subs	r4, r0, #0
   12670:	bne	123cc <__assert_fail@plt+0x398>
   12674:	bl	11ddc <__errno_location@plt>
   12678:	ldr	r0, [r0]
   1267c:	bl	11cd4 <strerror@plt>
   12680:	ldr	r1, [sp, #36]	; 0x24
   12684:	mov	r2, r0
   12688:	ldr	r0, [pc, #3324]	; 1338c <__assert_fail@plt+0x1358>
   1268c:	bl	16bac <__assert_fail@plt+0x4b78>
   12690:	b	125e4 <__assert_fail@plt+0x5b0>
   12694:	ldr	r3, [pc, #3316]	; 13390 <__assert_fail@plt+0x135c>
   12698:	stm	sp, {r1, r2, r8}
   1269c:	mvn	r2, #0
   126a0:	str	r3, [sp, #12]
   126a4:	mov	r1, #1
   126a8:	ldr	r3, [pc, #3300]	; 13394 <__assert_fail@plt+0x1360>
   126ac:	bl	11df4 <__sprintf_chk@plt>
   126b0:	ldr	r3, [r5, #12]
   126b4:	ldr	r2, [r5]
   126b8:	cmp	r3, #0
   126bc:	str	r2, [sp, #16]
   126c0:	beq	12a98 <__assert_fail@plt+0xa64>
   126c4:	ldr	r3, [pc, #3276]	; 13398 <__assert_fail@plt+0x1364>
   126c8:	ldr	fp, [r3]
   126cc:	ldr	r3, [r5, #20]
   126d0:	cmp	r3, #0
   126d4:	beq	126e4 <__assert_fail@plt+0x6b0>
   126d8:	bic	r3, r8, #2
   126dc:	cmp	r3, #5
   126e0:	beq	12ca4 <__assert_fail@plt+0xc70>
   126e4:	ldr	r3, [r5, #8]
   126e8:	cmp	r3, #0
   126ec:	bne	12b08 <__assert_fail@plt+0xad4>
   126f0:	add	r8, sp, #103	; 0x67
   126f4:	mov	r1, fp
   126f8:	ldrb	r0, [r8, #1]!
   126fc:	bl	11f38 <putc@plt>
   12700:	cmn	r0, #1
   12704:	beq	128ac <__assert_fail@plt+0x878>
   12708:	subs	r6, r6, #1
   1270c:	bne	126f4 <__assert_fail@plt+0x6c0>
   12710:	cmp	r7, #0
   12714:	beq	12910 <__assert_fail@plt+0x8dc>
   12718:	mov	r8, #1
   1271c:	mov	r9, r8
   12720:	cmp	r7, #1
   12724:	beq	12a40 <__assert_fail@plt+0xa0c>
   12728:	cmp	r7, #2
   1272c:	beq	12bac <__assert_fail@plt+0xb78>
   12730:	ldr	r3, [r5, #8]
   12734:	mov	r9, #0
   12738:	cmp	r3, r9
   1273c:	str	r9, [sp, #44]	; 0x2c
   12740:	beq	128f0 <__assert_fail@plt+0x8bc>
   12744:	mov	r0, r4
   12748:	bl	11ff8 <getc@plt>
   1274c:	cmn	r0, #1
   12750:	str	r0, [sp, #20]
   12754:	beq	12954 <__assert_fail@plt+0x920>
   12758:	sub	r3, r0, #1
   1275c:	cmp	r3, #1
   12760:	bls	12d04 <__assert_fail@plt+0xcd0>
   12764:	ldr	r3, [sp, #20]
   12768:	cmp	r3, #3
   1276c:	bne	134b8 <__assert_fail@plt+0x1484>
   12770:	add	r7, sp, #48	; 0x30
   12774:	mov	r2, #48	; 0x30
   12778:	mov	r1, r9
   1277c:	mov	r0, r7
   12780:	bl	11e18 <memset@plt>
   12784:	mov	r0, #2048	; 0x800
   12788:	bl	11a58 <gcry_xmalloc@plt>
   1278c:	str	r9, [sp, #24]
   12790:	str	r0, [sp, #28]
   12794:	mov	r0, #8192	; 0x2000
   12798:	bl	11a58 <gcry_xmalloc@plt>
   1279c:	str	r9, [sp, #52]	; 0x34
   127a0:	str	r7, [sp, #20]
   127a4:	mov	r6, r0
   127a8:	cmp	r9, #0
   127ac:	sub	r1, r9, #1
   127b0:	ldreq	r3, [sp, #28]
   127b4:	rsb	r8, r9, #2048	; 0x800
   127b8:	streq	r3, [sp, #48]	; 0x30
   127bc:	ldr	r3, [sp, #28]
   127c0:	mov	sl, #0
   127c4:	add	r7, r3, r1
   127c8:	mov	r0, r4
   127cc:	bl	11ff8 <getc@plt>
   127d0:	add	ip, sl, r9
   127d4:	cmn	r0, #1
   127d8:	beq	127f0 <__assert_fail@plt+0x7bc>
   127dc:	add	sl, sl, #1
   127e0:	cmp	r8, sl
   127e4:	strb	r0, [r7, #1]!
   127e8:	bgt	127c8 <__assert_fail@plt+0x794>
   127ec:	add	ip, sl, r9
   127f0:	ldr	r2, [sp, #24]
   127f4:	mov	r3, #8192	; 0x2000
   127f8:	cmp	r2, #0
   127fc:	str	ip, [sp, #52]	; 0x34
   12800:	str	r6, [sp, #64]	; 0x40
   12804:	str	r3, [sp, #68]	; 0x44
   12808:	bne	1283c <__assert_fail@plt+0x808>
   1280c:	mov	r1, r2
   12810:	ldr	r0, [sp, #20]
   12814:	bl	11bfc <BZ2_bzDecompressInit@plt>
   12818:	cmp	r0, #0
   1281c:	bne	134e8 <__assert_fail@plt+0x14b4>
   12820:	ldr	r9, [sp, #52]	; 0x34
   12824:	ldr	r3, [pc, #2928]	; 1339c <__assert_fail@plt+0x1368>
   12828:	cmp	r9, r3
   1282c:	bls	12b18 <__assert_fail@plt+0xae4>
   12830:	mov	r3, #8192	; 0x2000
   12834:	str	r6, [sp, #64]	; 0x40
   12838:	str	r3, [sp, #68]	; 0x44
   1283c:	ldr	r9, [sp, #20]
   12840:	sub	sl, r6, #1
   12844:	mov	r0, r9
   12848:	bl	11e54 <BZ2_bzDecompress@plt>
   1284c:	cmp	r0, #4
   12850:	mov	r8, r0
   12854:	beq	12b68 <__assert_fail@plt+0xb34>
   12858:	add	r3, r0, #2
   1285c:	bics	r3, r3, #2
   12860:	bne	1351c <__assert_fail@plt+0x14e8>
   12864:	ldr	r3, [sp, #68]	; 0x44
   12868:	cmp	r3, #8192	; 0x2000
   1286c:	beq	12adc <__assert_fail@plt+0xaa8>
   12870:	mov	r7, sl
   12874:	b	12894 <__assert_fail@plt+0x860>
   12878:	ldr	r3, [sp, #68]	; 0x44
   1287c:	add	r7, r7, #2
   12880:	sub	r7, r7, r6
   12884:	rsb	r3, r3, #8192	; 0x2000
   12888:	cmp	r3, r7
   1288c:	mov	r7, r2
   12890:	bls	12adc <__assert_fail@plt+0xaa8>
   12894:	mov	r1, fp
   12898:	ldrb	r0, [r7, #1]
   1289c:	bl	11f38 <putc@plt>
   128a0:	add	r2, r7, #1
   128a4:	cmn	r0, #1
   128a8:	bne	12878 <__assert_fail@plt+0x844>
   128ac:	bl	11ddc <__errno_location@plt>
   128b0:	ldr	r0, [r0]
   128b4:	bl	11cd4 <strerror@plt>
   128b8:	ldr	r1, [sp, #16]
   128bc:	mov	r2, r0
   128c0:	ldr	r0, [pc, #2776]	; 133a0 <__assert_fail@plt+0x136c>
   128c4:	bl	16bac <__assert_fail@plt+0x4b78>
   128c8:	ldr	r3, [r5, #12]
   128cc:	cmp	r3, #0
   128d0:	bne	125cc <__assert_fail@plt+0x598>
   128d4:	mov	r0, fp
   128d8:	bl	11e90 <fclose@plt>
   128dc:	b	125cc <__assert_fail@plt+0x598>
   128e0:	mov	r1, fp
   128e4:	bl	11f38 <putc@plt>
   128e8:	cmn	r0, #1
   128ec:	beq	128ac <__assert_fail@plt+0x878>
   128f0:	mov	r0, r4
   128f4:	bl	11ff8 <getc@plt>
   128f8:	cmn	r0, #1
   128fc:	bne	128e0 <__assert_fail@plt+0x8ac>
   12900:	mov	r0, r4
   12904:	bl	11d58 <feof@plt>
   12908:	cmp	r0, #0
   1290c:	beq	12954 <__assert_fail@plt+0x920>
   12910:	ldr	r3, [sp, #44]	; 0x2c
   12914:	cmp	r3, #0
   12918:	bne	12944 <__assert_fail@plt+0x910>
   1291c:	b	13188 <__assert_fail@plt+0x1154>
   12920:	mov	r1, fp
   12924:	bl	11f38 <putc@plt>
   12928:	cmn	r0, #1
   1292c:	beq	128ac <__assert_fail@plt+0x878>
   12930:	ldr	r3, [sp, #44]	; 0x2c
   12934:	sub	r3, r3, #1
   12938:	cmp	r3, #0
   1293c:	str	r3, [sp, #44]	; 0x2c
   12940:	beq	13188 <__assert_fail@plt+0x1154>
   12944:	mov	r0, r4
   12948:	bl	11ff8 <getc@plt>
   1294c:	cmn	r0, #1
   12950:	bne	12920 <__assert_fail@plt+0x8ec>
   12954:	ldr	r3, [r5, #12]
   12958:	cmp	r3, #0
   1295c:	beq	12c5c <__assert_fail@plt+0xc28>
   12960:	mov	r0, r4
   12964:	bl	11b54 <ferror@plt>
   12968:	cmp	r0, #0
   1296c:	beq	12c84 <__assert_fail@plt+0xc50>
   12970:	bl	11ddc <__errno_location@plt>
   12974:	ldr	r0, [r0]
   12978:	bl	11cd4 <strerror@plt>
   1297c:	ldr	r1, [sp, #36]	; 0x24
   12980:	mov	r2, r0
   12984:	ldr	r0, [pc, #2584]	; 133a4 <__assert_fail@plt+0x1370>
   12988:	bl	16bac <__assert_fail@plt+0x4b78>
   1298c:	b	125cc <__assert_fail@plt+0x598>
   12990:	ldr	r3, [pc, #2576]	; 133a8 <__assert_fail@plt+0x1374>
   12994:	b	12698 <__assert_fail@plt+0x664>
   12998:	ldr	r3, [pc, #2572]	; 133ac <__assert_fail@plt+0x1378>
   1299c:	b	12698 <__assert_fail@plt+0x664>
   129a0:	ldr	r3, [pc, #2568]	; 133b0 <__assert_fail@plt+0x137c>
   129a4:	b	12698 <__assert_fail@plt+0x664>
   129a8:	ldr	r3, [pc, #2564]	; 133b4 <__assert_fail@plt+0x1380>
   129ac:	b	12698 <__assert_fail@plt+0x664>
   129b0:	ldr	r3, [pc, #2560]	; 133b8 <__assert_fail@plt+0x1384>
   129b4:	b	12698 <__assert_fail@plt+0x664>
   129b8:	ldr	r3, [pc, #2556]	; 133bc <__assert_fail@plt+0x1388>
   129bc:	b	12698 <__assert_fail@plt+0x664>
   129c0:	ldr	r3, [pc, #2552]	; 133c0 <__assert_fail@plt+0x138c>
   129c4:	b	12698 <__assert_fail@plt+0x664>
   129c8:	ldr	r3, [pc, #2548]	; 133c4 <__assert_fail@plt+0x1390>
   129cc:	b	12698 <__assert_fail@plt+0x664>
   129d0:	ldr	r3, [pc, #2544]	; 133c8 <__assert_fail@plt+0x1394>
   129d4:	b	12698 <__assert_fail@plt+0x664>
   129d8:	ldr	r3, [pc, #2540]	; 133cc <__assert_fail@plt+0x1398>
   129dc:	b	12698 <__assert_fail@plt+0x664>
   129e0:	ldr	r3, [pc, #2536]	; 133d0 <__assert_fail@plt+0x139c>
   129e4:	b	12698 <__assert_fail@plt+0x664>
   129e8:	ldr	r3, [pc, #2532]	; 133d4 <__assert_fail@plt+0x13a0>
   129ec:	b	12698 <__assert_fail@plt+0x664>
   129f0:	ldr	r3, [pc, #2528]	; 133d8 <__assert_fail@plt+0x13a4>
   129f4:	b	12698 <__assert_fail@plt+0x664>
   129f8:	ldr	r3, [pc, #2524]	; 133dc <__assert_fail@plt+0x13a8>
   129fc:	b	12698 <__assert_fail@plt+0x664>
   12a00:	ldr	r3, [pc, #2520]	; 133e0 <__assert_fail@plt+0x13ac>
   12a04:	b	12698 <__assert_fail@plt+0x664>
   12a08:	ldr	r3, [pc, #2516]	; 133e4 <__assert_fail@plt+0x13b0>
   12a0c:	b	12698 <__assert_fail@plt+0x664>
   12a10:	ldr	r3, [pc, #2512]	; 133e8 <__assert_fail@plt+0x13b4>
   12a14:	b	12698 <__assert_fail@plt+0x664>
   12a18:	ldr	lr, [r5, #8]
   12a1c:	ldr	ip, [pc, #2504]	; 133ec <__assert_fail@plt+0x13b8>
   12a20:	cmp	lr, #0
   12a24:	ldr	r3, [pc, #2500]	; 133f0 <__assert_fail@plt+0x13bc>
   12a28:	moveq	r3, ip
   12a2c:	b	12698 <__assert_fail@plt+0x664>
   12a30:	ldr	r3, [pc, #2492]	; 133f4 <__assert_fail@plt+0x13c0>
   12a34:	b	12698 <__assert_fail@plt+0x664>
   12a38:	ldr	r3, [pc, #2488]	; 133f8 <__assert_fail@plt+0x13c4>
   12a3c:	b	12698 <__assert_fail@plt+0x664>
   12a40:	cmp	r8, #0
   12a44:	beq	12b84 <__assert_fail@plt+0xb50>
   12a48:	ldr	sl, [sp, #44]	; 0x2c
   12a4c:	sub	r3, sl, #224	; 0xe0
   12a50:	cmp	r3, #30
   12a54:	bhi	13508 <__assert_fail@plt+0x14d4>
   12a58:	cmp	sl, #191	; 0xbf
   12a5c:	bgt	12b24 <__assert_fail@plt+0xaf0>
   12a60:	cmp	r6, #0
   12a64:	str	sl, [sp, #44]	; 0x2c
   12a68:	beq	12910 <__assert_fail@plt+0x8dc>
   12a6c:	add	r7, sp, #104	; 0x68
   12a70:	add	r6, r6, r7
   12a74:	b	12a80 <__assert_fail@plt+0xa4c>
   12a78:	cmp	r6, r7
   12a7c:	beq	12910 <__assert_fail@plt+0x8dc>
   12a80:	mov	r1, fp
   12a84:	ldrb	r0, [r7], #1
   12a88:	bl	11f38 <putc@plt>
   12a8c:	cmn	r0, #1
   12a90:	bne	12a78 <__assert_fail@plt+0xa44>
   12a94:	b	128ac <__assert_fail@plt+0x878>
   12a98:	ldr	r3, [r5, #16]
   12a9c:	cmp	r3, #0
   12aa0:	bne	12c94 <__assert_fail@plt+0xc60>
   12aa4:	ldr	r1, [pc, #2384]	; 133fc <__assert_fail@plt+0x13c8>
   12aa8:	ldr	r0, [sp, #16]
   12aac:	bl	11f68 <fopen64@plt>
   12ab0:	subs	fp, r0, #0
   12ab4:	bne	126cc <__assert_fail@plt+0x698>
   12ab8:	bl	11ddc <__errno_location@plt>
   12abc:	ldr	r0, [r0]
   12ac0:	bl	11cd4 <strerror@plt>
   12ac4:	ldr	r1, [sp, #16]
   12ac8:	mov	r2, r0
   12acc:	ldr	r0, [pc, #2348]	; 13400 <__assert_fail@plt+0x13cc>
   12ad0:	bl	16bac <__assert_fail@plt+0x4b78>
   12ad4:	mov	r0, #1
   12ad8:	bl	11d4c <exit@plt>
   12adc:	cmp	r8, #4
   12ae0:	cmnne	r8, #2
   12ae4:	beq	12b74 <__assert_fail@plt+0xb40>
   12ae8:	ldr	r3, [sp, #52]	; 0x34
   12aec:	ldr	r2, [pc, #2216]	; 1339c <__assert_fail@plt+0x1368>
   12af0:	cmp	r3, r2
   12af4:	bls	12b14 <__assert_fail@plt+0xae0>
   12af8:	mov	r3, #8192	; 0x2000
   12afc:	str	r6, [sp, #64]	; 0x40
   12b00:	str	r3, [sp, #68]	; 0x44
   12b04:	b	12844 <__assert_fail@plt+0x810>
   12b08:	cmp	r7, #0
   12b0c:	bne	12718 <__assert_fail@plt+0x6e4>
   12b10:	b	12a6c <__assert_fail@plt+0xa38>
   12b14:	mov	r9, r3
   12b18:	mov	r3, #1
   12b1c:	str	r3, [sp, #24]
   12b20:	b	127a8 <__assert_fail@plt+0x774>
   12b24:	cmp	sl, #223	; 0xdf
   12b28:	ble	12f08 <__assert_fail@plt+0xed4>
   12b2c:	cmp	sl, #255	; 0xff
   12b30:	beq	12fc4 <__assert_fail@plt+0xf90>
   12b34:	cmp	r6, #0
   12b38:	addne	r8, sp, #104	; 0x68
   12b3c:	addne	r6, r8, r6
   12b40:	bne	12b50 <__assert_fail@plt+0xb1c>
   12b44:	b	130a8 <__assert_fail@plt+0x1074>
   12b48:	cmp	r8, r6
   12b4c:	beq	130a8 <__assert_fail@plt+0x1074>
   12b50:	mov	r1, fp
   12b54:	ldrb	r0, [r8], #1
   12b58:	bl	11f38 <putc@plt>
   12b5c:	cmn	r0, #1
   12b60:	bne	12b48 <__assert_fail@plt+0xb14>
   12b64:	b	128ac <__assert_fail@plt+0x878>
   12b68:	ldr	r3, [sp, #68]	; 0x44
   12b6c:	cmp	r3, #8192	; 0x2000
   12b70:	bne	12870 <__assert_fail@plt+0x83c>
   12b74:	mov	r7, r9
   12b78:	mov	r0, r7
   12b7c:	bl	11c20 <BZ2_bzDecompressEnd@plt>
   12b80:	b	12900 <__assert_fail@plt+0x8cc>
   12b84:	mov	r0, r4
   12b88:	bl	11ff8 <getc@plt>
   12b8c:	cmn	r0, #1
   12b90:	mov	sl, r0
   12b94:	beq	12954 <__assert_fail@plt+0x920>
   12b98:	add	r3, sp, #128	; 0x80
   12b9c:	add	r3, r3, r6
   12ba0:	add	r6, r6, #1
   12ba4:	strb	r0, [r3, #-24]	; 0xffffffe8
   12ba8:	b	12a58 <__assert_fail@plt+0xa24>
   12bac:	ldr	r3, [sp, #44]	; 0x2c
   12bb0:	cmp	r3, #0
   12bb4:	bne	13548 <__assert_fail@plt+0x1514>
   12bb8:	add	r1, sp, #48	; 0x30
   12bbc:	mov	r0, r4
   12bc0:	bl	122b8 <__assert_fail@plt+0x284>
   12bc4:	cmp	r0, #0
   12bc8:	bne	12954 <__assert_fail@plt+0x920>
   12bcc:	ldr	r2, [sp, #48]	; 0x30
   12bd0:	add	r3, sp, #128	; 0x80
   12bd4:	add	r3, r3, r6
   12bd8:	add	r1, sp, #106	; 0x6a
   12bdc:	add	sl, sp, #104	; 0x68
   12be0:	add	r6, r1, r6
   12be4:	lsr	r1, r2, #8
   12be8:	strb	r1, [r3, #-24]	; 0xffffffe8
   12bec:	strb	r2, [r3, #-23]	; 0xffffffe9
   12bf0:	mov	r1, fp
   12bf4:	ldrb	r0, [sl], #1
   12bf8:	bl	11f38 <putc@plt>
   12bfc:	cmn	r0, #1
   12c00:	beq	128ac <__assert_fail@plt+0x878>
   12c04:	cmp	sl, r6
   12c08:	bne	12bf0 <__assert_fail@plt+0xbbc>
   12c0c:	ldr	r3, [sp, #48]	; 0x30
   12c10:	cmp	r3, #0
   12c14:	beq	12910 <__assert_fail@plt+0x8dc>
   12c18:	b	12c40 <__assert_fail@plt+0xc0c>
   12c1c:	mov	r1, fp
   12c20:	bl	11f38 <putc@plt>
   12c24:	cmn	r0, #1
   12c28:	beq	128ac <__assert_fail@plt+0x878>
   12c2c:	ldr	r3, [sp, #48]	; 0x30
   12c30:	sub	r3, r3, #1
   12c34:	cmp	r3, #0
   12c38:	str	r3, [sp, #48]	; 0x30
   12c3c:	beq	131c4 <__assert_fail@plt+0x1190>
   12c40:	mov	r0, r4
   12c44:	bl	11ff8 <getc@plt>
   12c48:	cmn	r0, #1
   12c4c:	bne	12c1c <__assert_fail@plt+0xbe8>
   12c50:	ldr	r3, [r5, #12]
   12c54:	cmp	r3, #0
   12c58:	bne	12960 <__assert_fail@plt+0x92c>
   12c5c:	bl	11ddc <__errno_location@plt>
   12c60:	mov	r5, r0
   12c64:	mov	r0, fp
   12c68:	ldr	r6, [r5]
   12c6c:	bl	11e90 <fclose@plt>
   12c70:	str	r6, [r5]
   12c74:	mov	r0, r4
   12c78:	bl	11b54 <ferror@plt>
   12c7c:	cmp	r0, #0
   12c80:	bne	12970 <__assert_fail@plt+0x93c>
   12c84:	ldr	r1, [sp, #36]	; 0x24
   12c88:	ldr	r0, [pc, #1908]	; 13404 <__assert_fail@plt+0x13d0>
   12c8c:	bl	16bac <__assert_fail@plt+0x4b78>
   12c90:	b	125cc <__assert_fail@plt+0x598>
   12c94:	ldr	r1, [sp, #16]
   12c98:	ldr	r0, [pc, #1896]	; 13408 <__assert_fail@plt+0x13d4>
   12c9c:	bl	16b48 <__assert_fail@plt+0x4b14>
   12ca0:	b	12aa4 <__assert_fail@plt+0xa70>
   12ca4:	ldr	r0, [sp, #44]	; 0x2c
   12ca8:	bl	11a58 <gcry_xmalloc@plt>
   12cac:	ldr	r3, [sp, #44]	; 0x2c
   12cb0:	cmp	r8, #5
   12cb4:	moveq	r8, #6
   12cb8:	movne	r8, #14
   12cbc:	cmp	r3, #0
   12cc0:	mov	r7, r0
   12cc4:	beq	13208 <__assert_fail@plt+0x11d4>
   12cc8:	sub	r6, r0, #1
   12ccc:	mov	r9, r6
   12cd0:	b	12cf0 <__assert_fail@plt+0xcbc>
   12cd4:	add	r3, r9, #2
   12cd8:	ldr	ip, [sp, #44]	; 0x2c
   12cdc:	sub	r3, r3, r7
   12ce0:	cmp	ip, r3
   12ce4:	strb	r0, [r9, #1]
   12ce8:	add	r9, r9, #1
   12cec:	bls	13014 <__assert_fail@plt+0xfe0>
   12cf0:	mov	r0, r4
   12cf4:	bl	11ff8 <getc@plt>
   12cf8:	cmn	r0, #1
   12cfc:	bne	12cd4 <__assert_fail@plt+0xca0>
   12d00:	b	12954 <__assert_fail@plt+0x920>
   12d04:	add	r7, sp, #48	; 0x30
   12d08:	mov	r2, #56	; 0x38
   12d0c:	mov	r1, r9
   12d10:	mov	r0, r7
   12d14:	bl	11e18 <memset@plt>
   12d18:	mov	r0, #2048	; 0x800
   12d1c:	bl	11a58 <gcry_xmalloc@plt>
   12d20:	str	r9, [sp, #28]
   12d24:	str	r0, [sp, #32]
   12d28:	mov	r0, #8192	; 0x2000
   12d2c:	bl	11a58 <gcry_xmalloc@plt>
   12d30:	str	r9, [sp, #52]	; 0x34
   12d34:	str	r7, [sp, #24]
   12d38:	mov	r6, r0
   12d3c:	cmp	r9, #0
   12d40:	sub	r2, r9, #1
   12d44:	ldreq	r3, [sp, #32]
   12d48:	mov	sl, #0
   12d4c:	streq	r3, [sp, #48]	; 0x30
   12d50:	ldr	r3, [sp, #32]
   12d54:	add	r7, r3, r2
   12d58:	rsb	r2, r9, #2048	; 0x800
   12d5c:	mov	r8, r2
   12d60:	mov	r0, r4
   12d64:	bl	11ff8 <getc@plt>
   12d68:	add	ip, sl, r9
   12d6c:	cmn	r0, #1
   12d70:	beq	12e60 <__assert_fail@plt+0xe2c>
   12d74:	add	sl, sl, #1
   12d78:	cmp	r8, sl
   12d7c:	strb	r0, [r7, #1]!
   12d80:	bgt	12d60 <__assert_fail@plt+0xd2c>
   12d84:	add	ip, sl, r9
   12d88:	ldr	r3, [sp, #28]
   12d8c:	str	ip, [sp, #52]	; 0x34
   12d90:	cmp	r3, #0
   12d94:	mov	r3, #8192	; 0x2000
   12d98:	str	r6, [sp, #60]	; 0x3c
   12d9c:	str	r3, [sp, #64]	; 0x40
   12da0:	bne	12de4 <__assert_fail@plt+0xdb0>
   12da4:	ldr	r3, [sp, #20]
   12da8:	cmp	r3, #1
   12dac:	beq	12ea8 <__assert_fail@plt+0xe74>
   12db0:	mov	r2, #56	; 0x38
   12db4:	ldr	r1, [pc, #1616]	; 1340c <__assert_fail@plt+0x13d8>
   12db8:	ldr	r0, [sp, #24]
   12dbc:	bl	11eb4 <inflateInit_@plt>
   12dc0:	cmp	r0, #0
   12dc4:	bne	134f4 <__assert_fail@plt+0x14c0>
   12dc8:	ldr	r9, [sp, #52]	; 0x34
   12dcc:	ldr	r3, [pc, #1480]	; 1339c <__assert_fail@plt+0x1368>
   12dd0:	cmp	r9, r3
   12dd4:	bls	12ec0 <__assert_fail@plt+0xe8c>
   12dd8:	mov	r3, #8192	; 0x2000
   12ddc:	str	r6, [sp, #60]	; 0x3c
   12de0:	str	r3, [sp, #64]	; 0x40
   12de4:	sub	r8, r6, #1
   12de8:	mov	r1, #2
   12dec:	ldr	r0, [sp, #24]
   12df0:	bl	11af4 <inflate@plt>
   12df4:	cmp	r0, #1
   12df8:	mov	r9, r0
   12dfc:	beq	12f48 <__assert_fail@plt+0xf14>
   12e00:	adds	r3, r0, #5
   12e04:	movne	r3, #1
   12e08:	cmp	r0, #0
   12e0c:	cmnne	r0, #5
   12e10:	bne	134c8 <__assert_fail@plt+0x1494>
   12e14:	ldr	r2, [sp, #64]	; 0x40
   12e18:	cmp	r2, #8192	; 0x2000
   12e1c:	beq	12ed4 <__assert_fail@plt+0xea0>
   12e20:	mov	r7, r8
   12e24:	b	12e44 <__assert_fail@plt+0xe10>
   12e28:	ldr	r3, [sp, #64]	; 0x40
   12e2c:	add	r7, r7, #2
   12e30:	sub	r7, r7, r6
   12e34:	rsb	r3, r3, #8192	; 0x2000
   12e38:	cmp	r7, r3
   12e3c:	mov	r7, r2
   12e40:	bcs	12ecc <__assert_fail@plt+0xe98>
   12e44:	mov	r1, fp
   12e48:	ldrb	r0, [r7, #1]
   12e4c:	bl	11f38 <putc@plt>
   12e50:	add	r2, r7, #1
   12e54:	cmn	r0, #1
   12e58:	bne	12e28 <__assert_fail@plt+0xdf4>
   12e5c:	b	128ac <__assert_fail@plt+0x878>
   12e60:	ldr	r3, [sp, #20]
   12e64:	cmp	r8, sl
   12e68:	movle	r8, #0
   12e6c:	movgt	r8, #1
   12e70:	cmp	r3, #1
   12e74:	movne	r8, #0
   12e78:	cmp	r8, #0
   12e7c:	beq	12d88 <__assert_fail@plt+0xd54>
   12e80:	ldr	r3, [sp, #28]
   12e84:	ldr	r1, [sp, #32]
   12e88:	cmp	r3, #0
   12e8c:	add	r2, ip, #1
   12e90:	mov	r3, #8192	; 0x2000
   12e94:	strb	r0, [r1, ip]
   12e98:	str	r2, [sp, #52]	; 0x34
   12e9c:	str	r6, [sp, #60]	; 0x3c
   12ea0:	str	r3, [sp, #64]	; 0x40
   12ea4:	bne	12de4 <__assert_fail@plt+0xdb0>
   12ea8:	mov	r3, #56	; 0x38
   12eac:	ldr	r2, [pc, #1368]	; 1340c <__assert_fail@plt+0x13d8>
   12eb0:	mvn	r1, #12
   12eb4:	ldr	r0, [sp, #24]
   12eb8:	bl	11f08 <inflateInit2_@plt>
   12ebc:	b	12dc0 <__assert_fail@plt+0xd8c>
   12ec0:	mov	r3, #1
   12ec4:	str	r3, [sp, #28]
   12ec8:	b	12d3c <__assert_fail@plt+0xd08>
   12ecc:	adds	r3, r9, #5
   12ed0:	movne	r3, #1
   12ed4:	cmp	r9, #1
   12ed8:	moveq	r9, #0
   12edc:	andne	r9, r3, #1
   12ee0:	cmp	r9, #0
   12ee4:	beq	12f54 <__assert_fail@plt+0xf20>
   12ee8:	ldr	r9, [sp, #52]	; 0x34
   12eec:	ldr	r3, [pc, #1192]	; 1339c <__assert_fail@plt+0x1368>
   12ef0:	cmp	r9, r3
   12ef4:	bls	12ec0 <__assert_fail@plt+0xe8c>
   12ef8:	mov	r3, #8192	; 0x2000
   12efc:	str	r6, [sp, #60]	; 0x3c
   12f00:	str	r3, [sp, #64]	; 0x40
   12f04:	b	12de8 <__assert_fail@plt+0xdb4>
   12f08:	sub	r3, sl, #192	; 0xc0
   12f0c:	mov	r0, r4
   12f10:	lsl	r3, r3, #8
   12f14:	str	r3, [sp, #44]	; 0x2c
   12f18:	bl	11ff8 <getc@plt>
   12f1c:	cmn	r0, #1
   12f20:	beq	12954 <__assert_fail@plt+0x920>
   12f24:	ldr	r3, [sp, #44]	; 0x2c
   12f28:	add	r2, sp, #128	; 0x80
   12f2c:	add	r2, r2, r6
   12f30:	add	r3, r3, #192	; 0xc0
   12f34:	add	r3, r3, r0
   12f38:	str	r3, [sp, #44]	; 0x2c
   12f3c:	strb	r0, [r2, #-24]	; 0xffffffe8
   12f40:	add	r6, r6, #1
   12f44:	b	12a6c <__assert_fail@plt+0xa38>
   12f48:	ldr	r3, [sp, #64]	; 0x40
   12f4c:	cmp	r3, #8192	; 0x2000
   12f50:	bne	12e20 <__assert_fail@plt+0xdec>
   12f54:	ldr	r8, [pc, #1204]	; 13410 <__assert_fail@plt+0x13dc>
   12f58:	mov	r2, #16
   12f5c:	mov	r1, #1
   12f60:	ldr	r3, [r8]
   12f64:	ldr	r0, [pc, #1192]	; 13414 <__assert_fail@plt+0x13e0>
   12f68:	ldr	r7, [sp, #24]
   12f6c:	bl	11c44 <fwrite@plt>
   12f70:	ldr	r3, [sp, #52]	; 0x34
   12f74:	cmp	r3, #0
   12f78:	movne	r6, #0
   12f7c:	ldrne	r9, [pc, #1172]	; 13418 <__assert_fail@plt+0x13e4>
   12f80:	beq	12fac <__assert_fail@plt+0xf78>
   12f84:	ldr	r3, [sp, #48]	; 0x30
   12f88:	mov	r2, r9
   12f8c:	mov	r1, #1
   12f90:	ldrb	r3, [r3, r6]
   12f94:	ldr	r0, [r8]
   12f98:	bl	11e60 <__fprintf_chk@plt>
   12f9c:	ldr	r3, [sp, #52]	; 0x34
   12fa0:	add	r6, r6, #1
   12fa4:	cmp	r6, r3
   12fa8:	bcc	12f84 <__assert_fail@plt+0xf50>
   12fac:	ldr	r1, [r8]
   12fb0:	mov	r0, #10
   12fb4:	bl	11f38 <putc@plt>
   12fb8:	mov	r0, r7
   12fbc:	bl	11d70 <inflateEnd@plt>
   12fc0:	b	12900 <__assert_fail@plt+0x8cc>
   12fc4:	add	r1, sp, #44	; 0x2c
   12fc8:	mov	r0, r4
   12fcc:	bl	12308 <__assert_fail@plt+0x2d4>
   12fd0:	cmp	r0, #0
   12fd4:	bne	12954 <__assert_fail@plt+0x920>
   12fd8:	ldr	r3, [sp, #44]	; 0x2c
   12fdc:	add	r1, sp, #128	; 0x80
   12fe0:	add	r1, r1, r6
   12fe4:	add	r2, r6, #3
   12fe8:	add	r0, sp, #128	; 0x80
   12fec:	add	r2, r0, r2
   12ff0:	lsr	r0, r3, #24
   12ff4:	strb	r0, [r1, #-24]	; 0xffffffe8
   12ff8:	lsr	r0, r3, #16
   12ffc:	strb	r0, [r1, #-23]	; 0xffffffe9
   13000:	lsr	r0, r3, #8
   13004:	strb	r0, [r1, #-22]	; 0xffffffea
   13008:	add	r6, r6, #4
   1300c:	strb	r3, [r2, #-24]	; 0xffffffe8
   13010:	b	12a6c <__assert_fail@plt+0xa38>
   13014:	cmp	ip, #0
   13018:	beq	13208 <__assert_fail@plt+0x11d4>
   1301c:	ldrb	r3, [r7]
   13020:	sub	r2, r3, #2
   13024:	cmp	r2, #2
   13028:	bhi	13208 <__assert_fail@plt+0x11d4>
   1302c:	cmp	r3, #4
   13030:	moveq	r2, #6
   13034:	movne	r2, #8
   13038:	cmp	ip, r2
   1303c:	bcc	13208 <__assert_fail@plt+0x11d4>
   13040:	add	r9, r7, r2
   13044:	ldrb	r3, [r9, #-1]
   13048:	sub	r3, r3, #1
   1304c:	cmp	r3, #19
   13050:	ldrls	pc, [pc, r3, lsl #2]
   13054:	b	13208 <__assert_fail@plt+0x11d4>
   13058:	andeq	r3, r1, r8, lsl r2
   1305c:	andeq	r3, r1, r8, lsl r2
   13060:	andeq	r3, r1, r8, lsl r2
   13064:	andeq	r3, r1, r8, lsl #4
   13068:	andeq	r3, r1, r8, lsl #4
   1306c:	andeq	r3, r1, r8, lsl #4
   13070:	andeq	r3, r1, r8, lsl #4
   13074:	andeq	r3, r1, r8, lsl #4
   13078:	andeq	r3, r1, r8, lsl #4
   1307c:	andeq	r3, r1, r8, lsl #4
   13080:	andeq	r3, r1, r8, lsl #4
   13084:	andeq	r3, r1, r8, lsl #4
   13088:	andeq	r3, r1, r8, lsl #4
   1308c:	andeq	r3, r1, r8, lsl #4
   13090:	andeq	r3, r1, r8, lsl #4
   13094:	andeq	r3, r1, r4, lsr r3
   13098:	andeq	r3, r1, ip, lsr r3
   1309c:	andeq	r3, r1, r8, lsl #4
   130a0:	andeq	r3, r1, r8, lsl #4
   130a4:	andeq	r3, r1, r4, lsr r3
   130a8:	and	r6, sl, #31
   130ac:	lsls	r6, r9, r6
   130b0:	strne	r6, [sp, #48]	; 0x30
   130b4:	bne	130e0 <__assert_fail@plt+0x10ac>
   130b8:	b	12b84 <__assert_fail@plt+0xb50>
   130bc:	mov	r1, fp
   130c0:	bl	11f38 <putc@plt>
   130c4:	cmn	r0, #1
   130c8:	beq	128ac <__assert_fail@plt+0x878>
   130cc:	ldr	r8, [sp, #48]	; 0x30
   130d0:	sub	r8, r8, #1
   130d4:	cmp	r8, #0
   130d8:	str	r8, [sp, #48]	; 0x30
   130dc:	beq	131c4 <__assert_fail@plt+0x1190>
   130e0:	mov	r0, r4
   130e4:	bl	11ff8 <getc@plt>
   130e8:	cmn	r0, #1
   130ec:	bne	130bc <__assert_fail@plt+0x1088>
   130f0:	b	12954 <__assert_fail@plt+0x920>
   130f4:	sub	r3, r0, #192	; 0xc0
   130f8:	mov	r0, r4
   130fc:	lsl	r3, r3, #8
   13100:	str	r3, [sp, #40]	; 0x28
   13104:	bl	11ff8 <getc@plt>
   13108:	cmn	r0, #1
   1310c:	beq	12960 <__assert_fail@plt+0x92c>
   13110:	ldr	r3, [sp, #40]	; 0x28
   13114:	mov	r7, r6
   13118:	add	r3, r3, #192	; 0xc0
   1311c:	add	r3, r3, r0
   13120:	strb	r0, [sp, #106]	; 0x6a
   13124:	str	r3, [sp, #40]	; 0x28
   13128:	mov	r6, #3
   1312c:	b	12460 <__assert_fail@plt+0x42c>
   13130:	cmp	r9, #255	; 0xff
   13134:	lsl	r0, r8, #2
   13138:	bls	13344 <__assert_fail@plt+0x1310>
   1313c:	cmp	r9, #65536	; 0x10000
   13140:	bcs	134a0 <__assert_fail@plt+0x146c>
   13144:	orr	r0, r0, #129	; 0x81
   13148:	mov	r1, fp
   1314c:	bl	11f38 <putc@plt>
   13150:	cmn	r0, #1
   13154:	beq	128ac <__assert_fail@plt+0x878>
   13158:	mov	r1, fp
   1315c:	lsr	r0, r9, #8
   13160:	bl	11f38 <putc@plt>
   13164:	cmn	r0, #1
   13168:	beq	128ac <__assert_fail@plt+0x878>
   1316c:	mov	r1, fp
   13170:	uxtb	r0, r9
   13174:	bl	11f38 <putc@plt>
   13178:	cmn	r0, #1
   1317c:	beq	128ac <__assert_fail@plt+0x878>
   13180:	cmp	r9, #0
   13184:	bgt	13318 <__assert_fail@plt+0x12e4>
   13188:	ldr	r3, [r5, #12]
   1318c:	cmp	r3, #0
   13190:	bne	123d0 <__assert_fail@plt+0x39c>
   13194:	mov	r0, fp
   13198:	bl	11e90 <fclose@plt>
   1319c:	cmp	r0, #0
   131a0:	beq	123d0 <__assert_fail@plt+0x39c>
   131a4:	bl	11ddc <__errno_location@plt>
   131a8:	ldr	r0, [r0]
   131ac:	bl	11cd4 <strerror@plt>
   131b0:	ldr	r1, [sp, #16]
   131b4:	mov	r2, r0
   131b8:	ldr	r0, [pc, #604]	; 1341c <__assert_fail@plt+0x13e8>
   131bc:	bl	16bac <__assert_fail@plt+0x4b78>
   131c0:	b	123d0 <__assert_fail@plt+0x39c>
   131c4:	mov	r6, #0
   131c8:	b	12720 <__assert_fail@plt+0x6ec>
   131cc:	add	r1, sp, #40	; 0x28
   131d0:	mov	r0, r4
   131d4:	bl	12308 <__assert_fail@plt+0x2d4>
   131d8:	subs	r7, r0, #0
   131dc:	bne	12960 <__assert_fail@plt+0x92c>
   131e0:	ldrh	r2, [sp, #40]	; 0x28
   131e4:	ldr	r3, [sp, #40]	; 0x28
   131e8:	mov	r6, #6
   131ec:	rev16	r2, r2
   131f0:	strh	r2, [sp, #108]	; 0x6c
   131f4:	lsr	r2, r3, #24
   131f8:	strb	r2, [sp, #106]	; 0x6a
   131fc:	lsr	r2, r3, #16
   13200:	strb	r2, [sp, #107]	; 0x6b
   13204:	b	12460 <__assert_fail@plt+0x42c>
   13208:	ldr	r0, [pc, #528]	; 13420 <__assert_fail@plt+0x13ec>
   1320c:	bl	16bac <__assert_fail@plt+0x4b78>
   13210:	mov	r0, #1
   13214:	bl	11d4c <exit@plt>
   13218:	mov	r1, #2
   1321c:	sub	r3, ip, r2
   13220:	cmp	r3, #1
   13224:	bls	13208 <__assert_fail@plt+0x11d4>
   13228:	ldrh	r2, [r9]
   1322c:	sub	r3, r3, #2
   13230:	rev16	r2, r2
   13234:	uxth	r2, r2
   13238:	add	r2, r2, #7
   1323c:	lsr	r2, r2, #3
   13240:	cmp	r2, r3
   13244:	bhi	13208 <__assert_fail@plt+0x11d4>
   13248:	add	r0, r2, #2
   1324c:	sub	r3, r3, r2
   13250:	add	r9, r9, r0
   13254:	sub	r1, r1, #1
   13258:	mov	r2, r3
   1325c:	cmp	r2, #1
   13260:	bls	13208 <__assert_fail@plt+0x11d4>
   13264:	ldrh	r3, [r9]
   13268:	sub	r2, r2, #2
   1326c:	rev16	r3, r3
   13270:	uxth	r3, r3
   13274:	add	r3, r3, #7
   13278:	lsr	r3, r3, #3
   1327c:	cmp	r2, r3
   13280:	bcc	13208 <__assert_fail@plt+0x11d4>
   13284:	add	r0, r3, #2
   13288:	subs	r1, r1, #1
   1328c:	sub	r2, r2, r3
   13290:	add	r9, r9, r0
   13294:	bne	1325c <__assert_fail@plt+0x1228>
   13298:	subs	r9, r9, r7
   1329c:	beq	13208 <__assert_fail@plt+0x11d4>
   132a0:	ldrb	r3, [sp, #104]	; 0x68
   132a4:	tst	r3, #64	; 0x40
   132a8:	beq	13130 <__assert_fail@plt+0x10fc>
   132ac:	orr	r0, r8, #192	; 0xc0
   132b0:	mov	r1, fp
   132b4:	bl	11f38 <putc@plt>
   132b8:	cmn	r0, #1
   132bc:	beq	128ac <__assert_fail@plt+0x878>
   132c0:	cmp	r9, #191	; 0xbf
   132c4:	bls	13358 <__assert_fail@plt+0x1324>
   132c8:	cmp	r9, #8384	; 0x20c0
   132cc:	bcs	13460 <__assert_fail@plt+0x142c>
   132d0:	sub	r8, r9, #192	; 0xc0
   132d4:	mov	r1, fp
   132d8:	lsr	r0, r8, #8
   132dc:	add	r0, r0, #192	; 0xc0
   132e0:	bl	11f38 <putc@plt>
   132e4:	cmn	r0, #1
   132e8:	beq	128ac <__assert_fail@plt+0x878>
   132ec:	uxtb	r0, r8
   132f0:	mov	r1, fp
   132f4:	bl	11f38 <putc@plt>
   132f8:	cmn	r0, #1
   132fc:	bne	13318 <__assert_fail@plt+0x12e4>
   13300:	b	128ac <__assert_fail@plt+0x878>
   13304:	add	r6, r6, #2
   13308:	sub	r6, r6, r7
   1330c:	cmp	r9, r6
   13310:	mov	r6, r3
   13314:	ble	13188 <__assert_fail@plt+0x1154>
   13318:	mov	r1, fp
   1331c:	ldrb	r0, [r6, #1]
   13320:	bl	11f38 <putc@plt>
   13324:	add	r3, r6, #1
   13328:	cmn	r0, #1
   1332c:	bne	13304 <__assert_fail@plt+0x12d0>
   13330:	b	128ac <__assert_fail@plt+0x878>
   13334:	mov	r1, #3
   13338:	b	1321c <__assert_fail@plt+0x11e8>
   1333c:	mov	r1, #4
   13340:	b	1321c <__assert_fail@plt+0x11e8>
   13344:	orr	r0, r0, #128	; 0x80
   13348:	mov	r1, fp
   1334c:	bl	11f38 <putc@plt>
   13350:	cmn	r0, #1
   13354:	beq	128ac <__assert_fail@plt+0x878>
   13358:	mov	r1, fp
   1335c:	mov	r0, r9
   13360:	bl	11f38 <putc@plt>
   13364:	cmn	r0, #1
   13368:	bne	13318 <__assert_fail@plt+0x12e4>
   1336c:	b	128ac <__assert_fail@plt+0x878>
   13370:	ldrdeq	lr, [r2], -r0
   13374:	andeq	ip, r1, ip, lsl #12
   13378:	ldrdeq	pc, [r2], -r0
   1337c:	ldrdeq	pc, [r2], -ip
   13380:	andeq	pc, r2, r8
   13384:	andeq	ip, r1, r0, asr #14
   13388:	andeq	ip, r1, r4, lsr #14
   1338c:	andeq	ip, r1, r8, lsr #14
   13390:	andeq	ip, r1, r8, lsl r6
   13394:	andeq	ip, r1, r4, asr r7
   13398:	ldrdeq	pc, [r2], -r4
   1339c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   133a0:	ldrdeq	ip, [r1], -r4
   133a4:	andeq	ip, r1, ip, ror #17
   133a8:	andeq	ip, r1, r0, lsr r6
   133ac:	andeq	ip, r1, r0, asr #12
   133b0:	andeq	ip, r1, r4, lsr r6
   133b4:	andeq	ip, r1, r8, lsr #12
   133b8:	andeq	ip, r1, r0, lsr #12
   133bc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   133c0:			; <UNDEFINED> instruction: 0x0001c6b4
   133c4:	ldrdeq	ip, [r1], -r8
   133c8:	andeq	ip, r1, r8, asr #13
   133cc:			; <UNDEFINED> instruction: 0x0001c6bc
   133d0:			; <UNDEFINED> instruction: 0x0001c6b0
   133d4:	andeq	ip, r1, r0, lsr #13
   133d8:	muleq	r1, r8, r6
   133dc:	andeq	ip, r1, ip, lsl #13
   133e0:	andeq	ip, r1, r0, lsl #13
   133e4:	andeq	ip, r1, r8, ror r6
   133e8:	andeq	ip, r1, ip, ror #12
   133ec:	andeq	ip, r1, r8, ror #13
   133f0:	andeq	ip, r1, ip, asr r6
   133f4:	andeq	ip, r1, ip, asr #12
   133f8:	andeq	ip, r1, r0, lsl r6
   133fc:	andeq	ip, r1, r8, ror r7
   13400:	andeq	ip, r1, ip, ror r7
   13404:	andeq	ip, r1, r4, lsl #18
   13408:	andeq	ip, r1, r8, ror #14
   1340c:	strdeq	ip, [r1], -r4
   13410:	andeq	pc, r2, r8, asr #1
   13414:	andeq	ip, r1, ip, asr #16
   13418:	andeq	ip, r1, r0, ror #16
   1341c:			; <UNDEFINED> instruction: 0x0001c8bc
   13420:	muleq	r1, r8, r7
   13424:	muleq	r1, r8, r8
   13428:	andeq	ip, r1, r0, lsl r8
   1342c:	andeq	ip, r1, ip, lsr #16
   13430:	andeq	ip, r1, r8, ror #16
   13434:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13438:	andeq	r0, r0, r2, ror r2
   1343c:	ldrdeq	ip, [r1], -r8
   13440:	andeq	ip, r1, ip, ror r8
   13444:	andeq	ip, r1, r4, lsl r7
   13448:	strdeq	ip, [r1], -r4
   1344c:	andeq	ip, r1, r0, lsl #12
   13450:	andeq	r0, r0, r5, lsr #5
   13454:	andeq	ip, r1, ip, ror #15
   13458:	andeq	ip, r1, r0, asr #15
   1345c:	andeq	ip, r1, r8, lsl #14
   13460:	mov	r1, fp
   13464:	mov	r0, #255	; 0xff
   13468:	bl	11f38 <putc@plt>
   1346c:	cmn	r0, #1
   13470:	beq	128ac <__assert_fail@plt+0x878>
   13474:	mov	r1, fp
   13478:	lsr	r0, r9, #24
   1347c:	bl	11f38 <putc@plt>
   13480:	cmn	r0, #1
   13484:	beq	128ac <__assert_fail@plt+0x878>
   13488:	mov	r1, fp
   1348c:	lsr	r0, r9, #16
   13490:	bl	11f38 <putc@plt>
   13494:	cmn	r0, #1
   13498:	bne	13158 <__assert_fail@plt+0x1124>
   1349c:	b	128ac <__assert_fail@plt+0x878>
   134a0:	orr	r0, r0, #130	; 0x82
   134a4:	mov	r1, fp
   134a8:	bl	11f38 <putc@plt>
   134ac:	cmn	r0, #1
   134b0:	bne	13474 <__assert_fail@plt+0x1440>
   134b4:	b	128ac <__assert_fail@plt+0x878>
   134b8:	ldr	r1, [sp, #20]
   134bc:	ldr	r0, [pc, #-160]	; 13424 <__assert_fail@plt+0x13f0>
   134c0:	bl	16bac <__assert_fail@plt+0x4b78>
   134c4:	b	12954 <__assert_fail@plt+0x920>
   134c8:	ldr	r1, [sp, #72]	; 0x48
   134cc:	cmp	r1, #0
   134d0:	beq	134dc <__assert_fail@plt+0x14a8>
   134d4:	ldr	r0, [pc, #-180]	; 13428 <__assert_fail@plt+0x13f4>
   134d8:	bl	16c30 <__assert_fail@plt+0x4bfc>
   134dc:	mov	r1, r0
   134e0:	ldr	r0, [pc, #-188]	; 1342c <__assert_fail@plt+0x13f8>
   134e4:	bl	16c30 <__assert_fail@plt+0x4bfc>
   134e8:	mov	r1, r0
   134ec:	ldr	r0, [pc, #-196]	; 13430 <__assert_fail@plt+0x13fc>
   134f0:	bl	16c30 <__assert_fail@plt+0x4bfc>
   134f4:	ldr	r1, [sp, #72]	; 0x48
   134f8:	cmp	r1, #0
   134fc:	beq	13528 <__assert_fail@plt+0x14f4>
   13500:	ldr	r0, [pc, #-212]	; 13434 <__assert_fail@plt+0x1400>
   13504:	bl	16c30 <__assert_fail@plt+0x4bfc>
   13508:	ldr	r3, [pc, #-196]	; 1344c <__assert_fail@plt+0x1418>
   1350c:	ldr	r2, [pc, #-220]	; 13438 <__assert_fail@plt+0x1404>
   13510:	ldr	r1, [pc, #-192]	; 13458 <__assert_fail@plt+0x1424>
   13514:	ldr	r0, [pc, #-224]	; 1343c <__assert_fail@plt+0x1408>
   13518:	bl	12034 <__assert_fail@plt>
   1351c:	mov	r1, r0
   13520:	ldr	r0, [pc, #-232]	; 13440 <__assert_fail@plt+0x140c>
   13524:	bl	16c30 <__assert_fail@plt+0x4bfc>
   13528:	cmn	r0, #4
   1352c:	beq	1355c <__assert_fail@plt+0x1528>
   13530:	ldr	r3, [pc, #-244]	; 13444 <__assert_fail@plt+0x1410>
   13534:	cmn	r0, #6
   13538:	ldr	r1, [pc, #-248]	; 13448 <__assert_fail@plt+0x1414>
   1353c:	movne	r1, r3
   13540:	b	13500 <__assert_fail@plt+0x14cc>
   13544:	bl	11bc0 <__stack_chk_fail@plt>
   13548:	ldr	r3, [pc, #-260]	; 1344c <__assert_fail@plt+0x1418>
   1354c:	ldr	r2, [pc, #-260]	; 13450 <__assert_fail@plt+0x141c>
   13550:	ldr	r1, [pc, #-256]	; 13458 <__assert_fail@plt+0x1424>
   13554:	ldr	r0, [pc, #-264]	; 13454 <__assert_fail@plt+0x1420>
   13558:	bl	12034 <__assert_fail@plt>
   1355c:	ldr	r1, [pc, #-264]	; 1345c <__assert_fail@plt+0x1428>
   13560:	b	13500 <__assert_fail@plt+0x14cc>
   13564:	push	{r4, r5, r6, lr}
   13568:	mov	r5, r1
   1356c:	ldr	r1, [r0, #8]
   13570:	mov	r4, r0
   13574:	ands	r3, r1, #32768	; 0x8000
   13578:	bne	135c0 <__assert_fail@plt+0x158c>
   1357c:	ldr	r2, [r0]
   13580:	orr	r1, r1, #32768	; 0x8000
   13584:	str	r1, [r0, #8]
   13588:	str	r3, [r0, #28]
   1358c:	str	r3, [r0, #32]
   13590:	str	r3, [r0, #36]	; 0x24
   13594:	str	r3, [r0, #12]
   13598:	ldr	r2, [r2]
   1359c:	str	r3, [r0, #40]	; 0x28
   135a0:	cmp	r2, #0
   135a4:	str	r3, [r0, #44]	; 0x2c
   135a8:	str	r3, [r0, #48]	; 0x30
   135ac:	str	r3, [r0, #52]	; 0x34
   135b0:	blt	13718 <__assert_fail@plt+0x16e4>
   135b4:	mov	r3, #0
   135b8:	str	r3, [r4, #24]
   135bc:	pop	{r4, r5, r6, pc}
   135c0:	ldr	r3, [r0, #12]
   135c4:	cmp	r3, #0
   135c8:	beq	135b4 <__assert_fail@plt+0x1580>
   135cc:	cmp	r5, #0
   135d0:	ldr	r3, [r0, #16]
   135d4:	beq	1365c <__assert_fail@plt+0x1628>
   135d8:	cmn	r3, #6
   135dc:	mov	r6, r2
   135e0:	mov	r2, #5
   135e4:	beq	136c0 <__assert_fail@plt+0x168c>
   135e8:	cmn	r3, #5
   135ec:	beq	136d4 <__assert_fail@plt+0x16a0>
   135f0:	cmn	r3, #4
   135f4:	beq	136e8 <__assert_fail@plt+0x16b4>
   135f8:	cmn	r3, #3
   135fc:	beq	13720 <__assert_fail@plt+0x16ec>
   13600:	cmn	r3, #12
   13604:	beq	13750 <__assert_fail@plt+0x171c>
   13608:	cmn	r3, #7
   1360c:	beq	13780 <__assert_fail@plt+0x174c>
   13610:	cmn	r3, #10
   13614:	beq	137b0 <__assert_fail@plt+0x177c>
   13618:	cmn	r3, #11
   1361c:	mov	r0, #0
   13620:	ldreq	r1, [pc, #496]	; 13818 <__assert_fail@plt+0x17e4>
   13624:	ldrne	r1, [pc, #496]	; 1381c <__assert_fail@plt+0x17e8>
   13628:	bl	11bb4 <dcgettext@plt>
   1362c:	mov	r3, r0
   13630:	ldr	r2, [r6]
   13634:	mov	r1, r5
   13638:	ldr	r0, [pc, #480]	; 13820 <__assert_fail@plt+0x17ec>
   1363c:	bl	16bac <__assert_fail@plt+0x4b78>
   13640:	ldr	r3, [r4, #12]
   13644:	cmp	r3, #1
   13648:	moveq	r3, #0
   1364c:	streq	r3, [r4, #12]
   13650:	beq	135b4 <__assert_fail@plt+0x1580>
   13654:	mov	r0, #2
   13658:	bl	11d4c <exit@plt>
   1365c:	ldr	r6, [r0, #40]	; 0x28
   13660:	ldr	r2, [pc, #444]	; 13824 <__assert_fail@plt+0x17f0>
   13664:	cmp	r6, #0
   13668:	moveq	r6, r2
   1366c:	cmn	r3, #3
   13670:	beq	13734 <__assert_fail@plt+0x1700>
   13674:	cmn	r3, #12
   13678:	beq	13764 <__assert_fail@plt+0x1730>
   1367c:	cmn	r3, #6
   13680:	beq	13794 <__assert_fail@plt+0x1760>
   13684:	cmn	r3, #7
   13688:	beq	137c4 <__assert_fail@plt+0x1790>
   1368c:	cmn	r3, #8
   13690:	beq	136fc <__assert_fail@plt+0x16c8>
   13694:	cmn	r3, #9
   13698:	beq	137fc <__assert_fail@plt+0x17c8>
   1369c:	cmn	r3, #11
   136a0:	mov	r2, #5
   136a4:	beq	137e0 <__assert_fail@plt+0x17ac>
   136a8:	ldr	r1, [pc, #376]	; 13828 <__assert_fail@plt+0x17f4>
   136ac:	mov	r0, #0
   136b0:	bl	11bb4 <dcgettext@plt>
   136b4:	mov	r1, r6
   136b8:	bl	16bac <__assert_fail@plt+0x4b78>
   136bc:	b	13640 <__assert_fail@plt+0x160c>
   136c0:	ldr	r1, [pc, #356]	; 1382c <__assert_fail@plt+0x17f8>
   136c4:	mov	r0, #0
   136c8:	bl	11bb4 <dcgettext@plt>
   136cc:	mov	r3, r0
   136d0:	b	13630 <__assert_fail@plt+0x15fc>
   136d4:	ldr	r1, [pc, #340]	; 13830 <__assert_fail@plt+0x17fc>
   136d8:	mov	r0, #0
   136dc:	bl	11bb4 <dcgettext@plt>
   136e0:	mov	r3, r0
   136e4:	b	13630 <__assert_fail@plt+0x15fc>
   136e8:	ldr	r1, [pc, #324]	; 13834 <__assert_fail@plt+0x1800>
   136ec:	mov	r0, #0
   136f0:	bl	11bb4 <dcgettext@plt>
   136f4:	mov	r3, r0
   136f8:	b	13630 <__assert_fail@plt+0x15fc>
   136fc:	mov	r0, r5
   13700:	mov	r2, #5
   13704:	ldr	r1, [pc, #300]	; 13838 <__assert_fail@plt+0x1804>
   13708:	bl	11bb4 <dcgettext@plt>
   1370c:	mov	r1, r6
   13710:	bl	16bac <__assert_fail@plt+0x4b78>
   13714:	b	13640 <__assert_fail@plt+0x160c>
   13718:	ldr	r0, [pc, #284]	; 1383c <__assert_fail@plt+0x1808>
   1371c:	bl	16cb4 <__assert_fail@plt+0x4c80>
   13720:	ldr	r1, [pc, #280]	; 13840 <__assert_fail@plt+0x180c>
   13724:	mov	r0, #0
   13728:	bl	11bb4 <dcgettext@plt>
   1372c:	mov	r3, r0
   13730:	b	13630 <__assert_fail@plt+0x15fc>
   13734:	mov	r0, r5
   13738:	mov	r2, #5
   1373c:	ldr	r1, [pc, #256]	; 13844 <__assert_fail@plt+0x1810>
   13740:	bl	11bb4 <dcgettext@plt>
   13744:	mov	r1, r6
   13748:	bl	16bac <__assert_fail@plt+0x4b78>
   1374c:	b	13640 <__assert_fail@plt+0x160c>
   13750:	ldr	r1, [pc, #240]	; 13848 <__assert_fail@plt+0x1814>
   13754:	mov	r0, #0
   13758:	bl	11bb4 <dcgettext@plt>
   1375c:	mov	r3, r0
   13760:	b	13630 <__assert_fail@plt+0x15fc>
   13764:	mov	r0, r5
   13768:	mov	r2, #5
   1376c:	ldr	r1, [pc, #216]	; 1384c <__assert_fail@plt+0x1818>
   13770:	bl	11bb4 <dcgettext@plt>
   13774:	mov	r1, r6
   13778:	bl	16bac <__assert_fail@plt+0x4b78>
   1377c:	b	13640 <__assert_fail@plt+0x160c>
   13780:	ldr	r1, [pc, #200]	; 13850 <__assert_fail@plt+0x181c>
   13784:	mov	r0, #0
   13788:	bl	11bb4 <dcgettext@plt>
   1378c:	mov	r3, r0
   13790:	b	13630 <__assert_fail@plt+0x15fc>
   13794:	mov	r0, r5
   13798:	mov	r2, #5
   1379c:	ldr	r1, [pc, #176]	; 13854 <__assert_fail@plt+0x1820>
   137a0:	bl	11bb4 <dcgettext@plt>
   137a4:	mov	r1, r6
   137a8:	bl	16bac <__assert_fail@plt+0x4b78>
   137ac:	b	13640 <__assert_fail@plt+0x160c>
   137b0:	ldr	r1, [pc, #160]	; 13858 <__assert_fail@plt+0x1824>
   137b4:	mov	r0, #0
   137b8:	bl	11bb4 <dcgettext@plt>
   137bc:	mov	r3, r0
   137c0:	b	13630 <__assert_fail@plt+0x15fc>
   137c4:	mov	r0, r5
   137c8:	mov	r2, #5
   137cc:	ldr	r1, [pc, #136]	; 1385c <__assert_fail@plt+0x1828>
   137d0:	bl	11bb4 <dcgettext@plt>
   137d4:	mov	r1, r6
   137d8:	bl	16bac <__assert_fail@plt+0x4b78>
   137dc:	b	13640 <__assert_fail@plt+0x160c>
   137e0:	ldr	r1, [pc, #120]	; 13860 <__assert_fail@plt+0x182c>
   137e4:	mov	r0, #0
   137e8:	bl	11bb4 <dcgettext@plt>
   137ec:	mov	r1, r0
   137f0:	ldr	r0, [pc, #108]	; 13864 <__assert_fail@plt+0x1830>
   137f4:	bl	16bac <__assert_fail@plt+0x4b78>
   137f8:	b	13640 <__assert_fail@plt+0x160c>
   137fc:	mov	r0, r5
   13800:	mov	r2, #5
   13804:	ldr	r1, [pc, #92]	; 13868 <__assert_fail@plt+0x1834>
   13808:	bl	11bb4 <dcgettext@plt>
   1380c:	mov	r1, r6
   13810:	bl	16bac <__assert_fail@plt+0x4b78>
   13814:	b	13640 <__assert_fail@plt+0x160c>
   13818:	andeq	ip, r1, r8, lsl #14
   1381c:	andeq	ip, r1, r4, asr #23
   13820:	ldrdeq	ip, [r1], -r4
   13824:	andeq	ip, r1, r0, lsl fp
   13828:	andeq	ip, r1, r8, asr #25
   1382c:	andeq	ip, r1, r8, lsr fp
   13830:	andeq	ip, r1, r0, asr fp
   13834:	andeq	ip, r1, ip, asr fp
   13838:	andeq	ip, r1, r8, ror ip
   1383c:	andeq	ip, r1, r8, lsl fp
   13840:	andeq	ip, r1, r0, ror fp
   13844:	andeq	ip, r1, r0, ror #23
   13848:	andeq	ip, r1, r4, lsl #23
   1384c:	andeq	ip, r1, r8, lsl #24
   13850:	muleq	r1, r8, fp
   13854:	andeq	ip, r1, r0, lsr ip
   13858:	andeq	ip, r1, r8, lsr #23
   1385c:	andeq	ip, r1, ip, asr ip
   13860:			; <UNDEFINED> instruction: 0x0001ccb8
   13864:	andeq	ip, r1, r0, lsl #18
   13868:	muleq	r1, r8, ip
   1386c:	tst	r1, #16
   13870:	and	r1, r1, #7
   13874:	push	{r4, r5, r6, r7, r8, lr}
   13878:	movne	r7, #0
   1387c:	moveq	r7, #10
   13880:	cmp	r1, #3
   13884:	mov	r6, r0
   13888:	str	r1, [r0, #20]
   1388c:	mov	r5, r2
   13890:	beq	138b0 <__assert_fail@plt+0x187c>
   13894:	cmp	r1, #4
   13898:	beq	138f0 <__assert_fail@plt+0x18bc>
   1389c:	cmp	r1, #1
   138a0:	beq	138b0 <__assert_fail@plt+0x187c>
   138a4:	str	r2, [r6, #24]
   138a8:	mov	r0, #1
   138ac:	pop	{r4, r5, r6, r7, r8, pc}
   138b0:	bl	11ddc <__errno_location@plt>
   138b4:	mov	r1, #0
   138b8:	mov	r2, r7
   138bc:	mov	r4, r0
   138c0:	mov	r0, r5
   138c4:	str	r1, [r4]
   138c8:	bl	11ac4 <strtol@plt>
   138cc:	sub	r3, r0, #-2147483647	; 0x80000001
   138d0:	cmn	r3, #3
   138d4:	bls	138e4 <__assert_fail@plt+0x18b0>
   138d8:	ldr	r3, [r4]
   138dc:	cmp	r3, #34	; 0x22
   138e0:	beq	1396c <__assert_fail@plt+0x1938>
   138e4:	str	r0, [r6, #24]
   138e8:	mov	r0, #0
   138ec:	pop	{r4, r5, r6, r7, r8, pc}
   138f0:	ldrb	r4, [r2]
   138f4:	tst	r4, #128	; 0x80
   138f8:	bne	13924 <__assert_fail@plt+0x18f0>
   138fc:	bl	11d1c <__ctype_b_loc@plt>
   13900:	ldr	r2, [r0]
   13904:	b	13914 <__assert_fail@plt+0x18e0>
   13908:	ldrb	r4, [r5, #1]!
   1390c:	tst	r4, #128	; 0x80
   13910:	bne	13924 <__assert_fail@plt+0x18f0>
   13914:	lsl	r3, r4, #1
   13918:	ldrh	r3, [r2, r3]
   1391c:	tst	r3, #8192	; 0x2000
   13920:	bne	13908 <__assert_fail@plt+0x18d4>
   13924:	cmp	r4, #45	; 0x2d
   13928:	beq	1397c <__assert_fail@plt+0x1948>
   1392c:	bl	11ddc <__errno_location@plt>
   13930:	mov	r4, #0
   13934:	mov	r2, r7
   13938:	mov	r1, r4
   1393c:	mov	r8, r0
   13940:	mov	r0, r5
   13944:	str	r4, [r8]
   13948:	bl	11d7c <strtoul@plt>
   1394c:	cmn	r0, #1
   13950:	str	r0, [r6, #24]
   13954:	beq	13960 <__assert_fail@plt+0x192c>
   13958:	mov	r0, r4
   1395c:	pop	{r4, r5, r6, r7, r8, pc}
   13960:	ldr	r3, [r8]
   13964:	cmp	r3, #34	; 0x22
   13968:	bne	13958 <__assert_fail@plt+0x1924>
   1396c:	mvn	r3, #11
   13970:	str	r3, [r6, #16]
   13974:	mvn	r0, #0
   13978:	pop	{r4, r5, r6, r7, r8, pc}
   1397c:	mov	r2, #0
   13980:	mvn	r3, #11
   13984:	str	r2, [r6, #24]
   13988:	str	r3, [r6, #16]
   1398c:	mvn	r0, #0
   13990:	pop	{r4, r5, r6, r7, r8, pc}
   13994:	push	{r1, r2, r3}
   13998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1399c:	sub	sp, sp, #8
   139a0:	ldr	r8, [pc, #188]	; 13a64 <__assert_fail@plt+0x1a30>
   139a4:	ldr	r4, [sp, #44]	; 0x2c
   139a8:	ldr	r3, [r8]
   139ac:	cmp	r4, #0
   139b0:	str	r3, [sp, #4]
   139b4:	moveq	r5, r4
   139b8:	beq	13a3c <__assert_fail@plt+0x1a08>
   139bc:	cmp	r0, #0
   139c0:	add	r2, sp, #48	; 0x30
   139c4:	mov	r9, r0
   139c8:	ldr	r6, [pc, #152]	; 13a68 <__assert_fail@plt+0x1a34>
   139cc:	ldr	fp, [pc, #152]	; 13a6c <__assert_fail@plt+0x1a38>
   139d0:	movne	r7, #2
   139d4:	moveq	r7, #1
   139d8:	mov	sl, r2
   139dc:	mov	r5, #0
   139e0:	str	r2, [sp]
   139e4:	b	13a14 <__assert_fail@plt+0x19e0>
   139e8:	mov	r1, r4
   139ec:	mov	r0, r7
   139f0:	blx	r2
   139f4:	mov	r0, r4
   139f8:	bl	11d88 <strlen@plt>
   139fc:	add	sl, sl, #4
   13a00:	ldr	r4, [sl, #-4]
   13a04:	str	sl, [sp]
   13a08:	cmp	r4, #0
   13a0c:	add	r5, r5, r0
   13a10:	beq	13a3c <__assert_fail@plt+0x1a08>
   13a14:	ldr	r2, [r6]
   13a18:	cmp	r2, #0
   13a1c:	bne	139e8 <__assert_fail@plt+0x19b4>
   13a20:	cmp	r9, #0
   13a24:	mov	r0, r4
   13a28:	ldrne	r3, [pc, #64]	; 13a70 <__assert_fail@plt+0x1a3c>
   13a2c:	ldreq	r1, [fp]
   13a30:	ldrne	r1, [r3]
   13a34:	bl	11fd4 <fputs@plt>
   13a38:	b	139f4 <__assert_fail@plt+0x19c0>
   13a3c:	ldr	r2, [sp, #4]
   13a40:	ldr	r3, [r8]
   13a44:	mov	r0, r5
   13a48:	cmp	r2, r3
   13a4c:	bne	13a60 <__assert_fail@plt+0x1a2c>
   13a50:	add	sp, sp, #8
   13a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a58:	add	sp, sp, #12
   13a5c:	bx	lr
   13a60:	bl	11bc0 <__stack_chk_fail@plt>
   13a64:	ldrdeq	lr, [r2], -r0
   13a68:	strdeq	pc, [r2], -r4
   13a6c:	ldrdeq	pc, [r2], -r4
   13a70:	andeq	pc, r2, r8, asr #1
   13a74:	ldr	r3, [pc, #48]	; 13aac <__assert_fail@plt+0x1a78>
   13a78:	ldr	r3, [r3]
   13a7c:	cmp	r3, #0
   13a80:	beq	13a98 <__assert_fail@plt+0x1a64>
   13a84:	cmp	r0, #0
   13a88:	movne	r0, #2
   13a8c:	moveq	r0, #1
   13a90:	mov	r1, #0
   13a94:	bx	r3
   13a98:	cmp	r0, #0
   13a9c:	ldrne	r3, [pc, #12]	; 13ab0 <__assert_fail@plt+0x1a7c>
   13aa0:	ldreq	r3, [pc, #12]	; 13ab4 <__assert_fail@plt+0x1a80>
   13aa4:	ldr	r0, [r3]
   13aa8:	b	11b00 <fflush@plt>
   13aac:	strdeq	pc, [r2], -r4
   13ab0:	andeq	pc, r2, r8, asr #1
   13ab4:	ldrdeq	pc, [r2], -r4
   13ab8:	ldr	r3, [pc, #4]	; 13ac4 <__assert_fail@plt+0x1a90>
   13abc:	str	r0, [r3]
   13ac0:	bx	lr
   13ac4:	strdeq	pc, [r2], -r4
   13ac8:	ldr	r3, [pc, #244]	; 13bc4 <__assert_fail@plt+0x1b90>
   13acc:	push	{r4, lr}
   13ad0:	mov	r4, r0
   13ad4:	ldr	r3, [r3, #4]
   13ad8:	cmp	r3, #0
   13adc:	beq	13aec <__assert_fail@plt+0x1ab8>
   13ae0:	blx	r3
   13ae4:	cmp	r0, #0
   13ae8:	bne	13b7c <__assert_fail@plt+0x1b48>
   13aec:	sub	r0, r4, #10
   13af0:	cmp	r0, #31
   13af4:	ldrls	pc, [pc, r0, lsl #2]
   13af8:	b	13bbc <__assert_fail@plt+0x1b88>
   13afc:	andeq	r3, r1, ip, lsl #23
   13b00:	muleq	r1, r4, fp
   13b04:			; <UNDEFINED> instruction: 0x00013bbc
   13b08:	muleq	r1, ip, fp
   13b0c:	andeq	r3, r1, r4, lsr #23
   13b10:	andeq	r3, r1, ip, lsr #23
   13b14:			; <UNDEFINED> instruction: 0x00013bb4
   13b18:			; <UNDEFINED> instruction: 0x00013bbc
   13b1c:			; <UNDEFINED> instruction: 0x00013bbc
   13b20:			; <UNDEFINED> instruction: 0x00013bbc
   13b24:			; <UNDEFINED> instruction: 0x00013bbc
   13b28:			; <UNDEFINED> instruction: 0x00013bbc
   13b2c:			; <UNDEFINED> instruction: 0x00013bbc
   13b30:			; <UNDEFINED> instruction: 0x00013bbc
   13b34:			; <UNDEFINED> instruction: 0x00013bbc
   13b38:			; <UNDEFINED> instruction: 0x00013bbc
   13b3c:			; <UNDEFINED> instruction: 0x00013bbc
   13b40:			; <UNDEFINED> instruction: 0x00013bbc
   13b44:			; <UNDEFINED> instruction: 0x00013bbc
   13b48:			; <UNDEFINED> instruction: 0x00013bbc
   13b4c:			; <UNDEFINED> instruction: 0x00013bbc
   13b50:			; <UNDEFINED> instruction: 0x00013bbc
   13b54:			; <UNDEFINED> instruction: 0x00013bbc
   13b58:			; <UNDEFINED> instruction: 0x00013bbc
   13b5c:			; <UNDEFINED> instruction: 0x00013bbc
   13b60:			; <UNDEFINED> instruction: 0x00013bbc
   13b64:			; <UNDEFINED> instruction: 0x00013bbc
   13b68:			; <UNDEFINED> instruction: 0x00013bbc
   13b6c:			; <UNDEFINED> instruction: 0x00013bbc
   13b70:			; <UNDEFINED> instruction: 0x00013bbc
   13b74:	andeq	r3, r1, r4, lsl #23
   13b78:	andeq	r3, r1, r4, lsl #23
   13b7c:	pop	{r4, lr}
   13b80:	b	1817c <__assert_fail@plt+0x6148>
   13b84:	ldr	r0, [pc, #60]	; 13bc8 <__assert_fail@plt+0x1b94>
   13b88:	pop	{r4, pc}
   13b8c:	ldr	r0, [pc, #56]	; 13bcc <__assert_fail@plt+0x1b98>
   13b90:	pop	{r4, pc}
   13b94:	ldr	r0, [pc, #52]	; 13bd0 <__assert_fail@plt+0x1b9c>
   13b98:	pop	{r4, pc}
   13b9c:	ldr	r0, [pc, #48]	; 13bd4 <__assert_fail@plt+0x1ba0>
   13ba0:	pop	{r4, pc}
   13ba4:	ldr	r0, [pc, #44]	; 13bd8 <__assert_fail@plt+0x1ba4>
   13ba8:	pop	{r4, pc}
   13bac:	ldr	r0, [pc, #40]	; 13bdc <__assert_fail@plt+0x1ba8>
   13bb0:	pop	{r4, pc}
   13bb4:	ldr	r0, [pc, #36]	; 13be0 <__assert_fail@plt+0x1bac>
   13bb8:	pop	{r4, pc}
   13bbc:	mov	r0, #0
   13bc0:	pop	{r4, pc}
   13bc4:	strdeq	pc, [r2], -r4
   13bc8:	andeq	sp, r1, r4, asr #15
   13bcc:	andeq	ip, r1, ip, ror #31
   13bd0:	andeq	ip, r1, r0, ror #25
   13bd4:	andeq	ip, r1, r8, ror #31
   13bd8:			; <UNDEFINED> instruction: 0x0001cfb4
   13bdc:	andeq	ip, r1, r8, lsr pc
   13be0:	andeq	ip, r1, r4, ror #25
   13be4:	push	{r4, r5, lr}
   13be8:	mov	r0, #11
   13bec:	sub	sp, sp, #12
   13bf0:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13bf4:	mov	r2, #0
   13bf8:	mov	r1, r0
   13bfc:	mov	r0, r2
   13c00:	bl	13994 <__assert_fail@plt+0x1960>
   13c04:	mov	r0, #12
   13c08:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13c0c:	subs	r2, r0, #0
   13c10:	beq	13c28 <__assert_fail@plt+0x1bf4>
   13c14:	mov	r0, #0
   13c18:	str	r0, [sp]
   13c1c:	ldr	r3, [pc, #268]	; 13d30 <__assert_fail@plt+0x1cfc>
   13c20:	ldr	r1, [pc, #268]	; 13d34 <__assert_fail@plt+0x1d00>
   13c24:	bl	13994 <__assert_fail@plt+0x1960>
   13c28:	mov	r0, #13
   13c2c:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13c30:	mov	ip, #0
   13c34:	ldr	r3, [pc, #252]	; 13d38 <__assert_fail@plt+0x1d04>
   13c38:	str	ip, [sp]
   13c3c:	ldr	r1, [pc, #248]	; 13d3c <__assert_fail@plt+0x1d08>
   13c40:	mov	r5, r3
   13c44:	mov	r4, #20
   13c48:	mov	r2, r0
   13c4c:	mov	r0, ip
   13c50:	bl	13994 <__assert_fail@plt+0x1960>
   13c54:	mov	r0, r4
   13c58:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13c5c:	mov	r3, #0
   13c60:	mov	r2, r5
   13c64:	add	r4, r4, #1
   13c68:	subs	r1, r0, #0
   13c6c:	mov	r0, r3
   13c70:	beq	13c78 <__assert_fail@plt+0x1c44>
   13c74:	bl	13994 <__assert_fail@plt+0x1960>
   13c78:	cmp	r4, #30
   13c7c:	bne	13c54 <__assert_fail@plt+0x1c20>
   13c80:	mov	r0, #14
   13c84:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13c88:	subs	r1, r0, #0
   13c8c:	beq	13ca0 <__assert_fail@plt+0x1c6c>
   13c90:	mov	r3, #0
   13c94:	mov	r0, r3
   13c98:	ldr	r2, [pc, #152]	; 13d38 <__assert_fail@plt+0x1d04>
   13c9c:	bl	13994 <__assert_fail@plt+0x1960>
   13ca0:	mov	r0, #10
   13ca4:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13ca8:	subs	r1, r0, #0
   13cac:	beq	13cc0 <__assert_fail@plt+0x1c8c>
   13cb0:	mov	r3, #0
   13cb4:	mov	r0, r3
   13cb8:	ldr	r2, [pc, #120]	; 13d38 <__assert_fail@plt+0x1d04>
   13cbc:	bl	13994 <__assert_fail@plt+0x1960>
   13cc0:	mov	r0, #15
   13cc4:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13cc8:	subs	r1, r0, #0
   13ccc:	beq	13cdc <__assert_fail@plt+0x1ca8>
   13cd0:	mov	r2, #0
   13cd4:	mov	r0, r2
   13cd8:	bl	13994 <__assert_fail@plt+0x1960>
   13cdc:	mov	r0, #18
   13ce0:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13ce4:	subs	r1, r0, #0
   13ce8:	beq	13cf8 <__assert_fail@plt+0x1cc4>
   13cec:	mov	r2, #0
   13cf0:	mov	r0, r2
   13cf4:	bl	13994 <__assert_fail@plt+0x1960>
   13cf8:	mov	r0, r4
   13cfc:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13d00:	mov	r2, #0
   13d04:	add	r4, r4, #1
   13d08:	subs	r1, r0, #0
   13d0c:	mov	r0, r2
   13d10:	beq	13d18 <__assert_fail@plt+0x1ce4>
   13d14:	bl	13994 <__assert_fail@plt+0x1960>
   13d18:	cmp	r4, #40	; 0x28
   13d1c:	bne	13cf8 <__assert_fail@plt+0x1cc4>
   13d20:	mov	r0, #0
   13d24:	add	sp, sp, #12
   13d28:	pop	{r4, r5, lr}
   13d2c:	b	13a74 <__assert_fail@plt+0x1a40>
   13d30:	andeq	sp, r1, ip, lsr r0
   13d34:	andeq	sp, r1, r0, asr #32
   13d38:	andeq	ip, r1, r4, lsr #18
   13d3c:	andeq	sp, r1, r8, ror r1
   13d40:	ldr	r3, [pc, #1504]	; 14328 <__assert_fail@plt+0x22f4>
   13d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d48:	sub	sp, sp, #28
   13d4c:	ldr	r3, [r3]
   13d50:	mov	r7, r0
   13d54:	str	r3, [sp, #20]
   13d58:	str	r1, [sp, #8]
   13d5c:	bl	13be4 <__assert_fail@plt+0x1bb0>
   13d60:	mov	r2, #0
   13d64:	mov	r0, r2
   13d68:	ldr	r1, [pc, #1468]	; 1432c <__assert_fail@plt+0x22f8>
   13d6c:	bl	13994 <__assert_fail@plt+0x1960>
   13d70:	mov	r0, #42	; 0x2a
   13d74:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13d78:	cmp	r0, #0
   13d7c:	beq	13d8c <__assert_fail@plt+0x1d58>
   13d80:	ldrb	r3, [r0]
   13d84:	cmp	r3, #49	; 0x31
   13d88:	beq	14240 <__assert_fail@plt+0x220c>
   13d8c:	mov	r0, #41	; 0x29
   13d90:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13d94:	mov	r3, #0
   13d98:	ldr	r2, [pc, #1420]	; 1432c <__assert_fail@plt+0x22f8>
   13d9c:	mov	r1, r0
   13da0:	mov	r0, r3
   13da4:	bl	13994 <__assert_fail@plt+0x1960>
   13da8:	ldr	r3, [r7, #12]
   13dac:	cmp	r3, #0
   13db0:	beq	13e5c <__assert_fail@plt+0x1e28>
   13db4:	ldr	r2, [r7]
   13db8:	cmp	r2, #0
   13dbc:	beq	13e34 <__assert_fail@plt+0x1e00>
   13dc0:	mov	r4, r7
   13dc4:	mov	r6, #0
   13dc8:	b	13e10 <__assert_fail@plt+0x1ddc>
   13dcc:	ldrb	r8, [r3]
   13dd0:	cmp	r8, #64	; 0x40
   13dd4:	beq	13e04 <__assert_fail@plt+0x1dd0>
   13dd8:	bl	11d88 <strlen@plt>
   13ddc:	cmp	r8, #124	; 0x7c
   13de0:	mov	r5, r0
   13de4:	beq	14158 <__assert_fail@plt+0x2124>
   13de8:	cmp	r5, #34	; 0x22
   13dec:	movle	r3, #1
   13df0:	movgt	r3, #0
   13df4:	cmp	r5, r6
   13df8:	movle	r3, #0
   13dfc:	cmp	r3, #0
   13e00:	movne	r6, r5
   13e04:	ldr	r3, [r4, #16]!
   13e08:	cmp	r3, #0
   13e0c:	beq	13e9c <__assert_fail@plt+0x1e68>
   13e10:	ldr	r0, [r4, #4]
   13e14:	cmp	r0, #0
   13e18:	beq	13e04 <__assert_fail@plt+0x1dd0>
   13e1c:	ldr	r3, [r4, #12]
   13e20:	cmp	r3, #0
   13e24:	bne	13dcc <__assert_fail@plt+0x1d98>
   13e28:	bl	11d88 <strlen@plt>
   13e2c:	mov	r5, r0
   13e30:	b	13de8 <__assert_fail@plt+0x1db4>
   13e34:	ldrb	r3, [r3]
   13e38:	cmp	r3, #64	; 0x40
   13e3c:	bne	1413c <__assert_fail@plt+0x2108>
   13e40:	ldr	r3, [sp, #8]
   13e44:	tst	r3, #32
   13e48:	beq	13e5c <__assert_fail@plt+0x1e28>
   13e4c:	mov	r2, #0
   13e50:	mov	r0, r2
   13e54:	ldr	r1, [pc, #1236]	; 14330 <__assert_fail@plt+0x22fc>
   13e58:	bl	13994 <__assert_fail@plt+0x1960>
   13e5c:	mov	r0, #19
   13e60:	bl	13ac8 <__assert_fail@plt+0x1a94>
   13e64:	subs	r4, r0, #0
   13e68:	beq	13e8c <__assert_fail@plt+0x1e58>
   13e6c:	mov	r2, #0
   13e70:	mov	r0, r2
   13e74:	ldr	r1, [pc, #1200]	; 1432c <__assert_fail@plt+0x22f8>
   13e78:	bl	13994 <__assert_fail@plt+0x1960>
   13e7c:	mov	r2, #0
   13e80:	mov	r1, r4
   13e84:	mov	r0, r2
   13e88:	bl	13994 <__assert_fail@plt+0x1960>
   13e8c:	mov	r0, #0
   13e90:	bl	13a74 <__assert_fail@plt+0x1a40>
   13e94:	mov	r0, #0
   13e98:	bl	11d4c <exit@plt>
   13e9c:	ldr	r3, [r7, #12]
   13ea0:	add	r6, r6, #10
   13ea4:	ldrb	r3, [r3]
   13ea8:	cmp	r3, #64	; 0x40
   13eac:	bne	14140 <__assert_fail@plt+0x210c>
   13eb0:	ldr	r3, [r7]
   13eb4:	cmp	r3, #0
   13eb8:	beq	13e40 <__assert_fail@plt+0x1e0c>
   13ebc:	ldr	fp, [pc, #1136]	; 14334 <__assert_fail@plt+0x2300>
   13ec0:	ldr	sl, [pc, #1136]	; 14338 <__assert_fail@plt+0x2304>
   13ec4:	add	r7, r7, #16
   13ec8:	mov	r2, #5
   13ecc:	ldr	r1, [r7, #-4]
   13ed0:	mov	r0, #0
   13ed4:	bl	11bb4 <dcgettext@plt>
   13ed8:	bl	1817c <__assert_fail@plt+0x6148>
   13edc:	subs	r5, r0, #0
   13ee0:	beq	13ef0 <__assert_fail@plt+0x1ebc>
   13ee4:	ldrb	r3, [r5]
   13ee8:	cmp	r3, #64	; 0x40
   13eec:	beq	140ac <__assert_fail@plt+0x2078>
   13ef0:	ldr	r1, [r7, #-16]
   13ef4:	cmp	r1, #255	; 0xff
   13ef8:	bgt	13fdc <__assert_fail@plt+0x1fa8>
   13efc:	mov	ip, #0
   13f00:	add	r9, sp, #16
   13f04:	mov	r3, ip
   13f08:	strb	r1, [sp, #16]
   13f0c:	mov	r0, ip
   13f10:	mov	r2, r9
   13f14:	ldr	r1, [pc, #1056]	; 1433c <__assert_fail@plt+0x2308>
   13f18:	strb	ip, [sp, #17]
   13f1c:	bl	13994 <__assert_fail@plt+0x1960>
   13f20:	ldr	r3, [r7, #-12]
   13f24:	cmp	r3, #0
   13f28:	movne	r4, #3
   13f2c:	beq	14120 <__assert_fail@plt+0x20ec>
   13f30:	ldr	r2, [r7, #-16]
   13f34:	mov	r8, #0
   13f38:	cmp	r2, #256	; 0x100
   13f3c:	movlt	ip, #44	; 0x2c
   13f40:	movge	ip, #32
   13f44:	str	r8, [sp]
   13f48:	mov	r0, r8
   13f4c:	mov	r2, fp
   13f50:	mov	r1, r9
   13f54:	strb	ip, [sp, #16]
   13f58:	strb	r8, [sp, #17]
   13f5c:	bl	13994 <__assert_fail@plt+0x1960>
   13f60:	cmp	r5, r8
   13f64:	add	r4, r4, r0
   13f68:	beq	13f78 <__assert_fail@plt+0x1f44>
   13f6c:	ldrb	r3, [r5]
   13f70:	cmp	r3, #124	; 0x7c
   13f74:	beq	141a8 <__assert_fail@plt+0x2174>
   13f78:	mov	r2, #0
   13f7c:	mov	r0, r2
   13f80:	mov	r1, sl
   13f84:	add	r4, r4, #3
   13f88:	bl	13994 <__assert_fail@plt+0x1960>
   13f8c:	cmp	r6, r4
   13f90:	ble	13fb4 <__assert_fail@plt+0x1f80>
   13f94:	ldr	r8, [pc, #932]	; 14340 <__assert_fail@plt+0x230c>
   13f98:	mov	r2, #0
   13f9c:	add	r4, r4, #1
   13fa0:	mov	r0, r2
   13fa4:	mov	r1, r8
   13fa8:	bl	13994 <__assert_fail@plt+0x1960>
   13fac:	cmp	r6, r4
   13fb0:	bne	13f98 <__assert_fail@plt+0x1f64>
   13fb4:	cmp	r5, #0
   13fb8:	bne	14004 <__assert_fail@plt+0x1fd0>
   13fbc:	mov	r2, #0
   13fc0:	mov	r0, r2
   13fc4:	ldr	r1, [pc, #864]	; 1432c <__assert_fail@plt+0x22f8>
   13fc8:	bl	13994 <__assert_fail@plt+0x1960>
   13fcc:	ldr	r3, [r7], #16
   13fd0:	cmp	r3, #0
   13fd4:	bne	13ec8 <__assert_fail@plt+0x1e94>
   13fd8:	b	13e40 <__assert_fail@plt+0x1e0c>
   13fdc:	mov	r2, #0
   13fe0:	mov	r0, r2
   13fe4:	mov	r1, sl
   13fe8:	bl	13994 <__assert_fail@plt+0x1960>
   13fec:	ldr	r3, [r7, #-12]
   13ff0:	mov	r4, #3
   13ff4:	cmp	r3, #0
   13ff8:	addne	r9, sp, #16
   13ffc:	bne	13f30 <__assert_fail@plt+0x1efc>
   14000:	b	13f94 <__assert_fail@plt+0x1f60>
   14004:	ldrb	r3, [r5]
   14008:	cmp	r3, #0
   1400c:	cmpne	r6, r4
   14010:	blt	1427c <__assert_fail@plt+0x2248>
   14014:	cmp	r3, #0
   14018:	beq	13fbc <__assert_fail@plt+0x1f88>
   1401c:	cmp	r3, #10
   14020:	mov	r8, #0
   14024:	ldr	r4, [pc, #788]	; 14340 <__assert_fail@plt+0x230c>
   14028:	bne	14080 <__assert_fail@plt+0x204c>
   1402c:	ldrb	r3, [r5, #1]
   14030:	cmp	r3, #0
   14034:	beq	13fbc <__assert_fail@plt+0x1f88>
   14038:	mov	r2, #0
   1403c:	mov	r0, r2
   14040:	ldr	r1, [pc, #740]	; 1432c <__assert_fail@plt+0x22f8>
   14044:	bl	13994 <__assert_fail@plt+0x1960>
   14048:	mov	r9, #0
   1404c:	mov	r2, #0
   14050:	add	r9, r9, #1
   14054:	mov	r0, r2
   14058:	mov	r1, r4
   1405c:	bl	13994 <__assert_fail@plt+0x1960>
   14060:	cmp	r6, r9
   14064:	bne	1404c <__assert_fail@plt+0x2018>
   14068:	ldrb	r3, [r5, #1]
   1406c:	add	r5, r5, #1
   14070:	cmp	r3, #0
   14074:	beq	13fbc <__assert_fail@plt+0x1f88>
   14078:	cmp	r3, #10
   1407c:	beq	1402c <__assert_fail@plt+0x1ff8>
   14080:	mov	r2, #0
   14084:	mov	r0, r2
   14088:	add	r1, sp, #16
   1408c:	strb	r3, [sp, #16]
   14090:	strb	r8, [sp, #17]
   14094:	bl	13994 <__assert_fail@plt+0x1960>
   14098:	ldrb	r3, [r5, #1]
   1409c:	add	r5, r5, #1
   140a0:	cmp	r3, #0
   140a4:	bne	14078 <__assert_fail@plt+0x2044>
   140a8:	b	13fbc <__assert_fail@plt+0x1f88>
   140ac:	ldrb	r3, [r5, #1]
   140b0:	cmp	r3, #0
   140b4:	beq	13fcc <__assert_fail@plt+0x1f98>
   140b8:	cmp	r3, #10
   140bc:	add	r5, r5, #1
   140c0:	mov	r4, #0
   140c4:	ldr	r8, [pc, #608]	; 1432c <__assert_fail@plt+0x22f8>
   140c8:	bne	14100 <__assert_fail@plt+0x20cc>
   140cc:	ldrb	r3, [r5, #1]
   140d0:	cmp	r3, #0
   140d4:	beq	13fbc <__assert_fail@plt+0x1f88>
   140d8:	mov	r2, #0
   140dc:	mov	r0, r2
   140e0:	mov	r1, r8
   140e4:	bl	13994 <__assert_fail@plt+0x1960>
   140e8:	ldrb	r3, [r5, #1]
   140ec:	cmp	r3, #0
   140f0:	add	r5, r5, #1
   140f4:	beq	13fbc <__assert_fail@plt+0x1f88>
   140f8:	cmp	r3, #10
   140fc:	beq	140cc <__assert_fail@plt+0x2098>
   14100:	mov	r2, #0
   14104:	mov	r0, r2
   14108:	add	r1, sp, #16
   1410c:	strb	r3, [sp, #16]
   14110:	strb	r4, [sp, #17]
   14114:	bl	13994 <__assert_fail@plt+0x1960>
   14118:	ldrb	r3, [r5, #1]
   1411c:	b	140ec <__assert_fail@plt+0x20b8>
   14120:	cmp	r5, #0
   14124:	beq	14134 <__assert_fail@plt+0x2100>
   14128:	ldrb	r2, [r5]
   1412c:	cmp	r2, #124	; 0x7c
   14130:	beq	142b8 <__assert_fail@plt+0x2284>
   14134:	mov	r4, #3
   14138:	b	13f94 <__assert_fail@plt+0x1f60>
   1413c:	mov	r6, #10
   14140:	mov	r3, #0
   14144:	mov	r0, r3
   14148:	ldr	r2, [pc, #476]	; 1432c <__assert_fail@plt+0x22f8>
   1414c:	ldr	r1, [pc, #496]	; 14344 <__assert_fail@plt+0x2310>
   14150:	bl	13994 <__assert_fail@plt+0x1960>
   14154:	b	13eb0 <__assert_fail@plt+0x1e7c>
   14158:	bl	1a9cc <__assert_fail@plt+0x8998>
   1415c:	ldr	r3, [r4, #12]
   14160:	add	r2, r3, #1
   14164:	ldrb	r3, [r3, #1]
   14168:	cmp	r3, #61	; 0x3d
   1416c:	beq	14180 <__assert_fail@plt+0x214c>
   14170:	cmp	r3, #124	; 0x7c
   14174:	cmpne	r3, #0
   14178:	add	r5, r5, #1
   1417c:	beq	13de8 <__assert_fail@plt+0x1db4>
   14180:	cmp	r0, #0
   14184:	beq	14194 <__assert_fail@plt+0x2160>
   14188:	and	r3, r3, #192	; 0xc0
   1418c:	cmp	r3, #128	; 0x80
   14190:	addne	r5, r5, #1
   14194:	ldrb	r3, [r2, #1]!
   14198:	cmp	r3, #0
   1419c:	cmpne	r3, #124	; 0x7c
   141a0:	bne	14180 <__assert_fail@plt+0x214c>
   141a4:	b	13de8 <__assert_fail@plt+0x1db4>
   141a8:	ldrb	ip, [r5, #1]
   141ac:	add	r3, r5, #1
   141b0:	str	r3, [sp, #12]
   141b4:	cmp	ip, #61	; 0x3d
   141b8:	bne	14210 <__assert_fail@plt+0x21dc>
   141bc:	mvn	r8, r5
   141c0:	add	r8, r8, r4
   141c4:	add	r4, r5, #2
   141c8:	mov	r5, #0
   141cc:	mov	r2, #0
   141d0:	mov	r0, r2
   141d4:	mov	r1, r9
   141d8:	strb	ip, [sp, #16]
   141dc:	strb	r5, [sp, #17]
   141e0:	bl	13994 <__assert_fail@plt+0x1960>
   141e4:	mov	r3, r4
   141e8:	add	r2, r8, r4
   141ec:	ldrb	ip, [r4], #1
   141f0:	cmp	ip, #0
   141f4:	cmpne	ip, #124	; 0x7c
   141f8:	bne	141cc <__assert_fail@plt+0x2198>
   141fc:	mov	r4, r2
   14200:	mov	r5, r3
   14204:	cmp	ip, #0
   14208:	addne	r5, r5, #1
   1420c:	b	13f78 <__assert_fail@plt+0x1f44>
   14210:	mov	r2, r8
   14214:	mov	r0, r8
   14218:	ldr	r1, [pc, #288]	; 14340 <__assert_fail@plt+0x230c>
   1421c:	bl	13994 <__assert_fail@plt+0x1960>
   14220:	ldrb	ip, [r5, #1]
   14224:	ldr	r3, [sp, #12]
   14228:	add	r4, r4, #1
   1422c:	cmp	ip, #124	; 0x7c
   14230:	cmpne	ip, r8
   14234:	moveq	r5, r3
   14238:	bne	141bc <__assert_fail@plt+0x2188>
   1423c:	b	14204 <__assert_fail@plt+0x21d0>
   14240:	mov	r0, #40	; 0x28
   14244:	bl	13ac8 <__assert_fail@plt+0x1a94>
   14248:	mov	r2, #0
   1424c:	mov	r4, r0
   14250:	mov	r1, r0
   14254:	mov	r0, #1
   14258:	bl	13994 <__assert_fail@plt+0x1960>
   1425c:	ldrb	r3, [r4]
   14260:	cmp	r3, #0
   14264:	beq	13d8c <__assert_fail@plt+0x1d58>
   14268:	mov	r2, #0
   1426c:	ldr	r1, [pc, #184]	; 1432c <__assert_fail@plt+0x22f8>
   14270:	mov	r0, #1
   14274:	bl	13994 <__assert_fail@plt+0x1960>
   14278:	b	13d8c <__assert_fail@plt+0x1d58>
   1427c:	mov	r2, #0
   14280:	mov	r0, r2
   14284:	ldr	r1, [pc, #160]	; 1432c <__assert_fail@plt+0x22f8>
   14288:	bl	13994 <__assert_fail@plt+0x1960>
   1428c:	ldr	r8, [pc, #172]	; 14340 <__assert_fail@plt+0x230c>
   14290:	mov	r4, #0
   14294:	mov	r2, #0
   14298:	add	r4, r4, #1
   1429c:	mov	r0, r2
   142a0:	mov	r1, r8
   142a4:	bl	13994 <__assert_fail@plt+0x1960>
   142a8:	cmp	r6, r4
   142ac:	bne	14294 <__assert_fail@plt+0x2260>
   142b0:	ldrb	r3, [r5]
   142b4:	b	14014 <__assert_fail@plt+0x1fe0>
   142b8:	mov	r2, r3
   142bc:	ldr	r1, [pc, #124]	; 14340 <__assert_fail@plt+0x230c>
   142c0:	mov	r0, r3
   142c4:	str	r3, [sp, #12]
   142c8:	add	r8, r5, #1
   142cc:	bl	13994 <__assert_fail@plt+0x1960>
   142d0:	rsb	r5, r5, #3
   142d4:	b	142f4 <__assert_fail@plt+0x22c0>
   142d8:	mov	r2, #0
   142dc:	ldr	r3, [sp, #12]
   142e0:	mov	r0, r2
   142e4:	mov	r1, r9
   142e8:	strb	ip, [sp, #16]
   142ec:	strb	r3, [sp, #17]
   142f0:	bl	13994 <__assert_fail@plt+0x1960>
   142f4:	add	r4, r5, r8
   142f8:	mov	r2, r8
   142fc:	ldrb	ip, [r8], #1
   14300:	cmp	ip, #0
   14304:	cmpne	ip, #124	; 0x7c
   14308:	bne	142d8 <__assert_fail@plt+0x22a4>
   1430c:	cmp	ip, #0
   14310:	movne	r5, r8
   14314:	moveq	r5, r2
   14318:	ldr	r3, [r7, #-12]
   1431c:	cmp	r3, #0
   14320:	bne	13f30 <__assert_fail@plt+0x1efc>
   14324:	b	13f8c <__assert_fail@plt+0x1f58>
   14328:	ldrdeq	lr, [r2], -r0
   1432c:	andeq	ip, r1, r4, lsr #18
   14330:	andeq	sp, r1, ip, asr r0
   14334:	andeq	sp, r1, r8, asr r0
   14338:	andeq	sp, r1, r4, asr r0
   1433c:	andeq	sp, r1, r0, asr r0
   14340:	andeq	sp, r1, r8, ror r1
   14344:	andeq	sp, r1, r4, asr #32
   14348:	ldr	ip, [pc, #2540]	; 14d3c <__assert_fail@plt+0x2d08>
   1434c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14350:	sub	sp, sp, #108	; 0x6c
   14354:	mov	r6, r1
   14358:	str	r1, [sp, #16]
   1435c:	mov	r4, r0
   14360:	ldm	ip, {r0, r1, r2, r3}
   14364:	add	r5, ip, #16
   14368:	add	lr, sp, #40	; 0x28
   1436c:	stm	lr, {r0, r1, r2, r3}
   14370:	add	lr, ip, #32
   14374:	ldm	r5, {r0, r1, r2, r3}
   14378:	add	r5, sp, #56	; 0x38
   1437c:	add	ip, ip, #48	; 0x30
   14380:	stm	r5, {r0, r1, r2, r3}
   14384:	ldm	lr, {r0, r1, r2, r3}
   14388:	add	lr, sp, #72	; 0x48
   1438c:	stm	lr, {r0, r1, r2, r3}
   14390:	ldm	ip, {r0, r1, r2, r3}
   14394:	add	ip, sp, #88	; 0x58
   14398:	stm	ip, {r0, r1, r2, r3}
   1439c:	ldr	r7, [r6]
   143a0:	cmp	r7, #0
   143a4:	beq	146b0 <__assert_fail@plt+0x267c>
   143a8:	mov	r7, #0
   143ac:	mov	r5, r6
   143b0:	str	r7, [sp, #20]
   143b4:	str	r7, [sp, #12]
   143b8:	mov	r9, r7
   143bc:	mov	r6, r7
   143c0:	ldr	r8, [pc, #2424]	; 14d40 <__assert_fail@plt+0x2d0c>
   143c4:	ldr	sl, [pc, #2424]	; 14d44 <__assert_fail@plt+0x2d10>
   143c8:	b	143d0 <__assert_fail@plt+0x239c>
   143cc:	mov	r6, ip
   143d0:	ldr	fp, [r5, #4]
   143d4:	cmp	fp, #0
   143d8:	beq	14440 <__assert_fail@plt+0x240c>
   143dc:	mov	r1, r8
   143e0:	mov	r0, fp
   143e4:	bl	11aac <strcmp@plt>
   143e8:	cmp	r0, #0
   143ec:	moveq	r9, #1
   143f0:	beq	14440 <__assert_fail@plt+0x240c>
   143f4:	mov	r1, sl
   143f8:	mov	r0, fp
   143fc:	bl	11aac <strcmp@plt>
   14400:	cmp	r0, #0
   14404:	moveq	r3, #1
   14408:	streq	r3, [sp, #12]
   1440c:	beq	14440 <__assert_fail@plt+0x240c>
   14410:	ldr	r1, [pc, #2352]	; 14d48 <__assert_fail@plt+0x2d14>
   14414:	mov	r0, fp
   14418:	bl	11aac <strcmp@plt>
   1441c:	cmp	r0, #0
   14420:	moveq	r3, #1
   14424:	streq	r3, [sp, #20]
   14428:	beq	14440 <__assert_fail@plt+0x240c>
   1442c:	mov	r0, fp
   14430:	ldr	r1, [pc, #2324]	; 14d4c <__assert_fail@plt+0x2d18>
   14434:	bl	11aac <strcmp@plt>
   14438:	cmp	r0, #0
   1443c:	moveq	r7, #1
   14440:	ldr	r3, [r5, #16]!
   14444:	add	ip, r6, #1
   14448:	cmp	r3, #0
   1444c:	bne	143cc <__assert_fail@plt+0x2398>
   14450:	cmp	r9, #0
   14454:	addeq	ip, r6, #2
   14458:	beq	146c0 <__assert_fail@plt+0x268c>
   1445c:	ldr	r3, [sp, #12]
   14460:	cmp	r3, #0
   14464:	bne	14480 <__assert_fail@plt+0x244c>
   14468:	add	r3, sp, #56	; 0x38
   1446c:	ldr	lr, [sp, #16]
   14470:	ldm	r3, {r0, r1, r2, r3}
   14474:	add	lr, lr, ip, lsl #4
   14478:	add	ip, ip, #1
   1447c:	stm	lr, {r0, r1, r2, r3}
   14480:	ldr	r3, [sp, #20]
   14484:	cmp	r3, #0
   14488:	bne	144a4 <__assert_fail@plt+0x2470>
   1448c:	add	r3, sp, #72	; 0x48
   14490:	ldr	lr, [sp, #16]
   14494:	ldm	r3, {r0, r1, r2, r3}
   14498:	add	lr, lr, ip, lsl #4
   1449c:	add	ip, ip, #1
   144a0:	stm	lr, {r0, r1, r2, r3}
   144a4:	cmp	r7, #0
   144a8:	addeq	r3, sp, #88	; 0x58
   144ac:	ldreq	lr, [sp, #16]
   144b0:	ldmeq	r3, {r0, r1, r2, r3}
   144b4:	addeq	ip, lr, ip, lsl #4
   144b8:	stmeq	ip, {r0, r1, r2, r3}
   144bc:	mov	r2, #0
   144c0:	mov	r1, r2
   144c4:	mov	r0, r4
   144c8:	bl	13564 <__assert_fail@plt+0x1530>
   144cc:	ldr	fp, [r4]
   144d0:	ldr	r9, [r4, #28]
   144d4:	ldr	r3, [r4, #4]
   144d8:	ldr	r8, [fp]
   144dc:	mov	r1, fp
   144e0:	adds	r2, r8, #0
   144e4:	movne	r2, #1
   144e8:	cmp	r9, #0
   144ec:	movne	r2, #0
   144f0:	cmp	r2, #0
   144f4:	ldr	r7, [r3]
   144f8:	mov	r2, r3
   144fc:	beq	14518 <__assert_fail@plt+0x24e4>
   14500:	ldr	r0, [r4, #8]
   14504:	tst	r0, #16
   14508:	bne	146d0 <__assert_fail@plt+0x269c>
   1450c:	sub	r8, r8, #1
   14510:	add	r7, r7, #4
   14514:	mov	r9, #1
   14518:	cmp	r8, #0
   1451c:	beq	146a4 <__assert_fail@plt+0x2670>
   14520:	ldr	sl, [r4, #36]	; 0x24
   14524:	ldr	r5, [r7]
   14528:	cmp	sl, #0
   1452c:	str	r5, [r4, #40]	; 0x28
   14530:	moveq	r1, #1
   14534:	moveq	r0, sl
   14538:	bne	14578 <__assert_fail@plt+0x2544>
   1453c:	ldrb	r2, [r5]
   14540:	cmp	r2, #45	; 0x2d
   14544:	beq	145a8 <__assert_fail@plt+0x2574>
   14548:	ldr	r6, [r4, #32]
   1454c:	cmp	r6, #0
   14550:	bne	14704 <__assert_fail@plt+0x26d0>
   14554:	ldr	r2, [r4, #8]
   14558:	tst	r2, #4
   1455c:	bne	146d8 <__assert_fail@plt+0x26a4>
   14560:	str	r1, [r4, #36]	; 0x24
   14564:	ldr	r2, [r4, #36]	; 0x24
   14568:	ldr	r5, [r7]
   1456c:	cmp	r2, #0
   14570:	str	r5, [r4, #40]	; 0x28
   14574:	beq	1453c <__assert_fail@plt+0x2508>
   14578:	ldr	r2, [r4, #8]
   1457c:	ands	r2, r2, #2
   14580:	streq	r2, [r4, #16]
   14584:	moveq	r1, fp
   14588:	moveq	r2, r3
   1458c:	bne	146d8 <__assert_fail@plt+0x26a4>
   14590:	str	r8, [r1]
   14594:	str	r7, [r2]
   14598:	ldr	r0, [r4, #16]
   1459c:	str	r9, [r4, #28]
   145a0:	add	sp, sp, #108	; 0x6c
   145a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a8:	ldrb	r2, [r5, #1]
   145ac:	cmp	r2, #45	; 0x2d
   145b0:	beq	14664 <__assert_fail@plt+0x2630>
   145b4:	cmp	r2, #0
   145b8:	beq	14548 <__assert_fail@plt+0x2514>
   145bc:	ldr	r2, [sp, #16]
   145c0:	ldr	r6, [r4, #32]
   145c4:	ldr	r2, [r2]
   145c8:	cmp	r6, #0
   145cc:	str	r2, [sp, #20]
   145d0:	bne	14710 <__assert_fail@plt+0x26dc>
   145d4:	ldr	r1, [r4, #8]
   145d8:	mov	r2, #1
   145dc:	tst	r1, #32
   145e0:	add	r1, r5, r2
   145e4:	str	r2, [r4, #32]
   145e8:	str	r1, [sp, #12]
   145ec:	beq	14860 <__assert_fail@plt+0x282c>
   145f0:	ldr	r0, [sp, #20]
   145f4:	cmp	r0, #0
   145f8:	beq	14be0 <__assert_fail@plt+0x2bac>
   145fc:	ldr	r2, [sp, #16]
   14600:	str	sl, [sp, #28]
   14604:	str	r5, [sp, #32]
   14608:	str	r4, [sp, #24]
   1460c:	mov	r5, r6
   14610:	mov	sl, r1
   14614:	mov	r4, r2
   14618:	mov	r6, r3
   1461c:	ldr	r0, [r4, #4]
   14620:	cmp	r0, #0
   14624:	beq	14638 <__assert_fail@plt+0x2604>
   14628:	mov	r1, sl
   1462c:	bl	11aac <strcmp@plt>
   14630:	cmp	r0, #0
   14634:	beq	147d0 <__assert_fail@plt+0x279c>
   14638:	ldr	r1, [r4, #16]!
   1463c:	add	r5, r5, #1
   14640:	cmp	r1, #0
   14644:	bne	1461c <__assert_fail@plt+0x25e8>
   14648:	ldr	r5, [sp, #32]
   1464c:	mov	r3, r6
   14650:	ldr	sl, [sp, #28]
   14654:	ldr	r4, [sp, #24]
   14658:	ldrb	r1, [r5, #1]
   1465c:	mov	r6, #1
   14660:	b	1472c <__assert_fail@plt+0x26f8>
   14664:	str	r0, [r4, #32]
   14668:	ldrb	r2, [r5, #2]
   1466c:	cmp	r2, #0
   14670:	bne	148c4 <__assert_fail@plt+0x2890>
   14674:	ldr	r2, [r4, #8]
   14678:	tst	r2, #8
   1467c:	bne	149c8 <__assert_fail@plt+0x2994>
   14680:	orr	r2, r2, #256	; 0x100
   14684:	subs	r8, r8, #1
   14688:	str	r2, [r4, #8]
   1468c:	str	r1, [r4, #36]	; 0x24
   14690:	add	r7, r7, #4
   14694:	add	r9, r9, #1
   14698:	bne	14564 <__assert_fail@plt+0x2530>
   1469c:	mov	r1, fp
   146a0:	mov	r2, r3
   146a4:	mov	r8, #0
   146a8:	str	r8, [r4, #16]
   146ac:	b	14590 <__assert_fail@plt+0x255c>
   146b0:	ldr	r5, [sp, #16]
   146b4:	mov	ip, #1
   146b8:	str	r7, [sp, #20]
   146bc:	str	r7, [sp, #12]
   146c0:	add	r3, sp, #40	; 0x28
   146c4:	ldm	r3, {r0, r1, r2, r3}
   146c8:	stm	r5, {r0, r1, r2, r3}
   146cc:	b	1445c <__assert_fail@plt+0x2428>
   146d0:	mov	r9, #0
   146d4:	b	14520 <__assert_fail@plt+0x24ec>
   146d8:	mvn	ip, #0
   146dc:	mov	r0, #2
   146e0:	str	r5, [r4, #24]
   146e4:	add	r8, r8, ip
   146e8:	add	r7, r7, #4
   146ec:	add	r9, r9, #1
   146f0:	mov	r1, fp
   146f4:	mov	r2, r3
   146f8:	str	ip, [r4, #16]
   146fc:	str	r0, [r4, #20]
   14700:	b	14590 <__assert_fail@plt+0x255c>
   14704:	ldr	r2, [sp, #16]
   14708:	ldr	r2, [r2]
   1470c:	str	r2, [sp, #20]
   14710:	add	r2, r5, r6
   14714:	str	r2, [sp, #12]
   14718:	ldr	r2, [sp, #20]
   1471c:	cmp	r2, #0
   14720:	ldr	r2, [sp, #12]
   14724:	ldrb	r1, [r2]
   14728:	beq	14be8 <__assert_fail@plt+0x2bb4>
   1472c:	ldr	r2, [sp, #20]
   14730:	mov	ip, r1
   14734:	cmp	r1, r2
   14738:	beq	14bf0 <__assert_fail@plt+0x2bbc>
   1473c:	ldr	r2, [sp, #16]
   14740:	add	r2, r2, #16
   14744:	b	14754 <__assert_fail@plt+0x2720>
   14748:	cmp	lr, r1
   1474c:	add	r2, r2, #16
   14750:	beq	147ec <__assert_fail@plt+0x27b8>
   14754:	ldr	lr, [r2]
   14758:	mov	r0, r2
   1475c:	cmp	lr, #0
   14760:	bne	14748 <__assert_fail@plt+0x2714>
   14764:	cmp	r1, #63	; 0x3f
   14768:	cmpne	r1, #104	; 0x68
   1476c:	beq	14d30 <__assert_fail@plt+0x2cfc>
   14770:	ldr	r2, [r0, #8]
   14774:	ldr	r1, [sp, #12]
   14778:	tst	r2, #128	; 0x80
   1477c:	add	r6, r6, #1
   14780:	mvnne	r2, #6
   14784:	mvneq	r2, #1
   14788:	str	r6, [r4, #32]
   1478c:	str	r1, [r4, #24]
   14790:	str	r2, [r4, #16]
   14794:	ldr	r2, [sp, #12]
   14798:	mov	r1, fp
   1479c:	ldrb	r0, [r2, #1]
   147a0:	mov	r2, r3
   147a4:	cmp	r0, #0
   147a8:	andne	sl, sl, #1
   147ac:	moveq	sl, #1
   147b0:	cmp	sl, #0
   147b4:	beq	14590 <__assert_fail@plt+0x255c>
   147b8:	mov	r3, #0
   147bc:	sub	r8, r8, #1
   147c0:	add	r7, r7, #4
   147c4:	add	r9, r9, #1
   147c8:	str	r3, [r4, #32]
   147cc:	b	14590 <__assert_fail@plt+0x255c>
   147d0:	ldr	r2, [sp, #16]
   147d4:	mov	r3, r6
   147d8:	ldr	r4, [sp, #24]
   147dc:	mov	r6, #1
   147e0:	ldr	ip, [r2, r5, lsl #4]
   147e4:	add	r0, r2, r5, lsl #4
   147e8:	mov	sl, r6
   147ec:	cmp	ip, #0
   147f0:	beq	14878 <__assert_fail@plt+0x2844>
   147f4:	ldr	r1, [r0, #8]
   147f8:	str	ip, [r4, #16]
   147fc:	ands	r2, r1, #7
   14800:	beq	14868 <__assert_fail@plt+0x2834>
   14804:	ldr	r2, [sp, #12]
   14808:	eor	sl, sl, #1
   1480c:	ldrb	r0, [r2, #1]
   14810:	cmp	r0, #0
   14814:	andne	r0, sl, #1
   14818:	moveq	r0, #0
   1481c:	cmp	r0, #0
   14820:	bne	14bcc <__assert_fail@plt+0x2b98>
   14824:	ldr	r2, [r7, #4]
   14828:	cmp	r2, #0
   1482c:	beq	14884 <__assert_fail@plt+0x2850>
   14830:	ldrb	ip, [r2]
   14834:	cmp	ip, #45	; 0x2d
   14838:	bne	148a8 <__assert_fail@plt+0x2874>
   1483c:	ldrb	ip, [r2, #1]
   14840:	cmp	ip, #0
   14844:	beq	148a8 <__assert_fail@plt+0x2874>
   14848:	tst	r1, #8
   1484c:	beq	148a8 <__assert_fail@plt+0x2874>
   14850:	str	r0, [r4, #20]
   14854:	mov	r1, fp
   14858:	mov	r2, r3
   1485c:	b	147b8 <__assert_fail@plt+0x2784>
   14860:	mov	r6, r2
   14864:	b	14718 <__assert_fail@plt+0x26e4>
   14868:	add	r6, r6, #1
   1486c:	str	r6, [r4, #32]
   14870:	str	r2, [r4, #20]
   14874:	b	14794 <__assert_fail@plt+0x2760>
   14878:	ldr	r2, [sp, #12]
   1487c:	ldrb	r1, [r2]
   14880:	b	14764 <__assert_fail@plt+0x2730>
   14884:	tst	r1, #8
   14888:	mvneq	r0, #2
   1488c:	strne	r2, [r4, #20]
   14890:	movne	r1, fp
   14894:	movne	r2, r3
   14898:	moveq	r1, fp
   1489c:	moveq	r2, r3
   148a0:	streq	r0, [r4, #16]
   148a4:	b	147b8 <__assert_fail@plt+0x2784>
   148a8:	mov	r0, r4
   148ac:	bl	1386c <__assert_fail@plt+0x1838>
   148b0:	sub	r8, r8, #1
   148b4:	add	r7, r7, #4
   148b8:	add	r9, r9, #1
   148bc:	ldm	r4, {r1, r2}
   148c0:	b	147b8 <__assert_fail@plt+0x2784>
   148c4:	add	r6, r5, #2
   148c8:	mov	r0, r6
   148cc:	mov	r1, #61	; 0x3d
   148d0:	str	r3, [sp, #20]
   148d4:	bl	11da0 <strchr@plt>
   148d8:	subs	r3, r0, #0
   148dc:	str	r3, [sp, #12]
   148e0:	ldr	r3, [sp, #20]
   148e4:	bne	149ec <__assert_fail@plt+0x29b8>
   148e8:	ldr	r2, [sp, #16]
   148ec:	ldr	r2, [r2]
   148f0:	cmp	r2, #0
   148f4:	str	r2, [sp, #20]
   148f8:	beq	149a4 <__assert_fail@plt+0x2970>
   148fc:	ldr	fp, [sp, #16]
   14900:	add	r5, fp, #4
   14904:	ldr	r0, [r5, sl, lsl #4]
   14908:	cmp	r0, #0
   1490c:	beq	14920 <__assert_fail@plt+0x28ec>
   14910:	mov	r1, r6
   14914:	bl	11aac <strcmp@plt>
   14918:	cmp	r0, #0
   1491c:	beq	14ae8 <__assert_fail@plt+0x2ab4>
   14920:	add	sl, sl, #1
   14924:	ldr	r3, [fp, sl, lsl #4]
   14928:	cmp	r3, #0
   1492c:	bne	14904 <__assert_fail@plt+0x28d0>
   14930:	mov	r0, r6
   14934:	mov	fp, r3
   14938:	bl	11d88 <strlen@plt>
   1493c:	str	r4, [sp, #24]
   14940:	ldr	r5, [sp, #16]
   14944:	ldr	r4, [sp, #20]
   14948:	mov	sl, r0
   1494c:	str	r0, [sp, #28]
   14950:	ldr	r0, [r5, #4]
   14954:	cmp	r0, #0
   14958:	beq	14970 <__assert_fail@plt+0x293c>
   1495c:	mov	r2, sl
   14960:	mov	r1, r6
   14964:	bl	11fe0 <strncmp@plt>
   14968:	cmp	r0, #0
   1496c:	beq	14a2c <__assert_fail@plt+0x29f8>
   14970:	ldr	r4, [r5, #16]!
   14974:	add	fp, fp, #1
   14978:	cmp	r4, #0
   1497c:	bne	14950 <__assert_fail@plt+0x291c>
   14980:	ldr	r3, [sp, #12]
   14984:	ldr	r4, [sp, #24]
   14988:	cmp	r3, #0
   1498c:	beq	1499c <__assert_fail@plt+0x2968>
   14990:	ldr	r2, [sp, #12]
   14994:	mov	r3, #61	; 0x3d
   14998:	strb	r3, [r2]
   1499c:	ldr	fp, [r4]
   149a0:	ldr	r3, [r4, #4]
   149a4:	mvn	r2, #1
   149a8:	str	r6, [r4, #24]
   149ac:	str	r2, [r4, #16]
   149b0:	sub	r8, r8, #1
   149b4:	add	r7, r7, #4
   149b8:	add	r9, r9, #1
   149bc:	mov	r1, fp
   149c0:	mov	r2, r3
   149c4:	b	14590 <__assert_fail@plt+0x255c>
   149c8:	add	r6, r5, #2
   149cc:	mov	r0, r6
   149d0:	mov	r1, #61	; 0x3d
   149d4:	str	r3, [sp, #20]
   149d8:	bl	11da0 <strchr@plt>
   149dc:	subs	r3, r0, #0
   149e0:	str	r3, [sp, #12]
   149e4:	ldr	r3, [sp, #20]
   149e8:	beq	149a4 <__assert_fail@plt+0x2970>
   149ec:	ldr	r2, [sp, #12]
   149f0:	mov	r3, #0
   149f4:	strb	r3, [r2]
   149f8:	ldrb	r3, [r5, #2]
   149fc:	cmp	r3, #0
   14a00:	moveq	r3, #61	; 0x3d
   14a04:	strbeq	r3, [r2]
   14a08:	ldreq	fp, [r4]
   14a0c:	ldreq	r3, [r4, #4]
   14a10:	beq	149a4 <__assert_fail@plt+0x2970>
   14a14:	ldr	r3, [sp, #16]
   14a18:	ldr	r3, [r3]
   14a1c:	cmp	r3, #0
   14a20:	str	r3, [sp, #20]
   14a24:	bne	148fc <__assert_fail@plt+0x28c8>
   14a28:	b	14990 <__assert_fail@plt+0x295c>
   14a2c:	ldr	r2, [sp, #16]
   14a30:	add	r3, fp, #1
   14a34:	mov	r0, r4
   14a38:	ldr	r1, [r2, r3, lsl #4]
   14a3c:	lsl	r3, r3, #4
   14a40:	cmp	r1, #0
   14a44:	ldr	r4, [sp, #24]
   14a48:	add	sl, r2, r3
   14a4c:	beq	14d28 <__assert_fail@plt+0x2cf4>
   14a50:	sub	r3, r3, #16
   14a54:	add	r3, r2, r3
   14a58:	sub	r2, r3, sl
   14a5c:	add	r2, r2, #32
   14a60:	str	r7, [sp, #20]
   14a64:	str	r8, [sp, #24]
   14a68:	str	r9, [sp, #32]
   14a6c:	str	fp, [sp, #36]	; 0x24
   14a70:	ldr	r9, [sp, #28]
   14a74:	mov	r7, r3
   14a78:	str	r4, [sp, #28]
   14a7c:	mov	fp, r0
   14a80:	mov	r4, r1
   14a84:	mov	r8, r2
   14a88:	ldr	r0, [sl, #4]
   14a8c:	cmp	r0, #0
   14a90:	beq	14ac0 <__assert_fail@plt+0x2a8c>
   14a94:	mov	r2, r9
   14a98:	mov	r1, r6
   14a9c:	bl	11fe0 <strncmp@plt>
   14aa0:	cmp	r0, #0
   14aa4:	bne	14ac0 <__assert_fail@plt+0x2a8c>
   14aa8:	cmp	r4, fp
   14aac:	bne	14ca0 <__assert_fail@plt+0x2c6c>
   14ab0:	ldr	r2, [sl, #8]
   14ab4:	ldr	r3, [r5, #8]
   14ab8:	cmp	r2, r3
   14abc:	bne	14ca0 <__assert_fail@plt+0x2c6c>
   14ac0:	add	r7, r7, #16
   14ac4:	ldr	r4, [r7, #16]
   14ac8:	add	sl, sl, r8
   14acc:	cmp	r4, #0
   14ad0:	bne	14a88 <__assert_fail@plt+0x2a54>
   14ad4:	add	r4, sp, #28
   14ad8:	ldr	r7, [sp, #20]
   14adc:	ldm	r4, {r4, r9, fp}
   14ae0:	ldr	r8, [sp, #24]
   14ae4:	mov	sl, fp
   14ae8:	ldr	r2, [sp, #12]
   14aec:	cmp	r2, #0
   14af0:	movne	r3, #61	; 0x3d
   14af4:	strbne	r3, [r2]
   14af8:	cmp	sl, #0
   14afc:	beq	14b34 <__assert_fail@plt+0x2b00>
   14b00:	ldr	r3, [sp, #16]
   14b04:	ldr	r3, [r3, sl, lsl #4]
   14b08:	cmp	r3, #32768	; 0x8000
   14b0c:	beq	14d30 <__assert_fail@plt+0x2cfc>
   14b10:	ldr	r2, [pc, #568]	; 14d50 <__assert_fail@plt+0x2d1c>
   14b14:	cmp	r3, r2
   14b18:	beq	14b88 <__assert_fail@plt+0x2b54>
   14b1c:	ldr	r2, [pc, #560]	; 14d54 <__assert_fail@plt+0x2d20>
   14b20:	cmp	r3, r2
   14b24:	beq	14c7c <__assert_fail@plt+0x2c48>
   14b28:	ldr	r2, [pc, #552]	; 14d58 <__assert_fail@plt+0x2d24>
   14b2c:	cmp	r3, r2
   14b30:	beq	14bfc <__assert_fail@plt+0x2bc8>
   14b34:	ldr	r3, [sp, #16]
   14b38:	add	r2, r3, sl, lsl #4
   14b3c:	ldr	r3, [r3, sl, lsl #4]
   14b40:	ldr	r1, [r2, #8]
   14b44:	str	r3, [r4, #16]
   14b48:	tst	r1, #7
   14b4c:	beq	14ba0 <__assert_fail@plt+0x2b6c>
   14b50:	ldr	r3, [sp, #12]
   14b54:	cmp	r3, #0
   14b58:	beq	14cd4 <__assert_fail@plt+0x2ca0>
   14b5c:	ldrb	r3, [r3, #1]
   14b60:	cmp	r3, #0
   14b64:	beq	14c5c <__assert_fail@plt+0x2c28>
   14b68:	ldr	r3, [sp, #12]
   14b6c:	adds	r2, r3, #1
   14b70:	beq	14c5c <__assert_fail@plt+0x2c28>
   14b74:	mov	r0, r4
   14b78:	bl	1386c <__assert_fail@plt+0x1838>
   14b7c:	ldr	fp, [r4]
   14b80:	ldr	r3, [r4, #4]
   14b84:	b	149b0 <__assert_fail@plt+0x297c>
   14b88:	ldr	r3, [r4, #8]
   14b8c:	ands	r5, r3, #64	; 0x40
   14b90:	bne	14b34 <__assert_fail@plt+0x2b00>
   14b94:	bl	13be4 <__assert_fail@plt+0x1bb0>
   14b98:	mov	r0, r5
   14b9c:	bl	11d4c <exit@plt>
   14ba0:	ldr	r3, [sp, #12]
   14ba4:	cmp	r3, #0
   14ba8:	mvnne	r3, #5
   14bac:	ldreq	r2, [sp, #12]
   14bb0:	strne	r3, [r4, #20]
   14bb4:	ldrne	fp, [r4]
   14bb8:	ldrne	r3, [r4, #4]
   14bbc:	ldreq	fp, [r4]
   14bc0:	ldreq	r3, [r4, #4]
   14bc4:	streq	r2, [r4, #20]
   14bc8:	b	149b0 <__assert_fail@plt+0x297c>
   14bcc:	add	r2, r2, #1
   14bd0:	mov	r0, r4
   14bd4:	bl	1386c <__assert_fail@plt+0x1838>
   14bd8:	ldm	r4, {r1, r2}
   14bdc:	b	147b8 <__assert_fail@plt+0x2784>
   14be0:	ldrb	r1, [r5, #1]
   14be4:	mov	r6, r2
   14be8:	ldr	r0, [sp, #16]
   14bec:	b	14764 <__assert_fail@plt+0x2730>
   14bf0:	ldr	r0, [sp, #16]
   14bf4:	ldr	ip, [sp, #20]
   14bf8:	b	147f4 <__assert_fail@plt+0x27c0>
   14bfc:	ldr	r3, [sp, #16]
   14c00:	ldr	r3, [r3]
   14c04:	cmp	r3, #0
   14c08:	beq	14c54 <__assert_fail@plt+0x2c20>
   14c0c:	ldr	r6, [pc, #328]	; 14d5c <__assert_fail@plt+0x2d28>
   14c10:	ldr	r5, [pc, #328]	; 14d60 <__assert_fail@plt+0x2d2c>
   14c14:	ldr	r4, [sp, #16]
   14c18:	b	14c28 <__assert_fail@plt+0x2bf4>
   14c1c:	ldr	r3, [r4, #16]!
   14c20:	cmp	r3, #0
   14c24:	beq	14c54 <__assert_fail@plt+0x2c20>
   14c28:	ldr	r2, [r4, #4]
   14c2c:	cmp	r2, #0
   14c30:	beq	14c1c <__assert_fail@plt+0x2be8>
   14c34:	ldr	r3, [r4, #8]
   14c38:	ands	r0, r3, #64	; 0x40
   14c3c:	bne	14c1c <__assert_fail@plt+0x2be8>
   14c40:	str	r0, [sp]
   14c44:	mov	r3, r6
   14c48:	mov	r1, r5
   14c4c:	bl	13994 <__assert_fail@plt+0x1960>
   14c50:	b	14c1c <__assert_fail@plt+0x2be8>
   14c54:	mov	r0, #0
   14c58:	bl	11d4c <exit@plt>
   14c5c:	tst	r1, #8
   14c60:	movne	r3, #0
   14c64:	mvneq	r3, #2
   14c68:	strne	r3, [r4, #20]
   14c6c:	streq	r3, [r4, #16]
   14c70:	ldr	fp, [r4]
   14c74:	ldr	r3, [r4, #4]
   14c78:	b	149b0 <__assert_fail@plt+0x297c>
   14c7c:	mov	r0, #16
   14c80:	bl	13ac8 <__assert_fail@plt+0x1a94>
   14c84:	mov	r3, #0
   14c88:	ldr	r2, [pc, #204]	; 14d5c <__assert_fail@plt+0x2d28>
   14c8c:	mov	r1, r0
   14c90:	mov	r0, r3
   14c94:	bl	13994 <__assert_fail@plt+0x1960>
   14c98:	mov	r0, #0
   14c9c:	bl	11d4c <exit@plt>
   14ca0:	ldr	r2, [sp, #12]
   14ca4:	ldr	r4, [sp, #28]
   14ca8:	cmp	r2, #0
   14cac:	movne	r3, #61	; 0x3d
   14cb0:	strbne	r3, [r2]
   14cb4:	mvn	r3, #7
   14cb8:	str	r3, [r4, #16]
   14cbc:	ldr	r7, [sp, #20]
   14cc0:	ldr	r8, [sp, #24]
   14cc4:	ldr	r9, [sp, #32]
   14cc8:	ldr	fp, [r4]
   14ccc:	ldr	r3, [r4, #4]
   14cd0:	b	149b0 <__assert_fail@plt+0x297c>
   14cd4:	ldr	r2, [r7, #4]
   14cd8:	cmp	r2, #0
   14cdc:	beq	14c5c <__assert_fail@plt+0x2c28>
   14ce0:	ldrb	r3, [r2]
   14ce4:	cmp	r3, #45	; 0x2d
   14ce8:	beq	14d0c <__assert_fail@plt+0x2cd8>
   14cec:	mov	r0, r4
   14cf0:	bl	1386c <__assert_fail@plt+0x1838>
   14cf4:	sub	r8, r8, #1
   14cf8:	add	r7, r7, #4
   14cfc:	add	r9, r9, #1
   14d00:	ldr	fp, [r4]
   14d04:	ldr	r3, [r4, #4]
   14d08:	b	149b0 <__assert_fail@plt+0x297c>
   14d0c:	tst	r1, #8
   14d10:	beq	14cec <__assert_fail@plt+0x2cb8>
   14d14:	ldr	r3, [sp, #12]
   14d18:	ldr	fp, [r4]
   14d1c:	str	r3, [r4, #20]
   14d20:	ldr	r3, [r4, #4]
   14d24:	b	149b0 <__assert_fail@plt+0x297c>
   14d28:	mov	sl, fp
   14d2c:	b	14ae8 <__assert_fail@plt+0x2ab4>
   14d30:	ldr	r1, [r4, #8]
   14d34:	ldr	r0, [sp, #16]
   14d38:	bl	13d40 <__assert_fail@plt+0x1d0c>
   14d3c:	ldrdeq	ip, [r1], -r0
   14d40:	muleq	r1, r8, r0
   14d44:	andeq	ip, r1, r0, lsl #14
   14d48:	andeq	sp, r1, r0, lsr #1
   14d4c:	andeq	sp, r1, ip, lsr #1
   14d50:	andeq	r8, r0, r1
   14d54:	andeq	r8, r0, r2
   14d58:	andeq	r8, r0, r3
   14d5c:	andeq	ip, r1, r4, lsr #18
   14d60:	strheq	sp, [r1], -ip
   14d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d68:	cmp	r0, #0
   14d6c:	sub	sp, sp, #252	; 0xfc
   14d70:	stm	sp, {r0, r3}
   14d74:	ldr	r3, [pc, #2536]	; 15764 <__assert_fail@plt+0x3730>
   14d78:	ldr	r3, [r3]
   14d7c:	str	r3, [sp, #244]	; 0xf4
   14d80:	ldr	r3, [sp, #288]	; 0x120
   14d84:	str	r3, [sp, #8]
   14d88:	beq	15180 <__assert_fail@plt+0x314c>
   14d8c:	mov	fp, r2
   14d90:	ldr	r0, [sp, #4]
   14d94:	bl	13564 <__assert_fail@plt+0x1530>
   14d98:	ldr	r3, [fp]
   14d9c:	cmp	r3, #0
   14da0:	beq	150b8 <__assert_fail@plt+0x3084>
   14da4:	mov	sl, #0
   14da8:	mov	r3, #0
   14dac:	mov	r4, r3
   14db0:	mov	r6, r3
   14db4:	mov	r8, r3
   14db8:	str	r3, [sp, #20]
   14dbc:	str	r3, [sp, #16]
   14dc0:	str	r3, [sp, #12]
   14dc4:	cmp	sl, #0
   14dc8:	beq	14e34 <__assert_fail@plt+0x2e00>
   14dcc:	rsb	r3, sl, #3
   14dd0:	add	r2, sp, #248	; 0xf8
   14dd4:	add	r3, r2, r3, lsl #2
   14dd8:	sub	sl, sl, #1
   14ddc:	ldr	r9, [r3, #-216]	; 0xffffff28
   14de0:	cmn	r9, #1
   14de4:	cmpne	r9, #10
   14de8:	bne	14e4c <__assert_fail@plt+0x2e18>
   14dec:	cmn	r9, #1
   14df0:	ldrne	r3, [fp]
   14df4:	addne	r3, r3, #1
   14df8:	strne	r3, [fp]
   14dfc:	cmn	r4, #1
   14e00:	beq	15174 <__assert_fail@plt+0x3140>
   14e04:	cmp	r4, #2
   14e08:	beq	14ee8 <__assert_fail@plt+0x2eb4>
   14e0c:	cmp	r4, #3
   14e10:	beq	15194 <__assert_fail@plt+0x3160>
   14e14:	cmp	r4, #4
   14e18:	beq	151c8 <__assert_fail@plt+0x3194>
   14e1c:	cmn	r9, #1
   14e20:	beq	15260 <__assert_fail@plt+0x322c>
   14e24:	mov	r8, #0
   14e28:	cmp	sl, #0
   14e2c:	mov	r4, r8
   14e30:	bne	14dcc <__assert_fail@plt+0x2d98>
   14e34:	ldr	r0, [sp]
   14e38:	bl	11ff8 <getc@plt>
   14e3c:	mov	r9, r0
   14e40:	cmn	r9, #1
   14e44:	cmpne	r9, #10
   14e48:	beq	14dec <__assert_fail@plt+0x2db8>
   14e4c:	cmn	r4, #1
   14e50:	beq	14dc4 <__assert_fail@plt+0x2d90>
   14e54:	cmp	r4, #0
   14e58:	beq	14e8c <__assert_fail@plt+0x2e58>
   14e5c:	cmp	r4, #1
   14e60:	beq	14dc4 <__assert_fail@plt+0x2d90>
   14e64:	cmp	r4, #2
   14e68:	beq	14f68 <__assert_fail@plt+0x2f34>
   14e6c:	cmp	r4, #3
   14e70:	bne	15084 <__assert_fail@plt+0x3050>
   14e74:	bics	r3, r9, #127	; 0x7f
   14e78:	beq	15060 <__assert_fail@plt+0x302c>
   14e7c:	strb	r9, [sp, #44]	; 0x2c
   14e80:	mov	r8, #1
   14e84:	mov	r4, #4
   14e88:	b	14dc4 <__assert_fail@plt+0x2d90>
   14e8c:	bics	r4, r9, #127	; 0x7f
   14e90:	beq	14ec0 <__assert_fail@plt+0x2e8c>
   14e94:	cmp	r8, #98	; 0x62
   14e98:	addle	r3, sp, #248	; 0xf8
   14e9c:	ldrgt	r2, [sp, #4]
   14ea0:	addle	r3, r3, r8
   14ea4:	mvngt	r3, #3
   14ea8:	strgt	r3, [r2, #16]
   14eac:	mvngt	r4, #0
   14eb0:	strble	r9, [r3, #-204]	; 0xffffff34
   14eb4:	addle	r8, r8, #1
   14eb8:	movle	r4, #2
   14ebc:	b	14dc4 <__assert_fail@plt+0x2d90>
   14ec0:	bl	11d1c <__ctype_b_loc@plt>
   14ec4:	lsl	r3, r9, #1
   14ec8:	ldr	r2, [r0]
   14ecc:	ldrh	r3, [r2, r3]
   14ed0:	tst	r3, #8192	; 0x2000
   14ed4:	bne	14dc4 <__assert_fail@plt+0x2d90>
   14ed8:	cmp	r9, #35	; 0x23
   14edc:	bne	14e94 <__assert_fail@plt+0x2e60>
   14ee0:	mov	r4, #1
   14ee4:	b	14dc4 <__assert_fail@plt+0x2d90>
   14ee8:	ldr	r5, [sp, #8]
   14eec:	add	r3, sp, #248	; 0xf8
   14ef0:	mov	r6, #0
   14ef4:	ldr	r4, [r5]
   14ef8:	add	r8, r3, r8
   14efc:	cmp	r4, r6
   14f00:	strb	r6, [r8, #-204]	; 0xffffff34
   14f04:	beq	152dc <__assert_fail@plt+0x32a8>
   14f08:	ldr	r0, [r5, #4]
   14f0c:	cmp	r0, #0
   14f10:	beq	14f24 <__assert_fail@plt+0x2ef0>
   14f14:	add	r1, sp, #44	; 0x2c
   14f18:	bl	11aac <strcmp@plt>
   14f1c:	cmp	r0, #0
   14f20:	beq	14ff4 <__assert_fail@plt+0x2fc0>
   14f24:	ldr	r4, [r5, #16]!
   14f28:	add	r6, r6, #1
   14f2c:	cmp	r4, #0
   14f30:	bne	14f08 <__assert_fail@plt+0x2ed4>
   14f34:	ldr	r5, [r5, #8]
   14f38:	ldr	r3, [sp, #4]
   14f3c:	tst	r5, #64	; 0x40
   14f40:	str	r4, [r3, #16]
   14f44:	bne	14f60 <__assert_fail@plt+0x2f2c>
   14f48:	add	r8, sp, #44	; 0x2c
   14f4c:	mov	r0, r8
   14f50:	ldr	r1, [pc, #2064]	; 15768 <__assert_fail@plt+0x3734>
   14f54:	bl	11aac <strcmp@plt>
   14f58:	subs	r4, r0, #0
   14f5c:	bne	15020 <__assert_fail@plt+0x2fec>
   14f60:	mov	r8, r4
   14f64:	b	14dc4 <__assert_fail@plt+0x2d90>
   14f68:	bics	r5, r9, #127	; 0x7f
   14f6c:	bne	14e94 <__assert_fail@plt+0x2e60>
   14f70:	bl	11d1c <__ctype_b_loc@plt>
   14f74:	lsl	r3, r9, #1
   14f78:	ldr	r2, [r0]
   14f7c:	mov	r7, r0
   14f80:	ldrh	r3, [r2, r3]
   14f84:	tst	r3, #8192	; 0x2000
   14f88:	beq	14e94 <__assert_fail@plt+0x2e60>
   14f8c:	ldr	r4, [sp, #8]
   14f90:	add	r3, sp, #248	; 0xf8
   14f94:	add	r3, r3, r8
   14f98:	ldr	r8, [r4]
   14f9c:	strb	r5, [r3, #-204]	; 0xffffff34
   14fa0:	cmp	r8, #0
   14fa4:	beq	153e8 <__assert_fail@plt+0x33b4>
   14fa8:	ldr	r0, [r4, #4]
   14fac:	cmp	r0, #0
   14fb0:	beq	14fc4 <__assert_fail@plt+0x2f90>
   14fb4:	add	r1, sp, #44	; 0x2c
   14fb8:	bl	11aac <strcmp@plt>
   14fbc:	cmp	r0, #0
   14fc0:	beq	153bc <__assert_fail@plt+0x3388>
   14fc4:	ldr	r8, [r4, #16]!
   14fc8:	add	r5, r5, #1
   14fcc:	cmp	r8, #0
   14fd0:	bne	14fa8 <__assert_fail@plt+0x2f74>
   14fd4:	ldr	r6, [r4, #8]
   14fd8:	ldr	r3, [sp, #4]
   14fdc:	tst	r6, #64	; 0x40
   14fe0:	str	r8, [r3, #16]
   14fe4:	beq	15400 <__assert_fail@plt+0x33cc>
   14fe8:	mov	r6, r5
   14fec:	mov	r8, r5
   14ff0:	b	14ee0 <__assert_fail@plt+0x2eac>
   14ff4:	ldr	r2, [r5, #8]
   14ff8:	ldr	r3, [sp, #4]
   14ffc:	ands	r1, r2, #64	; 0x40
   15000:	mov	r8, r0
   15004:	str	r4, [r3, #16]
   15008:	bne	14e28 <__assert_fail@plt+0x2df4>
   1500c:	ands	r3, r2, #7
   15010:	bne	15628 <__assert_fail@plt+0x35f4>
   15014:	ldr	r2, [sp, #4]
   15018:	str	r3, [r2, #20]
   1501c:	b	15154 <__assert_fail@plt+0x3120>
   15020:	ldr	r3, [sp, #4]
   15024:	ldr	r7, [r3, #52]	; 0x34
   15028:	cmp	r7, #0
   1502c:	bne	15040 <__assert_fail@plt+0x300c>
   15030:	b	15140 <__assert_fail@plt+0x310c>
   15034:	ldr	r7, [r7]
   15038:	cmp	r7, #0
   1503c:	beq	15140 <__assert_fail@plt+0x310c>
   15040:	mov	r1, r8
   15044:	add	r0, r7, #4
   15048:	bl	11aac <strcmp@plt>
   1504c:	cmp	r0, #0
   15050:	bne	15034 <__assert_fail@plt+0x3000>
   15054:	mov	r4, r0
   15058:	mov	r8, r4
   1505c:	b	14dc4 <__assert_fail@plt+0x2d90>
   15060:	bl	11d1c <__ctype_b_loc@plt>
   15064:	lsl	r3, r9, #1
   15068:	ldr	r2, [r0]
   1506c:	ldrh	r3, [r2, r3]
   15070:	tst	r3, #8192	; 0x2000
   15074:	strbeq	r9, [sp, #44]	; 0x2c
   15078:	moveq	r8, #1
   1507c:	moveq	r4, #4
   15080:	b	14dc4 <__assert_fail@plt+0x2d90>
   15084:	cmp	r4, #4
   15088:	bne	14e94 <__assert_fail@plt+0x2e60>
   1508c:	ldr	r2, [sp, #12]
   15090:	mov	r5, r8
   15094:	cmp	r2, #0
   15098:	beq	152a8 <__assert_fail@plt+0x3274>
   1509c:	ldr	r3, [sp, #16]
   150a0:	sub	r3, r3, #1
   150a4:	cmp	r3, r8
   150a8:	bls	15110 <__assert_fail@plt+0x30dc>
   150ac:	add	r8, r8, #1
   150b0:	strb	r9, [r2, r5]
   150b4:	b	14dc4 <__assert_fail@plt+0x2d90>
   150b8:	ldr	r6, [sp]
   150bc:	mov	r0, r6
   150c0:	bl	11ff8 <getc@plt>
   150c4:	mov	r4, r0
   150c8:	mov	r0, r6
   150cc:	str	r4, [sp, #32]
   150d0:	bl	11ff8 <getc@plt>
   150d4:	mov	r5, r0
   150d8:	mov	r0, r6
   150dc:	str	r5, [sp, #36]	; 0x24
   150e0:	bl	11ff8 <getc@plt>
   150e4:	cmp	r5, #187	; 0xbb
   150e8:	cmpeq	r4, #239	; 0xef
   150ec:	movne	r4, #1
   150f0:	moveq	r4, #0
   150f4:	cmp	r0, #191	; 0xbf
   150f8:	orrne	r4, r4, #1
   150fc:	cmp	r4, #0
   15100:	str	r0, [sp, #40]	; 0x28
   15104:	movne	sl, #3
   15108:	bne	14da8 <__assert_fail@plt+0x2d74>
   1510c:	b	14da4 <__assert_fail@plt+0x2d70>
   15110:	ldr	r3, [sp, #16]
   15114:	ldr	r0, [sp, #12]
   15118:	add	r3, r3, #50	; 0x32
   1511c:	mov	r1, r3
   15120:	str	r3, [sp, #16]
   15124:	bl	11e84 <gcry_realloc@plt>
   15128:	cmp	r0, #0
   1512c:	beq	156f0 <__assert_fail@plt+0x36bc>
   15130:	add	r8, r8, #1
   15134:	strb	r9, [r0, r5]
   15138:	str	r0, [sp, #12]
   1513c:	b	14dc4 <__assert_fail@plt+0x2d90>
   15140:	ldr	r3, [sp, #4]
   15144:	tst	r5, #128	; 0x80
   15148:	mvnne	r4, #6
   1514c:	mvneq	r4, #1
   15150:	str	r4, [r3, #16]
   15154:	ldr	r3, [pc, #1544]	; 15764 <__assert_fail@plt+0x3730>
   15158:	ldr	r2, [sp, #244]	; 0xf4
   1515c:	mov	r0, r4
   15160:	ldr	r3, [r3]
   15164:	cmp	r2, r3
   15168:	bne	15730 <__assert_fail@plt+0x36fc>
   1516c:	add	sp, sp, #252	; 0xfc
   15170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15174:	ldr	r3, [sp, #4]
   15178:	ldr	r4, [r3, #16]
   1517c:	b	15154 <__assert_fail@plt+0x3120>
   15180:	mov	r1, r3
   15184:	ldr	r0, [sp, #4]
   15188:	bl	14348 <__assert_fail@plt+0x2314>
   1518c:	mov	r4, r0
   15190:	b	15154 <__assert_fail@plt+0x3120>
   15194:	ldr	r3, [sp, #20]
   15198:	cmp	r3, #0
   1519c:	bne	152cc <__assert_fail@plt+0x3298>
   151a0:	ldr	r3, [sp, #8]
   151a4:	add	r6, r3, r6, lsl #4
   151a8:	ldr	r3, [r6, #8]
   151ac:	tst	r3, #7
   151b0:	bne	152c4 <__assert_fail@plt+0x3290>
   151b4:	ldr	r2, [sp, #4]
   151b8:	mov	r3, #0
   151bc:	str	r3, [r2, #20]
   151c0:	ldr	r4, [r2, #16]
   151c4:	b	15154 <__assert_fail@plt+0x3120>
   151c8:	ldr	r3, [sp, #20]
   151cc:	cmp	r3, #0
   151d0:	beq	1523c <__assert_fail@plt+0x3208>
   151d4:	ldr	r3, [sp, #12]
   151d8:	cmp	r3, #0
   151dc:	beq	15250 <__assert_fail@plt+0x321c>
   151e0:	ldr	r3, [sp, #12]
   151e4:	mov	r6, #0
   151e8:	ldr	r1, [pc, #1404]	; 1576c <__assert_fail@plt+0x3738>
   151ec:	strb	r6, [r3, r8]
   151f0:	mov	r0, r3
   151f4:	bl	11f80 <strpbrk@plt>
   151f8:	subs	r5, r0, #0
   151fc:	beq	15224 <__assert_fail@plt+0x31f0>
   15200:	mov	r4, r5
   15204:	strb	r6, [r4], #1
   15208:	mov	r0, r4
   1520c:	bl	18f04 <__assert_fail@plt+0x6ed0>
   15210:	cmp	r4, r6
   15214:	beq	15224 <__assert_fail@plt+0x31f0>
   15218:	ldrb	r3, [r5, #1]
   1521c:	cmp	r3, r6
   15220:	bne	15174 <__assert_fail@plt+0x3140>
   15224:	ldr	r0, [sp, #12]
   15228:	bl	11b84 <gcry_free@plt>
   1522c:	ldr	r3, [sp, #4]
   15230:	mvn	r4, #9
   15234:	str	r4, [r3, #16]
   15238:	b	15154 <__assert_fail@plt+0x3120>
   1523c:	ldr	r3, [sp, #8]
   15240:	add	r6, r3, r6, lsl #4
   15244:	ldr	r3, [r6, #8]
   15248:	tst	r3, #7
   1524c:	bne	15330 <__assert_fail@plt+0x32fc>
   15250:	ldr	r3, [sp, #4]
   15254:	mvn	r4, #5
   15258:	str	r4, [r3, #16]
   1525c:	b	15154 <__assert_fail@plt+0x3120>
   15260:	ldr	r3, [sp, #4]
   15264:	ldr	r0, [r3, #52]	; 0x34
   15268:	cmp	r0, #0
   1526c:	beq	15280 <__assert_fail@plt+0x324c>
   15270:	ldr	r4, [r0]
   15274:	bl	11b84 <gcry_free@plt>
   15278:	subs	r0, r4, #0
   1527c:	bne	15270 <__assert_fail@plt+0x323c>
   15280:	ldm	sp, {r0, r2}
   15284:	mov	r3, #0
   15288:	str	r3, [r2, #52]	; 0x34
   1528c:	bl	11b54 <ferror@plt>
   15290:	subs	r4, r0, #0
   15294:	beq	15324 <__assert_fail@plt+0x32f0>
   15298:	ldr	r3, [sp, #4]
   1529c:	mvn	r4, #4
   152a0:	str	r4, [r3, #16]
   152a4:	b	15154 <__assert_fail@plt+0x3120>
   152a8:	cmp	r8, #98	; 0x62
   152ac:	bgt	15384 <__assert_fail@plt+0x3350>
   152b0:	add	r3, sp, #248	; 0xf8
   152b4:	add	r3, r3, r8
   152b8:	add	r8, r8, #1
   152bc:	strb	r9, [r3, #-204]	; 0xffffff34
   152c0:	b	14dc4 <__assert_fail@plt+0x2d90>
   152c4:	tst	r3, #8
   152c8:	bne	151b4 <__assert_fail@plt+0x3180>
   152cc:	ldr	r3, [sp, #4]
   152d0:	mvn	r4, #2
   152d4:	str	r4, [r3, #16]
   152d8:	b	15154 <__assert_fail@plt+0x3120>
   152dc:	ldr	r3, [sp, #8]
   152e0:	mov	r6, r4
   152e4:	ldr	r5, [r3, #8]
   152e8:	ldr	r3, [sp, #4]
   152ec:	tst	r5, #64	; 0x40
   152f0:	str	r4, [r3, #16]
   152f4:	beq	14f48 <__assert_fail@plt+0x2f14>
   152f8:	b	14f60 <__assert_fail@plt+0x2f2c>
   152fc:	add	r3, sp, #248	; 0xf8
   15300:	add	r8, r3, r8
   15304:	ldr	r3, [sp, #12]
   15308:	add	r0, sp, #44	; 0x2c
   1530c:	strb	r3, [r8, #-204]	; 0xffffff34
   15310:	bl	1201c <gcry_strdup@plt>
   15314:	subs	r3, r0, #0
   15318:	str	r3, [sp, #12]
   1531c:	bne	15348 <__assert_fail@plt+0x3314>
   15320:	mvn	r4, #10
   15324:	ldr	r3, [sp, #4]
   15328:	str	r4, [r3, #16]
   1532c:	b	15154 <__assert_fail@plt+0x3120>
   15330:	ldr	r3, [sp, #12]
   15334:	cmp	r3, #0
   15338:	beq	152fc <__assert_fail@plt+0x32c8>
   1533c:	ldr	r3, [sp, #12]
   15340:	ldr	r2, [sp, #20]
   15344:	strb	r2, [r3, r8]
   15348:	ldr	r4, [sp, #12]
   1534c:	mov	r0, r4
   15350:	bl	18f04 <__assert_fail@plt+0x6ed0>
   15354:	ldrb	r3, [r4]
   15358:	cmp	r3, #34	; 0x22
   1535c:	beq	15650 <__assert_fail@plt+0x361c>
   15360:	mov	r2, r4
   15364:	ldr	r4, [sp, #4]
   15368:	ldr	r1, [r6, #8]
   1536c:	mov	r0, r4
   15370:	bl	1386c <__assert_fail@plt+0x1838>
   15374:	cmp	r0, #0
   15378:	beq	1563c <__assert_fail@plt+0x3608>
   1537c:	ldr	r4, [r4, #16]
   15380:	b	15154 <__assert_fail@plt+0x3120>
   15384:	mov	r0, #150	; 0x96
   15388:	bl	11a7c <gcry_malloc@plt>
   1538c:	subs	r7, r0, #0
   15390:	str	r7, [sp, #12]
   15394:	beq	15320 <__assert_fail@plt+0x32ec>
   15398:	mov	r2, r8
   1539c:	add	r1, sp, #44	; 0x2c
   153a0:	mov	r0, r7
   153a4:	bl	11b6c <memcpy@plt>
   153a8:	mov	r3, #150	; 0x96
   153ac:	add	r8, r8, #1
   153b0:	str	r3, [sp, #16]
   153b4:	strb	r9, [r7, r5]
   153b8:	b	14dc4 <__assert_fail@plt+0x2d90>
   153bc:	ldr	r3, [r4, #8]
   153c0:	ldr	r2, [sp, #4]
   153c4:	tst	r3, #64	; 0x40
   153c8:	moveq	r6, r5
   153cc:	str	r8, [r2, #16]
   153d0:	moveq	r4, #3
   153d4:	mov	r8, r5
   153d8:	beq	14dc4 <__assert_fail@plt+0x2d90>
   153dc:	mov	r6, r8
   153e0:	mov	r4, #1
   153e4:	b	14dc4 <__assert_fail@plt+0x2d90>
   153e8:	ldr	r3, [sp, #8]
   153ec:	ldr	r6, [r3, #8]
   153f0:	ldr	r3, [sp, #4]
   153f4:	tst	r6, #64	; 0x40
   153f8:	str	r8, [r3, #16]
   153fc:	bne	153dc <__assert_fail@plt+0x33a8>
   15400:	add	r8, sp, #44	; 0x2c
   15404:	mov	r0, r8
   15408:	ldr	r1, [pc, #864]	; 15770 <__assert_fail@plt+0x373c>
   1540c:	bl	11aac <strcmp@plt>
   15410:	cmp	r0, #0
   15414:	beq	15610 <__assert_fail@plt+0x35dc>
   15418:	ldr	r1, [pc, #840]	; 15768 <__assert_fail@plt+0x3734>
   1541c:	mov	r0, r8
   15420:	bl	11aac <strcmp@plt>
   15424:	subs	r4, r0, #0
   15428:	bne	1569c <__assert_fail@plt+0x3668>
   1542c:	ldr	r0, [sp]
   15430:	bl	11ff8 <getc@plt>
   15434:	ldr	r8, [r7]
   15438:	str	r4, [sp, #28]
   1543c:	cmn	r0, #1
   15440:	cmpne	r0, #10
   15444:	moveq	r3, #1
   15448:	movne	r3, #0
   1544c:	cmp	r3, #0
   15450:	mov	r6, r0
   15454:	movne	r6, #10
   15458:	movne	r3, #1
   1545c:	moveq	r3, #0
   15460:	str	r3, [sp, #24]
   15464:	lsl	r3, r6, #1
   15468:	bics	r2, r6, #127	; 0x7f
   1546c:	ldrh	r3, [r8, r3]
   15470:	and	r3, r3, #8192	; 0x2000
   15474:	bne	155ec <__assert_fail@plt+0x35b8>
   15478:	cmp	r3, #0
   1547c:	bne	15530 <__assert_fail@plt+0x34fc>
   15480:	mov	r3, #1
   15484:	ldr	r4, [sp, #24]
   15488:	mov	r8, r3
   1548c:	mov	r0, r6
   15490:	add	r3, sp, #248	; 0xf8
   15494:	add	r2, r3, r2
   15498:	cmp	r4, #0
   1549c:	strb	r0, [r2, #-104]	; 0xffffff98
   154a0:	bne	15748 <__assert_fail@plt+0x3714>
   154a4:	ldr	r0, [sp]
   154a8:	bl	11ff8 <getc@plt>
   154ac:	cmn	r0, #1
   154b0:	cmpne	r0, #10
   154b4:	bne	15740 <__assert_fail@plt+0x370c>
   154b8:	mov	r3, #20
   154bc:	mov	r4, #1
   154c0:	mov	r0, #10
   154c4:	ldr	r2, [r7]
   154c8:	ldrh	r3, [r2, r3]
   154cc:	tst	r3, #8192	; 0x2000
   154d0:	bne	15564 <__assert_fail@plt+0x3530>
   154d4:	cmp	r8, #98	; 0x62
   154d8:	ble	15734 <__assert_fail@plt+0x3700>
   154dc:	cmp	r4, #0
   154e0:	mov	r9, r4
   154e4:	bne	15748 <__assert_fail@plt+0x3714>
   154e8:	ldr	r0, [sp]
   154ec:	bl	11ff8 <getc@plt>
   154f0:	cmn	r0, #1
   154f4:	cmpne	r0, #10
   154f8:	mov	r6, r0
   154fc:	bne	15688 <__assert_fail@plt+0x3654>
   15500:	mov	r6, #10
   15504:	mov	r3, #20
   15508:	mov	r0, r6
   1550c:	mov	r2, #1
   15510:	str	r2, [sp, #24]
   15514:	ldr	r8, [r7]
   15518:	ldrh	r3, [r8, r3]
   1551c:	tst	r3, #8192	; 0x2000
   15520:	beq	156fc <__assert_fail@plt+0x36c8>
   15524:	bics	r3, r0, #127	; 0x7f
   15528:	mov	r6, r0
   1552c:	bne	15578 <__assert_fail@plt+0x3544>
   15530:	ldr	r3, [sp, #24]
   15534:	cmp	r3, #0
   15538:	bne	15748 <__assert_fail@plt+0x3714>
   1553c:	ldr	r0, [sp]
   15540:	bl	11ff8 <getc@plt>
   15544:	ldr	r8, [r7]
   15548:	cmn	r0, #1
   1554c:	cmpne	r0, #10
   15550:	moveq	r3, #1
   15554:	mov	r6, r0
   15558:	streq	r3, [sp, #24]
   1555c:	moveq	r6, #10
   15560:	b	15464 <__assert_fail@plt+0x3430>
   15564:	mov	r3, r8
   15568:	mov	r6, r0
   1556c:	mov	r8, r2
   15570:	mov	r9, r3
   15574:	str	r4, [sp, #24]
   15578:	ldr	r3, [sp, #4]
   1557c:	ldr	r4, [r3, #52]	; 0x34
   15580:	add	r3, sp, #248	; 0xf8
   15584:	add	r2, r3, r9
   15588:	cmp	r4, #0
   1558c:	mov	r3, #0
   15590:	strb	r3, [r2, #-104]	; 0xffffff98
   15594:	beq	155b8 <__assert_fail@plt+0x3584>
   15598:	add	r1, sp, #144	; 0x90
   1559c:	add	r0, r4, #4
   155a0:	bl	11aac <strcmp@plt>
   155a4:	cmp	r0, #0
   155a8:	beq	15464 <__assert_fail@plt+0x3430>
   155ac:	ldr	r4, [r4]
   155b0:	cmp	r4, #0
   155b4:	bne	15598 <__assert_fail@plt+0x3564>
   155b8:	add	r0, r9, #8
   155bc:	bl	11a7c <gcry_malloc@plt>
   155c0:	subs	r8, r0, #0
   155c4:	beq	15320 <__assert_fail@plt+0x32ec>
   155c8:	add	r0, r8, #4
   155cc:	add	r1, sp, #144	; 0x90
   155d0:	bl	11c5c <strcpy@plt>
   155d4:	ldr	r2, [sp, #4]
   155d8:	ldr	r3, [r2, #52]	; 0x34
   155dc:	str	r8, [r2, #52]	; 0x34
   155e0:	str	r3, [r8]
   155e4:	ldr	r8, [r7]
   155e8:	b	15464 <__assert_fail@plt+0x3430>
   155ec:	cmp	r3, #0
   155f0:	movne	r9, #0
   155f4:	bne	15578 <__assert_fail@plt+0x3544>
   155f8:	mov	r2, r3
   155fc:	mov	r3, #1
   15600:	ldr	r4, [sp, #24]
   15604:	mov	r8, r3
   15608:	mov	r0, r6
   1560c:	b	15490 <__assert_fail@plt+0x345c>
   15610:	mov	r3, #1
   15614:	mov	r6, r5
   15618:	mov	r8, r5
   1561c:	str	r3, [sp, #20]
   15620:	mov	r4, #3
   15624:	b	14dc4 <__assert_fail@plt+0x2d90>
   15628:	tst	r2, #8
   1562c:	beq	152cc <__assert_fail@plt+0x3298>
   15630:	ldr	r3, [sp, #4]
   15634:	str	r1, [r3, #20]
   15638:	b	15154 <__assert_fail@plt+0x3120>
   1563c:	ldr	r0, [sp, #12]
   15640:	bl	11b84 <gcry_free@plt>
   15644:	ldr	r3, [sp, #4]
   15648:	ldr	r4, [r3, #16]
   1564c:	b	15154 <__assert_fail@plt+0x3120>
   15650:	ldr	r5, [sp, #12]
   15654:	add	r4, r5, #1
   15658:	ldrb	r3, [r5, #1]
   1565c:	cmp	r3, #0
   15660:	beq	15360 <__assert_fail@plt+0x332c>
   15664:	mov	r0, r4
   15668:	bl	11d88 <strlen@plt>
   1566c:	ldrb	r3, [r5, r0]
   15670:	cmp	r3, #34	; 0x22
   15674:	moveq	r3, #0
   15678:	ldreq	r2, [sp, #12]
   1567c:	strbeq	r3, [r2, r0]
   15680:	b	15360 <__assert_fail@plt+0x332c>
   15684:	mov	r6, r0
   15688:	mov	r2, #0
   1568c:	lsl	r3, r6, #1
   15690:	str	r2, [sp, #24]
   15694:	mov	r0, r6
   15698:	b	15514 <__assert_fail@plt+0x34e0>
   1569c:	ldr	r3, [sp, #4]
   156a0:	ldr	r4, [r3, #52]	; 0x34
   156a4:	cmp	r4, #0
   156a8:	beq	156cc <__assert_fail@plt+0x3698>
   156ac:	mov	r1, r8
   156b0:	add	r0, r4, #4
   156b4:	bl	11aac <strcmp@plt>
   156b8:	cmp	r0, #0
   156bc:	beq	14fe8 <__assert_fail@plt+0x2fb4>
   156c0:	ldr	r4, [r4]
   156c4:	cmp	r4, #0
   156c8:	bne	156ac <__assert_fail@plt+0x3678>
   156cc:	ldr	r2, [sp, #4]
   156d0:	tst	r6, #128	; 0x80
   156d4:	mvnne	r3, #6
   156d8:	mvneq	r3, #1
   156dc:	mov	r6, r5
   156e0:	str	r3, [r2, #16]
   156e4:	mov	r8, r5
   156e8:	mvn	r4, #0
   156ec:	b	14dc4 <__assert_fail@plt+0x2d90>
   156f0:	ldr	r0, [sp, #12]
   156f4:	bl	11b84 <gcry_free@plt>
   156f8:	b	15320 <__assert_fail@plt+0x32ec>
   156fc:	ldr	r3, [sp, #24]
   15700:	cmp	r3, #0
   15704:	bne	15748 <__assert_fail@plt+0x3714>
   15708:	ldr	r0, [sp]
   1570c:	bl	11ff8 <getc@plt>
   15710:	mov	r3, #1
   15714:	str	r3, [sp, #24]
   15718:	mov	r3, #20
   1571c:	cmn	r0, #1
   15720:	cmpne	r0, #10
   15724:	bne	15684 <__assert_fail@plt+0x3650>
   15728:	mov	r0, #10
   1572c:	b	15514 <__assert_fail@plt+0x34e0>
   15730:	bl	11bc0 <__stack_chk_fail@plt>
   15734:	mov	r2, r8
   15738:	add	r8, r8, #1
   1573c:	b	15490 <__assert_fail@plt+0x345c>
   15740:	lsl	r3, r0, #1
   15744:	b	154c4 <__assert_fail@plt+0x3490>
   15748:	ldr	r3, [fp]
   1574c:	ldr	r4, [sp, #28]
   15750:	add	r3, r3, #1
   15754:	mov	r6, r5
   15758:	str	r3, [fp]
   1575c:	mov	r8, #0
   15760:	b	14dc4 <__assert_fail@plt+0x2d90>
   15764:	ldrdeq	lr, [r2], -r0
   15768:	andeq	sp, r1, r0, asr #1
   1576c:	ldrdeq	sp, [r1], -r8
   15770:	ldrdeq	sp, [r1], -ip
   15774:	push	{r4, r5, r6, lr}
   15778:	subs	r4, r0, #0
   1577c:	sub	sp, sp, #16
   15780:	beq	1579c <__assert_fail@plt+0x3768>
   15784:	cmp	r4, #1
   15788:	beq	15874 <__assert_fail@plt+0x3840>
   1578c:	cmp	r4, #2
   15790:	beq	157f8 <__assert_fail@plt+0x37c4>
   15794:	add	sp, sp, #16
   15798:	pop	{r4, r5, r6, pc}
   1579c:	mov	r0, #11
   157a0:	bl	13ac8 <__assert_fail@plt+0x1a94>
   157a4:	mov	r5, r0
   157a8:	mov	r0, #13
   157ac:	bl	13ac8 <__assert_fail@plt+0x1a94>
   157b0:	mov	r6, r0
   157b4:	mov	r0, #14
   157b8:	bl	13ac8 <__assert_fail@plt+0x1a94>
   157bc:	ldr	ip, [pc, #240]	; 158b4 <__assert_fail@plt+0x3880>
   157c0:	ldr	r2, [pc, #240]	; 158b8 <__assert_fail@plt+0x3884>
   157c4:	mov	r3, r6
   157c8:	str	r2, [sp]
   157cc:	mov	r1, r5
   157d0:	str	r4, [sp, #12]
   157d4:	str	ip, [sp, #8]
   157d8:	ldr	r2, [pc, #220]	; 158bc <__assert_fail@plt+0x3888>
   157dc:	str	r0, [sp, #4]
   157e0:	mov	r0, #1
   157e4:	bl	13994 <__assert_fail@plt+0x1960>
   157e8:	mov	r0, #1
   157ec:	add	sp, sp, #16
   157f0:	pop	{r4, r5, r6, lr}
   157f4:	b	13a74 <__assert_fail@plt+0x1a40>
   157f8:	mov	r0, #42	; 0x2a
   157fc:	bl	13ac8 <__assert_fail@plt+0x1a94>
   15800:	cmp	r0, #0
   15804:	beq	15814 <__assert_fail@plt+0x37e0>
   15808:	ldrb	r3, [r0]
   1580c:	cmp	r3, #49	; 0x31
   15810:	beq	15838 <__assert_fail@plt+0x3804>
   15814:	mov	r0, #41	; 0x29
   15818:	bl	13ac8 <__assert_fail@plt+0x1a94>
   1581c:	mov	r3, #0
   15820:	ldr	r2, [pc, #140]	; 158b4 <__assert_fail@plt+0x3880>
   15824:	mov	r1, r0
   15828:	mov	r0, r3
   1582c:	bl	13994 <__assert_fail@plt+0x1960>
   15830:	mov	r0, #0
   15834:	bl	11d4c <exit@plt>
   15838:	mov	r0, #40	; 0x28
   1583c:	bl	13ac8 <__assert_fail@plt+0x1a94>
   15840:	mov	r2, #0
   15844:	mov	r4, r0
   15848:	mov	r1, r0
   1584c:	mov	r0, #1
   15850:	bl	13994 <__assert_fail@plt+0x1960>
   15854:	ldrb	r3, [r4]
   15858:	cmp	r3, #0
   1585c:	beq	15814 <__assert_fail@plt+0x37e0>
   15860:	mov	r2, #0
   15864:	ldr	r1, [pc, #72]	; 158b4 <__assert_fail@plt+0x3880>
   15868:	mov	r0, #1
   1586c:	bl	13994 <__assert_fail@plt+0x1960>
   15870:	b	15814 <__assert_fail@plt+0x37e0>
   15874:	mov	r0, #40	; 0x28
   15878:	bl	13ac8 <__assert_fail@plt+0x1a94>
   1587c:	mov	r2, #0
   15880:	mov	r5, r0
   15884:	mov	r1, r0
   15888:	mov	r0, r4
   1588c:	bl	13994 <__assert_fail@plt+0x1960>
   15890:	ldrb	r3, [r5]
   15894:	cmp	r3, #0
   15898:	beq	158ac <__assert_fail@plt+0x3878>
   1589c:	mov	r0, r4
   158a0:	mov	r2, #0
   158a4:	ldr	r1, [pc, #8]	; 158b4 <__assert_fail@plt+0x3880>
   158a8:	bl	13994 <__assert_fail@plt+0x1960>
   158ac:	mov	r0, #2
   158b0:	bl	11d4c <exit@plt>
   158b4:	andeq	ip, r1, r4, lsr #18
   158b8:	andeq	sp, r1, r4, ror #1
   158bc:	andeq	sp, r1, r8, ror r1
   158c0:	ldr	r3, [pc, #4]	; 158cc <__assert_fail@plt+0x3898>
   158c4:	str	r0, [r3, #4]
   158c8:	bx	lr
   158cc:	strdeq	pc, [r2], -r4
   158d0:	push	{r4, lr}
   158d4:	mov	r4, r0
   158d8:	ldr	r0, [r0]
   158dc:	cmp	r0, #2
   158e0:	cmnne	r0, #1
   158e4:	bne	15904 <__assert_fail@plt+0x38d0>
   158e8:	mov	r0, r4
   158ec:	bl	11b84 <gcry_free@plt>
   158f0:	ldr	r3, [pc, #20]	; 1590c <__assert_fail@plt+0x38d8>
   158f4:	mvn	r2, #0
   158f8:	mov	r0, #0
   158fc:	str	r2, [r3]
   15900:	pop	{r4, pc}
   15904:	bl	12010 <close@plt>
   15908:	b	158e8 <__assert_fail@plt+0x38b4>
   1590c:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   15910:	push	{r4, r5, r6, r7, r8, r9, lr}
   15914:	mov	r6, r0
   15918:	ldr	r7, [pc, #504]	; 15b18 <__assert_fail@plt+0x3ae4>
   1591c:	sub	sp, sp, #28
   15920:	mov	r4, r1
   15924:	ldr	r3, [r7]
   15928:	cmp	r3, #0
   1592c:	beq	15954 <__assert_fail@plt+0x3920>
   15930:	mov	r0, #2
   15934:	bl	11d28 <_gpgrt_get_std_stream@plt>
   15938:	ldr	r3, [r7]
   1593c:	cmp	r3, r0
   15940:	beq	1594c <__assert_fail@plt+0x3918>
   15944:	mov	r0, r3
   15948:	bl	11c74 <gpgrt_fclose@plt>
   1594c:	mov	r3, #0
   15950:	str	r3, [r7]
   15954:	cmp	r6, #0
   15958:	beq	15ae0 <__assert_fail@plt+0x3aac>
   1595c:	ldr	r1, [pc, #440]	; 15b1c <__assert_fail@plt+0x3ae8>
   15960:	mov	r0, r6
   15964:	bl	11aac <strcmp@plt>
   15968:	cmp	r0, #0
   1596c:	beq	15ad0 <__assert_fail@plt+0x3a9c>
   15970:	mov	r2, #6
   15974:	ldr	r1, [pc, #420]	; 15b20 <__assert_fail@plt+0x3aec>
   15978:	mov	r0, r6
   1597c:	bl	11fe0 <strncmp@plt>
   15980:	mov	r4, r0
   15984:	mov	r0, r6
   15988:	bl	11d88 <strlen@plt>
   1598c:	cmp	r4, #0
   15990:	add	r4, r0, #20
   15994:	bne	15a48 <__assert_fail@plt+0x3a14>
   15998:	ldrb	r3, [r6, #6]
   1599c:	cmp	r3, #0
   159a0:	beq	15a48 <__assert_fail@plt+0x3a14>
   159a4:	mov	r8, #1
   159a8:	mov	r0, r4
   159ac:	bl	11a58 <gcry_xmalloc@plt>
   159b0:	mov	r1, r6
   159b4:	mvn	r4, #0
   159b8:	mov	r5, r0
   159bc:	add	r0, r0, #16
   159c0:	bl	11c5c <strcpy@plt>
   159c4:	mov	r3, #0
   159c8:	str	r3, [r5, #12]
   159cc:	stmib	r5, {r3, r8}
   159d0:	str	r4, [r5]
   159d4:	ldr	r1, [pc, #328]	; 15b24 <__assert_fail@plt+0x3af0>
   159d8:	mov	r2, #0
   159dc:	str	r1, [sp, #20]
   159e0:	add	r1, sp, #24
   159e4:	str	r2, [sp, #16]
   159e8:	ldmdb	r1, {r0, r1}
   159ec:	ldr	ip, [pc, #308]	; 15b28 <__assert_fail@plt+0x3af4>
   159f0:	str	r2, [sp, #8]
   159f4:	add	r3, sp, #8
   159f8:	ldr	r2, [pc, #300]	; 15b2c <__assert_fail@plt+0x3af8>
   159fc:	stm	sp, {r0, r1}
   15a00:	str	r2, [sp, #12]
   15a04:	mov	r0, r5
   15a08:	ldm	r3, {r2, r3}
   15a0c:	ldr	r1, [pc, #284]	; 15b30 <__assert_fail@plt+0x3afc>
   15a10:	str	r4, [ip]
   15a14:	bl	11f2c <gpgrt_fopencookie@plt>
   15a18:	subs	r4, r0, #0
   15a1c:	beq	15b08 <__assert_fail@plt+0x3ad4>
   15a20:	mov	r3, #0
   15a24:	mov	r1, r3
   15a28:	mov	r2, #1
   15a2c:	mov	r0, r4
   15a30:	bl	11c80 <gpgrt_setvbuf@plt>
   15a34:	mov	r3, #0
   15a38:	stm	r7, {r4, r8}
   15a3c:	str	r3, [r7, #8]
   15a40:	add	sp, sp, #28
   15a44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15a48:	mov	r2, #9
   15a4c:	ldr	r1, [pc, #224]	; 15b34 <__assert_fail@plt+0x3b00>
   15a50:	mov	r0, r6
   15a54:	bl	11fe0 <strncmp@plt>
   15a58:	cmp	r0, #0
   15a5c:	moveq	r8, #2
   15a60:	beq	159a8 <__assert_fail@plt+0x3974>
   15a64:	mov	r0, r4
   15a68:	bl	11a58 <gcry_xmalloc@plt>
   15a6c:	mov	r1, r6
   15a70:	ldr	r9, [pc, #192]	; 15b38 <__assert_fail@plt+0x3b04>
   15a74:	ldr	r8, [pc, #192]	; 15b3c <__assert_fail@plt+0x3b08>
   15a78:	mov	r5, r0
   15a7c:	add	r0, r0, #16
   15a80:	bl	11c5c <strcpy@plt>
   15a84:	mov	r3, #0
   15a88:	str	r3, [r5, #4]
   15a8c:	str	r3, [r5, #12]
   15a90:	str	r3, [r5, #8]
   15a94:	b	15aa8 <__assert_fail@plt+0x3a74>
   15a98:	bl	11ddc <__errno_location@plt>
   15a9c:	ldr	r3, [r0]
   15aa0:	cmp	r3, #4
   15aa4:	bne	15ac8 <__assert_fail@plt+0x3a94>
   15aa8:	mov	r2, r9
   15aac:	mov	r1, r8
   15ab0:	mov	r0, r6
   15ab4:	bl	11c8c <open64@plt>
   15ab8:	cmn	r0, #1
   15abc:	mov	r4, r0
   15ac0:	str	r0, [r5]
   15ac4:	beq	15a98 <__assert_fail@plt+0x3a64>
   15ac8:	mov	r8, #0
   15acc:	b	159d4 <__assert_fail@plt+0x39a0>
   15ad0:	mov	r0, #2
   15ad4:	bl	11d28 <_gpgrt_get_std_stream@plt>
   15ad8:	bl	12004 <gpgrt_fileno@plt>
   15adc:	mov	r4, r0
   15ae0:	mov	r0, #20
   15ae4:	bl	11a58 <gcry_xmalloc@plt>
   15ae8:	mov	r8, #0
   15aec:	mov	r5, r0
   15af0:	str	r4, [r0]
   15af4:	strb	r8, [r0, #16]
   15af8:	str	r8, [r0, #4]
   15afc:	str	r8, [r0, #12]
   15b00:	str	r8, [r0, #8]
   15b04:	b	159d4 <__assert_fail@plt+0x39a0>
   15b08:	mov	r0, #2
   15b0c:	bl	11d28 <_gpgrt_get_std_stream@plt>
   15b10:	mov	r4, r0
   15b14:	b	15a20 <__assert_fail@plt+0x39ec>
   15b18:	strdeq	pc, [r2], -ip
   15b1c:	andeq	ip, r1, ip, lsl #12
   15b20:	andeq	sp, r1, r4, lsl #2
   15b24:	ldrdeq	r5, [r1], -r0
   15b28:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   15b2c:	andeq	r6, r1, ip, lsr r2
   15b30:	andeq	sp, r1, ip, lsl #2
   15b34:	andeq	sp, r1, r0, lsl r1
   15b38:			; <UNDEFINED> instruction: 0x000001b6
   15b3c:	andeq	r0, r0, r1, asr #8
   15b40:	push	{r4, r5, r6, r7, r8, r9, lr}
   15b44:	sub	sp, sp, #28
   15b48:	ldr	r6, [pc, #688]	; 15e00 <__assert_fail@plt+0x3dcc>
   15b4c:	cmp	r0, #1
   15b50:	ldr	r3, [r6]
   15b54:	str	r3, [sp, #20]
   15b58:	beq	15c30 <__assert_fail@plt+0x3bfc>
   15b5c:	ldr	r4, [pc, #672]	; 15e04 <__assert_fail@plt+0x3dd0>
   15b60:	mov	r5, r0
   15b64:	mov	r7, r1
   15b68:	ldr	r3, [r4, #12]
   15b6c:	ldr	r0, [r4, #4]
   15b70:	cmp	r3, #0
   15b74:	bne	15c48 <__assert_fail@plt+0x3c14>
   15b78:	ldr	r3, [r4, #16]
   15b7c:	orrs	r0, r0, r3
   15b80:	bne	15de0 <__assert_fail@plt+0x3dac>
   15b84:	ldr	r3, [r4, #100]	; 0x64
   15b88:	orrs	r3, r0, r3
   15b8c:	bne	15c70 <__assert_fail@plt+0x3c3c>
   15b90:	ldr	r3, [r4, #12]
   15b94:	cmp	r3, #0
   15b98:	beq	15cc8 <__assert_fail@plt+0x3c94>
   15b9c:	cmp	r7, #0
   15ba0:	bne	15bf8 <__assert_fail@plt+0x3bc4>
   15ba4:	ldr	r2, [r4, #16]
   15ba8:	ldr	r3, [r4, #12]
   15bac:	ldr	r1, [r4, #100]	; 0x64
   15bb0:	orr	r3, r3, r2
   15bb4:	ldr	r2, [r4, #4]
   15bb8:	orr	r3, r3, r1
   15bbc:	orrs	r3, r3, r2
   15bc0:	beq	15bf8 <__assert_fail@plt+0x3bc4>
   15bc4:	ldr	r1, [r4]
   15bc8:	ldrb	r3, [r1, #2]
   15bcc:	tst	r3, #1
   15bd0:	beq	15d2c <__assert_fail@plt+0x3cf8>
   15bd4:	ldr	r3, [r1, #16]
   15bd8:	ldr	r2, [r1, #8]
   15bdc:	cmp	r3, r2
   15be0:	bcs	15d2c <__assert_fail@plt+0x3cf8>
   15be4:	ldr	r2, [r1, #4]
   15be8:	add	r0, r3, #1
   15bec:	str	r0, [r1, #16]
   15bf0:	mov	r1, #32
   15bf4:	strb	r1, [r2, r3]
   15bf8:	cmp	r5, #7
   15bfc:	ldrls	pc, [pc, r5, lsl #2]
   15c00:	b	15dec <__assert_fail@plt+0x3db8>
   15c04:	andeq	r5, r1, r0, lsr ip
   15c08:	andeq	r5, r1, r0, lsr ip
   15c0c:	andeq	r5, r1, r0, lsr ip
   15c10:	andeq	r5, r1, r0, lsr ip
   15c14:	andeq	r5, r1, r0, lsr ip
   15c18:	andeq	r5, r1, ip, lsl #26
   15c1c:	andeq	r5, r1, ip, lsl sp
   15c20:	andeq	r5, r1, r4, lsr #24
   15c24:	ldr	r1, [r4]
   15c28:	ldr	r0, [pc, #472]	; 15e08 <__assert_fail@plt+0x3dd4>
   15c2c:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   15c30:	ldr	r2, [sp, #20]
   15c34:	ldr	r3, [r6]
   15c38:	cmp	r2, r3
   15c3c:	bne	15de8 <__assert_fail@plt+0x3db4>
   15c40:	add	sp, sp, #28
   15c44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15c48:	cmp	r0, #0
   15c4c:	ldr	r8, [r4]
   15c50:	beq	15d7c <__assert_fail@plt+0x3d48>
   15c54:	mov	r1, r8
   15c58:	ldr	r0, [pc, #428]	; 15e0c <__assert_fail@plt+0x3dd8>
   15c5c:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   15c60:	ldr	r0, [r4, #4]
   15c64:	ldr	r3, [r4, #100]	; 0x64
   15c68:	orrs	r3, r0, r3
   15c6c:	beq	15b90 <__assert_fail@plt+0x3b5c>
   15c70:	ldr	r3, [r4, #104]	; 0x68
   15c74:	cmp	r3, #0
   15c78:	beq	15d60 <__assert_fail@plt+0x3d2c>
   15c7c:	add	r0, sp, #16
   15c80:	blx	r3
   15c84:	cmp	r0, #0
   15c88:	beq	15d60 <__assert_fail@plt+0x3d2c>
   15c8c:	ldr	r1, [pc, #380]	; 15e10 <__assert_fail@plt+0x3ddc>
   15c90:	cmp	r0, #1
   15c94:	ldr	r8, [pc, #376]	; 15e14 <__assert_fail@plt+0x3de0>
   15c98:	ldr	r9, [r4]
   15c9c:	movne	r8, r1
   15ca0:	bl	11d40 <getpid@plt>
   15ca4:	mov	r1, r8
   15ca8:	ldr	r3, [sp, #16]
   15cac:	mov	r2, r0
   15cb0:	mov	r0, r9
   15cb4:	bl	11d64 <gpgrt_fprintf_unlocked@plt>
   15cb8:	ldr	r3, [r4, #12]
   15cbc:	cmp	r3, #0
   15cc0:	bne	15d38 <__assert_fail@plt+0x3d04>
   15cc4:	ldr	r3, [r4, #100]	; 0x64
   15cc8:	ldr	r2, [r4, #16]
   15ccc:	orrs	r3, r3, r2
   15cd0:	beq	15d38 <__assert_fail@plt+0x3d04>
   15cd4:	ldr	r1, [r4]
   15cd8:	ldrb	r3, [r1, #2]
   15cdc:	tst	r3, #1
   15ce0:	beq	15d54 <__assert_fail@plt+0x3d20>
   15ce4:	ldr	r3, [r1, #16]
   15ce8:	ldr	r2, [r1, #8]
   15cec:	cmp	r3, r2
   15cf0:	bcs	15d54 <__assert_fail@plt+0x3d20>
   15cf4:	ldr	r2, [r1, #4]
   15cf8:	add	r0, r3, #1
   15cfc:	str	r0, [r1, #16]
   15d00:	mov	r1, #58	; 0x3a
   15d04:	strb	r1, [r2, r3]
   15d08:	b	15b9c <__assert_fail@plt+0x3b68>
   15d0c:	ldr	r1, [r4]
   15d10:	ldr	r0, [pc, #256]	; 15e18 <__assert_fail@plt+0x3de4>
   15d14:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   15d18:	b	15c30 <__assert_fail@plt+0x3bfc>
   15d1c:	ldr	r1, [r4]
   15d20:	ldr	r0, [pc, #244]	; 15e1c <__assert_fail@plt+0x3de8>
   15d24:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   15d28:	b	15c30 <__assert_fail@plt+0x3bfc>
   15d2c:	mov	r0, #32
   15d30:	bl	11b3c <_gpgrt_putc_overflow@plt>
   15d34:	b	15bf8 <__assert_fail@plt+0x3bc4>
   15d38:	ldr	r3, [r4, #4]
   15d3c:	cmp	r3, #0
   15d40:	beq	15b9c <__assert_fail@plt+0x3b68>
   15d44:	ldr	r1, [r4]
   15d48:	ldrb	r3, [r1, #2]
   15d4c:	tst	r3, #1
   15d50:	bne	15ce4 <__assert_fail@plt+0x3cb0>
   15d54:	mov	r0, #58	; 0x3a
   15d58:	bl	11b3c <_gpgrt_putc_overflow@plt>
   15d5c:	b	15b9c <__assert_fail@plt+0x3b68>
   15d60:	ldr	r8, [r4]
   15d64:	bl	11d40 <getpid@plt>
   15d68:	ldr	r1, [pc, #176]	; 15e20 <__assert_fail@plt+0x3dec>
   15d6c:	mov	r2, r0
   15d70:	mov	r0, r8
   15d74:	bl	11d64 <gpgrt_fprintf_unlocked@plt>
   15d78:	b	15cb8 <__assert_fail@plt+0x3c84>
   15d7c:	bl	11b78 <time@plt>
   15d80:	str	r0, [sp, #16]
   15d84:	add	r0, sp, #16
   15d88:	bl	11ce0 <localtime@plt>
   15d8c:	mov	r1, r0
   15d90:	mov	r0, r8
   15d94:	ldr	ip, [r1]
   15d98:	ldr	r3, [r1, #16]
   15d9c:	ldr	r2, [r1, #20]
   15da0:	str	ip, [sp, #12]
   15da4:	ldr	ip, [r1, #4]
   15da8:	add	r2, r2, #1888	; 0x760
   15dac:	str	ip, [sp, #8]
   15db0:	ldr	ip, [r1, #8]
   15db4:	add	r3, r3, #1
   15db8:	str	ip, [sp, #4]
   15dbc:	ldr	r1, [r1, #12]
   15dc0:	add	r2, r2, #12
   15dc4:	str	r1, [sp]
   15dc8:	ldr	r1, [pc, #84]	; 15e24 <__assert_fail@plt+0x3df0>
   15dcc:	bl	11d64 <gpgrt_fprintf_unlocked@plt>
   15dd0:	ldr	r0, [r4, #4]
   15dd4:	ldr	r3, [r4, #16]
   15dd8:	orrs	r0, r0, r3
   15ddc:	beq	15b84 <__assert_fail@plt+0x3b50>
   15de0:	ldr	r8, [r4]
   15de4:	b	15c54 <__assert_fail@plt+0x3c20>
   15de8:	bl	11bc0 <__stack_chk_fail@plt>
   15dec:	mov	r2, r5
   15df0:	ldr	r0, [r4]
   15df4:	ldr	r1, [pc, #44]	; 15e28 <__assert_fail@plt+0x3df4>
   15df8:	bl	11d64 <gpgrt_fprintf_unlocked@plt>
   15dfc:	b	15c30 <__assert_fail@plt+0x3bfc>
   15e00:	ldrdeq	lr, [r2], -r0
   15e04:	strdeq	pc, [r2], -ip
   15e08:	andeq	sp, r1, r4, ror r1
   15e0c:	andeq	pc, r2, r0, lsl r1	; <UNPREDICTABLE>
   15e10:	andeq	sp, r1, r8, lsr #2
   15e14:	andeq	sp, r1, ip, lsl r1
   15e18:	andeq	sp, r1, ip, asr r1
   15e1c:	andeq	sp, r1, r4, ror #2
   15e20:	andeq	sp, r1, r4, asr r1
   15e24:	andeq	sp, r1, r4, lsr r1
   15e28:	andeq	sp, r1, ip, ror r1
   15e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e30:	sub	sp, sp, #20
   15e34:	mov	r5, r3
   15e38:	ldr	r8, [sp, #56]	; 0x38
   15e3c:	ldr	r4, [pc, #868]	; 161a8 <__assert_fail@plt+0x4174>
   15e40:	cmp	r8, #0
   15e44:	mov	sl, r0
   15e48:	ldrbne	r3, [r8]
   15e4c:	ldr	r0, [r4]
   15e50:	streq	r8, [sp, #12]
   15e54:	subne	r3, r3, #8
   15e58:	clzne	r3, r3
   15e5c:	lsrne	r3, r3, #5
   15e60:	strne	r3, [sp, #12]
   15e64:	cmp	r0, #0
   15e68:	mov	r7, r1
   15e6c:	mov	r6, r2
   15e70:	ldr	fp, [sp, #60]	; 0x3c
   15e74:	beq	16108 <__assert_fail@plt+0x40d4>
   15e78:	bl	11c68 <gpgrt_flockfile@plt>
   15e7c:	ldr	r3, [r4, #8]
   15e80:	cmp	r3, #0
   15e84:	cmpne	sl, #1
   15e88:	bne	16134 <__assert_fail@plt+0x4100>
   15e8c:	ldr	r9, [sp, #12]
   15e90:	mov	r3, #0
   15e94:	mov	r1, r9
   15e98:	mov	r0, sl
   15e9c:	str	r3, [r4, #8]
   15ea0:	bl	15b40 <__assert_fail@plt+0x3b0c>
   15ea4:	cmp	r9, #0
   15ea8:	addne	r8, r8, #1
   15eac:	cmp	r8, #0
   15eb0:	beq	16058 <__assert_fail@plt+0x4024>
   15eb4:	cmp	r5, #0
   15eb8:	ldr	r9, [r4]
   15ebc:	beq	15ed0 <__assert_fail@plt+0x3e9c>
   15ec0:	mov	r1, r9
   15ec4:	mov	r0, r5
   15ec8:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   15ecc:	ldr	r9, [r4]
   15ed0:	cmp	r7, #0
   15ed4:	beq	160f4 <__assert_fail@plt+0x40c0>
   15ed8:	ldr	fp, [pc, #716]	; 161ac <__assert_fail@plt+0x4178>
   15edc:	mov	r5, r8
   15ee0:	b	15f30 <__assert_fail@plt+0x3efc>
   15ee4:	cmp	r8, r5
   15ee8:	moveq	r2, #0
   15eec:	beq	15f0c <__assert_fail@plt+0x3ed8>
   15ef0:	ldr	r2, [r4, #16]
   15ef4:	ldr	r0, [r4, #4]
   15ef8:	orrs	r2, r2, r0
   15efc:	beq	15f0c <__assert_fail@plt+0x3ed8>
   15f00:	ldr	r0, [pc, #680]	; 161b0 <__assert_fail@plt+0x417c>
   15f04:	bl	11d88 <strlen@plt>
   15f08:	add	r2, r0, #2
   15f0c:	sub	r3, r7, r5
   15f10:	add	r3, r3, #1
   15f14:	mov	r0, r9
   15f18:	stm	sp, {r3, r5}
   15f1c:	ldr	r1, [pc, #656]	; 161b4 <__assert_fail@plt+0x4180>
   15f20:	mov	r3, fp
   15f24:	bl	11d64 <gpgrt_fprintf_unlocked@plt>
   15f28:	ldr	r9, [r4]
   15f2c:	add	r5, r7, #1
   15f30:	mov	r1, #10
   15f34:	mov	r0, r5
   15f38:	bl	11da0 <strchr@plt>
   15f3c:	subs	r7, r0, #0
   15f40:	bne	15ee4 <__assert_fail@plt+0x3eb0>
   15f44:	mov	r1, r9
   15f48:	mov	r0, r5
   15f4c:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   15f50:	ldrb	r3, [r8]
   15f54:	cmp	r3, #0
   15f58:	beq	16058 <__assert_fail@plt+0x4024>
   15f5c:	mov	r0, r8
   15f60:	bl	11d88 <strlen@plt>
   15f64:	add	r0, r8, r0
   15f68:	ldrb	r3, [r0, #-1]
   15f6c:	cmp	r3, #10
   15f70:	beq	16058 <__assert_fail@plt+0x4024>
   15f74:	mov	r3, #1
   15f78:	cmp	r6, #0
   15f7c:	str	r3, [r4, #8]
   15f80:	beq	16174 <__assert_fail@plt+0x4140>
   15f84:	ldr	r1, [r4]
   15f88:	mov	r0, #10
   15f8c:	bl	11b3c <_gpgrt_putc_overflow@plt>
   15f90:	mov	r3, #0
   15f94:	str	r3, [r4, #8]
   15f98:	ldr	r1, [sp, #12]
   15f9c:	mov	r0, sl
   15fa0:	bl	15b40 <__assert_fail@plt+0x3b0c>
   15fa4:	ldr	r1, [r4]
   15fa8:	ldr	r0, [pc, #520]	; 161b8 <__assert_fail@plt+0x4184>
   15fac:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   15fb0:	ldr	r9, [pc, #516]	; 161bc <__assert_fail@plt+0x4188>
   15fb4:	ldr	r1, [r4]
   15fb8:	ldr	fp, [pc, #504]	; 161b8 <__assert_fail@plt+0x4184>
   15fbc:	ldr	r8, [pc, #508]	; 161c0 <__assert_fail@plt+0x418c>
   15fc0:	ldr	r7, [pc, #508]	; 161c4 <__assert_fail@plt+0x4190>
   15fc4:	mov	r5, #1
   15fc8:	str	r5, [r4, #8]
   15fcc:	ldrb	r0, [r6], #1
   15fd0:	cmp	r0, #0
   15fd4:	beq	1602c <__assert_fail@plt+0x3ff8>
   15fd8:	cmp	r0, #92	; 0x5c
   15fdc:	str	r5, [r4, #8]
   15fe0:	beq	1607c <__assert_fail@plt+0x4048>
   15fe4:	cmp	r0, #13
   15fe8:	beq	1608c <__assert_fail@plt+0x4058>
   15fec:	cmp	r0, #10
   15ff0:	beq	1609c <__assert_fail@plt+0x4068>
   15ff4:	ldrb	r3, [r1, #2]
   15ff8:	tst	r3, #1
   15ffc:	beq	16070 <__assert_fail@plt+0x403c>
   16000:	ldr	r3, [r1, #16]
   16004:	ldr	r2, [r1, #8]
   16008:	cmp	r3, r2
   1600c:	bcs	16070 <__assert_fail@plt+0x403c>
   16010:	ldr	r2, [r1, #4]
   16014:	add	ip, r3, #1
   16018:	str	ip, [r1, #16]
   1601c:	strb	r0, [r2, r3]
   16020:	ldrb	r0, [r6], #1
   16024:	cmp	r0, #0
   16028:	bne	15fd8 <__assert_fail@plt+0x3fa4>
   1602c:	ldr	r2, [r4, #8]
   16030:	cmp	r2, #0
   16034:	bne	160d8 <__assert_fail@plt+0x40a4>
   16038:	cmp	sl, #5
   1603c:	beq	16164 <__assert_fail@plt+0x4130>
   16040:	cmp	sl, #6
   16044:	beq	16184 <__assert_fail@plt+0x4150>
   16048:	mov	r0, r1
   1604c:	add	sp, sp, #20
   16050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16054:	b	11a70 <gpgrt_funlockfile@plt>
   16058:	cmp	r6, #0
   1605c:	beq	16144 <__assert_fail@plt+0x4110>
   16060:	ldr	r3, [r4, #8]
   16064:	cmp	r3, #0
   16068:	beq	15f98 <__assert_fail@plt+0x3f64>
   1606c:	b	15f84 <__assert_fail@plt+0x3f50>
   16070:	bl	11b3c <_gpgrt_putc_overflow@plt>
   16074:	ldr	r1, [r4]
   16078:	b	15fcc <__assert_fail@plt+0x3f98>
   1607c:	mov	r0, r7
   16080:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   16084:	ldr	r1, [r4]
   16088:	b	15fcc <__assert_fail@plt+0x3f98>
   1608c:	mov	r0, r8
   16090:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   16094:	ldr	r1, [r4]
   16098:	b	15fcc <__assert_fail@plt+0x3f98>
   1609c:	mov	r0, r9
   160a0:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   160a4:	ldrb	r3, [r6]
   160a8:	cmp	r3, #0
   160ac:	streq	r3, [r4, #8]
   160b0:	ldreq	r1, [r4]
   160b4:	beq	15fcc <__assert_fail@plt+0x3f98>
   160b8:	ldr	r1, [sp, #12]
   160bc:	mov	r0, sl
   160c0:	bl	15b40 <__assert_fail@plt+0x3b0c>
   160c4:	ldr	r1, [r4]
   160c8:	mov	r0, fp
   160cc:	bl	11c2c <gpgrt_fputs_unlocked@plt>
   160d0:	ldr	r1, [r4]
   160d4:	b	15fcc <__assert_fail@plt+0x3f98>
   160d8:	str	r0, [sp, #12]
   160dc:	mov	r0, #10
   160e0:	bl	11b3c <_gpgrt_putc_overflow@plt>
   160e4:	ldr	r3, [sp, #12]
   160e8:	ldr	r1, [r4]
   160ec:	str	r3, [r4, #8]
   160f0:	b	16038 <__assert_fail@plt+0x4004>
   160f4:	mov	r2, fp
   160f8:	mov	r0, r9
   160fc:	mov	r1, r8
   16100:	bl	11ab8 <gpgrt_vfprintf_unlocked@plt>
   16104:	b	15f50 <__assert_fail@plt+0x3f1c>
   16108:	ldr	r0, [pc, #184]	; 161c8 <__assert_fail@plt+0x4194>
   1610c:	mvn	r1, #0
   16110:	bl	15910 <__assert_fail@plt+0x38dc>
   16114:	ldr	r0, [r4]
   16118:	cmp	r0, #0
   1611c:	bne	15e78 <__assert_fail@plt+0x3e44>
   16120:	ldr	r3, [pc, #164]	; 161cc <__assert_fail@plt+0x4198>
   16124:	ldr	r2, [pc, #164]	; 161d0 <__assert_fail@plt+0x419c>
   16128:	ldr	r1, [pc, #164]	; 161d4 <__assert_fail@plt+0x41a0>
   1612c:	ldr	r0, [pc, #164]	; 161d8 <__assert_fail@plt+0x41a4>
   16130:	bl	12034 <__assert_fail@plt>
   16134:	ldr	r1, [r4]
   16138:	mov	r0, #10
   1613c:	bl	11b3c <_gpgrt_putc_overflow@plt>
   16140:	b	15e8c <__assert_fail@plt+0x3e58>
   16144:	cmp	sl, #5
   16148:	ldr	r1, [r4]
   1614c:	bne	16040 <__assert_fail@plt+0x400c>
   16150:	ldr	r3, [r4, #8]
   16154:	cmp	r3, #0
   16158:	beq	16164 <__assert_fail@plt+0x4130>
   1615c:	mov	r0, #10
   16160:	bl	11b3c <_gpgrt_putc_overflow@plt>
   16164:	ldr	r0, [r4]
   16168:	bl	11a70 <gpgrt_funlockfile@plt>
   1616c:	mov	r0, #2
   16170:	bl	11d4c <exit@plt>
   16174:	cmp	sl, #5
   16178:	ldr	r1, [r4]
   1617c:	bne	16040 <__assert_fail@plt+0x400c>
   16180:	b	1615c <__assert_fail@plt+0x4128>
   16184:	ldr	r3, [r4, #8]
   16188:	cmp	r3, #0
   1618c:	bne	1619c <__assert_fail@plt+0x4168>
   16190:	ldr	r0, [r4]
   16194:	bl	11a70 <gpgrt_funlockfile@plt>
   16198:	bl	11fec <abort@plt>
   1619c:	mov	r0, #10
   161a0:	bl	11b3c <_gpgrt_putc_overflow@plt>
   161a4:	b	16190 <__assert_fail@plt+0x415c>
   161a8:	strdeq	pc, [r2], -ip
   161ac:	andeq	sp, r1, r4, asr #15
   161b0:	andeq	pc, r2, r0, lsl r1	; <UNPREDICTABLE>
   161b4:			; <UNDEFINED> instruction: 0x0001d1bc
   161b8:	andeq	sp, r1, r4, asr #3
   161bc:	ldrdeq	sp, [r1], -r0
   161c0:	andeq	sp, r1, ip, asr #3
   161c4:	andeq	sp, r1, r8, asr #3
   161c8:	andeq	ip, r1, ip, lsl #12
   161cc:	andeq	sp, r1, ip, ror #1
   161d0:	strdeq	r0, [r0], -r1
   161d4:	muleq	r1, r8, r1
   161d8:			; <UNDEFINED> instruction: 0x0001d1b0
   161dc:	push	{r1, r2, r3}
   161e0:	mov	r3, #0
   161e4:	push	{r4, lr}
   161e8:	sub	sp, sp, #20
   161ec:	ldr	r4, [pc, #68]	; 16238 <__assert_fail@plt+0x4204>
   161f0:	ldr	r2, [sp, #28]
   161f4:	add	ip, sp, #32
   161f8:	ldr	r1, [r4]
   161fc:	stm	sp, {r2, ip}
   16200:	str	r1, [sp, #12]
   16204:	mov	r2, r3
   16208:	mov	r1, #1
   1620c:	str	ip, [sp, #8]
   16210:	bl	15e2c <__assert_fail@plt+0x3df8>
   16214:	ldr	r2, [sp, #12]
   16218:	ldr	r3, [r4]
   1621c:	cmp	r2, r3
   16220:	bne	16234 <__assert_fail@plt+0x4200>
   16224:	add	sp, sp, #20
   16228:	pop	{r4, lr}
   1622c:	add	sp, sp, #12
   16230:	bx	lr
   16234:	bl	11bc0 <__stack_chk_fail@plt>
   16238:	ldrdeq	lr, [r2], -r0
   1623c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16240:	mov	r4, r0
   16244:	ldr	r8, [pc, #1564]	; 16868 <__assert_fail@plt+0x4834>
   16248:	ldr	r0, [r0, #8]
   1624c:	sub	sp, sp, #180	; 0xb4
   16250:	ldr	r3, [r8]
   16254:	cmp	r0, #0
   16258:	mov	r7, r1
   1625c:	mov	r9, r2
   16260:	str	r3, [sp, #172]	; 0xac
   16264:	ldr	r6, [r4]
   16268:	beq	16424 <__assert_fail@plt+0x43f0>
   1626c:	cmn	r6, #1
   16270:	beq	16374 <__assert_fail@plt+0x4340>
   16274:	ldr	sl, [pc, #1520]	; 1686c <__assert_fail@plt+0x4838>
   16278:	str	r6, [sl]
   1627c:	cmp	r9, #0
   16280:	beq	16358 <__assert_fail@plt+0x4324>
   16284:	mov	r5, r9
   16288:	b	16298 <__assert_fail@plt+0x4264>
   1628c:	subs	r5, r5, r0
   16290:	add	r7, r7, r0
   16294:	beq	16358 <__assert_fail@plt+0x4324>
   16298:	mov	r2, r5
   1629c:	mov	r1, r7
   162a0:	mov	r0, r6
   162a4:	bl	11e48 <write@plt>
   162a8:	cmp	r0, #0
   162ac:	bge	1628c <__assert_fail@plt+0x4258>
   162b0:	bl	11ddc <__errno_location@plt>
   162b4:	ldr	r3, [r0]
   162b8:	cmp	r3, #4
   162bc:	beq	16298 <__assert_fail@plt+0x4264>
   162c0:	ldr	r5, [pc, #1448]	; 16870 <__assert_fail@plt+0x483c>
   162c4:	ldr	r3, [r5, #112]	; 0x70
   162c8:	cmp	r3, #0
   162cc:	bne	16330 <__assert_fail@plt+0x42fc>
   162d0:	ldr	r3, [r4]
   162d4:	cmn	r3, #1
   162d8:	beq	16358 <__assert_fail@plt+0x4324>
   162dc:	mov	r0, #2
   162e0:	bl	11d28 <_gpgrt_get_std_stream@plt>
   162e4:	bl	12004 <gpgrt_fileno@plt>
   162e8:	bl	11fbc <isatty@plt>
   162ec:	cmp	r0, #0
   162f0:	beq	16330 <__assert_fail@plt+0x42fc>
   162f4:	bl	11ddc <__errno_location@plt>
   162f8:	ldrb	r3, [r4, #16]
   162fc:	cmp	r3, #0
   16300:	mov	r5, r0
   16304:	mov	r0, #2
   16308:	beq	16534 <__assert_fail@plt+0x4500>
   1630c:	bl	11d28 <_gpgrt_get_std_stream@plt>
   16310:	mov	r6, r0
   16314:	ldr	r0, [r5]
   16318:	bl	11cd4 <strerror@plt>
   1631c:	add	r2, r4, #16
   16320:	ldr	r1, [pc, #1356]	; 16874 <__assert_fail@plt+0x4840>
   16324:	mov	r3, r0
   16328:	mov	r0, r6
   1632c:	bl	11f98 <gpgrt_fprintf@plt>
   16330:	ldr	r3, [r4, #12]
   16334:	cmp	r3, #0
   16338:	beq	16358 <__assert_fail@plt+0x4324>
   1633c:	ldr	r0, [r4]
   16340:	cmn	r0, #1
   16344:	beq	16358 <__assert_fail@plt+0x4324>
   16348:	bl	12010 <close@plt>
   1634c:	mvn	r3, #0
   16350:	str	r3, [r4]
   16354:	str	r3, [sl]
   16358:	ldr	r2, [sp, #172]	; 0xac
   1635c:	ldr	r3, [r8]
   16360:	mov	r0, r9
   16364:	cmp	r2, r3
   16368:	bne	16848 <__assert_fail@plt+0x4814>
   1636c:	add	sp, sp, #180	; 0xb4
   16370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16374:	mov	r3, #0
   16378:	add	r6, r4, #16
   1637c:	mov	r0, r6
   16380:	str	r3, [r4, #12]
   16384:	mov	r2, #6
   16388:	ldr	r1, [pc, #1256]	; 16878 <__assert_fail@plt+0x4844>
   1638c:	bl	11fe0 <strncmp@plt>
   16390:	cmp	r0, #0
   16394:	bne	163a4 <__assert_fail@plt+0x4370>
   16398:	ldrb	r3, [r4, #22]
   1639c:	cmp	r3, #0
   163a0:	bne	16438 <__assert_fail@plt+0x4404>
   163a4:	mov	r2, #9
   163a8:	ldr	r1, [pc, #1228]	; 1687c <__assert_fail@plt+0x4848>
   163ac:	mov	r0, r6
   163b0:	bl	11fe0 <strncmp@plt>
   163b4:	mov	sl, #1
   163b8:	strh	sl, [sp, #60]	; 0x3c
   163bc:	cmp	r0, #0
   163c0:	addeq	r5, r4, #25
   163c4:	movne	r5, r6
   163c8:	ldrb	fp, [r5]
   163cc:	cmp	fp, #0
   163d0:	beq	16650 <__assert_fail@plt+0x461c>
   163d4:	mov	r0, r5
   163d8:	bl	11d88 <strlen@plt>
   163dc:	cmp	r0, #106	; 0x6a
   163e0:	bls	165a0 <__assert_fail@plt+0x456c>
   163e4:	ldr	r5, [pc, #1156]	; 16870 <__assert_fail@plt+0x483c>
   163e8:	mvn	r3, #0
   163ec:	str	r3, [r4]
   163f0:	ldr	r3, [r4, #4]
   163f4:	ldr	r2, [r5, #112]	; 0x70
   163f8:	cmp	r3, #0
   163fc:	bne	166fc <__assert_fail@plt+0x46c8>
   16400:	cmp	r2, #0
   16404:	beq	1670c <__assert_fail@plt+0x46d8>
   16408:	ldr	r6, [r4]
   1640c:	cmn	r6, #1
   16410:	beq	16750 <__assert_fail@plt+0x471c>
   16414:	mov	r2, #0
   16418:	mov	r3, #1
   1641c:	str	r2, [r4, #4]
   16420:	str	r3, [r4, #12]
   16424:	ldr	sl, [pc, #1088]	; 1686c <__assert_fail@plt+0x4838>
   16428:	cmn	r6, #1
   1642c:	str	r6, [sl]
   16430:	beq	162c0 <__assert_fail@plt+0x428c>
   16434:	b	1627c <__assert_fail@plt+0x4248>
   16438:	add	r5, r4, #22
   1643c:	mov	r0, r5
   16440:	bl	11d88 <strlen@plt>
   16444:	add	r0, r0, #1
   16448:	bl	11a7c <gcry_malloc@plt>
   1644c:	subs	sl, r0, #0
   16450:	beq	166f0 <__assert_fail@plt+0x46bc>
   16454:	ldrb	r3, [r4, #22]
   16458:	cmp	r3, #91	; 0x5b
   1645c:	beq	16560 <__assert_fail@plt+0x452c>
   16460:	mov	r1, r5
   16464:	bl	11c5c <strcpy@plt>
   16468:	mov	r1, #58	; 0x3a
   1646c:	mov	r0, sl
   16470:	bl	11da0 <strchr@plt>
   16474:	cmp	r0, #0
   16478:	beq	16588 <__assert_fail@plt+0x4554>
   1647c:	ldrb	r3, [r0, #1]
   16480:	add	ip, r0, #1
   16484:	sub	r3, r3, #48	; 0x30
   16488:	uxtb	r2, r3
   1648c:	cmp	r2, #9
   16490:	bhi	16588 <__assert_fail@plt+0x4554>
   16494:	ldr	r5, [pc, #996]	; 16880 <__assert_fail@plt+0x484c>
   16498:	b	164ac <__assert_fail@plt+0x4478>
   1649c:	add	r3, r3, r3, lsl #2
   164a0:	add	r3, r2, r3, lsl #1
   164a4:	cmp	r3, r5
   164a8:	bhi	16588 <__assert_fail@plt+0x4554>
   164ac:	ldrb	r1, [ip, #1]!
   164b0:	sub	r2, r1, #48	; 0x30
   164b4:	uxtb	lr, r2
   164b8:	cmp	lr, #9
   164bc:	bls	1649c <__assert_fail@plt+0x4468>
   164c0:	adds	r2, r1, #0
   164c4:	movne	r2, #1
   164c8:	cmp	r3, #0
   164cc:	moveq	r2, #1
   164d0:	cmp	r2, #0
   164d4:	bne	16588 <__assert_fail@plt+0x4554>
   164d8:	rev16	r3, r3
   164dc:	mov	r1, #2
   164e0:	strh	r3, [sp, #18]
   164e4:	strb	r2, [r0]
   164e8:	str	r2, [sp, #20]
   164ec:	str	r2, [sp, #24]
   164f0:	str	r2, [sp, #28]
   164f4:	mov	r3, r1
   164f8:	add	r2, sp, #20
   164fc:	add	r5, sp, #16
   16500:	mov	fp, #16
   16504:	strh	r1, [sp, #16]
   16508:	mov	r0, r3
   1650c:	mov	r1, sl
   16510:	str	r3, [sp, #12]
   16514:	bl	11b60 <inet_pton@plt>
   16518:	ldr	r3, [sp, #12]
   1651c:	cmp	r0, #1
   16520:	beq	1684c <__assert_fail@plt+0x4818>
   16524:	mov	r0, sl
   16528:	bl	11b84 <gcry_free@plt>
   1652c:	ldr	r5, [pc, #828]	; 16870 <__assert_fail@plt+0x483c>
   16530:	b	163e8 <__assert_fail@plt+0x43b4>
   16534:	bl	11d28 <_gpgrt_get_std_stream@plt>
   16538:	ldr	r7, [r4]
   1653c:	mov	r6, r0
   16540:	ldr	r0, [r5]
   16544:	bl	11cd4 <strerror@plt>
   16548:	mov	r2, r7
   1654c:	ldr	r1, [pc, #816]	; 16884 <__assert_fail@plt+0x4850>
   16550:	mov	r3, r0
   16554:	mov	r0, r6
   16558:	bl	11f98 <gpgrt_fprintf@plt>
   1655c:	b	16330 <__assert_fail@plt+0x42fc>
   16560:	add	r1, r4, #23
   16564:	bl	11c5c <strcpy@plt>
   16568:	mov	r1, #93	; 0x5d
   1656c:	mov	r0, sl
   16570:	bl	11da0 <strchr@plt>
   16574:	cmp	r0, #0
   16578:	beq	16588 <__assert_fail@plt+0x4554>
   1657c:	ldrb	r3, [r0, #1]
   16580:	cmp	r3, #58	; 0x3a
   16584:	beq	1675c <__assert_fail@plt+0x4728>
   16588:	mov	r0, #22
   1658c:	bl	11f14 <gpg_err_set_errno@plt>
   16590:	mov	r0, sl
   16594:	bl	11b84 <gcry_free@plt>
   16598:	ldr	r5, [pc, #720]	; 16870 <__assert_fail@plt+0x483c>
   1659c:	b	163e8 <__assert_fail@plt+0x43b4>
   165a0:	mov	r1, r5
   165a4:	mov	r2, #107	; 0x6b
   165a8:	add	r0, sp, #62	; 0x3e
   165ac:	bl	11e30 <strncpy@plt>
   165b0:	mov	r3, #0
   165b4:	add	r0, sp, #62	; 0x3e
   165b8:	strb	r3, [sp, #169]	; 0xa9
   165bc:	bl	11d88 <strlen@plt>
   165c0:	mov	r3, sl
   165c4:	ldr	sl, [pc, #700]	; 16888 <__assert_fail@plt+0x4854>
   165c8:	add	r5, sp, #60	; 0x3c
   165cc:	add	fp, r0, #2
   165d0:	mov	r0, r3
   165d4:	mov	r2, #0
   165d8:	mov	r1, #1
   165dc:	bl	11f8c <socket@plt>
   165e0:	cmn	r0, #1
   165e4:	str	r0, [r4]
   165e8:	ldreq	r5, [pc, #640]	; 16870 <__assert_fail@plt+0x483c>
   165ec:	beq	163f0 <__assert_fail@plt+0x43bc>
   165f0:	mov	r2, fp
   165f4:	mov	r1, r5
   165f8:	bl	12028 <connect@plt>
   165fc:	cmn	r0, #1
   16600:	beq	166c4 <__assert_fail@plt+0x4690>
   16604:	ldr	r6, [r4]
   16608:	cmn	r6, #1
   1660c:	bne	16414 <__assert_fail@plt+0x43e0>
   16610:	ldr	r5, [pc, #600]	; 16870 <__assert_fail@plt+0x483c>
   16614:	ldr	r3, [r5, #112]	; 0x70
   16618:	cmp	r3, #0
   1661c:	bne	16704 <__assert_fail@plt+0x46d0>
   16620:	ldr	r3, [r4, #4]
   16624:	cmp	r3, #0
   16628:	moveq	r3, #1
   1662c:	streq	r3, [r4, #4]
   16630:	ldr	r3, [r5, #112]	; 0x70
   16634:	ldr	sl, [pc, #560]	; 1686c <__assert_fail@plt+0x4838>
   16638:	cmp	r3, #0
   1663c:	mvn	r3, #0
   16640:	str	r3, [sl]
   16644:	str	r3, [r4]
   16648:	bne	16330 <__assert_fail@plt+0x42fc>
   1664c:	b	16358 <__assert_fail@plt+0x4324>
   16650:	ldr	r5, [pc, #536]	; 16870 <__assert_fail@plt+0x483c>
   16654:	ldr	r3, [r5, #108]	; 0x6c
   16658:	blx	r3
   1665c:	subs	r1, r0, #0
   16660:	ldrb	r3, [r1]
   16664:	beq	16864 <__assert_fail@plt+0x4830>
   16668:	cmp	r3, #0
   1666c:	str	r1, [sp, #12]
   16670:	beq	163e8 <__assert_fail@plt+0x43b4>
   16674:	bl	11d88 <strlen@plt>
   16678:	ldr	r1, [sp, #12]
   1667c:	add	r0, r0, #7
   16680:	cmp	r0, #106	; 0x6a
   16684:	bhi	163e8 <__assert_fail@plt+0x43b4>
   16688:	mov	r2, #107	; 0x6b
   1668c:	add	r0, sp, #62	; 0x3e
   16690:	bl	11e30 <strncpy@plt>
   16694:	mov	r2, #108	; 0x6c
   16698:	ldr	r1, [pc, #492]	; 1688c <__assert_fail@plt+0x4858>
   1669c:	add	r0, sp, #62	; 0x3e
   166a0:	bl	11de8 <__strcat_chk@plt>
   166a4:	add	r0, sp, #62	; 0x3e
   166a8:	strb	fp, [sp, #169]	; 0xa9
   166ac:	bl	11d88 <strlen@plt>
   166b0:	add	r5, sp, #60	; 0x3c
   166b4:	mov	r3, sl
   166b8:	add	sl, sp, #62	; 0x3e
   166bc:	add	fp, r0, #2
   166c0:	b	165d0 <__assert_fail@plt+0x459c>
   166c4:	ldr	r5, [pc, #420]	; 16870 <__assert_fail@plt+0x483c>
   166c8:	ldr	r2, [r4, #4]
   166cc:	ldr	r3, [r5, #112]	; 0x70
   166d0:	orrs	r3, r2, r3
   166d4:	beq	167fc <__assert_fail@plt+0x47c8>
   166d8:	ldr	r0, [r4]
   166dc:	bl	12010 <close@plt>
   166e0:	mvn	r3, #0
   166e4:	str	r3, [r4]
   166e8:	ldr	r3, [r5, #112]	; 0x70
   166ec:	b	16618 <__assert_fail@plt+0x45e4>
   166f0:	bl	11b84 <gcry_free@plt>
   166f4:	ldr	r5, [pc, #372]	; 16870 <__assert_fail@plt+0x483c>
   166f8:	b	163e8 <__assert_fail@plt+0x43b4>
   166fc:	cmp	r2, #0
   16700:	beq	16630 <__assert_fail@plt+0x45fc>
   16704:	ldr	r6, [r4]
   16708:	b	16424 <__assert_fail@plt+0x43f0>
   1670c:	mov	r0, #2
   16710:	bl	11d28 <_gpgrt_get_std_stream@plt>
   16714:	bl	12004 <gpgrt_fileno@plt>
   16718:	bl	11fbc <isatty@plt>
   1671c:	cmp	r0, #0
   16720:	beq	16604 <__assert_fail@plt+0x45d0>
   16724:	mov	r0, #2
   16728:	bl	11d28 <_gpgrt_get_std_stream@plt>
   1672c:	mov	r5, r0
   16730:	bl	11ddc <__errno_location@plt>
   16734:	ldr	r0, [r0]
   16738:	bl	11cd4 <strerror@plt>
   1673c:	ldr	r1, [pc, #332]	; 16890 <__assert_fail@plt+0x485c>
   16740:	mov	r2, r0
   16744:	mov	r0, r5
   16748:	bl	11f98 <gpgrt_fprintf@plt>
   1674c:	b	16604 <__assert_fail@plt+0x45d0>
   16750:	ldr	sl, [pc, #276]	; 1686c <__assert_fail@plt+0x4838>
   16754:	str	r6, [sl]
   16758:	b	162c4 <__assert_fail@plt+0x4290>
   1675c:	ldrb	r3, [r0, #2]
   16760:	add	lr, r0, #2
   16764:	sub	r3, r3, #48	; 0x30
   16768:	uxtb	r2, r3
   1676c:	cmp	r2, #9
   16770:	bhi	16588 <__assert_fail@plt+0x4554>
   16774:	ldr	r5, [pc, #260]	; 16880 <__assert_fail@plt+0x484c>
   16778:	b	1678c <__assert_fail@plt+0x4758>
   1677c:	add	r3, r3, r3, lsl #2
   16780:	add	r3, r2, r3, lsl #1
   16784:	cmp	r3, r5
   16788:	bhi	16588 <__assert_fail@plt+0x4554>
   1678c:	ldrb	r1, [lr, #1]!
   16790:	sub	r2, r1, #48	; 0x30
   16794:	uxtb	ip, r2
   16798:	cmp	ip, #9
   1679c:	bls	1677c <__assert_fail@plt+0x4748>
   167a0:	cmp	r1, #0
   167a4:	clz	r2, r3
   167a8:	lsr	r2, r2, #5
   167ac:	moveq	r1, r2
   167b0:	movne	r1, #1
   167b4:	cmp	r1, #0
   167b8:	bne	16588 <__assert_fail@plt+0x4554>
   167bc:	mov	r2, #10
   167c0:	rev16	r3, r3
   167c4:	strh	r3, [sp, #34]	; 0x22
   167c8:	strh	r2, [sp, #32]
   167cc:	mov	r3, r2
   167d0:	strb	r1, [r0]
   167d4:	str	r1, [sp, #36]	; 0x24
   167d8:	str	r1, [sp, #40]	; 0x28
   167dc:	str	r1, [sp, #44]	; 0x2c
   167e0:	str	r1, [sp, #48]	; 0x30
   167e4:	str	r1, [sp, #52]	; 0x34
   167e8:	str	r1, [sp, #56]	; 0x38
   167ec:	add	r5, sp, #32
   167f0:	add	r2, sp, #40	; 0x28
   167f4:	mov	fp, #28
   167f8:	b	16508 <__assert_fail@plt+0x44d4>
   167fc:	mov	r0, #2
   16800:	bl	11d28 <_gpgrt_get_std_stream@plt>
   16804:	bl	12004 <gpgrt_fileno@plt>
   16808:	bl	11fbc <isatty@plt>
   1680c:	cmp	r0, #0
   16810:	beq	166d8 <__assert_fail@plt+0x46a4>
   16814:	mov	r0, #2
   16818:	bl	11d28 <_gpgrt_get_std_stream@plt>
   1681c:	mov	fp, r0
   16820:	bl	11ddc <__errno_location@plt>
   16824:	ldr	r0, [r0]
   16828:	bl	11cd4 <strerror@plt>
   1682c:	mov	r3, sl
   16830:	mov	r2, r6
   16834:	ldr	r1, [pc, #88]	; 16894 <__assert_fail@plt+0x4860>
   16838:	str	r0, [sp]
   1683c:	mov	r0, fp
   16840:	bl	11f98 <gpgrt_fprintf@plt>
   16844:	b	166d8 <__assert_fail@plt+0x46a4>
   16848:	bl	11bc0 <__stack_chk_fail@plt>
   1684c:	mov	r0, sl
   16850:	str	r3, [sp, #12]
   16854:	ldr	sl, [pc, #44]	; 16888 <__assert_fail@plt+0x4854>
   16858:	bl	11b84 <gcry_free@plt>
   1685c:	ldr	r3, [sp, #12]
   16860:	b	165d0 <__assert_fail@plt+0x459c>
   16864:	udf	#0
   16868:	ldrdeq	lr, [r2], -r0
   1686c:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   16870:	strdeq	pc, [r2], -ip
   16874:	andeq	sp, r1, r8, lsr #4
   16878:	andeq	sp, r1, r4, lsl #2
   1687c:	andeq	sp, r1, r0, lsl r1
   16880:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   16884:	andeq	sp, r1, r4, asr #4
   16888:	andeq	sp, r1, r4, asr #15
   1688c:	ldrdeq	sp, [r1], -r4
   16890:	ldrdeq	sp, [r1], -ip
   16894:	andeq	sp, r1, r8, lsl #4
   16898:	ldr	r3, [pc, #16]	; 168b0 <__assert_fail@plt+0x487c>
   1689c:	cmp	r0, #0
   168a0:	movne	r2, #0
   168a4:	ldr	r0, [r3, #116]	; 0x74
   168a8:	strne	r2, [r3, #116]	; 0x74
   168ac:	bx	lr
   168b0:	strdeq	pc, [r2], -ip
   168b4:	ldr	r2, [pc, #12]	; 168c8 <__assert_fail@plt+0x4894>
   168b8:	ldr	r3, [r2, #116]	; 0x74
   168bc:	add	r3, r3, #1
   168c0:	str	r3, [r2, #116]	; 0x74
   168c4:	bx	lr
   168c8:	strdeq	pc, [r2], -ip
   168cc:	ldr	r3, [pc, #12]	; 168e0 <__assert_fail@plt+0x48ac>
   168d0:	cmp	r0, #0
   168d4:	mvn	r1, #0
   168d8:	moveq	r0, r3
   168dc:	b	15910 <__assert_fail@plt+0x38dc>
   168e0:	andeq	ip, r1, ip, lsl #12
   168e4:	ldr	r3, [pc, #4]	; 168f0 <__assert_fail@plt+0x48bc>
   168e8:	str	r0, [r3, #108]	; 0x6c
   168ec:	bx	lr
   168f0:	strdeq	pc, [r2], -ip
   168f4:	ldr	r3, [pc, #4]	; 16900 <__assert_fail@plt+0x48cc>
   168f8:	str	r0, [r3, #104]	; 0x68
   168fc:	bx	lr
   16900:	strdeq	pc, [r2], -ip
   16904:	cmp	r0, #0
   16908:	push	{r4, r5, r6, lr}
   1690c:	mov	r4, r1
   16910:	ldr	r5, [pc, #60]	; 16954 <__assert_fail@plt+0x4920>
   16914:	beq	16930 <__assert_fail@plt+0x48fc>
   16918:	mov	r1, r0
   1691c:	mov	r2, #79	; 0x4f
   16920:	add	r0, r5, #20
   16924:	bl	11e30 <strncpy@plt>
   16928:	mov	r3, #0
   1692c:	strb	r3, [r5, #99]	; 0x63
   16930:	and	r1, r4, #1
   16934:	and	r2, r4, #2
   16938:	and	r3, r4, #4
   1693c:	and	r4, r4, #256	; 0x100
   16940:	str	r1, [r5, #16]
   16944:	str	r2, [r5, #12]
   16948:	str	r3, [r5, #100]	; 0x64
   1694c:	str	r4, [r5, #112]	; 0x70
   16950:	pop	{r4, r5, r6, pc}
   16954:	strdeq	pc, [r2], -ip
   16958:	cmp	r0, #0
   1695c:	beq	169ac <__assert_fail@plt+0x4978>
   16960:	ldr	r2, [pc, #76]	; 169b4 <__assert_fail@plt+0x4980>
   16964:	ldr	r3, [r2, #16]
   16968:	ldr	r1, [r2, #12]
   1696c:	adds	r3, r3, #0
   16970:	movne	r3, #1
   16974:	cmp	r1, #0
   16978:	str	r3, [r0]
   1697c:	orrne	r3, r3, #2
   16980:	strne	r3, [r0]
   16984:	ldr	r3, [r2, #100]	; 0x64
   16988:	cmp	r3, #0
   1698c:	ldrne	r3, [r0]
   16990:	orrne	r3, r3, #4
   16994:	strne	r3, [r0]
   16998:	ldr	r3, [r2, #112]	; 0x70
   1699c:	cmp	r3, #0
   169a0:	ldrne	r3, [r0]
   169a4:	orrne	r3, r3, #256	; 0x100
   169a8:	strne	r3, [r0]
   169ac:	ldr	r0, [pc, #4]	; 169b8 <__assert_fail@plt+0x4984>
   169b0:	bx	lr
   169b4:	strdeq	pc, [r2], -ip
   169b8:	andeq	pc, r2, r0, lsl r1	; <UNPREDICTABLE>
   169bc:	ldr	r3, [pc, #88]	; 16a1c <__assert_fail@plt+0x49e8>
   169c0:	push	{r4, lr}
   169c4:	mov	r4, r0
   169c8:	ldr	r0, [r3]
   169cc:	cmp	r0, #0
   169d0:	beq	169f4 <__assert_fail@plt+0x49c0>
   169d4:	bl	12004 <gpgrt_fileno@plt>
   169d8:	cmn	r0, #1
   169dc:	sub	r3, r0, r4
   169e0:	clz	r3, r3
   169e4:	lsr	r3, r3, #5
   169e8:	moveq	r3, #0
   169ec:	cmp	r3, #0
   169f0:	bne	16a14 <__assert_fail@plt+0x49e0>
   169f4:	ldr	r3, [pc, #36]	; 16a20 <__assert_fail@plt+0x49ec>
   169f8:	ldr	r3, [r3]
   169fc:	cmn	r3, #1
   16a00:	sub	r0, r3, r4
   16a04:	clz	r0, r0
   16a08:	lsr	r0, r0, #5
   16a0c:	moveq	r0, #0
   16a10:	pop	{r4, pc}
   16a14:	mov	r0, #1
   16a18:	pop	{r4, pc}
   16a1c:	strdeq	pc, [r2], -ip
   16a20:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   16a24:	ldr	r3, [pc, #20]	; 16a40 <__assert_fail@plt+0x4a0c>
   16a28:	ldr	r0, [r3]
   16a2c:	cmp	r0, #0
   16a30:	beq	16a38 <__assert_fail@plt+0x4a04>
   16a34:	b	12004 <gpgrt_fileno@plt>
   16a38:	mvn	r0, #0
   16a3c:	bx	lr
   16a40:	strdeq	pc, [r2], -ip
   16a44:	push	{r4, lr}
   16a48:	ldr	r4, [pc, #52]	; 16a84 <__assert_fail@plt+0x4a50>
   16a4c:	ldr	r0, [r4]
   16a50:	cmp	r0, #0
   16a54:	popne	{r4, pc}
   16a58:	ldr	r0, [pc, #40]	; 16a88 <__assert_fail@plt+0x4a54>
   16a5c:	mvn	r1, #0
   16a60:	bl	15910 <__assert_fail@plt+0x38dc>
   16a64:	ldr	r0, [r4]
   16a68:	cmp	r0, #0
   16a6c:	popne	{r4, pc}
   16a70:	ldr	r3, [pc, #20]	; 16a8c <__assert_fail@plt+0x4a58>
   16a74:	mov	r2, #672	; 0x2a0
   16a78:	ldr	r1, [pc, #16]	; 16a90 <__assert_fail@plt+0x4a5c>
   16a7c:	ldr	r0, [pc, #16]	; 16a94 <__assert_fail@plt+0x4a60>
   16a80:	bl	12034 <__assert_fail@plt>
   16a84:	strdeq	pc, [r2], -ip
   16a88:	andeq	ip, r1, ip, lsl #12
   16a8c:	strdeq	sp, [r1], -r4
   16a90:	muleq	r1, r8, r1
   16a94:			; <UNDEFINED> instruction: 0x0001d1b0
   16a98:	push	{r1, r2, r3}
   16a9c:	mov	r3, #0
   16aa0:	push	{r4, lr}
   16aa4:	sub	sp, sp, #20
   16aa8:	ldr	r4, [pc, #68]	; 16af4 <__assert_fail@plt+0x4ac0>
   16aac:	ldr	r2, [sp, #28]
   16ab0:	add	ip, sp, #32
   16ab4:	ldr	r1, [r4]
   16ab8:	stm	sp, {r2, ip}
   16abc:	str	r1, [sp, #12]
   16ac0:	mov	r2, r3
   16ac4:	mov	r1, r3
   16ac8:	str	ip, [sp, #8]
   16acc:	bl	15e2c <__assert_fail@plt+0x3df8>
   16ad0:	ldr	r2, [sp, #12]
   16ad4:	ldr	r3, [r4]
   16ad8:	cmp	r2, r3
   16adc:	bne	16af0 <__assert_fail@plt+0x4abc>
   16ae0:	add	sp, sp, #20
   16ae4:	pop	{r4, lr}
   16ae8:	add	sp, sp, #12
   16aec:	bx	lr
   16af0:	bl	11bc0 <__stack_chk_fail@plt>
   16af4:	ldrdeq	lr, [r2], -r0
   16af8:	push	{lr}		; (str lr, [sp, #-4]!)
   16afc:	sub	sp, sp, #12
   16b00:	mov	r3, #0
   16b04:	stm	sp, {r1, r2}
   16b08:	mov	r2, r3
   16b0c:	mov	r1, r3
   16b10:	bl	15e2c <__assert_fail@plt+0x3df8>
   16b14:	add	sp, sp, #12
   16b18:	pop	{pc}		; (ldr pc, [sp], #4)
   16b1c:	push	{lr}		; (str lr, [sp, #-4]!)
   16b20:	sub	sp, sp, #12
   16b24:	str	r2, [sp]
   16b28:	mov	r2, #0
   16b2c:	str	r3, [sp, #4]
   16b30:	mov	r3, r1
   16b34:	mov	r1, r2
   16b38:	bl	15e2c <__assert_fail@plt+0x3df8>
   16b3c:	add	sp, sp, #12
   16b40:	pop	{pc}		; (ldr pc, [sp], #4)
   16b44:	b	161dc <__assert_fail@plt+0x41a8>
   16b48:	push	{r0, r1, r2, r3}
   16b4c:	mov	r3, #0
   16b50:	push	{r4, lr}
   16b54:	sub	sp, sp, #16
   16b58:	ldr	r4, [pc, #72]	; 16ba8 <__assert_fail@plt+0x4b74>
   16b5c:	ldr	r2, [sp, #24]
   16b60:	add	ip, sp, #28
   16b64:	ldr	r0, [r4]
   16b68:	stm	sp, {r2, ip}
   16b6c:	mov	r1, r3
   16b70:	mov	r2, r3
   16b74:	str	r0, [sp, #12]
   16b78:	mov	r0, #2
   16b7c:	str	ip, [sp, #8]
   16b80:	bl	15e2c <__assert_fail@plt+0x3df8>
   16b84:	ldr	r2, [sp, #12]
   16b88:	ldr	r3, [r4]
   16b8c:	cmp	r2, r3
   16b90:	bne	16ba4 <__assert_fail@plt+0x4b70>
   16b94:	add	sp, sp, #16
   16b98:	pop	{r4, lr}
   16b9c:	add	sp, sp, #16
   16ba0:	bx	lr
   16ba4:	bl	11bc0 <__stack_chk_fail@plt>
   16ba8:	ldrdeq	lr, [r2], -r0
   16bac:	push	{r0, r1, r2, r3}
   16bb0:	mov	r3, #0
   16bb4:	push	{r4, lr}
   16bb8:	sub	sp, sp, #16
   16bbc:	ldr	r4, [pc, #96]	; 16c24 <__assert_fail@plt+0x4bf0>
   16bc0:	ldr	r2, [sp, #24]
   16bc4:	add	ip, sp, #28
   16bc8:	ldr	r0, [r4]
   16bcc:	mov	r1, r3
   16bd0:	stm	sp, {r2, ip}
   16bd4:	str	r0, [sp, #12]
   16bd8:	mov	r2, r3
   16bdc:	mov	r0, #4
   16be0:	str	ip, [sp, #8]
   16be4:	bl	15e2c <__assert_fail@plt+0x3df8>
   16be8:	ldr	r2, [pc, #56]	; 16c28 <__assert_fail@plt+0x4bf4>
   16bec:	ldr	r1, [pc, #56]	; 16c2c <__assert_fail@plt+0x4bf8>
   16bf0:	ldr	r3, [r2, #116]	; 0x74
   16bf4:	cmp	r3, r1
   16bf8:	addle	r3, r3, #1
   16bfc:	strle	r3, [r2, #116]	; 0x74
   16c00:	ldr	r2, [sp, #12]
   16c04:	ldr	r3, [r4]
   16c08:	cmp	r2, r3
   16c0c:	bne	16c20 <__assert_fail@plt+0x4bec>
   16c10:	add	sp, sp, #16
   16c14:	pop	{r4, lr}
   16c18:	add	sp, sp, #16
   16c1c:	bx	lr
   16c20:	bl	11bc0 <__stack_chk_fail@plt>
   16c24:	ldrdeq	lr, [r2], -r0
   16c28:	strdeq	pc, [r2], -ip
   16c2c:	andeq	r7, r0, pc, lsr #10
   16c30:	push	{r0, r1, r2, r3}
   16c34:	mov	r0, #5
   16c38:	push	{lr}		; (str lr, [sp, #-4]!)
   16c3c:	sub	sp, sp, #20
   16c40:	ldr	r3, [pc, #40]	; 16c70 <__assert_fail@plt+0x4c3c>
   16c44:	ldr	r2, [sp, #24]
   16c48:	add	ip, sp, #28
   16c4c:	ldr	lr, [r3]
   16c50:	mov	r3, #0
   16c54:	stm	sp, {r2, ip}
   16c58:	mov	r1, r3
   16c5c:	mov	r2, r3
   16c60:	str	lr, [sp, #12]
   16c64:	str	ip, [sp, #8]
   16c68:	bl	15e2c <__assert_fail@plt+0x3df8>
   16c6c:	bl	11fec <abort@plt>
   16c70:	ldrdeq	lr, [r2], -r0
   16c74:	push	{r4, lr}
   16c78:	mov	r4, r0
   16c7c:	bl	17c94 <__assert_fail@plt+0x5c60>
   16c80:	cmp	r0, #0
   16c84:	beq	16c98 <__assert_fail@plt+0x4c64>
   16c88:	mov	r1, r4
   16c8c:	mov	r0, #0
   16c90:	pop	{r4, lr}
   16c94:	b	15910 <__assert_fail@plt+0x38dc>
   16c98:	bl	11ddc <__errno_location@plt>
   16c9c:	ldr	r0, [r0]
   16ca0:	bl	11cd4 <strerror@plt>
   16ca4:	mov	r1, r0
   16ca8:	ldr	r0, [pc]	; 16cb0 <__assert_fail@plt+0x4c7c>
   16cac:	bl	16c30 <__assert_fail@plt+0x4bfc>
   16cb0:	andeq	sp, r1, r0, ror r2
   16cb4:	push	{r0, r1, r2, r3}
   16cb8:	mov	r0, #6
   16cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   16cc0:	sub	sp, sp, #20
   16cc4:	ldr	r3, [pc, #40]	; 16cf4 <__assert_fail@plt+0x4cc0>
   16cc8:	ldr	r2, [sp, #24]
   16ccc:	add	ip, sp, #28
   16cd0:	ldr	lr, [r3]
   16cd4:	mov	r3, #0
   16cd8:	stm	sp, {r2, ip}
   16cdc:	mov	r1, r3
   16ce0:	mov	r2, r3
   16ce4:	str	lr, [sp, #12]
   16ce8:	str	ip, [sp, #8]
   16cec:	bl	15e2c <__assert_fail@plt+0x3df8>
   16cf0:	bl	11fec <abort@plt>
   16cf4:	ldrdeq	lr, [r2], -r0
   16cf8:	push	{r0, r1, r2, r3}
   16cfc:	mov	r3, #0
   16d00:	push	{r4, lr}
   16d04:	sub	sp, sp, #16
   16d08:	ldr	r4, [pc, #72]	; 16d58 <__assert_fail@plt+0x4d24>
   16d0c:	ldr	r2, [sp, #24]
   16d10:	add	ip, sp, #28
   16d14:	ldr	r0, [r4]
   16d18:	stm	sp, {r2, ip}
   16d1c:	mov	r1, r3
   16d20:	mov	r2, r3
   16d24:	str	r0, [sp, #12]
   16d28:	mov	r0, #7
   16d2c:	str	ip, [sp, #8]
   16d30:	bl	15e2c <__assert_fail@plt+0x3df8>
   16d34:	ldr	r2, [sp, #12]
   16d38:	ldr	r3, [r4]
   16d3c:	cmp	r2, r3
   16d40:	bne	16d54 <__assert_fail@plt+0x4d20>
   16d44:	add	sp, sp, #16
   16d48:	pop	{r4, lr}
   16d4c:	add	sp, sp, #16
   16d50:	bx	lr
   16d54:	bl	11bc0 <__stack_chk_fail@plt>
   16d58:	ldrdeq	lr, [r2], -r0
   16d5c:	push	{r1, r2, r3}
   16d60:	mov	r3, #0
   16d64:	push	{r4, lr}
   16d68:	sub	sp, sp, #20
   16d6c:	ldr	r4, [pc, #72]	; 16dbc <__assert_fail@plt+0x4d88>
   16d70:	ldr	r1, [sp, #28]
   16d74:	add	ip, sp, #32
   16d78:	ldr	lr, [r4]
   16d7c:	mov	r2, r0
   16d80:	stm	sp, {r1, ip}
   16d84:	mov	r0, #7
   16d88:	mov	r1, r3
   16d8c:	str	lr, [sp, #12]
   16d90:	str	ip, [sp, #8]
   16d94:	bl	15e2c <__assert_fail@plt+0x3df8>
   16d98:	ldr	r2, [sp, #12]
   16d9c:	ldr	r3, [r4]
   16da0:	cmp	r2, r3
   16da4:	bne	16db8 <__assert_fail@plt+0x4d84>
   16da8:	add	sp, sp, #20
   16dac:	pop	{r4, lr}
   16db0:	add	sp, sp, #12
   16db4:	bx	lr
   16db8:	bl	11bc0 <__stack_chk_fail@plt>
   16dbc:	ldrdeq	lr, [r2], -r0
   16dc0:	push	{r0, r1, r2, r3}
   16dc4:	mov	r3, #0
   16dc8:	push	{r4, lr}
   16dcc:	sub	sp, sp, #16
   16dd0:	ldr	r4, [pc, #80]	; 16e28 <__assert_fail@plt+0x4df4>
   16dd4:	ldr	r0, [sp, #24]
   16dd8:	add	ip, sp, #28
   16ddc:	ldr	r1, [r4]
   16de0:	str	r0, [sp]
   16de4:	subs	r0, r0, r3
   16de8:	mov	r2, r3
   16dec:	movne	r0, #1
   16df0:	str	r1, [sp, #12]
   16df4:	str	ip, [sp, #4]
   16df8:	mov	r1, r3
   16dfc:	str	ip, [sp, #8]
   16e00:	bl	15e2c <__assert_fail@plt+0x3df8>
   16e04:	ldr	r2, [sp, #12]
   16e08:	ldr	r3, [r4]
   16e0c:	cmp	r2, r3
   16e10:	bne	16e24 <__assert_fail@plt+0x4df0>
   16e14:	add	sp, sp, #16
   16e18:	pop	{r4, lr}
   16e1c:	add	sp, sp, #16
   16e20:	bx	lr
   16e24:	bl	11bc0 <__stack_chk_fail@plt>
   16e28:	ldrdeq	lr, [r2], -r0
   16e2c:	mov	r1, #0
   16e30:	mov	r0, #1
   16e34:	b	161dc <__assert_fail@plt+0x41a8>
   16e38:	push	{r4, r5, r6, r7, r8, lr}
   16e3c:	subs	r7, r0, #0
   16e40:	mov	r4, r1
   16e44:	mov	r5, r2
   16e48:	beq	16ec8 <__assert_fail@plt+0x4e94>
   16e4c:	ldrb	r3, [r7]
   16e50:	cmp	r3, #0
   16e54:	bne	16eb0 <__assert_fail@plt+0x4e7c>
   16e58:	cmp	r5, #0
   16e5c:	bne	16e6c <__assert_fail@plt+0x4e38>
   16e60:	ldr	r0, [pc, #132]	; 16eec <__assert_fail@plt+0x4eb8>
   16e64:	pop	{r4, r5, r6, r7, r8, lr}
   16e68:	b	16dc0 <__assert_fail@plt+0x4d8c>
   16e6c:	ldr	r0, [pc, #124]	; 16ef0 <__assert_fail@plt+0x4ebc>
   16e70:	ldrb	r1, [r4], #1
   16e74:	bl	16dc0 <__assert_fail@plt+0x4d8c>
   16e78:	cmp	r5, #1
   16e7c:	sub	r5, r5, #2
   16e80:	beq	16e60 <__assert_fail@plt+0x4e2c>
   16e84:	add	r5, r5, #1
   16e88:	ldr	r6, [pc, #100]	; 16ef4 <__assert_fail@plt+0x4ec0>
   16e8c:	add	r5, r4, r5
   16e90:	ldrb	r1, [r4], #1
   16e94:	mov	r0, r6
   16e98:	bl	16dc0 <__assert_fail@plt+0x4d8c>
   16e9c:	cmp	r4, r5
   16ea0:	bne	16e90 <__assert_fail@plt+0x4e5c>
   16ea4:	cmp	r7, #0
   16ea8:	popeq	{r4, r5, r6, r7, r8, pc}
   16eac:	b	16e60 <__assert_fail@plt+0x4e2c>
   16eb0:	mov	r1, r7
   16eb4:	ldr	r0, [pc, #60]	; 16ef8 <__assert_fail@plt+0x4ec4>
   16eb8:	bl	16cf8 <__assert_fail@plt+0x4cc4>
   16ebc:	cmp	r5, #0
   16ec0:	beq	16e60 <__assert_fail@plt+0x4e2c>
   16ec4:	b	16e6c <__assert_fail@plt+0x4e38>
   16ec8:	cmp	r2, #0
   16ecc:	popeq	{r4, r5, r6, r7, r8, pc}
   16ed0:	ldr	r0, [pc, #24]	; 16ef0 <__assert_fail@plt+0x4ebc>
   16ed4:	ldrb	r1, [r4], #1
   16ed8:	bl	16dc0 <__assert_fail@plt+0x4d8c>
   16edc:	cmp	r5, #1
   16ee0:	sub	r5, r5, #2
   16ee4:	bne	16e84 <__assert_fail@plt+0x4e50>
   16ee8:	pop	{r4, r5, r6, r7, r8, pc}
   16eec:	andeq	ip, r1, r4, lsr #18
   16ef0:	muleq	r1, r0, r2
   16ef4:	andeq	ip, r1, r0, ror #16
   16ef8:	andeq	sp, r1, ip, lsl #5
   16efc:	mov	r1, r0
   16f00:	ldr	r0, [pc]	; 16f08 <__assert_fail@plt+0x4ed4>
   16f04:	b	16cf8 <__assert_fail@plt+0x4cc4>
   16f08:	muleq	r1, r8, r2
   16f0c:	push	{lr}		; (str lr, [sp, #-4]!)
   16f10:	sub	sp, sp, #12
   16f14:	mov	r3, r1
   16f18:	str	r2, [sp]
   16f1c:	ldr	r1, [pc, #12]	; 16f30 <__assert_fail@plt+0x4efc>
   16f20:	mov	r2, r0
   16f24:	mov	r0, #6
   16f28:	bl	16a98 <__assert_fail@plt+0x4a64>
   16f2c:	bl	11fec <abort@plt>
   16f30:			; <UNDEFINED> instruction: 0x0001d2b8
   16f34:	push	{lr}		; (str lr, [sp, #-4]!)
   16f38:	sub	sp, sp, #12
   16f3c:	stm	sp, {r1, r2}
   16f40:	mov	r2, r0
   16f44:	ldr	r1, [pc, #8]	; 16f54 <__assert_fail@plt+0x4f20>
   16f48:	mov	r0, #6
   16f4c:	bl	16a98 <__assert_fail@plt+0x4a64>
   16f50:	bl	11fec <abort@plt>
   16f54:	ldrdeq	sp, [r1], -r8
   16f58:	ldrb	r3, [r0, #1]
   16f5c:	mov	r2, r0
   16f60:	cmp	r3, #0
   16f64:	beq	17010 <__assert_fail@plt+0x4fdc>
   16f68:	ldrb	r1, [r0, #2]
   16f6c:	cmp	r3, #114	; 0x72
   16f70:	movne	r0, #0
   16f74:	moveq	r0, #256	; 0x100
   16f78:	cmp	r1, #0
   16f7c:	bxeq	lr
   16f80:	ldrb	r3, [r2, #3]
   16f84:	cmp	r1, #119	; 0x77
   16f88:	orreq	r0, r0, #128	; 0x80
   16f8c:	cmp	r3, #0
   16f90:	bxeq	lr
   16f94:	cmp	r3, #120	; 0x78
   16f98:	ldrb	r3, [r2, #4]
   16f9c:	orreq	r0, r0, #64	; 0x40
   16fa0:	cmp	r3, #0
   16fa4:	bxeq	lr
   16fa8:	cmp	r3, #114	; 0x72
   16fac:	ldrb	r3, [r2, #5]
   16fb0:	orreq	r0, r0, #32
   16fb4:	cmp	r3, #0
   16fb8:	bxeq	lr
   16fbc:	cmp	r3, #119	; 0x77
   16fc0:	ldrb	r3, [r2, #6]
   16fc4:	orreq	r0, r0, #16
   16fc8:	cmp	r3, #0
   16fcc:	bxeq	lr
   16fd0:	cmp	r3, #120	; 0x78
   16fd4:	ldrb	r3, [r2, #7]
   16fd8:	orreq	r0, r0, #8
   16fdc:	cmp	r3, #0
   16fe0:	bxeq	lr
   16fe4:	cmp	r3, #114	; 0x72
   16fe8:	ldrb	r3, [r2, #8]
   16fec:	orreq	r0, r0, #4
   16ff0:	cmp	r3, #0
   16ff4:	bxeq	lr
   16ff8:	cmp	r3, #119	; 0x77
   16ffc:	ldrb	r3, [r2, #9]
   17000:	orreq	r0, r0, #2
   17004:	cmp	r3, #120	; 0x78
   17008:	orreq	r0, r0, #1
   1700c:	bx	lr
   17010:	mov	r0, r3
   17014:	bx	lr
   17018:	bx	lr
   1701c:	push	{r4, r5, lr}
   17020:	sub	sp, sp, #28
   17024:	ldr	r4, [pc, #160]	; 170cc <__assert_fail@plt+0x5098>
   17028:	mov	r1, sp
   1702c:	mov	r0, #4
   17030:	ldr	r3, [r4]
   17034:	str	r3, [sp, #20]
   17038:	bl	11bd8 <getrlimit64@plt>
   1703c:	mov	r1, sp
   17040:	cmp	r0, #0
   17044:	movne	r2, #0
   17048:	movne	r3, #0
   1704c:	mov	r0, #4
   17050:	strdne	r2, [sp, #8]
   17054:	mov	r2, #0
   17058:	mov	r3, #0
   1705c:	strd	r2, [sp]
   17060:	bl	11ae8 <setrlimit64@plt>
   17064:	cmp	r0, #0
   17068:	beq	17088 <__assert_fail@plt+0x5054>
   1706c:	bl	11ddc <__errno_location@plt>
   17070:	ldr	r3, [r0]
   17074:	mov	r5, r0
   17078:	sub	r3, r3, #22
   1707c:	bics	r3, r3, #16
   17080:	moveq	r0, #1
   17084:	bne	170a4 <__assert_fail@plt+0x5070>
   17088:	ldr	r2, [sp, #20]
   1708c:	ldr	r3, [r4]
   17090:	cmp	r2, r3
   17094:	bne	170a0 <__assert_fail@plt+0x506c>
   17098:	add	sp, sp, #28
   1709c:	pop	{r4, r5, pc}
   170a0:	bl	11bc0 <__stack_chk_fail@plt>
   170a4:	ldr	r1, [pc, #36]	; 170d0 <__assert_fail@plt+0x509c>
   170a8:	mov	r2, #5
   170ac:	mov	r0, #0
   170b0:	bl	11bb4 <dcgettext@plt>
   170b4:	mov	r4, r0
   170b8:	ldr	r0, [r5]
   170bc:	bl	11cd4 <strerror@plt>
   170c0:	mov	r1, r0
   170c4:	mov	r0, r4
   170c8:	bl	16c30 <__assert_fail@plt+0x4bfc>
   170cc:	ldrdeq	lr, [r2], -r0
   170d0:	andeq	sp, r1, r0, asr #6
   170d4:	push	{r4, lr}
   170d8:	sub	sp, sp, #24
   170dc:	ldr	r4, [pc, #76]	; 17130 <__assert_fail@plt+0x50fc>
   170e0:	mov	r1, sp
   170e4:	mov	r0, #4
   170e8:	ldr	r3, [r4]
   170ec:	str	r3, [sp, #20]
   170f0:	bl	11bd8 <getrlimit64@plt>
   170f4:	cmp	r0, #0
   170f8:	bne	17110 <__assert_fail@plt+0x50dc>
   170fc:	ldrd	r2, [sp, #8]
   17100:	mov	r1, sp
   17104:	mov	r0, #4
   17108:	strd	r2, [sp]
   1710c:	bl	11ae8 <setrlimit64@plt>
   17110:	ldr	r2, [sp, #20]
   17114:	ldr	r3, [r4]
   17118:	mov	r0, #1
   1711c:	cmp	r2, r3
   17120:	bne	1712c <__assert_fail@plt+0x50f8>
   17124:	add	sp, sp, #24
   17128:	pop	{r4, pc}
   1712c:	bl	11bc0 <__stack_chk_fail@plt>
   17130:	ldrdeq	lr, [r2], -r0
   17134:	ldr	r3, [pc, #8]	; 17144 <__assert_fail@plt+0x5110>
   17138:	mov	r2, #1
   1713c:	str	r2, [r3]
   17140:	bx	lr
   17144:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   17148:	push	{r4, r5, r6, lr}
   1714c:	mov	r5, r0
   17150:	ldr	r4, [pc, #48]	; 17188 <__assert_fail@plt+0x5154>
   17154:	ldr	r3, [r4, #4]
   17158:	cmp	r3, #0
   1715c:	beq	17170 <__assert_fail@plt+0x513c>
   17160:	mov	r3, #8
   17164:	str	r3, [r5]
   17168:	ldr	r0, [pc, #28]	; 1718c <__assert_fail@plt+0x5158>
   1716c:	pop	{r4, r5, r6, pc}
   17170:	mov	r1, #8
   17174:	add	r0, r4, r1
   17178:	bl	11f74 <gcry_create_nonce@plt>
   1717c:	mov	r3, #1
   17180:	str	r3, [r4, #4]
   17184:	b	17160 <__assert_fail@plt+0x512c>
   17188:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   1718c:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   17190:	push	{r4, lr}
   17194:	sub	sp, sp, #8
   17198:	ldr	r4, [pc, #48]	; 171d0 <__assert_fail@plt+0x519c>
   1719c:	mov	r0, sp
   171a0:	mov	r1, #4
   171a4:	ldr	r3, [r4]
   171a8:	str	r3, [sp, #4]
   171ac:	bl	11f74 <gcry_create_nonce@plt>
   171b0:	ldr	r2, [sp, #4]
   171b4:	ldr	r3, [r4]
   171b8:	ldr	r0, [sp]
   171bc:	cmp	r2, r3
   171c0:	bne	171cc <__assert_fail@plt+0x5198>
   171c4:	add	sp, sp, #8
   171c8:	pop	{r4, pc}
   171cc:	bl	11bc0 <__stack_chk_fail@plt>
   171d0:	ldrdeq	lr, [r2], -r0
   171d4:	b	11b9c <sleep@plt>
   171d8:	push	{r4, r5, r6, lr}
   171dc:	sub	sp, sp, #24
   171e0:	ldr	r6, [pc, #144]	; 17278 <__assert_fail@plt+0x5244>
   171e4:	cmp	r0, #0
   171e8:	ldr	r3, [r6]
   171ec:	str	r3, [sp, #20]
   171f0:	beq	1725c <__assert_fail@plt+0x5228>
   171f4:	ldr	r3, [pc, #128]	; 1727c <__assert_fail@plt+0x5248>
   171f8:	add	r5, sp, #12
   171fc:	add	r4, sp, #4
   17200:	umull	r2, r3, r3, r0
   17204:	lsr	r3, r3, #18
   17208:	str	r3, [sp, #4]
   1720c:	rsb	r2, r3, r3, lsl #5
   17210:	rsb	r2, r2, r2, lsl #6
   17214:	add	r3, r3, r2, lsl #3
   17218:	sub	r0, r0, r3, lsl #6
   1721c:	rsb	r3, r0, r0, lsl #5
   17220:	add	r0, r0, r3, lsl #2
   17224:	lsl	r0, r0, #3
   17228:	str	r0, [sp, #8]
   1722c:	b	17248 <__assert_fail@plt+0x5214>
   17230:	bl	11ddc <__errno_location@plt>
   17234:	ldr	r3, [r0]
   17238:	cmp	r3, #4
   1723c:	bne	1725c <__assert_fail@plt+0x5228>
   17240:	ldm	r5, {r0, r1}
   17244:	stm	r4, {r0, r1}
   17248:	mov	r1, r5
   1724c:	mov	r0, r4
   17250:	bl	11b48 <nanosleep@plt>
   17254:	cmp	r0, #0
   17258:	blt	17230 <__assert_fail@plt+0x51fc>
   1725c:	ldr	r2, [sp, #20]
   17260:	ldr	r3, [r6]
   17264:	cmp	r2, r3
   17268:	bne	17274 <__assert_fail@plt+0x5240>
   1726c:	add	sp, sp, #24
   17270:	pop	{r4, r5, r6, pc}
   17274:	bl	11bc0 <__stack_chk_fail@plt>
   17278:	ldrdeq	lr, [r2], -r0
   1727c:	tstmi	fp, #2096	; 0x830
   17280:	bx	lr
   17284:	bx	lr
   17288:	ldr	r3, [pc, #184]	; 17348 <__assert_fail@plt+0x5314>
   1728c:	ldr	r3, [r3]
   17290:	cmp	r3, #0
   17294:	cmpne	r0, #0
   17298:	beq	17340 <__assert_fail@plt+0x530c>
   1729c:	ldrb	r3, [r0]
   172a0:	cmp	r3, #45	; 0x2d
   172a4:	bne	17340 <__assert_fail@plt+0x530c>
   172a8:	ldrb	r3, [r0, #1]
   172ac:	cmp	r3, #38	; 0x26
   172b0:	bne	17340 <__assert_fail@plt+0x530c>
   172b4:	ldrb	r3, [r0, #2]
   172b8:	add	r0, r0, #2
   172bc:	sub	r1, r3, #48	; 0x30
   172c0:	cmp	r1, #9
   172c4:	bhi	17318 <__assert_fail@plt+0x52e4>
   172c8:	mov	ip, r0
   172cc:	push	{lr}		; (str lr, [sp, #-4]!)
   172d0:	ldrb	r3, [ip, #1]!
   172d4:	sub	lr, r3, #48	; 0x30
   172d8:	cmp	lr, #9
   172dc:	bls	172d0 <__assert_fail@plt+0x529c>
   172e0:	cmp	r3, #0
   172e4:	bne	17310 <__assert_fail@plt+0x52dc>
   172e8:	cmp	r2, #0
   172ec:	beq	17300 <__assert_fail@plt+0x52cc>
   172f0:	mov	r1, r3
   172f4:	mov	r2, #10
   172f8:	pop	{lr}		; (ldr lr, [sp], #4)
   172fc:	b	11ac4 <strtol@plt>
   17300:	mov	r1, r2
   17304:	pop	{lr}		; (ldr lr, [sp], #4)
   17308:	mov	r2, #10
   1730c:	b	11ac4 <strtol@plt>
   17310:	mvn	r0, #0
   17314:	pop	{pc}		; (ldr pc, [sp], #4)
   17318:	cmp	r3, #0
   1731c:	bne	17340 <__assert_fail@plt+0x530c>
   17320:	cmp	r2, #0
   17324:	beq	17334 <__assert_fail@plt+0x5300>
   17328:	mov	r1, r3
   1732c:	mov	r2, #10
   17330:	b	11ac4 <strtol@plt>
   17334:	mov	r1, r2
   17338:	mov	r2, #10
   1733c:	b	11ac4 <strtol@plt>
   17340:	mvn	r0, #0
   17344:	bx	lr
   17348:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   1734c:	b	11c08 <tmpfile64@plt>
   17350:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17354:	mov	r1, #1
   17358:	mov	r8, r0
   1735c:	mov	r0, #0
   17360:	bl	11ec0 <fcntl64@plt>
   17364:	cmn	r0, #1
   17368:	beq	174ac <__assert_fail@plt+0x5478>
   1736c:	mov	r6, #0
   17370:	mov	r1, #1
   17374:	mov	r0, r1
   17378:	bl	11ec0 <fcntl64@plt>
   1737c:	cmn	r0, #1
   17380:	beq	174d8 <__assert_fail@plt+0x54a4>
   17384:	mov	r4, #0
   17388:	mov	r1, #1
   1738c:	mov	r0, #2
   17390:	bl	11ec0 <fcntl64@plt>
   17394:	cmn	r0, #1
   17398:	beq	17408 <__assert_fail@plt+0x53d4>
   1739c:	ldr	r3, [pc, #392]	; 1752c <__assert_fail@plt+0x54f8>
   173a0:	cmp	r4, #2
   173a4:	cmpne	r6, #2
   173a8:	moveq	r7, #1
   173ac:	ldr	r5, [r3]
   173b0:	movne	r7, #0
   173b4:	mov	r9, #0
   173b8:	cmp	r5, #0
   173bc:	beq	173fc <__assert_fail@plt+0x53c8>
   173c0:	cmp	r6, #1
   173c4:	beq	17454 <__assert_fail@plt+0x5420>
   173c8:	cmp	r4, #1
   173cc:	beq	17470 <__assert_fail@plt+0x543c>
   173d0:	cmp	r9, #1
   173d4:	beq	1748c <__assert_fail@plt+0x5458>
   173d8:	cmp	r7, #0
   173dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   173e0:	mov	r3, r8
   173e4:	mov	r0, r5
   173e8:	ldr	r2, [pc, #320]	; 17530 <__assert_fail@plt+0x54fc>
   173ec:	mov	r1, #1
   173f0:	bl	11e60 <__fprintf_chk@plt>
   173f4:	mov	r0, #3
   173f8:	bl	11d4c <exit@plt>
   173fc:	cmp	r7, #0
   17400:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17404:	b	173f4 <__assert_fail@plt+0x53c0>
   17408:	bl	11ddc <__errno_location@plt>
   1740c:	ldr	r3, [r0]
   17410:	cmp	r3, #9
   17414:	bne	1739c <__assert_fail@plt+0x5368>
   17418:	mov	r1, #1
   1741c:	ldr	r0, [pc, #272]	; 17534 <__assert_fail@plt+0x5500>
   17420:	bl	11c8c <open64@plt>
   17424:	cmp	r0, #2
   17428:	beq	17504 <__assert_fail@plt+0x54d0>
   1742c:	cmp	r4, #0
   17430:	bne	173f4 <__assert_fail@plt+0x53c0>
   17434:	ldr	r3, [pc, #252]	; 17538 <__assert_fail@plt+0x5504>
   17438:	ldr	r5, [r3]
   1743c:	cmp	r5, #0
   17440:	beq	173f4 <__assert_fail@plt+0x53c0>
   17444:	cmp	r6, #1
   17448:	bne	173e0 <__assert_fail@plt+0x53ac>
   1744c:	mov	r7, r6
   17450:	mov	r9, #2
   17454:	mov	r3, r8
   17458:	ldr	r2, [pc, #220]	; 1753c <__assert_fail@plt+0x5508>
   1745c:	mov	r1, #1
   17460:	mov	r0, r5
   17464:	bl	11e60 <__fprintf_chk@plt>
   17468:	cmp	r4, #1
   1746c:	bne	173d0 <__assert_fail@plt+0x539c>
   17470:	mov	r1, r4
   17474:	mov	r3, r8
   17478:	ldr	r2, [pc, #192]	; 17540 <__assert_fail@plt+0x550c>
   1747c:	mov	r0, r5
   17480:	bl	11e60 <__fprintf_chk@plt>
   17484:	cmp	r9, #1
   17488:	bne	173d8 <__assert_fail@plt+0x53a4>
   1748c:	mov	r1, r9
   17490:	mov	r3, r8
   17494:	ldr	r2, [pc, #168]	; 17544 <__assert_fail@plt+0x5510>
   17498:	mov	r0, r5
   1749c:	bl	11e60 <__fprintf_chk@plt>
   174a0:	cmp	r7, #0
   174a4:	bne	173e0 <__assert_fail@plt+0x53ac>
   174a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174ac:	bl	11ddc <__errno_location@plt>
   174b0:	ldr	r3, [r0]
   174b4:	cmp	r3, #9
   174b8:	bne	1736c <__assert_fail@plt+0x5338>
   174bc:	mov	r1, #0
   174c0:	ldr	r0, [pc, #108]	; 17534 <__assert_fail@plt+0x5500>
   174c4:	bl	11c8c <open64@plt>
   174c8:	cmp	r0, #0
   174cc:	moveq	r6, #1
   174d0:	movne	r6, #2
   174d4:	b	17370 <__assert_fail@plt+0x533c>
   174d8:	bl	11ddc <__errno_location@plt>
   174dc:	ldr	r3, [r0]
   174e0:	cmp	r3, #9
   174e4:	bne	17384 <__assert_fail@plt+0x5350>
   174e8:	mov	r1, #1
   174ec:	ldr	r0, [pc, #64]	; 17534 <__assert_fail@plt+0x5500>
   174f0:	bl	11c8c <open64@plt>
   174f4:	cmp	r0, #1
   174f8:	mov	r4, r0
   174fc:	movne	r4, #2
   17500:	b	17388 <__assert_fail@plt+0x5354>
   17504:	cmp	r4, #2
   17508:	cmpne	r6, #2
   1750c:	moveq	r7, #1
   17510:	movne	r7, #0
   17514:	cmp	r4, #0
   17518:	bne	173fc <__assert_fail@plt+0x53c8>
   1751c:	ldr	r3, [pc, #20]	; 17538 <__assert_fail@plt+0x5504>
   17520:	mov	r9, #1
   17524:	ldr	r5, [r3]
   17528:	b	173b8 <__assert_fail@plt+0x5384>
   1752c:	andeq	pc, r2, r8, asr #1
   17530:	andeq	sp, r1, r4, ror #7
   17534:	andeq	sp, r1, r0, ror #6
   17538:	ldrdeq	pc, [r2], -r4
   1753c:	andeq	sp, r1, ip, ror #6
   17540:	muleq	r1, r4, r3
   17544:			; <UNDEFINED> instruction: 0x0001d3bc
   17548:	subs	r2, r0, #0
   1754c:	bxne	lr
   17550:	ldr	r1, [pc, #4]	; 1755c <__assert_fail@plt+0x5528>
   17554:	ldr	r0, [pc, #4]	; 17560 <__assert_fail@plt+0x552c>
   17558:	b	16b48 <__assert_fail@plt+0x4b14>
   1755c:	andeq	sp, r1, r4, lsr #8
   17560:	andeq	sp, r1, r8, asr #8
   17564:	b	11f5c <remove@plt>
   17568:	push	{r4, r5, r6, r7, r8, lr}
   1756c:	subs	r8, r2, #0
   17570:	mov	r6, r0
   17574:	mov	r7, r1
   17578:	beq	1762c <__assert_fail@plt+0x55f8>
   1757c:	ldr	r3, [r8]
   17580:	cmp	r3, #0
   17584:	bne	17624 <__assert_fail@plt+0x55f0>
   17588:	mov	r1, r7
   1758c:	mov	r0, r6
   17590:	bl	11d10 <rename@plt>
   17594:	cmp	r0, #0
   17598:	bne	175a8 <__assert_fail@plt+0x5574>
   1759c:	mov	r4, #0
   175a0:	mov	r0, r4
   175a4:	pop	{r4, r5, r6, r7, r8, pc}
   175a8:	ldr	r3, [pc, #184]	; 17668 <__assert_fail@plt+0x5634>
   175ac:	ldr	r4, [r3]
   175b0:	bl	11db8 <gpg_err_code_from_syserror@plt>
   175b4:	cmp	r0, #0
   175b8:	beq	1759c <__assert_fail@plt+0x5568>
   175bc:	ldr	r3, [r8]
   175c0:	lsl	r4, r4, #24
   175c4:	and	r4, r4, #2130706432	; 0x7f000000
   175c8:	uxth	r0, r0
   175cc:	cmp	r3, #0
   175d0:	orr	r4, r4, r0
   175d4:	beq	1765c <__assert_fail@plt+0x5628>
   175d8:	cmp	r4, #0
   175dc:	beq	1759c <__assert_fail@plt+0x5568>
   175e0:	bl	18034 <__assert_fail@plt+0x6000>
   175e4:	mov	r3, #0
   175e8:	str	r3, [r8]
   175ec:	mov	r2, #5
   175f0:	ldr	r1, [pc, #116]	; 1766c <__assert_fail@plt+0x5638>
   175f4:	mov	r0, #0
   175f8:	bl	11bb4 <dcgettext@plt>
   175fc:	mov	r5, r0
   17600:	mov	r0, r4
   17604:	bl	11f20 <gpg_strerror@plt>
   17608:	mov	r2, r7
   1760c:	mov	r1, r6
   17610:	mov	r3, r0
   17614:	mov	r0, r5
   17618:	bl	16bac <__assert_fail@plt+0x4b78>
   1761c:	mov	r0, r4
   17620:	pop	{r4, r5, r6, r7, r8, pc}
   17624:	bl	17fc0 <__assert_fail@plt+0x5f8c>
   17628:	b	17588 <__assert_fail@plt+0x5554>
   1762c:	bl	11d10 <rename@plt>
   17630:	cmp	r0, #0
   17634:	beq	1759c <__assert_fail@plt+0x5568>
   17638:	ldr	r3, [pc, #40]	; 17668 <__assert_fail@plt+0x5634>
   1763c:	ldr	r4, [r3]
   17640:	bl	11db8 <gpg_err_code_from_syserror@plt>
   17644:	cmp	r0, #0
   17648:	beq	1759c <__assert_fail@plt+0x5568>
   1764c:	lsl	r4, r4, #24
   17650:	and	r4, r4, #2130706432	; 0x7f000000
   17654:	uxth	r0, r0
   17658:	orr	r4, r4, r0
   1765c:	cmp	r4, #0
   17660:	bne	175ec <__assert_fail@plt+0x55b8>
   17664:	b	1759c <__assert_fail@plt+0x5568>
   17668:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   1766c:	andeq	sp, r1, r8, ror #8
   17670:	subs	r3, r1, #0
   17674:	push	{r4, lr}
   17678:	moveq	r1, r3
   1767c:	mov	r4, r0
   17680:	beq	1769c <__assert_fail@plt+0x5668>
   17684:	ldrb	r1, [r3]
   17688:	cmp	r1, #0
   1768c:	beq	1769c <__assert_fail@plt+0x5668>
   17690:	mov	r0, r3
   17694:	bl	16f58 <__assert_fail@plt+0x4f24>
   17698:	mov	r1, r0
   1769c:	mov	r0, r4
   176a0:	pop	{r4, lr}
   176a4:	b	11e0c <mkdir@plt>
   176a8:	b	11c14 <chdir@plt>
   176ac:	subs	r3, r1, #0
   176b0:	push	{r4, lr}
   176b4:	moveq	r1, r3
   176b8:	mov	r4, r0
   176bc:	beq	176d8 <__assert_fail@plt+0x56a4>
   176c0:	ldrb	r1, [r3]
   176c4:	cmp	r1, #0
   176c8:	beq	176d8 <__assert_fail@plt+0x56a4>
   176cc:	mov	r0, r3
   176d0:	bl	16f58 <__assert_fail@plt+0x4f24>
   176d4:	mov	r1, r0
   176d8:	mov	r0, r4
   176dc:	pop	{r4, lr}
   176e0:	b	11fa4 <chmod@plt>
   176e4:	ldr	r3, [pc, #476]	; 178c8 <__assert_fail@plt+0x5894>
   176e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176ec:	sub	sp, sp, #28
   176f0:	ldr	r3, [r3]
   176f4:	mov	r9, r0
   176f8:	str	r3, [sp, #20]
   176fc:	bl	11d88 <strlen@plt>
   17700:	cmp	r0, #5
   17704:	bls	1789c <__assert_fail@plt+0x5868>
   17708:	sub	r0, r0, #6
   1770c:	add	r6, r9, r0
   17710:	mov	r0, r6
   17714:	ldr	r1, [pc, #432]	; 178cc <__assert_fail@plt+0x5898>
   17718:	bl	11aac <strcmp@plt>
   1771c:	cmp	r0, #0
   17720:	bne	1789c <__assert_fail@plt+0x5868>
   17724:	bl	11ddc <__errno_location@plt>
   17728:	mov	r1, #8
   1772c:	ldr	r8, [pc, #412]	; 178d0 <__assert_fail@plt+0x589c>
   17730:	ldr	r7, [pc, #412]	; 178d4 <__assert_fail@plt+0x58a0>
   17734:	ldr	fp, [pc, #412]	; 178d8 <__assert_fail@plt+0x58a4>
   17738:	mov	sl, r0
   1773c:	add	r0, sp, r1
   17740:	ldr	r3, [sl]
   17744:	str	r3, [sp, #4]
   17748:	bl	11f74 <gcry_create_nonce@plt>
   1774c:	ldrd	r4, [sp, #8]
   17750:	b	1777c <__assert_fail@plt+0x5748>
   17754:	ldr	r0, [sl]
   17758:	cmp	r0, #17
   1775c:	bne	178ac <__assert_fail@plt+0x5878>
   17760:	ldrd	r4, [sp, #8]
   17764:	ldr	r3, [pc, #368]	; 178dc <__assert_fail@plt+0x58a8>
   17768:	adds	r4, r4, r3
   1776c:	adc	r5, r5, #0
   17770:	subs	r8, r8, #1
   17774:	strd	r4, [sp, #8]
   17778:	beq	178a0 <__assert_fail@plt+0x586c>
   1777c:	mov	r2, #62	; 0x3e
   17780:	mov	r3, #0
   17784:	mov	r0, r4
   17788:	mov	r1, r5
   1778c:	bl	1c360 <__assert_fail@plt+0xa32c>
   17790:	mov	r3, #0
   17794:	mov	r0, r4
   17798:	mov	r1, r5
   1779c:	ldrb	ip, [r7, r2]
   177a0:	mov	r2, #62	; 0x3e
   177a4:	strb	ip, [r6]
   177a8:	bl	1c360 <__assert_fail@plt+0xa32c>
   177ac:	mov	r2, #62	; 0x3e
   177b0:	mov	r3, #0
   177b4:	bl	1c360 <__assert_fail@plt+0xa32c>
   177b8:	mov	r3, #0
   177bc:	mov	r0, r4
   177c0:	mov	r1, r5
   177c4:	ldrb	ip, [r7, r2]
   177c8:	ldr	r2, [pc, #272]	; 178e0 <__assert_fail@plt+0x58ac>
   177cc:	strb	ip, [r6, #1]
   177d0:	bl	1c360 <__assert_fail@plt+0xa32c>
   177d4:	mov	r2, #62	; 0x3e
   177d8:	mov	r3, #0
   177dc:	bl	1c360 <__assert_fail@plt+0xa32c>
   177e0:	mov	r3, #0
   177e4:	mov	r0, r4
   177e8:	mov	r1, r5
   177ec:	ldrb	ip, [r7, r2]
   177f0:	ldr	r2, [pc, #216]	; 178d0 <__assert_fail@plt+0x589c>
   177f4:	strb	ip, [r6, #2]
   177f8:	bl	1c360 <__assert_fail@plt+0xa32c>
   177fc:	mov	r2, #62	; 0x3e
   17800:	mov	r3, #0
   17804:	bl	1c360 <__assert_fail@plt+0xa32c>
   17808:	mov	r0, r4
   1780c:	mov	r1, r5
   17810:	ldrb	ip, [r7, r2]
   17814:	add	r3, pc, #156	; 0x9c
   17818:	ldrd	r2, [r3]
   1781c:	strb	ip, [r6, #3]
   17820:	bl	1c360 <__assert_fail@plt+0xa32c>
   17824:	mov	r2, #62	; 0x3e
   17828:	mov	r3, #0
   1782c:	bl	1c360 <__assert_fail@plt+0xa32c>
   17830:	mov	r0, r4
   17834:	mov	r1, r5
   17838:	ldrb	ip, [r7, r2]
   1783c:	add	r3, pc, #124	; 0x7c
   17840:	ldrd	r2, [r3]
   17844:	strb	ip, [r6, #4]
   17848:	bl	1c360 <__assert_fail@plt+0xa32c>
   1784c:	mov	r2, #62	; 0x3e
   17850:	mov	r3, #0
   17854:	bl	1c360 <__assert_fail@plt+0xa32c>
   17858:	mov	r1, fp
   1785c:	mov	r0, r9
   17860:	ldrb	r3, [r7, r2]
   17864:	strb	r3, [r6, #5]
   17868:	bl	17670 <__assert_fail@plt+0x563c>
   1786c:	cmp	r0, #0
   17870:	bne	17754 <__assert_fail@plt+0x5720>
   17874:	ldr	r0, [sp, #4]
   17878:	bl	11f14 <gpg_err_set_errno@plt>
   1787c:	mov	r0, r9
   17880:	ldr	r3, [pc, #64]	; 178c8 <__assert_fail@plt+0x5894>
   17884:	ldr	r2, [sp, #20]
   17888:	ldr	r3, [r3]
   1788c:	cmp	r2, r3
   17890:	bne	178b4 <__assert_fail@plt+0x5880>
   17894:	add	sp, sp, #28
   17898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1789c:	mov	r0, #22
   178a0:	bl	11f14 <gpg_err_set_errno@plt>
   178a4:	mov	r0, #0
   178a8:	b	17880 <__assert_fail@plt+0x584c>
   178ac:	mov	r0, #0
   178b0:	b	17880 <__assert_fail@plt+0x584c>
   178b4:	bl	11bc0 <__stack_chk_fail@plt>
   178b8:	rsceq	r7, r1, r0, lsl r8
   178bc:	andeq	r0, r0, r0
   178c0:	ldrcc	r1, [fp], r0, ror #7
   178c4:	andeq	r0, r0, r0
   178c8:	ldrdeq	lr, [r2], -r0
   178cc:	andeq	sp, r1, ip, lsl #9
   178d0:	strdeq	sl, [r3], -r8
   178d4:	andeq	sp, r1, r0, lsl #6
   178d8:	muleq	r1, r4, r4
   178dc:	andeq	r1, r0, r1, ror #28
   178e0:	andeq	r0, r0, r4, lsl #30
   178e4:	b	11dac <setenv@plt>
   178e8:	b	11fc8 <unsetenv@plt>
   178ec:	push	{r4, r5, r6, lr}
   178f0:	mov	r4, #100	; 0x64
   178f4:	b	17920 <__assert_fail@plt+0x58ec>
   178f8:	bl	11d34 <getcwd@plt>
   178fc:	mov	r3, r0
   17900:	cmp	r5, r3
   17904:	mov	r0, r5
   17908:	beq	1793c <__assert_fail@plt+0x5908>
   1790c:	bl	11b84 <gcry_free@plt>
   17910:	bl	11ddc <__errno_location@plt>
   17914:	ldr	r3, [r0]
   17918:	cmp	r3, #34	; 0x22
   1791c:	bne	17938 <__assert_fail@plt+0x5904>
   17920:	add	r0, r4, #1
   17924:	bl	11a7c <gcry_malloc@plt>
   17928:	mov	r1, r4
   1792c:	lsl	r4, r4, #1
   17930:	subs	r5, r0, #0
   17934:	bne	178f8 <__assert_fail@plt+0x58c4>
   17938:	mov	r3, #0
   1793c:	mov	r0, r3
   17940:	pop	{r4, r5, r6, pc}
   17944:	push	{r4, r5, r6, lr}
   17948:	mvn	r3, #0
   1794c:	subs	r4, r1, #0
   17950:	str	r3, [r0]
   17954:	beq	17990 <__assert_fail@plt+0x595c>
   17958:	mov	r5, r0
   1795c:	bl	11d94 <inotify_init@plt>
   17960:	cmn	r0, #1
   17964:	mov	r6, r0
   17968:	beq	179d8 <__assert_fail@plt+0x59a4>
   1796c:	mov	r1, r4
   17970:	mov	r2, #1024	; 0x400
   17974:	bl	11dd0 <inotify_add_watch@plt>
   17978:	cmn	r0, #1
   1797c:	movne	r4, #0
   17980:	strne	r6, [r5]
   17984:	beq	179ac <__assert_fail@plt+0x5978>
   17988:	mov	r0, r4
   1798c:	pop	{r4, r5, r6, pc}
   17990:	ldr	r3, [pc, #100]	; 179fc <__assert_fail@plt+0x59c8>
   17994:	ldr	r4, [r3]
   17998:	lsl	r4, r4, #24
   1799c:	and	r4, r4, #2130706432	; 0x7f000000
   179a0:	orr	r4, r4, #55	; 0x37
   179a4:	mov	r0, r4
   179a8:	pop	{r4, r5, r6, pc}
   179ac:	ldr	r3, [pc, #72]	; 179fc <__assert_fail@plt+0x59c8>
   179b0:	ldr	r5, [r3]
   179b4:	bl	11db8 <gpg_err_code_from_syserror@plt>
   179b8:	subs	r4, r0, #0
   179bc:	lslne	r5, r5, #24
   179c0:	andne	r5, r5, #2130706432	; 0x7f000000
   179c4:	uxthne	r4, r4
   179c8:	mov	r0, r6
   179cc:	orrne	r4, r5, r4
   179d0:	bl	12010 <close@plt>
   179d4:	b	17988 <__assert_fail@plt+0x5954>
   179d8:	ldr	r3, [pc, #28]	; 179fc <__assert_fail@plt+0x59c8>
   179dc:	ldr	r5, [r3]
   179e0:	bl	11db8 <gpg_err_code_from_syserror@plt>
   179e4:	subs	r4, r0, #0
   179e8:	lslne	r5, r5, #24
   179ec:	andne	r5, r5, #2130706432	; 0x7f000000
   179f0:	uxthne	r4, r4
   179f4:	orrne	r4, r5, r4
   179f8:	b	17988 <__assert_fail@plt+0x5954>
   179fc:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   17a00:	mvn	r3, #0
   17a04:	cmp	r1, #0
   17a08:	push	{r4, r5, r6, r7, r8, lr}
   17a0c:	str	r3, [r0]
   17a10:	beq	17a80 <__assert_fail@plt+0x5a4c>
   17a14:	mov	r5, r0
   17a18:	mov	r0, r1
   17a1c:	bl	1201c <gcry_strdup@plt>
   17a20:	subs	r6, r0, #0
   17a24:	beq	17ad4 <__assert_fail@plt+0x5aa0>
   17a28:	bl	11d94 <inotify_init@plt>
   17a2c:	cmn	r0, #1
   17a30:	mov	r7, r0
   17a34:	beq	17af8 <__assert_fail@plt+0x5ac4>
   17a38:	mov	r1, #47	; 0x2f
   17a3c:	mov	r0, r6
   17a40:	bl	11ef0 <strrchr@plt>
   17a44:	ldr	r2, [pc, #208]	; 17b1c <__assert_fail@plt+0x5ae8>
   17a48:	mov	r1, r6
   17a4c:	cmp	r0, #0
   17a50:	movne	r3, #0
   17a54:	strbne	r3, [r0]
   17a58:	mov	r0, r7
   17a5c:	bl	11dd0 <inotify_add_watch@plt>
   17a60:	cmn	r0, #1
   17a64:	beq	17a9c <__assert_fail@plt+0x5a68>
   17a68:	mov	r4, #0
   17a6c:	mov	r0, r6
   17a70:	bl	11b84 <gcry_free@plt>
   17a74:	str	r7, [r5]
   17a78:	mov	r0, r4
   17a7c:	pop	{r4, r5, r6, r7, r8, pc}
   17a80:	ldr	r3, [pc, #152]	; 17b20 <__assert_fail@plt+0x5aec>
   17a84:	ldr	r4, [r3]
   17a88:	lsl	r4, r4, #24
   17a8c:	and	r4, r4, #2130706432	; 0x7f000000
   17a90:	orr	r4, r4, #55	; 0x37
   17a94:	mov	r0, r4
   17a98:	pop	{r4, r5, r6, r7, r8, pc}
   17a9c:	ldr	r3, [pc, #124]	; 17b20 <__assert_fail@plt+0x5aec>
   17aa0:	ldr	r5, [r3]
   17aa4:	bl	11db8 <gpg_err_code_from_syserror@plt>
   17aa8:	subs	r4, r0, #0
   17aac:	lslne	r5, r5, #24
   17ab0:	andne	r5, r5, #2130706432	; 0x7f000000
   17ab4:	uxthne	r4, r4
   17ab8:	mov	r0, r7
   17abc:	orrne	r4, r5, r4
   17ac0:	bl	12010 <close@plt>
   17ac4:	mov	r0, r6
   17ac8:	bl	11b84 <gcry_free@plt>
   17acc:	mov	r0, r4
   17ad0:	pop	{r4, r5, r6, r7, r8, pc}
   17ad4:	ldr	r3, [pc, #68]	; 17b20 <__assert_fail@plt+0x5aec>
   17ad8:	ldr	r5, [r3]
   17adc:	bl	11db8 <gpg_err_code_from_syserror@plt>
   17ae0:	subs	r4, r0, #0
   17ae4:	lslne	r5, r5, #24
   17ae8:	andne	r5, r5, #2130706432	; 0x7f000000
   17aec:	uxthne	r4, r4
   17af0:	orrne	r4, r5, r4
   17af4:	b	17a78 <__assert_fail@plt+0x5a44>
   17af8:	ldr	r3, [pc, #32]	; 17b20 <__assert_fail@plt+0x5aec>
   17afc:	ldr	r5, [r3]
   17b00:	bl	11db8 <gpg_err_code_from_syserror@plt>
   17b04:	subs	r4, r0, #0
   17b08:	lslne	r5, r5, #24
   17b0c:	andne	r5, r5, #2130706432	; 0x7f000000
   17b10:	uxthne	r4, r4
   17b14:	orrne	r4, r5, r4
   17b18:	b	17ac4 <__assert_fail@plt+0x5a90>
   17b1c:	streq	r0, [r0], #-1536	; 0xfffffa00
   17b20:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   17b24:	mov	r0, #0
   17b28:	bx	lr
   17b2c:	push	{r4, r5, r6, r7, r8, lr}
   17b30:	sub	sp, sp, #120	; 0x78
   17b34:	ldr	r5, [pc, #316]	; 17c78 <__assert_fail@plt+0x5c44>
   17b38:	mov	r4, #110	; 0x6e
   17b3c:	mov	r2, sp
   17b40:	ldr	r3, [r5]
   17b44:	add	r1, sp, #4
   17b48:	str	r3, [sp, #116]	; 0x74
   17b4c:	str	r4, [sp]
   17b50:	mov	r8, r0
   17b54:	bl	11f44 <getsockname@plt>
   17b58:	subs	r7, r0, #0
   17b5c:	bne	17be8 <__assert_fail@plt+0x5bb4>
   17b60:	ldrh	r3, [sp, #4]
   17b64:	cmp	r3, #1
   17b68:	bne	17bc0 <__assert_fail@plt+0x5b8c>
   17b6c:	ldr	r3, [sp]
   17b70:	cmp	r3, #2
   17b74:	bls	17bd4 <__assert_fail@plt+0x5ba0>
   17b78:	cmp	r3, #110	; 0x6e
   17b7c:	bhi	17c24 <__assert_fail@plt+0x5bf0>
   17b80:	sub	r0, r3, #1
   17b84:	sub	r4, r3, #2
   17b88:	bl	11a7c <gcry_malloc@plt>
   17b8c:	subs	r6, r0, #0
   17b90:	beq	17c3c <__assert_fail@plt+0x5c08>
   17b94:	mov	r2, r4
   17b98:	add	r1, sp, #6
   17b9c:	bl	11b6c <memcpy@plt>
   17ba0:	strb	r7, [r6, r4]
   17ba4:	ldr	r2, [sp, #116]	; 0x74
   17ba8:	ldr	r3, [r5]
   17bac:	mov	r0, r6
   17bb0:	cmp	r2, r3
   17bb4:	bne	17c74 <__assert_fail@plt+0x5c40>
   17bb8:	add	sp, sp, #120	; 0x78
   17bbc:	pop	{r4, r5, r6, r7, r8, pc}
   17bc0:	mov	r1, r8
   17bc4:	ldr	r0, [pc, #176]	; 17c7c <__assert_fail@plt+0x5c48>
   17bc8:	mov	r6, r7
   17bcc:	bl	16bac <__assert_fail@plt+0x4b78>
   17bd0:	b	17ba4 <__assert_fail@plt+0x5b70>
   17bd4:	mov	r1, r8
   17bd8:	ldr	r0, [pc, #160]	; 17c80 <__assert_fail@plt+0x5c4c>
   17bdc:	mov	r6, r7
   17be0:	bl	16bac <__assert_fail@plt+0x4b78>
   17be4:	b	17ba4 <__assert_fail@plt+0x5b70>
   17be8:	ldr	r3, [pc, #148]	; 17c84 <__assert_fail@plt+0x5c50>
   17bec:	mov	r6, #0
   17bf0:	ldr	r4, [r3]
   17bf4:	bl	11db8 <gpg_err_code_from_syserror@plt>
   17bf8:	cmp	r0, #0
   17bfc:	lslne	r4, r4, #24
   17c00:	andne	r4, r4, #2130706432	; 0x7f000000
   17c04:	uxthne	r0, r0
   17c08:	orrne	r0, r4, r0
   17c0c:	bl	11f20 <gpg_strerror@plt>
   17c10:	mov	r1, r8
   17c14:	mov	r2, r0
   17c18:	ldr	r0, [pc, #104]	; 17c88 <__assert_fail@plt+0x5c54>
   17c1c:	bl	16bac <__assert_fail@plt+0x4b78>
   17c20:	b	17ba4 <__assert_fail@plt+0x5b70>
   17c24:	mov	r2, r4
   17c28:	mov	r1, r8
   17c2c:	ldr	r0, [pc, #88]	; 17c8c <__assert_fail@plt+0x5c58>
   17c30:	mov	r6, r7
   17c34:	bl	16bac <__assert_fail@plt+0x4b78>
   17c38:	b	17ba4 <__assert_fail@plt+0x5b70>
   17c3c:	ldr	r3, [pc, #64]	; 17c84 <__assert_fail@plt+0x5c50>
   17c40:	ldr	r4, [r3]
   17c44:	bl	11db8 <gpg_err_code_from_syserror@plt>
   17c48:	cmp	r0, #0
   17c4c:	lslne	r4, r4, #24
   17c50:	andne	r4, r4, #2130706432	; 0x7f000000
   17c54:	uxthne	r0, r0
   17c58:	orrne	r0, r4, r0
   17c5c:	bl	11f20 <gpg_strerror@plt>
   17c60:	mov	r1, r8
   17c64:	mov	r2, r0
   17c68:	ldr	r0, [pc, #32]	; 17c90 <__assert_fail@plt+0x5c5c>
   17c6c:	bl	16bac <__assert_fail@plt+0x4b78>
   17c70:	b	17ba4 <__assert_fail@plt+0x5b70>
   17c74:	bl	11bc0 <__stack_chk_fail@plt>
   17c78:	ldrdeq	lr, [r2], -r0
   17c7c:			; <UNDEFINED> instruction: 0x0001d4bc
   17c80:	andeq	sp, r1, ip, ror #9
   17c84:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   17c88:	muleq	r1, ip, r4
   17c8c:	andeq	sp, r1, ip, lsl r5
   17c90:	andeq	sp, r1, ip, ror #10
   17c94:	push	{r4, lr}
   17c98:	bl	11bf0 <dup@plt>
   17c9c:	cmp	r0, #0
   17ca0:	blt	17cb0 <__assert_fail@plt+0x5c7c>
   17ca4:	bl	12010 <close@plt>
   17ca8:	mov	r0, #1
   17cac:	pop	{r4, pc}
   17cb0:	mov	r0, #0
   17cb4:	pop	{r4, pc}
   17cb8:	ldr	r3, [pc, #8]	; 17cc8 <__assert_fail@plt+0x5c94>
   17cbc:	mov	r2, #1
   17cc0:	str	r2, [r3]
   17cc4:	bx	lr
   17cc8:	andeq	pc, r2, r4, lsl #3
   17ccc:	push	{r4, r5, r6, lr}
   17cd0:	sub	sp, sp, #288	; 0x120
   17cd4:	ldr	r4, [pc, #108]	; 17d48 <__assert_fail@plt+0x5d14>
   17cd8:	cmp	r2, #0
   17cdc:	mov	r6, r1
   17ce0:	ldr	r3, [r4]
   17ce4:	mov	r5, r0
   17ce8:	str	r3, [sp, #284]	; 0x11c
   17cec:	beq	17d08 <__assert_fail@plt+0x5cd4>
   17cf0:	add	r2, sp, #4
   17cf4:	mov	r1, #0
   17cf8:	bl	11c38 <sigaction@plt>
   17cfc:	ldr	r3, [sp, #4]
   17d00:	cmp	r3, #1
   17d04:	beq	17d2c <__assert_fail@plt+0x5cf8>
   17d08:	add	r0, sp, #148	; 0x94
   17d0c:	str	r6, [sp, #144]	; 0x90
   17d10:	bl	11ed8 <sigemptyset@plt>
   17d14:	mov	r3, #0
   17d18:	mov	r0, r5
   17d1c:	add	r1, sp, #144	; 0x90
   17d20:	mov	r2, r3
   17d24:	str	r3, [sp, #276]	; 0x114
   17d28:	bl	11c38 <sigaction@plt>
   17d2c:	ldr	r2, [sp, #284]	; 0x11c
   17d30:	ldr	r3, [r4]
   17d34:	cmp	r2, r3
   17d38:	bne	17d44 <__assert_fail@plt+0x5d10>
   17d3c:	add	sp, sp, #288	; 0x120
   17d40:	pop	{r4, r5, r6, pc}
   17d44:	bl	11bc0 <__stack_chk_fail@plt>
   17d48:	ldrdeq	lr, [r2], -r0
   17d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d50:	mov	r7, r0
   17d54:	ldr	r4, [pc, #392]	; 17ee4 <__assert_fail@plt+0x5eb0>
   17d58:	sub	sp, sp, #12
   17d5c:	ldr	r3, [r4, #4]
   17d60:	cmp	r3, #0
   17d64:	bne	17ec4 <__assert_fail@plt+0x5e90>
   17d68:	ldr	r3, [r4, #8]
   17d6c:	mov	r2, #1
   17d70:	cmp	r3, #0
   17d74:	str	r2, [r4, #4]
   17d78:	beq	17d80 <__assert_fail@plt+0x5d4c>
   17d7c:	blx	r3
   17d80:	mov	r2, #1
   17d84:	ldr	r1, [pc, #348]	; 17ee8 <__assert_fail@plt+0x5eb4>
   17d88:	mov	r0, #2
   17d8c:	bl	11e48 <write@plt>
   17d90:	mov	r0, #0
   17d94:	bl	16958 <__assert_fail@plt+0x4924>
   17d98:	subs	r4, r0, #0
   17d9c:	beq	17db4 <__assert_fail@plt+0x5d80>
   17da0:	bl	11d88 <strlen@plt>
   17da4:	mov	r1, r4
   17da8:	mov	r2, r0
   17dac:	mov	r0, #2
   17db0:	bl	11e48 <write@plt>
   17db4:	mov	r2, #9
   17db8:	ldr	r1, [pc, #300]	; 17eec <__assert_fail@plt+0x5eb8>
   17dbc:	mov	r0, #2
   17dc0:	bl	11e48 <write@plt>
   17dc4:	cmp	r7, #64	; 0x40
   17dc8:	bhi	17e60 <__assert_fail@plt+0x5e2c>
   17dcc:	ldr	r3, [pc, #284]	; 17ef0 <__assert_fail@plt+0x5ebc>
   17dd0:	ldr	r1, [r3, r7, lsl #2]
   17dd4:	cmp	r1, #0
   17dd8:	bne	17ecc <__assert_fail@plt+0x5e98>
   17ddc:	ldr	r4, [pc, #272]	; 17ef4 <__assert_fail@plt+0x5ec0>
   17de0:	ldr	r9, [pc, #272]	; 17ef8 <__assert_fail@plt+0x5ec4>
   17de4:	ldr	r8, [pc, #272]	; 17efc <__assert_fail@plt+0x5ec8>
   17de8:	mov	r5, r1
   17dec:	mov	sl, r7
   17df0:	mov	r6, #5
   17df4:	cmp	r4, sl
   17df8:	and	r3, r5, #1
   17dfc:	mov	r1, r4
   17e00:	mov	r0, sl
   17e04:	ble	17ea0 <__assert_fail@plt+0x5e6c>
   17e08:	cmp	r4, #1
   17e0c:	orreq	r3, r3, #1
   17e10:	cmp	r3, #0
   17e14:	moveq	r5, r3
   17e18:	beq	17e48 <__assert_fail@plt+0x5e14>
   17e1c:	bl	1c04c <__assert_fail@plt+0xa018>
   17e20:	mov	r2, #1
   17e24:	mov	r1, r9
   17e28:	cmp	r0, #0
   17e2c:	mov	r0, #2
   17e30:	bne	17e48 <__assert_fail@plt+0x5e14>
   17e34:	bl	11e48 <write@plt>
   17e38:	mov	r0, sl
   17e3c:	mov	r1, r4
   17e40:	bl	1c26c <__assert_fail@plt+0xa238>
   17e44:	mov	sl, r1
   17e48:	smull	r2, r3, r8, r4
   17e4c:	subs	r6, r6, #1
   17e50:	asr	r4, r4, #31
   17e54:	rsb	r4, r4, r3, asr #2
   17e58:	bne	17df4 <__assert_fail@plt+0x5dc0>
   17e5c:	b	17e70 <__assert_fail@plt+0x5e3c>
   17e60:	ldr	r1, [pc, #152]	; 17f00 <__assert_fail@plt+0x5ecc>
   17e64:	mov	r2, #1
   17e68:	mov	r0, #2
   17e6c:	bl	11e48 <write@plt>
   17e70:	mov	r2, #20
   17e74:	ldr	r1, [pc, #136]	; 17f04 <__assert_fail@plt+0x5ed0>
   17e78:	mov	r0, #2
   17e7c:	bl	11e48 <write@plt>
   17e80:	mov	r2, #0
   17e84:	mov	r0, r7
   17e88:	mov	r1, r2
   17e8c:	bl	17ccc <__assert_fail@plt+0x5c98>
   17e90:	mov	r0, r7
   17e94:	add	sp, sp, #12
   17e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e9c:	b	11a64 <raise@plt>
   17ea0:	bl	1c04c <__assert_fail@plt+0xa018>
   17ea4:	mov	r2, #1
   17ea8:	mov	fp, r0
   17eac:	add	r1, r9, r0
   17eb0:	mov	r0, #2
   17eb4:	bl	11e48 <write@plt>
   17eb8:	cmp	fp, #0
   17ebc:	movne	r5, #1
   17ec0:	b	17e38 <__assert_fail@plt+0x5e04>
   17ec4:	bl	11a64 <raise@plt>
   17ec8:	b	17d68 <__assert_fail@plt+0x5d34>
   17ecc:	mov	r0, r1
   17ed0:	str	r1, [sp, #4]
   17ed4:	bl	11d88 <strlen@plt>
   17ed8:	ldr	r1, [sp, #4]
   17edc:	mov	r2, r0
   17ee0:	b	17e68 <__assert_fail@plt+0x5e34>
   17ee4:	andeq	pc, r2, r4, lsl #3
   17ee8:	andeq	ip, r1, r4, lsr #18
   17eec:			; <UNDEFINED> instruction: 0x0001d5b8
   17ef0:	ldrdeq	lr, [r2], -r4
   17ef4:	andeq	r2, r0, r0, lsl r7
   17ef8:	andeq	sp, r1, r4, asr #11
   17efc:	strbtvs	r6, [r6], -r7, ror #12
   17f00:			; <UNDEFINED> instruction: 0x0001d5b4
   17f04:	ldrdeq	sp, [r1], -r0
   17f08:	push	{r4, lr}
   17f0c:	subs	r4, r0, #0
   17f10:	bne	17f94 <__assert_fail@plt+0x5f60>
   17f14:	ldr	ip, [pc, #140]	; 17fa8 <__assert_fail@plt+0x5f74>
   17f18:	mov	r3, r1
   17f1c:	mov	r2, #1
   17f20:	ldr	r1, [pc, #132]	; 17fac <__assert_fail@plt+0x5f78>
   17f24:	mov	r0, #2
   17f28:	str	r3, [ip, #8]
   17f2c:	bl	17ccc <__assert_fail@plt+0x5c98>
   17f30:	mov	r2, #1
   17f34:	mov	r0, r2
   17f38:	ldr	r1, [pc, #108]	; 17fac <__assert_fail@plt+0x5f78>
   17f3c:	bl	17ccc <__assert_fail@plt+0x5c98>
   17f40:	mov	r2, #1
   17f44:	ldr	r1, [pc, #96]	; 17fac <__assert_fail@plt+0x5f78>
   17f48:	mov	r0, #15
   17f4c:	bl	17ccc <__assert_fail@plt+0x5c98>
   17f50:	mov	r2, #1
   17f54:	ldr	r1, [pc, #80]	; 17fac <__assert_fail@plt+0x5f78>
   17f58:	mov	r0, #3
   17f5c:	bl	17ccc <__assert_fail@plt+0x5c98>
   17f60:	mov	r2, #1
   17f64:	ldr	r1, [pc, #64]	; 17fac <__assert_fail@plt+0x5f78>
   17f68:	mov	r0, #11
   17f6c:	bl	17ccc <__assert_fail@plt+0x5c98>
   17f70:	mov	r2, r4
   17f74:	ldr	r1, [pc, #52]	; 17fb0 <__assert_fail@plt+0x5f7c>
   17f78:	mov	r0, #10
   17f7c:	bl	17ccc <__assert_fail@plt+0x5c98>
   17f80:	mov	r2, r4
   17f84:	mov	r1, #1
   17f88:	mov	r0, #13
   17f8c:	pop	{r4, lr}
   17f90:	b	17ccc <__assert_fail@plt+0x5c98>
   17f94:	ldr	r3, [pc, #24]	; 17fb4 <__assert_fail@plt+0x5f80>
   17f98:	mov	r2, #169	; 0xa9
   17f9c:	ldr	r1, [pc, #20]	; 17fb8 <__assert_fail@plt+0x5f84>
   17fa0:	ldr	r0, [pc, #20]	; 17fbc <__assert_fail@plt+0x5f88>
   17fa4:	bl	12034 <__assert_fail@plt>
   17fa8:	andeq	pc, r2, r4, lsl #3
   17fac:	andeq	r7, r1, ip, asr #26
   17fb0:			; <UNDEFINED> instruction: 0x00017cb8
   17fb4:	andeq	sp, r1, r0, lsr #11
   17fb8:	andeq	sp, r1, r8, ror #11
   17fbc:	andeq	sp, r1, r0, lsl #12
   17fc0:	push	{r4, r5, r6, lr}
   17fc4:	sub	sp, sp, #136	; 0x88
   17fc8:	ldr	r4, [pc, #88]	; 18028 <__assert_fail@plt+0x5ff4>
   17fcc:	ldr	r5, [pc, #88]	; 1802c <__assert_fail@plt+0x5ff8>
   17fd0:	ldr	r6, [r4, #12]
   17fd4:	ldr	r3, [r5]
   17fd8:	cmp	r6, #0
   17fdc:	str	r3, [sp, #132]	; 0x84
   17fe0:	bne	1801c <__assert_fail@plt+0x5fe8>
   17fe4:	add	r0, sp, #4
   17fe8:	bl	11dc4 <sigfillset@plt>
   17fec:	add	r1, sp, #4
   17ff0:	add	r2, r4, #16
   17ff4:	mov	r0, r6
   17ff8:	bl	11b18 <sigprocmask@plt>
   17ffc:	ldr	r1, [sp, #132]	; 0x84
   18000:	ldr	r2, [r5]
   18004:	mov	r3, #1
   18008:	cmp	r1, r2
   1800c:	str	r3, [r4, #12]
   18010:	bne	18024 <__assert_fail@plt+0x5ff0>
   18014:	add	sp, sp, #136	; 0x88
   18018:	pop	{r4, r5, r6, pc}
   1801c:	ldr	r0, [pc, #12]	; 18030 <__assert_fail@plt+0x5ffc>
   18020:	bl	16cb4 <__assert_fail@plt+0x4c80>
   18024:	bl	11bc0 <__stack_chk_fail@plt>
   18028:	andeq	pc, r2, r4, lsl #3
   1802c:	ldrdeq	lr, [r2], -r0
   18030:	andeq	sp, r1, r8, lsl #12
   18034:	push	{r4, lr}
   18038:	ldr	r4, [pc, #44]	; 1806c <__assert_fail@plt+0x6038>
   1803c:	ldr	r3, [r4, #12]
   18040:	cmp	r3, #0
   18044:	beq	18064 <__assert_fail@plt+0x6030>
   18048:	mov	r2, #0
   1804c:	add	r1, r4, #16
   18050:	mov	r0, #2
   18054:	bl	11b18 <sigprocmask@plt>
   18058:	mov	r3, #0
   1805c:	str	r3, [r4, #12]
   18060:	pop	{r4, pc}
   18064:	ldr	r0, [pc, #4]	; 18070 <__assert_fail@plt+0x603c>
   18068:	bl	16cb4 <__assert_fail@plt+0x4c80>
   1806c:	andeq	pc, r2, r4, lsl #3
   18070:	andeq	sp, r1, r8, lsr #12
   18074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18078:	sub	sp, sp, #12
   1807c:	ldr	r9, [pc, #228]	; 18168 <__assert_fail@plt+0x6134>
   18080:	str	r1, [sp]
   18084:	mov	r1, #64	; 0x40
   18088:	str	r2, [sp, #4]
   1808c:	bl	11da0 <strchr@plt>
   18090:	ldr	r8, [pc, #212]	; 1816c <__assert_fail@plt+0x6138>
   18094:	mov	r4, r0
   18098:	cmp	r4, #0
   1809c:	beq	180e4 <__assert_fail@plt+0x60b0>
   180a0:	add	r5, r4, #1
   180a4:	mov	r0, r5
   180a8:	mov	r1, #64	; 0x40
   180ac:	bl	11da0 <strchr@plt>
   180b0:	ldrb	r3, [r4, #1]
   180b4:	sub	r3, r3, #65	; 0x41
   180b8:	cmp	r3, #25
   180bc:	mov	r7, r0
   180c0:	bhi	180d8 <__assert_fail@plt+0x60a4>
   180c4:	cmp	r0, #0
   180c8:	bne	180f4 <__assert_fail@plt+0x60c0>
   180cc:	mov	r0, r7
   180d0:	add	sp, sp, #12
   180d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180d8:	mov	r4, r7
   180dc:	cmp	r4, #0
   180e0:	bne	180a0 <__assert_fail@plt+0x606c>
   180e4:	mov	r7, r4
   180e8:	mov	r0, r7
   180ec:	add	sp, sp, #12
   180f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f4:	sub	r6, r0, r5
   180f8:	mov	fp, r9
   180fc:	mov	r0, #5
   18100:	mov	sl, #0
   18104:	b	18120 <__assert_fail@plt+0x60ec>
   18108:	add	sl, sl, #1
   1810c:	cmp	sl, #10
   18110:	beq	180d8 <__assert_fail@plt+0x60a4>
   18114:	ldr	fp, [r8, sl, lsl #3]
   18118:	mov	r0, fp
   1811c:	bl	11d88 <strlen@plt>
   18120:	cmp	r6, r0
   18124:	bne	18108 <__assert_fail@plt+0x60d4>
   18128:	mov	r0, fp
   1812c:	mov	r2, r6
   18130:	mov	r1, r5
   18134:	bl	11b90 <memcmp@plt>
   18138:	cmp	r0, #0
   1813c:	bne	18108 <__assert_fail@plt+0x60d4>
   18140:	ldr	r3, [sp]
   18144:	ldr	r2, [pc, #32]	; 1816c <__assert_fail@plt+0x6138>
   18148:	str	r4, [r3]
   1814c:	add	r3, r2, sl, lsl #3
   18150:	ldr	r2, [sp, #4]
   18154:	str	r7, [r2]
   18158:	ldr	r7, [r3, #4]
   1815c:	mov	r0, r7
   18160:	add	sp, sp, #12
   18164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18168:	muleq	r1, r4, r6
   1816c:	andeq	sp, r1, r4, asr #12
   18170:	cmp	r0, #0
   18174:	bxeq	lr
   18178:	b	18074 <__assert_fail@plt+0x6040>
   1817c:	push	{r4, r5, r6, r7, r8, lr}
   18180:	sub	sp, sp, #32
   18184:	ldr	r8, [pc, #336]	; 182dc <__assert_fail@plt+0x62a8>
   18188:	ldr	r7, [pc, #336]	; 182e0 <__assert_fail@plt+0x62ac>
   1818c:	mov	r5, r0
   18190:	ldr	r3, [r8]
   18194:	ldr	r2, [r7]
   18198:	cmp	r3, #0
   1819c:	str	r2, [sp, #28]
   181a0:	bne	181b4 <__assert_fail@plt+0x6180>
   181a4:	b	181e8 <__assert_fail@plt+0x61b4>
   181a8:	ldr	r3, [r3]
   181ac:	cmp	r3, #0
   181b0:	beq	181e8 <__assert_fail@plt+0x61b4>
   181b4:	ldr	r2, [r3, #4]
   181b8:	cmp	r5, r2
   181bc:	bne	181a8 <__assert_fail@plt+0x6174>
   181c0:	ldr	r4, [r3, #8]
   181c4:	cmp	r4, #0
   181c8:	beq	181f0 <__assert_fail@plt+0x61bc>
   181cc:	ldr	r2, [sp, #28]
   181d0:	ldr	r3, [r7]
   181d4:	mov	r0, r4
   181d8:	cmp	r2, r3
   181dc:	bne	182c0 <__assert_fail@plt+0x628c>
   181e0:	add	sp, sp, #32
   181e4:	pop	{r4, r5, r6, r7, r8, pc}
   181e8:	cmp	r5, #0
   181ec:	beq	182b8 <__assert_fail@plt+0x6284>
   181f0:	add	r2, sp, #8
   181f4:	add	r1, sp, #4
   181f8:	mov	r0, r5
   181fc:	bl	18074 <__assert_fail@plt+0x6040>
   18200:	subs	r6, r0, #0
   18204:	beq	182b8 <__assert_fail@plt+0x6284>
   18208:	mov	r0, r5
   1820c:	bl	11d88 <strlen@plt>
   18210:	mov	r4, r5
   18214:	add	r1, r0, #100	; 0x64
   18218:	add	r0, sp, #12
   1821c:	bl	1bc3c <__assert_fail@plt+0x9c08>
   18220:	b	1823c <__assert_fail@plt+0x6208>
   18224:	add	r2, sp, #8
   18228:	add	r1, sp, #4
   1822c:	mov	r0, r4
   18230:	bl	18074 <__assert_fail@plt+0x6040>
   18234:	subs	r6, r0, #0
   18238:	beq	18268 <__assert_fail@plt+0x6234>
   1823c:	ldr	r2, [sp, #4]
   18240:	mov	r1, r4
   18244:	sub	r2, r2, r4
   18248:	add	r0, sp, #12
   1824c:	bl	1bcec <__assert_fail@plt+0x9cb8>
   18250:	mov	r1, r6
   18254:	add	r0, sp, #12
   18258:	bl	1bdb4 <__assert_fail@plt+0x9d80>
   1825c:	ldr	r4, [sp, #8]
   18260:	adds	r4, r4, #1
   18264:	bne	18224 <__assert_fail@plt+0x61f0>
   18268:	mov	r1, r4
   1826c:	add	r0, sp, #12
   18270:	bl	1bdb4 <__assert_fail@plt+0x9d80>
   18274:	mov	r2, #1
   18278:	ldr	r1, [pc, #100]	; 182e4 <__assert_fail@plt+0x62b0>
   1827c:	add	r0, sp, #12
   18280:	bl	1bcec <__assert_fail@plt+0x9cb8>
   18284:	add	r0, sp, #12
   18288:	mov	r1, #0
   1828c:	bl	1beb4 <__assert_fail@plt+0x9e80>
   18290:	subs	r4, r0, #0
   18294:	beq	182c4 <__assert_fail@plt+0x6290>
   18298:	mov	r0, #12
   1829c:	bl	11a58 <gcry_xmalloc@plt>
   182a0:	ldr	r3, [r8]
   182a4:	str	r5, [r0, #4]
   182a8:	str	r4, [r0, #8]
   182ac:	str	r3, [r0]
   182b0:	str	r0, [r8]
   182b4:	b	181cc <__assert_fail@plt+0x6198>
   182b8:	mov	r4, r5
   182bc:	b	181cc <__assert_fail@plt+0x6198>
   182c0:	bl	11bc0 <__stack_chk_fail@plt>
   182c4:	bl	11ddc <__errno_location@plt>
   182c8:	ldr	r0, [r0]
   182cc:	bl	11cd4 <strerror@plt>
   182d0:	mov	r1, r0
   182d4:	ldr	r0, [pc, #12]	; 182e8 <__assert_fail@plt+0x62b4>
   182d8:	bl	16c30 <__assert_fail@plt+0x4bfc>
   182dc:	andeq	pc, r2, r4, lsl r2	; <UNPREDICTABLE>
   182e0:	ldrdeq	lr, [r2], -r0
   182e4:	andeq	sp, r1, r4, asr #15
   182e8:	muleq	r1, ip, r6
   182ec:	push	{r4, r5, r6, r7, lr}
   182f0:	ldrb	r6, [r0]
   182f4:	cmp	r6, #48	; 0x30
   182f8:	beq	183c0 <__assert_fail@plt+0x638c>
   182fc:	sub	r7, r6, #48	; 0x30
   18300:	uxtb	ip, r7
   18304:	cmp	ip, #9
   18308:	movhi	ip, #0
   1830c:	bhi	1834c <__assert_fail@plt+0x6318>
   18310:	ldrb	r4, [r0, #1]
   18314:	sub	lr, r4, #48	; 0x30
   18318:	add	r5, r0, #1
   1831c:	mov	ip, #0
   18320:	b	18330 <__assert_fail@plt+0x62fc>
   18324:	ldrb	r4, [r5, #1]!
   18328:	sub	r7, r6, #48	; 0x30
   1832c:	sub	lr, r4, #48	; 0x30
   18330:	add	ip, ip, ip, lsl #2
   18334:	uxtb	lr, lr
   18338:	cmp	lr, #9
   1833c:	mov	r6, r4
   18340:	add	ip, r7, ip, lsl #1
   18344:	mov	r0, r5
   18348:	bls	18324 <__assert_fail@plt+0x62f0>
   1834c:	str	ip, [r1]
   18350:	ldrb	r1, [r0]
   18354:	cmp	r1, #46	; 0x2e
   18358:	bne	183d8 <__assert_fail@plt+0x63a4>
   1835c:	ldrb	r4, [r0, #1]
   18360:	add	lr, r0, #1
   18364:	cmp	r4, #48	; 0x30
   18368:	beq	183e4 <__assert_fail@plt+0x63b0>
   1836c:	sub	ip, r4, #48	; 0x30
   18370:	uxtb	r1, ip
   18374:	cmp	r1, #9
   18378:	movhi	r1, #0
   1837c:	bhi	183a0 <__assert_fail@plt+0x636c>
   18380:	mov	r1, #0
   18384:	ldrb	r4, [lr, #1]!
   18388:	add	r1, r1, r1, lsl #2
   1838c:	add	r1, ip, r1, lsl #1
   18390:	sub	ip, r4, #48	; 0x30
   18394:	uxtb	r0, ip
   18398:	cmp	r0, #9
   1839c:	bls	18384 <__assert_fail@plt+0x6350>
   183a0:	str	r1, [r2]
   183a4:	ldrb	r2, [lr]
   183a8:	cmp	r2, #46	; 0x2e
   183ac:	movne	r2, #0
   183b0:	beq	183fc <__assert_fail@plt+0x63c8>
   183b4:	str	r2, [r3]
   183b8:	mov	r0, lr
   183bc:	pop	{r4, r5, r6, r7, pc}
   183c0:	ldrb	r4, [r0, #1]
   183c4:	sub	lr, r4, #48	; 0x30
   183c8:	uxtb	ip, lr
   183cc:	cmp	ip, #9
   183d0:	movhi	r7, #0
   183d4:	bhi	18318 <__assert_fail@plt+0x62e4>
   183d8:	mov	lr, #0
   183dc:	mov	r0, lr
   183e0:	pop	{r4, r5, r6, r7, pc}
   183e4:	ldrb	r1, [r0, #2]
   183e8:	sub	r1, r1, #48	; 0x30
   183ec:	cmp	r1, #9
   183f0:	bls	183d8 <__assert_fail@plt+0x63a4>
   183f4:	mov	ip, #0
   183f8:	b	18380 <__assert_fail@plt+0x634c>
   183fc:	ldrb	r0, [lr, #1]
   18400:	add	r2, lr, #1
   18404:	cmp	r0, #48	; 0x30
   18408:	beq	1844c <__assert_fail@plt+0x6418>
   1840c:	sub	r1, r0, #48	; 0x30
   18410:	uxtb	r0, r1
   18414:	cmp	r0, #9
   18418:	movhi	lr, r2
   1841c:	movhi	r2, #0
   18420:	bhi	183b4 <__assert_fail@plt+0x6380>
   18424:	mov	lr, r2
   18428:	mov	r2, #0
   1842c:	ldrb	r0, [lr, #1]!
   18430:	add	r2, r2, r2, lsl #2
   18434:	add	r2, r1, r2, lsl #1
   18438:	sub	r1, r0, #48	; 0x30
   1843c:	uxtb	r0, r1
   18440:	cmp	r0, #9
   18444:	bls	1842c <__assert_fail@plt+0x63f8>
   18448:	b	183b4 <__assert_fail@plt+0x6380>
   1844c:	ldrb	r1, [lr, #2]
   18450:	sub	r1, r1, #48	; 0x30
   18454:	cmp	r1, #9
   18458:	bls	183d8 <__assert_fail@plt+0x63a4>
   1845c:	mov	r1, #0
   18460:	b	18424 <__assert_fail@plt+0x63f0>
   18464:	cmp	r1, #0
   18468:	push	{r4, lr}
   1846c:	mov	r4, r0
   18470:	beq	184a0 <__assert_fail@plt+0x646c>
   18474:	mov	r0, r1
   18478:	bl	11a88 <getpwnam@plt>
   1847c:	cmp	r0, #0
   18480:	popeq	{r4, pc}
   18484:	cmp	r4, #0
   18488:	ldr	r0, [r0, #20]
   1848c:	beq	18498 <__assert_fail@plt+0x6464>
   18490:	pop	{r4, lr}
   18494:	b	11e6c <gcry_xstrdup@plt>
   18498:	pop	{r4, lr}
   1849c:	b	1201c <gcry_strdup@plt>
   184a0:	bl	11b0c <getuid@plt>
   184a4:	bl	11ad0 <getpwuid@plt>
   184a8:	cmp	r0, #0
   184ac:	bne	18484 <__assert_fail@plt+0x6450>
   184b0:	pop	{r4, pc}
   184b4:	push	{r4, r5, r6, r7, r8, lr}
   184b8:	sub	sp, sp, #200	; 0xc8
   184bc:	ldr	r8, [pc, #188]	; 18580 <__assert_fail@plt+0x654c>
   184c0:	mov	r5, r1
   184c4:	str	r0, [sp, #4]
   184c8:	ldr	r3, [r8]
   184cc:	str	r3, [sp, #196]	; 0xc4
   184d0:	bl	11d88 <strlen@plt>
   184d4:	mov	r6, r0
   184d8:	ldr	r0, [r5], #4
   184dc:	cmp	r0, #0
   184e0:	str	r0, [sp, #8]
   184e4:	beq	1851c <__assert_fail@plt+0x64e8>
   184e8:	bl	11d88 <strlen@plt>
   184ec:	add	r4, sp, #12
   184f0:	add	r7, sp, #196	; 0xc4
   184f4:	add	r6, r6, r0
   184f8:	b	1850c <__assert_fail@plt+0x64d8>
   184fc:	bl	11d88 <strlen@plt>
   18500:	cmp	r7, r4
   18504:	add	r6, r6, r0
   18508:	beq	1856c <__assert_fail@plt+0x6538>
   1850c:	ldr	r0, [r5], #4
   18510:	cmp	r0, #0
   18514:	str	r0, [r4], #4
   18518:	bne	184fc <__assert_fail@plt+0x64c8>
   1851c:	add	r0, r6, #1
   18520:	bl	11a7c <gcry_malloc@plt>
   18524:	subs	r5, r0, #0
   18528:	beq	18550 <__assert_fail@plt+0x651c>
   1852c:	ldr	r1, [sp, #4]
   18530:	cmp	r1, #0
   18534:	beq	18550 <__assert_fail@plt+0x651c>
   18538:	add	r4, sp, #8
   1853c:	mov	r0, r5
   18540:	bl	11ba8 <stpcpy@plt>
   18544:	ldr	r1, [r4], #4
   18548:	cmp	r1, #0
   1854c:	bne	18540 <__assert_fail@plt+0x650c>
   18550:	ldr	r2, [sp, #196]	; 0xc4
   18554:	ldr	r3, [r8]
   18558:	mov	r0, r5
   1855c:	cmp	r2, r3
   18560:	bne	1857c <__assert_fail@plt+0x6548>
   18564:	add	sp, sp, #200	; 0xc8
   18568:	pop	{r4, r5, r6, r7, r8, pc}
   1856c:	mov	r0, #22
   18570:	bl	11f14 <gpg_err_set_errno@plt>
   18574:	mov	r5, #0
   18578:	b	18550 <__assert_fail@plt+0x651c>
   1857c:	bl	11bc0 <__stack_chk_fail@plt>
   18580:	ldrdeq	lr, [r2], -r0
   18584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18588:	sub	sp, sp, #148	; 0x94
   1858c:	ldr	r7, [pc, #1020]	; 18990 <__assert_fail@plt+0x695c>
   18590:	mov	r9, r0
   18594:	mov	r0, r1
   18598:	ldr	r3, [r7]
   1859c:	mov	fp, r2
   185a0:	mov	r6, r1
   185a4:	str	r3, [sp, #140]	; 0x8c
   185a8:	bl	11d88 <strlen@plt>
   185ac:	and	r8, r9, #1
   185b0:	mov	r5, r0
   185b4:	ldr	r0, [fp], #4
   185b8:	cmp	r0, #0
   185bc:	str	r0, [sp, #12]
   185c0:	addeq	r5, r5, #1
   185c4:	beq	18604 <__assert_fail@plt+0x65d0>
   185c8:	bl	11d88 <strlen@plt>
   185cc:	add	r5, r5, #2
   185d0:	add	r4, sp, #16
   185d4:	add	sl, sp, #140	; 0x8c
   185d8:	add	r5, r5, r0
   185dc:	b	185f4 <__assert_fail@plt+0x65c0>
   185e0:	bl	11d88 <strlen@plt>
   185e4:	cmp	sl, r4
   185e8:	add	r0, r0, #1
   185ec:	add	r5, r5, r0
   185f0:	beq	18790 <__assert_fail@plt+0x675c>
   185f4:	ldr	r0, [fp], #4
   185f8:	cmp	r0, #0
   185fc:	str	r0, [r4], #4
   18600:	bne	185e0 <__assert_fail@plt+0x65ac>
   18604:	ldrb	r3, [r6]
   18608:	add	r5, r5, #1
   1860c:	cmp	r3, #126	; 0x7e
   18610:	beq	1870c <__assert_fail@plt+0x66d8>
   18614:	mov	r4, #0
   18618:	mov	fp, r4
   1861c:	mov	r3, #1
   18620:	str	r3, [sp, #4]
   18624:	cmp	r8, #0
   18628:	mov	r0, r5
   1862c:	beq	187a8 <__assert_fail@plt+0x6774>
   18630:	bl	11a58 <gcry_xmalloc@plt>
   18634:	mov	sl, r0
   18638:	cmp	r4, #0
   1863c:	beq	188ac <__assert_fail@plt+0x6878>
   18640:	mov	r1, r4
   18644:	mov	r0, sl
   18648:	bl	11ba8 <stpcpy@plt>
   1864c:	ldr	r3, [sp, #4]
   18650:	add	r1, r6, r3
   18654:	bl	11ba8 <stpcpy@plt>
   18658:	mov	r4, r0
   1865c:	mov	r0, fp
   18660:	bl	11b84 <gcry_free@plt>
   18664:	ldr	r1, [sp, #12]
   18668:	cmp	r1, #0
   1866c:	addne	fp, sp, #16
   18670:	movne	r6, #0
   18674:	movne	r5, #47	; 0x2f
   18678:	bne	186a0 <__assert_fail@plt+0x666c>
   1867c:	b	186dc <__assert_fail@plt+0x66a8>
   18680:	mov	r0, r4
   18684:	add	r6, r6, #1
   18688:	strb	r5, [r0], #1
   1868c:	bl	11ba8 <stpcpy@plt>
   18690:	ldr	r1, [fp], #4
   18694:	cmp	r1, #0
   18698:	mov	r4, r0
   1869c:	beq	186dc <__assert_fail@plt+0x66a8>
   186a0:	cmp	r6, #0
   186a4:	bne	18680 <__assert_fail@plt+0x664c>
   186a8:	ldrb	r3, [sl]
   186ac:	cmp	r3, #47	; 0x2f
   186b0:	bne	18680 <__assert_fail@plt+0x664c>
   186b4:	ldrb	r3, [sl, #1]
   186b8:	cmp	r3, #0
   186bc:	bne	18680 <__assert_fail@plt+0x664c>
   186c0:	mov	r0, r4
   186c4:	bl	11ba8 <stpcpy@plt>
   186c8:	ldr	r1, [fp], #4
   186cc:	add	r6, r6, #1
   186d0:	cmp	r1, #0
   186d4:	mov	r4, r0
   186d8:	bne	186a0 <__assert_fail@plt+0x666c>
   186dc:	tst	r9, #2
   186e0:	beq	186f0 <__assert_fail@plt+0x66bc>
   186e4:	ldrb	r3, [sl]
   186e8:	cmp	r3, #47	; 0x2f
   186ec:	bne	187c0 <__assert_fail@plt+0x678c>
   186f0:	ldr	r2, [sp, #140]	; 0x8c
   186f4:	ldr	r3, [r7]
   186f8:	mov	r0, sl
   186fc:	cmp	r2, r3
   18700:	bne	1898c <__assert_fail@plt+0x6958>
   18704:	add	sp, sp, #148	; 0x94
   18708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1870c:	ldrb	r3, [r6, #1]
   18710:	cmp	r3, #0
   18714:	cmpne	r3, #47	; 0x2f
   18718:	beq	18864 <__assert_fail@plt+0x6830>
   1871c:	cmp	r8, #0
   18720:	add	r0, r6, #1
   18724:	beq	188c0 <__assert_fail@plt+0x688c>
   18728:	bl	11e6c <gcry_xstrdup@plt>
   1872c:	mov	sl, r0
   18730:	mov	r1, #47	; 0x2f
   18734:	mov	r0, sl
   18738:	bl	11da0 <strchr@plt>
   1873c:	cmp	r0, #0
   18740:	movne	r3, #0
   18744:	strbne	r3, [r0]
   18748:	mov	r0, sl
   1874c:	bl	11d88 <strlen@plt>
   18750:	mov	r1, sl
   18754:	mov	r4, r0
   18758:	mov	r0, r8
   1875c:	bl	18464 <__assert_fail@plt+0x6430>
   18760:	mov	fp, r0
   18764:	mov	r0, sl
   18768:	bl	11b84 <gcry_free@plt>
   1876c:	cmp	fp, #0
   18770:	beq	1889c <__assert_fail@plt+0x6868>
   18774:	mov	r0, fp
   18778:	bl	11d88 <strlen@plt>
   1877c:	add	r3, r4, #1
   18780:	str	r3, [sp, #4]
   18784:	mov	r4, fp
   18788:	add	r5, r5, r0
   1878c:	b	18624 <__assert_fail@plt+0x65f0>
   18790:	cmp	r8, #0
   18794:	bne	1897c <__assert_fail@plt+0x6948>
   18798:	mov	r0, #22
   1879c:	mov	sl, r8
   187a0:	bl	11f14 <gpg_err_set_errno@plt>
   187a4:	b	186f0 <__assert_fail@plt+0x66bc>
   187a8:	bl	11a7c <gcry_malloc@plt>
   187ac:	subs	sl, r0, #0
   187b0:	bne	18638 <__assert_fail@plt+0x6604>
   187b4:	mov	r0, fp
   187b8:	bl	11b84 <gcry_free@plt>
   187bc:	b	186f0 <__assert_fail@plt+0x66bc>
   187c0:	bl	178ec <__assert_fail@plt+0x58b8>
   187c4:	subs	r5, r0, #0
   187c8:	beq	18928 <__assert_fail@plt+0x68f4>
   187cc:	bl	11d88 <strlen@plt>
   187d0:	mov	r4, r0
   187d4:	mov	r0, sl
   187d8:	bl	11d88 <strlen@plt>
   187dc:	cmp	r8, #0
   187e0:	add	r0, r4, r0
   187e4:	add	r0, r0, #2
   187e8:	beq	188d0 <__assert_fail@plt+0x689c>
   187ec:	bl	11a58 <gcry_xmalloc@plt>
   187f0:	mov	r4, r0
   187f4:	ldrb	r3, [r5]
   187f8:	cmp	r3, #47	; 0x2f
   187fc:	bne	1880c <__assert_fail@plt+0x67d8>
   18800:	ldrb	r2, [r5, #1]
   18804:	cmp	r2, #0
   18808:	beq	188f4 <__assert_fail@plt+0x68c0>
   1880c:	mov	r1, r5
   18810:	mov	r0, r4
   18814:	bl	11ba8 <stpcpy@plt>
   18818:	mov	r3, #47	; 0x2f
   1881c:	mov	r1, sl
   18820:	strb	r3, [r0], #1
   18824:	bl	11c5c <strcpy@plt>
   18828:	mov	r0, r5
   1882c:	bl	11b84 <gcry_free@plt>
   18830:	mov	r0, sl
   18834:	bl	11b84 <gcry_free@plt>
   18838:	mov	r0, r4
   1883c:	bl	11d88 <strlen@plt>
   18840:	cmp	r0, #2
   18844:	bls	1885c <__assert_fail@plt+0x6828>
   18848:	sub	r3, r0, #2
   1884c:	add	r2, r4, r3
   18850:	ldrb	r3, [r4, r3]
   18854:	cmp	r3, #47	; 0x2f
   18858:	beq	18908 <__assert_fail@plt+0x68d4>
   1885c:	mov	sl, r4
   18860:	b	186f0 <__assert_fail@plt+0x66bc>
   18864:	ldr	r0, [pc, #296]	; 18994 <__assert_fail@plt+0x6960>
   18868:	bl	11c98 <getenv@plt>
   1886c:	subs	r4, r0, #0
   18870:	movne	fp, #0
   18874:	beq	18960 <__assert_fail@plt+0x692c>
   18878:	ldrb	r3, [r4]
   1887c:	cmp	r3, #0
   18880:	beq	188a0 <__assert_fail@plt+0x686c>
   18884:	mov	r0, r4
   18888:	bl	11d88 <strlen@plt>
   1888c:	mov	r3, #1
   18890:	str	r3, [sp, #4]
   18894:	add	r5, r5, r0
   18898:	b	18624 <__assert_fail@plt+0x65f0>
   1889c:	mov	r4, fp
   188a0:	mov	r3, #1
   188a4:	str	r3, [sp, #4]
   188a8:	b	18624 <__assert_fail@plt+0x65f0>
   188ac:	mov	r1, r6
   188b0:	mov	r0, sl
   188b4:	bl	11ba8 <stpcpy@plt>
   188b8:	mov	r4, r0
   188bc:	b	1865c <__assert_fail@plt+0x6628>
   188c0:	bl	1201c <gcry_strdup@plt>
   188c4:	subs	sl, r0, #0
   188c8:	bne	18730 <__assert_fail@plt+0x66fc>
   188cc:	b	186f0 <__assert_fail@plt+0x66bc>
   188d0:	bl	11a7c <gcry_malloc@plt>
   188d4:	subs	r4, r0, #0
   188d8:	bne	187f4 <__assert_fail@plt+0x67c0>
   188dc:	mov	r0, r5
   188e0:	bl	11b84 <gcry_free@plt>
   188e4:	mov	r0, sl
   188e8:	bl	11b84 <gcry_free@plt>
   188ec:	mov	sl, r8
   188f0:	b	186f0 <__assert_fail@plt+0x66bc>
   188f4:	mov	r0, r4
   188f8:	mov	r1, sl
   188fc:	strb	r3, [r0], #1
   18900:	bl	11c5c <strcpy@plt>
   18904:	b	18828 <__assert_fail@plt+0x67f4>
   18908:	add	r0, r4, r0
   1890c:	ldrb	r3, [r0, #-1]
   18910:	cmp	r3, #46	; 0x2e
   18914:	moveq	r3, #0
   18918:	moveq	sl, r4
   1891c:	strbeq	r3, [r2]
   18920:	bne	1885c <__assert_fail@plt+0x6828>
   18924:	b	186f0 <__assert_fail@plt+0x66bc>
   18928:	cmp	r8, #0
   1892c:	beq	188e4 <__assert_fail@plt+0x68b0>
   18930:	ldr	r3, [pc, #96]	; 18998 <__assert_fail@plt+0x6964>
   18934:	ldr	r4, [r3]
   18938:	bl	11ddc <__errno_location@plt>
   1893c:	ldr	r0, [r0]
   18940:	bl	11cd4 <strerror@plt>
   18944:	ldr	r2, [pc, #80]	; 1899c <__assert_fail@plt+0x6968>
   18948:	mov	r1, #1
   1894c:	mov	r3, r0
   18950:	mov	r0, r4
   18954:	bl	11e60 <__fprintf_chk@plt>
   18958:	mov	r0, #2
   1895c:	bl	11d4c <exit@plt>
   18960:	mov	r1, r4
   18964:	mov	r0, r8
   18968:	bl	18464 <__assert_fail@plt+0x6430>
   1896c:	subs	fp, r0, #0
   18970:	mov	r4, fp
   18974:	beq	188a0 <__assert_fail@plt+0x686c>
   18978:	b	18878 <__assert_fail@plt+0x6844>
   1897c:	ldr	r2, [pc, #28]	; 189a0 <__assert_fail@plt+0x696c>
   18980:	mov	r1, #432	; 0x1b0
   18984:	ldr	r0, [pc, #24]	; 189a4 <__assert_fail@plt+0x6970>
   18988:	bl	16f0c <__assert_fail@plt+0x4ed8>
   1898c:	bl	11bc0 <__stack_chk_fail@plt>
   18990:	ldrdeq	lr, [r2], -r0
   18994:	muleq	r1, ip, r7
   18998:	andeq	pc, r2, r8, asr #1
   1899c:	andeq	sp, r1, r4, lsr #15
   189a0:	andeq	sp, r1, r0, ror #14
   189a4:	andeq	sp, r1, r0, lsl #15
   189a8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189ac:	mov	fp, r1
   189b0:	ldrb	r1, [r0]
   189b4:	mov	r7, r0
   189b8:	mov	r6, r2
   189bc:	cmp	r1, #0
   189c0:	beq	18b94 <__assert_fail@plt+0x6b60>
   189c4:	mov	r4, r0
   189c8:	mov	r5, #0
   189cc:	rsb	r8, r0, #1
   189d0:	b	189e8 <__assert_fail@plt+0x69b4>
   189d4:	add	r5, r5, #1
   189d8:	add	r0, r8, r4
   189dc:	ldrb	r1, [r4, #1]!
   189e0:	cmp	r1, #0
   189e4:	beq	18a2c <__assert_fail@plt+0x69f8>
   189e8:	cmp	r1, #37	; 0x25
   189ec:	cmpne	r1, #58	; 0x3a
   189f0:	moveq	r3, #1
   189f4:	movne	r3, #0
   189f8:	cmp	r1, #10
   189fc:	orreq	r3, r3, #1
   18a00:	cmp	r3, #0
   18a04:	bne	189d4 <__assert_fail@plt+0x69a0>
   18a08:	subs	r0, fp, #0
   18a0c:	beq	189d8 <__assert_fail@plt+0x69a4>
   18a10:	bl	11da0 <strchr@plt>
   18a14:	cmp	r0, #0
   18a18:	bne	189d4 <__assert_fail@plt+0x69a0>
   18a1c:	add	r0, r8, r4
   18a20:	ldrb	r1, [r4, #1]!
   18a24:	cmp	r1, #0
   18a28:	bne	189e8 <__assert_fail@plt+0x69b4>
   18a2c:	add	r0, r0, r5, lsl #1
   18a30:	add	r0, r0, #1
   18a34:	cmp	r6, #0
   18a38:	beq	18b74 <__assert_fail@plt+0x6b40>
   18a3c:	bl	11a58 <gcry_xmalloc@plt>
   18a40:	ldrb	r5, [r7]
   18a44:	cmp	r5, #0
   18a48:	mov	r6, r0
   18a4c:	beq	18b8c <__assert_fail@plt+0x6b58>
   18a50:	mov	r4, #0
   18a54:	mov	r3, #37	; 0x25
   18a58:	mov	r2, #97	; 0x61
   18a5c:	b	18ad8 <__assert_fail@plt+0x6aa4>
   18a60:	cmp	r5, #37	; 0x25
   18a64:	beq	18b24 <__assert_fail@plt+0x6af0>
   18a68:	cmp	r5, #10
   18a6c:	beq	18b48 <__assert_fail@plt+0x6b14>
   18a70:	cmp	fp, #0
   18a74:	beq	18b68 <__assert_fail@plt+0x6b34>
   18a78:	mov	r1, r5
   18a7c:	mov	r0, fp
   18a80:	bl	11da0 <strchr@plt>
   18a84:	mov	r3, #37	; 0x25
   18a88:	mov	r2, #97	; 0x61
   18a8c:	cmp	r0, #0
   18a90:	beq	18b68 <__assert_fail@plt+0x6b34>
   18a94:	lsr	r1, r5, #4
   18a98:	cmp	r1, #9
   18a9c:	addls	r1, r1, #48	; 0x30
   18aa0:	addhi	r1, r1, #87	; 0x57
   18aa4:	and	r5, r5, #15
   18aa8:	strb	r3, [sl]
   18aac:	strb	r1, [r8]
   18ab0:	add	r1, r4, #2
   18ab4:	add	r4, r4, #3
   18ab8:	cmp	r5, #9
   18abc:	add	r8, r6, r4
   18ac0:	addls	r5, r5, #48	; 0x30
   18ac4:	addhi	r5, r5, #87	; 0x57
   18ac8:	strb	r5, [r6, r1]
   18acc:	ldrb	r5, [r7, #1]!
   18ad0:	cmp	r5, #0
   18ad4:	beq	18b14 <__assert_fail@plt+0x6ae0>
   18ad8:	add	r9, r4, #1
   18adc:	cmp	r5, #58	; 0x3a
   18ae0:	add	r8, r6, r9
   18ae4:	add	sl, r6, r4
   18ae8:	bne	18a60 <__assert_fail@plt+0x6a2c>
   18aec:	add	r1, r4, #2
   18af0:	mov	r0, #51	; 0x33
   18af4:	strb	r3, [r6, r4]
   18af8:	strb	r0, [r6, r9]
   18afc:	strb	r2, [r6, r1]
   18b00:	ldrb	r5, [r7, #1]!
   18b04:	add	r4, r4, #3
   18b08:	add	r8, r6, r4
   18b0c:	cmp	r5, #0
   18b10:	bne	18ad8 <__assert_fail@plt+0x6aa4>
   18b14:	mov	r3, #0
   18b18:	strb	r3, [r8]
   18b1c:	mov	r0, r6
   18b20:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b24:	add	r1, r4, #2
   18b28:	mov	r0, #50	; 0x32
   18b2c:	strb	r5, [sl]
   18b30:	add	r4, r4, #3
   18b34:	strb	r0, [r8]
   18b38:	mov	r0, #53	; 0x35
   18b3c:	strb	r0, [r6, r1]
   18b40:	add	r8, r6, r4
   18b44:	b	18acc <__assert_fail@plt+0x6a98>
   18b48:	add	r1, r4, #2
   18b4c:	mov	r0, #48	; 0x30
   18b50:	add	r4, r4, #3
   18b54:	strb	r3, [sl]
   18b58:	strb	r0, [r8]
   18b5c:	strb	r2, [r6, r1]
   18b60:	add	r8, r6, r4
   18b64:	b	18acc <__assert_fail@plt+0x6a98>
   18b68:	mov	r4, r9
   18b6c:	strb	r5, [sl]
   18b70:	b	18acc <__assert_fail@plt+0x6a98>
   18b74:	bl	11a7c <gcry_malloc@plt>
   18b78:	subs	r6, r0, #0
   18b7c:	beq	18b1c <__assert_fail@plt+0x6ae8>
   18b80:	ldrb	r5, [r7]
   18b84:	cmp	r5, #0
   18b88:	bne	18a50 <__assert_fail@plt+0x6a1c>
   18b8c:	mov	r8, r6
   18b90:	b	18b14 <__assert_fail@plt+0x6ae0>
   18b94:	mov	r0, #1
   18b98:	b	18a34 <__assert_fail@plt+0x6a00>
   18b9c:	ldrb	r3, [r0]
   18ba0:	mov	r2, r0
   18ba4:	cmp	r3, #0
   18ba8:	beq	18bdc <__assert_fail@plt+0x6ba8>
   18bac:	mov	r0, #0
   18bb0:	and	r3, r3, #192	; 0xc0
   18bb4:	cmp	r3, #128	; 0x80
   18bb8:	addne	r0, r0, #1
   18bbc:	cmn	r1, #1
   18bc0:	beq	18bcc <__assert_fail@plt+0x6b98>
   18bc4:	subs	r1, r1, #1
   18bc8:	bxeq	lr
   18bcc:	ldrb	r3, [r2, #1]!
   18bd0:	cmp	r3, #0
   18bd4:	bne	18bb0 <__assert_fail@plt+0x6b7c>
   18bd8:	bx	lr
   18bdc:	mov	r0, r3
   18be0:	bx	lr
   18be4:	cmp	r2, #0
   18be8:	beq	18c50 <__assert_fail@plt+0x6c1c>
   18bec:	add	r2, r0, r2
   18bf0:	push	{r4, r5, r6, lr}
   18bf4:	sub	r0, r0, #1
   18bf8:	sub	r6, r2, #1
   18bfc:	sub	r1, r1, #1
   18c00:	ldrb	lr, [r0, #1]!
   18c04:	ldrb	ip, [r1, #1]!
   18c08:	mov	r2, lr
   18c0c:	cmp	lr, ip
   18c10:	mov	r3, ip
   18c14:	sub	r5, lr, #97	; 0x61
   18c18:	sub	r4, ip, #97	; 0x61
   18c1c:	beq	18c38 <__assert_fail@plt+0x6c04>
   18c20:	cmp	r5, #25
   18c24:	bicls	r2, lr, #32
   18c28:	cmp	r4, #25
   18c2c:	bicls	r3, ip, #32
   18c30:	cmp	r3, r2
   18c34:	bne	18c48 <__assert_fail@plt+0x6c14>
   18c38:	cmp	r0, r6
   18c3c:	bne	18c00 <__assert_fail@plt+0x6bcc>
   18c40:	mov	r0, #0
   18c44:	pop	{r4, r5, r6, pc}
   18c48:	sub	r0, r2, r3
   18c4c:	pop	{r4, r5, r6, pc}
   18c50:	mov	r0, r2
   18c54:	bx	lr
   18c58:	push	{r4, r5, r6, lr}
   18c5c:	mov	r4, r0
   18c60:	mov	r0, r1
   18c64:	mov	r6, r1
   18c68:	bl	11d88 <strlen@plt>
   18c6c:	mov	r1, r6
   18c70:	mov	r2, r0
   18c74:	mov	r5, r0
   18c78:	mov	r0, r4
   18c7c:	bl	11fe0 <strncmp@plt>
   18c80:	cmp	r0, #0
   18c84:	bne	18cd4 <__assert_fail@plt+0x6ca0>
   18c88:	ldrb	r2, [r4, r5]
   18c8c:	add	r0, r4, r5
   18c90:	tst	r2, #223	; 0xdf
   18c94:	sub	r3, r2, #9
   18c98:	clz	r3, r3
   18c9c:	lsr	r3, r3, #5
   18ca0:	movne	r1, r3
   18ca4:	moveq	r1, #1
   18ca8:	cmp	r1, #0
   18cac:	beq	18cd4 <__assert_fail@plt+0x6ca0>
   18cb0:	cmp	r2, #32
   18cb4:	orreq	r3, r3, #1
   18cb8:	cmp	r3, #0
   18cbc:	popeq	{r4, r5, r6, pc}
   18cc0:	ldrb	r3, [r0, #1]!
   18cc4:	cmp	r3, #9
   18cc8:	cmpne	r3, #32
   18ccc:	beq	18cc0 <__assert_fail@plt+0x6c8c>
   18cd0:	pop	{r4, r5, r6, pc}
   18cd4:	mov	r0, #0
   18cd8:	pop	{r4, r5, r6, pc}
   18cdc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce0:	subs	r5, r1, #0
   18ce4:	beq	18d90 <__assert_fail@plt+0x6d5c>
   18ce8:	mov	r4, r0
   18cec:	mov	r8, r2
   18cf0:	bl	11cf8 <__ctype_toupper_loc@plt>
   18cf4:	ldrb	r3, [r8]
   18cf8:	mov	r1, r5
   18cfc:	add	r9, r4, r1
   18d00:	mov	r5, r4
   18d04:	ldr	r0, [r0]
   18d08:	ldr	sl, [r0, r3, lsl #2]
   18d0c:	b	18d20 <__assert_fail@plt+0x6cec>
   18d10:	cmp	lr, #0
   18d14:	beq	18d98 <__assert_fail@plt+0x6d64>
   18d18:	mov	r1, lr
   18d1c:	mov	r5, r3
   18d20:	mov	r3, r5
   18d24:	sub	lr, r1, #1
   18d28:	ldrb	r2, [r3], #1
   18d2c:	ldr	r2, [r0, r2, lsl #2]
   18d30:	cmp	r2, sl
   18d34:	bne	18d10 <__assert_fail@plt+0x6cdc>
   18d38:	cmp	r3, r9
   18d3c:	add	r4, r8, #1
   18d40:	ldrb	ip, [r8, #1]
   18d44:	beq	18da4 <__assert_fail@plt+0x6d70>
   18d48:	ldrb	r6, [r3]
   18d4c:	ldr	r2, [r0, ip, lsl #2]
   18d50:	ldr	r6, [r0, r6, lsl #2]
   18d54:	cmp	r6, r2
   18d58:	bne	18d88 <__assert_fail@plt+0x6d54>
   18d5c:	add	fp, r5, r1
   18d60:	add	r1, r3, #1
   18d64:	b	18d7c <__assert_fail@plt+0x6d48>
   18d68:	ldrb	r2, [r1], #1
   18d6c:	ldr	r6, [r0, ip, lsl #2]
   18d70:	ldr	r7, [r0, r2, lsl #2]
   18d74:	cmp	r7, r6
   18d78:	bne	18d88 <__assert_fail@plt+0x6d54>
   18d7c:	cmp	fp, r1
   18d80:	ldrb	ip, [r4, #1]!
   18d84:	bne	18d68 <__assert_fail@plt+0x6d34>
   18d88:	cmp	ip, #0
   18d8c:	bne	18d18 <__assert_fail@plt+0x6ce4>
   18d90:	mov	r0, r5
   18d94:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d98:	mov	r5, lr
   18d9c:	mov	r0, r5
   18da0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18da4:	cmp	ip, #0
   18da8:	bne	18d10 <__assert_fail@plt+0x6cdc>
   18dac:	b	18d90 <__assert_fail@plt+0x6d5c>
   18db0:	cmp	r1, #0
   18db4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18db8:	beq	18e08 <__assert_fail@plt+0x6dd4>
   18dbc:	ldrb	r6, [r2]
   18dc0:	add	r8, r1, #1
   18dc4:	add	r8, r2, r8
   18dc8:	sub	r3, r6, #97	; 0x61
   18dcc:	cmp	r3, #25
   18dd0:	add	r8, r0, r8
   18dd4:	andls	r6, r6, #223	; 0xdf
   18dd8:	add	r7, r0, r1
   18ddc:	ldrb	r1, [r0]
   18de0:	add	r3, r0, #1
   18de4:	mov	r9, r0
   18de8:	sub	r0, r1, #97	; 0x61
   18dec:	cmp	r0, #25
   18df0:	bicls	r1, r1, #32
   18df4:	cmp	r6, r1
   18df8:	mov	r0, r3
   18dfc:	beq	18e14 <__assert_fail@plt+0x6de0>
   18e00:	cmp	r7, r3
   18e04:	bne	18ddc <__assert_fail@plt+0x6da8>
   18e08:	mov	r9, #0
   18e0c:	mov	r0, r9
   18e10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e14:	cmp	r3, r7
   18e18:	add	lr, r2, #1
   18e1c:	ldrb	ip, [r2, #1]
   18e20:	beq	18e74 <__assert_fail@plt+0x6e40>
   18e24:	sub	sl, r8, r3
   18e28:	b	18e38 <__assert_fail@plt+0x6e04>
   18e2c:	ldrb	ip, [lr, #1]!
   18e30:	cmp	lr, sl
   18e34:	beq	18e64 <__assert_fail@plt+0x6e30>
   18e38:	ldrb	r1, [r3]
   18e3c:	sub	r4, ip, #97	; 0x61
   18e40:	add	r3, r3, #1
   18e44:	sub	r5, r1, #97	; 0x61
   18e48:	cmp	r5, #25
   18e4c:	bicls	r1, r1, #32
   18e50:	cmp	r4, #25
   18e54:	mov	r4, ip
   18e58:	bicls	r4, ip, #32
   18e5c:	cmp	r4, r1
   18e60:	beq	18e2c <__assert_fail@plt+0x6df8>
   18e64:	cmp	ip, #0
   18e68:	bne	18ddc <__assert_fail@plt+0x6da8>
   18e6c:	mov	r0, r9
   18e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e74:	cmp	ip, #0
   18e78:	bne	18e08 <__assert_fail@plt+0x6dd4>
   18e7c:	b	18e0c <__assert_fail@plt+0x6dd8>
   18e80:	push	{r4, lr}
   18e84:	subs	r4, r2, #0
   18e88:	sub	sp, sp, #8
   18e8c:	beq	18ee0 <__assert_fail@plt+0x6eac>
   18e90:	cmp	r0, #0
   18e94:	beq	18ee8 <__assert_fail@plt+0x6eb4>
   18e98:	cmp	r4, #1
   18e9c:	beq	18efc <__assert_fail@plt+0x6ec8>
   18ea0:	ldrb	r3, [r1]
   18ea4:	cmp	r3, #0
   18ea8:	beq	18efc <__assert_fail@plt+0x6ec8>
   18eac:	sub	ip, r1, #1
   18eb0:	add	r2, ip, r4
   18eb4:	add	r1, r1, #1
   18eb8:	mov	ip, r0
   18ebc:	b	18ecc <__assert_fail@plt+0x6e98>
   18ec0:	ldrb	r3, [r1], #1
   18ec4:	cmp	r3, #0
   18ec8:	beq	18ed8 <__assert_fail@plt+0x6ea4>
   18ecc:	cmp	r1, r2
   18ed0:	strb	r3, [ip], #1
   18ed4:	bne	18ec0 <__assert_fail@plt+0x6e8c>
   18ed8:	mov	r3, #0
   18edc:	strb	r3, [ip]
   18ee0:	add	sp, sp, #8
   18ee4:	pop	{r4, pc}
   18ee8:	mov	r0, r4
   18eec:	str	r1, [sp, #4]
   18ef0:	bl	11a58 <gcry_xmalloc@plt>
   18ef4:	ldr	r1, [sp, #4]
   18ef8:	b	18e98 <__assert_fail@plt+0x6e64>
   18efc:	mov	ip, r0
   18f00:	b	18ed8 <__assert_fail@plt+0x6ea4>
   18f04:	push	{r4, r5, r6, lr}
   18f08:	mov	r5, r0
   18f0c:	ldrb	r4, [r0]
   18f10:	cmp	r4, #0
   18f14:	beq	18f90 <__assert_fail@plt+0x6f5c>
   18f18:	bl	11d1c <__ctype_b_loc@plt>
   18f1c:	mov	r1, r5
   18f20:	ldr	r2, [r0]
   18f24:	b	18f34 <__assert_fail@plt+0x6f00>
   18f28:	ldrb	r4, [r1, #1]!
   18f2c:	cmp	r4, #0
   18f30:	beq	18f98 <__assert_fail@plt+0x6f64>
   18f34:	lsl	r4, r4, #1
   18f38:	ldrh	r3, [r2, r4]
   18f3c:	ands	r3, r3, #8192	; 0x2000
   18f40:	bne	18f28 <__assert_fail@plt+0x6ef4>
   18f44:	ldrb	r2, [r1]
   18f48:	cmp	r2, #0
   18f4c:	strb	r2, [r5]
   18f50:	movne	ip, r5
   18f54:	beq	18f90 <__assert_fail@plt+0x6f5c>
   18f58:	ldr	lr, [r0]
   18f5c:	lsl	r2, r2, #1
   18f60:	ldrh	r2, [lr, r2]
   18f64:	ands	r2, r2, #8192	; 0x2000
   18f68:	moveq	r3, r2
   18f6c:	beq	18f78 <__assert_fail@plt+0x6f44>
   18f70:	cmp	r3, #0
   18f74:	moveq	r3, ip
   18f78:	ldrb	r2, [r1, #1]!
   18f7c:	cmp	r2, #0
   18f80:	strb	r2, [ip, #1]!
   18f84:	bne	18f58 <__assert_fail@plt+0x6f24>
   18f88:	cmp	r3, #0
   18f8c:	strbne	r2, [r3]
   18f90:	mov	r0, r5
   18f94:	pop	{r4, r5, r6, pc}
   18f98:	strb	r4, [r5]
   18f9c:	mov	r0, r5
   18fa0:	pop	{r4, r5, r6, pc}
   18fa4:	push	{r4, r5, r6, lr}
   18fa8:	mov	r5, r0
   18fac:	ldrb	r4, [r0]
   18fb0:	cmp	r4, #0
   18fb4:	beq	18ff8 <__assert_fail@plt+0x6fc4>
   18fb8:	bl	11d1c <__ctype_b_loc@plt>
   18fbc:	mov	r2, r5
   18fc0:	mov	r1, #0
   18fc4:	ldr	r0, [r0]
   18fc8:	lsl	r4, r4, #1
   18fcc:	ldrh	r3, [r0, r4]
   18fd0:	ands	r3, r3, #8192	; 0x2000
   18fd4:	moveq	r1, r3
   18fd8:	beq	18fe4 <__assert_fail@plt+0x6fb0>
   18fdc:	cmp	r1, #0
   18fe0:	moveq	r1, r2
   18fe4:	ldrb	r4, [r2, #1]!
   18fe8:	cmp	r4, #0
   18fec:	bne	18fc8 <__assert_fail@plt+0x6f94>
   18ff0:	cmp	r1, #0
   18ff4:	strbne	r4, [r1]
   18ff8:	mov	r0, r5
   18ffc:	pop	{r4, r5, r6, pc}
   19000:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19004:	subs	r9, r1, #0
   19008:	beq	19068 <__assert_fail@plt+0x7034>
   1900c:	mov	r7, r2
   19010:	mov	sl, r0
   19014:	mov	r4, r0
   19018:	add	r8, r0, r9
   1901c:	mov	r5, #0
   19020:	ldrb	r1, [r4]
   19024:	mov	r0, r7
   19028:	bl	11da0 <strchr@plt>
   1902c:	mov	r6, r4
   19030:	add	r4, r4, #1
   19034:	cmp	r0, #0
   19038:	moveq	r5, r0
   1903c:	beq	19048 <__assert_fail@plt+0x7014>
   19040:	cmp	r5, #0
   19044:	moveq	r5, r6
   19048:	cmp	r4, r8
   1904c:	bne	19020 <__assert_fail@plt+0x6fec>
   19050:	cmp	r5, #0
   19054:	beq	19068 <__assert_fail@plt+0x7034>
   19058:	mov	r3, #0
   1905c:	sub	r0, r5, sl
   19060:	strb	r3, [r5]
   19064:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19068:	mov	r0, r9
   1906c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19070:	ldr	r2, [pc]	; 19078 <__assert_fail@plt+0x7044>
   19074:	b	19000 <__assert_fail@plt+0x6fcc>
   19078:	andeq	sp, r1, r0, asr #15
   1907c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19080:	subs	r9, r1, #0
   19084:	beq	190dc <__assert_fail@plt+0x70a8>
   19088:	mov	r7, r2
   1908c:	mov	sl, r0
   19090:	mov	r4, r0
   19094:	add	r8, r0, r9
   19098:	mov	r6, #0
   1909c:	ldrb	r1, [r4]
   190a0:	mov	r0, r7
   190a4:	bl	11da0 <strchr@plt>
   190a8:	mov	r5, r4
   190ac:	add	r4, r4, #1
   190b0:	cmp	r0, #0
   190b4:	moveq	r6, r0
   190b8:	beq	190c4 <__assert_fail@plt+0x7090>
   190bc:	cmp	r6, #0
   190c0:	moveq	r6, r5
   190c4:	cmp	r4, r8
   190c8:	bne	1909c <__assert_fail@plt+0x7068>
   190cc:	cmp	r6, #0
   190d0:	beq	190dc <__assert_fail@plt+0x70a8>
   190d4:	sub	r0, r6, sl
   190d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   190dc:	mov	r0, r9
   190e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   190e4:	ldr	r2, [pc]	; 190ec <__assert_fail@plt+0x70b8>
   190e8:	b	1907c <__assert_fail@plt+0x7048>
   190ec:	andeq	sp, r1, r0, asr #15
   190f0:	push	{r4, lr}
   190f4:	mov	r1, #47	; 0x2f
   190f8:	mov	r4, r0
   190fc:	bl	11ef0 <strrchr@plt>
   19100:	cmp	r0, #0
   19104:	beq	19114 <__assert_fail@plt+0x70e0>
   19108:	add	r0, r0, #1
   1910c:	pop	{r4, lr}
   19110:	b	11e6c <gcry_xstrdup@plt>
   19114:	mov	r0, r4
   19118:	pop	{r4, lr}
   1911c:	b	11e6c <gcry_xstrdup@plt>
   19120:	push	{r4, r5, r6, lr}
   19124:	mov	r1, #47	; 0x2f
   19128:	mov	r5, r0
   1912c:	bl	11ef0 <strrchr@plt>
   19130:	cmp	r0, #0
   19134:	beq	1915c <__assert_fail@plt+0x7128>
   19138:	sub	r4, r0, r5
   1913c:	add	r0, r4, #1
   19140:	bl	11a58 <gcry_xmalloc@plt>
   19144:	mov	r2, r4
   19148:	mov	r1, r5
   1914c:	bl	11e30 <strncpy@plt>
   19150:	mov	r2, #0
   19154:	strb	r2, [r0, r4]
   19158:	pop	{r4, r5, r6, pc}
   1915c:	ldr	r0, [pc, #4]	; 19168 <__assert_fail@plt+0x7134>
   19160:	pop	{r4, r5, r6, lr}
   19164:	b	11e6c <gcry_xstrdup@plt>
   19168:	andeq	ip, r1, r4, ror #31
   1916c:	push	{r0, r1, r2, r3}
   19170:	mov	r0, #1
   19174:	push	{r4, lr}
   19178:	sub	sp, sp, #8
   1917c:	ldr	r4, [pc, #60]	; 191c0 <__assert_fail@plt+0x718c>
   19180:	add	r3, sp, #20
   19184:	mov	r2, r3
   19188:	ldr	ip, [r4]
   1918c:	ldr	r1, [sp, #16]
   19190:	str	r3, [sp]
   19194:	str	ip, [sp, #4]
   19198:	bl	18584 <__assert_fail@plt+0x6550>
   1919c:	ldr	r2, [sp, #4]
   191a0:	ldr	r3, [r4]
   191a4:	cmp	r2, r3
   191a8:	bne	191bc <__assert_fail@plt+0x7188>
   191ac:	add	sp, sp, #8
   191b0:	pop	{r4, lr}
   191b4:	add	sp, sp, #16
   191b8:	bx	lr
   191bc:	bl	11bc0 <__stack_chk_fail@plt>
   191c0:	ldrdeq	lr, [r2], -r0
   191c4:	push	{r0, r1, r2, r3}
   191c8:	mov	r0, #0
   191cc:	push	{r4, lr}
   191d0:	sub	sp, sp, #8
   191d4:	ldr	r4, [pc, #60]	; 19218 <__assert_fail@plt+0x71e4>
   191d8:	add	r3, sp, #20
   191dc:	mov	r2, r3
   191e0:	ldr	ip, [r4]
   191e4:	ldr	r1, [sp, #16]
   191e8:	str	r3, [sp]
   191ec:	str	ip, [sp, #4]
   191f0:	bl	18584 <__assert_fail@plt+0x6550>
   191f4:	ldr	r2, [sp, #4]
   191f8:	ldr	r3, [r4]
   191fc:	cmp	r2, r3
   19200:	bne	19214 <__assert_fail@plt+0x71e0>
   19204:	add	sp, sp, #8
   19208:	pop	{r4, lr}
   1920c:	add	sp, sp, #16
   19210:	bx	lr
   19214:	bl	11bc0 <__stack_chk_fail@plt>
   19218:	ldrdeq	lr, [r2], -r0
   1921c:	push	{r0, r1, r2, r3}
   19220:	mov	r0, #3
   19224:	push	{r4, lr}
   19228:	sub	sp, sp, #8
   1922c:	ldr	r4, [pc, #60]	; 19270 <__assert_fail@plt+0x723c>
   19230:	add	r3, sp, #20
   19234:	mov	r2, r3
   19238:	ldr	ip, [r4]
   1923c:	ldr	r1, [sp, #16]
   19240:	str	r3, [sp]
   19244:	str	ip, [sp, #4]
   19248:	bl	18584 <__assert_fail@plt+0x6550>
   1924c:	ldr	r2, [sp, #4]
   19250:	ldr	r3, [r4]
   19254:	cmp	r2, r3
   19258:	bne	1926c <__assert_fail@plt+0x7238>
   1925c:	add	sp, sp, #8
   19260:	pop	{r4, lr}
   19264:	add	sp, sp, #16
   19268:	bx	lr
   1926c:	bl	11bc0 <__stack_chk_fail@plt>
   19270:	ldrdeq	lr, [r2], -r0
   19274:	push	{r0, r1, r2, r3}
   19278:	mov	r0, #2
   1927c:	push	{r4, lr}
   19280:	sub	sp, sp, #8
   19284:	ldr	r4, [pc, #60]	; 192c8 <__assert_fail@plt+0x7294>
   19288:	add	r3, sp, #20
   1928c:	mov	r2, r3
   19290:	ldr	ip, [r4]
   19294:	ldr	r1, [sp, #16]
   19298:	str	r3, [sp]
   1929c:	str	ip, [sp, #4]
   192a0:	bl	18584 <__assert_fail@plt+0x6550>
   192a4:	ldr	r2, [sp, #4]
   192a8:	ldr	r3, [r4]
   192ac:	cmp	r2, r3
   192b0:	bne	192c4 <__assert_fail@plt+0x7290>
   192b4:	add	sp, sp, #8
   192b8:	pop	{r4, lr}
   192bc:	add	sp, sp, #16
   192c0:	bx	lr
   192c4:	bl	11bc0 <__stack_chk_fail@plt>
   192c8:	ldrdeq	lr, [r2], -r0
   192cc:	b	11aac <strcmp@plt>
   192d0:	push	{r4, r5, r6, lr}
   192d4:	mov	lr, r0
   192d8:	ldrb	ip, [r0]
   192dc:	cmp	ip, #9
   192e0:	cmpne	ip, #32
   192e4:	bne	192f8 <__assert_fail@plt+0x72c4>
   192e8:	ldrb	ip, [lr, #1]!
   192ec:	cmp	ip, #9
   192f0:	cmpne	ip, #32
   192f4:	beq	192e8 <__assert_fail@plt+0x72b4>
   192f8:	sub	r6, ip, #48	; 0x30
   192fc:	mov	r0, #0
   19300:	uxtb	r3, r6
   19304:	cmp	r3, #9
   19308:	mov	r1, #0
   1930c:	pophi	{r4, r5, r6, pc}
   19310:	lsl	r2, r1, #2
   19314:	lsl	r3, r0, #2
   19318:	adds	r3, r3, r0
   1931c:	orr	r2, r2, r0, lsr #30
   19320:	ldrb	ip, [lr, #1]!
   19324:	adc	r2, r2, r1
   19328:	adds	r4, r3, r3
   1932c:	adc	r5, r2, r2
   19330:	adds	r0, r4, r6
   19334:	adc	r1, r5, r6, asr #31
   19338:	sub	r6, ip, #48	; 0x30
   1933c:	uxtb	r3, r6
   19340:	cmp	r3, #9
   19344:	bls	19310 <__assert_fail@plt+0x72dc>
   19348:	pop	{r4, r5, r6, pc}
   1934c:	ldrb	r2, [r0]
   19350:	sub	r3, r2, #48	; 0x30
   19354:	uxtb	r1, r3
   19358:	cmp	r1, #9
   1935c:	bls	19384 <__assert_fail@plt+0x7350>
   19360:	sub	r3, r2, #65	; 0x41
   19364:	cmp	r3, #5
   19368:	subls	r3, r2, #55	; 0x37
   1936c:	lslls	r3, r3, #4
   19370:	bls	19388 <__assert_fail@plt+0x7354>
   19374:	sub	r3, r2, #97	; 0x61
   19378:	cmp	r3, #5
   1937c:	bhi	193cc <__assert_fail@plt+0x7398>
   19380:	sub	r3, r2, #87	; 0x57
   19384:	lsl	r3, r3, #4
   19388:	ldrb	r2, [r0, #1]
   1938c:	sub	r0, r2, #48	; 0x30
   19390:	uxtb	r1, r0
   19394:	cmp	r1, #9
   19398:	bls	193ac <__assert_fail@plt+0x7378>
   1939c:	sub	r1, r2, #65	; 0x41
   193a0:	cmp	r1, #5
   193a4:	bhi	193b4 <__assert_fail@plt+0x7380>
   193a8:	sub	r0, r2, #55	; 0x37
   193ac:	add	r0, r0, r3
   193b0:	bx	lr
   193b4:	sub	r1, r2, #97	; 0x61
   193b8:	cmp	r1, #5
   193bc:	bhi	193cc <__assert_fail@plt+0x7398>
   193c0:	sub	r0, r2, #87	; 0x57
   193c4:	add	r0, r0, r3
   193c8:	bx	lr
   193cc:	mvn	r0, #0
   193d0:	bx	lr
   193d4:	subs	r3, r1, #0
   193d8:	beq	193e0 <__assert_fail@plt+0x73ac>
   193dc:	b	18b9c <__assert_fail@plt+0x6b68>
   193e0:	mov	r0, r3
   193e4:	bx	lr
   193e8:	sub	r0, r0, #65	; 0x41
   193ec:	cmp	r0, #25
   193f0:	movhi	r0, #0
   193f4:	movls	r0, #1
   193f8:	bx	lr
   193fc:	sub	r0, r0, #97	; 0x61
   19400:	cmp	r0, #25
   19404:	movhi	r0, #0
   19408:	movls	r0, #1
   1940c:	bx	lr
   19410:	sub	r3, r0, #97	; 0x61
   19414:	cmp	r3, #25
   19418:	bicls	r0, r0, #32
   1941c:	bx	lr
   19420:	sub	r3, r0, #65	; 0x41
   19424:	cmp	r3, #25
   19428:	orrls	r0, r0, #32
   1942c:	bx	lr
   19430:	ldrb	r3, [r0]
   19434:	cmp	r3, #0
   19438:	bxeq	lr
   1943c:	mov	r1, r0
   19440:	tst	r3, #128	; 0x80
   19444:	moveq	r2, #1
   19448:	movne	r2, #0
   1944c:	sub	ip, r3, #65	; 0x41
   19450:	cmp	ip, #25
   19454:	movhi	r2, #0
   19458:	andls	r2, r2, #1
   1945c:	cmp	r2, #0
   19460:	orrne	r3, r3, #32
   19464:	strbne	r3, [r1]
   19468:	ldrb	r3, [r1, #1]!
   1946c:	cmp	r3, #0
   19470:	bne	19440 <__assert_fail@plt+0x740c>
   19474:	bx	lr
   19478:	cmp	r0, r1
   1947c:	beq	19538 <__assert_fail@plt+0x7504>
   19480:	push	{r4, r5, lr}
   19484:	ldrb	r2, [r0]
   19488:	ldrb	r3, [r1]
   1948c:	cmp	r2, #0
   19490:	bne	194d8 <__assert_fail@plt+0x74a4>
   19494:	b	1950c <__assert_fail@plt+0x74d8>
   19498:	cmp	r3, r2
   1949c:	sub	ip, r2, #97	; 0x61
   194a0:	beq	194c8 <__assert_fail@plt+0x7494>
   194a4:	cmp	ip, #25
   194a8:	sub	r4, r3, #97	; 0x61
   194ac:	mov	lr, r2
   194b0:	bicls	lr, r2, #32
   194b4:	cmp	r4, #25
   194b8:	bicls	r3, r3, #32
   194bc:	cmp	r3, lr
   194c0:	mov	r5, r2
   194c4:	bne	19520 <__assert_fail@plt+0x74ec>
   194c8:	ldrb	r2, [r0, #1]!
   194cc:	ldrb	r3, [r1, #1]!
   194d0:	cmp	r2, #0
   194d4:	beq	1950c <__assert_fail@plt+0x74d8>
   194d8:	cmp	r3, #0
   194dc:	bne	19498 <__assert_fail@plt+0x7464>
   194e0:	sub	r3, r2, #97	; 0x61
   194e4:	cmp	r3, #25
   194e8:	mov	r5, r2
   194ec:	mov	r3, #0
   194f0:	bhi	19504 <__assert_fail@plt+0x74d0>
   194f4:	bic	r5, r2, #32
   194f8:	sub	r2, r3, #97	; 0x61
   194fc:	cmp	r2, #25
   19500:	bicls	r3, r3, #32
   19504:	sub	r0, r5, r3
   19508:	pop	{r4, r5, pc}
   1950c:	cmp	r3, #0
   19510:	movne	r5, #0
   19514:	bne	194f8 <__assert_fail@plt+0x74c4>
   19518:	mov	r0, #0
   1951c:	pop	{r4, r5, pc}
   19520:	ldrb	r3, [r1]
   19524:	cmp	r3, r2
   19528:	beq	19518 <__assert_fail@plt+0x74e4>
   1952c:	cmp	ip, #25
   19530:	bls	194f4 <__assert_fail@plt+0x74c0>
   19534:	b	194f8 <__assert_fail@plt+0x74c4>
   19538:	mov	r0, #0
   1953c:	bx	lr
   19540:	cmp	r2, #0
   19544:	cmpne	r0, r1
   19548:	beq	195b0 <__assert_fail@plt+0x757c>
   1954c:	push	{r4, r5, lr}
   19550:	sub	r1, r1, #1
   19554:	sub	r4, r0, #1
   19558:	b	19564 <__assert_fail@plt+0x7530>
   1955c:	cmp	r3, ip
   19560:	bne	195a8 <__assert_fail@plt+0x7574>
   19564:	ldrb	r3, [r4, #1]!
   19568:	sub	ip, r3, #65	; 0x41
   1956c:	cmp	ip, #25
   19570:	ldrb	ip, [r1, #1]!
   19574:	mvn	lr, r4
   19578:	add	lr, lr, r2
   1957c:	sub	r5, ip, #65	; 0x41
   19580:	orrls	r3, r3, #32
   19584:	cmp	r5, #25
   19588:	orrls	ip, ip, #32
   1958c:	cmn	r0, lr
   19590:	moveq	lr, #1
   19594:	movne	lr, #0
   19598:	cmp	r3, #0
   1959c:	moveq	lr, #1
   195a0:	cmp	lr, #0
   195a4:	beq	1955c <__assert_fail@plt+0x7528>
   195a8:	sub	r0, r3, ip
   195ac:	pop	{r4, r5, pc}
   195b0:	mov	r0, #0
   195b4:	bx	lr
   195b8:	cmp	r1, r0
   195bc:	beq	195c4 <__assert_fail@plt+0x7590>
   195c0:	b	18be4 <__assert_fail@plt+0x6bb0>
   195c4:	mov	r0, #0
   195c8:	bx	lr
   195cc:	cmp	r0, r1
   195d0:	beq	19630 <__assert_fail@plt+0x75fc>
   195d4:	ldrb	r2, [r0]
   195d8:	ldrb	ip, [r1]
   195dc:	cmp	r2, #0
   195e0:	beq	19618 <__assert_fail@plt+0x75e4>
   195e4:	clz	r3, ip
   195e8:	lsr	r3, r3, #5
   195ec:	b	19608 <__assert_fail@plt+0x75d4>
   195f0:	ldrb	r2, [r0, #1]!
   195f4:	ldrb	ip, [r1, #1]!
   195f8:	clz	r3, ip
   195fc:	cmp	r2, #0
   19600:	lsr	r3, r3, #5
   19604:	beq	19618 <__assert_fail@plt+0x75e4>
   19608:	cmp	ip, r2
   1960c:	orrne	r3, r3, #1
   19610:	cmp	r3, #0
   19614:	beq	195f0 <__assert_fail@plt+0x75bc>
   19618:	cmp	ip, r2
   1961c:	beq	19630 <__assert_fail@plt+0x75fc>
   19620:	sxtb	r2, r2
   19624:	sxtb	r0, ip
   19628:	sub	r0, r2, r0
   1962c:	bx	lr
   19630:	mov	r0, #0
   19634:	bx	lr
   19638:	push	{r4, r5, r6, r7, r8, lr}
   1963c:	subs	r7, r3, #0
   19640:	mov	r4, r0
   19644:	beq	196a4 <__assert_fail@plt+0x7670>
   19648:	cmp	r7, r1
   1964c:	bhi	1969c <__assert_fail@plt+0x7668>
   19650:	sub	r1, r1, r7
   19654:	adds	r5, r0, r1
   19658:	bcs	1969c <__assert_fail@plt+0x7668>
   1965c:	cmp	r0, r2
   19660:	mov	r6, r2
   19664:	beq	196a4 <__assert_fail@plt+0x7670>
   19668:	mov	r2, r7
   1966c:	mov	r1, r6
   19670:	mov	r0, r4
   19674:	bl	18be4 <__assert_fail@plt+0x6bb0>
   19678:	cmp	r0, #0
   1967c:	beq	196a4 <__assert_fail@plt+0x7670>
   19680:	add	r4, r4, #1
   19684:	cmp	r5, r4
   19688:	bcc	1969c <__assert_fail@plt+0x7668>
   1968c:	cmp	r6, r4
   19690:	bne	19668 <__assert_fail@plt+0x7634>
   19694:	mov	r0, r6
   19698:	pop	{r4, r5, r6, r7, r8, pc}
   1969c:	mov	r0, #0
   196a0:	pop	{r4, r5, r6, r7, r8, pc}
   196a4:	mov	r0, r4
   196a8:	pop	{r4, r5, r6, r7, r8, pc}
   196ac:	push	{r4, r5, r6, lr}
   196b0:	mov	r5, r0
   196b4:	ldrb	r4, [r0]
   196b8:	cmp	r4, #0
   196bc:	beq	196e0 <__assert_fail@plt+0x76ac>
   196c0:	bl	11cec <__ctype_tolower_loc@plt>
   196c4:	mov	r3, r5
   196c8:	ldr	r2, [r0]
   196cc:	ldr	r2, [r2, r4, lsl #2]
   196d0:	strb	r2, [r3]
   196d4:	ldrb	r4, [r3, #1]!
   196d8:	cmp	r4, #0
   196dc:	bne	196c8 <__assert_fail@plt+0x7694>
   196e0:	mov	r0, r5
   196e4:	pop	{r4, r5, r6, pc}
   196e8:	cmp	r2, #0
   196ec:	beq	19740 <__assert_fail@plt+0x770c>
   196f0:	push	{r4, r5, r6, r7, r8, lr}
   196f4:	sub	r4, r0, #1
   196f8:	add	r8, r4, r2
   196fc:	sub	r7, r1, #1
   19700:	ldrb	r5, [r4, #1]!
   19704:	ldrb	r6, [r7, #1]!
   19708:	cmp	r5, r6
   1970c:	beq	19728 <__assert_fail@plt+0x76f4>
   19710:	bl	11cf8 <__ctype_toupper_loc@plt>
   19714:	ldr	r3, [r0]
   19718:	ldr	r2, [r3, r5, lsl #2]
   1971c:	ldr	r3, [r3, r6, lsl #2]
   19720:	cmp	r2, r3
   19724:	bne	19738 <__assert_fail@plt+0x7704>
   19728:	cmp	r8, r4
   1972c:	bne	19700 <__assert_fail@plt+0x76cc>
   19730:	mov	r0, #0
   19734:	pop	{r4, r5, r6, r7, r8, pc}
   19738:	sub	r0, r5, r6
   1973c:	pop	{r4, r5, r6, r7, r8, pc}
   19740:	mov	r0, r2
   19744:	bx	lr
   19748:	cmp	r0, #0
   1974c:	bxeq	lr
   19750:	mov	r2, #1
   19754:	b	189a8 <__assert_fail@plt+0x6974>
   19758:	cmp	r0, #0
   1975c:	bxeq	lr
   19760:	mov	r2, #0
   19764:	b	189a8 <__assert_fail@plt+0x6974>
   19768:	push	{r0, r1, r2, r3}
   1976c:	push	{r4, lr}
   19770:	sub	sp, sp, #8
   19774:	ldr	r4, [pc, #80]	; 197cc <__assert_fail@plt+0x7798>
   19778:	ldr	r0, [sp, #16]
   1977c:	ldr	r3, [r4]
   19780:	cmp	r0, #0
   19784:	str	r3, [sp, #4]
   19788:	beq	197bc <__assert_fail@plt+0x7788>
   1978c:	add	r3, sp, #20
   19790:	mov	r1, r3
   19794:	str	r3, [sp]
   19798:	bl	184b4 <__assert_fail@plt+0x6480>
   1979c:	ldr	r2, [sp, #4]
   197a0:	ldr	r3, [r4]
   197a4:	cmp	r2, r3
   197a8:	bne	197c8 <__assert_fail@plt+0x7794>
   197ac:	add	sp, sp, #8
   197b0:	pop	{r4, lr}
   197b4:	add	sp, sp, #16
   197b8:	bx	lr
   197bc:	ldr	r0, [pc, #12]	; 197d0 <__assert_fail@plt+0x779c>
   197c0:	bl	1201c <gcry_strdup@plt>
   197c4:	b	1979c <__assert_fail@plt+0x7768>
   197c8:	bl	11bc0 <__stack_chk_fail@plt>
   197cc:	ldrdeq	lr, [r2], -r0
   197d0:	andeq	sp, r1, r4, asr #15
   197d4:	push	{r0, r1, r2, r3}
   197d8:	push	{r4, lr}
   197dc:	sub	sp, sp, #8
   197e0:	ldr	r4, [pc, #144]	; 19878 <__assert_fail@plt+0x7844>
   197e4:	ldr	r0, [sp, #16]
   197e8:	ldr	r3, [r4]
   197ec:	cmp	r0, #0
   197f0:	str	r3, [sp, #4]
   197f4:	beq	19830 <__assert_fail@plt+0x77fc>
   197f8:	add	r3, sp, #20
   197fc:	mov	r1, r3
   19800:	str	r3, [sp]
   19804:	bl	184b4 <__assert_fail@plt+0x6480>
   19808:	cmp	r0, #0
   1980c:	beq	19840 <__assert_fail@plt+0x780c>
   19810:	ldr	r2, [sp, #4]
   19814:	ldr	r3, [r4]
   19818:	cmp	r2, r3
   1981c:	bne	1983c <__assert_fail@plt+0x7808>
   19820:	add	sp, sp, #8
   19824:	pop	{r4, lr}
   19828:	add	sp, sp, #16
   1982c:	bx	lr
   19830:	ldr	r0, [pc, #68]	; 1987c <__assert_fail@plt+0x7848>
   19834:	bl	11e6c <gcry_xstrdup@plt>
   19838:	b	19808 <__assert_fail@plt+0x77d4>
   1983c:	bl	11bc0 <__stack_chk_fail@plt>
   19840:	bl	11ddc <__errno_location@plt>
   19844:	ldr	r3, [pc, #52]	; 19880 <__assert_fail@plt+0x784c>
   19848:	ldr	r3, [r3]
   1984c:	ldr	r2, [r0]
   19850:	cmp	r2, #22
   19854:	moveq	r2, #37	; 0x25
   19858:	moveq	r1, #1
   1985c:	ldreq	r0, [pc, #32]	; 19884 <__assert_fail@plt+0x7850>
   19860:	movne	r2, #22
   19864:	movne	r1, #1
   19868:	ldrne	r0, [pc, #24]	; 19888 <__assert_fail@plt+0x7854>
   1986c:	bl	11c44 <fwrite@plt>
   19870:	mov	r0, #2
   19874:	bl	11d4c <exit@plt>
   19878:	ldrdeq	lr, [r2], -r0
   1987c:	andeq	sp, r1, r4, asr #15
   19880:	andeq	pc, r2, r8, asr #1
   19884:	andeq	sp, r1, r8, asr #15
   19888:	strdeq	sp, [r1], -r0
   1988c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19890:	mov	r6, r2
   19894:	mov	r7, r3
   19898:	mov	r8, r0
   1989c:	mov	r5, r1
   198a0:	bl	11da0 <strchr@plt>
   198a4:	cmp	r0, #0
   198a8:	beq	19934 <__assert_fail@plt+0x7900>
   198ac:	mov	r4, #1
   198b0:	b	198b8 <__assert_fail@plt+0x7884>
   198b4:	mov	r4, r3
   198b8:	add	r0, r0, #1
   198bc:	mov	r1, r5
   198c0:	bl	11da0 <strchr@plt>
   198c4:	add	r3, r4, #1
   198c8:	cmp	r0, #0
   198cc:	bne	198b4 <__assert_fail@plt+0x7880>
   198d0:	add	r0, r4, #2
   198d4:	mov	r1, #4
   198d8:	bl	11e24 <gcry_calloc@plt>
   198dc:	subs	r9, r0, #0
   198e0:	beq	1992c <__assert_fail@plt+0x78f8>
   198e4:	str	r8, [r9]
   198e8:	mov	r0, r8
   198ec:	mov	r1, r5
   198f0:	bl	11da0 <strchr@plt>
   198f4:	subs	r3, r0, #0
   198f8:	beq	1993c <__assert_fail@plt+0x7908>
   198fc:	mov	r8, r9
   19900:	mov	r4, #1
   19904:	add	r0, r3, #1
   19908:	strb	r6, [r3]
   1990c:	str	r0, [r8, #4]!
   19910:	mov	r1, r5
   19914:	bl	11da0 <strchr@plt>
   19918:	add	r4, r4, #1
   1991c:	subs	r3, r0, #0
   19920:	bne	19904 <__assert_fail@plt+0x78d0>
   19924:	cmp	r7, #0
   19928:	strne	r4, [r7]
   1992c:	mov	r0, r9
   19930:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19934:	mov	r0, #2
   19938:	b	198d4 <__assert_fail@plt+0x78a0>
   1993c:	mov	r4, #1
   19940:	b	19924 <__assert_fail@plt+0x78f0>
   19944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19948:	mov	r8, r0
   1994c:	mov	r6, r1
   19950:	bl	11f80 <strpbrk@plt>
   19954:	cmp	r0, #0
   19958:	beq	19b10 <__assert_fail@plt+0x7adc>
   1995c:	mov	r5, #1
   19960:	b	19968 <__assert_fail@plt+0x7934>
   19964:	mov	r5, r3
   19968:	add	r0, r0, #1
   1996c:	mov	r1, r6
   19970:	bl	11f80 <strpbrk@plt>
   19974:	add	r3, r5, #1
   19978:	cmp	r0, #0
   1997c:	bne	19964 <__assert_fail@plt+0x7930>
   19980:	add	r5, r5, #2
   19984:	tst	r5, #-1073741824	; 0xc0000000
   19988:	lsl	r5, r5, #2
   1998c:	bne	19a5c <__assert_fail@plt+0x7a28>
   19990:	mov	r0, r8
   19994:	bl	11d88 <strlen@plt>
   19998:	add	r0, r0, #1
   1999c:	adds	r0, r5, r0
   199a0:	movcs	r7, #1
   199a4:	movcc	r7, #0
   199a8:	bcs	19a5c <__assert_fail@plt+0x7a28>
   199ac:	bl	11a7c <gcry_malloc@plt>
   199b0:	subs	r9, r0, #0
   199b4:	beq	19a68 <__assert_fail@plt+0x7a34>
   199b8:	add	r5, r9, r5
   199bc:	mov	r1, r8
   199c0:	mov	r0, r5
   199c4:	bl	11c5c <strcpy@plt>
   199c8:	mov	r4, r5
   199cc:	sub	r8, r9, #4
   199d0:	mov	sl, r7
   199d4:	mov	r1, r6
   199d8:	mov	r0, r4
   199dc:	bl	11f80 <strpbrk@plt>
   199e0:	cmp	r0, #0
   199e4:	beq	19a70 <__assert_fail@plt+0x7a3c>
   199e8:	strb	sl, [r0]
   199ec:	ldrb	r3, [r4]
   199f0:	cmp	r3, #32
   199f4:	cmpne	r3, #9
   199f8:	bne	19a0c <__assert_fail@plt+0x79d8>
   199fc:	ldrb	r3, [r4, #1]!
   19a00:	cmp	r3, #9
   19a04:	cmpne	r3, #32
   19a08:	beq	199fc <__assert_fail@plt+0x79c8>
   19a0c:	sub	r3, r0, #1
   19a10:	cmp	r3, r4
   19a14:	bcc	19a4c <__assert_fail@plt+0x7a18>
   19a18:	ldrb	r2, [r0, #-1]
   19a1c:	cmp	r2, #9
   19a20:	cmpne	r2, #32
   19a24:	bne	19a4c <__assert_fail@plt+0x7a18>
   19a28:	sub	r1, r4, #1
   19a2c:	b	19a40 <__assert_fail@plt+0x7a0c>
   19a30:	ldrb	r2, [r3]
   19a34:	cmp	r2, #9
   19a38:	cmpne	r2, #32
   19a3c:	bne	19a4c <__assert_fail@plt+0x7a18>
   19a40:	strb	sl, [r3], #-1
   19a44:	cmp	r3, r1
   19a48:	bne	19a30 <__assert_fail@plt+0x79fc>
   19a4c:	str	r4, [r8, #4]!
   19a50:	add	r7, r7, #1
   19a54:	add	r4, r0, #1
   19a58:	b	199d4 <__assert_fail@plt+0x79a0>
   19a5c:	mov	r0, #12
   19a60:	bl	11f14 <gpg_err_set_errno@plt>
   19a64:	mov	r9, #0
   19a68:	mov	r0, r9
   19a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a70:	ldrb	r3, [r4]
   19a74:	cmp	r3, #32
   19a78:	cmpne	r3, #9
   19a7c:	bne	19a90 <__assert_fail@plt+0x7a5c>
   19a80:	ldrb	r3, [r4, #1]!
   19a84:	cmp	r3, #9
   19a88:	cmpne	r3, #32
   19a8c:	beq	19a80 <__assert_fail@plt+0x7a4c>
   19a90:	mov	r0, r4
   19a94:	bl	11d88 <strlen@plt>
   19a98:	sub	r0, r0, #1
   19a9c:	adds	r3, r4, r0
   19aa0:	bcs	19ad8 <__assert_fail@plt+0x7aa4>
   19aa4:	ldrb	r2, [r4, r0]
   19aa8:	cmp	r2, #9
   19aac:	cmpne	r2, #32
   19ab0:	bne	19ad8 <__assert_fail@plt+0x7aa4>
   19ab4:	mov	r1, #0
   19ab8:	b	19acc <__assert_fail@plt+0x7a98>
   19abc:	ldrb	r2, [r3]
   19ac0:	cmp	r2, #9
   19ac4:	cmpne	r2, #32
   19ac8:	bne	19ad8 <__assert_fail@plt+0x7aa4>
   19acc:	strb	r1, [r3], #-1
   19ad0:	cmp	r3, r4
   19ad4:	bcs	19abc <__assert_fail@plt+0x7a88>
   19ad8:	lsl	r3, r7, #2
   19adc:	add	r2, r3, #8
   19ae0:	add	r2, r9, r2
   19ae4:	add	r3, r9, r3
   19ae8:	cmp	r5, r2
   19aec:	mov	r2, #0
   19af0:	str	r4, [r9, r7, lsl #2]
   19af4:	str	r2, [r3, #4]
   19af8:	beq	19a68 <__assert_fail@plt+0x7a34>
   19afc:	ldr	r3, [pc, #20]	; 19b18 <__assert_fail@plt+0x7ae4>
   19b00:	ldr	r2, [pc, #20]	; 19b1c <__assert_fail@plt+0x7ae8>
   19b04:	ldr	r1, [pc, #20]	; 19b20 <__assert_fail@plt+0x7aec>
   19b08:	ldr	r0, [pc, #20]	; 19b24 <__assert_fail@plt+0x7af0>
   19b0c:	bl	12034 <__assert_fail@plt>
   19b10:	mov	r5, #8
   19b14:	b	19990 <__assert_fail@plt+0x795c>
   19b18:	andeq	sp, r1, r4, ror r7
   19b1c:	andeq	r0, r0, r2, lsl r5
   19b20:	andeq	sp, r1, r0, lsl #15
   19b24:	andeq	sp, r1, r8, lsl #16
   19b28:	push	{r4, r5, r6, r7, r8, lr}
   19b2c:	mov	r6, r2
   19b30:	ldrb	r3, [r0]
   19b34:	cmp	r3, #32
   19b38:	bne	19b48 <__assert_fail@plt+0x7b14>
   19b3c:	ldrb	r3, [r0, #1]!
   19b40:	cmp	r3, #32
   19b44:	beq	19b3c <__assert_fail@plt+0x7b08>
   19b48:	cmp	r6, #0
   19b4c:	beq	19bac <__assert_fail@plt+0x7b78>
   19b50:	mov	r4, #0
   19b54:	sub	r5, r1, #4
   19b58:	mov	r7, r4
   19b5c:	str	r0, [r5, #4]!
   19b60:	mov	r1, #32
   19b64:	bl	11da0 <strchr@plt>
   19b68:	add	r4, r4, #1
   19b6c:	subs	r3, r0, #0
   19b70:	beq	19ba4 <__assert_fail@plt+0x7b70>
   19b74:	mov	r0, r3
   19b78:	strb	r7, [r0], #1
   19b7c:	ldrb	r3, [r3, #1]
   19b80:	cmp	r3, #32
   19b84:	bne	19b94 <__assert_fail@plt+0x7b60>
   19b88:	ldrb	r3, [r0, #1]!
   19b8c:	cmp	r3, #32
   19b90:	beq	19b88 <__assert_fail@plt+0x7b54>
   19b94:	cmp	r3, #0
   19b98:	beq	19ba4 <__assert_fail@plt+0x7b70>
   19b9c:	cmp	r6, r4
   19ba0:	bne	19b5c <__assert_fail@plt+0x7b28>
   19ba4:	mov	r0, r4
   19ba8:	pop	{r4, r5, r6, r7, r8, pc}
   19bac:	mov	r4, r6
   19bb0:	b	19ba4 <__assert_fail@plt+0x7b70>
   19bb4:	push	{r4, r5, r6, r7, r8, lr}
   19bb8:	subs	r7, r2, #0
   19bbc:	beq	19c0c <__assert_fail@plt+0x7bd8>
   19bc0:	mov	r4, #0
   19bc4:	sub	r5, r1, #4
   19bc8:	mov	r6, r4
   19bcc:	b	19be8 <__assert_fail@plt+0x7bb4>
   19bd0:	strb	r6, [r0], #1
   19bd4:	ldrb	r3, [r3, #1]
   19bd8:	cmp	r3, #0
   19bdc:	beq	19c04 <__assert_fail@plt+0x7bd0>
   19be0:	cmp	r7, r4
   19be4:	beq	19c04 <__assert_fail@plt+0x7bd0>
   19be8:	str	r0, [r5, #4]!
   19bec:	mov	r1, #58	; 0x3a
   19bf0:	bl	11da0 <strchr@plt>
   19bf4:	add	r4, r4, #1
   19bf8:	subs	r3, r0, #0
   19bfc:	mov	r0, r3
   19c00:	bne	19bd0 <__assert_fail@plt+0x7b9c>
   19c04:	mov	r0, r4
   19c08:	pop	{r4, r5, r6, r7, r8, pc}
   19c0c:	mov	r4, r7
   19c10:	b	19c04 <__assert_fail@plt+0x7bd0>
   19c14:	push	{r4, r5, r6, lr}
   19c18:	sub	sp, sp, #32
   19c1c:	ldr	r4, [pc, #220]	; 19d00 <__assert_fail@plt+0x7ccc>
   19c20:	cmp	r0, #0
   19c24:	ldr	r3, [r4]
   19c28:	str	r3, [sp, #28]
   19c2c:	beq	19cf4 <__assert_fail@plt+0x7cc0>
   19c30:	mov	r5, r1
   19c34:	add	r3, sp, #12
   19c38:	add	r2, sp, #8
   19c3c:	add	r1, sp, #4
   19c40:	bl	182ec <__assert_fail@plt+0x62b8>
   19c44:	subs	r6, r0, #0
   19c48:	beq	19cf4 <__assert_fail@plt+0x7cc0>
   19c4c:	cmp	r5, #0
   19c50:	beq	19cc4 <__assert_fail@plt+0x7c90>
   19c54:	add	r1, sp, #16
   19c58:	mov	r0, r5
   19c5c:	add	r3, sp, #24
   19c60:	add	r2, sp, #20
   19c64:	bl	182ec <__assert_fail@plt+0x62b8>
   19c68:	subs	r1, r0, #0
   19c6c:	beq	19cf4 <__assert_fail@plt+0x7cc0>
   19c70:	ldr	r3, [sp, #4]
   19c74:	ldr	r2, [sp, #16]
   19c78:	cmp	r3, r2
   19c7c:	subne	r3, r3, r2
   19c80:	beq	19c94 <__assert_fail@plt+0x7c60>
   19c84:	cmp	r3, #0
   19c88:	mvnlt	r0, #0
   19c8c:	movge	r0, #1
   19c90:	b	19cc8 <__assert_fail@plt+0x7c94>
   19c94:	ldr	r3, [sp, #8]
   19c98:	ldr	r0, [sp, #20]
   19c9c:	cmp	r3, r0
   19ca0:	bne	19ce0 <__assert_fail@plt+0x7cac>
   19ca4:	ldr	r3, [sp, #12]
   19ca8:	ldr	r0, [sp, #24]
   19cac:	cmp	r3, r0
   19cb0:	bne	19ce0 <__assert_fail@plt+0x7cac>
   19cb4:	mov	r0, r6
   19cb8:	bl	11aac <strcmp@plt>
   19cbc:	subs	r3, r0, #0
   19cc0:	bne	19c84 <__assert_fail@plt+0x7c50>
   19cc4:	mov	r0, #0
   19cc8:	ldr	r2, [sp, #28]
   19ccc:	ldr	r3, [r4]
   19cd0:	cmp	r2, r3
   19cd4:	bne	19cfc <__assert_fail@plt+0x7cc8>
   19cd8:	add	sp, sp, #32
   19cdc:	pop	{r4, r5, r6, pc}
   19ce0:	sub	r3, r3, r0
   19ce4:	cmp	r3, #0
   19ce8:	mvnlt	r0, #0
   19cec:	movge	r0, #1
   19cf0:	b	19cc8 <__assert_fail@plt+0x7c94>
   19cf4:	mov	r0, #-2147483648	; 0x80000000
   19cf8:	b	19cc8 <__assert_fail@plt+0x7c94>
   19cfc:	bl	11bc0 <__stack_chk_fail@plt>
   19d00:	ldrdeq	lr, [r2], -r0
   19d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d08:	sub	sp, sp, #12
   19d0c:	mov	r7, r1
   19d10:	str	r2, [sp]
   19d14:	bl	1201c <gcry_strdup@plt>
   19d18:	subs	r3, r0, #0
   19d1c:	str	r3, [sp, #4]
   19d20:	beq	19eec <__assert_fail@plt+0x7eb8>
   19d24:	mov	r6, #0
   19d28:	ldr	r9, [pc, #464]	; 19f00 <__assert_fail@plt+0x7ecc>
   19d2c:	mov	r5, r6
   19d30:	mov	r8, r6
   19d34:	mov	r4, r3
   19d38:	mov	fp, r3
   19d3c:	mov	r1, r9
   19d40:	mov	r0, fp
   19d44:	bl	11adc <strcspn@plt>
   19d48:	adds	sl, fp, r0
   19d4c:	beq	19dec <__assert_fail@plt+0x7db8>
   19d50:	ldrb	fp, [sl]
   19d54:	cmp	fp, #10
   19d58:	beq	19e08 <__assert_fail@plt+0x7dd4>
   19d5c:	subs	r1, sl, r4
   19d60:	beq	19d70 <__assert_fail@plt+0x7d3c>
   19d64:	mov	r0, r4
   19d68:	bl	18b9c <__assert_fail@plt+0x6b68>
   19d6c:	mov	r1, r0
   19d70:	cmp	r7, r1
   19d74:	bgt	19e20 <__assert_fail@plt+0x7dec>
   19d78:	ldr	r3, [sp]
   19d7c:	sub	ip, r1, r7
   19d80:	cmp	r3, r1
   19d84:	sublt	r1, r1, r3
   19d88:	lsl	ip, ip, #1
   19d8c:	sub	r0, r7, r5
   19d90:	addlt	ip, ip, r1, lsl #2
   19d94:	cmp	ip, r0
   19d98:	movlt	ip, #0
   19d9c:	movge	ip, #1
   19da0:	cmp	r5, #0
   19da4:	movne	r5, ip
   19da8:	moveq	r5, #0
   19dac:	cmp	r5, #0
   19db0:	movne	sl, r8
   19db4:	ldrbne	fp, [r8]
   19db8:	cmp	fp, #0
   19dbc:	beq	19ea0 <__assert_fail@plt+0x7e6c>
   19dc0:	mov	fp, sl
   19dc4:	mov	r1, #10
   19dc8:	strb	r1, [fp], #1
   19dcc:	ldrb	r1, [sl, #1]
   19dd0:	cmp	r1, #32
   19dd4:	beq	19e50 <__assert_fail@plt+0x7e1c>
   19dd8:	mov	r6, #0
   19ddc:	mov	r5, r6
   19de0:	mov	r8, r6
   19de4:	mov	r4, fp
   19de8:	b	19d3c <__assert_fail@plt+0x7d08>
   19dec:	ldr	sl, [sp, #4]
   19df0:	mov	r0, sl
   19df4:	bl	11d88 <strlen@plt>
   19df8:	add	sl, sl, r0
   19dfc:	ldrb	fp, [sl]
   19e00:	cmp	fp, #10
   19e04:	bne	19d5c <__assert_fail@plt+0x7d28>
   19e08:	add	r4, sl, #1
   19e0c:	mov	r5, #0
   19e10:	mov	fp, r4
   19e14:	mov	r8, r5
   19e18:	mov	r6, #1
   19e1c:	b	19d3c <__assert_fail@plt+0x7d08>
   19e20:	cmp	fp, #0
   19e24:	beq	19ea0 <__assert_fail@plt+0x7e6c>
   19e28:	ldrb	r0, [sl, #1]
   19e2c:	add	fp, sl, #1
   19e30:	cmp	r0, #32
   19e34:	bne	19e44 <__assert_fail@plt+0x7e10>
   19e38:	ldrb	r0, [fp, #1]!
   19e3c:	cmp	r0, #32
   19e40:	beq	19e38 <__assert_fail@plt+0x7e04>
   19e44:	mov	r5, r1
   19e48:	mov	r8, sl
   19e4c:	b	19d3c <__assert_fail@plt+0x7d08>
   19e50:	ldrb	r1, [sl, #2]
   19e54:	cmp	r1, #32
   19e58:	bne	19ef8 <__assert_fail@plt+0x7ec4>
   19e5c:	add	r2, sl, #3
   19e60:	mov	r4, r2
   19e64:	add	r2, r2, #1
   19e68:	ldrb	r1, [r4]
   19e6c:	cmp	r1, #32
   19e70:	beq	19e60 <__assert_fail@plt+0x7e2c>
   19e74:	mov	r0, r4
   19e78:	bl	11d88 <strlen@plt>
   19e7c:	mov	r6, #0
   19e80:	mov	r1, r4
   19e84:	mov	r5, r6
   19e88:	mov	r8, r6
   19e8c:	mov	r4, fp
   19e90:	add	r2, r0, #1
   19e94:	mov	r0, fp
   19e98:	bl	11b24 <memmove@plt>
   19e9c:	b	19d3c <__assert_fail@plt+0x7d08>
   19ea0:	ldr	r4, [sp, #4]
   19ea4:	mov	r0, r4
   19ea8:	bl	11d88 <strlen@plt>
   19eac:	ldr	r2, [pc, #80]	; 19f04 <__assert_fail@plt+0x7ed0>
   19eb0:	mov	r1, r0
   19eb4:	mov	r0, r4
   19eb8:	bl	19000 <__assert_fail@plt+0x6fcc>
   19ebc:	cmp	r6, #0
   19ec0:	bne	19eec <__assert_fail@plt+0x7eb8>
   19ec4:	ldrb	r3, [r4]
   19ec8:	cmp	r3, #0
   19ecc:	beq	19eec <__assert_fail@plt+0x7eb8>
   19ed0:	mov	r0, r4
   19ed4:	bl	11d88 <strlen@plt>
   19ed8:	sub	r0, r0, #1
   19edc:	ldrb	r3, [r4, r0]
   19ee0:	cmp	r3, #10
   19ee4:	ldreq	r3, [sp, #4]
   19ee8:	strbeq	r6, [r3, r0]
   19eec:	ldr	r0, [sp, #4]
   19ef0:	add	sp, sp, #12
   19ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ef8:	add	r4, sl, #2
   19efc:	b	19e74 <__assert_fail@plt+0x7e40>
   19f00:	andeq	sp, r1, ip, lsr #16
   19f04:	andeq	sp, r1, r8, ror r1
   19f08:	push	{r4, r5, r6, r7, r8, lr}
   19f0c:	mov	r7, r0
   19f10:	mov	r8, r1
   19f14:	mov	r6, r2
   19f18:	bl	11ddc <__errno_location@plt>
   19f1c:	ldr	r3, [r0]
   19f20:	cmp	r3, #22
   19f24:	beq	19f90 <__assert_fail@plt+0x7f5c>
   19f28:	ldr	r4, [pc, #200]	; 19ff8 <__assert_fail@plt+0x7fc4>
   19f2c:	mov	r5, r0
   19f30:	ldr	r0, [r4, #8]
   19f34:	cmp	r0, #0
   19f38:	beq	19f68 <__assert_fail@plt+0x7f34>
   19f3c:	mov	r3, #1
   19f40:	str	r3, [r4, #8]
   19f44:	cmp	r6, #0
   19f48:	popeq	{r4, r5, r6, r7, r8, pc}
   19f4c:	ldr	r2, [pc, #168]	; 19ffc <__assert_fail@plt+0x7fc8>
   19f50:	ldr	r1, [pc, #168]	; 1a000 <__assert_fail@plt+0x7fcc>
   19f54:	mov	r3, #0
   19f58:	str	r1, [r2]
   19f5c:	str	r3, [r4, #12]
   19f60:	str	r3, [r4, #16]
   19f64:	pop	{r4, r5, r6, r7, r8, pc}
   19f68:	mov	r2, #5
   19f6c:	ldr	r1, [pc, #144]	; 1a004 <__assert_fail@plt+0x7fd0>
   19f70:	bl	11bb4 <dcgettext@plt>
   19f74:	mov	r7, r0
   19f78:	ldr	r0, [r5]
   19f7c:	bl	11cd4 <strerror@plt>
   19f80:	mov	r1, r0
   19f84:	mov	r0, r7
   19f88:	bl	16b48 <__assert_fail@plt+0x4b14>
   19f8c:	b	19f3c <__assert_fail@plt+0x7f08>
   19f90:	cmp	r7, #0
   19f94:	ldr	r4, [pc, #92]	; 19ff8 <__assert_fail@plt+0x7fc4>
   19f98:	beq	19fb0 <__assert_fail@plt+0x7f7c>
   19f9c:	ldr	r1, [pc, #92]	; 1a000 <__assert_fail@plt+0x7fcc>
   19fa0:	mov	r0, r7
   19fa4:	bl	11aac <strcmp@plt>
   19fa8:	cmp	r0, #0
   19fac:	beq	19fe8 <__assert_fail@plt+0x7fb4>
   19fb0:	mov	r3, #1
   19fb4:	ldr	r0, [r4, #4]
   19fb8:	str	r3, [r4, #4]
   19fbc:	cmp	r0, #0
   19fc0:	bne	19f44 <__assert_fail@plt+0x7f10>
   19fc4:	mov	r2, #5
   19fc8:	ldr	r1, [pc, #56]	; 1a008 <__assert_fail@plt+0x7fd4>
   19fcc:	bl	11bb4 <dcgettext@plt>
   19fd0:	mov	r2, r7
   19fd4:	mov	r1, r8
   19fd8:	bl	16b48 <__assert_fail@plt+0x4b14>
   19fdc:	cmp	r6, #0
   19fe0:	popeq	{r4, r5, r6, r7, r8, pc}
   19fe4:	b	19f4c <__assert_fail@plt+0x7f18>
   19fe8:	mov	r3, #1
   19fec:	ldr	r0, [r4]
   19ff0:	str	r3, [r4]
   19ff4:	b	19fbc <__assert_fail@plt+0x7f88>
   19ff8:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   19ffc:	andeq	pc, r2, r0, asr #1
   1a000:	andeq	sp, r1, r4, asr #16
   1a004:	andeq	sp, r1, r8, ror r8
   1a008:	andeq	sp, r1, ip, asr #16
   1a00c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a010:	sub	sp, sp, #76	; 0x4c
   1a014:	mov	r7, #0
   1a018:	str	r3, [sp, #36]	; 0x24
   1a01c:	ldr	r3, [pc, #1932]	; 1a7b0 <__assert_fail@plt+0x877c>
   1a020:	str	r1, [sp, #28]
   1a024:	add	r1, r0, r1
   1a028:	ldr	r3, [r3]
   1a02c:	str	r0, [sp, #32]
   1a030:	str	r3, [sp, #68]	; 0x44
   1a034:	ldr	r3, [sp, #28]
   1a038:	ldr	sl, [pc, #1908]	; 1a7b4 <__assert_fail@plt+0x8780>
   1a03c:	cmp	r3, #0
   1a040:	str	r2, [sp, #24]
   1a044:	sub	fp, r1, #1
   1a048:	str	r7, [sp, #16]
   1a04c:	str	r7, [sp, #20]
   1a050:	beq	1a15c <__assert_fail@plt+0x8128>
   1a054:	ldr	r3, [sp, #32]
   1a058:	mov	r9, #0
   1a05c:	mov	r5, r9
   1a060:	mov	r8, r9
   1a064:	sub	r6, r3, #1
   1a068:	ldr	r4, [sp, #20]
   1a06c:	b	1a0cc <__assert_fail@plt+0x8098>
   1a070:	tst	r3, #128	; 0x80
   1a074:	bne	1a1f4 <__assert_fail@plt+0x81c0>
   1a078:	ldr	r1, [sp, #24]
   1a07c:	cmn	r1, #1
   1a080:	beq	1a0b4 <__assert_fail@plt+0x8080>
   1a084:	cmp	r3, #127	; 0x7f
   1a088:	cmpne	r3, #31
   1a08c:	bls	1a28c <__assert_fail@plt+0x8258>
   1a090:	cmp	r3, r1
   1a094:	beq	1a28c <__assert_fail@plt+0x8258>
   1a098:	cmp	r1, #0
   1a09c:	sub	r2, r3, #92	; 0x5c
   1a0a0:	clz	r2, r2
   1a0a4:	lsr	r2, r2, #5
   1a0a8:	moveq	r2, #0
   1a0ac:	cmp	r2, #0
   1a0b0:	bne	1a39c <__assert_fail@plt+0x8368>
   1a0b4:	add	r9, r9, #1
   1a0b8:	mov	r7, #0
   1a0bc:	cmp	r4, #0
   1a0c0:	strbne	r3, [r4], #1
   1a0c4:	cmp	fp, r6
   1a0c8:	beq	1a138 <__assert_fail@plt+0x8104>
   1a0cc:	cmp	r7, #0
   1a0d0:	ldrb	r3, [r6, #1]!
   1a0d4:	beq	1a0f8 <__assert_fail@plt+0x80c4>
   1a0d8:	add	r1, r3, #64	; 0x40
   1a0dc:	lsr	r2, r3, #7
   1a0e0:	uxtb	r1, r1
   1a0e4:	cmp	r1, #61	; 0x3d
   1a0e8:	movls	r2, #0
   1a0ec:	andhi	r2, r2, #1
   1a0f0:	cmp	r2, #0
   1a0f4:	bne	1a260 <__assert_fail@plt+0x822c>
   1a0f8:	cmp	r8, #0
   1a0fc:	beq	1a070 <__assert_fail@plt+0x803c>
   1a100:	eor	r2, r3, #128	; 0x80
   1a104:	cmp	r2, #63	; 0x3f
   1a108:	add	r2, r5, #1
   1a10c:	str	r2, [sp, #12]
   1a110:	bls	1a1a4 <__assert_fail@plt+0x8170>
   1a114:	cmp	r4, #0
   1a118:	bne	1a3ec <__assert_fail@plt+0x83b8>
   1a11c:	ldr	r3, [sp, #12]
   1a120:	mov	r5, #0
   1a124:	cmp	fp, r6
   1a128:	add	r9, r9, r3, lsl #2
   1a12c:	mov	r8, r5
   1a130:	mov	r7, #1
   1a134:	bne	1a0cc <__assert_fail@plt+0x8098>
   1a138:	ldr	r3, [sp, #20]
   1a13c:	cmp	r3, #0
   1a140:	bne	1a170 <__assert_fail@plt+0x813c>
   1a144:	add	r0, r9, #1
   1a148:	bl	11a58 <gcry_xmalloc@plt>
   1a14c:	ldr	r3, [sp, #28]
   1a150:	cmp	r3, #0
   1a154:	str	r0, [sp, #20]
   1a158:	bne	1a054 <__assert_fail@plt+0x8020>
   1a15c:	ldr	r3, [sp, #20]
   1a160:	ldr	r4, [sp, #20]
   1a164:	cmp	r3, #0
   1a168:	ldr	r9, [sp, #28]
   1a16c:	beq	1a144 <__assert_fail@plt+0x8110>
   1a170:	ldr	r3, [sp, #36]	; 0x24
   1a174:	cmp	r3, #0
   1a178:	bne	1a608 <__assert_fail@plt+0x85d4>
   1a17c:	ldr	r3, [sp, #36]	; 0x24
   1a180:	strb	r3, [r4]
   1a184:	ldr	r3, [pc, #1572]	; 1a7b0 <__assert_fail@plt+0x877c>
   1a188:	ldr	r2, [sp, #68]	; 0x44
   1a18c:	ldr	r0, [sp, #20]
   1a190:	ldr	r3, [r3]
   1a194:	cmp	r2, r3
   1a198:	bne	1a79c <__assert_fail@plt+0x8768>
   1a19c:	add	sp, sp, #76	; 0x4c
   1a1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1a4:	add	r2, sp, #72	; 0x48
   1a1a8:	add	r2, r2, r5
   1a1ac:	and	r1, r3, #63	; 0x3f
   1a1b0:	strb	r3, [r2, #-12]
   1a1b4:	ldr	r3, [sp, #16]
   1a1b8:	subs	r8, r8, #1
   1a1bc:	orr	r3, r1, r3, lsl #6
   1a1c0:	str	r3, [sp, #16]
   1a1c4:	bne	1a3e0 <__assert_fail@plt+0x83ac>
   1a1c8:	ldr	r3, [pc, #1512]	; 1a7b8 <__assert_fail@plt+0x8784>
   1a1cc:	ldr	r7, [r3, #12]
   1a1d0:	cmp	r7, #0
   1a1d4:	beq	1a464 <__assert_fail@plt+0x8430>
   1a1d8:	cmp	r4, #0
   1a1dc:	bne	1a544 <__assert_fail@plt+0x8510>
   1a1e0:	ldr	r3, [sp, #12]
   1a1e4:	mov	r7, #0
   1a1e8:	add	r9, r9, r3
   1a1ec:	mov	r5, r7
   1a1f0:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a1f4:	and	r2, r3, #224	; 0xe0
   1a1f8:	cmp	r2, #192	; 0xc0
   1a1fc:	beq	1a448 <__assert_fail@plt+0x8414>
   1a200:	and	r2, r3, #240	; 0xf0
   1a204:	cmp	r2, #224	; 0xe0
   1a208:	beq	1a48c <__assert_fail@plt+0x8458>
   1a20c:	and	r2, r3, #248	; 0xf8
   1a210:	cmp	r2, #240	; 0xf0
   1a214:	beq	1a528 <__assert_fail@plt+0x84f4>
   1a218:	and	r2, r3, #252	; 0xfc
   1a21c:	cmp	r2, #248	; 0xf8
   1a220:	beq	1a56c <__assert_fail@plt+0x8538>
   1a224:	and	r2, r3, #254	; 0xfe
   1a228:	cmp	r2, #252	; 0xfc
   1a22c:	beq	1a5d4 <__assert_fail@plt+0x85a0>
   1a230:	cmp	r4, #0
   1a234:	beq	1a254 <__assert_fail@plt+0x8220>
   1a238:	str	r3, [sp]
   1a23c:	mov	r0, r4
   1a240:	mov	r3, sl
   1a244:	mvn	r2, #0
   1a248:	mov	r1, #1
   1a24c:	bl	11df4 <__sprintf_chk@plt>
   1a250:	add	r4, r4, #4
   1a254:	add	r9, r9, #4
   1a258:	mov	r7, #1
   1a25c:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a260:	cmp	r4, #0
   1a264:	beq	1a284 <__assert_fail@plt+0x8250>
   1a268:	str	r3, [sp]
   1a26c:	mov	r0, r4
   1a270:	mov	r3, sl
   1a274:	mvn	r2, #0
   1a278:	mov	r1, #1
   1a27c:	bl	11df4 <__sprintf_chk@plt>
   1a280:	add	r4, r4, #4
   1a284:	add	r9, r9, #4
   1a288:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a28c:	cmp	r4, #0
   1a290:	beq	1a4a8 <__assert_fail@plt+0x8474>
   1a294:	mov	r7, r4
   1a298:	mov	r2, #92	; 0x5c
   1a29c:	strb	r2, [r7], #1
   1a2a0:	cmp	r3, #13
   1a2a4:	ldrls	pc, [pc, r3, lsl #2]
   1a2a8:	b	1a3b0 <__assert_fail@plt+0x837c>
   1a2ac:	andeq	sl, r1, ip, lsr r3
   1a2b0:			; <UNDEFINED> instruction: 0x0001a3b0
   1a2b4:			; <UNDEFINED> instruction: 0x0001a3b0
   1a2b8:			; <UNDEFINED> instruction: 0x0001a3b0
   1a2bc:			; <UNDEFINED> instruction: 0x0001a3b0
   1a2c0:			; <UNDEFINED> instruction: 0x0001a3b0
   1a2c4:			; <UNDEFINED> instruction: 0x0001a3b0
   1a2c8:			; <UNDEFINED> instruction: 0x0001a3b0
   1a2cc:	andeq	sl, r1, r4, lsl #6
   1a2d0:			; <UNDEFINED> instruction: 0x0001a3b0
   1a2d4:	andeq	sl, r1, ip, lsl r3
   1a2d8:	andeq	sl, r1, r8, ror #5
   1a2dc:	andeq	sl, r1, ip, ror r3
   1a2e0:	andeq	sl, r1, ip, asr r3
   1a2e4:	mov	r7, #0
   1a2e8:	subs	r4, r7, #0
   1a2ec:	add	r9, r9, #2
   1a2f0:	movne	r3, #118	; 0x76
   1a2f4:	strbne	r3, [r4], #1
   1a2f8:	movne	r7, #0
   1a2fc:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a300:	mov	r7, #0
   1a304:	subs	r4, r7, #0
   1a308:	add	r9, r9, #2
   1a30c:	movne	r3, #98	; 0x62
   1a310:	strbne	r3, [r4], #1
   1a314:	movne	r7, #0
   1a318:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a31c:	cmp	r7, #0
   1a320:	add	r9, r9, #2
   1a324:	beq	1a70c <__assert_fail@plt+0x86d8>
   1a328:	mov	r3, #110	; 0x6e
   1a32c:	strb	r3, [r4, #1]
   1a330:	mov	r7, #0
   1a334:	add	r4, r4, #2
   1a338:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a33c:	cmp	r7, #0
   1a340:	add	r9, r9, #2
   1a344:	beq	1a70c <__assert_fail@plt+0x86d8>
   1a348:	mov	r3, #48	; 0x30
   1a34c:	strb	r3, [r4, #1]
   1a350:	mov	r7, #0
   1a354:	add	r4, r4, #2
   1a358:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a35c:	cmp	r7, #0
   1a360:	add	r9, r9, #2
   1a364:	beq	1a70c <__assert_fail@plt+0x86d8>
   1a368:	mov	r3, #114	; 0x72
   1a36c:	strb	r3, [r4, #1]
   1a370:	mov	r7, #0
   1a374:	add	r4, r4, #2
   1a378:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a37c:	cmp	r7, #0
   1a380:	add	r9, r9, #2
   1a384:	beq	1a70c <__assert_fail@plt+0x86d8>
   1a388:	mov	r3, #102	; 0x66
   1a38c:	strb	r3, [r4, #1]
   1a390:	mov	r7, #0
   1a394:	add	r4, r4, #2
   1a398:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a39c:	cmp	r4, #0
   1a3a0:	movne	r7, r4
   1a3a4:	movne	r3, #92	; 0x5c
   1a3a8:	strbne	r3, [r7], #1
   1a3ac:	beq	1a5f8 <__assert_fail@plt+0x85c4>
   1a3b0:	cmp	r7, #0
   1a3b4:	add	r9, r9, #4
   1a3b8:	beq	1a600 <__assert_fail@plt+0x85cc>
   1a3bc:	str	r3, [sp]
   1a3c0:	mov	r0, r7
   1a3c4:	ldr	r3, [pc, #1008]	; 1a7bc <__assert_fail@plt+0x8788>
   1a3c8:	mvn	r2, #0
   1a3cc:	mov	r1, #1
   1a3d0:	add	r4, r7, #3
   1a3d4:	bl	11df4 <__sprintf_chk@plt>
   1a3d8:	mov	r7, #0
   1a3dc:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a3e0:	ldr	r5, [sp, #12]
   1a3e4:	mov	r7, #0
   1a3e8:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a3ec:	cmp	r5, #0
   1a3f0:	beq	1a5f0 <__assert_fail@plt+0x85bc>
   1a3f4:	add	r5, r4, r5, lsl #2
   1a3f8:	add	r7, sp, #60	; 0x3c
   1a3fc:	ldrb	r1, [r7], #1
   1a400:	mov	r0, r4
   1a404:	mov	r3, sl
   1a408:	str	r1, [sp]
   1a40c:	mvn	r2, #0
   1a410:	mov	r1, #1
   1a414:	add	r4, r4, #4
   1a418:	bl	11df4 <__sprintf_chk@plt>
   1a41c:	cmp	r5, r4
   1a420:	bne	1a3fc <__assert_fail@plt+0x83c8>
   1a424:	ldrb	r3, [r6]
   1a428:	str	r3, [sp]
   1a42c:	mvn	r2, #0
   1a430:	mov	r3, sl
   1a434:	mov	r1, #1
   1a438:	mov	r0, r5
   1a43c:	bl	11df4 <__sprintf_chk@plt>
   1a440:	add	r4, r5, #4
   1a444:	b	1a11c <__assert_fail@plt+0x80e8>
   1a448:	mov	r5, #1
   1a44c:	strb	r3, [sp, #60]	; 0x3c
   1a450:	and	r3, r3, #31
   1a454:	mov	r7, r8
   1a458:	str	r3, [sp, #16]
   1a45c:	mov	r8, r5
   1a460:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a464:	ldr	r3, [sp, #36]	; 0x24
   1a468:	cmp	r3, #0
   1a46c:	beq	1a4f8 <__assert_fail@plt+0x84c4>
   1a470:	cmp	r4, #0
   1a474:	bne	1a5ac <__assert_fail@plt+0x8578>
   1a478:	ldr	r3, [sp, #12]
   1a47c:	mov	r5, #0
   1a480:	add	r9, r9, r3
   1a484:	mov	r8, r5
   1a488:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a48c:	strb	r3, [sp, #60]	; 0x3c
   1a490:	and	r3, r3, #15
   1a494:	mov	r7, r8
   1a498:	str	r3, [sp, #16]
   1a49c:	mov	r5, #1
   1a4a0:	mov	r8, #2
   1a4a4:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a4a8:	cmp	r3, #13
   1a4ac:	ldrls	pc, [pc, r3, lsl #2]
   1a4b0:	b	1a5f8 <__assert_fail@plt+0x85c4>
   1a4b4:	andeq	sl, r1, ip, ror #9
   1a4b8:	strdeq	sl, [r1], -r8
   1a4bc:	strdeq	sl, [r1], -r8
   1a4c0:	strdeq	sl, [r1], -r8
   1a4c4:	strdeq	sl, [r1], -r8
   1a4c8:	strdeq	sl, [r1], -r8
   1a4cc:	strdeq	sl, [r1], -r8
   1a4d0:	strdeq	sl, [r1], -r8
   1a4d4:	andeq	sl, r1, r0, lsl #6
   1a4d8:	strdeq	sl, [r1], -r8
   1a4dc:	andeq	sl, r1, ip, ror #9
   1a4e0:	andeq	sl, r1, r4, ror #5
   1a4e4:	andeq	sl, r1, ip, ror #9
   1a4e8:	andeq	sl, r1, ip, ror #9
   1a4ec:	add	r9, r9, #2
   1a4f0:	mov	r7, #0
   1a4f4:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a4f8:	ldr	r2, [sp, #16]
   1a4fc:	sub	r3, r2, #128	; 0x80
   1a500:	cmp	r3, #127	; 0x7f
   1a504:	bhi	1a588 <__assert_fail@plt+0x8554>
   1a508:	cmp	r4, #0
   1a50c:	ldr	r5, [sp, #12]
   1a510:	add	r9, r9, #1
   1a514:	beq	1a700 <__assert_fail@plt+0x86cc>
   1a518:	ldr	r8, [sp, #36]	; 0x24
   1a51c:	strb	r2, [r4], #1
   1a520:	mov	r7, r8
   1a524:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a528:	strb	r3, [sp, #60]	; 0x3c
   1a52c:	and	r3, r3, #7
   1a530:	mov	r7, r8
   1a534:	str	r3, [sp, #16]
   1a538:	mov	r5, #1
   1a53c:	mov	r8, #3
   1a540:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a544:	add	r5, r4, r5
   1a548:	add	r2, sp, #60	; 0x3c
   1a54c:	sub	r3, r4, #1
   1a550:	ldrb	r1, [r2], #1
   1a554:	strb	r1, [r3, #1]!
   1a558:	cmp	r3, r5
   1a55c:	bne	1a550 <__assert_fail@plt+0x851c>
   1a560:	ldr	r3, [sp, #12]
   1a564:	add	r4, r4, r3
   1a568:	b	1a1e0 <__assert_fail@plt+0x81ac>
   1a56c:	strb	r3, [sp, #60]	; 0x3c
   1a570:	and	r3, r3, #3
   1a574:	mov	r7, r8
   1a578:	str	r3, [sp, #16]
   1a57c:	mov	r5, #1
   1a580:	mov	r8, #4
   1a584:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a588:	ldr	r3, [sp, #12]
   1a58c:	cmp	r4, #0
   1a590:	lsl	r8, r3, #2
   1a594:	bne	1a6cc <__assert_fail@plt+0x8698>
   1a598:	mov	r7, #0
   1a59c:	add	r9, r9, r8
   1a5a0:	mov	r5, r7
   1a5a4:	mov	r8, r7
   1a5a8:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a5ac:	add	r5, r4, r5
   1a5b0:	add	r2, sp, #60	; 0x3c
   1a5b4:	sub	r3, r4, #1
   1a5b8:	ldrb	r1, [r2], #1
   1a5bc:	strb	r1, [r3, #1]!
   1a5c0:	cmp	r5, r3
   1a5c4:	bne	1a5b8 <__assert_fail@plt+0x8584>
   1a5c8:	ldr	r3, [sp, #12]
   1a5cc:	add	r4, r4, r3
   1a5d0:	b	1a478 <__assert_fail@plt+0x8444>
   1a5d4:	strb	r3, [sp, #60]	; 0x3c
   1a5d8:	and	r3, r3, #1
   1a5dc:	mov	r7, r8
   1a5e0:	str	r3, [sp, #16]
   1a5e4:	mov	r5, #1
   1a5e8:	mov	r8, #5
   1a5ec:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a5f0:	mov	r5, r4
   1a5f4:	b	1a428 <__assert_fail@plt+0x83f4>
   1a5f8:	mov	r7, #0
   1a5fc:	add	r9, r9, #4
   1a600:	mov	r4, r7
   1a604:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a608:	ldr	r7, [pc, #432]	; 1a7c0 <__assert_fail@plt+0x878c>
   1a60c:	mov	r6, #0
   1a610:	strb	r6, [r4]
   1a614:	ldr	r0, [r7]
   1a618:	ldr	r1, [pc, #420]	; 1a7c4 <__assert_fail@plt+0x8790>
   1a61c:	bl	11cbc <iconv_open@plt>
   1a620:	cmn	r0, #1
   1a624:	mov	r5, r0
   1a628:	beq	1a764 <__assert_fail@plt+0x8730>
   1a62c:	ldr	r3, [sp, #20]
   1a630:	sub	r4, r4, r3
   1a634:	add	r0, r4, #1
   1a638:	tst	r0, #-268435456	; 0xf0000000
   1a63c:	lsl	r0, r0, #4
   1a640:	str	r4, [sp, #52]	; 0x34
   1a644:	str	r0, [sp, #56]	; 0x38
   1a648:	str	r3, [sp, #44]	; 0x2c
   1a64c:	bne	1a7a0 <__assert_fail@plt+0x876c>
   1a650:	bl	11a58 <gcry_xmalloc@plt>
   1a654:	add	r3, sp, #56	; 0x38
   1a658:	str	r3, [sp]
   1a65c:	add	r2, sp, #52	; 0x34
   1a660:	add	r3, sp, #48	; 0x30
   1a664:	add	r1, sp, #44	; 0x2c
   1a668:	mov	r4, r0
   1a66c:	mov	r0, r5
   1a670:	str	r4, [sp, #48]	; 0x30
   1a674:	bl	11aa0 <iconv@plt>
   1a678:	cmn	r0, #1
   1a67c:	bne	1a714 <__assert_fail@plt+0x86e0>
   1a680:	ldr	r6, [pc, #304]	; 1a7b8 <__assert_fail@plt+0x8784>
   1a684:	ldr	r0, [r6, #20]
   1a688:	cmp	r0, #0
   1a68c:	beq	1a72c <__assert_fail@plt+0x86f8>
   1a690:	mov	r3, #1
   1a694:	ldr	r0, [sp, #20]
   1a698:	str	r3, [r6, #20]
   1a69c:	bl	11b84 <gcry_free@plt>
   1a6a0:	mov	r0, r4
   1a6a4:	bl	11b84 <gcry_free@plt>
   1a6a8:	ldr	r2, [sp, #24]
   1a6ac:	ldr	r1, [sp, #28]
   1a6b0:	ldr	r0, [sp, #32]
   1a6b4:	mov	r3, #0
   1a6b8:	bl	1a00c <__assert_fail@plt+0x7fd8>
   1a6bc:	str	r0, [sp, #20]
   1a6c0:	mov	r0, r5
   1a6c4:	bl	11a94 <iconv_close@plt>
   1a6c8:	b	1a184 <__assert_fail@plt+0x8150>
   1a6cc:	add	r7, r4, r8
   1a6d0:	add	r5, sp, #60	; 0x3c
   1a6d4:	ldrb	r1, [r5], #1
   1a6d8:	mov	r0, r4
   1a6dc:	mov	r3, sl
   1a6e0:	str	r1, [sp]
   1a6e4:	mvn	r2, #0
   1a6e8:	mov	r1, #1
   1a6ec:	add	r4, r4, #4
   1a6f0:	bl	11df4 <__sprintf_chk@plt>
   1a6f4:	cmp	r4, r7
   1a6f8:	bne	1a6d4 <__assert_fail@plt+0x86a0>
   1a6fc:	b	1a598 <__assert_fail@plt+0x8564>
   1a700:	mov	r7, r4
   1a704:	mov	r8, r4
   1a708:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a70c:	mov	r4, r7
   1a710:	b	1a0c4 <__assert_fail@plt+0x8090>
   1a714:	ldr	r3, [sp, #48]	; 0x30
   1a718:	ldr	r0, [sp, #20]
   1a71c:	str	r4, [sp, #20]
   1a720:	strb	r6, [r3]
   1a724:	bl	11b84 <gcry_free@plt>
   1a728:	b	1a6c0 <__assert_fail@plt+0x868c>
   1a72c:	mov	r2, #5
   1a730:	ldr	r1, [pc, #144]	; 1a7c8 <__assert_fail@plt+0x8794>
   1a734:	bl	11bb4 <dcgettext@plt>
   1a738:	mov	r8, r0
   1a73c:	bl	11ddc <__errno_location@plt>
   1a740:	ldr	r7, [r7]
   1a744:	ldr	r0, [r0]
   1a748:	bl	11cd4 <strerror@plt>
   1a74c:	mov	r2, r7
   1a750:	ldr	r1, [pc, #108]	; 1a7c4 <__assert_fail@plt+0x8790>
   1a754:	mov	r3, r0
   1a758:	mov	r0, r8
   1a75c:	bl	16b48 <__assert_fail@plt+0x4b14>
   1a760:	b	1a690 <__assert_fail@plt+0x865c>
   1a764:	mov	r2, #1
   1a768:	ldr	r1, [pc, #84]	; 1a7c4 <__assert_fail@plt+0x8790>
   1a76c:	ldr	r0, [r7]
   1a770:	bl	19f08 <__assert_fail@plt+0x7ed4>
   1a774:	ldr	r0, [sp, #20]
   1a778:	bl	11b84 <gcry_free@plt>
   1a77c:	ldr	r3, [pc, #52]	; 1a7b8 <__assert_fail@plt+0x8784>
   1a780:	ldr	r2, [sp, #24]
   1a784:	ldr	r1, [sp, #28]
   1a788:	ldr	r0, [sp, #32]
   1a78c:	ldr	r3, [r3, #16]
   1a790:	bl	1a00c <__assert_fail@plt+0x7fd8>
   1a794:	str	r0, [sp, #20]
   1a798:	b	1a184 <__assert_fail@plt+0x8150>
   1a79c:	bl	11bc0 <__stack_chk_fail@plt>
   1a7a0:	ldr	r2, [pc, #36]	; 1a7cc <__assert_fail@plt+0x8798>
   1a7a4:	ldr	r1, [pc, #36]	; 1a7d0 <__assert_fail@plt+0x879c>
   1a7a8:	ldr	r0, [pc, #36]	; 1a7d4 <__assert_fail@plt+0x87a0>
   1a7ac:	bl	16f0c <__assert_fail@plt+0x4ed8>
   1a7b0:	ldrdeq	lr, [r2], -r0
   1a7b4:	muleq	r1, r0, r8
   1a7b8:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   1a7bc:	muleq	r1, r8, r8
   1a7c0:	andeq	pc, r2, r0, asr #1
   1a7c4:	andeq	sp, r1, r4, asr #16
   1a7c8:			; <UNDEFINED> instruction: 0x0001d8b8
   1a7cc:	andeq	sp, r1, r0, lsr r8
   1a7d0:	andeq	r0, r0, r3, lsl #5
   1a7d4:	andeq	sp, r1, r0, lsr #17
   1a7d8:	push	{r4, r5, r6, lr}
   1a7dc:	subs	r5, r0, #0
   1a7e0:	beq	1a8e4 <__assert_fail@plt+0x88b0>
   1a7e4:	mov	r0, r5
   1a7e8:	bl	11d88 <strlen@plt>
   1a7ec:	cmp	r0, #3
   1a7f0:	bhi	1a824 <__assert_fail@plt+0x87f0>
   1a7f4:	ldrb	r3, [r5]
   1a7f8:	mov	r4, r5
   1a7fc:	cmp	r3, #0
   1a800:	bne	1a85c <__assert_fail@plt+0x8828>
   1a804:	ldr	r3, [pc, #392]	; 1a994 <__assert_fail@plt+0x8960>
   1a808:	ldr	r2, [pc, #392]	; 1a998 <__assert_fail@plt+0x8964>
   1a80c:	ldr	r1, [pc, #392]	; 1a99c <__assert_fail@plt+0x8968>
   1a810:	mov	r0, #0
   1a814:	str	r1, [r2]
   1a818:	str	r0, [r3, #12]
   1a81c:	str	r0, [r3, #16]
   1a820:	pop	{r4, r5, r6, pc}
   1a824:	mov	r2, #3
   1a828:	ldr	r1, [pc, #368]	; 1a9a0 <__assert_fail@plt+0x896c>
   1a82c:	mov	r0, r5
   1a830:	bl	195b8 <__assert_fail@plt+0x7584>
   1a834:	cmp	r0, #0
   1a838:	bne	1a7f4 <__assert_fail@plt+0x87c0>
   1a83c:	ldrb	r3, [r5, #3]
   1a840:	cmp	r3, #95	; 0x5f
   1a844:	cmpne	r3, #45	; 0x2d
   1a848:	addne	r4, r5, #3
   1a84c:	ldrbeq	r3, [r5, #4]
   1a850:	addeq	r4, r5, #4
   1a854:	cmp	r3, #0
   1a858:	beq	1a804 <__assert_fail@plt+0x87d0>
   1a85c:	ldr	r1, [pc, #320]	; 1a9a4 <__assert_fail@plt+0x8970>
   1a860:	mov	r0, r4
   1a864:	bl	19478 <__assert_fail@plt+0x7444>
   1a868:	cmp	r0, #0
   1a86c:	beq	1a804 <__assert_fail@plt+0x87d0>
   1a870:	ldr	r1, [pc, #304]	; 1a9a8 <__assert_fail@plt+0x8974>
   1a874:	mov	r0, r4
   1a878:	bl	19478 <__assert_fail@plt+0x7444>
   1a87c:	cmp	r0, #0
   1a880:	beq	1a804 <__assert_fail@plt+0x87d0>
   1a884:	ldr	r1, [pc, #288]	; 1a9ac <__assert_fail@plt+0x8978>
   1a888:	mov	r0, r4
   1a88c:	bl	19478 <__assert_fail@plt+0x7444>
   1a890:	cmp	r0, #0
   1a894:	beq	1a804 <__assert_fail@plt+0x87d0>
   1a898:	ldr	r1, [pc, #272]	; 1a9b0 <__assert_fail@plt+0x897c>
   1a89c:	mov	r0, r4
   1a8a0:	bl	19478 <__assert_fail@plt+0x7444>
   1a8a4:	cmp	r0, #0
   1a8a8:	beq	1a804 <__assert_fail@plt+0x87d0>
   1a8ac:	ldr	r1, [pc, #256]	; 1a9b4 <__assert_fail@plt+0x8980>
   1a8b0:	mov	r0, r4
   1a8b4:	bl	19478 <__assert_fail@plt+0x7444>
   1a8b8:	ldr	r6, [pc, #248]	; 1a9b8 <__assert_fail@plt+0x8984>
   1a8bc:	cmp	r0, #0
   1a8c0:	bne	1a8f4 <__assert_fail@plt+0x88c0>
   1a8c4:	ldr	r3, [pc, #200]	; 1a994 <__assert_fail@plt+0x8960>
   1a8c8:	ldr	r1, [pc, #200]	; 1a998 <__assert_fail@plt+0x8964>
   1a8cc:	mov	r2, #1
   1a8d0:	mov	r0, #0
   1a8d4:	str	r6, [r1]
   1a8d8:	str	r2, [r3, #12]
   1a8dc:	str	r0, [r3, #16]
   1a8e0:	pop	{r4, r5, r6, pc}
   1a8e4:	mov	r0, #14
   1a8e8:	bl	11efc <nl_langinfo@plt>
   1a8ec:	mov	r5, r0
   1a8f0:	b	1a7e4 <__assert_fail@plt+0x87b0>
   1a8f4:	mov	r0, r4
   1a8f8:	mov	r1, r6
   1a8fc:	bl	19478 <__assert_fail@plt+0x7444>
   1a900:	cmp	r0, #0
   1a904:	beq	1a8c4 <__assert_fail@plt+0x8890>
   1a908:	mov	r1, r6
   1a90c:	mov	r0, r5
   1a910:	bl	11cbc <iconv_open@plt>
   1a914:	cmn	r0, #1
   1a918:	mov	r4, r0
   1a91c:	beq	1a964 <__assert_fail@plt+0x8930>
   1a920:	bl	11a94 <iconv_close@plt>
   1a924:	mov	r1, r5
   1a928:	mov	r0, r6
   1a92c:	bl	11cbc <iconv_open@plt>
   1a930:	cmn	r0, #1
   1a934:	mov	r4, r0
   1a938:	beq	1a97c <__assert_fail@plt+0x8948>
   1a93c:	bl	11a94 <iconv_close@plt>
   1a940:	ldr	r3, [pc, #76]	; 1a994 <__assert_fail@plt+0x8960>
   1a944:	ldr	ip, [pc, #76]	; 1a998 <__assert_fail@plt+0x8964>
   1a948:	mov	r2, #0
   1a94c:	mov	r1, #1
   1a950:	mov	r0, r2
   1a954:	str	r5, [ip]
   1a958:	str	r1, [r3, #16]
   1a95c:	str	r2, [r3, #12]
   1a960:	pop	{r4, r5, r6, pc}
   1a964:	mov	r0, r5
   1a968:	mov	r1, r6
   1a96c:	mov	r2, #0
   1a970:	bl	19f08 <__assert_fail@plt+0x7ed4>
   1a974:	mov	r0, r4
   1a978:	pop	{r4, r5, r6, pc}
   1a97c:	mov	r0, r6
   1a980:	mov	r1, r5
   1a984:	mov	r2, #0
   1a988:	bl	19f08 <__assert_fail@plt+0x7ed4>
   1a98c:	mov	r0, r4
   1a990:	pop	{r4, r5, r6, pc}
   1a994:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   1a998:	andeq	pc, r2, r0, asr #1
   1a99c:	andeq	sp, r1, r8, ror #17
   1a9a0:	andeq	sp, r1, r4, ror #17
   1a9a4:	andeq	sp, r1, ip, ror #17
   1a9a8:	strdeq	sp, [r1], -r4
   1a9ac:	strdeq	sp, [r1], -r8
   1a9b0:	andeq	sp, r1, r0, lsl #18
   1a9b4:	andeq	sp, r1, r0, lsl r9
   1a9b8:	andeq	sp, r1, r4, asr #16
   1a9bc:	ldr	r3, [pc, #4]	; 1a9c8 <__assert_fail@plt+0x8994>
   1a9c0:	ldr	r0, [r3]
   1a9c4:	bx	lr
   1a9c8:	andeq	pc, r2, r0, asr #1
   1a9cc:	ldr	r3, [pc, #4]	; 1a9d8 <__assert_fail@plt+0x89a4>
   1a9d0:	ldr	r0, [r3, #12]
   1a9d4:	bx	lr
   1a9d8:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   1a9dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a9e0:	sub	sp, sp, #32
   1a9e4:	ldr	r8, [pc, #520]	; 1abf4 <__assert_fail@plt+0x8bc0>
   1a9e8:	ldr	r5, [pc, #520]	; 1abf8 <__assert_fail@plt+0x8bc4>
   1a9ec:	ldr	r7, [r8, #12]
   1a9f0:	ldr	r3, [r5]
   1a9f4:	cmp	r7, #0
   1a9f8:	str	r3, [sp, #28]
   1a9fc:	bne	1ab60 <__assert_fail@plt+0x8b2c>
   1aa00:	mov	r4, r0
   1aa04:	ldr	r0, [r8, #16]
   1aa08:	cmp	r0, #0
   1aa0c:	bne	1aab4 <__assert_fail@plt+0x8a80>
   1aa10:	ldrb	r3, [r4]
   1aa14:	cmp	r3, #0
   1aa18:	beq	1abe8 <__assert_fail@plt+0x8bb4>
   1aa1c:	mov	r2, r4
   1aa20:	tst	r3, #128	; 0x80
   1aa24:	ldrb	r3, [r2, #1]!
   1aa28:	addeq	r0, r0, #1
   1aa2c:	addne	r0, r0, #2
   1aa30:	cmp	r3, #0
   1aa34:	bne	1aa20 <__assert_fail@plt+0x89ec>
   1aa38:	add	r0, r0, #1
   1aa3c:	bl	11a58 <gcry_xmalloc@plt>
   1aa40:	ldrb	r3, [r4]
   1aa44:	cmp	r3, #0
   1aa48:	mov	r6, r0
   1aa4c:	mov	r2, r0
   1aa50:	beq	1aa90 <__assert_fail@plt+0x8a5c>
   1aa54:	mvn	lr, #63	; 0x3f
   1aa58:	mvn	ip, #127	; 0x7f
   1aa5c:	sxtb	r1, r3
   1aa60:	cmp	r1, #0
   1aa64:	movlt	r0, r2
   1aa68:	orrlt	r3, lr, r3, lsr #6
   1aa6c:	strblt	r3, [r0], #2
   1aa70:	strbge	r3, [r2], #1
   1aa74:	ldrb	r3, [r4, #1]!
   1aa78:	andlt	r1, r1, #63	; 0x3f
   1aa7c:	orrlt	r1, ip, r1
   1aa80:	strblt	r1, [r2, #1]
   1aa84:	movlt	r2, r0
   1aa88:	cmp	r3, #0
   1aa8c:	bne	1aa5c <__assert_fail@plt+0x8a28>
   1aa90:	mov	r3, #0
   1aa94:	strb	r3, [r2]
   1aa98:	ldr	r2, [sp, #28]
   1aa9c:	ldr	r3, [r5]
   1aaa0:	mov	r0, r6
   1aaa4:	cmp	r2, r3
   1aaa8:	bne	1abf0 <__assert_fail@plt+0x8bbc>
   1aaac:	add	sp, sp, #32
   1aab0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aab4:	ldr	sl, [pc, #320]	; 1abfc <__assert_fail@plt+0x8bc8>
   1aab8:	ldr	r0, [pc, #320]	; 1ac00 <__assert_fail@plt+0x8bcc>
   1aabc:	ldr	r1, [sl]
   1aac0:	bl	11cbc <iconv_open@plt>
   1aac4:	cmn	r0, #1
   1aac8:	mov	r9, r0
   1aacc:	beq	1abc8 <__assert_fail@plt+0x8b94>
   1aad0:	ldrb	r3, [r4]
   1aad4:	cmp	r3, #0
   1aad8:	moveq	r7, r3
   1aadc:	moveq	r0, #1
   1aae0:	beq	1ab04 <__assert_fail@plt+0x8ad0>
   1aae4:	mov	r2, r4
   1aae8:	tst	r3, #128	; 0x80
   1aaec:	ldrb	r3, [r2, #1]!
   1aaf0:	addeq	r7, r7, #1
   1aaf4:	addne	r7, r7, #6
   1aaf8:	cmp	r3, #0
   1aafc:	bne	1aae8 <__assert_fail@plt+0x8ab4>
   1ab00:	add	r0, r7, #1
   1ab04:	bl	11a58 <gcry_xmalloc@plt>
   1ab08:	str	r4, [sp, #12]
   1ab0c:	mov	r6, r0
   1ab10:	mov	r0, r4
   1ab14:	bl	11d88 <strlen@plt>
   1ab18:	add	r3, sp, #24
   1ab1c:	str	r3, [sp]
   1ab20:	add	r2, sp, #20
   1ab24:	add	r3, sp, #16
   1ab28:	add	r1, sp, #12
   1ab2c:	str	r6, [sp, #16]
   1ab30:	str	r7, [sp, #24]
   1ab34:	str	r0, [sp, #20]
   1ab38:	mov	r0, r9
   1ab3c:	bl	11aa0 <iconv@plt>
   1ab40:	cmn	r0, #1
   1ab44:	beq	1ab6c <__assert_fail@plt+0x8b38>
   1ab48:	ldr	r3, [sp, #16]
   1ab4c:	mov	r2, #0
   1ab50:	strb	r2, [r3]
   1ab54:	mov	r0, r9
   1ab58:	bl	11a94 <iconv_close@plt>
   1ab5c:	b	1aa98 <__assert_fail@plt+0x8a64>
   1ab60:	bl	11e6c <gcry_xstrdup@plt>
   1ab64:	mov	r6, r0
   1ab68:	b	1aa98 <__assert_fail@plt+0x8a64>
   1ab6c:	ldr	r0, [r8, #24]
   1ab70:	cmp	r0, #0
   1ab74:	beq	1ab90 <__assert_fail@plt+0x8b5c>
   1ab78:	mov	r3, #1
   1ab7c:	mov	r1, r4
   1ab80:	mov	r0, r6
   1ab84:	str	r3, [r8, #24]
   1ab88:	bl	11c5c <strcpy@plt>
   1ab8c:	b	1ab54 <__assert_fail@plt+0x8b20>
   1ab90:	mov	r2, #5
   1ab94:	ldr	r1, [pc, #104]	; 1ac04 <__assert_fail@plt+0x8bd0>
   1ab98:	bl	11bb4 <dcgettext@plt>
   1ab9c:	mov	r7, r0
   1aba0:	bl	11ddc <__errno_location@plt>
   1aba4:	ldr	sl, [sl]
   1aba8:	ldr	r0, [r0]
   1abac:	bl	11cd4 <strerror@plt>
   1abb0:	mov	r1, sl
   1abb4:	ldr	r2, [pc, #68]	; 1ac00 <__assert_fail@plt+0x8bcc>
   1abb8:	mov	r3, r0
   1abbc:	mov	r0, r7
   1abc0:	bl	16b48 <__assert_fail@plt+0x4b14>
   1abc4:	b	1ab78 <__assert_fail@plt+0x8b44>
   1abc8:	ldr	r1, [sl]
   1abcc:	mov	r2, #1
   1abd0:	ldr	r0, [pc, #40]	; 1ac00 <__assert_fail@plt+0x8bcc>
   1abd4:	bl	19f08 <__assert_fail@plt+0x7ed4>
   1abd8:	mov	r0, r4
   1abdc:	bl	1a9dc <__assert_fail@plt+0x89a8>
   1abe0:	mov	r6, r0
   1abe4:	b	1aa98 <__assert_fail@plt+0x8a64>
   1abe8:	mov	r0, #1
   1abec:	b	1aa3c <__assert_fail@plt+0x8a08>
   1abf0:	bl	11bc0 <__stack_chk_fail@plt>
   1abf4:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   1abf8:	ldrdeq	lr, [r2], -r0
   1abfc:	andeq	pc, r2, r0, asr #1
   1ac00:	andeq	sp, r1, r4, asr #16
   1ac04:			; <UNDEFINED> instruction: 0x0001d8b8
   1ac08:	ldr	r3, [pc, #4]	; 1ac14 <__assert_fail@plt+0x8be0>
   1ac0c:	ldr	r3, [r3, #16]
   1ac10:	b	1a00c <__assert_fail@plt+0x7fd8>
   1ac14:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   1ac18:	b	11cbc <iconv_open@plt>
   1ac1c:	b	11aa0 <iconv@plt>
   1ac20:	b	11a94 <iconv_close@plt>
   1ac24:	push	{r4, r5, r6, lr}
   1ac28:	ldr	r5, [pc, #44]	; 1ac5c <__assert_fail@plt+0x8c28>
   1ac2c:	ldr	r3, [r5]
   1ac30:	cmp	r3, #0
   1ac34:	popeq	{r4, r5, r6, pc}
   1ac38:	ldr	r4, [r3]
   1ac3c:	ldr	r3, [r3, #4]
   1ac40:	blx	r3
   1ac44:	ldr	r0, [r5]
   1ac48:	bl	11b30 <free@plt>
   1ac4c:	subs	r3, r4, #0
   1ac50:	str	r4, [r5]
   1ac54:	bne	1ac38 <__assert_fail@plt+0x8c04>
   1ac58:	pop	{r4, r5, r6, pc}
   1ac5c:	andeq	pc, r2, r4, lsr r2	; <UNPREDICTABLE>
   1ac60:	sub	r2, r0, #1
   1ac64:	cmp	r2, #1
   1ac68:	bhi	1acac <__assert_fail@plt+0x8c78>
   1ac6c:	cmp	r1, #0
   1ac70:	push	{r4, lr}
   1ac74:	mov	r4, r1
   1ac78:	beq	1ac98 <__assert_fail@plt+0x8c64>
   1ac7c:	cmp	r0, #1
   1ac80:	movne	r0, #2
   1ac84:	bl	11d28 <_gpgrt_get_std_stream@plt>
   1ac88:	mov	r1, r0
   1ac8c:	mov	r0, r4
   1ac90:	pop	{r4, lr}
   1ac94:	b	11e9c <gpgrt_fputs@plt>
   1ac98:	cmp	r0, #1
   1ac9c:	movne	r0, #2
   1aca0:	bl	11d28 <_gpgrt_get_std_stream@plt>
   1aca4:	pop	{r4, lr}
   1aca8:	b	11be4 <gpgrt_fflush@plt>
   1acac:	mvn	r0, #0
   1acb0:	bx	lr
   1acb4:	push	{r4, r5, r6, lr}
   1acb8:	ldr	r6, [pc, #84]	; 1ad14 <__assert_fail@plt+0x8ce0>
   1acbc:	ldr	r5, [r6]
   1acc0:	cmp	r5, #0
   1acc4:	beq	1acf4 <__assert_fail@plt+0x8cc0>
   1acc8:	ldr	r3, [r5, #4]
   1accc:	cmp	r0, r3
   1acd0:	popeq	{r4, r5, r6, pc}
   1acd4:	mov	r3, r5
   1acd8:	b	1ace8 <__assert_fail@plt+0x8cb4>
   1acdc:	ldr	r2, [r3, #4]
   1ace0:	cmp	r2, r0
   1ace4:	popeq	{r4, r5, r6, pc}
   1ace8:	ldr	r3, [r3]
   1acec:	cmp	r3, #0
   1acf0:	bne	1acdc <__assert_fail@plt+0x8ca8>
   1acf4:	mov	r4, r0
   1acf8:	mov	r0, #8
   1acfc:	bl	11cb0 <malloc@plt>
   1ad00:	cmp	r0, #0
   1ad04:	strne	r0, [r6]
   1ad08:	strne	r4, [r0, #4]
   1ad0c:	strne	r5, [r0]
   1ad10:	pop	{r4, r5, r6, pc}
   1ad14:	andeq	pc, r2, r4, lsr r2	; <UNPREDICTABLE>
   1ad18:	bx	lr
   1ad1c:	ldr	r3, [pc, #136]	; 1adac <__assert_fail@plt+0x8d78>
   1ad20:	push	{r4, r5, r6, lr}
   1ad24:	str	r0, [r3, #4]
   1ad28:	ldr	r0, [pc, #128]	; 1adb0 <__assert_fail@plt+0x8d7c>
   1ad2c:	bl	1c538 <__assert_fail@plt+0xa504>
   1ad30:	mov	r0, #0
   1ad34:	bl	1a7d8 <__assert_fail@plt+0x87a4>
   1ad38:	ldr	r0, [pc, #116]	; 1adb4 <__assert_fail@plt+0x8d80>
   1ad3c:	bl	11c50 <gcry_check_version@plt>
   1ad40:	subs	r4, r0, #0
   1ad44:	beq	1ad80 <__assert_fail@plt+0x8d4c>
   1ad48:	bl	11f50 <gpg_err_init@plt>
   1ad4c:	ldr	r0, [pc, #100]	; 1adb8 <__assert_fail@plt+0x8d84>
   1ad50:	bl	11bcc <gpgrt_set_alloc_func@plt>
   1ad54:	mov	r0, #0
   1ad58:	bl	11d28 <_gpgrt_get_std_stream@plt>
   1ad5c:	mov	r0, #1
   1ad60:	bl	11d28 <_gpgrt_get_std_stream@plt>
   1ad64:	mov	r0, #2
   1ad68:	bl	11d28 <_gpgrt_get_std_stream@plt>
   1ad6c:	ldr	r0, [pc, #72]	; 1adbc <__assert_fail@plt+0x8d88>
   1ad70:	bl	13ab8 <__assert_fail@plt+0x1a84>
   1ad74:	ldr	r0, [pc, #68]	; 1adc0 <__assert_fail@plt+0x8d8c>
   1ad78:	pop	{r4, r5, r6, lr}
   1ad7c:	b	168e4 <__assert_fail@plt+0x48b0>
   1ad80:	mov	r2, #5
   1ad84:	ldr	r1, [pc, #56]	; 1adc4 <__assert_fail@plt+0x8d90>
   1ad88:	bl	11bb4 <dcgettext@plt>
   1ad8c:	mov	r5, r0
   1ad90:	mov	r0, r4
   1ad94:	bl	11c50 <gcry_check_version@plt>
   1ad98:	ldr	r2, [pc, #20]	; 1adb4 <__assert_fail@plt+0x8d80>
   1ad9c:	ldr	r1, [pc, #36]	; 1adc8 <__assert_fail@plt+0x8d94>
   1ada0:	mov	r3, r0
   1ada4:	mov	r0, r5
   1ada8:	bl	16c30 <__assert_fail@plt+0x4bfc>
   1adac:	andeq	pc, r2, r4, lsr r2	; <UNPREDICTABLE>
   1adb0:	andeq	sl, r1, r4, lsr #24
   1adb4:	andeq	sp, r1, r8, lsl r9
   1adb8:	andeq	r1, r1, r4, lsl #29
   1adbc:	andeq	sl, r1, r0, ror #24
   1adc0:	andeq	fp, r1, r4, asr r4
   1adc4:	andeq	sp, r1, r0, lsr #18
   1adc8:	andeq	sp, r1, r4, asr #18
   1adcc:	ldr	r0, [pc]	; 1add4 <__assert_fail@plt+0x8da0>
   1add0:	bx	lr
   1add4:	andeq	sp, r1, r4, lsl #19
   1add8:	push	{r4, r5, r6, lr}
   1addc:	mov	r1, #0
   1ade0:	bl	1921c <__assert_fail@plt+0x71e8>
   1ade4:	mov	r1, #0
   1ade8:	mov	r4, r0
   1adec:	ldr	r0, [pc, #48]	; 1ae24 <__assert_fail@plt+0x8df0>
   1adf0:	bl	1921c <__assert_fail@plt+0x71e8>
   1adf4:	mov	r1, r0
   1adf8:	mov	r5, r0
   1adfc:	mov	r0, r4
   1ae00:	bl	192cc <__assert_fail@plt+0x7298>
   1ae04:	mov	r6, r0
   1ae08:	mov	r0, r5
   1ae0c:	bl	11b84 <gcry_free@plt>
   1ae10:	mov	r0, r4
   1ae14:	bl	11b84 <gcry_free@plt>
   1ae18:	clz	r0, r6
   1ae1c:	lsr	r0, r0, #5
   1ae20:	pop	{r4, r5, r6, pc}
   1ae24:	muleq	r1, r0, r9
   1ae28:	push	{r4, r5, r6, lr}
   1ae2c:	cmp	r0, #0
   1ae30:	ldr	r5, [pc, #152]	; 1aed0 <__assert_fail@plt+0x8e9c>
   1ae34:	ldr	r4, [r5]
   1ae38:	bne	1ae4c <__assert_fail@plt+0x8e18>
   1ae3c:	cmp	r4, #0
   1ae40:	beq	1ae5c <__assert_fail@plt+0x8e28>
   1ae44:	mov	r0, r4
   1ae48:	pop	{r4, r5, r6, pc}
   1ae4c:	mov	r0, r4
   1ae50:	bl	11b84 <gcry_free@plt>
   1ae54:	mov	r3, #0
   1ae58:	str	r3, [r5]
   1ae5c:	bl	1adcc <__assert_fail@plt+0x8d98>
   1ae60:	mov	r2, #0
   1ae64:	ldr	r1, [pc, #104]	; 1aed4 <__assert_fail@plt+0x8ea0>
   1ae68:	mov	r6, r0
   1ae6c:	bl	197d4 <__assert_fail@plt+0x77a0>
   1ae70:	mov	r1, #0
   1ae74:	mov	r4, r0
   1ae78:	bl	11e78 <access@plt>
   1ae7c:	cmp	r0, #0
   1ae80:	beq	1aec0 <__assert_fail@plt+0x8e8c>
   1ae84:	mov	r2, #0
   1ae88:	ldr	r1, [pc, #72]	; 1aed8 <__assert_fail@plt+0x8ea4>
   1ae8c:	mov	r0, r6
   1ae90:	str	r4, [r5]
   1ae94:	bl	197d4 <__assert_fail@plt+0x77a0>
   1ae98:	mov	r1, #0
   1ae9c:	mov	r4, r0
   1aea0:	bl	11e78 <access@plt>
   1aea4:	cmp	r0, #0
   1aea8:	beq	1aec0 <__assert_fail@plt+0x8e8c>
   1aeac:	mov	r0, r4
   1aeb0:	bl	11b84 <gcry_free@plt>
   1aeb4:	ldr	r4, [r5]
   1aeb8:	mov	r0, r4
   1aebc:	pop	{r4, r5, r6, pc}
   1aec0:	ldr	r0, [r5]
   1aec4:	bl	11b84 <gcry_free@plt>
   1aec8:	str	r4, [r5]
   1aecc:	b	1ae44 <__assert_fail@plt+0x8e10>
   1aed0:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1aed4:	muleq	r1, ip, r9
   1aed8:	andeq	sp, r1, r8, lsr #19
   1aedc:	push	{r4, lr}
   1aee0:	ldrb	r4, [r0]
   1aee4:	cmp	r4, #0
   1aee8:	beq	1af08 <__assert_fail@plt+0x8ed4>
   1aeec:	mov	r4, r0
   1aef0:	bl	11d88 <strlen@plt>
   1aef4:	add	r0, r4, r0
   1aef8:	ldrb	r3, [r0, #-1]
   1aefc:	cmp	r3, #47	; 0x2f
   1af00:	movne	r4, #0
   1af04:	beq	1af10 <__assert_fail@plt+0x8edc>
   1af08:	mov	r0, r4
   1af0c:	pop	{r4, pc}
   1af10:	mov	r0, r4
   1af14:	bl	11e6c <gcry_xstrdup@plt>
   1af18:	mov	r4, r0
   1af1c:	bl	11d88 <strlen@plt>
   1af20:	sub	r0, r0, #1
   1af24:	add	r3, r4, r0
   1af28:	cmp	r4, r3
   1af2c:	bcs	1af08 <__assert_fail@plt+0x8ed4>
   1af30:	ldrb	r2, [r4, r0]
   1af34:	cmp	r2, #47	; 0x2f
   1af38:	bne	1af08 <__assert_fail@plt+0x8ed4>
   1af3c:	mov	r1, #0
   1af40:	b	1af50 <__assert_fail@plt+0x8f1c>
   1af44:	ldrb	r2, [r3]
   1af48:	cmp	r2, #47	; 0x2f
   1af4c:	bne	1af08 <__assert_fail@plt+0x8ed4>
   1af50:	strb	r1, [r3], #-1
   1af54:	cmp	r4, r3
   1af58:	bne	1af44 <__assert_fail@plt+0x8f10>
   1af5c:	mov	r0, r4
   1af60:	pop	{r4, pc}
   1af64:	ldr	r0, [pc]	; 1af6c <__assert_fail@plt+0x8f38>
   1af68:	bx	lr
   1af6c:	muleq	r1, r0, r9
   1af70:	push	{r4, lr}
   1af74:	ldr	r0, [pc, #80]	; 1afcc <__assert_fail@plt+0x8f98>
   1af78:	bl	11c98 <getenv@plt>
   1af7c:	subs	r4, r0, #0
   1af80:	beq	1af90 <__assert_fail@plt+0x8f5c>
   1af84:	ldrb	r3, [r4]
   1af88:	cmp	r3, #0
   1af8c:	bne	1af9c <__assert_fail@plt+0x8f68>
   1af90:	ldr	r4, [pc, #56]	; 1afd0 <__assert_fail@plt+0x8f9c>
   1af94:	mov	r0, r4
   1af98:	pop	{r4, pc}
   1af9c:	bl	1aedc <__assert_fail@plt+0x8ea8>
   1afa0:	cmp	r0, #0
   1afa4:	movne	r4, r0
   1afa8:	mov	r0, r4
   1afac:	bl	1add8 <__assert_fail@plt+0x8da4>
   1afb0:	cmp	r0, #0
   1afb4:	bne	1af94 <__assert_fail@plt+0x8f60>
   1afb8:	ldr	r3, [pc, #20]	; 1afd4 <__assert_fail@plt+0x8fa0>
   1afbc:	mov	r2, #1
   1afc0:	mov	r0, r4
   1afc4:	strb	r2, [r3, #4]
   1afc8:	pop	{r4, pc}
   1afcc:			; <UNDEFINED> instruction: 0x0001d9b8
   1afd0:	muleq	r1, r0, r9
   1afd4:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1afd8:	push	{r4, r5, r6, lr}
   1afdc:	subs	r4, r0, #0
   1afe0:	beq	1aff0 <__assert_fail@plt+0x8fbc>
   1afe4:	ldrb	r3, [r4]
   1afe8:	cmp	r3, #0
   1afec:	bne	1b024 <__assert_fail@plt+0x8ff0>
   1aff0:	bl	1af70 <__assert_fail@plt+0x8f3c>
   1aff4:	ldr	r5, [pc, #80]	; 1b04c <__assert_fail@plt+0x9018>
   1aff8:	mov	r6, #0
   1affc:	mov	r4, r0
   1b000:	ldr	r0, [r5, #8]
   1b004:	bl	11b84 <gcry_free@plt>
   1b008:	mov	r0, r4
   1b00c:	mov	r1, #0
   1b010:	bl	1921c <__assert_fail@plt+0x71e8>
   1b014:	str	r0, [r5, #8]
   1b018:	mov	r0, r6
   1b01c:	pop	{r4, r5, r6, lr}
   1b020:	b	11b84 <gcry_free@plt>
   1b024:	bl	1aedc <__assert_fail@plt+0x8ea8>
   1b028:	ldr	r5, [pc, #28]	; 1b04c <__assert_fail@plt+0x9018>
   1b02c:	subs	r6, r0, #0
   1b030:	movne	r4, r6
   1b034:	mov	r0, r4
   1b038:	bl	1add8 <__assert_fail@plt+0x8da4>
   1b03c:	cmp	r0, #0
   1b040:	moveq	r3, #1
   1b044:	strbeq	r3, [r5, #4]
   1b048:	b	1b000 <__assert_fail@plt+0x8fcc>
   1b04c:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1b050:	push	{r4, r5, r6, lr}
   1b054:	ldr	r5, [pc, #44]	; 1b088 <__assert_fail@plt+0x9054>
   1b058:	ldr	r4, [r5, #8]
   1b05c:	cmp	r4, #0
   1b060:	beq	1b06c <__assert_fail@plt+0x9038>
   1b064:	mov	r0, r4
   1b068:	pop	{r4, r5, r6, pc}
   1b06c:	bl	1af70 <__assert_fail@plt+0x8f3c>
   1b070:	mov	r1, r4
   1b074:	bl	1921c <__assert_fail@plt+0x71e8>
   1b078:	mov	r4, r0
   1b07c:	str	r0, [r5, #8]
   1b080:	mov	r0, r4
   1b084:	pop	{r4, r5, r6, pc}
   1b088:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1b08c:	ldr	r3, [pc, #12]	; 1b0a0 <__assert_fail@plt+0x906c>
   1b090:	ldrb	r0, [r3, #4]
   1b094:	clz	r0, r0
   1b098:	lsr	r0, r0, #5
   1b09c:	bx	lr
   1b0a0:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1b0a4:	ldr	r0, [pc]	; 1b0ac <__assert_fail@plt+0x9078>
   1b0a8:	bx	lr
   1b0ac:	andeq	sp, r1, r8, lsl r1
   1b0b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b0b4:	mov	r2, #0
   1b0b8:	ldr	r8, [pc, #884]	; 1b434 <__assert_fail@plt+0x9400>
   1b0bc:	sub	sp, sp, #188	; 0xbc
   1b0c0:	mov	r7, r1
   1b0c4:	ldr	r3, [r8]
   1b0c8:	str	r2, [r1]
   1b0cc:	mov	r9, r0
   1b0d0:	str	r3, [sp, #180]	; 0xb4
   1b0d4:	bl	1b050 <__assert_fail@plt+0x901c>
   1b0d8:	ldr	r5, [pc, #856]	; 1b438 <__assert_fail@plt+0x9404>
   1b0dc:	ldr	r4, [pc, #856]	; 1b43c <__assert_fail@plt+0x9408>
   1b0e0:	ldr	r6, [pc, #856]	; 1b440 <__assert_fail@plt+0x940c>
   1b0e4:	bl	11b0c <getuid@plt>
   1b0e8:	mov	r3, r4
   1b0ec:	mov	r2, r6
   1b0f0:	mov	r1, #47	; 0x2f
   1b0f4:	str	r0, [sp]
   1b0f8:	add	r0, sp, #132	; 0x84
   1b0fc:	bl	11ea8 <gpgrt_snprintf@plt>
   1b100:	add	r2, sp, #8
   1b104:	add	r1, sp, #132	; 0x84
   1b108:	mov	r0, #3
   1b10c:	bl	11fb0 <__xstat64@plt>
   1b110:	cmp	r0, #0
   1b114:	bne	1b128 <__assert_fail@plt+0x90f4>
   1b118:	ldr	r3, [sp, #24]
   1b11c:	and	r3, r3, #61440	; 0xf000
   1b120:	cmp	r3, #16384	; 0x4000
   1b124:	beq	1b16c <__assert_fail@plt+0x9138>
   1b128:	ldr	r4, [r5], #4
   1b12c:	cmp	r4, #0
   1b130:	bne	1b0e4 <__assert_fail@plt+0x90b0>
   1b134:	ldr	r3, [r7]
   1b138:	orr	r3, r3, #2
   1b13c:	orr	r3, r3, #128	; 0x80
   1b140:	str	r3, [r7]
   1b144:	bl	1b050 <__assert_fail@plt+0x901c>
   1b148:	bl	11e6c <gcry_xstrdup@plt>
   1b14c:	mov	r4, r0
   1b150:	ldr	r2, [sp, #180]	; 0xb4
   1b154:	ldr	r3, [r8]
   1b158:	mov	r0, r4
   1b15c:	cmp	r2, r3
   1b160:	bne	1b3fc <__assert_fail@plt+0x93c8>
   1b164:	add	sp, sp, #188	; 0xbc
   1b168:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b16c:	ldr	r4, [sp, #32]
   1b170:	bl	11b0c <getuid@plt>
   1b174:	cmp	r4, r0
   1b178:	beq	1b190 <__assert_fail@plt+0x915c>
   1b17c:	ldr	r3, [r7]
   1b180:	cmp	r9, #0
   1b184:	orr	r3, r3, #4
   1b188:	str	r3, [r7]
   1b18c:	beq	1b13c <__assert_fail@plt+0x9108>
   1b190:	add	r0, sp, #132	; 0x84
   1b194:	bl	11d88 <strlen@plt>
   1b198:	add	r2, r0, #7
   1b19c:	cmp	r2, #46	; 0x2e
   1b1a0:	mov	r3, r0
   1b1a4:	bls	1b1b4 <__assert_fail@plt+0x9180>
   1b1a8:	ldr	r3, [r7]
   1b1ac:	orr	r3, r3, #1
   1b1b0:	b	1b13c <__assert_fail@plt+0x9108>
   1b1b4:	ldr	r2, [pc, #648]	; 1b444 <__assert_fail@plt+0x9410>
   1b1b8:	add	r1, sp, #132	; 0x84
   1b1bc:	add	ip, r1, r0
   1b1c0:	ldrb	lr, [r2, #6]
   1b1c4:	ldrh	r1, [r2, #4]
   1b1c8:	ldr	r0, [r2]
   1b1cc:	add	r2, sp, #132	; 0x84
   1b1d0:	str	r0, [r2, r3]
   1b1d4:	strh	r1, [ip, #4]
   1b1d8:	add	r2, sp, #8
   1b1dc:	add	r1, sp, #132	; 0x84
   1b1e0:	strb	lr, [ip, #6]
   1b1e4:	mov	r0, #3
   1b1e8:	bl	11fb0 <__xstat64@plt>
   1b1ec:	cmp	r0, #0
   1b1f0:	bne	1b2e0 <__assert_fail@plt+0x92ac>
   1b1f4:	ldr	r3, [sp, #24]
   1b1f8:	and	r3, r3, #61440	; 0xf000
   1b1fc:	cmp	r3, #16384	; 0x4000
   1b200:	beq	1b32c <__assert_fail@plt+0x92f8>
   1b204:	ldr	r3, [r7]
   1b208:	cmp	r9, #0
   1b20c:	orr	r3, r3, #4
   1b210:	str	r3, [r7]
   1b214:	beq	1b13c <__assert_fail@plt+0x9108>
   1b218:	ldr	r3, [pc, #552]	; 1b448 <__assert_fail@plt+0x9414>
   1b21c:	ldrb	r3, [r3, #4]
   1b220:	cmp	r3, #0
   1b224:	beq	1b310 <__assert_fail@plt+0x92dc>
   1b228:	ldr	r3, [r7]
   1b22c:	orr	r3, r3, #32
   1b230:	str	r3, [r7]
   1b234:	bl	1b050 <__assert_fail@plt+0x901c>
   1b238:	mov	r4, r0
   1b23c:	bl	11d88 <strlen@plt>
   1b240:	mov	r2, r4
   1b244:	add	r1, sp, #112	; 0x70
   1b248:	mov	r3, r0
   1b24c:	mov	r0, #2
   1b250:	bl	11ecc <gcry_md_hash_buffer@plt>
   1b254:	add	r0, sp, #112	; 0x70
   1b258:	mov	r1, #120	; 0x78
   1b25c:	bl	1b900 <__assert_fail@plt+0x98cc>
   1b260:	subs	r5, r0, #0
   1b264:	beq	1b1a8 <__assert_fail@plt+0x9174>
   1b268:	mov	r3, #0
   1b26c:	mov	r2, r5
   1b270:	ldr	r1, [pc, #468]	; 1b44c <__assert_fail@plt+0x9418>
   1b274:	add	r0, sp, #132	; 0x84
   1b278:	bl	19768 <__assert_fail@plt+0x7734>
   1b27c:	mov	r4, r0
   1b280:	mov	r0, r5
   1b284:	bl	11b84 <gcry_free@plt>
   1b288:	cmp	r4, #0
   1b28c:	beq	1b390 <__assert_fail@plt+0x935c>
   1b290:	add	r2, sp, #8
   1b294:	mov	r1, r4
   1b298:	mov	r0, #3
   1b29c:	bl	11fb0 <__xstat64@plt>
   1b2a0:	cmp	r0, #0
   1b2a4:	beq	1b368 <__assert_fail@plt+0x9334>
   1b2a8:	bl	11ddc <__errno_location@plt>
   1b2ac:	ldr	r3, [r0]
   1b2b0:	mov	r5, r0
   1b2b4:	cmp	r3, #2
   1b2b8:	beq	1b3a0 <__assert_fail@plt+0x936c>
   1b2bc:	ldr	r3, [r7]
   1b2c0:	cmp	r9, #0
   1b2c4:	orr	r3, r3, #1
   1b2c8:	str	r3, [r7]
   1b2cc:	bne	1b150 <__assert_fail@plt+0x911c>
   1b2d0:	mov	r0, r4
   1b2d4:	bl	11b84 <gcry_free@plt>
   1b2d8:	ldr	r3, [r7]
   1b2dc:	b	1b13c <__assert_fail@plt+0x9108>
   1b2e0:	bl	11ddc <__errno_location@plt>
   1b2e4:	ldr	r3, [r0]
   1b2e8:	cmp	r3, #2
   1b2ec:	bne	1b1a8 <__assert_fail@plt+0x9174>
   1b2f0:	ldr	r1, [pc, #344]	; 1b450 <__assert_fail@plt+0x941c>
   1b2f4:	add	r0, sp, #132	; 0x84
   1b2f8:	bl	17670 <__assert_fail@plt+0x563c>
   1b2fc:	cmp	r0, #0
   1b300:	beq	1b34c <__assert_fail@plt+0x9318>
   1b304:	ldr	r3, [r7]
   1b308:	orr	r3, r3, #16
   1b30c:	b	1b13c <__assert_fail@plt+0x9108>
   1b310:	add	r0, sp, #132	; 0x84
   1b314:	bl	11e6c <gcry_xstrdup@plt>
   1b318:	mov	r4, r0
   1b31c:	cmp	r4, #0
   1b320:	bne	1b150 <__assert_fail@plt+0x911c>
   1b324:	ldr	r3, [r7]
   1b328:	b	1b13c <__assert_fail@plt+0x9108>
   1b32c:	ldr	r4, [sp, #32]
   1b330:	bl	11b0c <getuid@plt>
   1b334:	cmp	r4, r0
   1b338:	bne	1b204 <__assert_fail@plt+0x91d0>
   1b33c:	ldr	r3, [sp, #24]
   1b340:	tst	r3, #63	; 0x3f
   1b344:	bne	1b204 <__assert_fail@plt+0x91d0>
   1b348:	b	1b218 <__assert_fail@plt+0x91e4>
   1b34c:	add	r2, sp, #8
   1b350:	add	r1, sp, #132	; 0x84
   1b354:	mov	r0, #3
   1b358:	bl	11fb0 <__xstat64@plt>
   1b35c:	cmp	r0, #0
   1b360:	beq	1b1f4 <__assert_fail@plt+0x91c0>
   1b364:	b	1b1a8 <__assert_fail@plt+0x9174>
   1b368:	ldr	r3, [sp, #24]
   1b36c:	and	r3, r3, #61440	; 0xf000
   1b370:	cmp	r3, #16384	; 0x4000
   1b374:	beq	1b3b8 <__assert_fail@plt+0x9384>
   1b378:	ldr	r3, [r7]
   1b37c:	cmp	r9, #0
   1b380:	orr	r3, r3, #8
   1b384:	str	r3, [r7]
   1b388:	bne	1b150 <__assert_fail@plt+0x911c>
   1b38c:	b	1b2d0 <__assert_fail@plt+0x929c>
   1b390:	ldr	r3, [r7]
   1b394:	orr	r3, r3, #1
   1b398:	str	r3, [r7]
   1b39c:	b	1b13c <__assert_fail@plt+0x9108>
   1b3a0:	cmp	r9, #0
   1b3a4:	beq	1b3d8 <__assert_fail@plt+0x93a4>
   1b3a8:	ldr	r3, [r7]
   1b3ac:	orr	r3, r3, #64	; 0x40
   1b3b0:	str	r3, [r7]
   1b3b4:	b	1b150 <__assert_fail@plt+0x911c>
   1b3b8:	ldr	r5, [sp, #32]
   1b3bc:	bl	11b0c <getuid@plt>
   1b3c0:	cmp	r5, r0
   1b3c4:	bne	1b378 <__assert_fail@plt+0x9344>
   1b3c8:	ldr	r3, [sp, #24]
   1b3cc:	tst	r3, #63	; 0x3f
   1b3d0:	bne	1b378 <__assert_fail@plt+0x9344>
   1b3d4:	b	1b150 <__assert_fail@plt+0x911c>
   1b3d8:	ldr	r1, [pc, #112]	; 1b450 <__assert_fail@plt+0x941c>
   1b3dc:	mov	r0, r4
   1b3e0:	bl	17670 <__assert_fail@plt+0x563c>
   1b3e4:	cmp	r0, #0
   1b3e8:	beq	1b400 <__assert_fail@plt+0x93cc>
   1b3ec:	ldr	r3, [r7]
   1b3f0:	orr	r3, r3, #16
   1b3f4:	str	r3, [r7]
   1b3f8:	b	1b2d0 <__assert_fail@plt+0x929c>
   1b3fc:	bl	11bc0 <__stack_chk_fail@plt>
   1b400:	add	r2, sp, #8
   1b404:	add	r1, sp, #132	; 0x84
   1b408:	mov	r0, #3
   1b40c:	bl	11fb0 <__xstat64@plt>
   1b410:	cmp	r0, #0
   1b414:	beq	1b31c <__assert_fail@plt+0x92e8>
   1b418:	ldr	r2, [r5]
   1b41c:	ldr	r3, [r7]
   1b420:	cmp	r2, #2
   1b424:	orrne	r3, r3, #1
   1b428:	orreq	r3, r3, #64	; 0x40
   1b42c:	str	r3, [r7]
   1b430:	b	1b2d0 <__assert_fail@plt+0x929c>
   1b434:	ldrdeq	lr, [r2], -r0
   1b438:	andeq	sp, r1, r4, asr r9
   1b43c:	ldrdeq	sp, [r1], -ip
   1b440:	andeq	sp, r1, r4, asr #19
   1b444:	andeq	sp, r1, r8, ror #19
   1b448:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1b44c:	ldrdeq	sp, [r1], -r0
   1b450:	muleq	r1, r4, r4
   1b454:	push	{r4, r5, lr}
   1b458:	sub	sp, sp, #12
   1b45c:	ldr	r5, [pc, #64]	; 1b4a4 <__assert_fail@plt+0x9470>
   1b460:	ldr	r4, [pc, #64]	; 1b4a8 <__assert_fail@plt+0x9474>
   1b464:	ldr	r0, [r5, #12]
   1b468:	ldr	r3, [r4]
   1b46c:	cmp	r0, #0
   1b470:	str	r3, [sp, #4]
   1b474:	beq	1b490 <__assert_fail@plt+0x945c>
   1b478:	ldr	r2, [sp, #4]
   1b47c:	ldr	r3, [r4]
   1b480:	cmp	r2, r3
   1b484:	bne	1b4a0 <__assert_fail@plt+0x946c>
   1b488:	add	sp, sp, #12
   1b48c:	pop	{r4, r5, pc}
   1b490:	mov	r1, sp
   1b494:	bl	1b0b0 <__assert_fail@plt+0x907c>
   1b498:	str	r0, [r5, #12]
   1b49c:	b	1b478 <__assert_fail@plt+0x9444>
   1b4a0:	bl	11bc0 <__stack_chk_fail@plt>
   1b4a4:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1b4a8:	ldrdeq	lr, [r2], -r0
   1b4ac:	ldr	r0, [pc]	; 1b4b4 <__assert_fail@plt+0x9480>
   1b4b0:	bx	lr
   1b4b4:	ldrdeq	sp, [r1], -r4
   1b4b8:	ldr	r0, [pc]	; 1b4c0 <__assert_fail@plt+0x948c>
   1b4bc:	bx	lr
   1b4c0:	andeq	sp, r1, r0, ror #19
   1b4c4:	ldr	r0, [pc]	; 1b4cc <__assert_fail@plt+0x9498>
   1b4c8:	bx	lr
   1b4cc:	strdeq	sp, [r1], -r0
   1b4d0:	ldr	r0, [pc]	; 1b4d8 <__assert_fail@plt+0x94a4>
   1b4d4:	bx	lr
   1b4d8:	andeq	sp, r1, r4, lsl sl
   1b4dc:	ldr	r0, [pc]	; 1b4e4 <__assert_fail@plt+0x94b0>
   1b4e0:	bx	lr
   1b4e4:	andeq	sp, r1, r8, lsr #20
   1b4e8:	ldr	r0, [pc]	; 1b4f0 <__assert_fail@plt+0x94bc>
   1b4ec:	bx	lr
   1b4f0:	andeq	sp, r1, ip, lsr sl
   1b4f4:	push	{r4, r5, lr}
   1b4f8:	sub	sp, sp, #12
   1b4fc:	ldr	r5, [pc, #96]	; 1b564 <__assert_fail@plt+0x9530>
   1b500:	ldr	r4, [pc, #96]	; 1b568 <__assert_fail@plt+0x9534>
   1b504:	ldr	r0, [r5, #16]
   1b508:	ldr	r3, [r4]
   1b50c:	cmp	r0, #0
   1b510:	str	r3, [sp, #4]
   1b514:	beq	1b530 <__assert_fail@plt+0x94fc>
   1b518:	ldr	r2, [sp, #4]
   1b51c:	ldr	r3, [r4]
   1b520:	cmp	r2, r3
   1b524:	bne	1b560 <__assert_fail@plt+0x952c>
   1b528:	add	sp, sp, #12
   1b52c:	pop	{r4, r5, pc}
   1b530:	ldr	r0, [r5, #12]
   1b534:	cmp	r0, #0
   1b538:	beq	1b550 <__assert_fail@plt+0x951c>
   1b53c:	mov	r2, #0
   1b540:	ldr	r1, [pc, #36]	; 1b56c <__assert_fail@plt+0x9538>
   1b544:	bl	1916c <__assert_fail@plt+0x7138>
   1b548:	str	r0, [r5, #16]
   1b54c:	b	1b518 <__assert_fail@plt+0x94e4>
   1b550:	mov	r1, sp
   1b554:	bl	1b0b0 <__assert_fail@plt+0x907c>
   1b558:	str	r0, [r5, #12]
   1b55c:	b	1b53c <__assert_fail@plt+0x9508>
   1b560:	bl	11bc0 <__stack_chk_fail@plt>
   1b564:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1b568:	ldrdeq	lr, [r2], -r0
   1b56c:	andeq	sp, r1, r0, asr sl
   1b570:	push	{r4, lr}
   1b574:	ldr	r4, [pc, #72]	; 1b5c4 <__assert_fail@plt+0x9590>
   1b578:	ldr	r3, [r4, #20]
   1b57c:	cmp	r3, #0
   1b580:	bne	1b59c <__assert_fail@plt+0x9568>
   1b584:	ldr	r3, [r4, #24]
   1b588:	cmp	r3, #0
   1b58c:	bne	1b5b0 <__assert_fail@plt+0x957c>
   1b590:	bl	1201c <gcry_strdup@plt>
   1b594:	str	r0, [r4, #24]
   1b598:	pop	{r4, pc}
   1b59c:	ldr	r3, [pc, #36]	; 1b5c8 <__assert_fail@plt+0x9594>
   1b5a0:	ldr	r2, [pc, #36]	; 1b5cc <__assert_fail@plt+0x9598>
   1b5a4:	ldr	r1, [pc, #36]	; 1b5d0 <__assert_fail@plt+0x959c>
   1b5a8:	ldr	r0, [pc, #36]	; 1b5d4 <__assert_fail@plt+0x95a0>
   1b5ac:	bl	16f34 <__assert_fail@plt+0x4f00>
   1b5b0:	ldr	r3, [pc, #16]	; 1b5c8 <__assert_fail@plt+0x9594>
   1b5b4:	ldr	r2, [pc, #28]	; 1b5d8 <__assert_fail@plt+0x95a4>
   1b5b8:	ldr	r1, [pc, #16]	; 1b5d0 <__assert_fail@plt+0x959c>
   1b5bc:	ldr	r0, [pc, #24]	; 1b5dc <__assert_fail@plt+0x95a8>
   1b5c0:	bl	16f34 <__assert_fail@plt+0x4f00>
   1b5c4:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1b5c8:	andeq	sp, r1, ip, asr r9
   1b5cc:	andeq	r0, r0, sp, lsl #8
   1b5d0:	andeq	sp, r1, ip, asr sl
   1b5d4:	andeq	sp, r1, r4, ror sl
   1b5d8:	andeq	r0, r0, lr, lsl #8
   1b5dc:	muleq	r1, r0, sl
   1b5e0:	push	{r4, lr}
   1b5e4:	mov	r3, #1
   1b5e8:	ldr	r4, [pc, #664]	; 1b888 <__assert_fail@plt+0x9854>
   1b5ec:	sub	r0, r0, #1
   1b5f0:	str	r3, [r4, #20]
   1b5f4:	cmp	r0, #11
   1b5f8:	ldrls	pc, [pc, r0, lsl #2]
   1b5fc:	b	1b878 <__assert_fail@plt+0x9844>
   1b600:	andeq	fp, r1, r4, ror #12
   1b604:	muleq	r1, r8, r6
   1b608:	andeq	fp, r1, r4, lsr #13
   1b60c:	ldrdeq	fp, [r1], -r8
   1b610:	andeq	fp, r1, ip, lsl #14
   1b614:	andeq	fp, r1, r0, asr #14
   1b618:	andeq	fp, r1, r4, ror r7
   1b61c:	andeq	fp, r1, r8, lsr #15
   1b620:	ldrdeq	fp, [r1], -ip
   1b624:	andeq	fp, r1, r0, lsl r8
   1b628:	andeq	fp, r1, r4, asr #16
   1b62c:	andeq	fp, r1, r0, lsr r6
   1b630:	ldr	r0, [r4, #60]	; 0x3c
   1b634:	cmp	r0, #0
   1b638:	popne	{r4, pc}
   1b63c:	ldr	r3, [r4, #24]
   1b640:	mov	r2, r0
   1b644:	cmp	r3, #0
   1b648:	movne	r0, r3
   1b64c:	ldrne	r1, [pc, #568]	; 1b88c <__assert_fail@plt+0x9858>
   1b650:	ldreq	r1, [pc, #568]	; 1b890 <__assert_fail@plt+0x985c>
   1b654:	ldreq	r0, [pc, #568]	; 1b894 <__assert_fail@plt+0x9860>
   1b658:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b65c:	str	r0, [r4, #60]	; 0x3c
   1b660:	pop	{r4, pc}
   1b664:	ldr	r0, [r4, #28]
   1b668:	cmp	r0, #0
   1b66c:	popne	{r4, pc}
   1b670:	ldr	r3, [r4, #24]
   1b674:	mov	r2, r0
   1b678:	cmp	r3, #0
   1b67c:	movne	r0, r3
   1b680:	ldrne	r1, [pc, #528]	; 1b898 <__assert_fail@plt+0x9864>
   1b684:	ldreq	r1, [pc, #528]	; 1b89c <__assert_fail@plt+0x9868>
   1b688:	ldreq	r0, [pc, #516]	; 1b894 <__assert_fail@plt+0x9860>
   1b68c:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b690:	str	r0, [r4, #28]
   1b694:	pop	{r4, pc}
   1b698:	mov	r0, #0
   1b69c:	pop	{r4, lr}
   1b6a0:	b	1ae28 <__assert_fail@plt+0x8df4>
   1b6a4:	ldr	r0, [r4, #32]
   1b6a8:	cmp	r0, #0
   1b6ac:	popne	{r4, pc}
   1b6b0:	ldr	r3, [r4, #24]
   1b6b4:	mov	r2, r0
   1b6b8:	cmp	r3, #0
   1b6bc:	movne	r0, r3
   1b6c0:	ldrne	r1, [pc, #472]	; 1b8a0 <__assert_fail@plt+0x986c>
   1b6c4:	ldreq	r1, [pc, #472]	; 1b8a4 <__assert_fail@plt+0x9870>
   1b6c8:	ldreq	r0, [pc, #472]	; 1b8a8 <__assert_fail@plt+0x9874>
   1b6cc:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b6d0:	str	r0, [r4, #32]
   1b6d4:	pop	{r4, pc}
   1b6d8:	ldr	r0, [r4, #36]	; 0x24
   1b6dc:	cmp	r0, #0
   1b6e0:	popne	{r4, pc}
   1b6e4:	ldr	r3, [r4, #24]
   1b6e8:	mov	r2, r0
   1b6ec:	cmp	r3, #0
   1b6f0:	movne	r0, r3
   1b6f4:	ldrne	r1, [pc, #432]	; 1b8ac <__assert_fail@plt+0x9878>
   1b6f8:	ldreq	r1, [pc, #432]	; 1b8b0 <__assert_fail@plt+0x987c>
   1b6fc:	ldreq	r0, [pc, #400]	; 1b894 <__assert_fail@plt+0x9860>
   1b700:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b704:	str	r0, [r4, #36]	; 0x24
   1b708:	pop	{r4, pc}
   1b70c:	ldr	r0, [r4, #40]	; 0x28
   1b710:	cmp	r0, #0
   1b714:	popne	{r4, pc}
   1b718:	ldr	r3, [r4, #24]
   1b71c:	mov	r2, r0
   1b720:	cmp	r3, #0
   1b724:	movne	r0, r3
   1b728:	ldrne	r1, [pc, #388]	; 1b8b4 <__assert_fail@plt+0x9880>
   1b72c:	ldreq	r1, [pc, #388]	; 1b8b8 <__assert_fail@plt+0x9884>
   1b730:	ldreq	r0, [pc, #368]	; 1b8a8 <__assert_fail@plt+0x9874>
   1b734:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b738:	str	r0, [r4, #40]	; 0x28
   1b73c:	pop	{r4, pc}
   1b740:	ldr	r0, [r4, #48]	; 0x30
   1b744:	cmp	r0, #0
   1b748:	popne	{r4, pc}
   1b74c:	ldr	r3, [r4, #24]
   1b750:	mov	r2, r0
   1b754:	cmp	r3, #0
   1b758:	movne	r0, r3
   1b75c:	ldrne	r1, [pc, #344]	; 1b8bc <__assert_fail@plt+0x9888>
   1b760:	ldreq	r1, [pc, #344]	; 1b8c0 <__assert_fail@plt+0x988c>
   1b764:	ldreq	r0, [pc, #316]	; 1b8a8 <__assert_fail@plt+0x9874>
   1b768:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b76c:	str	r0, [r4, #48]	; 0x30
   1b770:	pop	{r4, pc}
   1b774:	ldr	r0, [r4, #52]	; 0x34
   1b778:	cmp	r0, #0
   1b77c:	popne	{r4, pc}
   1b780:	ldr	r3, [r4, #24]
   1b784:	mov	r2, r0
   1b788:	cmp	r3, #0
   1b78c:	movne	r0, r3
   1b790:	ldrne	r1, [pc, #300]	; 1b8c4 <__assert_fail@plt+0x9890>
   1b794:	ldreq	r1, [pc, #300]	; 1b8c8 <__assert_fail@plt+0x9894>
   1b798:	ldreq	r0, [pc, #244]	; 1b894 <__assert_fail@plt+0x9860>
   1b79c:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b7a0:	str	r0, [r4, #52]	; 0x34
   1b7a4:	pop	{r4, pc}
   1b7a8:	ldr	r0, [r4, #56]	; 0x38
   1b7ac:	cmp	r0, #0
   1b7b0:	popne	{r4, pc}
   1b7b4:	ldr	r3, [r4, #24]
   1b7b8:	mov	r2, r0
   1b7bc:	cmp	r3, #0
   1b7c0:	movne	r0, r3
   1b7c4:	ldrne	r1, [pc, #256]	; 1b8cc <__assert_fail@plt+0x9898>
   1b7c8:	ldreq	r1, [pc, #256]	; 1b8d0 <__assert_fail@plt+0x989c>
   1b7cc:	ldreq	r0, [pc, #192]	; 1b894 <__assert_fail@plt+0x9860>
   1b7d0:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b7d4:	str	r0, [r4, #56]	; 0x38
   1b7d8:	pop	{r4, pc}
   1b7dc:	ldr	r0, [r4, #64]	; 0x40
   1b7e0:	cmp	r0, #0
   1b7e4:	popne	{r4, pc}
   1b7e8:	ldr	r3, [r4, #24]
   1b7ec:	mov	r2, r0
   1b7f0:	cmp	r3, #0
   1b7f4:	movne	r0, r3
   1b7f8:	ldrne	r1, [pc, #212]	; 1b8d4 <__assert_fail@plt+0x98a0>
   1b7fc:	ldreq	r1, [pc, #212]	; 1b8d8 <__assert_fail@plt+0x98a4>
   1b800:	ldreq	r0, [pc, #140]	; 1b894 <__assert_fail@plt+0x9860>
   1b804:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b808:	str	r0, [r4, #64]	; 0x40
   1b80c:	pop	{r4, pc}
   1b810:	ldr	r0, [r4, #68]	; 0x44
   1b814:	cmp	r0, #0
   1b818:	popne	{r4, pc}
   1b81c:	ldr	r3, [r4, #24]
   1b820:	mov	r2, r0
   1b824:	cmp	r3, #0
   1b828:	movne	r0, r3
   1b82c:	ldrne	r1, [pc, #168]	; 1b8dc <__assert_fail@plt+0x98a8>
   1b830:	ldreq	r1, [pc, #168]	; 1b8e0 <__assert_fail@plt+0x98ac>
   1b834:	ldreq	r0, [pc, #88]	; 1b894 <__assert_fail@plt+0x9860>
   1b838:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b83c:	str	r0, [r4, #68]	; 0x44
   1b840:	pop	{r4, pc}
   1b844:	ldr	r0, [r4, #44]	; 0x2c
   1b848:	cmp	r0, #0
   1b84c:	popne	{r4, pc}
   1b850:	ldr	r3, [r4, #24]
   1b854:	mov	r2, r0
   1b858:	cmp	r3, #0
   1b85c:	movne	r0, r3
   1b860:	ldrne	r1, [pc, #124]	; 1b8e4 <__assert_fail@plt+0x98b0>
   1b864:	ldreq	r1, [pc, #124]	; 1b8e8 <__assert_fail@plt+0x98b4>
   1b868:	ldreq	r0, [pc, #56]	; 1b8a8 <__assert_fail@plt+0x9874>
   1b86c:	bl	197d4 <__assert_fail@plt+0x77a0>
   1b870:	str	r0, [r4, #44]	; 0x2c
   1b874:	pop	{r4, pc}
   1b878:	ldr	r2, [pc, #108]	; 1b8ec <__assert_fail@plt+0x98b8>
   1b87c:	ldr	r1, [pc, #108]	; 1b8f0 <__assert_fail@plt+0x98bc>
   1b880:	ldr	r0, [pc, #108]	; 1b8f4 <__assert_fail@plt+0x98c0>
   1b884:	bl	16f0c <__assert_fail@plt+0x4ed8>
   1b888:	andeq	pc, r2, ip, lsr r2	; <UNPREDICTABLE>
   1b88c:	andeq	sp, r1, r0, lsl #23
   1b890:	andeq	sp, r1, r4, lsl #23
   1b894:	andeq	sp, r1, r4, lsl #19
   1b898:	andeq	sp, r1, r8, lsr #21
   1b89c:			; <UNDEFINED> instruction: 0x0001dabc
   1b8a0:	andeq	sp, r1, r8, asr #21
   1b8a4:	andeq	sp, r1, ip, asr #21
   1b8a8:	andeq	sp, r1, r0, ror #19
   1b8ac:	ldrdeq	sp, [r1], -r8
   1b8b0:	andeq	sp, r1, r0, ror #21
   1b8b4:	andeq	sp, r1, ip, ror #21
   1b8b8:	andeq	sp, r1, r4, lsl #22
   1b8bc:	andeq	sp, r1, r0, lsr fp
   1b8c0:	andeq	sp, r1, ip, asr #22
   1b8c4:	andeq	sp, r1, r0, ror #22
   1b8c8:	andeq	sp, r1, ip, ror #22
   1b8cc:	andeq	sp, r1, r4, ror fp
   1b8d0:	andeq	sp, r1, r8, ror fp
   1b8d4:	andeq	sp, r1, ip, lsl #23
   1b8d8:	andeq	sp, r1, r8, lsr #23
   1b8dc:			; <UNDEFINED> instruction: 0x0001dbbc
   1b8e0:	andeq	sp, r1, ip, asr #23
   1b8e4:	andeq	sp, r1, r8, lsl fp
   1b8e8:	andeq	sp, r1, r0, lsr #22
   1b8ec:	andeq	sp, r1, r0, ror r9
   1b8f0:	andeq	r0, r0, lr, ror r4
   1b8f4:	andeq	sp, r1, ip, asr sl
   1b8f8:	mov	r0, #1
   1b8fc:	b	1ae28 <__assert_fail@plt+0x8df4>
   1b900:	ldr	r2, [pc, #748]	; 1bbf4 <__assert_fail@plt+0x9bc0>
   1b904:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b908:	add	r3, r1, #7
   1b90c:	cmp	r3, r2
   1b910:	bhi	1baf0 <__assert_fail@plt+0x9abc>
   1b914:	ldr	r2, [pc, #732]	; 1bbf8 <__assert_fail@plt+0x9bc4>
   1b918:	lsr	r8, r3, #3
   1b91c:	mov	r9, r1
   1b920:	mov	r4, r0
   1b924:	umull	r1, r0, r2, r8
   1b928:	umull	r2, r3, r2, r3
   1b92c:	lsr	r0, r0, #2
   1b930:	lsr	r3, r3, #5
   1b934:	add	r0, r0, r0, lsl #2
   1b938:	sub	r0, r8, r0
   1b93c:	add	r3, r0, r3, lsl #2
   1b940:	lsl	r3, r3, #1
   1b944:	cmp	r0, #2
   1b948:	movhi	r0, r3
   1b94c:	addls	r0, r3, #1
   1b950:	bl	11a7c <gcry_malloc@plt>
   1b954:	subs	sl, r0, #0
   1b958:	beq	1bae8 <__assert_fail@plt+0x9ab4>
   1b95c:	cmp	r8, #4
   1b960:	bls	1bbec <__assert_fail@plt+0x9bb8>
   1b964:	ldr	r0, [pc, #656]	; 1bbfc <__assert_fail@plt+0x9bc8>
   1b968:	add	r2, r4, #5
   1b96c:	add	r3, sl, #8
   1b970:	ldrb	lr, [r2, #-4]
   1b974:	ldrb	r4, [r2, #-3]
   1b978:	ldrb	fp, [r2, #-5]
   1b97c:	ldrb	ip, [r2, #-2]
   1b980:	ldrb	r1, [r2, #-1]
   1b984:	lsl	r6, lr, #4
   1b988:	lsl	r7, fp, #2
   1b98c:	lsl	r5, r4, #1
   1b990:	and	r6, r6, #16
   1b994:	orr	r6, r6, r4, lsr #4
   1b998:	and	r7, r7, #28
   1b99c:	lsl	r4, ip, #3
   1b9a0:	and	r5, r5, #30
   1b9a4:	orr	r7, r7, lr, lsr #6
   1b9a8:	orr	r5, r5, ip, lsr #7
   1b9ac:	asr	lr, lr, #1
   1b9b0:	and	r4, r4, #24
   1b9b4:	asr	ip, ip, #2
   1b9b8:	orr	r4, r4, r1, lsr #5
   1b9bc:	and	lr, lr, #31
   1b9c0:	and	ip, ip, #31
   1b9c4:	and	r1, r1, #31
   1b9c8:	ldrb	ip, [r0, ip]
   1b9cc:	ldrb	r4, [r0, r4]
   1b9d0:	ldrb	fp, [r0, fp, lsr #3]
   1b9d4:	ldrb	r7, [r0, r7]
   1b9d8:	ldrb	lr, [r0, lr]
   1b9dc:	ldrb	r6, [r0, r6]
   1b9e0:	ldrb	r5, [r0, r5]
   1b9e4:	ldrb	r1, [r0, r1]
   1b9e8:	sub	r8, r8, #5
   1b9ec:	cmp	r8, #4
   1b9f0:	strb	ip, [r3, #-3]
   1b9f4:	strb	r4, [r3, #-2]
   1b9f8:	strb	fp, [r3, #-8]
   1b9fc:	strb	r7, [r3, #-7]
   1ba00:	strb	lr, [r3, #-6]
   1ba04:	strb	r6, [r3, #-5]
   1ba08:	strb	r5, [r3, #-4]
   1ba0c:	strb	r1, [r3, #-1]
   1ba10:	mov	r4, r2
   1ba14:	mov	ip, r3
   1ba18:	add	r2, r2, #5
   1ba1c:	add	r3, r3, #8
   1ba20:	bhi	1b970 <__assert_fail@plt+0x993c>
   1ba24:	sub	r8, r8, #1
   1ba28:	cmp	r8, #3
   1ba2c:	ldrls	pc, [pc, r8, lsl #2]
   1ba30:	b	1bad0 <__assert_fail@plt+0x9a9c>
   1ba34:	andeq	fp, r1, r8, lsl #22
   1ba38:	andeq	fp, r1, r4, lsr fp
   1ba3c:	andeq	fp, r1, r4, lsl #23
   1ba40:	andeq	fp, r1, r4, asr #20
   1ba44:	ldrb	r0, [r4, #1]
   1ba48:	ldrb	r3, [r4, #2]
   1ba4c:	ldrb	r5, [r4]
   1ba50:	ldrb	r2, [r4, #3]
   1ba54:	lsl	lr, r0, #4
   1ba58:	and	lr, lr, #16
   1ba5c:	orr	lr, lr, r3, lsr #4
   1ba60:	lsl	r4, r5, #2
   1ba64:	lsl	r3, r3, #1
   1ba68:	and	r4, r4, #28
   1ba6c:	and	r3, r3, #30
   1ba70:	ldr	r1, [pc, #388]	; 1bbfc <__assert_fail@plt+0x9bc8>
   1ba74:	orr	r3, r3, r2, lsr #7
   1ba78:	orr	r4, r4, r0, lsr #6
   1ba7c:	asr	r6, r2, #2
   1ba80:	asr	r0, r0, #1
   1ba84:	lsl	r2, r2, #3
   1ba88:	and	r0, r0, #31
   1ba8c:	and	r6, r6, #31
   1ba90:	and	r2, r2, #24
   1ba94:	ldrb	r7, [r1, r0]
   1ba98:	ldrb	r8, [r1, lr]
   1ba9c:	ldrb	r4, [r1, r4]
   1baa0:	ldrb	lr, [r1, r3]
   1baa4:	ldrb	r5, [r1, r5, lsr #3]
   1baa8:	ldrb	r0, [r1, r6]
   1baac:	ldrb	r3, [r1, r2]
   1bab0:	strb	r4, [ip, #1]
   1bab4:	strb	r5, [ip]
   1bab8:	strb	r7, [ip, #2]
   1babc:	strb	r8, [ip, #3]
   1bac0:	strb	lr, [ip, #4]
   1bac4:	strb	r0, [ip, #5]
   1bac8:	strb	r3, [ip, #6]
   1bacc:	add	ip, ip, #7
   1bad0:	ldr	r1, [pc, #288]	; 1bbf8 <__assert_fail@plt+0x9bc4>
   1bad4:	add	r9, r9, #4
   1bad8:	mov	r3, #0
   1badc:	umull	r2, r9, r1, r9
   1bae0:	strb	r3, [ip]
   1bae4:	strb	r3, [sl, r9, lsr #2]
   1bae8:	mov	r0, sl
   1baec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1baf0:	bl	11ddc <__errno_location@plt>
   1baf4:	mov	sl, #0
   1baf8:	mov	r3, #22
   1bafc:	str	r3, [r0]
   1bb00:	mov	r0, sl
   1bb04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb08:	ldrb	r0, [r4]
   1bb0c:	ldr	r1, [pc, #232]	; 1bbfc <__assert_fail@plt+0x9bc8>
   1bb10:	mov	r3, ip
   1bb14:	lsl	r2, r0, #2
   1bb18:	and	r2, r2, #28
   1bb1c:	ldrb	r0, [r1, r0, lsr #3]
   1bb20:	ldrb	r2, [r1, r2]
   1bb24:	strb	r0, [r3], #2
   1bb28:	strb	r2, [ip, #1]
   1bb2c:	mov	ip, r3
   1bb30:	b	1bad0 <__assert_fail@plt+0x9a9c>
   1bb34:	ldrb	lr, [r4]
   1bb38:	ldrb	r3, [r4, #1]
   1bb3c:	ldr	r1, [pc, #184]	; 1bbfc <__assert_fail@plt+0x9bc8>
   1bb40:	add	ip, ip, #4
   1bb44:	lsl	r2, lr, #2
   1bb48:	and	r2, r2, #28
   1bb4c:	orr	r2, r2, r3, lsr #6
   1bb50:	asr	r0, r3, #1
   1bb54:	lsl	r3, r3, #4
   1bb58:	and	r0, r0, #31
   1bb5c:	and	r3, r3, #16
   1bb60:	ldrb	r4, [r1, r2]
   1bb64:	ldrb	lr, [r1, lr, lsr #3]
   1bb68:	ldrb	r2, [r1, r0]
   1bb6c:	ldrb	r3, [r1, r3]
   1bb70:	strb	r4, [ip, #-3]
   1bb74:	strb	lr, [ip, #-4]
   1bb78:	strb	r2, [ip, #-2]
   1bb7c:	strb	r3, [ip, #-1]
   1bb80:	b	1bad0 <__assert_fail@plt+0x9a9c>
   1bb84:	ldrb	r3, [r4, #1]
   1bb88:	ldrb	lr, [r4]
   1bb8c:	ldrb	r2, [r4, #2]
   1bb90:	ldr	r1, [pc, #100]	; 1bbfc <__assert_fail@plt+0x9bc8>
   1bb94:	lsl	r0, r3, #4
   1bb98:	lsl	r4, lr, #2
   1bb9c:	and	r4, r4, #28
   1bba0:	and	r0, r0, #16
   1bba4:	orr	r4, r4, r3, lsr #6
   1bba8:	orr	r0, r0, r2, lsr #4
   1bbac:	asr	r3, r3, #1
   1bbb0:	lsl	r2, r2, #1
   1bbb4:	and	r3, r3, #31
   1bbb8:	and	r2, r2, #30
   1bbbc:	ldrb	r5, [r1, r4]
   1bbc0:	ldrb	r4, [r1, lr, lsr #3]
   1bbc4:	ldrb	lr, [r1, r0]
   1bbc8:	ldrb	r0, [r1, r3]
   1bbcc:	ldrb	r3, [r1, r2]
   1bbd0:	strb	r5, [ip, #1]
   1bbd4:	strb	r4, [ip]
   1bbd8:	strb	lr, [ip, #3]
   1bbdc:	strb	r0, [ip, #2]
   1bbe0:	strb	r3, [ip, #4]
   1bbe4:	add	ip, ip, #5
   1bbe8:	b	1bad0 <__assert_fail@plt+0x9a9c>
   1bbec:	mov	ip, sl
   1bbf0:	b	1ba24 <__assert_fail@plt+0x99f0>
   1bbf4:	andeq	r0, r8, r7
   1bbf8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1bbfc:	andeq	sp, r1, r4, ror #23
   1bc00:	push	{r4, lr}
   1bc04:	mov	r4, r0
   1bc08:	ldr	r0, [r0, #8]
   1bc0c:	cmp	r0, #0
   1bc10:	beq	1bc2c <__assert_fail@plt+0x9bf8>
   1bc14:	ldr	r1, [r4]
   1bc18:	bl	1bf90 <__assert_fail@plt+0x9f5c>
   1bc1c:	ldr	r0, [r4, #8]
   1bc20:	bl	11b84 <gcry_free@plt>
   1bc24:	mov	r3, #0
   1bc28:	str	r3, [r4, #8]
   1bc2c:	ldr	r0, [r4, #12]
   1bc30:	bl	11f14 <gpg_err_set_errno@plt>
   1bc34:	mov	r0, #0
   1bc38:	pop	{r4, pc}
   1bc3c:	push	{r4, lr}
   1bc40:	mov	r4, r0
   1bc44:	mov	r3, #0
   1bc48:	str	r1, [r0, #4]
   1bc4c:	mov	r0, r1
   1bc50:	str	r3, [r4]
   1bc54:	str	r3, [r4, #12]
   1bc58:	bl	11a7c <gcry_malloc@plt>
   1bc5c:	cmp	r0, #0
   1bc60:	str	r0, [r4, #8]
   1bc64:	popne	{r4, pc}
   1bc68:	bl	11ddc <__errno_location@plt>
   1bc6c:	ldr	r3, [r0]
   1bc70:	str	r3, [r4, #12]
   1bc74:	pop	{r4, pc}
   1bc78:	push	{r4, lr}
   1bc7c:	mov	r4, r0
   1bc80:	mov	r3, #0
   1bc84:	str	r1, [r0, #4]
   1bc88:	mov	r0, r1
   1bc8c:	str	r3, [r4]
   1bc90:	str	r3, [r4, #12]
   1bc94:	bl	11ca4 <gcry_malloc_secure@plt>
   1bc98:	cmp	r0, #0
   1bc9c:	str	r0, [r4, #8]
   1bca0:	popne	{r4, pc}
   1bca4:	bl	11ddc <__errno_location@plt>
   1bca8:	ldr	r3, [r0]
   1bcac:	str	r3, [r4, #12]
   1bcb0:	pop	{r4, pc}
   1bcb4:	ldr	r3, [r0, #12]
   1bcb8:	cmp	r3, #0
   1bcbc:	bxne	lr
   1bcc0:	ldr	r2, [r0]
   1bcc4:	cmp	r2, r1
   1bcc8:	bhi	1bcd4 <__assert_fail@plt+0x9ca0>
   1bccc:	str	r3, [r0]
   1bcd0:	bx	lr
   1bcd4:	ldr	r3, [r0, #8]
   1bcd8:	sub	r2, r2, r1
   1bcdc:	str	r2, [r0]
   1bce0:	add	r1, r3, r1
   1bce4:	mov	r0, r3
   1bce8:	b	11b24 <memmove@plt>
   1bcec:	ldr	ip, [r0, #12]
   1bcf0:	clz	r3, r2
   1bcf4:	cmp	ip, #0
   1bcf8:	lsr	r3, r3, #5
   1bcfc:	movne	r3, #1
   1bd00:	cmp	r3, #0
   1bd04:	bxne	lr
   1bd08:	ldr	r3, [r0]
   1bd0c:	push	{r4, r5, r6, lr}
   1bd10:	mov	r6, r1
   1bd14:	ldr	r1, [r0, #4]
   1bd18:	mov	r5, r2
   1bd1c:	add	r2, r3, r2
   1bd20:	cmp	r2, r1
   1bd24:	mov	r4, r0
   1bd28:	ldr	r0, [r0, #8]
   1bd2c:	bcc	1bd50 <__assert_fail@plt+0x9d1c>
   1bd30:	add	r3, r5, #1024	; 0x400
   1bd34:	add	r1, r3, r1
   1bd38:	str	r1, [r4, #4]
   1bd3c:	bl	11e84 <gcry_realloc@plt>
   1bd40:	cmp	r0, #0
   1bd44:	beq	1bd70 <__assert_fail@plt+0x9d3c>
   1bd48:	ldr	r3, [r4]
   1bd4c:	str	r0, [r4, #8]
   1bd50:	mov	r2, r5
   1bd54:	mov	r1, r6
   1bd58:	add	r0, r0, r3
   1bd5c:	bl	11b6c <memcpy@plt>
   1bd60:	ldr	r2, [r4]
   1bd64:	add	r5, r2, r5
   1bd68:	str	r5, [r4]
   1bd6c:	pop	{r4, r5, r6, pc}
   1bd70:	bl	11ddc <__errno_location@plt>
   1bd74:	ldr	r1, [r4]
   1bd78:	ldr	r3, [r0]
   1bd7c:	ldr	r0, [r4, #8]
   1bd80:	cmp	r3, #0
   1bd84:	moveq	r3, #12
   1bd88:	str	r3, [r4, #12]
   1bd8c:	pop	{r4, r5, r6, lr}
   1bd90:	b	1bf90 <__assert_fail@plt+0x9f5c>
   1bd94:	cmp	r1, #0
   1bd98:	beq	1bdac <__assert_fail@plt+0x9d78>
   1bd9c:	push	{r4, lr}
   1bda0:	bl	1bcec <__assert_fail@plt+0x9cb8>
   1bda4:	mov	r0, #0
   1bda8:	pop	{r4, pc}
   1bdac:	mov	r0, #0
   1bdb0:	bx	lr
   1bdb4:	push	{r4, r5, r6, lr}
   1bdb8:	mov	r5, r0
   1bdbc:	mov	r0, r1
   1bdc0:	mov	r4, r1
   1bdc4:	bl	11d88 <strlen@plt>
   1bdc8:	mov	r1, r4
   1bdcc:	mov	r2, r0
   1bdd0:	mov	r0, r5
   1bdd4:	pop	{r4, r5, r6, lr}
   1bdd8:	b	1bcec <__assert_fail@plt+0x9cb8>
   1bddc:	push	{r1, r2, r3}
   1bde0:	push	{r4, r5, r6, lr}
   1bde4:	mov	r5, r0
   1bde8:	ldr	r4, [pc, #136]	; 1be78 <__assert_fail@plt+0x9e44>
   1bdec:	sub	sp, sp, #20
   1bdf0:	add	r3, sp, #40	; 0x28
   1bdf4:	ldr	r0, [r4]
   1bdf8:	mov	r2, r3
   1bdfc:	str	r0, [sp, #12]
   1be00:	ldr	r1, [sp, #36]	; 0x24
   1be04:	add	r0, sp, #8
   1be08:	str	r3, [sp, #4]
   1be0c:	bl	11e3c <gpgrt_vasprintf@plt>
   1be10:	cmp	r0, #0
   1be14:	blt	1be5c <__assert_fail@plt+0x9e28>
   1be18:	ldr	r6, [sp, #8]
   1be1c:	mov	r0, r6
   1be20:	bl	11d88 <strlen@plt>
   1be24:	mov	r1, r6
   1be28:	mov	r2, r0
   1be2c:	mov	r0, r5
   1be30:	bl	1bcec <__assert_fail@plt+0x9cb8>
   1be34:	ldr	r0, [sp, #8]
   1be38:	bl	11b84 <gcry_free@plt>
   1be3c:	ldr	r2, [sp, #12]
   1be40:	ldr	r3, [r4]
   1be44:	cmp	r2, r3
   1be48:	bne	1be74 <__assert_fail@plt+0x9e40>
   1be4c:	add	sp, sp, #20
   1be50:	pop	{r4, r5, r6, lr}
   1be54:	add	sp, sp, #12
   1be58:	bx	lr
   1be5c:	bl	11ddc <__errno_location@plt>
   1be60:	ldr	r3, [r0]
   1be64:	cmp	r3, #0
   1be68:	moveq	r3, #12
   1be6c:	str	r3, [r5, #12]
   1be70:	b	1be3c <__assert_fail@plt+0x9e08>
   1be74:	bl	11bc0 <__stack_chk_fail@plt>
   1be78:	ldrdeq	lr, [r2], -r0
   1be7c:	ldr	r2, [r0, #12]
   1be80:	mov	r3, r0
   1be84:	cmp	r2, #0
   1be88:	bne	1beb0 <__assert_fail@plt+0x9e7c>
   1be8c:	cmp	r1, #0
   1be90:	ldr	r0, [r0, #8]
   1be94:	ldrne	r2, [r3]
   1be98:	strne	r2, [r1]
   1be9c:	mov	r1, #0
   1bea0:	mov	r2, #12
   1bea4:	str	r1, [r3, #8]
   1bea8:	str	r2, [r3, #12]
   1beac:	bx	lr
   1beb0:	b	1bc00 <__assert_fail@plt+0x9bcc>
   1beb4:	push	{r4, r5, r6, lr}
   1beb8:	sub	sp, sp, #8
   1bebc:	ldr	r6, [pc, #148]	; 1bf58 <__assert_fail@plt+0x9f24>
   1bec0:	subs	r5, r1, #0
   1bec4:	ldr	r3, [r6]
   1bec8:	str	r3, [sp, #4]
   1becc:	beq	1bf38 <__assert_fail@plt+0x9f04>
   1bed0:	ldr	r3, [r0, #12]
   1bed4:	cmp	r3, #0
   1bed8:	bne	1bf48 <__assert_fail@plt+0x9f14>
   1bedc:	ldr	r1, [r0]
   1bee0:	mov	r2, #12
   1bee4:	ldr	r4, [r0, #8]
   1bee8:	str	r1, [r5]
   1beec:	str	r3, [r0, #8]
   1bef0:	str	r2, [r0, #12]
   1bef4:	cmp	r4, #0
   1bef8:	beq	1bf08 <__assert_fail@plt+0x9ed4>
   1befc:	ldr	r1, [r5]
   1bf00:	cmp	r1, #0
   1bf04:	bne	1bf24 <__assert_fail@plt+0x9ef0>
   1bf08:	ldr	r2, [sp, #4]
   1bf0c:	ldr	r3, [r6]
   1bf10:	mov	r0, r4
   1bf14:	cmp	r2, r3
   1bf18:	bne	1bf54 <__assert_fail@plt+0x9f20>
   1bf1c:	add	sp, sp, #8
   1bf20:	pop	{r4, r5, r6, pc}
   1bf24:	mov	r0, r4
   1bf28:	bl	11e84 <gcry_realloc@plt>
   1bf2c:	cmp	r0, #0
   1bf30:	movne	r4, r0
   1bf34:	b	1bf08 <__assert_fail@plt+0x9ed4>
   1bf38:	ldr	r3, [r0, #12]
   1bf3c:	mov	r5, sp
   1bf40:	cmp	r3, #0
   1bf44:	beq	1bedc <__assert_fail@plt+0x9ea8>
   1bf48:	bl	1bc00 <__assert_fail@plt+0x9bcc>
   1bf4c:	mov	r4, r0
   1bf50:	b	1bef4 <__assert_fail@plt+0x9ec0>
   1bf54:	bl	11bc0 <__stack_chk_fail@plt>
   1bf58:	ldrdeq	lr, [r2], -r0
   1bf5c:	mov	r3, r0
   1bf60:	ldr	r0, [r0, #12]
   1bf64:	cmp	r0, #0
   1bf68:	bne	1bf80 <__assert_fail@plt+0x9f4c>
   1bf6c:	cmp	r1, #0
   1bf70:	ldr	r0, [r3, #8]
   1bf74:	ldrne	r3, [r3]
   1bf78:	strne	r3, [r1]
   1bf7c:	bx	lr
   1bf80:	push	{r4, lr}
   1bf84:	bl	11f14 <gpg_err_set_errno@plt>
   1bf88:	mov	r0, #0
   1bf8c:	pop	{r4, pc}
   1bf90:	mvn	r2, #0
   1bf94:	b	11ee4 <__explicit_bzero_chk@plt>
   1bf98:	push	{r4, r5, r6, lr}
   1bf9c:	sub	sp, sp, #216	; 0xd8
   1bfa0:	ldr	r4, [pc, #160]	; 1c048 <__assert_fail@plt+0xa014>
   1bfa4:	mov	r5, r0
   1bfa8:	mov	r6, r1
   1bfac:	ldr	r3, [r4]
   1bfb0:	str	r3, [sp, #212]	; 0xd4
   1bfb4:	bl	192cc <__assert_fail@plt+0x7298>
   1bfb8:	cmp	r0, #0
   1bfbc:	moveq	r0, #1
   1bfc0:	bne	1bfdc <__assert_fail@plt+0x9fa8>
   1bfc4:	ldr	r2, [sp, #212]	; 0xd4
   1bfc8:	ldr	r3, [r4]
   1bfcc:	cmp	r2, r3
   1bfd0:	bne	1c044 <__assert_fail@plt+0xa010>
   1bfd4:	add	sp, sp, #216	; 0xd8
   1bfd8:	pop	{r4, r5, r6, pc}
   1bfdc:	mov	r1, r5
   1bfe0:	mov	r2, sp
   1bfe4:	mov	r0, #3
   1bfe8:	bl	11fb0 <__xstat64@plt>
   1bfec:	cmp	r0, #0
   1bff0:	beq	1bffc <__assert_fail@plt+0x9fc8>
   1bff4:	mov	r0, #0
   1bff8:	b	1bfc4 <__assert_fail@plt+0x9f90>
   1bffc:	mov	r1, r6
   1c000:	add	r2, sp, #104	; 0x68
   1c004:	mov	r0, #3
   1c008:	bl	11fb0 <__xstat64@plt>
   1c00c:	cmp	r0, #0
   1c010:	bne	1bff4 <__assert_fail@plt+0x9fc0>
   1c014:	ldrd	r0, [sp]
   1c018:	ldrd	r2, [sp, #104]	; 0x68
   1c01c:	cmp	r1, r3
   1c020:	cmpeq	r0, r2
   1c024:	bne	1bff4 <__assert_fail@plt+0x9fc0>
   1c028:	ldrd	r0, [sp, #96]	; 0x60
   1c02c:	ldrd	r2, [sp, #200]	; 0xc8
   1c030:	cmp	r1, r3
   1c034:	cmpeq	r0, r2
   1c038:	moveq	r0, #1
   1c03c:	movne	r0, #0
   1c040:	b	1bfc4 <__assert_fail@plt+0x9f90>
   1c044:	bl	11bc0 <__stack_chk_fail@plt>
   1c048:	ldrdeq	lr, [r2], -r0
   1c04c:	cmp	r1, #0
   1c050:	beq	1c25c <__assert_fail@plt+0xa228>
   1c054:	eor	ip, r0, r1
   1c058:	rsbmi	r1, r1, #0
   1c05c:	subs	r2, r1, #1
   1c060:	beq	1c228 <__assert_fail@plt+0xa1f4>
   1c064:	movs	r3, r0
   1c068:	rsbmi	r3, r0, #0
   1c06c:	cmp	r3, r1
   1c070:	bls	1c234 <__assert_fail@plt+0xa200>
   1c074:	tst	r1, r2
   1c078:	beq	1c244 <__assert_fail@plt+0xa210>
   1c07c:	clz	r2, r3
   1c080:	clz	r0, r1
   1c084:	sub	r2, r0, r2
   1c088:	rsbs	r2, r2, #31
   1c08c:	addne	r2, r2, r2, lsl #1
   1c090:	mov	r0, #0
   1c094:	addne	pc, pc, r2, lsl #2
   1c098:	nop			; (mov r0, r0)
   1c09c:	cmp	r3, r1, lsl #31
   1c0a0:	adc	r0, r0, r0
   1c0a4:	subcs	r3, r3, r1, lsl #31
   1c0a8:	cmp	r3, r1, lsl #30
   1c0ac:	adc	r0, r0, r0
   1c0b0:	subcs	r3, r3, r1, lsl #30
   1c0b4:	cmp	r3, r1, lsl #29
   1c0b8:	adc	r0, r0, r0
   1c0bc:	subcs	r3, r3, r1, lsl #29
   1c0c0:	cmp	r3, r1, lsl #28
   1c0c4:	adc	r0, r0, r0
   1c0c8:	subcs	r3, r3, r1, lsl #28
   1c0cc:	cmp	r3, r1, lsl #27
   1c0d0:	adc	r0, r0, r0
   1c0d4:	subcs	r3, r3, r1, lsl #27
   1c0d8:	cmp	r3, r1, lsl #26
   1c0dc:	adc	r0, r0, r0
   1c0e0:	subcs	r3, r3, r1, lsl #26
   1c0e4:	cmp	r3, r1, lsl #25
   1c0e8:	adc	r0, r0, r0
   1c0ec:	subcs	r3, r3, r1, lsl #25
   1c0f0:	cmp	r3, r1, lsl #24
   1c0f4:	adc	r0, r0, r0
   1c0f8:	subcs	r3, r3, r1, lsl #24
   1c0fc:	cmp	r3, r1, lsl #23
   1c100:	adc	r0, r0, r0
   1c104:	subcs	r3, r3, r1, lsl #23
   1c108:	cmp	r3, r1, lsl #22
   1c10c:	adc	r0, r0, r0
   1c110:	subcs	r3, r3, r1, lsl #22
   1c114:	cmp	r3, r1, lsl #21
   1c118:	adc	r0, r0, r0
   1c11c:	subcs	r3, r3, r1, lsl #21
   1c120:	cmp	r3, r1, lsl #20
   1c124:	adc	r0, r0, r0
   1c128:	subcs	r3, r3, r1, lsl #20
   1c12c:	cmp	r3, r1, lsl #19
   1c130:	adc	r0, r0, r0
   1c134:	subcs	r3, r3, r1, lsl #19
   1c138:	cmp	r3, r1, lsl #18
   1c13c:	adc	r0, r0, r0
   1c140:	subcs	r3, r3, r1, lsl #18
   1c144:	cmp	r3, r1, lsl #17
   1c148:	adc	r0, r0, r0
   1c14c:	subcs	r3, r3, r1, lsl #17
   1c150:	cmp	r3, r1, lsl #16
   1c154:	adc	r0, r0, r0
   1c158:	subcs	r3, r3, r1, lsl #16
   1c15c:	cmp	r3, r1, lsl #15
   1c160:	adc	r0, r0, r0
   1c164:	subcs	r3, r3, r1, lsl #15
   1c168:	cmp	r3, r1, lsl #14
   1c16c:	adc	r0, r0, r0
   1c170:	subcs	r3, r3, r1, lsl #14
   1c174:	cmp	r3, r1, lsl #13
   1c178:	adc	r0, r0, r0
   1c17c:	subcs	r3, r3, r1, lsl #13
   1c180:	cmp	r3, r1, lsl #12
   1c184:	adc	r0, r0, r0
   1c188:	subcs	r3, r3, r1, lsl #12
   1c18c:	cmp	r3, r1, lsl #11
   1c190:	adc	r0, r0, r0
   1c194:	subcs	r3, r3, r1, lsl #11
   1c198:	cmp	r3, r1, lsl #10
   1c19c:	adc	r0, r0, r0
   1c1a0:	subcs	r3, r3, r1, lsl #10
   1c1a4:	cmp	r3, r1, lsl #9
   1c1a8:	adc	r0, r0, r0
   1c1ac:	subcs	r3, r3, r1, lsl #9
   1c1b0:	cmp	r3, r1, lsl #8
   1c1b4:	adc	r0, r0, r0
   1c1b8:	subcs	r3, r3, r1, lsl #8
   1c1bc:	cmp	r3, r1, lsl #7
   1c1c0:	adc	r0, r0, r0
   1c1c4:	subcs	r3, r3, r1, lsl #7
   1c1c8:	cmp	r3, r1, lsl #6
   1c1cc:	adc	r0, r0, r0
   1c1d0:	subcs	r3, r3, r1, lsl #6
   1c1d4:	cmp	r3, r1, lsl #5
   1c1d8:	adc	r0, r0, r0
   1c1dc:	subcs	r3, r3, r1, lsl #5
   1c1e0:	cmp	r3, r1, lsl #4
   1c1e4:	adc	r0, r0, r0
   1c1e8:	subcs	r3, r3, r1, lsl #4
   1c1ec:	cmp	r3, r1, lsl #3
   1c1f0:	adc	r0, r0, r0
   1c1f4:	subcs	r3, r3, r1, lsl #3
   1c1f8:	cmp	r3, r1, lsl #2
   1c1fc:	adc	r0, r0, r0
   1c200:	subcs	r3, r3, r1, lsl #2
   1c204:	cmp	r3, r1, lsl #1
   1c208:	adc	r0, r0, r0
   1c20c:	subcs	r3, r3, r1, lsl #1
   1c210:	cmp	r3, r1
   1c214:	adc	r0, r0, r0
   1c218:	subcs	r3, r3, r1
   1c21c:	cmp	ip, #0
   1c220:	rsbmi	r0, r0, #0
   1c224:	bx	lr
   1c228:	teq	ip, r0
   1c22c:	rsbmi	r0, r0, #0
   1c230:	bx	lr
   1c234:	movcc	r0, #0
   1c238:	asreq	r0, ip, #31
   1c23c:	orreq	r0, r0, #1
   1c240:	bx	lr
   1c244:	clz	r2, r1
   1c248:	rsb	r2, r2, #31
   1c24c:	cmp	ip, #0
   1c250:	lsr	r0, r3, r2
   1c254:	rsbmi	r0, r0, #0
   1c258:	bx	lr
   1c25c:	cmp	r0, #0
   1c260:	mvngt	r0, #-2147483648	; 0x80000000
   1c264:	movlt	r0, #-2147483648	; 0x80000000
   1c268:	b	1c39c <__assert_fail@plt+0xa368>
   1c26c:	cmp	r1, #0
   1c270:	beq	1c25c <__assert_fail@plt+0xa228>
   1c274:	push	{r0, r1, lr}
   1c278:	bl	1c054 <__assert_fail@plt+0xa020>
   1c27c:	pop	{r1, r2, lr}
   1c280:	mul	r3, r2, r0
   1c284:	sub	r1, r1, r3
   1c288:	bx	lr
   1c28c:	cmp	r3, #0
   1c290:	cmpeq	r2, #0
   1c294:	bne	1c2b8 <__assert_fail@plt+0xa284>
   1c298:	cmp	r1, #0
   1c29c:	movlt	r1, #-2147483648	; 0x80000000
   1c2a0:	movlt	r0, #0
   1c2a4:	blt	1c2b4 <__assert_fail@plt+0xa280>
   1c2a8:	cmpeq	r0, #0
   1c2ac:	mvnne	r1, #-2147483648	; 0x80000000
   1c2b0:	mvnne	r0, #0
   1c2b4:	b	1c39c <__assert_fail@plt+0xa368>
   1c2b8:	sub	sp, sp, #8
   1c2bc:	push	{sp, lr}
   1c2c0:	cmp	r1, #0
   1c2c4:	blt	1c2e4 <__assert_fail@plt+0xa2b0>
   1c2c8:	cmp	r3, #0
   1c2cc:	blt	1c318 <__assert_fail@plt+0xa2e4>
   1c2d0:	bl	1c3ac <__assert_fail@plt+0xa378>
   1c2d4:	ldr	lr, [sp, #4]
   1c2d8:	add	sp, sp, #8
   1c2dc:	pop	{r2, r3}
   1c2e0:	bx	lr
   1c2e4:	rsbs	r0, r0, #0
   1c2e8:	sbc	r1, r1, r1, lsl #1
   1c2ec:	cmp	r3, #0
   1c2f0:	blt	1c33c <__assert_fail@plt+0xa308>
   1c2f4:	bl	1c3ac <__assert_fail@plt+0xa378>
   1c2f8:	ldr	lr, [sp, #4]
   1c2fc:	add	sp, sp, #8
   1c300:	pop	{r2, r3}
   1c304:	rsbs	r0, r0, #0
   1c308:	sbc	r1, r1, r1, lsl #1
   1c30c:	rsbs	r2, r2, #0
   1c310:	sbc	r3, r3, r3, lsl #1
   1c314:	bx	lr
   1c318:	rsbs	r2, r2, #0
   1c31c:	sbc	r3, r3, r3, lsl #1
   1c320:	bl	1c3ac <__assert_fail@plt+0xa378>
   1c324:	ldr	lr, [sp, #4]
   1c328:	add	sp, sp, #8
   1c32c:	pop	{r2, r3}
   1c330:	rsbs	r0, r0, #0
   1c334:	sbc	r1, r1, r1, lsl #1
   1c338:	bx	lr
   1c33c:	rsbs	r2, r2, #0
   1c340:	sbc	r3, r3, r3, lsl #1
   1c344:	bl	1c3ac <__assert_fail@plt+0xa378>
   1c348:	ldr	lr, [sp, #4]
   1c34c:	add	sp, sp, #8
   1c350:	pop	{r2, r3}
   1c354:	rsbs	r2, r2, #0
   1c358:	sbc	r3, r3, r3, lsl #1
   1c35c:	bx	lr
   1c360:	cmp	r3, #0
   1c364:	cmpeq	r2, #0
   1c368:	bne	1c380 <__assert_fail@plt+0xa34c>
   1c36c:	cmp	r1, #0
   1c370:	cmpeq	r0, #0
   1c374:	mvnne	r1, #0
   1c378:	mvnne	r0, #0
   1c37c:	b	1c39c <__assert_fail@plt+0xa368>
   1c380:	sub	sp, sp, #8
   1c384:	push	{sp, lr}
   1c388:	bl	1c3ac <__assert_fail@plt+0xa378>
   1c38c:	ldr	lr, [sp, #4]
   1c390:	add	sp, sp, #8
   1c394:	pop	{r2, r3}
   1c398:	bx	lr
   1c39c:	push	{r1, lr}
   1c3a0:	mov	r0, #8
   1c3a4:	bl	11a64 <raise@plt>
   1c3a8:	pop	{r1, pc}
   1c3ac:	cmp	r1, r3
   1c3b0:	cmpeq	r0, r2
   1c3b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3b8:	mov	r4, r0
   1c3bc:	movcc	r0, #0
   1c3c0:	mov	r5, r1
   1c3c4:	ldr	lr, [sp, #36]	; 0x24
   1c3c8:	movcc	r1, r0
   1c3cc:	bcc	1c4c8 <__assert_fail@plt+0xa494>
   1c3d0:	cmp	r3, #0
   1c3d4:	clzeq	ip, r2
   1c3d8:	clzne	ip, r3
   1c3dc:	addeq	ip, ip, #32
   1c3e0:	cmp	r5, #0
   1c3e4:	clzeq	r1, r4
   1c3e8:	addeq	r1, r1, #32
   1c3ec:	clzne	r1, r5
   1c3f0:	sub	ip, ip, r1
   1c3f4:	sub	sl, ip, #32
   1c3f8:	lsl	r9, r3, ip
   1c3fc:	rsb	fp, ip, #32
   1c400:	orr	r9, r9, r2, lsl sl
   1c404:	orr	r9, r9, r2, lsr fp
   1c408:	lsl	r8, r2, ip
   1c40c:	cmp	r5, r9
   1c410:	cmpeq	r4, r8
   1c414:	movcc	r0, #0
   1c418:	movcc	r1, r0
   1c41c:	bcc	1c438 <__assert_fail@plt+0xa404>
   1c420:	mov	r0, #1
   1c424:	subs	r4, r4, r8
   1c428:	lsl	r1, r0, sl
   1c42c:	orr	r1, r1, r0, lsr fp
   1c430:	lsl	r0, r0, ip
   1c434:	sbc	r5, r5, r9
   1c438:	cmp	ip, #0
   1c43c:	beq	1c4c8 <__assert_fail@plt+0xa494>
   1c440:	lsr	r6, r8, #1
   1c444:	orr	r6, r6, r9, lsl #31
   1c448:	lsr	r7, r9, #1
   1c44c:	mov	r2, ip
   1c450:	b	1c474 <__assert_fail@plt+0xa440>
   1c454:	subs	r3, r4, r6
   1c458:	sbc	r8, r5, r7
   1c45c:	adds	r3, r3, r3
   1c460:	adc	r8, r8, r8
   1c464:	adds	r4, r3, #1
   1c468:	adc	r5, r8, #0
   1c46c:	subs	r2, r2, #1
   1c470:	beq	1c490 <__assert_fail@plt+0xa45c>
   1c474:	cmp	r5, r7
   1c478:	cmpeq	r4, r6
   1c47c:	bcs	1c454 <__assert_fail@plt+0xa420>
   1c480:	adds	r4, r4, r4
   1c484:	adc	r5, r5, r5
   1c488:	subs	r2, r2, #1
   1c48c:	bne	1c474 <__assert_fail@plt+0xa440>
   1c490:	lsr	r3, r4, ip
   1c494:	orr	r3, r3, r5, lsl fp
   1c498:	lsr	r2, r5, ip
   1c49c:	orr	r3, r3, r5, lsr sl
   1c4a0:	adds	r0, r0, r4
   1c4a4:	mov	r4, r3
   1c4a8:	lsl	r3, r2, ip
   1c4ac:	orr	r3, r3, r4, lsl sl
   1c4b0:	lsl	ip, r4, ip
   1c4b4:	orr	r3, r3, r4, lsr fp
   1c4b8:	adc	r1, r1, r5
   1c4bc:	subs	r0, r0, ip
   1c4c0:	mov	r5, r2
   1c4c4:	sbc	r1, r1, r3
   1c4c8:	cmp	lr, #0
   1c4cc:	strdne	r4, [lr]
   1c4d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c4d8:	mov	r7, r0
   1c4dc:	ldr	r6, [pc, #72]	; 1c52c <__assert_fail@plt+0xa4f8>
   1c4e0:	ldr	r5, [pc, #72]	; 1c530 <__assert_fail@plt+0xa4fc>
   1c4e4:	add	r6, pc, r6
   1c4e8:	add	r5, pc, r5
   1c4ec:	sub	r6, r6, r5
   1c4f0:	mov	r8, r1
   1c4f4:	mov	r9, r2
   1c4f8:	bl	11a38 <gcry_xmalloc@plt-0x20>
   1c4fc:	asrs	r6, r6, #2
   1c500:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c504:	mov	r4, #0
   1c508:	add	r4, r4, #1
   1c50c:	ldr	r3, [r5], #4
   1c510:	mov	r2, r9
   1c514:	mov	r1, r8
   1c518:	mov	r0, r7
   1c51c:	blx	r3
   1c520:	cmp	r6, r4
   1c524:	bne	1c508 <__assert_fail@plt+0xa4d4>
   1c528:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c52c:	andeq	r2, r1, r0, ror #13
   1c530:	ldrdeq	r2, [r1], -r8
   1c534:	bx	lr
   1c538:	ldr	r3, [pc, #12]	; 1c54c <__assert_fail@plt+0xa518>
   1c53c:	mov	r1, #0
   1c540:	add	r3, pc, r3
   1c544:	ldr	r2, [r3]
   1c548:	b	11e00 <__cxa_atexit@plt>
   1c54c:			; <UNDEFINED> instruction: 0x00012abc

Disassembly of section .fini:

0001c550 <.fini>:
   1c550:	push	{r3, lr}
   1c554:	pop	{r3, pc}
