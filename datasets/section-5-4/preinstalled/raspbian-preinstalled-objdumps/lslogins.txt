
raspbian-preinstalled/lslogins:     file format elf32-littlearm


Disassembly of section .init:

00011e08 <.init>:
   11e08:	push	{r3, lr}
   11e0c:	bl	13bf4 <__assert_fail@plt+0x1778>
   11e10:	pop	{r3, pc}

Disassembly of section .plt:

00011e14 <fdopen@plt-0x14>:
   11e14:	push	{lr}		; (str lr, [sp, #-4]!)
   11e18:	ldr	lr, [pc, #4]	; 11e24 <fdopen@plt-0x4>
   11e1c:	add	lr, pc, lr
   11e20:	ldr	pc, [lr, #8]!
   11e24:	andeq	r9, r1, r8, lsr #31

00011e28 <fdopen@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #102400	; 0x19000
   11e30:	ldr	pc, [ip, #4008]!	; 0xfa8

00011e34 <calloc@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #102400	; 0x19000
   11e3c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011e40 <strstr@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #102400	; 0x19000
   11e48:	ldr	pc, [ip, #3992]!	; 0xf98

00011e4c <sd_journal_flush_matches@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #102400	; 0x19000
   11e54:	ldr	pc, [ip, #3984]!	; 0xf90

00011e58 <raise@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #102400	; 0x19000
   11e60:	ldr	pc, [ip, #3976]!	; 0xf88

00011e64 <sd_journal_seek_tail@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #102400	; 0x19000
   11e6c:	ldr	pc, [ip, #3968]!	; 0xf80

00011e70 <gmtime_r@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #102400	; 0x19000
   11e78:	ldr	pc, [ip, #3960]!	; 0xf78

00011e7c <getpwnam@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #102400	; 0x19000
   11e84:	ldr	pc, [ip, #3952]!	; 0xf70

00011e88 <scols_line_set_data@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #102400	; 0x19000
   11e90:	ldr	pc, [ip, #3944]!	; 0xf68

00011e94 <is_selinux_enabled@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #102400	; 0x19000
   11e9c:	ldr	pc, [ip, #3936]!	; 0xf60

00011ea0 <scols_line_refer_data@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #102400	; 0x19000
   11ea8:	ldr	pc, [ip, #3928]!	; 0xf58

00011eac <strcmp@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #102400	; 0x19000
   11eb4:	ldr	pc, [ip, #3920]!	; 0xf50

00011eb8 <strtol@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #102400	; 0x19000
   11ec0:	ldr	pc, [ip, #3912]!	; 0xf48

00011ec4 <getpwuid@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #102400	; 0x19000
   11ecc:	ldr	pc, [ip, #3904]!	; 0xf40

00011ed0 <strcspn@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #102400	; 0x19000
   11ed8:	ldr	pc, [ip, #3896]!	; 0xf38

00011edc <scols_table_enable_noheadings@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #102400	; 0x19000
   11ee4:	ldr	pc, [ip, #3888]!	; 0xf30

00011ee8 <read@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #102400	; 0x19000
   11ef0:	ldr	pc, [ip, #3880]!	; 0xf28

00011ef4 <scols_table_new_column@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #102400	; 0x19000
   11efc:	ldr	pc, [ip, #3872]!	; 0xf20

00011f00 <mktime@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #102400	; 0x19000
   11f08:	ldr	pc, [ip, #3864]!	; 0xf18

00011f0c <utmpxname@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #102400	; 0x19000
   11f14:	ldr	pc, [ip, #3856]!	; 0xf10

00011f18 <getuid@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #102400	; 0x19000
   11f20:	ldr	pc, [ip, #3848]!	; 0xf08

00011f24 <scols_free_iter@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #102400	; 0x19000
   11f2c:	ldr	pc, [ip, #3840]!	; 0xf00

00011f30 <getspnam@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #102400	; 0x19000
   11f38:	ldr	pc, [ip, #3832]!	; 0xef8

00011f3c <free@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #102400	; 0x19000
   11f44:	ldr	pc, [ip, #3824]!	; 0xef0

00011f48 <lckpwdf@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #102400	; 0x19000
   11f50:	ldr	pc, [ip, #3816]!	; 0xee8

00011f54 <fgets@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #102400	; 0x19000
   11f5c:	ldr	pc, [ip, #3808]!	; 0xee0

00011f60 <nanosleep@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #102400	; 0x19000
   11f68:	ldr	pc, [ip, #3800]!	; 0xed8

00011f6c <scols_table_enable_raw@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #102400	; 0x19000
   11f74:	ldr	pc, [ip, #3792]!	; 0xed0

00011f78 <ferror@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #102400	; 0x19000
   11f80:	ldr	pc, [ip, #3784]!	; 0xec8

00011f84 <scols_table_set_line_separator@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #102400	; 0x19000
   11f8c:	ldr	pc, [ip, #3776]!	; 0xec0

00011f90 <strndup@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #102400	; 0x19000
   11f98:	ldr	pc, [ip, #3768]!	; 0xeb8

00011f9c <_exit@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #102400	; 0x19000
   11fa4:	ldr	pc, [ip, #3760]!	; 0xeb0

00011fa8 <sd_journal_get_data@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #102400	; 0x19000
   11fb0:	ldr	pc, [ip, #3752]!	; 0xea8

00011fb4 <scols_table_set_column_separator@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #102400	; 0x19000
   11fbc:	ldr	pc, [ip, #3744]!	; 0xea0

00011fc0 <memcpy@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #102400	; 0x19000
   11fc8:	ldr	pc, [ip, #3736]!	; 0xe98

00011fcc <tdestroy@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #102400	; 0x19000
   11fd4:	ldr	pc, [ip, #3728]!	; 0xe90

00011fd8 <__strtoull_internal@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #102400	; 0x19000
   11fe0:	ldr	pc, [ip, #3720]!	; 0xe88

00011fe4 <time@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #102400	; 0x19000
   11fec:	ldr	pc, [ip, #3712]!	; 0xe80

00011ff0 <sd_journal_open@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #102400	; 0x19000
   11ff8:	ldr	pc, [ip, #3704]!	; 0xe78

00011ffc <dcgettext@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #102400	; 0x19000
   12004:	ldr	pc, [ip, #3696]!	; 0xe70

00012008 <getpwent@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #102400	; 0x19000
   12010:	ldr	pc, [ip, #3688]!	; 0xe68

00012014 <strdup@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #102400	; 0x19000
   1201c:	ldr	pc, [ip, #3680]!	; 0xe60

00012020 <setutxent@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #102400	; 0x19000
   12028:	ldr	pc, [ip, #3672]!	; 0xe58

0001202c <__stack_chk_fail@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #102400	; 0x19000
   12034:	ldr	pc, [ip, #3664]!	; 0xe50

00012038 <sd_journal_add_match@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #102400	; 0x19000
   12040:	ldr	pc, [ip, #3656]!	; 0xe48

00012044 <realloc@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #102400	; 0x19000
   1204c:	ldr	pc, [ip, #3648]!	; 0xe40

00012050 <strptime@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #102400	; 0x19000
   12058:	ldr	pc, [ip, #3640]!	; 0xe38

0001205c <localtime_r@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #102400	; 0x19000
   12064:	ldr	pc, [ip, #3632]!	; 0xe30

00012068 <textdomain@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #102400	; 0x19000
   12070:	ldr	pc, [ip, #3624]!	; 0xe28

00012074 <strcasecmp@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #102400	; 0x19000
   1207c:	ldr	pc, [ip, #3616]!	; 0xe20

00012080 <err@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #102400	; 0x19000
   12088:	ldr	pc, [ip, #3608]!	; 0xe18

0001208c <__fxstatat64@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #102400	; 0x19000
   12094:	ldr	pc, [ip, #3600]!	; 0xe10

00012098 <sd_journal_previous_skip@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #102400	; 0x19000
   120a0:	ldr	pc, [ip, #3592]!	; 0xe08

000120a4 <getegid@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #102400	; 0x19000
   120ac:	ldr	pc, [ip, #3584]!	; 0xe00

000120b0 <strtoll@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #102400	; 0x19000
   120b8:	ldr	pc, [ip, #3576]!	; 0xdf8

000120bc <scols_new_table@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #102400	; 0x19000
   120c4:	ldr	pc, [ip, #3568]!	; 0xdf0

000120c8 <gettimeofday@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #102400	; 0x19000
   120d0:	ldr	pc, [ip, #3560]!	; 0xde8

000120d4 <getcon@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #102400	; 0x19000
   120dc:	ldr	pc, [ip, #3552]!	; 0xde0

000120e0 <scols_table_enable_export@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #102400	; 0x19000
   120e8:	ldr	pc, [ip, #3544]!	; 0xdd8

000120ec <__fpending@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #102400	; 0x19000
   120f4:	ldr	pc, [ip, #3536]!	; 0xdd0

000120f8 <opendir@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #102400	; 0x19000
   12100:	ldr	pc, [ip, #3528]!	; 0xdc8

00012104 <open64@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #102400	; 0x19000
   1210c:	ldr	pc, [ip, #3520]!	; 0xdc0

00012110 <sd_journal_close@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #102400	; 0x19000
   12118:	ldr	pc, [ip, #3512]!	; 0xdb8

0001211c <malloc@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #102400	; 0x19000
   12124:	ldr	pc, [ip, #3504]!	; 0xdb0

00012128 <__libc_start_main@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #102400	; 0x19000
   12130:	ldr	pc, [ip, #3496]!	; 0xda8

00012134 <scols_table_new_line@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #102400	; 0x19000
   1213c:	ldr	pc, [ip, #3488]!	; 0xda0

00012140 <strftime@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #102400	; 0x19000
   12148:	ldr	pc, [ip, #3480]!	; 0xd98

0001214c <scols_unref_table@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #102400	; 0x19000
   12154:	ldr	pc, [ip, #3472]!	; 0xd90

00012158 <__gmon_start__@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #102400	; 0x19000
   12160:	ldr	pc, [ip, #3464]!	; 0xd88

00012164 <getopt_long@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #102400	; 0x19000
   1216c:	ldr	pc, [ip, #3456]!	; 0xd80

00012170 <__ctype_b_loc@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #102400	; 0x19000
   12178:	ldr	pc, [ip, #3448]!	; 0xd78

0001217c <exit@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #102400	; 0x19000
   12184:	ldr	pc, [ip, #3440]!	; 0xd70

00012188 <strtoul@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #102400	; 0x19000
   12190:	ldr	pc, [ip, #3432]!	; 0xd68

00012194 <strlen@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #102400	; 0x19000
   1219c:	ldr	pc, [ip, #3424]!	; 0xd60

000121a0 <strchr@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #102400	; 0x19000
   121a8:	ldr	pc, [ip, #3416]!	; 0xd58

000121ac <setenv@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #102400	; 0x19000
   121b4:	ldr	pc, [ip, #3408]!	; 0xd50

000121b8 <openat64@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #102400	; 0x19000
   121c0:	ldr	pc, [ip, #3400]!	; 0xd48

000121c4 <warnx@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #102400	; 0x19000
   121cc:	ldr	pc, [ip, #3392]!	; 0xd40

000121d0 <setreuid@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #102400	; 0x19000
   121d8:	ldr	pc, [ip, #3384]!	; 0xd38

000121dc <__open64_2@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #102400	; 0x19000
   121e4:	ldr	pc, [ip, #3376]!	; 0xd30

000121e8 <scols_line_get_cell@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #102400	; 0x19000
   121f0:	ldr	pc, [ip, #3368]!	; 0xd28

000121f4 <__errno_location@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #102400	; 0x19000
   121fc:	ldr	pc, [ip, #3360]!	; 0xd20

00012200 <strncasecmp@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #102400	; 0x19000
   12208:	ldr	pc, [ip, #3352]!	; 0xd18

0001220c <scols_table_next_column@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #102400	; 0x19000
   12214:	ldr	pc, [ip, #3344]!	; 0xd10

00012218 <__sprintf_chk@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #102400	; 0x19000
   12220:	ldr	pc, [ip, #3336]!	; 0xd08

00012224 <__cxa_atexit@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #102400	; 0x19000
   1222c:	ldr	pc, [ip, #3328]!	; 0xd00

00012230 <__vasprintf_chk@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #102400	; 0x19000
   12238:	ldr	pc, [ip, #3320]!	; 0xcf8

0001223c <tsearch@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #102400	; 0x19000
   12244:	ldr	pc, [ip, #3312]!	; 0xcf0

00012248 <getgrouplist@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #102400	; 0x19000
   12250:	ldr	pc, [ip, #3304]!	; 0xce8

00012254 <memset@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #102400	; 0x19000
   1225c:	ldr	pc, [ip, #3296]!	; 0xce0

00012260 <scols_cell_get_data@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #102400	; 0x19000
   12268:	ldr	pc, [ip, #3288]!	; 0xcd8

0001226c <sd_journal_next@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #102400	; 0x19000
   12274:	ldr	pc, [ip, #3280]!	; 0xcd0

00012278 <sd_journal_get_realtime_usec@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #102400	; 0x19000
   12280:	ldr	pc, [ip, #3272]!	; 0xcc8

00012284 <fgetc@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #102400	; 0x19000
   1228c:	ldr	pc, [ip, #3264]!	; 0xcc0

00012290 <__printf_chk@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #102400	; 0x19000
   12298:	ldr	pc, [ip, #3256]!	; 0xcb8

0001229c <strtod@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #102400	; 0x19000
   122a4:	ldr	pc, [ip, #3248]!	; 0xcb0

000122a8 <asctime_r@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #102400	; 0x19000
   122b0:	ldr	pc, [ip, #3240]!	; 0xca8

000122b4 <__fprintf_chk@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #102400	; 0x19000
   122bc:	ldr	pc, [ip, #3232]!	; 0xca0

000122c0 <access@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #102400	; 0x19000
   122c8:	ldr	pc, [ip, #3224]!	; 0xc98

000122cc <fclose@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #102400	; 0x19000
   122d4:	ldr	pc, [ip, #3216]!	; 0xc90

000122d8 <strtok@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #102400	; 0x19000
   122e0:	ldr	pc, [ip, #3208]!	; 0xc88

000122e4 <setregid@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #102400	; 0x19000
   122ec:	ldr	pc, [ip, #3200]!	; 0xc80

000122f0 <__syslog_chk@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #102400	; 0x19000
   122f8:	ldr	pc, [ip, #3192]!	; 0xc78

000122fc <endutxent@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #102400	; 0x19000
   12304:	ldr	pc, [ip, #3184]!	; 0xc70

00012308 <setlocale@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #102400	; 0x19000
   12310:	ldr	pc, [ip, #3176]!	; 0xc68

00012314 <scols_table_get_line@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #102400	; 0x19000
   1231c:	ldr	pc, [ip, #3168]!	; 0xc60

00012320 <errx@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #102400	; 0x19000
   12328:	ldr	pc, [ip, #3160]!	; 0xc58

0001232c <ulckpwdf@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #102400	; 0x19000
   12334:	ldr	pc, [ip, #3152]!	; 0xc50

00012338 <warn@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #102400	; 0x19000
   12340:	ldr	pc, [ip, #3144]!	; 0xc48

00012344 <scols_print_table@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #102400	; 0x19000
   1234c:	ldr	pc, [ip, #3136]!	; 0xc40

00012350 <fputc@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #102400	; 0x19000
   12358:	ldr	pc, [ip, #3128]!	; 0xc38

0001235c <setuid@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #102400	; 0x19000
   12364:	ldr	pc, [ip, #3120]!	; 0xc30

00012368 <sscanf@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #102400	; 0x19000
   12370:	ldr	pc, [ip, #3112]!	; 0xc28

00012374 <localeconv@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #102400	; 0x19000
   1237c:	ldr	pc, [ip, #3104]!	; 0xc20

00012380 <readdir64@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #102400	; 0x19000
   12388:	ldr	pc, [ip, #3096]!	; 0xc18

0001238c <scols_new_iter@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #102400	; 0x19000
   12394:	ldr	pc, [ip, #3088]!	; 0xc10

00012398 <dirfd@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #102400	; 0x19000
   123a0:	ldr	pc, [ip, #3080]!	; 0xc08

000123a4 <__strtoll_internal@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #102400	; 0x19000
   123ac:	ldr	pc, [ip, #3072]!	; 0xc00

000123b0 <fopen64@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #102400	; 0x19000
   123b8:	ldr	pc, [ip, #3064]!	; 0xbf8

000123bc <freecon@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #102400	; 0x19000
   123c4:	ldr	pc, [ip, #3056]!	; 0xbf0

000123c8 <bindtextdomain@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #102400	; 0x19000
   123d0:	ldr	pc, [ip, #3048]!	; 0xbe8

000123d4 <__xstat64@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #102400	; 0x19000
   123dc:	ldr	pc, [ip, #3040]!	; 0xbe0

000123e0 <fputs@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #102400	; 0x19000
   123e8:	ldr	pc, [ip, #3032]!	; 0xbd8

000123ec <strncmp@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #102400	; 0x19000
   123f4:	ldr	pc, [ip, #3024]!	; 0xbd0

000123f8 <abort@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #102400	; 0x19000
   12400:	ldr	pc, [ip, #3016]!	; 0xbc8

00012404 <twalk@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #102400	; 0x19000
   1240c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012410 <getutxent@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #102400	; 0x19000
   12418:	ldr	pc, [ip, #3000]!	; 0xbb8

0001241c <close@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #102400	; 0x19000
   12424:	ldr	pc, [ip, #2992]!	; 0xbb0

00012428 <sd_journal_open_directory@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #102400	; 0x19000
   12430:	ldr	pc, [ip, #2984]!	; 0xba8

00012434 <closedir@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #102400	; 0x19000
   1243c:	ldr	pc, [ip, #2976]!	; 0xba0

00012440 <getgrgid@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #102400	; 0x19000
   12448:	ldr	pc, [ip, #2968]!	; 0xb98

0001244c <getgrnam@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #102400	; 0x19000
   12454:	ldr	pc, [ip, #2960]!	; 0xb90

00012458 <__snprintf_chk@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #102400	; 0x19000
   12460:	ldr	pc, [ip, #2952]!	; 0xb88

00012464 <scols_init_debug@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #102400	; 0x19000
   1246c:	ldr	pc, [ip, #2944]!	; 0xb80

00012470 <strspn@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #102400	; 0x19000
   12478:	ldr	pc, [ip, #2936]!	; 0xb78

0001247c <__assert_fail@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #102400	; 0x19000
   12484:	ldr	pc, [ip, #2928]!	; 0xb70

Disassembly of section .text:

00012488 <.text>:
   12488:	ldr	r3, [pc, #4040]	; 13458 <__assert_fail@plt+0xfdc>
   1248c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12490:	sub	sp, sp, #108	; 0x6c
   12494:	ldr	r3, [r3]
   12498:	mov	r7, r0
   1249c:	mov	r8, r1
   124a0:	mov	r0, #1
   124a4:	mov	r1, #60	; 0x3c
   124a8:	str	r3, [sp, #100]	; 0x64
   124ac:	bl	11e34 <calloc@plt>
   124b0:	subs	r5, r0, #0
   124b4:	bne	124c8 <__assert_fail@plt+0x4c>
   124b8:	mov	r2, #60	; 0x3c
   124bc:	ldr	r1, [pc, #3992]	; 1345c <__assert_fail@plt+0xfe0>
   124c0:	mov	r0, #1
   124c4:	bl	12080 <err@plt>
   124c8:	mov	r6, #0
   124cc:	ldr	r1, [pc, #3980]	; 13460 <__assert_fail@plt+0xfe4>
   124d0:	mov	r0, #6
   124d4:	ldr	r4, [pc, #3976]	; 13464 <__assert_fail@plt+0xfe8>
   124d8:	str	r6, [sp, #76]	; 0x4c
   124dc:	str	r6, [sp, #72]	; 0x48
   124e0:	str	r6, [sp, #80]	; 0x50
   124e4:	str	r6, [sp, #84]	; 0x54
   124e8:	str	r6, [sp, #88]	; 0x58
   124ec:	str	r6, [sp, #92]	; 0x5c
   124f0:	str	r6, [sp, #96]	; 0x60
   124f4:	bl	12308 <setlocale@plt>
   124f8:	ldr	r1, [pc, #3944]	; 13468 <__assert_fail@plt+0xfec>
   124fc:	ldr	r0, [pc, #3944]	; 1346c <__assert_fail@plt+0xff0>
   12500:	bl	123c8 <bindtextdomain@plt>
   12504:	ldr	r0, [pc, #3936]	; 1346c <__assert_fail@plt+0xff0>
   12508:	bl	12068 <textdomain@plt>
   1250c:	ldr	r0, [pc, #3932]	; 13470 <__assert_fail@plt+0xff4>
   12510:	bl	1927c <__assert_fail@plt+0x6e00>
   12514:	ldr	r3, [r4, #12]
   12518:	mov	r1, #1
   1251c:	add	r2, r3, r1
   12520:	cmp	r3, #53	; 0x35
   12524:	str	r2, [r4, #12]
   12528:	str	r1, [r5, #48]	; 0x30
   1252c:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12530:	add	r0, r4, r3, lsl #2
   12534:	cmp	r2, #53	; 0x35
   12538:	add	r3, r3, #2
   1253c:	str	r1, [r0, #16]
   12540:	str	r3, [r4, #12]
   12544:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12548:	ldr	r3, [pc, #3876]	; 13474 <__assert_fail@plt+0xff8>
   1254c:	ldr	r9, [pc, #3876]	; 13478 <__assert_fail@plt+0xffc>
   12550:	add	sl, r3, #888	; 0x378
   12554:	ldr	r3, [pc, #3872]	; 1347c <__assert_fail@plt+0x1000>
   12558:	add	r2, r4, r2, lsl #2
   1255c:	str	r3, [sp, #28]
   12560:	mov	fp, r6
   12564:	ldr	r3, [pc, #3860]	; 13480 <__assert_fail@plt+0x1004>
   12568:	str	r6, [sp, #20]
   1256c:	str	r6, [r2, #16]
   12570:	str	r6, [sp, #16]
   12574:	str	r3, [sp, #24]
   12578:	mov	r3, #0
   1257c:	str	r3, [sp]
   12580:	mov	r2, r9
   12584:	mov	r3, sl
   12588:	mov	r1, r8
   1258c:	mov	r0, r7
   12590:	bl	12164 <getopt_long@plt>
   12594:	cmn	r0, #1
   12598:	beq	12bcc <__assert_fail@plt+0x750>
   1259c:	cmp	r0, #70	; 0x46
   125a0:	ble	12624 <__assert_fail@plt+0x1a8>
   125a4:	ldr	r6, [pc, #3800]	; 13484 <__assert_fail@plt+0x1008>
   125a8:	add	r2, sp, #72	; 0x48
   125ac:	mov	r3, #71	; 0x47
   125b0:	cmp	r0, r3
   125b4:	blt	12600 <__assert_fail@plt+0x184>
   125b8:	beq	125e8 <__assert_fail@plt+0x16c>
   125bc:	mov	ip, r6
   125c0:	ldr	r1, [ip, #4]!
   125c4:	cmp	r0, r1
   125c8:	movlt	r3, #0
   125cc:	movge	r3, #1
   125d0:	cmp	r1, #0
   125d4:	moveq	r3, #0
   125d8:	cmp	r3, #0
   125dc:	beq	12600 <__assert_fail@plt+0x184>
   125e0:	cmp	r0, r1
   125e4:	bne	125c0 <__assert_fail@plt+0x144>
   125e8:	ldr	r3, [r2]
   125ec:	cmp	r3, #0
   125f0:	streq	r0, [r2]
   125f4:	beq	12600 <__assert_fail@plt+0x184>
   125f8:	cmp	r0, r3
   125fc:	bne	1394c <__assert_fail@plt+0x14d0>
   12600:	ldr	r3, [r6, #64]!	; 0x40
   12604:	add	r2, r2, #4
   12608:	cmp	r0, r3
   1260c:	movlt	r1, #0
   12610:	movge	r1, #1
   12614:	cmp	r3, #0
   12618:	moveq	r1, #0
   1261c:	cmp	r1, #0
   12620:	bne	125b0 <__assert_fail@plt+0x134>
   12624:	sub	r0, r0, #71	; 0x47
   12628:	cmp	r0, #62	; 0x3e
   1262c:	ldrls	pc, [pc, r0, lsl #2]
   12630:	b	1325c <__assert_fail@plt+0xde0>
   12634:	andeq	r2, r1, ip, lsr fp
   12638:	andeq	r3, r1, ip, asr r2
   1263c:	andeq	r3, r1, ip, asr r2
   12640:	andeq	r3, r1, ip, asr r2
   12644:	andeq	r3, r1, ip, asr r2
   12648:	andeq	r2, r1, r0, ror #21
   1264c:	andeq	r3, r1, ip, asr r2
   12650:	andeq	r3, r1, ip, asr r2
   12654:	andeq	r3, r1, ip, asr r2
   12658:	andeq	r3, r1, ip, asr r2
   1265c:	andeq	r3, r1, ip, asr r2
   12660:	andeq	r3, r1, ip, asr r2
   12664:	andeq	r3, r1, ip, asr r2
   12668:	andeq	r3, r1, ip, asr r2
   1266c:	andeq	r3, r1, ip, asr r2
   12670:	muleq	r1, r8, sl
   12674:	andeq	r3, r1, ip, asr r2
   12678:	andeq	r3, r1, ip, asr r2
   1267c:	andeq	r3, r1, ip, asr r2
   12680:	andeq	r2, r1, r4, asr sl
   12684:	andeq	r3, r1, ip, asr r2
   12688:	andeq	r3, r1, ip, asr r2
   1268c:	andeq	r3, r1, ip, asr r2
   12690:	andeq	r3, r1, ip, asr r2
   12694:	andeq	r3, r1, ip, asr r2
   12698:	andeq	r3, r1, ip, asr r2
   1269c:	andeq	r2, r1, r0, asr #19
   126a0:	andeq	r3, r1, ip, asr r2
   126a4:			; <UNDEFINED> instruction: 0x000129b4
   126a8:	andeq	r3, r1, ip, asr r2
   126ac:	andeq	r2, r1, r8, lsr #19
   126b0:	andeq	r2, r1, r8, ror #18
   126b4:	andeq	r2, r1, ip, asr r9
   126b8:	strdeq	r2, [r1], -r0
   126bc:	andeq	r3, r1, ip, asr r2
   126c0:	andeq	r3, r1, ip, asr r2
   126c4:	andeq	r3, r1, ip, asr r2
   126c8:	andeq	r2, r1, ip, asr #18
   126cc:	andeq	r3, r1, ip, asr r2
   126d0:	andeq	r2, r1, r0, asr #18
   126d4:	andeq	r2, r1, ip, lsl r9
   126d8:	andeq	r2, r1, ip, ror #16
   126dc:	andeq	r3, r1, ip, asr r2
   126e0:	andeq	r2, r1, r0, ror #16
   126e4:	andeq	r2, r1, r0, lsr r8
   126e8:	andeq	r3, r1, ip, asr r2
   126ec:	andeq	r2, r1, r0, lsl #16
   126f0:	andeq	r3, r1, ip, asr r2
   126f4:	andeq	r3, r1, ip, asr r2
   126f8:	andeq	r3, r1, ip, asr r2
   126fc:	andeq	r3, r1, ip, asr r2
   12700:	strdeq	r2, [r1], -r4
   12704:	andeq	r3, r1, ip, asr r2
   12708:	andeq	r3, r1, ip, asr r2
   1270c:	andeq	r3, r1, ip, asr r2
   12710:	andeq	r3, r1, ip, asr r2
   12714:	andeq	r3, r1, ip, asr r2
   12718:	andeq	r2, r1, r4, ror #15
   1271c:	ldrdeq	r2, [r1], -r4
   12720:	andeq	r2, r1, r4, asr #15
   12724:			; <UNDEFINED> instruction: 0x000127b4
   12728:	andeq	r2, r1, r0, asr r7
   1272c:	andeq	r2, r1, r0, lsr r7
   12730:	ldr	r2, [pc, #3408]	; 13488 <__assert_fail@plt+0x100c>
   12734:	mov	r3, #0
   12738:	str	r3, [r2, #4]!
   1273c:	add	r3, r3, #1
   12740:	cmp	r3, #27
   12744:	bne	12738 <__assert_fail@plt+0x2bc>
   12748:	str	r3, [r4, #12]
   1274c:	b	12578 <__assert_fail@plt+0xfc>
   12750:	ldr	r3, [pc, #3380]	; 1348c <__assert_fail@plt+0x1010>
   12754:	ldr	r0, [pc, #3380]	; 13490 <__assert_fail@plt+0x1014>
   12758:	ldr	r6, [r3]
   1275c:	mov	r1, r6
   12760:	bl	11eac <strcmp@plt>
   12764:	cmp	r0, #0
   12768:	beq	12d9c <__assert_fail@plt+0x920>
   1276c:	mov	r1, r6
   12770:	ldr	r0, [pc, #3356]	; 13494 <__assert_fail@plt+0x1018>
   12774:	bl	11eac <strcmp@plt>
   12778:	cmp	r0, #0
   1277c:	beq	12d98 <__assert_fail@plt+0x91c>
   12780:	mov	r1, r6
   12784:	ldr	r0, [pc, #3340]	; 13498 <__assert_fail@plt+0x101c>
   12788:	bl	11eac <strcmp@plt>
   1278c:	cmp	r0, #0
   12790:	beq	13928 <__assert_fail@plt+0x14ac>
   12794:	mov	r2, #5
   12798:	ldr	r1, [pc, #3324]	; 1349c <__assert_fail@plt+0x1020>
   1279c:	mov	r0, #0
   127a0:	bl	11ffc <dcgettext@plt>
   127a4:	mov	r2, r6
   127a8:	mov	r1, r0
   127ac:	mov	r0, #1
   127b0:	bl	12320 <errx@plt>
   127b4:	ldrb	r3, [r5, #56]	; 0x38
   127b8:	orr	r3, r3, #8
   127bc:	strb	r3, [r5, #56]	; 0x38
   127c0:	b	12578 <__assert_fail@plt+0xfc>
   127c4:	ldrb	r3, [r5, #56]	; 0x38
   127c8:	orr	r3, r3, #16
   127cc:	strb	r3, [r5, #56]	; 0x38
   127d0:	b	12578 <__assert_fail@plt+0xfc>
   127d4:	ldr	r3, [pc, #3248]	; 1348c <__assert_fail@plt+0x1010>
   127d8:	ldr	r3, [r3]
   127dc:	str	r3, [sp, #28]
   127e0:	b	12578 <__assert_fail@plt+0xfc>
   127e4:	ldr	r3, [pc, #3232]	; 1348c <__assert_fail@plt+0x1010>
   127e8:	ldr	r3, [r3]
   127ec:	str	r3, [sp, #24]
   127f0:	b	12578 <__assert_fail@plt+0xfc>
   127f4:	mov	r3, #5
   127f8:	str	r3, [r4, #232]	; 0xe8
   127fc:	b	12578 <__assert_fail@plt+0xfc>
   12800:	mov	r1, #1000	; 0x3e8
   12804:	ldr	r0, [pc, #3220]	; 134a0 <__assert_fail@plt+0x1024>
   12808:	bl	15600 <__assert_fail@plt+0x3184>
   1280c:	ldr	r1, [pc, #3216]	; 134a4 <__assert_fail@plt+0x1028>
   12810:	str	r0, [r5, #24]
   12814:	ldr	r0, [pc, #3212]	; 134a8 <__assert_fail@plt+0x102c>
   12818:	bl	15600 <__assert_fail@plt+0x3184>
   1281c:	ldr	r3, [r4, #236]	; 0xec
   12820:	orr	r3, r3, #16
   12824:	str	r3, [r4, #236]	; 0xec
   12828:	str	r0, [r5, #28]
   1282c:	b	12578 <__assert_fail@plt+0xfc>
   12830:	mov	r1, #201	; 0xc9
   12834:	ldr	r0, [pc, #3184]	; 134ac <__assert_fail@plt+0x1030>
   12838:	bl	15600 <__assert_fail@plt+0x3184>
   1283c:	ldr	r1, [pc, #3180]	; 134b0 <__assert_fail@plt+0x1034>
   12840:	str	r0, [r5, #32]
   12844:	ldr	r0, [pc, #3176]	; 134b4 <__assert_fail@plt+0x1038>
   12848:	bl	15600 <__assert_fail@plt+0x3184>
   1284c:	ldr	r3, [r4, #236]	; 0xec
   12850:	orr	r3, r3, #8
   12854:	str	r3, [r4, #236]	; 0xec
   12858:	str	r0, [r5, #36]	; 0x24
   1285c:	b	12578 <__assert_fail@plt+0xfc>
   12860:	mov	r3, #4
   12864:	str	r3, [r4, #232]	; 0xe8
   12868:	b	12578 <__assert_fail@plt+0xfc>
   1286c:	ldr	r3, [r4, #12]
   12870:	add	r2, r3, #1
   12874:	cmp	r3, #53	; 0x35
   12878:	str	r2, [r4, #12]
   1287c:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12880:	add	r0, r4, r3, lsl #2
   12884:	mov	ip, #7
   12888:	add	r1, r3, #2
   1288c:	cmp	r2, #53	; 0x35
   12890:	str	ip, [r0, #16]
   12894:	str	r1, [r4, #12]
   12898:	bhi	13b48 <__assert_fail@plt+0x16cc>
   1289c:	add	r0, r4, r2, lsl #2
   128a0:	mov	ip, #6
   128a4:	add	r2, r3, #3
   128a8:	cmp	r1, #53	; 0x35
   128ac:	str	ip, [r0, #16]
   128b0:	str	r2, [r4, #12]
   128b4:	bhi	13b48 <__assert_fail@plt+0x16cc>
   128b8:	add	r0, r4, r1, lsl #2
   128bc:	mov	ip, #8
   128c0:	add	r1, r3, #4
   128c4:	cmp	r2, #53	; 0x35
   128c8:	str	ip, [r0, #16]
   128cc:	str	r1, [r4, #12]
   128d0:	bhi	13b48 <__assert_fail@plt+0x16cc>
   128d4:	add	r0, r4, r2, lsl #2
   128d8:	mov	ip, #5
   128dc:	add	r2, r3, ip
   128e0:	cmp	r1, #53	; 0x35
   128e4:	str	ip, [r0, #16]
   128e8:	str	r2, [r4, #12]
   128ec:	bhi	13b48 <__assert_fail@plt+0x16cc>
   128f0:	add	r1, r4, r1, lsl #2
   128f4:	add	r3, r3, #6
   128f8:	mov	r0, #19
   128fc:	cmp	r2, #53	; 0x35
   12900:	str	r3, [r4, #12]
   12904:	str	r0, [r1, #16]
   12908:	bhi	13b48 <__assert_fail@plt+0x16cc>
   1290c:	add	r2, r4, r2, lsl #2
   12910:	mov	r3, #9
   12914:	str	r3, [r2, #16]
   12918:	b	12578 <__assert_fail@plt+0xfc>
   1291c:	ldr	r3, [pc, #2920]	; 1348c <__assert_fail@plt+0x1010>
   12920:	ldr	r2, [r3]
   12924:	ldrsb	r1, [r2]
   12928:	cmp	r1, #61	; 0x3d
   1292c:	addeq	r2, r2, #1
   12930:	streq	r2, [r3]
   12934:	ldr	r3, [r3]
   12938:	str	r3, [sp, #20]
   1293c:	b	12578 <__assert_fail@plt+0xfc>
   12940:	mov	r3, #3
   12944:	str	r3, [r4, #232]	; 0xe8
   12948:	b	12578 <__assert_fail@plt+0xfc>
   1294c:	ldr	r3, [pc, #2872]	; 1348c <__assert_fail@plt+0x1010>
   12950:	ldr	r3, [r3]
   12954:	str	r3, [sp, #16]
   12958:	b	12578 <__assert_fail@plt+0xfc>
   1295c:	ldr	r3, [pc, #2856]	; 1348c <__assert_fail@plt+0x1010>
   12960:	ldr	fp, [r3]
   12964:	b	12578 <__assert_fail@plt+0xfc>
   12968:	ldr	r3, [r4, #12]
   1296c:	add	r2, r3, #1
   12970:	cmp	r3, #53	; 0x35
   12974:	str	r2, [r4, #12]
   12978:	bhi	13b48 <__assert_fail@plt+0x16cc>
   1297c:	add	r1, r4, r3, lsl #2
   12980:	mov	r0, #17
   12984:	add	r3, r3, #2
   12988:	cmp	r2, #53	; 0x35
   1298c:	str	r3, [r4, #12]
   12990:	str	r0, [r1, #16]
   12994:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12998:	add	r2, r4, r2, lsl #2
   1299c:	mov	r3, #18
   129a0:	str	r3, [r2, #16]
   129a4:	b	12578 <__assert_fail@plt+0xfc>
   129a8:	mov	r3, #2
   129ac:	str	r3, [r4, #232]	; 0xe8
   129b0:	b	12578 <__assert_fail@plt+0xfc>
   129b4:	mov	r3, #1
   129b8:	str	r3, [r4, #232]	; 0xe8
   129bc:	b	12578 <__assert_fail@plt+0xfc>
   129c0:	ldr	r3, [r4, #12]
   129c4:	add	r1, r3, #1
   129c8:	cmp	r3, #53	; 0x35
   129cc:	str	r1, [r4, #12]
   129d0:	bhi	13b48 <__assert_fail@plt+0x16cc>
   129d4:	add	r0, r4, r3, lsl #2
   129d8:	mov	ip, #20
   129dc:	add	r2, r3, #2
   129e0:	cmp	r1, #53	; 0x35
   129e4:	str	ip, [r0, #16]
   129e8:	str	r2, [r4, #12]
   129ec:	bhi	13b48 <__assert_fail@plt+0x16cc>
   129f0:	add	r0, r4, r1, lsl #2
   129f4:	mov	ip, #22
   129f8:	add	r1, r3, #3
   129fc:	cmp	r2, #53	; 0x35
   12a00:	str	ip, [r0, #16]
   12a04:	str	r1, [r4, #12]
   12a08:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12a0c:	add	r0, r4, r2, lsl #2
   12a10:	mov	ip, #23
   12a14:	add	r2, r3, #4
   12a18:	cmp	r1, #53	; 0x35
   12a1c:	str	ip, [r0, #16]
   12a20:	str	r2, [r4, #12]
   12a24:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12a28:	add	r1, r4, r1, lsl #2
   12a2c:	add	r3, r3, #5
   12a30:	mov	r0, #21
   12a34:	cmp	r2, #53	; 0x35
   12a38:	str	r3, [r4, #12]
   12a3c:	str	r0, [r1, #16]
   12a40:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12a44:	add	r2, r4, r2, lsl #2
   12a48:	mov	r3, #24
   12a4c:	str	r3, [r2, #16]
   12a50:	b	12578 <__assert_fail@plt+0xfc>
   12a54:	bl	11e94 <is_selinux_enabled@plt>
   12a58:	cmp	r0, #0
   12a5c:	blt	12bb4 <__assert_fail@plt+0x738>
   12a60:	ldrb	r3, [r5, #56]	; 0x38
   12a64:	bic	r3, r3, #1
   12a68:	cmp	r0, #1
   12a6c:	orreq	r3, r3, #1
   12a70:	strb	r3, [r5, #56]	; 0x38
   12a74:	ldr	r3, [r4, #12]
   12a78:	add	r2, r3, #1
   12a7c:	cmp	r3, #53	; 0x35
   12a80:	str	r2, [r4, #12]
   12a84:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12a88:	add	r3, r4, r3, lsl #2
   12a8c:	mov	r2, #25
   12a90:	str	r2, [r3, #16]
   12a94:	b	12578 <__assert_fail@plt+0xfc>
   12a98:	mov	r2, #5
   12a9c:	ldr	r1, [pc, #2580]	; 134b8 <__assert_fail@plt+0x103c>
   12aa0:	mov	r0, #0
   12aa4:	bl	11ffc <dcgettext@plt>
   12aa8:	ldr	r2, [pc, #2820]	; 135b4 <__assert_fail@plt+0x1138>
   12aac:	ldr	r3, [pc, #2568]	; 134bc <__assert_fail@plt+0x1040>
   12ab0:	ldr	r2, [r2]
   12ab4:	mov	r1, r0
   12ab8:	mov	r0, #1
   12abc:	bl	12290 <__printf_chk@plt>
   12ac0:	mov	r0, #0
   12ac4:	ldr	r3, [pc, #2444]	; 13458 <__assert_fail@plt+0xfdc>
   12ac8:	ldr	r2, [sp, #100]	; 0x64
   12acc:	ldr	r3, [r3]
   12ad0:	cmp	r2, r3
   12ad4:	bne	13b88 <__assert_fail@plt+0x170c>
   12ad8:	add	sp, sp, #108	; 0x6c
   12adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ae0:	ldr	r3, [r4, #12]
   12ae4:	add	r1, r3, #1
   12ae8:	cmp	r3, #53	; 0x35
   12aec:	str	r1, [r4, #12]
   12af0:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12af4:	add	r0, r4, r3, lsl #2
   12af8:	mov	ip, #15
   12afc:	add	r2, r3, #2
   12b00:	cmp	r1, #53	; 0x35
   12b04:	str	ip, [r0, #16]
   12b08:	str	r2, [r4, #12]
   12b0c:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12b10:	add	r1, r4, r1, lsl #2
   12b14:	add	r3, r3, #3
   12b18:	mov	r0, #16
   12b1c:	cmp	r2, #53	; 0x35
   12b20:	str	r3, [r4, #12]
   12b24:	str	r0, [r1, #16]
   12b28:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12b2c:	add	r2, r4, r2, lsl #2
   12b30:	mov	r3, #14
   12b34:	str	r3, [r2, #16]
   12b38:	b	12578 <__assert_fail@plt+0xfc>
   12b3c:	ldr	r3, [r4, #12]
   12b40:	add	r2, r3, #1
   12b44:	cmp	r3, #53	; 0x35
   12b48:	str	r2, [r4, #12]
   12b4c:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12b50:	add	r0, r4, r3, lsl #2
   12b54:	mov	ip, #11
   12b58:	add	r1, r3, #2
   12b5c:	cmp	r2, #53	; 0x35
   12b60:	str	ip, [r0, #16]
   12b64:	str	r1, [r4, #12]
   12b68:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12b6c:	add	r0, r4, r2, lsl #2
   12b70:	mov	ip, #10
   12b74:	add	r2, r3, #3
   12b78:	cmp	r1, #53	; 0x35
   12b7c:	str	ip, [r0, #16]
   12b80:	str	r2, [r4, #12]
   12b84:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12b88:	add	r1, r4, r1, lsl #2
   12b8c:	add	r3, r3, #4
   12b90:	mov	r0, #13
   12b94:	cmp	r2, #53	; 0x35
   12b98:	str	r3, [r4, #12]
   12b9c:	str	r0, [r1, #16]
   12ba0:	bhi	13b48 <__assert_fail@plt+0x16cc>
   12ba4:	add	r2, r4, r2, lsl #2
   12ba8:	mov	r3, #12
   12bac:	str	r3, [r2, #16]
   12bb0:	b	12578 <__assert_fail@plt+0xfc>
   12bb4:	mov	r2, #5
   12bb8:	ldr	r1, [pc, #2304]	; 134c0 <__assert_fail@plt+0x1044>
   12bbc:	mov	r0, #0
   12bc0:	bl	11ffc <dcgettext@plt>
   12bc4:	bl	12338 <warn@plt>
   12bc8:	b	12a74 <__assert_fail@plt+0x5f8>
   12bcc:	ldr	r3, [pc, #2288]	; 134c4 <__assert_fail@plt+0x1048>
   12bd0:	ldr	r3, [r3]
   12bd4:	sub	r2, r7, r3
   12bd8:	cmp	r2, #1
   12bdc:	beq	13344 <__assert_fail@plt+0xec8>
   12be0:	cmp	r3, r7
   12be4:	bne	13b54 <__assert_fail@plt+0x16d8>
   12be8:	mov	r0, #0
   12bec:	bl	12464 <scols_init_debug@plt>
   12bf0:	ldr	r3, [r4, #236]	; 0xec
   12bf4:	and	r2, r3, #24
   12bf8:	cmp	r2, #24
   12bfc:	biceq	r3, r3, #24
   12c00:	streq	r3, [r4, #236]	; 0xec
   12c04:	ldr	r3, [r4, #232]	; 0xe8
   12c08:	cmp	r3, #6
   12c0c:	beq	13318 <__assert_fail@plt+0xe9c>
   12c10:	ldr	r3, [r4, #12]
   12c14:	cmp	r3, #2
   12c18:	beq	12d5c <__assert_fail@plt+0x8e0>
   12c1c:	ldr	r3, [sp, #20]
   12c20:	cmp	r3, #0
   12c24:	beq	12c4c <__assert_fail@plt+0x7d0>
   12c28:	ldr	r2, [pc, #2200]	; 134c8 <__assert_fail@plt+0x104c>
   12c2c:	ldr	r3, [pc, #2132]	; 13488 <__assert_fail@plt+0x100c>
   12c30:	str	r2, [sp]
   12c34:	ldr	r0, [sp, #20]
   12c38:	add	r1, r3, #4
   12c3c:	mov	r2, #54	; 0x36
   12c40:	bl	172ac <__assert_fail@plt+0x4e30>
   12c44:	cmp	r0, #0
   12c48:	blt	13430 <__assert_fail@plt+0xfb4>
   12c4c:	ldr	r3, [r4, #12]
   12c50:	cmp	r3, #0
   12c54:	beq	12ccc <__assert_fail@plt+0x850>
   12c58:	ldr	r2, [r4, #16]
   12c5c:	sub	r2, r2, #14
   12c60:	cmp	r2, #2
   12c64:	bls	13378 <__assert_fail@plt+0xefc>
   12c68:	ldr	r0, [pc, #2140]	; 134cc <__assert_fail@plt+0x1050>
   12c6c:	mov	r1, #0
   12c70:	b	12c84 <__assert_fail@plt+0x808>
   12c74:	ldr	r2, [r0], #4
   12c78:	sub	r2, r2, #14
   12c7c:	cmp	r2, #2
   12c80:	bls	13378 <__assert_fail@plt+0xefc>
   12c84:	add	r1, r1, #1
   12c88:	cmp	r3, r1
   12c8c:	bhi	12c74 <__assert_fail@plt+0x7f8>
   12c90:	ldr	r0, [r4, #12]
   12c94:	ldr	r3, [r4, #16]
   12c98:	sub	r3, r3, #17
   12c9c:	cmp	r3, #1
   12ca0:	bls	133d8 <__assert_fail@plt+0xf5c>
   12ca4:	ldr	r1, [pc, #2080]	; 134cc <__assert_fail@plt+0x1050>
   12ca8:	mov	r2, #0
   12cac:	b	12cc0 <__assert_fail@plt+0x844>
   12cb0:	ldr	r3, [r1], #4
   12cb4:	sub	r3, r3, #17
   12cb8:	cmp	r3, #1
   12cbc:	bls	133d8 <__assert_fail@plt+0xf5c>
   12cc0:	add	r2, r2, #1
   12cc4:	cmp	r2, r0
   12cc8:	bcc	12cb0 <__assert_fail@plt+0x834>
   12ccc:	ldr	r3, [sp, #16]
   12cd0:	orrs	r3, r3, fp
   12cd4:	bne	133ac <__assert_fail@plt+0xf30>
   12cd8:	ldrb	r3, [r5, #56]	; 0x38
   12cdc:	ands	r7, r3, #4
   12ce0:	bne	132a4 <__assert_fail@plt+0xe28>
   12ce4:	bl	121f4 <__errno_location@plt>
   12ce8:	ldr	r8, [pc, #2016]	; 134d0 <__assert_fail@plt+0x1054>
   12cec:	add	r9, r5, #16
   12cf0:	mov	r6, r0
   12cf4:	str	r7, [r6]
   12cf8:	mov	r1, #0
   12cfc:	mov	r0, r5
   12d00:	bl	14914 <__assert_fail@plt+0x2498>
   12d04:	cmp	r0, #0
   12d08:	bne	13294 <__assert_fail@plt+0xe18>
   12d0c:	ldr	r3, [r6]
   12d10:	cmp	r3, #11
   12d14:	beq	12cf8 <__assert_fail@plt+0x87c>
   12d18:	bl	120bc <scols_new_table@plt>
   12d1c:	subs	r8, r0, #0
   12d20:	beq	13b70 <__assert_fail@plt+0x16f4>
   12d24:	ldrb	r3, [r5, #56]	; 0x38
   12d28:	tst	r3, #8
   12d2c:	bne	13930 <__assert_fail@plt+0x14b4>
   12d30:	ldr	r3, [r4, #232]	; 0xe8
   12d34:	sub	r3, r3, #1
   12d38:	cmp	r3, #5
   12d3c:	ldrls	pc, [pc, r3, lsl #2]
   12d40:	b	12dc8 <__assert_fail@plt+0x94c>
   12d44:	andeq	r2, r1, r4, asr #29
   12d48:			; <UNDEFINED> instruction: 0x00012eb4
   12d4c:	andeq	r2, r1, r8, lsr #29
   12d50:			; <UNDEFINED> instruction: 0x00012dbc
   12d54:			; <UNDEFINED> instruction: 0x00012db0
   12d58:	andeq	r2, r1, r0, ror #29
   12d5c:	ldr	r2, [sp, #20]
   12d60:	str	r3, [r4, #40]	; 0x28
   12d64:	cmp	r2, #0
   12d68:	mov	r3, #8
   12d6c:	mov	r2, #6
   12d70:	mov	r1, #26
   12d74:	str	r2, [r4, #28]
   12d78:	str	r3, [r4, #32]
   12d7c:	mov	r2, #14
   12d80:	mov	r3, #7
   12d84:	str	r1, [r4, #24]
   12d88:	str	r2, [r4, #36]	; 0x24
   12d8c:	str	r3, [r4, #12]
   12d90:	bne	12c28 <__assert_fail@plt+0x7ac>
   12d94:	b	12c58 <__assert_fail@plt+0x7dc>
   12d98:	mov	r0, #1
   12d9c:	ldr	r3, [pc, #1744]	; 13474 <__assert_fail@plt+0xff8>
   12da0:	add	r0, r3, r0, lsl #3
   12da4:	ldr	r3, [r0, #1292]	; 0x50c
   12da8:	str	r3, [r5, #48]	; 0x30
   12dac:	b	12578 <__assert_fail@plt+0xfc>
   12db0:	ldr	r1, [pc, #1820]	; 134d4 <__assert_fail@plt+0x1058>
   12db4:	mov	r0, r8
   12db8:	bl	11f84 <scols_table_set_line_separator@plt>
   12dbc:	mov	r1, #1
   12dc0:	mov	r0, r8
   12dc4:	bl	11f6c <scols_table_enable_raw@plt>
   12dc8:	ldr	r7, [pc, #1800]	; 134d8 <__assert_fail@plt+0x105c>
   12dcc:	mov	r6, #0
   12dd0:	mov	r9, r7
   12dd4:	b	12e1c <__assert_fail@plt+0x9a0>
   12dd8:	ldr	r1, [r9], #4
   12ddc:	ldrb	r0, [r5, #56]	; 0x38
   12de0:	ldr	r2, [pc, #1676]	; 13474 <__assert_fail@plt+0xff8>
   12de4:	lsl	r3, r1, #5
   12de8:	tst	r0, #16
   12dec:	add	r2, r2, r3
   12df0:	ldr	r0, [pc, #1660]	; 13474 <__assert_fail@plt+0xff8>
   12df4:	ldr	r2, [r2, #24]
   12df8:	add	r3, r0, r3
   12dfc:	bicne	r2, r2, #1
   12e00:	ldr	r1, [r0, r1, lsl #5]
   12e04:	vldr	d0, [r3, #16]
   12e08:	mov	r0, r8
   12e0c:	bl	11ef4 <scols_table_new_column@plt>
   12e10:	cmp	r0, #0
   12e14:	beq	1341c <__assert_fail@plt+0xfa0>
   12e18:	add	r6, r6, #1
   12e1c:	ldr	r3, [r4, #12]
   12e20:	cmp	r6, r3
   12e24:	bcc	12dd8 <__assert_fail@plt+0x95c>
   12e28:	ldr	r1, [pc, #1708]	; 134dc <__assert_fail@plt+0x1060>
   12e2c:	ldr	r0, [r5, #16]
   12e30:	str	r8, [r4, #8]
   12e34:	bl	12404 <twalk@plt>
   12e38:	ldr	r3, [r4, #232]	; 0xe8
   12e3c:	cmp	r3, #6
   12e40:	beq	136cc <__assert_fail@plt+0x1250>
   12e44:	ldr	r0, [r4, #8]
   12e48:	bl	12344 <scols_print_table@plt>
   12e4c:	ldr	r0, [r4, #8]
   12e50:	bl	1214c <scols_unref_table@plt>
   12e54:	ldr	r1, [pc, #1668]	; 134e0 <__assert_fail@plt+0x1064>
   12e58:	ldr	r0, [r5, #16]
   12e5c:	bl	11fcc <tdestroy@plt>
   12e60:	ldr	r0, [r5]
   12e64:	bl	11f3c <free@plt>
   12e68:	ldr	r0, [r5, #8]
   12e6c:	bl	11f3c <free@plt>
   12e70:	mov	r4, #0
   12e74:	b	12e84 <__assert_fail@plt+0xa08>
   12e78:	ldr	r0, [r0, r4, lsl #2]
   12e7c:	bl	11f3c <free@plt>
   12e80:	add	r4, r4, #1
   12e84:	ldr	r3, [r5, #44]	; 0x2c
   12e88:	ldr	r0, [r5, #40]	; 0x28
   12e8c:	cmp	r4, r3
   12e90:	bcc	12e78 <__assert_fail@plt+0x9fc>
   12e94:	bl	11f3c <free@plt>
   12e98:	mov	r0, r5
   12e9c:	bl	11f3c <free@plt>
   12ea0:	mov	r0, #0
   12ea4:	b	12ac4 <__assert_fail@plt+0x648>
   12ea8:	ldr	r1, [pc, #1588]	; 134e4 <__assert_fail@plt+0x1068>
   12eac:	mov	r0, r8
   12eb0:	bl	11fb4 <scols_table_set_column_separator@plt>
   12eb4:	mov	r1, #1
   12eb8:	mov	r0, r8
   12ebc:	bl	120e0 <scols_table_enable_export@plt>
   12ec0:	b	12dc8 <__assert_fail@plt+0x94c>
   12ec4:	mov	r1, #1
   12ec8:	mov	r0, r8
   12ecc:	bl	11f6c <scols_table_enable_raw@plt>
   12ed0:	ldr	r1, [pc, #1552]	; 134e8 <__assert_fail@plt+0x106c>
   12ed4:	mov	r0, r8
   12ed8:	bl	11fb4 <scols_table_set_column_separator@plt>
   12edc:	b	12dc8 <__assert_fail@plt+0x94c>
   12ee0:	mov	r1, #1
   12ee4:	mov	r0, r8
   12ee8:	bl	11edc <scols_table_enable_noheadings@plt>
   12eec:	b	12dc8 <__assert_fail@plt+0x94c>
   12ef0:	ldr	r3, [pc, #1684]	; 1358c <__assert_fail@plt+0x1110>
   12ef4:	mov	r2, #5
   12ef8:	ldr	r1, [pc, #1516]	; 134ec <__assert_fail@plt+0x1070>
   12efc:	ldr	r4, [r3]
   12f00:	mov	r0, #0
   12f04:	bl	11ffc <dcgettext@plt>
   12f08:	mov	r1, r4
   12f0c:	bl	123e0 <fputs@plt>
   12f10:	mov	r2, #5
   12f14:	ldr	r1, [pc, #1492]	; 134f0 <__assert_fail@plt+0x1074>
   12f18:	mov	r0, #0
   12f1c:	bl	11ffc <dcgettext@plt>
   12f20:	ldr	r3, [pc, #1676]	; 135b4 <__assert_fail@plt+0x1138>
   12f24:	mov	r1, #1
   12f28:	mov	r6, #0
   12f2c:	ldr	r3, [r3]
   12f30:	ldr	r5, [pc, #1340]	; 13474 <__assert_fail@plt+0xff8>
   12f34:	ldr	r8, [pc, #1464]	; 134f4 <__assert_fail@plt+0x1078>
   12f38:	mov	r2, r0
   12f3c:	mov	r0, r4
   12f40:	bl	122b4 <__fprintf_chk@plt>
   12f44:	mov	r1, r4
   12f48:	mov	r0, #10
   12f4c:	bl	12350 <fputc@plt>
   12f50:	mov	r2, #5
   12f54:	ldr	r1, [pc, #1436]	; 134f8 <__assert_fail@plt+0x107c>
   12f58:	mov	r0, r6
   12f5c:	bl	11ffc <dcgettext@plt>
   12f60:	mov	r1, r4
   12f64:	bl	123e0 <fputs@plt>
   12f68:	mov	r2, #5
   12f6c:	ldr	r1, [pc, #1416]	; 134fc <__assert_fail@plt+0x1080>
   12f70:	mov	r0, r6
   12f74:	bl	11ffc <dcgettext@plt>
   12f78:	mov	r1, r4
   12f7c:	bl	123e0 <fputs@plt>
   12f80:	mov	r2, #5
   12f84:	ldr	r1, [pc, #1396]	; 13500 <__assert_fail@plt+0x1084>
   12f88:	mov	r0, r6
   12f8c:	bl	11ffc <dcgettext@plt>
   12f90:	mov	r1, r4
   12f94:	bl	123e0 <fputs@plt>
   12f98:	mov	r2, #5
   12f9c:	ldr	r1, [pc, #1376]	; 13504 <__assert_fail@plt+0x1088>
   12fa0:	mov	r0, r6
   12fa4:	bl	11ffc <dcgettext@plt>
   12fa8:	mov	r1, r4
   12fac:	bl	123e0 <fputs@plt>
   12fb0:	mov	r2, #5
   12fb4:	ldr	r1, [pc, #1356]	; 13508 <__assert_fail@plt+0x108c>
   12fb8:	mov	r0, r6
   12fbc:	bl	11ffc <dcgettext@plt>
   12fc0:	mov	r1, r4
   12fc4:	bl	123e0 <fputs@plt>
   12fc8:	mov	r2, #5
   12fcc:	ldr	r1, [pc, #1336]	; 1350c <__assert_fail@plt+0x1090>
   12fd0:	mov	r0, r6
   12fd4:	bl	11ffc <dcgettext@plt>
   12fd8:	mov	r1, r4
   12fdc:	bl	123e0 <fputs@plt>
   12fe0:	mov	r2, #5
   12fe4:	ldr	r1, [pc, #1316]	; 13510 <__assert_fail@plt+0x1094>
   12fe8:	mov	r0, r6
   12fec:	bl	11ffc <dcgettext@plt>
   12ff0:	mov	r1, r4
   12ff4:	bl	123e0 <fputs@plt>
   12ff8:	mov	r2, #5
   12ffc:	ldr	r1, [pc, #1296]	; 13514 <__assert_fail@plt+0x1098>
   13000:	mov	r0, r6
   13004:	bl	11ffc <dcgettext@plt>
   13008:	mov	r1, r4
   1300c:	bl	123e0 <fputs@plt>
   13010:	mov	r2, #5
   13014:	ldr	r1, [pc, #1276]	; 13518 <__assert_fail@plt+0x109c>
   13018:	mov	r0, r6
   1301c:	bl	11ffc <dcgettext@plt>
   13020:	mov	r1, r4
   13024:	bl	123e0 <fputs@plt>
   13028:	mov	r2, #5
   1302c:	ldr	r1, [pc, #1256]	; 1351c <__assert_fail@plt+0x10a0>
   13030:	mov	r0, r6
   13034:	bl	11ffc <dcgettext@plt>
   13038:	mov	r1, r4
   1303c:	bl	123e0 <fputs@plt>
   13040:	mov	r2, #5
   13044:	ldr	r1, [pc, #1236]	; 13520 <__assert_fail@plt+0x10a4>
   13048:	mov	r0, r6
   1304c:	bl	11ffc <dcgettext@plt>
   13050:	mov	r1, r4
   13054:	bl	123e0 <fputs@plt>
   13058:	mov	r2, #5
   1305c:	ldr	r1, [pc, #1216]	; 13524 <__assert_fail@plt+0x10a8>
   13060:	mov	r0, r6
   13064:	bl	11ffc <dcgettext@plt>
   13068:	mov	r1, r4
   1306c:	bl	123e0 <fputs@plt>
   13070:	mov	r2, #5
   13074:	ldr	r1, [pc, #1196]	; 13528 <__assert_fail@plt+0x10ac>
   13078:	mov	r0, r6
   1307c:	bl	11ffc <dcgettext@plt>
   13080:	mov	r1, r4
   13084:	bl	123e0 <fputs@plt>
   13088:	mov	r2, #5
   1308c:	ldr	r1, [pc, #1176]	; 1352c <__assert_fail@plt+0x10b0>
   13090:	mov	r0, r6
   13094:	bl	11ffc <dcgettext@plt>
   13098:	mov	r1, r4
   1309c:	bl	123e0 <fputs@plt>
   130a0:	mov	r2, #5
   130a4:	ldr	r1, [pc, #1156]	; 13530 <__assert_fail@plt+0x10b4>
   130a8:	mov	r0, r6
   130ac:	bl	11ffc <dcgettext@plt>
   130b0:	mov	r1, r4
   130b4:	bl	123e0 <fputs@plt>
   130b8:	mov	r2, #5
   130bc:	ldr	r1, [pc, #1136]	; 13534 <__assert_fail@plt+0x10b8>
   130c0:	mov	r0, r6
   130c4:	bl	11ffc <dcgettext@plt>
   130c8:	mov	r1, r4
   130cc:	bl	123e0 <fputs@plt>
   130d0:	mov	r2, #5
   130d4:	ldr	r1, [pc, #1116]	; 13538 <__assert_fail@plt+0x10bc>
   130d8:	mov	r0, r6
   130dc:	bl	11ffc <dcgettext@plt>
   130e0:	mov	r1, r4
   130e4:	bl	123e0 <fputs@plt>
   130e8:	mov	r2, #5
   130ec:	ldr	r1, [pc, #1096]	; 1353c <__assert_fail@plt+0x10c0>
   130f0:	mov	r0, r6
   130f4:	bl	11ffc <dcgettext@plt>
   130f8:	mov	r1, r4
   130fc:	bl	123e0 <fputs@plt>
   13100:	mov	r2, #5
   13104:	ldr	r1, [pc, #1076]	; 13540 <__assert_fail@plt+0x10c4>
   13108:	mov	r0, r6
   1310c:	bl	11ffc <dcgettext@plt>
   13110:	mov	r1, r4
   13114:	bl	123e0 <fputs@plt>
   13118:	mov	r2, #5
   1311c:	ldr	r1, [pc, #1056]	; 13544 <__assert_fail@plt+0x10c8>
   13120:	mov	r0, r6
   13124:	bl	11ffc <dcgettext@plt>
   13128:	mov	r1, r4
   1312c:	bl	123e0 <fputs@plt>
   13130:	mov	r2, #5
   13134:	ldr	r1, [pc, #1036]	; 13548 <__assert_fail@plt+0x10cc>
   13138:	mov	r0, r6
   1313c:	bl	11ffc <dcgettext@plt>
   13140:	mov	r1, r4
   13144:	bl	123e0 <fputs@plt>
   13148:	mov	r2, #5
   1314c:	ldr	r1, [pc, #1016]	; 1354c <__assert_fail@plt+0x10d0>
   13150:	mov	r0, r6
   13154:	bl	11ffc <dcgettext@plt>
   13158:	mov	r1, r4
   1315c:	bl	123e0 <fputs@plt>
   13160:	mov	r2, #5
   13164:	ldr	r1, [pc, #996]	; 13550 <__assert_fail@plt+0x10d4>
   13168:	mov	r0, r6
   1316c:	bl	11ffc <dcgettext@plt>
   13170:	mov	r1, r4
   13174:	bl	123e0 <fputs@plt>
   13178:	mov	r2, #5
   1317c:	ldr	r1, [pc, #976]	; 13554 <__assert_fail@plt+0x10d8>
   13180:	mov	r0, r6
   13184:	bl	11ffc <dcgettext@plt>
   13188:	mov	r1, r4
   1318c:	bl	123e0 <fputs@plt>
   13190:	mov	r1, r4
   13194:	mov	r0, #10
   13198:	bl	12350 <fputc@plt>
   1319c:	mov	r2, #5
   131a0:	ldr	r1, [pc, #944]	; 13558 <__assert_fail@plt+0x10dc>
   131a4:	mov	r0, r6
   131a8:	bl	11ffc <dcgettext@plt>
   131ac:	mov	r2, #5
   131b0:	ldr	r1, [pc, #932]	; 1355c <__assert_fail@plt+0x10e0>
   131b4:	mov	r7, r0
   131b8:	mov	r0, r6
   131bc:	bl	11ffc <dcgettext@plt>
   131c0:	ldr	r2, [pc, #920]	; 13560 <__assert_fail@plt+0x10e4>
   131c4:	mov	r3, r7
   131c8:	str	r2, [sp]
   131cc:	ldr	r1, [pc, #912]	; 13564 <__assert_fail@plt+0x10e8>
   131d0:	ldr	r2, [pc, #912]	; 13568 <__assert_fail@plt+0x10ec>
   131d4:	str	r0, [sp, #4]
   131d8:	mov	r0, #1
   131dc:	bl	12290 <__printf_chk@plt>
   131e0:	ldr	r1, [pc, #900]	; 1356c <__assert_fail@plt+0x10f0>
   131e4:	mov	r2, #5
   131e8:	mov	r0, r6
   131ec:	bl	11ffc <dcgettext@plt>
   131f0:	mov	r1, r4
   131f4:	bl	123e0 <fputs@plt>
   131f8:	ldr	r1, [r5, #4]
   131fc:	mov	r2, #5
   13200:	mov	r0, #0
   13204:	ldr	r7, [r5]
   13208:	bl	11ffc <dcgettext@plt>
   1320c:	add	r6, r6, #1
   13210:	mov	r3, r7
   13214:	mov	r2, r8
   13218:	mov	r1, #1
   1321c:	add	r5, r5, #32
   13220:	str	r0, [sp]
   13224:	mov	r0, r4
   13228:	bl	122b4 <__fprintf_chk@plt>
   1322c:	cmp	r6, #27
   13230:	bne	131f8 <__assert_fail@plt+0xd7c>
   13234:	mov	r2, #5
   13238:	ldr	r1, [pc, #816]	; 13570 <__assert_fail@plt+0x10f4>
   1323c:	mov	r0, #0
   13240:	bl	11ffc <dcgettext@plt>
   13244:	ldr	r2, [pc, #808]	; 13574 <__assert_fail@plt+0x10f8>
   13248:	mov	r1, r0
   1324c:	mov	r0, #1
   13250:	bl	12290 <__printf_chk@plt>
   13254:	mov	r0, #0
   13258:	bl	1217c <exit@plt>
   1325c:	ldr	r3, [pc, #840]	; 135ac <__assert_fail@plt+0x1130>
   13260:	mov	r2, #5
   13264:	ldr	r1, [pc, #780]	; 13578 <__assert_fail@plt+0x10fc>
   13268:	mov	r0, #0
   1326c:	ldr	r4, [r3]
   13270:	bl	11ffc <dcgettext@plt>
   13274:	ldr	r3, [pc, #824]	; 135b4 <__assert_fail@plt+0x1138>
   13278:	mov	r1, #1
   1327c:	ldr	r3, [r3]
   13280:	mov	r2, r0
   13284:	mov	r0, r4
   13288:	bl	122b4 <__fprintf_chk@plt>
   1328c:	mov	r0, #1
   13290:	bl	1217c <exit@plt>
   13294:	mov	r2, r8
   13298:	mov	r1, r9
   1329c:	bl	1223c <tsearch@plt>
   132a0:	b	12cf4 <__assert_fail@plt+0x878>
   132a4:	ldr	r8, [pc, #548]	; 134d0 <__assert_fail@plt+0x1054>
   132a8:	mov	r6, #0
   132ac:	add	r7, r5, #16
   132b0:	b	132c4 <__assert_fail@plt+0xe48>
   132b4:	mov	r2, r8
   132b8:	mov	r1, r7
   132bc:	bl	1223c <tsearch@plt>
   132c0:	add	r6, r6, #1
   132c4:	ldr	r3, [r5, #44]	; 0x2c
   132c8:	cmp	r6, r3
   132cc:	bcs	12d18 <__assert_fail@plt+0x89c>
   132d0:	ldr	r3, [r5, #40]	; 0x28
   132d4:	mov	r0, r5
   132d8:	lsl	r9, r6, #2
   132dc:	ldr	r1, [r3, r6, lsl #2]
   132e0:	bl	14914 <__assert_fail@plt+0x2498>
   132e4:	cmp	r0, #0
   132e8:	bne	132b4 <__assert_fail@plt+0xe38>
   132ec:	ldrb	r3, [r5, #56]	; 0x38
   132f0:	tst	r3, #2
   132f4:	beq	132c0 <__assert_fail@plt+0xe44>
   132f8:	mov	r2, #5
   132fc:	ldr	r1, [pc, #632]	; 1357c <__assert_fail@plt+0x1100>
   13300:	bl	11ffc <dcgettext@plt>
   13304:	ldr	r3, [r5, #40]	; 0x28
   13308:	ldr	r1, [r3, r9]
   1330c:	bl	121c4 <warnx@plt>
   13310:	mov	r0, #1
   13314:	b	12ac4 <__assert_fail@plt+0x648>
   13318:	ldr	r2, [pc, #360]	; 13488 <__assert_fail@plt+0x100c>
   1331c:	mov	r3, #0
   13320:	str	r3, [r2, #4]!
   13324:	add	r3, r3, #1
   13328:	cmp	r3, #27
   1332c:	bne	13320 <__assert_fail@plt+0xea4>
   13330:	ldr	r2, [sp, #20]
   13334:	str	r3, [r4, #12]
   13338:	cmp	r2, #0
   1333c:	bne	12c28 <__assert_fail@plt+0x7ac>
   13340:	b	12c58 <__assert_fail@plt+0x7dc>
   13344:	ldr	r3, [r8, r3, lsl #2]
   13348:	mov	r1, #44	; 0x2c
   1334c:	mov	r0, r3
   13350:	str	r3, [sp, #16]
   13354:	bl	121a0 <strchr@plt>
   13358:	cmp	r0, #0
   1335c:	bne	13b54 <__assert_fail@plt+0x16d8>
   13360:	ldrb	r3, [r5, #56]	; 0x38
   13364:	mov	r2, #6
   13368:	str	r2, [r4, #232]	; 0xe8
   1336c:	orr	r3, r3, #2
   13370:	strb	r3, [r5, #56]	; 0x38
   13374:	b	12be8 <__assert_fail@plt+0x76c>
   13378:	ldr	r0, [sp, #24]
   1337c:	bl	11f0c <utmpxname@plt>
   13380:	cmp	r0, #0
   13384:	blt	13a1c <__assert_fail@plt+0x15a0>
   13388:	mov	r1, r5
   1338c:	add	r0, r5, #4
   13390:	bl	146f8 <__assert_fail@plt+0x227c>
   13394:	cmp	r0, #0
   13398:	blt	136ac <__assert_fail@plt+0x1230>
   1339c:	ldr	r0, [r4, #12]
   133a0:	cmp	r0, #0
   133a4:	bne	12c94 <__assert_fail@plt+0x818>
   133a8:	b	12ccc <__assert_fail@plt+0x850>
   133ac:	mov	r3, #32
   133b0:	str	r3, [r5, #44]	; 0x2c
   133b4:	mov	r1, #128	; 0x80
   133b8:	mov	r0, #1
   133bc:	bl	11e34 <calloc@plt>
   133c0:	cmp	r0, #0
   133c4:	bne	13438 <__assert_fail@plt+0xfbc>
   133c8:	mov	r2, #128	; 0x80
   133cc:	ldr	r1, [pc, #136]	; 1345c <__assert_fail@plt+0xfe0>
   133d0:	mov	r0, #1
   133d4:	bl	12080 <err@plt>
   133d8:	ldr	r0, [sp, #28]
   133dc:	bl	11f0c <utmpxname@plt>
   133e0:	cmp	r0, #0
   133e4:	blt	1393c <__assert_fail@plt+0x14c0>
   133e8:	add	r1, r5, #8
   133ec:	add	r0, r5, #12
   133f0:	bl	146f8 <__assert_fail@plt+0x227c>
   133f4:	cmp	r0, #0
   133f8:	bge	12ccc <__assert_fail@plt+0x850>
   133fc:	bl	121f4 <__errno_location@plt>
   13400:	ldr	r3, [r0]
   13404:	cmp	r3, #13
   13408:	beq	12ccc <__assert_fail@plt+0x850>
   1340c:	ldr	r2, [sp, #28]
   13410:	ldr	r1, [pc, #360]	; 13580 <__assert_fail@plt+0x1104>
   13414:	mov	r0, #1
   13418:	bl	12080 <err@plt>
   1341c:	mov	sl, r0
   13420:	mov	r0, r8
   13424:	bl	1214c <scols_unref_table@plt>
   13428:	str	sl, [r4, #8]
   1342c:	b	12e4c <__assert_fail@plt+0x9d0>
   13430:	mov	r0, #1
   13434:	b	12ac4 <__assert_fail@plt+0x648>
   13438:	ldr	r3, [sp, #16]
   1343c:	str	r0, [r5, #40]	; 0x28
   13440:	cmp	r3, #0
   13444:	moveq	r6, r3
   13448:	beq	13a40 <__assert_fail@plt+0x15c4>
   1344c:	mov	r6, #0
   13450:	ldr	r0, [sp, #16]
   13454:	b	135e4 <__assert_fail@plt+0x1168>
   13458:			; <UNDEFINED> instruction: 0x0002bcb0
   1345c:	andeq	r9, r1, r8, asr #20
   13460:	strdeq	r9, [r1], -r0
   13464:	andeq	ip, r2, r0, lsr r0
   13468:	andeq	r9, r1, r4, lsr #23
   1346c:			; <UNDEFINED> instruction: 0x00019bb8
   13470:	ldrdeq	r4, [r1], -ip
   13474:	andeq	r9, r1, r8, lsr #5
   13478:	andeq	sl, r1, r8, lsl r3
   1347c:	andeq	r9, r1, r4, ror fp
   13480:	andeq	r9, r1, r4, lsl #23
   13484:	andeq	r9, r1, r8, asr #15
   13488:	andeq	ip, r2, ip, lsr r0
   1348c:	andeq	ip, r2, r8, lsr #32
   13490:	andeq	sl, r1, r4, lsl #5
   13494:	andeq	sl, r1, r8, lsl #5
   13498:	muleq	r1, r0, r2
   1349c:	muleq	r1, r8, r2
   134a0:	andeq	sl, r1, r0, ror r2
   134a4:	andeq	lr, r0, r0, ror #20
   134a8:	andeq	sl, r1, ip, ror r2
   134ac:	andeq	sl, r1, ip, ror #4
   134b0:	andeq	r0, r0, r7, ror #7
   134b4:	andeq	sl, r1, r8, ror r2
   134b8:			; <UNDEFINED> instruction: 0x0001a2b0
   134bc:			; <UNDEFINED> instruction: 0x0001a2bc
   134c0:	ldrdeq	sl, [r1], -r0
   134c4:	andeq	ip, r2, r8, lsl r0
   134c8:	ldrdeq	r3, [r1], -r8
   134cc:	andeq	ip, r2, r4, asr #32
   134d0:	andeq	r3, r1, r8, lsr #25
   134d4:	andeq	r9, r1, r8, lsl #19
   134d8:	andeq	ip, r2, r0, asr #32
   134dc:	andeq	r4, r1, r8, asr #6
   134e0:	andeq	r3, r1, ip, asr #25
   134e4:	andeq	r9, r1, ip, asr #24
   134e8:	andeq	r9, r1, r4, ror #23
   134ec:	strdeq	r9, [r1], -r0
   134f0:	strdeq	r9, [r1], -ip
   134f4:	andeq	sl, r1, r8, lsr r2
   134f8:	andeq	r9, r1, r8, lsl ip
   134fc:	andeq	r9, r1, r0, asr ip
   13500:	andeq	r9, r1, ip, asr ip
   13504:	andeq	r9, r1, r0, lsr #25
   13508:	andeq	r9, r1, ip, ror #25
   1350c:	andeq	r9, r1, r0, lsr sp
   13510:	andeq	r9, r1, ip, ror sp
   13514:			; <UNDEFINED> instruction: 0x00019db8
   13518:	andeq	r9, r1, r4, lsl #28
   1351c:	andeq	r9, r1, r0, asr lr
   13520:	andeq	r9, r1, ip, lsl #29
   13524:	ldrdeq	r9, [r1], -r8
   13528:	andeq	r9, r1, r8, lsl #30
   1352c:	andeq	r9, r1, ip, lsr pc
   13530:	andeq	r9, r1, r4, ror pc
   13534:	andeq	r9, r1, r4, lsr #31
   13538:	strdeq	r9, [r1], -r4
   1353c:	andeq	sl, r1, r4, lsr #32
   13540:	andeq	sl, r1, r8, asr r0
   13544:	andeq	sl, r1, r0, lsr #1
   13548:	ldrdeq	sl, [r1], -r4
   1354c:	andeq	sl, r1, r8, lsl #2
   13550:	andeq	sl, r1, r0, asr r1
   13554:	andeq	sl, r1, ip, lsl #3
   13558:	andeq	sl, r1, r8, asr #3
   1355c:	ldrdeq	sl, [r1], -ip
   13560:	andeq	sl, r1, ip, lsl #4
   13564:	strdeq	sl, [r1], -r8
   13568:	andeq	sl, r1, ip, ror #3
   1356c:	andeq	sl, r1, ip, lsl r2
   13570:	andeq	sl, r1, r4, asr #4
   13574:	andeq	sl, r1, r0, ror #4
   13578:	strdeq	sl, [r1], -r0
   1357c:	andeq	sl, r1, r0, ror r3
   13580:			; <UNDEFINED> instruction: 0x000199bc
   13584:	andeq	r9, r1, r8, lsr #5
   13588:	andeq	sl, r1, r4, lsr #7
   1358c:	andeq	ip, r2, r4, lsr #32
   13590:			; <UNDEFINED> instruction: 0x0001a3b4
   13594:	andeq	sl, r1, r4, asr #7
   13598:	andeq	sl, r1, ip, asr #7
   1359c:	andeq	sl, r1, r0, ror #7
   135a0:	andeq	sl, r1, r8, ror #7
   135a4:	andeq	r4, pc, r0, asr #4
   135a8:	strdeq	sl, [r1], -r0
   135ac:	andeq	ip, r2, r0, lsr #32
   135b0:	andeq	r9, r1, r4, asr #23
   135b4:	andeq	ip, r2, r0, lsl r0
   135b8:	andeq	sl, r1, r0, lsl #8
   135bc:	muleq	r1, r4, fp
   135c0:	andeq	r9, r1, r8, ror #23
   135c4:	andeq	r9, r1, r0, lsr #12
   135c8:	andeq	sl, r1, ip, ror #6
   135cc:	andeq	sl, r1, r0, lsr r3
   135d0:	andeq	sl, r1, r4, lsl #7
   135d4:	strdeq	r9, [r1], -r8
   135d8:	andeq	r9, r1, r8, asr #20
   135dc:	mov	r6, sl
   135e0:	mov	r0, #0
   135e4:	ldr	r1, [pc, #-36]	; 135c8 <__assert_fail@plt+0x114c>
   135e8:	bl	122d8 <strtok@plt>
   135ec:	subs	r7, r0, #0
   135f0:	beq	13a2c <__assert_fail@plt+0x15b0>
   135f4:	ldrsb	r3, [r7]
   135f8:	cmp	r3, #0
   135fc:	beq	1361c <__assert_fail@plt+0x11a0>
   13600:	mov	r2, #0
   13604:	add	r1, sp, #64	; 0x40
   13608:	bl	12188 <strtoul@plt>
   1360c:	ldr	r3, [sp, #64]	; 0x40
   13610:	ldrsb	r3, [r3]
   13614:	cmp	r3, #0
   13618:	beq	13680 <__assert_fail@plt+0x1204>
   1361c:	ldr	r8, [r5, #40]	; 0x28
   13620:	add	sl, r6, #1
   13624:	add	r9, r8, r6, lsl #2
   13628:	mov	r0, r7
   1362c:	bl	12014 <strdup@plt>
   13630:	cmp	r0, #0
   13634:	beq	13b8c <__assert_fail@plt+0x1710>
   13638:	ldr	r3, [r5, #44]	; 0x2c
   1363c:	str	r0, [r9]
   13640:	cmp	r3, sl
   13644:	bne	135dc <__assert_fail@plt+0x1160>
   13648:	add	r3, sl, #32
   1364c:	str	r3, [r5, #44]	; 0x2c
   13650:	lsl	r6, r3, #2
   13654:	mov	r0, r8
   13658:	mov	r1, r6
   1365c:	bl	12044 <realloc@plt>
   13660:	adds	r3, r6, #0
   13664:	movne	r3, #1
   13668:	cmp	r0, #0
   1366c:	movne	r3, #0
   13670:	cmp	r3, #0
   13674:	bne	13b98 <__assert_fail@plt+0x171c>
   13678:	str	r0, [r5, #40]	; 0x28
   1367c:	b	135dc <__assert_fail@plt+0x1160>
   13680:	bl	11ec4 <getpwuid@plt>
   13684:	cmp	r0, #0
   13688:	beq	13b4c <__assert_fail@plt+0x16d0>
   1368c:	ldr	r7, [r0]
   13690:	ldr	r8, [r5, #40]	; 0x28
   13694:	cmp	r7, #0
   13698:	add	r9, r8, r6, lsl #2
   1369c:	add	sl, r6, #1
   136a0:	moveq	r0, r7
   136a4:	beq	13638 <__assert_fail@plt+0x11bc>
   136a8:	b	13628 <__assert_fail@plt+0x11ac>
   136ac:	bl	121f4 <__errno_location@plt>
   136b0:	ldr	r3, [r0]
   136b4:	cmp	r3, #13
   136b8:	beq	1339c <__assert_fail@plt+0xf20>
   136bc:	ldr	r2, [sp, #24]
   136c0:	ldr	r1, [pc, #-328]	; 13580 <__assert_fail@plt+0x1104>
   136c4:	mov	r0, #1
   136c8:	bl	12080 <err@plt>
   136cc:	mov	r0, #0
   136d0:	ldr	sl, [r4, #8]
   136d4:	bl	1238c <scols_new_iter@plt>
   136d8:	mov	r1, #0
   136dc:	mov	r6, #0
   136e0:	mov	r9, r0
   136e4:	mov	r0, sl
   136e8:	bl	12314 <scols_table_get_line@plt>
   136ec:	str	r5, [sp, #16]
   136f0:	mov	fp, r0
   136f4:	b	13764 <__assert_fail@plt+0x12e8>
   136f8:	mov	r1, r6
   136fc:	mov	r0, fp
   13700:	bl	121e8 <scols_line_get_cell@plt>
   13704:	ldr	r1, [r7], #4
   13708:	mov	r2, #5
   1370c:	ldr	r3, [pc, #-400]	; 13584 <__assert_fail@plt+0x1108>
   13710:	add	r1, r3, r1, lsl r2
   13714:	ldr	r1, [r1, #8]
   13718:	mov	r5, r0
   1371c:	mov	r0, r8
   13720:	bl	11ffc <dcgettext@plt>
   13724:	mov	r8, r0
   13728:	mov	r0, r5
   1372c:	bl	12260 <scols_cell_get_data@plt>
   13730:	subs	r5, r0, #0
   13734:	beq	13760 <__assert_fail@plt+0x12e4>
   13738:	mov	r0, r8
   1373c:	bl	12194 <strlen@plt>
   13740:	mov	r1, #32
   13744:	str	r1, [sp]
   13748:	str	r5, [sp, #4]
   1374c:	mov	r2, r8
   13750:	ldr	r1, [pc, #-464]	; 13588 <__assert_fail@plt+0x110c>
   13754:	rsb	r3, r0, #35	; 0x23
   13758:	mov	r0, #1
   1375c:	bl	12290 <__printf_chk@plt>
   13760:	add	r6, r6, #1
   13764:	add	r2, sp, #64	; 0x40
   13768:	mov	r1, r9
   1376c:	mov	r0, sl
   13770:	bl	1220c <scols_table_next_column@plt>
   13774:	subs	r8, r0, #0
   13778:	beq	136f8 <__assert_fail@plt+0x127c>
   1377c:	ldr	r7, [pc, #-504]	; 1358c <__assert_fail@plt+0x1110>
   13780:	mov	r0, r9
   13784:	ldr	r5, [sp, #16]
   13788:	bl	11f24 <scols_free_iter@plt>
   1378c:	mov	r2, #5
   13790:	ldr	r1, [pc, #-520]	; 13590 <__assert_fail@plt+0x1114>
   13794:	mov	r0, #0
   13798:	ldr	r6, [r7]
   1379c:	bl	11ffc <dcgettext@plt>
   137a0:	mov	r1, #1
   137a4:	mov	r2, r0
   137a8:	mov	r0, r6
   137ac:	bl	122b4 <__fprintf_chk@plt>
   137b0:	ldr	r1, [r5, #52]	; 0x34
   137b4:	ldr	r6, [r5, #20]
   137b8:	cmp	r1, #0
   137bc:	ldr	fp, [r5, #48]	; 0x30
   137c0:	beq	13b38 <__assert_fail@plt+0x16bc>
   137c4:	mov	r2, #0
   137c8:	add	r0, sp, #32
   137cc:	bl	12428 <sd_journal_open_directory@plt>
   137d0:	mov	r2, r6
   137d4:	ldr	r1, [pc, #-584]	; 13594 <__assert_fail@plt+0x1118>
   137d8:	add	r0, sp, #36	; 0x24
   137dc:	bl	13d68 <__assert_fail@plt+0x18ec>
   137e0:	mov	r2, #0
   137e4:	ldrd	r0, [sp, #32]
   137e8:	bl	12038 <sd_journal_add_match@plt>
   137ec:	ldr	r0, [sp, #32]
   137f0:	bl	11e64 <sd_journal_seek_tail@plt>
   137f4:	mov	r2, #3
   137f8:	mov	r3, #0
   137fc:	ldr	r0, [sp, #32]
   13800:	bl	12098 <sd_journal_previous_skip@plt>
   13804:	ldr	r8, [pc, #-628]	; 13598 <__assert_fail@plt+0x111c>
   13808:	b	138e4 <__assert_fail@plt+0x1468>
   1380c:	add	r3, sp, #56	; 0x38
   13810:	add	r2, sp, #44	; 0x2c
   13814:	ldr	r1, [pc, #-640]	; 1359c <__assert_fail@plt+0x1120>
   13818:	ldr	r0, [sp, #32]
   1381c:	bl	11fa8 <sd_journal_get_data@plt>
   13820:	cmp	r0, #0
   13824:	blt	13900 <__assert_fail@plt+0x1484>
   13828:	add	r3, sp, #60	; 0x3c
   1382c:	add	r2, sp, #48	; 0x30
   13830:	ldr	r1, [pc, #-664]	; 135a0 <__assert_fail@plt+0x1124>
   13834:	ldr	r0, [sp, #32]
   13838:	bl	11fa8 <sd_journal_get_data@plt>
   1383c:	cmp	r0, #0
   13840:	blt	13900 <__assert_fail@plt+0x1484>
   13844:	add	r1, sp, #64	; 0x40
   13848:	ldr	r0, [sp, #32]
   1384c:	bl	12278 <sd_journal_get_realtime_usec@plt>
   13850:	ldr	r2, [pc, #-692]	; 135a4 <__assert_fail@plt+0x1128>
   13854:	mov	r3, #0
   13858:	ldrd	r0, [sp, #64]	; 0x40
   1385c:	bl	190a4 <__assert_fail@plt+0x6c28>
   13860:	mov	r1, r0
   13864:	mov	r0, fp
   13868:	bl	13e5c <__assert_fail@plt+0x19e0>
   1386c:	mov	r1, #61	; 0x3d
   13870:	mov	r6, r0
   13874:	ldr	r0, [sp, #40]	; 0x28
   13878:	bl	121a0 <strchr@plt>
   1387c:	mov	r1, #61	; 0x3d
   13880:	add	sl, r0, #1
   13884:	ldr	r0, [sp, #44]	; 0x2c
   13888:	str	sl, [sp, #40]	; 0x28
   1388c:	bl	121a0 <strchr@plt>
   13890:	mov	r1, #61	; 0x3d
   13894:	add	r9, r0, #1
   13898:	ldr	r0, [sp, #48]	; 0x30
   1389c:	str	r9, [sp, #44]	; 0x2c
   138a0:	bl	121a0 <strchr@plt>
   138a4:	mov	r1, #1
   138a8:	mov	r3, r6
   138ac:	ldr	r2, [pc, #-780]	; 135a8 <__assert_fail@plt+0x112c>
   138b0:	str	sl, [sp]
   138b4:	str	r9, [sp, #4]
   138b8:	add	ip, r0, r1
   138bc:	str	ip, [sp, #8]
   138c0:	ldr	r0, [r7]
   138c4:	str	ip, [sp, #48]	; 0x30
   138c8:	bl	122b4 <__fprintf_chk@plt>
   138cc:	mov	r0, r6
   138d0:	bl	11f3c <free@plt>
   138d4:	ldr	r0, [sp, #32]
   138d8:	bl	1226c <sd_journal_next@plt>
   138dc:	cmp	r0, #0
   138e0:	beq	13900 <__assert_fail@plt+0x1484>
   138e4:	add	r3, sp, #52	; 0x34
   138e8:	add	r2, sp, #40	; 0x28
   138ec:	mov	r1, r8
   138f0:	ldr	r0, [sp, #32]
   138f4:	bl	11fa8 <sd_journal_get_data@plt>
   138f8:	cmp	r0, #0
   138fc:	bge	1380c <__assert_fail@plt+0x1390>
   13900:	ldr	r0, [sp, #36]	; 0x24
   13904:	bl	11f3c <free@plt>
   13908:	ldr	r0, [sp, #32]
   1390c:	bl	11e4c <sd_journal_flush_matches@plt>
   13910:	ldr	r0, [sp, #32]
   13914:	bl	12110 <sd_journal_close@plt>
   13918:	ldr	r1, [r7]
   1391c:	mov	r0, #10
   13920:	bl	12350 <fputc@plt>
   13924:	b	12e4c <__assert_fail@plt+0x9d0>
   13928:	mov	r0, #2
   1392c:	b	12d9c <__assert_fail@plt+0x920>
   13930:	mov	r1, #1
   13934:	bl	11edc <scols_table_enable_noheadings@plt>
   13938:	b	12d30 <__assert_fail@plt+0x8b4>
   1393c:	bl	121f4 <__errno_location@plt>
   13940:	ldr	r0, [r0]
   13944:	rsb	r0, r0, #0
   13948:	b	133f4 <__assert_fail@plt+0xf78>
   1394c:	ldr	r5, [pc, #-936]	; 135ac <__assert_fail@plt+0x1130>
   13950:	mov	r2, #5
   13954:	ldr	r1, [pc, #-940]	; 135b0 <__assert_fail@plt+0x1134>
   13958:	mov	r0, #0
   1395c:	ldr	sl, [r5]
   13960:	bl	11ffc <dcgettext@plt>
   13964:	ldr	r3, [pc, #-952]	; 135b4 <__assert_fail@plt+0x1138>
   13968:	mov	r1, #1
   1396c:	sub	r4, r6, #4
   13970:	ldr	r3, [r3]
   13974:	add	r6, r6, #56	; 0x38
   13978:	ldr	r7, [pc, #-968]	; 135b8 <__assert_fail@plt+0x113c>
   1397c:	ldr	r9, [pc, #-968]	; 135bc <__assert_fail@plt+0x1140>
   13980:	ldr	r8, [pc, #-968]	; 135c0 <__assert_fail@plt+0x1144>
   13984:	mov	r2, r0
   13988:	mov	r0, sl
   1398c:	bl	122b4 <__fprintf_chk@plt>
   13990:	ldr	r0, [r4, #4]!
   13994:	cmp	r0, #0
   13998:	beq	139f0 <__assert_fail@plt+0x1574>
   1399c:	cmp	r0, #97	; 0x61
   139a0:	beq	13a04 <__assert_fail@plt+0x1588>
   139a4:	ldr	r2, [pc, #-1000]	; 135c4 <__assert_fail@plt+0x1148>
   139a8:	b	139bc <__assert_fail@plt+0x1540>
   139ac:	add	r2, r2, #16
   139b0:	ldr	r1, [r2, #12]
   139b4:	cmp	r0, r1
   139b8:	beq	13a08 <__assert_fail@plt+0x158c>
   139bc:	ldr	r3, [r2, #16]
   139c0:	cmp	r3, #0
   139c4:	bne	139ac <__assert_fail@plt+0x1530>
   139c8:	sub	r3, r0, #33	; 0x21
   139cc:	cmp	r3, #93	; 0x5d
   139d0:	bhi	139e8 <__assert_fail@plt+0x156c>
   139d4:	mov	r3, r0
   139d8:	mov	r2, r8
   139dc:	mov	r1, #1
   139e0:	ldr	r0, [r5]
   139e4:	bl	122b4 <__fprintf_chk@plt>
   139e8:	cmp	r4, r6
   139ec:	bne	13990 <__assert_fail@plt+0x1514>
   139f0:	ldr	r1, [r5]
   139f4:	mov	r0, #10
   139f8:	bl	12350 <fputc@plt>
   139fc:	mov	r0, #1
   13a00:	bl	1217c <exit@plt>
   13a04:	mov	r3, r9
   13a08:	mov	r2, r7
   13a0c:	mov	r1, #1
   13a10:	ldr	r0, [r5]
   13a14:	bl	122b4 <__fprintf_chk@plt>
   13a18:	b	139e8 <__assert_fail@plt+0x156c>
   13a1c:	bl	121f4 <__errno_location@plt>
   13a20:	ldr	r0, [r0]
   13a24:	rsb	r0, r0, #0
   13a28:	b	13394 <__assert_fail@plt+0xf18>
   13a2c:	ldrb	r3, [r5, #56]	; 0x38
   13a30:	cmp	fp, #0
   13a34:	orr	r3, r3, #4
   13a38:	strb	r3, [r5, #56]	; 0x38
   13a3c:	beq	13b24 <__assert_fail@plt+0x16a8>
   13a40:	ldr	r8, [pc, #-1152]	; 135c8 <__assert_fail@plt+0x114c>
   13a44:	mov	r0, fp
   13a48:	mov	r1, r8
   13a4c:	bl	122d8 <strtok@plt>
   13a50:	subs	r7, r0, #0
   13a54:	beq	13b18 <__assert_fail@plt+0x169c>
   13a58:	ldrsb	r3, [r7]
   13a5c:	cmp	r3, #0
   13a60:	beq	13a80 <__assert_fail@plt+0x1604>
   13a64:	mov	r2, #0
   13a68:	add	r1, sp, #64	; 0x40
   13a6c:	bl	12188 <strtoul@plt>
   13a70:	ldr	r3, [sp, #64]	; 0x40
   13a74:	ldrsb	r3, [r3]
   13a78:	cmp	r3, #0
   13a7c:	beq	13b2c <__assert_fail@plt+0x16b0>
   13a80:	mov	r0, r7
   13a84:	bl	1244c <getgrnam@plt>
   13a88:	mov	sl, r0
   13a8c:	cmp	sl, #0
   13a90:	mov	r0, #0
   13a94:	movne	r9, r0
   13a98:	bne	13aa4 <__assert_fail@plt+0x1628>
   13a9c:	b	13a48 <__assert_fail@plt+0x15cc>
   13aa0:	add	r9, r9, #4
   13aa4:	ldr	r3, [sl, #12]
   13aa8:	ldr	r0, [r3, r9]
   13aac:	cmp	r0, #0
   13ab0:	beq	13a48 <__assert_fail@plt+0x15cc>
   13ab4:	ldr	fp, [r5, #40]	; 0x28
   13ab8:	bl	12014 <strdup@plt>
   13abc:	add	r6, r6, #1
   13ac0:	lsl	r7, r6, #2
   13ac4:	sub	r7, r7, #4
   13ac8:	cmp	r0, #0
   13acc:	beq	13b8c <__assert_fail@plt+0x1710>
   13ad0:	ldr	r3, [r5, #44]	; 0x2c
   13ad4:	str	r0, [fp, r7]
   13ad8:	cmp	r6, r3
   13adc:	bne	13aa0 <__assert_fail@plt+0x1624>
   13ae0:	add	r3, r6, #32
   13ae4:	str	r3, [r5, #44]	; 0x2c
   13ae8:	lsl	r7, r3, #2
   13aec:	mov	r0, fp
   13af0:	mov	r1, r7
   13af4:	bl	12044 <realloc@plt>
   13af8:	adds	r3, r7, #0
   13afc:	movne	r3, #1
   13b00:	cmp	r0, #0
   13b04:	movne	r3, #0
   13b08:	cmp	r3, #0
   13b0c:	bne	13ba8 <__assert_fail@plt+0x172c>
   13b10:	str	r0, [r5, #40]	; 0x28
   13b14:	b	13aa0 <__assert_fail@plt+0x1624>
   13b18:	ldrb	r3, [r5, #56]	; 0x38
   13b1c:	orr	r3, r3, #4
   13b20:	strb	r3, [r5, #56]	; 0x38
   13b24:	str	r6, [r5, #44]	; 0x2c
   13b28:	b	12cd8 <__assert_fail@plt+0x85c>
   13b2c:	bl	12440 <getgrgid@plt>
   13b30:	mov	sl, r0
   13b34:	b	13a8c <__assert_fail@plt+0x1610>
   13b38:	mov	r1, #1
   13b3c:	add	r0, sp, #32
   13b40:	bl	11ff0 <sd_journal_open@plt>
   13b44:	b	137d0 <__assert_fail@plt+0x1354>
   13b48:	bl	1401c <__assert_fail@plt+0x1ba0>
   13b4c:	mov	sl, r6
   13b50:	b	135dc <__assert_fail@plt+0x1160>
   13b54:	ldr	r1, [pc, #-1424]	; 135cc <__assert_fail@plt+0x1150>
   13b58:	mov	r2, #5
   13b5c:	mov	r0, #0
   13b60:	bl	11ffc <dcgettext@plt>
   13b64:	mov	r1, r0
   13b68:	mov	r0, #1
   13b6c:	bl	12320 <errx@plt>
   13b70:	ldr	r1, [pc, #-1448]	; 135d0 <__assert_fail@plt+0x1154>
   13b74:	mov	r2, #5
   13b78:	bl	11ffc <dcgettext@plt>
   13b7c:	mov	r1, r0
   13b80:	mov	r0, #1
   13b84:	bl	12080 <err@plt>
   13b88:	bl	1202c <__stack_chk_fail@plt>
   13b8c:	ldr	r1, [pc, #-1472]	; 135d4 <__assert_fail@plt+0x1158>
   13b90:	mov	r0, #1
   13b94:	bl	12080 <err@plt>
   13b98:	mov	r2, r6
   13b9c:	ldr	r1, [pc, #-1484]	; 135d8 <__assert_fail@plt+0x115c>
   13ba0:	mov	r0, #1
   13ba4:	bl	12080 <err@plt>
   13ba8:	mov	r2, r7
   13bac:	ldr	r1, [pc, #-1500]	; 135d8 <__assert_fail@plt+0x115c>
   13bb0:	mov	r0, #1
   13bb4:	bl	12080 <err@plt>
   13bb8:	mov	fp, #0
   13bbc:	mov	lr, #0
   13bc0:	pop	{r1}		; (ldr r1, [sp], #4)
   13bc4:	mov	r2, sp
   13bc8:	push	{r2}		; (str r2, [sp, #-4]!)
   13bcc:	push	{r0}		; (str r0, [sp, #-4]!)
   13bd0:	ldr	ip, [pc, #16]	; 13be8 <__assert_fail@plt+0x176c>
   13bd4:	push	{ip}		; (str ip, [sp, #-4]!)
   13bd8:	ldr	r0, [pc, #12]	; 13bec <__assert_fail@plt+0x1770>
   13bdc:	ldr	r3, [pc, #12]	; 13bf0 <__assert_fail@plt+0x1774>
   13be0:	bl	12128 <__libc_start_main@plt>
   13be4:	bl	123f8 <abort@plt>
   13be8:	andeq	r9, r1, r8, ror r2
   13bec:	andeq	r2, r1, r8, lsl #9
   13bf0:	andeq	r9, r1, r8, lsl r2
   13bf4:	ldr	r3, [pc, #20]	; 13c10 <__assert_fail@plt+0x1794>
   13bf8:	ldr	r2, [pc, #20]	; 13c14 <__assert_fail@plt+0x1798>
   13bfc:	add	r3, pc, r3
   13c00:	ldr	r2, [r3, r2]
   13c04:	cmp	r2, #0
   13c08:	bxeq	lr
   13c0c:	b	12158 <__gmon_start__@plt>
   13c10:	andeq	r8, r1, r8, asr #3
   13c14:	andeq	r0, r0, r0, lsr r2
   13c18:	ldr	r0, [pc, #24]	; 13c38 <__assert_fail@plt+0x17bc>
   13c1c:	ldr	r3, [pc, #24]	; 13c3c <__assert_fail@plt+0x17c0>
   13c20:	cmp	r3, r0
   13c24:	bxeq	lr
   13c28:	ldr	r3, [pc, #16]	; 13c40 <__assert_fail@plt+0x17c4>
   13c2c:	cmp	r3, #0
   13c30:	bxeq	lr
   13c34:	bx	r3
   13c38:	andeq	ip, r2, ip
   13c3c:	andeq	ip, r2, ip
   13c40:	andeq	r0, r0, r0
   13c44:	ldr	r0, [pc, #36]	; 13c70 <__assert_fail@plt+0x17f4>
   13c48:	ldr	r1, [pc, #36]	; 13c74 <__assert_fail@plt+0x17f8>
   13c4c:	sub	r1, r1, r0
   13c50:	asr	r1, r1, #2
   13c54:	add	r1, r1, r1, lsr #31
   13c58:	asrs	r1, r1, #1
   13c5c:	bxeq	lr
   13c60:	ldr	r3, [pc, #16]	; 13c78 <__assert_fail@plt+0x17fc>
   13c64:	cmp	r3, #0
   13c68:	bxeq	lr
   13c6c:	bx	r3
   13c70:	andeq	ip, r2, ip
   13c74:	andeq	ip, r2, ip
   13c78:	andeq	r0, r0, r0
   13c7c:	push	{r4, lr}
   13c80:	ldr	r4, [pc, #24]	; 13ca0 <__assert_fail@plt+0x1824>
   13c84:	ldrb	r3, [r4]
   13c88:	cmp	r3, #0
   13c8c:	popne	{r4, pc}
   13c90:	bl	13c18 <__assert_fail@plt+0x179c>
   13c94:	mov	r3, #1
   13c98:	strb	r3, [r4]
   13c9c:	pop	{r4, pc}
   13ca0:	andeq	ip, r2, ip, lsr #32
   13ca4:	b	13c44 <__assert_fail@plt+0x17c8>
   13ca8:	ldr	r2, [r0, #4]
   13cac:	ldr	r3, [r1, #4]
   13cb0:	cmp	r2, r3
   13cb4:	bhi	13cc4 <__assert_fail@plt+0x1848>
   13cb8:	mvncc	r0, #0
   13cbc:	movcs	r0, #0
   13cc0:	bx	lr
   13cc4:	mov	r0, #1
   13cc8:	bx	lr
   13ccc:	push	{r4, lr}
   13cd0:	mov	r4, r0
   13cd4:	ldr	r0, [r0]
   13cd8:	bl	11f3c <free@plt>
   13cdc:	ldr	r0, [r4, #8]
   13ce0:	bl	11f3c <free@plt>
   13ce4:	ldr	r0, [r4, #16]
   13ce8:	bl	11f3c <free@plt>
   13cec:	ldr	r0, [r4, #36]	; 0x24
   13cf0:	bl	11f3c <free@plt>
   13cf4:	ldr	r0, [r4, #44]	; 0x2c
   13cf8:	bl	11f3c <free@plt>
   13cfc:	ldr	r0, [r4, #48]	; 0x30
   13d00:	bl	11f3c <free@plt>
   13d04:	ldr	r0, [r4, #56]	; 0x38
   13d08:	bl	11f3c <free@plt>
   13d0c:	ldr	r0, [r4, #60]	; 0x3c
   13d10:	bl	11f3c <free@plt>
   13d14:	ldr	r0, [r4, #68]	; 0x44
   13d18:	bl	11f3c <free@plt>
   13d1c:	ldr	r0, [r4, #72]	; 0x48
   13d20:	bl	11f3c <free@plt>
   13d24:	ldr	r0, [r4, #76]	; 0x4c
   13d28:	bl	11f3c <free@plt>
   13d2c:	ldr	r0, [r4, #80]	; 0x50
   13d30:	bl	11f3c <free@plt>
   13d34:	ldr	r0, [r4, #84]	; 0x54
   13d38:	bl	11f3c <free@plt>
   13d3c:	ldr	r0, [r4, #92]	; 0x5c
   13d40:	bl	11f3c <free@plt>
   13d44:	ldr	r0, [r4, #96]	; 0x60
   13d48:	bl	11f3c <free@plt>
   13d4c:	ldr	r0, [r4, #100]	; 0x64
   13d50:	bl	11f3c <free@plt>
   13d54:	ldr	r0, [r4, #88]	; 0x58
   13d58:	bl	123bc <freecon@plt>
   13d5c:	mov	r0, r4
   13d60:	pop	{r4, lr}
   13d64:	b	11f3c <free@plt>
   13d68:	push	{r1, r2, r3}
   13d6c:	push	{r4, lr}
   13d70:	sub	sp, sp, #12
   13d74:	ldr	r4, [pc, #84]	; 13dd0 <__assert_fail@plt+0x1954>
   13d78:	add	ip, sp, #24
   13d7c:	mov	r3, ip
   13d80:	ldr	r1, [r4]
   13d84:	ldr	r2, [sp, #20]
   13d88:	str	r1, [sp, #4]
   13d8c:	mov	r1, #1
   13d90:	str	ip, [sp]
   13d94:	bl	12230 <__vasprintf_chk@plt>
   13d98:	cmp	r0, #0
   13d9c:	blt	13dc0 <__assert_fail@plt+0x1944>
   13da0:	ldr	r2, [sp, #4]
   13da4:	ldr	r3, [r4]
   13da8:	cmp	r2, r3
   13dac:	bne	13dcc <__assert_fail@plt+0x1950>
   13db0:	add	sp, sp, #12
   13db4:	pop	{r4, lr}
   13db8:	add	sp, sp, #12
   13dbc:	bx	lr
   13dc0:	ldr	r1, [pc, #12]	; 13dd4 <__assert_fail@plt+0x1958>
   13dc4:	mov	r0, #1
   13dc8:	bl	12080 <err@plt>
   13dcc:	bl	1202c <__stack_chk_fail@plt>
   13dd0:			; <UNDEFINED> instruction: 0x0002bcb0
   13dd4:	andeq	r9, r1, ip, lsl #19
   13dd8:	push	{r4, r5, r6, r7, r8, lr}
   13ddc:	mov	r7, r0
   13de0:	ldr	r5, [pc, #104]	; 13e50 <__assert_fail@plt+0x19d4>
   13de4:	ldr	r8, [pc, #104]	; 13e54 <__assert_fail@plt+0x19d8>
   13de8:	mov	r6, r1
   13dec:	mov	r4, #0
   13df0:	b	13df8 <__assert_fail@plt+0x197c>
   13df4:	ldr	r5, [r8, r4, lsl #5]
   13df8:	mov	r2, r6
   13dfc:	mov	r1, r5
   13e00:	mov	r0, r7
   13e04:	bl	12200 <strncasecmp@plt>
   13e08:	cmp	r0, #0
   13e0c:	bne	13e1c <__assert_fail@plt+0x19a0>
   13e10:	ldrsb	r3, [r5, r6]
   13e14:	cmp	r3, #0
   13e18:	beq	13e48 <__assert_fail@plt+0x19cc>
   13e1c:	add	r4, r4, #1
   13e20:	cmp	r4, #27
   13e24:	bne	13df4 <__assert_fail@plt+0x1978>
   13e28:	mov	r2, #5
   13e2c:	ldr	r1, [pc, #36]	; 13e58 <__assert_fail@plt+0x19dc>
   13e30:	mov	r0, #0
   13e34:	bl	11ffc <dcgettext@plt>
   13e38:	mov	r1, r7
   13e3c:	bl	121c4 <warnx@plt>
   13e40:	mvn	r0, #0
   13e44:	pop	{r4, r5, r6, r7, r8, pc}
   13e48:	mov	r0, r4
   13e4c:	pop	{r4, r5, r6, r7, r8, pc}
   13e50:	andeq	r9, r1, r4, lsr #19
   13e54:	andeq	r9, r1, r8, lsr #5
   13e58:	andeq	r9, r1, ip, lsr #19
   13e5c:	push	{r4, r5, lr}
   13e60:	sub	sp, sp, #132	; 0x84
   13e64:	ldr	r5, [pc, #304]	; 13f9c <__assert_fail@plt+0x1b20>
   13e68:	mov	r4, r0
   13e6c:	str	r1, [sp, #12]
   13e70:	ldr	r3, [r5]
   13e74:	add	r0, sp, #60	; 0x3c
   13e78:	mov	r2, #64	; 0x40
   13e7c:	mov	r1, #0
   13e80:	str	r3, [sp, #124]	; 0x7c
   13e84:	bl	12254 <memset@plt>
   13e88:	sub	r0, r4, #1
   13e8c:	cmp	r0, #3
   13e90:	ldrls	pc, [pc, r0, lsl #2]
   13e94:	b	13f90 <__assert_fail@plt+0x1b14>
   13e98:	andeq	r3, r1, r4, asr #30
   13e9c:	andeq	r3, r1, r4, lsl #30
   13ea0:	andeq	r3, r1, ip, ror #29
   13ea4:	andeq	r3, r1, r8, lsr #29
   13ea8:	mov	r3, #64	; 0x40
   13eac:	add	r2, sp, #60	; 0x3c
   13eb0:	mov	r1, #1
   13eb4:	add	r0, sp, #12
   13eb8:	bl	18710 <__assert_fail@plt+0x6294>
   13ebc:	cmp	r0, #0
   13ec0:	bne	13f74 <__assert_fail@plt+0x1af8>
   13ec4:	add	r0, sp, #60	; 0x3c
   13ec8:	bl	12014 <strdup@plt>
   13ecc:	cmp	r0, #0
   13ed0:	beq	13f64 <__assert_fail@plt+0x1ae8>
   13ed4:	ldr	r2, [sp, #124]	; 0x7c
   13ed8:	ldr	r3, [r5]
   13edc:	cmp	r2, r3
   13ee0:	bne	13f70 <__assert_fail@plt+0x1af4>
   13ee4:	add	sp, sp, #132	; 0x84
   13ee8:	pop	{r4, r5, pc}
   13eec:	mov	r3, #64	; 0x40
   13ef0:	add	r2, sp, #60	; 0x3c
   13ef4:	mov	r1, #39	; 0x27
   13ef8:	add	r0, sp, #12
   13efc:	bl	18710 <__assert_fail@plt+0x6294>
   13f00:	b	13ebc <__assert_fail@plt+0x1a40>
   13f04:	add	r1, sp, #16
   13f08:	add	r0, sp, #12
   13f0c:	bl	1205c <localtime_r@plt>
   13f10:	add	r1, sp, #60	; 0x3c
   13f14:	add	r0, sp, #16
   13f18:	bl	122a8 <asctime_r@plt>
   13f1c:	add	r0, sp, #60	; 0x3c
   13f20:	bl	12194 <strlen@plt>
   13f24:	add	r3, sp, #60	; 0x3c
   13f28:	sub	r0, r0, #1
   13f2c:	ldrsb	r3, [r3, r0]
   13f30:	cmp	r3, #10
   13f34:	addeq	r2, sp, #60	; 0x3c
   13f38:	moveq	r3, #0
   13f3c:	strbeq	r3, [r2, r0]
   13f40:	b	13ec4 <__assert_fail@plt+0x1a48>
   13f44:	mov	r3, #64	; 0x40
   13f48:	str	r3, [sp]
   13f4c:	mov	r2, #2
   13f50:	add	r3, sp, #60	; 0x3c
   13f54:	ldr	r1, [pc, #68]	; 13fa0 <__assert_fail@plt+0x1b24>
   13f58:	add	r0, sp, #12
   13f5c:	bl	18888 <__assert_fail@plt+0x640c>
   13f60:	b	13ebc <__assert_fail@plt+0x1a40>
   13f64:	ldr	r1, [pc, #56]	; 13fa4 <__assert_fail@plt+0x1b28>
   13f68:	mov	r0, #1
   13f6c:	bl	12080 <err@plt>
   13f70:	bl	1202c <__stack_chk_fail@plt>
   13f74:	ldr	r1, [pc, #44]	; 13fa8 <__assert_fail@plt+0x1b2c>
   13f78:	mov	r2, #5
   13f7c:	mov	r0, #0
   13f80:	bl	11ffc <dcgettext@plt>
   13f84:	mov	r1, r0
   13f88:	mov	r0, #1
   13f8c:	bl	12320 <errx@plt>
   13f90:	mov	r2, #5
   13f94:	ldr	r1, [pc, #16]	; 13fac <__assert_fail@plt+0x1b30>
   13f98:	b	13f7c <__assert_fail@plt+0x1b00>
   13f9c:			; <UNDEFINED> instruction: 0x0002bcb0
   13fa0:	andeq	ip, r2, r0, lsr r0
   13fa4:	strdeq	r9, [r1], -r8
   13fa8:	ldrdeq	r9, [r1], -r8
   13fac:	andeq	r9, r1, r0, asr #19
   13fb0:	push	{r4, r5, r6, lr}
   13fb4:	subs	r6, r2, #0
   13fb8:	beq	14014 <__assert_fail@plt+0x1b98>
   13fbc:	ldr	r4, [r1]
   13fc0:	ldr	r3, [r0]
   13fc4:	add	r2, r4, r4, lsl #1
   13fc8:	lsl	r2, r2, #7
   13fcc:	sub	r2, r2, #384	; 0x180
   13fd0:	add	r3, r3, r2
   13fd4:	b	13fe0 <__assert_fail@plt+0x1b64>
   13fd8:	subs	r4, r4, #1
   13fdc:	beq	14008 <__assert_fail@plt+0x1b8c>
   13fe0:	add	r1, r3, #44	; 0x2c
   13fe4:	mov	r2, #32
   13fe8:	mov	r0, r6
   13fec:	mov	r5, r3
   13ff0:	bl	123ec <strncmp@plt>
   13ff4:	sub	r3, r5, #384	; 0x180
   13ff8:	cmp	r0, #0
   13ffc:	bne	13fd8 <__assert_fail@plt+0x1b5c>
   14000:	mov	r0, r5
   14004:	pop	{r4, r5, r6, pc}
   14008:	mov	r5, r4
   1400c:	mov	r0, r5
   14010:	pop	{r4, r5, r6, pc}
   14014:	mov	r5, r6
   14018:	b	14000 <__assert_fail@plt+0x1b84>
   1401c:	mov	r2, #5
   14020:	ldr	r1, [pc, #24]	; 14040 <__assert_fail@plt+0x1bc4>
   14024:	push	{r4, lr}
   14028:	mov	r0, #0
   1402c:	bl	11ffc <dcgettext@plt>
   14030:	mov	r2, #53	; 0x35
   14034:	mov	r1, r0
   14038:	mov	r0, #1
   1403c:	bl	12320 <errx@plt>
   14040:	andeq	r9, r1, r0, lsl sl
   14044:	cmp	r0, #0
   14048:	bxeq	lr
   1404c:	push	{r4, r5, r6, lr}
   14050:	mov	r6, r0
   14054:	ldrsb	r3, [r6], #1
   14058:	cmp	r3, #36	; 0x24
   1405c:	bne	140b0 <__assert_fail@plt+0x1c34>
   14060:	ldrsb	r3, [r0, #1]
   14064:	sub	r3, r3, #49	; 0x31
   14068:	cmp	r3, #5
   1406c:	ldrls	pc, [pc, r3, lsl #2]
   14070:	b	140b0 <__assert_fail@plt+0x1c34>
   14074:	andeq	r4, r1, ip, lsr #3
   14078:	andeq	r4, r1, ip, lsl #1
   1407c:	strheq	r4, [r1], -r0
   14080:	strheq	r4, [r1], -r0
   14084:			; <UNDEFINED> instruction: 0x000141b8
   14088:	strheq	r4, [r1], -r8
   1408c:	ldrsb	r2, [r0, #2]
   14090:	ldrsb	r3, [r0, #3]
   14094:	cmp	r2, #121	; 0x79
   14098:	cmpne	r2, #97	; 0x61
   1409c:	moveq	r4, #1
   140a0:	movne	r4, #0
   140a4:	addeq	r6, r0, #2
   140a8:	moveq	r5, #0
   140ac:	beq	140c0 <__assert_fail@plt+0x1c44>
   140b0:	mov	r0, #0
   140b4:	pop	{r4, r5, r6, pc}
   140b8:	ldrsb	r3, [r0, #2]
   140bc:	mov	r5, #86	; 0x56
   140c0:	cmp	r3, #36	; 0x24
   140c4:	bne	140b0 <__assert_fail@plt+0x1c34>
   140c8:	ldrsb	r4, [r6, #2]
   140cc:	cmp	r4, #0
   140d0:	beq	140b0 <__assert_fail@plt+0x1c34>
   140d4:	cmp	r4, #36	; 0x24
   140d8:	add	r6, r6, #2
   140dc:	beq	14130 <__assert_fail@plt+0x1cb4>
   140e0:	bl	12170 <__ctype_b_loc@plt>
   140e4:	uxtb	r4, r4
   140e8:	sub	r2, r4, #46	; 0x2e
   140ec:	lsl	r4, r4, #1
   140f0:	ldr	r3, [r0]
   140f4:	ldrh	r3, [r3, r4]
   140f8:	lsr	r3, r3, #3
   140fc:	eor	r3, r3, #1
   14100:	cmp	r2, #1
   14104:	movls	r3, #0
   14108:	andhi	r3, r3, #1
   1410c:	cmp	r3, #0
   14110:	bne	140b0 <__assert_fail@plt+0x1c34>
   14114:	cmn	r6, #1
   14118:	beq	141c4 <__assert_fail@plt+0x1d48>
   1411c:	ldrsb	r4, [r6, #1]!
   14120:	cmp	r4, #0
   14124:	beq	140b0 <__assert_fail@plt+0x1c34>
   14128:	cmp	r4, #36	; 0x24
   1412c:	bne	140e0 <__assert_fail@plt+0x1c64>
   14130:	ldrsb	r4, [r6, #1]
   14134:	cmp	r4, #0
   14138:	beq	140b0 <__assert_fail@plt+0x1c34>
   1413c:	bl	12170 <__ctype_b_loc@plt>
   14140:	add	r2, r6, #2
   14144:	mvn	r6, r6
   14148:	ldr	ip, [r0]
   1414c:	b	1415c <__assert_fail@plt+0x1ce0>
   14150:	ldrsb	r4, [r2], #1
   14154:	cmp	r4, #0
   14158:	beq	14194 <__assert_fail@plt+0x1d18>
   1415c:	uxtb	r0, r4
   14160:	sub	r1, r0, #46	; 0x2e
   14164:	lsl	r0, r0, #1
   14168:	ldrh	r3, [ip, r0]
   1416c:	lsr	r3, r3, #3
   14170:	eor	r3, r3, #1
   14174:	cmp	r1, #1
   14178:	movls	r3, #0
   1417c:	andhi	r3, r3, #1
   14180:	cmp	r3, #0
   14184:	bne	140b0 <__assert_fail@plt+0x1c34>
   14188:	cmp	r2, #0
   1418c:	add	r3, r6, r2
   14190:	bne	14150 <__assert_fail@plt+0x1cd4>
   14194:	subs	r0, r3, r5
   14198:	movne	r0, #1
   1419c:	cmp	r5, #0
   141a0:	moveq	r0, #0
   141a4:	eor	r0, r0, #1
   141a8:	pop	{r4, r5, r6, pc}
   141ac:	ldrsb	r3, [r0, #2]
   141b0:	mov	r5, #22
   141b4:	b	140c0 <__assert_fail@plt+0x1c44>
   141b8:	ldrsb	r3, [r0, #2]
   141bc:	mov	r5, #43	; 0x2b
   141c0:	b	140c0 <__assert_fail@plt+0x1c44>
   141c4:	ldrb	r3, [r3]
   141c8:	udf	#0
   141cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d0:	subs	r6, r1, #0
   141d4:	sub	sp, sp, #20
   141d8:	beq	14300 <__assert_fail@plt+0x1e84>
   141dc:	add	r5, r6, r6, lsl #2
   141e0:	mov	r8, r0
   141e4:	lsl	r5, r5, #1
   141e8:	mov	r0, r5
   141ec:	mov	r9, r2
   141f0:	str	r6, [sp, #12]
   141f4:	bl	1211c <malloc@plt>
   141f8:	adds	r3, r5, #0
   141fc:	movne	r3, #1
   14200:	mov	r2, r5
   14204:	cmp	r0, #0
   14208:	movne	r3, #0
   1420c:	cmp	r3, #0
   14210:	mov	r6, r0
   14214:	bne	14330 <__assert_fail@plt+0x1eb4>
   14218:	str	r3, [sp, #8]
   1421c:	mov	r7, r0
   14220:	mov	r4, r5
   14224:	ldr	fp, [pc, #272]	; 1433c <__assert_fail@plt+0x1ec0>
   14228:	ldr	sl, [pc, #272]	; 14340 <__assert_fail@plt+0x1ec4>
   1422c:	b	14298 <__assert_fail@plt+0x1e1c>
   14230:	str	r0, [sp, #4]
   14234:	str	sl, [sp]
   14238:	mvn	r3, #0
   1423c:	mov	r2, #1
   14240:	mov	r1, r4
   14244:	mov	r0, r7
   14248:	bl	12458 <__snprintf_chk@plt>
   1424c:	cmp	r0, r4
   14250:	movcc	r3, #0
   14254:	movcs	r3, #1
   14258:	orrs	r3, r3, r0, lsr #31
   1425c:	beq	142d4 <__assert_fail@plt+0x1e58>
   14260:	lsl	r5, r5, #1
   14264:	mov	r0, r6
   14268:	mov	r1, r5
   1426c:	bl	12044 <realloc@plt>
   14270:	adds	r3, r5, #0
   14274:	movne	r3, #1
   14278:	sub	r4, r7, r6
   1427c:	cmp	r0, #0
   14280:	movne	r3, #0
   14284:	cmp	r3, #0
   14288:	mov	r6, r0
   1428c:	bne	1432c <__assert_fail@plt+0x1eb0>
   14290:	add	r7, r0, r4
   14294:	sub	r4, r5, r4
   14298:	cmp	r9, #0
   1429c:	ldr	r0, [r8]
   142a0:	beq	14230 <__assert_fail@plt+0x1db4>
   142a4:	bl	12440 <getgrgid@plt>
   142a8:	cmp	r0, #0
   142ac:	beq	1430c <__assert_fail@plt+0x1e90>
   142b0:	ldr	r2, [r0]
   142b4:	mvn	r3, #0
   142b8:	str	r2, [sp, #4]
   142bc:	str	fp, [sp]
   142c0:	mov	r2, #1
   142c4:	mov	r1, r4
   142c8:	mov	r0, r7
   142cc:	bl	12458 <__snprintf_chk@plt>
   142d0:	b	1424c <__assert_fail@plt+0x1dd0>
   142d4:	ldr	r2, [sp, #8]
   142d8:	ldr	r1, [sp, #12]
   142dc:	add	r2, r2, #1
   142e0:	cmp	r1, r2
   142e4:	str	r2, [sp, #8]
   142e8:	sub	r4, r4, r0
   142ec:	add	r7, r7, r0
   142f0:	add	r8, r8, #4
   142f4:	bne	14298 <__assert_fail@plt+0x1e1c>
   142f8:	cmp	r6, r7
   142fc:	strbcc	r3, [r7, #-1]
   14300:	mov	r0, r6
   14304:	add	sp, sp, #20
   14308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1430c:	str	r0, [sp, #8]
   14310:	mov	r0, r6
   14314:	bl	11f3c <free@plt>
   14318:	ldr	r3, [sp, #8]
   1431c:	mov	r6, r3
   14320:	mov	r0, r6
   14324:	add	sp, sp, #20
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1432c:	mov	r2, r5
   14330:	ldr	r1, [pc, #12]	; 14344 <__assert_fail@plt+0x1ec8>
   14334:	mov	r0, #1
   14338:	bl	12080 <err@plt>
   1433c:	andeq	r9, r1, r8, ror #20
   14340:	andeq	r9, r1, r4, ror #20
   14344:	andeq	r9, r1, r8, asr #20
   14348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1434c:	bics	r3, r1, #2
   14350:	ldr	r8, [pc, #900]	; 146dc <__assert_fail@plt+0x2260>
   14354:	sub	sp, sp, #12
   14358:	ldr	r3, [r8]
   1435c:	str	r3, [sp, #4]
   14360:	bne	1437c <__assert_fail@plt+0x1f00>
   14364:	ldr	r2, [sp, #4]
   14368:	ldr	r3, [r8]
   1436c:	cmp	r2, r3
   14370:	bne	146b4 <__assert_fail@plt+0x2238>
   14374:	add	sp, sp, #12
   14378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1437c:	ldr	sl, [pc, #860]	; 146e0 <__assert_fail@plt+0x2264>
   14380:	ldr	r6, [r0]
   14384:	mov	r1, #0
   14388:	ldr	r0, [sl, #8]
   1438c:	bl	12134 <scols_table_new_line@plt>
   14390:	subs	r7, r0, #0
   14394:	beq	146b8 <__assert_fail@plt+0x223c>
   14398:	ldr	r2, [sl, #12]
   1439c:	cmp	r2, #0
   143a0:	beq	14364 <__assert_fail@plt+0x1ee8>
   143a4:	ldr	r9, [pc, #824]	; 146e4 <__assert_fail@plt+0x2268>
   143a8:	ldr	fp, [pc, #824]	; 146e8 <__assert_fail@plt+0x226c>
   143ac:	mov	r4, #0
   143b0:	add	r5, sl, #12
   143b4:	ldr	r2, [r5, #4]!
   143b8:	cmp	r2, #26
   143bc:	ldrls	pc, [pc, r2, lsl #2]
   143c0:	b	146d0 <__assert_fail@plt+0x2254>
   143c4:	andeq	r4, r1, r4, lsl #13
   143c8:	andeq	r4, r1, ip, ror r6
   143cc:	andeq	r4, r1, r8, ror #12
   143d0:	andeq	r4, r1, r4, asr r6
   143d4:	andeq	r4, r1, r0, asr #12
   143d8:	andeq	r4, r1, r4, lsr #12
   143dc:	andeq	r4, r1, r8, lsl #12
   143e0:	andeq	r4, r1, ip, ror #11
   143e4:	ldrdeq	r4, [r1], -r0
   143e8:			; <UNDEFINED> instruction: 0x000145bc
   143ec:	andeq	r4, r1, r8, lsr #11
   143f0:	andeq	r4, r1, ip, ror r5
   143f4:	andeq	r4, r1, r4, ror r5
   143f8:	andeq	r4, r1, r4, asr r5
   143fc:	andeq	r4, r1, r0, asr #10
   14400:	andeq	r4, r1, r8, lsl r5
   14404:	andeq	r4, r1, r4, lsl #10
   14408:	andeq	r4, r1, ip, lsr #10
   1440c:	strdeq	r4, [r1], -r0
   14410:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14414:	andeq	r4, r1, r0, asr #9
   14418:	andeq	r4, r1, ip, lsr #9
   1441c:	muleq	r1, r8, r4
   14420:	andeq	r4, r1, r4, lsl #9
   14424:	andeq	r4, r1, r0, ror r4
   14428:	andeq	r4, r1, ip, asr r4
   1442c:	andeq	r4, r1, r0, lsr r4
   14430:	ldr	r2, [r6, #108]	; 0x6c
   14434:	mov	r1, r4
   14438:	mov	r0, r7
   1443c:	bl	11e88 <scols_line_set_data@plt>
   14440:	cmp	r0, #0
   14444:	bne	14698 <__assert_fail@plt+0x221c>
   14448:	ldr	r2, [sl, #12]
   1444c:	add	r4, r4, #1
   14450:	cmp	r2, r4
   14454:	bhi	143b4 <__assert_fail@plt+0x1f38>
   14458:	b	14364 <__assert_fail@plt+0x1ee8>
   1445c:	ldr	r2, [r6, #88]	; 0x58
   14460:	mov	r1, r4
   14464:	mov	r0, r7
   14468:	bl	11e88 <scols_line_set_data@plt>
   1446c:	b	14440 <__assert_fail@plt+0x1fc4>
   14470:	ldr	r2, [r6, #52]	; 0x34
   14474:	mov	r1, r4
   14478:	mov	r0, r7
   1447c:	bl	11e88 <scols_line_set_data@plt>
   14480:	b	14440 <__assert_fail@plt+0x1fc4>
   14484:	ldr	r2, [r6, #60]	; 0x3c
   14488:	mov	r1, r4
   1448c:	mov	r0, r7
   14490:	bl	11e88 <scols_line_set_data@plt>
   14494:	b	14440 <__assert_fail@plt+0x1fc4>
   14498:	ldr	r2, [r6, #56]	; 0x38
   1449c:	mov	r1, r4
   144a0:	mov	r0, r7
   144a4:	bl	11e88 <scols_line_set_data@plt>
   144a8:	b	14440 <__assert_fail@plt+0x1fc4>
   144ac:	ldr	r2, [r6, #44]	; 0x2c
   144b0:	mov	r1, r4
   144b4:	mov	r0, r7
   144b8:	bl	11e88 <scols_line_set_data@plt>
   144bc:	b	14440 <__assert_fail@plt+0x1fc4>
   144c0:	ldr	r2, [r6, #48]	; 0x30
   144c4:	mov	r1, r4
   144c8:	mov	r0, r7
   144cc:	bl	11e88 <scols_line_set_data@plt>
   144d0:	b	14440 <__assert_fail@plt+0x1fc4>
   144d4:	ldr	r1, [sl, #232]	; 0xe8
   144d8:	ldr	r2, [r6, #104]	; 0x68
   144dc:	cmp	r1, #6
   144e0:	add	r2, r9, r2, lsl #2
   144e4:	beq	145e4 <__assert_fail@plt+0x2168>
   144e8:	ldr	r2, [r2, #876]	; 0x36c
   144ec:	b	14460 <__assert_fail@plt+0x1fe4>
   144f0:	ldr	r2, [r6, #84]	; 0x54
   144f4:	mov	r1, r4
   144f8:	mov	r0, r7
   144fc:	bl	11e88 <scols_line_set_data@plt>
   14500:	b	14440 <__assert_fail@plt+0x1fc4>
   14504:	ldr	r2, [r6, #76]	; 0x4c
   14508:	mov	r1, r4
   1450c:	mov	r0, r7
   14510:	bl	11e88 <scols_line_set_data@plt>
   14514:	b	14440 <__assert_fail@plt+0x1fc4>
   14518:	ldr	r2, [r6, #72]	; 0x48
   1451c:	mov	r1, r4
   14520:	mov	r0, r7
   14524:	bl	11e88 <scols_line_set_data@plt>
   14528:	b	14440 <__assert_fail@plt+0x1fc4>
   1452c:	ldr	r2, [r6, #80]	; 0x50
   14530:	mov	r1, r4
   14534:	mov	r0, r7
   14538:	bl	11e88 <scols_line_set_data@plt>
   1453c:	b	14440 <__assert_fail@plt+0x1fc4>
   14540:	ldr	r2, [r6, #68]	; 0x44
   14544:	mov	r1, r4
   14548:	mov	r0, r7
   1454c:	bl	11e88 <scols_line_set_data@plt>
   14550:	b	14440 <__assert_fail@plt+0x1fc4>
   14554:	mov	r2, #0
   14558:	ldrd	r0, [r6, #36]	; 0x24
   1455c:	bl	141cc <__assert_fail@plt+0x1d50>
   14560:	mov	r1, r4
   14564:	mov	r2, r0
   14568:	mov	r0, r7
   1456c:	bl	11ea0 <scols_line_refer_data@plt>
   14570:	b	14440 <__assert_fail@plt+0x1fc4>
   14574:	mov	r2, #1
   14578:	b	14558 <__assert_fail@plt+0x20dc>
   1457c:	ldr	r2, [r6, #12]
   14580:	mov	r1, fp
   14584:	mov	r3, #0
   14588:	mov	r0, sp
   1458c:	str	r3, [sp]
   14590:	bl	13d68 <__assert_fail@plt+0x18ec>
   14594:	ldr	r2, [sp]
   14598:	mov	r1, r4
   1459c:	mov	r0, r7
   145a0:	bl	11ea0 <scols_line_refer_data@plt>
   145a4:	b	14440 <__assert_fail@plt+0x1fc4>
   145a8:	ldr	r2, [r6, #8]
   145ac:	mov	r1, r4
   145b0:	mov	r0, r7
   145b4:	bl	11e88 <scols_line_set_data@plt>
   145b8:	b	14440 <__assert_fail@plt+0x1fc4>
   145bc:	ldr	r2, [r6, #64]	; 0x40
   145c0:	mov	r1, r4
   145c4:	mov	r0, r7
   145c8:	bl	11e88 <scols_line_set_data@plt>
   145cc:	b	14440 <__assert_fail@plt+0x1fc4>
   145d0:	ldr	r1, [sl, #232]	; 0xe8
   145d4:	ldr	r2, [r6, #32]
   145d8:	cmp	r1, #6
   145dc:	add	r2, r9, r2, lsl #2
   145e0:	bne	144e8 <__assert_fail@plt+0x206c>
   145e4:	ldr	r2, [r2, #864]	; 0x360
   145e8:	b	14460 <__assert_fail@plt+0x1fe4>
   145ec:	ldr	r1, [sl, #232]	; 0xe8
   145f0:	ldr	r2, [r6, #20]
   145f4:	cmp	r1, #6
   145f8:	add	r2, r9, r2, lsl #2
   145fc:	bne	144e8 <__assert_fail@plt+0x206c>
   14600:	ldr	r2, [r2, #864]	; 0x360
   14604:	b	14460 <__assert_fail@plt+0x1fe4>
   14608:	ldr	r1, [sl, #232]	; 0xe8
   1460c:	ldr	r2, [r6, #28]
   14610:	cmp	r1, #6
   14614:	add	r2, r9, r2, lsl #2
   14618:	bne	144e8 <__assert_fail@plt+0x206c>
   1461c:	ldr	r2, [r2, #864]	; 0x360
   14620:	b	14460 <__assert_fail@plt+0x1fe4>
   14624:	ldr	r1, [sl, #232]	; 0xe8
   14628:	ldr	r2, [r6, #24]
   1462c:	cmp	r1, #6
   14630:	add	r2, r9, r2, lsl #2
   14634:	bne	144e8 <__assert_fail@plt+0x206c>
   14638:	ldr	r2, [r2, #864]	; 0x360
   1463c:	b	14460 <__assert_fail@plt+0x1fe4>
   14640:	ldr	r2, [r6, #96]	; 0x60
   14644:	mov	r1, r4
   14648:	mov	r0, r7
   1464c:	bl	11e88 <scols_line_set_data@plt>
   14650:	b	14440 <__assert_fail@plt+0x1fc4>
   14654:	ldr	r2, [r6, #92]	; 0x5c
   14658:	mov	r1, r4
   1465c:	mov	r0, r7
   14660:	bl	11e88 <scols_line_set_data@plt>
   14664:	b	14440 <__assert_fail@plt+0x1fc4>
   14668:	ldr	r2, [r6, #16]
   1466c:	mov	r1, r4
   14670:	mov	r0, r7
   14674:	bl	11e88 <scols_line_set_data@plt>
   14678:	b	14440 <__assert_fail@plt+0x1fc4>
   1467c:	ldr	r2, [r6, #4]
   14680:	b	14580 <__assert_fail@plt+0x2104>
   14684:	ldr	r2, [r6]
   14688:	mov	r1, r4
   1468c:	mov	r0, r7
   14690:	bl	11e88 <scols_line_set_data@plt>
   14694:	b	14440 <__assert_fail@plt+0x1fc4>
   14698:	ldr	r1, [pc, #76]	; 146ec <__assert_fail@plt+0x2270>
   1469c:	mov	r2, #5
   146a0:	mov	r0, #0
   146a4:	bl	11ffc <dcgettext@plt>
   146a8:	mov	r1, r0
   146ac:	mov	r0, #1
   146b0:	bl	12080 <err@plt>
   146b4:	bl	1202c <__stack_chk_fail@plt>
   146b8:	ldr	r1, [pc, #48]	; 146f0 <__assert_fail@plt+0x2274>
   146bc:	mov	r2, #5
   146c0:	bl	11ffc <dcgettext@plt>
   146c4:	mov	r1, r0
   146c8:	mov	r0, #1
   146cc:	bl	12080 <err@plt>
   146d0:	mov	r2, #5
   146d4:	ldr	r1, [pc, #24]	; 146f4 <__assert_fail@plt+0x2278>
   146d8:	b	146a0 <__assert_fail@plt+0x2224>
   146dc:			; <UNDEFINED> instruction: 0x0002bcb0
   146e0:	andeq	ip, r2, r0, lsr r0
   146e4:	andeq	r9, r1, r8, lsr #5
   146e8:	andeq	r9, r1, ip, lsl #21
   146ec:			; <UNDEFINED> instruction: 0x00019ab0
   146f0:	andeq	r9, r1, ip, ror #20
   146f4:	muleq	r1, r0, sl
   146f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146fc:	sub	sp, sp, #12
   14700:	mov	fp, r0
   14704:	str	r1, [sp, #4]
   14708:	bl	12020 <setutxent@plt>
   1470c:	bl	121f4 <__errno_location@plt>
   14710:	mov	r3, #0
   14714:	mov	r4, r3
   14718:	mov	r7, r3
   1471c:	mov	r8, r3
   14720:	mov	r5, r3
   14724:	mov	r9, r0
   14728:	str	r3, [r0]
   1472c:	b	14748 <__assert_fail@plt+0x22cc>
   14730:	add	r0, r7, r4
   14734:	mov	r1, r6
   14738:	mov	r2, #384	; 0x180
   1473c:	bl	11fc0 <memcpy@plt>
   14740:	add	r5, r5, #1
   14744:	add	r4, r4, #384	; 0x180
   14748:	bl	12410 <getutxent@plt>
   1474c:	subs	r6, r0, #0
   14750:	beq	147a0 <__assert_fail@plt+0x2324>
   14754:	cmp	r5, r8
   14758:	bne	14730 <__assert_fail@plt+0x22b4>
   1475c:	add	r8, r5, #32
   14760:	mov	r0, r7
   14764:	add	r2, r8, r8, lsl #1
   14768:	lsl	sl, r2, #7
   1476c:	mov	r1, sl
   14770:	bl	12044 <realloc@plt>
   14774:	adds	r3, sl, #0
   14778:	movne	r3, #1
   1477c:	cmp	r0, #0
   14780:	movne	r3, #0
   14784:	cmp	r3, #0
   14788:	mov	r7, r0
   1478c:	beq	14730 <__assert_fail@plt+0x22b4>
   14790:	mov	r2, sl
   14794:	ldr	r1, [pc, #60]	; 147d8 <__assert_fail@plt+0x235c>
   14798:	mov	r0, #1
   1479c:	bl	12080 <err@plt>
   147a0:	ldr	r4, [r9]
   147a4:	cmp	r4, #0
   147a8:	bne	147c8 <__assert_fail@plt+0x234c>
   147ac:	bl	122fc <endutxent@plt>
   147b0:	ldr	r3, [sp, #4]
   147b4:	str	r5, [fp]
   147b8:	str	r7, [r3]
   147bc:	mov	r0, r4
   147c0:	add	sp, sp, #12
   147c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c8:	mov	r0, r7
   147cc:	bl	11f3c <free@plt>
   147d0:	rsb	r4, r4, #0
   147d4:	b	147bc <__assert_fail@plt+0x2340>
   147d8:	andeq	r9, r1, r8, asr #20
   147dc:	ldr	r3, [pc, #292]	; 14908 <__assert_fail@plt+0x248c>
   147e0:	push	{r4, r5, r6, lr}
   147e4:	ldr	r4, [r3]
   147e8:	mov	r0, r4
   147ec:	bl	120ec <__fpending@plt>
   147f0:	mov	r6, r0
   147f4:	mov	r0, r4
   147f8:	bl	11f78 <ferror@plt>
   147fc:	mov	r5, r0
   14800:	mov	r0, r4
   14804:	bl	122cc <fclose@plt>
   14808:	cmp	r5, #0
   1480c:	mov	r4, r0
   14810:	bne	148b8 <__assert_fail@plt+0x243c>
   14814:	cmp	r0, #0
   14818:	beq	14834 <__assert_fail@plt+0x23b8>
   1481c:	bl	121f4 <__errno_location@plt>
   14820:	cmp	r6, #0
   14824:	ldr	r3, [r0]
   14828:	bne	14890 <__assert_fail@plt+0x2414>
   1482c:	cmp	r3, #9
   14830:	bne	14890 <__assert_fail@plt+0x2414>
   14834:	ldr	r3, [pc, #208]	; 1490c <__assert_fail@plt+0x2490>
   14838:	ldr	r4, [r3]
   1483c:	mov	r0, r4
   14840:	bl	120ec <__fpending@plt>
   14844:	mov	r6, r0
   14848:	mov	r0, r4
   1484c:	bl	11f78 <ferror@plt>
   14850:	mov	r5, r0
   14854:	mov	r0, r4
   14858:	bl	122cc <fclose@plt>
   1485c:	cmp	r5, #0
   14860:	mov	r4, r0
   14864:	bne	148ec <__assert_fail@plt+0x2470>
   14868:	cmp	r0, #0
   1486c:	popeq	{r4, r5, r6, pc}
   14870:	cmp	r6, #0
   14874:	bne	14888 <__assert_fail@plt+0x240c>
   14878:	bl	121f4 <__errno_location@plt>
   1487c:	ldr	r3, [r0]
   14880:	cmp	r3, #9
   14884:	popeq	{r4, r5, r6, pc}
   14888:	mov	r0, #1
   1488c:	bl	11f9c <_exit@plt>
   14890:	cmp	r3, #32
   14894:	beq	14834 <__assert_fail@plt+0x23b8>
   14898:	cmp	r3, #0
   1489c:	beq	148d4 <__assert_fail@plt+0x2458>
   148a0:	mov	r2, #5
   148a4:	ldr	r1, [pc, #100]	; 14910 <__assert_fail@plt+0x2494>
   148a8:	mov	r0, #0
   148ac:	bl	11ffc <dcgettext@plt>
   148b0:	bl	12338 <warn@plt>
   148b4:	b	14888 <__assert_fail@plt+0x240c>
   148b8:	bl	121f4 <__errno_location@plt>
   148bc:	cmp	r4, #0
   148c0:	ldr	r3, [r0]
   148c4:	bne	14890 <__assert_fail@plt+0x2414>
   148c8:	cmp	r3, #32
   148cc:	strne	r4, [r0]
   148d0:	beq	14834 <__assert_fail@plt+0x23b8>
   148d4:	mov	r2, #5
   148d8:	ldr	r1, [pc, #48]	; 14910 <__assert_fail@plt+0x2494>
   148dc:	mov	r0, #0
   148e0:	bl	11ffc <dcgettext@plt>
   148e4:	bl	121c4 <warnx@plt>
   148e8:	b	14888 <__assert_fail@plt+0x240c>
   148ec:	cmp	r0, #0
   148f0:	bne	14888 <__assert_fail@plt+0x240c>
   148f4:	bl	121f4 <__errno_location@plt>
   148f8:	ldr	r3, [r0]
   148fc:	cmp	r3, #32
   14900:	strne	r4, [r0]
   14904:	b	14888 <__assert_fail@plt+0x240c>
   14908:	andeq	ip, r2, r4, lsr #32
   1490c:	andeq	ip, r2, r0, lsr #32
   14910:	andeq	r9, r1, ip, asr #21
   14914:	ldr	r3, [pc, #2220]	; 151c8 <__assert_fail@plt+0x2d4c>
   14918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1491c:	sub	sp, sp, #36	; 0x24
   14920:	ldr	r3, [r3]
   14924:	mov	r4, r1
   14928:	str	r3, [sp, #28]
   1492c:	mov	r7, r0
   14930:	bl	121f4 <__errno_location@plt>
   14934:	mov	r3, #0
   14938:	cmp	r4, #0
   1493c:	mov	r5, r0
   14940:	str	r3, [r0]
   14944:	beq	150b4 <__assert_fail@plt+0x2c38>
   14948:	mov	r0, r4
   1494c:	bl	11e7c <getpwnam@plt>
   14950:	mov	r6, r0
   14954:	cmp	r6, #0
   14958:	beq	150ac <__assert_fail@plt+0x2c30>
   1495c:	ldr	r3, [pc, #2152]	; 151cc <__assert_fail@plt+0x2d50>
   14960:	ldr	r4, [r6, #8]
   14964:	ldr	r8, [r3, #236]	; 0xec
   14968:	str	r4, [r7, #20]
   1496c:	tst	r8, #16
   14970:	beq	1498c <__assert_fail@plt+0x2510>
   14974:	ldr	r1, [r6]
   14978:	ldr	r0, [pc, #2128]	; 151d0 <__assert_fail@plt+0x2d54>
   1497c:	bl	11eac <strcmp@plt>
   14980:	cmp	r4, #0
   14984:	cmpne	r0, #0
   14988:	bne	1508c <__assert_fail@plt+0x2c10>
   1498c:	tst	r8, #8
   14990:	beq	149ac <__assert_fail@plt+0x2530>
   14994:	ldr	r3, [r7, #32]
   14998:	cmp	r3, r4
   1499c:	bhi	150a4 <__assert_fail@plt+0x2c28>
   149a0:	ldr	r3, [r7, #36]	; 0x24
   149a4:	cmp	r3, r4
   149a8:	bcc	150a4 <__assert_fail@plt+0x2c28>
   149ac:	mov	r3, #0
   149b0:	str	r3, [r5]
   149b4:	ldr	r0, [r6, #12]
   149b8:	bl	12440 <getgrgid@plt>
   149bc:	subs	r3, r0, #0
   149c0:	str	r3, [sp, #4]
   149c4:	beq	150ac <__assert_fail@plt+0x2c30>
   149c8:	mov	r1, #112	; 0x70
   149cc:	mov	r0, #1
   149d0:	bl	11e34 <calloc@plt>
   149d4:	subs	fp, r0, #0
   149d8:	beq	14adc <__assert_fail@plt+0x2660>
   149dc:	ldr	r3, [r7]
   149e0:	cmp	r3, #0
   149e4:	str	r3, [sp]
   149e8:	beq	14a00 <__assert_fail@plt+0x2584>
   149ec:	ldr	r2, [r6]
   149f0:	add	r1, r7, #4
   149f4:	mov	r0, r7
   149f8:	bl	13fb0 <__assert_fail@plt+0x1b34>
   149fc:	str	r0, [sp]
   14a00:	ldr	r3, [r7, #8]
   14a04:	cmp	r3, #0
   14a08:	str	r3, [sp, #8]
   14a0c:	beq	14a24 <__assert_fail@plt+0x25a8>
   14a10:	ldr	r2, [r6]
   14a14:	add	r1, r7, #12
   14a18:	add	r0, r7, #8
   14a1c:	bl	13fb0 <__assert_fail@plt+0x1b34>
   14a20:	str	r0, [sp, #8]
   14a24:	bl	11f48 <lckpwdf@plt>
   14a28:	ldr	r0, [r6]
   14a2c:	bl	11f30 <getspnam@plt>
   14a30:	mov	r4, #0
   14a34:	mov	sl, r7
   14a38:	mov	r9, r0
   14a3c:	bl	1232c <ulckpwdf@plt>
   14a40:	ldr	r2, [pc, #1924]	; 151cc <__assert_fail@plt+0x2d50>
   14a44:	ldr	r3, [r6, #8]
   14a48:	add	r5, r2, #12
   14a4c:	ldr	r8, [r2, #12]
   14a50:	str	r3, [fp, #4]
   14a54:	cmp	r4, r8
   14a58:	bcs	14b7c <__assert_fail@plt+0x2700>
   14a5c:	ldr	r3, [r5, #4]!
   14a60:	add	r4, r4, #1
   14a64:	cmp	r3, #26
   14a68:	ldrls	pc, [pc, r3, lsl #2]
   14a6c:	b	151bc <__assert_fail@plt+0x2d40>
   14a70:	andeq	r5, r1, r0, rrx
   14a74:	andeq	r5, r1, r0, lsl #1
   14a78:	andeq	r5, r1, r0, asr #32
   14a7c:	andeq	r5, r1, r0, lsr #32
   14a80:	andeq	r5, r1, r0
   14a84:	andeq	r4, r1, r0, ror #31
   14a88:	andeq	r4, r1, r4, lsr #31
   14a8c:	andeq	r4, r1, r4, lsl #31
   14a90:	andeq	r4, r1, r4, asr #30
   14a94:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a98:			; <UNDEFINED> instruction: 0x00014eb0
   14a9c:	andeq	r4, r1, r4, lsr #29
   14aa0:			; <UNDEFINED> instruction: 0x00014dbc
   14aa4:			; <UNDEFINED> instruction: 0x00014dbc
   14aa8:	muleq	r1, r4, sp
   14aac:	andeq	r4, r1, r0, ror sp
   14ab0:	andeq	r4, r1, ip, asr #26
   14ab4:	andeq	r4, r1, r4, lsr #26
   14ab8:	andeq	r4, r1, r0, lsl #26
   14abc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ac0:	andeq	r4, r1, r8, lsr #25
   14ac4:	andeq	r4, r1, ip, ror #24
   14ac8:	andeq	r4, r1, r0, asr #24
   14acc:	andeq	r4, r1, r4, lsl ip
   14ad0:	ldrdeq	r4, [r1], -r0
   14ad4:	muleq	r1, ip, fp
   14ad8:	andeq	r4, r1, ip, ror #21
   14adc:	mov	r2, #112	; 0x70
   14ae0:	ldr	r1, [pc, #1772]	; 151d4 <__assert_fail@plt+0x2d58>
   14ae4:	mov	r0, #1
   14ae8:	bl	12080 <err@plt>
   14aec:	ldr	r7, [r6, #8]
   14af0:	bl	18d8c <__assert_fail@plt+0x6910>
   14af4:	mov	r1, r7
   14af8:	add	r8, sp, #24
   14afc:	mov	r7, #0
   14b00:	str	r0, [sp, #12]
   14b04:	bl	18e20 <__assert_fail@plt+0x69a4>
   14b08:	add	r3, fp, #108	; 0x6c
   14b0c:	str	r3, [sp, #16]
   14b10:	mov	r3, r5
   14b14:	str	r4, [sp, #20]
   14b18:	mov	r5, r7
   14b1c:	mov	r4, r8
   14b20:	mov	r7, r3
   14b24:	ldr	r8, [sp, #12]
   14b28:	b	14b30 <__assert_fail@plt+0x26b4>
   14b2c:	add	r5, r5, #1
   14b30:	mov	r1, r4
   14b34:	mov	r0, r8
   14b38:	bl	18e34 <__assert_fail@plt+0x69b8>
   14b3c:	cmp	r0, #0
   14b40:	beq	14b2c <__assert_fail@plt+0x26b0>
   14b44:	mov	r3, r7
   14b48:	ldr	r0, [sp, #12]
   14b4c:	mov	r7, r5
   14b50:	ldr	r4, [sp, #20]
   14b54:	mov	r5, r3
   14b58:	bl	18ddc <__assert_fail@plt+0x6960>
   14b5c:	mov	r2, r7
   14b60:	ldr	r1, [pc, #1648]	; 151d8 <__assert_fail@plt+0x2d5c>
   14b64:	ldr	r0, [sp, #16]
   14b68:	bl	13d68 <__assert_fail@plt+0x18ec>
   14b6c:	ldr	r3, [pc, #1624]	; 151cc <__assert_fail@plt+0x2d50>
   14b70:	ldr	r8, [r3, #12]
   14b74:	cmp	r4, r8
   14b78:	bcc	14a5c <__assert_fail@plt+0x25e0>
   14b7c:	ldr	r3, [pc, #1604]	; 151c8 <__assert_fail@plt+0x2d4c>
   14b80:	ldr	r2, [sp, #28]
   14b84:	mov	r0, fp
   14b88:	ldr	r3, [r3]
   14b8c:	cmp	r2, r3
   14b90:	bne	151b8 <__assert_fail@plt+0x2d3c>
   14b94:	add	sp, sp, #36	; 0x24
   14b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b9c:	ldrb	r3, [sl, #56]	; 0x38
   14ba0:	tst	r3, #1
   14ba4:	beq	14a54 <__assert_fail@plt+0x25d8>
   14ba8:	mov	r3, #0
   14bac:	add	r0, sp, #24
   14bb0:	str	r3, [sp, #24]
   14bb4:	bl	120d4 <getcon@plt>
   14bb8:	cmp	r0, #0
   14bbc:	ldreq	r3, [sp, #24]
   14bc0:	streq	r3, [fp, #88]	; 0x58
   14bc4:	ldr	r3, [pc, #1536]	; 151cc <__assert_fail@plt+0x2d50>
   14bc8:	ldr	r8, [r3, #12]
   14bcc:	b	14a54 <__assert_fail@plt+0x25d8>
   14bd0:	cmp	r9, #0
   14bd4:	beq	14a54 <__assert_fail@plt+0x25d8>
   14bd8:	ldr	r3, [r9, #28]
   14bdc:	cmp	r3, #0
   14be0:	blt	14a54 <__assert_fail@plt+0x25d8>
   14be4:	add	r3, r3, r3, lsl #1
   14be8:	ldr	r0, [sl, #48]	; 0x30
   14bec:	rsb	r3, r3, r3, lsl #4
   14bf0:	cmp	r0, #3
   14bf4:	rsb	r3, r3, r3, lsl #4
   14bf8:	moveq	r0, #4
   14bfc:	lsl	r1, r3, #7
   14c00:	bl	13e5c <__assert_fail@plt+0x19e0>
   14c04:	ldr	r3, [pc, #1472]	; 151cc <__assert_fail@plt+0x2d50>
   14c08:	ldr	r8, [r3, #12]
   14c0c:	str	r0, [fp, #52]	; 0x34
   14c10:	b	14a54 <__assert_fail@plt+0x25d8>
   14c14:	cmp	r9, #0
   14c18:	beq	14a54 <__assert_fail@plt+0x25d8>
   14c1c:	ldr	r2, [r9, #16]
   14c20:	cmp	r2, #0
   14c24:	ble	14a54 <__assert_fail@plt+0x25d8>
   14c28:	ldr	r1, [pc, #1452]	; 151dc <__assert_fail@plt+0x2d60>
   14c2c:	add	r0, fp, #60	; 0x3c
   14c30:	bl	13d68 <__assert_fail@plt+0x18ec>
   14c34:	ldr	r3, [pc, #1424]	; 151cc <__assert_fail@plt+0x2d50>
   14c38:	ldr	r8, [r3, #12]
   14c3c:	b	14a54 <__assert_fail@plt+0x25d8>
   14c40:	cmp	r9, #0
   14c44:	beq	14a54 <__assert_fail@plt+0x25d8>
   14c48:	ldr	r2, [r9, #12]
   14c4c:	cmp	r2, #0
   14c50:	ble	14a54 <__assert_fail@plt+0x25d8>
   14c54:	ldr	r1, [pc, #1408]	; 151dc <__assert_fail@plt+0x2d60>
   14c58:	add	r0, fp, #56	; 0x38
   14c5c:	bl	13d68 <__assert_fail@plt+0x18ec>
   14c60:	ldr	r3, [pc, #1380]	; 151cc <__assert_fail@plt+0x2d50>
   14c64:	ldr	r8, [r3, #12]
   14c68:	b	14a54 <__assert_fail@plt+0x25d8>
   14c6c:	cmp	r9, #0
   14c70:	beq	14a54 <__assert_fail@plt+0x25d8>
   14c74:	ldr	r1, [r9, #8]
   14c78:	ldr	r0, [sl, #48]	; 0x30
   14c7c:	add	r1, r1, r1, lsl #1
   14c80:	cmp	r0, #3
   14c84:	rsb	r1, r1, r1, lsl #4
   14c88:	moveq	r0, #4
   14c8c:	rsb	r1, r1, r1, lsl #4
   14c90:	lsl	r1, r1, #7
   14c94:	bl	13e5c <__assert_fail@plt+0x19e0>
   14c98:	ldr	r3, [pc, #1324]	; 151cc <__assert_fail@plt+0x2d50>
   14c9c:	ldr	r8, [r3, #12]
   14ca0:	str	r0, [fp, #44]	; 0x2c
   14ca4:	b	14a54 <__assert_fail@plt+0x25d8>
   14ca8:	cmp	r9, #0
   14cac:	beq	14a54 <__assert_fail@plt+0x25d8>
   14cb0:	ldr	r2, [r9, #20]
   14cb4:	cmp	r2, #0
   14cb8:	blt	14a54 <__assert_fail@plt+0x25d8>
   14cbc:	ldr	r1, [pc, #1304]	; 151dc <__assert_fail@plt+0x2d60>
   14cc0:	add	r0, fp, #48	; 0x30
   14cc4:	bl	13d68 <__assert_fail@plt+0x18ec>
   14cc8:	ldr	r3, [pc, #1276]	; 151cc <__assert_fail@plt+0x2d50>
   14ccc:	ldr	r8, [r3, #12]
   14cd0:	b	14a54 <__assert_fail@plt+0x25d8>
   14cd4:	mov	r1, #0
   14cd8:	mov	r0, r6
   14cdc:	bl	15838 <__assert_fail@plt+0x33bc>
   14ce0:	cmn	r0, #1
   14ce4:	str	r0, [fp, #104]	; 0x68
   14ce8:	bne	14bc4 <__assert_fail@plt+0x2748>
   14cec:	mov	r3, #2
   14cf0:	str	r3, [fp, #104]	; 0x68
   14cf4:	ldr	r3, [pc, #1232]	; 151cc <__assert_fail@plt+0x2d50>
   14cf8:	ldr	r8, [r3, #12]
   14cfc:	b	14a54 <__assert_fail@plt+0x25d8>
   14d00:	ldr	r3, [sp, #8]
   14d04:	cmp	r3, #0
   14d08:	beq	14a54 <__assert_fail@plt+0x25d8>
   14d0c:	add	r0, r3, #8
   14d10:	bl	12014 <strdup@plt>
   14d14:	cmp	r0, #0
   14d18:	beq	151ac <__assert_fail@plt+0x2d30>
   14d1c:	str	r0, [fp, #84]	; 0x54
   14d20:	b	14a54 <__assert_fail@plt+0x25d8>
   14d24:	ldr	r3, [sp, #8]
   14d28:	cmp	r3, #0
   14d2c:	beq	14a54 <__assert_fail@plt+0x25d8>
   14d30:	ldr	r1, [r3, #340]	; 0x154
   14d34:	ldr	r0, [sl, #48]	; 0x30
   14d38:	bl	13e5c <__assert_fail@plt+0x19e0>
   14d3c:	ldr	r3, [pc, #1160]	; 151cc <__assert_fail@plt+0x2d50>
   14d40:	ldr	r8, [r3, #12]
   14d44:	str	r0, [fp, #80]	; 0x50
   14d48:	b	14a54 <__assert_fail@plt+0x25d8>
   14d4c:	ldr	r3, [sp]
   14d50:	cmp	r3, #0
   14d54:	beq	14a54 <__assert_fail@plt+0x25d8>
   14d58:	add	r0, r3, #76	; 0x4c
   14d5c:	bl	12014 <strdup@plt>
   14d60:	cmp	r0, #0
   14d64:	beq	151ac <__assert_fail@plt+0x2d30>
   14d68:	str	r0, [fp, #76]	; 0x4c
   14d6c:	b	14a54 <__assert_fail@plt+0x25d8>
   14d70:	ldr	r3, [sp]
   14d74:	cmp	r3, #0
   14d78:	beq	14a54 <__assert_fail@plt+0x25d8>
   14d7c:	add	r0, r3, #8
   14d80:	bl	12014 <strdup@plt>
   14d84:	cmp	r0, #0
   14d88:	beq	151ac <__assert_fail@plt+0x2d30>
   14d8c:	str	r0, [fp, #72]	; 0x48
   14d90:	b	14a54 <__assert_fail@plt+0x25d8>
   14d94:	ldr	r3, [sp]
   14d98:	cmp	r3, #0
   14d9c:	beq	14a54 <__assert_fail@plt+0x25d8>
   14da0:	ldr	r1, [r3, #340]	; 0x154
   14da4:	ldr	r0, [sl, #48]	; 0x30
   14da8:	bl	13e5c <__assert_fail@plt+0x19e0>
   14dac:	ldr	r3, [pc, #1048]	; 151cc <__assert_fail@plt+0x2d50>
   14db0:	ldr	r8, [r3, #12]
   14db4:	str	r0, [fp, #68]	; 0x44
   14db8:	b	14a54 <__assert_fail@plt+0x25d8>
   14dbc:	mov	r2, #0
   14dc0:	add	r8, sp, #24
   14dc4:	str	r2, [sp, #24]
   14dc8:	str	r2, [fp, #40]	; 0x28
   14dcc:	mov	r3, r8
   14dd0:	str	r2, [fp, #36]	; 0x24
   14dd4:	ldr	r1, [r6, #12]
   14dd8:	ldr	r0, [r6]
   14ddc:	bl	12248 <getgrouplist@plt>
   14de0:	ldr	r3, [sp, #24]
   14de4:	cmp	r3, #0
   14de8:	beq	15188 <__assert_fail@plt+0x2d0c>
   14dec:	lsl	r2, r3, #2
   14df0:	mov	r1, r2
   14df4:	mov	r0, #1
   14df8:	str	r2, [sp, #12]
   14dfc:	bl	11e34 <calloc@plt>
   14e00:	ldr	r2, [sp, #12]
   14e04:	adds	r3, r2, #0
   14e08:	movne	r3, #1
   14e0c:	cmp	r0, #0
   14e10:	moveq	r7, r3
   14e14:	movne	r7, #0
   14e18:	cmp	r7, #0
   14e1c:	bne	150c0 <__assert_fail@plt+0x2c44>
   14e20:	str	r0, [fp, #36]	; 0x24
   14e24:	mov	r2, r0
   14e28:	mov	r3, r8
   14e2c:	ldr	r1, [r6, #12]
   14e30:	ldr	r0, [r6]
   14e34:	bl	12248 <getgrouplist@plt>
   14e38:	cmn	r0, #1
   14e3c:	beq	15188 <__assert_fail@plt+0x2d0c>
   14e40:	ldr	ip, [sp, #24]
   14e44:	cmp	ip, #0
   14e48:	str	ip, [fp, #40]	; 0x28
   14e4c:	beq	14bc4 <__assert_fail@plt+0x2748>
   14e50:	ldr	lr, [fp, #36]	; 0x24
   14e54:	ldr	r8, [r6, #12]
   14e58:	ldr	r3, [lr]
   14e5c:	cmp	r8, r3
   14e60:	beq	151a4 <__assert_fail@plt+0x2d28>
   14e64:	mov	r3, r7
   14e68:	add	r2, lr, #4
   14e6c:	b	14e80 <__assert_fail@plt+0x2a04>
   14e70:	ldr	r0, [r1]
   14e74:	add	r2, r2, #4
   14e78:	cmp	r0, r8
   14e7c:	beq	14e90 <__assert_fail@plt+0x2a14>
   14e80:	add	r3, r3, #1
   14e84:	cmp	ip, r3
   14e88:	mov	r1, r2
   14e8c:	bne	14e70 <__assert_fail@plt+0x29f4>
   14e90:	sub	ip, ip, #1
   14e94:	str	ip, [fp, #40]	; 0x28
   14e98:	ldr	r3, [lr, ip, lsl #2]
   14e9c:	str	r3, [r1]
   14ea0:	b	14bc4 <__assert_fail@plt+0x2748>
   14ea4:	ldr	r3, [r6, #12]
   14ea8:	str	r3, [fp, #12]
   14eac:	b	14a54 <__assert_fail@plt+0x25d8>
   14eb0:	ldr	r3, [sp, #4]
   14eb4:	ldr	r0, [r3]
   14eb8:	cmp	r0, #0
   14ebc:	beq	14ecc <__assert_fail@plt+0x2a50>
   14ec0:	bl	12014 <strdup@plt>
   14ec4:	cmp	r0, #0
   14ec8:	beq	151ac <__assert_fail@plt+0x2d30>
   14ecc:	str	r0, [fp, #8]
   14ed0:	b	14a54 <__assert_fail@plt+0x25d8>
   14ed4:	cmp	r9, #0
   14ed8:	streq	r9, [fp, #64]	; 0x40
   14edc:	beq	14a54 <__assert_fail@plt+0x25d8>
   14ee0:	ldr	r1, [r9, #4]
   14ee4:	mov	r3, r1
   14ee8:	ldrsb	r2, [r3], #1
   14eec:	cmp	r2, #42	; 0x2a
   14ef0:	cmpne	r2, #33	; 0x21
   14ef4:	bne	14f10 <__assert_fail@plt+0x2a94>
   14ef8:	cmp	r3, #0
   14efc:	beq	15124 <__assert_fail@plt+0x2ca8>
   14f00:	add	r0, r1, #2
   14f04:	ldrsb	r2, [r1, #1]
   14f08:	mov	r1, r3
   14f0c:	mov	r3, r0
   14f10:	cmp	r2, #36	; 0x24
   14f14:	bne	15124 <__assert_fail@plt+0x2ca8>
   14f18:	ldrsb	r2, [r1, #1]
   14f1c:	sub	r2, r2, #49	; 0x31
   14f20:	cmp	r2, #5
   14f24:	ldrls	pc, [pc, r2, lsl #2]
   14f28:	b	15124 <__assert_fail@plt+0x2ca8>
   14f2c:	andeq	r5, r1, r0, lsr r1
   14f30:	andeq	r5, r1, r4, asr #2
   14f34:	andeq	r5, r1, r4, lsr #2
   14f38:	andeq	r5, r1, r4, lsr #2
   14f3c:	andeq	r5, r1, r8, ror #2
   14f40:	andeq	r5, r1, r0, ror #2
   14f44:	cmp	r9, #0
   14f48:	beq	15118 <__assert_fail@plt+0x2c9c>
   14f4c:	ldr	r0, [r9, #4]
   14f50:	ldrsb	r3, [r0]
   14f54:	cmp	r3, #42	; 0x2a
   14f58:	cmpne	r3, #33	; 0x21
   14f5c:	bne	14a54 <__assert_fail@plt+0x25d8>
   14f60:	add	r0, r0, #1
   14f64:	bl	14044 <__assert_fail@plt+0x1bc8>
   14f68:	cmp	r0, #0
   14f6c:	bne	14bc4 <__assert_fail@plt+0x2748>
   14f70:	mov	r3, #1
   14f74:	str	r3, [fp, #32]
   14f78:	ldr	r3, [pc, #588]	; 151cc <__assert_fail@plt+0x2d50>
   14f7c:	ldr	r8, [r3, #12]
   14f80:	b	14a54 <__assert_fail@plt+0x25d8>
   14f84:	cmp	r9, #0
   14f88:	beq	1510c <__assert_fail@plt+0x2c90>
   14f8c:	ldr	r3, [r9, #4]
   14f90:	ldrsb	r3, [r3]
   14f94:	cmp	r3, #0
   14f98:	moveq	r3, #1
   14f9c:	streq	r3, [fp, #20]
   14fa0:	b	14a54 <__assert_fail@plt+0x25d8>
   14fa4:	cmp	r9, #0
   14fa8:	beq	15100 <__assert_fail@plt+0x2c84>
   14fac:	ldr	r0, [r9, #4]
   14fb0:	ldrsb	r3, [r0]
   14fb4:	cmp	r3, #33	; 0x21
   14fb8:	bne	14a54 <__assert_fail@plt+0x25d8>
   14fbc:	add	r0, r0, #1
   14fc0:	bl	14044 <__assert_fail@plt+0x1bc8>
   14fc4:	cmp	r0, #0
   14fc8:	beq	14bc4 <__assert_fail@plt+0x2748>
   14fcc:	mov	r3, #1
   14fd0:	str	r3, [fp, #28]
   14fd4:	ldr	r3, [pc, #496]	; 151cc <__assert_fail@plt+0x2d50>
   14fd8:	ldr	r8, [r3, #12]
   14fdc:	b	14a54 <__assert_fail@plt+0x25d8>
   14fe0:	ldr	r1, [pc, #504]	; 151e0 <__assert_fail@plt+0x2d64>
   14fe4:	ldr	r0, [r6, #24]
   14fe8:	bl	11e40 <strstr@plt>
   14fec:	subs	r7, r0, #0
   14ff0:	beq	150cc <__assert_fail@plt+0x2c50>
   14ff4:	mov	r3, #1
   14ff8:	str	r3, [fp, #24]
   14ffc:	b	14a54 <__assert_fail@plt+0x25d8>
   15000:	ldr	r0, [r6, #24]
   15004:	cmp	r0, #0
   15008:	beq	15018 <__assert_fail@plt+0x2b9c>
   1500c:	bl	12014 <strdup@plt>
   15010:	cmp	r0, #0
   15014:	beq	151ac <__assert_fail@plt+0x2d30>
   15018:	str	r0, [fp, #96]	; 0x60
   1501c:	b	14a54 <__assert_fail@plt+0x25d8>
   15020:	ldr	r0, [r6, #20]
   15024:	cmp	r0, #0
   15028:	beq	15038 <__assert_fail@plt+0x2bbc>
   1502c:	bl	12014 <strdup@plt>
   15030:	cmp	r0, #0
   15034:	beq	151ac <__assert_fail@plt+0x2d30>
   15038:	str	r0, [fp, #92]	; 0x5c
   1503c:	b	14a54 <__assert_fail@plt+0x25d8>
   15040:	ldr	r0, [r6, #16]
   15044:	cmp	r0, #0
   15048:	beq	15058 <__assert_fail@plt+0x2bdc>
   1504c:	bl	12014 <strdup@plt>
   15050:	cmp	r0, #0
   15054:	beq	151ac <__assert_fail@plt+0x2d30>
   15058:	str	r0, [fp, #16]
   1505c:	b	14a54 <__assert_fail@plt+0x25d8>
   15060:	ldr	r0, [r6]
   15064:	cmp	r0, #0
   15068:	beq	15078 <__assert_fail@plt+0x2bfc>
   1506c:	bl	12014 <strdup@plt>
   15070:	cmp	r0, #0
   15074:	beq	151ac <__assert_fail@plt+0x2d30>
   15078:	str	r0, [fp]
   1507c:	b	14a54 <__assert_fail@plt+0x25d8>
   15080:	ldr	r3, [r6, #8]
   15084:	str	r3, [fp, #4]
   15088:	b	14a54 <__assert_fail@plt+0x25d8>
   1508c:	ldr	r3, [r7, #24]
   15090:	cmp	r3, r4
   15094:	bhi	150a4 <__assert_fail@plt+0x2c28>
   15098:	ldr	r3, [r7, #28]
   1509c:	cmp	r3, r4
   150a0:	bcs	149ac <__assert_fail@plt+0x2530>
   150a4:	mov	r3, #11
   150a8:	str	r3, [r5]
   150ac:	mov	fp, #0
   150b0:	b	14b7c <__assert_fail@plt+0x2700>
   150b4:	bl	12008 <getpwent@plt>
   150b8:	mov	r6, r0
   150bc:	b	14954 <__assert_fail@plt+0x24d8>
   150c0:	ldr	r1, [pc, #268]	; 151d4 <__assert_fail@plt+0x2d58>
   150c4:	mov	r0, #1
   150c8:	bl	12080 <err@plt>
   150cc:	ldr	r3, [r6, #8]
   150d0:	cmp	r3, #0
   150d4:	beq	14a54 <__assert_fail@plt+0x25d8>
   150d8:	mov	r1, r7
   150dc:	ldr	r0, [pc, #256]	; 151e4 <__assert_fail@plt+0x2d68>
   150e0:	bl	122c0 <access@plt>
   150e4:	cmp	r0, #0
   150e8:	moveq	r0, #1
   150ec:	bne	15170 <__assert_fail@plt+0x2cf4>
   150f0:	ldr	r3, [pc, #212]	; 151cc <__assert_fail@plt+0x2d50>
   150f4:	str	r0, [fp, #24]
   150f8:	ldr	r8, [r3, #12]
   150fc:	b	14a54 <__assert_fail@plt+0x25d8>
   15100:	mov	r3, #2
   15104:	str	r3, [fp, #28]
   15108:	b	14a54 <__assert_fail@plt+0x25d8>
   1510c:	mov	r3, #2
   15110:	str	r3, [fp, #20]
   15114:	b	14a54 <__assert_fail@plt+0x25d8>
   15118:	mov	r3, #2
   1511c:	str	r3, [fp, #32]
   15120:	b	14a54 <__assert_fail@plt+0x25d8>
   15124:	mov	r2, #0
   15128:	str	r2, [fp, #64]	; 0x40
   1512c:	b	14a54 <__assert_fail@plt+0x25d8>
   15130:	ldr	r2, [pc, #176]	; 151e8 <__assert_fail@plt+0x2d6c>
   15134:	ldrsb	r3, [r3, #1]
   15138:	cmp	r3, #36	; 0x24
   1513c:	movne	r2, #0
   15140:	b	15128 <__assert_fail@plt+0x2cac>
   15144:	ldrsb	r2, [r1, #2]
   15148:	add	r3, r1, #2
   1514c:	cmp	r2, #121	; 0x79
   15150:	cmpne	r2, #97	; 0x61
   15154:	ldr	r2, [pc, #144]	; 151ec <__assert_fail@plt+0x2d70>
   15158:	movne	r2, #0
   1515c:	b	15134 <__assert_fail@plt+0x2cb8>
   15160:	ldr	r2, [pc, #136]	; 151f0 <__assert_fail@plt+0x2d74>
   15164:	b	15134 <__assert_fail@plt+0x2cb8>
   15168:	ldr	r2, [pc, #132]	; 151f4 <__assert_fail@plt+0x2d78>
   1516c:	b	15134 <__assert_fail@plt+0x2cb8>
   15170:	mov	r1, r7
   15174:	ldr	r0, [pc, #124]	; 151f8 <__assert_fail@plt+0x2d7c>
   15178:	bl	122c0 <access@plt>
   1517c:	clz	r0, r0
   15180:	lsr	r0, r0, #5
   15184:	b	150f0 <__assert_fail@plt+0x2c74>
   15188:	ldr	r1, [pc, #108]	; 151fc <__assert_fail@plt+0x2d80>
   1518c:	mov	r2, #5
   15190:	mov	r0, #0
   15194:	bl	11ffc <dcgettext@plt>
   15198:	mov	r1, r0
   1519c:	mov	r0, #1
   151a0:	bl	12080 <err@plt>
   151a4:	mov	r1, lr
   151a8:	b	14e90 <__assert_fail@plt+0x2a14>
   151ac:	ldr	r1, [pc, #76]	; 15200 <__assert_fail@plt+0x2d84>
   151b0:	mov	r0, #1
   151b4:	bl	12080 <err@plt>
   151b8:	bl	1202c <__stack_chk_fail@plt>
   151bc:	ldr	r1, [pc, #64]	; 15204 <__assert_fail@plt+0x2d88>
   151c0:	mov	r0, #1
   151c4:	bl	12080 <err@plt>
   151c8:			; <UNDEFINED> instruction: 0x0002bcb0
   151cc:	andeq	ip, r2, r0, lsr r0
   151d0:	strdeq	r9, [r1], -r8
   151d4:	andeq	r9, r1, r8, asr #20
   151d8:	andeq	r9, r1, r8, asr fp
   151dc:	andeq	r9, r1, r4, asr fp
   151e0:	andeq	r9, r1, r8, lsr #22
   151e4:	andeq	r9, r1, r0, lsr fp
   151e8:	ldrdeq	r9, [r1], -r8
   151ec:	andeq	r9, r1, ip, ror #21
   151f0:	ldrdeq	r9, [r1], -ip
   151f4:	andeq	r9, r1, r4, ror #21
   151f8:	andeq	r9, r1, r0, asr #22
   151fc:	andeq	r9, r1, r4, lsl #22
   15200:	strdeq	r9, [r1], -r8
   15204:	andeq	r9, r1, ip, asr fp
   15208:	push	{r4, r5, r6, lr}
   1520c:	ldr	r6, [pc, #64]	; 15254 <__assert_fail@plt+0x2dd8>
   15210:	ldr	r4, [r6]
   15214:	cmp	r4, #0
   15218:	beq	15248 <__assert_fail@plt+0x2dcc>
   1521c:	ldr	r0, [r4, #8]
   15220:	ldr	r5, [r4, #12]
   15224:	bl	11f3c <free@plt>
   15228:	ldr	r0, [r4]
   1522c:	bl	11f3c <free@plt>
   15230:	ldr	r0, [r4, #4]
   15234:	bl	11f3c <free@plt>
   15238:	mov	r0, r4
   1523c:	bl	11f3c <free@plt>
   15240:	subs	r4, r5, #0
   15244:	bne	1521c <__assert_fail@plt+0x2da0>
   15248:	mov	r3, #0
   1524c:	str	r3, [r6]
   15250:	pop	{r4, r5, r6, pc}
   15254:	andeq	ip, r2, r0, lsr #2
   15258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1525c:	sub	sp, sp, #8192	; 0x2000
   15260:	ldr	r6, [pc, #692]	; 1551c <__assert_fail@plt+0x30a0>
   15264:	sub	sp, sp, #12
   15268:	add	r2, sp, #8192	; 0x2000
   1526c:	ldr	r3, [r6]
   15270:	add	r2, r2, #4
   15274:	ldr	r1, [pc, #676]	; 15520 <__assert_fail@plt+0x30a4>
   15278:	mov	r7, r0
   1527c:	str	r3, [r2]
   15280:	bl	123b0 <fopen64@plt>
   15284:	subs	r5, r0, #0
   15288:	beq	15458 <__assert_fail@plt+0x2fdc>
   1528c:	ldr	r8, [pc, #656]	; 15524 <__assert_fail@plt+0x30a8>
   15290:	mov	r4, #0
   15294:	mov	r2, r5
   15298:	mov	r1, #8192	; 0x2000
   1529c:	add	r0, sp, #4
   152a0:	bl	11f54 <fgets@plt>
   152a4:	cmp	r0, #0
   152a8:	beq	15450 <__assert_fail@plt+0x2fd4>
   152ac:	ldrsb	r9, [sp, #4]
   152b0:	cmp	r9, #10
   152b4:	cmpne	r9, #35	; 0x23
   152b8:	moveq	sl, #1
   152bc:	movne	sl, #0
   152c0:	beq	15294 <__assert_fail@plt+0x2e18>
   152c4:	mov	r1, #35	; 0x23
   152c8:	add	r0, sp, #4
   152cc:	bl	121a0 <strchr@plt>
   152d0:	subs	fp, r0, #0
   152d4:	beq	15420 <__assert_fail@plt+0x2fa4>
   152d8:	strb	sl, [fp]
   152dc:	ldrsb	r9, [sp, #4]
   152e0:	cmp	r9, #0
   152e4:	beq	15294 <__assert_fail@plt+0x2e18>
   152e8:	bl	12170 <__ctype_b_loc@plt>
   152ec:	add	fp, sp, #4
   152f0:	ldr	sl, [r0]
   152f4:	b	15304 <__assert_fail@plt+0x2e88>
   152f8:	ldrsb	r9, [fp, #1]!
   152fc:	cmp	r9, #0
   15300:	beq	15294 <__assert_fail@plt+0x2e18>
   15304:	lsl	r9, r9, #1
   15308:	ldrh	r3, [sl, r9]
   1530c:	tst	r3, #8192	; 0x2000
   15310:	bne	152f8 <__assert_fail@plt+0x2e7c>
   15314:	ldrsb	r2, [fp]
   15318:	cmp	r2, #0
   1531c:	movne	r9, fp
   15320:	bne	15334 <__assert_fail@plt+0x2eb8>
   15324:	b	15294 <__assert_fail@plt+0x2e18>
   15328:	ldrsb	r2, [r9, #1]!
   1532c:	cmp	r2, #0
   15330:	beq	1547c <__assert_fail@plt+0x3000>
   15334:	lsl	r3, r2, #1
   15338:	ldrh	r3, [sl, r3]
   1533c:	lsr	r3, r3, #13
   15340:	eor	r3, r3, #1
   15344:	cmp	r2, #61	; 0x3d
   15348:	moveq	r3, #0
   1534c:	andne	r3, r3, #1
   15350:	cmp	r3, #0
   15354:	bne	15328 <__assert_fail@plt+0x2eac>
   15358:	cmp	fp, r9
   1535c:	bcc	154cc <__assert_fail@plt+0x3050>
   15360:	moveq	r3, #1
   15364:	movne	r3, #0
   15368:	cmp	r3, #0
   1536c:	bne	15294 <__assert_fail@plt+0x2e18>
   15370:	ldrsb	r3, [r9]
   15374:	cmp	r3, #0
   15378:	beq	153ac <__assert_fail@plt+0x2f30>
   1537c:	lsl	r2, r3, #1
   15380:	cmp	r3, #61	; 0x3d
   15384:	cmpne	r3, #34	; 0x22
   15388:	ldrh	r2, [sl, r2]
   1538c:	moveq	r3, #1
   15390:	movne	r3, #0
   15394:	lsl	r2, r2, #18
   15398:	orrs	r3, r3, r2, lsr #31
   1539c:	beq	153ac <__assert_fail@plt+0x2f30>
   153a0:	ldrsb	r3, [r9, #1]!
   153a4:	cmp	r3, #0
   153a8:	bne	1537c <__assert_fail@plt+0x2f00>
   153ac:	mov	r0, r9
   153b0:	bl	12194 <strlen@plt>
   153b4:	add	r0, r9, r0
   153b8:	cmp	r0, r9
   153bc:	bhi	15488 <__assert_fail@plt+0x300c>
   153c0:	mov	r0, #16
   153c4:	bl	1211c <malloc@plt>
   153c8:	subs	sl, r0, #0
   153cc:	beq	15508 <__assert_fail@plt+0x308c>
   153d0:	mov	r0, fp
   153d4:	bl	12014 <strdup@plt>
   153d8:	subs	r3, r0, #0
   153dc:	beq	154fc <__assert_fail@plt+0x3080>
   153e0:	ldrsb	r0, [r9]
   153e4:	str	r3, [sl]
   153e8:	cmp	r0, #0
   153ec:	bne	154ec <__assert_fail@plt+0x3070>
   153f0:	cmp	r7, #0
   153f4:	str	r0, [sl, #4]
   153f8:	mov	r0, r7
   153fc:	beq	1540c <__assert_fail@plt+0x2f90>
   15400:	bl	12014 <strdup@plt>
   15404:	cmp	r0, #0
   15408:	beq	154fc <__assert_fail@plt+0x3080>
   1540c:	ldr	r3, [r8]
   15410:	str	r0, [sl, #8]
   15414:	str	r3, [sl, #12]
   15418:	str	sl, [r8]
   1541c:	b	15294 <__assert_fail@plt+0x2e18>
   15420:	add	r0, sp, #4
   15424:	bl	12194 <strlen@plt>
   15428:	cmp	r0, #0
   1542c:	beq	152e0 <__assert_fail@plt+0x2e64>
   15430:	sub	r0, r0, #1
   15434:	add	r3, sp, #4
   15438:	ldrsb	r3, [r3, r0]
   1543c:	cmp	r3, #10
   15440:	addeq	r3, sp, #4
   15444:	strbeq	fp, [r3, r0]
   15448:	ldrsbeq	r9, [sp, #4]
   1544c:	b	152e0 <__assert_fail@plt+0x2e64>
   15450:	mov	r0, r5
   15454:	bl	122cc <fclose@plt>
   15458:	add	r3, sp, #8192	; 0x2000
   1545c:	add	r3, r3, #4
   15460:	ldr	r2, [r3]
   15464:	ldr	r3, [r6]
   15468:	cmp	r2, r3
   1546c:	bne	15518 <__assert_fail@plt+0x309c>
   15470:	add	sp, sp, #8192	; 0x2000
   15474:	add	sp, sp, #12
   15478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1547c:	cmp	r9, fp
   15480:	bhi	153ac <__assert_fail@plt+0x2f30>
   15484:	b	15360 <__assert_fail@plt+0x2ee4>
   15488:	sub	r3, r0, #1
   1548c:	cmp	r9, r3
   15490:	bcs	153c0 <__assert_fail@plt+0x2f44>
   15494:	add	r1, r9, #1
   15498:	b	154a8 <__assert_fail@plt+0x302c>
   1549c:	cmp	r1, r0
   154a0:	strb	r4, [r0]
   154a4:	beq	153c0 <__assert_fail@plt+0x2f44>
   154a8:	ldrsb	r2, [r0, #-1]!
   154ac:	lsl	r3, r2, #1
   154b0:	ldrh	r3, [sl, r3]
   154b4:	lsr	r3, r3, #13
   154b8:	cmp	r2, #34	; 0x22
   154bc:	orreq	r3, r3, #1
   154c0:	tst	r3, #1
   154c4:	bne	1549c <__assert_fail@plt+0x3020>
   154c8:	b	153c0 <__assert_fail@plt+0x2f44>
   154cc:	strb	r3, [r9], #1
   154d0:	ldrsb	r2, [fp]
   154d4:	sub	r3, r9, fp
   154d8:	clz	r3, r3
   154dc:	cmp	r2, #0
   154e0:	lsr	r3, r3, #5
   154e4:	moveq	r3, #1
   154e8:	b	15368 <__assert_fail@plt+0x2eec>
   154ec:	mov	r0, r9
   154f0:	bl	12014 <strdup@plt>
   154f4:	cmp	r0, #0
   154f8:	bne	153f0 <__assert_fail@plt+0x2f74>
   154fc:	ldr	r1, [pc, #36]	; 15528 <__assert_fail@plt+0x30ac>
   15500:	mov	r0, #1
   15504:	bl	12080 <err@plt>
   15508:	mov	r2, #16
   1550c:	ldr	r1, [pc, #24]	; 1552c <__assert_fail@plt+0x30b0>
   15510:	mov	r0, #1
   15514:	bl	12080 <err@plt>
   15518:	bl	1202c <__stack_chk_fail@plt>
   1551c:			; <UNDEFINED> instruction: 0x0002bcb0
   15520:	muleq	r1, r0, sl
   15524:	andeq	ip, r2, r0, lsr #2
   15528:	strdeq	r9, [r1], -r8
   1552c:	andeq	r9, r1, r8, asr #20
   15530:	push	{r4, r5, r6, lr}
   15534:	mov	r5, r0
   15538:	ldr	r6, [pc, #108]	; 155ac <__assert_fail@plt+0x3130>
   1553c:	ldr	r4, [r6]
   15540:	cmp	r4, #0
   15544:	bne	15558 <__assert_fail@plt+0x30dc>
   15548:	b	15574 <__assert_fail@plt+0x30f8>
   1554c:	ldr	r4, [r4, #12]
   15550:	cmp	r4, #0
   15554:	beq	15594 <__assert_fail@plt+0x3118>
   15558:	ldr	r1, [r4]
   1555c:	mov	r0, r5
   15560:	bl	12074 <strcasecmp@plt>
   15564:	cmp	r0, #0
   15568:	bne	1554c <__assert_fail@plt+0x30d0>
   1556c:	mov	r0, r4
   15570:	pop	{r4, r5, r6, pc}
   15574:	ldr	r3, [r6, #4]
   15578:	cmp	r3, #0
   1557c:	beq	155a0 <__assert_fail@plt+0x3124>
   15580:	ldr	r0, [r6, #8]
   15584:	blx	r3
   15588:	ldr	r4, [r6]
   1558c:	cmp	r4, #0
   15590:	bne	15558 <__assert_fail@plt+0x30dc>
   15594:	mov	r4, #0
   15598:	mov	r0, r4
   1559c:	pop	{r4, r5, r6, pc}
   155a0:	ldr	r0, [pc, #8]	; 155b0 <__assert_fail@plt+0x3134>
   155a4:	bl	15258 <__assert_fail@plt+0x2ddc>
   155a8:	b	15588 <__assert_fail@plt+0x310c>
   155ac:	andeq	ip, r2, r0, lsr #2
   155b0:	muleq	r1, r4, sl
   155b4:	ldr	r3, [pc, #4]	; 155c0 <__assert_fail@plt+0x3144>
   155b8:	strd	r0, [r3, #4]
   155bc:	bx	lr
   155c0:	andeq	ip, r2, r0, lsr #2
   155c4:	push	{r4, lr}
   155c8:	mov	r4, r1
   155cc:	bl	15530 <__assert_fail@plt+0x30b4>
   155d0:	cmp	r0, #0
   155d4:	beq	155f4 <__assert_fail@plt+0x3178>
   155d8:	ldr	r0, [r0, #4]
   155dc:	cmp	r0, #0
   155e0:	beq	155f4 <__assert_fail@plt+0x3178>
   155e4:	ldr	r1, [pc, #16]	; 155fc <__assert_fail@plt+0x3180>
   155e8:	bl	12074 <strcasecmp@plt>
   155ec:	clz	r4, r0
   155f0:	lsr	r4, r4, #5
   155f4:	mov	r0, r4
   155f8:	pop	{r4, pc}
   155fc:	andeq	sl, r1, ip, ror sl
   15600:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15604:	sub	sp, sp, #16
   15608:	ldr	r5, [pc, #252]	; 1570c <__assert_fail@plt+0x3290>
   1560c:	mov	r8, r1
   15610:	mov	r6, r0
   15614:	ldr	r3, [r5]
   15618:	mov	r4, #0
   1561c:	str	r3, [sp, #12]
   15620:	bl	15530 <__assert_fail@plt+0x30b4>
   15624:	str	r4, [sp, #8]
   15628:	subs	r7, r0, #0
   1562c:	beq	156e4 <__assert_fail@plt+0x3268>
   15630:	ldr	r9, [r7, #4]
   15634:	cmp	r9, r4
   15638:	beq	156e4 <__assert_fail@plt+0x3268>
   1563c:	bl	121f4 <__errno_location@plt>
   15640:	mov	r2, r4
   15644:	add	r1, sp, #8
   15648:	str	r4, [r0]
   1564c:	mov	sl, r0
   15650:	mov	r0, r9
   15654:	bl	12188 <strtoul@plt>
   15658:	ldr	r3, [sp, #8]
   1565c:	cmp	r3, #0
   15660:	beq	1567c <__assert_fail@plt+0x3200>
   15664:	ldrsb	r3, [r3]
   15668:	cmp	r3, #0
   1566c:	bne	1567c <__assert_fail@plt+0x3200>
   15670:	ldr	r3, [sl]
   15674:	cmp	r3, #0
   15678:	beq	156e8 <__assert_fail@plt+0x326c>
   1567c:	mov	r2, #5
   15680:	ldr	r1, [pc, #136]	; 15710 <__assert_fail@plt+0x3294>
   15684:	mov	r0, #0
   15688:	bl	11ffc <dcgettext@plt>
   1568c:	ldr	r3, [pc, #128]	; 15714 <__assert_fail@plt+0x3298>
   15690:	ldr	r4, [r3]
   15694:	cmp	r4, #0
   15698:	mov	r9, r0
   1569c:	bne	156b0 <__assert_fail@plt+0x3234>
   156a0:	b	15700 <__assert_fail@plt+0x3284>
   156a4:	ldr	r4, [r4, #12]
   156a8:	cmp	r4, #0
   156ac:	beq	15700 <__assert_fail@plt+0x3284>
   156b0:	ldr	r1, [r4]
   156b4:	mov	r0, r6
   156b8:	bl	12074 <strcasecmp@plt>
   156bc:	cmp	r0, #0
   156c0:	bne	156a4 <__assert_fail@plt+0x3228>
   156c4:	ldr	r3, [r4, #8]
   156c8:	ldr	r2, [r7, #4]
   156cc:	mov	r1, #1
   156d0:	str	r2, [sp, #4]
   156d4:	str	r6, [sp]
   156d8:	mov	r2, r9
   156dc:	mov	r0, #5
   156e0:	bl	122f0 <__syslog_chk@plt>
   156e4:	mov	r0, r8
   156e8:	ldr	r2, [sp, #12]
   156ec:	ldr	r3, [r5]
   156f0:	cmp	r2, r3
   156f4:	bne	15708 <__assert_fail@plt+0x328c>
   156f8:	add	sp, sp, #16
   156fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15700:	mov	r3, r4
   15704:	b	156c8 <__assert_fail@plt+0x324c>
   15708:	bl	1202c <__stack_chk_fail@plt>
   1570c:			; <UNDEFINED> instruction: 0x0002bcb0
   15710:	andeq	sl, r1, r4, lsr #21
   15714:	andeq	ip, r2, r0, lsr #2
   15718:	push	{r4, lr}
   1571c:	mov	r4, r1
   15720:	bl	15530 <__assert_fail@plt+0x30b4>
   15724:	cmp	r0, #0
   15728:	beq	15740 <__assert_fail@plt+0x32c4>
   1572c:	ldr	r0, [r0, #4]
   15730:	ldr	r3, [pc, #16]	; 15748 <__assert_fail@plt+0x32cc>
   15734:	cmp	r0, #0
   15738:	moveq	r0, r3
   1573c:	pop	{r4, pc}
   15740:	mov	r0, r4
   15744:	pop	{r4, pc}
   15748:	strdeq	r9, [r1], -r0
   1574c:	push	{r4, r5, r6, r7, r8, lr}
   15750:	mov	r5, r0
   15754:	mov	r0, r1
   15758:	mov	r6, r2
   1575c:	bl	15530 <__assert_fail@plt+0x30b4>
   15760:	cmp	r0, #0
   15764:	beq	157f0 <__assert_fail@plt+0x3374>
   15768:	ldr	r4, [r0, #4]
   1576c:	cmp	r4, #0
   15770:	beq	15800 <__assert_fail@plt+0x3384>
   15774:	mov	r1, #61	; 0x3d
   15778:	mov	r0, r4
   1577c:	bl	121a0 <strchr@plt>
   15780:	subs	r7, r0, #0
   15784:	beq	157dc <__assert_fail@plt+0x3360>
   15788:	mov	r0, r5
   1578c:	bl	12194 <strlen@plt>
   15790:	mov	r1, r5
   15794:	mov	r2, r0
   15798:	mov	r0, r4
   1579c:	bl	123ec <strncmp@plt>
   157a0:	cmp	r0, #0
   157a4:	bne	157dc <__assert_fail@plt+0x3360>
   157a8:	ldrsb	r3, [r7, #1]
   157ac:	cmp	r3, #0
   157b0:	beq	157dc <__assert_fail@plt+0x3360>
   157b4:	cmp	r3, #34	; 0x22
   157b8:	addne	r4, r7, #1
   157bc:	bne	157dc <__assert_fail@plt+0x3360>
   157c0:	ldrsb	r3, [r7, #2]
   157c4:	add	r4, r7, #2
   157c8:	cmp	r3, #0
   157cc:	bne	157dc <__assert_fail@plt+0x3360>
   157d0:	cmp	r6, #0
   157d4:	movne	r4, r6
   157d8:	beq	15808 <__assert_fail@plt+0x338c>
   157dc:	mov	r1, r4
   157e0:	mov	r0, r5
   157e4:	mov	r2, #1
   157e8:	pop	{r4, r5, r6, r7, r8, lr}
   157ec:	b	121ac <setenv@plt>
   157f0:	cmp	r6, #0
   157f4:	beq	15808 <__assert_fail@plt+0x338c>
   157f8:	mov	r4, r6
   157fc:	b	15774 <__assert_fail@plt+0x32f8>
   15800:	ldr	r4, [pc, #8]	; 15810 <__assert_fail@plt+0x3394>
   15804:	b	157dc <__assert_fail@plt+0x3360>
   15808:	mvn	r0, #0
   1580c:	pop	{r4, r5, r6, r7, r8, pc}
   15810:	strdeq	r9, [r1], -r0
   15814:	push	{r4, lr}
   15818:	bl	121dc <__open64_2@plt>
   1581c:	cmn	r0, #1
   15820:	moveq	r3, r0
   15824:	beq	15830 <__assert_fail@plt+0x33b4>
   15828:	bl	1241c <close@plt>
   1582c:	mov	r3, #0
   15830:	mov	r0, r3
   15834:	pop	{r4, pc}
   15838:	ldr	r3, [pc, #704]	; 15b00 <__assert_fail@plt+0x3684>
   1583c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15840:	mov	r4, r0
   15844:	sub	sp, sp, #8320	; 0x2080
   15848:	mov	r6, r1
   1584c:	ldm	r3, {r0, r1, r2}
   15850:	sub	sp, sp, #12
   15854:	add	r3, sp, #120	; 0x78
   15858:	ldr	r8, [pc, #676]	; 15b04 <__assert_fail@plt+0x3688>
   1585c:	stm	r3, {r0, r1, r2}
   15860:	add	r2, sp, #8320	; 0x2080
   15864:	ldr	r3, [r8]
   15868:	add	r2, r2, #4
   1586c:	ldr	r0, [pc, #660]	; 15b08 <__assert_fail@plt+0x368c>
   15870:	str	r3, [r2]
   15874:	bl	15530 <__assert_fail@plt+0x30b4>
   15878:	cmp	r0, #0
   1587c:	beq	15ac0 <__assert_fail@plt+0x3644>
   15880:	ldr	sl, [r0, #4]
   15884:	cmp	sl, #0
   15888:	beq	15a64 <__assert_fail@plt+0x35e8>
   1588c:	ldrsb	r3, [sl]
   15890:	cmp	r3, #0
   15894:	movne	r2, #0
   15898:	strne	sl, [sp, #120]	; 0x78
   1589c:	strne	r2, [sp, #124]	; 0x7c
   158a0:	beq	15a64 <__assert_fail@plt+0x35e8>
   158a4:	add	r2, sp, #136	; 0x88
   158a8:	ldr	r9, [pc, #604]	; 15b0c <__assert_fail@plt+0x3690>
   158ac:	add	r5, sp, #124	; 0x7c
   158b0:	sub	r7, r2, #4
   158b4:	b	15968 <__assert_fail@plt+0x34ec>
   158b8:	ldr	fp, [r4, #20]
   158bc:	mov	r0, fp
   158c0:	bl	12194 <strlen@plt>
   158c4:	add	r0, r0, #6
   158c8:	cmp	r0, #8192	; 0x2000
   158cc:	bhi	15958 <__assert_fail@plt+0x34dc>
   158d0:	str	sl, [sp, #4]
   158d4:	str	fp, [sp]
   158d8:	mov	r3, r9
   158dc:	mov	r2, #8192	; 0x2000
   158e0:	mov	r1, #1
   158e4:	mov	r0, r7
   158e8:	bl	12218 <__sprintf_chk@plt>
   158ec:	cmp	r6, #0
   158f0:	beq	15a2c <__assert_fail@plt+0x35b0>
   158f4:	bl	11f18 <getuid@plt>
   158f8:	mov	fp, r0
   158fc:	bl	120a4 <getegid@plt>
   15900:	ldr	r1, [r4, #12]
   15904:	str	r0, [sp, #12]
   15908:	mvn	r0, #0
   1590c:	bl	122e4 <setregid@plt>
   15910:	cmp	r0, #0
   15914:	beq	15a90 <__assert_fail@plt+0x3614>
   15918:	mov	sl, #0
   1591c:	mov	r0, #0
   15920:	bl	1235c <setuid@plt>
   15924:	subs	r1, r0, #0
   15928:	bne	15ad4 <__assert_fail@plt+0x3658>
   1592c:	mov	r0, fp
   15930:	bl	121d0 <setreuid@plt>
   15934:	cmp	r0, #0
   15938:	bne	15ad4 <__assert_fail@plt+0x3658>
   1593c:	ldr	r1, [sp, #12]
   15940:	mvn	r0, #0
   15944:	bl	122e4 <setregid@plt>
   15948:	cmp	r0, #0
   1594c:	bne	15ad4 <__assert_fail@plt+0x3658>
   15950:	cmp	sl, #0
   15954:	bne	15a24 <__assert_fail@plt+0x35a8>
   15958:	ldr	sl, [r5], #4
   1595c:	cmp	sl, #0
   15960:	beq	15a64 <__assert_fail@plt+0x35e8>
   15964:	ldrsb	r3, [sl]
   15968:	cmp	r3, #47	; 0x2f
   1596c:	bne	158b8 <__assert_fail@plt+0x343c>
   15970:	add	r2, sp, #16
   15974:	mov	r1, sl
   15978:	mov	r0, #3
   1597c:	bl	123d4 <__xstat64@plt>
   15980:	subs	fp, r0, #0
   15984:	bne	15958 <__assert_fail@plt+0x34dc>
   15988:	ldrd	r2, [sp, #64]	; 0x40
   1598c:	orrs	r3, r2, r3
   15990:	beq	15a24 <__assert_fail@plt+0x35a8>
   15994:	mov	r0, sl
   15998:	ldr	r1, [pc, #368]	; 15b10 <__assert_fail@plt+0x3694>
   1599c:	bl	123b0 <fopen64@plt>
   159a0:	subs	sl, r0, #0
   159a4:	beq	15958 <__assert_fail@plt+0x34dc>
   159a8:	mov	r5, fp
   159ac:	b	159e4 <__assert_fail@plt+0x3568>
   159b0:	add	r0, sp, #132	; 0x84
   159b4:	bl	12194 <strlen@plt>
   159b8:	add	r3, sp, #136	; 0x88
   159bc:	add	r0, r3, r0
   159c0:	strb	r5, [r0, #-5]
   159c4:	ldrsb	r3, [sp, #132]	; 0x84
   159c8:	cmp	r3, #47	; 0x2f
   159cc:	bne	15a08 <__assert_fail@plt+0x358c>
   159d0:	ldr	r1, [r4, #24]
   159d4:	add	r0, sp, #132	; 0x84
   159d8:	bl	11eac <strcmp@plt>
   159dc:	cmp	r0, #0
   159e0:	beq	15a1c <__assert_fail@plt+0x35a0>
   159e4:	mov	r2, sl
   159e8:	mov	r1, #8192	; 0x2000
   159ec:	add	r0, sp, #132	; 0x84
   159f0:	bl	11f54 <fgets@plt>
   159f4:	cmp	r0, #0
   159f8:	beq	15ab4 <__assert_fail@plt+0x3638>
   159fc:	ldrsb	r3, [sp, #132]	; 0x84
   15a00:	cmp	r3, #0
   15a04:	bne	159b0 <__assert_fail@plt+0x3534>
   15a08:	ldr	r1, [r4]
   15a0c:	add	r0, sp, #132	; 0x84
   15a10:	bl	11eac <strcmp@plt>
   15a14:	cmp	r0, #0
   15a18:	bne	159e4 <__assert_fail@plt+0x3568>
   15a1c:	mov	r0, sl
   15a20:	bl	122cc <fclose@plt>
   15a24:	mov	fp, #1
   15a28:	b	15a68 <__assert_fail@plt+0x35ec>
   15a2c:	mov	r1, r6
   15a30:	mov	r0, r7
   15a34:	bl	15814 <__assert_fail@plt+0x3398>
   15a38:	subs	fp, r0, #0
   15a3c:	beq	15a24 <__assert_fail@plt+0x35a8>
   15a40:	cmn	fp, #1
   15a44:	bne	15958 <__assert_fail@plt+0x34dc>
   15a48:	bl	121f4 <__errno_location@plt>
   15a4c:	ldr	r3, [r0]
   15a50:	cmp	r3, #13
   15a54:	beq	15a68 <__assert_fail@plt+0x35ec>
   15a58:	ldr	sl, [r5], #4
   15a5c:	cmp	sl, #0
   15a60:	bne	15964 <__assert_fail@plt+0x34e8>
   15a64:	mov	fp, #0
   15a68:	add	r3, sp, #8320	; 0x2080
   15a6c:	add	r3, r3, #4
   15a70:	ldr	r2, [r3]
   15a74:	ldr	r3, [r8]
   15a78:	mov	r0, fp
   15a7c:	cmp	r2, r3
   15a80:	bne	15afc <__assert_fail@plt+0x3680>
   15a84:	add	sp, sp, #8320	; 0x2080
   15a88:	add	sp, sp, #12
   15a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a90:	ldr	r1, [r4, #8]
   15a94:	bl	121d0 <setreuid@plt>
   15a98:	subs	r1, r0, #0
   15a9c:	bne	15918 <__assert_fail@plt+0x349c>
   15aa0:	mov	r0, r7
   15aa4:	bl	15814 <__assert_fail@plt+0x3398>
   15aa8:	clz	sl, r0
   15aac:	lsr	sl, sl, #5
   15ab0:	b	1591c <__assert_fail@plt+0x34a0>
   15ab4:	mov	r0, sl
   15ab8:	bl	122cc <fclose@plt>
   15abc:	b	15a68 <__assert_fail@plt+0x35ec>
   15ac0:	ldr	sl, [sp, #120]	; 0x78
   15ac4:	cmp	sl, #0
   15ac8:	beq	15a64 <__assert_fail@plt+0x35e8>
   15acc:	ldrsb	r3, [sl]
   15ad0:	b	158a4 <__assert_fail@plt+0x3428>
   15ad4:	mov	r2, #5
   15ad8:	ldr	r1, [pc, #52]	; 15b14 <__assert_fail@plt+0x3698>
   15adc:	mov	r0, #0
   15ae0:	bl	11ffc <dcgettext@plt>
   15ae4:	mov	r1, #1
   15ae8:	mov	r2, r0
   15aec:	mov	r0, r1
   15af0:	bl	122f0 <__syslog_chk@plt>
   15af4:	mov	r0, #1
   15af8:	bl	1217c <exit@plt>
   15afc:	bl	1202c <__stack_chk_fail@plt>
   15b00:	andeq	sl, r1, r4, lsl #21
   15b04:			; <UNDEFINED> instruction: 0x0002bcb0
   15b08:	ldrdeq	sl, [r1], -r0
   15b0c:	andeq	sl, r1, r0, ror #21
   15b10:	muleq	r1, r0, sl
   15b14:	andeq	sl, r1, r8, ror #21
   15b18:	cmp	r0, #0
   15b1c:	mov	r3, #0
   15b20:	str	r3, [r1]
   15b24:	bxeq	lr
   15b28:	ldrsb	r2, [r0]
   15b2c:	cmp	r2, #47	; 0x2f
   15b30:	bne	15b6c <__assert_fail@plt+0x36f0>
   15b34:	ldrsb	r3, [r0, #1]
   15b38:	cmp	r3, #47	; 0x2f
   15b3c:	bne	15b74 <__assert_fail@plt+0x36f8>
   15b40:	add	r3, r0, #1
   15b44:	b	15b54 <__assert_fail@plt+0x36d8>
   15b48:	ldrsb	r2, [r3]
   15b4c:	cmp	r2, #47	; 0x2f
   15b50:	bne	15b74 <__assert_fail@plt+0x36f8>
   15b54:	cmp	r3, #0
   15b58:	mov	r0, r3
   15b5c:	bxeq	lr
   15b60:	ldrsb	r2, [r3], #1
   15b64:	cmp	r2, #47	; 0x2f
   15b68:	beq	15b48 <__assert_fail@plt+0x36cc>
   15b6c:	cmp	r2, #0
   15b70:	beq	15bb0 <__assert_fail@plt+0x3734>
   15b74:	mov	r3, #1
   15b78:	str	r3, [r1]
   15b7c:	ldrsb	r3, [r0, #1]
   15b80:	add	r2, r0, #1
   15b84:	cmp	r3, #47	; 0x2f
   15b88:	cmpne	r3, #0
   15b8c:	bxeq	lr
   15b90:	rsb	r3, r0, #1
   15b94:	add	ip, r2, r3
   15b98:	str	ip, [r1]
   15b9c:	ldrsb	ip, [r2, #1]!
   15ba0:	cmp	ip, #0
   15ba4:	cmpne	ip, #47	; 0x2f
   15ba8:	bne	15b94 <__assert_fail@plt+0x3718>
   15bac:	bx	lr
   15bb0:	mov	r0, r2
   15bb4:	bx	lr
   15bb8:	push	{r4, r5, r6, r7, r8, lr}
   15bbc:	mov	r7, r1
   15bc0:	ldrsb	r1, [r0]
   15bc4:	cmp	r1, #0
   15bc8:	movne	r5, r0
   15bcc:	movne	r4, #0
   15bd0:	beq	15c3c <__assert_fail@plt+0x37c0>
   15bd4:	cmp	r1, #92	; 0x5c
   15bd8:	addne	r6, r5, r4
   15bdc:	beq	15c0c <__assert_fail@plt+0x3790>
   15be0:	mov	r0, r7
   15be4:	bl	121a0 <strchr@plt>
   15be8:	cmp	r0, #0
   15bec:	bne	15c34 <__assert_fail@plt+0x37b8>
   15bf0:	ldrsb	r1, [r6, #1]!
   15bf4:	add	r4, r4, #1
   15bf8:	mov	r0, r4
   15bfc:	cmp	r1, #0
   15c00:	popeq	{r4, r5, r6, r7, r8, pc}
   15c04:	cmp	r1, #92	; 0x5c
   15c08:	bne	15be0 <__assert_fail@plt+0x3764>
   15c0c:	add	r3, r5, r4
   15c10:	ldrsb	r3, [r3, #1]
   15c14:	cmp	r3, #0
   15c18:	beq	15c34 <__assert_fail@plt+0x37b8>
   15c1c:	add	r4, r4, #2
   15c20:	mov	r0, r4
   15c24:	ldrsb	r1, [r5, r4]
   15c28:	cmp	r1, #0
   15c2c:	bne	15bd4 <__assert_fail@plt+0x3758>
   15c30:	pop	{r4, r5, r6, r7, r8, pc}
   15c34:	mov	r0, r4
   15c38:	pop	{r4, r5, r6, r7, r8, pc}
   15c3c:	mov	r0, r1
   15c40:	pop	{r4, r5, r6, r7, r8, pc}
   15c44:	ldr	ip, [pc, #244]	; 15d40 <__assert_fail@plt+0x38c4>
   15c48:	push	{r4, r5, r6, r7, r8, r9, lr}
   15c4c:	add	ip, pc, ip
   15c50:	ldr	lr, [pc, #236]	; 15d44 <__assert_fail@plt+0x38c8>
   15c54:	sub	sp, sp, #12
   15c58:	mov	r5, #0
   15c5c:	ldr	r7, [ip, lr]
   15c60:	mov	r4, r0
   15c64:	mov	r8, r1
   15c68:	ldr	r3, [r7]
   15c6c:	mov	r0, ip
   15c70:	mov	r9, r2
   15c74:	str	r5, [sp]
   15c78:	str	r3, [sp, #4]
   15c7c:	bl	121f4 <__errno_location@plt>
   15c80:	cmp	r4, r5
   15c84:	str	r5, [r0]
   15c88:	beq	15c98 <__assert_fail@plt+0x381c>
   15c8c:	ldrsb	r3, [r4]
   15c90:	cmp	r3, r5
   15c94:	bne	15cb8 <__assert_fail@plt+0x383c>
   15c98:	ldr	r1, [pc, #168]	; 15d48 <__assert_fail@plt+0x38cc>
   15c9c:	mov	r3, r4
   15ca0:	add	r1, pc, r1
   15ca4:	mov	r2, r8
   15ca8:	ldr	r0, [r1]
   15cac:	ldr	r1, [pc, #152]	; 15d4c <__assert_fail@plt+0x38d0>
   15cb0:	add	r1, pc, r1
   15cb4:	bl	12320 <errx@plt>
   15cb8:	mov	r6, r0
   15cbc:	mov	r2, r9
   15cc0:	mov	r3, r5
   15cc4:	mov	r1, sp
   15cc8:	mov	r0, r4
   15ccc:	bl	11fd8 <__strtoull_internal@plt>
   15cd0:	ldr	r2, [r6]
   15cd4:	cmp	r2, r5
   15cd8:	bne	15d14 <__assert_fail@plt+0x3898>
   15cdc:	ldr	r3, [sp]
   15ce0:	cmp	r3, r4
   15ce4:	beq	15c98 <__assert_fail@plt+0x381c>
   15ce8:	cmp	r3, r5
   15cec:	beq	15cfc <__assert_fail@plt+0x3880>
   15cf0:	ldrsb	r3, [r3]
   15cf4:	cmp	r3, r5
   15cf8:	bne	15c98 <__assert_fail@plt+0x381c>
   15cfc:	ldr	r2, [sp, #4]
   15d00:	ldr	r3, [r7]
   15d04:	cmp	r2, r3
   15d08:	bne	15d3c <__assert_fail@plt+0x38c0>
   15d0c:	add	sp, sp, #12
   15d10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15d14:	ldr	r3, [pc, #52]	; 15d50 <__assert_fail@plt+0x38d4>
   15d18:	cmp	r2, #34	; 0x22
   15d1c:	add	r3, pc, r3
   15d20:	ldr	r0, [r3]
   15d24:	bne	15c98 <__assert_fail@plt+0x381c>
   15d28:	ldr	r1, [pc, #36]	; 15d54 <__assert_fail@plt+0x38d8>
   15d2c:	mov	r3, r4
   15d30:	mov	r2, r8
   15d34:	add	r1, pc, r1
   15d38:	bl	12080 <err@plt>
   15d3c:	bl	1202c <__stack_chk_fail@plt>
   15d40:	andeq	r6, r1, r8, ror r1
   15d44:	andeq	r0, r0, ip, lsr #4
   15d48:	andeq	r6, r1, r0, ror #6
   15d4c:	andeq	r4, r0, ip, ror lr
   15d50:	andeq	r6, r1, r4, ror #5
   15d54:	strdeq	r4, [r0], -r8
   15d58:	push	{r4, lr}
   15d5c:	mov	r5, r0
   15d60:	mov	r4, r1
   15d64:	bl	121f4 <__errno_location@plt>
   15d68:	ldr	ip, [pc, #32]	; 15d90 <__assert_fail@plt+0x3914>
   15d6c:	ldr	r1, [pc, #32]	; 15d94 <__assert_fail@plt+0x3918>
   15d70:	add	ip, pc, ip
   15d74:	mov	lr, #34	; 0x22
   15d78:	mov	r3, r5
   15d7c:	mov	r2, r4
   15d80:	add	r1, pc, r1
   15d84:	str	lr, [r0]
   15d88:	ldr	r0, [ip]
   15d8c:	bl	12080 <err@plt>
   15d90:	muleq	r1, r0, r2
   15d94:	andeq	r4, r0, ip, lsr #27
   15d98:	push	{r4, r5, r6, lr}
   15d9c:	mov	r4, r0
   15da0:	mov	r5, r1
   15da4:	bl	15c44 <__assert_fail@plt+0x37c8>
   15da8:	mov	r3, #0
   15dac:	mvn	r2, #0
   15db0:	cmp	r1, r3
   15db4:	cmpeq	r0, r2
   15db8:	popls	{r4, r5, r6, pc}
   15dbc:	mov	r1, r5
   15dc0:	mov	r0, r4
   15dc4:	bl	15d58 <__assert_fail@plt+0x38dc>
   15dc8:	ldr	r3, [pc, #8]	; 15dd8 <__assert_fail@plt+0x395c>
   15dcc:	add	r3, pc, r3
   15dd0:	str	r0, [r3]
   15dd4:	bx	lr
   15dd8:	andeq	r6, r1, r4, lsr r2
   15ddc:	ldr	r3, [pc, #1648]	; 16454 <__assert_fail@plt+0x3fd8>
   15de0:	ldr	ip, [pc, #1648]	; 16458 <__assert_fail@plt+0x3fdc>
   15de4:	add	r3, pc, r3
   15de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dec:	mov	r5, r1
   15df0:	ldr	r1, [r3, ip]
   15df4:	sub	sp, sp, #52	; 0x34
   15df8:	mov	ip, r1
   15dfc:	mov	r8, r0
   15e00:	str	r1, [sp, #24]
   15e04:	mov	r0, #0
   15e08:	mov	r1, #0
   15e0c:	ldr	r3, [ip]
   15e10:	strd	r0, [r5]
   15e14:	mov	r9, r2
   15e18:	str	r3, [sp, #44]	; 0x2c
   15e1c:	bl	121f4 <__errno_location@plt>
   15e20:	cmp	r8, #0
   15e24:	mov	r4, r0
   15e28:	beq	16008 <__assert_fail@plt+0x3b8c>
   15e2c:	ldrsb	fp, [r8]
   15e30:	cmp	fp, #0
   15e34:	beq	16008 <__assert_fail@plt+0x3b8c>
   15e38:	bl	12170 <__ctype_b_loc@plt>
   15e3c:	mov	r2, r8
   15e40:	ldr	r1, [r0]
   15e44:	b	15e4c <__assert_fail@plt+0x39d0>
   15e48:	ldrsb	fp, [r2, #1]!
   15e4c:	uxtb	r3, fp
   15e50:	lsl	r3, r3, #1
   15e54:	ldrh	ip, [r1, r3]
   15e58:	ands	ip, ip, #8192	; 0x2000
   15e5c:	bne	15e48 <__assert_fail@plt+0x39cc>
   15e60:	cmp	fp, #45	; 0x2d
   15e64:	beq	16008 <__assert_fail@plt+0x3b8c>
   15e68:	add	fp, sp, #40	; 0x28
   15e6c:	mov	r3, ip
   15e70:	mov	r2, ip
   15e74:	str	ip, [r4]
   15e78:	mov	r1, fp
   15e7c:	mov	r0, r8
   15e80:	str	ip, [sp, #40]	; 0x28
   15e84:	bl	11fd8 <__strtoull_internal@plt>
   15e88:	ldr	sl, [sp, #40]	; 0x28
   15e8c:	cmp	sl, r8
   15e90:	mov	r2, r0
   15e94:	mov	r3, r1
   15e98:	ldr	r0, [r4]
   15e9c:	strd	r2, [sp, #16]
   15ea0:	beq	16188 <__assert_fail@plt+0x3d0c>
   15ea4:	cmp	r0, #0
   15ea8:	bne	16030 <__assert_fail@plt+0x3bb4>
   15eac:	cmp	sl, #0
   15eb0:	beq	161bc <__assert_fail@plt+0x3d40>
   15eb4:	ldrsb	r0, [sl]
   15eb8:	cmp	r0, #0
   15ebc:	beq	161b0 <__assert_fail@plt+0x3d34>
   15ec0:	mov	r8, #0
   15ec4:	mov	r2, #0
   15ec8:	mov	r3, #0
   15ecc:	str	r9, [sp, #32]
   15ed0:	mov	r6, fp
   15ed4:	mov	r9, sl
   15ed8:	mov	r7, r8
   15edc:	mov	sl, r2
   15ee0:	mov	fp, r3
   15ee4:	str	r5, [sp, #28]
   15ee8:	ldrsb	r2, [r9, #1]
   15eec:	cmp	r2, #105	; 0x69
   15ef0:	beq	16074 <__assert_fail@plt+0x3bf8>
   15ef4:	bic	r1, r2, #32
   15ef8:	cmp	r1, #66	; 0x42
   15efc:	bne	16194 <__assert_fail@plt+0x3d18>
   15f00:	ldrsb	r2, [r9, #2]
   15f04:	cmp	r2, #0
   15f08:	beq	16378 <__assert_fail@plt+0x3efc>
   15f0c:	bl	12374 <localeconv@plt>
   15f10:	cmp	r0, #0
   15f14:	beq	16008 <__assert_fail@plt+0x3b8c>
   15f18:	ldr	r2, [r0]
   15f1c:	cmp	r2, #0
   15f20:	beq	16008 <__assert_fail@plt+0x3b8c>
   15f24:	mov	r0, r2
   15f28:	str	r2, [sp]
   15f2c:	bl	12194 <strlen@plt>
   15f30:	orrs	r3, sl, fp
   15f34:	mov	r5, r0
   15f38:	bne	16008 <__assert_fail@plt+0x3b8c>
   15f3c:	ldrsb	r1, [r9]
   15f40:	cmp	r1, #0
   15f44:	beq	16008 <__assert_fail@plt+0x3b8c>
   15f48:	ldr	r2, [sp]
   15f4c:	mov	r1, r9
   15f50:	mov	r0, r2
   15f54:	mov	r2, r5
   15f58:	bl	123ec <strncmp@plt>
   15f5c:	cmp	r0, #0
   15f60:	bne	16008 <__assert_fail@plt+0x3b8c>
   15f64:	ldrsb	r2, [r9, r5]
   15f68:	add	r5, r9, r5
   15f6c:	cmp	r2, #48	; 0x30
   15f70:	bne	15f90 <__assert_fail@plt+0x3b14>
   15f74:	add	r8, r8, #1
   15f78:	sub	r1, r8, r5
   15f7c:	mov	r3, r5
   15f80:	add	r8, r3, r1
   15f84:	ldrsb	r2, [r3, #1]!
   15f88:	cmp	r2, #48	; 0x30
   15f8c:	beq	15f80 <__assert_fail@plt+0x3b04>
   15f90:	mov	r3, #0
   15f94:	str	r7, [r4]
   15f98:	mov	r2, r3
   15f9c:	mov	r1, r6
   15fa0:	mov	r0, r5
   15fa4:	str	r7, [sp, #40]	; 0x28
   15fa8:	bl	11fd8 <__strtoull_internal@plt>
   15fac:	ldr	r9, [sp, #40]	; 0x28
   15fb0:	cmp	r9, r5
   15fb4:	mov	sl, r0
   15fb8:	mov	fp, r1
   15fbc:	beq	16184 <__assert_fail@plt+0x3d08>
   15fc0:	ldr	ip, [r4]
   15fc4:	cmp	ip, #0
   15fc8:	beq	16060 <__assert_fail@plt+0x3be4>
   15fcc:	subs	r3, r0, #1
   15fd0:	str	r3, [sp, #8]
   15fd4:	sbc	r3, r1, #0
   15fd8:	str	r3, [sp, #12]
   15fdc:	ldrd	r2, [sp, #8]
   15fe0:	mvn	r1, #0
   15fe4:	mvn	r0, #2
   15fe8:	cmp	r3, r1
   15fec:	cmpeq	r2, r0
   15ff0:	bhi	163b4 <__assert_fail@plt+0x3f38>
   15ff4:	cmp	r9, #0
   15ff8:	beq	16008 <__assert_fail@plt+0x3b8c>
   15ffc:	ldrsb	r2, [r9]
   16000:	cmp	r2, #0
   16004:	bne	15ee8 <__assert_fail@plt+0x3a6c>
   16008:	mov	r3, #22
   1600c:	mvn	r0, #21
   16010:	str	r3, [r4]
   16014:	ldr	r3, [sp, #24]
   16018:	ldr	r2, [sp, #44]	; 0x2c
   1601c:	ldr	r3, [r3]
   16020:	cmp	r2, r3
   16024:	bne	16450 <__assert_fail@plt+0x3fd4>
   16028:	add	sp, sp, #52	; 0x34
   1602c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16030:	subs	r6, r2, #1
   16034:	sbc	r7, r3, #0
   16038:	mvn	r3, #0
   1603c:	mvn	r2, #2
   16040:	cmp	r7, r3
   16044:	cmpeq	r6, r2
   16048:	bls	15eac <__assert_fail@plt+0x3a30>
   1604c:	rsb	r0, r0, #0
   16050:	cmp	r0, #0
   16054:	bge	16014 <__assert_fail@plt+0x3b98>
   16058:	rsb	r3, r0, #0
   1605c:	b	16010 <__assert_fail@plt+0x3b94>
   16060:	orrs	r3, sl, fp
   16064:	bne	15ff4 <__assert_fail@plt+0x3b78>
   16068:	ldrsb	r2, [r9, #1]
   1606c:	cmp	r2, #105	; 0x69
   16070:	bne	15ef4 <__assert_fail@plt+0x3a78>
   16074:	ldrsb	r2, [r9, #2]
   16078:	bic	r2, r2, #32
   1607c:	cmp	r2, #66	; 0x42
   16080:	bne	15f0c <__assert_fail@plt+0x3a90>
   16084:	ldrsb	r2, [r9, #3]
   16088:	cmp	r2, #0
   1608c:	bne	15f0c <__assert_fail@plt+0x3a90>
   16090:	strd	sl, [sp]
   16094:	mov	sl, r9
   16098:	ldr	r9, [sp, #32]
   1609c:	mov	r3, #1024	; 0x400
   160a0:	ldr	r5, [sp, #28]
   160a4:	str	r3, [sp, #28]
   160a8:	ldrsb	r7, [sl]
   160ac:	ldr	r6, [pc, #936]	; 1645c <__assert_fail@plt+0x3fe0>
   160b0:	add	r6, pc, r6
   160b4:	mov	r1, r7
   160b8:	mov	r0, r6
   160bc:	bl	121a0 <strchr@plt>
   160c0:	cmp	r0, #0
   160c4:	beq	16394 <__assert_fail@plt+0x3f18>
   160c8:	sub	ip, r0, r6
   160cc:	add	fp, ip, #1
   160d0:	cmp	fp, #0
   160d4:	beq	161a0 <__assert_fail@plt+0x3d24>
   160d8:	ldr	r3, [sp, #20]
   160dc:	ldr	r6, [sp, #28]
   160e0:	cmp	r3, #0
   160e4:	mov	r0, #0
   160e8:	asr	r7, r6, #31
   160ec:	mov	r1, #0
   160f0:	bne	163f0 <__assert_fail@plt+0x3f74>
   160f4:	orrs	r3, r0, r1
   160f8:	bne	161e4 <__assert_fail@plt+0x3d68>
   160fc:	str	fp, [sp, #32]
   16100:	sub	ip, ip, #1
   16104:	str	r8, [sp, #36]	; 0x24
   16108:	mov	fp, r4
   1610c:	ldrd	r0, [sp, #16]
   16110:	mov	lr, r5
   16114:	mov	sl, r9
   16118:	b	16128 <__assert_fail@plt+0x3cac>
   1611c:	orrs	r3, r4, r5
   16120:	sub	ip, ip, #1
   16124:	bne	161cc <__assert_fail@plt+0x3d50>
   16128:	mul	r2, r0, r7
   1612c:	cmn	ip, #1
   16130:	mla	r2, r6, r1, r2
   16134:	umull	r0, r1, r0, r6
   16138:	add	r2, r2, r1
   1613c:	mov	r1, r2
   16140:	beq	16358 <__assert_fail@plt+0x3edc>
   16144:	cmp	r2, #0
   16148:	mov	r4, #0
   1614c:	mov	r5, #0
   16150:	beq	1611c <__assert_fail@plt+0x3ca0>
   16154:	umull	r2, r3, r6, r2
   16158:	umull	r8, r9, r0, r6
   1615c:	strd	r2, [sp, #8]
   16160:	mov	r8, r9
   16164:	ldr	r3, [sp, #12]
   16168:	adds	r8, r2, r8
   1616c:	mov	r2, #0
   16170:	adc	r3, r3, r2
   16174:	cmp	r3, r2
   16178:	movne	r4, #1
   1617c:	movne	r5, #0
   16180:	b	1611c <__assert_fail@plt+0x3ca0>
   16184:	ldr	r0, [r4]
   16188:	cmp	r0, #0
   1618c:	beq	16008 <__assert_fail@plt+0x3b8c>
   16190:	b	1604c <__assert_fail@plt+0x3bd0>
   16194:	cmp	r2, #0
   16198:	bne	15f0c <__assert_fail@plt+0x3a90>
   1619c:	b	16090 <__assert_fail@plt+0x3c14>
   161a0:	cmp	r9, #0
   161a4:	movne	r0, fp
   161a8:	bne	161f0 <__assert_fail@plt+0x3d74>
   161ac:	mov	r0, r9
   161b0:	ldrd	r2, [sp, #16]
   161b4:	strd	r2, [r5]
   161b8:	b	16014 <__assert_fail@plt+0x3b98>
   161bc:	ldrd	r2, [sp, #16]
   161c0:	mov	r0, sl
   161c4:	strd	r2, [r5]
   161c8:	b	16014 <__assert_fail@plt+0x3b98>
   161cc:	mov	r4, fp
   161d0:	ldr	r8, [sp, #36]	; 0x24
   161d4:	ldr	fp, [sp, #32]
   161d8:	mov	r5, lr
   161dc:	mov	r9, sl
   161e0:	strd	r0, [sp, #16]
   161e4:	mvn	r0, #33	; 0x21
   161e8:	cmp	r9, #0
   161ec:	beq	161f4 <__assert_fail@plt+0x3d78>
   161f0:	str	fp, [r9]
   161f4:	ldrd	r2, [sp]
   161f8:	mov	r1, r2
   161fc:	orrs	r3, r1, r3
   16200:	movne	r3, #1
   16204:	moveq	r3, #0
   16208:	cmp	fp, #0
   1620c:	moveq	r3, #0
   16210:	cmp	r3, #0
   16214:	beq	1634c <__assert_fail@plt+0x3ed0>
   16218:	ldr	r3, [pc, #576]	; 16460 <__assert_fail@plt+0x3fe4>
   1621c:	ldr	r1, [pc, #576]	; 16464 <__assert_fail@plt+0x3fe8>
   16220:	umull	ip, r3, r3, r8
   16224:	smull	ip, r1, r1, r8
   16228:	lsr	r3, r3, #1
   1622c:	rsb	r1, r1, r8, asr #31
   16230:	add	r3, r3, r3, lsl #1
   16234:	add	r1, r1, fp
   16238:	subs	r3, r8, r3
   1623c:	sub	r6, r1, #1
   16240:	bne	163bc <__assert_fail@plt+0x3f40>
   16244:	ldrd	r8, [sp]
   16248:	adds	r3, r8, r8
   1624c:	adc	r2, r9, r9
   16250:	adds	r3, r3, r8
   16254:	adc	r2, r2, r9
   16258:	lsl	ip, r3, #5
   1625c:	lsl	lr, r2, #5
   16260:	orr	lr, lr, r3, lsr #27
   16264:	adds	r3, r3, ip
   16268:	adc	r2, r2, lr
   1626c:	adds	r3, r8, r3
   16270:	str	r3, [sp]
   16274:	ldr	r3, [sp, #4]
   16278:	adc	r3, r3, r2
   1627c:	str	r3, [sp, #4]
   16280:	cmp	r6, #0
   16284:	blt	16008 <__assert_fail@plt+0x3b8c>
   16288:	beq	16330 <__assert_fail@plt+0x3eb4>
   1628c:	ldr	r3, [sp, #4]
   16290:	ldr	r8, [sp, #28]
   16294:	cmp	r3, #0
   16298:	mov	r6, #0
   1629c:	asr	r9, r8, #31
   162a0:	mov	r7, #0
   162a4:	bne	16424 <__assert_fail@plt+0x3fa8>
   162a8:	orrs	r3, r6, r7
   162ac:	bne	16330 <__assert_fail@plt+0x3eb4>
   162b0:	sub	r1, r1, #3
   162b4:	ldrd	r2, [sp]
   162b8:	mov	lr, r4
   162bc:	str	r5, [sp, #8]
   162c0:	b	162d0 <__assert_fail@plt+0x3e54>
   162c4:	orrs	ip, r6, r7
   162c8:	sub	r1, r1, #1
   162cc:	bne	16324 <__assert_fail@plt+0x3ea8>
   162d0:	mul	ip, r2, r9
   162d4:	cmn	r1, #1
   162d8:	mla	ip, r8, r3, ip
   162dc:	umull	r2, r3, r2, r8
   162e0:	add	ip, ip, r3
   162e4:	mov	r3, ip
   162e8:	beq	16324 <__assert_fail@plt+0x3ea8>
   162ec:	cmp	ip, #0
   162f0:	mov	r6, #0
   162f4:	mov	r7, #0
   162f8:	beq	162c4 <__assert_fail@plt+0x3e48>
   162fc:	umull	sl, fp, r2, r8
   16300:	umull	r4, r5, r8, ip
   16304:	mov	ip, fp
   16308:	adds	ip, r4, ip
   1630c:	mov	ip, #0
   16310:	adc	ip, r5, ip
   16314:	cmp	ip, #0
   16318:	movne	r6, #1
   1631c:	movne	r7, #0
   16320:	b	162c4 <__assert_fail@plt+0x3e48>
   16324:	ldr	r5, [sp, #8]
   16328:	mov	r4, lr
   1632c:	strd	r2, [sp]
   16330:	ldrd	r2, [sp]
   16334:	ldr	r1, [sp, #16]
   16338:	adds	r1, r1, r2
   1633c:	str	r1, [sp, #16]
   16340:	ldr	r1, [sp, #20]
   16344:	adc	r3, r1, r3
   16348:	str	r3, [sp, #20]
   1634c:	ldrd	r2, [sp, #16]
   16350:	strd	r2, [r5]
   16354:	b	16050 <__assert_fail@plt+0x3bd4>
   16358:	mov	r4, fp
   1635c:	strd	r0, [sp, #16]
   16360:	ldr	r8, [sp, #36]	; 0x24
   16364:	ldr	fp, [sp, #32]
   16368:	mov	r5, lr
   1636c:	mov	r9, sl
   16370:	mov	r0, #0
   16374:	b	161e8 <__assert_fail@plt+0x3d6c>
   16378:	mov	r3, #1000	; 0x3e8
   1637c:	strd	sl, [sp]
   16380:	ldr	r5, [sp, #28]
   16384:	mov	sl, r9
   16388:	str	r3, [sp, #28]
   1638c:	ldr	r9, [sp, #32]
   16390:	b	160a8 <__assert_fail@plt+0x3c2c>
   16394:	ldr	r6, [pc, #204]	; 16468 <__assert_fail@plt+0x3fec>
   16398:	mov	r1, r7
   1639c:	add	r6, pc, r6
   163a0:	mov	r0, r6
   163a4:	bl	121a0 <strchr@plt>
   163a8:	cmp	r0, #0
   163ac:	bne	160c8 <__assert_fail@plt+0x3c4c>
   163b0:	b	16008 <__assert_fail@plt+0x3b8c>
   163b4:	mov	r0, ip
   163b8:	b	1604c <__assert_fail@plt+0x3bd0>
   163bc:	cmp	r3, #1
   163c0:	bne	16280 <__assert_fail@plt+0x3e04>
   163c4:	ldrd	r8, [sp]
   163c8:	lsl	r2, r9, #2
   163cc:	lsl	r3, r8, #2
   163d0:	adds	r3, r3, r8
   163d4:	orr	r2, r2, r8, lsr #30
   163d8:	adc	r2, r2, r9
   163dc:	adds	r3, r3, r3
   163e0:	str	r3, [sp]
   163e4:	adc	r3, r2, r2
   163e8:	str	r3, [sp, #4]
   163ec:	b	16280 <__assert_fail@plt+0x3e04>
   163f0:	ldr	lr, [sp, #28]
   163f4:	ldr	r3, [sp, #16]
   163f8:	ldr	sl, [sp, #20]
   163fc:	umull	r2, r3, r3, lr
   16400:	str	r3, [sp, #8]
   16404:	mov	r3, #0
   16408:	str	r3, [sp, #12]
   1640c:	ldrd	r2, [sp, #8]
   16410:	umlal	r2, r3, sl, lr
   16414:	cmp	r3, #0
   16418:	movne	r0, #1
   1641c:	movne	r1, #0
   16420:	b	160f4 <__assert_fail@plt+0x3c78>
   16424:	ldr	r3, [sp]
   16428:	ldr	ip, [sp, #28]
   1642c:	ldr	lr, [sp, #4]
   16430:	umull	sl, fp, r3, ip
   16434:	mov	r3, #0
   16438:	mov	r2, fp
   1643c:	umlal	r2, r3, lr, ip
   16440:	cmp	r3, #0
   16444:	movne	r6, #1
   16448:	movne	r7, #0
   1644c:	b	162a8 <__assert_fail@plt+0x3e2c>
   16450:	bl	1202c <__stack_chk_fail@plt>
   16454:	andeq	r5, r1, r0, ror #31
   16458:	andeq	r0, r0, ip, lsr #4
   1645c:	andeq	r4, r0, r8, lsl #21
   16460:	bge	feac0f14 <__bss_end__@@Base+0xfea94de8>
   16464:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   16468:	andeq	r4, r0, r8, lsr #15
   1646c:	mov	r2, #0
   16470:	b	15ddc <__assert_fail@plt+0x3960>
   16474:	push	{r4, r5, r6, lr}
   16478:	subs	r5, r0, #0
   1647c:	mov	r6, r1
   16480:	beq	164ec <__assert_fail@plt+0x4070>
   16484:	ldrsb	r4, [r5]
   16488:	cmp	r4, #0
   1648c:	beq	16500 <__assert_fail@plt+0x4084>
   16490:	bl	12170 <__ctype_b_loc@plt>
   16494:	mov	r3, r5
   16498:	ldr	r0, [r0]
   1649c:	b	164b4 <__assert_fail@plt+0x4038>
   164a0:	adds	r3, r3, #1
   164a4:	beq	164ec <__assert_fail@plt+0x4070>
   164a8:	ldrsb	r4, [r3]
   164ac:	cmp	r4, #0
   164b0:	beq	164c8 <__assert_fail@plt+0x404c>
   164b4:	uxtb	r4, r4
   164b8:	lsl	r4, r4, #1
   164bc:	ldrh	r2, [r0, r4]
   164c0:	tst	r2, #2048	; 0x800
   164c4:	bne	164a0 <__assert_fail@plt+0x4024>
   164c8:	cmp	r6, #0
   164cc:	strne	r3, [r6]
   164d0:	cmp	r5, r3
   164d4:	bcs	164f8 <__assert_fail@plt+0x407c>
   164d8:	ldrsb	r3, [r3]
   164dc:	cmp	r3, #0
   164e0:	bne	164f8 <__assert_fail@plt+0x407c>
   164e4:	mov	r0, #1
   164e8:	pop	{r4, r5, r6, pc}
   164ec:	cmp	r6, #0
   164f0:	movne	r3, #0
   164f4:	strne	r3, [r6]
   164f8:	mov	r0, #0
   164fc:	pop	{r4, r5, r6, pc}
   16500:	cmp	r1, #0
   16504:	strne	r5, [r1]
   16508:	b	164f8 <__assert_fail@plt+0x407c>
   1650c:	push	{r4, r5, r6, lr}
   16510:	subs	r5, r0, #0
   16514:	mov	r6, r1
   16518:	beq	16584 <__assert_fail@plt+0x4108>
   1651c:	ldrsb	r4, [r5]
   16520:	cmp	r4, #0
   16524:	beq	16598 <__assert_fail@plt+0x411c>
   16528:	bl	12170 <__ctype_b_loc@plt>
   1652c:	mov	r3, r5
   16530:	ldr	r0, [r0]
   16534:	b	1654c <__assert_fail@plt+0x40d0>
   16538:	adds	r3, r3, #1
   1653c:	beq	16584 <__assert_fail@plt+0x4108>
   16540:	ldrsb	r4, [r3]
   16544:	cmp	r4, #0
   16548:	beq	16560 <__assert_fail@plt+0x40e4>
   1654c:	uxtb	r4, r4
   16550:	lsl	r4, r4, #1
   16554:	ldrh	r2, [r0, r4]
   16558:	tst	r2, #4096	; 0x1000
   1655c:	bne	16538 <__assert_fail@plt+0x40bc>
   16560:	cmp	r6, #0
   16564:	strne	r3, [r6]
   16568:	cmp	r5, r3
   1656c:	bcs	16590 <__assert_fail@plt+0x4114>
   16570:	ldrsb	r3, [r3]
   16574:	cmp	r3, #0
   16578:	bne	16590 <__assert_fail@plt+0x4114>
   1657c:	mov	r0, #1
   16580:	pop	{r4, r5, r6, pc}
   16584:	cmp	r6, #0
   16588:	movne	r3, #0
   1658c:	strne	r3, [r6]
   16590:	mov	r0, #0
   16594:	pop	{r4, r5, r6, pc}
   16598:	cmp	r1, #0
   1659c:	strne	r5, [r1]
   165a0:	b	16590 <__assert_fail@plt+0x4114>
   165a4:	push	{r1, r2, r3}
   165a8:	ldr	r3, [pc, #188]	; 1666c <__assert_fail@plt+0x41f0>
   165ac:	ldr	r2, [pc, #188]	; 16670 <__assert_fail@plt+0x41f4>
   165b0:	add	r3, pc, r3
   165b4:	push	{r4, r5, r6, r7, r8, lr}
   165b8:	sub	sp, sp, #12
   165bc:	ldr	r7, [r3, r2]
   165c0:	ldr	r8, [sp, #36]	; 0x24
   165c4:	mov	r6, r0
   165c8:	ldr	r3, [r7]
   165cc:	add	r4, sp, #48	; 0x30
   165d0:	str	r3, [sp, #4]
   165d4:	b	165f0 <__assert_fail@plt+0x4174>
   165d8:	mov	r1, r5
   165dc:	mov	r0, r6
   165e0:	bl	11eac <strcmp@plt>
   165e4:	add	r4, r4, #8
   165e8:	cmp	r0, #0
   165ec:	beq	16628 <__assert_fail@plt+0x41ac>
   165f0:	ldr	r1, [r4, #-8]
   165f4:	sub	r3, r4, #4
   165f8:	cmp	r1, #0
   165fc:	str	r3, [sp]
   16600:	beq	16648 <__assert_fail@plt+0x41cc>
   16604:	ldr	r5, [r4, #-4]
   16608:	str	r4, [sp]
   1660c:	cmp	r5, #0
   16610:	beq	16648 <__assert_fail@plt+0x41cc>
   16614:	mov	r0, r6
   16618:	bl	11eac <strcmp@plt>
   1661c:	cmp	r0, #0
   16620:	bne	165d8 <__assert_fail@plt+0x415c>
   16624:	mov	r0, #1
   16628:	ldr	r2, [sp, #4]
   1662c:	ldr	r3, [r7]
   16630:	cmp	r2, r3
   16634:	bne	16668 <__assert_fail@plt+0x41ec>
   16638:	add	sp, sp, #12
   1663c:	pop	{r4, r5, r6, r7, r8, lr}
   16640:	add	sp, sp, #12
   16644:	bx	lr
   16648:	ldr	r1, [pc, #36]	; 16674 <__assert_fail@plt+0x41f8>
   1664c:	mov	r3, r6
   16650:	add	r1, pc, r1
   16654:	mov	r2, r8
   16658:	ldr	r0, [r1]
   1665c:	ldr	r1, [pc, #20]	; 16678 <__assert_fail@plt+0x41fc>
   16660:	add	r1, pc, r1
   16664:	bl	12320 <errx@plt>
   16668:	bl	1202c <__stack_chk_fail@plt>
   1666c:	andeq	r5, r1, r4, lsl r8
   16670:	andeq	r0, r0, ip, lsr #4
   16674:			; <UNDEFINED> instruction: 0x000159b0
   16678:	andeq	r4, r0, ip, asr #9
   1667c:	cmp	r1, #0
   16680:	beq	166cc <__assert_fail@plt+0x4250>
   16684:	ldrsb	r3, [r0]
   16688:	cmp	r3, #0
   1668c:	beq	166cc <__assert_fail@plt+0x4250>
   16690:	sxtb	r2, r2
   16694:	cmp	r3, r2
   16698:	bxeq	lr
   1669c:	add	r1, r0, r1
   166a0:	add	r3, r0, #1
   166a4:	b	166c0 <__assert_fail@plt+0x4244>
   166a8:	ldrsb	ip, [r3]
   166ac:	add	r3, r3, #1
   166b0:	cmp	ip, #0
   166b4:	beq	166cc <__assert_fail@plt+0x4250>
   166b8:	cmp	ip, r2
   166bc:	bxeq	lr
   166c0:	cmp	r3, r1
   166c4:	mov	r0, r3
   166c8:	bne	166a8 <__assert_fail@plt+0x422c>
   166cc:	mov	r0, #0
   166d0:	bx	lr
   166d4:	push	{r4, r5, r6, lr}
   166d8:	mov	r2, #10
   166dc:	mov	r4, r0
   166e0:	mov	r5, r1
   166e4:	bl	15d98 <__assert_fail@plt+0x391c>
   166e8:	cmp	r0, #65536	; 0x10000
   166ec:	bcs	166f8 <__assert_fail@plt+0x427c>
   166f0:	uxth	r0, r0
   166f4:	pop	{r4, r5, r6, pc}
   166f8:	mov	r1, r5
   166fc:	mov	r0, r4
   16700:	bl	15d58 <__assert_fail@plt+0x38dc>
   16704:	push	{r4, r5, r6, lr}
   16708:	mov	r2, #16
   1670c:	mov	r4, r0
   16710:	mov	r5, r1
   16714:	bl	15d98 <__assert_fail@plt+0x391c>
   16718:	cmp	r0, #65536	; 0x10000
   1671c:	bcs	16728 <__assert_fail@plt+0x42ac>
   16720:	uxth	r0, r0
   16724:	pop	{r4, r5, r6, pc}
   16728:	mov	r1, r5
   1672c:	mov	r0, r4
   16730:	bl	15d58 <__assert_fail@plt+0x38dc>
   16734:	mov	r2, #10
   16738:	b	15d98 <__assert_fail@plt+0x391c>
   1673c:	mov	r2, #16
   16740:	b	15d98 <__assert_fail@plt+0x391c>
   16744:	ldr	r2, [pc, #236]	; 16838 <__assert_fail@plt+0x43bc>
   16748:	ldr	ip, [pc, #236]	; 1683c <__assert_fail@plt+0x43c0>
   1674c:	add	r2, pc, r2
   16750:	push	{r4, r5, r6, r7, r8, lr}
   16754:	sub	sp, sp, #8
   16758:	ldr	r7, [r2, ip]
   1675c:	mov	r5, #0
   16760:	mov	r4, r0
   16764:	ldr	r3, [r7]
   16768:	mov	r8, r1
   1676c:	str	r5, [sp]
   16770:	str	r3, [sp, #4]
   16774:	bl	121f4 <__errno_location@plt>
   16778:	cmp	r4, r5
   1677c:	str	r5, [r0]
   16780:	beq	16790 <__assert_fail@plt+0x4314>
   16784:	ldrsb	r3, [r4]
   16788:	cmp	r3, r5
   1678c:	bne	167b0 <__assert_fail@plt+0x4334>
   16790:	ldr	r1, [pc, #168]	; 16840 <__assert_fail@plt+0x43c4>
   16794:	mov	r3, r4
   16798:	add	r1, pc, r1
   1679c:	mov	r2, r8
   167a0:	ldr	r0, [r1]
   167a4:	ldr	r1, [pc, #152]	; 16844 <__assert_fail@plt+0x43c8>
   167a8:	add	r1, pc, r1
   167ac:	bl	12320 <errx@plt>
   167b0:	mov	r6, r0
   167b4:	mov	r2, #10
   167b8:	mov	r3, r5
   167bc:	mov	r1, sp
   167c0:	mov	r0, r4
   167c4:	bl	123a4 <__strtoll_internal@plt>
   167c8:	ldr	r2, [r6]
   167cc:	cmp	r2, r5
   167d0:	bne	1680c <__assert_fail@plt+0x4390>
   167d4:	ldr	r3, [sp]
   167d8:	cmp	r3, r4
   167dc:	beq	16790 <__assert_fail@plt+0x4314>
   167e0:	cmp	r3, r5
   167e4:	beq	167f4 <__assert_fail@plt+0x4378>
   167e8:	ldrsb	r3, [r3]
   167ec:	cmp	r3, r5
   167f0:	bne	16790 <__assert_fail@plt+0x4314>
   167f4:	ldr	r2, [sp, #4]
   167f8:	ldr	r3, [r7]
   167fc:	cmp	r2, r3
   16800:	bne	16834 <__assert_fail@plt+0x43b8>
   16804:	add	sp, sp, #8
   16808:	pop	{r4, r5, r6, r7, r8, pc}
   1680c:	ldr	r3, [pc, #52]	; 16848 <__assert_fail@plt+0x43cc>
   16810:	cmp	r2, #34	; 0x22
   16814:	add	r3, pc, r3
   16818:	ldr	r0, [r3]
   1681c:	bne	16790 <__assert_fail@plt+0x4314>
   16820:	ldr	r1, [pc, #36]	; 1684c <__assert_fail@plt+0x43d0>
   16824:	mov	r3, r4
   16828:	mov	r2, r8
   1682c:	add	r1, pc, r1
   16830:	bl	12080 <err@plt>
   16834:	bl	1202c <__stack_chk_fail@plt>
   16838:	andeq	r5, r1, r8, ror r6
   1683c:	andeq	r0, r0, ip, lsr #4
   16840:	andeq	r5, r1, r8, ror #16
   16844:	andeq	r4, r0, r4, lsl #7
   16848:	andeq	r5, r1, ip, ror #15
   1684c:	andeq	r4, r0, r0, lsl #6
   16850:	push	{r4, r5, r6, r7, r8, lr}
   16854:	mov	r7, r0
   16858:	mov	r6, r1
   1685c:	bl	16744 <__assert_fail@plt+0x42c8>
   16860:	mov	r3, #0
   16864:	mvn	r2, #0
   16868:	adds	r4, r0, #-2147483648	; 0x80000000
   1686c:	adc	r5, r1, #0
   16870:	cmp	r5, r3
   16874:	cmpeq	r4, r2
   16878:	popls	{r4, r5, r6, r7, r8, pc}
   1687c:	bl	121f4 <__errno_location@plt>
   16880:	ldr	ip, [pc, #32]	; 168a8 <__assert_fail@plt+0x442c>
   16884:	ldr	r1, [pc, #32]	; 168ac <__assert_fail@plt+0x4430>
   16888:	add	ip, pc, ip
   1688c:	mov	lr, #34	; 0x22
   16890:	mov	r3, r7
   16894:	mov	r2, r6
   16898:	add	r1, pc, r1
   1689c:	str	lr, [r0]
   168a0:	ldr	r0, [ip]
   168a4:	bl	12080 <err@plt>
   168a8:	andeq	r5, r1, r8, ror r7
   168ac:	muleq	r0, r4, r2
   168b0:	push	{r4, r5, r6, lr}
   168b4:	mov	r5, r0
   168b8:	mov	r4, r1
   168bc:	bl	16850 <__assert_fail@plt+0x43d4>
   168c0:	add	r3, r0, #32768	; 0x8000
   168c4:	cmp	r3, #65536	; 0x10000
   168c8:	bcs	168d4 <__assert_fail@plt+0x4458>
   168cc:	sxth	r0, r0
   168d0:	pop	{r4, r5, r6, pc}
   168d4:	bl	121f4 <__errno_location@plt>
   168d8:	ldr	ip, [pc, #32]	; 16900 <__assert_fail@plt+0x4484>
   168dc:	ldr	r1, [pc, #32]	; 16904 <__assert_fail@plt+0x4488>
   168e0:	add	ip, pc, ip
   168e4:	mov	lr, #34	; 0x22
   168e8:	mov	r3, r5
   168ec:	mov	r2, r4
   168f0:	add	r1, pc, r1
   168f4:	str	lr, [r0]
   168f8:	ldr	r0, [ip]
   168fc:	bl	12080 <err@plt>
   16900:	andeq	r5, r1, r0, lsr #14
   16904:	andeq	r4, r0, ip, lsr r2
   16908:	mov	r2, #10
   1690c:	b	15c44 <__assert_fail@plt+0x37c8>
   16910:	mov	r2, #16
   16914:	b	15c44 <__assert_fail@plt+0x37c8>
   16918:	ldr	r2, [pc, #228]	; 16a04 <__assert_fail@plt+0x4588>
   1691c:	ldr	r3, [pc, #228]	; 16a08 <__assert_fail@plt+0x458c>
   16920:	add	r2, pc, r2
   16924:	push	{r4, r5, r6, r7, r8, lr}
   16928:	sub	sp, sp, #8
   1692c:	ldr	r7, [r2, r3]
   16930:	mov	r5, #0
   16934:	mov	r4, r0
   16938:	ldr	r3, [r7]
   1693c:	mov	r8, r1
   16940:	str	r5, [sp]
   16944:	str	r3, [sp, #4]
   16948:	bl	121f4 <__errno_location@plt>
   1694c:	cmp	r4, r5
   16950:	str	r5, [r0]
   16954:	beq	16964 <__assert_fail@plt+0x44e8>
   16958:	ldrsb	r3, [r4]
   1695c:	cmp	r3, r5
   16960:	bne	16984 <__assert_fail@plt+0x4508>
   16964:	ldr	r1, [pc, #160]	; 16a0c <__assert_fail@plt+0x4590>
   16968:	mov	r3, r4
   1696c:	add	r1, pc, r1
   16970:	mov	r2, r8
   16974:	ldr	r0, [r1]
   16978:	ldr	r1, [pc, #144]	; 16a10 <__assert_fail@plt+0x4594>
   1697c:	add	r1, pc, r1
   16980:	bl	12320 <errx@plt>
   16984:	mov	r6, r0
   16988:	mov	r1, sp
   1698c:	mov	r0, r4
   16990:	bl	1229c <strtod@plt>
   16994:	ldr	r2, [r6]
   16998:	cmp	r2, r5
   1699c:	bne	169d8 <__assert_fail@plt+0x455c>
   169a0:	ldr	r3, [sp]
   169a4:	cmp	r3, r4
   169a8:	beq	16964 <__assert_fail@plt+0x44e8>
   169ac:	cmp	r3, r5
   169b0:	beq	169c0 <__assert_fail@plt+0x4544>
   169b4:	ldrsb	r3, [r3]
   169b8:	cmp	r3, r5
   169bc:	bne	16964 <__assert_fail@plt+0x44e8>
   169c0:	ldr	r2, [sp, #4]
   169c4:	ldr	r3, [r7]
   169c8:	cmp	r2, r3
   169cc:	bne	16a00 <__assert_fail@plt+0x4584>
   169d0:	add	sp, sp, #8
   169d4:	pop	{r4, r5, r6, r7, r8, pc}
   169d8:	ldr	r3, [pc, #52]	; 16a14 <__assert_fail@plt+0x4598>
   169dc:	cmp	r2, #34	; 0x22
   169e0:	add	r3, pc, r3
   169e4:	ldr	r0, [r3]
   169e8:	bne	16964 <__assert_fail@plt+0x44e8>
   169ec:	ldr	r1, [pc, #36]	; 16a18 <__assert_fail@plt+0x459c>
   169f0:	mov	r3, r4
   169f4:	mov	r2, r8
   169f8:	add	r1, pc, r1
   169fc:	bl	12080 <err@plt>
   16a00:	bl	1202c <__stack_chk_fail@plt>
   16a04:	andeq	r5, r1, r4, lsr #9
   16a08:	andeq	r0, r0, ip, lsr #4
   16a0c:	muleq	r1, r4, r6
   16a10:			; <UNDEFINED> instruction: 0x000041b0
   16a14:	andeq	r5, r1, r0, lsr #12
   16a18:	andeq	r4, r0, r4, lsr r1
   16a1c:	ldr	r2, [pc, #232]	; 16b0c <__assert_fail@plt+0x4690>
   16a20:	ldr	r3, [pc, #232]	; 16b10 <__assert_fail@plt+0x4694>
   16a24:	add	r2, pc, r2
   16a28:	push	{r4, r5, r6, r7, r8, lr}
   16a2c:	sub	sp, sp, #8
   16a30:	ldr	r7, [r2, r3]
   16a34:	mov	r5, #0
   16a38:	mov	r4, r0
   16a3c:	ldr	r3, [r7]
   16a40:	mov	r8, r1
   16a44:	str	r5, [sp]
   16a48:	str	r3, [sp, #4]
   16a4c:	bl	121f4 <__errno_location@plt>
   16a50:	cmp	r4, r5
   16a54:	str	r5, [r0]
   16a58:	beq	16a68 <__assert_fail@plt+0x45ec>
   16a5c:	ldrsb	r3, [r4]
   16a60:	cmp	r3, r5
   16a64:	bne	16a88 <__assert_fail@plt+0x460c>
   16a68:	ldr	r1, [pc, #164]	; 16b14 <__assert_fail@plt+0x4698>
   16a6c:	mov	r3, r4
   16a70:	add	r1, pc, r1
   16a74:	mov	r2, r8
   16a78:	ldr	r0, [r1]
   16a7c:	ldr	r1, [pc, #148]	; 16b18 <__assert_fail@plt+0x469c>
   16a80:	add	r1, pc, r1
   16a84:	bl	12320 <errx@plt>
   16a88:	mov	r6, r0
   16a8c:	mov	r2, #10
   16a90:	mov	r1, sp
   16a94:	mov	r0, r4
   16a98:	bl	11eb8 <strtol@plt>
   16a9c:	ldr	r2, [r6]
   16aa0:	cmp	r2, r5
   16aa4:	bne	16ae0 <__assert_fail@plt+0x4664>
   16aa8:	ldr	r3, [sp]
   16aac:	cmp	r3, r4
   16ab0:	beq	16a68 <__assert_fail@plt+0x45ec>
   16ab4:	cmp	r3, r5
   16ab8:	beq	16ac8 <__assert_fail@plt+0x464c>
   16abc:	ldrsb	r3, [r3]
   16ac0:	cmp	r3, r5
   16ac4:	bne	16a68 <__assert_fail@plt+0x45ec>
   16ac8:	ldr	r2, [sp, #4]
   16acc:	ldr	r3, [r7]
   16ad0:	cmp	r2, r3
   16ad4:	bne	16b08 <__assert_fail@plt+0x468c>
   16ad8:	add	sp, sp, #8
   16adc:	pop	{r4, r5, r6, r7, r8, pc}
   16ae0:	ldr	r3, [pc, #52]	; 16b1c <__assert_fail@plt+0x46a0>
   16ae4:	cmp	r2, #34	; 0x22
   16ae8:	add	r3, pc, r3
   16aec:	ldr	r0, [r3]
   16af0:	bne	16a68 <__assert_fail@plt+0x45ec>
   16af4:	ldr	r1, [pc, #36]	; 16b20 <__assert_fail@plt+0x46a4>
   16af8:	mov	r3, r4
   16afc:	mov	r2, r8
   16b00:	add	r1, pc, r1
   16b04:	bl	12080 <err@plt>
   16b08:	bl	1202c <__stack_chk_fail@plt>
   16b0c:	andeq	r5, r1, r0, lsr #7
   16b10:	andeq	r0, r0, ip, lsr #4
   16b14:	muleq	r1, r0, r5
   16b18:	andeq	r4, r0, ip, lsr #1
   16b1c:	andeq	r5, r1, r8, lsl r5
   16b20:	andeq	r4, r0, ip, lsr #32
   16b24:	ldr	r2, [pc, #232]	; 16c14 <__assert_fail@plt+0x4798>
   16b28:	ldr	r3, [pc, #232]	; 16c18 <__assert_fail@plt+0x479c>
   16b2c:	add	r2, pc, r2
   16b30:	push	{r4, r5, r6, r7, r8, lr}
   16b34:	sub	sp, sp, #8
   16b38:	ldr	r7, [r2, r3]
   16b3c:	mov	r5, #0
   16b40:	mov	r4, r0
   16b44:	ldr	r3, [r7]
   16b48:	mov	r8, r1
   16b4c:	str	r5, [sp]
   16b50:	str	r3, [sp, #4]
   16b54:	bl	121f4 <__errno_location@plt>
   16b58:	cmp	r4, r5
   16b5c:	str	r5, [r0]
   16b60:	beq	16b70 <__assert_fail@plt+0x46f4>
   16b64:	ldrsb	r3, [r4]
   16b68:	cmp	r3, r5
   16b6c:	bne	16b90 <__assert_fail@plt+0x4714>
   16b70:	ldr	r1, [pc, #164]	; 16c1c <__assert_fail@plt+0x47a0>
   16b74:	mov	r3, r4
   16b78:	add	r1, pc, r1
   16b7c:	mov	r2, r8
   16b80:	ldr	r0, [r1]
   16b84:	ldr	r1, [pc, #148]	; 16c20 <__assert_fail@plt+0x47a4>
   16b88:	add	r1, pc, r1
   16b8c:	bl	12320 <errx@plt>
   16b90:	mov	r6, r0
   16b94:	mov	r2, #10
   16b98:	mov	r1, sp
   16b9c:	mov	r0, r4
   16ba0:	bl	12188 <strtoul@plt>
   16ba4:	ldr	r2, [r6]
   16ba8:	cmp	r2, r5
   16bac:	bne	16be8 <__assert_fail@plt+0x476c>
   16bb0:	ldr	r3, [sp]
   16bb4:	cmp	r3, r4
   16bb8:	beq	16b70 <__assert_fail@plt+0x46f4>
   16bbc:	cmp	r3, r5
   16bc0:	beq	16bd0 <__assert_fail@plt+0x4754>
   16bc4:	ldrsb	r3, [r3]
   16bc8:	cmp	r3, r5
   16bcc:	bne	16b70 <__assert_fail@plt+0x46f4>
   16bd0:	ldr	r2, [sp, #4]
   16bd4:	ldr	r3, [r7]
   16bd8:	cmp	r2, r3
   16bdc:	bne	16c10 <__assert_fail@plt+0x4794>
   16be0:	add	sp, sp, #8
   16be4:	pop	{r4, r5, r6, r7, r8, pc}
   16be8:	ldr	r3, [pc, #52]	; 16c24 <__assert_fail@plt+0x47a8>
   16bec:	cmp	r2, #34	; 0x22
   16bf0:	add	r3, pc, r3
   16bf4:	ldr	r0, [r3]
   16bf8:	bne	16b70 <__assert_fail@plt+0x46f4>
   16bfc:	ldr	r1, [pc, #36]	; 16c28 <__assert_fail@plt+0x47ac>
   16c00:	mov	r3, r4
   16c04:	mov	r2, r8
   16c08:	add	r1, pc, r1
   16c0c:	bl	12080 <err@plt>
   16c10:	bl	1202c <__stack_chk_fail@plt>
   16c14:	muleq	r1, r8, r2
   16c18:	andeq	r0, r0, ip, lsr #4
   16c1c:	andeq	r5, r1, r8, lsl #9
   16c20:	andeq	r3, r0, r4, lsr #31
   16c24:	andeq	r5, r1, r0, lsl r4
   16c28:	andeq	r3, r0, r4, lsr #30
   16c2c:	ldr	r3, [pc, #140]	; 16cc0 <__assert_fail@plt+0x4844>
   16c30:	ldr	r2, [pc, #140]	; 16cc4 <__assert_fail@plt+0x4848>
   16c34:	add	r3, pc, r3
   16c38:	push	{r4, r5, r6, lr}
   16c3c:	sub	sp, sp, #16
   16c40:	ldr	r4, [r3, r2]
   16c44:	mov	r5, r1
   16c48:	mov	r1, sp
   16c4c:	ldr	r3, [r4]
   16c50:	mov	r6, r0
   16c54:	str	r3, [sp, #12]
   16c58:	bl	1646c <__assert_fail@plt+0x3ff0>
   16c5c:	cmp	r0, #0
   16c60:	beq	16ca0 <__assert_fail@plt+0x4824>
   16c64:	bl	121f4 <__errno_location@plt>
   16c68:	ldr	r3, [pc, #88]	; 16cc8 <__assert_fail@plt+0x484c>
   16c6c:	mov	r2, r5
   16c70:	ldr	r1, [pc, r3]
   16c74:	ldr	r3, [r0]
   16c78:	mov	r0, r1
   16c7c:	cmp	r3, #0
   16c80:	mov	r3, r6
   16c84:	beq	16c94 <__assert_fail@plt+0x4818>
   16c88:	ldr	r1, [pc, #60]	; 16ccc <__assert_fail@plt+0x4850>
   16c8c:	add	r1, pc, r1
   16c90:	bl	12080 <err@plt>
   16c94:	ldr	r1, [pc, #52]	; 16cd0 <__assert_fail@plt+0x4854>
   16c98:	add	r1, pc, r1
   16c9c:	bl	12320 <errx@plt>
   16ca0:	ldr	r2, [sp, #12]
   16ca4:	ldr	r3, [r4]
   16ca8:	ldrd	r0, [sp]
   16cac:	cmp	r2, r3
   16cb0:	bne	16cbc <__assert_fail@plt+0x4840>
   16cb4:	add	sp, sp, #16
   16cb8:	pop	{r4, r5, r6, pc}
   16cbc:	bl	1202c <__stack_chk_fail@plt>
   16cc0:	muleq	r1, r0, r1
   16cc4:	andeq	r0, r0, ip, lsr #4
   16cc8:	muleq	r1, r0, r3
   16ccc:	andeq	r3, r0, r0, lsr #29
   16cd0:	muleq	r0, r4, lr
   16cd4:	push	{r4, lr}
   16cd8:	mov	r4, r1
   16cdc:	mov	r1, r2
   16ce0:	bl	16918 <__assert_fail@plt+0x449c>
   16ce4:	vldr	d6, [pc, #28]	; 16d08 <__assert_fail@plt+0x488c>
   16ce8:	vcvt.s32.f64	s15, d0
   16cec:	vcvt.f64.s32	d5, s15
   16cf0:	vstr	s15, [r4]
   16cf4:	vsub.f64	d0, d0, d5
   16cf8:	vmul.f64	d0, d0, d6
   16cfc:	vcvt.s32.f64	s0, d0
   16d00:	vstr	s0, [r4, #4]
   16d04:	pop	{r4, pc}
   16d08:	andeq	r0, r0, r0
   16d0c:	smlawbmi	lr, r0, r4, r8
   16d10:	and	r2, r0, #61440	; 0xf000
   16d14:	cmp	r2, #16384	; 0x4000
   16d18:	moveq	r2, r1
   16d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d20:	moveq	sl, #100	; 0x64
   16d24:	mov	r3, r0
   16d28:	add	r9, r1, #1
   16d2c:	add	r8, r1, #2
   16d30:	add	r7, r1, #3
   16d34:	add	r6, r1, #4
   16d38:	add	r5, r1, #5
   16d3c:	add	r4, r1, #6
   16d40:	add	lr, r1, #7
   16d44:	add	ip, r1, #8
   16d48:	add	r0, r1, #9
   16d4c:	strbeq	sl, [r2], #10
   16d50:	beq	16df4 <__assert_fail@plt+0x4978>
   16d54:	cmp	r2, #40960	; 0xa000
   16d58:	moveq	r2, r1
   16d5c:	moveq	sl, #108	; 0x6c
   16d60:	strbeq	sl, [r2], #10
   16d64:	beq	16df4 <__assert_fail@plt+0x4978>
   16d68:	cmp	r2, #8192	; 0x2000
   16d6c:	moveq	r2, r1
   16d70:	moveq	sl, #99	; 0x63
   16d74:	strbeq	sl, [r2], #10
   16d78:	beq	16df4 <__assert_fail@plt+0x4978>
   16d7c:	cmp	r2, #24576	; 0x6000
   16d80:	moveq	r2, r1
   16d84:	moveq	sl, #98	; 0x62
   16d88:	strbeq	sl, [r2], #10
   16d8c:	beq	16df4 <__assert_fail@plt+0x4978>
   16d90:	cmp	r2, #49152	; 0xc000
   16d94:	moveq	r2, r1
   16d98:	moveq	sl, #115	; 0x73
   16d9c:	strbeq	sl, [r2], #10
   16da0:	beq	16df4 <__assert_fail@plt+0x4978>
   16da4:	cmp	r2, #4096	; 0x1000
   16da8:	moveq	r2, r1
   16dac:	moveq	sl, #112	; 0x70
   16db0:	strbeq	sl, [r2], #10
   16db4:	beq	16df4 <__assert_fail@plt+0x4978>
   16db8:	cmp	r2, #32768	; 0x8000
   16dbc:	moveq	r2, r1
   16dc0:	moveq	sl, #45	; 0x2d
   16dc4:	strbeq	sl, [r2], #10
   16dc8:	beq	16df4 <__assert_fail@plt+0x4978>
   16dcc:	mov	r2, r0
   16dd0:	mov	r0, ip
   16dd4:	mov	ip, lr
   16dd8:	mov	lr, r4
   16ddc:	mov	r4, r5
   16de0:	mov	r5, r6
   16de4:	mov	r6, r7
   16de8:	mov	r7, r8
   16dec:	mov	r8, r9
   16df0:	mov	r9, r1
   16df4:	tst	r3, #256	; 0x100
   16df8:	movne	fp, #114	; 0x72
   16dfc:	moveq	fp, #45	; 0x2d
   16e00:	tst	r3, #128	; 0x80
   16e04:	movne	sl, #119	; 0x77
   16e08:	moveq	sl, #45	; 0x2d
   16e0c:	tst	r3, #2048	; 0x800
   16e10:	strb	fp, [r9]
   16e14:	and	r9, r3, #64	; 0x40
   16e18:	strb	sl, [r8]
   16e1c:	beq	16eb8 <__assert_fail@plt+0x4a3c>
   16e20:	cmp	r9, #0
   16e24:	movne	r9, #115	; 0x73
   16e28:	moveq	r9, #83	; 0x53
   16e2c:	tst	r3, #32
   16e30:	movne	r8, #114	; 0x72
   16e34:	moveq	r8, #45	; 0x2d
   16e38:	tst	r3, #16
   16e3c:	strb	r9, [r7]
   16e40:	movne	r7, #119	; 0x77
   16e44:	moveq	r7, #45	; 0x2d
   16e48:	tst	r3, #1024	; 0x400
   16e4c:	strb	r8, [r6]
   16e50:	and	r6, r3, #8
   16e54:	strb	r7, [r5]
   16e58:	beq	16ec8 <__assert_fail@plt+0x4a4c>
   16e5c:	cmp	r6, #0
   16e60:	movne	r6, #115	; 0x73
   16e64:	moveq	r6, #83	; 0x53
   16e68:	tst	r3, #4
   16e6c:	movne	r5, #114	; 0x72
   16e70:	moveq	r5, #45	; 0x2d
   16e74:	tst	r3, #2
   16e78:	strb	r6, [r4]
   16e7c:	movne	r4, #119	; 0x77
   16e80:	moveq	r4, #45	; 0x2d
   16e84:	tst	r3, #512	; 0x200
   16e88:	strb	r5, [lr]
   16e8c:	and	r3, r3, #1
   16e90:	strb	r4, [ip]
   16e94:	beq	16ed8 <__assert_fail@plt+0x4a5c>
   16e98:	cmp	r3, #0
   16e9c:	movne	ip, #116	; 0x74
   16ea0:	moveq	ip, #84	; 0x54
   16ea4:	mov	r3, #0
   16ea8:	strb	ip, [r0]
   16eac:	mov	r0, r1
   16eb0:	strb	r3, [r2]
   16eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eb8:	cmp	r9, #0
   16ebc:	movne	r9, #120	; 0x78
   16ec0:	moveq	r9, #45	; 0x2d
   16ec4:	b	16e2c <__assert_fail@plt+0x49b0>
   16ec8:	cmp	r6, #0
   16ecc:	movne	r6, #120	; 0x78
   16ed0:	moveq	r6, #45	; 0x2d
   16ed4:	b	16e68 <__assert_fail@plt+0x49ec>
   16ed8:	cmp	r3, #0
   16edc:	movne	ip, #120	; 0x78
   16ee0:	moveq	ip, #45	; 0x2d
   16ee4:	b	16ea4 <__assert_fail@plt+0x4a28>
   16ee8:	ldr	r1, [pc, #680]	; 17198 <__assert_fail@plt+0x4d1c>
   16eec:	ldr	ip, [pc, #680]	; 1719c <__assert_fail@plt+0x4d20>
   16ef0:	add	r1, pc, r1
   16ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ef8:	sub	sp, sp, #108	; 0x6c
   16efc:	ldr	r8, [r1, ip]
   16f00:	tst	r0, #2
   16f04:	strd	r2, [sp, #32]
   16f08:	ldr	r1, [r8]
   16f0c:	addeq	r9, sp, #60	; 0x3c
   16f10:	str	r1, [sp, #100]	; 0x64
   16f14:	ldrd	r2, [sp, #32]
   16f18:	movne	r1, #32
   16f1c:	strbne	r1, [sp, #60]	; 0x3c
   16f20:	addne	ip, sp, #61	; 0x3d
   16f24:	addne	r9, sp, #60	; 0x3c
   16f28:	moveq	ip, r9
   16f2c:	mov	r1, #10
   16f30:	mov	sl, #1
   16f34:	sub	lr, r1, #32
   16f38:	lsl	r4, sl, r1
   16f3c:	lsl	r5, sl, lr
   16f40:	rsb	lr, r1, #32
   16f44:	orr	r5, r5, sl, lsr lr
   16f48:	cmp	r3, r5
   16f4c:	cmpeq	r2, r4
   16f50:	bcc	1710c <__assert_fail@plt+0x4c90>
   16f54:	add	r1, r1, #10
   16f58:	cmp	r1, #70	; 0x46
   16f5c:	bne	16f34 <__assert_fail@plt+0x4ab8>
   16f60:	mov	lr, ip
   16f64:	strd	r2, [sp, #32]
   16f68:	mov	r4, r2
   16f6c:	tst	r0, #1
   16f70:	mov	r2, #69	; 0x45
   16f74:	bic	r5, r3, #-268435456	; 0xf0000000
   16f78:	lsr	sl, r3, #28
   16f7c:	strb	r2, [lr], #1
   16f80:	bne	170f4 <__assert_fail@plt+0x4c78>
   16f84:	orrs	r3, r4, r5
   16f88:	mov	r3, #0
   16f8c:	strb	r3, [lr]
   16f90:	beq	17134 <__assert_fail@plt+0x4cb8>
   16f94:	sub	r2, r1, #20
   16f98:	rsb	r0, r2, #32
   16f9c:	lsr	r3, r4, r2
   16fa0:	sub	r1, r1, #52	; 0x34
   16fa4:	orr	r3, r3, r5, lsl r0
   16fa8:	orr	r3, r3, r5, lsr r1
   16fac:	lsr	r2, r5, r2
   16fb0:	adds	r6, r3, #50	; 0x32
   16fb4:	adc	r7, r2, #0
   16fb8:	mov	r3, #0
   16fbc:	mov	r2, #100	; 0x64
   16fc0:	mov	r0, r6
   16fc4:	mov	r1, r7
   16fc8:	bl	190a4 <__assert_fail@plt+0x6c28>
   16fcc:	cmp	r1, #0
   16fd0:	cmpeq	r0, #10
   16fd4:	mov	r2, r0
   16fd8:	mov	r3, r1
   16fdc:	addeq	sl, sl, #1
   16fe0:	beq	17134 <__assert_fail@plt+0x4cb8>
   16fe4:	cmp	r7, #0
   16fe8:	cmpeq	r6, #99	; 0x63
   16fec:	strd	r2, [sp, #32]
   16ff0:	bls	17134 <__assert_fail@plt+0x4cb8>
   16ff4:	bl	12374 <localeconv@plt>
   16ff8:	ldrd	r2, [sp, #32]
   16ffc:	cmp	r0, #0
   17000:	beq	1717c <__assert_fail@plt+0x4d00>
   17004:	ldr	r0, [r0]
   17008:	cmp	r0, #0
   1700c:	beq	17188 <__assert_fail@plt+0x4d0c>
   17010:	ldrsb	r1, [r0]
   17014:	cmp	r1, #0
   17018:	ldreq	r0, [pc, #384]	; 171a0 <__assert_fail@plt+0x4d24>
   1701c:	addeq	r0, pc, r0
   17020:	ldr	r1, [pc, #380]	; 171a4 <__assert_fail@plt+0x4d28>
   17024:	strd	r2, [sp, #16]
   17028:	add	r1, pc, r1
   1702c:	add	r4, sp, #68	; 0x44
   17030:	mov	r3, #32
   17034:	str	r0, [sp, #8]
   17038:	str	r1, [sp]
   1703c:	str	r9, [sp, #24]
   17040:	str	sl, [sp, #4]
   17044:	mov	r0, r4
   17048:	mov	r1, r3
   1704c:	mov	r2, #1
   17050:	bl	12458 <__snprintf_chk@plt>
   17054:	b	1715c <__assert_fail@plt+0x4ce0>
   17058:	ldr	r4, [pc, #328]	; 171a8 <__assert_fail@plt+0x4d2c>
   1705c:	mvn	sl, #0
   17060:	ldr	fp, [pc, #324]	; 171ac <__assert_fail@plt+0x4d30>
   17064:	umull	r2, r3, lr, r4
   17068:	sub	r4, r1, #42	; 0x2a
   1706c:	strd	r2, [sp, #40]	; 0x28
   17070:	ldr	r3, [sp, #44]	; 0x2c
   17074:	lsl	r2, sl, lr
   17078:	lsr	r3, r3, #3
   1707c:	str	r3, [sp, #52]	; 0x34
   17080:	ldr	r3, [sp, #32]
   17084:	str	r4, [sp, #48]	; 0x30
   17088:	orr	r4, r2, sl, lsl r4
   1708c:	lsr	r2, r3, lr
   17090:	mov	r3, r2
   17094:	ldr	r2, [sp, #52]	; 0x34
   17098:	add	fp, pc, fp
   1709c:	str	r4, [sp, #40]	; 0x28
   170a0:	ldrsb	fp, [fp, r2]
   170a4:	mov	r2, r3
   170a8:	ldr	r3, [sp, #36]	; 0x24
   170ac:	rsb	r5, lr, #32
   170b0:	ldr	r4, [sp, #40]	; 0x28
   170b4:	orr	r2, r2, r3, lsl r5
   170b8:	orr	r4, r4, sl, lsr r5
   170bc:	ldr	r3, [sp, #32]
   170c0:	str	r4, [sp, #40]	; 0x28
   170c4:	cmp	r0, #0
   170c8:	bic	r4, r3, sl, lsl lr
   170cc:	ldr	r0, [sp, #36]	; 0x24
   170d0:	ldr	r3, [sp, #48]	; 0x30
   170d4:	mov	lr, ip
   170d8:	orr	sl, r2, r0, lsr r3
   170dc:	ldr	r3, [sp, #40]	; 0x28
   170e0:	strb	fp, [lr], #1
   170e4:	bic	r5, r0, r3
   170e8:	beq	16f84 <__assert_fail@plt+0x4b08>
   170ec:	cmp	fp, #66	; 0x42
   170f0:	beq	16f84 <__assert_fail@plt+0x4b08>
   170f4:	mov	r3, #105	; 0x69
   170f8:	strb	r3, [ip, #1]
   170fc:	mov	r3, #66	; 0x42
   17100:	add	lr, ip, #3
   17104:	strb	r3, [ip, #2]
   17108:	b	16f84 <__assert_fail@plt+0x4b08>
   1710c:	subs	lr, r1, #10
   17110:	strd	r2, [sp, #32]
   17114:	and	r0, r0, #1
   17118:	bne	17058 <__assert_fail@plt+0x4bdc>
   1711c:	ldr	sl, [sp, #32]
   17120:	cmp	r0, #0
   17124:	movne	r0, lr
   17128:	mov	r3, #66	; 0x42
   1712c:	strb	r0, [ip, #1]
   17130:	strb	r3, [ip]
   17134:	ldr	r2, [pc, #116]	; 171b0 <__assert_fail@plt+0x4d34>
   17138:	add	r4, sp, #68	; 0x44
   1713c:	add	r2, pc, r2
   17140:	mov	r3, #32
   17144:	stm	sp, {r2, sl}
   17148:	str	r9, [sp, #8]
   1714c:	mov	r0, r4
   17150:	mov	r1, r3
   17154:	mov	r2, #1
   17158:	bl	12458 <__snprintf_chk@plt>
   1715c:	mov	r0, r4
   17160:	bl	12014 <strdup@plt>
   17164:	ldr	r2, [sp, #100]	; 0x64
   17168:	ldr	r3, [r8]
   1716c:	cmp	r2, r3
   17170:	bne	17194 <__assert_fail@plt+0x4d18>
   17174:	add	sp, sp, #108	; 0x6c
   17178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1717c:	ldr	r0, [pc, #48]	; 171b4 <__assert_fail@plt+0x4d38>
   17180:	add	r0, pc, r0
   17184:	b	17020 <__assert_fail@plt+0x4ba4>
   17188:	ldr	r0, [pc, #40]	; 171b8 <__assert_fail@plt+0x4d3c>
   1718c:	add	r0, pc, r0
   17190:	b	17020 <__assert_fail@plt+0x4ba4>
   17194:	bl	1202c <__stack_chk_fail@plt>
   17198:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1719c:	andeq	r0, r0, ip, lsr #4
   171a0:	andeq	r3, r0, r8, asr #25
   171a4:	andeq	r3, r0, r0, lsr fp
   171a8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   171ac:			; <UNDEFINED> instruction: 0x00003ab8
   171b0:	andeq	r3, r0, r8, lsr #20
   171b4:	andeq	r3, r0, r4, ror #22
   171b8:	andeq	r3, r0, r8, asr fp
   171bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   171c0:	subs	r4, r0, #0
   171c4:	beq	17294 <__assert_fail@plt+0x4e18>
   171c8:	ldrsb	lr, [r4]
   171cc:	cmp	lr, #0
   171d0:	beq	17294 <__assert_fail@plt+0x4e18>
   171d4:	cmp	r1, #0
   171d8:	clz	ip, r2
   171dc:	lsr	ip, ip, #5
   171e0:	moveq	r0, #1
   171e4:	movne	r0, ip
   171e8:	cmp	r3, #0
   171ec:	moveq	r0, #1
   171f0:	cmp	r0, #0
   171f4:	bne	17294 <__assert_fail@plt+0x4e18>
   171f8:	mov	r8, r3
   171fc:	mov	r7, r2
   17200:	mov	r9, r1
   17204:	mov	r5, r0
   17208:	b	17264 <__assert_fail@plt+0x4de8>
   1720c:	cmp	r3, #0
   17210:	bne	17250 <__assert_fail@plt+0x4dd4>
   17214:	cmn	r4, #1
   17218:	add	r6, r4, #1
   1721c:	beq	1729c <__assert_fail@plt+0x4e20>
   17220:	cmp	r0, r6
   17224:	bcs	17294 <__assert_fail@plt+0x4e18>
   17228:	sub	r1, r6, r0
   1722c:	blx	r8
   17230:	cmn	r0, #1
   17234:	beq	17294 <__assert_fail@plt+0x4e18>
   17238:	str	r0, [r9, r5, lsl #2]
   1723c:	ldrsb	r3, [r6]
   17240:	add	r5, r5, #1
   17244:	cmp	r3, #0
   17248:	beq	1729c <__assert_fail@plt+0x4e20>
   1724c:	mov	r0, #0
   17250:	cmn	r4, #1
   17254:	beq	1729c <__assert_fail@plt+0x4e20>
   17258:	ldrsb	lr, [r4, #1]!
   1725c:	cmp	lr, #0
   17260:	beq	1729c <__assert_fail@plt+0x4e20>
   17264:	cmp	r7, r5
   17268:	mov	r6, r4
   1726c:	bls	172a4 <__assert_fail@plt+0x4e28>
   17270:	cmp	r0, #0
   17274:	moveq	r0, r4
   17278:	cmp	lr, #44	; 0x2c
   1727c:	ldrsb	r3, [r4, #1]
   17280:	bne	1720c <__assert_fail@plt+0x4d90>
   17284:	cmp	r3, #0
   17288:	beq	17214 <__assert_fail@plt+0x4d98>
   1728c:	cmp	r0, r6
   17290:	bcc	17228 <__assert_fail@plt+0x4dac>
   17294:	mvn	r0, #0
   17298:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1729c:	mov	r0, r5
   172a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172a4:	mvn	r0, #1
   172a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172ac:	cmp	r0, #0
   172b0:	beq	1731c <__assert_fail@plt+0x4ea0>
   172b4:	push	{r4, lr}
   172b8:	mov	r4, r3
   172bc:	cmp	r4, #0
   172c0:	ldrsb	ip, [r0]
   172c4:	clz	r3, ip
   172c8:	lsr	r3, r3, #5
   172cc:	moveq	r3, #1
   172d0:	cmp	r3, #0
   172d4:	bne	17314 <__assert_fail@plt+0x4e98>
   172d8:	ldr	lr, [r4]
   172dc:	cmp	lr, r2
   172e0:	bhi	17314 <__assert_fail@plt+0x4e98>
   172e4:	cmp	ip, #43	; 0x2b
   172e8:	strne	r3, [r4]
   172ec:	addeq	r0, r0, #1
   172f0:	ldr	r3, [sp, #8]
   172f4:	addeq	r1, r1, lr, lsl #2
   172f8:	subeq	r2, r2, lr
   172fc:	bl	171bc <__assert_fail@plt+0x4d40>
   17300:	cmp	r0, #0
   17304:	ldrgt	r3, [r4]
   17308:	addgt	r3, r3, r0
   1730c:	strgt	r3, [r4]
   17310:	pop	{r4, pc}
   17314:	mvn	r0, #0
   17318:	pop	{r4, pc}
   1731c:	mvn	r0, #0
   17320:	bx	lr
   17324:	cmp	r2, #0
   17328:	clz	r3, r1
   1732c:	lsr	r3, r3, #5
   17330:	moveq	r3, #1
   17334:	cmp	r0, #0
   17338:	moveq	r3, #1
   1733c:	cmp	r3, #0
   17340:	bne	1740c <__assert_fail@plt+0x4f90>
   17344:	push	{r4, r5, r6, r7, r8, lr}
   17348:	mov	r6, r2
   1734c:	mov	r2, r3
   17350:	ldrsb	r3, [r0]
   17354:	mov	r8, r1
   17358:	mov	r4, r0
   1735c:	mov	r7, #1
   17360:	cmp	r3, #0
   17364:	beq	173d4 <__assert_fail@plt+0x4f58>
   17368:	cmp	r2, #0
   1736c:	moveq	r2, r4
   17370:	cmp	r3, #44	; 0x2c
   17374:	mov	r5, r4
   17378:	ldrsb	r3, [r4, #1]!
   1737c:	beq	173dc <__assert_fail@plt+0x4f60>
   17380:	cmp	r3, #0
   17384:	bne	173fc <__assert_fail@plt+0x4f80>
   17388:	mov	r5, r4
   1738c:	cmp	r2, r5
   17390:	sub	r1, r5, r2
   17394:	mov	r0, r2
   17398:	bcs	173f4 <__assert_fail@plt+0x4f78>
   1739c:	blx	r6
   173a0:	mov	r2, r4
   173a4:	cmp	r0, #0
   173a8:	and	r1, r0, #7
   173ac:	poplt	{r4, r5, r6, r7, r8, pc}
   173b0:	ldrb	r3, [r8, r0, asr #3]
   173b4:	orr	r3, r3, r7, lsl r1
   173b8:	strb	r3, [r8, r0, asr #3]
   173bc:	ldrsb	r3, [r5]
   173c0:	cmp	r3, #0
   173c4:	beq	173d4 <__assert_fail@plt+0x4f58>
   173c8:	ldrsb	r3, [r4]
   173cc:	cmp	r3, #0
   173d0:	bne	17370 <__assert_fail@plt+0x4ef4>
   173d4:	mov	r0, #0
   173d8:	pop	{r4, r5, r6, r7, r8, pc}
   173dc:	cmp	r3, #0
   173e0:	moveq	r5, r4
   173e4:	cmp	r2, r5
   173e8:	sub	r1, r5, r2
   173ec:	mov	r0, r2
   173f0:	bcc	1739c <__assert_fail@plt+0x4f20>
   173f4:	mvn	r0, #0
   173f8:	pop	{r4, r5, r6, r7, r8, pc}
   173fc:	adds	r4, r5, #1
   17400:	bne	17360 <__assert_fail@plt+0x4ee4>
   17404:	mov	r0, #0
   17408:	pop	{r4, r5, r6, r7, r8, pc}
   1740c:	mvn	r0, #21
   17410:	bx	lr
   17414:	cmp	r2, #0
   17418:	clz	r3, r1
   1741c:	lsr	r3, r3, #5
   17420:	moveq	r3, #1
   17424:	cmp	r0, #0
   17428:	moveq	r3, #1
   1742c:	cmp	r3, #0
   17430:	bne	174f4 <__assert_fail@plt+0x5078>
   17434:	push	{r4, r5, r6, r7, r8, lr}
   17438:	mov	r6, r2
   1743c:	mov	r2, r3
   17440:	ldrsb	r3, [r0]
   17444:	mov	r7, r1
   17448:	mov	r4, r0
   1744c:	cmp	r3, #0
   17450:	beq	174bc <__assert_fail@plt+0x5040>
   17454:	cmp	r2, #0
   17458:	moveq	r2, r4
   1745c:	cmp	r3, #44	; 0x2c
   17460:	mov	r5, r4
   17464:	ldrsb	r3, [r4, #1]!
   17468:	beq	174c4 <__assert_fail@plt+0x5048>
   1746c:	cmp	r3, #0
   17470:	bne	174e4 <__assert_fail@plt+0x5068>
   17474:	mov	r5, r4
   17478:	cmp	r2, r5
   1747c:	sub	r1, r5, r2
   17480:	mov	r0, r2
   17484:	bcs	174dc <__assert_fail@plt+0x5060>
   17488:	blx	r6
   1748c:	mov	r2, r4
   17490:	cmp	r0, #0
   17494:	poplt	{r4, r5, r6, r7, r8, pc}
   17498:	ldr	r3, [r7]
   1749c:	orr	r3, r3, r0
   174a0:	str	r3, [r7]
   174a4:	ldrsb	r3, [r5]
   174a8:	cmp	r3, #0
   174ac:	beq	174bc <__assert_fail@plt+0x5040>
   174b0:	ldrsb	r3, [r4]
   174b4:	cmp	r3, #0
   174b8:	bne	1745c <__assert_fail@plt+0x4fe0>
   174bc:	mov	r0, #0
   174c0:	pop	{r4, r5, r6, r7, r8, pc}
   174c4:	cmp	r3, #0
   174c8:	moveq	r5, r4
   174cc:	cmp	r2, r5
   174d0:	sub	r1, r5, r2
   174d4:	mov	r0, r2
   174d8:	bcc	17488 <__assert_fail@plt+0x500c>
   174dc:	mvn	r0, #0
   174e0:	pop	{r4, r5, r6, r7, r8, pc}
   174e4:	adds	r4, r5, #1
   174e8:	bne	1744c <__assert_fail@plt+0x4fd0>
   174ec:	mov	r0, #0
   174f0:	pop	{r4, r5, r6, r7, r8, pc}
   174f4:	mvn	r0, #21
   174f8:	bx	lr
   174fc:	ldr	ip, [pc, #396]	; 17690 <__assert_fail@plt+0x5214>
   17500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17504:	add	ip, pc, ip
   17508:	ldr	lr, [pc, #388]	; 17694 <__assert_fail@plt+0x5218>
   1750c:	sub	sp, sp, #8
   17510:	mov	r9, r3
   17514:	ldr	r5, [ip, lr]
   17518:	mov	sl, #0
   1751c:	subs	r4, r0, #0
   17520:	ldr	r3, [r5]
   17524:	mov	r7, r1
   17528:	str	sl, [sp]
   1752c:	mov	r1, ip
   17530:	str	r3, [sp, #4]
   17534:	beq	175a8 <__assert_fail@plt+0x512c>
   17538:	str	r9, [r7]
   1753c:	str	r9, [r2]
   17540:	mov	r6, r2
   17544:	bl	121f4 <__errno_location@plt>
   17548:	str	sl, [r0]
   1754c:	ldrsb	r3, [r4]
   17550:	mov	r8, r0
   17554:	cmp	r3, #58	; 0x3a
   17558:	beq	175c4 <__assert_fail@plt+0x5148>
   1755c:	mov	sl, sp
   17560:	mov	r1, sl
   17564:	mov	r2, #10
   17568:	mov	r0, r4
   1756c:	bl	11eb8 <strtol@plt>
   17570:	str	r0, [r7]
   17574:	str	r0, [r6]
   17578:	ldr	r0, [r8]
   1757c:	cmp	r0, #0
   17580:	bne	17614 <__assert_fail@plt+0x5198>
   17584:	ldr	r2, [sp]
   17588:	cmp	r2, #0
   1758c:	cmpne	r2, r4
   17590:	beq	17614 <__assert_fail@plt+0x5198>
   17594:	ldrsb	r3, [r2]
   17598:	cmp	r3, #58	; 0x3a
   1759c:	beq	1761c <__assert_fail@plt+0x51a0>
   175a0:	cmp	r3, #45	; 0x2d
   175a4:	beq	1762c <__assert_fail@plt+0x51b0>
   175a8:	mov	r0, #0
   175ac:	ldr	r2, [sp, #4]
   175b0:	ldr	r3, [r5]
   175b4:	cmp	r2, r3
   175b8:	bne	1768c <__assert_fail@plt+0x5210>
   175bc:	add	sp, sp, #8
   175c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175c4:	add	r4, r4, #1
   175c8:	mov	r0, r4
   175cc:	mov	r2, #10
   175d0:	mov	r1, sp
   175d4:	bl	11eb8 <strtol@plt>
   175d8:	str	r0, [r6]
   175dc:	ldr	r3, [r8]
   175e0:	cmp	r3, #0
   175e4:	bne	17614 <__assert_fail@plt+0x5198>
   175e8:	ldr	r3, [sp]
   175ec:	cmp	r3, #0
   175f0:	beq	17614 <__assert_fail@plt+0x5198>
   175f4:	ldrsb	r2, [r3]
   175f8:	sub	r3, r3, r4
   175fc:	clz	r3, r3
   17600:	cmp	r2, #0
   17604:	lsr	r3, r3, #5
   17608:	movne	r3, #1
   1760c:	cmp	r3, #0
   17610:	beq	175a8 <__assert_fail@plt+0x512c>
   17614:	mvn	r0, #0
   17618:	b	175ac <__assert_fail@plt+0x5130>
   1761c:	ldrsb	r3, [r2, #1]
   17620:	cmp	r3, #0
   17624:	streq	r9, [r6]
   17628:	beq	175ac <__assert_fail@plt+0x5130>
   1762c:	mov	r3, #0
   17630:	add	r4, r2, #1
   17634:	str	r3, [r8]
   17638:	mov	r1, sl
   1763c:	mov	r0, r4
   17640:	mov	r2, #10
   17644:	str	r3, [sp]
   17648:	bl	11eb8 <strtol@plt>
   1764c:	str	r0, [r6]
   17650:	ldr	r3, [r8]
   17654:	cmp	r3, #0
   17658:	bne	17614 <__assert_fail@plt+0x5198>
   1765c:	ldr	r2, [sp]
   17660:	cmp	r2, #0
   17664:	beq	17614 <__assert_fail@plt+0x5198>
   17668:	ldrsb	r3, [r2]
   1766c:	sub	r2, r2, r4
   17670:	clz	r2, r2
   17674:	cmp	r3, #0
   17678:	lsr	r2, r2, #5
   1767c:	movne	r2, #1
   17680:	cmp	r2, #0
   17684:	beq	175a8 <__assert_fail@plt+0x512c>
   17688:	b	17614 <__assert_fail@plt+0x5198>
   1768c:	bl	1202c <__stack_chk_fail@plt>
   17690:	andeq	r4, r1, r0, asr #17
   17694:	andeq	r0, r0, ip, lsr #4
   17698:	ldr	r3, [pc, #244]	; 17794 <__assert_fail@plt+0x5318>
   1769c:	ldr	r2, [pc, #244]	; 17798 <__assert_fail@plt+0x531c>
   176a0:	add	r3, pc, r3
   176a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   176a8:	sub	sp, sp, #20
   176ac:	ldr	r9, [r3, r2]
   176b0:	cmp	r0, #0
   176b4:	cmpne	r1, #0
   176b8:	ldr	r3, [r9]
   176bc:	str	r3, [sp, #12]
   176c0:	beq	17788 <__assert_fail@plt+0x530c>
   176c4:	mov	r4, r1
   176c8:	add	r8, sp, #4
   176cc:	add	r7, sp, #8
   176d0:	b	17710 <__assert_fail@plt+0x5294>
   176d4:	cmp	r4, r3
   176d8:	bne	17788 <__assert_fail@plt+0x530c>
   176dc:	mov	r2, r4
   176e0:	mov	r1, r6
   176e4:	mov	r0, r5
   176e8:	bl	123ec <strncmp@plt>
   176ec:	cmp	r0, #0
   176f0:	bne	17788 <__assert_fail@plt+0x530c>
   176f4:	adds	r0, r5, r4
   176f8:	moveq	r3, #0
   176fc:	movne	r3, #1
   17700:	adds	r4, r6, r4
   17704:	moveq	r3, #0
   17708:	cmp	r3, #0
   1770c:	beq	17788 <__assert_fail@plt+0x530c>
   17710:	mov	r1, r8
   17714:	bl	15b18 <__assert_fail@plt+0x369c>
   17718:	mov	r1, r7
   1771c:	mov	r5, r0
   17720:	mov	r0, r4
   17724:	bl	15b18 <__assert_fail@plt+0x369c>
   17728:	ldr	r4, [sp, #4]
   1772c:	ldr	r3, [sp, #8]
   17730:	mov	r6, r0
   17734:	adds	r0, r4, r3
   17738:	beq	1776c <__assert_fail@plt+0x52f0>
   1773c:	cmp	r0, #1
   17740:	bne	176d4 <__assert_fail@plt+0x5258>
   17744:	cmp	r5, #0
   17748:	beq	17758 <__assert_fail@plt+0x52dc>
   1774c:	ldrsb	r2, [r5]
   17750:	cmp	r2, #47	; 0x2f
   17754:	beq	17770 <__assert_fail@plt+0x52f4>
   17758:	cmp	r6, #0
   1775c:	beq	176d4 <__assert_fail@plt+0x5258>
   17760:	ldrsb	r2, [r6]
   17764:	cmp	r2, #47	; 0x2f
   17768:	bne	176d4 <__assert_fail@plt+0x5258>
   1776c:	mov	r0, #1
   17770:	ldr	r2, [sp, #12]
   17774:	ldr	r3, [r9]
   17778:	cmp	r2, r3
   1777c:	bne	17790 <__assert_fail@plt+0x5314>
   17780:	add	sp, sp, #20
   17784:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17788:	mov	r0, #0
   1778c:	b	17770 <__assert_fail@plt+0x52f4>
   17790:	bl	1202c <__stack_chk_fail@plt>
   17794:	andeq	r4, r1, r4, lsr #14
   17798:	andeq	r0, r0, ip, lsr #4
   1779c:	orrs	r3, r0, r1
   177a0:	beq	1781c <__assert_fail@plt+0x53a0>
   177a4:	cmp	r0, #0
   177a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   177ac:	mov	r4, r1
   177b0:	mov	r5, r0
   177b4:	beq	17828 <__assert_fail@plt+0x53ac>
   177b8:	cmp	r1, #0
   177bc:	beq	17838 <__assert_fail@plt+0x53bc>
   177c0:	mov	r6, r2
   177c4:	bl	12194 <strlen@plt>
   177c8:	mvn	r3, r0
   177cc:	cmp	r6, r3
   177d0:	mov	r7, r0
   177d4:	movhi	r8, #0
   177d8:	bhi	17814 <__assert_fail@plt+0x5398>
   177dc:	add	r9, r6, r0
   177e0:	add	r0, r9, #1
   177e4:	bl	1211c <malloc@plt>
   177e8:	subs	r8, r0, #0
   177ec:	beq	17814 <__assert_fail@plt+0x5398>
   177f0:	mov	r1, r5
   177f4:	mov	r2, r7
   177f8:	bl	11fc0 <memcpy@plt>
   177fc:	mov	r2, r6
   17800:	mov	r1, r4
   17804:	add	r0, r8, r7
   17808:	bl	11fc0 <memcpy@plt>
   1780c:	mov	r3, #0
   17810:	strb	r3, [r8, r9]
   17814:	mov	r0, r8
   17818:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1781c:	ldr	r0, [pc, #28]	; 17840 <__assert_fail@plt+0x53c4>
   17820:	add	r0, pc, r0
   17824:	b	12014 <strdup@plt>
   17828:	mov	r0, r4
   1782c:	mov	r1, r2
   17830:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   17834:	b	11f90 <strndup@plt>
   17838:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1783c:	b	12014 <strdup@plt>
   17840:	andeq	r2, r0, r8, asr #15
   17844:	push	{r4, r5, r6, lr}
   17848:	subs	r4, r1, #0
   1784c:	mov	r5, r0
   17850:	moveq	r2, r4
   17854:	beq	17864 <__assert_fail@plt+0x53e8>
   17858:	mov	r0, r4
   1785c:	bl	12194 <strlen@plt>
   17860:	mov	r2, r0
   17864:	mov	r1, r4
   17868:	mov	r0, r5
   1786c:	pop	{r4, r5, r6, lr}
   17870:	b	1779c <__assert_fail@plt+0x5320>
   17874:	push	{r1, r2, r3}
   17878:	ldr	r1, [pc, #132]	; 17904 <__assert_fail@plt+0x5488>
   1787c:	ldr	r3, [pc, #132]	; 17908 <__assert_fail@plt+0x548c>
   17880:	add	r1, pc, r1
   17884:	push	{r4, r5, lr}
   17888:	mov	r5, r0
   1788c:	ldr	r4, [r1, r3]
   17890:	sub	sp, sp, #16
   17894:	add	ip, sp, #32
   17898:	ldr	r0, [r4]
   1789c:	ldr	r2, [sp, #28]
   178a0:	str	r0, [sp, #12]
   178a4:	mov	r3, ip
   178a8:	add	r0, sp, #8
   178ac:	mov	r1, #1
   178b0:	str	ip, [sp, #4]
   178b4:	bl	12230 <__vasprintf_chk@plt>
   178b8:	subs	r2, r0, #0
   178bc:	movlt	r5, #0
   178c0:	blt	178dc <__assert_fail@plt+0x5460>
   178c4:	mov	r0, r5
   178c8:	ldr	r1, [sp, #8]
   178cc:	bl	1779c <__assert_fail@plt+0x5320>
   178d0:	mov	r5, r0
   178d4:	ldr	r0, [sp, #8]
   178d8:	bl	11f3c <free@plt>
   178dc:	ldr	r2, [sp, #12]
   178e0:	ldr	r3, [r4]
   178e4:	mov	r0, r5
   178e8:	cmp	r2, r3
   178ec:	bne	17900 <__assert_fail@plt+0x5484>
   178f0:	add	sp, sp, #16
   178f4:	pop	{r4, r5, lr}
   178f8:	add	sp, sp, #12
   178fc:	bx	lr
   17900:	bl	1202c <__stack_chk_fail@plt>
   17904:	andeq	r4, r1, r4, asr #10
   17908:	andeq	r0, r0, ip, lsr #4
   1790c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17910:	mov	r6, r0
   17914:	ldr	r0, [pc, #348]	; 17a78 <__assert_fail@plt+0x55fc>
   17918:	ldr	ip, [pc, #348]	; 17a7c <__assert_fail@plt+0x5600>
   1791c:	add	r0, pc, r0
   17920:	ldr	r5, [r6]
   17924:	ldr	r8, [r0, ip]
   17928:	sub	sp, sp, #8
   1792c:	ldrsb	r4, [r5]
   17930:	mov	r9, r2
   17934:	ldr	r2, [r8]
   17938:	cmp	r4, #0
   1793c:	mov	r7, r1
   17940:	str	r2, [sp, #4]
   17944:	mov	r1, r0
   17948:	beq	179f8 <__assert_fail@plt+0x557c>
   1794c:	mov	r0, r5
   17950:	mov	r1, r9
   17954:	mov	sl, r3
   17958:	bl	12470 <strspn@plt>
   1795c:	add	r4, r5, r0
   17960:	ldrsb	r5, [r5, r0]
   17964:	cmp	r5, #0
   17968:	beq	17a60 <__assert_fail@plt+0x55e4>
   1796c:	cmp	sl, #0
   17970:	beq	17a14 <__assert_fail@plt+0x5598>
   17974:	ldr	r0, [pc, #260]	; 17a80 <__assert_fail@plt+0x5604>
   17978:	mov	r1, r5
   1797c:	add	r0, pc, r0
   17980:	bl	121a0 <strchr@plt>
   17984:	cmp	r0, #0
   17988:	beq	17a30 <__assert_fail@plt+0x55b4>
   1798c:	add	sl, r4, #1
   17990:	mov	r3, #0
   17994:	mov	r0, sl
   17998:	mov	r1, sp
   1799c:	strb	r5, [sp]
   179a0:	strb	r3, [sp, #1]
   179a4:	bl	15bb8 <__assert_fail@plt+0x373c>
   179a8:	add	r3, r4, r0
   179ac:	str	r0, [r7]
   179b0:	ldrsb	r3, [r3, #1]
   179b4:	subs	r5, r5, r3
   179b8:	movne	r5, #1
   179bc:	cmp	r3, #0
   179c0:	moveq	r5, #1
   179c4:	cmp	r5, #0
   179c8:	bne	17a60 <__assert_fail@plt+0x55e4>
   179cc:	add	r0, r0, #2
   179d0:	add	r5, r4, r0
   179d4:	ldrsb	r1, [r4, r0]
   179d8:	cmp	r1, #0
   179dc:	beq	179f0 <__assert_fail@plt+0x5574>
   179e0:	mov	r0, r9
   179e4:	bl	121a0 <strchr@plt>
   179e8:	cmp	r0, #0
   179ec:	beq	17a60 <__assert_fail@plt+0x55e4>
   179f0:	mov	r4, sl
   179f4:	str	r5, [r6]
   179f8:	ldr	r2, [sp, #4]
   179fc:	ldr	r3, [r8]
   17a00:	mov	r0, r4
   17a04:	cmp	r2, r3
   17a08:	bne	17a74 <__assert_fail@plt+0x55f8>
   17a0c:	add	sp, sp, #8
   17a10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a14:	mov	r1, r9
   17a18:	mov	r0, r4
   17a1c:	bl	11ed0 <strcspn@plt>
   17a20:	add	r3, r4, r0
   17a24:	str	r0, [r7]
   17a28:	str	r3, [r6]
   17a2c:	b	179f8 <__assert_fail@plt+0x557c>
   17a30:	mov	r1, r9
   17a34:	mov	r0, r4
   17a38:	bl	15bb8 <__assert_fail@plt+0x373c>
   17a3c:	str	r0, [r7]
   17a40:	ldrsb	r1, [r4, r0]
   17a44:	add	r5, r4, r0
   17a48:	cmp	r1, #0
   17a4c:	beq	17a6c <__assert_fail@plt+0x55f0>
   17a50:	mov	r0, r9
   17a54:	bl	121a0 <strchr@plt>
   17a58:	cmp	r0, #0
   17a5c:	bne	17a6c <__assert_fail@plt+0x55f0>
   17a60:	str	r4, [r6]
   17a64:	mov	r4, #0
   17a68:	b	179f8 <__assert_fail@plt+0x557c>
   17a6c:	str	r5, [r6]
   17a70:	b	179f8 <__assert_fail@plt+0x557c>
   17a74:	bl	1202c <__stack_chk_fail@plt>
   17a78:	andeq	r4, r1, r8, lsr #9
   17a7c:	andeq	r0, r0, ip, lsr #4
   17a80:	strdeq	r3, [r0], -r0
   17a84:	push	{r4, lr}
   17a88:	mov	r4, r0
   17a8c:	b	17a98 <__assert_fail@plt+0x561c>
   17a90:	cmp	r0, #10
   17a94:	beq	17ab0 <__assert_fail@plt+0x5634>
   17a98:	mov	r0, r4
   17a9c:	bl	12284 <fgetc@plt>
   17aa0:	cmn	r0, #1
   17aa4:	bne	17a90 <__assert_fail@plt+0x5614>
   17aa8:	mov	r0, #1
   17aac:	pop	{r4, pc}
   17ab0:	mov	r0, #0
   17ab4:	pop	{r4, pc}
   17ab8:	ldr	r3, [pc, #656]	; 17d50 <__assert_fail@plt+0x58d4>
   17abc:	ldr	r2, [pc, #656]	; 17d54 <__assert_fail@plt+0x58d8>
   17ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ac4:	add	r3, pc, r3
   17ac8:	sub	sp, sp, #44	; 0x2c
   17acc:	subs	r4, r0, #0
   17ad0:	str	r1, [sp, #28]
   17ad4:	ldr	r2, [r3, r2]
   17ad8:	str	r2, [sp, #24]
   17adc:	ldr	r3, [r2]
   17ae0:	str	r3, [sp, #36]	; 0x24
   17ae4:	beq	17d2c <__assert_fail@plt+0x58b0>
   17ae8:	ldr	r6, [pc, #616]	; 17d58 <__assert_fail@plt+0x58dc>
   17aec:	mov	r5, #0
   17af0:	ldr	r3, [pc, #612]	; 17d5c <__assert_fail@plt+0x58e0>
   17af4:	add	r6, pc, r6
   17af8:	mov	r9, r5
   17afc:	add	r3, pc, r3
   17b00:	str	r3, [sp, #20]
   17b04:	str	r5, [sp, #16]
   17b08:	ldr	r1, [sp, #20]
   17b0c:	mov	r0, r4
   17b10:	bl	12470 <strspn@plt>
   17b14:	ldrsb	r3, [r4, r0]
   17b18:	add	r8, r4, r0
   17b1c:	cmp	r3, #0
   17b20:	beq	17d0c <__assert_fail@plt+0x5890>
   17b24:	bl	121f4 <__errno_location@plt>
   17b28:	mov	r5, #0
   17b2c:	add	fp, sp, #32
   17b30:	mov	r1, fp
   17b34:	mov	r2, #10
   17b38:	mov	r4, r0
   17b3c:	str	r5, [r0]
   17b40:	mov	r0, r8
   17b44:	bl	120b0 <strtoll@plt>
   17b48:	ldr	r3, [r4]
   17b4c:	cmp	r3, r5
   17b50:	strd	r0, [sp]
   17b54:	bgt	17cfc <__assert_fail@plt+0x5880>
   17b58:	ldrd	r2, [sp]
   17b5c:	cmp	r2, #0
   17b60:	sbcs	r3, r3, #0
   17b64:	blt	17d04 <__assert_fail@plt+0x5888>
   17b68:	ldr	r7, [sp, #32]
   17b6c:	ldrsb	r3, [r7]
   17b70:	cmp	r3, #46	; 0x2e
   17b74:	beq	17cb0 <__assert_fail@plt+0x5834>
   17b78:	cmp	r8, r7
   17b7c:	beq	17c90 <__assert_fail@plt+0x5814>
   17b80:	mov	r2, #0
   17b84:	mov	r3, #0
   17b88:	strd	r2, [sp, #8]
   17b8c:	ldr	r1, [pc, #460]	; 17d60 <__assert_fail@plt+0x58e4>
   17b90:	mov	r0, r7
   17b94:	add	r1, pc, r1
   17b98:	bl	12470 <strspn@plt>
   17b9c:	ldr	fp, [pc, #448]	; 17d64 <__assert_fail@plt+0x58e8>
   17ba0:	mov	r8, #0
   17ba4:	add	fp, pc, fp
   17ba8:	ldr	sl, [sp, #16]
   17bac:	add	r7, r7, r0
   17bb0:	str	r7, [sp, #32]
   17bb4:	b	17bc8 <__assert_fail@plt+0x574c>
   17bb8:	add	r8, r8, #1
   17bbc:	cmp	r8, #28
   17bc0:	beq	17c90 <__assert_fail@plt+0x5814>
   17bc4:	ldr	fp, [r6, r8, lsl #4]
   17bc8:	cmp	fp, #0
   17bcc:	beq	17bb8 <__assert_fail@plt+0x573c>
   17bd0:	mov	r0, fp
   17bd4:	bl	12194 <strlen@plt>
   17bd8:	cmp	r7, #0
   17bdc:	cmpne	r0, #0
   17be0:	mov	r4, r0
   17be4:	beq	17bb8 <__assert_fail@plt+0x573c>
   17be8:	mov	r2, r0
   17bec:	mov	r1, fp
   17bf0:	mov	r0, r7
   17bf4:	bl	123ec <strncmp@plt>
   17bf8:	cmp	r0, #0
   17bfc:	bne	17bb8 <__assert_fail@plt+0x573c>
   17c00:	adds	r4, r7, r4
   17c04:	beq	17bb8 <__assert_fail@plt+0x573c>
   17c08:	ldr	r3, [pc, #344]	; 17d68 <__assert_fail@plt+0x58ec>
   17c0c:	str	sl, [sp, #16]
   17c10:	add	r3, pc, r3
   17c14:	add	r3, r3, r8, lsl #4
   17c18:	ldrd	sl, [sp, #8]
   17c1c:	ldr	r8, [r3, #12]
   17c20:	ldr	r7, [r3, #8]
   17c24:	cmp	r5, #0
   17c28:	mul	r3, sl, r8
   17c2c:	umull	r0, r1, sl, r7
   17c30:	mla	r3, r7, fp, r3
   17c34:	add	r1, r3, r1
   17c38:	beq	17c58 <__assert_fail@plt+0x57dc>
   17c3c:	ldr	sl, [sp, #16]
   17c40:	mov	r2, #10
   17c44:	mov	r3, #0
   17c48:	bl	190a4 <__assert_fail@plt+0x6c28>
   17c4c:	subs	r5, r5, #1
   17c50:	bne	17c40 <__assert_fail@plt+0x57c4>
   17c54:	str	sl, [sp, #16]
   17c58:	ldrd	r2, [sp]
   17c5c:	mov	r5, #1
   17c60:	mul	r8, r2, r8
   17c64:	umull	sl, fp, r2, r7
   17c68:	mla	r7, r7, r3, r8
   17c6c:	adds	r2, sl, r0
   17c70:	add	r3, r7, fp
   17c74:	mov	fp, r3
   17c78:	adc	r3, fp, r1
   17c7c:	adds	r9, r9, r2
   17c80:	ldr	r2, [sp, #16]
   17c84:	adc	r3, r2, r3
   17c88:	str	r3, [sp, #16]
   17c8c:	b	17b08 <__assert_fail@plt+0x568c>
   17c90:	mvn	r0, #21
   17c94:	ldr	r3, [sp, #24]
   17c98:	ldr	r2, [sp, #36]	; 0x24
   17c9c:	ldr	r3, [r3]
   17ca0:	cmp	r2, r3
   17ca4:	bne	17d4c <__assert_fail@plt+0x58d0>
   17ca8:	add	sp, sp, #44	; 0x2c
   17cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cb0:	add	r8, r7, #1
   17cb4:	str	r5, [r4]
   17cb8:	mov	r1, fp
   17cbc:	mov	r0, r8
   17cc0:	mov	r2, #10
   17cc4:	bl	120b0 <strtoll@plt>
   17cc8:	ldr	r3, [r4]
   17ccc:	cmp	r3, #0
   17cd0:	strd	r0, [sp, #8]
   17cd4:	bgt	17cfc <__assert_fail@plt+0x5880>
   17cd8:	ldrd	r2, [sp, #8]
   17cdc:	cmp	r2, #0
   17ce0:	sbcs	r3, r3, #0
   17ce4:	blt	17d04 <__assert_fail@plt+0x5888>
   17ce8:	ldr	r7, [sp, #32]
   17cec:	cmp	r8, r7
   17cf0:	beq	17c90 <__assert_fail@plt+0x5814>
   17cf4:	sub	r5, r7, r8
   17cf8:	b	17b8c <__assert_fail@plt+0x5710>
   17cfc:	rsb	r0, r3, #0
   17d00:	b	17c94 <__assert_fail@plt+0x5818>
   17d04:	mvn	r0, #33	; 0x21
   17d08:	b	17c94 <__assert_fail@plt+0x5818>
   17d0c:	cmp	r5, #0
   17d10:	ldr	r1, [sp, #16]
   17d14:	beq	17c90 <__assert_fail@plt+0x5814>
   17d18:	mov	r0, r3
   17d1c:	ldr	r3, [sp, #28]
   17d20:	str	r9, [r3]
   17d24:	str	r1, [r3, #4]
   17d28:	b	17c94 <__assert_fail@plt+0x5818>
   17d2c:	ldr	r3, [pc, #56]	; 17d6c <__assert_fail@plt+0x58f0>
   17d30:	ldr	r1, [pc, #56]	; 17d70 <__assert_fail@plt+0x58f4>
   17d34:	ldr	r0, [pc, #56]	; 17d74 <__assert_fail@plt+0x58f8>
   17d38:	add	r3, pc, r3
   17d3c:	mov	r2, #77	; 0x4d
   17d40:	add	r1, pc, r1
   17d44:	add	r0, pc, r0
   17d48:	bl	1247c <__assert_fail@plt>
   17d4c:	bl	1202c <__stack_chk_fail@plt>
   17d50:	andeq	r4, r1, r0, lsl #6
   17d54:	andeq	r0, r0, ip, lsr #4
   17d58:	andeq	r3, r1, r4, lsl #31
   17d5c:	andeq	r3, r0, r8, lsr #1
   17d60:	andeq	r3, r0, r0, lsl r0
   17d64:	andeq	r2, r0, r8, ror #31
   17d68:	andeq	r3, r1, r8, ror #28
   17d6c:	andeq	r2, r0, r8, lsr lr
   17d70:	andeq	r2, r0, r4, asr lr
   17d74:	andeq	r2, r0, r8, asr #10
   17d78:	ldr	r3, [pc, #1556]	; 18394 <__assert_fail@plt+0x5f18>
   17d7c:	ldr	r2, [pc, #1556]	; 18398 <__assert_fail@plt+0x5f1c>
   17d80:	add	r3, pc, r3
   17d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d88:	sub	sp, sp, #124	; 0x7c
   17d8c:	ldr	r6, [r3, r2]
   17d90:	subs	r4, r0, #0
   17d94:	mov	r5, r1
   17d98:	mov	r0, #0
   17d9c:	mov	r1, #0
   17da0:	ldr	r3, [r6]
   17da4:	strd	r0, [sp, #8]
   17da8:	str	r3, [sp, #116]	; 0x74
   17dac:	strd	r0, [sp, #16]
   17db0:	beq	1836c <__assert_fail@plt+0x5ef0>
   17db4:	cmp	r5, #0
   17db8:	beq	18348 <__assert_fail@plt+0x5ecc>
   17dbc:	mov	r0, #0
   17dc0:	bl	11fe4 <time@plt>
   17dc4:	add	r7, sp, #28
   17dc8:	mov	r1, r7
   17dcc:	str	r0, [sp, #4]
   17dd0:	add	r0, sp, #4
   17dd4:	bl	1205c <localtime_r@plt>
   17dd8:	ldr	r1, [pc, #1468]	; 1839c <__assert_fail@plt+0x5f20>
   17ddc:	mvn	r3, #0
   17de0:	add	r1, pc, r1
   17de4:	mov	r0, r4
   17de8:	str	r3, [sp, #60]	; 0x3c
   17dec:	bl	11eac <strcmp@plt>
   17df0:	cmp	r0, #0
   17df4:	beq	18278 <__assert_fail@plt+0x5dfc>
   17df8:	ldr	r1, [pc, #1440]	; 183a0 <__assert_fail@plt+0x5f24>
   17dfc:	mov	r0, r4
   17e00:	add	r1, pc, r1
   17e04:	bl	11eac <strcmp@plt>
   17e08:	subs	r3, r0, #0
   17e0c:	beq	181ac <__assert_fail@plt+0x5d30>
   17e10:	ldr	r1, [pc, #1420]	; 183a4 <__assert_fail@plt+0x5f28>
   17e14:	mov	r0, r4
   17e18:	add	r1, pc, r1
   17e1c:	bl	11eac <strcmp@plt>
   17e20:	subs	r3, r0, #0
   17e24:	beq	182d4 <__assert_fail@plt+0x5e58>
   17e28:	ldr	r1, [pc, #1400]	; 183a8 <__assert_fail@plt+0x5f2c>
   17e2c:	mov	r0, r4
   17e30:	add	r1, pc, r1
   17e34:	bl	11eac <strcmp@plt>
   17e38:	subs	r3, r0, #0
   17e3c:	beq	18290 <__assert_fail@plt+0x5e14>
   17e40:	ldrsb	r3, [r4]
   17e44:	cmp	r3, #43	; 0x2b
   17e48:	beq	182e4 <__assert_fail@plt+0x5e68>
   17e4c:	cmp	r3, #45	; 0x2d
   17e50:	beq	182fc <__assert_fail@plt+0x5e80>
   17e54:	mov	r0, r4
   17e58:	bl	12194 <strlen@plt>
   17e5c:	cmp	r0, #3
   17e60:	bls	18314 <__assert_fail@plt+0x5e98>
   17e64:	sub	r0, r0, #4
   17e68:	add	r2, r4, r0
   17e6c:	ldrb	r3, [r4, r0]
   17e70:	cmp	r3, #32
   17e74:	beq	18224 <__assert_fail@plt+0x5da8>
   17e78:	ldr	r9, [pc, #1324]	; 183ac <__assert_fail@plt+0x5f30>
   17e7c:	mov	sl, #0
   17e80:	add	r9, pc, r9
   17e84:	ldr	fp, [pc, #1316]	; 183b0 <__assert_fail@plt+0x5f34>
   17e88:	add	fp, pc, fp
   17e8c:	add	fp, fp, #448	; 0x1c0
   17e90:	cmp	r9, #0
   17e94:	beq	182c0 <__assert_fail@plt+0x5e44>
   17e98:	mov	r0, r9
   17e9c:	bl	12194 <strlen@plt>
   17ea0:	subs	r8, r0, #0
   17ea4:	beq	182c0 <__assert_fail@plt+0x5e44>
   17ea8:	mov	r1, r9
   17eac:	mov	r2, r8
   17eb0:	mov	r0, r4
   17eb4:	bl	12200 <strncasecmp@plt>
   17eb8:	cmp	r0, #0
   17ebc:	bne	182c0 <__assert_fail@plt+0x5e44>
   17ec0:	cmn	r4, r8
   17ec4:	beq	182c0 <__assert_fail@plt+0x5e44>
   17ec8:	ldrsb	r3, [r4, r8]
   17ecc:	cmp	r3, #32
   17ed0:	bne	182c0 <__assert_fail@plt+0x5e44>
   17ed4:	ldr	r3, [pc, #1240]	; 183b4 <__assert_fail@plt+0x5f38>
   17ed8:	add	r8, r8, #1
   17edc:	add	r3, pc, r3
   17ee0:	add	sl, r3, sl, lsl #3
   17ee4:	add	r4, r4, r8
   17ee8:	ldr	r8, [sl, #452]	; 0x1c4
   17eec:	mov	lr, r7
   17ef0:	add	r9, sp, #72	; 0x48
   17ef4:	ldm	lr!, {r0, r1, r2, r3}
   17ef8:	mov	ip, r9
   17efc:	stmia	ip!, {r0, r1, r2, r3}
   17f00:	ldm	lr!, {r0, r1, r2, r3}
   17f04:	stmia	ip!, {r0, r1, r2, r3}
   17f08:	ldm	lr, {r0, r1, r2}
   17f0c:	stm	ip, {r0, r1, r2}
   17f10:	mov	r2, r7
   17f14:	ldr	r1, [pc, #1180]	; 183b8 <__assert_fail@plt+0x5f3c>
   17f18:	mov	r0, r4
   17f1c:	add	r1, pc, r1
   17f20:	bl	12050 <strptime@plt>
   17f24:	cmp	r0, #0
   17f28:	beq	17f38 <__assert_fail@plt+0x5abc>
   17f2c:	ldrsb	r3, [r0]
   17f30:	cmp	r3, #0
   17f34:	beq	1817c <__assert_fail@plt+0x5d00>
   17f38:	mov	lr, r9
   17f3c:	mov	ip, r7
   17f40:	ldm	lr!, {r0, r1, r2, r3}
   17f44:	stmia	ip!, {r0, r1, r2, r3}
   17f48:	ldm	lr!, {r0, r1, r2, r3}
   17f4c:	stmia	ip!, {r0, r1, r2, r3}
   17f50:	ldm	lr, {r0, r1, r2}
   17f54:	stm	ip, {r0, r1, r2}
   17f58:	mov	r2, r7
   17f5c:	ldr	r1, [pc, #1112]	; 183bc <__assert_fail@plt+0x5f40>
   17f60:	mov	r0, r4
   17f64:	add	r1, pc, r1
   17f68:	bl	12050 <strptime@plt>
   17f6c:	cmp	r0, #0
   17f70:	beq	17f80 <__assert_fail@plt+0x5b04>
   17f74:	ldrsb	r3, [r0]
   17f78:	cmp	r3, #0
   17f7c:	beq	1817c <__assert_fail@plt+0x5d00>
   17f80:	mov	lr, r9
   17f84:	mov	ip, r7
   17f88:	ldm	lr!, {r0, r1, r2, r3}
   17f8c:	stmia	ip!, {r0, r1, r2, r3}
   17f90:	ldm	lr!, {r0, r1, r2, r3}
   17f94:	stmia	ip!, {r0, r1, r2, r3}
   17f98:	ldm	lr, {r0, r1, r2}
   17f9c:	stm	ip, {r0, r1, r2}
   17fa0:	mov	r2, r7
   17fa4:	ldr	r1, [pc, #1044]	; 183c0 <__assert_fail@plt+0x5f44>
   17fa8:	mov	r0, r4
   17fac:	add	r1, pc, r1
   17fb0:	bl	12050 <strptime@plt>
   17fb4:	cmp	r0, #0
   17fb8:	beq	17fc8 <__assert_fail@plt+0x5b4c>
   17fbc:	ldrsb	r3, [r0]
   17fc0:	cmp	r3, #0
   17fc4:	beq	18174 <__assert_fail@plt+0x5cf8>
   17fc8:	mov	lr, r9
   17fcc:	mov	ip, r7
   17fd0:	ldm	lr!, {r0, r1, r2, r3}
   17fd4:	stmia	ip!, {r0, r1, r2, r3}
   17fd8:	ldm	lr!, {r0, r1, r2, r3}
   17fdc:	stmia	ip!, {r0, r1, r2, r3}
   17fe0:	ldm	lr, {r0, r1, r2}
   17fe4:	stm	ip, {r0, r1, r2}
   17fe8:	mov	r2, r7
   17fec:	ldr	r1, [pc, #976]	; 183c4 <__assert_fail@plt+0x5f48>
   17ff0:	mov	r0, r4
   17ff4:	add	r1, pc, r1
   17ff8:	bl	12050 <strptime@plt>
   17ffc:	cmp	r0, #0
   18000:	beq	18010 <__assert_fail@plt+0x5b94>
   18004:	ldrsb	r3, [r0]
   18008:	cmp	r3, #0
   1800c:	beq	18174 <__assert_fail@plt+0x5cf8>
   18010:	mov	lr, r9
   18014:	mov	ip, r7
   18018:	ldm	lr!, {r0, r1, r2, r3}
   1801c:	stmia	ip!, {r0, r1, r2, r3}
   18020:	ldm	lr!, {r0, r1, r2, r3}
   18024:	stmia	ip!, {r0, r1, r2, r3}
   18028:	ldm	lr, {r0, r1, r2}
   1802c:	stm	ip, {r0, r1, r2}
   18030:	mov	r2, r7
   18034:	ldr	r1, [pc, #908]	; 183c8 <__assert_fail@plt+0x5f4c>
   18038:	mov	r0, r4
   1803c:	add	r1, pc, r1
   18040:	bl	12050 <strptime@plt>
   18044:	cmp	r0, #0
   18048:	beq	18058 <__assert_fail@plt+0x5bdc>
   1804c:	ldrsb	r3, [r0]
   18050:	cmp	r3, #0
   18054:	beq	1832c <__assert_fail@plt+0x5eb0>
   18058:	mov	lr, r9
   1805c:	mov	ip, r7
   18060:	ldm	lr!, {r0, r1, r2, r3}
   18064:	stmia	ip!, {r0, r1, r2, r3}
   18068:	ldm	lr!, {r0, r1, r2, r3}
   1806c:	stmia	ip!, {r0, r1, r2, r3}
   18070:	ldm	lr, {r0, r1, r2}
   18074:	stm	ip, {r0, r1, r2}
   18078:	mov	r2, r7
   1807c:	ldr	r1, [pc, #840]	; 183cc <__assert_fail@plt+0x5f50>
   18080:	mov	r0, r4
   18084:	add	r1, pc, r1
   18088:	bl	12050 <strptime@plt>
   1808c:	cmp	r0, #0
   18090:	beq	180a0 <__assert_fail@plt+0x5c24>
   18094:	ldrsb	r3, [r0]
   18098:	cmp	r3, #0
   1809c:	beq	1832c <__assert_fail@plt+0x5eb0>
   180a0:	mov	lr, r9
   180a4:	mov	ip, r7
   180a8:	ldm	lr!, {r0, r1, r2, r3}
   180ac:	stmia	ip!, {r0, r1, r2, r3}
   180b0:	ldm	lr!, {r0, r1, r2, r3}
   180b4:	stmia	ip!, {r0, r1, r2, r3}
   180b8:	ldm	lr, {r0, r1, r2}
   180bc:	stm	ip, {r0, r1, r2}
   180c0:	mov	r2, r7
   180c4:	ldr	r1, [pc, #772]	; 183d0 <__assert_fail@plt+0x5f54>
   180c8:	mov	r0, r4
   180cc:	add	r1, pc, r1
   180d0:	bl	12050 <strptime@plt>
   180d4:	cmp	r0, #0
   180d8:	beq	180e8 <__assert_fail@plt+0x5c6c>
   180dc:	ldrsb	r3, [r0]
   180e0:	cmp	r3, #0
   180e4:	beq	1817c <__assert_fail@plt+0x5d00>
   180e8:	mov	lr, r9
   180ec:	mov	ip, r7
   180f0:	ldm	lr!, {r0, r1, r2, r3}
   180f4:	stmia	ip!, {r0, r1, r2, r3}
   180f8:	ldm	lr!, {r0, r1, r2, r3}
   180fc:	stmia	ip!, {r0, r1, r2, r3}
   18100:	ldm	lr, {r0, r1, r2}
   18104:	stm	ip, {r0, r1, r2}
   18108:	mov	r2, r7
   1810c:	ldr	r1, [pc, #704]	; 183d4 <__assert_fail@plt+0x5f58>
   18110:	mov	r0, r4
   18114:	add	r1, pc, r1
   18118:	bl	12050 <strptime@plt>
   1811c:	cmp	r0, #0
   18120:	beq	18130 <__assert_fail@plt+0x5cb4>
   18124:	ldrsb	r3, [r0]
   18128:	cmp	r3, #0
   1812c:	beq	18174 <__assert_fail@plt+0x5cf8>
   18130:	ldm	r9!, {r0, r1, r2, r3}
   18134:	mov	ip, r7
   18138:	stmia	ip!, {r0, r1, r2, r3}
   1813c:	ldm	r9!, {r0, r1, r2, r3}
   18140:	stmia	ip!, {r0, r1, r2, r3}
   18144:	ldm	r9, {r0, r1, r2}
   18148:	stm	ip, {r0, r1, r2}
   1814c:	mov	r0, r4
   18150:	ldr	r1, [pc, #640]	; 183d8 <__assert_fail@plt+0x5f5c>
   18154:	mov	r2, r7
   18158:	add	r1, pc, r1
   1815c:	bl	12050 <strptime@plt>
   18160:	cmp	r0, #0
   18164:	beq	181a4 <__assert_fail@plt+0x5d28>
   18168:	ldrsb	r3, [r0]
   1816c:	cmp	r3, #0
   18170:	bne	181a4 <__assert_fail@plt+0x5d28>
   18174:	mov	r3, #0
   18178:	str	r3, [sp, #28]
   1817c:	mov	r0, r7
   18180:	bl	11f00 <mktime@plt>
   18184:	cmn	r0, #1
   18188:	str	r0, [sp, #4]
   1818c:	beq	181a4 <__assert_fail@plt+0x5d28>
   18190:	cmp	r8, #0
   18194:	blt	181cc <__assert_fail@plt+0x5d50>
   18198:	ldr	r3, [sp, #52]	; 0x34
   1819c:	cmp	r3, r8
   181a0:	beq	181cc <__assert_fail@plt+0x5d50>
   181a4:	mvn	r4, #21
   181a8:	b	18208 <__assert_fail@plt+0x5d8c>
   181ac:	mov	r0, r7
   181b0:	str	r3, [sp, #36]	; 0x24
   181b4:	str	r3, [sp, #32]
   181b8:	str	r3, [sp, #28]
   181bc:	bl	11f00 <mktime@plt>
   181c0:	cmn	r0, #1
   181c4:	str	r0, [sp, #4]
   181c8:	beq	181a4 <__assert_fail@plt+0x5d28>
   181cc:	ldr	r1, [pc, #520]	; 183dc <__assert_fail@plt+0x5f60>
   181d0:	ldrd	r2, [sp, #8]
   181d4:	ldrd	r8, [sp, #16]
   181d8:	smlal	r2, r3, r1, r0
   181dc:	cmp	r9, r3
   181e0:	cmpeq	r8, r2
   181e4:	mov	r0, r2
   181e8:	movcs	r2, #0
   181ec:	mov	r1, r3
   181f0:	movcs	r3, r2
   181f4:	bcs	18200 <__assert_fail@plt+0x5d84>
   181f8:	subs	r2, r0, r8
   181fc:	sbc	r3, r1, r9
   18200:	mov	r4, #0
   18204:	strd	r2, [r5]
   18208:	ldr	r2, [sp, #116]	; 0x74
   1820c:	ldr	r3, [r6]
   18210:	mov	r0, r4
   18214:	cmp	r2, r3
   18218:	bne	18390 <__assert_fail@plt+0x5f14>
   1821c:	add	sp, sp, #124	; 0x7c
   18220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18224:	ldrb	r3, [r2, #1]!
   18228:	cmp	r3, #97	; 0x61
   1822c:	bne	17e78 <__assert_fail@plt+0x59fc>
   18230:	ldrb	r3, [r2, #1]!
   18234:	cmp	r3, #103	; 0x67
   18238:	bne	17e78 <__assert_fail@plt+0x59fc>
   1823c:	ldrb	r3, [r2, #1]
   18240:	cmp	r3, #111	; 0x6f
   18244:	bne	17e78 <__assert_fail@plt+0x59fc>
   18248:	mov	r1, r0
   1824c:	mov	r0, r4
   18250:	bl	11f90 <strndup@plt>
   18254:	subs	r8, r0, #0
   18258:	beq	18340 <__assert_fail@plt+0x5ec4>
   1825c:	add	r1, sp, #16
   18260:	bl	17ab8 <__assert_fail@plt+0x563c>
   18264:	mov	r4, r0
   18268:	mov	r0, r8
   1826c:	bl	11f3c <free@plt>
   18270:	cmp	r4, #0
   18274:	blt	18208 <__assert_fail@plt+0x5d8c>
   18278:	mov	r0, r7
   1827c:	bl	11f00 <mktime@plt>
   18280:	cmn	r0, #1
   18284:	str	r0, [sp, #4]
   18288:	bne	181cc <__assert_fail@plt+0x5d50>
   1828c:	b	181a4 <__assert_fail@plt+0x5d28>
   18290:	ldr	r2, [sp, #40]	; 0x28
   18294:	mov	r0, r7
   18298:	add	r2, r2, #1
   1829c:	str	r3, [sp, #36]	; 0x24
   182a0:	str	r3, [sp, #32]
   182a4:	str	r3, [sp, #28]
   182a8:	str	r2, [sp, #40]	; 0x28
   182ac:	bl	11f00 <mktime@plt>
   182b0:	cmn	r0, #1
   182b4:	str	r0, [sp, #4]
   182b8:	bne	181cc <__assert_fail@plt+0x5d50>
   182bc:	b	181a4 <__assert_fail@plt+0x5d28>
   182c0:	add	sl, sl, #1
   182c4:	cmp	sl, #14
   182c8:	beq	18324 <__assert_fail@plt+0x5ea8>
   182cc:	ldr	r9, [fp, sl, lsl #3]
   182d0:	b	17e90 <__assert_fail@plt+0x5a14>
   182d4:	ldr	r2, [sp, #40]	; 0x28
   182d8:	mov	r0, r7
   182dc:	sub	r2, r2, #1
   182e0:	b	1829c <__assert_fail@plt+0x5e20>
   182e4:	add	r0, r4, #1
   182e8:	add	r1, sp, #8
   182ec:	bl	17ab8 <__assert_fail@plt+0x563c>
   182f0:	subs	r4, r0, #0
   182f4:	bge	18278 <__assert_fail@plt+0x5dfc>
   182f8:	b	18208 <__assert_fail@plt+0x5d8c>
   182fc:	add	r0, r4, #1
   18300:	add	r1, sp, #16
   18304:	bl	17ab8 <__assert_fail@plt+0x563c>
   18308:	subs	r4, r0, #0
   1830c:	bge	18278 <__assert_fail@plt+0x5dfc>
   18310:	b	18208 <__assert_fail@plt+0x5d8c>
   18314:	ldr	r9, [pc, #196]	; 183e0 <__assert_fail@plt+0x5f64>
   18318:	mov	sl, #0
   1831c:	add	r9, pc, r9
   18320:	b	17e84 <__assert_fail@plt+0x5a08>
   18324:	mvn	r8, #0
   18328:	b	17eec <__assert_fail@plt+0x5a70>
   1832c:	mov	r3, #0
   18330:	str	r3, [sp, #36]	; 0x24
   18334:	str	r3, [sp, #32]
   18338:	str	r3, [sp, #28]
   1833c:	b	1817c <__assert_fail@plt+0x5d00>
   18340:	mvn	r4, #11
   18344:	b	18208 <__assert_fail@plt+0x5d8c>
   18348:	ldr	r3, [pc, #148]	; 183e4 <__assert_fail@plt+0x5f68>
   1834c:	ldr	r1, [pc, #148]	; 183e8 <__assert_fail@plt+0x5f6c>
   18350:	ldr	r0, [pc, #148]	; 183ec <__assert_fail@plt+0x5f70>
   18354:	add	r3, pc, r3
   18358:	mov	r2, #196	; 0xc4
   1835c:	add	r3, r3, #12
   18360:	add	r1, pc, r1
   18364:	add	r0, pc, r0
   18368:	bl	1247c <__assert_fail@plt>
   1836c:	ldr	r3, [pc, #124]	; 183f0 <__assert_fail@plt+0x5f74>
   18370:	ldr	r1, [pc, #124]	; 183f4 <__assert_fail@plt+0x5f78>
   18374:	ldr	r0, [pc, #124]	; 183f8 <__assert_fail@plt+0x5f7c>
   18378:	add	r3, pc, r3
   1837c:	mov	r2, #195	; 0xc3
   18380:	add	r3, r3, #12
   18384:	add	r1, pc, r1
   18388:	add	r0, pc, r0
   1838c:	bl	1247c <__assert_fail@plt>
   18390:	bl	1202c <__stack_chk_fail@plt>
   18394:	andeq	r4, r1, r4, asr #32
   18398:	andeq	r0, r0, ip, lsr #4
   1839c:	ldrdeq	r2, [r0], -ip
   183a0:	andeq	r2, r0, r0, asr #27
   183a4:			; <UNDEFINED> instruction: 0x00002db0
   183a8:	andeq	r2, r0, r4, lsr #27
   183ac:	andeq	r2, r0, ip, lsr #26
   183b0:	strdeq	r3, [r1], -r0
   183b4:	muleq	r1, ip, fp
   183b8:	andeq	r2, r0, ip, asr #25
   183bc:	muleq	r0, r8, ip
   183c0:	andeq	r2, r0, r4, ror #24
   183c4:	andeq	r2, r0, ip, lsr #24
   183c8:	strdeq	r2, [r0], -r4
   183cc:			; <UNDEFINED> instruction: 0x00002bb8
   183d0:	andeq	r2, r0, ip, ror fp
   183d4:	andeq	r2, r0, r0, asr #22
   183d8:	andeq	r2, r0, r4, lsl #22
   183dc:	andeq	r4, pc, r0, asr #4
   183e0:	muleq	r0, r0, r8
   183e4:	andeq	r2, r0, ip, lsl r8
   183e8:	andeq	r2, r0, r4, lsr r8
   183ec:	andeq	r2, r0, r0, asr r8
   183f0:	strdeq	r2, [r0], -r8
   183f4:	andeq	r2, r0, r0, lsl r8
   183f8:	andeq	r1, r0, r4, lsl #30
   183fc:	ldr	r3, [r0, #32]
   18400:	cmp	r3, #0
   18404:	ldrge	r0, [r0, #36]	; 0x24
   18408:	movlt	r0, #0
   1840c:	bx	lr
   18410:	push	{r4, r5, r6, r7, r8, lr}
   18414:	sub	sp, sp, #16
   18418:	tst	r2, #1
   1841c:	mov	r5, r2
   18420:	mov	r7, r0
   18424:	mov	r8, r1
   18428:	mov	r6, r3
   1842c:	ldr	r4, [sp, #40]	; 0x28
   18430:	bne	185bc <__assert_fail@plt+0x6140>
   18434:	and	r3, r5, #3
   18438:	cmp	r3, #3
   1843c:	beq	18540 <__assert_fail@plt+0x60c4>
   18440:	tst	r5, #2
   18444:	bne	18564 <__assert_fail@plt+0x60e8>
   18448:	tst	r5, #8
   1844c:	bne	185b0 <__assert_fail@plt+0x6134>
   18450:	tst	r5, #16
   18454:	bne	1846c <__assert_fail@plt+0x5ff0>
   18458:	tst	r5, #4
   1845c:	bne	184a4 <__assert_fail@plt+0x6028>
   18460:	mov	r0, #0
   18464:	add	sp, sp, #16
   18468:	pop	{r4, r5, r6, r7, r8, pc}
   1846c:	ldr	r3, [pc, #416]	; 18614 <__assert_fail@plt+0x6198>
   18470:	add	r3, pc, r3
   18474:	stm	sp, {r3, r8}
   18478:	mov	r2, #1
   1847c:	mvn	r3, #0
   18480:	mov	r1, r4
   18484:	mov	r0, r6
   18488:	bl	12458 <__snprintf_chk@plt>
   1848c:	cmp	r0, r4
   18490:	bhi	18520 <__assert_fail@plt+0x60a4>
   18494:	tst	r5, #4
   18498:	sub	r4, r4, r0
   1849c:	add	r6, r6, r0
   184a0:	beq	18460 <__assert_fail@plt+0x5fe4>
   184a4:	mov	r0, r7
   184a8:	bl	183fc <__assert_fail@plt+0x5f80>
   184ac:	ldr	r2, [pc, #356]	; 18618 <__assert_fail@plt+0x619c>
   184b0:	mov	r5, r0
   184b4:	asr	ip, r0, #31
   184b8:	smull	r1, r3, r2, r5
   184bc:	ldr	r1, [pc, #344]	; 1861c <__assert_fail@plt+0x61a0>
   184c0:	add	r3, r3, r5
   184c4:	mov	r0, r6
   184c8:	rsb	r3, ip, r3, asr #5
   184cc:	smull	r1, lr, r1, r5
   184d0:	smull	r1, r2, r2, r3
   184d4:	add	r1, r2, r3
   184d8:	asr	r2, r3, #31
   184dc:	rsb	r2, r2, r1, asr #5
   184e0:	add	r1, lr, r5
   184e4:	rsb	r2, r2, r2, lsl #4
   184e8:	ldr	lr, [pc, #304]	; 18620 <__assert_fail@plt+0x61a4>
   184ec:	sub	r3, r3, r2, lsl #2
   184f0:	cmp	r3, #0
   184f4:	rsblt	r3, r3, #0
   184f8:	rsb	r1, ip, r1, asr #11
   184fc:	add	lr, pc, lr
   18500:	stmib	sp, {r1, r3}
   18504:	str	lr, [sp]
   18508:	mvn	r3, #0
   1850c:	mov	r2, #1
   18510:	mov	r1, r4
   18514:	bl	12458 <__snprintf_chk@plt>
   18518:	cmp	r0, r4
   1851c:	bls	18460 <__assert_fail@plt+0x5fe4>
   18520:	ldr	r1, [pc, #252]	; 18624 <__assert_fail@plt+0x61a8>
   18524:	mov	r2, #5
   18528:	add	r1, pc, r1
   1852c:	mov	r0, #0
   18530:	bl	11ffc <dcgettext@plt>
   18534:	bl	121c4 <warnx@plt>
   18538:	mvn	r0, #0
   1853c:	b	18464 <__assert_fail@plt+0x5fe8>
   18540:	cmp	r4, #0
   18544:	beq	18520 <__assert_fail@plt+0x60a4>
   18548:	tst	r5, #32
   1854c:	movne	r3, #84	; 0x54
   18550:	moveq	r3, #32
   18554:	tst	r5, #2
   18558:	sub	r4, r4, #1
   1855c:	strb	r3, [r6], #1
   18560:	beq	18448 <__assert_fail@plt+0x5fcc>
   18564:	ldrd	r0, [r7]
   18568:	ldr	r3, [pc, #184]	; 18628 <__assert_fail@plt+0x61ac>
   1856c:	ldr	r2, [r7, #8]
   18570:	add	r3, pc, r3
   18574:	str	r0, [sp, #12]
   18578:	str	r1, [sp, #8]
   1857c:	str	r2, [sp, #4]
   18580:	str	r3, [sp]
   18584:	mov	r2, #1
   18588:	mvn	r3, #0
   1858c:	mov	r1, r4
   18590:	mov	r0, r6
   18594:	bl	12458 <__snprintf_chk@plt>
   18598:	cmp	r0, r4
   1859c:	bhi	18520 <__assert_fail@plt+0x60a4>
   185a0:	tst	r5, #8
   185a4:	sub	r4, r4, r0
   185a8:	add	r6, r6, r0
   185ac:	beq	18450 <__assert_fail@plt+0x5fd4>
   185b0:	ldr	r3, [pc, #116]	; 1862c <__assert_fail@plt+0x61b0>
   185b4:	add	r3, pc, r3
   185b8:	b	18474 <__assert_fail@plt+0x5ff8>
   185bc:	ldr	r3, [r0, #20]
   185c0:	ldr	r1, [r0, #16]
   185c4:	ldr	r2, [pc, #100]	; 18630 <__assert_fail@plt+0x61b4>
   185c8:	ldr	r0, [r0, #12]
   185cc:	add	r3, r3, #1888	; 0x760
   185d0:	add	r2, pc, r2
   185d4:	add	r3, r3, #12
   185d8:	add	r1, r1, #1
   185dc:	str	r3, [sp, #4]
   185e0:	str	r1, [sp, #8]
   185e4:	str	r0, [sp, #12]
   185e8:	str	r2, [sp]
   185ec:	mov	r1, r4
   185f0:	mov	r0, r6
   185f4:	mvn	r3, #0
   185f8:	mov	r2, #1
   185fc:	bl	12458 <__snprintf_chk@plt>
   18600:	cmp	r0, r4
   18604:	subls	r4, r4, r0
   18608:	addls	r6, r6, r0
   1860c:	bls	18434 <__assert_fail@plt+0x5fb8>
   18610:	b	18520 <__assert_fail@plt+0x60a4>
   18614:	andeq	r2, r0, r8, asr #16
   18618:	stmhi	r8, {r0, r3, r7, fp, pc}
   1861c:			; <UNDEFINED> instruction: 0x91a2b3c5
   18620:	andeq	r2, r0, r4, asr #15
   18624:	andeq	r2, r0, r4, asr r7
   18628:	andeq	r2, r0, r0, lsr r7
   1862c:	strdeq	r2, [r0], -ip
   18630:	muleq	r0, ip, r6
   18634:	ldr	ip, [pc, #164]	; 186e0 <__assert_fail@plt+0x6264>
   18638:	push	{r4, r5, r6, r7, r8, r9, lr}
   1863c:	add	ip, pc, ip
   18640:	ldr	lr, [pc, #156]	; 186e4 <__assert_fail@plt+0x6268>
   18644:	sub	sp, sp, #60	; 0x3c
   18648:	mov	r6, r1
   1864c:	ldr	r4, [ip, lr]
   18650:	tst	r1, #64	; 0x40
   18654:	mov	r1, ip
   18658:	ldr	ip, [r4]
   1865c:	add	r5, sp, #8
   18660:	mov	r8, r2
   18664:	mov	r9, r3
   18668:	mov	r7, r0
   1866c:	str	ip, [sp, #52]	; 0x34
   18670:	mov	r1, r5
   18674:	beq	186b4 <__assert_fail@plt+0x6238>
   18678:	bl	11e70 <gmtime_r@plt>
   1867c:	cmp	r0, #0
   18680:	beq	186bc <__assert_fail@plt+0x6240>
   18684:	str	r9, [sp]
   18688:	mov	r3, r8
   1868c:	mov	r2, r6
   18690:	ldr	r1, [r7, #4]
   18694:	mov	r0, r5
   18698:	bl	18410 <__assert_fail@plt+0x5f94>
   1869c:	ldr	r2, [sp, #52]	; 0x34
   186a0:	ldr	r3, [r4]
   186a4:	cmp	r2, r3
   186a8:	bne	186dc <__assert_fail@plt+0x6260>
   186ac:	add	sp, sp, #60	; 0x3c
   186b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   186b4:	bl	1205c <localtime_r@plt>
   186b8:	b	1867c <__assert_fail@plt+0x6200>
   186bc:	ldr	r1, [pc, #36]	; 186e8 <__assert_fail@plt+0x626c>
   186c0:	mov	r2, #5
   186c4:	add	r1, pc, r1
   186c8:	bl	11ffc <dcgettext@plt>
   186cc:	ldr	r1, [r7]
   186d0:	bl	121c4 <warnx@plt>
   186d4:	mvn	r0, #0
   186d8:	b	1869c <__assert_fail@plt+0x6220>
   186dc:	bl	1202c <__stack_chk_fail@plt>
   186e0:	andeq	r3, r1, r8, lsl #15
   186e4:	andeq	r0, r0, ip, lsr #4
   186e8:	andeq	r2, r0, r8, lsl #12
   186ec:	push	{lr}		; (str lr, [sp, #-4]!)
   186f0:	sub	sp, sp, #12
   186f4:	str	r3, [sp]
   186f8:	mov	r3, r2
   186fc:	mov	r2, r1
   18700:	mov	r1, #0
   18704:	bl	18410 <__assert_fail@plt+0x5f94>
   18708:	add	sp, sp, #12
   1870c:	pop	{pc}		; (ldr pc, [sp], #4)
   18710:	ldr	ip, [pc, #164]	; 187bc <__assert_fail@plt+0x6340>
   18714:	push	{r4, r5, r6, r7, r8, r9, lr}
   18718:	add	ip, pc, ip
   1871c:	ldr	lr, [pc, #156]	; 187c0 <__assert_fail@plt+0x6344>
   18720:	sub	sp, sp, #60	; 0x3c
   18724:	mov	r6, r1
   18728:	ldr	r4, [ip, lr]
   1872c:	tst	r1, #64	; 0x40
   18730:	mov	r1, ip
   18734:	ldr	ip, [r4]
   18738:	add	r5, sp, #8
   1873c:	mov	r7, r2
   18740:	mov	r8, r3
   18744:	mov	r9, r0
   18748:	str	ip, [sp, #52]	; 0x34
   1874c:	mov	r1, r5
   18750:	beq	18790 <__assert_fail@plt+0x6314>
   18754:	bl	11e70 <gmtime_r@plt>
   18758:	cmp	r0, #0
   1875c:	beq	18798 <__assert_fail@plt+0x631c>
   18760:	str	r8, [sp]
   18764:	mov	r3, r7
   18768:	mov	r2, r6
   1876c:	mov	r0, r5
   18770:	mov	r1, #0
   18774:	bl	18410 <__assert_fail@plt+0x5f94>
   18778:	ldr	r2, [sp, #52]	; 0x34
   1877c:	ldr	r3, [r4]
   18780:	cmp	r2, r3
   18784:	bne	187b8 <__assert_fail@plt+0x633c>
   18788:	add	sp, sp, #60	; 0x3c
   1878c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18790:	bl	1205c <localtime_r@plt>
   18794:	b	18758 <__assert_fail@plt+0x62dc>
   18798:	ldr	r1, [pc, #36]	; 187c4 <__assert_fail@plt+0x6348>
   1879c:	mov	r2, #5
   187a0:	add	r1, pc, r1
   187a4:	bl	11ffc <dcgettext@plt>
   187a8:	mov	r1, r9
   187ac:	bl	121c4 <warnx@plt>
   187b0:	mvn	r0, #0
   187b4:	b	18778 <__assert_fail@plt+0x62fc>
   187b8:	bl	1202c <__stack_chk_fail@plt>
   187bc:	andeq	r3, r1, ip, lsr #13
   187c0:	andeq	r0, r0, ip, lsr #4
   187c4:	andeq	r2, r0, ip, lsr #10
   187c8:	push	{r4, r5, r6, lr}
   187cc:	mov	r4, r1
   187d0:	ldr	r1, [r1]
   187d4:	mov	r5, r0
   187d8:	cmp	r1, #0
   187dc:	beq	18818 <__assert_fail@plt+0x639c>
   187e0:	ldr	lr, [r5]
   187e4:	ldr	r3, [pc, #60]	; 18828 <__assert_fail@plt+0x63ac>
   187e8:	asr	r2, r1, #31
   187ec:	asr	r0, lr, #31
   187f0:	smull	r4, ip, r3, lr
   187f4:	smull	r4, r3, r3, r1
   187f8:	add	ip, ip, lr
   187fc:	add	r3, r3, r1
   18800:	rsb	r0, r0, ip, asr #16
   18804:	rsb	r3, r2, r3, asr #16
   18808:	sub	r0, r0, r3
   1880c:	clz	r0, r0
   18810:	lsr	r0, r0, #5
   18814:	pop	{r4, r5, r6, pc}
   18818:	mov	r0, r4
   1881c:	bl	120c8 <gettimeofday@plt>
   18820:	ldr	r1, [r4]
   18824:	b	187e0 <__assert_fail@plt+0x6364>
   18828:	eorgt	r4, lr, #29360128	; 0x1c00000
   1882c:	push	{r4, r5, r6, lr}
   18830:	mov	r4, r1
   18834:	ldr	r1, [r1]
   18838:	mov	r5, r0
   1883c:	cmp	r1, #0
   18840:	beq	18874 <__assert_fail@plt+0x63f8>
   18844:	ldr	r3, [r5]
   18848:	ldr	ip, [pc, #52]	; 18884 <__assert_fail@plt+0x6408>
   1884c:	asr	r2, r1, #31
   18850:	asr	r0, r3, #31
   18854:	smull	lr, r3, ip, r3
   18858:	smull	ip, r1, ip, r1
   1885c:	rsb	r0, r0, r3, asr #23
   18860:	rsb	r1, r2, r1, asr #23
   18864:	sub	r0, r0, r1
   18868:	clz	r0, r0
   1886c:	lsr	r0, r0, #5
   18870:	pop	{r4, r5, r6, pc}
   18874:	mov	r0, r4
   18878:	bl	120c8 <gettimeofday@plt>
   1887c:	ldr	r1, [r4]
   18880:	b	18844 <__assert_fail@plt+0x63c8>
   18884:	ldrmi	sl, [r8], #-1147	; 0xfffffb85
   18888:	ldr	ip, [pc, #276]	; 189a4 <__assert_fail@plt+0x6528>
   1888c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18890:	add	ip, pc, ip
   18894:	ldr	lr, [pc, #268]	; 189a8 <__assert_fail@plt+0x652c>
   18898:	sub	sp, sp, #68	; 0x44
   1889c:	add	r7, sp, #16
   188a0:	ldr	r4, [ip, lr]
   188a4:	mov	r8, r3
   188a8:	mov	r6, r1
   188ac:	ldr	r3, [r4]
   188b0:	mov	r1, r7
   188b4:	mov	r5, r0
   188b8:	mov	r9, r2
   188bc:	str	r3, [sp, #60]	; 0x3c
   188c0:	bl	1205c <localtime_r@plt>
   188c4:	mov	r1, r6
   188c8:	mov	r0, r5
   188cc:	bl	187c8 <__assert_fail@plt+0x634c>
   188d0:	cmp	r0, #0
   188d4:	beq	18930 <__assert_fail@plt+0x64b4>
   188d8:	ldr	r3, [pc, #204]	; 189ac <__assert_fail@plt+0x6530>
   188dc:	ldr	r1, [sp, #20]
   188e0:	ldr	r2, [sp, #24]
   188e4:	add	r3, pc, r3
   188e8:	str	r1, [sp, #8]
   188ec:	str	r2, [sp, #4]
   188f0:	str	r3, [sp]
   188f4:	mov	r0, r8
   188f8:	mvn	r3, #0
   188fc:	mov	r2, #1
   18900:	ldr	r1, [sp, #96]	; 0x60
   18904:	bl	12458 <__snprintf_chk@plt>
   18908:	ldr	r3, [sp, #96]	; 0x60
   1890c:	cmp	r0, r3
   18910:	movls	r0, #0
   18914:	mvnhi	r0, #0
   18918:	ldr	r2, [sp, #60]	; 0x3c
   1891c:	ldr	r3, [r4]
   18920:	cmp	r2, r3
   18924:	bne	189a0 <__assert_fail@plt+0x6524>
   18928:	add	sp, sp, #68	; 0x44
   1892c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18930:	mov	r1, r6
   18934:	mov	r0, r5
   18938:	bl	1882c <__assert_fail@plt+0x63b0>
   1893c:	mov	r3, r7
   18940:	cmp	r0, #0
   18944:	mov	r0, r8
   18948:	beq	1898c <__assert_fail@plt+0x6510>
   1894c:	tst	r9, #2
   18950:	bne	18978 <__assert_fail@plt+0x64fc>
   18954:	ldr	r2, [pc, #84]	; 189b0 <__assert_fail@plt+0x6534>
   18958:	ldr	r1, [sp, #96]	; 0x60
   1895c:	add	r2, pc, r2
   18960:	bl	12140 <strftime@plt>
   18964:	cmp	r0, #0
   18968:	movgt	r0, #0
   1896c:	movle	r0, #1
   18970:	rsb	r0, r0, #0
   18974:	b	18918 <__assert_fail@plt+0x649c>
   18978:	ldr	r2, [pc, #52]	; 189b4 <__assert_fail@plt+0x6538>
   1897c:	ldr	r1, [sp, #96]	; 0x60
   18980:	add	r2, pc, r2
   18984:	bl	12140 <strftime@plt>
   18988:	b	18964 <__assert_fail@plt+0x64e8>
   1898c:	ldr	r2, [pc, #36]	; 189b8 <__assert_fail@plt+0x653c>
   18990:	ldr	r1, [sp, #96]	; 0x60
   18994:	add	r2, pc, r2
   18998:	bl	12140 <strftime@plt>
   1899c:	b	18964 <__assert_fail@plt+0x64e8>
   189a0:	bl	1202c <__stack_chk_fail@plt>
   189a4:	andeq	r3, r1, r4, lsr r5
   189a8:	andeq	r0, r0, ip, lsr #4
   189ac:	andeq	r2, r0, r4, lsl #8
   189b0:	andeq	r2, r0, r4, lsr #7
   189b4:	andeq	r2, r0, r4, ror r3
   189b8:	andeq	r2, r0, r4, ror r3
   189bc:	ldr	r2, [pc, #400]	; 18b54 <__assert_fail@plt+0x66d8>
   189c0:	ldr	r3, [pc, #400]	; 18b58 <__assert_fail@plt+0x66dc>
   189c4:	add	r2, pc, r2
   189c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189cc:	sub	sp, sp, #8192	; 0x2000
   189d0:	ldr	r3, [r2, r3]
   189d4:	ldr	ip, [pc, #384]	; 18b5c <__assert_fail@plt+0x66e0>
   189d8:	sub	sp, sp, #44	; 0x2c
   189dc:	mov	lr, r3
   189e0:	add	ip, pc, ip
   189e4:	str	r1, [sp, #8]
   189e8:	ldr	lr, [lr]
   189ec:	str	ip, [sp]
   189f0:	add	ip, sp, #8192	; 0x2000
   189f4:	add	ip, ip, #36	; 0x24
   189f8:	add	r7, sp, #40	; 0x28
   189fc:	sub	r6, r7, #4
   18a00:	str	r3, [sp, #16]
   18a04:	mov	r3, #8192	; 0x2000
   18a08:	str	r0, [sp, #4]
   18a0c:	mov	r1, r3
   18a10:	str	lr, [ip]
   18a14:	mov	r0, r6
   18a18:	mov	r2, #1
   18a1c:	bl	12458 <__snprintf_chk@plt>
   18a20:	mov	r0, r6
   18a24:	mov	r1, #0
   18a28:	bl	12104 <open64@plt>
   18a2c:	subs	r8, r0, #0
   18a30:	movlt	r7, #0
   18a34:	blt	18b04 <__assert_fail@plt+0x6688>
   18a38:	mov	r1, #0
   18a3c:	mov	sl, r1
   18a40:	mov	r2, #8192	; 0x2000
   18a44:	mov	r0, r6
   18a48:	mov	r9, sl
   18a4c:	mov	fp, sl
   18a50:	mov	r4, #8192	; 0x2000
   18a54:	mov	r5, r6
   18a58:	bl	12254 <memset@plt>
   18a5c:	sub	r3, r7, #12
   18a60:	str	r3, [sp, #20]
   18a64:	mov	r2, r4
   18a68:	mov	r1, r5
   18a6c:	mov	r0, r8
   18a70:	bl	11ee8 <read@plt>
   18a74:	cmp	r0, #0
   18a78:	ble	18a94 <__assert_fail@plt+0x6618>
   18a7c:	subs	r4, r4, r0
   18a80:	add	r5, r5, r0
   18a84:	add	sl, sl, r0
   18a88:	beq	18ac0 <__assert_fail@plt+0x6644>
   18a8c:	mov	r9, #0
   18a90:	b	18a64 <__assert_fail@plt+0x65e8>
   18a94:	beq	18ab4 <__assert_fail@plt+0x6638>
   18a98:	bl	121f4 <__errno_location@plt>
   18a9c:	ldr	r3, [r0]
   18aa0:	cmp	r3, #4
   18aa4:	cmpne	r3, #11
   18aa8:	bne	18ab4 <__assert_fail@plt+0x6638>
   18aac:	cmp	r9, #4
   18ab0:	ble	18b30 <__assert_fail@plt+0x66b4>
   18ab4:	cmp	sl, #0
   18ab8:	moveq	r7, sl
   18abc:	beq	18afc <__assert_fail@plt+0x6680>
   18ac0:	mov	r1, r6
   18ac4:	mov	r2, #0
   18ac8:	mov	ip, #32
   18acc:	ldrsb	r3, [r1], #1
   18ad0:	add	r2, r2, #1
   18ad4:	cmp	r3, #0
   18ad8:	strbeq	ip, [r1, #-1]
   18adc:	cmp	r2, sl
   18ae0:	bcc	18acc <__assert_fail@plt+0x6650>
   18ae4:	add	r7, r7, sl
   18ae8:	mov	r3, #0
   18aec:	mov	r0, r6
   18af0:	strb	r3, [r7, #-5]
   18af4:	bl	12014 <strdup@plt>
   18af8:	mov	r7, r0
   18afc:	mov	r0, r8
   18b00:	bl	1241c <close@plt>
   18b04:	add	r3, sp, #8192	; 0x2000
   18b08:	add	r3, r3, #36	; 0x24
   18b0c:	ldr	r2, [r3]
   18b10:	ldr	r3, [sp, #16]
   18b14:	mov	r0, r7
   18b18:	ldr	r3, [r3]
   18b1c:	cmp	r2, r3
   18b20:	bne	18b50 <__assert_fail@plt+0x66d4>
   18b24:	add	sp, sp, #8192	; 0x2000
   18b28:	add	sp, sp, #44	; 0x2c
   18b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b30:	ldr	r3, [pc, #40]	; 18b60 <__assert_fail@plt+0x66e4>
   18b34:	mov	r1, #0
   18b38:	ldr	r0, [sp, #20]
   18b3c:	add	r9, r9, #1
   18b40:	str	fp, [r7, #-12]
   18b44:	str	r3, [r7, #-8]
   18b48:	bl	11f60 <nanosleep@plt>
   18b4c:	b	18a64 <__assert_fail@plt+0x65e8>
   18b50:	bl	1202c <__stack_chk_fail@plt>
   18b54:	andeq	r3, r1, r0, lsl #8
   18b58:	andeq	r0, r0, ip, lsr #4
   18b5c:	andeq	r2, r0, ip, lsl #8
   18b60:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   18b64:	ldr	r1, [pc, #164]	; 18c10 <__assert_fail@plt+0x6794>
   18b68:	ldr	r2, [pc, #164]	; 18c14 <__assert_fail@plt+0x6798>
   18b6c:	add	r1, pc, r1
   18b70:	push	{r4, r5, r6, lr}
   18b74:	sub	sp, sp, #4096	; 0x1000
   18b78:	ldr	r5, [r1, r2]
   18b7c:	sub	sp, sp, #16
   18b80:	add	lr, sp, #4096	; 0x1000
   18b84:	str	r0, [sp]
   18b88:	add	lr, lr, #12
   18b8c:	ldr	ip, [r5]
   18b90:	ldr	r3, [pc, #128]	; 18c18 <__assert_fail@plt+0x679c>
   18b94:	add	r6, sp, #12
   18b98:	add	r3, pc, r3
   18b9c:	mov	r2, #4096	; 0x1000
   18ba0:	str	ip, [lr]
   18ba4:	mov	r0, r6
   18ba8:	mov	r1, #1
   18bac:	bl	12218 <__sprintf_chk@plt>
   18bb0:	mov	r0, #4
   18bb4:	bl	1211c <malloc@plt>
   18bb8:	subs	r4, r0, #0
   18bbc:	beq	18bfc <__assert_fail@plt+0x6780>
   18bc0:	mov	r0, r6
   18bc4:	bl	120f8 <opendir@plt>
   18bc8:	cmp	r0, #0
   18bcc:	str	r0, [r4]
   18bd0:	beq	18bfc <__assert_fail@plt+0x6780>
   18bd4:	add	r3, sp, #4096	; 0x1000
   18bd8:	add	r3, r3, #12
   18bdc:	ldr	r2, [r3]
   18be0:	ldr	r3, [r5]
   18be4:	mov	r0, r4
   18be8:	cmp	r2, r3
   18bec:	bne	18c0c <__assert_fail@plt+0x6790>
   18bf0:	add	sp, sp, #4096	; 0x1000
   18bf4:	add	sp, sp, #16
   18bf8:	pop	{r4, r5, r6, pc}
   18bfc:	mov	r0, r4
   18c00:	bl	11f3c <free@plt>
   18c04:	mov	r4, #0
   18c08:	b	18bd4 <__assert_fail@plt+0x6758>
   18c0c:	bl	1202c <__stack_chk_fail@plt>
   18c10:	andeq	r3, r1, r8, asr r2
   18c14:	andeq	r0, r0, ip, lsr #4
   18c18:	andeq	r2, r0, r0, ror #4
   18c1c:	push	{r4, lr}
   18c20:	subs	r4, r0, #0
   18c24:	beq	18c38 <__assert_fail@plt+0x67bc>
   18c28:	ldr	r0, [r4]
   18c2c:	cmp	r0, #0
   18c30:	beq	18c38 <__assert_fail@plt+0x67bc>
   18c34:	bl	12434 <closedir@plt>
   18c38:	mov	r0, r4
   18c3c:	pop	{r4, lr}
   18c40:	b	11f3c <free@plt>
   18c44:	ldr	r3, [pc, #280]	; 18d64 <__assert_fail@plt+0x68e8>
   18c48:	ldr	r2, [pc, #280]	; 18d68 <__assert_fail@plt+0x68ec>
   18c4c:	add	r3, pc, r3
   18c50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c54:	cmp	r0, #0
   18c58:	ldr	r9, [r3, r2]
   18c5c:	sub	sp, sp, #8
   18c60:	clz	sl, r1
   18c64:	ldr	r2, [r9]
   18c68:	lsr	sl, sl, #5
   18c6c:	moveq	sl, #1
   18c70:	cmp	sl, #0
   18c74:	str	r2, [sp, #4]
   18c78:	bne	18d58 <__assert_fail@plt+0x68dc>
   18c7c:	str	sl, [r1]
   18c80:	mov	r6, r0
   18c84:	mov	r5, r1
   18c88:	bl	121f4 <__errno_location@plt>
   18c8c:	mov	r8, sl
   18c90:	mov	r7, sp
   18c94:	mov	r4, r0
   18c98:	str	sl, [r0]
   18c9c:	b	18cac <__assert_fail@plt+0x6830>
   18ca0:	ldr	r0, [r5]
   18ca4:	cmp	r0, #0
   18ca8:	bne	18d50 <__assert_fail@plt+0x68d4>
   18cac:	ldr	r0, [r6]
   18cb0:	bl	12380 <readdir64@plt>
   18cb4:	subs	sl, r0, #0
   18cb8:	beq	18d3c <__assert_fail@plt+0x68c0>
   18cbc:	bl	12170 <__ctype_b_loc@plt>
   18cc0:	ldrb	r3, [sl, #19]
   18cc4:	lsl	r3, r3, #1
   18cc8:	ldr	r2, [r0]
   18ccc:	ldrh	r3, [r2, r3]
   18cd0:	tst	r3, #2048	; 0x800
   18cd4:	beq	18ca0 <__assert_fail@plt+0x6824>
   18cd8:	add	sl, sl, #19
   18cdc:	str	r8, [r4]
   18ce0:	mov	r0, sl
   18ce4:	mov	r2, #10
   18ce8:	mov	r1, r7
   18cec:	bl	11eb8 <strtol@plt>
   18cf0:	str	r0, [r5]
   18cf4:	ldr	r3, [r4]
   18cf8:	cmp	r3, #0
   18cfc:	bne	18d20 <__assert_fail@plt+0x68a4>
   18d00:	ldr	r3, [sp]
   18d04:	cmp	sl, r3
   18d08:	beq	18d20 <__assert_fail@plt+0x68a4>
   18d0c:	cmp	r3, #0
   18d10:	beq	18ca4 <__assert_fail@plt+0x6828>
   18d14:	ldrsb	r3, [r3]
   18d18:	cmp	r3, #0
   18d1c:	beq	18ca4 <__assert_fail@plt+0x6828>
   18d20:	mvn	r0, #0
   18d24:	ldr	r2, [sp, #4]
   18d28:	ldr	r3, [r9]
   18d2c:	cmp	r2, r3
   18d30:	bne	18d60 <__assert_fail@plt+0x68e4>
   18d34:	add	sp, sp, #8
   18d38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d3c:	ldr	r3, [r4]
   18d40:	cmp	r3, #0
   18d44:	moveq	r0, #1
   18d48:	beq	18d24 <__assert_fail@plt+0x68a8>
   18d4c:	b	18d20 <__assert_fail@plt+0x68a4>
   18d50:	mov	r0, #0
   18d54:	b	18d24 <__assert_fail@plt+0x68a8>
   18d58:	mvn	r0, #21
   18d5c:	b	18d24 <__assert_fail@plt+0x68a8>
   18d60:	bl	1202c <__stack_chk_fail@plt>
   18d64:	andeq	r3, r1, r8, ror r1
   18d68:	andeq	r0, r0, ip, lsr #4
   18d6c:	ldr	r1, [pc, #4]	; 18d78 <__assert_fail@plt+0x68fc>
   18d70:	add	r1, pc, r1
   18d74:	b	189bc <__assert_fail@plt+0x6540>
   18d78:	muleq	r0, r8, r0
   18d7c:	ldr	r1, [pc, #4]	; 18d88 <__assert_fail@plt+0x690c>
   18d80:	add	r1, pc, r1
   18d84:	b	189bc <__assert_fail@plt+0x6540>
   18d88:	muleq	r0, r0, r0
   18d8c:	push	{r4, lr}
   18d90:	mov	r1, #16
   18d94:	mov	r0, #1
   18d98:	bl	11e34 <calloc@plt>
   18d9c:	subs	r4, r0, #0
   18da0:	beq	18dc4 <__assert_fail@plt+0x6948>
   18da4:	ldr	r0, [pc, #44]	; 18dd8 <__assert_fail@plt+0x695c>
   18da8:	add	r0, pc, r0
   18dac:	bl	120f8 <opendir@plt>
   18db0:	cmp	r0, #0
   18db4:	str	r0, [r4]
   18db8:	beq	18dc4 <__assert_fail@plt+0x6948>
   18dbc:	mov	r0, r4
   18dc0:	pop	{r4, pc}
   18dc4:	mov	r0, r4
   18dc8:	mov	r4, #0
   18dcc:	bl	11f3c <free@plt>
   18dd0:	mov	r0, r4
   18dd4:	pop	{r4, pc}
   18dd8:	andeq	r2, r0, r0, ror r0
   18ddc:	push	{r4, lr}
   18de0:	subs	r4, r0, #0
   18de4:	beq	18df8 <__assert_fail@plt+0x697c>
   18de8:	ldr	r0, [r4]
   18dec:	cmp	r0, #0
   18df0:	beq	18df8 <__assert_fail@plt+0x697c>
   18df4:	bl	12434 <closedir@plt>
   18df8:	mov	r0, r4
   18dfc:	pop	{r4, lr}
   18e00:	b	11f3c <free@plt>
   18e04:	ldrb	r3, [r0, #12]
   18e08:	str	r1, [r0, #4]
   18e0c:	bic	r3, r3, #1
   18e10:	cmp	r1, #0
   18e14:	orrne	r3, r3, #1
   18e18:	strb	r3, [r0, #12]
   18e1c:	bx	lr
   18e20:	ldrb	r3, [r0, #12]
   18e24:	str	r1, [r0, #8]
   18e28:	orr	r3, r3, #2
   18e2c:	strb	r3, [r0, #12]
   18e30:	bx	lr
   18e34:	ldr	r2, [pc, #596]	; 19090 <__assert_fail@plt+0x6c14>
   18e38:	ldr	ip, [pc, #596]	; 19094 <__assert_fail@plt+0x6c18>
   18e3c:	add	r2, pc, r2
   18e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e44:	sub	sp, sp, #8576	; 0x2180
   18e48:	ldr	ip, [r2, ip]
   18e4c:	sub	sp, sp, #12
   18e50:	cmp	r0, #0
   18e54:	add	r2, sp, #8576	; 0x2180
   18e58:	clz	r3, r1
   18e5c:	str	ip, [sp, #16]
   18e60:	lsr	r3, r3, #5
   18e64:	ldr	ip, [ip]
   18e68:	moveq	r3, #1
   18e6c:	add	r2, r2, #4
   18e70:	cmp	r3, #0
   18e74:	str	ip, [r2]
   18e78:	bne	19084 <__assert_fail@plt+0x6c08>
   18e7c:	str	r3, [r1]
   18e80:	ldr	r3, [pc, #528]	; 19098 <__assert_fail@plt+0x6c1c>
   18e84:	mov	r5, r0
   18e88:	add	r3, pc, r3
   18e8c:	mov	sl, r1
   18e90:	str	r3, [sp, #12]
   18e94:	bl	121f4 <__errno_location@plt>
   18e98:	ldr	r9, [pc, #508]	; 1909c <__assert_fail@plt+0x6c20>
   18e9c:	ldr	fp, [pc, #508]	; 190a0 <__assert_fail@plt+0x6c24>
   18ea0:	add	r9, pc, r9
   18ea4:	add	fp, pc, fp
   18ea8:	mov	r8, r0
   18eac:	mov	r6, #0
   18eb0:	str	r6, [r8]
   18eb4:	ldr	r0, [r5]
   18eb8:	bl	12380 <readdir64@plt>
   18ebc:	subs	r4, r0, #0
   18ec0:	beq	1906c <__assert_fail@plt+0x6bf0>
   18ec4:	bl	12170 <__ctype_b_loc@plt>
   18ec8:	ldrb	r3, [r4, #19]
   18ecc:	lsl	r3, r3, #1
   18ed0:	ldr	r2, [r0]
   18ed4:	ldrh	r3, [r2, r3]
   18ed8:	tst	r3, #2048	; 0x800
   18edc:	beq	18eac <__assert_fail@plt+0x6a30>
   18ee0:	ldrb	r3, [r5, #12]
   18ee4:	add	r4, r4, #19
   18ee8:	tst	r3, #2
   18eec:	addeq	r7, sp, #392	; 0x188
   18ef0:	bne	19028 <__assert_fail@plt+0x6bac>
   18ef4:	tst	r3, #1
   18ef8:	beq	18fb0 <__assert_fail@plt+0x6b34>
   18efc:	mov	r3, #8192	; 0x2000
   18f00:	sub	r6, r7, #4
   18f04:	mov	r1, r3
   18f08:	mov	r2, #1
   18f0c:	str	r4, [sp, #4]
   18f10:	str	r9, [sp]
   18f14:	mov	r0, r6
   18f18:	bl	12458 <__snprintf_chk@plt>
   18f1c:	ldr	r0, [r5]
   18f20:	bl	12398 <dirfd@plt>
   18f24:	mov	r1, r6
   18f28:	mov	r2, #524288	; 0x80000
   18f2c:	bl	121b8 <openat64@plt>
   18f30:	cmp	r0, #0
   18f34:	blt	18eac <__assert_fail@plt+0x6a30>
   18f38:	mov	r1, fp
   18f3c:	bl	11e28 <fdopen@plt>
   18f40:	subs	r3, r0, #0
   18f44:	beq	18eac <__assert_fail@plt+0x6a30>
   18f48:	mov	r2, r3
   18f4c:	mov	r1, #8192	; 0x2000
   18f50:	mov	r0, r6
   18f54:	str	r3, [sp, #20]
   18f58:	bl	11f54 <fgets@plt>
   18f5c:	ldr	r3, [sp, #20]
   18f60:	str	r0, [r7, #-368]	; 0xfffffe90
   18f64:	mov	r0, r3
   18f68:	bl	122cc <fclose@plt>
   18f6c:	ldr	r3, [r7, #-368]	; 0xfffffe90
   18f70:	cmp	r3, #0
   18f74:	beq	18eac <__assert_fail@plt+0x6a30>
   18f78:	add	r3, sp, #132	; 0x84
   18f7c:	mov	r0, r6
   18f80:	mov	r2, r3
   18f84:	ldr	r1, [sp, #12]
   18f88:	str	r3, [sp, #20]
   18f8c:	bl	12368 <sscanf@plt>
   18f90:	cmp	r0, #1
   18f94:	bne	18eac <__assert_fail@plt+0x6a30>
   18f98:	ldr	r3, [sp, #20]
   18f9c:	ldr	r1, [r5, #4]
   18fa0:	mov	r0, r3
   18fa4:	bl	11eac <strcmp@plt>
   18fa8:	cmp	r0, #0
   18fac:	bne	18eac <__assert_fail@plt+0x6a30>
   18fb0:	mov	r3, #0
   18fb4:	str	r3, [r8]
   18fb8:	mov	r2, #10
   18fbc:	add	r1, sp, #24
   18fc0:	mov	r0, r4
   18fc4:	str	r3, [r7, #-368]	; 0xfffffe90
   18fc8:	bl	11eb8 <strtol@plt>
   18fcc:	str	r0, [sl]
   18fd0:	ldr	r0, [r8]
   18fd4:	cmp	r0, #0
   18fd8:	rsbne	r0, r0, #0
   18fdc:	bne	19000 <__assert_fail@plt+0x6b84>
   18fe0:	ldr	r3, [r7, #-368]	; 0xfffffe90
   18fe4:	cmp	r3, r4
   18fe8:	beq	1907c <__assert_fail@plt+0x6c00>
   18fec:	cmp	r3, #0
   18ff0:	beq	19000 <__assert_fail@plt+0x6b84>
   18ff4:	ldrsb	r3, [r3]
   18ff8:	cmp	r3, #0
   18ffc:	bne	1907c <__assert_fail@plt+0x6c00>
   19000:	add	r3, sp, #8576	; 0x2180
   19004:	add	r3, r3, #4
   19008:	ldr	r2, [r3]
   1900c:	ldr	r3, [sp, #16]
   19010:	ldr	r3, [r3]
   19014:	cmp	r2, r3
   19018:	bne	1908c <__assert_fail@plt+0x6c10>
   1901c:	add	sp, sp, #8576	; 0x2180
   19020:	add	sp, sp, #12
   19024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19028:	ldr	r0, [r5]
   1902c:	bl	12398 <dirfd@plt>
   19030:	str	r6, [sp]
   19034:	add	r3, sp, #24
   19038:	mov	r2, r4
   1903c:	mov	r1, r0
   19040:	mov	r0, #3
   19044:	bl	1208c <__fxstatat64@plt>
   19048:	cmp	r0, #0
   1904c:	bne	18eac <__assert_fail@plt+0x6a30>
   19050:	add	r7, sp, #392	; 0x188
   19054:	ldr	r2, [r5, #8]
   19058:	ldr	r3, [r7, #-344]	; 0xfffffea8
   1905c:	cmp	r2, r3
   19060:	bne	18eac <__assert_fail@plt+0x6a30>
   19064:	ldrb	r3, [r5, #12]
   19068:	b	18ef4 <__assert_fail@plt+0x6a78>
   1906c:	ldr	r3, [r8]
   19070:	cmp	r3, r6
   19074:	moveq	r0, #1
   19078:	beq	19000 <__assert_fail@plt+0x6b84>
   1907c:	mvn	r0, #0
   19080:	b	19000 <__assert_fail@plt+0x6b84>
   19084:	mvn	r0, #21
   19088:	b	19000 <__assert_fail@plt+0x6b84>
   1908c:	bl	1202c <__stack_chk_fail@plt>
   19090:	andeq	r2, r1, r8, lsl #31
   19094:	andeq	r0, r0, ip, lsr #4
   19098:	andeq	r1, r0, r0, lsr #31
   1909c:	andeq	r1, r0, r0, lsl #31
   190a0:	andeq	r1, r0, r4, ror #23
   190a4:	cmp	r3, #0
   190a8:	cmpeq	r2, #0
   190ac:	bne	190c4 <__assert_fail@plt+0x6c48>
   190b0:	cmp	r1, #0
   190b4:	cmpeq	r0, #0
   190b8:	mvnne	r1, #0
   190bc:	mvnne	r0, #0
   190c0:	b	190e0 <__assert_fail@plt+0x6c64>
   190c4:	sub	sp, sp, #8
   190c8:	push	{sp, lr}
   190cc:	bl	190f0 <__assert_fail@plt+0x6c74>
   190d0:	ldr	lr, [sp, #4]
   190d4:	add	sp, sp, #8
   190d8:	pop	{r2, r3}
   190dc:	bx	lr
   190e0:	push	{r1, lr}
   190e4:	mov	r0, #8
   190e8:	bl	11e58 <raise@plt>
   190ec:	pop	{r1, pc}
   190f0:	cmp	r1, r3
   190f4:	cmpeq	r0, r2
   190f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190fc:	mov	r4, r0
   19100:	movcc	r0, #0
   19104:	mov	r5, r1
   19108:	ldr	lr, [sp, #36]	; 0x24
   1910c:	movcc	r1, r0
   19110:	bcc	1920c <__assert_fail@plt+0x6d90>
   19114:	cmp	r3, #0
   19118:	clzeq	ip, r2
   1911c:	clzne	ip, r3
   19120:	addeq	ip, ip, #32
   19124:	cmp	r5, #0
   19128:	clzeq	r1, r4
   1912c:	addeq	r1, r1, #32
   19130:	clzne	r1, r5
   19134:	sub	ip, ip, r1
   19138:	sub	sl, ip, #32
   1913c:	lsl	r9, r3, ip
   19140:	rsb	fp, ip, #32
   19144:	orr	r9, r9, r2, lsl sl
   19148:	orr	r9, r9, r2, lsr fp
   1914c:	lsl	r8, r2, ip
   19150:	cmp	r5, r9
   19154:	cmpeq	r4, r8
   19158:	movcc	r0, #0
   1915c:	movcc	r1, r0
   19160:	bcc	1917c <__assert_fail@plt+0x6d00>
   19164:	mov	r0, #1
   19168:	subs	r4, r4, r8
   1916c:	lsl	r1, r0, sl
   19170:	orr	r1, r1, r0, lsr fp
   19174:	lsl	r0, r0, ip
   19178:	sbc	r5, r5, r9
   1917c:	cmp	ip, #0
   19180:	beq	1920c <__assert_fail@plt+0x6d90>
   19184:	lsr	r6, r8, #1
   19188:	orr	r6, r6, r9, lsl #31
   1918c:	lsr	r7, r9, #1
   19190:	mov	r2, ip
   19194:	b	191b8 <__assert_fail@plt+0x6d3c>
   19198:	subs	r3, r4, r6
   1919c:	sbc	r8, r5, r7
   191a0:	adds	r3, r3, r3
   191a4:	adc	r8, r8, r8
   191a8:	adds	r4, r3, #1
   191ac:	adc	r5, r8, #0
   191b0:	subs	r2, r2, #1
   191b4:	beq	191d4 <__assert_fail@plt+0x6d58>
   191b8:	cmp	r5, r7
   191bc:	cmpeq	r4, r6
   191c0:	bcs	19198 <__assert_fail@plt+0x6d1c>
   191c4:	adds	r4, r4, r4
   191c8:	adc	r5, r5, r5
   191cc:	subs	r2, r2, #1
   191d0:	bne	191b8 <__assert_fail@plt+0x6d3c>
   191d4:	lsr	r3, r4, ip
   191d8:	orr	r3, r3, r5, lsl fp
   191dc:	lsr	r2, r5, ip
   191e0:	orr	r3, r3, r5, lsr sl
   191e4:	adds	r0, r0, r4
   191e8:	mov	r4, r3
   191ec:	lsl	r3, r2, ip
   191f0:	orr	r3, r3, r4, lsl sl
   191f4:	lsl	ip, r4, ip
   191f8:	orr	r3, r3, r4, lsr fp
   191fc:	adc	r1, r1, r5
   19200:	subs	r0, r0, ip
   19204:	mov	r5, r2
   19208:	sbc	r1, r1, r3
   1920c:	cmp	lr, #0
   19210:	strdne	r4, [lr]
   19214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19218:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1921c:	mov	r7, r0
   19220:	ldr	r6, [pc, #72]	; 19270 <__assert_fail@plt+0x6df4>
   19224:	ldr	r5, [pc, #72]	; 19274 <__assert_fail@plt+0x6df8>
   19228:	add	r6, pc, r6
   1922c:	add	r5, pc, r5
   19230:	sub	r6, r6, r5
   19234:	mov	r8, r1
   19238:	mov	r9, r2
   1923c:	bl	11e08 <fdopen@plt-0x20>
   19240:	asrs	r6, r6, #2
   19244:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19248:	mov	r4, #0
   1924c:	add	r4, r4, #1
   19250:	ldr	r3, [r5], #4
   19254:	mov	r2, r9
   19258:	mov	r1, r8
   1925c:	mov	r0, r7
   19260:	blx	r3
   19264:	cmp	r6, r4
   19268:	bne	1924c <__assert_fail@plt+0x6dd0>
   1926c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19270:	andeq	r2, r1, ip, asr #16
   19274:	andeq	r2, r1, r4, asr #16
   19278:	bx	lr
   1927c:	ldr	r3, [pc, #12]	; 19290 <__assert_fail@plt+0x6e14>
   19280:	mov	r1, #0
   19284:	add	r3, pc, r3
   19288:	ldr	r2, [r3]
   1928c:	b	12224 <__cxa_atexit@plt>
   19290:	andeq	r2, r1, r8, ror sp

Disassembly of section .fini:

00019294 <.fini>:
   19294:	push	{r3, lr}
   19298:	pop	{r3, pc}
