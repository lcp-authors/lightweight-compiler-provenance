
raspbian-preinstalled/dtc:     file format elf32-littlearm


Disassembly of section .init:

00010ce0 <.init>:
   10ce0:	push	{r3, lr}
   10ce4:	bl	11a54 <__assert_fail@plt+0xa90>
   10ce8:	pop	{r3, pc}

Disassembly of section .plt:

00010cec <calloc@plt-0x14>:
   10cec:	push	{lr}		; (str lr, [sp, #-4]!)
   10cf0:	ldr	lr, [pc, #4]	; 10cfc <calloc@plt-0x4>
   10cf4:	add	lr, pc, lr
   10cf8:	ldr	pc, [lr, #8]!
   10cfc:	muleq	r2, r0, r1

00010d00 <calloc@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #155648	; 0x26000
   10d08:	ldr	pc, [ip, #400]!	; 0x190

00010d0c <strstr@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #155648	; 0x26000
   10d14:	ldr	pc, [ip, #392]!	; 0x188

00010d18 <raise@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #155648	; 0x26000
   10d20:	ldr	pc, [ip, #384]!	; 0x180

00010d24 <strcmp@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #155648	; 0x26000
   10d2c:	ldr	pc, [ip, #376]!	; 0x178

00010d30 <strtol@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #155648	; 0x26000
   10d38:	ldr	pc, [ip, #368]!	; 0x170

00010d3c <fopen@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #155648	; 0x26000
   10d44:	ldr	pc, [ip, #360]!	; 0x168

00010d48 <read@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #155648	; 0x26000
   10d50:	ldr	pc, [ip, #352]!	; 0x160

00010d54 <memmove@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #155648	; 0x26000
   10d5c:	ldr	pc, [ip, #344]!	; 0x158

00010d60 <free@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #155648	; 0x26000
   10d68:	ldr	pc, [ip, #336]!	; 0x150

00010d6c <ferror@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #155648	; 0x26000
   10d74:	ldr	pc, [ip, #328]!	; 0x148

00010d78 <__vsnprintf_chk@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #155648	; 0x26000
   10d80:	ldr	pc, [ip, #320]!	; 0x140

00010d84 <memcpy@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #155648	; 0x26000
   10d8c:	ldr	pc, [ip, #312]!	; 0x138

00010d90 <memcmp@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #155648	; 0x26000
   10d98:	ldr	pc, [ip, #304]!	; 0x130

00010d9c <__stack_chk_fail@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #155648	; 0x26000
   10da4:	ldr	pc, [ip, #296]!	; 0x128

00010da8 <realloc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #155648	; 0x26000
   10db0:	ldr	pc, [ip, #288]!	; 0x120

00010db4 <strcasecmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #155648	; 0x26000
   10dbc:	ldr	pc, [ip, #280]!	; 0x118

00010dc0 <__xstat@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #155648	; 0x26000
   10dc8:	ldr	pc, [ip, #272]!	; 0x110

00010dcc <fwrite@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #155648	; 0x26000
   10dd4:	ldr	pc, [ip, #264]!	; 0x108

00010dd8 <strtoll@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #155648	; 0x26000
   10de0:	ldr	pc, [ip, #256]!	; 0x100

00010de4 <fread@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #155648	; 0x26000
   10dec:	ldr	pc, [ip, #248]!	; 0xf8

00010df0 <opendir@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #155648	; 0x26000
   10df8:	ldr	pc, [ip, #240]!	; 0xf0

00010dfc <malloc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #155648	; 0x26000
   10e04:	ldr	pc, [ip, #232]!	; 0xe8

00010e08 <__libc_start_main@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #155648	; 0x26000
   10e10:	ldr	pc, [ip, #224]!	; 0xe0

00010e14 <strerror@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #155648	; 0x26000
   10e1c:	ldr	pc, [ip, #216]!	; 0xd8

00010e20 <__vfprintf_chk@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #155648	; 0x26000
   10e28:	ldr	pc, [ip, #208]!	; 0xd0

00010e2c <__gmon_start__@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #155648	; 0x26000
   10e34:	ldr	pc, [ip, #200]!	; 0xc8

00010e38 <open@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #155648	; 0x26000
   10e40:	ldr	pc, [ip, #192]!	; 0xc0

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #155648	; 0x26000
   10e4c:	ldr	pc, [ip, #184]!	; 0xb8

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #155648	; 0x26000
   10e58:	ldr	pc, [ip, #176]!	; 0xb0

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #155648	; 0x26000
   10e64:	ldr	pc, [ip, #168]!	; 0xa8

00010e68 <feof@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #155648	; 0x26000
   10e70:	ldr	pc, [ip, #160]!	; 0xa0

00010e74 <strlen@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #155648	; 0x26000
   10e7c:	ldr	pc, [ip, #152]!	; 0x98

00010e80 <strchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #155648	; 0x26000
   10e88:	ldr	pc, [ip, #144]!	; 0x90

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #155648	; 0x26000
   10e94:	ldr	pc, [ip, #136]!	; 0x88

00010e98 <memset@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #155648	; 0x26000
   10ea0:	ldr	pc, [ip, #128]!	; 0x80

00010ea4 <putchar@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #155648	; 0x26000
   10eac:	ldr	pc, [ip, #120]!	; 0x78

00010eb0 <strncpy@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #155648	; 0x26000
   10eb8:	ldr	pc, [ip, #112]!	; 0x70

00010ebc <strtoull@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #155648	; 0x26000
   10ec4:	ldr	pc, [ip, #104]!	; 0x68

00010ec8 <__printf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #155648	; 0x26000
   10ed0:	ldr	pc, [ip, #96]!	; 0x60

00010ed4 <write@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #155648	; 0x26000
   10edc:	ldr	pc, [ip, #88]!	; 0x58

00010ee0 <__fprintf_chk@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #155648	; 0x26000
   10ee8:	ldr	pc, [ip, #80]!	; 0x50

00010eec <memchr@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #155648	; 0x26000
   10ef4:	ldr	pc, [ip, #72]!	; 0x48

00010ef8 <fclose@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #155648	; 0x26000
   10f00:	ldr	pc, [ip, #64]!	; 0x40

00010f04 <strnlen@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #155648	; 0x26000
   10f0c:	ldr	pc, [ip, #56]!	; 0x38

00010f10 <readdir@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #155648	; 0x26000
   10f18:	ldr	pc, [ip, #48]!	; 0x30

00010f1c <strrchr@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #155648	; 0x26000
   10f24:	ldr	pc, [ip, #40]!	; 0x28

00010f28 <fputc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #155648	; 0x26000
   10f30:	ldr	pc, [ip, #32]!

00010f34 <clearerr@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #155648	; 0x26000
   10f3c:	ldr	pc, [ip, #24]!

00010f40 <qsort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #155648	; 0x26000
   10f48:	ldr	pc, [ip, #16]!

00010f4c <__lxstat@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #155648	; 0x26000
   10f54:	ldr	pc, [ip, #8]!

00010f58 <fseek@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #155648	; 0x26000
   10f60:	ldr	pc, [ip, #0]!

00010f64 <fputs@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #151552	; 0x25000
   10f6c:	ldr	pc, [ip, #4088]!	; 0xff8

00010f70 <strncmp@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #151552	; 0x25000
   10f78:	ldr	pc, [ip, #4080]!	; 0xff0

00010f7c <abort@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #151552	; 0x25000
   10f84:	ldr	pc, [ip, #4072]!	; 0xfe8

00010f88 <getc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #151552	; 0x25000
   10f90:	ldr	pc, [ip, #4064]!	; 0xfe0

00010f94 <close@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #151552	; 0x25000
   10f9c:	ldr	pc, [ip, #4056]!	; 0xfd8

00010fa0 <closedir@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #151552	; 0x25000
   10fa8:	ldr	pc, [ip, #4048]!	; 0xfd0

00010fac <__snprintf_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #151552	; 0x25000
   10fb4:	ldr	pc, [ip, #4040]!	; 0xfc8

00010fb8 <strspn@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #151552	; 0x25000
   10fc0:	ldr	pc, [ip, #4032]!	; 0xfc0

00010fc4 <__assert_fail@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #151552	; 0x25000
   10fcc:	ldr	pc, [ip, #4024]!	; 0xfb8

Disassembly of section .text:

00010fd0 <.text>:
   10fd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fd4:	sub	sp, sp, #172	; 0xac
   10fd8:	ldr	r4, [pc, #2380]	; 1192c <__assert_fail@plt+0x968>
   10fdc:	ldr	r3, [pc, #2380]	; 11930 <__assert_fail@plt+0x96c>
   10fe0:	add	r4, pc, r4
   10fe4:	ldr	r2, [pc, #2376]	; 11934 <__assert_fail@plt+0x970>
   10fe8:	ldr	ip, [r4, r3]
   10fec:	ldr	r5, [pc, #2372]	; 11938 <__assert_fail@plt+0x974>
   10ff0:	mov	r3, #0
   10ff4:	ldr	r6, [ip]
   10ff8:	ldr	lr, [pc, #2364]	; 1193c <__assert_fail@plt+0x978>
   10ffc:	str	r6, [sp, #164]	; 0xa4
   11000:	ldr	r2, [r4, r2]
   11004:	ldr	ip, [pc, #2356]	; 11940 <__assert_fail@plt+0x97c>
   11008:	mov	r6, r2
   1100c:	str	r2, [sp, #44]	; 0x2c
   11010:	str	r3, [r6]
   11014:	ldr	r5, [r4, r5]
   11018:	mov	r7, r1
   1101c:	mov	r6, r5
   11020:	str	r5, [sp, #48]	; 0x30
   11024:	str	r3, [r6]
   11028:	ldr	r1, [r4, lr]
   1102c:	ldr	r2, [pc, #2320]	; 11944 <__assert_fail@plt+0x980>
   11030:	str	r3, [sp, #32]
   11034:	str	r3, [r1]
   11038:	str	r3, [sp, #20]
   1103c:	str	r1, [sp, #16]
   11040:	ldr	r1, [r4, ip]
   11044:	mov	r9, r3
   11048:	str	r1, [sp, #36]	; 0x24
   1104c:	str	r3, [r1]
   11050:	ldr	r2, [r4, r2]
   11054:	mov	fp, r3
   11058:	mov	sl, r3
   1105c:	str	r3, [r2]
   11060:	ldr	r3, [pc, #2272]	; 11948 <__assert_fail@plt+0x984>
   11064:	ldr	r6, [pc, #2272]	; 1194c <__assert_fail@plt+0x988>
   11068:	add	r3, pc, r3
   1106c:	ldr	r8, [pc, #2268]	; 11950 <__assert_fail@plt+0x98c>
   11070:	mvn	r1, #0
   11074:	mov	r5, r0
   11078:	str	r3, [sp, #12]
   1107c:	mvn	r0, #0
   11080:	ldr	r3, [pc, #2252]	; 11954 <__assert_fail@plt+0x990>
   11084:	add	r6, pc, r6
   11088:	add	r8, pc, r8
   1108c:	strd	r0, [sp, #24]
   11090:	add	r3, pc, r3
   11094:	mov	r1, #17
   11098:	str	r2, [sp, #52]	; 0x34
   1109c:	str	r1, [sp, #40]	; 0x28
   110a0:	str	r3, [sp, #56]	; 0x38
   110a4:	mov	r3, #0
   110a8:	str	r3, [sp]
   110ac:	mov	r2, r8
   110b0:	mov	r3, r6
   110b4:	mov	r1, r7
   110b8:	mov	r0, r5
   110bc:	bl	10e44 <getopt_long@plt>
   110c0:	cmn	r0, #1
   110c4:	beq	1143c <__assert_fail@plt+0x478>
   110c8:	sub	r0, r0, #64	; 0x40
   110cc:	cmp	r0, #54	; 0x36
   110d0:	addls	pc, pc, r0, lsl #2
   110d4:	b	11400 <__assert_fail@plt+0x43c>
   110d8:	b	1135c <__assert_fail@plt+0x398>
   110dc:	b	11348 <__assert_fail@plt+0x384>
   110e0:	b	11400 <__assert_fail@plt+0x43c>
   110e4:	b	11400 <__assert_fail@plt+0x43c>
   110e8:	b	11400 <__assert_fail@plt+0x43c>
   110ec:	b	1132c <__assert_fail@plt+0x368>
   110f0:	b	11400 <__assert_fail@plt+0x43c>
   110f4:	b	11400 <__assert_fail@plt+0x43c>
   110f8:	b	112dc <__assert_fail@plt+0x318>
   110fc:	b	112cc <__assert_fail@plt+0x308>
   11100:	b	11400 <__assert_fail@plt+0x43c>
   11104:	b	11400 <__assert_fail@plt+0x43c>
   11108:	b	11400 <__assert_fail@plt+0x43c>
   1110c:	b	11400 <__assert_fail@plt+0x43c>
   11110:	b	11400 <__assert_fail@plt+0x43c>
   11114:	b	112bc <__assert_fail@plt+0x2f8>
   11118:	b	11400 <__assert_fail@plt+0x43c>
   1111c:	b	11400 <__assert_fail@plt+0x43c>
   11120:	b	11298 <__assert_fail@plt+0x2d4>
   11124:	b	11274 <__assert_fail@plt+0x2b0>
   11128:	b	11400 <__assert_fail@plt+0x43c>
   1112c:	b	11400 <__assert_fail@plt+0x43c>
   11130:	b	11254 <__assert_fail@plt+0x290>
   11134:	b	11238 <__assert_fail@plt+0x274>
   11138:	b	11400 <__assert_fail@plt+0x43c>
   1113c:	b	11400 <__assert_fail@plt+0x43c>
   11140:	b	11400 <__assert_fail@plt+0x43c>
   11144:	b	11400 <__assert_fail@plt+0x43c>
   11148:	b	11400 <__assert_fail@plt+0x43c>
   1114c:	b	11400 <__assert_fail@plt+0x43c>
   11150:	b	11400 <__assert_fail@plt+0x43c>
   11154:	b	11400 <__assert_fail@plt+0x43c>
   11158:	b	11400 <__assert_fail@plt+0x43c>
   1115c:	b	111f4 <__assert_fail@plt+0x230>
   11160:	b	111d4 <__assert_fail@plt+0x210>
   11164:	b	11400 <__assert_fail@plt+0x43c>
   11168:	b	111c0 <__assert_fail@plt+0x1fc>
   1116c:	b	11400 <__assert_fail@plt+0x43c>
   11170:	b	111b4 <__assert_fail@plt+0x1f0>
   11174:	b	11400 <__assert_fail@plt+0x43c>
   11178:	b	113d4 <__assert_fail@plt+0x410>
   1117c:	b	113c0 <__assert_fail@plt+0x3fc>
   11180:	b	11400 <__assert_fail@plt+0x43c>
   11184:	b	11400 <__assert_fail@plt+0x43c>
   11188:	b	11400 <__assert_fail@plt+0x43c>
   1118c:	b	11400 <__assert_fail@plt+0x43c>
   11190:	b	11400 <__assert_fail@plt+0x43c>
   11194:	b	113ac <__assert_fail@plt+0x3e8>
   11198:	b	11388 <__assert_fail@plt+0x3c4>
   1119c:	b	11374 <__assert_fail@plt+0x3b0>
   111a0:	b	11400 <__assert_fail@plt+0x43c>
   111a4:	b	113f8 <__assert_fail@plt+0x434>
   111a8:	b	11400 <__assert_fail@plt+0x43c>
   111ac:	b	11400 <__assert_fail@plt+0x43c>
   111b0:	b	11370 <__assert_fail@plt+0x3ac>
   111b4:	mov	r3, #1
   111b8:	str	r3, [sp, #32]
   111bc:	b	110a4 <__assert_fail@plt+0xe0>
   111c0:	ldr	r3, [pc, #1936]	; 11958 <__assert_fail@plt+0x994>
   111c4:	ldr	r3, [r4, r3]
   111c8:	ldr	r3, [r3]
   111cc:	str	r3, [sp, #20]
   111d0:	b	110a4 <__assert_fail@plt+0xe0>
   111d4:	ldr	r3, [pc, #1916]	; 11958 <__assert_fail@plt+0x994>
   111d8:	mov	r2, #0
   111dc:	mov	r1, r2
   111e0:	ldr	r3, [r4, r3]
   111e4:	ldr	r0, [r3]
   111e8:	bl	10dd8 <strtoll@plt>
   111ec:	strd	r0, [sp, #24]
   111f0:	b	110a4 <__assert_fail@plt+0xe0>
   111f4:	ldr	r3, [pc, #1884]	; 11958 <__assert_fail@plt+0x994>
   111f8:	mov	r2, #0
   111fc:	mov	r1, r2
   11200:	ldr	r3, [r4, r3]
   11204:	ldr	r0, [r3]
   11208:	bl	10d30 <strtol@plt>
   1120c:	ldr	r3, [sp, #52]	; 0x34
   11210:	cmp	r0, #0
   11214:	str	r0, [r3]
   11218:	ble	11228 <__assert_fail@plt+0x264>
   1121c:	sub	r3, r0, #1
   11220:	tst	r3, r0
   11224:	beq	110a4 <__assert_fail@plt+0xe0>
   11228:	mov	r1, r0
   1122c:	ldr	r0, [pc, #1832]	; 1195c <__assert_fail@plt+0x998>
   11230:	add	r0, pc, r0
   11234:	bl	11c00 <__assert_fail@plt+0xc3c>
   11238:	ldr	r3, [pc, #1816]	; 11958 <__assert_fail@plt+0x994>
   1123c:	mov	r1, #0
   11240:	mov	r0, #1
   11244:	ldr	r3, [r4, r3]
   11248:	ldr	r2, [r3]
   1124c:	bl	15520 <__assert_fail@plt+0x455c>
   11250:	b	110a4 <__assert_fail@plt+0xe0>
   11254:	ldr	r3, [pc, #1788]	; 11958 <__assert_fail@plt+0x994>
   11258:	mov	r2, #0
   1125c:	mov	r1, r2
   11260:	ldr	r3, [r4, r3]
   11264:	ldr	r0, [r3]
   11268:	bl	10d30 <strtol@plt>
   1126c:	str	r0, [sp, #40]	; 0x28
   11270:	b	110a4 <__assert_fail@plt+0xe0>
   11274:	ldr	r3, [pc, #1756]	; 11958 <__assert_fail@plt+0x994>
   11278:	mov	r2, #0
   1127c:	mov	r1, r2
   11280:	ldr	r3, [r4, r3]
   11284:	ldr	r0, [r3]
   11288:	bl	10d30 <strtol@plt>
   1128c:	ldr	r3, [sp, #16]
   11290:	str	r0, [r3]
   11294:	b	110a4 <__assert_fail@plt+0xe0>
   11298:	ldr	r3, [pc, #1720]	; 11958 <__assert_fail@plt+0x994>
   1129c:	mov	r2, #0
   112a0:	mov	r1, r2
   112a4:	ldr	r3, [r4, r3]
   112a8:	ldr	r0, [r3]
   112ac:	bl	10d30 <strtol@plt>
   112b0:	ldr	r3, [sp, #48]	; 0x30
   112b4:	str	r0, [r3]
   112b8:	b	110a4 <__assert_fail@plt+0xe0>
   112bc:	ldr	r3, [pc, #1684]	; 11958 <__assert_fail@plt+0x994>
   112c0:	ldr	r3, [r4, r3]
   112c4:	ldr	fp, [r3]
   112c8:	b	110a4 <__assert_fail@plt+0xe0>
   112cc:	ldr	r3, [pc, #1668]	; 11958 <__assert_fail@plt+0x994>
   112d0:	ldr	r3, [r4, r3]
   112d4:	ldr	sl, [r3]
   112d8:	b	110a4 <__assert_fail@plt+0xe0>
   112dc:	ldr	r3, [pc, #1652]	; 11958 <__assert_fail@plt+0x994>
   112e0:	ldr	r1, [sp, #56]	; 0x38
   112e4:	ldr	r3, [r4, r3]
   112e8:	ldr	r3, [r3]
   112ec:	mov	r0, r3
   112f0:	str	r3, [sp, #60]	; 0x3c
   112f4:	bl	10d24 <strcmp@plt>
   112f8:	cmp	r0, #0
   112fc:	beq	11428 <__assert_fail@plt+0x464>
   11300:	ldr	r1, [pc, #1624]	; 11960 <__assert_fail@plt+0x99c>
   11304:	ldr	r0, [sp, #60]	; 0x3c
   11308:	add	r1, pc, r1
   1130c:	bl	10d24 <strcmp@plt>
   11310:	cmp	r0, #0
   11314:	bne	11684 <__assert_fail@plt+0x6c0>
   11318:	ldr	r3, [pc, #1604]	; 11964 <__assert_fail@plt+0x9a0>
   1131c:	mov	r2, #2
   11320:	ldr	r3, [r4, r3]
   11324:	str	r2, [r3]
   11328:	b	110a4 <__assert_fail@plt+0xe0>
   1132c:	ldr	r3, [pc, #1572]	; 11958 <__assert_fail@plt+0x994>
   11330:	mov	r1, #1
   11334:	mov	r0, #0
   11338:	ldr	r3, [r4, r3]
   1133c:	ldr	r2, [r3]
   11340:	bl	15520 <__assert_fail@plt+0x455c>
   11344:	b	110a4 <__assert_fail@plt+0xe0>
   11348:	ldr	r3, [pc, #1560]	; 11968 <__assert_fail@plt+0x9a4>
   1134c:	mov	r2, #1
   11350:	ldr	r3, [r4, r3]
   11354:	str	r2, [r3]
   11358:	b	110a4 <__assert_fail@plt+0xe0>
   1135c:	ldr	r3, [pc, #1544]	; 1196c <__assert_fail@plt+0x9a8>
   11360:	mov	r2, #1
   11364:	ldr	r3, [r4, r3]
   11368:	str	r2, [r3]
   1136c:	b	110a4 <__assert_fail@plt+0xe0>
   11370:	bl	1d040 <__assert_fail@plt+0xc07c>
   11374:	ldr	r2, [sp, #44]	; 0x2c
   11378:	ldr	r3, [r2]
   1137c:	add	r3, r3, #1
   11380:	str	r3, [r2]
   11384:	b	110a4 <__assert_fail@plt+0xe0>
   11388:	ldr	r3, [pc, #1480]	; 11958 <__assert_fail@plt+0x994>
   1138c:	mov	r2, #0
   11390:	mov	r1, r2
   11394:	ldr	r3, [r4, r3]
   11398:	ldr	r0, [r3]
   1139c:	bl	10d30 <strtol@plt>
   113a0:	ldr	r3, [sp, #36]	; 0x24
   113a4:	str	r0, [r3]
   113a8:	b	110a4 <__assert_fail@plt+0xe0>
   113ac:	ldr	r3, [pc, #1444]	; 11958 <__assert_fail@plt+0x994>
   113b0:	ldr	r3, [r4, r3]
   113b4:	ldr	r3, [r3]
   113b8:	str	r3, [sp, #12]
   113bc:	b	110a4 <__assert_fail@plt+0xe0>
   113c0:	ldr	r3, [pc, #1424]	; 11958 <__assert_fail@plt+0x994>
   113c4:	ldr	r3, [r4, r3]
   113c8:	ldr	r0, [r3]
   113cc:	bl	1b2cc <__assert_fail@plt+0xa308>
   113d0:	b	110a4 <__assert_fail@plt+0xe0>
   113d4:	ldr	r3, [pc, #1428]	; 11970 <__assert_fail@plt+0x9ac>
   113d8:	ldr	r2, [pc, #1428]	; 11974 <__assert_fail@plt+0x9b0>
   113dc:	add	r3, pc, r3
   113e0:	add	r1, r3, #352	; 0x160
   113e4:	add	r2, pc, r2
   113e8:	str	r1, [sp]
   113ec:	mov	r0, #0
   113f0:	add	r1, r2, #36	; 0x24
   113f4:	bl	1d06c <__assert_fail@plt+0xc0a8>
   113f8:	mov	r9, #1
   113fc:	b	110a4 <__assert_fail@plt+0xe0>
   11400:	ldr	r3, [pc, #1392]	; 11978 <__assert_fail@plt+0x9b4>
   11404:	ldr	r2, [pc, #1392]	; 1197c <__assert_fail@plt+0x9b8>
   11408:	add	r3, pc, r3
   1140c:	ldr	r0, [pc, #1388]	; 11980 <__assert_fail@plt+0x9bc>
   11410:	add	r1, r3, #352	; 0x160
   11414:	add	r2, pc, r2
   11418:	str	r1, [sp]
   1141c:	add	r0, pc, r0
   11420:	add	r1, r2, #36	; 0x24
   11424:	bl	1d06c <__assert_fail@plt+0xc0a8>
   11428:	ldr	r3, [pc, #1332]	; 11964 <__assert_fail@plt+0x9a0>
   1142c:	mov	r2, #1
   11430:	ldr	r3, [r4, r3]
   11434:	str	r2, [r3]
   11438:	b	110a4 <__assert_fail@plt+0xe0>
   1143c:	ldr	r3, [pc, #1344]	; 11984 <__assert_fail@plt+0x9c0>
   11440:	ldr	r3, [r4, r3]
   11444:	ldr	r3, [r3]
   11448:	add	r2, r3, #1
   1144c:	cmp	r2, r5
   11450:	blt	11730 <__assert_fail@plt+0x76c>
   11454:	cmp	r3, r5
   11458:	ldrlt	r5, [r7, r3, lsl #2]
   1145c:	bge	116b0 <__assert_fail@plt+0x6ec>
   11460:	ldr	r3, [sp, #16]
   11464:	ldr	r3, [r3]
   11468:	cmp	r3, #0
   1146c:	beq	1148c <__assert_fail@plt+0x4c8>
   11470:	ldr	r3, [sp, #36]	; 0x24
   11474:	ldr	r3, [r3]
   11478:	cmp	r3, #0
   1147c:	beq	1148c <__assert_fail@plt+0x4c8>
   11480:	ldr	r0, [pc, #1280]	; 11988 <__assert_fail@plt+0x9c4>
   11484:	add	r0, pc, r0
   11488:	bl	11c00 <__assert_fail@plt+0xc3c>
   1148c:	ldr	r3, [sp, #20]
   11490:	cmp	r3, #0
   11494:	beq	114d0 <__assert_fail@plt+0x50c>
   11498:	ldr	r1, [pc, #1260]	; 1198c <__assert_fail@plt+0x9c8>
   1149c:	mov	r0, r3
   114a0:	add	r1, pc, r1
   114a4:	bl	10d3c <fopen@plt>
   114a8:	ldr	r3, [pc, #1248]	; 11990 <__assert_fail@plt+0x9cc>
   114ac:	ldr	r3, [r4, r3]
   114b0:	cmp	r0, #0
   114b4:	str	r0, [r3]
   114b8:	beq	11818 <__assert_fail@plt+0x854>
   114bc:	ldr	r2, [pc, #1232]	; 11994 <__assert_fail@plt+0x9d0>
   114c0:	ldr	r3, [sp, #12]
   114c4:	add	r2, pc, r2
   114c8:	mov	r1, #1
   114cc:	bl	10ee0 <__fprintf_chk@plt>
   114d0:	cmp	sl, #0
   114d4:	beq	116f4 <__assert_fail@plt+0x730>
   114d8:	ldr	r6, [pc, #1208]	; 11998 <__assert_fail@plt+0x9d4>
   114dc:	mov	r0, sl
   114e0:	add	r6, pc, r6
   114e4:	mov	r1, r6
   114e8:	bl	10d24 <strcmp@plt>
   114ec:	cmp	fp, #0
   114f0:	mov	r7, r0
   114f4:	beq	116bc <__assert_fail@plt+0x6f8>
   114f8:	cmp	r7, #0
   114fc:	beq	116e4 <__assert_fail@plt+0x720>
   11500:	ldr	r1, [pc, #1172]	; 1199c <__assert_fail@plt+0x9d8>
   11504:	mov	r0, sl
   11508:	add	r1, pc, r1
   1150c:	bl	10d24 <strcmp@plt>
   11510:	cmp	r0, #0
   11514:	beq	11808 <__assert_fail@plt+0x844>
   11518:	ldr	r1, [pc, #1152]	; 119a0 <__assert_fail@plt+0x9dc>
   1151c:	mov	r0, sl
   11520:	add	r1, pc, r1
   11524:	bl	10d24 <strcmp@plt>
   11528:	cmp	r0, #0
   1152c:	bne	117f8 <__assert_fail@plt+0x834>
   11530:	mov	r0, r5
   11534:	bl	18770 <__assert_fail@plt+0x77ac>
   11538:	mov	r5, r0
   1153c:	ldr	r3, [pc, #1100]	; 11990 <__assert_fail@plt+0x9cc>
   11540:	ldr	r2, [sp, #12]
   11544:	str	r2, [r5, #16]
   11548:	ldr	r6, [r4, r3]
   1154c:	ldr	r1, [r6]
   11550:	cmp	r1, #0
   11554:	beq	11568 <__assert_fail@plt+0x5a4>
   11558:	mov	r0, #10
   1155c:	bl	10f28 <fputc@plt>
   11560:	ldr	r0, [r6]
   11564:	bl	10ef8 <fclose@plt>
   11568:	ldrd	r0, [sp, #24]
   1156c:	mvn	r3, #0
   11570:	mvn	r2, #0
   11574:	cmp	r1, r3
   11578:	cmpeq	r0, r2
   1157c:	ldr	r1, [pc, #1056]	; 119a4 <__assert_fail@plt+0x9e0>
   11580:	movne	r3, r0
   11584:	strne	r3, [r5, #8]
   11588:	add	r1, pc, r1
   1158c:	ldr	r0, [r5, #12]
   11590:	bl	11b7c <__assert_fail@plt+0xbb8>
   11594:	ldr	r3, [r5]
   11598:	ldr	r0, [sp, #32]
   1159c:	tst	r3, #2
   115a0:	ldr	r3, [pc, #1024]	; 119a8 <__assert_fail@plt+0x9e4>
   115a4:	movne	r2, #1
   115a8:	mov	r1, r5
   115ac:	ldrne	r6, [r4, r3]
   115b0:	ldreq	r6, [r4, r3]
   115b4:	strne	r2, [r6]
   115b8:	bl	155f8 <__assert_fail@plt+0x4634>
   115bc:	ldr	r3, [pc, #932]	; 11968 <__assert_fail@plt+0x9a4>
   115c0:	ldr	r3, [r4, r3]
   115c4:	ldr	r3, [r3]
   115c8:	cmp	r3, #0
   115cc:	bne	117d0 <__assert_fail@plt+0x80c>
   115d0:	ldr	r3, [pc, #916]	; 1196c <__assert_fail@plt+0x9a8>
   115d4:	ldr	r3, [r4, r3]
   115d8:	ldr	r3, [r3]
   115dc:	cmp	r3, #0
   115e0:	bne	117b8 <__assert_fail@plt+0x7f4>
   115e4:	ldr	r3, [r6]
   115e8:	cmp	r3, #0
   115ec:	bne	11794 <__assert_fail@plt+0x7d0>
   115f0:	cmp	r9, #0
   115f4:	bne	11788 <__assert_fail@plt+0x7c4>
   115f8:	ldr	r1, [pc, #940]	; 119ac <__assert_fail@plt+0x9e8>
   115fc:	ldr	r0, [sp, #12]
   11600:	add	r1, pc, r1
   11604:	bl	10d24 <strcmp@plt>
   11608:	cmp	r0, #0
   1160c:	bne	11750 <__assert_fail@plt+0x78c>
   11610:	ldr	r3, [pc, #920]	; 119b0 <__assert_fail@plt+0x9ec>
   11614:	ldr	r3, [r4, r3]
   11618:	ldr	r4, [r3]
   1161c:	ldr	r1, [pc, #912]	; 119b4 <__assert_fail@plt+0x9f0>
   11620:	mov	r0, fp
   11624:	add	r1, pc, r1
   11628:	bl	10d24 <strcmp@plt>
   1162c:	cmp	r0, #0
   11630:	beq	117e8 <__assert_fail@plt+0x824>
   11634:	ldr	r1, [pc, #892]	; 119b8 <__assert_fail@plt+0x9f4>
   11638:	mov	r0, fp
   1163c:	add	r1, pc, r1
   11640:	bl	10d24 <strcmp@plt>
   11644:	cmp	r0, #0
   11648:	beq	11838 <__assert_fail@plt+0x874>
   1164c:	ldr	r1, [pc, #872]	; 119bc <__assert_fail@plt+0x9f8>
   11650:	mov	r0, fp
   11654:	add	r1, pc, r1
   11658:	bl	10d24 <strcmp@plt>
   1165c:	cmp	r0, #0
   11660:	beq	1184c <__assert_fail@plt+0x888>
   11664:	ldr	r1, [pc, #852]	; 119c0 <__assert_fail@plt+0x9fc>
   11668:	mov	r0, fp
   1166c:	add	r1, pc, r1
   11670:	bl	10d24 <strcmp@plt>
   11674:	cmp	r0, #0
   11678:	bne	11860 <__assert_fail@plt+0x89c>
   1167c:	mov	r0, #0
   11680:	bl	10e5c <exit@plt>
   11684:	ldr	r1, [pc, #824]	; 119c4 <__assert_fail@plt+0xa00>
   11688:	ldr	r0, [sp, #60]	; 0x3c
   1168c:	add	r1, pc, r1
   11690:	bl	10d24 <strcmp@plt>
   11694:	cmp	r0, #0
   11698:	bne	118b8 <__assert_fail@plt+0x8f4>
   1169c:	ldr	r3, [pc, #704]	; 11964 <__assert_fail@plt+0x9a0>
   116a0:	mov	r2, #3
   116a4:	ldr	r3, [r4, r3]
   116a8:	str	r2, [r3]
   116ac:	b	110a4 <__assert_fail@plt+0xe0>
   116b0:	ldr	r5, [pc, #784]	; 119c8 <__assert_fail@plt+0xa04>
   116b4:	add	r5, pc, r5
   116b8:	b	11460 <__assert_fail@plt+0x49c>
   116bc:	mov	r1, fp
   116c0:	ldr	r0, [sp, #12]
   116c4:	bl	11b08 <__assert_fail@plt+0xb44>
   116c8:	subs	fp, r0, #0
   116cc:	bne	114f8 <__assert_fail@plt+0x534>
   116d0:	cmp	r7, #0
   116d4:	movne	fp, r6
   116d8:	bne	11500 <__assert_fail@plt+0x53c>
   116dc:	ldr	fp, [pc, #744]	; 119cc <__assert_fail@plt+0xa08>
   116e0:	add	fp, pc, fp
   116e4:	mov	r0, r5
   116e8:	bl	1c350 <__assert_fail@plt+0xb38c>
   116ec:	mov	r5, r0
   116f0:	b	1153c <__assert_fail@plt+0x578>
   116f4:	add	r2, sp, #72	; 0x48
   116f8:	mov	r1, r5
   116fc:	mov	r0, #3
   11700:	bl	10dc0 <__xstat@plt>
   11704:	cmp	r0, #0
   11708:	bne	11724 <__assert_fail@plt+0x760>
   1170c:	ldr	r3, [sp, #88]	; 0x58
   11710:	and	r3, r3, #61440	; 0xf000
   11714:	cmp	r3, #16384	; 0x4000
   11718:	beq	118c8 <__assert_fail@plt+0x904>
   1171c:	cmp	r3, #32768	; 0x8000
   11720:	beq	11870 <__assert_fail@plt+0x8ac>
   11724:	ldr	sl, [pc, #676]	; 119d0 <__assert_fail@plt+0xa0c>
   11728:	add	sl, pc, sl
   1172c:	b	114d8 <__assert_fail@plt+0x514>
   11730:	ldr	r0, [pc, #668]	; 119d4 <__assert_fail@plt+0xa10>
   11734:	add	r3, r6, #352	; 0x160
   11738:	str	r3, [sp]
   1173c:	mov	r2, r8
   11740:	mov	r3, r6
   11744:	add	r1, r8, #36	; 0x24
   11748:	add	r0, pc, r0
   1174c:	bl	1d06c <__assert_fail@plt+0xc0a8>
   11750:	ldr	r1, [pc, #640]	; 119d8 <__assert_fail@plt+0xa14>
   11754:	ldr	r0, [sp, #12]
   11758:	add	r1, pc, r1
   1175c:	bl	10d3c <fopen@plt>
   11760:	subs	r4, r0, #0
   11764:	bne	1161c <__assert_fail@plt+0x658>
   11768:	bl	10e8c <__errno_location@plt>
   1176c:	ldr	r0, [r0]
   11770:	bl	10e14 <strerror@plt>
   11774:	ldr	r1, [sp, #12]
   11778:	mov	r2, r0
   1177c:	ldr	r0, [pc, #600]	; 119dc <__assert_fail@plt+0xa18>
   11780:	add	r0, pc, r0
   11784:	bl	11c00 <__assert_fail@plt+0xc3c>
   11788:	mov	r0, r5
   1178c:	bl	1ad2c <__assert_fail@plt+0x9d68>
   11790:	b	115f8 <__assert_fail@plt+0x634>
   11794:	ldr	r1, [pc, #580]	; 119e0 <__assert_fail@plt+0xa1c>
   11798:	mov	r0, r5
   1179c:	add	r1, pc, r1
   117a0:	bl	1ae58 <__assert_fail@plt+0x9e94>
   117a4:	ldr	r1, [pc, #568]	; 119e4 <__assert_fail@plt+0xa20>
   117a8:	mov	r0, r5
   117ac:	add	r1, pc, r1
   117b0:	bl	1ae9c <__assert_fail@plt+0x9ed8>
   117b4:	b	115f0 <__assert_fail@plt+0x62c>
   117b8:	ldr	r1, [pc, #552]	; 119e8 <__assert_fail@plt+0xa24>
   117bc:	mov	r2, #1
   117c0:	add	r1, pc, r1
   117c4:	mov	r0, r5
   117c8:	bl	1ae00 <__assert_fail@plt+0x9e3c>
   117cc:	b	115e4 <__assert_fail@plt+0x620>
   117d0:	ldr	r1, [pc, #532]	; 119ec <__assert_fail@plt+0xa28>
   117d4:	mov	r2, #0
   117d8:	add	r1, pc, r1
   117dc:	mov	r0, r5
   117e0:	bl	1ae00 <__assert_fail@plt+0x9e3c>
   117e4:	b	115d0 <__assert_fail@plt+0x60c>
   117e8:	mov	r1, r5
   117ec:	mov	r0, r4
   117f0:	bl	1c3fc <__assert_fail@plt+0xb438>
   117f4:	b	1167c <__assert_fail@plt+0x6b8>
   117f8:	ldr	r0, [pc, #496]	; 119f0 <__assert_fail@plt+0xa2c>
   117fc:	mov	r1, sl
   11800:	add	r0, pc, r0
   11804:	bl	11c00 <__assert_fail@plt+0xc3c>
   11808:	mov	r0, r5
   1180c:	bl	19054 <__assert_fail@plt+0x8090>
   11810:	mov	r5, r0
   11814:	b	1153c <__assert_fail@plt+0x578>
   11818:	bl	10e8c <__errno_location@plt>
   1181c:	ldr	r0, [r0]
   11820:	bl	10e14 <strerror@plt>
   11824:	ldr	r1, [sp, #20]
   11828:	mov	r2, r0
   1182c:	ldr	r0, [pc, #448]	; 119f4 <__assert_fail@plt+0xa30>
   11830:	add	r0, pc, r0
   11834:	bl	11c00 <__assert_fail@plt+0xc3c>
   11838:	ldr	r2, [sp, #40]	; 0x28
   1183c:	mov	r1, r5
   11840:	mov	r0, r4
   11844:	bl	173c4 <__assert_fail@plt+0x6400>
   11848:	b	1167c <__assert_fail@plt+0x6b8>
   1184c:	ldr	r2, [sp, #40]	; 0x28
   11850:	mov	r1, r5
   11854:	mov	r0, r4
   11858:	bl	17c80 <__assert_fail@plt+0x6cbc>
   1185c:	b	1167c <__assert_fail@plt+0x6b8>
   11860:	ldr	r0, [pc, #400]	; 119f8 <__assert_fail@plt+0xa34>
   11864:	mov	r1, fp
   11868:	add	r0, pc, r0
   1186c:	bl	11c00 <__assert_fail@plt+0xc3c>
   11870:	ldr	r1, [pc, #388]	; 119fc <__assert_fail@plt+0xa38>
   11874:	mov	r0, r5
   11878:	add	r1, pc, r1
   1187c:	bl	10d3c <fopen@plt>
   11880:	subs	r6, r0, #0
   11884:	beq	11724 <__assert_fail@plt+0x760>
   11888:	mov	r3, r6
   1188c:	mov	r2, #1
   11890:	mov	r1, #4
   11894:	add	r0, sp, #68	; 0x44
   11898:	bl	10de4 <fread@plt>
   1189c:	cmp	r0, #1
   118a0:	mov	r0, r6
   118a4:	beq	118d4 <__assert_fail@plt+0x910>
   118a8:	ldr	sl, [pc, #336]	; 11a00 <__assert_fail@plt+0xa3c>
   118ac:	bl	10ef8 <fclose@plt>
   118b0:	add	sl, pc, sl
   118b4:	b	114d8 <__assert_fail@plt+0x514>
   118b8:	ldr	r0, [pc, #324]	; 11a04 <__assert_fail@plt+0xa40>
   118bc:	ldr	r1, [sp, #60]	; 0x3c
   118c0:	add	r0, pc, r0
   118c4:	bl	11c00 <__assert_fail@plt+0xc3c>
   118c8:	ldr	sl, [pc, #312]	; 11a08 <__assert_fail@plt+0xa44>
   118cc:	add	sl, pc, sl
   118d0:	b	114d8 <__assert_fail@plt+0x514>
   118d4:	bl	10ef8 <fclose@plt>
   118d8:	ldr	r3, [sp, #68]	; 0x44
   118dc:	ldr	r1, [pc, #296]	; 11a0c <__assert_fail@plt+0xa48>
   118e0:	lsr	r2, r3, #24
   118e4:	lsl	r0, r3, #8
   118e8:	orr	r2, r2, r3, lsl #24
   118ec:	and	r0, r0, #16711680	; 0xff0000
   118f0:	lsr	r3, r3, #8
   118f4:	orr	r2, r2, r0
   118f8:	and	r3, r3, #65280	; 0xff00
   118fc:	orr	r3, r2, r3
   11900:	cmp	r3, r1
   11904:	beq	11920 <__assert_fail@plt+0x95c>
   11908:	ldr	r1, [pc, #256]	; 11a10 <__assert_fail@plt+0xa4c>
   1190c:	mov	r0, r5
   11910:	add	r1, pc, r1
   11914:	bl	11b08 <__assert_fail@plt+0xb44>
   11918:	mov	sl, r0
   1191c:	b	114d8 <__assert_fail@plt+0x514>
   11920:	ldr	sl, [pc, #236]	; 11a14 <__assert_fail@plt+0xa50>
   11924:	add	sl, pc, sl
   11928:	b	114d8 <__assert_fail@plt+0x514>
   1192c:	andeq	r5, r2, r4, lsr #29
   11930:	andeq	r0, r0, r4, lsl r1
   11934:	andeq	r0, r0, r0, asr #2
   11938:	andeq	r0, r0, r8, lsl #2
   1193c:	andeq	r0, r0, r0, ror r1
   11940:	andeq	r0, r0, r4, lsr #2
   11944:	andeq	r0, r0, ip, lsl #2
   11948:			; <UNDEFINED> instruction: 0x000119b4
   1194c:	andeq	r5, r2, ip, ror #19
   11950:	andeq	r0, r1, r8, ror #10
   11954:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   11958:	andeq	r0, r0, ip, ror #2
   1195c:	andeq	r0, r1, ip, lsr #8
   11960:	andeq	r0, r1, r0, lsl #7
   11964:	andeq	r0, r0, r4, lsl #2
   11968:	andeq	r0, r0, ip, asr r1
   1196c:	andeq	r0, r0, r0, lsl r1
   11970:	muleq	r2, r4, r6
   11974:	andeq	r0, r1, ip, lsl #4
   11978:	andeq	r5, r2, r8, ror #12
   1197c:	ldrdeq	r0, [r1], -ip
   11980:	andeq	r0, r1, r0, lsr #5
   11984:	andeq	r0, r0, r0, lsr #2
   11988:	andeq	r0, r1, r8, asr r2
   1198c:	andeq	r0, r1, r8, asr r2
   11990:	andeq	r0, r0, ip, lsr #2
   11994:	andeq	r0, r1, r0, ror #4
   11998:	andeq	r0, r1, r0, asr r1
   1199c:	andeq	r0, r1, r0, asr r1
   119a0:	andeq	r0, r1, r4, lsl r1
   119a4:	andeq	r2, r1, ip, lsl r2
   119a8:	andeq	r0, r0, r0, asr r1
   119ac:	andeq	r1, r1, ip, lsl r4
   119b0:	andeq	r0, r0, r0, ror #2
   119b4:	andeq	r0, r1, ip
   119b8:	strdeq	pc, [r0], -r8
   119bc:	andeq	r0, r1, ip, asr #2
   119c0:	andeq	r0, r1, r8, lsr r1
   119c4:	andeq	r0, r1, r4
   119c8:	andeq	r1, r1, r8, ror #6
   119cc:	andeq	pc, r0, r4, asr pc	; <UNPREDICTABLE>
   119d0:	andeq	pc, r0, r8, lsl #30
   119d4:	andeq	pc, r0, r4, lsl #31
   119d8:	andeq	r0, r1, r0, lsr #32
   119dc:	strdeq	pc, [r0], -ip
   119e0:			; <UNDEFINED> instruction: 0x0000ffbc
   119e4:			; <UNDEFINED> instruction: 0x0000ffb8
   119e8:	andeq	pc, r0, ip, lsl #31
   119ec:	andeq	pc, r0, ip, ror #30
   119f0:	andeq	pc, r0, r8, lsr #30
   119f4:	andeq	pc, r0, ip, asr #29
   119f8:	andeq	pc, r0, r4, asr #30
   119fc:	andeq	r4, r1, r0, lsl #15
   11a00:	andeq	pc, r0, r0, lsl #27
   11a04:	ldrdeq	pc, [r0], -r8
   11a08:	andeq	pc, r0, ip, lsl #27
   11a0c:	andle	pc, sp, sp, ror #29
   11a10:	andeq	pc, r0, r0, lsr #26
   11a14:	andeq	pc, r0, r0, lsl sp	; <UNPREDICTABLE>
   11a18:	mov	fp, #0
   11a1c:	mov	lr, #0
   11a20:	pop	{r1}		; (ldr r1, [sp], #4)
   11a24:	mov	r2, sp
   11a28:	push	{r2}		; (str r2, [sp, #-4]!)
   11a2c:	push	{r0}		; (str r0, [sp, #-4]!)
   11a30:	ldr	ip, [pc, #16]	; 11a48 <__assert_fail@plt+0xa84>
   11a34:	push	{ip}		; (str ip, [sp, #-4]!)
   11a38:	ldr	r0, [pc, #12]	; 11a4c <__assert_fail@plt+0xa88>
   11a3c:	ldr	r3, [pc, #12]	; 11a50 <__assert_fail@plt+0xa8c>
   11a40:	bl	10e08 <__libc_start_main@plt>
   11a44:	bl	10f7c <abort@plt>
   11a48:	andeq	r1, r2, r8, ror #11
   11a4c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   11a50:	andeq	r1, r2, r8, lsl #11
   11a54:	ldr	r3, [pc, #20]	; 11a70 <__assert_fail@plt+0xaac>
   11a58:	ldr	r2, [pc, #20]	; 11a74 <__assert_fail@plt+0xab0>
   11a5c:	add	r3, pc, r3
   11a60:	ldr	r2, [r3, r2]
   11a64:	cmp	r2, #0
   11a68:	bxeq	lr
   11a6c:	b	10e2c <__gmon_start__@plt>
   11a70:	andeq	r5, r2, r8, lsr #8
   11a74:	andeq	r0, r0, r8, asr #2
   11a78:	ldr	r0, [pc, #24]	; 11a98 <__assert_fail@plt+0xad4>
   11a7c:	ldr	r3, [pc, #24]	; 11a9c <__assert_fail@plt+0xad8>
   11a80:	cmp	r3, r0
   11a84:	bxeq	lr
   11a88:	ldr	r3, [pc, #16]	; 11aa0 <__assert_fail@plt+0xadc>
   11a8c:	cmp	r3, #0
   11a90:	bxeq	lr
   11a94:	bx	r3
   11a98:	andeq	r7, r3, r4, lsr sl
   11a9c:	andeq	r7, r3, r4, lsr sl
   11aa0:	andeq	r0, r0, r0
   11aa4:	ldr	r0, [pc, #36]	; 11ad0 <__assert_fail@plt+0xb0c>
   11aa8:	ldr	r1, [pc, #36]	; 11ad4 <__assert_fail@plt+0xb10>
   11aac:	sub	r1, r1, r0
   11ab0:	asr	r1, r1, #2
   11ab4:	add	r1, r1, r1, lsr #31
   11ab8:	asrs	r1, r1, #1
   11abc:	bxeq	lr
   11ac0:	ldr	r3, [pc, #16]	; 11ad8 <__assert_fail@plt+0xb14>
   11ac4:	cmp	r3, #0
   11ac8:	bxeq	lr
   11acc:	bx	r3
   11ad0:	andeq	r7, r3, r4, lsr sl
   11ad4:	andeq	r7, r3, r4, lsr sl
   11ad8:	andeq	r0, r0, r0
   11adc:	push	{r4, lr}
   11ae0:	ldr	r4, [pc, #24]	; 11b00 <__assert_fail@plt+0xb3c>
   11ae4:	ldrb	r3, [r4]
   11ae8:	cmp	r3, #0
   11aec:	popne	{r4, pc}
   11af0:	bl	11a78 <__assert_fail@plt+0xab4>
   11af4:	mov	r3, #1
   11af8:	strb	r3, [r4]
   11afc:	pop	{r4, pc}
   11b00:	andeq	r7, r3, r8, lsr sl
   11b04:	b	11aa4 <__assert_fail@plt+0xae0>
   11b08:	push	{r4, r5, r6, lr}
   11b0c:	mov	r4, r1
   11b10:	mov	r1, #46	; 0x2e
   11b14:	bl	10f1c <strrchr@plt>
   11b18:	subs	r5, r0, #0
   11b1c:	beq	11b4c <__assert_fail@plt+0xb88>
   11b20:	ldr	r1, [pc, #68]	; 11b6c <__assert_fail@plt+0xba8>
   11b24:	add	r1, pc, r1
   11b28:	bl	10db4 <strcasecmp@plt>
   11b2c:	cmp	r0, #0
   11b30:	beq	11b54 <__assert_fail@plt+0xb90>
   11b34:	ldr	r1, [pc, #52]	; 11b70 <__assert_fail@plt+0xbac>
   11b38:	mov	r0, r5
   11b3c:	add	r1, pc, r1
   11b40:	bl	10db4 <strcasecmp@plt>
   11b44:	cmp	r0, #0
   11b48:	beq	11b60 <__assert_fail@plt+0xb9c>
   11b4c:	mov	r0, r4
   11b50:	pop	{r4, r5, r6, pc}
   11b54:	ldr	r0, [pc, #24]	; 11b74 <__assert_fail@plt+0xbb0>
   11b58:	add	r0, pc, r0
   11b5c:	pop	{r4, r5, r6, pc}
   11b60:	ldr	r0, [pc, #16]	; 11b78 <__assert_fail@plt+0xbb4>
   11b64:	add	r0, pc, r0
   11b68:	pop	{r4, r5, r6, pc}
   11b6c:	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
   11b70:	andeq	pc, r0, r4, lsl #22
   11b74:	ldrdeq	pc, [r0], -r8
   11b78:	ldrdeq	pc, [r0], -r0
   11b7c:	push	{r4, r5, r6, lr}
   11b80:	mov	r5, r0
   11b84:	mov	r0, r1
   11b88:	ldr	r1, [r5, #4]
   11b8c:	bl	1c660 <__assert_fail@plt+0xb69c>
   11b90:	ldr	r4, [r5, #4]
   11b94:	mov	r1, #64	; 0x40
   11b98:	str	r0, [r5, #24]
   11b9c:	mov	r0, r4
   11ba0:	bl	10e80 <strchr@plt>
   11ba4:	cmp	r0, #0
   11ba8:	subne	r0, r0, r4
   11bac:	beq	11bf4 <__assert_fail@plt+0xc30>
   11bb0:	ldr	r4, [r5, #12]
   11bb4:	str	r0, [r5, #28]
   11bb8:	cmp	r4, #0
   11bbc:	popeq	{r4, r5, r6, pc}
   11bc0:	ldrb	r3, [r4]
   11bc4:	cmp	r3, #0
   11bc8:	beq	11be4 <__assert_fail@plt+0xc20>
   11bcc:	ldr	r4, [r4, #20]
   11bd0:	cmp	r4, #0
   11bd4:	popeq	{r4, r5, r6, pc}
   11bd8:	ldrb	r3, [r4]
   11bdc:	cmp	r3, #0
   11be0:	bne	11bcc <__assert_fail@plt+0xc08>
   11be4:	ldr	r1, [r5, #24]
   11be8:	mov	r0, r4
   11bec:	bl	11b7c <__assert_fail@plt+0xbb8>
   11bf0:	b	11bcc <__assert_fail@plt+0xc08>
   11bf4:	mov	r0, r4
   11bf8:	bl	10e74 <strlen@plt>
   11bfc:	b	11bb0 <__assert_fail@plt+0xbec>
   11c00:	ldr	ip, [pc, #100]	; 11c6c <__assert_fail@plt+0xca8>
   11c04:	push	{r0, r1, r2, r3}
   11c08:	add	ip, pc, ip
   11c0c:	ldr	r2, [pc, #92]	; 11c70 <__assert_fail@plt+0xcac>
   11c10:	push	{lr}		; (str lr, [sp, #-4]!)
   11c14:	sub	sp, sp, #12
   11c18:	ldr	r2, [ip, r2]
   11c1c:	ldr	r3, [pc, #80]	; 11c74 <__assert_fail@plt+0xcb0>
   11c20:	add	r1, sp, #20
   11c24:	str	r1, [sp]
   11c28:	ldr	r1, [r2]
   11c2c:	ldr	r0, [pc, #68]	; 11c78 <__assert_fail@plt+0xcb4>
   11c30:	str	r1, [sp, #4]
   11c34:	ldr	r4, [ip, r3]
   11c38:	ldr	r5, [sp, #16]
   11c3c:	mov	r2, #13
   11c40:	mov	r1, #1
   11c44:	ldr	r3, [r4]
   11c48:	add	r0, pc, r0
   11c4c:	bl	10dcc <fwrite@plt>
   11c50:	ldr	r0, [r4]
   11c54:	mov	r2, r5
   11c58:	ldr	r3, [sp]
   11c5c:	mov	r1, #1
   11c60:	bl	10e20 <__vfprintf_chk@plt>
   11c64:	mov	r0, #1
   11c68:	bl	10e5c <exit@plt>
   11c6c:	andeq	r5, r2, ip, ror r2
   11c70:	andeq	r0, r0, r4, lsl r1
   11c74:	andeq	r0, r0, ip, lsr r1
   11c78:	andeq	pc, r0, r0, lsl #20
   11c7c:	ldr	r3, [r0, #4]
   11c80:	push	{r4, r5, r6, lr}
   11c84:	cmp	r3, #0
   11c88:	mov	r5, r0
   11c8c:	mov	r6, r1
   11c90:	mov	r4, r2
   11c94:	beq	11c9c <__assert_fail@plt+0xcd8>
   11c98:	blx	r3
   11c9c:	ldr	r4, [r4, #12]
   11ca0:	cmp	r4, #0
   11ca4:	popeq	{r4, r5, r6, pc}
   11ca8:	ldrb	r3, [r4]
   11cac:	cmp	r3, #0
   11cb0:	beq	11ccc <__assert_fail@plt+0xd08>
   11cb4:	ldr	r4, [r4, #20]
   11cb8:	cmp	r4, #0
   11cbc:	popeq	{r4, r5, r6, pc}
   11cc0:	ldrb	r3, [r4]
   11cc4:	cmp	r3, #0
   11cc8:	bne	11cb4 <__assert_fail@plt+0xcf0>
   11ccc:	mov	r2, r4
   11cd0:	mov	r1, r6
   11cd4:	mov	r0, r5
   11cd8:	bl	11c7c <__assert_fail@plt+0xcb8>
   11cdc:	b	11cb4 <__assert_fail@plt+0xcf0>
   11ce0:	push	{r4, r5, r6, r7, r8, lr}
   11ce4:	subs	r7, r1, #0
   11ce8:	mov	r4, r0
   11cec:	mov	r6, r2
   11cf0:	beq	11d50 <__assert_fail@plt+0xd8c>
   11cf4:	ldrb	r3, [r0, #12]
   11cf8:	cmp	r3, #0
   11cfc:	bne	11d50 <__assert_fail@plt+0xd8c>
   11d00:	ldr	r3, [r4, #24]
   11d04:	cmp	r3, #0
   11d08:	movgt	r5, #0
   11d0c:	ble	11d34 <__assert_fail@plt+0xd70>
   11d10:	ldr	r3, [r4, #28]
   11d14:	mov	r2, r6
   11d18:	mov	r1, r7
   11d1c:	ldr	r0, [r3, r5, lsl #2]
   11d20:	bl	11ce0 <__assert_fail@plt+0xd1c>
   11d24:	ldr	r3, [r4, #24]
   11d28:	add	r5, r5, #1
   11d2c:	cmp	r3, r5
   11d30:	bgt	11d10 <__assert_fail@plt+0xd4c>
   11d34:	ldrb	r3, [r4, #13]
   11d38:	ldrb	r2, [r4, #12]
   11d3c:	orr	r6, r6, r3
   11d40:	strb	r6, [r4, #13]
   11d44:	orr	r7, r7, r2
   11d48:	strb	r7, [r4, #12]
   11d4c:	pop	{r4, r5, r6, r7, r8, pc}
   11d50:	cmp	r6, #0
   11d54:	ldrb	r3, [r4, #13]
   11d58:	beq	11d38 <__assert_fail@plt+0xd74>
   11d5c:	cmp	r3, #0
   11d60:	bne	11d38 <__assert_fail@plt+0xd74>
   11d64:	b	11d00 <__assert_fail@plt+0xd3c>
   11d68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d6c:	subs	r9, r1, #0
   11d70:	mov	r6, r0
   11d74:	mov	r8, r2
   11d78:	beq	11dd8 <__assert_fail@plt+0xe14>
   11d7c:	ldrb	r3, [r0, #12]
   11d80:	cmp	r3, #0
   11d84:	beq	11dd8 <__assert_fail@plt+0xe14>
   11d88:	ldr	sl, [pc, #164]	; 11e34 <__assert_fail@plt+0xe70>
   11d8c:	ldr	r5, [pc, #164]	; 11e38 <__assert_fail@plt+0xe74>
   11d90:	add	sl, pc, sl
   11d94:	add	r5, pc, r5
   11d98:	add	r7, sl, #256	; 0x100
   11d9c:	ldr	r2, [r5, #24]
   11da0:	cmp	r2, #0
   11da4:	movgt	r4, #0
   11da8:	ble	11dc8 <__assert_fail@plt+0xe04>
   11dac:	ldr	r3, [r5, #28]
   11db0:	ldr	r3, [r3, r4, lsl #2]
   11db4:	add	r4, r4, #1
   11db8:	cmp	r3, r6
   11dbc:	beq	11e14 <__assert_fail@plt+0xe50>
   11dc0:	cmp	r2, r4
   11dc4:	bgt	11dac <__assert_fail@plt+0xde8>
   11dc8:	cmp	r7, sl
   11dcc:	beq	11e2c <__assert_fail@plt+0xe68>
   11dd0:	ldr	r5, [sl, #4]!
   11dd4:	b	11d9c <__assert_fail@plt+0xdd8>
   11dd8:	cmp	r8, #0
   11ddc:	ldrb	r3, [r6, #13]
   11de0:	beq	11dec <__assert_fail@plt+0xe28>
   11de4:	cmp	r3, #0
   11de8:	bne	11d88 <__assert_fail@plt+0xdc4>
   11dec:	ldrb	r2, [r6, #12]
   11df0:	eor	r3, r3, #1
   11df4:	orr	r3, r8, r3
   11df8:	eor	r2, r2, #1
   11dfc:	orr	r2, r9, r2
   11e00:	eor	r3, r3, #1
   11e04:	eor	r2, r2, #1
   11e08:	strb	r3, [r6, #13]
   11e0c:	strb	r2, [r6, #12]
   11e10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e14:	mov	r2, r8
   11e18:	mov	r1, r9
   11e1c:	mov	r0, r5
   11e20:	bl	11d68 <__assert_fail@plt+0xda4>
   11e24:	ldr	r2, [r5, #24]
   11e28:	b	11dc0 <__assert_fail@plt+0xdfc>
   11e2c:	ldrb	r3, [r6, #13]
   11e30:	b	11dec <__assert_fail@plt+0xe28>
   11e34:	muleq	r2, r8, lr
   11e38:	andeq	r5, r2, r0, ror r2
   11e3c:	ldr	ip, [pc, #448]	; 12004 <__assert_fail@plt+0x1040>
   11e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e44:	add	ip, pc, ip
   11e48:	ldr	lr, [pc, #440]	; 12008 <__assert_fail@plt+0x1044>
   11e4c:	sub	sp, sp, #20
   11e50:	mov	r4, r0
   11e54:	ldr	r5, [ip, lr]
   11e58:	ldrb	lr, [r0, #12]
   11e5c:	mov	r7, r2
   11e60:	ldr	r0, [r5]
   11e64:	add	r2, sp, #60	; 0x3c
   11e68:	cmp	lr, #0
   11e6c:	mov	r9, r3
   11e70:	str	r0, [sp, #12]
   11e74:	str	r2, [sp, #8]
   11e78:	ldr	r8, [sp, #56]	; 0x38
   11e7c:	bne	11eec <__assert_fail@plt+0xf28>
   11e80:	ldrb	r6, [r4, #13]
   11e84:	cmp	r6, #0
   11e88:	bne	11ea4 <__assert_fail@plt+0xee0>
   11e8c:	ldr	r2, [sp, #12]
   11e90:	ldr	r3, [r5]
   11e94:	cmp	r2, r3
   11e98:	bne	12000 <__assert_fail@plt+0x103c>
   11e9c:	add	sp, sp, #20
   11ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ea4:	ldr	r3, [pc, #352]	; 1200c <__assert_fail@plt+0x1048>
   11ea8:	ldr	r3, [ip, r3]
   11eac:	ldr	r3, [r3]
   11eb0:	cmp	r3, #1
   11eb4:	bgt	11e8c <__assert_fail@plt+0xec8>
   11eb8:	ldr	fp, [r1, #16]
   11ebc:	ldr	r3, [pc, #332]	; 12010 <__assert_fail@plt+0x104c>
   11ec0:	ldr	r1, [pc, #332]	; 12014 <__assert_fail@plt+0x1050>
   11ec4:	mov	r0, fp
   11ec8:	add	r1, pc, r1
   11ecc:	ldr	sl, [ip, r3]
   11ed0:	bl	10d24 <strcmp@plt>
   11ed4:	ldr	r2, [sl]
   11ed8:	cmp	r0, #0
   11edc:	beq	11fe0 <__assert_fail@plt+0x101c>
   11ee0:	ldr	r1, [pc, #304]	; 12018 <__assert_fail@plt+0x1054>
   11ee4:	add	r1, pc, r1
   11ee8:	b	11f3c <__assert_fail@plt+0xf78>
   11eec:	ldr	r3, [pc, #280]	; 1200c <__assert_fail@plt+0x1048>
   11ef0:	ldrb	r6, [r4, #13]
   11ef4:	ldr	r3, [ip, r3]
   11ef8:	ldr	r3, [r3]
   11efc:	cmp	r3, #0
   11f00:	bgt	11e84 <__assert_fail@plt+0xec0>
   11f04:	ldr	fp, [r1, #16]
   11f08:	ldr	r3, [pc, #256]	; 12010 <__assert_fail@plt+0x104c>
   11f0c:	ldr	r1, [pc, #264]	; 1201c <__assert_fail@plt+0x1058>
   11f10:	mov	r0, fp
   11f14:	add	r1, pc, r1
   11f18:	ldr	sl, [ip, r3]
   11f1c:	bl	10d24 <strcmp@plt>
   11f20:	ldr	r2, [sl]
   11f24:	cmp	r0, #0
   11f28:	beq	11fcc <__assert_fail@plt+0x1008>
   11f2c:	cmp	r6, #0
   11f30:	bne	11ff4 <__assert_fail@plt+0x1030>
   11f34:	ldr	r1, [pc, #228]	; 12020 <__assert_fail@plt+0x105c>
   11f38:	add	r1, pc, r1
   11f3c:	ldr	r3, [r4]
   11f40:	mov	r0, r2
   11f44:	ldr	r2, [pc, #216]	; 12024 <__assert_fail@plt+0x1060>
   11f48:	stm	sp, {r1, r3}
   11f4c:	add	r2, pc, r2
   11f50:	mov	r3, fp
   11f54:	mov	r1, #1
   11f58:	bl	10ee0 <__fprintf_chk@plt>
   11f5c:	cmp	r7, #0
   11f60:	beq	11fa8 <__assert_fail@plt+0xfe4>
   11f64:	ldr	r0, [r7, #24]
   11f68:	ldr	r1, [sl]
   11f6c:	bl	10f64 <fputs@plt>
   11f70:	cmp	r9, #0
   11f74:	beq	11f90 <__assert_fail@plt+0xfcc>
   11f78:	ldr	r2, [pc, #168]	; 12028 <__assert_fail@plt+0x1064>
   11f7c:	ldr	r3, [r9, #4]
   11f80:	add	r2, pc, r2
   11f84:	mov	r1, #1
   11f88:	ldr	r0, [sl]
   11f8c:	bl	10ee0 <__fprintf_chk@plt>
   11f90:	ldr	r0, [pc, #148]	; 1202c <__assert_fail@plt+0x1068>
   11f94:	ldr	r3, [sl]
   11f98:	mov	r2, #2
   11f9c:	mov	r1, #1
   11fa0:	add	r0, pc, r0
   11fa4:	bl	10dcc <fwrite@plt>
   11fa8:	mov	r2, r8
   11fac:	ldr	r3, [sp, #8]
   11fb0:	mov	r1, #1
   11fb4:	ldr	r0, [sl]
   11fb8:	bl	10e20 <__vfprintf_chk@plt>
   11fbc:	ldr	r1, [sl]
   11fc0:	mov	r0, #10
   11fc4:	bl	10f28 <fputc@plt>
   11fc8:	b	11e8c <__assert_fail@plt+0xec8>
   11fcc:	ldr	fp, [pc, #92]	; 12030 <__assert_fail@plt+0x106c>
   11fd0:	cmp	r6, #0
   11fd4:	add	fp, pc, fp
   11fd8:	beq	11f34 <__assert_fail@plt+0xf70>
   11fdc:	b	11ff4 <__assert_fail@plt+0x1030>
   11fe0:	ldr	fp, [pc, #76]	; 12034 <__assert_fail@plt+0x1070>
   11fe4:	ldr	r1, [pc, #76]	; 12038 <__assert_fail@plt+0x1074>
   11fe8:	add	fp, pc, fp
   11fec:	add	r1, pc, r1
   11ff0:	b	11f3c <__assert_fail@plt+0xf78>
   11ff4:	ldr	r1, [pc, #64]	; 1203c <__assert_fail@plt+0x1078>
   11ff8:	add	r1, pc, r1
   11ffc:	b	11f3c <__assert_fail@plt+0xf78>
   12000:	bl	10d9c <__stack_chk_fail@plt>
   12004:	andeq	r5, r2, r0, asr #32
   12008:	andeq	r0, r0, r4, lsl r1
   1200c:	andeq	r0, r0, r0, asr #2
   12010:	andeq	r0, r0, ip, lsr r1
   12014:	andeq	r0, r1, r4, asr fp
   12018:			; <UNDEFINED> instruction: 0x0000feb8
   1201c:	andeq	r0, r1, r8, lsl #22
   12020:	andeq	pc, r0, ip, ror #28
   12024:	andeq	pc, r0, r0, ror #28
   12028:	andeq	pc, r0, ip, lsr lr	; <UNPREDICTABLE>
   1202c:	andeq	pc, r0, r0, lsr #28
   12030:			; <UNDEFINED> instruction: 0x0000fdbc
   12034:	andeq	pc, r0, r8, lsr #27
   12038:			; <UNDEFINED> instruction: 0x0000fdb0
   1203c:	andeq	pc, r0, r4, lsr #27
   12040:	ldr	ip, [pc, #36]	; 1206c <__assert_fail@plt+0x10a8>
   12044:	push	{lr}		; (str lr, [sp, #-4]!)
   12048:	sub	sp, sp, #12
   1204c:	add	ip, pc, ip
   12050:	mov	r3, #3
   12054:	str	r3, [r0, #16]
   12058:	mov	r3, #0
   1205c:	str	ip, [sp]
   12060:	bl	11e3c <__assert_fail@plt+0xe78>
   12064:	add	sp, sp, #12
   12068:	pop	{pc}		; (ldr pc, [sp], #4)
   1206c:	andeq	pc, r0, r8, ror sp	; <UNPREDICTABLE>
   12070:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12074:	sub	sp, sp, #8
   12078:	ldr	r5, [r2, #8]
   1207c:	cmp	r5, #0
   12080:	beq	12124 <__assert_fail@plt+0x1160>
   12084:	ldr	sl, [pc, #160]	; 1212c <__assert_fail@plt+0x1168>
   12088:	mov	r8, r1
   1208c:	mov	r6, r0
   12090:	mov	r7, r2
   12094:	add	sl, pc, sl
   12098:	mov	r9, #3
   1209c:	b	120a8 <__assert_fail@plt+0x10e4>
   120a0:	subs	r5, r4, #0
   120a4:	beq	12124 <__assert_fail@plt+0x1160>
   120a8:	ldrb	r3, [r5]
   120ac:	ldr	r4, [r5, #20]
   120b0:	cmp	r3, #0
   120b4:	bne	120a0 <__assert_fail@plt+0x10dc>
   120b8:	cmp	r4, #0
   120bc:	bne	120d0 <__assert_fail@plt+0x110c>
   120c0:	b	12124 <__assert_fail@plt+0x1160>
   120c4:	ldr	r4, [r4, #20]
   120c8:	cmp	r4, #0
   120cc:	beq	12118 <__assert_fail@plt+0x1154>
   120d0:	ldrb	r3, [r4]
   120d4:	cmp	r3, #0
   120d8:	bne	120c4 <__assert_fail@plt+0x1100>
   120dc:	ldr	r1, [r4, #4]
   120e0:	ldr	r0, [r5, #4]
   120e4:	bl	10d24 <strcmp@plt>
   120e8:	cmp	r0, #0
   120ec:	bne	120c4 <__assert_fail@plt+0x1100>
   120f0:	str	r9, [r6, #16]
   120f4:	mov	r3, r5
   120f8:	str	sl, [sp]
   120fc:	mov	r2, r7
   12100:	mov	r1, r8
   12104:	mov	r0, r6
   12108:	bl	11e3c <__assert_fail@plt+0xe78>
   1210c:	ldr	r4, [r4, #20]
   12110:	cmp	r4, #0
   12114:	bne	120d0 <__assert_fail@plt+0x110c>
   12118:	ldr	r4, [r5, #20]
   1211c:	subs	r5, r4, #0
   12120:	bne	120a8 <__assert_fail@plt+0x10e4>
   12124:	add	sp, sp, #8
   12128:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1212c:	andeq	pc, r0, r4, asr #26
   12130:	push	{r4, r5, r6, r7, r8, r9, lr}
   12134:	sub	sp, sp, #12
   12138:	ldr	r5, [r2, #12]
   1213c:	cmp	r5, #0
   12140:	beq	121d0 <__assert_fail@plt+0x120c>
   12144:	ldr	r9, [pc, #140]	; 121d8 <__assert_fail@plt+0x1214>
   12148:	mov	r7, r1
   1214c:	mov	r6, r0
   12150:	add	r9, pc, r9
   12154:	mov	r8, #3
   12158:	b	12164 <__assert_fail@plt+0x11a0>
   1215c:	subs	r5, r4, #0
   12160:	beq	121d0 <__assert_fail@plt+0x120c>
   12164:	ldrb	r3, [r5]
   12168:	ldr	r4, [r5, #20]
   1216c:	cmp	r3, #0
   12170:	bne	1215c <__assert_fail@plt+0x1198>
   12174:	cmp	r4, #0
   12178:	bne	1218c <__assert_fail@plt+0x11c8>
   1217c:	b	121d0 <__assert_fail@plt+0x120c>
   12180:	ldr	r4, [r4, #20]
   12184:	cmp	r4, #0
   12188:	beq	121c4 <__assert_fail@plt+0x1200>
   1218c:	ldr	r1, [r4, #4]
   12190:	ldr	r0, [r5, #4]
   12194:	bl	10d24 <strcmp@plt>
   12198:	subs	r3, r0, #0
   1219c:	bne	12180 <__assert_fail@plt+0x11bc>
   121a0:	str	r8, [r6, #16]
   121a4:	mov	r2, r4
   121a8:	str	r9, [sp]
   121ac:	mov	r1, r7
   121b0:	mov	r0, r6
   121b4:	bl	11e3c <__assert_fail@plt+0xe78>
   121b8:	ldr	r4, [r4, #20]
   121bc:	cmp	r4, #0
   121c0:	bne	1218c <__assert_fail@plt+0x11c8>
   121c4:	ldr	r4, [r5, #20]
   121c8:	subs	r5, r4, #0
   121cc:	bne	12164 <__assert_fail@plt+0x11a0>
   121d0:	add	sp, sp, #12
   121d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   121d8:	andeq	pc, r0, r0, lsr #25
   121dc:	push	{r4, r5, r6, r7, r8, lr}
   121e0:	ldr	r4, [r2, #12]
   121e4:	cmp	r4, #0
   121e8:	popeq	{r4, r5, r6, r7, r8, pc}
   121ec:	ldr	r7, [pc, #204]	; 122c0 <__assert_fail@plt+0x12fc>
   121f0:	ldr	r6, [pc, #204]	; 122c4 <__assert_fail@plt+0x1300>
   121f4:	mov	r5, r2
   121f8:	add	r7, pc, r7
   121fc:	add	r6, pc, r6
   12200:	ldrb	r3, [r4]
   12204:	cmp	r3, #0
   12208:	bne	12290 <__assert_fail@plt+0x12cc>
   1220c:	ldr	r3, [r4, #28]
   12210:	mov	r1, r6
   12214:	cmp	r3, #8
   12218:	mov	r2, r3
   1221c:	bne	12230 <__assert_fail@plt+0x126c>
   12220:	ldr	r0, [r4, #4]
   12224:	bl	10d90 <memcmp@plt>
   12228:	cmp	r0, #0
   1222c:	beq	12244 <__assert_fail@plt+0x1280>
   12230:	mov	r1, r7
   12234:	mov	r0, r4
   12238:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1223c:	cmp	r0, #0
   12240:	beq	12290 <__assert_fail@plt+0x12cc>
   12244:	ldr	r3, [pc, #124]	; 122c8 <__assert_fail@plt+0x1304>
   12248:	ldr	r4, [r5, #16]
   1224c:	add	r3, pc, r3
   12250:	add	r3, r3, #260	; 0x104
   12254:	str	r3, [r5, #48]	; 0x30
   12258:	ldr	r3, [r4, #48]	; 0x30
   1225c:	cmp	r3, #0
   12260:	popne	{r4, r5, r6, r7, r8, pc}
   12264:	ldr	r1, [pc, #96]	; 122cc <__assert_fail@plt+0x1308>
   12268:	ldr	r0, [r4, #4]
   1226c:	add	r1, pc, r1
   12270:	bl	10d24 <strcmp@plt>
   12274:	cmp	r0, #0
   12278:	bne	122a0 <__assert_fail@plt+0x12dc>
   1227c:	ldr	r3, [pc, #76]	; 122d0 <__assert_fail@plt+0x130c>
   12280:	add	r3, pc, r3
   12284:	add	r3, r3, #264	; 0x108
   12288:	str	r3, [r4, #48]	; 0x30
   1228c:	pop	{r4, r5, r6, r7, r8, pc}
   12290:	ldr	r4, [r4, #20]
   12294:	cmp	r4, #0
   12298:	bne	12200 <__assert_fail@plt+0x123c>
   1229c:	pop	{r4, r5, r6, r7, r8, pc}
   122a0:	ldr	r1, [pc, #44]	; 122d4 <__assert_fail@plt+0x1310>
   122a4:	mov	r0, r5
   122a8:	add	r1, pc, r1
   122ac:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   122b0:	cmp	r0, #0
   122b4:	popeq	{r4, r5, r6, r7, r8, pc}
   122b8:	ldr	r4, [r5, #16]
   122bc:	b	1227c <__assert_fail@plt+0x12b8>
   122c0:	andeq	pc, r0, r8, lsl ip	; <UNPREDICTABLE>
   122c4:	andeq	pc, r0, r8, lsl #24
   122c8:	ldrdeq	r4, [r2], -ip
   122cc:			; <UNDEFINED> instruction: 0x0000fbb4
   122d0:	andeq	r4, r2, r8, lsr #19
   122d4:	andeq	r1, r1, ip, asr #4
   122d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122dc:	mov	fp, r1
   122e0:	ldr	r1, [pc, #396]	; 12474 <__assert_fail@plt+0x14b0>
   122e4:	sub	sp, sp, #36	; 0x24
   122e8:	mov	sl, r0
   122ec:	add	r1, pc, r1
   122f0:	mov	r0, r2
   122f4:	mov	r4, r2
   122f8:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   122fc:	subs	r9, r0, #0
   12300:	beq	1235c <__assert_fail@plt+0x1398>
   12304:	ldr	r3, [r4, #16]
   12308:	cmp	r3, #0
   1230c:	beq	12448 <__assert_fail@plt+0x1484>
   12310:	ldr	r5, [r3, #36]	; 0x24
   12314:	ldr	r8, [r3, #40]	; 0x28
   12318:	cmn	r5, #1
   1231c:	ldr	r6, [r4, #36]	; 0x24
   12320:	ldr	r7, [r4, #40]	; 0x28
   12324:	moveq	r5, #2
   12328:	cmn	r8, #1
   1232c:	moveq	r8, #1
   12330:	ldr	r2, [r9, #8]
   12334:	cmn	r6, #1
   12338:	moveq	r6, #2
   1233c:	cmn	r7, #1
   12340:	moveq	r7, #1
   12344:	cmp	r2, #0
   12348:	bne	12364 <__assert_fail@plt+0x13a0>
   1234c:	cmp	r5, r6
   12350:	bne	12404 <__assert_fail@plt+0x1440>
   12354:	cmp	r8, r7
   12358:	bne	123c0 <__assert_fail@plt+0x13fc>
   1235c:	add	sp, sp, #36	; 0x24
   12360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12364:	add	r1, r5, r6
   12368:	add	r1, r1, r7
   1236c:	mov	r0, r2
   12370:	lsl	r1, r1, #2
   12374:	str	r2, [sp, #28]
   12378:	bl	213f4 <__assert_fail@plt+0x10430>
   1237c:	ldr	r2, [sp, #28]
   12380:	cmp	r1, #0
   12384:	beq	1235c <__assert_fail@plt+0x1398>
   12388:	ldr	r0, [pc, #232]	; 12478 <__assert_fail@plt+0x14b4>
   1238c:	mov	ip, #3
   12390:	add	r0, pc, r0
   12394:	stmib	sp, {r2, r5, r6}
   12398:	mov	r3, r9
   1239c:	str	r0, [sp]
   123a0:	str	r7, [sp, #16]
   123a4:	mov	r2, r4
   123a8:	mov	r1, fp
   123ac:	str	ip, [sl, #16]
   123b0:	mov	r0, sl
   123b4:	bl	11e3c <__assert_fail@plt+0xe78>
   123b8:	add	sp, sp, #36	; 0x24
   123bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123c0:	ldr	r3, [r4, #16]
   123c4:	ldr	r0, [pc, #176]	; 1247c <__assert_fail@plt+0x14b8>
   123c8:	str	r8, [sp, #12]
   123cc:	ldr	r2, [r3, #24]
   123d0:	mov	ip, #3
   123d4:	add	r0, pc, r0
   123d8:	str	r2, [sp, #8]
   123dc:	str	r0, [sp]
   123e0:	str	r7, [sp, #4]
   123e4:	mov	r3, r9
   123e8:	mov	r1, fp
   123ec:	mov	r2, r4
   123f0:	str	ip, [sl, #16]
   123f4:	mov	r0, sl
   123f8:	bl	11e3c <__assert_fail@plt+0xe78>
   123fc:	add	sp, sp, #36	; 0x24
   12400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12404:	ldr	r2, [pc, #116]	; 12480 <__assert_fail@plt+0x14bc>
   12408:	str	r5, [sp, #12]
   1240c:	ldr	r3, [r3, #24]
   12410:	add	r2, pc, r2
   12414:	mov	r1, #3
   12418:	str	r3, [sp, #8]
   1241c:	str	r2, [sp]
   12420:	str	r6, [sp, #4]
   12424:	mov	r3, r9
   12428:	str	r1, [sl, #16]
   1242c:	mov	r2, r4
   12430:	mov	r1, fp
   12434:	mov	r0, sl
   12438:	bl	11e3c <__assert_fail@plt+0xe78>
   1243c:	cmp	r8, r7
   12440:	beq	1235c <__assert_fail@plt+0x1398>
   12444:	b	123c0 <__assert_fail@plt+0x13fc>
   12448:	ldr	r0, [pc, #52]	; 12484 <__assert_fail@plt+0x14c0>
   1244c:	mov	ip, #3
   12450:	add	r0, pc, r0
   12454:	str	r0, [sp]
   12458:	mov	r3, r9
   1245c:	mov	r2, r4
   12460:	mov	r1, fp
   12464:	str	ip, [sl, #16]
   12468:	mov	r0, sl
   1246c:	bl	11e3c <__assert_fail@plt+0xe78>
   12470:	b	1235c <__assert_fail@plt+0x1398>
   12474:	andeq	pc, r0, ip, lsr fp	; <UNPREDICTABLE>
   12478:	andeq	pc, r0, r8, asr fp	; <UNPREDICTABLE>
   1247c:	andeq	pc, r0, ip, asr #21
   12480:	andeq	pc, r0, r4, asr #20
   12484:	andeq	pc, r0, r0, ror #19
   12488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1248c:	mov	r8, r1
   12490:	ldr	r1, [pc, #300]	; 125c4 <__assert_fail@plt+0x1600>
   12494:	sub	sp, sp, #16
   12498:	mov	r7, r0
   1249c:	add	r1, pc, r1
   124a0:	mov	r0, r2
   124a4:	mov	r4, r2
   124a8:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   124ac:	subs	r6, r0, #0
   124b0:	beq	12534 <__assert_fail@plt+0x1570>
   124b4:	ldr	r3, [r4, #16]
   124b8:	cmp	r3, #0
   124bc:	beq	1259c <__assert_fail@plt+0x15d8>
   124c0:	ldr	sl, [r6, #8]
   124c4:	cmp	sl, #0
   124c8:	beq	12558 <__assert_fail@plt+0x1594>
   124cc:	ldr	r9, [r3, #36]	; 0x24
   124d0:	ldr	r5, [r3, #40]	; 0x28
   124d4:	cmn	r9, #1
   124d8:	beq	1253c <__assert_fail@plt+0x1578>
   124dc:	cmn	r5, #1
   124e0:	moveq	r5, #1
   124e4:	add	r1, r5, r9
   124e8:	lsls	r1, r1, #2
   124ec:	beq	12500 <__assert_fail@plt+0x153c>
   124f0:	mov	r0, sl
   124f4:	bl	213f4 <__assert_fail@plt+0x10430>
   124f8:	cmp	r1, #0
   124fc:	beq	12534 <__assert_fail@plt+0x1570>
   12500:	ldr	r0, [pc, #192]	; 125c8 <__assert_fail@plt+0x1604>
   12504:	mov	ip, #3
   12508:	add	r0, pc, r0
   1250c:	str	r0, [sp]
   12510:	str	r5, [sp, #12]
   12514:	str	r9, [sp, #8]
   12518:	str	sl, [sp, #4]
   1251c:	mov	r3, r6
   12520:	mov	r2, r4
   12524:	mov	r1, r8
   12528:	str	ip, [r7, #16]
   1252c:	mov	r0, r7
   12530:	bl	11e3c <__assert_fail@plt+0xe78>
   12534:	add	sp, sp, #16
   12538:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1253c:	cmn	r5, #1
   12540:	moveq	r1, #12
   12544:	moveq	r5, #1
   12548:	moveq	r9, #2
   1254c:	beq	124f0 <__assert_fail@plt+0x152c>
   12550:	mov	r9, #2
   12554:	b	124e4 <__assert_fail@plt+0x1520>
   12558:	ldr	r3, [pc, #108]	; 125cc <__assert_fail@plt+0x1608>
   1255c:	mov	r2, #3
   12560:	add	r3, pc, r3
   12564:	str	r3, [sp]
   12568:	mov	r1, r8
   1256c:	str	r2, [r7, #16]
   12570:	mov	r3, r6
   12574:	mov	r2, r4
   12578:	mov	r0, r7
   1257c:	bl	11e3c <__assert_fail@plt+0xe78>
   12580:	ldr	r3, [r4, #16]
   12584:	ldr	sl, [r6, #8]
   12588:	ldr	r9, [r3, #36]	; 0x24
   1258c:	ldr	r5, [r3, #40]	; 0x28
   12590:	cmn	r9, #1
   12594:	bne	124dc <__assert_fail@plt+0x1518>
   12598:	b	1253c <__assert_fail@plt+0x1578>
   1259c:	ldr	r0, [pc, #44]	; 125d0 <__assert_fail@plt+0x160c>
   125a0:	mov	ip, #3
   125a4:	add	r0, pc, r0
   125a8:	str	r0, [sp]
   125ac:	mov	r2, r4
   125b0:	mov	r1, r8
   125b4:	str	ip, [r7, #16]
   125b8:	mov	r0, r7
   125bc:	bl	11e3c <__assert_fail@plt+0xe78>
   125c0:	b	12534 <__assert_fail@plt+0x1570>
   125c4:	andeq	r1, r1, r8, asr r0
   125c8:	muleq	r0, r4, sl
   125cc:	andeq	pc, r0, r8, lsr #20
   125d0:	andeq	pc, r0, r4, asr #19
   125d4:	push	{r4, r5, r6, lr}
   125d8:	mov	r4, r0
   125dc:	sub	sp, sp, #8
   125e0:	mov	r6, r1
   125e4:	mov	r0, r2
   125e8:	ldr	r1, [r4, #8]
   125ec:	mov	r5, r2
   125f0:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   125f4:	subs	r3, r0, #0
   125f8:	beq	12608 <__assert_fail@plt+0x1644>
   125fc:	ldr	r2, [r3, #8]
   12600:	cmp	r2, #4
   12604:	bne	12610 <__assert_fail@plt+0x164c>
   12608:	add	sp, sp, #8
   1260c:	pop	{r4, r5, r6, pc}
   12610:	ldr	r0, [pc, #36]	; 1263c <__assert_fail@plt+0x1678>
   12614:	mov	ip, #3
   12618:	add	r0, pc, r0
   1261c:	str	r0, [sp]
   12620:	mov	r2, r5
   12624:	mov	r1, r6
   12628:	str	ip, [r4, #16]
   1262c:	mov	r0, r4
   12630:	bl	11e3c <__assert_fail@plt+0xe78>
   12634:	add	sp, sp, #8
   12638:	pop	{r4, r5, r6, pc}
   1263c:	ldrdeq	pc, [r0], -r8
   12640:	ldr	r1, [pc, #80]	; 12698 <__assert_fail@plt+0x16d4>
   12644:	mvn	r3, #0
   12648:	push	{r4, lr}
   1264c:	mov	r0, r2
   12650:	str	r3, [r2, #36]	; 0x24
   12654:	str	r3, [r2, #40]	; 0x28
   12658:	add	r1, pc, r1
   1265c:	mov	r4, r2
   12660:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12664:	cmp	r0, #0
   12668:	beq	12674 <__assert_fail@plt+0x16b0>
   1266c:	bl	19dec <__assert_fail@plt+0x8e28>
   12670:	str	r0, [r4, #36]	; 0x24
   12674:	ldr	r1, [pc, #32]	; 1269c <__assert_fail@plt+0x16d8>
   12678:	mov	r0, r4
   1267c:	add	r1, pc, r1
   12680:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12684:	cmp	r0, #0
   12688:	popeq	{r4, pc}
   1268c:	bl	19dec <__assert_fail@plt+0x8e28>
   12690:	str	r0, [r4, #40]	; 0x28
   12694:	pop	{r4, pc}
   12698:			; <UNDEFINED> instruction: 0x0000f9b8
   1269c:	andeq	pc, r0, r4, lsr #19
   126a0:	ldr	r3, [pc, #516]	; 128ac <__assert_fail@plt+0x18e8>
   126a4:	ldr	ip, [pc, #516]	; 128b0 <__assert_fail@plt+0x18ec>
   126a8:	add	r3, pc, r3
   126ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   126b0:	mov	r4, r2
   126b4:	ldr	r5, [r3, ip]
   126b8:	sub	sp, sp, #44	; 0x2c
   126bc:	mov	r7, r0
   126c0:	mov	r0, r2
   126c4:	ldr	r2, [r5]
   126c8:	mov	r8, r1
   126cc:	str	r2, [sp, #36]	; 0x24
   126d0:	bl	19ca0 <__assert_fail@plt+0x8cdc>
   126d4:	ldr	r2, [r4, #16]
   126d8:	cmp	r2, #0
   126dc:	beq	126f8 <__assert_fail@plt+0x1734>
   126e0:	ldr	r3, [pc, #460]	; 128b4 <__assert_fail@plt+0x18f0>
   126e4:	ldr	r2, [r2, #48]	; 0x30
   126e8:	add	r3, pc, r3
   126ec:	add	r3, r3, #268	; 0x10c
   126f0:	cmp	r2, r3
   126f4:	beq	12710 <__assert_fail@plt+0x174c>
   126f8:	ldr	r2, [sp, #36]	; 0x24
   126fc:	ldr	r3, [r5]
   12700:	cmp	r2, r3
   12704:	bne	128a8 <__assert_fail@plt+0x18e4>
   12708:	add	sp, sp, #44	; 0x2c
   1270c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12710:	ldr	r1, [pc, #416]	; 128b8 <__assert_fail@plt+0x18f4>
   12714:	mov	r6, r0
   12718:	add	r1, pc, r1
   1271c:	mov	r0, r4
   12720:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12724:	cmp	r0, #0
   12728:	beq	12854 <__assert_fail@plt+0x1890>
   1272c:	ldr	ip, [r0, #12]
   12730:	ldr	r3, [r4, #16]
   12734:	cmp	ip, #0
   12738:	beq	12804 <__assert_fail@plt+0x1840>
   1273c:	ldr	r3, [r3, #36]	; 0x24
   12740:	cmn	r3, #1
   12744:	beq	127fc <__assert_fail@plt+0x1838>
   12748:	cmp	r3, #0
   1274c:	sub	r0, r3, #1
   12750:	beq	1289c <__assert_fail@plt+0x18d8>
   12754:	mov	lr, #0
   12758:	ldr	r3, [ip], #4
   1275c:	sub	r0, r0, #1
   12760:	cmn	r0, #1
   12764:	lsr	r1, r3, #24
   12768:	lsl	r2, r3, #8
   1276c:	orr	r1, r1, r3, lsl #24
   12770:	and	r2, r2, #16711680	; 0xff0000
   12774:	lsr	r3, r3, #8
   12778:	orr	r2, r1, r2
   1277c:	and	r3, r3, #65280	; 0xff00
   12780:	mov	r1, lr
   12784:	orr	lr, r2, r3
   12788:	bne	12758 <__assert_fail@plt+0x1794>
   1278c:	ldr	r2, [pc, #296]	; 128bc <__assert_fail@plt+0x18f8>
   12790:	mov	r3, #17
   12794:	add	r2, pc, r2
   12798:	add	r9, sp, #16
   1279c:	str	lr, [sp, #8]
   127a0:	str	r1, [sp, #12]
   127a4:	str	r2, [sp]
   127a8:	mov	r1, r3
   127ac:	mov	r2, #1
   127b0:	mov	r0, r9
   127b4:	bl	10fac <__snprintf_chk@plt>
   127b8:	mov	r1, r9
   127bc:	mov	r0, r6
   127c0:	bl	10d24 <strcmp@plt>
   127c4:	cmp	r0, #0
   127c8:	beq	126f8 <__assert_fail@plt+0x1734>
   127cc:	ldr	r3, [pc, #236]	; 128c0 <__assert_fail@plt+0x18fc>
   127d0:	mov	r0, #3
   127d4:	add	r3, pc, r3
   127d8:	str	r3, [sp]
   127dc:	str	r9, [sp, #4]
   127e0:	mov	r2, r4
   127e4:	str	r0, [r7, #16]
   127e8:	mov	r1, r8
   127ec:	mov	r0, r7
   127f0:	mov	r3, #0
   127f4:	bl	11e3c <__assert_fail@plt+0xe78>
   127f8:	b	126f8 <__assert_fail@plt+0x1734>
   127fc:	mov	r0, #1
   12800:	b	12754 <__assert_fail@plt+0x1790>
   12804:	ldr	r3, [r3, #16]
   12808:	cmp	r3, #0
   1280c:	beq	126f8 <__assert_fail@plt+0x1734>
   12810:	ldr	r3, [pc, #172]	; 128c4 <__assert_fail@plt+0x1900>
   12814:	ldr	r2, [r4, #48]	; 0x30
   12818:	add	r3, pc, r3
   1281c:	add	r3, r3, #268	; 0x10c
   12820:	cmp	r2, r3
   12824:	beq	126f8 <__assert_fail@plt+0x1734>
   12828:	ldr	r3, [pc, #152]	; 128c8 <__assert_fail@plt+0x1904>
   1282c:	mov	r0, #3
   12830:	add	r3, pc, r3
   12834:	str	r3, [sp]
   12838:	mov	r2, r4
   1283c:	str	r0, [r7, #16]
   12840:	mov	r1, r8
   12844:	mov	r0, r7
   12848:	mov	r3, #0
   1284c:	bl	11e3c <__assert_fail@plt+0xe78>
   12850:	b	126f8 <__assert_fail@plt+0x1734>
   12854:	ldr	r1, [pc, #112]	; 128cc <__assert_fail@plt+0x1908>
   12858:	mov	r0, r4
   1285c:	add	r1, pc, r1
   12860:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12864:	cmp	r0, #0
   12868:	ldreq	r3, [r4, #16]
   1286c:	beq	12804 <__assert_fail@plt+0x1840>
   12870:	ldr	r2, [r0, #8]
   12874:	ldr	r3, [r4, #16]
   12878:	cmp	r2, #0
   1287c:	beq	12804 <__assert_fail@plt+0x1840>
   12880:	ldr	r2, [r4, #36]	; 0x24
   12884:	ldr	ip, [r0, #12]
   12888:	cmn	r2, #1
   1288c:	lslne	r2, r2, #2
   12890:	moveq	r2, #8
   12894:	add	ip, ip, r2
   12898:	b	12734 <__assert_fail@plt+0x1770>
   1289c:	mov	lr, r3
   128a0:	mov	r1, r3
   128a4:	b	1278c <__assert_fail@plt+0x17c8>
   128a8:	bl	10d9c <__stack_chk_fail@plt>
   128ac:	ldrdeq	r4, [r2], -ip
   128b0:	andeq	r0, r0, r4, lsl r1
   128b4:	andeq	r4, r2, r0, asr #10
   128b8:	ldrdeq	r0, [r1], -ip
   128bc:	andeq	pc, r0, r0, asr #17
   128c0:	andeq	pc, r0, r8, lsl #17
   128c4:	andeq	r4, r2, r0, lsl r4
   128c8:	strdeq	pc, [r0], -ip
   128cc:	andeq	pc, r0, ip, asr #11
   128d0:	ldr	r3, [pc, #596]	; 12b2c <__assert_fail@plt+0x1b68>
   128d4:	ldr	ip, [pc, #596]	; 12b30 <__assert_fail@plt+0x1b6c>
   128d8:	add	r3, pc, r3
   128dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128e0:	mov	r4, r2
   128e4:	ldr	r5, [r3, ip]
   128e8:	sub	sp, sp, #44	; 0x2c
   128ec:	mov	r7, r0
   128f0:	mov	r0, r2
   128f4:	ldr	r2, [r5]
   128f8:	mov	r8, r1
   128fc:	str	r2, [sp, #36]	; 0x24
   12900:	bl	19ca0 <__assert_fail@plt+0x8cdc>
   12904:	ldr	r2, [r4, #16]
   12908:	cmp	r2, #0
   1290c:	beq	12928 <__assert_fail@plt+0x1964>
   12910:	ldr	r3, [pc, #540]	; 12b34 <__assert_fail@plt+0x1b70>
   12914:	ldr	r2, [r2, #48]	; 0x30
   12918:	add	r3, pc, r3
   1291c:	add	r3, r3, #272	; 0x110
   12920:	cmp	r2, r3
   12924:	beq	12940 <__assert_fail@plt+0x197c>
   12928:	ldr	r2, [sp, #36]	; 0x24
   1292c:	ldr	r3, [r5]
   12930:	cmp	r2, r3
   12934:	bne	12b28 <__assert_fail@plt+0x1b64>
   12938:	add	sp, sp, #44	; 0x2c
   1293c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12940:	ldr	r1, [pc, #496]	; 12b38 <__assert_fail@plt+0x1b74>
   12944:	mov	r9, r0
   12948:	add	r1, pc, r1
   1294c:	mov	r0, r4
   12950:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12954:	subs	fp, r0, #0
   12958:	beq	12afc <__assert_fail@plt+0x1b38>
   1295c:	ldr	r6, [fp, #12]
   12960:	ldr	r3, [r6, #4]
   12964:	cmp	r3, #0
   12968:	bne	12978 <__assert_fail@plt+0x19b4>
   1296c:	ldr	r3, [r6, #8]
   12970:	cmp	r3, #0
   12974:	beq	129a0 <__assert_fail@plt+0x19dc>
   12978:	ldr	r3, [pc, #444]	; 12b3c <__assert_fail@plt+0x1b78>
   1297c:	mov	r2, #3
   12980:	add	r3, pc, r3
   12984:	str	r3, [sp]
   12988:	mov	r1, r8
   1298c:	str	r2, [r7, #16]
   12990:	mov	r3, fp
   12994:	mov	r2, r4
   12998:	mov	r0, r7
   1299c:	bl	11e3c <__assert_fail@plt+0xe78>
   129a0:	ldr	r3, [r6]
   129a4:	lsr	r6, r3, #24
   129a8:	lsl	r2, r3, #8
   129ac:	orr	r6, r6, r3, lsl #24
   129b0:	and	r2, r2, #16711680	; 0xff0000
   129b4:	lsr	r3, r3, #8
   129b8:	and	r3, r3, #65280	; 0xff00
   129bc:	orr	r6, r6, r2
   129c0:	orr	r6, r6, r3
   129c4:	tst	r6, #-16777216	; 0xff000000
   129c8:	lsr	sl, r6, #8
   129cc:	lsr	r3, r3, #11
   129d0:	str	r3, [sp, #20]
   129d4:	and	sl, sl, #7
   129d8:	bne	12ad0 <__assert_fail@plt+0x1b0c>
   129dc:	tst	r6, #255	; 0xff
   129e0:	bne	12aa4 <__assert_fail@plt+0x1ae0>
   129e4:	cmp	sl, #0
   129e8:	beq	12a60 <__assert_fail@plt+0x1a9c>
   129ec:	add	r6, sp, #28
   129f0:	ldr	r2, [pc, #328]	; 12b40 <__assert_fail@plt+0x1b7c>
   129f4:	ldr	r1, [sp, #20]
   129f8:	mov	r3, #5
   129fc:	add	r2, pc, r2
   12a00:	str	r1, [sp, #4]
   12a04:	str	r2, [sp]
   12a08:	mov	r1, r3
   12a0c:	mov	r2, #1
   12a10:	str	sl, [sp, #8]
   12a14:	mov	r0, r6
   12a18:	bl	10fac <__snprintf_chk@plt>
   12a1c:	mov	r1, r6
   12a20:	mov	r0, r9
   12a24:	bl	10d24 <strcmp@plt>
   12a28:	cmp	r0, #0
   12a2c:	beq	12928 <__assert_fail@plt+0x1964>
   12a30:	ldr	r3, [pc, #268]	; 12b44 <__assert_fail@plt+0x1b80>
   12a34:	mov	r0, #3
   12a38:	add	r3, pc, r3
   12a3c:	str	r3, [sp]
   12a40:	str	r6, [sp, #4]
   12a44:	mov	r2, r4
   12a48:	str	r0, [r7, #16]
   12a4c:	mov	r1, r8
   12a50:	mov	r0, r7
   12a54:	mov	r3, #0
   12a58:	bl	11e3c <__assert_fail@plt+0xe78>
   12a5c:	b	12928 <__assert_fail@plt+0x1964>
   12a60:	ldr	r2, [pc, #224]	; 12b48 <__assert_fail@plt+0x1b84>
   12a64:	ldr	r1, [sp, #20]
   12a68:	mov	r3, #5
   12a6c:	add	r2, pc, r2
   12a70:	add	r6, sp, #28
   12a74:	str	r1, [sp, #4]
   12a78:	str	r2, [sp]
   12a7c:	mov	r1, r3
   12a80:	mov	r2, #1
   12a84:	mov	r0, r6
   12a88:	bl	10fac <__snprintf_chk@plt>
   12a8c:	mov	r1, r6
   12a90:	mov	r0, r9
   12a94:	bl	10d24 <strcmp@plt>
   12a98:	cmp	r0, #0
   12a9c:	bne	129f0 <__assert_fail@plt+0x1a2c>
   12aa0:	b	12928 <__assert_fail@plt+0x1964>
   12aa4:	ldr	r2, [pc, #160]	; 12b4c <__assert_fail@plt+0x1b88>
   12aa8:	mov	r1, #3
   12aac:	add	r2, pc, r2
   12ab0:	str	r2, [sp]
   12ab4:	mov	r3, fp
   12ab8:	str	r1, [r7, #16]
   12abc:	mov	r2, r4
   12ac0:	mov	r1, r8
   12ac4:	mov	r0, r7
   12ac8:	bl	11e3c <__assert_fail@plt+0xe78>
   12acc:	b	129e4 <__assert_fail@plt+0x1a20>
   12ad0:	ldr	r3, [pc, #120]	; 12b50 <__assert_fail@plt+0x1b8c>
   12ad4:	mov	r2, #3
   12ad8:	add	r3, pc, r3
   12adc:	str	r3, [sp]
   12ae0:	mov	r1, r8
   12ae4:	str	r2, [r7, #16]
   12ae8:	mov	r3, fp
   12aec:	mov	r2, r4
   12af0:	mov	r0, r7
   12af4:	bl	11e3c <__assert_fail@plt+0xe78>
   12af8:	b	129dc <__assert_fail@plt+0x1a18>
   12afc:	ldr	r0, [pc, #80]	; 12b54 <__assert_fail@plt+0x1b90>
   12b00:	mov	ip, #3
   12b04:	add	r0, pc, r0
   12b08:	str	r0, [sp]
   12b0c:	mov	r3, fp
   12b10:	mov	r2, r4
   12b14:	mov	r1, r8
   12b18:	str	ip, [r7, #16]
   12b1c:	mov	r0, r7
   12b20:	bl	11e3c <__assert_fail@plt+0xe78>
   12b24:	b	12928 <__assert_fail@plt+0x1964>
   12b28:	bl	10d9c <__stack_chk_fail@plt>
   12b2c:	andeq	r4, r2, ip, lsr #11
   12b30:	andeq	r0, r0, r4, lsl r1
   12b34:	andeq	r4, r2, r0, lsl r3
   12b38:	andeq	r0, r1, ip, lsr #23
   12b3c:	andeq	pc, r0, ip, lsr #14
   12b40:	andeq	pc, r0, ip, asr #14
   12b44:	andeq	pc, r0, ip, lsl r7	; <UNPREDICTABLE>
   12b48:	andeq	pc, r0, r4, ror #13
   12b4c:	andeq	pc, r0, r4, ror #12
   12b50:	andeq	pc, r0, ip, lsl #12
   12b54:	andeq	pc, r0, ip, lsl #11
   12b58:	ldr	r3, [pc, #464]	; 12d30 <__assert_fail@plt+0x1d6c>
   12b5c:	ldr	ip, [pc, #464]	; 12d34 <__assert_fail@plt+0x1d70>
   12b60:	add	r3, pc, r3
   12b64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b68:	mov	r5, r2
   12b6c:	ldr	r7, [r3, ip]
   12b70:	sub	sp, sp, #24
   12b74:	mov	r6, r0
   12b78:	mov	r0, r2
   12b7c:	ldr	r2, [r7]
   12b80:	mov	r8, r1
   12b84:	str	r2, [sp, #20]
   12b88:	bl	19ca0 <__assert_fail@plt+0x8cdc>
   12b8c:	ldr	r1, [pc, #420]	; 12d38 <__assert_fail@plt+0x1d74>
   12b90:	add	r1, pc, r1
   12b94:	mov	r9, r0
   12b98:	mov	r0, r5
   12b9c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12ba0:	clz	r3, r9
   12ba4:	lsr	r3, r3, #5
   12ba8:	cmp	r0, #0
   12bac:	movne	r4, r3
   12bb0:	moveq	r4, #1
   12bb4:	cmp	r4, #0
   12bb8:	bne	12bfc <__assert_fail@plt+0x1c38>
   12bbc:	ldr	r3, [r0, #12]
   12bc0:	cmp	r3, #0
   12bc4:	beq	12bd4 <__assert_fail@plt+0x1c10>
   12bc8:	ldr	r3, [r0, #8]
   12bcc:	cmp	r3, #4
   12bd0:	beq	12c14 <__assert_fail@plt+0x1c50>
   12bd4:	ldr	r3, [pc, #352]	; 12d3c <__assert_fail@plt+0x1d78>
   12bd8:	mov	r0, #3
   12bdc:	add	r3, pc, r3
   12be0:	str	r3, [sp]
   12be4:	mov	r2, r5
   12be8:	str	r0, [r6, #16]
   12bec:	mov	r1, r8
   12bf0:	mov	r0, r6
   12bf4:	mov	r3, #0
   12bf8:	bl	11e3c <__assert_fail@plt+0xe78>
   12bfc:	ldr	r2, [sp, #20]
   12c00:	ldr	r3, [r7]
   12c04:	cmp	r2, r3
   12c08:	bne	12d2c <__assert_fail@plt+0x1d68>
   12c0c:	add	sp, sp, #24
   12c10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c14:	bl	19dec <__assert_fail@plt+0x8e28>
   12c18:	ldr	r2, [pc, #288]	; 12d40 <__assert_fail@plt+0x1d7c>
   12c1c:	mov	r3, #9
   12c20:	add	r2, pc, r2
   12c24:	add	sl, sp, #8
   12c28:	mov	r1, r3
   12c2c:	str	r2, [sp]
   12c30:	mov	r2, #1
   12c34:	str	r0, [sp, #4]
   12c38:	mov	r0, sl
   12c3c:	bl	10fac <__snprintf_chk@plt>
   12c40:	mov	r1, sl
   12c44:	mov	r0, r9
   12c48:	bl	10d24 <strcmp@plt>
   12c4c:	cmp	r0, #0
   12c50:	bne	12cfc <__assert_fail@plt+0x1d38>
   12c54:	ldr	r3, [r5, #16]
   12c58:	ldr	r2, [r3, #36]	; 0x24
   12c5c:	cmp	r2, #1
   12c60:	beq	12cac <__assert_fail@plt+0x1ce8>
   12c64:	ldr	r1, [pc, #216]	; 12d44 <__assert_fail@plt+0x1d80>
   12c68:	mov	r3, #3
   12c6c:	str	r3, [r6, #16]
   12c70:	add	r1, pc, r1
   12c74:	mov	r0, r5
   12c78:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12c7c:	ldr	r1, [r5, #16]
   12c80:	ldr	r3, [pc, #192]	; 12d48 <__assert_fail@plt+0x1d84>
   12c84:	mov	r2, r5
   12c88:	ldr	r1, [r1, #36]	; 0x24
   12c8c:	add	r3, pc, r3
   12c90:	str	r3, [sp]
   12c94:	str	r1, [sp, #4]
   12c98:	mov	r1, r8
   12c9c:	mov	r3, r0
   12ca0:	mov	r0, r6
   12ca4:	bl	11e3c <__assert_fail@plt+0xe78>
   12ca8:	ldr	r3, [r5, #16]
   12cac:	ldr	r3, [r3, #40]	; 0x28
   12cb0:	cmp	r3, #0
   12cb4:	beq	12bfc <__assert_fail@plt+0x1c38>
   12cb8:	ldr	r1, [pc, #140]	; 12d4c <__assert_fail@plt+0x1d88>
   12cbc:	mov	r3, #3
   12cc0:	str	r3, [r6, #16]
   12cc4:	add	r1, pc, r1
   12cc8:	mov	r0, r5
   12ccc:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12cd0:	ldr	r2, [r5, #16]
   12cd4:	ldr	r3, [pc, #116]	; 12d50 <__assert_fail@plt+0x1d8c>
   12cd8:	mov	r1, r8
   12cdc:	ldr	ip, [r2, #40]	; 0x28
   12ce0:	add	r3, pc, r3
   12ce4:	mov	r2, r5
   12ce8:	stm	sp, {r3, ip}
   12cec:	mov	r3, r0
   12cf0:	mov	r0, r6
   12cf4:	bl	11e3c <__assert_fail@plt+0xe78>
   12cf8:	b	12bfc <__assert_fail@plt+0x1c38>
   12cfc:	ldr	r2, [pc, #80]	; 12d54 <__assert_fail@plt+0x1d90>
   12d00:	mov	r1, #3
   12d04:	add	r2, pc, r2
   12d08:	str	r2, [sp]
   12d0c:	str	sl, [sp, #4]
   12d10:	mov	r3, r4
   12d14:	str	r1, [r6, #16]
   12d18:	mov	r2, r5
   12d1c:	mov	r1, r8
   12d20:	mov	r0, r6
   12d24:	bl	11e3c <__assert_fail@plt+0xe78>
   12d28:	b	12c54 <__assert_fail@plt+0x1c90>
   12d2c:	bl	10d9c <__stack_chk_fail@plt>
   12d30:	andeq	r4, r2, r4, lsr #6
   12d34:	andeq	r0, r0, r4, lsl r1
   12d38:	andeq	r0, r1, r4, ror #18
   12d3c:	andeq	pc, r0, r8, lsr #11
   12d40:	andeq	pc, r0, r0, lsr r5	; <UNPREDICTABLE>
   12d44:	andeq	pc, r0, r0, lsr #7
   12d48:	andeq	pc, r0, ip, asr #10
   12d4c:	andeq	pc, r0, ip, asr r3	; <UNPREDICTABLE>
   12d50:	andeq	pc, r0, r8, lsr #10
   12d54:	andeq	pc, r0, r4, lsr #9
   12d58:	push	{r4, r5, r6, r7, r8, lr}
   12d5c:	mov	r6, r1
   12d60:	ldr	r1, [pc, #144]	; 12df8 <__assert_fail@plt+0x1e34>
   12d64:	sub	sp, sp, #8
   12d68:	mov	r7, r0
   12d6c:	add	r1, pc, r1
   12d70:	mov	r0, r2
   12d74:	mov	r4, r2
   12d78:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12d7c:	subs	r8, r0, #0
   12d80:	beq	12db4 <__assert_fail@plt+0x1df0>
   12d84:	bl	19dec <__assert_fail@plt+0x8e28>
   12d88:	add	r3, r0, #1
   12d8c:	cmp	r3, #1
   12d90:	bls	12db4 <__assert_fail@plt+0x1df0>
   12d94:	mov	r1, r0
   12d98:	ldr	r0, [r6, #12]
   12d9c:	bl	1a2d4 <__assert_fail@plt+0x9310>
   12da0:	subs	r5, r0, #0
   12da4:	beq	12dc4 <__assert_fail@plt+0x1e00>
   12da8:	mov	r0, r5
   12dac:	add	sp, sp, #8
   12db0:	pop	{r4, r5, r6, r7, r8, pc}
   12db4:	mov	r5, #0
   12db8:	mov	r0, r5
   12dbc:	add	sp, sp, #8
   12dc0:	pop	{r4, r5, r6, r7, r8, pc}
   12dc4:	ldr	r0, [pc, #48]	; 12dfc <__assert_fail@plt+0x1e38>
   12dc8:	mov	ip, #3
   12dcc:	add	r0, pc, r0
   12dd0:	str	r0, [sp]
   12dd4:	mov	r3, r8
   12dd8:	mov	r0, r7
   12ddc:	mov	r2, r4
   12de0:	mov	r1, r6
   12de4:	str	ip, [r7, #16]
   12de8:	bl	11e3c <__assert_fail@plt+0xe78>
   12dec:	mov	r0, r5
   12df0:	add	sp, sp, #8
   12df4:	pop	{r4, r5, r6, r7, r8, pc}
   12df8:	andeq	pc, r0, r4, lsr #1
   12dfc:	andeq	pc, r0, r8, ror #8
   12e00:	push	{r4, r5, r6, lr}
   12e04:	sub	sp, sp, #8
   12e08:	ldr	r5, [r1, #12]
   12e0c:	cmp	r5, r2
   12e10:	beq	12e1c <__assert_fail@plt+0x1e58>
   12e14:	add	sp, sp, #8
   12e18:	pop	{r4, r5, r6, pc}
   12e1c:	mov	r4, r1
   12e20:	ldr	r1, [pc, #84]	; 12e7c <__assert_fail@plt+0x1eb8>
   12e24:	mov	r6, r0
   12e28:	add	r1, pc, r1
   12e2c:	mov	r0, r5
   12e30:	bl	1a120 <__assert_fail@plt+0x915c>
   12e34:	cmp	r0, #0
   12e38:	beq	12e14 <__assert_fail@plt+0x1e50>
   12e3c:	ldr	r1, [pc, #60]	; 12e80 <__assert_fail@plt+0x1ebc>
   12e40:	add	r1, pc, r1
   12e44:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   12e48:	subs	r3, r0, #0
   12e4c:	beq	12e14 <__assert_fail@plt+0x1e50>
   12e50:	ldr	ip, [pc, #44]	; 12e84 <__assert_fail@plt+0x1ec0>
   12e54:	mov	r0, #3
   12e58:	add	ip, pc, ip
   12e5c:	str	ip, [sp]
   12e60:	mov	r2, r5
   12e64:	str	r0, [r6, #16]
   12e68:	mov	r1, r4
   12e6c:	mov	r0, r6
   12e70:	bl	11e3c <__assert_fail@plt+0xe78>
   12e74:	add	sp, sp, #8
   12e78:	pop	{r4, r5, r6, pc}
   12e7c:	andeq	pc, r0, r8, lsr #8
   12e80:	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
   12e84:	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
   12e88:	push	{r4, r5, r6, r7, lr}
   12e8c:	mov	r5, r0
   12e90:	ldr	r6, [r2, #4]
   12e94:	sub	sp, sp, #12
   12e98:	mov	r7, r1
   12e9c:	mov	r0, r6
   12ea0:	ldr	r1, [r5, #8]
   12ea4:	mov	r4, r2
   12ea8:	bl	10fb8 <strspn@plt>
   12eac:	ldr	r3, [r4, #28]
   12eb0:	cmp	r3, r0
   12eb4:	bgt	12ec0 <__assert_fail@plt+0x1efc>
   12eb8:	add	sp, sp, #12
   12ebc:	pop	{r4, r5, r6, r7, pc}
   12ec0:	mov	r3, #3
   12ec4:	str	r3, [r5, #16]
   12ec8:	ldr	r3, [pc, #40]	; 12ef8 <__assert_fail@plt+0x1f34>
   12ecc:	ldrb	r0, [r6, r0]
   12ed0:	add	r3, pc, r3
   12ed4:	str	r3, [sp]
   12ed8:	str	r0, [sp, #4]
   12edc:	mov	r2, r4
   12ee0:	mov	r1, r7
   12ee4:	mov	r0, r5
   12ee8:	mov	r3, #0
   12eec:	bl	11e3c <__assert_fail@plt+0xe78>
   12ef0:	add	sp, sp, #12
   12ef4:	pop	{r4, r5, r6, r7, pc}
   12ef8:	ldrdeq	pc, [r0], -r8
   12efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f00:	sub	sp, sp, #20
   12f04:	ldr	r4, [r2, #8]
   12f08:	cmp	r4, #0
   12f0c:	beq	12f98 <__assert_fail@plt+0x1fd4>
   12f10:	ldr	r8, [pc, #252]	; 13014 <__assert_fail@plt+0x2050>
   12f14:	ldr	fp, [pc, #252]	; 13018 <__assert_fail@plt+0x2054>
   12f18:	mov	r7, r0
   12f1c:	add	r8, pc, r8
   12f20:	add	fp, pc, fp
   12f24:	str	r1, [sp, #12]
   12f28:	str	r2, [sp, #8]
   12f2c:	ldrb	r3, [r4]
   12f30:	cmp	r3, #0
   12f34:	bne	12f8c <__assert_fail@plt+0x1fc8>
   12f38:	ldr	r5, [r4, #4]
   12f3c:	ldr	sl, [r7, #8]
   12f40:	mov	r0, r5
   12f44:	mov	r1, sl
   12f48:	bl	10fb8 <strspn@plt>
   12f4c:	mov	r6, r0
   12f50:	mov	r0, r5
   12f54:	bl	10e74 <strlen@plt>
   12f58:	mov	r1, r8
   12f5c:	mov	r9, r0
   12f60:	cmp	r6, r9
   12f64:	mov	r0, r5
   12f68:	beq	12f8c <__assert_fail@plt+0x1fc8>
   12f6c:	bl	10d24 <strcmp@plt>
   12f70:	cmp	r0, #0
   12f74:	beq	12f8c <__assert_fail@plt+0x1fc8>
   12f78:	ldrb	r3, [r5, r6]
   12f7c:	cmp	r3, #35	; 0x23
   12f80:	beq	12fa0 <__assert_fail@plt+0x1fdc>
   12f84:	cmp	r9, r6
   12f88:	bhi	12fd8 <__assert_fail@plt+0x2014>
   12f8c:	ldr	r4, [r4, #20]
   12f90:	cmp	r4, #0
   12f94:	bne	12f2c <__assert_fail@plt+0x1f68>
   12f98:	add	sp, sp, #20
   12f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fa0:	cmp	r6, #0
   12fa4:	add	r3, r6, #1
   12fa8:	add	r2, r5, r6
   12fac:	mov	r1, sl
   12fb0:	bne	13004 <__assert_fail@plt+0x2040>
   12fb4:	add	r5, r5, r3
   12fb8:	mov	r0, r5
   12fbc:	bl	10fb8 <strspn@plt>
   12fc0:	mov	r6, r0
   12fc4:	mov	r0, r5
   12fc8:	bl	10e74 <strlen@plt>
   12fcc:	mov	r9, r0
   12fd0:	cmp	r9, r6
   12fd4:	bls	12f8c <__assert_fail@plt+0x1fc8>
   12fd8:	mov	r3, #3
   12fdc:	str	r3, [r7, #16]
   12fe0:	ldrb	r2, [r5, r6]
   12fe4:	mov	r3, r4
   12fe8:	str	fp, [sp]
   12fec:	str	r2, [sp, #4]
   12ff0:	ldr	r1, [sp, #12]
   12ff4:	ldr	r2, [sp, #8]
   12ff8:	mov	r0, r7
   12ffc:	bl	11e3c <__assert_fail@plt+0xe78>
   13000:	b	12f8c <__assert_fail@plt+0x1fc8>
   13004:	ldrb	r2, [r2, #-1]
   13008:	cmp	r2, #44	; 0x2c
   1300c:	bne	12f84 <__assert_fail@plt+0x1fc0>
   13010:	b	12fb4 <__assert_fail@plt+0x1ff0>
   13014:			; <UNDEFINED> instruction: 0x0000f3b8
   13018:	andeq	pc, r0, r0, asr #7
   1301c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13020:	sub	sp, sp, #12
   13024:	ldr	r4, [r2, #8]
   13028:	cmp	r4, #0
   1302c:	beq	130b8 <__assert_fail@plt+0x20f4>
   13030:	ldr	sl, [pc, #136]	; 130c0 <__assert_fail@plt+0x20fc>
   13034:	mov	r8, r1
   13038:	mov	r6, r0
   1303c:	mov	r7, r2
   13040:	add	sl, pc, sl
   13044:	mov	r9, #3
   13048:	b	13058 <__assert_fail@plt+0x2094>
   1304c:	ldr	r4, [r4, #20]
   13050:	cmp	r4, #0
   13054:	beq	130b8 <__assert_fail@plt+0x20f4>
   13058:	ldrb	r3, [r4]
   1305c:	cmp	r3, #0
   13060:	bne	1304c <__assert_fail@plt+0x2088>
   13064:	ldr	r5, [r4, #4]
   13068:	ldr	r1, [r6, #8]
   1306c:	mov	r0, r5
   13070:	bl	10fb8 <strspn@plt>
   13074:	mov	fp, r0
   13078:	mov	r0, r5
   1307c:	bl	10e74 <strlen@plt>
   13080:	cmp	fp, r0
   13084:	bcs	1304c <__assert_fail@plt+0x2088>
   13088:	str	r9, [r6, #16]
   1308c:	ldrb	r2, [r5, fp]
   13090:	mov	r3, r4
   13094:	str	sl, [sp]
   13098:	str	r2, [sp, #4]
   1309c:	mov	r1, r8
   130a0:	mov	r2, r7
   130a4:	mov	r0, r6
   130a8:	bl	11e3c <__assert_fail@plt+0xe78>
   130ac:	ldr	r4, [r4, #20]
   130b0:	cmp	r4, #0
   130b4:	bne	13058 <__assert_fail@plt+0x2094>
   130b8:	add	sp, sp, #12
   130bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c0:	ldrdeq	pc, [r0], -r0
   130c4:	push	{r4, r5, r6, r7, r8, lr}
   130c8:	mov	r5, r0
   130cc:	ldr	r4, [r2, #4]
   130d0:	sub	sp, sp, #8
   130d4:	mov	r8, r1
   130d8:	mov	r0, r4
   130dc:	ldr	r1, [r5, #8]
   130e0:	mov	r6, r2
   130e4:	bl	10fb8 <strspn@plt>
   130e8:	mov	r7, r0
   130ec:	mov	r0, r4
   130f0:	bl	10e74 <strlen@plt>
   130f4:	cmp	r7, r0
   130f8:	bcc	13104 <__assert_fail@plt+0x2140>
   130fc:	add	sp, sp, #8
   13100:	pop	{r4, r5, r6, r7, r8, pc}
   13104:	mov	r3, #3
   13108:	str	r3, [r5, #16]
   1310c:	ldr	r3, [pc, #40]	; 1313c <__assert_fail@plt+0x2178>
   13110:	ldrb	r0, [r4, r7]
   13114:	add	r3, pc, r3
   13118:	str	r3, [sp]
   1311c:	str	r0, [sp, #4]
   13120:	mov	r2, r6
   13124:	mov	r1, r8
   13128:	mov	r0, r5
   1312c:	mov	r3, #0
   13130:	bl	11e3c <__assert_fail@plt+0xe78>
   13134:	add	sp, sp, #8
   13138:	pop	{r4, r5, r6, r7, r8, pc}
   1313c:	andeq	pc, r0, r0, lsr #4
   13140:	push	{r4, r5, r6, r7, lr}
   13144:	mov	r4, r0
   13148:	sub	sp, sp, #12
   1314c:	mov	r7, r1
   13150:	mov	r0, r2
   13154:	ldr	r1, [r4, #8]
   13158:	mov	r5, r2
   1315c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   13160:	subs	r6, r0, #0
   13164:	beq	1317c <__assert_fail@plt+0x21b8>
   13168:	add	r2, r6, #8
   1316c:	ldm	r2, {r0, r1, r2}
   13170:	bl	162a8 <__assert_fail@plt+0x52e4>
   13174:	cmp	r0, #0
   13178:	beq	13184 <__assert_fail@plt+0x21c0>
   1317c:	add	sp, sp, #12
   13180:	pop	{r4, r5, r6, r7, pc}
   13184:	ldr	r0, [pc, #40]	; 131b4 <__assert_fail@plt+0x21f0>
   13188:	mov	ip, #3
   1318c:	add	r0, pc, r0
   13190:	str	r0, [sp]
   13194:	mov	r3, r6
   13198:	mov	r2, r5
   1319c:	mov	r1, r7
   131a0:	str	ip, [r4, #16]
   131a4:	mov	r0, r4
   131a8:	bl	11e3c <__assert_fail@plt+0xe78>
   131ac:	add	sp, sp, #12
   131b0:	pop	{r4, r5, r6, r7, pc}
   131b4:	andeq	pc, r0, r8, asr #3
   131b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   131bc:	mov	r7, r0
   131c0:	sub	sp, sp, #12
   131c4:	mov	r9, r1
   131c8:	mov	r0, r2
   131cc:	ldr	r1, [r7, #8]
   131d0:	mov	r8, r2
   131d4:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   131d8:	subs	r6, r0, #0
   131dc:	beq	13240 <__assert_fail@plt+0x227c>
   131e0:	ldrd	r4, [r6, #8]
   131e4:	cmp	r4, #0
   131e8:	bgt	131fc <__assert_fail@plt+0x2238>
   131ec:	b	13240 <__assert_fail@plt+0x227c>
   131f0:	cmp	r4, #0
   131f4:	add	r5, r5, r3
   131f8:	ble	13240 <__assert_fail@plt+0x227c>
   131fc:	mov	r1, r4
   13200:	mov	r0, r5
   13204:	bl	10f04 <strnlen@plt>
   13208:	add	r3, r0, #1
   1320c:	cmp	r0, r4
   13210:	sub	r4, r4, r3
   13214:	bne	131f0 <__assert_fail@plt+0x222c>
   13218:	ldr	r0, [pc, #40]	; 13248 <__assert_fail@plt+0x2284>
   1321c:	mov	ip, #3
   13220:	add	r0, pc, r0
   13224:	str	r0, [sp]
   13228:	mov	r3, r6
   1322c:	mov	r2, r8
   13230:	mov	r1, r9
   13234:	str	ip, [r7, #16]
   13238:	mov	r0, r7
   1323c:	bl	11e3c <__assert_fail@plt+0xe78>
   13240:	add	sp, sp, #12
   13244:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13248:	andeq	pc, r0, r0, asr r1	; <UNPREDICTABLE>
   1324c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13250:	ldr	r4, [r2, #8]
   13254:	cmp	r4, #0
   13258:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1325c:	ldr	r9, [pc, #100]	; 132c8 <__assert_fail@plt+0x2304>
   13260:	mov	r8, r1
   13264:	mov	r6, r0
   13268:	mov	r7, r2
   1326c:	add	r9, pc, r9
   13270:	ldrb	r3, [r4]
   13274:	mov	r1, #45	; 0x2d
   13278:	cmp	r3, #0
   1327c:	bne	132b8 <__assert_fail@plt+0x22f4>
   13280:	ldr	r5, [r4, #4]
   13284:	mov	r0, r5
   13288:	bl	10f1c <strrchr@plt>
   1328c:	mov	r1, r9
   13290:	cmp	r0, #0
   13294:	beq	132b8 <__assert_fail@plt+0x22f4>
   13298:	bl	10d24 <strcmp@plt>
   1329c:	mov	r2, r7
   132a0:	mov	r1, r8
   132a4:	cmp	r0, #0
   132a8:	mov	r0, r6
   132ac:	bne	132b8 <__assert_fail@plt+0x22f4>
   132b0:	str	r5, [r6, #8]
   132b4:	bl	131b8 <__assert_fail@plt+0x21f4>
   132b8:	ldr	r4, [r4, #20]
   132bc:	cmp	r4, #0
   132c0:	bne	13270 <__assert_fail@plt+0x22ac>
   132c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132c8:	andeq	pc, r0, r4, lsr #2
   132cc:	push	{r4, r5, r6, r7, r8, lr}
   132d0:	mov	r7, r0
   132d4:	sub	sp, sp, #8
   132d8:	mov	r0, r2
   132dc:	mov	r4, r2
   132e0:	mov	r8, r1
   132e4:	bl	19ca0 <__assert_fail@plt+0x8cdc>
   132e8:	ldr	r3, [r4, #16]
   132ec:	cmp	r3, #0
   132f0:	mov	r5, r0
   132f4:	beq	1330c <__assert_fail@plt+0x2348>
   132f8:	ldr	r3, [r3, #48]	; 0x30
   132fc:	cmp	r3, #0
   13300:	beq	1330c <__assert_fail@plt+0x2348>
   13304:	add	sp, sp, #8
   13308:	pop	{r4, r5, r6, r7, r8, pc}
   1330c:	ldrb	r6, [r5]
   13310:	cmp	r6, #0
   13314:	beq	13304 <__assert_fail@plt+0x2340>
   13318:	ldr	r1, [pc, #148]	; 133b4 <__assert_fail@plt+0x23f0>
   1331c:	mov	r2, #2
   13320:	add	r1, pc, r1
   13324:	mov	r0, r5
   13328:	bl	10f70 <strncmp@plt>
   1332c:	subs	r3, r0, #0
   13330:	beq	13384 <__assert_fail@plt+0x23c0>
   13334:	cmp	r6, #48	; 0x30
   13338:	bne	13304 <__assert_fail@plt+0x2340>
   1333c:	bl	10e50 <__ctype_b_loc@plt>
   13340:	ldrb	r3, [r5, #1]
   13344:	lsl	r3, r3, #1
   13348:	ldr	r2, [r0]
   1334c:	ldrh	r3, [r2, r3]
   13350:	tst	r3, #4096	; 0x1000
   13354:	beq	13304 <__assert_fail@plt+0x2340>
   13358:	ldr	r3, [pc, #88]	; 133b8 <__assert_fail@plt+0x23f4>
   1335c:	mov	r0, #3
   13360:	add	r3, pc, r3
   13364:	str	r3, [sp]
   13368:	mov	r2, r4
   1336c:	str	r0, [r7, #16]
   13370:	mov	r1, r8
   13374:	mov	r0, r7
   13378:	mov	r3, #0
   1337c:	bl	11e3c <__assert_fail@plt+0xe78>
   13380:	b	13304 <__assert_fail@plt+0x2340>
   13384:	ldr	r2, [pc, #48]	; 133bc <__assert_fail@plt+0x23f8>
   13388:	mov	r1, #3
   1338c:	add	r2, pc, r2
   13390:	str	r2, [sp]
   13394:	mov	r0, r7
   13398:	str	r1, [r7, #16]
   1339c:	mov	r2, r4
   133a0:	mov	r1, r8
   133a4:	bl	11e3c <__assert_fail@plt+0xe78>
   133a8:	add	r5, r5, #2
   133ac:	ldrb	r6, [r5]
   133b0:	b	13334 <__assert_fail@plt+0x2370>
   133b4:	andeq	pc, r0, r8, ror r0	; <UNPREDICTABLE>
   133b8:	andeq	pc, r0, r4, rrx
   133bc:	andeq	pc, r0, r0, lsl r0	; <UNPREDICTABLE>
   133c0:	push	{r4, r5, r6, r7, r8, lr}
   133c4:	mov	r7, r0
   133c8:	sub	sp, sp, #8
   133cc:	mov	r0, r2
   133d0:	mov	r4, r2
   133d4:	mov	r8, r1
   133d8:	bl	19ca0 <__assert_fail@plt+0x8cdc>
   133dc:	ldr	r1, [pc, #200]	; 134ac <__assert_fail@plt+0x24e8>
   133e0:	add	r1, pc, r1
   133e4:	mov	r5, r0
   133e8:	mov	r0, r4
   133ec:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   133f0:	ldr	r1, [pc, #184]	; 134b0 <__assert_fail@plt+0x24ec>
   133f4:	add	r1, pc, r1
   133f8:	mov	r6, r0
   133fc:	mov	r0, r4
   13400:	bl	1a098 <__assert_fail@plt+0x90d4>
   13404:	cmp	r0, #0
   13408:	beq	13414 <__assert_fail@plt+0x2450>
   1340c:	add	sp, sp, #8
   13410:	pop	{r4, r5, r6, r7, r8, pc}
   13414:	cmp	r6, #0
   13418:	beq	13450 <__assert_fail@plt+0x248c>
   1341c:	ldrb	r3, [r5]
   13420:	cmp	r3, #0
   13424:	bne	1340c <__assert_fail@plt+0x2448>
   13428:	ldr	r0, [pc, #132]	; 134b4 <__assert_fail@plt+0x24f0>
   1342c:	mov	ip, #3
   13430:	add	r0, pc, r0
   13434:	str	r0, [sp]
   13438:	mov	r2, r4
   1343c:	mov	r1, r8
   13440:	str	ip, [r7, #16]
   13444:	mov	r0, r7
   13448:	bl	11e3c <__assert_fail@plt+0xe78>
   1344c:	b	1340c <__assert_fail@plt+0x2448>
   13450:	ldr	r1, [pc, #96]	; 134b8 <__assert_fail@plt+0x24f4>
   13454:	mov	r0, r4
   13458:	add	r1, pc, r1
   1345c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   13460:	cmp	r0, #0
   13464:	beq	13474 <__assert_fail@plt+0x24b0>
   13468:	ldr	r3, [r0, #8]
   1346c:	cmp	r3, #0
   13470:	bne	1341c <__assert_fail@plt+0x2458>
   13474:	ldrb	r3, [r5]
   13478:	cmp	r3, #0
   1347c:	beq	1340c <__assert_fail@plt+0x2448>
   13480:	ldr	r3, [pc, #52]	; 134bc <__assert_fail@plt+0x24f8>
   13484:	mov	r0, #3
   13488:	add	r3, pc, r3
   1348c:	str	r3, [sp]
   13490:	mov	r2, r4
   13494:	str	r0, [r7, #16]
   13498:	mov	r1, r8
   1349c:	mov	r0, r7
   134a0:	mov	r3, #0
   134a4:	bl	11e3c <__assert_fail@plt+0xe78>
   134a8:	b	1340c <__assert_fail@plt+0x2448>
   134ac:	andeq	r0, r1, r4, lsl r1
   134b0:	strdeq	lr, [r0], -r8
   134b4:	andeq	lr, r0, r8, asr #31
   134b8:	ldrdeq	lr, [r0], -r0
   134bc:	andeq	lr, r0, r4, lsr #31
   134c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134c4:	sub	sp, sp, #20
   134c8:	ldrb	r6, [r0, #20]
   134cc:	cmp	r6, #0
   134d0:	bne	135e8 <__assert_fail@plt+0x2624>
   134d4:	ldr	r3, [r0, #16]
   134d8:	mov	r4, r0
   134dc:	cmp	r3, #0
   134e0:	bne	13578 <__assert_fail@plt+0x25b4>
   134e4:	ldr	r3, [r0, #24]
   134e8:	mov	r9, #1
   134ec:	cmp	r3, #0
   134f0:	ldr	r3, [r1, #12]
   134f4:	mov	r8, r1
   134f8:	str	r3, [sp, #12]
   134fc:	strb	r9, [r0, #20]
   13500:	ble	135b4 <__assert_fail@plt+0x25f0>
   13504:	ldr	sl, [pc, #252]	; 13608 <__assert_fail@plt+0x2644>
   13508:	mov	r5, r6
   1350c:	add	sl, pc, sl
   13510:	ldr	r3, [r4, #28]
   13514:	cmp	r6, #0
   13518:	lsl	fp, r5, #2
   1351c:	ldr	r7, [r3, r5, lsl #2]
   13520:	beq	135a0 <__assert_fail@plt+0x25dc>
   13524:	ldr	r3, [r7, #16]
   13528:	cmp	r3, #2
   1352c:	beq	1355c <__assert_fail@plt+0x2598>
   13530:	ldr	r1, [r4, #28]
   13534:	mov	r3, #0
   13538:	str	r9, [r4, #16]
   1353c:	ldr	r0, [r1, fp]
   13540:	mov	r2, r3
   13544:	mov	r1, r8
   13548:	ldr	r0, [r0]
   1354c:	str	sl, [sp]
   13550:	str	r0, [sp, #4]
   13554:	mov	r0, r4
   13558:	bl	11e3c <__assert_fail@plt+0xe78>
   1355c:	ldr	r3, [r4, #24]
   13560:	add	r5, r5, #1
   13564:	cmp	r3, r5
   13568:	bgt	13510 <__assert_fail@plt+0x254c>
   1356c:	ldr	r3, [r4, #16]
   13570:	cmp	r3, #0
   13574:	beq	135b4 <__assert_fail@plt+0x25f0>
   13578:	cmp	r3, #2
   1357c:	mov	r3, #0
   13580:	strb	r3, [r4, #20]
   13584:	beq	13594 <__assert_fail@plt+0x25d0>
   13588:	ldrb	r3, [r4, #13]
   1358c:	cmp	r3, #0
   13590:	movne	r6, r3
   13594:	mov	r0, r6
   13598:	add	sp, sp, #20
   1359c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a0:	mov	r1, r8
   135a4:	mov	r0, r7
   135a8:	bl	134c0 <__assert_fail@plt+0x24fc>
   135ac:	mov	r6, r0
   135b0:	b	13524 <__assert_fail@plt+0x2560>
   135b4:	ldr	r2, [sp, #12]
   135b8:	mov	r1, r8
   135bc:	mov	r0, r4
   135c0:	bl	11c7c <__assert_fail@plt+0xcb8>
   135c4:	ldr	r3, [r4, #16]
   135c8:	cmp	r3, #0
   135cc:	bne	13578 <__assert_fail@plt+0x25b4>
   135d0:	mov	r2, #2
   135d4:	mov	r0, r6
   135d8:	strb	r3, [r4, #20]
   135dc:	str	r2, [r4, #16]
   135e0:	add	sp, sp, #20
   135e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135e8:	ldr	r3, [pc, #28]	; 1360c <__assert_fail@plt+0x2648>
   135ec:	ldr	r1, [pc, #28]	; 13610 <__assert_fail@plt+0x264c>
   135f0:	ldr	r0, [pc, #28]	; 13614 <__assert_fail@plt+0x2650>
   135f4:	add	r3, pc, r3
   135f8:	mov	r2, #133	; 0x85
   135fc:	add	r1, pc, r1
   13600:	add	r0, pc, r0
   13604:	bl	10fc4 <__assert_fail@plt>
   13608:	andeq	lr, r0, r8, ror #30
   1360c:	andeq	lr, r0, r0, lsr r7
   13610:	andeq	lr, r0, ip, asr lr
   13614:	andeq	lr, r0, r4, ror #28
   13618:	push	{r4, r5, r6, r7, r8, r9, lr}
   1361c:	mov	r7, r1
   13620:	sub	sp, sp, #20
   13624:	mov	r8, r0
   13628:	mov	r1, r3
   1362c:	mov	r0, r2
   13630:	mov	r6, r2
   13634:	ldr	r9, [r7, #12]
   13638:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1363c:	subs	r4, r0, #0
   13640:	beq	1372c <__assert_fail@plt+0x2768>
   13644:	ldr	r3, [r4, #8]
   13648:	cmp	r3, #4
   1364c:	bne	13738 <__assert_fail@plt+0x2774>
   13650:	ldr	r1, [r4, #16]
   13654:	cmp	r1, #0
   13658:	beq	136dc <__assert_fail@plt+0x2718>
   1365c:	ldr	r3, [r1]
   13660:	cmp	r3, #1
   13664:	bne	136d0 <__assert_fail@plt+0x270c>
   13668:	ldr	r5, [r1, #4]
   1366c:	cmp	r5, #0
   13670:	bne	13778 <__assert_fail@plt+0x27b4>
   13674:	ldr	r1, [r1, #8]
   13678:	mov	r0, r9
   1367c:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   13680:	cmp	r6, r0
   13684:	beq	1372c <__assert_fail@plt+0x2768>
   13688:	ldr	r3, [pc, #268]	; 1379c <__assert_fail@plt+0x27d8>
   1368c:	ldr	r2, [r4, #4]
   13690:	add	r3, pc, r3
   13694:	mov	r0, #3
   13698:	str	r2, [sp, #4]
   1369c:	str	r3, [sp]
   136a0:	mov	r2, r6
   136a4:	str	r0, [r8, #16]
   136a8:	mov	r1, r7
   136ac:	mov	r0, r8
   136b0:	mov	r3, r5
   136b4:	bl	11e3c <__assert_fail@plt+0xe78>
   136b8:	mov	r0, r5
   136bc:	add	sp, sp, #20
   136c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   136c4:	ldr	r0, [r1]
   136c8:	cmp	r0, #1
   136cc:	beq	13668 <__assert_fail@plt+0x26a4>
   136d0:	ldr	r1, [r1, #12]
   136d4:	cmp	r1, #0
   136d8:	bne	136c4 <__assert_fail@plt+0x2700>
   136dc:	mov	r0, r4
   136e0:	bl	19dec <__assert_fail@plt+0x8e28>
   136e4:	sub	r3, r0, #1
   136e8:	cmn	r3, #3
   136ec:	bhi	136f8 <__assert_fail@plt+0x2734>
   136f0:	add	sp, sp, #20
   136f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   136f8:	ldr	ip, [pc, #160]	; 137a0 <__assert_fail@plt+0x27dc>
   136fc:	ldr	r3, [r4, #4]
   13700:	add	ip, pc, ip
   13704:	mov	lr, #3
   13708:	str	r3, [sp, #8]
   1370c:	str	r0, [sp, #4]
   13710:	str	ip, [sp]
   13714:	mov	r2, r6
   13718:	mov	r1, r7
   1371c:	mov	r3, r4
   13720:	str	lr, [r8, #16]
   13724:	mov	r0, r8
   13728:	bl	11e3c <__assert_fail@plt+0xe78>
   1372c:	mov	r0, #0
   13730:	add	sp, sp, #20
   13734:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13738:	ldr	ip, [r4, #4]
   1373c:	ldr	r0, [pc, #96]	; 137a4 <__assert_fail@plt+0x27e0>
   13740:	str	ip, [sp, #8]
   13744:	add	r0, pc, r0
   13748:	mov	ip, #3
   1374c:	str	r3, [sp, #4]
   13750:	str	r0, [sp]
   13754:	mov	r2, r6
   13758:	mov	r0, r8
   1375c:	mov	r1, r7
   13760:	mov	r3, r4
   13764:	str	ip, [r8, #16]
   13768:	bl	11e3c <__assert_fail@plt+0xe78>
   1376c:	mov	r0, #0
   13770:	add	sp, sp, #20
   13774:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13778:	ldr	r3, [pc, #40]	; 137a8 <__assert_fail@plt+0x27e4>
   1377c:	ldr	r1, [pc, #40]	; 137ac <__assert_fail@plt+0x27e8>
   13780:	ldr	r0, [pc, #40]	; 137b0 <__assert_fail@plt+0x27ec>
   13784:	add	r3, pc, r3
   13788:	ldr	r2, [pc, #36]	; 137b4 <__assert_fail@plt+0x27f0>
   1378c:	add	r3, r3, #12
   13790:	add	r1, pc, r1
   13794:	add	r0, pc, r0
   13798:	bl	10fc4 <__assert_fail@plt>
   1379c:	andeq	lr, r0, ip, lsr #28
   137a0:	andeq	lr, r0, r0, ror #27
   137a4:	andeq	lr, r0, ip, asr #26
   137a8:	andeq	lr, r0, r0, lsr #11
   137ac:	andeq	lr, r0, r8, asr #25
   137b0:	andeq	lr, r0, r8, lsl sp
   137b4:	andeq	r0, r0, pc, asr #3
   137b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   137bc:	sub	sp, sp, #16
   137c0:	ldr	r9, [r2, #32]
   137c4:	ldr	sl, [r1, #12]
   137c8:	cmp	r9, #0
   137cc:	bne	138cc <__assert_fail@plt+0x2908>
   137d0:	ldr	r3, [pc, #280]	; 138f0 <__assert_fail@plt+0x292c>
   137d4:	mov	r5, r2
   137d8:	add	r3, pc, r3
   137dc:	mov	r7, r1
   137e0:	mov	r8, r0
   137e4:	bl	13618 <__assert_fail@plt+0x2654>
   137e8:	ldr	r3, [pc, #260]	; 138f4 <__assert_fail@plt+0x2930>
   137ec:	mov	r2, r5
   137f0:	add	r3, pc, r3
   137f4:	mov	r1, r7
   137f8:	mov	r6, r0
   137fc:	mov	r0, r8
   13800:	bl	13618 <__assert_fail@plt+0x2654>
   13804:	orrs	r3, r6, r0
   13808:	mov	r4, r0
   1380c:	beq	13850 <__assert_fail@plt+0x288c>
   13810:	adds	r3, r0, #0
   13814:	movne	r3, #1
   13818:	cmp	r6, #0
   1381c:	cmpne	r0, #0
   13820:	bne	13858 <__assert_fail@plt+0x2894>
   13824:	cmp	r6, #0
   13828:	movne	r3, #0
   1382c:	cmp	r3, #0
   13830:	moveq	r4, r6
   13834:	mov	r0, sl
   13838:	mov	r1, r4
   1383c:	bl	1a2d4 <__assert_fail@plt+0x9310>
   13840:	cmp	r0, #0
   13844:	cmpne	r5, r0
   13848:	streq	r4, [r5, #32]
   1384c:	bne	13890 <__assert_fail@plt+0x28cc>
   13850:	add	sp, sp, #16
   13854:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13858:	cmp	r6, r0
   1385c:	beq	13834 <__assert_fail@plt+0x2870>
   13860:	ldr	r2, [pc, #144]	; 138f8 <__assert_fail@plt+0x2934>
   13864:	mov	r1, #3
   13868:	add	r2, pc, r2
   1386c:	str	r2, [sp]
   13870:	mov	r3, r9
   13874:	str	r1, [r8, #16]
   13878:	mov	r2, r5
   1387c:	mov	r1, r7
   13880:	mov	r0, r8
   13884:	mov	r4, r6
   13888:	bl	11e3c <__assert_fail@plt+0xe78>
   1388c:	b	13834 <__assert_fail@plt+0x2870>
   13890:	ldr	r3, [pc, #100]	; 138fc <__assert_fail@plt+0x2938>
   13894:	ldr	r2, [r0, #24]
   13898:	add	r3, pc, r3
   1389c:	mov	r0, #3
   138a0:	str	r2, [sp, #8]
   138a4:	str	r3, [sp]
   138a8:	str	r4, [sp, #4]
   138ac:	mov	r2, r5
   138b0:	str	r0, [r8, #16]
   138b4:	mov	r1, r7
   138b8:	mov	r0, r8
   138bc:	mov	r3, #0
   138c0:	bl	11e3c <__assert_fail@plt+0xe78>
   138c4:	add	sp, sp, #16
   138c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138cc:	ldr	r3, [pc, #44]	; 13900 <__assert_fail@plt+0x293c>
   138d0:	ldr	r1, [pc, #44]	; 13904 <__assert_fail@plt+0x2940>
   138d4:	ldr	r0, [pc, #44]	; 13908 <__assert_fail@plt+0x2944>
   138d8:	add	r3, pc, r3
   138dc:	ldr	r2, [pc, #40]	; 1390c <__assert_fail@plt+0x2948>
   138e0:	add	r3, r3, #32
   138e4:	add	r1, pc, r1
   138e8:	add	r0, pc, r0
   138ec:	bl	10fc4 <__assert_fail@plt>
   138f0:	ldrdeq	pc, [r0], -r4
   138f4:	andeq	lr, r0, r0, lsr #26
   138f8:			; <UNDEFINED> instruction: 0x0000ecb8
   138fc:	andeq	lr, r0, r0, asr #25
   13900:	andeq	lr, r0, ip, asr #8
   13904:	andeq	lr, r0, r4, ror fp
   13908:	andeq	lr, r0, r8, lsl ip
   1390c:	strdeq	r0, [r0], -r2
   13910:	ldr	r3, [pc, #352]	; 13a78 <__assert_fail@plt+0x2ab4>
   13914:	ldr	ip, [pc, #352]	; 13a7c <__assert_fail@plt+0x2ab8>
   13918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1391c:	add	r3, pc, r3
   13920:	sub	sp, sp, #60	; 0x3c
   13924:	ldr	r6, [r2, #8]
   13928:	str	r2, [sp, #20]
   1392c:	str	r1, [sp, #16]
   13930:	ldr	ip, [r3, ip]
   13934:	cmp	r6, #0
   13938:	str	ip, [sp, #28]
   1393c:	ldr	r2, [ip]
   13940:	ldr	r9, [r1, #12]
   13944:	str	r2, [sp, #52]	; 0x34
   13948:	beq	13a34 <__assert_fail@plt+0x2a70>
   1394c:	ldr	r3, [pc, #300]	; 13a80 <__assert_fail@plt+0x2abc>
   13950:	mov	sl, r0
   13954:	add	r3, pc, r3
   13958:	str	r3, [sp, #24]
   1395c:	add	r7, sp, #32
   13960:	b	13970 <__assert_fail@plt+0x29ac>
   13964:	ldr	r6, [r6, #20]
   13968:	cmp	r6, #0
   1396c:	beq	13a34 <__assert_fail@plt+0x2a70>
   13970:	ldrb	r3, [r6]
   13974:	cmp	r3, #0
   13978:	bne	13964 <__assert_fail@plt+0x29a0>
   1397c:	ldr	r4, [r6, #16]
   13980:	cmp	r4, #0
   13984:	beq	13964 <__assert_fail@plt+0x29a0>
   13988:	add	r5, r6, #8
   1398c:	b	1399c <__assert_fail@plt+0x29d8>
   13990:	ldr	r4, [r4, #12]
   13994:	cmp	r4, #0
   13998:	beq	13964 <__assert_fail@plt+0x29a0>
   1399c:	ldr	r3, [r4]
   139a0:	cmp	r3, #2
   139a4:	bne	13990 <__assert_fail@plt+0x29cc>
   139a8:	ldr	r2, [r4, #4]
   139ac:	ldr	r3, [r6, #8]
   139b0:	cmp	r2, r3
   139b4:	bgt	13a50 <__assert_fail@plt+0x2a8c>
   139b8:	ldr	r1, [r4, #8]
   139bc:	mov	r0, r9
   139c0:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   139c4:	subs	r8, r0, #0
   139c8:	beq	13a04 <__assert_fail@plt+0x2a40>
   139cc:	ldr	fp, [r8, #24]
   139d0:	mov	r0, fp
   139d4:	bl	10e74 <strlen@plt>
   139d8:	stm	sp, {r4, fp}
   139dc:	add	r0, r0, #1
   139e0:	str	r0, [sp, #8]
   139e4:	mov	r0, r7
   139e8:	ldm	r5, {r1, r2, r3}
   139ec:	bl	1597c <__assert_fail@plt+0x49b8>
   139f0:	ldm	r7, {r0, r1, r2}
   139f4:	stm	r5, {r0, r1, r2}
   139f8:	mov	r0, r8
   139fc:	bl	19620 <__assert_fail@plt+0x865c>
   13a00:	b	13990 <__assert_fail@plt+0x29cc>
   13a04:	ldr	r1, [r4, #8]
   13a08:	mov	r2, #3
   13a0c:	str	r1, [sp, #4]
   13a10:	ldr	r1, [sp, #24]
   13a14:	mov	r3, r8
   13a18:	str	r1, [sp]
   13a1c:	mov	r0, sl
   13a20:	str	r2, [sl, #16]
   13a24:	ldr	r1, [sp, #16]
   13a28:	ldr	r2, [sp, #20]
   13a2c:	bl	11e3c <__assert_fail@plt+0xe78>
   13a30:	b	13990 <__assert_fail@plt+0x29cc>
   13a34:	ldr	r3, [sp, #28]
   13a38:	ldr	r2, [sp, #52]	; 0x34
   13a3c:	ldr	r3, [r3]
   13a40:	cmp	r2, r3
   13a44:	bne	13a74 <__assert_fail@plt+0x2ab0>
   13a48:	add	sp, sp, #60	; 0x3c
   13a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a50:	ldr	r3, [pc, #44]	; 13a84 <__assert_fail@plt+0x2ac0>
   13a54:	ldr	r1, [pc, #44]	; 13a88 <__assert_fail@plt+0x2ac4>
   13a58:	ldr	r0, [pc, #44]	; 13a8c <__assert_fail@plt+0x2ac8>
   13a5c:	add	r3, pc, r3
   13a60:	ldr	r2, [pc, #40]	; 13a90 <__assert_fail@plt+0x2acc>
   13a64:	add	r3, r3, #56	; 0x38
   13a68:	add	r1, pc, r1
   13a6c:	add	r0, pc, r0
   13a70:	bl	10fc4 <__assert_fail@plt>
   13a74:	bl	10d9c <__stack_chk_fail@plt>
   13a78:	andeq	r3, r2, r8, ror #10
   13a7c:	andeq	r0, r0, r4, lsl r1
   13a80:	andeq	lr, r0, ip, asr #24
   13a84:	andeq	lr, r0, r8, asr #5
   13a88:	strdeq	lr, [r0], -r0
   13a8c:	andeq	lr, r0, r8, lsl fp
   13a90:	andeq	r0, r0, pc, asr r2
   13a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a98:	sub	sp, sp, #20
   13a9c:	ldr	r5, [r2, #8]
   13aa0:	ldr	r6, [r1, #12]
   13aa4:	cmp	r5, #0
   13aa8:	beq	13ba0 <__assert_fail@plt+0x2bdc>
   13aac:	ldr	r3, [pc, #280]	; 13bcc <__assert_fail@plt+0x2c08>
   13ab0:	mov	r8, r0
   13ab4:	add	r3, pc, r3
   13ab8:	mov	r7, r1
   13abc:	str	r2, [sp, #12]
   13ac0:	str	r3, [sp, #8]
   13ac4:	mvn	fp, #0
   13ac8:	b	13ad8 <__assert_fail@plt+0x2b14>
   13acc:	ldr	r5, [r5, #20]
   13ad0:	cmp	r5, #0
   13ad4:	beq	13ba0 <__assert_fail@plt+0x2bdc>
   13ad8:	ldrb	r3, [r5]
   13adc:	cmp	r3, #0
   13ae0:	bne	13acc <__assert_fail@plt+0x2b08>
   13ae4:	ldr	r4, [r5, #16]
   13ae8:	cmp	r4, #0
   13aec:	beq	13acc <__assert_fail@plt+0x2b08>
   13af0:	mov	r9, #3
   13af4:	b	13b04 <__assert_fail@plt+0x2b40>
   13af8:	ldr	r4, [r4, #12]
   13afc:	cmp	r4, #0
   13b00:	beq	13acc <__assert_fail@plt+0x2b08>
   13b04:	ldr	r3, [r4]
   13b08:	cmp	r3, #1
   13b0c:	bne	13af8 <__assert_fail@plt+0x2b34>
   13b10:	ldr	r3, [r4, #4]
   13b14:	ldr	r2, [r5, #8]
   13b18:	add	r3, r3, #4
   13b1c:	cmp	r3, r2
   13b20:	bhi	13ba8 <__assert_fail@plt+0x2be4>
   13b24:	ldr	r1, [r4, #8]
   13b28:	mov	r0, r6
   13b2c:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   13b30:	subs	sl, r0, #0
   13b34:	beq	13b60 <__assert_fail@plt+0x2b9c>
   13b38:	mov	r1, sl
   13b3c:	mov	r0, r6
   13b40:	bl	1a9b0 <__assert_fail@plt+0x99ec>
   13b44:	ldr	r2, [r5, #12]
   13b48:	ldr	r3, [r4, #4]
   13b4c:	rev	r0, r0
   13b50:	str	r0, [r2, r3]
   13b54:	mov	r0, sl
   13b58:	bl	19620 <__assert_fail@plt+0x865c>
   13b5c:	b	13af8 <__assert_fail@plt+0x2b34>
   13b60:	ldr	r3, [r7]
   13b64:	ands	r3, r3, #2
   13b68:	ldrne	r2, [r5, #12]
   13b6c:	ldrne	r3, [r4, #4]
   13b70:	strne	fp, [r2, r3]
   13b74:	bne	13af8 <__assert_fail@plt+0x2b34>
   13b78:	ldr	r2, [r4, #8]
   13b7c:	str	r9, [r8, #16]
   13b80:	str	r2, [sp, #4]
   13b84:	ldr	r2, [sp, #8]
   13b88:	mov	r1, r7
   13b8c:	str	r2, [sp]
   13b90:	mov	r0, r8
   13b94:	ldr	r2, [sp, #12]
   13b98:	bl	11e3c <__assert_fail@plt+0xe78>
   13b9c:	b	13af8 <__assert_fail@plt+0x2b34>
   13ba0:	add	sp, sp, #20
   13ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba8:	ldr	r3, [pc, #32]	; 13bd0 <__assert_fail@plt+0x2c0c>
   13bac:	ldr	r1, [pc, #32]	; 13bd4 <__assert_fail@plt+0x2c10>
   13bb0:	ldr	r0, [pc, #32]	; 13bd8 <__assert_fail@plt+0x2c14>
   13bb4:	add	r3, pc, r3
   13bb8:	mov	r2, #572	; 0x23c
   13bbc:	add	r3, r3, #80	; 0x50
   13bc0:	add	r1, pc, r1
   13bc4:	add	r0, pc, r0
   13bc8:	bl	10fc4 <__assert_fail@plt>
   13bcc:	andeq	lr, r0, ip, ror #21
   13bd0:	andeq	lr, r0, r0, ror r1
   13bd4:	muleq	r0, r8, r8
   13bd8:	andeq	lr, r0, ip, lsl #20
   13bdc:	ldr	ip, [pc, #500]	; 13dd8 <__assert_fail@plt+0x2e14>
   13be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be4:	add	ip, pc, ip
   13be8:	ldr	lr, [pc, #492]	; 13ddc <__assert_fail@plt+0x2e18>
   13bec:	mov	r6, r1
   13bf0:	sub	sp, sp, #76	; 0x4c
   13bf4:	ldr	r1, [ip, lr]
   13bf8:	ldr	sl, [r6, #12]
   13bfc:	mov	r5, r2
   13c00:	ldr	lr, [r1]
   13c04:	mov	r2, ip
   13c08:	str	r1, [sp, #52]	; 0x34
   13c0c:	mov	ip, #0
   13c10:	mov	r7, r0
   13c14:	mov	r1, r5
   13c18:	mov	r0, sl
   13c1c:	mov	r4, r3
   13c20:	str	lr, [sp, #68]	; 0x44
   13c24:	str	ip, [sp, #60]	; 0x3c
   13c28:	str	ip, [sp, #64]	; 0x40
   13c2c:	ldrd	r8, [sp, #112]	; 0x70
   13c30:	bl	1a204 <__assert_fail@plt+0x9240>
   13c34:	cmp	r0, #0
   13c38:	str	r0, [sp, #60]	; 0x3c
   13c3c:	movne	r3, r0
   13c40:	beq	13d8c <__assert_fail@plt+0x2dc8>
   13c44:	mov	r0, #0
   13c48:	cmp	r3, r4
   13c4c:	ldr	r1, [sp, #64]	; 0x40
   13c50:	beq	13d20 <__assert_fail@plt+0x2d5c>
   13c54:	mov	r2, #3
   13c58:	cmp	r9, #0
   13c5c:	str	r2, [r7, #16]
   13c60:	beq	13d3c <__assert_fail@plt+0x2d78>
   13c64:	ldr	lr, [pc, #372]	; 13de0 <__assert_fail@plt+0x2e1c>
   13c68:	cmp	r8, #0
   13c6c:	add	lr, pc, lr
   13c70:	beq	13d4c <__assert_fail@plt+0x2d88>
   13c74:	ldr	ip, [pc, #360]	; 13de4 <__assert_fail@plt+0x2e20>
   13c78:	ldr	fp, [pc, #360]	; 13de8 <__assert_fail@plt+0x2e24>
   13c7c:	cmp	r0, #0
   13c80:	ldr	r2, [r8, #4]
   13c84:	add	ip, pc, ip
   13c88:	add	fp, pc, fp
   13c8c:	ldr	r0, [r4, #24]
   13c90:	beq	13d68 <__assert_fail@plt+0x2da4>
   13c94:	ldr	sl, [pc, #336]	; 13dec <__assert_fail@plt+0x2e28>
   13c98:	cmp	r1, #0
   13c9c:	add	sl, pc, sl
   13ca0:	beq	13d78 <__assert_fail@plt+0x2db4>
   13ca4:	ldr	r9, [pc, #324]	; 13df0 <__assert_fail@plt+0x2e2c>
   13ca8:	ldr	r8, [pc, #324]	; 13df4 <__assert_fail@plt+0x2e30>
   13cac:	ldr	r1, [r1, #4]
   13cb0:	add	r9, pc, r9
   13cb4:	add	r8, pc, r8
   13cb8:	ldr	r3, [r3, #24]
   13cbc:	str	r1, [sp, #36]	; 0x24
   13cc0:	str	r3, [sp, #44]	; 0x2c
   13cc4:	ldr	r3, [pc, #300]	; 13df8 <__assert_fail@plt+0x2e34>
   13cc8:	str	r0, [sp, #24]
   13ccc:	add	r3, pc, r3
   13cd0:	str	r2, [sp, #16]
   13cd4:	str	r3, [sp]
   13cd8:	str	r8, [sp, #40]	; 0x28
   13cdc:	str	r9, [sp, #32]
   13ce0:	str	sl, [sp, #28]
   13ce4:	str	fp, [sp, #20]
   13ce8:	str	ip, [sp, #12]
   13cec:	stmib	sp, {r5, lr}
   13cf0:	mov	r2, r4
   13cf4:	mov	r1, r6
   13cf8:	mov	r0, r7
   13cfc:	mov	r3, #0
   13d00:	bl	11e3c <__assert_fail@plt+0xe78>
   13d04:	ldr	r3, [sp, #52]	; 0x34
   13d08:	ldr	r2, [sp, #68]	; 0x44
   13d0c:	ldr	r3, [r3]
   13d10:	cmp	r2, r3
   13d14:	bne	13dd4 <__assert_fail@plt+0x2e10>
   13d18:	add	sp, sp, #76	; 0x4c
   13d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d20:	cmp	r0, r9
   13d24:	cmpeq	r8, r1
   13d28:	beq	13d04 <__assert_fail@plt+0x2d40>
   13d2c:	mov	r2, #3
   13d30:	cmp	r9, #0
   13d34:	str	r2, [r7, #16]
   13d38:	bne	13c64 <__assert_fail@plt+0x2ca0>
   13d3c:	ldr	lr, [pc, #184]	; 13dfc <__assert_fail@plt+0x2e38>
   13d40:	cmp	r8, #0
   13d44:	add	lr, pc, lr
   13d48:	bne	13c74 <__assert_fail@plt+0x2cb0>
   13d4c:	ldr	r2, [pc, #172]	; 13e00 <__assert_fail@plt+0x2e3c>
   13d50:	cmp	r0, #0
   13d54:	add	r2, pc, r2
   13d58:	mov	ip, r2
   13d5c:	mov	fp, r2
   13d60:	ldr	r0, [r4, #24]
   13d64:	bne	13c94 <__assert_fail@plt+0x2cd0>
   13d68:	ldr	sl, [pc, #148]	; 13e04 <__assert_fail@plt+0x2e40>
   13d6c:	cmp	r1, #0
   13d70:	add	sl, pc, sl
   13d74:	bne	13ca4 <__assert_fail@plt+0x2ce0>
   13d78:	ldr	r1, [pc, #136]	; 13e08 <__assert_fail@plt+0x2e44>
   13d7c:	add	r1, pc, r1
   13d80:	mov	r9, r1
   13d84:	mov	r8, r1
   13d88:	b	13cb8 <__assert_fail@plt+0x2cf4>
   13d8c:	add	fp, sp, #60	; 0x3c
   13d90:	mov	r2, fp
   13d94:	mov	r1, r5
   13d98:	mov	r0, sl
   13d9c:	bl	19ec8 <__assert_fail@plt+0x8f04>
   13da0:	ldr	r3, [sp, #60]	; 0x3c
   13da4:	cmp	r3, #0
   13da8:	str	r0, [sp, #64]	; 0x40
   13dac:	bne	13c44 <__assert_fail@plt+0x2c80>
   13db0:	add	r3, sp, #64	; 0x40
   13db4:	mov	r2, fp
   13db8:	mov	r0, sl
   13dbc:	mov	r1, r5
   13dc0:	bl	19fa8 <__assert_fail@plt+0x8fe4>
   13dc4:	ldr	r3, [sp, #60]	; 0x3c
   13dc8:	cmp	r3, #0
   13dcc:	beq	13d04 <__assert_fail@plt+0x2d40>
   13dd0:	b	13c48 <__assert_fail@plt+0x2c84>
   13dd4:	bl	10d9c <__stack_chk_fail@plt>
   13dd8:	andeq	r3, r2, r0, lsr #5
   13ddc:	andeq	r0, r0, r4, lsl r1
   13de0:	muleq	r0, r0, r9
   13de4:	ldrdeq	lr, [r0], -r4
   13de8:	andeq	lr, r0, r0, lsl #19
   13dec:	andeq	lr, r0, r0, ror #18
   13df0:	andeq	lr, r0, r8, lsr #27
   13df4:	andeq	lr, r0, r4, asr r9
   13df8:	andeq	lr, r0, r4, asr #18
   13dfc:	andeq	pc, r0, r0, ror #20
   13e00:	andeq	pc, r0, r0, asr sl	; <UNPREDICTABLE>
   13e04:	andeq	pc, r0, r4, lsr sl	; <UNPREDICTABLE>
   13e08:	andeq	pc, r0, r8, lsr #20
   13e0c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13e10:	mov	r7, r2
   13e14:	ldr	r4, [r2, #44]	; 0x2c
   13e18:	sub	sp, sp, #12
   13e1c:	cmp	r4, #0
   13e20:	mov	r8, r0
   13e24:	mov	r9, r1
   13e28:	bne	13e3c <__assert_fail@plt+0x2e78>
   13e2c:	b	13e70 <__assert_fail@plt+0x2eac>
   13e30:	ldr	r4, [r4, #8]
   13e34:	cmp	r4, #0
   13e38:	beq	13e70 <__assert_fail@plt+0x2eac>
   13e3c:	ldrb	r1, [r4]
   13e40:	cmp	r1, #0
   13e44:	bne	13e30 <__assert_fail@plt+0x2e6c>
   13e48:	ldr	r2, [r4, #4]
   13e4c:	mov	r3, r7
   13e50:	str	r1, [sp, #4]
   13e54:	str	r1, [sp]
   13e58:	mov	r0, r8
   13e5c:	mov	r1, r9
   13e60:	bl	13bdc <__assert_fail@plt+0x2c18>
   13e64:	ldr	r4, [r4, #8]
   13e68:	cmp	r4, #0
   13e6c:	bne	13e3c <__assert_fail@plt+0x2e78>
   13e70:	ldr	r6, [r7, #8]
   13e74:	cmp	r6, #0
   13e78:	bne	13e8c <__assert_fail@plt+0x2ec8>
   13e7c:	b	13f1c <__assert_fail@plt+0x2f58>
   13e80:	ldr	r6, [r6, #20]
   13e84:	cmp	r6, #0
   13e88:	beq	13f1c <__assert_fail@plt+0x2f58>
   13e8c:	ldrb	r3, [r6]
   13e90:	cmp	r3, #0
   13e94:	bne	13e80 <__assert_fail@plt+0x2ebc>
   13e98:	ldr	r5, [r6, #24]
   13e9c:	ldr	r4, [r6, #16]
   13ea0:	cmp	r5, #0
   13ea4:	bne	13eb8 <__assert_fail@plt+0x2ef4>
   13ea8:	b	13f04 <__assert_fail@plt+0x2f40>
   13eac:	ldr	r5, [r5, #8]
   13eb0:	cmp	r5, #0
   13eb4:	beq	13f04 <__assert_fail@plt+0x2f40>
   13eb8:	ldrb	r1, [r5]
   13ebc:	cmp	r1, #0
   13ec0:	bne	13eac <__assert_fail@plt+0x2ee8>
   13ec4:	ldr	r2, [r5, #4]
   13ec8:	mov	r3, r7
   13ecc:	str	r1, [sp, #4]
   13ed0:	str	r6, [sp]
   13ed4:	mov	r1, r9
   13ed8:	mov	r0, r8
   13edc:	bl	13bdc <__assert_fail@plt+0x2c18>
   13ee0:	b	13eac <__assert_fail@plt+0x2ee8>
   13ee4:	ldr	r2, [r4, #8]
   13ee8:	mov	r3, r7
   13eec:	str	r4, [sp, #4]
   13ef0:	str	r6, [sp]
   13ef4:	mov	r1, r9
   13ef8:	mov	r0, r8
   13efc:	bl	13bdc <__assert_fail@plt+0x2c18>
   13f00:	ldr	r4, [r4, #12]
   13f04:	cmp	r4, #0
   13f08:	beq	13e80 <__assert_fail@plt+0x2ebc>
   13f0c:	ldr	r3, [r4]
   13f10:	cmp	r3, #3
   13f14:	bne	13f00 <__assert_fail@plt+0x2f3c>
   13f18:	b	13ee4 <__assert_fail@plt+0x2f20>
   13f1c:	add	sp, sp, #12
   13f20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f28:	sub	sp, sp, #8
   13f2c:	ldr	r4, [r2, #8]
   13f30:	cmp	r4, #0
   13f34:	beq	13fd4 <__assert_fail@plt+0x3010>
   13f38:	ldr	r6, [pc, #200]	; 14008 <__assert_fail@plt+0x3044>
   13f3c:	add	r7, r2, #8
   13f40:	mov	sl, r1
   13f44:	mov	r9, r0
   13f48:	mov	r8, r2
   13f4c:	add	r6, pc, r6
   13f50:	b	13f64 <__assert_fail@plt+0x2fa0>
   13f54:	add	r7, r4, #20
   13f58:	ldr	r4, [r4, #20]
   13f5c:	cmp	r4, #0
   13f60:	beq	13fd4 <__assert_fail@plt+0x3010>
   13f64:	ldr	r5, [r4, #4]
   13f68:	mov	r1, r6
   13f6c:	mov	r0, r5
   13f70:	bl	10d24 <strcmp@plt>
   13f74:	cmp	r0, #0
   13f78:	bne	13f54 <__assert_fail@plt+0x2f90>
   13f7c:	ldr	r2, [r8, #28]
   13f80:	ldr	r1, [r4, #8]
   13f84:	add	r3, r2, #1
   13f88:	cmp	r1, r3
   13f8c:	ldr	r6, [r4, #12]
   13f90:	bne	13fa8 <__assert_fail@plt+0x2fe4>
   13f94:	ldr	r1, [r8, #4]
   13f98:	mov	r0, r6
   13f9c:	bl	10d90 <memcmp@plt>
   13fa0:	cmp	r0, #0
   13fa4:	beq	13fdc <__assert_fail@plt+0x3018>
   13fa8:	ldr	r3, [pc, #92]	; 1400c <__assert_fail@plt+0x3048>
   13fac:	mov	r0, #3
   13fb0:	add	r3, pc, r3
   13fb4:	str	r3, [sp]
   13fb8:	str	r6, [sp, #4]
   13fbc:	mov	r2, r8
   13fc0:	str	r0, [r9, #16]
   13fc4:	mov	r1, sl
   13fc8:	mov	r0, r9
   13fcc:	mov	r3, #0
   13fd0:	bl	11e3c <__assert_fail@plt+0xe78>
   13fd4:	add	sp, sp, #8
   13fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fdc:	ldr	r3, [r4, #20]
   13fe0:	mov	r0, r5
   13fe4:	str	r3, [r7]
   13fe8:	bl	10d60 <free@plt>
   13fec:	add	r3, r4, #8
   13ff0:	ldm	r3, {r0, r1, r2}
   13ff4:	bl	15764 <__assert_fail@plt+0x47a0>
   13ff8:	mov	r0, r4
   13ffc:	add	sp, sp, #8
   14000:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14004:	b	10d60 <free@plt>
   14008:	ldrdeq	lr, [r0], -r0
   1400c:	muleq	r0, r4, r6
   14010:	push	{r4, r5, r6, lr}
   14014:	mov	r5, r1
   14018:	ldr	r1, [pc, #88]	; 14078 <__assert_fail@plt+0x30b4>
   1401c:	sub	sp, sp, #8
   14020:	mov	r6, r0
   14024:	add	r1, pc, r1
   14028:	ldr	r0, [r2, #4]
   1402c:	mov	r4, r2
   14030:	bl	10d24 <strcmp@plt>
   14034:	subs	r3, r0, #0
   14038:	bne	14070 <__assert_fail@plt+0x30ac>
   1403c:	ldr	r1, [r4, #16]
   14040:	ldr	r2, [r5, #12]
   14044:	cmp	r1, r2
   14048:	beq	14070 <__assert_fail@plt+0x30ac>
   1404c:	ldr	ip, [pc, #40]	; 1407c <__assert_fail@plt+0x30b8>
   14050:	mov	r0, #3
   14054:	add	ip, pc, ip
   14058:	str	ip, [sp]
   1405c:	mov	r2, r4
   14060:	str	r0, [r6, #16]
   14064:	mov	r1, r5
   14068:	mov	r0, r6
   1406c:	bl	11e3c <__assert_fail@plt+0xe78>
   14070:	add	sp, sp, #8
   14074:	pop	{r4, r5, r6, pc}
   14078:	andeq	lr, r0, r0, ror #12
   1407c:	andeq	lr, r0, r8, lsr r6
   14080:	ldr	r3, [r2, #36]	; 0x24
   14084:	cmp	r3, #0
   14088:	bxlt	lr
   1408c:	ldr	r3, [r2, #40]	; 0x28
   14090:	cmp	r3, #0
   14094:	bxlt	lr
   14098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1409c:	sub	sp, sp, #12
   140a0:	ldr	r5, [r2, #12]
   140a4:	cmp	r5, #0
   140a8:	beq	14168 <__assert_fail@plt+0x31a4>
   140ac:	ldr	fp, [pc, #188]	; 14170 <__assert_fail@plt+0x31ac>
   140b0:	mov	r9, r1
   140b4:	mov	r8, r0
   140b8:	mov	r6, r2
   140bc:	add	fp, pc, fp
   140c0:	mov	sl, #3
   140c4:	b	140d4 <__assert_fail@plt+0x3110>
   140c8:	ldr	r5, [r5, #20]
   140cc:	cmp	r5, #0
   140d0:	beq	14168 <__assert_fail@plt+0x31a4>
   140d4:	ldrb	r3, [r5]
   140d8:	cmp	r3, #0
   140dc:	bne	140c8 <__assert_fail@plt+0x3104>
   140e0:	mov	r0, r5
   140e4:	bl	19ca0 <__assert_fail@plt+0x8cdc>
   140e8:	ldrb	r3, [r0]
   140ec:	mov	r7, r0
   140f0:	cmp	r3, #0
   140f4:	beq	140c8 <__assert_fail@plt+0x3104>
   140f8:	ldr	r4, [r6, #12]
   140fc:	cmp	r4, #0
   14100:	bne	14114 <__assert_fail@plt+0x3150>
   14104:	b	140c8 <__assert_fail@plt+0x3104>
   14108:	ldr	r4, [r4, #20]
   1410c:	cmp	r4, #0
   14110:	beq	140c8 <__assert_fail@plt+0x3104>
   14114:	ldrb	r3, [r4]
   14118:	cmp	r3, #0
   1411c:	bne	14108 <__assert_fail@plt+0x3144>
   14120:	mov	r0, r4
   14124:	bl	19ca0 <__assert_fail@plt+0x8cdc>
   14128:	cmp	r4, r5
   1412c:	mov	r1, r0
   14130:	mov	r0, r7
   14134:	beq	140c8 <__assert_fail@plt+0x3104>
   14138:	bl	10d24 <strcmp@plt>
   1413c:	subs	r3, r0, #0
   14140:	bne	14108 <__assert_fail@plt+0x3144>
   14144:	ldr	r2, [r5, #24]
   14148:	mov	r1, r9
   1414c:	str	sl, [r8, #16]
   14150:	mov	r0, r8
   14154:	str	r2, [sp, #4]
   14158:	str	fp, [sp]
   1415c:	mov	r2, r4
   14160:	bl	11e3c <__assert_fail@plt+0xe78>
   14164:	b	14108 <__assert_fail@plt+0x3144>
   14168:	add	sp, sp, #12
   1416c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14170:	strdeq	lr, [r0], -r4
   14174:	ldr	r3, [r2, #16]
   14178:	cmp	r3, #0
   1417c:	bxeq	lr
   14180:	ldr	r3, [r2, #36]	; 0x24
   14184:	cmp	r3, #0
   14188:	bxlt	lr
   1418c:	ldr	r3, [r2, #40]	; 0x28
   14190:	cmp	r3, #0
   14194:	bxlt	lr
   14198:	push	{r4, r5, r6, r7, r8, r9, lr}
   1419c:	mov	r7, r1
   141a0:	ldr	r1, [pc, #168]	; 14250 <__assert_fail@plt+0x328c>
   141a4:	sub	sp, sp, #12
   141a8:	mov	r8, r0
   141ac:	add	r1, pc, r1
   141b0:	mov	r0, r2
   141b4:	mov	r5, r2
   141b8:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   141bc:	subs	r6, r0, #0
   141c0:	beq	141cc <__assert_fail@plt+0x3208>
   141c4:	add	sp, sp, #12
   141c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   141cc:	ldr	r4, [r5, #12]
   141d0:	cmp	r4, #0
   141d4:	beq	141c4 <__assert_fail@plt+0x3200>
   141d8:	ldr	r9, [pc, #116]	; 14254 <__assert_fail@plt+0x3290>
   141dc:	add	r9, pc, r9
   141e0:	b	141f0 <__assert_fail@plt+0x322c>
   141e4:	ldr	r4, [r4, #20]
   141e8:	cmp	r4, #0
   141ec:	beq	1421c <__assert_fail@plt+0x3258>
   141f0:	ldrb	r2, [r4]
   141f4:	cmp	r2, #0
   141f8:	bne	141e4 <__assert_fail@plt+0x3220>
   141fc:	mov	r0, r4
   14200:	mov	r1, r9
   14204:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   14208:	ldr	r4, [r4, #20]
   1420c:	cmp	r0, #0
   14210:	movne	r6, #1
   14214:	cmp	r4, #0
   14218:	bne	141f0 <__assert_fail@plt+0x322c>
   1421c:	cmp	r6, #0
   14220:	bne	141c4 <__assert_fail@plt+0x3200>
   14224:	ldr	r0, [pc, #44]	; 14258 <__assert_fail@plt+0x3294>
   14228:	mov	ip, #3
   1422c:	add	r0, pc, r0
   14230:	str	r0, [sp]
   14234:	mov	r3, r6
   14238:	mov	r2, r5
   1423c:	mov	r1, r7
   14240:	str	ip, [r8, #16]
   14244:	mov	r0, r8
   14248:	bl	11e3c <__assert_fail@plt+0xe78>
   1424c:	b	141c4 <__assert_fail@plt+0x3200>
   14250:	andeq	sp, r0, ip, ror ip
   14254:	andeq	pc, r0, r8, lsl r3	; <UNPREDICTABLE>
   14258:			; <UNDEFINED> instruction: 0x0000e4b4
   1425c:	ldr	r3, [r2, #16]
   14260:	cmp	r3, #0
   14264:	bxeq	lr
   14268:	push	{r4, r5, r6, r7, lr}
   1426c:	mov	r6, r1
   14270:	ldr	r1, [pc, #176]	; 14328 <__assert_fail@plt+0x3364>
   14274:	sub	sp, sp, #12
   14278:	add	r1, pc, r1
   1427c:	mov	r5, r0
   14280:	mov	r0, r2
   14284:	mov	r4, r2
   14288:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1428c:	ldr	r1, [pc, #152]	; 1432c <__assert_fail@plt+0x3368>
   14290:	add	r1, pc, r1
   14294:	mov	r7, r0
   14298:	mov	r0, r4
   1429c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   142a0:	orrs	r3, r7, r0
   142a4:	beq	142c4 <__assert_fail@plt+0x3300>
   142a8:	ldr	r3, [r4, #16]
   142ac:	ldr	r2, [r3, #36]	; 0x24
   142b0:	cmn	r2, #1
   142b4:	beq	142f8 <__assert_fail@plt+0x3334>
   142b8:	ldr	r3, [r3, #40]	; 0x28
   142bc:	cmn	r3, #1
   142c0:	beq	142cc <__assert_fail@plt+0x3308>
   142c4:	add	sp, sp, #12
   142c8:	pop	{r4, r5, r6, r7, pc}
   142cc:	ldr	r3, [pc, #92]	; 14330 <__assert_fail@plt+0x336c>
   142d0:	mov	r0, #3
   142d4:	add	r3, pc, r3
   142d8:	str	r3, [sp]
   142dc:	mov	r2, r4
   142e0:	str	r0, [r5, #16]
   142e4:	mov	r1, r6
   142e8:	mov	r0, r5
   142ec:	mov	r3, #0
   142f0:	bl	11e3c <__assert_fail@plt+0xe78>
   142f4:	b	142c4 <__assert_fail@plt+0x3300>
   142f8:	ldr	r3, [pc, #52]	; 14334 <__assert_fail@plt+0x3370>
   142fc:	mov	r2, #3
   14300:	add	r3, pc, r3
   14304:	str	r3, [sp]
   14308:	mov	r1, r6
   1430c:	str	r2, [r5, #16]
   14310:	mov	r3, #0
   14314:	mov	r2, r4
   14318:	mov	r0, r5
   1431c:	bl	11e3c <__assert_fail@plt+0xe78>
   14320:	ldr	r3, [r4, #16]
   14324:	b	142b8 <__assert_fail@plt+0x32f4>
   14328:	andeq	pc, r0, ip, ror r2	; <UNPREDICTABLE>
   1432c:	muleq	r0, r8, fp
   14330:	andeq	lr, r0, r4, lsl #9
   14334:	andeq	lr, r0, r0, lsr r4
   14338:	ldr	ip, [r2, #16]
   1433c:	cmp	ip, #0
   14340:	bxeq	lr
   14344:	ldr	r3, [pc, #200]	; 14414 <__assert_fail@plt+0x3450>
   14348:	ldr	ip, [ip, #48]	; 0x30
   1434c:	add	r3, pc, r3
   14350:	add	r3, r3, #272	; 0x110
   14354:	cmp	ip, r3
   14358:	bxne	lr
   1435c:	push	{r4, r5, r6, r7, lr}
   14360:	mov	r6, r1
   14364:	ldr	r1, [pc, #172]	; 14418 <__assert_fail@plt+0x3454>
   14368:	sub	sp, sp, #20
   1436c:	mov	r5, r0
   14370:	add	r1, pc, r1
   14374:	mov	r0, r2
   14378:	mov	r4, r2
   1437c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   14380:	cmp	r0, #0
   14384:	beq	1440c <__assert_fail@plt+0x3448>
   14388:	ldr	r3, [r0, #12]
   1438c:	ldr	r1, [pc, #136]	; 1441c <__assert_fail@plt+0x3458>
   14390:	ldr	r0, [r4, #16]
   14394:	add	r1, pc, r1
   14398:	ldrb	r7, [r3, #1]
   1439c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   143a0:	subs	r3, r0, #0
   143a4:	moveq	r2, r3
   143a8:	beq	143d4 <__assert_fail@plt+0x3410>
   143ac:	ldr	r2, [r3, #12]
   143b0:	ldr	r1, [r2]
   143b4:	lsr	r2, r1, #24
   143b8:	lsl	ip, r1, #8
   143bc:	orr	r2, r2, r1, lsl #24
   143c0:	and	ip, ip, #16711680	; 0xff0000
   143c4:	lsr	r1, r1, #8
   143c8:	orr	r2, r2, ip
   143cc:	and	r1, r1, #65280	; 0xff00
   143d0:	orr	r2, r2, r1
   143d4:	cmp	r7, r2
   143d8:	beq	1440c <__assert_fail@plt+0x3448>
   143dc:	ldr	r0, [pc, #60]	; 14420 <__assert_fail@plt+0x345c>
   143e0:	mov	ip, #3
   143e4:	add	r0, pc, r0
   143e8:	str	r2, [sp, #12]
   143ec:	str	r2, [sp, #8]
   143f0:	str	r0, [sp]
   143f4:	str	r7, [sp, #4]
   143f8:	mov	r2, r4
   143fc:	mov	r1, r6
   14400:	str	ip, [r5, #16]
   14404:	mov	r0, r5
   14408:	bl	11e3c <__assert_fail@plt+0xe78>
   1440c:	add	sp, sp, #20
   14410:	pop	{r4, r5, r6, r7, pc}
   14414:	ldrdeq	r2, [r2], -ip
   14418:	andeq	pc, r0, r4, lsl #3
   1441c:	andeq	lr, r0, ip, ror #7
   14420:	andeq	lr, r0, r8, lsr #7
   14424:	push	{r4, r5, r6, r7, r8, lr}
   14428:	mov	r6, r1
   1442c:	ldr	r1, [pc, #676]	; 146d8 <__assert_fail@plt+0x3714>
   14430:	sub	sp, sp, #8
   14434:	mov	r5, r0
   14438:	add	r1, pc, r1
   1443c:	mov	r0, r2
   14440:	mov	r4, r2
   14444:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   14448:	cmp	r0, #0
   1444c:	beq	145c0 <__assert_fail@plt+0x35fc>
   14450:	ldr	r1, [pc, #644]	; 146dc <__assert_fail@plt+0x3718>
   14454:	ldr	r0, [r0, #12]
   14458:	add	r1, pc, r1
   1445c:	bl	10d24 <strcmp@plt>
   14460:	cmp	r0, #0
   14464:	bne	145c0 <__assert_fail@plt+0x35fc>
   14468:	ldr	r3, [pc, #624]	; 146e0 <__assert_fail@plt+0x371c>
   1446c:	ldr	r2, [r4, #28]
   14470:	add	r3, pc, r3
   14474:	add	r3, r3, #272	; 0x110
   14478:	cmp	r2, #3
   1447c:	str	r3, [r4, #48]	; 0x30
   14480:	beq	145c8 <__assert_fail@plt+0x3604>
   14484:	cmp	r2, #4
   14488:	bne	1449c <__assert_fail@plt+0x34d8>
   1448c:	ldr	r3, [r4, #4]
   14490:	ldrb	r2, [r3]
   14494:	cmp	r2, #112	; 0x70
   14498:	beq	14678 <__assert_fail@plt+0x36b4>
   1449c:	ldr	r3, [pc, #576]	; 146e4 <__assert_fail@plt+0x3720>
   144a0:	mov	r2, #3
   144a4:	add	r3, pc, r3
   144a8:	str	r3, [sp]
   144ac:	mov	r1, r6
   144b0:	str	r2, [r5, #16]
   144b4:	mov	r3, #0
   144b8:	mov	r2, r4
   144bc:	mov	r0, r5
   144c0:	bl	11e3c <__assert_fail@plt+0xe78>
   144c4:	ldr	r1, [pc, #540]	; 146e8 <__assert_fail@plt+0x3724>
   144c8:	mov	r0, r4
   144cc:	add	r1, pc, r1
   144d0:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   144d4:	subs	r3, r0, #0
   144d8:	beq	146b0 <__assert_fail@plt+0x36ec>
   144dc:	ldr	r3, [r4, #36]	; 0x24
   144e0:	cmp	r3, #3
   144e4:	beq	14510 <__assert_fail@plt+0x354c>
   144e8:	ldr	r3, [pc, #508]	; 146ec <__assert_fail@plt+0x3728>
   144ec:	mov	r2, #3
   144f0:	add	r3, pc, r3
   144f4:	str	r3, [sp]
   144f8:	mov	r1, r6
   144fc:	str	r2, [r5, #16]
   14500:	mov	r3, #0
   14504:	mov	r2, r4
   14508:	mov	r0, r5
   1450c:	bl	11e3c <__assert_fail@plt+0xe78>
   14510:	ldr	r3, [r4, #40]	; 0x28
   14514:	cmp	r3, #2
   14518:	beq	14544 <__assert_fail@plt+0x3580>
   1451c:	ldr	r3, [pc, #460]	; 146f0 <__assert_fail@plt+0x372c>
   14520:	mov	r2, #3
   14524:	add	r3, pc, r3
   14528:	str	r3, [sp]
   1452c:	mov	r1, r6
   14530:	str	r2, [r5, #16]
   14534:	mov	r3, #0
   14538:	mov	r2, r4
   1453c:	mov	r0, r5
   14540:	bl	11e3c <__assert_fail@plt+0xe78>
   14544:	ldr	r1, [pc, #424]	; 146f4 <__assert_fail@plt+0x3730>
   14548:	mov	r0, r4
   1454c:	add	r1, pc, r1
   14550:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   14554:	subs	r7, r0, #0
   14558:	beq	145c0 <__assert_fail@plt+0x35fc>
   1455c:	ldr	r3, [r7, #8]
   14560:	cmp	r3, #8
   14564:	bne	146a4 <__assert_fail@plt+0x36e0>
   14568:	ldr	r8, [r7, #12]
   1456c:	ldm	r8, {r1, r2}
   14570:	lsr	ip, r1, #24
   14574:	lsl	r0, r1, #8
   14578:	orr	ip, ip, r1, lsl #24
   1457c:	and	r0, r0, #16711680	; 0xff0000
   14580:	lsr	r3, r2, #24
   14584:	orr	r0, ip, r0
   14588:	lsl	ip, r2, #8
   1458c:	orr	r3, r3, r2, lsl #24
   14590:	lsr	r1, r1, #8
   14594:	and	ip, ip, #16711680	; 0xff0000
   14598:	lsr	r2, r2, #8
   1459c:	and	r1, r1, #65280	; 0xff00
   145a0:	orr	r3, r3, ip
   145a4:	and	r2, r2, #65280	; 0xff00
   145a8:	orr	r1, r0, r1
   145ac:	orr	r3, r3, r2
   145b0:	cmp	r1, r3
   145b4:	bhi	14628 <__assert_fail@plt+0x3664>
   145b8:	cmp	r3, #255	; 0xff
   145bc:	bhi	145f8 <__assert_fail@plt+0x3634>
   145c0:	add	sp, sp, #8
   145c4:	pop	{r4, r5, r6, r7, r8, pc}
   145c8:	ldr	r3, [r4, #4]
   145cc:	ldrb	r2, [r3]
   145d0:	cmp	r2, #112	; 0x70
   145d4:	bne	1449c <__assert_fail@plt+0x34d8>
   145d8:	ldrb	r2, [r3, #1]
   145dc:	add	r3, r3, #1
   145e0:	cmp	r2, #99	; 0x63
   145e4:	bne	1449c <__assert_fail@plt+0x34d8>
   145e8:	ldrb	r3, [r3, #1]
   145ec:	cmp	r3, #105	; 0x69
   145f0:	bne	1449c <__assert_fail@plt+0x34d8>
   145f4:	b	144c4 <__assert_fail@plt+0x3500>
   145f8:	ldr	r0, [pc, #248]	; 146f8 <__assert_fail@plt+0x3734>
   145fc:	add	r0, pc, r0
   14600:	mov	ip, #3
   14604:	str	r0, [sp]
   14608:	mov	r3, r7
   1460c:	mov	r2, r4
   14610:	mov	r1, r6
   14614:	str	ip, [r5, #16]
   14618:	mov	r0, r5
   1461c:	bl	11e3c <__assert_fail@plt+0xe78>
   14620:	add	sp, sp, #8
   14624:	pop	{r4, r5, r6, r7, r8, pc}
   14628:	ldr	r3, [pc, #204]	; 146fc <__assert_fail@plt+0x3738>
   1462c:	mov	r2, #3
   14630:	add	r3, pc, r3
   14634:	str	r3, [sp]
   14638:	mov	r1, r6
   1463c:	str	r2, [r5, #16]
   14640:	mov	r3, r7
   14644:	mov	r2, r4
   14648:	mov	r0, r5
   1464c:	bl	11e3c <__assert_fail@plt+0xe78>
   14650:	ldr	r2, [r8, #4]
   14654:	lsr	r3, r2, #24
   14658:	lsl	r1, r2, #8
   1465c:	orr	r3, r3, r2, lsl #24
   14660:	and	r1, r1, #16711680	; 0xff0000
   14664:	lsr	r2, r2, #8
   14668:	orr	r3, r3, r1
   1466c:	and	r2, r2, #65280	; 0xff00
   14670:	orr	r3, r3, r2
   14674:	b	145b8 <__assert_fail@plt+0x35f4>
   14678:	ldrb	r2, [r3, #1]
   1467c:	add	r3, r3, #1
   14680:	cmp	r2, #99	; 0x63
   14684:	bne	1449c <__assert_fail@plt+0x34d8>
   14688:	ldrb	r2, [r3, #1]!
   1468c:	cmp	r2, #105	; 0x69
   14690:	bne	1449c <__assert_fail@plt+0x34d8>
   14694:	ldrb	r3, [r3, #1]
   14698:	cmp	r3, #101	; 0x65
   1469c:	bne	1449c <__assert_fail@plt+0x34d8>
   146a0:	b	144c4 <__assert_fail@plt+0x3500>
   146a4:	ldr	r0, [pc, #84]	; 14700 <__assert_fail@plt+0x373c>
   146a8:	add	r0, pc, r0
   146ac:	b	14600 <__assert_fail@plt+0x363c>
   146b0:	ldr	r2, [pc, #76]	; 14704 <__assert_fail@plt+0x3740>
   146b4:	mov	r1, #3
   146b8:	add	r2, pc, r2
   146bc:	str	r2, [sp]
   146c0:	mov	r0, r5
   146c4:	str	r1, [r5, #16]
   146c8:	mov	r2, r4
   146cc:	mov	r1, r6
   146d0:	bl	11e3c <__assert_fail@plt+0xe78>
   146d4:	b	144dc <__assert_fail@plt+0x3518>
   146d8:	muleq	r0, ip, lr
   146dc:	andeq	lr, r0, r8, ror #6
   146e0:			; <UNDEFINED> instruction: 0x000227b8
   146e4:	andeq	lr, r0, r8, lsr #6
   146e8:	andeq	sp, r0, ip, asr r9
   146ec:	andeq	lr, r0, r0, lsr r3
   146f0:	andeq	lr, r0, r4, lsr #6
   146f4:	andeq	lr, r0, r4, lsr r2
   146f8:			; <UNDEFINED> instruction: 0x0000e2bc
   146fc:	andeq	lr, r0, r8, asr r2
   14700:	andeq	lr, r0, r8, asr #3
   14704:	andeq	lr, r0, r8, lsr r1
   14708:	ldr	r3, [pc, #172]	; 147bc <__assert_fail@plt+0x37f8>
   1470c:	ldr	ip, [r2, #48]	; 0x30
   14710:	add	r3, pc, r3
   14714:	add	r3, r3, #260	; 0x104
   14718:	cmp	ip, r3
   1471c:	bxne	lr
   14720:	ldr	r3, [r2, #28]
   14724:	push	{r4, r5, r6, lr}
   14728:	cmp	r3, #4
   1472c:	sub	sp, sp, #8
   14730:	mov	r6, r1
   14734:	mov	r5, r0
   14738:	mov	r4, r2
   1473c:	bne	14750 <__assert_fail@plt+0x378c>
   14740:	ldr	r3, [r2, #4]
   14744:	ldrb	r2, [r3]
   14748:	cmp	r2, #112	; 0x70
   1474c:	beq	14790 <__assert_fail@plt+0x37cc>
   14750:	ldr	r3, [pc, #104]	; 147c0 <__assert_fail@plt+0x37fc>
   14754:	mov	r2, #3
   14758:	add	r3, pc, r3
   1475c:	str	r3, [sp]
   14760:	mov	r1, r6
   14764:	str	r2, [r5, #16]
   14768:	mov	r3, #0
   1476c:	mov	r2, r4
   14770:	mov	r0, r5
   14774:	bl	11e3c <__assert_fail@plt+0xe78>
   14778:	mov	r2, r4
   1477c:	mov	r1, r6
   14780:	mov	r0, r5
   14784:	add	sp, sp, #8
   14788:	pop	{r4, r5, r6, lr}
   1478c:	b	12b58 <__assert_fail@plt+0x1b94>
   14790:	ldrb	r2, [r3, #1]
   14794:	add	r3, r3, #1
   14798:	cmp	r2, #111	; 0x6f
   1479c:	bne	14750 <__assert_fail@plt+0x378c>
   147a0:	ldrb	r2, [r3, #1]!
   147a4:	cmp	r2, #114	; 0x72
   147a8:	bne	14750 <__assert_fail@plt+0x378c>
   147ac:	ldrb	r3, [r3, #1]
   147b0:	cmp	r3, #116	; 0x74
   147b4:	bne	14750 <__assert_fail@plt+0x378c>
   147b8:	b	14778 <__assert_fail@plt+0x37b4>
   147bc:	andeq	r2, r2, r8, lsl r5
   147c0:	muleq	r0, r4, r1
   147c4:	ldr	r3, [pc, #220]	; 148a8 <__assert_fail@plt+0x38e4>
   147c8:	push	{r4, r5, r6, r7, r8, r9, lr}
   147cc:	add	r3, pc, r3
   147d0:	ldr	r5, [r2, #48]	; 0x30
   147d4:	add	ip, r3, #260	; 0x104
   147d8:	add	r3, r3, #264	; 0x108
   147dc:	cmp	r5, ip
   147e0:	cmpne	r5, r3
   147e4:	sub	sp, sp, #12
   147e8:	movne	r5, #1
   147ec:	moveq	r5, #0
   147f0:	bne	14854 <__assert_fail@plt+0x3890>
   147f4:	ldr	r4, [r2, #12]
   147f8:	cmp	r4, #0
   147fc:	beq	14854 <__assert_fail@plt+0x3890>
   14800:	ldr	r6, [pc, #164]	; 148ac <__assert_fail@plt+0x38e8>
   14804:	mov	r8, r1
   14808:	mov	r7, r0
   1480c:	mov	r9, r2
   14810:	add	r6, pc, r6
   14814:	b	14824 <__assert_fail@plt+0x3860>
   14818:	ldr	r4, [r4, #20]
   1481c:	cmp	r4, #0
   14820:	beq	1485c <__assert_fail@plt+0x3898>
   14824:	ldrb	r3, [r4]
   14828:	cmp	r3, #0
   1482c:	bne	14818 <__assert_fail@plt+0x3854>
   14830:	mov	r1, r6
   14834:	mov	r0, r4
   14838:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1483c:	add	r5, r5, #1
   14840:	cmp	r0, #0
   14844:	beq	14818 <__assert_fail@plt+0x3854>
   14848:	bl	19dec <__assert_fail@plt+0x8e28>
   1484c:	cmp	r0, #0
   14850:	beq	14818 <__assert_fail@plt+0x3854>
   14854:	add	sp, sp, #12
   14858:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1485c:	cmp	r5, #1
   14860:	bne	14854 <__assert_fail@plt+0x3890>
   14864:	ldr	r3, [r9, #36]	; 0x24
   14868:	cmn	r3, #1
   1486c:	beq	14854 <__assert_fail@plt+0x3890>
   14870:	ldr	r2, [r9, #12]
   14874:	ldr	r0, [pc, #52]	; 148b0 <__assert_fail@plt+0x38ec>
   14878:	mov	ip, #3
   1487c:	ldr	r2, [r2, #4]
   14880:	add	r0, pc, r0
   14884:	str	r2, [sp, #4]
   14888:	str	r0, [sp]
   1488c:	mov	r3, r4
   14890:	mov	r1, r8
   14894:	mov	r2, r9
   14898:	str	ip, [r7, #16]
   1489c:	mov	r0, r7
   148a0:	bl	11e3c <__assert_fail@plt+0xe78>
   148a4:	b	14854 <__assert_fail@plt+0x3890>
   148a8:	andeq	r2, r2, ip, asr r4
   148ac:	andeq	lr, r0, r4, ror #25
   148b0:	muleq	r0, r4, r0
   148b4:	ldr	ip, [r2, #16]
   148b8:	cmp	ip, #0
   148bc:	bxeq	lr
   148c0:	ldr	r3, [pc, #232]	; 149b0 <__assert_fail@plt+0x39ec>
   148c4:	ldr	ip, [ip, #48]	; 0x30
   148c8:	add	r3, pc, r3
   148cc:	add	r3, r3, #260	; 0x104
   148d0:	cmp	ip, r3
   148d4:	bxne	lr
   148d8:	push	{r4, r5, r6, r7, lr}
   148dc:	mov	r4, r2
   148e0:	ldr	r2, [r2, #28]
   148e4:	sub	sp, sp, #12
   148e8:	cmp	r2, #8
   148ec:	mov	r6, r1
   148f0:	mov	r5, r0
   148f4:	bne	14910 <__assert_fail@plt+0x394c>
   148f8:	ldr	r1, [pc, #180]	; 149b4 <__assert_fail@plt+0x39f0>
   148fc:	ldr	r0, [r4, #4]
   14900:	add	r1, pc, r1
   14904:	bl	10d90 <memcmp@plt>
   14908:	cmp	r0, #0
   1490c:	beq	14938 <__assert_fail@plt+0x3974>
   14910:	ldr	r3, [pc, #160]	; 149b8 <__assert_fail@plt+0x39f4>
   14914:	mov	r2, #3
   14918:	add	r3, pc, r3
   1491c:	str	r3, [sp]
   14920:	mov	r1, r6
   14924:	str	r2, [r5, #16]
   14928:	mov	r3, #0
   1492c:	mov	r2, r4
   14930:	mov	r0, r5
   14934:	bl	11e3c <__assert_fail@plt+0xe78>
   14938:	mov	r2, r4
   1493c:	mov	r1, r6
   14940:	mov	r0, r5
   14944:	bl	12b58 <__assert_fail@plt+0x1b94>
   14948:	mov	r2, r4
   1494c:	mov	r1, r6
   14950:	mov	r0, r5
   14954:	bl	12d58 <__assert_fail@plt+0x1d94>
   14958:	subs	r7, r0, #0
   1495c:	beq	149a8 <__assert_fail@plt+0x39e4>
   14960:	mov	r2, r7
   14964:	mov	r1, r6
   14968:	mov	r0, r5
   1496c:	bl	12d58 <__assert_fail@plt+0x1d94>
   14970:	cmp	r4, r0
   14974:	beq	149a8 <__assert_fail@plt+0x39e4>
   14978:	ldr	r3, [pc, #60]	; 149bc <__assert_fail@plt+0x39f8>
   1497c:	ldr	r2, [r7, #24]
   14980:	add	r3, pc, r3
   14984:	mov	r0, #3
   14988:	str	r2, [sp, #4]
   1498c:	str	r3, [sp]
   14990:	mov	r2, r4
   14994:	str	r0, [r5, #16]
   14998:	mov	r1, r6
   1499c:	mov	r0, r5
   149a0:	mov	r3, #0
   149a4:	bl	11e3c <__assert_fail@plt+0xe78>
   149a8:	add	sp, sp, #12
   149ac:	pop	{r4, r5, r6, r7, pc}
   149b0:	andeq	r2, r2, r0, ror #6
   149b4:	andeq	sp, r0, r4, lsl #10
   149b8:	andeq	lr, r0, r0, asr r0
   149bc:	andeq	lr, r0, r8, lsl r0
   149c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149c4:	mov	r5, r1
   149c8:	ldr	r1, [pc, #252]	; 14acc <__assert_fail@plt+0x3b08>
   149cc:	sub	sp, sp, #20
   149d0:	mov	r6, r0
   149d4:	add	r1, pc, r1
   149d8:	ldr	r0, [r2, #4]
   149dc:	mov	r7, r2
   149e0:	bl	10d24 <strcmp@plt>
   149e4:	cmp	r0, #0
   149e8:	bne	14a94 <__assert_fail@plt+0x3ad0>
   149ec:	ldr	r4, [r7, #8]
   149f0:	cmp	r4, #0
   149f4:	beq	14a94 <__assert_fail@plt+0x3ad0>
   149f8:	ldr	r3, [pc, #208]	; 14ad0 <__assert_fail@plt+0x3b0c>
   149fc:	ldr	r9, [pc, #208]	; 14ad4 <__assert_fail@plt+0x3b10>
   14a00:	add	r3, pc, r3
   14a04:	str	r3, [sp, #12]
   14a08:	ldr	r3, [pc, #200]	; 14ad8 <__assert_fail@plt+0x3b14>
   14a0c:	add	r9, pc, r9
   14a10:	add	r3, pc, r3
   14a14:	str	r3, [sp, #8]
   14a18:	ldrb	fp, [r4]
   14a1c:	cmp	fp, #0
   14a20:	bne	14a88 <__assert_fail@plt+0x3ac4>
   14a24:	ldr	r2, [r4, #12]
   14a28:	subs	r1, r2, #0
   14a2c:	beq	14aa0 <__assert_fail@plt+0x3adc>
   14a30:	ldr	r0, [r5, #12]
   14a34:	bl	1a120 <__assert_fail@plt+0x915c>
   14a38:	mov	r1, r9
   14a3c:	cmp	r0, #0
   14a40:	beq	14a9c <__assert_fail@plt+0x3ad8>
   14a44:	ldr	sl, [r4, #4]
   14a48:	mov	r0, sl
   14a4c:	bl	10fb8 <strspn@plt>
   14a50:	mov	r8, r0
   14a54:	mov	r0, sl
   14a58:	bl	10e74 <strlen@plt>
   14a5c:	mov	ip, #3
   14a60:	mov	r3, fp
   14a64:	mov	r2, r7
   14a68:	mov	r1, r5
   14a6c:	cmp	r8, r0
   14a70:	mov	r0, r6
   14a74:	beq	14a88 <__assert_fail@plt+0x3ac4>
   14a78:	str	ip, [r6, #16]
   14a7c:	ldr	ip, [sp, #8]
   14a80:	str	ip, [sp]
   14a84:	bl	11e3c <__assert_fail@plt+0xe78>
   14a88:	ldr	r4, [r4, #20]
   14a8c:	cmp	r4, #0
   14a90:	bne	14a18 <__assert_fail@plt+0x3a54>
   14a94:	add	sp, sp, #20
   14a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a9c:	ldr	r2, [r4, #12]
   14aa0:	str	r2, [sp, #4]
   14aa4:	ldr	r2, [sp, #12]
   14aa8:	mov	r3, #3
   14aac:	str	r2, [sp]
   14ab0:	mov	r1, r5
   14ab4:	str	r3, [r6, #16]
   14ab8:	mov	r2, r7
   14abc:	mov	r3, r4
   14ac0:	mov	r0, r6
   14ac4:	bl	11e3c <__assert_fail@plt+0xe78>
   14ac8:	b	14a88 <__assert_fail@plt+0x3ac4>
   14acc:	andeq	ip, r0, r0, ror sp
   14ad0:	andeq	sp, r0, ip, asr #31
   14ad4:	andeq	sp, r0, ip, ror #31
   14ad8:	andeq	lr, r0, r0, lsl r0
   14adc:	ldr	r1, [pc, #108]	; 14b50 <__assert_fail@plt+0x3b8c>
   14ae0:	push	{r4, lr}
   14ae4:	add	r1, pc, r1
   14ae8:	mov	r4, r0
   14aec:	bl	10d0c <strstr@plt>
   14af0:	cmp	r0, #0
   14af4:	beq	14b00 <__assert_fail@plt+0x3b3c>
   14af8:	mov	r0, #0
   14afc:	pop	{r4, pc}
   14b00:	mov	r1, #45	; 0x2d
   14b04:	mov	r0, r4
   14b08:	bl	10f1c <strrchr@plt>
   14b0c:	ldr	r1, [pc, #64]	; 14b54 <__assert_fail@plt+0x3b90>
   14b10:	add	r1, pc, r1
   14b14:	cmp	r0, #0
   14b18:	addne	r4, r0, #1
   14b1c:	mov	r0, r4
   14b20:	bl	10d24 <strcmp@plt>
   14b24:	cmp	r0, #0
   14b28:	beq	14b48 <__assert_fail@plt+0x3b84>
   14b2c:	ldr	r1, [pc, #36]	; 14b58 <__assert_fail@plt+0x3b94>
   14b30:	mov	r0, r4
   14b34:	add	r1, pc, r1
   14b38:	bl	10d24 <strcmp@plt>
   14b3c:	clz	r0, r0
   14b40:	lsr	r0, r0, #5
   14b44:	pop	{r4, pc}
   14b48:	mov	r0, #1
   14b4c:	pop	{r4, pc}
   14b50:	andeq	sp, r0, r8, ror pc
   14b54:	andeq	sp, r0, r4, asr pc
   14b58:	andeq	sp, r0, r8, lsr pc
   14b5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b60:	sub	sp, sp, #12
   14b64:	ldr	r4, [r2, #8]
   14b68:	cmp	r4, #0
   14b6c:	beq	14bf4 <__assert_fail@plt+0x3c30>
   14b70:	ldr	r5, [pc, #132]	; 14bfc <__assert_fail@plt+0x3c38>
   14b74:	ldr	sl, [pc, #132]	; 14c00 <__assert_fail@plt+0x3c3c>
   14b78:	mov	r8, r1
   14b7c:	mov	r6, r0
   14b80:	mov	r7, r2
   14b84:	add	r5, pc, r5
   14b88:	add	sl, pc, sl
   14b8c:	mov	r9, #3
   14b90:	ldrb	r3, [r4]
   14b94:	cmp	r3, #0
   14b98:	bne	14be8 <__assert_fail@plt+0x3c24>
   14b9c:	ldr	fp, [r4, #4]
   14ba0:	mov	r0, fp
   14ba4:	bl	14adc <__assert_fail@plt+0x3b18>
   14ba8:	mov	r1, r5
   14bac:	cmp	r0, #0
   14bb0:	mov	r0, fp
   14bb4:	beq	14be8 <__assert_fail@plt+0x3c24>
   14bb8:	bl	10d0c <strstr@plt>
   14bbc:	mov	r1, r5
   14bc0:	bl	10d24 <strcmp@plt>
   14bc4:	mov	r3, r4
   14bc8:	mov	r2, r7
   14bcc:	mov	r1, r8
   14bd0:	cmp	r0, #0
   14bd4:	mov	r0, r6
   14bd8:	bne	14be8 <__assert_fail@plt+0x3c24>
   14bdc:	str	r9, [r6, #16]
   14be0:	str	sl, [sp]
   14be4:	bl	11e3c <__assert_fail@plt+0xe78>
   14be8:	ldr	r4, [r4, #20]
   14bec:	cmp	r4, #0
   14bf0:	bne	14b90 <__assert_fail@plt+0x3bcc>
   14bf4:	add	sp, sp, #12
   14bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bfc:	andeq	sp, r0, r8, ror #29
   14c00:	andeq	sp, r0, ip, ror #29
   14c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c08:	sub	sp, sp, #44	; 0x2c
   14c0c:	ldr	ip, [r3, #8]
   14c10:	ldr	lr, [sp, #84]	; 0x54
   14c14:	ands	r6, ip, #3
   14c18:	mov	r9, r0
   14c1c:	str	r2, [sp, #28]
   14c20:	ldr	sl, [sp, #80]	; 0x50
   14c24:	str	lr, [sp, #24]
   14c28:	bne	14db8 <__assert_fail@plt+0x3df4>
   14c2c:	mov	r5, r3
   14c30:	lsrs	r3, ip, #2
   14c34:	beq	14cd4 <__assert_fail@plt+0x3d10>
   14c38:	ldr	r3, [pc, #540]	; 14e5c <__assert_fail@plt+0x3e98>
   14c3c:	ldr	fp, [r1, #12]
   14c40:	add	r3, pc, r3
   14c44:	str	r3, [sp, #32]
   14c48:	ldr	r3, [pc, #528]	; 14e60 <__assert_fail@plt+0x3e9c>
   14c4c:	mov	r8, r1
   14c50:	mov	r4, r6
   14c54:	add	r3, pc, r3
   14c58:	str	r3, [sp, #36]	; 0x24
   14c5c:	mov	r1, r4
   14c60:	mov	r0, r5
   14c64:	bl	19e5c <__assert_fail@plt+0x8e98>
   14c68:	add	r3, r0, #1
   14c6c:	cmp	r3, #1
   14c70:	mov	r7, r0
   14c74:	bls	14cdc <__assert_fail@plt+0x3d18>
   14c78:	ldr	r3, [r5, #16]
   14c7c:	cmp	r3, #0
   14c80:	bne	14cf4 <__assert_fail@plt+0x3d30>
   14c84:	mov	r1, r7
   14c88:	mov	r0, fp
   14c8c:	bl	1a2d4 <__assert_fail@plt+0x9310>
   14c90:	subs	r6, r0, #0
   14c94:	beq	14de4 <__assert_fail@plt+0x3e20>
   14c98:	ldr	r1, [sl]
   14c9c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   14ca0:	subs	r2, r0, #0
   14ca4:	beq	14d58 <__assert_fail@plt+0x3d94>
   14ca8:	bl	19dec <__assert_fail@plt+0x8e28>
   14cac:	ldr	r3, [r5, #8]
   14cb0:	add	r2, r4, r0
   14cb4:	add	r2, r2, #1
   14cb8:	add	r6, r0, #1
   14cbc:	cmp	r3, r2, lsl #2
   14cc0:	bcc	14d84 <__assert_fail@plt+0x3dc0>
   14cc4:	add	r4, r4, r6
   14cc8:	cmp	r4, r3, lsr #2
   14ccc:	mov	r6, r4
   14cd0:	bcc	14c5c <__assert_fail@plt+0x3c98>
   14cd4:	add	sp, sp, #44	; 0x2c
   14cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cdc:	ldr	r3, [r8]
   14ce0:	tst	r3, #2
   14ce4:	bne	14cd4 <__assert_fail@plt+0x3d10>
   14ce8:	ldr	r3, [r5, #8]
   14cec:	mov	r6, #1
   14cf0:	b	14cc4 <__assert_fail@plt+0x3d00>
   14cf4:	lsl	r6, r6, #2
   14cf8:	b	14d08 <__assert_fail@plt+0x3d44>
   14cfc:	ldr	r3, [r3, #12]
   14d00:	cmp	r3, #0
   14d04:	beq	14d2c <__assert_fail@plt+0x3d68>
   14d08:	ldr	r2, [r3]
   14d0c:	cmp	r2, #1
   14d10:	bne	14cfc <__assert_fail@plt+0x3d38>
   14d14:	ldr	r2, [r3, #4]
   14d18:	cmp	r2, r6
   14d1c:	beq	14c84 <__assert_fail@plt+0x3cc0>
   14d20:	ldr	r3, [r3, #12]
   14d24:	cmp	r3, #0
   14d28:	bne	14d08 <__assert_fail@plt+0x3d44>
   14d2c:	mov	r3, #3
   14d30:	str	r3, [r9, #16]
   14d34:	ldr	r3, [sp, #36]	; 0x24
   14d38:	str	r4, [sp, #4]
   14d3c:	str	r3, [sp]
   14d40:	ldr	r2, [sp, #28]
   14d44:	mov	r3, r5
   14d48:	mov	r1, r8
   14d4c:	mov	r0, r9
   14d50:	bl	11e3c <__assert_fail@plt+0xe78>
   14d54:	b	14c84 <__assert_fail@plt+0x3cc0>
   14d58:	ldr	r3, [sp, #24]
   14d5c:	ldrb	r3, [r3]
   14d60:	cmp	r3, #0
   14d64:	beq	14e18 <__assert_fail@plt+0x3e54>
   14d68:	mov	r0, r2
   14d6c:	mov	r2, r4
   14d70:	add	r2, r2, #1
   14d74:	ldr	r3, [r5, #8]
   14d78:	mov	r6, #1
   14d7c:	cmp	r3, r2, lsl #2
   14d80:	bcs	14cc4 <__assert_fail@plt+0x3d00>
   14d84:	mov	r2, #3
   14d88:	str	r2, [r9, #16]
   14d8c:	str	r3, [sp, #4]
   14d90:	ldr	r3, [sp, #32]
   14d94:	str	r0, [sp, #8]
   14d98:	str	r3, [sp]
   14d9c:	ldr	r2, [sp, #28]
   14da0:	mov	r3, r5
   14da4:	mov	r1, r8
   14da8:	mov	r0, r9
   14dac:	bl	11e3c <__assert_fail@plt+0xe78>
   14db0:	ldr	r3, [r5, #8]
   14db4:	b	14cc4 <__assert_fail@plt+0x3d00>
   14db8:	ldr	lr, [pc, #164]	; 14e64 <__assert_fail@plt+0x3ea0>
   14dbc:	str	ip, [sp, #4]
   14dc0:	add	lr, pc, lr
   14dc4:	mov	ip, #4
   14dc8:	mov	r4, #3
   14dcc:	str	lr, [sp]
   14dd0:	str	r4, [r0, #16]
   14dd4:	str	ip, [sp, #8]
   14dd8:	bl	11e3c <__assert_fail@plt+0xe78>
   14ddc:	add	sp, sp, #44	; 0x2c
   14de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14de4:	ldr	r0, [pc, #124]	; 14e68 <__assert_fail@plt+0x3ea4>
   14de8:	mov	ip, #3
   14dec:	add	r0, pc, r0
   14df0:	str	r0, [sp, #80]	; 0x50
   14df4:	str	r4, [sp, #84]	; 0x54
   14df8:	mov	r3, r5
   14dfc:	ldr	r2, [sp, #28]
   14e00:	mov	r1, r8
   14e04:	str	ip, [r9, #16]
   14e08:	mov	r0, r9
   14e0c:	add	sp, sp, #44	; 0x2c
   14e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e14:	b	11e3c <__assert_fail@plt+0xe78>
   14e18:	ldr	r2, [r5, #4]
   14e1c:	ldr	r0, [pc, #72]	; 14e6c <__assert_fail@plt+0x3ea8>
   14e20:	str	r4, [sp, #16]
   14e24:	str	r2, [sp, #12]
   14e28:	ldr	r2, [sl]
   14e2c:	ldr	r1, [r6, #24]
   14e30:	add	r0, pc, r0
   14e34:	mov	ip, #3
   14e38:	str	r1, [sp, #8]
   14e3c:	str	r2, [sp, #4]
   14e40:	str	r0, [sp]
   14e44:	ldr	r2, [sp, #28]
   14e48:	mov	r1, r8
   14e4c:	str	ip, [r9, #16]
   14e50:	mov	r0, r9
   14e54:	bl	11e3c <__assert_fail@plt+0xe78>
   14e58:	b	14cd4 <__assert_fail@plt+0x3d10>
   14e5c:	andeq	sp, r0, r4, lsl pc
   14e60:	andeq	sp, r0, r0, lsr pc
   14e64:	andeq	sp, r0, r8, ror #25
   14e68:	strdeq	sp, [r0], -r4
   14e6c:	ldrdeq	sp, [r0], -ip
   14e70:	push	{r4, r5, r6, r7, lr}
   14e74:	mov	r5, r0
   14e78:	ldr	r4, [r0, #8]
   14e7c:	sub	sp, sp, #12
   14e80:	mov	r7, r1
   14e84:	mov	r0, r2
   14e88:	ldr	r1, [r4]
   14e8c:	mov	r6, r2
   14e90:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   14e94:	subs	r3, r0, #0
   14e98:	beq	14eb8 <__assert_fail@plt+0x3ef4>
   14e9c:	add	ip, r4, #8
   14ea0:	add	r4, r4, #4
   14ea4:	mov	r2, r6
   14ea8:	mov	r1, r7
   14eac:	mov	r0, r5
   14eb0:	stm	sp, {r4, ip}
   14eb4:	bl	14c04 <__assert_fail@plt+0x3c40>
   14eb8:	add	sp, sp, #12
   14ebc:	pop	{r4, r5, r6, r7, pc}
   14ec0:	ldr	r3, [pc, #220]	; 14fa4 <__assert_fail@plt+0x3fe0>
   14ec4:	ldr	ip, [pc, #220]	; 14fa8 <__assert_fail@plt+0x3fe4>
   14ec8:	add	r3, pc, r3
   14ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed0:	mov	r7, r2
   14ed4:	ldr	r2, [r3, ip]
   14ed8:	sub	sp, sp, #36	; 0x24
   14edc:	mov	r9, r1
   14ee0:	ldr	r1, [pc, #196]	; 14fac <__assert_fail@plt+0x3fe8>
   14ee4:	str	r2, [sp, #8]
   14ee8:	ldr	r2, [r2]
   14eec:	mov	r8, r0
   14ef0:	add	r1, pc, r1
   14ef4:	mov	r0, r7
   14ef8:	str	r2, [sp, #28]
   14efc:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   14f00:	cmp	r0, #0
   14f04:	beq	14f24 <__assert_fail@plt+0x3f60>
   14f08:	ldr	r3, [sp, #8]
   14f0c:	ldr	r2, [sp, #28]
   14f10:	ldr	r3, [r3]
   14f14:	cmp	r2, r3
   14f18:	bne	14fa0 <__assert_fail@plt+0x3fdc>
   14f1c:	add	sp, sp, #36	; 0x24
   14f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f24:	ldr	r4, [r7, #8]
   14f28:	cmp	r4, #0
   14f2c:	beq	14f08 <__assert_fail@plt+0x3f44>
   14f30:	ldr	fp, [pc, #120]	; 14fb0 <__assert_fail@plt+0x3fec>
   14f34:	add	sl, sp, #24
   14f38:	add	fp, pc, fp
   14f3c:	add	r3, sp, #20
   14f40:	str	r3, [sp, #12]
   14f44:	ldrb	r5, [r4]
   14f48:	cmp	r5, #0
   14f4c:	bne	14f90 <__assert_fail@plt+0x3fcc>
   14f50:	ldr	r6, [r4, #4]
   14f54:	mov	r0, r6
   14f58:	bl	14adc <__assert_fail@plt+0x3b18>
   14f5c:	cmp	r0, #0
   14f60:	beq	14f90 <__assert_fail@plt+0x3fcc>
   14f64:	ldr	r3, [sp, #12]
   14f68:	str	sl, [sp, #4]
   14f6c:	str	r3, [sp]
   14f70:	mov	r2, r7
   14f74:	mov	r3, r4
   14f78:	mov	r1, r9
   14f7c:	mov	r0, r8
   14f80:	str	r6, [sp, #16]
   14f84:	str	fp, [sp, #20]
   14f88:	strb	r5, [sp, #24]
   14f8c:	bl	14c04 <__assert_fail@plt+0x3c40>
   14f90:	ldr	r4, [r4, #20]
   14f94:	cmp	r4, #0
   14f98:	bne	14f44 <__assert_fail@plt+0x3f80>
   14f9c:	b	14f08 <__assert_fail@plt+0x3f44>
   14fa0:	bl	10d9c <__stack_chk_fail@plt>
   14fa4:			; <UNDEFINED> instruction: 0x00021fbc
   14fa8:	andeq	r0, r0, r4, lsl r1
   14fac:			; <UNDEFINED> instruction: 0x0000dcb8
   14fb0:	andeq	sp, r0, ip, ror ip
   14fb4:	push	{r4, r5, r6, r7, lr}
   14fb8:	mov	r6, r1
   14fbc:	ldr	r1, [pc, #160]	; 15064 <__assert_fail@plt+0x40a0>
   14fc0:	sub	sp, sp, #12
   14fc4:	mov	r5, r0
   14fc8:	add	r1, pc, r1
   14fcc:	ldr	r0, [r2, #4]
   14fd0:	mov	r4, r2
   14fd4:	bl	10d24 <strcmp@plt>
   14fd8:	cmp	r0, #0
   14fdc:	beq	14fe8 <__assert_fail@plt+0x4024>
   14fe0:	add	sp, sp, #12
   14fe4:	pop	{r4, r5, r6, r7, pc}
   14fe8:	ldr	r1, [pc, #120]	; 15068 <__assert_fail@plt+0x40a4>
   14fec:	mov	r0, r4
   14ff0:	add	r1, pc, r1
   14ff4:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   14ff8:	subs	r7, r0, #0
   14ffc:	beq	15020 <__assert_fail@plt+0x405c>
   15000:	ldr	r3, [r7, #4]
   15004:	mov	r2, r4
   15008:	str	r3, [r5, #8]
   1500c:	mov	r1, r6
   15010:	mov	r0, r5
   15014:	add	sp, sp, #12
   15018:	pop	{r4, r5, r6, r7, lr}
   1501c:	b	13140 <__assert_fail@plt+0x217c>
   15020:	ldr	r1, [pc, #68]	; 1506c <__assert_fail@plt+0x40a8>
   15024:	mov	r0, r4
   15028:	add	r1, pc, r1
   1502c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   15030:	subs	r7, r0, #0
   15034:	beq	14fe0 <__assert_fail@plt+0x401c>
   15038:	ldr	r3, [pc, #48]	; 15070 <__assert_fail@plt+0x40ac>
   1503c:	mov	r2, #3
   15040:	add	r3, pc, r3
   15044:	str	r3, [sp]
   15048:	mov	r1, r6
   1504c:	str	r2, [r5, #16]
   15050:	mov	r3, r7
   15054:	mov	r2, r4
   15058:	mov	r0, r5
   1505c:	bl	11e3c <__assert_fail@plt+0xe78>
   15060:	b	15000 <__assert_fail@plt+0x403c>
   15064:			; <UNDEFINED> instruction: 0x0000d6bc
   15068:	ldrdeq	sp, [r0], -r0
   1506c:	andeq	sp, r0, r4, lsr #23
   15070:	andeq	sp, r0, r0, lsr #23
   15074:	push	{r4, r5, r6, lr}
   15078:	mov	r6, r1
   1507c:	ldr	r1, [pc, #76]	; 150d0 <__assert_fail@plt+0x410c>
   15080:	mov	r5, r0
   15084:	add	r1, pc, r1
   15088:	ldr	r0, [r2, #4]
   1508c:	mov	r4, r2
   15090:	bl	10d24 <strcmp@plt>
   15094:	cmp	r0, #0
   15098:	popne	{r4, r5, r6, pc}
   1509c:	ldr	r1, [pc, #48]	; 150d4 <__assert_fail@plt+0x4110>
   150a0:	mov	r0, r4
   150a4:	add	r1, pc, r1
   150a8:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   150ac:	cmp	r0, #0
   150b0:	popeq	{r4, r5, r6, pc}
   150b4:	ldr	r3, [r0, #4]
   150b8:	mov	r2, r4
   150bc:	str	r3, [r5, #8]
   150c0:	mov	r1, r6
   150c4:	mov	r0, r5
   150c8:	pop	{r4, r5, r6, lr}
   150cc:	b	13140 <__assert_fail@plt+0x217c>
   150d0:	andeq	sp, r0, r0, lsl #12
   150d4:	strdeq	lr, [r0], -r8
   150d8:	ldrb	r3, [r2, #52]	; 0x34
   150dc:	cmp	r3, #0
   150e0:	bxeq	lr
   150e4:	ldrb	r3, [r2, #53]	; 0x35
   150e8:	cmp	r3, #0
   150ec:	bxne	lr
   150f0:	mov	r0, r2
   150f4:	b	19904 <__assert_fail@plt+0x8940>
   150f8:	push	{r4, r5, r6, lr}
   150fc:	mov	r5, r0
   15100:	sub	sp, sp, #8
   15104:	mov	r0, r2
   15108:	mov	r4, r2
   1510c:	mov	r6, r1
   15110:	bl	19ca0 <__assert_fail@plt+0x8cdc>
   15114:	mov	r1, #64	; 0x40
   15118:	bl	10e80 <strchr@plt>
   1511c:	cmp	r0, #0
   15120:	beq	1514c <__assert_fail@plt+0x4188>
   15124:	ldr	r3, [pc, #40]	; 15154 <__assert_fail@plt+0x4190>
   15128:	mov	r0, #3
   1512c:	add	r3, pc, r3
   15130:	str	r3, [sp]
   15134:	mov	r2, r4
   15138:	str	r0, [r5, #16]
   1513c:	mov	r1, r6
   15140:	mov	r0, r5
   15144:	mov	r3, #0
   15148:	bl	11e3c <__assert_fail@plt+0xe78>
   1514c:	add	sp, sp, #8
   15150:	pop	{r4, r5, r6, pc}
   15154:	ldrdeq	sp, [r0], -r0
   15158:	ldr	r1, [pc, #140]	; 151ec <__assert_fail@plt+0x4228>
   1515c:	push	{r4, r5, r6, r7, r8, lr}
   15160:	mov	r0, r2
   15164:	add	r1, pc, r1
   15168:	mov	r7, r2
   1516c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   15170:	cmp	r0, #0
   15174:	popeq	{r4, r5, r6, r7, r8, pc}
   15178:	ldr	r4, [r0, #12]
   1517c:	ldr	r5, [r0, #8]
   15180:	add	r5, r4, r5
   15184:	cmp	r4, r5
   15188:	popcs	{r4, r5, r6, r7, r8, pc}
   1518c:	ldr	r8, [pc, #92]	; 151f0 <__assert_fail@plt+0x422c>
   15190:	add	r8, pc, r8
   15194:	b	151b4 <__assert_fail@plt+0x41f0>
   15198:	mov	r0, r4
   1519c:	mov	r1, r6
   151a0:	bl	10f04 <strnlen@plt>
   151a4:	add	r0, r0, #1
   151a8:	add	r4, r4, r0
   151ac:	cmp	r5, r4
   151b0:	popls	{r4, r5, r6, r7, r8, pc}
   151b4:	sub	r6, r5, r4
   151b8:	cmp	r6, #10
   151bc:	bne	15198 <__assert_fail@plt+0x41d4>
   151c0:	mov	r2, r6
   151c4:	mov	r1, r8
   151c8:	mov	r0, r4
   151cc:	bl	10d90 <memcmp@plt>
   151d0:	cmp	r0, #0
   151d4:	bne	15198 <__assert_fail@plt+0x41d4>
   151d8:	ldr	r3, [pc, #20]	; 151f4 <__assert_fail@plt+0x4230>
   151dc:	add	r3, pc, r3
   151e0:	add	r3, r3, #268	; 0x10c
   151e4:	str	r3, [r7, #48]	; 0x30
   151e8:	pop	{r4, r5, r6, r7, r8, pc}
   151ec:	andeq	sp, r0, r0, asr #21
   151f0:	andeq	sp, r0, r0, lsr #21
   151f4:	andeq	r1, r2, ip, asr #20
   151f8:	push	{r0, r1, r2, r3}
   151fc:	ldr	r3, [pc, #96]	; 15264 <__assert_fail@plt+0x42a0>
   15200:	ldr	r2, [pc, #96]	; 15268 <__assert_fail@plt+0x42a4>
   15204:	add	r3, pc, r3
   15208:	push	{lr}		; (str lr, [sp, #-4]!)
   1520c:	sub	sp, sp, #12
   15210:	ldr	r1, [r3, r2]
   15214:	ldr	r0, [pc, #80]	; 1526c <__assert_fail@plt+0x42a8>
   15218:	add	ip, sp, #20
   1521c:	str	ip, [sp]
   15220:	ldr	ip, [r1]
   15224:	mov	r2, #13
   15228:	str	ip, [sp, #4]
   1522c:	ldr	r4, [r3, r0]
   15230:	ldr	r0, [pc, #56]	; 15270 <__assert_fail@plt+0x42ac>
   15234:	mov	r1, #1
   15238:	add	r0, pc, r0
   1523c:	ldr	r3, [r4]
   15240:	bl	10dcc <fwrite@plt>
   15244:	ldr	r2, [pc, #40]	; 15274 <__assert_fail@plt+0x42b0>
   15248:	ldr	r0, [r4]
   1524c:	ldr	r3, [sp]
   15250:	add	r2, pc, r2
   15254:	mov	r1, #1
   15258:	bl	10e20 <__vfprintf_chk@plt>
   1525c:	mov	r0, #1
   15260:	bl	10e5c <exit@plt>
   15264:	andeq	r1, r2, r0, lsl #25
   15268:	andeq	r0, r0, r4, lsl r1
   1526c:	andeq	r0, r0, ip, lsr r1
   15270:	andeq	ip, r0, r0, lsl r4
   15274:	andeq	sp, r0, ip, ror #19
   15278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1527c:	mov	r8, r1
   15280:	ldr	r1, [pc, #612]	; 154ec <__assert_fail@plt+0x4528>
   15284:	sub	sp, sp, #28
   15288:	ldr	r3, [r8, #12]
   1528c:	mov	r9, r0
   15290:	add	r1, pc, r1
   15294:	mov	r0, r2
   15298:	mov	r5, r2
   1529c:	str	r3, [sp, #16]
   152a0:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   152a4:	subs	sl, r0, #0
   152a8:	beq	1534c <__assert_fail@plt+0x4388>
   152ac:	ldr	r3, [sl, #8]
   152b0:	tst	r3, #3
   152b4:	bne	153f8 <__assert_fail@plt+0x4434>
   152b8:	cmp	r5, #0
   152bc:	beq	1536c <__assert_fail@plt+0x43a8>
   152c0:	ldr	r7, [pc, #552]	; 154f0 <__assert_fail@plt+0x452c>
   152c4:	ldr	r6, [pc, #552]	; 154f4 <__assert_fail@plt+0x4530>
   152c8:	ldr	fp, [pc, #552]	; 154f8 <__assert_fail@plt+0x4534>
   152cc:	add	r7, pc, r7
   152d0:	add	r6, pc, r6
   152d4:	add	fp, pc, fp
   152d8:	mov	r4, r5
   152dc:	mov	r1, r7
   152e0:	mov	r0, r4
   152e4:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   152e8:	mov	r1, r6
   152ec:	subs	r3, r0, #0
   152f0:	bne	1539c <__assert_fail@plt+0x43d8>
   152f4:	ldr	r4, [r4, #16]
   152f8:	subs	r0, r4, #0
   152fc:	beq	1536c <__assert_fail@plt+0x43a8>
   15300:	cmp	r5, r4
   15304:	beq	152dc <__assert_fail@plt+0x4318>
   15308:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1530c:	cmp	r0, #0
   15310:	beq	15354 <__assert_fail@plt+0x4390>
   15314:	ldr	r1, [pc, #480]	; 154fc <__assert_fail@plt+0x4538>
   15318:	mov	r0, r4
   1531c:	add	r1, pc, r1
   15320:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   15324:	subs	r7, r0, #0
   15328:	beq	15468 <__assert_fail@plt+0x44a4>
   1532c:	bl	19dec <__assert_fail@plt+0x8e28>
   15330:	ldr	r4, [sl, #8]
   15334:	lsl	r6, r0, #2
   15338:	mov	r1, r6
   1533c:	mov	r0, r4
   15340:	bl	211b4 <__assert_fail@plt+0x101f0>
   15344:	cmp	r1, #0
   15348:	bne	15430 <__assert_fail@plt+0x446c>
   1534c:	add	sp, sp, #28
   15350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15354:	mov	r1, fp
   15358:	mov	r0, r4
   1535c:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   15360:	cmp	r0, #0
   15364:	bne	15314 <__assert_fail@plt+0x4350>
   15368:	b	152dc <__assert_fail@plt+0x4318>
   1536c:	ldr	r3, [pc, #396]	; 15500 <__assert_fail@plt+0x453c>
   15370:	mov	r0, #3
   15374:	add	r3, pc, r3
   15378:	str	r3, [sp]
   1537c:	mov	r2, r5
   15380:	str	r0, [r9, #16]
   15384:	mov	r1, r8
   15388:	mov	r0, r9
   1538c:	mov	r3, #0
   15390:	bl	11e3c <__assert_fail@plt+0xe78>
   15394:	add	sp, sp, #28
   15398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1539c:	str	r3, [sp, #20]
   153a0:	bl	19dec <__assert_fail@plt+0x8e28>
   153a4:	ldr	r3, [sp, #20]
   153a8:	add	r2, r0, #1
   153ac:	cmp	r2, #1
   153b0:	bhi	153c0 <__assert_fail@plt+0x43fc>
   153b4:	ldr	r2, [r8]
   153b8:	tst	r2, #2
   153bc:	bne	1534c <__assert_fail@plt+0x4388>
   153c0:	mov	r1, r0
   153c4:	ldr	r0, [sp, #16]
   153c8:	str	r3, [sp, #20]
   153cc:	bl	1a2d4 <__assert_fail@plt+0x9310>
   153d0:	ldr	r3, [sp, #20]
   153d4:	subs	r6, r0, #0
   153d8:	beq	154dc <__assert_fail@plt+0x4518>
   153dc:	ldr	r1, [pc, #288]	; 15504 <__assert_fail@plt+0x4540>
   153e0:	add	r1, pc, r1
   153e4:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   153e8:	cmp	r0, #0
   153ec:	beq	15498 <__assert_fail@plt+0x44d4>
   153f0:	mov	r4, r6
   153f4:	b	15314 <__assert_fail@plt+0x4350>
   153f8:	ldr	r2, [pc, #264]	; 15508 <__assert_fail@plt+0x4544>
   153fc:	mov	r0, #3
   15400:	add	r2, pc, r2
   15404:	mov	r1, #4
   15408:	str	r3, [sp, #4]
   1540c:	str	r2, [sp]
   15410:	mov	r3, sl
   15414:	str	r0, [r9, #16]
   15418:	mov	r2, r5
   1541c:	str	r1, [sp, #8]
   15420:	mov	r0, r9
   15424:	mov	r1, r8
   15428:	bl	11e3c <__assert_fail@plt+0xe78>
   1542c:	b	152b8 <__assert_fail@plt+0x42f4>
   15430:	ldr	r0, [pc, #212]	; 1550c <__assert_fail@plt+0x4548>
   15434:	mov	ip, #3
   15438:	add	r0, pc, r0
   1543c:	str	r0, [sp]
   15440:	str	r6, [sp, #8]
   15444:	str	r4, [sp, #4]
   15448:	mov	r3, r7
   1544c:	mov	r2, r5
   15450:	mov	r1, r8
   15454:	str	ip, [r9, #16]
   15458:	mov	r0, r9
   1545c:	bl	11e3c <__assert_fail@plt+0xe78>
   15460:	add	sp, sp, #28
   15464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15468:	ldr	r0, [pc, #160]	; 15510 <__assert_fail@plt+0x454c>
   1546c:	mov	ip, #3
   15470:	add	r0, pc, r0
   15474:	mov	r3, r7
   15478:	str	r0, [sp]
   1547c:	mov	r2, r4
   15480:	mov	r1, r8
   15484:	str	ip, [r9, #16]
   15488:	mov	r0, r9
   1548c:	bl	11e3c <__assert_fail@plt+0xe78>
   15490:	add	sp, sp, #28
   15494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15498:	ldr	r1, [pc, #116]	; 15514 <__assert_fail@plt+0x4550>
   1549c:	mov	r0, r6
   154a0:	add	r1, pc, r1
   154a4:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   154a8:	subs	r3, r0, #0
   154ac:	bne	153f0 <__assert_fail@plt+0x442c>
   154b0:	ldr	r2, [pc, #96]	; 15518 <__assert_fail@plt+0x4554>
   154b4:	mov	r1, #3
   154b8:	add	r2, pc, r2
   154bc:	str	r2, [sp]
   154c0:	mov	r0, r9
   154c4:	str	r1, [r9, #16]
   154c8:	mov	r2, r6
   154cc:	mov	r1, r8
   154d0:	mov	r4, r6
   154d4:	bl	11e3c <__assert_fail@plt+0xe78>
   154d8:	b	15314 <__assert_fail@plt+0x4350>
   154dc:	ldr	r0, [pc, #56]	; 1551c <__assert_fail@plt+0x4558>
   154e0:	mov	ip, #3
   154e4:	add	r0, pc, r0
   154e8:	b	15478 <__assert_fail@plt+0x44b4>
   154ec:	andeq	sp, r0, ip, asr #19
   154f0:	andeq	sp, r0, r0, lsl #21
   154f4:	andeq	ip, r0, r8, lsl #31
   154f8:	andeq	sp, r0, r4, asr #19
   154fc:	andeq	sp, r0, r4, asr #20
   15500:	ldrdeq	sp, [r0], -r0
   15504:	andeq	ip, r0, r8, ror lr
   15508:	andeq	sp, r0, r8, ror #16
   1550c:	andeq	sp, r0, r4, ror #17
   15510:	andeq	sp, r0, ip, ror r8
   15514:	strdeq	sp, [r0], -r8
   15518:	strdeq	sp, [r0], -ip
   1551c:	andeq	sp, r0, r4, asr #15
   15520:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15524:	mov	r9, r1
   15528:	ldr	r1, [pc, #180]	; 155e4 <__assert_fail@plt+0x4620>
   1552c:	mov	r6, r2
   15530:	mov	r8, r0
   15534:	add	r1, pc, r1
   15538:	mov	r0, r2
   1553c:	mov	r2, #3
   15540:	bl	10f70 <strncmp@plt>
   15544:	cmp	r0, #0
   15548:	beq	155c0 <__assert_fail@plt+0x45fc>
   1554c:	ldr	r1, [pc, #148]	; 155e8 <__assert_fail@plt+0x4624>
   15550:	mov	r2, #3
   15554:	add	r1, pc, r1
   15558:	mov	r0, r6
   1555c:	bl	10f70 <strncmp@plt>
   15560:	cmp	r0, #0
   15564:	movne	sl, #1
   15568:	beq	155c0 <__assert_fail@plt+0x45fc>
   1556c:	ldr	r4, [pc, #120]	; 155ec <__assert_fail@plt+0x4628>
   15570:	ldr	r5, [pc, #120]	; 155f0 <__assert_fail@plt+0x462c>
   15574:	add	r4, pc, r4
   15578:	add	r5, pc, r5
   1557c:	add	r7, r4, #256	; 0x100
   15580:	b	15590 <__assert_fail@plt+0x45cc>
   15584:	cmp	r4, r7
   15588:	beq	155d4 <__assert_fail@plt+0x4610>
   1558c:	ldr	r5, [r4, #4]!
   15590:	mov	r1, r6
   15594:	ldr	r0, [r5]
   15598:	bl	10d24 <strcmp@plt>
   1559c:	cmp	r0, #0
   155a0:	bne	15584 <__assert_fail@plt+0x45c0>
   155a4:	cmp	sl, #0
   155a8:	mov	r2, r9
   155ac:	mov	r1, r8
   155b0:	mov	r0, r5
   155b4:	beq	155cc <__assert_fail@plt+0x4608>
   155b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   155bc:	b	11ce0 <__assert_fail@plt+0xd1c>
   155c0:	add	r6, r6, #3
   155c4:	mov	sl, #0
   155c8:	b	1556c <__assert_fail@plt+0x45a8>
   155cc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   155d0:	b	11d68 <__assert_fail@plt+0xda4>
   155d4:	ldr	r0, [pc, #24]	; 155f4 <__assert_fail@plt+0x4630>
   155d8:	mov	r1, r6
   155dc:	add	r0, pc, r0
   155e0:	bl	151f8 <__assert_fail@plt+0x4234>
   155e4:	andeq	sp, r0, r0, asr #16
   155e8:	andeq	sp, r0, r4, lsr #16
   155ec:			; <UNDEFINED> instruction: 0x000216b4
   155f0:	andeq	r1, r2, ip, lsl #21
   155f4:	andeq	sp, r0, r0, ror #12
   155f8:	push	{r4, r5, r6, r7, r8, lr}
   155fc:	mov	r8, r0
   15600:	ldr	r4, [pc, #196]	; 156cc <__assert_fail@plt+0x4708>
   15604:	ldr	r3, [pc, #196]	; 156d0 <__assert_fail@plt+0x470c>
   15608:	ldr	r7, [pc, #196]	; 156d4 <__assert_fail@plt+0x4710>
   1560c:	add	r4, pc, r4
   15610:	add	r3, pc, r3
   15614:	mov	r6, r1
   15618:	add	r5, r4, #256	; 0x100
   1561c:	mov	r0, #0
   15620:	add	r7, pc, r7
   15624:	b	15634 <__assert_fail@plt+0x4670>
   15628:	cmp	r4, r5
   1562c:	beq	1565c <__assert_fail@plt+0x4698>
   15630:	ldr	r3, [r4, #4]!
   15634:	ldrh	r2, [r3, #12]
   15638:	cmp	r2, #0
   1563c:	beq	15628 <__assert_fail@plt+0x4664>
   15640:	cmp	r0, #0
   15644:	bne	15628 <__assert_fail@plt+0x4664>
   15648:	mov	r0, r3
   1564c:	mov	r1, r6
   15650:	bl	134c0 <__assert_fail@plt+0x24fc>
   15654:	cmp	r4, r5
   15658:	bne	15630 <__assert_fail@plt+0x466c>
   1565c:	cmp	r0, #0
   15660:	popeq	{r4, r5, r6, r7, r8, pc}
   15664:	cmp	r8, #0
   15668:	beq	156a4 <__assert_fail@plt+0x46e0>
   1566c:	ldr	r3, [pc, #100]	; 156d8 <__assert_fail@plt+0x4714>
   15670:	ldr	r3, [r7, r3]
   15674:	ldr	r3, [r3]
   15678:	cmp	r3, #2
   1567c:	popgt	{r4, r5, r6, r7, r8, pc}
   15680:	ldr	r3, [pc, #84]	; 156dc <__assert_fail@plt+0x4718>
   15684:	ldr	r0, [pc, #84]	; 156e0 <__assert_fail@plt+0x471c>
   15688:	mov	r2, #46	; 0x2e
   1568c:	ldr	r3, [r7, r3]
   15690:	mov	r1, #1
   15694:	add	r0, pc, r0
   15698:	ldr	r3, [r3]
   1569c:	pop	{r4, r5, r6, r7, r8, lr}
   156a0:	b	10dcc <fwrite@plt>
   156a4:	ldr	r3, [pc, #48]	; 156dc <__assert_fail@plt+0x4718>
   156a8:	ldr	r0, [pc, #52]	; 156e4 <__assert_fail@plt+0x4720>
   156ac:	mov	r2, #64	; 0x40
   156b0:	ldr	r3, [r7, r3]
   156b4:	mov	r1, #1
   156b8:	add	r0, pc, r0
   156bc:	ldr	r3, [r3]
   156c0:	bl	10dcc <fwrite@plt>
   156c4:	mov	r0, #2
   156c8:	bl	10e5c <exit@plt>
   156cc:	andeq	r1, r2, ip, lsl r6
   156d0:	strdeq	r1, [r2], -r4
   156d4:	andeq	r1, r2, r4, ror #16
   156d8:	andeq	r0, r0, r0, asr #2
   156dc:	andeq	r0, r0, ip, lsr r1
   156e0:	andeq	sp, r0, ip, lsr #14
   156e4:	andeq	sp, r0, r4, asr #13
   156e8:	ldr	ip, [pc, #100]	; 15754 <__assert_fail@plt+0x4790>
   156ec:	push	{r0, r1, r2, r3}
   156f0:	add	ip, pc, ip
   156f4:	ldr	r2, [pc, #92]	; 15758 <__assert_fail@plt+0x4794>
   156f8:	push	{lr}		; (str lr, [sp, #-4]!)
   156fc:	sub	sp, sp, #12
   15700:	ldr	r2, [ip, r2]
   15704:	ldr	r3, [pc, #80]	; 1575c <__assert_fail@plt+0x4798>
   15708:	add	r1, sp, #20
   1570c:	str	r1, [sp]
   15710:	ldr	r1, [r2]
   15714:	ldr	r0, [pc, #68]	; 15760 <__assert_fail@plt+0x479c>
   15718:	str	r1, [sp, #4]
   1571c:	ldr	r4, [ip, r3]
   15720:	ldr	r5, [sp, #16]
   15724:	mov	r2, #13
   15728:	mov	r1, #1
   1572c:	ldr	r3, [r4]
   15730:	add	r0, pc, r0
   15734:	bl	10dcc <fwrite@plt>
   15738:	ldr	r0, [r4]
   1573c:	mov	r2, r5
   15740:	ldr	r3, [sp]
   15744:	mov	r1, #1
   15748:	bl	10e20 <__vfprintf_chk@plt>
   1574c:	mov	r0, #1
   15750:	bl	10e5c <exit@plt>
   15754:	muleq	r2, r4, r7
   15758:	andeq	r0, r0, r4, lsl r1
   1575c:	andeq	r0, r0, ip, lsr r1
   15760:	andeq	fp, r0, r8, lsl pc
   15764:	push	{r4, r5, r6, lr}
   15768:	sub	sp, sp, #16
   1576c:	add	r3, sp, #16
   15770:	stmdb	r3, {r0, r1, r2}
   15774:	ldr	r4, [sp, #12]
   15778:	ldr	r6, [sp, #8]
   1577c:	cmp	r4, #0
   15780:	beq	157a0 <__assert_fail@plt+0x47dc>
   15784:	ldr	r0, [r4, #8]
   15788:	ldr	r5, [r4, #12]
   1578c:	bl	10d60 <free@plt>
   15790:	mov	r0, r4
   15794:	bl	10d60 <free@plt>
   15798:	subs	r4, r5, #0
   1579c:	bne	15784 <__assert_fail@plt+0x47c0>
   157a0:	cmp	r6, #0
   157a4:	beq	157b8 <__assert_fail@plt+0x47f4>
   157a8:	mov	r0, r6
   157ac:	add	sp, sp, #16
   157b0:	pop	{r4, r5, r6, lr}
   157b4:	b	10d60 <free@plt>
   157b8:	add	sp, sp, #16
   157bc:	pop	{r4, r5, r6, pc}
   157c0:	push	{r4, r5, r6, lr}
   157c4:	sub	sp, sp, #32
   157c8:	add	lr, sp, #4
   157cc:	ldr	r4, [sp, #48]	; 0x30
   157d0:	mov	r5, r0
   157d4:	cmp	r4, #0
   157d8:	stm	lr, {r1, r2, r3}
   157dc:	beq	15834 <__assert_fail@plt+0x4870>
   157e0:	ldm	lr, {r0, r1, r2}
   157e4:	add	r6, sp, #20
   157e8:	ldr	ip, [sp, #4]
   157ec:	add	r2, ip, r4
   157f0:	cmp	r4, r2
   157f4:	stm	r6, {r0, r1, r3}
   157f8:	ldr	r0, [sp, #8]
   157fc:	bge	1580c <__assert_fail@plt+0x4848>
   15800:	lsl	r4, r4, #1
   15804:	cmp	r4, r2
   15808:	blt	15800 <__assert_fail@plt+0x483c>
   1580c:	mov	r1, r4
   15810:	bl	10da8 <realloc@plt>
   15814:	cmp	r0, #0
   15818:	beq	15848 <__assert_fail@plt+0x4884>
   1581c:	str	r0, [sp, #24]
   15820:	ldm	r6, {r0, r1, r2}
   15824:	stm	r5, {r0, r1, r2}
   15828:	mov	r0, r5
   1582c:	add	sp, sp, #32
   15830:	pop	{r4, r5, r6, pc}
   15834:	ldm	lr, {r0, r1, r2}
   15838:	stm	r5, {r0, r1, r3}
   1583c:	mov	r0, r5
   15840:	add	sp, sp, #32
   15844:	pop	{r4, r5, r6, pc}
   15848:	ldr	r0, [pc, #8]	; 15858 <__assert_fail@plt+0x4894>
   1584c:	mov	r1, r4
   15850:	add	r0, pc, r0
   15854:	bl	156e8 <__assert_fail@plt+0x4724>
   15858:	andeq	sp, r0, ip, ror #26
   1585c:	ldr	r3, [pc, #124]	; 158e0 <__assert_fail@plt+0x491c>
   15860:	ldr	ip, [pc, #124]	; 158e4 <__assert_fail@plt+0x4920>
   15864:	add	r3, pc, r3
   15868:	push	{r4, r5, r6, r7, lr}
   1586c:	sub	sp, sp, #28
   15870:	ldr	r6, [r3, ip]
   15874:	mov	r5, r2
   15878:	mov	r2, r3
   1587c:	add	r3, sp, #8
   15880:	mov	ip, #0
   15884:	ldr	lr, [r6]
   15888:	mov	r4, r0
   1588c:	str	ip, [sp, #12]
   15890:	str	ip, [sp, #8]
   15894:	str	ip, [sp, #16]
   15898:	mov	r7, r1
   1589c:	str	r5, [sp]
   158a0:	ldm	r3, {r1, r2, r3}
   158a4:	str	lr, [sp, #20]
   158a8:	bl	157c0 <__assert_fail@plt+0x47fc>
   158ac:	mov	r2, r5
   158b0:	mov	r1, r7
   158b4:	ldr	r0, [r4, #4]
   158b8:	bl	10d84 <memcpy@plt>
   158bc:	ldr	r2, [sp, #20]
   158c0:	ldr	r3, [r6]
   158c4:	str	r5, [r4]
   158c8:	cmp	r2, r3
   158cc:	bne	158dc <__assert_fail@plt+0x4918>
   158d0:	mov	r0, r4
   158d4:	add	sp, sp, #28
   158d8:	pop	{r4, r5, r6, r7, pc}
   158dc:	bl	10d9c <__stack_chk_fail@plt>
   158e0:	andeq	r1, r2, r0, lsr #12
   158e4:	andeq	r0, r0, r4, lsl r1
   158e8:	ldr	ip, [pc, #132]	; 15974 <__assert_fail@plt+0x49b0>
   158ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   158f0:	sub	sp, sp, #36	; 0x24
   158f4:	ldr	lr, [pc, #124]	; 15978 <__assert_fail@plt+0x49b4>
   158f8:	add	ip, pc, ip
   158fc:	add	r4, sp, #12
   15900:	ldr	r5, [sp, #68]	; 0x44
   15904:	stm	r4, {r1, r2, r3}
   15908:	mov	r6, r0
   1590c:	ldr	r7, [ip, lr]
   15910:	ldm	r4, {r1, r2, r3}
   15914:	mov	r0, r4
   15918:	ldr	lr, [r7]
   1591c:	str	r5, [sp]
   15920:	str	lr, [sp, #28]
   15924:	ldr	r9, [sp, #64]	; 0x40
   15928:	bl	157c0 <__assert_fail@plt+0x47fc>
   1592c:	ldr	r8, [sp, #12]
   15930:	ldr	r0, [sp, #16]
   15934:	mov	r2, r5
   15938:	mov	r1, r9
   1593c:	add	r0, r0, r8
   15940:	add	r5, r5, r8
   15944:	bl	10d84 <memcpy@plt>
   15948:	str	r5, [sp, #12]
   1594c:	ldm	r4, {r0, r1, r2}
   15950:	ldr	ip, [sp, #28]
   15954:	ldr	r3, [r7]
   15958:	stm	r6, {r0, r1, r2}
   1595c:	cmp	ip, r3
   15960:	bne	15970 <__assert_fail@plt+0x49ac>
   15964:	mov	r0, r6
   15968:	add	sp, sp, #36	; 0x24
   1596c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15970:	bl	10d9c <__stack_chk_fail@plt>
   15974:	andeq	r1, r2, ip, lsl #11
   15978:	andeq	r0, r0, r4, lsl r1
   1597c:	ldr	ip, [pc, #200]	; 15a4c <__assert_fail@plt+0x4a88>
   15980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15984:	sub	sp, sp, #36	; 0x24
   15988:	ldr	lr, [pc, #192]	; 15a50 <__assert_fail@plt+0x4a8c>
   1598c:	add	ip, pc, ip
   15990:	add	r5, sp, #12
   15994:	ldr	r4, [sp, #80]	; 0x50
   15998:	stm	r5, {r1, r2, r3}
   1599c:	mov	r6, r0
   159a0:	ldr	r8, [ip, lr]
   159a4:	ldr	r9, [sp, #72]	; 0x48
   159a8:	ldm	r5, {r1, r2, r3}
   159ac:	mov	r0, r5
   159b0:	ldr	lr, [r8]
   159b4:	str	r4, [sp]
   159b8:	str	lr, [sp, #28]
   159bc:	ldr	fp, [sp, #76]	; 0x4c
   159c0:	bl	157c0 <__assert_fail@plt+0x47fc>
   159c4:	ldr	r1, [r9, #4]
   159c8:	ldr	sl, [sp, #16]
   159cc:	ldr	r7, [sp, #12]
   159d0:	add	r0, r1, r4
   159d4:	sub	r2, r7, r1
   159d8:	add	r0, sl, r0
   159dc:	add	r1, sl, r1
   159e0:	bl	10d54 <memmove@plt>
   159e4:	ldr	r0, [r9, #4]
   159e8:	mov	r1, fp
   159ec:	add	r0, sl, r0
   159f0:	mov	r2, r4
   159f4:	bl	10d84 <memcpy@plt>
   159f8:	ldr	r3, [r9, #12]
   159fc:	add	r7, r4, r7
   15a00:	cmp	r3, #0
   15a04:	beq	15a20 <__assert_fail@plt+0x4a5c>
   15a08:	ldr	r2, [r3, #4]
   15a0c:	add	r2, r2, r4
   15a10:	str	r2, [r3, #4]
   15a14:	ldr	r3, [r3, #12]
   15a18:	cmp	r3, #0
   15a1c:	bne	15a08 <__assert_fail@plt+0x4a44>
   15a20:	str	r7, [sp, #12]
   15a24:	ldm	r5, {r0, r1, r2}
   15a28:	ldr	ip, [sp, #28]
   15a2c:	ldr	r3, [r8]
   15a30:	stm	r6, {r0, r1, r2}
   15a34:	cmp	ip, r3
   15a38:	mov	r0, r6
   15a3c:	bne	15a48 <__assert_fail@plt+0x4a84>
   15a40:	add	sp, sp, #36	; 0x24
   15a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a48:	bl	10d9c <__stack_chk_fail@plt>
   15a4c:	strdeq	r1, [r2], -r8
   15a50:	andeq	r0, r0, r4, lsl r1
   15a54:	push	{r4, r5, r6, r7, lr}
   15a58:	sub	sp, sp, #60	; 0x3c
   15a5c:	ldr	lr, [pc, #216]	; 15b3c <__assert_fail@plt+0x4b78>
   15a60:	ldr	r4, [pc, #216]	; 15b40 <__assert_fail@plt+0x4b7c>
   15a64:	add	ip, sp, #12
   15a68:	add	lr, pc, lr
   15a6c:	stm	ip, {r1, r2, r3}
   15a70:	mov	r5, r0
   15a74:	ldr	r6, [lr, r4]
   15a78:	ldr	r7, [sp, #80]	; 0x50
   15a7c:	ldr	r3, [sp, #84]	; 0x54
   15a80:	ldr	r4, [r6]
   15a84:	stm	sp, {r3, r7}
   15a88:	add	r7, sp, #28
   15a8c:	ldm	ip, {r1, r2, r3}
   15a90:	mov	r0, r7
   15a94:	str	r4, [sp, #52]	; 0x34
   15a98:	ldr	r4, [sp, #88]	; 0x58
   15a9c:	bl	158e8 <__assert_fail@plt+0x4924>
   15aa0:	ldm	r7, {r0, r1, r2}
   15aa4:	add	ip, sp, #40	; 0x28
   15aa8:	stm	ip, {r0, r1, r2}
   15aac:	ldr	r2, [sp, #48]	; 0x30
   15ab0:	cmp	r2, #0
   15ab4:	bne	15ac0 <__assert_fail@plt+0x4afc>
   15ab8:	b	15b30 <__assert_fail@plt+0x4b6c>
   15abc:	mov	r2, r3
   15ac0:	ldr	r3, [r2, #12]
   15ac4:	cmp	r3, #0
   15ac8:	bne	15abc <__assert_fail@plt+0x4af8>
   15acc:	add	r2, r2, #12
   15ad0:	str	r4, [r2]
   15ad4:	ldm	ip, {r0, r1, r2}
   15ad8:	cmp	r4, #0
   15adc:	stm	r5, {r0, r1, r2}
   15ae0:	beq	15b00 <__assert_fail@plt+0x4b3c>
   15ae4:	ldr	r2, [sp, #12]
   15ae8:	ldr	r3, [r4, #4]
   15aec:	add	r3, r3, r2
   15af0:	str	r3, [r4, #4]
   15af4:	ldr	r4, [r4, #12]
   15af8:	cmp	r4, #0
   15afc:	bne	15ae8 <__assert_fail@plt+0x4b24>
   15b00:	mov	r3, #0
   15b04:	str	r3, [sp, #88]	; 0x58
   15b08:	add	r3, sp, #76	; 0x4c
   15b0c:	ldmib	r3, {r0, r1, r2}
   15b10:	bl	15764 <__assert_fail@plt+0x47a0>
   15b14:	ldr	r2, [sp, #52]	; 0x34
   15b18:	ldr	r3, [r6]
   15b1c:	mov	r0, r5
   15b20:	cmp	r2, r3
   15b24:	bne	15b38 <__assert_fail@plt+0x4b74>
   15b28:	add	sp, sp, #60	; 0x3c
   15b2c:	pop	{r4, r5, r6, r7, pc}
   15b30:	add	r2, sp, #48	; 0x30
   15b34:	b	15ad0 <__assert_fail@plt+0x4b0c>
   15b38:	bl	10d9c <__stack_chk_fail@plt>
   15b3c:	andeq	r1, r2, ip, lsl r4
   15b40:	andeq	r0, r0, r4, lsl r1
   15b44:	push	{r4, r5, r6, lr}
   15b48:	sub	sp, sp, #40	; 0x28
   15b4c:	ldr	r4, [pc, #304]	; 15c84 <__assert_fail@plt+0x4cc0>
   15b50:	ldr	r5, [pc, #304]	; 15c88 <__assert_fail@plt+0x4cc4>
   15b54:	add	r4, pc, r4
   15b58:	add	ip, sp, #12
   15b5c:	ldr	lr, [sp, #64]	; 0x40
   15b60:	stm	ip, {r1, r2, r3}
   15b64:	cmp	lr, #16
   15b68:	ldr	r5, [r4, r5]
   15b6c:	mov	r6, r0
   15b70:	ldr	r4, [sp, #56]	; 0x38
   15b74:	ldr	r3, [r5]
   15b78:	ldr	r2, [sp, #60]	; 0x3c
   15b7c:	str	r3, [sp, #36]	; 0x24
   15b80:	beq	15c04 <__assert_fail@plt+0x4c40>
   15b84:	ble	15bdc <__assert_fail@plt+0x4c18>
   15b88:	cmp	lr, #32
   15b8c:	beq	15c30 <__assert_fail@plt+0x4c6c>
   15b90:	cmp	lr, #64	; 0x40
   15b94:	bne	15c70 <__assert_fail@plt+0x4cac>
   15b98:	mov	r3, #8
   15b9c:	str	r3, [sp, #4]
   15ba0:	add	r3, sp, #24
   15ba4:	rev	lr, r2
   15ba8:	rev	r4, r4
   15bac:	str	r3, [sp]
   15bb0:	ldm	ip, {r1, r2, r3}
   15bb4:	str	r4, [sp, #28]
   15bb8:	str	lr, [sp, #24]
   15bbc:	bl	158e8 <__assert_fail@plt+0x4924>
   15bc0:	ldr	r2, [sp, #36]	; 0x24
   15bc4:	ldr	r3, [r5]
   15bc8:	mov	r0, r6
   15bcc:	cmp	r2, r3
   15bd0:	bne	15c80 <__assert_fail@plt+0x4cbc>
   15bd4:	add	sp, sp, #40	; 0x28
   15bd8:	pop	{r4, r5, r6, pc}
   15bdc:	cmp	lr, #8
   15be0:	bne	15c70 <__assert_fail@plt+0x4cac>
   15be4:	mov	r3, #1
   15be8:	str	r3, [sp, #4]
   15bec:	add	r3, sp, #24
   15bf0:	str	r3, [sp]
   15bf4:	ldm	ip, {r1, r2, r3}
   15bf8:	strb	r4, [sp, #24]
   15bfc:	bl	158e8 <__assert_fail@plt+0x4924>
   15c00:	b	15bc0 <__assert_fail@plt+0x4bfc>
   15c04:	uxth	r4, r4
   15c08:	mov	r2, #2
   15c0c:	lsr	r3, r4, #8
   15c10:	orr	r4, r3, r4, lsl #8
   15c14:	add	r3, sp, #24
   15c18:	str	r2, [sp, #4]
   15c1c:	str	r3, [sp]
   15c20:	ldm	ip, {r1, r2, r3}
   15c24:	strh	r4, [sp, #24]
   15c28:	bl	158e8 <__assert_fail@plt+0x4924>
   15c2c:	b	15bc0 <__assert_fail@plt+0x4bfc>
   15c30:	lsr	r3, r4, #24
   15c34:	lsl	r2, r4, #8
   15c38:	orr	r3, r3, r4, lsl #24
   15c3c:	and	r2, r2, #16711680	; 0xff0000
   15c40:	lsr	r4, r4, #8
   15c44:	orr	r3, r3, r2
   15c48:	and	r4, r4, #65280	; 0xff00
   15c4c:	orr	r4, r3, r4
   15c50:	mov	r2, #4
   15c54:	add	r3, sp, #24
   15c58:	str	r2, [sp, #4]
   15c5c:	str	r3, [sp]
   15c60:	ldm	ip, {r1, r2, r3}
   15c64:	str	r4, [sp, #24]
   15c68:	bl	158e8 <__assert_fail@plt+0x4924>
   15c6c:	b	15bc0 <__assert_fail@plt+0x4bfc>
   15c70:	ldr	r0, [pc, #20]	; 15c8c <__assert_fail@plt+0x4cc8>
   15c74:	mov	r1, lr
   15c78:	add	r0, pc, r0
   15c7c:	bl	156e8 <__assert_fail@plt+0x4724>
   15c80:	bl	10d9c <__stack_chk_fail@plt>
   15c84:	andeq	r1, r2, r0, lsr r3
   15c88:	andeq	r0, r0, r4, lsl r1
   15c8c:	andeq	sp, r0, r0, ror #18
   15c90:	push	{r4, r5, r6, lr}
   15c94:	sub	sp, sp, #48	; 0x30
   15c98:	ldr	lr, [pc, #132]	; 15d24 <__assert_fail@plt+0x4d60>
   15c9c:	ldr	r4, [pc, #132]	; 15d28 <__assert_fail@plt+0x4d64>
   15ca0:	add	lr, pc, lr
   15ca4:	add	ip, sp, #12
   15ca8:	ldr	r6, [sp, #64]	; 0x40
   15cac:	stm	ip, {r1, r2, r3}
   15cb0:	mov	r2, #16
   15cb4:	ldr	r5, [lr, r4]
   15cb8:	ldr	lr, [sp, #72]	; 0x48
   15cbc:	ldr	r4, [sp, #68]	; 0x44
   15cc0:	ldr	r3, [r5]
   15cc4:	rev	lr, lr
   15cc8:	str	r2, [sp, #4]
   15ccc:	str	r3, [sp, #44]	; 0x2c
   15cd0:	ldm	ip, {r1, r2, r3}
   15cd4:	rev	r4, r4
   15cd8:	ldr	ip, [sp, #76]	; 0x4c
   15cdc:	str	lr, [sp, #36]	; 0x24
   15ce0:	add	lr, sp, #24
   15ce4:	rev	ip, ip
   15ce8:	rev	r6, r6
   15cec:	str	lr, [sp]
   15cf0:	str	r4, [sp, #24]
   15cf4:	str	r6, [sp, #28]
   15cf8:	mov	r4, r0
   15cfc:	str	ip, [sp, #32]
   15d00:	bl	158e8 <__assert_fail@plt+0x4924>
   15d04:	ldr	r2, [sp, #44]	; 0x2c
   15d08:	ldr	r3, [r5]
   15d0c:	cmp	r2, r3
   15d10:	bne	15d20 <__assert_fail@plt+0x4d5c>
   15d14:	mov	r0, r4
   15d18:	add	sp, sp, #48	; 0x30
   15d1c:	pop	{r4, r5, r6, pc}
   15d20:	bl	10d9c <__stack_chk_fail@plt>
   15d24:	andeq	r1, r2, r4, ror #3
   15d28:	andeq	r0, r0, r4, lsl r1
   15d2c:	push	{r4, r5, lr}
   15d30:	sub	sp, sp, #44	; 0x2c
   15d34:	ldr	lr, [pc, #92]	; 15d98 <__assert_fail@plt+0x4dd4>
   15d38:	ldr	r4, [pc, #92]	; 15d9c <__assert_fail@plt+0x4dd8>
   15d3c:	add	lr, pc, lr
   15d40:	add	ip, sp, #20
   15d44:	mov	r5, #32
   15d48:	stm	ip, {r1, r2, r3}
   15d4c:	ldr	r4, [lr, r4]
   15d50:	ldr	lr, [sp, #56]	; 0x38
   15d54:	ldm	ip, {r1, r2, r3}
   15d58:	ldr	ip, [r4]
   15d5c:	str	lr, [sp]
   15d60:	mov	lr, #0
   15d64:	str	r5, [sp, #8]
   15d68:	str	lr, [sp, #4]
   15d6c:	mov	r5, r0
   15d70:	str	ip, [sp, #36]	; 0x24
   15d74:	bl	15b44 <__assert_fail@plt+0x4b80>
   15d78:	ldr	r2, [sp, #36]	; 0x24
   15d7c:	ldr	r3, [r4]
   15d80:	cmp	r2, r3
   15d84:	bne	15d94 <__assert_fail@plt+0x4dd0>
   15d88:	mov	r0, r5
   15d8c:	add	sp, sp, #44	; 0x2c
   15d90:	pop	{r4, r5, pc}
   15d94:	bl	10d9c <__stack_chk_fail@plt>
   15d98:	andeq	r1, r2, r8, asr #2
   15d9c:	andeq	r0, r0, r4, lsl r1
   15da0:	push	{r4, r5, r6, r7, lr}
   15da4:	sub	sp, sp, #44	; 0x2c
   15da8:	ldr	lr, [pc, #84]	; 15e04 <__assert_fail@plt+0x4e40>
   15dac:	ldr	r4, [pc, #84]	; 15e08 <__assert_fail@plt+0x4e44>
   15db0:	add	lr, pc, lr
   15db4:	add	ip, sp, #20
   15db8:	mov	r7, #64	; 0x40
   15dbc:	stm	ip, {r1, r2, r3}
   15dc0:	ldr	r6, [lr, r4]
   15dc4:	ldrd	r4, [sp, #64]	; 0x40
   15dc8:	ldm	ip, {r1, r2, r3}
   15dcc:	ldr	ip, [r6]
   15dd0:	strd	r4, [sp]
   15dd4:	str	r7, [sp, #8]
   15dd8:	mov	r4, r0
   15ddc:	str	ip, [sp, #36]	; 0x24
   15de0:	bl	15b44 <__assert_fail@plt+0x4b80>
   15de4:	ldr	r2, [sp, #36]	; 0x24
   15de8:	ldr	r3, [r6]
   15dec:	cmp	r2, r3
   15df0:	bne	15e00 <__assert_fail@plt+0x4e3c>
   15df4:	mov	r0, r4
   15df8:	add	sp, sp, #44	; 0x2c
   15dfc:	pop	{r4, r5, r6, r7, pc}
   15e00:	bl	10d9c <__stack_chk_fail@plt>
   15e04:	ldrdeq	r1, [r2], -r4
   15e08:	andeq	r0, r0, r4, lsl r1
   15e0c:	push	{r4, r5, lr}
   15e10:	sub	sp, sp, #36	; 0x24
   15e14:	ldr	lr, [pc, #84]	; 15e70 <__assert_fail@plt+0x4eac>
   15e18:	ldr	r4, [pc, #84]	; 15e74 <__assert_fail@plt+0x4eb0>
   15e1c:	add	lr, pc, lr
   15e20:	add	ip, sp, #12
   15e24:	mov	r5, #1
   15e28:	stm	ip, {r1, r2, r3}
   15e2c:	ldr	r4, [lr, r4]
   15e30:	ldm	ip, {r1, r2, r3}
   15e34:	add	lr, sp, #48	; 0x30
   15e38:	ldr	ip, [r4]
   15e3c:	str	r5, [sp, #4]
   15e40:	str	lr, [sp]
   15e44:	mov	r5, r0
   15e48:	str	ip, [sp, #28]
   15e4c:	bl	158e8 <__assert_fail@plt+0x4924>
   15e50:	ldr	r2, [sp, #28]
   15e54:	ldr	r3, [r4]
   15e58:	cmp	r2, r3
   15e5c:	bne	15e6c <__assert_fail@plt+0x4ea8>
   15e60:	mov	r0, r5
   15e64:	add	sp, sp, #36	; 0x24
   15e68:	pop	{r4, r5, pc}
   15e6c:	bl	10d9c <__stack_chk_fail@plt>
   15e70:	andeq	r1, r2, r8, rrx
   15e74:	andeq	r0, r0, r4, lsl r1
   15e78:	ldr	ip, [pc, #128]	; 15f00 <__assert_fail@plt+0x4f3c>
   15e7c:	push	{r4, r5, r6, r7, r8, lr}
   15e80:	sub	sp, sp, #32
   15e84:	ldr	lr, [pc, #120]	; 15f04 <__assert_fail@plt+0x4f40>
   15e88:	add	r4, sp, #12
   15e8c:	add	ip, pc, ip
   15e90:	stm	r4, {r1, r2, r3}
   15e94:	mov	r6, r0
   15e98:	ldr	r7, [ip, lr]
   15e9c:	ldr	r5, [sp, #56]	; 0x38
   15ea0:	ldm	r4, {r1, r2, r3}
   15ea4:	mov	r0, r4
   15ea8:	str	r5, [sp]
   15eac:	ldr	ip, [r7]
   15eb0:	str	ip, [sp, #28]
   15eb4:	bl	157c0 <__assert_fail@plt+0x47fc>
   15eb8:	ldr	r8, [sp, #12]
   15ebc:	ldr	r0, [sp, #16]
   15ec0:	mov	r2, r5
   15ec4:	mov	r1, #0
   15ec8:	add	r0, r0, r8
   15ecc:	add	r5, r5, r8
   15ed0:	bl	10e98 <memset@plt>
   15ed4:	str	r5, [sp, #12]
   15ed8:	ldm	r4, {r0, r1, r2}
   15edc:	ldr	ip, [sp, #28]
   15ee0:	ldr	r3, [r7]
   15ee4:	stm	r6, {r0, r1, r2}
   15ee8:	cmp	ip, r3
   15eec:	bne	15efc <__assert_fail@plt+0x4f38>
   15ef0:	mov	r0, r6
   15ef4:	add	sp, sp, #32
   15ef8:	pop	{r4, r5, r6, r7, r8, pc}
   15efc:	bl	10d9c <__stack_chk_fail@plt>
   15f00:	strdeq	r0, [r2], -r8
   15f04:	andeq	r0, r0, r4, lsl r1
   15f08:	push	{r4, r5, lr}
   15f0c:	sub	sp, sp, #36	; 0x24
   15f10:	ldr	lr, [pc, #104]	; 15f80 <__assert_fail@plt+0x4fbc>
   15f14:	add	ip, sp, #12
   15f18:	add	lr, pc, lr
   15f1c:	ldr	r4, [pc, #96]	; 15f84 <__assert_fail@plt+0x4fc0>
   15f20:	stm	ip, {r1, r2, r3}
   15f24:	mov	r1, lr
   15f28:	ldr	r2, [sp, #48]	; 0x30
   15f2c:	ldr	lr, [sp, #12]
   15f30:	ldr	r4, [r1, r4]
   15f34:	add	r3, r2, lr
   15f38:	sub	r3, r3, #1
   15f3c:	rsb	r2, r2, #0
   15f40:	and	r3, r3, r2
   15f44:	sub	r3, r3, lr
   15f48:	ldr	lr, [r4]
   15f4c:	str	r3, [sp]
   15f50:	ldm	ip, {r1, r2, r3}
   15f54:	mov	r5, r0
   15f58:	str	lr, [sp, #28]
   15f5c:	bl	15e78 <__assert_fail@plt+0x4eb4>
   15f60:	ldr	r2, [sp, #28]
   15f64:	ldr	r3, [r4]
   15f68:	cmp	r2, r3
   15f6c:	bne	15f7c <__assert_fail@plt+0x4fb8>
   15f70:	mov	r0, r5
   15f74:	add	sp, sp, #36	; 0x24
   15f78:	pop	{r4, r5, pc}
   15f7c:	bl	10d9c <__stack_chk_fail@plt>
   15f80:	andeq	r0, r2, ip, ror #30
   15f84:	andeq	r0, r0, r4, lsl r1
   15f88:	ldr	ip, [pc, #200]	; 16058 <__assert_fail@plt+0x5094>
   15f8c:	push	{r4, r5, r6, r7, r8, lr}
   15f90:	sub	sp, sp, #32
   15f94:	ldr	lr, [pc, #192]	; 1605c <__assert_fail@plt+0x5098>
   15f98:	add	ip, pc, ip
   15f9c:	add	r4, sp, #4
   15fa0:	mov	r5, r0
   15fa4:	stm	r4, {r1, r2, r3}
   15fa8:	mov	r3, ip
   15fac:	ldr	r6, [ip, lr]
   15fb0:	mov	r0, #16
   15fb4:	ldr	r8, [sp, #56]	; 0x38
   15fb8:	ldr	r3, [r6]
   15fbc:	ldr	r7, [sp, #60]	; 0x3c
   15fc0:	str	r3, [sp, #28]
   15fc4:	bl	10dfc <malloc@plt>
   15fc8:	subs	lr, r0, #0
   15fcc:	beq	1604c <__assert_fail@plt+0x5088>
   15fd0:	ldm	r4, {r0, r1, r2}
   15fd4:	add	ip, sp, #16
   15fd8:	mov	r3, #0
   15fdc:	str	r8, [lr]
   15fe0:	stm	ip, {r0, r1, r2}
   15fe4:	ldr	r2, [sp, #24]
   15fe8:	ldr	r1, [sp, #4]
   15fec:	cmp	r2, r3
   15ff0:	str	r7, [lr, #8]
   15ff4:	str	r1, [lr, #4]
   15ff8:	str	r3, [lr, #12]
   15ffc:	bne	16008 <__assert_fail@plt+0x5044>
   16000:	b	16040 <__assert_fail@plt+0x507c>
   16004:	mov	r2, r3
   16008:	ldr	r3, [r2, #12]
   1600c:	cmp	r3, #0
   16010:	bne	16004 <__assert_fail@plt+0x5040>
   16014:	add	r2, r2, #12
   16018:	str	lr, [r2]
   1601c:	ldm	ip, {r0, r1, r2}
   16020:	ldr	ip, [sp, #28]
   16024:	ldr	r3, [r6]
   16028:	stm	r5, {r0, r1, r2}
   1602c:	cmp	ip, r3
   16030:	mov	r0, r5
   16034:	bne	16048 <__assert_fail@plt+0x5084>
   16038:	add	sp, sp, #32
   1603c:	pop	{r4, r5, r6, r7, r8, pc}
   16040:	add	r2, sp, #24
   16044:	b	16018 <__assert_fail@plt+0x5054>
   16048:	bl	10d9c <__stack_chk_fail@plt>
   1604c:	ldr	r0, [pc, #12]	; 16060 <__assert_fail@plt+0x509c>
   16050:	add	r0, pc, r0
   16054:	bl	156e8 <__assert_fail@plt+0x4724>
   16058:	andeq	r0, r2, ip, ror #29
   1605c:	andeq	r0, r0, r4, lsl r1
   16060:	andeq	sp, r0, r4, lsr #11
   16064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16068:	sub	sp, sp, #52	; 0x34
   1606c:	ldr	lr, [pc, #244]	; 16168 <__assert_fail@plt+0x51a4>
   16070:	ldr	r3, [pc, #244]	; 1616c <__assert_fail@plt+0x51a8>
   16074:	add	lr, pc, lr
   16078:	mov	ip, #0
   1607c:	ldr	r8, [lr, r3]
   16080:	mov	r7, #8
   16084:	add	r3, sp, #32
   16088:	ldr	r4, [r8]
   1608c:	mov	r5, r2
   16090:	stm	sp, {r7, ip}
   16094:	str	ip, [sp, #36]	; 0x24
   16098:	mov	r7, r0
   1609c:	str	ip, [sp, #32]
   160a0:	str	ip, [sp, #40]	; 0x28
   160a4:	mov	r6, r1
   160a8:	ldm	r3, {r1, r2, r3}
   160ac:	str	r4, [sp, #44]	; 0x2c
   160b0:	str	ip, [sp, #28]
   160b4:	add	r4, sp, #8
   160b8:	bl	15f88 <__assert_fail@plt+0x4fc4>
   160bc:	add	r3, r5, #1
   160c0:	str	r3, [sp]
   160c4:	mov	r0, r4
   160c8:	ldm	r7, {r1, r2, r3}
   160cc:	bl	157c0 <__assert_fail@plt+0x47fc>
   160d0:	ldm	r4, {r0, r1, r2}
   160d4:	ldr	r3, [sp, #28]
   160d8:	cmp	r5, r3
   160dc:	stm	r7, {r0, r1, r2}
   160e0:	mov	fp, r1
   160e4:	mov	r2, r0
   160e8:	ble	16138 <__assert_fail@plt+0x5174>
   160ec:	sub	r4, r0, #1
   160f0:	add	r4, r1, r4
   160f4:	rsb	sl, r1, #2
   160f8:	add	r9, sp, #28
   160fc:	b	16114 <__assert_fail@plt+0x5150>
   16100:	add	r2, sl, r4
   16104:	strb	r0, [r4, #1]!
   16108:	ldr	r3, [sp, #28]
   1610c:	cmp	r3, r5
   16110:	bge	16138 <__assert_fail@plt+0x5174>
   16114:	ldrb	r0, [r6, r3]
   16118:	add	r3, r3, #1
   1611c:	str	r3, [sp, #28]
   16120:	cmp	r0, #92	; 0x5c
   16124:	bne	16100 <__assert_fail@plt+0x513c>
   16128:	mov	r1, r9
   1612c:	mov	r0, r6
   16130:	bl	1c7b4 <__assert_fail@plt+0xb7f0>
   16134:	b	16100 <__assert_fail@plt+0x513c>
   16138:	mov	r3, #0
   1613c:	strb	r3, [fp, r2]
   16140:	ldr	r1, [sp, #44]	; 0x2c
   16144:	ldr	r3, [r8]
   16148:	add	r2, r2, #1
   1614c:	cmp	r1, r3
   16150:	str	r2, [r7]
   16154:	mov	r0, r7
   16158:	bne	16164 <__assert_fail@plt+0x51a0>
   1615c:	add	sp, sp, #52	; 0x34
   16160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16164:	bl	10d9c <__stack_chk_fail@plt>
   16168:	andeq	r0, r2, r0, lsl lr
   1616c:	andeq	r0, r0, r4, lsl r1
   16170:	ldr	ip, [pc, #288]	; 16298 <__assert_fail@plt+0x52d4>
   16174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16178:	add	ip, pc, ip
   1617c:	ldr	lr, [pc, #280]	; 1629c <__assert_fail@plt+0x52d8>
   16180:	sub	sp, sp, #36	; 0x24
   16184:	mov	r3, #0
   16188:	ldr	fp, [ip, lr]
   1618c:	mov	r5, r0
   16190:	str	r3, [r0, #8]
   16194:	ldr	lr, [fp]
   16198:	str	r3, [r0]
   1619c:	str	r3, [r0, #4]
   161a0:	mov	r7, r1
   161a4:	str	r3, [sp, #4]
   161a8:	str	r3, [sp]
   161ac:	mov	r9, r2
   161b0:	ldm	r0, {r1, r2, r3}
   161b4:	add	r6, sp, #8
   161b8:	str	lr, [sp, #28]
   161bc:	bl	15f88 <__assert_fail@plt+0x4fc4>
   161c0:	ldm	r5, {r4, r8}
   161c4:	b	16238 <__assert_fail@plt+0x5274>
   161c8:	cmp	r4, r9
   161cc:	bcs	16248 <__assert_fail@plt+0x5284>
   161d0:	cmn	r9, #1
   161d4:	subne	sl, r9, r4
   161d8:	movne	r3, sl
   161dc:	moveq	r3, #4096	; 0x1000
   161e0:	moveq	sl, r3
   161e4:	stm	r5, {r4, r8}
   161e8:	mov	r0, r6
   161ec:	str	r3, [sp]
   161f0:	ldm	r5, {r1, r2, r3}
   161f4:	bl	157c0 <__assert_fail@plt+0x47fc>
   161f8:	ldm	r6, {r0, r1, r2}
   161fc:	mov	r3, r7
   16200:	stm	r5, {r0, r1, r2}
   16204:	mov	r8, r1
   16208:	mov	r2, sl
   1620c:	mov	r4, r0
   16210:	add	r0, r1, r0
   16214:	mov	r1, #1
   16218:	bl	10de4 <fread@plt>
   1621c:	mov	sl, r0
   16220:	mov	r0, r7
   16224:	bl	10d6c <ferror@plt>
   16228:	cmp	r0, #0
   1622c:	bne	16278 <__assert_fail@plt+0x52b4>
   16230:	adds	r4, r4, sl
   16234:	bcs	1626c <__assert_fail@plt+0x52a8>
   16238:	mov	r0, r7
   1623c:	bl	10e68 <feof@plt>
   16240:	cmp	r0, #0
   16244:	beq	161c8 <__assert_fail@plt+0x5204>
   16248:	ldr	r2, [sp, #28]
   1624c:	ldr	r3, [fp]
   16250:	str	r4, [r5]
   16254:	cmp	r2, r3
   16258:	str	r8, [r5, #4]
   1625c:	mov	r0, r5
   16260:	bne	16294 <__assert_fail@plt+0x52d0>
   16264:	add	sp, sp, #36	; 0x24
   16268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1626c:	ldr	r0, [pc, #44]	; 162a0 <__assert_fail@plt+0x52dc>
   16270:	add	r0, pc, r0
   16274:	bl	156e8 <__assert_fail@plt+0x4724>
   16278:	bl	10e8c <__errno_location@plt>
   1627c:	ldr	r0, [r0]
   16280:	bl	10e14 <strerror@plt>
   16284:	mov	r1, r0
   16288:	ldr	r0, [pc, #20]	; 162a4 <__assert_fail@plt+0x52e0>
   1628c:	add	r0, pc, r0
   16290:	bl	156e8 <__assert_fail@plt+0x4724>
   16294:	bl	10d9c <__stack_chk_fail@plt>
   16298:	andeq	r0, r2, ip, lsl #26
   1629c:	andeq	r0, r0, r4, lsl r1
   162a0:			; <UNDEFINED> instruction: 0x0000d3bc
   162a4:	andeq	sp, r0, ip, ror r3
   162a8:	sub	sp, sp, #16
   162ac:	add	r3, sp, #16
   162b0:	stmdb	r3, {r0, r1, r2}
   162b4:	ldr	r0, [sp, #4]
   162b8:	cmp	r0, #0
   162bc:	beq	16308 <__assert_fail@plt+0x5344>
   162c0:	ldr	r3, [sp, #8]
   162c4:	cmp	r0, #1
   162c8:	addle	r1, r0, r3
   162cc:	ble	162fc <__assert_fail@plt+0x5338>
   162d0:	ldrb	r2, [r3]
   162d4:	cmp	r2, #0
   162d8:	beq	16310 <__assert_fail@plt+0x534c>
   162dc:	add	r1, r3, r0
   162e0:	sub	r2, r1, #2
   162e4:	b	162f4 <__assert_fail@plt+0x5330>
   162e8:	ldrb	r0, [r3, #1]!
   162ec:	cmp	r0, #0
   162f0:	beq	16308 <__assert_fail@plt+0x5344>
   162f4:	cmp	r3, r2
   162f8:	bne	162e8 <__assert_fail@plt+0x5324>
   162fc:	ldrb	r0, [r1, #-1]
   16300:	clz	r0, r0
   16304:	lsr	r0, r0, #5
   16308:	add	sp, sp, #16
   1630c:	bx	lr
   16310:	mov	r0, r2
   16314:	b	16308 <__assert_fail@plt+0x5344>
   16318:	ldr	ip, [pc, #104]	; 16388 <__assert_fail@plt+0x53c4>
   1631c:	push	{r4, r5, r6, lr}
   16320:	sub	sp, sp, #48	; 0x30
   16324:	ldr	lr, [pc, #96]	; 1638c <__assert_fail@plt+0x53c8>
   16328:	add	ip, pc, ip
   1632c:	mov	r4, r0
   16330:	add	r0, sp, #28
   16334:	add	r5, sp, #8
   16338:	stm	r0, {r1, r2, r3}
   1633c:	mov	r3, ip
   16340:	ldr	r6, [ip, lr]
   16344:	ldr	r2, [sp, #32]
   16348:	mov	r0, r5
   1634c:	ldr	ip, [r6]
   16350:	str	r1, [sp, #4]
   16354:	str	r2, [sp]
   16358:	ldm	r4, {r1, r2, r3}
   1635c:	str	ip, [sp, #44]	; 0x2c
   16360:	bl	158e8 <__assert_fail@plt+0x4924>
   16364:	ldm	r5, {r0, r1, r2}
   16368:	ldr	ip, [sp, #44]	; 0x2c
   1636c:	ldr	r3, [r6]
   16370:	stm	r4, {r0, r1, r2}
   16374:	cmp	ip, r3
   16378:	bne	16384 <__assert_fail@plt+0x53c0>
   1637c:	add	sp, sp, #48	; 0x30
   16380:	pop	{r4, r5, r6, pc}
   16384:	bl	10d9c <__stack_chk_fail@plt>
   16388:	andeq	r0, r2, ip, asr fp
   1638c:	andeq	r0, r0, r4, lsl r1
   16390:	ldr	r3, [pc, #84]	; 163ec <__assert_fail@plt+0x5428>
   16394:	ldr	r2, [pc, #84]	; 163f0 <__assert_fail@plt+0x542c>
   16398:	add	r3, pc, r3
   1639c:	push	{r4, r5, r6, lr}
   163a0:	sub	sp, sp, #32
   163a4:	ldr	r6, [r3, r2]
   163a8:	mov	r4, r0
   163ac:	str	r1, [sp]
   163b0:	add	r5, sp, #8
   163b4:	ldr	ip, [r6]
   163b8:	mov	r0, r5
   163bc:	ldm	r4, {r1, r2, r3}
   163c0:	str	ip, [sp, #28]
   163c4:	bl	15f08 <__assert_fail@plt+0x4f44>
   163c8:	ldm	r5, {r0, r1, r2}
   163cc:	ldr	ip, [sp, #28]
   163d0:	ldr	r3, [r6]
   163d4:	stm	r4, {r0, r1, r2}
   163d8:	cmp	ip, r3
   163dc:	bne	163e8 <__assert_fail@plt+0x5424>
   163e0:	add	sp, sp, #32
   163e4:	pop	{r4, r5, r6, pc}
   163e8:	bl	10d9c <__stack_chk_fail@plt>
   163ec:	andeq	r0, r2, ip, ror #21
   163f0:	andeq	r0, r0, r4, lsl r1
   163f4:	ldr	r3, [pc, #140]	; 16488 <__assert_fail@plt+0x54c4>
   163f8:	ldr	ip, [pc, #140]	; 1648c <__assert_fail@plt+0x54c8>
   163fc:	add	r3, pc, r3
   16400:	push	{r4, r5, r6, lr}
   16404:	sub	sp, sp, #32
   16408:	ldr	r6, [r3, ip]
   1640c:	cmp	r2, #0
   16410:	mov	r4, r0
   16414:	ldr	r3, [r6]
   16418:	mov	r5, r1
   1641c:	str	r3, [sp, #28]
   16420:	bne	16430 <__assert_fail@plt+0x546c>
   16424:	mov	r0, r1
   16428:	bl	10e74 <strlen@plt>
   1642c:	mov	r2, r0
   16430:	str	r5, [sp]
   16434:	add	r5, sp, #8
   16438:	str	r2, [sp, #4]
   1643c:	mov	r0, r5
   16440:	ldm	r4, {r1, r2, r3}
   16444:	bl	158e8 <__assert_fail@plt+0x4924>
   16448:	ldm	r5, {r0, r1, r2}
   1644c:	mov	r3, #0
   16450:	str	r3, [sp]
   16454:	stm	r4, {r0, r1, r2}
   16458:	mov	r0, r5
   1645c:	ldm	r4, {r1, r2, r3}
   16460:	bl	15e0c <__assert_fail@plt+0x4e48>
   16464:	ldm	r5, {r0, r1, r2}
   16468:	ldr	ip, [sp, #28]
   1646c:	ldr	r3, [r6]
   16470:	stm	r4, {r0, r1, r2}
   16474:	cmp	ip, r3
   16478:	bne	16484 <__assert_fail@plt+0x54c0>
   1647c:	add	sp, sp, #32
   16480:	pop	{r4, r5, r6, pc}
   16484:	bl	10d9c <__stack_chk_fail@plt>
   16488:	andeq	r0, r2, r8, lsl #21
   1648c:	andeq	r0, r0, r4, lsl r1
   16490:	ldr	r3, [pc, #176]	; 16548 <__assert_fail@plt+0x5584>
   16494:	ldr	r2, [pc, #176]	; 1654c <__assert_fail@plt+0x5588>
   16498:	add	r3, pc, r3
   1649c:	push	{r4, r5, r6, r7, r8, r9, lr}
   164a0:	sub	sp, sp, #36	; 0x24
   164a4:	ldr	r9, [r3, r2]
   164a8:	ldr	r5, [r0]
   164ac:	mov	r8, r0
   164b0:	ldr	r3, [r9]
   164b4:	cmp	r5, #0
   164b8:	mov	r6, r1
   164bc:	str	r3, [sp, #28]
   164c0:	ble	1650c <__assert_fail@plt+0x5548>
   164c4:	ldr	r7, [r0, #4]
   164c8:	mov	r4, #0
   164cc:	b	164dc <__assert_fail@plt+0x5518>
   164d0:	add	r4, r4, #1
   164d4:	cmp	r4, r5
   164d8:	beq	16510 <__assert_fail@plt+0x554c>
   164dc:	add	r1, r7, r4
   164e0:	mov	r0, r6
   164e4:	bl	10d24 <strcmp@plt>
   164e8:	cmp	r0, #0
   164ec:	bne	164d0 <__assert_fail@plt+0x550c>
   164f0:	ldr	r2, [sp, #28]
   164f4:	ldr	r3, [r9]
   164f8:	mov	r0, r4
   164fc:	cmp	r2, r3
   16500:	bne	16544 <__assert_fail@plt+0x5580>
   16504:	add	sp, sp, #36	; 0x24
   16508:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1650c:	mov	r5, #0
   16510:	mov	r0, r6
   16514:	bl	10e74 <strlen@plt>
   16518:	mov	r4, r5
   1651c:	add	r5, sp, #8
   16520:	str	r6, [sp]
   16524:	ldm	r8, {r1, r2, r3}
   16528:	add	r0, r0, #1
   1652c:	str	r0, [sp, #4]
   16530:	mov	r0, r5
   16534:	bl	158e8 <__assert_fail@plt+0x4924>
   16538:	ldm	r5, {r0, r1, r2}
   1653c:	stm	r8, {r0, r1, r2}
   16540:	b	164f0 <__assert_fail@plt+0x552c>
   16544:	bl	10d9c <__stack_chk_fail@plt>
   16548:	andeq	r0, r2, ip, ror #19
   1654c:	andeq	r0, r0, r4, lsl r1
   16550:	ldr	r3, [pc, #84]	; 165ac <__assert_fail@plt+0x55e8>
   16554:	ldr	r2, [pc, #84]	; 165b0 <__assert_fail@plt+0x55ec>
   16558:	add	r3, pc, r3
   1655c:	push	{r4, r5, r6, lr}
   16560:	sub	sp, sp, #32
   16564:	ldr	r6, [r3, r2]
   16568:	mov	r4, r0
   1656c:	str	r1, [sp]
   16570:	add	r5, sp, #8
   16574:	ldr	ip, [r6]
   16578:	mov	r0, r5
   1657c:	ldm	r4, {r1, r2, r3}
   16580:	str	ip, [sp, #28]
   16584:	bl	15d2c <__assert_fail@plt+0x4d68>
   16588:	ldm	r5, {r0, r1, r2}
   1658c:	ldr	ip, [sp, #28]
   16590:	ldr	r3, [r6]
   16594:	stm	r4, {r0, r1, r2}
   16598:	cmp	ip, r3
   1659c:	bne	165a8 <__assert_fail@plt+0x55e4>
   165a0:	add	sp, sp, #32
   165a4:	pop	{r4, r5, r6, pc}
   165a8:	bl	10d9c <__stack_chk_fail@plt>
   165ac:	andeq	r0, r2, ip, lsr #18
   165b0:	andeq	r0, r0, r4, lsl r1
   165b4:	ldr	ip, [pc, #88]	; 16614 <__assert_fail@plt+0x5650>
   165b8:	ldr	r3, [pc, #88]	; 16618 <__assert_fail@plt+0x5654>
   165bc:	add	ip, pc, ip
   165c0:	push	{r4, r5, r6, lr}
   165c4:	sub	sp, sp, #32
   165c8:	ldr	r6, [ip, r3]
   165cc:	mov	lr, #3
   165d0:	ldm	r0, {r1, r2, r3}
   165d4:	add	r5, sp, #8
   165d8:	str	lr, [sp]
   165dc:	ldr	lr, [r6]
   165e0:	mov	r4, r0
   165e4:	mov	r0, r5
   165e8:	str	lr, [sp, #28]
   165ec:	bl	15d2c <__assert_fail@plt+0x4d68>
   165f0:	ldm	r5, {r0, r1, r2}
   165f4:	ldr	ip, [sp, #28]
   165f8:	ldr	r3, [r6]
   165fc:	stm	r4, {r0, r1, r2}
   16600:	cmp	ip, r3
   16604:	bne	16610 <__assert_fail@plt+0x564c>
   16608:	add	sp, sp, #32
   1660c:	pop	{r4, r5, r6, pc}
   16610:	bl	10d9c <__stack_chk_fail@plt>
   16614:	andeq	r0, r2, r8, asr #17
   16618:	andeq	r0, r0, r4, lsl r1
   1661c:	ldr	ip, [pc, #88]	; 1667c <__assert_fail@plt+0x56b8>
   16620:	ldr	r3, [pc, #88]	; 16680 <__assert_fail@plt+0x56bc>
   16624:	add	ip, pc, ip
   16628:	push	{r4, r5, r6, lr}
   1662c:	sub	sp, sp, #32
   16630:	ldr	r6, [ip, r3]
   16634:	mov	lr, #2
   16638:	ldm	r0, {r1, r2, r3}
   1663c:	add	r5, sp, #8
   16640:	str	lr, [sp]
   16644:	ldr	lr, [r6]
   16648:	mov	r4, r0
   1664c:	mov	r0, r5
   16650:	str	lr, [sp, #28]
   16654:	bl	15d2c <__assert_fail@plt+0x4d68>
   16658:	ldm	r5, {r0, r1, r2}
   1665c:	ldr	ip, [sp, #28]
   16660:	ldr	r3, [r6]
   16664:	stm	r4, {r0, r1, r2}
   16668:	cmp	ip, r3
   1666c:	bne	16678 <__assert_fail@plt+0x56b4>
   16670:	add	sp, sp, #32
   16674:	pop	{r4, r5, r6, pc}
   16678:	bl	10d9c <__stack_chk_fail@plt>
   1667c:	andeq	r0, r2, r0, ror #16
   16680:	andeq	r0, r0, r4, lsl r1
   16684:	ldr	ip, [pc, #88]	; 166e4 <__assert_fail@plt+0x5720>
   16688:	ldr	r3, [pc, #88]	; 166e8 <__assert_fail@plt+0x5724>
   1668c:	add	ip, pc, ip
   16690:	push	{r4, r5, r6, lr}
   16694:	sub	sp, sp, #32
   16698:	ldr	r6, [ip, r3]
   1669c:	mov	lr, #1
   166a0:	ldm	r0, {r1, r2, r3}
   166a4:	add	r5, sp, #8
   166a8:	str	lr, [sp]
   166ac:	ldr	lr, [r6]
   166b0:	mov	r4, r0
   166b4:	mov	r0, r5
   166b8:	str	lr, [sp, #28]
   166bc:	bl	15d2c <__assert_fail@plt+0x4d68>
   166c0:	ldm	r5, {r0, r1, r2}
   166c4:	ldr	ip, [sp, #28]
   166c8:	ldr	r3, [r6]
   166cc:	stm	r4, {r0, r1, r2}
   166d0:	cmp	ip, r3
   166d4:	bne	166e0 <__assert_fail@plt+0x571c>
   166d8:	add	sp, sp, #32
   166dc:	pop	{r4, r5, r6, pc}
   166e0:	bl	10d9c <__stack_chk_fail@plt>
   166e4:	strdeq	r0, [r2], -r8
   166e8:	andeq	r0, r0, r4, lsl r1
   166ec:	lsr	ip, r1, #8
   166f0:	lsr	r3, r1, #16
   166f4:	push	{lr}		; (str lr, [sp, #-4]!)
   166f8:	uxtb	ip, ip
   166fc:	sub	sp, sp, #20
   16700:	uxtb	lr, r1
   16704:	uxtb	r3, r3
   16708:	ldr	r2, [pc, #24]	; 16728 <__assert_fail@plt+0x5764>
   1670c:	stm	sp, {r3, ip, lr}
   16710:	add	r2, pc, r2
   16714:	lsr	r3, r1, #24
   16718:	mov	r1, #1
   1671c:	bl	10ee0 <__fprintf_chk@plt>
   16720:	add	sp, sp, #20
   16724:	pop	{pc}		; (ldr pc, [sp], #4)
   16728:	andeq	ip, r0, r0, ror #30
   1672c:	ldr	r2, [pc, #12]	; 16740 <__assert_fail@plt+0x577c>
   16730:	mov	r3, r1
   16734:	add	r2, pc, r2
   16738:	mov	r1, #1
   1673c:	b	10ee0 <__fprintf_chk@plt>
   16740:	andeq	ip, r0, r8, ror pc
   16744:	push	{r4, r5, r6, r7, lr}
   16748:	subs	r4, r1, #0
   1674c:	sub	sp, sp, #20
   16750:	mov	r5, r0
   16754:	beq	167b8 <__assert_fail@plt+0x57f4>
   16758:	ldr	r7, [pc, #156]	; 167fc <__assert_fail@plt+0x5838>
   1675c:	ldr	r6, [pc, #156]	; 16800 <__assert_fail@plt+0x583c>
   16760:	add	r7, pc, r7
   16764:	add	r6, pc, r6
   16768:	b	16778 <__assert_fail@plt+0x57b4>
   1676c:	ldr	r4, [r4, #8]
   16770:	cmp	r4, #0
   16774:	beq	167b8 <__assert_fail@plt+0x57f4>
   16778:	ldrb	r3, [r4]
   1677c:	cmp	r3, #0
   16780:	bne	1676c <__assert_fail@plt+0x57a8>
   16784:	ldr	r3, [r4, #4]
   16788:	mov	r2, r7
   1678c:	mov	r1, #1
   16790:	mov	r0, r5
   16794:	bl	10ee0 <__fprintf_chk@plt>
   16798:	ldr	r3, [r4, #4]
   1679c:	mov	r2, r6
   167a0:	mov	r1, #1
   167a4:	mov	r0, r5
   167a8:	bl	10ee0 <__fprintf_chk@plt>
   167ac:	ldr	r4, [r4, #8]
   167b0:	cmp	r4, #0
   167b4:	bne	16778 <__assert_fail@plt+0x57b4>
   167b8:	ldr	r0, [pc, #68]	; 16804 <__assert_fail@plt+0x5840>
   167bc:	mov	r3, r5
   167c0:	mov	r2, #22
   167c4:	mov	r1, #1
   167c8:	add	r0, pc, r0
   167cc:	bl	10dcc <fwrite@plt>
   167d0:	ldr	r2, [pc, #48]	; 16808 <__assert_fail@plt+0x5844>
   167d4:	mov	r3, #0
   167d8:	mov	r1, #1
   167dc:	mov	r0, r5
   167e0:	str	r1, [sp, #8]
   167e4:	str	r3, [sp, #4]
   167e8:	str	r3, [sp]
   167ec:	add	r2, pc, r2
   167f0:	bl	10ee0 <__fprintf_chk@plt>
   167f4:	add	sp, sp, #20
   167f8:	pop	{r4, r5, r6, r7, pc}
   167fc:	andeq	ip, r0, ip, asr pc
   16800:	andeq	sp, r0, r4, asr #3
   16804:	andeq	ip, r0, r0, lsl #30
   16808:	andeq	ip, r0, r4, lsl #29
   1680c:	push	{r4, r5, r6, r7, lr}
   16810:	mov	r3, r0
   16814:	mov	r5, r0
   16818:	ldr	r0, [pc, #172]	; 168cc <__assert_fail@plt+0x5908>
   1681c:	sub	sp, sp, #20
   16820:	mov	r4, r1
   16824:	mov	r2, #20
   16828:	mov	r1, #1
   1682c:	add	r0, pc, r0
   16830:	bl	10dcc <fwrite@plt>
   16834:	mov	r2, #2
   16838:	str	r2, [sp, #8]
   1683c:	ldr	r2, [pc, #140]	; 168d0 <__assert_fail@plt+0x590c>
   16840:	mov	r3, #0
   16844:	mov	r0, r5
   16848:	str	r3, [sp, #4]
   1684c:	str	r3, [sp]
   16850:	add	r2, pc, r2
   16854:	mov	r1, #1
   16858:	bl	10ee0 <__fprintf_chk@plt>
   1685c:	cmp	r4, #0
   16860:	beq	168c4 <__assert_fail@plt+0x5900>
   16864:	ldr	r7, [pc, #104]	; 168d4 <__assert_fail@plt+0x5910>
   16868:	ldr	r6, [pc, #104]	; 168d8 <__assert_fail@plt+0x5914>
   1686c:	add	r7, pc, r7
   16870:	add	r6, pc, r6
   16874:	b	16884 <__assert_fail@plt+0x58c0>
   16878:	ldr	r4, [r4, #8]
   1687c:	cmp	r4, #0
   16880:	beq	168c4 <__assert_fail@plt+0x5900>
   16884:	ldrb	r3, [r4]
   16888:	cmp	r3, #0
   1688c:	bne	16878 <__assert_fail@plt+0x58b4>
   16890:	ldr	r3, [r4, #4]
   16894:	mov	r2, r7
   16898:	mov	r1, #1
   1689c:	mov	r0, r5
   168a0:	bl	10ee0 <__fprintf_chk@plt>
   168a4:	ldr	r3, [r4, #4]
   168a8:	mov	r2, r6
   168ac:	mov	r1, #1
   168b0:	mov	r0, r5
   168b4:	bl	10ee0 <__fprintf_chk@plt>
   168b8:	ldr	r4, [r4, #8]
   168bc:	cmp	r4, #0
   168c0:	bne	16884 <__assert_fail@plt+0x58c0>
   168c4:	add	sp, sp, #20
   168c8:	pop	{r4, r5, r6, r7, pc}
   168cc:			; <UNDEFINED> instruction: 0x0000ceb4
   168d0:	andeq	ip, r0, r0, lsr #28
   168d4:	andeq	ip, r0, ip, lsl #29
   168d8:	muleq	r0, r8, lr
   168dc:	push	{r4, r5, r6, r7, lr}
   168e0:	subs	r4, r1, #0
   168e4:	sub	sp, sp, #20
   168e8:	mov	r5, r0
   168ec:	beq	16950 <__assert_fail@plt+0x598c>
   168f0:	ldr	r7, [pc, #160]	; 16998 <__assert_fail@plt+0x59d4>
   168f4:	ldr	r6, [pc, #160]	; 1699c <__assert_fail@plt+0x59d8>
   168f8:	add	r7, pc, r7
   168fc:	add	r6, pc, r6
   16900:	b	16910 <__assert_fail@plt+0x594c>
   16904:	ldr	r4, [r4, #8]
   16908:	cmp	r4, #0
   1690c:	beq	16950 <__assert_fail@plt+0x598c>
   16910:	ldrb	r3, [r4]
   16914:	cmp	r3, #0
   16918:	bne	16904 <__assert_fail@plt+0x5940>
   1691c:	ldr	r3, [r4, #4]
   16920:	mov	r2, r7
   16924:	mov	r1, #1
   16928:	mov	r0, r5
   1692c:	bl	10ee0 <__fprintf_chk@plt>
   16930:	ldr	r3, [r4, #4]
   16934:	mov	r2, r6
   16938:	mov	r1, #1
   1693c:	mov	r0, r5
   16940:	bl	10ee0 <__fprintf_chk@plt>
   16944:	ldr	r4, [r4, #8]
   16948:	cmp	r4, #0
   1694c:	bne	16910 <__assert_fail@plt+0x594c>
   16950:	ldr	r0, [pc, #72]	; 169a0 <__assert_fail@plt+0x59dc>
   16954:	mov	r3, r5
   16958:	mov	r2, #16
   1695c:	mov	r1, #1
   16960:	add	r0, pc, r0
   16964:	bl	10dcc <fwrite@plt>
   16968:	mov	r2, #3
   1696c:	str	r2, [sp, #8]
   16970:	ldr	r2, [pc, #44]	; 169a4 <__assert_fail@plt+0x59e0>
   16974:	mov	r3, #0
   16978:	mov	r0, r5
   1697c:	str	r3, [sp, #4]
   16980:	str	r3, [sp]
   16984:	add	r2, pc, r2
   16988:	mov	r1, #1
   1698c:	bl	10ee0 <__fprintf_chk@plt>
   16990:	add	sp, sp, #20
   16994:	pop	{r4, r5, r6, r7, pc}
   16998:	andeq	ip, r0, r4, asr #27
   1699c:	andeq	sp, r0, ip, lsr #32
   169a0:			; <UNDEFINED> instruction: 0x0000cdb4
   169a4:	andeq	ip, r0, ip, ror #25
   169a8:	ldr	ip, [pc, #100]	; 16a14 <__assert_fail@plt+0x5a50>
   169ac:	push	{r0, r1, r2, r3}
   169b0:	add	ip, pc, ip
   169b4:	ldr	r2, [pc, #92]	; 16a18 <__assert_fail@plt+0x5a54>
   169b8:	push	{lr}		; (str lr, [sp, #-4]!)
   169bc:	sub	sp, sp, #12
   169c0:	ldr	r2, [ip, r2]
   169c4:	ldr	r3, [pc, #80]	; 16a1c <__assert_fail@plt+0x5a58>
   169c8:	add	r1, sp, #20
   169cc:	str	r1, [sp]
   169d0:	ldr	r1, [r2]
   169d4:	ldr	r0, [pc, #68]	; 16a20 <__assert_fail@plt+0x5a5c>
   169d8:	str	r1, [sp, #4]
   169dc:	ldr	r4, [ip, r3]
   169e0:	ldr	r5, [sp, #16]
   169e4:	mov	r2, #13
   169e8:	mov	r1, #1
   169ec:	ldr	r3, [r4]
   169f0:	add	r0, pc, r0
   169f4:	bl	10dcc <fwrite@plt>
   169f8:	ldr	r0, [r4]
   169fc:	mov	r2, r5
   16a00:	ldr	r3, [sp]
   16a04:	mov	r1, #1
   16a08:	bl	10e20 <__vfprintf_chk@plt>
   16a0c:	mov	r0, #1
   16a10:	bl	10e5c <exit@plt>
   16a14:	ldrdeq	r0, [r2], -r4
   16a18:	andeq	r0, r0, r4, lsl r1
   16a1c:	andeq	r0, r0, ip, lsr r1
   16a20:	andeq	sl, r0, r8, asr ip
   16a24:	ldr	r2, [r0]
   16a28:	ldr	r3, [r0, #8]
   16a2c:	rsb	ip, r1, #0
   16a30:	sub	r3, r3, r2
   16a34:	add	r3, r3, r1
   16a38:	sub	r3, r3, #1
   16a3c:	and	r3, r3, ip
   16a40:	ldr	r1, [r0, #4]
   16a44:	add	r3, r2, r3
   16a48:	cmp	r3, r1
   16a4c:	str	r3, [r0, #8]
   16a50:	bxls	lr
   16a54:	ldr	r0, [pc, #8]	; 16a64 <__assert_fail@plt+0x5aa0>
   16a58:	push	{r4, lr}
   16a5c:	add	r0, pc, r0
   16a60:	bl	169a8 <__assert_fail@plt+0x59e4>
   16a64:	andeq	ip, r0, ip, asr #25
   16a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a6c:	sub	sp, sp, #28
   16a70:	add	ip, sp, #24
   16a74:	mov	r5, r0
   16a78:	stmdb	ip, {r1, r2, r3}
   16a7c:	ldr	r7, [sp, #20]
   16a80:	ldr	r6, [sp, #12]
   16a84:	cmp	r7, #0
   16a88:	ldr	r4, [sp, #16]
   16a8c:	beq	16afc <__assert_fail@plt+0x5b38>
   16a90:	ldr	sl, [pc, #320]	; 16bd8 <__assert_fail@plt+0x5c14>
   16a94:	ldr	r9, [pc, #320]	; 16bdc <__assert_fail@plt+0x5c18>
   16a98:	add	sl, pc, sl
   16a9c:	add	r9, pc, r9
   16aa0:	b	16ab0 <__assert_fail@plt+0x5aec>
   16aa4:	ldr	r7, [r7, #12]
   16aa8:	cmp	r7, #0
   16aac:	beq	16afc <__assert_fail@plt+0x5b38>
   16ab0:	ldr	r3, [r7]
   16ab4:	cmp	r3, #3
   16ab8:	bne	16aa4 <__assert_fail@plt+0x5ae0>
   16abc:	ldr	r8, [r7, #8]
   16ac0:	ldr	fp, [r7, #4]
   16ac4:	mov	r3, r8
   16ac8:	mov	r2, sl
   16acc:	mov	r1, #1
   16ad0:	mov	r0, r5
   16ad4:	bl	10ee0 <__fprintf_chk@plt>
   16ad8:	str	fp, [sp]
   16adc:	mov	r3, r8
   16ae0:	mov	r2, r9
   16ae4:	mov	r1, #1
   16ae8:	mov	r0, r5
   16aec:	bl	10ee0 <__fprintf_chk@plt>
   16af0:	ldr	r7, [r7, #12]
   16af4:	cmp	r7, #0
   16af8:	bne	16ab0 <__assert_fail@plt+0x5aec>
   16afc:	cmp	r6, #3
   16b00:	movls	r3, r6
   16b04:	movls	r9, #0
   16b08:	bls	16b58 <__assert_fail@plt+0x5b94>
   16b0c:	sub	r7, r4, #4
   16b10:	ldr	r3, [r7, #4]
   16b14:	add	r8, r7, #4
   16b18:	add	r7, r7, #8
   16b1c:	lsr	r1, r3, #24
   16b20:	lsl	r2, r3, #8
   16b24:	orr	r1, r1, r3, lsl #24
   16b28:	and	r2, r2, #16711680	; 0xff0000
   16b2c:	lsr	r3, r3, #8
   16b30:	and	r3, r3, #65280	; 0xff00
   16b34:	orr	r1, r1, r2
   16b38:	orr	r1, r1, r3
   16b3c:	sub	r9, r7, r4
   16b40:	mov	r0, r5
   16b44:	bl	166ec <__assert_fail@plt+0x5728>
   16b48:	sub	r3, r6, r9
   16b4c:	cmp	r3, #3
   16b50:	mov	r7, r8
   16b54:	bhi	16b10 <__assert_fail@plt+0x5b4c>
   16b58:	cmp	r3, #0
   16b5c:	beq	16ba8 <__assert_fail@plt+0x5be4>
   16b60:	ldr	r8, [pc, #120]	; 16be0 <__assert_fail@plt+0x5c1c>
   16b64:	add	r7, r4, r6
   16b68:	sub	r3, r9, #1
   16b6c:	add	r8, pc, r8
   16b70:	add	r4, r4, r3
   16b74:	sub	r7, r7, #1
   16b78:	ldrb	r3, [r4, #1]!
   16b7c:	mov	r2, r8
   16b80:	mov	r1, #1
   16b84:	mov	r0, r5
   16b88:	bl	10ee0 <__fprintf_chk@plt>
   16b8c:	sub	r3, r7, r4
   16b90:	cmp	r3, #0
   16b94:	bgt	16b78 <__assert_fail@plt+0x5bb4>
   16b98:	add	r9, r9, #1
   16b9c:	sub	r7, r6, r9
   16ba0:	cmp	r7, #0
   16ba4:	addge	r9, r9, r7
   16ba8:	cmp	r6, r9
   16bac:	bne	16bb8 <__assert_fail@plt+0x5bf4>
   16bb0:	add	sp, sp, #28
   16bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bb8:	ldr	r3, [pc, #36]	; 16be4 <__assert_fail@plt+0x5c20>
   16bbc:	ldr	r1, [pc, #36]	; 16be8 <__assert_fail@plt+0x5c24>
   16bc0:	ldr	r0, [pc, #36]	; 16bec <__assert_fail@plt+0x5c28>
   16bc4:	add	r3, pc, r3
   16bc8:	mov	r2, #183	; 0xb7
   16bcc:	add	r1, pc, r1
   16bd0:	add	r0, pc, r0
   16bd4:	bl	10fc4 <__assert_fail@plt>
   16bd8:	andeq	ip, r0, r4, lsr #24
   16bdc:			; <UNDEFINED> instruction: 0x0000ccbc
   16be0:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   16be4:	andeq	ip, r0, ip, lsl #21
   16be8:	andeq	ip, r0, ip, lsr #23
   16bec:			; <UNDEFINED> instruction: 0x0000cbb4
   16bf0:	subs	r3, r2, #0
   16bf4:	beq	16c1c <__assert_fail@plt+0x5c58>
   16bf8:	push	{lr}		; (str lr, [sp, #-4]!)
   16bfc:	sub	sp, sp, #12
   16c00:	ldr	r2, [pc, #40]	; 16c30 <__assert_fail@plt+0x5c6c>
   16c04:	str	r1, [sp]
   16c08:	add	r2, pc, r2
   16c0c:	mov	r1, #1
   16c10:	bl	10ee0 <__fprintf_chk@plt>
   16c14:	add	sp, sp, #12
   16c18:	pop	{pc}		; (ldr pc, [sp], #4)
   16c1c:	ldr	r2, [pc, #16]	; 16c34 <__assert_fail@plt+0x5c70>
   16c20:	mov	r3, r1
   16c24:	add	r2, pc, r2
   16c28:	mov	r1, #1
   16c2c:	b	10ee0 <__fprintf_chk@plt>
   16c30:	andeq	ip, r0, ip, lsl #23
   16c34:	andeq	ip, r0, r4, lsl #23
   16c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c3c:	sub	sp, sp, #20
   16c40:	mov	r5, r2
   16c44:	ldr	r9, [sp, #56]	; 0x38
   16c48:	mov	sl, r0
   16c4c:	mov	r6, r1
   16c50:	ldr	r2, [r1, #16]
   16c54:	ldr	r1, [r0, #44]	; 0x2c
   16c58:	mov	r0, r5
   16c5c:	str	r3, [sp, #8]
   16c60:	blx	r2
   16c64:	ldr	r2, [r9, #12]
   16c68:	ldr	r3, [r6, #4]
   16c6c:	ands	r2, r2, #1
   16c70:	movne	r2, #0
   16c74:	ldrne	r1, [sl, #24]
   16c78:	ldreq	r1, [sl, #4]
   16c7c:	mov	r0, r5
   16c80:	blx	r3
   16c84:	ldr	r3, [r6, #8]
   16c88:	mov	r1, #4
   16c8c:	mov	r0, r5
   16c90:	blx	r3
   16c94:	ldr	r4, [sl, #8]
   16c98:	cmp	r4, #0
   16c9c:	beq	16e7c <__assert_fail@plt+0x5eb8>
   16ca0:	ldr	r8, [pc, #476]	; 16e84 <__assert_fail@plt+0x5ec0>
   16ca4:	ldr	fp, [sp, #8]
   16ca8:	add	r8, pc, r8
   16cac:	mov	r7, #0
   16cb0:	str	sl, [sp, #12]
   16cb4:	ldrb	r3, [r4]
   16cb8:	mov	r1, r8
   16cbc:	cmp	r3, #0
   16cc0:	bne	16d64 <__assert_fail@plt+0x5da0>
   16cc4:	ldr	sl, [r4, #4]
   16cc8:	mov	r0, sl
   16ccc:	bl	10d24 <strcmp@plt>
   16cd0:	mov	r1, sl
   16cd4:	cmp	r0, #0
   16cd8:	mov	r0, fp
   16cdc:	moveq	r7, #1
   16ce0:	bl	16490 <__assert_fail@plt+0x54cc>
   16ce4:	ldr	r2, [r6, #24]
   16ce8:	ldr	r1, [r4, #24]
   16cec:	mov	sl, r0
   16cf0:	mov	r0, r5
   16cf4:	blx	r2
   16cf8:	ldr	r2, [r6]
   16cfc:	ldr	r1, [r4, #8]
   16d00:	mov	r0, r5
   16d04:	blx	r2
   16d08:	ldr	r3, [r6]
   16d0c:	mov	r1, sl
   16d10:	mov	r0, r5
   16d14:	blx	r3
   16d18:	ldr	r3, [r9, #12]
   16d1c:	tst	r3, #2
   16d20:	beq	16d40 <__assert_fail@plt+0x5d7c>
   16d24:	ldr	r3, [r4, #8]
   16d28:	mov	r1, #8
   16d2c:	cmp	r3, #7
   16d30:	mov	r0, r5
   16d34:	ble	16d40 <__assert_fail@plt+0x5d7c>
   16d38:	ldr	r3, [r6, #8]
   16d3c:	blx	r3
   16d40:	add	r3, r4, #8
   16d44:	mov	r0, r5
   16d48:	ldm	r3, {r1, r2, r3}
   16d4c:	ldr	ip, [r6, #12]
   16d50:	blx	ip
   16d54:	ldr	r3, [r6, #8]
   16d58:	mov	r1, #4
   16d5c:	mov	r0, r5
   16d60:	blx	r3
   16d64:	ldr	r4, [r4, #20]
   16d68:	cmp	r4, #0
   16d6c:	bne	16cb4 <__assert_fail@plt+0x5cf0>
   16d70:	ldr	sl, [sp, #12]
   16d74:	ldr	r1, [r9, #12]
   16d78:	lsr	r1, r1, #2
   16d7c:	eor	r1, r1, #1
   16d80:	and	r1, r1, #1
   16d84:	orr	r7, r7, r1
   16d88:	ands	r1, r7, #255	; 0xff
   16d8c:	beq	16dec <__assert_fail@plt+0x5e28>
   16d90:	ldr	r4, [sl, #12]
   16d94:	cmp	r4, #0
   16d98:	ldrne	r7, [sp, #8]
   16d9c:	beq	16db8 <__assert_fail@plt+0x5df4>
   16da0:	ldrb	r3, [r4]
   16da4:	cmp	r3, #0
   16da8:	beq	16dd0 <__assert_fail@plt+0x5e0c>
   16dac:	ldr	r4, [r4, #20]
   16db0:	cmp	r4, #0
   16db4:	bne	16da0 <__assert_fail@plt+0x5ddc>
   16db8:	ldr	r3, [r6, #20]
   16dbc:	ldr	r1, [sl, #44]	; 0x2c
   16dc0:	mov	r0, r5
   16dc4:	add	sp, sp, #20
   16dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dcc:	bx	r3
   16dd0:	str	r9, [sp]
   16dd4:	mov	r3, r7
   16dd8:	mov	r2, r5
   16ddc:	mov	r1, r6
   16de0:	mov	r0, r4
   16de4:	bl	16c38 <__assert_fail@plt+0x5c74>
   16de8:	b	16dac <__assert_fail@plt+0x5de8>
   16dec:	ldr	r3, [r6, #24]
   16df0:	mov	r0, r5
   16df4:	blx	r3
   16df8:	ldr	r1, [sl, #28]
   16dfc:	ldr	r3, [r6]
   16e00:	add	r1, r1, #1
   16e04:	mov	r0, r5
   16e08:	blx	r3
   16e0c:	ldr	r1, [pc, #116]	; 16e88 <__assert_fail@plt+0x5ec4>
   16e10:	ldr	r0, [sp, #8]
   16e14:	add	r1, pc, r1
   16e18:	ldr	r4, [r6]
   16e1c:	bl	16490 <__assert_fail@plt+0x54cc>
   16e20:	mov	r1, r0
   16e24:	mov	r0, r5
   16e28:	blx	r4
   16e2c:	ldr	r3, [r9, #12]
   16e30:	ldr	r2, [sl, #28]
   16e34:	tst	r3, #2
   16e38:	beq	16e58 <__assert_fail@plt+0x5e94>
   16e3c:	cmp	r2, #6
   16e40:	ble	16e58 <__assert_fail@plt+0x5e94>
   16e44:	ldr	r3, [r6, #8]
   16e48:	mov	r1, #8
   16e4c:	mov	r0, r5
   16e50:	blx	r3
   16e54:	ldr	r2, [sl, #28]
   16e58:	ldr	r3, [r6, #4]
   16e5c:	ldr	r1, [sl, #4]
   16e60:	mov	r0, r5
   16e64:	blx	r3
   16e68:	ldr	r3, [r6, #8]
   16e6c:	mov	r1, #4
   16e70:	mov	r0, r5
   16e74:	blx	r3
   16e78:	b	16d90 <__assert_fail@plt+0x5dcc>
   16e7c:	mov	r7, r4
   16e80:	b	16d74 <__assert_fail@plt+0x5db0>
   16e84:	andeq	fp, r0, r4, ror pc
   16e88:	andeq	fp, r0, r8, lsl #28
   16e8c:	push	{r4, r5, r6, lr}
   16e90:	mov	r4, r1
   16e94:	ldr	r1, [r1]
   16e98:	mov	r5, r3
   16e9c:	add	r3, r1, r3
   16ea0:	cmp	r0, r3
   16ea4:	bcc	16ec4 <__assert_fail@plt+0x5f00>
   16ea8:	mov	r0, r2
   16eac:	mov	r2, r5
   16eb0:	bl	10d84 <memcpy@plt>
   16eb4:	ldr	r3, [r4]
   16eb8:	add	r3, r3, r5
   16ebc:	str	r3, [r4]
   16ec0:	pop	{r4, r5, r6, pc}
   16ec4:	ldr	r0, [pc, #4]	; 16ed0 <__assert_fail@plt+0x5f0c>
   16ec8:	add	r0, pc, r0
   16ecc:	bl	169a8 <__assert_fail@plt+0x59e4>
   16ed0:	andeq	ip, r0, r0, ror #16
   16ed4:	ldr	r3, [pc, #164]	; 16f80 <__assert_fail@plt+0x5fbc>
   16ed8:	ldr	r2, [pc, #164]	; 16f84 <__assert_fail@plt+0x5fc0>
   16edc:	add	r3, pc, r3
   16ee0:	push	{r4, lr}
   16ee4:	sub	sp, sp, #8
   16ee8:	ldr	r4, [r3, r2]
   16eec:	ldr	r1, [r0]
   16ef0:	ldr	r3, [r0, #8]
   16ef4:	ldr	r2, [r4]
   16ef8:	sub	r3, r3, r1
   16efc:	tst	r3, #3
   16f00:	str	r2, [sp, #4]
   16f04:	bne	16f58 <__assert_fail@plt+0x5f94>
   16f08:	add	r1, r0, #8
   16f0c:	mov	r3, #4
   16f10:	mov	r2, sp
   16f14:	ldr	r0, [r0, #4]
   16f18:	bl	16e8c <__assert_fail@plt+0x5ec8>
   16f1c:	ldr	r3, [sp]
   16f20:	ldr	ip, [sp, #4]
   16f24:	ldr	r1, [r4]
   16f28:	lsr	r0, r3, #24
   16f2c:	lsl	r2, r3, #8
   16f30:	orr	r0, r0, r3, lsl #24
   16f34:	and	r2, r2, #16711680	; 0xff0000
   16f38:	lsr	r3, r3, #8
   16f3c:	orr	r0, r0, r2
   16f40:	and	r3, r3, #65280	; 0xff00
   16f44:	cmp	ip, r1
   16f48:	orr	r0, r0, r3
   16f4c:	bne	16f7c <__assert_fail@plt+0x5fb8>
   16f50:	add	sp, sp, #8
   16f54:	pop	{r4, pc}
   16f58:	ldr	r3, [pc, #40]	; 16f88 <__assert_fail@plt+0x5fc4>
   16f5c:	ldr	r1, [pc, #40]	; 16f8c <__assert_fail@plt+0x5fc8>
   16f60:	ldr	r0, [pc, #40]	; 16f90 <__assert_fail@plt+0x5fcc>
   16f64:	add	r3, pc, r3
   16f68:	ldr	r2, [pc, #36]	; 16f94 <__assert_fail@plt+0x5fd0>
   16f6c:	add	r3, r3, #16
   16f70:	add	r1, pc, r1
   16f74:	add	r0, pc, r0
   16f78:	bl	10fc4 <__assert_fail@plt>
   16f7c:	bl	10d9c <__stack_chk_fail@plt>
   16f80:	andeq	pc, r1, r8, lsr #31
   16f84:	andeq	r0, r0, r4, lsl r1
   16f88:	andeq	ip, r0, ip, ror #13
   16f8c:	andeq	ip, r0, r8, lsl #16
   16f90:	andeq	ip, r0, r4, asr #16
   16f94:	andeq	r0, r0, sp, asr r2
   16f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f9c:	mov	r8, r1
   16fa0:	ldr	fp, [pc, #880]	; 17318 <__assert_fail@plt+0x6354>
   16fa4:	ldr	ip, [pc, #880]	; 1731c <__assert_fail@plt+0x6358>
   16fa8:	add	fp, pc, fp
   16fac:	sub	sp, sp, #60	; 0x3c
   16fb0:	ldr	r1, [fp, ip]
   16fb4:	mov	r4, r0
   16fb8:	mov	ip, r1
   16fbc:	str	r1, [sp, #20]
   16fc0:	ldr	ip, [ip]
   16fc4:	mov	r1, #0
   16fc8:	mov	r0, r1
   16fcc:	mov	r9, r3
   16fd0:	str	ip, [sp, #52]	; 0x34
   16fd4:	mov	r5, r2
   16fd8:	bl	19530 <__assert_fail@plt+0x856c>
   16fdc:	ldr	ip, [r4, #4]
   16fe0:	mov	r7, r0
   16fe4:	ldr	r0, [r4, #8]
   16fe8:	mov	r3, r0
   16fec:	rsb	r1, r0, #1
   16ff0:	cmp	ip, r3
   16ff4:	bls	172f4 <__assert_fail@plt+0x6330>
   16ff8:	add	r6, r3, r1
   16ffc:	ldrb	r2, [r3], #1
   17000:	cmp	r2, #0
   17004:	bne	16ff0 <__assert_fail@plt+0x602c>
   17008:	bl	1c550 <__assert_fail@plt+0xb58c>
   1700c:	ldr	r3, [r4, #8]
   17010:	mov	r1, #4
   17014:	add	r6, r3, r6
   17018:	str	r6, [r4, #8]
   1701c:	mov	sl, r0
   17020:	mov	r0, r4
   17024:	bl	16a24 <__assert_fail@plt+0x5a60>
   17028:	tst	r9, #1
   1702c:	streq	sl, [r7, #4]
   17030:	bne	1727c <__assert_fail@plt+0x62b8>
   17034:	lsr	r3, r9, #1
   17038:	and	r3, r3, #1
   1703c:	str	r3, [sp, #12]
   17040:	ldr	r3, [pc, #728]	; 17320 <__assert_fail@plt+0x635c>
   17044:	add	r3, pc, r3
   17048:	str	r3, [sp, #16]
   1704c:	mov	r0, r4
   17050:	bl	16ed4 <__assert_fail@plt+0x5f10>
   17054:	sub	r3, r0, #1
   17058:	cmp	r3, #8
   1705c:	addls	pc, pc, r3, lsl #2
   17060:	b	172e4 <__assert_fail@plt+0x6320>
   17064:	b	171bc <__assert_fail@plt+0x61f8>
   17068:	b	171e0 <__assert_fail@plt+0x621c>
   1706c:	b	170b0 <__assert_fail@plt+0x60ec>
   17070:	b	17088 <__assert_fail@plt+0x60c4>
   17074:	b	172e4 <__assert_fail@plt+0x6320>
   17078:	b	172e4 <__assert_fail@plt+0x6320>
   1707c:	b	172e4 <__assert_fail@plt+0x6320>
   17080:	b	172e4 <__assert_fail@plt+0x6320>
   17084:	b	172d8 <__assert_fail@plt+0x6314>
   17088:	tst	r9, #64	; 0x40
   1708c:	bne	1704c <__assert_fail@plt+0x6088>
   17090:	ldr	r3, [pc, #652]	; 17324 <__assert_fail@plt+0x6360>
   17094:	mov	r2, #48	; 0x30
   17098:	mov	r1, #1
   1709c:	ldr	r3, [fp, r3]
   170a0:	ldr	r0, [sp, #16]
   170a4:	ldr	r3, [r3]
   170a8:	bl	10dcc <fwrite@plt>
   170ac:	b	1704c <__assert_fail@plt+0x6088>
   170b0:	ldr	r3, [r7, #12]
   170b4:	cmp	r3, #0
   170b8:	beq	170dc <__assert_fail@plt+0x6118>
   170bc:	ldr	r3, [pc, #608]	; 17324 <__assert_fail@plt+0x6360>
   170c0:	ldr	r0, [pc, #608]	; 17328 <__assert_fail@plt+0x6364>
   170c4:	mov	r2, #60	; 0x3c
   170c8:	ldr	r3, [fp, r3]
   170cc:	mov	r1, #1
   170d0:	add	r0, pc, r0
   170d4:	ldr	r3, [r3]
   170d8:	bl	10dcc <fwrite@plt>
   170dc:	mov	r0, r4
   170e0:	bl	16ed4 <__assert_fail@plt+0x5f10>
   170e4:	mov	r6, r0
   170e8:	mov	r0, r4
   170ec:	bl	16ed4 <__assert_fail@plt+0x5f10>
   170f0:	ldm	r8, {r1, ip}
   170f4:	add	lr, r1, r0
   170f8:	cmp	r1, lr
   170fc:	movls	r3, #0
   17100:	movhi	r3, #1
   17104:	cmp	ip, lr
   17108:	orrls	r3, r3, #1
   1710c:	cmp	r3, #0
   17110:	bne	172c8 <__assert_fail@plt+0x6304>
   17114:	ldrb	r3, [r1, r0]
   17118:	cmp	r3, #0
   1711c:	beq	17154 <__assert_fail@plt+0x6190>
   17120:	add	r3, lr, #1
   17124:	cmp	r1, r3
   17128:	movls	r2, #0
   1712c:	movhi	r2, #1
   17130:	cmp	ip, r3
   17134:	orrls	r2, r2, #1
   17138:	cmp	r2, #0
   1713c:	mov	r2, r3
   17140:	bne	172c8 <__assert_fail@plt+0x6304>
   17144:	ldrb	r2, [r2]
   17148:	add	r3, r3, #1
   1714c:	cmp	r2, #0
   17150:	bne	17124 <__assert_fail@plt+0x6160>
   17154:	mov	r0, lr
   17158:	bl	1c550 <__assert_fail@plt+0xb58c>
   1715c:	ldr	r3, [sp, #12]
   17160:	cmp	r6, #7
   17164:	movls	r3, #0
   17168:	andhi	r3, r3, #1
   1716c:	cmp	r3, #0
   17170:	str	r0, [sp, #8]
   17174:	bne	17214 <__assert_fail@plt+0x6250>
   17178:	add	r5, sp, #40	; 0x28
   1717c:	cmp	r6, #0
   17180:	str	r3, [sp, #40]	; 0x28
   17184:	str	r3, [r5, #4]
   17188:	str	r3, [r5, #8]
   1718c:	bne	1722c <__assert_fail@plt+0x6268>
   17190:	add	r3, sp, #28
   17194:	str	r6, [sp, #28]
   17198:	str	r6, [r3, #4]
   1719c:	str	r6, [r3, #8]
   171a0:	ldm	r3, {r1, r2, r3}
   171a4:	ldr	r0, [sp, #8]
   171a8:	bl	19434 <__assert_fail@plt+0x8470>
   171ac:	mov	r1, r0
   171b0:	mov	r0, r7
   171b4:	bl	19674 <__assert_fail@plt+0x86b0>
   171b8:	b	1704c <__assert_fail@plt+0x6088>
   171bc:	mov	r1, r8
   171c0:	mov	r3, r9
   171c4:	mov	r2, sl
   171c8:	mov	r0, r4
   171cc:	bl	16f98 <__assert_fail@plt+0x5fd4>
   171d0:	mov	r1, r0
   171d4:	mov	r0, r7
   171d8:	bl	19704 <__assert_fail@plt+0x8740>
   171dc:	b	1704c <__assert_fail@plt+0x6088>
   171e0:	ldr	r3, [r7, #4]
   171e4:	cmp	r3, sl
   171e8:	beq	171f4 <__assert_fail@plt+0x6230>
   171ec:	mov	r0, sl
   171f0:	bl	10d60 <free@plt>
   171f4:	ldr	r3, [sp, #20]
   171f8:	ldr	r2, [sp, #52]	; 0x34
   171fc:	mov	r0, r7
   17200:	ldr	r3, [r3]
   17204:	cmp	r2, r3
   17208:	bne	17314 <__assert_fail@plt+0x6350>
   1720c:	add	sp, sp, #60	; 0x3c
   17210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17214:	mov	r1, #8
   17218:	mov	r0, r4
   1721c:	add	r5, sp, #40	; 0x28
   17220:	bl	16a24 <__assert_fail@plt+0x5a60>
   17224:	mov	r3, #0
   17228:	str	r3, [sp, #48]	; 0x30
   1722c:	mov	r3, #0
   17230:	str	r6, [sp]
   17234:	str	r3, [sp, #40]	; 0x28
   17238:	str	r3, [sp, #44]	; 0x2c
   1723c:	mov	r0, r5
   17240:	ldm	r5, {r1, r2, r3}
   17244:	bl	157c0 <__assert_fail@plt+0x47fc>
   17248:	mov	r3, r6
   1724c:	ldr	r2, [sp, #44]	; 0x2c
   17250:	add	r1, r4, #8
   17254:	ldr	r0, [r4, #4]
   17258:	bl	16e8c <__assert_fail@plt+0x5ec8>
   1725c:	mov	r1, #4
   17260:	mov	r0, r4
   17264:	bl	16a24 <__assert_fail@plt+0x5a60>
   17268:	str	r6, [sp, #40]	; 0x28
   1726c:	ldm	r5, {r0, r1, r2}
   17270:	add	r3, sp, #28
   17274:	stm	r3, {r0, r1, r2}
   17278:	b	171a0 <__assert_fail@plt+0x61dc>
   1727c:	mov	r0, r5
   17280:	bl	10e74 <strlen@plt>
   17284:	mov	r1, r5
   17288:	mov	r2, r0
   1728c:	mov	r6, r0
   17290:	mov	r0, sl
   17294:	bl	10f70 <strncmp@plt>
   17298:	cmp	r0, #0
   1729c:	bne	17300 <__assert_fail@plt+0x633c>
   172a0:	ldr	r1, [pc, #132]	; 1732c <__assert_fail@plt+0x6368>
   172a4:	mov	r0, r5
   172a8:	add	r1, pc, r1
   172ac:	bl	10d24 <strcmp@plt>
   172b0:	cmp	r0, #0
   172b4:	addne	r6, r6, #1
   172b8:	add	r0, sl, r6
   172bc:	bl	1c550 <__assert_fail@plt+0xb58c>
   172c0:	str	r0, [r7, #4]
   172c4:	b	17034 <__assert_fail@plt+0x6070>
   172c8:	mov	r1, r0
   172cc:	ldr	r0, [pc, #92]	; 17330 <__assert_fail@plt+0x636c>
   172d0:	add	r0, pc, r0
   172d4:	bl	169a8 <__assert_fail@plt+0x59e4>
   172d8:	ldr	r0, [pc, #84]	; 17334 <__assert_fail@plt+0x6370>
   172dc:	add	r0, pc, r0
   172e0:	bl	169a8 <__assert_fail@plt+0x59e4>
   172e4:	mov	r1, r0
   172e8:	ldr	r0, [pc, #72]	; 17338 <__assert_fail@plt+0x6374>
   172ec:	add	r0, pc, r0
   172f0:	bl	169a8 <__assert_fail@plt+0x59e4>
   172f4:	ldr	r0, [pc, #64]	; 1733c <__assert_fail@plt+0x6378>
   172f8:	add	r0, pc, r0
   172fc:	bl	169a8 <__assert_fail@plt+0x59e4>
   17300:	ldr	r0, [pc, #56]	; 17340 <__assert_fail@plt+0x637c>
   17304:	mov	r2, r5
   17308:	mov	r1, sl
   1730c:	add	r0, pc, r0
   17310:	bl	169a8 <__assert_fail@plt+0x59e4>
   17314:	bl	10d9c <__stack_chk_fail@plt>
   17318:	ldrdeq	pc, [r1], -ip
   1731c:	andeq	r0, r0, r4, lsl r1
   17320:	andeq	ip, r0, r0, ror #16
   17324:	andeq	r0, r0, ip, lsr r1
   17328:	andeq	ip, r0, r4, asr #14
   1732c:	andeq	ip, r0, r8, ror #10
   17330:	andeq	ip, r0, r4, lsl #11
   17334:	andeq	ip, r0, r0, lsr #11
   17338:	andeq	ip, r0, ip, ror #11
   1733c:	andeq	ip, r0, r0, lsr r4
   17340:	ldrdeq	ip, [r0], -r8
   17344:	push	{r4, r5, r6, lr}
   17348:	sub	sp, sp, #8
   1734c:	ldr	r4, [pc, #96]	; 173b4 <__assert_fail@plt+0x63f0>
   17350:	ldr	r2, [pc, #96]	; 173b8 <__assert_fail@plt+0x63f4>
   17354:	add	r4, pc, r4
   17358:	mov	r5, r1
   1735c:	str	r1, [sp]
   17360:	mov	r3, r4
   17364:	add	r2, pc, r2
   17368:	mov	r1, #1
   1736c:	mov	r6, r0
   17370:	bl	10ee0 <__fprintf_chk@plt>
   17374:	ldr	r2, [pc, #64]	; 173bc <__assert_fail@plt+0x63f8>
   17378:	mov	r3, r4
   1737c:	str	r5, [sp]
   17380:	mov	r0, r6
   17384:	add	r2, pc, r2
   17388:	mov	r1, #1
   1738c:	bl	10ee0 <__fprintf_chk@plt>
   17390:	ldr	r2, [pc, #40]	; 173c0 <__assert_fail@plt+0x63fc>
   17394:	str	r5, [sp]
   17398:	mov	r3, r4
   1739c:	mov	r0, r6
   173a0:	add	r2, pc, r2
   173a4:	mov	r1, #1
   173a8:	bl	10ee0 <__fprintf_chk@plt>
   173ac:	add	sp, sp, #8
   173b0:	pop	{r4, r5, r6, pc}
   173b4:			; <UNDEFINED> instruction: 0x0000c5b4
   173b8:	andeq	ip, r0, r8, lsr #11
   173bc:	muleq	r0, r8, r5
   173c0:	andeq	ip, r0, r4, lsl #11
   173c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173c8:	sub	sp, sp, #180	; 0xb4
   173cc:	ldr	r5, [pc, #2152]	; 17c3c <__assert_fail@plt+0x6c78>
   173d0:	ldr	r3, [pc, #2152]	; 17c40 <__assert_fail@plt+0x6c7c>
   173d4:	ldr	ip, [pc, #2152]	; 17c44 <__assert_fail@plt+0x6c80>
   173d8:	add	r5, pc, r5
   173dc:	add	ip, pc, ip
   173e0:	str	r5, [sp, #20]
   173e4:	ldr	r3, [r5, r3]
   173e8:	ldr	r4, [ip]
   173ec:	mov	lr, r3
   173f0:	str	r3, [sp, #60]	; 0x3c
   173f4:	ldr	r3, [ip, #16]
   173f8:	cmp	r2, r4
   173fc:	add	r8, sp, #84	; 0x54
   17400:	moveq	r4, ip
   17404:	movne	r4, #0
   17408:	cmp	r2, r3
   1740c:	mov	r3, #0
   17410:	str	r3, [r8, #4]
   17414:	str	r3, [sp, #84]	; 0x54
   17418:	str	r3, [r8, #8]
   1741c:	str	r3, [sp, #108]	; 0x6c
   17420:	str	r3, [sp, #120]	; 0x78
   17424:	str	r3, [sp, #112]	; 0x70
   17428:	str	r3, [sp, #116]	; 0x74
   1742c:	str	r3, [sp, #124]	; 0x7c
   17430:	str	r3, [sp, #128]	; 0x80
   17434:	addeq	r3, ip, #16
   17438:	str	r4, [sp, #16]
   1743c:	streq	r3, [sp, #16]
   17440:	ldr	r3, [pc, #2048]	; 17c48 <__assert_fail@plt+0x6c84>
   17444:	mov	fp, r1
   17448:	add	r3, pc, r3
   1744c:	ldr	lr, [lr]
   17450:	ldr	r1, [r3, #32]
   17454:	add	r6, sp, #108	; 0x6c
   17458:	cmp	r2, r1
   1745c:	addeq	r3, r3, #32
   17460:	streq	r3, [sp, #16]
   17464:	ldr	r3, [pc, #2016]	; 17c4c <__assert_fail@plt+0x6c88>
   17468:	add	r7, sp, #120	; 0x78
   1746c:	add	r3, pc, r3
   17470:	str	r6, [sp, #24]
   17474:	ldr	r1, [r3, #48]	; 0x30
   17478:	str	r7, [sp, #32]
   1747c:	cmp	r2, r1
   17480:	str	r0, [sp, #40]	; 0x28
   17484:	str	lr, [sp, #172]	; 0xac
   17488:	ldr	r1, [r3, #64]	; 0x40
   1748c:	beq	17adc <__assert_fail@plt+0x6b18>
   17490:	cmp	r1, r2
   17494:	beq	1798c <__assert_fail@plt+0x69c8>
   17498:	ldr	r3, [sp, #16]
   1749c:	cmp	r3, #0
   174a0:	beq	17c28 <__assert_fail@plt+0x6c64>
   174a4:	ldr	r0, [fp, #12]
   174a8:	ldrb	r3, [r0]
   174ac:	cmp	r3, #0
   174b0:	bne	174d0 <__assert_fail@plt+0x650c>
   174b4:	ldr	r3, [sp, #16]
   174b8:	ldr	r1, [pc, #1936]	; 17c50 <__assert_fail@plt+0x6c8c>
   174bc:	str	r3, [sp]
   174c0:	ldr	r2, [sp, #24]
   174c4:	ldr	r3, [sp, #32]
   174c8:	add	r1, pc, r1
   174cc:	bl	16c38 <__assert_fail@plt+0x5c74>
   174d0:	ldr	r7, [sp, #24]
   174d4:	add	r5, sp, #64	; 0x40
   174d8:	mov	r3, #9
   174dc:	mov	r0, r5
   174e0:	str	r3, [sp]
   174e4:	ldm	r7, {r1, r2, r3}
   174e8:	bl	15d2c <__assert_fail@plt+0x4d68>
   174ec:	ldm	r5, {r0, r1, r2}
   174f0:	mov	r3, #0
   174f4:	ldr	r6, [fp, #4]
   174f8:	add	r4, sp, #132	; 0x84
   174fc:	cmp	r6, r3
   17500:	stm	r7, {r0, r1, r2}
   17504:	movne	r7, fp
   17508:	str	r3, [r4, #4]
   1750c:	str	r3, [sp, #132]	; 0x84
   17510:	str	r3, [r4, #8]
   17514:	beq	17544 <__assert_fail@plt+0x6580>
   17518:	ldrd	r2, [r6, #8]
   1751c:	mov	r0, r4
   17520:	strd	r2, [sp, #8]
   17524:	ldrd	sl, [r6]
   17528:	ldm	r4, {r1, r2, r3}
   1752c:	strd	sl, [sp]
   17530:	bl	15c90 <__assert_fail@plt+0x4ccc>
   17534:	ldr	r6, [r6, #16]
   17538:	cmp	r6, #0
   1753c:	bne	17518 <__assert_fail@plt+0x6554>
   17540:	mov	fp, r7
   17544:	ldr	r3, [pc, #1800]	; 17c54 <__assert_fail@plt+0x6c90>
   17548:	ldr	r2, [sp, #20]
   1754c:	ldr	sl, [r2, r3]
   17550:	ldr	r3, [sl]
   17554:	cmp	r3, #0
   17558:	movgt	r9, #0
   1755c:	movgt	r6, #0
   17560:	movgt	r7, #0
   17564:	ble	17594 <__assert_fail@plt+0x65d0>
   17568:	strd	r6, [sp, #8]
   1756c:	strd	r6, [sp]
   17570:	mov	r0, r5
   17574:	ldm	r4, {r1, r2, r3}
   17578:	bl	15c90 <__assert_fail@plt+0x4ccc>
   1757c:	ldm	r5, {r0, r1, r2}
   17580:	add	r9, r9, #1
   17584:	ldr	r3, [sl]
   17588:	cmp	r9, r3
   1758c:	stm	r4, {r0, r1, r2}
   17590:	blt	17568 <__assert_fail@plt+0x65a4>
   17594:	ldr	r2, [sp, #16]
   17598:	ldr	r1, [sp, #132]	; 0x84
   1759c:	ldr	r0, [sp, #120]	; 0x78
   175a0:	ldr	r3, [r2, #8]
   175a4:	str	r1, [sp, #44]	; 0x2c
   175a8:	str	r3, [sp, #36]	; 0x24
   175ac:	add	r3, r3, #7
   175b0:	bic	r3, r3, #7
   175b4:	add	ip, r1, #16
   175b8:	ldr	r1, [sp, #108]	; 0x6c
   175bc:	add	ip, ip, r3
   175c0:	add	lr, r1, ip
   175c4:	add	r7, r0, lr
   175c8:	ldr	r6, [r2]
   175cc:	ldr	sl, [r2, #4]
   175d0:	lsr	r9, r7, #24
   175d4:	lsl	r2, r7, #8
   175d8:	str	r1, [sp, #48]	; 0x30
   175dc:	and	r2, r2, #16711680	; 0xff0000
   175e0:	orr	r1, r9, r7, lsl #24
   175e4:	lsr	r7, r7, #8
   175e8:	orr	r9, r1, r2
   175ec:	and	r7, r7, #65280	; 0xff00
   175f0:	ldr	fp, [fp, #8]
   175f4:	orr	r9, r9, r7
   175f8:	add	r7, sp, #96	; 0x60
   175fc:	str	r7, [sp, #28]
   17600:	str	r0, [sp, #52]	; 0x34
   17604:	ldm	r4, {r0, r1, r2}
   17608:	lsr	r7, lr, #24
   1760c:	str	fp, [sp, #56]	; 0x38
   17610:	ldr	fp, [sp, #28]
   17614:	orr	r7, r7, lr, lsl #24
   17618:	str	r9, [sp, #136]	; 0x88
   1761c:	stm	fp, {r0, r1, r2}
   17620:	lsl	r2, lr, #8
   17624:	and	r2, r2, #16711680	; 0xff0000
   17628:	orr	r7, r7, r2
   1762c:	lsr	r1, ip, #24
   17630:	lsl	r2, ip, #8
   17634:	orr	r1, r1, ip, lsl #24
   17638:	lsr	lr, lr, #8
   1763c:	and	r2, r2, #16711680	; 0xff0000
   17640:	orr	r2, r1, r2
   17644:	lsr	r0, r3, #24
   17648:	lsl	r1, r3, #8
   1764c:	and	lr, lr, #65280	; 0xff00
   17650:	orr	r0, r0, r3, lsl #24
   17654:	orr	lr, r7, lr
   17658:	and	r1, r1, #16711680	; 0xff0000
   1765c:	lsr	r7, r6, #24
   17660:	lsl	fp, r6, #8
   17664:	lsr	ip, ip, #8
   17668:	orr	r0, r0, r1
   1766c:	orr	r7, r7, r6, lsl #24
   17670:	and	fp, fp, #16711680	; 0xff0000
   17674:	ldr	r1, [sp, #16]
   17678:	and	ip, ip, #65280	; 0xff00
   1767c:	orr	ip, r2, ip
   17680:	orr	r7, r7, fp
   17684:	lsr	r2, sl, #24
   17688:	lsl	fp, sl, #8
   1768c:	orr	r2, r2, sl, lsl #24
   17690:	and	fp, fp, #16711680	; 0xff0000
   17694:	lsr	sl, sl, #8
   17698:	orr	r2, r2, fp
   1769c:	ldr	r1, [r1, #12]
   176a0:	lsr	r3, r3, #8
   176a4:	lsr	r6, r6, #8
   176a8:	and	sl, sl, #65280	; 0xff00
   176ac:	orr	sl, r2, sl
   176b0:	and	r3, r3, #65280	; 0xff00
   176b4:	and	r6, r6, #65280	; 0xff00
   176b8:	ldr	r2, [pc, #1432]	; 17c58 <__assert_fail@plt+0x6c94>
   176bc:	orr	r3, r0, r3
   176c0:	orr	r6, r7, r6
   176c4:	mvn	r0, #0
   176c8:	tst	r1, #8
   176cc:	str	lr, [sp, #144]	; 0x90
   176d0:	str	ip, [sp, #140]	; 0x8c
   176d4:	str	r3, [sp, #148]	; 0x94
   176d8:	str	r6, [sp, #152]	; 0x98
   176dc:	str	sl, [sp, #156]	; 0x9c
   176e0:	str	r0, [sp, #164]	; 0xa4
   176e4:	str	r0, [sp, #160]	; 0xa0
   176e8:	str	r0, [sp, #168]	; 0xa8
   176ec:	str	r2, [sp, #132]	; 0x84
   176f0:	beq	1771c <__assert_fail@plt+0x6758>
   176f4:	ldr	r0, [sp, #56]	; 0x38
   176f8:	lsr	r2, r0, #24
   176fc:	lsl	r3, r0, #8
   17700:	orr	r2, r2, r0, lsl #24
   17704:	and	r3, r3, #16711680	; 0xff0000
   17708:	lsr	r0, r0, #8
   1770c:	orr	r3, r2, r3
   17710:	and	r0, r0, #65280	; 0xff00
   17714:	orr	r3, r3, r0
   17718:	str	r3, [sp, #160]	; 0xa0
   1771c:	tst	r1, #16
   17720:	beq	1774c <__assert_fail@plt+0x6788>
   17724:	ldr	r0, [sp, #52]	; 0x34
   17728:	lsr	r2, r0, #24
   1772c:	lsl	r3, r0, #8
   17730:	orr	r2, r2, r0, lsl #24
   17734:	and	r3, r3, #16711680	; 0xff0000
   17738:	lsr	r0, r0, #8
   1773c:	orr	r3, r2, r3
   17740:	and	r0, r0, #65280	; 0xff00
   17744:	orr	r3, r3, r0
   17748:	str	r3, [sp, #164]	; 0xa4
   1774c:	tst	r1, #32
   17750:	beq	1777c <__assert_fail@plt+0x67b8>
   17754:	ldr	r3, [sp, #48]	; 0x30
   17758:	lsr	r2, r3, #24
   1775c:	lsl	r1, r3, #8
   17760:	orr	r2, r2, r3, lsl #24
   17764:	and	r1, r1, #16711680	; 0xff0000
   17768:	lsr	r3, r3, #8
   1776c:	orr	r2, r2, r1
   17770:	and	r3, r3, #65280	; 0xff00
   17774:	orr	r3, r2, r3
   17778:	str	r3, [sp, #168]	; 0xa8
   1777c:	ldr	r3, [pc, #1240]	; 17c5c <__assert_fail@plt+0x6c98>
   17780:	ldr	r0, [sp, #20]
   17784:	ldr	r3, [r0, r3]
   17788:	ldr	r1, [r3]
   1778c:	cmp	r1, #0
   17790:	ble	17998 <__assert_fail@plt+0x69d4>
   17794:	lsr	r2, r9, #24
   17798:	lsl	r6, r9, #8
   1779c:	rev	r3, r9
   177a0:	orr	r2, r2, r9, lsl #24
   177a4:	and	r6, r6, #16711680	; 0xff0000
   177a8:	lsr	r9, r9, #8
   177ac:	subs	r0, r1, r3
   177b0:	orr	r2, r2, r6
   177b4:	and	r9, r9, #65280	; 0xff00
   177b8:	bmi	179d8 <__assert_fail@plt+0x6a14>
   177bc:	ldr	ip, [sp, #20]
   177c0:	ldr	r1, [pc, #1176]	; 17c60 <__assert_fail@plt+0x6c9c>
   177c4:	ldr	r3, [pc, #1176]	; 17c64 <__assert_fail@plt+0x6ca0>
   177c8:	ldr	r1, [ip, r1]
   177cc:	ldr	r3, [ip, r3]
   177d0:	ldr	r6, [r1]
   177d4:	ldr	r3, [r3]
   177d8:	cmp	r6, #0
   177dc:	ble	17bcc <__assert_fail@plt+0x6c08>
   177e0:	cmp	r3, #0
   177e4:	movgt	r0, r6
   177e8:	ble	17830 <__assert_fail@plt+0x686c>
   177ec:	orr	r2, r9, r2
   177f0:	sub	r6, r0, #1
   177f4:	add	r6, r6, r2
   177f8:	add	r6, r6, r3
   177fc:	rsb	r3, r3, #0
   17800:	and	r6, r6, r3
   17804:	sub	r6, r6, r2
   17808:	cmp	r6, #0
   1780c:	ble	17a20 <__assert_fail@plt+0x6a5c>
   17810:	ldr	r9, [sp, #136]	; 0x88
   17814:	lsr	r2, r9, #24
   17818:	lsl	r3, r9, #8
   1781c:	orr	r2, r2, r9, lsl #24
   17820:	and	r3, r3, #16711680	; 0xff0000
   17824:	lsr	r9, r9, #8
   17828:	orr	r2, r2, r3
   1782c:	and	r9, r9, #65280	; 0xff00
   17830:	orr	r2, r2, r9
   17834:	add	r2, r2, r6
   17838:	mov	r3, #0
   1783c:	lsr	ip, r2, #24
   17840:	lsl	r1, r2, #8
   17844:	orr	ip, ip, r2, lsl #24
   17848:	and	r1, r1, #16711680	; 0xff0000
   1784c:	orr	ip, ip, r1
   17850:	lsr	r2, r2, #8
   17854:	ldr	r1, [sp, #36]	; 0x24
   17858:	and	r2, r2, #65280	; 0xff00
   1785c:	orr	ip, ip, r2
   17860:	str	r4, [sp]
   17864:	str	r1, [sp, #4]
   17868:	str	r3, [sp, #84]	; 0x54
   1786c:	str	r3, [sp, #88]	; 0x58
   17870:	mov	r0, r8
   17874:	ldm	r8, {r1, r2, r3}
   17878:	str	ip, [sp, #136]	; 0x88
   1787c:	bl	158e8 <__assert_fail@plt+0x4924>
   17880:	mov	r3, #8
   17884:	mov	r0, r5
   17888:	str	r3, [sp]
   1788c:	ldm	r8, {r1, r2, r3}
   17890:	bl	15f08 <__assert_fail@plt+0x4f44>
   17894:	ldr	r3, [sp, #44]	; 0x2c
   17898:	ldm	r5, {r0, r1, r2}
   1789c:	str	r3, [sp, #96]	; 0x60
   178a0:	ldr	r3, [sp, #28]
   178a4:	stm	r8, {r0, r1, r2}
   178a8:	ldm	r3, {r0, r1, r2}
   178ac:	stm	sp, {r0, r1, r2}
   178b0:	mov	r0, r5
   178b4:	ldm	r8, {r1, r2, r3}
   178b8:	bl	15a54 <__assert_fail@plt+0x4a90>
   178bc:	ldm	r5, {r0, r1, r2}
   178c0:	mov	r3, #16
   178c4:	str	r3, [sp]
   178c8:	stm	r8, {r0, r1, r2}
   178cc:	mov	r0, r5
   178d0:	ldm	r8, {r1, r2, r3}
   178d4:	bl	15e78 <__assert_fail@plt+0x4eb4>
   178d8:	ldm	r5, {r0, r1, r2}
   178dc:	ldr	r3, [sp, #24]
   178e0:	stm	r8, {r0, r1, r2}
   178e4:	ldm	r3, {r0, r1, r2}
   178e8:	stm	sp, {r0, r1, r2}
   178ec:	mov	r0, r5
   178f0:	ldm	r8, {r1, r2, r3}
   178f4:	bl	15a54 <__assert_fail@plt+0x4a90>
   178f8:	ldm	r5, {r0, r1, r2}
   178fc:	ldr	r3, [sp, #32]
   17900:	stm	r8, {r0, r1, r2}
   17904:	ldm	r3, {r0, r1, r2}
   17908:	stm	sp, {r0, r1, r2}
   1790c:	mov	r0, r5
   17910:	ldm	r8, {r1, r2, r3}
   17914:	bl	15a54 <__assert_fail@plt+0x4a90>
   17918:	ldm	r5, {r0, r1, r2}
   1791c:	str	r6, [sp]
   17920:	stm	r8, {r0, r1, r2}
   17924:	mov	r0, r5
   17928:	ldm	r8, {r1, r2, r3}
   1792c:	bl	15e78 <__assert_fail@plt+0x4eb4>
   17930:	ldm	r5, {r0, r1, r2}
   17934:	stm	r8, {r0, r1, r2}
   17938:	ldr	r5, [sp, #84]	; 0x54
   1793c:	ldr	r4, [sp, #88]	; 0x58
   17940:	ldr	r6, [sp, #40]	; 0x28
   17944:	mov	r2, #1
   17948:	mov	r3, r6
   1794c:	mov	r1, r5
   17950:	mov	r0, r4
   17954:	bl	10dcc <fwrite@plt>
   17958:	cmp	r0, #1
   1795c:	beq	17af0 <__assert_fail@plt+0x6b2c>
   17960:	mov	r0, r6
   17964:	bl	10d6c <ferror@plt>
   17968:	cmp	r0, #0
   1796c:	beq	17b1c <__assert_fail@plt+0x6b58>
   17970:	bl	10e8c <__errno_location@plt>
   17974:	ldr	r0, [r0]
   17978:	bl	10e14 <strerror@plt>
   1797c:	mov	r1, r0
   17980:	ldr	r0, [pc, #736]	; 17c68 <__assert_fail@plt+0x6ca4>
   17984:	add	r0, pc, r0
   17988:	bl	169a8 <__assert_fail@plt+0x59e4>
   1798c:	add	r3, r3, #64	; 0x40
   17990:	str	r3, [sp, #16]
   17994:	b	174a4 <__assert_fail@plt+0x64e0>
   17998:	ldr	r2, [pc, #704]	; 17c60 <__assert_fail@plt+0x6c9c>
   1799c:	ldr	r3, [pc, #704]	; 17c64 <__assert_fail@plt+0x6ca0>
   179a0:	ldr	r2, [r0, r2]
   179a4:	ldr	r3, [r0, r3]
   179a8:	ldr	r6, [r2]
   179ac:	ldr	r3, [r3]
   179b0:	cmp	r6, #0
   179b4:	ble	17ba0 <__assert_fail@plt+0x6bdc>
   179b8:	lsr	r2, r9, #24
   179bc:	lsl	r1, r9, #8
   179c0:	orr	r2, r2, r9, lsl #24
   179c4:	and	r1, r1, #16711680	; 0xff0000
   179c8:	lsr	r9, r9, #8
   179cc:	orr	r2, r2, r1
   179d0:	and	r9, r9, #65280	; 0xff00
   179d4:	b	177e0 <__assert_fail@plt+0x681c>
   179d8:	ldr	r0, [pc, #652]	; 17c6c <__assert_fail@plt+0x6ca8>
   179dc:	ldr	ip, [sp, #20]
   179e0:	ldr	r0, [ip, r0]
   179e4:	ldr	r0, [r0]
   179e8:	cmp	r0, #0
   179ec:	ble	17b28 <__assert_fail@plt+0x6b64>
   179f0:	ldr	r0, [sp, #20]
   179f4:	ldr	r1, [pc, #612]	; 17c60 <__assert_fail@plt+0x6c9c>
   179f8:	ldr	r3, [pc, #612]	; 17c64 <__assert_fail@plt+0x6ca0>
   179fc:	ldr	r1, [r0, r1]
   17a00:	ldr	r3, [r0, r3]
   17a04:	ldr	r6, [r1]
   17a08:	ldr	r3, [r3]
   17a0c:	cmp	r6, #0
   17a10:	bgt	177e0 <__assert_fail@plt+0x681c>
   17a14:	cmp	r3, #0
   17a18:	movgt	r0, #0
   17a1c:	bgt	177ec <__assert_fail@plt+0x6828>
   17a20:	ldr	r3, [sp, #36]	; 0x24
   17a24:	str	r4, [sp]
   17a28:	str	r3, [sp, #4]
   17a2c:	mov	r0, r8
   17a30:	ldm	r8, {r1, r2, r3}
   17a34:	bl	158e8 <__assert_fail@plt+0x4924>
   17a38:	mov	r3, #8
   17a3c:	mov	r0, r5
   17a40:	str	r3, [sp]
   17a44:	ldm	r8, {r1, r2, r3}
   17a48:	bl	15f08 <__assert_fail@plt+0x4f44>
   17a4c:	ldm	r5, {r0, r1, r2}
   17a50:	ldr	r3, [sp, #28]
   17a54:	stm	r8, {r0, r1, r2}
   17a58:	ldm	r3, {r0, r1, r2}
   17a5c:	stm	sp, {r0, r1, r2}
   17a60:	mov	r0, r5
   17a64:	ldm	r8, {r1, r2, r3}
   17a68:	bl	15a54 <__assert_fail@plt+0x4a90>
   17a6c:	ldm	r5, {r0, r1, r2}
   17a70:	mov	r3, #16
   17a74:	str	r3, [sp]
   17a78:	stm	r8, {r0, r1, r2}
   17a7c:	mov	r0, r5
   17a80:	ldm	r8, {r1, r2, r3}
   17a84:	bl	15e78 <__assert_fail@plt+0x4eb4>
   17a88:	ldm	r5, {r0, r1, r2}
   17a8c:	ldr	r3, [sp, #24]
   17a90:	stm	r8, {r0, r1, r2}
   17a94:	ldm	r3, {r0, r1, r2}
   17a98:	stm	sp, {r0, r1, r2}
   17a9c:	mov	r0, r5
   17aa0:	ldm	r8, {r1, r2, r3}
   17aa4:	bl	15a54 <__assert_fail@plt+0x4a90>
   17aa8:	ldm	r5, {r0, r1, r2}
   17aac:	ldr	r3, [sp, #32]
   17ab0:	stm	r8, {r0, r1, r2}
   17ab4:	ldm	r3, {r0, r1, r2}
   17ab8:	stm	sp, {r0, r1, r2}
   17abc:	mov	r0, r5
   17ac0:	ldm	r8, {r1, r2, r3}
   17ac4:	bl	15a54 <__assert_fail@plt+0x4a90>
   17ac8:	ldm	r5, {r0, r1, r2}
   17acc:	stm	r8, {r0, r1, r2}
   17ad0:	ldr	r5, [sp, #84]	; 0x54
   17ad4:	ldr	r4, [sp, #88]	; 0x58
   17ad8:	b	17940 <__assert_fail@plt+0x697c>
   17adc:	cmp	r2, r1
   17ae0:	beq	1798c <__assert_fail@plt+0x69c8>
   17ae4:	add	r3, r3, #48	; 0x30
   17ae8:	str	r3, [sp, #16]
   17aec:	b	174a4 <__assert_fail@plt+0x64e0>
   17af0:	str	r5, [sp, #84]	; 0x54
   17af4:	str	r4, [sp, #88]	; 0x58
   17af8:	ldm	r8, {r0, r1, r2}
   17afc:	bl	15764 <__assert_fail@plt+0x47a0>
   17b00:	ldr	r3, [sp, #60]	; 0x3c
   17b04:	ldr	r2, [sp, #172]	; 0xac
   17b08:	ldr	r3, [r3]
   17b0c:	cmp	r2, r3
   17b10:	bne	17c38 <__assert_fail@plt+0x6c74>
   17b14:	add	sp, sp, #180	; 0xb4
   17b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b1c:	ldr	r0, [pc, #332]	; 17c70 <__assert_fail@plt+0x6cac>
   17b20:	add	r0, pc, r0
   17b24:	bl	169a8 <__assert_fail@plt+0x59e4>
   17b28:	ldr	r0, [pc, #324]	; 17c74 <__assert_fail@plt+0x6cb0>
   17b2c:	ldr	r2, [pc, #324]	; 17c78 <__assert_fail@plt+0x6cb4>
   17b30:	mov	r6, ip
   17b34:	ldr	r0, [ip, r0]
   17b38:	add	r2, pc, r2
   17b3c:	str	r1, [sp]
   17b40:	mov	r1, #1
   17b44:	ldr	r0, [r0]
   17b48:	bl	10ee0 <__fprintf_chk@plt>
   17b4c:	ldr	r3, [pc, #268]	; 17c60 <__assert_fail@plt+0x6c9c>
   17b50:	mov	r1, r6
   17b54:	ldr	r3, [r6, r3]
   17b58:	ldr	r6, [r3]
   17b5c:	cmp	r6, #0
   17b60:	ble	17bdc <__assert_fail@plt+0x6c18>
   17b64:	ldr	r0, [sp, #16]
   17b68:	ldr	r2, [pc, #244]	; 17c64 <__assert_fail@plt+0x6ca0>
   17b6c:	ldr	r3, [sp, #136]	; 0x88
   17b70:	ldr	r0, [r0, #8]
   17b74:	str	r0, [sp, #36]	; 0x24
   17b78:	ldr	r1, [r1, r2]
   17b7c:	lsr	r0, r3, #24
   17b80:	lsl	r2, r3, #8
   17b84:	orr	r0, r0, r3, lsl #24
   17b88:	lsr	r9, r3, #8
   17b8c:	and	r2, r2, #16711680	; 0xff0000
   17b90:	orr	r2, r0, r2
   17b94:	and	r9, r9, #65280	; 0xff00
   17b98:	ldr	r3, [r1]
   17b9c:	b	177e0 <__assert_fail@plt+0x681c>
   17ba0:	cmp	r3, #0
   17ba4:	ble	17a20 <__assert_fail@plt+0x6a5c>
   17ba8:	lsr	r2, r9, #24
   17bac:	lsl	r1, r9, #8
   17bb0:	orr	r2, r2, r9, lsl #24
   17bb4:	and	r1, r1, #16711680	; 0xff0000
   17bb8:	lsr	r9, r9, #8
   17bbc:	orr	r2, r2, r1
   17bc0:	and	r9, r9, #65280	; 0xff00
   17bc4:	mov	r0, #0
   17bc8:	b	177ec <__assert_fail@plt+0x6828>
   17bcc:	cmp	r3, #0
   17bd0:	bgt	177ec <__assert_fail@plt+0x6828>
   17bd4:	mov	r6, r0
   17bd8:	b	17808 <__assert_fail@plt+0x6844>
   17bdc:	ldr	r2, [sp, #16]
   17be0:	ldr	r3, [pc, #124]	; 17c64 <__assert_fail@plt+0x6ca0>
   17be4:	ldr	r2, [r2, #8]
   17be8:	str	r2, [sp, #36]	; 0x24
   17bec:	ldr	r2, [sp, #20]
   17bf0:	ldr	r3, [r2, r3]
   17bf4:	ldr	r3, [r3]
   17bf8:	cmp	r3, #0
   17bfc:	ble	17a20 <__assert_fail@plt+0x6a5c>
   17c00:	ldr	r9, [sp, #136]	; 0x88
   17c04:	mov	r0, #0
   17c08:	lsr	r6, r9, #24
   17c0c:	lsl	r2, r9, #8
   17c10:	orr	r6, r6, r9, lsl #24
   17c14:	and	r2, r2, #16711680	; 0xff0000
   17c18:	lsr	r9, r9, #8
   17c1c:	orr	r2, r6, r2
   17c20:	and	r9, r9, #65280	; 0xff00
   17c24:	b	177ec <__assert_fail@plt+0x6828>
   17c28:	ldr	r0, [pc, #76]	; 17c7c <__assert_fail@plt+0x6cb8>
   17c2c:	mov	r1, r2
   17c30:	add	r0, pc, r0
   17c34:	bl	169a8 <__assert_fail@plt+0x59e4>
   17c38:	bl	10d9c <__stack_chk_fail@plt>
   17c3c:	andeq	pc, r1, ip, lsr #21
   17c40:	andeq	r0, r0, r4, lsl r1
   17c44:	andeq	r0, r2, r0, asr #11
   17c48:	andeq	r0, r2, r4, asr r5
   17c4c:	andeq	r0, r2, r0, lsr r5
   17c50:	andeq	r0, r2, r4, lsr #10
   17c54:	andeq	r0, r0, r8, lsl #2
   17c58:	ldcl	13, cr0, [lr, #832]!	; 0x340
   17c5c:	andeq	r0, r0, r0, ror r1
   17c60:	andeq	r0, r0, r4, lsr #2
   17c64:	andeq	r0, r0, ip, lsl #2
   17c68:	andeq	ip, r0, r0
   17c6c:	andeq	r0, r0, r0, asr #2
   17c70:	andeq	fp, r0, r8, lsl #29
   17c74:	andeq	r0, r0, ip, lsr r1
   17c78:	andeq	fp, r0, r0, lsr #28
   17c7c:	andeq	fp, r0, r0, lsl #26
   17c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c84:	sub	sp, sp, #60	; 0x3c
   17c88:	ldr	r5, [pc, #2480]	; 18640 <__assert_fail@plt+0x767c>
   17c8c:	ldr	ip, [pc, #2480]	; 18644 <__assert_fail@plt+0x7680>
   17c90:	ldr	r3, [pc, #2480]	; 18648 <__assert_fail@plt+0x7684>
   17c94:	add	r5, pc, r5
   17c98:	add	r3, pc, r3
   17c9c:	str	r5, [sp, #20]
   17ca0:	ldr	ip, [r5, ip]
   17ca4:	ldr	r4, [r3]
   17ca8:	mov	lr, ip
   17cac:	str	ip, [sp, #36]	; 0x24
   17cb0:	ldr	ip, [r3, #16]
   17cb4:	cmp	r2, r4
   17cb8:	moveq	r4, r3
   17cbc:	movne	r4, #0
   17cc0:	cmp	ip, r2
   17cc4:	addeq	r3, r3, #16
   17cc8:	str	r4, [sp, #24]
   17ccc:	streq	r3, [sp, #24]
   17cd0:	ldr	r3, [pc, #2420]	; 1864c <__assert_fail@plt+0x7688>
   17cd4:	str	r1, [sp, #28]
   17cd8:	add	r3, pc, r3
   17cdc:	ldr	lr, [lr]
   17ce0:	ldr	r1, [r3, #32]
   17ce4:	mov	ip, #0
   17ce8:	cmp	r2, r1
   17cec:	addeq	r3, r3, #32
   17cf0:	streq	r3, [sp, #24]
   17cf4:	ldr	r3, [pc, #2388]	; 18650 <__assert_fail@plt+0x768c>
   17cf8:	add	r6, sp, #40	; 0x28
   17cfc:	add	r3, pc, r3
   17d00:	str	r6, [sp, #32]
   17d04:	ldr	r1, [r3, #48]	; 0x30
   17d08:	mov	r4, r0
   17d0c:	cmp	r2, r1
   17d10:	str	lr, [sp, #52]	; 0x34
   17d14:	str	ip, [sp, #44]	; 0x2c
   17d18:	str	ip, [sp, #40]	; 0x28
   17d1c:	str	ip, [sp, #48]	; 0x30
   17d20:	ldr	r1, [r3, #64]	; 0x40
   17d24:	beq	184b4 <__assert_fail@plt+0x74f0>
   17d28:	cmp	r1, r2
   17d2c:	beq	184a8 <__assert_fail@plt+0x74e4>
   17d30:	ldr	r3, [sp, #24]
   17d34:	cmp	r3, #0
   17d38:	beq	1862c <__assert_fail@plt+0x7668>
   17d3c:	ldr	r0, [pc, #2320]	; 18654 <__assert_fail@plt+0x7690>
   17d40:	mov	r3, r4
   17d44:	mov	r2, #41	; 0x29
   17d48:	mov	r1, #1
   17d4c:	add	r0, pc, r0
   17d50:	bl	10dcc <fwrite@plt>
   17d54:	ldr	r1, [pc, #2300]	; 18658 <__assert_fail@plt+0x7694>
   17d58:	mov	r0, r4
   17d5c:	add	r1, pc, r1
   17d60:	bl	17344 <__assert_fail@plt+0x6380>
   17d64:	ldr	r1, [pc, #2288]	; 1865c <__assert_fail@plt+0x7698>
   17d68:	mov	r0, r4
   17d6c:	add	r1, pc, r1
   17d70:	bl	17344 <__assert_fail@plt+0x6380>
   17d74:	ldr	r0, [pc, #2276]	; 18660 <__assert_fail@plt+0x769c>
   17d78:	mov	r3, r4
   17d7c:	mov	r2, #13
   17d80:	mov	r1, #1
   17d84:	add	r0, pc, r0
   17d88:	bl	10dcc <fwrite@plt>
   17d8c:	mov	r1, #13
   17d90:	mov	r2, #254	; 0xfe
   17d94:	mov	r3, #237	; 0xed
   17d98:	mov	r0, r4
   17d9c:	stm	sp, {r1, r2, r3}
   17da0:	mov	r3, #208	; 0xd0
   17da4:	ldr	r2, [pc, #2232]	; 18664 <__assert_fail@plt+0x76a0>
   17da8:	mov	r1, #1
   17dac:	add	r2, pc, r2
   17db0:	bl	10ee0 <__fprintf_chk@plt>
   17db4:	ldr	r0, [pc, #2220]	; 18668 <__assert_fail@plt+0x76a4>
   17db8:	mov	r3, r4
   17dbc:	mov	r2, #17
   17dc0:	mov	r1, #1
   17dc4:	ldr	r5, [pc, #2208]	; 1866c <__assert_fail@plt+0x76a8>
   17dc8:	add	r0, pc, r0
   17dcc:	bl	10dcc <fwrite@plt>
   17dd0:	ldr	r2, [pc, #2200]	; 18670 <__assert_fail@plt+0x76ac>
   17dd4:	add	r5, pc, r5
   17dd8:	mov	r3, r5
   17ddc:	str	r5, [sp]
   17de0:	add	r2, pc, r2
   17de4:	mov	r1, #1
   17de8:	mov	r0, r4
   17dec:	bl	10ee0 <__fprintf_chk@plt>
   17df0:	ldr	r2, [pc, #2172]	; 18674 <__assert_fail@plt+0x76b0>
   17df4:	mov	r3, r5
   17df8:	str	r5, [sp]
   17dfc:	add	r2, pc, r2
   17e00:	mov	r1, #1
   17e04:	mov	r0, r4
   17e08:	bl	10ee0 <__fprintf_chk@plt>
   17e0c:	ldr	r2, [pc, #2148]	; 18678 <__assert_fail@plt+0x76b4>
   17e10:	mov	r3, r5
   17e14:	str	r5, [sp]
   17e18:	add	r2, pc, r2
   17e1c:	mov	r1, #1
   17e20:	mov	r0, r4
   17e24:	bl	10ee0 <__fprintf_chk@plt>
   17e28:	ldr	r2, [pc, #2124]	; 1867c <__assert_fail@plt+0x76b8>
   17e2c:	mov	r3, r5
   17e30:	str	r5, [sp]
   17e34:	add	r2, pc, r2
   17e38:	mov	r1, #1
   17e3c:	mov	r0, r4
   17e40:	bl	10ee0 <__fprintf_chk@plt>
   17e44:	ldr	r0, [pc, #2100]	; 18680 <__assert_fail@plt+0x76bc>
   17e48:	mov	r3, r4
   17e4c:	mov	r2, #21
   17e50:	mov	r1, #1
   17e54:	add	r0, pc, r0
   17e58:	bl	10dcc <fwrite@plt>
   17e5c:	ldr	r2, [pc, #2080]	; 18684 <__assert_fail@plt+0x76c0>
   17e60:	mov	r3, r5
   17e64:	str	r5, [sp]
   17e68:	add	r2, pc, r2
   17e6c:	mov	r1, #1
   17e70:	mov	r0, r4
   17e74:	bl	10ee0 <__fprintf_chk@plt>
   17e78:	ldr	r2, [pc, #2056]	; 18688 <__assert_fail@plt+0x76c4>
   17e7c:	mov	r3, r5
   17e80:	str	r5, [sp]
   17e84:	add	r2, pc, r2
   17e88:	mov	r1, #1
   17e8c:	mov	r0, r4
   17e90:	bl	10ee0 <__fprintf_chk@plt>
   17e94:	ldr	r2, [pc, #2032]	; 1868c <__assert_fail@plt+0x76c8>
   17e98:	mov	r3, r5
   17e9c:	str	r5, [sp]
   17ea0:	add	r2, pc, r2
   17ea4:	mov	r1, #1
   17ea8:	mov	r0, r4
   17eac:	bl	10ee0 <__fprintf_chk@plt>
   17eb0:	ldr	r2, [pc, #2008]	; 18690 <__assert_fail@plt+0x76cc>
   17eb4:	mov	r3, r5
   17eb8:	str	r5, [sp]
   17ebc:	add	r2, pc, r2
   17ec0:	mov	r1, #1
   17ec4:	mov	r0, r4
   17ec8:	bl	10ee0 <__fprintf_chk@plt>
   17ecc:	ldr	r0, [pc, #1984]	; 18694 <__assert_fail@plt+0x76d0>
   17ed0:	mov	r3, r4
   17ed4:	mov	r2, #22
   17ed8:	mov	r1, #1
   17edc:	add	r0, pc, r0
   17ee0:	bl	10dcc <fwrite@plt>
   17ee4:	ldr	r2, [pc, #1964]	; 18698 <__assert_fail@plt+0x76d4>
   17ee8:	mov	r3, r5
   17eec:	str	r5, [sp]
   17ef0:	add	r2, pc, r2
   17ef4:	mov	r1, #1
   17ef8:	mov	r0, r4
   17efc:	bl	10ee0 <__fprintf_chk@plt>
   17f00:	ldr	r2, [pc, #1940]	; 1869c <__assert_fail@plt+0x76d8>
   17f04:	mov	r3, r5
   17f08:	str	r5, [sp]
   17f0c:	add	r2, pc, r2
   17f10:	mov	r1, #1
   17f14:	mov	r0, r4
   17f18:	bl	10ee0 <__fprintf_chk@plt>
   17f1c:	ldr	r2, [pc, #1916]	; 186a0 <__assert_fail@plt+0x76dc>
   17f20:	mov	r3, r5
   17f24:	str	r5, [sp]
   17f28:	add	r2, pc, r2
   17f2c:	mov	r1, #1
   17f30:	mov	r0, r4
   17f34:	bl	10ee0 <__fprintf_chk@plt>
   17f38:	ldr	r2, [pc, #1892]	; 186a4 <__assert_fail@plt+0x76e0>
   17f3c:	mov	r3, r5
   17f40:	str	r5, [sp]
   17f44:	add	r2, pc, r2
   17f48:	mov	r1, #1
   17f4c:	mov	r0, r4
   17f50:	bl	10ee0 <__fprintf_chk@plt>
   17f54:	ldr	r0, [pc, #1868]	; 186a8 <__assert_fail@plt+0x76e4>
   17f58:	mov	r3, r4
   17f5c:	mov	r2, #22
   17f60:	mov	r1, #1
   17f64:	add	r0, pc, r0
   17f68:	bl	10dcc <fwrite@plt>
   17f6c:	ldr	r2, [pc, #1848]	; 186ac <__assert_fail@plt+0x76e8>
   17f70:	mov	r3, r5
   17f74:	str	r5, [sp]
   17f78:	add	r2, pc, r2
   17f7c:	mov	r1, #1
   17f80:	mov	r0, r4
   17f84:	bl	10ee0 <__fprintf_chk@plt>
   17f88:	ldr	r2, [pc, #1824]	; 186b0 <__assert_fail@plt+0x76ec>
   17f8c:	mov	r3, r5
   17f90:	str	r5, [sp]
   17f94:	add	r2, pc, r2
   17f98:	mov	r1, #1
   17f9c:	mov	r0, r4
   17fa0:	bl	10ee0 <__fprintf_chk@plt>
   17fa4:	ldr	r2, [pc, #1800]	; 186b4 <__assert_fail@plt+0x76f0>
   17fa8:	mov	r3, r5
   17fac:	str	r5, [sp]
   17fb0:	add	r2, pc, r2
   17fb4:	mov	r1, #1
   17fb8:	mov	r0, r4
   17fbc:	bl	10ee0 <__fprintf_chk@plt>
   17fc0:	ldr	r2, [pc, #1776]	; 186b8 <__assert_fail@plt+0x76f4>
   17fc4:	mov	r3, r5
   17fc8:	str	r5, [sp]
   17fcc:	add	r2, pc, r2
   17fd0:	mov	r1, #1
   17fd4:	mov	r0, r4
   17fd8:	bl	10ee0 <__fprintf_chk@plt>
   17fdc:	ldr	r0, [pc, #1752]	; 186bc <__assert_fail@plt+0x76f8>
   17fe0:	mov	r3, r4
   17fe4:	mov	r2, #15
   17fe8:	mov	r1, #1
   17fec:	add	r0, pc, r0
   17ff0:	bl	10dcc <fwrite@plt>
   17ff4:	ldr	r5, [sp, #24]
   17ff8:	mov	r0, r4
   17ffc:	ldr	r1, [r5]
   18000:	bl	166ec <__assert_fail@plt+0x5728>
   18004:	ldr	r0, [pc, #1716]	; 186c0 <__assert_fail@plt+0x76fc>
   18008:	mov	r3, r4
   1800c:	mov	r2, #25
   18010:	mov	r1, #1
   18014:	add	r0, pc, r0
   18018:	bl	10dcc <fwrite@plt>
   1801c:	ldr	r1, [r5, #4]
   18020:	mov	r0, r4
   18024:	bl	166ec <__assert_fail@plt+0x5728>
   18028:	ldr	r3, [r5, #12]
   1802c:	tst	r3, #8
   18030:	bne	185f8 <__assert_fail@plt+0x7634>
   18034:	tst	r3, #16
   18038:	bne	1855c <__assert_fail@plt+0x7598>
   1803c:	tst	r3, #32
   18040:	bne	184c8 <__assert_fail@plt+0x7504>
   18044:	ldr	r2, [pc, #1656]	; 186c4 <__assert_fail@plt+0x7700>
   18048:	mov	r3, #8
   1804c:	add	r2, pc, r2
   18050:	mov	r1, #1
   18054:	mov	r0, r4
   18058:	bl	10ee0 <__fprintf_chk@plt>
   1805c:	ldr	r1, [pc, #1636]	; 186c8 <__assert_fail@plt+0x7704>
   18060:	mov	r0, r4
   18064:	add	r1, pc, r1
   18068:	bl	17344 <__assert_fail@plt+0x6380>
   1806c:	ldr	r0, [pc, #1624]	; 186cc <__assert_fail@plt+0x7708>
   18070:	mov	r3, r4
   18074:	mov	r2, #42	; 0x2a
   18078:	mov	r1, #1
   1807c:	add	r0, pc, r0
   18080:	bl	10dcc <fwrite@plt>
   18084:	ldr	r3, [sp, #28]
   18088:	ldr	r5, [r3, #4]
   1808c:	cmp	r5, #0
   18090:	beq	1826c <__assert_fail@plt+0x72a8>
   18094:	ldr	fp, [pc, #1588]	; 186d0 <__assert_fail@plt+0x770c>
   18098:	ldr	sl, [pc, #1588]	; 186d4 <__assert_fail@plt+0x7710>
   1809c:	ldr	r9, [pc, #1588]	; 186d8 <__assert_fail@plt+0x7714>
   180a0:	add	fp, pc, fp
   180a4:	add	sl, pc, sl
   180a8:	add	r9, pc, r9
   180ac:	ldr	r6, [r5, #20]
   180b0:	cmp	r6, #0
   180b4:	bne	180c8 <__assert_fail@plt+0x7104>
   180b8:	b	18108 <__assert_fail@plt+0x7144>
   180bc:	ldr	r6, [r6, #8]
   180c0:	cmp	r6, #0
   180c4:	beq	18108 <__assert_fail@plt+0x7144>
   180c8:	ldrb	r3, [r6]
   180cc:	cmp	r3, #0
   180d0:	bne	180bc <__assert_fail@plt+0x70f8>
   180d4:	ldr	r3, [r6, #4]
   180d8:	mov	r2, fp
   180dc:	mov	r1, #1
   180e0:	mov	r0, r4
   180e4:	bl	10ee0 <__fprintf_chk@plt>
   180e8:	ldr	r3, [r6, #4]
   180ec:	mov	r2, sl
   180f0:	mov	r1, #1
   180f4:	mov	r0, r4
   180f8:	bl	10ee0 <__fprintf_chk@plt>
   180fc:	ldr	r6, [r6, #8]
   18100:	cmp	r6, #0
   18104:	bne	180c8 <__assert_fail@plt+0x7104>
   18108:	ldr	r8, [pc, #1484]	; 186dc <__assert_fail@plt+0x7718>
   1810c:	ldr	r7, [pc, #1484]	; 186e0 <__assert_fail@plt+0x771c>
   18110:	add	r8, pc, r8
   18114:	ldr	r3, [r5, #4]
   18118:	mov	r2, r9
   1811c:	mov	r1, #1
   18120:	mov	r0, r4
   18124:	ldr	r6, [pc, #1464]	; 186e4 <__assert_fail@plt+0x7720>
   18128:	bl	10ee0 <__fprintf_chk@plt>
   1812c:	add	r7, pc, r7
   18130:	ldr	r3, [r5, #4]
   18134:	mov	r2, r8
   18138:	mov	r1, #1
   1813c:	mov	r0, r4
   18140:	bl	10ee0 <__fprintf_chk@plt>
   18144:	add	r6, pc, r6
   18148:	ldr	r3, [r5, #4]
   1814c:	mov	r2, r7
   18150:	mov	r1, #1
   18154:	mov	r0, r4
   18158:	bl	10ee0 <__fprintf_chk@plt>
   1815c:	ldr	r3, [r5, #4]
   18160:	mov	r2, r6
   18164:	mov	r1, #1
   18168:	mov	r0, r4
   1816c:	bl	10ee0 <__fprintf_chk@plt>
   18170:	ldr	r3, [r5]
   18174:	mov	r2, r9
   18178:	mov	r1, #1
   1817c:	mov	r0, r4
   18180:	bl	10ee0 <__fprintf_chk@plt>
   18184:	ldr	r3, [r5]
   18188:	mov	r2, r8
   1818c:	mov	r1, #1
   18190:	mov	r0, r4
   18194:	bl	10ee0 <__fprintf_chk@plt>
   18198:	ldr	r3, [r5]
   1819c:	mov	r2, r7
   181a0:	mov	r1, #1
   181a4:	mov	r0, r4
   181a8:	bl	10ee0 <__fprintf_chk@plt>
   181ac:	ldr	r3, [r5]
   181b0:	mov	r2, r6
   181b4:	mov	r1, #1
   181b8:	mov	r0, r4
   181bc:	bl	10ee0 <__fprintf_chk@plt>
   181c0:	ldr	r3, [r5, #12]
   181c4:	mov	r2, r9
   181c8:	mov	r1, #1
   181cc:	mov	r0, r4
   181d0:	bl	10ee0 <__fprintf_chk@plt>
   181d4:	ldr	r3, [r5, #12]
   181d8:	mov	r2, r8
   181dc:	mov	r1, #1
   181e0:	mov	r0, r4
   181e4:	bl	10ee0 <__fprintf_chk@plt>
   181e8:	ldr	r3, [r5, #12]
   181ec:	mov	r2, r7
   181f0:	mov	r1, #1
   181f4:	mov	r0, r4
   181f8:	bl	10ee0 <__fprintf_chk@plt>
   181fc:	ldr	r3, [r5, #12]
   18200:	mov	r2, r6
   18204:	mov	r1, #1
   18208:	mov	r0, r4
   1820c:	bl	10ee0 <__fprintf_chk@plt>
   18210:	ldr	r3, [r5, #8]
   18214:	mov	r2, r9
   18218:	mov	r1, #1
   1821c:	mov	r0, r4
   18220:	bl	10ee0 <__fprintf_chk@plt>
   18224:	ldr	r3, [r5, #8]
   18228:	mov	r2, r8
   1822c:	mov	r1, #1
   18230:	mov	r0, r4
   18234:	bl	10ee0 <__fprintf_chk@plt>
   18238:	ldr	r3, [r5, #8]
   1823c:	mov	r2, r7
   18240:	mov	r1, #1
   18244:	mov	r0, r4
   18248:	bl	10ee0 <__fprintf_chk@plt>
   1824c:	ldr	r3, [r5, #8]
   18250:	mov	r2, r6
   18254:	mov	r1, #1
   18258:	mov	r0, r4
   1825c:	bl	10ee0 <__fprintf_chk@plt>
   18260:	ldr	r5, [r5, #16]
   18264:	cmp	r5, #0
   18268:	bne	180ac <__assert_fail@plt+0x70e8>
   1826c:	ldr	r3, [pc, #1140]	; 186e8 <__assert_fail@plt+0x7724>
   18270:	ldr	r2, [sp, #20]
   18274:	ldr	r6, [r2, r3]
   18278:	ldr	r3, [r6]
   1827c:	cmp	r3, #0
   18280:	ble	182b4 <__assert_fail@plt+0x72f0>
   18284:	ldr	r7, [pc, #1120]	; 186ec <__assert_fail@plt+0x7728>
   18288:	mov	r5, #0
   1828c:	add	r7, pc, r7
   18290:	mov	r3, r4
   18294:	mov	r2, #24
   18298:	mov	r1, #1
   1829c:	mov	r0, r7
   182a0:	bl	10dcc <fwrite@plt>
   182a4:	ldr	r3, [r6]
   182a8:	add	r5, r5, #1
   182ac:	cmp	r3, r5
   182b0:	bgt	18290 <__assert_fail@plt+0x72cc>
   182b4:	ldr	r0, [pc, #1076]	; 186f0 <__assert_fail@plt+0x772c>
   182b8:	mov	r3, r4
   182bc:	mov	r2, #24
   182c0:	mov	r1, #1
   182c4:	add	r0, pc, r0
   182c8:	bl	10dcc <fwrite@plt>
   182cc:	ldr	r1, [pc, #1056]	; 186f4 <__assert_fail@plt+0x7730>
   182d0:	mov	r0, r4
   182d4:	add	r1, pc, r1
   182d8:	bl	17344 <__assert_fail@plt+0x6380>
   182dc:	ldr	r3, [sp, #28]
   182e0:	ldr	r0, [r3, #12]
   182e4:	ldrb	r3, [r0]
   182e8:	cmp	r3, #0
   182ec:	bne	18310 <__assert_fail@plt+0x734c>
   182f0:	ldr	r1, [pc, #1024]	; 186f8 <__assert_fail@plt+0x7734>
   182f4:	ldr	r3, [sp, #24]
   182f8:	add	r1, pc, r1
   182fc:	str	r3, [sp]
   18300:	add	r1, r1, #28
   18304:	ldr	r3, [sp, #32]
   18308:	mov	r2, r4
   1830c:	bl	16c38 <__assert_fail@plt+0x5c74>
   18310:	ldr	r0, [pc, #996]	; 186fc <__assert_fail@plt+0x7738>
   18314:	mov	r3, r4
   18318:	mov	r2, #15
   1831c:	mov	r1, #1
   18320:	add	r0, pc, r0
   18324:	bl	10dcc <fwrite@plt>
   18328:	mov	r2, #9
   1832c:	str	r2, [sp, #8]
   18330:	ldr	r2, [pc, #968]	; 18700 <__assert_fail@plt+0x773c>
   18334:	mov	r3, #0
   18338:	str	r3, [sp, #4]
   1833c:	str	r3, [sp]
   18340:	add	r2, pc, r2
   18344:	mov	r1, #1
   18348:	mov	r0, r4
   1834c:	bl	10ee0 <__fprintf_chk@plt>
   18350:	ldr	r1, [pc, #940]	; 18704 <__assert_fail@plt+0x7740>
   18354:	mov	r0, r4
   18358:	add	r1, pc, r1
   1835c:	bl	17344 <__assert_fail@plt+0x6380>
   18360:	ldr	r1, [pc, #928]	; 18708 <__assert_fail@plt+0x7744>
   18364:	mov	r0, r4
   18368:	add	r1, pc, r1
   1836c:	bl	17344 <__assert_fail@plt+0x6380>
   18370:	ldr	r5, [sp, #44]	; 0x2c
   18374:	ldr	r7, [sp, #40]	; 0x28
   18378:	add	r7, r5, r7
   1837c:	cmp	r5, r7
   18380:	bcs	183bc <__assert_fail@plt+0x73f8>
   18384:	ldr	r8, [pc, #896]	; 1870c <__assert_fail@plt+0x7748>
   18388:	add	r8, pc, r8
   1838c:	mov	r0, r5
   18390:	bl	10e74 <strlen@plt>
   18394:	mov	r3, r5
   18398:	mov	r2, r8
   1839c:	mov	r1, #1
   183a0:	mov	r6, r0
   183a4:	add	r6, r6, #1
   183a8:	mov	r0, r4
   183ac:	add	r5, r5, r6
   183b0:	bl	10ee0 <__fprintf_chk@plt>
   183b4:	cmp	r5, r7
   183b8:	bcc	1838c <__assert_fail@plt+0x73c8>
   183bc:	ldr	r1, [pc, #844]	; 18710 <__assert_fail@plt+0x774c>
   183c0:	mov	r0, r4
   183c4:	add	r1, pc, r1
   183c8:	bl	17344 <__assert_fail@plt+0x6380>
   183cc:	ldr	r1, [pc, #832]	; 18714 <__assert_fail@plt+0x7750>
   183d0:	mov	r0, r4
   183d4:	add	r1, pc, r1
   183d8:	bl	17344 <__assert_fail@plt+0x6380>
   183dc:	ldr	r3, [pc, #820]	; 18718 <__assert_fail@plt+0x7754>
   183e0:	ldr	r2, [sp, #20]
   183e4:	ldr	r3, [r2, r3]
   183e8:	ldr	r3, [r3]
   183ec:	cmp	r3, #0
   183f0:	ble	18418 <__assert_fail@plt+0x7454>
   183f4:	ldr	r2, [pc, #800]	; 1871c <__assert_fail@plt+0x7758>
   183f8:	mov	r1, #1
   183fc:	add	r2, pc, r2
   18400:	str	r2, [sp, #4]
   18404:	str	r2, [sp]
   18408:	ldr	r2, [pc, #784]	; 18720 <__assert_fail@plt+0x775c>
   1840c:	mov	r0, r4
   18410:	add	r2, pc, r2
   18414:	bl	10ee0 <__fprintf_chk@plt>
   18418:	ldr	r3, [pc, #772]	; 18724 <__assert_fail@plt+0x7760>
   1841c:	ldr	r2, [sp, #20]
   18420:	ldr	r3, [r2, r3]
   18424:	ldr	r3, [r3]
   18428:	cmp	r3, #0
   1842c:	ble	18444 <__assert_fail@plt+0x7480>
   18430:	ldr	r2, [pc, #752]	; 18728 <__assert_fail@plt+0x7764>
   18434:	mov	r1, #1
   18438:	add	r2, pc, r2
   1843c:	mov	r0, r4
   18440:	bl	10ee0 <__fprintf_chk@plt>
   18444:	ldr	r3, [pc, #736]	; 1872c <__assert_fail@plt+0x7768>
   18448:	ldr	r2, [sp, #20]
   1844c:	ldr	r3, [r2, r3]
   18450:	ldr	r3, [r3]
   18454:	cmp	r3, #0
   18458:	ble	18470 <__assert_fail@plt+0x74ac>
   1845c:	ldr	r2, [pc, #716]	; 18730 <__assert_fail@plt+0x776c>
   18460:	mov	r1, #1
   18464:	add	r2, pc, r2
   18468:	mov	r0, r4
   1846c:	bl	10ee0 <__fprintf_chk@plt>
   18470:	ldr	r1, [pc, #700]	; 18734 <__assert_fail@plt+0x7770>
   18474:	mov	r0, r4
   18478:	add	r1, pc, r1
   1847c:	bl	17344 <__assert_fail@plt+0x6380>
   18480:	ldr	r3, [sp, #32]
   18484:	ldm	r3, {r0, r1, r2}
   18488:	bl	15764 <__assert_fail@plt+0x47a0>
   1848c:	ldr	r3, [sp, #36]	; 0x24
   18490:	ldr	r2, [sp, #52]	; 0x34
   18494:	ldr	r3, [r3]
   18498:	cmp	r2, r3
   1849c:	bne	1863c <__assert_fail@plt+0x7678>
   184a0:	add	sp, sp, #60	; 0x3c
   184a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184a8:	add	r3, r3, #64	; 0x40
   184ac:	str	r3, [sp, #24]
   184b0:	b	17d3c <__assert_fail@plt+0x6d78>
   184b4:	cmp	r2, r1
   184b8:	beq	184a8 <__assert_fail@plt+0x74e4>
   184bc:	add	r3, r3, #48	; 0x30
   184c0:	str	r3, [sp, #24]
   184c4:	b	17d3c <__assert_fail@plt+0x6d78>
   184c8:	ldr	r0, [pc, #616]	; 18738 <__assert_fail@plt+0x7774>
   184cc:	mov	r3, r4
   184d0:	mov	r2, #22
   184d4:	mov	r1, #1
   184d8:	ldr	r5, [pc, #604]	; 1873c <__assert_fail@plt+0x7778>
   184dc:	add	r0, pc, r0
   184e0:	bl	10dcc <fwrite@plt>
   184e4:	ldr	r2, [pc, #596]	; 18740 <__assert_fail@plt+0x777c>
   184e8:	add	r5, pc, r5
   184ec:	mov	r3, r5
   184f0:	str	r5, [sp]
   184f4:	add	r2, pc, r2
   184f8:	mov	r1, #1
   184fc:	mov	r0, r4
   18500:	bl	10ee0 <__fprintf_chk@plt>
   18504:	ldr	r2, [pc, #568]	; 18744 <__assert_fail@plt+0x7780>
   18508:	mov	r3, r5
   1850c:	str	r5, [sp]
   18510:	add	r2, pc, r2
   18514:	mov	r1, #1
   18518:	mov	r0, r4
   1851c:	bl	10ee0 <__fprintf_chk@plt>
   18520:	ldr	r2, [pc, #544]	; 18748 <__assert_fail@plt+0x7784>
   18524:	mov	r3, r5
   18528:	str	r5, [sp]
   1852c:	add	r2, pc, r2
   18530:	mov	r1, #1
   18534:	mov	r0, r4
   18538:	bl	10ee0 <__fprintf_chk@plt>
   1853c:	ldr	r2, [pc, #520]	; 1874c <__assert_fail@plt+0x7788>
   18540:	str	r5, [sp]
   18544:	mov	r3, r5
   18548:	add	r2, pc, r2
   1854c:	mov	r1, #1
   18550:	mov	r0, r4
   18554:	bl	10ee0 <__fprintf_chk@plt>
   18558:	b	18044 <__assert_fail@plt+0x7080>
   1855c:	ldr	r0, [pc, #492]	; 18750 <__assert_fail@plt+0x778c>
   18560:	mov	r3, r4
   18564:	mov	r2, #23
   18568:	mov	r1, #1
   1856c:	ldr	r5, [pc, #480]	; 18754 <__assert_fail@plt+0x7790>
   18570:	add	r0, pc, r0
   18574:	bl	10dcc <fwrite@plt>
   18578:	ldr	r2, [pc, #472]	; 18758 <__assert_fail@plt+0x7794>
   1857c:	add	r5, pc, r5
   18580:	mov	r3, r5
   18584:	add	r2, pc, r2
   18588:	mov	r1, #1
   1858c:	str	r5, [sp]
   18590:	mov	r0, r4
   18594:	bl	10ee0 <__fprintf_chk@plt>
   18598:	ldr	r2, [pc, #444]	; 1875c <__assert_fail@plt+0x7798>
   1859c:	mov	r3, r5
   185a0:	add	r2, pc, r2
   185a4:	mov	r1, #1
   185a8:	str	r5, [sp]
   185ac:	mov	r0, r4
   185b0:	bl	10ee0 <__fprintf_chk@plt>
   185b4:	ldr	r2, [pc, #420]	; 18760 <__assert_fail@plt+0x779c>
   185b8:	mov	r3, r5
   185bc:	add	r2, pc, r2
   185c0:	mov	r1, #1
   185c4:	str	r5, [sp]
   185c8:	mov	r0, r4
   185cc:	bl	10ee0 <__fprintf_chk@plt>
   185d0:	ldr	r2, [pc, #396]	; 18764 <__assert_fail@plt+0x77a0>
   185d4:	mov	r3, r5
   185d8:	str	r5, [sp]
   185dc:	add	r2, pc, r2
   185e0:	mov	r1, #1
   185e4:	mov	r0, r4
   185e8:	bl	10ee0 <__fprintf_chk@plt>
   185ec:	ldr	r3, [sp, #24]
   185f0:	ldr	r3, [r3, #12]
   185f4:	b	1803c <__assert_fail@plt+0x7078>
   185f8:	ldr	r0, [pc, #360]	; 18768 <__assert_fail@plt+0x77a4>
   185fc:	mov	r3, r4
   18600:	mov	r2, #23
   18604:	mov	r1, #1
   18608:	add	r0, pc, r0
   1860c:	bl	10dcc <fwrite@plt>
   18610:	ldr	r3, [sp, #28]
   18614:	mov	r0, r4
   18618:	ldr	r1, [r3, #8]
   1861c:	bl	166ec <__assert_fail@plt+0x5728>
   18620:	ldr	r3, [sp, #24]
   18624:	ldr	r3, [r3, #12]
   18628:	b	18034 <__assert_fail@plt+0x7070>
   1862c:	ldr	r0, [pc, #312]	; 1876c <__assert_fail@plt+0x77a8>
   18630:	mov	r1, r2
   18634:	add	r0, pc, r0
   18638:	bl	169a8 <__assert_fail@plt+0x59e4>
   1863c:	bl	10d9c <__stack_chk_fail@plt>
   18640:	strdeq	pc, [r1], -r0
   18644:	andeq	r0, r0, r4, lsl r1
   18648:	andeq	pc, r1, r4, lsl #26
   1864c:	andeq	pc, r1, r4, asr #25
   18650:	andeq	pc, r1, r0, lsr #25
   18654:	andeq	fp, r0, r0, lsl #25
   18658:	muleq	r0, ip, ip
   1865c:	muleq	r0, r8, ip
   18660:	andeq	fp, r0, r8, lsl #25
   18664:	andeq	fp, r0, r4, asr #17
   18668:	andeq	fp, r0, r4, asr ip
   1866c:	andeq	fp, r0, r4, lsr fp
   18670:	andeq	fp, r0, r0, asr ip
   18674:	andeq	fp, r0, r0, ror ip
   18678:	muleq	r0, r0, ip
   1867c:			; <UNDEFINED> instruction: 0x0000bcb0
   18680:	andeq	fp, r0, r4, asr #25
   18684:	andeq	fp, r0, r8, asr #25
   18688:	andeq	fp, r0, r8, ror #25
   1868c:	andeq	fp, r0, r8, lsl #26
   18690:	andeq	fp, r0, r8, lsr #26
   18694:	andeq	fp, r0, ip, lsr sp
   18698:	andeq	fp, r0, r0, asr #26
   1869c:	andeq	fp, r0, r0, ror #26
   186a0:	andeq	fp, r0, r0, lsl #27
   186a4:	andeq	fp, r0, r0, lsr #27
   186a8:			; <UNDEFINED> instruction: 0x0000bdb4
   186ac:			; <UNDEFINED> instruction: 0x0000bdb8
   186b0:	ldrdeq	fp, [r0], -r8
   186b4:	strdeq	fp, [r0], -r8
   186b8:	andeq	fp, r0, r8, lsl lr
   186bc:	andeq	fp, r0, ip, lsr #28
   186c0:	andeq	fp, r0, r4, lsl lr
   186c4:	andeq	fp, r0, r0, ror #12
   186c8:	andeq	ip, r0, r4
   186cc:	strdeq	fp, [r0], -r8
   186d0:	andeq	fp, r0, ip, lsl r6
   186d4:	andeq	fp, r0, r4, lsl #17
   186d8:	strdeq	fp, [r0], -r8
   186dc:			; <UNDEFINED> instruction: 0x0000bfb0
   186e0:			; <UNDEFINED> instruction: 0x0000bfb4
   186e4:			; <UNDEFINED> instruction: 0x0000bfbc
   186e8:	andeq	r0, r0, r8, lsl #2
   186ec:	andeq	fp, r0, ip, lsl #29
   186f0:	andeq	fp, r0, r4, asr lr
   186f4:	andeq	fp, r0, r0, ror #28
   186f8:	strdeq	pc, [r1], -r4
   186fc:	andeq	fp, r0, r4, lsr #28
   18700:	andeq	fp, r0, r0, lsr r3
   18704:	strdeq	fp, [r0], -ip
   18708:	strdeq	fp, [r0], -r8
   1870c:	andeq	fp, r0, r0, lsl #28
   18710:	andeq	fp, r0, ip, lsr #27
   18714:	andeq	fp, r0, r8, lsr #27
   18718:	andeq	r0, r0, r0, ror r1
   1871c:	andeq	fp, r0, ip, lsl #10
   18720:	andeq	fp, r0, r8, lsl #27
   18724:	andeq	r0, r0, r4, lsr #2
   18728:	muleq	r0, r4, sp
   1872c:	andeq	r0, r0, ip, lsl #2
   18730:	andeq	fp, r0, r8, asr #4
   18734:	andeq	fp, r0, r4, ror #26
   18738:	andeq	fp, r0, ip, lsl #21
   1873c:	andeq	fp, r0, r0, lsr #8
   18740:	andeq	fp, r0, ip, lsl #21
   18744:	andeq	fp, r0, ip, lsr #21
   18748:	andeq	fp, r0, ip, asr #21
   1874c:	andeq	fp, r0, ip, ror #21
   18750:	andeq	fp, r0, ip, ror #17
   18754:	andeq	fp, r0, ip, lsl #7
   18758:	strdeq	fp, [r0], -r0
   1875c:	andeq	fp, r0, r4, lsl r9
   18760:	andeq	fp, r0, r8, lsr r9
   18764:	andeq	fp, r0, r4, asr r9
   18768:	andeq	fp, r0, ip, lsr r8
   1876c:	strdeq	fp, [r0], -ip
   18770:	ldr	r3, [pc, #1460]	; 18d2c <__assert_fail@plt+0x7d68>
   18774:	ldr	r2, [pc, #1460]	; 18d30 <__assert_fail@plt+0x7d6c>
   18778:	add	r3, pc, r3
   1877c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18780:	sub	sp, sp, #92	; 0x5c
   18784:	ldr	r3, [r3, r2]
   18788:	mov	r1, #0
   1878c:	str	r3, [sp, #4]
   18790:	ldr	r3, [r3]
   18794:	str	r3, [sp, #84]	; 0x54
   18798:	bl	1afd0 <__assert_fail@plt+0xa00c>
   1879c:	mov	r2, #1
   187a0:	mov	r1, #4
   187a4:	mov	r3, r0
   187a8:	mov	r4, r0
   187ac:	add	r0, sp, #20
   187b0:	bl	10de4 <fread@plt>
   187b4:	mov	r5, r0
   187b8:	mov	r0, r4
   187bc:	bl	10d6c <ferror@plt>
   187c0:	cmp	r0, #0
   187c4:	bne	18c5c <__assert_fail@plt+0x7c98>
   187c8:	cmp	r5, #0
   187cc:	ble	18be0 <__assert_fail@plt+0x7c1c>
   187d0:	ldr	r3, [sp, #20]
   187d4:	ldr	r0, [pc, #1368]	; 18d34 <__assert_fail@plt+0x7d70>
   187d8:	lsr	r2, r3, #24
   187dc:	lsl	r1, r3, #8
   187e0:	orr	r2, r2, r3, lsl #24
   187e4:	and	r1, r1, #16711680	; 0xff0000
   187e8:	lsr	r3, r3, #8
   187ec:	orr	r2, r2, r1
   187f0:	and	r3, r3, #65280	; 0xff00
   187f4:	orr	r3, r2, r3
   187f8:	cmp	r3, r0
   187fc:	bne	18cb4 <__assert_fail@plt+0x7cf0>
   18800:	mov	r3, r4
   18804:	mov	r2, #1
   18808:	mov	r1, #4
   1880c:	add	r0, sp, #24
   18810:	bl	10de4 <fread@plt>
   18814:	mov	r5, r0
   18818:	mov	r0, r4
   1881c:	bl	10d6c <ferror@plt>
   18820:	cmp	r0, #0
   18824:	bne	18ccc <__assert_fail@plt+0x7d08>
   18828:	cmp	r5, #0
   1882c:	ble	18c08 <__assert_fail@plt+0x7c44>
   18830:	ldr	r3, [sp, #24]
   18834:	lsr	r5, r3, #24
   18838:	lsl	r2, r3, #8
   1883c:	orr	r5, r5, r3, lsl #24
   18840:	and	r2, r2, #16711680	; 0xff0000
   18844:	lsr	r3, r3, #8
   18848:	orr	r5, r5, r2
   1884c:	and	r3, r3, #65280	; 0xff00
   18850:	orr	r5, r5, r3
   18854:	cmp	r5, #27
   18858:	bls	18c78 <__assert_fail@plt+0x7cb4>
   1885c:	mov	r0, r5
   18860:	bl	10dfc <malloc@plt>
   18864:	subs	r8, r0, #0
   18868:	beq	18ce8 <__assert_fail@plt+0x7d24>
   1886c:	ldr	r3, [pc, #1220]	; 18d38 <__assert_fail@plt+0x7d74>
   18870:	sub	r9, r5, #8
   18874:	add	sl, r8, #8
   18878:	str	r3, [r8]
   1887c:	rev	r3, r5
   18880:	str	r3, [r8, #4]
   18884:	mov	r0, r4
   18888:	bl	10e68 <feof@plt>
   1888c:	cmp	r0, #0
   18890:	bne	18c30 <__assert_fail@plt+0x7c6c>
   18894:	mov	r3, r4
   18898:	mov	r2, r9
   1889c:	mov	r1, #1
   188a0:	mov	r0, sl
   188a4:	bl	10de4 <fread@plt>
   188a8:	mov	fp, r0
   188ac:	mov	r0, r4
   188b0:	bl	10d6c <ferror@plt>
   188b4:	cmp	r0, #0
   188b8:	bne	18c40 <__assert_fail@plt+0x7c7c>
   188bc:	subs	r9, r9, fp
   188c0:	add	sl, sl, fp
   188c4:	bne	18884 <__assert_fail@plt+0x78c0>
   188c8:	add	r2, r8, #8
   188cc:	ldr	r0, [r8, #20]
   188d0:	ldm	r2, {r2, r3, lr}
   188d4:	ldr	ip, [r8, #28]
   188d8:	lsr	sl, lr, #24
   188dc:	lsl	r1, lr, #8
   188e0:	orr	r9, sl, lr, lsl #24
   188e4:	and	r1, r1, #16711680	; 0xff0000
   188e8:	lsr	lr, lr, #8
   188ec:	orr	sl, r9, r1
   188f0:	and	r1, lr, #65280	; 0xff00
   188f4:	lsr	r9, r2, #24
   188f8:	lsl	lr, r2, #8
   188fc:	orr	r1, sl, r1
   18900:	lsr	sl, r3, #24
   18904:	orr	fp, sl, r3, lsl #24
   18908:	orr	r9, r9, r2, lsl #24
   1890c:	lsl	sl, r3, #8
   18910:	and	lr, lr, #16711680	; 0xff0000
   18914:	orr	lr, r9, lr
   18918:	and	r9, sl, #16711680	; 0xff0000
   1891c:	orr	sl, fp, r9
   18920:	lsr	r9, r0, #24
   18924:	orr	fp, r9, r0, lsl #24
   18928:	lsr	r2, r2, #8
   1892c:	lsl	r9, r0, #8
   18930:	and	r2, r2, #65280	; 0xff00
   18934:	and	r9, r9, #16711680	; 0xff0000
   18938:	orr	r9, fp, r9
   1893c:	orr	r2, lr, r2
   18940:	lsr	fp, ip, #24
   18944:	lsl	lr, ip, #8
   18948:	orr	fp, fp, ip, lsl #24
   1894c:	and	lr, lr, #16711680	; 0xff0000
   18950:	lsr	ip, ip, #8
   18954:	lsr	r3, r3, #8
   18958:	lsr	r0, r0, #8
   1895c:	orr	lr, fp, lr
   18960:	and	ip, ip, #65280	; 0xff00
   18964:	and	r3, r3, #65280	; 0xff00
   18968:	and	r0, r0, #65280	; 0xff00
   1896c:	orr	ip, lr, ip
   18970:	cmp	r5, r1
   18974:	orr	r3, sl, r3
   18978:	orr	r0, r9, r0
   1897c:	str	ip, [sp, #12]
   18980:	bls	18d08 <__assert_fail@plt+0x7d44>
   18984:	cmp	r5, r2
   18988:	bls	18d20 <__assert_fail@plt+0x7d5c>
   1898c:	cmp	r5, r3
   18990:	bcc	18d14 <__assert_fail@plt+0x7d50>
   18994:	cmp	r0, #2
   18998:	bls	18a4c <__assert_fail@plt+0x7a88>
   1899c:	ldr	lr, [r8, #32]
   189a0:	lsr	ip, lr, #24
   189a4:	lsl	r9, lr, #8
   189a8:	orr	ip, ip, lr, lsl #24
   189ac:	and	r9, r9, #16711680	; 0xff0000
   189b0:	lsr	lr, lr, #8
   189b4:	and	lr, lr, #65280	; 0xff00
   189b8:	orr	ip, ip, r9
   189bc:	orr	ip, ip, lr
   189c0:	adds	ip, r3, ip
   189c4:	movcs	lr, #1
   189c8:	movcc	lr, #0
   189cc:	cmp	ip, r5
   189d0:	orrhi	lr, lr, #1
   189d4:	cmp	lr, #0
   189d8:	bne	18ca8 <__assert_fail@plt+0x7ce4>
   189dc:	add	r3, r8, r3
   189e0:	add	ip, r8, ip
   189e4:	cmp	r0, #16
   189e8:	str	r3, [sp, #40]	; 0x28
   189ec:	str	r3, [sp, #48]	; 0x30
   189f0:	str	ip, [sp, #44]	; 0x2c
   189f4:	bls	18cf4 <__assert_fail@plt+0x7d30>
   189f8:	ldr	r0, [r8, #36]	; 0x24
   189fc:	lsr	r3, r0, #24
   18a00:	lsl	ip, r0, #8
   18a04:	orr	r3, r3, r0, lsl #24
   18a08:	and	ip, ip, #16711680	; 0xff0000
   18a0c:	lsr	r0, r0, #8
   18a10:	and	r0, r0, #65280	; 0xff00
   18a14:	orr	r3, r3, ip
   18a18:	orr	r3, r3, r0
   18a1c:	adds	r3, r2, r3
   18a20:	movcs	r0, #1
   18a24:	movcc	r0, #0
   18a28:	cmp	r3, r5
   18a2c:	movls	r3, r0
   18a30:	orrhi	r3, r0, #1
   18a34:	cmp	r3, #0
   18a38:	bne	18cc0 <__assert_fail@plt+0x7cfc>
   18a3c:	mov	r3, #64	; 0x40
   18a40:	add	r0, r8, r5
   18a44:	str	r3, [sp, #8]
   18a48:	b	18a68 <__assert_fail@plt+0x7aa4>
   18a4c:	add	r3, r8, r3
   18a50:	add	r0, r8, r5
   18a54:	str	r3, [sp, #40]	; 0x28
   18a58:	str	r3, [sp, #48]	; 0x30
   18a5c:	mov	r3, #7
   18a60:	str	r0, [sp, #44]	; 0x2c
   18a64:	str	r3, [sp, #8]
   18a68:	add	r1, r8, r1
   18a6c:	add	r2, r8, r2
   18a70:	add	sl, sp, #64	; 0x40
   18a74:	mov	r5, #0
   18a78:	add	r9, sp, #60	; 0x3c
   18a7c:	str	r1, [sp, #52]	; 0x34
   18a80:	str	r1, [sp, #60]	; 0x3c
   18a84:	str	r2, [sp, #28]
   18a88:	str	r2, [sp, #36]	; 0x24
   18a8c:	str	r0, [sp, #56]	; 0x38
   18a90:	str	r0, [sp, #32]
   18a94:	str	sl, [sp]
   18a98:	b	18abc <__assert_fail@plt+0x7af8>
   18a9c:	mov	r2, r6
   18aa0:	mov	r3, r7
   18aa4:	bl	19b8c <__assert_fail@plt+0x8bc8>
   18aa8:	mov	r1, r0
   18aac:	mov	r0, r5
   18ab0:	bl	19c24 <__assert_fail@plt+0x8c60>
   18ab4:	mov	r5, r0
   18ab8:	ldr	r0, [sp, #56]	; 0x38
   18abc:	mov	r3, #16
   18ac0:	ldr	r2, [sp]
   18ac4:	mov	r1, r9
   18ac8:	bl	16e8c <__assert_fail@plt+0x5ec8>
   18acc:	ldr	r2, [sp, #76]	; 0x4c
   18ad0:	ldr	fp, [sp, #72]	; 0x48
   18ad4:	ldr	ip, [sp, #64]	; 0x40
   18ad8:	lsr	r0, r2, #8
   18adc:	lsl	r3, r2, #24
   18ae0:	orr	r3, r3, r2, lsr #24
   18ae4:	lsr	r2, r2, #16
   18ae8:	uxtb	r0, r0
   18aec:	uxtb	r2, r2
   18af0:	orr	r0, r3, r0, lsl #16
   18af4:	lsl	r1, fp, #8
   18af8:	ldr	lr, [sp, #68]	; 0x44
   18afc:	orr	r6, r0, r2, lsl #8
   18b00:	and	r1, r1, #16711680	; 0xff0000
   18b04:	lsr	r2, fp, #8
   18b08:	and	r2, r2, #65280	; 0xff00
   18b0c:	orr	r1, r1, fp, lsl #24
   18b10:	orr	r1, r1, r2
   18b14:	lsl	r3, ip, #8
   18b18:	lsr	r2, lr, #8
   18b1c:	and	r0, r3, #16711680	; 0xff0000
   18b20:	orr	r7, r1, fp, lsr #24
   18b24:	lsr	r1, ip, #8
   18b28:	orr	r3, r0, ip, lsl #24
   18b2c:	and	r1, r1, #65280	; 0xff00
   18b30:	uxtb	sl, r2
   18b34:	orr	r3, r3, r1
   18b38:	lsr	r0, lr, #16
   18b3c:	lsl	r1, lr, #24
   18b40:	orr	r1, r1, lr, lsr #24
   18b44:	orrs	r2, r6, r7
   18b48:	orr	r2, r1, sl, lsl #16
   18b4c:	uxtb	sl, r0
   18b50:	orr	r1, r3, ip, lsr #24
   18b54:	orr	r0, r2, sl, lsl #8
   18b58:	bne	18a9c <__assert_fail@plt+0x7ad8>
   18b5c:	add	r6, sp, #28
   18b60:	mov	r0, r6
   18b64:	bl	16ed4 <__assert_fail@plt+0x5f10>
   18b68:	cmp	r0, #1
   18b6c:	mov	r7, r0
   18b70:	bne	18c88 <__assert_fail@plt+0x7cc4>
   18b74:	ldr	r2, [pc, #448]	; 18d3c <__assert_fail@plt+0x7d78>
   18b78:	ldr	r3, [sp, #8]
   18b7c:	add	r2, pc, r2
   18b80:	add	r1, sp, #40	; 0x28
   18b84:	mov	r0, r6
   18b88:	bl	16f98 <__assert_fail@plt+0x5fd4>
   18b8c:	mov	r9, r0
   18b90:	mov	r0, r6
   18b94:	bl	16ed4 <__assert_fail@plt+0x5f10>
   18b98:	cmp	r0, #9
   18b9c:	bne	18c98 <__assert_fail@plt+0x7cd4>
   18ba0:	mov	r0, r8
   18ba4:	bl	10d60 <free@plt>
   18ba8:	mov	r0, r4
   18bac:	bl	10ef8 <fclose@plt>
   18bb0:	ldr	r3, [sp, #12]
   18bb4:	mov	r2, r9
   18bb8:	mov	r1, r5
   18bbc:	mov	r0, r7
   18bc0:	bl	19c5c <__assert_fail@plt+0x8c98>
   18bc4:	ldr	r3, [sp, #4]
   18bc8:	ldr	r2, [sp, #84]	; 0x54
   18bcc:	ldr	r3, [r3]
   18bd0:	cmp	r2, r3
   18bd4:	bne	18ca4 <__assert_fail@plt+0x7ce0>
   18bd8:	add	sp, sp, #92	; 0x5c
   18bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18be0:	mov	r0, r4
   18be4:	bl	10e68 <feof@plt>
   18be8:	cmp	r0, #0
   18bec:	beq	18bfc <__assert_fail@plt+0x7c38>
   18bf0:	ldr	r0, [pc, #328]	; 18d40 <__assert_fail@plt+0x7d7c>
   18bf4:	add	r0, pc, r0
   18bf8:	bl	169a8 <__assert_fail@plt+0x59e4>
   18bfc:	ldr	r0, [pc, #320]	; 18d44 <__assert_fail@plt+0x7d80>
   18c00:	add	r0, pc, r0
   18c04:	bl	169a8 <__assert_fail@plt+0x59e4>
   18c08:	mov	r0, r4
   18c0c:	bl	10e68 <feof@plt>
   18c10:	cmp	r0, #0
   18c14:	beq	18c24 <__assert_fail@plt+0x7c60>
   18c18:	ldr	r0, [pc, #296]	; 18d48 <__assert_fail@plt+0x7d84>
   18c1c:	add	r0, pc, r0
   18c20:	bl	169a8 <__assert_fail@plt+0x59e4>
   18c24:	ldr	r0, [pc, #288]	; 18d4c <__assert_fail@plt+0x7d88>
   18c28:	add	r0, pc, r0
   18c2c:	bl	169a8 <__assert_fail@plt+0x59e4>
   18c30:	ldr	r0, [pc, #280]	; 18d50 <__assert_fail@plt+0x7d8c>
   18c34:	mov	r1, r5
   18c38:	add	r0, pc, r0
   18c3c:	bl	169a8 <__assert_fail@plt+0x59e4>
   18c40:	bl	10e8c <__errno_location@plt>
   18c44:	ldr	r0, [r0]
   18c48:	bl	10e14 <strerror@plt>
   18c4c:	mov	r1, r0
   18c50:	ldr	r0, [pc, #252]	; 18d54 <__assert_fail@plt+0x7d90>
   18c54:	add	r0, pc, r0
   18c58:	bl	169a8 <__assert_fail@plt+0x59e4>
   18c5c:	bl	10e8c <__errno_location@plt>
   18c60:	ldr	r0, [r0]
   18c64:	bl	10e14 <strerror@plt>
   18c68:	mov	r1, r0
   18c6c:	ldr	r0, [pc, #228]	; 18d58 <__assert_fail@plt+0x7d94>
   18c70:	add	r0, pc, r0
   18c74:	bl	169a8 <__assert_fail@plt+0x59e4>
   18c78:	ldr	r0, [pc, #220]	; 18d5c <__assert_fail@plt+0x7d98>
   18c7c:	mov	r1, r5
   18c80:	add	r0, pc, r0
   18c84:	bl	169a8 <__assert_fail@plt+0x59e4>
   18c88:	mov	r1, r0
   18c8c:	ldr	r0, [pc, #204]	; 18d60 <__assert_fail@plt+0x7d9c>
   18c90:	add	r0, pc, r0
   18c94:	bl	169a8 <__assert_fail@plt+0x59e4>
   18c98:	ldr	r0, [pc, #196]	; 18d64 <__assert_fail@plt+0x7da0>
   18c9c:	add	r0, pc, r0
   18ca0:	bl	169a8 <__assert_fail@plt+0x59e4>
   18ca4:	bl	10d9c <__stack_chk_fail@plt>
   18ca8:	ldr	r0, [pc, #184]	; 18d68 <__assert_fail@plt+0x7da4>
   18cac:	add	r0, pc, r0
   18cb0:	bl	169a8 <__assert_fail@plt+0x59e4>
   18cb4:	ldr	r0, [pc, #176]	; 18d6c <__assert_fail@plt+0x7da8>
   18cb8:	add	r0, pc, r0
   18cbc:	bl	169a8 <__assert_fail@plt+0x59e4>
   18cc0:	ldr	r0, [pc, #168]	; 18d70 <__assert_fail@plt+0x7dac>
   18cc4:	add	r0, pc, r0
   18cc8:	bl	169a8 <__assert_fail@plt+0x59e4>
   18ccc:	bl	10e8c <__errno_location@plt>
   18cd0:	ldr	r0, [r0]
   18cd4:	bl	10e14 <strerror@plt>
   18cd8:	mov	r1, r0
   18cdc:	ldr	r0, [pc, #144]	; 18d74 <__assert_fail@plt+0x7db0>
   18ce0:	add	r0, pc, r0
   18ce4:	bl	169a8 <__assert_fail@plt+0x59e4>
   18ce8:	ldr	r0, [pc, #136]	; 18d78 <__assert_fail@plt+0x7db4>
   18cec:	add	r0, pc, r0
   18cf0:	bl	169a8 <__assert_fail@plt+0x59e4>
   18cf4:	moveq	r3, #64	; 0x40
   18cf8:	movne	r3, #7
   18cfc:	add	r0, r8, r5
   18d00:	str	r3, [sp, #8]
   18d04:	b	18a68 <__assert_fail@plt+0x7aa4>
   18d08:	ldr	r0, [pc, #108]	; 18d7c <__assert_fail@plt+0x7db8>
   18d0c:	add	r0, pc, r0
   18d10:	bl	169a8 <__assert_fail@plt+0x59e4>
   18d14:	ldr	r0, [pc, #100]	; 18d80 <__assert_fail@plt+0x7dbc>
   18d18:	add	r0, pc, r0
   18d1c:	bl	169a8 <__assert_fail@plt+0x59e4>
   18d20:	ldr	r0, [pc, #92]	; 18d84 <__assert_fail@plt+0x7dc0>
   18d24:	add	r0, pc, r0
   18d28:	bl	169a8 <__assert_fail@plt+0x59e4>
   18d2c:	andeq	lr, r1, ip, lsl #14
   18d30:	andeq	r0, r0, r4, lsl r1
   18d34:	andle	pc, sp, sp, ror #29
   18d38:	ldcl	13, cr0, [lr, #832]!	; 0x340
   18d3c:	andeq	sl, r0, r8, lsr #24
   18d40:	andeq	fp, r0, r0, lsr #12
   18d44:	andeq	fp, r0, r8, lsr r6
   18d48:	andeq	fp, r0, ip, lsl #13
   18d4c:	muleq	r0, ip, r6
   18d50:	ldrdeq	fp, [r0], -r8
   18d54:	andeq	fp, r0, r4, ror #13
   18d58:	andeq	fp, r0, ip, ror r5
   18d5c:	andeq	fp, r0, r0, ror r6
   18d60:	muleq	r0, ip, r7
   18d64:	ldrdeq	fp, [r0], -ip
   18d68:	andeq	fp, r0, ip, lsr #14
   18d6c:	andeq	fp, r0, ip, lsr #11
   18d70:	andeq	fp, r0, ip, lsr r7
   18d74:	andeq	fp, r0, r8, lsr #11
   18d78:	andeq	sl, r0, r8, lsl #18
   18d7c:	andeq	fp, r0, r8, asr #12
   18d80:	muleq	r0, r8, r6
   18d84:	andeq	fp, r0, r4, ror #12
   18d88:	ldr	ip, [pc, #100]	; 18df4 <__assert_fail@plt+0x7e30>
   18d8c:	push	{r0, r1, r2, r3}
   18d90:	add	ip, pc, ip
   18d94:	ldr	r2, [pc, #92]	; 18df8 <__assert_fail@plt+0x7e34>
   18d98:	push	{lr}		; (str lr, [sp, #-4]!)
   18d9c:	sub	sp, sp, #12
   18da0:	ldr	r2, [ip, r2]
   18da4:	ldr	r3, [pc, #80]	; 18dfc <__assert_fail@plt+0x7e38>
   18da8:	add	r1, sp, #20
   18dac:	str	r1, [sp]
   18db0:	ldr	r1, [r2]
   18db4:	ldr	r0, [pc, #68]	; 18e00 <__assert_fail@plt+0x7e3c>
   18db8:	str	r1, [sp, #4]
   18dbc:	ldr	r4, [ip, r3]
   18dc0:	ldr	r5, [sp, #16]
   18dc4:	mov	r2, #13
   18dc8:	mov	r1, #1
   18dcc:	ldr	r3, [r4]
   18dd0:	add	r0, pc, r0
   18dd4:	bl	10dcc <fwrite@plt>
   18dd8:	ldr	r0, [r4]
   18ddc:	mov	r2, r5
   18de0:	ldr	r3, [sp]
   18de4:	mov	r1, #1
   18de8:	bl	10e20 <__vfprintf_chk@plt>
   18dec:	mov	r0, #1
   18df0:	bl	10e5c <exit@plt>
   18df4:	strdeq	lr, [r1], -r4
   18df8:	andeq	r0, r0, r4, lsl r1
   18dfc:	andeq	r0, r0, ip, lsr r1
   18e00:	andeq	r8, r0, r8, ror r8
   18e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e08:	sub	sp, sp, #140	; 0x8c
   18e0c:	ldr	fp, [pc, #540]	; 19030 <__assert_fail@plt+0x806c>
   18e10:	ldr	r3, [pc, #540]	; 19034 <__assert_fail@plt+0x8070>
   18e14:	add	fp, pc, fp
   18e18:	mov	r9, r0
   18e1c:	ldr	r3, [fp, r3]
   18e20:	str	r3, [sp, #8]
   18e24:	ldr	r3, [r3]
   18e28:	str	r3, [sp, #132]	; 0x84
   18e2c:	bl	10df0 <opendir@plt>
   18e30:	subs	r5, r0, #0
   18e34:	beq	19010 <__assert_fail@plt+0x804c>
   18e38:	mov	r1, #0
   18e3c:	mov	r0, r1
   18e40:	bl	19530 <__assert_fail@plt+0x856c>
   18e44:	ldr	r7, [pc, #492]	; 19038 <__assert_fail@plt+0x8074>
   18e48:	ldr	r8, [pc, #492]	; 1903c <__assert_fail@plt+0x8078>
   18e4c:	ldr	r3, [pc, #492]	; 19040 <__assert_fail@plt+0x807c>
   18e50:	add	r7, pc, r7
   18e54:	add	r8, pc, r8
   18e58:	add	r3, pc, r3
   18e5c:	str	r3, [sp, #12]
   18e60:	mov	sl, r0
   18e64:	mov	r0, r5
   18e68:	bl	10f10 <readdir@plt>
   18e6c:	cmp	r0, #0
   18e70:	beq	18ef8 <__assert_fail@plt+0x7f34>
   18e74:	add	r4, r0, #11
   18e78:	mov	r0, r4
   18e7c:	mov	r1, r7
   18e80:	bl	10d24 <strcmp@plt>
   18e84:	cmp	r0, #0
   18e88:	beq	18e64 <__assert_fail@plt+0x7ea0>
   18e8c:	mov	r1, r8
   18e90:	mov	r0, r4
   18e94:	bl	10d24 <strcmp@plt>
   18e98:	cmp	r0, #0
   18e9c:	beq	18e64 <__assert_fail@plt+0x7ea0>
   18ea0:	mov	r1, r4
   18ea4:	mov	r0, r9
   18ea8:	bl	1c660 <__assert_fail@plt+0xb69c>
   18eac:	add	r2, sp, #40	; 0x28
   18eb0:	mov	r1, r0
   18eb4:	mov	r6, r0
   18eb8:	mov	r0, #3
   18ebc:	bl	10f4c <__lxstat@plt>
   18ec0:	cmp	r0, #0
   18ec4:	blt	18fec <__assert_fail@plt+0x8028>
   18ec8:	ldr	r3, [sp, #56]	; 0x38
   18ecc:	and	r3, r3, #61440	; 0xf000
   18ed0:	cmp	r3, #32768	; 0x8000
   18ed4:	beq	18f20 <__assert_fail@plt+0x7f5c>
   18ed8:	cmp	r3, #16384	; 0x4000
   18edc:	beq	18f80 <__assert_fail@plt+0x7fbc>
   18ee0:	mov	r0, r6
   18ee4:	bl	10d60 <free@plt>
   18ee8:	mov	r0, r5
   18eec:	bl	10f10 <readdir@plt>
   18ef0:	cmp	r0, #0
   18ef4:	bne	18e74 <__assert_fail@plt+0x7eb0>
   18ef8:	mov	r0, r5
   18efc:	bl	10fa0 <closedir@plt>
   18f00:	ldr	r3, [sp, #8]
   18f04:	ldr	r2, [sp, #132]	; 0x84
   18f08:	mov	r0, sl
   18f0c:	ldr	r3, [r3]
   18f10:	cmp	r2, r3
   18f14:	bne	1900c <__assert_fail@plt+0x8048>
   18f18:	add	sp, sp, #140	; 0x8c
   18f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f20:	ldr	r1, [sp, #12]
   18f24:	mov	r0, r6
   18f28:	bl	10d3c <fopen@plt>
   18f2c:	subs	r3, r0, #0
   18f30:	str	r3, [sp, #16]
   18f34:	beq	18fb4 <__assert_fail@plt+0x7ff0>
   18f38:	mov	r0, r4
   18f3c:	bl	1c550 <__assert_fail@plt+0xb58c>
   18f40:	add	r4, sp, #28
   18f44:	ldr	r2, [sp, #84]	; 0x54
   18f48:	ldr	r1, [sp, #16]
   18f4c:	str	r0, [sp, #20]
   18f50:	mov	r0, r4
   18f54:	bl	16170 <__assert_fail@plt+0x51ac>
   18f58:	ldr	r3, [sp, #20]
   18f5c:	mov	r0, r3
   18f60:	ldm	r4, {r1, r2, r3}
   18f64:	bl	19434 <__assert_fail@plt+0x8470>
   18f68:	mov	r1, r0
   18f6c:	mov	r0, sl
   18f70:	bl	19674 <__assert_fail@plt+0x86b0>
   18f74:	ldr	r0, [sp, #16]
   18f78:	bl	10ef8 <fclose@plt>
   18f7c:	b	18ee0 <__assert_fail@plt+0x7f1c>
   18f80:	mov	r0, r6
   18f84:	bl	18e04 <__assert_fail@plt+0x7e40>
   18f88:	str	r0, [sp, #16]
   18f8c:	mov	r0, r4
   18f90:	bl	1c550 <__assert_fail@plt+0xb58c>
   18f94:	ldr	r3, [sp, #16]
   18f98:	mov	r1, r0
   18f9c:	mov	r0, r3
   18fa0:	bl	195cc <__assert_fail@plt+0x8608>
   18fa4:	mov	r1, r0
   18fa8:	mov	r0, sl
   18fac:	bl	19704 <__assert_fail@plt+0x8740>
   18fb0:	b	18ee0 <__assert_fail@plt+0x7f1c>
   18fb4:	ldr	r3, [pc, #136]	; 19044 <__assert_fail@plt+0x8080>
   18fb8:	ldr	r3, [fp, r3]
   18fbc:	ldr	r4, [r3]
   18fc0:	bl	10e8c <__errno_location@plt>
   18fc4:	ldr	r0, [r0]
   18fc8:	bl	10e14 <strerror@plt>
   18fcc:	ldr	r2, [pc, #116]	; 19048 <__assert_fail@plt+0x8084>
   18fd0:	mov	r3, r6
   18fd4:	add	r2, pc, r2
   18fd8:	mov	r1, #1
   18fdc:	str	r0, [sp]
   18fe0:	mov	r0, r4
   18fe4:	bl	10ee0 <__fprintf_chk@plt>
   18fe8:	b	18ee0 <__assert_fail@plt+0x7f1c>
   18fec:	bl	10e8c <__errno_location@plt>
   18ff0:	ldr	r0, [r0]
   18ff4:	bl	10e14 <strerror@plt>
   18ff8:	mov	r1, r6
   18ffc:	mov	r2, r0
   19000:	ldr	r0, [pc, #68]	; 1904c <__assert_fail@plt+0x8088>
   19004:	add	r0, pc, r0
   19008:	bl	18d88 <__assert_fail@plt+0x7dc4>
   1900c:	bl	10d9c <__stack_chk_fail@plt>
   19010:	bl	10e8c <__errno_location@plt>
   19014:	ldr	r0, [r0]
   19018:	bl	10e14 <strerror@plt>
   1901c:	mov	r1, r9
   19020:	mov	r2, r0
   19024:	ldr	r0, [pc, #36]	; 19050 <__assert_fail@plt+0x808c>
   19028:	add	r0, pc, r0
   1902c:	bl	18d88 <__assert_fail@plt+0x7dc4>
   19030:	andeq	lr, r1, r0, ror r0
   19034:	andeq	r0, r0, r4, lsl r1
   19038:	andeq	fp, r0, r4, ror r6
   1903c:	andeq	fp, r0, r4, ror r6
   19040:	andeq	fp, r0, r4, lsl #13
   19044:	andeq	r0, r0, ip, lsr r1
   19048:	andeq	fp, r0, ip, lsl #10
   1904c:	andeq	fp, r0, r8, asr #9
   19050:	andeq	fp, r0, ip, ror r4
   19054:	push	{r4, lr}
   19058:	bl	18e04 <__assert_fail@plt+0x7e40>
   1905c:	ldr	r1, [pc, #36]	; 19088 <__assert_fail@plt+0x80c4>
   19060:	add	r1, pc, r1
   19064:	bl	195cc <__assert_fail@plt+0x8608>
   19068:	mov	r4, r0
   1906c:	bl	1acd0 <__assert_fail@plt+0x9d0c>
   19070:	mov	r2, r4
   19074:	mov	r1, #0
   19078:	pop	{r4, lr}
   1907c:	mov	r3, r0
   19080:	mov	r0, #1
   19084:	b	19c5c <__assert_fail@plt+0x8c98>
   19088:	andeq	sl, r0, r4, asr #14
   1908c:	ldr	r2, [r0]
   19090:	ldr	r3, [r1]
   19094:	push	{r4, r5}
   19098:	ldrd	r0, [r3]
   1909c:	ldrd	r4, [r2]
   190a0:	cmp	r5, r1
   190a4:	cmpeq	r4, r0
   190a8:	bcc	190d8 <__assert_fail@plt+0x8114>
   190ac:	movhi	r0, #1
   190b0:	bhi	190d0 <__assert_fail@plt+0x810c>
   190b4:	ldrd	r0, [r2, #8]
   190b8:	ldrd	r2, [r3, #8]
   190bc:	cmp	r1, r3
   190c0:	cmpeq	r0, r2
   190c4:	bcc	190d8 <__assert_fail@plt+0x8114>
   190c8:	movhi	r0, #1
   190cc:	movls	r0, #0
   190d0:	pop	{r4, r5}
   190d4:	bx	lr
   190d8:	mvn	r0, #0
   190dc:	pop	{r4, r5}
   190e0:	bx	lr
   190e4:	ldr	r2, [r1]
   190e8:	ldr	r3, [r0]
   190ec:	ldr	r1, [r2, #4]
   190f0:	ldr	r0, [r3, #4]
   190f4:	b	10d24 <strcmp@plt>
   190f8:	ldr	r2, [r1]
   190fc:	ldr	r3, [r0]
   19100:	ldr	r1, [r2, #4]
   19104:	ldr	r0, [r3, #4]
   19108:	b	10d24 <strcmp@plt>
   1910c:	ldr	ip, [pc, #100]	; 19178 <__assert_fail@plt+0x81b4>
   19110:	push	{r0, r1, r2, r3}
   19114:	add	ip, pc, ip
   19118:	ldr	r2, [pc, #92]	; 1917c <__assert_fail@plt+0x81b8>
   1911c:	push	{lr}		; (str lr, [sp, #-4]!)
   19120:	sub	sp, sp, #12
   19124:	ldr	r2, [ip, r2]
   19128:	ldr	r3, [pc, #80]	; 19180 <__assert_fail@plt+0x81bc>
   1912c:	add	r1, sp, #20
   19130:	str	r1, [sp]
   19134:	ldr	r1, [r2]
   19138:	ldr	r0, [pc, #68]	; 19184 <__assert_fail@plt+0x81c0>
   1913c:	str	r1, [sp, #4]
   19140:	ldr	r4, [ip, r3]
   19144:	ldr	r5, [sp, #16]
   19148:	mov	r2, #13
   1914c:	mov	r1, #1
   19150:	ldr	r3, [r4]
   19154:	add	r0, pc, r0
   19158:	bl	10dcc <fwrite@plt>
   1915c:	ldr	r0, [r4]
   19160:	mov	r2, r5
   19164:	ldr	r3, [sp]
   19168:	mov	r1, #1
   1916c:	bl	10e20 <__vfprintf_chk@plt>
   19170:	mov	r0, #1
   19174:	bl	10e5c <exit@plt>
   19178:	andeq	sp, r1, r0, ror sp
   1917c:	andeq	r0, r0, r4, lsl r1
   19180:	andeq	r0, r0, ip, lsr r1
   19184:	strdeq	r8, [r0], -r4
   19188:	push	{r4, r5, r6, lr}
   1918c:	subs	r4, r1, #0
   19190:	beq	191e8 <__assert_fail@plt+0x8224>
   19194:	mov	r5, r0
   19198:	b	191a8 <__assert_fail@plt+0x81e4>
   1919c:	ldr	r4, [r4, #20]
   191a0:	cmp	r4, #0
   191a4:	beq	191e8 <__assert_fail@plt+0x8224>
   191a8:	ldrb	r3, [r4]
   191ac:	cmp	r3, #0
   191b0:	bne	1919c <__assert_fail@plt+0x81d8>
   191b4:	ldr	r3, [r4, #44]	; 0x2c
   191b8:	mov	r0, r5
   191bc:	cmp	r3, #0
   191c0:	beq	191cc <__assert_fail@plt+0x8208>
   191c4:	mov	r0, #1
   191c8:	pop	{r4, r5, r6, pc}
   191cc:	ldr	r1, [r4, #12]
   191d0:	bl	19188 <__assert_fail@plt+0x81c4>
   191d4:	cmp	r0, #0
   191d8:	popne	{r4, r5, r6, pc}
   191dc:	ldr	r4, [r4, #20]
   191e0:	cmp	r4, #0
   191e4:	bne	191a8 <__assert_fail@plt+0x81e4>
   191e8:	mov	r0, r4
   191ec:	pop	{r4, r5, r6, pc}
   191f0:	push	{r4, r5, r6, r7, r8, lr}
   191f4:	mov	r6, r0
   191f8:	ldr	r4, [r0, #8]
   191fc:	cmp	r4, #0
   19200:	beq	192a4 <__assert_fail@plt+0x82e0>
   19204:	mov	r3, r4
   19208:	mov	r5, #0
   1920c:	b	19214 <__assert_fail@plt+0x8250>
   19210:	mov	r5, r7
   19214:	ldr	r3, [r3, #20]
   19218:	add	r7, r5, #1
   1921c:	cmp	r3, #0
   19220:	bne	19210 <__assert_fail@plt+0x824c>
   19224:	lsl	r0, r7, #2
   19228:	bl	10dfc <malloc@plt>
   1922c:	subs	r8, r0, #0
   19230:	subne	r3, r8, #4
   19234:	beq	19374 <__assert_fail@plt+0x83b0>
   19238:	str	r4, [r3, #4]!
   1923c:	ldr	r4, [r4, #20]
   19240:	cmp	r4, #0
   19244:	bne	19238 <__assert_fail@plt+0x8274>
   19248:	ldr	r3, [pc, #304]	; 19380 <__assert_fail@plt+0x83bc>
   1924c:	mov	r2, #4
   19250:	mov	r1, r7
   19254:	add	r3, pc, r3
   19258:	mov	r0, r8
   1925c:	bl	10f40 <qsort@plt>
   19260:	ldr	r2, [r8]
   19264:	cmp	r5, #0
   19268:	str	r2, [r6, #8]
   1926c:	beq	19290 <__assert_fail@plt+0x82cc>
   19270:	mov	r3, r8
   19274:	add	r0, r8, r5, lsl #2
   19278:	b	19280 <__assert_fail@plt+0x82bc>
   1927c:	ldr	r2, [r3]
   19280:	ldr	r1, [r3, #4]!
   19284:	cmp	r0, r3
   19288:	str	r1, [r2, #20]
   1928c:	bne	1927c <__assert_fail@plt+0x82b8>
   19290:	ldr	r3, [r8, r5, lsl #2]
   19294:	mov	r2, #0
   19298:	mov	r0, r8
   1929c:	str	r2, [r3, #20]
   192a0:	bl	10d60 <free@plt>
   192a4:	ldr	r4, [r6, #12]
   192a8:	cmp	r4, #0
   192ac:	popeq	{r4, r5, r6, r7, r8, pc}
   192b0:	mov	r3, r4
   192b4:	mov	r5, #0
   192b8:	b	192c0 <__assert_fail@plt+0x82fc>
   192bc:	mov	r5, r7
   192c0:	ldr	r3, [r3, #20]
   192c4:	add	r7, r5, #1
   192c8:	cmp	r3, #0
   192cc:	bne	192bc <__assert_fail@plt+0x82f8>
   192d0:	lsl	r0, r7, #2
   192d4:	bl	10dfc <malloc@plt>
   192d8:	subs	r8, r0, #0
   192dc:	beq	19374 <__assert_fail@plt+0x83b0>
   192e0:	sub	r3, r8, #4
   192e4:	str	r4, [r3, #4]!
   192e8:	ldr	r4, [r4, #20]
   192ec:	cmp	r4, #0
   192f0:	bne	192e4 <__assert_fail@plt+0x8320>
   192f4:	ldr	r3, [pc, #136]	; 19384 <__assert_fail@plt+0x83c0>
   192f8:	mov	r1, r7
   192fc:	add	r3, pc, r3
   19300:	mov	r2, #4
   19304:	mov	r0, r8
   19308:	bl	10f40 <qsort@plt>
   1930c:	ldr	r4, [r8]
   19310:	cmp	r5, #0
   19314:	str	r4, [r6, #12]
   19318:	beq	19340 <__assert_fail@plt+0x837c>
   1931c:	mov	r3, r8
   19320:	add	r0, r8, r5, lsl #2
   19324:	mov	r1, r4
   19328:	b	19330 <__assert_fail@plt+0x836c>
   1932c:	ldr	r1, [r3]
   19330:	ldr	r2, [r3, #4]!
   19334:	cmp	r0, r3
   19338:	str	r2, [r1, #20]
   1933c:	bne	1932c <__assert_fail@plt+0x8368>
   19340:	ldr	r3, [r8, r5, lsl #2]
   19344:	mov	r2, #0
   19348:	mov	r0, r8
   1934c:	str	r2, [r3, #20]
   19350:	bl	10d60 <free@plt>
   19354:	cmp	r4, #0
   19358:	popeq	{r4, r5, r6, r7, r8, pc}
   1935c:	mov	r0, r4
   19360:	bl	191f0 <__assert_fail@plt+0x822c>
   19364:	ldr	r4, [r4, #20]
   19368:	cmp	r4, #0
   1936c:	bne	1935c <__assert_fail@plt+0x8398>
   19370:	pop	{r4, r5, r6, r7, r8, pc}
   19374:	ldr	r0, [pc, #12]	; 19388 <__assert_fail@plt+0x83c4>
   19378:	add	r0, pc, r0
   1937c:	bl	1910c <__assert_fail@plt+0x8148>
   19380:			; <UNDEFINED> instruction: 0xfffffe88
   19384:			; <UNDEFINED> instruction: 0xfffffdf4
   19388:	andeq	sl, r0, ip, ror r2
   1938c:	push	{r4, r5, r6, r7, r8, lr}
   19390:	mov	r7, r0
   19394:	ldr	r6, [r0]
   19398:	mov	r5, r1
   1939c:	cmp	r6, #0
   193a0:	beq	193d4 <__assert_fail@plt+0x8410>
   193a4:	mov	r4, r6
   193a8:	b	193b8 <__assert_fail@plt+0x83f4>
   193ac:	ldr	r4, [r4, #8]
   193b0:	cmp	r4, #0
   193b4:	beq	193d4 <__assert_fail@plt+0x8410>
   193b8:	mov	r1, r5
   193bc:	ldr	r0, [r4, #4]
   193c0:	bl	10d24 <strcmp@plt>
   193c4:	cmp	r0, #0
   193c8:	bne	193ac <__assert_fail@plt+0x83e8>
   193cc:	strb	r0, [r4]
   193d0:	pop	{r4, r5, r6, r7, r8, pc}
   193d4:	mov	r0, #12
   193d8:	bl	10dfc <malloc@plt>
   193dc:	cmp	r0, #0
   193e0:	beq	193f8 <__assert_fail@plt+0x8434>
   193e4:	mov	r3, #0
   193e8:	stmib	r0, {r5, r6}
   193ec:	str	r0, [r7]
   193f0:	str	r3, [r0]
   193f4:	pop	{r4, r5, r6, r7, r8, pc}
   193f8:	ldr	r0, [pc, #4]	; 19404 <__assert_fail@plt+0x8440>
   193fc:	add	r0, pc, r0
   19400:	bl	1910c <__assert_fail@plt+0x8148>
   19404:	strdeq	sl, [r0], -r8
   19408:	ldr	r3, [r0]
   1940c:	cmp	r3, #0
   19410:	bxeq	lr
   19414:	mov	r1, #1
   19418:	ldrb	r2, [r3]
   1941c:	cmp	r2, #0
   19420:	strbeq	r1, [r3]
   19424:	ldr	r3, [r3, #8]
   19428:	cmp	r3, #0
   1942c:	bne	19418 <__assert_fail@plt+0x8454>
   19430:	bx	lr
   19434:	push	{r4, r5, lr}
   19438:	sub	sp, sp, #20
   1943c:	add	r4, sp, #4
   19440:	mov	r5, r0
   19444:	stm	r4, {r1, r2, r3}
   19448:	mov	r0, #28
   1944c:	mov	r1, #1
   19450:	bl	10d00 <calloc@plt>
   19454:	subs	r3, r0, #0
   19458:	beq	19478 <__assert_fail@plt+0x84b4>
   1945c:	ldm	r4, {r0, r1, r2}
   19460:	add	ip, r3, #8
   19464:	str	r5, [r3, #4]
   19468:	stm	ip, {r0, r1, r2}
   1946c:	mov	r0, r3
   19470:	add	sp, sp, #20
   19474:	pop	{r4, r5, pc}
   19478:	ldr	r0, [pc, #4]	; 19484 <__assert_fail@plt+0x84c0>
   1947c:	add	r0, pc, r0
   19480:	bl	1910c <__assert_fail@plt+0x8148>
   19484:	andeq	sl, r0, r8, ror r1
   19488:	push	{r4, lr}
   1948c:	mov	r1, #1
   19490:	mov	r4, r0
   19494:	mov	r0, #28
   19498:	bl	10d00 <calloc@plt>
   1949c:	subs	r3, r0, #0
   194a0:	beq	194b4 <__assert_fail@plt+0x84f0>
   194a4:	mov	r2, #1
   194a8:	str	r4, [r3, #4]
   194ac:	strb	r2, [r3]
   194b0:	pop	{r4, pc}
   194b4:	ldr	r0, [pc, #4]	; 194c0 <__assert_fail@plt+0x84fc>
   194b8:	add	r0, pc, r0
   194bc:	bl	1910c <__assert_fail@plt+0x8148>
   194c0:	andeq	sl, r0, ip, lsr r1
   194c4:	ldr	r2, [r0, #20]
   194c8:	cmp	r2, #0
   194cc:	bne	194d8 <__assert_fail@plt+0x8514>
   194d0:	str	r1, [r0, #20]
   194d4:	bx	lr
   194d8:	ldr	r3, [pc, #28]	; 194fc <__assert_fail@plt+0x8538>
   194dc:	ldr	r1, [pc, #28]	; 19500 <__assert_fail@plt+0x853c>
   194e0:	ldr	r0, [pc, #28]	; 19504 <__assert_fail@plt+0x8540>
   194e4:	push	{r4, lr}
   194e8:	add	r3, pc, r3
   194ec:	mov	r2, #79	; 0x4f
   194f0:	add	r1, pc, r1
   194f4:	add	r0, pc, r0
   194f8:	bl	10fc4 <__assert_fail@plt>
   194fc:	andeq	fp, r0, r8, lsl r0
   19500:	andeq	fp, r0, r4, lsr #1
   19504:	andeq	fp, r0, ip, lsr #1
   19508:	cmp	r0, #0
   1950c:	bxeq	lr
   19510:	mov	r2, #0
   19514:	ldr	r3, [r0, #20]
   19518:	str	r2, [r0, #20]
   1951c:	cmp	r3, #0
   19520:	mov	r2, r0
   19524:	bxeq	lr
   19528:	mov	r0, r3
   1952c:	b	19514 <__assert_fail@plt+0x8550>
   19530:	push	{r4, r5, r6, lr}
   19534:	mov	r6, r0
   19538:	mov	r4, r1
   1953c:	mov	r0, #56	; 0x38
   19540:	mov	r1, #1
   19544:	bl	10d00 <calloc@plt>
   19548:	subs	r5, r0, #0
   1954c:	beq	19588 <__assert_fail@plt+0x85c4>
   19550:	mov	r0, r6
   19554:	bl	19508 <__assert_fail@plt+0x8544>
   19558:	cmp	r4, #0
   1955c:	str	r4, [r5, #12]
   19560:	str	r0, [r5, #8]
   19564:	beq	19580 <__assert_fail@plt+0x85bc>
   19568:	ldrb	r3, [r4]
   1956c:	cmp	r3, #0
   19570:	streq	r5, [r4, #16]
   19574:	ldr	r4, [r4, #20]
   19578:	cmp	r4, #0
   1957c:	bne	19568 <__assert_fail@plt+0x85a4>
   19580:	mov	r0, r5
   19584:	pop	{r4, r5, r6, pc}
   19588:	ldr	r0, [pc, #4]	; 19594 <__assert_fail@plt+0x85d0>
   1958c:	add	r0, pc, r0
   19590:	bl	1910c <__assert_fail@plt+0x8148>
   19594:	andeq	sl, r0, r8, rrx
   19598:	push	{r4, lr}
   1959c:	mov	r1, #1
   195a0:	mov	r0, #56	; 0x38
   195a4:	bl	10d00 <calloc@plt>
   195a8:	subs	r3, r0, #0
   195ac:	beq	195bc <__assert_fail@plt+0x85f8>
   195b0:	mov	r2, #1
   195b4:	strb	r2, [r3]
   195b8:	pop	{r4, pc}
   195bc:	ldr	r0, [pc, #4]	; 195c8 <__assert_fail@plt+0x8604>
   195c0:	add	r0, pc, r0
   195c4:	bl	1910c <__assert_fail@plt+0x8148>
   195c8:	andeq	sl, r0, r4, lsr r0
   195cc:	ldr	r2, [r0, #4]
   195d0:	cmp	r2, #0
   195d4:	bne	195e0 <__assert_fail@plt+0x861c>
   195d8:	str	r1, [r0, #4]
   195dc:	bx	lr
   195e0:	ldr	r3, [pc, #32]	; 19608 <__assert_fail@plt+0x8644>
   195e4:	ldr	r1, [pc, #32]	; 1960c <__assert_fail@plt+0x8648>
   195e8:	ldr	r0, [pc, #32]	; 19610 <__assert_fail@plt+0x864c>
   195ec:	add	r3, pc, r3
   195f0:	push	{r4, lr}
   195f4:	mov	r2, #130	; 0x82
   195f8:	add	r3, r3, #16
   195fc:	add	r1, pc, r1
   19600:	add	r0, pc, r0
   19604:	bl	10fc4 <__assert_fail@plt>
   19608:	andeq	sl, r0, r4, lsl pc
   1960c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   19610:			; <UNDEFINED> instruction: 0x0000afb4
   19614:	mov	r3, #1
   19618:	strb	r3, [r0, #52]	; 0x34
   1961c:	bx	lr
   19620:	mov	r3, #1
   19624:	strb	r3, [r0, #53]	; 0x35
   19628:	bx	lr
   1962c:	ldr	r2, [r0, #20]
   19630:	cmp	r2, #0
   19634:	bne	19640 <__assert_fail@plt+0x867c>
   19638:	str	r1, [r0, #20]
   1963c:	bx	lr
   19640:	ldr	r3, [pc, #32]	; 19668 <__assert_fail@plt+0x86a4>
   19644:	ldr	r1, [pc, #32]	; 1966c <__assert_fail@plt+0x86a8>
   19648:	ldr	r0, [pc, #32]	; 19670 <__assert_fail@plt+0x86ac>
   1964c:	add	r3, pc, r3
   19650:	push	{r4, lr}
   19654:	mov	r2, #264	; 0x108
   19658:	add	r3, r3, #28
   1965c:	add	r1, pc, r1
   19660:	add	r0, pc, r0
   19664:	bl	10fc4 <__assert_fail@plt>
   19668:			; <UNDEFINED> instruction: 0x0000aeb4
   1966c:	andeq	sl, r0, r8, lsr pc
   19670:	andeq	sl, r0, r8, ror #30
   19674:	mov	r3, #0
   19678:	str	r3, [r1, #20]
   1967c:	ldr	r2, [r0, #8]
   19680:	cmp	r2, r3
   19684:	bne	19690 <__assert_fail@plt+0x86cc>
   19688:	b	196a8 <__assert_fail@plt+0x86e4>
   1968c:	mov	r2, r3
   19690:	ldr	r3, [r2, #20]
   19694:	cmp	r3, #0
   19698:	bne	1968c <__assert_fail@plt+0x86c8>
   1969c:	add	r2, r2, #20
   196a0:	str	r1, [r2]
   196a4:	bx	lr
   196a8:	add	r2, r0, #8
   196ac:	str	r1, [r2]
   196b0:	bx	lr
   196b4:	mov	r3, #1
   196b8:	strb	r3, [r0], #24
   196bc:	b	19408 <__assert_fail@plt+0x8444>
   196c0:	push	{r4, r5, r6, lr}
   196c4:	ldr	r4, [r0, #8]
   196c8:	cmp	r4, #0
   196cc:	popeq	{r4, r5, r6, pc}
   196d0:	mov	r5, r1
   196d4:	b	196e4 <__assert_fail@plt+0x8720>
   196d8:	ldr	r4, [r4, #20]
   196dc:	cmp	r4, #0
   196e0:	popeq	{r4, r5, r6, pc}
   196e4:	mov	r1, r5
   196e8:	ldr	r0, [r4, #4]
   196ec:	bl	10d24 <strcmp@plt>
   196f0:	cmp	r0, #0
   196f4:	bne	196d8 <__assert_fail@plt+0x8714>
   196f8:	mov	r0, r4
   196fc:	pop	{r4, r5, r6, lr}
   19700:	b	196b4 <__assert_fail@plt+0x86f0>
   19704:	mov	r3, #0
   19708:	str	r0, [r1, #16]
   1970c:	str	r3, [r1, #20]
   19710:	ldr	r2, [r0, #12]
   19714:	cmp	r2, r3
   19718:	bne	19724 <__assert_fail@plt+0x8760>
   1971c:	b	1973c <__assert_fail@plt+0x8778>
   19720:	mov	r2, r3
   19724:	ldr	r3, [r2, #20]
   19728:	cmp	r3, #0
   1972c:	bne	19720 <__assert_fail@plt+0x875c>
   19730:	add	r2, r2, #20
   19734:	str	r1, [r2]
   19738:	bx	lr
   1973c:	add	r2, r0, #12
   19740:	str	r1, [r2]
   19744:	bx	lr
   19748:	ldr	r3, [pc, #340]	; 198a4 <__assert_fail@plt+0x88e0>
   1974c:	ldr	ip, [pc, #340]	; 198a8 <__assert_fail@plt+0x88e4>
   19750:	add	r3, pc, r3
   19754:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19758:	mov	r5, r2
   1975c:	ldr	r6, [r3, ip]
   19760:	ldrb	r2, [r2]
   19764:	sub	sp, sp, #56	; 0x38
   19768:	add	r4, sp, #40	; 0x28
   1976c:	cmp	r2, #47	; 0x2f
   19770:	ldr	r2, [r6]
   19774:	mov	r3, #0
   19778:	mov	r7, r0
   1977c:	mov	r8, r1
   19780:	str	r2, [sp, #52]	; 0x34
   19784:	str	r3, [r4, #4]
   19788:	str	r3, [sp, #40]	; 0x28
   1978c:	str	r3, [r4, #8]
   19790:	beq	19868 <__assert_fail@plt+0x88a4>
   19794:	str	r5, [sp, #4]
   19798:	mov	r3, #1
   1979c:	add	r5, sp, #16
   197a0:	mov	r0, r5
   197a4:	str	r3, [sp]
   197a8:	ldm	r4, {r1, r2, r3}
   197ac:	bl	15f88 <__assert_fail@plt+0x4fc4>
   197b0:	ldm	r5, {r0, r1, r2}
   197b4:	mvn	sl, #0
   197b8:	mov	fp, #0
   197bc:	mov	ip, #32
   197c0:	strd	sl, [sp]
   197c4:	stm	r4, {r0, r1, r2}
   197c8:	mov	r0, r5
   197cc:	ldm	r4, {r1, r2, r3}
   197d0:	str	ip, [sp, #8]
   197d4:	bl	15b44 <__assert_fail@plt+0x4b80>
   197d8:	ldm	r5, {r0, r1, r2}
   197dc:	stm	r4, {r0, r1, r2}
   197e0:	ldr	r0, [pc, #196]	; 198ac <__assert_fail@plt+0x88e8>
   197e4:	ldm	r4, {r1, r2, r3}
   197e8:	add	r0, pc, r0
   197ec:	bl	19434 <__assert_fail@plt+0x8470>
   197f0:	mov	r4, r0
   197f4:	ldr	r3, [pc, #180]	; 198b0 <__assert_fail@plt+0x88ec>
   197f8:	ldr	r1, [pc, #180]	; 198b4 <__assert_fail@plt+0x88f0>
   197fc:	add	r3, pc, r3
   19800:	add	r1, pc, r1
   19804:	ldr	r2, [r3]
   19808:	add	r0, sp, #36	; 0x24
   1980c:	add	ip, r2, #1
   19810:	str	ip, [r3]
   19814:	bl	1c594 <__assert_fail@plt+0xb5d0>
   19818:	ldr	r1, [pc, #152]	; 198b8 <__assert_fail@plt+0x88f4>
   1981c:	mov	r0, r8
   19820:	add	r1, pc, r1
   19824:	bl	195cc <__assert_fail@plt+0x8608>
   19828:	mov	r1, r8
   1982c:	mov	r0, r4
   19830:	bl	19530 <__assert_fail@plt+0x856c>
   19834:	ldr	r1, [sp, #36]	; 0x24
   19838:	mov	r4, r0
   1983c:	bl	195cc <__assert_fail@plt+0x8608>
   19840:	mov	r0, r7
   19844:	mov	r1, r4
   19848:	bl	19704 <__assert_fail@plt+0x8740>
   1984c:	ldr	r2, [sp, #52]	; 0x34
   19850:	ldr	r3, [r6]
   19854:	mov	r0, r7
   19858:	cmp	r2, r3
   1985c:	bne	198a0 <__assert_fail@plt+0x88dc>
   19860:	add	sp, sp, #56	; 0x38
   19864:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19868:	mov	r0, r5
   1986c:	bl	10e74 <strlen@plt>
   19870:	str	r5, [sp]
   19874:	ldm	r4, {r1, r2, r3}
   19878:	add	r0, r0, #1
   1987c:	str	r0, [sp, #4]
   19880:	mov	r0, r4
   19884:	bl	158e8 <__assert_fail@plt+0x4924>
   19888:	ldr	r0, [pc, #44]	; 198bc <__assert_fail@plt+0x88f8>
   1988c:	ldm	r4, {r1, r2, r3}
   19890:	add	r0, pc, r0
   19894:	bl	19434 <__assert_fail@plt+0x8470>
   19898:	mov	r4, r0
   1989c:	b	197f4 <__assert_fail@plt+0x8830>
   198a0:	bl	10d9c <__stack_chk_fail@plt>
   198a4:	andeq	sp, r1, r4, lsr r7
   198a8:	andeq	r0, r0, r4, lsl r1
   198ac:	andeq	sl, r0, r8, lsl #28
   198b0:	andeq	lr, r1, r8, lsr r2
   198b4:	strdeq	sl, [r0], -r8
   198b8:	andeq	r8, r0, ip, asr #23
   198bc:	andeq	sl, r0, r4, asr sp
   198c0:	push	{r4, r5, r6, lr}
   198c4:	mov	r6, r1
   198c8:	mov	r1, #0
   198cc:	mov	r5, r0
   198d0:	mov	r0, r1
   198d4:	bl	19530 <__assert_fail@plt+0x856c>
   198d8:	mov	r4, r0
   198dc:	mov	r0, r6
   198e0:	bl	1c550 <__assert_fail@plt+0xb58c>
   198e4:	mov	r1, r0
   198e8:	mov	r0, r4
   198ec:	bl	195cc <__assert_fail@plt+0x8608>
   198f0:	mov	r0, r5
   198f4:	mov	r1, r4
   198f8:	bl	19704 <__assert_fail@plt+0x8740>
   198fc:	mov	r0, r4
   19900:	pop	{r4, r5, r6, pc}
   19904:	push	{r4, r5, r6, lr}
   19908:	mov	r3, #1
   1990c:	ldr	r4, [r0, #12]
   19910:	mov	r5, r0
   19914:	cmp	r4, #0
   19918:	strb	r3, [r0]
   1991c:	beq	19938 <__assert_fail@plt+0x8974>
   19920:	ldrb	r3, [r4]
   19924:	cmp	r3, #0
   19928:	beq	19980 <__assert_fail@plt+0x89bc>
   1992c:	ldr	r4, [r4, #20]
   19930:	cmp	r4, #0
   19934:	bne	19920 <__assert_fail@plt+0x895c>
   19938:	ldr	r4, [r5, #8]
   1993c:	cmp	r4, #0
   19940:	bne	19954 <__assert_fail@plt+0x8990>
   19944:	b	19974 <__assert_fail@plt+0x89b0>
   19948:	ldr	r4, [r4, #20]
   1994c:	cmp	r4, #0
   19950:	beq	19974 <__assert_fail@plt+0x89b0>
   19954:	ldrb	r3, [r4]
   19958:	cmp	r3, #0
   1995c:	bne	19948 <__assert_fail@plt+0x8984>
   19960:	mov	r0, r4
   19964:	bl	196b4 <__assert_fail@plt+0x86f0>
   19968:	ldr	r4, [r4, #20]
   1996c:	cmp	r4, #0
   19970:	bne	19954 <__assert_fail@plt+0x8990>
   19974:	add	r0, r5, #44	; 0x2c
   19978:	pop	{r4, r5, r6, lr}
   1997c:	b	19408 <__assert_fail@plt+0x8444>
   19980:	mov	r0, r4
   19984:	bl	19904 <__assert_fail@plt+0x8940>
   19988:	b	1992c <__assert_fail@plt+0x8968>
   1998c:	push	{r4, r5, r6, lr}
   19990:	ldr	r4, [r0, #12]
   19994:	cmp	r4, #0
   19998:	popeq	{r4, r5, r6, pc}
   1999c:	mov	r5, r1
   199a0:	b	199b0 <__assert_fail@plt+0x89ec>
   199a4:	ldr	r4, [r4, #20]
   199a8:	cmp	r4, #0
   199ac:	popeq	{r4, r5, r6, pc}
   199b0:	mov	r1, r5
   199b4:	ldr	r0, [r4, #4]
   199b8:	bl	10d24 <strcmp@plt>
   199bc:	cmp	r0, #0
   199c0:	bne	199a4 <__assert_fail@plt+0x89e0>
   199c4:	mov	r0, r4
   199c8:	pop	{r4, r5, r6, lr}
   199cc:	b	19904 <__assert_fail@plt+0x8940>
   199d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   199d4:	mov	r3, #0
   199d8:	ldr	r4, [r1, #44]	; 0x2c
   199dc:	mov	r7, r1
   199e0:	cmp	r4, r3
   199e4:	mov	r8, r0
   199e8:	strb	r3, [r0]
   199ec:	addne	r5, r0, #44	; 0x2c
   199f0:	beq	19a0c <__assert_fail@plt+0x8a48>
   199f4:	ldr	r1, [r4, #4]
   199f8:	mov	r0, r5
   199fc:	bl	1938c <__assert_fail@plt+0x83c8>
   19a00:	ldr	r4, [r4, #8]
   19a04:	cmp	r4, #0
   19a08:	bne	199f4 <__assert_fail@plt+0x8a30>
   19a0c:	mov	sl, #0
   19a10:	ldr	r6, [r7, #8]
   19a14:	cmp	r6, #0
   19a18:	beq	19ab8 <__assert_fail@plt+0x8af4>
   19a1c:	ldrb	r2, [r6]
   19a20:	ldr	r3, [r6, #20]
   19a24:	cmp	r2, #0
   19a28:	str	r3, [r7, #8]
   19a2c:	str	sl, [r6, #20]
   19a30:	bne	19b3c <__assert_fail@plt+0x8b78>
   19a34:	ldr	r4, [r8, #8]
   19a38:	cmp	r4, #0
   19a3c:	beq	19b54 <__assert_fail@plt+0x8b90>
   19a40:	ldr	r5, [r6, #4]
   19a44:	b	19a54 <__assert_fail@plt+0x8a90>
   19a48:	ldr	r4, [r4, #20]
   19a4c:	cmp	r4, #0
   19a50:	beq	19b54 <__assert_fail@plt+0x8b90>
   19a54:	mov	r1, r5
   19a58:	ldr	r0, [r4, #4]
   19a5c:	bl	10d24 <strcmp@plt>
   19a60:	cmp	r0, #0
   19a64:	bne	19a48 <__assert_fail@plt+0x8a84>
   19a68:	ldr	r5, [r6, #24]
   19a6c:	cmp	r5, #0
   19a70:	addne	r9, r4, #24
   19a74:	beq	19a90 <__assert_fail@plt+0x8acc>
   19a78:	ldr	r1, [r5, #4]
   19a7c:	mov	r0, r9
   19a80:	bl	1938c <__assert_fail@plt+0x83c8>
   19a84:	ldr	r5, [r5, #8]
   19a88:	cmp	r5, #0
   19a8c:	bne	19a78 <__assert_fail@plt+0x8ab4>
   19a90:	add	r2, r6, #8
   19a94:	add	r3, r4, #8
   19a98:	ldm	r2, {r0, r1, r2}
   19a9c:	stm	r3, {r0, r1, r2}
   19aa0:	mov	r0, r6
   19aa4:	strb	sl, [r4]
   19aa8:	bl	10d60 <free@plt>
   19aac:	ldr	r6, [r7, #8]
   19ab0:	cmp	r6, #0
   19ab4:	bne	19a1c <__assert_fail@plt+0x8a58>
   19ab8:	ldr	r5, [r7, #12]
   19abc:	cmp	r5, #0
   19ac0:	beq	19b2c <__assert_fail@plt+0x8b68>
   19ac4:	ldrb	r2, [r5]
   19ac8:	ldr	r3, [r5, #20]
   19acc:	cmp	r2, #0
   19ad0:	str	r3, [r7, #12]
   19ad4:	str	r6, [r5, #16]
   19ad8:	str	r6, [r5, #20]
   19adc:	bne	19b64 <__assert_fail@plt+0x8ba0>
   19ae0:	ldr	r4, [r8, #12]
   19ae4:	cmp	r4, #0
   19ae8:	beq	19b7c <__assert_fail@plt+0x8bb8>
   19aec:	ldr	r9, [r5, #4]
   19af0:	b	19b00 <__assert_fail@plt+0x8b3c>
   19af4:	ldr	r4, [r4, #20]
   19af8:	cmp	r4, #0
   19afc:	beq	19b7c <__assert_fail@plt+0x8bb8>
   19b00:	mov	r1, r9
   19b04:	ldr	r0, [r4, #4]
   19b08:	bl	10d24 <strcmp@plt>
   19b0c:	cmp	r0, #0
   19b10:	bne	19af4 <__assert_fail@plt+0x8b30>
   19b14:	mov	r1, r5
   19b18:	mov	r0, r4
   19b1c:	bl	199d0 <__assert_fail@plt+0x8a0c>
   19b20:	ldr	r5, [r7, #12]
   19b24:	cmp	r5, #0
   19b28:	bne	19ac4 <__assert_fail@plt+0x8b00>
   19b2c:	mov	r0, r7
   19b30:	bl	10d60 <free@plt>
   19b34:	mov	r0, r8
   19b38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b3c:	mov	r0, r8
   19b40:	ldr	r1, [r6, #4]
   19b44:	bl	196c0 <__assert_fail@plt+0x86fc>
   19b48:	mov	r0, r6
   19b4c:	bl	10d60 <free@plt>
   19b50:	b	19a10 <__assert_fail@plt+0x8a4c>
   19b54:	mov	r1, r6
   19b58:	mov	r0, r8
   19b5c:	bl	19674 <__assert_fail@plt+0x86b0>
   19b60:	b	19a10 <__assert_fail@plt+0x8a4c>
   19b64:	mov	r0, r8
   19b68:	ldr	r1, [r5, #4]
   19b6c:	bl	1998c <__assert_fail@plt+0x89c8>
   19b70:	mov	r0, r5
   19b74:	bl	10d60 <free@plt>
   19b78:	b	19ab8 <__assert_fail@plt+0x8af4>
   19b7c:	mov	r1, r5
   19b80:	mov	r0, r8
   19b84:	bl	19704 <__assert_fail@plt+0x8740>
   19b88:	b	19ab8 <__assert_fail@plt+0x8af4>
   19b8c:	push	{r4, r5, r6, r7, r8, lr}
   19b90:	mov	r6, r0
   19b94:	mov	r0, #24
   19b98:	mov	r5, r3
   19b9c:	mov	r7, r1
   19ba0:	mov	r4, r2
   19ba4:	bl	10dfc <malloc@plt>
   19ba8:	subs	r3, r0, #0
   19bac:	beq	19bc8 <__assert_fail@plt+0x8c04>
   19bb0:	mov	r1, #0
   19bb4:	str	r1, [r3, #16]
   19bb8:	str	r1, [r3, #20]
   19bbc:	strd	r6, [r3]
   19bc0:	strd	r4, [r3, #8]
   19bc4:	pop	{r4, r5, r6, r7, r8, pc}
   19bc8:	ldr	r0, [pc, #4]	; 19bd4 <__assert_fail@plt+0x8c10>
   19bcc:	add	r0, pc, r0
   19bd0:	bl	1910c <__assert_fail@plt+0x8148>
   19bd4:	andeq	r9, r0, r8, lsr #20
   19bd8:	ldr	r2, [r0, #16]
   19bdc:	cmp	r2, #0
   19be0:	bne	19bec <__assert_fail@plt+0x8c28>
   19be4:	str	r1, [r0, #16]
   19be8:	bx	lr
   19bec:	ldr	r3, [pc, #32]	; 19c14 <__assert_fail@plt+0x8c50>
   19bf0:	ldr	r1, [pc, #32]	; 19c18 <__assert_fail@plt+0x8c54>
   19bf4:	ldr	r0, [pc, #32]	; 19c1c <__assert_fail@plt+0x8c58>
   19bf8:	add	r3, pc, r3
   19bfc:	push	{r4, lr}
   19c00:	add	r3, r3, #40	; 0x28
   19c04:	ldr	r2, [pc, #20]	; 19c20 <__assert_fail@plt+0x8c5c>
   19c08:	add	r1, pc, r1
   19c0c:	add	r0, pc, r0
   19c10:	bl	10fc4 <__assert_fail@plt>
   19c14:	andeq	sl, r0, r8, lsl #18
   19c18:	andeq	sl, r0, ip, lsl #19
   19c1c:	muleq	r0, r4, r9
   19c20:	andeq	r0, r0, r6, ror r1
   19c24:	cmp	r0, #0
   19c28:	mov	r3, #0
   19c2c:	str	r3, [r1, #16]
   19c30:	movne	r2, r0
   19c34:	bne	19c40 <__assert_fail@plt+0x8c7c>
   19c38:	b	19c54 <__assert_fail@plt+0x8c90>
   19c3c:	mov	r2, r3
   19c40:	ldr	r3, [r2, #16]
   19c44:	cmp	r3, #0
   19c48:	bne	19c3c <__assert_fail@plt+0x8c78>
   19c4c:	str	r1, [r2, #16]
   19c50:	bx	lr
   19c54:	mov	r0, r1
   19c58:	bx	lr
   19c5c:	push	{r4, r5, r6, r7, r8, lr}
   19c60:	mov	r7, r0
   19c64:	mov	r0, #20
   19c68:	mov	r6, r1
   19c6c:	mov	r5, r2
   19c70:	mov	r4, r3
   19c74:	bl	10dfc <malloc@plt>
   19c78:	subs	ip, r0, #0
   19c7c:	beq	19c90 <__assert_fail@plt+0x8ccc>
   19c80:	str	r7, [ip]
   19c84:	str	r6, [ip, #4]
   19c88:	strd	r4, [ip, #8]
   19c8c:	pop	{r4, r5, r6, r7, r8, pc}
   19c90:	ldr	r0, [pc, #4]	; 19c9c <__assert_fail@plt+0x8cd8>
   19c94:	add	r0, pc, r0
   19c98:	bl	1910c <__assert_fail@plt+0x8148>
   19c9c:	andeq	r9, r0, r0, ror #18
   19ca0:	ldr	r3, [r0, #4]
   19ca4:	ldr	r0, [r0, #28]
   19ca8:	ldrb	r2, [r3, r0]
   19cac:	cmp	r2, #0
   19cb0:	beq	19cc0 <__assert_fail@plt+0x8cfc>
   19cb4:	add	r0, r0, #1
   19cb8:	add	r0, r3, r0
   19cbc:	bx	lr
   19cc0:	ldr	r0, [pc, #4]	; 19ccc <__assert_fail@plt+0x8d08>
   19cc4:	add	r0, pc, r0
   19cc8:	bx	lr
   19ccc:	andeq	r9, r0, r0, ror #21
   19cd0:	push	{r4, r5, r6, lr}
   19cd4:	ldr	r4, [r0, #8]
   19cd8:	cmp	r4, #0
   19cdc:	beq	19d10 <__assert_fail@plt+0x8d4c>
   19ce0:	mov	r5, r1
   19ce4:	ldrb	r3, [r4]
   19ce8:	mov	r1, r5
   19cec:	cmp	r3, #0
   19cf0:	bne	19d04 <__assert_fail@plt+0x8d40>
   19cf4:	ldr	r0, [r4, #4]
   19cf8:	bl	10d24 <strcmp@plt>
   19cfc:	cmp	r0, #0
   19d00:	beq	19d10 <__assert_fail@plt+0x8d4c>
   19d04:	ldr	r4, [r4, #20]
   19d08:	cmp	r4, #0
   19d0c:	bne	19ce4 <__assert_fail@plt+0x8d20>
   19d10:	mov	r0, r4
   19d14:	pop	{r4, r5, r6, pc}
   19d18:	ldr	ip, [pc, #196]	; 19de4 <__assert_fail@plt+0x8e20>
   19d1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19d20:	add	ip, pc, ip
   19d24:	ldr	lr, [pc, #188]	; 19de8 <__assert_fail@plt+0x8e24>
   19d28:	sub	sp, sp, #44	; 0x2c
   19d2c:	mov	r7, r3
   19d30:	ldr	r6, [ip, lr]
   19d34:	mov	r5, r2
   19d38:	mov	r9, r0
   19d3c:	ldr	r3, [r6]
   19d40:	mov	r8, r1
   19d44:	str	r3, [sp, #36]	; 0x24
   19d48:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   19d4c:	cmp	r0, #0
   19d50:	beq	19d8c <__assert_fail@plt+0x8dc8>
   19d54:	add	r4, r0, #8
   19d58:	stm	sp, {r5, r7}
   19d5c:	add	r5, sp, #24
   19d60:	ldm	r4, {r1, r2, r3}
   19d64:	mov	r0, r5
   19d68:	bl	158e8 <__assert_fail@plt+0x4924>
   19d6c:	ldm	r5, {r0, r1, r2}
   19d70:	ldr	ip, [sp, #36]	; 0x24
   19d74:	ldr	r3, [r6]
   19d78:	stm	r4, {r0, r1, r2}
   19d7c:	cmp	ip, r3
   19d80:	bne	19de0 <__assert_fail@plt+0x8e1c>
   19d84:	add	sp, sp, #44	; 0x2c
   19d88:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19d8c:	add	r3, sp, #24
   19d90:	add	r4, sp, #12
   19d94:	str	r0, [sp, #24]
   19d98:	str	r0, [sp, #28]
   19d9c:	str	r0, [sp, #32]
   19da0:	stm	sp, {r5, r7}
   19da4:	mov	r0, r4
   19da8:	ldm	r3, {r1, r2, r3}
   19dac:	bl	158e8 <__assert_fail@plt+0x4924>
   19db0:	ldm	r4, {r1, r2, r3}
   19db4:	mov	r0, r8
   19db8:	bl	19434 <__assert_fail@plt+0x8470>
   19dbc:	ldr	r2, [sp, #36]	; 0x24
   19dc0:	ldr	r3, [r6]
   19dc4:	cmp	r2, r3
   19dc8:	bne	19de0 <__assert_fail@plt+0x8e1c>
   19dcc:	mov	r1, r0
   19dd0:	mov	r0, r9
   19dd4:	add	sp, sp, #44	; 0x2c
   19dd8:	pop	{r4, r5, r6, r7, r8, r9, lr}
   19ddc:	b	19674 <__assert_fail@plt+0x86b0>
   19de0:	bl	10d9c <__stack_chk_fail@plt>
   19de4:	andeq	sp, r1, r4, ror #2
   19de8:	andeq	r0, r0, r4, lsl r1
   19dec:	ldr	r3, [r0, #8]
   19df0:	cmp	r3, #4
   19df4:	bne	19e24 <__assert_fail@plt+0x8e60>
   19df8:	ldr	r3, [r0, #12]
   19dfc:	ldr	r3, [r3]
   19e00:	lsr	r0, r3, #24
   19e04:	lsl	r2, r3, #8
   19e08:	orr	r0, r0, r3, lsl #24
   19e0c:	and	r2, r2, #16711680	; 0xff0000
   19e10:	lsr	r3, r3, #8
   19e14:	orr	r0, r0, r2
   19e18:	and	r3, r3, #65280	; 0xff00
   19e1c:	orr	r0, r0, r3
   19e20:	bx	lr
   19e24:	ldr	r3, [pc, #32]	; 19e4c <__assert_fail@plt+0x8e88>
   19e28:	ldr	r1, [pc, #32]	; 19e50 <__assert_fail@plt+0x8e8c>
   19e2c:	ldr	r0, [pc, #32]	; 19e54 <__assert_fail@plt+0x8e90>
   19e30:	add	r3, pc, r3
   19e34:	push	{r4, lr}
   19e38:	add	r3, r3, #60	; 0x3c
   19e3c:	ldr	r2, [pc, #20]	; 19e58 <__assert_fail@plt+0x8e94>
   19e40:	add	r1, pc, r1
   19e44:	add	r0, pc, r0
   19e48:	bl	10fc4 <__assert_fail@plt>
   19e4c:	ldrdeq	sl, [r0], -r0
   19e50:	andeq	sl, r0, r4, asr r7
   19e54:	andeq	sl, r0, r0, asr #15
   19e58:			; <UNDEFINED> instruction: 0x000001b6
   19e5c:	ldr	r3, [r0, #8]
   19e60:	cmp	r1, r3, lsr #2
   19e64:	bhi	19e94 <__assert_fail@plt+0x8ed0>
   19e68:	ldr	r3, [r0, #12]
   19e6c:	ldr	r3, [r3, r1, lsl #2]
   19e70:	lsr	r0, r3, #24
   19e74:	lsl	r2, r3, #8
   19e78:	orr	r0, r0, r3, lsl #24
   19e7c:	and	r2, r2, #16711680	; 0xff0000
   19e80:	lsr	r3, r3, #8
   19e84:	orr	r0, r0, r2
   19e88:	and	r3, r3, #65280	; 0xff00
   19e8c:	orr	r0, r0, r3
   19e90:	bx	lr
   19e94:	ldr	r3, [pc, #32]	; 19ebc <__assert_fail@plt+0x8ef8>
   19e98:	ldr	r1, [pc, #32]	; 19ec0 <__assert_fail@plt+0x8efc>
   19e9c:	ldr	r0, [pc, #32]	; 19ec4 <__assert_fail@plt+0x8f00>
   19ea0:	add	r3, pc, r3
   19ea4:	push	{r4, lr}
   19ea8:	mov	r2, #444	; 0x1bc
   19eac:	add	r3, r3, #76	; 0x4c
   19eb0:	add	r1, pc, r1
   19eb4:	add	r0, pc, r0
   19eb8:	bl	10fc4 <__assert_fail@plt>
   19ebc:	andeq	sl, r0, r0, ror #12
   19ec0:	andeq	sl, r0, r4, ror #13
   19ec4:	andeq	sl, r0, r0, ror r7
   19ec8:	push	{r4, r5, r6, r7, r8, lr}
   19ecc:	mov	r8, r0
   19ed0:	ldr	r5, [r0, #8]
   19ed4:	mov	r7, r2
   19ed8:	cmp	r5, #0
   19edc:	str	r0, [r2]
   19ee0:	mov	r6, r1
   19ee4:	bne	19ef8 <__assert_fail@plt+0x8f34>
   19ee8:	b	19f48 <__assert_fail@plt+0x8f84>
   19eec:	ldr	r5, [r5, #20]
   19ef0:	cmp	r5, #0
   19ef4:	beq	19f48 <__assert_fail@plt+0x8f84>
   19ef8:	ldrb	r3, [r5]
   19efc:	cmp	r3, #0
   19f00:	bne	19eec <__assert_fail@plt+0x8f28>
   19f04:	ldr	r4, [r5, #24]
   19f08:	cmp	r4, #0
   19f0c:	bne	19f20 <__assert_fail@plt+0x8f5c>
   19f10:	b	19eec <__assert_fail@plt+0x8f28>
   19f14:	ldr	r4, [r4, #8]
   19f18:	cmp	r4, #0
   19f1c:	beq	19eec <__assert_fail@plt+0x8f28>
   19f20:	ldrb	r3, [r4]
   19f24:	mov	r1, r6
   19f28:	cmp	r3, #0
   19f2c:	bne	19f14 <__assert_fail@plt+0x8f50>
   19f30:	ldr	r0, [r4, #4]
   19f34:	bl	10d24 <strcmp@plt>
   19f38:	cmp	r0, #0
   19f3c:	bne	19f14 <__assert_fail@plt+0x8f50>
   19f40:	mov	r0, r5
   19f44:	pop	{r4, r5, r6, r7, r8, pc}
   19f48:	ldr	r4, [r8, #12]
   19f4c:	cmp	r4, #0
   19f50:	bne	19f64 <__assert_fail@plt+0x8fa0>
   19f54:	b	19f94 <__assert_fail@plt+0x8fd0>
   19f58:	ldr	r4, [r4, #20]
   19f5c:	cmp	r4, #0
   19f60:	beq	19f94 <__assert_fail@plt+0x8fd0>
   19f64:	ldrb	r3, [r4]
   19f68:	cmp	r3, #0
   19f6c:	bne	19f58 <__assert_fail@plt+0x8f94>
   19f70:	mov	r2, r7
   19f74:	mov	r1, r6
   19f78:	mov	r0, r4
   19f7c:	bl	19ec8 <__assert_fail@plt+0x8f04>
   19f80:	subs	r5, r0, #0
   19f84:	bne	19f40 <__assert_fail@plt+0x8f7c>
   19f88:	ldr	r4, [r4, #20]
   19f8c:	cmp	r4, #0
   19f90:	bne	19f64 <__assert_fail@plt+0x8fa0>
   19f94:	mov	r3, #0
   19f98:	mov	r5, r3
   19f9c:	str	r3, [r7]
   19fa0:	mov	r0, r5
   19fa4:	pop	{r4, r5, r6, r7, r8, pc}
   19fa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fac:	mov	r9, r0
   19fb0:	ldr	r5, [r0, #8]
   19fb4:	mov	r8, r2
   19fb8:	cmp	r5, #0
   19fbc:	str	r0, [r2]
   19fc0:	mov	r6, r1
   19fc4:	mov	r7, r3
   19fc8:	bne	19fdc <__assert_fail@plt+0x9018>
   19fcc:	b	1a030 <__assert_fail@plt+0x906c>
   19fd0:	ldr	r5, [r5, #20]
   19fd4:	cmp	r5, #0
   19fd8:	beq	1a030 <__assert_fail@plt+0x906c>
   19fdc:	ldrb	r3, [r5]
   19fe0:	cmp	r3, #0
   19fe4:	bne	19fd0 <__assert_fail@plt+0x900c>
   19fe8:	ldr	r4, [r5, #16]
   19fec:	str	r5, [r7]
   19ff0:	cmp	r4, #0
   19ff4:	bne	1a008 <__assert_fail@plt+0x9044>
   19ff8:	b	19fd0 <__assert_fail@plt+0x900c>
   19ffc:	ldr	r4, [r4, #12]
   1a000:	cmp	r4, #0
   1a004:	beq	19fd0 <__assert_fail@plt+0x900c>
   1a008:	ldr	r3, [r4]
   1a00c:	cmp	r3, #3
   1a010:	bne	19ffc <__assert_fail@plt+0x9038>
   1a014:	mov	r1, r6
   1a018:	ldr	r0, [r4, #8]
   1a01c:	bl	10d24 <strcmp@plt>
   1a020:	cmp	r0, #0
   1a024:	bne	19ffc <__assert_fail@plt+0x9038>
   1a028:	mov	r0, r4
   1a02c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a030:	ldr	r5, [r9, #12]
   1a034:	cmp	r5, #0
   1a038:	bne	1a04c <__assert_fail@plt+0x9088>
   1a03c:	b	1a080 <__assert_fail@plt+0x90bc>
   1a040:	ldr	r5, [r5, #20]
   1a044:	cmp	r5, #0
   1a048:	beq	1a080 <__assert_fail@plt+0x90bc>
   1a04c:	ldrb	r3, [r5]
   1a050:	cmp	r3, #0
   1a054:	bne	1a040 <__assert_fail@plt+0x907c>
   1a058:	mov	r3, r7
   1a05c:	mov	r2, r8
   1a060:	mov	r1, r6
   1a064:	mov	r0, r5
   1a068:	bl	19fa8 <__assert_fail@plt+0x8fe4>
   1a06c:	subs	r4, r0, #0
   1a070:	bne	1a028 <__assert_fail@plt+0x9064>
   1a074:	ldr	r5, [r5, #20]
   1a078:	cmp	r5, #0
   1a07c:	bne	1a04c <__assert_fail@plt+0x9088>
   1a080:	mov	r3, #0
   1a084:	mov	r4, r3
   1a088:	str	r3, [r7]
   1a08c:	mov	r0, r4
   1a090:	str	r3, [r8]
   1a094:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a098:	push	{r4, r5, r6, lr}
   1a09c:	ldr	r4, [r0, #12]
   1a0a0:	cmp	r4, #0
   1a0a4:	beq	1a0d8 <__assert_fail@plt+0x9114>
   1a0a8:	mov	r5, r1
   1a0ac:	ldrb	r3, [r4]
   1a0b0:	mov	r1, r5
   1a0b4:	cmp	r3, #0
   1a0b8:	bne	1a0cc <__assert_fail@plt+0x9108>
   1a0bc:	ldr	r0, [r4, #4]
   1a0c0:	bl	10d24 <strcmp@plt>
   1a0c4:	cmp	r0, #0
   1a0c8:	beq	1a0d8 <__assert_fail@plt+0x9114>
   1a0cc:	ldr	r4, [r4, #20]
   1a0d0:	cmp	r4, #0
   1a0d4:	bne	1a0ac <__assert_fail@plt+0x90e8>
   1a0d8:	mov	r0, r4
   1a0dc:	pop	{r4, r5, r6, pc}
   1a0e0:	push	{r4, r5, r6, lr}
   1a0e4:	mov	r5, r0
   1a0e8:	mov	r4, r1
   1a0ec:	bl	1a098 <__assert_fail@plt+0x90d4>
   1a0f0:	cmp	r0, #0
   1a0f4:	popne	{r4, r5, r6, pc}
   1a0f8:	mov	r0, r5
   1a0fc:	mov	r1, r4
   1a100:	bl	198c0 <__assert_fail@plt+0x88fc>
   1a104:	cmp	r0, #0
   1a108:	popne	{r4, r5, r6, pc}
   1a10c:	ldr	r0, [pc, #8]	; 1a11c <__assert_fail@plt+0x9158>
   1a110:	mov	r1, r4
   1a114:	add	r0, pc, r0
   1a118:	bl	1910c <__assert_fail@plt+0x8148>
   1a11c:	andeq	sl, r0, r4, lsr r5
   1a120:	push	{r4, r5, r6, r7, r8, lr}
   1a124:	subs	r5, r1, #0
   1a128:	mov	r6, r0
   1a12c:	beq	1a1f0 <__assert_fail@plt+0x922c>
   1a130:	ldrb	r3, [r5]
   1a134:	cmp	r3, #0
   1a138:	beq	1a1f0 <__assert_fail@plt+0x922c>
   1a13c:	cmp	r3, #47	; 0x2f
   1a140:	ldrbeq	r3, [r5, #1]!
   1a144:	beq	1a13c <__assert_fail@plt+0x9178>
   1a148:	mov	r1, #47	; 0x2f
   1a14c:	mov	r0, r5
   1a150:	bl	10e80 <strchr@plt>
   1a154:	ldr	r4, [r6, #12]
   1a158:	cmp	r4, #0
   1a15c:	mov	r7, r0
   1a160:	beq	1a1b4 <__assert_fail@plt+0x91f0>
   1a164:	sub	r8, r0, r5
   1a168:	b	1a188 <__assert_fail@plt+0x91c4>
   1a16c:	mov	r0, r6
   1a170:	bl	10e74 <strlen@plt>
   1a174:	cmp	r0, r8
   1a178:	beq	1a1bc <__assert_fail@plt+0x91f8>
   1a17c:	ldr	r4, [r4, #20]
   1a180:	cmp	r4, #0
   1a184:	beq	1a1b4 <__assert_fail@plt+0x91f0>
   1a188:	ldrb	r3, [r4]
   1a18c:	cmp	r3, #0
   1a190:	bne	1a17c <__assert_fail@plt+0x91b8>
   1a194:	cmp	r7, #0
   1a198:	ldr	r6, [r4, #4]
   1a19c:	bne	1a16c <__assert_fail@plt+0x91a8>
   1a1a0:	mov	r1, r6
   1a1a4:	mov	r0, r5
   1a1a8:	bl	10d24 <strcmp@plt>
   1a1ac:	cmp	r0, #0
   1a1b0:	bne	1a17c <__assert_fail@plt+0x91b8>
   1a1b4:	mov	r0, r4
   1a1b8:	pop	{r4, r5, r6, r7, r8, pc}
   1a1bc:	mov	r1, r6
   1a1c0:	mov	r2, r8
   1a1c4:	mov	r0, r5
   1a1c8:	bl	10d90 <memcmp@plt>
   1a1cc:	cmp	r0, #0
   1a1d0:	bne	1a17c <__assert_fail@plt+0x91b8>
   1a1d4:	adds	r5, r7, #1
   1a1d8:	beq	1a1b4 <__assert_fail@plt+0x91f0>
   1a1dc:	ldrb	r3, [r7, #1]
   1a1e0:	mov	r6, r4
   1a1e4:	cmp	r3, #0
   1a1e8:	bne	1a13c <__assert_fail@plt+0x9178>
   1a1ec:	b	1a1b4 <__assert_fail@plt+0x91f0>
   1a1f0:	ldrb	r3, [r6]
   1a1f4:	cmp	r3, #0
   1a1f8:	moveq	r4, r6
   1a1fc:	movne	r4, #0
   1a200:	b	1a1b4 <__assert_fail@plt+0x91f0>
   1a204:	push	{r4, r5, r6, lr}
   1a208:	subs	r6, r1, #0
   1a20c:	beq	1a2a0 <__assert_fail@plt+0x92dc>
   1a210:	ldrb	r3, [r6]
   1a214:	cmp	r3, #0
   1a218:	beq	1a2a0 <__assert_fail@plt+0x92dc>
   1a21c:	ldr	r4, [r0, #44]	; 0x2c
   1a220:	mov	r5, r0
   1a224:	cmp	r4, #0
   1a228:	beq	1a258 <__assert_fail@plt+0x9294>
   1a22c:	ldrb	r3, [r4]
   1a230:	cmp	r3, #0
   1a234:	bne	1a24c <__assert_fail@plt+0x9288>
   1a238:	mov	r1, r6
   1a23c:	ldr	r0, [r4, #4]
   1a240:	bl	10d24 <strcmp@plt>
   1a244:	cmp	r0, #0
   1a248:	beq	1a298 <__assert_fail@plt+0x92d4>
   1a24c:	ldr	r4, [r4, #8]
   1a250:	cmp	r4, #0
   1a254:	bne	1a22c <__assert_fail@plt+0x9268>
   1a258:	ldr	r5, [r5, #12]
   1a25c:	cmp	r5, #0
   1a260:	bne	1a274 <__assert_fail@plt+0x92b0>
   1a264:	b	1a298 <__assert_fail@plt+0x92d4>
   1a268:	ldr	r5, [r5, #20]
   1a26c:	cmp	r5, #0
   1a270:	beq	1a298 <__assert_fail@plt+0x92d4>
   1a274:	ldrb	r3, [r5]
   1a278:	cmp	r3, #0
   1a27c:	bne	1a268 <__assert_fail@plt+0x92a4>
   1a280:	mov	r1, r6
   1a284:	mov	r0, r5
   1a288:	bl	1a204 <__assert_fail@plt+0x9240>
   1a28c:	cmp	r0, #0
   1a290:	beq	1a268 <__assert_fail@plt+0x92a4>
   1a294:	mov	r5, r0
   1a298:	mov	r0, r5
   1a29c:	pop	{r4, r5, r6, pc}
   1a2a0:	ldr	r3, [pc, #28]	; 1a2c4 <__assert_fail@plt+0x9300>
   1a2a4:	ldr	r1, [pc, #28]	; 1a2c8 <__assert_fail@plt+0x9304>
   1a2a8:	ldr	r0, [pc, #28]	; 1a2cc <__assert_fail@plt+0x9308>
   1a2ac:	add	r3, pc, r3
   1a2b0:	ldr	r2, [pc, #24]	; 1a2d0 <__assert_fail@plt+0x930c>
   1a2b4:	add	r3, r3, #92	; 0x5c
   1a2b8:	add	r1, pc, r1
   1a2bc:	add	r0, pc, r0
   1a2c0:	bl	10fc4 <__assert_fail@plt>
   1a2c4:	andeq	sl, r0, r4, asr r2
   1a2c8:	ldrdeq	sl, [r0], -ip
   1a2cc:	andeq	sl, r0, ip, lsr #7
   1a2d0:	andeq	r0, r0, r1, lsr #4
   1a2d4:	sub	r3, r1, #1
   1a2d8:	cmn	r3, #3
   1a2dc:	ldr	r3, [pc, #184]	; 1a39c <__assert_fail@plt+0x93d8>
   1a2e0:	push	{r4, r5, r6, lr}
   1a2e4:	add	r3, pc, r3
   1a2e8:	bls	1a30c <__assert_fail@plt+0x9348>
   1a2ec:	ldr	r2, [pc, #172]	; 1a3a0 <__assert_fail@plt+0x93dc>
   1a2f0:	ldr	r3, [r3, r2]
   1a2f4:	ldr	r3, [r3]
   1a2f8:	cmp	r3, #0
   1a2fc:	movne	r4, #0
   1a300:	beq	1a378 <__assert_fail@plt+0x93b4>
   1a304:	mov	r0, r4
   1a308:	pop	{r4, r5, r6, pc}
   1a30c:	ldr	r3, [r0, #32]
   1a310:	mov	r5, r1
   1a314:	cmp	r3, r1
   1a318:	beq	1a360 <__assert_fail@plt+0x939c>
   1a31c:	ldr	r4, [r0, #12]
   1a320:	cmp	r4, #0
   1a324:	bne	1a338 <__assert_fail@plt+0x9374>
   1a328:	b	1a304 <__assert_fail@plt+0x9340>
   1a32c:	ldr	r4, [r4, #20]
   1a330:	cmp	r4, #0
   1a334:	beq	1a304 <__assert_fail@plt+0x9340>
   1a338:	ldrb	r3, [r4]
   1a33c:	cmp	r3, #0
   1a340:	bne	1a32c <__assert_fail@plt+0x9368>
   1a344:	mov	r1, r5
   1a348:	mov	r0, r4
   1a34c:	bl	1a2d4 <__assert_fail@plt+0x9310>
   1a350:	cmp	r0, #0
   1a354:	beq	1a32c <__assert_fail@plt+0x9368>
   1a358:	mov	r4, r0
   1a35c:	b	1a304 <__assert_fail@plt+0x9340>
   1a360:	ldrb	r3, [r0]
   1a364:	cmp	r3, #0
   1a368:	moveq	r4, r0
   1a36c:	movne	r4, #0
   1a370:	mov	r0, r4
   1a374:	pop	{r4, r5, r6, pc}
   1a378:	ldr	r3, [pc, #36]	; 1a3a4 <__assert_fail@plt+0x93e0>
   1a37c:	ldr	r1, [pc, #36]	; 1a3a8 <__assert_fail@plt+0x93e4>
   1a380:	ldr	r0, [pc, #36]	; 1a3ac <__assert_fail@plt+0x93e8>
   1a384:	add	r3, pc, r3
   1a388:	ldr	r2, [pc, #32]	; 1a3b0 <__assert_fail@plt+0x93ec>
   1a38c:	add	r3, r3, #112	; 0x70
   1a390:	add	r1, pc, r1
   1a394:	add	r0, pc, r0
   1a398:	bl	10fc4 <__assert_fail@plt>
   1a39c:	andeq	ip, r1, r0, lsr #23
   1a3a0:	andeq	r0, r0, r0, asr r1
   1a3a4:	andeq	sl, r0, ip, ror r1
   1a3a8:	andeq	sl, r0, r4, lsl #4
   1a3ac:	strdeq	sl, [r0], -r4
   1a3b0:	andeq	r0, r0, r5, lsr r2
   1a3b4:	push	{r4, r5, r6, lr}
   1a3b8:	mov	r4, r1
   1a3bc:	ldr	r1, [pc, #64]	; 1a404 <__assert_fail@plt+0x9440>
   1a3c0:	mov	r5, r0
   1a3c4:	add	r1, pc, r1
   1a3c8:	mov	r0, r4
   1a3cc:	bl	10d24 <strcmp@plt>
   1a3d0:	cmp	r0, #0
   1a3d4:	beq	1a3fc <__assert_fail@plt+0x9438>
   1a3d8:	ldrb	r3, [r4]
   1a3dc:	mov	r1, r4
   1a3e0:	mov	r0, r5
   1a3e4:	cmp	r3, #47	; 0x2f
   1a3e8:	beq	1a3f4 <__assert_fail@plt+0x9430>
   1a3ec:	pop	{r4, r5, r6, lr}
   1a3f0:	b	1a204 <__assert_fail@plt+0x9240>
   1a3f4:	pop	{r4, r5, r6, lr}
   1a3f8:	b	1a120 <__assert_fail@plt+0x915c>
   1a3fc:	mov	r0, r5
   1a400:	pop	{r4, r5, r6, pc}
   1a404:	andeq	r9, r0, ip, asr #8
   1a408:	push	{r4, r5, r6, r7, r8, lr}
   1a40c:	subs	r5, r1, #0
   1a410:	mov	r6, r0
   1a414:	mov	r7, r2
   1a418:	bne	1a42c <__assert_fail@plt+0x9468>
   1a41c:	b	1a47c <__assert_fail@plt+0x94b8>
   1a420:	ldr	r5, [r5, #20]
   1a424:	cmp	r5, #0
   1a428:	beq	1a47c <__assert_fail@plt+0x94b8>
   1a42c:	ldrb	r3, [r5]
   1a430:	cmp	r3, #0
   1a434:	bne	1a420 <__assert_fail@plt+0x945c>
   1a438:	ldr	r4, [r5, #16]
   1a43c:	cmp	r4, #0
   1a440:	bne	1a454 <__assert_fail@plt+0x9490>
   1a444:	b	1a420 <__assert_fail@plt+0x945c>
   1a448:	ldr	r4, [r4, #12]
   1a44c:	cmp	r4, #0
   1a450:	beq	1a420 <__assert_fail@plt+0x945c>
   1a454:	ldr	r3, [r4]
   1a458:	cmp	r3, #1
   1a45c:	bne	1a448 <__assert_fail@plt+0x9484>
   1a460:	ldr	r1, [r4, #8]
   1a464:	ldr	r0, [r6, #12]
   1a468:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   1a46c:	cmp	r0, #0
   1a470:	bne	1a448 <__assert_fail@plt+0x9484>
   1a474:	mov	r0, #1
   1a478:	pop	{r4, r5, r6, r7, r8, pc}
   1a47c:	ldr	r4, [r7]
   1a480:	cmp	r4, #0
   1a484:	bne	1a498 <__assert_fail@plt+0x94d4>
   1a488:	b	1a4c8 <__assert_fail@plt+0x9504>
   1a48c:	ldr	r4, [r4, #20]
   1a490:	cmp	r4, #0
   1a494:	beq	1a4c8 <__assert_fail@plt+0x9504>
   1a498:	ldrb	r3, [r4]
   1a49c:	cmp	r3, #0
   1a4a0:	bne	1a48c <__assert_fail@plt+0x94c8>
   1a4a4:	add	r2, r4, #12
   1a4a8:	ldr	r1, [r4, #8]
   1a4ac:	mov	r0, r6
   1a4b0:	bl	1a408 <__assert_fail@plt+0x9444>
   1a4b4:	cmp	r0, #0
   1a4b8:	bne	1a474 <__assert_fail@plt+0x94b0>
   1a4bc:	ldr	r4, [r4, #20]
   1a4c0:	cmp	r4, #0
   1a4c4:	bne	1a498 <__assert_fail@plt+0x94d4>
   1a4c8:	mov	r0, #0
   1a4cc:	pop	{r4, r5, r6, r7, r8, pc}
   1a4d0:	ldr	r3, [pc, #432]	; 1a688 <__assert_fail@plt+0x96c4>
   1a4d4:	ldr	ip, [pc, #432]	; 1a68c <__assert_fail@plt+0x96c8>
   1a4d8:	add	r3, pc, r3
   1a4dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4e0:	mov	r7, r2
   1a4e4:	ldr	r2, [r3, ip]
   1a4e8:	sub	sp, sp, #36	; 0x24
   1a4ec:	ldr	r5, [r7, #8]
   1a4f0:	str	r2, [sp, #12]
   1a4f4:	ldr	r2, [r2]
   1a4f8:	cmp	r5, #0
   1a4fc:	mov	r8, r0
   1a500:	mov	r9, r1
   1a504:	str	r2, [sp, #28]
   1a508:	ldr	r6, [r0, #12]
   1a50c:	beq	1a600 <__assert_fail@plt+0x963c>
   1a510:	ldr	r3, [pc, #376]	; 1a690 <__assert_fail@plt+0x96cc>
   1a514:	add	r3, pc, r3
   1a518:	str	r3, [sp, #16]
   1a51c:	b	1a52c <__assert_fail@plt+0x9568>
   1a520:	ldr	r5, [r5, #20]
   1a524:	cmp	r5, #0
   1a528:	beq	1a600 <__assert_fail@plt+0x963c>
   1a52c:	ldrb	r3, [r5]
   1a530:	cmp	r3, #0
   1a534:	bne	1a520 <__assert_fail@plt+0x955c>
   1a538:	ldr	r4, [r5, #16]
   1a53c:	cmp	r4, #0
   1a540:	beq	1a520 <__assert_fail@plt+0x955c>
   1a544:	add	sl, sp, #24
   1a548:	b	1a558 <__assert_fail@plt+0x9594>
   1a54c:	ldr	r4, [r4, #12]
   1a550:	cmp	r4, #0
   1a554:	beq	1a520 <__assert_fail@plt+0x955c>
   1a558:	ldr	r3, [r4]
   1a55c:	cmp	r3, #1
   1a560:	bne	1a54c <__assert_fail@plt+0x9588>
   1a564:	ldr	r1, [r4, #8]
   1a568:	mov	r0, r6
   1a56c:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   1a570:	cmp	r0, #0
   1a574:	bne	1a54c <__assert_fail@plt+0x9588>
   1a578:	ldr	r3, [r4]
   1a57c:	cmp	r3, #1
   1a580:	bne	1a654 <__assert_fail@plt+0x9690>
   1a584:	ldr	fp, [r7, #24]
   1a588:	mov	r1, #58	; 0x3a
   1a58c:	mov	r0, fp
   1a590:	bl	10e80 <strchr@plt>
   1a594:	cmp	r0, #0
   1a598:	bne	1a67c <__assert_fail@plt+0x96b8>
   1a59c:	ldr	r3, [r5, #4]
   1a5a0:	mov	r1, #58	; 0x3a
   1a5a4:	mov	r0, r3
   1a5a8:	str	r3, [sp, #20]
   1a5ac:	bl	10e80 <strchr@plt>
   1a5b0:	ldr	r3, [sp, #20]
   1a5b4:	cmp	r0, #0
   1a5b8:	bne	1a67c <__assert_fail@plt+0x96b8>
   1a5bc:	ldr	r1, [r4, #4]
   1a5c0:	mov	r2, fp
   1a5c4:	str	r1, [sp]
   1a5c8:	mov	r0, sl
   1a5cc:	ldr	r1, [sp, #16]
   1a5d0:	bl	1c594 <__assert_fail@plt+0xb5d0>
   1a5d4:	ldr	fp, [sp, #24]
   1a5d8:	mov	r0, fp
   1a5dc:	bl	10e74 <strlen@plt>
   1a5e0:	mov	r2, fp
   1a5e4:	ldr	r1, [r4, #8]
   1a5e8:	add	r3, r0, #1
   1a5ec:	mov	r0, r9
   1a5f0:	bl	19d18 <__assert_fail@plt+0x8d54>
   1a5f4:	ldr	r0, [sp, #24]
   1a5f8:	bl	10d60 <free@plt>
   1a5fc:	b	1a54c <__assert_fail@plt+0x9588>
   1a600:	ldr	r4, [r7, #12]
   1a604:	cmp	r4, #0
   1a608:	beq	1a624 <__assert_fail@plt+0x9660>
   1a60c:	ldrb	r3, [r4]
   1a610:	cmp	r3, #0
   1a614:	beq	1a640 <__assert_fail@plt+0x967c>
   1a618:	ldr	r4, [r4, #20]
   1a61c:	cmp	r4, #0
   1a620:	bne	1a60c <__assert_fail@plt+0x9648>
   1a624:	ldr	r3, [sp, #12]
   1a628:	ldr	r2, [sp, #28]
   1a62c:	ldr	r3, [r3]
   1a630:	cmp	r2, r3
   1a634:	bne	1a678 <__assert_fail@plt+0x96b4>
   1a638:	add	sp, sp, #36	; 0x24
   1a63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a640:	mov	r2, r4
   1a644:	mov	r1, r9
   1a648:	mov	r0, r8
   1a64c:	bl	1a4d0 <__assert_fail@plt+0x950c>
   1a650:	b	1a618 <__assert_fail@plt+0x9654>
   1a654:	ldr	r3, [pc, #56]	; 1a694 <__assert_fail@plt+0x96d0>
   1a658:	ldr	r1, [pc, #56]	; 1a698 <__assert_fail@plt+0x96d4>
   1a65c:	ldr	r0, [pc, #56]	; 1a69c <__assert_fail@plt+0x96d8>
   1a660:	add	r3, pc, r3
   1a664:	ldr	r2, [pc, #52]	; 1a6a0 <__assert_fail@plt+0x96dc>
   1a668:	add	r3, r3, #132	; 0x84
   1a66c:	add	r1, pc, r1
   1a670:	add	r0, pc, r0
   1a674:	bl	10fc4 <__assert_fail@plt>
   1a678:	bl	10d9c <__stack_chk_fail@plt>
   1a67c:	ldr	r0, [pc, #32]	; 1a6a4 <__assert_fail@plt+0x96e0>
   1a680:	add	r0, pc, r0
   1a684:	bl	1910c <__assert_fail@plt+0x8148>
   1a688:	andeq	ip, r1, ip, lsr #19
   1a68c:	andeq	r0, r0, r4, lsl r1
   1a690:	andeq	sl, r0, r0, asr #3
   1a694:	andeq	r9, r0, r0, lsr #29
   1a698:	andeq	r9, r0, r8, lsr #30
   1a69c:	andeq	sl, r0, r8, lsr #32
   1a6a0:	andeq	r0, r0, lr, ror r3
   1a6a4:	andeq	sl, r0, r0, lsr r0
   1a6a8:	push	{r4, r5, r6, r7, r8, lr}
   1a6ac:	subs	r5, r1, #0
   1a6b0:	mov	r6, r0
   1a6b4:	mov	r7, r2
   1a6b8:	bne	1a6cc <__assert_fail@plt+0x9708>
   1a6bc:	b	1a71c <__assert_fail@plt+0x9758>
   1a6c0:	ldr	r5, [r5, #20]
   1a6c4:	cmp	r5, #0
   1a6c8:	beq	1a71c <__assert_fail@plt+0x9758>
   1a6cc:	ldrb	r3, [r5]
   1a6d0:	cmp	r3, #0
   1a6d4:	bne	1a6c0 <__assert_fail@plt+0x96fc>
   1a6d8:	ldr	r4, [r5, #16]
   1a6dc:	cmp	r4, #0
   1a6e0:	bne	1a6f4 <__assert_fail@plt+0x9730>
   1a6e4:	b	1a6c0 <__assert_fail@plt+0x96fc>
   1a6e8:	ldr	r4, [r4, #12]
   1a6ec:	cmp	r4, #0
   1a6f0:	beq	1a6c0 <__assert_fail@plt+0x96fc>
   1a6f4:	ldr	r3, [r4]
   1a6f8:	cmp	r3, #1
   1a6fc:	bne	1a6e8 <__assert_fail@plt+0x9724>
   1a700:	ldr	r1, [r4, #8]
   1a704:	ldr	r0, [r6, #12]
   1a708:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   1a70c:	cmp	r0, #0
   1a710:	beq	1a6e8 <__assert_fail@plt+0x9724>
   1a714:	mov	r0, #1
   1a718:	pop	{r4, r5, r6, r7, r8, pc}
   1a71c:	ldr	r4, [r7]
   1a720:	cmp	r4, #0
   1a724:	bne	1a738 <__assert_fail@plt+0x9774>
   1a728:	b	1a768 <__assert_fail@plt+0x97a4>
   1a72c:	ldr	r4, [r4, #20]
   1a730:	cmp	r4, #0
   1a734:	beq	1a768 <__assert_fail@plt+0x97a4>
   1a738:	ldrb	r3, [r4]
   1a73c:	cmp	r3, #0
   1a740:	bne	1a72c <__assert_fail@plt+0x9768>
   1a744:	add	r2, r4, #12
   1a748:	ldr	r1, [r4, #8]
   1a74c:	mov	r0, r6
   1a750:	bl	1a6a8 <__assert_fail@plt+0x96e4>
   1a754:	cmp	r0, #0
   1a758:	bne	1a714 <__assert_fail@plt+0x9750>
   1a75c:	ldr	r4, [r4, #20]
   1a760:	cmp	r4, #0
   1a764:	bne	1a738 <__assert_fail@plt+0x9774>
   1a768:	mov	r0, #0
   1a76c:	pop	{r4, r5, r6, r7, r8, pc}
   1a770:	ldr	r3, [pc, #556]	; 1a9a4 <__assert_fail@plt+0x99e0>
   1a774:	ldr	ip, [pc, #556]	; 1a9a8 <__assert_fail@plt+0x99e4>
   1a778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a77c:	add	r3, pc, r3
   1a780:	sub	sp, sp, #44	; 0x2c
   1a784:	ldr	r7, [r2, #8]
   1a788:	str	r2, [sp, #4]
   1a78c:	str	r0, [sp, #28]
   1a790:	ldr	ip, [r3, ip]
   1a794:	ldr	r3, [r0, #12]
   1a798:	cmp	r7, #0
   1a79c:	ldr	r2, [ip]
   1a7a0:	str	ip, [sp, #24]
   1a7a4:	str	r1, [sp, #16]
   1a7a8:	str	r2, [sp, #36]	; 0x24
   1a7ac:	str	r3, [sp, #12]
   1a7b0:	beq	1a92c <__assert_fail@plt+0x9968>
   1a7b4:	add	r3, sp, #32
   1a7b8:	str	r3, [sp, #20]
   1a7bc:	b	1a7cc <__assert_fail@plt+0x9808>
   1a7c0:	ldr	r7, [r7, #20]
   1a7c4:	cmp	r7, #0
   1a7c8:	beq	1a92c <__assert_fail@plt+0x9968>
   1a7cc:	ldrb	r3, [r7]
   1a7d0:	cmp	r3, #0
   1a7d4:	bne	1a7c0 <__assert_fail@plt+0x97fc>
   1a7d8:	ldr	r5, [r7, #16]
   1a7dc:	cmp	r5, #0
   1a7e0:	beq	1a7c0 <__assert_fail@plt+0x97fc>
   1a7e4:	str	r7, [sp, #8]
   1a7e8:	b	1a7f8 <__assert_fail@plt+0x9834>
   1a7ec:	ldr	r5, [r5, #12]
   1a7f0:	cmp	r5, #0
   1a7f4:	beq	1a91c <__assert_fail@plt+0x9958>
   1a7f8:	ldr	r3, [r5]
   1a7fc:	cmp	r3, #1
   1a800:	bne	1a7ec <__assert_fail@plt+0x9828>
   1a804:	ldr	r1, [r5, #8]
   1a808:	ldr	r0, [sp, #12]
   1a80c:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   1a810:	cmp	r0, #0
   1a814:	beq	1a7ec <__assert_fail@plt+0x9828>
   1a818:	ldr	r3, [sp, #4]
   1a81c:	mov	r6, #0
   1a820:	b	1a828 <__assert_fail@plt+0x9864>
   1a824:	mov	r6, r9
   1a828:	ldr	r3, [r3, #16]
   1a82c:	add	r9, r6, #1
   1a830:	cmp	r3, #0
   1a834:	bne	1a824 <__assert_fail@plt+0x9860>
   1a838:	lsl	r4, r9, #2
   1a83c:	mov	r0, r4
   1a840:	bl	10dfc <malloc@plt>
   1a844:	subs	r8, r0, #0
   1a848:	beq	1a994 <__assert_fail@plt+0x99d0>
   1a84c:	ldr	r3, [sp, #4]
   1a850:	add	r0, r8, r4
   1a854:	ldr	r2, [r3, #4]
   1a858:	ldr	r3, [r3, #16]
   1a85c:	str	r2, [r0, #-4]!
   1a860:	cmp	r3, #0
   1a864:	bne	1a854 <__assert_fail@plt+0x9890>
   1a868:	cmp	r9, #1
   1a86c:	beq	1a98c <__assert_fail@plt+0x99c8>
   1a870:	mov	r4, r3
   1a874:	mov	fp, r8
   1a878:	ldr	sl, [sp, #16]
   1a87c:	b	1a890 <__assert_fail@plt+0x98cc>
   1a880:	add	r4, r4, #1
   1a884:	cmp	r6, r4
   1a888:	mov	sl, r0
   1a88c:	ble	1a8c4 <__assert_fail@plt+0x9900>
   1a890:	ldr	r7, [fp, #4]!
   1a894:	mov	r0, sl
   1a898:	mov	r1, r7
   1a89c:	bl	1a098 <__assert_fail@plt+0x90d4>
   1a8a0:	cmp	r0, #0
   1a8a4:	bne	1a880 <__assert_fail@plt+0x98bc>
   1a8a8:	mov	r0, sl
   1a8ac:	mov	r1, r7
   1a8b0:	bl	198c0 <__assert_fail@plt+0x88fc>
   1a8b4:	add	r4, r4, #1
   1a8b8:	cmp	r6, r4
   1a8bc:	mov	sl, r0
   1a8c0:	bgt	1a890 <__assert_fail@plt+0x98cc>
   1a8c4:	mov	r9, r0
   1a8c8:	mov	r0, r8
   1a8cc:	bl	10d60 <free@plt>
   1a8d0:	ldr	r2, [r5, #4]
   1a8d4:	mov	r0, r9
   1a8d8:	mov	r3, #4
   1a8dc:	lsr	ip, r2, #24
   1a8e0:	lsl	r1, r2, #8
   1a8e4:	orr	ip, ip, r2, lsl #24
   1a8e8:	and	r1, r1, #16711680	; 0xff0000
   1a8ec:	orr	ip, ip, r1
   1a8f0:	ldr	r1, [sp, #8]
   1a8f4:	lsr	r2, r2, #8
   1a8f8:	and	r2, r2, #65280	; 0xff00
   1a8fc:	orr	ip, ip, r2
   1a900:	ldr	r1, [r1, #4]
   1a904:	ldr	r2, [sp, #20]
   1a908:	str	ip, [sp, #32]
   1a90c:	bl	19d18 <__assert_fail@plt+0x8d54>
   1a910:	ldr	r5, [r5, #12]
   1a914:	cmp	r5, #0
   1a918:	bne	1a7f8 <__assert_fail@plt+0x9834>
   1a91c:	ldr	r7, [sp, #8]
   1a920:	ldr	r7, [r7, #20]
   1a924:	cmp	r7, #0
   1a928:	bne	1a7cc <__assert_fail@plt+0x9808>
   1a92c:	ldr	r3, [sp, #4]
   1a930:	ldr	r4, [r3, #12]
   1a934:	cmp	r4, #0
   1a938:	beq	1a95c <__assert_fail@plt+0x9998>
   1a93c:	ldr	r5, [sp, #28]
   1a940:	ldr	r6, [sp, #16]
   1a944:	ldrb	r3, [r4]
   1a948:	cmp	r3, #0
   1a94c:	beq	1a978 <__assert_fail@plt+0x99b4>
   1a950:	ldr	r4, [r4, #20]
   1a954:	cmp	r4, #0
   1a958:	bne	1a944 <__assert_fail@plt+0x9980>
   1a95c:	ldr	r3, [sp, #24]
   1a960:	ldr	r2, [sp, #36]	; 0x24
   1a964:	ldr	r3, [r3]
   1a968:	cmp	r2, r3
   1a96c:	bne	1a9a0 <__assert_fail@plt+0x99dc>
   1a970:	add	sp, sp, #44	; 0x2c
   1a974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a978:	mov	r2, r4
   1a97c:	mov	r1, r6
   1a980:	mov	r0, r5
   1a984:	bl	1a770 <__assert_fail@plt+0x97ac>
   1a988:	b	1a950 <__assert_fail@plt+0x998c>
   1a98c:	ldr	r9, [sp, #16]
   1a990:	b	1a8c8 <__assert_fail@plt+0x9904>
   1a994:	ldr	r0, [pc, #16]	; 1a9ac <__assert_fail@plt+0x99e8>
   1a998:	add	r0, pc, r0
   1a99c:	bl	1910c <__assert_fail@plt+0x8148>
   1a9a0:	bl	10d9c <__stack_chk_fail@plt>
   1a9a4:	andeq	ip, r1, r8, lsl #14
   1a9a8:	andeq	r0, r0, r4, lsl r1
   1a9ac:	andeq	r8, r0, ip, asr ip
   1a9b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a9b4:	sub	sp, sp, #44	; 0x2c
   1a9b8:	ldr	r8, [pc, #372]	; 1ab34 <__assert_fail@plt+0x9b70>
   1a9bc:	ldr	r3, [pc, #372]	; 1ab38 <__assert_fail@plt+0x9b74>
   1a9c0:	add	r8, pc, r8
   1a9c4:	ldr	r2, [r1, #32]
   1a9c8:	ldr	r9, [r8, r3]
   1a9cc:	add	r5, sp, #24
   1a9d0:	sub	r3, r2, #1
   1a9d4:	mov	r7, r1
   1a9d8:	ldr	r1, [r9]
   1a9dc:	cmn	r3, #3
   1a9e0:	mov	r3, #0
   1a9e4:	str	r1, [sp, #36]	; 0x24
   1a9e8:	str	r3, [r5, #4]
   1a9ec:	str	r3, [sp, #24]
   1a9f0:	str	r3, [r5, #8]
   1a9f4:	bls	1aab4 <__assert_fail@plt+0x9af0>
   1a9f8:	ldr	r3, [pc, #316]	; 1ab3c <__assert_fail@plt+0x9b78>
   1a9fc:	ldr	r4, [pc, #316]	; 1ab40 <__assert_fail@plt+0x9b7c>
   1aa00:	add	r3, pc, r3
   1aa04:	mov	r6, r0
   1aa08:	add	r4, pc, r4
   1aa0c:	ldr	r1, [r3]
   1aa10:	b	1aa20 <__assert_fail@plt+0x9a5c>
   1aa14:	ldr	r1, [r4]
   1aa18:	add	r1, r1, #1
   1aa1c:	str	r1, [r4]
   1aa20:	mov	r0, r6
   1aa24:	bl	1a2d4 <__assert_fail@plt+0x9310>
   1aa28:	cmp	r0, #0
   1aa2c:	bne	1aa14 <__assert_fail@plt+0x9a50>
   1aa30:	ldr	r4, [pc, #268]	; 1ab44 <__assert_fail@plt+0x9b80>
   1aa34:	str	r0, [sp, #4]
   1aa38:	add	r4, pc, r4
   1aa3c:	mov	r2, #6
   1aa40:	ldr	r3, [r4]
   1aa44:	mov	r0, r5
   1aa48:	str	r2, [sp]
   1aa4c:	str	r3, [r7, #32]
   1aa50:	ldm	r5, {r1, r2, r3}
   1aa54:	bl	15f88 <__assert_fail@plt+0x4fc4>
   1aa58:	ldr	r3, [r4]
   1aa5c:	add	r4, sp, #8
   1aa60:	mov	r0, r4
   1aa64:	str	r3, [sp]
   1aa68:	ldm	r5, {r1, r2, r3}
   1aa6c:	bl	15d2c <__assert_fail@plt+0x4d68>
   1aa70:	ldm	r4, {r0, r1, r2}
   1aa74:	ldr	r4, [pc, #204]	; 1ab48 <__assert_fail@plt+0x9b84>
   1aa78:	add	r4, pc, r4
   1aa7c:	stm	r5, {r0, r1, r2}
   1aa80:	mov	r1, r4
   1aa84:	mov	r0, r7
   1aa88:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1aa8c:	cmp	r0, #0
   1aa90:	beq	1ab00 <__assert_fail@plt+0x9b3c>
   1aa94:	ldr	r4, [pc, #176]	; 1ab4c <__assert_fail@plt+0x9b88>
   1aa98:	mov	r0, r7
   1aa9c:	add	r4, pc, r4
   1aaa0:	mov	r1, r4
   1aaa4:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1aaa8:	cmp	r0, #0
   1aaac:	beq	1aad0 <__assert_fail@plt+0x9b0c>
   1aab0:	ldr	r2, [r7, #32]
   1aab4:	ldr	r1, [sp, #36]	; 0x24
   1aab8:	ldr	r3, [r9]
   1aabc:	mov	r0, r2
   1aac0:	cmp	r1, r3
   1aac4:	bne	1ab30 <__assert_fail@plt+0x9b6c>
   1aac8:	add	sp, sp, #44	; 0x2c
   1aacc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1aad0:	ldr	r3, [pc, #120]	; 1ab50 <__assert_fail@plt+0x9b8c>
   1aad4:	ldr	r3, [r8, r3]
   1aad8:	ldr	r3, [r3]
   1aadc:	tst	r3, #2
   1aae0:	beq	1aab0 <__assert_fail@plt+0x9aec>
   1aae4:	ldm	r5, {r1, r2, r3}
   1aae8:	mov	r0, r4
   1aaec:	bl	19434 <__assert_fail@plt+0x8470>
   1aaf0:	mov	r1, r0
   1aaf4:	mov	r0, r7
   1aaf8:	bl	19674 <__assert_fail@plt+0x86b0>
   1aafc:	b	1aab0 <__assert_fail@plt+0x9aec>
   1ab00:	ldr	r3, [pc, #72]	; 1ab50 <__assert_fail@plt+0x9b8c>
   1ab04:	ldr	r3, [r8, r3]
   1ab08:	ldr	r3, [r3]
   1ab0c:	tst	r3, #1
   1ab10:	beq	1aa94 <__assert_fail@plt+0x9ad0>
   1ab14:	ldm	r5, {r1, r2, r3}
   1ab18:	mov	r0, r4
   1ab1c:	bl	19434 <__assert_fail@plt+0x8470>
   1ab20:	mov	r1, r0
   1ab24:	mov	r0, r7
   1ab28:	bl	19674 <__assert_fail@plt+0x86b0>
   1ab2c:	b	1aa94 <__assert_fail@plt+0x9ad0>
   1ab30:	bl	10d9c <__stack_chk_fail@plt>
   1ab34:	andeq	ip, r1, r4, asr #9
   1ab38:	andeq	r0, r0, r4, lsl r1
   1ab3c:	andeq	sp, r1, r4, lsr #32
   1ab40:	andeq	sp, r1, ip, lsl r0
   1ab44:	andeq	ip, r1, ip, ror #31
   1ab48:	muleq	r0, r8, sl
   1ab4c:	andeq	r8, r0, r0, lsl r2
   1ab50:	andeq	r0, r0, r4, lsl #2
   1ab54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab58:	mov	r7, r2
   1ab5c:	ldr	r8, [pc, #348]	; 1acc0 <__assert_fail@plt+0x9cfc>
   1ab60:	ldr	ip, [pc, #348]	; 1acc4 <__assert_fail@plt+0x9d00>
   1ab64:	add	r8, pc, r8
   1ab68:	sub	sp, sp, #44	; 0x2c
   1ab6c:	ldr	r2, [r8, ip]
   1ab70:	ldr	r4, [r7, #44]	; 0x2c
   1ab74:	str	r2, [sp, #8]
   1ab78:	ldr	r2, [r2]
   1ab7c:	cmp	r4, #0
   1ab80:	mov	r9, r0
   1ab84:	mov	r5, r1
   1ab88:	mov	sl, r3
   1ab8c:	str	r2, [sp, #36]	; 0x24
   1ab90:	beq	1ac14 <__assert_fail@plt+0x9c50>
   1ab94:	ldr	r3, [r0, #12]
   1ab98:	add	r6, sp, #24
   1ab9c:	str	r3, [sp, #20]
   1aba0:	ldr	r3, [pc, #288]	; 1acc8 <__assert_fail@plt+0x9d04>
   1aba4:	add	r3, pc, r3
   1aba8:	str	r3, [sp, #16]
   1abac:	b	1abbc <__assert_fail@plt+0x9bf8>
   1abb0:	ldr	r4, [r4, #8]
   1abb4:	cmp	r4, #0
   1abb8:	beq	1ac0c <__assert_fail@plt+0x9c48>
   1abbc:	ldrb	r3, [r4]
   1abc0:	cmp	r3, #0
   1abc4:	bne	1abb0 <__assert_fail@plt+0x9bec>
   1abc8:	ldr	r1, [r4, #4]
   1abcc:	mov	r0, r5
   1abd0:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1abd4:	cmp	r0, #0
   1abd8:	beq	1ac6c <__assert_fail@plt+0x9ca8>
   1abdc:	ldr	r2, [pc, #232]	; 1accc <__assert_fail@plt+0x9d08>
   1abe0:	ldr	r1, [r5, #4]
   1abe4:	ldr	r3, [r4, #4]
   1abe8:	ldr	r2, [r8, r2]
   1abec:	str	r1, [sp]
   1abf0:	mov	r1, #1
   1abf4:	ldr	r0, [r2]
   1abf8:	ldr	r2, [sp, #16]
   1abfc:	bl	10ee0 <__fprintf_chk@plt>
   1ac00:	ldr	r4, [r4, #8]
   1ac04:	cmp	r4, #0
   1ac08:	bne	1abbc <__assert_fail@plt+0x9bf8>
   1ac0c:	cmp	sl, #0
   1ac10:	bne	1acac <__assert_fail@plt+0x9ce8>
   1ac14:	ldr	r4, [r7, #12]
   1ac18:	cmp	r4, #0
   1ac1c:	beq	1ac38 <__assert_fail@plt+0x9c74>
   1ac20:	ldrb	r3, [r4]
   1ac24:	cmp	r3, #0
   1ac28:	beq	1ac54 <__assert_fail@plt+0x9c90>
   1ac2c:	ldr	r4, [r4, #20]
   1ac30:	cmp	r4, #0
   1ac34:	bne	1ac20 <__assert_fail@plt+0x9c5c>
   1ac38:	ldr	r3, [sp, #8]
   1ac3c:	ldr	r2, [sp, #36]	; 0x24
   1ac40:	ldr	r3, [r3]
   1ac44:	cmp	r2, r3
   1ac48:	bne	1acbc <__assert_fail@plt+0x9cf8>
   1ac4c:	add	sp, sp, #44	; 0x2c
   1ac50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac54:	mov	r3, sl
   1ac58:	mov	r2, r4
   1ac5c:	mov	r1, r5
   1ac60:	mov	r0, r9
   1ac64:	bl	1ab54 <__assert_fail@plt+0x9b90>
   1ac68:	b	1ac2c <__assert_fail@plt+0x9c68>
   1ac6c:	ldr	r1, [r7, #24]
   1ac70:	ldr	fp, [r4, #4]
   1ac74:	mov	r0, r1
   1ac78:	str	r1, [sp, #12]
   1ac7c:	bl	10e74 <strlen@plt>
   1ac80:	ldr	r1, [sp, #12]
   1ac84:	add	r2, r0, #1
   1ac88:	mov	r0, r6
   1ac8c:	bl	1585c <__assert_fail@plt+0x4898>
   1ac90:	ldm	r6, {r1, r2, r3}
   1ac94:	mov	r0, fp
   1ac98:	bl	19434 <__assert_fail@plt+0x8470>
   1ac9c:	mov	r1, r0
   1aca0:	mov	r0, r5
   1aca4:	bl	19674 <__assert_fail@plt+0x86b0>
   1aca8:	b	1abb0 <__assert_fail@plt+0x9bec>
   1acac:	ldr	r0, [sp, #20]
   1acb0:	mov	r1, r7
   1acb4:	bl	1a9b0 <__assert_fail@plt+0x99ec>
   1acb8:	b	1ac14 <__assert_fail@plt+0x9c50>
   1acbc:	bl	10d9c <__stack_chk_fail@plt>
   1acc0:	andeq	ip, r1, r0, lsr #6
   1acc4:	andeq	r0, r0, r4, lsl r1
   1acc8:	andeq	r9, r0, ip, lsr fp
   1accc:	andeq	r0, r0, ip, lsr r1
   1acd0:	ldr	r1, [pc, #76]	; 1ad24 <__assert_fail@plt+0x9d60>
   1acd4:	push	{r4, lr}
   1acd8:	add	r1, pc, r1
   1acdc:	bl	1a120 <__assert_fail@plt+0x915c>
   1ace0:	cmp	r0, #0
   1ace4:	beq	1ad14 <__assert_fail@plt+0x9d50>
   1ace8:	ldr	r0, [r0, #12]
   1acec:	cmp	r0, #0
   1acf0:	beq	1ad14 <__assert_fail@plt+0x9d50>
   1acf4:	ldr	r1, [pc, #44]	; 1ad28 <__assert_fail@plt+0x9d64>
   1acf8:	add	r1, pc, r1
   1acfc:	bl	19cd0 <__assert_fail@plt+0x8d0c>
   1ad00:	subs	r3, r0, #0
   1ad04:	beq	1ad14 <__assert_fail@plt+0x9d50>
   1ad08:	ldr	r3, [r3, #8]
   1ad0c:	cmp	r3, #4
   1ad10:	beq	1ad1c <__assert_fail@plt+0x9d58>
   1ad14:	mov	r0, #0
   1ad18:	pop	{r4, pc}
   1ad1c:	pop	{r4, lr}
   1ad20:	b	19dec <__assert_fail@plt+0x8e28>
   1ad24:	andeq	r9, r0, r0, lsr sl
   1ad28:	strdeq	r8, [r0], -ip
   1ad2c:	push	{r4, r5, r6, r7, r8, lr}
   1ad30:	mov	r7, r0
   1ad34:	ldr	r4, [r0, #4]
   1ad38:	cmp	r4, #0
   1ad3c:	beq	1ade0 <__assert_fail@plt+0x9e1c>
   1ad40:	mov	r3, r4
   1ad44:	mov	r6, #0
   1ad48:	b	1ad50 <__assert_fail@plt+0x9d8c>
   1ad4c:	mov	r6, r8
   1ad50:	ldr	r3, [r3, #16]
   1ad54:	add	r8, r6, #1
   1ad58:	cmp	r3, #0
   1ad5c:	bne	1ad4c <__assert_fail@plt+0x9d88>
   1ad60:	lsl	r0, r8, #2
   1ad64:	bl	10dfc <malloc@plt>
   1ad68:	subs	r5, r0, #0
   1ad6c:	subne	r3, r5, #4
   1ad70:	beq	1adec <__assert_fail@plt+0x9e28>
   1ad74:	str	r4, [r3, #4]!
   1ad78:	ldr	r4, [r4, #16]
   1ad7c:	cmp	r4, #0
   1ad80:	bne	1ad74 <__assert_fail@plt+0x9db0>
   1ad84:	ldr	r3, [pc, #108]	; 1adf8 <__assert_fail@plt+0x9e34>
   1ad88:	mov	r2, #4
   1ad8c:	mov	r1, r8
   1ad90:	add	r3, pc, r3
   1ad94:	mov	r0, r5
   1ad98:	bl	10f40 <qsort@plt>
   1ad9c:	ldr	r2, [r5]
   1ada0:	cmp	r6, #0
   1ada4:	str	r2, [r7, #4]
   1ada8:	beq	1adcc <__assert_fail@plt+0x9e08>
   1adac:	mov	r3, r5
   1adb0:	add	r0, r5, r6, lsl #2
   1adb4:	b	1adbc <__assert_fail@plt+0x9df8>
   1adb8:	ldr	r2, [r3]
   1adbc:	ldr	r1, [r3, #4]!
   1adc0:	cmp	r0, r3
   1adc4:	str	r1, [r2, #16]
   1adc8:	bne	1adb8 <__assert_fail@plt+0x9df4>
   1adcc:	ldr	r3, [r5, r6, lsl #2]
   1add0:	mov	r2, #0
   1add4:	mov	r0, r5
   1add8:	str	r2, [r3, #16]
   1addc:	bl	10d60 <free@plt>
   1ade0:	ldr	r0, [r7, #12]
   1ade4:	pop	{r4, r5, r6, r7, r8, lr}
   1ade8:	b	191f0 <__assert_fail@plt+0x822c>
   1adec:	ldr	r0, [pc, #8]	; 1adfc <__assert_fail@plt+0x9e38>
   1adf0:	add	r0, pc, r0
   1adf4:	bl	1910c <__assert_fail@plt+0x8148>
   1adf8:			; <UNDEFINED> instruction: 0xffffe2f4
   1adfc:	andeq	r8, r0, r4, lsl #16
   1ae00:	push	{r4, r5, r6, r7, r8, lr}
   1ae04:	mov	r4, r0
   1ae08:	ldr	r5, [r0, #12]
   1ae0c:	mov	r7, r1
   1ae10:	mov	r6, r2
   1ae14:	ldr	r3, [r5, #44]	; 0x2c
   1ae18:	cmp	r3, #0
   1ae1c:	beq	1ae44 <__assert_fail@plt+0x9e80>
   1ae20:	mov	r1, r7
   1ae24:	mov	r0, r5
   1ae28:	bl	1a0e0 <__assert_fail@plt+0x911c>
   1ae2c:	mov	r3, r6
   1ae30:	ldr	r2, [r4, #12]
   1ae34:	mov	r1, r0
   1ae38:	mov	r0, r4
   1ae3c:	pop	{r4, r5, r6, r7, r8, lr}
   1ae40:	b	1ab54 <__assert_fail@plt+0x9b90>
   1ae44:	ldr	r1, [r5, #12]
   1ae48:	bl	19188 <__assert_fail@plt+0x81c4>
   1ae4c:	cmp	r0, #0
   1ae50:	bne	1ae20 <__assert_fail@plt+0x9e5c>
   1ae54:	pop	{r4, r5, r6, r7, r8, pc}
   1ae58:	ldr	r3, [r0, #12]
   1ae5c:	push	{r4, r5, r6, lr}
   1ae60:	add	r2, r3, #12
   1ae64:	mov	r5, r1
   1ae68:	ldr	r1, [r3, #8]
   1ae6c:	mov	r4, r0
   1ae70:	bl	1a408 <__assert_fail@plt+0x9444>
   1ae74:	cmp	r0, #0
   1ae78:	popeq	{r4, r5, r6, pc}
   1ae7c:	mov	r1, r5
   1ae80:	ldr	r0, [r4, #12]
   1ae84:	bl	1a0e0 <__assert_fail@plt+0x911c>
   1ae88:	ldr	r2, [r4, #12]
   1ae8c:	mov	r1, r0
   1ae90:	mov	r0, r4
   1ae94:	pop	{r4, r5, r6, lr}
   1ae98:	b	1a4d0 <__assert_fail@plt+0x950c>
   1ae9c:	ldr	r3, [r0, #12]
   1aea0:	push	{r4, r5, r6, lr}
   1aea4:	add	r2, r3, #12
   1aea8:	mov	r5, r1
   1aeac:	ldr	r1, [r3, #8]
   1aeb0:	mov	r4, r0
   1aeb4:	bl	1a6a8 <__assert_fail@plt+0x96e4>
   1aeb8:	cmp	r0, #0
   1aebc:	popeq	{r4, r5, r6, pc}
   1aec0:	mov	r1, r5
   1aec4:	ldr	r0, [r4, #12]
   1aec8:	bl	1a0e0 <__assert_fail@plt+0x911c>
   1aecc:	ldr	r2, [r4, #12]
   1aed0:	mov	r1, r0
   1aed4:	mov	r0, r4
   1aed8:	pop	{r4, r5, r6, lr}
   1aedc:	b	1a770 <__assert_fail@plt+0x97ac>
   1aee0:	cmp	r0, #0
   1aee4:	push	{r4, r5, r6, lr}
   1aee8:	mov	r3, r1
   1aeec:	mov	r6, r2
   1aef0:	beq	1af00 <__assert_fail@plt+0x9f3c>
   1aef4:	ldrb	r2, [r1]
   1aef8:	cmp	r2, #47	; 0x2f
   1aefc:	bne	1af34 <__assert_fail@plt+0x9f70>
   1af00:	mov	r0, r3
   1af04:	bl	1c550 <__assert_fail@plt+0xb58c>
   1af08:	mov	r4, r0
   1af0c:	ldr	r1, [pc, #60]	; 1af50 <__assert_fail@plt+0x9f8c>
   1af10:	mov	r0, r4
   1af14:	add	r1, pc, r1
   1af18:	bl	10d3c <fopen@plt>
   1af1c:	cmp	r0, #0
   1af20:	mov	r5, r0
   1af24:	str	r0, [r6]
   1af28:	beq	1af40 <__assert_fail@plt+0x9f7c>
   1af2c:	mov	r0, r4
   1af30:	pop	{r4, r5, r6, pc}
   1af34:	bl	1c660 <__assert_fail@plt+0xb69c>
   1af38:	mov	r4, r0
   1af3c:	b	1af0c <__assert_fail@plt+0x9f48>
   1af40:	mov	r0, r4
   1af44:	bl	10d60 <free@plt>
   1af48:	mov	r4, r5
   1af4c:	b	1af2c <__assert_fail@plt+0x9f68>
   1af50:	andeq	r9, r0, r8, asr #11
   1af54:	ldr	ip, [pc, #100]	; 1afc0 <__assert_fail@plt+0x9ffc>
   1af58:	push	{r0, r1, r2, r3}
   1af5c:	add	ip, pc, ip
   1af60:	ldr	r2, [pc, #92]	; 1afc4 <__assert_fail@plt+0xa000>
   1af64:	push	{lr}		; (str lr, [sp, #-4]!)
   1af68:	sub	sp, sp, #12
   1af6c:	ldr	r2, [ip, r2]
   1af70:	ldr	r3, [pc, #80]	; 1afc8 <__assert_fail@plt+0xa004>
   1af74:	add	r1, sp, #20
   1af78:	str	r1, [sp]
   1af7c:	ldr	r1, [r2]
   1af80:	ldr	r0, [pc, #68]	; 1afcc <__assert_fail@plt+0xa008>
   1af84:	str	r1, [sp, #4]
   1af88:	ldr	r4, [ip, r3]
   1af8c:	ldr	r5, [sp, #16]
   1af90:	mov	r2, #13
   1af94:	mov	r1, #1
   1af98:	ldr	r3, [r4]
   1af9c:	add	r0, pc, r0
   1afa0:	bl	10dcc <fwrite@plt>
   1afa4:	ldr	r0, [r4]
   1afa8:	mov	r2, r5
   1afac:	ldr	r3, [sp]
   1afb0:	mov	r1, #1
   1afb4:	bl	10e20 <__vfprintf_chk@plt>
   1afb8:	mov	r0, #1
   1afbc:	bl	10e5c <exit@plt>
   1afc0:	andeq	fp, r1, r8, lsr #30
   1afc4:	andeq	r0, r0, r4, lsl r1
   1afc8:	andeq	r0, r0, ip, lsr r1
   1afcc:	andeq	r6, r0, ip, lsr #13
   1afd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1afd4:	mov	r8, r1
   1afd8:	ldr	r4, [pc, #320]	; 1b120 <__assert_fail@plt+0xa15c>
   1afdc:	ldr	r3, [pc, #320]	; 1b124 <__assert_fail@plt+0xa160>
   1afe0:	add	r4, pc, r4
   1afe4:	ldr	r1, [pc, #316]	; 1b128 <__assert_fail@plt+0xa164>
   1afe8:	ldr	r7, [r4, r3]
   1afec:	sub	sp, sp, #8
   1aff0:	add	r1, pc, r1
   1aff4:	ldr	r3, [r7]
   1aff8:	mov	r9, r0
   1affc:	str	r3, [sp, #4]
   1b000:	bl	10d24 <strcmp@plt>
   1b004:	cmp	r0, #0
   1b008:	bne	1b07c <__assert_fail@plt+0xa0b8>
   1b00c:	ldr	r3, [pc, #280]	; 1b12c <__assert_fail@plt+0xa168>
   1b010:	ldr	r0, [pc, #280]	; 1b130 <__assert_fail@plt+0xa16c>
   1b014:	ldr	r3, [r4, r3]
   1b018:	add	r0, pc, r0
   1b01c:	ldr	r3, [r3]
   1b020:	str	r3, [sp]
   1b024:	bl	1c550 <__assert_fail@plt+0xb58c>
   1b028:	mov	r6, r0
   1b02c:	ldr	r3, [pc, #256]	; 1b134 <__assert_fail@plt+0xa170>
   1b030:	ldr	r3, [r4, r3]
   1b034:	ldr	r0, [r3]
   1b038:	cmp	r0, #0
   1b03c:	beq	1b054 <__assert_fail@plt+0xa090>
   1b040:	ldr	r2, [pc, #240]	; 1b138 <__assert_fail@plt+0xa174>
   1b044:	mov	r3, r6
   1b048:	add	r2, pc, r2
   1b04c:	mov	r1, #1
   1b050:	bl	10ee0 <__fprintf_chk@plt>
   1b054:	cmp	r8, #0
   1b058:	strne	r6, [r8]
   1b05c:	beq	1b110 <__assert_fail@plt+0xa14c>
   1b060:	ldr	r2, [sp, #4]
   1b064:	ldr	r3, [r7]
   1b068:	ldr	r0, [sp]
   1b06c:	cmp	r2, r3
   1b070:	bne	1b11c <__assert_fail@plt+0xa158>
   1b074:	add	sp, sp, #8
   1b078:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b07c:	ldr	r3, [pc, #184]	; 1b13c <__assert_fail@plt+0xa178>
   1b080:	mov	sl, sp
   1b084:	mov	r2, sl
   1b088:	ldr	r3, [r4, r3]
   1b08c:	mov	r1, r9
   1b090:	ldr	r0, [r3]
   1b094:	cmp	r0, #0
   1b098:	ldrne	r0, [r0, #8]
   1b09c:	bl	1aee0 <__assert_fail@plt+0x9f1c>
   1b0a0:	ldr	r3, [pc, #152]	; 1b140 <__assert_fail@plt+0xa17c>
   1b0a4:	ldr	r2, [sp]
   1b0a8:	add	r3, pc, r3
   1b0ac:	cmp	r2, #0
   1b0b0:	ldr	r5, [r3]
   1b0b4:	mov	r6, r0
   1b0b8:	bne	1b02c <__assert_fail@plt+0xa068>
   1b0bc:	cmp	r5, #0
   1b0c0:	beq	1b0f0 <__assert_fail@plt+0xa12c>
   1b0c4:	ldr	r0, [r5, #4]
   1b0c8:	mov	r2, sl
   1b0cc:	mov	r1, r9
   1b0d0:	bl	1aee0 <__assert_fail@plt+0x9f1c>
   1b0d4:	ldr	r3, [sp]
   1b0d8:	ldr	r5, [r5]
   1b0dc:	cmp	r3, #0
   1b0e0:	mov	r6, r0
   1b0e4:	bne	1b02c <__assert_fail@plt+0xa068>
   1b0e8:	cmp	r5, #0
   1b0ec:	bne	1b0c4 <__assert_fail@plt+0xa100>
   1b0f0:	bl	10e8c <__errno_location@plt>
   1b0f4:	ldr	r0, [r0]
   1b0f8:	bl	10e14 <strerror@plt>
   1b0fc:	mov	r1, r9
   1b100:	mov	r2, r0
   1b104:	ldr	r0, [pc, #56]	; 1b144 <__assert_fail@plt+0xa180>
   1b108:	add	r0, pc, r0
   1b10c:	bl	1af54 <__assert_fail@plt+0x9f90>
   1b110:	mov	r0, r6
   1b114:	bl	10d60 <free@plt>
   1b118:	b	1b060 <__assert_fail@plt+0xa09c>
   1b11c:	bl	10d9c <__stack_chk_fail@plt>
   1b120:	andeq	fp, r1, r4, lsr #29
   1b124:	andeq	r0, r0, r4, lsl r1
   1b128:	andeq	r7, r0, ip, lsr #20
   1b12c:	andeq	r0, r0, r4, asr r1
   1b130:	andeq	r9, r0, r4, lsl #14
   1b134:	andeq	r0, r0, ip, lsr #2
   1b138:	ldrdeq	r9, [r0], -ip
   1b13c:	andeq	r0, r0, r0, lsr r1
   1b140:	muleq	r1, r0, r9
   1b144:	andeq	r9, r0, r0, lsr #12
   1b148:	ldr	r2, [pc, #196]	; 1b214 <__assert_fail@plt+0xa250>
   1b14c:	push	{r4, r5, r6, r7, r8, lr}
   1b150:	add	r2, pc, r2
   1b154:	ldr	r7, [pc, #188]	; 1b218 <__assert_fail@plt+0xa254>
   1b158:	ldr	r3, [r2, #4]
   1b15c:	add	r7, pc, r7
   1b160:	cmp	r3, #99	; 0x63
   1b164:	add	r3, r3, #1
   1b168:	str	r3, [r2, #4]
   1b16c:	bgt	1b208 <__assert_fail@plt+0xa244>
   1b170:	mov	r5, r0
   1b174:	mov	r0, #24
   1b178:	bl	10dfc <malloc@plt>
   1b17c:	subs	r4, r0, #0
   1b180:	beq	1b1fc <__assert_fail@plt+0xa238>
   1b184:	mov	r0, r5
   1b188:	add	r1, r4, #4
   1b18c:	bl	1afd0 <__assert_fail@plt+0xa00c>
   1b190:	ldr	r6, [r4, #4]
   1b194:	mov	r1, #47	; 0x2f
   1b198:	str	r0, [r4]
   1b19c:	mov	r0, r6
   1b1a0:	bl	10f1c <strrchr@plt>
   1b1a4:	subs	r5, r0, #0
   1b1a8:	beq	1b1d4 <__assert_fail@plt+0xa210>
   1b1ac:	sub	r8, r5, r6
   1b1b0:	add	r0, r8, #1
   1b1b4:	bl	10dfc <malloc@plt>
   1b1b8:	subs	r5, r0, #0
   1b1bc:	beq	1b1fc <__assert_fail@plt+0xa238>
   1b1c0:	mov	r1, r6
   1b1c4:	mov	r2, r8
   1b1c8:	bl	10d84 <memcpy@plt>
   1b1cc:	mov	r3, #0
   1b1d0:	strb	r3, [r5, r8]
   1b1d4:	ldr	r3, [pc, #64]	; 1b21c <__assert_fail@plt+0xa258>
   1b1d8:	str	r5, [r4, #8]
   1b1dc:	mov	r2, #1
   1b1e0:	ldr	r3, [r7, r3]
   1b1e4:	str	r2, [r4, #12]
   1b1e8:	str	r2, [r4, #16]
   1b1ec:	ldr	r2, [r3]
   1b1f0:	str	r4, [r3]
   1b1f4:	str	r2, [r4, #20]
   1b1f8:	pop	{r4, r5, r6, r7, r8, pc}
   1b1fc:	ldr	r0, [pc, #28]	; 1b220 <__assert_fail@plt+0xa25c>
   1b200:	add	r0, pc, r0
   1b204:	bl	1af54 <__assert_fail@plt+0x9f90>
   1b208:	ldr	r0, [pc, #20]	; 1b224 <__assert_fail@plt+0xa260>
   1b20c:	add	r0, pc, r0
   1b210:	bl	1af54 <__assert_fail@plt+0x9f90>
   1b214:	andeq	ip, r1, r8, ror #17
   1b218:	andeq	fp, r1, r8, lsr #26
   1b21c:	andeq	r0, r0, r0, lsr r1
   1b220:	strdeq	r8, [r0], -r4
   1b224:	andeq	r9, r0, r4, lsr r5
   1b228:	ldr	r3, [pc, #132]	; 1b2b4 <__assert_fail@plt+0xa2f0>
   1b22c:	ldr	r2, [pc, #132]	; 1b2b8 <__assert_fail@plt+0xa2f4>
   1b230:	add	r3, pc, r3
   1b234:	push	{r4, r5, r6, lr}
   1b238:	ldr	r5, [r3, r2]
   1b23c:	ldr	r4, [r5]
   1b240:	cmp	r4, #0
   1b244:	beq	1b270 <__assert_fail@plt+0xa2ac>
   1b248:	ldr	r3, [r4, #20]
   1b24c:	ldr	r0, [r4]
   1b250:	str	r3, [r5]
   1b254:	bl	10ef8 <fclose@plt>
   1b258:	cmp	r0, #0
   1b25c:	bne	1b290 <__assert_fail@plt+0xa2cc>
   1b260:	ldr	r0, [r5]
   1b264:	adds	r0, r0, #0
   1b268:	movne	r0, #1
   1b26c:	pop	{r4, r5, r6, pc}
   1b270:	ldr	r3, [pc, #68]	; 1b2bc <__assert_fail@plt+0xa2f8>
   1b274:	ldr	r1, [pc, #68]	; 1b2c0 <__assert_fail@plt+0xa2fc>
   1b278:	ldr	r0, [pc, #68]	; 1b2c4 <__assert_fail@plt+0xa300>
   1b27c:	add	r3, pc, r3
   1b280:	mov	r2, #166	; 0xa6
   1b284:	add	r1, pc, r1
   1b288:	add	r0, pc, r0
   1b28c:	bl	10fc4 <__assert_fail@plt>
   1b290:	bl	10e8c <__errno_location@plt>
   1b294:	ldr	r4, [r4, #4]
   1b298:	ldr	r0, [r0]
   1b29c:	bl	10e14 <strerror@plt>
   1b2a0:	mov	r1, r4
   1b2a4:	mov	r2, r0
   1b2a8:	ldr	r0, [pc, #24]	; 1b2c8 <__assert_fail@plt+0xa304>
   1b2ac:	add	r0, pc, r0
   1b2b0:	bl	1af54 <__assert_fail@plt+0x9f90>
   1b2b4:	andeq	fp, r1, r4, asr ip
   1b2b8:	andeq	r0, r0, r0, lsr r1
   1b2bc:	muleq	r0, r4, r4
   1b2c0:	ldrdeq	r9, [r0], -r8
   1b2c4:	andeq	r9, r0, r0, ror #9
   1b2c8:	andeq	r9, r0, r4, asr #9
   1b2cc:	push	{r4, r5, r6, lr}
   1b2d0:	mov	r5, r0
   1b2d4:	mov	r0, #8
   1b2d8:	bl	10dfc <malloc@plt>
   1b2dc:	subs	r4, r0, #0
   1b2e0:	beq	1b320 <__assert_fail@plt+0xa35c>
   1b2e4:	mov	r3, #0
   1b2e8:	str	r3, [r4]
   1b2ec:	mov	r0, r5
   1b2f0:	bl	1c550 <__assert_fail@plt+0xb58c>
   1b2f4:	ldr	r2, [pc, #48]	; 1b32c <__assert_fail@plt+0xa368>
   1b2f8:	add	r2, pc, r2
   1b2fc:	ldr	r3, [r2, #8]
   1b300:	cmp	r3, #0
   1b304:	streq	r4, [r2]
   1b308:	str	r0, [r4, #4]
   1b30c:	strne	r4, [r3]
   1b310:	ldr	r3, [pc, #24]	; 1b330 <__assert_fail@plt+0xa36c>
   1b314:	add	r3, pc, r3
   1b318:	str	r4, [r3, #8]
   1b31c:	pop	{r4, r5, r6, pc}
   1b320:	ldr	r0, [pc, #12]	; 1b334 <__assert_fail@plt+0xa370>
   1b324:	add	r0, pc, r0
   1b328:	bl	1af54 <__assert_fail@plt+0x9f90>
   1b32c:	andeq	ip, r1, r0, asr #14
   1b330:	andeq	ip, r1, r4, lsr #14
   1b334:	ldrdeq	r8, [r0], -r0
   1b338:	ldr	r3, [pc, #128]	; 1b3c0 <__assert_fail@plt+0xa3fc>
   1b33c:	ldr	ip, [pc, #128]	; 1b3c4 <__assert_fail@plt+0xa400>
   1b340:	add	r3, pc, r3
   1b344:	push	{r4, r5, lr}
   1b348:	cmp	r2, #0
   1b34c:	ldr	r4, [r3, ip]
   1b350:	ldr	ip, [r4]
   1b354:	str	ip, [r0, #16]
   1b358:	ldr	lr, [ip, #12]
   1b35c:	ldr	r3, [ip, #16]
   1b360:	str	lr, [r0]
   1b364:	str	r3, [r0, #4]
   1b368:	ble	1b3b8 <__assert_fail@plt+0xa3f4>
   1b36c:	sub	r1, r1, #1
   1b370:	add	r2, r1, r2
   1b374:	mov	r5, #1
   1b378:	ldrb	r3, [r1, #1]!
   1b37c:	cmp	r3, #10
   1b380:	addeq	lr, lr, #1
   1b384:	ldrne	r3, [ip, #16]
   1b388:	streq	lr, [ip, #12]
   1b38c:	addne	r3, r3, #1
   1b390:	streq	r5, [ip, #16]
   1b394:	strne	r3, [ip, #16]
   1b398:	cmp	r1, r2
   1b39c:	bne	1b378 <__assert_fail@plt+0xa3b4>
   1b3a0:	ldr	r3, [r4]
   1b3a4:	ldr	r5, [r3, #12]
   1b3a8:	ldr	r3, [r3, #16]
   1b3ac:	str	r5, [r0, #8]
   1b3b0:	str	r3, [r0, #12]
   1b3b4:	pop	{r4, r5, pc}
   1b3b8:	mov	r5, lr
   1b3bc:	b	1b3ac <__assert_fail@plt+0xa3e8>
   1b3c0:	andeq	fp, r1, r4, asr #22
   1b3c4:	andeq	r0, r0, r0, lsr r1
   1b3c8:	push	{r4, lr}
   1b3cc:	mov	r4, r0
   1b3d0:	mov	r0, #20
   1b3d4:	bl	10dfc <malloc@plt>
   1b3d8:	subs	lr, r0, #0
   1b3dc:	beq	1b408 <__assert_fail@plt+0xa444>
   1b3e0:	ldr	r0, [r4]
   1b3e4:	ldr	r1, [r4, #4]
   1b3e8:	ldr	r2, [r4, #8]
   1b3ec:	ldr	r3, [r4, #12]
   1b3f0:	mov	ip, lr
   1b3f4:	stmia	ip!, {r0, r1, r2, r3}
   1b3f8:	ldr	r0, [r4, #16]
   1b3fc:	str	r0, [ip]
   1b400:	mov	r0, lr
   1b404:	pop	{r4, pc}
   1b408:	ldr	r0, [pc, #4]	; 1b414 <__assert_fail@plt+0xa450>
   1b40c:	add	r0, pc, r0
   1b410:	bl	1af54 <__assert_fail@plt+0x9f90>
   1b414:	andeq	r8, r0, r8, ror #3
   1b418:	ldr	r3, [pc, #208]	; 1b4f0 <__assert_fail@plt+0xa52c>
   1b41c:	ldr	r2, [pc, #208]	; 1b4f4 <__assert_fail@plt+0xa530>
   1b420:	add	r3, pc, r3
   1b424:	push	{r4, lr}
   1b428:	sub	sp, sp, #24
   1b42c:	ldr	r4, [r3, r2]
   1b430:	ldr	r3, [r0, #16]
   1b434:	ldr	r2, [r4]
   1b438:	cmp	r3, #0
   1b43c:	str	r2, [sp, #20]
   1b440:	beq	1b4c8 <__assert_fail@plt+0xa504>
   1b444:	ldr	r2, [r3, #4]
   1b448:	cmp	r2, #0
   1b44c:	beq	1b4a0 <__assert_fail@plt+0xa4dc>
   1b450:	ldmib	r0, {r1, ip}
   1b454:	ldr	r3, [r0]
   1b458:	ldr	r0, [r0, #12]
   1b45c:	cmp	r3, ip
   1b460:	bne	1b4ac <__assert_fail@plt+0xa4e8>
   1b464:	cmp	r1, r0
   1b468:	beq	1b4d4 <__assert_fail@plt+0xa510>
   1b46c:	str	r1, [sp]
   1b470:	ldr	r1, [pc, #128]	; 1b4f8 <__assert_fail@plt+0xa534>
   1b474:	str	r0, [sp, #4]
   1b478:	add	r1, pc, r1
   1b47c:	add	r0, sp, #16
   1b480:	bl	1c594 <__assert_fail@plt+0xb5d0>
   1b484:	ldr	r2, [sp, #20]
   1b488:	ldr	r3, [r4]
   1b48c:	ldr	r0, [sp, #16]
   1b490:	cmp	r2, r3
   1b494:	bne	1b4ec <__assert_fail@plt+0xa528>
   1b498:	add	sp, sp, #24
   1b49c:	pop	{r4, pc}
   1b4a0:	ldr	r2, [pc, #84]	; 1b4fc <__assert_fail@plt+0xa538>
   1b4a4:	add	r2, pc, r2
   1b4a8:	b	1b450 <__assert_fail@plt+0xa48c>
   1b4ac:	stm	sp, {r1, ip}
   1b4b0:	ldr	r1, [pc, #72]	; 1b500 <__assert_fail@plt+0xa53c>
   1b4b4:	str	r0, [sp, #8]
   1b4b8:	add	r1, pc, r1
   1b4bc:	add	r0, sp, #16
   1b4c0:	bl	1c594 <__assert_fail@plt+0xb5d0>
   1b4c4:	b	1b484 <__assert_fail@plt+0xa4c0>
   1b4c8:	ldr	r2, [pc, #52]	; 1b504 <__assert_fail@plt+0xa540>
   1b4cc:	add	r2, pc, r2
   1b4d0:	b	1b450 <__assert_fail@plt+0xa48c>
   1b4d4:	str	r1, [sp]
   1b4d8:	ldr	r1, [pc, #40]	; 1b508 <__assert_fail@plt+0xa544>
   1b4dc:	add	r0, sp, #16
   1b4e0:	add	r1, pc, r1
   1b4e4:	bl	1c594 <__assert_fail@plt+0xb5d0>
   1b4e8:	b	1b484 <__assert_fail@plt+0xa4c0>
   1b4ec:	bl	10d9c <__stack_chk_fail@plt>
   1b4f0:	andeq	fp, r1, r4, ror #20
   1b4f4:	andeq	r0, r0, r4, lsl r1
   1b4f8:	andeq	r9, r0, ip, lsr #6
   1b4fc:	andeq	r9, r0, r4, ror #5
   1b500:	ldrdeq	r9, [r0], -ip
   1b504:			; <UNDEFINED> instruction: 0x000092bc
   1b508:	ldrdeq	r9, [r0], -r0
   1b50c:	push	{r4, r5, r6, r7, r8, lr}
   1b510:	sub	sp, sp, #8
   1b514:	mov	r8, r1
   1b518:	mov	r6, r2
   1b51c:	mov	r7, r3
   1b520:	bl	1b418 <__assert_fail@plt+0xa454>
   1b524:	ldr	r4, [pc, #92]	; 1b588 <__assert_fail@plt+0xa5c4>
   1b528:	ldr	r2, [pc, #92]	; 1b58c <__assert_fail@plt+0xa5c8>
   1b52c:	add	r4, pc, r4
   1b530:	mov	ip, r4
   1b534:	mov	r3, r8
   1b538:	add	r2, pc, r2
   1b53c:	mov	r1, #1
   1b540:	mov	r5, r0
   1b544:	ldr	r0, [pc, #68]	; 1b590 <__assert_fail@plt+0xa5cc>
   1b548:	ldr	r4, [r4, r0]
   1b54c:	str	r5, [sp]
   1b550:	ldr	r0, [r4]
   1b554:	bl	10ee0 <__fprintf_chk@plt>
   1b558:	mov	r3, r7
   1b55c:	mov	r2, r6
   1b560:	ldr	r0, [r4]
   1b564:	mov	r1, #1
   1b568:	bl	10e20 <__vfprintf_chk@plt>
   1b56c:	ldr	r1, [r4]
   1b570:	mov	r0, #10
   1b574:	bl	10f28 <fputc@plt>
   1b578:	mov	r0, r5
   1b57c:	add	sp, sp, #8
   1b580:	pop	{r4, r5, r6, r7, r8, lr}
   1b584:	b	10d60 <free@plt>
   1b588:	andeq	fp, r1, r8, asr r9
   1b58c:	andeq	r9, r0, r4, lsl #5
   1b590:	andeq	r0, r0, ip, lsr r1
   1b594:	push	{r2, r3}
   1b598:	ldr	r2, [pc, #80]	; 1b5f0 <__assert_fail@plt+0xa62c>
   1b59c:	ldr	ip, [pc, #80]	; 1b5f4 <__assert_fail@plt+0xa630>
   1b5a0:	add	r2, pc, r2
   1b5a4:	push	{r4, lr}
   1b5a8:	sub	sp, sp, #8
   1b5ac:	ldr	r4, [r2, ip]
   1b5b0:	add	lr, sp, #20
   1b5b4:	mov	r3, lr
   1b5b8:	ldr	ip, [r4]
   1b5bc:	ldr	r2, [sp, #16]
   1b5c0:	str	lr, [sp]
   1b5c4:	str	ip, [sp, #4]
   1b5c8:	bl	1b50c <__assert_fail@plt+0xa548>
   1b5cc:	ldr	r2, [sp, #4]
   1b5d0:	ldr	r3, [r4]
   1b5d4:	cmp	r2, r3
   1b5d8:	bne	1b5ec <__assert_fail@plt+0xa628>
   1b5dc:	add	sp, sp, #8
   1b5e0:	pop	{r4, lr}
   1b5e4:	add	sp, sp, #8
   1b5e8:	bx	lr
   1b5ec:	bl	10d9c <__stack_chk_fail@plt>
   1b5f0:	andeq	fp, r1, r4, ror #17
   1b5f4:	andeq	r0, r0, r4, lsl r1
   1b5f8:	ldr	r3, [pc, #24]	; 1b618 <__assert_fail@plt+0xa654>
   1b5fc:	ldr	r2, [pc, #24]	; 1b61c <__assert_fail@plt+0xa658>
   1b600:	add	r3, pc, r3
   1b604:	ldr	r3, [r3, r2]
   1b608:	ldr	r3, [r3]
   1b60c:	str	r0, [r3, #4]
   1b610:	str	r1, [r3, #12]
   1b614:	bx	lr
   1b618:	andeq	fp, r1, r4, lsl #17
   1b61c:	andeq	r0, r0, r0, lsr r1
   1b620:	ldr	ip, [pc, #100]	; 1b68c <__assert_fail@plt+0xa6c8>
   1b624:	push	{r0, r1, r2, r3}
   1b628:	add	ip, pc, ip
   1b62c:	ldr	r2, [pc, #92]	; 1b690 <__assert_fail@plt+0xa6cc>
   1b630:	push	{lr}		; (str lr, [sp, #-4]!)
   1b634:	sub	sp, sp, #12
   1b638:	ldr	r2, [ip, r2]
   1b63c:	ldr	r3, [pc, #80]	; 1b694 <__assert_fail@plt+0xa6d0>
   1b640:	add	r1, sp, #20
   1b644:	str	r1, [sp]
   1b648:	ldr	r1, [r2]
   1b64c:	ldr	r0, [pc, #68]	; 1b698 <__assert_fail@plt+0xa6d4>
   1b650:	str	r1, [sp, #4]
   1b654:	ldr	r4, [ip, r3]
   1b658:	ldr	r5, [sp, #16]
   1b65c:	mov	r2, #13
   1b660:	mov	r1, #1
   1b664:	ldr	r3, [r4]
   1b668:	add	r0, pc, r0
   1b66c:	bl	10dcc <fwrite@plt>
   1b670:	ldr	r0, [r4]
   1b674:	mov	r2, r5
   1b678:	ldr	r3, [sp]
   1b67c:	mov	r1, #1
   1b680:	bl	10e20 <__vfprintf_chk@plt>
   1b684:	mov	r0, #1
   1b688:	bl	10e5c <exit@plt>
   1b68c:	andeq	fp, r1, ip, asr r8
   1b690:	andeq	r0, r0, r4, lsl r1
   1b694:	andeq	r0, r0, ip, lsr r1
   1b698:	andeq	r5, r0, r0, ror #31
   1b69c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6a0:	mov	r4, r1
   1b6a4:	sub	sp, sp, #12
   1b6a8:	mov	r8, r0
   1b6ac:	mov	r1, r3
   1b6b0:	mov	r0, r2
   1b6b4:	mov	r7, r3
   1b6b8:	add	r6, r4, r2
   1b6bc:	bl	211b4 <__assert_fail@plt+0x101f0>
   1b6c0:	cmp	r1, #0
   1b6c4:	bne	1b7fc <__assert_fail@plt+0xa838>
   1b6c8:	cmp	r4, r6
   1b6cc:	bcs	1b77c <__assert_fail@plt+0xa7b8>
   1b6d0:	ldr	fp, [pc, #324]	; 1b81c <__assert_fail@plt+0xa858>
   1b6d4:	ldr	sl, [pc, #324]	; 1b820 <__assert_fail@plt+0xa85c>
   1b6d8:	ldr	r9, [pc, #324]	; 1b824 <__assert_fail@plt+0xa860>
   1b6dc:	sub	r5, r7, #1
   1b6e0:	add	fp, pc, fp
   1b6e4:	add	sl, pc, sl
   1b6e8:	add	r9, pc, r9
   1b6ec:	cmp	r5, #7
   1b6f0:	addls	pc, pc, r5, lsl #2
   1b6f4:	b	1b770 <__assert_fail@plt+0xa7ac>
   1b6f8:	b	1b7a8 <__assert_fail@plt+0xa7e4>
   1b6fc:	b	1b784 <__assert_fail@plt+0xa7c0>
   1b700:	b	1b770 <__assert_fail@plt+0xa7ac>
   1b704:	b	1b7c4 <__assert_fail@plt+0xa800>
   1b708:	b	1b770 <__assert_fail@plt+0xa7ac>
   1b70c:	b	1b770 <__assert_fail@plt+0xa7ac>
   1b710:	b	1b770 <__assert_fail@plt+0xa7ac>
   1b714:	b	1b718 <__assert_fail@plt+0xa754>
   1b718:	ldm	r4, {ip, lr}
   1b71c:	mov	r2, fp
   1b720:	lsl	r3, ip, #8
   1b724:	lsr	r1, ip, #8
   1b728:	and	r3, r3, #16711680	; 0xff0000
   1b72c:	orr	r3, r3, ip, lsl #24
   1b730:	and	r1, r1, #65280	; 0xff00
   1b734:	lsr	r0, lr, #8
   1b738:	orr	r3, r3, r1
   1b73c:	orr	r3, r3, ip, lsr #24
   1b740:	lsl	ip, lr, #24
   1b744:	uxtb	r0, r0
   1b748:	orr	ip, ip, lr, lsr #24
   1b74c:	lsr	lr, lr, #16
   1b750:	orr	ip, ip, r0, lsl #16
   1b754:	uxtb	r0, lr
   1b758:	str	r3, [sp, #4]
   1b75c:	orr	r0, ip, r0, lsl #8
   1b760:	str	r0, [sp]
   1b764:	mov	r1, #1
   1b768:	mov	r0, r8
   1b76c:	bl	10ee0 <__fprintf_chk@plt>
   1b770:	add	r4, r4, r7
   1b774:	cmp	r6, r4
   1b778:	bhi	1b6ec <__assert_fail@plt+0xa728>
   1b77c:	add	sp, sp, #12
   1b780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b784:	ldrh	ip, [r4]
   1b788:	mov	r2, r9
   1b78c:	mov	r1, #1
   1b790:	mov	r0, r8
   1b794:	lsr	r3, ip, #8
   1b798:	orr	r3, r3, ip, lsl #8
   1b79c:	uxth	r3, r3
   1b7a0:	bl	10ee0 <__fprintf_chk@plt>
   1b7a4:	b	1b770 <__assert_fail@plt+0xa7ac>
   1b7a8:	ldr	r2, [pc, #120]	; 1b828 <__assert_fail@plt+0xa864>
   1b7ac:	ldrb	r3, [r4]
   1b7b0:	add	r2, pc, r2
   1b7b4:	mov	r1, #1
   1b7b8:	mov	r0, r8
   1b7bc:	bl	10ee0 <__fprintf_chk@plt>
   1b7c0:	b	1b770 <__assert_fail@plt+0xa7ac>
   1b7c4:	ldr	r0, [r4]
   1b7c8:	mov	r2, sl
   1b7cc:	mov	r1, #1
   1b7d0:	lsr	r3, r0, #24
   1b7d4:	lsl	ip, r0, #8
   1b7d8:	orr	r3, r3, r0, lsl #24
   1b7dc:	and	ip, ip, #16711680	; 0xff0000
   1b7e0:	lsr	r0, r0, #8
   1b7e4:	orr	r3, r3, ip
   1b7e8:	and	r0, r0, #65280	; 0xff00
   1b7ec:	orr	r3, r3, r0
   1b7f0:	mov	r0, r8
   1b7f4:	bl	10ee0 <__fprintf_chk@plt>
   1b7f8:	b	1b770 <__assert_fail@plt+0xa7ac>
   1b7fc:	ldr	r3, [pc, #40]	; 1b82c <__assert_fail@plt+0xa868>
   1b800:	ldr	r1, [pc, #40]	; 1b830 <__assert_fail@plt+0xa86c>
   1b804:	ldr	r0, [pc, #40]	; 1b834 <__assert_fail@plt+0xa870>
   1b808:	add	r3, pc, r3
   1b80c:	mov	r2, #116	; 0x74
   1b810:	add	r1, pc, r1
   1b814:	add	r0, pc, r0
   1b818:	bl	10fc4 <__assert_fail@plt>
   1b81c:	andeq	r9, r0, r4, asr r1
   1b820:	andeq	r9, r0, r8, asr #2
   1b824:	andeq	r9, r0, r4, asr #2
   1b828:	andeq	r9, r0, r4, ror r0
   1b82c:			; <UNDEFINED> instruction: 0x00008fbc
   1b830:	strdeq	r8, [r0], -r0
   1b834:	strdeq	r8, [r0], -ip
   1b838:	ldr	r3, [pc, #2688]	; 1c2c0 <__assert_fail@plt+0xb2fc>
   1b83c:	ldr	ip, [pc, #2688]	; 1c2c4 <__assert_fail@plt+0xb300>
   1b840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b844:	add	r3, pc, r3
   1b848:	sub	sp, sp, #68	; 0x44
   1b84c:	cmp	r2, #0
   1b850:	str	r2, [sp, #8]
   1b854:	ldr	r2, [r3, ip]
   1b858:	mov	r9, r0
   1b85c:	str	r2, [sp, #24]
   1b860:	ldr	r3, [r2]
   1b864:	str	r1, [sp, #20]
   1b868:	str	r3, [sp, #60]	; 0x3c
   1b86c:	movgt	r4, #0
   1b870:	ldrgt	r5, [sp, #8]
   1b874:	ble	1b890 <__assert_fail@plt+0xa8cc>
   1b878:	add	r4, r4, #1
   1b87c:	mov	r1, r9
   1b880:	mov	r0, #9
   1b884:	bl	10f28 <fputc@plt>
   1b888:	cmp	r5, r4
   1b88c:	bne	1b878 <__assert_fail@plt+0xa8b4>
   1b890:	ldr	r3, [sp, #20]
   1b894:	ldr	r4, [r3, #44]	; 0x2c
   1b898:	cmp	r4, #0
   1b89c:	beq	1b8e4 <__assert_fail@plt+0xa920>
   1b8a0:	ldr	r5, [pc, #2592]	; 1c2c8 <__assert_fail@plt+0xb304>
   1b8a4:	add	r5, pc, r5
   1b8a8:	b	1b8b8 <__assert_fail@plt+0xa8f4>
   1b8ac:	ldr	r4, [r4, #8]
   1b8b0:	cmp	r4, #0
   1b8b4:	beq	1b8e4 <__assert_fail@plt+0xa920>
   1b8b8:	ldrb	r3, [r4]
   1b8bc:	cmp	r3, #0
   1b8c0:	bne	1b8ac <__assert_fail@plt+0xa8e8>
   1b8c4:	ldr	r3, [r4, #4]
   1b8c8:	mov	r2, r5
   1b8cc:	mov	r1, #1
   1b8d0:	mov	r0, r9
   1b8d4:	bl	10ee0 <__fprintf_chk@plt>
   1b8d8:	ldr	r4, [r4, #8]
   1b8dc:	cmp	r4, #0
   1b8e0:	bne	1b8b8 <__assert_fail@plt+0xa8f4>
   1b8e4:	ldr	r3, [sp, #20]
   1b8e8:	ldr	r3, [r3, #4]
   1b8ec:	cmp	r3, #0
   1b8f0:	beq	1b900 <__assert_fail@plt+0xa93c>
   1b8f4:	ldrb	r2, [r3]
   1b8f8:	cmp	r2, #0
   1b8fc:	bne	1c1fc <__assert_fail@plt+0xb238>
   1b900:	ldr	r0, [pc, #2500]	; 1c2cc <__assert_fail@plt+0xb308>
   1b904:	mov	r3, r9
   1b908:	mov	r2, #4
   1b90c:	mov	r1, #1
   1b910:	add	r0, pc, r0
   1b914:	bl	10dcc <fwrite@plt>
   1b918:	ldr	r3, [sp, #20]
   1b91c:	ldr	sl, [r3, #8]
   1b920:	cmp	sl, #0
   1b924:	beq	1bbb4 <__assert_fail@plt+0xabf0>
   1b928:	ldr	r3, [pc, #2464]	; 1c2d0 <__assert_fail@plt+0xb30c>
   1b92c:	add	r3, pc, r3
   1b930:	str	r3, [sp, #28]
   1b934:	ldr	r3, [pc, #2456]	; 1c2d4 <__assert_fail@plt+0xb310>
   1b938:	add	r3, pc, r3
   1b93c:	str	r3, [sp, #36]	; 0x24
   1b940:	b	1b950 <__assert_fail@plt+0xa98c>
   1b944:	ldr	sl, [sl, #20]
   1b948:	cmp	sl, #0
   1b94c:	beq	1bbb4 <__assert_fail@plt+0xabf0>
   1b950:	ldrb	r4, [sl]
   1b954:	cmp	r4, #0
   1b958:	bne	1b944 <__assert_fail@plt+0xa980>
   1b95c:	ldr	r3, [sp, #8]
   1b960:	cmp	r3, #0
   1b964:	ldrge	r3, [sp, #8]
   1b968:	addge	r5, r3, #1
   1b96c:	blt	1b988 <__assert_fail@plt+0xa9c4>
   1b970:	add	r4, r4, #1
   1b974:	mov	r1, r9
   1b978:	mov	r0, #9
   1b97c:	bl	10f28 <fputc@plt>
   1b980:	cmp	r4, r5
   1b984:	bne	1b970 <__assert_fail@plt+0xa9ac>
   1b988:	ldr	r4, [sl, #24]
   1b98c:	cmp	r4, #0
   1b990:	beq	1b9d8 <__assert_fail@plt+0xaa14>
   1b994:	ldr	r5, [pc, #2364]	; 1c2d8 <__assert_fail@plt+0xb314>
   1b998:	add	r5, pc, r5
   1b99c:	b	1b9ac <__assert_fail@plt+0xa9e8>
   1b9a0:	ldr	r4, [r4, #8]
   1b9a4:	cmp	r4, #0
   1b9a8:	beq	1b9d8 <__assert_fail@plt+0xaa14>
   1b9ac:	ldrb	r3, [r4]
   1b9b0:	cmp	r3, #0
   1b9b4:	bne	1b9a0 <__assert_fail@plt+0xa9dc>
   1b9b8:	ldr	r3, [r4, #4]
   1b9bc:	mov	r2, r5
   1b9c0:	mov	r1, #1
   1b9c4:	mov	r0, r9
   1b9c8:	bl	10ee0 <__fprintf_chk@plt>
   1b9cc:	ldr	r4, [r4, #8]
   1b9d0:	cmp	r4, #0
   1b9d4:	bne	1b9ac <__assert_fail@plt+0xa9e8>
   1b9d8:	mov	r1, r9
   1b9dc:	ldr	r0, [sl, #4]
   1b9e0:	bl	10f64 <fputs@plt>
   1b9e4:	ldr	r3, [sl, #8]
   1b9e8:	cmp	r3, #0
   1b9ec:	str	r3, [sp, #12]
   1b9f0:	beq	1bc64 <__assert_fail@plt+0xaca0>
   1b9f4:	ldr	r0, [pc, #2272]	; 1c2dc <__assert_fail@plt+0xb318>
   1b9f8:	ldr	r6, [sl, #16]
   1b9fc:	mov	r3, r9
   1ba00:	mov	r2, #3
   1ba04:	mov	r1, #1
   1ba08:	add	r0, pc, r0
   1ba0c:	bl	10dcc <fwrite@plt>
   1ba10:	cmp	r6, #0
   1ba14:	beq	1c25c <__assert_fail@plt+0xb298>
   1ba18:	ldr	r7, [r6]
   1ba1c:	ldr	fp, [sl, #12]
   1ba20:	cmp	r7, #3
   1ba24:	ldr	r4, [sl, #16]
   1ba28:	ldr	r3, [r6, #12]
   1ba2c:	bhi	1bc80 <__assert_fail@plt+0xacbc>
   1ba30:	mov	r2, r3
   1ba34:	b	1ba48 <__assert_fail@plt+0xaa84>
   1ba38:	ldr	r1, [r2]
   1ba3c:	cmp	r1, #3
   1ba40:	bhi	1bc80 <__assert_fail@plt+0xacbc>
   1ba44:	ldr	r2, [r2, #12]
   1ba48:	cmp	r2, #0
   1ba4c:	bne	1ba38 <__assert_fail@plt+0xaa74>
   1ba50:	ldr	r3, [sl, #8]
   1ba54:	cmp	r3, #0
   1ba58:	movle	ip, #0
   1ba5c:	str	r3, [sp]
   1ba60:	movle	r8, ip
   1ba64:	ble	1bb04 <__assert_fail@plt+0xab40>
   1ba68:	bl	10e50 <__ctype_b_loc@plt>
   1ba6c:	ldr	r3, [sp]
   1ba70:	mov	ip, #0
   1ba74:	sub	r6, r3, #1
   1ba78:	ldr	r3, [pc, #2144]	; 1c2e0 <__assert_fail@plt+0xb31c>
   1ba7c:	add	r6, fp, r6
   1ba80:	add	r3, pc, r3
   1ba84:	str	r4, [sp, #16]
   1ba88:	mov	r8, r6
   1ba8c:	str	r3, [sp, #4]
   1ba90:	sub	r5, fp, #1
   1ba94:	mov	r7, ip
   1ba98:	mov	r4, ip
   1ba9c:	ldr	r2, [r0]
   1baa0:	mov	r6, r2
   1baa4:	b	1bab8 <__assert_fail@plt+0xaaf4>
   1baa8:	cmp	r1, #0
   1baac:	addeq	r7, r7, #1
   1bab0:	cmp	r5, r8
   1bab4:	beq	1baf8 <__assert_fail@plt+0xab34>
   1bab8:	ldrb	r1, [r5, #1]!
   1babc:	cmp	r1, #0
   1bac0:	lsl	r0, r1, #1
   1bac4:	ldrh	r0, [r6, r0]
   1bac8:	lsr	r0, r0, #14
   1bacc:	andne	r0, r0, #1
   1bad0:	moveq	r0, #1
   1bad4:	cmp	r0, #0
   1bad8:	bne	1baa8 <__assert_fail@plt+0xaae4>
   1badc:	ldr	r0, [sp, #4]
   1bae0:	bl	10e80 <strchr@plt>
   1bae4:	cmp	r0, #0
   1bae8:	bne	1bab0 <__assert_fail@plt+0xaaec>
   1baec:	cmp	r5, r8
   1baf0:	add	r4, r4, #1
   1baf4:	bne	1bab8 <__assert_fail@plt+0xaaf4>
   1baf8:	mov	r8, r4
   1bafc:	ldr	r4, [sp, #16]
   1bb00:	mov	ip, r7
   1bb04:	cmp	r4, #0
   1bb08:	beq	1c268 <__assert_fail@plt+0xb2a4>
   1bb0c:	mov	r1, #0
   1bb10:	mov	r0, r1
   1bb14:	mov	r3, r4
   1bb18:	mov	r7, ip
   1bb1c:	b	1bb2c <__assert_fail@plt+0xab68>
   1bb20:	ldr	r3, [r3, #12]
   1bb24:	cmp	r3, #0
   1bb28:	beq	1bb68 <__assert_fail@plt+0xaba4>
   1bb2c:	ldr	r2, [r3]
   1bb30:	cmp	r2, #3
   1bb34:	bne	1bb20 <__assert_fail@plt+0xab5c>
   1bb38:	ldr	r2, [r3, #4]
   1bb3c:	cmp	r2, #0
   1bb40:	ble	1bb54 <__assert_fail@plt+0xab90>
   1bb44:	add	ip, fp, r2
   1bb48:	ldrb	ip, [ip, #-1]
   1bb4c:	cmp	ip, #0
   1bb50:	addne	r0, r0, #1
   1bb54:	ldr	r3, [r3, #12]
   1bb58:	tst	r2, #3
   1bb5c:	addne	r1, r1, #1
   1bb60:	cmp	r3, #0
   1bb64:	bne	1bb2c <__assert_fail@plt+0xab68>
   1bb68:	mov	ip, r7
   1bb6c:	ldr	r3, [sp]
   1bb70:	add	r3, fp, r3
   1bb74:	ldrb	r3, [r3, #-1]
   1bb78:	cmp	r3, #0
   1bb7c:	beq	1c22c <__assert_fail@plt+0xb268>
   1bb80:	ldr	r3, [sp]
   1bb84:	and	r3, r3, #3
   1bb88:	orrs	r3, r3, r1
   1bb8c:	movne	r7, #4
   1bb90:	moveq	r7, #6
   1bb94:	mov	r5, #0
   1bb98:	str	r7, [sp, #44]	; 0x2c
   1bb9c:	str	r4, [sp, #56]	; 0x38
   1bba0:	str	r5, [sp, #48]	; 0x30
   1bba4:	str	r5, [sp, #52]	; 0x34
   1bba8:	mov	r3, r4
   1bbac:	add	r6, sp, #44	; 0x2c
   1bbb0:	b	1bc84 <__assert_fail@plt+0xacc0>
   1bbb4:	ldr	r3, [sp, #20]
   1bbb8:	ldr	r4, [r3, #12]
   1bbbc:	cmp	r4, #0
   1bbc0:	beq	1bbe4 <__assert_fail@plt+0xac20>
   1bbc4:	ldr	r3, [sp, #8]
   1bbc8:	add	r5, r3, #1
   1bbcc:	ldrb	r3, [r4]
   1bbd0:	cmp	r3, #0
   1bbd4:	beq	1bc44 <__assert_fail@plt+0xac80>
   1bbd8:	ldr	r4, [r4, #20]
   1bbdc:	cmp	r4, #0
   1bbe0:	bne	1bbcc <__assert_fail@plt+0xac08>
   1bbe4:	ldr	r3, [sp, #8]
   1bbe8:	cmp	r3, #0
   1bbec:	movgt	r4, #0
   1bbf0:	ldrgt	r5, [sp, #8]
   1bbf4:	ble	1bc10 <__assert_fail@plt+0xac4c>
   1bbf8:	add	r4, r4, #1
   1bbfc:	mov	r1, r9
   1bc00:	mov	r0, #9
   1bc04:	bl	10f28 <fputc@plt>
   1bc08:	cmp	r5, r4
   1bc0c:	bne	1bbf8 <__assert_fail@plt+0xac34>
   1bc10:	ldr	r3, [sp, #24]
   1bc14:	ldr	r2, [sp, #60]	; 0x3c
   1bc18:	ldr	r3, [r3]
   1bc1c:	cmp	r2, r3
   1bc20:	bne	1c298 <__assert_fail@plt+0xb2d4>
   1bc24:	ldr	r0, [pc, #1720]	; 1c2e4 <__assert_fail@plt+0xb320>
   1bc28:	mov	r3, r9
   1bc2c:	mov	r2, #3
   1bc30:	mov	r1, #1
   1bc34:	add	r0, pc, r0
   1bc38:	add	sp, sp, #68	; 0x44
   1bc3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc40:	b	10dcc <fwrite@plt>
   1bc44:	mov	r1, r9
   1bc48:	mov	r0, #10
   1bc4c:	bl	10f28 <fputc@plt>
   1bc50:	mov	r2, r5
   1bc54:	mov	r1, r4
   1bc58:	mov	r0, r9
   1bc5c:	bl	1b838 <__assert_fail@plt+0xa874>
   1bc60:	b	1bbd8 <__assert_fail@plt+0xac14>
   1bc64:	ldr	r0, [pc, #1660]	; 1c2e8 <__assert_fail@plt+0xb324>
   1bc68:	mov	r3, r9
   1bc6c:	mov	r2, #2
   1bc70:	mov	r1, #1
   1bc74:	add	r0, pc, r0
   1bc78:	bl	10dcc <fwrite@plt>
   1bc7c:	b	1b944 <__assert_fail@plt+0xa980>
   1bc80:	ldr	r5, [r6, #4]
   1bc84:	mov	r2, #0
   1bc88:	str	r2, [sp]
   1bc8c:	ldr	r2, [pc, #1624]	; 1c2ec <__assert_fail@plt+0xb328>
   1bc90:	str	sl, [sp, #4]
   1bc94:	add	r2, pc, r2
   1bc98:	str	r2, [sp, #16]
   1bc9c:	ldr	r2, [pc, #1612]	; 1c2f0 <__assert_fail@plt+0xb32c>
   1bca0:	ldr	sl, [sp, #28]
   1bca4:	add	r2, pc, r2
   1bca8:	str	r2, [sp, #32]
   1bcac:	b	1bcd0 <__assert_fail@plt+0xad0c>
   1bcb0:	cmp	r3, #0
   1bcb4:	beq	1bf80 <__assert_fail@plt+0xafbc>
   1bcb8:	ldr	r2, [sp, #4]
   1bcbc:	ldr	r5, [r3, #4]
   1bcc0:	ldr	r7, [r3]
   1bcc4:	mov	r6, r3
   1bcc8:	ldr	fp, [r2, #12]
   1bccc:	ldr	r3, [r3, #12]
   1bcd0:	cmp	r7, #3
   1bcd4:	bls	1bcb0 <__assert_fail@plt+0xacec>
   1bcd8:	cmp	r3, #0
   1bcdc:	bne	1bcf0 <__assert_fail@plt+0xad2c>
   1bce0:	b	1bd08 <__assert_fail@plt+0xad44>
   1bce4:	ldr	r3, [r3, #12]
   1bce8:	cmp	r3, #0
   1bcec:	beq	1bd08 <__assert_fail@plt+0xad44>
   1bcf0:	ldr	r2, [r3]
   1bcf4:	cmp	r2, #3
   1bcf8:	bls	1bce4 <__assert_fail@plt+0xad20>
   1bcfc:	ldr	r8, [r3, #4]
   1bd00:	subs	r8, r8, r5
   1bd04:	bne	1bd10 <__assert_fail@plt+0xad4c>
   1bd08:	ldr	r3, [sp, #12]
   1bd0c:	sub	r8, r3, r5
   1bd10:	ldr	r3, [sp]
   1bd14:	cmp	r3, #0
   1bd18:	beq	1bd24 <__assert_fail@plt+0xad60>
   1bd1c:	b	1c070 <__assert_fail@plt+0xb0ac>
   1bd20:	ldr	r4, [r4, #12]
   1bd24:	cmp	r4, #0
   1bd28:	beq	1bd60 <__assert_fail@plt+0xad9c>
   1bd2c:	ldr	r3, [r4]
   1bd30:	cmp	r3, #3
   1bd34:	bne	1bd20 <__assert_fail@plt+0xad5c>
   1bd38:	ldr	r2, [r4, #4]
   1bd3c:	ldr	r3, [r6, #4]
   1bd40:	cmp	r2, r3
   1bd44:	bgt	1bd64 <__assert_fail@plt+0xada0>
   1bd48:	ldr	r3, [r4, #8]
   1bd4c:	mov	r2, sl
   1bd50:	mov	r1, #1
   1bd54:	mov	r0, r9
   1bd58:	bl	10ee0 <__fprintf_chk@plt>
   1bd5c:	b	1bd20 <__assert_fail@plt+0xad5c>
   1bd60:	mov	r4, #0
   1bd64:	ldr	r3, [sp, #16]
   1bd68:	mov	r1, r9
   1bd6c:	add	r3, r3, r7, lsl #2
   1bd70:	ldr	r0, [r3, #36]	; 0x24
   1bd74:	bl	10f64 <fputs@plt>
   1bd78:	cmp	r8, #0
   1bd7c:	beq	1c064 <__assert_fail@plt+0xb0a0>
   1bd80:	sub	r3, r7, #5
   1bd84:	add	r5, fp, r5
   1bd88:	cmp	r3, #3
   1bd8c:	addls	pc, pc, r3, lsl #2
   1bd90:	b	1c050 <__assert_fail@plt+0xb08c>
   1bd94:	b	1c030 <__assert_fail@plt+0xb06c>
   1bd98:	b	1c010 <__assert_fail@plt+0xb04c>
   1bd9c:	b	1bf5c <__assert_fail@plt+0xaf98>
   1bda0:	b	1bda4 <__assert_fail@plt+0xade0>
   1bda4:	sub	r3, r8, #1
   1bda8:	add	r8, r5, r3
   1bdac:	ldrb	r3, [r5, r3]
   1bdb0:	cmp	r3, #0
   1bdb4:	bne	1c29c <__assert_fail@plt+0xb2d8>
   1bdb8:	mov	r1, r9
   1bdbc:	mov	r0, #34	; 0x22
   1bdc0:	bl	10f28 <fputc@plt>
   1bdc4:	cmp	r5, r8
   1bdc8:	bcs	1c0bc <__assert_fail@plt+0xb0f8>
   1bdcc:	ldr	r3, [pc, #1312]	; 1c2f4 <__assert_fail@plt+0xb330>
   1bdd0:	add	r3, pc, r3
   1bdd4:	str	r3, [sp]
   1bdd8:	ldrb	fp, [r5], #1
   1bddc:	cmp	fp, #92	; 0x5c
   1bde0:	addls	pc, pc, fp, lsl #2
   1bde4:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bde8:	b	1c128 <__assert_fail@plt+0xb164>
   1bdec:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bdf0:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bdf4:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bdf8:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bdfc:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be00:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be04:	b	1c10c <__assert_fail@plt+0xb148>
   1be08:	b	1c0f0 <__assert_fail@plt+0xb12c>
   1be0c:	b	1c0d4 <__assert_fail@plt+0xb110>
   1be10:	b	1c194 <__assert_fail@plt+0xb1d0>
   1be14:	b	1c178 <__assert_fail@plt+0xb1b4>
   1be18:	b	1c15c <__assert_fail@plt+0xb198>
   1be1c:	b	1c140 <__assert_fail@plt+0xb17c>
   1be20:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be24:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be28:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be2c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be30:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be34:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be38:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be3c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be40:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be44:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be48:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be4c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be50:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be54:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be58:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be5c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be60:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be64:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be68:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be6c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be70:	b	1c1b0 <__assert_fail@plt+0xb1ec>
   1be74:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be78:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be7c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be80:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be84:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be88:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be8c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be90:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be94:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be98:	b	1c1c8 <__assert_fail@plt+0xb204>
   1be9c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bea0:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bea4:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bea8:	b	1c1c8 <__assert_fail@plt+0xb204>
   1beac:	b	1c1c8 <__assert_fail@plt+0xb204>
   1beb0:	b	1c1c8 <__assert_fail@plt+0xb204>
   1beb4:	b	1c1c8 <__assert_fail@plt+0xb204>
   1beb8:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bebc:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bec0:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bec4:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bec8:	b	1c1c8 <__assert_fail@plt+0xb204>
   1becc:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bed0:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bed4:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bed8:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bedc:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bee0:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bee4:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bee8:	b	1c1c8 <__assert_fail@plt+0xb204>
   1beec:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bef0:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bef4:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bef8:	b	1c1c8 <__assert_fail@plt+0xb204>
   1befc:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf00:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf04:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf08:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf0c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf10:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf14:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf18:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf1c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf20:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf24:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf28:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf2c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf30:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf34:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf38:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf3c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf40:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf44:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf48:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf4c:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf50:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf54:	b	1c1c8 <__assert_fail@plt+0xb204>
   1bf58:	b	1c09c <__assert_fail@plt+0xb0d8>
   1bf5c:	mov	r3, #8
   1bf60:	mov	r2, r8
   1bf64:	mov	r1, r5
   1bf68:	mov	r0, r9
   1bf6c:	str	r7, [sp]
   1bf70:	bl	1b69c <__assert_fail@plt+0xa6d8>
   1bf74:	ldr	r3, [r6, #12]
   1bf78:	cmp	r3, #0
   1bf7c:	bne	1bcb8 <__assert_fail@plt+0xacf4>
   1bf80:	cmp	r4, #0
   1bf84:	ldr	sl, [sp, #4]
   1bf88:	beq	1bfe0 <__assert_fail@plt+0xb01c>
   1bf8c:	ldr	r5, [pc, #868]	; 1c2f8 <__assert_fail@plt+0xb334>
   1bf90:	ldr	r6, [sp, #12]
   1bf94:	add	r5, pc, r5
   1bf98:	b	1bfa8 <__assert_fail@plt+0xafe4>
   1bf9c:	ldr	r4, [r4, #12]
   1bfa0:	cmp	r4, #0
   1bfa4:	beq	1bfe0 <__assert_fail@plt+0xb01c>
   1bfa8:	ldr	r3, [r4]
   1bfac:	cmp	r3, #3
   1bfb0:	bne	1bf9c <__assert_fail@plt+0xafd8>
   1bfb4:	ldr	r3, [r4, #4]
   1bfb8:	cmp	r6, r3
   1bfbc:	bne	1c274 <__assert_fail@plt+0xb2b0>
   1bfc0:	ldr	r3, [r4, #8]
   1bfc4:	mov	r2, r5
   1bfc8:	mov	r1, #1
   1bfcc:	mov	r0, r9
   1bfd0:	bl	10ee0 <__fprintf_chk@plt>
   1bfd4:	ldr	r4, [r4, #12]
   1bfd8:	cmp	r4, #0
   1bfdc:	bne	1bfa8 <__assert_fail@plt+0xafe4>
   1bfe0:	ldr	r3, [pc, #788]	; 1c2fc <__assert_fail@plt+0xb338>
   1bfe4:	ldr	r2, [sp]
   1bfe8:	add	r3, pc, r3
   1bfec:	ldr	r3, [r3, r2, lsl #2]
   1bff0:	cmp	r3, #0
   1bff4:	beq	1c1f0 <__assert_fail@plt+0xb22c>
   1bff8:	ldr	r2, [pc, #768]	; 1c300 <__assert_fail@plt+0xb33c>
   1bffc:	mov	r1, #1
   1c000:	add	r2, pc, r2
   1c004:	mov	r0, r9
   1c008:	bl	10ee0 <__fprintf_chk@plt>
   1c00c:	b	1b944 <__assert_fail@plt+0xa980>
   1c010:	mov	r3, #4
   1c014:	mov	r2, r8
   1c018:	mov	r1, r5
   1c01c:	mov	r0, r9
   1c020:	str	r7, [sp]
   1c024:	bl	1b69c <__assert_fail@plt+0xa6d8>
   1c028:	ldr	r3, [r6, #12]
   1c02c:	b	1bcb0 <__assert_fail@plt+0xacec>
   1c030:	mov	r3, #2
   1c034:	mov	r2, r8
   1c038:	mov	r1, r5
   1c03c:	mov	r0, r9
   1c040:	str	r7, [sp]
   1c044:	bl	1b69c <__assert_fail@plt+0xa6d8>
   1c048:	ldr	r3, [r6, #12]
   1c04c:	b	1bcb0 <__assert_fail@plt+0xacec>
   1c050:	mov	r2, r8
   1c054:	mov	r1, r5
   1c058:	mov	r3, #1
   1c05c:	mov	r0, r9
   1c060:	bl	1b69c <__assert_fail@plt+0xa6d8>
   1c064:	ldr	r3, [r6, #12]
   1c068:	str	r7, [sp]
   1c06c:	b	1bcb0 <__assert_fail@plt+0xacec>
   1c070:	ldr	r3, [pc, #652]	; 1c304 <__assert_fail@plt+0xb340>
   1c074:	ldr	r0, [sp]
   1c078:	add	r3, pc, r3
   1c07c:	ldr	r2, [pc, #644]	; 1c308 <__assert_fail@plt+0xb344>
   1c080:	ldr	r3, [r3, r0, lsl #2]
   1c084:	add	r2, pc, r2
   1c088:	mov	r1, #1
   1c08c:	mov	r0, r9
   1c090:	bl	10ee0 <__fprintf_chk@plt>
   1c094:	ldr	r7, [r6]
   1c098:	b	1bd24 <__assert_fail@plt+0xad60>
   1c09c:	ldr	r0, [pc, #616]	; 1c30c <__assert_fail@plt+0xb348>
   1c0a0:	mov	r3, r9
   1c0a4:	mov	r2, #2
   1c0a8:	mov	r1, #1
   1c0ac:	add	r0, pc, r0
   1c0b0:	bl	10dcc <fwrite@plt>
   1c0b4:	cmp	r8, r5
   1c0b8:	bne	1bdd8 <__assert_fail@plt+0xae14>
   1c0bc:	mov	r1, r9
   1c0c0:	mov	r0, #34	; 0x22
   1c0c4:	str	r7, [sp]
   1c0c8:	bl	10f28 <fputc@plt>
   1c0cc:	ldr	r3, [r6, #12]
   1c0d0:	b	1bcb0 <__assert_fail@plt+0xacec>
   1c0d4:	ldr	r0, [pc, #564]	; 1c310 <__assert_fail@plt+0xb34c>
   1c0d8:	mov	r3, r9
   1c0dc:	mov	r2, #2
   1c0e0:	mov	r1, #1
   1c0e4:	add	r0, pc, r0
   1c0e8:	bl	10dcc <fwrite@plt>
   1c0ec:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c0f0:	ldr	r0, [pc, #540]	; 1c314 <__assert_fail@plt+0xb350>
   1c0f4:	mov	r3, r9
   1c0f8:	mov	r2, #2
   1c0fc:	mov	r1, #1
   1c100:	add	r0, pc, r0
   1c104:	bl	10dcc <fwrite@plt>
   1c108:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c10c:	ldr	r0, [pc, #516]	; 1c318 <__assert_fail@plt+0xb354>
   1c110:	mov	r3, r9
   1c114:	mov	r2, #2
   1c118:	mov	r1, #1
   1c11c:	add	r0, pc, r0
   1c120:	bl	10dcc <fwrite@plt>
   1c124:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c128:	mov	r3, r9
   1c12c:	mov	r2, #2
   1c130:	mov	r1, #1
   1c134:	ldr	r0, [sp, #32]
   1c138:	bl	10dcc <fwrite@plt>
   1c13c:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c140:	ldr	r0, [pc, #468]	; 1c31c <__assert_fail@plt+0xb358>
   1c144:	mov	r3, r9
   1c148:	mov	r2, #2
   1c14c:	mov	r1, #1
   1c150:	add	r0, pc, r0
   1c154:	bl	10dcc <fwrite@plt>
   1c158:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c15c:	ldr	r0, [pc, #444]	; 1c320 <__assert_fail@plt+0xb35c>
   1c160:	mov	r3, r9
   1c164:	mov	r2, #2
   1c168:	mov	r1, #1
   1c16c:	add	r0, pc, r0
   1c170:	bl	10dcc <fwrite@plt>
   1c174:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c178:	ldr	r0, [pc, #420]	; 1c324 <__assert_fail@plt+0xb360>
   1c17c:	mov	r3, r9
   1c180:	mov	r2, #2
   1c184:	mov	r1, #1
   1c188:	add	r0, pc, r0
   1c18c:	bl	10dcc <fwrite@plt>
   1c190:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c194:	ldr	r0, [pc, #396]	; 1c328 <__assert_fail@plt+0xb364>
   1c198:	mov	r3, r9
   1c19c:	mov	r2, #2
   1c1a0:	mov	r1, #1
   1c1a4:	add	r0, pc, r0
   1c1a8:	bl	10dcc <fwrite@plt>
   1c1ac:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c1b0:	mov	r3, r9
   1c1b4:	mov	r2, #2
   1c1b8:	mov	r1, #1
   1c1bc:	ldr	r0, [sp]
   1c1c0:	bl	10dcc <fwrite@plt>
   1c1c4:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c1c8:	bl	10e50 <__ctype_b_loc@plt>
   1c1cc:	lsl	r3, fp, #1
   1c1d0:	ldr	r2, [r0]
   1c1d4:	ldrh	r3, [r2, r3]
   1c1d8:	tst	r3, #16384	; 0x4000
   1c1dc:	beq	1c214 <__assert_fail@plt+0xb250>
   1c1e0:	mov	r0, fp
   1c1e4:	mov	r1, r9
   1c1e8:	bl	10f28 <fputc@plt>
   1c1ec:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c1f0:	ldr	r3, [pc, #308]	; 1c32c <__assert_fail@plt+0xb368>
   1c1f4:	add	r3, pc, r3
   1c1f8:	b	1bff8 <__assert_fail@plt+0xb034>
   1c1fc:	ldr	r2, [pc, #300]	; 1c330 <__assert_fail@plt+0xb36c>
   1c200:	mov	r1, #1
   1c204:	add	r2, pc, r2
   1c208:	mov	r0, r9
   1c20c:	bl	10ee0 <__fprintf_chk@plt>
   1c210:	b	1b918 <__assert_fail@plt+0xa954>
   1c214:	mov	r3, fp
   1c218:	ldr	r2, [sp, #36]	; 0x24
   1c21c:	mov	r1, #1
   1c220:	mov	r0, r9
   1c224:	bl	10ee0 <__fprintf_chk@plt>
   1c228:	b	1c0b4 <__assert_fail@plt+0xb0f0>
   1c22c:	ldr	r3, [sp]
   1c230:	orr	r0, r8, r0
   1c234:	sub	r3, r3, ip
   1c238:	cmp	r3, ip
   1c23c:	movle	r7, #0
   1c240:	movgt	r7, #1
   1c244:	cmp	r0, #0
   1c248:	movne	r7, #0
   1c24c:	cmp	r7, #0
   1c250:	movne	r7, #8
   1c254:	beq	1bb80 <__assert_fail@plt+0xabbc>
   1c258:	b	1bb94 <__assert_fail@plt+0xabd0>
   1c25c:	ldr	fp, [sl, #12]
   1c260:	ldr	r4, [sl, #16]
   1c264:	b	1ba50 <__assert_fail@plt+0xaa8c>
   1c268:	mov	r1, r4
   1c26c:	mov	r0, r4
   1c270:	b	1bb6c <__assert_fail@plt+0xaba8>
   1c274:	ldr	r3, [pc, #184]	; 1c334 <__assert_fail@plt+0xb370>
   1c278:	ldr	r1, [pc, #184]	; 1c338 <__assert_fail@plt+0xb374>
   1c27c:	ldr	r0, [pc, #184]	; 1c33c <__assert_fail@plt+0xb378>
   1c280:	add	r3, pc, r3
   1c284:	ldr	r2, [pc, #180]	; 1c340 <__assert_fail@plt+0xb37c>
   1c288:	add	r3, r3, #44	; 0x2c
   1c28c:	add	r1, pc, r1
   1c290:	add	r0, pc, r0
   1c294:	bl	10fc4 <__assert_fail@plt>
   1c298:	bl	10d9c <__stack_chk_fail@plt>
   1c29c:	ldr	r3, [pc, #160]	; 1c344 <__assert_fail@plt+0xb380>
   1c2a0:	ldr	r1, [pc, #160]	; 1c348 <__assert_fail@plt+0xb384>
   1c2a4:	ldr	r0, [pc, #160]	; 1c34c <__assert_fail@plt+0xb388>
   1c2a8:	add	r3, pc, r3
   1c2ac:	mov	r2, #67	; 0x43
   1c2b0:	add	r3, r3, #20
   1c2b4:	add	r1, pc, r1
   1c2b8:	add	r0, pc, r0
   1c2bc:	bl	10fc4 <__assert_fail@plt>
   1c2c0:	andeq	fp, r1, r0, asr #12
   1c2c4:	andeq	r0, r0, r4, lsl r1
   1c2c8:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1c2cc:	andeq	r8, r0, r0, asr #30
   1c2d0:	andeq	r8, r0, r4, lsl pc
   1c2d4:	andeq	r8, r0, ip, ror #30
   1c2d8:	andeq	r8, r0, r8, lsr #29
   1c2dc:	andeq	r8, r0, r0, asr lr
   1c2e0:	ldrdeq	r8, [r0], -ip
   1c2e4:	andeq	r8, r0, r0, lsr #25
   1c2e8:	ldrdeq	r8, [r0], -r0
   1c2ec:	andeq	fp, r1, r8, lsr #1
   1c2f0:	strdeq	r8, [r0], -ip
   1c2f4:	andeq	r8, r0, ip, asr #21
   1c2f8:	andeq	r8, r0, r0, lsr r9
   1c2fc:	andeq	sl, r1, r4, asr sp
   1c300:	andeq	r8, r0, ip, asr #17
   1c304:	andeq	sl, r1, r4, asr #25
   1c308:	andeq	r8, r0, r0, ror #15
   1c30c:	andeq	r8, r0, ip, ror #15
   1c310:	andeq	r8, r0, r0, lsr #15
   1c314:	andeq	r8, r0, r0, lsl #15
   1c318:	andeq	r8, r0, r0, ror #14
   1c31c:	andeq	r8, r0, r4, asr #14
   1c320:	andeq	r8, r0, r4, lsr #14
   1c324:	andeq	r8, r0, r4, lsl #14
   1c328:	andeq	r8, r0, r4, ror #13
   1c32c:			; <UNDEFINED> instruction: 0x000075b0
   1c330:	andeq	r8, r0, r4, asr #12
   1c334:	andeq	r8, r0, r4, asr #10
   1c338:	andeq	r8, r0, r4, ror r5
   1c33c:	andeq	r8, r0, ip, lsl r6
   1c340:	andeq	r0, r0, r3, lsl r1
   1c344:	andeq	r8, r0, ip, lsl r5
   1c348:	andeq	r8, r0, ip, asr #10
   1c34c:			; <UNDEFINED> instruction: 0x000085b4
   1c350:	push	{r4, r5, r6, lr}
   1c354:	mov	r1, #0
   1c358:	ldr	r4, [pc, #124]	; 1c3dc <__assert_fail@plt+0xb418>
   1c35c:	ldr	r2, [pc, #124]	; 1c3e0 <__assert_fail@plt+0xb41c>
   1c360:	add	r4, pc, r4
   1c364:	ldr	r3, [pc, #120]	; 1c3e4 <__assert_fail@plt+0xb420>
   1c368:	ldr	r5, [r4, r2]
   1c36c:	str	r1, [r5]
   1c370:	ldr	r6, [r4, r3]
   1c374:	strb	r1, [r6]
   1c378:	bl	1b148 <__assert_fail@plt+0xa184>
   1c37c:	ldr	r1, [pc, #100]	; 1c3e8 <__assert_fail@plt+0xb424>
   1c380:	ldr	r2, [pc, #100]	; 1c3ec <__assert_fail@plt+0xb428>
   1c384:	ldr	r3, [pc, #100]	; 1c3f0 <__assert_fail@plt+0xb42c>
   1c388:	ldr	r0, [r4, r1]
   1c38c:	ldr	r1, [r4, r2]
   1c390:	ldr	r2, [r0]
   1c394:	ldr	r0, [r2]
   1c398:	str	r0, [r1]
   1c39c:	ldr	r3, [r4, r3]
   1c3a0:	str	r2, [r3, #16]
   1c3a4:	bl	1fa60 <__assert_fail@plt+0xea9c>
   1c3a8:	cmp	r0, #0
   1c3ac:	bne	1c3c4 <__assert_fail@plt+0xb400>
   1c3b0:	ldrb	r3, [r6]
   1c3b4:	cmp	r3, #0
   1c3b8:	bne	1c3d0 <__assert_fail@plt+0xb40c>
   1c3bc:	ldr	r0, [r5]
   1c3c0:	pop	{r4, r5, r6, pc}
   1c3c4:	ldr	r0, [pc, #40]	; 1c3f4 <__assert_fail@plt+0xb430>
   1c3c8:	add	r0, pc, r0
   1c3cc:	bl	1b620 <__assert_fail@plt+0xa65c>
   1c3d0:	ldr	r0, [pc, #32]	; 1c3f8 <__assert_fail@plt+0xb434>
   1c3d4:	add	r0, pc, r0
   1c3d8:	bl	1b620 <__assert_fail@plt+0xa65c>
   1c3dc:	andeq	sl, r1, r4, lsr #22
   1c3e0:	andeq	r0, r0, r4, ror #2
   1c3e4:	andeq	r0, r0, r0, lsl #2
   1c3e8:	andeq	r0, r0, r0, lsr r1
   1c3ec:	andeq	r0, r0, r8, lsl r1
   1c3f0:	andeq	r0, r0, ip, lsl r1
   1c3f4:	andeq	r8, r0, r0, lsl r5
   1c3f8:	andeq	r8, r0, r0, lsr #10
   1c3fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c400:	mov	r3, r0
   1c404:	mov	r8, r0
   1c408:	ldr	r0, [pc, #184]	; 1c4c8 <__assert_fail@plt+0xb504>
   1c40c:	mov	sl, r1
   1c410:	sub	sp, sp, #16
   1c414:	mov	r2, #11
   1c418:	mov	r1, #1
   1c41c:	add	r0, pc, r0
   1c420:	bl	10dcc <fwrite@plt>
   1c424:	ldr	r5, [sl, #4]
   1c428:	cmp	r5, #0
   1c42c:	beq	1c4b0 <__assert_fail@plt+0xb4ec>
   1c430:	ldr	r9, [pc, #148]	; 1c4cc <__assert_fail@plt+0xb508>
   1c434:	add	r9, pc, r9
   1c438:	ldr	r4, [r5, #20]
   1c43c:	cmp	r4, #0
   1c440:	bne	1c454 <__assert_fail@plt+0xb490>
   1c444:	b	1c480 <__assert_fail@plt+0xb4bc>
   1c448:	ldr	r4, [r4, #8]
   1c44c:	cmp	r4, #0
   1c450:	beq	1c480 <__assert_fail@plt+0xb4bc>
   1c454:	ldrb	r3, [r4]
   1c458:	cmp	r3, #0
   1c45c:	bne	1c448 <__assert_fail@plt+0xb484>
   1c460:	ldr	r3, [r4, #4]
   1c464:	mov	r2, r9
   1c468:	mov	r1, #1
   1c46c:	mov	r0, r8
   1c470:	bl	10ee0 <__fprintf_chk@plt>
   1c474:	ldr	r4, [r4, #8]
   1c478:	cmp	r4, #0
   1c47c:	bne	1c454 <__assert_fail@plt+0xb490>
   1c480:	ldrd	r6, [r5, #8]
   1c484:	ldr	r2, [pc, #68]	; 1c4d0 <__assert_fail@plt+0xb50c>
   1c488:	mov	r1, #1
   1c48c:	strd	r6, [sp, #8]
   1c490:	ldrd	r6, [r5]
   1c494:	add	r2, pc, r2
   1c498:	mov	r0, r8
   1c49c:	strd	r6, [sp]
   1c4a0:	bl	10ee0 <__fprintf_chk@plt>
   1c4a4:	ldr	r5, [r5, #16]
   1c4a8:	cmp	r5, #0
   1c4ac:	bne	1c438 <__assert_fail@plt+0xb474>
   1c4b0:	ldr	r1, [sl, #12]
   1c4b4:	mov	r0, r8
   1c4b8:	mov	r2, #0
   1c4bc:	add	sp, sp, #16
   1c4c0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c4c4:	b	1b838 <__assert_fail@plt+0xa874>
   1c4c8:	strdeq	r8, [r0], -ip
   1c4cc:	andeq	r8, r0, ip, lsl #8
   1c4d0:	muleq	r0, r0, r4
   1c4d4:	ldr	ip, [pc, #100]	; 1c540 <__assert_fail@plt+0xb57c>
   1c4d8:	push	{r0, r1, r2, r3}
   1c4dc:	add	ip, pc, ip
   1c4e0:	ldr	r2, [pc, #92]	; 1c544 <__assert_fail@plt+0xb580>
   1c4e4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c4e8:	sub	sp, sp, #12
   1c4ec:	ldr	r2, [ip, r2]
   1c4f0:	ldr	r3, [pc, #80]	; 1c548 <__assert_fail@plt+0xb584>
   1c4f4:	add	r1, sp, #20
   1c4f8:	str	r1, [sp]
   1c4fc:	ldr	r1, [r2]
   1c500:	ldr	r0, [pc, #68]	; 1c54c <__assert_fail@plt+0xb588>
   1c504:	str	r1, [sp, #4]
   1c508:	ldr	r4, [ip, r3]
   1c50c:	ldr	r5, [sp, #16]
   1c510:	mov	r2, #13
   1c514:	mov	r1, #1
   1c518:	ldr	r3, [r4]
   1c51c:	add	r0, pc, r0
   1c520:	bl	10dcc <fwrite@plt>
   1c524:	ldr	r0, [r4]
   1c528:	mov	r2, r5
   1c52c:	ldr	r3, [sp]
   1c530:	mov	r1, #1
   1c534:	bl	10e20 <__vfprintf_chk@plt>
   1c538:	mov	r0, #1
   1c53c:	bl	10e5c <exit@plt>
   1c540:	andeq	sl, r1, r8, lsr #19
   1c544:	andeq	r0, r0, r4, lsl r1
   1c548:	andeq	r0, r0, ip, lsr r1
   1c54c:	andeq	r5, r0, ip, lsr #2
   1c550:	push	{r4, r5, r6, lr}
   1c554:	mov	r6, r0
   1c558:	bl	10e74 <strlen@plt>
   1c55c:	add	r4, r0, #1
   1c560:	mov	r0, r4
   1c564:	bl	10dfc <malloc@plt>
   1c568:	subs	r5, r0, #0
   1c56c:	beq	1c584 <__assert_fail@plt+0xb5c0>
   1c570:	mov	r2, r4
   1c574:	mov	r1, r6
   1c578:	bl	10d84 <memcpy@plt>
   1c57c:	mov	r0, r5
   1c580:	pop	{r4, r5, r6, pc}
   1c584:	ldr	r0, [pc, #4]	; 1c590 <__assert_fail@plt+0xb5cc>
   1c588:	add	r0, pc, r0
   1c58c:	bl	1c4d4 <__assert_fail@plt+0xb510>
   1c590:	andeq	r7, r0, ip, rrx
   1c594:	push	{r1, r2, r3}
   1c598:	ldr	r3, [pc, #180]	; 1c654 <__assert_fail@plt+0xb690>
   1c59c:	ldr	r2, [pc, #180]	; 1c658 <__assert_fail@plt+0xb694>
   1c5a0:	add	r3, pc, r3
   1c5a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c5a8:	sub	sp, sp, #16
   1c5ac:	ldr	r9, [r3, r2]
   1c5b0:	ldr	r7, [sp, #44]	; 0x2c
   1c5b4:	mov	r8, r0
   1c5b8:	ldr	r2, [r9]
   1c5bc:	mov	r5, #0
   1c5c0:	mov	r4, #128	; 0x80
   1c5c4:	add	r6, sp, #48	; 0x30
   1c5c8:	str	r2, [sp, #12]
   1c5cc:	b	1c5dc <__assert_fail@plt+0xb618>
   1c5d0:	cmp	r0, #0
   1c5d4:	addge	r4, r0, #1
   1c5d8:	lsllt	r4, r4, #1
   1c5dc:	mov	r0, r5
   1c5e0:	mov	r1, r4
   1c5e4:	bl	10da8 <realloc@plt>
   1c5e8:	subs	r5, r0, #0
   1c5ec:	beq	1c640 <__assert_fail@plt+0xb67c>
   1c5f0:	str	r6, [sp, #4]
   1c5f4:	str	r7, [sp]
   1c5f8:	mvn	r3, #0
   1c5fc:	mov	r2, #1
   1c600:	mov	r1, r4
   1c604:	str	r6, [sp, #8]
   1c608:	bl	10d78 <__vsnprintf_chk@plt>
   1c60c:	cmp	r4, r0
   1c610:	bls	1c5d0 <__assert_fail@plt+0xb60c>
   1c614:	str	r5, [r8]
   1c618:	mov	r0, r5
   1c61c:	bl	10e74 <strlen@plt>
   1c620:	ldr	r2, [sp, #12]
   1c624:	ldr	r3, [r9]
   1c628:	cmp	r2, r3
   1c62c:	bne	1c650 <__assert_fail@plt+0xb68c>
   1c630:	add	sp, sp, #16
   1c634:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1c638:	add	sp, sp, #12
   1c63c:	bx	lr
   1c640:	ldr	r0, [pc, #20]	; 1c65c <__assert_fail@plt+0xb698>
   1c644:	mov	r1, r4
   1c648:	add	r0, pc, r0
   1c64c:	bl	1c4d4 <__assert_fail@plt+0xb510>
   1c650:	bl	10d9c <__stack_chk_fail@plt>
   1c654:	andeq	sl, r1, r4, ror #17
   1c658:	andeq	r0, r0, r4, lsl r1
   1c65c:	andeq	r6, r0, r4, ror pc
   1c660:	push	{r4, r5, r6, r7, r8, lr}
   1c664:	mov	r6, r1
   1c668:	mov	r8, r0
   1c66c:	bl	10e74 <strlen@plt>
   1c670:	mov	r4, r0
   1c674:	mov	r0, r6
   1c678:	bl	10e74 <strlen@plt>
   1c67c:	cmp	r4, #0
   1c680:	add	r3, r4, r0
   1c684:	mov	r7, r0
   1c688:	add	r0, r3, #2
   1c68c:	beq	1c6a0 <__assert_fail@plt+0xb6dc>
   1c690:	add	r2, r8, r4
   1c694:	ldrb	r2, [r2, #-1]
   1c698:	cmp	r2, #47	; 0x2f
   1c69c:	beq	1c6e8 <__assert_fail@plt+0xb724>
   1c6a0:	bl	10dfc <malloc@plt>
   1c6a4:	subs	r5, r0, #0
   1c6a8:	beq	1c6dc <__assert_fail@plt+0xb718>
   1c6ac:	mov	r2, r4
   1c6b0:	mov	r1, r8
   1c6b4:	bl	10d84 <memcpy@plt>
   1c6b8:	mov	r3, #47	; 0x2f
   1c6bc:	strb	r3, [r5, r4]
   1c6c0:	add	r4, r4, #1
   1c6c4:	add	r2, r7, #1
   1c6c8:	mov	r1, r6
   1c6cc:	add	r0, r5, r4
   1c6d0:	bl	10d84 <memcpy@plt>
   1c6d4:	mov	r0, r5
   1c6d8:	pop	{r4, r5, r6, r7, r8, pc}
   1c6dc:	ldr	r0, [pc, #36]	; 1c708 <__assert_fail@plt+0xb744>
   1c6e0:	add	r0, pc, r0
   1c6e4:	bl	1c4d4 <__assert_fail@plt+0xb510>
   1c6e8:	add	r0, r3, #1
   1c6ec:	bl	10dfc <malloc@plt>
   1c6f0:	subs	r5, r0, #0
   1c6f4:	beq	1c6dc <__assert_fail@plt+0xb718>
   1c6f8:	mov	r1, r8
   1c6fc:	mov	r2, r4
   1c700:	bl	10d84 <memcpy@plt>
   1c704:	b	1c6c4 <__assert_fail@plt+0xb700>
   1c708:	andeq	r6, r0, r4, lsl pc
   1c70c:	cmp	r1, #0
   1c710:	beq	1c7ac <__assert_fail@plt+0xb7e8>
   1c714:	push	{r4, r5, r6, r7, r8, lr}
   1c718:	add	r8, r0, r1
   1c71c:	mov	r7, r0
   1c720:	ldrb	r3, [r8, #-1]
   1c724:	cmp	r3, #0
   1c728:	bne	1c7a4 <__assert_fail@plt+0xb7e0>
   1c72c:	cmp	r0, r8
   1c730:	bcs	1c79c <__assert_fail@plt+0xb7d8>
   1c734:	mov	r5, r7
   1c738:	mov	r6, r5
   1c73c:	ldrb	r4, [r5], #1
   1c740:	cmp	r4, #0
   1c744:	beq	1c770 <__assert_fail@plt+0xb7ac>
   1c748:	bl	10e50 <__ctype_b_loc@plt>
   1c74c:	lsl	r4, r4, #1
   1c750:	ldr	r3, [r0]
   1c754:	ldrh	r0, [r3, r4]
   1c758:	ands	r0, r0, #16384	; 0x4000
   1c75c:	popeq	{r4, r5, r6, r7, r8, pc}
   1c760:	cmp	r8, r5
   1c764:	bhi	1c738 <__assert_fail@plt+0xb774>
   1c768:	ldrb	r4, [r6, #1]
   1c76c:	mov	r6, r5
   1c770:	cmp	r4, #0
   1c774:	sub	r7, r6, r7
   1c778:	clz	r7, r7
   1c77c:	lsr	r7, r7, #5
   1c780:	moveq	r4, r7
   1c784:	movne	r4, #1
   1c788:	cmp	r4, #0
   1c78c:	bne	1c7a4 <__assert_fail@plt+0xb7e0>
   1c790:	add	r7, r6, #1
   1c794:	cmp	r8, r7
   1c798:	bhi	1c734 <__assert_fail@plt+0xb770>
   1c79c:	mov	r0, #1
   1c7a0:	pop	{r4, r5, r6, r7, r8, pc}
   1c7a4:	mov	r0, #0
   1c7a8:	pop	{r4, r5, r6, r7, r8, pc}
   1c7ac:	mov	r0, r1
   1c7b0:	bx	lr
   1c7b4:	ldr	r3, [pc, #616]	; 1ca24 <__assert_fail@plt+0xba60>
   1c7b8:	ldr	r2, [pc, #616]	; 1ca28 <__assert_fail@plt+0xba64>
   1c7bc:	push	{r4, r5, r6, r7, r8, lr}
   1c7c0:	add	r3, pc, r3
   1c7c4:	ldr	r4, [r1]
   1c7c8:	ldr	r6, [r3, r2]
   1c7cc:	mov	ip, r0
   1c7d0:	ldrb	r0, [r0, r4]
   1c7d4:	sub	sp, sp, #16
   1c7d8:	ldr	r2, [r6]
   1c7dc:	sub	r3, r0, #48	; 0x30
   1c7e0:	mov	r5, r1
   1c7e4:	str	r2, [sp, #12]
   1c7e8:	add	r1, ip, r4
   1c7ec:	add	r7, r4, #1
   1c7f0:	cmp	r3, #72	; 0x48
   1c7f4:	addls	pc, pc, r3, lsl #2
   1c7f8:	b	1c924 <__assert_fail@plt+0xb960>
   1c7fc:	b	1c9c0 <__assert_fail@plt+0xb9fc>
   1c800:	b	1c9c0 <__assert_fail@plt+0xb9fc>
   1c804:	b	1c9c0 <__assert_fail@plt+0xb9fc>
   1c808:	b	1c9c0 <__assert_fail@plt+0xb9fc>
   1c80c:	b	1c9c0 <__assert_fail@plt+0xb9fc>
   1c810:	b	1c9c0 <__assert_fail@plt+0xb9fc>
   1c814:	b	1c9c0 <__assert_fail@plt+0xb9fc>
   1c818:	b	1c9c0 <__assert_fail@plt+0xb9fc>
   1c81c:	b	1c924 <__assert_fail@plt+0xb960>
   1c820:	b	1c924 <__assert_fail@plt+0xb960>
   1c824:	b	1c924 <__assert_fail@plt+0xb960>
   1c828:	b	1c924 <__assert_fail@plt+0xb960>
   1c82c:	b	1c924 <__assert_fail@plt+0xb960>
   1c830:	b	1c924 <__assert_fail@plt+0xb960>
   1c834:	b	1c924 <__assert_fail@plt+0xb960>
   1c838:	b	1c924 <__assert_fail@plt+0xb960>
   1c83c:	b	1c924 <__assert_fail@plt+0xb960>
   1c840:	b	1c924 <__assert_fail@plt+0xb960>
   1c844:	b	1c924 <__assert_fail@plt+0xb960>
   1c848:	b	1c924 <__assert_fail@plt+0xb960>
   1c84c:	b	1c924 <__assert_fail@plt+0xb960>
   1c850:	b	1c924 <__assert_fail@plt+0xb960>
   1c854:	b	1c924 <__assert_fail@plt+0xb960>
   1c858:	b	1c924 <__assert_fail@plt+0xb960>
   1c85c:	b	1c924 <__assert_fail@plt+0xb960>
   1c860:	b	1c924 <__assert_fail@plt+0xb960>
   1c864:	b	1c924 <__assert_fail@plt+0xb960>
   1c868:	b	1c924 <__assert_fail@plt+0xb960>
   1c86c:	b	1c924 <__assert_fail@plt+0xb960>
   1c870:	b	1c924 <__assert_fail@plt+0xb960>
   1c874:	b	1c924 <__assert_fail@plt+0xb960>
   1c878:	b	1c924 <__assert_fail@plt+0xb960>
   1c87c:	b	1c924 <__assert_fail@plt+0xb960>
   1c880:	b	1c924 <__assert_fail@plt+0xb960>
   1c884:	b	1c924 <__assert_fail@plt+0xb960>
   1c888:	b	1c924 <__assert_fail@plt+0xb960>
   1c88c:	b	1c924 <__assert_fail@plt+0xb960>
   1c890:	b	1c924 <__assert_fail@plt+0xb960>
   1c894:	b	1c924 <__assert_fail@plt+0xb960>
   1c898:	b	1c924 <__assert_fail@plt+0xb960>
   1c89c:	b	1c924 <__assert_fail@plt+0xb960>
   1c8a0:	b	1c924 <__assert_fail@plt+0xb960>
   1c8a4:	b	1c924 <__assert_fail@plt+0xb960>
   1c8a8:	b	1c924 <__assert_fail@plt+0xb960>
   1c8ac:	b	1c924 <__assert_fail@plt+0xb960>
   1c8b0:	b	1c924 <__assert_fail@plt+0xb960>
   1c8b4:	b	1c924 <__assert_fail@plt+0xb960>
   1c8b8:	b	1c924 <__assert_fail@plt+0xb960>
   1c8bc:	b	1c924 <__assert_fail@plt+0xb960>
   1c8c0:	b	1c920 <__assert_fail@plt+0xb95c>
   1c8c4:	b	1c940 <__assert_fail@plt+0xb97c>
   1c8c8:	b	1c924 <__assert_fail@plt+0xb960>
   1c8cc:	b	1c924 <__assert_fail@plt+0xb960>
   1c8d0:	b	1c924 <__assert_fail@plt+0xb960>
   1c8d4:	b	1c948 <__assert_fail@plt+0xb984>
   1c8d8:	b	1c924 <__assert_fail@plt+0xb960>
   1c8dc:	b	1c924 <__assert_fail@plt+0xb960>
   1c8e0:	b	1c924 <__assert_fail@plt+0xb960>
   1c8e4:	b	1c924 <__assert_fail@plt+0xb960>
   1c8e8:	b	1c924 <__assert_fail@plt+0xb960>
   1c8ec:	b	1c924 <__assert_fail@plt+0xb960>
   1c8f0:	b	1c924 <__assert_fail@plt+0xb960>
   1c8f4:	b	1c950 <__assert_fail@plt+0xb98c>
   1c8f8:	b	1c924 <__assert_fail@plt+0xb960>
   1c8fc:	b	1c924 <__assert_fail@plt+0xb960>
   1c900:	b	1c924 <__assert_fail@plt+0xb960>
   1c904:	b	1c958 <__assert_fail@plt+0xb994>
   1c908:	b	1c924 <__assert_fail@plt+0xb960>
   1c90c:	b	1c960 <__assert_fail@plt+0xb99c>
   1c910:	b	1c924 <__assert_fail@plt+0xb960>
   1c914:	b	1c968 <__assert_fail@plt+0xb9a4>
   1c918:	b	1c924 <__assert_fail@plt+0xb960>
   1c91c:	b	1c970 <__assert_fail@plt+0xb9ac>
   1c920:	mov	r0, #7
   1c924:	ldr	r2, [sp, #12]
   1c928:	ldr	r3, [r6]
   1c92c:	str	r7, [r5]
   1c930:	cmp	r2, r3
   1c934:	bne	1ca20 <__assert_fail@plt+0xba5c>
   1c938:	add	sp, sp, #16
   1c93c:	pop	{r4, r5, r6, r7, r8, pc}
   1c940:	mov	r0, #8
   1c944:	b	1c924 <__assert_fail@plt+0xb960>
   1c948:	mov	r0, #12
   1c94c:	b	1c924 <__assert_fail@plt+0xb960>
   1c950:	mov	r0, #10
   1c954:	b	1c924 <__assert_fail@plt+0xb960>
   1c958:	mov	r0, #13
   1c95c:	b	1c924 <__assert_fail@plt+0xb960>
   1c960:	mov	r0, #9
   1c964:	b	1c924 <__assert_fail@plt+0xb960>
   1c968:	mov	r0, #11
   1c96c:	b	1c924 <__assert_fail@plt+0xb960>
   1c970:	add	r4, sp, #8
   1c974:	add	r1, ip, r7
   1c978:	mov	r3, #0
   1c97c:	mov	r2, #2
   1c980:	mov	r0, r4
   1c984:	strb	r3, [sp, #10]
   1c988:	bl	10eb0 <strncpy@plt>
   1c98c:	mov	r0, r4
   1c990:	mov	r2, #16
   1c994:	add	r1, sp, #4
   1c998:	bl	10d30 <strtol@plt>
   1c99c:	ldr	r3, [sp, #4]
   1c9a0:	cmp	r3, r4
   1c9a4:	subhi	r3, r3, r4
   1c9a8:	addhi	r7, r7, r3
   1c9ac:	uxtbhi	r0, r0
   1c9b0:	bhi	1c924 <__assert_fail@plt+0xb960>
   1c9b4:	ldr	r0, [pc, #112]	; 1ca2c <__assert_fail@plt+0xba68>
   1c9b8:	add	r0, pc, r0
   1c9bc:	bl	1c4d4 <__assert_fail@plt+0xb510>
   1c9c0:	add	r8, sp, #8
   1c9c4:	mov	r3, #0
   1c9c8:	mov	r2, #3
   1c9cc:	mov	r0, r8
   1c9d0:	strb	r3, [sp, #11]
   1c9d4:	bl	10eb0 <strncpy@plt>
   1c9d8:	mov	r0, r8
   1c9dc:	mov	r2, #8
   1c9e0:	add	r1, sp, #4
   1c9e4:	bl	10d30 <strtol@plt>
   1c9e8:	ldr	r7, [sp, #4]
   1c9ec:	cmp	r7, r8
   1c9f0:	subhi	r7, r7, r8
   1c9f4:	addhi	r7, r7, r4
   1c9f8:	uxtbhi	r0, r0
   1c9fc:	bhi	1c924 <__assert_fail@plt+0xb960>
   1ca00:	ldr	r3, [pc, #40]	; 1ca30 <__assert_fail@plt+0xba6c>
   1ca04:	ldr	r1, [pc, #40]	; 1ca34 <__assert_fail@plt+0xba70>
   1ca08:	ldr	r0, [pc, #40]	; 1ca38 <__assert_fail@plt+0xba74>
   1ca0c:	add	r3, pc, r3
   1ca10:	mov	r2, #150	; 0x96
   1ca14:	add	r1, pc, r1
   1ca18:	add	r0, pc, r0
   1ca1c:	bl	10fc4 <__assert_fail@plt>
   1ca20:	bl	10d9c <__stack_chk_fail@plt>
   1ca24:	andeq	sl, r1, r4, asr #13
   1ca28:	andeq	r0, r0, r4, lsl r1
   1ca2c:	andeq	r7, r0, r8, ror #31
   1ca30:	andeq	r7, r0, r4, ror #30
   1ca34:	andeq	r7, r0, r8, ror pc
   1ca38:	andeq	r7, r0, ip, ror pc
   1ca3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ca40:	mov	r4, #0
   1ca44:	str	r4, [r1]
   1ca48:	mov	r8, r1
   1ca4c:	ldr	r1, [pc, #240]	; 1cb44 <__assert_fail@plt+0xbb80>
   1ca50:	mov	r9, r2
   1ca54:	add	r1, pc, r1
   1ca58:	mov	r5, r0
   1ca5c:	bl	10d24 <strcmp@plt>
   1ca60:	subs	r7, r0, #0
   1ca64:	beq	1ca7c <__assert_fail@plt+0xbab8>
   1ca68:	mov	r1, r4
   1ca6c:	mov	r0, r5
   1ca70:	bl	10e38 <open@plt>
   1ca74:	subs	r7, r0, #0
   1ca78:	blt	1cb28 <__assert_fail@plt+0xbb64>
   1ca7c:	mov	r0, #1024	; 0x400
   1ca80:	bl	10dfc <malloc@plt>
   1ca84:	subs	r6, r0, #0
   1ca88:	movne	r4, #0
   1ca8c:	movne	r5, #1024	; 0x400
   1ca90:	beq	1cb38 <__assert_fail@plt+0xbb74>
   1ca94:	sub	r2, r5, r4
   1ca98:	add	r1, r6, r4
   1ca9c:	mov	r0, r7
   1caa0:	bl	10d48 <read@plt>
   1caa4:	cmp	r0, #0
   1caa8:	blt	1cae4 <__assert_fail@plt+0xbb20>
   1caac:	add	r4, r4, r0
   1cab0:	beq	1cb14 <__assert_fail@plt+0xbb50>
   1cab4:	cmp	r5, r4
   1cab8:	bne	1ca94 <__assert_fail@plt+0xbad0>
   1cabc:	lsl	r5, r5, #1
   1cac0:	mov	r0, r6
   1cac4:	mov	r1, r5
   1cac8:	bl	10da8 <realloc@plt>
   1cacc:	subs	r6, r0, #0
   1cad0:	bne	1ca94 <__assert_fail@plt+0xbad0>
   1cad4:	ldr	r0, [pc, #108]	; 1cb48 <__assert_fail@plt+0xbb84>
   1cad8:	mov	r1, r5
   1cadc:	add	r0, pc, r0
   1cae0:	bl	1c4d4 <__assert_fail@plt+0xb510>
   1cae4:	bl	10e8c <__errno_location@plt>
   1cae8:	ldr	r4, [r0]
   1caec:	mov	r0, r7
   1caf0:	bl	10f94 <close@plt>
   1caf4:	cmp	r4, #0
   1caf8:	beq	1cb1c <__assert_fail@plt+0xbb58>
   1cafc:	mov	r0, r6
   1cb00:	bl	10d60 <free@plt>
   1cb04:	cmp	r9, #0
   1cb08:	strne	r5, [r9]
   1cb0c:	mov	r0, r4
   1cb10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb14:	mov	r0, r7
   1cb18:	bl	10f94 <close@plt>
   1cb1c:	mov	r4, #0
   1cb20:	str	r6, [r8]
   1cb24:	b	1cb04 <__assert_fail@plt+0xbb40>
   1cb28:	bl	10e8c <__errno_location@plt>
   1cb2c:	ldr	r4, [r0]
   1cb30:	mov	r0, r4
   1cb34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb38:	ldr	r0, [pc, #12]	; 1cb4c <__assert_fail@plt+0xbb88>
   1cb3c:	add	r0, pc, r0
   1cb40:	bl	1c4d4 <__assert_fail@plt+0xb510>
   1cb44:	andeq	r5, r0, r8, asr #31
   1cb48:	andeq	r6, r0, r0, ror #21
   1cb4c:			; <UNDEFINED> instruction: 0x00006ab8
   1cb50:	push	{r4, r5, r6, lr}
   1cb54:	sub	sp, sp, #16
   1cb58:	ldr	r4, [pc, #124]	; 1cbdc <__assert_fail@plt+0xbc18>
   1cb5c:	ldr	r3, [pc, #124]	; 1cbe0 <__assert_fail@plt+0xbc1c>
   1cb60:	add	r4, pc, r4
   1cb64:	mov	r2, r1
   1cb68:	ldr	r5, [r4, r3]
   1cb6c:	add	r1, sp, #8
   1cb70:	mov	r6, r0
   1cb74:	ldr	r3, [r5]
   1cb78:	str	r3, [sp, #12]
   1cb7c:	bl	1ca3c <__assert_fail@plt+0xba78>
   1cb80:	cmp	r0, #0
   1cb84:	ldreq	r0, [sp, #8]
   1cb88:	bne	1cba4 <__assert_fail@plt+0xbbe0>
   1cb8c:	ldr	r2, [sp, #12]
   1cb90:	ldr	r3, [r5]
   1cb94:	cmp	r2, r3
   1cb98:	bne	1cbd8 <__assert_fail@plt+0xbc14>
   1cb9c:	add	sp, sp, #16
   1cba0:	pop	{r4, r5, r6, pc}
   1cba4:	ldr	r3, [pc, #56]	; 1cbe4 <__assert_fail@plt+0xbc20>
   1cba8:	ldr	r3, [r4, r3]
   1cbac:	ldr	r4, [r3]
   1cbb0:	bl	10e14 <strerror@plt>
   1cbb4:	ldr	r2, [pc, #44]	; 1cbe8 <__assert_fail@plt+0xbc24>
   1cbb8:	mov	r3, r6
   1cbbc:	add	r2, pc, r2
   1cbc0:	mov	r1, #1
   1cbc4:	str	r0, [sp]
   1cbc8:	mov	r0, r4
   1cbcc:	bl	10ee0 <__fprintf_chk@plt>
   1cbd0:	mov	r0, #0
   1cbd4:	b	1cb8c <__assert_fail@plt+0xbbc8>
   1cbd8:	bl	10d9c <__stack_chk_fail@plt>
   1cbdc:	andeq	sl, r1, r4, lsr #6
   1cbe0:	andeq	r0, r0, r4, lsl r1
   1cbe4:	andeq	r0, r0, ip, lsr r1
   1cbe8:	andeq	r7, r0, ip, lsl #28
   1cbec:	push	{r4, r5, r6, r7, r8, lr}
   1cbf0:	mov	r6, r1
   1cbf4:	ldr	r1, [pc, #268]	; 1cd08 <__assert_fail@plt+0xbd44>
   1cbf8:	mov	r4, r0
   1cbfc:	add	r1, pc, r1
   1cc00:	bl	10d24 <strcmp@plt>
   1cc04:	cmp	r0, #0
   1cc08:	bne	1cc94 <__assert_fail@plt+0xbcd0>
   1cc0c:	ldr	r3, [r6, #4]
   1cc10:	lsr	r5, r3, #24
   1cc14:	lsl	r2, r3, #8
   1cc18:	orr	r5, r5, r3, lsl #24
   1cc1c:	and	r2, r2, #16711680	; 0xff0000
   1cc20:	lsr	r3, r3, #8
   1cc24:	orr	r5, r5, r2
   1cc28:	and	r3, r3, #65280	; 0xff00
   1cc2c:	orr	r5, r5, r3
   1cc30:	cmp	r5, #0
   1cc34:	movgt	r8, #1
   1cc38:	ble	1cce4 <__assert_fail@plt+0xbd20>
   1cc3c:	mov	r4, #0
   1cc40:	b	1cc4c <__assert_fail@plt+0xbc88>
   1cc44:	cmp	r4, r5
   1cc48:	bge	1ccec <__assert_fail@plt+0xbd28>
   1cc4c:	sub	r2, r5, r4
   1cc50:	add	r1, r6, r4
   1cc54:	mov	r0, r8
   1cc58:	bl	10ed4 <write@plt>
   1cc5c:	subs	r7, r0, #0
   1cc60:	add	r4, r4, r7
   1cc64:	bge	1cc44 <__assert_fail@plt+0xbc80>
   1cc68:	bl	10e8c <__errno_location@plt>
   1cc6c:	cmp	r8, #1
   1cc70:	ldr	r7, [r0]
   1cc74:	rsb	r7, r7, #0
   1cc78:	beq	1cc84 <__assert_fail@plt+0xbcc0>
   1cc7c:	mov	r0, r8
   1cc80:	bl	10f94 <close@plt>
   1cc84:	cmp	r7, #0
   1cc88:	bge	1cce4 <__assert_fail@plt+0xbd20>
   1cc8c:	rsb	r0, r7, #0
   1cc90:	pop	{r4, r5, r6, r7, r8, pc}
   1cc94:	mov	r0, r4
   1cc98:	ldr	r2, [pc, #108]	; 1cd0c <__assert_fail@plt+0xbd48>
   1cc9c:	ldr	r1, [pc, #108]	; 1cd10 <__assert_fail@plt+0xbd4c>
   1cca0:	bl	10e38 <open@plt>
   1cca4:	subs	r8, r0, #0
   1cca8:	blt	1ccfc <__assert_fail@plt+0xbd38>
   1ccac:	ldr	r3, [r6, #4]
   1ccb0:	lsr	r5, r3, #24
   1ccb4:	lsl	r2, r3, #8
   1ccb8:	orr	r5, r5, r3, lsl #24
   1ccbc:	and	r2, r2, #16711680	; 0xff0000
   1ccc0:	lsr	r3, r3, #8
   1ccc4:	orr	r5, r5, r2
   1ccc8:	and	r3, r3, #65280	; 0xff00
   1cccc:	orr	r5, r5, r3
   1ccd0:	cmp	r5, #0
   1ccd4:	bgt	1cc3c <__assert_fail@plt+0xbc78>
   1ccd8:	cmp	r8, #1
   1ccdc:	beq	1cce4 <__assert_fail@plt+0xbd20>
   1cce0:	bl	10f94 <close@plt>
   1cce4:	mov	r0, #0
   1cce8:	pop	{r4, r5, r6, r7, r8, pc}
   1ccec:	cmp	r8, #1
   1ccf0:	bne	1cc7c <__assert_fail@plt+0xbcb8>
   1ccf4:	mov	r0, #0
   1ccf8:	pop	{r4, r5, r6, r7, r8, pc}
   1ccfc:	bl	10e8c <__errno_location@plt>
   1cd00:	ldr	r0, [r0]
   1cd04:	pop	{r4, r5, r6, r7, r8, pc}
   1cd08:	andeq	r5, r0, r0, lsr #28
   1cd0c:			; <UNDEFINED> instruction: 0x000001b6
   1cd10:	andeq	r0, r0, r1, asr #4
   1cd14:	push	{r4, r5, lr}
   1cd18:	sub	sp, sp, #12
   1cd1c:	mov	r4, r0
   1cd20:	bl	1cbec <__assert_fail@plt+0xbc28>
   1cd24:	ldr	r2, [pc, #80]	; 1cd7c <__assert_fail@plt+0xbdb8>
   1cd28:	add	r2, pc, r2
   1cd2c:	subs	r3, r0, #0
   1cd30:	bne	1cd40 <__assert_fail@plt+0xbd7c>
   1cd34:	mov	r0, r3
   1cd38:	add	sp, sp, #12
   1cd3c:	pop	{r4, r5, pc}
   1cd40:	ldr	r3, [pc, #56]	; 1cd80 <__assert_fail@plt+0xbdbc>
   1cd44:	ldr	r3, [r2, r3]
   1cd48:	ldr	r5, [r3]
   1cd4c:	bl	10e14 <strerror@plt>
   1cd50:	ldr	r2, [pc, #44]	; 1cd84 <__assert_fail@plt+0xbdc0>
   1cd54:	mov	r3, r4
   1cd58:	add	r2, pc, r2
   1cd5c:	mov	r1, #1
   1cd60:	str	r0, [sp]
   1cd64:	mov	r0, r5
   1cd68:	bl	10ee0 <__fprintf_chk@plt>
   1cd6c:	mvn	r3, #0
   1cd70:	mov	r0, r3
   1cd74:	add	sp, sp, #12
   1cd78:	pop	{r4, r5, pc}
   1cd7c:	andeq	sl, r1, ip, asr r1
   1cd80:	andeq	r0, r0, ip, lsr r1
   1cd84:	muleq	r0, r4, ip
   1cd88:	ldrb	r3, [r0]
   1cd8c:	cmp	r3, #0
   1cd90:	beq	1ce70 <__assert_fail@plt+0xbeac>
   1cd94:	mvn	r3, #0
   1cd98:	push	{r4, r5, r6, r7, r8, lr}
   1cd9c:	mov	r5, r0
   1cda0:	str	r3, [r2]
   1cda4:	ldrb	r4, [r0]
   1cda8:	ldr	r0, [pc, #200]	; 1ce78 <__assert_fail@plt+0xbeb4>
   1cdac:	mov	r8, r1
   1cdb0:	add	r0, pc, r0
   1cdb4:	mov	r1, r4
   1cdb8:	mov	r7, r2
   1cdbc:	bl	10e80 <strchr@plt>
   1cdc0:	mov	r6, r4
   1cdc4:	cmp	r0, #0
   1cdc8:	moveq	r6, r0
   1cdcc:	beq	1cde4 <__assert_fail@plt+0xbe20>
   1cdd0:	ldrb	r3, [r5, #1]
   1cdd4:	cmp	r4, r3
   1cdd8:	beq	1ce50 <__assert_fail@plt+0xbe8c>
   1cddc:	add	r5, r5, #1
   1cde0:	mov	r4, r3
   1cde4:	cmp	r4, #0
   1cde8:	beq	1ce68 <__assert_fail@plt+0xbea4>
   1cdec:	ldr	r0, [pc, #136]	; 1ce7c <__assert_fail@plt+0xbeb8>
   1cdf0:	mov	r1, r4
   1cdf4:	add	r0, pc, r0
   1cdf8:	bl	10e80 <strchr@plt>
   1cdfc:	cmp	r0, #0
   1ce00:	beq	1ce68 <__assert_fail@plt+0xbea4>
   1ce04:	cmp	r4, #115	; 0x73
   1ce08:	beq	1ce38 <__assert_fail@plt+0xbe74>
   1ce0c:	cmp	r6, #98	; 0x62
   1ce10:	moveq	r3, #1
   1ce14:	beq	1ce30 <__assert_fail@plt+0xbe6c>
   1ce18:	cmp	r6, #104	; 0x68
   1ce1c:	moveq	r3, #2
   1ce20:	beq	1ce30 <__assert_fail@plt+0xbe6c>
   1ce24:	cmp	r6, #108	; 0x6c
   1ce28:	moveq	r3, #4
   1ce2c:	mvnne	r3, #0
   1ce30:	str	r3, [r7]
   1ce34:	ldrb	r4, [r5]
   1ce38:	str	r4, [r8]
   1ce3c:	ldrb	r0, [r5, #1]
   1ce40:	adds	r0, r0, #0
   1ce44:	movne	r0, #1
   1ce48:	rsb	r0, r0, #0
   1ce4c:	pop	{r4, r5, r6, r7, r8, pc}
   1ce50:	cmp	r6, #104	; 0x68
   1ce54:	add	r3, r5, #2
   1ce58:	ldrb	r4, [r5, #2]
   1ce5c:	moveq	r6, #98	; 0x62
   1ce60:	mov	r5, r3
   1ce64:	b	1cde4 <__assert_fail@plt+0xbe20>
   1ce68:	mvn	r0, #0
   1ce6c:	pop	{r4, r5, r6, r7, r8, pc}
   1ce70:	mvn	r0, #0
   1ce74:	bx	lr
   1ce78:	andeq	r7, r0, r0, ror #24
   1ce7c:	andeq	r7, r0, r4, lsr #24
   1ce80:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce84:	subs	fp, r1, #0
   1ce88:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce8c:	mov	r4, r0
   1ce90:	bl	1c70c <__assert_fail@plt+0xb748>
   1ce94:	cmp	r0, #0
   1ce98:	bne	1cfb8 <__assert_fail@plt+0xbff4>
   1ce9c:	ands	r5, fp, #3
   1cea0:	bne	1cf40 <__assert_fail@plt+0xbf7c>
   1cea4:	ldr	r1, [pc, #360]	; 1d014 <__assert_fail@plt+0xc050>
   1cea8:	mov	r0, #1
   1ceac:	add	r1, pc, r1
   1ceb0:	bl	10ec8 <__printf_chk@plt>
   1ceb4:	cmp	fp, #0
   1ceb8:	add	r6, fp, #3
   1cebc:	movge	r6, fp
   1cec0:	cmp	fp, #3
   1cec4:	asr	r6, r6, #2
   1cec8:	ble	1cf34 <__assert_fail@plt+0xbf70>
   1cecc:	ldr	sl, [pc, #324]	; 1d018 <__assert_fail@plt+0xc054>
   1ced0:	ldr	r9, [pc, #324]	; 1d01c <__assert_fail@plt+0xc058>
   1ced4:	ldr	r8, [pc, #324]	; 1d020 <__assert_fail@plt+0xc05c>
   1ced8:	add	sl, pc, sl
   1cedc:	add	r9, pc, r9
   1cee0:	add	r8, pc, r8
   1cee4:	sub	r4, r4, #4
   1cee8:	sub	r7, r6, #1
   1ceec:	ldr	r1, [r4, #4]!
   1cef0:	cmp	r5, r7
   1cef4:	movlt	r3, sl
   1cef8:	lsr	r2, r1, #24
   1cefc:	lsl	r0, r1, #8
   1cf00:	orr	r2, r2, r1, lsl #24
   1cf04:	and	r0, r0, #16711680	; 0xff0000
   1cf08:	lsr	r1, r1, #8
   1cf0c:	orr	r2, r2, r0
   1cf10:	and	r1, r1, #65280	; 0xff00
   1cf14:	movge	r3, r9
   1cf18:	orr	r2, r2, r1
   1cf1c:	add	r5, r5, #1
   1cf20:	mov	r1, r8
   1cf24:	mov	r0, #1
   1cf28:	bl	10ec8 <__printf_chk@plt>
   1cf2c:	cmp	r6, r5
   1cf30:	bgt	1ceec <__assert_fail@plt+0xbf28>
   1cf34:	mov	r0, #62	; 0x3e
   1cf38:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf3c:	b	10ea4 <putchar@plt>
   1cf40:	ldr	r1, [pc, #220]	; 1d024 <__assert_fail@plt+0xc060>
   1cf44:	mov	r0, #1
   1cf48:	add	r1, pc, r1
   1cf4c:	bl	10ec8 <__printf_chk@plt>
   1cf50:	cmp	fp, #0
   1cf54:	ble	1cfac <__assert_fail@plt+0xbfe8>
   1cf58:	ldr	sl, [pc, #200]	; 1d028 <__assert_fail@plt+0xc064>
   1cf5c:	ldr	r9, [pc, #200]	; 1d02c <__assert_fail@plt+0xc068>
   1cf60:	ldr	r8, [pc, #200]	; 1d030 <__assert_fail@plt+0xc06c>
   1cf64:	sub	r7, fp, #1
   1cf68:	add	sl, pc, sl
   1cf6c:	add	r9, pc, r9
   1cf70:	add	r8, pc, r8
   1cf74:	add	fp, r4, fp
   1cf78:	mov	r6, r4
   1cf7c:	add	r6, r6, #1
   1cf80:	mov	r3, r6
   1cf84:	mov	r1, r8
   1cf88:	ldrb	r2, [r3, #-1]!
   1cf8c:	mov	r0, #1
   1cf90:	sub	r3, r3, r4
   1cf94:	cmp	r3, r7
   1cf98:	movge	r3, sl
   1cf9c:	movlt	r3, r9
   1cfa0:	bl	10ec8 <__printf_chk@plt>
   1cfa4:	cmp	r6, fp
   1cfa8:	bne	1cf7c <__assert_fail@plt+0xbfb8>
   1cfac:	mov	r0, #93	; 0x5d
   1cfb0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfb4:	b	10ea4 <putchar@plt>
   1cfb8:	ldr	r1, [pc, #116]	; 1d034 <__assert_fail@plt+0xc070>
   1cfbc:	mov	r0, #1
   1cfc0:	add	r1, pc, r1
   1cfc4:	bl	10ec8 <__printf_chk@plt>
   1cfc8:	ldr	r6, [pc, #104]	; 1d038 <__assert_fail@plt+0xc074>
   1cfcc:	ldr	r7, [pc, #104]	; 1d03c <__assert_fail@plt+0xc078>
   1cfd0:	add	r6, pc, r6
   1cfd4:	add	r7, pc, r7
   1cfd8:	add	fp, r4, fp
   1cfdc:	mov	r2, r4
   1cfe0:	mov	r1, r6
   1cfe4:	mov	r0, #1
   1cfe8:	bl	10ec8 <__printf_chk@plt>
   1cfec:	mov	r0, r4
   1cff0:	bl	10e74 <strlen@plt>
   1cff4:	add	r0, r0, #1
   1cff8:	add	r4, r4, r0
   1cffc:	cmp	r4, fp
   1d000:	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d004:	mov	r1, r7
   1d008:	mov	r0, #1
   1d00c:	bl	10ec8 <__printf_chk@plt>
   1d010:	b	1cfdc <__assert_fail@plt+0xc018>
   1d014:	andeq	r7, r0, r8, ror fp
   1d018:	andeq	r4, r0, r0, ror #29
   1d01c:	andeq	r6, r0, r8, asr #17
   1d020:	andeq	r7, r0, ip, asr #22
   1d024:	strdeq	r7, [r0], -r0
   1d028:	andeq	r6, r0, ip, lsr r8
   1d02c:	andeq	r4, r0, ip, asr #28
   1d030:	ldrdeq	r7, [r0], -r0
   1d034:	muleq	r0, r8, r8
   1d038:	andeq	r5, r0, r0, lsl #4
   1d03c:	andeq	r7, r0, ip, asr #20
   1d040:	ldr	r2, [pc, #28]	; 1d064 <__assert_fail@plt+0xc0a0>
   1d044:	ldr	r1, [pc, #28]	; 1d068 <__assert_fail@plt+0xc0a4>
   1d048:	push	{r4, lr}
   1d04c:	add	r2, pc, r2
   1d050:	add	r1, pc, r1
   1d054:	mov	r0, #1
   1d058:	bl	10ec8 <__printf_chk@plt>
   1d05c:	mov	r0, #0
   1d060:	bl	10e5c <exit@plt>
   1d064:	strdeq	r7, [r0], -ip
   1d068:	andeq	r7, r0, r4, lsl #20
   1d06c:	push	{r7, fp, lr}
   1d070:	sub	sp, sp, #44	; 0x2c
   1d074:	ldr	lr, [pc, #604]	; 1d2d8 <__assert_fail@plt+0xc314>
   1d078:	ldr	ip, [pc, #604]	; 1d2dc <__assert_fail@plt+0xc318>
   1d07c:	add	lr, pc, lr
   1d080:	cmp	r0, #0
   1d084:	str	r0, [sp, #20]
   1d088:	mov	r5, r1
   1d08c:	ldr	r1, [lr, ip]
   1d090:	mov	r4, r3
   1d094:	mov	r8, r2
   1d098:	ldr	r3, [r1]
   1d09c:	ldr	r6, [sp, #56]	; 0x38
   1d0a0:	str	r3, [sp, #36]	; 0x24
   1d0a4:	beq	1d284 <__assert_fail@plt+0xc2c0>
   1d0a8:	ldr	r3, [pc, #560]	; 1d2e0 <__assert_fail@plt+0xc31c>
   1d0ac:	ldr	r2, [pc, #560]	; 1d2e4 <__assert_fail@plt+0xc320>
   1d0b0:	add	r3, pc, r3
   1d0b4:	ldm	r3, {r0, r1}
   1d0b8:	ldr	r3, [lr, r2]
   1d0bc:	str	r0, [sp, #28]
   1d0c0:	add	r0, sp, #28
   1d0c4:	ldr	r7, [r3]
   1d0c8:	strh	r1, [sp, #32]
   1d0cc:	bl	10e74 <strlen@plt>
   1d0d0:	ldr	r2, [pc, #528]	; 1d2e8 <__assert_fail@plt+0xc324>
   1d0d4:	mov	r1, #1
   1d0d8:	str	r8, [sp]
   1d0dc:	mov	r3, r5
   1d0e0:	add	r2, pc, r2
   1d0e4:	add	r8, r0, r1
   1d0e8:	mov	r0, r7
   1d0ec:	bl	10ee0 <__fprintf_chk@plt>
   1d0f0:	ldr	r0, [r4]
   1d0f4:	cmp	r0, #0
   1d0f8:	beq	1d264 <__assert_fail@plt+0xc2a0>
   1d0fc:	mov	r9, r4
   1d100:	mov	r5, #0
   1d104:	bl	10e74 <strlen@plt>
   1d108:	ldr	r3, [r9, #4]
   1d10c:	cmp	r3, #1
   1d110:	add	r3, r0, #1
   1d114:	addeq	r3, r3, r8
   1d118:	ldr	r0, [r9, #16]!
   1d11c:	cmp	r5, r3
   1d120:	movlt	r5, r3
   1d124:	cmp	r0, #0
   1d128:	bne	1d104 <__assert_fail@plt+0xc140>
   1d12c:	ldr	r3, [r6]
   1d130:	cmp	r3, #0
   1d134:	beq	1d234 <__assert_fail@plt+0xc270>
   1d138:	ldr	sl, [pc, #428]	; 1d2ec <__assert_fail@plt+0xc328>
   1d13c:	ldr	r9, [pc, #428]	; 1d2f0 <__assert_fail@plt+0xc32c>
   1d140:	add	sl, pc, sl
   1d144:	add	r9, pc, r9
   1d148:	add	r4, r4, #16
   1d14c:	b	1d1c4 <__assert_fail@plt+0xc200>
   1d150:	mov	r2, #6
   1d154:	mov	r3, r7
   1d158:	mov	r1, #1
   1d15c:	mov	r0, r9
   1d160:	bl	10dcc <fwrite@plt>
   1d164:	ldr	r2, [r4, #-12]
   1d168:	ldr	fp, [r4, #-16]
   1d16c:	cmp	r2, #0
   1d170:	bne	1d1f0 <__assert_fail@plt+0xc22c>
   1d174:	ldr	r2, [pc, #376]	; 1d2f4 <__assert_fail@plt+0xc330>
   1d178:	str	fp, [sp]
   1d17c:	mov	r3, r5
   1d180:	add	r2, pc, r2
   1d184:	mov	r1, #1
   1d188:	mov	r0, r7
   1d18c:	bl	10ee0 <__fprintf_chk@plt>
   1d190:	ldr	r2, [pc, #352]	; 1d2f8 <__assert_fail@plt+0xc334>
   1d194:	ldr	r3, [r6], #4
   1d198:	add	r2, pc, r2
   1d19c:	mov	r1, #1
   1d1a0:	mov	r0, r7
   1d1a4:	bl	10ee0 <__fprintf_chk@plt>
   1d1a8:	ldr	r3, [r4]
   1d1ac:	cmp	r3, #0
   1d1b0:	beq	1d258 <__assert_fail@plt+0xc294>
   1d1b4:	ldr	r3, [r6]
   1d1b8:	add	r4, r4, #16
   1d1bc:	cmp	r3, #0
   1d1c0:	beq	1d234 <__assert_fail@plt+0xc270>
   1d1c4:	ldr	r3, [r4, #-4]
   1d1c8:	cmp	r3, #126	; 0x7e
   1d1cc:	bgt	1d150 <__assert_fail@plt+0xc18c>
   1d1d0:	mov	r2, sl
   1d1d4:	mov	r1, #1
   1d1d8:	mov	r0, r7
   1d1dc:	bl	10ee0 <__fprintf_chk@plt>
   1d1e0:	ldr	r2, [r4, #-12]
   1d1e4:	ldr	fp, [r4, #-16]
   1d1e8:	cmp	r2, #0
   1d1ec:	beq	1d174 <__assert_fail@plt+0xc1b0>
   1d1f0:	mov	r0, fp
   1d1f4:	bl	10e74 <strlen@plt>
   1d1f8:	ldr	r2, [pc, #252]	; 1d2fc <__assert_fail@plt+0xc338>
   1d1fc:	sub	ip, r5, r8
   1d200:	add	r2, pc, r2
   1d204:	str	r2, [sp, #8]
   1d208:	add	r2, sp, #28
   1d20c:	str	r2, [sp]
   1d210:	ldr	r2, [pc, #232]	; 1d300 <__assert_fail@plt+0xc33c>
   1d214:	mov	r3, fp
   1d218:	add	r2, pc, r2
   1d21c:	mov	r1, #1
   1d220:	sub	ip, ip, r0
   1d224:	str	ip, [sp, #4]
   1d228:	mov	r0, r7
   1d22c:	bl	10ee0 <__fprintf_chk@plt>
   1d230:	b	1d190 <__assert_fail@plt+0xc1cc>
   1d234:	ldr	r3, [pc, #200]	; 1d304 <__assert_fail@plt+0xc340>
   1d238:	ldr	r1, [pc, #200]	; 1d308 <__assert_fail@plt+0xc344>
   1d23c:	ldr	r0, [pc, #200]	; 1d30c <__assert_fail@plt+0xc348>
   1d240:	add	r3, pc, r3
   1d244:	ldr	r2, [pc, #196]	; 1d310 <__assert_fail@plt+0xc34c>
   1d248:	add	r3, r3, #16
   1d24c:	add	r1, pc, r1
   1d250:	add	r0, pc, r0
   1d254:	bl	10fc4 <__assert_fail@plt>
   1d258:	ldr	r3, [sp, #20]
   1d25c:	cmp	r3, #0
   1d260:	beq	1d2d0 <__assert_fail@plt+0xc30c>
   1d264:	ldr	r2, [pc, #168]	; 1d314 <__assert_fail@plt+0xc350>
   1d268:	ldr	r3, [sp, #20]
   1d26c:	mov	r0, r7
   1d270:	add	r2, pc, r2
   1d274:	mov	r1, #1
   1d278:	bl	10ee0 <__fprintf_chk@plt>
   1d27c:	mov	r0, #1
   1d280:	bl	10e5c <exit@plt>
   1d284:	ldr	r1, [pc, #140]	; 1d318 <__assert_fail@plt+0xc354>
   1d288:	ldr	r2, [pc, #140]	; 1d31c <__assert_fail@plt+0xc358>
   1d28c:	mov	r3, r5
   1d290:	ldr	ip, [lr, r1]
   1d294:	add	r2, pc, r2
   1d298:	str	r8, [sp]
   1d29c:	ldm	r2, {r0, r1}
   1d2a0:	ldr	r7, [ip]
   1d2a4:	ldr	r2, [pc, #116]	; 1d320 <__assert_fail@plt+0xc35c>
   1d2a8:	str	r0, [sp, #28]
   1d2ac:	strh	r1, [sp, #32]
   1d2b0:	mov	r0, r7
   1d2b4:	add	r2, pc, r2
   1d2b8:	mov	r1, #1
   1d2bc:	bl	10ee0 <__fprintf_chk@plt>
   1d2c0:	ldr	r0, [r4]
   1d2c4:	cmp	r0, #0
   1d2c8:	movne	r8, #6
   1d2cc:	bne	1d0fc <__assert_fail@plt+0xc138>
   1d2d0:	mov	r0, #0
   1d2d4:	bl	10e5c <exit@plt>
   1d2d8:	andeq	r9, r1, r8, lsl #28
   1d2dc:	andeq	r0, r0, r4, lsl r1
   1d2e0:	andeq	r7, r0, r8, lsl sl
   1d2e4:	andeq	r0, r0, ip, lsr r1
   1d2e8:	andeq	r7, r0, r4, lsl #19
   1d2ec:	andeq	r7, r0, r0, ror #18
   1d2f0:	andeq	r7, r0, r4, asr r9
   1d2f4:	andeq	r7, r0, r8, lsr #18
   1d2f8:	andeq	r6, r0, ip, lsr #10
   1d2fc:	andeq	r6, r0, r4, lsr #11
   1d300:	muleq	r0, r8, r8
   1d304:	andeq	r7, r0, r0, lsr r7
   1d308:	andeq	r7, r0, r0, asr #14
   1d30c:	andeq	r7, r0, r0, lsr r8
   1d310:			; <UNDEFINED> instruction: 0x000001b7
   1d314:	andeq	r7, r0, ip, asr #16
   1d318:	andeq	r0, r0, r0, ror #2
   1d31c:	andeq	r7, r0, r4, lsr r8
   1d320:			; <UNDEFINED> instruction: 0x000077b0
   1d324:	ldr	r3, [pc, #280]	; 1d444 <__assert_fail@plt+0xc480>
   1d328:	ldr	r2, [pc, #280]	; 1d448 <__assert_fail@plt+0xc484>
   1d32c:	add	r3, pc, r3
   1d330:	ldr	r1, [pc, #276]	; 1d44c <__assert_fail@plt+0xc488>
   1d334:	add	r2, pc, r2
   1d338:	ldmib	r3, {r0, ip}
   1d33c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d340:	sub	sp, sp, #20
   1d344:	ldr	r1, [r2, r1]
   1d348:	ldr	r2, [r0, ip, lsl #2]
   1d34c:	ldr	lr, [r3, #12]
   1d350:	ldr	r8, [r1]
   1d354:	ldr	r0, [r3]
   1d358:	ldr	r2, [r2, #28]
   1d35c:	cmp	r8, lr
   1d360:	str	lr, [sp]
   1d364:	add	r0, r0, r2
   1d368:	bcs	1d43c <__assert_fail@plt+0xc478>
   1d36c:	ldr	r2, [pc, #220]	; 1d450 <__assert_fail@plt+0xc48c>
   1d370:	ldr	fp, [r3, #16]
   1d374:	ldr	sl, [r3, #20]
   1d378:	ldr	r3, [pc, #212]	; 1d454 <__assert_fail@plt+0xc490>
   1d37c:	add	r2, pc, r2
   1d380:	add	r3, pc, r3
   1d384:	add	r5, r2, #1056	; 0x420
   1d388:	str	r3, [sp, #12]
   1d38c:	mov	r4, r2
   1d390:	add	r3, r2, #256	; 0x100
   1d394:	add	r5, r5, #8
   1d398:	add	r6, r2, #1456	; 0x5b0
   1d39c:	add	r7, r2, #620	; 0x26c
   1d3a0:	mov	r9, #0
   1d3a4:	str	r3, [sp, #4]
   1d3a8:	add	r3, r2, #2384	; 0x950
   1d3ac:	str	r3, [sp, #8]
   1d3b0:	mov	r3, r8
   1d3b4:	ldrb	r2, [r8], #1
   1d3b8:	ldr	ip, [sp, #4]
   1d3bc:	cmp	r2, #0
   1d3c0:	moveq	r1, #1
   1d3c4:	ldrne	r1, [sp, #12]
   1d3c8:	ldrbne	r1, [r1, r2]
   1d3cc:	lsl	r2, r0, #1
   1d3d0:	ldrsh	ip, [ip, r2]
   1d3d4:	cmp	ip, #0
   1d3d8:	movne	sl, r3
   1d3dc:	movne	fp, r0
   1d3e0:	movne	r9, #1
   1d3e4:	b	1d3f8 <__assert_fail@plt+0xc434>
   1d3e8:	ldrsh	r0, [r7, r2]
   1d3ec:	cmp	r0, #180	; 0xb4
   1d3f0:	lsl	r2, r0, #1
   1d3f4:	ldrbgt	r1, [ip, #1012]	; 0x3f4
   1d3f8:	ldrsh	r3, [r5, r2]
   1d3fc:	add	ip, r4, r1
   1d400:	add	r3, r3, r1
   1d404:	lsl	r3, r3, #1
   1d408:	ldrsh	lr, [r6, r3]
   1d40c:	cmp	lr, r0
   1d410:	bne	1d3e8 <__assert_fail@plt+0xc424>
   1d414:	ldr	r2, [sp]
   1d418:	cmp	r2, r8
   1d41c:	ldr	r2, [sp, #8]
   1d420:	ldrsh	r0, [r2, r3]
   1d424:	bne	1d3b0 <__assert_fail@plt+0xc3ec>
   1d428:	cmp	r9, #0
   1d42c:	ldrne	r3, [pc, #36]	; 1d458 <__assert_fail@plt+0xc494>
   1d430:	addne	r3, pc, r3
   1d434:	strne	fp, [r3, #16]
   1d438:	strne	sl, [r3, #20]
   1d43c:	add	sp, sp, #20
   1d440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d444:	andeq	sl, r1, ip, lsr #14
   1d448:	andeq	r9, r1, r0, asr fp
   1d44c:	andeq	r0, r0, r8, lsr #2
   1d450:	andeq	r7, r0, r4, asr r7
   1d454:	andeq	r7, r0, r0, asr r7
   1d458:	andeq	sl, r1, r8, lsr #12
   1d45c:	push	{r0, r1, r2, r3}
   1d460:	push	{r4, r5, lr}
   1d464:	sub	sp, sp, #12
   1d468:	ldr	r4, [pc, #100]	; 1d4d4 <__assert_fail@plt+0xc510>
   1d46c:	ldr	r2, [pc, #100]	; 1d4d8 <__assert_fail@plt+0xc514>
   1d470:	add	r4, pc, r4
   1d474:	ldr	r1, [pc, #96]	; 1d4dc <__assert_fail@plt+0xc518>
   1d478:	ldr	r5, [r4, r2]
   1d47c:	add	r3, sp, #28
   1d480:	str	r3, [sp]
   1d484:	ldr	r0, [r5]
   1d488:	ldr	r2, [sp, #24]
   1d48c:	str	r0, [sp, #4]
   1d490:	ldr	r0, [r4, r1]
   1d494:	ldr	r1, [pc, #68]	; 1d4e0 <__assert_fail@plt+0xc51c>
   1d498:	add	r1, pc, r1
   1d49c:	bl	1b50c <__assert_fail@plt+0xa548>
   1d4a0:	ldr	r3, [pc, #60]	; 1d4e4 <__assert_fail@plt+0xc520>
   1d4a4:	ldr	r0, [sp, #4]
   1d4a8:	ldr	r1, [r5]
   1d4ac:	ldr	r3, [r4, r3]
   1d4b0:	mov	r2, #1
   1d4b4:	cmp	r0, r1
   1d4b8:	strb	r2, [r3]
   1d4bc:	bne	1d4d0 <__assert_fail@plt+0xc50c>
   1d4c0:	add	sp, sp, #12
   1d4c4:	pop	{r4, r5, lr}
   1d4c8:	add	sp, sp, #16
   1d4cc:	bx	lr
   1d4d0:	bl	10d9c <__stack_chk_fail@plt>
   1d4d4:	andeq	r9, r1, r4, lsl sl
   1d4d8:	andeq	r0, r0, r4, lsl r1
   1d4dc:	andeq	r0, r0, ip, lsl r1
   1d4e0:	andeq	r8, r0, r0, asr #6
   1d4e4:	andeq	r0, r0, r0, lsl #2
   1d4e8:	ldr	r1, [pc, #48]	; 1d520 <__assert_fail@plt+0xc55c>
   1d4ec:	ldr	ip, [pc, #48]	; 1d524 <__assert_fail@plt+0xc560>
   1d4f0:	add	r1, pc, r1
   1d4f4:	push	{r4, lr}
   1d4f8:	mov	r3, r0
   1d4fc:	ldr	ip, [r1, ip]
   1d500:	ldr	r2, [pc, #32]	; 1d528 <__assert_fail@plt+0xc564>
   1d504:	mov	r0, r1
   1d508:	add	r2, pc, r2
   1d50c:	mov	r1, #1
   1d510:	ldr	r0, [ip]
   1d514:	bl	10ee0 <__fprintf_chk@plt>
   1d518:	mov	r0, #2
   1d51c:	bl	10e5c <exit@plt>
   1d520:	muleq	r1, r4, r9
   1d524:	andeq	r0, r0, ip, lsr r1
   1d528:			; <UNDEFINED> instruction: 0x000061bc
   1d52c:	cmp	r0, #0
   1d530:	ldr	r1, [pc, #140]	; 1d5c4 <__assert_fail@plt+0xc600>
   1d534:	add	r1, pc, r1
   1d538:	bxeq	lr
   1d53c:	ldr	ip, [r0, #4]
   1d540:	ldr	r2, [pc, #128]	; 1d5c8 <__assert_fail@plt+0xc604>
   1d544:	mov	r3, #0
   1d548:	add	r2, pc, r2
   1d54c:	push	{r4, lr}
   1d550:	mov	r4, #1
   1d554:	str	r3, [r0, #16]
   1d558:	strb	r3, [ip]
   1d55c:	ldr	ip, [r0, #4]
   1d560:	ldr	lr, [r2, #4]
   1d564:	strb	r3, [ip, #1]
   1d568:	cmp	lr, r3
   1d56c:	ldr	ip, [r0, #4]
   1d570:	str	r3, [r0, #44]	; 0x2c
   1d574:	str	ip, [r0, #8]
   1d578:	str	r4, [r0, #28]
   1d57c:	popeq	{r4, pc}
   1d580:	ldr	r3, [r2, #8]
   1d584:	ldr	r3, [lr, r3, lsl #2]
   1d588:	cmp	r0, r3
   1d58c:	popne	{r4, pc}
   1d590:	ldr	r3, [pc, #52]	; 1d5cc <__assert_fail@plt+0xc608>
   1d594:	ldr	lr, [r0, #16]
   1d598:	str	ip, [r2, #12]
   1d59c:	str	lr, [r2, #24]
   1d5a0:	ldr	lr, [r1, r3]
   1d5a4:	ldr	r3, [pc, #36]	; 1d5d0 <__assert_fail@plt+0xc60c>
   1d5a8:	ldr	r0, [r0]
   1d5ac:	str	ip, [lr]
   1d5b0:	ldr	r3, [r1, r3]
   1d5b4:	str	r0, [r3]
   1d5b8:	ldrb	r3, [ip]
   1d5bc:	strb	r3, [r2, #28]
   1d5c0:	pop	{r4, pc}
   1d5c4:	andeq	r9, r1, r0, asr r9
   1d5c8:	andeq	sl, r1, r0, lsl r5
   1d5cc:	andeq	r0, r0, r8, lsr #2
   1d5d0:	andeq	r0, r0, r8, lsl r1
   1d5d4:	push	{r4, r5, r6, r7, r8, lr}
   1d5d8:	mov	r4, r0
   1d5dc:	mov	r7, r1
   1d5e0:	bl	10e8c <__errno_location@plt>
   1d5e4:	mov	r5, r0
   1d5e8:	mov	r0, r4
   1d5ec:	ldr	r6, [r5]
   1d5f0:	bl	1d52c <__assert_fail@plt+0xc568>
   1d5f4:	ldr	r2, [pc, #68]	; 1d640 <__assert_fail@plt+0xc67c>
   1d5f8:	mov	r0, #1
   1d5fc:	add	r2, pc, r2
   1d600:	str	r7, [r4]
   1d604:	ldr	r3, [r2, #4]
   1d608:	str	r0, [r4, #40]	; 0x28
   1d60c:	cmp	r3, #0
   1d610:	beq	1d624 <__assert_fail@plt+0xc660>
   1d614:	ldr	r2, [r2, #8]
   1d618:	ldr	r3, [r3, r2, lsl #2]
   1d61c:	cmp	r4, r3
   1d620:	beq	1d630 <__assert_fail@plt+0xc66c>
   1d624:	mov	r2, #1
   1d628:	mov	r3, #0
   1d62c:	strd	r2, [r4, #32]
   1d630:	mov	r3, #0
   1d634:	str	r3, [r4, #24]
   1d638:	str	r6, [r5]
   1d63c:	pop	{r4, r5, r6, r7, r8, pc}
   1d640:	andeq	sl, r1, ip, asr r4
   1d644:	ldr	r3, [pc, #16]	; 1d65c <__assert_fail@plt+0xc698>
   1d648:	ldr	r2, [pc, #16]	; 1d660 <__assert_fail@plt+0xc69c>
   1d64c:	add	r3, pc, r3
   1d650:	ldr	r3, [r3, r2]
   1d654:	ldr	r0, [r3]
   1d658:	bx	lr
   1d65c:	andeq	r9, r1, r8, lsr r8
   1d660:	andeq	r0, r0, r4, lsr r1
   1d664:	ldr	r3, [pc, #16]	; 1d67c <__assert_fail@plt+0xc6b8>
   1d668:	ldr	r2, [pc, #16]	; 1d680 <__assert_fail@plt+0xc6bc>
   1d66c:	add	r3, pc, r3
   1d670:	ldr	r3, [r3, r2]
   1d674:	ldr	r0, [r3]
   1d678:	bx	lr
   1d67c:	andeq	r9, r1, r8, lsl r8
   1d680:	andeq	r0, r0, r8, lsl r1
   1d684:	ldr	r3, [pc, #16]	; 1d69c <__assert_fail@plt+0xc6d8>
   1d688:	ldr	r2, [pc, #16]	; 1d6a0 <__assert_fail@plt+0xc6dc>
   1d68c:	add	r3, pc, r3
   1d690:	ldr	r3, [r3, r2]
   1d694:	ldr	r0, [r3]
   1d698:	bx	lr
   1d69c:	strdeq	r9, [r1], -r8
   1d6a0:	andeq	r0, r0, r4, asr #2
   1d6a4:	ldr	r3, [pc, #16]	; 1d6bc <__assert_fail@plt+0xc6f8>
   1d6a8:	ldr	r2, [pc, #16]	; 1d6c0 <__assert_fail@plt+0xc6fc>
   1d6ac:	add	r3, pc, r3
   1d6b0:	ldr	r3, [r3, r2]
   1d6b4:	ldr	r0, [r3]
   1d6b8:	bx	lr
   1d6bc:	ldrdeq	r9, [r1], -r8
   1d6c0:	andeq	r0, r0, r8, asr r1
   1d6c4:	ldr	r3, [pc, #16]	; 1d6dc <__assert_fail@plt+0xc718>
   1d6c8:	ldr	r2, [pc, #16]	; 1d6e0 <__assert_fail@plt+0xc71c>
   1d6cc:	add	r3, pc, r3
   1d6d0:	ldr	r3, [r3, r2]
   1d6d4:	ldr	r0, [r3]
   1d6d8:	bx	lr
   1d6dc:			; <UNDEFINED> instruction: 0x000197b8
   1d6e0:	andeq	r0, r0, r8, lsr #2
   1d6e4:	ldr	r3, [pc, #16]	; 1d6fc <__assert_fail@plt+0xc738>
   1d6e8:	ldr	r2, [pc, #16]	; 1d700 <__assert_fail@plt+0xc73c>
   1d6ec:	add	r3, pc, r3
   1d6f0:	ldr	r3, [r3, r2]
   1d6f4:	str	r0, [r3]
   1d6f8:	bx	lr
   1d6fc:	muleq	r1, r8, r7
   1d700:	andeq	r0, r0, r4, lsr r1
   1d704:	ldr	r3, [pc, #16]	; 1d71c <__assert_fail@plt+0xc758>
   1d708:	ldr	r2, [pc, #16]	; 1d720 <__assert_fail@plt+0xc75c>
   1d70c:	add	r3, pc, r3
   1d710:	ldr	r3, [r3, r2]
   1d714:	str	r0, [r3]
   1d718:	bx	lr
   1d71c:	andeq	r9, r1, r8, ror r7
   1d720:	andeq	r0, r0, r8, lsl r1
   1d724:	ldr	r3, [pc, #16]	; 1d73c <__assert_fail@plt+0xc778>
   1d728:	ldr	r2, [pc, #16]	; 1d740 <__assert_fail@plt+0xc77c>
   1d72c:	add	r3, pc, r3
   1d730:	ldr	r3, [r3, r2]
   1d734:	str	r0, [r3]
   1d738:	bx	lr
   1d73c:	andeq	r9, r1, r8, asr r7
   1d740:	andeq	r0, r0, r4, asr #2
   1d744:	ldr	r3, [pc, #16]	; 1d75c <__assert_fail@plt+0xc798>
   1d748:	ldr	r2, [pc, #16]	; 1d760 <__assert_fail@plt+0xc79c>
   1d74c:	add	r3, pc, r3
   1d750:	ldr	r3, [r3, r2]
   1d754:	ldr	r0, [r3]
   1d758:	bx	lr
   1d75c:	andeq	r9, r1, r8, lsr r7
   1d760:	andeq	r0, r0, r8, lsr r1
   1d764:	ldr	r3, [pc, #16]	; 1d77c <__assert_fail@plt+0xc7b8>
   1d768:	ldr	r2, [pc, #16]	; 1d780 <__assert_fail@plt+0xc7bc>
   1d76c:	add	r3, pc, r3
   1d770:	ldr	r3, [r3, r2]
   1d774:	str	r0, [r3]
   1d778:	bx	lr
   1d77c:	andeq	r9, r1, r8, lsl r7
   1d780:	andeq	r0, r0, r8, lsr r1
   1d784:	b	10dfc <malloc@plt>
   1d788:	push	{r4, r5, r6, lr}
   1d78c:	mov	r6, r0
   1d790:	mov	r0, #48	; 0x30
   1d794:	mov	r5, r1
   1d798:	bl	1d784 <__assert_fail@plt+0xc7c0>
   1d79c:	subs	r4, r0, #0
   1d7a0:	beq	1d7d8 <__assert_fail@plt+0xc814>
   1d7a4:	str	r5, [r4, #12]
   1d7a8:	add	r0, r5, #2
   1d7ac:	bl	1d784 <__assert_fail@plt+0xc7c0>
   1d7b0:	cmp	r0, #0
   1d7b4:	str	r0, [r4, #4]
   1d7b8:	beq	1d7d8 <__assert_fail@plt+0xc814>
   1d7bc:	mov	r3, #1
   1d7c0:	mov	r0, r4
   1d7c4:	mov	r1, r6
   1d7c8:	str	r3, [r4, #20]
   1d7cc:	bl	1d5d4 <__assert_fail@plt+0xc610>
   1d7d0:	mov	r0, r4
   1d7d4:	pop	{r4, r5, r6, pc}
   1d7d8:	ldr	r0, [pc, #4]	; 1d7e4 <__assert_fail@plt+0xc820>
   1d7dc:	add	r0, pc, r0
   1d7e0:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1d7e4:	andeq	r8, r0, ip
   1d7e8:	b	10da8 <realloc@plt>
   1d7ec:	push	{r4, r5, r6, lr}
   1d7f0:	ldr	r4, [pc, #140]	; 1d884 <__assert_fail@plt+0xc8c0>
   1d7f4:	add	r4, pc, r4
   1d7f8:	ldr	r6, [r4, #4]
   1d7fc:	cmp	r6, #0
   1d800:	beq	1d850 <__assert_fail@plt+0xc88c>
   1d804:	ldr	r3, [r4, #32]
   1d808:	ldr	r2, [r4, #8]
   1d80c:	sub	r1, r3, #1
   1d810:	cmp	r1, r2
   1d814:	pophi	{r4, r5, r6, pc}
   1d818:	add	r5, r3, #8
   1d81c:	mov	r0, r6
   1d820:	lsl	r1, r5, #2
   1d824:	bl	1d7e8 <__assert_fail@plt+0xc824>
   1d828:	cmp	r0, #0
   1d82c:	str	r0, [r4, #4]
   1d830:	beq	1d878 <__assert_fail@plt+0xc8b4>
   1d834:	ldr	r3, [r4, #32]
   1d838:	mov	r2, #32
   1d83c:	mov	r1, #0
   1d840:	add	r0, r0, r3, lsl #2
   1d844:	bl	10e98 <memset@plt>
   1d848:	str	r5, [r4, #32]
   1d84c:	pop	{r4, r5, r6, pc}
   1d850:	mov	r0, #4
   1d854:	bl	1d784 <__assert_fail@plt+0xc7c0>
   1d858:	cmp	r0, #0
   1d85c:	str	r0, [r4, #4]
   1d860:	beq	1d878 <__assert_fail@plt+0xc8b4>
   1d864:	mov	r3, #1
   1d868:	str	r6, [r0]
   1d86c:	str	r6, [r4, #8]
   1d870:	str	r3, [r4, #32]
   1d874:	pop	{r4, r5, r6, pc}
   1d878:	ldr	r0, [pc, #8]	; 1d888 <__assert_fail@plt+0xc8c4>
   1d87c:	add	r0, pc, r0
   1d880:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1d884:	andeq	sl, r1, r4, ror #4
   1d888:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   1d88c:	ldr	r2, [pc, #192]	; 1d954 <__assert_fail@plt+0xc990>
   1d890:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d894:	add	r2, pc, r2
   1d898:	ldr	r4, [pc, #184]	; 1d958 <__assert_fail@plt+0xc994>
   1d89c:	ldr	r3, [r2, #4]
   1d8a0:	add	r4, pc, r4
   1d8a4:	cmp	r3, #0
   1d8a8:	mov	r6, r0
   1d8ac:	beq	1d918 <__assert_fail@plt+0xc954>
   1d8b0:	ldr	r2, [r2, #8]
   1d8b4:	ldr	r3, [r3, r2, lsl #2]
   1d8b8:	cmp	r3, #0
   1d8bc:	beq	1d918 <__assert_fail@plt+0xc954>
   1d8c0:	ldr	r2, [pc, #148]	; 1d95c <__assert_fail@plt+0xc998>
   1d8c4:	ldr	r5, [r4, r2]
   1d8c8:	mov	r0, r3
   1d8cc:	mov	r1, r6
   1d8d0:	bl	1d5d4 <__assert_fail@plt+0xc610>
   1d8d4:	ldr	r3, [pc, #132]	; 1d960 <__assert_fail@plt+0xc99c>
   1d8d8:	ldr	r0, [pc, #132]	; 1d964 <__assert_fail@plt+0xc9a0>
   1d8dc:	add	r3, pc, r3
   1d8e0:	ldr	r2, [r3, #4]
   1d8e4:	ldr	r1, [r3, #8]
   1d8e8:	ldr	r1, [r2, r1, lsl #2]
   1d8ec:	ldr	r2, [r1, #8]
   1d8f0:	ldr	ip, [r1, #16]
   1d8f4:	str	r2, [r3, #12]
   1d8f8:	str	ip, [r3, #24]
   1d8fc:	ldr	r0, [r4, r0]
   1d900:	ldr	r1, [r1]
   1d904:	str	r2, [r0]
   1d908:	str	r1, [r5]
   1d90c:	ldrb	r2, [r2]
   1d910:	strb	r2, [r3, #28]
   1d914:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d918:	bl	1d7ec <__assert_fail@plt+0xc828>
   1d91c:	ldr	r3, [pc, #56]	; 1d95c <__assert_fail@plt+0xc998>
   1d920:	ldr	r7, [pc, #64]	; 1d968 <__assert_fail@plt+0xc9a4>
   1d924:	mov	r1, #16384	; 0x4000
   1d928:	ldr	r5, [r4, r3]
   1d92c:	add	r7, pc, r7
   1d930:	ldr	r0, [r5]
   1d934:	ldrd	r8, [r7, #4]
   1d938:	bl	1d788 <__assert_fail@plt+0xc7c4>
   1d93c:	ldr	r3, [r7, #4]
   1d940:	cmp	r3, #0
   1d944:	ldrne	r2, [r7, #8]
   1d948:	str	r0, [r8, r9, lsl #2]
   1d94c:	ldrne	r3, [r3, r2, lsl #2]
   1d950:	b	1d8c8 <__assert_fail@plt+0xc904>
   1d954:	andeq	sl, r1, r4, asr #3
   1d958:	andeq	r9, r1, r4, ror #11
   1d95c:	andeq	r0, r0, r8, lsl r1
   1d960:	andeq	sl, r1, ip, ror r1
   1d964:	andeq	r0, r0, r8, lsr #2
   1d968:	andeq	sl, r1, ip, lsr #2
   1d96c:	push	{r4, r5, r6, lr}
   1d970:	mov	r4, r0
   1d974:	bl	1d7ec <__assert_fail@plt+0xc828>
   1d978:	ldr	r3, [pc, #164]	; 1da24 <__assert_fail@plt+0xca60>
   1d97c:	ldr	r1, [pc, #164]	; 1da28 <__assert_fail@plt+0xca64>
   1d980:	add	r3, pc, r3
   1d984:	add	r1, pc, r1
   1d988:	ldr	r2, [r3, #4]
   1d98c:	cmp	r2, #0
   1d990:	beq	1da10 <__assert_fail@plt+0xca4c>
   1d994:	ldr	r0, [r3, #8]
   1d998:	ldr	lr, [r2, r0, lsl #2]
   1d99c:	add	ip, r2, r0, lsl #2
   1d9a0:	cmp	lr, r4
   1d9a4:	popeq	{r4, r5, r6, pc}
   1d9a8:	cmp	lr, #0
   1d9ac:	beq	1d9cc <__assert_fail@plt+0xca08>
   1d9b0:	ldr	lr, [r3, #12]
   1d9b4:	ldrb	r6, [r3, #28]
   1d9b8:	ldr	r5, [r3, #24]
   1d9bc:	strb	r6, [lr]
   1d9c0:	ldr	r3, [r2, r0, lsl #2]
   1d9c4:	str	lr, [r3, #8]
   1d9c8:	str	r5, [r3, #16]
   1d9cc:	ldr	r3, [pc, #88]	; 1da2c <__assert_fail@plt+0xca68>
   1d9d0:	ldr	r0, [pc, #88]	; 1da30 <__assert_fail@plt+0xca6c>
   1d9d4:	add	r3, pc, r3
   1d9d8:	ldr	lr, [r4, #16]
   1d9dc:	ldr	r2, [r4, #8]
   1d9e0:	str	r4, [ip]
   1d9e4:	str	r2, [r3, #12]
   1d9e8:	str	lr, [r3, #24]
   1d9ec:	ldr	lr, [r1, r0]
   1d9f0:	ldr	r0, [pc, #60]	; 1da34 <__assert_fail@plt+0xca70>
   1d9f4:	ldr	ip, [r4]
   1d9f8:	str	r2, [lr]
   1d9fc:	ldr	r1, [r1, r0]
   1da00:	str	ip, [r1]
   1da04:	ldrb	r2, [r2]
   1da08:	strb	r2, [r3, #28]
   1da0c:	pop	{r4, r5, r6, pc}
   1da10:	cmp	r4, #0
   1da14:	popeq	{r4, r5, r6, pc}
   1da18:	ldr	ip, [r3, #8]
   1da1c:	lsl	ip, ip, #2
   1da20:	b	1d9cc <__assert_fail@plt+0xca08>
   1da24:	ldrdeq	sl, [r1], -r8
   1da28:	andeq	r9, r1, r0, lsl #10
   1da2c:	andeq	sl, r1, r4, lsl #1
   1da30:	andeq	r0, r0, r8, lsr #2
   1da34:	andeq	r0, r0, r8, lsl r1
   1da38:	cmp	r1, #1
   1da3c:	push	{r4, r5, r6, r7, r8, lr}
   1da40:	bls	1dab0 <__assert_fail@plt+0xcaec>
   1da44:	sub	r7, r1, #2
   1da48:	ldrb	r4, [r0, r7]
   1da4c:	cmp	r4, #0
   1da50:	bne	1dab0 <__assert_fail@plt+0xcaec>
   1da54:	add	r1, r0, r1
   1da58:	ldrb	r6, [r1, #-1]
   1da5c:	cmp	r6, #0
   1da60:	bne	1daa8 <__assert_fail@plt+0xcae4>
   1da64:	mov	r5, r0
   1da68:	mov	r0, #48	; 0x30
   1da6c:	bl	1d784 <__assert_fail@plt+0xc7c0>
   1da70:	subs	r4, r0, #0
   1da74:	beq	1dabc <__assert_fail@plt+0xcaf8>
   1da78:	mov	r3, #1
   1da7c:	str	r7, [r4, #12]
   1da80:	str	r5, [r4, #4]
   1da84:	str	r5, [r4, #8]
   1da88:	str	r6, [r4, #20]
   1da8c:	str	r6, [r4]
   1da90:	str	r7, [r4, #16]
   1da94:	str	r6, [r4, #24]
   1da98:	str	r6, [r4, #40]	; 0x28
   1da9c:	str	r6, [r4, #44]	; 0x2c
   1daa0:	str	r3, [r4, #28]
   1daa4:	bl	1d96c <__assert_fail@plt+0xc9a8>
   1daa8:	mov	r0, r4
   1daac:	pop	{r4, r5, r6, r7, r8, pc}
   1dab0:	mov	r4, #0
   1dab4:	mov	r0, r4
   1dab8:	pop	{r4, r5, r6, r7, r8, pc}
   1dabc:	ldr	r0, [pc, #4]	; 1dac8 <__assert_fail@plt+0xcb04>
   1dac0:	add	r0, pc, r0
   1dac4:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1dac8:	andeq	r7, r0, r8, lsl #27
   1dacc:	push	{r4, r5, r6, lr}
   1dad0:	add	r6, r1, #2
   1dad4:	mov	r4, r0
   1dad8:	mov	r0, r6
   1dadc:	mov	r5, r1
   1dae0:	bl	1d784 <__assert_fail@plt+0xc7c0>
   1dae4:	subs	lr, r0, #0
   1dae8:	beq	1db40 <__assert_fail@plt+0xcb7c>
   1daec:	cmp	r5, #0
   1daf0:	subgt	r0, r4, #1
   1daf4:	addgt	ip, r0, r5
   1daf8:	subgt	r3, lr, #1
   1dafc:	ble	1db10 <__assert_fail@plt+0xcb4c>
   1db00:	ldrb	r2, [r0, #1]!
   1db04:	cmp	r0, ip
   1db08:	strb	r2, [r3, #1]!
   1db0c:	bne	1db00 <__assert_fail@plt+0xcb3c>
   1db10:	add	r2, lr, r5
   1db14:	mov	r3, #0
   1db18:	strb	r3, [r2, #1]
   1db1c:	mov	r1, r6
   1db20:	strb	r3, [lr, r5]
   1db24:	mov	r0, lr
   1db28:	bl	1da38 <__assert_fail@plt+0xca74>
   1db2c:	subs	r3, r0, #0
   1db30:	beq	1db4c <__assert_fail@plt+0xcb88>
   1db34:	mov	r2, #1
   1db38:	str	r2, [r3, #20]
   1db3c:	pop	{r4, r5, r6, pc}
   1db40:	ldr	r0, [pc, #16]	; 1db58 <__assert_fail@plt+0xcb94>
   1db44:	add	r0, pc, r0
   1db48:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1db4c:	ldr	r0, [pc, #8]	; 1db5c <__assert_fail@plt+0xcb98>
   1db50:	add	r0, pc, r0
   1db54:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1db58:	andeq	r7, r0, r0, lsr sp
   1db5c:	andeq	r7, r0, r0, asr sp
   1db60:	push	{r4, lr}
   1db64:	mov	r4, r0
   1db68:	bl	10e74 <strlen@plt>
   1db6c:	mov	r1, r0
   1db70:	mov	r0, r4
   1db74:	pop	{r4, lr}
   1db78:	b	1dacc <__assert_fail@plt+0xcb08>
   1db7c:	push	{r4, r5, r6, lr}
   1db80:	subs	r4, r0, #0
   1db84:	ldr	r5, [pc, #176]	; 1dc3c <__assert_fail@plt+0xcc78>
   1db88:	add	r5, pc, r5
   1db8c:	popeq	{r4, r5, r6, pc}
   1db90:	bl	1d7ec <__assert_fail@plt+0xc828>
   1db94:	ldr	r3, [pc, #164]	; 1dc40 <__assert_fail@plt+0xcc7c>
   1db98:	add	r3, pc, r3
   1db9c:	ldr	r2, [r3, #4]
   1dba0:	cmp	r2, #0
   1dba4:	beq	1dc30 <__assert_fail@plt+0xcc6c>
   1dba8:	ldr	r1, [r3, #8]
   1dbac:	ldr	r0, [r2, r1, lsl #2]
   1dbb0:	lsl	ip, r1, #2
   1dbb4:	cmp	r0, #0
   1dbb8:	add	r0, r2, ip
   1dbbc:	beq	1dbec <__assert_fail@plt+0xcc28>
   1dbc0:	ldr	lr, [r3, #12]
   1dbc4:	ldrb	r6, [r3, #28]
   1dbc8:	add	r0, ip, #4
   1dbcc:	add	r0, r2, r0
   1dbd0:	strb	r6, [lr]
   1dbd4:	ldr	r2, [r2, r1, lsl #2]
   1dbd8:	ldr	ip, [r3, #24]
   1dbdc:	add	r1, r1, #1
   1dbe0:	str	lr, [r2, #8]
   1dbe4:	str	r1, [r3, #8]
   1dbe8:	str	ip, [r2, #16]
   1dbec:	ldr	r3, [pc, #80]	; 1dc44 <__assert_fail@plt+0xcc80>
   1dbf0:	ldr	r1, [pc, #80]	; 1dc48 <__assert_fail@plt+0xcc84>
   1dbf4:	add	r3, pc, r3
   1dbf8:	ldr	ip, [r4, #16]
   1dbfc:	ldr	r2, [r4, #8]
   1dc00:	str	r4, [r0]
   1dc04:	str	r2, [r3, #12]
   1dc08:	str	ip, [r3, #24]
   1dc0c:	ldr	ip, [r5, r1]
   1dc10:	ldr	r1, [pc, #52]	; 1dc4c <__assert_fail@plt+0xcc88>
   1dc14:	ldr	r0, [r4]
   1dc18:	str	r2, [ip]
   1dc1c:	ldr	r1, [r5, r1]
   1dc20:	str	r0, [r1]
   1dc24:	ldrb	r2, [r2]
   1dc28:	strb	r2, [r3, #28]
   1dc2c:	pop	{r4, r5, r6, pc}
   1dc30:	ldr	r0, [r3, #8]
   1dc34:	lsl	r0, r0, #2
   1dc38:	b	1dbec <__assert_fail@plt+0xcc28>
   1dc3c:	strdeq	r9, [r1], -ip
   1dc40:	andeq	r9, r1, r0, asr #29
   1dc44:	andeq	r9, r1, r4, ror #28
   1dc48:	andeq	r0, r0, r8, lsr #2
   1dc4c:	andeq	r0, r0, r8, lsl r1
   1dc50:	b	10d60 <free@plt>
   1dc54:	push	{r4, lr}
   1dc58:	subs	r4, r0, #0
   1dc5c:	popeq	{r4, pc}
   1dc60:	ldr	r2, [pc, #76]	; 1dcb4 <__assert_fail@plt+0xccf0>
   1dc64:	add	r2, pc, r2
   1dc68:	ldr	r3, [r2, #4]
   1dc6c:	cmp	r3, #0
   1dc70:	beq	1dc88 <__assert_fail@plt+0xccc4>
   1dc74:	ldr	r2, [r2, #8]
   1dc78:	ldr	r1, [r3, r2, lsl #2]
   1dc7c:	cmp	r4, r1
   1dc80:	moveq	r1, #0
   1dc84:	streq	r1, [r3, r2, lsl #2]
   1dc88:	ldr	r3, [r4, #20]
   1dc8c:	cmp	r3, #0
   1dc90:	bne	1dca0 <__assert_fail@plt+0xccdc>
   1dc94:	mov	r0, r4
   1dc98:	pop	{r4, lr}
   1dc9c:	b	1dc50 <__assert_fail@plt+0xcc8c>
   1dca0:	ldr	r0, [r4, #4]
   1dca4:	bl	1dc50 <__assert_fail@plt+0xcc8c>
   1dca8:	mov	r0, r4
   1dcac:	pop	{r4, lr}
   1dcb0:	b	1dc50 <__assert_fail@plt+0xcc8c>
   1dcb4:	strdeq	r9, [r1], -r4
   1dcb8:	push	{r4, r5, r6, lr}
   1dcbc:	ldr	r4, [pc, #152]	; 1dd5c <__assert_fail@plt+0xcd98>
   1dcc0:	ldr	r5, [pc, #152]	; 1dd60 <__assert_fail@plt+0xcd9c>
   1dcc4:	add	r4, pc, r4
   1dcc8:	add	r5, pc, r5
   1dccc:	ldr	r3, [r4, #4]
   1dcd0:	cmp	r3, #0
   1dcd4:	popeq	{r4, r5, r6, pc}
   1dcd8:	ldr	r2, [r4, #8]
   1dcdc:	ldr	r0, [r3, r2, lsl #2]
   1dce0:	cmp	r0, #0
   1dce4:	popeq	{r4, r5, r6, pc}
   1dce8:	bl	1dc54 <__assert_fail@plt+0xcc90>
   1dcec:	ldrd	r2, [r4, #4]
   1dcf0:	mov	r1, #0
   1dcf4:	cmp	r3, r1
   1dcf8:	str	r1, [r2, r3, lsl #2]
   1dcfc:	subne	r3, r3, #1
   1dd00:	strne	r3, [r4, #8]
   1dd04:	cmp	r2, #0
   1dd08:	popeq	{r4, r5, r6, pc}
   1dd0c:	ldr	r3, [pc, #80]	; 1dd64 <__assert_fail@plt+0xcda0>
   1dd10:	add	r3, pc, r3
   1dd14:	ldr	r1, [r3, #8]
   1dd18:	ldr	r2, [r2, r1, lsl #2]
   1dd1c:	cmp	r2, #0
   1dd20:	popeq	{r4, r5, r6, pc}
   1dd24:	ldr	r0, [pc, #60]	; 1dd68 <__assert_fail@plt+0xcda4>
   1dd28:	ldr	r1, [r2, #8]
   1dd2c:	ldr	ip, [r2, #16]
   1dd30:	str	r1, [r3, #12]
   1dd34:	str	ip, [r3, #24]
   1dd38:	ldr	lr, [r5, r0]
   1dd3c:	ldr	r0, [pc, #40]	; 1dd6c <__assert_fail@plt+0xcda8>
   1dd40:	ldr	ip, [r2]
   1dd44:	str	r1, [lr]
   1dd48:	ldr	r2, [r5, r0]
   1dd4c:	str	ip, [r2]
   1dd50:	ldrb	r2, [r1]
   1dd54:	strb	r2, [r3, #28]
   1dd58:	pop	{r4, r5, r6, pc}
   1dd5c:	muleq	r1, r4, sp
   1dd60:			; <UNDEFINED> instruction: 0x000191bc
   1dd64:	andeq	r9, r1, r8, asr #26
   1dd68:	andeq	r0, r0, r8, lsr #2
   1dd6c:	andeq	r0, r0, r8, lsl r1
   1dd70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd74:	sub	sp, sp, #92	; 0x5c
   1dd78:	ldr	fp, [pc, #4024]	; 1ed38 <__assert_fail@plt+0xdd74>
   1dd7c:	ldr	r3, [pc, #4024]	; 1ed3c <__assert_fail@plt+0xdd78>
   1dd80:	add	fp, pc, fp
   1dd84:	ldr	r1, [pc, #4020]	; 1ed40 <__assert_fail@plt+0xdd7c>
   1dd88:	ldr	r3, [fp, r3]
   1dd8c:	add	r1, pc, r1
   1dd90:	str	r3, [sp, #28]
   1dd94:	ldr	r0, [r1, #36]	; 0x24
   1dd98:	ldr	r3, [r3]
   1dd9c:	cmp	r0, #0
   1dda0:	ldr	r2, [r1]
   1dda4:	str	r3, [sp, #84]	; 0x54
   1dda8:	ldr	ip, [r1, #4]
   1ddac:	beq	1dfdc <__assert_fail@plt+0xd018>
   1ddb0:	ldr	r0, [pc, #3980]	; 1ed44 <__assert_fail@plt+0xdd80>
   1ddb4:	ldrb	r3, [r1, #28]
   1ddb8:	ldr	lr, [r1, #8]
   1ddbc:	ldr	r7, [r1, #12]
   1ddc0:	ldr	r0, [fp, r0]
   1ddc4:	str	r0, [sp, #8]
   1ddc8:	ldr	r0, [pc, #3960]	; 1ed48 <__assert_fail@plt+0xdd84>
   1ddcc:	ldr	r1, [pc, #3960]	; 1ed4c <__assert_fail@plt+0xdd88>
   1ddd0:	ldr	sl, [pc, #3960]	; 1ed50 <__assert_fail@plt+0xdd8c>
   1ddd4:	add	r0, pc, r0
   1ddd8:	add	sl, pc, sl
   1dddc:	str	r0, [sp, #36]	; 0x24
   1dde0:	ldr	r1, [fp, r1]
   1dde4:	add	r9, sl, #620	; 0x26c
   1dde8:	str	r1, [sp, #12]
   1ddec:	str	fp, [sp, #16]
   1ddf0:	strb	r3, [r7]
   1ddf4:	ldr	r1, [ip, lr, lsl #2]
   1ddf8:	mov	fp, sl
   1ddfc:	mov	sl, r9
   1de00:	ldr	r1, [r1, #28]
   1de04:	str	r7, [sp, #20]
   1de08:	add	r2, r2, r1
   1de0c:	ldr	r1, [pc, #3904]	; 1ed54 <__assert_fail@plt+0xdd90>
   1de10:	ldr	r8, [pc, #3904]	; 1ed58 <__assert_fail@plt+0xdd94>
   1de14:	add	r1, pc, r1
   1de18:	add	r8, pc, r8
   1de1c:	add	r4, fp, #1056	; 0x420
   1de20:	ldr	r0, [r1, #16]
   1de24:	ldr	r9, [r1, #20]
   1de28:	add	r4, r4, #8
   1de2c:	add	r1, r8, #256	; 0x100
   1de30:	mov	r6, #0
   1de34:	add	r5, fp, #1456	; 0x5b0
   1de38:	str	r1, [sp]
   1de3c:	add	r1, fp, #2384	; 0x950
   1de40:	str	r0, [sp, #24]
   1de44:	str	r9, [sp, #32]
   1de48:	str	r1, [sp, #4]
   1de4c:	ldrb	ip, [r8, r3]
   1de50:	ldr	r3, [sp]
   1de54:	lsl	r1, r2, #1
   1de58:	ldrsh	r3, [r3, r1]
   1de5c:	cmp	r3, #0
   1de60:	movne	r0, r2
   1de64:	movne	r9, r7
   1de68:	movne	r6, #1
   1de6c:	b	1de84 <__assert_fail@plt+0xcec0>
   1de70:	ldrsh	r2, [sl, r1]
   1de74:	cmp	r2, #180	; 0xb4
   1de78:	addgt	ip, fp, ip
   1de7c:	lsl	r1, r2, #1
   1de80:	ldrbgt	ip, [ip, #1012]	; 0x3f4
   1de84:	ldrsh	r3, [r4, r1]
   1de88:	add	r3, r3, ip
   1de8c:	lsl	r3, r3, #1
   1de90:	ldrsh	lr, [r5, r3]
   1de94:	cmp	lr, r2
   1de98:	bne	1de70 <__assert_fail@plt+0xceac>
   1de9c:	ldr	r2, [sp, #4]
   1dea0:	ldrsh	r2, [r2, r3]
   1dea4:	cmp	r2, #180	; 0xb4
   1dea8:	ldrbne	r3, [r7, #1]!
   1deac:	bne	1de4c <__assert_fail@plt+0xce88>
   1deb0:	cmp	r6, #0
   1deb4:	beq	1e0a0 <__assert_fail@plt+0xd0dc>
   1deb8:	ldr	r3, [pc, #3740]	; 1ed5c <__assert_fail@plt+0xdd98>
   1debc:	add	r3, pc, r3
   1dec0:	str	r9, [r3, #20]
   1dec4:	str	r0, [r3, #16]
   1dec8:	ldr	r3, [pc, #3728]	; 1ed60 <__assert_fail@plt+0xdd9c>
   1decc:	ldr	r6, [pc, #3728]	; 1ed64 <__assert_fail@plt+0xdda0>
   1ded0:	add	r3, pc, r3
   1ded4:	ldr	r2, [pc, #3724]	; 1ed68 <__assert_fail@plt+0xdda4>
   1ded8:	add	r3, r3, #256	; 0x100
   1dedc:	add	r6, pc, r6
   1dee0:	add	r2, pc, r2
   1dee4:	str	r2, [sp, #32]
   1dee8:	stm	sp, {r3, fp}
   1deec:	str	sl, [sp, #24]
   1def0:	lsl	r3, r0, #1
   1def4:	ldr	r0, [sp]
   1def8:	ldr	r1, [sp, #20]
   1defc:	ldr	fp, [pc, #3688]	; 1ed6c <__assert_fail@plt+0xdda8>
   1df00:	ldrsh	r3, [r0, r3]
   1df04:	ldr	r0, [sp, #8]
   1df08:	sub	r2, r9, r1
   1df0c:	ldr	sl, [pc, #3676]	; 1ed70 <__assert_fail@plt+0xddac>
   1df10:	str	r1, [r0]
   1df14:	ldr	r1, [sp, #12]
   1df18:	add	fp, pc, fp
   1df1c:	add	sl, pc, sl
   1df20:	str	r2, [r1]
   1df24:	ldrb	r2, [r9]
   1df28:	str	r9, [r6, #12]
   1df2c:	strb	r2, [r6, #28]
   1df30:	mov	r2, #0
   1df34:	strb	r2, [r9]
   1df38:	cmp	r3, #37	; 0x25
   1df3c:	addls	pc, pc, r3, lsl #2
   1df40:	b	1f8b4 <__assert_fail@plt+0xe8f0>
   1df44:	b	1e0dc <__assert_fail@plt+0xd118>
   1df48:	b	1f1a8 <__assert_fail@plt+0xe1e4>
   1df4c:	b	1f068 <__assert_fail@plt+0xe0a4>
   1df50:	b	1efdc <__assert_fail@plt+0xe018>
   1df54:	b	1e81c <__assert_fail@plt+0xd858>
   1df58:	b	1e7c4 <__assert_fail@plt+0xd800>
   1df5c:	b	1e75c <__assert_fail@plt+0xd798>
   1df60:	b	1e6f4 <__assert_fail@plt+0xd730>
   1df64:	b	1e68c <__assert_fail@plt+0xd6c8>
   1df68:	b	1e624 <__assert_fail@plt+0xd660>
   1df6c:	b	1e5bc <__assert_fail@plt+0xd5f8>
   1df70:	b	1e538 <__assert_fail@plt+0xd574>
   1df74:	b	1e474 <__assert_fail@plt+0xd4b0>
   1df78:	b	1e3c4 <__assert_fail@plt+0xd400>
   1df7c:	b	1e364 <__assert_fail@plt+0xd3a0>
   1df80:	b	1e2d8 <__assert_fail@plt+0xd314>
   1df84:	b	1e260 <__assert_fail@plt+0xd29c>
   1df88:	b	1e1f8 <__assert_fail@plt+0xd234>
   1df8c:	b	1e16c <__assert_fail@plt+0xd1a8>
   1df90:	b	1e0f8 <__assert_fail@plt+0xd134>
   1df94:	b	1eadc <__assert_fail@plt+0xdb18>
   1df98:	b	1eab0 <__assert_fail@plt+0xdaec>
   1df9c:	b	1ea3c <__assert_fail@plt+0xda78>
   1dfa0:	b	1e9e4 <__assert_fail@plt+0xda20>
   1dfa4:	b	1e98c <__assert_fail@plt+0xd9c8>
   1dfa8:	b	1e934 <__assert_fail@plt+0xd970>
   1dfac:	b	1e8dc <__assert_fail@plt+0xd918>
   1dfb0:	b	1e884 <__assert_fail@plt+0xd8c0>
   1dfb4:	b	1ec38 <__assert_fail@plt+0xdc74>
   1dfb8:	b	1ebe0 <__assert_fail@plt+0xdc1c>
   1dfbc:	b	1eb88 <__assert_fail@plt+0xdbc4>
   1dfc0:	b	1eb08 <__assert_fail@plt+0xdb44>
   1dfc4:	b	1ef20 <__assert_fail@plt+0xdf5c>
   1dfc8:	b	1ec90 <__assert_fail@plt+0xdccc>
   1dfcc:	b	1efa0 <__assert_fail@plt+0xdfdc>
   1dfd0:	b	1efa0 <__assert_fail@plt+0xdfdc>
   1dfd4:	b	1efa0 <__assert_fail@plt+0xdfdc>
   1dfd8:	b	1efa0 <__assert_fail@plt+0xdfdc>
   1dfdc:	mov	r3, #1
   1dfe0:	cmp	r2, #0
   1dfe4:	streq	r3, [r1]
   1dfe8:	str	r3, [r1, #36]	; 0x24
   1dfec:	ldr	r3, [pc, #3868]	; 1ef10 <__assert_fail@plt+0xdf4c>
   1dff0:	ldr	r4, [fp, r3]
   1dff4:	ldr	r3, [r4]
   1dff8:	cmp	r3, #0
   1dffc:	beq	1e0c8 <__assert_fail@plt+0xd104>
   1e000:	ldr	r3, [pc, #3688]	; 1ee70 <__assert_fail@plt+0xdeac>
   1e004:	ldr	r3, [fp, r3]
   1e008:	ldr	r2, [r3]
   1e00c:	cmp	r2, #0
   1e010:	beq	1e0ac <__assert_fail@plt+0xd0e8>
   1e014:	cmp	ip, #0
   1e018:	beq	1e074 <__assert_fail@plt+0xd0b0>
   1e01c:	ldr	r3, [pc, #3408]	; 1ed74 <__assert_fail@plt+0xddb0>
   1e020:	add	r3, pc, r3
   1e024:	ldr	lr, [r3, #8]
   1e028:	ldr	r3, [ip, lr, lsl #2]
   1e02c:	cmp	r3, #0
   1e030:	beq	1e074 <__assert_fail@plt+0xd0b0>
   1e034:	ldr	r1, [pc, #3388]	; 1ed78 <__assert_fail@plt+0xddb4>
   1e038:	ldr	r7, [r3, #8]
   1e03c:	add	r1, pc, r1
   1e040:	ldr	r0, [r3, #16]
   1e044:	ldr	r2, [pc, #3320]	; 1ed44 <__assert_fail@plt+0xdd80>
   1e048:	str	r0, [r1, #24]
   1e04c:	str	r7, [r1, #12]
   1e050:	ldr	r0, [fp, r2]
   1e054:	ldr	r3, [r3]
   1e058:	str	r0, [sp, #8]
   1e05c:	str	r7, [r0]
   1e060:	str	r3, [r4]
   1e064:	ldrb	r3, [r7]
   1e068:	ldr	r2, [r1]
   1e06c:	strb	r3, [r1, #28]
   1e070:	b	1ddc8 <__assert_fail@plt+0xce04>
   1e074:	ldr	r5, [pc, #3328]	; 1ed7c <__assert_fail@plt+0xddb8>
   1e078:	bl	1d7ec <__assert_fail@plt+0xc828>
   1e07c:	add	r5, pc, r5
   1e080:	mov	r1, #16384	; 0x4000
   1e084:	ldr	r0, [r4]
   1e088:	ldrd	r6, [r5, #4]
   1e08c:	bl	1d788 <__assert_fail@plt+0xc7c4>
   1e090:	ldmib	r5, {ip, lr}
   1e094:	str	r0, [r6, r7, lsl #2]
   1e098:	ldr	r3, [ip, lr, lsl #2]
   1e09c:	b	1e034 <__assert_fail@plt+0xd070>
   1e0a0:	ldr	r9, [sp, #32]
   1e0a4:	ldr	r0, [sp, #24]
   1e0a8:	b	1dec8 <__assert_fail@plt+0xcf04>
   1e0ac:	ldr	r2, [pc, #3276]	; 1ed80 <__assert_fail@plt+0xddbc>
   1e0b0:	cmp	ip, #0
   1e0b4:	ldr	r2, [fp, r2]
   1e0b8:	ldr	r2, [r2]
   1e0bc:	str	r2, [r3]
   1e0c0:	bne	1e01c <__assert_fail@plt+0xd058>
   1e0c4:	b	1e074 <__assert_fail@plt+0xd0b0>
   1e0c8:	ldr	r3, [pc, #3252]	; 1ed84 <__assert_fail@plt+0xddc0>
   1e0cc:	ldr	r3, [fp, r3]
   1e0d0:	ldr	r3, [r3]
   1e0d4:	str	r3, [r4]
   1e0d8:	b	1e000 <__assert_fail@plt+0xd03c>
   1e0dc:	ldr	r3, [pc, #3236]	; 1ed88 <__assert_fail@plt+0xddc4>
   1e0e0:	add	r3, pc, r3
   1e0e4:	ldrb	r2, [r3, #28]
   1e0e8:	ldr	r0, [r3, #16]
   1e0ec:	strb	r2, [r9]
   1e0f0:	ldr	r9, [r3, #20]
   1e0f4:	b	1def0 <__assert_fail@plt+0xcf2c>
   1e0f8:	ldr	r3, [sp, #12]
   1e0fc:	ldr	fp, [sp, #16]
   1e100:	ldr	r2, [r3]
   1e104:	ldr	r3, [sp, #8]
   1e108:	cmp	r2, #0
   1e10c:	ldr	r1, [r3]
   1e110:	ble	1e13c <__assert_fail@plt+0xd178>
   1e114:	ldr	r3, [pc, #3184]	; 1ed8c <__assert_fail@plt+0xddc8>
   1e118:	add	r0, r1, r2
   1e11c:	add	r3, pc, r3
   1e120:	ldmib	r3, {ip, lr}
   1e124:	ldrb	r3, [r0, #-1]
   1e128:	ldr	r0, [ip, lr, lsl #2]
   1e12c:	sub	r3, r3, #10
   1e130:	clz	r3, r3
   1e134:	lsr	r3, r3, #5
   1e138:	str	r3, [r0, #28]
   1e13c:	ldr	r3, [pc, #3396]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e140:	ldr	r0, [fp, r3]
   1e144:	bl	1b338 <__assert_fail@plt+0xa374>
   1e148:	mov	r3, #280	; 0x118
   1e14c:	ldr	r2, [sp, #28]
   1e150:	ldr	r1, [sp, #84]	; 0x54
   1e154:	mov	r0, r3
   1e158:	ldr	r2, [r2]
   1e15c:	cmp	r1, r2
   1e160:	bne	1f7e4 <__assert_fail@plt+0xe820>
   1e164:	add	sp, sp, #92	; 0x5c
   1e168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e16c:	ldr	r3, [sp, #12]
   1e170:	ldr	fp, [sp, #16]
   1e174:	ldr	r2, [r3]
   1e178:	ldr	r3, [sp, #8]
   1e17c:	cmp	r2, #0
   1e180:	ldr	r1, [r3]
   1e184:	ble	1e1b0 <__assert_fail@plt+0xd1ec>
   1e188:	ldr	r3, [pc, #3072]	; 1ed90 <__assert_fail@plt+0xddcc>
   1e18c:	add	r0, r1, r2
   1e190:	add	r3, pc, r3
   1e194:	ldmib	r3, {ip, lr}
   1e198:	ldrb	r3, [r0, #-1]
   1e19c:	ldr	r0, [ip, lr, lsl #2]
   1e1a0:	sub	r3, r3, #10
   1e1a4:	clz	r3, r3
   1e1a8:	lsr	r3, r3, #5
   1e1ac:	str	r3, [r0, #28]
   1e1b0:	ldr	r3, [pc, #3280]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e1b4:	ldr	r0, [fp, r3]
   1e1b8:	bl	1b338 <__assert_fail@plt+0xa374>
   1e1bc:	ldr	r3, [sp, #8]
   1e1c0:	ldr	r0, [r3]
   1e1c4:	ldrb	r3, [r0]
   1e1c8:	cmp	r3, #92	; 0x5c
   1e1cc:	addeq	r0, r0, #1
   1e1d0:	bl	1c550 <__assert_fail@plt+0xb58c>
   1e1d4:	ldr	r2, [pc, #3296]	; 1eebc <__assert_fail@plt+0xdef8>
   1e1d8:	ldr	r3, [pc, #2996]	; 1ed94 <__assert_fail@plt+0xddd0>
   1e1dc:	mov	r1, #7
   1e1e0:	ldr	r2, [fp, r2]
   1e1e4:	add	r3, pc, r3
   1e1e8:	str	r1, [r3]
   1e1ec:	ldr	r3, [pc, #2980]	; 1ed98 <__assert_fail@plt+0xddd4>
   1e1f0:	str	r0, [r2]
   1e1f4:	b	1e14c <__assert_fail@plt+0xd188>
   1e1f8:	ldr	r3, [sp, #12]
   1e1fc:	ldr	fp, [sp, #16]
   1e200:	ldr	r2, [r3]
   1e204:	ldr	r3, [sp, #8]
   1e208:	cmp	r2, #0
   1e20c:	ldr	r1, [r3]
   1e210:	ble	1e23c <__assert_fail@plt+0xd278>
   1e214:	ldr	r3, [pc, #2944]	; 1ed9c <__assert_fail@plt+0xddd8>
   1e218:	add	r0, r1, r2
   1e21c:	add	r3, pc, r3
   1e220:	ldmib	r3, {ip, lr}
   1e224:	ldrb	r3, [r0, #-1]
   1e228:	ldr	r0, [ip, lr, lsl #2]
   1e22c:	sub	r3, r3, #10
   1e230:	clz	r3, r3
   1e234:	lsr	r3, r3, #5
   1e238:	str	r3, [r0, #28]
   1e23c:	ldr	r3, [pc, #3140]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e240:	ldr	r0, [fp, r3]
   1e244:	bl	1b338 <__assert_fail@plt+0xa374>
   1e248:	ldr	r2, [pc, #2896]	; 1eda0 <__assert_fail@plt+0xdddc>
   1e24c:	mov	r1, #7
   1e250:	add	r2, pc, r2
   1e254:	mov	r3, #93	; 0x5d
   1e258:	str	r1, [r2]
   1e25c:	b	1e14c <__assert_fail@plt+0xd188>
   1e260:	ldr	r3, [sp, #12]
   1e264:	ldr	fp, [sp, #16]
   1e268:	ldr	r2, [r3]
   1e26c:	ldr	r3, [sp, #8]
   1e270:	cmp	r2, #0
   1e274:	ldr	r1, [r3]
   1e278:	ble	1e2a4 <__assert_fail@plt+0xd2e0>
   1e27c:	ldr	r3, [pc, #2848]	; 1eda4 <__assert_fail@plt+0xdde0>
   1e280:	add	r0, r1, r2
   1e284:	add	r3, pc, r3
   1e288:	ldmib	r3, {ip, lr}
   1e28c:	ldrb	r3, [r0, #-1]
   1e290:	ldr	r0, [ip, lr, lsl #2]
   1e294:	sub	r3, r3, #10
   1e298:	clz	r3, r3
   1e29c:	lsr	r3, r3, #5
   1e2a0:	str	r3, [r0, #28]
   1e2a4:	ldr	r3, [pc, #3036]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e2a8:	ldr	r0, [fp, r3]
   1e2ac:	bl	1b338 <__assert_fail@plt+0xa374>
   1e2b0:	ldr	r3, [sp, #8]
   1e2b4:	mov	r2, #16
   1e2b8:	mov	r1, #0
   1e2bc:	ldr	r0, [r3]
   1e2c0:	bl	10d30 <strtol@plt>
   1e2c4:	ldr	r2, [pc, #3056]	; 1eebc <__assert_fail@plt+0xdef8>
   1e2c8:	mov	r3, #276	; 0x114
   1e2cc:	ldr	r2, [fp, r2]
   1e2d0:	strb	r0, [r2]
   1e2d4:	b	1e14c <__assert_fail@plt+0xd188>
   1e2d8:	ldr	r3, [sp, #12]
   1e2dc:	ldr	fp, [sp, #16]
   1e2e0:	ldr	r2, [r3]
   1e2e4:	ldr	r3, [sp, #8]
   1e2e8:	cmp	r2, #0
   1e2ec:	ldr	r1, [r3]
   1e2f0:	ble	1e31c <__assert_fail@plt+0xd358>
   1e2f4:	ldr	r3, [pc, #2732]	; 1eda8 <__assert_fail@plt+0xdde4>
   1e2f8:	add	r0, r1, r2
   1e2fc:	add	r3, pc, r3
   1e300:	ldmib	r3, {ip, lr}
   1e304:	ldrb	r3, [r0, #-1]
   1e308:	ldr	r0, [ip, lr, lsl #2]
   1e30c:	sub	r3, r3, #10
   1e310:	clz	r3, r3
   1e314:	lsr	r3, r3, #5
   1e318:	str	r3, [r0, #28]
   1e31c:	ldr	r3, [pc, #2916]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e320:	ldr	r0, [fp, r3]
   1e324:	bl	1b338 <__assert_fail@plt+0xa374>
   1e328:	ldr	r3, [sp, #12]
   1e32c:	ldr	r0, [sp, #8]
   1e330:	mov	r2, #0
   1e334:	ldr	r1, [r3]
   1e338:	ldr	r3, [r0]
   1e33c:	add	r3, r3, r1
   1e340:	strb	r2, [r3, #-1]
   1e344:	ldr	r0, [r0]
   1e348:	add	r0, r0, #2
   1e34c:	bl	1c550 <__assert_fail@plt+0xb58c>
   1e350:	ldr	r2, [pc, #2916]	; 1eebc <__assert_fail@plt+0xdef8>
   1e354:	ldr	r3, [pc, #2640]	; 1edac <__assert_fail@plt+0xdde8>
   1e358:	ldr	r2, [fp, r2]
   1e35c:	str	r0, [r2]
   1e360:	b	1e14c <__assert_fail@plt+0xd188>
   1e364:	ldr	r3, [sp, #12]
   1e368:	ldr	fp, [sp, #16]
   1e36c:	ldr	r2, [r3]
   1e370:	ldr	r3, [sp, #8]
   1e374:	cmp	r2, #0
   1e378:	ldr	r1, [r3]
   1e37c:	ble	1e3a8 <__assert_fail@plt+0xd3e4>
   1e380:	ldr	r3, [pc, #2600]	; 1edb0 <__assert_fail@plt+0xddec>
   1e384:	add	r0, r1, r2
   1e388:	add	r3, pc, r3
   1e38c:	ldmib	r3, {ip, lr}
   1e390:	ldrb	r3, [r0, #-1]
   1e394:	ldr	r0, [ip, lr, lsl #2]
   1e398:	sub	r3, r3, #10
   1e39c:	clz	r3, r3
   1e3a0:	lsr	r3, r3, #5
   1e3a4:	str	r3, [r0, #28]
   1e3a8:	ldr	r3, [pc, #2776]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e3ac:	ldr	r0, [fp, r3]
   1e3b0:	bl	1b338 <__assert_fail@plt+0xa374>
   1e3b4:	ldr	r3, [sp, #8]
   1e3b8:	ldr	r0, [r3]
   1e3bc:	add	r0, r0, #1
   1e3c0:	b	1e34c <__assert_fail@plt+0xd388>
   1e3c4:	ldr	r3, [sp, #12]
   1e3c8:	ldr	fp, [sp, #16]
   1e3cc:	ldr	r2, [r3]
   1e3d0:	ldr	r3, [sp, #8]
   1e3d4:	cmp	r2, #0
   1e3d8:	ldr	r1, [r3]
   1e3dc:	ble	1e408 <__assert_fail@plt+0xd444>
   1e3e0:	ldr	r3, [pc, #2508]	; 1edb4 <__assert_fail@plt+0xddf0>
   1e3e4:	add	r0, r1, r2
   1e3e8:	add	r3, pc, r3
   1e3ec:	ldmib	r3, {ip, lr}
   1e3f0:	ldrb	r3, [r0, #-1]
   1e3f4:	ldr	r0, [ip, lr, lsl #2]
   1e3f8:	sub	r3, r3, #10
   1e3fc:	clz	r3, r3
   1e400:	lsr	r3, r3, #5
   1e404:	str	r3, [r0, #28]
   1e408:	ldr	r3, [pc, #2680]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e40c:	add	r4, sp, #72	; 0x48
   1e410:	ldr	r0, [fp, r3]
   1e414:	bl	1b338 <__assert_fail@plt+0xa374>
   1e418:	ldr	r3, [sp, #12]
   1e41c:	mov	r0, r4
   1e420:	ldr	r2, [r3]
   1e424:	ldr	r3, [sp, #8]
   1e428:	sub	r2, r2, #2
   1e42c:	ldr	r1, [r3]
   1e430:	add	r1, r1, #1
   1e434:	bl	16064 <__assert_fail@plt+0x50a0>
   1e438:	ldr	r1, [sp, #72]	; 0x48
   1e43c:	cmp	r1, #1
   1e440:	beq	1f60c <__assert_fail@plt+0xe648>
   1e444:	ldr	r2, [sp, #76]	; 0x4c
   1e448:	ldr	r3, [pc, #2668]	; 1eebc <__assert_fail@plt+0xdef8>
   1e44c:	mov	r7, #0
   1e450:	ldrb	r6, [r2]
   1e454:	ldr	r3, [fp, r3]
   1e458:	cmp	r1, #2
   1e45c:	strd	r6, [r3]
   1e460:	bgt	1f5cc <__assert_fail@plt+0xe608>
   1e464:	ldm	r4, {r0, r1, r2}
   1e468:	bl	15764 <__assert_fail@plt+0x47a0>
   1e46c:	ldr	r3, [pc, #2372]	; 1edb8 <__assert_fail@plt+0xddf4>
   1e470:	b	1e14c <__assert_fail@plt+0xd188>
   1e474:	ldr	r3, [sp, #12]
   1e478:	ldr	fp, [sp, #16]
   1e47c:	ldr	r2, [r3]
   1e480:	ldr	r3, [sp, #8]
   1e484:	cmp	r2, #0
   1e488:	ldr	r1, [r3]
   1e48c:	ble	1e4b8 <__assert_fail@plt+0xd4f4>
   1e490:	ldr	r3, [pc, #2340]	; 1edbc <__assert_fail@plt+0xddf8>
   1e494:	add	r0, r1, r2
   1e498:	add	r3, pc, r3
   1e49c:	ldmib	r3, {ip, lr}
   1e4a0:	ldrb	r3, [r0, #-1]
   1e4a4:	ldr	r0, [ip, lr, lsl #2]
   1e4a8:	sub	r3, r3, #10
   1e4ac:	clz	r3, r3
   1e4b0:	lsr	r3, r3, #5
   1e4b4:	str	r3, [r0, #28]
   1e4b8:	ldr	r3, [pc, #2504]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e4bc:	ldr	r0, [fp, r3]
   1e4c0:	bl	1b338 <__assert_fail@plt+0xa374>
   1e4c4:	bl	10e8c <__errno_location@plt>
   1e4c8:	ldr	r3, [sp, #8]
   1e4cc:	mov	r2, #0
   1e4d0:	add	r1, sp, #72	; 0x48
   1e4d4:	str	r2, [r0]
   1e4d8:	mov	r5, r0
   1e4dc:	ldr	r0, [r3]
   1e4e0:	bl	10ebc <strtoull@plt>
   1e4e4:	ldr	r3, [pc, #2512]	; 1eebc <__assert_fail@plt+0xdef8>
   1e4e8:	ldr	r4, [sp, #72]	; 0x48
   1e4ec:	ldr	r3, [fp, r3]
   1e4f0:	strd	r0, [r3]
   1e4f4:	ldrb	r3, [r4]
   1e4f8:	cmp	r3, #0
   1e4fc:	beq	1e51c <__assert_fail@plt+0xd558>
   1e500:	ldr	r1, [pc, #2232]	; 1edc0 <__assert_fail@plt+0xddfc>
   1e504:	mov	r0, r4
   1e508:	add	r1, pc, r1
   1e50c:	bl	10fb8 <strspn@plt>
   1e510:	ldrb	r3, [r4, r0]
   1e514:	cmp	r3, #0
   1e518:	bne	1f5e0 <__assert_fail@plt+0xe61c>
   1e51c:	ldr	r3, [r5]
   1e520:	cmp	r3, #34	; 0x22
   1e524:	beq	1f80c <__assert_fail@plt+0xe848>
   1e528:	cmp	r3, #0
   1e52c:	bne	1f7e8 <__assert_fail@plt+0xe824>
   1e530:	ldr	r3, [pc, #2188]	; 1edc4 <__assert_fail@plt+0xde00>
   1e534:	b	1e14c <__assert_fail@plt+0xd188>
   1e538:	ldr	r3, [sp, #12]
   1e53c:	ldr	fp, [sp, #16]
   1e540:	ldr	r2, [r3]
   1e544:	ldr	r3, [sp, #8]
   1e548:	cmp	r2, #0
   1e54c:	ldr	r1, [r3]
   1e550:	ble	1e57c <__assert_fail@plt+0xd5b8>
   1e554:	ldr	r3, [pc, #2156]	; 1edc8 <__assert_fail@plt+0xde04>
   1e558:	add	r0, r1, r2
   1e55c:	add	r3, pc, r3
   1e560:	ldmib	r3, {ip, lr}
   1e564:	ldrb	r3, [r0, #-1]
   1e568:	ldr	r0, [ip, lr, lsl #2]
   1e56c:	sub	r3, r3, #10
   1e570:	clz	r3, r3
   1e574:	lsr	r3, r3, #5
   1e578:	str	r3, [r0, #28]
   1e57c:	ldr	r3, [pc, #2308]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e580:	ldr	r0, [fp, r3]
   1e584:	bl	1b338 <__assert_fail@plt+0xa374>
   1e588:	ldr	r3, [sp, #8]
   1e58c:	ldr	r0, [r3]
   1e590:	bl	1c550 <__assert_fail@plt+0xb58c>
   1e594:	ldr	r2, [sp, #12]
   1e598:	ldr	r3, [pc, #2332]	; 1eebc <__assert_fail@plt+0xdef8>
   1e59c:	mov	r1, #0
   1e5a0:	ldr	r2, [r2]
   1e5a4:	ldr	ip, [fp, r3]
   1e5a8:	ldr	r3, [pc, #2076]	; 1edcc <__assert_fail@plt+0xde08>
   1e5ac:	add	r2, r0, r2
   1e5b0:	str	r0, [ip]
   1e5b4:	strb	r1, [r2, #-1]
   1e5b8:	b	1e14c <__assert_fail@plt+0xd188>
   1e5bc:	ldr	r3, [sp, #12]
   1e5c0:	ldr	fp, [sp, #16]
   1e5c4:	ldr	r2, [r3]
   1e5c8:	ldr	r3, [sp, #8]
   1e5cc:	cmp	r2, #0
   1e5d0:	ldr	r1, [r3]
   1e5d4:	ble	1e600 <__assert_fail@plt+0xd63c>
   1e5d8:	ldr	r3, [pc, #2032]	; 1edd0 <__assert_fail@plt+0xde0c>
   1e5dc:	add	r0, r1, r2
   1e5e0:	add	r3, pc, r3
   1e5e4:	ldmib	r3, {ip, lr}
   1e5e8:	ldrb	r3, [r0, #-1]
   1e5ec:	ldr	r0, [ip, lr, lsl #2]
   1e5f0:	sub	r3, r3, #10
   1e5f4:	clz	r3, r3
   1e5f8:	lsr	r3, r3, #5
   1e5fc:	str	r3, [r0, #28]
   1e600:	ldr	r3, [pc, #2176]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e604:	ldr	r0, [fp, r3]
   1e608:	bl	1b338 <__assert_fail@plt+0xa374>
   1e60c:	ldr	r2, [pc, #1984]	; 1edd4 <__assert_fail@plt+0xde10>
   1e610:	mov	r1, #5
   1e614:	add	r2, pc, r2
   1e618:	mov	r3, #272	; 0x110
   1e61c:	str	r1, [r2]
   1e620:	b	1e14c <__assert_fail@plt+0xd188>
   1e624:	ldr	r3, [sp, #12]
   1e628:	ldr	fp, [sp, #16]
   1e62c:	ldr	r2, [r3]
   1e630:	ldr	r3, [sp, #8]
   1e634:	cmp	r2, #0
   1e638:	ldr	r1, [r3]
   1e63c:	ble	1e668 <__assert_fail@plt+0xd6a4>
   1e640:	ldr	r3, [pc, #1936]	; 1edd8 <__assert_fail@plt+0xde14>
   1e644:	add	r0, r1, r2
   1e648:	add	r3, pc, r3
   1e64c:	ldmib	r3, {ip, lr}
   1e650:	ldrb	r3, [r0, #-1]
   1e654:	ldr	r0, [ip, lr, lsl #2]
   1e658:	sub	r3, r3, #10
   1e65c:	clz	r3, r3
   1e660:	lsr	r3, r3, #5
   1e664:	str	r3, [r0, #28]
   1e668:	ldr	r3, [pc, #2072]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e66c:	ldr	r0, [fp, r3]
   1e670:	bl	1b338 <__assert_fail@plt+0xa374>
   1e674:	ldr	r2, [pc, #1888]	; 1eddc <__assert_fail@plt+0xde18>
   1e678:	mov	r1, #5
   1e67c:	add	r2, pc, r2
   1e680:	ldr	r3, [pc, #1880]	; 1ede0 <__assert_fail@plt+0xde1c>
   1e684:	str	r1, [r2]
   1e688:	b	1e14c <__assert_fail@plt+0xd188>
   1e68c:	ldr	r3, [sp, #12]
   1e690:	ldr	fp, [sp, #16]
   1e694:	ldr	r2, [r3]
   1e698:	ldr	r3, [sp, #8]
   1e69c:	cmp	r2, #0
   1e6a0:	ldr	r1, [r3]
   1e6a4:	ble	1e6d0 <__assert_fail@plt+0xd70c>
   1e6a8:	ldr	r3, [pc, #1844]	; 1ede4 <__assert_fail@plt+0xde20>
   1e6ac:	add	r0, r1, r2
   1e6b0:	add	r3, pc, r3
   1e6b4:	ldmib	r3, {ip, lr}
   1e6b8:	ldrb	r3, [r0, #-1]
   1e6bc:	ldr	r0, [ip, lr, lsl #2]
   1e6c0:	sub	r3, r3, #10
   1e6c4:	clz	r3, r3
   1e6c8:	lsr	r3, r3, #5
   1e6cc:	str	r3, [r0, #28]
   1e6d0:	ldr	r3, [pc, #1968]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e6d4:	ldr	r0, [fp, r3]
   1e6d8:	bl	1b338 <__assert_fail@plt+0xa374>
   1e6dc:	ldr	r2, [pc, #1796]	; 1ede8 <__assert_fail@plt+0xde24>
   1e6e0:	mov	r1, #5
   1e6e4:	add	r2, pc, r2
   1e6e8:	ldr	r3, [pc, #1788]	; 1edec <__assert_fail@plt+0xde28>
   1e6ec:	str	r1, [r2]
   1e6f0:	b	1e14c <__assert_fail@plt+0xd188>
   1e6f4:	ldr	r3, [sp, #12]
   1e6f8:	ldr	fp, [sp, #16]
   1e6fc:	ldr	r2, [r3]
   1e700:	ldr	r3, [sp, #8]
   1e704:	cmp	r2, #0
   1e708:	ldr	r1, [r3]
   1e70c:	ble	1e738 <__assert_fail@plt+0xd774>
   1e710:	ldr	r3, [pc, #1752]	; 1edf0 <__assert_fail@plt+0xde2c>
   1e714:	add	r0, r1, r2
   1e718:	add	r3, pc, r3
   1e71c:	ldmib	r3, {ip, lr}
   1e720:	ldrb	r3, [r0, #-1]
   1e724:	ldr	r0, [ip, lr, lsl #2]
   1e728:	sub	r3, r3, #10
   1e72c:	clz	r3, r3
   1e730:	lsr	r3, r3, #5
   1e734:	str	r3, [r0, #28]
   1e738:	ldr	r3, [pc, #1864]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e73c:	ldr	r0, [fp, r3]
   1e740:	bl	1b338 <__assert_fail@plt+0xa374>
   1e744:	ldr	r2, [pc, #1704]	; 1edf4 <__assert_fail@plt+0xde30>
   1e748:	mov	r1, #7
   1e74c:	add	r2, pc, r2
   1e750:	ldr	r3, [pc, #1696]	; 1edf8 <__assert_fail@plt+0xde34>
   1e754:	str	r1, [r2]
   1e758:	b	1e14c <__assert_fail@plt+0xd188>
   1e75c:	ldr	r3, [sp, #12]
   1e760:	ldr	fp, [sp, #16]
   1e764:	ldr	r2, [r3]
   1e768:	ldr	r3, [sp, #8]
   1e76c:	cmp	r2, #0
   1e770:	ldr	r1, [r3]
   1e774:	ble	1e7a0 <__assert_fail@plt+0xd7dc>
   1e778:	ldr	r3, [pc, #1660]	; 1edfc <__assert_fail@plt+0xde38>
   1e77c:	add	r0, r1, r2
   1e780:	add	r3, pc, r3
   1e784:	ldmib	r3, {ip, lr}
   1e788:	ldrb	r3, [r0, #-1]
   1e78c:	ldr	r0, [ip, lr, lsl #2]
   1e790:	sub	r3, r3, #10
   1e794:	clz	r3, r3
   1e798:	lsr	r3, r3, #5
   1e79c:	str	r3, [r0, #28]
   1e7a0:	ldr	r3, [pc, #1760]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e7a4:	ldr	r0, [fp, r3]
   1e7a8:	bl	1b338 <__assert_fail@plt+0xa374>
   1e7ac:	ldr	r2, [pc, #1612]	; 1ee00 <__assert_fail@plt+0xde3c>
   1e7b0:	mov	r1, #7
   1e7b4:	add	r2, pc, r2
   1e7b8:	mov	r3, #260	; 0x104
   1e7bc:	str	r1, [r2]
   1e7c0:	b	1e14c <__assert_fail@plt+0xd188>
   1e7c4:	ldr	r3, [sp, #12]
   1e7c8:	ldr	fp, [sp, #16]
   1e7cc:	ldr	r2, [r3]
   1e7d0:	ldr	r3, [sp, #8]
   1e7d4:	cmp	r2, #0
   1e7d8:	ldr	r1, [r3]
   1e7dc:	ble	1e808 <__assert_fail@plt+0xd844>
   1e7e0:	ldr	r3, [pc, #1564]	; 1ee04 <__assert_fail@plt+0xde40>
   1e7e4:	add	r0, r1, r2
   1e7e8:	add	r3, pc, r3
   1e7ec:	ldmib	r3, {ip, lr}
   1e7f0:	ldrb	r3, [r0, #-1]
   1e7f4:	ldr	r0, [ip, lr, lsl #2]
   1e7f8:	sub	r3, r3, #10
   1e7fc:	clz	r3, r3
   1e800:	lsr	r3, r3, #5
   1e804:	str	r3, [r0, #28]
   1e808:	ldr	r3, [pc, #1656]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e80c:	ldr	r0, [fp, r3]
   1e810:	bl	1b338 <__assert_fail@plt+0xa374>
   1e814:	ldr	r3, [pc, #1516]	; 1ee08 <__assert_fail@plt+0xde44>
   1e818:	b	1e14c <__assert_fail@plt+0xd188>
   1e81c:	ldr	r3, [sp, #12]
   1e820:	ldr	fp, [sp, #16]
   1e824:	ldr	r2, [r3]
   1e828:	ldr	r3, [sp, #8]
   1e82c:	cmp	r2, #0
   1e830:	ldr	r1, [r3]
   1e834:	ble	1e860 <__assert_fail@plt+0xd89c>
   1e838:	ldr	r3, [pc, #1484]	; 1ee0c <__assert_fail@plt+0xde48>
   1e83c:	add	r0, r1, r2
   1e840:	add	r3, pc, r3
   1e844:	ldmib	r3, {ip, lr}
   1e848:	ldrb	r3, [r0, #-1]
   1e84c:	ldr	r0, [ip, lr, lsl #2]
   1e850:	sub	r3, r3, #10
   1e854:	clz	r3, r3
   1e858:	lsr	r3, r3, #5
   1e85c:	str	r3, [r0, #28]
   1e860:	ldr	r3, [pc, #1568]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e864:	ldr	r0, [fp, r3]
   1e868:	bl	1b338 <__assert_fail@plt+0xa374>
   1e86c:	ldr	r2, [pc, #1436]	; 1ee10 <__assert_fail@plt+0xde4c>
   1e870:	mov	r1, #7
   1e874:	add	r2, pc, r2
   1e878:	ldr	r3, [pc, #1428]	; 1ee14 <__assert_fail@plt+0xde50>
   1e87c:	str	r1, [r2]
   1e880:	b	1e14c <__assert_fail@plt+0xd188>
   1e884:	ldr	r3, [sp, #12]
   1e888:	ldr	fp, [sp, #16]
   1e88c:	ldr	r2, [r3]
   1e890:	ldr	r3, [sp, #8]
   1e894:	cmp	r2, #0
   1e898:	ldr	r1, [r3]
   1e89c:	ble	1e8c8 <__assert_fail@plt+0xd904>
   1e8a0:	ldr	r3, [pc, #1392]	; 1ee18 <__assert_fail@plt+0xde54>
   1e8a4:	add	r0, r1, r2
   1e8a8:	add	r3, pc, r3
   1e8ac:	ldmib	r3, {ip, lr}
   1e8b0:	ldrb	r3, [r0, #-1]
   1e8b4:	ldr	r0, [ip, lr, lsl #2]
   1e8b8:	sub	r3, r3, #10
   1e8bc:	clz	r3, r3
   1e8c0:	lsr	r3, r3, #5
   1e8c4:	str	r3, [r0, #28]
   1e8c8:	ldr	r3, [pc, #1464]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e8cc:	ldr	r0, [fp, r3]
   1e8d0:	bl	1b338 <__assert_fail@plt+0xa374>
   1e8d4:	ldr	r3, [pc, #1344]	; 1ee1c <__assert_fail@plt+0xde58>
   1e8d8:	b	1e14c <__assert_fail@plt+0xd188>
   1e8dc:	ldr	r3, [sp, #12]
   1e8e0:	ldr	fp, [sp, #16]
   1e8e4:	ldr	r2, [r3]
   1e8e8:	ldr	r3, [sp, #8]
   1e8ec:	cmp	r2, #0
   1e8f0:	ldr	r1, [r3]
   1e8f4:	ble	1e920 <__assert_fail@plt+0xd95c>
   1e8f8:	ldr	r3, [pc, #1312]	; 1ee20 <__assert_fail@plt+0xde5c>
   1e8fc:	add	r0, r1, r2
   1e900:	add	r3, pc, r3
   1e904:	ldmib	r3, {ip, lr}
   1e908:	ldrb	r3, [r0, #-1]
   1e90c:	ldr	r0, [ip, lr, lsl #2]
   1e910:	sub	r3, r3, #10
   1e914:	clz	r3, r3
   1e918:	lsr	r3, r3, #5
   1e91c:	str	r3, [r0, #28]
   1e920:	ldr	r3, [pc, #1376]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e924:	ldr	r0, [fp, r3]
   1e928:	bl	1b338 <__assert_fail@plt+0xa374>
   1e92c:	mov	r3, #264	; 0x108
   1e930:	b	1e14c <__assert_fail@plt+0xd188>
   1e934:	ldr	r3, [sp, #12]
   1e938:	ldr	fp, [sp, #16]
   1e93c:	ldr	r2, [r3]
   1e940:	ldr	r3, [sp, #8]
   1e944:	cmp	r2, #0
   1e948:	ldr	r1, [r3]
   1e94c:	ble	1e978 <__assert_fail@plt+0xd9b4>
   1e950:	ldr	r3, [pc, #1228]	; 1ee24 <__assert_fail@plt+0xde60>
   1e954:	add	r0, r1, r2
   1e958:	add	r3, pc, r3
   1e95c:	ldmib	r3, {ip, lr}
   1e960:	ldrb	r3, [r0, #-1]
   1e964:	ldr	r0, [ip, lr, lsl #2]
   1e968:	sub	r3, r3, #10
   1e96c:	clz	r3, r3
   1e970:	lsr	r3, r3, #5
   1e974:	str	r3, [r0, #28]
   1e978:	ldr	r3, [pc, #1288]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e97c:	ldr	r0, [fp, r3]
   1e980:	bl	1b338 <__assert_fail@plt+0xa374>
   1e984:	ldr	r3, [pc, #1180]	; 1ee28 <__assert_fail@plt+0xde64>
   1e988:	b	1e14c <__assert_fail@plt+0xd188>
   1e98c:	ldr	r3, [sp, #12]
   1e990:	ldr	fp, [sp, #16]
   1e994:	ldr	r2, [r3]
   1e998:	ldr	r3, [sp, #8]
   1e99c:	cmp	r2, #0
   1e9a0:	ldr	r1, [r3]
   1e9a4:	ble	1e9d0 <__assert_fail@plt+0xda0c>
   1e9a8:	ldr	r3, [pc, #1148]	; 1ee2c <__assert_fail@plt+0xde68>
   1e9ac:	add	r0, r1, r2
   1e9b0:	add	r3, pc, r3
   1e9b4:	ldmib	r3, {ip, lr}
   1e9b8:	ldrb	r3, [r0, #-1]
   1e9bc:	ldr	r0, [ip, lr, lsl #2]
   1e9c0:	sub	r3, r3, #10
   1e9c4:	clz	r3, r3
   1e9c8:	lsr	r3, r3, #5
   1e9cc:	str	r3, [r0, #28]
   1e9d0:	ldr	r3, [pc, #1200]	; 1ee88 <__assert_fail@plt+0xdec4>
   1e9d4:	ldr	r0, [fp, r3]
   1e9d8:	bl	1b338 <__assert_fail@plt+0xa374>
   1e9dc:	ldr	r3, [pc, #1100]	; 1ee30 <__assert_fail@plt+0xde6c>
   1e9e0:	b	1e14c <__assert_fail@plt+0xd188>
   1e9e4:	ldr	r3, [sp, #12]
   1e9e8:	ldr	fp, [sp, #16]
   1e9ec:	ldr	r2, [r3]
   1e9f0:	ldr	r3, [sp, #8]
   1e9f4:	cmp	r2, #0
   1e9f8:	ldr	r1, [r3]
   1e9fc:	ble	1ea28 <__assert_fail@plt+0xda64>
   1ea00:	ldr	r3, [pc, #1068]	; 1ee34 <__assert_fail@plt+0xde70>
   1ea04:	add	r0, r1, r2
   1ea08:	add	r3, pc, r3
   1ea0c:	ldmib	r3, {ip, lr}
   1ea10:	ldrb	r3, [r0, #-1]
   1ea14:	ldr	r0, [ip, lr, lsl #2]
   1ea18:	sub	r3, r3, #10
   1ea1c:	clz	r3, r3
   1ea20:	lsr	r3, r3, #5
   1ea24:	str	r3, [r0, #28]
   1ea28:	ldr	r3, [pc, #1112]	; 1ee88 <__assert_fail@plt+0xdec4>
   1ea2c:	ldr	r0, [fp, r3]
   1ea30:	bl	1b338 <__assert_fail@plt+0xa374>
   1ea34:	ldr	r3, [pc, #1020]	; 1ee38 <__assert_fail@plt+0xde74>
   1ea38:	b	1e14c <__assert_fail@plt+0xd188>
   1ea3c:	ldr	r3, [sp, #12]
   1ea40:	ldr	sl, [sp, #4]
   1ea44:	ldr	r9, [sp, #24]
   1ea48:	ldr	r2, [r3]
   1ea4c:	ldr	r3, [sp, #8]
   1ea50:	cmp	r2, #0
   1ea54:	ldr	r1, [r3]
   1ea58:	ble	1ea84 <__assert_fail@plt+0xdac0>
   1ea5c:	ldr	r3, [pc, #984]	; 1ee3c <__assert_fail@plt+0xde78>
   1ea60:	add	r3, pc, r3
   1ea64:	ldmib	r3, {ip, lr}
   1ea68:	add	r0, r1, r2
   1ea6c:	ldrb	r3, [r0, #-1]
   1ea70:	ldr	r0, [ip, lr, lsl #2]
   1ea74:	sub	r3, r3, #10
   1ea78:	clz	r3, r3
   1ea7c:	lsr	r3, r3, #5
   1ea80:	str	r3, [r0, #28]
   1ea84:	ldr	r3, [pc, #1020]	; 1ee88 <__assert_fail@plt+0xdec4>
   1ea88:	ldr	r0, [sp, #16]
   1ea8c:	ldr	r0, [r0, r3]
   1ea90:	bl	1b338 <__assert_fail@plt+0xa374>
   1ea94:	ldr	r2, [pc, #932]	; 1ee40 <__assert_fail@plt+0xde7c>
   1ea98:	add	r2, pc, r2
   1ea9c:	ldrb	r3, [r2, #28]
   1eaa0:	ldmib	r2, {ip, lr}
   1eaa4:	ldr	r7, [r2, #12]
   1eaa8:	ldr	r2, [r2]
   1eaac:	b	1ddf0 <__assert_fail@plt+0xce2c>
   1eab0:	ldr	r3, [sp, #12]
   1eab4:	ldr	sl, [sp, #4]
   1eab8:	ldr	r9, [sp, #24]
   1eabc:	ldr	r2, [r3]
   1eac0:	ldr	r3, [sp, #8]
   1eac4:	cmp	r2, #0
   1eac8:	ldr	r1, [r3]
   1eacc:	ble	1ea84 <__assert_fail@plt+0xdac0>
   1ead0:	ldr	r3, [pc, #876]	; 1ee44 <__assert_fail@plt+0xde80>
   1ead4:	add	r3, pc, r3
   1ead8:	b	1ea64 <__assert_fail@plt+0xdaa0>
   1eadc:	ldr	r3, [sp, #12]
   1eae0:	ldr	sl, [sp, #4]
   1eae4:	ldr	r9, [sp, #24]
   1eae8:	ldr	r2, [r3]
   1eaec:	ldr	r3, [sp, #8]
   1eaf0:	cmp	r2, #0
   1eaf4:	ldr	r1, [r3]
   1eaf8:	ble	1ea84 <__assert_fail@plt+0xdac0>
   1eafc:	ldr	r3, [pc, #836]	; 1ee48 <__assert_fail@plt+0xde84>
   1eb00:	add	r3, pc, r3
   1eb04:	b	1ea64 <__assert_fail@plt+0xdaa0>
   1eb08:	ldr	r3, [sp, #12]
   1eb0c:	ldr	fp, [sp, #16]
   1eb10:	ldr	r2, [r3]
   1eb14:	ldr	r3, [sp, #8]
   1eb18:	cmp	r2, #0
   1eb1c:	ldr	r1, [r3]
   1eb20:	ble	1eb4c <__assert_fail@plt+0xdb88>
   1eb24:	ldr	r3, [pc, #800]	; 1ee4c <__assert_fail@plt+0xde88>
   1eb28:	add	r0, r1, r2
   1eb2c:	add	r3, pc, r3
   1eb30:	ldmib	r3, {ip, lr}
   1eb34:	ldrb	r3, [r0, #-1]
   1eb38:	ldr	r0, [ip, lr, lsl #2]
   1eb3c:	sub	r3, r3, #10
   1eb40:	clz	r3, r3
   1eb44:	lsr	r3, r3, #5
   1eb48:	str	r3, [r0, #28]
   1eb4c:	ldr	r3, [pc, #820]	; 1ee88 <__assert_fail@plt+0xdec4>
   1eb50:	ldr	r0, [fp, r3]
   1eb54:	bl	1b338 <__assert_fail@plt+0xa374>
   1eb58:	ldr	r3, [sp, #8]
   1eb5c:	ldr	r3, [r3]
   1eb60:	ldrb	r3, [r3]
   1eb64:	cmp	r3, #91	; 0x5b
   1eb68:	beq	1f5f8 <__assert_fail@plt+0xe634>
   1eb6c:	and	r2, r3, #191	; 0xbf
   1eb70:	cmp	r2, #59	; 0x3b
   1eb74:	ldreq	r2, [pc, #724]	; 1ee50 <__assert_fail@plt+0xde8c>
   1eb78:	moveq	r1, #5
   1eb7c:	addeq	r2, pc, r2
   1eb80:	streq	r1, [r2]
   1eb84:	b	1e14c <__assert_fail@plt+0xd188>
   1eb88:	ldr	r3, [sp, #12]
   1eb8c:	ldr	fp, [sp, #16]
   1eb90:	ldr	r2, [r3]
   1eb94:	ldr	r3, [sp, #8]
   1eb98:	cmp	r2, #0
   1eb9c:	ldr	r1, [r3]
   1eba0:	ble	1ebcc <__assert_fail@plt+0xdc08>
   1eba4:	ldr	r3, [pc, #680]	; 1ee54 <__assert_fail@plt+0xde90>
   1eba8:	add	r0, r1, r2
   1ebac:	add	r3, pc, r3
   1ebb0:	ldmib	r3, {ip, lr}
   1ebb4:	ldrb	r3, [r0, #-1]
   1ebb8:	ldr	r0, [ip, lr, lsl #2]
   1ebbc:	sub	r3, r3, #10
   1ebc0:	clz	r3, r3
   1ebc4:	lsr	r3, r3, #5
   1ebc8:	str	r3, [r0, #28]
   1ebcc:	ldr	r3, [pc, #692]	; 1ee88 <__assert_fail@plt+0xdec4>
   1ebd0:	ldr	r0, [fp, r3]
   1ebd4:	bl	1b338 <__assert_fail@plt+0xa374>
   1ebd8:	mov	r3, #268	; 0x10c
   1ebdc:	b	1e14c <__assert_fail@plt+0xd188>
   1ebe0:	ldr	r3, [sp, #12]
   1ebe4:	ldr	fp, [sp, #16]
   1ebe8:	ldr	r2, [r3]
   1ebec:	ldr	r3, [sp, #8]
   1ebf0:	cmp	r2, #0
   1ebf4:	ldr	r1, [r3]
   1ebf8:	ble	1ec24 <__assert_fail@plt+0xdc60>
   1ebfc:	ldr	r3, [pc, #596]	; 1ee58 <__assert_fail@plt+0xde94>
   1ec00:	add	r0, r1, r2
   1ec04:	add	r3, pc, r3
   1ec08:	ldmib	r3, {ip, lr}
   1ec0c:	ldrb	r3, [r0, #-1]
   1ec10:	ldr	r0, [ip, lr, lsl #2]
   1ec14:	sub	r3, r3, #10
   1ec18:	clz	r3, r3
   1ec1c:	lsr	r3, r3, #5
   1ec20:	str	r3, [r0, #28]
   1ec24:	ldr	r3, [pc, #604]	; 1ee88 <__assert_fail@plt+0xdec4>
   1ec28:	ldr	r0, [fp, r3]
   1ec2c:	bl	1b338 <__assert_fail@plt+0xa374>
   1ec30:	ldr	r3, [pc, #548]	; 1ee5c <__assert_fail@plt+0xde98>
   1ec34:	b	1e14c <__assert_fail@plt+0xd188>
   1ec38:	ldr	r3, [sp, #12]
   1ec3c:	ldr	fp, [sp, #16]
   1ec40:	ldr	r2, [r3]
   1ec44:	ldr	r3, [sp, #8]
   1ec48:	cmp	r2, #0
   1ec4c:	ldr	r1, [r3]
   1ec50:	ble	1ec7c <__assert_fail@plt+0xdcb8>
   1ec54:	ldr	r3, [pc, #516]	; 1ee60 <__assert_fail@plt+0xde9c>
   1ec58:	add	r0, r1, r2
   1ec5c:	add	r3, pc, r3
   1ec60:	ldmib	r3, {ip, lr}
   1ec64:	ldrb	r3, [r0, #-1]
   1ec68:	ldr	r0, [ip, lr, lsl #2]
   1ec6c:	sub	r3, r3, #10
   1ec70:	clz	r3, r3
   1ec74:	lsr	r3, r3, #5
   1ec78:	str	r3, [r0, #28]
   1ec7c:	ldr	r3, [pc, #516]	; 1ee88 <__assert_fail@plt+0xdec4>
   1ec80:	ldr	r0, [fp, r3]
   1ec84:	bl	1b338 <__assert_fail@plt+0xa374>
   1ec88:	ldr	r3, [pc, #468]	; 1ee64 <__assert_fail@plt+0xdea0>
   1ec8c:	b	1e14c <__assert_fail@plt+0xd188>
   1ec90:	ldr	r3, [sp, #8]
   1ec94:	ldrb	r2, [fp, #28]
   1ec98:	ldr	r4, [fp, #8]
   1ec9c:	ldr	lr, [fp, #4]
   1eca0:	ldr	r3, [r3]
   1eca4:	strb	r2, [r9]
   1eca8:	ldr	r2, [lr, r4, lsl #2]
   1ecac:	sub	r3, r9, r3
   1ecb0:	sub	r3, r3, #1
   1ecb4:	str	r3, [sp, #44]	; 0x2c
   1ecb8:	ldr	r3, [r2, #44]	; 0x2c
   1ecbc:	cmp	r3, #0
   1ecc0:	beq	1f344 <__assert_fail@plt+0xe380>
   1ecc4:	ldr	r0, [fp, #24]
   1ecc8:	ldr	ip, [r2, #4]
   1eccc:	ldr	r1, [sl, #12]
   1ecd0:	ldr	r3, [sp, #8]
   1ecd4:	add	r5, ip, r0
   1ecd8:	cmp	r5, r1
   1ecdc:	ldr	r3, [r3]
   1ece0:	bcs	1f6e8 <__assert_fail@plt+0xe724>
   1ece4:	add	r0, r0, #1
   1ece8:	add	r0, ip, r0
   1ecec:	cmp	r1, r0
   1ecf0:	bhi	1f674 <__assert_fail@plt+0xe6b0>
   1ecf4:	ldr	r0, [r2, #40]	; 0x28
   1ecf8:	sub	r8, r1, r3
   1ecfc:	cmp	r0, #0
   1ed00:	bne	1f26c <__assert_fail@plt+0xe2a8>
   1ed04:	cmp	r8, #1
   1ed08:	bne	1f42c <__assert_fail@plt+0xe468>
   1ed0c:	ldr	r2, [pc, #340]	; 1ee68 <__assert_fail@plt+0xdea4>
   1ed10:	ldr	r3, [sp, #8]
   1ed14:	add	r2, pc, r2
   1ed18:	ldr	r1, [r3]
   1ed1c:	ldr	r3, [r2]
   1ed20:	str	r1, [r2, #12]
   1ed24:	sub	r3, r3, #1
   1ed28:	add	r3, r3, r3, lsr #31
   1ed2c:	asr	r3, r3, #1
   1ed30:	add	r3, r3, #34	; 0x22
   1ed34:	b	1df38 <__assert_fail@plt+0xcf74>
   1ed38:	andeq	r9, r1, r4, lsl #2
   1ed3c:	andeq	r0, r0, r4, lsl r1
   1ed40:	andeq	r9, r1, ip, asr #25
   1ed44:	andeq	r0, r0, r8, lsr #2
   1ed48:	andeq	r9, r1, r4, lsl #25
   1ed4c:	andeq	r0, r0, r8, asr r1
   1ed50:	strdeq	r6, [r0], -r8
   1ed54:	andeq	r9, r1, r4, asr #24
   1ed58:			; <UNDEFINED> instruction: 0x00006cb8
   1ed5c:	muleq	r1, ip, fp
   1ed60:	andeq	r6, r0, r0, lsl #24
   1ed64:	andeq	r9, r1, ip, ror fp
   1ed68:	andeq	r9, r1, r8, ror fp
   1ed6c:	andeq	r9, r1, r0, asr #22
   1ed70:	andeq	r9, r1, ip, lsr fp
   1ed74:	andeq	r9, r1, r8, lsr sl
   1ed78:	andeq	r9, r1, ip, lsl sl
   1ed7c:	ldrdeq	r9, [r1], -ip
   1ed80:	andeq	r0, r0, r0, ror #2
   1ed84:	andeq	r0, r0, r4, asr r1
   1ed88:	andeq	r9, r1, r8, ror r9
   1ed8c:	andeq	r9, r1, ip, lsr r9
   1ed90:	andeq	r9, r1, r8, asr #17
   1ed94:	andeq	r9, r1, r4, ror r8
   1ed98:	andeq	r0, r0, r1, lsl r1
   1ed9c:	andeq	r9, r1, ip, lsr r8
   1eda0:	andeq	r9, r1, r8, lsl #16
   1eda4:	ldrdeq	r9, [r1], -r4
   1eda8:	andeq	r9, r1, ip, asr r7
   1edac:	andeq	r0, r0, r7, lsl r1
   1edb0:	ldrdeq	r9, [r1], -r0
   1edb4:	andeq	r9, r1, r0, ror r6
   1edb8:	andeq	r0, r0, r3, lsl r1
   1edbc:	andeq	r9, r1, r0, asr #11
   1edc0:	andeq	r7, r0, r8, lsl r4
   1edc4:	andeq	r0, r0, r2, lsl r1
   1edc8:	strdeq	r9, [r1], -ip
   1edcc:	andeq	r0, r0, r6, lsl r1
   1edd0:	andeq	r9, r1, r8, ror r4
   1edd4:	andeq	r9, r1, r4, asr #8
   1edd8:	andeq	r9, r1, r0, lsl r4
   1eddc:	ldrdeq	r9, [r1], -ip
   1ede0:	andeq	r0, r0, pc, lsl #2
   1ede4:	andeq	r9, r1, r8, lsr #7
   1ede8:	andeq	r9, r1, r4, ror r3
   1edec:	andeq	r0, r0, lr, lsl #2
   1edf0:	andeq	r9, r1, r0, asr #6
   1edf4:	andeq	r9, r1, ip, lsl #6
   1edf8:	andeq	r0, r0, sp, lsl #2
   1edfc:	ldrdeq	r9, [r1], -r8
   1ee00:	andeq	r9, r1, r4, lsr #5
   1ee04:	andeq	r9, r1, r0, ror r2
   1ee08:	andeq	r0, r0, r3, lsl #2
   1ee0c:	andeq	r9, r1, r8, lsl r2
   1ee10:	andeq	r9, r1, r4, ror #3
   1ee14:	andeq	r0, r0, r2, lsl #2
   1ee18:			; <UNDEFINED> instruction: 0x000191b0
   1ee1c:	andeq	r0, r0, r9, lsl #2
   1ee20:	andeq	r9, r1, r8, asr r1
   1ee24:	andeq	r9, r1, r0, lsl #2
   1ee28:	andeq	r0, r0, r7, lsl #2
   1ee2c:	andeq	r9, r1, r8, lsr #1
   1ee30:	andeq	r0, r0, r6, lsl #2
   1ee34:	andeq	r9, r1, r0, asr r0
   1ee38:	andeq	r0, r0, r5, lsl #2
   1ee3c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1ee40:	andeq	r8, r1, r0, asr #31
   1ee44:	andeq	r8, r1, r4, lsl #31
   1ee48:	andeq	r8, r1, r8, asr pc
   1ee4c:	andeq	r8, r1, ip, lsr #30
   1ee50:	ldrdeq	r8, [r1], -ip
   1ee54:	andeq	r8, r1, ip, lsr #29
   1ee58:	andeq	r8, r1, r4, asr lr
   1ee5c:	andeq	r0, r0, fp, lsl #2
   1ee60:	strdeq	r8, [r1], -ip
   1ee64:	andeq	r0, r0, sl, lsl #2
   1ee68:	andeq	r8, r1, r4, asr #26
   1ee6c:	andeq	r8, r1, r0, lsl fp
   1ee70:	andeq	r0, r0, r4, asr #2
   1ee74:	andeq	r8, r1, r8, asr sl
   1ee78:	andeq	r0, r0, r5, lsl r1
   1ee7c:	andeq	r8, r1, r8, asr #19
   1ee80:	muleq	r0, r4, r7
   1ee84:	andeq	r8, r1, r8, lsl #17
   1ee88:	andeq	r0, r0, ip, lsl r1
   1ee8c:	andeq	r0, r0, r0, lsr r1
   1ee90:			; <UNDEFINED> instruction: 0x000066b8
   1ee94:	andeq	r8, r1, r4, asr #12
   1ee98:	andeq	r8, r1, r4, lsr #12
   1ee9c:	strdeq	r8, [r1], -r0
   1eea0:	andeq	r8, r1, r0, asr r5
   1eea4:	andeq	r8, r1, r4, lsr r5
   1eea8:	andeq	r8, r1, ip, ror #9
   1eeac:			; <UNDEFINED> instruction: 0x000063b4
   1eeb0:	andeq	r6, r0, r8, lsr r3
   1eeb4:	andeq	r8, r1, r8, asr r4
   1eeb8:	andeq	r6, r0, r0, ror #6
   1eebc:	andeq	r0, r0, r8, ror #2
   1eec0:	andeq	r8, r1, r8, lsl r4
   1eec4:	andeq	r6, r0, r4, asr #6
   1eec8:			; <UNDEFINED> instruction: 0x000183b0
   1eecc:	ldrdeq	r5, [r0], -r0
   1eed0:	andeq	r5, r0, r4, asr #7
   1eed4:	andeq	r5, r0, r0, ror #6
   1eed8:	andeq	r8, r1, r0, asr #5
   1eedc:	andeq	r6, r0, r4, ror r2
   1eee0:	muleq	r1, ip, r2
   1eee4:	ldrdeq	r5, [r0], -ip
   1eee8:	andeq	r6, r0, r0, asr #1
   1eeec:	andeq	r6, r0, r0, ror #2
   1eef0:	andeq	r6, r0, r8, lsr #2
   1eef4:	andeq	r5, r0, r0, lsr #5
   1eef8:	andeq	r6, r0, r4, lsl #1
   1eefc:	muleq	r0, r8, r0
   1ef00:	andeq	r5, r0, ip, ror r2
   1ef04:	andeq	r6, r0, r0, rrx
   1ef08:	andeq	r6, r0, r8, rrx
   1ef0c:	andeq	r0, r0, fp, lsl r1
   1ef10:	andeq	r0, r0, r8, lsl r1
   1ef14:	andeq	r8, r1, ip, asr #3
   1ef18:	muleq	r0, r4, r1
   1ef1c:			; <UNDEFINED> instruction: 0x000061b8
   1ef20:	ldr	r3, [sp, #12]
   1ef24:	ldr	sl, [sp, #4]
   1ef28:	ldr	r9, [sp, #24]
   1ef2c:	ldr	r2, [r3]
   1ef30:	ldr	r3, [sp, #8]
   1ef34:	cmp	r2, #0
   1ef38:	ldr	r1, [r3]
   1ef3c:	ble	1ef68 <__assert_fail@plt+0xdfa4>
   1ef40:	ldr	r3, [pc, #-220]	; 1ee6c <__assert_fail@plt+0xdea8>
   1ef44:	add	r0, r1, r2
   1ef48:	add	r3, pc, r3
   1ef4c:	ldmib	r3, {ip, lr}
   1ef50:	ldrb	r3, [r0, #-1]
   1ef54:	ldr	r0, [ip, lr, lsl #2]
   1ef58:	sub	r3, r3, #10
   1ef5c:	clz	r3, r3
   1ef60:	lsr	r3, r3, #5
   1ef64:	str	r3, [r0, #28]
   1ef68:	ldr	r4, [sp, #16]
   1ef6c:	ldr	r3, [pc, #-236]	; 1ee88 <__assert_fail@plt+0xdec4>
   1ef70:	ldr	r0, [r4, r3]
   1ef74:	bl	1b338 <__assert_fail@plt+0xa374>
   1ef78:	ldr	r3, [pc, #-272]	; 1ee70 <__assert_fail@plt+0xdeac>
   1ef7c:	ldr	r1, [sp, #12]
   1ef80:	ldr	r0, [sp, #8]
   1ef84:	ldr	r3, [r4, r3]
   1ef88:	mov	r2, #1
   1ef8c:	ldr	r1, [r1]
   1ef90:	ldr	r3, [r3]
   1ef94:	ldr	r0, [r0]
   1ef98:	bl	10dcc <fwrite@plt>
   1ef9c:	b	1ea94 <__assert_fail@plt+0xdad0>
   1efa0:	ldr	sl, [sp, #4]
   1efa4:	ldr	r9, [sp, #24]
   1efa8:	bl	1b228 <__assert_fail@plt+0xa264>
   1efac:	cmp	r0, #0
   1efb0:	beq	1f264 <__assert_fail@plt+0xe2a0>
   1efb4:	bl	1dcb8 <__assert_fail@plt+0xccf4>
   1efb8:	ldr	r1, [sp, #16]
   1efbc:	ldr	r2, [pc, #-312]	; 1ee8c <__assert_fail@plt+0xdec8>
   1efc0:	ldr	r3, [pc, #-184]	; 1ef10 <__assert_fail@plt+0xdf4c>
   1efc4:	ldr	r2, [r1, r2]
   1efc8:	ldr	r3, [r1, r3]
   1efcc:	ldr	r2, [r2]
   1efd0:	ldr	r2, [r2]
   1efd4:	str	r2, [r3]
   1efd8:	b	1ea94 <__assert_fail@plt+0xdad0>
   1efdc:	ldr	r3, [sp, #12]
   1efe0:	ldr	fp, [sp, #16]
   1efe4:	ldr	r2, [r3]
   1efe8:	ldr	r3, [sp, #8]
   1efec:	cmp	r2, #0
   1eff0:	ldr	r1, [r3]
   1eff4:	ble	1f020 <__assert_fail@plt+0xe05c>
   1eff8:	ldr	r3, [pc, #-396]	; 1ee74 <__assert_fail@plt+0xdeb0>
   1effc:	add	r0, r1, r2
   1f000:	add	r3, pc, r3
   1f004:	ldmib	r3, {ip, lr}
   1f008:	ldrb	r3, [r0, #-1]
   1f00c:	ldr	r0, [ip, lr, lsl #2]
   1f010:	sub	r3, r3, #10
   1f014:	clz	r3, r3
   1f018:	lsr	r3, r3, #5
   1f01c:	str	r3, [r0, #28]
   1f020:	ldr	r3, [pc, #-416]	; 1ee88 <__assert_fail@plt+0xdec4>
   1f024:	add	r4, sp, #56	; 0x38
   1f028:	ldr	r0, [fp, r3]
   1f02c:	bl	1b338 <__assert_fail@plt+0xa374>
   1f030:	ldr	r3, [sp, #12]
   1f034:	mov	r0, r4
   1f038:	ldr	r2, [r3]
   1f03c:	ldr	r3, [sp, #8]
   1f040:	sub	r2, r2, #2
   1f044:	ldr	r1, [r3]
   1f048:	ldr	r3, [pc, #-404]	; 1eebc <__assert_fail@plt+0xdef8>
   1f04c:	add	r1, r1, #1
   1f050:	ldr	r5, [fp, r3]
   1f054:	bl	16064 <__assert_fail@plt+0x50a0>
   1f058:	ldm	r4, {r0, r1, r2}
   1f05c:	ldr	r3, [pc, #-492]	; 1ee78 <__assert_fail@plt+0xdeb4>
   1f060:	stm	r5, {r0, r1, r2}
   1f064:	b	1e14c <__assert_fail@plt+0xd188>
   1f068:	ldr	r3, [sp, #12]
   1f06c:	ldr	sl, [sp, #4]
   1f070:	ldr	r9, [sp, #24]
   1f074:	ldr	r2, [r3]
   1f078:	ldr	r3, [sp, #8]
   1f07c:	cmp	r2, #0
   1f080:	ldr	r1, [r3]
   1f084:	ble	1f0b0 <__assert_fail@plt+0xe0ec>
   1f088:	ldr	r3, [pc, #-532]	; 1ee7c <__assert_fail@plt+0xdeb8>
   1f08c:	add	r0, r1, r2
   1f090:	add	r3, pc, r3
   1f094:	ldmib	r3, {ip, lr}
   1f098:	ldrb	r3, [r0, #-1]
   1f09c:	ldr	r0, [ip, lr, lsl #2]
   1f0a0:	sub	r3, r3, #10
   1f0a4:	clz	r3, r3
   1f0a8:	lsr	r3, r3, #5
   1f0ac:	str	r3, [r0, #28]
   1f0b0:	ldr	r3, [pc, #-560]	; 1ee88 <__assert_fail@plt+0xdec4>
   1f0b4:	ldr	r0, [sp, #16]
   1f0b8:	ldr	r0, [r0, r3]
   1f0bc:	bl	1b338 <__assert_fail@plt+0xa374>
   1f0c0:	bl	10e50 <__ctype_b_loc@plt>
   1f0c4:	ldr	r3, [sp, #8]
   1f0c8:	ldr	r5, [r3]
   1f0cc:	mov	r3, r5
   1f0d0:	ldr	r1, [r0]
   1f0d4:	mov	r4, r3
   1f0d8:	ldrb	r2, [r3], #1
   1f0dc:	lsl	r2, r2, #1
   1f0e0:	ldrh	r2, [r1, r2]
   1f0e4:	tst	r2, #2048	; 0x800
   1f0e8:	beq	1f0d4 <__assert_fail@plt+0xe110>
   1f0ec:	ldr	r3, [sp, #12]
   1f0f0:	mov	r1, #34	; 0x22
   1f0f4:	mov	r0, r5
   1f0f8:	ldr	r6, [r3]
   1f0fc:	mov	r2, r6
   1f100:	sub	r6, r6, #1
   1f104:	bl	10eec <memchr@plt>
   1f108:	ldrb	r2, [r5, r6]
   1f10c:	add	r3, r5, r6
   1f110:	cmp	r2, #34	; 0x22
   1f114:	beq	1f124 <__assert_fail@plt+0xe160>
   1f118:	ldrb	r2, [r3, #-1]!
   1f11c:	cmp	r2, #34	; 0x22
   1f120:	bne	1f118 <__assert_fail@plt+0xe154>
   1f124:	cmp	r0, #0
   1f128:	cmpne	r3, r0
   1f12c:	bls	1f824 <__assert_fail@plt+0xe860>
   1f130:	sub	r3, r3, r0
   1f134:	add	r5, sp, #72	; 0x48
   1f138:	sub	r2, r3, #1
   1f13c:	add	r1, r0, #1
   1f140:	mov	r0, r5
   1f144:	bl	16064 <__assert_fail@plt+0x50a0>
   1f148:	ldr	r6, [sp, #76]	; 0x4c
   1f14c:	ldr	r2, [sp, #72]	; 0x48
   1f150:	mov	r0, r6
   1f154:	sub	r2, r2, #1
   1f158:	mov	r1, #0
   1f15c:	bl	10eec <memchr@plt>
   1f160:	cmp	r0, #0
   1f164:	beq	1f174 <__assert_fail@plt+0xe1b0>
   1f168:	ldr	r0, [pc, #-752]	; 1ee80 <__assert_fail@plt+0xdebc>
   1f16c:	add	r0, pc, r0
   1f170:	bl	1d45c <__assert_fail@plt+0xc498>
   1f174:	mov	r0, r6
   1f178:	bl	1c550 <__assert_fail@plt+0xb58c>
   1f17c:	mov	r2, #10
   1f180:	mov	r1, #0
   1f184:	mov	r6, r0
   1f188:	mov	r0, r4
   1f18c:	bl	10d30 <strtol@plt>
   1f190:	sub	r1, r0, #1
   1f194:	mov	r0, r6
   1f198:	bl	1b5f8 <__assert_fail@plt+0xa634>
   1f19c:	ldm	r5, {r0, r1, r2}
   1f1a0:	bl	15764 <__assert_fail@plt+0x47a0>
   1f1a4:	b	1ea94 <__assert_fail@plt+0xdad0>
   1f1a8:	ldr	r3, [sp, #12]
   1f1ac:	ldr	sl, [sp, #4]
   1f1b0:	ldr	r9, [sp, #24]
   1f1b4:	ldr	r2, [r3]
   1f1b8:	ldr	r3, [sp, #8]
   1f1bc:	cmp	r2, #0
   1f1c0:	ldr	r1, [r3]
   1f1c4:	ble	1f1f0 <__assert_fail@plt+0xe22c>
   1f1c8:	ldr	r3, [pc, #-844]	; 1ee84 <__assert_fail@plt+0xdec0>
   1f1cc:	add	r0, r1, r2
   1f1d0:	add	r3, pc, r3
   1f1d4:	ldmib	r3, {ip, lr}
   1f1d8:	ldrb	r3, [r0, #-1]
   1f1dc:	ldr	r0, [ip, lr, lsl #2]
   1f1e0:	sub	r3, r3, #10
   1f1e4:	clz	r3, r3
   1f1e8:	lsr	r3, r3, #5
   1f1ec:	str	r3, [r0, #28]
   1f1f0:	ldr	r3, [pc, #-880]	; 1ee88 <__assert_fail@plt+0xdec4>
   1f1f4:	ldr	r0, [sp, #16]
   1f1f8:	ldr	r0, [r0, r3]
   1f1fc:	bl	1b338 <__assert_fail@plt+0xa374>
   1f200:	ldr	r3, [sp, #8]
   1f204:	mov	r1, #34	; 0x22
   1f208:	ldr	r4, [r3]
   1f20c:	mov	r0, r4
   1f210:	bl	10e80 <strchr@plt>
   1f214:	ldr	r3, [sp, #12]
   1f218:	ldr	r2, [r3]
   1f21c:	mov	r3, #0
   1f220:	add	r4, r4, r2
   1f224:	strb	r3, [r4, #-1]
   1f228:	adds	r0, r0, #1
   1f22c:	beq	1f848 <__assert_fail@plt+0xe884>
   1f230:	bl	1b148 <__assert_fail@plt+0xa184>
   1f234:	ldr	r0, [sp, #16]
   1f238:	ldr	r2, [pc, #-948]	; 1ee8c <__assert_fail@plt+0xdec8>
   1f23c:	ldr	r3, [pc, #-820]	; 1ef10 <__assert_fail@plt+0xdf4c>
   1f240:	mov	r1, #16384	; 0x4000
   1f244:	ldr	r2, [r0, r2]
   1f248:	ldr	r3, [r0, r3]
   1f24c:	ldr	r2, [r2]
   1f250:	ldr	r0, [r2]
   1f254:	str	r0, [r3]
   1f258:	bl	1d788 <__assert_fail@plt+0xc7c4>
   1f25c:	bl	1db7c <__assert_fail@plt+0xcbb8>
   1f260:	b	1ea94 <__assert_fail@plt+0xdad0>
   1f264:	mov	r3, r0
   1f268:	b	1e14c <__assert_fail@plt+0xd188>
   1f26c:	sub	r7, r8, #1
   1f270:	cmp	r7, #0
   1f274:	ble	1f294 <__assert_fail@plt+0xe2d0>
   1f278:	sub	ip, ip, #1
   1f27c:	add	r2, r3, r7
   1f280:	ldrb	r0, [r3], #1
   1f284:	cmp	r3, r2
   1f288:	strb	r0, [ip, #1]!
   1f28c:	bne	1f280 <__assert_fail@plt+0xe2bc>
   1f290:	ldr	r2, [lr, r4, lsl #2]
   1f294:	ldr	r3, [r2, #44]	; 0x2c
   1f298:	cmp	r3, #2
   1f29c:	beq	1f500 <__assert_fail@plt+0xe53c>
   1f2a0:	ldr	r4, [r2, #12]
   1f2a4:	sub	r4, r4, r7
   1f2a8:	sub	r4, r4, #1
   1f2ac:	cmp	r4, #0
   1f2b0:	bgt	1f378 <__assert_fail@plt+0xe3b4>
   1f2b4:	str	r6, [sp, #40]	; 0x28
   1f2b8:	mov	r5, r2
   1f2bc:	mov	r6, r7
   1f2c0:	ldr	r7, [sp, #36]	; 0x24
   1f2c4:	b	1f320 <__assert_fail@plt+0xe35c>
   1f2c8:	ldr	r1, [r5, #12]
   1f2cc:	cmp	r1, #0
   1f2d0:	lslgt	r1, r1, #1
   1f2d4:	bgt	1f2e4 <__assert_fail@plt+0xe320>
   1f2d8:	add	r3, r1, #7
   1f2dc:	movge	r3, r1
   1f2e0:	add	r1, r1, r3, asr #3
   1f2e4:	str	r1, [r5, #12]
   1f2e8:	add	r1, r1, #2
   1f2ec:	bl	1d7e8 <__assert_fail@plt+0xc824>
   1f2f0:	cmp	r0, #0
   1f2f4:	str	r0, [r5, #4]
   1f2f8:	beq	1f338 <__assert_fail@plt+0xe374>
   1f2fc:	ldmib	r7, {r3, ip}
   1f300:	add	r1, r0, r4
   1f304:	str	r1, [r7, #12]
   1f308:	ldr	r5, [r3, ip, lsl #2]
   1f30c:	ldr	r4, [r5, #12]
   1f310:	sub	r4, r4, r6
   1f314:	sub	r4, r4, #1
   1f318:	cmp	r4, #0
   1f31c:	bgt	1f36c <__assert_fail@plt+0xe3a8>
   1f320:	ldr	r3, [r5, #20]
   1f324:	ldr	r0, [r5, #4]
   1f328:	cmp	r3, #0
   1f32c:	sub	r4, r1, r0
   1f330:	bne	1f2c8 <__assert_fail@plt+0xe304>
   1f334:	str	r3, [r5, #4]
   1f338:	ldr	r0, [pc, #-1200]	; 1ee90 <__assert_fail@plt+0xdecc>
   1f33c:	add	r0, pc, r0
   1f340:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1f344:	ldr	r3, [pc, #-1084]	; 1ef10 <__assert_fail@plt+0xdf4c>
   1f348:	ldr	ip, [sp, #16]
   1f34c:	ldr	r0, [r2, #16]
   1f350:	mov	r1, #1
   1f354:	str	r0, [fp, #24]
   1f358:	ldr	r5, [ip, r3]
   1f35c:	str	r1, [r2, #44]	; 0x2c
   1f360:	ldr	r3, [r5]
   1f364:	str	r3, [r2]
   1f368:	b	1ecc8 <__assert_fail@plt+0xdd04>
   1f36c:	mov	r7, r6
   1f370:	ldr	r6, [sp, #40]	; 0x28
   1f374:	mov	r2, r5
   1f378:	ldr	r3, [r2, #24]
   1f37c:	cmp	r4, #8192	; 0x2000
   1f380:	movge	r4, #8192	; 0x2000
   1f384:	cmp	r3, #0
   1f388:	str	r3, [sp, #40]	; 0x28
   1f38c:	beq	1f450 <__assert_fail@plt+0xe48c>
   1f390:	ldr	r2, [pc, #-1160]	; 1ef10 <__assert_fail@plt+0xdf4c>
   1f394:	ldr	r1, [sp, #16]
   1f398:	mov	r3, #0
   1f39c:	sub	r8, r8, #2
   1f3a0:	ldr	r5, [r1, r2]
   1f3a4:	str	sl, [sp, #40]	; 0x28
   1f3a8:	mov	sl, r6
   1f3ac:	mov	r6, r5
   1f3b0:	mov	r5, r4
   1f3b4:	mov	r4, r3
   1f3b8:	ldr	r0, [r6]
   1f3bc:	bl	10f88 <getc@plt>
   1f3c0:	cmn	r0, #1
   1f3c4:	beq	1f680 <__assert_fail@plt+0xe6bc>
   1f3c8:	ldr	r3, [sp, #32]
   1f3cc:	add	r4, r4, #1
   1f3d0:	add	ip, r8, r4
   1f3d4:	ldr	r2, [r3, #8]
   1f3d8:	ldr	r3, [r3, #4]
   1f3dc:	cmp	r0, #10
   1f3e0:	ldr	lr, [r3, r2, lsl #2]
   1f3e4:	add	r2, r3, r2, lsl #2
   1f3e8:	ldr	r3, [lr, #4]
   1f3ec:	add	lr, r3, ip
   1f3f0:	beq	1f6d8 <__assert_fail@plt+0xe714>
   1f3f4:	cmp	r5, r4
   1f3f8:	strb	r0, [r3, ip]
   1f3fc:	bne	1f3b8 <__assert_fail@plt+0xe3f4>
   1f400:	mov	r6, sl
   1f404:	ldr	sl, [sp, #40]	; 0x28
   1f408:	mov	r4, r5
   1f40c:	ldr	r3, [pc, #-1408]	; 1ee94 <__assert_fail@plt+0xded0>
   1f410:	ldr	r5, [r2]
   1f414:	add	r3, pc, r3
   1f418:	str	r4, [r5, #16]
   1f41c:	str	r4, [r3, #24]
   1f420:	mov	r3, r4
   1f424:	b	1f6cc <__assert_fail@plt+0xe708>
   1f428:	add	r5, r7, ip
   1f42c:	ldr	r3, [pc, #-1436]	; 1ee98 <__assert_fail@plt+0xded4>
   1f430:	mov	r9, r5
   1f434:	add	r3, pc, r3
   1f438:	str	r5, [r3, #12]
   1f43c:	bl	1d324 <__assert_fail@plt+0xc360>
   1f440:	ldr	r3, [sp, #8]
   1f444:	ldr	r3, [r3]
   1f448:	str	r3, [sp, #20]
   1f44c:	b	1def0 <__assert_fail@plt+0xcf2c>
   1f450:	str	r2, [sp, #52]	; 0x34
   1f454:	bl	10e8c <__errno_location@plt>
   1f458:	ldr	r2, [sp, #16]
   1f45c:	ldr	r3, [pc, #-1364]	; 1ef10 <__assert_fail@plt+0xdf4c>
   1f460:	ldr	r1, [sp, #40]	; 0x28
   1f464:	ldr	r8, [pc, #-1488]	; 1ee9c <__assert_fail@plt+0xded8>
   1f468:	add	r8, pc, r8
   1f46c:	str	r0, [sp, #48]	; 0x30
   1f470:	str	r1, [r0]
   1f474:	ldr	r5, [r2, r3]
   1f478:	ldr	r2, [sp, #52]	; 0x34
   1f47c:	b	1f4c0 <__assert_fail@plt+0xe4fc>
   1f480:	str	r0, [sp, #52]	; 0x34
   1f484:	ldr	r0, [r5]
   1f488:	bl	10d6c <ferror@plt>
   1f48c:	ldr	r3, [sp, #52]	; 0x34
   1f490:	cmp	r0, #0
   1f494:	beq	1f7d0 <__assert_fail@plt+0xe80c>
   1f498:	ldr	r1, [sp, #48]	; 0x30
   1f49c:	ldr	r2, [r1]
   1f4a0:	cmp	r2, #4
   1f4a4:	bne	1f7a8 <__assert_fail@plt+0xe7e4>
   1f4a8:	str	r3, [r1]
   1f4ac:	ldr	r0, [r5]
   1f4b0:	bl	10f34 <clearerr@plt>
   1f4b4:	ldr	r2, [r8, #8]
   1f4b8:	ldr	r3, [r8, #4]
   1f4bc:	ldr	r2, [r3, r2, lsl #2]
   1f4c0:	ldr	r0, [r2, #4]
   1f4c4:	ldr	r3, [r5]
   1f4c8:	add	r0, r0, r7
   1f4cc:	mov	r2, r4
   1f4d0:	mov	r1, #1
   1f4d4:	bl	10de4 <fread@plt>
   1f4d8:	cmp	r0, #0
   1f4dc:	mov	r3, r0
   1f4e0:	str	r0, [r8, #24]
   1f4e4:	beq	1f480 <__assert_fail@plt+0xe4bc>
   1f4e8:	ldr	r0, [r8, #8]
   1f4ec:	ldr	r1, [r8, #4]
   1f4f0:	add	r2, r1, r0, lsl #2
   1f4f4:	ldr	r5, [r1, r0, lsl #2]
   1f4f8:	str	r3, [r5, #16]
   1f4fc:	b	1f540 <__assert_fail@plt+0xe57c>
   1f500:	ldr	r3, [pc, #-1640]	; 1eea0 <__assert_fail@plt+0xdedc>
   1f504:	mov	r1, #0
   1f508:	add	r3, pc, r3
   1f50c:	str	r1, [r2, #16]
   1f510:	str	r1, [r3, #24]
   1f514:	cmp	r7, #0
   1f518:	beq	1f86c <__assert_fail@plt+0xe8a8>
   1f51c:	ldr	r3, [pc, #-1664]	; 1eea4 <__assert_fail@plt+0xdee0>
   1f520:	mov	r1, #2
   1f524:	add	r3, pc, r3
   1f528:	str	r1, [sp, #40]	; 0x28
   1f52c:	ldmib	r3, {r0, ip}
   1f530:	ldr	r3, [r3, #24]
   1f534:	ldr	r5, [r0, ip, lsl #2]
   1f538:	add	r2, r0, ip, lsl r1
   1f53c:	str	r1, [r5, #44]	; 0x2c
   1f540:	ldr	r1, [r5, #12]
   1f544:	add	ip, r7, r3
   1f548:	cmp	ip, r1
   1f54c:	ldr	r0, [r5, #4]
   1f550:	bgt	1f630 <__assert_fail@plt+0xe66c>
   1f554:	mov	r1, #0
   1f558:	strb	r1, [r0, ip]
   1f55c:	ldr	r3, [r2]
   1f560:	ldr	r0, [pc, #-1728]	; 1eea8 <__assert_fail@plt+0xdee4>
   1f564:	ldr	lr, [sp, #40]	; 0x28
   1f568:	ldr	r3, [r3, #4]
   1f56c:	add	r0, pc, r0
   1f570:	add	r3, r3, ip
   1f574:	cmp	lr, #1
   1f578:	strb	r1, [r3, #1]
   1f57c:	ldr	r3, [r2]
   1f580:	str	ip, [r0, #24]
   1f584:	ldr	r7, [r3, #4]
   1f588:	ldr	r3, [sp, #8]
   1f58c:	str	r7, [r3]
   1f590:	beq	1ed0c <__assert_fail@plt+0xdd48>
   1f594:	cmp	lr, #2
   1f598:	beq	1f428 <__assert_fail@plt+0xe464>
   1f59c:	ldr	r3, [sp, #44]	; 0x2c
   1f5a0:	ldr	fp, [sp, #4]
   1f5a4:	add	r7, r7, r3
   1f5a8:	ldr	sl, [sp, #24]
   1f5ac:	str	r7, [r0, #12]
   1f5b0:	bl	1d324 <__assert_fail@plt+0xc360>
   1f5b4:	ldr	r3, [sp, #8]
   1f5b8:	ldr	r3, [r3]
   1f5bc:	str	r3, [sp, #20]
   1f5c0:	mov	r2, r0
   1f5c4:	ldrb	r3, [r7]
   1f5c8:	b	1de0c <__assert_fail@plt+0xce48>
   1f5cc:	ldr	r0, [pc, #-1832]	; 1eeac <__assert_fail@plt+0xdee8>
   1f5d0:	sub	r1, r1, #1
   1f5d4:	add	r0, pc, r0
   1f5d8:	bl	1d45c <__assert_fail@plt+0xc498>
   1f5dc:	b	1e464 <__assert_fail@plt+0xd4a0>
   1f5e0:	ldr	r3, [sp, #8]
   1f5e4:	ldr	r0, [pc, #-1852]	; 1eeb0 <__assert_fail@plt+0xdeec>
   1f5e8:	ldr	r1, [r3]
   1f5ec:	add	r0, pc, r0
   1f5f0:	bl	1d45c <__assert_fail@plt+0xc498>
   1f5f4:	b	1e51c <__assert_fail@plt+0xd558>
   1f5f8:	ldr	r2, [pc, #-1868]	; 1eeb4 <__assert_fail@plt+0xdef0>
   1f5fc:	mov	r1, #3
   1f600:	add	r2, pc, r2
   1f604:	str	r1, [r2]
   1f608:	b	1e14c <__assert_fail@plt+0xd188>
   1f60c:	ldr	r0, [pc, #-1884]	; 1eeb8 <__assert_fail@plt+0xdef4>
   1f610:	add	r0, pc, r0
   1f614:	bl	1d45c <__assert_fail@plt+0xc498>
   1f618:	ldr	r3, [pc, #-1892]	; 1eebc <__assert_fail@plt+0xdef8>
   1f61c:	mov	r0, #0
   1f620:	mov	r1, #0
   1f624:	ldr	r3, [fp, r3]
   1f628:	strd	r0, [r3]
   1f62c:	b	1e464 <__assert_fail@plt+0xd4a0>
   1f630:	add	r4, ip, r3, asr #1
   1f634:	mov	r1, r4
   1f638:	bl	1d7e8 <__assert_fail@plt+0xc824>
   1f63c:	ldr	r3, [pc, #-1924]	; 1eec0 <__assert_fail@plt+0xdefc>
   1f640:	add	r3, pc, r3
   1f644:	ldmib	r3, {r2, ip}
   1f648:	ldr	r1, [r2, ip, lsl #2]
   1f64c:	add	r2, r2, ip, lsl #2
   1f650:	str	r0, [r5, #4]
   1f654:	ldr	r0, [r1, #4]
   1f658:	cmp	r0, #0
   1f65c:	beq	1f8a8 <__assert_fail@plt+0xe8e4>
   1f660:	ldr	ip, [r3, #24]
   1f664:	sub	r3, r4, #2
   1f668:	add	ip, r7, ip
   1f66c:	str	r3, [r1, #12]
   1f670:	b	1f554 <__assert_fail@plt+0xe590>
   1f674:	ldr	r0, [pc, #-1976]	; 1eec4 <__assert_fail@plt+0xdf00>
   1f678:	add	r0, pc, r0
   1f67c:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1f680:	mov	r5, r6
   1f684:	str	r4, [sp, #48]	; 0x30
   1f688:	ldr	r0, [r5]
   1f68c:	mov	r6, sl
   1f690:	ldr	sl, [sp, #40]	; 0x28
   1f694:	bl	10d6c <ferror@plt>
   1f698:	cmp	r0, #0
   1f69c:	bne	1f7a8 <__assert_fail@plt+0xe7e4>
   1f6a0:	ldr	r2, [pc, #-2016]	; 1eec8 <__assert_fail@plt+0xdf04>
   1f6a4:	ldr	r3, [sp, #48]	; 0x30
   1f6a8:	add	r2, pc, r2
   1f6ac:	cmp	r3, #0
   1f6b0:	ldr	r0, [r2, #8]
   1f6b4:	ldr	r1, [r2, #4]
   1f6b8:	str	r3, [r2, #24]
   1f6bc:	add	r2, r1, r0, lsl #2
   1f6c0:	ldr	r5, [r1, r0, lsl #2]
   1f6c4:	str	r3, [r5, #16]
   1f6c8:	beq	1f514 <__assert_fail@plt+0xe550>
   1f6cc:	mov	r1, #0
   1f6d0:	str	r1, [sp, #40]	; 0x28
   1f6d4:	b	1f540 <__assert_fail@plt+0xe57c>
   1f6d8:	mov	r6, sl
   1f6dc:	strb	r0, [lr]
   1f6e0:	ldr	sl, [sp, #40]	; 0x28
   1f6e4:	b	1f40c <__assert_fail@plt+0xe448>
   1f6e8:	ldr	r2, [sp, #44]	; 0x2c
   1f6ec:	add	r7, r3, r2
   1f6f0:	str	r7, [sl, #12]
   1f6f4:	bl	1d324 <__assert_fail@plt+0xc360>
   1f6f8:	ldr	ip, [pc, #-2100]	; 1eecc <__assert_fail@plt+0xdf08>
   1f6fc:	ldr	r3, [pc, #-2100]	; 1eed0 <__assert_fail@plt+0xdf0c>
   1f700:	add	ip, pc, ip
   1f704:	add	r1, ip, #1056	; 0x420
   1f708:	add	r1, r1, #8
   1f70c:	add	r3, pc, r3
   1f710:	add	r3, r3, #256	; 0x100
   1f714:	lsl	lr, r0, #1
   1f718:	ldrsh	r2, [r1, lr]
   1f71c:	ldrsh	r3, [r3, lr]
   1f720:	add	r2, r2, #1
   1f724:	cmp	r3, #0
   1f728:	lsl	r2, r2, #1
   1f72c:	add	r3, ip, #1456	; 0x5b0
   1f730:	strne	r0, [sl, #16]
   1f734:	ldrsh	r4, [r3, r2]
   1f738:	strne	r7, [sl, #20]
   1f73c:	cmp	r0, r4
   1f740:	beq	1f768 <__assert_fail@plt+0xe7a4>
   1f744:	add	ip, ip, #620	; 0x26c
   1f748:	ldrsh	r0, [ip, lr]
   1f74c:	lsl	lr, r0, #1
   1f750:	ldrsh	r2, [r1, lr]
   1f754:	add	r2, r2, #1
   1f758:	lsl	r2, r2, #1
   1f75c:	ldrsh	r4, [r3, r2]
   1f760:	cmp	r0, r4
   1f764:	bne	1f748 <__assert_fail@plt+0xe784>
   1f768:	ldr	r1, [pc, #-2204]	; 1eed4 <__assert_fail@plt+0xdf10>
   1f76c:	ldr	r3, [sp, #8]
   1f770:	add	r1, pc, r1
   1f774:	add	r1, r1, #2384	; 0x950
   1f778:	ldr	r3, [r3]
   1f77c:	ldrsh	r2, [r1, r2]
   1f780:	str	r3, [sp, #20]
   1f784:	cmp	r2, #180	; 0xb4
   1f788:	beq	1f794 <__assert_fail@plt+0xe7d0>
   1f78c:	cmp	r2, #0
   1f790:	bne	1f7b4 <__assert_fail@plt+0xe7f0>
   1f794:	ldr	r3, [pc, #-2244]	; 1eed8 <__assert_fail@plt+0xdf14>
   1f798:	add	r3, pc, r3
   1f79c:	ldr	r9, [r3, #20]
   1f7a0:	ldr	r0, [r3, #16]
   1f7a4:	b	1def0 <__assert_fail@plt+0xcf2c>
   1f7a8:	ldr	r0, [pc, #-2260]	; 1eedc <__assert_fail@plt+0xdf18>
   1f7ac:	add	r0, pc, r0
   1f7b0:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1f7b4:	ldr	r3, [pc, #-2268]	; 1eee0 <__assert_fail@plt+0xdf1c>
   1f7b8:	add	r7, r7, #1
   1f7bc:	add	r3, pc, r3
   1f7c0:	ldr	fp, [sp, #4]
   1f7c4:	ldr	sl, [sp, #24]
   1f7c8:	str	r7, [r3, #12]
   1f7cc:	b	1f5c4 <__assert_fail@plt+0xe600>
   1f7d0:	ldr	r2, [r8, #8]
   1f7d4:	ldr	r3, [r8, #4]
   1f7d8:	ldr	r3, [r3, r2, lsl #2]
   1f7dc:	str	r0, [r3, #16]
   1f7e0:	b	1f514 <__assert_fail@plt+0xe550>
   1f7e4:	bl	10d9c <__stack_chk_fail@plt>
   1f7e8:	ldr	r3, [pc, #-2316]	; 1eee4 <__assert_fail@plt+0xdf20>
   1f7ec:	ldr	r1, [pc, #-2316]	; 1eee8 <__assert_fail@plt+0xdf24>
   1f7f0:	ldr	r0, [pc, #-2316]	; 1eeec <__assert_fail@plt+0xdf28>
   1f7f4:	add	r3, pc, r3
   1f7f8:	mov	r2, #188	; 0xbc
   1f7fc:	add	r3, r3, #3328	; 0xd00
   1f800:	add	r1, pc, r1
   1f804:	add	r0, pc, r0
   1f808:	bl	10fc4 <__assert_fail@plt>
   1f80c:	ldr	r3, [sp, #8]
   1f810:	ldr	r0, [pc, #-2344]	; 1eef0 <__assert_fail@plt+0xdf2c>
   1f814:	ldr	r1, [r3]
   1f818:	add	r0, pc, r0
   1f81c:	bl	1d45c <__assert_fail@plt+0xc498>
   1f820:	b	1e530 <__assert_fail@plt+0xd56c>
   1f824:	ldr	r3, [pc, #-2360]	; 1eef4 <__assert_fail@plt+0xdf30>
   1f828:	ldr	r1, [pc, #-2360]	; 1eef8 <__assert_fail@plt+0xdf34>
   1f82c:	ldr	r0, [pc, #-2360]	; 1eefc <__assert_fail@plt+0xdf38>
   1f830:	add	r3, pc, r3
   1f834:	mov	r2, #91	; 0x5b
   1f838:	add	r3, r3, #3328	; 0xd00
   1f83c:	add	r1, pc, r1
   1f840:	add	r0, pc, r0
   1f844:	bl	10fc4 <__assert_fail@plt>
   1f848:	ldr	r3, [pc, #-2384]	; 1ef00 <__assert_fail@plt+0xdf3c>
   1f84c:	ldr	r1, [pc, #-2384]	; 1ef04 <__assert_fail@plt+0xdf40>
   1f850:	ldr	r0, [pc, #-2384]	; 1ef08 <__assert_fail@plt+0xdf44>
   1f854:	add	r3, pc, r3
   1f858:	ldr	r2, [pc, #-2388]	; 1ef0c <__assert_fail@plt+0xdf48>
   1f85c:	add	r3, r3, #3312	; 0xcf0
   1f860:	add	r1, pc, r1
   1f864:	add	r0, pc, r0
   1f868:	bl	10fc4 <__assert_fail@plt>
   1f86c:	mov	r2, #1
   1f870:	ldr	r3, [pc, #-2408]	; 1ef10 <__assert_fail@plt+0xdf4c>
   1f874:	str	r2, [sp, #40]	; 0x28
   1f878:	ldr	r2, [sp, #16]
   1f87c:	ldr	r5, [r2, r3]
   1f880:	ldr	r0, [r5]
   1f884:	bl	1d88c <__assert_fail@plt+0xc8c8>
   1f888:	ldr	r3, [pc, #-2428]	; 1ef14 <__assert_fail@plt+0xdf50>
   1f88c:	add	r3, pc, r3
   1f890:	ldr	r0, [r3, #8]
   1f894:	ldr	r1, [r3, #4]
   1f898:	ldr	r3, [r3, #24]
   1f89c:	add	r2, r1, r0, lsl #2
   1f8a0:	ldr	r5, [r1, r0, lsl #2]
   1f8a4:	b	1f540 <__assert_fail@plt+0xe57c>
   1f8a8:	ldr	r0, [pc, #-2456]	; 1ef18 <__assert_fail@plt+0xdf54>
   1f8ac:	add	r0, pc, r0
   1f8b0:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1f8b4:	ldr	r0, [pc, #-2464]	; 1ef1c <__assert_fail@plt+0xdf58>
   1f8b8:	add	r0, pc, r0
   1f8bc:	bl	1d4e8 <__assert_fail@plt+0xc524>
   1f8c0:	push	{r4, r5, r6, lr}
   1f8c4:	ldr	r4, [pc, #172]	; 1f978 <__assert_fail@plt+0xe9b4>
   1f8c8:	ldr	r5, [pc, #172]	; 1f97c <__assert_fail@plt+0xe9b8>
   1f8cc:	add	r4, pc, r4
   1f8d0:	add	r5, pc, r5
   1f8d4:	ldr	r3, [r4, #4]
   1f8d8:	cmp	r3, #0
   1f8dc:	beq	1f928 <__assert_fail@plt+0xe964>
   1f8e0:	ldr	r2, [r4, #8]
   1f8e4:	ldr	r0, [r3, r2, lsl #2]
   1f8e8:	cmp	r0, #0
   1f8ec:	beq	1f92c <__assert_fail@plt+0xe968>
   1f8f0:	mov	r6, #0
   1f8f4:	b	1f908 <__assert_fail@plt+0xe944>
   1f8f8:	ldr	r2, [r4, #8]
   1f8fc:	ldr	r0, [r3, r2, lsl #2]
   1f900:	cmp	r0, #0
   1f904:	beq	1f92c <__assert_fail@plt+0xe968>
   1f908:	bl	1dc54 <__assert_fail@plt+0xcc90>
   1f90c:	ldr	r3, [r4, #4]
   1f910:	ldr	r2, [r4, #8]
   1f914:	str	r6, [r3, r2, lsl #2]
   1f918:	bl	1dcb8 <__assert_fail@plt+0xccf4>
   1f91c:	ldr	r3, [r4, #4]
   1f920:	cmp	r3, #0
   1f924:	bne	1f8f8 <__assert_fail@plt+0xe934>
   1f928:	mov	r3, #0
   1f92c:	mov	r0, r3
   1f930:	bl	1dc50 <__assert_fail@plt+0xcc8c>
   1f934:	ldr	r2, [pc, #68]	; 1f980 <__assert_fail@plt+0xe9bc>
   1f938:	ldr	r1, [pc, #68]	; 1f984 <__assert_fail@plt+0xe9c0>
   1f93c:	add	r2, pc, r2
   1f940:	mov	r3, #0
   1f944:	str	r3, [r2]
   1f948:	str	r3, [r2, #4]
   1f94c:	str	r3, [r2, #8]
   1f950:	str	r3, [r2, #32]
   1f954:	str	r3, [r2, #12]
   1f958:	str	r3, [r2, #36]	; 0x24
   1f95c:	ldr	r2, [pc, #36]	; 1f988 <__assert_fail@plt+0xe9c4>
   1f960:	ldr	r1, [r5, r1]
   1f964:	mov	r0, r3
   1f968:	str	r3, [r1]
   1f96c:	ldr	r2, [r5, r2]
   1f970:	str	r3, [r2]
   1f974:	pop	{r4, r5, r6, pc}
   1f978:	andeq	r8, r1, ip, lsl #3
   1f97c:			; <UNDEFINED> instruction: 0x000175b4
   1f980:	andeq	r8, r1, ip, lsl r1
   1f984:	andeq	r0, r0, r8, lsl r1
   1f988:	andeq	r0, r0, r4, asr #2
   1f98c:	push	{r0, r1, r2, r3}
   1f990:	ldr	r3, [pc, #96]	; 1f9f8 <__assert_fail@plt+0xea34>
   1f994:	ldr	r2, [pc, #96]	; 1f9fc <__assert_fail@plt+0xea38>
   1f998:	add	r3, pc, r3
   1f99c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f9a0:	sub	sp, sp, #12
   1f9a4:	ldr	r1, [r3, r2]
   1f9a8:	ldr	r0, [pc, #80]	; 1fa00 <__assert_fail@plt+0xea3c>
   1f9ac:	add	ip, sp, #20
   1f9b0:	str	ip, [sp]
   1f9b4:	ldr	ip, [r1]
   1f9b8:	mov	r2, #13
   1f9bc:	str	ip, [sp, #4]
   1f9c0:	ldr	r4, [r3, r0]
   1f9c4:	ldr	r0, [pc, #56]	; 1fa04 <__assert_fail@plt+0xea40>
   1f9c8:	mov	r1, #1
   1f9cc:	add	r0, pc, r0
   1f9d0:	ldr	r3, [r4]
   1f9d4:	bl	10dcc <fwrite@plt>
   1f9d8:	ldr	r2, [pc, #40]	; 1fa08 <__assert_fail@plt+0xea44>
   1f9dc:	ldr	r0, [r4]
   1f9e0:	ldr	r3, [sp]
   1f9e4:	add	r2, pc, r2
   1f9e8:	mov	r1, #1
   1f9ec:	bl	10e20 <__vfprintf_chk@plt>
   1f9f0:	mov	r0, #1
   1f9f4:	bl	10e5c <exit@plt>
   1f9f8:	andeq	r7, r1, ip, ror #9
   1f9fc:	andeq	r0, r0, r4, lsl r1
   1fa00:	andeq	r0, r0, ip, lsr r1
   1fa04:	andeq	r1, r0, ip, ror ip
   1fa08:	andeq	r6, r0, r4, ror #11
   1fa0c:	push	{r4, lr}
   1fa10:	mov	r3, r0
   1fa14:	ldr	r4, [pc, #48]	; 1fa4c <__assert_fail@plt+0xea88>
   1fa18:	ldr	r1, [pc, #48]	; 1fa50 <__assert_fail@plt+0xea8c>
   1fa1c:	add	r4, pc, r4
   1fa20:	ldr	r2, [pc, #44]	; 1fa54 <__assert_fail@plt+0xea90>
   1fa24:	ldr	r0, [r4, r1]
   1fa28:	ldr	r1, [pc, #40]	; 1fa58 <__assert_fail@plt+0xea94>
   1fa2c:	add	r2, pc, r2
   1fa30:	add	r1, pc, r1
   1fa34:	bl	1b594 <__assert_fail@plt+0xa5d0>
   1fa38:	ldr	r3, [pc, #28]	; 1fa5c <__assert_fail@plt+0xea98>
   1fa3c:	mov	r2, #1
   1fa40:	ldr	r3, [r4, r3]
   1fa44:	strb	r2, [r3]
   1fa48:	pop	{r4, pc}
   1fa4c:	andeq	r7, r1, r8, ror #8
   1fa50:	andeq	r0, r0, ip, lsl r1
   1fa54:	andeq	r5, r0, r8, lsl r0
   1fa58:	andeq	r6, r0, r4, asr #11
   1fa5c:	andeq	r0, r0, r0, lsl #2
   1fa60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa64:	sub	sp, sp, #7808	; 0x1e80
   1fa68:	ldr	r8, [pc, #4068]	; 20a54 <__assert_fail@plt+0xfa90>
   1fa6c:	ldr	r3, [pc, #4068]	; 20a58 <__assert_fail@plt+0xfa94>
   1fa70:	sub	sp, sp, #28
   1fa74:	add	r8, pc, r8
   1fa78:	str	r8, [sp, #72]	; 0x48
   1fa7c:	ldr	r3, [r8, r3]
   1fa80:	add	r4, sp, #7808	; 0x1e80
   1fa84:	mov	r1, r3
   1fa88:	ldr	r0, [pc, #4044]	; 20a5c <__assert_fail@plt+0xfa98>
   1fa8c:	ldr	ip, [r1]
   1fa90:	add	r4, r4, #20
   1fa94:	str	r3, [sp, #68]	; 0x44
   1fa98:	str	ip, [r4]
   1fa9c:	ldr	r2, [pc, #4028]	; 20a60 <__assert_fail@plt+0xfa9c>
   1faa0:	ldr	r0, [r8, r0]
   1faa4:	add	ip, sp, #3728	; 0xe90
   1faa8:	mov	lr, #0
   1faac:	add	ip, ip, #8
   1fab0:	str	r0, [sp, #76]	; 0x4c
   1fab4:	str	ip, [sp, #24]
   1fab8:	str	lr, [r0]
   1fabc:	ldr	r3, [pc, #4000]	; 20a64 <__assert_fail@plt+0xfaa0>
   1fac0:	ldr	r2, [r8, r2]
   1fac4:	mvn	r1, #1
   1fac8:	str	r2, [sp, #20]
   1facc:	str	r1, [r2]
   1fad0:	ldr	r4, [r8, r3]
   1fad4:	add	r6, sp, #3824	; 0xef0
   1fad8:	str	r4, [sp, #48]	; 0x30
   1fadc:	ldm	r4!, {r0, r1, r2, r3}
   1fae0:	add	r6, r6, #8
   1fae4:	ldr	r9, [pc, #3964]	; 20a68 <__assert_fail@plt+0xfaa4>
   1fae8:	sub	ip, r6, #4
   1faec:	add	r9, pc, r9
   1faf0:	ldr	r4, [r4]
   1faf4:	mov	fp, ip
   1faf8:	stmia	ip!, {r0, r1, r2, r3}
   1fafc:	add	r2, r9, #444	; 0x1bc
   1fb00:	add	r6, sp, #224	; 0xe0
   1fb04:	str	r2, [sp, #60]	; 0x3c
   1fb08:	add	r7, sp, #624	; 0x270
   1fb0c:	mov	r2, #200	; 0xc8
   1fb10:	str	r4, [ip]
   1fb14:	str	r9, [sp, #56]	; 0x38
   1fb18:	str	lr, [sp, #40]	; 0x28
   1fb1c:	str	r6, [sp, #44]	; 0x2c
   1fb20:	strh	lr, [sp, #224]	; 0xe0
   1fb24:	str	fp, [sp, #32]
   1fb28:	str	r7, [sp, #36]	; 0x24
   1fb2c:	str	r2, [sp, #28]
   1fb30:	ldr	r2, [pc, #3892]	; 20a6c <__assert_fail@plt+0xfaa8>
   1fb34:	mov	sl, r6
   1fb38:	mov	r4, lr
   1fb3c:	add	r2, pc, r2
   1fb40:	str	r2, [sp, #64]	; 0x40
   1fb44:	ldr	r3, [pc, #3876]	; 20a70 <__assert_fail@plt+0xfaac>
   1fb48:	add	r3, pc, r3
   1fb4c:	ldrsb	r9, [r3, r4]
   1fb50:	cmn	r9, #82	; 0x52
   1fb54:	mov	r5, r9
   1fb58:	beq	1fc24 <__assert_fail@plt+0xec60>
   1fb5c:	ldr	r3, [sp, #20]
   1fb60:	ldr	r0, [r3]
   1fb64:	cmn	r0, #2
   1fb68:	beq	2022c <__assert_fail@plt+0xf268>
   1fb6c:	cmp	r0, #0
   1fb70:	ble	201b4 <__assert_fail@plt+0xf1f0>
   1fb74:	cmp	r0, #280	; 0x118
   1fb78:	addgt	r5, r9, #2
   1fb7c:	movgt	r3, #2
   1fb80:	bgt	1fb98 <__assert_fail@plt+0xebd4>
   1fb84:	ldr	r3, [pc, #3816]	; 20a74 <__assert_fail@plt+0xfab0>
   1fb88:	add	r3, pc, r3
   1fb8c:	add	r0, r3, r0
   1fb90:	ldrb	r3, [r0, #160]	; 0xa0
   1fb94:	add	r5, r9, r3
   1fb98:	cmp	r5, #147	; 0x93
   1fb9c:	bhi	1fc24 <__assert_fail@plt+0xec60>
   1fba0:	ldr	r1, [pc, #3792]	; 20a78 <__assert_fail@plt+0xfab4>
   1fba4:	lsl	r2, r5, #1
   1fba8:	add	r1, pc, r1
   1fbac:	add	r0, r1, #444	; 0x1bc
   1fbb0:	ldrsh	r2, [r0, r2]
   1fbb4:	cmp	r2, r3
   1fbb8:	bne	1fc24 <__assert_fail@plt+0xec60>
   1fbbc:	add	r5, r1, r5
   1fbc0:	ldrb	r4, [r5, #740]	; 0x2e4
   1fbc4:	cmp	r4, #0
   1fbc8:	beq	201c4 <__assert_fail@plt+0xf200>
   1fbcc:	ldr	r3, [sp, #40]	; 0x28
   1fbd0:	ldr	r1, [sp, #20]
   1fbd4:	cmp	r3, #0
   1fbd8:	subne	r3, r3, #1
   1fbdc:	mvn	r2, #1
   1fbe0:	str	r2, [r1]
   1fbe4:	strne	r3, [sp, #40]	; 0x28
   1fbe8:	ldr	r2, [sp, #72]	; 0x48
   1fbec:	ldr	r3, [pc, #3720]	; 20a7c <__assert_fail@plt+0xfab8>
   1fbf0:	ldr	r5, [sp, #48]	; 0x30
   1fbf4:	add	r7, r7, #16
   1fbf8:	ldr	r3, [r2, r3]
   1fbfc:	add	lr, fp, #20
   1fc00:	mov	fp, lr
   1fc04:	ldm	r3, {r0, r1, r2, r3}
   1fc08:	sxth	ip, r4
   1fc0c:	stm	r7, {r0, r1, r2, r3}
   1fc10:	ldm	r5!, {r0, r1, r2, r3}
   1fc14:	ldr	r5, [r5]
   1fc18:	stmia	lr!, {r0, r1, r2, r3}
   1fc1c:	str	r5, [lr]
   1fc20:	b	20024 <__assert_fail@plt+0xf060>
   1fc24:	ldr	r3, [pc, #3668]	; 20a80 <__assert_fail@plt+0xfabc>
   1fc28:	add	r3, pc, r3
   1fc2c:	add	r4, r3, r4
   1fc30:	ldrb	r4, [r4, #888]	; 0x378
   1fc34:	cmp	r4, #0
   1fc38:	bne	1fd44 <__assert_fail@plt+0xed80>
   1fc3c:	ldr	r3, [sp, #40]	; 0x28
   1fc40:	cmp	r3, #0
   1fc44:	beq	2023c <__assert_fail@plt+0xf278>
   1fc48:	ldr	r3, [sp, #40]	; 0x28
   1fc4c:	cmp	r3, #3
   1fc50:	ldr	r3, [sp, #48]	; 0x30
   1fc54:	ldr	r8, [r3]
   1fc58:	ldr	r5, [r3, #4]
   1fc5c:	bne	1fc74 <__assert_fail@plt+0xecb0>
   1fc60:	ldr	r3, [sp, #20]
   1fc64:	ldr	r3, [r3]
   1fc68:	cmp	r3, #0
   1fc6c:	bgt	2020c <__assert_fail@plt+0xf248>
   1fc70:	beq	20d9c <__assert_fail@plt+0xfdd8>
   1fc74:	ldrd	r0, [sp, #56]	; 0x38
   1fc78:	ldr	r2, [sp, #64]	; 0x40
   1fc7c:	b	1fca0 <__assert_fail@plt+0xecdc>
   1fc80:	cmp	r6, sl
   1fc84:	sub	fp, fp, #20
   1fc88:	beq	20170 <__assert_fail@plt+0xf1ac>
   1fc8c:	ldrsh	r3, [r6, #-2]!
   1fc90:	ldr	r8, [fp, #20]
   1fc94:	ldr	r5, [fp, #24]
   1fc98:	sub	r7, r7, #16
   1fc9c:	ldrsb	r9, [r2, r3]
   1fca0:	cmn	r9, #82	; 0x52
   1fca4:	beq	1fc80 <__assert_fail@plt+0xecbc>
   1fca8:	add	r9, r9, #1
   1fcac:	cmp	r9, #147	; 0x93
   1fcb0:	bhi	1fc80 <__assert_fail@plt+0xecbc>
   1fcb4:	lsl	r3, r9, #1
   1fcb8:	ldrsh	r3, [r1, r3]
   1fcbc:	cmp	r3, #1
   1fcc0:	bne	1fc80 <__assert_fail@plt+0xecbc>
   1fcc4:	add	r9, r0, r9
   1fcc8:	ldrb	r4, [r9, #740]	; 0x2e4
   1fccc:	cmp	r4, #0
   1fcd0:	beq	1fc80 <__assert_fail@plt+0xecbc>
   1fcd4:	ldr	r2, [sp, #48]	; 0x30
   1fcd8:	ldr	r1, [sp, #72]	; 0x48
   1fcdc:	ldr	r3, [pc, #3480]	; 20a7c <__assert_fail@plt+0xfab8>
   1fce0:	ldr	lr, [r2, #8]
   1fce4:	ldr	r9, [r2, #12]
   1fce8:	ldr	r3, [r1, r3]
   1fcec:	ldr	r2, [sp, #24]
   1fcf0:	add	r7, r7, #16
   1fcf4:	add	ip, sp, #204	; 0xcc
   1fcf8:	str	r8, [r2, #-3532]	; 0xfffff234
   1fcfc:	ldm	r3, {r0, r1, r2, r3}
   1fd00:	add	fp, fp, #20
   1fd04:	ldr	r8, [sp, #24]
   1fd08:	stm	r7, {r0, r1, r2, r3}
   1fd0c:	str	r5, [r8, #-3528]	; 0xfffff238
   1fd10:	str	lr, [r8, #-3524]	; 0xfffff23c
   1fd14:	str	r9, [r8, #-3520]	; 0xfffff240
   1fd18:	ldm	ip!, {r0, r1, r2, r3}
   1fd1c:	mov	lr, fp
   1fd20:	ldr	ip, [sp, #48]	; 0x30
   1fd24:	stmia	lr!, {r0, r1, r2, r3}
   1fd28:	mov	r3, #3
   1fd2c:	ldr	r5, [ip, #16]
   1fd30:	str	r3, [sp, #40]	; 0x28
   1fd34:	sxth	ip, r4
   1fd38:	str	r5, [lr]
   1fd3c:	str	r5, [r8, #-3516]	; 0xfffff244
   1fd40:	b	20024 <__assert_fail@plt+0xf060>
   1fd44:	add	r3, r3, r4
   1fd48:	ldr	lr, [sp, #24]
   1fd4c:	ldrb	r9, [r3, #1048]	; 0x418
   1fd50:	sub	ip, lr, #3552	; 0xde0
   1fd54:	ldr	r8, [fp, #8]
   1fd58:	rsb	r3, r9, #1
   1fd5c:	cmp	r9, #0
   1fd60:	add	r3, r7, r3, lsl #4
   1fd64:	ldr	r5, [fp, #12]
   1fd68:	ldm	r3, {r0, r1, r2, r3}
   1fd6c:	stm	ip, {r0, r1, r2, r3}
   1fd70:	str	r3, [sp, #52]	; 0x34
   1fd74:	ldr	r2, [fp, #16]
   1fd78:	beq	201ec <__assert_fail@plt+0xf228>
   1fd7c:	rsb	r3, r9, r9, lsl #28
   1fd80:	str	r8, [lr, #-3524]	; 0xfffff23c
   1fd84:	rsb	r3, r9, r3, lsl #2
   1fd88:	str	r5, [lr, #-3520]	; 0xfffff240
   1fd8c:	lsl	r3, r3, #2
   1fd90:	add	r3, r3, #20
   1fd94:	add	r1, fp, r3
   1fd98:	ldr	r8, [fp, r3]
   1fd9c:	ldr	r5, [r1, #4]
   1fda0:	str	r2, [lr, #-3516]	; 0xfffff244
   1fda4:	str	r5, [lr, #-3528]	; 0xfffff238
   1fda8:	str	r8, [lr, #-3532]	; 0xfffff234
   1fdac:	sub	r3, r4, #2
   1fdb0:	cmp	r3, #85	; 0x55
   1fdb4:	addls	pc, pc, r3, lsl #2
   1fdb8:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fdbc:	b	20924 <__assert_fail@plt+0xf960>
   1fdc0:	b	20914 <__assert_fail@plt+0xf950>
   1fdc4:	b	20ca4 <__assert_fail@plt+0xfce0>
   1fdc8:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fdcc:	b	20cd4 <__assert_fail@plt+0xfd10>
   1fdd0:	b	20290 <__assert_fail@plt+0xf2cc>
   1fdd4:	b	202b8 <__assert_fail@plt+0xf2f4>
   1fdd8:	b	20a24 <__assert_fail@plt+0xfa60>
   1fddc:	b	208c8 <__assert_fail@plt+0xf904>
   1fde0:	b	208ac <__assert_fail@plt+0xf8e8>
   1fde4:	b	20a0c <__assert_fail@plt+0xfa48>
   1fde8:	b	209d0 <__assert_fail@plt+0xfa0c>
   1fdec:	b	20c74 <__assert_fail@plt+0xfcb0>
   1fdf0:	b	20998 <__assert_fail@plt+0xf9d4>
   1fdf4:	b	2097c <__assert_fail@plt+0xf9b8>
   1fdf8:	b	202e8 <__assert_fail@plt+0xf324>
   1fdfc:	b	202d0 <__assert_fail@plt+0xf30c>
   1fe00:	b	20290 <__assert_fail@plt+0xf2cc>
   1fe04:	b	208e8 <__assert_fail@plt+0xf924>
   1fe08:	b	20c1c <__assert_fail@plt+0xfc58>
   1fe0c:	b	20bec <__assert_fail@plt+0xfc28>
   1fe10:	b	20bd8 <__assert_fail@plt+0xfc14>
   1fe14:	b	20bb8 <__assert_fail@plt+0xfbf4>
   1fe18:	b	20c5c <__assert_fail@plt+0xfc98>
   1fe1c:	b	20c38 <__assert_fail@plt+0xfc74>
   1fe20:	b	20c68 <__assert_fail@plt+0xfca4>
   1fe24:	b	209c4 <__assert_fail@plt+0xfa00>
   1fe28:	b	20b64 <__assert_fail@plt+0xfba0>
   1fe2c:	b	20b14 <__assert_fail@plt+0xfb50>
   1fe30:	b	20268 <__assert_fail@plt+0xf2a4>
   1fe34:	b	20a3c <__assert_fail@plt+0xfa78>
   1fe38:	b	20d30 <__assert_fail@plt+0xfd6c>
   1fe3c:	b	20268 <__assert_fail@plt+0xf2a4>
   1fe40:	b	1ff14 <__assert_fail@plt+0xef50>
   1fe44:	b	2086c <__assert_fail@plt+0xf8a8>
   1fe48:	b	20790 <__assert_fail@plt+0xf7cc>
   1fe4c:	b	20708 <__assert_fail@plt+0xf744>
   1fe50:	b	20268 <__assert_fail@plt+0xf2a4>
   1fe54:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe58:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe5c:	b	206dc <__assert_fail@plt+0xf718>
   1fe60:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe64:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe68:	b	206c8 <__assert_fail@plt+0xf704>
   1fe6c:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe70:	b	2069c <__assert_fail@plt+0xf6d8>
   1fe74:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe78:	b	20678 <__assert_fail@plt+0xf6b4>
   1fe7c:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe80:	b	20650 <__assert_fail@plt+0xf68c>
   1fe84:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe88:	b	20628 <__assert_fail@plt+0xf664>
   1fe8c:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe90:	b	20600 <__assert_fail@plt+0xf63c>
   1fe94:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fe98:	b	205d4 <__assert_fail@plt+0xf610>
   1fe9c:	b	205a8 <__assert_fail@plt+0xf5e4>
   1fea0:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fea4:	b	2057c <__assert_fail@plt+0xf5b8>
   1fea8:	b	20550 <__assert_fail@plt+0xf58c>
   1feac:	b	20524 <__assert_fail@plt+0xf560>
   1feb0:	b	204f8 <__assert_fail@plt+0xf534>
   1feb4:	b	204c4 <__assert_fail@plt+0xf500>
   1feb8:	b	20490 <__assert_fail@plt+0xf4cc>
   1febc:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fec0:	b	20468 <__assert_fail@plt+0xf4a4>
   1fec4:	b	20440 <__assert_fail@plt+0xf47c>
   1fec8:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fecc:	b	20410 <__assert_fail@plt+0xf44c>
   1fed0:	b	203e8 <__assert_fail@plt+0xf424>
   1fed4:	b	203c0 <__assert_fail@plt+0xf3fc>
   1fed8:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fedc:	b	1ff78 <__assert_fail@plt+0xefb4>
   1fee0:	b	203a4 <__assert_fail@plt+0xf3e0>
   1fee4:	b	20354 <__assert_fail@plt+0xf390>
   1fee8:	b	20330 <__assert_fail@plt+0xf36c>
   1feec:	b	20370 <__assert_fail@plt+0xf3ac>
   1fef0:	b	20310 <__assert_fail@plt+0xf34c>
   1fef4:	b	20268 <__assert_fail@plt+0xf2a4>
   1fef8:	b	20290 <__assert_fail@plt+0xf2cc>
   1fefc:	b	20964 <__assert_fail@plt+0xf9a0>
   1ff00:	b	20d48 <__assert_fail@plt+0xfd84>
   1ff04:	b	206f0 <__assert_fail@plt+0xf72c>
   1ff08:	b	20d18 <__assert_fail@plt+0xfd54>
   1ff0c:	b	20900 <__assert_fail@plt+0xf93c>
   1ff10:	b	20cb4 <__assert_fail@plt+0xfcf0>
   1ff14:	ldrd	r2, [r7, #-16]
   1ff18:	cmp	r3, #0
   1ff1c:	cmpeq	r2, #16
   1ff20:	beq	20f84 <__assert_fail@plt+0xffc0>
   1ff24:	bls	20db4 <__assert_fail@plt+0xfdf0>
   1ff28:	cmp	r3, #0
   1ff2c:	cmpeq	r2, #32
   1ff30:	beq	20e64 <__assert_fail@plt+0xfea0>
   1ff34:	cmp	r3, #0
   1ff38:	cmpeq	r2, #64	; 0x40
   1ff3c:	moveq	r3, #64	; 0x40
   1ff40:	streq	r3, [sp, #52]	; 0x34
   1ff44:	moveq	r2, #7
   1ff48:	bne	20dcc <__assert_fail@plt+0xfe08>
   1ff4c:	str	r2, [sp]
   1ff50:	add	r3, sp, #152	; 0x98
   1ff54:	ldr	r2, [sp, #24]
   1ff58:	mov	r1, #0
   1ff5c:	str	r1, [r3, #-4]
   1ff60:	sub	r0, r2, #3552	; 0xde0
   1ff64:	str	r1, [r3], #-4
   1ff68:	str	r1, [sp, #4]
   1ff6c:	str	r1, [r3, #8]
   1ff70:	ldm	r3, {r1, r2, r3}
   1ff74:	bl	15f88 <__assert_fail@plt+0x4fc4>
   1ff78:	ldr	r5, [pc, #2820]	; 20a84 <__assert_fail@plt+0xfac0>
   1ff7c:	ldr	r2, [sp, #24]
   1ff80:	add	r5, pc, r5
   1ff84:	add	r4, r5, r4
   1ff88:	ldr	r1, [sp, #52]	; 0x34
   1ff8c:	sub	r3, r2, #3552	; 0xde0
   1ff90:	ldrb	r4, [r4, #1136]	; 0x470
   1ff94:	sxth	ip, r9
   1ff98:	str	r1, [r2, #-3540]	; 0xfffff22c
   1ff9c:	ldm	r3, {r0, r1, r2, r3}
   1ffa0:	sub	r7, r7, ip, lsl #4
   1ffa4:	sub	r4, r4, #49	; 0x31
   1ffa8:	add	r7, r7, #16
   1ffac:	add	r8, r5, r4
   1ffb0:	add	lr, sp, #204	; 0xcc
   1ffb4:	sub	r6, r6, ip, lsl #1
   1ffb8:	add	r8, r8, #1216	; 0x4c0
   1ffbc:	stm	r7, {r0, r1, r2, r3}
   1ffc0:	add	ip, ip, ip, lsl #2
   1ffc4:	ldm	lr!, {r0, r1, r2, r3}
   1ffc8:	sub	ip, fp, ip, lsl #2
   1ffcc:	ldrsh	r9, [r6]
   1ffd0:	ldrsb	r8, [r8, #8]
   1ffd4:	add	fp, ip, #20
   1ffd8:	mov	ip, fp
   1ffdc:	ldr	lr, [lr]
   1ffe0:	add	r8, r8, r9
   1ffe4:	cmp	r8, #147	; 0x93
   1ffe8:	stmia	ip!, {r0, r1, r2, r3}
   1ffec:	str	lr, [ip]
   1fff0:	bhi	20008 <__assert_fail@plt+0xf044>
   1fff4:	add	r3, r5, #444	; 0x1bc
   1fff8:	lsl	r2, r8, #1
   1fffc:	ldrsh	r3, [r3, r2]
   20000:	cmp	r3, r9
   20004:	beq	2021c <__assert_fail@plt+0xf258>
   20008:	ldr	r3, [pc, #2680]	; 20a88 <__assert_fail@plt+0xfac4>
   2000c:	lsl	r4, r4, #1
   20010:	add	r3, pc, r3
   20014:	add	r3, r3, #1248	; 0x4e0
   20018:	add	r3, r3, #8
   2001c:	ldrsh	ip, [r3, r4]
   20020:	mov	r4, ip
   20024:	ldr	r1, [sp, #28]
   20028:	strh	ip, [r6, #2]
   2002c:	sub	r3, r1, #-2147483647	; 0x80000001
   20030:	add	r6, r6, #2
   20034:	lsl	r3, r3, #1
   20038:	add	r2, sl, r3
   2003c:	cmp	r6, r2
   20040:	bcc	2015c <__assert_fail@plt+0xf198>
   20044:	sub	fp, r6, sl
   20048:	ldr	r2, [pc, #2620]	; 20a8c <__assert_fail@plt+0xfac8>
   2004c:	asr	fp, fp, #1
   20050:	cmp	r1, r2
   20054:	add	fp, fp, #1
   20058:	bhi	202a0 <__assert_fail@plt+0xf2dc>
   2005c:	add	r2, r2, #1
   20060:	add	r3, r3, #2
   20064:	cmp	r3, r2
   20068:	movcc	r5, r3
   2006c:	movcs	r5, r2
   20070:	add	r0, r5, r5, lsl #3
   20074:	add	r0, r5, r0, lsl #1
   20078:	lsl	r0, r0, #1
   2007c:	add	r0, r0, #46	; 0x2e
   20080:	bl	10dfc <malloc@plt>
   20084:	subs	r9, r0, #0
   20088:	beq	202a0 <__assert_fail@plt+0xf2dc>
   2008c:	lsl	r6, fp, #1
   20090:	mov	r1, sl
   20094:	mov	r2, r6
   20098:	str	r5, [sp, #28]
   2009c:	lsl	r8, r5, #1
   200a0:	bl	10d84 <memcpy@plt>
   200a4:	ldr	r2, [pc, #2532]	; 20a90 <__assert_fail@plt+0xfacc>
   200a8:	add	r5, r8, #23
   200ac:	lsl	r7, fp, #4
   200b0:	umull	r1, r5, r2, r5
   200b4:	ldr	r1, [sp, #36]	; 0x24
   200b8:	mov	r2, r7
   200bc:	lsr	r5, r5, #4
   200c0:	add	fp, fp, fp, lsl #2
   200c4:	add	r5, r5, r5, lsl #1
   200c8:	lsl	fp, fp, #2
   200cc:	add	r5, r9, r5, lsl #3
   200d0:	mov	r0, r5
   200d4:	bl	10d84 <memcpy@plt>
   200d8:	ldr	r3, [sp, #28]
   200dc:	ldr	r2, [pc, #2476]	; 20a90 <__assert_fail@plt+0xfacc>
   200e0:	ldr	r1, [sp, #32]
   200e4:	lsl	r3, r3, #4
   200e8:	add	r3, r3, #23
   200ec:	umull	r2, r3, r2, r3
   200f0:	mov	r2, fp
   200f4:	lsr	r3, r3, #4
   200f8:	add	r3, r3, r3, lsl #1
   200fc:	add	r3, r5, r3, lsl #3
   20100:	mov	r0, r3
   20104:	bl	10d84 <memcpy@plt>
   20108:	ldr	r2, [sp, #44]	; 0x2c
   2010c:	cmp	sl, r2
   20110:	mov	r3, r0
   20114:	beq	20128 <__assert_fail@plt+0xf164>
   20118:	str	r0, [sp, #32]
   2011c:	mov	r0, sl
   20120:	bl	10d60 <free@plt>
   20124:	ldr	r3, [sp, #32]
   20128:	sub	r6, r6, #2
   2012c:	sub	r8, r8, #2
   20130:	add	r6, r9, r6
   20134:	add	r8, r9, r8
   20138:	sub	r7, r7, #16
   2013c:	sub	fp, fp, #20
   20140:	cmp	r6, r8
   20144:	add	r7, r5, r7
   20148:	add	fp, r3, fp
   2014c:	bcs	20da8 <__assert_fail@plt+0xfde4>
   20150:	mov	sl, r9
   20154:	str	r3, [sp, #32]
   20158:	str	r5, [sp, #36]	; 0x24
   2015c:	cmp	r4, #6
   20160:	bne	1fb44 <__assert_fail@plt+0xeb80>
   20164:	mov	r6, sl
   20168:	mov	r4, #0
   2016c:	b	20174 <__assert_fail@plt+0xf1b0>
   20170:	mov	r4, #1
   20174:	ldr	r3, [sp, #44]	; 0x2c
   20178:	cmp	r6, r3
   2017c:	beq	20188 <__assert_fail@plt+0xf1c4>
   20180:	mov	r0, r6
   20184:	bl	10d60 <free@plt>
   20188:	add	r3, sp, #7808	; 0x1e80
   2018c:	add	r3, r3, #20
   20190:	ldr	r2, [r3]
   20194:	ldr	r3, [sp, #68]	; 0x44
   20198:	mov	r0, r4
   2019c:	ldr	r3, [r3]
   201a0:	cmp	r2, r3
   201a4:	bne	20f94 <__assert_fail@plt+0xffd0>
   201a8:	add	sp, sp, #7808	; 0x1e80
   201ac:	add	sp, sp, #28
   201b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201b4:	ldr	r2, [sp, #20]
   201b8:	mov	r3, #0
   201bc:	str	r3, [r2]
   201c0:	b	1fb98 <__assert_fail@plt+0xebd4>
   201c4:	ldr	r2, [sp, #24]
   201c8:	add	r3, r7, #16
   201cc:	sub	ip, r2, #3552	; 0xde0
   201d0:	ldm	r3, {r0, r1, r2, r3}
   201d4:	ldr	r8, [fp, #8]
   201d8:	ldr	r5, [fp, #12]
   201dc:	stm	ip, {r0, r1, r2, r3}
   201e0:	ldr	r2, [fp, #16]
   201e4:	ldr	lr, [r7, #28]
   201e8:	str	lr, [sp, #52]	; 0x34
   201ec:	ldr	r3, [sp, #24]
   201f0:	mov	r9, #0
   201f4:	str	r8, [r3, #-3524]	; 0xfffff23c
   201f8:	str	r8, [r3, #-3532]	; 0xfffff234
   201fc:	str	r5, [r3, #-3520]	; 0xfffff240
   20200:	str	r5, [r3, #-3528]	; 0xfffff238
   20204:	str	r2, [r3, #-3516]	; 0xfffff244
   20208:	b	1fdac <__assert_fail@plt+0xede8>
   2020c:	ldr	r2, [sp, #20]
   20210:	mvn	r3, #1
   20214:	str	r3, [r2]
   20218:	b	1fc74 <__assert_fail@plt+0xecb0>
   2021c:	add	r8, r5, r8
   20220:	ldrb	r4, [r8, #740]	; 0x2e4
   20224:	sxth	ip, r4
   20228:	b	20024 <__assert_fail@plt+0xf060>
   2022c:	bl	1dd70 <__assert_fail@plt+0xcdac>
   20230:	ldr	r3, [sp, #20]
   20234:	str	r0, [r3]
   20238:	b	1fb6c <__assert_fail@plt+0xeba8>
   2023c:	ldr	r2, [sp, #76]	; 0x4c
   20240:	ldr	r0, [pc, #2124]	; 20a94 <__assert_fail@plt+0xfad0>
   20244:	ldr	r3, [r2]
   20248:	add	r0, pc, r0
   2024c:	add	r3, r3, #1
   20250:	str	r3, [r2]
   20254:	bl	1fa0c <__assert_fail@plt+0xea48>
   20258:	ldr	r3, [sp, #48]	; 0x30
   2025c:	ldr	r8, [r3]
   20260:	ldr	r5, [r3, #4]
   20264:	b	1fc74 <__assert_fail@plt+0xecb0>
   20268:	mov	r3, r7
   2026c:	mov	r2, #3
   20270:	ldr	r1, [r3], #-16
   20274:	ldr	r0, [sp, #24]
   20278:	str	r1, [sp, #4]
   2027c:	str	r2, [sp]
   20280:	sub	r0, r0, #3552	; 0xde0
   20284:	ldm	r3, {r1, r2, r3}
   20288:	bl	15f88 <__assert_fail@plt+0x4fc4>
   2028c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20290:	ldr	r2, [sp, #24]
   20294:	mov	r3, #0
   20298:	str	r3, [r2, #-3552]	; 0xfffff220
   2029c:	b	1ff78 <__assert_fail@plt+0xefb4>
   202a0:	ldr	r0, [pc, #2032]	; 20a98 <__assert_fail@plt+0xfad4>
   202a4:	mov	r6, sl
   202a8:	add	r0, pc, r0
   202ac:	bl	1fa0c <__assert_fail@plt+0xea48>
   202b0:	mov	r4, #2
   202b4:	b	20174 <__assert_fail@plt+0xf1b0>
   202b8:	ldr	r1, [r7]
   202bc:	ldr	r0, [r7, #-16]
   202c0:	bl	19bd8 <__assert_fail@plt+0x8c14>
   202c4:	ldr	r3, [sp, #24]
   202c8:	str	r0, [r3, #-3552]	; 0xfffff220
   202cc:	b	1ff78 <__assert_fail@plt+0xefb4>
   202d0:	ldr	r1, [r7, #-32]	; 0xffffffe0
   202d4:	ldr	r0, [r7, #-48]	; 0xffffffd0
   202d8:	bl	19530 <__assert_fail@plt+0x856c>
   202dc:	ldr	r3, [sp, #24]
   202e0:	str	r0, [r3, #-3552]	; 0xfffff220
   202e4:	b	1ff78 <__assert_fail@plt+0xefb4>
   202e8:	ldr	r1, [r7, #-16]
   202ec:	ldr	r0, [r7, #-48]	; 0xffffffd0
   202f0:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   202f4:	cmp	r0, #0
   202f8:	beq	20f38 <__assert_fail@plt+0xff74>
   202fc:	bl	19614 <__assert_fail@plt+0x8650>
   20300:	ldr	r2, [sp, #24]
   20304:	ldr	r3, [r7, #-48]	; 0xffffffd0
   20308:	str	r3, [r2, #-3552]	; 0xfffff220
   2030c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20310:	mov	r3, r7
   20314:	ldr	r2, [sp, #24]
   20318:	sub	r0, r2, #3552	; 0xde0
   2031c:	ldrb	r2, [r3], #-16
   20320:	str	r2, [sp]
   20324:	ldm	r3, {r1, r2, r3}
   20328:	bl	15e0c <__assert_fail@plt+0x4e48>
   2032c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20330:	ldm	r7, {r1, r2}
   20334:	mov	r3, #0
   20338:	orrs	r2, r1, r2
   2033c:	moveq	r2, #1
   20340:	movne	r2, r3
   20344:	ldr	r1, [sp, #24]
   20348:	str	r2, [r1, #-3552]	; 0xfffff220
   2034c:	str	r3, [r1, #-3548]	; 0xfffff224
   20350:	b	1ff78 <__assert_fail@plt+0xefb4>
   20354:	ldrd	r2, [r7]
   20358:	ldr	r1, [sp, #24]
   2035c:	mvn	r2, r2
   20360:	mvn	r3, r3
   20364:	str	r2, [r1, #-3552]	; 0xfffff220
   20368:	str	r3, [r1, #-3548]	; 0xfffff224
   2036c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20370:	ldr	r1, [sp, #24]
   20374:	mov	r2, #0
   20378:	sub	r0, r1, #3552	; 0xde0
   2037c:	sub	r3, r0, #12
   20380:	mov	ip, #4
   20384:	str	r2, [r0, #-8]
   20388:	str	r2, [r0, #-4]
   2038c:	str	r2, [r1, #-3564]	; 0xfffff214
   20390:	str	r2, [sp, #4]
   20394:	ldm	r3, {r1, r2, r3}
   20398:	str	ip, [sp]
   2039c:	bl	15f88 <__assert_fail@plt+0x4fc4>
   203a0:	b	1ff78 <__assert_fail@plt+0xefb4>
   203a4:	ldrd	r2, [r7]
   203a8:	ldr	r1, [sp, #24]
   203ac:	rsbs	r2, r2, #0
   203b0:	sub	r1, r1, #3552	; 0xde0
   203b4:	rsc	r3, r3, #0
   203b8:	strd	r2, [r1]
   203bc:	b	1ff78 <__assert_fail@plt+0xefb4>
   203c0:	ldrd	r2, [r7]
   203c4:	orrs	r1, r2, r3
   203c8:	strd	r2, [sp, #80]	; 0x50
   203cc:	beq	20e24 <__assert_fail@plt+0xfe60>
   203d0:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   203d4:	bl	21414 <__assert_fail@plt+0x10450>
   203d8:	ldr	r1, [sp, #24]
   203dc:	sub	r1, r1, #3552	; 0xde0
   203e0:	strd	r2, [r1]
   203e4:	b	1ff78 <__assert_fail@plt+0xefb4>
   203e8:	ldrd	r2, [r7]
   203ec:	orrs	r1, r2, r3
   203f0:	strd	r2, [sp, #80]	; 0x50
   203f4:	beq	20e74 <__assert_fail@plt+0xfeb0>
   203f8:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   203fc:	bl	21414 <__assert_fail@plt+0x10450>
   20400:	ldr	r3, [sp, #24]
   20404:	sub	r3, r3, #3552	; 0xde0
   20408:	strd	r0, [r3]
   2040c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20410:	ldr	r2, [r7, #-32]	; 0xffffffe0
   20414:	ldr	r1, [r7, #4]
   20418:	ldr	ip, [r7]
   2041c:	ldr	r0, [r7, #-28]	; 0xffffffe4
   20420:	mul	r1, r2, r1
   20424:	umull	r2, r3, r2, ip
   20428:	mla	r0, ip, r0, r1
   2042c:	ldr	r1, [sp, #24]
   20430:	add	r3, r0, r3
   20434:	sub	r1, r1, #3552	; 0xde0
   20438:	strd	r2, [r1]
   2043c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20440:	ldr	r1, [r7]
   20444:	ldr	r3, [r7, #-32]	; 0xffffffe0
   20448:	ldr	r2, [r7, #-28]	; 0xffffffe4
   2044c:	subs	r3, r3, r1
   20450:	ldr	r0, [r7, #4]
   20454:	ldr	r1, [sp, #24]
   20458:	sbc	r2, r2, r0
   2045c:	str	r2, [r1, #-3548]	; 0xfffff224
   20460:	str	r3, [r1, #-3552]	; 0xfffff220
   20464:	b	1ff78 <__assert_fail@plt+0xefb4>
   20468:	ldr	r1, [r7]
   2046c:	ldr	r3, [r7, #-32]	; 0xffffffe0
   20470:	ldr	r2, [r7, #-28]	; 0xffffffe4
   20474:	adds	r3, r3, r1
   20478:	ldr	r0, [r7, #4]
   2047c:	ldr	r1, [sp, #24]
   20480:	adc	r2, r2, r0
   20484:	str	r2, [r1, #-3548]	; 0xfffff224
   20488:	str	r3, [r1, #-3552]	; 0xfffff220
   2048c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20490:	ldr	r2, [r7]
   20494:	ldr	r3, [r7, #-32]	; 0xffffffe0
   20498:	ldr	r1, [r7, #-28]	; 0xffffffe4
   2049c:	rsb	r0, r2, #32
   204a0:	lsr	r3, r3, r2
   204a4:	orr	r3, r3, r1, lsl r0
   204a8:	sub	r0, r2, #32
   204ac:	lsr	r2, r1, r2
   204b0:	orr	r3, r3, r1, lsr r0
   204b4:	ldr	r1, [sp, #24]
   204b8:	str	r2, [r1, #-3548]	; 0xfffff224
   204bc:	str	r3, [r1, #-3552]	; 0xfffff220
   204c0:	b	1ff78 <__assert_fail@plt+0xefb4>
   204c4:	ldr	r2, [r7]
   204c8:	ldr	r3, [r7, #-28]	; 0xffffffe4
   204cc:	ldr	r1, [r7, #-32]	; 0xffffffe0
   204d0:	sub	r0, r2, #32
   204d4:	lsl	r3, r3, r2
   204d8:	orr	r3, r3, r1, lsl r0
   204dc:	rsb	r0, r2, #32
   204e0:	lsl	r2, r1, r2
   204e4:	orr	r3, r3, r1, lsr r0
   204e8:	ldr	r1, [sp, #24]
   204ec:	str	r2, [r1, #-3552]	; 0xfffff220
   204f0:	str	r3, [r1, #-3548]	; 0xfffff224
   204f4:	b	1ff78 <__assert_fail@plt+0xefb4>
   204f8:	ldrd	r2, [r7]
   204fc:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   20500:	ldr	lr, [sp, #24]
   20504:	mov	ip, #0
   20508:	cmp	r1, r3
   2050c:	cmpeq	r0, r2
   20510:	movcs	r3, #1
   20514:	movcc	r3, ip
   20518:	str	ip, [lr, #-3548]	; 0xfffff224
   2051c:	str	r3, [lr, #-3552]	; 0xfffff220
   20520:	b	1ff78 <__assert_fail@plt+0xefb4>
   20524:	ldrd	r2, [r7]
   20528:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   2052c:	ldr	lr, [sp, #24]
   20530:	mov	ip, #0
   20534:	cmp	r1, r3
   20538:	cmpeq	r0, r2
   2053c:	movls	r3, #1
   20540:	movhi	r3, ip
   20544:	str	ip, [lr, #-3548]	; 0xfffff224
   20548:	str	r3, [lr, #-3552]	; 0xfffff220
   2054c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20550:	ldrd	r2, [r7]
   20554:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   20558:	ldr	lr, [sp, #24]
   2055c:	mov	ip, #0
   20560:	cmp	r1, r3
   20564:	cmpeq	r0, r2
   20568:	movhi	r3, #1
   2056c:	movls	r3, ip
   20570:	str	ip, [lr, #-3548]	; 0xfffff224
   20574:	str	r3, [lr, #-3552]	; 0xfffff220
   20578:	b	1ff78 <__assert_fail@plt+0xefb4>
   2057c:	ldrd	r2, [r7]
   20580:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   20584:	ldr	lr, [sp, #24]
   20588:	mov	ip, #0
   2058c:	cmp	r1, r3
   20590:	cmpeq	r0, r2
   20594:	movcc	r3, #1
   20598:	movcs	r3, ip
   2059c:	str	ip, [lr, #-3548]	; 0xfffff224
   205a0:	str	r3, [lr, #-3552]	; 0xfffff220
   205a4:	b	1ff78 <__assert_fail@plt+0xefb4>
   205a8:	ldrd	r2, [r7]
   205ac:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   205b0:	ldr	lr, [sp, #24]
   205b4:	mov	ip, #0
   205b8:	cmp	r1, r3
   205bc:	cmpeq	r0, r2
   205c0:	movne	r3, #1
   205c4:	moveq	r3, ip
   205c8:	str	ip, [lr, #-3548]	; 0xfffff224
   205cc:	str	r3, [lr, #-3552]	; 0xfffff220
   205d0:	b	1ff78 <__assert_fail@plt+0xefb4>
   205d4:	ldrd	r2, [r7]
   205d8:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   205dc:	ldr	lr, [sp, #24]
   205e0:	mov	ip, #0
   205e4:	cmp	r1, r3
   205e8:	cmpeq	r0, r2
   205ec:	moveq	r3, #1
   205f0:	movne	r3, ip
   205f4:	str	ip, [lr, #-3548]	; 0xfffff224
   205f8:	str	r3, [lr, #-3552]	; 0xfffff220
   205fc:	b	1ff78 <__assert_fail@plt+0xefb4>
   20600:	ldr	r1, [r7]
   20604:	ldr	r2, [r7, #-32]	; 0xffffffe0
   20608:	ldr	r0, [sp, #24]
   2060c:	and	r2, r2, r1
   20610:	ldr	r3, [r7, #-28]	; 0xffffffe4
   20614:	ldr	r1, [r7, #4]
   20618:	str	r2, [r0, #-3552]	; 0xfffff220
   2061c:	and	r3, r3, r1
   20620:	str	r3, [r0, #-3548]	; 0xfffff224
   20624:	b	1ff78 <__assert_fail@plt+0xefb4>
   20628:	ldr	r1, [r7]
   2062c:	ldr	r2, [r7, #-32]	; 0xffffffe0
   20630:	ldr	r0, [sp, #24]
   20634:	eor	r2, r2, r1
   20638:	ldr	r3, [r7, #-28]	; 0xffffffe4
   2063c:	ldr	r1, [r7, #4]
   20640:	str	r2, [r0, #-3552]	; 0xfffff220
   20644:	eor	r3, r3, r1
   20648:	str	r3, [r0, #-3548]	; 0xfffff224
   2064c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20650:	ldr	r1, [r7]
   20654:	ldr	r2, [r7, #-32]	; 0xffffffe0
   20658:	ldr	r0, [sp, #24]
   2065c:	orr	r2, r2, r1
   20660:	ldr	r3, [r7, #-28]	; 0xffffffe4
   20664:	ldr	r1, [r7, #4]
   20668:	str	r2, [r0, #-3552]	; 0xfffff220
   2066c:	orr	r3, r3, r1
   20670:	str	r3, [r0, #-3548]	; 0xfffff224
   20674:	b	1ff78 <__assert_fail@plt+0xefb4>
   20678:	ldrd	r2, [r7, #-32]	; 0xffffffe0
   2067c:	orrs	r1, r2, r3
   20680:	beq	203d8 <__assert_fail@plt+0xf414>
   20684:	ldrd	r2, [r7]
   20688:	orrs	r3, r2, r3
   2068c:	movne	r2, #1
   20690:	moveq	r2, #0
   20694:	mov	r3, #0
   20698:	b	203d8 <__assert_fail@plt+0xf414>
   2069c:	ldrd	r2, [r7, #-32]	; 0xffffffe0
   206a0:	orrs	r3, r2, r3
   206a4:	movne	r2, #1
   206a8:	movne	r3, #0
   206ac:	bne	20344 <__assert_fail@plt+0xf380>
   206b0:	ldm	r7, {r1, r2}
   206b4:	mov	r3, #0
   206b8:	orrs	r2, r1, r2
   206bc:	movne	r2, #1
   206c0:	moveq	r2, r3
   206c4:	b	20344 <__assert_fail@plt+0xf380>
   206c8:	ldrd	r2, [r7, #-64]	; 0xffffffc0
   206cc:	orrs	r3, r2, r3
   206d0:	ldrdne	r2, [r7, #-32]	; 0xffffffe0
   206d4:	ldrdeq	r2, [r7]
   206d8:	b	203d8 <__assert_fail@plt+0xf414>
   206dc:	ldr	r1, [sp, #24]
   206e0:	ldrd	r2, [r7, #-16]
   206e4:	sub	r1, r1, #3552	; 0xde0
   206e8:	strd	r2, [r1]
   206ec:	b	1ff78 <__assert_fail@plt+0xefb4>
   206f0:	ldr	r1, [r7, #-16]
   206f4:	ldr	r0, [r7]
   206f8:	bl	195cc <__assert_fail@plt+0x8608>
   206fc:	ldr	r3, [sp, #24]
   20700:	str	r0, [r3, #-3552]	; 0xfffff220
   20704:	b	1ff78 <__assert_fail@plt+0xefb4>
   20708:	ldr	r1, [r7, #-4]
   2070c:	mvn	r2, #0
   20710:	rsb	r3, r1, #64	; 0x40
   20714:	rsb	r0, r3, #32
   20718:	lsr	r5, r2, r3
   2071c:	orr	r5, r5, r2, lsl r0
   20720:	sub	r0, r3, #32
   20724:	lsr	r3, r2, r3
   20728:	cmp	r1, #32
   2072c:	orr	r5, r5, r2, lsr r0
   20730:	str	r3, [sp, #80]	; 0x50
   20734:	sub	r8, r7, #16
   20738:	beq	20e88 <__assert_fail@plt+0xfec4>
   2073c:	ldr	r2, [pc, #856]	; 20a9c <__assert_fail@plt+0xfad8>
   20740:	ldr	r1, [pc, #856]	; 20aa0 <__assert_fail@plt+0xfadc>
   20744:	add	r2, pc, r2
   20748:	add	r1, pc, r1
   2074c:	mov	r0, fp
   20750:	bl	1b594 <__assert_fail@plt+0xa5d0>
   20754:	ldr	r3, [pc, #944]	; 20b0c <__assert_fail@plt+0xfb48>
   20758:	ldr	r1, [sp, #72]	; 0x48
   2075c:	mov	r2, #1
   20760:	ldr	r3, [r1, r3]
   20764:	strb	r2, [r3]
   20768:	ldr	r3, [r7, #-4]
   2076c:	str	r5, [sp]
   20770:	str	r3, [sp, #8]
   20774:	ldr	r3, [sp, #80]	; 0x50
   20778:	str	r3, [sp, #4]
   2077c:	ldr	r3, [sp, #24]
   20780:	sub	r0, r3, #3552	; 0xde0
   20784:	ldm	r8, {r1, r2, r3}
   20788:	bl	15b44 <__assert_fail@plt+0x4b80>
   2078c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20790:	ldr	ip, [r7, #-4]
   20794:	ldrd	r2, [r7]
   20798:	cmp	ip, #63	; 0x3f
   2079c:	strd	r2, [sp, #80]	; 0x50
   207a0:	bgt	20848 <__assert_fail@plt+0xf884>
   207a4:	mov	r5, #1
   207a8:	sub	r1, ip, #32
   207ac:	rsb	lr, ip, #32
   207b0:	lsl	r1, r5, r1
   207b4:	lsl	r0, r5, ip
   207b8:	orr	r1, r1, r5, lsr lr
   207bc:	subs	r3, r0, #1
   207c0:	str	r3, [sp, #88]	; 0x58
   207c4:	sbc	r3, r1, #0
   207c8:	str	r3, [sp, #92]	; 0x5c
   207cc:	ldrd	r0, [sp, #88]	; 0x58
   207d0:	ldrd	r2, [sp, #80]	; 0x50
   207d4:	cmp	r3, r1
   207d8:	cmpeq	r2, r0
   207dc:	bls	20848 <__assert_fail@plt+0xf884>
   207e0:	ldr	lr, [sp, #80]	; 0x50
   207e4:	ldr	r2, [sp, #84]	; 0x54
   207e8:	orr	r3, lr, r0
   207ec:	str	r3, [sp, #96]	; 0x60
   207f0:	orr	r3, r2, r1
   207f4:	str	r3, [sp, #100]	; 0x64
   207f8:	ldrd	r2, [sp, #96]	; 0x60
   207fc:	mvn	r1, #0
   20800:	mvn	r0, #0
   20804:	cmp	r3, r1
   20808:	cmpeq	r2, r0
   2080c:	beq	20848 <__assert_fail@plt+0xf884>
   20810:	ldr	r2, [pc, #652]	; 20aa4 <__assert_fail@plt+0xfae0>
   20814:	ldr	r1, [pc, #652]	; 20aa8 <__assert_fail@plt+0xfae4>
   20818:	mov	r3, ip
   2081c:	add	r2, pc, r2
   20820:	add	r1, pc, r1
   20824:	mov	r0, fp
   20828:	bl	1b594 <__assert_fail@plt+0xa5d0>
   2082c:	ldrd	r2, [r7]
   20830:	ldr	r1, [pc, #724]	; 20b0c <__assert_fail@plt+0xfb48>
   20834:	ldr	ip, [r7, #-4]
   20838:	strd	r2, [sp, #80]	; 0x50
   2083c:	ldr	r3, [sp, #72]	; 0x48
   20840:	ldr	r1, [r3, r1]
   20844:	strb	r5, [r1]
   20848:	ldrd	r2, [sp, #80]	; 0x50
   2084c:	sub	r1, r7, #16
   20850:	str	ip, [sp, #8]
   20854:	strd	r2, [sp]
   20858:	ldr	r3, [sp, #24]
   2085c:	sub	r0, r3, #3552	; 0xde0
   20860:	ldm	r1, {r1, r2, r3}
   20864:	bl	15b44 <__assert_fail@plt+0x4b80>
   20868:	b	1ff78 <__assert_fail@plt+0xefb4>
   2086c:	ldr	r0, [sp, #24]
   20870:	mov	r2, #0
   20874:	sub	r3, r0, #3568	; 0xdf0
   20878:	sub	r3, r3, #8
   2087c:	mov	ip, #6
   20880:	str	r2, [r0, #-3572]	; 0xfffff20c
   20884:	str	r2, [r0, #-3576]	; 0xfffff208
   20888:	str	r2, [r3, #8]
   2088c:	sub	r0, r0, #3552	; 0xde0
   20890:	str	r2, [sp, #4]
   20894:	ldm	r3, {r1, r2, r3}
   20898:	str	ip, [sp]
   2089c:	bl	15f88 <__assert_fail@plt+0x4fc4>
   208a0:	mov	r3, #32
   208a4:	str	r3, [sp, #52]	; 0x34
   208a8:	b	1ff78 <__assert_fail@plt+0xefb4>
   208ac:	ldr	r1, [pc, #504]	; 20aac <__assert_fail@plt+0xfae8>
   208b0:	ldr	r0, [r7]
   208b4:	add	r1, pc, r1
   208b8:	bl	195cc <__assert_fail@plt+0x8608>
   208bc:	ldr	r3, [sp, #24]
   208c0:	str	r0, [r3, #-3552]	; 0xfffff220
   208c4:	b	1ff78 <__assert_fail@plt+0xefb4>
   208c8:	ldr	r0, [r7]
   208cc:	ldr	r1, [r7, #-16]
   208d0:	add	r0, r0, #20
   208d4:	bl	1938c <__assert_fail@plt+0x83c8>
   208d8:	ldr	r2, [sp, #24]
   208dc:	ldr	r3, [r7]
   208e0:	str	r3, [r2, #-3552]	; 0xfffff220
   208e4:	b	1ff78 <__assert_fail@plt+0xefb4>
   208e8:	ldr	r1, [r7, #-16]
   208ec:	ldr	r0, [r7]
   208f0:	bl	194c4 <__assert_fail@plt+0x8500>
   208f4:	ldr	r3, [sp, #24]
   208f8:	str	r0, [r3, #-3552]	; 0xfffff220
   208fc:	b	1ff78 <__assert_fail@plt+0xefb4>
   20900:	ldr	r0, [r7]
   20904:	bl	19614 <__assert_fail@plt+0x8650>
   20908:	ldr	r3, [sp, #24]
   2090c:	str	r0, [r3, #-3552]	; 0xfffff220
   20910:	b	1ff78 <__assert_fail@plt+0xefb4>
   20914:	ldr	r2, [sp, #24]
   20918:	mov	r3, #1
   2091c:	str	r3, [r2, #-3552]	; 0xfffff220
   20920:	b	1ff78 <__assert_fail@plt+0xefb4>
   20924:	ldr	r2, [r7]
   20928:	ldr	r5, [r7, #-32]	; 0xffffffe0
   2092c:	mov	r0, r2
   20930:	str	r2, [sp, #80]	; 0x50
   20934:	ldr	r8, [r7, #-16]
   20938:	bl	1acd0 <__assert_fail@plt+0x9d0c>
   2093c:	ldr	r2, [sp, #80]	; 0x50
   20940:	mov	r1, r8
   20944:	mov	r3, r0
   20948:	mov	r0, r5
   2094c:	bl	19c5c <__assert_fail@plt+0x8c98>
   20950:	ldr	r3, [pc, #344]	; 20ab0 <__assert_fail@plt+0xfaec>
   20954:	ldr	r2, [sp, #72]	; 0x48
   20958:	ldr	r3, [r2, r3]
   2095c:	str	r0, [r3]
   20960:	b	1ff78 <__assert_fail@plt+0xefb4>
   20964:	ldr	r1, [r7]
   20968:	ldr	r0, [r7, #-16]
   2096c:	bl	1962c <__assert_fail@plt+0x8668>
   20970:	ldr	r3, [sp, #24]
   20974:	str	r0, [r3, #-3552]	; 0xfffff220
   20978:	b	1ff78 <__assert_fail@plt+0xefb4>
   2097c:	ldr	r1, [r7, #-16]
   20980:	ldr	r0, [r7, #-48]	; 0xffffffd0
   20984:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   20988:	cmp	r0, #0
   2098c:	beq	20eec <__assert_fail@plt+0xff28>
   20990:	bl	19904 <__assert_fail@plt+0x8940>
   20994:	b	20300 <__assert_fail@plt+0xf33c>
   20998:	ldr	r3, [r7, #-64]	; 0xffffffc0
   2099c:	ldr	r0, [r7, #-32]	; 0xffffffe0
   209a0:	tst	r3, #2
   209a4:	ldr	r2, [r7, #-16]
   209a8:	beq	20e08 <__assert_fail@plt+0xfe44>
   209ac:	ldr	r1, [r7]
   209b0:	bl	19748 <__assert_fail@plt+0x8784>
   209b4:	ldr	r2, [sp, #24]
   209b8:	ldr	r3, [r7, #-32]	; 0xffffffe0
   209bc:	str	r3, [r2, #-3552]	; 0xfffff220
   209c0:	b	1ff78 <__assert_fail@plt+0xefb4>
   209c4:	mov	r3, r7
   209c8:	mov	r2, #2
   209cc:	b	20270 <__assert_fail@plt+0xf2ac>
   209d0:	ldr	r3, [r7, #-48]	; 0xffffffd0
   209d4:	tst	r3, #2
   209d8:	beq	20eb8 <__assert_fail@plt+0xfef4>
   209dc:	mov	r1, #0
   209e0:	mov	r0, r1
   209e4:	bl	19530 <__assert_fail@plt+0x856c>
   209e8:	ldr	r1, [pc, #196]	; 20ab4 <__assert_fail@plt+0xfaf0>
   209ec:	add	r1, pc, r1
   209f0:	bl	195cc <__assert_fail@plt+0x8608>
   209f4:	ldr	r2, [r7, #-16]
   209f8:	ldr	r1, [r7]
   209fc:	bl	19748 <__assert_fail@plt+0x8784>
   20a00:	ldr	r3, [sp, #24]
   20a04:	str	r0, [r3, #-3552]	; 0xfffff220
   20a08:	b	1ff78 <__assert_fail@plt+0xefb4>
   20a0c:	ldr	r1, [r7]
   20a10:	ldr	r0, [r7, #-32]	; 0xffffffe0
   20a14:	bl	199d0 <__assert_fail@plt+0x8a0c>
   20a18:	ldr	r3, [sp, #24]
   20a1c:	str	r0, [r3, #-3552]	; 0xfffff220
   20a20:	b	1ff78 <__assert_fail@plt+0xefb4>
   20a24:	ldrd	r2, [r7, #-16]
   20a28:	ldrd	r0, [r7, #-32]	; 0xffffffe0
   20a2c:	bl	19b8c <__assert_fail@plt+0x8bc8>
   20a30:	ldr	r3, [sp, #24]
   20a34:	str	r0, [r3, #-3552]	; 0xfffff220
   20a38:	b	1ff78 <__assert_fail@plt+0xefb4>
   20a3c:	ldr	r2, [sp, #24]
   20a40:	mov	r3, #0
   20a44:	str	r3, [r2, #-3552]	; 0xfffff220
   20a48:	str	r3, [r2, #-3548]	; 0xfffff224
   20a4c:	str	r3, [r2, #-3544]	; 0xfffff228
   20a50:	b	1ff78 <__assert_fail@plt+0xefb4>
   20a54:	andeq	r7, r1, r0, lsl r4
   20a58:	andeq	r0, r0, r4, lsl r1
   20a5c:	strdeq	r0, [r0], -ip
   20a60:	andeq	r0, r0, ip, asr #2
   20a64:	andeq	r0, r0, ip, lsl r1
   20a68:			; <UNDEFINED> instruction: 0x00005fb8
   20a6c:	andeq	r5, r0, r8, ror #30
   20a70:	andeq	r5, r0, ip, asr pc
   20a74:	andeq	r5, r0, ip, lsl pc
   20a78:	strdeq	r5, [r0], -ip
   20a7c:	andeq	r0, r0, r8, ror #2
   20a80:	andeq	r5, r0, ip, ror lr
   20a84:	andeq	r5, r0, r4, lsr #22
   20a88:	muleq	r0, r4, sl
   20a8c:	andeq	r2, r0, pc, lsl #14
   20a90:	bge	feacb544 <__assert_fail@plt+0xfeaba580>
   20a94:	andeq	r5, r0, r4, asr #29
   20a98:	andeq	r5, r0, r4, ror lr
   20a9c:	andeq	r5, r0, r4, asr r9
   20aa0:	andeq	r5, r0, ip, lsr #17
   20aa4:	andeq	r5, r0, r0, asr r8
   20aa8:	ldrdeq	r5, [r0], -r4
   20aac:	strdeq	r2, [r0], -r0
   20ab0:	andeq	r0, r0, r4, ror #2
   20ab4:			; <UNDEFINED> instruction: 0x00002db8
   20ab8:	andeq	r5, r0, r0, lsl r3
   20abc:	andeq	r5, r0, r4, lsl #6
   20ac0:	muleq	r0, r4, r3
   20ac4:	muleq	r0, ip, r2
   20ac8:	andeq	r4, r0, r8, lsr #26
   20acc:	andeq	r5, r0, ip, ror #4
   20ad0:	andeq	r5, r0, ip, lsl r2
   20ad4:	andeq	r5, r0, r8, lsr #5
   20ad8:	andeq	r5, r0, r4, asr #3
   20adc:	andeq	r5, r0, r8, asr r2
   20ae0:	andeq	r5, r0, r4, ror r1
   20ae4:	andeq	r5, r0, r0, ror #2
   20ae8:	andeq	r5, r0, ip, lsr #2
   20aec:	andeq	r5, r0, ip, lsr #2
   20af0:	strdeq	r5, [r0], -r8
   20af4:	strdeq	r5, [r0], -r8
   20af8:	andeq	r5, r0, r4, asr #1
   20afc:	andeq	r5, r0, r0, ror #1
   20b00:	andeq	r5, r0, ip, lsr #1
   20b04:	andeq	r5, r0, r8, asr #1
   20b08:	muleq	r0, r4, r0
   20b0c:	andeq	r0, r0, r0, lsl #2
   20b10:	andeq	r5, r0, r8
   20b14:	mov	r1, #0
   20b18:	ldr	r0, [r7, #-12]
   20b1c:	bl	1afd0 <__assert_fail@plt+0xa00c>
   20b20:	ldr	r3, [sp, #24]
   20b24:	mvn	r2, #0
   20b28:	sub	r8, r3, #3600	; 0xe10
   20b2c:	mov	r1, r0
   20b30:	mov	r5, r0
   20b34:	mov	r0, r8
   20b38:	bl	16170 <__assert_fail@plt+0x51ac>
   20b3c:	ldm	r8, {r0, r1, r2}
   20b40:	sub	r3, r7, #64	; 0x40
   20b44:	stm	sp, {r0, r1, r2}
   20b48:	ldr	r2, [sp, #24]
   20b4c:	sub	r0, r2, #3552	; 0xde0
   20b50:	ldm	r3, {r1, r2, r3}
   20b54:	bl	15a54 <__assert_fail@plt+0x4a90>
   20b58:	mov	r0, r5
   20b5c:	bl	10ef8 <fclose@plt>
   20b60:	b	1ff78 <__assert_fail@plt+0xefb4>
   20b64:	mov	r1, #0
   20b68:	ldr	r0, [r7, #-76]	; 0xffffffb4
   20b6c:	bl	1afd0 <__assert_fail@plt+0xa00c>
   20b70:	ldrd	r2, [r7, #-48]	; 0xffffffd0
   20b74:	orrs	r1, r2, r3
   20b78:	mov	r5, r0
   20b7c:	beq	20b94 <__assert_fail@plt+0xfbd0>
   20b80:	mov	r1, r2
   20b84:	mov	r2, #0
   20b88:	bl	10f58 <fseek@plt>
   20b8c:	cmp	r0, #0
   20b90:	bne	20f98 <__assert_fail@plt+0xffd4>
   20b94:	ldr	r3, [sp, #24]
   20b98:	ldr	r2, [r7, #-16]
   20b9c:	sub	r8, r3, #3600	; 0xe10
   20ba0:	mov	r0, r8
   20ba4:	mov	r1, r5
   20ba8:	bl	16170 <__assert_fail@plt+0x51ac>
   20bac:	ldm	r8, {r0, r1, r2}
   20bb0:	sub	r3, r7, #128	; 0x80
   20bb4:	b	20b44 <__assert_fail@plt+0xfb80>
   20bb8:	ldr	r0, [r7]
   20bbc:	ldr	r1, [r7, #-16]
   20bc0:	add	r0, r0, #24
   20bc4:	bl	1938c <__assert_fail@plt+0x83c8>
   20bc8:	ldr	r2, [sp, #24]
   20bcc:	ldr	r3, [r7]
   20bd0:	str	r3, [r2, #-3552]	; 0xfffff220
   20bd4:	b	1ff78 <__assert_fail@plt+0xefb4>
   20bd8:	ldr	r0, [r7, #-16]
   20bdc:	bl	19488 <__assert_fail@plt+0x84c4>
   20be0:	ldr	r3, [sp, #24]
   20be4:	str	r0, [r3, #-3552]	; 0xfffff220
   20be8:	b	1ff78 <__assert_fail@plt+0xefb4>
   20bec:	ldr	r5, [sp, #24]
   20bf0:	mov	r2, #0
   20bf4:	sub	r3, r5, #3600	; 0xe10
   20bf8:	sub	r3, r3, #12
   20bfc:	str	r2, [r5, #-3608]	; 0xfffff1e8
   20c00:	str	r2, [r5, #-3604]	; 0xfffff1ec
   20c04:	str	r2, [r5, #-3612]	; 0xfffff1e4
   20c08:	ldr	r0, [r7, #-16]
   20c0c:	ldm	r3, {r1, r2, r3}
   20c10:	bl	19434 <__assert_fail@plt+0x8470>
   20c14:	str	r0, [r5, #-3552]	; 0xfffff220
   20c18:	b	1ff78 <__assert_fail@plt+0xefb4>
   20c1c:	sub	r3, r7, #16
   20c20:	ldr	r0, [r7, #-48]	; 0xffffffd0
   20c24:	ldm	r3, {r1, r2, r3}
   20c28:	bl	19434 <__assert_fail@plt+0x8470>
   20c2c:	ldr	r3, [sp, #24]
   20c30:	str	r0, [r3, #-3552]	; 0xfffff220
   20c34:	b	1ff78 <__assert_fail@plt+0xefb4>
   20c38:	sub	r2, r7, #16
   20c3c:	sub	r3, r7, #32
   20c40:	ldm	r2, {r0, r1, r2}
   20c44:	stm	sp, {r0, r1, r2}
   20c48:	ldr	r2, [sp, #24]
   20c4c:	sub	r0, r2, #3552	; 0xde0
   20c50:	ldm	r3, {r1, r2, r3}
   20c54:	bl	15a54 <__assert_fail@plt+0x4a90>
   20c58:	b	1ff78 <__assert_fail@plt+0xefb4>
   20c5c:	ldm	r7, {r0, r1, r2}
   20c60:	sub	r3, r7, #16
   20c64:	b	20c44 <__assert_fail@plt+0xfc80>
   20c68:	sub	r2, r7, #16
   20c6c:	sub	r3, r7, #48	; 0x30
   20c70:	b	20c40 <__assert_fail@plt+0xfc7c>
   20c74:	ldr	r1, [r7, #-16]
   20c78:	ldr	r0, [r7, #-48]	; 0xffffffd0
   20c7c:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   20c80:	subs	r5, r0, #0
   20c84:	beq	20f20 <__assert_fail@plt+0xff5c>
   20c88:	ldr	r1, [r7, #-32]	; 0xffffffe0
   20c8c:	add	r0, r5, #44	; 0x2c
   20c90:	bl	1938c <__assert_fail@plt+0x83c8>
   20c94:	mov	r0, r5
   20c98:	ldr	r1, [r7]
   20c9c:	bl	199d0 <__assert_fail@plt+0x8a0c>
   20ca0:	b	20300 <__assert_fail@plt+0xf33c>
   20ca4:	ldr	r2, [sp, #24]
   20ca8:	mov	r3, #3
   20cac:	str	r3, [r2, #-3552]	; 0xfffff220
   20cb0:	b	1ff78 <__assert_fail@plt+0xefb4>
   20cb4:	ldr	r0, [r7]
   20cb8:	ldr	r1, [r7, #-16]
   20cbc:	add	r0, r0, #44	; 0x2c
   20cc0:	bl	1938c <__assert_fail@plt+0x83c8>
   20cc4:	ldr	r3, [r7]
   20cc8:	ldr	r2, [sp, #24]
   20ccc:	str	r3, [r2, #-3552]	; 0xfffff220
   20cd0:	b	1ff78 <__assert_fail@plt+0xefb4>
   20cd4:	ldr	r2, [r7]
   20cd8:	ldr	r3, [r7, #-16]
   20cdc:	cmp	r2, r3
   20ce0:	beq	20cc8 <__assert_fail@plt+0xfd04>
   20ce4:	ldr	r2, [pc, #-564]	; 20ab8 <__assert_fail@plt+0xfaf4>
   20ce8:	ldr	r1, [pc, #-564]	; 20abc <__assert_fail@plt+0xfaf8>
   20cec:	add	r2, pc, r2
   20cf0:	add	r1, pc, r1
   20cf4:	mov	r0, fp
   20cf8:	bl	1b594 <__assert_fail@plt+0xa5d0>
   20cfc:	ldr	r2, [pc, #-504]	; 20b0c <__assert_fail@plt+0xfb48>
   20d00:	ldr	r0, [sp, #72]	; 0x48
   20d04:	mov	r1, #1
   20d08:	ldr	r3, [r7, #-16]
   20d0c:	ldr	r2, [r0, r2]
   20d10:	strb	r1, [r2]
   20d14:	b	20cc8 <__assert_fail@plt+0xfd04>
   20d18:	bl	19598 <__assert_fail@plt+0x85d4>
   20d1c:	ldr	r1, [r7, #-16]
   20d20:	bl	195cc <__assert_fail@plt+0x8608>
   20d24:	ldr	r3, [sp, #24]
   20d28:	str	r0, [r3, #-3552]	; 0xfffff220
   20d2c:	b	1ff78 <__assert_fail@plt+0xefb4>
   20d30:	sub	r2, r7, #16
   20d34:	ldr	r3, [sp, #24]
   20d38:	ldm	r2, {r0, r1, r2}
   20d3c:	sub	r3, r3, #3552	; 0xde0
   20d40:	stm	r3, {r0, r1, r2}
   20d44:	b	1ff78 <__assert_fail@plt+0xefb4>
   20d48:	ldr	r2, [pc, #-656]	; 20ac0 <__assert_fail@plt+0xfafc>
   20d4c:	ldr	r1, [pc, #-656]	; 20ac4 <__assert_fail@plt+0xfb00>
   20d50:	mov	r0, fp
   20d54:	add	r2, pc, r2
   20d58:	add	r1, pc, r1
   20d5c:	bl	1b594 <__assert_fail@plt+0xa5d0>
   20d60:	sxth	ip, r9
   20d64:	ldr	r0, [sp, #72]	; 0x48
   20d68:	ldr	r2, [pc, #-612]	; 20b0c <__assert_fail@plt+0xfb48>
   20d6c:	sub	r6, r6, ip, lsl #1
   20d70:	ldr	r3, [pc, #-688]	; 20ac8 <__assert_fail@plt+0xfb04>
   20d74:	ldrsh	r1, [r6]
   20d78:	ldr	r2, [r0, r2]
   20d7c:	add	r3, pc, r3
   20d80:	add	lr, ip, ip, lsl #2
   20d84:	mov	r0, #1
   20d88:	sub	r7, r7, ip, lsl #4
   20d8c:	sub	fp, fp, lr, lsl #2
   20d90:	ldrsb	r9, [r3, r1]
   20d94:	strb	r0, [r2]
   20d98:	b	1fc74 <__assert_fail@plt+0xecb0>
   20d9c:	mov	r6, sl
   20da0:	mov	r4, #1
   20da4:	b	20174 <__assert_fail@plt+0xf1b0>
   20da8:	mov	r6, r9
   20dac:	mov	r4, #1
   20db0:	b	20180 <__assert_fail@plt+0xf1bc>
   20db4:	cmp	r3, #0
   20db8:	cmpeq	r2, #8
   20dbc:	moveq	r3, #8
   20dc0:	streq	r3, [sp, #52]	; 0x34
   20dc4:	moveq	r2, #4
   20dc8:	beq	1ff4c <__assert_fail@plt+0xef88>
   20dcc:	ldr	r2, [pc, #-776]	; 20acc <__assert_fail@plt+0xfb08>
   20dd0:	ldr	r1, [pc, #-776]	; 20ad0 <__assert_fail@plt+0xfb0c>
   20dd4:	add	r2, pc, r2
   20dd8:	add	r1, pc, r1
   20ddc:	sub	r0, fp, #20
   20de0:	bl	1b594 <__assert_fail@plt+0xa5d0>
   20de4:	mov	r2, #32
   20de8:	str	r2, [sp, #52]	; 0x34
   20dec:	ldr	r3, [pc, #-744]	; 20b0c <__assert_fail@plt+0xfb48>
   20df0:	ldr	r2, [sp, #72]	; 0x48
   20df4:	mov	r1, #1
   20df8:	ldr	r3, [r2, r3]
   20dfc:	mov	r2, #6
   20e00:	strb	r1, [r3]
   20e04:	b	1ff4c <__assert_fail@plt+0xef88>
   20e08:	mov	r1, r2
   20e0c:	bl	1a3b4 <__assert_fail@plt+0x93f0>
   20e10:	cmp	r0, #0
   20e14:	beq	20f50 <__assert_fail@plt+0xff8c>
   20e18:	ldr	r1, [r7]
   20e1c:	bl	199d0 <__assert_fail@plt+0x8a0c>
   20e20:	b	209b4 <__assert_fail@plt+0xf9f0>
   20e24:	ldr	r2, [pc, #-856]	; 20ad4 <__assert_fail@plt+0xfb10>
   20e28:	ldr	r1, [pc, #-856]	; 20ad8 <__assert_fail@plt+0xfb14>
   20e2c:	add	r2, pc, r2
   20e30:	add	r1, pc, r1
   20e34:	add	r0, sp, #204	; 0xcc
   20e38:	bl	1b594 <__assert_fail@plt+0xa5d0>
   20e3c:	ldr	r1, [sp, #72]	; 0x48
   20e40:	ldr	r2, [pc, #-828]	; 20b0c <__assert_fail@plt+0xfb48>
   20e44:	ldr	r3, [sp, #24]
   20e48:	mov	ip, #1
   20e4c:	ldr	r2, [r1, r2]
   20e50:	ldrd	r0, [sp, #80]	; 0x50
   20e54:	sub	r3, r3, #3552	; 0xde0
   20e58:	strb	ip, [r2]
   20e5c:	strd	r0, [r3]
   20e60:	b	1ff78 <__assert_fail@plt+0xefb4>
   20e64:	mov	r3, #32
   20e68:	str	r3, [sp, #52]	; 0x34
   20e6c:	mov	r2, #6
   20e70:	b	1ff4c <__assert_fail@plt+0xef88>
   20e74:	ldr	r2, [pc, #-928]	; 20adc <__assert_fail@plt+0xfb18>
   20e78:	ldr	r1, [pc, #-928]	; 20ae0 <__assert_fail@plt+0xfb1c>
   20e7c:	add	r2, pc, r2
   20e80:	add	r1, pc, r1
   20e84:	b	20e34 <__assert_fail@plt+0xfe70>
   20e88:	ldr	r2, [r7]
   20e8c:	mov	r3, #1
   20e90:	str	r2, [sp, #4]
   20e94:	str	r3, [sp]
   20e98:	add	r0, sp, #104	; 0x68
   20e9c:	ldm	r8, {r1, r2, r3}
   20ea0:	bl	15f88 <__assert_fail@plt+0x4fc4>
   20ea4:	ldr	r3, [sp, #24]
   20ea8:	sub	r3, r3, #3632	; 0xe30
   20eac:	ldm	r3, {r0, r1, r2}
   20eb0:	stm	r8, {r0, r1, r2}
   20eb4:	b	20768 <__assert_fail@plt+0xf7a4>
   20eb8:	ldr	r2, [pc, #-988]	; 20ae4 <__assert_fail@plt+0xfb20>
   20ebc:	ldr	r1, [pc, #-988]	; 20ae8 <__assert_fail@plt+0xfb24>
   20ec0:	ldr	r3, [r7, #-16]
   20ec4:	add	r2, pc, r2
   20ec8:	add	r1, pc, r1
   20ecc:	mov	r0, fp
   20ed0:	bl	1b594 <__assert_fail@plt+0xa5d0>
   20ed4:	ldr	r3, [pc, #-976]	; 20b0c <__assert_fail@plt+0xfb48>
   20ed8:	ldr	r1, [sp, #72]	; 0x48
   20edc:	mov	r2, #1
   20ee0:	ldr	r3, [r1, r3]
   20ee4:	strb	r2, [r3]
   20ee8:	b	209dc <__assert_fail@plt+0xfa18>
   20eec:	ldr	r2, [pc, #-1032]	; 20aec <__assert_fail@plt+0xfb28>
   20ef0:	ldr	r1, [pc, #-1032]	; 20af0 <__assert_fail@plt+0xfb2c>
   20ef4:	ldr	r3, [r7, #-16]
   20ef8:	add	r2, pc, r2
   20efc:	add	r1, pc, r1
   20f00:	sub	r0, fp, #20
   20f04:	bl	1b594 <__assert_fail@plt+0xa5d0>
   20f08:	ldr	r3, [pc, #-1028]	; 20b0c <__assert_fail@plt+0xfb48>
   20f0c:	ldr	r1, [sp, #72]	; 0x48
   20f10:	mov	r2, #1
   20f14:	ldr	r3, [r1, r3]
   20f18:	strb	r2, [r3]
   20f1c:	b	20300 <__assert_fail@plt+0xf33c>
   20f20:	ldr	r2, [pc, #-1076]	; 20af4 <__assert_fail@plt+0xfb30>
   20f24:	ldr	r1, [pc, #-1076]	; 20af8 <__assert_fail@plt+0xfb34>
   20f28:	ldr	r3, [r7, #-16]
   20f2c:	add	r2, pc, r2
   20f30:	add	r1, pc, r1
   20f34:	b	20f00 <__assert_fail@plt+0xff3c>
   20f38:	ldr	r2, [pc, #-1092]	; 20afc <__assert_fail@plt+0xfb38>
   20f3c:	ldr	r1, [pc, #-1092]	; 20b00 <__assert_fail@plt+0xfb3c>
   20f40:	ldr	r3, [r7, #-16]
   20f44:	add	r2, pc, r2
   20f48:	add	r1, pc, r1
   20f4c:	b	20f00 <__assert_fail@plt+0xff3c>
   20f50:	ldr	r2, [pc, #-1108]	; 20b04 <__assert_fail@plt+0xfb40>
   20f54:	ldr	r1, [pc, #-1108]	; 20b08 <__assert_fail@plt+0xfb44>
   20f58:	ldr	r3, [r7, #-16]
   20f5c:	add	r2, pc, r2
   20f60:	add	r1, pc, r1
   20f64:	sub	r0, fp, #20
   20f68:	bl	1b594 <__assert_fail@plt+0xa5d0>
   20f6c:	ldr	r3, [pc, #-1128]	; 20b0c <__assert_fail@plt+0xfb48>
   20f70:	ldr	r1, [sp, #72]	; 0x48
   20f74:	mov	r2, #1
   20f78:	ldr	r3, [r1, r3]
   20f7c:	strb	r2, [r3]
   20f80:	b	209b4 <__assert_fail@plt+0xf9f0>
   20f84:	mov	r3, #16
   20f88:	str	r3, [sp, #52]	; 0x34
   20f8c:	mov	r2, #5
   20f90:	b	1ff4c <__assert_fail@plt+0xef88>
   20f94:	bl	10d9c <__stack_chk_fail@plt>
   20f98:	bl	10e8c <__errno_location@plt>
   20f9c:	ldrd	r4, [r7, #-48]	; 0xffffffd0
   20fa0:	ldr	r6, [r7, #-76]	; 0xffffffb4
   20fa4:	ldr	r0, [r0]
   20fa8:	bl	10e14 <strerror@plt>
   20fac:	str	r6, [sp]
   20fb0:	mov	r2, r4
   20fb4:	mov	r3, r5
   20fb8:	str	r0, [sp, #4]
   20fbc:	ldr	r0, [pc, #-1204]	; 20b10 <__assert_fail@plt+0xfb4c>
   20fc0:	add	r0, pc, r0
   20fc4:	bl	1f98c <__assert_fail@plt+0xe9c8>
   20fc8:	subs	r2, r1, #1
   20fcc:	bxeq	lr
   20fd0:	bcc	211a8 <__assert_fail@plt+0x101e4>
   20fd4:	cmp	r0, r1
   20fd8:	bls	2118c <__assert_fail@plt+0x101c8>
   20fdc:	tst	r1, r2
   20fe0:	beq	21198 <__assert_fail@plt+0x101d4>
   20fe4:	clz	r3, r0
   20fe8:	clz	r2, r1
   20fec:	sub	r3, r2, r3
   20ff0:	rsbs	r3, r3, #31
   20ff4:	addne	r3, r3, r3, lsl #1
   20ff8:	mov	r2, #0
   20ffc:	addne	pc, pc, r3, lsl #2
   21000:	nop			; (mov r0, r0)
   21004:	cmp	r0, r1, lsl #31
   21008:	adc	r2, r2, r2
   2100c:	subcs	r0, r0, r1, lsl #31
   21010:	cmp	r0, r1, lsl #30
   21014:	adc	r2, r2, r2
   21018:	subcs	r0, r0, r1, lsl #30
   2101c:	cmp	r0, r1, lsl #29
   21020:	adc	r2, r2, r2
   21024:	subcs	r0, r0, r1, lsl #29
   21028:	cmp	r0, r1, lsl #28
   2102c:	adc	r2, r2, r2
   21030:	subcs	r0, r0, r1, lsl #28
   21034:	cmp	r0, r1, lsl #27
   21038:	adc	r2, r2, r2
   2103c:	subcs	r0, r0, r1, lsl #27
   21040:	cmp	r0, r1, lsl #26
   21044:	adc	r2, r2, r2
   21048:	subcs	r0, r0, r1, lsl #26
   2104c:	cmp	r0, r1, lsl #25
   21050:	adc	r2, r2, r2
   21054:	subcs	r0, r0, r1, lsl #25
   21058:	cmp	r0, r1, lsl #24
   2105c:	adc	r2, r2, r2
   21060:	subcs	r0, r0, r1, lsl #24
   21064:	cmp	r0, r1, lsl #23
   21068:	adc	r2, r2, r2
   2106c:	subcs	r0, r0, r1, lsl #23
   21070:	cmp	r0, r1, lsl #22
   21074:	adc	r2, r2, r2
   21078:	subcs	r0, r0, r1, lsl #22
   2107c:	cmp	r0, r1, lsl #21
   21080:	adc	r2, r2, r2
   21084:	subcs	r0, r0, r1, lsl #21
   21088:	cmp	r0, r1, lsl #20
   2108c:	adc	r2, r2, r2
   21090:	subcs	r0, r0, r1, lsl #20
   21094:	cmp	r0, r1, lsl #19
   21098:	adc	r2, r2, r2
   2109c:	subcs	r0, r0, r1, lsl #19
   210a0:	cmp	r0, r1, lsl #18
   210a4:	adc	r2, r2, r2
   210a8:	subcs	r0, r0, r1, lsl #18
   210ac:	cmp	r0, r1, lsl #17
   210b0:	adc	r2, r2, r2
   210b4:	subcs	r0, r0, r1, lsl #17
   210b8:	cmp	r0, r1, lsl #16
   210bc:	adc	r2, r2, r2
   210c0:	subcs	r0, r0, r1, lsl #16
   210c4:	cmp	r0, r1, lsl #15
   210c8:	adc	r2, r2, r2
   210cc:	subcs	r0, r0, r1, lsl #15
   210d0:	cmp	r0, r1, lsl #14
   210d4:	adc	r2, r2, r2
   210d8:	subcs	r0, r0, r1, lsl #14
   210dc:	cmp	r0, r1, lsl #13
   210e0:	adc	r2, r2, r2
   210e4:	subcs	r0, r0, r1, lsl #13
   210e8:	cmp	r0, r1, lsl #12
   210ec:	adc	r2, r2, r2
   210f0:	subcs	r0, r0, r1, lsl #12
   210f4:	cmp	r0, r1, lsl #11
   210f8:	adc	r2, r2, r2
   210fc:	subcs	r0, r0, r1, lsl #11
   21100:	cmp	r0, r1, lsl #10
   21104:	adc	r2, r2, r2
   21108:	subcs	r0, r0, r1, lsl #10
   2110c:	cmp	r0, r1, lsl #9
   21110:	adc	r2, r2, r2
   21114:	subcs	r0, r0, r1, lsl #9
   21118:	cmp	r0, r1, lsl #8
   2111c:	adc	r2, r2, r2
   21120:	subcs	r0, r0, r1, lsl #8
   21124:	cmp	r0, r1, lsl #7
   21128:	adc	r2, r2, r2
   2112c:	subcs	r0, r0, r1, lsl #7
   21130:	cmp	r0, r1, lsl #6
   21134:	adc	r2, r2, r2
   21138:	subcs	r0, r0, r1, lsl #6
   2113c:	cmp	r0, r1, lsl #5
   21140:	adc	r2, r2, r2
   21144:	subcs	r0, r0, r1, lsl #5
   21148:	cmp	r0, r1, lsl #4
   2114c:	adc	r2, r2, r2
   21150:	subcs	r0, r0, r1, lsl #4
   21154:	cmp	r0, r1, lsl #3
   21158:	adc	r2, r2, r2
   2115c:	subcs	r0, r0, r1, lsl #3
   21160:	cmp	r0, r1, lsl #2
   21164:	adc	r2, r2, r2
   21168:	subcs	r0, r0, r1, lsl #2
   2116c:	cmp	r0, r1, lsl #1
   21170:	adc	r2, r2, r2
   21174:	subcs	r0, r0, r1, lsl #1
   21178:	cmp	r0, r1
   2117c:	adc	r2, r2, r2
   21180:	subcs	r0, r0, r1
   21184:	mov	r0, r2
   21188:	bx	lr
   2118c:	moveq	r0, #1
   21190:	movne	r0, #0
   21194:	bx	lr
   21198:	clz	r2, r1
   2119c:	rsb	r2, r2, #31
   211a0:	lsr	r0, r0, r2
   211a4:	bx	lr
   211a8:	cmp	r0, #0
   211ac:	mvnne	r0, #0
   211b0:	b	21450 <__assert_fail@plt+0x1048c>
   211b4:	cmp	r1, #0
   211b8:	beq	211a8 <__assert_fail@plt+0x101e4>
   211bc:	push	{r0, r1, lr}
   211c0:	bl	20fc8 <__assert_fail@plt+0x10004>
   211c4:	pop	{r1, r2, lr}
   211c8:	mul	r3, r2, r0
   211cc:	sub	r1, r1, r3
   211d0:	bx	lr
   211d4:	cmp	r1, #0
   211d8:	beq	213e4 <__assert_fail@plt+0x10420>
   211dc:	eor	ip, r0, r1
   211e0:	rsbmi	r1, r1, #0
   211e4:	subs	r2, r1, #1
   211e8:	beq	213b0 <__assert_fail@plt+0x103ec>
   211ec:	movs	r3, r0
   211f0:	rsbmi	r3, r0, #0
   211f4:	cmp	r3, r1
   211f8:	bls	213bc <__assert_fail@plt+0x103f8>
   211fc:	tst	r1, r2
   21200:	beq	213cc <__assert_fail@plt+0x10408>
   21204:	clz	r2, r3
   21208:	clz	r0, r1
   2120c:	sub	r2, r0, r2
   21210:	rsbs	r2, r2, #31
   21214:	addne	r2, r2, r2, lsl #1
   21218:	mov	r0, #0
   2121c:	addne	pc, pc, r2, lsl #2
   21220:	nop			; (mov r0, r0)
   21224:	cmp	r3, r1, lsl #31
   21228:	adc	r0, r0, r0
   2122c:	subcs	r3, r3, r1, lsl #31
   21230:	cmp	r3, r1, lsl #30
   21234:	adc	r0, r0, r0
   21238:	subcs	r3, r3, r1, lsl #30
   2123c:	cmp	r3, r1, lsl #29
   21240:	adc	r0, r0, r0
   21244:	subcs	r3, r3, r1, lsl #29
   21248:	cmp	r3, r1, lsl #28
   2124c:	adc	r0, r0, r0
   21250:	subcs	r3, r3, r1, lsl #28
   21254:	cmp	r3, r1, lsl #27
   21258:	adc	r0, r0, r0
   2125c:	subcs	r3, r3, r1, lsl #27
   21260:	cmp	r3, r1, lsl #26
   21264:	adc	r0, r0, r0
   21268:	subcs	r3, r3, r1, lsl #26
   2126c:	cmp	r3, r1, lsl #25
   21270:	adc	r0, r0, r0
   21274:	subcs	r3, r3, r1, lsl #25
   21278:	cmp	r3, r1, lsl #24
   2127c:	adc	r0, r0, r0
   21280:	subcs	r3, r3, r1, lsl #24
   21284:	cmp	r3, r1, lsl #23
   21288:	adc	r0, r0, r0
   2128c:	subcs	r3, r3, r1, lsl #23
   21290:	cmp	r3, r1, lsl #22
   21294:	adc	r0, r0, r0
   21298:	subcs	r3, r3, r1, lsl #22
   2129c:	cmp	r3, r1, lsl #21
   212a0:	adc	r0, r0, r0
   212a4:	subcs	r3, r3, r1, lsl #21
   212a8:	cmp	r3, r1, lsl #20
   212ac:	adc	r0, r0, r0
   212b0:	subcs	r3, r3, r1, lsl #20
   212b4:	cmp	r3, r1, lsl #19
   212b8:	adc	r0, r0, r0
   212bc:	subcs	r3, r3, r1, lsl #19
   212c0:	cmp	r3, r1, lsl #18
   212c4:	adc	r0, r0, r0
   212c8:	subcs	r3, r3, r1, lsl #18
   212cc:	cmp	r3, r1, lsl #17
   212d0:	adc	r0, r0, r0
   212d4:	subcs	r3, r3, r1, lsl #17
   212d8:	cmp	r3, r1, lsl #16
   212dc:	adc	r0, r0, r0
   212e0:	subcs	r3, r3, r1, lsl #16
   212e4:	cmp	r3, r1, lsl #15
   212e8:	adc	r0, r0, r0
   212ec:	subcs	r3, r3, r1, lsl #15
   212f0:	cmp	r3, r1, lsl #14
   212f4:	adc	r0, r0, r0
   212f8:	subcs	r3, r3, r1, lsl #14
   212fc:	cmp	r3, r1, lsl #13
   21300:	adc	r0, r0, r0
   21304:	subcs	r3, r3, r1, lsl #13
   21308:	cmp	r3, r1, lsl #12
   2130c:	adc	r0, r0, r0
   21310:	subcs	r3, r3, r1, lsl #12
   21314:	cmp	r3, r1, lsl #11
   21318:	adc	r0, r0, r0
   2131c:	subcs	r3, r3, r1, lsl #11
   21320:	cmp	r3, r1, lsl #10
   21324:	adc	r0, r0, r0
   21328:	subcs	r3, r3, r1, lsl #10
   2132c:	cmp	r3, r1, lsl #9
   21330:	adc	r0, r0, r0
   21334:	subcs	r3, r3, r1, lsl #9
   21338:	cmp	r3, r1, lsl #8
   2133c:	adc	r0, r0, r0
   21340:	subcs	r3, r3, r1, lsl #8
   21344:	cmp	r3, r1, lsl #7
   21348:	adc	r0, r0, r0
   2134c:	subcs	r3, r3, r1, lsl #7
   21350:	cmp	r3, r1, lsl #6
   21354:	adc	r0, r0, r0
   21358:	subcs	r3, r3, r1, lsl #6
   2135c:	cmp	r3, r1, lsl #5
   21360:	adc	r0, r0, r0
   21364:	subcs	r3, r3, r1, lsl #5
   21368:	cmp	r3, r1, lsl #4
   2136c:	adc	r0, r0, r0
   21370:	subcs	r3, r3, r1, lsl #4
   21374:	cmp	r3, r1, lsl #3
   21378:	adc	r0, r0, r0
   2137c:	subcs	r3, r3, r1, lsl #3
   21380:	cmp	r3, r1, lsl #2
   21384:	adc	r0, r0, r0
   21388:	subcs	r3, r3, r1, lsl #2
   2138c:	cmp	r3, r1, lsl #1
   21390:	adc	r0, r0, r0
   21394:	subcs	r3, r3, r1, lsl #1
   21398:	cmp	r3, r1
   2139c:	adc	r0, r0, r0
   213a0:	subcs	r3, r3, r1
   213a4:	cmp	ip, #0
   213a8:	rsbmi	r0, r0, #0
   213ac:	bx	lr
   213b0:	teq	ip, r0
   213b4:	rsbmi	r0, r0, #0
   213b8:	bx	lr
   213bc:	movcc	r0, #0
   213c0:	asreq	r0, ip, #31
   213c4:	orreq	r0, r0, #1
   213c8:	bx	lr
   213cc:	clz	r2, r1
   213d0:	rsb	r2, r2, #31
   213d4:	cmp	ip, #0
   213d8:	lsr	r0, r3, r2
   213dc:	rsbmi	r0, r0, #0
   213e0:	bx	lr
   213e4:	cmp	r0, #0
   213e8:	mvngt	r0, #-2147483648	; 0x80000000
   213ec:	movlt	r0, #-2147483648	; 0x80000000
   213f0:	b	21450 <__assert_fail@plt+0x1048c>
   213f4:	cmp	r1, #0
   213f8:	beq	213e4 <__assert_fail@plt+0x10420>
   213fc:	push	{r0, r1, lr}
   21400:	bl	211dc <__assert_fail@plt+0x10218>
   21404:	pop	{r1, r2, lr}
   21408:	mul	r3, r2, r0
   2140c:	sub	r1, r1, r3
   21410:	bx	lr
   21414:	cmp	r3, #0
   21418:	cmpeq	r2, #0
   2141c:	bne	21434 <__assert_fail@plt+0x10470>
   21420:	cmp	r1, #0
   21424:	cmpeq	r0, #0
   21428:	mvnne	r1, #0
   2142c:	mvnne	r0, #0
   21430:	b	21450 <__assert_fail@plt+0x1048c>
   21434:	sub	sp, sp, #8
   21438:	push	{sp, lr}
   2143c:	bl	21460 <__assert_fail@plt+0x1049c>
   21440:	ldr	lr, [sp, #4]
   21444:	add	sp, sp, #8
   21448:	pop	{r2, r3}
   2144c:	bx	lr
   21450:	push	{r1, lr}
   21454:	mov	r0, #8
   21458:	bl	10d18 <raise@plt>
   2145c:	pop	{r1, pc}
   21460:	cmp	r1, r3
   21464:	cmpeq	r0, r2
   21468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2146c:	mov	r4, r0
   21470:	movcc	r0, #0
   21474:	mov	r5, r1
   21478:	ldr	lr, [sp, #36]	; 0x24
   2147c:	movcc	r1, r0
   21480:	bcc	2157c <__assert_fail@plt+0x105b8>
   21484:	cmp	r3, #0
   21488:	clzeq	ip, r2
   2148c:	clzne	ip, r3
   21490:	addeq	ip, ip, #32
   21494:	cmp	r5, #0
   21498:	clzeq	r1, r4
   2149c:	addeq	r1, r1, #32
   214a0:	clzne	r1, r5
   214a4:	sub	ip, ip, r1
   214a8:	sub	sl, ip, #32
   214ac:	lsl	r9, r3, ip
   214b0:	rsb	fp, ip, #32
   214b4:	orr	r9, r9, r2, lsl sl
   214b8:	orr	r9, r9, r2, lsr fp
   214bc:	lsl	r8, r2, ip
   214c0:	cmp	r5, r9
   214c4:	cmpeq	r4, r8
   214c8:	movcc	r0, #0
   214cc:	movcc	r1, r0
   214d0:	bcc	214ec <__assert_fail@plt+0x10528>
   214d4:	mov	r0, #1
   214d8:	subs	r4, r4, r8
   214dc:	lsl	r1, r0, sl
   214e0:	orr	r1, r1, r0, lsr fp
   214e4:	lsl	r0, r0, ip
   214e8:	sbc	r5, r5, r9
   214ec:	cmp	ip, #0
   214f0:	beq	2157c <__assert_fail@plt+0x105b8>
   214f4:	lsr	r6, r8, #1
   214f8:	orr	r6, r6, r9, lsl #31
   214fc:	lsr	r7, r9, #1
   21500:	mov	r2, ip
   21504:	b	21528 <__assert_fail@plt+0x10564>
   21508:	subs	r3, r4, r6
   2150c:	sbc	r8, r5, r7
   21510:	adds	r3, r3, r3
   21514:	adc	r8, r8, r8
   21518:	adds	r4, r3, #1
   2151c:	adc	r5, r8, #0
   21520:	subs	r2, r2, #1
   21524:	beq	21544 <__assert_fail@plt+0x10580>
   21528:	cmp	r5, r7
   2152c:	cmpeq	r4, r6
   21530:	bcs	21508 <__assert_fail@plt+0x10544>
   21534:	adds	r4, r4, r4
   21538:	adc	r5, r5, r5
   2153c:	subs	r2, r2, #1
   21540:	bne	21528 <__assert_fail@plt+0x10564>
   21544:	lsr	r3, r4, ip
   21548:	orr	r3, r3, r5, lsl fp
   2154c:	lsr	r2, r5, ip
   21550:	orr	r3, r3, r5, lsr sl
   21554:	adds	r0, r0, r4
   21558:	mov	r4, r3
   2155c:	lsl	r3, r2, ip
   21560:	orr	r3, r3, r4, lsl sl
   21564:	lsl	ip, r4, ip
   21568:	orr	r3, r3, r4, lsr fp
   2156c:	adc	r1, r1, r5
   21570:	subs	r0, r0, ip
   21574:	mov	r5, r2
   21578:	sbc	r1, r1, r3
   2157c:	cmp	lr, #0
   21580:	strdne	r4, [lr]
   21584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21588:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2158c:	mov	r7, r0
   21590:	ldr	r6, [pc, #72]	; 215e0 <__assert_fail@plt+0x1061c>
   21594:	ldr	r5, [pc, #72]	; 215e4 <__assert_fail@plt+0x10620>
   21598:	add	r6, pc, r6
   2159c:	add	r5, pc, r5
   215a0:	sub	r6, r6, r5
   215a4:	mov	r8, r1
   215a8:	mov	r9, r2
   215ac:	bl	10ce0 <calloc@plt-0x20>
   215b0:	asrs	r6, r6, #2
   215b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   215b8:	mov	r4, #0
   215bc:	add	r4, r4, #1
   215c0:	ldr	r3, [r5], #4
   215c4:	mov	r2, r9
   215c8:	mov	r1, r8
   215cc:	mov	r0, r7
   215d0:	blx	r3
   215d4:	cmp	r6, r4
   215d8:	bne	215bc <__assert_fail@plt+0x105f8>
   215dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   215e0:	ldrdeq	r5, [r1], -r4
   215e4:	andeq	r5, r1, ip, asr #9
   215e8:	bx	lr

Disassembly of section .fini:

000215ec <.fini>:
   215ec:	push	{r3, lr}
   215f0:	pop	{r3, pc}
