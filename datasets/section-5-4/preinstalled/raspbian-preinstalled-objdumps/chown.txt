
raspbian-preinstalled/chown:     file format elf32-littlearm


Disassembly of section .init:

00011110 <.init>:
   11110:	push	{r3, lr}
   11114:	bl	119f0 <__assert_fail@plt+0x560>
   11118:	pop	{r3, pc}

Disassembly of section .plt:

0001111c <fstatfs64@plt-0x14>:
   1111c:	push	{lr}		; (str lr, [sp, #-4]!)
   11120:	ldr	lr, [pc, #4]	; 1112c <fstatfs64@plt-0x4>
   11124:	add	lr, pc, lr
   11128:	ldr	pc, [lr, #8]!
   1112c:	ldrdeq	sl, [r1], -r4

00011130 <fstatfs64@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #106496	; 0x1a000
   11138:	ldr	pc, [ip, #3796]!	; 0xed4

0001113c <calloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #106496	; 0x1a000
   11144:	ldr	pc, [ip, #3788]!	; 0xecc

00011148 <endgrent@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #106496	; 0x1a000
   11150:	ldr	pc, [ip, #3780]!	; 0xec4

00011154 <fputs_unlocked@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #106496	; 0x1a000
   1115c:	ldr	pc, [ip, #3772]!	; 0xebc

00011160 <raise@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #106496	; 0x1a000
   11168:	ldr	pc, [ip, #3764]!	; 0xeb4

0001116c <getpwnam@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #106496	; 0x1a000
   11174:	ldr	pc, [ip, #3756]!	; 0xeac

00011178 <strcmp@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #106496	; 0x1a000
   11180:	ldr	pc, [ip, #3748]!	; 0xea4

00011184 <getpwuid@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #106496	; 0x1a000
   1118c:	ldr	pc, [ip, #3740]!	; 0xe9c

00011190 <fflush@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #106496	; 0x1a000
   11198:	ldr	pc, [ip, #3732]!	; 0xe94

0001119c <memmove@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #106496	; 0x1a000
   111a4:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a8 <free@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #106496	; 0x1a000
   111b0:	ldr	pc, [ip, #3716]!	; 0xe84

000111b4 <__openat64_2@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #106496	; 0x1a000
   111bc:	ldr	pc, [ip, #3708]!	; 0xe7c

000111c0 <_exit@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #106496	; 0x1a000
   111c8:	ldr	pc, [ip, #3700]!	; 0xe74

000111cc <memcpy@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #106496	; 0x1a000
   111d4:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d8 <mbsinit@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3684]!	; 0xe64

000111e4 <memcmp@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3676]!	; 0xe5c

000111f0 <stpcpy@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3668]!	; 0xe54

000111fc <dcgettext@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3660]!	; 0xe4c

00011208 <__stack_chk_fail@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3652]!	; 0xe44

00011214 <realloc@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011220 <textdomain@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3636]!	; 0xe34

0001122c <__fxstatat64@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3628]!	; 0xe2c

00011238 <iswprint@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3620]!	; 0xe24

00011244 <__fxstat64@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3612]!	; 0xe1c

00011250 <fwrite@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3604]!	; 0xe14

0001125c <lseek64@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3596]!	; 0xe0c

00011268 <__ctype_get_mb_cur_max@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3588]!	; 0xe04

00011274 <strcpy@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3580]!	; 0xdfc

00011280 <__fpending@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3572]!	; 0xdf4

0001128c <mbrtowc@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3564]!	; 0xdec

00011298 <error@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3556]!	; 0xde4

000112a4 <open64@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3548]!	; 0xddc

000112b0 <malloc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3540]!	; 0xdd4

000112bc <__libc_start_main@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c8 <__freading@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d4 <__gmon_start__@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3516]!	; 0xdbc

000112e0 <getopt_long@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3508]!	; 0xdb4

000112ec <__ctype_b_loc@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3500]!	; 0xdac

000112f8 <exit@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3492]!	; 0xda4

00011304 <strtoul@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3484]!	; 0xd9c

00011310 <strlen@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3476]!	; 0xd94

0001131c <strchr@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3468]!	; 0xd8c

00011328 <openat64@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3460]!	; 0xd84

00011334 <fchown@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3452]!	; 0xd7c

00011340 <__errno_location@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3444]!	; 0xd74

0001134c <__cxa_atexit@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3436]!	; 0xd6c

00011358 <memset@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3428]!	; 0xd64

00011364 <__printf_chk@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3420]!	; 0xd5c

00011370 <fileno@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3412]!	; 0xd54

0001137c <__fprintf_chk@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3404]!	; 0xd4c

00011388 <fclose@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3396]!	; 0xd44

00011394 <fseeko64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3388]!	; 0xd3c

000113a0 <fcntl64@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3380]!	; 0xd34

000113ac <setlocale@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b8 <endpwent@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3364]!	; 0xd24

000113c4 <strrchr@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3356]!	; 0xd1c

000113d0 <nl_langinfo@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3348]!	; 0xd14

000113dc <readdir64@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e8 <fdopendir@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3332]!	; 0xd04

000113f4 <dirfd@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3324]!	; 0xcfc

00011400 <fchdir@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3316]!	; 0xcf4

0001140c <qsort@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3308]!	; 0xcec

00011418 <fchownat@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3300]!	; 0xce4

00011424 <bindtextdomain@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3292]!	; 0xcdc

00011430 <__xstat64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3284]!	; 0xcd4

0001143c <strncmp@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3276]!	; 0xccc

00011448 <abort@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3268]!	; 0xcc4

00011454 <close@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3260]!	; 0xcbc

00011460 <__lxstat64@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3252]!	; 0xcb4

0001146c <closedir@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3244]!	; 0xcac

00011478 <getgrgid@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3236]!	; 0xca4

00011484 <getgrnam@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3228]!	; 0xc9c

00011490 <__assert_fail@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3220]!	; 0xc94

Disassembly of section .text:

000114a0 <fts_open@@Base-0x6418>:
   114a0:	ldr	r3, [pc, #1192]	; 11950 <__assert_fail@plt+0x4c0>
   114a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a8:	sub	sp, sp, #180	; 0xb4
   114ac:	ldr	r3, [r3]
   114b0:	mvn	r5, #0
   114b4:	mov	r8, r0
   114b8:	ldr	r0, [r1]
   114bc:	str	r3, [sp, #172]	; 0xac
   114c0:	mov	r7, r1
   114c4:	str	r5, [sp, #24]
   114c8:	str	r5, [sp, #28]
   114cc:	str	r5, [sp, #32]
   114d0:	str	r5, [sp, #36]	; 0x24
   114d4:	bl	12e64 <__assert_fail@plt+0x19d4>
   114d8:	ldr	r1, [pc, #1140]	; 11954 <__assert_fail@plt+0x4c4>
   114dc:	mov	r0, #6
   114e0:	bl	113ac <setlocale@plt>
   114e4:	ldr	r1, [pc, #1132]	; 11958 <__assert_fail@plt+0x4c8>
   114e8:	ldr	r0, [pc, #1132]	; 1195c <__assert_fail@plt+0x4cc>
   114ec:	bl	11424 <bindtextdomain@plt>
   114f0:	ldr	r0, [pc, #1124]	; 1195c <__assert_fail@plt+0x4cc>
   114f4:	bl	11220 <textdomain@plt>
   114f8:	ldr	sl, [pc, #1120]	; 11960 <__assert_fail@plt+0x4d0>
   114fc:	ldr	r0, [pc, #1120]	; 11964 <__assert_fail@plt+0x4d4>
   11500:	ldr	r9, [pc, #1120]	; 11968 <__assert_fail@plt+0x4d8>
   11504:	ldr	fp, [pc, #1120]	; 1196c <__assert_fail@plt+0x4dc>
   11508:	bl	1a27c <fts_children@@Base+0x1d2c>
   1150c:	mov	r6, #16
   11510:	add	r0, sp, #40	; 0x28
   11514:	bl	11f28 <__assert_fail@plt+0xa98>
   11518:	mov	r3, #0
   1151c:	str	r3, [sp, #20]
   11520:	mov	r4, #0
   11524:	str	r4, [sp]
   11528:	mov	r3, sl
   1152c:	mov	r2, r9
   11530:	mov	r1, r7
   11534:	mov	r0, r8
   11538:	bl	112e0 <getopt_long@plt>
   1153c:	cmn	r0, #1
   11540:	beq	116d0 <__assert_fail@plt+0x240>
   11544:	cmp	r0, #102	; 0x66
   11548:	beq	116bc <__assert_fail@plt+0x22c>
   1154c:	ble	11574 <__assert_fail@plt+0xe4>
   11550:	cmp	r0, fp
   11554:	beq	11664 <__assert_fail@plt+0x1d4>
   11558:	bgt	115ac <__assert_fail@plt+0x11c>
   1155c:	cmp	r0, #118	; 0x76
   11560:	beq	116c8 <__assert_fail@plt+0x238>
   11564:	cmp	r0, #256	; 0x100
   11568:	bne	1159c <__assert_fail@plt+0x10c>
   1156c:	mov	r5, #1
   11570:	b	11520 <__assert_fail@plt+0x90>
   11574:	cmp	r0, #76	; 0x4c
   11578:	beq	1165c <__assert_fail@plt+0x1cc>
   1157c:	ble	115d4 <__assert_fail@plt+0x144>
   11580:	cmp	r0, #82	; 0x52
   11584:	beq	116b0 <__assert_fail@plt+0x220>
   11588:	cmp	r0, #99	; 0x63
   1158c:	bne	115c4 <__assert_fail@plt+0x134>
   11590:	mov	r3, #1
   11594:	str	r3, [sp, #40]	; 0x28
   11598:	b	11520 <__assert_fail@plt+0x90>
   1159c:	cmp	r0, #104	; 0x68
   115a0:	beq	11648 <__assert_fail@plt+0x1b8>
   115a4:	mov	r0, #1
   115a8:	bl	11aa4 <__assert_fail@plt+0x614>
   115ac:	ldr	r3, [pc, #956]	; 11970 <__assert_fail@plt+0x4e0>
   115b0:	cmp	r0, r3
   115b4:	beq	11650 <__assert_fail@plt+0x1c0>
   115b8:	bge	115ec <__assert_fail@plt+0x15c>
   115bc:	str	r4, [sp, #20]
   115c0:	b	11520 <__assert_fail@plt+0x90>
   115c4:	cmp	r0, #80	; 0x50
   115c8:	bne	115a4 <__assert_fail@plt+0x114>
   115cc:	mov	r6, #16
   115d0:	b	11520 <__assert_fail@plt+0x90>
   115d4:	cmn	r0, #2
   115d8:	beq	1189c <__assert_fail@plt+0x40c>
   115dc:	cmp	r0, #72	; 0x48
   115e0:	bne	11608 <__assert_fail@plt+0x178>
   115e4:	mov	r6, #17
   115e8:	b	11520 <__assert_fail@plt+0x90>
   115ec:	cmp	r0, #260	; 0x104
   115f0:	bne	115a4 <__assert_fail@plt+0x114>
   115f4:	ldr	r3, [pc, #888]	; 11974 <__assert_fail@plt+0x4e4>
   115f8:	ldr	r2, [pc, #888]	; 11978 <__assert_fail@plt+0x4e8>
   115fc:	ldr	r3, [r3]
   11600:	str	r3, [r2]
   11604:	b	11520 <__assert_fail@plt+0x90>
   11608:	cmn	r0, #3
   1160c:	bne	115a4 <__assert_fail@plt+0x114>
   11610:	ldr	r3, [pc, #868]	; 1197c <__assert_fail@plt+0x4ec>
   11614:	ldr	r0, [pc, #868]	; 11980 <__assert_fail@plt+0x4f0>
   11618:	ldr	r1, [pc, #868]	; 11984 <__assert_fail@plt+0x4f4>
   1161c:	ldr	r2, [pc, #868]	; 11988 <__assert_fail@plt+0x4f8>
   11620:	str	r4, [sp, #8]
   11624:	ldr	r0, [r0]
   11628:	ldr	r3, [r3]
   1162c:	str	r1, [sp, #4]
   11630:	str	r2, [sp]
   11634:	ldr	r1, [pc, #848]	; 1198c <__assert_fail@plt+0x4fc>
   11638:	ldr	r2, [pc, #848]	; 11990 <__assert_fail@plt+0x500>
   1163c:	bl	15964 <__assert_fail@plt+0x44d4>
   11640:	mov	r0, r4
   11644:	bl	112f8 <exit@plt>
   11648:	mov	r5, r4
   1164c:	b	11520 <__assert_fail@plt+0x90>
   11650:	mov	r3, #1
   11654:	str	r3, [sp, #20]
   11658:	b	11520 <__assert_fail@plt+0x90>
   1165c:	mov	r6, #2
   11660:	b	11520 <__assert_fail@plt+0x90>
   11664:	ldr	r0, [pc, #776]	; 11974 <__assert_fail@plt+0x4e4>
   11668:	str	r4, [sp]
   1166c:	mov	r3, r4
   11670:	add	r2, sp, #36	; 0x24
   11674:	add	r1, sp, #32
   11678:	ldr	r0, [r0]
   1167c:	bl	15448 <__assert_fail@plt+0x3fb8>
   11680:	cmp	r0, #0
   11684:	beq	11520 <__assert_fail@plt+0x90>
   11688:	ldr	r3, [pc, #740]	; 11974 <__assert_fail@plt+0x4e4>
   1168c:	str	r0, [sp, #20]
   11690:	ldr	r0, [r3]
   11694:	bl	150c8 <__assert_fail@plt+0x3c38>
   11698:	ldr	r3, [sp, #20]
   1169c:	mov	r1, r4
   116a0:	ldr	r2, [pc, #748]	; 11994 <__assert_fail@plt+0x504>
   116a4:	str	r0, [sp]
   116a8:	mov	r0, #1
   116ac:	bl	11298 <error@plt>
   116b0:	mov	r3, #1
   116b4:	strb	r3, [sp, #44]	; 0x2c
   116b8:	b	11520 <__assert_fail@plt+0x90>
   116bc:	mov	r3, #1
   116c0:	strb	r3, [sp, #53]	; 0x35
   116c4:	b	11520 <__assert_fail@plt+0x90>
   116c8:	str	r4, [sp, #40]	; 0x28
   116cc:	b	11520 <__assert_fail@plt+0x90>
   116d0:	ldrb	r3, [sp, #44]	; 0x2c
   116d4:	cmp	r3, r4
   116d8:	bne	117b0 <__assert_fail@plt+0x320>
   116dc:	mov	r6, #16
   116e0:	ldr	r3, [pc, #656]	; 11978 <__assert_fail@plt+0x4e8>
   116e4:	ldr	r4, [pc, #684]	; 11998 <__assert_fail@plt+0x508>
   116e8:	adds	r5, r5, #0
   116ec:	ldr	r9, [r3]
   116f0:	ldr	r3, [r4]
   116f4:	movne	r5, #1
   116f8:	cmp	r9, #0
   116fc:	strb	r5, [sp, #52]	; 0x34
   11700:	sub	r2, r8, r3
   11704:	beq	117e4 <__assert_fail@plt+0x354>
   11708:	cmp	r2, #0
   1170c:	ble	118f0 <__assert_fail@plt+0x460>
   11710:	add	r2, sp, #64	; 0x40
   11714:	mov	r1, r9
   11718:	mov	r0, #3
   1171c:	bl	11430 <__xstat64@plt>
   11720:	cmp	r0, #0
   11724:	bne	118cc <__assert_fail@plt+0x43c>
   11728:	ldr	r3, [sp, #88]	; 0x58
   1172c:	ldr	r2, [sp, #92]	; 0x5c
   11730:	mov	r0, r3
   11734:	str	r3, [sp, #24]
   11738:	str	r2, [sp, #28]
   1173c:	bl	11fc8 <__assert_fail@plt+0xb38>
   11740:	str	r0, [sp, #56]	; 0x38
   11744:	ldr	r0, [sp, #92]	; 0x5c
   11748:	bl	11f6c <__assert_fail@plt+0xadc>
   1174c:	str	r0, [sp, #60]	; 0x3c
   11750:	ldrb	r3, [sp, #44]	; 0x2c
   11754:	ldr	r2, [sp, #20]
   11758:	tst	r2, r3
   1175c:	bne	1182c <__assert_fail@plt+0x39c>
   11760:	ldr	r0, [r4]
   11764:	add	r3, sp, #40	; 0x28
   11768:	ldr	r2, [sp, #36]	; 0x24
   1176c:	str	r3, [sp, #8]
   11770:	ldr	r3, [sp, #32]
   11774:	str	r2, [sp, #4]
   11778:	str	r3, [sp]
   1177c:	add	r0, r7, r0, lsl #2
   11780:	ldrd	r2, [sp, #24]
   11784:	orr	r1, r6, #1024	; 0x400
   11788:	bl	12024 <__assert_fail@plt+0xb94>
   1178c:	ldr	r3, [pc, #444]	; 11950 <__assert_fail@plt+0x4c0>
   11790:	ldr	r2, [sp, #172]	; 0xac
   11794:	ldr	r3, [r3]
   11798:	cmp	r2, r3
   1179c:	eor	r0, r0, #1
   117a0:	uxtb	r0, r0
   117a4:	bne	118c8 <__assert_fail@plt+0x438>
   117a8:	add	sp, sp, #180	; 0xb4
   117ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117b0:	cmp	r6, #16
   117b4:	bne	116e0 <__assert_fail@plt+0x250>
   117b8:	cmp	r5, #1
   117bc:	movne	r5, r4
   117c0:	bne	116e0 <__assert_fail@plt+0x250>
   117c4:	mov	r2, #5
   117c8:	ldr	r1, [pc, #460]	; 1199c <__assert_fail@plt+0x50c>
   117cc:	mov	r0, r4
   117d0:	bl	111fc <dcgettext@plt>
   117d4:	mov	r1, r4
   117d8:	mov	r2, r0
   117dc:	mov	r0, r5
   117e0:	bl	11298 <error@plt>
   117e4:	cmp	r2, #1
   117e8:	ble	118f0 <__assert_fail@plt+0x460>
   117ec:	add	r2, sp, #60	; 0x3c
   117f0:	ldr	r0, [r7, r3, lsl #2]
   117f4:	add	r1, sp, #24
   117f8:	str	r2, [sp]
   117fc:	add	r3, sp, #56	; 0x38
   11800:	add	r2, sp, #28
   11804:	bl	15448 <__assert_fail@plt+0x3fb8>
   11808:	subs	r5, r0, #0
   1180c:	bne	118a4 <__assert_fail@plt+0x414>
   11810:	ldr	r3, [sp, #56]	; 0x38
   11814:	cmp	r3, #0
   11818:	beq	11880 <__assert_fail@plt+0x3f0>
   1181c:	ldr	r3, [r4]
   11820:	add	r3, r3, #1
   11824:	str	r3, [r4]
   11828:	b	11750 <__assert_fail@plt+0x2c0>
   1182c:	ldr	r0, [pc, #364]	; 119a0 <__assert_fail@plt+0x510>
   11830:	bl	150e0 <__assert_fail@plt+0x3c50>
   11834:	cmp	r0, #0
   11838:	mov	r5, r0
   1183c:	str	r0, [sp, #48]	; 0x30
   11840:	bne	11760 <__assert_fail@plt+0x2d0>
   11844:	bl	11340 <__errno_location@plt>
   11848:	ldr	r1, [pc, #340]	; 119a4 <__assert_fail@plt+0x514>
   1184c:	mov	r2, #5
   11850:	ldr	r4, [r0]
   11854:	mov	r0, r5
   11858:	bl	111fc <dcgettext@plt>
   1185c:	ldr	r1, [pc, #324]	; 119a8 <__assert_fail@plt+0x518>
   11860:	mov	r5, r0
   11864:	mov	r0, #4
   11868:	bl	14e20 <__assert_fail@plt+0x3990>
   1186c:	mov	r2, r5
   11870:	mov	r1, r4
   11874:	mov	r3, r0
   11878:	mov	r0, #1
   1187c:	bl	11298 <error@plt>
   11880:	ldr	r3, [sp, #60]	; 0x3c
   11884:	cmp	r3, #0
   11888:	beq	1181c <__assert_fail@plt+0x38c>
   1188c:	ldr	r0, [pc, #192]	; 11954 <__assert_fail@plt+0x4c4>
   11890:	bl	15c94 <__assert_fail@plt+0x4804>
   11894:	str	r0, [sp, #56]	; 0x38
   11898:	b	1181c <__assert_fail@plt+0x38c>
   1189c:	mov	r0, r4
   118a0:	bl	11aa4 <__assert_fail@plt+0x614>
   118a4:	ldr	r3, [r4]
   118a8:	ldr	r0, [r7, r3, lsl #2]
   118ac:	bl	150c8 <__assert_fail@plt+0x3c38>
   118b0:	mov	r3, r5
   118b4:	mov	r1, r9
   118b8:	ldr	r2, [pc, #212]	; 11994 <__assert_fail@plt+0x504>
   118bc:	str	r0, [sp]
   118c0:	mov	r0, #1
   118c4:	bl	11298 <error@plt>
   118c8:	bl	11208 <__stack_chk_fail@plt>
   118cc:	bl	11340 <__errno_location@plt>
   118d0:	ldr	r1, [pc, #204]	; 119a4 <__assert_fail@plt+0x514>
   118d4:	mov	r2, #5
   118d8:	ldr	r4, [r0]
   118dc:	mov	r0, #0
   118e0:	bl	111fc <dcgettext@plt>
   118e4:	mov	r1, r9
   118e8:	mov	r5, r0
   118ec:	b	11864 <__assert_fail@plt+0x3d4>
   118f0:	cmp	r3, r8
   118f4:	mov	r2, #5
   118f8:	blt	1191c <__assert_fail@plt+0x48c>
   118fc:	ldr	r1, [pc, #168]	; 119ac <__assert_fail@plt+0x51c>
   11900:	mov	r0, #0
   11904:	bl	111fc <dcgettext@plt>
   11908:	mov	r1, #0
   1190c:	mov	r2, r0
   11910:	mov	r0, r1
   11914:	bl	11298 <error@plt>
   11918:	b	115a4 <__assert_fail@plt+0x114>
   1191c:	ldr	r1, [pc, #140]	; 119b0 <__assert_fail@plt+0x520>
   11920:	mov	r0, #0
   11924:	bl	111fc <dcgettext@plt>
   11928:	sub	r8, r8, #-1073741823	; 0xc0000001
   1192c:	mov	r4, r0
   11930:	ldr	r0, [r7, r8, lsl #2]
   11934:	bl	150c8 <__assert_fail@plt+0x3c38>
   11938:	mov	r1, #0
   1193c:	mov	r2, r4
   11940:	mov	r3, r0
   11944:	mov	r0, r1
   11948:	bl	11298 <error@plt>
   1194c:	b	115a4 <__assert_fail@plt+0x114>
   11950:	andeq	fp, r2, r8, lsl #30
   11954:	andeq	sl, r1, r4, ror fp
   11958:	andeq	sl, r1, ip, asr lr
   1195c:			; <UNDEFINED> instruction: 0x0001adb0
   11960:	ldrdeq	sl, [r1], -r8
   11964:	andeq	r2, r1, r8, lsr #26
   11968:	muleq	r1, r8, lr
   1196c:	andeq	r0, r0, r1, lsl #2
   11970:	andeq	r0, r0, r3, lsl #2
   11974:	andeq	ip, r2, r0, lsr #3
   11978:	andeq	ip, r2, r8, lsr #3
   1197c:	andeq	ip, r2, ip, lsr r1
   11980:	muleq	r2, ip, r1
   11984:	andeq	sl, r1, r8, ror lr
   11988:	andeq	sl, r1, r8, lsl #29
   1198c:			; <UNDEFINED> instruction: 0x0001a3b8
   11990:	andeq	sl, r1, ip, lsr #27
   11994:	andeq	sl, r1, r0, ror lr
   11998:	muleq	r2, r0, r1
   1199c:	andeq	sl, r1, r4, lsr #29
   119a0:			; <UNDEFINED> instruction: 0x0002c1b0
   119a4:	strdeq	sl, [r1], -ip
   119a8:	andeq	sl, r1, ip, lsl pc
   119ac:	ldrdeq	sl, [r1], -r0
   119b0:	andeq	sl, r1, r0, ror #29
   119b4:	mov	fp, #0
   119b8:	mov	lr, #0
   119bc:	pop	{r1}		; (ldr r1, [sp], #4)
   119c0:	mov	r2, sp
   119c4:	push	{r2}		; (str r2, [sp, #-4]!)
   119c8:	push	{r0}		; (str r0, [sp, #-4]!)
   119cc:	ldr	ip, [pc, #16]	; 119e4 <__assert_fail@plt+0x554>
   119d0:	push	{ip}		; (str ip, [sp, #-4]!)
   119d4:	ldr	r0, [pc, #12]	; 119e8 <__assert_fail@plt+0x558>
   119d8:	ldr	r3, [pc, #12]	; 119ec <__assert_fail@plt+0x55c>
   119dc:	bl	112bc <__libc_start_main@plt>
   119e0:	bl	11448 <abort@plt>
   119e4:	andeq	sl, r1, r8, ror r2
   119e8:	andeq	r1, r1, r0, lsr #9
   119ec:	andeq	sl, r1, r8, lsl r2
   119f0:	ldr	r3, [pc, #20]	; 11a0c <__assert_fail@plt+0x57c>
   119f4:	ldr	r2, [pc, #20]	; 11a10 <__assert_fail@plt+0x580>
   119f8:	add	r3, pc, r3
   119fc:	ldr	r2, [r3, r2]
   11a00:	cmp	r2, #0
   11a04:	bxeq	lr
   11a08:	b	112d4 <__gmon_start__@plt>
   11a0c:	andeq	sl, r1, r0, lsl #12
   11a10:	andeq	r0, r0, r0, lsr r1
   11a14:	ldr	r0, [pc, #24]	; 11a34 <__assert_fail@plt+0x5a4>
   11a18:	ldr	r3, [pc, #24]	; 11a38 <__assert_fail@plt+0x5a8>
   11a1c:	cmp	r3, r0
   11a20:	bxeq	lr
   11a24:	ldr	r3, [pc, #16]	; 11a3c <__assert_fail@plt+0x5ac>
   11a28:	cmp	r3, #0
   11a2c:	bxeq	lr
   11a30:	bx	r3
   11a34:	andeq	ip, r2, r4, lsl #3
   11a38:	andeq	ip, r2, r4, lsl #3
   11a3c:	andeq	r0, r0, r0
   11a40:	ldr	r0, [pc, #36]	; 11a6c <__assert_fail@plt+0x5dc>
   11a44:	ldr	r1, [pc, #36]	; 11a70 <__assert_fail@plt+0x5e0>
   11a48:	sub	r1, r1, r0
   11a4c:	asr	r1, r1, #2
   11a50:	add	r1, r1, r1, lsr #31
   11a54:	asrs	r1, r1, #1
   11a58:	bxeq	lr
   11a5c:	ldr	r3, [pc, #16]	; 11a74 <__assert_fail@plt+0x5e4>
   11a60:	cmp	r3, #0
   11a64:	bxeq	lr
   11a68:	bx	r3
   11a6c:	andeq	ip, r2, r4, lsl #3
   11a70:	andeq	ip, r2, r4, lsl #3
   11a74:	andeq	r0, r0, r0
   11a78:	push	{r4, lr}
   11a7c:	ldr	r4, [pc, #24]	; 11a9c <__assert_fail@plt+0x60c>
   11a80:	ldrb	r3, [r4]
   11a84:	cmp	r3, #0
   11a88:	popne	{r4, pc}
   11a8c:	bl	11a14 <__assert_fail@plt+0x584>
   11a90:	mov	r3, #1
   11a94:	strb	r3, [r4]
   11a98:	pop	{r4, pc}
   11a9c:	andeq	ip, r2, r4, lsr #3
   11aa0:	b	11a40 <__assert_fail@plt+0x5b0>
   11aa4:	ldr	r3, [pc, #908]	; 11e38 <__assert_fail@plt+0x9a8>
   11aa8:	push	{r7, lr}
   11aac:	sub	sp, sp, #72	; 0x48
   11ab0:	ldr	r3, [r3]
   11ab4:	subs	r4, r0, #0
   11ab8:	str	r3, [sp, #68]	; 0x44
   11abc:	beq	11af8 <__assert_fail@plt+0x668>
   11ac0:	ldr	r3, [pc, #884]	; 11e3c <__assert_fail@plt+0x9ac>
   11ac4:	mov	r2, #5
   11ac8:	ldr	r1, [pc, #880]	; 11e40 <__assert_fail@plt+0x9b0>
   11acc:	mov	r0, #0
   11ad0:	ldr	r5, [r3]
   11ad4:	bl	111fc <dcgettext@plt>
   11ad8:	ldr	r3, [pc, #868]	; 11e44 <__assert_fail@plt+0x9b4>
   11adc:	mov	r1, #1
   11ae0:	ldr	r3, [r3]
   11ae4:	mov	r2, r0
   11ae8:	mov	r0, r5
   11aec:	bl	1137c <__fprintf_chk@plt>
   11af0:	mov	r0, r4
   11af4:	bl	112f8 <exit@plt>
   11af8:	mov	r2, #5
   11afc:	ldr	r1, [pc, #836]	; 11e48 <__assert_fail@plt+0x9b8>
   11b00:	bl	111fc <dcgettext@plt>
   11b04:	ldr	r6, [pc, #824]	; 11e44 <__assert_fail@plt+0x9b4>
   11b08:	ldr	r5, [pc, #828]	; 11e4c <__assert_fail@plt+0x9bc>
   11b0c:	ldr	r3, [r6]
   11b10:	mov	r2, r3
   11b14:	mov	r1, r0
   11b18:	mov	r0, #1
   11b1c:	bl	11364 <__printf_chk@plt>
   11b20:	mov	r2, #5
   11b24:	ldr	r1, [pc, #804]	; 11e50 <__assert_fail@plt+0x9c0>
   11b28:	mov	r0, r4
   11b2c:	bl	111fc <dcgettext@plt>
   11b30:	ldr	r1, [r5]
   11b34:	bl	11154 <fputs_unlocked@plt>
   11b38:	mov	r2, #5
   11b3c:	ldr	r1, [pc, #784]	; 11e54 <__assert_fail@plt+0x9c4>
   11b40:	mov	r0, r4
   11b44:	bl	111fc <dcgettext@plt>
   11b48:	ldr	r1, [r5]
   11b4c:	bl	11154 <fputs_unlocked@plt>
   11b50:	mov	r2, #5
   11b54:	ldr	r1, [pc, #764]	; 11e58 <__assert_fail@plt+0x9c8>
   11b58:	mov	r0, r4
   11b5c:	bl	111fc <dcgettext@plt>
   11b60:	ldr	r1, [r5]
   11b64:	bl	11154 <fputs_unlocked@plt>
   11b68:	mov	r2, #5
   11b6c:	ldr	r1, [pc, #744]	; 11e5c <__assert_fail@plt+0x9cc>
   11b70:	mov	r0, r4
   11b74:	bl	111fc <dcgettext@plt>
   11b78:	ldr	r1, [r5]
   11b7c:	bl	11154 <fputs_unlocked@plt>
   11b80:	mov	r2, #5
   11b84:	ldr	r1, [pc, #724]	; 11e60 <__assert_fail@plt+0x9d0>
   11b88:	mov	r0, r4
   11b8c:	bl	111fc <dcgettext@plt>
   11b90:	ldr	r1, [r5]
   11b94:	bl	11154 <fputs_unlocked@plt>
   11b98:	mov	r2, #5
   11b9c:	ldr	r1, [pc, #704]	; 11e64 <__assert_fail@plt+0x9d4>
   11ba0:	mov	r0, r4
   11ba4:	bl	111fc <dcgettext@plt>
   11ba8:	ldr	r1, [r5]
   11bac:	bl	11154 <fputs_unlocked@plt>
   11bb0:	mov	r2, #5
   11bb4:	ldr	r1, [pc, #684]	; 11e68 <__assert_fail@plt+0x9d8>
   11bb8:	mov	r0, r4
   11bbc:	bl	111fc <dcgettext@plt>
   11bc0:	ldr	r1, [r5]
   11bc4:	bl	11154 <fputs_unlocked@plt>
   11bc8:	mov	r2, #5
   11bcc:	ldr	r1, [pc, #664]	; 11e6c <__assert_fail@plt+0x9dc>
   11bd0:	mov	r0, r4
   11bd4:	bl	111fc <dcgettext@plt>
   11bd8:	ldr	r1, [r5]
   11bdc:	bl	11154 <fputs_unlocked@plt>
   11be0:	mov	r2, #5
   11be4:	ldr	r1, [pc, #644]	; 11e70 <__assert_fail@plt+0x9e0>
   11be8:	mov	r0, r4
   11bec:	bl	111fc <dcgettext@plt>
   11bf0:	ldr	r1, [r5]
   11bf4:	bl	11154 <fputs_unlocked@plt>
   11bf8:	mov	r2, #5
   11bfc:	ldr	r1, [pc, #624]	; 11e74 <__assert_fail@plt+0x9e4>
   11c00:	mov	r0, r4
   11c04:	bl	111fc <dcgettext@plt>
   11c08:	ldr	r1, [r5]
   11c0c:	bl	11154 <fputs_unlocked@plt>
   11c10:	mov	r2, #5
   11c14:	ldr	r1, [pc, #604]	; 11e78 <__assert_fail@plt+0x9e8>
   11c18:	mov	r0, r4
   11c1c:	bl	111fc <dcgettext@plt>
   11c20:	ldr	r1, [r5]
   11c24:	bl	11154 <fputs_unlocked@plt>
   11c28:	mov	r2, #5
   11c2c:	ldr	r1, [pc, #584]	; 11e7c <__assert_fail@plt+0x9ec>
   11c30:	mov	r0, r4
   11c34:	bl	111fc <dcgettext@plt>
   11c38:	ldr	r1, [r5]
   11c3c:	bl	11154 <fputs_unlocked@plt>
   11c40:	mov	r2, #5
   11c44:	ldr	r1, [pc, #564]	; 11e80 <__assert_fail@plt+0x9f0>
   11c48:	mov	r0, r4
   11c4c:	bl	111fc <dcgettext@plt>
   11c50:	ldr	r3, [r6]
   11c54:	str	r3, [sp]
   11c58:	mov	r2, r3
   11c5c:	mov	r1, r0
   11c60:	mov	r0, #1
   11c64:	bl	11364 <__printf_chk@plt>
   11c68:	ldr	lr, [pc, #532]	; 11e84 <__assert_fail@plt+0x9f4>
   11c6c:	add	ip, sp, #12
   11c70:	ldm	lr!, {r0, r1, r2, r3}
   11c74:	stmia	ip!, {r0, r1, r2, r3}
   11c78:	ldm	lr!, {r0, r1, r2, r3}
   11c7c:	ldr	r6, [sp, #12]
   11c80:	stmia	ip!, {r0, r1, r2, r3}
   11c84:	cmp	r6, #0
   11c88:	ldm	lr!, {r0, r1, r2, r3}
   11c8c:	addeq	r5, sp, #12
   11c90:	stmia	ip!, {r0, r1, r2, r3}
   11c94:	ldm	lr, {r0, r1}
   11c98:	stm	ip, {r0, r1}
   11c9c:	beq	11ccc <__assert_fail@plt+0x83c>
   11ca0:	ldr	r7, [pc, #480]	; 11e88 <__assert_fail@plt+0x9f8>
   11ca4:	add	r5, sp, #12
   11ca8:	b	11cb8 <__assert_fail@plt+0x828>
   11cac:	ldr	r6, [r5, #8]!
   11cb0:	cmp	r6, #0
   11cb4:	beq	11ccc <__assert_fail@plt+0x83c>
   11cb8:	mov	r1, r6
   11cbc:	mov	r0, r7
   11cc0:	bl	11178 <strcmp@plt>
   11cc4:	cmp	r0, #0
   11cc8:	bne	11cac <__assert_fail@plt+0x81c>
   11ccc:	ldr	r5, [r5, #4]
   11cd0:	mov	r2, #5
   11cd4:	cmp	r5, #0
   11cd8:	ldr	r1, [pc, #428]	; 11e8c <__assert_fail@plt+0x9fc>
   11cdc:	beq	11d84 <__assert_fail@plt+0x8f4>
   11ce0:	mov	r0, #0
   11ce4:	bl	111fc <dcgettext@plt>
   11ce8:	ldr	r3, [pc, #416]	; 11e90 <__assert_fail@plt+0xa00>
   11cec:	ldr	r2, [pc, #416]	; 11e94 <__assert_fail@plt+0xa04>
   11cf0:	mov	r1, r0
   11cf4:	mov	r0, #1
   11cf8:	bl	11364 <__printf_chk@plt>
   11cfc:	mov	r1, #0
   11d00:	mov	r0, #5
   11d04:	bl	113ac <setlocale@plt>
   11d08:	cmp	r0, #0
   11d0c:	ldreq	r6, [pc, #372]	; 11e88 <__assert_fail@plt+0x9f8>
   11d10:	beq	11d2c <__assert_fail@plt+0x89c>
   11d14:	mov	r2, #3
   11d18:	ldr	r1, [pc, #376]	; 11e98 <__assert_fail@plt+0xa08>
   11d1c:	bl	1143c <strncmp@plt>
   11d20:	ldr	r6, [pc, #352]	; 11e88 <__assert_fail@plt+0x9f8>
   11d24:	cmp	r0, #0
   11d28:	bne	11e14 <__assert_fail@plt+0x984>
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #356]	; 11e9c <__assert_fail@plt+0xa0c>
   11d34:	mov	r0, #0
   11d38:	bl	111fc <dcgettext@plt>
   11d3c:	ldr	r3, [pc, #324]	; 11e88 <__assert_fail@plt+0x9f8>
   11d40:	ldr	r2, [pc, #328]	; 11e90 <__assert_fail@plt+0xa00>
   11d44:	mov	r1, r0
   11d48:	mov	r0, #1
   11d4c:	bl	11364 <__printf_chk@plt>
   11d50:	mov	r2, #5
   11d54:	ldr	r1, [pc, #324]	; 11ea0 <__assert_fail@plt+0xa10>
   11d58:	mov	r0, #0
   11d5c:	bl	111fc <dcgettext@plt>
   11d60:	ldr	r2, [pc, #316]	; 11ea4 <__assert_fail@plt+0xa14>
   11d64:	cmp	r5, r6
   11d68:	ldr	r3, [pc, #312]	; 11ea8 <__assert_fail@plt+0xa18>
   11d6c:	movne	r3, r2
   11d70:	mov	r1, r0
   11d74:	mov	r2, r5
   11d78:	mov	r0, #1
   11d7c:	bl	11364 <__printf_chk@plt>
   11d80:	b	11af0 <__assert_fail@plt+0x660>
   11d84:	mov	r0, r5
   11d88:	bl	111fc <dcgettext@plt>
   11d8c:	ldr	r3, [pc, #252]	; 11e90 <__assert_fail@plt+0xa00>
   11d90:	ldr	r2, [pc, #252]	; 11e94 <__assert_fail@plt+0xa04>
   11d94:	mov	r1, r0
   11d98:	mov	r0, #1
   11d9c:	bl	11364 <__printf_chk@plt>
   11da0:	mov	r1, r5
   11da4:	mov	r0, #5
   11da8:	bl	113ac <setlocale@plt>
   11dac:	cmp	r0, #0
   11db0:	beq	11dc8 <__assert_fail@plt+0x938>
   11db4:	mov	r2, #3
   11db8:	ldr	r1, [pc, #216]	; 11e98 <__assert_fail@plt+0xa08>
   11dbc:	bl	1143c <strncmp@plt>
   11dc0:	cmp	r0, #0
   11dc4:	bne	11e0c <__assert_fail@plt+0x97c>
   11dc8:	mov	r2, #5
   11dcc:	ldr	r1, [pc, #200]	; 11e9c <__assert_fail@plt+0xa0c>
   11dd0:	mov	r0, #0
   11dd4:	bl	111fc <dcgettext@plt>
   11dd8:	ldr	r3, [pc, #168]	; 11e88 <__assert_fail@plt+0x9f8>
   11ddc:	ldr	r2, [pc, #172]	; 11e90 <__assert_fail@plt+0xa00>
   11de0:	mov	r5, r3
   11de4:	mov	r1, r0
   11de8:	mov	r0, #1
   11dec:	bl	11364 <__printf_chk@plt>
   11df0:	ldr	r1, [pc, #168]	; 11ea0 <__assert_fail@plt+0xa10>
   11df4:	mov	r2, #5
   11df8:	mov	r0, #0
   11dfc:	bl	111fc <dcgettext@plt>
   11e00:	ldr	r3, [pc, #160]	; 11ea8 <__assert_fail@plt+0xa18>
   11e04:	mov	r1, r0
   11e08:	b	11d74 <__assert_fail@plt+0x8e4>
   11e0c:	ldr	r6, [pc, #116]	; 11e88 <__assert_fail@plt+0x9f8>
   11e10:	mov	r5, r6
   11e14:	mov	r2, #5
   11e18:	ldr	r1, [pc, #140]	; 11eac <__assert_fail@plt+0xa1c>
   11e1c:	mov	r0, #0
   11e20:	bl	111fc <dcgettext@plt>
   11e24:	ldr	r2, [pc, #92]	; 11e88 <__assert_fail@plt+0x9f8>
   11e28:	mov	r1, r0
   11e2c:	mov	r0, #1
   11e30:	bl	11364 <__printf_chk@plt>
   11e34:	b	11d2c <__assert_fail@plt+0x89c>
   11e38:	andeq	fp, r2, r8, lsl #30
   11e3c:	muleq	r2, r8, r1
   11e40:	andeq	sl, r1, r0, asr #7
   11e44:	andeq	ip, r2, r8, asr #3
   11e48:	andeq	sl, r1, r8, ror #7
   11e4c:	muleq	r2, ip, r1
   11e50:	andeq	sl, r1, ip, asr #8
   11e54:	andeq	sl, r1, r0, ror #9
   11e58:	andeq	sl, r1, ip, lsr #11
   11e5c:	muleq	r1, r4, r6
   11e60:	andeq	sl, r1, ip, lsl #14
   11e64:	andeq	sl, r1, r0, ror #16
   11e68:	andeq	sl, r1, r0, ror #17
   11e6c:	andeq	sl, r1, ip, asr r9
   11e70:	andeq	sl, r1, r4, lsr #19
   11e74:	andeq	sl, r1, r8, ror fp
   11e78:	andeq	sl, r1, r8, lsr #23
   11e7c:	andeq	sl, r1, r0, ror #23
   11e80:	andeq	sl, r1, r0, lsr #25
   11e84:	andeq	sl, r1, r0, lsr #5
   11e88:			; <UNDEFINED> instruction: 0x0001a3b8
   11e8c:	andeq	sl, r1, ip, ror #26
   11e90:	andeq	sl, r1, r4, lsl #27
   11e94:	andeq	sl, r1, ip, lsr #27
   11e98:			; <UNDEFINED> instruction: 0x0001adbc
   11e9c:	andeq	sl, r1, r8, lsl #28
   11ea0:	andeq	sl, r1, r8, lsr #28
   11ea4:	andeq	sl, r1, r4, ror fp
   11ea8:	andeq	sl, r1, r8, lsr #30
   11eac:	andeq	sl, r1, r0, asr #27
   11eb0:	subs	r3, r0, #0
   11eb4:	push	{r4, r5, r6, lr}
   11eb8:	beq	11f0c <__assert_fail@plt+0xa7c>
   11ebc:	cmp	r1, #0
   11ec0:	beq	11f18 <__assert_fail@plt+0xa88>
   11ec4:	mov	r4, r1
   11ec8:	mov	r5, r3
   11ecc:	bl	11310 <strlen@plt>
   11ed0:	mov	r6, r0
   11ed4:	mov	r0, r4
   11ed8:	bl	11310 <strlen@plt>
   11edc:	add	r0, r6, r0
   11ee0:	add	r0, r0, #2
   11ee4:	bl	15a68 <__assert_fail@plt+0x45d8>
   11ee8:	mov	r1, r5
   11eec:	mov	r6, r0
   11ef0:	bl	111f0 <stpcpy@plt>
   11ef4:	mov	r3, #58	; 0x3a
   11ef8:	mov	r1, r4
   11efc:	strb	r3, [r0], #1
   11f00:	bl	11274 <strcpy@plt>
   11f04:	mov	r0, r6
   11f08:	pop	{r4, r5, r6, pc}
   11f0c:	cmp	r1, #0
   11f10:	beq	11f20 <__assert_fail@plt+0xa90>
   11f14:	mov	r0, r1
   11f18:	pop	{r4, r5, r6, lr}
   11f1c:	b	15c94 <__assert_fail@plt+0x4804>
   11f20:	mov	r6, r1
   11f24:	b	11f04 <__assert_fail@plt+0xa74>
   11f28:	mov	r3, #0
   11f2c:	mov	r1, #2
   11f30:	mov	r2, #1
   11f34:	str	r1, [r0]
   11f38:	strh	r2, [r0, #12]
   11f3c:	strb	r3, [r0, #4]
   11f40:	str	r3, [r0, #8]
   11f44:	str	r3, [r0, #16]
   11f48:	str	r3, [r0, #20]
   11f4c:	bx	lr
   11f50:	push	{r4, lr}
   11f54:	mov	r4, r0
   11f58:	ldr	r0, [r0, #16]
   11f5c:	bl	111a8 <free@plt>
   11f60:	ldr	r0, [r4, #20]
   11f64:	pop	{r4, lr}
   11f68:	b	111a8 <free@plt>
   11f6c:	push	{r4, r5, lr}
   11f70:	sub	sp, sp, #36	; 0x24
   11f74:	ldr	r4, [pc, #72]	; 11fc4 <__assert_fail@plt+0xb34>
   11f78:	mov	r5, r0
   11f7c:	ldr	r3, [r4]
   11f80:	str	r3, [sp, #28]
   11f84:	bl	11478 <getgrgid@plt>
   11f88:	subs	r1, r0, #0
   11f8c:	beq	11fb0 <__assert_fail@plt+0xb20>
   11f90:	ldr	r0, [r1]
   11f94:	bl	15c94 <__assert_fail@plt+0x4804>
   11f98:	ldr	r2, [sp, #28]
   11f9c:	ldr	r3, [r4]
   11fa0:	cmp	r2, r3
   11fa4:	bne	11fc0 <__assert_fail@plt+0xb30>
   11fa8:	add	sp, sp, #36	; 0x24
   11fac:	pop	{r4, r5, pc}
   11fb0:	mov	r0, r5
   11fb4:	add	r2, sp, #4
   11fb8:	bl	12e00 <__assert_fail@plt+0x1970>
   11fbc:	b	11f94 <__assert_fail@plt+0xb04>
   11fc0:	bl	11208 <__stack_chk_fail@plt>
   11fc4:	andeq	fp, r2, r8, lsl #30
   11fc8:	push	{r4, r5, lr}
   11fcc:	sub	sp, sp, #36	; 0x24
   11fd0:	ldr	r4, [pc, #72]	; 12020 <__assert_fail@plt+0xb90>
   11fd4:	mov	r5, r0
   11fd8:	ldr	r3, [r4]
   11fdc:	str	r3, [sp, #28]
   11fe0:	bl	11184 <getpwuid@plt>
   11fe4:	subs	r1, r0, #0
   11fe8:	beq	1200c <__assert_fail@plt+0xb7c>
   11fec:	ldr	r0, [r1]
   11ff0:	bl	15c94 <__assert_fail@plt+0x4804>
   11ff4:	ldr	r2, [sp, #28]
   11ff8:	ldr	r3, [r4]
   11ffc:	cmp	r2, r3
   12000:	bne	1201c <__assert_fail@plt+0xb8c>
   12004:	add	sp, sp, #36	; 0x24
   12008:	pop	{r4, r5, pc}
   1200c:	mov	r0, r5
   12010:	add	r2, sp, #4
   12014:	bl	12e00 <__assert_fail@plt+0x1970>
   12018:	b	11ff0 <__assert_fail@plt+0xb60>
   1201c:	bl	11208 <__stack_chk_fail@plt>
   12020:	andeq	fp, r2, r8, lsl #30
   12024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12028:	sub	sp, sp, #260	; 0x104
   1202c:	ldr	ip, [pc, #3180]	; 12ca0 <__assert_fail@plt+0x1810>
   12030:	ldr	lr, [sp, #296]	; 0x128
   12034:	ldr	r4, [sp, #300]	; 0x12c
   12038:	ldr	ip, [ip]
   1203c:	and	lr, lr, r4
   12040:	cmn	lr, #1
   12044:	str	lr, [sp, #16]
   12048:	str	r2, [sp, #20]
   1204c:	str	r3, [sp, #36]	; 0x24
   12050:	str	ip, [sp, #252]	; 0xfc
   12054:	ldr	r6, [sp, #304]	; 0x130
   12058:	beq	12a74 <__assert_fail@plt+0x15e4>
   1205c:	mov	r2, #0
   12060:	bl	15cf0 <__assert_fail@plt+0x4860>
   12064:	mov	r3, #1
   12068:	str	r3, [sp, #12]
   1206c:	mov	fp, r0
   12070:	bl	11340 <__errno_location@plt>
   12074:	str	r0, [sp, #28]
   12078:	mov	r0, fp
   1207c:	bl	17dd4 <fts_read@@Base>
   12080:	subs	r9, r0, #0
   12084:	beq	12374 <__assert_fail@plt+0xee4>
   12088:	ldrh	sl, [r9, #60]	; 0x3c
   1208c:	ldr	r3, [r9, #28]
   12090:	sub	r7, sl, #1
   12094:	str	r3, [sp, #8]
   12098:	cmp	r7, #9
   1209c:	ldrls	pc, [pc, r7, lsl #2]
   120a0:	b	12160 <__assert_fail@plt+0xcd0>
   120a4:	andeq	r2, r1, r8, asr #7
   120a8:	andeq	r2, r1, r0, lsl r3
   120ac:	andeq	r2, r1, r0, ror #2
   120b0:			; <UNDEFINED> instruction: 0x000124b4
   120b4:	andeq	r2, r1, r0, ror #2
   120b8:	andeq	r2, r1, r4, asr r1
   120bc:	strdeq	r2, [r1], -ip
   120c0:	andeq	r2, r1, r0, ror #2
   120c4:	andeq	r2, r1, r0, ror #2
   120c8:	andeq	r2, r1, ip, asr #1
   120cc:	ldr	r3, [r9, #48]	; 0x30
   120d0:	cmp	r3, #0
   120d4:	bne	120e4 <__assert_fail@plt+0xc54>
   120d8:	ldr	r3, [r9, #16]
   120dc:	cmp	r3, #0
   120e0:	beq	12b48 <__assert_fail@plt+0x16b8>
   120e4:	ldrb	r4, [r6, #13]
   120e8:	cmp	r4, #0
   120ec:	bne	12108 <__assert_fail@plt+0xc78>
   120f0:	mov	r2, #5
   120f4:	ldr	r1, [pc, #2984]	; 12ca4 <__assert_fail@plt+0x1814>
   120f8:	b	124c8 <__assert_fail@plt+0x1038>
   120fc:	ldrb	r4, [r6, #13]
   12100:	cmp	r4, #0
   12104:	beq	12964 <__assert_fail@plt+0x14d4>
   12108:	mov	r3, #0
   1210c:	mov	r7, r3
   12110:	mov	r5, r3
   12114:	str	r3, [sp, #12]
   12118:	ldr	r3, [r6]
   1211c:	cmp	r3, #2
   12120:	beq	12514 <__assert_fail@plt+0x1084>
   12124:	cmp	r3, #0
   12128:	bne	12514 <__assert_fail@plt+0x1084>
   1212c:	cmp	r7, #0
   12130:	moveq	r3, #3
   12134:	streq	r3, [sp, #32]
   12138:	bne	12988 <__assert_fail@plt+0x14f8>
   1213c:	cmp	r5, #0
   12140:	bne	12908 <__assert_fail@plt+0x1478>
   12144:	ldr	sl, [r6, #16]
   12148:	ldr	r4, [r6, #20]
   1214c:	mov	r8, r5
   12150:	b	122ac <__assert_fail@plt+0xe1c>
   12154:	ldrb	r3, [r6, #4]
   12158:	cmp	r3, #0
   1215c:	beq	12078 <__assert_fail@plt+0xbe8>
   12160:	ldr	r3, [sp, #16]
   12164:	ldr	r8, [r9, #24]
   12168:	cmn	r3, #1
   1216c:	ldrb	r4, [r6, #12]
   12170:	add	r5, r9, #72	; 0x48
   12174:	beq	126b4 <__assert_fail@plt+0x1224>
   12178:	cmp	r4, #0
   1217c:	beq	12190 <__assert_fail@plt+0xd00>
   12180:	ldr	r3, [r9, #88]	; 0x58
   12184:	and	r3, r3, #61440	; 0xf000
   12188:	cmp	r3, #40960	; 0xa000
   1218c:	beq	129e8 <__assert_fail@plt+0x1558>
   12190:	uxth	r7, r7
   12194:	bic	sl, sl, #2
   12198:	ldr	r3, [sp, #296]	; 0x128
   1219c:	cmp	sl, #4
   121a0:	cmpne	r7, #1
   121a4:	movls	r7, #1
   121a8:	movhi	r7, #0
   121ac:	cmn	r3, #1
   121b0:	beq	1255c <__assert_fail@plt+0x10cc>
   121b4:	ldr	r3, [r5, #24]
   121b8:	ldr	r2, [sp, #296]	; 0x128
   121bc:	cmp	r2, r3
   121c0:	beq	1255c <__assert_fail@plt+0x10cc>
   121c4:	cmp	r7, #0
   121c8:	beq	1291c <__assert_fail@plt+0x148c>
   121cc:	ldr	ip, [r6, #8]
   121d0:	cmp	ip, #0
   121d4:	beq	12c98 <__assert_fail@plt+0x1808>
   121d8:	ldrd	r0, [r5, #96]	; 0x60
   121dc:	ldrd	r2, [ip]
   121e0:	cmp	r1, r3
   121e4:	cmpeq	r0, r2
   121e8:	moveq	lr, #0
   121ec:	bne	12c98 <__assert_fail@plt+0x1808>
   121f0:	ldrd	r0, [r5]
   121f4:	ldrd	r2, [ip, #8]
   121f8:	cmp	r1, r3
   121fc:	cmpeq	r0, r2
   12200:	beq	127d8 <__assert_fail@plt+0x1348>
   12204:	cmp	lr, #0
   12208:	beq	1291c <__assert_fail@plt+0x148c>
   1220c:	ldrb	r4, [r6, #12]
   12210:	cmp	r4, #0
   12214:	ldr	sl, [fp, #32]
   12218:	bne	125a4 <__assert_fail@plt+0x1114>
   1221c:	mov	r3, #256	; 0x100
   12220:	str	r3, [sp]
   12224:	mov	r1, r8
   12228:	mov	r0, sl
   1222c:	ldr	r3, [sp, #36]	; 0x24
   12230:	ldr	r2, [sp, #20]
   12234:	bl	11418 <fchownat@plt>
   12238:	cmp	r0, #0
   1223c:	moveq	r0, #1
   12240:	movne	r0, #0
   12244:	beq	12258 <__assert_fail@plt+0xdc8>
   12248:	ldr	r3, [sp, #28]
   1224c:	ldr	r3, [r3]
   12250:	cmp	r3, #95	; 0x5f
   12254:	beq	12ac4 <__assert_fail@plt+0x1634>
   12258:	cmp	r0, #0
   1225c:	beq	12650 <__assert_fail@plt+0x11c0>
   12260:	ldr	r3, [r6]
   12264:	cmp	r3, #2
   12268:	beq	12514 <__assert_fail@plt+0x1084>
   1226c:	ldr	r2, [sp, #20]
   12270:	cmn	r2, #1
   12274:	beq	12534 <__assert_fail@plt+0x10a4>
   12278:	ldr	r0, [r5, #24]
   1227c:	ldr	r2, [sp, #20]
   12280:	cmp	r2, r0
   12284:	movne	r3, #2
   12288:	strne	r3, [sp, #32]
   1228c:	beq	12534 <__assert_fail@plt+0x10a4>
   12290:	bl	11fc8 <__assert_fail@plt+0xb38>
   12294:	mov	r8, r0
   12298:	ldr	r0, [r5, #28]
   1229c:	bl	11f6c <__assert_fail@plt+0xadc>
   122a0:	ldr	sl, [r6, #16]
   122a4:	ldr	r4, [r6, #20]
   122a8:	mov	r5, r0
   122ac:	mov	r1, r4
   122b0:	mov	r0, sl
   122b4:	bl	11eb0 <__assert_fail@plt+0xa20>
   122b8:	cmp	sl, #0
   122bc:	str	r0, [sp, #24]
   122c0:	movne	r0, r8
   122c4:	moveq	r0, #0
   122c8:	cmp	r4, #0
   122cc:	movne	r1, r5
   122d0:	moveq	r1, #0
   122d4:	bl	11eb0 <__assert_fail@plt+0xa20>
   122d8:	ldr	r3, [sp, #32]
   122dc:	cmp	r3, #3
   122e0:	mov	r7, r0
   122e4:	beq	12764 <__assert_fail@plt+0x12d4>
   122e8:	cmp	r3, #4
   122ec:	beq	126f0 <__assert_fail@plt+0x1260>
   122f0:	cmp	sl, #0
   122f4:	beq	12874 <__assert_fail@plt+0x13e4>
   122f8:	mov	r2, #5
   122fc:	ldr	r1, [pc, #2468]	; 12ca8 <__assert_fail@plt+0x1818>
   12300:	mov	r0, #0
   12304:	bl	111fc <dcgettext@plt>
   12308:	str	r0, [sp, #32]
   1230c:	b	1270c <__assert_fail@plt+0x127c>
   12310:	mov	r1, r9
   12314:	mov	r0, fp
   12318:	bl	15d38 <__assert_fail@plt+0x48a8>
   1231c:	cmp	r0, #0
   12320:	beq	12160 <__assert_fail@plt+0xcd0>
   12324:	mov	r2, #5
   12328:	ldr	r1, [pc, #2428]	; 12cac <__assert_fail@plt+0x181c>
   1232c:	mov	r0, #0
   12330:	bl	111fc <dcgettext@plt>
   12334:	ldr	r2, [sp, #8]
   12338:	mov	r1, #3
   1233c:	mov	r4, r0
   12340:	mov	r0, #0
   12344:	bl	14efc <__assert_fail@plt+0x3a6c>
   12348:	mov	r1, #0
   1234c:	mov	r2, r4
   12350:	mov	r3, r0
   12354:	mov	r0, r1
   12358:	bl	11298 <error@plt>
   1235c:	mov	r3, #0
   12360:	mov	r0, fp
   12364:	str	r3, [sp, #12]
   12368:	bl	17dd4 <fts_read@@Base>
   1236c:	subs	r9, r0, #0
   12370:	bne	12088 <__assert_fail@plt+0xbf8>
   12374:	ldr	r3, [sp, #28]
   12378:	ldr	r4, [r3]
   1237c:	cmp	r4, #0
   12380:	beq	12398 <__assert_fail@plt+0xf08>
   12384:	ldrb	r3, [r6, #13]
   12388:	cmp	r3, #0
   1238c:	str	r3, [sp, #12]
   12390:	strne	r9, [sp, #12]
   12394:	beq	12b08 <__assert_fail@plt+0x1678>
   12398:	mov	r0, fp
   1239c:	bl	17c54 <fts_close@@Base>
   123a0:	cmp	r0, #0
   123a4:	bne	12a90 <__assert_fail@plt+0x1600>
   123a8:	ldr	r3, [pc, #2288]	; 12ca0 <__assert_fail@plt+0x1810>
   123ac:	ldr	r2, [sp, #252]	; 0xfc
   123b0:	ldr	r0, [sp, #12]
   123b4:	ldr	r3, [r3]
   123b8:	cmp	r2, r3
   123bc:	bne	12c94 <__assert_fail@plt+0x1804>
   123c0:	add	sp, sp, #260	; 0x104
   123c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123c8:	ldrb	r3, [r6, #4]
   123cc:	cmp	r3, #0
   123d0:	beq	12160 <__assert_fail@plt+0xcd0>
   123d4:	ldr	ip, [r6, #8]
   123d8:	cmp	ip, #0
   123dc:	beq	12078 <__assert_fail@plt+0xbe8>
   123e0:	ldrd	r0, [r9, #168]	; 0xa8
   123e4:	ldrd	r2, [ip]
   123e8:	cmp	r1, r3
   123ec:	cmpeq	r0, r2
   123f0:	bne	12078 <__assert_fail@plt+0xbe8>
   123f4:	ldrd	r2, [r9, #72]	; 0x48
   123f8:	ldrd	r0, [ip, #8]
   123fc:	cmp	r3, r1
   12400:	cmpeq	r2, r0
   12404:	bne	12078 <__assert_fail@plt+0xbe8>
   12408:	ldr	r7, [sp, #8]
   1240c:	ldr	r1, [pc, #2204]	; 12cb0 <__assert_fail@plt+0x1820>
   12410:	mov	r0, r7
   12414:	bl	11178 <strcmp@plt>
   12418:	mov	r2, #5
   1241c:	subs	r4, r0, #0
   12420:	beq	12c04 <__assert_fail@plt+0x1774>
   12424:	ldr	r1, [pc, #2184]	; 12cb4 <__assert_fail@plt+0x1824>
   12428:	mov	r0, #0
   1242c:	bl	111fc <dcgettext@plt>
   12430:	ldr	r2, [sp, #8]
   12434:	mov	r1, #4
   12438:	mov	r4, r0
   1243c:	mov	r0, #0
   12440:	bl	14d6c <__assert_fail@plt+0x38dc>
   12444:	ldr	r2, [pc, #2148]	; 12cb0 <__assert_fail@plt+0x1820>
   12448:	mov	r1, #4
   1244c:	mov	r5, r0
   12450:	mov	r0, #1
   12454:	bl	14d6c <__assert_fail@plt+0x38dc>
   12458:	mov	r1, #0
   1245c:	mov	r3, r5
   12460:	mov	r2, r4
   12464:	str	r0, [sp]
   12468:	mov	r0, r1
   1246c:	bl	11298 <error@plt>
   12470:	mov	r2, #5
   12474:	ldr	r1, [pc, #2108]	; 12cb8 <__assert_fail@plt+0x1828>
   12478:	mov	r0, #0
   1247c:	bl	111fc <dcgettext@plt>
   12480:	mov	r1, #0
   12484:	mov	r2, r0
   12488:	mov	r0, r1
   1248c:	bl	11298 <error@plt>
   12490:	mov	r1, r9
   12494:	mov	r2, #4
   12498:	mov	r0, fp
   1249c:	bl	1851c <fts_set@@Base>
   124a0:	mov	r0, fp
   124a4:	bl	17dd4 <fts_read@@Base>
   124a8:	mov	r3, #0
   124ac:	str	r3, [sp, #12]
   124b0:	b	12078 <__assert_fail@plt+0xbe8>
   124b4:	ldrb	r4, [r6, #13]
   124b8:	cmp	r4, #0
   124bc:	bne	12108 <__assert_fail@plt+0xc78>
   124c0:	ldr	r1, [pc, #2036]	; 12cbc <__assert_fail@plt+0x182c>
   124c4:	mov	r2, #5
   124c8:	mov	r0, r4
   124cc:	ldr	r5, [r9, #32]
   124d0:	bl	111fc <dcgettext@plt>
   124d4:	ldr	r1, [sp, #8]
   124d8:	mov	r7, r0
   124dc:	mov	r0, #4
   124e0:	bl	14e20 <__assert_fail@plt+0x3990>
   124e4:	mov	r2, r7
   124e8:	mov	r1, r5
   124ec:	mov	r3, r0
   124f0:	mov	r0, r4
   124f4:	bl	11298 <error@plt>
   124f8:	ldr	r3, [r6]
   124fc:	mov	r5, r4
   12500:	cmp	r3, #2
   12504:	str	r4, [sp, #12]
   12508:	mov	r7, r4
   1250c:	mov	r4, #1
   12510:	bne	12124 <__assert_fail@plt+0xc94>
   12514:	ldrb	r3, [r6, #4]
   12518:	cmp	r3, #0
   1251c:	bne	12078 <__assert_fail@plt+0xbe8>
   12520:	mov	r1, r9
   12524:	mov	r2, #4
   12528:	mov	r0, fp
   1252c:	bl	1851c <fts_set@@Base>
   12530:	b	12078 <__assert_fail@plt+0xbe8>
   12534:	ldr	r1, [sp, #36]	; 0x24
   12538:	cmn	r1, #1
   1253c:	beq	128f8 <__assert_fail@plt+0x1468>
   12540:	ldr	r2, [r5, #28]
   12544:	cmp	r1, r2
   12548:	beq	128f8 <__assert_fail@plt+0x1468>
   1254c:	mov	r3, #2
   12550:	ldr	r0, [r5, #24]
   12554:	str	r3, [sp, #32]
   12558:	b	12290 <__assert_fail@plt+0xe00>
   1255c:	ldr	r3, [sp, #300]	; 0x12c
   12560:	cmn	r3, #1
   12564:	beq	1279c <__assert_fail@plt+0x130c>
   12568:	ldr	lr, [r5, #28]
   1256c:	cmp	r7, #0
   12570:	sub	lr, lr, r3
   12574:	clz	lr, lr
   12578:	lsr	lr, lr, #5
   1257c:	beq	12204 <__assert_fail@plt+0xd74>
   12580:	ldr	ip, [r6, #8]
   12584:	cmp	ip, #0
   12588:	beq	12204 <__assert_fail@plt+0xd74>
   1258c:	ldrd	r0, [r5, #96]	; 0x60
   12590:	ldrd	r2, [ip]
   12594:	cmp	r1, r3
   12598:	cmpeq	r0, r2
   1259c:	bne	12204 <__assert_fail@plt+0xd74>
   125a0:	b	121f0 <__assert_fail@plt+0xd60>
   125a4:	ldr	r3, [sp, #16]
   125a8:	cmn	r3, #1
   125ac:	beq	1293c <__assert_fail@plt+0x14ac>
   125b0:	ldr	r3, [r5, #16]
   125b4:	and	r3, r3, #61440	; 0xf000
   125b8:	cmp	r3, #32768	; 0x8000
   125bc:	beq	12910 <__assert_fail@plt+0x1480>
   125c0:	cmp	r3, #16384	; 0x4000
   125c4:	moveq	r3, #18688	; 0x4900
   125c8:	streq	r3, [sp, #24]
   125cc:	bne	1293c <__assert_fail@plt+0x14ac>
   125d0:	ldr	r2, [sp, #24]
   125d4:	mov	r1, r8
   125d8:	mov	r0, sl
   125dc:	bl	111b4 <__openat64_2@plt>
   125e0:	subs	r7, r0, #0
   125e4:	bge	12624 <__assert_fail@plt+0x1194>
   125e8:	ldr	r3, [sp, #28]
   125ec:	ldr	r3, [r3]
   125f0:	cmp	r3, #13
   125f4:	bne	12650 <__assert_fail@plt+0x11c0>
   125f8:	ldr	r3, [r5, #16]
   125fc:	and	r3, r3, #61440	; 0xf000
   12600:	cmp	r3, #32768	; 0x8000
   12604:	bne	12938 <__assert_fail@plt+0x14a8>
   12608:	ldr	r3, [sp, #24]
   1260c:	mov	r0, sl
   12610:	orr	r2, r3, #1
   12614:	mov	r1, r8
   12618:	bl	111b4 <__openat64_2@plt>
   1261c:	subs	r7, r0, #0
   12620:	blt	12928 <__assert_fail@plt+0x1498>
   12624:	add	r2, sp, #144	; 0x90
   12628:	mov	r1, r7
   1262c:	mov	r0, #3
   12630:	bl	11244 <__fxstat64@plt>
   12634:	subs	ip, r0, #0
   12638:	beq	1289c <__assert_fail@plt+0x140c>
   1263c:	ldr	r8, [sp, #28]
   12640:	mov	r0, r7
   12644:	ldr	r4, [r8]
   12648:	bl	11454 <close@plt>
   1264c:	str	r4, [r8]
   12650:	ldrb	r4, [r6, #13]
   12654:	cmp	r4, #0
   12658:	bne	1278c <__assert_fail@plt+0x12fc>
   1265c:	ldr	r3, [sp, #20]
   12660:	mov	r2, #5
   12664:	cmn	r3, #1
   12668:	ldr	r3, [sp, #28]
   1266c:	ldrne	r1, [pc, #1612]	; 12cc0 <__assert_fail@plt+0x1830>
   12670:	ldreq	r1, [pc, #1612]	; 12cc4 <__assert_fail@plt+0x1834>
   12674:	mov	r0, r4
   12678:	ldr	r7, [r3]
   1267c:	bl	111fc <dcgettext@plt>
   12680:	ldr	r1, [sp, #8]
   12684:	mov	r4, r0
   12688:	mov	r0, #4
   1268c:	bl	14e20 <__assert_fail@plt+0x3990>
   12690:	mov	r2, r4
   12694:	mov	r1, r7
   12698:	mov	r4, #1
   1269c:	mov	r3, r0
   126a0:	mov	r0, #0
   126a4:	mov	r7, r0
   126a8:	str	r0, [sp, #12]
   126ac:	bl	11298 <error@plt>
   126b0:	b	12118 <__assert_fail@plt+0xc88>
   126b4:	ldr	r3, [r6]
   126b8:	cmp	r3, #2
   126bc:	bne	12178 <__assert_fail@plt+0xce8>
   126c0:	ldr	r3, [r6, #8]
   126c4:	cmp	r3, #0
   126c8:	bne	12178 <__assert_fail@plt+0xce8>
   126cc:	cmp	r4, #0
   126d0:	bne	12180 <__assert_fail@plt+0xcf0>
   126d4:	bic	sl, sl, #2
   126d8:	uxth	r7, r7
   126dc:	cmp	sl, #4
   126e0:	cmpne	r7, #1
   126e4:	ldrls	sl, [fp, #32]
   126e8:	bls	1221c <__assert_fail@plt+0xd8c>
   126ec:	b	12210 <__assert_fail@plt+0xd80>
   126f0:	cmp	sl, #0
   126f4:	beq	1284c <__assert_fail@plt+0x13bc>
   126f8:	mov	r2, #5
   126fc:	ldr	r1, [pc, #1476]	; 12cc8 <__assert_fail@plt+0x1838>
   12700:	mov	r0, #0
   12704:	bl	111fc <dcgettext@plt>
   12708:	str	r0, [sp, #32]
   1270c:	ldr	r1, [sp, #8]
   12710:	mov	r0, #4
   12714:	bl	14e20 <__assert_fail@plt+0x3990>
   12718:	ldr	r4, [sp, #24]
   1271c:	ldr	r1, [sp, #32]
   12720:	mov	r3, r7
   12724:	str	r4, [sp]
   12728:	mov	r2, r0
   1272c:	mov	r0, #1
   12730:	bl	11364 <__printf_chk@plt>
   12734:	mov	r0, r7
   12738:	bl	111a8 <free@plt>
   1273c:	mov	r0, r4
   12740:	bl	111a8 <free@plt>
   12744:	mov	r0, r8
   12748:	bl	111a8 <free@plt>
   1274c:	mov	r0, r5
   12750:	bl	111a8 <free@plt>
   12754:	ldrb	r3, [r6, #4]
   12758:	cmp	r3, #0
   1275c:	bne	12078 <__assert_fail@plt+0xbe8>
   12760:	b	12520 <__assert_fail@plt+0x1090>
   12764:	cmp	r0, #0
   12768:	beq	12ad0 <__assert_fail@plt+0x1640>
   1276c:	cmp	sl, #0
   12770:	beq	128d0 <__assert_fail@plt+0x1440>
   12774:	mov	r2, #5
   12778:	ldr	r1, [pc, #1356]	; 12ccc <__assert_fail@plt+0x183c>
   1277c:	mov	r0, #0
   12780:	bl	111fc <dcgettext@plt>
   12784:	str	r0, [sp, #32]
   12788:	b	1270c <__assert_fail@plt+0x127c>
   1278c:	mov	r3, #0
   12790:	str	r3, [sp, #12]
   12794:	mov	r7, r3
   12798:	b	12118 <__assert_fail@plt+0xc88>
   1279c:	cmp	r7, #0
   127a0:	beq	1220c <__assert_fail@plt+0xd7c>
   127a4:	ldr	ip, [r6, #8]
   127a8:	cmp	ip, #0
   127ac:	beq	1220c <__assert_fail@plt+0xd7c>
   127b0:	ldrd	r0, [r5, #96]	; 0x60
   127b4:	ldrd	r2, [ip]
   127b8:	cmp	r1, r3
   127bc:	cmpeq	r0, r2
   127c0:	bne	1220c <__assert_fail@plt+0xd7c>
   127c4:	ldrd	r2, [r5]
   127c8:	ldrd	r0, [ip, #8]
   127cc:	cmp	r3, r1
   127d0:	cmpeq	r2, r0
   127d4:	bne	1220c <__assert_fail@plt+0xd7c>
   127d8:	ldr	r7, [sp, #8]
   127dc:	ldr	r1, [pc, #1228]	; 12cb0 <__assert_fail@plt+0x1820>
   127e0:	mov	r0, r7
   127e4:	bl	11178 <strcmp@plt>
   127e8:	mov	r2, #5
   127ec:	subs	r4, r0, #0
   127f0:	bne	12bb4 <__assert_fail@plt+0x1724>
   127f4:	ldr	r1, [pc, #1236]	; 12cd0 <__assert_fail@plt+0x1840>
   127f8:	bl	111fc <dcgettext@plt>
   127fc:	mov	r1, r7
   12800:	mov	r5, r0
   12804:	mov	r0, #4
   12808:	bl	14e20 <__assert_fail@plt+0x3990>
   1280c:	mov	r2, r5
   12810:	mov	r1, r4
   12814:	mov	r3, r0
   12818:	mov	r0, r4
   1281c:	bl	11298 <error@plt>
   12820:	mov	r2, #5
   12824:	ldr	r1, [pc, #1164]	; 12cb8 <__assert_fail@plt+0x1828>
   12828:	mov	r0, #0
   1282c:	bl	111fc <dcgettext@plt>
   12830:	mov	r1, #0
   12834:	mov	r2, r0
   12838:	mov	r0, r1
   1283c:	bl	11298 <error@plt>
   12840:	mov	r3, #0
   12844:	str	r3, [sp, #12]
   12848:	b	12078 <__assert_fail@plt+0xbe8>
   1284c:	cmp	r4, #0
   12850:	movne	r0, sl
   12854:	movne	r2, #5
   12858:	ldrne	r1, [pc, #1140]	; 12cd4 <__assert_fail@plt+0x1844>
   1285c:	moveq	r0, r4
   12860:	moveq	r2, #5
   12864:	ldreq	r1, [pc, #1132]	; 12cd8 <__assert_fail@plt+0x1848>
   12868:	bl	111fc <dcgettext@plt>
   1286c:	str	r0, [sp, #32]
   12870:	b	1270c <__assert_fail@plt+0x127c>
   12874:	cmp	r4, #0
   12878:	movne	r0, sl
   1287c:	movne	r2, #5
   12880:	ldrne	r1, [pc, #1108]	; 12cdc <__assert_fail@plt+0x184c>
   12884:	moveq	r0, r4
   12888:	moveq	r2, #5
   1288c:	ldreq	r1, [pc, #1100]	; 12ce0 <__assert_fail@plt+0x1850>
   12890:	bl	111fc <dcgettext@plt>
   12894:	str	r0, [sp, #32]
   12898:	b	1270c <__assert_fail@plt+0x127c>
   1289c:	ldrd	r0, [r5, #96]	; 0x60
   128a0:	ldrd	r2, [sp, #240]	; 0xf0
   128a4:	cmp	r1, r3
   128a8:	cmpeq	r0, r2
   128ac:	beq	12b60 <__assert_fail@plt+0x16d0>
   128b0:	ldr	sl, [sp, #28]
   128b4:	mov	r0, r7
   128b8:	str	ip, [sp, #12]
   128bc:	ldr	r8, [sl]
   128c0:	mov	r7, ip
   128c4:	bl	11454 <close@plt>
   128c8:	str	r8, [sl]
   128cc:	b	12118 <__assert_fail@plt+0xc88>
   128d0:	cmp	r4, #0
   128d4:	movne	r0, sl
   128d8:	movne	r2, #5
   128dc:	ldrne	r1, [pc, #1024]	; 12ce4 <__assert_fail@plt+0x1854>
   128e0:	moveq	r0, r4
   128e4:	moveq	r2, #5
   128e8:	ldreq	r1, [pc, #1016]	; 12ce8 <__assert_fail@plt+0x1858>
   128ec:	bl	111fc <dcgettext@plt>
   128f0:	str	r0, [sp, #32]
   128f4:	b	1270c <__assert_fail@plt+0x127c>
   128f8:	cmp	r3, #0
   128fc:	bne	12514 <__assert_fail@plt+0x1084>
   12900:	mov	r3, #4
   12904:	str	r3, [sp, #32]
   12908:	ldr	r0, [r5, #24]
   1290c:	b	12290 <__assert_fail@plt+0xe00>
   12910:	mov	r3, #2304	; 0x900
   12914:	str	r3, [sp, #24]
   12918:	b	125d0 <__assert_fail@plt+0x1140>
   1291c:	mov	r4, #1
   12920:	mov	r7, r4
   12924:	b	12118 <__assert_fail@plt+0xc88>
   12928:	ldr	r3, [sp, #28]
   1292c:	ldr	r3, [r3]
   12930:	cmp	r3, #13
   12934:	bne	12650 <__assert_fail@plt+0x11c0>
   12938:	ldr	sl, [fp, #32]
   1293c:	mov	r3, #0
   12940:	str	r3, [sp]
   12944:	mov	r1, r8
   12948:	mov	r0, sl
   1294c:	ldr	r3, [sp, #36]	; 0x24
   12950:	ldr	r2, [sp, #20]
   12954:	bl	11418 <fchownat@plt>
   12958:	clz	r0, r0
   1295c:	lsr	r0, r0, #5
   12960:	b	12258 <__assert_fail@plt+0xdc8>
   12964:	ldr	r2, [sp, #8]
   12968:	mov	r1, #3
   1296c:	mov	r0, r4
   12970:	ldr	r5, [r9, #32]
   12974:	bl	14efc <__assert_fail@plt+0x3a6c>
   12978:	mov	r1, r5
   1297c:	ldr	r2, [pc, #872]	; 12cec <__assert_fail@plt+0x185c>
   12980:	mov	r3, r0
   12984:	b	124f0 <__assert_fail@plt+0x1060>
   12988:	cmp	r4, #0
   1298c:	bne	12ba8 <__assert_fail@plt+0x1718>
   12990:	cmp	r5, #0
   12994:	moveq	r8, r5
   12998:	beq	129b4 <__assert_fail@plt+0x1524>
   1299c:	ldr	r0, [r5, #24]
   129a0:	bl	11fc8 <__assert_fail@plt+0xb38>
   129a4:	mov	r8, r0
   129a8:	ldr	r0, [r5, #28]
   129ac:	bl	11f6c <__assert_fail@plt+0xadc>
   129b0:	mov	r5, r0
   129b4:	mov	r2, #5
   129b8:	ldr	r1, [pc, #816]	; 12cf0 <__assert_fail@plt+0x1860>
   129bc:	mov	r0, #0
   129c0:	bl	111fc <dcgettext@plt>
   129c4:	ldr	r1, [sp, #8]
   129c8:	mov	r4, r0
   129cc:	mov	r0, #4
   129d0:	bl	14e20 <__assert_fail@plt+0x3990>
   129d4:	mov	r1, r4
   129d8:	mov	r2, r0
   129dc:	mov	r0, #1
   129e0:	bl	11364 <__printf_chk@plt>
   129e4:	b	12744 <__assert_fail@plt+0x12b4>
   129e8:	mov	r5, #0
   129ec:	ldr	r1, [fp, #32]
   129f0:	add	r3, sp, #40	; 0x28
   129f4:	str	r5, [sp]
   129f8:	mov	r2, r8
   129fc:	mov	r0, #3
   12a00:	bl	1122c <__fxstatat64@plt>
   12a04:	cmp	r0, r5
   12a08:	beq	12af8 <__assert_fail@plt+0x1668>
   12a0c:	ldrb	r4, [r6, #13]
   12a10:	cmp	r4, #0
   12a14:	movne	r7, r5
   12a18:	strne	r7, [sp, #12]
   12a1c:	addne	r5, sp, #40	; 0x28
   12a20:	bne	12118 <__assert_fail@plt+0xc88>
   12a24:	ldr	r3, [sp, #28]
   12a28:	mov	r2, #5
   12a2c:	ldr	r1, [pc, #704]	; 12cf4 <__assert_fail@plt+0x1864>
   12a30:	mov	r0, r4
   12a34:	ldr	r5, [r3]
   12a38:	bl	111fc <dcgettext@plt>
   12a3c:	ldr	r1, [sp, #8]
   12a40:	mov	r7, r0
   12a44:	mov	r0, #4
   12a48:	bl	14e20 <__assert_fail@plt+0x3990>
   12a4c:	mov	r2, r7
   12a50:	mov	r1, r5
   12a54:	str	r4, [sp, #12]
   12a58:	mov	r7, r4
   12a5c:	add	r5, sp, #40	; 0x28
   12a60:	mov	r3, r0
   12a64:	mov	r0, r4
   12a68:	bl	11298 <error@plt>
   12a6c:	mov	r4, #1
   12a70:	b	12118 <__assert_fail@plt+0xc88>
   12a74:	ldrb	r3, [r6, #12]
   12a78:	cmp	r3, #0
   12a7c:	bne	1205c <__assert_fail@plt+0xbcc>
   12a80:	ldr	r3, [r6]
   12a84:	cmp	r3, #2
   12a88:	orreq	r1, r1, #8
   12a8c:	b	1205c <__assert_fail@plt+0xbcc>
   12a90:	ldr	r3, [sp, #28]
   12a94:	mov	r2, #5
   12a98:	ldr	r1, [pc, #600]	; 12cf8 <__assert_fail@plt+0x1868>
   12a9c:	mov	r0, #0
   12aa0:	ldr	r4, [r3]
   12aa4:	bl	111fc <dcgettext@plt>
   12aa8:	mov	r1, r4
   12aac:	mov	r2, r0
   12ab0:	mov	r0, #0
   12ab4:	bl	11298 <error@plt>
   12ab8:	mov	r3, #0
   12abc:	str	r3, [sp, #12]
   12ac0:	b	123a8 <__assert_fail@plt+0xf18>
   12ac4:	mov	r4, #0
   12ac8:	mov	r7, #1
   12acc:	b	12118 <__assert_fail@plt+0xc88>
   12ad0:	cmp	sl, #0
   12ad4:	mov	r2, #5
   12ad8:	beq	12b28 <__assert_fail@plt+0x1698>
   12adc:	ldr	r1, [pc, #536]	; 12cfc <__assert_fail@plt+0x186c>
   12ae0:	ldr	r7, [sp, #24]
   12ae4:	bl	111fc <dcgettext@plt>
   12ae8:	mov	r3, #0
   12aec:	str	r3, [sp, #24]
   12af0:	str	r0, [sp, #32]
   12af4:	b	1270c <__assert_fail@plt+0x127c>
   12af8:	ldrh	sl, [r9, #60]	; 0x3c
   12afc:	add	r5, sp, #40	; 0x28
   12b00:	sub	r7, sl, #1
   12b04:	b	12190 <__assert_fail@plt+0xd00>
   12b08:	mov	r2, #5
   12b0c:	ldr	r1, [pc, #492]	; 12d00 <__assert_fail@plt+0x1870>
   12b10:	bl	111fc <dcgettext@plt>
   12b14:	mov	r1, r4
   12b18:	mov	r2, r0
   12b1c:	ldr	r0, [sp, #12]
   12b20:	bl	11298 <error@plt>
   12b24:	b	12398 <__assert_fail@plt+0xf08>
   12b28:	cmp	r4, #0
   12b2c:	beq	12c34 <__assert_fail@plt+0x17a4>
   12b30:	ldr	r1, [pc, #460]	; 12d04 <__assert_fail@plt+0x1874>
   12b34:	ldr	r7, [sp, #24]
   12b38:	bl	111fc <dcgettext@plt>
   12b3c:	str	sl, [sp, #24]
   12b40:	str	r0, [sp, #32]
   12b44:	b	1270c <__assert_fail@plt+0x127c>
   12b48:	mov	r2, #1
   12b4c:	str	r2, [r9, #16]
   12b50:	mov	r1, r9
   12b54:	mov	r0, fp
   12b58:	bl	1851c <fts_set@@Base>
   12b5c:	b	12078 <__assert_fail@plt+0xbe8>
   12b60:	ldrd	r0, [r5]
   12b64:	ldrd	r2, [sp, #144]	; 0x90
   12b68:	cmp	r1, r3
   12b6c:	cmpeq	r0, r2
   12b70:	bne	128b0 <__assert_fail@plt+0x1420>
   12b74:	ldr	r3, [sp, #296]	; 0x128
   12b78:	cmn	r3, #1
   12b7c:	beq	12c4c <__assert_fail@plt+0x17bc>
   12b80:	ldr	r3, [sp, #168]	; 0xa8
   12b84:	ldr	r2, [sp, #296]	; 0x128
   12b88:	cmp	r2, r3
   12b8c:	beq	12c4c <__assert_fail@plt+0x17bc>
   12b90:	ldr	r8, [sp, #28]
   12b94:	mov	r0, r7
   12b98:	ldr	r4, [r8]
   12b9c:	bl	11454 <close@plt>
   12ba0:	str	r4, [r8]
   12ba4:	b	12260 <__assert_fail@plt+0xdd0>
   12ba8:	mov	r3, #4
   12bac:	str	r3, [sp, #32]
   12bb0:	b	1213c <__assert_fail@plt+0xcac>
   12bb4:	ldr	r1, [pc, #248]	; 12cb4 <__assert_fail@plt+0x1824>
   12bb8:	mov	r0, #0
   12bbc:	bl	111fc <dcgettext@plt>
   12bc0:	ldr	r2, [sp, #8]
   12bc4:	mov	r1, #4
   12bc8:	mov	r4, r0
   12bcc:	mov	r0, #0
   12bd0:	bl	14d6c <__assert_fail@plt+0x38dc>
   12bd4:	ldr	r2, [pc, #212]	; 12cb0 <__assert_fail@plt+0x1820>
   12bd8:	mov	r1, #4
   12bdc:	mov	r5, r0
   12be0:	mov	r0, #1
   12be4:	bl	14d6c <__assert_fail@plt+0x38dc>
   12be8:	mov	r1, #0
   12bec:	mov	r3, r5
   12bf0:	mov	r2, r4
   12bf4:	str	r0, [sp]
   12bf8:	mov	r0, r1
   12bfc:	bl	11298 <error@plt>
   12c00:	b	12820 <__assert_fail@plt+0x1390>
   12c04:	ldr	r1, [pc, #196]	; 12cd0 <__assert_fail@plt+0x1840>
   12c08:	bl	111fc <dcgettext@plt>
   12c0c:	mov	r1, r7
   12c10:	mov	r5, r0
   12c14:	mov	r0, #4
   12c18:	bl	14e20 <__assert_fail@plt+0x3990>
   12c1c:	mov	r2, r5
   12c20:	mov	r1, r4
   12c24:	mov	r3, r0
   12c28:	mov	r0, r4
   12c2c:	bl	11298 <error@plt>
   12c30:	b	12470 <__assert_fail@plt+0xfe0>
   12c34:	ldr	r1, [pc, #172]	; 12ce8 <__assert_fail@plt+0x1858>
   12c38:	ldr	r7, [sp, #24]
   12c3c:	bl	111fc <dcgettext@plt>
   12c40:	str	r4, [sp, #24]
   12c44:	str	r0, [sp, #32]
   12c48:	b	1270c <__assert_fail@plt+0x127c>
   12c4c:	ldr	r3, [sp, #300]	; 0x12c
   12c50:	cmn	r3, #1
   12c54:	beq	12c68 <__assert_fail@plt+0x17d8>
   12c58:	ldr	r3, [sp, #172]	; 0xac
   12c5c:	ldr	r2, [sp, #300]	; 0x12c
   12c60:	cmp	r2, r3
   12c64:	bne	12b90 <__assert_fail@plt+0x1700>
   12c68:	ldr	r2, [sp, #36]	; 0x24
   12c6c:	ldr	r1, [sp, #20]
   12c70:	mov	r0, r7
   12c74:	bl	11334 <fchown@plt>
   12c78:	cmp	r0, #0
   12c7c:	bne	1263c <__assert_fail@plt+0x11ac>
   12c80:	mov	r0, r7
   12c84:	bl	11454 <close@plt>
   12c88:	cmp	r0, #0
   12c8c:	bne	12650 <__assert_fail@plt+0x11c0>
   12c90:	b	12260 <__assert_fail@plt+0xdd0>
   12c94:	bl	11208 <__stack_chk_fail@plt>
   12c98:	mov	r4, r7
   12c9c:	b	12118 <__assert_fail@plt+0xc88>
   12ca0:	andeq	fp, r2, r8, lsl #30
   12ca4:	andeq	fp, r1, ip, asr #1
   12ca8:	andeq	fp, r1, ip, lsr r2
   12cac:	strdeq	fp, [r1], -ip
   12cb0:	andeq	sl, r1, ip, lsl pc
   12cb4:	andeq	fp, r1, ip, asr r0
   12cb8:	muleq	r1, r8, r0
   12cbc:	andeq	fp, r1, r0, ror #1
   12cc0:	ldrdeq	fp, [r1], -r0
   12cc4:	andeq	fp, r1, ip, ror #3
   12cc8:	andeq	fp, r1, r4, ror r3
   12ccc:	andeq	fp, r1, r8, lsr #5
   12cd0:	andeq	fp, r1, ip, lsr #32
   12cd4:	muleq	r1, r4, r3
   12cd8:			; <UNDEFINED> instruction: 0x0001b3b0
   12cdc:	andeq	fp, r1, r4, ror #4
   12ce0:	andeq	fp, r1, r8, lsl #5
   12ce4:	ldrdeq	fp, [r1], -r8
   12ce8:	andeq	fp, r1, r4, lsl #6
   12cec:	andeq	sl, r1, r4, ror lr
   12cf0:	andeq	fp, r1, r4, lsl #4
   12cf4:			; <UNDEFINED> instruction: 0x0001b1b8
   12cf8:	andeq	fp, r1, ip, asr #7
   12cfc:	andeq	fp, r1, r8, lsr #6
   12d00:	andeq	fp, r1, ip, lsl r0
   12d04:	andeq	fp, r1, r0, asr r3
   12d08:	ldr	r3, [pc, #4]	; 12d14 <__assert_fail@plt+0x1884>
   12d0c:	str	r0, [r3]
   12d10:	bx	lr
   12d14:	andeq	ip, r2, r0, asr #3
   12d18:	ldr	r3, [pc, #4]	; 12d24 <__assert_fail@plt+0x1894>
   12d1c:	strb	r0, [r3, #4]
   12d20:	bx	lr
   12d24:	andeq	ip, r2, r0, asr #3
   12d28:	ldr	r3, [pc, #180]	; 12de4 <__assert_fail@plt+0x1954>
   12d2c:	push	{r4, r5, r6, lr}
   12d30:	sub	sp, sp, #8
   12d34:	ldr	r0, [r3]
   12d38:	bl	1871c <fts_children@@Base+0x1cc>
   12d3c:	cmp	r0, #0
   12d40:	beq	12d68 <__assert_fail@plt+0x18d8>
   12d44:	bl	11340 <__errno_location@plt>
   12d48:	ldr	r5, [pc, #152]	; 12de8 <__assert_fail@plt+0x1958>
   12d4c:	ldrb	r3, [r5, #4]
   12d50:	cmp	r3, #0
   12d54:	mov	r4, r0
   12d58:	beq	12d84 <__assert_fail@plt+0x18f4>
   12d5c:	ldr	r3, [r0]
   12d60:	cmp	r3, #32
   12d64:	bne	12d84 <__assert_fail@plt+0x18f4>
   12d68:	ldr	r3, [pc, #124]	; 12dec <__assert_fail@plt+0x195c>
   12d6c:	ldr	r0, [r3]
   12d70:	bl	1871c <fts_children@@Base+0x1cc>
   12d74:	cmp	r0, #0
   12d78:	bne	12dc4 <__assert_fail@plt+0x1934>
   12d7c:	add	sp, sp, #8
   12d80:	pop	{r4, r5, r6, pc}
   12d84:	mov	r2, #5
   12d88:	ldr	r1, [pc, #96]	; 12df0 <__assert_fail@plt+0x1960>
   12d8c:	mov	r0, #0
   12d90:	bl	111fc <dcgettext@plt>
   12d94:	mov	r6, r0
   12d98:	ldr	r0, [r5]
   12d9c:	cmp	r0, #0
   12da0:	beq	12dd0 <__assert_fail@plt+0x1940>
   12da4:	ldr	r4, [r4]
   12da8:	bl	14ee8 <__assert_fail@plt+0x3a58>
   12dac:	mov	r1, r4
   12db0:	str	r6, [sp]
   12db4:	ldr	r2, [pc, #56]	; 12df4 <__assert_fail@plt+0x1964>
   12db8:	mov	r3, r0
   12dbc:	mov	r0, #0
   12dc0:	bl	11298 <error@plt>
   12dc4:	ldr	r3, [pc, #44]	; 12df8 <__assert_fail@plt+0x1968>
   12dc8:	ldr	r0, [r3]
   12dcc:	bl	111c0 <_exit@plt>
   12dd0:	mov	r3, r6
   12dd4:	ldr	r1, [r4]
   12dd8:	ldr	r2, [pc, #28]	; 12dfc <__assert_fail@plt+0x196c>
   12ddc:	bl	11298 <error@plt>
   12de0:	b	12dc4 <__assert_fail@plt+0x1934>
   12de4:	muleq	r2, ip, r1
   12de8:	andeq	ip, r2, r0, asr #3
   12dec:	muleq	r2, r8, r1
   12df0:	andeq	fp, r1, r8, ror #7
   12df4:	andeq	sl, r1, r0, ror lr
   12df8:	andeq	ip, r2, r0, asr #2
   12dfc:	andeq	sl, r1, r4, ror lr
   12e00:	push	{r4, r5, r6, lr}
   12e04:	mov	r4, r0
   12e08:	mov	r5, r1
   12e0c:	add	r6, r2, #20
   12e10:	mov	r3, #0
   12e14:	strb	r3, [r2, #20]
   12e18:	mov	r0, r4
   12e1c:	mov	r1, r5
   12e20:	mov	r2, #10
   12e24:	mov	r3, #0
   12e28:	bl	1a0a4 <fts_children@@Base+0x1b54>
   12e2c:	mov	r0, r4
   12e30:	mov	r1, r5
   12e34:	mov	r3, #0
   12e38:	add	r2, r2, #48	; 0x30
   12e3c:	strb	r2, [r6, #-1]!
   12e40:	mov	r2, #10
   12e44:	bl	1a0a4 <fts_children@@Base+0x1b54>
   12e48:	cmp	r5, #0
   12e4c:	cmpeq	r4, #9
   12e50:	mov	r5, r1
   12e54:	mov	r4, r0
   12e58:	bhi	12e18 <__assert_fail@plt+0x1988>
   12e5c:	mov	r0, r6
   12e60:	pop	{r4, r5, r6, pc}
   12e64:	push	{r4, r5, r6, lr}
   12e68:	subs	r4, r0, #0
   12e6c:	beq	12ee0 <__assert_fail@plt+0x1a50>
   12e70:	mov	r1, #47	; 0x2f
   12e74:	bl	113c4 <strrchr@plt>
   12e78:	subs	r5, r0, #0
   12e7c:	beq	12ecc <__assert_fail@plt+0x1a3c>
   12e80:	add	r6, r5, #1
   12e84:	sub	r3, r6, r4
   12e88:	cmp	r3, #6
   12e8c:	ble	12ecc <__assert_fail@plt+0x1a3c>
   12e90:	mov	r2, #7
   12e94:	ldr	r1, [pc, #96]	; 12efc <__assert_fail@plt+0x1a6c>
   12e98:	sub	r0, r5, #6
   12e9c:	bl	1143c <strncmp@plt>
   12ea0:	cmp	r0, #0
   12ea4:	bne	12ecc <__assert_fail@plt+0x1a3c>
   12ea8:	mov	r2, #3
   12eac:	ldr	r1, [pc, #76]	; 12f00 <__assert_fail@plt+0x1a70>
   12eb0:	mov	r0, r6
   12eb4:	bl	1143c <strncmp@plt>
   12eb8:	cmp	r0, #0
   12ebc:	movne	r4, r6
   12ec0:	ldreq	r3, [pc, #60]	; 12f04 <__assert_fail@plt+0x1a74>
   12ec4:	addeq	r4, r5, #4
   12ec8:	streq	r4, [r3]
   12ecc:	ldr	r2, [pc, #52]	; 12f08 <__assert_fail@plt+0x1a78>
   12ed0:	ldr	r3, [pc, #52]	; 12f0c <__assert_fail@plt+0x1a7c>
   12ed4:	str	r4, [r2]
   12ed8:	str	r4, [r3]
   12edc:	pop	{r4, r5, r6, pc}
   12ee0:	ldr	r3, [pc, #40]	; 12f10 <__assert_fail@plt+0x1a80>
   12ee4:	mov	r2, #55	; 0x37
   12ee8:	mov	r1, #1
   12eec:	ldr	r3, [r3]
   12ef0:	ldr	r0, [pc, #28]	; 12f14 <__assert_fail@plt+0x1a84>
   12ef4:	bl	11250 <fwrite@plt>
   12ef8:	bl	11448 <abort@plt>
   12efc:	andeq	fp, r1, ip, lsr #8
   12f00:	andeq	fp, r1, r4, lsr r4
   12f04:	andeq	ip, r2, r8, lsl #3
   12f08:	andeq	ip, r2, r8, asr #3
   12f0c:	andeq	ip, r2, ip, lsl #3
   12f10:	muleq	r2, r8, r1
   12f14:	strdeq	fp, [r1], -r4
   12f18:	push	{r4, lr}
   12f1c:	mov	r2, #48	; 0x30
   12f20:	mov	r4, r1
   12f24:	mov	r1, #0
   12f28:	bl	11358 <memset@plt>
   12f2c:	cmp	r4, #10
   12f30:	beq	12f3c <__assert_fail@plt+0x1aac>
   12f34:	str	r4, [r0]
   12f38:	pop	{r4, pc}
   12f3c:	bl	11448 <abort@plt>
   12f40:	push	{r4, r5, r6, lr}
   12f44:	mov	r2, #5
   12f48:	mov	r5, r0
   12f4c:	mov	r6, r1
   12f50:	mov	r1, r0
   12f54:	mov	r0, #0
   12f58:	bl	111fc <dcgettext@plt>
   12f5c:	cmp	r5, r0
   12f60:	mov	r4, r0
   12f64:	beq	12f70 <__assert_fail@plt+0x1ae0>
   12f68:	mov	r0, r4
   12f6c:	pop	{r4, r5, r6, pc}
   12f70:	bl	19acc <fts_children@@Base+0x157c>
   12f74:	ldrb	r3, [r0]
   12f78:	bic	r3, r3, #32
   12f7c:	cmp	r3, #85	; 0x55
   12f80:	bne	12fe0 <__assert_fail@plt+0x1b50>
   12f84:	ldrb	r3, [r0, #1]
   12f88:	bic	r3, r3, #32
   12f8c:	cmp	r3, #84	; 0x54
   12f90:	bne	13058 <__assert_fail@plt+0x1bc8>
   12f94:	ldrb	r3, [r0, #2]
   12f98:	bic	r3, r3, #32
   12f9c:	cmp	r3, #70	; 0x46
   12fa0:	bne	13058 <__assert_fail@plt+0x1bc8>
   12fa4:	ldrb	r3, [r0, #3]
   12fa8:	cmp	r3, #45	; 0x2d
   12fac:	bne	13058 <__assert_fail@plt+0x1bc8>
   12fb0:	ldrb	r3, [r0, #4]
   12fb4:	cmp	r3, #56	; 0x38
   12fb8:	bne	13058 <__assert_fail@plt+0x1bc8>
   12fbc:	ldrb	r3, [r0, #5]
   12fc0:	cmp	r3, #0
   12fc4:	bne	13058 <__assert_fail@plt+0x1bc8>
   12fc8:	ldrb	r2, [r4]
   12fcc:	ldr	r3, [pc, #156]	; 13070 <__assert_fail@plt+0x1be0>
   12fd0:	ldr	r4, [pc, #156]	; 13074 <__assert_fail@plt+0x1be4>
   12fd4:	cmp	r2, #96	; 0x60
   12fd8:	movne	r4, r3
   12fdc:	b	12f68 <__assert_fail@plt+0x1ad8>
   12fe0:	cmp	r3, #71	; 0x47
   12fe4:	bne	13058 <__assert_fail@plt+0x1bc8>
   12fe8:	ldrb	r3, [r0, #1]
   12fec:	bic	r3, r3, #32
   12ff0:	cmp	r3, #66	; 0x42
   12ff4:	bne	13058 <__assert_fail@plt+0x1bc8>
   12ff8:	ldrb	r3, [r0, #2]
   12ffc:	cmp	r3, #49	; 0x31
   13000:	bne	13058 <__assert_fail@plt+0x1bc8>
   13004:	ldrb	r3, [r0, #3]
   13008:	cmp	r3, #56	; 0x38
   1300c:	bne	13058 <__assert_fail@plt+0x1bc8>
   13010:	ldrb	r3, [r0, #4]
   13014:	cmp	r3, #48	; 0x30
   13018:	bne	13058 <__assert_fail@plt+0x1bc8>
   1301c:	ldrb	r3, [r0, #5]
   13020:	cmp	r3, #51	; 0x33
   13024:	bne	13058 <__assert_fail@plt+0x1bc8>
   13028:	ldrb	r3, [r0, #6]
   1302c:	cmp	r3, #48	; 0x30
   13030:	bne	13058 <__assert_fail@plt+0x1bc8>
   13034:	ldrb	r3, [r0, #7]
   13038:	cmp	r3, #0
   1303c:	bne	13058 <__assert_fail@plt+0x1bc8>
   13040:	ldrb	r2, [r4]
   13044:	ldr	r3, [pc, #44]	; 13078 <__assert_fail@plt+0x1be8>
   13048:	ldr	r4, [pc, #44]	; 1307c <__assert_fail@plt+0x1bec>
   1304c:	cmp	r2, #96	; 0x60
   13050:	movne	r4, r3
   13054:	b	12f68 <__assert_fail@plt+0x1ad8>
   13058:	ldr	r3, [pc, #32]	; 13080 <__assert_fail@plt+0x1bf0>
   1305c:	ldr	r4, [pc, #32]	; 13084 <__assert_fail@plt+0x1bf4>
   13060:	cmp	r6, #9
   13064:	movne	r4, r3
   13068:	mov	r0, r4
   1306c:	pop	{r4, r5, r6, pc}
   13070:	muleq	r1, r0, r4
   13074:	muleq	r1, ip, r4
   13078:	muleq	r1, r4, r4
   1307c:	muleq	r1, r8, r4
   13080:	andeq	fp, r1, r0, lsr #9
   13084:	andeq	fp, r1, ip, lsl #9
   13088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1308c:	sub	sp, sp, #124	; 0x7c
   13090:	ldr	ip, [pc, #3576]	; 13e90 <__assert_fail@plt+0x2a00>
   13094:	str	r3, [sp, #24]
   13098:	ldr	r3, [sp, #168]	; 0xa8
   1309c:	ldr	ip, [ip]
   130a0:	str	r3, [sp, #56]	; 0x38
   130a4:	ldr	r3, [sp, #172]	; 0xac
   130a8:	ldr	r8, [sp, #160]	; 0xa0
   130ac:	str	r3, [sp, #80]	; 0x50
   130b0:	ldr	r3, [sp, #176]	; 0xb0
   130b4:	mov	fp, r0
   130b8:	str	r3, [sp, #76]	; 0x4c
   130bc:	mov	sl, r1
   130c0:	str	r2, [sp, #36]	; 0x24
   130c4:	str	ip, [sp, #116]	; 0x74
   130c8:	bl	11268 <__ctype_get_mb_cur_max@plt>
   130cc:	ldr	r3, [sp, #164]	; 0xa4
   130d0:	ands	r4, r3, #2
   130d4:	movne	r3, #1
   130d8:	moveq	r3, #0
   130dc:	str	r3, [sp, #32]
   130e0:	str	r0, [sp, #64]	; 0x40
   130e4:	cmp	r8, #10
   130e8:	ldrls	pc, [pc, r8, lsl #2]
   130ec:	b	1489c <__assert_fail@plt+0x340c>
   130f0:	andeq	r3, r1, r4, ror #9
   130f4:	andeq	r3, r1, ip, ror r5
   130f8:	andeq	r3, r1, ip, ror fp
   130fc:	muleq	r1, ip, r5
   13100:	andeq	r3, r1, r0, asr r4
   13104:	muleq	r1, r8, r4
   13108:	andeq	r3, r1, r4, lsl r5
   1310c:	andeq	r3, r1, ip, asr #10
   13110:	andeq	r3, r1, ip, lsl r1
   13114:	andeq	r3, r1, ip, lsl r1
   13118:	andeq	r3, r1, ip, lsl r1
   1311c:	cmp	r8, #10
   13120:	beq	13144 <__assert_fail@plt+0x1cb4>
   13124:	mov	r1, r8
   13128:	ldr	r0, [pc, #3428]	; 13e94 <__assert_fail@plt+0x2a04>
   1312c:	bl	12f40 <__assert_fail@plt+0x1ab0>
   13130:	mov	r1, r8
   13134:	str	r0, [sp, #80]	; 0x50
   13138:	ldr	r0, [pc, #3420]	; 13e9c <__assert_fail@plt+0x2a0c>
   1313c:	bl	12f40 <__assert_fail@plt+0x1ab0>
   13140:	str	r0, [sp, #76]	; 0x4c
   13144:	cmp	r4, #0
   13148:	movne	r4, #0
   1314c:	beq	1455c <__assert_fail@plt+0x30cc>
   13150:	ldr	r7, [sp, #76]	; 0x4c
   13154:	mov	r5, #0
   13158:	mov	r6, #1
   1315c:	mov	r0, r7
   13160:	str	r6, [sp, #40]	; 0x28
   13164:	str	r5, [sp, #68]	; 0x44
   13168:	bl	11310 <strlen@plt>
   1316c:	str	r6, [sp, #28]
   13170:	str	r5, [sp, #44]	; 0x2c
   13174:	str	r5, [sp, #72]	; 0x48
   13178:	str	r7, [sp, #60]	; 0x3c
   1317c:	str	r0, [sp, #52]	; 0x34
   13180:	str	r8, [sp, #160]	; 0xa0
   13184:	mov	r8, fp
   13188:	ldr	fp, [sp, #160]	; 0xa0
   1318c:	mov	r9, #0
   13190:	ldr	r3, [sp, #24]
   13194:	cmn	r3, #1
   13198:	beq	13700 <__assert_fail@plt+0x2270>
   1319c:	ldr	r3, [sp, #24]
   131a0:	subs	r6, r3, r9
   131a4:	movne	r6, #1
   131a8:	cmp	r6, #0
   131ac:	beq	13718 <__assert_fail@plt+0x2288>
   131b0:	ldr	r7, [sp, #28]
   131b4:	ldr	r0, [sp, #36]	; 0x24
   131b8:	cmp	fp, #2
   131bc:	moveq	r7, #0
   131c0:	andne	r7, r7, #1
   131c4:	add	r3, r0, r9
   131c8:	cmp	r7, #0
   131cc:	str	r3, [sp, #48]	; 0x30
   131d0:	beq	13bbc <__assert_fail@plt+0x272c>
   131d4:	ldr	r2, [sp, #52]	; 0x34
   131d8:	cmp	r2, #0
   131dc:	beq	13ea0 <__assert_fail@plt+0x2a10>
   131e0:	ldr	r1, [sp, #24]
   131e4:	cmp	r2, #1
   131e8:	mov	r3, r2
   131ec:	movls	r3, #0
   131f0:	movhi	r3, #1
   131f4:	cmn	r1, #1
   131f8:	movne	r3, #0
   131fc:	cmp	r3, #0
   13200:	add	r5, r9, r2
   13204:	beq	13210 <__assert_fail@plt+0x1d80>
   13208:	bl	11310 <strlen@plt>
   1320c:	str	r0, [sp, #24]
   13210:	ldr	r3, [sp, #24]
   13214:	cmp	r5, r3
   13218:	bhi	13ea0 <__assert_fail@plt+0x2a10>
   1321c:	ldr	r2, [sp, #52]	; 0x34
   13220:	ldr	r1, [sp, #60]	; 0x3c
   13224:	ldr	r0, [sp, #48]	; 0x30
   13228:	bl	111e4 <memcmp@plt>
   1322c:	cmp	r0, #0
   13230:	bne	13ea0 <__assert_fail@plt+0x2a10>
   13234:	ldr	r3, [sp, #32]
   13238:	cmp	r3, #0
   1323c:	bne	1475c <__assert_fail@plt+0x32cc>
   13240:	ldr	r3, [sp, #48]	; 0x30
   13244:	ldrb	r5, [r3]
   13248:	cmp	r5, #126	; 0x7e
   1324c:	ldrls	pc, [pc, r5, lsl #2]
   13250:	b	13b20 <__assert_fail@plt+0x2690>
   13254:	andeq	r3, r1, ip, lsl #20
   13258:	andeq	r3, r1, r0, lsr #22
   1325c:	andeq	r3, r1, r0, lsr #22
   13260:	andeq	r3, r1, r0, lsr #22
   13264:	andeq	r3, r1, r0, lsr #22
   13268:	andeq	r3, r1, r0, lsr #22
   1326c:	andeq	r3, r1, r0, lsr #22
   13270:	ldrdeq	r3, [r1], -r8
   13274:	andeq	r3, r1, r8, asr #21
   13278:	andeq	r3, r1, r8, asr #19
   1327c:	muleq	r1, r0, r9
   13280:	andeq	r3, r1, r8, ror #19
   13284:	ldrdeq	r3, [r1], -r0
   13288:	andeq	r3, r1, r0, lsl #18
   1328c:	andeq	r3, r1, r0, lsr #22
   13290:	andeq	r3, r1, r0, lsr #22
   13294:	andeq	r3, r1, r0, lsr #22
   13298:	andeq	r3, r1, r0, lsr #22
   1329c:	andeq	r3, r1, r0, lsr #22
   132a0:	andeq	r3, r1, r0, lsr #22
   132a4:	andeq	r3, r1, r0, lsr #22
   132a8:	andeq	r3, r1, r0, lsr #22
   132ac:	andeq	r3, r1, r0, lsr #22
   132b0:	andeq	r3, r1, r0, lsr #22
   132b4:	andeq	r3, r1, r0, lsr #22
   132b8:	andeq	r3, r1, r0, lsr #22
   132bc:	andeq	r3, r1, r0, lsr #22
   132c0:	andeq	r3, r1, r0, lsr #22
   132c4:	andeq	r3, r1, r0, lsr #22
   132c8:	andeq	r3, r1, r0, lsr #22
   132cc:	andeq	r3, r1, r0, lsr #22
   132d0:	andeq	r3, r1, r0, lsr #22
   132d4:	andeq	r3, r1, r0, ror #21
   132d8:	strdeq	r3, [r1], -r4
   132dc:	strdeq	r3, [r1], -r4
   132e0:	strdeq	r3, [r1], -r8
   132e4:	strdeq	r3, [r1], -r4
   132e8:	andeq	r3, r1, r4, lsl fp
   132ec:	strdeq	r3, [r1], -r4
   132f0:	andeq	r3, r1, r4, lsr r8
   132f4:	strdeq	r3, [r1], -r4
   132f8:	strdeq	r3, [r1], -r4
   132fc:	strdeq	r3, [r1], -r4
   13300:	andeq	r3, r1, r4, lsl fp
   13304:	andeq	r3, r1, r4, lsl fp
   13308:	andeq	r3, r1, r4, lsl fp
   1330c:	andeq	r3, r1, r4, lsl fp
   13310:	andeq	r3, r1, r4, lsl fp
   13314:	andeq	r3, r1, r4, lsl fp
   13318:	andeq	r3, r1, r4, lsl fp
   1331c:	andeq	r3, r1, r4, lsl fp
   13320:	andeq	r3, r1, r4, lsl fp
   13324:	andeq	r3, r1, r4, lsl fp
   13328:	andeq	r3, r1, r4, lsl fp
   1332c:	andeq	r3, r1, r4, lsl fp
   13330:	andeq	r3, r1, r4, lsl fp
   13334:	andeq	r3, r1, r4, lsl fp
   13338:	andeq	r3, r1, r4, lsl fp
   1333c:	andeq	r3, r1, r4, lsl fp
   13340:	strdeq	r3, [r1], -r4
   13344:	strdeq	r3, [r1], -r4
   13348:	strdeq	r3, [r1], -r4
   1334c:	strdeq	r3, [r1], -r4
   13350:	andeq	r3, r1, r8, lsl #16
   13354:	andeq	r3, r1, r0, lsr #22
   13358:	andeq	r3, r1, r4, lsl fp
   1335c:	andeq	r3, r1, r4, lsl fp
   13360:	andeq	r3, r1, r4, lsl fp
   13364:	andeq	r3, r1, r4, lsl fp
   13368:	andeq	r3, r1, r4, lsl fp
   1336c:	andeq	r3, r1, r4, lsl fp
   13370:	andeq	r3, r1, r4, lsl fp
   13374:	andeq	r3, r1, r4, lsl fp
   13378:	andeq	r3, r1, r4, lsl fp
   1337c:	andeq	r3, r1, r4, lsl fp
   13380:	andeq	r3, r1, r4, lsl fp
   13384:	andeq	r3, r1, r4, lsl fp
   13388:	andeq	r3, r1, r4, lsl fp
   1338c:	andeq	r3, r1, r4, lsl fp
   13390:	andeq	r3, r1, r4, lsl fp
   13394:	andeq	r3, r1, r4, lsl fp
   13398:	andeq	r3, r1, r4, lsl fp
   1339c:	andeq	r3, r1, r4, lsl fp
   133a0:	andeq	r3, r1, r4, lsl fp
   133a4:	andeq	r3, r1, r4, lsl fp
   133a8:	andeq	r3, r1, r4, lsl fp
   133ac:	andeq	r3, r1, r4, lsl fp
   133b0:	andeq	r3, r1, r4, lsl fp
   133b4:	andeq	r3, r1, r4, lsl fp
   133b8:	andeq	r3, r1, r4, lsl fp
   133bc:	andeq	r3, r1, r4, lsl fp
   133c0:	strdeq	r3, [r1], -r4
   133c4:	andeq	r3, r1, r0, asr #15
   133c8:	andeq	r3, r1, r4, lsl fp
   133cc:	strdeq	r3, [r1], -r4
   133d0:	andeq	r3, r1, r4, lsl fp
   133d4:	strdeq	r3, [r1], -r4
   133d8:	andeq	r3, r1, r4, lsl fp
   133dc:	andeq	r3, r1, r4, lsl fp
   133e0:	andeq	r3, r1, r4, lsl fp
   133e4:	andeq	r3, r1, r4, lsl fp
   133e8:	andeq	r3, r1, r4, lsl fp
   133ec:	andeq	r3, r1, r4, lsl fp
   133f0:	andeq	r3, r1, r4, lsl fp
   133f4:	andeq	r3, r1, r4, lsl fp
   133f8:	andeq	r3, r1, r4, lsl fp
   133fc:	andeq	r3, r1, r4, lsl fp
   13400:	andeq	r3, r1, r4, lsl fp
   13404:	andeq	r3, r1, r4, lsl fp
   13408:	andeq	r3, r1, r4, lsl fp
   1340c:	andeq	r3, r1, r4, lsl fp
   13410:	andeq	r3, r1, r4, lsl fp
   13414:	andeq	r3, r1, r4, lsl fp
   13418:	andeq	r3, r1, r4, lsl fp
   1341c:	andeq	r3, r1, r4, lsl fp
   13420:	andeq	r3, r1, r4, lsl fp
   13424:	andeq	r3, r1, r4, lsl fp
   13428:	andeq	r3, r1, r4, lsl fp
   1342c:	andeq	r3, r1, r4, lsl fp
   13430:	andeq	r3, r1, r4, lsl fp
   13434:	andeq	r3, r1, r4, lsl fp
   13438:	andeq	r3, r1, r4, lsl fp
   1343c:	andeq	r3, r1, r4, lsl fp
   13440:	ldrdeq	r3, [r1], -r8
   13444:	strdeq	r3, [r1], -r4
   13448:	ldrdeq	r3, [r1], -r8
   1344c:	strdeq	r3, [r1], -r8
   13450:	cmp	r4, #0
   13454:	moveq	r3, #1
   13458:	streq	r3, [sp, #28]
   1345c:	beq	13b88 <__assert_fail@plt+0x26f8>
   13460:	mov	r3, #0
   13464:	mov	r4, r3
   13468:	mov	r2, #1
   1346c:	str	r2, [sp, #40]	; 0x28
   13470:	str	r3, [sp, #68]	; 0x44
   13474:	str	r2, [sp, #32]
   13478:	str	r2, [sp, #52]	; 0x34
   1347c:	ldr	r3, [pc, #2584]	; 13e9c <__assert_fail@plt+0x2a0c>
   13480:	str	r4, [sp, #44]	; 0x2c
   13484:	str	r4, [sp, #72]	; 0x48
   13488:	str	r4, [sp, #28]
   1348c:	str	r3, [sp, #60]	; 0x3c
   13490:	mov	r8, #2
   13494:	b	13180 <__assert_fail@plt+0x1cf0>
   13498:	cmp	r4, #0
   1349c:	bne	14728 <__assert_fail@plt+0x3298>
   134a0:	cmp	sl, #0
   134a4:	beq	144e8 <__assert_fail@plt+0x3058>
   134a8:	mov	r3, #34	; 0x22
   134ac:	strb	r3, [fp]
   134b0:	ldr	r3, [pc, #2528]	; 13e98 <__assert_fail@plt+0x2a08>
   134b4:	mov	r1, r4
   134b8:	mov	r2, #1
   134bc:	str	r4, [sp, #68]	; 0x44
   134c0:	str	r2, [sp, #40]	; 0x28
   134c4:	mov	r4, r2
   134c8:	str	r1, [sp, #44]	; 0x2c
   134cc:	str	r1, [sp, #72]	; 0x48
   134d0:	str	r1, [sp, #32]
   134d4:	str	r2, [sp, #28]
   134d8:	str	r2, [sp, #52]	; 0x34
   134dc:	str	r3, [sp, #60]	; 0x3c
   134e0:	b	13180 <__assert_fail@plt+0x1cf0>
   134e4:	mov	r3, #0
   134e8:	str	r3, [sp, #68]	; 0x44
   134ec:	str	r3, [sp, #44]	; 0x2c
   134f0:	str	r3, [sp, #32]
   134f4:	str	r3, [sp, #28]
   134f8:	str	r3, [sp, #60]	; 0x3c
   134fc:	mov	r3, #1
   13500:	str	r8, [sp, #72]	; 0x48
   13504:	str	r8, [sp, #52]	; 0x34
   13508:	mov	r4, r8
   1350c:	str	r3, [sp, #40]	; 0x28
   13510:	b	13180 <__assert_fail@plt+0x1cf0>
   13514:	mov	r3, #1
   13518:	str	r3, [sp, #40]	; 0x28
   1351c:	str	r3, [sp, #32]
   13520:	str	r3, [sp, #28]
   13524:	str	r3, [sp, #52]	; 0x34
   13528:	ldr	r3, [pc, #2408]	; 13e98 <__assert_fail@plt+0x2a08>
   1352c:	mov	r2, #0
   13530:	mov	r4, r2
   13534:	str	r2, [sp, #68]	; 0x44
   13538:	str	r2, [sp, #44]	; 0x2c
   1353c:	str	r2, [sp, #72]	; 0x48
   13540:	str	r3, [sp, #60]	; 0x3c
   13544:	mov	r8, #5
   13548:	b	13180 <__assert_fail@plt+0x1cf0>
   1354c:	mov	r3, #0
   13550:	mov	r2, #1
   13554:	str	r2, [sp, #40]	; 0x28
   13558:	mov	r4, r3
   1355c:	str	r3, [sp, #68]	; 0x44
   13560:	str	r2, [sp, #28]
   13564:	str	r3, [sp, #44]	; 0x2c
   13568:	str	r3, [sp, #72]	; 0x48
   1356c:	str	r3, [sp, #32]
   13570:	str	r3, [sp, #52]	; 0x34
   13574:	str	r3, [sp, #60]	; 0x3c
   13578:	b	13180 <__assert_fail@plt+0x1cf0>
   1357c:	mov	r2, #1
   13580:	mov	r3, #0
   13584:	str	r2, [sp, #40]	; 0x28
   13588:	mov	r4, r3
   1358c:	str	r3, [sp, #68]	; 0x44
   13590:	str	r8, [sp, #52]	; 0x34
   13594:	str	r2, [sp, #32]
   13598:	b	1347c <__assert_fail@plt+0x1fec>
   1359c:	mov	r3, #1
   135a0:	str	r3, [sp, #40]	; 0x28
   135a4:	str	r3, [sp, #32]
   135a8:	str	r3, [sp, #28]
   135ac:	str	r3, [sp, #52]	; 0x34
   135b0:	ldr	r3, [pc, #2276]	; 13e9c <__assert_fail@plt+0x2a0c>
   135b4:	mov	r2, #0
   135b8:	mov	r4, r2
   135bc:	str	r2, [sp, #68]	; 0x44
   135c0:	str	r2, [sp, #44]	; 0x2c
   135c4:	str	r2, [sp, #72]	; 0x48
   135c8:	str	r3, [sp, #60]	; 0x3c
   135cc:	mov	r8, #2
   135d0:	b	13180 <__assert_fail@plt+0x1cf0>
   135d4:	mov	r7, #0
   135d8:	ldr	r3, [sp, #24]
   135dc:	cmn	r3, #1
   135e0:	beq	1411c <__assert_fail@plt+0x2c8c>
   135e4:	ldr	r3, [sp, #24]
   135e8:	subs	r3, r3, #1
   135ec:	movne	r3, #1
   135f0:	cmp	r3, #0
   135f4:	sub	r2, fp, #2
   135f8:	clz	r2, r2
   135fc:	lsr	r2, r2, #5
   13600:	bne	137fc <__assert_fail@plt+0x236c>
   13604:	cmp	r9, #0
   13608:	bne	137fc <__assert_fail@plt+0x236c>
   1360c:	ldr	r3, [sp, #32]
   13610:	tst	r3, r2
   13614:	bne	1391c <__assert_fail@plt+0x248c>
   13618:	ldr	r3, [sp, #28]
   1361c:	eor	r3, r3, #1
   13620:	orr	r3, r2, r3
   13624:	ldr	r2, [sp, #32]
   13628:	eor	r3, r3, #1
   1362c:	orrs	r3, r2, r3
   13630:	beq	13660 <__assert_fail@plt+0x21d0>
   13634:	mov	r3, #0
   13638:	ldr	r1, [sp, #56]	; 0x38
   1363c:	cmp	r1, #0
   13640:	beq	13660 <__assert_fail@plt+0x21d0>
   13644:	lsr	r2, r5, #5
   13648:	and	r0, r5, #31
   1364c:	uxtb	r2, r2
   13650:	ldr	r1, [r1, r2, lsl #2]
   13654:	lsr	r2, r1, r0
   13658:	tst	r2, #1
   1365c:	bne	13668 <__assert_fail@plt+0x21d8>
   13660:	cmp	r7, #0
   13664:	beq	138b8 <__assert_fail@plt+0x2428>
   13668:	sub	r2, fp, #2
   1366c:	clz	r2, r2
   13670:	lsr	r2, r2, #5
   13674:	ldr	r3, [sp, #32]
   13678:	cmp	r3, #0
   1367c:	bne	139a8 <__assert_fail@plt+0x2518>
   13680:	ldr	r3, [sp, #44]	; 0x2c
   13684:	eor	r3, r3, #1
   13688:	ands	r3, r2, r3
   1368c:	beq	136c4 <__assert_fail@plt+0x2234>
   13690:	cmp	sl, r4
   13694:	movhi	r2, #39	; 0x27
   13698:	strbhi	r2, [r8, r4]
   1369c:	add	r2, r4, #1
   136a0:	cmp	r2, sl
   136a4:	movcc	r1, #36	; 0x24
   136a8:	strbcc	r1, [r8, r2]
   136ac:	add	r2, r4, #2
   136b0:	cmp	r2, sl
   136b4:	add	r4, r4, #3
   136b8:	movcc	r1, #39	; 0x27
   136bc:	strbcc	r1, [r8, r2]
   136c0:	str	r3, [sp, #44]	; 0x2c
   136c4:	cmp	r4, sl
   136c8:	movcc	r3, #92	; 0x5c
   136cc:	strbcc	r3, [r8, r4]
   136d0:	add	r9, r9, #1
   136d4:	add	r4, r4, #1
   136d8:	cmp	r4, sl
   136dc:	ldr	r3, [sp, #40]	; 0x28
   136e0:	strbcc	r5, [r8, r4]
   136e4:	cmp	r6, #0
   136e8:	moveq	r3, #0
   136ec:	str	r3, [sp, #40]	; 0x28
   136f0:	ldr	r3, [sp, #24]
   136f4:	add	r4, r4, #1
   136f8:	cmn	r3, #1
   136fc:	bne	1319c <__assert_fail@plt+0x1d0c>
   13700:	ldr	r3, [sp, #36]	; 0x24
   13704:	ldrb	r6, [r3, r9]
   13708:	adds	r6, r6, #0
   1370c:	movne	r6, #1
   13710:	cmp	r6, #0
   13714:	bne	131b0 <__assert_fail@plt+0x1d20>
   13718:	str	fp, [sp, #160]	; 0xa0
   1371c:	mov	fp, r8
   13720:	ldr	r8, [sp, #160]	; 0xa0
   13724:	ldr	r1, [sp, #32]
   13728:	cmp	r4, #0
   1372c:	sub	r2, r8, #2
   13730:	clz	r2, r2
   13734:	lsr	r2, r2, #5
   13738:	andeq	r3, r2, r1
   1373c:	movne	r3, #0
   13740:	cmp	r3, #0
   13744:	bne	14830 <__assert_fail@plt+0x33a0>
   13748:	eor	r3, r1, #1
   1374c:	ands	r2, r2, r3
   13750:	beq	1476c <__assert_fail@plt+0x32dc>
   13754:	ldr	r3, [sp, #68]	; 0x44
   13758:	cmp	r3, #0
   1375c:	beq	14770 <__assert_fail@plt+0x32e0>
   13760:	ldr	r3, [sp, #40]	; 0x28
   13764:	cmp	r3, #0
   13768:	bne	147ec <__assert_fail@plt+0x335c>
   1376c:	ldr	r3, [sp, #72]	; 0x48
   13770:	adds	r3, r3, #0
   13774:	movne	r3, #1
   13778:	cmp	sl, #0
   1377c:	movne	r3, #0
   13780:	cmp	r3, #0
   13784:	ldreq	r2, [sp, #68]	; 0x44
   13788:	beq	14770 <__assert_fail@plt+0x32e0>
   1378c:	ldr	sl, [sp, #72]	; 0x48
   13790:	str	r3, [sp, #68]	; 0x44
   13794:	ldr	r3, [pc, #1792]	; 13e9c <__assert_fail@plt+0x2a0c>
   13798:	mov	r2, #39	; 0x27
   1379c:	mov	r4, #1
   137a0:	str	r3, [sp, #60]	; 0x3c
   137a4:	mov	r3, #0
   137a8:	strb	r2, [fp]
   137ac:	str	r4, [sp, #52]	; 0x34
   137b0:	mov	r8, #2
   137b4:	str	r3, [sp, #32]
   137b8:	b	13180 <__assert_fail@plt+0x1cf0>
   137bc:	mov	r7, #0
   137c0:	cmp	fp, #2
   137c4:	beq	140fc <__assert_fail@plt+0x2c6c>
   137c8:	ldr	r3, [sp, #52]	; 0x34
   137cc:	ldr	r2, [sp, #28]
   137d0:	ldr	r1, [sp, #32]
   137d4:	cmp	r3, #0
   137d8:	andne	r2, r2, r1
   137dc:	moveq	r2, #0
   137e0:	cmp	r2, #0
   137e4:	moveq	r5, #92	; 0x5c
   137e8:	moveq	r3, r5
   137ec:	bne	14108 <__assert_fail@plt+0x2c78>
   137f0:	ldr	r1, [sp, #28]
   137f4:	cmp	r1, #0
   137f8:	bne	14878 <__assert_fail@plt+0x33e8>
   137fc:	mov	r6, #0
   13800:	b	13618 <__assert_fail@plt+0x2188>
   13804:	mov	r7, #0
   13808:	cmp	fp, #2
   1380c:	beq	1416c <__assert_fail@plt+0x2cdc>
   13810:	cmp	fp, #5
   13814:	beq	14130 <__assert_fail@plt+0x2ca0>
   13818:	sub	r2, fp, #2
   1381c:	mov	r6, #0
   13820:	clz	r2, r2
   13824:	mov	r5, #63	; 0x3f
   13828:	lsr	r2, r2, #5
   1382c:	b	13618 <__assert_fail@plt+0x2188>
   13830:	mov	r7, #0
   13834:	cmp	fp, #2
   13838:	strne	r6, [sp, #68]	; 0x44
   1383c:	movne	r2, #0
   13840:	movne	r5, #39	; 0x27
   13844:	bne	13618 <__assert_fail@plt+0x2188>
   13848:	ldr	r3, [sp, #32]
   1384c:	cmp	r3, #0
   13850:	bne	1454c <__assert_fail@plt+0x30bc>
   13854:	cmp	sl, #0
   13858:	ldr	r3, [sp, #72]	; 0x48
   1385c:	clz	r3, r3
   13860:	lsr	r3, r3, #5
   13864:	moveq	r3, #0
   13868:	cmp	r3, #0
   1386c:	bne	14480 <__assert_fail@plt+0x2ff0>
   13870:	cmp	sl, r4
   13874:	movhi	r3, #39	; 0x27
   13878:	strbhi	r3, [r8, r4]
   1387c:	add	r3, r4, #1
   13880:	cmp	sl, r3
   13884:	movhi	r2, #92	; 0x5c
   13888:	strbhi	r2, [r8, r3]
   1388c:	add	r3, r4, #2
   13890:	cmp	sl, r3
   13894:	movhi	r2, #39	; 0x27
   13898:	strbhi	r2, [r8, r3]
   1389c:	mov	r3, #0
   138a0:	cmp	r7, #0
   138a4:	add	r4, r4, #3
   138a8:	str	r3, [sp, #44]	; 0x2c
   138ac:	str	r6, [sp, #68]	; 0x44
   138b0:	mov	r5, #39	; 0x27
   138b4:	bne	13668 <__assert_fail@plt+0x21d8>
   138b8:	ldr	r2, [sp, #44]	; 0x2c
   138bc:	eor	r3, r3, #1
   138c0:	and	r3, r3, r2
   138c4:	add	r9, r9, #1
   138c8:	uxtb	r3, r3
   138cc:	cmp	r3, #0
   138d0:	beq	136d8 <__assert_fail@plt+0x2248>
   138d4:	cmp	sl, r4
   138d8:	movhi	r3, #39	; 0x27
   138dc:	strbhi	r3, [r8, r4]
   138e0:	add	r3, r4, #1
   138e4:	cmp	sl, r3
   138e8:	movhi	r2, #39	; 0x27
   138ec:	strbhi	r2, [r8, r3]
   138f0:	mov	r3, #0
   138f4:	add	r4, r4, #2
   138f8:	str	r3, [sp, #44]	; 0x2c
   138fc:	b	136d8 <__assert_fail@plt+0x2248>
   13900:	mov	r3, #114	; 0x72
   13904:	ldr	r1, [sp, #32]
   13908:	sub	r2, fp, #2
   1390c:	clz	r2, r2
   13910:	lsr	r2, r2, #5
   13914:	tst	r2, r1
   13918:	beq	137f0 <__assert_fail@plt+0x2360>
   1391c:	mov	fp, r8
   13920:	mov	r8, #2
   13924:	ldr	r3, [sp, #28]
   13928:	cmp	r3, #0
   1392c:	movne	r8, #4
   13930:	ldr	r3, [sp, #164]	; 0xa4
   13934:	mov	ip, #0
   13938:	bic	r3, r3, #2
   1393c:	str	r3, [sp, #4]
   13940:	ldr	r3, [sp, #76]	; 0x4c
   13944:	str	r8, [sp]
   13948:	str	r3, [sp, #16]
   1394c:	ldr	r3, [sp, #80]	; 0x50
   13950:	ldr	r2, [sp, #36]	; 0x24
   13954:	str	r3, [sp, #12]
   13958:	mov	r1, sl
   1395c:	ldr	r3, [sp, #24]
   13960:	mov	r0, fp
   13964:	str	ip, [sp, #8]
   13968:	bl	13088 <__assert_fail@plt+0x1bf8>
   1396c:	mov	r4, r0
   13970:	ldr	r3, [pc, #1304]	; 13e90 <__assert_fail@plt+0x2a00>
   13974:	ldr	r2, [sp, #116]	; 0x74
   13978:	mov	r0, r4
   1397c:	ldr	r3, [r3]
   13980:	cmp	r2, r3
   13984:	bne	14874 <__assert_fail@plt+0x33e4>
   13988:	add	sp, sp, #124	; 0x7c
   1398c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13990:	mov	r5, #110	; 0x6e
   13994:	ldr	r3, [sp, #32]
   13998:	mov	r2, #0
   1399c:	cmp	r3, #0
   139a0:	mov	r6, r2
   139a4:	beq	13680 <__assert_fail@plt+0x21f0>
   139a8:	str	fp, [sp, #160]	; 0xa0
   139ac:	mov	fp, r8
   139b0:	ldr	r8, [sp, #160]	; 0xa0
   139b4:	mov	r3, r2
   139b8:	ldr	r2, [sp, #28]
   139bc:	and	r2, r2, r3
   139c0:	str	r2, [sp, #28]
   139c4:	b	13924 <__assert_fail@plt+0x2494>
   139c8:	mov	r5, #116	; 0x74
   139cc:	b	13994 <__assert_fail@plt+0x2504>
   139d0:	mov	r5, #102	; 0x66
   139d4:	ldr	r3, [sp, #32]
   139d8:	cmp	r3, #0
   139dc:	bne	14588 <__assert_fail@plt+0x30f8>
   139e0:	mov	r6, #0
   139e4:	b	136c4 <__assert_fail@plt+0x2234>
   139e8:	mov	r5, #118	; 0x76
   139ec:	b	139d4 <__assert_fail@plt+0x2544>
   139f0:	mov	r7, #0
   139f4:	mov	r6, #0
   139f8:	b	13634 <__assert_fail@plt+0x21a4>
   139fc:	ldr	r3, [sp, #32]
   13a00:	cmp	r3, #0
   13a04:	bne	147cc <__assert_fail@plt+0x333c>
   13a08:	mov	r7, r3
   13a0c:	ldr	r3, [sp, #44]	; 0x2c
   13a10:	sub	r2, fp, #2
   13a14:	eor	r3, r3, #1
   13a18:	clz	r2, r2
   13a1c:	lsr	r2, r2, #5
   13a20:	ands	r3, r2, r3
   13a24:	beq	1446c <__assert_fail@plt+0x2fdc>
   13a28:	cmp	sl, r4
   13a2c:	movhi	r1, #39	; 0x27
   13a30:	strbhi	r1, [r8, r4]
   13a34:	add	r1, r4, #1
   13a38:	cmp	sl, r1
   13a3c:	movhi	r0, #36	; 0x24
   13a40:	strbhi	r0, [r8, r1]
   13a44:	add	r1, r4, #2
   13a48:	cmp	sl, r1
   13a4c:	movhi	r0, #39	; 0x27
   13a50:	strbhi	r0, [r8, r1]
   13a54:	add	r1, r4, #3
   13a58:	cmp	sl, r1
   13a5c:	bls	144cc <__assert_fail@plt+0x303c>
   13a60:	mov	r4, r1
   13a64:	mov	r1, #92	; 0x5c
   13a68:	strb	r1, [r8, r4]
   13a6c:	mov	r1, r4
   13a70:	str	r3, [sp, #44]	; 0x2c
   13a74:	cmp	fp, #2
   13a78:	add	r4, r4, #1
   13a7c:	beq	14514 <__assert_fail@plt+0x3084>
   13a80:	ldr	r0, [sp, #24]
   13a84:	add	r3, r9, #1
   13a88:	cmp	r3, r0
   13a8c:	bcs	13aa4 <__assert_fail@plt+0x2614>
   13a90:	ldr	r0, [sp, #36]	; 0x24
   13a94:	ldrb	r3, [r0, r3]
   13a98:	sub	r3, r3, #48	; 0x30
   13a9c:	cmp	r3, #9
   13aa0:	bls	14524 <__assert_fail@plt+0x3094>
   13aa4:	mov	r5, #48	; 0x30
   13aa8:	ldr	r3, [sp, #28]
   13aac:	eor	r3, r3, #1
   13ab0:	orrs	r2, r2, r3
   13ab4:	mov	r3, r6
   13ab8:	moveq	r6, r2
   13abc:	beq	13638 <__assert_fail@plt+0x21a8>
   13ac0:	mov	r6, #0
   13ac4:	b	13660 <__assert_fail@plt+0x21d0>
   13ac8:	mov	r2, #0
   13acc:	mov	r6, r2
   13ad0:	mov	r5, #98	; 0x62
   13ad4:	b	13680 <__assert_fail@plt+0x21f0>
   13ad8:	mov	r5, #97	; 0x61
   13adc:	b	139e0 <__assert_fail@plt+0x2550>
   13ae0:	mov	r3, r7
   13ae4:	mov	r6, r7
   13ae8:	mov	r2, #0
   13aec:	mov	r7, r3
   13af0:	mov	r5, #32
   13af4:	b	13618 <__assert_fail@plt+0x2188>
   13af8:	cmp	r9, #0
   13afc:	mov	r3, r7
   13b00:	bne	140c8 <__assert_fail@plt+0x2c38>
   13b04:	mov	r6, r7
   13b08:	mov	r2, r9
   13b0c:	mov	r7, r3
   13b10:	b	13618 <__assert_fail@plt+0x2188>
   13b14:	mov	r6, r7
   13b18:	b	13634 <__assert_fail@plt+0x21a4>
   13b1c:	mov	r7, #0
   13b20:	ldr	r3, [sp, #64]	; 0x40
   13b24:	cmp	r3, #1
   13b28:	bne	14184 <__assert_fail@plt+0x2cf4>
   13b2c:	bl	112ec <__ctype_b_loc@plt>
   13b30:	ldr	r2, [sp, #64]	; 0x40
   13b34:	sxth	r3, r5
   13b38:	mov	ip, r2
   13b3c:	lsl	r3, r3, #1
   13b40:	ldr	r2, [r0]
   13b44:	ldrh	r3, [r2, r3]
   13b48:	and	r3, r3, #16384	; 0x4000
   13b4c:	cmp	r3, #0
   13b50:	ldr	r3, [sp, #28]
   13b54:	movne	r6, #1
   13b58:	moveq	r6, #0
   13b5c:	movne	r2, #0
   13b60:	andeq	r2, r3, #1
   13b64:	cmp	r2, #0
   13b68:	bne	14494 <__assert_fail@plt+0x3004>
   13b6c:	sub	r2, fp, #2
   13b70:	clz	r2, r2
   13b74:	lsr	r2, r2, #5
   13b78:	b	13618 <__assert_fail@plt+0x2188>
   13b7c:	cmp	r4, #0
   13b80:	bne	14840 <__assert_fail@plt+0x33b0>
   13b84:	str	r4, [sp, #28]
   13b88:	cmp	sl, #0
   13b8c:	bne	14884 <__assert_fail@plt+0x33f4>
   13b90:	ldr	r3, [pc, #772]	; 13e9c <__assert_fail@plt+0x2a0c>
   13b94:	mov	r4, #1
   13b98:	str	r4, [sp, #40]	; 0x28
   13b9c:	str	r3, [sp, #60]	; 0x3c
   13ba0:	str	r4, [sp, #52]	; 0x34
   13ba4:	str	sl, [sp, #72]	; 0x48
   13ba8:	str	sl, [sp, #68]	; 0x44
   13bac:	str	sl, [sp, #44]	; 0x2c
   13bb0:	str	sl, [sp, #32]
   13bb4:	mov	r8, #2
   13bb8:	b	13180 <__assert_fail@plt+0x1cf0>
   13bbc:	ldr	r3, [sp, #36]	; 0x24
   13bc0:	ldrb	r5, [r3, r9]
   13bc4:	cmp	r5, #126	; 0x7e
   13bc8:	ldrls	pc, [pc, r5, lsl #2]
   13bcc:	b	13b20 <__assert_fail@plt+0x2690>
   13bd0:	andeq	r3, r1, r4, lsl #28
   13bd4:	andeq	r3, r1, r0, lsr #22
   13bd8:	andeq	r3, r1, r0, lsr #22
   13bdc:	andeq	r3, r1, r0, lsr #22
   13be0:	andeq	r3, r1, r0, lsr #22
   13be4:	andeq	r3, r1, r0, lsr #22
   13be8:	andeq	r3, r1, r0, lsr #22
   13bec:	strdeq	r3, [r1], -r0
   13bf0:	ldrdeq	r3, [r1], -ip
   13bf4:	ldrdeq	r3, [r1], -r4
   13bf8:	andeq	r3, r1, ip, asr #27
   13bfc:	andeq	r3, r1, ip, ror lr
   13c00:	andeq	r3, r1, r8, ror #28
   13c04:	andeq	r3, r1, r0, lsl #18
   13c08:	andeq	r3, r1, r0, lsr #22
   13c0c:	andeq	r3, r1, r0, lsr #22
   13c10:	andeq	r3, r1, r0, lsr #22
   13c14:	andeq	r3, r1, r0, lsr #22
   13c18:	andeq	r3, r1, r0, lsr #22
   13c1c:	andeq	r3, r1, r0, lsr #22
   13c20:	andeq	r3, r1, r0, lsr #22
   13c24:	andeq	r3, r1, r0, lsr #22
   13c28:	andeq	r3, r1, r0, lsr #22
   13c2c:	andeq	r3, r1, r0, lsr #22
   13c30:	andeq	r3, r1, r0, lsr #22
   13c34:	andeq	r3, r1, r0, lsr #22
   13c38:	andeq	r3, r1, r0, lsr #22
   13c3c:	andeq	r3, r1, r0, lsr #22
   13c40:	andeq	r3, r1, r0, lsr #22
   13c44:	andeq	r3, r1, r0, lsr #22
   13c48:	andeq	r3, r1, r0, lsr #22
   13c4c:	andeq	r3, r1, r0, lsr #22
   13c50:	andeq	r3, r1, r8, asr lr
   13c54:	andeq	r3, r1, r4, asr #28
   13c58:	andeq	r3, r1, r4, asr #28
   13c5c:	andeq	r3, r1, r4, lsr lr
   13c60:	andeq	r3, r1, r4, asr #28
   13c64:	andeq	r3, r1, ip, ror #22
   13c68:	andeq	r3, r1, r4, asr #28
   13c6c:	andeq	r3, r1, r4, lsr r8
   13c70:	andeq	r3, r1, r4, asr #28
   13c74:	andeq	r3, r1, r4, asr #28
   13c78:	andeq	r3, r1, r4, asr #28
   13c7c:	andeq	r3, r1, ip, ror #22
   13c80:	andeq	r3, r1, ip, ror #22
   13c84:	andeq	r3, r1, ip, ror #22
   13c88:	andeq	r3, r1, ip, ror #22
   13c8c:	andeq	r3, r1, ip, ror #22
   13c90:	andeq	r3, r1, ip, ror #22
   13c94:	andeq	r3, r1, ip, ror #22
   13c98:	andeq	r3, r1, ip, ror #22
   13c9c:	andeq	r3, r1, ip, ror #22
   13ca0:	andeq	r3, r1, ip, ror #22
   13ca4:	andeq	r3, r1, ip, ror #22
   13ca8:	andeq	r3, r1, ip, ror #22
   13cac:	andeq	r3, r1, ip, ror #22
   13cb0:	andeq	r3, r1, ip, ror #22
   13cb4:	andeq	r3, r1, ip, ror #22
   13cb8:	andeq	r3, r1, ip, ror #22
   13cbc:	andeq	r3, r1, r4, asr #28
   13cc0:	andeq	r3, r1, r4, asr #28
   13cc4:	andeq	r3, r1, r4, asr #28
   13cc8:	andeq	r3, r1, r4, asr #28
   13ccc:	andeq	r3, r1, r8, lsl #16
   13cd0:	andeq	r3, r1, r0, lsr #22
   13cd4:	andeq	r3, r1, ip, ror #22
   13cd8:	andeq	r3, r1, ip, ror #22
   13cdc:	andeq	r3, r1, ip, ror #22
   13ce0:	andeq	r3, r1, ip, ror #22
   13ce4:	andeq	r3, r1, ip, ror #22
   13ce8:	andeq	r3, r1, ip, ror #22
   13cec:	andeq	r3, r1, ip, ror #22
   13cf0:	andeq	r3, r1, ip, ror #22
   13cf4:	andeq	r3, r1, ip, ror #22
   13cf8:	andeq	r3, r1, ip, ror #22
   13cfc:	andeq	r3, r1, ip, ror #22
   13d00:	andeq	r3, r1, ip, ror #22
   13d04:	andeq	r3, r1, ip, ror #22
   13d08:	andeq	r3, r1, ip, ror #22
   13d0c:	andeq	r3, r1, ip, ror #22
   13d10:	andeq	r3, r1, ip, ror #22
   13d14:	andeq	r3, r1, ip, ror #22
   13d18:	andeq	r3, r1, ip, ror #22
   13d1c:	andeq	r3, r1, ip, ror #22
   13d20:	andeq	r3, r1, ip, ror #22
   13d24:	andeq	r3, r1, ip, ror #22
   13d28:	andeq	r3, r1, ip, ror #22
   13d2c:	andeq	r3, r1, ip, ror #22
   13d30:	andeq	r3, r1, ip, ror #22
   13d34:	andeq	r3, r1, ip, ror #22
   13d38:	andeq	r3, r1, ip, ror #22
   13d3c:	andeq	r3, r1, r4, asr #28
   13d40:	andeq	r3, r1, r0, asr #15
   13d44:	andeq	r3, r1, ip, ror #22
   13d48:	andeq	r3, r1, r4, asr #28
   13d4c:	andeq	r3, r1, ip, ror #22
   13d50:	andeq	r3, r1, r4, asr #28
   13d54:	andeq	r3, r1, ip, ror #22
   13d58:	andeq	r3, r1, ip, ror #22
   13d5c:	andeq	r3, r1, ip, ror #22
   13d60:	andeq	r3, r1, ip, ror #22
   13d64:	andeq	r3, r1, ip, ror #22
   13d68:	andeq	r3, r1, ip, ror #22
   13d6c:	andeq	r3, r1, ip, ror #22
   13d70:	andeq	r3, r1, ip, ror #22
   13d74:	andeq	r3, r1, ip, ror #22
   13d78:	andeq	r3, r1, ip, ror #22
   13d7c:	andeq	r3, r1, ip, ror #22
   13d80:	andeq	r3, r1, ip, ror #22
   13d84:	andeq	r3, r1, ip, ror #22
   13d88:	andeq	r3, r1, ip, ror #22
   13d8c:	andeq	r3, r1, ip, ror #22
   13d90:	andeq	r3, r1, ip, ror #22
   13d94:	andeq	r3, r1, ip, ror #22
   13d98:	andeq	r3, r1, ip, ror #22
   13d9c:	andeq	r3, r1, ip, ror #22
   13da0:	andeq	r3, r1, ip, ror #22
   13da4:	andeq	r3, r1, ip, ror #22
   13da8:	andeq	r3, r1, ip, ror #22
   13dac:	andeq	r3, r1, ip, ror #22
   13db0:	andeq	r3, r1, ip, ror #22
   13db4:	andeq	r3, r1, ip, ror #22
   13db8:	andeq	r3, r1, ip, ror #22
   13dbc:	ldrdeq	r3, [r1], -r8
   13dc0:	andeq	r3, r1, r4, asr #28
   13dc4:	ldrdeq	r3, [r1], -r8
   13dc8:	andeq	r3, r1, r4, lsr lr
   13dcc:	mov	r3, #110	; 0x6e
   13dd0:	b	13904 <__assert_fail@plt+0x2474>
   13dd4:	mov	r3, #116	; 0x74
   13dd8:	b	13904 <__assert_fail@plt+0x2474>
   13ddc:	sub	r2, fp, #2
   13de0:	mov	r3, #98	; 0x62
   13de4:	clz	r2, r2
   13de8:	lsr	r2, r2, #5
   13dec:	b	137f0 <__assert_fail@plt+0x2360>
   13df0:	sub	r2, fp, #2
   13df4:	mov	r3, #97	; 0x61
   13df8:	clz	r2, r2
   13dfc:	lsr	r2, r2, #5
   13e00:	b	137f0 <__assert_fail@plt+0x2360>
   13e04:	ldr	r3, [sp, #28]
   13e08:	cmp	r3, #0
   13e0c:	bne	139fc <__assert_fail@plt+0x256c>
   13e10:	ldr	r3, [sp, #164]	; 0xa4
   13e14:	tst	r3, #1
   13e18:	bne	1448c <__assert_fail@plt+0x2ffc>
   13e1c:	ldr	r6, [sp, #28]
   13e20:	sub	r2, fp, #2
   13e24:	mov	r7, r6
   13e28:	clz	r2, r2
   13e2c:	lsr	r2, r2, #5
   13e30:	b	13618 <__assert_fail@plt+0x2188>
   13e34:	sub	r2, fp, #2
   13e38:	clz	r2, r2
   13e3c:	lsr	r2, r2, #5
   13e40:	b	13604 <__assert_fail@plt+0x2174>
   13e44:	sub	r2, fp, #2
   13e48:	mov	r6, #0
   13e4c:	clz	r2, r2
   13e50:	lsr	r2, r2, #5
   13e54:	b	1360c <__assert_fail@plt+0x217c>
   13e58:	sub	r2, fp, #2
   13e5c:	clz	r2, r2
   13e60:	lsr	r2, r2, #5
   13e64:	b	1360c <__assert_fail@plt+0x217c>
   13e68:	sub	r2, fp, #2
   13e6c:	mov	r3, #102	; 0x66
   13e70:	clz	r2, r2
   13e74:	lsr	r2, r2, #5
   13e78:	b	137f0 <__assert_fail@plt+0x2360>
   13e7c:	sub	r2, fp, #2
   13e80:	mov	r3, #118	; 0x76
   13e84:	clz	r2, r2
   13e88:	lsr	r2, r2, #5
   13e8c:	b	137f0 <__assert_fail@plt+0x2360>
   13e90:	andeq	fp, r2, r8, lsl #30
   13e94:	andeq	fp, r1, r4, lsr #9
   13e98:	andeq	fp, r1, ip, lsl #9
   13e9c:	andeq	fp, r1, r0, lsr #9
   13ea0:	ldr	r3, [sp, #48]	; 0x30
   13ea4:	ldrb	r5, [r3]
   13ea8:	cmp	r5, #126	; 0x7e
   13eac:	ldrls	pc, [pc, r5, lsl #2]
   13eb0:	b	13b1c <__assert_fail@plt+0x268c>
   13eb4:	strdeq	r3, [r1], -ip
   13eb8:	andeq	r3, r1, ip, lsl fp
   13ebc:	andeq	r3, r1, ip, lsl fp
   13ec0:	andeq	r3, r1, ip, lsl fp
   13ec4:	andeq	r3, r1, ip, lsl fp
   13ec8:	andeq	r3, r1, ip, lsl fp
   13ecc:	andeq	r3, r1, ip, lsl fp
   13ed0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ed4:	andeq	r4, r1, ip, ror #1
   13ed8:	andeq	r3, r1, r8, asr #19
   13edc:	muleq	r1, r0, r9
   13ee0:	andeq	r3, r1, r8, ror #19
   13ee4:	ldrdeq	r3, [r1], -r0
   13ee8:	andeq	r4, r1, r0, ror #1
   13eec:	andeq	r3, r1, ip, lsl fp
   13ef0:	andeq	r3, r1, ip, lsl fp
   13ef4:	andeq	r3, r1, ip, lsl fp
   13ef8:	andeq	r3, r1, ip, lsl fp
   13efc:	andeq	r3, r1, ip, lsl fp
   13f00:	andeq	r3, r1, ip, lsl fp
   13f04:	andeq	r3, r1, ip, lsl fp
   13f08:	andeq	r3, r1, ip, lsl fp
   13f0c:	andeq	r3, r1, ip, lsl fp
   13f10:	andeq	r3, r1, ip, lsl fp
   13f14:	andeq	r3, r1, ip, lsl fp
   13f18:	andeq	r3, r1, ip, lsl fp
   13f1c:	andeq	r3, r1, ip, lsl fp
   13f20:	andeq	r3, r1, ip, lsl fp
   13f24:	andeq	r3, r1, ip, lsl fp
   13f28:	andeq	r3, r1, ip, lsl fp
   13f2c:	andeq	r3, r1, ip, lsl fp
   13f30:	andeq	r3, r1, ip, lsl fp
   13f34:	ldrdeq	r4, [r1], -r8
   13f38:	strdeq	r3, [r1], -r0
   13f3c:	strdeq	r3, [r1], -r0
   13f40:	strheq	r4, [r1], -ip
   13f44:	strdeq	r3, [r1], -r0
   13f48:	strheq	r4, [r1], -r0
   13f4c:	strdeq	r3, [r1], -r0
   13f50:	andeq	r3, r1, r0, lsr r8
   13f54:	strdeq	r3, [r1], -r0
   13f58:	strdeq	r3, [r1], -r0
   13f5c:	strdeq	r3, [r1], -r0
   13f60:	strheq	r4, [r1], -r0
   13f64:	strheq	r4, [r1], -r0
   13f68:	strheq	r4, [r1], -r0
   13f6c:	strheq	r4, [r1], -r0
   13f70:	strheq	r4, [r1], -r0
   13f74:	strheq	r4, [r1], -r0
   13f78:	strheq	r4, [r1], -r0
   13f7c:	strheq	r4, [r1], -r0
   13f80:	strheq	r4, [r1], -r0
   13f84:	strheq	r4, [r1], -r0
   13f88:	strheq	r4, [r1], -r0
   13f8c:	strheq	r4, [r1], -r0
   13f90:	strheq	r4, [r1], -r0
   13f94:	strheq	r4, [r1], -r0
   13f98:	strheq	r4, [r1], -r0
   13f9c:	strheq	r4, [r1], -r0
   13fa0:	strdeq	r3, [r1], -r0
   13fa4:	strdeq	r3, [r1], -r0
   13fa8:	strdeq	r3, [r1], -r0
   13fac:	strdeq	r3, [r1], -r0
   13fb0:	andeq	r3, r1, r4, lsl #16
   13fb4:	andeq	r3, r1, ip, lsl fp
   13fb8:	strheq	r4, [r1], -r0
   13fbc:	strheq	r4, [r1], -r0
   13fc0:	strheq	r4, [r1], -r0
   13fc4:	strheq	r4, [r1], -r0
   13fc8:	strheq	r4, [r1], -r0
   13fcc:	strheq	r4, [r1], -r0
   13fd0:	strheq	r4, [r1], -r0
   13fd4:	strheq	r4, [r1], -r0
   13fd8:	strheq	r4, [r1], -r0
   13fdc:	strheq	r4, [r1], -r0
   13fe0:	strheq	r4, [r1], -r0
   13fe4:	strheq	r4, [r1], -r0
   13fe8:	strheq	r4, [r1], -r0
   13fec:	strheq	r4, [r1], -r0
   13ff0:	strheq	r4, [r1], -r0
   13ff4:	strheq	r4, [r1], -r0
   13ff8:	strheq	r4, [r1], -r0
   13ffc:	strheq	r4, [r1], -r0
   14000:	strheq	r4, [r1], -r0
   14004:	strheq	r4, [r1], -r0
   14008:	strheq	r4, [r1], -r0
   1400c:	strheq	r4, [r1], -r0
   14010:	strheq	r4, [r1], -r0
   14014:	strheq	r4, [r1], -r0
   14018:	strheq	r4, [r1], -r0
   1401c:	strheq	r4, [r1], -r0
   14020:	strdeq	r3, [r1], -r0
   14024:			; <UNDEFINED> instruction: 0x000137bc
   14028:	strheq	r4, [r1], -r0
   1402c:	strdeq	r3, [r1], -r0
   14030:	strheq	r4, [r1], -r0
   14034:	strdeq	r3, [r1], -r0
   14038:	strheq	r4, [r1], -r0
   1403c:	strheq	r4, [r1], -r0
   14040:	strheq	r4, [r1], -r0
   14044:	strheq	r4, [r1], -r0
   14048:	strheq	r4, [r1], -r0
   1404c:	strheq	r4, [r1], -r0
   14050:	strheq	r4, [r1], -r0
   14054:	strheq	r4, [r1], -r0
   14058:	strheq	r4, [r1], -r0
   1405c:	strheq	r4, [r1], -r0
   14060:	strheq	r4, [r1], -r0
   14064:	strheq	r4, [r1], -r0
   14068:	strheq	r4, [r1], -r0
   1406c:	strheq	r4, [r1], -r0
   14070:	strheq	r4, [r1], -r0
   14074:	strheq	r4, [r1], -r0
   14078:	strheq	r4, [r1], -r0
   1407c:	strheq	r4, [r1], -r0
   14080:	strheq	r4, [r1], -r0
   14084:	strheq	r4, [r1], -r0
   14088:	strheq	r4, [r1], -r0
   1408c:	strheq	r4, [r1], -r0
   14090:	strheq	r4, [r1], -r0
   14094:	strheq	r4, [r1], -r0
   14098:	strheq	r4, [r1], -r0
   1409c:	strheq	r4, [r1], -r0
   140a0:	ldrdeq	r3, [r1], -r4
   140a4:	strdeq	r3, [r1], -r0
   140a8:	ldrdeq	r3, [r1], -r4
   140ac:	strheq	r4, [r1], -ip
   140b0:	mov	r6, r7
   140b4:	mov	r7, #0
   140b8:	b	13634 <__assert_fail@plt+0x21a4>
   140bc:	cmp	r9, #0
   140c0:	mov	r3, #0
   140c4:	beq	13b04 <__assert_fail@plt+0x2674>
   140c8:	mov	r6, #0
   140cc:	mov	r7, r3
   140d0:	mov	r3, r6
   140d4:	b	13638 <__assert_fail@plt+0x21a8>
   140d8:	mov	r3, #0
   140dc:	b	13ae4 <__assert_fail@plt+0x2654>
   140e0:	mov	r7, #0
   140e4:	mov	r3, #114	; 0x72
   140e8:	b	13904 <__assert_fail@plt+0x2474>
   140ec:	mov	r5, #98	; 0x62
   140f0:	b	13994 <__assert_fail@plt+0x2504>
   140f4:	mov	r5, #97	; 0x61
   140f8:	b	139d4 <__assert_fail@plt+0x2544>
   140fc:	ldr	r3, [sp, #32]
   14100:	cmp	r3, #0
   14104:	bne	1454c <__assert_fail@plt+0x30bc>
   14108:	add	r9, r9, #1
   1410c:	ldr	r3, [sp, #44]	; 0x2c
   14110:	mov	r6, #0
   14114:	mov	r5, #92	; 0x5c
   14118:	b	138cc <__assert_fail@plt+0x243c>
   1411c:	ldr	r3, [sp, #36]	; 0x24
   14120:	ldrb	r3, [r3, #1]
   14124:	adds	r3, r3, #0
   14128:	movne	r3, #1
   1412c:	b	135f0 <__assert_fail@plt+0x2160>
   14130:	ldr	r3, [sp, #164]	; 0xa4
   14134:	ands	r3, r3, #4
   14138:	beq	1415c <__assert_fail@plt+0x2ccc>
   1413c:	ldr	r2, [sp, #24]
   14140:	add	r3, r9, #2
   14144:	cmp	r3, r2
   14148:	bcs	1415c <__assert_fail@plt+0x2ccc>
   1414c:	ldr	r2, [sp, #48]	; 0x30
   14150:	ldrb	r5, [r2, #1]
   14154:	cmp	r5, #63	; 0x3f
   14158:	beq	145c0 <__assert_fail@plt+0x3130>
   1415c:	mov	r2, #0
   14160:	mov	r6, r2
   14164:	mov	r5, #63	; 0x3f
   14168:	b	13618 <__assert_fail@plt+0x2188>
   1416c:	ldr	r3, [sp, #32]
   14170:	cmp	r3, #0
   14174:	bne	1454c <__assert_fail@plt+0x30bc>
   14178:	mov	r6, r3
   1417c:	mov	r5, #63	; 0x3f
   14180:	b	13660 <__assert_fail@plt+0x21d0>
   14184:	ldr	r3, [sp, #24]
   14188:	cmn	r3, #1
   1418c:	mov	r3, #0
   14190:	str	r3, [sp, #108]	; 0x6c
   14194:	str	r3, [sp, #112]	; 0x70
   14198:	bne	141a8 <__assert_fail@plt+0x2d18>
   1419c:	ldr	r0, [sp, #36]	; 0x24
   141a0:	bl	11310 <strlen@plt>
   141a4:	str	r0, [sp, #24]
   141a8:	mov	r3, #0
   141ac:	str	sl, [sp, #88]	; 0x58
   141b0:	ldr	sl, [sp, #36]	; 0x24
   141b4:	str	r5, [sp, #92]	; 0x5c
   141b8:	mov	r5, r3
   141bc:	str	r7, [sp, #96]	; 0x60
   141c0:	str	r4, [sp, #100]	; 0x64
   141c4:	str	r8, [sp, #84]	; 0x54
   141c8:	ldr	r3, [sp, #24]
   141cc:	add	r4, r9, r5
   141d0:	add	r7, sl, r4
   141d4:	sub	r2, r3, r4
   141d8:	mov	r1, r7
   141dc:	add	r3, sp, #108	; 0x6c
   141e0:	add	r0, sp, #104	; 0x68
   141e4:	bl	1869c <fts_children@@Base+0x14c>
   141e8:	subs	r8, r0, #0
   141ec:	beq	1423c <__assert_fail@plt+0x2dac>
   141f0:	cmn	r8, #1
   141f4:	beq	1459c <__assert_fail@plt+0x310c>
   141f8:	cmn	r8, #2
   141fc:	beq	146bc <__assert_fail@plt+0x322c>
   14200:	ldr	r3, [sp, #32]
   14204:	cmp	fp, #2
   14208:	movne	r3, #0
   1420c:	andeq	r3, r3, #1
   14210:	cmp	r3, #0
   14214:	bne	1439c <__assert_fail@plt+0x2f0c>
   14218:	ldr	r0, [sp, #104]	; 0x68
   1421c:	bl	11238 <iswprint@plt>
   14220:	add	r5, r5, r8
   14224:	cmp	r0, #0
   14228:	add	r0, sp, #108	; 0x6c
   1422c:	moveq	r6, #0
   14230:	bl	111d8 <mbsinit@plt>
   14234:	cmp	r0, #0
   14238:	beq	141c8 <__assert_fail@plt+0x2d38>
   1423c:	ldr	r3, [sp, #28]
   14240:	mov	ip, r5
   14244:	eor	r2, r6, #1
   14248:	ldr	r5, [sp, #92]	; 0x5c
   1424c:	ldr	r7, [sp, #96]	; 0x60
   14250:	ldr	r4, [sp, #100]	; 0x64
   14254:	ldr	r8, [sp, #84]	; 0x54
   14258:	ldr	sl, [sp, #88]	; 0x58
   1425c:	and	r2, r2, r3
   14260:	cmp	ip, #1
   14264:	bls	13b64 <__assert_fail@plt+0x26d4>
   14268:	add	r1, ip, r9
   1426c:	ldr	lr, [sp, #48]	; 0x30
   14270:	mov	r0, #0
   14274:	str	r6, [sp, #48]	; 0x30
   14278:	mov	ip, #39	; 0x27
   1427c:	ldr	r6, [sp, #44]	; 0x2c
   14280:	b	14338 <__assert_fail@plt+0x2ea8>
   14284:	ldr	r0, [sp, #32]
   14288:	sub	r3, fp, #2
   1428c:	cmp	r0, #0
   14290:	clz	r3, r3
   14294:	lsr	r3, r3, #5
   14298:	bne	144a0 <__assert_fail@plt+0x3010>
   1429c:	eor	r0, r6, #1
   142a0:	ands	r3, r3, r0
   142a4:	beq	142d4 <__assert_fail@plt+0x2e44>
   142a8:	add	r0, r4, #1
   142ac:	cmp	sl, r4
   142b0:	strbhi	ip, [r8, r4]
   142b4:	cmp	sl, r0
   142b8:	movhi	r6, #36	; 0x24
   142bc:	strbhi	r6, [r8, r0]
   142c0:	add	r0, r4, #2
   142c4:	mov	r6, r3
   142c8:	add	r4, r4, #3
   142cc:	cmp	sl, r0
   142d0:	strbhi	ip, [r8, r0]
   142d4:	cmp	sl, r4
   142d8:	movhi	r3, #92	; 0x5c
   142dc:	strbhi	r3, [r8, r4]
   142e0:	add	r3, r4, #1
   142e4:	cmp	sl, r3
   142e8:	lsrhi	r0, r5, #6
   142ec:	addhi	r0, r0, #48	; 0x30
   142f0:	strbhi	r0, [r8, r3]
   142f4:	add	r0, r4, #2
   142f8:	cmp	sl, r0
   142fc:	lsrhi	r3, r5, #3
   14300:	andhi	r3, r3, #7
   14304:	addhi	r3, r3, #48	; 0x30
   14308:	add	r9, r9, #1
   1430c:	strbhi	r3, [r8, r0]
   14310:	and	r5, r5, #7
   14314:	cmp	r9, r1
   14318:	add	r5, r5, #48	; 0x30
   1431c:	add	r4, r4, #3
   14320:	bcs	144c0 <__assert_fail@plt+0x3030>
   14324:	mov	r0, r2
   14328:	cmp	sl, r4
   1432c:	strbhi	r5, [r8, r4]
   14330:	ldrb	r5, [lr, #1]!
   14334:	add	r4, r4, #1
   14338:	cmp	r2, #0
   1433c:	bne	14284 <__assert_fail@plt+0x2df4>
   14340:	eor	r3, r0, #1
   14344:	and	r3, r3, r6
   14348:	cmp	r7, #0
   1434c:	uxtb	r3, r3
   14350:	beq	14364 <__assert_fail@plt+0x2ed4>
   14354:	cmp	sl, r4
   14358:	movhi	r7, #92	; 0x5c
   1435c:	strbhi	r7, [r8, r4]
   14360:	add	r4, r4, #1
   14364:	add	r9, r9, #1
   14368:	cmp	r9, r1
   1436c:	bcs	144b4 <__assert_fail@plt+0x3024>
   14370:	cmp	r3, #0
   14374:	beq	144e0 <__assert_fail@plt+0x3050>
   14378:	cmp	sl, r4
   1437c:	add	r3, r4, #1
   14380:	strbhi	ip, [r8, r4]
   14384:	mov	r7, #0
   14388:	cmp	sl, r3
   1438c:	strbhi	ip, [r8, r3]
   14390:	add	r4, r4, #2
   14394:	mov	r6, r7
   14398:	b	14328 <__assert_fail@plt+0x2e98>
   1439c:	cmp	r8, #1
   143a0:	beq	14218 <__assert_fail@plt+0x2d88>
   143a4:	add	r1, r4, #1
   143a8:	add	r3, sl, r8
   143ac:	add	r1, sl, r1
   143b0:	add	r4, r3, r4
   143b4:	ldrb	r3, [r1], #1
   143b8:	sub	r3, r3, #91	; 0x5b
   143bc:	cmp	r3, #33	; 0x21
   143c0:	ldrls	pc, [pc, r3, lsl #2]
   143c4:	b	14450 <__assert_fail@plt+0x2fc0>
   143c8:	andeq	r4, r1, ip, asr r4
   143cc:	andeq	r4, r1, ip, asr r4
   143d0:	andeq	r4, r1, r0, asr r4
   143d4:	andeq	r4, r1, ip, asr r4
   143d8:	andeq	r4, r1, r0, asr r4
   143dc:	andeq	r4, r1, ip, asr r4
   143e0:	andeq	r4, r1, r0, asr r4
   143e4:	andeq	r4, r1, r0, asr r4
   143e8:	andeq	r4, r1, r0, asr r4
   143ec:	andeq	r4, r1, r0, asr r4
   143f0:	andeq	r4, r1, r0, asr r4
   143f4:	andeq	r4, r1, r0, asr r4
   143f8:	andeq	r4, r1, r0, asr r4
   143fc:	andeq	r4, r1, r0, asr r4
   14400:	andeq	r4, r1, r0, asr r4
   14404:	andeq	r4, r1, r0, asr r4
   14408:	andeq	r4, r1, r0, asr r4
   1440c:	andeq	r4, r1, r0, asr r4
   14410:	andeq	r4, r1, r0, asr r4
   14414:	andeq	r4, r1, r0, asr r4
   14418:	andeq	r4, r1, r0, asr r4
   1441c:	andeq	r4, r1, r0, asr r4
   14420:	andeq	r4, r1, r0, asr r4
   14424:	andeq	r4, r1, r0, asr r4
   14428:	andeq	r4, r1, r0, asr r4
   1442c:	andeq	r4, r1, r0, asr r4
   14430:	andeq	r4, r1, r0, asr r4
   14434:	andeq	r4, r1, r0, asr r4
   14438:	andeq	r4, r1, r0, asr r4
   1443c:	andeq	r4, r1, r0, asr r4
   14440:	andeq	r4, r1, r0, asr r4
   14444:	andeq	r4, r1, r0, asr r4
   14448:	andeq	r4, r1, r0, asr r4
   1444c:	andeq	r4, r1, ip, asr r4
   14450:	cmp	r4, r1
   14454:	bne	143b4 <__assert_fail@plt+0x2f24>
   14458:	b	14218 <__assert_fail@plt+0x2d88>
   1445c:	ldr	fp, [sp, #84]	; 0x54
   14460:	ldr	sl, [sp, #88]	; 0x58
   14464:	mov	r8, #2
   14468:	b	13924 <__assert_fail@plt+0x2494>
   1446c:	cmp	sl, r4
   14470:	movls	r1, r4
   14474:	bls	13a74 <__assert_fail@plt+0x25e4>
   14478:	ldr	r3, [sp, #44]	; 0x2c
   1447c:	b	13a64 <__assert_fail@plt+0x25d4>
   14480:	str	sl, [sp, #72]	; 0x48
   14484:	ldr	sl, [sp, #32]
   14488:	b	1389c <__assert_fail@plt+0x240c>
   1448c:	add	r9, r9, #1
   14490:	b	13190 <__assert_fail@plt+0x1d00>
   14494:	ldr	r2, [sp, #28]
   14498:	mov	r6, #0
   1449c:	b	14268 <__assert_fail@plt+0x2dd8>
   144a0:	str	fp, [sp, #160]	; 0xa0
   144a4:	str	r3, [sp, #28]
   144a8:	mov	fp, r8
   144ac:	ldr	r8, [sp, #160]	; 0xa0
   144b0:	b	13924 <__assert_fail@plt+0x2494>
   144b4:	str	r6, [sp, #44]	; 0x2c
   144b8:	ldr	r6, [sp, #48]	; 0x30
   144bc:	b	138cc <__assert_fail@plt+0x243c>
   144c0:	str	r6, [sp, #44]	; 0x2c
   144c4:	ldr	r6, [sp, #48]	; 0x30
   144c8:	b	136d8 <__assert_fail@plt+0x2248>
   144cc:	add	r4, r4, #4
   144d0:	str	r3, [sp, #44]	; 0x2c
   144d4:	mov	r6, #0
   144d8:	mov	r5, #48	; 0x30
   144dc:	b	13660 <__assert_fail@plt+0x21d0>
   144e0:	mov	r7, r3
   144e4:	b	14328 <__assert_fail@plt+0x2e98>
   144e8:	ldr	r3, [pc, #-1624]	; 13e98 <__assert_fail@plt+0x2a08>
   144ec:	mov	r4, #1
   144f0:	str	r4, [sp, #40]	; 0x28
   144f4:	str	r4, [sp, #28]
   144f8:	str	r4, [sp, #52]	; 0x34
   144fc:	str	sl, [sp, #72]	; 0x48
   14500:	str	sl, [sp, #68]	; 0x44
   14504:	str	sl, [sp, #44]	; 0x2c
   14508:	str	sl, [sp, #32]
   1450c:	str	r3, [sp, #60]	; 0x3c
   14510:	b	13180 <__assert_fail@plt+0x1cf0>
   14514:	mov	r3, r6
   14518:	mov	r5, #48	; 0x30
   1451c:	mov	r6, #0
   14520:	b	13660 <__assert_fail@plt+0x21d0>
   14524:	cmp	sl, r4
   14528:	movhi	r3, #48	; 0x30
   1452c:	strbhi	r3, [r8, r4]
   14530:	add	r3, r1, #2
   14534:	cmp	sl, r3
   14538:	movhi	r0, #48	; 0x30
   1453c:	strbhi	r0, [r8, r3]
   14540:	add	r4, r1, #3
   14544:	mov	r5, #48	; 0x30
   14548:	b	13aa8 <__assert_fail@plt+0x2618>
   1454c:	str	fp, [sp, #160]	; 0xa0
   14550:	mov	fp, r8
   14554:	ldr	r8, [sp, #160]	; 0xa0
   14558:	b	13924 <__assert_fail@plt+0x2494>
   1455c:	ldr	r2, [sp, #80]	; 0x50
   14560:	ldrb	r3, [r2]
   14564:	cmp	r3, #0
   14568:	beq	13150 <__assert_fail@plt+0x1cc0>
   1456c:	cmp	sl, r4
   14570:	strbhi	r3, [fp, r4]
   14574:	ldrb	r3, [r2, #1]!
   14578:	add	r4, r4, #1
   1457c:	cmp	r3, #0
   14580:	bne	1456c <__assert_fail@plt+0x30dc>
   14584:	b	13150 <__assert_fail@plt+0x1cc0>
   14588:	str	fp, [sp, #160]	; 0xa0
   1458c:	mov	r3, #0
   14590:	mov	fp, r8
   14594:	ldr	r8, [sp, #160]	; 0xa0
   14598:	b	139b8 <__assert_fail@plt+0x2528>
   1459c:	mov	ip, r5
   145a0:	ldr	r7, [sp, #96]	; 0x60
   145a4:	ldr	r5, [sp, #92]	; 0x5c
   145a8:	ldr	r4, [sp, #100]	; 0x64
   145ac:	ldr	r8, [sp, #84]	; 0x54
   145b0:	ldr	sl, [sp, #88]	; 0x58
   145b4:	ldr	r2, [sp, #28]
   145b8:	mov	r6, #0
   145bc:	b	14260 <__assert_fail@plt+0x2dd0>
   145c0:	ldr	r2, [sp, #36]	; 0x24
   145c4:	ldrb	r1, [r2, r3]
   145c8:	sub	r2, r1, #33	; 0x21
   145cc:	cmp	r2, #29
   145d0:	ldrls	pc, [pc, r2, lsl #2]
   145d4:	b	146b0 <__assert_fail@plt+0x3220>
   145d8:	andeq	r4, r1, r0, asr r6
   145dc:			; <UNDEFINED> instruction: 0x000146b0
   145e0:			; <UNDEFINED> instruction: 0x000146b0
   145e4:			; <UNDEFINED> instruction: 0x000146b0
   145e8:			; <UNDEFINED> instruction: 0x000146b0
   145ec:			; <UNDEFINED> instruction: 0x000146b0
   145f0:	andeq	r4, r1, r0, asr r6
   145f4:	andeq	r4, r1, r0, asr r6
   145f8:	andeq	r4, r1, r0, asr r6
   145fc:			; <UNDEFINED> instruction: 0x000146b0
   14600:			; <UNDEFINED> instruction: 0x000146b0
   14604:			; <UNDEFINED> instruction: 0x000146b0
   14608:	andeq	r4, r1, r0, asr r6
   1460c:			; <UNDEFINED> instruction: 0x000146b0
   14610:	andeq	r4, r1, r0, asr r6
   14614:			; <UNDEFINED> instruction: 0x000146b0
   14618:			; <UNDEFINED> instruction: 0x000146b0
   1461c:			; <UNDEFINED> instruction: 0x000146b0
   14620:			; <UNDEFINED> instruction: 0x000146b0
   14624:			; <UNDEFINED> instruction: 0x000146b0
   14628:			; <UNDEFINED> instruction: 0x000146b0
   1462c:			; <UNDEFINED> instruction: 0x000146b0
   14630:			; <UNDEFINED> instruction: 0x000146b0
   14634:			; <UNDEFINED> instruction: 0x000146b0
   14638:			; <UNDEFINED> instruction: 0x000146b0
   1463c:			; <UNDEFINED> instruction: 0x000146b0
   14640:			; <UNDEFINED> instruction: 0x000146b0
   14644:	andeq	r4, r1, r0, asr r6
   14648:	andeq	r4, r1, r0, asr r6
   1464c:	andeq	r4, r1, r0, asr r6
   14650:	ldr	r2, [sp, #32]
   14654:	cmp	r2, #0
   14658:	bne	1475c <__assert_fail@plt+0x32cc>
   1465c:	cmp	sl, r4
   14660:	movhi	r2, #63	; 0x3f
   14664:	strbhi	r2, [r8, r4]
   14668:	add	r2, r4, #1
   1466c:	cmp	sl, r2
   14670:	movhi	r0, #34	; 0x22
   14674:	strbhi	r0, [r8, r2]
   14678:	add	r2, r4, #2
   1467c:	cmp	sl, r2
   14680:	movhi	r0, #34	; 0x22
   14684:	strbhi	r0, [r8, r2]
   14688:	add	r2, r4, #3
   1468c:	cmp	sl, r2
   14690:	movhi	r0, #63	; 0x3f
   14694:	strbhi	r0, [r8, r2]
   14698:	mov	r2, #0
   1469c:	add	r4, r4, #4
   146a0:	mov	r5, r1
   146a4:	mov	r9, r3
   146a8:	mov	r6, r2
   146ac:	b	13aa8 <__assert_fail@plt+0x2618>
   146b0:	mov	r2, #0
   146b4:	mov	r6, r2
   146b8:	b	13618 <__assert_fail@plt+0x2188>
   146bc:	ldr	r0, [sp, #24]
   146c0:	mov	r1, r4
   146c4:	cmp	r1, r0
   146c8:	mov	r2, r7
   146cc:	mov	r3, r5
   146d0:	mov	ip, r5
   146d4:	ldr	r7, [sp, #96]	; 0x60
   146d8:	ldr	r5, [sp, #92]	; 0x5c
   146dc:	ldr	r4, [sp, #100]	; 0x64
   146e0:	ldr	r8, [sp, #84]	; 0x54
   146e4:	ldr	sl, [sp, #88]	; 0x58
   146e8:	bcs	1471c <__assert_fail@plt+0x328c>
   146ec:	ldrb	r6, [r2]
   146f0:	cmp	r6, #0
   146f4:	bne	14708 <__assert_fail@plt+0x3278>
   146f8:	b	14838 <__assert_fail@plt+0x33a8>
   146fc:	ldrb	r6, [r2, #1]!
   14700:	cmp	r6, #0
   14704:	beq	147c0 <__assert_fail@plt+0x3330>
   14708:	add	r3, r3, #1
   1470c:	add	r1, r9, r3
   14710:	cmp	r1, r0
   14714:	bcc	146fc <__assert_fail@plt+0x326c>
   14718:	mov	ip, r3
   1471c:	ldr	r2, [sp, #28]
   14720:	mov	r6, #0
   14724:	b	14260 <__assert_fail@plt+0x2dd0>
   14728:	mov	r3, #1
   1472c:	str	r3, [sp, #40]	; 0x28
   14730:	str	r3, [sp, #32]
   14734:	str	r3, [sp, #28]
   14738:	str	r3, [sp, #52]	; 0x34
   1473c:	ldr	r3, [pc, #-2220]	; 13e98 <__assert_fail@plt+0x2a08>
   14740:	mov	r2, #0
   14744:	str	r2, [sp, #68]	; 0x44
   14748:	str	r2, [sp, #44]	; 0x2c
   1474c:	str	r2, [sp, #72]	; 0x48
   14750:	mov	r4, r2
   14754:	str	r3, [sp, #60]	; 0x3c
   14758:	b	13180 <__assert_fail@plt+0x1cf0>
   1475c:	str	fp, [sp, #160]	; 0xa0
   14760:	mov	fp, r8
   14764:	ldr	r8, [sp, #160]	; 0xa0
   14768:	b	13930 <__assert_fail@plt+0x24a0>
   1476c:	mov	r2, r3
   14770:	ldr	r3, [sp, #60]	; 0x3c
   14774:	cmp	r3, #0
   14778:	moveq	r2, #0
   1477c:	andne	r2, r2, #1
   14780:	cmp	r2, #0
   14784:	beq	147b0 <__assert_fail@plt+0x3320>
   14788:	mov	r2, r3
   1478c:	ldrb	r3, [r3]
   14790:	cmp	r3, #0
   14794:	beq	147b0 <__assert_fail@plt+0x3320>
   14798:	cmp	sl, r4
   1479c:	strbhi	r3, [fp, r4]
   147a0:	ldrb	r3, [r2, #1]!
   147a4:	add	r4, r4, #1
   147a8:	cmp	r3, #0
   147ac:	bne	14798 <__assert_fail@plt+0x3308>
   147b0:	cmp	sl, r4
   147b4:	movhi	r3, #0
   147b8:	strbhi	r3, [fp, r4]
   147bc:	b	13970 <__assert_fail@plt+0x24e0>
   147c0:	mov	ip, r3
   147c4:	ldr	r2, [sp, #28]
   147c8:	b	14260 <__assert_fail@plt+0x2dd0>
   147cc:	str	fp, [sp, #160]	; 0xa0
   147d0:	mov	fp, r8
   147d4:	ldr	r8, [sp, #160]	; 0xa0
   147d8:	sub	r3, r8, #2
   147dc:	clz	r3, r3
   147e0:	lsr	r3, r3, #5
   147e4:	str	r3, [sp, #28]
   147e8:	b	13924 <__assert_fail@plt+0x2494>
   147ec:	ldr	r3, [sp, #76]	; 0x4c
   147f0:	mov	ip, #5
   147f4:	str	r3, [sp, #16]
   147f8:	ldr	r3, [sp, #80]	; 0x50
   147fc:	ldr	r2, [sp, #36]	; 0x24
   14800:	str	r3, [sp, #12]
   14804:	ldr	r3, [sp, #56]	; 0x38
   14808:	ldr	r1, [sp, #72]	; 0x48
   1480c:	str	r3, [sp, #8]
   14810:	ldr	r3, [sp, #164]	; 0xa4
   14814:	mov	r0, fp
   14818:	str	r3, [sp, #4]
   1481c:	str	ip, [sp]
   14820:	ldr	r3, [sp, #24]
   14824:	bl	13088 <__assert_fail@plt+0x1bf8>
   14828:	mov	r4, r0
   1482c:	b	13970 <__assert_fail@plt+0x24e0>
   14830:	mov	r8, #2
   14834:	b	13924 <__assert_fail@plt+0x2494>
   14838:	ldr	r2, [sp, #28]
   1483c:	b	14260 <__assert_fail@plt+0x2dd0>
   14840:	mov	r3, #0
   14844:	str	r3, [sp, #68]	; 0x44
   14848:	str	r3, [sp, #44]	; 0x2c
   1484c:	str	r3, [sp, #72]	; 0x48
   14850:	str	r3, [sp, #28]
   14854:	mov	r4, r3
   14858:	ldr	r3, [pc, #-2500]	; 13e9c <__assert_fail@plt+0x2a0c>
   1485c:	mov	r2, #1
   14860:	str	r2, [sp, #40]	; 0x28
   14864:	str	r2, [sp, #32]
   14868:	str	r2, [sp, #52]	; 0x34
   1486c:	str	r3, [sp, #60]	; 0x3c
   14870:	b	13180 <__assert_fail@plt+0x1cf0>
   14874:	bl	11208 <__stack_chk_fail@plt>
   14878:	mov	r5, r3
   1487c:	mov	r6, #0
   14880:	b	13674 <__assert_fail@plt+0x21e4>
   14884:	mov	r3, #0
   14888:	mov	r2, #1
   1488c:	str	r3, [sp, #44]	; 0x2c
   14890:	str	r3, [sp, #72]	; 0x48
   14894:	str	r2, [sp, #40]	; 0x28
   14898:	b	13790 <__assert_fail@plt+0x2300>
   1489c:	bl	11448 <abort@plt>
   148a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148a4:	sub	sp, sp, #44	; 0x2c
   148a8:	mov	r6, r0
   148ac:	mov	r4, r3
   148b0:	mov	sl, r1
   148b4:	mov	fp, r2
   148b8:	bl	11340 <__errno_location@plt>
   148bc:	ldr	r7, [pc, #364]	; 14a30 <__assert_fail@plt+0x35a0>
   148c0:	cmp	r6, #0
   148c4:	ldr	r5, [r7]
   148c8:	ldr	r3, [r0]
   148cc:	str	r3, [sp, #24]
   148d0:	blt	14a2c <__assert_fail@plt+0x359c>
   148d4:	ldr	r3, [r7, #4]
   148d8:	mov	r8, r0
   148dc:	cmp	r3, r6
   148e0:	bgt	1492c <__assert_fail@plt+0x349c>
   148e4:	cmn	r6, #-268435454	; 0xf0000002
   148e8:	bgt	14a28 <__assert_fail@plt+0x3598>
   148ec:	add	r9, r6, #1
   148f0:	add	r3, r7, #8
   148f4:	cmp	r5, r3
   148f8:	lsl	r1, r9, #3
   148fc:	beq	14a08 <__assert_fail@plt+0x3578>
   14900:	mov	r0, r5
   14904:	bl	15ac4 <__assert_fail@plt+0x4634>
   14908:	mov	r5, r0
   1490c:	str	r0, [r7]
   14910:	ldr	r0, [r7, #4]
   14914:	mov	r1, #0
   14918:	sub	r2, r9, r0
   1491c:	add	r0, r5, r0, lsl #3
   14920:	lsl	r2, r2, #3
   14924:	bl	11358 <memset@plt>
   14928:	str	r9, [r7, #4]
   1492c:	add	r3, r5, r6, lsl #3
   14930:	ldr	r1, [r4, #4]
   14934:	ldr	r7, [r3, #4]
   14938:	ldr	r9, [r5, r6, lsl #3]
   1493c:	ldr	r2, [r4, #40]	; 0x28
   14940:	ldr	ip, [r4, #44]	; 0x2c
   14944:	str	r3, [sp, #28]
   14948:	ldr	r3, [r4]
   1494c:	orr	r1, r1, #1
   14950:	add	lr, r4, #8
   14954:	str	r1, [sp, #36]	; 0x24
   14958:	str	r1, [sp, #4]
   1495c:	str	r2, [sp, #12]
   14960:	str	r3, [sp]
   14964:	mov	r0, r7
   14968:	mov	r1, r9
   1496c:	str	ip, [sp, #16]
   14970:	str	lr, [sp, #8]
   14974:	mov	r3, fp
   14978:	mov	r2, sl
   1497c:	str	lr, [sp, #32]
   14980:	bl	13088 <__assert_fail@plt+0x1bf8>
   14984:	cmp	r9, r0
   14988:	bhi	149f4 <__assert_fail@plt+0x3564>
   1498c:	ldr	r3, [pc, #160]	; 14a34 <__assert_fail@plt+0x35a4>
   14990:	add	r9, r0, #1
   14994:	cmp	r7, r3
   14998:	str	r9, [r5, r6, lsl #3]
   1499c:	beq	149a8 <__assert_fail@plt+0x3518>
   149a0:	mov	r0, r7
   149a4:	bl	111a8 <free@plt>
   149a8:	mov	r0, r9
   149ac:	bl	15a68 <__assert_fail@plt+0x45d8>
   149b0:	ldr	lr, [sp, #28]
   149b4:	ldr	ip, [r4, #44]	; 0x2c
   149b8:	ldr	r5, [r4, #40]	; 0x28
   149bc:	mov	r3, fp
   149c0:	mov	r2, sl
   149c4:	mov	r1, r9
   149c8:	str	r0, [lr, #4]
   149cc:	ldr	lr, [r4]
   149d0:	ldr	r4, [sp, #32]
   149d4:	str	ip, [sp, #16]
   149d8:	str	r4, [sp, #8]
   149dc:	ldr	r4, [sp, #36]	; 0x24
   149e0:	str	r5, [sp, #12]
   149e4:	str	r4, [sp, #4]
   149e8:	str	lr, [sp]
   149ec:	mov	r7, r0
   149f0:	bl	13088 <__assert_fail@plt+0x1bf8>
   149f4:	ldr	r3, [sp, #24]
   149f8:	mov	r0, r7
   149fc:	str	r3, [r8]
   14a00:	add	sp, sp, #44	; 0x2c
   14a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a08:	mov	r0, #0
   14a0c:	bl	15ac4 <__assert_fail@plt+0x4634>
   14a10:	ldr	r3, [pc, #32]	; 14a38 <__assert_fail@plt+0x35a8>
   14a14:	mov	r5, r0
   14a18:	ldm	r3, {r0, r1}
   14a1c:	str	r5, [r7]
   14a20:	stm	r5, {r0, r1}
   14a24:	b	14910 <__assert_fail@plt+0x3480>
   14a28:	bl	15cb0 <__assert_fail@plt+0x4820>
   14a2c:	bl	11448 <abort@plt>
   14a30:	andeq	ip, r2, r4, asr #2
   14a34:	andeq	ip, r2, ip, asr #3
   14a38:	andeq	ip, r2, ip, asr #2
   14a3c:	push	{r4, r5, r6, lr}
   14a40:	mov	r5, r0
   14a44:	bl	11340 <__errno_location@plt>
   14a48:	cmp	r5, #0
   14a4c:	mov	r1, #48	; 0x30
   14a50:	mov	r4, r0
   14a54:	ldr	r0, [pc, #16]	; 14a6c <__assert_fail@plt+0x35dc>
   14a58:	ldr	r6, [r4]
   14a5c:	movne	r0, r5
   14a60:	bl	15c70 <__assert_fail@plt+0x47e0>
   14a64:	str	r6, [r4]
   14a68:	pop	{r4, r5, r6, pc}
   14a6c:	andeq	ip, r2, ip, asr #5
   14a70:	ldr	r3, [pc, #12]	; 14a84 <__assert_fail@plt+0x35f4>
   14a74:	cmp	r0, #0
   14a78:	moveq	r0, r3
   14a7c:	ldr	r0, [r0]
   14a80:	bx	lr
   14a84:	andeq	ip, r2, ip, asr #5
   14a88:	ldr	r3, [pc, #12]	; 14a9c <__assert_fail@plt+0x360c>
   14a8c:	cmp	r0, #0
   14a90:	moveq	r0, r3
   14a94:	str	r1, [r0]
   14a98:	bx	lr
   14a9c:	andeq	ip, r2, ip, asr #5
   14aa0:	ldr	r3, [pc, #52]	; 14adc <__assert_fail@plt+0x364c>
   14aa4:	cmp	r0, #0
   14aa8:	moveq	r0, r3
   14aac:	add	r3, r0, #8
   14ab0:	push	{lr}		; (str lr, [sp, #-4]!)
   14ab4:	lsr	lr, r1, #5
   14ab8:	and	r1, r1, #31
   14abc:	ldr	ip, [r3, lr, lsl #2]
   14ac0:	lsr	r0, ip, r1
   14ac4:	eor	r2, r2, r0
   14ac8:	and	r2, r2, #1
   14acc:	and	r0, r0, #1
   14ad0:	eor	r1, ip, r2, lsl r1
   14ad4:	str	r1, [r3, lr, lsl #2]
   14ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   14adc:	andeq	ip, r2, ip, asr #5
   14ae0:	ldr	r3, [pc, #16]	; 14af8 <__assert_fail@plt+0x3668>
   14ae4:	cmp	r0, #0
   14ae8:	movne	r3, r0
   14aec:	ldr	r0, [r3, #4]
   14af0:	str	r1, [r3, #4]
   14af4:	bx	lr
   14af8:	andeq	ip, r2, ip, asr #5
   14afc:	ldr	r3, [pc, #44]	; 14b30 <__assert_fail@plt+0x36a0>
   14b00:	cmp	r0, #0
   14b04:	moveq	r0, r3
   14b08:	mov	ip, #10
   14b0c:	cmp	r2, #0
   14b10:	cmpne	r1, #0
   14b14:	str	ip, [r0]
   14b18:	beq	14b28 <__assert_fail@plt+0x3698>
   14b1c:	str	r1, [r0, #40]	; 0x28
   14b20:	str	r2, [r0, #44]	; 0x2c
   14b24:	bx	lr
   14b28:	push	{r4, lr}
   14b2c:	bl	11448 <abort@plt>
   14b30:	andeq	ip, r2, ip, asr #5
   14b34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b38:	sub	sp, sp, #24
   14b3c:	ldr	ip, [pc, #108]	; 14bb0 <__assert_fail@plt+0x3720>
   14b40:	ldr	r4, [sp, #56]	; 0x38
   14b44:	mov	r9, r2
   14b48:	cmp	r4, #0
   14b4c:	moveq	r4, ip
   14b50:	mov	sl, r3
   14b54:	mov	r7, r0
   14b58:	mov	r8, r1
   14b5c:	bl	11340 <__errno_location@plt>
   14b60:	ldr	r3, [r4, #44]	; 0x2c
   14b64:	mov	r1, r8
   14b68:	ldr	r6, [r0]
   14b6c:	str	r3, [sp, #16]
   14b70:	ldr	r2, [r4, #40]	; 0x28
   14b74:	add	r3, r4, #8
   14b78:	str	r3, [sp, #8]
   14b7c:	str	r2, [sp, #12]
   14b80:	ldr	r2, [r4, #4]
   14b84:	mov	r5, r0
   14b88:	str	r2, [sp, #4]
   14b8c:	ldr	ip, [r4]
   14b90:	mov	r3, sl
   14b94:	mov	r2, r9
   14b98:	mov	r0, r7
   14b9c:	str	ip, [sp]
   14ba0:	bl	13088 <__assert_fail@plt+0x1bf8>
   14ba4:	str	r6, [r5]
   14ba8:	add	sp, sp, #24
   14bac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bb0:	andeq	ip, r2, ip, asr #5
   14bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bb8:	cmp	r3, #0
   14bbc:	sub	sp, sp, #44	; 0x2c
   14bc0:	ldr	r4, [pc, #192]	; 14c88 <__assert_fail@plt+0x37f8>
   14bc4:	mov	r6, r2
   14bc8:	movne	r4, r3
   14bcc:	mov	r9, r1
   14bd0:	mov	r8, r0
   14bd4:	bl	11340 <__errno_location@plt>
   14bd8:	ldr	r3, [r4, #44]	; 0x2c
   14bdc:	ldr	r5, [r4, #4]
   14be0:	add	sl, r4, #8
   14be4:	cmp	r6, #0
   14be8:	orreq	r5, r5, #1
   14bec:	mov	r1, #0
   14bf0:	ldr	r2, [r0]
   14bf4:	str	r3, [sp, #16]
   14bf8:	ldr	r3, [r4, #40]	; 0x28
   14bfc:	stmib	sp, {r5, sl}
   14c00:	str	r3, [sp, #12]
   14c04:	ldr	r3, [r4]
   14c08:	mov	r7, r0
   14c0c:	str	r2, [sp, #28]
   14c10:	str	r3, [sp]
   14c14:	mov	r2, r8
   14c18:	mov	r3, r9
   14c1c:	mov	r0, r1
   14c20:	bl	13088 <__assert_fail@plt+0x1bf8>
   14c24:	add	r1, r0, #1
   14c28:	mov	fp, r0
   14c2c:	mov	r0, r1
   14c30:	str	r1, [sp, #36]	; 0x24
   14c34:	bl	15a68 <__assert_fail@plt+0x45d8>
   14c38:	ldr	r3, [r4, #44]	; 0x2c
   14c3c:	mov	r2, r8
   14c40:	str	r3, [sp, #16]
   14c44:	ldr	r3, [r4, #40]	; 0x28
   14c48:	str	r5, [sp, #4]
   14c4c:	str	r3, [sp, #12]
   14c50:	str	sl, [sp, #8]
   14c54:	ldr	ip, [r4]
   14c58:	ldr	r1, [sp, #36]	; 0x24
   14c5c:	mov	r3, r9
   14c60:	str	ip, [sp]
   14c64:	str	r0, [sp, #32]
   14c68:	bl	13088 <__assert_fail@plt+0x1bf8>
   14c6c:	ldr	r2, [sp, #28]
   14c70:	cmp	r6, #0
   14c74:	str	r2, [r7]
   14c78:	ldr	r0, [sp, #32]
   14c7c:	strne	fp, [r6]
   14c80:	add	sp, sp, #44	; 0x2c
   14c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c88:	andeq	ip, r2, ip, asr #5
   14c8c:	mov	r3, r2
   14c90:	mov	r2, #0
   14c94:	b	14bb4 <__assert_fail@plt+0x3724>
   14c98:	push	{r4, r5, r6, r7, r8, lr}
   14c9c:	ldr	r6, [pc, #112]	; 14d14 <__assert_fail@plt+0x3884>
   14ca0:	ldr	r3, [r6, #4]
   14ca4:	ldr	r7, [r6]
   14ca8:	cmp	r3, #1
   14cac:	ble	14cd0 <__assert_fail@plt+0x3840>
   14cb0:	sub	r5, r7, #8
   14cb4:	add	r5, r5, r3, lsl #3
   14cb8:	mov	r4, r7
   14cbc:	ldr	r0, [r4, #12]
   14cc0:	add	r4, r4, #8
   14cc4:	bl	111a8 <free@plt>
   14cc8:	cmp	r4, r5
   14ccc:	bne	14cbc <__assert_fail@plt+0x382c>
   14cd0:	ldr	r0, [r7, #4]
   14cd4:	ldr	r4, [pc, #60]	; 14d18 <__assert_fail@plt+0x3888>
   14cd8:	cmp	r0, r4
   14cdc:	beq	14cf0 <__assert_fail@plt+0x3860>
   14ce0:	bl	111a8 <free@plt>
   14ce4:	mov	r3, #256	; 0x100
   14ce8:	str	r4, [r6, #12]
   14cec:	str	r3, [r6, #8]
   14cf0:	ldr	r4, [pc, #36]	; 14d1c <__assert_fail@plt+0x388c>
   14cf4:	cmp	r7, r4
   14cf8:	beq	14d08 <__assert_fail@plt+0x3878>
   14cfc:	mov	r0, r7
   14d00:	bl	111a8 <free@plt>
   14d04:	str	r4, [r6]
   14d08:	mov	r3, #1
   14d0c:	str	r3, [r6, #4]
   14d10:	pop	{r4, r5, r6, r7, r8, pc}
   14d14:	andeq	ip, r2, r4, asr #2
   14d18:	andeq	ip, r2, ip, asr #3
   14d1c:	andeq	ip, r2, ip, asr #2
   14d20:	ldr	r3, [pc, #4]	; 14d2c <__assert_fail@plt+0x389c>
   14d24:	mvn	r2, #0
   14d28:	b	148a0 <__assert_fail@plt+0x3410>
   14d2c:	andeq	ip, r2, ip, asr #5
   14d30:	ldr	r3, [pc]	; 14d38 <__assert_fail@plt+0x38a8>
   14d34:	b	148a0 <__assert_fail@plt+0x3410>
   14d38:	andeq	ip, r2, ip, asr #5
   14d3c:	mov	r1, r0
   14d40:	ldr	r3, [pc, #8]	; 14d50 <__assert_fail@plt+0x38c0>
   14d44:	mvn	r2, #0
   14d48:	mov	r0, #0
   14d4c:	b	148a0 <__assert_fail@plt+0x3410>
   14d50:	andeq	ip, r2, ip, asr #5
   14d54:	mov	r2, r1
   14d58:	ldr	r3, [pc, #8]	; 14d68 <__assert_fail@plt+0x38d8>
   14d5c:	mov	r1, r0
   14d60:	mov	r0, #0
   14d64:	b	148a0 <__assert_fail@plt+0x3410>
   14d68:	andeq	ip, r2, ip, asr #5
   14d6c:	push	{r4, r5, r6, lr}
   14d70:	sub	sp, sp, #56	; 0x38
   14d74:	ldr	r4, [pc, #68]	; 14dc0 <__assert_fail@plt+0x3930>
   14d78:	mov	r6, r2
   14d7c:	mov	r5, r0
   14d80:	ldr	r3, [r4]
   14d84:	add	r0, sp, #4
   14d88:	str	r3, [sp, #52]	; 0x34
   14d8c:	bl	12f18 <__assert_fail@plt+0x1a88>
   14d90:	add	r3, sp, #4
   14d94:	mvn	r2, #0
   14d98:	mov	r1, r6
   14d9c:	mov	r0, r5
   14da0:	bl	148a0 <__assert_fail@plt+0x3410>
   14da4:	ldr	r2, [sp, #52]	; 0x34
   14da8:	ldr	r3, [r4]
   14dac:	cmp	r2, r3
   14db0:	bne	14dbc <__assert_fail@plt+0x392c>
   14db4:	add	sp, sp, #56	; 0x38
   14db8:	pop	{r4, r5, r6, pc}
   14dbc:	bl	11208 <__stack_chk_fail@plt>
   14dc0:	andeq	fp, r2, r8, lsl #30
   14dc4:	push	{r4, r5, r6, r7, lr}
   14dc8:	sub	sp, sp, #60	; 0x3c
   14dcc:	ldr	r4, [pc, #72]	; 14e1c <__assert_fail@plt+0x398c>
   14dd0:	mov	r6, r2
   14dd4:	mov	r7, r3
   14dd8:	ldr	ip, [r4]
   14ddc:	mov	r5, r0
   14de0:	add	r0, sp, #4
   14de4:	str	ip, [sp, #52]	; 0x34
   14de8:	bl	12f18 <__assert_fail@plt+0x1a88>
   14dec:	add	r3, sp, #4
   14df0:	mov	r2, r7
   14df4:	mov	r1, r6
   14df8:	mov	r0, r5
   14dfc:	bl	148a0 <__assert_fail@plt+0x3410>
   14e00:	ldr	r2, [sp, #52]	; 0x34
   14e04:	ldr	r3, [r4]
   14e08:	cmp	r2, r3
   14e0c:	bne	14e18 <__assert_fail@plt+0x3988>
   14e10:	add	sp, sp, #60	; 0x3c
   14e14:	pop	{r4, r5, r6, r7, pc}
   14e18:	bl	11208 <__stack_chk_fail@plt>
   14e1c:	andeq	fp, r2, r8, lsl #30
   14e20:	mov	r2, r1
   14e24:	mov	r1, r0
   14e28:	mov	r0, #0
   14e2c:	b	14d6c <__assert_fail@plt+0x38dc>
   14e30:	mov	r3, r2
   14e34:	mov	r2, r1
   14e38:	mov	r1, r0
   14e3c:	mov	r0, #0
   14e40:	b	14dc4 <__assert_fail@plt+0x3934>
   14e44:	push	{r4, r5, r6, r7, r8, r9, lr}
   14e48:	mov	r4, r2
   14e4c:	ldr	lr, [pc, #128]	; 14ed4 <__assert_fail@plt+0x3a44>
   14e50:	mov	r8, r0
   14e54:	mov	r9, r1
   14e58:	ldm	lr!, {r0, r1, r2, r3}
   14e5c:	sub	sp, sp, #60	; 0x3c
   14e60:	add	ip, sp, #4
   14e64:	lsr	r6, r4, #5
   14e68:	stmia	ip!, {r0, r1, r2, r3}
   14e6c:	add	r7, sp, #12
   14e70:	ldm	lr!, {r0, r1, r2, r3}
   14e74:	and	r4, r4, #31
   14e78:	ldr	r5, [pc, #88]	; 14ed8 <__assert_fail@plt+0x3a48>
   14e7c:	stmia	ip!, {r0, r1, r2, r3}
   14e80:	ldm	lr, {r0, r1, r2, r3}
   14e84:	stm	ip, {r0, r1, r2, r3}
   14e88:	mov	r2, r9
   14e8c:	ldr	r3, [r7, r6, lsl #2]
   14e90:	ldr	ip, [r5]
   14e94:	mov	r1, r8
   14e98:	mvn	r0, r3, lsr r4
   14e9c:	and	r0, r0, #1
   14ea0:	str	ip, [sp, #52]	; 0x34
   14ea4:	eor	r4, r3, r0, lsl r4
   14ea8:	add	r3, sp, #4
   14eac:	mov	r0, #0
   14eb0:	str	r4, [r7, r6, lsl #2]
   14eb4:	bl	148a0 <__assert_fail@plt+0x3410>
   14eb8:	ldr	r2, [sp, #52]	; 0x34
   14ebc:	ldr	r3, [r5]
   14ec0:	cmp	r2, r3
   14ec4:	bne	14ed0 <__assert_fail@plt+0x3a40>
   14ec8:	add	sp, sp, #60	; 0x3c
   14ecc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ed0:	bl	11208 <__stack_chk_fail@plt>
   14ed4:	andeq	ip, r2, ip, asr #5
   14ed8:	andeq	fp, r2, r8, lsl #30
   14edc:	mov	r2, r1
   14ee0:	mvn	r1, #0
   14ee4:	b	14e44 <__assert_fail@plt+0x39b4>
   14ee8:	mov	r2, #58	; 0x3a
   14eec:	mvn	r1, #0
   14ef0:	b	14e44 <__assert_fail@plt+0x39b4>
   14ef4:	mov	r2, #58	; 0x3a
   14ef8:	b	14e44 <__assert_fail@plt+0x39b4>
   14efc:	push	{r4, r5, r6, r7, r8, lr}
   14f00:	sub	sp, sp, #104	; 0x68
   14f04:	ldr	r5, [pc, #120]	; 14f84 <__assert_fail@plt+0x3af4>
   14f08:	mov	r6, r0
   14f0c:	mov	r0, sp
   14f10:	ldr	r3, [r5]
   14f14:	mov	r7, r2
   14f18:	str	r3, [sp, #100]	; 0x64
   14f1c:	bl	12f18 <__assert_fail@plt+0x1a88>
   14f20:	mov	ip, sp
   14f24:	add	lr, sp, #52	; 0x34
   14f28:	ldm	ip!, {r0, r1, r2, r3}
   14f2c:	stmia	lr!, {r0, r1, r2, r3}
   14f30:	ldm	ip!, {r0, r1, r2, r3}
   14f34:	ldr	r8, [sp, #64]	; 0x40
   14f38:	stmia	lr!, {r0, r1, r2, r3}
   14f3c:	mvn	r4, r8
   14f40:	ldm	ip, {r0, r1, r2, r3}
   14f44:	and	ip, r4, #67108864	; 0x4000000
   14f48:	eor	ip, ip, r8
   14f4c:	str	ip, [sp, #64]	; 0x40
   14f50:	stm	lr, {r0, r1, r2, r3}
   14f54:	add	r3, sp, #52	; 0x34
   14f58:	mvn	r2, #0
   14f5c:	mov	r1, r7
   14f60:	mov	r0, r6
   14f64:	bl	148a0 <__assert_fail@plt+0x3410>
   14f68:	ldr	r2, [sp, #100]	; 0x64
   14f6c:	ldr	r3, [r5]
   14f70:	cmp	r2, r3
   14f74:	bne	14f80 <__assert_fail@plt+0x3af0>
   14f78:	add	sp, sp, #104	; 0x68
   14f7c:	pop	{r4, r5, r6, r7, r8, pc}
   14f80:	bl	11208 <__stack_chk_fail@plt>
   14f84:	andeq	fp, r2, r8, lsl #30
   14f88:	push	{r4, r5, r6, r7, r8, r9, lr}
   14f8c:	mov	r6, r1
   14f90:	ldr	lr, [pc, #132]	; 1501c <__assert_fail@plt+0x3b8c>
   14f94:	mov	r5, r2
   14f98:	mov	r8, r0
   14f9c:	mov	r9, r3
   14fa0:	ldm	lr!, {r0, r1, r2, r3}
   14fa4:	sub	sp, sp, #60	; 0x3c
   14fa8:	add	ip, sp, #4
   14fac:	ldr	r4, [pc, #108]	; 15020 <__assert_fail@plt+0x3b90>
   14fb0:	stmia	ip!, {r0, r1, r2, r3}
   14fb4:	mov	r7, #10
   14fb8:	ldm	lr!, {r0, r1, r2, r3}
   14fbc:	cmp	r5, #0
   14fc0:	cmpne	r6, #0
   14fc4:	str	r7, [sp, #4]
   14fc8:	stmia	ip!, {r0, r1, r2, r3}
   14fcc:	ldm	lr, {r0, r1, r2, r3}
   14fd0:	ldr	lr, [r4]
   14fd4:	stm	ip, {r0, r1, r2, r3}
   14fd8:	str	lr, [sp, #52]	; 0x34
   14fdc:	beq	15018 <__assert_fail@plt+0x3b88>
   14fe0:	add	r3, sp, #4
   14fe4:	ldr	r2, [sp, #88]	; 0x58
   14fe8:	mov	r1, r9
   14fec:	mov	r0, r8
   14ff0:	str	r6, [sp, #44]	; 0x2c
   14ff4:	str	r5, [sp, #48]	; 0x30
   14ff8:	bl	148a0 <__assert_fail@plt+0x3410>
   14ffc:	ldr	r2, [sp, #52]	; 0x34
   15000:	ldr	r3, [r4]
   15004:	cmp	r2, r3
   15008:	bne	15014 <__assert_fail@plt+0x3b84>
   1500c:	add	sp, sp, #60	; 0x3c
   15010:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15014:	bl	11208 <__stack_chk_fail@plt>
   15018:	bl	11448 <abort@plt>
   1501c:	andeq	ip, r2, ip, asr #5
   15020:	andeq	fp, r2, r8, lsl #30
   15024:	push	{lr}		; (str lr, [sp, #-4]!)
   15028:	sub	sp, sp, #12
   1502c:	mvn	ip, #0
   15030:	str	ip, [sp]
   15034:	bl	14f88 <__assert_fail@plt+0x3af8>
   15038:	add	sp, sp, #12
   1503c:	pop	{pc}		; (ldr pc, [sp], #4)
   15040:	push	{lr}		; (str lr, [sp, #-4]!)
   15044:	sub	sp, sp, #12
   15048:	mvn	ip, #0
   1504c:	mov	r3, r2
   15050:	str	ip, [sp]
   15054:	mov	r2, r1
   15058:	mov	r1, r0
   1505c:	mov	r0, #0
   15060:	bl	14f88 <__assert_fail@plt+0x3af8>
   15064:	add	sp, sp, #12
   15068:	pop	{pc}		; (ldr pc, [sp], #4)
   1506c:	push	{lr}		; (str lr, [sp, #-4]!)
   15070:	sub	sp, sp, #12
   15074:	str	r3, [sp]
   15078:	mov	r3, r2
   1507c:	mov	r2, r1
   15080:	mov	r1, r0
   15084:	mov	r0, #0
   15088:	bl	14f88 <__assert_fail@plt+0x3af8>
   1508c:	add	sp, sp, #12
   15090:	pop	{pc}		; (ldr pc, [sp], #4)
   15094:	ldr	r3, [pc]	; 1509c <__assert_fail@plt+0x3c0c>
   15098:	b	148a0 <__assert_fail@plt+0x3410>
   1509c:	andeq	ip, r2, r4, asr r1
   150a0:	mov	r2, r1
   150a4:	ldr	r3, [pc, #8]	; 150b4 <__assert_fail@plt+0x3c24>
   150a8:	mov	r1, r0
   150ac:	mov	r0, #0
   150b0:	b	148a0 <__assert_fail@plt+0x3410>
   150b4:	andeq	ip, r2, r4, asr r1
   150b8:	ldr	r3, [pc, #4]	; 150c4 <__assert_fail@plt+0x3c34>
   150bc:	mvn	r2, #0
   150c0:	b	148a0 <__assert_fail@plt+0x3410>
   150c4:	andeq	ip, r2, r4, asr r1
   150c8:	mov	r1, r0
   150cc:	ldr	r3, [pc, #8]	; 150dc <__assert_fail@plt+0x3c4c>
   150d0:	mvn	r2, #0
   150d4:	mov	r0, #0
   150d8:	b	148a0 <__assert_fail@plt+0x3410>
   150dc:	andeq	ip, r2, r4, asr r1
   150e0:	push	{r4, r5, lr}
   150e4:	sub	sp, sp, #116	; 0x74
   150e8:	ldr	r5, [pc, #80]	; 15140 <__assert_fail@plt+0x3cb0>
   150ec:	mov	r4, r0
   150f0:	mov	r2, sp
   150f4:	ldr	r3, [r5]
   150f8:	ldr	r1, [pc, #68]	; 15144 <__assert_fail@plt+0x3cb4>
   150fc:	mov	r0, #3
   15100:	str	r3, [sp, #108]	; 0x6c
   15104:	bl	11460 <__lxstat64@plt>
   15108:	cmp	r0, #0
   1510c:	movne	r0, #0
   15110:	ldrdeq	r2, [sp]
   15114:	ldrdeq	r0, [sp, #96]	; 0x60
   15118:	strdeq	r2, [r4, #8]
   1511c:	ldr	r2, [sp, #108]	; 0x6c
   15120:	ldr	r3, [r5]
   15124:	strdeq	r0, [r4]
   15128:	moveq	r0, r4
   1512c:	cmp	r2, r3
   15130:	bne	1513c <__assert_fail@plt+0x3cac>
   15134:	add	sp, sp, #116	; 0x74
   15138:	pop	{r4, r5, pc}
   1513c:	bl	11208 <__stack_chk_fail@plt>
   15140:	andeq	fp, r2, r8, lsl #30
   15144:	andeq	sl, r1, ip, lsl pc
   15148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1514c:	sub	sp, sp, #52	; 0x34
   15150:	ldr	r8, [pc, #732]	; 15434 <__assert_fail@plt+0x3fa4>
   15154:	ldrd	r6, [sp, #88]	; 0x58
   15158:	mov	r9, r2
   1515c:	ldr	r2, [r8]
   15160:	subs	sl, r3, #0
   15164:	str	r2, [sp, #44]	; 0x2c
   15168:	ldr	r2, [r9]
   1516c:	ldrne	fp, [sl]
   15170:	mvneq	fp, #0
   15174:	cmp	r6, #0
   15178:	str	r2, [sp, #8]
   1517c:	movne	r2, #0
   15180:	strne	r2, [r6]
   15184:	cmp	r7, #0
   15188:	movne	r2, #0
   1518c:	strne	r2, [r7]
   15190:	cmp	r1, #0
   15194:	mov	r3, r1
   15198:	beq	152fc <__assert_fail@plt+0x3e6c>
   1519c:	subs	r4, r1, r0
   151a0:	bne	151c8 <__assert_fail@plt+0x3d38>
   151a4:	ldrb	r2, [r1, #1]
   151a8:	cmp	r2, #0
   151ac:	addne	r4, r1, #1
   151b0:	beq	1534c <__assert_fail@plt+0x3ebc>
   151b4:	cmp	r4, #0
   151b8:	moveq	r3, r4
   151bc:	beq	1530c <__assert_fail@plt+0x3e7c>
   151c0:	mov	r5, #0
   151c4:	b	1524c <__assert_fail@plt+0x3dbc>
   151c8:	str	r1, [sp, #12]
   151cc:	add	r1, r4, #1
   151d0:	bl	15c70 <__assert_fail@plt+0x47e0>
   151d4:	ldr	r3, [sp, #12]
   151d8:	mov	r2, #0
   151dc:	strb	r2, [r0, r4]
   151e0:	ldrb	r2, [r3, #1]
   151e4:	mov	r5, r0
   151e8:	cmp	r2, #0
   151ec:	beq	15294 <__assert_fail@plt+0x3e04>
   151f0:	cmp	r0, #0
   151f4:	add	r4, r3, #1
   151f8:	beq	151b4 <__assert_fail@plt+0x3d24>
   151fc:	clz	r1, r4
   15200:	lsr	r1, r1, #5
   15204:	ldrb	r2, [r5]
   15208:	cmp	r3, #0
   1520c:	moveq	r1, #0
   15210:	cmp	r2, #43	; 0x2b
   15214:	beq	152b0 <__assert_fail@plt+0x3e20>
   15218:	mov	r0, r5
   1521c:	str	r1, [sp, #8]
   15220:	bl	1116c <getpwnam@plt>
   15224:	ldr	r1, [sp, #8]
   15228:	cmp	r0, #0
   1522c:	beq	152b0 <__assert_fail@plt+0x3e20>
   15230:	ldr	r3, [r0, #8]
   15234:	cmp	r1, #0
   15238:	str	r3, [sp, #8]
   1523c:	bne	15354 <__assert_fail@plt+0x3ec4>
   15240:	bl	113b8 <endpwent@plt>
   15244:	cmp	r4, #0
   15248:	beq	1527c <__assert_fail@plt+0x3dec>
   1524c:	ldrb	r3, [r4]
   15250:	cmp	r3, #43	; 0x2b
   15254:	beq	15388 <__assert_fail@plt+0x3ef8>
   15258:	mov	r0, r4
   1525c:	bl	11484 <getgrnam@plt>
   15260:	cmp	r0, #0
   15264:	ldrne	fp, [r0, #8]
   15268:	beq	15388 <__assert_fail@plt+0x3ef8>
   1526c:	bl	11148 <endgrent@plt>
   15270:	mov	r0, r4
   15274:	bl	15c94 <__assert_fail@plt+0x4804>
   15278:	mov	r4, r0
   1527c:	mov	r3, r5
   15280:	b	1530c <__assert_fail@plt+0x3e7c>
   15284:	str	r1, [sp, #12]
   15288:	bl	15c94 <__assert_fail@plt+0x4804>
   1528c:	ldr	r3, [sp, #12]
   15290:	mov	r5, r0
   15294:	cmp	r5, #0
   15298:	moveq	r3, r5
   1529c:	moveq	r4, r3
   152a0:	beq	1530c <__assert_fail@plt+0x3e7c>
   152a4:	mov	r1, #1
   152a8:	mov	r4, #0
   152ac:	b	15204 <__assert_fail@plt+0x3d74>
   152b0:	cmp	r1, #0
   152b4:	beq	153d0 <__assert_fail@plt+0x3f40>
   152b8:	bl	113b8 <endpwent@plt>
   152bc:	ldr	r6, [pc, #372]	; 15438 <__assert_fail@plt+0x3fa8>
   152c0:	mov	r4, #0
   152c4:	mov	r0, r5
   152c8:	bl	111a8 <free@plt>
   152cc:	mov	r0, r4
   152d0:	bl	111a8 <free@plt>
   152d4:	mov	r1, r6
   152d8:	mov	r2, #5
   152dc:	mov	r0, #0
   152e0:	bl	111fc <dcgettext@plt>
   152e4:	ldr	r2, [sp, #44]	; 0x2c
   152e8:	ldr	r3, [r8]
   152ec:	cmp	r2, r3
   152f0:	bne	15430 <__assert_fail@plt+0x3fa0>
   152f4:	add	sp, sp, #52	; 0x34
   152f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152fc:	ldrb	r2, [r0]
   15300:	cmp	r2, #0
   15304:	bne	15284 <__assert_fail@plt+0x3df4>
   15308:	mov	r4, r3
   1530c:	ldr	r2, [sp, #8]
   15310:	cmp	sl, #0
   15314:	str	r2, [r9]
   15318:	strne	fp, [sl]
   1531c:	cmp	r6, #0
   15320:	strne	r3, [r6]
   15324:	movne	r3, #0
   15328:	cmp	r7, #0
   1532c:	strne	r4, [r7]
   15330:	movne	r4, #0
   15334:	mov	r0, r3
   15338:	bl	111a8 <free@plt>
   1533c:	mov	r0, r4
   15340:	bl	111a8 <free@plt>
   15344:	mov	r0, #0
   15348:	b	152e4 <__assert_fail@plt+0x3e54>
   1534c:	mov	r3, r2
   15350:	b	15308 <__assert_fail@plt+0x3e78>
   15354:	ldr	fp, [r0, #12]
   15358:	mov	r0, fp
   1535c:	bl	11478 <getgrgid@plt>
   15360:	subs	r1, r0, #0
   15364:	beq	15420 <__assert_fail@plt+0x3f90>
   15368:	ldr	r0, [r1]
   1536c:	bl	15c94 <__assert_fail@plt+0x4804>
   15370:	str	r5, [sp, #12]
   15374:	mov	r4, r0
   15378:	bl	11148 <endgrent@plt>
   1537c:	bl	113b8 <endpwent@plt>
   15380:	ldr	r3, [sp, #12]
   15384:	b	1530c <__assert_fail@plt+0x3e7c>
   15388:	ldr	r2, [pc, #172]	; 1543c <__assert_fail@plt+0x3fac>
   1538c:	add	r3, sp, #16
   15390:	str	r2, [sp]
   15394:	mov	r1, #0
   15398:	mov	r2, #10
   1539c:	mov	r0, r4
   153a0:	bl	15d70 <__assert_fail@plt+0x48e0>
   153a4:	cmp	r0, #0
   153a8:	bne	153b8 <__assert_fail@plt+0x3f28>
   153ac:	ldr	fp, [sp, #16]
   153b0:	cmn	fp, #1
   153b4:	bne	1526c <__assert_fail@plt+0x3ddc>
   153b8:	bl	11148 <endgrent@plt>
   153bc:	mov	r0, r4
   153c0:	bl	15c94 <__assert_fail@plt+0x4804>
   153c4:	ldr	r6, [pc, #116]	; 15440 <__assert_fail@plt+0x3fb0>
   153c8:	mov	r4, r0
   153cc:	b	152c4 <__assert_fail@plt+0x3e34>
   153d0:	ldr	r3, [pc, #100]	; 1543c <__assert_fail@plt+0x3fac>
   153d4:	mov	r2, #10
   153d8:	str	r3, [sp]
   153dc:	mov	r0, r5
   153e0:	add	r3, sp, #16
   153e4:	bl	15d70 <__assert_fail@plt+0x48e0>
   153e8:	cmp	r0, #0
   153ec:	bne	15410 <__assert_fail@plt+0x3f80>
   153f0:	ldr	r3, [sp, #16]
   153f4:	cmn	r3, #1
   153f8:	str	r3, [sp, #8]
   153fc:	beq	15410 <__assert_fail@plt+0x3f80>
   15400:	bl	113b8 <endpwent@plt>
   15404:	cmp	r4, #0
   15408:	beq	1527c <__assert_fail@plt+0x3dec>
   1540c:	b	1524c <__assert_fail@plt+0x3dbc>
   15410:	bl	113b8 <endpwent@plt>
   15414:	ldr	r6, [pc, #40]	; 15444 <__assert_fail@plt+0x3fb4>
   15418:	mov	r4, #0
   1541c:	b	152c4 <__assert_fail@plt+0x3e34>
   15420:	add	r2, sp, #20
   15424:	mov	r0, fp
   15428:	bl	12e00 <__assert_fail@plt+0x1970>
   1542c:	b	1536c <__assert_fail@plt+0x3edc>
   15430:	bl	11208 <__stack_chk_fail@plt>
   15434:	andeq	fp, r2, r8, lsl #30
   15438:	andeq	fp, r1, ip, lsl r5
   1543c:	andeq	sl, r1, r4, ror fp
   15440:	andeq	fp, r1, ip, lsl #10
   15444:	andeq	fp, r1, ip, lsr #10
   15448:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1544c:	sub	sp, sp, #8
   15450:	subs	r6, r2, #0
   15454:	mov	r7, r1
   15458:	mov	r8, r3
   1545c:	ldr	r9, [sp, #40]	; 0x28
   15460:	beq	154dc <__assert_fail@plt+0x404c>
   15464:	mov	r1, #58	; 0x3a
   15468:	mov	r5, r0
   1546c:	bl	1131c <strchr@plt>
   15470:	strd	r8, [sp]
   15474:	mov	r3, r6
   15478:	mov	r2, r7
   1547c:	mov	sl, r0
   15480:	mov	r1, r0
   15484:	mov	r0, r5
   15488:	bl	15148 <__assert_fail@plt+0x3cb8>
   1548c:	cmp	sl, #0
   15490:	mov	r4, r0
   15494:	bne	154d0 <__assert_fail@plt+0x4040>
   15498:	cmp	r0, #0
   1549c:	beq	15500 <__assert_fail@plt+0x4070>
   154a0:	mov	r1, #46	; 0x2e
   154a4:	mov	r0, r5
   154a8:	bl	1131c <strchr@plt>
   154ac:	subs	r1, r0, #0
   154b0:	beq	154d0 <__assert_fail@plt+0x4040>
   154b4:	strd	r8, [sp]
   154b8:	mov	r3, r6
   154bc:	mov	r2, r7
   154c0:	mov	r0, r5
   154c4:	bl	15148 <__assert_fail@plt+0x3cb8>
   154c8:	cmp	r0, #0
   154cc:	beq	15500 <__assert_fail@plt+0x4070>
   154d0:	mov	r0, r4
   154d4:	add	sp, sp, #8
   154d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154dc:	mov	r2, r1
   154e0:	strd	r8, [sp]
   154e4:	mov	r3, r6
   154e8:	mov	r1, r6
   154ec:	bl	15148 <__assert_fail@plt+0x3cb8>
   154f0:	mov	r4, r0
   154f4:	mov	r0, r4
   154f8:	add	sp, sp, #8
   154fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15500:	mov	r4, #0
   15504:	mov	r0, r4
   15508:	add	sp, sp, #8
   1550c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15510:	push	{r4, r5, r6, lr}
   15514:	sub	sp, sp, #32
   15518:	cmp	r1, #0
   1551c:	mov	r5, r0
   15520:	ldr	r4, [sp, #48]	; 0x30
   15524:	ldr	r6, [sp, #52]	; 0x34
   15528:	beq	155b8 <__assert_fail@plt+0x4128>
   1552c:	strd	r2, [sp]
   15530:	mov	r3, r1
   15534:	ldr	r2, [pc, #828]	; 15878 <__assert_fail@plt+0x43e8>
   15538:	mov	r1, #1
   1553c:	bl	1137c <__fprintf_chk@plt>
   15540:	mov	r2, #5
   15544:	ldr	r1, [pc, #816]	; 1587c <__assert_fail@plt+0x43ec>
   15548:	mov	r0, #0
   1554c:	bl	111fc <dcgettext@plt>
   15550:	ldr	r3, [pc, #808]	; 15880 <__assert_fail@plt+0x43f0>
   15554:	ldr	r2, [pc, #808]	; 15884 <__assert_fail@plt+0x43f4>
   15558:	str	r3, [sp]
   1555c:	mov	r1, #1
   15560:	mov	r3, r0
   15564:	mov	r0, r5
   15568:	bl	1137c <__fprintf_chk@plt>
   1556c:	ldr	r1, [pc, #788]	; 15888 <__assert_fail@plt+0x43f8>
   15570:	mov	r2, #5
   15574:	mov	r0, #0
   15578:	bl	111fc <dcgettext@plt>
   1557c:	mov	r1, r5
   15580:	bl	11154 <fputs_unlocked@plt>
   15584:	cmp	r6, #9
   15588:	ldrls	pc, [pc, r6, lsl #2]
   1558c:	b	15868 <__assert_fail@plt+0x43d8>
   15590:	andeq	r5, r1, r4, ror r8
   15594:	andeq	r5, r1, ip, lsr r6
   15598:	andeq	r5, r1, r8, ror #12
   1559c:	muleq	r1, ip, r6
   155a0:	ldrdeq	r5, [r1], -r8
   155a4:	andeq	r5, r1, r8, lsl r7
   155a8:	andeq	r5, r1, r0, ror #14
   155ac:			; <UNDEFINED> instruction: 0x000157b0
   155b0:	andeq	r5, r1, r8, lsl #16
   155b4:	ldrdeq	r5, [r1], -r0
   155b8:	str	r3, [sp]
   155bc:	mov	r1, #1
   155c0:	mov	r3, r2
   155c4:	ldr	r2, [pc, #704]	; 1588c <__assert_fail@plt+0x43fc>
   155c8:	bl	1137c <__fprintf_chk@plt>
   155cc:	b	15540 <__assert_fail@plt+0x40b0>
   155d0:	ldr	r1, [pc, #696]	; 15890 <__assert_fail@plt+0x4400>
   155d4:	mov	r2, #5
   155d8:	mov	r0, #0
   155dc:	bl	111fc <dcgettext@plt>
   155e0:	ldr	r2, [r4, #32]
   155e4:	ldr	r3, [r4, #28]
   155e8:	ldr	r1, [r4, #24]
   155ec:	str	r2, [sp, #28]
   155f0:	ldr	r2, [r4, #20]
   155f4:	str	r3, [sp, #24]
   155f8:	ldr	r3, [r4, #16]
   155fc:	str	r1, [sp, #20]
   15600:	ldr	r1, [r4, #12]
   15604:	str	r2, [sp, #16]
   15608:	ldr	r2, [r4, #8]
   1560c:	str	r3, [sp, #12]
   15610:	ldr	r3, [r4, #4]
   15614:	str	r1, [sp, #8]
   15618:	str	r2, [sp, #4]
   1561c:	str	r3, [sp]
   15620:	mov	r1, #1
   15624:	ldr	r3, [r4]
   15628:	mov	r2, r0
   1562c:	mov	r0, r5
   15630:	bl	1137c <__fprintf_chk@plt>
   15634:	add	sp, sp, #32
   15638:	pop	{r4, r5, r6, pc}
   1563c:	mov	r2, #5
   15640:	ldr	r1, [pc, #588]	; 15894 <__assert_fail@plt+0x4404>
   15644:	mov	r0, #0
   15648:	bl	111fc <dcgettext@plt>
   1564c:	ldr	r3, [r4]
   15650:	mov	r1, #1
   15654:	mov	r2, r0
   15658:	mov	r0, r5
   1565c:	add	sp, sp, #32
   15660:	pop	{r4, r5, r6, lr}
   15664:	b	1137c <__fprintf_chk@plt>
   15668:	mov	r2, #5
   1566c:	ldr	r1, [pc, #548]	; 15898 <__assert_fail@plt+0x4408>
   15670:	mov	r0, #0
   15674:	bl	111fc <dcgettext@plt>
   15678:	ldr	r2, [r4, #4]
   1567c:	ldr	r3, [r4]
   15680:	mov	r1, #1
   15684:	str	r2, [sp, #48]	; 0x30
   15688:	mov	r2, r0
   1568c:	mov	r0, r5
   15690:	add	sp, sp, #32
   15694:	pop	{r4, r5, r6, lr}
   15698:	b	1137c <__fprintf_chk@plt>
   1569c:	mov	r2, #5
   156a0:	ldr	r1, [pc, #500]	; 1589c <__assert_fail@plt+0x440c>
   156a4:	mov	r0, #0
   156a8:	bl	111fc <dcgettext@plt>
   156ac:	ldr	r2, [r4, #8]
   156b0:	ldr	r3, [r4, #4]
   156b4:	mov	r1, #1
   156b8:	str	r2, [sp, #52]	; 0x34
   156bc:	str	r3, [sp, #48]	; 0x30
   156c0:	ldr	r3, [r4]
   156c4:	mov	r2, r0
   156c8:	mov	r0, r5
   156cc:	add	sp, sp, #32
   156d0:	pop	{r4, r5, r6, lr}
   156d4:	b	1137c <__fprintf_chk@plt>
   156d8:	mov	r2, #5
   156dc:	ldr	r1, [pc, #444]	; 158a0 <__assert_fail@plt+0x4410>
   156e0:	mov	r0, #0
   156e4:	bl	111fc <dcgettext@plt>
   156e8:	ldr	r1, [r4, #12]
   156ec:	ldr	r2, [r4, #8]
   156f0:	ldr	r3, [r4, #4]
   156f4:	str	r1, [sp, #8]
   156f8:	str	r2, [sp, #4]
   156fc:	str	r3, [sp]
   15700:	mov	r1, #1
   15704:	ldr	r3, [r4]
   15708:	mov	r2, r0
   1570c:	mov	r0, r5
   15710:	bl	1137c <__fprintf_chk@plt>
   15714:	b	15634 <__assert_fail@plt+0x41a4>
   15718:	mov	r2, #5
   1571c:	ldr	r1, [pc, #384]	; 158a4 <__assert_fail@plt+0x4414>
   15720:	mov	r0, #0
   15724:	bl	111fc <dcgettext@plt>
   15728:	ldr	r3, [r4, #16]
   1572c:	ldr	r1, [r4, #12]
   15730:	ldr	r2, [r4, #8]
   15734:	str	r3, [sp, #12]
   15738:	ldr	r3, [r4, #4]
   1573c:	str	r1, [sp, #8]
   15740:	str	r2, [sp, #4]
   15744:	str	r3, [sp]
   15748:	mov	r1, #1
   1574c:	ldr	r3, [r4]
   15750:	mov	r2, r0
   15754:	mov	r0, r5
   15758:	bl	1137c <__fprintf_chk@plt>
   1575c:	b	15634 <__assert_fail@plt+0x41a4>
   15760:	mov	r2, #5
   15764:	ldr	r1, [pc, #316]	; 158a8 <__assert_fail@plt+0x4418>
   15768:	mov	r0, #0
   1576c:	bl	111fc <dcgettext@plt>
   15770:	ldr	r2, [r4, #20]
   15774:	ldr	r3, [r4, #16]
   15778:	ldr	r1, [r4, #12]
   1577c:	str	r2, [sp, #16]
   15780:	ldr	r2, [r4, #8]
   15784:	str	r3, [sp, #12]
   15788:	ldr	r3, [r4, #4]
   1578c:	str	r1, [sp, #8]
   15790:	str	r2, [sp, #4]
   15794:	str	r3, [sp]
   15798:	mov	r1, #1
   1579c:	ldr	r3, [r4]
   157a0:	mov	r2, r0
   157a4:	mov	r0, r5
   157a8:	bl	1137c <__fprintf_chk@plt>
   157ac:	b	15634 <__assert_fail@plt+0x41a4>
   157b0:	mov	r2, #5
   157b4:	ldr	r1, [pc, #240]	; 158ac <__assert_fail@plt+0x441c>
   157b8:	mov	r0, #0
   157bc:	bl	111fc <dcgettext@plt>
   157c0:	ldr	r1, [r4, #24]
   157c4:	ldr	r2, [r4, #20]
   157c8:	ldr	r3, [r4, #16]
   157cc:	str	r1, [sp, #20]
   157d0:	ldr	r1, [r4, #12]
   157d4:	str	r2, [sp, #16]
   157d8:	ldr	r2, [r4, #8]
   157dc:	str	r3, [sp, #12]
   157e0:	ldr	r3, [r4, #4]
   157e4:	str	r1, [sp, #8]
   157e8:	str	r2, [sp, #4]
   157ec:	str	r3, [sp]
   157f0:	mov	r1, #1
   157f4:	ldr	r3, [r4]
   157f8:	mov	r2, r0
   157fc:	mov	r0, r5
   15800:	bl	1137c <__fprintf_chk@plt>
   15804:	b	15634 <__assert_fail@plt+0x41a4>
   15808:	mov	r2, #5
   1580c:	ldr	r1, [pc, #156]	; 158b0 <__assert_fail@plt+0x4420>
   15810:	mov	r0, #0
   15814:	bl	111fc <dcgettext@plt>
   15818:	ldr	r3, [r4, #28]
   1581c:	ldr	r1, [r4, #24]
   15820:	ldr	r2, [r4, #20]
   15824:	str	r3, [sp, #24]
   15828:	ldr	r3, [r4, #16]
   1582c:	str	r1, [sp, #20]
   15830:	ldr	r1, [r4, #12]
   15834:	str	r2, [sp, #16]
   15838:	ldr	r2, [r4, #8]
   1583c:	str	r3, [sp, #12]
   15840:	ldr	r3, [r4, #4]
   15844:	str	r1, [sp, #8]
   15848:	str	r2, [sp, #4]
   1584c:	str	r3, [sp]
   15850:	mov	r1, #1
   15854:	ldr	r3, [r4]
   15858:	mov	r2, r0
   1585c:	mov	r0, r5
   15860:	bl	1137c <__fprintf_chk@plt>
   15864:	b	15634 <__assert_fail@plt+0x41a4>
   15868:	mov	r2, #5
   1586c:	ldr	r1, [pc, #64]	; 158b4 <__assert_fail@plt+0x4424>
   15870:	b	155d8 <__assert_fail@plt+0x4148>
   15874:	bl	11448 <abort@plt>
   15878:	andeq	fp, r1, ip, lsr r5
   1587c:	andeq	fp, r1, r0, asr r5
   15880:	andeq	r0, r0, r2, ror #15
   15884:	andeq	fp, r1, r4, lsr #16
   15888:	andeq	fp, r1, r4, asr r5
   1588c:	andeq	fp, r1, r8, asr #10
   15890:	andeq	fp, r1, ip, lsr #14
   15894:	andeq	fp, r1, r0, lsr #12
   15898:	andeq	fp, r1, r0, lsr r6
   1589c:	andeq	fp, r1, r8, asr #12
   158a0:	andeq	fp, r1, r4, ror #12
   158a4:	andeq	fp, r1, r4, lsl #13
   158a8:	andeq	fp, r1, r8, lsr #13
   158ac:	ldrdeq	fp, [r1], -r0
   158b0:	strdeq	fp, [r1], -ip
   158b4:	andeq	fp, r1, r0, ror #14
   158b8:	push	{r4, r5, lr}
   158bc:	sub	sp, sp, #12
   158c0:	ldr	r5, [sp, #24]
   158c4:	ldr	ip, [r5]
   158c8:	cmp	ip, #0
   158cc:	beq	158e8 <__assert_fail@plt+0x4458>
   158d0:	mov	lr, r5
   158d4:	mov	ip, #0
   158d8:	ldr	r4, [lr, #4]!
   158dc:	add	ip, ip, #1
   158e0:	cmp	r4, #0
   158e4:	bne	158d8 <__assert_fail@plt+0x4448>
   158e8:	stm	sp, {r5, ip}
   158ec:	bl	15510 <__assert_fail@plt+0x4080>
   158f0:	add	sp, sp, #12
   158f4:	pop	{r4, r5, pc}
   158f8:	push	{r4, r5, r6, lr}
   158fc:	sub	sp, sp, #56	; 0x38
   15900:	ldr	r6, [pc, #88]	; 15960 <__assert_fail@plt+0x44d0>
   15904:	ldr	r5, [sp, #72]	; 0x48
   15908:	add	r4, sp, #8
   1590c:	ldr	ip, [r6]
   15910:	str	ip, [sp, #52]	; 0x34
   15914:	mov	ip, #0
   15918:	ldr	lr, [r5], #4
   1591c:	cmp	lr, #0
   15920:	str	lr, [r4, #4]!
   15924:	beq	15934 <__assert_fail@plt+0x44a4>
   15928:	add	ip, ip, #1
   1592c:	cmp	ip, #10
   15930:	bne	15918 <__assert_fail@plt+0x4488>
   15934:	add	lr, sp, #12
   15938:	str	ip, [sp, #4]
   1593c:	str	lr, [sp]
   15940:	bl	15510 <__assert_fail@plt+0x4080>
   15944:	ldr	r2, [sp, #52]	; 0x34
   15948:	ldr	r3, [r6]
   1594c:	cmp	r2, r3
   15950:	bne	1595c <__assert_fail@plt+0x44cc>
   15954:	add	sp, sp, #56	; 0x38
   15958:	pop	{r4, r5, r6, pc}
   1595c:	bl	11208 <__stack_chk_fail@plt>
   15960:	andeq	fp, r2, r8, lsl #30
   15964:	push	{r3}		; (str r3, [sp, #-4]!)
   15968:	mov	ip, #0
   1596c:	push	{r4, r5, r6, lr}
   15970:	sub	sp, sp, #60	; 0x3c
   15974:	ldr	r6, [pc, #100]	; 159e0 <__assert_fail@plt+0x4550>
   15978:	add	r5, sp, #8
   1597c:	add	r4, sp, #80	; 0x50
   15980:	ldr	r3, [r6]
   15984:	str	r4, [sp, #8]
   15988:	str	r3, [sp, #52]	; 0x34
   1598c:	ldr	r3, [sp, #76]	; 0x4c
   15990:	ldr	lr, [r4], #4
   15994:	cmp	lr, #0
   15998:	str	lr, [r5, #4]!
   1599c:	beq	159ac <__assert_fail@plt+0x451c>
   159a0:	add	ip, ip, #1
   159a4:	cmp	ip, #10
   159a8:	bne	15990 <__assert_fail@plt+0x4500>
   159ac:	add	lr, sp, #12
   159b0:	str	ip, [sp, #4]
   159b4:	str	lr, [sp]
   159b8:	bl	15510 <__assert_fail@plt+0x4080>
   159bc:	ldr	r2, [sp, #52]	; 0x34
   159c0:	ldr	r3, [r6]
   159c4:	cmp	r2, r3
   159c8:	bne	159dc <__assert_fail@plt+0x454c>
   159cc:	add	sp, sp, #60	; 0x3c
   159d0:	pop	{r4, r5, r6, lr}
   159d4:	add	sp, sp, #4
   159d8:	bx	lr
   159dc:	bl	11208 <__stack_chk_fail@plt>
   159e0:	andeq	fp, r2, r8, lsl #30
   159e4:	push	{r4, lr}
   159e8:	mov	r2, #5
   159ec:	ldr	r1, [pc, #88]	; 15a4c <__assert_fail@plt+0x45bc>
   159f0:	mov	r0, #0
   159f4:	bl	111fc <dcgettext@plt>
   159f8:	ldr	r2, [pc, #80]	; 15a50 <__assert_fail@plt+0x45c0>
   159fc:	mov	r1, r0
   15a00:	mov	r0, #1
   15a04:	bl	11364 <__printf_chk@plt>
   15a08:	mov	r2, #5
   15a0c:	ldr	r1, [pc, #64]	; 15a54 <__assert_fail@plt+0x45c4>
   15a10:	mov	r0, #0
   15a14:	bl	111fc <dcgettext@plt>
   15a18:	ldr	r3, [pc, #56]	; 15a58 <__assert_fail@plt+0x45c8>
   15a1c:	ldr	r2, [pc, #56]	; 15a5c <__assert_fail@plt+0x45cc>
   15a20:	mov	r1, r0
   15a24:	mov	r0, #1
   15a28:	bl	11364 <__printf_chk@plt>
   15a2c:	ldr	r1, [pc, #44]	; 15a60 <__assert_fail@plt+0x45d0>
   15a30:	mov	r2, #5
   15a34:	mov	r0, #0
   15a38:	bl	111fc <dcgettext@plt>
   15a3c:	ldr	r3, [pc, #32]	; 15a64 <__assert_fail@plt+0x45d4>
   15a40:	pop	{r4, lr}
   15a44:	ldr	r1, [r3]
   15a48:	b	11154 <fputs_unlocked@plt>
   15a4c:	muleq	r1, ip, r7
   15a50:			; <UNDEFINED> instruction: 0x0001b7b4
   15a54:	andeq	fp, r1, ip, asr #15
   15a58:	andeq	sl, r1, r4, lsl #27
   15a5c:	andeq	sl, r1, ip, lsr #27
   15a60:	andeq	fp, r1, r0, ror #15
   15a64:	muleq	r2, ip, r1
   15a68:	push	{r4, lr}
   15a6c:	mov	r4, r0
   15a70:	bl	112b0 <malloc@plt>
   15a74:	adds	r4, r4, #0
   15a78:	movne	r4, #1
   15a7c:	cmp	r0, #0
   15a80:	movne	r4, #0
   15a84:	cmp	r4, #0
   15a88:	popeq	{r4, pc}
   15a8c:	bl	15cb0 <__assert_fail@plt+0x4820>
   15a90:	push	{r4, r5, r6, lr}
   15a94:	umull	r4, r5, r0, r1
   15a98:	adds	r3, r5, #0
   15a9c:	movne	r3, #1
   15aa0:	cmp	r4, #0
   15aa4:	blt	15abc <__assert_fail@plt+0x462c>
   15aa8:	cmp	r3, #0
   15aac:	bne	15abc <__assert_fail@plt+0x462c>
   15ab0:	mul	r0, r1, r0
   15ab4:	pop	{r4, r5, r6, lr}
   15ab8:	b	15a68 <__assert_fail@plt+0x45d8>
   15abc:	bl	15cb0 <__assert_fail@plt+0x4820>
   15ac0:	b	15a68 <__assert_fail@plt+0x45d8>
   15ac4:	adds	r3, r0, #0
   15ac8:	movne	r3, #1
   15acc:	cmp	r1, #0
   15ad0:	movne	r3, #0
   15ad4:	cmp	r3, #0
   15ad8:	push	{r4, lr}
   15adc:	bne	15b04 <__assert_fail@plt+0x4674>
   15ae0:	mov	r4, r1
   15ae4:	bl	11214 <realloc@plt>
   15ae8:	adds	r4, r4, #0
   15aec:	movne	r4, #1
   15af0:	cmp	r0, #0
   15af4:	movne	r4, #0
   15af8:	cmp	r4, #0
   15afc:	popeq	{r4, pc}
   15b00:	bl	15cb0 <__assert_fail@plt+0x4820>
   15b04:	bl	111a8 <free@plt>
   15b08:	mov	r0, #0
   15b0c:	pop	{r4, pc}
   15b10:	push	{r4, r5, r6, lr}
   15b14:	umull	r4, r5, r1, r2
   15b18:	adds	r3, r5, #0
   15b1c:	movne	r3, #1
   15b20:	cmp	r4, #0
   15b24:	blt	15b3c <__assert_fail@plt+0x46ac>
   15b28:	cmp	r3, #0
   15b2c:	bne	15b3c <__assert_fail@plt+0x46ac>
   15b30:	mul	r1, r2, r1
   15b34:	pop	{r4, r5, r6, lr}
   15b38:	b	15ac4 <__assert_fail@plt+0x4634>
   15b3c:	bl	15cb0 <__assert_fail@plt+0x4820>
   15b40:	push	{r4, r5, r6, r7, r8, lr}
   15b44:	subs	r7, r0, #0
   15b48:	mov	r6, r1
   15b4c:	mov	r5, r2
   15b50:	ldr	r4, [r1]
   15b54:	beq	15b88 <__assert_fail@plt+0x46f8>
   15b58:	mov	r1, r2
   15b5c:	ldr	r0, [pc, #104]	; 15bcc <__assert_fail@plt+0x473c>
   15b60:	bl	19e98 <fts_children@@Base+0x1948>
   15b64:	cmp	r0, r4
   15b68:	bls	15bac <__assert_fail@plt+0x471c>
   15b6c:	add	r3, r4, #1
   15b70:	add	r4, r3, r4, lsr #1
   15b74:	str	r4, [r6]
   15b78:	mul	r1, r5, r4
   15b7c:	mov	r0, r7
   15b80:	pop	{r4, r5, r6, r7, r8, lr}
   15b84:	b	15ac4 <__assert_fail@plt+0x4634>
   15b88:	cmp	r4, #0
   15b8c:	beq	15bb0 <__assert_fail@plt+0x4720>
   15b90:	umull	r0, r1, r4, r5
   15b94:	adds	r3, r1, #0
   15b98:	movne	r3, #1
   15b9c:	cmp	r0, #0
   15ba0:	blt	15bac <__assert_fail@plt+0x471c>
   15ba4:	cmp	r3, #0
   15ba8:	beq	15b74 <__assert_fail@plt+0x46e4>
   15bac:	bl	15cb0 <__assert_fail@plt+0x4820>
   15bb0:	mov	r1, r2
   15bb4:	mov	r0, #64	; 0x40
   15bb8:	bl	19e98 <fts_children@@Base+0x1948>
   15bbc:	cmp	r5, #64	; 0x40
   15bc0:	movls	r4, r0
   15bc4:	addhi	r4, r0, #1
   15bc8:	b	15b90 <__assert_fail@plt+0x4700>
   15bcc:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   15bd0:	cmp	r0, #0
   15bd4:	ldr	r3, [r1]
   15bd8:	beq	15bfc <__assert_fail@plt+0x476c>
   15bdc:	ldr	r2, [pc, #60]	; 15c20 <__assert_fail@plt+0x4790>
   15be0:	cmp	r3, r2
   15be4:	bhi	15c18 <__assert_fail@plt+0x4788>
   15be8:	add	r2, r3, #1
   15bec:	add	r3, r2, r3, lsr #1
   15bf0:	str	r3, [r1]
   15bf4:	mov	r1, r3
   15bf8:	b	15ac4 <__assert_fail@plt+0x4634>
   15bfc:	cmp	r3, #0
   15c00:	bne	15c14 <__assert_fail@plt+0x4784>
   15c04:	mov	r3, #64	; 0x40
   15c08:	str	r3, [r1]
   15c0c:	mov	r1, r3
   15c10:	b	15ac4 <__assert_fail@plt+0x4634>
   15c14:	bge	15bf0 <__assert_fail@plt+0x4760>
   15c18:	push	{r4, lr}
   15c1c:	bl	15cb0 <__assert_fail@plt+0x4820>
   15c20:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   15c24:	push	{r4, lr}
   15c28:	mov	r4, r0
   15c2c:	bl	15a68 <__assert_fail@plt+0x45d8>
   15c30:	mov	r2, r4
   15c34:	mov	r1, #0
   15c38:	pop	{r4, lr}
   15c3c:	b	11358 <memset@plt>
   15c40:	push	{r4, r5, r6, lr}
   15c44:	umull	r4, r5, r0, r1
   15c48:	adds	r3, r5, #0
   15c4c:	movne	r3, #1
   15c50:	cmp	r4, #0
   15c54:	blt	15c6c <__assert_fail@plt+0x47dc>
   15c58:	cmp	r3, #0
   15c5c:	bne	15c6c <__assert_fail@plt+0x47dc>
   15c60:	bl	1113c <calloc@plt>
   15c64:	cmp	r0, #0
   15c68:	popne	{r4, r5, r6, pc}
   15c6c:	bl	15cb0 <__assert_fail@plt+0x4820>
   15c70:	push	{r4, r5, r6, lr}
   15c74:	mov	r4, r1
   15c78:	mov	r5, r0
   15c7c:	mov	r0, r1
   15c80:	bl	15a68 <__assert_fail@plt+0x45d8>
   15c84:	mov	r2, r4
   15c88:	mov	r1, r5
   15c8c:	pop	{r4, r5, r6, lr}
   15c90:	b	111cc <memcpy@plt>
   15c94:	push	{r4, lr}
   15c98:	mov	r4, r0
   15c9c:	bl	11310 <strlen@plt>
   15ca0:	add	r1, r0, #1
   15ca4:	mov	r0, r4
   15ca8:	pop	{r4, lr}
   15cac:	b	15c70 <__assert_fail@plt+0x47e0>
   15cb0:	ldr	r3, [pc, #44]	; 15ce4 <__assert_fail@plt+0x4854>
   15cb4:	push	{r4, lr}
   15cb8:	mov	r2, #5
   15cbc:	ldr	r1, [pc, #36]	; 15ce8 <__assert_fail@plt+0x4858>
   15cc0:	mov	r0, #0
   15cc4:	ldr	r4, [r3]
   15cc8:	bl	111fc <dcgettext@plt>
   15ccc:	ldr	r2, [pc, #24]	; 15cec <__assert_fail@plt+0x485c>
   15cd0:	mov	r1, #0
   15cd4:	mov	r3, r0
   15cd8:	mov	r0, r4
   15cdc:	bl	11298 <error@plt>
   15ce0:	bl	11448 <abort@plt>
   15ce4:	andeq	ip, r2, r0, asr #2
   15ce8:	andeq	fp, r1, r4, asr r8
   15cec:	andeq	sl, r1, r4, ror lr
   15cf0:	push	{r4, lr}
   15cf4:	orr	r1, r1, #512	; 0x200
   15cf8:	bl	178b8 <fts_open@@Base>
   15cfc:	cmp	r0, #0
   15d00:	popne	{r4, pc}
   15d04:	bl	11340 <__errno_location@plt>
   15d08:	ldr	r3, [r0]
   15d0c:	cmp	r3, #22
   15d10:	beq	15d18 <__assert_fail@plt+0x4888>
   15d14:	bl	15cb0 <__assert_fail@plt+0x4820>
   15d18:	ldr	r3, [pc, #12]	; 15d2c <__assert_fail@plt+0x489c>
   15d1c:	mov	r2, #41	; 0x29
   15d20:	ldr	r1, [pc, #8]	; 15d30 <__assert_fail@plt+0x48a0>
   15d24:	ldr	r0, [pc, #8]	; 15d34 <__assert_fail@plt+0x48a4>
   15d28:	bl	11490 <__assert_fail@plt>
   15d2c:	andeq	fp, r1, r8, ror #16
   15d30:	andeq	fp, r1, r4, ror r8
   15d34:	andeq	fp, r1, r0, lsl #17
   15d38:	ldr	r3, [r0, #48]	; 0x30
   15d3c:	and	r3, r3, #17
   15d40:	cmp	r3, #16
   15d44:	beq	15d68 <__assert_fail@plt+0x48d8>
   15d48:	cmp	r3, #17
   15d4c:	beq	15d58 <__assert_fail@plt+0x48c8>
   15d50:	mov	r0, #0
   15d54:	bx	lr
   15d58:	ldr	r0, [r1, #48]	; 0x30
   15d5c:	adds	r0, r0, #0
   15d60:	movne	r0, #1
   15d64:	bx	lr
   15d68:	mov	r0, #1
   15d6c:	bx	lr
   15d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d74:	cmp	r2, #36	; 0x24
   15d78:	ldr	r7, [pc, #1580]	; 163ac <__assert_fail@plt+0x4f1c>
   15d7c:	sub	sp, sp, #20
   15d80:	mov	fp, r2
   15d84:	ldr	r2, [r7]
   15d88:	ldr	r9, [sp, #56]	; 0x38
   15d8c:	str	r2, [sp, #12]
   15d90:	bhi	16394 <__assert_fail@plt+0x4f04>
   15d94:	cmp	r1, #0
   15d98:	mov	r6, r1
   15d9c:	mov	r5, r0
   15da0:	mov	sl, r3
   15da4:	addeq	r6, sp, #8
   15da8:	bl	11340 <__errno_location@plt>
   15dac:	mov	r3, #0
   15db0:	str	r3, [r0]
   15db4:	mov	r8, r0
   15db8:	bl	112ec <__ctype_b_loc@plt>
   15dbc:	ldrb	r3, [r5]
   15dc0:	mov	r1, r5
   15dc4:	ldr	ip, [r0]
   15dc8:	b	15dd0 <__assert_fail@plt+0x4940>
   15dcc:	ldrb	r3, [r1, #1]!
   15dd0:	lsl	r2, r3, #1
   15dd4:	ldrh	r0, [ip, r2]
   15dd8:	ands	r4, r0, #8192	; 0x2000
   15ddc:	bne	15dcc <__assert_fail@plt+0x493c>
   15de0:	cmp	r3, #45	; 0x2d
   15de4:	beq	15e70 <__assert_fail@plt+0x49e0>
   15de8:	mov	r2, fp
   15dec:	mov	r1, r6
   15df0:	mov	r0, r5
   15df4:	bl	11304 <strtoul@plt>
   15df8:	ldr	r3, [r6]
   15dfc:	cmp	r3, r5
   15e00:	mov	fp, r0
   15e04:	beq	15e58 <__assert_fail@plt+0x49c8>
   15e08:	ldr	r4, [r8]
   15e0c:	cmp	r4, #0
   15e10:	bne	15e48 <__assert_fail@plt+0x49b8>
   15e14:	cmp	r9, #0
   15e18:	beq	15e28 <__assert_fail@plt+0x4998>
   15e1c:	ldrb	r5, [r3]
   15e20:	cmp	r5, #0
   15e24:	bne	161e0 <__assert_fail@plt+0x4d50>
   15e28:	str	fp, [sl]
   15e2c:	ldr	r2, [sp, #12]
   15e30:	ldr	r3, [r7]
   15e34:	mov	r0, r4
   15e38:	cmp	r2, r3
   15e3c:	bne	163a8 <__assert_fail@plt+0x4f18>
   15e40:	add	sp, sp, #20
   15e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e48:	cmp	r4, #34	; 0x22
   15e4c:	bne	15e70 <__assert_fail@plt+0x49e0>
   15e50:	mov	r4, #1
   15e54:	b	15e14 <__assert_fail@plt+0x4984>
   15e58:	cmp	r9, #0
   15e5c:	str	r3, [sp, #4]
   15e60:	beq	15e70 <__assert_fail@plt+0x49e0>
   15e64:	ldrb	r5, [r5]
   15e68:	cmp	r5, #0
   15e6c:	bne	15e78 <__assert_fail@plt+0x49e8>
   15e70:	mov	r4, #4
   15e74:	b	15e2c <__assert_fail@plt+0x499c>
   15e78:	mov	r1, r5
   15e7c:	mov	r0, r9
   15e80:	bl	1131c <strchr@plt>
   15e84:	ldr	r3, [sp, #4]
   15e88:	cmp	r0, #0
   15e8c:	movne	fp, #1
   15e90:	beq	15e70 <__assert_fail@plt+0x49e0>
   15e94:	sub	r8, r5, #69	; 0x45
   15e98:	cmp	r8, #47	; 0x2f
   15e9c:	ldrls	pc, [pc, r8, lsl #2]
   15ea0:	b	16068 <__assert_fail@plt+0x4bd8>
   15ea4:	andeq	r5, r1, r4, ror #30
   15ea8:	andeq	r6, r1, r8, rrx
   15eac:	andeq	r5, r1, r4, ror #30
   15eb0:	andeq	r6, r1, r8, rrx
   15eb4:	andeq	r6, r1, r8, rrx
   15eb8:	andeq	r6, r1, r8, rrx
   15ebc:	andeq	r5, r1, r4, ror #30
   15ec0:	andeq	r6, r1, r8, rrx
   15ec4:	andeq	r5, r1, r4, ror #30
   15ec8:	andeq	r6, r1, r8, rrx
   15ecc:	andeq	r6, r1, r8, rrx
   15ed0:	andeq	r5, r1, r4, ror #30
   15ed4:	andeq	r6, r1, r8, rrx
   15ed8:	andeq	r6, r1, r8, rrx
   15edc:	andeq	r6, r1, r8, rrx
   15ee0:	andeq	r5, r1, r4, ror #30
   15ee4:	andeq	r6, r1, r8, rrx
   15ee8:	andeq	r6, r1, r8, rrx
   15eec:	andeq	r6, r1, r8, rrx
   15ef0:	andeq	r6, r1, r8, rrx
   15ef4:	andeq	r5, r1, r4, ror #30
   15ef8:	andeq	r5, r1, r4, ror #30
   15efc:	andeq	r6, r1, r8, rrx
   15f00:	andeq	r6, r1, r8, rrx
   15f04:	andeq	r6, r1, r8, rrx
   15f08:	andeq	r6, r1, r8, rrx
   15f0c:	andeq	r6, r1, r8, rrx
   15f10:	andeq	r6, r1, r8, rrx
   15f14:	andeq	r6, r1, r8, rrx
   15f18:	andeq	r6, r1, r8, rrx
   15f1c:	andeq	r6, r1, r8, rrx
   15f20:	andeq	r6, r1, r8, rrx
   15f24:	andeq	r6, r1, r8, rrx
   15f28:	andeq	r6, r1, r8, rrx
   15f2c:	andeq	r5, r1, r4, ror #30
   15f30:	andeq	r6, r1, r8, rrx
   15f34:	andeq	r6, r1, r8, rrx
   15f38:	andeq	r6, r1, r8, rrx
   15f3c:	andeq	r5, r1, r4, ror #30
   15f40:	andeq	r6, r1, r8, rrx
   15f44:	andeq	r5, r1, r4, ror #30
   15f48:	andeq	r6, r1, r8, rrx
   15f4c:	andeq	r6, r1, r8, rrx
   15f50:	andeq	r6, r1, r8, rrx
   15f54:	andeq	r6, r1, r8, rrx
   15f58:	andeq	r6, r1, r8, rrx
   15f5c:	andeq	r6, r1, r8, rrx
   15f60:	andeq	r5, r1, r4, ror #30
   15f64:	mov	r0, r9
   15f68:	mov	r1, #48	; 0x30
   15f6c:	str	r3, [sp, #4]
   15f70:	bl	1131c <strchr@plt>
   15f74:	ldr	r3, [sp, #4]
   15f78:	cmp	r0, #0
   15f7c:	beq	16068 <__assert_fail@plt+0x4bd8>
   15f80:	ldrb	r2, [r3, #1]
   15f84:	cmp	r2, #68	; 0x44
   15f88:	beq	16380 <__assert_fail@plt+0x4ef0>
   15f8c:	cmp	r2, #105	; 0x69
   15f90:	beq	16208 <__assert_fail@plt+0x4d78>
   15f94:	cmp	r2, #66	; 0x42
   15f98:	beq	16380 <__assert_fail@plt+0x4ef0>
   15f9c:	cmp	r8, #47	; 0x2f
   15fa0:	ldrls	pc, [pc, r8, lsl #2]
   15fa4:	b	161fc <__assert_fail@plt+0x4d6c>
   15fa8:	andeq	r6, r1, r8, lsr r3
   15fac:	strdeq	r6, [r1], -ip
   15fb0:	andeq	r6, r1, r8, asr r1
   15fb4:	strdeq	r6, [r1], -ip
   15fb8:	strdeq	r6, [r1], -ip
   15fbc:	strdeq	r6, [r1], -ip
   15fc0:	andeq	r6, r1, r4, asr #3
   15fc4:	strdeq	r6, [r1], -ip
   15fc8:	andeq	r6, r1, r8, lsl #6
   15fcc:	strdeq	r6, [r1], -ip
   15fd0:	strdeq	r6, [r1], -ip
   15fd4:	ldrdeq	r6, [r1], -r8
   15fd8:	strdeq	r6, [r1], -ip
   15fdc:	strdeq	r6, [r1], -ip
   15fe0:	strdeq	r6, [r1], -ip
   15fe4:	andeq	r6, r1, r8, lsr #5
   15fe8:	strdeq	r6, [r1], -ip
   15fec:	strdeq	r6, [r1], -ip
   15ff0:	strdeq	r6, [r1], -ip
   15ff4:	strdeq	r6, [r1], -ip
   15ff8:	andeq	r6, r1, r8, ror r2
   15ffc:	andeq	r6, r1, r4, asr #4
   16000:	strdeq	r6, [r1], -ip
   16004:	strdeq	r6, [r1], -ip
   16008:	strdeq	r6, [r1], -ip
   1600c:	strdeq	r6, [r1], -ip
   16010:	strdeq	r6, [r1], -ip
   16014:	strdeq	r6, [r1], -ip
   16018:	strdeq	r6, [r1], -ip
   1601c:	andeq	r6, r1, r0, lsr r2
   16020:	andeq	r6, r1, r8, ror r3
   16024:	strdeq	r6, [r1], -ip
   16028:	strdeq	r6, [r1], -ip
   1602c:	strdeq	r6, [r1], -ip
   16030:	andeq	r6, r1, r8, asr r1
   16034:	strdeq	r6, [r1], -ip
   16038:	strdeq	r6, [r1], -ip
   1603c:	strdeq	r6, [r1], -ip
   16040:	andeq	r6, r1, r4, asr #3
   16044:	strdeq	r6, [r1], -ip
   16048:	andeq	r6, r1, r8, lsl #6
   1604c:	strdeq	r6, [r1], -ip
   16050:	strdeq	r6, [r1], -ip
   16054:	strdeq	r6, [r1], -ip
   16058:	strdeq	r6, [r1], -ip
   1605c:	strdeq	r6, [r1], -ip
   16060:	strdeq	r6, [r1], -ip
   16064:	andeq	r6, r1, r8, lsr #5
   16068:	mov	r1, #1
   1606c:	mov	r2, #1024	; 0x400
   16070:	sub	r5, r5, #66	; 0x42
   16074:	cmp	r5, #53	; 0x35
   16078:	ldrls	pc, [pc, r5, lsl #2]
   1607c:	b	161fc <__assert_fail@plt+0x4d6c>
   16080:	andeq	r6, r1, r8, ror #6
   16084:	strdeq	r6, [r1], -ip
   16088:	strdeq	r6, [r1], -ip
   1608c:	andeq	r6, r1, r0, asr #6
   16090:	strdeq	r6, [r1], -ip
   16094:	andeq	r6, r1, r0, ror #2
   16098:	strdeq	r6, [r1], -ip
   1609c:	strdeq	r6, [r1], -ip
   160a0:	strdeq	r6, [r1], -ip
   160a4:	andeq	r6, r1, ip, asr #3
   160a8:	strdeq	r6, [r1], -ip
   160ac:	andeq	r6, r1, r0, lsl r3
   160b0:	strdeq	r6, [r1], -ip
   160b4:	strdeq	r6, [r1], -ip
   160b8:	andeq	r6, r1, r0, ror #5
   160bc:	strdeq	r6, [r1], -ip
   160c0:	strdeq	r6, [r1], -ip
   160c4:	strdeq	r6, [r1], -ip
   160c8:			; <UNDEFINED> instruction: 0x000162b0
   160cc:	strdeq	r6, [r1], -ip
   160d0:	strdeq	r6, [r1], -ip
   160d4:	strdeq	r6, [r1], -ip
   160d8:	strdeq	r6, [r1], -ip
   160dc:	andeq	r6, r1, r0, lsl #5
   160e0:	andeq	r6, r1, ip, asr #4
   160e4:	strdeq	r6, [r1], -ip
   160e8:	strdeq	r6, [r1], -ip
   160ec:	strdeq	r6, [r1], -ip
   160f0:	strdeq	r6, [r1], -ip
   160f4:	strdeq	r6, [r1], -ip
   160f8:	strdeq	r6, [r1], -ip
   160fc:	strdeq	r6, [r1], -ip
   16100:	andeq	r6, r1, r4, lsr r2
   16104:	andeq	r6, r1, ip, lsr #3
   16108:	strdeq	r6, [r1], -ip
   1610c:	strdeq	r6, [r1], -ip
   16110:	strdeq	r6, [r1], -ip
   16114:	andeq	r6, r1, r0, ror #2
   16118:	strdeq	r6, [r1], -ip
   1611c:	strdeq	r6, [r1], -ip
   16120:	strdeq	r6, [r1], -ip
   16124:	andeq	r6, r1, ip, asr #3
   16128:	strdeq	r6, [r1], -ip
   1612c:	andeq	r6, r1, r0, lsl r3
   16130:	strdeq	r6, [r1], -ip
   16134:	strdeq	r6, [r1], -ip
   16138:	strdeq	r6, [r1], -ip
   1613c:	strdeq	r6, [r1], -ip
   16140:	strdeq	r6, [r1], -ip
   16144:	strdeq	r6, [r1], -ip
   16148:			; <UNDEFINED> instruction: 0x000162b0
   1614c:	strdeq	r6, [r1], -ip
   16150:	strdeq	r6, [r1], -ip
   16154:	andeq	r6, r1, r0, lsr #4
   16158:	mov	r1, #1
   1615c:	mov	r2, #1024	; 0x400
   16160:	umull	ip, r0, r2, fp
   16164:	adds	r0, r0, #0
   16168:	movne	r0, #1
   1616c:	cmp	r0, #0
   16170:	bne	1638c <__assert_fail@plt+0x4efc>
   16174:	mul	fp, r2, fp
   16178:	umull	ip, r0, r2, fp
   1617c:	adds	r0, r0, #0
   16180:	movne	r0, #1
   16184:	cmp	r0, #0
   16188:	bne	1638c <__assert_fail@plt+0x4efc>
   1618c:	mul	fp, r2, fp
   16190:	umull	ip, r0, r2, fp
   16194:	adds	r0, r0, #0
   16198:	movne	r0, #1
   1619c:	cmp	r0, #0
   161a0:	muleq	fp, r2, fp
   161a4:	bne	1638c <__assert_fail@plt+0x4efc>
   161a8:	orr	r4, r4, r0
   161ac:	add	r2, r3, r1
   161b0:	str	r2, [r6]
   161b4:	ldrb	r3, [r3, r1]
   161b8:	cmp	r3, #0
   161bc:	orrne	r4, r4, #2
   161c0:	b	15e28 <__assert_fail@plt+0x4998>
   161c4:	mov	r1, #1
   161c8:	mov	r2, #1024	; 0x400
   161cc:	umull	ip, r0, r2, fp
   161d0:	cmp	r0, #0
   161d4:	bne	1632c <__assert_fail@plt+0x4e9c>
   161d8:	mul	fp, r2, fp
   161dc:	b	161ac <__assert_fail@plt+0x4d1c>
   161e0:	mov	r1, r5
   161e4:	mov	r0, r9
   161e8:	str	r3, [sp, #4]
   161ec:	bl	1131c <strchr@plt>
   161f0:	ldr	r3, [sp, #4]
   161f4:	cmp	r0, #0
   161f8:	bne	15e94 <__assert_fail@plt+0x4a04>
   161fc:	str	fp, [sl]
   16200:	orr	r4, r4, #2
   16204:	b	15e2c <__assert_fail@plt+0x499c>
   16208:	ldrb	r1, [r3, #2]
   1620c:	mov	r2, #1024	; 0x400
   16210:	cmp	r1, #66	; 0x42
   16214:	movne	r1, #1
   16218:	moveq	r1, #3
   1621c:	b	16070 <__assert_fail@plt+0x4be0>
   16220:	cmp	fp, #0
   16224:	blt	1632c <__assert_fail@plt+0x4e9c>
   16228:	lsl	fp, fp, #1
   1622c:	b	161ac <__assert_fail@plt+0x4d1c>
   16230:	mov	r1, #1
   16234:	lsrs	r2, fp, #23
   16238:	bne	1632c <__assert_fail@plt+0x4e9c>
   1623c:	lsl	fp, fp, #9
   16240:	b	161ac <__assert_fail@plt+0x4d1c>
   16244:	mov	r1, #1
   16248:	mov	r2, #1024	; 0x400
   1624c:	mov	r0, #7
   16250:	mov	lr, #0
   16254:	umull	r5, ip, r2, fp
   16258:	cmp	ip, #0
   1625c:	movne	lr, #1
   16260:	muleq	fp, r2, fp
   16264:	mvnne	fp, #0
   16268:	subs	r0, r0, #1
   1626c:	bne	16254 <__assert_fail@plt+0x4dc4>
   16270:	orr	r4, r4, lr
   16274:	b	161ac <__assert_fail@plt+0x4d1c>
   16278:	mov	r1, #1
   1627c:	mov	r2, #1024	; 0x400
   16280:	mov	r0, #8
   16284:	mov	lr, #0
   16288:	umull	r5, ip, r2, fp
   1628c:	cmp	ip, #0
   16290:	movne	lr, #1
   16294:	muleq	fp, r2, fp
   16298:	mvnne	fp, #0
   1629c:	subs	r0, r0, #1
   162a0:	bne	16288 <__assert_fail@plt+0x4df8>
   162a4:	b	16270 <__assert_fail@plt+0x4de0>
   162a8:	mov	r1, #1
   162ac:	mov	r2, #1024	; 0x400
   162b0:	mov	r0, #4
   162b4:	mov	lr, #0
   162b8:	umull	r5, ip, r2, fp
   162bc:	cmp	ip, #0
   162c0:	movne	lr, #1
   162c4:	muleq	fp, r2, fp
   162c8:	mvnne	fp, #0
   162cc:	subs	r0, r0, #1
   162d0:	bne	162b8 <__assert_fail@plt+0x4e28>
   162d4:	b	16270 <__assert_fail@plt+0x4de0>
   162d8:	mov	r1, #1
   162dc:	mov	r2, #1024	; 0x400
   162e0:	mov	r0, #5
   162e4:	mov	lr, #0
   162e8:	umull	r5, ip, r2, fp
   162ec:	cmp	ip, #0
   162f0:	movne	lr, #1
   162f4:	muleq	fp, r2, fp
   162f8:	mvnne	fp, #0
   162fc:	subs	r0, r0, #1
   16300:	bne	162e8 <__assert_fail@plt+0x4e58>
   16304:	b	16270 <__assert_fail@plt+0x4de0>
   16308:	mov	r1, #1
   1630c:	mov	r2, #1024	; 0x400
   16310:	umull	ip, r0, r2, fp
   16314:	cmp	r0, #0
   16318:	bne	1632c <__assert_fail@plt+0x4e9c>
   1631c:	mul	fp, r2, fp
   16320:	umull	ip, r0, r2, fp
   16324:	cmp	r0, #0
   16328:	beq	161d8 <__assert_fail@plt+0x4d48>
   1632c:	mov	r4, #1
   16330:	mvn	fp, #0
   16334:	b	161ac <__assert_fail@plt+0x4d1c>
   16338:	mov	r1, #1
   1633c:	mov	r2, #1024	; 0x400
   16340:	mov	r0, #6
   16344:	mov	lr, #0
   16348:	umull	r5, ip, r2, fp
   1634c:	cmp	ip, #0
   16350:	movne	lr, #1
   16354:	muleq	fp, r2, fp
   16358:	mvnne	fp, #0
   1635c:	subs	r0, r0, #1
   16360:	bne	16348 <__assert_fail@plt+0x4eb8>
   16364:	b	16270 <__assert_fail@plt+0x4de0>
   16368:	lsrs	r2, fp, #22
   1636c:	bne	1632c <__assert_fail@plt+0x4e9c>
   16370:	lsl	fp, fp, #10
   16374:	b	161ac <__assert_fail@plt+0x4d1c>
   16378:	mov	r1, #1
   1637c:	b	161ac <__assert_fail@plt+0x4d1c>
   16380:	mov	r1, #2
   16384:	mov	r2, #1000	; 0x3e8
   16388:	b	16070 <__assert_fail@plt+0x4be0>
   1638c:	mvn	fp, #0
   16390:	b	161a8 <__assert_fail@plt+0x4d18>
   16394:	ldr	r3, [pc, #20]	; 163b0 <__assert_fail@plt+0x4f20>
   16398:	mov	r2, #96	; 0x60
   1639c:	ldr	r1, [pc, #16]	; 163b4 <__assert_fail@plt+0x4f24>
   163a0:	ldr	r0, [pc, #16]	; 163b8 <__assert_fail@plt+0x4f28>
   163a4:	bl	11490 <__assert_fail@plt>
   163a8:	bl	11208 <__stack_chk_fail@plt>
   163ac:	andeq	fp, r2, r8, lsl #30
   163b0:	muleq	r1, r0, r8
   163b4:	muleq	r1, ip, r8
   163b8:	andeq	fp, r1, ip, lsr #17
   163bc:	ldrd	r2, [r1, #8]
   163c0:	push	{r4, r5}
   163c4:	ldrd	r4, [r0, #8]
   163c8:	cmp	r5, r3
   163cc:	cmpeq	r4, r2
   163d0:	movne	r0, #0
   163d4:	bne	163f0 <__assert_fail@plt+0x4f60>
   163d8:	ldrd	r4, [r0]
   163dc:	ldrd	r2, [r1]
   163e0:	cmp	r5, r3
   163e4:	cmpeq	r4, r2
   163e8:	moveq	r0, #1
   163ec:	movne	r0, #0
   163f0:	pop	{r4, r5}
   163f4:	bx	lr
   163f8:	push	{r4, lr}
   163fc:	mov	r2, r1
   16400:	mov	r3, #0
   16404:	ldrd	r0, [r0, #8]
   16408:	bl	1a0a4 <fts_children@@Base+0x1b54>
   1640c:	mov	r0, r2
   16410:	pop	{r4, pc}
   16414:	push	{r4, lr}
   16418:	mov	r2, r1
   1641c:	mov	r3, #0
   16420:	ldrd	r0, [r0]
   16424:	bl	1a0a4 <fts_children@@Base+0x1b54>
   16428:	mov	r0, r2
   1642c:	pop	{r4, pc}
   16430:	push	{r4, r5}
   16434:	ldrd	r2, [r1]
   16438:	ldrd	r4, [r0]
   1643c:	cmp	r5, r3
   16440:	cmpeq	r4, r2
   16444:	moveq	r0, #1
   16448:	movne	r0, #0
   1644c:	pop	{r4, r5}
   16450:	bx	lr
   16454:	ldr	r2, [r0]
   16458:	ldr	r3, [r1]
   1645c:	ldrd	r0, [r2, #168]	; 0xa8
   16460:	ldrd	r2, [r3, #168]	; 0xa8
   16464:	cmp	r1, r3
   16468:	cmpeq	r0, r2
   1646c:	bcc	1647c <__assert_fail@plt+0x4fec>
   16470:	movhi	r0, #1
   16474:	movls	r0, #0
   16478:	bx	lr
   1647c:	mvn	r0, #0
   16480:	bx	lr
   16484:	ldr	r3, [r0, #40]	; 0x28
   16488:	push	{r4, r5, r6, r7, r8, lr}
   1648c:	cmp	r3, r2
   16490:	mov	r6, r0
   16494:	ldr	r7, [r0, #44]	; 0x2c
   16498:	mov	r5, r2
   1649c:	mov	r4, r1
   164a0:	ldr	r0, [r0, #8]
   164a4:	bcs	164cc <__assert_fail@plt+0x503c>
   164a8:	add	r1, r2, #40	; 0x28
   164ac:	cmn	r1, #-1073741823	; 0xc0000001
   164b0:	str	r1, [r6, #40]	; 0x28
   164b4:	bhi	16544 <__assert_fail@plt+0x50b4>
   164b8:	lsl	r1, r1, #2
   164bc:	bl	11214 <realloc@plt>
   164c0:	cmp	r0, #0
   164c4:	strne	r0, [r6, #8]
   164c8:	beq	16540 <__assert_fail@plt+0x50b0>
   164cc:	cmp	r4, #0
   164d0:	movne	r2, r0
   164d4:	beq	164e8 <__assert_fail@plt+0x5058>
   164d8:	str	r4, [r2], #4
   164dc:	ldr	r4, [r4, #8]
   164e0:	cmp	r4, #0
   164e4:	bne	164d8 <__assert_fail@plt+0x5048>
   164e8:	mov	r3, r7
   164ec:	mov	r2, #4
   164f0:	mov	r1, r5
   164f4:	bl	1140c <qsort@plt>
   164f8:	ldr	lr, [r6, #8]
   164fc:	subs	r3, r5, #1
   16500:	ldr	r0, [lr]
   16504:	moveq	r2, r0
   16508:	beq	16534 <__assert_fail@plt+0x50a4>
   1650c:	mov	ip, r0
   16510:	mov	r2, lr
   16514:	b	1651c <__assert_fail@plt+0x508c>
   16518:	ldr	ip, [r2]
   1651c:	ldr	r1, [r2, #4]!
   16520:	subs	r3, r3, #1
   16524:	str	r1, [ip, #8]
   16528:	bne	16518 <__assert_fail@plt+0x5088>
   1652c:	add	r5, lr, r5, lsl #2
   16530:	ldr	r2, [r5, #-4]
   16534:	mov	r3, #0
   16538:	str	r3, [r2, #8]
   1653c:	pop	{r4, r5, r6, r7, r8, pc}
   16540:	ldr	r0, [r6, #8]
   16544:	bl	111a8 <free@plt>
   16548:	mov	r3, #0
   1654c:	mov	r0, r4
   16550:	str	r3, [r6, #8]
   16554:	str	r3, [r6, #40]	; 0x28
   16558:	pop	{r4, r5, r6, r7, r8, pc}
   1655c:	add	r3, r2, #184	; 0xb8
   16560:	push	{r4, r5, r6, r7, r8, lr}
   16564:	mov	r6, r0
   16568:	bic	r0, r3, #7
   1656c:	mov	r5, r2
   16570:	mov	r7, r1
   16574:	bl	112b0 <malloc@plt>
   16578:	subs	r4, r0, #0
   1657c:	beq	165c8 <__assert_fail@plt+0x5138>
   16580:	mov	r1, r7
   16584:	mov	r2, r5
   16588:	add	r0, r4, #176	; 0xb0
   1658c:	bl	111cc <memcpy@plt>
   16590:	add	r0, r4, r5
   16594:	ldr	r1, [r6, #24]
   16598:	mov	r3, #0
   1659c:	mov	r2, #3
   165a0:	strb	r3, [r0, #176]	; 0xb0
   165a4:	str	r3, [r4, #32]
   165a8:	str	r3, [r4, #12]
   165ac:	strh	r3, [r4, #62]	; 0x3e
   165b0:	str	r3, [r4, #16]
   165b4:	str	r3, [r4, #20]
   165b8:	str	r5, [r4, #52]	; 0x34
   165bc:	str	r6, [r4, #44]	; 0x2c
   165c0:	str	r1, [r4, #28]
   165c4:	strh	r2, [r4, #64]	; 0x40
   165c8:	mov	r0, r4
   165cc:	pop	{r4, r5, r6, r7, r8, pc}
   165d0:	push	{r4, r5, r6, lr}
   165d4:	subs	r4, r0, #0
   165d8:	popeq	{r4, r5, r6, pc}
   165dc:	ldr	r3, [r4, #12]
   165e0:	ldr	r5, [r4, #8]
   165e4:	subs	r0, r3, #0
   165e8:	beq	165f0 <__assert_fail@plt+0x5160>
   165ec:	bl	1146c <closedir@plt>
   165f0:	mov	r0, r4
   165f4:	bl	111a8 <free@plt>
   165f8:	subs	r4, r5, #0
   165fc:	bne	165dc <__assert_fail@plt+0x514c>
   16600:	pop	{r4, r5, r6, pc}
   16604:	push	{r4, lr}
   16608:	mov	r4, r0
   1660c:	mov	r0, r4
   16610:	bl	19a38 <fts_children@@Base+0x14e8>
   16614:	cmp	r0, #0
   16618:	mov	r0, r4
   1661c:	popne	{r4, pc}
   16620:	bl	19a84 <fts_children@@Base+0x1534>
   16624:	cmp	r0, #0
   16628:	blt	1660c <__assert_fail@plt+0x517c>
   1662c:	bl	11454 <close@plt>
   16630:	b	1660c <__assert_fail@plt+0x517c>
   16634:	push	{r4, r5, r6, r7, r8, lr}
   16638:	sub	sp, sp, #120	; 0x78
   1663c:	ldr	r6, [r0, #44]	; 0x2c
   16640:	ldr	r5, [pc, #272]	; 16758 <__assert_fail@plt+0x52c8>
   16644:	ldr	r3, [r6, #48]	; 0x30
   16648:	ldr	r2, [r5]
   1664c:	tst	r3, #512	; 0x200
   16650:	str	r2, [sp, #116]	; 0x74
   16654:	beq	166d8 <__assert_fail@plt+0x5248>
   16658:	ldr	r4, [r6, #52]	; 0x34
   1665c:	mov	r7, r0
   16660:	cmp	r4, #0
   16664:	mov	r8, r1
   16668:	beq	16690 <__assert_fail@plt+0x5200>
   1666c:	ldrd	r2, [r7, #72]	; 0x48
   16670:	add	r1, sp, #8
   16674:	mov	r0, r4
   16678:	strd	r2, [sp, #8]
   1667c:	bl	18fa8 <fts_children@@Base+0xa58>
   16680:	cmp	r0, #0
   16684:	beq	166bc <__assert_fail@plt+0x522c>
   16688:	ldr	r6, [r0, #8]
   1668c:	b	166dc <__assert_fail@plt+0x524c>
   16690:	ldr	r3, [pc, #196]	; 1675c <__assert_fail@plt+0x52cc>
   16694:	mov	r1, r4
   16698:	str	r3, [sp]
   1669c:	ldr	r2, [pc, #188]	; 16760 <__assert_fail@plt+0x52d0>
   166a0:	ldr	r3, [pc, #188]	; 16764 <__assert_fail@plt+0x52d4>
   166a4:	mov	r0, #13
   166a8:	bl	19260 <fts_children@@Base+0xd10>
   166ac:	cmp	r0, #0
   166b0:	mov	r4, r0
   166b4:	str	r0, [r6, #52]	; 0x34
   166b8:	bne	1666c <__assert_fail@plt+0x51dc>
   166bc:	cmp	r8, #0
   166c0:	blt	166d8 <__assert_fail@plt+0x5248>
   166c4:	mov	r0, r8
   166c8:	add	r1, sp, #24
   166cc:	bl	11130 <fstatfs64@plt>
   166d0:	cmp	r0, #0
   166d4:	beq	166f8 <__assert_fail@plt+0x5268>
   166d8:	mov	r6, #0
   166dc:	ldr	r2, [sp, #116]	; 0x74
   166e0:	ldr	r3, [r5]
   166e4:	mov	r0, r6
   166e8:	cmp	r2, r3
   166ec:	bne	16750 <__assert_fail@plt+0x52c0>
   166f0:	add	sp, sp, #120	; 0x78
   166f4:	pop	{r4, r5, r6, r7, r8, pc}
   166f8:	cmp	r4, #0
   166fc:	ldr	r6, [sp, #24]
   16700:	beq	166dc <__assert_fail@plt+0x524c>
   16704:	mov	r0, #16
   16708:	bl	112b0 <malloc@plt>
   1670c:	subs	r8, r0, #0
   16710:	beq	166dc <__assert_fail@plt+0x524c>
   16714:	ldrd	r2, [r7, #72]	; 0x48
   16718:	str	r6, [r8, #8]
   1671c:	mov	r0, r4
   16720:	strd	r2, [r8]
   16724:	mov	r1, r8
   16728:	bl	1988c <fts_children@@Base+0x133c>
   1672c:	cmp	r0, #0
   16730:	beq	16744 <__assert_fail@plt+0x52b4>
   16734:	cmp	r8, r0
   16738:	bne	16754 <__assert_fail@plt+0x52c4>
   1673c:	ldr	r6, [sp, #24]
   16740:	b	166dc <__assert_fail@plt+0x524c>
   16744:	mov	r0, r8
   16748:	bl	111a8 <free@plt>
   1674c:	b	1673c <__assert_fail@plt+0x52ac>
   16750:	bl	11208 <__stack_chk_fail@plt>
   16754:	bl	11448 <abort@plt>
   16758:	andeq	fp, r2, r8, lsl #30
   1675c:	andeq	r1, r1, r8, lsr #3
   16760:	andeq	r6, r1, r4, lsl r4
   16764:	andeq	r6, r1, r0, lsr r4
   16768:	push	{r4, lr}
   1676c:	bl	16634 <__assert_fail@plt+0x51a4>
   16770:	ldr	r3, [pc, #112]	; 167e8 <__assert_fail@plt+0x5358>
   16774:	cmp	r0, r3
   16778:	beq	167d8 <__assert_fail@plt+0x5348>
   1677c:	ble	167b4 <__assert_fail@plt+0x5324>
   16780:	ldr	r3, [pc, #100]	; 167ec <__assert_fail@plt+0x535c>
   16784:	cmp	r0, r3
   16788:	beq	167d8 <__assert_fail@plt+0x5348>
   1678c:	add	r3, r3, #83886080	; 0x5000000
   16790:	add	r3, r3, #4544	; 0x11c0
   16794:	add	r3, r3, #51	; 0x33
   16798:	cmp	r0, r3
   1679c:	beq	167e0 <__assert_fail@plt+0x5350>
   167a0:	ldr	r3, [pc, #72]	; 167f0 <__assert_fail@plt+0x5360>
   167a4:	cmp	r0, r3
   167a8:	moveq	r0, #2
   167ac:	movne	r0, #1
   167b0:	pop	{r4, pc}
   167b4:	cmp	r0, #0
   167b8:	popeq	{r4, pc}
   167bc:	ldr	r3, [pc, #48]	; 167f4 <__assert_fail@plt+0x5364>
   167c0:	cmp	r0, r3
   167c4:	beq	167d8 <__assert_fail@plt+0x5348>
   167c8:	ldr	r3, [pc, #40]	; 167f8 <__assert_fail@plt+0x5368>
   167cc:	subs	r0, r0, r3
   167d0:	movne	r0, #1
   167d4:	pop	{r4, pc}
   167d8:	mov	r0, #0
   167dc:	pop	{r4, pc}
   167e0:	mov	r0, #2
   167e4:	pop	{r4, pc}
   167e8:	andeq	r9, r0, r0, lsr #31
   167ec:	movtpl	r4, #24911	; 0x614f
   167f0:	rsbpl	r4, r5, #1884160	; 0x1cc000
   167f4:	andeq	r6, r0, r9, ror #18
   167f8:			; <UNDEFINED> instruction: 0xff534d42
   167fc:	push	{r4, r5, r6, lr}
   16800:	mov	r5, r1
   16804:	ldr	r1, [r0, #32]
   16808:	cmn	r1, #100	; 0x64
   1680c:	sub	r3, r1, r5
   16810:	clz	r3, r3
   16814:	lsr	r3, r3, #5
   16818:	moveq	r3, #0
   1681c:	cmp	r3, #0
   16820:	bne	16880 <__assert_fail@plt+0x53f0>
   16824:	cmp	r2, #0
   16828:	mov	r4, r0
   1682c:	bne	16858 <__assert_fail@plt+0x53c8>
   16830:	ldr	r3, [r0, #48]	; 0x30
   16834:	lsr	r3, r3, #2
   16838:	eor	r3, r3, #1
   1683c:	cmp	r1, #0
   16840:	movlt	r3, #0
   16844:	andge	r3, r3, #1
   16848:	cmp	r3, #0
   1684c:	bne	16874 <__assert_fail@plt+0x53e4>
   16850:	str	r5, [r4, #32]
   16854:	pop	{r4, r5, r6, pc}
   16858:	add	r0, r0, #60	; 0x3c
   1685c:	bl	19a40 <fts_children@@Base+0x14f0>
   16860:	cmp	r0, #0
   16864:	blt	16850 <__assert_fail@plt+0x53c0>
   16868:	bl	11454 <close@plt>
   1686c:	str	r5, [r4, #32]
   16870:	pop	{r4, r5, r6, pc}
   16874:	mov	r0, r1
   16878:	bl	11454 <close@plt>
   1687c:	b	1686c <__assert_fail@plt+0x53dc>
   16880:	bl	11448 <abort@plt>
   16884:	ldr	r3, [r0, #48]	; 0x30
   16888:	push	{r4, r5, r6, lr}
   1688c:	ands	r5, r3, #4
   16890:	mov	r4, r0
   16894:	movne	r5, #0
   16898:	bne	168b0 <__assert_fail@plt+0x5420>
   1689c:	tst	r3, #512	; 0x200
   168a0:	beq	168c0 <__assert_fail@plt+0x5430>
   168a4:	mov	r2, #1
   168a8:	mvn	r1, #99	; 0x63
   168ac:	bl	167fc <__assert_fail@plt+0x536c>
   168b0:	add	r0, r4, #60	; 0x3c
   168b4:	bl	16604 <__assert_fail@plt+0x5174>
   168b8:	mov	r0, r5
   168bc:	pop	{r4, r5, r6, pc}
   168c0:	ldr	r0, [r0, #28]
   168c4:	bl	11400 <fchdir@plt>
   168c8:	adds	r5, r0, #0
   168cc:	movne	r5, #1
   168d0:	b	168b0 <__assert_fail@plt+0x5420>
   168d4:	push	{r4, r5, r6, lr}
   168d8:	mov	r4, r2
   168dc:	ldr	r2, [r2, #48]	; 0x30
   168e0:	mov	r6, r1
   168e4:	cmp	r2, #0
   168e8:	ldr	ip, [r1]
   168ec:	sub	sp, sp, #8
   168f0:	add	r5, r4, #72	; 0x48
   168f4:	ldr	r1, [r4, #24]
   168f8:	bne	16958 <__assert_fail@plt+0x54c8>
   168fc:	tst	ip, #1
   16900:	beq	16958 <__assert_fail@plt+0x54c8>
   16904:	mov	r2, r5
   16908:	mov	r0, #3
   1690c:	bl	11430 <__xstat64@plt>
   16910:	cmp	r0, #0
   16914:	beq	16988 <__assert_fail@plt+0x54f8>
   16918:	bl	11340 <__errno_location@plt>
   1691c:	ldr	r3, [r0]
   16920:	mov	r6, r0
   16924:	cmp	r3, #2
   16928:	bne	169bc <__assert_fail@plt+0x552c>
   1692c:	mov	r2, r5
   16930:	ldr	r1, [r4, #24]
   16934:	mov	r0, #3
   16938:	bl	11460 <__lxstat64@plt>
   1693c:	cmp	r0, #0
   16940:	ldrne	r3, [r6]
   16944:	bne	169bc <__assert_fail@plt+0x552c>
   16948:	str	r0, [r6]
   1694c:	mov	r0, #13
   16950:	add	sp, sp, #8
   16954:	pop	{r4, r5, r6, pc}
   16958:	lsl	ip, ip, #30
   1695c:	orrs	r3, r3, ip, lsr #31
   16960:	bne	16904 <__assert_fail@plt+0x5474>
   16964:	mov	r3, #256	; 0x100
   16968:	mov	r2, r1
   1696c:	str	r3, [sp]
   16970:	mov	r1, r0
   16974:	mov	r3, r5
   16978:	mov	r0, #3
   1697c:	bl	1122c <__fxstatat64@plt>
   16980:	cmp	r0, #0
   16984:	bne	169b4 <__assert_fail@plt+0x5524>
   16988:	ldr	r3, [r4, #88]	; 0x58
   1698c:	and	r3, r3, #61440	; 0xf000
   16990:	cmp	r3, #16384	; 0x4000
   16994:	beq	169dc <__assert_fail@plt+0x554c>
   16998:	cmp	r3, #40960	; 0xa000
   1699c:	beq	16a58 <__assert_fail@plt+0x55c8>
   169a0:	cmp	r3, #32768	; 0x8000
   169a4:	movne	r0, #3
   169a8:	moveq	r0, #8
   169ac:	add	sp, sp, #8
   169b0:	pop	{r4, r5, r6, pc}
   169b4:	bl	11340 <__errno_location@plt>
   169b8:	ldr	r3, [r0]
   169bc:	str	r3, [r4, #32]
   169c0:	mov	r0, r5
   169c4:	mov	r2, #104	; 0x68
   169c8:	mov	r1, #0
   169cc:	bl	11358 <memset@plt>
   169d0:	mov	r0, #10
   169d4:	add	sp, sp, #8
   169d8:	pop	{r4, r5, r6, pc}
   169dc:	ldr	r3, [r4, #92]	; 0x5c
   169e0:	cmp	r3, #1
   169e4:	bls	16a50 <__assert_fail@plt+0x55c0>
   169e8:	ldr	r2, [r4, #48]	; 0x30
   169ec:	cmp	r2, #0
   169f0:	ble	16a50 <__assert_fail@plt+0x55c0>
   169f4:	ldr	r2, [r6]
   169f8:	tst	r2, #32
   169fc:	subeq	r3, r3, #2
   16a00:	ldrb	r2, [r4, #176]	; 0xb0
   16a04:	str	r3, [r4, #56]	; 0x38
   16a08:	cmp	r2, #46	; 0x2e
   16a0c:	bne	16a30 <__assert_fail@plt+0x55a0>
   16a10:	ldrb	r3, [r4, #177]	; 0xb1
   16a14:	cmp	r3, #0
   16a18:	beq	16a3c <__assert_fail@plt+0x55ac>
   16a1c:	ldr	r3, [r4, #176]	; 0xb0
   16a20:	bic	r3, r3, #-16777216	; 0xff000000
   16a24:	bic	r3, r3, #255	; 0xff
   16a28:	cmp	r3, #11776	; 0x2e00
   16a2c:	beq	16a3c <__assert_fail@plt+0x55ac>
   16a30:	mov	r0, #1
   16a34:	add	sp, sp, #8
   16a38:	pop	{r4, r5, r6, pc}
   16a3c:	ldr	r3, [r4, #48]	; 0x30
   16a40:	cmp	r3, #0
   16a44:	moveq	r0, #1
   16a48:	movne	r0, #5
   16a4c:	b	169ac <__assert_fail@plt+0x551c>
   16a50:	mvn	r3, #0
   16a54:	b	16a00 <__assert_fail@plt+0x5570>
   16a58:	mov	r0, #12
   16a5c:	b	169ac <__assert_fail@plt+0x551c>
   16a60:	ldr	ip, [r1]
   16a64:	push	{r4, r5, r6, lr}
   16a68:	add	r3, ip, #256	; 0x100
   16a6c:	add	r2, r3, r2
   16a70:	cmp	ip, r2
   16a74:	mov	r4, r0
   16a78:	ldr	r0, [r0]
   16a7c:	bhi	16aa4 <__assert_fail@plt+0x5614>
   16a80:	str	r2, [r1]
   16a84:	mov	r1, r2
   16a88:	bl	11214 <realloc@plt>
   16a8c:	subs	r5, r0, #0
   16a90:	movne	r3, #1
   16a94:	strne	r5, [r4]
   16a98:	beq	16ac8 <__assert_fail@plt+0x5638>
   16a9c:	mov	r0, r3
   16aa0:	pop	{r4, r5, r6, pc}
   16aa4:	mov	r5, #0
   16aa8:	bl	111a8 <free@plt>
   16aac:	str	r5, [r4]
   16ab0:	bl	11340 <__errno_location@plt>
   16ab4:	mov	r2, #36	; 0x24
   16ab8:	mov	r3, r5
   16abc:	str	r2, [r0]
   16ac0:	mov	r0, r3
   16ac4:	pop	{r4, r5, r6, pc}
   16ac8:	ldr	r0, [r4]
   16acc:	bl	111a8 <free@plt>
   16ad0:	str	r5, [r4]
   16ad4:	mov	r3, r5
   16ad8:	b	16a9c <__assert_fail@plt+0x560c>
   16adc:	ldr	r3, [pc, #104]	; 16b4c <__assert_fail@plt+0x56bc>
   16ae0:	push	{r4, lr}
   16ae4:	and	r3, r3, r0
   16ae8:	cmp	r3, #0
   16aec:	sub	sp, sp, #8
   16af0:	mov	r4, r1
   16af4:	beq	16b28 <__assert_fail@plt+0x5698>
   16af8:	ldr	r2, [pc, #80]	; 16b50 <__assert_fail@plt+0x56c0>
   16afc:	ldr	r3, [pc, #80]	; 16b54 <__assert_fail@plt+0x56c4>
   16b00:	str	r2, [sp]
   16b04:	mov	r1, #0
   16b08:	ldr	r2, [pc, #72]	; 16b58 <__assert_fail@plt+0x56c8>
   16b0c:	mov	r0, #31
   16b10:	bl	19260 <fts_children@@Base+0xd10>
   16b14:	str	r0, [r4]
   16b18:	adds	r0, r0, #0
   16b1c:	movne	r0, #1
   16b20:	add	sp, sp, #8
   16b24:	pop	{r4, pc}
   16b28:	mov	r0, #32
   16b2c:	bl	112b0 <malloc@plt>
   16b30:	cmp	r0, #0
   16b34:	str	r0, [r4]
   16b38:	beq	16b20 <__assert_fail@plt+0x5690>
   16b3c:	bl	18790 <fts_children@@Base+0x240>
   16b40:	mov	r0, #1
   16b44:	add	sp, sp, #8
   16b48:	pop	{r4, pc}
   16b4c:	andeq	r0, r0, r2, lsl #2
   16b50:	andeq	r1, r1, r8, lsr #3
   16b54:			; <UNDEFINED> instruction: 0x000163bc
   16b58:	strdeq	r6, [r1], -r8
   16b5c:	lsl	r3, r1, #11
   16b60:	lsl	ip, r1, #7
   16b64:	tst	r1, #512	; 0x200
   16b68:	and	r1, r3, #32768	; 0x8000
   16b6c:	and	r3, ip, #262144	; 0x40000
   16b70:	orr	r1, r1, r3
   16b74:	orr	r1, r1, #540672	; 0x84000
   16b78:	mov	r3, r2
   16b7c:	orr	r1, r1, #2304	; 0x900
   16b80:	beq	16b90 <__assert_fail@plt+0x5700>
   16b84:	mov	r2, r1
   16b88:	mov	r1, r3
   16b8c:	b	19b00 <fts_children@@Base+0x15b0>
   16b90:	mov	r0, r2
   16b94:	b	18888 <fts_children@@Base+0x338>
   16b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b9c:	subs	fp, r3, #0
   16ba0:	ldr	r5, [pc, #500]	; 16d9c <__assert_fail@plt+0x590c>
   16ba4:	sub	sp, sp, #116	; 0x74
   16ba8:	ldr	sl, [r0, #48]	; 0x30
   16bac:	ldr	r3, [r5]
   16bb0:	mov	r6, r0
   16bb4:	mov	r7, r1
   16bb8:	mov	r4, r2
   16bbc:	and	r9, sl, #4
   16bc0:	str	r3, [sp, #108]	; 0x6c
   16bc4:	beq	16c98 <__assert_fail@plt+0x5808>
   16bc8:	ldr	r1, [pc, #464]	; 16da0 <__assert_fail@plt+0x5910>
   16bcc:	mov	r0, fp
   16bd0:	bl	11178 <strcmp@plt>
   16bd4:	cmp	r0, #0
   16bd8:	bne	16c98 <__assert_fail@plt+0x5808>
   16bdc:	cmp	r9, #0
   16be0:	bne	16cd4 <__assert_fail@plt+0x5844>
   16be4:	cmp	r4, #0
   16be8:	bge	16d88 <__assert_fail@plt+0x58f8>
   16bec:	tst	sl, #512	; 0x200
   16bf0:	bne	16d14 <__assert_fail@plt+0x5884>
   16bf4:	mov	r9, #1
   16bf8:	mov	r1, sl
   16bfc:	mov	r2, fp
   16c00:	ldr	r0, [r6, #32]
   16c04:	bl	16b5c <__assert_fail@plt+0x56cc>
   16c08:	subs	r8, r0, #0
   16c0c:	blt	16d7c <__assert_fail@plt+0x58ec>
   16c10:	ldr	sl, [r6, #48]	; 0x30
   16c14:	tst	sl, #2
   16c18:	beq	16cb4 <__assert_fail@plt+0x5824>
   16c1c:	mov	r2, sp
   16c20:	mov	r1, r8
   16c24:	mov	r0, #3
   16c28:	bl	11244 <__fxstat64@plt>
   16c2c:	cmp	r0, #0
   16c30:	bne	16d0c <__assert_fail@plt+0x587c>
   16c34:	ldrd	r0, [r7, #72]	; 0x48
   16c38:	ldrd	r2, [sp]
   16c3c:	cmp	r1, r3
   16c40:	cmpeq	r0, r2
   16c44:	bne	16d00 <__assert_fail@plt+0x5870>
   16c48:	ldrd	r0, [r7, #168]	; 0xa8
   16c4c:	ldrd	r2, [sp, #96]	; 0x60
   16c50:	cmp	r1, r3
   16c54:	cmpeq	r0, r2
   16c58:	bne	16d00 <__assert_fail@plt+0x5870>
   16c5c:	ldr	sl, [r6, #48]	; 0x30
   16c60:	tst	sl, #512	; 0x200
   16c64:	bne	16d50 <__assert_fail@plt+0x58c0>
   16c68:	mov	r0, r8
   16c6c:	bl	11400 <fchdir@plt>
   16c70:	mov	sl, r0
   16c74:	cmp	r4, #0
   16c78:	bge	16ce4 <__assert_fail@plt+0x5854>
   16c7c:	bl	11340 <__errno_location@plt>
   16c80:	mov	r4, r0
   16c84:	mov	r0, r8
   16c88:	ldr	r6, [r4]
   16c8c:	bl	11454 <close@plt>
   16c90:	str	r6, [r4]
   16c94:	b	16ce4 <__assert_fail@plt+0x5854>
   16c98:	cmp	r9, #0
   16c9c:	bne	16cd4 <__assert_fail@plt+0x5844>
   16ca0:	cmp	r4, #0
   16ca4:	movge	r8, r4
   16ca8:	blt	16bf8 <__assert_fail@plt+0x5768>
   16cac:	tst	sl, #2
   16cb0:	bne	16c1c <__assert_fail@plt+0x578c>
   16cb4:	cmp	fp, #0
   16cb8:	beq	16c60 <__assert_fail@plt+0x57d0>
   16cbc:	mov	r0, fp
   16cc0:	ldr	r1, [pc, #216]	; 16da0 <__assert_fail@plt+0x5910>
   16cc4:	bl	11178 <strcmp@plt>
   16cc8:	cmp	r0, #0
   16ccc:	bne	16c60 <__assert_fail@plt+0x57d0>
   16cd0:	b	16c1c <__assert_fail@plt+0x578c>
   16cd4:	mvn	r3, r4
   16cd8:	lsr	r3, r3, #31
   16cdc:	ands	sl, r3, sl, lsr #9
   16ce0:	bne	16d6c <__assert_fail@plt+0x58dc>
   16ce4:	ldr	r2, [sp, #108]	; 0x6c
   16ce8:	ldr	r3, [r5]
   16cec:	mov	r0, sl
   16cf0:	cmp	r2, r3
   16cf4:	bne	16d84 <__assert_fail@plt+0x58f4>
   16cf8:	add	sp, sp, #116	; 0x74
   16cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d00:	bl	11340 <__errno_location@plt>
   16d04:	mov	r3, #2
   16d08:	str	r3, [r0]
   16d0c:	mvn	sl, #0
   16d10:	b	16c74 <__assert_fail@plt+0x57e4>
   16d14:	add	r8, r6, #60	; 0x3c
   16d18:	mov	r0, r8
   16d1c:	bl	19a38 <fts_children@@Base+0x14e8>
   16d20:	subs	r9, r0, #0
   16d24:	bne	16bf8 <__assert_fail@plt+0x5768>
   16d28:	mov	r0, r8
   16d2c:	bl	19a84 <fts_children@@Base+0x1534>
   16d30:	ldr	sl, [r6, #48]	; 0x30
   16d34:	subs	r8, r0, #0
   16d38:	blt	16bf4 <__assert_fail@plt+0x5764>
   16d3c:	tst	sl, #2
   16d40:	mov	r4, r8
   16d44:	mov	r9, #1
   16d48:	beq	16c60 <__assert_fail@plt+0x57d0>
   16d4c:	b	16c1c <__assert_fail@plt+0x578c>
   16d50:	eor	r2, r9, #1
   16d54:	mov	r1, r8
   16d58:	uxtb	r2, r2
   16d5c:	mov	r0, r6
   16d60:	bl	167fc <__assert_fail@plt+0x536c>
   16d64:	mov	sl, #0
   16d68:	b	16ce4 <__assert_fail@plt+0x5854>
   16d6c:	mov	r0, r4
   16d70:	bl	11454 <close@plt>
   16d74:	mov	sl, #0
   16d78:	b	16ce4 <__assert_fail@plt+0x5854>
   16d7c:	mvn	sl, #0
   16d80:	b	16ce4 <__assert_fail@plt+0x5854>
   16d84:	bl	11208 <__stack_chk_fail@plt>
   16d88:	tst	sl, #2
   16d8c:	mov	r8, r4
   16d90:	mov	r9, #1
   16d94:	beq	16cbc <__assert_fail@plt+0x582c>
   16d98:	b	16c1c <__assert_fail@plt+0x578c>
   16d9c:	andeq	fp, r2, r8, lsl #30
   16da0:	andeq	fp, r1, r4, lsl #18
   16da4:	ldr	r3, [pc, #164]	; 16e50 <__assert_fail@plt+0x59c0>
   16da8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16dac:	and	r3, r3, r0
   16db0:	cmp	r3, #0
   16db4:	mov	sl, r1
   16db8:	mov	r8, r2
   16dbc:	beq	16e24 <__assert_fail@plt+0x5994>
   16dc0:	mov	r0, #24
   16dc4:	bl	112b0 <malloc@plt>
   16dc8:	subs	r9, r0, #0
   16dcc:	beq	16e48 <__assert_fail@plt+0x59b8>
   16dd0:	ldrd	r4, [r8, #168]	; 0xa8
   16dd4:	ldrd	r6, [r8, #72]	; 0x48
   16dd8:	str	r8, [r9, #16]
   16ddc:	strd	r4, [r9, #8]
   16de0:	ldr	r0, [sl]
   16de4:	strd	r6, [r9]
   16de8:	mov	r1, r9
   16dec:	bl	1988c <fts_children@@Base+0x133c>
   16df0:	cmp	r9, r0
   16df4:	mov	r4, r0
   16df8:	beq	16e1c <__assert_fail@plt+0x598c>
   16dfc:	mov	r0, r9
   16e00:	bl	111a8 <free@plt>
   16e04:	cmp	r4, #0
   16e08:	beq	16e48 <__assert_fail@plt+0x59b8>
   16e0c:	ldr	r2, [r4, #16]
   16e10:	mov	r3, #2
   16e14:	str	r2, [r8]
   16e18:	strh	r3, [r8, #60]	; 0x3c
   16e1c:	mov	r0, #1
   16e20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e24:	ldr	r0, [r1]
   16e28:	add	r1, r2, #72	; 0x48
   16e2c:	bl	187b4 <fts_children@@Base+0x264>
   16e30:	cmp	r0, #0
   16e34:	beq	16e1c <__assert_fail@plt+0x598c>
   16e38:	mov	r3, #2
   16e3c:	str	r8, [r8]
   16e40:	strh	r3, [r8, #60]	; 0x3c
   16e44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e48:	mov	r0, #0
   16e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e50:	andeq	r0, r0, r2, lsl #2
   16e54:	push	{r4, r5, r6, lr}
   16e58:	sub	sp, sp, #32
   16e5c:	ldr	r6, [pc, #192]	; 16f24 <__assert_fail@plt+0x5a94>
   16e60:	ldr	r3, [pc, #192]	; 16f28 <__assert_fail@plt+0x5a98>
   16e64:	ldr	ip, [r6]
   16e68:	and	r3, r3, r0
   16e6c:	cmp	r3, #0
   16e70:	str	ip, [sp, #28]
   16e74:	bne	16ecc <__assert_fail@plt+0x5a3c>
   16e78:	ldr	r3, [r2, #4]
   16e7c:	cmp	r3, #0
   16e80:	beq	16eb4 <__assert_fail@plt+0x5a24>
   16e84:	ldr	r0, [r3, #48]	; 0x30
   16e88:	cmp	r0, #0
   16e8c:	blt	16eb4 <__assert_fail@plt+0x5a24>
   16e90:	ldr	ip, [r1]
   16e94:	ldrd	r0, [ip, #16]
   16e98:	orrs	r1, r0, r1
   16e9c:	beq	16f20 <__assert_fail@plt+0x5a90>
   16ea0:	ldrd	r4, [ip]
   16ea4:	ldrd	r0, [r2, #168]	; 0xa8
   16ea8:	cmp	r5, r1
   16eac:	cmpeq	r4, r0
   16eb0:	beq	16ef8 <__assert_fail@plt+0x5a68>
   16eb4:	ldr	r2, [sp, #28]
   16eb8:	ldr	r3, [r6]
   16ebc:	cmp	r2, r3
   16ec0:	bne	16f1c <__assert_fail@plt+0x5a8c>
   16ec4:	add	sp, sp, #32
   16ec8:	pop	{r4, r5, r6, pc}
   16ecc:	ldrd	r4, [r2, #72]	; 0x48
   16ed0:	ldrd	r2, [r2, #168]	; 0xa8
   16ed4:	ldr	r0, [r1]
   16ed8:	mov	r1, sp
   16edc:	strd	r4, [sp]
   16ee0:	strd	r2, [sp, #8]
   16ee4:	bl	198e4 <fts_children@@Base+0x1394>
   16ee8:	cmp	r0, #0
   16eec:	beq	16f20 <__assert_fail@plt+0x5a90>
   16ef0:	bl	111a8 <free@plt>
   16ef4:	b	16eb4 <__assert_fail@plt+0x5a24>
   16ef8:	ldrd	r4, [r2, #72]	; 0x48
   16efc:	ldrd	r0, [ip, #8]
   16f00:	cmp	r1, r5
   16f04:	cmpeq	r0, r4
   16f08:	ldrdeq	r0, [r3, #72]	; 0x48
   16f0c:	ldrdeq	r2, [r3, #168]	; 0xa8
   16f10:	strdeq	r0, [ip, #8]
   16f14:	strdeq	r2, [ip]
   16f18:	b	16eb4 <__assert_fail@plt+0x5a24>
   16f1c:	bl	11208 <__stack_chk_fail@plt>
   16f20:	bl	11448 <abort@plt>
   16f24:	andeq	fp, r2, r8, lsl #30
   16f28:	andeq	r0, r0, r2, lsl #2
   16f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f30:	mov	r5, r0
   16f34:	ldr	r9, [r0]
   16f38:	sub	sp, sp, #60	; 0x3c
   16f3c:	ldr	r0, [r9, #12]
   16f40:	str	r1, [sp, #36]	; 0x24
   16f44:	cmp	r0, #0
   16f48:	str	r0, [sp, #48]	; 0x30
   16f4c:	beq	17248 <__assert_fail@plt+0x5db8>
   16f50:	bl	113f4 <dirfd@plt>
   16f54:	subs	r3, r0, #0
   16f58:	str	r3, [sp, #44]	; 0x2c
   16f5c:	blt	177d8 <__assert_fail@plt+0x6348>
   16f60:	ldr	r3, [r5, #44]	; 0x2c
   16f64:	cmp	r3, #0
   16f68:	beq	17520 <__assert_fail@plt+0x6090>
   16f6c:	ldr	r0, [r5, #48]	; 0x30
   16f70:	mvn	r3, #0
   16f74:	str	r3, [sp, #20]
   16f78:	mov	r3, #1
   16f7c:	str	r3, [sp, #52]	; 0x34
   16f80:	ldr	r2, [r9, #40]	; 0x28
   16f84:	ldr	r3, [r9, #28]
   16f88:	sub	r1, r2, #1
   16f8c:	str	r2, [sp, #4]
   16f90:	ldrb	r3, [r3, r1]
   16f94:	str	r1, [sp, #32]
   16f98:	mov	sl, #0
   16f9c:	cmp	r3, #47	; 0x2f
   16fa0:	addne	r3, r2, #1
   16fa4:	strne	r3, [sp, #4]
   16fa8:	strne	r2, [sp, #32]
   16fac:	ands	r0, r0, #4
   16fb0:	movne	r1, #47	; 0x2f
   16fb4:	ldrne	r3, [r5, #24]
   16fb8:	ldrne	r0, [sp, #32]
   16fbc:	streq	r0, [sp, #24]
   16fc0:	addne	r2, r3, r0
   16fc4:	strbne	r1, [r3, r0]
   16fc8:	addne	r3, r2, #1
   16fcc:	strne	r3, [sp, #24]
   16fd0:	ldr	r3, [r9, #48]	; 0x30
   16fd4:	ldr	fp, [r5, #36]	; 0x24
   16fd8:	ldr	r2, [sp, #4]
   16fdc:	add	r3, r3, #1
   16fe0:	str	sl, [sp, #40]	; 0x28
   16fe4:	sub	fp, fp, r2
   16fe8:	str	r3, [sp, #16]
   16fec:	str	sl, [sp, #28]
   16ff0:	mov	r7, sl
   16ff4:	str	sl, [sp, #8]
   16ff8:	str	r9, [sp, #12]
   16ffc:	b	1704c <__assert_fail@plt+0x5bbc>
   17000:	mov	r3, #0
   17004:	str	r3, [r4, #88]	; 0x58
   17008:	mov	r2, #2
   1700c:	mov	r3, #0
   17010:	strd	r2, [r4, #120]	; 0x78
   17014:	ldr	r3, [sp, #8]
   17018:	cmp	r3, #0
   1701c:	mov	r3, #0
   17020:	str	r3, [r4, #8]
   17024:	ldr	r3, [pc, #2148]	; 17890 <__assert_fail@plt+0x6400>
   17028:	strne	r4, [sl, #8]
   1702c:	streq	r4, [sp, #8]
   17030:	cmp	r7, r3
   17034:	beq	17150 <__assert_fail@plt+0x5cc0>
   17038:	ldr	r3, [sp, #20]
   1703c:	add	r7, r7, #1
   17040:	cmp	r7, r3
   17044:	bcs	173dc <__assert_fail@plt+0x5f4c>
   17048:	mov	sl, r4
   1704c:	ldr	r3, [sp, #12]
   17050:	ldr	r4, [r3, #12]
   17054:	cmp	r4, #0
   17058:	beq	17538 <__assert_fail@plt+0x60a8>
   1705c:	bl	11340 <__errno_location@plt>
   17060:	mov	r3, #0
   17064:	mov	r8, r0
   17068:	mov	r0, r4
   1706c:	str	r3, [r8]
   17070:	bl	113dc <readdir64@plt>
   17074:	subs	r9, r0, #0
   17078:	beq	17600 <__assert_fail@plt+0x6170>
   1707c:	ldr	r3, [r5, #48]	; 0x30
   17080:	tst	r3, #32
   17084:	bne	17094 <__assert_fail@plt+0x5c04>
   17088:	ldrb	r3, [r9, #19]
   1708c:	cmp	r3, #46	; 0x2e
   17090:	beq	171dc <__assert_fail@plt+0x5d4c>
   17094:	add	r4, r9, #19
   17098:	mov	r0, r4
   1709c:	bl	11310 <strlen@plt>
   170a0:	mov	r1, r4
   170a4:	mov	r2, r0
   170a8:	mov	r6, r0
   170ac:	mov	r0, r5
   170b0:	bl	1655c <__assert_fail@plt+0x50cc>
   170b4:	subs	r4, r0, #0
   170b8:	beq	17488 <__assert_fail@plt+0x5ff8>
   170bc:	cmp	fp, r6
   170c0:	bls	17164 <__assert_fail@plt+0x5cd4>
   170c4:	ldr	r3, [sp, #4]
   170c8:	adds	r6, r3, r6
   170cc:	bcs	17848 <__assert_fail@plt+0x63b8>
   170d0:	ldr	r0, [r5, #48]	; 0x30
   170d4:	ldr	r1, [r5]
   170d8:	ldrd	r2, [r9]
   170dc:	ldr	ip, [sp, #16]
   170e0:	tst	r0, #4
   170e4:	str	r1, [r4, #4]
   170e8:	add	r1, r4, #176	; 0xb0
   170ec:	str	ip, [r4, #48]	; 0x30
   170f0:	strd	r2, [r4, #168]	; 0xa8
   170f4:	str	r6, [r4, #40]	; 0x28
   170f8:	streq	r1, [r4, #24]
   170fc:	bne	171bc <__assert_fail@plt+0x5d2c>
   17100:	ldr	r3, [r5, #44]	; 0x2c
   17104:	cmp	r3, #0
   17108:	beq	17114 <__assert_fail@plt+0x5c84>
   1710c:	ands	r3, r0, #1024	; 0x400
   17110:	beq	17228 <__assert_fail@plt+0x5d98>
   17114:	ldrb	r2, [r9, #18]
   17118:	and	r0, r0, #24
   1711c:	cmp	r0, #24
   17120:	sub	r3, r2, #1
   17124:	beq	171fc <__assert_fail@plt+0x5d6c>
   17128:	mov	r2, #11
   1712c:	cmp	r3, #11
   17130:	strh	r2, [r4, #60]	; 0x3c
   17134:	bhi	17000 <__assert_fail@plt+0x5b70>
   17138:	ldr	r2, [pc, #1876]	; 17894 <__assert_fail@plt+0x6404>
   1713c:	ldr	r1, [r2, r3, lsl #2]
   17140:	mov	r2, #2
   17144:	mov	r3, #0
   17148:	str	r1, [r4, #88]	; 0x58
   1714c:	b	17010 <__assert_fail@plt+0x5b80>
   17150:	ldr	r6, [r5, #44]	; 0x2c
   17154:	cmp	r6, #0
   17158:	beq	17390 <__assert_fail@plt+0x5f00>
   1715c:	ldr	r7, [pc, #1844]	; 17898 <__assert_fail@plt+0x6408>
   17160:	b	17048 <__assert_fail@plt+0x5bb8>
   17164:	ldr	r3, [sp, #32]
   17168:	add	r1, r5, #36	; 0x24
   1716c:	add	r2, r3, #2
   17170:	add	r2, r2, r6
   17174:	add	r0, r5, #24
   17178:	ldr	fp, [r5, #24]
   1717c:	bl	16a60 <__assert_fail@plt+0x55d0>
   17180:	cmp	r0, #0
   17184:	beq	17488 <__assert_fail@plt+0x5ff8>
   17188:	ldr	r3, [r5, #24]
   1718c:	cmp	r3, fp
   17190:	beq	17240 <__assert_fail@plt+0x5db0>
   17194:	ldr	r2, [r5, #48]	; 0x30
   17198:	tst	r2, #4
   1719c:	ldrne	r2, [sp, #4]
   171a0:	addne	r3, r3, r2
   171a4:	strne	r3, [sp, #24]
   171a8:	ldr	fp, [r5, #36]	; 0x24
   171ac:	ldr	r3, [sp, #4]
   171b0:	str	r0, [sp, #28]
   171b4:	sub	fp, fp, r3
   171b8:	b	170c4 <__assert_fail@plt+0x5c34>
   171bc:	ldr	r3, [r4, #28]
   171c0:	ldr	r2, [r4, #52]	; 0x34
   171c4:	str	r3, [r4, #24]
   171c8:	add	r2, r2, #1
   171cc:	ldr	r0, [sp, #24]
   171d0:	bl	1119c <memmove@plt>
   171d4:	ldr	r0, [r5, #48]	; 0x30
   171d8:	b	17100 <__assert_fail@plt+0x5c70>
   171dc:	ldrb	r3, [r9, #20]
   171e0:	cmp	r3, #0
   171e4:	beq	171f4 <__assert_fail@plt+0x5d64>
   171e8:	ldrh	r3, [r9, #20]
   171ec:	cmp	r3, #46	; 0x2e
   171f0:	bne	17094 <__assert_fail@plt+0x5c04>
   171f4:	mov	r4, sl
   171f8:	b	17048 <__assert_fail@plt+0x5bb8>
   171fc:	tst	r2, #251	; 0xfb
   17200:	beq	17128 <__assert_fail@plt+0x5c98>
   17204:	mov	r2, #11
   17208:	cmp	r3, #11
   1720c:	strh	r2, [r4, #60]	; 0x3c
   17210:	bls	17470 <__assert_fail@plt+0x5fe0>
   17214:	mov	r3, #0
   17218:	str	r3, [r4, #88]	; 0x58
   1721c:	mov	r2, #1
   17220:	mov	r3, #0
   17224:	b	17010 <__assert_fail@plt+0x5b80>
   17228:	mov	r2, r4
   1722c:	add	r1, r5, #48	; 0x30
   17230:	ldr	r0, [r5, #32]
   17234:	bl	168d4 <__assert_fail@plt+0x5444>
   17238:	strh	r0, [r4, #60]	; 0x3c
   1723c:	b	17014 <__assert_fail@plt+0x5b84>
   17240:	ldr	r0, [sp, #28]
   17244:	b	171a8 <__assert_fail@plt+0x5d18>
   17248:	ldr	r3, [r5, #48]	; 0x30
   1724c:	ldr	r1, [r9, #24]
   17250:	and	r2, r3, #516	; 0x204
   17254:	cmp	r2, #512	; 0x200
   17258:	mvnne	r0, #99	; 0x63
   1725c:	ldreq	r0, [r5, #32]
   17260:	ands	ip, r3, #16
   17264:	beq	17274 <__assert_fail@plt+0x5de4>
   17268:	tst	r3, #1
   1726c:	moveq	ip, #32768	; 0x8000
   17270:	bne	174d8 <__assert_fail@plt+0x6048>
   17274:	lsl	r2, r3, #7
   17278:	and	r2, r2, #262144	; 0x40000
   1727c:	orr	r2, r2, ip
   17280:	orr	r2, r2, #540672	; 0x84000
   17284:	orr	r2, r2, #2304	; 0x900
   17288:	bl	19b00 <fts_children@@Base+0x15b0>
   1728c:	subs	r3, r0, #0
   17290:	str	r3, [sp, #44]	; 0x2c
   17294:	movlt	r3, #0
   17298:	strlt	r3, [r9, #12]
   1729c:	blt	177ac <__assert_fail@plt+0x631c>
   172a0:	bl	113e8 <fdopendir@plt>
   172a4:	subs	r4, r0, #0
   172a8:	beq	17790 <__assert_fail@plt+0x6300>
   172ac:	ldrh	r3, [r9, #60]	; 0x3c
   172b0:	str	r4, [r9, #12]
   172b4:	cmp	r3, #11
   172b8:	beq	17710 <__assert_fail@plt+0x6280>
   172bc:	ldr	r0, [r5, #48]	; 0x30
   172c0:	tst	r0, #256	; 0x100
   172c4:	bne	17684 <__assert_fail@plt+0x61f4>
   172c8:	ldr	r2, [r5, #44]	; 0x2c
   172cc:	ldr	r3, [pc, #1480]	; 1789c <__assert_fail@plt+0x640c>
   172d0:	cmp	r2, #0
   172d4:	mvnne	r3, #0
   172d8:	str	r3, [sp, #20]
   172dc:	ldr	r3, [sp, #36]	; 0x24
   172e0:	cmp	r3, #2
   172e4:	beq	17674 <__assert_fail@plt+0x61e4>
   172e8:	ldr	r3, [r5, #48]	; 0x30
   172ec:	and	r3, r3, #56	; 0x38
   172f0:	cmp	r3, #24
   172f4:	beq	174e8 <__assert_fail@plt+0x6058>
   172f8:	ldr	r3, [sp, #36]	; 0x24
   172fc:	mov	r6, #1
   17300:	sub	r7, r3, #3
   17304:	clz	r7, r7
   17308:	lsr	r7, r7, #5
   1730c:	ldr	r3, [r5, #48]	; 0x30
   17310:	tst	r3, #512	; 0x200
   17314:	bne	1772c <__assert_fail@plt+0x629c>
   17318:	mov	r3, #0
   1731c:	ldr	r2, [sp, #44]	; 0x2c
   17320:	mov	r1, r9
   17324:	mov	r0, r5
   17328:	bl	16b98 <__assert_fail@plt+0x5708>
   1732c:	cmp	r0, #0
   17330:	beq	17528 <__assert_fail@plt+0x6098>
   17334:	ldrh	r4, [r9, #62]	; 0x3e
   17338:	tst	r7, r6
   1733c:	ldr	r6, [r9, #12]
   17340:	orr	r4, r4, #1
   17344:	beq	17354 <__assert_fail@plt+0x5ec4>
   17348:	bl	11340 <__errno_location@plt>
   1734c:	ldr	r3, [r0]
   17350:	str	r3, [r9, #32]
   17354:	strh	r4, [r9, #62]	; 0x3e
   17358:	mov	r0, r6
   1735c:	bl	1146c <closedir@plt>
   17360:	ldr	r3, [sp, #44]	; 0x2c
   17364:	ldr	r0, [r5, #48]	; 0x30
   17368:	mvn	r2, r3
   1736c:	mov	r3, #0
   17370:	lsr	r2, r2, #31
   17374:	ands	r2, r2, r0, lsr #9
   17378:	str	r3, [r9, #12]
   1737c:	bne	17810 <__assert_fail@plt+0x6380>
   17380:	mov	r3, #0
   17384:	str	r3, [r9, #12]
   17388:	str	r3, [sp, #52]	; 0x34
   1738c:	b	16f80 <__assert_fail@plt+0x5af0>
   17390:	ldr	r1, [sp, #44]	; 0x2c
   17394:	ldr	r0, [sp, #12]
   17398:	bl	16634 <__assert_fail@plt+0x51a4>
   1739c:	ldr	r3, [pc, #1276]	; 178a0 <__assert_fail@plt+0x6410>
   173a0:	cmp	r0, r3
   173a4:	beq	173c8 <__assert_fail@plt+0x5f38>
   173a8:	ldr	r3, [pc, #1268]	; 178a4 <__assert_fail@plt+0x6414>
   173ac:	cmp	r0, r3
   173b0:	beq	173c8 <__assert_fail@plt+0x5f38>
   173b4:	ldr	r3, [pc, #1260]	; 178a8 <__assert_fail@plt+0x6418>
   173b8:	cmp	r0, r3
   173bc:	movne	r3, #1
   173c0:	strne	r3, [sp, #40]	; 0x28
   173c4:	bne	1715c <__assert_fail@plt+0x5ccc>
   173c8:	ldr	r3, [sp, #20]
   173cc:	add	r7, r7, #1
   173d0:	cmp	r7, r3
   173d4:	str	r6, [sp, #40]	; 0x28
   173d8:	bcc	17048 <__assert_fail@plt+0x5bb8>
   173dc:	ldr	r3, [sp, #28]
   173e0:	ldr	r9, [sp, #12]
   173e4:	cmp	r3, #0
   173e8:	beq	17548 <__assert_fail@plt+0x60b8>
   173ec:	ldr	r3, [r5, #4]
   173f0:	ldr	r1, [r5, #24]
   173f4:	cmp	r3, #0
   173f8:	beq	17428 <__assert_fail@plt+0x5f98>
   173fc:	ldr	r2, [r3, #24]
   17400:	add	r0, r3, #176	; 0xb0
   17404:	cmp	r2, r0
   17408:	ldrne	r0, [r3, #28]
   1740c:	str	r1, [r3, #28]
   17410:	subne	r2, r2, r0
   17414:	addne	r2, r1, r2
   17418:	strne	r2, [r3, #24]
   1741c:	ldr	r3, [r3, #8]
   17420:	cmp	r3, #0
   17424:	bne	173fc <__assert_fail@plt+0x5f6c>
   17428:	ldr	r3, [sp, #8]
   1742c:	b	1745c <__assert_fail@plt+0x5fcc>
   17430:	ldr	r2, [r3, #24]
   17434:	cmp	r2, r0
   17438:	ldrne	r0, [r3, #28]
   1743c:	str	r1, [r3, #28]
   17440:	subne	r2, r2, r0
   17444:	addne	r2, r1, r2
   17448:	strne	r2, [r3, #24]
   1744c:	ldr	r2, [r3, #8]
   17450:	cmp	r2, #0
   17454:	ldreq	r2, [r3, #4]
   17458:	mov	r3, r2
   1745c:	ldr	r2, [r3, #48]	; 0x30
   17460:	add	r0, r3, #176	; 0xb0
   17464:	cmp	r2, #0
   17468:	bge	17430 <__assert_fail@plt+0x5fa0>
   1746c:	b	17548 <__assert_fail@plt+0x60b8>
   17470:	ldr	r2, [pc, #1052]	; 17894 <__assert_fail@plt+0x6404>
   17474:	ldr	r1, [r2, r3, lsl #2]
   17478:	mov	r2, #1
   1747c:	mov	r3, #0
   17480:	str	r1, [r4, #88]	; 0x58
   17484:	b	17010 <__assert_fail@plt+0x5b80>
   17488:	ldr	r9, [sp, #12]
   1748c:	mov	r0, r4
   17490:	ldr	r4, [r8]
   17494:	bl	111a8 <free@plt>
   17498:	ldr	r0, [sp, #8]
   1749c:	bl	165d0 <__assert_fail@plt+0x5140>
   174a0:	ldr	r0, [r9, #12]
   174a4:	bl	1146c <closedir@plt>
   174a8:	ldr	r3, [r5, #48]	; 0x30
   174ac:	mov	r2, #0
   174b0:	orr	r3, r3, #16384	; 0x4000
   174b4:	mov	r1, #7
   174b8:	str	r2, [r9, #12]
   174bc:	strh	r1, [r9, #60]	; 0x3c
   174c0:	str	r2, [sp, #8]
   174c4:	str	r3, [r5, #48]	; 0x30
   174c8:	str	r4, [r8]
   174cc:	ldr	r0, [sp, #8]
   174d0:	add	sp, sp, #60	; 0x3c
   174d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d8:	ldr	ip, [r9, #48]	; 0x30
   174dc:	cmp	ip, #0
   174e0:	movne	ip, #32768	; 0x8000
   174e4:	b	17274 <__assert_fail@plt+0x5de4>
   174e8:	ldr	r3, [r9, #92]	; 0x5c
   174ec:	cmp	r3, #2
   174f0:	bne	172f8 <__assert_fail@plt+0x5e68>
   174f4:	ldr	r1, [sp, #44]	; 0x2c
   174f8:	mov	r0, r9
   174fc:	bl	16768 <__assert_fail@plt+0x52d8>
   17500:	cmp	r0, #0
   17504:	beq	172f8 <__assert_fail@plt+0x5e68>
   17508:	ldr	r3, [sp, #36]	; 0x24
   1750c:	cmp	r3, #3
   17510:	bne	17674 <__assert_fail@plt+0x61e4>
   17514:	mov	r6, #0
   17518:	mov	r7, #1
   1751c:	b	1730c <__assert_fail@plt+0x5e7c>
   17520:	ldr	r3, [pc, #884]	; 1789c <__assert_fail@plt+0x640c>
   17524:	str	r3, [sp, #20]
   17528:	mov	r3, #1
   1752c:	str	r3, [sp, #52]	; 0x34
   17530:	ldr	r0, [r5, #48]	; 0x30
   17534:	b	16f80 <__assert_fail@plt+0x5af0>
   17538:	mov	r9, r3
   1753c:	ldr	r3, [sp, #28]
   17540:	cmp	r3, #0
   17544:	bne	173ec <__assert_fail@plt+0x5f5c>
   17548:	ldr	r3, [r5, #48]	; 0x30
   1754c:	tst	r3, #4
   17550:	beq	1757c <__assert_fail@plt+0x60ec>
   17554:	ldr	r3, [r5, #36]	; 0x24
   17558:	ldr	r2, [sp, #4]
   1755c:	cmp	r7, #0
   17560:	cmpne	r3, r2
   17564:	ldreq	r3, [sp, #24]
   17568:	subeq	r3, r3, #1
   1756c:	streq	r3, [sp, #24]
   17570:	ldr	r2, [sp, #24]
   17574:	mov	r3, #0
   17578:	strb	r3, [r2]
   1757c:	ldrd	r2, [sp, #48]	; 0x30
   17580:	cmp	r2, #0
   17584:	movne	r3, #0
   17588:	cmp	r3, #0
   1758c:	beq	175c4 <__assert_fail@plt+0x6134>
   17590:	ldr	r3, [sp, #36]	; 0x24
   17594:	cmp	r7, #0
   17598:	cmpne	r3, #1
   1759c:	bne	175cc <__assert_fail@plt+0x613c>
   175a0:	ldr	r3, [r9, #48]	; 0x30
   175a4:	cmp	r3, #0
   175a8:	bne	17770 <__assert_fail@plt+0x62e0>
   175ac:	mov	r0, r5
   175b0:	bl	16884 <__assert_fail@plt+0x53f4>
   175b4:	adds	r0, r0, #0
   175b8:	movne	r0, #1
   175bc:	cmp	r0, #0
   175c0:	bne	17820 <__assert_fail@plt+0x6390>
   175c4:	cmp	r7, #0
   175c8:	beq	176d4 <__assert_fail@plt+0x6244>
   175cc:	ldr	r3, [sp, #40]	; 0x28
   175d0:	cmp	r3, #0
   175d4:	bne	17644 <__assert_fail@plt+0x61b4>
   175d8:	ldr	r3, [r5, #44]	; 0x2c
   175dc:	cmp	r3, #0
   175e0:	cmpne	r7, #1
   175e4:	beq	174cc <__assert_fail@plt+0x603c>
   175e8:	mov	r2, r7
   175ec:	ldr	r1, [sp, #8]
   175f0:	mov	r0, r5
   175f4:	add	sp, sp, #60	; 0x3c
   175f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175fc:	b	16484 <__assert_fail@plt+0x4ff4>
   17600:	ldr	r3, [r8]
   17604:	ldr	r9, [sp, #12]
   17608:	cmp	r3, #0
   1760c:	beq	17628 <__assert_fail@plt+0x6198>
   17610:	ldr	r2, [sp, #48]	; 0x30
   17614:	str	r3, [r9, #32]
   17618:	orrs	r2, r2, r7
   1761c:	moveq	r2, #4
   17620:	movne	r2, #7
   17624:	strh	r2, [r9, #60]	; 0x3c
   17628:	ldr	r0, [r9, #12]
   1762c:	cmp	r0, #0
   17630:	beq	1753c <__assert_fail@plt+0x60ac>
   17634:	bl	1146c <closedir@plt>
   17638:	mov	r3, #0
   1763c:	str	r3, [r9, #12]
   17640:	b	1753c <__assert_fail@plt+0x60ac>
   17644:	ldr	r3, [pc, #608]	; 178ac <__assert_fail@plt+0x641c>
   17648:	mov	r2, r7
   1764c:	str	r3, [r5, #44]	; 0x2c
   17650:	ldr	r1, [sp, #8]
   17654:	mov	r0, r5
   17658:	bl	16484 <__assert_fail@plt+0x4ff4>
   1765c:	mov	r3, #0
   17660:	str	r3, [r5, #44]	; 0x2c
   17664:	str	r0, [sp, #8]
   17668:	ldr	r0, [sp, #8]
   1766c:	add	sp, sp, #60	; 0x3c
   17670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17674:	mov	r3, #0
   17678:	str	r3, [sp, #52]	; 0x34
   1767c:	ldr	r0, [r5, #48]	; 0x30
   17680:	b	16f80 <__assert_fail@plt+0x5af0>
   17684:	add	r4, r5, #56	; 0x38
   17688:	mov	r1, r4
   1768c:	mov	r2, r9
   17690:	bl	16e54 <__assert_fail@plt+0x59c4>
   17694:	mov	r3, #0
   17698:	mov	r2, r9
   1769c:	add	r1, r5, #48	; 0x30
   176a0:	ldr	r0, [r5, #32]
   176a4:	bl	168d4 <__assert_fail@plt+0x5444>
   176a8:	mov	r1, r4
   176ac:	mov	r2, r9
   176b0:	ldr	r0, [r5, #48]	; 0x30
   176b4:	bl	16da4 <__assert_fail@plt+0x5914>
   176b8:	subs	r4, r0, #0
   176bc:	bne	172c8 <__assert_fail@plt+0x5e38>
   176c0:	bl	11340 <__errno_location@plt>
   176c4:	mov	r3, #12
   176c8:	str	r4, [sp, #8]
   176cc:	str	r3, [r0]
   176d0:	b	174cc <__assert_fail@plt+0x603c>
   176d4:	ldr	r3, [sp, #36]	; 0x24
   176d8:	cmp	r3, #3
   176dc:	bne	176f4 <__assert_fail@plt+0x6264>
   176e0:	ldrh	r3, [r9, #60]	; 0x3c
   176e4:	cmp	r3, #4
   176e8:	cmpne	r3, #7
   176ec:	movne	r3, #6
   176f0:	strhne	r3, [r9, #60]	; 0x3c
   176f4:	ldr	r0, [sp, #8]
   176f8:	bl	165d0 <__assert_fail@plt+0x5140>
   176fc:	mov	r3, #0
   17700:	str	r3, [sp, #8]
   17704:	ldr	r0, [sp, #8]
   17708:	add	sp, sp, #60	; 0x3c
   1770c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17710:	mov	r3, #0
   17714:	mov	r2, r9
   17718:	add	r1, r5, #48	; 0x30
   1771c:	ldr	r0, [r5, #32]
   17720:	bl	168d4 <__assert_fail@plt+0x5444>
   17724:	strh	r0, [r9, #60]	; 0x3c
   17728:	b	172c8 <__assert_fail@plt+0x5e38>
   1772c:	ldr	r0, [sp, #44]	; 0x2c
   17730:	mov	r2, #3
   17734:	ldr	r1, [pc, #372]	; 178b0 <__assert_fail@plt+0x6420>
   17738:	bl	19c40 <fts_children@@Base+0x16f0>
   1773c:	subs	r3, r0, #0
   17740:	str	r3, [sp, #44]	; 0x2c
   17744:	bge	17318 <__assert_fail@plt+0x5e88>
   17748:	ldrh	r4, [r9, #62]	; 0x3e
   1774c:	tst	r7, r6
   17750:	ldr	r6, [r9, #12]
   17754:	orr	r4, r4, #1
   17758:	bne	17348 <__assert_fail@plt+0x5eb8>
   1775c:	strh	r4, [r9, #62]	; 0x3e
   17760:	mov	r0, r6
   17764:	bl	1146c <closedir@plt>
   17768:	ldr	r0, [r5, #48]	; 0x30
   1776c:	b	17380 <__assert_fail@plt+0x5ef0>
   17770:	ldr	r3, [pc, #316]	; 178b4 <__assert_fail@plt+0x6424>
   17774:	mvn	r2, #0
   17778:	ldr	r1, [r9, #4]
   1777c:	mov	r0, r5
   17780:	bl	16b98 <__assert_fail@plt+0x5708>
   17784:	adds	r0, r0, #0
   17788:	movne	r0, #1
   1778c:	b	175bc <__assert_fail@plt+0x612c>
   17790:	bl	11340 <__errno_location@plt>
   17794:	mov	r5, r0
   17798:	ldr	r0, [sp, #44]	; 0x2c
   1779c:	ldr	r6, [r5]
   177a0:	bl	11454 <close@plt>
   177a4:	str	r6, [r5]
   177a8:	str	r4, [r9, #12]
   177ac:	ldr	r3, [sp, #36]	; 0x24
   177b0:	cmp	r3, #3
   177b4:	bne	176fc <__assert_fail@plt+0x626c>
   177b8:	mov	r3, #4
   177bc:	strh	r3, [r9, #60]	; 0x3c
   177c0:	bl	11340 <__errno_location@plt>
   177c4:	mov	r3, #0
   177c8:	str	r3, [sp, #8]
   177cc:	ldr	r3, [r0]
   177d0:	str	r3, [r9, #32]
   177d4:	b	174cc <__assert_fail@plt+0x603c>
   177d8:	ldr	r0, [r9, #12]
   177dc:	bl	1146c <closedir@plt>
   177e0:	ldr	r3, [sp, #36]	; 0x24
   177e4:	mov	r4, #0
   177e8:	cmp	r3, #3
   177ec:	str	r4, [r9, #12]
   177f0:	bne	176fc <__assert_fail@plt+0x626c>
   177f4:	mov	r3, #4
   177f8:	strh	r3, [r9, #60]	; 0x3c
   177fc:	bl	11340 <__errno_location@plt>
   17800:	str	r4, [sp, #8]
   17804:	ldr	r3, [r0]
   17808:	str	r3, [r9, #32]
   1780c:	b	174cc <__assert_fail@plt+0x603c>
   17810:	ldr	r0, [sp, #44]	; 0x2c
   17814:	bl	11454 <close@plt>
   17818:	ldr	r0, [r5, #48]	; 0x30
   1781c:	b	17380 <__assert_fail@plt+0x5ef0>
   17820:	ldr	r3, [r5, #48]	; 0x30
   17824:	mov	r2, #7
   17828:	orr	r3, r3, #16384	; 0x4000
   1782c:	strh	r2, [r9, #60]	; 0x3c
   17830:	ldr	r0, [sp, #8]
   17834:	str	r3, [r5, #48]	; 0x30
   17838:	bl	165d0 <__assert_fail@plt+0x5140>
   1783c:	mov	r3, #0
   17840:	str	r3, [sp, #8]
   17844:	b	174cc <__assert_fail@plt+0x603c>
   17848:	ldr	r9, [sp, #12]
   1784c:	mov	r0, r4
   17850:	bl	111a8 <free@plt>
   17854:	ldr	r0, [sp, #8]
   17858:	bl	165d0 <__assert_fail@plt+0x5140>
   1785c:	ldr	r0, [r9, #12]
   17860:	bl	1146c <closedir@plt>
   17864:	ldr	r3, [r5, #48]	; 0x30
   17868:	mov	r2, #0
   1786c:	orr	r3, r3, #16384	; 0x4000
   17870:	mov	r0, #7
   17874:	mov	r1, #36	; 0x24
   17878:	str	r2, [r9, #12]
   1787c:	strh	r0, [r9, #60]	; 0x3c
   17880:	str	r2, [sp, #8]
   17884:	str	r3, [r5, #48]	; 0x30
   17888:	str	r1, [r8]
   1788c:	b	174cc <__assert_fail@plt+0x603c>
   17890:	andeq	r2, r0, r0, lsl r7
   17894:	ldrdeq	fp, [r1], -r4
   17898:	andeq	r2, r0, r1, lsl r7
   1789c:	andeq	r8, r1, r0, lsr #13
   178a0:	andeq	r6, r0, r9, ror #18
   178a4:			; <UNDEFINED> instruction: 0x01021994
   178a8:			; <UNDEFINED> instruction: 0xff534d42
   178ac:	andeq	r6, r1, r4, asr r4
   178b0:	andeq	r0, r0, r6, lsl #8
   178b4:	andeq	fp, r1, r4, lsl #18

000178b8 <fts_open@@Base>:
   178b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178bc:	bic	r5, r1, #8128	; 0x1fc0
   178c0:	bic	r5, r5, #63	; 0x3f
   178c4:	cmp	r5, #0
   178c8:	sub	sp, sp, #20
   178cc:	bne	17bf4 <fts_open@@Base+0x33c>
   178d0:	and	r3, r1, #516	; 0x204
   178d4:	cmp	r3, #516	; 0x204
   178d8:	mov	r7, r1
   178dc:	beq	17b88 <fts_open@@Base+0x2d0>
   178e0:	ands	r5, r1, #18
   178e4:	beq	17b88 <fts_open@@Base+0x2d0>
   178e8:	mov	r6, r0
   178ec:	mov	r1, #1
   178f0:	mov	r0, #96	; 0x60
   178f4:	mov	r9, r2
   178f8:	bl	1113c <calloc@plt>
   178fc:	subs	r5, r0, #0
   17900:	beq	17b4c <fts_open@@Base+0x294>
   17904:	tst	r7, #2
   17908:	bicne	r3, r7, #512	; 0x200
   1790c:	orrne	r3, r3, #4
   17910:	strne	r3, [r5, #48]	; 0x30
   17914:	ldr	r3, [r6]
   17918:	streq	r7, [r5, #48]	; 0x30
   1791c:	mvn	r2, #99	; 0x63
   17920:	cmp	r3, #0
   17924:	str	r9, [r5, #44]	; 0x2c
   17928:	str	r2, [r5, #32]
   1792c:	beq	17c10 <fts_open@@Base+0x358>
   17930:	mov	r8, r6
   17934:	mov	r4, #0
   17938:	mov	r0, r3
   1793c:	bl	11310 <strlen@plt>
   17940:	ldr	r3, [r8, #4]!
   17944:	cmp	r4, r0
   17948:	movcc	r4, r0
   1794c:	cmp	r3, #0
   17950:	bne	17938 <fts_open@@Base+0x80>
   17954:	add	r2, r4, #1
   17958:	cmp	r2, #4096	; 0x1000
   1795c:	movcc	r2, #4096	; 0x1000
   17960:	add	r1, r5, #36	; 0x24
   17964:	add	r0, r5, #24
   17968:	bl	16a60 <__assert_fail@plt+0x55d0>
   1796c:	subs	fp, r0, #0
   17970:	beq	17b70 <fts_open@@Base+0x2b8>
   17974:	ldr	sl, [r6]
   17978:	cmp	sl, #0
   1797c:	beq	17ba0 <fts_open@@Base+0x2e8>
   17980:	mov	r2, #0
   17984:	ldr	r1, [pc, #704]	; 17c4c <fts_open@@Base+0x394>
   17988:	mov	r0, r5
   1798c:	bl	1655c <__assert_fail@plt+0x50cc>
   17990:	subs	sl, r0, #0
   17994:	beq	17b68 <fts_open@@Base+0x2b0>
   17998:	mvn	r3, #0
   1799c:	cmp	r9, #0
   179a0:	str	r3, [sl, #48]	; 0x30
   179a4:	str	r3, [sl, #56]	; 0x38
   179a8:	ldr	r4, [r6]
   179ac:	beq	179bc <fts_open@@Base+0x104>
   179b0:	ldr	fp, [r5, #48]	; 0x30
   179b4:	lsr	fp, fp, #10
   179b8:	and	fp, fp, #1
   179bc:	cmp	r4, #0
   179c0:	beq	17c44 <fts_open@@Base+0x38c>
   179c4:	lsr	r7, r7, #12
   179c8:	mov	r3, #0
   179cc:	eor	r7, r7, #1
   179d0:	and	r2, r7, #1
   179d4:	str	r3, [sp, #8]
   179d8:	mov	r8, r3
   179dc:	mov	r7, r3
   179e0:	add	r3, r5, #48	; 0x30
   179e4:	str	r2, [sp, #4]
   179e8:	str	r3, [sp, #12]
   179ec:	b	17a24 <fts_open@@Base+0x16c>
   179f0:	cmp	r9, r1
   179f4:	mov	r0, #2
   179f8:	mov	r1, #0
   179fc:	mov	r3, #11
   17a00:	strd	r0, [r4, #120]	; 0x78
   17a04:	strh	r3, [r4, #60]	; 0x3c
   17a08:	beq	17be0 <fts_open@@Base+0x328>
   17a0c:	str	r7, [r4, #8]
   17a10:	mov	r7, r4
   17a14:	ldr	r4, [r6, #4]!
   17a18:	add	r8, r8, #1
   17a1c:	cmp	r4, #0
   17a20:	beq	17ad0 <fts_open@@Base+0x218>
   17a24:	mov	r0, r4
   17a28:	bl	11310 <strlen@plt>
   17a2c:	ldr	r3, [sp, #4]
   17a30:	cmp	r0, #2
   17a34:	movls	r3, #0
   17a38:	andhi	r3, r3, #1
   17a3c:	cmp	r3, #0
   17a40:	mov	r2, r0
   17a44:	bne	17bb0 <fts_open@@Base+0x2f8>
   17a48:	mov	r1, r4
   17a4c:	mov	r0, r5
   17a50:	bl	1655c <__assert_fail@plt+0x50cc>
   17a54:	subs	r4, r0, #0
   17a58:	beq	17b58 <fts_open@@Base+0x2a0>
   17a5c:	cmp	r7, #0
   17a60:	moveq	r3, #0
   17a64:	andne	r3, fp, #1
   17a68:	add	r2, r4, #176	; 0xb0
   17a6c:	mov	r1, #0
   17a70:	cmp	r3, #0
   17a74:	str	r1, [r4, #48]	; 0x30
   17a78:	str	sl, [r4, #4]
   17a7c:	str	r2, [r4, #24]
   17a80:	bne	179f0 <fts_open@@Base+0x138>
   17a84:	mov	r2, r4
   17a88:	ldr	r1, [sp, #12]
   17a8c:	ldr	r0, [r5, #32]
   17a90:	bl	168d4 <__assert_fail@plt+0x5444>
   17a94:	cmp	r9, #0
   17a98:	strh	r0, [r4, #60]	; 0x3c
   17a9c:	bne	17a0c <fts_open@@Base+0x154>
   17aa0:	cmp	r7, #0
   17aa4:	str	r9, [r4, #8]
   17aa8:	streq	r4, [sp, #8]
   17aac:	moveq	r7, r4
   17ab0:	beq	17a14 <fts_open@@Base+0x15c>
   17ab4:	ldr	r3, [sp, #8]
   17ab8:	str	r4, [sp, #8]
   17abc:	str	r4, [r3, #8]
   17ac0:	ldr	r4, [r6, #4]!
   17ac4:	add	r8, r8, #1
   17ac8:	cmp	r4, #0
   17acc:	bne	17a24 <fts_open@@Base+0x16c>
   17ad0:	cmp	r9, #0
   17ad4:	cmpne	r8, #1
   17ad8:	bls	17af0 <fts_open@@Base+0x238>
   17adc:	mov	r1, r7
   17ae0:	mov	r2, r8
   17ae4:	mov	r0, r5
   17ae8:	bl	16484 <__assert_fail@plt+0x4ff4>
   17aec:	mov	r7, r0
   17af0:	mov	r2, #0
   17af4:	ldr	r1, [pc, #336]	; 17c4c <fts_open@@Base+0x394>
   17af8:	mov	r0, r5
   17afc:	bl	1655c <__assert_fail@plt+0x50cc>
   17b00:	cmp	r0, #0
   17b04:	str	r0, [r5]
   17b08:	beq	17b58 <fts_open@@Base+0x2a0>
   17b0c:	mov	r2, #1
   17b10:	mov	r3, #9
   17b14:	str	r7, [r0, #8]
   17b18:	str	r2, [r0, #48]	; 0x30
   17b1c:	strh	r3, [r0, #60]	; 0x3c
   17b20:	add	r1, r5, #56	; 0x38
   17b24:	ldr	r0, [r5, #48]	; 0x30
   17b28:	bl	16adc <__assert_fail@plt+0x564c>
   17b2c:	cmp	r0, #0
   17b30:	beq	17b58 <fts_open@@Base+0x2a0>
   17b34:	ldr	r1, [r5, #48]	; 0x30
   17b38:	tst	r1, #516	; 0x204
   17b3c:	beq	17c18 <fts_open@@Base+0x360>
   17b40:	mvn	r1, #0
   17b44:	add	r0, r5, #60	; 0x3c
   17b48:	bl	19a0c <fts_children@@Base+0x14bc>
   17b4c:	mov	r0, r5
   17b50:	add	sp, sp, #20
   17b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b58:	mov	r0, r7
   17b5c:	bl	165d0 <__assert_fail@plt+0x5140>
   17b60:	mov	r0, sl
   17b64:	bl	111a8 <free@plt>
   17b68:	ldr	r0, [r5, #24]
   17b6c:	bl	111a8 <free@plt>
   17b70:	mov	r0, r5
   17b74:	bl	111a8 <free@plt>
   17b78:	mov	r5, #0
   17b7c:	mov	r0, r5
   17b80:	add	sp, sp, #20
   17b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b88:	bl	11340 <__errno_location@plt>
   17b8c:	mov	r3, #22
   17b90:	str	r3, [r0]
   17b94:	mov	r0, r5
   17b98:	add	sp, sp, #20
   17b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba0:	cmp	r9, #0
   17ba4:	beq	17c3c <fts_open@@Base+0x384>
   17ba8:	mov	r4, sl
   17bac:	b	179b0 <fts_open@@Base+0xf8>
   17bb0:	sub	r1, r0, #1
   17bb4:	add	r3, r4, r1
   17bb8:	ldrb	r1, [r4, r1]
   17bbc:	cmp	r1, #47	; 0x2f
   17bc0:	bne	17a48 <fts_open@@Base+0x190>
   17bc4:	ldrb	r1, [r3, #-1]!
   17bc8:	cmp	r1, #47	; 0x2f
   17bcc:	bne	17a48 <fts_open@@Base+0x190>
   17bd0:	sub	r2, r2, #1
   17bd4:	cmp	r2, #1
   17bd8:	bne	17bc4 <fts_open@@Base+0x30c>
   17bdc:	b	17a48 <fts_open@@Base+0x190>
   17be0:	ldr	r3, [sp, #8]
   17be4:	str	r9, [r4, #8]
   17be8:	str	r4, [sp, #8]
   17bec:	str	r4, [r3, #8]
   17bf0:	b	17ac0 <fts_open@@Base+0x208>
   17bf4:	bl	11340 <__errno_location@plt>
   17bf8:	mov	r5, #0
   17bfc:	mov	r3, #22
   17c00:	str	r3, [r0]
   17c04:	mov	r0, r5
   17c08:	add	sp, sp, #20
   17c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c10:	mov	r2, #4096	; 0x1000
   17c14:	b	17960 <fts_open@@Base+0xa8>
   17c18:	ldr	r2, [pc, #48]	; 17c50 <fts_open@@Base+0x398>
   17c1c:	ldr	r0, [r5, #32]
   17c20:	bl	16b5c <__assert_fail@plt+0x56cc>
   17c24:	cmp	r0, #0
   17c28:	str	r0, [r5, #28]
   17c2c:	ldrlt	r3, [r5, #48]	; 0x30
   17c30:	orrlt	r3, r3, #4
   17c34:	strlt	r3, [r5, #48]	; 0x30
   17c38:	b	17b40 <fts_open@@Base+0x288>
   17c3c:	mov	r7, sl
   17c40:	b	17af0 <fts_open@@Base+0x238>
   17c44:	mov	r7, r4
   17c48:	b	17af0 <fts_open@@Base+0x238>
   17c4c:	andeq	sl, r1, r4, ror fp
   17c50:	andeq	fp, r1, r8, lsl #18

00017c54 <fts_close@@Base>:
   17c54:	ldr	r3, [r0]
   17c58:	push	{r4, r5, r6, lr}
   17c5c:	cmp	r3, #0
   17c60:	mov	r5, r0
   17c64:	beq	17ca0 <fts_close@@Base+0x4c>
   17c68:	ldr	r2, [r3, #48]	; 0x30
   17c6c:	cmp	r2, #0
   17c70:	blt	17db8 <fts_close@@Base+0x164>
   17c74:	ldr	r4, [r3, #8]
   17c78:	mov	r0, r3
   17c7c:	cmp	r4, #0
   17c80:	ldreq	r4, [r3, #4]
   17c84:	bl	111a8 <free@plt>
   17c88:	mov	r3, r4
   17c8c:	ldr	r2, [r4, #48]	; 0x30
   17c90:	cmp	r2, #0
   17c94:	bge	17c74 <fts_close@@Base+0x20>
   17c98:	mov	r0, r4
   17c9c:	bl	111a8 <free@plt>
   17ca0:	ldr	r0, [r5, #4]
   17ca4:	cmp	r0, #0
   17ca8:	beq	17cb0 <fts_close@@Base+0x5c>
   17cac:	bl	165d0 <__assert_fail@plt+0x5140>
   17cb0:	ldr	r0, [r5, #8]
   17cb4:	bl	111a8 <free@plt>
   17cb8:	ldr	r0, [r5, #24]
   17cbc:	bl	111a8 <free@plt>
   17cc0:	ldr	r3, [r5, #48]	; 0x30
   17cc4:	tst	r3, #512	; 0x200
   17cc8:	bne	17d2c <fts_close@@Base+0xd8>
   17ccc:	tst	r3, #4
   17cd0:	beq	17d58 <fts_close@@Base+0x104>
   17cd4:	mov	r4, #0
   17cd8:	add	r0, r5, #60	; 0x3c
   17cdc:	bl	16604 <__assert_fail@plt+0x5174>
   17ce0:	ldr	r0, [r5, #52]	; 0x34
   17ce4:	cmp	r0, #0
   17ce8:	beq	17cf0 <fts_close@@Base+0x9c>
   17cec:	bl	19460 <fts_children@@Base+0xf10>
   17cf0:	ldr	r2, [r5, #48]	; 0x30
   17cf4:	ldr	r3, [pc, #212]	; 17dd0 <fts_close@@Base+0x17c>
   17cf8:	ldr	r0, [r5, #56]	; 0x38
   17cfc:	and	r3, r3, r2
   17d00:	cmp	r3, #0
   17d04:	beq	17d50 <fts_close@@Base+0xfc>
   17d08:	cmp	r0, #0
   17d0c:	beq	17d14 <fts_close@@Base+0xc0>
   17d10:	bl	19460 <fts_children@@Base+0xf10>
   17d14:	mov	r0, r5
   17d18:	bl	111a8 <free@plt>
   17d1c:	cmp	r4, #0
   17d20:	bne	17dc0 <fts_close@@Base+0x16c>
   17d24:	mov	r0, r4
   17d28:	pop	{r4, r5, r6, pc}
   17d2c:	ldr	r0, [r5, #32]
   17d30:	cmp	r0, #0
   17d34:	blt	17cd4 <fts_close@@Base+0x80>
   17d38:	bl	11454 <close@plt>
   17d3c:	cmp	r0, #0
   17d40:	beq	17cd4 <fts_close@@Base+0x80>
   17d44:	bl	11340 <__errno_location@plt>
   17d48:	ldr	r4, [r0]
   17d4c:	b	17cd8 <fts_close@@Base+0x84>
   17d50:	bl	111a8 <free@plt>
   17d54:	b	17d14 <fts_close@@Base+0xc0>
   17d58:	ldr	r0, [r5, #28]
   17d5c:	bl	11400 <fchdir@plt>
   17d60:	cmp	r0, #0
   17d64:	bne	17d88 <fts_close@@Base+0x134>
   17d68:	ldr	r0, [r5, #28]
   17d6c:	bl	11454 <close@plt>
   17d70:	cmp	r0, #0
   17d74:	beq	17cd4 <fts_close@@Base+0x80>
   17d78:	bl	11340 <__errno_location@plt>
   17d7c:	mov	r6, r0
   17d80:	ldr	r4, [r6]
   17d84:	b	17cd8 <fts_close@@Base+0x84>
   17d88:	bl	11340 <__errno_location@plt>
   17d8c:	mov	r6, r0
   17d90:	ldr	r0, [r5, #28]
   17d94:	ldr	r4, [r6]
   17d98:	bl	11454 <close@plt>
   17d9c:	clz	r3, r4
   17da0:	lsr	r3, r3, #5
   17da4:	cmp	r0, #0
   17da8:	moveq	r3, #0
   17dac:	cmp	r3, #0
   17db0:	beq	17cd8 <fts_close@@Base+0x84>
   17db4:	b	17d80 <fts_close@@Base+0x12c>
   17db8:	mov	r4, r3
   17dbc:	b	17c98 <fts_close@@Base+0x44>
   17dc0:	bl	11340 <__errno_location@plt>
   17dc4:	str	r4, [r0]
   17dc8:	mvn	r4, #0
   17dcc:	b	17d24 <fts_close@@Base+0xd0>
   17dd0:	andeq	r0, r0, r2, lsl #2

00017dd4 <fts_read@@Base>:
   17dd4:	push	{r4, r5, r6, r7, r8, lr}
   17dd8:	ldr	r4, [r0]
   17ddc:	cmp	r4, #0
   17de0:	beq	17f00 <fts_read@@Base+0x12c>
   17de4:	ldr	r1, [r0, #48]	; 0x30
   17de8:	ands	r3, r1, #16384	; 0x4000
   17dec:	bne	17f00 <fts_read@@Base+0x12c>
   17df0:	ldrh	r2, [r4, #64]	; 0x40
   17df4:	mov	r8, r0
   17df8:	mov	r0, #3
   17dfc:	cmp	r2, #1
   17e00:	strh	r0, [r4, #64]	; 0x40
   17e04:	beq	181bc <fts_read@@Base+0x3e8>
   17e08:	cmp	r2, #2
   17e0c:	ldrh	r3, [r4, #60]	; 0x3c
   17e10:	beq	17f0c <fts_read@@Base+0x138>
   17e14:	cmp	r3, #1
   17e18:	bne	17e48 <fts_read@@Base+0x74>
   17e1c:	b	17fb8 <fts_read@@Base+0x1e4>
   17e20:	mov	r0, r4
   17e24:	str	r5, [r8]
   17e28:	bl	111a8 <free@plt>
   17e2c:	ldr	r4, [r5, #48]	; 0x30
   17e30:	cmp	r4, #0
   17e34:	beq	18000 <fts_read@@Base+0x22c>
   17e38:	ldrh	r3, [r5, #64]	; 0x40
   17e3c:	mov	r4, r5
   17e40:	cmp	r3, #4
   17e44:	bne	180b0 <fts_read@@Base+0x2dc>
   17e48:	ldr	r5, [r4, #8]
   17e4c:	cmp	r5, #0
   17e50:	bne	17e20 <fts_read@@Base+0x4c>
   17e54:	ldr	r6, [r4, #4]
   17e58:	ldr	r3, [r6, #12]
   17e5c:	cmp	r3, #0
   17e60:	bne	18354 <fts_read@@Base+0x580>
   17e64:	str	r6, [r8]
   17e68:	mov	r0, r4
   17e6c:	bl	111a8 <free@plt>
   17e70:	ldr	r3, [r6, #48]	; 0x30
   17e74:	cmn	r3, #1
   17e78:	beq	18288 <fts_read@@Base+0x4b4>
   17e7c:	ldrh	r3, [r6, #60]	; 0x3c
   17e80:	cmp	r3, #11
   17e84:	beq	1850c <fts_read@@Base+0x738>
   17e88:	ldr	r3, [r6, #40]	; 0x28
   17e8c:	ldr	r2, [r8, #24]
   17e90:	mov	r1, #0
   17e94:	strb	r1, [r2, r3]
   17e98:	ldr	r3, [r6, #48]	; 0x30
   17e9c:	cmp	r3, r1
   17ea0:	beq	182a8 <fts_read@@Base+0x4d4>
   17ea4:	ldrh	r3, [r6, #62]	; 0x3e
   17ea8:	tst	r3, #2
   17eac:	bne	1823c <fts_read@@Base+0x468>
   17eb0:	tst	r3, #1
   17eb4:	beq	183dc <fts_read@@Base+0x608>
   17eb8:	ldrh	r3, [r6, #60]	; 0x3c
   17ebc:	ldr	r0, [r8, #48]	; 0x30
   17ec0:	cmp	r3, #2
   17ec4:	beq	17ef4 <fts_read@@Base+0x120>
   17ec8:	ldr	r3, [r6, #32]
   17ecc:	cmp	r3, #0
   17ed0:	movne	r3, #7
   17ed4:	strhne	r3, [r6, #60]	; 0x3c
   17ed8:	bne	17ef4 <fts_read@@Base+0x120>
   17edc:	mov	r3, #6
   17ee0:	strh	r3, [r6, #60]	; 0x3c
   17ee4:	mov	r2, r6
   17ee8:	add	r1, r8, #56	; 0x38
   17eec:	bl	16e54 <__assert_fail@plt+0x59c4>
   17ef0:	ldr	r0, [r8, #48]	; 0x30
   17ef4:	tst	r0, #16384	; 0x4000
   17ef8:	moveq	r4, r6
   17efc:	beq	17f04 <fts_read@@Base+0x130>
   17f00:	mov	r4, #0
   17f04:	mov	r0, r4
   17f08:	pop	{r4, r5, r6, r7, r8, pc}
   17f0c:	sub	r2, r3, #12
   17f10:	cmp	r2, #1
   17f14:	bls	1814c <fts_read@@Base+0x378>
   17f18:	cmp	r3, #1
   17f1c:	bne	17e48 <fts_read@@Base+0x74>
   17f20:	tst	r1, #64	; 0x40
   17f24:	beq	17f3c <fts_read@@Base+0x168>
   17f28:	ldrd	r6, [r4, #72]	; 0x48
   17f2c:	ldrd	r2, [r8, #16]
   17f30:	cmp	r7, r3
   17f34:	cmpeq	r6, r2
   17f38:	bne	17fc0 <fts_read@@Base+0x1ec>
   17f3c:	ldr	r0, [r8, #4]
   17f40:	cmp	r0, #0
   17f44:	beq	181e8 <fts_read@@Base+0x414>
   17f48:	tst	r1, #8192	; 0x2000
   17f4c:	bne	181d4 <fts_read@@Base+0x400>
   17f50:	ldr	r3, [r4, #24]
   17f54:	mvn	r2, #0
   17f58:	mov	r1, r4
   17f5c:	mov	r0, r8
   17f60:	bl	16b98 <__assert_fail@plt+0x5708>
   17f64:	cmp	r0, #0
   17f68:	beq	18270 <fts_read@@Base+0x49c>
   17f6c:	bl	11340 <__errno_location@plt>
   17f70:	ldrh	r3, [r4, #62]	; 0x3e
   17f74:	ldr	r5, [r8, #4]
   17f78:	orr	r3, r3, #1
   17f7c:	cmp	r5, #0
   17f80:	ldr	r2, [r0]
   17f84:	strh	r3, [r4, #62]	; 0x3e
   17f88:	str	r2, [r4, #32]
   17f8c:	beq	17fac <fts_read@@Base+0x1d8>
   17f90:	mov	r3, r5
   17f94:	ldr	r2, [r3, #4]
   17f98:	ldr	r2, [r2, #24]
   17f9c:	str	r2, [r3, #24]
   17fa0:	ldr	r3, [r3, #8]
   17fa4:	cmp	r3, #0
   17fa8:	bne	17f94 <fts_read@@Base+0x1c0>
   17fac:	mov	r3, #0
   17fb0:	str	r3, [r8, #4]
   17fb4:	b	180b8 <fts_read@@Base+0x2e4>
   17fb8:	cmp	r2, #4
   17fbc:	bne	17f20 <fts_read@@Base+0x14c>
   17fc0:	ldrh	r3, [r4, #62]	; 0x3e
   17fc4:	tst	r3, #2
   17fc8:	bne	183a4 <fts_read@@Base+0x5d0>
   17fcc:	ldr	r0, [r8, #4]
   17fd0:	cmp	r0, #0
   17fd4:	beq	17fe4 <fts_read@@Base+0x210>
   17fd8:	bl	165d0 <__assert_fail@plt+0x5140>
   17fdc:	mov	r3, #0
   17fe0:	str	r3, [r8, #4]
   17fe4:	mov	r3, #6
   17fe8:	strh	r3, [r4, #60]	; 0x3c
   17fec:	mov	r2, r4
   17ff0:	add	r1, r8, #56	; 0x38
   17ff4:	ldr	r0, [r8, #48]	; 0x30
   17ff8:	bl	16e54 <__assert_fail@plt+0x59c4>
   17ffc:	b	17f04 <fts_read@@Base+0x130>
   18000:	mov	r0, r8
   18004:	bl	16884 <__assert_fail@plt+0x53f4>
   18008:	cmp	r0, #0
   1800c:	bne	1838c <fts_read@@Base+0x5b8>
   18010:	ldr	r2, [r8, #48]	; 0x30
   18014:	ldr	r3, [pc, #1268]	; 18510 <fts_read@@Base+0x73c>
   18018:	ldr	r0, [r8, #56]	; 0x38
   1801c:	and	r3, r3, r2
   18020:	cmp	r3, #0
   18024:	beq	1839c <fts_read@@Base+0x5c8>
   18028:	cmp	r0, #0
   1802c:	beq	18034 <fts_read@@Base+0x260>
   18030:	bl	19460 <fts_children@@Base+0xf10>
   18034:	ldr	r2, [r5, #52]	; 0x34
   18038:	add	r4, r5, #176	; 0xb0
   1803c:	str	r2, [r5, #40]	; 0x28
   18040:	mov	r1, r4
   18044:	add	r2, r2, #1
   18048:	ldr	r0, [r8, #24]
   1804c:	bl	1119c <memmove@plt>
   18050:	mov	r0, r4
   18054:	mov	r1, #47	; 0x2f
   18058:	bl	113c4 <strrchr@plt>
   1805c:	cmp	r0, #0
   18060:	beq	18090 <fts_read@@Base+0x2bc>
   18064:	cmp	r4, r0
   18068:	beq	18278 <fts_read@@Base+0x4a4>
   1806c:	add	r6, r0, #1
   18070:	mov	r0, r6
   18074:	bl	11310 <strlen@plt>
   18078:	mov	r1, r6
   1807c:	mov	r7, r0
   18080:	add	r2, r7, #1
   18084:	mov	r0, r4
   18088:	bl	1119c <memmove@plt>
   1808c:	str	r7, [r5, #52]	; 0x34
   18090:	ldr	r3, [r8, #24]
   18094:	add	r1, r8, #56	; 0x38
   18098:	str	r3, [r5, #28]
   1809c:	str	r3, [r5, #24]
   180a0:	ldr	r0, [r8, #48]	; 0x30
   180a4:	bl	16adc <__assert_fail@plt+0x564c>
   180a8:	ldrh	r0, [r5, #60]	; 0x3c
   180ac:	b	180fc <fts_read@@Base+0x328>
   180b0:	cmp	r3, #2
   180b4:	beq	183b0 <fts_read@@Base+0x5dc>
   180b8:	ldr	r3, [r5, #4]
   180bc:	mov	ip, #47	; 0x2f
   180c0:	ldr	r2, [r8, #24]
   180c4:	ldr	r1, [r3, #40]	; 0x28
   180c8:	ldr	r0, [r3, #28]
   180cc:	sub	r3, r1, #1
   180d0:	ldrb	r0, [r0, r3]
   180d4:	cmp	r0, ip
   180d8:	movne	r3, r1
   180dc:	add	r0, r2, r3
   180e0:	strb	ip, [r2, r3]
   180e4:	ldr	r2, [r5, #52]	; 0x34
   180e8:	add	r0, r0, #1
   180ec:	add	r2, r2, #1
   180f0:	add	r1, r5, #176	; 0xb0
   180f4:	bl	1119c <memmove@plt>
   180f8:	ldrh	r0, [r5, #60]	; 0x3c
   180fc:	cmp	r0, #11
   18100:	str	r5, [r8]
   18104:	beq	1817c <fts_read@@Base+0x3a8>
   18108:	cmp	r0, #1
   1810c:	bne	18198 <fts_read@@Base+0x3c4>
   18110:	ldr	r3, [r5, #48]	; 0x30
   18114:	cmp	r3, #0
   18118:	beq	181ac <fts_read@@Base+0x3d8>
   1811c:	mov	r4, r5
   18120:	mov	r2, r5
   18124:	add	r1, r8, #56	; 0x38
   18128:	ldr	r0, [r8, #48]	; 0x30
   1812c:	bl	16da4 <__assert_fail@plt+0x5914>
   18130:	subs	r5, r0, #0
   18134:	bne	17f04 <fts_read@@Base+0x130>
   18138:	bl	11340 <__errno_location@plt>
   1813c:	mov	r3, #12
   18140:	mov	r4, r5
   18144:	str	r3, [r0]
   18148:	b	17f04 <fts_read@@Base+0x130>
   1814c:	mov	r3, #1
   18150:	mov	r2, r4
   18154:	add	r1, r8, #48	; 0x30
   18158:	ldr	r0, [r8, #32]
   1815c:	bl	168d4 <__assert_fail@plt+0x5444>
   18160:	cmp	r0, #1
   18164:	strh	r0, [r4, #60]	; 0x3c
   18168:	beq	18420 <fts_read@@Base+0x64c>
   1816c:	cmp	r0, #11
   18170:	str	r4, [r8]
   18174:	bne	17f04 <fts_read@@Base+0x130>
   18178:	mov	r5, r4
   1817c:	ldrd	r2, [r5, #120]	; 0x78
   18180:	cmp	r3, #0
   18184:	cmpeq	r2, #2
   18188:	beq	182e4 <fts_read@@Base+0x510>
   1818c:	cmp	r3, #0
   18190:	cmpeq	r2, #1
   18194:	bne	1850c <fts_read@@Base+0x738>
   18198:	mov	r4, r5
   1819c:	mov	r0, r4
   181a0:	pop	{r4, r5, r6, r7, r8, pc}
   181a4:	cmp	r0, #1
   181a8:	bne	18198 <fts_read@@Base+0x3c4>
   181ac:	ldrd	r2, [r5, #72]	; 0x48
   181b0:	mov	r4, r5
   181b4:	strd	r2, [r8, #16]
   181b8:	b	18120 <fts_read@@Base+0x34c>
   181bc:	mov	r2, r4
   181c0:	add	r1, r8, #48	; 0x30
   181c4:	ldr	r0, [r8, #32]
   181c8:	bl	168d4 <__assert_fail@plt+0x5444>
   181cc:	strh	r0, [r4, #60]	; 0x3c
   181d0:	b	17f04 <fts_read@@Base+0x130>
   181d4:	bic	r1, r1, #8192	; 0x2000
   181d8:	str	r1, [r8, #48]	; 0x30
   181dc:	bl	165d0 <__assert_fail@plt+0x5140>
   181e0:	mov	r3, #0
   181e4:	str	r3, [r8, #4]
   181e8:	mov	r1, #3
   181ec:	mov	r0, r8
   181f0:	bl	16f2c <__assert_fail@plt+0x5a9c>
   181f4:	cmp	r0, #0
   181f8:	mov	r5, r0
   181fc:	str	r0, [r8, #4]
   18200:	bne	17fac <fts_read@@Base+0x1d8>
   18204:	ldr	r0, [r8, #48]	; 0x30
   18208:	tst	r0, #16384	; 0x4000
   1820c:	bne	17f00 <fts_read@@Base+0x12c>
   18210:	ldr	r3, [r4, #32]
   18214:	cmp	r3, #0
   18218:	beq	1822c <fts_read@@Base+0x458>
   1821c:	ldrh	r3, [r4, #60]	; 0x3c
   18220:	cmp	r3, #4
   18224:	movne	r3, #7
   18228:	strhne	r3, [r4, #60]	; 0x3c
   1822c:	add	r1, r8, #56	; 0x38
   18230:	mov	r2, r4
   18234:	bl	16e54 <__assert_fail@plt+0x59c4>
   18238:	b	17f04 <fts_read@@Base+0x130>
   1823c:	ldr	r3, [r8, #48]	; 0x30
   18240:	ldr	r1, [r6, #36]	; 0x24
   18244:	tst	r3, #4
   18248:	bne	18264 <fts_read@@Base+0x490>
   1824c:	tst	r3, #512	; 0x200
   18250:	beq	18408 <fts_read@@Base+0x634>
   18254:	mov	r2, #1
   18258:	mov	r0, r8
   1825c:	bl	167fc <__assert_fail@plt+0x536c>
   18260:	ldr	r1, [r6, #36]	; 0x24
   18264:	mov	r0, r1
   18268:	bl	11454 <close@plt>
   1826c:	b	17eb8 <fts_read@@Base+0xe4>
   18270:	ldr	r5, [r8, #4]
   18274:	b	17fac <fts_read@@Base+0x1d8>
   18278:	ldrb	r3, [r4, #1]
   1827c:	cmp	r3, #0
   18280:	beq	18090 <fts_read@@Base+0x2bc>
   18284:	b	1806c <fts_read@@Base+0x298>
   18288:	mov	r0, r6
   1828c:	bl	111a8 <free@plt>
   18290:	bl	11340 <__errno_location@plt>
   18294:	mov	r3, #0
   18298:	mov	r4, r3
   1829c:	str	r3, [r0]
   182a0:	str	r3, [r8]
   182a4:	b	17f04 <fts_read@@Base+0x130>
   182a8:	mov	r0, r8
   182ac:	bl	16884 <__assert_fail@plt+0x53f4>
   182b0:	cmp	r0, #0
   182b4:	beq	17eb8 <fts_read@@Base+0xe4>
   182b8:	bl	11340 <__errno_location@plt>
   182bc:	ldr	r3, [r8, #48]	; 0x30
   182c0:	orr	r3, r3, #16384	; 0x4000
   182c4:	ldr	r2, [r0]
   182c8:	str	r2, [r6, #32]
   182cc:	str	r3, [r8, #48]	; 0x30
   182d0:	ldrh	r3, [r6, #60]	; 0x3c
   182d4:	cmp	r3, #2
   182d8:	beq	17f00 <fts_read@@Base+0x12c>
   182dc:	ldr	r0, [r8, #48]	; 0x30
   182e0:	b	17ec8 <fts_read@@Base+0xf4>
   182e4:	ldr	r4, [r5, #4]
   182e8:	ldr	r0, [r8, #32]
   182ec:	ldr	r3, [r4, #56]	; 0x38
   182f0:	cmp	r3, #0
   182f4:	bne	18308 <fts_read@@Base+0x534>
   182f8:	ldr	r3, [r8, #48]	; 0x30
   182fc:	and	r3, r3, #24
   18300:	cmp	r3, #24
   18304:	beq	18498 <fts_read@@Base+0x6c4>
   18308:	mov	r3, #0
   1830c:	mov	r2, r5
   18310:	add	r1, r8, #48	; 0x30
   18314:	bl	168d4 <__assert_fail@plt+0x5444>
   18318:	ldr	r3, [r5, #88]	; 0x58
   1831c:	and	r3, r3, #61440	; 0xf000
   18320:	cmp	r3, #16384	; 0x4000
   18324:	strh	r0, [r5, #60]	; 0x3c
   18328:	bne	18108 <fts_read@@Base+0x334>
   1832c:	ldr	r3, [r5, #48]	; 0x30
   18330:	cmp	r3, #0
   18334:	beq	181a4 <fts_read@@Base+0x3d0>
   18338:	ldr	r3, [r4, #56]	; 0x38
   1833c:	sub	r3, r3, #1
   18340:	cmn	r3, #3
   18344:	strls	r3, [r4, #56]	; 0x38
   18348:	cmp	r0, #1
   1834c:	beq	1811c <fts_read@@Base+0x348>
   18350:	b	18198 <fts_read@@Base+0x3c4>
   18354:	ldr	r3, [r6, #40]	; 0x28
   18358:	ldr	r2, [r8, #24]
   1835c:	str	r6, [r8]
   18360:	mov	r1, #3
   18364:	strb	r5, [r2, r3]
   18368:	mov	r0, r8
   1836c:	bl	16f2c <__assert_fail@plt+0x5a9c>
   18370:	subs	r5, r0, #0
   18374:	bne	183fc <fts_read@@Base+0x628>
   18378:	ldr	r3, [r8, #48]	; 0x30
   1837c:	tst	r3, #16384	; 0x4000
   18380:	bne	17f00 <fts_read@@Base+0x12c>
   18384:	ldr	r6, [r4, #4]
   18388:	b	17e64 <fts_read@@Base+0x90>
   1838c:	ldr	r3, [r8, #48]	; 0x30
   18390:	orr	r3, r3, #16384	; 0x4000
   18394:	str	r3, [r8, #48]	; 0x30
   18398:	b	17f04 <fts_read@@Base+0x130>
   1839c:	bl	111a8 <free@plt>
   183a0:	b	18034 <fts_read@@Base+0x260>
   183a4:	ldr	r0, [r4, #36]	; 0x24
   183a8:	bl	11454 <close@plt>
   183ac:	b	17fcc <fts_read@@Base+0x1f8>
   183b0:	mov	r3, #1
   183b4:	mov	r2, r5
   183b8:	add	r1, r8, #48	; 0x30
   183bc:	ldr	r0, [r8, #32]
   183c0:	bl	168d4 <__assert_fail@plt+0x5444>
   183c4:	cmp	r0, #1
   183c8:	strh	r0, [r5, #60]	; 0x3c
   183cc:	beq	18464 <fts_read@@Base+0x690>
   183d0:	mov	r3, #3
   183d4:	strh	r3, [r5, #64]	; 0x40
   183d8:	b	180b8 <fts_read@@Base+0x2e4>
   183dc:	ldr	r3, [pc, #304]	; 18514 <fts_read@@Base+0x740>
   183e0:	mvn	r2, #0
   183e4:	ldr	r1, [r6, #4]
   183e8:	mov	r0, r8
   183ec:	bl	16b98 <__assert_fail@plt+0x5708>
   183f0:	cmp	r0, #0
   183f4:	beq	17eb8 <fts_read@@Base+0xe4>
   183f8:	b	182b8 <fts_read@@Base+0x4e4>
   183fc:	mov	r0, r4
   18400:	bl	111a8 <free@plt>
   18404:	b	180b8 <fts_read@@Base+0x2e4>
   18408:	mov	r0, r1
   1840c:	bl	11400 <fchdir@plt>
   18410:	cmp	r0, #0
   18414:	bne	184b8 <fts_read@@Base+0x6e4>
   18418:	ldr	r1, [r6, #36]	; 0x24
   1841c:	b	18264 <fts_read@@Base+0x490>
   18420:	ldr	r1, [r8, #48]	; 0x30
   18424:	tst	r1, #4
   18428:	strne	r4, [r8]
   1842c:	movne	r5, r4
   18430:	bne	18110 <fts_read@@Base+0x33c>
   18434:	ldr	r2, [pc, #220]	; 18518 <fts_read@@Base+0x744>
   18438:	ldr	r0, [r8, #32]
   1843c:	bl	16b5c <__assert_fail@plt+0x56cc>
   18440:	cmp	r0, #0
   18444:	str	r0, [r4, #36]	; 0x24
   18448:	blt	184d8 <fts_read@@Base+0x704>
   1844c:	ldrh	r3, [r4, #62]	; 0x3e
   18450:	ldrh	r0, [r4, #60]	; 0x3c
   18454:	mov	r5, r4
   18458:	orr	r3, r3, #2
   1845c:	strh	r3, [r4, #62]	; 0x3e
   18460:	b	180fc <fts_read@@Base+0x328>
   18464:	ldr	r1, [r8, #48]	; 0x30
   18468:	tst	r1, #4
   1846c:	bne	183d0 <fts_read@@Base+0x5fc>
   18470:	ldr	r2, [pc, #160]	; 18518 <fts_read@@Base+0x744>
   18474:	ldr	r0, [r8, #32]
   18478:	bl	16b5c <__assert_fail@plt+0x56cc>
   1847c:	cmp	r0, #0
   18480:	str	r0, [r5, #36]	; 0x24
   18484:	blt	184f4 <fts_read@@Base+0x720>
   18488:	ldrh	r3, [r5, #62]	; 0x3e
   1848c:	orr	r3, r3, #2
   18490:	strh	r3, [r5, #62]	; 0x3e
   18494:	b	183d0 <fts_read@@Base+0x5fc>
   18498:	mov	r1, r0
   1849c:	mov	r0, r4
   184a0:	bl	16768 <__assert_fail@plt+0x52d8>
   184a4:	cmp	r0, #2
   184a8:	ldrheq	r0, [r5, #60]	; 0x3c
   184ac:	beq	18108 <fts_read@@Base+0x334>
   184b0:	ldr	r0, [r8, #32]
   184b4:	b	18308 <fts_read@@Base+0x534>
   184b8:	bl	11340 <__errno_location@plt>
   184bc:	ldr	r3, [r8, #48]	; 0x30
   184c0:	ldr	r1, [r6, #36]	; 0x24
   184c4:	orr	r3, r3, #16384	; 0x4000
   184c8:	ldr	r2, [r0]
   184cc:	str	r2, [r6, #32]
   184d0:	str	r3, [r8, #48]	; 0x30
   184d4:	b	18264 <fts_read@@Base+0x490>
   184d8:	bl	11340 <__errno_location@plt>
   184dc:	mov	r2, #7
   184e0:	ldr	r3, [r0]
   184e4:	strh	r2, [r4, #60]	; 0x3c
   184e8:	str	r3, [r4, #32]
   184ec:	str	r4, [r8]
   184f0:	b	17f04 <fts_read@@Base+0x130>
   184f4:	bl	11340 <__errno_location@plt>
   184f8:	mov	r2, #7
   184fc:	ldr	r3, [r0]
   18500:	strh	r2, [r5, #60]	; 0x3c
   18504:	str	r3, [r5, #32]
   18508:	b	183d0 <fts_read@@Base+0x5fc>
   1850c:	bl	11448 <abort@plt>
   18510:	andeq	r0, r0, r2, lsl #2
   18514:	andeq	fp, r1, r4, lsl #18
   18518:	andeq	fp, r1, r8, lsl #18

0001851c <fts_set@@Base>:
   1851c:	cmp	r2, #4
   18520:	bhi	18534 <fts_set@@Base+0x18>
   18524:	mov	r3, #0
   18528:	strh	r2, [r1, #64]	; 0x40
   1852c:	mov	r0, r3
   18530:	bx	lr
   18534:	push	{r4, lr}
   18538:	bl	11340 <__errno_location@plt>
   1853c:	mov	r2, #22
   18540:	mov	r3, #1
   18544:	str	r2, [r0]
   18548:	mov	r0, r3
   1854c:	pop	{r4, pc}

00018550 <fts_children@@Base>:
   18550:	push	{r4, r5, r6, r7, r8, lr}
   18554:	mov	r4, r1
   18558:	mov	r5, r0
   1855c:	bl	11340 <__errno_location@plt>
   18560:	bics	r2, r4, #8192	; 0x2000
   18564:	mov	r7, r0
   18568:	bne	185f8 <fts_children@@Base+0xa8>
   1856c:	ldr	r6, [r5]
   18570:	str	r2, [r0]
   18574:	ldr	r3, [r5, #48]	; 0x30
   18578:	ands	r0, r3, #16384	; 0x4000
   1857c:	bne	18600 <fts_children@@Base+0xb0>
   18580:	ldrh	r3, [r6, #60]	; 0x3c
   18584:	cmp	r3, #9
   18588:	beq	18658 <fts_children@@Base+0x108>
   1858c:	cmp	r3, #1
   18590:	popne	{r4, r5, r6, r7, r8, pc}
   18594:	ldr	r0, [r5, #4]
   18598:	cmp	r0, #0
   1859c:	beq	185a4 <fts_children@@Base+0x54>
   185a0:	bl	165d0 <__assert_fail@plt+0x5140>
   185a4:	cmp	r4, #8192	; 0x2000
   185a8:	moveq	r8, #2
   185ac:	ldreq	r3, [r5, #48]	; 0x30
   185b0:	movne	r8, #1
   185b4:	orreq	r3, r3, #8192	; 0x2000
   185b8:	streq	r3, [r5, #48]	; 0x30
   185bc:	ldr	r3, [r6, #48]	; 0x30
   185c0:	cmp	r3, #0
   185c4:	bne	185e4 <fts_children@@Base+0x94>
   185c8:	ldr	r3, [r6, #24]
   185cc:	ldrb	r3, [r3]
   185d0:	cmp	r3, #47	; 0x2f
   185d4:	beq	185e4 <fts_children@@Base+0x94>
   185d8:	ldr	r1, [r5, #48]	; 0x30
   185dc:	ands	r4, r1, #4
   185e0:	beq	18608 <fts_children@@Base+0xb8>
   185e4:	mov	r1, r8
   185e8:	mov	r0, r5
   185ec:	bl	16f2c <__assert_fail@plt+0x5a9c>
   185f0:	str	r0, [r5, #4]
   185f4:	pop	{r4, r5, r6, r7, r8, pc}
   185f8:	mov	r3, #22
   185fc:	str	r3, [r0]
   18600:	mov	r0, #0
   18604:	pop	{r4, r5, r6, r7, r8, pc}
   18608:	ldr	r2, [pc, #136]	; 18698 <fts_children@@Base+0x148>
   1860c:	ldr	r0, [r5, #32]
   18610:	bl	16b5c <__assert_fail@plt+0x56cc>
   18614:	subs	r6, r0, #0
   18618:	blt	18674 <fts_children@@Base+0x124>
   1861c:	mov	r1, r8
   18620:	mov	r0, r5
   18624:	bl	16f2c <__assert_fail@plt+0x5a9c>
   18628:	ldr	r3, [r5, #48]	; 0x30
   1862c:	ands	r4, r3, #512	; 0x200
   18630:	str	r0, [r5, #4]
   18634:	bne	18660 <fts_children@@Base+0x110>
   18638:	mov	r0, r6
   1863c:	bl	11400 <fchdir@plt>
   18640:	cmp	r0, #0
   18644:	bne	18680 <fts_children@@Base+0x130>
   18648:	mov	r0, r6
   1864c:	bl	11454 <close@plt>
   18650:	ldr	r0, [r5, #4]
   18654:	pop	{r4, r5, r6, r7, r8, pc}
   18658:	ldr	r0, [r6, #8]
   1865c:	pop	{r4, r5, r6, r7, r8, pc}
   18660:	mov	r1, r6
   18664:	mov	r2, #1
   18668:	mov	r0, r5
   1866c:	bl	167fc <__assert_fail@plt+0x536c>
   18670:	b	18650 <fts_children@@Base+0x100>
   18674:	str	r4, [r5, #4]
   18678:	mov	r0, r4
   1867c:	pop	{r4, r5, r6, r7, r8, pc}
   18680:	ldr	r5, [r7]
   18684:	mov	r0, r6
   18688:	bl	11454 <close@plt>
   1868c:	str	r5, [r7]
   18690:	mov	r0, r4
   18694:	pop	{r4, r5, r6, r7, r8, pc}
   18698:	andeq	fp, r1, r8, lsl #18
   1869c:	push	{r4, r5, r6, r7, r8, lr}
   186a0:	subs	r7, r0, #0
   186a4:	ldr	r5, [pc, #108]	; 18718 <fts_children@@Base+0x1c8>
   186a8:	sub	sp, sp, #8
   186ac:	mov	r8, r1
   186b0:	ldr	r1, [r5]
   186b4:	moveq	r7, sp
   186b8:	str	r1, [sp, #4]
   186bc:	mov	r0, r7
   186c0:	mov	r1, r8
   186c4:	mov	r6, r2
   186c8:	bl	1128c <mbrtowc@plt>
   186cc:	cmp	r6, #0
   186d0:	cmnne	r0, #3
   186d4:	mov	r4, r0
   186d8:	bhi	186f8 <fts_children@@Base+0x1a8>
   186dc:	ldr	r2, [sp, #4]
   186e0:	ldr	r3, [r5]
   186e4:	mov	r0, r4
   186e8:	cmp	r2, r3
   186ec:	bne	18714 <fts_children@@Base+0x1c4>
   186f0:	add	sp, sp, #8
   186f4:	pop	{r4, r5, r6, r7, r8, pc}
   186f8:	mov	r0, #0
   186fc:	bl	188e4 <fts_children@@Base+0x394>
   18700:	cmp	r0, #0
   18704:	moveq	r4, #1
   18708:	ldrbeq	r3, [r8]
   1870c:	streq	r3, [r7]
   18710:	b	186dc <fts_children@@Base+0x18c>
   18714:	bl	11208 <__stack_chk_fail@plt>
   18718:	andeq	fp, r2, r8, lsl #30
   1871c:	push	{r4, r5, r6, lr}
   18720:	mov	r4, r0
   18724:	bl	11280 <__fpending@plt>
   18728:	ldr	r5, [r4]
   1872c:	and	r5, r5, #32
   18730:	mov	r6, r0
   18734:	mov	r0, r4
   18738:	bl	19ba0 <fts_children@@Base+0x1650>
   1873c:	cmp	r5, #0
   18740:	mov	r4, r0
   18744:	bne	18770 <fts_children@@Base+0x220>
   18748:	cmp	r0, #0
   1874c:	beq	18768 <fts_children@@Base+0x218>
   18750:	cmp	r6, #0
   18754:	bne	18788 <fts_children@@Base+0x238>
   18758:	bl	11340 <__errno_location@plt>
   1875c:	ldr	r4, [r0]
   18760:	subs	r4, r4, #9
   18764:	mvnne	r4, #0
   18768:	mov	r0, r4
   1876c:	pop	{r4, r5, r6, pc}
   18770:	cmp	r0, #0
   18774:	bne	18788 <fts_children@@Base+0x238>
   18778:	bl	11340 <__errno_location@plt>
   1877c:	str	r4, [r0]
   18780:	mvn	r4, #0
   18784:	b	18768 <fts_children@@Base+0x218>
   18788:	mvn	r4, #0
   1878c:	b	18768 <fts_children@@Base+0x218>
   18790:	push	{r4, r5}
   18794:	mov	r4, #0
   18798:	mov	r5, #0
   1879c:	ldr	r3, [pc, #12]	; 187b0 <fts_children@@Base+0x260>
   187a0:	strd	r4, [r0, #16]
   187a4:	str	r3, [r0, #24]
   187a8:	pop	{r4, r5}
   187ac:	bx	lr
   187b0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   187b4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b8:	ldr	r2, [r0, #24]
   187bc:	ldr	r3, [pc, #180]	; 18878 <fts_children@@Base+0x328>
   187c0:	cmp	r2, r3
   187c4:	bne	18864 <fts_children@@Base+0x314>
   187c8:	ldrd	r6, [r0, #16]
   187cc:	ldrd	sl, [r1, #96]	; 0x60
   187d0:	orrs	r3, r6, r7
   187d4:	beq	18810 <fts_children@@Base+0x2c0>
   187d8:	ldrd	r2, [r0]
   187dc:	cmp	r3, fp
   187e0:	cmpeq	r2, sl
   187e4:	beq	18834 <fts_children@@Base+0x2e4>
   187e8:	adds	r8, r6, #1
   187ec:	adc	r9, r7, #0
   187f0:	and	r2, r6, r8
   187f4:	and	r3, r7, r9
   187f8:	orrs	r3, r2, r3
   187fc:	strd	r8, [r0, #16]
   18800:	movne	r1, #0
   18804:	beq	18854 <fts_children@@Base+0x304>
   18808:	mov	r0, r1
   1880c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18810:	mov	r2, #1
   18814:	mov	r3, #0
   18818:	strd	r2, [r0, #16]
   1881c:	ldrd	r2, [r1]
   18820:	mov	r1, #0
   18824:	strd	sl, [r0]
   18828:	strd	r2, [r0, #8]
   1882c:	mov	r0, r1
   18830:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18834:	ldrd	r4, [r1]
   18838:	ldrd	r2, [r0, #8]
   1883c:	cmp	r5, r3
   18840:	cmpeq	r4, r2
   18844:	bne	187e8 <fts_children@@Base+0x298>
   18848:	mov	r1, #1
   1884c:	mov	r0, r1
   18850:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18854:	orrs	r3, r8, r9
   18858:	bne	1881c <fts_children@@Base+0x2cc>
   1885c:	mov	r1, #1
   18860:	b	1884c <fts_children@@Base+0x2fc>
   18864:	ldr	r3, [pc, #16]	; 1887c <fts_children@@Base+0x32c>
   18868:	mov	r2, #60	; 0x3c
   1886c:	ldr	r1, [pc, #12]	; 18880 <fts_children@@Base+0x330>
   18870:	ldr	r0, [pc, #12]	; 18884 <fts_children@@Base+0x334>
   18874:	bl	11490 <__assert_fail@plt>
   18878:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1887c:	andeq	fp, r1, ip, lsl #18
   18880:	andeq	fp, r1, r8, lsl r9
   18884:	andeq	fp, r1, ip, lsr #18
   18888:	push	{r1, r2, r3}
   1888c:	push	{r4, lr}
   18890:	sub	sp, sp, #12
   18894:	ldr	r4, [pc, #68]	; 188e0 <fts_children@@Base+0x390>
   18898:	ldr	r1, [sp, #20]
   1889c:	ldr	r3, [r4]
   188a0:	ands	r2, r1, #64	; 0x40
   188a4:	str	r3, [sp, #4]
   188a8:	ldrne	r2, [sp, #24]
   188ac:	addne	r3, sp, #24
   188b0:	strne	r3, [sp]
   188b4:	bl	112a4 <open64@plt>
   188b8:	bl	19b5c <fts_children@@Base+0x160c>
   188bc:	ldr	r2, [sp, #4]
   188c0:	ldr	r3, [r4]
   188c4:	cmp	r2, r3
   188c8:	bne	188dc <fts_children@@Base+0x38c>
   188cc:	add	sp, sp, #12
   188d0:	pop	{r4, lr}
   188d4:	add	sp, sp, #12
   188d8:	bx	lr
   188dc:	bl	11208 <__stack_chk_fail@plt>
   188e0:	andeq	fp, r2, r8, lsl #30
   188e4:	push	{r4, lr}
   188e8:	mov	r1, #0
   188ec:	bl	113ac <setlocale@plt>
   188f0:	subs	r4, r0, #0
   188f4:	beq	18920 <fts_children@@Base+0x3d0>
   188f8:	ldr	r1, [pc, #40]	; 18928 <fts_children@@Base+0x3d8>
   188fc:	bl	11178 <strcmp@plt>
   18900:	cmp	r0, #0
   18904:	popeq	{r4, pc}
   18908:	mov	r0, r4
   1890c:	ldr	r1, [pc, #24]	; 1892c <fts_children@@Base+0x3dc>
   18910:	bl	11178 <strcmp@plt>
   18914:	adds	r0, r0, #0
   18918:	movne	r0, #1
   1891c:	pop	{r4, pc}
   18920:	mov	r0, #1
   18924:	pop	{r4, pc}
   18928:	andeq	fp, r1, r4, asr #18
   1892c:	andeq	fp, r1, r8, asr #18
   18930:	cmp	r0, #10
   18934:	movcc	r0, #10
   18938:	push	{r4, r5, r6, r7, r8, lr}
   1893c:	orr	r7, r0, #1
   18940:	cmn	r7, #1
   18944:	beq	189bc <fts_children@@Base+0x46c>
   18948:	ldr	r8, [pc, #116]	; 189c4 <fts_children@@Base+0x474>
   1894c:	umull	r2, r3, r8, r7
   18950:	cmp	r7, #9
   18954:	lsr	r3, r3, #1
   18958:	add	r3, r3, r3, lsl #1
   1895c:	sub	r3, r7, r3
   18960:	bls	189a8 <fts_children@@Base+0x458>
   18964:	cmp	r3, #0
   18968:	beq	189b0 <fts_children@@Base+0x460>
   1896c:	mov	r6, #16
   18970:	mov	r5, #9
   18974:	mov	r4, #3
   18978:	b	18988 <fts_children@@Base+0x438>
   1897c:	cmp	r1, #0
   18980:	add	r6, r6, #8
   18984:	beq	189b0 <fts_children@@Base+0x460>
   18988:	add	r4, r4, #2
   1898c:	mov	r1, r4
   18990:	mov	r0, r7
   18994:	bl	1a084 <fts_children@@Base+0x1b34>
   18998:	add	r5, r5, r6
   1899c:	cmp	r5, r7
   189a0:	mov	r3, r1
   189a4:	bcc	1897c <fts_children@@Base+0x42c>
   189a8:	cmp	r3, #0
   189ac:	bne	189bc <fts_children@@Base+0x46c>
   189b0:	add	r7, r7, #2
   189b4:	cmn	r7, #1
   189b8:	bne	1894c <fts_children@@Base+0x3fc>
   189bc:	mov	r0, r7
   189c0:	pop	{r4, r5, r6, r7, r8, pc}
   189c4:	bge	feac3478 <optarg@@GLIBC_2.4+0xfea972d8>
   189c8:	push	{r4, lr}
   189cc:	ror	r0, r0, #3
   189d0:	bl	1a084 <fts_children@@Base+0x1b34>
   189d4:	mov	r0, r1
   189d8:	pop	{r4, pc}
   189dc:	sub	r0, r1, r0
   189e0:	clz	r0, r0
   189e4:	lsr	r0, r0, #5
   189e8:	bx	lr
   189ec:	push	{r4, lr}
   189f0:	mov	r4, r0
   189f4:	mov	r0, r1
   189f8:	ldr	r3, [r4, #24]
   189fc:	ldr	r1, [r4, #8]
   18a00:	blx	r3
   18a04:	ldr	r3, [r4, #8]
   18a08:	cmp	r3, r0
   18a0c:	bls	18a1c <fts_children@@Base+0x4cc>
   18a10:	ldr	r3, [r4]
   18a14:	add	r0, r3, r0, lsl #3
   18a18:	pop	{r4, pc}
   18a1c:	bl	11448 <abort@plt>
   18a20:	push	{r4, r5, r6, r7, r8, lr}
   18a24:	mov	r8, r2
   18a28:	mov	r5, r1
   18a2c:	mov	r7, r3
   18a30:	mov	r6, r0
   18a34:	bl	189ec <fts_children@@Base+0x49c>
   18a38:	str	r0, [r8]
   18a3c:	ldr	r1, [r0]
   18a40:	cmp	r1, #0
   18a44:	beq	18b2c <fts_children@@Base+0x5dc>
   18a48:	cmp	r1, r5
   18a4c:	mov	r4, r0
   18a50:	beq	18af0 <fts_children@@Base+0x5a0>
   18a54:	ldr	r3, [r6, #28]
   18a58:	mov	r0, r5
   18a5c:	blx	r3
   18a60:	cmp	r0, #0
   18a64:	ldrne	r3, [r4]
   18a68:	bne	18af4 <fts_children@@Base+0x5a4>
   18a6c:	ldr	r2, [r4, #4]
   18a70:	cmp	r2, #0
   18a74:	beq	18b2c <fts_children@@Base+0x5dc>
   18a78:	ldr	r3, [r2]
   18a7c:	cmp	r5, r3
   18a80:	bne	18aa4 <fts_children@@Base+0x554>
   18a84:	b	18ac4 <fts_children@@Base+0x574>
   18a88:	ldr	r4, [r4, #4]
   18a8c:	ldr	r2, [r4, #4]
   18a90:	cmp	r2, #0
   18a94:	beq	18b2c <fts_children@@Base+0x5dc>
   18a98:	ldr	r3, [r2]
   18a9c:	cmp	r3, r5
   18aa0:	beq	18ac4 <fts_children@@Base+0x574>
   18aa4:	mov	r1, r3
   18aa8:	mov	r0, r5
   18aac:	ldr	r3, [r6, #28]
   18ab0:	blx	r3
   18ab4:	cmp	r0, #0
   18ab8:	beq	18a88 <fts_children@@Base+0x538>
   18abc:	ldr	r2, [r4, #4]
   18ac0:	ldr	r3, [r2]
   18ac4:	cmp	r7, #0
   18ac8:	beq	18b24 <fts_children@@Base+0x5d4>
   18acc:	ldr	r0, [r2, #4]
   18ad0:	mov	r1, #0
   18ad4:	str	r0, [r4, #4]
   18ad8:	str	r1, [r2]
   18adc:	ldr	r1, [r6, #36]	; 0x24
   18ae0:	mov	r0, r3
   18ae4:	str	r1, [r2, #4]
   18ae8:	str	r2, [r6, #36]	; 0x24
   18aec:	pop	{r4, r5, r6, r7, r8, pc}
   18af0:	mov	r3, r1
   18af4:	cmp	r7, #0
   18af8:	beq	18b24 <fts_children@@Base+0x5d4>
   18afc:	ldr	r2, [r4, #4]
   18b00:	cmp	r2, #0
   18b04:	movne	ip, #0
   18b08:	ldmne	r2, {r0, r1}
   18b0c:	streq	r2, [r4]
   18b10:	stmne	r4, {r0, r1}
   18b14:	strne	ip, [r2]
   18b18:	ldrne	r1, [r6, #36]	; 0x24
   18b1c:	strne	r1, [r2, #4]
   18b20:	strne	r2, [r6, #36]	; 0x24
   18b24:	mov	r0, r3
   18b28:	pop	{r4, r5, r6, r7, r8, pc}
   18b2c:	mov	r3, #0
   18b30:	mov	r0, r3
   18b34:	pop	{r4, r5, r6, r7, r8, pc}
   18b38:	ldr	r2, [pc, #164]	; 18be4 <fts_children@@Base+0x694>
   18b3c:	ldr	r3, [r0]
   18b40:	cmp	r3, r2
   18b44:	beq	18bcc <fts_children@@Base+0x67c>
   18b48:	vldr	s15, [r3, #8]
   18b4c:	vldr	s14, [pc, #128]	; 18bd4 <fts_children@@Base+0x684>
   18b50:	vcmpe.f32	s15, s14
   18b54:	vmrs	APSR_nzcv, fpscr
   18b58:	ble	18bc0 <fts_children@@Base+0x670>
   18b5c:	vldr	s13, [pc, #116]	; 18bd8 <fts_children@@Base+0x688>
   18b60:	vcmpe.f32	s15, s13
   18b64:	vmrs	APSR_nzcv, fpscr
   18b68:	bpl	18bc0 <fts_children@@Base+0x670>
   18b6c:	vldr	s13, [pc, #104]	; 18bdc <fts_children@@Base+0x68c>
   18b70:	vldr	s12, [r3, #12]
   18b74:	vcmpe.f32	s12, s13
   18b78:	vmrs	APSR_nzcv, fpscr
   18b7c:	ble	18bc0 <fts_children@@Base+0x670>
   18b80:	vldr	s13, [r3]
   18b84:	vcmpe.f32	s13, #0.0
   18b88:	vmrs	APSR_nzcv, fpscr
   18b8c:	blt	18bc0 <fts_children@@Base+0x670>
   18b90:	vadd.f32	s14, s13, s14
   18b94:	vldr	s13, [r3, #4]
   18b98:	vcmpe.f32	s14, s13
   18b9c:	vmrs	APSR_nzcv, fpscr
   18ba0:	bpl	18bc0 <fts_children@@Base+0x670>
   18ba4:	vldr	s12, [pc, #52]	; 18be0 <fts_children@@Base+0x690>
   18ba8:	vcmpe.f32	s13, s12
   18bac:	vmrs	APSR_nzcv, fpscr
   18bb0:	bhi	18bc0 <fts_children@@Base+0x670>
   18bb4:	vcmpe.f32	s15, s14
   18bb8:	vmrs	APSR_nzcv, fpscr
   18bbc:	bgt	18bcc <fts_children@@Base+0x67c>
   18bc0:	str	r2, [r0]
   18bc4:	mov	r0, #0
   18bc8:	bx	lr
   18bcc:	mov	r0, #1
   18bd0:	bx	lr
   18bd4:	stclcc	12, cr12, [ip, #820]	; 0x334
   18bd8:	svccc	0x00666666
   18bdc:	svccc	0x008ccccd
   18be0:	svccc	0x00800000
   18be4:	andeq	fp, r1, r0, asr r9
   18be8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18bec:	ldr	r3, [r1, #4]
   18bf0:	ldr	r6, [r1]
   18bf4:	cmp	r6, r3
   18bf8:	bcs	18cc0 <fts_children@@Base+0x770>
   18bfc:	mov	r8, r2
   18c00:	mov	r5, r0
   18c04:	mov	r7, r1
   18c08:	add	r6, r6, #8
   18c0c:	mov	r9, #0
   18c10:	b	18c20 <fts_children@@Base+0x6d0>
   18c14:	cmp	r3, r6
   18c18:	add	r6, r6, #8
   18c1c:	bls	18cc0 <fts_children@@Base+0x770>
   18c20:	ldr	sl, [r6, #-8]
   18c24:	cmp	sl, #0
   18c28:	beq	18c14 <fts_children@@Base+0x6c4>
   18c2c:	ldr	r4, [r6, #-4]
   18c30:	cmp	r4, #0
   18c34:	bne	18c54 <fts_children@@Base+0x704>
   18c38:	b	18ca4 <fts_children@@Base+0x754>
   18c3c:	ldr	r2, [r0, #4]
   18c40:	cmp	r3, #0
   18c44:	str	r2, [r4, #4]
   18c48:	str	r4, [r0, #4]
   18c4c:	mov	r4, r3
   18c50:	beq	18ca0 <fts_children@@Base+0x750>
   18c54:	ldr	sl, [r4]
   18c58:	mov	r0, r5
   18c5c:	mov	r1, sl
   18c60:	bl	189ec <fts_children@@Base+0x49c>
   18c64:	ldr	r3, [r4, #4]
   18c68:	ldr	r2, [r0]
   18c6c:	cmp	r2, #0
   18c70:	bne	18c3c <fts_children@@Base+0x6ec>
   18c74:	ldr	r1, [r5, #12]
   18c78:	str	sl, [r0]
   18c7c:	add	r1, r1, #1
   18c80:	str	r1, [r5, #12]
   18c84:	str	r2, [r4]
   18c88:	ldr	r2, [r5, #36]	; 0x24
   18c8c:	cmp	r3, #0
   18c90:	str	r2, [r4, #4]
   18c94:	str	r4, [r5, #36]	; 0x24
   18c98:	mov	r4, r3
   18c9c:	bne	18c54 <fts_children@@Base+0x704>
   18ca0:	ldr	sl, [r6, #-8]
   18ca4:	cmp	r8, #0
   18ca8:	str	r9, [r6, #-4]
   18cac:	beq	18cc8 <fts_children@@Base+0x778>
   18cb0:	ldr	r3, [r7, #4]
   18cb4:	cmp	r3, r6
   18cb8:	add	r6, r6, #8
   18cbc:	bhi	18c20 <fts_children@@Base+0x6d0>
   18cc0:	mov	r0, #1
   18cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18cc8:	mov	r1, sl
   18ccc:	mov	r0, r5
   18cd0:	bl	189ec <fts_children@@Base+0x49c>
   18cd4:	ldr	r3, [r0]
   18cd8:	mov	r4, r0
   18cdc:	cmp	r3, #0
   18ce0:	beq	18d20 <fts_children@@Base+0x7d0>
   18ce4:	ldr	r0, [r5, #36]	; 0x24
   18ce8:	cmp	r0, #0
   18cec:	beq	18d34 <fts_children@@Base+0x7e4>
   18cf0:	ldr	r3, [r0, #4]
   18cf4:	str	r3, [r5, #36]	; 0x24
   18cf8:	ldr	r3, [r4, #4]
   18cfc:	str	sl, [r0]
   18d00:	str	r3, [r0, #4]
   18d04:	str	r0, [r4, #4]
   18d08:	ldr	r2, [r7, #12]
   18d0c:	str	r9, [r6, #-8]
   18d10:	sub	r2, r2, #1
   18d14:	ldr	r3, [r7, #4]
   18d18:	str	r2, [r7, #12]
   18d1c:	b	18c14 <fts_children@@Base+0x6c4>
   18d20:	ldr	r3, [r5, #12]
   18d24:	str	sl, [r0]
   18d28:	add	r3, r3, #1
   18d2c:	str	r3, [r5, #12]
   18d30:	b	18d08 <fts_children@@Base+0x7b8>
   18d34:	mov	r0, #8
   18d38:	bl	112b0 <malloc@plt>
   18d3c:	cmp	r0, #0
   18d40:	bne	18cf8 <fts_children@@Base+0x7a8>
   18d44:	mov	r0, r8
   18d48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d4c:	ldr	r0, [r0, #8]
   18d50:	bx	lr
   18d54:	ldr	r0, [r0, #12]
   18d58:	bx	lr
   18d5c:	ldr	r0, [r0, #16]
   18d60:	bx	lr
   18d64:	ldm	r0, {r1, r3}
   18d68:	cmp	r1, r3
   18d6c:	bcs	18dd4 <fts_children@@Base+0x884>
   18d70:	sub	ip, r3, #1
   18d74:	sub	ip, ip, r1
   18d78:	add	r3, r1, #16
   18d7c:	bic	ip, ip, #7
   18d80:	add	ip, ip, r3
   18d84:	add	r1, r1, #8
   18d88:	mov	r0, #0
   18d8c:	b	18d9c <fts_children@@Base+0x84c>
   18d90:	add	r1, r1, #8
   18d94:	cmp	r1, ip
   18d98:	bxeq	lr
   18d9c:	ldr	r3, [r1, #-8]
   18da0:	cmp	r3, #0
   18da4:	beq	18d90 <fts_children@@Base+0x840>
   18da8:	ldr	r3, [r1, #-4]
   18dac:	mov	r2, #1
   18db0:	cmp	r3, #0
   18db4:	beq	18dc8 <fts_children@@Base+0x878>
   18db8:	ldr	r3, [r3, #4]
   18dbc:	add	r2, r2, #1
   18dc0:	cmp	r3, #0
   18dc4:	bne	18db8 <fts_children@@Base+0x868>
   18dc8:	cmp	r0, r2
   18dcc:	movcc	r0, r2
   18dd0:	b	18d90 <fts_children@@Base+0x840>
   18dd4:	mov	r0, #0
   18dd8:	bx	lr
   18ddc:	ldm	r0, {r1, r3}
   18de0:	push	{lr}		; (str lr, [sp, #-4]!)
   18de4:	cmp	r1, r3
   18de8:	bcs	18e78 <fts_children@@Base+0x928>
   18dec:	sub	ip, r3, #1
   18df0:	sub	ip, ip, r1
   18df4:	add	r3, r1, #16
   18df8:	bic	ip, ip, #7
   18dfc:	mov	r2, #0
   18e00:	add	ip, ip, r3
   18e04:	add	r1, r1, #8
   18e08:	mov	lr, r2
   18e0c:	b	18e1c <fts_children@@Base+0x8cc>
   18e10:	add	r1, r1, #8
   18e14:	cmp	r1, ip
   18e18:	beq	18e58 <fts_children@@Base+0x908>
   18e1c:	ldr	r3, [r1, #-8]
   18e20:	cmp	r3, #0
   18e24:	beq	18e10 <fts_children@@Base+0x8c0>
   18e28:	ldr	r3, [r1, #-4]
   18e2c:	add	lr, lr, #1
   18e30:	cmp	r3, #0
   18e34:	add	r2, r2, #1
   18e38:	beq	18e10 <fts_children@@Base+0x8c0>
   18e3c:	ldr	r3, [r3, #4]
   18e40:	add	r2, r2, #1
   18e44:	cmp	r3, #0
   18e48:	bne	18e3c <fts_children@@Base+0x8ec>
   18e4c:	add	r1, r1, #8
   18e50:	cmp	r1, ip
   18e54:	bne	18e1c <fts_children@@Base+0x8cc>
   18e58:	ldr	r3, [r0, #12]
   18e5c:	cmp	r3, lr
   18e60:	ldreq	r0, [r0, #16]
   18e64:	subeq	r0, r0, r2
   18e68:	clzeq	r0, r0
   18e6c:	lsreq	r0, r0, #5
   18e70:	movne	r0, #0
   18e74:	pop	{pc}		; (ldr pc, [sp], #4)
   18e78:	mov	r2, #0
   18e7c:	mov	lr, r2
   18e80:	b	18e58 <fts_children@@Base+0x908>
   18e84:	push	{r4, r5, r6, r7, lr}
   18e88:	mov	r4, r1
   18e8c:	ldr	r2, [r0]
   18e90:	ldr	r1, [r0, #4]
   18e94:	sub	sp, sp, #12
   18e98:	cmp	r2, r1
   18e9c:	ldr	r3, [r0, #16]
   18ea0:	ldrd	r6, [r0, #8]
   18ea4:	bcs	18f88 <fts_children@@Base+0xa38>
   18ea8:	sub	ip, r1, #1
   18eac:	sub	ip, ip, r2
   18eb0:	bic	ip, ip, #7
   18eb4:	add	r1, r2, #16
   18eb8:	add	ip, ip, r1
   18ebc:	add	r0, r2, #8
   18ec0:	mov	r5, #0
   18ec4:	b	18ed4 <fts_children@@Base+0x984>
   18ec8:	add	r0, r0, #8
   18ecc:	cmp	r0, ip
   18ed0:	beq	18f14 <fts_children@@Base+0x9c4>
   18ed4:	ldr	r2, [r0, #-8]
   18ed8:	cmp	r2, #0
   18edc:	beq	18ec8 <fts_children@@Base+0x978>
   18ee0:	ldr	r2, [r0, #-4]
   18ee4:	mov	r1, #1
   18ee8:	cmp	r2, #0
   18eec:	beq	18f00 <fts_children@@Base+0x9b0>
   18ef0:	ldr	r2, [r2, #4]
   18ef4:	add	r1, r1, #1
   18ef8:	cmp	r2, #0
   18efc:	bne	18ef0 <fts_children@@Base+0x9a0>
   18f00:	cmp	r5, r1
   18f04:	add	r0, r0, #8
   18f08:	movcc	r5, r1
   18f0c:	cmp	r0, ip
   18f10:	bne	18ed4 <fts_children@@Base+0x984>
   18f14:	ldr	r2, [pc, #124]	; 18f98 <fts_children@@Base+0xa48>
   18f18:	mov	r1, #1
   18f1c:	mov	r0, r4
   18f20:	bl	1137c <__fprintf_chk@plt>
   18f24:	mov	r3, r6
   18f28:	ldr	r2, [pc, #108]	; 18f9c <fts_children@@Base+0xa4c>
   18f2c:	mov	r1, #1
   18f30:	mov	r0, r4
   18f34:	bl	1137c <__fprintf_chk@plt>
   18f38:	vmov	s15, r7
   18f3c:	vldr	d5, [pc, #76]	; 18f90 <fts_children@@Base+0xa40>
   18f40:	mov	r3, r7
   18f44:	ldr	r2, [pc, #84]	; 18fa0 <fts_children@@Base+0xa50>
   18f48:	vcvt.f64.u32	d6, s15
   18f4c:	vmov	s15, r6
   18f50:	mov	r1, #1
   18f54:	mov	r0, r4
   18f58:	vcvt.f64.u32	d7, s15
   18f5c:	vmul.f64	d6, d6, d5
   18f60:	vdiv.f64	d5, d6, d7
   18f64:	vstr	d5, [sp]
   18f68:	bl	1137c <__fprintf_chk@plt>
   18f6c:	mov	r3, r5
   18f70:	mov	r0, r4
   18f74:	ldr	r2, [pc, #40]	; 18fa4 <fts_children@@Base+0xa54>
   18f78:	mov	r1, #1
   18f7c:	add	sp, sp, #12
   18f80:	pop	{r4, r5, r6, r7, lr}
   18f84:	b	1137c <__fprintf_chk@plt>
   18f88:	mov	r5, #0
   18f8c:	b	18f14 <fts_children@@Base+0x9c4>
   18f90:	andeq	r0, r0, r0
   18f94:	subsmi	r0, r9, r0
   18f98:	andeq	fp, r1, r4, ror #18
   18f9c:	andeq	fp, r1, ip, ror r9
   18fa0:	muleq	r1, r4, r9
   18fa4:			; <UNDEFINED> instruction: 0x0001b9b8
   18fa8:	push	{r4, r5, r6, lr}
   18fac:	mov	r6, r0
   18fb0:	mov	r5, r1
   18fb4:	bl	189ec <fts_children@@Base+0x49c>
   18fb8:	ldr	r3, [r0]
   18fbc:	cmp	r3, #0
   18fc0:	beq	18ffc <fts_children@@Base+0xaac>
   18fc4:	mov	r4, r0
   18fc8:	b	18fd0 <fts_children@@Base+0xa80>
   18fcc:	ldr	r3, [r4]
   18fd0:	cmp	r3, r5
   18fd4:	mov	r1, r3
   18fd8:	mov	r0, r5
   18fdc:	beq	19008 <fts_children@@Base+0xab8>
   18fe0:	ldr	r3, [r6, #28]
   18fe4:	blx	r3
   18fe8:	cmp	r0, #0
   18fec:	bne	19004 <fts_children@@Base+0xab4>
   18ff0:	ldr	r4, [r4, #4]
   18ff4:	cmp	r4, #0
   18ff8:	bne	18fcc <fts_children@@Base+0xa7c>
   18ffc:	mov	r0, #0
   19000:	pop	{r4, r5, r6, pc}
   19004:	ldr	r5, [r4]
   19008:	mov	r0, r5
   1900c:	pop	{r4, r5, r6, pc}
   19010:	ldr	r3, [r0, #16]
   19014:	cmp	r3, #0
   19018:	beq	19068 <fts_children@@Base+0xb18>
   1901c:	ldr	r3, [r0]
   19020:	ldr	r2, [r0, #4]
   19024:	cmp	r3, r2
   19028:	bcs	19060 <fts_children@@Base+0xb10>
   1902c:	ldr	r0, [r3]
   19030:	cmp	r0, #0
   19034:	bxne	lr
   19038:	sub	r2, r2, #1
   1903c:	sub	r2, r2, r3
   19040:	bic	r2, r2, #7
   19044:	add	r2, r3, r2
   19048:	b	19058 <fts_children@@Base+0xb08>
   1904c:	ldr	r0, [r3, #8]!
   19050:	cmp	r0, #0
   19054:	bxne	lr
   19058:	cmp	r3, r2
   1905c:	bne	1904c <fts_children@@Base+0xafc>
   19060:	push	{r4, lr}
   19064:	bl	11448 <abort@plt>
   19068:	mov	r0, r3
   1906c:	bx	lr
   19070:	push	{r4, r5, r6, lr}
   19074:	mov	r5, r0
   19078:	mov	r4, r1
   1907c:	bl	189ec <fts_children@@Base+0x49c>
   19080:	mov	r2, r0
   19084:	mov	r3, r0
   19088:	b	19094 <fts_children@@Base+0xb44>
   1908c:	cmp	r3, #0
   19090:	beq	190a8 <fts_children@@Base+0xb58>
   19094:	ldm	r3, {r1, r3}
   19098:	cmp	r1, r4
   1909c:	bne	1908c <fts_children@@Base+0xb3c>
   190a0:	cmp	r3, #0
   190a4:	bne	190d0 <fts_children@@Base+0xb80>
   190a8:	ldr	r3, [r5, #4]
   190ac:	b	190bc <fts_children@@Base+0xb6c>
   190b0:	ldr	r0, [r2]
   190b4:	cmp	r0, #0
   190b8:	popne	{r4, r5, r6, pc}
   190bc:	add	r2, r2, #8
   190c0:	cmp	r3, r2
   190c4:	bhi	190b0 <fts_children@@Base+0xb60>
   190c8:	mov	r0, #0
   190cc:	pop	{r4, r5, r6, pc}
   190d0:	ldr	r0, [r3]
   190d4:	pop	{r4, r5, r6, pc}
   190d8:	push	{r4, r5, lr}
   190dc:	ldm	r0, {r5, lr}
   190e0:	cmp	lr, r5
   190e4:	bls	19168 <fts_children@@Base+0xc18>
   190e8:	mov	ip, #0
   190ec:	ldr	r3, [r5]
   190f0:	cmp	r3, #0
   190f4:	bne	19110 <fts_children@@Base+0xbc0>
   190f8:	add	r5, r5, #8
   190fc:	cmp	lr, r5
   19100:	bhi	190ec <fts_children@@Base+0xb9c>
   19104:	mov	r2, ip
   19108:	mov	r0, r2
   1910c:	pop	{r4, r5, pc}
   19110:	cmp	r2, ip
   19114:	bls	19104 <fts_children@@Base+0xbb4>
   19118:	str	r3, [r1, ip, lsl #2]
   1911c:	ldr	r3, [r5, #4]
   19120:	add	r4, ip, #1
   19124:	cmp	r3, #0
   19128:	add	lr, r1, ip, lsl #2
   1912c:	beq	1915c <fts_children@@Base+0xc0c>
   19130:	mov	ip, r4
   19134:	cmp	r2, ip
   19138:	beq	19108 <fts_children@@Base+0xbb8>
   1913c:	ldr	r4, [r3]
   19140:	add	ip, ip, #1
   19144:	str	r4, [lr, #4]!
   19148:	ldr	r3, [r3, #4]
   1914c:	cmp	r3, #0
   19150:	bne	19134 <fts_children@@Base+0xbe4>
   19154:	ldr	lr, [r0, #4]
   19158:	b	190f8 <fts_children@@Base+0xba8>
   1915c:	ldr	lr, [r0, #4]
   19160:	mov	ip, r4
   19164:	b	190f8 <fts_children@@Base+0xba8>
   19168:	mov	r2, #0
   1916c:	b	19108 <fts_children@@Base+0xbb8>
   19170:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19174:	ldr	r3, [r0, #4]
   19178:	ldr	r8, [r0]
   1917c:	cmp	r3, r8
   19180:	bls	191e8 <fts_children@@Base+0xc98>
   19184:	mov	r7, r2
   19188:	mov	r6, r1
   1918c:	mov	r9, r0
   19190:	mov	r5, #0
   19194:	ldr	r0, [r8]
   19198:	cmp	r0, #0
   1919c:	bne	191b4 <fts_children@@Base+0xc64>
   191a0:	add	r8, r8, #8
   191a4:	cmp	r3, r8
   191a8:	bhi	19194 <fts_children@@Base+0xc44>
   191ac:	mov	r0, r5
   191b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191b4:	mov	r4, r8
   191b8:	b	191c0 <fts_children@@Base+0xc70>
   191bc:	ldr	r0, [r4]
   191c0:	mov	r1, r7
   191c4:	blx	r6
   191c8:	cmp	r0, #0
   191cc:	beq	191ac <fts_children@@Base+0xc5c>
   191d0:	ldr	r4, [r4, #4]
   191d4:	add	r5, r5, #1
   191d8:	cmp	r4, #0
   191dc:	bne	191bc <fts_children@@Base+0xc6c>
   191e0:	ldr	r3, [r9, #4]
   191e4:	b	191a0 <fts_children@@Base+0xc50>
   191e8:	mov	r5, #0
   191ec:	b	191ac <fts_children@@Base+0xc5c>
   191f0:	push	{r4, r5, r6, lr}
   191f4:	mov	r4, r0
   191f8:	ldrb	r0, [r0]
   191fc:	cmp	r0, #0
   19200:	beq	19230 <fts_children@@Base+0xce0>
   19204:	mov	r5, r1
   19208:	mov	r1, #0
   1920c:	rsb	r1, r1, r1, lsl #5
   19210:	add	r0, r1, r0
   19214:	mov	r1, r5
   19218:	bl	1a084 <fts_children@@Base+0x1b34>
   1921c:	ldrb	r0, [r4, #1]!
   19220:	cmp	r0, #0
   19224:	bne	1920c <fts_children@@Base+0xcbc>
   19228:	mov	r0, r1
   1922c:	pop	{r4, r5, r6, pc}
   19230:	mov	r1, r0
   19234:	mov	r0, r1
   19238:	pop	{r4, r5, r6, pc}
   1923c:	push	{lr}		; (str lr, [sp, #-4]!)
   19240:	mov	ip, r0
   19244:	ldr	lr, [pc, #16]	; 1925c <fts_children@@Base+0xd0c>
   19248:	ldm	lr!, {r0, r1, r2, r3}
   1924c:	ldr	lr, [lr]
   19250:	stmia	ip!, {r0, r1, r2, r3}
   19254:	str	lr, [ip]
   19258:	pop	{pc}		; (ldr pc, [sp], #4)
   1925c:	andeq	fp, r1, r0, asr r9
   19260:	push	{r4, r5, r6, r7, r8, lr}
   19264:	sub	sp, sp, #8
   19268:	cmp	r2, #0
   1926c:	ldr	ip, [pc, #300]	; 193a0 <fts_children@@Base+0xe50>
   19270:	str	r0, [sp, #4]
   19274:	ldr	r5, [pc, #296]	; 193a4 <fts_children@@Base+0xe54>
   19278:	mov	r0, #40	; 0x28
   1927c:	movne	r5, r2
   19280:	cmp	r3, #0
   19284:	movne	r8, r3
   19288:	moveq	r8, ip
   1928c:	mov	r6, r1
   19290:	bl	112b0 <malloc@plt>
   19294:	subs	r4, r0, #0
   19298:	beq	19364 <fts_children@@Base+0xe14>
   1929c:	cmp	r6, #0
   192a0:	add	r0, r4, #20
   192a4:	beq	19340 <fts_children@@Base+0xdf0>
   192a8:	str	r6, [r4, #20]
   192ac:	bl	18b38 <fts_children@@Base+0x5e8>
   192b0:	cmp	r0, #0
   192b4:	beq	19358 <fts_children@@Base+0xe08>
   192b8:	ldrb	r3, [r6, #16]
   192bc:	cmp	r3, #0
   192c0:	vldreq	s13, [r6, #8]
   192c4:	beq	19370 <fts_children@@Base+0xe20>
   192c8:	ldr	r0, [sp, #4]
   192cc:	bl	18930 <fts_children@@Base+0x3e0>
   192d0:	lsrs	r3, r0, #30
   192d4:	movne	r7, #1
   192d8:	moveq	r7, #0
   192dc:	tst	r0, #536870912	; 0x20000000
   192e0:	mov	r6, r0
   192e4:	bne	19358 <fts_children@@Base+0xe08>
   192e8:	cmp	r7, #0
   192ec:	bne	19358 <fts_children@@Base+0xe08>
   192f0:	cmp	r0, #0
   192f4:	str	r0, [r4, #8]
   192f8:	beq	19358 <fts_children@@Base+0xe08>
   192fc:	mov	r1, #8
   19300:	bl	1113c <calloc@plt>
   19304:	cmp	r0, #0
   19308:	str	r0, [r4]
   1930c:	beq	19358 <fts_children@@Base+0xe08>
   19310:	ldr	r3, [sp, #32]
   19314:	add	r0, r0, r6, lsl #3
   19318:	str	r0, [r4, #4]
   1931c:	str	r7, [r4, #12]
   19320:	mov	r0, r4
   19324:	str	r7, [r4, #16]
   19328:	str	r5, [r4, #24]
   1932c:	str	r8, [r4, #28]
   19330:	str	r3, [r4, #32]
   19334:	str	r7, [r4, #36]	; 0x24
   19338:	add	sp, sp, #8
   1933c:	pop	{r4, r5, r6, r7, r8, pc}
   19340:	ldr	r3, [pc, #96]	; 193a8 <fts_children@@Base+0xe58>
   19344:	str	r3, [r4, #20]
   19348:	bl	18b38 <fts_children@@Base+0x5e8>
   1934c:	cmp	r0, #0
   19350:	vldrne	s13, [pc, #64]	; 19398 <fts_children@@Base+0xe48>
   19354:	bne	19370 <fts_children@@Base+0xe20>
   19358:	mov	r0, r4
   1935c:	bl	111a8 <free@plt>
   19360:	mov	r4, #0
   19364:	mov	r0, r4
   19368:	add	sp, sp, #8
   1936c:	pop	{r4, r5, r6, r7, r8, pc}
   19370:	vldr	s15, [sp, #4]
   19374:	vldr	s14, [pc, #32]	; 1939c <fts_children@@Base+0xe4c>
   19378:	vcvt.f32.u32	s12, s15
   1937c:	vdiv.f32	s15, s12, s13
   19380:	vcmpe.f32	s15, s14
   19384:	vmrs	APSR_nzcv, fpscr
   19388:	bge	19358 <fts_children@@Base+0xe08>
   1938c:	vcvt.u32.f32	s15, s15
   19390:	vstr	s15, [sp, #4]
   19394:	b	192c8 <fts_children@@Base+0xd78>
   19398:	svccc	0x004ccccd
   1939c:	svcmi	0x00800000
   193a0:	ldrdeq	r8, [r1], -ip
   193a4:	andeq	r8, r1, r8, asr #19
   193a8:	andeq	fp, r1, r0, asr r9
   193ac:	push	{r4, r5, r6, r7, r8, lr}
   193b0:	mov	r5, r0
   193b4:	ldr	r6, [r0]
   193b8:	ldr	r2, [r0, #4]
   193bc:	cmp	r6, r2
   193c0:	addcc	r6, r6, #8
   193c4:	movcc	r7, #0
   193c8:	bcc	193dc <fts_children@@Base+0xe8c>
   193cc:	b	19450 <fts_children@@Base+0xf00>
   193d0:	cmp	r2, r6
   193d4:	add	r6, r6, #8
   193d8:	bls	19450 <fts_children@@Base+0xf00>
   193dc:	ldr	r3, [r6, #-8]
   193e0:	cmp	r3, #0
   193e4:	beq	193d0 <fts_children@@Base+0xe80>
   193e8:	ldr	r4, [r6, #-4]
   193ec:	ldr	r2, [r5, #32]
   193f0:	cmp	r4, #0
   193f4:	beq	19428 <fts_children@@Base+0xed8>
   193f8:	cmp	r2, #0
   193fc:	beq	1940c <fts_children@@Base+0xebc>
   19400:	ldr	r0, [r4]
   19404:	blx	r2
   19408:	ldr	r2, [r5, #32]
   1940c:	ldr	r3, [r4, #4]
   19410:	ldr	r1, [r5, #36]	; 0x24
   19414:	str	r7, [r4]
   19418:	str	r1, [r4, #4]
   1941c:	str	r4, [r5, #36]	; 0x24
   19420:	subs	r4, r3, #0
   19424:	bne	193f8 <fts_children@@Base+0xea8>
   19428:	cmp	r2, #0
   1942c:	beq	19438 <fts_children@@Base+0xee8>
   19430:	ldr	r0, [r6, #-8]
   19434:	blx	r2
   19438:	str	r7, [r6, #-8]
   1943c:	str	r7, [r6, #-4]
   19440:	ldr	r2, [r5, #4]
   19444:	cmp	r2, r6
   19448:	add	r6, r6, #8
   1944c:	bhi	193dc <fts_children@@Base+0xe8c>
   19450:	mov	r3, #0
   19454:	str	r3, [r5, #12]
   19458:	str	r3, [r5, #16]
   1945c:	pop	{r4, r5, r6, r7, r8, pc}
   19460:	ldr	r3, [r0, #32]
   19464:	push	{r4, r5, r6, lr}
   19468:	cmp	r3, #0
   1946c:	mov	r6, r0
   19470:	ldr	r5, [r0]
   19474:	ldr	r3, [r0, #4]
   19478:	beq	194e0 <fts_children@@Base+0xf90>
   1947c:	ldr	r2, [r0, #16]
   19480:	cmp	r2, #0
   19484:	beq	194e0 <fts_children@@Base+0xf90>
   19488:	cmp	r5, r3
   1948c:	bcc	194a0 <fts_children@@Base+0xf50>
   19490:	b	19514 <fts_children@@Base+0xfc4>
   19494:	add	r5, r5, #8
   19498:	cmp	r3, r5
   1949c:	bls	194dc <fts_children@@Base+0xf8c>
   194a0:	ldr	r0, [r5]
   194a4:	cmp	r0, #0
   194a8:	beq	19494 <fts_children@@Base+0xf44>
   194ac:	mov	r4, r5
   194b0:	b	194b8 <fts_children@@Base+0xf68>
   194b4:	ldr	r0, [r4]
   194b8:	ldr	r3, [r6, #32]
   194bc:	blx	r3
   194c0:	ldr	r4, [r4, #4]
   194c4:	cmp	r4, #0
   194c8:	bne	194b4 <fts_children@@Base+0xf64>
   194cc:	ldr	r3, [r6, #4]
   194d0:	add	r5, r5, #8
   194d4:	cmp	r3, r5
   194d8:	bhi	194a0 <fts_children@@Base+0xf50>
   194dc:	ldr	r5, [r6]
   194e0:	cmp	r5, r3
   194e4:	bcs	19514 <fts_children@@Base+0xfc4>
   194e8:	ldr	r0, [r5, #4]
   194ec:	cmp	r0, #0
   194f0:	beq	19508 <fts_children@@Base+0xfb8>
   194f4:	ldr	r4, [r0, #4]
   194f8:	bl	111a8 <free@plt>
   194fc:	subs	r0, r4, #0
   19500:	bne	194f4 <fts_children@@Base+0xfa4>
   19504:	ldr	r3, [r6, #4]
   19508:	add	r5, r5, #8
   1950c:	cmp	r3, r5
   19510:	bhi	194e8 <fts_children@@Base+0xf98>
   19514:	ldr	r0, [r6, #36]	; 0x24
   19518:	cmp	r0, #0
   1951c:	beq	19530 <fts_children@@Base+0xfe0>
   19520:	ldr	r4, [r0, #4]
   19524:	bl	111a8 <free@plt>
   19528:	subs	r0, r4, #0
   1952c:	bne	19520 <fts_children@@Base+0xfd0>
   19530:	ldr	r0, [r6]
   19534:	bl	111a8 <free@plt>
   19538:	mov	r0, r6
   1953c:	pop	{r4, r5, r6, lr}
   19540:	b	111a8 <free@plt>
   19544:	push	{r4, r5, r6, r7, r8, lr}
   19548:	sub	sp, sp, #56	; 0x38
   1954c:	ldr	r8, [r0, #20]
   19550:	ldr	r7, [pc, #392]	; 196e0 <fts_children@@Base+0x1190>
   19554:	mov	r6, r0
   19558:	ldrb	r3, [r8, #16]
   1955c:	ldr	r2, [r7]
   19560:	str	r1, [sp, #4]
   19564:	cmp	r3, #0
   19568:	str	r2, [sp, #52]	; 0x34
   1956c:	bne	19598 <fts_children@@Base+0x1048>
   19570:	vmov	s15, r1
   19574:	vldr	s13, [r8, #8]
   19578:	vldr	s14, [pc, #348]	; 196dc <fts_children@@Base+0x118c>
   1957c:	vcvt.f32.u32	s12, s15
   19580:	vdiv.f32	s15, s12, s13
   19584:	vcmpe.f32	s15, s14
   19588:	vmrs	APSR_nzcv, fpscr
   1958c:	vcvtlt.u32.f32	s15, s15
   19590:	vstrlt	s15, [sp, #4]
   19594:	bge	195c8 <fts_children@@Base+0x1078>
   19598:	ldr	r0, [sp, #4]
   1959c:	bl	18930 <fts_children@@Base+0x3e0>
   195a0:	lsrs	r3, r0, #30
   195a4:	movne	r4, #1
   195a8:	moveq	r4, #0
   195ac:	tst	r0, #536870912	; 0x20000000
   195b0:	movne	r4, #1
   195b4:	cmp	r0, #0
   195b8:	moveq	r4, #1
   195bc:	cmp	r4, #0
   195c0:	mov	r5, r0
   195c4:	beq	195e8 <fts_children@@Base+0x1098>
   195c8:	mov	r4, #0
   195cc:	ldr	r2, [sp, #52]	; 0x34
   195d0:	ldr	r3, [r7]
   195d4:	mov	r0, r4
   195d8:	cmp	r2, r3
   195dc:	bne	196d4 <fts_children@@Base+0x1184>
   195e0:	add	sp, sp, #56	; 0x38
   195e4:	pop	{r4, r5, r6, r7, r8, pc}
   195e8:	ldr	r3, [r6, #8]
   195ec:	cmp	r3, r0
   195f0:	beq	1969c <fts_children@@Base+0x114c>
   195f4:	mov	r1, #8
   195f8:	bl	1113c <calloc@plt>
   195fc:	cmp	r0, #0
   19600:	str	r0, [sp, #12]
   19604:	beq	195c8 <fts_children@@Base+0x1078>
   19608:	add	r0, r0, r5, lsl #3
   1960c:	ldr	r1, [r6, #32]
   19610:	str	r0, [sp, #16]
   19614:	ldr	r0, [r6, #28]
   19618:	ldr	ip, [r6, #24]
   1961c:	ldr	r3, [r6, #36]	; 0x24
   19620:	mov	r2, r4
   19624:	str	r0, [sp, #40]	; 0x28
   19628:	str	r1, [sp, #44]	; 0x2c
   1962c:	add	r0, sp, #12
   19630:	mov	r1, r6
   19634:	str	r4, [sp, #24]
   19638:	str	r4, [sp, #28]
   1963c:	str	r5, [sp, #20]
   19640:	str	r8, [sp, #32]
   19644:	str	ip, [sp, #36]	; 0x24
   19648:	str	r3, [sp, #48]	; 0x30
   1964c:	bl	18be8 <fts_children@@Base+0x698>
   19650:	subs	r4, r0, #0
   19654:	bne	196a4 <fts_children@@Base+0x1154>
   19658:	ldr	r3, [sp, #48]	; 0x30
   1965c:	mov	r2, #1
   19660:	str	r3, [r6, #36]	; 0x24
   19664:	add	r1, sp, #12
   19668:	mov	r0, r6
   1966c:	bl	18be8 <fts_children@@Base+0x698>
   19670:	cmp	r0, #0
   19674:	beq	196d8 <fts_children@@Base+0x1188>
   19678:	add	r1, sp, #12
   1967c:	mov	r0, r6
   19680:	mov	r2, r4
   19684:	bl	18be8 <fts_children@@Base+0x698>
   19688:	cmp	r0, #0
   1968c:	beq	196d8 <fts_children@@Base+0x1188>
   19690:	ldr	r0, [sp, #12]
   19694:	bl	111a8 <free@plt>
   19698:	b	195cc <fts_children@@Base+0x107c>
   1969c:	mov	r4, #1
   196a0:	b	195cc <fts_children@@Base+0x107c>
   196a4:	ldr	r0, [r6]
   196a8:	bl	111a8 <free@plt>
   196ac:	ldrd	r2, [sp, #12]
   196b0:	ldr	r1, [sp, #20]
   196b4:	str	r2, [r6]
   196b8:	str	r3, [r6, #4]
   196bc:	ldr	r2, [sp, #24]
   196c0:	ldr	r3, [sp, #48]	; 0x30
   196c4:	str	r1, [r6, #8]
   196c8:	str	r2, [r6, #12]
   196cc:	str	r3, [r6, #36]	; 0x24
   196d0:	b	195cc <fts_children@@Base+0x107c>
   196d4:	bl	11208 <__stack_chk_fail@plt>
   196d8:	bl	11448 <abort@plt>
   196dc:	svcmi	0x00800000
   196e0:	andeq	fp, r2, r8, lsl #30
   196e4:	push	{r4, r5, r6, r7, lr}
   196e8:	sub	sp, sp, #12
   196ec:	ldr	r6, [pc, #404]	; 19888 <fts_children@@Base+0x1338>
   196f0:	subs	r7, r1, #0
   196f4:	ldr	r3, [r6]
   196f8:	str	r3, [sp, #4]
   196fc:	beq	1987c <fts_children@@Base+0x132c>
   19700:	mov	r5, r2
   19704:	mov	r3, #0
   19708:	mov	r2, sp
   1970c:	mov	r4, r0
   19710:	bl	18a20 <fts_children@@Base+0x4d0>
   19714:	cmp	r0, #0
   19718:	beq	19744 <fts_children@@Base+0x11f4>
   1971c:	cmp	r5, #0
   19720:	moveq	r0, r5
   19724:	strne	r0, [r5]
   19728:	movne	r0, #0
   1972c:	ldr	r2, [sp, #4]
   19730:	ldr	r3, [r6]
   19734:	cmp	r2, r3
   19738:	bne	19880 <fts_children@@Base+0x1330>
   1973c:	add	sp, sp, #12
   19740:	pop	{r4, r5, r6, r7, pc}
   19744:	vldr	s15, [r4, #8]
   19748:	ldr	r3, [r4, #20]
   1974c:	vldr	s14, [r4, #12]
   19750:	vcvt.f32.u32	s15, s15
   19754:	vldr	s13, [r3, #8]
   19758:	vcvt.f32.u32	s14, s14
   1975c:	vmul.f32	s15, s15, s13
   19760:	vcmpe.f32	s14, s15
   19764:	vmrs	APSR_nzcv, fpscr
   19768:	bgt	197b4 <fts_children@@Base+0x1264>
   1976c:	ldr	r5, [sp]
   19770:	ldr	r3, [r5]
   19774:	cmp	r3, #0
   19778:	beq	19810 <fts_children@@Base+0x12c0>
   1977c:	ldr	r0, [r4, #36]	; 0x24
   19780:	cmp	r0, #0
   19784:	beq	19834 <fts_children@@Base+0x12e4>
   19788:	ldr	r3, [r0, #4]
   1978c:	str	r3, [r4, #36]	; 0x24
   19790:	ldr	r3, [r4, #16]
   19794:	ldr	r2, [r5, #4]
   19798:	add	r3, r3, #1
   1979c:	str	r7, [r0]
   197a0:	str	r2, [r0, #4]
   197a4:	str	r0, [r5, #4]
   197a8:	mov	r0, #1
   197ac:	str	r3, [r4, #16]
   197b0:	b	1972c <fts_children@@Base+0x11dc>
   197b4:	add	r0, r4, #20
   197b8:	bl	18b38 <fts_children@@Base+0x5e8>
   197bc:	vldr	s15, [r4, #8]
   197c0:	ldr	r3, [r4, #20]
   197c4:	vldr	s14, [r4, #12]
   197c8:	vcvt.f32.u32	s15, s15
   197cc:	vldr	s13, [r3, #8]
   197d0:	vcvt.f32.u32	s14, s14
   197d4:	vmul.f32	s12, s13, s15
   197d8:	vcmpe.f32	s14, s12
   197dc:	vmrs	APSR_nzcv, fpscr
   197e0:	ble	1976c <fts_children@@Base+0x121c>
   197e4:	vldr	s14, [r3, #12]
   197e8:	ldrb	r3, [r3, #16]
   197ec:	vmul.f32	s15, s15, s14
   197f0:	cmp	r3, #0
   197f4:	vldr	s14, [pc, #136]	; 19884 <fts_children@@Base+0x1334>
   197f8:	vmuleq.f32	s15, s15, s13
   197fc:	vcmpe.f32	s15, s14
   19800:	vmrs	APSR_nzcv, fpscr
   19804:	blt	19848 <fts_children@@Base+0x12f8>
   19808:	mvn	r0, #0
   1980c:	b	1972c <fts_children@@Base+0x11dc>
   19810:	ldr	r2, [r4, #16]
   19814:	ldr	r3, [r4, #12]
   19818:	add	r2, r2, #1
   1981c:	add	r3, r3, #1
   19820:	str	r7, [r5]
   19824:	mov	r0, #1
   19828:	str	r2, [r4, #16]
   1982c:	str	r3, [r4, #12]
   19830:	b	1972c <fts_children@@Base+0x11dc>
   19834:	mov	r0, #8
   19838:	bl	112b0 <malloc@plt>
   1983c:	cmp	r0, #0
   19840:	beq	19808 <fts_children@@Base+0x12b8>
   19844:	b	19790 <fts_children@@Base+0x1240>
   19848:	vcvt.u32.f32	s15, s15
   1984c:	mov	r0, r4
   19850:	vmov	r1, s15
   19854:	bl	19544 <fts_children@@Base+0xff4>
   19858:	cmp	r0, #0
   1985c:	beq	19808 <fts_children@@Base+0x12b8>
   19860:	mov	r2, sp
   19864:	mov	r3, #0
   19868:	mov	r1, r7
   1986c:	mov	r0, r4
   19870:	bl	18a20 <fts_children@@Base+0x4d0>
   19874:	cmp	r0, #0
   19878:	beq	1976c <fts_children@@Base+0x121c>
   1987c:	bl	11448 <abort@plt>
   19880:	bl	11208 <__stack_chk_fail@plt>
   19884:	svcmi	0x00800000
   19888:	andeq	fp, r2, r8, lsl #30
   1988c:	push	{r4, r5, lr}
   19890:	sub	sp, sp, #12
   19894:	ldr	r5, [pc, #68]	; 198e0 <fts_children@@Base+0x1390>
   19898:	mov	r2, sp
   1989c:	mov	r4, r1
   198a0:	ldr	r3, [r5]
   198a4:	str	r3, [sp, #4]
   198a8:	bl	196e4 <fts_children@@Base+0x1194>
   198ac:	cmn	r0, #1
   198b0:	moveq	r0, #0
   198b4:	beq	198c4 <fts_children@@Base+0x1374>
   198b8:	cmp	r0, #0
   198bc:	movne	r0, r4
   198c0:	ldreq	r0, [sp]
   198c4:	ldr	r2, [sp, #4]
   198c8:	ldr	r3, [r5]
   198cc:	cmp	r2, r3
   198d0:	bne	198dc <fts_children@@Base+0x138c>
   198d4:	add	sp, sp, #12
   198d8:	pop	{r4, r5, pc}
   198dc:	bl	11208 <__stack_chk_fail@plt>
   198e0:	andeq	fp, r2, r8, lsl #30
   198e4:	push	{r4, r5, r6, r7, lr}
   198e8:	sub	sp, sp, #12
   198ec:	ldr	r5, [pc, #276]	; 19a08 <fts_children@@Base+0x14b8>
   198f0:	mov	r3, #1
   198f4:	mov	r2, sp
   198f8:	ldr	ip, [r5]
   198fc:	mov	r4, r0
   19900:	str	ip, [sp, #4]
   19904:	bl	18a20 <fts_children@@Base+0x4d0>
   19908:	subs	r6, r0, #0
   1990c:	beq	1992c <fts_children@@Base+0x13dc>
   19910:	ldr	r2, [sp]
   19914:	ldr	r3, [r4, #16]
   19918:	ldr	r2, [r2]
   1991c:	sub	r3, r3, #1
   19920:	cmp	r2, #0
   19924:	str	r3, [r4, #16]
   19928:	beq	19948 <fts_children@@Base+0x13f8>
   1992c:	ldr	r2, [sp, #4]
   19930:	ldr	r3, [r5]
   19934:	mov	r0, r6
   19938:	cmp	r2, r3
   1993c:	bne	19a04 <fts_children@@Base+0x14b4>
   19940:	add	sp, sp, #12
   19944:	pop	{r4, r5, r6, r7, pc}
   19948:	vldr	s15, [r4, #8]
   1994c:	ldr	r3, [r4, #12]
   19950:	ldr	r2, [r4, #20]
   19954:	sub	r3, r3, #1
   19958:	vcvt.f32.u32	s14, s15
   1995c:	vldr	s13, [r2]
   19960:	vmov	s15, r3
   19964:	str	r3, [r4, #12]
   19968:	vcvt.f32.u32	s15, s15
   1996c:	vmul.f32	s14, s14, s13
   19970:	vcmpe.f32	s15, s14
   19974:	vmrs	APSR_nzcv, fpscr
   19978:	bpl	1992c <fts_children@@Base+0x13dc>
   1997c:	add	r0, r4, #20
   19980:	bl	18b38 <fts_children@@Base+0x5e8>
   19984:	vldr	s15, [r4, #8]
   19988:	ldr	r3, [r4, #20]
   1998c:	vldr	s13, [r4, #12]
   19990:	vcvt.f32.u32	s15, s15
   19994:	vldr	s14, [r3]
   19998:	vcvt.f32.u32	s13, s13
   1999c:	vmul.f32	s14, s15, s14
   199a0:	vcmpe.f32	s13, s14
   199a4:	vmrs	APSR_nzcv, fpscr
   199a8:	bpl	1992c <fts_children@@Base+0x13dc>
   199ac:	vldr	s14, [r3, #4]
   199b0:	ldrb	r2, [r3, #16]
   199b4:	mov	r0, r4
   199b8:	vmul.f32	s15, s15, s14
   199bc:	cmp	r2, #0
   199c0:	vldreq	s14, [r3, #8]
   199c4:	vmuleq.f32	s15, s15, s14
   199c8:	vcvt.u32.f32	s15, s15
   199cc:	vmov	r1, s15
   199d0:	bl	19544 <fts_children@@Base+0xff4>
   199d4:	cmp	r0, #0
   199d8:	bne	1992c <fts_children@@Base+0x13dc>
   199dc:	ldr	r0, [r4, #36]	; 0x24
   199e0:	cmp	r0, #0
   199e4:	beq	199f8 <fts_children@@Base+0x14a8>
   199e8:	ldr	r7, [r0, #4]
   199ec:	bl	111a8 <free@plt>
   199f0:	subs	r0, r7, #0
   199f4:	bne	199e8 <fts_children@@Base+0x1498>
   199f8:	mov	r3, #0
   199fc:	str	r3, [r4, #36]	; 0x24
   19a00:	b	1992c <fts_children@@Base+0x13dc>
   19a04:	bl	11208 <__stack_chk_fail@plt>
   19a08:	andeq	fp, r2, r8, lsl #30
   19a0c:	mov	r3, #0
   19a10:	mov	r2, #1
   19a14:	str	r1, [r0]
   19a18:	str	r1, [r0, #4]
   19a1c:	str	r1, [r0, #8]
   19a20:	str	r1, [r0, #12]
   19a24:	str	r1, [r0, #16]
   19a28:	strb	r2, [r0, #28]
   19a2c:	str	r3, [r0, #20]
   19a30:	str	r3, [r0, #24]
   19a34:	bx	lr
   19a38:	ldrb	r0, [r0, #28]
   19a3c:	bx	lr
   19a40:	ldrb	ip, [r0, #28]
   19a44:	ldr	r3, [r0, #20]
   19a48:	mov	r2, r0
   19a4c:	eor	ip, ip, #1
   19a50:	add	r3, ip, r3
   19a54:	and	r3, r3, #3
   19a58:	ldr	r0, [r0, r3, lsl #2]
   19a5c:	str	r1, [r2, r3, lsl #2]
   19a60:	ldr	r1, [r2, #24]
   19a64:	str	r3, [r2, #20]
   19a68:	cmp	r1, r3
   19a6c:	addeq	ip, ip, r1
   19a70:	andeq	ip, ip, #3
   19a74:	mov	r3, #0
   19a78:	streq	ip, [r2, #24]
   19a7c:	strb	r3, [r2, #28]
   19a80:	bx	lr
   19a84:	ldrb	r3, [r0, #28]
   19a88:	cmp	r3, #0
   19a8c:	bne	19ac4 <fts_children@@Base+0x1574>
   19a90:	ldr	r3, [r0, #20]
   19a94:	ldr	r1, [r0, #16]
   19a98:	ldr	r2, [r0, r3, lsl #2]
   19a9c:	str	r1, [r0, r3, lsl #2]
   19aa0:	ldr	r1, [r0, #24]
   19aa4:	cmp	r3, r1
   19aa8:	addne	r3, r3, #3
   19aac:	moveq	r3, #1
   19ab0:	andne	r3, r3, #3
   19ab4:	strbeq	r3, [r0, #28]
   19ab8:	strne	r3, [r0, #20]
   19abc:	mov	r0, r2
   19ac0:	bx	lr
   19ac4:	push	{r4, lr}
   19ac8:	bl	11448 <abort@plt>
   19acc:	push	{r4, lr}
   19ad0:	mov	r0, #14
   19ad4:	bl	113d0 <nl_langinfo@plt>
   19ad8:	cmp	r0, #0
   19adc:	beq	19af4 <fts_children@@Base+0x15a4>
   19ae0:	ldrb	r2, [r0]
   19ae4:	ldr	r3, [pc, #16]	; 19afc <fts_children@@Base+0x15ac>
   19ae8:	cmp	r2, #0
   19aec:	moveq	r0, r3
   19af0:	pop	{r4, pc}
   19af4:	ldr	r0, [pc]	; 19afc <fts_children@@Base+0x15ac>
   19af8:	pop	{r4, pc}
   19afc:	ldrdeq	fp, [r1], -r0
   19b00:	push	{r2, r3}
   19b04:	push	{r4, lr}
   19b08:	sub	sp, sp, #8
   19b0c:	ldr	r4, [pc, #68]	; 19b58 <fts_children@@Base+0x1608>
   19b10:	ldr	r2, [sp, #16]
   19b14:	ands	r3, r2, #64	; 0x40
   19b18:	addne	r3, sp, #20
   19b1c:	ldr	ip, [r4]
   19b20:	strne	r3, [sp]
   19b24:	ldrne	r3, [sp, #20]
   19b28:	str	ip, [sp, #4]
   19b2c:	bl	11328 <openat64@plt>
   19b30:	bl	19b5c <fts_children@@Base+0x160c>
   19b34:	ldr	r2, [sp, #4]
   19b38:	ldr	r3, [r4]
   19b3c:	cmp	r2, r3
   19b40:	bne	19b54 <fts_children@@Base+0x1604>
   19b44:	add	sp, sp, #8
   19b48:	pop	{r4, lr}
   19b4c:	add	sp, sp, #8
   19b50:	bx	lr
   19b54:	bl	11208 <__stack_chk_fail@plt>
   19b58:	andeq	fp, r2, r8, lsl #30
   19b5c:	cmp	r0, #2
   19b60:	push	{r4, r5, r6, r7, r8, lr}
   19b64:	mov	r4, r0
   19b68:	bls	19b74 <fts_children@@Base+0x1624>
   19b6c:	mov	r0, r4
   19b70:	pop	{r4, r5, r6, r7, r8, pc}
   19b74:	bl	19e8c <fts_children@@Base+0x193c>
   19b78:	mov	r7, r0
   19b7c:	bl	11340 <__errno_location@plt>
   19b80:	mov	r5, r0
   19b84:	mov	r0, r4
   19b88:	ldr	r6, [r5]
   19b8c:	mov	r4, r7
   19b90:	bl	11454 <close@plt>
   19b94:	str	r6, [r5]
   19b98:	mov	r0, r4
   19b9c:	pop	{r4, r5, r6, r7, r8, pc}
   19ba0:	push	{r4, r5, lr}
   19ba4:	sub	sp, sp, #12
   19ba8:	mov	r4, r0
   19bac:	bl	11370 <fileno@plt>
   19bb0:	cmp	r0, #0
   19bb4:	mov	r0, r4
   19bb8:	blt	19c34 <fts_children@@Base+0x16e4>
   19bbc:	bl	112c8 <__freading@plt>
   19bc0:	cmp	r0, #0
   19bc4:	bne	19c00 <fts_children@@Base+0x16b0>
   19bc8:	mov	r0, r4
   19bcc:	bl	19d8c <fts_children@@Base+0x183c>
   19bd0:	cmp	r0, #0
   19bd4:	beq	19c30 <fts_children@@Base+0x16e0>
   19bd8:	bl	11340 <__errno_location@plt>
   19bdc:	mov	r5, r0
   19be0:	mov	r0, r4
   19be4:	ldr	r4, [r5]
   19be8:	bl	11388 <fclose@plt>
   19bec:	cmp	r4, #0
   19bf0:	mvnne	r0, #0
   19bf4:	strne	r4, [r5]
   19bf8:	add	sp, sp, #12
   19bfc:	pop	{r4, r5, pc}
   19c00:	mov	r0, r4
   19c04:	bl	11370 <fileno@plt>
   19c08:	mov	r3, #1
   19c0c:	str	r3, [sp]
   19c10:	mov	r2, #0
   19c14:	mov	r3, #0
   19c18:	bl	1125c <lseek64@plt>
   19c1c:	mvn	r3, #0
   19c20:	mvn	r2, #0
   19c24:	cmp	r1, r3
   19c28:	cmpeq	r0, r2
   19c2c:	bne	19bc8 <fts_children@@Base+0x1678>
   19c30:	mov	r0, r4
   19c34:	add	sp, sp, #12
   19c38:	pop	{r4, r5, lr}
   19c3c:	b	11388 <fclose@plt>
   19c40:	push	{r1, r2, r3}
   19c44:	push	{r4, r5, r6, r7, r8, lr}
   19c48:	sub	sp, sp, #12
   19c4c:	ldr	r4, [pc, #300]	; 19d80 <fts_children@@Base+0x1830>
   19c50:	ldr	r3, [pc, #300]	; 19d84 <fts_children@@Base+0x1834>
   19c54:	ldr	r1, [sp, #36]	; 0x24
   19c58:	ldr	r2, [r4]
   19c5c:	cmp	r1, r3
   19c60:	add	r3, sp, #40	; 0x28
   19c64:	str	r2, [sp, #4]
   19c68:	str	r3, [sp]
   19c6c:	bne	19d38 <fts_children@@Base+0x17e8>
   19c70:	ldr	r6, [pc, #272]	; 19d88 <fts_children@@Base+0x1838>
   19c74:	add	r3, sp, #44	; 0x2c
   19c78:	str	r3, [sp]
   19c7c:	ldr	r3, [r6]
   19c80:	ldr	r7, [sp, #40]	; 0x28
   19c84:	cmp	r3, #0
   19c88:	blt	19ccc <fts_children@@Base+0x177c>
   19c8c:	mov	r2, r7
   19c90:	mov	r8, r0
   19c94:	bl	113a0 <fcntl64@plt>
   19c98:	subs	r5, r0, #0
   19c9c:	blt	19d48 <fts_children@@Base+0x17f8>
   19ca0:	mov	r3, #1
   19ca4:	str	r3, [r6]
   19ca8:	ldr	r2, [sp, #4]
   19cac:	ldr	r3, [r4]
   19cb0:	mov	r0, r5
   19cb4:	cmp	r2, r3
   19cb8:	bne	19d7c <fts_children@@Base+0x182c>
   19cbc:	add	sp, sp, #12
   19cc0:	pop	{r4, r5, r6, r7, r8, lr}
   19cc4:	add	sp, sp, #12
   19cc8:	bx	lr
   19ccc:	mov	r2, r7
   19cd0:	mov	r1, #0
   19cd4:	bl	19c40 <fts_children@@Base+0x16f0>
   19cd8:	subs	r5, r0, #0
   19cdc:	blt	19ca8 <fts_children@@Base+0x1758>
   19ce0:	ldr	r3, [r6]
   19ce4:	cmn	r3, #1
   19ce8:	bne	19ca8 <fts_children@@Base+0x1758>
   19cec:	mov	r1, #1
   19cf0:	mov	r0, r5
   19cf4:	bl	113a0 <fcntl64@plt>
   19cf8:	subs	r2, r0, #0
   19cfc:	blt	19d18 <fts_children@@Base+0x17c8>
   19d00:	orr	r2, r2, #1
   19d04:	mov	r1, #2
   19d08:	mov	r0, r5
   19d0c:	bl	113a0 <fcntl64@plt>
   19d10:	cmn	r0, #1
   19d14:	bne	19ca8 <fts_children@@Base+0x1758>
   19d18:	bl	11340 <__errno_location@plt>
   19d1c:	mov	r6, r0
   19d20:	mov	r0, r5
   19d24:	ldr	r7, [r6]
   19d28:	mvn	r5, #0
   19d2c:	bl	11454 <close@plt>
   19d30:	str	r7, [r6]
   19d34:	b	19ca8 <fts_children@@Base+0x1758>
   19d38:	ldr	r2, [sp, #40]	; 0x28
   19d3c:	bl	113a0 <fcntl64@plt>
   19d40:	mov	r5, r0
   19d44:	b	19ca8 <fts_children@@Base+0x1758>
   19d48:	bl	11340 <__errno_location@plt>
   19d4c:	ldr	r3, [r0]
   19d50:	cmp	r3, #22
   19d54:	bne	19ca0 <fts_children@@Base+0x1750>
   19d58:	mov	r2, r7
   19d5c:	mov	r0, r8
   19d60:	mov	r1, #0
   19d64:	bl	19c40 <fts_children@@Base+0x16f0>
   19d68:	subs	r5, r0, #0
   19d6c:	mvnge	r3, #0
   19d70:	strge	r3, [r6]
   19d74:	bge	19cec <fts_children@@Base+0x179c>
   19d78:	b	19ca8 <fts_children@@Base+0x1758>
   19d7c:	bl	11208 <__stack_chk_fail@plt>
   19d80:	andeq	fp, r2, r8, lsl #30
   19d84:	andeq	r0, r0, r6, lsl #8
   19d88:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   19d8c:	push	{r4, lr}
   19d90:	subs	r4, r0, #0
   19d94:	sub	sp, sp, #8
   19d98:	beq	19db4 <fts_children@@Base+0x1864>
   19d9c:	bl	112c8 <__freading@plt>
   19da0:	cmp	r0, #0
   19da4:	beq	19db4 <fts_children@@Base+0x1864>
   19da8:	ldr	r3, [r4]
   19dac:	tst	r3, #256	; 0x100
   19db0:	bne	19dc4 <fts_children@@Base+0x1874>
   19db4:	mov	r0, r4
   19db8:	add	sp, sp, #8
   19dbc:	pop	{r4, lr}
   19dc0:	b	11190 <fflush@plt>
   19dc4:	mov	r3, #1
   19dc8:	str	r3, [sp]
   19dcc:	mov	r2, #0
   19dd0:	mov	r3, #0
   19dd4:	mov	r0, r4
   19dd8:	bl	19dec <fts_children@@Base+0x189c>
   19ddc:	mov	r0, r4
   19de0:	add	sp, sp, #8
   19de4:	pop	{r4, lr}
   19de8:	b	11190 <fflush@plt>
   19dec:	push	{r4, r5, r6, r7, r8, lr}
   19df0:	sub	sp, sp, #8
   19df4:	ldmib	r0, {ip, lr}
   19df8:	mov	r4, r0
   19dfc:	ldr	r5, [sp, #32]
   19e00:	cmp	lr, ip
   19e04:	beq	19e1c <fts_children@@Base+0x18cc>
   19e08:	str	r5, [sp, #32]
   19e0c:	mov	r0, r4
   19e10:	add	sp, sp, #8
   19e14:	pop	{r4, r5, r6, r7, r8, lr}
   19e18:	b	11394 <fseeko64@plt>
   19e1c:	ldr	lr, [r0, #20]
   19e20:	ldr	ip, [r0, #16]
   19e24:	cmp	lr, ip
   19e28:	bne	19e08 <fts_children@@Base+0x18b8>
   19e2c:	ldr	r8, [r0, #36]	; 0x24
   19e30:	cmp	r8, #0
   19e34:	bne	19e08 <fts_children@@Base+0x18b8>
   19e38:	mov	r6, r2
   19e3c:	mov	r7, r3
   19e40:	bl	11370 <fileno@plt>
   19e44:	mov	r2, r6
   19e48:	mov	r3, r7
   19e4c:	str	r5, [sp]
   19e50:	bl	1125c <lseek64@plt>
   19e54:	mvn	r3, #0
   19e58:	mvn	r2, #0
   19e5c:	cmp	r1, r3
   19e60:	cmpeq	r0, r2
   19e64:	beq	19e84 <fts_children@@Base+0x1934>
   19e68:	ldr	r3, [r4]
   19e6c:	strd	r0, [r4, #80]	; 0x50
   19e70:	mov	r0, r8
   19e74:	bic	r3, r3, #16
   19e78:	str	r3, [r4]
   19e7c:	add	sp, sp, #8
   19e80:	pop	{r4, r5, r6, r7, r8, pc}
   19e84:	mvn	r0, #0
   19e88:	b	19e7c <fts_children@@Base+0x192c>
   19e8c:	mov	r2, #3
   19e90:	mov	r1, #0
   19e94:	b	19c40 <fts_children@@Base+0x16f0>
   19e98:	subs	r2, r1, #1
   19e9c:	bxeq	lr
   19ea0:	bcc	1a078 <fts_children@@Base+0x1b28>
   19ea4:	cmp	r0, r1
   19ea8:	bls	1a05c <fts_children@@Base+0x1b0c>
   19eac:	tst	r1, r2
   19eb0:	beq	1a068 <fts_children@@Base+0x1b18>
   19eb4:	clz	r3, r0
   19eb8:	clz	r2, r1
   19ebc:	sub	r3, r2, r3
   19ec0:	rsbs	r3, r3, #31
   19ec4:	addne	r3, r3, r3, lsl #1
   19ec8:	mov	r2, #0
   19ecc:	addne	pc, pc, r3, lsl #2
   19ed0:	nop			; (mov r0, r0)
   19ed4:	cmp	r0, r1, lsl #31
   19ed8:	adc	r2, r2, r2
   19edc:	subcs	r0, r0, r1, lsl #31
   19ee0:	cmp	r0, r1, lsl #30
   19ee4:	adc	r2, r2, r2
   19ee8:	subcs	r0, r0, r1, lsl #30
   19eec:	cmp	r0, r1, lsl #29
   19ef0:	adc	r2, r2, r2
   19ef4:	subcs	r0, r0, r1, lsl #29
   19ef8:	cmp	r0, r1, lsl #28
   19efc:	adc	r2, r2, r2
   19f00:	subcs	r0, r0, r1, lsl #28
   19f04:	cmp	r0, r1, lsl #27
   19f08:	adc	r2, r2, r2
   19f0c:	subcs	r0, r0, r1, lsl #27
   19f10:	cmp	r0, r1, lsl #26
   19f14:	adc	r2, r2, r2
   19f18:	subcs	r0, r0, r1, lsl #26
   19f1c:	cmp	r0, r1, lsl #25
   19f20:	adc	r2, r2, r2
   19f24:	subcs	r0, r0, r1, lsl #25
   19f28:	cmp	r0, r1, lsl #24
   19f2c:	adc	r2, r2, r2
   19f30:	subcs	r0, r0, r1, lsl #24
   19f34:	cmp	r0, r1, lsl #23
   19f38:	adc	r2, r2, r2
   19f3c:	subcs	r0, r0, r1, lsl #23
   19f40:	cmp	r0, r1, lsl #22
   19f44:	adc	r2, r2, r2
   19f48:	subcs	r0, r0, r1, lsl #22
   19f4c:	cmp	r0, r1, lsl #21
   19f50:	adc	r2, r2, r2
   19f54:	subcs	r0, r0, r1, lsl #21
   19f58:	cmp	r0, r1, lsl #20
   19f5c:	adc	r2, r2, r2
   19f60:	subcs	r0, r0, r1, lsl #20
   19f64:	cmp	r0, r1, lsl #19
   19f68:	adc	r2, r2, r2
   19f6c:	subcs	r0, r0, r1, lsl #19
   19f70:	cmp	r0, r1, lsl #18
   19f74:	adc	r2, r2, r2
   19f78:	subcs	r0, r0, r1, lsl #18
   19f7c:	cmp	r0, r1, lsl #17
   19f80:	adc	r2, r2, r2
   19f84:	subcs	r0, r0, r1, lsl #17
   19f88:	cmp	r0, r1, lsl #16
   19f8c:	adc	r2, r2, r2
   19f90:	subcs	r0, r0, r1, lsl #16
   19f94:	cmp	r0, r1, lsl #15
   19f98:	adc	r2, r2, r2
   19f9c:	subcs	r0, r0, r1, lsl #15
   19fa0:	cmp	r0, r1, lsl #14
   19fa4:	adc	r2, r2, r2
   19fa8:	subcs	r0, r0, r1, lsl #14
   19fac:	cmp	r0, r1, lsl #13
   19fb0:	adc	r2, r2, r2
   19fb4:	subcs	r0, r0, r1, lsl #13
   19fb8:	cmp	r0, r1, lsl #12
   19fbc:	adc	r2, r2, r2
   19fc0:	subcs	r0, r0, r1, lsl #12
   19fc4:	cmp	r0, r1, lsl #11
   19fc8:	adc	r2, r2, r2
   19fcc:	subcs	r0, r0, r1, lsl #11
   19fd0:	cmp	r0, r1, lsl #10
   19fd4:	adc	r2, r2, r2
   19fd8:	subcs	r0, r0, r1, lsl #10
   19fdc:	cmp	r0, r1, lsl #9
   19fe0:	adc	r2, r2, r2
   19fe4:	subcs	r0, r0, r1, lsl #9
   19fe8:	cmp	r0, r1, lsl #8
   19fec:	adc	r2, r2, r2
   19ff0:	subcs	r0, r0, r1, lsl #8
   19ff4:	cmp	r0, r1, lsl #7
   19ff8:	adc	r2, r2, r2
   19ffc:	subcs	r0, r0, r1, lsl #7
   1a000:	cmp	r0, r1, lsl #6
   1a004:	adc	r2, r2, r2
   1a008:	subcs	r0, r0, r1, lsl #6
   1a00c:	cmp	r0, r1, lsl #5
   1a010:	adc	r2, r2, r2
   1a014:	subcs	r0, r0, r1, lsl #5
   1a018:	cmp	r0, r1, lsl #4
   1a01c:	adc	r2, r2, r2
   1a020:	subcs	r0, r0, r1, lsl #4
   1a024:	cmp	r0, r1, lsl #3
   1a028:	adc	r2, r2, r2
   1a02c:	subcs	r0, r0, r1, lsl #3
   1a030:	cmp	r0, r1, lsl #2
   1a034:	adc	r2, r2, r2
   1a038:	subcs	r0, r0, r1, lsl #2
   1a03c:	cmp	r0, r1, lsl #1
   1a040:	adc	r2, r2, r2
   1a044:	subcs	r0, r0, r1, lsl #1
   1a048:	cmp	r0, r1
   1a04c:	adc	r2, r2, r2
   1a050:	subcs	r0, r0, r1
   1a054:	mov	r0, r2
   1a058:	bx	lr
   1a05c:	moveq	r0, #1
   1a060:	movne	r0, #0
   1a064:	bx	lr
   1a068:	clz	r2, r1
   1a06c:	rsb	r2, r2, #31
   1a070:	lsr	r0, r0, r2
   1a074:	bx	lr
   1a078:	cmp	r0, #0
   1a07c:	mvnne	r0, #0
   1a080:	b	1a0e0 <fts_children@@Base+0x1b90>
   1a084:	cmp	r1, #0
   1a088:	beq	1a078 <fts_children@@Base+0x1b28>
   1a08c:	push	{r0, r1, lr}
   1a090:	bl	19e98 <fts_children@@Base+0x1948>
   1a094:	pop	{r1, r2, lr}
   1a098:	mul	r3, r2, r0
   1a09c:	sub	r1, r1, r3
   1a0a0:	bx	lr
   1a0a4:	cmp	r3, #0
   1a0a8:	cmpeq	r2, #0
   1a0ac:	bne	1a0c4 <fts_children@@Base+0x1b74>
   1a0b0:	cmp	r1, #0
   1a0b4:	cmpeq	r0, #0
   1a0b8:	mvnne	r1, #0
   1a0bc:	mvnne	r0, #0
   1a0c0:	b	1a0e0 <fts_children@@Base+0x1b90>
   1a0c4:	sub	sp, sp, #8
   1a0c8:	push	{sp, lr}
   1a0cc:	bl	1a0f0 <fts_children@@Base+0x1ba0>
   1a0d0:	ldr	lr, [sp, #4]
   1a0d4:	add	sp, sp, #8
   1a0d8:	pop	{r2, r3}
   1a0dc:	bx	lr
   1a0e0:	push	{r1, lr}
   1a0e4:	mov	r0, #8
   1a0e8:	bl	11160 <raise@plt>
   1a0ec:	pop	{r1, pc}
   1a0f0:	cmp	r1, r3
   1a0f4:	cmpeq	r0, r2
   1a0f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0fc:	mov	r4, r0
   1a100:	movcc	r0, #0
   1a104:	mov	r5, r1
   1a108:	ldr	lr, [sp, #36]	; 0x24
   1a10c:	movcc	r1, r0
   1a110:	bcc	1a20c <fts_children@@Base+0x1cbc>
   1a114:	cmp	r3, #0
   1a118:	clzeq	ip, r2
   1a11c:	clzne	ip, r3
   1a120:	addeq	ip, ip, #32
   1a124:	cmp	r5, #0
   1a128:	clzeq	r1, r4
   1a12c:	addeq	r1, r1, #32
   1a130:	clzne	r1, r5
   1a134:	sub	ip, ip, r1
   1a138:	sub	sl, ip, #32
   1a13c:	lsl	r9, r3, ip
   1a140:	rsb	fp, ip, #32
   1a144:	orr	r9, r9, r2, lsl sl
   1a148:	orr	r9, r9, r2, lsr fp
   1a14c:	lsl	r8, r2, ip
   1a150:	cmp	r5, r9
   1a154:	cmpeq	r4, r8
   1a158:	movcc	r0, #0
   1a15c:	movcc	r1, r0
   1a160:	bcc	1a17c <fts_children@@Base+0x1c2c>
   1a164:	mov	r0, #1
   1a168:	subs	r4, r4, r8
   1a16c:	lsl	r1, r0, sl
   1a170:	orr	r1, r1, r0, lsr fp
   1a174:	lsl	r0, r0, ip
   1a178:	sbc	r5, r5, r9
   1a17c:	cmp	ip, #0
   1a180:	beq	1a20c <fts_children@@Base+0x1cbc>
   1a184:	lsr	r6, r8, #1
   1a188:	orr	r6, r6, r9, lsl #31
   1a18c:	lsr	r7, r9, #1
   1a190:	mov	r2, ip
   1a194:	b	1a1b8 <fts_children@@Base+0x1c68>
   1a198:	subs	r3, r4, r6
   1a19c:	sbc	r8, r5, r7
   1a1a0:	adds	r3, r3, r3
   1a1a4:	adc	r8, r8, r8
   1a1a8:	adds	r4, r3, #1
   1a1ac:	adc	r5, r8, #0
   1a1b0:	subs	r2, r2, #1
   1a1b4:	beq	1a1d4 <fts_children@@Base+0x1c84>
   1a1b8:	cmp	r5, r7
   1a1bc:	cmpeq	r4, r6
   1a1c0:	bcs	1a198 <fts_children@@Base+0x1c48>
   1a1c4:	adds	r4, r4, r4
   1a1c8:	adc	r5, r5, r5
   1a1cc:	subs	r2, r2, #1
   1a1d0:	bne	1a1b8 <fts_children@@Base+0x1c68>
   1a1d4:	lsr	r3, r4, ip
   1a1d8:	orr	r3, r3, r5, lsl fp
   1a1dc:	lsr	r2, r5, ip
   1a1e0:	orr	r3, r3, r5, lsr sl
   1a1e4:	adds	r0, r0, r4
   1a1e8:	mov	r4, r3
   1a1ec:	lsl	r3, r2, ip
   1a1f0:	orr	r3, r3, r4, lsl sl
   1a1f4:	lsl	ip, r4, ip
   1a1f8:	orr	r3, r3, r4, lsr fp
   1a1fc:	adc	r1, r1, r5
   1a200:	subs	r0, r0, ip
   1a204:	mov	r5, r2
   1a208:	sbc	r1, r1, r3
   1a20c:	cmp	lr, #0
   1a210:	strdne	r4, [lr]
   1a214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a218:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a21c:	mov	r7, r0
   1a220:	ldr	r6, [pc, #72]	; 1a270 <fts_children@@Base+0x1d20>
   1a224:	ldr	r5, [pc, #72]	; 1a274 <fts_children@@Base+0x1d24>
   1a228:	add	r6, pc, r6
   1a22c:	add	r5, pc, r5
   1a230:	sub	r6, r6, r5
   1a234:	mov	r8, r1
   1a238:	mov	r9, r2
   1a23c:	bl	11110 <fstatfs64@plt-0x20>
   1a240:	asrs	r6, r6, #2
   1a244:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a248:	mov	r4, #0
   1a24c:	add	r4, r4, #1
   1a250:	ldr	r3, [r5], #4
   1a254:	mov	r2, r9
   1a258:	mov	r1, r8
   1a25c:	mov	r0, r7
   1a260:	blx	r3
   1a264:	cmp	r6, r4
   1a268:	bne	1a24c <fts_children@@Base+0x1cfc>
   1a26c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a270:	ldrdeq	r1, [r1], -r4
   1a274:	andeq	r1, r1, ip, asr #25
   1a278:	bx	lr
   1a27c:	ldr	r3, [pc, #12]	; 1a290 <fts_children@@Base+0x1d40>
   1a280:	mov	r1, #0
   1a284:	add	r3, pc, r3
   1a288:	ldr	r2, [r3]
   1a28c:	b	1134c <__cxa_atexit@plt>
   1a290:	andeq	r1, r1, ip, lsr #29

Disassembly of section .fini:

0001a294 <.fini>:
   1a294:	push	{r3, lr}
   1a298:	pop	{r3, pc}
