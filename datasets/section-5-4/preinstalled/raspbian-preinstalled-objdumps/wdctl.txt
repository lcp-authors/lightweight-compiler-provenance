
raspbian-preinstalled/wdctl:     file format elf32-littlearm


Disassembly of section .init:

00010ff0 <.init>:
   10ff0:	push	{r3, lr}
   10ff4:	bl	1251c <__assert_fail@plt+0x1200>
   10ff8:	pop	{r3, pc}

Disassembly of section .plt:

00010ffc <raise@plt-0x14>:
   10ffc:	push	{lr}		; (str lr, [sp, #-4]!)
   11000:	ldr	lr, [pc, #4]	; 1100c <raise@plt-0x4>
   11004:	add	lr, pc, lr
   11008:	ldr	pc, [lr, #8]!
   1100c:	ldrdeq	r4, [r1], -r8

00011010 <raise@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #20, 20	; 0x14000
   11018:	ldr	pc, [ip, #3800]!	; 0xed8

0001101c <scols_line_set_data@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #20, 20	; 0x14000
   11024:	ldr	pc, [ip, #3792]!	; 0xed0

00011028 <strcmp@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #20, 20	; 0x14000
   11030:	ldr	pc, [ip, #3784]!	; 0xec8

00011034 <strtol@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #20, 20	; 0x14000
   1103c:	ldr	pc, [ip, #3776]!	; 0xec0

00011040 <strcspn@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #20, 20	; 0x14000
   11048:	ldr	pc, [ip, #3768]!	; 0xeb8

0001104c <scols_table_enable_noheadings@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #20, 20	; 0x14000
   11054:	ldr	pc, [ip, #3760]!	; 0xeb0

00011058 <scols_table_new_column@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #20, 20	; 0x14000
   11060:	ldr	pc, [ip, #3752]!	; 0xea8

00011064 <sigprocmask@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #20, 20	; 0x14000
   1106c:	ldr	pc, [ip, #3744]!	; 0xea0

00011070 <free@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #20, 20	; 0x14000
   11078:	ldr	pc, [ip, #3736]!	; 0xe98

0001107c <scols_table_enable_raw@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #20, 20	; 0x14000
   11084:	ldr	pc, [ip, #3728]!	; 0xe90

00011088 <ferror@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #20, 20	; 0x14000
   11090:	ldr	pc, [ip, #3720]!	; 0xe88

00011094 <strndup@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #20, 20	; 0x14000
   1109c:	ldr	pc, [ip, #3712]!	; 0xe80

000110a0 <_exit@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #20, 20	; 0x14000
   110a8:	ldr	pc, [ip, #3704]!	; 0xe78

000110ac <memcpy@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #20, 20	; 0x14000
   110b4:	ldr	pc, [ip, #3696]!	; 0xe70

000110b8 <__strtoull_internal@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #3688]!	; 0xe68

000110c4 <dcgettext@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #3680]!	; 0xe60

000110d0 <strdup@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #20, 20	; 0x14000
   110d8:	ldr	pc, [ip, #3672]!	; 0xe58

000110dc <__stack_chk_fail@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #20, 20	; 0x14000
   110e4:	ldr	pc, [ip, #3664]!	; 0xe50

000110e8 <textdomain@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #20, 20	; 0x14000
   110f0:	ldr	pc, [ip, #3656]!	; 0xe48

000110f4 <err@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #20, 20	; 0x14000
   110fc:	ldr	pc, [ip, #3648]!	; 0xe40

00011100 <ioctl@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #20, 20	; 0x14000
   11108:	ldr	pc, [ip, #3640]!	; 0xe38

0001110c <scols_new_table@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #20, 20	; 0x14000
   11114:	ldr	pc, [ip, #3632]!	; 0xe30

00011118 <__fpending@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #20, 20	; 0x14000
   11120:	ldr	pc, [ip, #3624]!	; 0xe28

00011124 <open64@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #20, 20	; 0x14000
   1112c:	ldr	pc, [ip, #3616]!	; 0xe20

00011130 <malloc@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #20, 20	; 0x14000
   11138:	ldr	pc, [ip, #3608]!	; 0xe18

0001113c <__libc_start_main@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #20, 20	; 0x14000
   11144:	ldr	pc, [ip, #3600]!	; 0xe10

00011148 <scols_table_new_line@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #20, 20	; 0x14000
   11150:	ldr	pc, [ip, #3592]!	; 0xe08

00011154 <scols_unref_table@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #20, 20	; 0x14000
   1115c:	ldr	pc, [ip, #3584]!	; 0xe00

00011160 <__gmon_start__@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #20, 20	; 0x14000
   11168:	ldr	pc, [ip, #3576]!	; 0xdf8

0001116c <getopt_long@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #20, 20	; 0x14000
   11174:	ldr	pc, [ip, #3568]!	; 0xdf0

00011178 <__ctype_b_loc@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #20, 20	; 0x14000
   11180:	ldr	pc, [ip, #3560]!	; 0xde8

00011184 <exit@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #20, 20	; 0x14000
   1118c:	ldr	pc, [ip, #3552]!	; 0xde0

00011190 <strtoul@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #20, 20	; 0x14000
   11198:	ldr	pc, [ip, #3544]!	; 0xdd8

0001119c <strlen@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #20, 20	; 0x14000
   111a4:	ldr	pc, [ip, #3536]!	; 0xdd0

000111a8 <strchr@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #20, 20	; 0x14000
   111b0:	ldr	pc, [ip, #3528]!	; 0xdc8

000111b4 <warnx@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #20, 20	; 0x14000
   111bc:	ldr	pc, [ip, #3520]!	; 0xdc0

000111c0 <sigfillset@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #20, 20	; 0x14000
   111c8:	ldr	pc, [ip, #3512]!	; 0xdb8

000111cc <__errno_location@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #20, 20	; 0x14000
   111d4:	ldr	pc, [ip, #3504]!	; 0xdb0

000111d8 <strncasecmp@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #20, 20	; 0x14000
   111e0:	ldr	pc, [ip, #3496]!	; 0xda8

000111e4 <__cxa_atexit@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #20, 20	; 0x14000
   111ec:	ldr	pc, [ip, #3488]!	; 0xda0

000111f0 <__vasprintf_chk@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #20, 20	; 0x14000
   111f8:	ldr	pc, [ip, #3480]!	; 0xd98

000111fc <memset@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #20, 20	; 0x14000
   11204:	ldr	pc, [ip, #3472]!	; 0xd90

00011208 <fgetc@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #20, 20	; 0x14000
   11210:	ldr	pc, [ip, #3464]!	; 0xd88

00011214 <__printf_chk@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #20, 20	; 0x14000
   1121c:	ldr	pc, [ip, #3456]!	; 0xd80

00011220 <strtod@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #20, 20	; 0x14000
   11228:	ldr	pc, [ip, #3448]!	; 0xd78

0001122c <write@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #20, 20	; 0x14000
   11234:	ldr	pc, [ip, #3440]!	; 0xd70

00011238 <__fprintf_chk@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #20, 20	; 0x14000
   11240:	ldr	pc, [ip, #3432]!	; 0xd68

00011244 <fclose@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #20, 20	; 0x14000
   1124c:	ldr	pc, [ip, #3424]!	; 0xd60

00011250 <setlocale@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #20, 20	; 0x14000
   11258:	ldr	pc, [ip, #3416]!	; 0xd58

0001125c <sigemptyset@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #20, 20	; 0x14000
   11264:	ldr	pc, [ip, #3408]!	; 0xd50

00011268 <errx@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #20, 20	; 0x14000
   11270:	ldr	pc, [ip, #3400]!	; 0xd48

00011274 <warn@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #20, 20	; 0x14000
   1127c:	ldr	pc, [ip, #3392]!	; 0xd40

00011280 <scols_print_table@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #20, 20	; 0x14000
   11288:	ldr	pc, [ip, #3384]!	; 0xd38

0001128c <fputc@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #20, 20	; 0x14000
   11294:	ldr	pc, [ip, #3376]!	; 0xd30

00011298 <localeconv@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #20, 20	; 0x14000
   112a0:	ldr	pc, [ip, #3368]!	; 0xd28

000112a4 <__strtoll_internal@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #20, 20	; 0x14000
   112ac:	ldr	pc, [ip, #3360]!	; 0xd20

000112b0 <bindtextdomain@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #20, 20	; 0x14000
   112b8:	ldr	pc, [ip, #3352]!	; 0xd18

000112bc <fputs@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #20, 20	; 0x14000
   112c4:	ldr	pc, [ip, #3344]!	; 0xd10

000112c8 <strncmp@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #20, 20	; 0x14000
   112d0:	ldr	pc, [ip, #3336]!	; 0xd08

000112d4 <abort@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #20, 20	; 0x14000
   112dc:	ldr	pc, [ip, #3328]!	; 0xd00

000112e0 <close@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #20, 20	; 0x14000
   112e8:	ldr	pc, [ip, #3320]!	; 0xcf8

000112ec <dcngettext@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #20, 20	; 0x14000
   112f4:	ldr	pc, [ip, #3312]!	; 0xcf0

000112f8 <__snprintf_chk@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #20, 20	; 0x14000
   11300:	ldr	pc, [ip, #3304]!	; 0xce8

00011304 <scols_init_debug@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #20, 20	; 0x14000
   1130c:	ldr	pc, [ip, #3296]!	; 0xce0

00011310 <strspn@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #20, 20	; 0x14000
   11318:	ldr	pc, [ip, #3288]!	; 0xcd8

0001131c <__assert_fail@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #20, 20	; 0x14000
   11324:	ldr	pc, [ip, #3280]!	; 0xcd0

Disassembly of section .text:

00011328 <.text>:
   11328:	ldr	r3, [pc, #4080]	; 12320 <__assert_fail@plt+0x1004>
   1132c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11330:	sub	sp, sp, #404	; 0x194
   11334:	ldr	r3, [r3]
   11338:	mov	fp, #0
   1133c:	mov	r9, r0
   11340:	mov	sl, r1
   11344:	mov	r0, #6
   11348:	ldr	r1, [pc, #4052]	; 12324 <__assert_fail@plt+0x1008>
   1134c:	str	r3, [sp, #396]	; 0x18c
   11350:	str	fp, [sp, #68]	; 0x44
   11354:	str	fp, [sp, #56]	; 0x38
   11358:	str	fp, [sp, #64]	; 0x40
   1135c:	bl	11250 <setlocale@plt>
   11360:	ldr	r1, [pc, #4032]	; 12328 <__assert_fail@plt+0x100c>
   11364:	ldr	r0, [pc, #4032]	; 1232c <__assert_fail@plt+0x1010>
   11368:	bl	112b0 <bindtextdomain@plt>
   1136c:	ldr	r0, [pc, #4024]	; 1232c <__assert_fail@plt+0x1010>
   11370:	bl	110e8 <textdomain@plt>
   11374:	ldr	r3, [pc, #4020]	; 12330 <__assert_fail@plt+0x1014>
   11378:	ldr	r0, [pc, #4020]	; 12334 <__assert_fail@plt+0x1018>
   1137c:	str	fp, [sp, #28]
   11380:	str	fp, [sp, #20]
   11384:	str	fp, [sp, #16]
   11388:	str	fp, [sp, #24]
   1138c:	add	r6, r3, #280	; 0x118
   11390:	bl	149f8 <__assert_fail@plt+0x36dc>
   11394:	ldr	r7, [pc, #3996]	; 12338 <__assert_fail@plt+0x101c>
   11398:	ldr	r5, [pc, #3996]	; 1233c <__assert_fail@plt+0x1020>
   1139c:	ldr	r8, [pc, #3996]	; 12340 <__assert_fail@plt+0x1024>
   113a0:	mov	r3, #0
   113a4:	str	r3, [sp]
   113a8:	mov	r2, r5
   113ac:	mov	r3, r6
   113b0:	mov	r1, sl
   113b4:	mov	r0, r9
   113b8:	bl	1116c <getopt_long@plt>
   113bc:	cmn	r0, #1
   113c0:	beq	11640 <__assert_fail@plt+0x324>
   113c4:	cmp	r0, #69	; 0x45
   113c8:	ble	1144c <__assert_fail@plt+0x130>
   113cc:	ldr	r4, [pc, #3952]	; 12344 <__assert_fail@plt+0x1028>
   113d0:	add	r2, sp, #64	; 0x40
   113d4:	mov	r3, #70	; 0x46
   113d8:	cmp	r0, r3
   113dc:	blt	11428 <__assert_fail@plt+0x10c>
   113e0:	beq	11410 <__assert_fail@plt+0xf4>
   113e4:	mov	ip, r4
   113e8:	ldr	r1, [ip, #4]!
   113ec:	cmp	r0, r1
   113f0:	movlt	r3, #0
   113f4:	movge	r3, #1
   113f8:	cmp	r1, #0
   113fc:	moveq	r3, #0
   11400:	cmp	r3, #0
   11404:	beq	11428 <__assert_fail@plt+0x10c>
   11408:	cmp	r0, r1
   1140c:	bne	113e8 <__assert_fail@plt+0xcc>
   11410:	ldr	r3, [r2]
   11414:	cmp	r3, #0
   11418:	streq	r0, [r2]
   1141c:	beq	11428 <__assert_fail@plt+0x10c>
   11420:	cmp	r0, r3
   11424:	bne	121e8 <__assert_fail@plt+0xecc>
   11428:	ldr	r3, [r4, #64]!	; 0x40
   1142c:	add	r2, r2, #4
   11430:	cmp	r0, r3
   11434:	movlt	r1, #0
   11438:	movge	r1, #1
   1143c:	cmp	r3, #0
   11440:	moveq	r1, #0
   11444:	cmp	r1, #0
   11448:	bne	113d8 <__assert_fail@plt+0xbc>
   1144c:	sub	r0, r0, #70	; 0x46
   11450:	cmp	r0, #50	; 0x32
   11454:	ldrls	pc, [pc, r0, lsl #2]
   11458:	b	12104 <__assert_fail@plt+0xde8>
   1145c:	andeq	r1, r1, r4, lsr r6
   11460:	andeq	r2, r1, r4, lsl #2
   11464:	andeq	r2, r1, r4, lsl #2
   11468:	andeq	r1, r1, r8, lsr #12
   1146c:	andeq	r2, r1, r4, lsl #2
   11470:	andeq	r2, r1, r4, lsl #2
   11474:	andeq	r2, r1, r4, lsl #2
   11478:	andeq	r2, r1, r4, lsl #2
   1147c:	andeq	r2, r1, r4, lsl #2
   11480:	andeq	r1, r1, ip, lsl r6
   11484:	andeq	r2, r1, r4, lsl #2
   11488:	andeq	r2, r1, r4, lsl #2
   1148c:	andeq	r2, r1, r4, lsl #2
   11490:	andeq	r2, r1, r4, lsl #2
   11494:	andeq	r1, r1, r0, lsl r6
   11498:	andeq	r2, r1, r4, lsl #2
   1149c:	andeq	r1, r1, r0, asr #11
   114a0:	andeq	r2, r1, r4, lsl #2
   114a4:	andeq	r2, r1, r4, lsl #2
   114a8:	andeq	r2, r1, r4, lsl #2
   114ac:	andeq	r2, r1, r4, lsl #2
   114b0:	andeq	r2, r1, r4, lsl #2
   114b4:	andeq	r2, r1, r4, lsl #2
   114b8:	andeq	r2, r1, r4, lsl #2
   114bc:	andeq	r2, r1, r4, lsl #2
   114c0:	andeq	r2, r1, r4, lsl #2
   114c4:	andeq	r2, r1, r4, lsl #2
   114c8:	andeq	r2, r1, r4, lsl #2
   114cc:	andeq	r2, r1, r4, lsl #2
   114d0:	andeq	r2, r1, r4, lsl #2
   114d4:	andeq	r2, r1, r4, lsl #2
   114d8:	andeq	r2, r1, r4, lsl #2
   114dc:	andeq	r1, r1, r4, lsr #11
   114e0:	andeq	r2, r1, r4, lsl #2
   114e4:	andeq	r1, r1, r0, ror #30
   114e8:	andeq	r2, r1, r4, lsl #2
   114ec:	andeq	r2, r1, r4, lsl #2
   114f0:	andeq	r2, r1, r4, lsl #2
   114f4:	andeq	r2, r1, r4, lsl #2
   114f8:	andeq	r2, r1, r4, lsl #2
   114fc:	muleq	r1, r8, r5
   11500:	andeq	r1, r1, ip, ror #10
   11504:	andeq	r2, r1, r4, lsl #2
   11508:	andeq	r2, r1, r4, lsl #2
   1150c:	andeq	r1, r1, r0, ror #10
   11510:	andeq	r1, r1, r8, lsr r5
   11514:	andeq	r2, r1, r4, lsl #2
   11518:	andeq	r2, r1, r4, lsl #2
   1151c:	andeq	r2, r1, r4, lsl #2
   11520:	andeq	r2, r1, r4, lsl #2
   11524:	andeq	r1, r1, r8, lsr #10
   11528:	mov	r3, #1
   1152c:	str	r3, [sp, #20]
   11530:	str	r3, [sp, #16]
   11534:	b	113a0 <__assert_fail@plt+0x84>
   11538:	mov	r2, #5
   1153c:	ldr	r1, [pc, #3588]	; 12348 <__assert_fail@plt+0x102c>
   11540:	mov	r0, #0
   11544:	ldr	r4, [r8]
   11548:	bl	110c4 <dcgettext@plt>
   1154c:	mov	r1, r0
   11550:	mov	r0, r4
   11554:	bl	135b8 <__assert_fail@plt+0x229c>
   11558:	mov	fp, r0
   1155c:	b	113a0 <__assert_fail@plt+0x84>
   11560:	mov	r3, #1
   11564:	str	r3, [r7, #48]	; 0x30
   11568:	b	113a0 <__assert_fail@plt+0x84>
   1156c:	ldr	r3, [pc, #3544]	; 1234c <__assert_fail@plt+0x1030>
   11570:	mov	r2, #10
   11574:	ldr	r1, [pc, #3540]	; 12350 <__assert_fail@plt+0x1034>
   11578:	ldr	r0, [r8]
   1157c:	bl	13f24 <__assert_fail@plt+0x2c08>
   11580:	cmp	r0, #0
   11584:	str	r0, [r7]
   11588:	bge	113a0 <__assert_fail@plt+0x84>
   1158c:	mov	r3, #1
   11590:	str	r3, [sp, #40]	; 0x28
   11594:	b	115f0 <__assert_fail@plt+0x2d4>
   11598:	mov	r3, #1
   1159c:	str	r3, [r7, #44]	; 0x2c
   115a0:	b	113a0 <__assert_fail@plt+0x84>
   115a4:	ldr	r2, [pc, #3496]	; 12354 <__assert_fail@plt+0x1038>
   115a8:	add	r1, sp, #56	; 0x38
   115ac:	ldr	r0, [r8]
   115b0:	bl	1417c <__assert_fail@plt+0x2e60>
   115b4:	cmp	r0, #0
   115b8:	beq	113a0 <__assert_fail@plt+0x84>
   115bc:	b	1158c <__assert_fail@plt+0x270>
   115c0:	mov	r2, #5
   115c4:	ldr	r1, [pc, #3468]	; 12358 <__assert_fail@plt+0x103c>
   115c8:	mov	r0, #0
   115cc:	bl	110c4 <dcgettext@plt>
   115d0:	ldr	r2, [pc, #3460]	; 1235c <__assert_fail@plt+0x1040>
   115d4:	mov	r1, #0
   115d8:	str	r1, [sp, #40]	; 0x28
   115dc:	ldr	r3, [pc, #3452]	; 12360 <__assert_fail@plt+0x1044>
   115e0:	ldr	r2, [r2]
   115e4:	mov	r1, r0
   115e8:	mov	r0, #1
   115ec:	bl	11214 <__printf_chk@plt>
   115f0:	ldr	r3, [pc, #3368]	; 12320 <__assert_fail@plt+0x1004>
   115f4:	ldr	r2, [sp, #396]	; 0x18c
   115f8:	ldr	r0, [sp, #40]	; 0x28
   115fc:	ldr	r3, [r3]
   11600:	cmp	r2, r3
   11604:	bne	124c8 <__assert_fail@plt+0x11ac>
   11608:	add	sp, sp, #404	; 0x194
   1160c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11610:	mov	r3, #1
   11614:	str	r3, [sp, #20]
   11618:	b	113a0 <__assert_fail@plt+0x84>
   1161c:	mov	r3, #1
   11620:	str	r3, [sp, #28]
   11624:	b	113a0 <__assert_fail@plt+0x84>
   11628:	mov	r3, #1
   1162c:	str	r3, [sp, #16]
   11630:	b	113a0 <__assert_fail@plt+0x84>
   11634:	mov	r3, #1
   11638:	str	r3, [sp, #24]
   1163c:	b	113a0 <__assert_fail@plt+0x84>
   11640:	ldr	r7, [pc, #3312]	; 12338 <__assert_fail@plt+0x101c>
   11644:	ldr	r3, [r7]
   11648:	cmp	r3, #0
   1164c:	bne	11674 <__assert_fail@plt+0x358>
   11650:	mov	r2, #1
   11654:	str	r3, [r7, #4]
   11658:	mov	r3, #2
   1165c:	str	r2, [r7, #8]
   11660:	str	r3, [r7, #12]
   11664:	mov	r2, #4
   11668:	mov	r3, #3
   1166c:	str	r2, [r7]
   11670:	str	r3, [r7, #16]
   11674:	ldr	r2, [pc, #3304]	; 12364 <__assert_fail@plt+0x1048>
   11678:	ldr	r8, [pc, #3304]	; 12368 <__assert_fail@plt+0x104c>
   1167c:	mov	r3, #0
   11680:	ldr	r4, [r2]
   11684:	str	r3, [sp, #12]
   11688:	str	r3, [sp, #40]	; 0x28
   1168c:	str	fp, [sp, #36]	; 0x24
   11690:	str	r9, [sp, #32]
   11694:	str	sl, [sp, #44]	; 0x2c
   11698:	mov	r2, #68	; 0x44
   1169c:	mov	r1, #0
   116a0:	add	r0, sp, #72	; 0x48
   116a4:	bl	111fc <memset@plt>
   116a8:	ldr	r3, [sp, #32]
   116ac:	cmp	r3, r4
   116b0:	ldrne	r3, [sp, #44]	; 0x2c
   116b4:	ldreq	r3, [pc, #3248]	; 1236c <__assert_fail@plt+0x1050>
   116b8:	ldrne	r3, [r3, r4, lsl #2]
   116bc:	addne	r4, r4, #1
   116c0:	strne	r3, [sp, #72]	; 0x48
   116c4:	ldrne	r3, [pc, #3224]	; 12364 <__assert_fail@plt+0x1048>
   116c8:	streq	r3, [sp, #72]	; 0x48
   116cc:	strne	r4, [r3]
   116d0:	ldr	r3, [sp, #12]
   116d4:	cmp	r3, #0
   116d8:	bne	119a0 <__assert_fail@plt+0x684>
   116dc:	ldr	r3, [sp, #36]	; 0x24
   116e0:	cmp	r3, #0
   116e4:	ldr	r3, [sp, #12]
   116e8:	add	r3, r3, #1
   116ec:	str	r3, [sp, #12]
   116f0:	ldr	r3, [sp, #72]	; 0x48
   116f4:	bne	118bc <__assert_fail@plt+0x5a0>
   116f8:	cmp	r3, #0
   116fc:	beq	12498 <__assert_fail@plt+0x117c>
   11700:	add	r4, sp, #268	; 0x10c
   11704:	mov	r0, r4
   11708:	bl	1125c <sigemptyset@plt>
   1170c:	add	r0, sp, #140	; 0x8c
   11710:	bl	111c0 <sigfillset@plt>
   11714:	mov	r2, r4
   11718:	add	r1, sp, #140	; 0x8c
   1171c:	mov	r0, #0
   11720:	bl	11064 <sigprocmask@plt>
   11724:	ldr	r1, [pc, #3140]	; 12370 <__assert_fail@plt+0x1054>
   11728:	ldr	r0, [sp, #72]	; 0x48
   1172c:	bl	11124 <open64@plt>
   11730:	subs	r5, r0, #0
   11734:	blt	121b4 <__assert_fail@plt+0xe98>
   11738:	add	r2, sp, #96	; 0x60
   1173c:	ldr	r1, [pc, #3120]	; 12374 <__assert_fail@plt+0x1058>
   11740:	bl	11100 <ioctl@plt>
   11744:	cmp	r0, #0
   11748:	blt	118a0 <__assert_fail@plt+0x584>
   1174c:	add	r2, sp, #88	; 0x58
   11750:	ldr	r1, [pc, #3104]	; 12378 <__assert_fail@plt+0x105c>
   11754:	mov	r0, r5
   11758:	bl	11100 <ioctl@plt>
   1175c:	add	r2, sp, #92	; 0x5c
   11760:	ldr	r1, [pc, #3092]	; 1237c <__assert_fail@plt+0x1060>
   11764:	mov	r0, r5
   11768:	bl	11100 <ioctl@plt>
   1176c:	add	r2, sp, #76	; 0x4c
   11770:	ldr	r1, [pc, #3080]	; 12380 <__assert_fail@plt+0x1064>
   11774:	mov	r0, r5
   11778:	bl	11100 <ioctl@plt>
   1177c:	add	r2, sp, #84	; 0x54
   11780:	ldr	r1, [pc, #3068]	; 12384 <__assert_fail@plt+0x1068>
   11784:	cmp	r0, #0
   11788:	mov	r0, r5
   1178c:	ldrbge	r3, [sp, #136]	; 0x88
   11790:	orrge	r3, r3, #1
   11794:	strbge	r3, [sp, #136]	; 0x88
   11798:	bl	11100 <ioctl@plt>
   1179c:	add	r2, sp, #80	; 0x50
   117a0:	ldr	r1, [pc, #3040]	; 12388 <__assert_fail@plt+0x106c>
   117a4:	cmp	r0, #0
   117a8:	mov	r0, r5
   117ac:	ldrbge	r3, [sp, #136]	; 0x88
   117b0:	orrge	r3, r3, #4
   117b4:	strbge	r3, [sp, #136]	; 0x88
   117b8:	bl	11100 <ioctl@plt>
   117bc:	cmp	r0, #0
   117c0:	ldrbge	r3, [sp, #136]	; 0x88
   117c4:	orrge	r3, r3, #2
   117c8:	strbge	r3, [sp, #136]	; 0x88
   117cc:	b	117e0 <__assert_fail@plt+0x4c4>
   117d0:	bl	111cc <__errno_location@plt>
   117d4:	ldr	r3, [r0]
   117d8:	cmp	r3, #4
   117dc:	bne	11860 <__assert_fail@plt+0x544>
   117e0:	mov	r2, #1
   117e4:	mov	r1, r8
   117e8:	mov	r0, r5
   117ec:	bl	1122c <write@plt>
   117f0:	cmp	r0, #0
   117f4:	blt	117d0 <__assert_fail@plt+0x4b4>
   117f8:	mov	r0, r5
   117fc:	bl	112e0 <close@plt>
   11800:	cmp	r0, #0
   11804:	bne	11888 <__assert_fail@plt+0x56c>
   11808:	mov	r1, r4
   1180c:	mov	r2, #0
   11810:	mov	r0, #2
   11814:	bl	11064 <sigprocmask@plt>
   11818:	ldr	r3, [sp, #28]
   1181c:	cmp	r3, #0
   11820:	bne	11b40 <__assert_fail@plt+0x824>
   11824:	ldr	r3, [sp, #16]
   11828:	cmp	r3, #0
   1182c:	beq	11ab4 <__assert_fail@plt+0x798>
   11830:	ldr	r3, [sp, #20]
   11834:	cmp	r3, #0
   11838:	beq	11a50 <__assert_fail@plt+0x734>
   1183c:	ldr	r3, [sp, #24]
   11840:	cmp	r3, #0
   11844:	beq	119b4 <__assert_fail@plt+0x698>
   11848:	ldr	r3, [pc, #2836]	; 12364 <__assert_fail@plt+0x1048>
   1184c:	ldr	r4, [r3]
   11850:	ldr	r3, [sp, #32]
   11854:	cmp	r4, r3
   11858:	blt	11698 <__assert_fail@plt+0x37c>
   1185c:	b	115f0 <__assert_fail@plt+0x2d4>
   11860:	mov	r2, #5
   11864:	ldr	r1, [pc, #2848]	; 1238c <__assert_fail@plt+0x1070>
   11868:	mov	r0, #0
   1186c:	bl	110c4 <dcgettext@plt>
   11870:	ldr	r1, [sp, #72]	; 0x48
   11874:	bl	11274 <warn@plt>
   11878:	mov	r0, r5
   1187c:	bl	112e0 <close@plt>
   11880:	cmp	r0, #0
   11884:	beq	11808 <__assert_fail@plt+0x4ec>
   11888:	mov	r2, #5
   1188c:	ldr	r1, [pc, #2812]	; 12390 <__assert_fail@plt+0x1074>
   11890:	mov	r0, #0
   11894:	bl	110c4 <dcgettext@plt>
   11898:	bl	11274 <warn@plt>
   1189c:	b	11808 <__assert_fail@plt+0x4ec>
   118a0:	mov	r2, #5
   118a4:	ldr	r1, [pc, #2792]	; 12394 <__assert_fail@plt+0x1078>
   118a8:	mov	r0, #0
   118ac:	bl	110c4 <dcgettext@plt>
   118b0:	ldr	r1, [sp, #72]	; 0x48
   118b4:	bl	11274 <warn@plt>
   118b8:	b	117e0 <__assert_fail@plt+0x4c4>
   118bc:	cmp	r3, #0
   118c0:	ldr	r3, [sp, #36]	; 0x24
   118c4:	str	r3, [sp, #60]	; 0x3c
   118c8:	beq	124cc <__assert_fail@plt+0x11b0>
   118cc:	add	r4, sp, #268	; 0x10c
   118d0:	mov	r0, r4
   118d4:	bl	1125c <sigemptyset@plt>
   118d8:	add	r0, sp, #140	; 0x8c
   118dc:	bl	111c0 <sigfillset@plt>
   118e0:	mov	r2, r4
   118e4:	add	r1, sp, #140	; 0x8c
   118e8:	mov	r0, #0
   118ec:	bl	11064 <sigprocmask@plt>
   118f0:	ldr	r1, [pc, #2680]	; 12370 <__assert_fail@plt+0x1054>
   118f4:	ldr	r0, [sp, #72]	; 0x48
   118f8:	bl	11124 <open64@plt>
   118fc:	subs	r5, r0, #0
   11900:	blt	122d4 <__assert_fail@plt+0xfb8>
   11904:	ldr	r6, [pc, #2700]	; 12398 <__assert_fail@plt+0x107c>
   11908:	b	1191c <__assert_fail@plt+0x600>
   1190c:	bl	111cc <__errno_location@plt>
   11910:	ldr	r3, [r0]
   11914:	cmp	r3, #4
   11918:	bne	11b24 <__assert_fail@plt+0x808>
   1191c:	mov	r2, #1
   11920:	mov	r1, r6
   11924:	mov	r0, r5
   11928:	bl	1122c <write@plt>
   1192c:	cmp	r0, #0
   11930:	blt	1190c <__assert_fail@plt+0x5f0>
   11934:	add	r2, sp, #60	; 0x3c
   11938:	ldr	r1, [pc, #2652]	; 1239c <__assert_fail@plt+0x1080>
   1193c:	mov	r0, r5
   11940:	bl	11100 <ioctl@plt>
   11944:	subs	r6, r0, #0
   11948:	bne	11c34 <__assert_fail@plt+0x918>
   1194c:	mov	r0, r5
   11950:	bl	112e0 <close@plt>
   11954:	subs	r5, r0, #0
   11958:	bne	11c64 <__assert_fail@plt+0x948>
   1195c:	mov	r1, r4
   11960:	mov	r2, r5
   11964:	mov	r0, #2
   11968:	bl	11064 <sigprocmask@plt>
   1196c:	mov	r3, #5
   11970:	str	r3, [sp]
   11974:	ldr	r2, [pc, #2596]	; 123a0 <__assert_fail@plt+0x1084>
   11978:	ldr	r3, [sp, #60]	; 0x3c
   1197c:	ldr	r1, [pc, #2592]	; 123a4 <__assert_fail@plt+0x1088>
   11980:	mov	r0, r5
   11984:	bl	112ec <dcngettext@plt>
   11988:	ldr	r2, [sp, #60]	; 0x3c
   1198c:	mov	r1, r0
   11990:	mov	r0, #1
   11994:	bl	11214 <__printf_chk@plt>
   11998:	ldr	r3, [sp, #72]	; 0x48
   1199c:	b	116f8 <__assert_fail@plt+0x3dc>
   119a0:	ldr	r3, [pc, #2560]	; 123a8 <__assert_fail@plt+0x108c>
   119a4:	mov	r0, #10
   119a8:	ldr	r1, [r3]
   119ac:	bl	1128c <fputc@plt>
   119b0:	b	116dc <__assert_fail@plt+0x3c0>
   119b4:	mov	r0, r3
   119b8:	ldr	sl, [sp, #56]	; 0x38
   119bc:	bl	11304 <scols_init_debug@plt>
   119c0:	bl	1110c <scols_new_table@plt>
   119c4:	subs	r9, r0, #0
   119c8:	beq	1230c <__assert_fail@plt+0xff0>
   119cc:	ldr	r1, [r7, #48]	; 0x30
   119d0:	bl	1107c <scols_table_enable_raw@plt>
   119d4:	ldr	r1, [r7, #44]	; 0x2c
   119d8:	mov	r0, r9
   119dc:	bl	1104c <scols_table_enable_noheadings@plt>
   119e0:	ldr	r3, [r7]
   119e4:	cmp	r3, #0
   119e8:	ldrne	r4, [sp, #24]
   119ec:	bne	11a04 <__assert_fail@plt+0x6e8>
   119f0:	b	11cc8 <__assert_fail@plt+0x9ac>
   119f4:	ldr	r3, [r7]
   119f8:	add	r4, r4, #1
   119fc:	cmp	r4, r3
   11a00:	bcs	11cc8 <__assert_fail@plt+0x9ac>
   11a04:	mov	r0, r4
   11a08:	bl	126e4 <__assert_fail@plt+0x13c8>
   11a0c:	ldr	r2, [pc, #2332]	; 12330 <__assert_fail@plt+0x1014>
   11a10:	add	r3, r0, r0, lsl #1
   11a14:	mov	r0, r9
   11a18:	add	r3, r2, r3, lsl #3
   11a1c:	ldr	r2, [r3, #160]	; 0xa0
   11a20:	vldr	d0, [r3, #152]	; 0x98
   11a24:	ldr	r1, [r3, #144]	; 0x90
   11a28:	bl	11058 <scols_table_new_column@plt>
   11a2c:	cmp	r0, #0
   11a30:	bne	119f4 <__assert_fail@plt+0x6d8>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #2412]	; 123ac <__assert_fail@plt+0x1090>
   11a3c:	bl	110c4 <dcgettext@plt>
   11a40:	bl	111b4 <warnx@plt>
   11a44:	mov	r0, r9
   11a48:	bl	11154 <scols_unref_table@plt>
   11a4c:	b	11848 <__assert_fail@plt+0x52c>
   11a50:	ldrb	r3, [sp, #136]	; 0x88
   11a54:	tst	r3, #1
   11a58:	bne	11e40 <__assert_fail@plt+0xb24>
   11a5c:	tst	r3, #4
   11a60:	bne	11df4 <__assert_fail@plt+0xad8>
   11a64:	tst	r3, #2
   11a68:	beq	1183c <__assert_fail@plt+0x520>
   11a6c:	mov	r4, #5
   11a70:	ldr	r3, [sp, #80]	; 0x50
   11a74:	str	r4, [sp]
   11a78:	ldr	r2, [pc, #2352]	; 123b0 <__assert_fail@plt+0x1094>
   11a7c:	ldr	r1, [pc, #2352]	; 123b4 <__assert_fail@plt+0x1098>
   11a80:	mov	r0, #0
   11a84:	bl	112ec <dcngettext@plt>
   11a88:	mov	r2, r4
   11a8c:	ldr	r1, [pc, #2340]	; 123b8 <__assert_fail@plt+0x109c>
   11a90:	mov	r5, r0
   11a94:	mov	r0, #0
   11a98:	bl	110c4 <dcgettext@plt>
   11a9c:	mov	r1, r5
   11aa0:	ldr	r3, [sp, #80]	; 0x50
   11aa4:	mov	r2, r0
   11aa8:	mov	r0, #1
   11aac:	bl	11214 <__printf_chk@plt>
   11ab0:	b	1183c <__assert_fail@plt+0x520>
   11ab4:	mov	r2, #5
   11ab8:	ldr	r1, [pc, #2300]	; 123bc <__assert_fail@plt+0x10a0>
   11abc:	mov	r0, r3
   11ac0:	mov	r5, r3
   11ac4:	bl	110c4 <dcgettext@plt>
   11ac8:	ldr	r3, [sp, #72]	; 0x48
   11acc:	ldr	r1, [pc, #2284]	; 123c0 <__assert_fail@plt+0x10a4>
   11ad0:	mov	r2, r0
   11ad4:	mov	r0, #1
   11ad8:	bl	11214 <__printf_chk@plt>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #2268]	; 123c4 <__assert_fail@plt+0x10a8>
   11ae4:	mov	r0, r5
   11ae8:	bl	110c4 <dcgettext@plt>
   11aec:	mov	r2, #5
   11af0:	ldr	r1, [pc, #2256]	; 123c8 <__assert_fail@plt+0x10ac>
   11af4:	mov	r4, r0
   11af8:	mov	r0, r5
   11afc:	bl	110c4 <dcgettext@plt>
   11b00:	ldr	r3, [sp, #100]	; 0x64
   11b04:	mov	r2, r4
   11b08:	str	r3, [sp, #4]
   11b0c:	ldr	r1, [pc, #2232]	; 123cc <__assert_fail@plt+0x10b0>
   11b10:	add	r3, sp, #104	; 0x68
   11b14:	str	r0, [sp]
   11b18:	mov	r0, #1
   11b1c:	bl	11214 <__printf_chk@plt>
   11b20:	b	11830 <__assert_fail@plt+0x514>
   11b24:	mov	r2, #5
   11b28:	ldr	r1, [pc, #2140]	; 1238c <__assert_fail@plt+0x1070>
   11b2c:	mov	r0, #0
   11b30:	bl	110c4 <dcgettext@plt>
   11b34:	ldr	r1, [sp, #72]	; 0x48
   11b38:	bl	11274 <warn@plt>
   11b3c:	b	11934 <__assert_fail@plt+0x618>
   11b40:	ldr	r2, [sp, #72]	; 0x48
   11b44:	ldr	r1, [pc, #2180]	; 123d0 <__assert_fail@plt+0x10b4>
   11b48:	mov	r0, #1
   11b4c:	ldr	r9, [sp, #56]	; 0x38
   11b50:	bl	11214 <__printf_chk@plt>
   11b54:	ldr	r3, [sp, #16]
   11b58:	cmp	r3, #0
   11b5c:	ldr	r3, [pc, #2116]	; 123a8 <__assert_fail@plt+0x108c>
   11b60:	strne	r3, [sp, #52]	; 0x34
   11b64:	beq	11e90 <__assert_fail@plt+0xb74>
   11b68:	ldr	r3, [sp, #20]
   11b6c:	cmp	r3, #0
   11b70:	bne	11b90 <__assert_fail@plt+0x874>
   11b74:	ldrb	r3, [sp, #136]	; 0x88
   11b78:	tst	r3, #1
   11b7c:	bne	1219c <__assert_fail@plt+0xe80>
   11b80:	tst	r3, #4
   11b84:	bne	12184 <__assert_fail@plt+0xe68>
   11b88:	tst	r3, #2
   11b8c:	bne	12170 <__assert_fail@plt+0xe54>
   11b90:	ldr	r3, [sp, #24]
   11b94:	cmp	r3, #0
   11b98:	bne	11c20 <__assert_fail@plt+0x904>
   11b9c:	ldr	r4, [pc, #2096]	; 123d4 <__assert_fail@plt+0x10b8>
   11ba0:	ldr	sl, [pc, #2096]	; 123d8 <__assert_fail@plt+0x10bc>
   11ba4:	ldr	r3, [sp, #96]	; 0x60
   11ba8:	add	fp, r4, #144	; 0x90
   11bac:	str	r3, [sp, #48]	; 0x30
   11bb0:	cmp	r9, #0
   11bb4:	ldr	r5, [r4, #-4]
   11bb8:	beq	11bc4 <__assert_fail@plt+0x8a8>
   11bbc:	tst	r9, r5
   11bc0:	beq	11c14 <__assert_fail@plt+0x8f8>
   11bc4:	ldr	r3, [sp, #48]	; 0x30
   11bc8:	tst	r5, r3
   11bcc:	beq	11c14 <__assert_fail@plt+0x8f8>
   11bd0:	ldr	r3, [sp, #88]	; 0x58
   11bd4:	ldr	r6, [r4]
   11bd8:	tst	r5, r3
   11bdc:	mov	r2, r6
   11be0:	ldr	r3, [pc, #2036]	; 123dc <__assert_fail@plt+0x10c0>
   11be4:	ldr	r1, [pc, #2036]	; 123e0 <__assert_fail@plt+0x10c4>
   11be8:	movne	r3, sl
   11bec:	mov	r0, #1
   11bf0:	bl	11214 <__printf_chk@plt>
   11bf4:	ldr	r3, [sp, #92]	; 0x5c
   11bf8:	mov	r2, r6
   11bfc:	tst	r5, r3
   11c00:	ldr	r1, [pc, #2012]	; 123e4 <__assert_fail@plt+0x10c8>
   11c04:	ldr	r3, [pc, #2000]	; 123dc <__assert_fail@plt+0x10c0>
   11c08:	mov	r0, #1
   11c0c:	movne	r3, sl
   11c10:	bl	11214 <__printf_chk@plt>
   11c14:	add	r4, r4, #12
   11c18:	cmp	fp, r4
   11c1c:	bne	11bb0 <__assert_fail@plt+0x894>
   11c20:	ldr	r3, [sp, #52]	; 0x34
   11c24:	mov	r0, #10
   11c28:	ldr	r1, [r3]
   11c2c:	bl	1128c <fputc@plt>
   11c30:	b	11848 <__assert_fail@plt+0x52c>
   11c34:	bl	111cc <__errno_location@plt>
   11c38:	mov	r2, #5
   11c3c:	ldr	r1, [pc, #1956]	; 123e8 <__assert_fail@plt+0x10cc>
   11c40:	ldr	r6, [r0]
   11c44:	mov	r0, #0
   11c48:	bl	110c4 <dcgettext@plt>
   11c4c:	ldr	r1, [sp, #72]	; 0x48
   11c50:	bl	11274 <warn@plt>
   11c54:	mov	r0, r5
   11c58:	bl	112e0 <close@plt>
   11c5c:	cmp	r0, #0
   11c60:	beq	11c78 <__assert_fail@plt+0x95c>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #1824]	; 12390 <__assert_fail@plt+0x1074>
   11c6c:	mov	r0, #0
   11c70:	bl	110c4 <dcgettext@plt>
   11c74:	bl	11274 <warn@plt>
   11c78:	mov	r1, r4
   11c7c:	mov	r2, #0
   11c80:	mov	r0, #2
   11c84:	bl	11064 <sigprocmask@plt>
   11c88:	mov	r3, #5
   11c8c:	str	r3, [sp]
   11c90:	ldr	r2, [pc, #1800]	; 123a0 <__assert_fail@plt+0x1084>
   11c94:	ldr	r3, [sp, #60]	; 0x3c
   11c98:	ldr	r1, [pc, #1796]	; 123a4 <__assert_fail@plt+0x1088>
   11c9c:	mov	r0, #0
   11ca0:	bl	112ec <dcngettext@plt>
   11ca4:	ldr	r2, [sp, #60]	; 0x3c
   11ca8:	mov	r1, r0
   11cac:	mov	r0, #1
   11cb0:	bl	11214 <__printf_chk@plt>
   11cb4:	cmp	r6, #0
   11cb8:	movne	r2, #1
   11cbc:	ldr	r3, [sp, #72]	; 0x48
   11cc0:	strne	r2, [sp, #40]	; 0x28
   11cc4:	b	116f8 <__assert_fail@plt+0x3dc>
   11cc8:	ldr	r4, [pc, #1632]	; 12330 <__assert_fail@plt+0x1014>
   11ccc:	ldr	r6, [sp, #96]	; 0x60
   11cd0:	str	r9, [sp, #48]	; 0x30
   11cd4:	b	11cec <__assert_fail@plt+0x9d0>
   11cd8:	ldr	r3, [pc, #1804]	; 123ec <__assert_fail@plt+0x10d0>
   11cdc:	add	r4, r4, #12
   11ce0:	cmp	r4, r3
   11ce4:	bic	r6, r6, r5
   11ce8:	beq	11ddc <__assert_fail@plt+0xac0>
   11cec:	cmp	sl, #0
   11cf0:	ldr	r5, [r4]
   11cf4:	beq	11d00 <__assert_fail@plt+0x9e4>
   11cf8:	tst	sl, r5
   11cfc:	beq	11cd8 <__assert_fail@plt+0x9bc>
   11d00:	tst	r5, r6
   11d04:	beq	11cd8 <__assert_fail@plt+0x9bc>
   11d08:	mov	r1, #0
   11d0c:	ldr	r0, [sp, #48]	; 0x30
   11d10:	bl	11148 <scols_table_new_line@plt>
   11d14:	subs	fp, r0, #0
   11d18:	beq	1215c <__assert_fail@plt+0xe40>
   11d1c:	ldr	r3, [r7]
   11d20:	cmp	r3, #0
   11d24:	movgt	r9, #0
   11d28:	ble	11cd8 <__assert_fail@plt+0x9bc>
   11d2c:	mov	r0, r9
   11d30:	bl	126e4 <__assert_fail@plt+0x13c8>
   11d34:	cmp	r0, #4
   11d38:	ldrls	pc, [pc, r0, lsl #2]
   11d3c:	b	11d60 <__assert_fail@plt+0xa44>
   11d40:	ldrdeq	r1, [r1], -r4
   11d44:	andeq	r1, r1, ip, asr #27
   11d48:			; <UNDEFINED> instruction: 0x00011db4
   11d4c:	andeq	r1, r1, r4, ror sp
   11d50:	andeq	r1, r1, r4, asr sp
   11d54:	ldr	r2, [sp, #72]	; 0x48
   11d58:	cmp	r2, #0
   11d5c:	bne	11d88 <__assert_fail@plt+0xa6c>
   11d60:	ldr	r3, [r7]
   11d64:	add	r9, r9, #1
   11d68:	cmp	r9, r3
   11d6c:	blt	11d2c <__assert_fail@plt+0xa10>
   11d70:	b	11cd8 <__assert_fail@plt+0x9bc>
   11d74:	ldr	r3, [sp, #92]	; 0x5c
   11d78:	ldr	r2, [pc, #1628]	; 123dc <__assert_fail@plt+0x10c0>
   11d7c:	tst	r5, r3
   11d80:	ldr	r3, [pc, #1616]	; 123d8 <__assert_fail@plt+0x10bc>
   11d84:	movne	r2, r3
   11d88:	mov	r1, r9
   11d8c:	mov	r0, fp
   11d90:	bl	1101c <scols_line_set_data@plt>
   11d94:	cmp	r0, #0
   11d98:	beq	11d60 <__assert_fail@plt+0xa44>
   11d9c:	mov	r2, #5
   11da0:	ldr	r1, [pc, #1608]	; 123f0 <__assert_fail@plt+0x10d4>
   11da4:	mov	r0, #0
   11da8:	bl	110c4 <dcgettext@plt>
   11dac:	bl	11274 <warn@plt>
   11db0:	b	11cd8 <__assert_fail@plt+0x9bc>
   11db4:	ldr	r3, [sp, #88]	; 0x58
   11db8:	ldr	r2, [pc, #1560]	; 123d8 <__assert_fail@plt+0x10bc>
   11dbc:	tst	r5, r3
   11dc0:	ldr	r3, [pc, #1556]	; 123dc <__assert_fail@plt+0x10c0>
   11dc4:	moveq	r2, r3
   11dc8:	b	11d88 <__assert_fail@plt+0xa6c>
   11dcc:	ldr	r2, [r4, #8]
   11dd0:	b	11d58 <__assert_fail@plt+0xa3c>
   11dd4:	ldr	r2, [r4, #4]
   11dd8:	b	11d58 <__assert_fail@plt+0xa3c>
   11ddc:	cmp	r6, #0
   11de0:	ldr	r9, [sp, #48]	; 0x30
   11de4:	bne	1213c <__assert_fail@plt+0xe20>
   11de8:	mov	r0, r9
   11dec:	bl	11280 <scols_print_table@plt>
   11df0:	b	11a44 <__assert_fail@plt+0x728>
   11df4:	mov	r4, #5
   11df8:	ldr	r3, [sp, #84]	; 0x54
   11dfc:	ldr	r2, [pc, #1452]	; 123b0 <__assert_fail@plt+0x1094>
   11e00:	ldr	r1, [pc, #1452]	; 123b4 <__assert_fail@plt+0x1098>
   11e04:	str	r4, [sp]
   11e08:	mov	r0, #0
   11e0c:	bl	112ec <dcngettext@plt>
   11e10:	mov	r2, r4
   11e14:	ldr	r1, [pc, #1496]	; 123f4 <__assert_fail@plt+0x10d8>
   11e18:	mov	r5, r0
   11e1c:	mov	r0, #0
   11e20:	bl	110c4 <dcgettext@plt>
   11e24:	ldr	r3, [sp, #84]	; 0x54
   11e28:	mov	r1, r5
   11e2c:	mov	r2, r0
   11e30:	mov	r0, #1
   11e34:	bl	11214 <__printf_chk@plt>
   11e38:	ldrb	r3, [sp, #136]	; 0x88
   11e3c:	b	11a64 <__assert_fail@plt+0x748>
   11e40:	ldr	r6, [sp, #20]
   11e44:	mov	r4, #5
   11e48:	ldr	r3, [sp, #76]	; 0x4c
   11e4c:	ldr	r2, [pc, #1372]	; 123b0 <__assert_fail@plt+0x1094>
   11e50:	ldr	r1, [pc, #1372]	; 123b4 <__assert_fail@plt+0x1098>
   11e54:	str	r4, [sp]
   11e58:	mov	r0, r6
   11e5c:	bl	112ec <dcngettext@plt>
   11e60:	mov	r2, r4
   11e64:	ldr	r1, [pc, #1420]	; 123f8 <__assert_fail@plt+0x10dc>
   11e68:	mov	r5, r0
   11e6c:	mov	r0, r6
   11e70:	bl	110c4 <dcgettext@plt>
   11e74:	ldr	r3, [sp, #76]	; 0x4c
   11e78:	mov	r1, r5
   11e7c:	mov	r2, r0
   11e80:	mov	r0, #1
   11e84:	bl	11214 <__printf_chk@plt>
   11e88:	ldrb	r3, [sp, #136]	; 0x88
   11e8c:	b	11a5c <__assert_fail@plt+0x740>
   11e90:	mov	r4, r3
   11e94:	ldr	r2, [sp, #100]	; 0x64
   11e98:	ldr	r1, [pc, #1372]	; 123fc <__assert_fail@plt+0x10e0>
   11e9c:	mov	r0, #1
   11ea0:	str	r3, [sp, #52]	; 0x34
   11ea4:	bl	11214 <__printf_chk@plt>
   11ea8:	ldr	r1, [pc, #1360]	; 12400 <__assert_fail@plt+0x10e4>
   11eac:	mov	r0, #1
   11eb0:	bl	11214 <__printf_chk@plt>
   11eb4:	ldr	r5, [r4]
   11eb8:	mov	r0, #34	; 0x22
   11ebc:	mov	r1, r5
   11ec0:	bl	1128c <fputc@plt>
   11ec4:	add	r4, sp, #104	; 0x68
   11ec8:	ldr	r6, [pc, #1332]	; 12404 <__assert_fail@plt+0x10e8>
   11ecc:	b	11ee4 <__assert_fail@plt+0xbc8>
   11ed0:	mov	r3, sl
   11ed4:	mov	r2, r6
   11ed8:	mov	r1, #1
   11edc:	mov	r0, r5
   11ee0:	bl	11238 <__fprintf_chk@plt>
   11ee4:	ldrsb	fp, [r4], #1
   11ee8:	cmp	fp, #0
   11eec:	beq	11f50 <__assert_fail@plt+0xc34>
   11ef0:	uxtb	sl, fp
   11ef4:	sub	r3, sl, #34	; 0x22
   11ef8:	tst	r3, #253	; 0xfd
   11efc:	sub	r2, sl, #92	; 0x5c
   11f00:	moveq	r3, #1
   11f04:	movne	r3, #0
   11f08:	tst	r2, #251	; 0xfb
   11f0c:	moveq	r3, #1
   11f10:	cmp	r3, #0
   11f14:	bne	11ed0 <__assert_fail@plt+0xbb4>
   11f18:	bl	11178 <__ctype_b_loc@plt>
   11f1c:	lsl	r3, sl, #1
   11f20:	ldr	r2, [r0]
   11f24:	ldrh	r3, [r2, r3]
   11f28:	bic	r3, r3, #16320	; 0x3fc0
   11f2c:	bic	r3, r3, #61	; 0x3d
   11f30:	lsl	r3, r3, #17
   11f34:	lsr	r3, r3, #17
   11f38:	cmp	r3, #16384	; 0x4000
   11f3c:	bne	11ed0 <__assert_fail@plt+0xbb4>
   11f40:	mov	r0, fp
   11f44:	mov	r1, r5
   11f48:	bl	1128c <fputc@plt>
   11f4c:	b	11ee4 <__assert_fail@plt+0xbc8>
   11f50:	mov	r1, r5
   11f54:	mov	r0, #34	; 0x22
   11f58:	bl	1128c <fputc@plt>
   11f5c:	b	11b68 <__assert_fail@plt+0x84c>
   11f60:	ldr	r3, [pc, #1088]	; 123a8 <__assert_fail@plt+0x108c>
   11f64:	mov	r2, #5
   11f68:	ldr	r1, [pc, #1176]	; 12408 <__assert_fail@plt+0x10ec>
   11f6c:	ldr	r4, [r3]
   11f70:	mov	r0, #0
   11f74:	bl	110c4 <dcgettext@plt>
   11f78:	mov	r1, r4
   11f7c:	bl	112bc <fputs@plt>
   11f80:	mov	r2, #5
   11f84:	ldr	r1, [pc, #1152]	; 1240c <__assert_fail@plt+0x10f0>
   11f88:	mov	r0, #0
   11f8c:	bl	110c4 <dcgettext@plt>
   11f90:	ldr	r3, [pc, #964]	; 1235c <__assert_fail@plt+0x1040>
   11f94:	mov	r1, #1
   11f98:	mov	r6, #0
   11f9c:	ldr	r3, [r3]
   11fa0:	ldr	r5, [pc, #1092]	; 123ec <__assert_fail@plt+0x10d0>
   11fa4:	ldr	r8, [pc, #1124]	; 12410 <__assert_fail@plt+0x10f4>
   11fa8:	mov	r2, r0
   11fac:	mov	r0, r4
   11fb0:	bl	11238 <__fprintf_chk@plt>
   11fb4:	mov	r1, r4
   11fb8:	mov	r0, #10
   11fbc:	bl	1128c <fputc@plt>
   11fc0:	mov	r2, #5
   11fc4:	ldr	r1, [pc, #1096]	; 12414 <__assert_fail@plt+0x10f8>
   11fc8:	mov	r0, r6
   11fcc:	bl	110c4 <dcgettext@plt>
   11fd0:	mov	r1, r4
   11fd4:	bl	112bc <fputs@plt>
   11fd8:	mov	r2, #5
   11fdc:	ldr	r1, [pc, #1076]	; 12418 <__assert_fail@plt+0x10fc>
   11fe0:	mov	r0, r6
   11fe4:	bl	110c4 <dcgettext@plt>
   11fe8:	mov	r1, r4
   11fec:	bl	112bc <fputs@plt>
   11ff0:	mov	r2, #5
   11ff4:	ldr	r1, [pc, #1056]	; 1241c <__assert_fail@plt+0x1100>
   11ff8:	mov	r0, r6
   11ffc:	bl	110c4 <dcgettext@plt>
   12000:	mov	r1, r4
   12004:	bl	112bc <fputs@plt>
   12008:	mov	r1, r4
   1200c:	mov	r0, #10
   12010:	bl	1128c <fputc@plt>
   12014:	mov	r2, #5
   12018:	ldr	r1, [pc, #1024]	; 12420 <__assert_fail@plt+0x1104>
   1201c:	mov	r0, r6
   12020:	bl	110c4 <dcgettext@plt>
   12024:	mov	r2, #5
   12028:	ldr	r1, [pc, #1012]	; 12424 <__assert_fail@plt+0x1108>
   1202c:	mov	r7, r0
   12030:	mov	r0, r6
   12034:	bl	110c4 <dcgettext@plt>
   12038:	ldr	r2, [pc, #1000]	; 12428 <__assert_fail@plt+0x110c>
   1203c:	mov	r3, r7
   12040:	str	r2, [sp]
   12044:	ldr	r1, [pc, #992]	; 1242c <__assert_fail@plt+0x1110>
   12048:	ldr	r2, [pc, #992]	; 12430 <__assert_fail@plt+0x1114>
   1204c:	str	r0, [sp, #4]
   12050:	mov	r0, #1
   12054:	bl	11214 <__printf_chk@plt>
   12058:	mov	r1, r4
   1205c:	mov	r0, #10
   12060:	bl	1128c <fputc@plt>
   12064:	mov	r2, #5
   12068:	ldr	r1, [pc, #964]	; 12434 <__assert_fail@plt+0x1118>
   1206c:	mov	r0, r6
   12070:	bl	110c4 <dcgettext@plt>
   12074:	ldr	r3, [pc, #752]	; 1236c <__assert_fail@plt+0x1050>
   12078:	mov	r1, #1
   1207c:	mov	r2, r0
   12080:	mov	r0, r4
   12084:	bl	11238 <__fprintf_chk@plt>
   12088:	ldr	r1, [pc, #936]	; 12438 <__assert_fail@plt+0x111c>
   1208c:	mov	r2, #5
   12090:	mov	r0, r6
   12094:	bl	110c4 <dcgettext@plt>
   12098:	mov	r1, r4
   1209c:	bl	112bc <fputs@plt>
   120a0:	ldr	r1, [r5, #20]
   120a4:	mov	r2, #5
   120a8:	mov	r0, #0
   120ac:	ldr	r7, [r5]
   120b0:	bl	110c4 <dcgettext@plt>
   120b4:	add	r6, r6, #1
   120b8:	mov	r3, r7
   120bc:	mov	r2, r8
   120c0:	mov	r1, #1
   120c4:	add	r5, r5, #24
   120c8:	str	r0, [sp]
   120cc:	mov	r0, r4
   120d0:	bl	11238 <__fprintf_chk@plt>
   120d4:	cmp	r6, #5
   120d8:	bne	120a0 <__assert_fail@plt+0xd84>
   120dc:	mov	r2, r6
   120e0:	ldr	r1, [pc, #852]	; 1243c <__assert_fail@plt+0x1120>
   120e4:	mov	r0, #0
   120e8:	bl	110c4 <dcgettext@plt>
   120ec:	ldr	r2, [pc, #844]	; 12440 <__assert_fail@plt+0x1124>
   120f0:	mov	r1, r0
   120f4:	mov	r0, #1
   120f8:	bl	11214 <__printf_chk@plt>
   120fc:	mov	r0, #0
   12100:	bl	11184 <exit@plt>
   12104:	ldr	r3, [pc, #824]	; 12444 <__assert_fail@plt+0x1128>
   12108:	mov	r2, #5
   1210c:	ldr	r1, [pc, #820]	; 12448 <__assert_fail@plt+0x112c>
   12110:	mov	r0, #0
   12114:	ldr	r4, [r3]
   12118:	bl	110c4 <dcgettext@plt>
   1211c:	ldr	r3, [pc, #568]	; 1235c <__assert_fail@plt+0x1040>
   12120:	mov	r1, #1
   12124:	ldr	r3, [r3]
   12128:	mov	r2, r0
   1212c:	mov	r0, r4
   12130:	bl	11238 <__fprintf_chk@plt>
   12134:	mov	r0, #1
   12138:	bl	11184 <exit@plt>
   1213c:	mov	r2, #5
   12140:	ldr	r1, [pc, #772]	; 1244c <__assert_fail@plt+0x1130>
   12144:	mov	r0, #0
   12148:	bl	110c4 <dcgettext@plt>
   1214c:	mov	r2, r6
   12150:	ldr	r1, [sp, #72]	; 0x48
   12154:	bl	111b4 <warnx@plt>
   12158:	b	11de8 <__assert_fail@plt+0xacc>
   1215c:	mov	r2, #5
   12160:	ldr	r1, [pc, #744]	; 12450 <__assert_fail@plt+0x1134>
   12164:	bl	110c4 <dcgettext@plt>
   12168:	bl	11274 <warn@plt>
   1216c:	b	11cd8 <__assert_fail@plt+0x9bc>
   12170:	ldr	r2, [sp, #80]	; 0x50
   12174:	ldr	r1, [pc, #728]	; 12454 <__assert_fail@plt+0x1138>
   12178:	mov	r0, #1
   1217c:	bl	11214 <__printf_chk@plt>
   12180:	b	11b90 <__assert_fail@plt+0x874>
   12184:	ldr	r2, [sp, #84]	; 0x54
   12188:	ldr	r1, [pc, #712]	; 12458 <__assert_fail@plt+0x113c>
   1218c:	mov	r0, #1
   12190:	bl	11214 <__printf_chk@plt>
   12194:	ldrb	r3, [sp, #136]	; 0x88
   12198:	b	11b88 <__assert_fail@plt+0x86c>
   1219c:	ldr	r2, [sp, #76]	; 0x4c
   121a0:	ldr	r1, [pc, #692]	; 1245c <__assert_fail@plt+0x1140>
   121a4:	mov	r0, #1
   121a8:	bl	11214 <__printf_chk@plt>
   121ac:	ldrb	r3, [sp, #136]	; 0x88
   121b0:	b	11b80 <__assert_fail@plt+0x864>
   121b4:	bl	111cc <__errno_location@plt>
   121b8:	ldr	r3, [r0]
   121bc:	cmp	r3, #16
   121c0:	beq	122b8 <__assert_fail@plt+0xf9c>
   121c4:	mov	r2, #5
   121c8:	ldr	r1, [pc, #656]	; 12460 <__assert_fail@plt+0x1144>
   121cc:	mov	r0, #0
   121d0:	bl	110c4 <dcgettext@plt>
   121d4:	ldr	r1, [sp, #72]	; 0x48
   121d8:	bl	11274 <warn@plt>
   121dc:	mov	r3, #1
   121e0:	str	r3, [sp, #40]	; 0x28
   121e4:	b	11848 <__assert_fail@plt+0x52c>
   121e8:	ldr	r6, [pc, #596]	; 12444 <__assert_fail@plt+0x1128>
   121ec:	mov	r2, #5
   121f0:	ldr	r1, [pc, #620]	; 12464 <__assert_fail@plt+0x1148>
   121f4:	mov	r0, #0
   121f8:	ldr	sl, [r6]
   121fc:	bl	110c4 <dcgettext@plt>
   12200:	ldr	r3, [pc, #340]	; 1235c <__assert_fail@plt+0x1040>
   12204:	mov	r1, #1
   12208:	sub	r5, r4, #4
   1220c:	ldr	r3, [r3]
   12210:	add	r4, r4, #56	; 0x38
   12214:	ldr	r7, [pc, #588]	; 12468 <__assert_fail@plt+0x114c>
   12218:	ldr	r9, [pc, #588]	; 1246c <__assert_fail@plt+0x1150>
   1221c:	ldr	r8, [pc, #588]	; 12470 <__assert_fail@plt+0x1154>
   12220:	mov	r2, r0
   12224:	mov	r0, sl
   12228:	bl	11238 <__fprintf_chk@plt>
   1222c:	ldr	r0, [r5, #4]!
   12230:	cmp	r0, #0
   12234:	beq	1228c <__assert_fail@plt+0xf70>
   12238:	cmp	r0, #102	; 0x66
   1223c:	beq	122a0 <__assert_fail@plt+0xf84>
   12240:	ldr	r2, [pc, #556]	; 12474 <__assert_fail@plt+0x1158>
   12244:	b	12258 <__assert_fail@plt+0xf3c>
   12248:	add	r2, r2, #16
   1224c:	ldr	r1, [r2, #12]
   12250:	cmp	r0, r1
   12254:	beq	122a4 <__assert_fail@plt+0xf88>
   12258:	ldr	r3, [r2, #16]
   1225c:	cmp	r3, #0
   12260:	bne	12248 <__assert_fail@plt+0xf2c>
   12264:	sub	r3, r0, #33	; 0x21
   12268:	cmp	r3, #93	; 0x5d
   1226c:	bhi	12284 <__assert_fail@plt+0xf68>
   12270:	mov	r3, r0
   12274:	mov	r2, r8
   12278:	mov	r1, #1
   1227c:	ldr	r0, [r6]
   12280:	bl	11238 <__fprintf_chk@plt>
   12284:	cmp	r4, r5
   12288:	bne	1222c <__assert_fail@plt+0xf10>
   1228c:	ldr	r1, [r6]
   12290:	mov	r0, #10
   12294:	bl	1128c <fputc@plt>
   12298:	mov	r0, #1
   1229c:	bl	11184 <exit@plt>
   122a0:	mov	r3, r9
   122a4:	mov	r2, r7
   122a8:	mov	r1, #1
   122ac:	ldr	r0, [r6]
   122b0:	bl	11238 <__fprintf_chk@plt>
   122b4:	b	12284 <__assert_fail@plt+0xf68>
   122b8:	mov	r2, #5
   122bc:	ldr	r1, [pc, #448]	; 12484 <__assert_fail@plt+0x1168>
   122c0:	mov	r0, #0
   122c4:	bl	110c4 <dcgettext@plt>
   122c8:	ldr	r1, [sp, #72]	; 0x48
   122cc:	bl	111b4 <warnx@plt>
   122d0:	b	121c4 <__assert_fail@plt+0xea8>
   122d4:	bl	111cc <__errno_location@plt>
   122d8:	ldr	r3, [r0]
   122dc:	cmp	r3, #16
   122e0:	beq	124ac <__assert_fail@plt+0x1190>
   122e4:	mov	r2, #5
   122e8:	ldr	r1, [pc, #368]	; 12460 <__assert_fail@plt+0x1144>
   122ec:	mov	r0, #0
   122f0:	bl	110c4 <dcgettext@plt>
   122f4:	ldr	r1, [sp, #72]	; 0x48
   122f8:	bl	11274 <warn@plt>
   122fc:	mov	r3, #1
   12300:	str	r3, [sp, #40]	; 0x28
   12304:	ldr	r3, [sp, #72]	; 0x48
   12308:	b	116f8 <__assert_fail@plt+0x3dc>
   1230c:	mov	r2, #5
   12310:	ldr	r1, [pc, #352]	; 12478 <__assert_fail@plt+0x115c>
   12314:	bl	110c4 <dcgettext@plt>
   12318:	bl	11274 <warn@plt>
   1231c:	b	11848 <__assert_fail@plt+0x52c>
   12320:	ldrdeq	r5, [r2], -r8
   12324:	andeq	r5, r1, r4, lsr r2
   12328:	andeq	r4, r1, r8, asr #26
   1232c:	andeq	r4, r1, ip, asr sp
   12330:	andeq	r4, r1, r0, lsr #20
   12334:	andeq	r2, r1, r4, asr #14
   12338:	andeq	r6, r2, r0, lsr r0
   1233c:	andeq	r5, r1, r8, ror #2
   12340:	andeq	r6, r2, r8, lsr #32
   12344:	andeq	r4, r1, r8, lsl #24
   12348:	muleq	r1, r4, sp
   1234c:	andeq	r2, r1, r4, ror #12
   12350:	andeq	r6, r2, r4, lsr r0
   12354:	ldrdeq	r2, [r1], -r0
   12358:			; <UNDEFINED> instruction: 0x00014db0
   1235c:	andeq	r6, r2, r0, lsl r0
   12360:			; <UNDEFINED> instruction: 0x00014dbc
   12364:	andeq	r6, r2, r8, lsl r0
   12368:	andeq	r4, r1, r6, lsr #25
   1236c:	andeq	r5, r1, r0, ror #1
   12370:	andeq	r0, r8, r1
   12374:	eorhi	r5, r8, r0, lsl #14
   12378:	andhi	r5, r4, r1, lsl #14
   1237c:	andhi	r5, r4, r2, lsl #14
   12380:	andhi	r5, r4, r7, lsl #14
   12384:	andhi	r5, r4, r9, lsl #14
   12388:	andhi	r5, r4, sl, lsl #14
   1238c:	andeq	r5, r1, r4, asr #3
   12390:	andeq	r5, r1, r0, lsl #4
   12394:	andeq	r5, r1, ip, asr r2
   12398:	muleq	r1, r5, ip
   1239c:	andgt	r5, r4, r6, lsl #14
   123a0:	andeq	r5, r1, r0, lsl r2
   123a4:	andeq	r5, r1, r8, lsr r2
   123a8:	andeq	r6, r2, r4, lsr #32
   123ac:	andeq	r5, r1, r8, lsr #7
   123b0:	andeq	r5, r1, r8, lsr r3
   123b4:	andeq	r5, r1, ip, asr #6
   123b8:	andeq	r5, r1, ip, ror r3
   123bc:	andeq	r5, r1, r4, lsl #6
   123c0:	andeq	r5, r1, ip, lsl #6
   123c4:	andeq	r5, r1, r8, lsl r3
   123c8:	andeq	r5, r1, ip, lsl #1
   123cc:	andeq	r5, r1, r4, lsr #6
   123d0:	andeq	r5, r1, ip, lsl #5
   123d4:	andeq	r4, r1, r4, lsr #20
   123d8:	andeq	r4, r1, ip, asr #27
   123dc:	andeq	r4, r1, ip, lsr sp
   123e0:	andeq	r5, r1, r8, ror #5
   123e4:	strdeq	r5, [r1], -r4
   123e8:	andeq	r5, r1, r4, ror #3
   123ec:			; <UNDEFINED> instruction: 0x00014ab0
   123f0:	andeq	r5, r1, ip, ror #7
   123f4:	andeq	r5, r1, ip, ror #6
   123f8:	andeq	r5, r1, r0, ror #6
   123fc:	muleq	r1, r0, r2
   12400:	andeq	r5, r1, r0, lsr #5
   12404:	andeq	r5, r1, ip, lsr #5
   12408:	ldrdeq	r4, [r1], -r0
   1240c:	ldrdeq	r4, [r1], -ip
   12410:	andeq	r5, r1, ip, lsl #2
   12414:	strdeq	r4, [r1], -ip
   12418:	andeq	r4, r1, r8, lsr #28
   1241c:	andeq	r4, r1, r4, lsr lr
   12420:	andeq	r5, r1, r0, ror r0
   12424:	andeq	r5, r1, r4, lsl #1
   12428:	strheq	r5, [r1], -r4
   1242c:	andeq	r5, r1, r0, lsr #1
   12430:	muleq	r1, r4, r0
   12434:	andeq	r5, r1, r4, asr #1
   12438:	strdeq	r5, [r1], -r0
   1243c:	andeq	r5, r1, r8, lsl r1
   12440:	andeq	r5, r1, r4, lsr r1
   12444:	andeq	r6, r2, r0, lsr #32
   12448:	andeq	r5, r1, r0, asr #2
   1244c:	andeq	r5, r1, r8, lsl #8
   12450:	andeq	r5, r1, ip, asr #7
   12454:	ldrdeq	r5, [r1], -r8
   12458:	andeq	r5, r1, r4, asr #5
   1245c:			; <UNDEFINED> instruction: 0x000152b4
   12460:			; <UNDEFINED> instruction: 0x000151b4
   12464:	andeq	r4, r1, r8, ror #26
   12468:	andeq	r5, r1, r0, lsr #8
   1246c:	andeq	r4, r1, r0, asr #26
   12470:	andeq	r4, r1, ip, lsl #27
   12474:	andeq	r4, r1, r8, lsr fp
   12478:	andeq	r5, r1, r8, lsl #7
   1247c:	muleq	r1, r8, ip
   12480:	andeq	r0, r0, lr, ror #2
   12484:	andeq	r5, r1, r8, lsl #3
   12488:	andeq	r4, r1, r8, lsl #25
   1248c:	andeq	r0, r0, r6, lsr r1
   12490:	andeq	r5, r1, ip, ror r1
   12494:	andeq	r4, r1, r4, ror #25
   12498:	ldr	r3, [pc, #-36]	; 1247c <__assert_fail@plt+0x1160>
   1249c:	ldr	r2, [pc, #-36]	; 12480 <__assert_fail@plt+0x1164>
   124a0:	ldr	r1, [pc, #-20]	; 12494 <__assert_fail@plt+0x1178>
   124a4:	ldr	r0, [pc, #-28]	; 12490 <__assert_fail@plt+0x1174>
   124a8:	bl	1131c <__assert_fail@plt>
   124ac:	mov	r2, #5
   124b0:	ldr	r1, [pc, #-52]	; 12484 <__assert_fail@plt+0x1168>
   124b4:	mov	r0, #0
   124b8:	bl	110c4 <dcgettext@plt>
   124bc:	ldr	r1, [sp, #72]	; 0x48
   124c0:	bl	111b4 <warnx@plt>
   124c4:	b	122e4 <__assert_fail@plt+0xfc8>
   124c8:	bl	110dc <__stack_chk_fail@plt>
   124cc:	ldr	r3, [pc, #-76]	; 12488 <__assert_fail@plt+0x116c>
   124d0:	ldr	r2, [pc, #-76]	; 1248c <__assert_fail@plt+0x1170>
   124d4:	ldr	r1, [pc, #-72]	; 12494 <__assert_fail@plt+0x1178>
   124d8:	ldr	r0, [pc, #-80]	; 12490 <__assert_fail@plt+0x1174>
   124dc:	bl	1131c <__assert_fail@plt>
   124e0:	mov	fp, #0
   124e4:	mov	lr, #0
   124e8:	pop	{r1}		; (ldr r1, [sp], #4)
   124ec:	mov	r2, sp
   124f0:	push	{r2}		; (str r2, [sp, #-4]!)
   124f4:	push	{r0}		; (str r0, [sp, #-4]!)
   124f8:	ldr	ip, [pc, #16]	; 12510 <__assert_fail@plt+0x11f4>
   124fc:	push	{ip}		; (str ip, [sp, #-4]!)
   12500:	ldr	r0, [pc, #12]	; 12514 <__assert_fail@plt+0x11f8>
   12504:	ldr	r3, [pc, #12]	; 12518 <__assert_fail@plt+0x11fc>
   12508:	bl	1113c <__libc_start_main@plt>
   1250c:	bl	112d4 <abort@plt>
   12510:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12514:	andeq	r1, r1, r8, lsr #6
   12518:	muleq	r1, r4, r9
   1251c:	ldr	r3, [pc, #20]	; 12538 <__assert_fail@plt+0x121c>
   12520:	ldr	r2, [pc, #20]	; 1253c <__assert_fail@plt+0x1220>
   12524:	add	r3, pc, r3
   12528:	ldr	r2, [r3, r2]
   1252c:	cmp	r2, #0
   12530:	bxeq	lr
   12534:	b	11160 <__gmon_start__@plt>
   12538:			; <UNDEFINED> instruction: 0x000139b8
   1253c:	andeq	r0, r0, r8, lsl r1
   12540:	ldr	r0, [pc, #24]	; 12560 <__assert_fail@plt+0x1244>
   12544:	ldr	r3, [pc, #24]	; 12564 <__assert_fail@plt+0x1248>
   12548:	cmp	r3, r0
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <__assert_fail@plt+0x124c>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	r6, r2, ip
   12564:	andeq	r6, r2, ip
   12568:	andeq	r0, r0, r0
   1256c:	ldr	r0, [pc, #36]	; 12598 <__assert_fail@plt+0x127c>
   12570:	ldr	r1, [pc, #36]	; 1259c <__assert_fail@plt+0x1280>
   12574:	sub	r1, r1, r0
   12578:	asr	r1, r1, #2
   1257c:	add	r1, r1, r1, lsr #31
   12580:	asrs	r1, r1, #1
   12584:	bxeq	lr
   12588:	ldr	r3, [pc, #16]	; 125a0 <__assert_fail@plt+0x1284>
   1258c:	cmp	r3, #0
   12590:	bxeq	lr
   12594:	bx	r3
   12598:	andeq	r6, r2, ip
   1259c:	andeq	r6, r2, ip
   125a0:	andeq	r0, r0, r0
   125a4:	push	{r4, lr}
   125a8:	ldr	r4, [pc, #24]	; 125c8 <__assert_fail@plt+0x12ac>
   125ac:	ldrb	r3, [r4]
   125b0:	cmp	r3, #0
   125b4:	popne	{r4, pc}
   125b8:	bl	12540 <__assert_fail@plt+0x1224>
   125bc:	mov	r3, #1
   125c0:	strb	r3, [r4]
   125c4:	pop	{r4, pc}
   125c8:	andeq	r6, r2, ip, lsr #32
   125cc:	b	1256c <__assert_fail@plt+0x1250>
   125d0:	push	{r4, r5, r6, r7, r8, lr}
   125d4:	mov	r8, r0
   125d8:	ldr	r5, [pc, #116]	; 12654 <__assert_fail@plt+0x1338>
   125dc:	ldr	r6, [pc, #116]	; 12658 <__assert_fail@plt+0x133c>
   125e0:	mov	r7, r1
   125e4:	mov	r4, #0
   125e8:	b	125f0 <__assert_fail@plt+0x12d4>
   125ec:	ldr	r6, [r5, #-12]
   125f0:	mov	r2, r7
   125f4:	mov	r1, r6
   125f8:	mov	r0, r8
   125fc:	bl	111d8 <strncasecmp@plt>
   12600:	add	r5, r5, #12
   12604:	cmp	r0, #0
   12608:	bne	12618 <__assert_fail@plt+0x12fc>
   1260c:	ldrsb	r3, [r6, r7]
   12610:	cmp	r3, #0
   12614:	beq	12644 <__assert_fail@plt+0x1328>
   12618:	add	r4, r4, #1
   1261c:	cmp	r4, #12
   12620:	bne	125ec <__assert_fail@plt+0x12d0>
   12624:	mov	r2, #5
   12628:	ldr	r1, [pc, #44]	; 1265c <__assert_fail@plt+0x1340>
   1262c:	mov	r0, #0
   12630:	bl	110c4 <dcgettext@plt>
   12634:	mov	r1, r8
   12638:	bl	111b4 <warnx@plt>
   1263c:	mvn	r0, #0
   12640:	pop	{r4, r5, r6, r7, r8, pc}
   12644:	ldr	r3, [pc, #20]	; 12660 <__assert_fail@plt+0x1344>
   12648:	add	r4, r4, r4, lsl #1
   1264c:	ldr	r0, [r3, r4, lsl #2]
   12650:	pop	{r4, r5, r6, r7, r8, pc}
   12654:	andeq	r4, r1, r0, lsr sl
   12658:	andeq	r4, r1, r8, lsr #25
   1265c:			; <UNDEFINED> instruction: 0x00014cb4
   12660:	andeq	r4, r1, r0, lsr #20
   12664:	push	{r4, r5, r6, r7, r8, lr}
   12668:	mov	r8, r0
   1266c:	ldr	r6, [pc, #100]	; 126d8 <__assert_fail@plt+0x13bc>
   12670:	ldr	r5, [pc, #100]	; 126dc <__assert_fail@plt+0x13c0>
   12674:	mov	r7, r1
   12678:	mov	r4, #0
   1267c:	mov	r2, r7
   12680:	mov	r1, r5
   12684:	mov	r0, r8
   12688:	bl	111d8 <strncasecmp@plt>
   1268c:	cmp	r0, #0
   12690:	bne	126a0 <__assert_fail@plt+0x1384>
   12694:	ldrsb	r3, [r5, r7]
   12698:	cmp	r3, #0
   1269c:	beq	126d0 <__assert_fail@plt+0x13b4>
   126a0:	add	r4, r4, #1
   126a4:	cmp	r4, #5
   126a8:	ldrne	r5, [r6, #24]!
   126ac:	bne	1267c <__assert_fail@plt+0x1360>
   126b0:	mov	r2, r4
   126b4:	ldr	r1, [pc, #36]	; 126e0 <__assert_fail@plt+0x13c4>
   126b8:	mov	r0, #0
   126bc:	bl	110c4 <dcgettext@plt>
   126c0:	mov	r1, r8
   126c4:	bl	111b4 <warnx@plt>
   126c8:	mvn	r0, #0
   126cc:	pop	{r4, r5, r6, r7, r8, pc}
   126d0:	mov	r0, r4
   126d4:	pop	{r4, r5, r6, r7, r8, pc}
   126d8:			; <UNDEFINED> instruction: 0x00014ab0
   126dc:	andeq	r4, r1, r8, asr #25
   126e0:	ldrdeq	r4, [r1], -r0
   126e4:	ldr	r3, [pc, #68]	; 12730 <__assert_fail@plt+0x1414>
   126e8:	push	{r4, lr}
   126ec:	ldr	r2, [r3]
   126f0:	cmp	r2, r0
   126f4:	ble	1271c <__assert_fail@plt+0x1400>
   126f8:	add	r3, r3, r0, lsl #2
   126fc:	ldr	r0, [r3, #4]
   12700:	cmp	r0, #4
   12704:	pople	{r4, pc}
   12708:	ldr	r3, [pc, #36]	; 12734 <__assert_fail@plt+0x1418>
   1270c:	mov	r2, #158	; 0x9e
   12710:	ldr	r1, [pc, #32]	; 12738 <__assert_fail@plt+0x141c>
   12714:	ldr	r0, [pc, #32]	; 1273c <__assert_fail@plt+0x1420>
   12718:	bl	1131c <__assert_fail@plt>
   1271c:	ldr	r3, [pc, #16]	; 12734 <__assert_fail@plt+0x1418>
   12720:	mov	r2, #157	; 0x9d
   12724:	ldr	r1, [pc, #12]	; 12738 <__assert_fail@plt+0x141c>
   12728:	ldr	r0, [pc, #16]	; 12740 <__assert_fail@plt+0x1424>
   1272c:	bl	1131c <__assert_fail@plt>
   12730:	andeq	r6, r2, r0, lsr r0
   12734:	andeq	r4, r1, r8, lsr #22
   12738:	andeq	r4, r1, r4, ror #25
   1273c:	andeq	r4, r1, r8, lsl #26
   12740:	strdeq	r4, [r1], -r8
   12744:	ldr	r3, [pc, #292]	; 12870 <__assert_fail@plt+0x1554>
   12748:	push	{r4, r5, r6, lr}
   1274c:	ldr	r4, [r3]
   12750:	mov	r0, r4
   12754:	bl	11118 <__fpending@plt>
   12758:	mov	r6, r0
   1275c:	mov	r0, r4
   12760:	bl	11088 <ferror@plt>
   12764:	mov	r5, r0
   12768:	mov	r0, r4
   1276c:	bl	11244 <fclose@plt>
   12770:	cmp	r5, #0
   12774:	mov	r4, r0
   12778:	bne	12820 <__assert_fail@plt+0x1504>
   1277c:	cmp	r0, #0
   12780:	beq	1279c <__assert_fail@plt+0x1480>
   12784:	bl	111cc <__errno_location@plt>
   12788:	cmp	r6, #0
   1278c:	ldr	r3, [r0]
   12790:	bne	127f8 <__assert_fail@plt+0x14dc>
   12794:	cmp	r3, #9
   12798:	bne	127f8 <__assert_fail@plt+0x14dc>
   1279c:	ldr	r3, [pc, #208]	; 12874 <__assert_fail@plt+0x1558>
   127a0:	ldr	r4, [r3]
   127a4:	mov	r0, r4
   127a8:	bl	11118 <__fpending@plt>
   127ac:	mov	r6, r0
   127b0:	mov	r0, r4
   127b4:	bl	11088 <ferror@plt>
   127b8:	mov	r5, r0
   127bc:	mov	r0, r4
   127c0:	bl	11244 <fclose@plt>
   127c4:	cmp	r5, #0
   127c8:	mov	r4, r0
   127cc:	bne	12854 <__assert_fail@plt+0x1538>
   127d0:	cmp	r0, #0
   127d4:	popeq	{r4, r5, r6, pc}
   127d8:	cmp	r6, #0
   127dc:	bne	127f0 <__assert_fail@plt+0x14d4>
   127e0:	bl	111cc <__errno_location@plt>
   127e4:	ldr	r3, [r0]
   127e8:	cmp	r3, #9
   127ec:	popeq	{r4, r5, r6, pc}
   127f0:	mov	r0, #1
   127f4:	bl	110a0 <_exit@plt>
   127f8:	cmp	r3, #32
   127fc:	beq	1279c <__assert_fail@plt+0x1480>
   12800:	cmp	r3, #0
   12804:	beq	1283c <__assert_fail@plt+0x1520>
   12808:	mov	r2, #5
   1280c:	ldr	r1, [pc, #100]	; 12878 <__assert_fail@plt+0x155c>
   12810:	mov	r0, #0
   12814:	bl	110c4 <dcgettext@plt>
   12818:	bl	11274 <warn@plt>
   1281c:	b	127f0 <__assert_fail@plt+0x14d4>
   12820:	bl	111cc <__errno_location@plt>
   12824:	cmp	r4, #0
   12828:	ldr	r3, [r0]
   1282c:	bne	127f8 <__assert_fail@plt+0x14dc>
   12830:	cmp	r3, #32
   12834:	strne	r4, [r0]
   12838:	beq	1279c <__assert_fail@plt+0x1480>
   1283c:	mov	r2, #5
   12840:	ldr	r1, [pc, #48]	; 12878 <__assert_fail@plt+0x155c>
   12844:	mov	r0, #0
   12848:	bl	110c4 <dcgettext@plt>
   1284c:	bl	111b4 <warnx@plt>
   12850:	b	127f0 <__assert_fail@plt+0x14d4>
   12854:	cmp	r0, #0
   12858:	bne	127f0 <__assert_fail@plt+0x14d4>
   1285c:	bl	111cc <__errno_location@plt>
   12860:	ldr	r3, [r0]
   12864:	cmp	r3, #32
   12868:	strne	r4, [r0]
   1286c:	b	127f0 <__assert_fail@plt+0x14d4>
   12870:	andeq	r6, r2, r4, lsr #32
   12874:	andeq	r6, r2, r0, lsr #32
   12878:	andeq	r4, r1, r0, lsr sp
   1287c:	andeq	r0, r0, r0
   12880:	cmp	r0, #0
   12884:	mov	r3, #0
   12888:	str	r3, [r1]
   1288c:	bxeq	lr
   12890:	ldrsb	r2, [r0]
   12894:	cmp	r2, #47	; 0x2f
   12898:	bne	128d4 <__assert_fail@plt+0x15b8>
   1289c:	ldrsb	r3, [r0, #1]
   128a0:	cmp	r3, #47	; 0x2f
   128a4:	bne	128dc <__assert_fail@plt+0x15c0>
   128a8:	add	r3, r0, #1
   128ac:	b	128bc <__assert_fail@plt+0x15a0>
   128b0:	ldrsb	r2, [r3]
   128b4:	cmp	r2, #47	; 0x2f
   128b8:	bne	128dc <__assert_fail@plt+0x15c0>
   128bc:	cmp	r3, #0
   128c0:	mov	r0, r3
   128c4:	bxeq	lr
   128c8:	ldrsb	r2, [r3], #1
   128cc:	cmp	r2, #47	; 0x2f
   128d0:	beq	128b0 <__assert_fail@plt+0x1594>
   128d4:	cmp	r2, #0
   128d8:	beq	12918 <__assert_fail@plt+0x15fc>
   128dc:	mov	r3, #1
   128e0:	str	r3, [r1]
   128e4:	ldrsb	r3, [r0, #1]
   128e8:	add	r2, r0, #1
   128ec:	cmp	r3, #47	; 0x2f
   128f0:	cmpne	r3, #0
   128f4:	bxeq	lr
   128f8:	rsb	r3, r0, #1
   128fc:	add	ip, r2, r3
   12900:	str	ip, [r1]
   12904:	ldrsb	ip, [r2, #1]!
   12908:	cmp	ip, #0
   1290c:	cmpne	ip, #47	; 0x2f
   12910:	bne	128fc <__assert_fail@plt+0x15e0>
   12914:	bx	lr
   12918:	mov	r0, r2
   1291c:	bx	lr
   12920:	push	{r4, r5, r6, r7, r8, lr}
   12924:	mov	r7, r1
   12928:	ldrsb	r1, [r0]
   1292c:	cmp	r1, #0
   12930:	movne	r5, r0
   12934:	movne	r4, #0
   12938:	beq	129a4 <__assert_fail@plt+0x1688>
   1293c:	cmp	r1, #92	; 0x5c
   12940:	addne	r6, r5, r4
   12944:	beq	12974 <__assert_fail@plt+0x1658>
   12948:	mov	r0, r7
   1294c:	bl	111a8 <strchr@plt>
   12950:	cmp	r0, #0
   12954:	bne	1299c <__assert_fail@plt+0x1680>
   12958:	ldrsb	r1, [r6, #1]!
   1295c:	add	r4, r4, #1
   12960:	mov	r0, r4
   12964:	cmp	r1, #0
   12968:	popeq	{r4, r5, r6, r7, r8, pc}
   1296c:	cmp	r1, #92	; 0x5c
   12970:	bne	12948 <__assert_fail@plt+0x162c>
   12974:	add	r3, r5, r4
   12978:	ldrsb	r3, [r3, #1]
   1297c:	cmp	r3, #0
   12980:	beq	1299c <__assert_fail@plt+0x1680>
   12984:	add	r4, r4, #2
   12988:	mov	r0, r4
   1298c:	ldrsb	r1, [r5, r4]
   12990:	cmp	r1, #0
   12994:	bne	1293c <__assert_fail@plt+0x1620>
   12998:	pop	{r4, r5, r6, r7, r8, pc}
   1299c:	mov	r0, r4
   129a0:	pop	{r4, r5, r6, r7, r8, pc}
   129a4:	mov	r0, r1
   129a8:	pop	{r4, r5, r6, r7, r8, pc}
   129ac:	ldr	ip, [pc, #244]	; 12aa8 <__assert_fail@plt+0x178c>
   129b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   129b4:	add	ip, pc, ip
   129b8:	ldr	lr, [pc, #236]	; 12aac <__assert_fail@plt+0x1790>
   129bc:	sub	sp, sp, #12
   129c0:	mov	r5, #0
   129c4:	ldr	r7, [ip, lr]
   129c8:	mov	r4, r0
   129cc:	mov	r8, r1
   129d0:	ldr	r3, [r7]
   129d4:	mov	r0, ip
   129d8:	mov	r9, r2
   129dc:	str	r5, [sp]
   129e0:	str	r3, [sp, #4]
   129e4:	bl	111cc <__errno_location@plt>
   129e8:	cmp	r4, r5
   129ec:	str	r5, [r0]
   129f0:	beq	12a00 <__assert_fail@plt+0x16e4>
   129f4:	ldrsb	r3, [r4]
   129f8:	cmp	r3, r5
   129fc:	bne	12a20 <__assert_fail@plt+0x1704>
   12a00:	ldr	r1, [pc, #168]	; 12ab0 <__assert_fail@plt+0x1794>
   12a04:	mov	r3, r4
   12a08:	add	r1, pc, r1
   12a0c:	mov	r2, r8
   12a10:	ldr	r0, [r1]
   12a14:	ldr	r1, [pc, #152]	; 12ab4 <__assert_fail@plt+0x1798>
   12a18:	add	r1, pc, r1
   12a1c:	bl	11268 <errx@plt>
   12a20:	mov	r6, r0
   12a24:	mov	r2, r9
   12a28:	mov	r3, r5
   12a2c:	mov	r1, sp
   12a30:	mov	r0, r4
   12a34:	bl	110b8 <__strtoull_internal@plt>
   12a38:	ldr	r2, [r6]
   12a3c:	cmp	r2, r5
   12a40:	bne	12a7c <__assert_fail@plt+0x1760>
   12a44:	ldr	r3, [sp]
   12a48:	cmp	r3, r4
   12a4c:	beq	12a00 <__assert_fail@plt+0x16e4>
   12a50:	cmp	r3, r5
   12a54:	beq	12a64 <__assert_fail@plt+0x1748>
   12a58:	ldrsb	r3, [r3]
   12a5c:	cmp	r3, r5
   12a60:	bne	12a00 <__assert_fail@plt+0x16e4>
   12a64:	ldr	r2, [sp, #4]
   12a68:	ldr	r3, [r7]
   12a6c:	cmp	r2, r3
   12a70:	bne	12aa4 <__assert_fail@plt+0x1788>
   12a74:	add	sp, sp, #12
   12a78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12a7c:	ldr	r3, [pc, #52]	; 12ab8 <__assert_fail@plt+0x179c>
   12a80:	cmp	r2, #34	; 0x22
   12a84:	add	r3, pc, r3
   12a88:	ldr	r0, [r3]
   12a8c:	bne	12a00 <__assert_fail@plt+0x16e4>
   12a90:	ldr	r1, [pc, #36]	; 12abc <__assert_fail@plt+0x17a0>
   12a94:	mov	r3, r4
   12a98:	mov	r2, r8
   12a9c:	add	r1, pc, r1
   12aa0:	bl	110f4 <err@plt>
   12aa4:	bl	110dc <__stack_chk_fail@plt>
   12aa8:	andeq	r3, r1, r8, lsr #10
   12aac:	andeq	r0, r0, r4, lsl r1
   12ab0:	strdeq	r3, [r1], -r8
   12ab4:	andeq	r2, r0, ip, ror ip
   12ab8:	andeq	r3, r1, ip, ror r5
   12abc:	strdeq	r2, [r0], -r8
   12ac0:	push	{r4, lr}
   12ac4:	mov	r5, r0
   12ac8:	mov	r4, r1
   12acc:	bl	111cc <__errno_location@plt>
   12ad0:	ldr	ip, [pc, #32]	; 12af8 <__assert_fail@plt+0x17dc>
   12ad4:	ldr	r1, [pc, #32]	; 12afc <__assert_fail@plt+0x17e0>
   12ad8:	add	ip, pc, ip
   12adc:	mov	lr, #34	; 0x22
   12ae0:	mov	r3, r5
   12ae4:	mov	r2, r4
   12ae8:	add	r1, pc, r1
   12aec:	str	lr, [r0]
   12af0:	ldr	r0, [ip]
   12af4:	bl	110f4 <err@plt>
   12af8:	andeq	r3, r1, r8, lsr #10
   12afc:	andeq	r2, r0, ip, lsr #23
   12b00:	push	{r4, r5, r6, lr}
   12b04:	mov	r4, r0
   12b08:	mov	r5, r1
   12b0c:	bl	129ac <__assert_fail@plt+0x1690>
   12b10:	mov	r3, #0
   12b14:	mvn	r2, #0
   12b18:	cmp	r1, r3
   12b1c:	cmpeq	r0, r2
   12b20:	popls	{r4, r5, r6, pc}
   12b24:	mov	r1, r5
   12b28:	mov	r0, r4
   12b2c:	bl	12ac0 <__assert_fail@plt+0x17a4>
   12b30:	ldr	r3, [pc, #8]	; 12b40 <__assert_fail@plt+0x1824>
   12b34:	add	r3, pc, r3
   12b38:	str	r0, [r3]
   12b3c:	bx	lr
   12b40:	andeq	r3, r1, ip, asr #9
   12b44:	ldr	r3, [pc, #1648]	; 131bc <__assert_fail@plt+0x1ea0>
   12b48:	ldr	ip, [pc, #1648]	; 131c0 <__assert_fail@plt+0x1ea4>
   12b4c:	add	r3, pc, r3
   12b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b54:	mov	r5, r1
   12b58:	ldr	r1, [r3, ip]
   12b5c:	sub	sp, sp, #52	; 0x34
   12b60:	mov	ip, r1
   12b64:	mov	r8, r0
   12b68:	str	r1, [sp, #24]
   12b6c:	mov	r0, #0
   12b70:	mov	r1, #0
   12b74:	ldr	r3, [ip]
   12b78:	strd	r0, [r5]
   12b7c:	mov	r9, r2
   12b80:	str	r3, [sp, #44]	; 0x2c
   12b84:	bl	111cc <__errno_location@plt>
   12b88:	cmp	r8, #0
   12b8c:	mov	r4, r0
   12b90:	beq	12d70 <__assert_fail@plt+0x1a54>
   12b94:	ldrsb	fp, [r8]
   12b98:	cmp	fp, #0
   12b9c:	beq	12d70 <__assert_fail@plt+0x1a54>
   12ba0:	bl	11178 <__ctype_b_loc@plt>
   12ba4:	mov	r2, r8
   12ba8:	ldr	r1, [r0]
   12bac:	b	12bb4 <__assert_fail@plt+0x1898>
   12bb0:	ldrsb	fp, [r2, #1]!
   12bb4:	uxtb	r3, fp
   12bb8:	lsl	r3, r3, #1
   12bbc:	ldrh	ip, [r1, r3]
   12bc0:	ands	ip, ip, #8192	; 0x2000
   12bc4:	bne	12bb0 <__assert_fail@plt+0x1894>
   12bc8:	cmp	fp, #45	; 0x2d
   12bcc:	beq	12d70 <__assert_fail@plt+0x1a54>
   12bd0:	add	fp, sp, #40	; 0x28
   12bd4:	mov	r3, ip
   12bd8:	mov	r2, ip
   12bdc:	str	ip, [r4]
   12be0:	mov	r1, fp
   12be4:	mov	r0, r8
   12be8:	str	ip, [sp, #40]	; 0x28
   12bec:	bl	110b8 <__strtoull_internal@plt>
   12bf0:	ldr	sl, [sp, #40]	; 0x28
   12bf4:	cmp	sl, r8
   12bf8:	mov	r2, r0
   12bfc:	mov	r3, r1
   12c00:	ldr	r0, [r4]
   12c04:	strd	r2, [sp, #16]
   12c08:	beq	12ef0 <__assert_fail@plt+0x1bd4>
   12c0c:	cmp	r0, #0
   12c10:	bne	12d98 <__assert_fail@plt+0x1a7c>
   12c14:	cmp	sl, #0
   12c18:	beq	12f24 <__assert_fail@plt+0x1c08>
   12c1c:	ldrsb	r0, [sl]
   12c20:	cmp	r0, #0
   12c24:	beq	12f18 <__assert_fail@plt+0x1bfc>
   12c28:	mov	r8, #0
   12c2c:	mov	r2, #0
   12c30:	mov	r3, #0
   12c34:	str	r9, [sp, #32]
   12c38:	mov	r6, fp
   12c3c:	mov	r9, sl
   12c40:	mov	r7, r8
   12c44:	mov	sl, r2
   12c48:	mov	fp, r3
   12c4c:	str	r5, [sp, #28]
   12c50:	ldrsb	r2, [r9, #1]
   12c54:	cmp	r2, #105	; 0x69
   12c58:	beq	12ddc <__assert_fail@plt+0x1ac0>
   12c5c:	bic	r1, r2, #32
   12c60:	cmp	r1, #66	; 0x42
   12c64:	bne	12efc <__assert_fail@plt+0x1be0>
   12c68:	ldrsb	r2, [r9, #2]
   12c6c:	cmp	r2, #0
   12c70:	beq	130e0 <__assert_fail@plt+0x1dc4>
   12c74:	bl	11298 <localeconv@plt>
   12c78:	cmp	r0, #0
   12c7c:	beq	12d70 <__assert_fail@plt+0x1a54>
   12c80:	ldr	r2, [r0]
   12c84:	cmp	r2, #0
   12c88:	beq	12d70 <__assert_fail@plt+0x1a54>
   12c8c:	mov	r0, r2
   12c90:	str	r2, [sp]
   12c94:	bl	1119c <strlen@plt>
   12c98:	orrs	r3, sl, fp
   12c9c:	mov	r5, r0
   12ca0:	bne	12d70 <__assert_fail@plt+0x1a54>
   12ca4:	ldrsb	r1, [r9]
   12ca8:	cmp	r1, #0
   12cac:	beq	12d70 <__assert_fail@plt+0x1a54>
   12cb0:	ldr	r2, [sp]
   12cb4:	mov	r1, r9
   12cb8:	mov	r0, r2
   12cbc:	mov	r2, r5
   12cc0:	bl	112c8 <strncmp@plt>
   12cc4:	cmp	r0, #0
   12cc8:	bne	12d70 <__assert_fail@plt+0x1a54>
   12ccc:	ldrsb	r2, [r9, r5]
   12cd0:	add	r5, r9, r5
   12cd4:	cmp	r2, #48	; 0x30
   12cd8:	bne	12cf8 <__assert_fail@plt+0x19dc>
   12cdc:	add	r8, r8, #1
   12ce0:	sub	r1, r8, r5
   12ce4:	mov	r3, r5
   12ce8:	add	r8, r3, r1
   12cec:	ldrsb	r2, [r3, #1]!
   12cf0:	cmp	r2, #48	; 0x30
   12cf4:	beq	12ce8 <__assert_fail@plt+0x19cc>
   12cf8:	mov	r3, #0
   12cfc:	str	r7, [r4]
   12d00:	mov	r2, r3
   12d04:	mov	r1, r6
   12d08:	mov	r0, r5
   12d0c:	str	r7, [sp, #40]	; 0x28
   12d10:	bl	110b8 <__strtoull_internal@plt>
   12d14:	ldr	r9, [sp, #40]	; 0x28
   12d18:	cmp	r9, r5
   12d1c:	mov	sl, r0
   12d20:	mov	fp, r1
   12d24:	beq	12eec <__assert_fail@plt+0x1bd0>
   12d28:	ldr	ip, [r4]
   12d2c:	cmp	ip, #0
   12d30:	beq	12dc8 <__assert_fail@plt+0x1aac>
   12d34:	subs	r3, r0, #1
   12d38:	str	r3, [sp, #8]
   12d3c:	sbc	r3, r1, #0
   12d40:	str	r3, [sp, #12]
   12d44:	ldrd	r2, [sp, #8]
   12d48:	mvn	r1, #0
   12d4c:	mvn	r0, #2
   12d50:	cmp	r3, r1
   12d54:	cmpeq	r2, r0
   12d58:	bhi	1311c <__assert_fail@plt+0x1e00>
   12d5c:	cmp	r9, #0
   12d60:	beq	12d70 <__assert_fail@plt+0x1a54>
   12d64:	ldrsb	r2, [r9]
   12d68:	cmp	r2, #0
   12d6c:	bne	12c50 <__assert_fail@plt+0x1934>
   12d70:	mov	r3, #22
   12d74:	mvn	r0, #21
   12d78:	str	r3, [r4]
   12d7c:	ldr	r3, [sp, #24]
   12d80:	ldr	r2, [sp, #44]	; 0x2c
   12d84:	ldr	r3, [r3]
   12d88:	cmp	r2, r3
   12d8c:	bne	131b8 <__assert_fail@plt+0x1e9c>
   12d90:	add	sp, sp, #52	; 0x34
   12d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d98:	subs	r6, r2, #1
   12d9c:	sbc	r7, r3, #0
   12da0:	mvn	r3, #0
   12da4:	mvn	r2, #2
   12da8:	cmp	r7, r3
   12dac:	cmpeq	r6, r2
   12db0:	bls	12c14 <__assert_fail@plt+0x18f8>
   12db4:	rsb	r0, r0, #0
   12db8:	cmp	r0, #0
   12dbc:	bge	12d7c <__assert_fail@plt+0x1a60>
   12dc0:	rsb	r3, r0, #0
   12dc4:	b	12d78 <__assert_fail@plt+0x1a5c>
   12dc8:	orrs	r3, sl, fp
   12dcc:	bne	12d5c <__assert_fail@plt+0x1a40>
   12dd0:	ldrsb	r2, [r9, #1]
   12dd4:	cmp	r2, #105	; 0x69
   12dd8:	bne	12c5c <__assert_fail@plt+0x1940>
   12ddc:	ldrsb	r2, [r9, #2]
   12de0:	bic	r2, r2, #32
   12de4:	cmp	r2, #66	; 0x42
   12de8:	bne	12c74 <__assert_fail@plt+0x1958>
   12dec:	ldrsb	r2, [r9, #3]
   12df0:	cmp	r2, #0
   12df4:	bne	12c74 <__assert_fail@plt+0x1958>
   12df8:	strd	sl, [sp]
   12dfc:	mov	sl, r9
   12e00:	ldr	r9, [sp, #32]
   12e04:	mov	r3, #1024	; 0x400
   12e08:	ldr	r5, [sp, #28]
   12e0c:	str	r3, [sp, #28]
   12e10:	ldrsb	r7, [sl]
   12e14:	ldr	r6, [pc, #936]	; 131c4 <__assert_fail@plt+0x1ea8>
   12e18:	add	r6, pc, r6
   12e1c:	mov	r1, r7
   12e20:	mov	r0, r6
   12e24:	bl	111a8 <strchr@plt>
   12e28:	cmp	r0, #0
   12e2c:	beq	130fc <__assert_fail@plt+0x1de0>
   12e30:	sub	ip, r0, r6
   12e34:	add	fp, ip, #1
   12e38:	cmp	fp, #0
   12e3c:	beq	12f08 <__assert_fail@plt+0x1bec>
   12e40:	ldr	r3, [sp, #20]
   12e44:	ldr	r6, [sp, #28]
   12e48:	cmp	r3, #0
   12e4c:	mov	r0, #0
   12e50:	asr	r7, r6, #31
   12e54:	mov	r1, #0
   12e58:	bne	13158 <__assert_fail@plt+0x1e3c>
   12e5c:	orrs	r3, r0, r1
   12e60:	bne	12f4c <__assert_fail@plt+0x1c30>
   12e64:	str	fp, [sp, #32]
   12e68:	sub	ip, ip, #1
   12e6c:	str	r8, [sp, #36]	; 0x24
   12e70:	mov	fp, r4
   12e74:	ldrd	r0, [sp, #16]
   12e78:	mov	lr, r5
   12e7c:	mov	sl, r9
   12e80:	b	12e90 <__assert_fail@plt+0x1b74>
   12e84:	orrs	r3, r4, r5
   12e88:	sub	ip, ip, #1
   12e8c:	bne	12f34 <__assert_fail@plt+0x1c18>
   12e90:	mul	r2, r0, r7
   12e94:	cmn	ip, #1
   12e98:	mla	r2, r6, r1, r2
   12e9c:	umull	r0, r1, r0, r6
   12ea0:	add	r2, r2, r1
   12ea4:	mov	r1, r2
   12ea8:	beq	130c0 <__assert_fail@plt+0x1da4>
   12eac:	cmp	r2, #0
   12eb0:	mov	r4, #0
   12eb4:	mov	r5, #0
   12eb8:	beq	12e84 <__assert_fail@plt+0x1b68>
   12ebc:	umull	r2, r3, r6, r2
   12ec0:	umull	r8, r9, r0, r6
   12ec4:	strd	r2, [sp, #8]
   12ec8:	mov	r8, r9
   12ecc:	ldr	r3, [sp, #12]
   12ed0:	adds	r8, r2, r8
   12ed4:	mov	r2, #0
   12ed8:	adc	r3, r3, r2
   12edc:	cmp	r3, r2
   12ee0:	movne	r4, #1
   12ee4:	movne	r5, #0
   12ee8:	b	12e84 <__assert_fail@plt+0x1b68>
   12eec:	ldr	r0, [r4]
   12ef0:	cmp	r0, #0
   12ef4:	beq	12d70 <__assert_fail@plt+0x1a54>
   12ef8:	b	12db4 <__assert_fail@plt+0x1a98>
   12efc:	cmp	r2, #0
   12f00:	bne	12c74 <__assert_fail@plt+0x1958>
   12f04:	b	12df8 <__assert_fail@plt+0x1adc>
   12f08:	cmp	r9, #0
   12f0c:	movne	r0, fp
   12f10:	bne	12f58 <__assert_fail@plt+0x1c3c>
   12f14:	mov	r0, r9
   12f18:	ldrd	r2, [sp, #16]
   12f1c:	strd	r2, [r5]
   12f20:	b	12d7c <__assert_fail@plt+0x1a60>
   12f24:	ldrd	r2, [sp, #16]
   12f28:	mov	r0, sl
   12f2c:	strd	r2, [r5]
   12f30:	b	12d7c <__assert_fail@plt+0x1a60>
   12f34:	mov	r4, fp
   12f38:	ldr	r8, [sp, #36]	; 0x24
   12f3c:	ldr	fp, [sp, #32]
   12f40:	mov	r5, lr
   12f44:	mov	r9, sl
   12f48:	strd	r0, [sp, #16]
   12f4c:	mvn	r0, #33	; 0x21
   12f50:	cmp	r9, #0
   12f54:	beq	12f5c <__assert_fail@plt+0x1c40>
   12f58:	str	fp, [r9]
   12f5c:	ldrd	r2, [sp]
   12f60:	mov	r1, r2
   12f64:	orrs	r3, r1, r3
   12f68:	movne	r3, #1
   12f6c:	moveq	r3, #0
   12f70:	cmp	fp, #0
   12f74:	moveq	r3, #0
   12f78:	cmp	r3, #0
   12f7c:	beq	130b4 <__assert_fail@plt+0x1d98>
   12f80:	ldr	r3, [pc, #576]	; 131c8 <__assert_fail@plt+0x1eac>
   12f84:	ldr	r1, [pc, #576]	; 131cc <__assert_fail@plt+0x1eb0>
   12f88:	umull	ip, r3, r3, r8
   12f8c:	smull	ip, r1, r1, r8
   12f90:	lsr	r3, r3, #1
   12f94:	rsb	r1, r1, r8, asr #31
   12f98:	add	r3, r3, r3, lsl #1
   12f9c:	add	r1, r1, fp
   12fa0:	subs	r3, r8, r3
   12fa4:	sub	r6, r1, #1
   12fa8:	bne	13124 <__assert_fail@plt+0x1e08>
   12fac:	ldrd	r8, [sp]
   12fb0:	adds	r3, r8, r8
   12fb4:	adc	r2, r9, r9
   12fb8:	adds	r3, r3, r8
   12fbc:	adc	r2, r2, r9
   12fc0:	lsl	ip, r3, #5
   12fc4:	lsl	lr, r2, #5
   12fc8:	orr	lr, lr, r3, lsr #27
   12fcc:	adds	r3, r3, ip
   12fd0:	adc	r2, r2, lr
   12fd4:	adds	r3, r8, r3
   12fd8:	str	r3, [sp]
   12fdc:	ldr	r3, [sp, #4]
   12fe0:	adc	r3, r3, r2
   12fe4:	str	r3, [sp, #4]
   12fe8:	cmp	r6, #0
   12fec:	blt	12d70 <__assert_fail@plt+0x1a54>
   12ff0:	beq	13098 <__assert_fail@plt+0x1d7c>
   12ff4:	ldr	r3, [sp, #4]
   12ff8:	ldr	r8, [sp, #28]
   12ffc:	cmp	r3, #0
   13000:	mov	r6, #0
   13004:	asr	r9, r8, #31
   13008:	mov	r7, #0
   1300c:	bne	1318c <__assert_fail@plt+0x1e70>
   13010:	orrs	r3, r6, r7
   13014:	bne	13098 <__assert_fail@plt+0x1d7c>
   13018:	sub	r1, r1, #3
   1301c:	ldrd	r2, [sp]
   13020:	mov	lr, r4
   13024:	str	r5, [sp, #8]
   13028:	b	13038 <__assert_fail@plt+0x1d1c>
   1302c:	orrs	ip, r6, r7
   13030:	sub	r1, r1, #1
   13034:	bne	1308c <__assert_fail@plt+0x1d70>
   13038:	mul	ip, r2, r9
   1303c:	cmn	r1, #1
   13040:	mla	ip, r8, r3, ip
   13044:	umull	r2, r3, r2, r8
   13048:	add	ip, ip, r3
   1304c:	mov	r3, ip
   13050:	beq	1308c <__assert_fail@plt+0x1d70>
   13054:	cmp	ip, #0
   13058:	mov	r6, #0
   1305c:	mov	r7, #0
   13060:	beq	1302c <__assert_fail@plt+0x1d10>
   13064:	umull	sl, fp, r2, r8
   13068:	umull	r4, r5, r8, ip
   1306c:	mov	ip, fp
   13070:	adds	ip, r4, ip
   13074:	mov	ip, #0
   13078:	adc	ip, r5, ip
   1307c:	cmp	ip, #0
   13080:	movne	r6, #1
   13084:	movne	r7, #0
   13088:	b	1302c <__assert_fail@plt+0x1d10>
   1308c:	ldr	r5, [sp, #8]
   13090:	mov	r4, lr
   13094:	strd	r2, [sp]
   13098:	ldrd	r2, [sp]
   1309c:	ldr	r1, [sp, #16]
   130a0:	adds	r1, r1, r2
   130a4:	str	r1, [sp, #16]
   130a8:	ldr	r1, [sp, #20]
   130ac:	adc	r3, r1, r3
   130b0:	str	r3, [sp, #20]
   130b4:	ldrd	r2, [sp, #16]
   130b8:	strd	r2, [r5]
   130bc:	b	12db8 <__assert_fail@plt+0x1a9c>
   130c0:	mov	r4, fp
   130c4:	strd	r0, [sp, #16]
   130c8:	ldr	r8, [sp, #36]	; 0x24
   130cc:	ldr	fp, [sp, #32]
   130d0:	mov	r5, lr
   130d4:	mov	r9, sl
   130d8:	mov	r0, #0
   130dc:	b	12f50 <__assert_fail@plt+0x1c34>
   130e0:	mov	r3, #1000	; 0x3e8
   130e4:	strd	sl, [sp]
   130e8:	ldr	r5, [sp, #28]
   130ec:	mov	sl, r9
   130f0:	str	r3, [sp, #28]
   130f4:	ldr	r9, [sp, #32]
   130f8:	b	12e10 <__assert_fail@plt+0x1af4>
   130fc:	ldr	r6, [pc, #204]	; 131d0 <__assert_fail@plt+0x1eb4>
   13100:	mov	r1, r7
   13104:	add	r6, pc, r6
   13108:	mov	r0, r6
   1310c:	bl	111a8 <strchr@plt>
   13110:	cmp	r0, #0
   13114:	bne	12e30 <__assert_fail@plt+0x1b14>
   13118:	b	12d70 <__assert_fail@plt+0x1a54>
   1311c:	mov	r0, ip
   13120:	b	12db4 <__assert_fail@plt+0x1a98>
   13124:	cmp	r3, #1
   13128:	bne	12fe8 <__assert_fail@plt+0x1ccc>
   1312c:	ldrd	r8, [sp]
   13130:	lsl	r2, r9, #2
   13134:	lsl	r3, r8, #2
   13138:	adds	r3, r3, r8
   1313c:	orr	r2, r2, r8, lsr #30
   13140:	adc	r2, r2, r9
   13144:	adds	r3, r3, r3
   13148:	str	r3, [sp]
   1314c:	adc	r3, r2, r2
   13150:	str	r3, [sp, #4]
   13154:	b	12fe8 <__assert_fail@plt+0x1ccc>
   13158:	ldr	lr, [sp, #28]
   1315c:	ldr	r3, [sp, #16]
   13160:	ldr	sl, [sp, #20]
   13164:	umull	r2, r3, r3, lr
   13168:	str	r3, [sp, #8]
   1316c:	mov	r3, #0
   13170:	str	r3, [sp, #12]
   13174:	ldrd	r2, [sp, #8]
   13178:	umlal	r2, r3, sl, lr
   1317c:	cmp	r3, #0
   13180:	movne	r0, #1
   13184:	movne	r1, #0
   13188:	b	12e5c <__assert_fail@plt+0x1b40>
   1318c:	ldr	r3, [sp]
   13190:	ldr	ip, [sp, #28]
   13194:	ldr	lr, [sp, #4]
   13198:	umull	sl, fp, r3, ip
   1319c:	mov	r3, #0
   131a0:	mov	r2, fp
   131a4:	umlal	r2, r3, lr, ip
   131a8:	cmp	r3, #0
   131ac:	movne	r6, #1
   131b0:	movne	r7, #0
   131b4:	b	13010 <__assert_fail@plt+0x1cf4>
   131b8:	bl	110dc <__stack_chk_fail@plt>
   131bc:	muleq	r1, r0, r3
   131c0:	andeq	r0, r0, r4, lsl r1
   131c4:	andeq	r2, r0, r8, lsl #17
   131c8:	bge	feabdc7c <optarg@@GLIBC_2.4+0xfea97c54>
   131cc:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   131d0:	andeq	r2, r0, r8, lsr #11
   131d4:	mov	r2, #0
   131d8:	b	12b44 <__assert_fail@plt+0x1828>
   131dc:	push	{r4, r5, r6, lr}
   131e0:	subs	r5, r0, #0
   131e4:	mov	r6, r1
   131e8:	beq	13254 <__assert_fail@plt+0x1f38>
   131ec:	ldrsb	r4, [r5]
   131f0:	cmp	r4, #0
   131f4:	beq	13268 <__assert_fail@plt+0x1f4c>
   131f8:	bl	11178 <__ctype_b_loc@plt>
   131fc:	mov	r3, r5
   13200:	ldr	r0, [r0]
   13204:	b	1321c <__assert_fail@plt+0x1f00>
   13208:	adds	r3, r3, #1
   1320c:	beq	13254 <__assert_fail@plt+0x1f38>
   13210:	ldrsb	r4, [r3]
   13214:	cmp	r4, #0
   13218:	beq	13230 <__assert_fail@plt+0x1f14>
   1321c:	uxtb	r4, r4
   13220:	lsl	r4, r4, #1
   13224:	ldrh	r2, [r0, r4]
   13228:	tst	r2, #2048	; 0x800
   1322c:	bne	13208 <__assert_fail@plt+0x1eec>
   13230:	cmp	r6, #0
   13234:	strne	r3, [r6]
   13238:	cmp	r5, r3
   1323c:	bcs	13260 <__assert_fail@plt+0x1f44>
   13240:	ldrsb	r3, [r3]
   13244:	cmp	r3, #0
   13248:	bne	13260 <__assert_fail@plt+0x1f44>
   1324c:	mov	r0, #1
   13250:	pop	{r4, r5, r6, pc}
   13254:	cmp	r6, #0
   13258:	movne	r3, #0
   1325c:	strne	r3, [r6]
   13260:	mov	r0, #0
   13264:	pop	{r4, r5, r6, pc}
   13268:	cmp	r1, #0
   1326c:	strne	r5, [r1]
   13270:	b	13260 <__assert_fail@plt+0x1f44>
   13274:	push	{r4, r5, r6, lr}
   13278:	subs	r5, r0, #0
   1327c:	mov	r6, r1
   13280:	beq	132ec <__assert_fail@plt+0x1fd0>
   13284:	ldrsb	r4, [r5]
   13288:	cmp	r4, #0
   1328c:	beq	13300 <__assert_fail@plt+0x1fe4>
   13290:	bl	11178 <__ctype_b_loc@plt>
   13294:	mov	r3, r5
   13298:	ldr	r0, [r0]
   1329c:	b	132b4 <__assert_fail@plt+0x1f98>
   132a0:	adds	r3, r3, #1
   132a4:	beq	132ec <__assert_fail@plt+0x1fd0>
   132a8:	ldrsb	r4, [r3]
   132ac:	cmp	r4, #0
   132b0:	beq	132c8 <__assert_fail@plt+0x1fac>
   132b4:	uxtb	r4, r4
   132b8:	lsl	r4, r4, #1
   132bc:	ldrh	r2, [r0, r4]
   132c0:	tst	r2, #4096	; 0x1000
   132c4:	bne	132a0 <__assert_fail@plt+0x1f84>
   132c8:	cmp	r6, #0
   132cc:	strne	r3, [r6]
   132d0:	cmp	r5, r3
   132d4:	bcs	132f8 <__assert_fail@plt+0x1fdc>
   132d8:	ldrsb	r3, [r3]
   132dc:	cmp	r3, #0
   132e0:	bne	132f8 <__assert_fail@plt+0x1fdc>
   132e4:	mov	r0, #1
   132e8:	pop	{r4, r5, r6, pc}
   132ec:	cmp	r6, #0
   132f0:	movne	r3, #0
   132f4:	strne	r3, [r6]
   132f8:	mov	r0, #0
   132fc:	pop	{r4, r5, r6, pc}
   13300:	cmp	r1, #0
   13304:	strne	r5, [r1]
   13308:	b	132f8 <__assert_fail@plt+0x1fdc>
   1330c:	push	{r1, r2, r3}
   13310:	ldr	r3, [pc, #188]	; 133d4 <__assert_fail@plt+0x20b8>
   13314:	ldr	r2, [pc, #188]	; 133d8 <__assert_fail@plt+0x20bc>
   13318:	add	r3, pc, r3
   1331c:	push	{r4, r5, r6, r7, r8, lr}
   13320:	sub	sp, sp, #12
   13324:	ldr	r7, [r3, r2]
   13328:	ldr	r8, [sp, #36]	; 0x24
   1332c:	mov	r6, r0
   13330:	ldr	r3, [r7]
   13334:	add	r4, sp, #48	; 0x30
   13338:	str	r3, [sp, #4]
   1333c:	b	13358 <__assert_fail@plt+0x203c>
   13340:	mov	r1, r5
   13344:	mov	r0, r6
   13348:	bl	11028 <strcmp@plt>
   1334c:	add	r4, r4, #8
   13350:	cmp	r0, #0
   13354:	beq	13390 <__assert_fail@plt+0x2074>
   13358:	ldr	r1, [r4, #-8]
   1335c:	sub	r3, r4, #4
   13360:	cmp	r1, #0
   13364:	str	r3, [sp]
   13368:	beq	133b0 <__assert_fail@plt+0x2094>
   1336c:	ldr	r5, [r4, #-4]
   13370:	str	r4, [sp]
   13374:	cmp	r5, #0
   13378:	beq	133b0 <__assert_fail@plt+0x2094>
   1337c:	mov	r0, r6
   13380:	bl	11028 <strcmp@plt>
   13384:	cmp	r0, #0
   13388:	bne	13340 <__assert_fail@plt+0x2024>
   1338c:	mov	r0, #1
   13390:	ldr	r2, [sp, #4]
   13394:	ldr	r3, [r7]
   13398:	cmp	r2, r3
   1339c:	bne	133d0 <__assert_fail@plt+0x20b4>
   133a0:	add	sp, sp, #12
   133a4:	pop	{r4, r5, r6, r7, r8, lr}
   133a8:	add	sp, sp, #12
   133ac:	bx	lr
   133b0:	ldr	r1, [pc, #36]	; 133dc <__assert_fail@plt+0x20c0>
   133b4:	mov	r3, r6
   133b8:	add	r1, pc, r1
   133bc:	mov	r2, r8
   133c0:	ldr	r0, [r1]
   133c4:	ldr	r1, [pc, #20]	; 133e0 <__assert_fail@plt+0x20c4>
   133c8:	add	r1, pc, r1
   133cc:	bl	11268 <errx@plt>
   133d0:	bl	110dc <__stack_chk_fail@plt>
   133d4:	andeq	r2, r1, r4, asr #23
   133d8:	andeq	r0, r0, r4, lsl r1
   133dc:	andeq	r2, r1, r8, asr #24
   133e0:	andeq	r2, r0, ip, asr #5
   133e4:	cmp	r1, #0
   133e8:	beq	13434 <__assert_fail@plt+0x2118>
   133ec:	ldrsb	r3, [r0]
   133f0:	cmp	r3, #0
   133f4:	beq	13434 <__assert_fail@plt+0x2118>
   133f8:	sxtb	r2, r2
   133fc:	cmp	r3, r2
   13400:	bxeq	lr
   13404:	add	r1, r0, r1
   13408:	add	r3, r0, #1
   1340c:	b	13428 <__assert_fail@plt+0x210c>
   13410:	ldrsb	ip, [r3]
   13414:	add	r3, r3, #1
   13418:	cmp	ip, #0
   1341c:	beq	13434 <__assert_fail@plt+0x2118>
   13420:	cmp	ip, r2
   13424:	bxeq	lr
   13428:	cmp	r3, r1
   1342c:	mov	r0, r3
   13430:	bne	13410 <__assert_fail@plt+0x20f4>
   13434:	mov	r0, #0
   13438:	bx	lr
   1343c:	push	{r4, r5, r6, lr}
   13440:	mov	r2, #10
   13444:	mov	r4, r0
   13448:	mov	r5, r1
   1344c:	bl	12b00 <__assert_fail@plt+0x17e4>
   13450:	cmp	r0, #65536	; 0x10000
   13454:	bcs	13460 <__assert_fail@plt+0x2144>
   13458:	uxth	r0, r0
   1345c:	pop	{r4, r5, r6, pc}
   13460:	mov	r1, r5
   13464:	mov	r0, r4
   13468:	bl	12ac0 <__assert_fail@plt+0x17a4>
   1346c:	push	{r4, r5, r6, lr}
   13470:	mov	r2, #16
   13474:	mov	r4, r0
   13478:	mov	r5, r1
   1347c:	bl	12b00 <__assert_fail@plt+0x17e4>
   13480:	cmp	r0, #65536	; 0x10000
   13484:	bcs	13490 <__assert_fail@plt+0x2174>
   13488:	uxth	r0, r0
   1348c:	pop	{r4, r5, r6, pc}
   13490:	mov	r1, r5
   13494:	mov	r0, r4
   13498:	bl	12ac0 <__assert_fail@plt+0x17a4>
   1349c:	mov	r2, #10
   134a0:	b	12b00 <__assert_fail@plt+0x17e4>
   134a4:	mov	r2, #16
   134a8:	b	12b00 <__assert_fail@plt+0x17e4>
   134ac:	ldr	r2, [pc, #236]	; 135a0 <__assert_fail@plt+0x2284>
   134b0:	ldr	ip, [pc, #236]	; 135a4 <__assert_fail@plt+0x2288>
   134b4:	add	r2, pc, r2
   134b8:	push	{r4, r5, r6, r7, r8, lr}
   134bc:	sub	sp, sp, #8
   134c0:	ldr	r7, [r2, ip]
   134c4:	mov	r5, #0
   134c8:	mov	r4, r0
   134cc:	ldr	r3, [r7]
   134d0:	mov	r8, r1
   134d4:	str	r5, [sp]
   134d8:	str	r3, [sp, #4]
   134dc:	bl	111cc <__errno_location@plt>
   134e0:	cmp	r4, r5
   134e4:	str	r5, [r0]
   134e8:	beq	134f8 <__assert_fail@plt+0x21dc>
   134ec:	ldrsb	r3, [r4]
   134f0:	cmp	r3, r5
   134f4:	bne	13518 <__assert_fail@plt+0x21fc>
   134f8:	ldr	r1, [pc, #168]	; 135a8 <__assert_fail@plt+0x228c>
   134fc:	mov	r3, r4
   13500:	add	r1, pc, r1
   13504:	mov	r2, r8
   13508:	ldr	r0, [r1]
   1350c:	ldr	r1, [pc, #152]	; 135ac <__assert_fail@plt+0x2290>
   13510:	add	r1, pc, r1
   13514:	bl	11268 <errx@plt>
   13518:	mov	r6, r0
   1351c:	mov	r2, #10
   13520:	mov	r3, r5
   13524:	mov	r1, sp
   13528:	mov	r0, r4
   1352c:	bl	112a4 <__strtoll_internal@plt>
   13530:	ldr	r2, [r6]
   13534:	cmp	r2, r5
   13538:	bne	13574 <__assert_fail@plt+0x2258>
   1353c:	ldr	r3, [sp]
   13540:	cmp	r3, r4
   13544:	beq	134f8 <__assert_fail@plt+0x21dc>
   13548:	cmp	r3, r5
   1354c:	beq	1355c <__assert_fail@plt+0x2240>
   13550:	ldrsb	r3, [r3]
   13554:	cmp	r3, r5
   13558:	bne	134f8 <__assert_fail@plt+0x21dc>
   1355c:	ldr	r2, [sp, #4]
   13560:	ldr	r3, [r7]
   13564:	cmp	r2, r3
   13568:	bne	1359c <__assert_fail@plt+0x2280>
   1356c:	add	sp, sp, #8
   13570:	pop	{r4, r5, r6, r7, r8, pc}
   13574:	ldr	r3, [pc, #52]	; 135b0 <__assert_fail@plt+0x2294>
   13578:	cmp	r2, #34	; 0x22
   1357c:	add	r3, pc, r3
   13580:	ldr	r0, [r3]
   13584:	bne	134f8 <__assert_fail@plt+0x21dc>
   13588:	ldr	r1, [pc, #36]	; 135b4 <__assert_fail@plt+0x2298>
   1358c:	mov	r3, r4
   13590:	mov	r2, r8
   13594:	add	r1, pc, r1
   13598:	bl	110f4 <err@plt>
   1359c:	bl	110dc <__stack_chk_fail@plt>
   135a0:	andeq	r2, r1, r8, lsr #20
   135a4:	andeq	r0, r0, r4, lsl r1
   135a8:	andeq	r2, r1, r0, lsl #22
   135ac:	andeq	r2, r0, r4, lsl #3
   135b0:	andeq	r2, r1, r4, lsl #21
   135b4:	andeq	r2, r0, r0, lsl #2
   135b8:	push	{r4, r5, r6, r7, r8, lr}
   135bc:	mov	r7, r0
   135c0:	mov	r6, r1
   135c4:	bl	134ac <__assert_fail@plt+0x2190>
   135c8:	mov	r3, #0
   135cc:	mvn	r2, #0
   135d0:	adds	r4, r0, #-2147483648	; 0x80000000
   135d4:	adc	r5, r1, #0
   135d8:	cmp	r5, r3
   135dc:	cmpeq	r4, r2
   135e0:	popls	{r4, r5, r6, r7, r8, pc}
   135e4:	bl	111cc <__errno_location@plt>
   135e8:	ldr	ip, [pc, #32]	; 13610 <__assert_fail@plt+0x22f4>
   135ec:	ldr	r1, [pc, #32]	; 13614 <__assert_fail@plt+0x22f8>
   135f0:	add	ip, pc, ip
   135f4:	mov	lr, #34	; 0x22
   135f8:	mov	r3, r7
   135fc:	mov	r2, r6
   13600:	add	r1, pc, r1
   13604:	str	lr, [r0]
   13608:	ldr	r0, [ip]
   1360c:	bl	110f4 <err@plt>
   13610:	andeq	r2, r1, r0, lsl sl
   13614:	muleq	r0, r4, r0
   13618:	push	{r4, r5, r6, lr}
   1361c:	mov	r5, r0
   13620:	mov	r4, r1
   13624:	bl	135b8 <__assert_fail@plt+0x229c>
   13628:	add	r3, r0, #32768	; 0x8000
   1362c:	cmp	r3, #65536	; 0x10000
   13630:	bcs	1363c <__assert_fail@plt+0x2320>
   13634:	sxth	r0, r0
   13638:	pop	{r4, r5, r6, pc}
   1363c:	bl	111cc <__errno_location@plt>
   13640:	ldr	ip, [pc, #32]	; 13668 <__assert_fail@plt+0x234c>
   13644:	ldr	r1, [pc, #32]	; 1366c <__assert_fail@plt+0x2350>
   13648:	add	ip, pc, ip
   1364c:	mov	lr, #34	; 0x22
   13650:	mov	r3, r5
   13654:	mov	r2, r4
   13658:	add	r1, pc, r1
   1365c:	str	lr, [r0]
   13660:	ldr	r0, [ip]
   13664:	bl	110f4 <err@plt>
   13668:			; <UNDEFINED> instruction: 0x000129b8
   1366c:	andeq	r2, r0, ip, lsr r0
   13670:	mov	r2, #10
   13674:	b	129ac <__assert_fail@plt+0x1690>
   13678:	mov	r2, #16
   1367c:	b	129ac <__assert_fail@plt+0x1690>
   13680:	ldr	r2, [pc, #228]	; 1376c <__assert_fail@plt+0x2450>
   13684:	ldr	r3, [pc, #228]	; 13770 <__assert_fail@plt+0x2454>
   13688:	add	r2, pc, r2
   1368c:	push	{r4, r5, r6, r7, r8, lr}
   13690:	sub	sp, sp, #8
   13694:	ldr	r7, [r2, r3]
   13698:	mov	r5, #0
   1369c:	mov	r4, r0
   136a0:	ldr	r3, [r7]
   136a4:	mov	r8, r1
   136a8:	str	r5, [sp]
   136ac:	str	r3, [sp, #4]
   136b0:	bl	111cc <__errno_location@plt>
   136b4:	cmp	r4, r5
   136b8:	str	r5, [r0]
   136bc:	beq	136cc <__assert_fail@plt+0x23b0>
   136c0:	ldrsb	r3, [r4]
   136c4:	cmp	r3, r5
   136c8:	bne	136ec <__assert_fail@plt+0x23d0>
   136cc:	ldr	r1, [pc, #160]	; 13774 <__assert_fail@plt+0x2458>
   136d0:	mov	r3, r4
   136d4:	add	r1, pc, r1
   136d8:	mov	r2, r8
   136dc:	ldr	r0, [r1]
   136e0:	ldr	r1, [pc, #144]	; 13778 <__assert_fail@plt+0x245c>
   136e4:	add	r1, pc, r1
   136e8:	bl	11268 <errx@plt>
   136ec:	mov	r6, r0
   136f0:	mov	r1, sp
   136f4:	mov	r0, r4
   136f8:	bl	11220 <strtod@plt>
   136fc:	ldr	r2, [r6]
   13700:	cmp	r2, r5
   13704:	bne	13740 <__assert_fail@plt+0x2424>
   13708:	ldr	r3, [sp]
   1370c:	cmp	r3, r4
   13710:	beq	136cc <__assert_fail@plt+0x23b0>
   13714:	cmp	r3, r5
   13718:	beq	13728 <__assert_fail@plt+0x240c>
   1371c:	ldrsb	r3, [r3]
   13720:	cmp	r3, r5
   13724:	bne	136cc <__assert_fail@plt+0x23b0>
   13728:	ldr	r2, [sp, #4]
   1372c:	ldr	r3, [r7]
   13730:	cmp	r2, r3
   13734:	bne	13768 <__assert_fail@plt+0x244c>
   13738:	add	sp, sp, #8
   1373c:	pop	{r4, r5, r6, r7, r8, pc}
   13740:	ldr	r3, [pc, #52]	; 1377c <__assert_fail@plt+0x2460>
   13744:	cmp	r2, #34	; 0x22
   13748:	add	r3, pc, r3
   1374c:	ldr	r0, [r3]
   13750:	bne	136cc <__assert_fail@plt+0x23b0>
   13754:	ldr	r1, [pc, #36]	; 13780 <__assert_fail@plt+0x2464>
   13758:	mov	r3, r4
   1375c:	mov	r2, r8
   13760:	add	r1, pc, r1
   13764:	bl	110f4 <err@plt>
   13768:	bl	110dc <__stack_chk_fail@plt>
   1376c:	andeq	r2, r1, r4, asr r8
   13770:	andeq	r0, r0, r4, lsl r1
   13774:	andeq	r2, r1, ip, lsr #18
   13778:			; <UNDEFINED> instruction: 0x00001fb0
   1377c:			; <UNDEFINED> instruction: 0x000128b8
   13780:	andeq	r1, r0, r4, lsr pc
   13784:	ldr	r2, [pc, #232]	; 13874 <__assert_fail@plt+0x2558>
   13788:	ldr	r3, [pc, #232]	; 13878 <__assert_fail@plt+0x255c>
   1378c:	add	r2, pc, r2
   13790:	push	{r4, r5, r6, r7, r8, lr}
   13794:	sub	sp, sp, #8
   13798:	ldr	r7, [r2, r3]
   1379c:	mov	r5, #0
   137a0:	mov	r4, r0
   137a4:	ldr	r3, [r7]
   137a8:	mov	r8, r1
   137ac:	str	r5, [sp]
   137b0:	str	r3, [sp, #4]
   137b4:	bl	111cc <__errno_location@plt>
   137b8:	cmp	r4, r5
   137bc:	str	r5, [r0]
   137c0:	beq	137d0 <__assert_fail@plt+0x24b4>
   137c4:	ldrsb	r3, [r4]
   137c8:	cmp	r3, r5
   137cc:	bne	137f0 <__assert_fail@plt+0x24d4>
   137d0:	ldr	r1, [pc, #164]	; 1387c <__assert_fail@plt+0x2560>
   137d4:	mov	r3, r4
   137d8:	add	r1, pc, r1
   137dc:	mov	r2, r8
   137e0:	ldr	r0, [r1]
   137e4:	ldr	r1, [pc, #148]	; 13880 <__assert_fail@plt+0x2564>
   137e8:	add	r1, pc, r1
   137ec:	bl	11268 <errx@plt>
   137f0:	mov	r6, r0
   137f4:	mov	r2, #10
   137f8:	mov	r1, sp
   137fc:	mov	r0, r4
   13800:	bl	11034 <strtol@plt>
   13804:	ldr	r2, [r6]
   13808:	cmp	r2, r5
   1380c:	bne	13848 <__assert_fail@plt+0x252c>
   13810:	ldr	r3, [sp]
   13814:	cmp	r3, r4
   13818:	beq	137d0 <__assert_fail@plt+0x24b4>
   1381c:	cmp	r3, r5
   13820:	beq	13830 <__assert_fail@plt+0x2514>
   13824:	ldrsb	r3, [r3]
   13828:	cmp	r3, r5
   1382c:	bne	137d0 <__assert_fail@plt+0x24b4>
   13830:	ldr	r2, [sp, #4]
   13834:	ldr	r3, [r7]
   13838:	cmp	r2, r3
   1383c:	bne	13870 <__assert_fail@plt+0x2554>
   13840:	add	sp, sp, #8
   13844:	pop	{r4, r5, r6, r7, r8, pc}
   13848:	ldr	r3, [pc, #52]	; 13884 <__assert_fail@plt+0x2568>
   1384c:	cmp	r2, #34	; 0x22
   13850:	add	r3, pc, r3
   13854:	ldr	r0, [r3]
   13858:	bne	137d0 <__assert_fail@plt+0x24b4>
   1385c:	ldr	r1, [pc, #36]	; 13888 <__assert_fail@plt+0x256c>
   13860:	mov	r3, r4
   13864:	mov	r2, r8
   13868:	add	r1, pc, r1
   1386c:	bl	110f4 <err@plt>
   13870:	bl	110dc <__stack_chk_fail@plt>
   13874:	andeq	r2, r1, r0, asr r7
   13878:	andeq	r0, r0, r4, lsl r1
   1387c:	andeq	r2, r1, r8, lsr #16
   13880:	andeq	r1, r0, ip, lsr #29
   13884:			; <UNDEFINED> instruction: 0x000127b0
   13888:	andeq	r1, r0, ip, lsr #28
   1388c:	ldr	r2, [pc, #232]	; 1397c <__assert_fail@plt+0x2660>
   13890:	ldr	r3, [pc, #232]	; 13980 <__assert_fail@plt+0x2664>
   13894:	add	r2, pc, r2
   13898:	push	{r4, r5, r6, r7, r8, lr}
   1389c:	sub	sp, sp, #8
   138a0:	ldr	r7, [r2, r3]
   138a4:	mov	r5, #0
   138a8:	mov	r4, r0
   138ac:	ldr	r3, [r7]
   138b0:	mov	r8, r1
   138b4:	str	r5, [sp]
   138b8:	str	r3, [sp, #4]
   138bc:	bl	111cc <__errno_location@plt>
   138c0:	cmp	r4, r5
   138c4:	str	r5, [r0]
   138c8:	beq	138d8 <__assert_fail@plt+0x25bc>
   138cc:	ldrsb	r3, [r4]
   138d0:	cmp	r3, r5
   138d4:	bne	138f8 <__assert_fail@plt+0x25dc>
   138d8:	ldr	r1, [pc, #164]	; 13984 <__assert_fail@plt+0x2668>
   138dc:	mov	r3, r4
   138e0:	add	r1, pc, r1
   138e4:	mov	r2, r8
   138e8:	ldr	r0, [r1]
   138ec:	ldr	r1, [pc, #148]	; 13988 <__assert_fail@plt+0x266c>
   138f0:	add	r1, pc, r1
   138f4:	bl	11268 <errx@plt>
   138f8:	mov	r6, r0
   138fc:	mov	r2, #10
   13900:	mov	r1, sp
   13904:	mov	r0, r4
   13908:	bl	11190 <strtoul@plt>
   1390c:	ldr	r2, [r6]
   13910:	cmp	r2, r5
   13914:	bne	13950 <__assert_fail@plt+0x2634>
   13918:	ldr	r3, [sp]
   1391c:	cmp	r3, r4
   13920:	beq	138d8 <__assert_fail@plt+0x25bc>
   13924:	cmp	r3, r5
   13928:	beq	13938 <__assert_fail@plt+0x261c>
   1392c:	ldrsb	r3, [r3]
   13930:	cmp	r3, r5
   13934:	bne	138d8 <__assert_fail@plt+0x25bc>
   13938:	ldr	r2, [sp, #4]
   1393c:	ldr	r3, [r7]
   13940:	cmp	r2, r3
   13944:	bne	13978 <__assert_fail@plt+0x265c>
   13948:	add	sp, sp, #8
   1394c:	pop	{r4, r5, r6, r7, r8, pc}
   13950:	ldr	r3, [pc, #52]	; 1398c <__assert_fail@plt+0x2670>
   13954:	cmp	r2, #34	; 0x22
   13958:	add	r3, pc, r3
   1395c:	ldr	r0, [r3]
   13960:	bne	138d8 <__assert_fail@plt+0x25bc>
   13964:	ldr	r1, [pc, #36]	; 13990 <__assert_fail@plt+0x2674>
   13968:	mov	r3, r4
   1396c:	mov	r2, r8
   13970:	add	r1, pc, r1
   13974:	bl	110f4 <err@plt>
   13978:	bl	110dc <__stack_chk_fail@plt>
   1397c:	andeq	r2, r1, r8, asr #12
   13980:	andeq	r0, r0, r4, lsl r1
   13984:	andeq	r2, r1, r0, lsr #14
   13988:	andeq	r1, r0, r4, lsr #27
   1398c:	andeq	r2, r1, r8, lsr #13
   13990:	andeq	r1, r0, r4, lsr #26
   13994:	ldr	r3, [pc, #140]	; 13a28 <__assert_fail@plt+0x270c>
   13998:	ldr	r2, [pc, #140]	; 13a2c <__assert_fail@plt+0x2710>
   1399c:	add	r3, pc, r3
   139a0:	push	{r4, r5, r6, lr}
   139a4:	sub	sp, sp, #16
   139a8:	ldr	r4, [r3, r2]
   139ac:	mov	r5, r1
   139b0:	mov	r1, sp
   139b4:	ldr	r3, [r4]
   139b8:	mov	r6, r0
   139bc:	str	r3, [sp, #12]
   139c0:	bl	131d4 <__assert_fail@plt+0x1eb8>
   139c4:	cmp	r0, #0
   139c8:	beq	13a08 <__assert_fail@plt+0x26ec>
   139cc:	bl	111cc <__errno_location@plt>
   139d0:	ldr	r3, [pc, #88]	; 13a30 <__assert_fail@plt+0x2714>
   139d4:	mov	r2, r5
   139d8:	ldr	r1, [pc, r3]
   139dc:	ldr	r3, [r0]
   139e0:	mov	r0, r1
   139e4:	cmp	r3, #0
   139e8:	mov	r3, r6
   139ec:	beq	139fc <__assert_fail@plt+0x26e0>
   139f0:	ldr	r1, [pc, #60]	; 13a34 <__assert_fail@plt+0x2718>
   139f4:	add	r1, pc, r1
   139f8:	bl	110f4 <err@plt>
   139fc:	ldr	r1, [pc, #52]	; 13a38 <__assert_fail@plt+0x271c>
   13a00:	add	r1, pc, r1
   13a04:	bl	11268 <errx@plt>
   13a08:	ldr	r2, [sp, #12]
   13a0c:	ldr	r3, [r4]
   13a10:	ldrd	r0, [sp]
   13a14:	cmp	r2, r3
   13a18:	bne	13a24 <__assert_fail@plt+0x2708>
   13a1c:	add	sp, sp, #16
   13a20:	pop	{r4, r5, r6, pc}
   13a24:	bl	110dc <__stack_chk_fail@plt>
   13a28:	andeq	r2, r1, r0, asr #10
   13a2c:	andeq	r0, r0, r4, lsl r1
   13a30:	andeq	r2, r1, r8, lsr #12
   13a34:	andeq	r1, r0, r0, lsr #25
   13a38:	muleq	r0, r4, ip
   13a3c:	push	{r4, lr}
   13a40:	mov	r4, r1
   13a44:	mov	r1, r2
   13a48:	bl	13680 <__assert_fail@plt+0x2364>
   13a4c:	vldr	d6, [pc, #28]	; 13a70 <__assert_fail@plt+0x2754>
   13a50:	vcvt.s32.f64	s15, d0
   13a54:	vcvt.f64.s32	d5, s15
   13a58:	vstr	s15, [r4]
   13a5c:	vsub.f64	d0, d0, d5
   13a60:	vmul.f64	d0, d0, d6
   13a64:	vcvt.s32.f64	s0, d0
   13a68:	vstr	s0, [r4, #4]
   13a6c:	pop	{r4, pc}
   13a70:	andeq	r0, r0, r0
   13a74:	smlawbmi	lr, r0, r4, r8
   13a78:	and	r2, r0, #61440	; 0xf000
   13a7c:	cmp	r2, #16384	; 0x4000
   13a80:	moveq	r2, r1
   13a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a88:	moveq	sl, #100	; 0x64
   13a8c:	mov	r3, r0
   13a90:	add	r9, r1, #1
   13a94:	add	r8, r1, #2
   13a98:	add	r7, r1, #3
   13a9c:	add	r6, r1, #4
   13aa0:	add	r5, r1, #5
   13aa4:	add	r4, r1, #6
   13aa8:	add	lr, r1, #7
   13aac:	add	ip, r1, #8
   13ab0:	add	r0, r1, #9
   13ab4:	strbeq	sl, [r2], #10
   13ab8:	beq	13b5c <__assert_fail@plt+0x2840>
   13abc:	cmp	r2, #40960	; 0xa000
   13ac0:	moveq	r2, r1
   13ac4:	moveq	sl, #108	; 0x6c
   13ac8:	strbeq	sl, [r2], #10
   13acc:	beq	13b5c <__assert_fail@plt+0x2840>
   13ad0:	cmp	r2, #8192	; 0x2000
   13ad4:	moveq	r2, r1
   13ad8:	moveq	sl, #99	; 0x63
   13adc:	strbeq	sl, [r2], #10
   13ae0:	beq	13b5c <__assert_fail@plt+0x2840>
   13ae4:	cmp	r2, #24576	; 0x6000
   13ae8:	moveq	r2, r1
   13aec:	moveq	sl, #98	; 0x62
   13af0:	strbeq	sl, [r2], #10
   13af4:	beq	13b5c <__assert_fail@plt+0x2840>
   13af8:	cmp	r2, #49152	; 0xc000
   13afc:	moveq	r2, r1
   13b00:	moveq	sl, #115	; 0x73
   13b04:	strbeq	sl, [r2], #10
   13b08:	beq	13b5c <__assert_fail@plt+0x2840>
   13b0c:	cmp	r2, #4096	; 0x1000
   13b10:	moveq	r2, r1
   13b14:	moveq	sl, #112	; 0x70
   13b18:	strbeq	sl, [r2], #10
   13b1c:	beq	13b5c <__assert_fail@plt+0x2840>
   13b20:	cmp	r2, #32768	; 0x8000
   13b24:	moveq	r2, r1
   13b28:	moveq	sl, #45	; 0x2d
   13b2c:	strbeq	sl, [r2], #10
   13b30:	beq	13b5c <__assert_fail@plt+0x2840>
   13b34:	mov	r2, r0
   13b38:	mov	r0, ip
   13b3c:	mov	ip, lr
   13b40:	mov	lr, r4
   13b44:	mov	r4, r5
   13b48:	mov	r5, r6
   13b4c:	mov	r6, r7
   13b50:	mov	r7, r8
   13b54:	mov	r8, r9
   13b58:	mov	r9, r1
   13b5c:	tst	r3, #256	; 0x100
   13b60:	movne	fp, #114	; 0x72
   13b64:	moveq	fp, #45	; 0x2d
   13b68:	tst	r3, #128	; 0x80
   13b6c:	movne	sl, #119	; 0x77
   13b70:	moveq	sl, #45	; 0x2d
   13b74:	tst	r3, #2048	; 0x800
   13b78:	strb	fp, [r9]
   13b7c:	and	r9, r3, #64	; 0x40
   13b80:	strb	sl, [r8]
   13b84:	beq	13c20 <__assert_fail@plt+0x2904>
   13b88:	cmp	r9, #0
   13b8c:	movne	r9, #115	; 0x73
   13b90:	moveq	r9, #83	; 0x53
   13b94:	tst	r3, #32
   13b98:	movne	r8, #114	; 0x72
   13b9c:	moveq	r8, #45	; 0x2d
   13ba0:	tst	r3, #16
   13ba4:	strb	r9, [r7]
   13ba8:	movne	r7, #119	; 0x77
   13bac:	moveq	r7, #45	; 0x2d
   13bb0:	tst	r3, #1024	; 0x400
   13bb4:	strb	r8, [r6]
   13bb8:	and	r6, r3, #8
   13bbc:	strb	r7, [r5]
   13bc0:	beq	13c30 <__assert_fail@plt+0x2914>
   13bc4:	cmp	r6, #0
   13bc8:	movne	r6, #115	; 0x73
   13bcc:	moveq	r6, #83	; 0x53
   13bd0:	tst	r3, #4
   13bd4:	movne	r5, #114	; 0x72
   13bd8:	moveq	r5, #45	; 0x2d
   13bdc:	tst	r3, #2
   13be0:	strb	r6, [r4]
   13be4:	movne	r4, #119	; 0x77
   13be8:	moveq	r4, #45	; 0x2d
   13bec:	tst	r3, #512	; 0x200
   13bf0:	strb	r5, [lr]
   13bf4:	and	r3, r3, #1
   13bf8:	strb	r4, [ip]
   13bfc:	beq	13c40 <__assert_fail@plt+0x2924>
   13c00:	cmp	r3, #0
   13c04:	movne	ip, #116	; 0x74
   13c08:	moveq	ip, #84	; 0x54
   13c0c:	mov	r3, #0
   13c10:	strb	ip, [r0]
   13c14:	mov	r0, r1
   13c18:	strb	r3, [r2]
   13c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c20:	cmp	r9, #0
   13c24:	movne	r9, #120	; 0x78
   13c28:	moveq	r9, #45	; 0x2d
   13c2c:	b	13b94 <__assert_fail@plt+0x2878>
   13c30:	cmp	r6, #0
   13c34:	movne	r6, #120	; 0x78
   13c38:	moveq	r6, #45	; 0x2d
   13c3c:	b	13bd0 <__assert_fail@plt+0x28b4>
   13c40:	cmp	r3, #0
   13c44:	movne	ip, #120	; 0x78
   13c48:	moveq	ip, #45	; 0x2d
   13c4c:	b	13c0c <__assert_fail@plt+0x28f0>
   13c50:	ldr	r1, [pc, #680]	; 13f00 <__assert_fail@plt+0x2be4>
   13c54:	ldr	ip, [pc, #680]	; 13f04 <__assert_fail@plt+0x2be8>
   13c58:	add	r1, pc, r1
   13c5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c60:	sub	sp, sp, #108	; 0x6c
   13c64:	ldr	r8, [r1, ip]
   13c68:	tst	r0, #2
   13c6c:	strd	r2, [sp, #32]
   13c70:	ldr	r1, [r8]
   13c74:	addeq	r9, sp, #60	; 0x3c
   13c78:	str	r1, [sp, #100]	; 0x64
   13c7c:	ldrd	r2, [sp, #32]
   13c80:	movne	r1, #32
   13c84:	strbne	r1, [sp, #60]	; 0x3c
   13c88:	addne	ip, sp, #61	; 0x3d
   13c8c:	addne	r9, sp, #60	; 0x3c
   13c90:	moveq	ip, r9
   13c94:	mov	r1, #10
   13c98:	mov	sl, #1
   13c9c:	sub	lr, r1, #32
   13ca0:	lsl	r4, sl, r1
   13ca4:	lsl	r5, sl, lr
   13ca8:	rsb	lr, r1, #32
   13cac:	orr	r5, r5, sl, lsr lr
   13cb0:	cmp	r3, r5
   13cb4:	cmpeq	r2, r4
   13cb8:	bcc	13e74 <__assert_fail@plt+0x2b58>
   13cbc:	add	r1, r1, #10
   13cc0:	cmp	r1, #70	; 0x46
   13cc4:	bne	13c9c <__assert_fail@plt+0x2980>
   13cc8:	mov	lr, ip
   13ccc:	strd	r2, [sp, #32]
   13cd0:	mov	r4, r2
   13cd4:	tst	r0, #1
   13cd8:	mov	r2, #69	; 0x45
   13cdc:	bic	r5, r3, #-268435456	; 0xf0000000
   13ce0:	lsr	sl, r3, #28
   13ce4:	strb	r2, [lr], #1
   13ce8:	bne	13e5c <__assert_fail@plt+0x2b40>
   13cec:	orrs	r3, r4, r5
   13cf0:	mov	r3, #0
   13cf4:	strb	r3, [lr]
   13cf8:	beq	13e9c <__assert_fail@plt+0x2b80>
   13cfc:	sub	r2, r1, #20
   13d00:	rsb	r0, r2, #32
   13d04:	lsr	r3, r4, r2
   13d08:	sub	r1, r1, #52	; 0x34
   13d0c:	orr	r3, r3, r5, lsl r0
   13d10:	orr	r3, r3, r5, lsr r1
   13d14:	lsr	r2, r5, r2
   13d18:	adds	r6, r3, #50	; 0x32
   13d1c:	adc	r7, r2, #0
   13d20:	mov	r3, #0
   13d24:	mov	r2, #100	; 0x64
   13d28:	mov	r0, r6
   13d2c:	mov	r1, r7
   13d30:	bl	14820 <__assert_fail@plt+0x3504>
   13d34:	cmp	r1, #0
   13d38:	cmpeq	r0, #10
   13d3c:	mov	r2, r0
   13d40:	mov	r3, r1
   13d44:	addeq	sl, sl, #1
   13d48:	beq	13e9c <__assert_fail@plt+0x2b80>
   13d4c:	cmp	r7, #0
   13d50:	cmpeq	r6, #99	; 0x63
   13d54:	strd	r2, [sp, #32]
   13d58:	bls	13e9c <__assert_fail@plt+0x2b80>
   13d5c:	bl	11298 <localeconv@plt>
   13d60:	ldrd	r2, [sp, #32]
   13d64:	cmp	r0, #0
   13d68:	beq	13ee4 <__assert_fail@plt+0x2bc8>
   13d6c:	ldr	r0, [r0]
   13d70:	cmp	r0, #0
   13d74:	beq	13ef0 <__assert_fail@plt+0x2bd4>
   13d78:	ldrsb	r1, [r0]
   13d7c:	cmp	r1, #0
   13d80:	ldreq	r0, [pc, #384]	; 13f08 <__assert_fail@plt+0x2bec>
   13d84:	addeq	r0, pc, r0
   13d88:	ldr	r1, [pc, #380]	; 13f0c <__assert_fail@plt+0x2bf0>
   13d8c:	strd	r2, [sp, #16]
   13d90:	add	r1, pc, r1
   13d94:	add	r4, sp, #68	; 0x44
   13d98:	mov	r3, #32
   13d9c:	str	r0, [sp, #8]
   13da0:	str	r1, [sp]
   13da4:	str	r9, [sp, #24]
   13da8:	str	sl, [sp, #4]
   13dac:	mov	r0, r4
   13db0:	mov	r1, r3
   13db4:	mov	r2, #1
   13db8:	bl	112f8 <__snprintf_chk@plt>
   13dbc:	b	13ec4 <__assert_fail@plt+0x2ba8>
   13dc0:	ldr	r4, [pc, #328]	; 13f10 <__assert_fail@plt+0x2bf4>
   13dc4:	mvn	sl, #0
   13dc8:	ldr	fp, [pc, #324]	; 13f14 <__assert_fail@plt+0x2bf8>
   13dcc:	umull	r2, r3, lr, r4
   13dd0:	sub	r4, r1, #42	; 0x2a
   13dd4:	strd	r2, [sp, #40]	; 0x28
   13dd8:	ldr	r3, [sp, #44]	; 0x2c
   13ddc:	lsl	r2, sl, lr
   13de0:	lsr	r3, r3, #3
   13de4:	str	r3, [sp, #52]	; 0x34
   13de8:	ldr	r3, [sp, #32]
   13dec:	str	r4, [sp, #48]	; 0x30
   13df0:	orr	r4, r2, sl, lsl r4
   13df4:	lsr	r2, r3, lr
   13df8:	mov	r3, r2
   13dfc:	ldr	r2, [sp, #52]	; 0x34
   13e00:	add	fp, pc, fp
   13e04:	str	r4, [sp, #40]	; 0x28
   13e08:	ldrsb	fp, [fp, r2]
   13e0c:	mov	r2, r3
   13e10:	ldr	r3, [sp, #36]	; 0x24
   13e14:	rsb	r5, lr, #32
   13e18:	ldr	r4, [sp, #40]	; 0x28
   13e1c:	orr	r2, r2, r3, lsl r5
   13e20:	orr	r4, r4, sl, lsr r5
   13e24:	ldr	r3, [sp, #32]
   13e28:	str	r4, [sp, #40]	; 0x28
   13e2c:	cmp	r0, #0
   13e30:	bic	r4, r3, sl, lsl lr
   13e34:	ldr	r0, [sp, #36]	; 0x24
   13e38:	ldr	r3, [sp, #48]	; 0x30
   13e3c:	mov	lr, ip
   13e40:	orr	sl, r2, r0, lsr r3
   13e44:	ldr	r3, [sp, #40]	; 0x28
   13e48:	strb	fp, [lr], #1
   13e4c:	bic	r5, r0, r3
   13e50:	beq	13cec <__assert_fail@plt+0x29d0>
   13e54:	cmp	fp, #66	; 0x42
   13e58:	beq	13cec <__assert_fail@plt+0x29d0>
   13e5c:	mov	r3, #105	; 0x69
   13e60:	strb	r3, [ip, #1]
   13e64:	mov	r3, #66	; 0x42
   13e68:	add	lr, ip, #3
   13e6c:	strb	r3, [ip, #2]
   13e70:	b	13cec <__assert_fail@plt+0x29d0>
   13e74:	subs	lr, r1, #10
   13e78:	strd	r2, [sp, #32]
   13e7c:	and	r0, r0, #1
   13e80:	bne	13dc0 <__assert_fail@plt+0x2aa4>
   13e84:	ldr	sl, [sp, #32]
   13e88:	cmp	r0, #0
   13e8c:	movne	r0, lr
   13e90:	mov	r3, #66	; 0x42
   13e94:	strb	r0, [ip, #1]
   13e98:	strb	r3, [ip]
   13e9c:	ldr	r2, [pc, #116]	; 13f18 <__assert_fail@plt+0x2bfc>
   13ea0:	add	r4, sp, #68	; 0x44
   13ea4:	add	r2, pc, r2
   13ea8:	mov	r3, #32
   13eac:	stm	sp, {r2, sl}
   13eb0:	str	r9, [sp, #8]
   13eb4:	mov	r0, r4
   13eb8:	mov	r1, r3
   13ebc:	mov	r2, #1
   13ec0:	bl	112f8 <__snprintf_chk@plt>
   13ec4:	mov	r0, r4
   13ec8:	bl	110d0 <strdup@plt>
   13ecc:	ldr	r2, [sp, #100]	; 0x64
   13ed0:	ldr	r3, [r8]
   13ed4:	cmp	r2, r3
   13ed8:	bne	13efc <__assert_fail@plt+0x2be0>
   13edc:	add	sp, sp, #108	; 0x6c
   13ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ee4:	ldr	r0, [pc, #48]	; 13f1c <__assert_fail@plt+0x2c00>
   13ee8:	add	r0, pc, r0
   13eec:	b	13d88 <__assert_fail@plt+0x2a6c>
   13ef0:	ldr	r0, [pc, #40]	; 13f20 <__assert_fail@plt+0x2c04>
   13ef4:	add	r0, pc, r0
   13ef8:	b	13d88 <__assert_fail@plt+0x2a6c>
   13efc:	bl	110dc <__stack_chk_fail@plt>
   13f00:	andeq	r2, r1, r4, lsl #5
   13f04:	andeq	r0, r0, r4, lsl r1
   13f08:	andeq	r1, r0, r4, lsr #8
   13f0c:	andeq	r1, r0, r0, lsr r9
   13f10:	stclgt	12, cr12, [ip], {205}	; 0xcd
   13f14:			; <UNDEFINED> instruction: 0x000018b8
   13f18:	andeq	r1, r0, r8, lsr #16
   13f1c:	andeq	r1, r0, r0, asr #5
   13f20:			; <UNDEFINED> instruction: 0x000012b4
   13f24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f28:	subs	r4, r0, #0
   13f2c:	beq	13ffc <__assert_fail@plt+0x2ce0>
   13f30:	ldrsb	lr, [r4]
   13f34:	cmp	lr, #0
   13f38:	beq	13ffc <__assert_fail@plt+0x2ce0>
   13f3c:	cmp	r1, #0
   13f40:	clz	ip, r2
   13f44:	lsr	ip, ip, #5
   13f48:	moveq	r0, #1
   13f4c:	movne	r0, ip
   13f50:	cmp	r3, #0
   13f54:	moveq	r0, #1
   13f58:	cmp	r0, #0
   13f5c:	bne	13ffc <__assert_fail@plt+0x2ce0>
   13f60:	mov	r8, r3
   13f64:	mov	r7, r2
   13f68:	mov	r9, r1
   13f6c:	mov	r5, r0
   13f70:	b	13fcc <__assert_fail@plt+0x2cb0>
   13f74:	cmp	r3, #0
   13f78:	bne	13fb8 <__assert_fail@plt+0x2c9c>
   13f7c:	cmn	r4, #1
   13f80:	add	r6, r4, #1
   13f84:	beq	14004 <__assert_fail@plt+0x2ce8>
   13f88:	cmp	r0, r6
   13f8c:	bcs	13ffc <__assert_fail@plt+0x2ce0>
   13f90:	sub	r1, r6, r0
   13f94:	blx	r8
   13f98:	cmn	r0, #1
   13f9c:	beq	13ffc <__assert_fail@plt+0x2ce0>
   13fa0:	str	r0, [r9, r5, lsl #2]
   13fa4:	ldrsb	r3, [r6]
   13fa8:	add	r5, r5, #1
   13fac:	cmp	r3, #0
   13fb0:	beq	14004 <__assert_fail@plt+0x2ce8>
   13fb4:	mov	r0, #0
   13fb8:	cmn	r4, #1
   13fbc:	beq	14004 <__assert_fail@plt+0x2ce8>
   13fc0:	ldrsb	lr, [r4, #1]!
   13fc4:	cmp	lr, #0
   13fc8:	beq	14004 <__assert_fail@plt+0x2ce8>
   13fcc:	cmp	r7, r5
   13fd0:	mov	r6, r4
   13fd4:	bls	1400c <__assert_fail@plt+0x2cf0>
   13fd8:	cmp	r0, #0
   13fdc:	moveq	r0, r4
   13fe0:	cmp	lr, #44	; 0x2c
   13fe4:	ldrsb	r3, [r4, #1]
   13fe8:	bne	13f74 <__assert_fail@plt+0x2c58>
   13fec:	cmp	r3, #0
   13ff0:	beq	13f7c <__assert_fail@plt+0x2c60>
   13ff4:	cmp	r0, r6
   13ff8:	bcc	13f90 <__assert_fail@plt+0x2c74>
   13ffc:	mvn	r0, #0
   14000:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14004:	mov	r0, r5
   14008:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1400c:	mvn	r0, #1
   14010:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14014:	cmp	r0, #0
   14018:	beq	14084 <__assert_fail@plt+0x2d68>
   1401c:	push	{r4, lr}
   14020:	mov	r4, r3
   14024:	cmp	r4, #0
   14028:	ldrsb	ip, [r0]
   1402c:	clz	r3, ip
   14030:	lsr	r3, r3, #5
   14034:	moveq	r3, #1
   14038:	cmp	r3, #0
   1403c:	bne	1407c <__assert_fail@plt+0x2d60>
   14040:	ldr	lr, [r4]
   14044:	cmp	lr, r2
   14048:	bhi	1407c <__assert_fail@plt+0x2d60>
   1404c:	cmp	ip, #43	; 0x2b
   14050:	strne	r3, [r4]
   14054:	addeq	r0, r0, #1
   14058:	ldr	r3, [sp, #8]
   1405c:	addeq	r1, r1, lr, lsl #2
   14060:	subeq	r2, r2, lr
   14064:	bl	13f24 <__assert_fail@plt+0x2c08>
   14068:	cmp	r0, #0
   1406c:	ldrgt	r3, [r4]
   14070:	addgt	r3, r3, r0
   14074:	strgt	r3, [r4]
   14078:	pop	{r4, pc}
   1407c:	mvn	r0, #0
   14080:	pop	{r4, pc}
   14084:	mvn	r0, #0
   14088:	bx	lr
   1408c:	cmp	r2, #0
   14090:	clz	r3, r1
   14094:	lsr	r3, r3, #5
   14098:	moveq	r3, #1
   1409c:	cmp	r0, #0
   140a0:	moveq	r3, #1
   140a4:	cmp	r3, #0
   140a8:	bne	14174 <__assert_fail@plt+0x2e58>
   140ac:	push	{r4, r5, r6, r7, r8, lr}
   140b0:	mov	r6, r2
   140b4:	mov	r2, r3
   140b8:	ldrsb	r3, [r0]
   140bc:	mov	r8, r1
   140c0:	mov	r4, r0
   140c4:	mov	r7, #1
   140c8:	cmp	r3, #0
   140cc:	beq	1413c <__assert_fail@plt+0x2e20>
   140d0:	cmp	r2, #0
   140d4:	moveq	r2, r4
   140d8:	cmp	r3, #44	; 0x2c
   140dc:	mov	r5, r4
   140e0:	ldrsb	r3, [r4, #1]!
   140e4:	beq	14144 <__assert_fail@plt+0x2e28>
   140e8:	cmp	r3, #0
   140ec:	bne	14164 <__assert_fail@plt+0x2e48>
   140f0:	mov	r5, r4
   140f4:	cmp	r2, r5
   140f8:	sub	r1, r5, r2
   140fc:	mov	r0, r2
   14100:	bcs	1415c <__assert_fail@plt+0x2e40>
   14104:	blx	r6
   14108:	mov	r2, r4
   1410c:	cmp	r0, #0
   14110:	and	r1, r0, #7
   14114:	poplt	{r4, r5, r6, r7, r8, pc}
   14118:	ldrb	r3, [r8, r0, asr #3]
   1411c:	orr	r3, r3, r7, lsl r1
   14120:	strb	r3, [r8, r0, asr #3]
   14124:	ldrsb	r3, [r5]
   14128:	cmp	r3, #0
   1412c:	beq	1413c <__assert_fail@plt+0x2e20>
   14130:	ldrsb	r3, [r4]
   14134:	cmp	r3, #0
   14138:	bne	140d8 <__assert_fail@plt+0x2dbc>
   1413c:	mov	r0, #0
   14140:	pop	{r4, r5, r6, r7, r8, pc}
   14144:	cmp	r3, #0
   14148:	moveq	r5, r4
   1414c:	cmp	r2, r5
   14150:	sub	r1, r5, r2
   14154:	mov	r0, r2
   14158:	bcc	14104 <__assert_fail@plt+0x2de8>
   1415c:	mvn	r0, #0
   14160:	pop	{r4, r5, r6, r7, r8, pc}
   14164:	adds	r4, r5, #1
   14168:	bne	140c8 <__assert_fail@plt+0x2dac>
   1416c:	mov	r0, #0
   14170:	pop	{r4, r5, r6, r7, r8, pc}
   14174:	mvn	r0, #21
   14178:	bx	lr
   1417c:	cmp	r2, #0
   14180:	clz	r3, r1
   14184:	lsr	r3, r3, #5
   14188:	moveq	r3, #1
   1418c:	cmp	r0, #0
   14190:	moveq	r3, #1
   14194:	cmp	r3, #0
   14198:	bne	1425c <__assert_fail@plt+0x2f40>
   1419c:	push	{r4, r5, r6, r7, r8, lr}
   141a0:	mov	r6, r2
   141a4:	mov	r2, r3
   141a8:	ldrsb	r3, [r0]
   141ac:	mov	r7, r1
   141b0:	mov	r4, r0
   141b4:	cmp	r3, #0
   141b8:	beq	14224 <__assert_fail@plt+0x2f08>
   141bc:	cmp	r2, #0
   141c0:	moveq	r2, r4
   141c4:	cmp	r3, #44	; 0x2c
   141c8:	mov	r5, r4
   141cc:	ldrsb	r3, [r4, #1]!
   141d0:	beq	1422c <__assert_fail@plt+0x2f10>
   141d4:	cmp	r3, #0
   141d8:	bne	1424c <__assert_fail@plt+0x2f30>
   141dc:	mov	r5, r4
   141e0:	cmp	r2, r5
   141e4:	sub	r1, r5, r2
   141e8:	mov	r0, r2
   141ec:	bcs	14244 <__assert_fail@plt+0x2f28>
   141f0:	blx	r6
   141f4:	mov	r2, r4
   141f8:	cmp	r0, #0
   141fc:	poplt	{r4, r5, r6, r7, r8, pc}
   14200:	ldr	r3, [r7]
   14204:	orr	r3, r3, r0
   14208:	str	r3, [r7]
   1420c:	ldrsb	r3, [r5]
   14210:	cmp	r3, #0
   14214:	beq	14224 <__assert_fail@plt+0x2f08>
   14218:	ldrsb	r3, [r4]
   1421c:	cmp	r3, #0
   14220:	bne	141c4 <__assert_fail@plt+0x2ea8>
   14224:	mov	r0, #0
   14228:	pop	{r4, r5, r6, r7, r8, pc}
   1422c:	cmp	r3, #0
   14230:	moveq	r5, r4
   14234:	cmp	r2, r5
   14238:	sub	r1, r5, r2
   1423c:	mov	r0, r2
   14240:	bcc	141f0 <__assert_fail@plt+0x2ed4>
   14244:	mvn	r0, #0
   14248:	pop	{r4, r5, r6, r7, r8, pc}
   1424c:	adds	r4, r5, #1
   14250:	bne	141b4 <__assert_fail@plt+0x2e98>
   14254:	mov	r0, #0
   14258:	pop	{r4, r5, r6, r7, r8, pc}
   1425c:	mvn	r0, #21
   14260:	bx	lr
   14264:	ldr	ip, [pc, #396]	; 143f8 <__assert_fail@plt+0x30dc>
   14268:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1426c:	add	ip, pc, ip
   14270:	ldr	lr, [pc, #388]	; 143fc <__assert_fail@plt+0x30e0>
   14274:	sub	sp, sp, #8
   14278:	mov	r9, r3
   1427c:	ldr	r5, [ip, lr]
   14280:	mov	sl, #0
   14284:	subs	r4, r0, #0
   14288:	ldr	r3, [r5]
   1428c:	mov	r7, r1
   14290:	str	sl, [sp]
   14294:	mov	r1, ip
   14298:	str	r3, [sp, #4]
   1429c:	beq	14310 <__assert_fail@plt+0x2ff4>
   142a0:	str	r9, [r7]
   142a4:	str	r9, [r2]
   142a8:	mov	r6, r2
   142ac:	bl	111cc <__errno_location@plt>
   142b0:	str	sl, [r0]
   142b4:	ldrsb	r3, [r4]
   142b8:	mov	r8, r0
   142bc:	cmp	r3, #58	; 0x3a
   142c0:	beq	1432c <__assert_fail@plt+0x3010>
   142c4:	mov	sl, sp
   142c8:	mov	r1, sl
   142cc:	mov	r2, #10
   142d0:	mov	r0, r4
   142d4:	bl	11034 <strtol@plt>
   142d8:	str	r0, [r7]
   142dc:	str	r0, [r6]
   142e0:	ldr	r0, [r8]
   142e4:	cmp	r0, #0
   142e8:	bne	1437c <__assert_fail@plt+0x3060>
   142ec:	ldr	r2, [sp]
   142f0:	cmp	r2, #0
   142f4:	cmpne	r2, r4
   142f8:	beq	1437c <__assert_fail@plt+0x3060>
   142fc:	ldrsb	r3, [r2]
   14300:	cmp	r3, #58	; 0x3a
   14304:	beq	14384 <__assert_fail@plt+0x3068>
   14308:	cmp	r3, #45	; 0x2d
   1430c:	beq	14394 <__assert_fail@plt+0x3078>
   14310:	mov	r0, #0
   14314:	ldr	r2, [sp, #4]
   14318:	ldr	r3, [r5]
   1431c:	cmp	r2, r3
   14320:	bne	143f4 <__assert_fail@plt+0x30d8>
   14324:	add	sp, sp, #8
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1432c:	add	r4, r4, #1
   14330:	mov	r0, r4
   14334:	mov	r2, #10
   14338:	mov	r1, sp
   1433c:	bl	11034 <strtol@plt>
   14340:	str	r0, [r6]
   14344:	ldr	r3, [r8]
   14348:	cmp	r3, #0
   1434c:	bne	1437c <__assert_fail@plt+0x3060>
   14350:	ldr	r3, [sp]
   14354:	cmp	r3, #0
   14358:	beq	1437c <__assert_fail@plt+0x3060>
   1435c:	ldrsb	r2, [r3]
   14360:	sub	r3, r3, r4
   14364:	clz	r3, r3
   14368:	cmp	r2, #0
   1436c:	lsr	r3, r3, #5
   14370:	movne	r3, #1
   14374:	cmp	r3, #0
   14378:	beq	14310 <__assert_fail@plt+0x2ff4>
   1437c:	mvn	r0, #0
   14380:	b	14314 <__assert_fail@plt+0x2ff8>
   14384:	ldrsb	r3, [r2, #1]
   14388:	cmp	r3, #0
   1438c:	streq	r9, [r6]
   14390:	beq	14314 <__assert_fail@plt+0x2ff8>
   14394:	mov	r3, #0
   14398:	add	r4, r2, #1
   1439c:	str	r3, [r8]
   143a0:	mov	r1, sl
   143a4:	mov	r0, r4
   143a8:	mov	r2, #10
   143ac:	str	r3, [sp]
   143b0:	bl	11034 <strtol@plt>
   143b4:	str	r0, [r6]
   143b8:	ldr	r3, [r8]
   143bc:	cmp	r3, #0
   143c0:	bne	1437c <__assert_fail@plt+0x3060>
   143c4:	ldr	r2, [sp]
   143c8:	cmp	r2, #0
   143cc:	beq	1437c <__assert_fail@plt+0x3060>
   143d0:	ldrsb	r3, [r2]
   143d4:	sub	r2, r2, r4
   143d8:	clz	r2, r2
   143dc:	cmp	r3, #0
   143e0:	lsr	r2, r2, #5
   143e4:	movne	r2, #1
   143e8:	cmp	r2, #0
   143ec:	beq	14310 <__assert_fail@plt+0x2ff4>
   143f0:	b	1437c <__assert_fail@plt+0x3060>
   143f4:	bl	110dc <__stack_chk_fail@plt>
   143f8:	andeq	r1, r1, r0, ror ip
   143fc:	andeq	r0, r0, r4, lsl r1
   14400:	ldr	r3, [pc, #244]	; 144fc <__assert_fail@plt+0x31e0>
   14404:	ldr	r2, [pc, #244]	; 14500 <__assert_fail@plt+0x31e4>
   14408:	add	r3, pc, r3
   1440c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14410:	sub	sp, sp, #20
   14414:	ldr	r9, [r3, r2]
   14418:	cmp	r0, #0
   1441c:	cmpne	r1, #0
   14420:	ldr	r3, [r9]
   14424:	str	r3, [sp, #12]
   14428:	beq	144f0 <__assert_fail@plt+0x31d4>
   1442c:	mov	r4, r1
   14430:	add	r8, sp, #4
   14434:	add	r7, sp, #8
   14438:	b	14478 <__assert_fail@plt+0x315c>
   1443c:	cmp	r4, r3
   14440:	bne	144f0 <__assert_fail@plt+0x31d4>
   14444:	mov	r2, r4
   14448:	mov	r1, r6
   1444c:	mov	r0, r5
   14450:	bl	112c8 <strncmp@plt>
   14454:	cmp	r0, #0
   14458:	bne	144f0 <__assert_fail@plt+0x31d4>
   1445c:	adds	r0, r5, r4
   14460:	moveq	r3, #0
   14464:	movne	r3, #1
   14468:	adds	r4, r6, r4
   1446c:	moveq	r3, #0
   14470:	cmp	r3, #0
   14474:	beq	144f0 <__assert_fail@plt+0x31d4>
   14478:	mov	r1, r8
   1447c:	bl	12880 <__assert_fail@plt+0x1564>
   14480:	mov	r1, r7
   14484:	mov	r5, r0
   14488:	mov	r0, r4
   1448c:	bl	12880 <__assert_fail@plt+0x1564>
   14490:	ldr	r4, [sp, #4]
   14494:	ldr	r3, [sp, #8]
   14498:	mov	r6, r0
   1449c:	adds	r0, r4, r3
   144a0:	beq	144d4 <__assert_fail@plt+0x31b8>
   144a4:	cmp	r0, #1
   144a8:	bne	1443c <__assert_fail@plt+0x3120>
   144ac:	cmp	r5, #0
   144b0:	beq	144c0 <__assert_fail@plt+0x31a4>
   144b4:	ldrsb	r2, [r5]
   144b8:	cmp	r2, #47	; 0x2f
   144bc:	beq	144d8 <__assert_fail@plt+0x31bc>
   144c0:	cmp	r6, #0
   144c4:	beq	1443c <__assert_fail@plt+0x3120>
   144c8:	ldrsb	r2, [r6]
   144cc:	cmp	r2, #47	; 0x2f
   144d0:	bne	1443c <__assert_fail@plt+0x3120>
   144d4:	mov	r0, #1
   144d8:	ldr	r2, [sp, #12]
   144dc:	ldr	r3, [r9]
   144e0:	cmp	r2, r3
   144e4:	bne	144f8 <__assert_fail@plt+0x31dc>
   144e8:	add	sp, sp, #20
   144ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   144f0:	mov	r0, #0
   144f4:	b	144d8 <__assert_fail@plt+0x31bc>
   144f8:	bl	110dc <__stack_chk_fail@plt>
   144fc:	ldrdeq	r1, [r1], -r4
   14500:	andeq	r0, r0, r4, lsl r1
   14504:	orrs	r3, r0, r1
   14508:	beq	14584 <__assert_fail@plt+0x3268>
   1450c:	cmp	r0, #0
   14510:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14514:	mov	r4, r1
   14518:	mov	r5, r0
   1451c:	beq	14590 <__assert_fail@plt+0x3274>
   14520:	cmp	r1, #0
   14524:	beq	145a0 <__assert_fail@plt+0x3284>
   14528:	mov	r6, r2
   1452c:	bl	1119c <strlen@plt>
   14530:	mvn	r3, r0
   14534:	cmp	r6, r3
   14538:	mov	r7, r0
   1453c:	movhi	r8, #0
   14540:	bhi	1457c <__assert_fail@plt+0x3260>
   14544:	add	r9, r6, r0
   14548:	add	r0, r9, #1
   1454c:	bl	11130 <malloc@plt>
   14550:	subs	r8, r0, #0
   14554:	beq	1457c <__assert_fail@plt+0x3260>
   14558:	mov	r1, r5
   1455c:	mov	r2, r7
   14560:	bl	110ac <memcpy@plt>
   14564:	mov	r2, r6
   14568:	mov	r1, r4
   1456c:	add	r0, r8, r7
   14570:	bl	110ac <memcpy@plt>
   14574:	mov	r3, #0
   14578:	strb	r3, [r8, r9]
   1457c:	mov	r0, r8
   14580:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14584:	ldr	r0, [pc, #28]	; 145a8 <__assert_fail@plt+0x328c>
   14588:	add	r0, pc, r0
   1458c:	b	110d0 <strdup@plt>
   14590:	mov	r0, r4
   14594:	mov	r1, r2
   14598:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1459c:	b	11094 <strndup@plt>
   145a0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   145a4:	b	110d0 <strdup@plt>
   145a8:	andeq	r0, r0, r4, lsr #25
   145ac:	push	{r4, r5, r6, lr}
   145b0:	subs	r4, r1, #0
   145b4:	mov	r5, r0
   145b8:	moveq	r2, r4
   145bc:	beq	145cc <__assert_fail@plt+0x32b0>
   145c0:	mov	r0, r4
   145c4:	bl	1119c <strlen@plt>
   145c8:	mov	r2, r0
   145cc:	mov	r1, r4
   145d0:	mov	r0, r5
   145d4:	pop	{r4, r5, r6, lr}
   145d8:	b	14504 <__assert_fail@plt+0x31e8>
   145dc:	push	{r1, r2, r3}
   145e0:	ldr	r1, [pc, #132]	; 1466c <__assert_fail@plt+0x3350>
   145e4:	ldr	r3, [pc, #132]	; 14670 <__assert_fail@plt+0x3354>
   145e8:	add	r1, pc, r1
   145ec:	push	{r4, r5, lr}
   145f0:	mov	r5, r0
   145f4:	ldr	r4, [r1, r3]
   145f8:	sub	sp, sp, #16
   145fc:	add	ip, sp, #32
   14600:	ldr	r0, [r4]
   14604:	ldr	r2, [sp, #28]
   14608:	str	r0, [sp, #12]
   1460c:	mov	r3, ip
   14610:	add	r0, sp, #8
   14614:	mov	r1, #1
   14618:	str	ip, [sp, #4]
   1461c:	bl	111f0 <__vasprintf_chk@plt>
   14620:	subs	r2, r0, #0
   14624:	movlt	r5, #0
   14628:	blt	14644 <__assert_fail@plt+0x3328>
   1462c:	mov	r0, r5
   14630:	ldr	r1, [sp, #8]
   14634:	bl	14504 <__assert_fail@plt+0x31e8>
   14638:	mov	r5, r0
   1463c:	ldr	r0, [sp, #8]
   14640:	bl	11070 <free@plt>
   14644:	ldr	r2, [sp, #12]
   14648:	ldr	r3, [r4]
   1464c:	mov	r0, r5
   14650:	cmp	r2, r3
   14654:	bne	14668 <__assert_fail@plt+0x334c>
   14658:	add	sp, sp, #16
   1465c:	pop	{r4, r5, lr}
   14660:	add	sp, sp, #12
   14664:	bx	lr
   14668:	bl	110dc <__stack_chk_fail@plt>
   1466c:	strdeq	r1, [r1], -r4
   14670:	andeq	r0, r0, r4, lsl r1
   14674:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14678:	mov	r6, r0
   1467c:	ldr	r0, [pc, #348]	; 147e0 <__assert_fail@plt+0x34c4>
   14680:	ldr	ip, [pc, #348]	; 147e4 <__assert_fail@plt+0x34c8>
   14684:	add	r0, pc, r0
   14688:	ldr	r5, [r6]
   1468c:	ldr	r8, [r0, ip]
   14690:	sub	sp, sp, #8
   14694:	ldrsb	r4, [r5]
   14698:	mov	r9, r2
   1469c:	ldr	r2, [r8]
   146a0:	cmp	r4, #0
   146a4:	mov	r7, r1
   146a8:	str	r2, [sp, #4]
   146ac:	mov	r1, r0
   146b0:	beq	14760 <__assert_fail@plt+0x3444>
   146b4:	mov	r0, r5
   146b8:	mov	r1, r9
   146bc:	mov	sl, r3
   146c0:	bl	11310 <strspn@plt>
   146c4:	add	r4, r5, r0
   146c8:	ldrsb	r5, [r5, r0]
   146cc:	cmp	r5, #0
   146d0:	beq	147c8 <__assert_fail@plt+0x34ac>
   146d4:	cmp	sl, #0
   146d8:	beq	1477c <__assert_fail@plt+0x3460>
   146dc:	ldr	r0, [pc, #260]	; 147e8 <__assert_fail@plt+0x34cc>
   146e0:	mov	r1, r5
   146e4:	add	r0, pc, r0
   146e8:	bl	111a8 <strchr@plt>
   146ec:	cmp	r0, #0
   146f0:	beq	14798 <__assert_fail@plt+0x347c>
   146f4:	add	sl, r4, #1
   146f8:	mov	r3, #0
   146fc:	mov	r0, sl
   14700:	mov	r1, sp
   14704:	strb	r5, [sp]
   14708:	strb	r3, [sp, #1]
   1470c:	bl	12920 <__assert_fail@plt+0x1604>
   14710:	add	r3, r4, r0
   14714:	str	r0, [r7]
   14718:	ldrsb	r3, [r3, #1]
   1471c:	subs	r5, r5, r3
   14720:	movne	r5, #1
   14724:	cmp	r3, #0
   14728:	moveq	r5, #1
   1472c:	cmp	r5, #0
   14730:	bne	147c8 <__assert_fail@plt+0x34ac>
   14734:	add	r0, r0, #2
   14738:	add	r5, r4, r0
   1473c:	ldrsb	r1, [r4, r0]
   14740:	cmp	r1, #0
   14744:	beq	14758 <__assert_fail@plt+0x343c>
   14748:	mov	r0, r9
   1474c:	bl	111a8 <strchr@plt>
   14750:	cmp	r0, #0
   14754:	beq	147c8 <__assert_fail@plt+0x34ac>
   14758:	mov	r4, sl
   1475c:	str	r5, [r6]
   14760:	ldr	r2, [sp, #4]
   14764:	ldr	r3, [r8]
   14768:	mov	r0, r4
   1476c:	cmp	r2, r3
   14770:	bne	147dc <__assert_fail@plt+0x34c0>
   14774:	add	sp, sp, #8
   14778:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1477c:	mov	r1, r9
   14780:	mov	r0, r4
   14784:	bl	11040 <strcspn@plt>
   14788:	add	r3, r4, r0
   1478c:	str	r0, [r7]
   14790:	str	r3, [r6]
   14794:	b	14760 <__assert_fail@plt+0x3444>
   14798:	mov	r1, r9
   1479c:	mov	r0, r4
   147a0:	bl	12920 <__assert_fail@plt+0x1604>
   147a4:	str	r0, [r7]
   147a8:	ldrsb	r1, [r4, r0]
   147ac:	add	r5, r4, r0
   147b0:	cmp	r1, #0
   147b4:	beq	147d4 <__assert_fail@plt+0x34b8>
   147b8:	mov	r0, r9
   147bc:	bl	111a8 <strchr@plt>
   147c0:	cmp	r0, #0
   147c4:	bne	147d4 <__assert_fail@plt+0x34b8>
   147c8:	str	r4, [r6]
   147cc:	mov	r4, #0
   147d0:	b	14760 <__assert_fail@plt+0x3444>
   147d4:	str	r5, [r6]
   147d8:	b	14760 <__assert_fail@plt+0x3444>
   147dc:	bl	110dc <__stack_chk_fail@plt>
   147e0:	andeq	r1, r1, r8, asr r8
   147e4:	andeq	r0, r0, r4, lsl r1
   147e8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   147ec:	push	{r4, lr}
   147f0:	mov	r4, r0
   147f4:	b	14800 <__assert_fail@plt+0x34e4>
   147f8:	cmp	r0, #10
   147fc:	beq	14818 <__assert_fail@plt+0x34fc>
   14800:	mov	r0, r4
   14804:	bl	11208 <fgetc@plt>
   14808:	cmn	r0, #1
   1480c:	bne	147f8 <__assert_fail@plt+0x34dc>
   14810:	mov	r0, #1
   14814:	pop	{r4, pc}
   14818:	mov	r0, #0
   1481c:	pop	{r4, pc}
   14820:	cmp	r3, #0
   14824:	cmpeq	r2, #0
   14828:	bne	14840 <__assert_fail@plt+0x3524>
   1482c:	cmp	r1, #0
   14830:	cmpeq	r0, #0
   14834:	mvnne	r1, #0
   14838:	mvnne	r0, #0
   1483c:	b	1485c <__assert_fail@plt+0x3540>
   14840:	sub	sp, sp, #8
   14844:	push	{sp, lr}
   14848:	bl	1486c <__assert_fail@plt+0x3550>
   1484c:	ldr	lr, [sp, #4]
   14850:	add	sp, sp, #8
   14854:	pop	{r2, r3}
   14858:	bx	lr
   1485c:	push	{r1, lr}
   14860:	mov	r0, #8
   14864:	bl	11010 <raise@plt>
   14868:	pop	{r1, pc}
   1486c:	cmp	r1, r3
   14870:	cmpeq	r0, r2
   14874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14878:	mov	r4, r0
   1487c:	movcc	r0, #0
   14880:	mov	r5, r1
   14884:	ldr	lr, [sp, #36]	; 0x24
   14888:	movcc	r1, r0
   1488c:	bcc	14988 <__assert_fail@plt+0x366c>
   14890:	cmp	r3, #0
   14894:	clzeq	ip, r2
   14898:	clzne	ip, r3
   1489c:	addeq	ip, ip, #32
   148a0:	cmp	r5, #0
   148a4:	clzeq	r1, r4
   148a8:	addeq	r1, r1, #32
   148ac:	clzne	r1, r5
   148b0:	sub	ip, ip, r1
   148b4:	sub	sl, ip, #32
   148b8:	lsl	r9, r3, ip
   148bc:	rsb	fp, ip, #32
   148c0:	orr	r9, r9, r2, lsl sl
   148c4:	orr	r9, r9, r2, lsr fp
   148c8:	lsl	r8, r2, ip
   148cc:	cmp	r5, r9
   148d0:	cmpeq	r4, r8
   148d4:	movcc	r0, #0
   148d8:	movcc	r1, r0
   148dc:	bcc	148f8 <__assert_fail@plt+0x35dc>
   148e0:	mov	r0, #1
   148e4:	subs	r4, r4, r8
   148e8:	lsl	r1, r0, sl
   148ec:	orr	r1, r1, r0, lsr fp
   148f0:	lsl	r0, r0, ip
   148f4:	sbc	r5, r5, r9
   148f8:	cmp	ip, #0
   148fc:	beq	14988 <__assert_fail@plt+0x366c>
   14900:	lsr	r6, r8, #1
   14904:	orr	r6, r6, r9, lsl #31
   14908:	lsr	r7, r9, #1
   1490c:	mov	r2, ip
   14910:	b	14934 <__assert_fail@plt+0x3618>
   14914:	subs	r3, r4, r6
   14918:	sbc	r8, r5, r7
   1491c:	adds	r3, r3, r3
   14920:	adc	r8, r8, r8
   14924:	adds	r4, r3, #1
   14928:	adc	r5, r8, #0
   1492c:	subs	r2, r2, #1
   14930:	beq	14950 <__assert_fail@plt+0x3634>
   14934:	cmp	r5, r7
   14938:	cmpeq	r4, r6
   1493c:	bcs	14914 <__assert_fail@plt+0x35f8>
   14940:	adds	r4, r4, r4
   14944:	adc	r5, r5, r5
   14948:	subs	r2, r2, #1
   1494c:	bne	14934 <__assert_fail@plt+0x3618>
   14950:	lsr	r3, r4, ip
   14954:	orr	r3, r3, r5, lsl fp
   14958:	lsr	r2, r5, ip
   1495c:	orr	r3, r3, r5, lsr sl
   14960:	adds	r0, r0, r4
   14964:	mov	r4, r3
   14968:	lsl	r3, r2, ip
   1496c:	orr	r3, r3, r4, lsl sl
   14970:	lsl	ip, r4, ip
   14974:	orr	r3, r3, r4, lsr fp
   14978:	adc	r1, r1, r5
   1497c:	subs	r0, r0, ip
   14980:	mov	r5, r2
   14984:	sbc	r1, r1, r3
   14988:	cmp	lr, #0
   1498c:	strdne	r4, [lr]
   14990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14994:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14998:	mov	r7, r0
   1499c:	ldr	r6, [pc, #72]	; 149ec <__assert_fail@plt+0x36d0>
   149a0:	ldr	r5, [pc, #72]	; 149f0 <__assert_fail@plt+0x36d4>
   149a4:	add	r6, pc, r6
   149a8:	add	r5, pc, r5
   149ac:	sub	r6, r6, r5
   149b0:	mov	r8, r1
   149b4:	mov	r9, r2
   149b8:	bl	10ff0 <raise@plt-0x20>
   149bc:	asrs	r6, r6, #2
   149c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   149c4:	mov	r4, #0
   149c8:	add	r4, r4, #1
   149cc:	ldr	r3, [r5], #4
   149d0:	mov	r2, r9
   149d4:	mov	r1, r8
   149d8:	mov	r0, r7
   149dc:	blx	r3
   149e0:	cmp	r6, r4
   149e4:	bne	149c8 <__assert_fail@plt+0x36ac>
   149e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149ec:	andeq	r1, r1, r8, lsr #8
   149f0:	andeq	r1, r1, r0, lsr #8
   149f4:	bx	lr
   149f8:	ldr	r3, [pc, #12]	; 14a0c <__assert_fail@plt+0x36f0>
   149fc:	mov	r1, #0
   14a00:	add	r3, pc, r3
   14a04:	ldr	r2, [r3]
   14a08:	b	111e4 <__cxa_atexit@plt>
   14a0c:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

00014a10 <.fini>:
   14a10:	push	{r3, lr}
   14a14:	pop	{r3, pc}
