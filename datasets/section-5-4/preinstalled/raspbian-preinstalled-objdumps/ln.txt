
raspbian-preinstalled/ln:     file format elf32-littlearm


Disassembly of section .init:

00011238 <.init>:
   11238:	push	{r3, lr}
   1123c:	bl	11f1c <__assert_fail@plt+0x8e0>
   11240:	pop	{r3, pc}

Disassembly of section .plt:

00011244 <fdopen@plt-0x14>:
   11244:	push	{lr}		; (str lr, [sp, #-4]!)
   11248:	ldr	lr, [pc, #4]	; 11254 <fdopen@plt-0x4>
   1124c:	add	lr, pc, lr
   11250:	ldr	pc, [lr, #8]!
   11254:	andeq	sl, r1, ip, lsr #27

00011258 <fdopen@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3500]!	; 0xdac

00011264 <calloc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3492]!	; 0xda4

00011270 <fputs_unlocked@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3484]!	; 0xd9c

0001127c <raise@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3476]!	; 0xd94

00011288 <__getdelim@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3468]!	; 0xd8c

00011294 <strcmp@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3460]!	; 0xd84

000112a0 <pathconf@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3452]!	; 0xd7c

000112ac <rewinddir@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3444]!	; 0xd74

000112b8 <__read_chk@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3436]!	; 0xd6c

000112c4 <fflush@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3428]!	; 0xd64

000112d0 <unlinkat@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3420]!	; 0xd5c

000112dc <getuid@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3412]!	; 0xd54

000112e8 <memmove@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3404]!	; 0xd4c

000112f4 <free@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3396]!	; 0xd44

00011300 <_exit@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3388]!	; 0xd3c

0001130c <memcpy@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3380]!	; 0xd34

00011318 <mbsinit@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3372]!	; 0xd2c

00011324 <memcmp@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3364]!	; 0xd24

00011330 <dcgettext@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3356]!	; 0xd1c

0001133c <__stack_chk_fail@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #106496	; 0x1a000
   11344:	ldr	pc, [ip, #3348]!	; 0xd14

00011348 <realloc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #106496	; 0x1a000
   11350:	ldr	pc, [ip, #3340]!	; 0xd0c

00011354 <textdomain@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3332]!	; 0xd04

00011360 <__fxstatat64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3324]!	; 0xcfc

0001136c <iswprint@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3316]!	; 0xcf4

00011378 <readlink@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3308]!	; 0xcec

00011384 <fwrite@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3300]!	; 0xce4

00011390 <lseek64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3292]!	; 0xcdc

0001139c <__ctype_get_mb_cur_max@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3284]!	; 0xcd4

000113a8 <gettimeofday@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3276]!	; 0xccc

000113b4 <__fpending@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3268]!	; 0xcc4

000113c0 <mbrtowc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3260]!	; 0xcbc

000113cc <error@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3252]!	; 0xcb4

000113d8 <opendir@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3244]!	; 0xcac

000113e4 <open64@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3236]!	; 0xca4

000113f0 <getenv@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3228]!	; 0xc9c

000113fc <malloc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3220]!	; 0xc94

00011408 <__libc_start_main@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3212]!	; 0xc8c

00011414 <__freading@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3204]!	; 0xc84

00011420 <__gmon_start__@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3196]!	; 0xc7c

0001142c <mempcpy@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3188]!	; 0xc74

00011438 <rename@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3180]!	; 0xc6c

00011444 <getopt_long@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3172]!	; 0xc64

00011450 <__ctype_b_loc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3164]!	; 0xc5c

0001145c <getcwd@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3156]!	; 0xc54

00011468 <getpid@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3148]!	; 0xc4c

00011474 <exit@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3140]!	; 0xc44

00011480 <strlen@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3132]!	; 0xc3c

0001148c <__errno_location@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3124]!	; 0xc34

00011498 <__cxa_atexit@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3116]!	; 0xc2c

000114a4 <mkdir@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3108]!	; 0xc24

000114b0 <setvbuf@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3100]!	; 0xc1c

000114bc <getgid@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #3092]!	; 0xc14

000114c8 <memset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #3084]!	; 0xc0c

000114d4 <renameat2@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #3076]!	; 0xc04

000114e0 <__printf_chk@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #3068]!	; 0xbfc

000114ec <fileno@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #3060]!	; 0xbf4

000114f8 <__fprintf_chk@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #3052]!	; 0xbec

00011504 <fclose@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011510 <linkat@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #3036]!	; 0xbdc

0001151c <fseeko64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #3028]!	; 0xbd4

00011528 <fcntl64@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #3020]!	; 0xbcc

00011534 <rpmatch@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011540 <__overflow@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #3004]!	; 0xbbc

0001154c <setlocale@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2996]!	; 0xbb4

00011558 <__explicit_bzero_chk@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2988]!	; 0xbac

00011564 <strrchr@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2980]!	; 0xba4

00011570 <nl_langinfo@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2972]!	; 0xb9c

0001157c <readdir64@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2964]!	; 0xb94

00011588 <fdopendir@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2956]!	; 0xb8c

00011594 <dirfd@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2948]!	; 0xb84

000115a0 <getppid@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2940]!	; 0xb7c

000115ac <fopen64@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2932]!	; 0xb74

000115b8 <renameat@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2924]!	; 0xb6c

000115c4 <bindtextdomain@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2916]!	; 0xb64

000115d0 <fread_unlocked@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2908]!	; 0xb5c

000115dc <symlinkat@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2900]!	; 0xb54

000115e8 <__xstat64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2892]!	; 0xb4c

000115f4 <strncmp@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2884]!	; 0xb44

00011600 <abort@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2876]!	; 0xb3c

0001160c <close@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2868]!	; 0xb34

00011618 <__lxstat64@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2860]!	; 0xb2c

00011624 <closedir@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2852]!	; 0xb24

00011630 <strspn@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2844]!	; 0xb1c

0001163c <__assert_fail@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2836]!	; 0xb14

Disassembly of section .text:

00011648 <.text>:
   11648:	ldr	r3, [pc, #2072]	; 11e68 <__assert_fail@plt+0x82c>
   1164c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11650:	sub	sp, sp, #156	; 0x9c
   11654:	ldr	r3, [r3]
   11658:	mov	r5, r0
   1165c:	ldr	r0, [r1]
   11660:	str	r3, [sp, #148]	; 0x94
   11664:	mov	r7, r1
   11668:	bl	155dc <__assert_fail@plt+0x3fa0>
   1166c:	ldr	r1, [pc, #2040]	; 11e6c <__assert_fail@plt+0x830>
   11670:	mov	r0, #6
   11674:	bl	1154c <setlocale@plt>
   11678:	ldr	r1, [pc, #2032]	; 11e70 <__assert_fail@plt+0x834>
   1167c:	ldr	r0, [pc, #2032]	; 11e74 <__assert_fail@plt+0x838>
   11680:	bl	115c4 <bindtextdomain@plt>
   11684:	ldr	r0, [pc, #2024]	; 11e74 <__assert_fail@plt+0x838>
   11688:	bl	11354 <textdomain@plt>
   1168c:	ldr	r0, [pc, #2020]	; 11e78 <__assert_fail@plt+0x83c>
   11690:	bl	19fa4 <__assert_fail@plt+0x8968>
   11694:	ldr	r6, [pc, #2016]	; 11e7c <__assert_fail@plt+0x840>
   11698:	mov	r3, #0
   1169c:	ldr	r9, [pc, #2012]	; 11e80 <__assert_fail@plt+0x844>
   116a0:	ldr	r8, [pc, #2012]	; 11e84 <__assert_fail@plt+0x848>
   116a4:	mov	sl, r3
   116a8:	mov	r4, r3
   116ac:	mov	fp, #1
   116b0:	str	r3, [sp, #20]
   116b4:	str	r3, [sp, #28]
   116b8:	str	r3, [sp, #32]
   116bc:	str	r3, [sp, #24]
   116c0:	strb	r3, [r6, #2]
   116c4:	strb	r3, [r6, #17]
   116c8:	strb	r3, [r6, #4]
   116cc:	strb	r3, [r6, #3]
   116d0:	strb	r3, [r6]
   116d4:	str	r4, [sp]
   116d8:	mov	r3, r9
   116dc:	mov	r2, r8
   116e0:	mov	r1, r7
   116e4:	mov	r0, r5
   116e8:	bl	11444 <getopt_long@plt>
   116ec:	cmn	r0, #1
   116f0:	beq	11a08 <__assert_fail@plt+0x3cc>
   116f4:	add	r0, r0, #3
   116f8:	cmp	r0, #121	; 0x79
   116fc:	ldrls	pc, [pc, r0, lsl #2]
   11700:	b	11bd4 <__assert_fail@plt+0x598>
   11704:	andeq	r1, r1, r4, asr #19
   11708:	andeq	r1, r1, ip, lsl #23
   1170c:	ldrdeq	r1, [r1], -r4
   11710:	ldrdeq	r1, [r1], -r4
   11714:	ldrdeq	r1, [r1], -r4
   11718:	ldrdeq	r1, [r1], -r4
   1171c:	ldrdeq	r1, [r1], -r4
   11720:	ldrdeq	r1, [r1], -r4
   11724:	ldrdeq	r1, [r1], -r4
   11728:	ldrdeq	r1, [r1], -r4
   1172c:	ldrdeq	r1, [r1], -r4
   11730:	ldrdeq	r1, [r1], -r4
   11734:	ldrdeq	r1, [r1], -r4
   11738:	ldrdeq	r1, [r1], -r4
   1173c:	ldrdeq	r1, [r1], -r4
   11740:	ldrdeq	r1, [r1], -r4
   11744:	ldrdeq	r1, [r1], -r4
   11748:	ldrdeq	r1, [r1], -r4
   1174c:	ldrdeq	r1, [r1], -r4
   11750:	ldrdeq	r1, [r1], -r4
   11754:	ldrdeq	r1, [r1], -r4
   11758:	ldrdeq	r1, [r1], -r4
   1175c:	ldrdeq	r1, [r1], -r4
   11760:	ldrdeq	r1, [r1], -r4
   11764:	ldrdeq	r1, [r1], -r4
   11768:	ldrdeq	r1, [r1], -r4
   1176c:	ldrdeq	r1, [r1], -r4
   11770:	ldrdeq	r1, [r1], -r4
   11774:	ldrdeq	r1, [r1], -r4
   11778:	ldrdeq	r1, [r1], -r4
   1177c:	ldrdeq	r1, [r1], -r4
   11780:	ldrdeq	r1, [r1], -r4
   11784:	ldrdeq	r1, [r1], -r4
   11788:	ldrdeq	r1, [r1], -r4
   1178c:	ldrdeq	r1, [r1], -r4
   11790:	ldrdeq	r1, [r1], -r4
   11794:	ldrdeq	r1, [r1], -r4
   11798:	ldrdeq	r1, [r1], -r4
   1179c:	ldrdeq	r1, [r1], -r4
   117a0:	ldrdeq	r1, [r1], -r4
   117a4:	ldrdeq	r1, [r1], -r4
   117a8:	ldrdeq	r1, [r1], -r4
   117ac:	ldrdeq	r1, [r1], -r4
   117b0:	ldrdeq	r1, [r1], -r4
   117b4:	ldrdeq	r1, [r1], -r4
   117b8:	ldrdeq	r1, [r1], -r4
   117bc:	ldrdeq	r1, [r1], -r4
   117c0:	ldrdeq	r1, [r1], -r4
   117c4:	ldrdeq	r1, [r1], -r4
   117c8:	ldrdeq	r1, [r1], -r4
   117cc:	ldrdeq	r1, [r1], -r4
   117d0:	ldrdeq	r1, [r1], -r4
   117d4:	ldrdeq	r1, [r1], -r4
   117d8:	ldrdeq	r1, [r1], -r4
   117dc:	ldrdeq	r1, [r1], -r4
   117e0:	ldrdeq	r1, [r1], -r4
   117e4:	ldrdeq	r1, [r1], -r4
   117e8:	ldrdeq	r1, [r1], -r4
   117ec:	ldrdeq	r1, [r1], -r4
   117f0:	ldrdeq	r1, [r1], -r4
   117f4:	ldrdeq	r1, [r1], -r4
   117f8:	ldrdeq	r1, [r1], -r4
   117fc:	ldrdeq	r1, [r1], -r4
   11800:	ldrdeq	r1, [r1], -r4
   11804:	ldrdeq	r1, [r1], -r4
   11808:	ldrdeq	r1, [r1], -r4
   1180c:	ldrdeq	r1, [r1], -r4
   11810:	ldrdeq	r1, [r1], -r4
   11814:	ldrdeq	r1, [r1], -r4
   11818:	ldrdeq	r1, [r1], -r4
   1181c:	ldrdeq	r1, [r1], -r4
   11820:	ldrdeq	r1, [r1], -r4
   11824:	ldrdeq	r1, [r1], -r4
   11828:			; <UNDEFINED> instruction: 0x000119bc
   1182c:	ldrdeq	r1, [r1], -r4
   11830:	ldrdeq	r1, [r1], -r4
   11834:	ldrdeq	r1, [r1], -r4
   11838:	ldrdeq	r1, [r1], -r4
   1183c:	ldrdeq	r1, [r1], -r4
   11840:			; <UNDEFINED> instruction: 0x000119b4
   11844:	ldrdeq	r1, [r1], -r4
   11848:	ldrdeq	r1, [r1], -r4
   1184c:	ldrdeq	r1, [r1], -r4
   11850:	andeq	r1, r1, ip, lsr #19
   11854:	ldrdeq	r1, [r1], -r4
   11858:	ldrdeq	r1, [r1], -r4
   1185c:	muleq	r1, r4, r9
   11860:	andeq	r1, r1, r0, lsl #20
   11864:	ldrdeq	r1, [r1], -r4
   11868:	ldrdeq	r1, [r1], -r4
   1186c:	ldrdeq	r1, [r1], -r4
   11870:	ldrdeq	r1, [r1], -r4
   11874:	ldrdeq	r1, [r1], -r4
   11878:	ldrdeq	r1, [r1], -r4
   1187c:	ldrdeq	r1, [r1], -r4
   11880:	ldrdeq	r1, [r1], -r4
   11884:	ldrdeq	r1, [r1], -r4
   11888:	ldrdeq	r1, [r1], -r4
   1188c:	ldrdeq	r1, [r1], -r4
   11890:	ldrdeq	r1, [r1], -r4
   11894:	ldrdeq	r1, [r1], -r4
   11898:	andeq	r1, r1, r0, ror r9
   1189c:	ldrdeq	r1, [r1], -r4
   118a0:			; <UNDEFINED> instruction: 0x000119bc
   118a4:	ldrdeq	r1, [r1], -r4
   118a8:	andeq	r1, r1, r4, ror #18
   118ac:	ldrdeq	r1, [r1], -r4
   118b0:	ldrdeq	r1, [r1], -r4
   118b4:	andeq	r1, r1, r8, asr r9
   118b8:	ldrdeq	r1, [r1], -r4
   118bc:	ldrdeq	r1, [r1], -r4
   118c0:	ldrdeq	r1, [r1], -r4
   118c4:	ldrdeq	r1, [r1], -r4
   118c8:	andeq	r1, r1, ip, asr #18
   118cc:	ldrdeq	r1, [r1], -r4
   118d0:	ldrdeq	r1, [r1], -r4
   118d4:	ldrdeq	r1, [r1], -r4
   118d8:	andeq	r1, r1, r4, asr #18
   118dc:	andeq	r1, r1, ip, lsr r9
   118e0:	strdeq	r1, [r1], -r4
   118e4:	ldrdeq	r1, [r1], -r4
   118e8:	andeq	r1, r1, ip, ror #17
   118ec:	strb	fp, [r6, #17]
   118f0:	b	116d4 <__assert_fail@plt+0x98>
   118f4:	ldr	r3, [sp, #20]
   118f8:	cmp	r3, #0
   118fc:	bne	11e5c <__assert_fail@plt+0x820>
   11900:	ldr	r3, [pc, #1408]	; 11e88 <__assert_fail@plt+0x84c>
   11904:	add	r2, sp, #40	; 0x28
   11908:	mov	r0, #3
   1190c:	ldr	r1, [r3]
   11910:	bl	115e8 <__xstat64@plt>
   11914:	cmp	r0, #0
   11918:	bne	11e1c <__assert_fail@plt+0x7e0>
   1191c:	ldr	r3, [sp, #56]	; 0x38
   11920:	and	r3, r3, #61440	; 0xf000
   11924:	cmp	r3, #16384	; 0x4000
   11928:	bne	11d88 <__assert_fail@plt+0x74c>
   1192c:	ldr	r3, [pc, #1364]	; 11e88 <__assert_fail@plt+0x84c>
   11930:	ldr	r3, [r3]
   11934:	str	r3, [sp, #20]
   11938:	b	116d4 <__assert_fail@plt+0x98>
   1193c:	strb	fp, [r6]
   11940:	b	116d4 <__assert_fail@plt+0x98>
   11944:	strb	fp, [r6, #16]
   11948:	b	116d4 <__assert_fail@plt+0x98>
   1194c:	ldr	r3, [pc, #1336]	; 11e8c <__assert_fail@plt+0x850>
   11950:	strb	r4, [r3]
   11954:	b	116d4 <__assert_fail@plt+0x98>
   11958:	strb	r4, [r6, #3]
   1195c:	strb	fp, [r6, #4]
   11960:	b	116d4 <__assert_fail@plt+0x98>
   11964:	strb	fp, [r6, #3]
   11968:	strb	r4, [r6, #4]
   1196c:	b	116d4 <__assert_fail@plt+0x98>
   11970:	ldr	r3, [pc, #1296]	; 11e88 <__assert_fail@plt+0x84c>
   11974:	mov	r2, #1
   11978:	str	r2, [sp, #24]
   1197c:	ldr	r3, [r3]
   11980:	ldr	r2, [sp, #28]
   11984:	cmp	r3, #0
   11988:	movne	r2, r3
   1198c:	str	r2, [sp, #28]
   11990:	b	116d4 <__assert_fail@plt+0x98>
   11994:	ldr	r3, [pc, #1260]	; 11e88 <__assert_fail@plt+0x84c>
   11998:	ldr	r3, [r3]
   1199c:	str	r3, [sp, #32]
   119a0:	mov	r3, #1
   119a4:	str	r3, [sp, #24]
   119a8:	b	116d4 <__assert_fail@plt+0x98>
   119ac:	strb	r4, [r6, #1]
   119b0:	b	116d4 <__assert_fail@plt+0x98>
   119b4:	strb	fp, [r6, #1]
   119b8:	b	116d4 <__assert_fail@plt+0x98>
   119bc:	strb	fp, [r6, #2]
   119c0:	b	116d4 <__assert_fail@plt+0x98>
   119c4:	ldr	r3, [pc, #1220]	; 11e90 <__assert_fail@plt+0x854>
   119c8:	ldr	r0, [pc, #1220]	; 11e94 <__assert_fail@plt+0x858>
   119cc:	ldr	r1, [pc, #1220]	; 11e98 <__assert_fail@plt+0x85c>
   119d0:	ldr	r2, [pc, #1220]	; 11e9c <__assert_fail@plt+0x860>
   119d4:	mov	r4, #0
   119d8:	ldr	r0, [r0]
   119dc:	ldr	r3, [r3]
   119e0:	str	r1, [sp, #4]
   119e4:	str	r2, [sp]
   119e8:	str	r4, [sp, #8]
   119ec:	ldr	r2, [pc, #1196]	; 11ea0 <__assert_fail@plt+0x864>
   119f0:	ldr	r1, [pc, #1196]	; 11ea4 <__assert_fail@plt+0x868>
   119f4:	bl	1831c <__assert_fail@plt+0x6ce0>
   119f8:	mov	r0, r4
   119fc:	bl	11474 <exit@plt>
   11a00:	mov	sl, #1
   11a04:	b	116d4 <__assert_fail@plt+0x98>
   11a08:	ldr	r3, [pc, #1176]	; 11ea8 <__assert_fail@plt+0x86c>
   11a0c:	ldr	fp, [r3]
   11a10:	sub	r5, r5, fp
   11a14:	cmp	r5, #0
   11a18:	add	r4, r7, fp, lsl #2
   11a1c:	ble	11df8 <__assert_fail@plt+0x7bc>
   11a20:	cmp	sl, #0
   11a24:	ldr	r3, [sp, #20]
   11a28:	bne	11ad0 <__assert_fail@plt+0x494>
   11a2c:	cmp	r3, #0
   11a30:	beq	11bf0 <__assert_fail@plt+0x5b4>
   11a34:	ldr	r3, [sp, #24]
   11a38:	cmp	r3, #0
   11a3c:	ldreq	r2, [sp, #24]
   11a40:	bne	11b6c <__assert_fail@plt+0x530>
   11a44:	ldr	r0, [sp, #32]
   11a48:	str	r2, [r6, #8]
   11a4c:	bl	13248 <__assert_fail@plt+0x1c0c>
   11a50:	ldrb	r2, [r6, #16]
   11a54:	cmp	r2, #0
   11a58:	beq	11a70 <__assert_fail@plt+0x434>
   11a5c:	ldrb	r8, [r6]
   11a60:	cmp	r8, #0
   11a64:	moveq	r2, #5
   11a68:	ldreq	r1, [pc, #1084]	; 11eac <__assert_fail@plt+0x870>
   11a6c:	beq	11d70 <__assert_fail@plt+0x734>
   11a70:	ldr	r3, [sp, #20]
   11a74:	cmp	r3, #0
   11a78:	beq	11bdc <__assert_fail@plt+0x5a0>
   11a7c:	cmp	r5, #1
   11a80:	beq	11af0 <__assert_fail@plt+0x4b4>
   11a84:	ldrb	r3, [r6, #3]
   11a88:	cmp	r3, #0
   11a8c:	beq	11af0 <__assert_fail@plt+0x4b4>
   11a90:	ldrb	r1, [r6]
   11a94:	cmp	r1, #0
   11a98:	bne	11af0 <__assert_fail@plt+0x4b4>
   11a9c:	ldr	r3, [r6, #8]
   11aa0:	cmp	r3, #3
   11aa4:	beq	11af0 <__assert_fail@plt+0x4b4>
   11aa8:	ldr	r3, [pc, #1024]	; 11eb0 <__assert_fail@plt+0x874>
   11aac:	ldr	r2, [pc, #1024]	; 11eb4 <__assert_fail@plt+0x878>
   11ab0:	str	r3, [sp]
   11ab4:	mov	r0, #61	; 0x3d
   11ab8:	ldr	r3, [pc, #1016]	; 11eb8 <__assert_fail@plt+0x87c>
   11abc:	bl	14d30 <__assert_fail@plt+0x36f4>
   11ac0:	cmp	r0, #0
   11ac4:	str	r0, [r6, #12]
   11ac8:	bne	11af0 <__assert_fail@plt+0x4b4>
   11acc:	bl	18668 <__assert_fail@plt+0x702c>
   11ad0:	cmp	r3, #0
   11ad4:	bne	11d68 <__assert_fail@plt+0x72c>
   11ad8:	cmp	r5, #2
   11adc:	bne	11b94 <__assert_fail@plt+0x558>
   11ae0:	mov	r3, #0
   11ae4:	mov	r5, #2
   11ae8:	str	r3, [sp, #20]
   11aec:	b	11a34 <__assert_fail@plt+0x3f8>
   11af0:	sub	r4, r4, #4
   11af4:	ldr	r8, [sp, #20]
   11af8:	add	r5, r4, r5, lsl #2
   11afc:	mov	r6, #1
   11b00:	ldr	r0, [r4, #4]!
   11b04:	bl	14174 <__assert_fail@plt+0x2b38>
   11b08:	add	r2, sp, #40	; 0x28
   11b0c:	mov	r1, r0
   11b10:	mov	r0, r8
   11b14:	bl	14318 <__assert_fail@plt+0x2cdc>
   11b18:	mov	r7, r0
   11b1c:	ldr	r0, [sp, #40]	; 0x28
   11b20:	bl	14214 <__assert_fail@plt+0x2bd8>
   11b24:	mov	r1, r7
   11b28:	ldr	r0, [r4]
   11b2c:	bl	11fd0 <__assert_fail@plt+0x994>
   11b30:	and	r6, r6, r0
   11b34:	mov	r0, r7
   11b38:	bl	112f4 <free@plt>
   11b3c:	cmp	r4, r5
   11b40:	uxtb	r6, r6
   11b44:	bne	11b00 <__assert_fail@plt+0x4c4>
   11b48:	ldr	r3, [pc, #792]	; 11e68 <__assert_fail@plt+0x82c>
   11b4c:	ldr	r2, [sp, #148]	; 0x94
   11b50:	eor	r0, r6, #1
   11b54:	ldr	r3, [r3]
   11b58:	uxtb	r0, r0
   11b5c:	cmp	r2, r3
   11b60:	bne	11df4 <__assert_fail@plt+0x7b8>
   11b64:	add	sp, sp, #156	; 0x9c
   11b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b6c:	mov	r2, #5
   11b70:	ldr	r1, [pc, #836]	; 11ebc <__assert_fail@plt+0x880>
   11b74:	mov	r0, #0
   11b78:	bl	11330 <dcgettext@plt>
   11b7c:	ldr	r1, [sp, #28]
   11b80:	bl	13790 <__assert_fail@plt+0x2154>
   11b84:	mov	r2, r0
   11b88:	b	11a44 <__assert_fail@plt+0x408>
   11b8c:	mov	r0, #0
   11b90:	bl	12818 <__assert_fail@plt+0x11dc>
   11b94:	cmp	r5, #1
   11b98:	mov	r2, #5
   11b9c:	beq	11dbc <__assert_fail@plt+0x780>
   11ba0:	ldr	r6, [sp, #20]
   11ba4:	ldr	r1, [pc, #788]	; 11ec0 <__assert_fail@plt+0x884>
   11ba8:	mov	r0, r6
   11bac:	bl	11330 <dcgettext@plt>
   11bb0:	ldr	r1, [r4, #8]
   11bb4:	mov	r5, r0
   11bb8:	mov	r0, #4
   11bbc:	bl	17598 <__assert_fail@plt+0x5f5c>
   11bc0:	mov	r2, r5
   11bc4:	mov	r1, r6
   11bc8:	mov	r3, r0
   11bcc:	mov	r0, r6
   11bd0:	bl	113cc <error@plt>
   11bd4:	mov	r0, #1
   11bd8:	bl	12818 <__assert_fail@plt+0x11dc>
   11bdc:	ldr	r1, [r4, #4]
   11be0:	ldr	r0, [r7, fp, lsl #2]
   11be4:	bl	11fd0 <__assert_fail@plt+0x994>
   11be8:	mov	r6, r0
   11bec:	b	11b48 <__assert_fail@plt+0x50c>
   11bf0:	cmp	r5, #1
   11bf4:	ldreq	r3, [pc, #712]	; 11ec4 <__assert_fail@plt+0x888>
   11bf8:	streq	r3, [sp, #20]
   11bfc:	beq	11a34 <__assert_fail@plt+0x3f8>
   11c00:	sub	r3, r5, #-1073741823	; 0xc0000001
   11c04:	str	r3, [sp, #36]	; 0x24
   11c08:	ldr	r9, [r4, r3, lsl #2]
   11c0c:	mov	r0, r9
   11c10:	bl	14174 <__assert_fail@plt+0x2b38>
   11c14:	mov	r8, r0
   11c18:	bl	11480 <strlen@plt>
   11c1c:	ldr	r2, [pc, #616]	; 11e8c <__assert_fail@plt+0x850>
   11c20:	mov	r1, r9
   11c24:	ldrb	r2, [r2]
   11c28:	cmp	r0, #0
   11c2c:	addne	r8, r8, r0
   11c30:	moveq	sl, #1
   11c34:	ldrbne	sl, [r8, #-1]
   11c38:	mov	r0, #3
   11c3c:	subne	sl, sl, #47	; 0x2f
   11c40:	clzne	sl, sl
   11c44:	lsrne	sl, sl, #5
   11c48:	cmp	r2, #0
   11c4c:	str	sl, [sp, #20]
   11c50:	add	r2, sp, #40	; 0x28
   11c54:	beq	11d00 <__assert_fail@plt+0x6c4>
   11c58:	bl	115e8 <__xstat64@plt>
   11c5c:	cmp	r0, #0
   11c60:	beq	11cc8 <__assert_fail@plt+0x68c>
   11c64:	bl	1148c <__errno_location@plt>
   11c68:	ldr	r8, [r0]
   11c6c:	cmp	r8, #0
   11c70:	beq	11cc8 <__assert_fail@plt+0x68c>
   11c74:	cmp	r8, #2
   11c78:	beq	11d48 <__assert_fail@plt+0x70c>
   11c7c:	sub	r2, r8, #20
   11c80:	bic	r2, r2, #16
   11c84:	cmp	r2, #0
   11c88:	cmpne	r8, #40	; 0x28
   11c8c:	moveq	r0, #1
   11c90:	movne	r0, #0
   11c94:	beq	11d48 <__assert_fail@plt+0x70c>
   11c98:	ldr	r1, [pc, #552]	; 11ec8 <__assert_fail@plt+0x88c>
   11c9c:	mov	r2, #5
   11ca0:	bl	11330 <dcgettext@plt>
   11ca4:	mov	r1, r9
   11ca8:	mov	r4, r0
   11cac:	mov	r0, #4
   11cb0:	bl	17598 <__assert_fail@plt+0x5f5c>
   11cb4:	mov	r2, r4
   11cb8:	mov	r1, r8
   11cbc:	mov	r3, r0
   11cc0:	mov	r0, #1
   11cc4:	bl	113cc <error@plt>
   11cc8:	ldr	r2, [sp, #56]	; 0x38
   11ccc:	ldr	r3, [sp, #20]
   11cd0:	and	r2, r2, #61440	; 0xf000
   11cd4:	sub	r1, r2, #16384	; 0x4000
   11cd8:	clz	r1, r1
   11cdc:	lsr	r1, r1, #5
   11ce0:	cmp	r1, r3
   11ce4:	bcc	11d60 <__assert_fail@plt+0x724>
   11ce8:	cmp	r2, #16384	; 0x4000
   11cec:	bne	11d08 <__assert_fail@plt+0x6cc>
   11cf0:	sub	r5, r5, #1
   11cf4:	ldr	r3, [r4, r5, lsl #2]
   11cf8:	str	r3, [sp, #20]
   11cfc:	b	11a34 <__assert_fail@plt+0x3f8>
   11d00:	bl	11618 <__lxstat64@plt>
   11d04:	b	11c5c <__assert_fail@plt+0x620>
   11d08:	cmp	r5, #2
   11d0c:	beq	11ae0 <__assert_fail@plt+0x4a4>
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #432]	; 11ecc <__assert_fail@plt+0x890>
   11d18:	mov	r0, #0
   11d1c:	bl	11330 <dcgettext@plt>
   11d20:	ldr	r3, [sp, #36]	; 0x24
   11d24:	ldr	r1, [r4, r3, lsl #2]
   11d28:	mov	r5, r0
   11d2c:	mov	r0, #4
   11d30:	bl	17598 <__assert_fail@plt+0x5f5c>
   11d34:	mov	r2, r5
   11d38:	mov	r1, #0
   11d3c:	mov	r3, r0
   11d40:	mov	r0, #1
   11d44:	bl	113cc <error@plt>
   11d48:	cmp	sl, #0
   11d4c:	beq	11d08 <__assert_fail@plt+0x6cc>
   11d50:	mov	r2, #5
   11d54:	ldr	r1, [pc, #368]	; 11ecc <__assert_fail@plt+0x890>
   11d58:	mov	r0, #0
   11d5c:	b	11ca0 <__assert_fail@plt+0x664>
   11d60:	mov	r8, #0
   11d64:	b	11d50 <__assert_fail@plt+0x714>
   11d68:	ldr	r1, [pc, #352]	; 11ed0 <__assert_fail@plt+0x894>
   11d6c:	mov	r2, #5
   11d70:	mov	r0, #0
   11d74:	bl	11330 <dcgettext@plt>
   11d78:	mov	r1, #0
   11d7c:	mov	r2, r0
   11d80:	mov	r0, #1
   11d84:	bl	113cc <error@plt>
   11d88:	mov	r2, #5
   11d8c:	ldr	r1, [pc, #312]	; 11ecc <__assert_fail@plt+0x890>
   11d90:	bl	11330 <dcgettext@plt>
   11d94:	ldr	r3, [pc, #236]	; 11e88 <__assert_fail@plt+0x84c>
   11d98:	ldr	r1, [r3]
   11d9c:	mov	r4, r0
   11da0:	mov	r0, #4
   11da4:	bl	17598 <__assert_fail@plt+0x5f5c>
   11da8:	mov	r2, r4
   11dac:	ldr	r1, [sp, #20]
   11db0:	mov	r3, r0
   11db4:	mov	r0, #1
   11db8:	bl	113cc <error@plt>
   11dbc:	ldr	r5, [sp, #20]
   11dc0:	ldr	r1, [pc, #268]	; 11ed4 <__assert_fail@plt+0x898>
   11dc4:	mov	r0, r5
   11dc8:	bl	11330 <dcgettext@plt>
   11dcc:	ldr	r1, [r7, fp, lsl #2]
   11dd0:	mov	r4, r0
   11dd4:	mov	r0, #4
   11dd8:	bl	17598 <__assert_fail@plt+0x5f5c>
   11ddc:	mov	r2, r4
   11de0:	mov	r1, r5
   11de4:	mov	r3, r0
   11de8:	mov	r0, r5
   11dec:	bl	113cc <error@plt>
   11df0:	b	11bd4 <__assert_fail@plt+0x598>
   11df4:	bl	1133c <__stack_chk_fail@plt>
   11df8:	mov	r2, #5
   11dfc:	ldr	r1, [pc, #212]	; 11ed8 <__assert_fail@plt+0x89c>
   11e00:	mov	r0, #0
   11e04:	bl	11330 <dcgettext@plt>
   11e08:	mov	r1, #0
   11e0c:	mov	r2, r0
   11e10:	mov	r0, r1
   11e14:	bl	113cc <error@plt>
   11e18:	b	11bd4 <__assert_fail@plt+0x598>
   11e1c:	bl	1148c <__errno_location@plt>
   11e20:	mov	r2, #5
   11e24:	ldr	r1, [pc, #156]	; 11ec8 <__assert_fail@plt+0x88c>
   11e28:	ldr	r4, [r0]
   11e2c:	ldr	r0, [sp, #20]
   11e30:	bl	11330 <dcgettext@plt>
   11e34:	ldr	r3, [pc, #76]	; 11e88 <__assert_fail@plt+0x84c>
   11e38:	ldr	r1, [r3]
   11e3c:	mov	r5, r0
   11e40:	mov	r0, #4
   11e44:	bl	17598 <__assert_fail@plt+0x5f5c>
   11e48:	mov	r2, r5
   11e4c:	mov	r1, r4
   11e50:	mov	r3, r0
   11e54:	mov	r0, #1
   11e58:	bl	113cc <error@plt>
   11e5c:	mov	r2, #5
   11e60:	ldr	r1, [pc, #116]	; 11edc <__assert_fail@plt+0x8a0>
   11e64:	b	11d70 <__assert_fail@plt+0x734>
   11e68:	andeq	fp, r2, r8, lsl #30
   11e6c:	andeq	sl, r1, r4, lsl #24
   11e70:	andeq	sl, r1, ip, ror #28
   11e74:			; <UNDEFINED> instruction: 0x0001adbc
   11e78:	andeq	r3, r1, r4, lsl #28
   11e7c:	andeq	ip, r2, r0, ror #3
   11e80:	andeq	sl, r1, r0
   11e84:	andeq	sl, r1, r4, ror #29
   11e88:	ldrdeq	ip, [r2], -r8
   11e8c:	andeq	ip, r2, r8, ror #2
   11e90:	andeq	ip, r2, ip, ror #2
   11e94:	ldrdeq	ip, [r2], -r4
   11e98:	andeq	sl, r1, r8, asr #29
   11e9c:	ldrdeq	sl, [r1], -r8
   11ea0:			; <UNDEFINED> instruction: 0x0001adb8
   11ea4:	andeq	sl, r1, ip, lsr #5
   11ea8:	andeq	ip, r2, r0, asr #3
   11eac:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11eb0:	andeq	r5, r1, r0, asr #11
   11eb4:	ldrdeq	r5, [r1], -ip
   11eb8:	andeq	r5, r1, ip, lsr #10
   11ebc:	andeq	sl, r1, ip, lsl #31
   11ec0:	andeq	sl, r1, r8, ror pc
   11ec4:	andeq	sl, r1, r8, ror #28
   11ec8:	andeq	sl, r1, r0, lsl #2
   11ecc:	andeq	sl, r1, r8, lsr #29
   11ed0:	andeq	sl, r1, r0, lsl pc
   11ed4:	andeq	sl, r1, ip, asr #30
   11ed8:	strdeq	sl, [r1], -r8
   11edc:	andeq	sl, r1, r0, lsl #29
   11ee0:	mov	fp, #0
   11ee4:	mov	lr, #0
   11ee8:	pop	{r1}		; (ldr r1, [sp], #4)
   11eec:	mov	r2, sp
   11ef0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ef4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ef8:	ldr	ip, [pc, #16]	; 11f10 <__assert_fail@plt+0x8d4>
   11efc:	push	{ip}		; (str ip, [sp, #-4]!)
   11f00:	ldr	r0, [pc, #12]	; 11f14 <__assert_fail@plt+0x8d8>
   11f04:	ldr	r3, [pc, #12]	; 11f18 <__assert_fail@plt+0x8dc>
   11f08:	bl	11408 <__libc_start_main@plt>
   11f0c:	bl	11600 <abort@plt>
   11f10:	andeq	r9, r1, r0, lsr #31
   11f14:	andeq	r1, r1, r8, asr #12
   11f18:	andeq	r9, r1, r0, asr #30
   11f1c:	ldr	r3, [pc, #20]	; 11f38 <__assert_fail@plt+0x8fc>
   11f20:	ldr	r2, [pc, #20]	; 11f3c <__assert_fail@plt+0x900>
   11f24:	add	r3, pc, r3
   11f28:	ldr	r2, [r3, r2]
   11f2c:	cmp	r2, #0
   11f30:	bxeq	lr
   11f34:	b	11420 <__gmon_start__@plt>
   11f38:	ldrdeq	sl, [r1], -r4
   11f3c:	andeq	r0, r0, ip, asr r1
   11f40:	ldr	r0, [pc, #24]	; 11f60 <__assert_fail@plt+0x924>
   11f44:	ldr	r3, [pc, #24]	; 11f64 <__assert_fail@plt+0x928>
   11f48:	cmp	r3, r0
   11f4c:	bxeq	lr
   11f50:	ldr	r3, [pc, #16]	; 11f68 <__assert_fail@plt+0x92c>
   11f54:	cmp	r3, #0
   11f58:	bxeq	lr
   11f5c:	bx	r3
   11f60:			; <UNDEFINED> instruction: 0x0002c1b8
   11f64:			; <UNDEFINED> instruction: 0x0002c1b8
   11f68:	andeq	r0, r0, r0
   11f6c:	ldr	r0, [pc, #36]	; 11f98 <__assert_fail@plt+0x95c>
   11f70:	ldr	r1, [pc, #36]	; 11f9c <__assert_fail@plt+0x960>
   11f74:	sub	r1, r1, r0
   11f78:	asr	r1, r1, #2
   11f7c:	add	r1, r1, r1, lsr #31
   11f80:	asrs	r1, r1, #1
   11f84:	bxeq	lr
   11f88:	ldr	r3, [pc, #16]	; 11fa0 <__assert_fail@plt+0x964>
   11f8c:	cmp	r3, #0
   11f90:	bxeq	lr
   11f94:	bx	r3
   11f98:			; <UNDEFINED> instruction: 0x0002c1b8
   11f9c:			; <UNDEFINED> instruction: 0x0002c1b8
   11fa0:	andeq	r0, r0, r0
   11fa4:	push	{r4, lr}
   11fa8:	ldr	r4, [pc, #24]	; 11fc8 <__assert_fail@plt+0x98c>
   11fac:	ldrb	r3, [r4]
   11fb0:	cmp	r3, #0
   11fb4:	popne	{r4, pc}
   11fb8:	bl	11f40 <__assert_fail@plt+0x904>
   11fbc:	mov	r3, #1
   11fc0:	strb	r3, [r4]
   11fc4:	pop	{r4, pc}
   11fc8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11fcc:	b	11f6c <__assert_fail@plt+0x930>
   11fd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fd4:	sub	sp, sp, #244	; 0xf4
   11fd8:	ldr	r4, [pc, #2028]	; 127cc <__assert_fail@plt+0x1190>
   11fdc:	ldr	r7, [pc, #2028]	; 127d0 <__assert_fail@plt+0x1194>
   11fe0:	mov	r6, r0
   11fe4:	ldrb	r8, [r4]
   11fe8:	ldr	r3, [r7]
   11fec:	mov	r5, r1
   11ff0:	cmp	r8, #0
   11ff4:	str	r3, [sp, #236]	; 0xec
   11ff8:	bne	12038 <__assert_fail@plt+0x9fc>
   11ffc:	ldrb	r3, [r4, #1]
   12000:	mov	r1, r0
   12004:	add	r2, sp, #24
   12008:	cmp	r3, #0
   1200c:	mov	r0, #3
   12010:	beq	12264 <__assert_fail@plt+0xc28>
   12014:	bl	115e8 <__xstat64@plt>
   12018:	adds	r9, r0, #0
   1201c:	movne	r9, #1
   12020:	cmp	r9, #0
   12024:	bne	12278 <__assert_fail@plt+0xc3c>
   12028:	ldr	r3, [sp, #40]	; 0x28
   1202c:	and	r3, r3, #61440	; 0xf000
   12030:	cmp	r3, #16384	; 0x4000
   12034:	beq	1245c <__assert_fail@plt+0xe20>
   12038:	mov	fp, #0
   1203c:	ldrb	sl, [r4, #3]
   12040:	cmp	sl, #0
   12044:	bne	12054 <__assert_fail@plt+0xa18>
   12048:	ldrb	r2, [r4, #4]
   1204c:	cmp	r2, #0
   12050:	beq	12254 <__assert_fail@plt+0xc18>
   12054:	add	r2, sp, #128	; 0x80
   12058:	mov	r1, r5
   1205c:	mov	r0, #3
   12060:	bl	11618 <__lxstat64@plt>
   12064:	subs	r9, r0, #0
   12068:	beq	121a4 <__assert_fail@plt+0xb68>
   1206c:	bl	1148c <__errno_location@plt>
   12070:	ldr	r3, [r0]
   12074:	cmp	r3, #2
   12078:	str	r3, [sp, #12]
   1207c:	bne	125b4 <__assert_fail@plt+0xf78>
   12080:	cmp	sl, #0
   12084:	beq	12448 <__assert_fail@plt+0xe0c>
   12088:	mov	r8, #0
   1208c:	mov	r9, r8
   12090:	ldrb	r3, [r4, #16]
   12094:	cmp	r3, #0
   12098:	streq	r3, [sp, #12]
   1209c:	bne	1239c <__assert_fail@plt+0xd60>
   120a0:	ldrb	r2, [r4]
   120a4:	ldrb	r3, [r4, #3]
   120a8:	cmp	r2, #0
   120ac:	orr	r3, r8, r3
   120b0:	bne	12400 <__assert_fail@plt+0xdc4>
   120b4:	ldrb	r1, [r4, #1]
   120b8:	mvn	r2, #99	; 0x63
   120bc:	str	r3, [sp, #4]
   120c0:	cmp	r1, #0
   120c4:	movne	r3, #1024	; 0x400
   120c8:	moveq	r3, #0
   120cc:	str	r3, [sp]
   120d0:	mov	r0, r2
   120d4:	mov	r3, r5
   120d8:	mov	r1, r6
   120dc:	bl	12c70 <__assert_fail@plt+0x1634>
   120e0:	mvn	r8, r0
   120e4:	lsr	r8, r8, #31
   120e8:	cmp	r8, #0
   120ec:	ldrb	r3, [r4]
   120f0:	beq	122b8 <__assert_fail@plt+0xc7c>
   120f4:	cmp	r3, #0
   120f8:	beq	12654 <__assert_fail@plt+0x1018>
   120fc:	ldrb	r3, [r4, #17]
   12100:	cmp	r3, #0
   12104:	beq	12178 <__assert_fail@plt+0xb3c>
   12108:	cmp	r9, #0
   1210c:	beq	1212c <__assert_fail@plt+0xaf0>
   12110:	mov	r1, r9
   12114:	mov	r0, #4
   12118:	bl	17598 <__assert_fail@plt+0x5f5c>
   1211c:	ldr	r1, [pc, #1712]	; 127d4 <__assert_fail@plt+0x1198>
   12120:	mov	r2, r0
   12124:	mov	r0, #1
   12128:	bl	114e0 <__printf_chk@plt>
   1212c:	mov	r2, r5
   12130:	mov	r1, #4
   12134:	mov	r0, #0
   12138:	bl	174e4 <__assert_fail@plt+0x5ea8>
   1213c:	ldrb	r3, [r4]
   12140:	mov	r2, r6
   12144:	mov	r1, #4
   12148:	cmp	r3, #0
   1214c:	movne	r4, #45	; 0x2d
   12150:	moveq	r4, #61	; 0x3d
   12154:	mov	r5, r0
   12158:	mov	r0, #1
   1215c:	bl	174e4 <__assert_fail@plt+0x5ea8>
   12160:	mov	r3, r4
   12164:	mov	r2, r5
   12168:	ldr	r1, [pc, #1640]	; 127d8 <__assert_fail@plt+0x119c>
   1216c:	str	r0, [sp]
   12170:	mov	r0, #1
   12174:	bl	114e0 <__printf_chk@plt>
   12178:	mov	r0, r9
   1217c:	bl	112f4 <free@plt>
   12180:	ldr	r0, [sp, #12]
   12184:	bl	112f4 <free@plt>
   12188:	ldr	r2, [sp, #236]	; 0xec
   1218c:	ldr	r3, [r7]
   12190:	mov	r0, r8
   12194:	cmp	r2, r3
   12198:	bne	127c8 <__assert_fail@plt+0x118c>
   1219c:	add	sp, sp, #244	; 0xf4
   121a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121a4:	ldr	r0, [r4, #12]
   121a8:	cmp	r0, #0
   121ac:	beq	121c8 <__assert_fail@plt+0xb8c>
   121b0:	add	r2, sp, #128	; 0x80
   121b4:	mov	r1, r5
   121b8:	bl	142b4 <__assert_fail@plt+0x2c78>
   121bc:	cmp	r0, #0
   121c0:	bne	1271c <__assert_fail@plt+0x10e0>
   121c4:	ldrb	sl, [r4, #3]
   121c8:	cmp	sl, #0
   121cc:	beq	124a8 <__assert_fail@plt+0xe6c>
   121d0:	ldr	r3, [r4, #8]
   121d4:	cmp	r3, #0
   121d8:	ldrb	r3, [r4]
   121dc:	bne	12668 <__assert_fail@plt+0x102c>
   121e0:	cmp	r3, #0
   121e4:	beq	124c0 <__assert_fail@plt+0xe84>
   121e8:	add	r2, sp, #24
   121ec:	mov	r1, r6
   121f0:	mov	r0, #3
   121f4:	bl	115e8 <__xstat64@plt>
   121f8:	cmp	r0, #0
   121fc:	beq	124c0 <__assert_fail@plt+0xe84>
   12200:	ldr	r3, [sp, #144]	; 0x90
   12204:	and	r3, r3, #61440	; 0xf000
   12208:	cmp	r3, #16384	; 0x4000
   1220c:	beq	126c8 <__assert_fail@plt+0x108c>
   12210:	ldrb	r8, [r4, #4]
   12214:	cmp	r8, #0
   12218:	bne	125f0 <__assert_fail@plt+0xfb4>
   1221c:	ldr	r1, [r4, #8]
   12220:	cmp	r1, #0
   12224:	beq	12088 <__assert_fail@plt+0xa4c>
   12228:	mov	r0, r5
   1222c:	bl	13758 <__assert_fail@plt+0x211c>
   12230:	mov	r1, r0
   12234:	mov	r9, r0
   12238:	mov	r0, r5
   1223c:	bl	11438 <rename@plt>
   12240:	cmp	r0, #0
   12244:	bne	12774 <__assert_fail@plt+0x1138>
   12248:	adds	r8, r9, #0
   1224c:	movne	r8, #1
   12250:	b	12090 <__assert_fail@plt+0xa54>
   12254:	ldr	r2, [r4, #8]
   12258:	cmp	r2, #0
   1225c:	beq	12088 <__assert_fail@plt+0xa4c>
   12260:	b	12054 <__assert_fail@plt+0xa18>
   12264:	bl	11618 <__lxstat64@plt>
   12268:	adds	r9, r0, #0
   1226c:	movne	r9, #1
   12270:	cmp	r9, #0
   12274:	beq	12028 <__assert_fail@plt+0x9ec>
   12278:	bl	1148c <__errno_location@plt>
   1227c:	mov	r2, #5
   12280:	ldr	r1, [pc, #1364]	; 127dc <__assert_fail@plt+0x11a0>
   12284:	ldr	r4, [r0]
   12288:	mov	r0, #0
   1228c:	bl	11330 <dcgettext@plt>
   12290:	mov	r1, r6
   12294:	mov	r5, r0
   12298:	mov	r0, #4
   1229c:	bl	17598 <__assert_fail@plt+0x5f5c>
   122a0:	mov	r2, r5
   122a4:	mov	r1, r4
   122a8:	mov	r3, r0
   122ac:	mov	r0, #0
   122b0:	bl	113cc <error@plt>
   122b4:	b	12188 <__assert_fail@plt+0xb4c>
   122b8:	str	r3, [sp, #16]
   122bc:	bl	1148c <__errno_location@plt>
   122c0:	ldr	r3, [sp, #16]
   122c4:	cmp	r3, #0
   122c8:	mov	sl, r0
   122cc:	ldr	r4, [r0]
   122d0:	bne	1241c <__assert_fail@plt+0xde0>
   122d4:	cmp	r4, #31
   122d8:	beq	12684 <__assert_fail@plt+0x1048>
   122dc:	cmp	r4, #17
   122e0:	cmpne	r4, #122	; 0x7a
   122e4:	beq	122f4 <__assert_fail@plt+0xcb8>
   122e8:	bic	r3, r4, #2
   122ec:	cmp	r3, #28
   122f0:	bne	1268c <__assert_fail@plt+0x1050>
   122f4:	mov	r2, #5
   122f8:	ldr	r1, [pc, #1248]	; 127e0 <__assert_fail@plt+0x11a4>
   122fc:	mov	r0, #0
   12300:	bl	11330 <dcgettext@plt>
   12304:	mov	fp, r0
   12308:	mov	r2, r5
   1230c:	mov	r1, #4
   12310:	mov	r0, #0
   12314:	bl	174e4 <__assert_fail@plt+0x5ea8>
   12318:	mov	r2, r6
   1231c:	mov	r1, #4
   12320:	str	r0, [sp, #16]
   12324:	mov	r0, #1
   12328:	bl	174e4 <__assert_fail@plt+0x5ea8>
   1232c:	ldr	r3, [sp, #16]
   12330:	mov	r2, fp
   12334:	mov	r1, r4
   12338:	str	r0, [sp]
   1233c:	mov	r0, #0
   12340:	bl	113cc <error@plt>
   12344:	cmp	r9, #0
   12348:	beq	12178 <__assert_fail@plt+0xb3c>
   1234c:	mov	r1, r5
   12350:	mov	r0, r9
   12354:	bl	11438 <rename@plt>
   12358:	cmp	r0, #0
   1235c:	beq	12178 <__assert_fail@plt+0xb3c>
   12360:	mov	r2, #5
   12364:	ldr	r1, [pc, #1144]	; 127e4 <__assert_fail@plt+0x11a8>
   12368:	mov	r0, #0
   1236c:	ldr	r4, [sl]
   12370:	bl	11330 <dcgettext@plt>
   12374:	mov	r1, r5
   12378:	mov	r6, r0
   1237c:	mov	r0, #4
   12380:	bl	17598 <__assert_fail@plt+0x5f5c>
   12384:	mov	r2, r6
   12388:	mov	r1, r4
   1238c:	mov	r3, r0
   12390:	mov	r0, #0
   12394:	bl	113cc <error@plt>
   12398:	b	12178 <__assert_fail@plt+0xb3c>
   1239c:	mov	r0, r5
   123a0:	bl	140a0 <__assert_fail@plt+0x2a64>
   123a4:	mov	r1, #2
   123a8:	str	r0, [sp, #20]
   123ac:	bl	137e0 <__assert_fail@plt+0x21a4>
   123b0:	mov	r1, #2
   123b4:	str	r0, [sp, #16]
   123b8:	mov	r0, r6
   123bc:	bl	137e0 <__assert_fail@plt+0x21a4>
   123c0:	ldr	r3, [sp, #16]
   123c4:	cmp	r3, #0
   123c8:	cmpne	r0, #0
   123cc:	mov	sl, r0
   123d0:	bne	12560 <__assert_fail@plt+0xf24>
   123d4:	ldr	r0, [sp, #20]
   123d8:	bl	112f4 <free@plt>
   123dc:	ldr	r0, [sp, #16]
   123e0:	bl	112f4 <free@plt>
   123e4:	mov	r0, sl
   123e8:	bl	112f4 <free@plt>
   123ec:	mov	r0, r6
   123f0:	bl	1864c <__assert_fail@plt+0x7010>
   123f4:	mov	r6, r0
   123f8:	str	r0, [sp, #12]
   123fc:	b	120a0 <__assert_fail@plt+0xa64>
   12400:	mov	r2, r5
   12404:	mvn	r1, #99	; 0x63
   12408:	mov	r0, r6
   1240c:	bl	12da8 <__assert_fail@plt+0x176c>
   12410:	mvn	r8, r0
   12414:	lsr	r8, r8, #31
   12418:	b	120e8 <__assert_fail@plt+0xaac>
   1241c:	cmp	r4, #36	; 0x24
   12420:	mov	r2, #5
   12424:	beq	12434 <__assert_fail@plt+0xdf8>
   12428:	ldrb	r3, [r6]
   1242c:	cmp	r3, #0
   12430:	bne	12708 <__assert_fail@plt+0x10cc>
   12434:	ldr	r1, [pc, #940]	; 127e8 <__assert_fail@plt+0x11ac>
   12438:	mov	r0, #0
   1243c:	bl	11330 <dcgettext@plt>
   12440:	mov	fp, r0
   12444:	b	12308 <__assert_fail@plt+0xccc>
   12448:	cmp	r8, #0
   1244c:	beq	12674 <__assert_fail@plt+0x1038>
   12450:	cmp	r9, #0
   12454:	beq	12200 <__assert_fail@plt+0xbc4>
   12458:	b	12088 <__assert_fail@plt+0xa4c>
   1245c:	ldrb	fp, [r4, #2]
   12460:	cmp	fp, #0
   12464:	bne	1203c <__assert_fail@plt+0xa00>
   12468:	mov	r2, #5
   1246c:	ldr	r1, [pc, #888]	; 127ec <__assert_fail@plt+0x11b0>
   12470:	mov	r0, r9
   12474:	bl	11330 <dcgettext@plt>
   12478:	mov	r2, r6
   1247c:	mov	r1, #3
   12480:	mov	r8, r9
   12484:	mov	r4, r0
   12488:	mov	r0, r9
   1248c:	bl	17674 <__assert_fail@plt+0x6038>
   12490:	mov	r2, r4
   12494:	mov	r1, r9
   12498:	mov	r3, r0
   1249c:	mov	r0, r9
   124a0:	bl	113cc <error@plt>
   124a4:	b	12188 <__assert_fail@plt+0xb4c>
   124a8:	ldrb	r3, [r4]
   124ac:	cmp	r3, #0
   124b0:	bne	12200 <__assert_fail@plt+0xbc4>
   124b4:	ldr	r3, [r4, #8]
   124b8:	cmp	r3, #0
   124bc:	beq	12200 <__assert_fail@plt+0xbc4>
   124c0:	ldrd	r0, [sp, #120]	; 0x78
   124c4:	ldrd	r2, [sp, #224]	; 0xe0
   124c8:	cmp	r1, r3
   124cc:	cmpeq	r0, r2
   124d0:	bne	12200 <__assert_fail@plt+0xbc4>
   124d4:	ldrd	r0, [sp, #24]
   124d8:	ldrd	r2, [sp, #128]	; 0x80
   124dc:	cmp	r1, r3
   124e0:	cmpeq	r0, r2
   124e4:	bne	12200 <__assert_fail@plt+0xbc4>
   124e8:	ldr	r3, [sp, #44]	; 0x2c
   124ec:	cmp	r3, #1
   124f0:	beq	12508 <__assert_fail@plt+0xecc>
   124f4:	mov	r1, r5
   124f8:	mov	r0, r6
   124fc:	bl	17be0 <__assert_fail@plt+0x65a4>
   12500:	cmp	r0, #0
   12504:	beq	12200 <__assert_fail@plt+0xbc4>
   12508:	mov	r2, #5
   1250c:	ldr	r1, [pc, #732]	; 127f0 <__assert_fail@plt+0x11b4>
   12510:	mov	r0, #0
   12514:	bl	11330 <dcgettext@plt>
   12518:	mov	r2, r6
   1251c:	mov	r1, #4
   12520:	mov	r4, r0
   12524:	mov	r0, #0
   12528:	bl	174e4 <__assert_fail@plt+0x5ea8>
   1252c:	mov	r2, r5
   12530:	mov	r1, #4
   12534:	mov	r6, r0
   12538:	mov	r0, #1
   1253c:	bl	174e4 <__assert_fail@plt+0x5ea8>
   12540:	mov	r1, #0
   12544:	mov	r3, r6
   12548:	mov	r2, r4
   1254c:	mov	r8, r1
   12550:	str	r0, [sp]
   12554:	mov	r0, r1
   12558:	bl	113cc <error@plt>
   1255c:	b	12188 <__assert_fail@plt+0xb4c>
   12560:	mov	r0, #4096	; 0x1000
   12564:	bl	18420 <__assert_fail@plt+0x6de4>
   12568:	mov	r3, #4096	; 0x1000
   1256c:	ldr	r1, [sp, #16]
   12570:	mov	r2, r0
   12574:	str	r0, [sp, #12]
   12578:	mov	r0, sl
   1257c:	bl	12f64 <__assert_fail@plt+0x1928>
   12580:	cmp	r0, #0
   12584:	beq	126a4 <__assert_fail@plt+0x1068>
   12588:	ldr	r0, [sp, #20]
   1258c:	bl	112f4 <free@plt>
   12590:	ldr	r0, [sp, #16]
   12594:	bl	112f4 <free@plt>
   12598:	mov	r0, sl
   1259c:	bl	112f4 <free@plt>
   125a0:	ldr	r3, [sp, #12]
   125a4:	cmp	r3, #0
   125a8:	ldrne	r6, [sp, #12]
   125ac:	bne	120a0 <__assert_fail@plt+0xa64>
   125b0:	b	123ec <__assert_fail@plt+0xdb0>
   125b4:	mov	r2, #5
   125b8:	ldr	r1, [pc, #540]	; 127dc <__assert_fail@plt+0x11a0>
   125bc:	mov	r0, #0
   125c0:	bl	11330 <dcgettext@plt>
   125c4:	mov	r1, r5
   125c8:	mov	r8, #0
   125cc:	mov	r4, r0
   125d0:	mov	r0, #4
   125d4:	bl	17598 <__assert_fail@plt+0x5f5c>
   125d8:	mov	r2, r4
   125dc:	ldr	r1, [sp, #12]
   125e0:	mov	r3, r0
   125e4:	mov	r0, #0
   125e8:	bl	113cc <error@plt>
   125ec:	b	12188 <__assert_fail@plt+0xb4c>
   125f0:	ldr	r3, [pc, #508]	; 127f4 <__assert_fail@plt+0x11b8>
   125f4:	mov	r2, #5
   125f8:	ldr	r1, [pc, #504]	; 127f8 <__assert_fail@plt+0x11bc>
   125fc:	mov	r0, #0
   12600:	ldr	r9, [r3]
   12604:	bl	11330 <dcgettext@plt>
   12608:	ldr	r3, [pc, #492]	; 127fc <__assert_fail@plt+0x11c0>
   1260c:	mov	r1, r5
   12610:	ldr	r3, [r3]
   12614:	str	r3, [sp, #12]
   12618:	mov	sl, r0
   1261c:	mov	r0, #4
   12620:	bl	17598 <__assert_fail@plt+0x5f5c>
   12624:	ldr	r3, [sp, #12]
   12628:	mov	r2, sl
   1262c:	mov	r1, #1
   12630:	str	r0, [sp]
   12634:	mov	r0, r9
   12638:	bl	114f8 <__fprintf_chk@plt>
   1263c:	bl	186dc <__assert_fail@plt+0x70a0>
   12640:	cmp	r0, #0
   12644:	beq	12188 <__assert_fail@plt+0xb4c>
   12648:	mov	r3, #1
   1264c:	strb	r3, [r4, #3]
   12650:	b	1221c <__assert_fail@plt+0xbe0>
   12654:	add	r2, sp, #24
   12658:	mov	r1, r5
   1265c:	ldr	r0, [r4, #12]
   12660:	bl	1424c <__assert_fail@plt+0x2c10>
   12664:	b	120fc <__assert_fail@plt+0xac0>
   12668:	cmp	r3, #0
   1266c:	bne	12200 <__assert_fail@plt+0xbc4>
   12670:	b	124c0 <__assert_fail@plt+0xe84>
   12674:	ldr	r3, [r4, #8]
   12678:	cmp	r3, #0
   1267c:	bne	12088 <__assert_fail@plt+0xa4c>
   12680:	b	12450 <__assert_fail@plt+0xe14>
   12684:	cmp	fp, #0
   12688:	beq	126b0 <__assert_fail@plt+0x1074>
   1268c:	mov	r2, #5
   12690:	ldr	r1, [pc, #360]	; 12800 <__assert_fail@plt+0x11c4>
   12694:	mov	r0, #0
   12698:	bl	11330 <dcgettext@plt>
   1269c:	mov	fp, r0
   126a0:	b	12308 <__assert_fail@plt+0xccc>
   126a4:	ldr	r0, [sp, #12]
   126a8:	bl	112f4 <free@plt>
   126ac:	b	123d4 <__assert_fail@plt+0xd98>
   126b0:	mov	r2, #5
   126b4:	ldr	r1, [pc, #328]	; 12804 <__assert_fail@plt+0x11c8>
   126b8:	mov	r0, r8
   126bc:	bl	11330 <dcgettext@plt>
   126c0:	mov	fp, r0
   126c4:	b	12308 <__assert_fail@plt+0xccc>
   126c8:	mov	r2, #5
   126cc:	ldr	r1, [pc, #308]	; 12808 <__assert_fail@plt+0x11cc>
   126d0:	mov	r0, #0
   126d4:	bl	11330 <dcgettext@plt>
   126d8:	mov	r2, r5
   126dc:	mov	r1, #3
   126e0:	mov	r8, #0
   126e4:	mov	r4, r0
   126e8:	mov	r0, #0
   126ec:	bl	17674 <__assert_fail@plt+0x6038>
   126f0:	mov	r1, #0
   126f4:	mov	r2, r4
   126f8:	mov	r3, r0
   126fc:	mov	r0, r1
   12700:	bl	113cc <error@plt>
   12704:	b	12188 <__assert_fail@plt+0xb4c>
   12708:	ldr	r1, [pc, #252]	; 1280c <__assert_fail@plt+0x11d0>
   1270c:	mov	r0, r8
   12710:	bl	11330 <dcgettext@plt>
   12714:	mov	fp, r0
   12718:	b	12308 <__assert_fail@plt+0xccc>
   1271c:	mov	r2, #5
   12720:	ldr	r1, [pc, #232]	; 12810 <__assert_fail@plt+0x11d4>
   12724:	mov	r0, r9
   12728:	bl	11330 <dcgettext@plt>
   1272c:	mov	r2, r5
   12730:	mov	r1, #4
   12734:	mov	r8, r9
   12738:	mov	r4, r0
   1273c:	mov	r0, r9
   12740:	bl	174e4 <__assert_fail@plt+0x5ea8>
   12744:	mov	r2, r6
   12748:	mov	r1, #4
   1274c:	mov	r5, r0
   12750:	mov	r0, #1
   12754:	bl	174e4 <__assert_fail@plt+0x5ea8>
   12758:	mov	r3, r5
   1275c:	mov	r2, r4
   12760:	mov	r1, r9
   12764:	str	r0, [sp]
   12768:	mov	r0, r9
   1276c:	bl	113cc <error@plt>
   12770:	b	12188 <__assert_fail@plt+0xb4c>
   12774:	bl	1148c <__errno_location@plt>
   12778:	ldr	r8, [r0]
   1277c:	mov	r0, r9
   12780:	bl	112f4 <free@plt>
   12784:	cmp	r8, #2
   12788:	beq	12088 <__assert_fail@plt+0xa4c>
   1278c:	mov	r2, #5
   12790:	ldr	r1, [pc, #124]	; 12814 <__assert_fail@plt+0x11d8>
   12794:	mov	r0, #0
   12798:	bl	11330 <dcgettext@plt>
   1279c:	mov	r1, r5
   127a0:	mov	r4, r0
   127a4:	mov	r0, #4
   127a8:	bl	17598 <__assert_fail@plt+0x5f5c>
   127ac:	mov	r1, r8
   127b0:	mov	r2, r4
   127b4:	mov	r8, #0
   127b8:	mov	r3, r0
   127bc:	mov	r0, #0
   127c0:	bl	113cc <error@plt>
   127c4:	b	12188 <__assert_fail@plt+0xb4c>
   127c8:	bl	1133c <__stack_chk_fail@plt>
   127cc:	andeq	ip, r2, r0, ror #3
   127d0:	andeq	fp, r2, r8, lsl #30
   127d4:	andeq	sl, r1, ip, asr #3
   127d8:	ldrdeq	sl, [r1], -r4
   127dc:	andeq	sl, r1, r0, lsl #2
   127e0:	andeq	sl, r1, r4, asr r2
   127e4:	muleq	r1, r8, r2
   127e8:	andeq	sl, r1, r4, lsl #4
   127ec:	andeq	sl, r1, r4, lsl r1
   127f0:	andeq	sl, r1, r8, ror #2
   127f4:	andeq	ip, r2, r8, asr #3
   127f8:	andeq	sl, r1, r4, lsr #3
   127fc:	andeq	ip, r2, r4, lsl #4
   12800:	andeq	sl, r1, r4, ror r2
   12804:	andeq	sl, r1, ip, lsr #4
   12808:	andeq	sl, r1, r4, lsl #3
   1280c:	andeq	sl, r1, r0, ror #3
   12810:	andeq	sl, r1, ip, lsr r1
   12814:			; <UNDEFINED> instruction: 0x0001a1b8
   12818:	ldr	r3, [pc, #836]	; 12b64 <__assert_fail@plt+0x1528>
   1281c:	push	{r7, lr}
   12820:	sub	sp, sp, #72	; 0x48
   12824:	ldr	r3, [r3]
   12828:	subs	r4, r0, #0
   1282c:	str	r3, [sp, #68]	; 0x44
   12830:	beq	1286c <__assert_fail@plt+0x1230>
   12834:	ldr	r3, [pc, #812]	; 12b68 <__assert_fail@plt+0x152c>
   12838:	mov	r2, #5
   1283c:	ldr	r1, [pc, #808]	; 12b6c <__assert_fail@plt+0x1530>
   12840:	mov	r0, #0
   12844:	ldr	r5, [r3]
   12848:	bl	11330 <dcgettext@plt>
   1284c:	ldr	r3, [pc, #796]	; 12b70 <__assert_fail@plt+0x1534>
   12850:	mov	r1, #1
   12854:	ldr	r3, [r3]
   12858:	mov	r2, r0
   1285c:	mov	r0, r5
   12860:	bl	114f8 <__fprintf_chk@plt>
   12864:	mov	r0, r4
   12868:	bl	11474 <exit@plt>
   1286c:	mov	r2, #5
   12870:	ldr	r1, [pc, #764]	; 12b74 <__assert_fail@plt+0x1538>
   12874:	bl	11330 <dcgettext@plt>
   12878:	ldr	r3, [pc, #752]	; 12b70 <__assert_fail@plt+0x1534>
   1287c:	ldr	r5, [pc, #756]	; 12b78 <__assert_fail@plt+0x153c>
   12880:	ldr	r3, [r3]
   12884:	mov	r2, r3
   12888:	str	r3, [sp, #4]
   1288c:	str	r3, [sp]
   12890:	mov	r1, r0
   12894:	mov	r0, #1
   12898:	bl	114e0 <__printf_chk@plt>
   1289c:	mov	r2, #5
   128a0:	ldr	r1, [pc, #724]	; 12b7c <__assert_fail@plt+0x1540>
   128a4:	mov	r0, r4
   128a8:	bl	11330 <dcgettext@plt>
   128ac:	ldr	r1, [r5]
   128b0:	bl	11270 <fputs_unlocked@plt>
   128b4:	mov	r2, #5
   128b8:	ldr	r1, [pc, #704]	; 12b80 <__assert_fail@plt+0x1544>
   128bc:	mov	r0, r4
   128c0:	bl	11330 <dcgettext@plt>
   128c4:	ldr	r1, [r5]
   128c8:	bl	11270 <fputs_unlocked@plt>
   128cc:	mov	r2, #5
   128d0:	ldr	r1, [pc, #684]	; 12b84 <__assert_fail@plt+0x1548>
   128d4:	mov	r0, r4
   128d8:	bl	11330 <dcgettext@plt>
   128dc:	ldr	r1, [r5]
   128e0:	bl	11270 <fputs_unlocked@plt>
   128e4:	mov	r2, #5
   128e8:	ldr	r1, [pc, #664]	; 12b88 <__assert_fail@plt+0x154c>
   128ec:	mov	r0, r4
   128f0:	bl	11330 <dcgettext@plt>
   128f4:	ldr	r1, [r5]
   128f8:	bl	11270 <fputs_unlocked@plt>
   128fc:	mov	r2, #5
   12900:	ldr	r1, [pc, #644]	; 12b8c <__assert_fail@plt+0x1550>
   12904:	mov	r0, r4
   12908:	bl	11330 <dcgettext@plt>
   1290c:	ldr	r1, [r5]
   12910:	bl	11270 <fputs_unlocked@plt>
   12914:	mov	r2, #5
   12918:	ldr	r1, [pc, #624]	; 12b90 <__assert_fail@plt+0x1554>
   1291c:	mov	r0, r4
   12920:	bl	11330 <dcgettext@plt>
   12924:	ldr	r1, [r5]
   12928:	bl	11270 <fputs_unlocked@plt>
   1292c:	mov	r2, #5
   12930:	ldr	r1, [pc, #604]	; 12b94 <__assert_fail@plt+0x1558>
   12934:	mov	r0, r4
   12938:	bl	11330 <dcgettext@plt>
   1293c:	ldr	r1, [r5]
   12940:	bl	11270 <fputs_unlocked@plt>
   12944:	mov	r2, #5
   12948:	ldr	r1, [pc, #584]	; 12b98 <__assert_fail@plt+0x155c>
   1294c:	mov	r0, r4
   12950:	bl	11330 <dcgettext@plt>
   12954:	ldr	r1, [r5]
   12958:	bl	11270 <fputs_unlocked@plt>
   1295c:	mov	r2, #5
   12960:	ldr	r1, [pc, #564]	; 12b9c <__assert_fail@plt+0x1560>
   12964:	mov	r0, r4
   12968:	bl	11330 <dcgettext@plt>
   1296c:	ldr	r1, [r5]
   12970:	bl	11270 <fputs_unlocked@plt>
   12974:	mov	r2, #5
   12978:	ldr	r1, [pc, #544]	; 12ba0 <__assert_fail@plt+0x1564>
   1297c:	mov	r0, r4
   12980:	bl	11330 <dcgettext@plt>
   12984:	ldr	r2, [pc, #536]	; 12ba4 <__assert_fail@plt+0x1568>
   12988:	mov	r1, r0
   1298c:	mov	r0, #1
   12990:	bl	114e0 <__printf_chk@plt>
   12994:	ldr	lr, [pc, #524]	; 12ba8 <__assert_fail@plt+0x156c>
   12998:	add	ip, sp, #12
   1299c:	ldm	lr!, {r0, r1, r2, r3}
   129a0:	stmia	ip!, {r0, r1, r2, r3}
   129a4:	ldm	lr!, {r0, r1, r2, r3}
   129a8:	ldr	r6, [sp, #12]
   129ac:	stmia	ip!, {r0, r1, r2, r3}
   129b0:	cmp	r6, #0
   129b4:	ldm	lr!, {r0, r1, r2, r3}
   129b8:	addeq	r5, sp, #12
   129bc:	stmia	ip!, {r0, r1, r2, r3}
   129c0:	ldm	lr, {r0, r1}
   129c4:	stm	ip, {r0, r1}
   129c8:	beq	129f8 <__assert_fail@plt+0x13bc>
   129cc:	ldr	r7, [pc, #472]	; 12bac <__assert_fail@plt+0x1570>
   129d0:	add	r5, sp, #12
   129d4:	b	129e4 <__assert_fail@plt+0x13a8>
   129d8:	ldr	r6, [r5, #8]!
   129dc:	cmp	r6, #0
   129e0:	beq	129f8 <__assert_fail@plt+0x13bc>
   129e4:	mov	r1, r6
   129e8:	mov	r0, r7
   129ec:	bl	11294 <strcmp@plt>
   129f0:	cmp	r0, #0
   129f4:	bne	129d8 <__assert_fail@plt+0x139c>
   129f8:	ldr	r5, [r5, #4]
   129fc:	mov	r2, #5
   12a00:	cmp	r5, #0
   12a04:	ldr	r1, [pc, #420]	; 12bb0 <__assert_fail@plt+0x1574>
   12a08:	beq	12ab0 <__assert_fail@plt+0x1474>
   12a0c:	mov	r0, #0
   12a10:	bl	11330 <dcgettext@plt>
   12a14:	ldr	r3, [pc, #408]	; 12bb4 <__assert_fail@plt+0x1578>
   12a18:	ldr	r2, [pc, #408]	; 12bb8 <__assert_fail@plt+0x157c>
   12a1c:	mov	r1, r0
   12a20:	mov	r0, #1
   12a24:	bl	114e0 <__printf_chk@plt>
   12a28:	mov	r1, #0
   12a2c:	mov	r0, #5
   12a30:	bl	1154c <setlocale@plt>
   12a34:	cmp	r0, #0
   12a38:	ldreq	r6, [pc, #364]	; 12bac <__assert_fail@plt+0x1570>
   12a3c:	beq	12a58 <__assert_fail@plt+0x141c>
   12a40:	mov	r2, #3
   12a44:	ldr	r1, [pc, #368]	; 12bbc <__assert_fail@plt+0x1580>
   12a48:	bl	115f4 <strncmp@plt>
   12a4c:	ldr	r6, [pc, #344]	; 12bac <__assert_fail@plt+0x1570>
   12a50:	cmp	r0, #0
   12a54:	bne	12b40 <__assert_fail@plt+0x1504>
   12a58:	mov	r2, #5
   12a5c:	ldr	r1, [pc, #348]	; 12bc0 <__assert_fail@plt+0x1584>
   12a60:	mov	r0, #0
   12a64:	bl	11330 <dcgettext@plt>
   12a68:	ldr	r3, [pc, #316]	; 12bac <__assert_fail@plt+0x1570>
   12a6c:	ldr	r2, [pc, #320]	; 12bb4 <__assert_fail@plt+0x1578>
   12a70:	mov	r1, r0
   12a74:	mov	r0, #1
   12a78:	bl	114e0 <__printf_chk@plt>
   12a7c:	mov	r2, #5
   12a80:	ldr	r1, [pc, #316]	; 12bc4 <__assert_fail@plt+0x1588>
   12a84:	mov	r0, #0
   12a88:	bl	11330 <dcgettext@plt>
   12a8c:	ldr	r2, [pc, #308]	; 12bc8 <__assert_fail@plt+0x158c>
   12a90:	cmp	r5, r6
   12a94:	ldr	r3, [pc, #304]	; 12bcc <__assert_fail@plt+0x1590>
   12a98:	movne	r3, r2
   12a9c:	mov	r1, r0
   12aa0:	mov	r2, r5
   12aa4:	mov	r0, #1
   12aa8:	bl	114e0 <__printf_chk@plt>
   12aac:	b	12864 <__assert_fail@plt+0x1228>
   12ab0:	mov	r0, r5
   12ab4:	bl	11330 <dcgettext@plt>
   12ab8:	ldr	r3, [pc, #244]	; 12bb4 <__assert_fail@plt+0x1578>
   12abc:	ldr	r2, [pc, #244]	; 12bb8 <__assert_fail@plt+0x157c>
   12ac0:	mov	r1, r0
   12ac4:	mov	r0, #1
   12ac8:	bl	114e0 <__printf_chk@plt>
   12acc:	mov	r1, r5
   12ad0:	mov	r0, #5
   12ad4:	bl	1154c <setlocale@plt>
   12ad8:	cmp	r0, #0
   12adc:	beq	12af4 <__assert_fail@plt+0x14b8>
   12ae0:	mov	r2, #3
   12ae4:	ldr	r1, [pc, #208]	; 12bbc <__assert_fail@plt+0x1580>
   12ae8:	bl	115f4 <strncmp@plt>
   12aec:	cmp	r0, #0
   12af0:	bne	12b38 <__assert_fail@plt+0x14fc>
   12af4:	mov	r2, #5
   12af8:	ldr	r1, [pc, #192]	; 12bc0 <__assert_fail@plt+0x1584>
   12afc:	mov	r0, #0
   12b00:	bl	11330 <dcgettext@plt>
   12b04:	ldr	r3, [pc, #160]	; 12bac <__assert_fail@plt+0x1570>
   12b08:	ldr	r2, [pc, #164]	; 12bb4 <__assert_fail@plt+0x1578>
   12b0c:	mov	r5, r3
   12b10:	mov	r1, r0
   12b14:	mov	r0, #1
   12b18:	bl	114e0 <__printf_chk@plt>
   12b1c:	ldr	r1, [pc, #160]	; 12bc4 <__assert_fail@plt+0x1588>
   12b20:	mov	r2, #5
   12b24:	mov	r0, #0
   12b28:	bl	11330 <dcgettext@plt>
   12b2c:	ldr	r3, [pc, #152]	; 12bcc <__assert_fail@plt+0x1590>
   12b30:	mov	r1, r0
   12b34:	b	12aa0 <__assert_fail@plt+0x1464>
   12b38:	ldr	r6, [pc, #108]	; 12bac <__assert_fail@plt+0x1570>
   12b3c:	mov	r5, r6
   12b40:	mov	r2, #5
   12b44:	ldr	r1, [pc, #132]	; 12bd0 <__assert_fail@plt+0x1594>
   12b48:	mov	r0, #0
   12b4c:	bl	11330 <dcgettext@plt>
   12b50:	ldr	r2, [pc, #84]	; 12bac <__assert_fail@plt+0x1570>
   12b54:	mov	r1, r0
   12b58:	mov	r0, #1
   12b5c:	bl	114e0 <__printf_chk@plt>
   12b60:	b	12a58 <__assert_fail@plt+0x141c>
   12b64:	andeq	fp, r2, r8, lsl #30
   12b68:	andeq	ip, r2, r8, asr #3
   12b6c:			; <UNDEFINED> instruction: 0x0001a2b0
   12b70:	andeq	ip, r2, r4, lsl #4
   12b74:	ldrdeq	sl, [r1], -r8
   12b78:	ldrdeq	ip, [r2], -r4
   12b7c:	andeq	sl, r1, ip, ror r3
   12b80:	andeq	sl, r1, r0, lsl #11
   12b84:	andeq	sl, r1, ip, asr #11
   12b88:	andeq	sl, r1, ip, lsl #15
   12b8c:	andeq	sl, r1, r4, lsl #19
   12b90:	andeq	sl, r1, r0, asr #21
   12b94:	strdeq	sl, [r1], -r0
   12b98:	andeq	sl, r1, r8, lsr #22
   12b9c:	andeq	sl, r1, r8, lsl #24
   12ba0:	andeq	sl, r1, r8, ror #25
   12ba4:	andeq	sl, r1, r4, ror sp
   12ba8:	andeq	r9, r1, r8, asr #31
   12bac:	andeq	sl, r1, ip, lsr #5
   12bb0:	andeq	sl, r1, r8, ror sp
   12bb4:	muleq	r1, r0, sp
   12bb8:			; <UNDEFINED> instruction: 0x0001adb8
   12bbc:	andeq	sl, r1, r8, asr #27
   12bc0:	andeq	sl, r1, r4, lsl lr
   12bc4:	andeq	sl, r1, r4, lsr lr
   12bc8:	andeq	sl, r1, r4, lsl #24
   12bcc:	andeq	sl, r1, r8, asr #31
   12bd0:	andeq	sl, r1, ip, asr #27
   12bd4:	push	{lr}		; (str lr, [sp, #-4]!)
   12bd8:	mov	ip, r1
   12bdc:	sub	sp, sp, #12
   12be0:	ldr	r1, [r1, #12]
   12be4:	mov	r3, r0
   12be8:	ldr	r2, [ip, #8]
   12bec:	str	r1, [sp]
   12bf0:	ldrd	r0, [ip]
   12bf4:	bl	11510 <linkat@plt>
   12bf8:	add	sp, sp, #12
   12bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   12c00:	push	{r4, r5, r6, lr}
   12c04:	mov	r5, r0
   12c08:	mov	r4, r1
   12c0c:	bl	14174 <__assert_fail@plt+0x2b38>
   12c10:	sub	r6, r0, r5
   12c14:	add	r0, r6, #9
   12c18:	cmp	r0, #256	; 0x100
   12c1c:	bls	12c2c <__assert_fail@plt+0x15f0>
   12c20:	bl	113fc <malloc@plt>
   12c24:	subs	r4, r0, #0
   12c28:	beq	12c58 <__assert_fail@plt+0x161c>
   12c2c:	mov	r2, r6
   12c30:	mov	r1, r5
   12c34:	mov	r0, r4
   12c38:	bl	1142c <mempcpy@plt>
   12c3c:	ldr	r3, [pc, #28]	; 12c60 <__assert_fail@plt+0x1624>
   12c40:	mov	r2, r0
   12c44:	ldm	r3!, {r0, r1}
   12c48:	ldrb	r3, [r3]
   12c4c:	str	r0, [r2]
   12c50:	str	r1, [r2, #4]
   12c54:	strb	r3, [r2, #8]
   12c58:	mov	r0, r4
   12c5c:	pop	{r4, r5, r6, pc}
   12c60:	andeq	fp, r1, r4, asr #1
   12c64:	mov	r2, r0
   12c68:	ldrd	r0, [r1]
   12c6c:	b	115dc <symlinkat@plt>
   12c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c74:	sub	sp, sp, #292	; 0x124
   12c78:	ldr	r4, [pc, #288]	; 12da0 <__assert_fail@plt+0x1764>
   12c7c:	ldr	lr, [sp, #328]	; 0x148
   12c80:	mov	r7, r3
   12c84:	ldr	ip, [r4]
   12c88:	str	lr, [sp]
   12c8c:	ldrb	r5, [sp, #332]	; 0x14c
   12c90:	mov	r9, r0
   12c94:	str	ip, [sp, #284]	; 0x11c
   12c98:	mov	r8, r1
   12c9c:	mov	r6, r2
   12ca0:	bl	11510 <linkat@plt>
   12ca4:	eor	r3, r5, #1
   12ca8:	cmp	r0, #0
   12cac:	movne	fp, r3
   12cb0:	orreq	fp, r3, #1
   12cb4:	cmp	fp, #0
   12cb8:	mov	sl, r0
   12cbc:	bne	12cd4 <__assert_fail@plt+0x1698>
   12cc0:	bl	1148c <__errno_location@plt>
   12cc4:	ldr	r2, [r0]
   12cc8:	mov	r5, r0
   12ccc:	cmp	r2, #17
   12cd0:	beq	12cf0 <__assert_fail@plt+0x16b4>
   12cd4:	ldr	r2, [sp, #284]	; 0x11c
   12cd8:	ldr	r3, [r4]
   12cdc:	mov	r0, sl
   12ce0:	cmp	r2, r3
   12ce4:	bne	12d9c <__assert_fail@plt+0x1760>
   12ce8:	add	sp, sp, #292	; 0x124
   12cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf0:	add	r1, sp, #28
   12cf4:	mov	r0, r7
   12cf8:	bl	12c00 <__assert_fail@plt+0x15c4>
   12cfc:	subs	sl, r0, #0
   12d00:	beq	12d94 <__assert_fail@plt+0x1758>
   12d04:	mov	r2, #6
   12d08:	ldr	ip, [sp, #328]	; 0x148
   12d0c:	str	r2, [sp]
   12d10:	mov	r1, fp
   12d14:	ldr	r3, [pc, #136]	; 12da4 <__assert_fail@plt+0x1768>
   12d18:	add	r2, sp, #12
   12d1c:	str	r9, [sp, #12]
   12d20:	str	r8, [sp, #16]
   12d24:	str	r6, [sp, #20]
   12d28:	str	ip, [sp, #24]
   12d2c:	bl	17cb4 <__assert_fail@plt+0x6678>
   12d30:	cmp	r0, #0
   12d34:	beq	12d64 <__assert_fail@plt+0x1728>
   12d38:	ldr	r7, [r5]
   12d3c:	add	r3, sp, #28
   12d40:	cmp	sl, r3
   12d44:	beq	12d50 <__assert_fail@plt+0x1714>
   12d48:	mov	r0, sl
   12d4c:	bl	112f4 <free@plt>
   12d50:	cmp	r7, #0
   12d54:	strne	r7, [r5]
   12d58:	mvnne	sl, #0
   12d5c:	moveq	sl, #1
   12d60:	b	12cd4 <__assert_fail@plt+0x1698>
   12d64:	mov	r3, r7
   12d68:	mov	r2, r6
   12d6c:	mov	r1, sl
   12d70:	mov	r0, r6
   12d74:	bl	115b8 <renameat@plt>
   12d78:	mov	r2, #0
   12d7c:	mov	r1, sl
   12d80:	subs	r7, r0, #0
   12d84:	mov	r0, r6
   12d88:	ldrne	r7, [r5]
   12d8c:	bl	112d0 <unlinkat@plt>
   12d90:	b	12d3c <__assert_fail@plt+0x1700>
   12d94:	mvn	sl, #0
   12d98:	b	12cd4 <__assert_fail@plt+0x1698>
   12d9c:	bl	1133c <__stack_chk_fail@plt>
   12da0:	andeq	fp, r2, r8, lsl #30
   12da4:	ldrdeq	r2, [r1], -r4
   12da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dac:	mov	r4, r3
   12db0:	ldr	r5, [pc, #292]	; 12edc <__assert_fail@plt+0x18a0>
   12db4:	sub	sp, sp, #284	; 0x11c
   12db8:	mov	r8, r0
   12dbc:	ldr	r3, [r5]
   12dc0:	mov	r7, r1
   12dc4:	str	r3, [sp, #276]	; 0x114
   12dc8:	mov	r9, r2
   12dcc:	bl	115dc <symlinkat@plt>
   12dd0:	eor	r4, r4, #1
   12dd4:	cmp	r0, #0
   12dd8:	orreq	r4, r4, #1
   12ddc:	cmp	r4, #0
   12de0:	mov	r6, r0
   12de4:	bne	12dfc <__assert_fail@plt+0x17c0>
   12de8:	bl	1148c <__errno_location@plt>
   12dec:	ldr	r3, [r0]
   12df0:	mov	sl, r0
   12df4:	cmp	r3, #17
   12df8:	beq	12e18 <__assert_fail@plt+0x17dc>
   12dfc:	ldr	r2, [sp, #276]	; 0x114
   12e00:	ldr	r3, [r5]
   12e04:	mov	r0, r6
   12e08:	cmp	r2, r3
   12e0c:	bne	12ed8 <__assert_fail@plt+0x189c>
   12e10:	add	sp, sp, #284	; 0x11c
   12e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e18:	add	r6, sp, #20
   12e1c:	mov	r1, r6
   12e20:	mov	r0, r9
   12e24:	bl	12c00 <__assert_fail@plt+0x15c4>
   12e28:	subs	fp, r0, #0
   12e2c:	beq	12ed0 <__assert_fail@plt+0x1894>
   12e30:	mov	r3, #6
   12e34:	mov	r1, r4
   12e38:	str	r3, [sp]
   12e3c:	add	r2, sp, #12
   12e40:	ldr	r3, [pc, #152]	; 12ee0 <__assert_fail@plt+0x18a4>
   12e44:	str	r8, [sp, #12]
   12e48:	str	r7, [sp, #16]
   12e4c:	bl	17cb4 <__assert_fail@plt+0x6678>
   12e50:	subs	r4, r0, #0
   12e54:	beq	12e7c <__assert_fail@plt+0x1840>
   12e58:	ldr	r4, [sl]
   12e5c:	cmp	fp, r6
   12e60:	beq	12e6c <__assert_fail@plt+0x1830>
   12e64:	mov	r0, fp
   12e68:	bl	112f4 <free@plt>
   12e6c:	cmp	r4, #0
   12e70:	bne	12ec4 <__assert_fail@plt+0x1888>
   12e74:	mov	r6, #1
   12e78:	b	12dfc <__assert_fail@plt+0x17c0>
   12e7c:	mov	r3, r9
   12e80:	mov	r2, r7
   12e84:	mov	r1, fp
   12e88:	mov	r0, r7
   12e8c:	bl	115b8 <renameat@plt>
   12e90:	cmp	r0, #0
   12e94:	bne	12eac <__assert_fail@plt+0x1870>
   12e98:	cmp	fp, r6
   12e9c:	beq	12e74 <__assert_fail@plt+0x1838>
   12ea0:	mov	r0, fp
   12ea4:	bl	112f4 <free@plt>
   12ea8:	b	12e74 <__assert_fail@plt+0x1838>
   12eac:	mov	r2, r4
   12eb0:	mov	r0, r7
   12eb4:	mov	r1, fp
   12eb8:	ldr	r4, [sl]
   12ebc:	bl	112d0 <unlinkat@plt>
   12ec0:	b	12e5c <__assert_fail@plt+0x1820>
   12ec4:	str	r4, [sl]
   12ec8:	mvn	r6, #0
   12ecc:	b	12dfc <__assert_fail@plt+0x17c0>
   12ed0:	mvn	r6, #0
   12ed4:	b	12dfc <__assert_fail@plt+0x17c0>
   12ed8:	bl	1133c <__stack_chk_fail@plt>
   12edc:	andeq	fp, r2, r8, lsl #30
   12ee0:	andeq	r2, r1, r4, ror #24
   12ee4:	push	{r4, r5, r6, r7, r8, lr}
   12ee8:	ldr	r4, [r1]
   12eec:	cmp	r4, #0
   12ef0:	beq	12f4c <__assert_fail@plt+0x1910>
   12ef4:	mov	r7, r2
   12ef8:	mov	r6, r1
   12efc:	mov	r8, r0
   12f00:	bl	11480 <strlen@plt>
   12f04:	ldr	r3, [r7]
   12f08:	cmp	r3, r0
   12f0c:	mov	r5, r0
   12f10:	bhi	12f1c <__assert_fail@plt+0x18e0>
   12f14:	mov	r0, #1
   12f18:	pop	{r4, r5, r6, r7, r8, pc}
   12f1c:	add	r2, r5, #1
   12f20:	mov	r1, r8
   12f24:	mov	r0, r4
   12f28:	bl	1130c <memcpy@plt>
   12f2c:	ldr	r2, [r6]
   12f30:	ldr	r3, [r7]
   12f34:	add	r2, r2, r5
   12f38:	sub	r5, r3, r5
   12f3c:	str	r2, [r6]
   12f40:	mov	r0, #0
   12f44:	str	r5, [r7]
   12f48:	pop	{r4, r5, r6, r7, r8, pc}
   12f4c:	ldr	r3, [pc, #12]	; 12f60 <__assert_fail@plt+0x1924>
   12f50:	ldr	r1, [r3]
   12f54:	bl	11270 <fputs_unlocked@plt>
   12f58:	mov	r0, r4
   12f5c:	pop	{r4, r5, r6, r7, r8, pc}
   12f60:	ldrdeq	ip, [r2], -r4
   12f64:	push	{r4, r5, r6, r7, r8, lr}
   12f68:	sub	sp, sp, #8
   12f6c:	ldrb	ip, [r0, #1]
   12f70:	ldrb	r4, [r1, #1]
   12f74:	str	r2, [sp, #4]
   12f78:	sub	r2, ip, #47	; 0x2f
   12f7c:	sub	lr, r4, #47	; 0x2f
   12f80:	clz	r2, r2
   12f84:	clz	lr, lr
   12f88:	lsr	r2, r2, #5
   12f8c:	lsr	lr, lr, #5
   12f90:	cmp	lr, r2
   12f94:	str	r3, [sp]
   12f98:	bne	1309c <__assert_fail@plt+0x1a60>
   12f9c:	ldrb	r2, [r1]
   12fa0:	ldrb	r3, [r0]
   12fa4:	clz	r5, r3
   12fa8:	cmp	r2, #0
   12fac:	lsr	r5, r5, #5
   12fb0:	beq	1309c <__assert_fail@plt+0x1a60>
   12fb4:	cmp	r2, r3
   12fb8:	orrne	r5, r5, #1
   12fbc:	cmp	r5, #0
   12fc0:	bne	1309c <__assert_fail@plt+0x1a60>
   12fc4:	add	lr, r1, #2
   12fc8:	add	r6, r0, #1
   12fcc:	mov	r7, r5
   12fd0:	mvn	r8, r1
   12fd4:	b	12fe4 <__assert_fail@plt+0x19a8>
   12fd8:	mov	r2, r4
   12fdc:	ldrb	ip, [r6, #1]!
   12fe0:	ldrb	r4, [lr], #1
   12fe4:	cmp	r2, #47	; 0x2f
   12fe8:	add	r3, r8, lr
   12fec:	moveq	r7, r3
   12ff0:	cmp	r4, #0
   12ff4:	clz	r2, ip
   12ff8:	lsr	r2, r2, #5
   12ffc:	beq	130ac <__assert_fail@plt+0x1a70>
   13000:	cmp	r4, ip
   13004:	moveq	ip, r2
   13008:	orrne	ip, r2, #1
   1300c:	cmp	ip, #0
   13010:	beq	12fd8 <__assert_fail@plt+0x199c>
   13014:	cmp	r4, #47	; 0x2f
   13018:	movne	r2, #0
   1301c:	andeq	r2, r2, #1
   13020:	cmp	r2, #0
   13024:	moveq	r3, r7
   13028:	cmp	r3, #0
   1302c:	beq	130a0 <__assert_fail@plt+0x1a64>
   13030:	ldrb	r2, [r1, r3]
   13034:	add	r6, r0, r3
   13038:	add	r4, r1, r3
   1303c:	cmp	r2, #47	; 0x2f
   13040:	ldrb	r3, [r6]
   13044:	ldrbeq	r2, [r4, #1]
   13048:	addeq	r4, r4, #1
   1304c:	cmp	r3, #47	; 0x2f
   13050:	addeq	r6, r6, #1
   13054:	cmp	r2, #0
   13058:	bne	130ec <__assert_fail@plt+0x1ab0>
   1305c:	ldrb	r0, [r6]
   13060:	ldr	r3, [pc, #292]	; 1318c <__assert_fail@plt+0x1b50>
   13064:	mov	r2, sp
   13068:	cmp	r0, #0
   1306c:	movne	r0, r6
   13070:	moveq	r0, r3
   13074:	add	r1, sp, #4
   13078:	bl	12ee4 <__assert_fail@plt+0x18a8>
   1307c:	mov	r5, r0
   13080:	cmp	r5, #0
   13084:	bne	130c4 <__assert_fail@plt+0x1a88>
   13088:	eor	r5, r5, #1
   1308c:	uxtb	r5, r5
   13090:	mov	r0, r5
   13094:	add	sp, sp, #8
   13098:	pop	{r4, r5, r6, r7, r8, pc}
   1309c:	mov	r5, #0
   130a0:	mov	r0, r5
   130a4:	add	sp, sp, #8
   130a8:	pop	{r4, r5, r6, r7, r8, pc}
   130ac:	cmp	ip, #47	; 0x2f
   130b0:	movne	ip, r2
   130b4:	orreq	ip, r2, #1
   130b8:	cmp	ip, #0
   130bc:	moveq	r3, r7
   130c0:	b	13028 <__assert_fail@plt+0x19ec>
   130c4:	mov	r2, #5
   130c8:	ldr	r1, [pc, #192]	; 13190 <__assert_fail@plt+0x1b54>
   130cc:	mov	r0, #0
   130d0:	bl	11330 <dcgettext@plt>
   130d4:	ldr	r2, [pc, #184]	; 13194 <__assert_fail@plt+0x1b58>
   130d8:	mov	r1, #36	; 0x24
   130dc:	mov	r3, r0
   130e0:	mov	r0, #0
   130e4:	bl	113cc <error@plt>
   130e8:	b	13088 <__assert_fail@plt+0x1a4c>
   130ec:	mov	r2, sp
   130f0:	add	r1, sp, #4
   130f4:	ldr	r0, [pc, #156]	; 13198 <__assert_fail@plt+0x1b5c>
   130f8:	bl	12ee4 <__assert_fail@plt+0x18a8>
   130fc:	ldrb	r2, [r4]
   13100:	cmp	r2, #0
   13104:	mov	r5, r0
   13108:	beq	1314c <__assert_fail@plt+0x1b10>
   1310c:	ldr	r7, [pc, #136]	; 1319c <__assert_fail@plt+0x1b60>
   13110:	b	13120 <__assert_fail@plt+0x1ae4>
   13114:	ldrb	r2, [r4, #1]!
   13118:	cmp	r2, #0
   1311c:	beq	1314c <__assert_fail@plt+0x1b10>
   13120:	cmp	r2, #47	; 0x2f
   13124:	bne	13114 <__assert_fail@plt+0x1ad8>
   13128:	mov	r2, sp
   1312c:	add	r1, sp, #4
   13130:	mov	r0, r7
   13134:	bl	12ee4 <__assert_fail@plt+0x18a8>
   13138:	ldrb	r2, [r4, #1]!
   1313c:	cmp	r2, #0
   13140:	orr	r5, r0, r5
   13144:	uxtb	r5, r5
   13148:	bne	13120 <__assert_fail@plt+0x1ae4>
   1314c:	ldrb	r3, [r6]
   13150:	cmp	r3, #0
   13154:	beq	13080 <__assert_fail@plt+0x1a44>
   13158:	mov	r2, sp
   1315c:	add	r1, sp, #4
   13160:	ldr	r0, [pc, #56]	; 131a0 <__assert_fail@plt+0x1b64>
   13164:	bl	12ee4 <__assert_fail@plt+0x18a8>
   13168:	mov	r2, sp
   1316c:	add	r1, sp, #4
   13170:	mov	r4, r0
   13174:	mov	r0, r6
   13178:	bl	12ee4 <__assert_fail@plt+0x18a8>
   1317c:	orr	r0, r4, r0
   13180:	orr	r5, r5, r0
   13184:	uxtb	r5, r5
   13188:	b	13080 <__assert_fail@plt+0x1a44>
   1318c:	andeq	sl, r1, r8, ror #28
   13190:	ldrdeq	fp, [r1], -ip
   13194:	andeq	fp, r1, r0, ror #3
   13198:	ldrdeq	fp, [r1], -r0
   1319c:	ldrdeq	fp, [r1], -r4
   131a0:	ldrdeq	fp, [r1], -r8
   131a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   131a8:	mov	r7, r1
   131ac:	mov	r4, r0
   131b0:	bl	14174 <__assert_fail@plt+0x2b38>
   131b4:	mov	r5, r0
   131b8:	bl	141c4 <__assert_fail@plt+0x2b88>
   131bc:	cmp	r0, #14
   131c0:	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   131c4:	ldr	r3, [pc, #120]	; 13244 <__assert_fail@plt+0x1c08>
   131c8:	ldrh	r8, [r5]
   131cc:	mov	r6, r0
   131d0:	ldrh	r3, [r3]
   131d4:	strh	r3, [r5]
   131d8:	bl	1148c <__errno_location@plt>
   131dc:	mov	r3, #0
   131e0:	mov	r1, #3
   131e4:	str	r3, [r0]
   131e8:	mov	r9, r0
   131ec:	mov	r0, r4
   131f0:	bl	112a0 <pathconf@plt>
   131f4:	cmp	r0, #0
   131f8:	blt	13234 <__assert_fail@plt+0x1bf8>
   131fc:	cmp	r6, r0
   13200:	strh	r8, [r5]
   13204:	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   13208:	add	r4, r4, r7
   1320c:	sub	r3, r4, r5
   13210:	cmp	r3, r0
   13214:	subcs	r4, r0, #1
   13218:	addcc	r0, r3, #1
   1321c:	addcs	r4, r5, r4
   13220:	mov	r2, #126	; 0x7e
   13224:	mov	r3, #0
   13228:	strb	r2, [r4]
   1322c:	strb	r3, [r5, r0]
   13230:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13234:	ldr	r3, [r9]
   13238:	cmp	r3, #0
   1323c:	movne	r0, #255	; 0xff
   13240:	b	131fc <__assert_fail@plt+0x1bc0>
   13244:	andeq	sl, r1, r8, ror #28
   13248:	push	{r4, lr}
   1324c:	subs	r4, r0, #0
   13250:	beq	13284 <__assert_fail@plt+0x1c48>
   13254:	ldrb	r3, [r4]
   13258:	cmp	r3, #0
   1325c:	bne	13270 <__assert_fail@plt+0x1c34>
   13260:	ldr	r4, [pc, #48]	; 13298 <__assert_fail@plt+0x1c5c>
   13264:	ldr	r3, [pc, #48]	; 1329c <__assert_fail@plt+0x1c60>
   13268:	str	r4, [r3]
   1326c:	pop	{r4, pc}
   13270:	mov	r0, r4
   13274:	bl	14174 <__assert_fail@plt+0x2b38>
   13278:	cmp	r4, r0
   1327c:	bne	13260 <__assert_fail@plt+0x1c24>
   13280:	b	13264 <__assert_fail@plt+0x1c28>
   13284:	ldr	r0, [pc, #20]	; 132a0 <__assert_fail@plt+0x1c64>
   13288:	bl	113f0 <getenv@plt>
   1328c:	subs	r4, r0, #0
   13290:	beq	13260 <__assert_fail@plt+0x1c24>
   13294:	b	13254 <__assert_fail@plt+0x1c18>
   13298:	andeq	fp, r1, r0, lsl #2
   1329c:	strdeq	ip, [r2], -r4
   132a0:	andeq	fp, r1, r4, lsl #2
   132a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a8:	sub	sp, sp, #60	; 0x3c
   132ac:	mov	r4, r0
   132b0:	str	r2, [sp, #36]	; 0x24
   132b4:	str	r1, [sp, #12]
   132b8:	str	r0, [sp, #16]
   132bc:	bl	14174 <__assert_fail@plt+0x2b38>
   132c0:	sub	r9, r0, r4
   132c4:	bl	11480 <strlen@plt>
   132c8:	ldr	r3, [pc, #1084]	; 1370c <__assert_fail@plt+0x20d0>
   132cc:	ldr	r3, [r3]
   132d0:	cmp	r3, #0
   132d4:	add	r2, r9, r0
   132d8:	str	r2, [sp, #8]
   132dc:	beq	136f8 <__assert_fail@plt+0x20bc>
   132e0:	mov	r0, r3
   132e4:	bl	11480 <strlen@plt>
   132e8:	ldr	r3, [sp, #8]
   132ec:	add	r3, r3, #1
   132f0:	str	r3, [sp, #32]
   132f4:	add	r2, r0, #1
   132f8:	cmp	r2, #9
   132fc:	addcs	r3, r3, r2
   13300:	addcc	r3, r3, #9
   13304:	mov	r0, r3
   13308:	str	r2, [sp, #52]	; 0x34
   1330c:	str	r3, [sp, #44]	; 0x2c
   13310:	bl	113fc <malloc@plt>
   13314:	subs	sl, r0, #0
   13318:	beq	135cc <__assert_fail@plt+0x1f90>
   1331c:	mov	fp, #0
   13320:	ldr	r2, [sp, #32]
   13324:	ldr	r1, [sp, #16]
   13328:	mov	r0, sl
   1332c:	bl	1130c <memcpy@plt>
   13330:	ldr	r3, [sp, #12]
   13334:	cmp	r3, #1
   13338:	beq	135e8 <__assert_fail@plt+0x1fac>
   1333c:	add	r5, sl, r9
   13340:	mov	r0, r5
   13344:	bl	141c4 <__assert_fail@plt+0x2b88>
   13348:	cmp	fp, #0
   1334c:	mov	r6, r0
   13350:	beq	13648 <__assert_fail@plt+0x200c>
   13354:	mov	r0, fp
   13358:	bl	112ac <rewinddir@plt>
   1335c:	ldr	r3, [sp, #44]	; 0x2c
   13360:	mov	r8, #2
   13364:	str	r3, [sp, #24]
   13368:	mov	r3, #1
   1336c:	str	r3, [sp, #20]
   13370:	add	r3, r6, #4
   13374:	str	r3, [sp, #28]
   13378:	ldr	r3, [sp, #8]
   1337c:	add	r6, r6, r8
   13380:	add	r3, r3, #4
   13384:	str	r3, [sp, #40]	; 0x28
   13388:	mov	r0, fp
   1338c:	bl	1157c <readdir64@plt>
   13390:	subs	r4, r0, #0
   13394:	beq	13534 <__assert_fail@plt+0x1ef8>
   13398:	add	r4, r4, #19
   1339c:	mov	r0, r4
   133a0:	bl	11480 <strlen@plt>
   133a4:	ldr	r3, [sp, #28]
   133a8:	cmp	r0, r3
   133ac:	bcc	13388 <__assert_fail@plt+0x1d4c>
   133b0:	mov	r2, r6
   133b4:	mov	r1, r4
   133b8:	add	r0, sl, r9
   133bc:	bl	11324 <memcmp@plt>
   133c0:	cmp	r0, #0
   133c4:	bne	13388 <__assert_fail@plt+0x1d4c>
   133c8:	ldrb	r5, [r4, r6]
   133cc:	add	r4, r4, r6
   133d0:	sub	r3, r5, #49	; 0x31
   133d4:	cmp	r3, #8
   133d8:	bhi	13388 <__assert_fail@plt+0x1d4c>
   133dc:	ldrb	r3, [r4, #1]
   133e0:	sub	r5, r5, #57	; 0x39
   133e4:	clz	r5, r5
   133e8:	sub	r2, r3, #48	; 0x30
   133ec:	cmp	r2, #9
   133f0:	lsr	r5, r5, #5
   133f4:	bhi	13640 <__assert_fail@plt+0x2004>
   133f8:	add	r2, r4, #1
   133fc:	rsb	r1, r4, #1
   13400:	cmp	r3, #57	; 0x39
   13404:	movne	r5, #0
   13408:	andeq	r5, r5, #1
   1340c:	add	r7, r1, r2
   13410:	ldrb	r3, [r2, #1]!
   13414:	sub	r0, r3, #48	; 0x30
   13418:	cmp	r0, #9
   1341c:	bls	13400 <__assert_fail@plt+0x1dc4>
   13420:	cmp	r3, #126	; 0x7e
   13424:	bne	13388 <__assert_fail@plt+0x1d4c>
   13428:	add	r3, r4, r7
   1342c:	ldrb	r3, [r3, #1]
   13430:	cmp	r3, #0
   13434:	bne	13388 <__assert_fail@plt+0x1d4c>
   13438:	ldr	r2, [sp, #20]
   1343c:	cmp	r2, r7
   13440:	bcc	13464 <__assert_fail@plt+0x1e28>
   13444:	bne	13388 <__assert_fail@plt+0x1d4c>
   13448:	ldr	r3, [sp, #8]
   1344c:	mov	r1, r4
   13450:	add	r0, r3, #2
   13454:	add	r0, sl, r0
   13458:	bl	11324 <memcmp@plt>
   1345c:	cmp	r0, #0
   13460:	bgt	13388 <__assert_fail@plt+0x1d4c>
   13464:	ldr	r2, [sp, #40]	; 0x28
   13468:	add	r3, r5, r7
   1346c:	str	r3, [sp, #20]
   13470:	add	r3, r2, r3
   13474:	ldr	r2, [sp, #24]
   13478:	mov	r8, r5
   1347c:	cmp	r3, r2
   13480:	bls	136ac <__assert_fail@plt+0x2070>
   13484:	lsls	r1, r3, #1
   13488:	lsr	r2, r3, #31
   1348c:	bmi	1349c <__assert_fail@plt+0x1e60>
   13490:	cmp	r2, #0
   13494:	streq	r1, [sp, #24]
   13498:	beq	134a0 <__assert_fail@plt+0x1e64>
   1349c:	str	r3, [sp, #24]
   134a0:	ldr	r1, [sp, #24]
   134a4:	mov	r0, sl
   134a8:	bl	11348 <realloc@plt>
   134ac:	subs	r3, r0, #0
   134b0:	beq	13688 <__assert_fail@plt+0x204c>
   134b4:	ldr	lr, [sp, #8]
   134b8:	mov	ip, #46	; 0x2e
   134bc:	add	r2, r3, lr
   134c0:	add	r1, r2, #2
   134c4:	add	r5, r1, r5
   134c8:	mov	r0, #126	; 0x7e
   134cc:	strb	ip, [r3, lr]
   134d0:	mov	sl, #48	; 0x30
   134d4:	strb	r0, [r2, #1]
   134d8:	mov	r0, r5
   134dc:	add	r5, r5, r7
   134e0:	mov	r1, r4
   134e4:	strb	sl, [r2, #2]
   134e8:	add	r2, r7, #2
   134ec:	str	r3, [sp, #48]	; 0x30
   134f0:	bl	1130c <memcpy@plt>
   134f4:	ldrb	r2, [r5, #-1]
   134f8:	sub	r1, r5, #1
   134fc:	ldr	r3, [sp, #48]	; 0x30
   13500:	cmp	r2, #57	; 0x39
   13504:	bne	13518 <__assert_fail@plt+0x1edc>
   13508:	strb	sl, [r1]
   1350c:	ldrb	r2, [r1, #-1]!
   13510:	cmp	r2, #57	; 0x39
   13514:	beq	13508 <__assert_fail@plt+0x1ecc>
   13518:	add	r2, r2, #1
   1351c:	strb	r2, [r1]
   13520:	mov	r0, fp
   13524:	mov	sl, r3
   13528:	bl	1157c <readdir64@plt>
   1352c:	subs	r4, r0, #0
   13530:	bne	13398 <__assert_fail@plt+0x1d5c>
   13534:	cmp	r8, #2
   13538:	beq	13604 <__assert_fail@plt+0x1fc8>
   1353c:	cmp	r8, #3
   13540:	beq	13688 <__assert_fail@plt+0x204c>
   13544:	cmp	r8, #1
   13548:	beq	13630 <__assert_fail@plt+0x1ff4>
   1354c:	ldr	r3, [sp, #36]	; 0x24
   13550:	cmp	r3, #0
   13554:	beq	136e4 <__assert_fail@plt+0x20a8>
   13558:	cmp	fp, #0
   1355c:	beq	135d8 <__assert_fail@plt+0x1f9c>
   13560:	mov	r0, fp
   13564:	bl	11594 <dirfd@plt>
   13568:	subs	r2, r0, #0
   1356c:	addge	r3, sl, r9
   13570:	blt	135d8 <__assert_fail@plt+0x1f9c>
   13574:	ldr	r1, [sp, #12]
   13578:	mvn	r0, #99	; 0x63
   1357c:	subs	r1, r1, #1
   13580:	movne	r1, #1
   13584:	str	r1, [sp]
   13588:	ldr	r1, [sp, #16]
   1358c:	bl	17858 <__assert_fail@plt+0x621c>
   13590:	cmp	r0, #0
   13594:	beq	136e4 <__assert_fail@plt+0x20a8>
   13598:	bl	1148c <__errno_location@plt>
   1359c:	ldr	r5, [r0]
   135a0:	cmp	r5, #17
   135a4:	beq	13320 <__assert_fail@plt+0x1ce4>
   135a8:	cmp	fp, #0
   135ac:	mov	r4, r0
   135b0:	beq	135bc <__assert_fail@plt+0x1f80>
   135b4:	mov	r0, fp
   135b8:	bl	11624 <closedir@plt>
   135bc:	mov	r0, sl
   135c0:	mov	sl, #0
   135c4:	bl	112f4 <free@plt>
   135c8:	str	r5, [r4]
   135cc:	mov	r0, sl
   135d0:	add	sp, sp, #60	; 0x3c
   135d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135d8:	mov	r3, sl
   135dc:	mvn	r2, #99	; 0x63
   135e0:	mov	r9, #0
   135e4:	b	13574 <__assert_fail@plt+0x1f38>
   135e8:	ldr	r3, [pc, #284]	; 1370c <__assert_fail@plt+0x20d0>
   135ec:	ldr	r2, [sp, #52]	; 0x34
   135f0:	ldr	r1, [r3]
   135f4:	ldr	r3, [sp, #8]
   135f8:	add	r0, sl, r3
   135fc:	bl	1130c <memcpy@plt>
   13600:	b	1354c <__assert_fail@plt+0x1f10>
   13604:	ldr	r3, [sp, #12]
   13608:	cmp	r3, #2
   1360c:	bne	13630 <__assert_fail@plt+0x1ff4>
   13610:	ldr	r3, [pc, #244]	; 1370c <__assert_fail@plt+0x20d0>
   13614:	ldr	r2, [sp, #52]	; 0x34
   13618:	ldr	r1, [r3]
   1361c:	ldr	r3, [sp, #8]
   13620:	add	r0, sl, r3
   13624:	bl	1130c <memcpy@plt>
   13628:	mov	r3, #1
   1362c:	str	r3, [sp, #12]
   13630:	ldr	r1, [sp, #8]
   13634:	mov	r0, sl
   13638:	bl	131a4 <__assert_fail@plt+0x1b68>
   1363c:	b	1354c <__assert_fail@plt+0x1f10>
   13640:	mov	r7, #1
   13644:	b	13420 <__assert_fail@plt+0x1de4>
   13648:	ldr	r3, [pc, #192]	; 13710 <__assert_fail@plt+0x20d4>
   1364c:	mov	r7, r5
   13650:	mov	r0, sl
   13654:	ldrh	r3, [r3]
   13658:	ldrh	r4, [r7], r6
   1365c:	strh	r3, [sl, r9]
   13660:	bl	14018 <__assert_fail@plt+0x29dc>
   13664:	subs	fp, r0, #0
   13668:	beq	136b4 <__assert_fail@plt+0x2078>
   1366c:	ldr	r2, [pc, #160]	; 13714 <__assert_fail@plt+0x20d8>
   13670:	strh	r4, [r5]
   13674:	ldrb	r3, [r2, #4]
   13678:	ldr	r0, [r2]
   1367c:	str	r0, [r5, r6]
   13680:	strb	r3, [r7, #4]
   13684:	b	1335c <__assert_fail@plt+0x1d20>
   13688:	mov	r0, sl
   1368c:	bl	112f4 <free@plt>
   13690:	bl	1148c <__errno_location@plt>
   13694:	mov	sl, #0
   13698:	mov	r3, #12
   1369c:	str	r3, [r0]
   136a0:	mov	r0, sl
   136a4:	add	sp, sp, #60	; 0x3c
   136a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136ac:	mov	r3, sl
   136b0:	b	134b4 <__assert_fail@plt+0x1e78>
   136b4:	bl	1148c <__errno_location@plt>
   136b8:	ldr	r1, [pc, #84]	; 13714 <__assert_fail@plt+0x20d8>
   136bc:	strh	r4, [r5]
   136c0:	ldrb	r3, [r1, #4]
   136c4:	ldr	r2, [r0]
   136c8:	ldr	r0, [r1]
   136cc:	cmp	r2, #12
   136d0:	str	r0, [r5, r6]
   136d4:	movne	r8, #2
   136d8:	moveq	r8, #3
   136dc:	strb	r3, [r7, #4]
   136e0:	b	13534 <__assert_fail@plt+0x1ef8>
   136e4:	cmp	fp, #0
   136e8:	beq	135cc <__assert_fail@plt+0x1f90>
   136ec:	mov	r0, fp
   136f0:	bl	11624 <closedir@plt>
   136f4:	b	135cc <__assert_fail@plt+0x1f90>
   136f8:	mov	r0, r3
   136fc:	bl	13248 <__assert_fail@plt+0x1c0c>
   13700:	ldr	r3, [pc, #4]	; 1370c <__assert_fail@plt+0x20d0>
   13704:	ldr	r3, [r3]
   13708:	b	132e0 <__assert_fail@plt+0x1ca4>
   1370c:	strdeq	ip, [r2], -r4
   13710:	andeq	sl, r1, r8, ror #28
   13714:	andeq	fp, r1, ip, lsl r1
   13718:	ldr	r3, [pc, #48]	; 13750 <__assert_fail@plt+0x2114>
   1371c:	push	{r4, lr}
   13720:	sub	sp, sp, #8
   13724:	ldr	r2, [r3]
   13728:	ldr	r4, [pc, #36]	; 13754 <__assert_fail@plt+0x2118>
   1372c:	mov	ip, #4
   13730:	str	r2, [sp, #4]
   13734:	mov	r3, r4
   13738:	add	r2, r4, #32
   1373c:	str	ip, [sp]
   13740:	bl	18da0 <__assert_fail@plt+0x7764>
   13744:	ldr	r0, [r4, r0, lsl #2]
   13748:	add	sp, sp, #8
   1374c:	pop	{r4, pc}
   13750:			; <UNDEFINED> instruction: 0x0002c1b4
   13754:	andeq	fp, r1, r4, lsr #2
   13758:	push	{r4, lr}
   1375c:	mov	r2, #0
   13760:	bl	132a4 <__assert_fail@plt+0x1c68>
   13764:	cmp	r0, #0
   13768:	popne	{r4, pc}
   1376c:	bl	18668 <__assert_fail@plt+0x702c>
   13770:	subs	r3, r1, #0
   13774:	beq	13784 <__assert_fail@plt+0x2148>
   13778:	ldrb	r3, [r3]
   1377c:	cmp	r3, #0
   13780:	bne	1378c <__assert_fail@plt+0x2150>
   13784:	mov	r0, #2
   13788:	bx	lr
   1378c:	b	13718 <__assert_fail@plt+0x20dc>
   13790:	subs	r3, r1, #0
   13794:	beq	137a4 <__assert_fail@plt+0x2168>
   13798:	ldrb	r3, [r3]
   1379c:	cmp	r3, #0
   137a0:	bne	137d4 <__assert_fail@plt+0x2198>
   137a4:	push	{r4, lr}
   137a8:	ldr	r0, [pc, #40]	; 137d8 <__assert_fail@plt+0x219c>
   137ac:	bl	113f0 <getenv@plt>
   137b0:	subs	r1, r0, #0
   137b4:	beq	137c4 <__assert_fail@plt+0x2188>
   137b8:	ldrb	r3, [r1]
   137bc:	cmp	r3, #0
   137c0:	bne	137cc <__assert_fail@plt+0x2190>
   137c4:	mov	r0, #2
   137c8:	pop	{r4, pc}
   137cc:	pop	{r4, lr}
   137d0:	ldr	r0, [pc, #4]	; 137dc <__assert_fail@plt+0x21a0>
   137d4:	b	13718 <__assert_fail@plt+0x20dc>
   137d8:	andeq	fp, r1, r8, ror #2
   137dc:	andeq	fp, r1, r8, ror r1
   137e0:	ldr	r2, [pc, #1524]	; 13ddc <__assert_fail@plt+0x27a0>
   137e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137e8:	and	r9, r1, #3
   137ec:	sub	sp, sp, #148	; 0x94
   137f0:	sub	r3, r9, #1
   137f4:	ldr	r2, [r2]
   137f8:	ands	r3, r3, r9
   137fc:	str	r3, [sp, #28]
   13800:	str	r2, [sp, #140]	; 0x8c
   13804:	bne	13cc0 <__assert_fail@plt+0x2684>
   13808:	cmp	r0, #0
   1380c:	beq	13d0c <__assert_fail@plt+0x26d0>
   13810:	ldrb	r5, [r0]
   13814:	cmp	r5, #0
   13818:	beq	13cd4 <__assert_fail@plt+0x2698>
   1381c:	cmp	r5, #47	; 0x2f
   13820:	mov	r4, r1
   13824:	str	r0, [sp, #8]
   13828:	beq	139d8 <__assert_fail@plt+0x239c>
   1382c:	bl	186a8 <__assert_fail@plt+0x706c>
   13830:	subs	r8, r0, #0
   13834:	beq	13a80 <__assert_fail@plt+0x2444>
   13838:	bl	11480 <strlen@plt>
   1383c:	ldr	r3, [sp, #8]
   13840:	cmp	r0, #4096	; 0x1000
   13844:	mov	r6, r0
   13848:	bcc	13ce8 <__assert_fail@plt+0x26ac>
   1384c:	add	r6, r8, r0
   13850:	mov	r7, r6
   13854:	mov	r2, #0
   13858:	str	r2, [sp, #16]
   1385c:	str	r2, [sp, #24]
   13860:	mov	sl, r2
   13864:	ldrb	r2, [r3]
   13868:	and	r1, r4, #4
   1386c:	str	r1, [sp, #8]
   13870:	str	r3, [sp, #20]
   13874:	cmp	r2, #0
   13878:	beq	13a24 <__assert_fail@plt+0x23e8>
   1387c:	cmp	r2, #47	; 0x2f
   13880:	movne	r1, r2
   13884:	bne	1389c <__assert_fail@plt+0x2260>
   13888:	ldrb	r1, [r3, #1]!
   1388c:	cmp	r1, #47	; 0x2f
   13890:	beq	13888 <__assert_fail@plt+0x224c>
   13894:	cmp	r1, #0
   13898:	beq	13a24 <__assert_fail@plt+0x23e8>
   1389c:	mov	r4, r3
   138a0:	b	138a8 <__assert_fail@plt+0x226c>
   138a4:	mov	r4, r5
   138a8:	ldrb	r2, [r4, #1]
   138ac:	add	r5, r4, #1
   138b0:	cmp	r2, #0
   138b4:	cmpne	r2, #47	; 0x2f
   138b8:	bne	138a4 <__assert_fail@plt+0x2268>
   138bc:	cmp	r5, r3
   138c0:	beq	13a24 <__assert_fail@plt+0x23e8>
   138c4:	sub	fp, r5, r3
   138c8:	cmp	fp, #1
   138cc:	beq	13a14 <__assert_fail@plt+0x23d8>
   138d0:	cmp	r1, #46	; 0x2e
   138d4:	cmpeq	fp, #2
   138d8:	beq	13b90 <__assert_fail@plt+0x2554>
   138dc:	ldrb	r2, [r6, #-1]
   138e0:	cmp	r2, #47	; 0x2f
   138e4:	movne	r2, #47	; 0x2f
   138e8:	strbne	r2, [r6], #1
   138ec:	add	r2, r6, fp
   138f0:	cmp	r7, r2
   138f4:	bhi	13934 <__assert_fail@plt+0x22f8>
   138f8:	ldr	r2, [pc, #1248]	; 13de0 <__assert_fail@plt+0x27a4>
   138fc:	sub	r7, r7, r8
   13900:	cmp	fp, r2
   13904:	addgt	r7, r7, #1
   13908:	addgt	r7, fp, r7
   1390c:	addle	r7, r7, #4096	; 0x1000
   13910:	mov	r0, r8
   13914:	mov	r1, r7
   13918:	str	r3, [sp, #12]
   1391c:	bl	1847c <__assert_fail@plt+0x6e40>
   13920:	sub	r6, r6, r8
   13924:	ldr	r3, [sp, #12]
   13928:	mov	r8, r0
   1392c:	add	r7, r0, r7
   13930:	add	r6, r0, r6
   13934:	mov	r1, r3
   13938:	mov	r0, r6
   1393c:	mov	r2, fp
   13940:	bl	1130c <memcpy@plt>
   13944:	ldr	r2, [sp, #8]
   13948:	sub	r3, r9, #2
   1394c:	cmp	r2, #0
   13950:	clz	r3, r3
   13954:	lsr	r3, r3, #5
   13958:	moveq	r3, #0
   1395c:	cmp	r3, #0
   13960:	strb	sl, [r0, fp]
   13964:	add	r6, r0, fp
   13968:	bne	139b8 <__assert_fail@plt+0x237c>
   1396c:	ldr	r3, [sp, #8]
   13970:	add	fp, sp, #32
   13974:	cmp	r3, #0
   13978:	mov	r2, fp
   1397c:	mov	r1, r8
   13980:	mov	r0, #3
   13984:	beq	13aa0 <__assert_fail@plt+0x2464>
   13988:	bl	115e8 <__xstat64@plt>
   1398c:	adds	r0, r0, #0
   13990:	movne	r0, #1
   13994:	cmp	r0, #0
   13998:	beq	139f8 <__assert_fail@plt+0x23bc>
   1399c:	bl	1148c <__errno_location@plt>
   139a0:	cmp	r9, #0
   139a4:	mov	fp, r0
   139a8:	ldr	r3, [r0]
   139ac:	beq	13c08 <__assert_fail@plt+0x25cc>
   139b0:	cmp	r9, #1
   139b4:	beq	13be4 <__assert_fail@plt+0x25a8>
   139b8:	str	sl, [sp, #48]	; 0x30
   139bc:	ldrb	r3, [r5]
   139c0:	cmp	r3, #0
   139c4:	cmpne	r9, #2
   139c8:	bne	13dc0 <__assert_fail@plt+0x2784>
   139cc:	ldrb	r2, [r5]
   139d0:	mov	r3, r5
   139d4:	b	13874 <__assert_fail@plt+0x2238>
   139d8:	mov	r0, #4096	; 0x1000
   139dc:	bl	18420 <__assert_fail@plt+0x6de4>
   139e0:	ldr	r3, [sp, #8]
   139e4:	mov	r6, r0
   139e8:	mov	r8, r0
   139ec:	add	r7, r0, #4096	; 0x1000
   139f0:	strb	r5, [r6], #1
   139f4:	b	13854 <__assert_fail@plt+0x2218>
   139f8:	ldr	r3, [sp, #48]	; 0x30
   139fc:	and	r3, r3, #61440	; 0xf000
   13a00:	cmp	r3, #40960	; 0xa000
   13a04:	beq	13ab0 <__assert_fail@plt+0x2474>
   13a08:	cmp	r3, #16384	; 0x4000
   13a0c:	beq	139cc <__assert_fail@plt+0x2390>
   13a10:	b	139bc <__assert_fail@plt+0x2380>
   13a14:	cmp	r1, #46	; 0x2e
   13a18:	bne	138dc <__assert_fail@plt+0x22a0>
   13a1c:	mov	r3, r5
   13a20:	b	13874 <__assert_fail@plt+0x2238>
   13a24:	add	r3, r8, #1
   13a28:	cmp	r6, r3
   13a2c:	bls	13a3c <__assert_fail@plt+0x2400>
   13a30:	ldrb	r3, [r6, #-1]
   13a34:	cmp	r3, #47	; 0x2f
   13a38:	beq	13d70 <__assert_fail@plt+0x2734>
   13a3c:	add	r3, r6, #1
   13a40:	cmp	r7, r3
   13a44:	mov	r3, #0
   13a48:	strb	r3, [r6]
   13a4c:	beq	13a64 <__assert_fail@plt+0x2428>
   13a50:	sub	r1, r6, r8
   13a54:	mov	r0, r8
   13a58:	add	r1, r1, #1
   13a5c:	bl	1847c <__assert_fail@plt+0x6e40>
   13a60:	mov	r8, r0
   13a64:	ldr	r0, [sp, #24]
   13a68:	bl	112f4 <free@plt>
   13a6c:	ldr	r3, [sp, #16]
   13a70:	cmp	r3, #0
   13a74:	beq	13a80 <__assert_fail@plt+0x2444>
   13a78:	mov	r0, r3
   13a7c:	bl	14f30 <__assert_fail@plt+0x38f4>
   13a80:	ldr	r3, [pc, #852]	; 13ddc <__assert_fail@plt+0x27a0>
   13a84:	ldr	r2, [sp, #140]	; 0x8c
   13a88:	mov	r0, r8
   13a8c:	ldr	r3, [r3]
   13a90:	cmp	r2, r3
   13a94:	bne	13dd8 <__assert_fail@plt+0x279c>
   13a98:	add	sp, sp, #148	; 0x94
   13a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa0:	bl	11618 <__lxstat64@plt>
   13aa4:	adds	r0, r0, #0
   13aa8:	movne	r0, #1
   13aac:	b	13994 <__assert_fail@plt+0x2358>
   13ab0:	ldr	r3, [sp, #16]
   13ab4:	cmp	r3, #0
   13ab8:	beq	13c70 <__assert_fail@plt+0x2634>
   13abc:	mov	r2, fp
   13ac0:	ldrd	r0, [sp, #16]
   13ac4:	bl	142b4 <__assert_fail@plt+0x2c78>
   13ac8:	cmp	r0, #0
   13acc:	bne	13b7c <__assert_fail@plt+0x2540>
   13ad0:	mov	r2, fp
   13ad4:	ldrd	r0, [sp, #16]
   13ad8:	bl	1424c <__assert_fail@plt+0x2c10>
   13adc:	ldr	r1, [sp, #80]	; 0x50
   13ae0:	mov	r0, r8
   13ae4:	bl	18a7c <__assert_fail@plt+0x7440>
   13ae8:	subs	fp, r0, #0
   13aec:	beq	13d28 <__assert_fail@plt+0x26ec>
   13af0:	bl	11480 <strlen@plt>
   13af4:	mov	r4, r0
   13af8:	mov	r0, r5
   13afc:	bl	11480 <strlen@plt>
   13b00:	ldr	r3, [sp, #28]
   13b04:	cmp	r3, #0
   13b08:	add	r3, r4, r0
   13b0c:	mov	r2, r0
   13b10:	add	r3, r3, #1
   13b14:	beq	13c9c <__assert_fail@plt+0x2660>
   13b18:	ldr	r1, [sp, #28]
   13b1c:	cmp	r3, r1
   13b20:	bhi	13d48 <__assert_fail@plt+0x270c>
   13b24:	mov	r1, r5
   13b28:	ldr	r5, [sp, #24]
   13b2c:	add	r2, r2, #1
   13b30:	add	r0, r5, r4
   13b34:	bl	112e8 <memmove@plt>
   13b38:	mov	r2, r4
   13b3c:	mov	r1, fp
   13b40:	mov	r0, r5
   13b44:	bl	1130c <memcpy@plt>
   13b48:	ldrb	r3, [fp]
   13b4c:	add	r2, r8, #1
   13b50:	cmp	r3, #47	; 0x2f
   13b54:	strbeq	r3, [r8]
   13b58:	moveq	r6, r2
   13b5c:	str	r0, [sp, #20]
   13b60:	beq	13b6c <__assert_fail@plt+0x2530>
   13b64:	cmp	r6, r2
   13b68:	bhi	13d7c <__assert_fail@plt+0x2740>
   13b6c:	mov	r0, fp
   13b70:	bl	112f4 <free@plt>
   13b74:	ldr	r5, [sp, #20]
   13b78:	b	139cc <__assert_fail@plt+0x2390>
   13b7c:	cmp	r9, #2
   13b80:	bne	13c30 <__assert_fail@plt+0x25f4>
   13b84:	ldrb	r2, [r4, #1]
   13b88:	mov	r3, r5
   13b8c:	b	13874 <__assert_fail@plt+0x2238>
   13b90:	ldrb	r1, [r3, #1]
   13b94:	cmp	r1, #46	; 0x2e
   13b98:	bne	138dc <__assert_fail@plt+0x22a0>
   13b9c:	add	r3, r8, #1
   13ba0:	cmp	r6, r3
   13ba4:	bls	13a1c <__assert_fail@plt+0x23e0>
   13ba8:	sub	r1, r6, #1
   13bac:	cmp	r8, r1
   13bb0:	bcs	13db4 <__assert_fail@plt+0x2778>
   13bb4:	ldrb	r3, [r6, #-2]
   13bb8:	cmp	r3, #47	; 0x2f
   13bbc:	beq	13db4 <__assert_fail@plt+0x2778>
   13bc0:	sub	r3, r6, #2
   13bc4:	cmp	r3, r8
   13bc8:	mov	r6, r3
   13bcc:	beq	13a1c <__assert_fail@plt+0x23e0>
   13bd0:	ldrb	r1, [r3, #-1]
   13bd4:	sub	r3, r3, #1
   13bd8:	cmp	r1, #47	; 0x2f
   13bdc:	beq	13a1c <__assert_fail@plt+0x23e0>
   13be0:	b	13bc4 <__assert_fail@plt+0x2588>
   13be4:	ldr	r1, [pc, #504]	; 13de4 <__assert_fail@plt+0x27a8>
   13be8:	mov	r0, r5
   13bec:	str	r3, [sp, #12]
   13bf0:	bl	11630 <strspn@plt>
   13bf4:	ldr	r3, [sp, #12]
   13bf8:	ldrb	r2, [r5, r0]
   13bfc:	cmp	r3, #2
   13c00:	cmpeq	r2, #0
   13c04:	beq	13b84 <__assert_fail@plt+0x2548>
   13c08:	ldr	r0, [sp, #24]
   13c0c:	str	r3, [sp, #8]
   13c10:	bl	112f4 <free@plt>
   13c14:	mov	r0, r8
   13c18:	bl	112f4 <free@plt>
   13c1c:	ldr	r3, [sp, #16]
   13c20:	cmp	r3, #0
   13c24:	ldr	r3, [sp, #8]
   13c28:	beq	13c64 <__assert_fail@plt+0x2628>
   13c2c:	b	13c54 <__assert_fail@plt+0x2618>
   13c30:	bl	1148c <__errno_location@plt>
   13c34:	mov	r3, #40	; 0x28
   13c38:	mov	fp, r0
   13c3c:	ldr	r0, [sp, #24]
   13c40:	str	r3, [sp, #8]
   13c44:	bl	112f4 <free@plt>
   13c48:	mov	r0, r8
   13c4c:	bl	112f4 <free@plt>
   13c50:	ldr	r3, [sp, #8]
   13c54:	ldr	r0, [sp, #16]
   13c58:	str	r3, [sp, #8]
   13c5c:	bl	14f30 <__assert_fail@plt+0x38f4>
   13c60:	ldr	r3, [sp, #8]
   13c64:	str	r3, [fp]
   13c68:	mov	r8, #0
   13c6c:	b	13a80 <__assert_fail@plt+0x2444>
   13c70:	ldr	r3, [pc, #368]	; 13de8 <__assert_fail@plt+0x27ac>
   13c74:	ldr	r1, [sp, #16]
   13c78:	str	r3, [sp]
   13c7c:	ldr	r2, [pc, #360]	; 13dec <__assert_fail@plt+0x27b0>
   13c80:	ldr	r3, [pc, #360]	; 13df0 <__assert_fail@plt+0x27b4>
   13c84:	mov	r0, #7
   13c88:	bl	14d30 <__assert_fail@plt+0x36f4>
   13c8c:	subs	r3, r0, #0
   13c90:	str	r3, [sp, #16]
   13c94:	bne	13abc <__assert_fail@plt+0x2480>
   13c98:	bl	18668 <__assert_fail@plt+0x702c>
   13c9c:	cmp	r3, #4096	; 0x1000
   13ca0:	movcc	r3, #4096	; 0x1000
   13ca4:	str	r0, [sp, #12]
   13ca8:	mov	r0, r3
   13cac:	str	r3, [sp, #28]
   13cb0:	bl	18420 <__assert_fail@plt+0x6de4>
   13cb4:	ldr	r2, [sp, #12]
   13cb8:	str	r0, [sp, #24]
   13cbc:	b	13b24 <__assert_fail@plt+0x24e8>
   13cc0:	bl	1148c <__errno_location@plt>
   13cc4:	mov	r3, #22
   13cc8:	mov	r8, #0
   13ccc:	str	r3, [r0]
   13cd0:	b	13a80 <__assert_fail@plt+0x2444>
   13cd4:	bl	1148c <__errno_location@plt>
   13cd8:	mov	r3, #2
   13cdc:	mov	r8, r5
   13ce0:	str	r3, [r0]
   13ce4:	b	13a80 <__assert_fail@plt+0x2444>
   13ce8:	mov	r0, r8
   13cec:	mov	r1, #4096	; 0x1000
   13cf0:	str	r3, [sp, #8]
   13cf4:	bl	1847c <__assert_fail@plt+0x6e40>
   13cf8:	ldr	r3, [sp, #8]
   13cfc:	mov	r8, r0
   13d00:	add	r6, r0, r6
   13d04:	add	r7, r0, #4096	; 0x1000
   13d08:	b	13854 <__assert_fail@plt+0x2218>
   13d0c:	str	r0, [sp, #8]
   13d10:	bl	1148c <__errno_location@plt>
   13d14:	ldr	r3, [sp, #8]
   13d18:	mov	r2, #22
   13d1c:	mov	r8, r3
   13d20:	str	r2, [r0]
   13d24:	b	13a80 <__assert_fail@plt+0x2444>
   13d28:	bl	1148c <__errno_location@plt>
   13d2c:	cmp	r9, #2
   13d30:	mov	fp, r0
   13d34:	ldr	r3, [r0]
   13d38:	bne	13c3c <__assert_fail@plt+0x2600>
   13d3c:	cmp	r3, #12
   13d40:	bne	13b84 <__assert_fail@plt+0x2548>
   13d44:	b	13c3c <__assert_fail@plt+0x2600>
   13d48:	str	r0, [sp, #20]
   13d4c:	mov	r1, r3
   13d50:	ldr	r0, [sp, #24]
   13d54:	str	r3, [sp, #12]
   13d58:	bl	1847c <__assert_fail@plt+0x6e40>
   13d5c:	ldr	r3, [sp, #12]
   13d60:	ldr	r2, [sp, #20]
   13d64:	str	r3, [sp, #28]
   13d68:	str	r0, [sp, #24]
   13d6c:	b	13b24 <__assert_fail@plt+0x24e8>
   13d70:	mov	r3, r6
   13d74:	sub	r6, r6, #1
   13d78:	b	13a40 <__assert_fail@plt+0x2404>
   13d7c:	sub	r3, r6, #1
   13d80:	cmp	r8, r3
   13d84:	bcs	13dd0 <__assert_fail@plt+0x2794>
   13d88:	ldrb	r2, [r6, #-2]
   13d8c:	cmp	r2, #47	; 0x2f
   13d90:	beq	13dd0 <__assert_fail@plt+0x2794>
   13d94:	sub	r3, r6, #2
   13d98:	cmp	r3, r8
   13d9c:	mov	r6, r3
   13da0:	beq	13b6c <__assert_fail@plt+0x2530>
   13da4:	ldrb	r2, [r3, #-1]!
   13da8:	cmp	r2, #47	; 0x2f
   13dac:	beq	13b6c <__assert_fail@plt+0x2530>
   13db0:	b	13d98 <__assert_fail@plt+0x275c>
   13db4:	mov	r3, r5
   13db8:	mov	r6, r1
   13dbc:	b	13874 <__assert_fail@plt+0x2238>
   13dc0:	bl	1148c <__errno_location@plt>
   13dc4:	mov	r3, #20
   13dc8:	mov	fp, r0
   13dcc:	b	13c08 <__assert_fail@plt+0x25cc>
   13dd0:	mov	r6, r3
   13dd4:	b	13b6c <__assert_fail@plt+0x2530>
   13dd8:	bl	1133c <__stack_chk_fail@plt>
   13ddc:	andeq	fp, r2, r8, lsl #30
   13de0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13de4:	ldrdeq	fp, [r1], -r8
   13de8:	andeq	r5, r1, r0, asr #11
   13dec:	ldrdeq	r5, [r1], -ip
   13df0:	andeq	r5, r1, r4, ror r5
   13df4:	ldr	r3, [pc, #4]	; 13e00 <__assert_fail@plt+0x27c4>
   13df8:	str	r0, [r3]
   13dfc:	bx	lr
   13e00:	strdeq	ip, [r2], -r8
   13e04:	push	{r4, r5, lr}
   13e08:	sub	sp, sp, #12
   13e0c:	ldr	r5, [pc, #244]	; 13f08 <__assert_fail@plt+0x28cc>
   13e10:	ldr	r4, [r5]
   13e14:	mov	r0, r4
   13e18:	bl	18920 <__assert_fail@plt+0x72e4>
   13e1c:	cmp	r0, #0
   13e20:	bne	13eb4 <__assert_fail@plt+0x2878>
   13e24:	mov	r0, r4
   13e28:	bl	18e54 <__assert_fail@plt+0x7818>
   13e2c:	cmp	r0, #0
   13e30:	bne	13e54 <__assert_fail@plt+0x2818>
   13e34:	add	sp, sp, #12
   13e38:	pop	{r4, r5, lr}
   13e3c:	b	13f40 <__assert_fail@plt+0x2904>
   13e40:	bl	188c0 <__assert_fail@plt+0x7284>
   13e44:	cmp	r0, #0
   13e48:	ldr	r0, [r5]
   13e4c:	beq	13ed8 <__assert_fail@plt+0x289c>
   13e50:	bl	18e54 <__assert_fail@plt+0x7818>
   13e54:	mov	r2, #5
   13e58:	ldr	r1, [pc, #172]	; 13f0c <__assert_fail@plt+0x28d0>
   13e5c:	mov	r0, #0
   13e60:	bl	11330 <dcgettext@plt>
   13e64:	ldr	r3, [pc, #164]	; 13f10 <__assert_fail@plt+0x28d4>
   13e68:	ldr	r4, [r3]
   13e6c:	mov	r5, r0
   13e70:	bl	1148c <__errno_location@plt>
   13e74:	cmp	r4, #0
   13e78:	mov	r2, r0
   13e7c:	beq	13ef0 <__assert_fail@plt+0x28b4>
   13e80:	mov	r0, r4
   13e84:	ldr	r4, [r2]
   13e88:	bl	17660 <__assert_fail@plt+0x6024>
   13e8c:	mov	r1, r4
   13e90:	str	r5, [sp]
   13e94:	ldr	r2, [pc, #120]	; 13f14 <__assert_fail@plt+0x28d8>
   13e98:	mov	r3, r0
   13e9c:	mov	r0, #0
   13ea0:	bl	113cc <error@plt>
   13ea4:	bl	13f40 <__assert_fail@plt+0x2904>
   13ea8:	ldr	r3, [pc, #104]	; 13f18 <__assert_fail@plt+0x28dc>
   13eac:	ldr	r0, [r3]
   13eb0:	bl	11300 <_exit@plt>
   13eb4:	mov	r3, #1
   13eb8:	str	r3, [sp]
   13ebc:	mov	r0, r4
   13ec0:	mov	r2, #0
   13ec4:	mov	r3, #0
   13ec8:	bl	1895c <__assert_fail@plt+0x7320>
   13ecc:	cmp	r0, #0
   13ed0:	ldr	r0, [r5]
   13ed4:	beq	13e40 <__assert_fail@plt+0x2804>
   13ed8:	bl	18e54 <__assert_fail@plt+0x7818>
   13edc:	cmp	r0, #0
   13ee0:	bne	13e54 <__assert_fail@plt+0x2818>
   13ee4:	add	sp, sp, #12
   13ee8:	pop	{r4, r5, lr}
   13eec:	b	13f40 <__assert_fail@plt+0x2904>
   13ef0:	ldr	r1, [r0]
   13ef4:	mov	r3, r5
   13ef8:	mov	r0, r4
   13efc:	ldr	r2, [pc, #24]	; 13f1c <__assert_fail@plt+0x28e0>
   13f00:	bl	113cc <error@plt>
   13f04:	b	13ea4 <__assert_fail@plt+0x2868>
   13f08:	ldrdeq	ip, [r2], -r0
   13f0c:	andeq	fp, r1, r8, asr #3
   13f10:	strdeq	ip, [r2], -r8
   13f14:	ldrdeq	fp, [r1], -ip
   13f18:	andeq	ip, r2, r0, ror r1
   13f1c:	andeq	fp, r1, r0, ror #3
   13f20:	ldr	r3, [pc, #4]	; 13f2c <__assert_fail@plt+0x28f0>
   13f24:	str	r0, [r3]
   13f28:	bx	lr
   13f2c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13f30:	ldr	r3, [pc, #4]	; 13f3c <__assert_fail@plt+0x2900>
   13f34:	strb	r0, [r3, #4]
   13f38:	bx	lr
   13f3c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13f40:	ldr	r3, [pc, #180]	; 13ffc <__assert_fail@plt+0x29c0>
   13f44:	push	{r4, r5, r6, lr}
   13f48:	sub	sp, sp, #8
   13f4c:	ldr	r0, [r3]
   13f50:	bl	18e54 <__assert_fail@plt+0x7818>
   13f54:	cmp	r0, #0
   13f58:	beq	13f80 <__assert_fail@plt+0x2944>
   13f5c:	bl	1148c <__errno_location@plt>
   13f60:	ldr	r5, [pc, #152]	; 14000 <__assert_fail@plt+0x29c4>
   13f64:	ldrb	r3, [r5, #4]
   13f68:	cmp	r3, #0
   13f6c:	mov	r4, r0
   13f70:	beq	13f9c <__assert_fail@plt+0x2960>
   13f74:	ldr	r3, [r0]
   13f78:	cmp	r3, #32
   13f7c:	bne	13f9c <__assert_fail@plt+0x2960>
   13f80:	ldr	r3, [pc, #124]	; 14004 <__assert_fail@plt+0x29c8>
   13f84:	ldr	r0, [r3]
   13f88:	bl	18e54 <__assert_fail@plt+0x7818>
   13f8c:	cmp	r0, #0
   13f90:	bne	13fdc <__assert_fail@plt+0x29a0>
   13f94:	add	sp, sp, #8
   13f98:	pop	{r4, r5, r6, pc}
   13f9c:	mov	r2, #5
   13fa0:	ldr	r1, [pc, #96]	; 14008 <__assert_fail@plt+0x29cc>
   13fa4:	mov	r0, #0
   13fa8:	bl	11330 <dcgettext@plt>
   13fac:	mov	r6, r0
   13fb0:	ldr	r0, [r5]
   13fb4:	cmp	r0, #0
   13fb8:	beq	13fe8 <__assert_fail@plt+0x29ac>
   13fbc:	ldr	r4, [r4]
   13fc0:	bl	17660 <__assert_fail@plt+0x6024>
   13fc4:	mov	r1, r4
   13fc8:	str	r6, [sp]
   13fcc:	ldr	r2, [pc, #56]	; 1400c <__assert_fail@plt+0x29d0>
   13fd0:	mov	r3, r0
   13fd4:	mov	r0, #0
   13fd8:	bl	113cc <error@plt>
   13fdc:	ldr	r3, [pc, #44]	; 14010 <__assert_fail@plt+0x29d4>
   13fe0:	ldr	r0, [r3]
   13fe4:	bl	11300 <_exit@plt>
   13fe8:	mov	r3, r6
   13fec:	ldr	r1, [r4]
   13ff0:	ldr	r2, [pc, #28]	; 14014 <__assert_fail@plt+0x29d8>
   13ff4:	bl	113cc <error@plt>
   13ff8:	b	13fdc <__assert_fail@plt+0x29a0>
   13ffc:	ldrdeq	ip, [r2], -r4
   14000:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   14004:	andeq	ip, r2, r8, asr #3
   14008:	andeq	fp, r1, r4, ror #3
   1400c:	ldrdeq	fp, [r1], -ip
   14010:	andeq	ip, r2, r0, ror r1
   14014:	andeq	fp, r1, r0, ror #3
   14018:	push	{r4, r5, r6, r7, r8, lr}
   1401c:	bl	113d8 <opendir@plt>
   14020:	subs	r4, r0, #0
   14024:	beq	14034 <__assert_fail@plt+0x29f8>
   14028:	bl	11594 <dirfd@plt>
   1402c:	cmp	r0, #2
   14030:	bls	1403c <__assert_fail@plt+0x2a00>
   14034:	mov	r0, r4
   14038:	pop	{r4, r5, r6, r7, r8, pc}
   1403c:	mov	r2, #3
   14040:	ldr	r1, [pc, #84]	; 1409c <__assert_fail@plt+0x2a60>
   14044:	bl	18774 <__assert_fail@plt+0x7138>
   14048:	mov	r6, r0
   1404c:	bl	1148c <__errno_location@plt>
   14050:	cmp	r6, #0
   14054:	mov	r5, r0
   14058:	bge	1407c <__assert_fail@plt+0x2a40>
   1405c:	ldr	r7, [r0]
   14060:	mov	r8, #0
   14064:	mov	r0, r4
   14068:	mov	r4, r8
   1406c:	bl	11624 <closedir@plt>
   14070:	str	r7, [r5]
   14074:	mov	r0, r4
   14078:	pop	{r4, r5, r6, r7, r8, pc}
   1407c:	mov	r0, r6
   14080:	bl	11588 <fdopendir@plt>
   14084:	ldr	r7, [r5]
   14088:	subs	r8, r0, #0
   1408c:	bne	14064 <__assert_fail@plt+0x2a28>
   14090:	mov	r0, r6
   14094:	bl	1160c <close@plt>
   14098:	b	14064 <__assert_fail@plt+0x2a28>
   1409c:	andeq	r0, r0, r6, lsl #8
   140a0:	push	{r4, lr}
   140a4:	bl	1411c <__assert_fail@plt+0x2ae0>
   140a8:	cmp	r0, #0
   140ac:	popne	{r4, pc}
   140b0:	bl	18668 <__assert_fail@plt+0x702c>
   140b4:	push	{r4, r5, r6, lr}
   140b8:	mov	r4, r0
   140bc:	ldrb	ip, [r0]
   140c0:	sub	r5, ip, #47	; 0x2f
   140c4:	bl	14174 <__assert_fail@plt+0x2b38>
   140c8:	clz	r5, r5
   140cc:	lsr	r5, r5, #5
   140d0:	sub	r0, r0, r4
   140d4:	cmp	r0, r5
   140d8:	popls	{r4, r5, r6, pc}
   140dc:	add	r3, r4, r0
   140e0:	ldrb	r3, [r3, #-1]
   140e4:	cmp	r3, #47	; 0x2f
   140e8:	popne	{r4, r5, r6, pc}
   140ec:	sub	r0, r0, #2
   140f0:	sub	ip, r4, #1
   140f4:	add	r3, r4, r0
   140f8:	add	ip, ip, r5
   140fc:	rsb	r2, r4, #1
   14100:	cmp	r3, ip
   14104:	add	r0, r2, r3
   14108:	popeq	{r4, r5, r6, pc}
   1410c:	ldrb	r1, [r3], #-1
   14110:	cmp	r1, #47	; 0x2f
   14114:	beq	14100 <__assert_fail@plt+0x2ac4>
   14118:	pop	{r4, r5, r6, pc}
   1411c:	push	{r4, r5, r6, lr}
   14120:	mov	r6, r0
   14124:	bl	140b4 <__assert_fail@plt+0x2a78>
   14128:	add	r3, r0, #1
   1412c:	mov	r4, r0
   14130:	cmp	r0, #0
   14134:	movne	r0, r3
   14138:	addeq	r0, r3, #1
   1413c:	bl	113fc <malloc@plt>
   14140:	subs	r5, r0, #0
   14144:	beq	1416c <__assert_fail@plt+0x2b30>
   14148:	mov	r2, r4
   1414c:	mov	r1, r6
   14150:	bl	1130c <memcpy@plt>
   14154:	cmp	r4, #0
   14158:	moveq	r3, #46	; 0x2e
   1415c:	moveq	r4, #1
   14160:	strbeq	r3, [r5]
   14164:	mov	r3, #0
   14168:	strb	r3, [r5, r4]
   1416c:	mov	r0, r5
   14170:	pop	{r4, r5, r6, pc}
   14174:	ldrb	r3, [r0]
   14178:	cmp	r3, #47	; 0x2f
   1417c:	bne	1418c <__assert_fail@plt+0x2b50>
   14180:	ldrb	r3, [r0, #1]!
   14184:	cmp	r3, #47	; 0x2f
   14188:	beq	14180 <__assert_fail@plt+0x2b44>
   1418c:	cmp	r3, #0
   14190:	bxeq	lr
   14194:	mov	r2, r0
   14198:	mov	r1, #0
   1419c:	cmp	r3, #47	; 0x2f
   141a0:	moveq	r1, #1
   141a4:	beq	141b4 <__assert_fail@plt+0x2b78>
   141a8:	cmp	r1, #0
   141ac:	movne	r0, r2
   141b0:	movne	r1, #0
   141b4:	ldrb	r3, [r2, #1]!
   141b8:	cmp	r3, #0
   141bc:	bne	1419c <__assert_fail@plt+0x2b60>
   141c0:	bx	lr
   141c4:	push	{r4, lr}
   141c8:	mov	r4, r0
   141cc:	bl	11480 <strlen@plt>
   141d0:	cmp	r0, #1
   141d4:	popls	{r4, pc}
   141d8:	add	r2, r4, r0
   141dc:	mov	r3, r0
   141e0:	ldrb	r2, [r2, #-1]
   141e4:	cmp	r2, #47	; 0x2f
   141e8:	subeq	r3, r0, #2
   141ec:	addeq	r3, r4, r3
   141f0:	rsbeq	r1, r4, #1
   141f4:	popne	{r4, pc}
   141f8:	cmp	r3, r4
   141fc:	add	r0, r1, r3
   14200:	popeq	{r4, pc}
   14204:	ldrb	r2, [r3], #-1
   14208:	cmp	r2, #47	; 0x2f
   1420c:	popne	{r4, pc}
   14210:	b	141f8 <__assert_fail@plt+0x2bbc>
   14214:	push	{r4, lr}
   14218:	mov	r4, r0
   1421c:	bl	14174 <__assert_fail@plt+0x2b38>
   14220:	ldrb	r3, [r0]
   14224:	cmp	r3, #0
   14228:	movne	r4, r0
   1422c:	mov	r0, r4
   14230:	bl	141c4 <__assert_fail@plt+0x2b88>
   14234:	mov	r2, #0
   14238:	ldrb	r3, [r4, r0]
   1423c:	strb	r2, [r4, r0]
   14240:	subs	r0, r3, r2
   14244:	movne	r0, #1
   14248:	pop	{r4, pc}
   1424c:	push	{r4, r5, r6, r7, r8, lr}
   14250:	subs	r8, r0, #0
   14254:	popeq	{r4, r5, r6, r7, r8, pc}
   14258:	mov	r0, #24
   1425c:	mov	r4, r1
   14260:	mov	r7, r2
   14264:	bl	18420 <__assert_fail@plt+0x6de4>
   14268:	mov	r6, r0
   1426c:	mov	r0, r4
   14270:	bl	1864c <__assert_fail@plt+0x7010>
   14274:	ldrd	r4, [r7, #96]	; 0x60
   14278:	ldrd	r2, [r7]
   1427c:	mov	r1, r6
   14280:	strd	r4, [r6, #8]
   14284:	strd	r2, [r6, #16]
   14288:	str	r0, [r6]
   1428c:	mov	r0, r8
   14290:	bl	1535c <__assert_fail@plt+0x3d20>
   14294:	cmp	r0, #0
   14298:	beq	142b0 <__assert_fail@plt+0x2c74>
   1429c:	cmp	r6, r0
   142a0:	popeq	{r4, r5, r6, r7, r8, pc}
   142a4:	mov	r0, r6
   142a8:	pop	{r4, r5, r6, r7, r8, lr}
   142ac:	b	155c0 <__assert_fail@plt+0x3f84>
   142b0:	bl	18668 <__assert_fail@plt+0x702c>
   142b4:	push	{r4, r5, r6, lr}
   142b8:	sub	sp, sp, #32
   142bc:	ldr	r6, [pc, #80]	; 14314 <__assert_fail@plt+0x2cd8>
   142c0:	subs	r3, r0, #0
   142c4:	moveq	r0, r3
   142c8:	ldr	ip, [r6]
   142cc:	str	ip, [sp, #28]
   142d0:	beq	142f8 <__assert_fail@plt+0x2cbc>
   142d4:	ldrd	r4, [r2, #96]	; 0x60
   142d8:	ldrd	r2, [r2]
   142dc:	str	r1, [sp]
   142e0:	mov	r1, sp
   142e4:	strd	r4, [sp, #8]
   142e8:	strd	r2, [sp, #16]
   142ec:	bl	14a78 <__assert_fail@plt+0x343c>
   142f0:	adds	r0, r0, #0
   142f4:	movne	r0, #1
   142f8:	ldr	r2, [sp, #28]
   142fc:	ldr	r3, [r6]
   14300:	cmp	r2, r3
   14304:	bne	14310 <__assert_fail@plt+0x2cd4>
   14308:	add	sp, sp, #32
   1430c:	pop	{r4, r5, r6, pc}
   14310:	bl	1133c <__stack_chk_fail@plt>
   14314:	andeq	fp, r2, r8, lsl #30
   14318:	push	{r4, lr}
   1431c:	bl	1432c <__assert_fail@plt+0x2cf0>
   14320:	cmp	r0, #0
   14324:	popne	{r4, pc}
   14328:	bl	18668 <__assert_fail@plt+0x702c>
   1432c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14330:	mov	r6, r1
   14334:	mov	r9, r2
   14338:	mov	r7, r0
   1433c:	bl	14174 <__assert_fail@plt+0x2b38>
   14340:	mov	r4, r0
   14344:	bl	141c4 <__assert_fail@plt+0x2b88>
   14348:	sub	r4, r4, r7
   1434c:	mov	r5, r0
   14350:	mov	r0, r6
   14354:	bl	11480 <strlen@plt>
   14358:	cmp	r5, #0
   1435c:	add	r4, r4, r5
   14360:	mov	r8, r0
   14364:	beq	143e4 <__assert_fail@plt+0x2da8>
   14368:	add	r3, r7, r4
   1436c:	ldrb	r3, [r3, #-1]
   14370:	cmp	r3, #47	; 0x2f
   14374:	beq	143d8 <__assert_fail@plt+0x2d9c>
   14378:	ldrb	r3, [r6]
   1437c:	cmp	r3, #47	; 0x2f
   14380:	beq	143d8 <__assert_fail@plt+0x2d9c>
   14384:	mov	r5, #1
   14388:	mov	sl, #47	; 0x2f
   1438c:	add	r0, r8, #1
   14390:	add	r0, r0, r4
   14394:	add	r0, r0, r5
   14398:	bl	113fc <malloc@plt>
   1439c:	subs	fp, r0, #0
   143a0:	beq	143d0 <__assert_fail@plt+0x2d94>
   143a4:	mov	r2, r4
   143a8:	mov	r1, r7
   143ac:	bl	1142c <mempcpy@plt>
   143b0:	cmp	r9, #0
   143b4:	mov	r2, r8
   143b8:	mov	r1, r6
   143bc:	strb	sl, [r0], r5
   143c0:	strne	r0, [r9]
   143c4:	bl	1142c <mempcpy@plt>
   143c8:	mov	r3, #0
   143cc:	strb	r3, [r0]
   143d0:	mov	r0, fp
   143d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d8:	mov	r5, #0
   143dc:	mov	sl, r5
   143e0:	b	1438c <__assert_fail@plt+0x2d50>
   143e4:	ldrb	r3, [r6]
   143e8:	cmp	r3, #47	; 0x2f
   143ec:	moveq	r5, #1
   143f0:	movne	sl, #0
   143f4:	moveq	sl, #46	; 0x2e
   143f8:	b	1438c <__assert_fail@plt+0x2d50>
   143fc:	andeq	r0, r0, r0
   14400:	cmp	r0, #10
   14404:	movcc	r0, #10
   14408:	push	{r4, r5, r6, r7, r8, lr}
   1440c:	orr	r7, r0, #1
   14410:	cmn	r7, #1
   14414:	beq	1448c <__assert_fail@plt+0x2e50>
   14418:	ldr	r8, [pc, #116]	; 14494 <__assert_fail@plt+0x2e58>
   1441c:	umull	r2, r3, r8, r7
   14420:	cmp	r7, #9
   14424:	lsr	r3, r3, #1
   14428:	add	r3, r3, r3, lsl #1
   1442c:	sub	r3, r7, r3
   14430:	bls	14478 <__assert_fail@plt+0x2e3c>
   14434:	cmp	r3, #0
   14438:	beq	14480 <__assert_fail@plt+0x2e44>
   1443c:	mov	r6, #16
   14440:	mov	r5, #9
   14444:	mov	r4, #3
   14448:	b	14458 <__assert_fail@plt+0x2e1c>
   1444c:	cmp	r1, #0
   14450:	add	r6, r6, #8
   14454:	beq	14480 <__assert_fail@plt+0x2e44>
   14458:	add	r4, r4, #2
   1445c:	mov	r1, r4
   14460:	mov	r0, r7
   14464:	bl	19dac <__assert_fail@plt+0x8770>
   14468:	add	r5, r5, r6
   1446c:	cmp	r5, r7
   14470:	mov	r3, r1
   14474:	bcc	1444c <__assert_fail@plt+0x2e10>
   14478:	cmp	r3, #0
   1447c:	bne	1448c <__assert_fail@plt+0x2e50>
   14480:	add	r7, r7, #2
   14484:	cmn	r7, #1
   14488:	bne	1441c <__assert_fail@plt+0x2de0>
   1448c:	mov	r0, r7
   14490:	pop	{r4, r5, r6, r7, r8, pc}
   14494:	bge	feabef48 <optarg@@GLIBC_2.4+0xfea92d70>
   14498:	push	{r4, lr}
   1449c:	ror	r0, r0, #3
   144a0:	bl	19dac <__assert_fail@plt+0x8770>
   144a4:	mov	r0, r1
   144a8:	pop	{r4, pc}
   144ac:	sub	r0, r1, r0
   144b0:	clz	r0, r0
   144b4:	lsr	r0, r0, #5
   144b8:	bx	lr
   144bc:	push	{r4, lr}
   144c0:	mov	r4, r0
   144c4:	mov	r0, r1
   144c8:	ldr	r3, [r4, #24]
   144cc:	ldr	r1, [r4, #8]
   144d0:	blx	r3
   144d4:	ldr	r3, [r4, #8]
   144d8:	cmp	r3, r0
   144dc:	bls	144ec <__assert_fail@plt+0x2eb0>
   144e0:	ldr	r3, [r4]
   144e4:	add	r0, r3, r0, lsl #3
   144e8:	pop	{r4, pc}
   144ec:	bl	11600 <abort@plt>
   144f0:	push	{r4, r5, r6, r7, r8, lr}
   144f4:	mov	r8, r2
   144f8:	mov	r5, r1
   144fc:	mov	r7, r3
   14500:	mov	r6, r0
   14504:	bl	144bc <__assert_fail@plt+0x2e80>
   14508:	str	r0, [r8]
   1450c:	ldr	r1, [r0]
   14510:	cmp	r1, #0
   14514:	beq	145fc <__assert_fail@plt+0x2fc0>
   14518:	cmp	r1, r5
   1451c:	mov	r4, r0
   14520:	beq	145c0 <__assert_fail@plt+0x2f84>
   14524:	ldr	r3, [r6, #28]
   14528:	mov	r0, r5
   1452c:	blx	r3
   14530:	cmp	r0, #0
   14534:	ldrne	r3, [r4]
   14538:	bne	145c4 <__assert_fail@plt+0x2f88>
   1453c:	ldr	r2, [r4, #4]
   14540:	cmp	r2, #0
   14544:	beq	145fc <__assert_fail@plt+0x2fc0>
   14548:	ldr	r3, [r2]
   1454c:	cmp	r5, r3
   14550:	bne	14574 <__assert_fail@plt+0x2f38>
   14554:	b	14594 <__assert_fail@plt+0x2f58>
   14558:	ldr	r4, [r4, #4]
   1455c:	ldr	r2, [r4, #4]
   14560:	cmp	r2, #0
   14564:	beq	145fc <__assert_fail@plt+0x2fc0>
   14568:	ldr	r3, [r2]
   1456c:	cmp	r3, r5
   14570:	beq	14594 <__assert_fail@plt+0x2f58>
   14574:	mov	r1, r3
   14578:	mov	r0, r5
   1457c:	ldr	r3, [r6, #28]
   14580:	blx	r3
   14584:	cmp	r0, #0
   14588:	beq	14558 <__assert_fail@plt+0x2f1c>
   1458c:	ldr	r2, [r4, #4]
   14590:	ldr	r3, [r2]
   14594:	cmp	r7, #0
   14598:	beq	145f4 <__assert_fail@plt+0x2fb8>
   1459c:	ldr	r0, [r2, #4]
   145a0:	mov	r1, #0
   145a4:	str	r0, [r4, #4]
   145a8:	str	r1, [r2]
   145ac:	ldr	r1, [r6, #36]	; 0x24
   145b0:	mov	r0, r3
   145b4:	str	r1, [r2, #4]
   145b8:	str	r2, [r6, #36]	; 0x24
   145bc:	pop	{r4, r5, r6, r7, r8, pc}
   145c0:	mov	r3, r1
   145c4:	cmp	r7, #0
   145c8:	beq	145f4 <__assert_fail@plt+0x2fb8>
   145cc:	ldr	r2, [r4, #4]
   145d0:	cmp	r2, #0
   145d4:	movne	ip, #0
   145d8:	ldmne	r2, {r0, r1}
   145dc:	streq	r2, [r4]
   145e0:	stmne	r4, {r0, r1}
   145e4:	strne	ip, [r2]
   145e8:	ldrne	r1, [r6, #36]	; 0x24
   145ec:	strne	r1, [r2, #4]
   145f0:	strne	r2, [r6, #36]	; 0x24
   145f4:	mov	r0, r3
   145f8:	pop	{r4, r5, r6, r7, r8, pc}
   145fc:	mov	r3, #0
   14600:	mov	r0, r3
   14604:	pop	{r4, r5, r6, r7, r8, pc}
   14608:	ldr	r2, [pc, #164]	; 146b4 <__assert_fail@plt+0x3078>
   1460c:	ldr	r3, [r0]
   14610:	cmp	r3, r2
   14614:	beq	1469c <__assert_fail@plt+0x3060>
   14618:	vldr	s15, [r3, #8]
   1461c:	vldr	s14, [pc, #128]	; 146a4 <__assert_fail@plt+0x3068>
   14620:	vcmpe.f32	s15, s14
   14624:	vmrs	APSR_nzcv, fpscr
   14628:	ble	14690 <__assert_fail@plt+0x3054>
   1462c:	vldr	s13, [pc, #116]	; 146a8 <__assert_fail@plt+0x306c>
   14630:	vcmpe.f32	s15, s13
   14634:	vmrs	APSR_nzcv, fpscr
   14638:	bpl	14690 <__assert_fail@plt+0x3054>
   1463c:	vldr	s13, [pc, #104]	; 146ac <__assert_fail@plt+0x3070>
   14640:	vldr	s12, [r3, #12]
   14644:	vcmpe.f32	s12, s13
   14648:	vmrs	APSR_nzcv, fpscr
   1464c:	ble	14690 <__assert_fail@plt+0x3054>
   14650:	vldr	s13, [r3]
   14654:	vcmpe.f32	s13, #0.0
   14658:	vmrs	APSR_nzcv, fpscr
   1465c:	blt	14690 <__assert_fail@plt+0x3054>
   14660:	vadd.f32	s14, s13, s14
   14664:	vldr	s13, [r3, #4]
   14668:	vcmpe.f32	s14, s13
   1466c:	vmrs	APSR_nzcv, fpscr
   14670:	bpl	14690 <__assert_fail@plt+0x3054>
   14674:	vldr	s12, [pc, #52]	; 146b0 <__assert_fail@plt+0x3074>
   14678:	vcmpe.f32	s13, s12
   1467c:	vmrs	APSR_nzcv, fpscr
   14680:	bhi	14690 <__assert_fail@plt+0x3054>
   14684:	vcmpe.f32	s15, s14
   14688:	vmrs	APSR_nzcv, fpscr
   1468c:	bgt	1469c <__assert_fail@plt+0x3060>
   14690:	str	r2, [r0]
   14694:	mov	r0, #0
   14698:	bx	lr
   1469c:	mov	r0, #1
   146a0:	bx	lr
   146a4:	stclcc	12, cr12, [ip, #820]	; 0x334
   146a8:	svccc	0x00666666
   146ac:	svccc	0x008ccccd
   146b0:	svccc	0x00800000
   146b4:	strdeq	fp, [r1], -r0
   146b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146bc:	ldr	r3, [r1, #4]
   146c0:	ldr	r6, [r1]
   146c4:	cmp	r6, r3
   146c8:	bcs	14790 <__assert_fail@plt+0x3154>
   146cc:	mov	r8, r2
   146d0:	mov	r5, r0
   146d4:	mov	r7, r1
   146d8:	add	r6, r6, #8
   146dc:	mov	r9, #0
   146e0:	b	146f0 <__assert_fail@plt+0x30b4>
   146e4:	cmp	r3, r6
   146e8:	add	r6, r6, #8
   146ec:	bls	14790 <__assert_fail@plt+0x3154>
   146f0:	ldr	sl, [r6, #-8]
   146f4:	cmp	sl, #0
   146f8:	beq	146e4 <__assert_fail@plt+0x30a8>
   146fc:	ldr	r4, [r6, #-4]
   14700:	cmp	r4, #0
   14704:	bne	14724 <__assert_fail@plt+0x30e8>
   14708:	b	14774 <__assert_fail@plt+0x3138>
   1470c:	ldr	r2, [r0, #4]
   14710:	cmp	r3, #0
   14714:	str	r2, [r4, #4]
   14718:	str	r4, [r0, #4]
   1471c:	mov	r4, r3
   14720:	beq	14770 <__assert_fail@plt+0x3134>
   14724:	ldr	sl, [r4]
   14728:	mov	r0, r5
   1472c:	mov	r1, sl
   14730:	bl	144bc <__assert_fail@plt+0x2e80>
   14734:	ldr	r3, [r4, #4]
   14738:	ldr	r2, [r0]
   1473c:	cmp	r2, #0
   14740:	bne	1470c <__assert_fail@plt+0x30d0>
   14744:	ldr	r1, [r5, #12]
   14748:	str	sl, [r0]
   1474c:	add	r1, r1, #1
   14750:	str	r1, [r5, #12]
   14754:	str	r2, [r4]
   14758:	ldr	r2, [r5, #36]	; 0x24
   1475c:	cmp	r3, #0
   14760:	str	r2, [r4, #4]
   14764:	str	r4, [r5, #36]	; 0x24
   14768:	mov	r4, r3
   1476c:	bne	14724 <__assert_fail@plt+0x30e8>
   14770:	ldr	sl, [r6, #-8]
   14774:	cmp	r8, #0
   14778:	str	r9, [r6, #-4]
   1477c:	beq	14798 <__assert_fail@plt+0x315c>
   14780:	ldr	r3, [r7, #4]
   14784:	cmp	r3, r6
   14788:	add	r6, r6, #8
   1478c:	bhi	146f0 <__assert_fail@plt+0x30b4>
   14790:	mov	r0, #1
   14794:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14798:	mov	r1, sl
   1479c:	mov	r0, r5
   147a0:	bl	144bc <__assert_fail@plt+0x2e80>
   147a4:	ldr	r3, [r0]
   147a8:	mov	r4, r0
   147ac:	cmp	r3, #0
   147b0:	beq	147f0 <__assert_fail@plt+0x31b4>
   147b4:	ldr	r0, [r5, #36]	; 0x24
   147b8:	cmp	r0, #0
   147bc:	beq	14804 <__assert_fail@plt+0x31c8>
   147c0:	ldr	r3, [r0, #4]
   147c4:	str	r3, [r5, #36]	; 0x24
   147c8:	ldr	r3, [r4, #4]
   147cc:	str	sl, [r0]
   147d0:	str	r3, [r0, #4]
   147d4:	str	r0, [r4, #4]
   147d8:	ldr	r2, [r7, #12]
   147dc:	str	r9, [r6, #-8]
   147e0:	sub	r2, r2, #1
   147e4:	ldr	r3, [r7, #4]
   147e8:	str	r2, [r7, #12]
   147ec:	b	146e4 <__assert_fail@plt+0x30a8>
   147f0:	ldr	r3, [r5, #12]
   147f4:	str	sl, [r0]
   147f8:	add	r3, r3, #1
   147fc:	str	r3, [r5, #12]
   14800:	b	147d8 <__assert_fail@plt+0x319c>
   14804:	mov	r0, #8
   14808:	bl	113fc <malloc@plt>
   1480c:	cmp	r0, #0
   14810:	bne	147c8 <__assert_fail@plt+0x318c>
   14814:	mov	r0, r8
   14818:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1481c:	ldr	r0, [r0, #8]
   14820:	bx	lr
   14824:	ldr	r0, [r0, #12]
   14828:	bx	lr
   1482c:	ldr	r0, [r0, #16]
   14830:	bx	lr
   14834:	ldm	r0, {r1, r3}
   14838:	cmp	r1, r3
   1483c:	bcs	148a4 <__assert_fail@plt+0x3268>
   14840:	sub	ip, r3, #1
   14844:	sub	ip, ip, r1
   14848:	add	r3, r1, #16
   1484c:	bic	ip, ip, #7
   14850:	add	ip, ip, r3
   14854:	add	r1, r1, #8
   14858:	mov	r0, #0
   1485c:	b	1486c <__assert_fail@plt+0x3230>
   14860:	add	r1, r1, #8
   14864:	cmp	r1, ip
   14868:	bxeq	lr
   1486c:	ldr	r3, [r1, #-8]
   14870:	cmp	r3, #0
   14874:	beq	14860 <__assert_fail@plt+0x3224>
   14878:	ldr	r3, [r1, #-4]
   1487c:	mov	r2, #1
   14880:	cmp	r3, #0
   14884:	beq	14898 <__assert_fail@plt+0x325c>
   14888:	ldr	r3, [r3, #4]
   1488c:	add	r2, r2, #1
   14890:	cmp	r3, #0
   14894:	bne	14888 <__assert_fail@plt+0x324c>
   14898:	cmp	r0, r2
   1489c:	movcc	r0, r2
   148a0:	b	14860 <__assert_fail@plt+0x3224>
   148a4:	mov	r0, #0
   148a8:	bx	lr
   148ac:	ldm	r0, {r1, r3}
   148b0:	push	{lr}		; (str lr, [sp, #-4]!)
   148b4:	cmp	r1, r3
   148b8:	bcs	14948 <__assert_fail@plt+0x330c>
   148bc:	sub	ip, r3, #1
   148c0:	sub	ip, ip, r1
   148c4:	add	r3, r1, #16
   148c8:	bic	ip, ip, #7
   148cc:	mov	r2, #0
   148d0:	add	ip, ip, r3
   148d4:	add	r1, r1, #8
   148d8:	mov	lr, r2
   148dc:	b	148ec <__assert_fail@plt+0x32b0>
   148e0:	add	r1, r1, #8
   148e4:	cmp	r1, ip
   148e8:	beq	14928 <__assert_fail@plt+0x32ec>
   148ec:	ldr	r3, [r1, #-8]
   148f0:	cmp	r3, #0
   148f4:	beq	148e0 <__assert_fail@plt+0x32a4>
   148f8:	ldr	r3, [r1, #-4]
   148fc:	add	lr, lr, #1
   14900:	cmp	r3, #0
   14904:	add	r2, r2, #1
   14908:	beq	148e0 <__assert_fail@plt+0x32a4>
   1490c:	ldr	r3, [r3, #4]
   14910:	add	r2, r2, #1
   14914:	cmp	r3, #0
   14918:	bne	1490c <__assert_fail@plt+0x32d0>
   1491c:	add	r1, r1, #8
   14920:	cmp	r1, ip
   14924:	bne	148ec <__assert_fail@plt+0x32b0>
   14928:	ldr	r3, [r0, #12]
   1492c:	cmp	r3, lr
   14930:	ldreq	r0, [r0, #16]
   14934:	subeq	r0, r0, r2
   14938:	clzeq	r0, r0
   1493c:	lsreq	r0, r0, #5
   14940:	movne	r0, #0
   14944:	pop	{pc}		; (ldr pc, [sp], #4)
   14948:	mov	r2, #0
   1494c:	mov	lr, r2
   14950:	b	14928 <__assert_fail@plt+0x32ec>
   14954:	push	{r4, r5, r6, r7, lr}
   14958:	mov	r4, r1
   1495c:	ldr	r2, [r0]
   14960:	ldr	r1, [r0, #4]
   14964:	sub	sp, sp, #12
   14968:	cmp	r2, r1
   1496c:	ldr	r3, [r0, #16]
   14970:	ldrd	r6, [r0, #8]
   14974:	bcs	14a58 <__assert_fail@plt+0x341c>
   14978:	sub	ip, r1, #1
   1497c:	sub	ip, ip, r2
   14980:	bic	ip, ip, #7
   14984:	add	r1, r2, #16
   14988:	add	ip, ip, r1
   1498c:	add	r0, r2, #8
   14990:	mov	r5, #0
   14994:	b	149a4 <__assert_fail@plt+0x3368>
   14998:	add	r0, r0, #8
   1499c:	cmp	r0, ip
   149a0:	beq	149e4 <__assert_fail@plt+0x33a8>
   149a4:	ldr	r2, [r0, #-8]
   149a8:	cmp	r2, #0
   149ac:	beq	14998 <__assert_fail@plt+0x335c>
   149b0:	ldr	r2, [r0, #-4]
   149b4:	mov	r1, #1
   149b8:	cmp	r2, #0
   149bc:	beq	149d0 <__assert_fail@plt+0x3394>
   149c0:	ldr	r2, [r2, #4]
   149c4:	add	r1, r1, #1
   149c8:	cmp	r2, #0
   149cc:	bne	149c0 <__assert_fail@plt+0x3384>
   149d0:	cmp	r5, r1
   149d4:	add	r0, r0, #8
   149d8:	movcc	r5, r1
   149dc:	cmp	r0, ip
   149e0:	bne	149a4 <__assert_fail@plt+0x3368>
   149e4:	ldr	r2, [pc, #124]	; 14a68 <__assert_fail@plt+0x342c>
   149e8:	mov	r1, #1
   149ec:	mov	r0, r4
   149f0:	bl	114f8 <__fprintf_chk@plt>
   149f4:	mov	r3, r6
   149f8:	ldr	r2, [pc, #108]	; 14a6c <__assert_fail@plt+0x3430>
   149fc:	mov	r1, #1
   14a00:	mov	r0, r4
   14a04:	bl	114f8 <__fprintf_chk@plt>
   14a08:	vmov	s15, r7
   14a0c:	vldr	d5, [pc, #76]	; 14a60 <__assert_fail@plt+0x3424>
   14a10:	mov	r3, r7
   14a14:	ldr	r2, [pc, #84]	; 14a70 <__assert_fail@plt+0x3434>
   14a18:	vcvt.f64.u32	d6, s15
   14a1c:	vmov	s15, r6
   14a20:	mov	r1, #1
   14a24:	mov	r0, r4
   14a28:	vcvt.f64.u32	d7, s15
   14a2c:	vmul.f64	d6, d6, d5
   14a30:	vdiv.f64	d5, d6, d7
   14a34:	vstr	d5, [sp]
   14a38:	bl	114f8 <__fprintf_chk@plt>
   14a3c:	mov	r3, r5
   14a40:	mov	r0, r4
   14a44:	ldr	r2, [pc, #40]	; 14a74 <__assert_fail@plt+0x3438>
   14a48:	mov	r1, #1
   14a4c:	add	sp, sp, #12
   14a50:	pop	{r4, r5, r6, r7, lr}
   14a54:	b	114f8 <__fprintf_chk@plt>
   14a58:	mov	r5, #0
   14a5c:	b	149e4 <__assert_fail@plt+0x33a8>
   14a60:	andeq	r0, r0, r0
   14a64:	subsmi	r0, r9, r0
   14a68:	andeq	fp, r1, r4, lsl #4
   14a6c:	andeq	fp, r1, ip, lsl r2
   14a70:	andeq	fp, r1, r4, lsr r2
   14a74:	andeq	fp, r1, r8, asr r2
   14a78:	push	{r4, r5, r6, lr}
   14a7c:	mov	r6, r0
   14a80:	mov	r5, r1
   14a84:	bl	144bc <__assert_fail@plt+0x2e80>
   14a88:	ldr	r3, [r0]
   14a8c:	cmp	r3, #0
   14a90:	beq	14acc <__assert_fail@plt+0x3490>
   14a94:	mov	r4, r0
   14a98:	b	14aa0 <__assert_fail@plt+0x3464>
   14a9c:	ldr	r3, [r4]
   14aa0:	cmp	r3, r5
   14aa4:	mov	r1, r3
   14aa8:	mov	r0, r5
   14aac:	beq	14ad8 <__assert_fail@plt+0x349c>
   14ab0:	ldr	r3, [r6, #28]
   14ab4:	blx	r3
   14ab8:	cmp	r0, #0
   14abc:	bne	14ad4 <__assert_fail@plt+0x3498>
   14ac0:	ldr	r4, [r4, #4]
   14ac4:	cmp	r4, #0
   14ac8:	bne	14a9c <__assert_fail@plt+0x3460>
   14acc:	mov	r0, #0
   14ad0:	pop	{r4, r5, r6, pc}
   14ad4:	ldr	r5, [r4]
   14ad8:	mov	r0, r5
   14adc:	pop	{r4, r5, r6, pc}
   14ae0:	ldr	r3, [r0, #16]
   14ae4:	cmp	r3, #0
   14ae8:	beq	14b38 <__assert_fail@plt+0x34fc>
   14aec:	ldr	r3, [r0]
   14af0:	ldr	r2, [r0, #4]
   14af4:	cmp	r3, r2
   14af8:	bcs	14b30 <__assert_fail@plt+0x34f4>
   14afc:	ldr	r0, [r3]
   14b00:	cmp	r0, #0
   14b04:	bxne	lr
   14b08:	sub	r2, r2, #1
   14b0c:	sub	r2, r2, r3
   14b10:	bic	r2, r2, #7
   14b14:	add	r2, r3, r2
   14b18:	b	14b28 <__assert_fail@plt+0x34ec>
   14b1c:	ldr	r0, [r3, #8]!
   14b20:	cmp	r0, #0
   14b24:	bxne	lr
   14b28:	cmp	r3, r2
   14b2c:	bne	14b1c <__assert_fail@plt+0x34e0>
   14b30:	push	{r4, lr}
   14b34:	bl	11600 <abort@plt>
   14b38:	mov	r0, r3
   14b3c:	bx	lr
   14b40:	push	{r4, r5, r6, lr}
   14b44:	mov	r5, r0
   14b48:	mov	r4, r1
   14b4c:	bl	144bc <__assert_fail@plt+0x2e80>
   14b50:	mov	r2, r0
   14b54:	mov	r3, r0
   14b58:	b	14b64 <__assert_fail@plt+0x3528>
   14b5c:	cmp	r3, #0
   14b60:	beq	14b78 <__assert_fail@plt+0x353c>
   14b64:	ldm	r3, {r1, r3}
   14b68:	cmp	r1, r4
   14b6c:	bne	14b5c <__assert_fail@plt+0x3520>
   14b70:	cmp	r3, #0
   14b74:	bne	14ba0 <__assert_fail@plt+0x3564>
   14b78:	ldr	r3, [r5, #4]
   14b7c:	b	14b8c <__assert_fail@plt+0x3550>
   14b80:	ldr	r0, [r2]
   14b84:	cmp	r0, #0
   14b88:	popne	{r4, r5, r6, pc}
   14b8c:	add	r2, r2, #8
   14b90:	cmp	r3, r2
   14b94:	bhi	14b80 <__assert_fail@plt+0x3544>
   14b98:	mov	r0, #0
   14b9c:	pop	{r4, r5, r6, pc}
   14ba0:	ldr	r0, [r3]
   14ba4:	pop	{r4, r5, r6, pc}
   14ba8:	push	{r4, r5, lr}
   14bac:	ldm	r0, {r5, lr}
   14bb0:	cmp	lr, r5
   14bb4:	bls	14c38 <__assert_fail@plt+0x35fc>
   14bb8:	mov	ip, #0
   14bbc:	ldr	r3, [r5]
   14bc0:	cmp	r3, #0
   14bc4:	bne	14be0 <__assert_fail@plt+0x35a4>
   14bc8:	add	r5, r5, #8
   14bcc:	cmp	lr, r5
   14bd0:	bhi	14bbc <__assert_fail@plt+0x3580>
   14bd4:	mov	r2, ip
   14bd8:	mov	r0, r2
   14bdc:	pop	{r4, r5, pc}
   14be0:	cmp	r2, ip
   14be4:	bls	14bd4 <__assert_fail@plt+0x3598>
   14be8:	str	r3, [r1, ip, lsl #2]
   14bec:	ldr	r3, [r5, #4]
   14bf0:	add	r4, ip, #1
   14bf4:	cmp	r3, #0
   14bf8:	add	lr, r1, ip, lsl #2
   14bfc:	beq	14c2c <__assert_fail@plt+0x35f0>
   14c00:	mov	ip, r4
   14c04:	cmp	r2, ip
   14c08:	beq	14bd8 <__assert_fail@plt+0x359c>
   14c0c:	ldr	r4, [r3]
   14c10:	add	ip, ip, #1
   14c14:	str	r4, [lr, #4]!
   14c18:	ldr	r3, [r3, #4]
   14c1c:	cmp	r3, #0
   14c20:	bne	14c04 <__assert_fail@plt+0x35c8>
   14c24:	ldr	lr, [r0, #4]
   14c28:	b	14bc8 <__assert_fail@plt+0x358c>
   14c2c:	ldr	lr, [r0, #4]
   14c30:	mov	ip, r4
   14c34:	b	14bc8 <__assert_fail@plt+0x358c>
   14c38:	mov	r2, #0
   14c3c:	b	14bd8 <__assert_fail@plt+0x359c>
   14c40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c44:	ldr	r3, [r0, #4]
   14c48:	ldr	r8, [r0]
   14c4c:	cmp	r3, r8
   14c50:	bls	14cb8 <__assert_fail@plt+0x367c>
   14c54:	mov	r7, r2
   14c58:	mov	r6, r1
   14c5c:	mov	r9, r0
   14c60:	mov	r5, #0
   14c64:	ldr	r0, [r8]
   14c68:	cmp	r0, #0
   14c6c:	bne	14c84 <__assert_fail@plt+0x3648>
   14c70:	add	r8, r8, #8
   14c74:	cmp	r3, r8
   14c78:	bhi	14c64 <__assert_fail@plt+0x3628>
   14c7c:	mov	r0, r5
   14c80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c84:	mov	r4, r8
   14c88:	b	14c90 <__assert_fail@plt+0x3654>
   14c8c:	ldr	r0, [r4]
   14c90:	mov	r1, r7
   14c94:	blx	r6
   14c98:	cmp	r0, #0
   14c9c:	beq	14c7c <__assert_fail@plt+0x3640>
   14ca0:	ldr	r4, [r4, #4]
   14ca4:	add	r5, r5, #1
   14ca8:	cmp	r4, #0
   14cac:	bne	14c8c <__assert_fail@plt+0x3650>
   14cb0:	ldr	r3, [r9, #4]
   14cb4:	b	14c70 <__assert_fail@plt+0x3634>
   14cb8:	mov	r5, #0
   14cbc:	b	14c7c <__assert_fail@plt+0x3640>
   14cc0:	push	{r4, r5, r6, lr}
   14cc4:	mov	r4, r0
   14cc8:	ldrb	r0, [r0]
   14ccc:	cmp	r0, #0
   14cd0:	beq	14d00 <__assert_fail@plt+0x36c4>
   14cd4:	mov	r5, r1
   14cd8:	mov	r1, #0
   14cdc:	rsb	r1, r1, r1, lsl #5
   14ce0:	add	r0, r1, r0
   14ce4:	mov	r1, r5
   14ce8:	bl	19dac <__assert_fail@plt+0x8770>
   14cec:	ldrb	r0, [r4, #1]!
   14cf0:	cmp	r0, #0
   14cf4:	bne	14cdc <__assert_fail@plt+0x36a0>
   14cf8:	mov	r0, r1
   14cfc:	pop	{r4, r5, r6, pc}
   14d00:	mov	r1, r0
   14d04:	mov	r0, r1
   14d08:	pop	{r4, r5, r6, pc}
   14d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   14d10:	mov	ip, r0
   14d14:	ldr	lr, [pc, #16]	; 14d2c <__assert_fail@plt+0x36f0>
   14d18:	ldm	lr!, {r0, r1, r2, r3}
   14d1c:	ldr	lr, [lr]
   14d20:	stmia	ip!, {r0, r1, r2, r3}
   14d24:	str	lr, [ip]
   14d28:	pop	{pc}		; (ldr pc, [sp], #4)
   14d2c:	strdeq	fp, [r1], -r0
   14d30:	push	{r4, r5, r6, r7, r8, lr}
   14d34:	sub	sp, sp, #8
   14d38:	cmp	r2, #0
   14d3c:	ldr	ip, [pc, #300]	; 14e70 <__assert_fail@plt+0x3834>
   14d40:	str	r0, [sp, #4]
   14d44:	ldr	r5, [pc, #296]	; 14e74 <__assert_fail@plt+0x3838>
   14d48:	mov	r0, #40	; 0x28
   14d4c:	movne	r5, r2
   14d50:	cmp	r3, #0
   14d54:	movne	r8, r3
   14d58:	moveq	r8, ip
   14d5c:	mov	r6, r1
   14d60:	bl	113fc <malloc@plt>
   14d64:	subs	r4, r0, #0
   14d68:	beq	14e34 <__assert_fail@plt+0x37f8>
   14d6c:	cmp	r6, #0
   14d70:	add	r0, r4, #20
   14d74:	beq	14e10 <__assert_fail@plt+0x37d4>
   14d78:	str	r6, [r4, #20]
   14d7c:	bl	14608 <__assert_fail@plt+0x2fcc>
   14d80:	cmp	r0, #0
   14d84:	beq	14e28 <__assert_fail@plt+0x37ec>
   14d88:	ldrb	r3, [r6, #16]
   14d8c:	cmp	r3, #0
   14d90:	vldreq	s13, [r6, #8]
   14d94:	beq	14e40 <__assert_fail@plt+0x3804>
   14d98:	ldr	r0, [sp, #4]
   14d9c:	bl	14400 <__assert_fail@plt+0x2dc4>
   14da0:	lsrs	r3, r0, #30
   14da4:	movne	r7, #1
   14da8:	moveq	r7, #0
   14dac:	tst	r0, #536870912	; 0x20000000
   14db0:	mov	r6, r0
   14db4:	bne	14e28 <__assert_fail@plt+0x37ec>
   14db8:	cmp	r7, #0
   14dbc:	bne	14e28 <__assert_fail@plt+0x37ec>
   14dc0:	cmp	r0, #0
   14dc4:	str	r0, [r4, #8]
   14dc8:	beq	14e28 <__assert_fail@plt+0x37ec>
   14dcc:	mov	r1, #8
   14dd0:	bl	11264 <calloc@plt>
   14dd4:	cmp	r0, #0
   14dd8:	str	r0, [r4]
   14ddc:	beq	14e28 <__assert_fail@plt+0x37ec>
   14de0:	ldr	r3, [sp, #32]
   14de4:	add	r0, r0, r6, lsl #3
   14de8:	str	r0, [r4, #4]
   14dec:	str	r7, [r4, #12]
   14df0:	mov	r0, r4
   14df4:	str	r7, [r4, #16]
   14df8:	str	r5, [r4, #24]
   14dfc:	str	r8, [r4, #28]
   14e00:	str	r3, [r4, #32]
   14e04:	str	r7, [r4, #36]	; 0x24
   14e08:	add	sp, sp, #8
   14e0c:	pop	{r4, r5, r6, r7, r8, pc}
   14e10:	ldr	r3, [pc, #96]	; 14e78 <__assert_fail@plt+0x383c>
   14e14:	str	r3, [r4, #20]
   14e18:	bl	14608 <__assert_fail@plt+0x2fcc>
   14e1c:	cmp	r0, #0
   14e20:	vldrne	s13, [pc, #64]	; 14e68 <__assert_fail@plt+0x382c>
   14e24:	bne	14e40 <__assert_fail@plt+0x3804>
   14e28:	mov	r0, r4
   14e2c:	bl	112f4 <free@plt>
   14e30:	mov	r4, #0
   14e34:	mov	r0, r4
   14e38:	add	sp, sp, #8
   14e3c:	pop	{r4, r5, r6, r7, r8, pc}
   14e40:	vldr	s15, [sp, #4]
   14e44:	vldr	s14, [pc, #32]	; 14e6c <__assert_fail@plt+0x3830>
   14e48:	vcvt.f32.u32	s12, s15
   14e4c:	vdiv.f32	s15, s12, s13
   14e50:	vcmpe.f32	s15, s14
   14e54:	vmrs	APSR_nzcv, fpscr
   14e58:	bge	14e28 <__assert_fail@plt+0x37ec>
   14e5c:	vcvt.u32.f32	s15, s15
   14e60:	vstr	s15, [sp, #4]
   14e64:	b	14d98 <__assert_fail@plt+0x375c>
   14e68:	svccc	0x004ccccd
   14e6c:	svcmi	0x00800000
   14e70:	andeq	r4, r1, ip, lsr #9
   14e74:	muleq	r1, r8, r4
   14e78:	strdeq	fp, [r1], -r0
   14e7c:	push	{r4, r5, r6, r7, r8, lr}
   14e80:	mov	r5, r0
   14e84:	ldr	r6, [r0]
   14e88:	ldr	r2, [r0, #4]
   14e8c:	cmp	r6, r2
   14e90:	addcc	r6, r6, #8
   14e94:	movcc	r7, #0
   14e98:	bcc	14eac <__assert_fail@plt+0x3870>
   14e9c:	b	14f20 <__assert_fail@plt+0x38e4>
   14ea0:	cmp	r2, r6
   14ea4:	add	r6, r6, #8
   14ea8:	bls	14f20 <__assert_fail@plt+0x38e4>
   14eac:	ldr	r3, [r6, #-8]
   14eb0:	cmp	r3, #0
   14eb4:	beq	14ea0 <__assert_fail@plt+0x3864>
   14eb8:	ldr	r4, [r6, #-4]
   14ebc:	ldr	r2, [r5, #32]
   14ec0:	cmp	r4, #0
   14ec4:	beq	14ef8 <__assert_fail@plt+0x38bc>
   14ec8:	cmp	r2, #0
   14ecc:	beq	14edc <__assert_fail@plt+0x38a0>
   14ed0:	ldr	r0, [r4]
   14ed4:	blx	r2
   14ed8:	ldr	r2, [r5, #32]
   14edc:	ldr	r3, [r4, #4]
   14ee0:	ldr	r1, [r5, #36]	; 0x24
   14ee4:	str	r7, [r4]
   14ee8:	str	r1, [r4, #4]
   14eec:	str	r4, [r5, #36]	; 0x24
   14ef0:	subs	r4, r3, #0
   14ef4:	bne	14ec8 <__assert_fail@plt+0x388c>
   14ef8:	cmp	r2, #0
   14efc:	beq	14f08 <__assert_fail@plt+0x38cc>
   14f00:	ldr	r0, [r6, #-8]
   14f04:	blx	r2
   14f08:	str	r7, [r6, #-8]
   14f0c:	str	r7, [r6, #-4]
   14f10:	ldr	r2, [r5, #4]
   14f14:	cmp	r2, r6
   14f18:	add	r6, r6, #8
   14f1c:	bhi	14eac <__assert_fail@plt+0x3870>
   14f20:	mov	r3, #0
   14f24:	str	r3, [r5, #12]
   14f28:	str	r3, [r5, #16]
   14f2c:	pop	{r4, r5, r6, r7, r8, pc}
   14f30:	ldr	r3, [r0, #32]
   14f34:	push	{r4, r5, r6, lr}
   14f38:	cmp	r3, #0
   14f3c:	mov	r6, r0
   14f40:	ldr	r5, [r0]
   14f44:	ldr	r3, [r0, #4]
   14f48:	beq	14fb0 <__assert_fail@plt+0x3974>
   14f4c:	ldr	r2, [r0, #16]
   14f50:	cmp	r2, #0
   14f54:	beq	14fb0 <__assert_fail@plt+0x3974>
   14f58:	cmp	r5, r3
   14f5c:	bcc	14f70 <__assert_fail@plt+0x3934>
   14f60:	b	14fe4 <__assert_fail@plt+0x39a8>
   14f64:	add	r5, r5, #8
   14f68:	cmp	r3, r5
   14f6c:	bls	14fac <__assert_fail@plt+0x3970>
   14f70:	ldr	r0, [r5]
   14f74:	cmp	r0, #0
   14f78:	beq	14f64 <__assert_fail@plt+0x3928>
   14f7c:	mov	r4, r5
   14f80:	b	14f88 <__assert_fail@plt+0x394c>
   14f84:	ldr	r0, [r4]
   14f88:	ldr	r3, [r6, #32]
   14f8c:	blx	r3
   14f90:	ldr	r4, [r4, #4]
   14f94:	cmp	r4, #0
   14f98:	bne	14f84 <__assert_fail@plt+0x3948>
   14f9c:	ldr	r3, [r6, #4]
   14fa0:	add	r5, r5, #8
   14fa4:	cmp	r3, r5
   14fa8:	bhi	14f70 <__assert_fail@plt+0x3934>
   14fac:	ldr	r5, [r6]
   14fb0:	cmp	r5, r3
   14fb4:	bcs	14fe4 <__assert_fail@plt+0x39a8>
   14fb8:	ldr	r0, [r5, #4]
   14fbc:	cmp	r0, #0
   14fc0:	beq	14fd8 <__assert_fail@plt+0x399c>
   14fc4:	ldr	r4, [r0, #4]
   14fc8:	bl	112f4 <free@plt>
   14fcc:	subs	r0, r4, #0
   14fd0:	bne	14fc4 <__assert_fail@plt+0x3988>
   14fd4:	ldr	r3, [r6, #4]
   14fd8:	add	r5, r5, #8
   14fdc:	cmp	r3, r5
   14fe0:	bhi	14fb8 <__assert_fail@plt+0x397c>
   14fe4:	ldr	r0, [r6, #36]	; 0x24
   14fe8:	cmp	r0, #0
   14fec:	beq	15000 <__assert_fail@plt+0x39c4>
   14ff0:	ldr	r4, [r0, #4]
   14ff4:	bl	112f4 <free@plt>
   14ff8:	subs	r0, r4, #0
   14ffc:	bne	14ff0 <__assert_fail@plt+0x39b4>
   15000:	ldr	r0, [r6]
   15004:	bl	112f4 <free@plt>
   15008:	mov	r0, r6
   1500c:	pop	{r4, r5, r6, lr}
   15010:	b	112f4 <free@plt>
   15014:	push	{r4, r5, r6, r7, r8, lr}
   15018:	sub	sp, sp, #56	; 0x38
   1501c:	ldr	r8, [r0, #20]
   15020:	ldr	r7, [pc, #392]	; 151b0 <__assert_fail@plt+0x3b74>
   15024:	mov	r6, r0
   15028:	ldrb	r3, [r8, #16]
   1502c:	ldr	r2, [r7]
   15030:	str	r1, [sp, #4]
   15034:	cmp	r3, #0
   15038:	str	r2, [sp, #52]	; 0x34
   1503c:	bne	15068 <__assert_fail@plt+0x3a2c>
   15040:	vmov	s15, r1
   15044:	vldr	s13, [r8, #8]
   15048:	vldr	s14, [pc, #348]	; 151ac <__assert_fail@plt+0x3b70>
   1504c:	vcvt.f32.u32	s12, s15
   15050:	vdiv.f32	s15, s12, s13
   15054:	vcmpe.f32	s15, s14
   15058:	vmrs	APSR_nzcv, fpscr
   1505c:	vcvtlt.u32.f32	s15, s15
   15060:	vstrlt	s15, [sp, #4]
   15064:	bge	15098 <__assert_fail@plt+0x3a5c>
   15068:	ldr	r0, [sp, #4]
   1506c:	bl	14400 <__assert_fail@plt+0x2dc4>
   15070:	lsrs	r3, r0, #30
   15074:	movne	r4, #1
   15078:	moveq	r4, #0
   1507c:	tst	r0, #536870912	; 0x20000000
   15080:	movne	r4, #1
   15084:	cmp	r0, #0
   15088:	moveq	r4, #1
   1508c:	cmp	r4, #0
   15090:	mov	r5, r0
   15094:	beq	150b8 <__assert_fail@plt+0x3a7c>
   15098:	mov	r4, #0
   1509c:	ldr	r2, [sp, #52]	; 0x34
   150a0:	ldr	r3, [r7]
   150a4:	mov	r0, r4
   150a8:	cmp	r2, r3
   150ac:	bne	151a4 <__assert_fail@plt+0x3b68>
   150b0:	add	sp, sp, #56	; 0x38
   150b4:	pop	{r4, r5, r6, r7, r8, pc}
   150b8:	ldr	r3, [r6, #8]
   150bc:	cmp	r3, r0
   150c0:	beq	1516c <__assert_fail@plt+0x3b30>
   150c4:	mov	r1, #8
   150c8:	bl	11264 <calloc@plt>
   150cc:	cmp	r0, #0
   150d0:	str	r0, [sp, #12]
   150d4:	beq	15098 <__assert_fail@plt+0x3a5c>
   150d8:	add	r0, r0, r5, lsl #3
   150dc:	ldr	r1, [r6, #32]
   150e0:	str	r0, [sp, #16]
   150e4:	ldr	r0, [r6, #28]
   150e8:	ldr	ip, [r6, #24]
   150ec:	ldr	r3, [r6, #36]	; 0x24
   150f0:	mov	r2, r4
   150f4:	str	r0, [sp, #40]	; 0x28
   150f8:	str	r1, [sp, #44]	; 0x2c
   150fc:	add	r0, sp, #12
   15100:	mov	r1, r6
   15104:	str	r4, [sp, #24]
   15108:	str	r4, [sp, #28]
   1510c:	str	r5, [sp, #20]
   15110:	str	r8, [sp, #32]
   15114:	str	ip, [sp, #36]	; 0x24
   15118:	str	r3, [sp, #48]	; 0x30
   1511c:	bl	146b8 <__assert_fail@plt+0x307c>
   15120:	subs	r4, r0, #0
   15124:	bne	15174 <__assert_fail@plt+0x3b38>
   15128:	ldr	r3, [sp, #48]	; 0x30
   1512c:	mov	r2, #1
   15130:	str	r3, [r6, #36]	; 0x24
   15134:	add	r1, sp, #12
   15138:	mov	r0, r6
   1513c:	bl	146b8 <__assert_fail@plt+0x307c>
   15140:	cmp	r0, #0
   15144:	beq	151a8 <__assert_fail@plt+0x3b6c>
   15148:	add	r1, sp, #12
   1514c:	mov	r0, r6
   15150:	mov	r2, r4
   15154:	bl	146b8 <__assert_fail@plt+0x307c>
   15158:	cmp	r0, #0
   1515c:	beq	151a8 <__assert_fail@plt+0x3b6c>
   15160:	ldr	r0, [sp, #12]
   15164:	bl	112f4 <free@plt>
   15168:	b	1509c <__assert_fail@plt+0x3a60>
   1516c:	mov	r4, #1
   15170:	b	1509c <__assert_fail@plt+0x3a60>
   15174:	ldr	r0, [r6]
   15178:	bl	112f4 <free@plt>
   1517c:	ldrd	r2, [sp, #12]
   15180:	ldr	r1, [sp, #20]
   15184:	str	r2, [r6]
   15188:	str	r3, [r6, #4]
   1518c:	ldr	r2, [sp, #24]
   15190:	ldr	r3, [sp, #48]	; 0x30
   15194:	str	r1, [r6, #8]
   15198:	str	r2, [r6, #12]
   1519c:	str	r3, [r6, #36]	; 0x24
   151a0:	b	1509c <__assert_fail@plt+0x3a60>
   151a4:	bl	1133c <__stack_chk_fail@plt>
   151a8:	bl	11600 <abort@plt>
   151ac:	svcmi	0x00800000
   151b0:	andeq	fp, r2, r8, lsl #30
   151b4:	push	{r4, r5, r6, r7, lr}
   151b8:	sub	sp, sp, #12
   151bc:	ldr	r6, [pc, #404]	; 15358 <__assert_fail@plt+0x3d1c>
   151c0:	subs	r7, r1, #0
   151c4:	ldr	r3, [r6]
   151c8:	str	r3, [sp, #4]
   151cc:	beq	1534c <__assert_fail@plt+0x3d10>
   151d0:	mov	r5, r2
   151d4:	mov	r3, #0
   151d8:	mov	r2, sp
   151dc:	mov	r4, r0
   151e0:	bl	144f0 <__assert_fail@plt+0x2eb4>
   151e4:	cmp	r0, #0
   151e8:	beq	15214 <__assert_fail@plt+0x3bd8>
   151ec:	cmp	r5, #0
   151f0:	moveq	r0, r5
   151f4:	strne	r0, [r5]
   151f8:	movne	r0, #0
   151fc:	ldr	r2, [sp, #4]
   15200:	ldr	r3, [r6]
   15204:	cmp	r2, r3
   15208:	bne	15350 <__assert_fail@plt+0x3d14>
   1520c:	add	sp, sp, #12
   15210:	pop	{r4, r5, r6, r7, pc}
   15214:	vldr	s15, [r4, #8]
   15218:	ldr	r3, [r4, #20]
   1521c:	vldr	s14, [r4, #12]
   15220:	vcvt.f32.u32	s15, s15
   15224:	vldr	s13, [r3, #8]
   15228:	vcvt.f32.u32	s14, s14
   1522c:	vmul.f32	s15, s15, s13
   15230:	vcmpe.f32	s14, s15
   15234:	vmrs	APSR_nzcv, fpscr
   15238:	bgt	15284 <__assert_fail@plt+0x3c48>
   1523c:	ldr	r5, [sp]
   15240:	ldr	r3, [r5]
   15244:	cmp	r3, #0
   15248:	beq	152e0 <__assert_fail@plt+0x3ca4>
   1524c:	ldr	r0, [r4, #36]	; 0x24
   15250:	cmp	r0, #0
   15254:	beq	15304 <__assert_fail@plt+0x3cc8>
   15258:	ldr	r3, [r0, #4]
   1525c:	str	r3, [r4, #36]	; 0x24
   15260:	ldr	r3, [r4, #16]
   15264:	ldr	r2, [r5, #4]
   15268:	add	r3, r3, #1
   1526c:	str	r7, [r0]
   15270:	str	r2, [r0, #4]
   15274:	str	r0, [r5, #4]
   15278:	mov	r0, #1
   1527c:	str	r3, [r4, #16]
   15280:	b	151fc <__assert_fail@plt+0x3bc0>
   15284:	add	r0, r4, #20
   15288:	bl	14608 <__assert_fail@plt+0x2fcc>
   1528c:	vldr	s15, [r4, #8]
   15290:	ldr	r3, [r4, #20]
   15294:	vldr	s14, [r4, #12]
   15298:	vcvt.f32.u32	s15, s15
   1529c:	vldr	s13, [r3, #8]
   152a0:	vcvt.f32.u32	s14, s14
   152a4:	vmul.f32	s12, s13, s15
   152a8:	vcmpe.f32	s14, s12
   152ac:	vmrs	APSR_nzcv, fpscr
   152b0:	ble	1523c <__assert_fail@plt+0x3c00>
   152b4:	vldr	s14, [r3, #12]
   152b8:	ldrb	r3, [r3, #16]
   152bc:	vmul.f32	s15, s15, s14
   152c0:	cmp	r3, #0
   152c4:	vldr	s14, [pc, #136]	; 15354 <__assert_fail@plt+0x3d18>
   152c8:	vmuleq.f32	s15, s15, s13
   152cc:	vcmpe.f32	s15, s14
   152d0:	vmrs	APSR_nzcv, fpscr
   152d4:	blt	15318 <__assert_fail@plt+0x3cdc>
   152d8:	mvn	r0, #0
   152dc:	b	151fc <__assert_fail@plt+0x3bc0>
   152e0:	ldr	r2, [r4, #16]
   152e4:	ldr	r3, [r4, #12]
   152e8:	add	r2, r2, #1
   152ec:	add	r3, r3, #1
   152f0:	str	r7, [r5]
   152f4:	mov	r0, #1
   152f8:	str	r2, [r4, #16]
   152fc:	str	r3, [r4, #12]
   15300:	b	151fc <__assert_fail@plt+0x3bc0>
   15304:	mov	r0, #8
   15308:	bl	113fc <malloc@plt>
   1530c:	cmp	r0, #0
   15310:	beq	152d8 <__assert_fail@plt+0x3c9c>
   15314:	b	15260 <__assert_fail@plt+0x3c24>
   15318:	vcvt.u32.f32	s15, s15
   1531c:	mov	r0, r4
   15320:	vmov	r1, s15
   15324:	bl	15014 <__assert_fail@plt+0x39d8>
   15328:	cmp	r0, #0
   1532c:	beq	152d8 <__assert_fail@plt+0x3c9c>
   15330:	mov	r2, sp
   15334:	mov	r3, #0
   15338:	mov	r1, r7
   1533c:	mov	r0, r4
   15340:	bl	144f0 <__assert_fail@plt+0x2eb4>
   15344:	cmp	r0, #0
   15348:	beq	1523c <__assert_fail@plt+0x3c00>
   1534c:	bl	11600 <abort@plt>
   15350:	bl	1133c <__stack_chk_fail@plt>
   15354:	svcmi	0x00800000
   15358:	andeq	fp, r2, r8, lsl #30
   1535c:	push	{r4, r5, lr}
   15360:	sub	sp, sp, #12
   15364:	ldr	r5, [pc, #68]	; 153b0 <__assert_fail@plt+0x3d74>
   15368:	mov	r2, sp
   1536c:	mov	r4, r1
   15370:	ldr	r3, [r5]
   15374:	str	r3, [sp, #4]
   15378:	bl	151b4 <__assert_fail@plt+0x3b78>
   1537c:	cmn	r0, #1
   15380:	moveq	r0, #0
   15384:	beq	15394 <__assert_fail@plt+0x3d58>
   15388:	cmp	r0, #0
   1538c:	movne	r0, r4
   15390:	ldreq	r0, [sp]
   15394:	ldr	r2, [sp, #4]
   15398:	ldr	r3, [r5]
   1539c:	cmp	r2, r3
   153a0:	bne	153ac <__assert_fail@plt+0x3d70>
   153a4:	add	sp, sp, #12
   153a8:	pop	{r4, r5, pc}
   153ac:	bl	1133c <__stack_chk_fail@plt>
   153b0:	andeq	fp, r2, r8, lsl #30
   153b4:	push	{r4, r5, r6, r7, lr}
   153b8:	sub	sp, sp, #12
   153bc:	ldr	r5, [pc, #276]	; 154d8 <__assert_fail@plt+0x3e9c>
   153c0:	mov	r3, #1
   153c4:	mov	r2, sp
   153c8:	ldr	ip, [r5]
   153cc:	mov	r4, r0
   153d0:	str	ip, [sp, #4]
   153d4:	bl	144f0 <__assert_fail@plt+0x2eb4>
   153d8:	subs	r6, r0, #0
   153dc:	beq	153fc <__assert_fail@plt+0x3dc0>
   153e0:	ldr	r2, [sp]
   153e4:	ldr	r3, [r4, #16]
   153e8:	ldr	r2, [r2]
   153ec:	sub	r3, r3, #1
   153f0:	cmp	r2, #0
   153f4:	str	r3, [r4, #16]
   153f8:	beq	15418 <__assert_fail@plt+0x3ddc>
   153fc:	ldr	r2, [sp, #4]
   15400:	ldr	r3, [r5]
   15404:	mov	r0, r6
   15408:	cmp	r2, r3
   1540c:	bne	154d4 <__assert_fail@plt+0x3e98>
   15410:	add	sp, sp, #12
   15414:	pop	{r4, r5, r6, r7, pc}
   15418:	vldr	s15, [r4, #8]
   1541c:	ldr	r3, [r4, #12]
   15420:	ldr	r2, [r4, #20]
   15424:	sub	r3, r3, #1
   15428:	vcvt.f32.u32	s14, s15
   1542c:	vldr	s13, [r2]
   15430:	vmov	s15, r3
   15434:	str	r3, [r4, #12]
   15438:	vcvt.f32.u32	s15, s15
   1543c:	vmul.f32	s14, s14, s13
   15440:	vcmpe.f32	s15, s14
   15444:	vmrs	APSR_nzcv, fpscr
   15448:	bpl	153fc <__assert_fail@plt+0x3dc0>
   1544c:	add	r0, r4, #20
   15450:	bl	14608 <__assert_fail@plt+0x2fcc>
   15454:	vldr	s15, [r4, #8]
   15458:	ldr	r3, [r4, #20]
   1545c:	vldr	s13, [r4, #12]
   15460:	vcvt.f32.u32	s15, s15
   15464:	vldr	s14, [r3]
   15468:	vcvt.f32.u32	s13, s13
   1546c:	vmul.f32	s14, s15, s14
   15470:	vcmpe.f32	s13, s14
   15474:	vmrs	APSR_nzcv, fpscr
   15478:	bpl	153fc <__assert_fail@plt+0x3dc0>
   1547c:	vldr	s14, [r3, #4]
   15480:	ldrb	r2, [r3, #16]
   15484:	mov	r0, r4
   15488:	vmul.f32	s15, s15, s14
   1548c:	cmp	r2, #0
   15490:	vldreq	s14, [r3, #8]
   15494:	vmuleq.f32	s15, s15, s14
   15498:	vcvt.u32.f32	s15, s15
   1549c:	vmov	r1, s15
   154a0:	bl	15014 <__assert_fail@plt+0x39d8>
   154a4:	cmp	r0, #0
   154a8:	bne	153fc <__assert_fail@plt+0x3dc0>
   154ac:	ldr	r0, [r4, #36]	; 0x24
   154b0:	cmp	r0, #0
   154b4:	beq	154c8 <__assert_fail@plt+0x3e8c>
   154b8:	ldr	r7, [r0, #4]
   154bc:	bl	112f4 <free@plt>
   154c0:	subs	r0, r7, #0
   154c4:	bne	154b8 <__assert_fail@plt+0x3e7c>
   154c8:	mov	r3, #0
   154cc:	str	r3, [r4, #36]	; 0x24
   154d0:	b	153fc <__assert_fail@plt+0x3dc0>
   154d4:	bl	1133c <__stack_chk_fail@plt>
   154d8:	andeq	fp, r2, r8, lsl #30
   154dc:	push	{r4, r5, r6, lr}
   154e0:	mov	r4, r0
   154e4:	ldr	r0, [r0]
   154e8:	mov	r5, r1
   154ec:	bl	18f14 <__assert_fail@plt+0x78d8>
   154f0:	ldr	ip, [r4, #8]
   154f4:	mov	r2, r5
   154f8:	ldr	r1, [r4, #12]
   154fc:	mov	r3, #0
   15500:	eor	r0, r0, ip
   15504:	bl	19dcc <__assert_fail@plt+0x8790>
   15508:	mov	r0, r2
   1550c:	pop	{r4, r5, r6, pc}
   15510:	push	{r4, lr}
   15514:	mov	r2, r1
   15518:	mov	r3, #0
   1551c:	ldrd	r0, [r0, #8]
   15520:	bl	19dcc <__assert_fail@plt+0x8790>
   15524:	mov	r0, r2
   15528:	pop	{r4, pc}
   1552c:	ldrd	r2, [r1, #8]
   15530:	push	{r4, r5}
   15534:	ldrd	r4, [r0, #8]
   15538:	cmp	r5, r3
   1553c:	cmpeq	r4, r2
   15540:	beq	15550 <__assert_fail@plt+0x3f14>
   15544:	mov	r0, #0
   15548:	pop	{r4, r5}
   1554c:	bx	lr
   15550:	ldrd	r4, [r0, #16]
   15554:	ldrd	r2, [r1, #16]
   15558:	cmp	r5, r3
   1555c:	cmpeq	r4, r2
   15560:	bne	15544 <__assert_fail@plt+0x3f08>
   15564:	ldr	r1, [r1]
   15568:	ldr	r0, [r0]
   1556c:	pop	{r4, r5}
   15570:	b	17be0 <__assert_fail@plt+0x65a4>
   15574:	ldrd	r2, [r1, #8]
   15578:	push	{r4, r5, r6, lr}
   1557c:	ldrd	r4, [r0, #8]
   15580:	cmp	r5, r3
   15584:	cmpeq	r4, r2
   15588:	beq	15594 <__assert_fail@plt+0x3f58>
   1558c:	mov	r0, #0
   15590:	pop	{r4, r5, r6, pc}
   15594:	ldrd	r4, [r0, #16]
   15598:	ldrd	r2, [r1, #16]
   1559c:	cmp	r5, r3
   155a0:	cmpeq	r4, r2
   155a4:	bne	1558c <__assert_fail@plt+0x3f50>
   155a8:	ldr	r1, [r1]
   155ac:	ldr	r0, [r0]
   155b0:	bl	11294 <strcmp@plt>
   155b4:	clz	r0, r0
   155b8:	lsr	r0, r0, #5
   155bc:	pop	{r4, r5, r6, pc}
   155c0:	push	{r4, lr}
   155c4:	mov	r4, r0
   155c8:	ldr	r0, [r0]
   155cc:	bl	112f4 <free@plt>
   155d0:	mov	r0, r4
   155d4:	pop	{r4, lr}
   155d8:	b	112f4 <free@plt>
   155dc:	push	{r4, r5, r6, lr}
   155e0:	subs	r4, r0, #0
   155e4:	beq	15658 <__assert_fail@plt+0x401c>
   155e8:	mov	r1, #47	; 0x2f
   155ec:	bl	11564 <strrchr@plt>
   155f0:	subs	r5, r0, #0
   155f4:	beq	15644 <__assert_fail@plt+0x4008>
   155f8:	add	r6, r5, #1
   155fc:	sub	r3, r6, r4
   15600:	cmp	r3, #6
   15604:	ble	15644 <__assert_fail@plt+0x4008>
   15608:	mov	r2, #7
   1560c:	ldr	r1, [pc, #96]	; 15674 <__assert_fail@plt+0x4038>
   15610:	sub	r0, r5, #6
   15614:	bl	115f4 <strncmp@plt>
   15618:	cmp	r0, #0
   1561c:	bne	15644 <__assert_fail@plt+0x4008>
   15620:	mov	r2, #3
   15624:	ldr	r1, [pc, #76]	; 15678 <__assert_fail@plt+0x403c>
   15628:	mov	r0, r6
   1562c:	bl	115f4 <strncmp@plt>
   15630:	cmp	r0, #0
   15634:	movne	r4, r6
   15638:	ldreq	r3, [pc, #60]	; 1567c <__assert_fail@plt+0x4040>
   1563c:	addeq	r4, r5, #4
   15640:	streq	r4, [r3]
   15644:	ldr	r2, [pc, #52]	; 15680 <__assert_fail@plt+0x4044>
   15648:	ldr	r3, [pc, #52]	; 15684 <__assert_fail@plt+0x4048>
   1564c:	str	r4, [r2]
   15650:	str	r4, [r3]
   15654:	pop	{r4, r5, r6, pc}
   15658:	ldr	r3, [pc, #40]	; 15688 <__assert_fail@plt+0x404c>
   1565c:	mov	r2, #55	; 0x37
   15660:	mov	r1, #1
   15664:	ldr	r3, [r3]
   15668:	ldr	r0, [pc, #28]	; 1568c <__assert_fail@plt+0x4050>
   1566c:	bl	11384 <fwrite@plt>
   15670:	bl	11600 <abort@plt>
   15674:	andeq	fp, r1, r8, lsr #5
   15678:			; <UNDEFINED> instruction: 0x0001b2b0
   1567c:			; <UNDEFINED> instruction: 0x0002c1b8
   15680:	andeq	ip, r2, r4, lsl #4
   15684:			; <UNDEFINED> instruction: 0x0002c1bc
   15688:	andeq	ip, r2, r8, asr #3
   1568c:	andeq	fp, r1, r0, ror r2
   15690:	push	{r4, lr}
   15694:	mov	r2, #48	; 0x30
   15698:	mov	r4, r1
   1569c:	mov	r1, #0
   156a0:	bl	114c8 <memset@plt>
   156a4:	cmp	r4, #10
   156a8:	beq	156b4 <__assert_fail@plt+0x4078>
   156ac:	str	r4, [r0]
   156b0:	pop	{r4, pc}
   156b4:	bl	11600 <abort@plt>
   156b8:	push	{r4, r5, r6, lr}
   156bc:	mov	r2, #5
   156c0:	mov	r5, r0
   156c4:	mov	r6, r1
   156c8:	mov	r1, r0
   156cc:	mov	r0, #0
   156d0:	bl	11330 <dcgettext@plt>
   156d4:	cmp	r5, r0
   156d8:	mov	r4, r0
   156dc:	beq	156e8 <__assert_fail@plt+0x40ac>
   156e0:	mov	r0, r4
   156e4:	pop	{r4, r5, r6, pc}
   156e8:	bl	18f50 <__assert_fail@plt+0x7914>
   156ec:	ldrb	r3, [r0]
   156f0:	bic	r3, r3, #32
   156f4:	cmp	r3, #85	; 0x55
   156f8:	bne	15758 <__assert_fail@plt+0x411c>
   156fc:	ldrb	r3, [r0, #1]
   15700:	bic	r3, r3, #32
   15704:	cmp	r3, #84	; 0x54
   15708:	bne	157d0 <__assert_fail@plt+0x4194>
   1570c:	ldrb	r3, [r0, #2]
   15710:	bic	r3, r3, #32
   15714:	cmp	r3, #70	; 0x46
   15718:	bne	157d0 <__assert_fail@plt+0x4194>
   1571c:	ldrb	r3, [r0, #3]
   15720:	cmp	r3, #45	; 0x2d
   15724:	bne	157d0 <__assert_fail@plt+0x4194>
   15728:	ldrb	r3, [r0, #4]
   1572c:	cmp	r3, #56	; 0x38
   15730:	bne	157d0 <__assert_fail@plt+0x4194>
   15734:	ldrb	r3, [r0, #5]
   15738:	cmp	r3, #0
   1573c:	bne	157d0 <__assert_fail@plt+0x4194>
   15740:	ldrb	r2, [r4]
   15744:	ldr	r3, [pc, #156]	; 157e8 <__assert_fail@plt+0x41ac>
   15748:	ldr	r4, [pc, #156]	; 157ec <__assert_fail@plt+0x41b0>
   1574c:	cmp	r2, #96	; 0x60
   15750:	movne	r4, r3
   15754:	b	156e0 <__assert_fail@plt+0x40a4>
   15758:	cmp	r3, #71	; 0x47
   1575c:	bne	157d0 <__assert_fail@plt+0x4194>
   15760:	ldrb	r3, [r0, #1]
   15764:	bic	r3, r3, #32
   15768:	cmp	r3, #66	; 0x42
   1576c:	bne	157d0 <__assert_fail@plt+0x4194>
   15770:	ldrb	r3, [r0, #2]
   15774:	cmp	r3, #49	; 0x31
   15778:	bne	157d0 <__assert_fail@plt+0x4194>
   1577c:	ldrb	r3, [r0, #3]
   15780:	cmp	r3, #56	; 0x38
   15784:	bne	157d0 <__assert_fail@plt+0x4194>
   15788:	ldrb	r3, [r0, #4]
   1578c:	cmp	r3, #48	; 0x30
   15790:	bne	157d0 <__assert_fail@plt+0x4194>
   15794:	ldrb	r3, [r0, #5]
   15798:	cmp	r3, #51	; 0x33
   1579c:	bne	157d0 <__assert_fail@plt+0x4194>
   157a0:	ldrb	r3, [r0, #6]
   157a4:	cmp	r3, #48	; 0x30
   157a8:	bne	157d0 <__assert_fail@plt+0x4194>
   157ac:	ldrb	r3, [r0, #7]
   157b0:	cmp	r3, #0
   157b4:	bne	157d0 <__assert_fail@plt+0x4194>
   157b8:	ldrb	r2, [r4]
   157bc:	ldr	r3, [pc, #44]	; 157f0 <__assert_fail@plt+0x41b4>
   157c0:	ldr	r4, [pc, #44]	; 157f4 <__assert_fail@plt+0x41b8>
   157c4:	cmp	r2, #96	; 0x60
   157c8:	movne	r4, r3
   157cc:	b	156e0 <__assert_fail@plt+0x40a4>
   157d0:	ldr	r3, [pc, #32]	; 157f8 <__assert_fail@plt+0x41bc>
   157d4:	ldr	r4, [pc, #32]	; 157fc <__assert_fail@plt+0x41c0>
   157d8:	cmp	r6, #9
   157dc:	movne	r4, r3
   157e0:	mov	r0, r4
   157e4:	pop	{r4, r5, r6, pc}
   157e8:	andeq	fp, r1, ip, lsl #6
   157ec:	andeq	fp, r1, r8, lsl r3
   157f0:	andeq	fp, r1, r0, lsl r3
   157f4:	andeq	fp, r1, r4, lsl r3
   157f8:	andeq	fp, r1, ip, lsl r3
   157fc:	andeq	fp, r1, r8, lsl #6
   15800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15804:	sub	sp, sp, #124	; 0x7c
   15808:	ldr	ip, [pc, #3576]	; 16608 <__assert_fail@plt+0x4fcc>
   1580c:	str	r3, [sp, #24]
   15810:	ldr	r3, [sp, #168]	; 0xa8
   15814:	ldr	ip, [ip]
   15818:	str	r3, [sp, #56]	; 0x38
   1581c:	ldr	r3, [sp, #172]	; 0xac
   15820:	ldr	r8, [sp, #160]	; 0xa0
   15824:	str	r3, [sp, #80]	; 0x50
   15828:	ldr	r3, [sp, #176]	; 0xb0
   1582c:	mov	fp, r0
   15830:	str	r3, [sp, #76]	; 0x4c
   15834:	mov	sl, r1
   15838:	str	r2, [sp, #36]	; 0x24
   1583c:	str	ip, [sp, #116]	; 0x74
   15840:	bl	1139c <__ctype_get_mb_cur_max@plt>
   15844:	ldr	r3, [sp, #164]	; 0xa4
   15848:	ands	r4, r3, #2
   1584c:	movne	r3, #1
   15850:	moveq	r3, #0
   15854:	str	r3, [sp, #32]
   15858:	str	r0, [sp, #64]	; 0x40
   1585c:	cmp	r8, #10
   15860:	ldrls	pc, [pc, r8, lsl #2]
   15864:	b	17014 <__assert_fail@plt+0x59d8>
   15868:	andeq	r5, r1, ip, asr ip
   1586c:	strdeq	r5, [r1], -r4
   15870:	strdeq	r6, [r1], -r4
   15874:	andeq	r5, r1, r4, lsl sp
   15878:	andeq	r5, r1, r8, asr #23
   1587c:	andeq	r5, r1, r0, lsl ip
   15880:	andeq	r5, r1, ip, lsl #25
   15884:	andeq	r5, r1, r4, asr #25
   15888:	muleq	r1, r4, r8
   1588c:	muleq	r1, r4, r8
   15890:	muleq	r1, r4, r8
   15894:	cmp	r8, #10
   15898:	beq	158bc <__assert_fail@plt+0x4280>
   1589c:	mov	r1, r8
   158a0:	ldr	r0, [pc, #3428]	; 1660c <__assert_fail@plt+0x4fd0>
   158a4:	bl	156b8 <__assert_fail@plt+0x407c>
   158a8:	mov	r1, r8
   158ac:	str	r0, [sp, #80]	; 0x50
   158b0:	ldr	r0, [pc, #3420]	; 16614 <__assert_fail@plt+0x4fd8>
   158b4:	bl	156b8 <__assert_fail@plt+0x407c>
   158b8:	str	r0, [sp, #76]	; 0x4c
   158bc:	cmp	r4, #0
   158c0:	movne	r4, #0
   158c4:	beq	16cd4 <__assert_fail@plt+0x5698>
   158c8:	ldr	r7, [sp, #76]	; 0x4c
   158cc:	mov	r5, #0
   158d0:	mov	r6, #1
   158d4:	mov	r0, r7
   158d8:	str	r6, [sp, #40]	; 0x28
   158dc:	str	r5, [sp, #68]	; 0x44
   158e0:	bl	11480 <strlen@plt>
   158e4:	str	r6, [sp, #28]
   158e8:	str	r5, [sp, #44]	; 0x2c
   158ec:	str	r5, [sp, #72]	; 0x48
   158f0:	str	r7, [sp, #60]	; 0x3c
   158f4:	str	r0, [sp, #52]	; 0x34
   158f8:	str	r8, [sp, #160]	; 0xa0
   158fc:	mov	r8, fp
   15900:	ldr	fp, [sp, #160]	; 0xa0
   15904:	mov	r9, #0
   15908:	ldr	r3, [sp, #24]
   1590c:	cmn	r3, #1
   15910:	beq	15e78 <__assert_fail@plt+0x483c>
   15914:	ldr	r3, [sp, #24]
   15918:	subs	r6, r3, r9
   1591c:	movne	r6, #1
   15920:	cmp	r6, #0
   15924:	beq	15e90 <__assert_fail@plt+0x4854>
   15928:	ldr	r7, [sp, #28]
   1592c:	ldr	r0, [sp, #36]	; 0x24
   15930:	cmp	fp, #2
   15934:	moveq	r7, #0
   15938:	andne	r7, r7, #1
   1593c:	add	r3, r0, r9
   15940:	cmp	r7, #0
   15944:	str	r3, [sp, #48]	; 0x30
   15948:	beq	16334 <__assert_fail@plt+0x4cf8>
   1594c:	ldr	r2, [sp, #52]	; 0x34
   15950:	cmp	r2, #0
   15954:	beq	16618 <__assert_fail@plt+0x4fdc>
   15958:	ldr	r1, [sp, #24]
   1595c:	cmp	r2, #1
   15960:	mov	r3, r2
   15964:	movls	r3, #0
   15968:	movhi	r3, #1
   1596c:	cmn	r1, #1
   15970:	movne	r3, #0
   15974:	cmp	r3, #0
   15978:	add	r5, r9, r2
   1597c:	beq	15988 <__assert_fail@plt+0x434c>
   15980:	bl	11480 <strlen@plt>
   15984:	str	r0, [sp, #24]
   15988:	ldr	r3, [sp, #24]
   1598c:	cmp	r5, r3
   15990:	bhi	16618 <__assert_fail@plt+0x4fdc>
   15994:	ldr	r2, [sp, #52]	; 0x34
   15998:	ldr	r1, [sp, #60]	; 0x3c
   1599c:	ldr	r0, [sp, #48]	; 0x30
   159a0:	bl	11324 <memcmp@plt>
   159a4:	cmp	r0, #0
   159a8:	bne	16618 <__assert_fail@plt+0x4fdc>
   159ac:	ldr	r3, [sp, #32]
   159b0:	cmp	r3, #0
   159b4:	bne	16ed4 <__assert_fail@plt+0x5898>
   159b8:	ldr	r3, [sp, #48]	; 0x30
   159bc:	ldrb	r5, [r3]
   159c0:	cmp	r5, #126	; 0x7e
   159c4:	ldrls	pc, [pc, r5, lsl #2]
   159c8:	b	16298 <__assert_fail@plt+0x4c5c>
   159cc:	andeq	r6, r1, r4, lsl #3
   159d0:	muleq	r1, r8, r2
   159d4:	muleq	r1, r8, r2
   159d8:	muleq	r1, r8, r2
   159dc:	muleq	r1, r8, r2
   159e0:	muleq	r1, r8, r2
   159e4:	muleq	r1, r8, r2
   159e8:	andeq	r6, r1, r0, asr r2
   159ec:	andeq	r6, r1, r0, asr #4
   159f0:	andeq	r6, r1, r0, asr #2
   159f4:	andeq	r6, r1, r8, lsl #2
   159f8:	andeq	r6, r1, r0, ror #2
   159fc:	andeq	r6, r1, r8, asr #2
   15a00:	andeq	r6, r1, r8, ror r0
   15a04:	muleq	r1, r8, r2
   15a08:	muleq	r1, r8, r2
   15a0c:	muleq	r1, r8, r2
   15a10:	muleq	r1, r8, r2
   15a14:	muleq	r1, r8, r2
   15a18:	muleq	r1, r8, r2
   15a1c:	muleq	r1, r8, r2
   15a20:	muleq	r1, r8, r2
   15a24:	muleq	r1, r8, r2
   15a28:	muleq	r1, r8, r2
   15a2c:	muleq	r1, r8, r2
   15a30:	muleq	r1, r8, r2
   15a34:	muleq	r1, r8, r2
   15a38:	muleq	r1, r8, r2
   15a3c:	muleq	r1, r8, r2
   15a40:	muleq	r1, r8, r2
   15a44:	muleq	r1, r8, r2
   15a48:	muleq	r1, r8, r2
   15a4c:	andeq	r6, r1, r8, asr r2
   15a50:	andeq	r6, r1, ip, ror #2
   15a54:	andeq	r6, r1, ip, ror #2
   15a58:	andeq	r6, r1, r0, ror r2
   15a5c:	andeq	r6, r1, ip, ror #2
   15a60:	andeq	r6, r1, ip, lsl #5
   15a64:	andeq	r6, r1, ip, ror #2
   15a68:	andeq	r5, r1, ip, lsr #31
   15a6c:	andeq	r6, r1, ip, ror #2
   15a70:	andeq	r6, r1, ip, ror #2
   15a74:	andeq	r6, r1, ip, ror #2
   15a78:	andeq	r6, r1, ip, lsl #5
   15a7c:	andeq	r6, r1, ip, lsl #5
   15a80:	andeq	r6, r1, ip, lsl #5
   15a84:	andeq	r6, r1, ip, lsl #5
   15a88:	andeq	r6, r1, ip, lsl #5
   15a8c:	andeq	r6, r1, ip, lsl #5
   15a90:	andeq	r6, r1, ip, lsl #5
   15a94:	andeq	r6, r1, ip, lsl #5
   15a98:	andeq	r6, r1, ip, lsl #5
   15a9c:	andeq	r6, r1, ip, lsl #5
   15aa0:	andeq	r6, r1, ip, lsl #5
   15aa4:	andeq	r6, r1, ip, lsl #5
   15aa8:	andeq	r6, r1, ip, lsl #5
   15aac:	andeq	r6, r1, ip, lsl #5
   15ab0:	andeq	r6, r1, ip, lsl #5
   15ab4:	andeq	r6, r1, ip, lsl #5
   15ab8:	andeq	r6, r1, ip, ror #2
   15abc:	andeq	r6, r1, ip, ror #2
   15ac0:	andeq	r6, r1, ip, ror #2
   15ac4:	andeq	r6, r1, ip, ror #2
   15ac8:	andeq	r5, r1, r0, lsl #31
   15acc:	muleq	r1, r8, r2
   15ad0:	andeq	r6, r1, ip, lsl #5
   15ad4:	andeq	r6, r1, ip, lsl #5
   15ad8:	andeq	r6, r1, ip, lsl #5
   15adc:	andeq	r6, r1, ip, lsl #5
   15ae0:	andeq	r6, r1, ip, lsl #5
   15ae4:	andeq	r6, r1, ip, lsl #5
   15ae8:	andeq	r6, r1, ip, lsl #5
   15aec:	andeq	r6, r1, ip, lsl #5
   15af0:	andeq	r6, r1, ip, lsl #5
   15af4:	andeq	r6, r1, ip, lsl #5
   15af8:	andeq	r6, r1, ip, lsl #5
   15afc:	andeq	r6, r1, ip, lsl #5
   15b00:	andeq	r6, r1, ip, lsl #5
   15b04:	andeq	r6, r1, ip, lsl #5
   15b08:	andeq	r6, r1, ip, lsl #5
   15b0c:	andeq	r6, r1, ip, lsl #5
   15b10:	andeq	r6, r1, ip, lsl #5
   15b14:	andeq	r6, r1, ip, lsl #5
   15b18:	andeq	r6, r1, ip, lsl #5
   15b1c:	andeq	r6, r1, ip, lsl #5
   15b20:	andeq	r6, r1, ip, lsl #5
   15b24:	andeq	r6, r1, ip, lsl #5
   15b28:	andeq	r6, r1, ip, lsl #5
   15b2c:	andeq	r6, r1, ip, lsl #5
   15b30:	andeq	r6, r1, ip, lsl #5
   15b34:	andeq	r6, r1, ip, lsl #5
   15b38:	andeq	r6, r1, ip, ror #2
   15b3c:	andeq	r5, r1, r8, lsr pc
   15b40:	andeq	r6, r1, ip, lsl #5
   15b44:	andeq	r6, r1, ip, ror #2
   15b48:	andeq	r6, r1, ip, lsl #5
   15b4c:	andeq	r6, r1, ip, ror #2
   15b50:	andeq	r6, r1, ip, lsl #5
   15b54:	andeq	r6, r1, ip, lsl #5
   15b58:	andeq	r6, r1, ip, lsl #5
   15b5c:	andeq	r6, r1, ip, lsl #5
   15b60:	andeq	r6, r1, ip, lsl #5
   15b64:	andeq	r6, r1, ip, lsl #5
   15b68:	andeq	r6, r1, ip, lsl #5
   15b6c:	andeq	r6, r1, ip, lsl #5
   15b70:	andeq	r6, r1, ip, lsl #5
   15b74:	andeq	r6, r1, ip, lsl #5
   15b78:	andeq	r6, r1, ip, lsl #5
   15b7c:	andeq	r6, r1, ip, lsl #5
   15b80:	andeq	r6, r1, ip, lsl #5
   15b84:	andeq	r6, r1, ip, lsl #5
   15b88:	andeq	r6, r1, ip, lsl #5
   15b8c:	andeq	r6, r1, ip, lsl #5
   15b90:	andeq	r6, r1, ip, lsl #5
   15b94:	andeq	r6, r1, ip, lsl #5
   15b98:	andeq	r6, r1, ip, lsl #5
   15b9c:	andeq	r6, r1, ip, lsl #5
   15ba0:	andeq	r6, r1, ip, lsl #5
   15ba4:	andeq	r6, r1, ip, lsl #5
   15ba8:	andeq	r6, r1, ip, lsl #5
   15bac:	andeq	r6, r1, ip, lsl #5
   15bb0:	andeq	r6, r1, ip, lsl #5
   15bb4:	andeq	r6, r1, ip, lsl #5
   15bb8:	andeq	r5, r1, r0, asr sp
   15bbc:	andeq	r6, r1, ip, ror #2
   15bc0:	andeq	r5, r1, r0, asr sp
   15bc4:	andeq	r6, r1, r0, ror r2
   15bc8:	cmp	r4, #0
   15bcc:	moveq	r3, #1
   15bd0:	streq	r3, [sp, #28]
   15bd4:	beq	16300 <__assert_fail@plt+0x4cc4>
   15bd8:	mov	r3, #0
   15bdc:	mov	r4, r3
   15be0:	mov	r2, #1
   15be4:	str	r2, [sp, #40]	; 0x28
   15be8:	str	r3, [sp, #68]	; 0x44
   15bec:	str	r2, [sp, #32]
   15bf0:	str	r2, [sp, #52]	; 0x34
   15bf4:	ldr	r3, [pc, #2584]	; 16614 <__assert_fail@plt+0x4fd8>
   15bf8:	str	r4, [sp, #44]	; 0x2c
   15bfc:	str	r4, [sp, #72]	; 0x48
   15c00:	str	r4, [sp, #28]
   15c04:	str	r3, [sp, #60]	; 0x3c
   15c08:	mov	r8, #2
   15c0c:	b	158f8 <__assert_fail@plt+0x42bc>
   15c10:	cmp	r4, #0
   15c14:	bne	16ea0 <__assert_fail@plt+0x5864>
   15c18:	cmp	sl, #0
   15c1c:	beq	16c60 <__assert_fail@plt+0x5624>
   15c20:	mov	r3, #34	; 0x22
   15c24:	strb	r3, [fp]
   15c28:	ldr	r3, [pc, #2528]	; 16610 <__assert_fail@plt+0x4fd4>
   15c2c:	mov	r1, r4
   15c30:	mov	r2, #1
   15c34:	str	r4, [sp, #68]	; 0x44
   15c38:	str	r2, [sp, #40]	; 0x28
   15c3c:	mov	r4, r2
   15c40:	str	r1, [sp, #44]	; 0x2c
   15c44:	str	r1, [sp, #72]	; 0x48
   15c48:	str	r1, [sp, #32]
   15c4c:	str	r2, [sp, #28]
   15c50:	str	r2, [sp, #52]	; 0x34
   15c54:	str	r3, [sp, #60]	; 0x3c
   15c58:	b	158f8 <__assert_fail@plt+0x42bc>
   15c5c:	mov	r3, #0
   15c60:	str	r3, [sp, #68]	; 0x44
   15c64:	str	r3, [sp, #44]	; 0x2c
   15c68:	str	r3, [sp, #32]
   15c6c:	str	r3, [sp, #28]
   15c70:	str	r3, [sp, #60]	; 0x3c
   15c74:	mov	r3, #1
   15c78:	str	r8, [sp, #72]	; 0x48
   15c7c:	str	r8, [sp, #52]	; 0x34
   15c80:	mov	r4, r8
   15c84:	str	r3, [sp, #40]	; 0x28
   15c88:	b	158f8 <__assert_fail@plt+0x42bc>
   15c8c:	mov	r3, #1
   15c90:	str	r3, [sp, #40]	; 0x28
   15c94:	str	r3, [sp, #32]
   15c98:	str	r3, [sp, #28]
   15c9c:	str	r3, [sp, #52]	; 0x34
   15ca0:	ldr	r3, [pc, #2408]	; 16610 <__assert_fail@plt+0x4fd4>
   15ca4:	mov	r2, #0
   15ca8:	mov	r4, r2
   15cac:	str	r2, [sp, #68]	; 0x44
   15cb0:	str	r2, [sp, #44]	; 0x2c
   15cb4:	str	r2, [sp, #72]	; 0x48
   15cb8:	str	r3, [sp, #60]	; 0x3c
   15cbc:	mov	r8, #5
   15cc0:	b	158f8 <__assert_fail@plt+0x42bc>
   15cc4:	mov	r3, #0
   15cc8:	mov	r2, #1
   15ccc:	str	r2, [sp, #40]	; 0x28
   15cd0:	mov	r4, r3
   15cd4:	str	r3, [sp, #68]	; 0x44
   15cd8:	str	r2, [sp, #28]
   15cdc:	str	r3, [sp, #44]	; 0x2c
   15ce0:	str	r3, [sp, #72]	; 0x48
   15ce4:	str	r3, [sp, #32]
   15ce8:	str	r3, [sp, #52]	; 0x34
   15cec:	str	r3, [sp, #60]	; 0x3c
   15cf0:	b	158f8 <__assert_fail@plt+0x42bc>
   15cf4:	mov	r2, #1
   15cf8:	mov	r3, #0
   15cfc:	str	r2, [sp, #40]	; 0x28
   15d00:	mov	r4, r3
   15d04:	str	r3, [sp, #68]	; 0x44
   15d08:	str	r8, [sp, #52]	; 0x34
   15d0c:	str	r2, [sp, #32]
   15d10:	b	15bf4 <__assert_fail@plt+0x45b8>
   15d14:	mov	r3, #1
   15d18:	str	r3, [sp, #40]	; 0x28
   15d1c:	str	r3, [sp, #32]
   15d20:	str	r3, [sp, #28]
   15d24:	str	r3, [sp, #52]	; 0x34
   15d28:	ldr	r3, [pc, #2276]	; 16614 <__assert_fail@plt+0x4fd8>
   15d2c:	mov	r2, #0
   15d30:	mov	r4, r2
   15d34:	str	r2, [sp, #68]	; 0x44
   15d38:	str	r2, [sp, #44]	; 0x2c
   15d3c:	str	r2, [sp, #72]	; 0x48
   15d40:	str	r3, [sp, #60]	; 0x3c
   15d44:	mov	r8, #2
   15d48:	b	158f8 <__assert_fail@plt+0x42bc>
   15d4c:	mov	r7, #0
   15d50:	ldr	r3, [sp, #24]
   15d54:	cmn	r3, #1
   15d58:	beq	16894 <__assert_fail@plt+0x5258>
   15d5c:	ldr	r3, [sp, #24]
   15d60:	subs	r3, r3, #1
   15d64:	movne	r3, #1
   15d68:	cmp	r3, #0
   15d6c:	sub	r2, fp, #2
   15d70:	clz	r2, r2
   15d74:	lsr	r2, r2, #5
   15d78:	bne	15f74 <__assert_fail@plt+0x4938>
   15d7c:	cmp	r9, #0
   15d80:	bne	15f74 <__assert_fail@plt+0x4938>
   15d84:	ldr	r3, [sp, #32]
   15d88:	tst	r3, r2
   15d8c:	bne	16094 <__assert_fail@plt+0x4a58>
   15d90:	ldr	r3, [sp, #28]
   15d94:	eor	r3, r3, #1
   15d98:	orr	r3, r2, r3
   15d9c:	ldr	r2, [sp, #32]
   15da0:	eor	r3, r3, #1
   15da4:	orrs	r3, r2, r3
   15da8:	beq	15dd8 <__assert_fail@plt+0x479c>
   15dac:	mov	r3, #0
   15db0:	ldr	r1, [sp, #56]	; 0x38
   15db4:	cmp	r1, #0
   15db8:	beq	15dd8 <__assert_fail@plt+0x479c>
   15dbc:	lsr	r2, r5, #5
   15dc0:	and	r0, r5, #31
   15dc4:	uxtb	r2, r2
   15dc8:	ldr	r1, [r1, r2, lsl #2]
   15dcc:	lsr	r2, r1, r0
   15dd0:	tst	r2, #1
   15dd4:	bne	15de0 <__assert_fail@plt+0x47a4>
   15dd8:	cmp	r7, #0
   15ddc:	beq	16030 <__assert_fail@plt+0x49f4>
   15de0:	sub	r2, fp, #2
   15de4:	clz	r2, r2
   15de8:	lsr	r2, r2, #5
   15dec:	ldr	r3, [sp, #32]
   15df0:	cmp	r3, #0
   15df4:	bne	16120 <__assert_fail@plt+0x4ae4>
   15df8:	ldr	r3, [sp, #44]	; 0x2c
   15dfc:	eor	r3, r3, #1
   15e00:	ands	r3, r2, r3
   15e04:	beq	15e3c <__assert_fail@plt+0x4800>
   15e08:	cmp	sl, r4
   15e0c:	movhi	r2, #39	; 0x27
   15e10:	strbhi	r2, [r8, r4]
   15e14:	add	r2, r4, #1
   15e18:	cmp	r2, sl
   15e1c:	movcc	r1, #36	; 0x24
   15e20:	strbcc	r1, [r8, r2]
   15e24:	add	r2, r4, #2
   15e28:	cmp	r2, sl
   15e2c:	add	r4, r4, #3
   15e30:	movcc	r1, #39	; 0x27
   15e34:	strbcc	r1, [r8, r2]
   15e38:	str	r3, [sp, #44]	; 0x2c
   15e3c:	cmp	r4, sl
   15e40:	movcc	r3, #92	; 0x5c
   15e44:	strbcc	r3, [r8, r4]
   15e48:	add	r9, r9, #1
   15e4c:	add	r4, r4, #1
   15e50:	cmp	r4, sl
   15e54:	ldr	r3, [sp, #40]	; 0x28
   15e58:	strbcc	r5, [r8, r4]
   15e5c:	cmp	r6, #0
   15e60:	moveq	r3, #0
   15e64:	str	r3, [sp, #40]	; 0x28
   15e68:	ldr	r3, [sp, #24]
   15e6c:	add	r4, r4, #1
   15e70:	cmn	r3, #1
   15e74:	bne	15914 <__assert_fail@plt+0x42d8>
   15e78:	ldr	r3, [sp, #36]	; 0x24
   15e7c:	ldrb	r6, [r3, r9]
   15e80:	adds	r6, r6, #0
   15e84:	movne	r6, #1
   15e88:	cmp	r6, #0
   15e8c:	bne	15928 <__assert_fail@plt+0x42ec>
   15e90:	str	fp, [sp, #160]	; 0xa0
   15e94:	mov	fp, r8
   15e98:	ldr	r8, [sp, #160]	; 0xa0
   15e9c:	ldr	r1, [sp, #32]
   15ea0:	cmp	r4, #0
   15ea4:	sub	r2, r8, #2
   15ea8:	clz	r2, r2
   15eac:	lsr	r2, r2, #5
   15eb0:	andeq	r3, r2, r1
   15eb4:	movne	r3, #0
   15eb8:	cmp	r3, #0
   15ebc:	bne	16fa8 <__assert_fail@plt+0x596c>
   15ec0:	eor	r3, r1, #1
   15ec4:	ands	r2, r2, r3
   15ec8:	beq	16ee4 <__assert_fail@plt+0x58a8>
   15ecc:	ldr	r3, [sp, #68]	; 0x44
   15ed0:	cmp	r3, #0
   15ed4:	beq	16ee8 <__assert_fail@plt+0x58ac>
   15ed8:	ldr	r3, [sp, #40]	; 0x28
   15edc:	cmp	r3, #0
   15ee0:	bne	16f64 <__assert_fail@plt+0x5928>
   15ee4:	ldr	r3, [sp, #72]	; 0x48
   15ee8:	adds	r3, r3, #0
   15eec:	movne	r3, #1
   15ef0:	cmp	sl, #0
   15ef4:	movne	r3, #0
   15ef8:	cmp	r3, #0
   15efc:	ldreq	r2, [sp, #68]	; 0x44
   15f00:	beq	16ee8 <__assert_fail@plt+0x58ac>
   15f04:	ldr	sl, [sp, #72]	; 0x48
   15f08:	str	r3, [sp, #68]	; 0x44
   15f0c:	ldr	r3, [pc, #1792]	; 16614 <__assert_fail@plt+0x4fd8>
   15f10:	mov	r2, #39	; 0x27
   15f14:	mov	r4, #1
   15f18:	str	r3, [sp, #60]	; 0x3c
   15f1c:	mov	r3, #0
   15f20:	strb	r2, [fp]
   15f24:	str	r4, [sp, #52]	; 0x34
   15f28:	mov	r8, #2
   15f2c:	str	r3, [sp, #32]
   15f30:	b	158f8 <__assert_fail@plt+0x42bc>
   15f34:	mov	r7, #0
   15f38:	cmp	fp, #2
   15f3c:	beq	16874 <__assert_fail@plt+0x5238>
   15f40:	ldr	r3, [sp, #52]	; 0x34
   15f44:	ldr	r2, [sp, #28]
   15f48:	ldr	r1, [sp, #32]
   15f4c:	cmp	r3, #0
   15f50:	andne	r2, r2, r1
   15f54:	moveq	r2, #0
   15f58:	cmp	r2, #0
   15f5c:	moveq	r5, #92	; 0x5c
   15f60:	moveq	r3, r5
   15f64:	bne	16880 <__assert_fail@plt+0x5244>
   15f68:	ldr	r1, [sp, #28]
   15f6c:	cmp	r1, #0
   15f70:	bne	16ff0 <__assert_fail@plt+0x59b4>
   15f74:	mov	r6, #0
   15f78:	b	15d90 <__assert_fail@plt+0x4754>
   15f7c:	mov	r7, #0
   15f80:	cmp	fp, #2
   15f84:	beq	168e4 <__assert_fail@plt+0x52a8>
   15f88:	cmp	fp, #5
   15f8c:	beq	168a8 <__assert_fail@plt+0x526c>
   15f90:	sub	r2, fp, #2
   15f94:	mov	r6, #0
   15f98:	clz	r2, r2
   15f9c:	mov	r5, #63	; 0x3f
   15fa0:	lsr	r2, r2, #5
   15fa4:	b	15d90 <__assert_fail@plt+0x4754>
   15fa8:	mov	r7, #0
   15fac:	cmp	fp, #2
   15fb0:	strne	r6, [sp, #68]	; 0x44
   15fb4:	movne	r2, #0
   15fb8:	movne	r5, #39	; 0x27
   15fbc:	bne	15d90 <__assert_fail@plt+0x4754>
   15fc0:	ldr	r3, [sp, #32]
   15fc4:	cmp	r3, #0
   15fc8:	bne	16cc4 <__assert_fail@plt+0x5688>
   15fcc:	cmp	sl, #0
   15fd0:	ldr	r3, [sp, #72]	; 0x48
   15fd4:	clz	r3, r3
   15fd8:	lsr	r3, r3, #5
   15fdc:	moveq	r3, #0
   15fe0:	cmp	r3, #0
   15fe4:	bne	16bf8 <__assert_fail@plt+0x55bc>
   15fe8:	cmp	sl, r4
   15fec:	movhi	r3, #39	; 0x27
   15ff0:	strbhi	r3, [r8, r4]
   15ff4:	add	r3, r4, #1
   15ff8:	cmp	sl, r3
   15ffc:	movhi	r2, #92	; 0x5c
   16000:	strbhi	r2, [r8, r3]
   16004:	add	r3, r4, #2
   16008:	cmp	sl, r3
   1600c:	movhi	r2, #39	; 0x27
   16010:	strbhi	r2, [r8, r3]
   16014:	mov	r3, #0
   16018:	cmp	r7, #0
   1601c:	add	r4, r4, #3
   16020:	str	r3, [sp, #44]	; 0x2c
   16024:	str	r6, [sp, #68]	; 0x44
   16028:	mov	r5, #39	; 0x27
   1602c:	bne	15de0 <__assert_fail@plt+0x47a4>
   16030:	ldr	r2, [sp, #44]	; 0x2c
   16034:	eor	r3, r3, #1
   16038:	and	r3, r3, r2
   1603c:	add	r9, r9, #1
   16040:	uxtb	r3, r3
   16044:	cmp	r3, #0
   16048:	beq	15e50 <__assert_fail@plt+0x4814>
   1604c:	cmp	sl, r4
   16050:	movhi	r3, #39	; 0x27
   16054:	strbhi	r3, [r8, r4]
   16058:	add	r3, r4, #1
   1605c:	cmp	sl, r3
   16060:	movhi	r2, #39	; 0x27
   16064:	strbhi	r2, [r8, r3]
   16068:	mov	r3, #0
   1606c:	add	r4, r4, #2
   16070:	str	r3, [sp, #44]	; 0x2c
   16074:	b	15e50 <__assert_fail@plt+0x4814>
   16078:	mov	r3, #114	; 0x72
   1607c:	ldr	r1, [sp, #32]
   16080:	sub	r2, fp, #2
   16084:	clz	r2, r2
   16088:	lsr	r2, r2, #5
   1608c:	tst	r2, r1
   16090:	beq	15f68 <__assert_fail@plt+0x492c>
   16094:	mov	fp, r8
   16098:	mov	r8, #2
   1609c:	ldr	r3, [sp, #28]
   160a0:	cmp	r3, #0
   160a4:	movne	r8, #4
   160a8:	ldr	r3, [sp, #164]	; 0xa4
   160ac:	mov	ip, #0
   160b0:	bic	r3, r3, #2
   160b4:	str	r3, [sp, #4]
   160b8:	ldr	r3, [sp, #76]	; 0x4c
   160bc:	str	r8, [sp]
   160c0:	str	r3, [sp, #16]
   160c4:	ldr	r3, [sp, #80]	; 0x50
   160c8:	ldr	r2, [sp, #36]	; 0x24
   160cc:	str	r3, [sp, #12]
   160d0:	mov	r1, sl
   160d4:	ldr	r3, [sp, #24]
   160d8:	mov	r0, fp
   160dc:	str	ip, [sp, #8]
   160e0:	bl	15800 <__assert_fail@plt+0x41c4>
   160e4:	mov	r4, r0
   160e8:	ldr	r3, [pc, #1304]	; 16608 <__assert_fail@plt+0x4fcc>
   160ec:	ldr	r2, [sp, #116]	; 0x74
   160f0:	mov	r0, r4
   160f4:	ldr	r3, [r3]
   160f8:	cmp	r2, r3
   160fc:	bne	16fec <__assert_fail@plt+0x59b0>
   16100:	add	sp, sp, #124	; 0x7c
   16104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16108:	mov	r5, #110	; 0x6e
   1610c:	ldr	r3, [sp, #32]
   16110:	mov	r2, #0
   16114:	cmp	r3, #0
   16118:	mov	r6, r2
   1611c:	beq	15df8 <__assert_fail@plt+0x47bc>
   16120:	str	fp, [sp, #160]	; 0xa0
   16124:	mov	fp, r8
   16128:	ldr	r8, [sp, #160]	; 0xa0
   1612c:	mov	r3, r2
   16130:	ldr	r2, [sp, #28]
   16134:	and	r2, r2, r3
   16138:	str	r2, [sp, #28]
   1613c:	b	1609c <__assert_fail@plt+0x4a60>
   16140:	mov	r5, #116	; 0x74
   16144:	b	1610c <__assert_fail@plt+0x4ad0>
   16148:	mov	r5, #102	; 0x66
   1614c:	ldr	r3, [sp, #32]
   16150:	cmp	r3, #0
   16154:	bne	16d00 <__assert_fail@plt+0x56c4>
   16158:	mov	r6, #0
   1615c:	b	15e3c <__assert_fail@plt+0x4800>
   16160:	mov	r5, #118	; 0x76
   16164:	b	1614c <__assert_fail@plt+0x4b10>
   16168:	mov	r7, #0
   1616c:	mov	r6, #0
   16170:	b	15dac <__assert_fail@plt+0x4770>
   16174:	ldr	r3, [sp, #32]
   16178:	cmp	r3, #0
   1617c:	bne	16f44 <__assert_fail@plt+0x5908>
   16180:	mov	r7, r3
   16184:	ldr	r3, [sp, #44]	; 0x2c
   16188:	sub	r2, fp, #2
   1618c:	eor	r3, r3, #1
   16190:	clz	r2, r2
   16194:	lsr	r2, r2, #5
   16198:	ands	r3, r2, r3
   1619c:	beq	16be4 <__assert_fail@plt+0x55a8>
   161a0:	cmp	sl, r4
   161a4:	movhi	r1, #39	; 0x27
   161a8:	strbhi	r1, [r8, r4]
   161ac:	add	r1, r4, #1
   161b0:	cmp	sl, r1
   161b4:	movhi	r0, #36	; 0x24
   161b8:	strbhi	r0, [r8, r1]
   161bc:	add	r1, r4, #2
   161c0:	cmp	sl, r1
   161c4:	movhi	r0, #39	; 0x27
   161c8:	strbhi	r0, [r8, r1]
   161cc:	add	r1, r4, #3
   161d0:	cmp	sl, r1
   161d4:	bls	16c44 <__assert_fail@plt+0x5608>
   161d8:	mov	r4, r1
   161dc:	mov	r1, #92	; 0x5c
   161e0:	strb	r1, [r8, r4]
   161e4:	mov	r1, r4
   161e8:	str	r3, [sp, #44]	; 0x2c
   161ec:	cmp	fp, #2
   161f0:	add	r4, r4, #1
   161f4:	beq	16c8c <__assert_fail@plt+0x5650>
   161f8:	ldr	r0, [sp, #24]
   161fc:	add	r3, r9, #1
   16200:	cmp	r3, r0
   16204:	bcs	1621c <__assert_fail@plt+0x4be0>
   16208:	ldr	r0, [sp, #36]	; 0x24
   1620c:	ldrb	r3, [r0, r3]
   16210:	sub	r3, r3, #48	; 0x30
   16214:	cmp	r3, #9
   16218:	bls	16c9c <__assert_fail@plt+0x5660>
   1621c:	mov	r5, #48	; 0x30
   16220:	ldr	r3, [sp, #28]
   16224:	eor	r3, r3, #1
   16228:	orrs	r2, r2, r3
   1622c:	mov	r3, r6
   16230:	moveq	r6, r2
   16234:	beq	15db0 <__assert_fail@plt+0x4774>
   16238:	mov	r6, #0
   1623c:	b	15dd8 <__assert_fail@plt+0x479c>
   16240:	mov	r2, #0
   16244:	mov	r6, r2
   16248:	mov	r5, #98	; 0x62
   1624c:	b	15df8 <__assert_fail@plt+0x47bc>
   16250:	mov	r5, #97	; 0x61
   16254:	b	16158 <__assert_fail@plt+0x4b1c>
   16258:	mov	r3, r7
   1625c:	mov	r6, r7
   16260:	mov	r2, #0
   16264:	mov	r7, r3
   16268:	mov	r5, #32
   1626c:	b	15d90 <__assert_fail@plt+0x4754>
   16270:	cmp	r9, #0
   16274:	mov	r3, r7
   16278:	bne	16840 <__assert_fail@plt+0x5204>
   1627c:	mov	r6, r7
   16280:	mov	r2, r9
   16284:	mov	r7, r3
   16288:	b	15d90 <__assert_fail@plt+0x4754>
   1628c:	mov	r6, r7
   16290:	b	15dac <__assert_fail@plt+0x4770>
   16294:	mov	r7, #0
   16298:	ldr	r3, [sp, #64]	; 0x40
   1629c:	cmp	r3, #1
   162a0:	bne	168fc <__assert_fail@plt+0x52c0>
   162a4:	bl	11450 <__ctype_b_loc@plt>
   162a8:	ldr	r2, [sp, #64]	; 0x40
   162ac:	sxth	r3, r5
   162b0:	mov	ip, r2
   162b4:	lsl	r3, r3, #1
   162b8:	ldr	r2, [r0]
   162bc:	ldrh	r3, [r2, r3]
   162c0:	and	r3, r3, #16384	; 0x4000
   162c4:	cmp	r3, #0
   162c8:	ldr	r3, [sp, #28]
   162cc:	movne	r6, #1
   162d0:	moveq	r6, #0
   162d4:	movne	r2, #0
   162d8:	andeq	r2, r3, #1
   162dc:	cmp	r2, #0
   162e0:	bne	16c0c <__assert_fail@plt+0x55d0>
   162e4:	sub	r2, fp, #2
   162e8:	clz	r2, r2
   162ec:	lsr	r2, r2, #5
   162f0:	b	15d90 <__assert_fail@plt+0x4754>
   162f4:	cmp	r4, #0
   162f8:	bne	16fb8 <__assert_fail@plt+0x597c>
   162fc:	str	r4, [sp, #28]
   16300:	cmp	sl, #0
   16304:	bne	16ffc <__assert_fail@plt+0x59c0>
   16308:	ldr	r3, [pc, #772]	; 16614 <__assert_fail@plt+0x4fd8>
   1630c:	mov	r4, #1
   16310:	str	r4, [sp, #40]	; 0x28
   16314:	str	r3, [sp, #60]	; 0x3c
   16318:	str	r4, [sp, #52]	; 0x34
   1631c:	str	sl, [sp, #72]	; 0x48
   16320:	str	sl, [sp, #68]	; 0x44
   16324:	str	sl, [sp, #44]	; 0x2c
   16328:	str	sl, [sp, #32]
   1632c:	mov	r8, #2
   16330:	b	158f8 <__assert_fail@plt+0x42bc>
   16334:	ldr	r3, [sp, #36]	; 0x24
   16338:	ldrb	r5, [r3, r9]
   1633c:	cmp	r5, #126	; 0x7e
   16340:	ldrls	pc, [pc, r5, lsl #2]
   16344:	b	16298 <__assert_fail@plt+0x4c5c>
   16348:	andeq	r6, r1, ip, ror r5
   1634c:	muleq	r1, r8, r2
   16350:	muleq	r1, r8, r2
   16354:	muleq	r1, r8, r2
   16358:	muleq	r1, r8, r2
   1635c:	muleq	r1, r8, r2
   16360:	muleq	r1, r8, r2
   16364:	andeq	r6, r1, r8, ror #10
   16368:	andeq	r6, r1, r4, asr r5
   1636c:	andeq	r6, r1, ip, asr #10
   16370:	andeq	r6, r1, r4, asr #10
   16374:	strdeq	r6, [r1], -r4
   16378:	andeq	r6, r1, r0, ror #11
   1637c:	andeq	r6, r1, r8, ror r0
   16380:	muleq	r1, r8, r2
   16384:	muleq	r1, r8, r2
   16388:	muleq	r1, r8, r2
   1638c:	muleq	r1, r8, r2
   16390:	muleq	r1, r8, r2
   16394:	muleq	r1, r8, r2
   16398:	muleq	r1, r8, r2
   1639c:	muleq	r1, r8, r2
   163a0:	muleq	r1, r8, r2
   163a4:	muleq	r1, r8, r2
   163a8:	muleq	r1, r8, r2
   163ac:	muleq	r1, r8, r2
   163b0:	muleq	r1, r8, r2
   163b4:	muleq	r1, r8, r2
   163b8:	muleq	r1, r8, r2
   163bc:	muleq	r1, r8, r2
   163c0:	muleq	r1, r8, r2
   163c4:	muleq	r1, r8, r2
   163c8:	ldrdeq	r6, [r1], -r0
   163cc:			; <UNDEFINED> instruction: 0x000165bc
   163d0:			; <UNDEFINED> instruction: 0x000165bc
   163d4:	andeq	r6, r1, ip, lsr #11
   163d8:			; <UNDEFINED> instruction: 0x000165bc
   163dc:	andeq	r6, r1, r4, ror #5
   163e0:			; <UNDEFINED> instruction: 0x000165bc
   163e4:	andeq	r5, r1, ip, lsr #31
   163e8:			; <UNDEFINED> instruction: 0x000165bc
   163ec:			; <UNDEFINED> instruction: 0x000165bc
   163f0:			; <UNDEFINED> instruction: 0x000165bc
   163f4:	andeq	r6, r1, r4, ror #5
   163f8:	andeq	r6, r1, r4, ror #5
   163fc:	andeq	r6, r1, r4, ror #5
   16400:	andeq	r6, r1, r4, ror #5
   16404:	andeq	r6, r1, r4, ror #5
   16408:	andeq	r6, r1, r4, ror #5
   1640c:	andeq	r6, r1, r4, ror #5
   16410:	andeq	r6, r1, r4, ror #5
   16414:	andeq	r6, r1, r4, ror #5
   16418:	andeq	r6, r1, r4, ror #5
   1641c:	andeq	r6, r1, r4, ror #5
   16420:	andeq	r6, r1, r4, ror #5
   16424:	andeq	r6, r1, r4, ror #5
   16428:	andeq	r6, r1, r4, ror #5
   1642c:	andeq	r6, r1, r4, ror #5
   16430:	andeq	r6, r1, r4, ror #5
   16434:			; <UNDEFINED> instruction: 0x000165bc
   16438:			; <UNDEFINED> instruction: 0x000165bc
   1643c:			; <UNDEFINED> instruction: 0x000165bc
   16440:			; <UNDEFINED> instruction: 0x000165bc
   16444:	andeq	r5, r1, r0, lsl #31
   16448:	muleq	r1, r8, r2
   1644c:	andeq	r6, r1, r4, ror #5
   16450:	andeq	r6, r1, r4, ror #5
   16454:	andeq	r6, r1, r4, ror #5
   16458:	andeq	r6, r1, r4, ror #5
   1645c:	andeq	r6, r1, r4, ror #5
   16460:	andeq	r6, r1, r4, ror #5
   16464:	andeq	r6, r1, r4, ror #5
   16468:	andeq	r6, r1, r4, ror #5
   1646c:	andeq	r6, r1, r4, ror #5
   16470:	andeq	r6, r1, r4, ror #5
   16474:	andeq	r6, r1, r4, ror #5
   16478:	andeq	r6, r1, r4, ror #5
   1647c:	andeq	r6, r1, r4, ror #5
   16480:	andeq	r6, r1, r4, ror #5
   16484:	andeq	r6, r1, r4, ror #5
   16488:	andeq	r6, r1, r4, ror #5
   1648c:	andeq	r6, r1, r4, ror #5
   16490:	andeq	r6, r1, r4, ror #5
   16494:	andeq	r6, r1, r4, ror #5
   16498:	andeq	r6, r1, r4, ror #5
   1649c:	andeq	r6, r1, r4, ror #5
   164a0:	andeq	r6, r1, r4, ror #5
   164a4:	andeq	r6, r1, r4, ror #5
   164a8:	andeq	r6, r1, r4, ror #5
   164ac:	andeq	r6, r1, r4, ror #5
   164b0:	andeq	r6, r1, r4, ror #5
   164b4:			; <UNDEFINED> instruction: 0x000165bc
   164b8:	andeq	r5, r1, r8, lsr pc
   164bc:	andeq	r6, r1, r4, ror #5
   164c0:			; <UNDEFINED> instruction: 0x000165bc
   164c4:	andeq	r6, r1, r4, ror #5
   164c8:			; <UNDEFINED> instruction: 0x000165bc
   164cc:	andeq	r6, r1, r4, ror #5
   164d0:	andeq	r6, r1, r4, ror #5
   164d4:	andeq	r6, r1, r4, ror #5
   164d8:	andeq	r6, r1, r4, ror #5
   164dc:	andeq	r6, r1, r4, ror #5
   164e0:	andeq	r6, r1, r4, ror #5
   164e4:	andeq	r6, r1, r4, ror #5
   164e8:	andeq	r6, r1, r4, ror #5
   164ec:	andeq	r6, r1, r4, ror #5
   164f0:	andeq	r6, r1, r4, ror #5
   164f4:	andeq	r6, r1, r4, ror #5
   164f8:	andeq	r6, r1, r4, ror #5
   164fc:	andeq	r6, r1, r4, ror #5
   16500:	andeq	r6, r1, r4, ror #5
   16504:	andeq	r6, r1, r4, ror #5
   16508:	andeq	r6, r1, r4, ror #5
   1650c:	andeq	r6, r1, r4, ror #5
   16510:	andeq	r6, r1, r4, ror #5
   16514:	andeq	r6, r1, r4, ror #5
   16518:	andeq	r6, r1, r4, ror #5
   1651c:	andeq	r6, r1, r4, ror #5
   16520:	andeq	r6, r1, r4, ror #5
   16524:	andeq	r6, r1, r4, ror #5
   16528:	andeq	r6, r1, r4, ror #5
   1652c:	andeq	r6, r1, r4, ror #5
   16530:	andeq	r6, r1, r4, ror #5
   16534:	andeq	r5, r1, r0, asr sp
   16538:			; <UNDEFINED> instruction: 0x000165bc
   1653c:	andeq	r5, r1, r0, asr sp
   16540:	andeq	r6, r1, ip, lsr #11
   16544:	mov	r3, #110	; 0x6e
   16548:	b	1607c <__assert_fail@plt+0x4a40>
   1654c:	mov	r3, #116	; 0x74
   16550:	b	1607c <__assert_fail@plt+0x4a40>
   16554:	sub	r2, fp, #2
   16558:	mov	r3, #98	; 0x62
   1655c:	clz	r2, r2
   16560:	lsr	r2, r2, #5
   16564:	b	15f68 <__assert_fail@plt+0x492c>
   16568:	sub	r2, fp, #2
   1656c:	mov	r3, #97	; 0x61
   16570:	clz	r2, r2
   16574:	lsr	r2, r2, #5
   16578:	b	15f68 <__assert_fail@plt+0x492c>
   1657c:	ldr	r3, [sp, #28]
   16580:	cmp	r3, #0
   16584:	bne	16174 <__assert_fail@plt+0x4b38>
   16588:	ldr	r3, [sp, #164]	; 0xa4
   1658c:	tst	r3, #1
   16590:	bne	16c04 <__assert_fail@plt+0x55c8>
   16594:	ldr	r6, [sp, #28]
   16598:	sub	r2, fp, #2
   1659c:	mov	r7, r6
   165a0:	clz	r2, r2
   165a4:	lsr	r2, r2, #5
   165a8:	b	15d90 <__assert_fail@plt+0x4754>
   165ac:	sub	r2, fp, #2
   165b0:	clz	r2, r2
   165b4:	lsr	r2, r2, #5
   165b8:	b	15d7c <__assert_fail@plt+0x4740>
   165bc:	sub	r2, fp, #2
   165c0:	mov	r6, #0
   165c4:	clz	r2, r2
   165c8:	lsr	r2, r2, #5
   165cc:	b	15d84 <__assert_fail@plt+0x4748>
   165d0:	sub	r2, fp, #2
   165d4:	clz	r2, r2
   165d8:	lsr	r2, r2, #5
   165dc:	b	15d84 <__assert_fail@plt+0x4748>
   165e0:	sub	r2, fp, #2
   165e4:	mov	r3, #102	; 0x66
   165e8:	clz	r2, r2
   165ec:	lsr	r2, r2, #5
   165f0:	b	15f68 <__assert_fail@plt+0x492c>
   165f4:	sub	r2, fp, #2
   165f8:	mov	r3, #118	; 0x76
   165fc:	clz	r2, r2
   16600:	lsr	r2, r2, #5
   16604:	b	15f68 <__assert_fail@plt+0x492c>
   16608:	andeq	fp, r2, r8, lsl #30
   1660c:	andeq	fp, r1, r0, lsr #6
   16610:	andeq	fp, r1, r8, lsl #6
   16614:	andeq	fp, r1, ip, lsl r3
   16618:	ldr	r3, [sp, #48]	; 0x30
   1661c:	ldrb	r5, [r3]
   16620:	cmp	r5, #126	; 0x7e
   16624:	ldrls	pc, [pc, r5, lsl #2]
   16628:	b	16294 <__assert_fail@plt+0x4c58>
   1662c:	andeq	r6, r1, r4, ror r1
   16630:	muleq	r1, r4, r2
   16634:	muleq	r1, r4, r2
   16638:	muleq	r1, r4, r2
   1663c:	muleq	r1, r4, r2
   16640:	muleq	r1, r4, r2
   16644:	muleq	r1, r4, r2
   16648:	andeq	r6, r1, ip, ror #16
   1664c:	andeq	r6, r1, r4, ror #16
   16650:	andeq	r6, r1, r0, asr #2
   16654:	andeq	r6, r1, r8, lsl #2
   16658:	andeq	r6, r1, r0, ror #2
   1665c:	andeq	r6, r1, r8, asr #2
   16660:	andeq	r6, r1, r8, asr r8
   16664:	muleq	r1, r4, r2
   16668:	muleq	r1, r4, r2
   1666c:	muleq	r1, r4, r2
   16670:	muleq	r1, r4, r2
   16674:	muleq	r1, r4, r2
   16678:	muleq	r1, r4, r2
   1667c:	muleq	r1, r4, r2
   16680:	muleq	r1, r4, r2
   16684:	muleq	r1, r4, r2
   16688:	muleq	r1, r4, r2
   1668c:	muleq	r1, r4, r2
   16690:	muleq	r1, r4, r2
   16694:	muleq	r1, r4, r2
   16698:	muleq	r1, r4, r2
   1669c:	muleq	r1, r4, r2
   166a0:	muleq	r1, r4, r2
   166a4:	muleq	r1, r4, r2
   166a8:	muleq	r1, r4, r2
   166ac:	andeq	r6, r1, r0, asr r8
   166b0:	andeq	r6, r1, r8, ror #2
   166b4:	andeq	r6, r1, r8, ror #2
   166b8:	andeq	r6, r1, r4, lsr r8
   166bc:	andeq	r6, r1, r8, ror #2
   166c0:	andeq	r6, r1, r8, lsr #16
   166c4:	andeq	r6, r1, r8, ror #2
   166c8:	andeq	r5, r1, r8, lsr #31
   166cc:	andeq	r6, r1, r8, ror #2
   166d0:	andeq	r6, r1, r8, ror #2
   166d4:	andeq	r6, r1, r8, ror #2
   166d8:	andeq	r6, r1, r8, lsr #16
   166dc:	andeq	r6, r1, r8, lsr #16
   166e0:	andeq	r6, r1, r8, lsr #16
   166e4:	andeq	r6, r1, r8, lsr #16
   166e8:	andeq	r6, r1, r8, lsr #16
   166ec:	andeq	r6, r1, r8, lsr #16
   166f0:	andeq	r6, r1, r8, lsr #16
   166f4:	andeq	r6, r1, r8, lsr #16
   166f8:	andeq	r6, r1, r8, lsr #16
   166fc:	andeq	r6, r1, r8, lsr #16
   16700:	andeq	r6, r1, r8, lsr #16
   16704:	andeq	r6, r1, r8, lsr #16
   16708:	andeq	r6, r1, r8, lsr #16
   1670c:	andeq	r6, r1, r8, lsr #16
   16710:	andeq	r6, r1, r8, lsr #16
   16714:	andeq	r6, r1, r8, lsr #16
   16718:	andeq	r6, r1, r8, ror #2
   1671c:	andeq	r6, r1, r8, ror #2
   16720:	andeq	r6, r1, r8, ror #2
   16724:	andeq	r6, r1, r8, ror #2
   16728:	andeq	r5, r1, ip, ror pc
   1672c:	muleq	r1, r4, r2
   16730:	andeq	r6, r1, r8, lsr #16
   16734:	andeq	r6, r1, r8, lsr #16
   16738:	andeq	r6, r1, r8, lsr #16
   1673c:	andeq	r6, r1, r8, lsr #16
   16740:	andeq	r6, r1, r8, lsr #16
   16744:	andeq	r6, r1, r8, lsr #16
   16748:	andeq	r6, r1, r8, lsr #16
   1674c:	andeq	r6, r1, r8, lsr #16
   16750:	andeq	r6, r1, r8, lsr #16
   16754:	andeq	r6, r1, r8, lsr #16
   16758:	andeq	r6, r1, r8, lsr #16
   1675c:	andeq	r6, r1, r8, lsr #16
   16760:	andeq	r6, r1, r8, lsr #16
   16764:	andeq	r6, r1, r8, lsr #16
   16768:	andeq	r6, r1, r8, lsr #16
   1676c:	andeq	r6, r1, r8, lsr #16
   16770:	andeq	r6, r1, r8, lsr #16
   16774:	andeq	r6, r1, r8, lsr #16
   16778:	andeq	r6, r1, r8, lsr #16
   1677c:	andeq	r6, r1, r8, lsr #16
   16780:	andeq	r6, r1, r8, lsr #16
   16784:	andeq	r6, r1, r8, lsr #16
   16788:	andeq	r6, r1, r8, lsr #16
   1678c:	andeq	r6, r1, r8, lsr #16
   16790:	andeq	r6, r1, r8, lsr #16
   16794:	andeq	r6, r1, r8, lsr #16
   16798:	andeq	r6, r1, r8, ror #2
   1679c:	andeq	r5, r1, r4, lsr pc
   167a0:	andeq	r6, r1, r8, lsr #16
   167a4:	andeq	r6, r1, r8, ror #2
   167a8:	andeq	r6, r1, r8, lsr #16
   167ac:	andeq	r6, r1, r8, ror #2
   167b0:	andeq	r6, r1, r8, lsr #16
   167b4:	andeq	r6, r1, r8, lsr #16
   167b8:	andeq	r6, r1, r8, lsr #16
   167bc:	andeq	r6, r1, r8, lsr #16
   167c0:	andeq	r6, r1, r8, lsr #16
   167c4:	andeq	r6, r1, r8, lsr #16
   167c8:	andeq	r6, r1, r8, lsr #16
   167cc:	andeq	r6, r1, r8, lsr #16
   167d0:	andeq	r6, r1, r8, lsr #16
   167d4:	andeq	r6, r1, r8, lsr #16
   167d8:	andeq	r6, r1, r8, lsr #16
   167dc:	andeq	r6, r1, r8, lsr #16
   167e0:	andeq	r6, r1, r8, lsr #16
   167e4:	andeq	r6, r1, r8, lsr #16
   167e8:	andeq	r6, r1, r8, lsr #16
   167ec:	andeq	r6, r1, r8, lsr #16
   167f0:	andeq	r6, r1, r8, lsr #16
   167f4:	andeq	r6, r1, r8, lsr #16
   167f8:	andeq	r6, r1, r8, lsr #16
   167fc:	andeq	r6, r1, r8, lsr #16
   16800:	andeq	r6, r1, r8, lsr #16
   16804:	andeq	r6, r1, r8, lsr #16
   16808:	andeq	r6, r1, r8, lsr #16
   1680c:	andeq	r6, r1, r8, lsr #16
   16810:	andeq	r6, r1, r8, lsr #16
   16814:	andeq	r6, r1, r8, lsr #16
   16818:	andeq	r5, r1, ip, asr #26
   1681c:	andeq	r6, r1, r8, ror #2
   16820:	andeq	r5, r1, ip, asr #26
   16824:	andeq	r6, r1, r4, lsr r8
   16828:	mov	r6, r7
   1682c:	mov	r7, #0
   16830:	b	15dac <__assert_fail@plt+0x4770>
   16834:	cmp	r9, #0
   16838:	mov	r3, #0
   1683c:	beq	1627c <__assert_fail@plt+0x4c40>
   16840:	mov	r6, #0
   16844:	mov	r7, r3
   16848:	mov	r3, r6
   1684c:	b	15db0 <__assert_fail@plt+0x4774>
   16850:	mov	r3, #0
   16854:	b	1625c <__assert_fail@plt+0x4c20>
   16858:	mov	r7, #0
   1685c:	mov	r3, #114	; 0x72
   16860:	b	1607c <__assert_fail@plt+0x4a40>
   16864:	mov	r5, #98	; 0x62
   16868:	b	1610c <__assert_fail@plt+0x4ad0>
   1686c:	mov	r5, #97	; 0x61
   16870:	b	1614c <__assert_fail@plt+0x4b10>
   16874:	ldr	r3, [sp, #32]
   16878:	cmp	r3, #0
   1687c:	bne	16cc4 <__assert_fail@plt+0x5688>
   16880:	add	r9, r9, #1
   16884:	ldr	r3, [sp, #44]	; 0x2c
   16888:	mov	r6, #0
   1688c:	mov	r5, #92	; 0x5c
   16890:	b	16044 <__assert_fail@plt+0x4a08>
   16894:	ldr	r3, [sp, #36]	; 0x24
   16898:	ldrb	r3, [r3, #1]
   1689c:	adds	r3, r3, #0
   168a0:	movne	r3, #1
   168a4:	b	15d68 <__assert_fail@plt+0x472c>
   168a8:	ldr	r3, [sp, #164]	; 0xa4
   168ac:	ands	r3, r3, #4
   168b0:	beq	168d4 <__assert_fail@plt+0x5298>
   168b4:	ldr	r2, [sp, #24]
   168b8:	add	r3, r9, #2
   168bc:	cmp	r3, r2
   168c0:	bcs	168d4 <__assert_fail@plt+0x5298>
   168c4:	ldr	r2, [sp, #48]	; 0x30
   168c8:	ldrb	r5, [r2, #1]
   168cc:	cmp	r5, #63	; 0x3f
   168d0:	beq	16d38 <__assert_fail@plt+0x56fc>
   168d4:	mov	r2, #0
   168d8:	mov	r6, r2
   168dc:	mov	r5, #63	; 0x3f
   168e0:	b	15d90 <__assert_fail@plt+0x4754>
   168e4:	ldr	r3, [sp, #32]
   168e8:	cmp	r3, #0
   168ec:	bne	16cc4 <__assert_fail@plt+0x5688>
   168f0:	mov	r6, r3
   168f4:	mov	r5, #63	; 0x3f
   168f8:	b	15dd8 <__assert_fail@plt+0x479c>
   168fc:	ldr	r3, [sp, #24]
   16900:	cmn	r3, #1
   16904:	mov	r3, #0
   16908:	str	r3, [sp, #108]	; 0x6c
   1690c:	str	r3, [sp, #112]	; 0x70
   16910:	bne	16920 <__assert_fail@plt+0x52e4>
   16914:	ldr	r0, [sp, #36]	; 0x24
   16918:	bl	11480 <strlen@plt>
   1691c:	str	r0, [sp, #24]
   16920:	mov	r3, #0
   16924:	str	sl, [sp, #88]	; 0x58
   16928:	ldr	sl, [sp, #36]	; 0x24
   1692c:	str	r5, [sp, #92]	; 0x5c
   16930:	mov	r5, r3
   16934:	str	r7, [sp, #96]	; 0x60
   16938:	str	r4, [sp, #100]	; 0x64
   1693c:	str	r8, [sp, #84]	; 0x54
   16940:	ldr	r3, [sp, #24]
   16944:	add	r4, r9, r5
   16948:	add	r7, sl, r4
   1694c:	sub	r2, r3, r4
   16950:	mov	r1, r7
   16954:	add	r3, sp, #108	; 0x6c
   16958:	add	r0, sp, #104	; 0x68
   1695c:	bl	189fc <__assert_fail@plt+0x73c0>
   16960:	subs	r8, r0, #0
   16964:	beq	169b4 <__assert_fail@plt+0x5378>
   16968:	cmn	r8, #1
   1696c:	beq	16d14 <__assert_fail@plt+0x56d8>
   16970:	cmn	r8, #2
   16974:	beq	16e34 <__assert_fail@plt+0x57f8>
   16978:	ldr	r3, [sp, #32]
   1697c:	cmp	fp, #2
   16980:	movne	r3, #0
   16984:	andeq	r3, r3, #1
   16988:	cmp	r3, #0
   1698c:	bne	16b14 <__assert_fail@plt+0x54d8>
   16990:	ldr	r0, [sp, #104]	; 0x68
   16994:	bl	1136c <iswprint@plt>
   16998:	add	r5, r5, r8
   1699c:	cmp	r0, #0
   169a0:	add	r0, sp, #108	; 0x6c
   169a4:	moveq	r6, #0
   169a8:	bl	11318 <mbsinit@plt>
   169ac:	cmp	r0, #0
   169b0:	beq	16940 <__assert_fail@plt+0x5304>
   169b4:	ldr	r3, [sp, #28]
   169b8:	mov	ip, r5
   169bc:	eor	r2, r6, #1
   169c0:	ldr	r5, [sp, #92]	; 0x5c
   169c4:	ldr	r7, [sp, #96]	; 0x60
   169c8:	ldr	r4, [sp, #100]	; 0x64
   169cc:	ldr	r8, [sp, #84]	; 0x54
   169d0:	ldr	sl, [sp, #88]	; 0x58
   169d4:	and	r2, r2, r3
   169d8:	cmp	ip, #1
   169dc:	bls	162dc <__assert_fail@plt+0x4ca0>
   169e0:	add	r1, ip, r9
   169e4:	ldr	lr, [sp, #48]	; 0x30
   169e8:	mov	r0, #0
   169ec:	str	r6, [sp, #48]	; 0x30
   169f0:	mov	ip, #39	; 0x27
   169f4:	ldr	r6, [sp, #44]	; 0x2c
   169f8:	b	16ab0 <__assert_fail@plt+0x5474>
   169fc:	ldr	r0, [sp, #32]
   16a00:	sub	r3, fp, #2
   16a04:	cmp	r0, #0
   16a08:	clz	r3, r3
   16a0c:	lsr	r3, r3, #5
   16a10:	bne	16c18 <__assert_fail@plt+0x55dc>
   16a14:	eor	r0, r6, #1
   16a18:	ands	r3, r3, r0
   16a1c:	beq	16a4c <__assert_fail@plt+0x5410>
   16a20:	add	r0, r4, #1
   16a24:	cmp	sl, r4
   16a28:	strbhi	ip, [r8, r4]
   16a2c:	cmp	sl, r0
   16a30:	movhi	r6, #36	; 0x24
   16a34:	strbhi	r6, [r8, r0]
   16a38:	add	r0, r4, #2
   16a3c:	mov	r6, r3
   16a40:	add	r4, r4, #3
   16a44:	cmp	sl, r0
   16a48:	strbhi	ip, [r8, r0]
   16a4c:	cmp	sl, r4
   16a50:	movhi	r3, #92	; 0x5c
   16a54:	strbhi	r3, [r8, r4]
   16a58:	add	r3, r4, #1
   16a5c:	cmp	sl, r3
   16a60:	lsrhi	r0, r5, #6
   16a64:	addhi	r0, r0, #48	; 0x30
   16a68:	strbhi	r0, [r8, r3]
   16a6c:	add	r0, r4, #2
   16a70:	cmp	sl, r0
   16a74:	lsrhi	r3, r5, #3
   16a78:	andhi	r3, r3, #7
   16a7c:	addhi	r3, r3, #48	; 0x30
   16a80:	add	r9, r9, #1
   16a84:	strbhi	r3, [r8, r0]
   16a88:	and	r5, r5, #7
   16a8c:	cmp	r9, r1
   16a90:	add	r5, r5, #48	; 0x30
   16a94:	add	r4, r4, #3
   16a98:	bcs	16c38 <__assert_fail@plt+0x55fc>
   16a9c:	mov	r0, r2
   16aa0:	cmp	sl, r4
   16aa4:	strbhi	r5, [r8, r4]
   16aa8:	ldrb	r5, [lr, #1]!
   16aac:	add	r4, r4, #1
   16ab0:	cmp	r2, #0
   16ab4:	bne	169fc <__assert_fail@plt+0x53c0>
   16ab8:	eor	r3, r0, #1
   16abc:	and	r3, r3, r6
   16ac0:	cmp	r7, #0
   16ac4:	uxtb	r3, r3
   16ac8:	beq	16adc <__assert_fail@plt+0x54a0>
   16acc:	cmp	sl, r4
   16ad0:	movhi	r7, #92	; 0x5c
   16ad4:	strbhi	r7, [r8, r4]
   16ad8:	add	r4, r4, #1
   16adc:	add	r9, r9, #1
   16ae0:	cmp	r9, r1
   16ae4:	bcs	16c2c <__assert_fail@plt+0x55f0>
   16ae8:	cmp	r3, #0
   16aec:	beq	16c58 <__assert_fail@plt+0x561c>
   16af0:	cmp	sl, r4
   16af4:	add	r3, r4, #1
   16af8:	strbhi	ip, [r8, r4]
   16afc:	mov	r7, #0
   16b00:	cmp	sl, r3
   16b04:	strbhi	ip, [r8, r3]
   16b08:	add	r4, r4, #2
   16b0c:	mov	r6, r7
   16b10:	b	16aa0 <__assert_fail@plt+0x5464>
   16b14:	cmp	r8, #1
   16b18:	beq	16990 <__assert_fail@plt+0x5354>
   16b1c:	add	r1, r4, #1
   16b20:	add	r3, sl, r8
   16b24:	add	r1, sl, r1
   16b28:	add	r4, r3, r4
   16b2c:	ldrb	r3, [r1], #1
   16b30:	sub	r3, r3, #91	; 0x5b
   16b34:	cmp	r3, #33	; 0x21
   16b38:	ldrls	pc, [pc, r3, lsl #2]
   16b3c:	b	16bc8 <__assert_fail@plt+0x558c>
   16b40:	ldrdeq	r6, [r1], -r4
   16b44:	ldrdeq	r6, [r1], -r4
   16b48:	andeq	r6, r1, r8, asr #23
   16b4c:	ldrdeq	r6, [r1], -r4
   16b50:	andeq	r6, r1, r8, asr #23
   16b54:	ldrdeq	r6, [r1], -r4
   16b58:	andeq	r6, r1, r8, asr #23
   16b5c:	andeq	r6, r1, r8, asr #23
   16b60:	andeq	r6, r1, r8, asr #23
   16b64:	andeq	r6, r1, r8, asr #23
   16b68:	andeq	r6, r1, r8, asr #23
   16b6c:	andeq	r6, r1, r8, asr #23
   16b70:	andeq	r6, r1, r8, asr #23
   16b74:	andeq	r6, r1, r8, asr #23
   16b78:	andeq	r6, r1, r8, asr #23
   16b7c:	andeq	r6, r1, r8, asr #23
   16b80:	andeq	r6, r1, r8, asr #23
   16b84:	andeq	r6, r1, r8, asr #23
   16b88:	andeq	r6, r1, r8, asr #23
   16b8c:	andeq	r6, r1, r8, asr #23
   16b90:	andeq	r6, r1, r8, asr #23
   16b94:	andeq	r6, r1, r8, asr #23
   16b98:	andeq	r6, r1, r8, asr #23
   16b9c:	andeq	r6, r1, r8, asr #23
   16ba0:	andeq	r6, r1, r8, asr #23
   16ba4:	andeq	r6, r1, r8, asr #23
   16ba8:	andeq	r6, r1, r8, asr #23
   16bac:	andeq	r6, r1, r8, asr #23
   16bb0:	andeq	r6, r1, r8, asr #23
   16bb4:	andeq	r6, r1, r8, asr #23
   16bb8:	andeq	r6, r1, r8, asr #23
   16bbc:	andeq	r6, r1, r8, asr #23
   16bc0:	andeq	r6, r1, r8, asr #23
   16bc4:	ldrdeq	r6, [r1], -r4
   16bc8:	cmp	r4, r1
   16bcc:	bne	16b2c <__assert_fail@plt+0x54f0>
   16bd0:	b	16990 <__assert_fail@plt+0x5354>
   16bd4:	ldr	fp, [sp, #84]	; 0x54
   16bd8:	ldr	sl, [sp, #88]	; 0x58
   16bdc:	mov	r8, #2
   16be0:	b	1609c <__assert_fail@plt+0x4a60>
   16be4:	cmp	sl, r4
   16be8:	movls	r1, r4
   16bec:	bls	161ec <__assert_fail@plt+0x4bb0>
   16bf0:	ldr	r3, [sp, #44]	; 0x2c
   16bf4:	b	161dc <__assert_fail@plt+0x4ba0>
   16bf8:	str	sl, [sp, #72]	; 0x48
   16bfc:	ldr	sl, [sp, #32]
   16c00:	b	16014 <__assert_fail@plt+0x49d8>
   16c04:	add	r9, r9, #1
   16c08:	b	15908 <__assert_fail@plt+0x42cc>
   16c0c:	ldr	r2, [sp, #28]
   16c10:	mov	r6, #0
   16c14:	b	169e0 <__assert_fail@plt+0x53a4>
   16c18:	str	fp, [sp, #160]	; 0xa0
   16c1c:	str	r3, [sp, #28]
   16c20:	mov	fp, r8
   16c24:	ldr	r8, [sp, #160]	; 0xa0
   16c28:	b	1609c <__assert_fail@plt+0x4a60>
   16c2c:	str	r6, [sp, #44]	; 0x2c
   16c30:	ldr	r6, [sp, #48]	; 0x30
   16c34:	b	16044 <__assert_fail@plt+0x4a08>
   16c38:	str	r6, [sp, #44]	; 0x2c
   16c3c:	ldr	r6, [sp, #48]	; 0x30
   16c40:	b	15e50 <__assert_fail@plt+0x4814>
   16c44:	add	r4, r4, #4
   16c48:	str	r3, [sp, #44]	; 0x2c
   16c4c:	mov	r6, #0
   16c50:	mov	r5, #48	; 0x30
   16c54:	b	15dd8 <__assert_fail@plt+0x479c>
   16c58:	mov	r7, r3
   16c5c:	b	16aa0 <__assert_fail@plt+0x5464>
   16c60:	ldr	r3, [pc, #-1624]	; 16610 <__assert_fail@plt+0x4fd4>
   16c64:	mov	r4, #1
   16c68:	str	r4, [sp, #40]	; 0x28
   16c6c:	str	r4, [sp, #28]
   16c70:	str	r4, [sp, #52]	; 0x34
   16c74:	str	sl, [sp, #72]	; 0x48
   16c78:	str	sl, [sp, #68]	; 0x44
   16c7c:	str	sl, [sp, #44]	; 0x2c
   16c80:	str	sl, [sp, #32]
   16c84:	str	r3, [sp, #60]	; 0x3c
   16c88:	b	158f8 <__assert_fail@plt+0x42bc>
   16c8c:	mov	r3, r6
   16c90:	mov	r5, #48	; 0x30
   16c94:	mov	r6, #0
   16c98:	b	15dd8 <__assert_fail@plt+0x479c>
   16c9c:	cmp	sl, r4
   16ca0:	movhi	r3, #48	; 0x30
   16ca4:	strbhi	r3, [r8, r4]
   16ca8:	add	r3, r1, #2
   16cac:	cmp	sl, r3
   16cb0:	movhi	r0, #48	; 0x30
   16cb4:	strbhi	r0, [r8, r3]
   16cb8:	add	r4, r1, #3
   16cbc:	mov	r5, #48	; 0x30
   16cc0:	b	16220 <__assert_fail@plt+0x4be4>
   16cc4:	str	fp, [sp, #160]	; 0xa0
   16cc8:	mov	fp, r8
   16ccc:	ldr	r8, [sp, #160]	; 0xa0
   16cd0:	b	1609c <__assert_fail@plt+0x4a60>
   16cd4:	ldr	r2, [sp, #80]	; 0x50
   16cd8:	ldrb	r3, [r2]
   16cdc:	cmp	r3, #0
   16ce0:	beq	158c8 <__assert_fail@plt+0x428c>
   16ce4:	cmp	sl, r4
   16ce8:	strbhi	r3, [fp, r4]
   16cec:	ldrb	r3, [r2, #1]!
   16cf0:	add	r4, r4, #1
   16cf4:	cmp	r3, #0
   16cf8:	bne	16ce4 <__assert_fail@plt+0x56a8>
   16cfc:	b	158c8 <__assert_fail@plt+0x428c>
   16d00:	str	fp, [sp, #160]	; 0xa0
   16d04:	mov	r3, #0
   16d08:	mov	fp, r8
   16d0c:	ldr	r8, [sp, #160]	; 0xa0
   16d10:	b	16130 <__assert_fail@plt+0x4af4>
   16d14:	mov	ip, r5
   16d18:	ldr	r7, [sp, #96]	; 0x60
   16d1c:	ldr	r5, [sp, #92]	; 0x5c
   16d20:	ldr	r4, [sp, #100]	; 0x64
   16d24:	ldr	r8, [sp, #84]	; 0x54
   16d28:	ldr	sl, [sp, #88]	; 0x58
   16d2c:	ldr	r2, [sp, #28]
   16d30:	mov	r6, #0
   16d34:	b	169d8 <__assert_fail@plt+0x539c>
   16d38:	ldr	r2, [sp, #36]	; 0x24
   16d3c:	ldrb	r1, [r2, r3]
   16d40:	sub	r2, r1, #33	; 0x21
   16d44:	cmp	r2, #29
   16d48:	ldrls	pc, [pc, r2, lsl #2]
   16d4c:	b	16e28 <__assert_fail@plt+0x57ec>
   16d50:	andeq	r6, r1, r8, asr #27
   16d54:	andeq	r6, r1, r8, lsr #28
   16d58:	andeq	r6, r1, r8, lsr #28
   16d5c:	andeq	r6, r1, r8, lsr #28
   16d60:	andeq	r6, r1, r8, lsr #28
   16d64:	andeq	r6, r1, r8, lsr #28
   16d68:	andeq	r6, r1, r8, asr #27
   16d6c:	andeq	r6, r1, r8, asr #27
   16d70:	andeq	r6, r1, r8, asr #27
   16d74:	andeq	r6, r1, r8, lsr #28
   16d78:	andeq	r6, r1, r8, lsr #28
   16d7c:	andeq	r6, r1, r8, lsr #28
   16d80:	andeq	r6, r1, r8, asr #27
   16d84:	andeq	r6, r1, r8, lsr #28
   16d88:	andeq	r6, r1, r8, asr #27
   16d8c:	andeq	r6, r1, r8, lsr #28
   16d90:	andeq	r6, r1, r8, lsr #28
   16d94:	andeq	r6, r1, r8, lsr #28
   16d98:	andeq	r6, r1, r8, lsr #28
   16d9c:	andeq	r6, r1, r8, lsr #28
   16da0:	andeq	r6, r1, r8, lsr #28
   16da4:	andeq	r6, r1, r8, lsr #28
   16da8:	andeq	r6, r1, r8, lsr #28
   16dac:	andeq	r6, r1, r8, lsr #28
   16db0:	andeq	r6, r1, r8, lsr #28
   16db4:	andeq	r6, r1, r8, lsr #28
   16db8:	andeq	r6, r1, r8, lsr #28
   16dbc:	andeq	r6, r1, r8, asr #27
   16dc0:	andeq	r6, r1, r8, asr #27
   16dc4:	andeq	r6, r1, r8, asr #27
   16dc8:	ldr	r2, [sp, #32]
   16dcc:	cmp	r2, #0
   16dd0:	bne	16ed4 <__assert_fail@plt+0x5898>
   16dd4:	cmp	sl, r4
   16dd8:	movhi	r2, #63	; 0x3f
   16ddc:	strbhi	r2, [r8, r4]
   16de0:	add	r2, r4, #1
   16de4:	cmp	sl, r2
   16de8:	movhi	r0, #34	; 0x22
   16dec:	strbhi	r0, [r8, r2]
   16df0:	add	r2, r4, #2
   16df4:	cmp	sl, r2
   16df8:	movhi	r0, #34	; 0x22
   16dfc:	strbhi	r0, [r8, r2]
   16e00:	add	r2, r4, #3
   16e04:	cmp	sl, r2
   16e08:	movhi	r0, #63	; 0x3f
   16e0c:	strbhi	r0, [r8, r2]
   16e10:	mov	r2, #0
   16e14:	add	r4, r4, #4
   16e18:	mov	r5, r1
   16e1c:	mov	r9, r3
   16e20:	mov	r6, r2
   16e24:	b	16220 <__assert_fail@plt+0x4be4>
   16e28:	mov	r2, #0
   16e2c:	mov	r6, r2
   16e30:	b	15d90 <__assert_fail@plt+0x4754>
   16e34:	ldr	r0, [sp, #24]
   16e38:	mov	r1, r4
   16e3c:	cmp	r1, r0
   16e40:	mov	r2, r7
   16e44:	mov	r3, r5
   16e48:	mov	ip, r5
   16e4c:	ldr	r7, [sp, #96]	; 0x60
   16e50:	ldr	r5, [sp, #92]	; 0x5c
   16e54:	ldr	r4, [sp, #100]	; 0x64
   16e58:	ldr	r8, [sp, #84]	; 0x54
   16e5c:	ldr	sl, [sp, #88]	; 0x58
   16e60:	bcs	16e94 <__assert_fail@plt+0x5858>
   16e64:	ldrb	r6, [r2]
   16e68:	cmp	r6, #0
   16e6c:	bne	16e80 <__assert_fail@plt+0x5844>
   16e70:	b	16fb0 <__assert_fail@plt+0x5974>
   16e74:	ldrb	r6, [r2, #1]!
   16e78:	cmp	r6, #0
   16e7c:	beq	16f38 <__assert_fail@plt+0x58fc>
   16e80:	add	r3, r3, #1
   16e84:	add	r1, r9, r3
   16e88:	cmp	r1, r0
   16e8c:	bcc	16e74 <__assert_fail@plt+0x5838>
   16e90:	mov	ip, r3
   16e94:	ldr	r2, [sp, #28]
   16e98:	mov	r6, #0
   16e9c:	b	169d8 <__assert_fail@plt+0x539c>
   16ea0:	mov	r3, #1
   16ea4:	str	r3, [sp, #40]	; 0x28
   16ea8:	str	r3, [sp, #32]
   16eac:	str	r3, [sp, #28]
   16eb0:	str	r3, [sp, #52]	; 0x34
   16eb4:	ldr	r3, [pc, #-2220]	; 16610 <__assert_fail@plt+0x4fd4>
   16eb8:	mov	r2, #0
   16ebc:	str	r2, [sp, #68]	; 0x44
   16ec0:	str	r2, [sp, #44]	; 0x2c
   16ec4:	str	r2, [sp, #72]	; 0x48
   16ec8:	mov	r4, r2
   16ecc:	str	r3, [sp, #60]	; 0x3c
   16ed0:	b	158f8 <__assert_fail@plt+0x42bc>
   16ed4:	str	fp, [sp, #160]	; 0xa0
   16ed8:	mov	fp, r8
   16edc:	ldr	r8, [sp, #160]	; 0xa0
   16ee0:	b	160a8 <__assert_fail@plt+0x4a6c>
   16ee4:	mov	r2, r3
   16ee8:	ldr	r3, [sp, #60]	; 0x3c
   16eec:	cmp	r3, #0
   16ef0:	moveq	r2, #0
   16ef4:	andne	r2, r2, #1
   16ef8:	cmp	r2, #0
   16efc:	beq	16f28 <__assert_fail@plt+0x58ec>
   16f00:	mov	r2, r3
   16f04:	ldrb	r3, [r3]
   16f08:	cmp	r3, #0
   16f0c:	beq	16f28 <__assert_fail@plt+0x58ec>
   16f10:	cmp	sl, r4
   16f14:	strbhi	r3, [fp, r4]
   16f18:	ldrb	r3, [r2, #1]!
   16f1c:	add	r4, r4, #1
   16f20:	cmp	r3, #0
   16f24:	bne	16f10 <__assert_fail@plt+0x58d4>
   16f28:	cmp	sl, r4
   16f2c:	movhi	r3, #0
   16f30:	strbhi	r3, [fp, r4]
   16f34:	b	160e8 <__assert_fail@plt+0x4aac>
   16f38:	mov	ip, r3
   16f3c:	ldr	r2, [sp, #28]
   16f40:	b	169d8 <__assert_fail@plt+0x539c>
   16f44:	str	fp, [sp, #160]	; 0xa0
   16f48:	mov	fp, r8
   16f4c:	ldr	r8, [sp, #160]	; 0xa0
   16f50:	sub	r3, r8, #2
   16f54:	clz	r3, r3
   16f58:	lsr	r3, r3, #5
   16f5c:	str	r3, [sp, #28]
   16f60:	b	1609c <__assert_fail@plt+0x4a60>
   16f64:	ldr	r3, [sp, #76]	; 0x4c
   16f68:	mov	ip, #5
   16f6c:	str	r3, [sp, #16]
   16f70:	ldr	r3, [sp, #80]	; 0x50
   16f74:	ldr	r2, [sp, #36]	; 0x24
   16f78:	str	r3, [sp, #12]
   16f7c:	ldr	r3, [sp, #56]	; 0x38
   16f80:	ldr	r1, [sp, #72]	; 0x48
   16f84:	str	r3, [sp, #8]
   16f88:	ldr	r3, [sp, #164]	; 0xa4
   16f8c:	mov	r0, fp
   16f90:	str	r3, [sp, #4]
   16f94:	str	ip, [sp]
   16f98:	ldr	r3, [sp, #24]
   16f9c:	bl	15800 <__assert_fail@plt+0x41c4>
   16fa0:	mov	r4, r0
   16fa4:	b	160e8 <__assert_fail@plt+0x4aac>
   16fa8:	mov	r8, #2
   16fac:	b	1609c <__assert_fail@plt+0x4a60>
   16fb0:	ldr	r2, [sp, #28]
   16fb4:	b	169d8 <__assert_fail@plt+0x539c>
   16fb8:	mov	r3, #0
   16fbc:	str	r3, [sp, #68]	; 0x44
   16fc0:	str	r3, [sp, #44]	; 0x2c
   16fc4:	str	r3, [sp, #72]	; 0x48
   16fc8:	str	r3, [sp, #28]
   16fcc:	mov	r4, r3
   16fd0:	ldr	r3, [pc, #-2500]	; 16614 <__assert_fail@plt+0x4fd8>
   16fd4:	mov	r2, #1
   16fd8:	str	r2, [sp, #40]	; 0x28
   16fdc:	str	r2, [sp, #32]
   16fe0:	str	r2, [sp, #52]	; 0x34
   16fe4:	str	r3, [sp, #60]	; 0x3c
   16fe8:	b	158f8 <__assert_fail@plt+0x42bc>
   16fec:	bl	1133c <__stack_chk_fail@plt>
   16ff0:	mov	r5, r3
   16ff4:	mov	r6, #0
   16ff8:	b	15dec <__assert_fail@plt+0x47b0>
   16ffc:	mov	r3, #0
   17000:	mov	r2, #1
   17004:	str	r3, [sp, #44]	; 0x2c
   17008:	str	r3, [sp, #72]	; 0x48
   1700c:	str	r2, [sp, #40]	; 0x28
   17010:	b	15f08 <__assert_fail@plt+0x48cc>
   17014:	bl	11600 <abort@plt>
   17018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1701c:	sub	sp, sp, #44	; 0x2c
   17020:	mov	r6, r0
   17024:	mov	r4, r3
   17028:	mov	sl, r1
   1702c:	mov	fp, r2
   17030:	bl	1148c <__errno_location@plt>
   17034:	ldr	r7, [pc, #364]	; 171a8 <__assert_fail@plt+0x5b6c>
   17038:	cmp	r6, #0
   1703c:	ldr	r5, [r7]
   17040:	ldr	r3, [r0]
   17044:	str	r3, [sp, #24]
   17048:	blt	171a4 <__assert_fail@plt+0x5b68>
   1704c:	ldr	r3, [r7, #4]
   17050:	mov	r8, r0
   17054:	cmp	r3, r6
   17058:	bgt	170a4 <__assert_fail@plt+0x5a68>
   1705c:	cmn	r6, #-268435454	; 0xf0000002
   17060:	bgt	171a0 <__assert_fail@plt+0x5b64>
   17064:	add	r9, r6, #1
   17068:	add	r3, r7, #8
   1706c:	cmp	r5, r3
   17070:	lsl	r1, r9, #3
   17074:	beq	17180 <__assert_fail@plt+0x5b44>
   17078:	mov	r0, r5
   1707c:	bl	1847c <__assert_fail@plt+0x6e40>
   17080:	mov	r5, r0
   17084:	str	r0, [r7]
   17088:	ldr	r0, [r7, #4]
   1708c:	mov	r1, #0
   17090:	sub	r2, r9, r0
   17094:	add	r0, r5, r0, lsl #3
   17098:	lsl	r2, r2, #3
   1709c:	bl	114c8 <memset@plt>
   170a0:	str	r9, [r7, #4]
   170a4:	add	r3, r5, r6, lsl #3
   170a8:	ldr	r1, [r4, #4]
   170ac:	ldr	r7, [r3, #4]
   170b0:	ldr	r9, [r5, r6, lsl #3]
   170b4:	ldr	r2, [r4, #40]	; 0x28
   170b8:	ldr	ip, [r4, #44]	; 0x2c
   170bc:	str	r3, [sp, #28]
   170c0:	ldr	r3, [r4]
   170c4:	orr	r1, r1, #1
   170c8:	add	lr, r4, #8
   170cc:	str	r1, [sp, #36]	; 0x24
   170d0:	str	r1, [sp, #4]
   170d4:	str	r2, [sp, #12]
   170d8:	str	r3, [sp]
   170dc:	mov	r0, r7
   170e0:	mov	r1, r9
   170e4:	str	ip, [sp, #16]
   170e8:	str	lr, [sp, #8]
   170ec:	mov	r3, fp
   170f0:	mov	r2, sl
   170f4:	str	lr, [sp, #32]
   170f8:	bl	15800 <__assert_fail@plt+0x41c4>
   170fc:	cmp	r9, r0
   17100:	bhi	1716c <__assert_fail@plt+0x5b30>
   17104:	ldr	r3, [pc, #160]	; 171ac <__assert_fail@plt+0x5b70>
   17108:	add	r9, r0, #1
   1710c:	cmp	r7, r3
   17110:	str	r9, [r5, r6, lsl #3]
   17114:	beq	17120 <__assert_fail@plt+0x5ae4>
   17118:	mov	r0, r7
   1711c:	bl	112f4 <free@plt>
   17120:	mov	r0, r9
   17124:	bl	18420 <__assert_fail@plt+0x6de4>
   17128:	ldr	lr, [sp, #28]
   1712c:	ldr	ip, [r4, #44]	; 0x2c
   17130:	ldr	r5, [r4, #40]	; 0x28
   17134:	mov	r3, fp
   17138:	mov	r2, sl
   1713c:	mov	r1, r9
   17140:	str	r0, [lr, #4]
   17144:	ldr	lr, [r4]
   17148:	ldr	r4, [sp, #32]
   1714c:	str	ip, [sp, #16]
   17150:	str	r4, [sp, #8]
   17154:	ldr	r4, [sp, #36]	; 0x24
   17158:	str	r5, [sp, #12]
   1715c:	str	r4, [sp, #4]
   17160:	str	lr, [sp]
   17164:	mov	r7, r0
   17168:	bl	15800 <__assert_fail@plt+0x41c4>
   1716c:	ldr	r3, [sp, #24]
   17170:	mov	r0, r7
   17174:	str	r3, [r8]
   17178:	add	sp, sp, #44	; 0x2c
   1717c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17180:	mov	r0, #0
   17184:	bl	1847c <__assert_fail@plt+0x6e40>
   17188:	ldr	r3, [pc, #32]	; 171b0 <__assert_fail@plt+0x5b74>
   1718c:	mov	r5, r0
   17190:	ldm	r3, {r0, r1}
   17194:	str	r5, [r7]
   17198:	stm	r5, {r0, r1}
   1719c:	b	17088 <__assert_fail@plt+0x5a4c>
   171a0:	bl	18668 <__assert_fail@plt+0x702c>
   171a4:	bl	11600 <abort@plt>
   171a8:	andeq	ip, r2, r4, ror r1
   171ac:	andeq	ip, r2, r8, lsl #4
   171b0:	andeq	ip, r2, ip, ror r1
   171b4:	push	{r4, r5, r6, lr}
   171b8:	mov	r5, r0
   171bc:	bl	1148c <__errno_location@plt>
   171c0:	cmp	r5, #0
   171c4:	mov	r1, #48	; 0x30
   171c8:	mov	r4, r0
   171cc:	ldr	r0, [pc, #16]	; 171e4 <__assert_fail@plt+0x5ba8>
   171d0:	ldr	r6, [r4]
   171d4:	movne	r0, r5
   171d8:	bl	18628 <__assert_fail@plt+0x6fec>
   171dc:	str	r6, [r4]
   171e0:	pop	{r4, r5, r6, pc}
   171e4:	andeq	ip, r2, r8, lsl #6
   171e8:	ldr	r3, [pc, #12]	; 171fc <__assert_fail@plt+0x5bc0>
   171ec:	cmp	r0, #0
   171f0:	moveq	r0, r3
   171f4:	ldr	r0, [r0]
   171f8:	bx	lr
   171fc:	andeq	ip, r2, r8, lsl #6
   17200:	ldr	r3, [pc, #12]	; 17214 <__assert_fail@plt+0x5bd8>
   17204:	cmp	r0, #0
   17208:	moveq	r0, r3
   1720c:	str	r1, [r0]
   17210:	bx	lr
   17214:	andeq	ip, r2, r8, lsl #6
   17218:	ldr	r3, [pc, #52]	; 17254 <__assert_fail@plt+0x5c18>
   1721c:	cmp	r0, #0
   17220:	moveq	r0, r3
   17224:	add	r3, r0, #8
   17228:	push	{lr}		; (str lr, [sp, #-4]!)
   1722c:	lsr	lr, r1, #5
   17230:	and	r1, r1, #31
   17234:	ldr	ip, [r3, lr, lsl #2]
   17238:	lsr	r0, ip, r1
   1723c:	eor	r2, r2, r0
   17240:	and	r2, r2, #1
   17244:	and	r0, r0, #1
   17248:	eor	r1, ip, r2, lsl r1
   1724c:	str	r1, [r3, lr, lsl #2]
   17250:	pop	{pc}		; (ldr pc, [sp], #4)
   17254:	andeq	ip, r2, r8, lsl #6
   17258:	ldr	r3, [pc, #16]	; 17270 <__assert_fail@plt+0x5c34>
   1725c:	cmp	r0, #0
   17260:	movne	r3, r0
   17264:	ldr	r0, [r3, #4]
   17268:	str	r1, [r3, #4]
   1726c:	bx	lr
   17270:	andeq	ip, r2, r8, lsl #6
   17274:	ldr	r3, [pc, #44]	; 172a8 <__assert_fail@plt+0x5c6c>
   17278:	cmp	r0, #0
   1727c:	moveq	r0, r3
   17280:	mov	ip, #10
   17284:	cmp	r2, #0
   17288:	cmpne	r1, #0
   1728c:	str	ip, [r0]
   17290:	beq	172a0 <__assert_fail@plt+0x5c64>
   17294:	str	r1, [r0, #40]	; 0x28
   17298:	str	r2, [r0, #44]	; 0x2c
   1729c:	bx	lr
   172a0:	push	{r4, lr}
   172a4:	bl	11600 <abort@plt>
   172a8:	andeq	ip, r2, r8, lsl #6
   172ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   172b0:	sub	sp, sp, #24
   172b4:	ldr	ip, [pc, #108]	; 17328 <__assert_fail@plt+0x5cec>
   172b8:	ldr	r4, [sp, #56]	; 0x38
   172bc:	mov	r9, r2
   172c0:	cmp	r4, #0
   172c4:	moveq	r4, ip
   172c8:	mov	sl, r3
   172cc:	mov	r7, r0
   172d0:	mov	r8, r1
   172d4:	bl	1148c <__errno_location@plt>
   172d8:	ldr	r3, [r4, #44]	; 0x2c
   172dc:	mov	r1, r8
   172e0:	ldr	r6, [r0]
   172e4:	str	r3, [sp, #16]
   172e8:	ldr	r2, [r4, #40]	; 0x28
   172ec:	add	r3, r4, #8
   172f0:	str	r3, [sp, #8]
   172f4:	str	r2, [sp, #12]
   172f8:	ldr	r2, [r4, #4]
   172fc:	mov	r5, r0
   17300:	str	r2, [sp, #4]
   17304:	ldr	ip, [r4]
   17308:	mov	r3, sl
   1730c:	mov	r2, r9
   17310:	mov	r0, r7
   17314:	str	ip, [sp]
   17318:	bl	15800 <__assert_fail@plt+0x41c4>
   1731c:	str	r6, [r5]
   17320:	add	sp, sp, #24
   17324:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17328:	andeq	ip, r2, r8, lsl #6
   1732c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17330:	cmp	r3, #0
   17334:	sub	sp, sp, #44	; 0x2c
   17338:	ldr	r4, [pc, #192]	; 17400 <__assert_fail@plt+0x5dc4>
   1733c:	mov	r6, r2
   17340:	movne	r4, r3
   17344:	mov	r9, r1
   17348:	mov	r8, r0
   1734c:	bl	1148c <__errno_location@plt>
   17350:	ldr	r3, [r4, #44]	; 0x2c
   17354:	ldr	r5, [r4, #4]
   17358:	add	sl, r4, #8
   1735c:	cmp	r6, #0
   17360:	orreq	r5, r5, #1
   17364:	mov	r1, #0
   17368:	ldr	r2, [r0]
   1736c:	str	r3, [sp, #16]
   17370:	ldr	r3, [r4, #40]	; 0x28
   17374:	stmib	sp, {r5, sl}
   17378:	str	r3, [sp, #12]
   1737c:	ldr	r3, [r4]
   17380:	mov	r7, r0
   17384:	str	r2, [sp, #28]
   17388:	str	r3, [sp]
   1738c:	mov	r2, r8
   17390:	mov	r3, r9
   17394:	mov	r0, r1
   17398:	bl	15800 <__assert_fail@plt+0x41c4>
   1739c:	add	r1, r0, #1
   173a0:	mov	fp, r0
   173a4:	mov	r0, r1
   173a8:	str	r1, [sp, #36]	; 0x24
   173ac:	bl	18420 <__assert_fail@plt+0x6de4>
   173b0:	ldr	r3, [r4, #44]	; 0x2c
   173b4:	mov	r2, r8
   173b8:	str	r3, [sp, #16]
   173bc:	ldr	r3, [r4, #40]	; 0x28
   173c0:	str	r5, [sp, #4]
   173c4:	str	r3, [sp, #12]
   173c8:	str	sl, [sp, #8]
   173cc:	ldr	ip, [r4]
   173d0:	ldr	r1, [sp, #36]	; 0x24
   173d4:	mov	r3, r9
   173d8:	str	ip, [sp]
   173dc:	str	r0, [sp, #32]
   173e0:	bl	15800 <__assert_fail@plt+0x41c4>
   173e4:	ldr	r2, [sp, #28]
   173e8:	cmp	r6, #0
   173ec:	str	r2, [r7]
   173f0:	ldr	r0, [sp, #32]
   173f4:	strne	fp, [r6]
   173f8:	add	sp, sp, #44	; 0x2c
   173fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17400:	andeq	ip, r2, r8, lsl #6
   17404:	mov	r3, r2
   17408:	mov	r2, #0
   1740c:	b	1732c <__assert_fail@plt+0x5cf0>
   17410:	push	{r4, r5, r6, r7, r8, lr}
   17414:	ldr	r6, [pc, #112]	; 1748c <__assert_fail@plt+0x5e50>
   17418:	ldr	r3, [r6, #4]
   1741c:	ldr	r7, [r6]
   17420:	cmp	r3, #1
   17424:	ble	17448 <__assert_fail@plt+0x5e0c>
   17428:	sub	r5, r7, #8
   1742c:	add	r5, r5, r3, lsl #3
   17430:	mov	r4, r7
   17434:	ldr	r0, [r4, #12]
   17438:	add	r4, r4, #8
   1743c:	bl	112f4 <free@plt>
   17440:	cmp	r4, r5
   17444:	bne	17434 <__assert_fail@plt+0x5df8>
   17448:	ldr	r0, [r7, #4]
   1744c:	ldr	r4, [pc, #60]	; 17490 <__assert_fail@plt+0x5e54>
   17450:	cmp	r0, r4
   17454:	beq	17468 <__assert_fail@plt+0x5e2c>
   17458:	bl	112f4 <free@plt>
   1745c:	mov	r3, #256	; 0x100
   17460:	str	r4, [r6, #12]
   17464:	str	r3, [r6, #8]
   17468:	ldr	r4, [pc, #36]	; 17494 <__assert_fail@plt+0x5e58>
   1746c:	cmp	r7, r4
   17470:	beq	17480 <__assert_fail@plt+0x5e44>
   17474:	mov	r0, r7
   17478:	bl	112f4 <free@plt>
   1747c:	str	r4, [r6]
   17480:	mov	r3, #1
   17484:	str	r3, [r6, #4]
   17488:	pop	{r4, r5, r6, r7, r8, pc}
   1748c:	andeq	ip, r2, r4, ror r1
   17490:	andeq	ip, r2, r8, lsl #4
   17494:	andeq	ip, r2, ip, ror r1
   17498:	ldr	r3, [pc, #4]	; 174a4 <__assert_fail@plt+0x5e68>
   1749c:	mvn	r2, #0
   174a0:	b	17018 <__assert_fail@plt+0x59dc>
   174a4:	andeq	ip, r2, r8, lsl #6
   174a8:	ldr	r3, [pc]	; 174b0 <__assert_fail@plt+0x5e74>
   174ac:	b	17018 <__assert_fail@plt+0x59dc>
   174b0:	andeq	ip, r2, r8, lsl #6
   174b4:	mov	r1, r0
   174b8:	ldr	r3, [pc, #8]	; 174c8 <__assert_fail@plt+0x5e8c>
   174bc:	mvn	r2, #0
   174c0:	mov	r0, #0
   174c4:	b	17018 <__assert_fail@plt+0x59dc>
   174c8:	andeq	ip, r2, r8, lsl #6
   174cc:	mov	r2, r1
   174d0:	ldr	r3, [pc, #8]	; 174e0 <__assert_fail@plt+0x5ea4>
   174d4:	mov	r1, r0
   174d8:	mov	r0, #0
   174dc:	b	17018 <__assert_fail@plt+0x59dc>
   174e0:	andeq	ip, r2, r8, lsl #6
   174e4:	push	{r4, r5, r6, lr}
   174e8:	sub	sp, sp, #56	; 0x38
   174ec:	ldr	r4, [pc, #68]	; 17538 <__assert_fail@plt+0x5efc>
   174f0:	mov	r6, r2
   174f4:	mov	r5, r0
   174f8:	ldr	r3, [r4]
   174fc:	add	r0, sp, #4
   17500:	str	r3, [sp, #52]	; 0x34
   17504:	bl	15690 <__assert_fail@plt+0x4054>
   17508:	add	r3, sp, #4
   1750c:	mvn	r2, #0
   17510:	mov	r1, r6
   17514:	mov	r0, r5
   17518:	bl	17018 <__assert_fail@plt+0x59dc>
   1751c:	ldr	r2, [sp, #52]	; 0x34
   17520:	ldr	r3, [r4]
   17524:	cmp	r2, r3
   17528:	bne	17534 <__assert_fail@plt+0x5ef8>
   1752c:	add	sp, sp, #56	; 0x38
   17530:	pop	{r4, r5, r6, pc}
   17534:	bl	1133c <__stack_chk_fail@plt>
   17538:	andeq	fp, r2, r8, lsl #30
   1753c:	push	{r4, r5, r6, r7, lr}
   17540:	sub	sp, sp, #60	; 0x3c
   17544:	ldr	r4, [pc, #72]	; 17594 <__assert_fail@plt+0x5f58>
   17548:	mov	r6, r2
   1754c:	mov	r7, r3
   17550:	ldr	ip, [r4]
   17554:	mov	r5, r0
   17558:	add	r0, sp, #4
   1755c:	str	ip, [sp, #52]	; 0x34
   17560:	bl	15690 <__assert_fail@plt+0x4054>
   17564:	add	r3, sp, #4
   17568:	mov	r2, r7
   1756c:	mov	r1, r6
   17570:	mov	r0, r5
   17574:	bl	17018 <__assert_fail@plt+0x59dc>
   17578:	ldr	r2, [sp, #52]	; 0x34
   1757c:	ldr	r3, [r4]
   17580:	cmp	r2, r3
   17584:	bne	17590 <__assert_fail@plt+0x5f54>
   17588:	add	sp, sp, #60	; 0x3c
   1758c:	pop	{r4, r5, r6, r7, pc}
   17590:	bl	1133c <__stack_chk_fail@plt>
   17594:	andeq	fp, r2, r8, lsl #30
   17598:	mov	r2, r1
   1759c:	mov	r1, r0
   175a0:	mov	r0, #0
   175a4:	b	174e4 <__assert_fail@plt+0x5ea8>
   175a8:	mov	r3, r2
   175ac:	mov	r2, r1
   175b0:	mov	r1, r0
   175b4:	mov	r0, #0
   175b8:	b	1753c <__assert_fail@plt+0x5f00>
   175bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   175c0:	mov	r4, r2
   175c4:	ldr	lr, [pc, #128]	; 1764c <__assert_fail@plt+0x6010>
   175c8:	mov	r8, r0
   175cc:	mov	r9, r1
   175d0:	ldm	lr!, {r0, r1, r2, r3}
   175d4:	sub	sp, sp, #60	; 0x3c
   175d8:	add	ip, sp, #4
   175dc:	lsr	r6, r4, #5
   175e0:	stmia	ip!, {r0, r1, r2, r3}
   175e4:	add	r7, sp, #12
   175e8:	ldm	lr!, {r0, r1, r2, r3}
   175ec:	and	r4, r4, #31
   175f0:	ldr	r5, [pc, #88]	; 17650 <__assert_fail@plt+0x6014>
   175f4:	stmia	ip!, {r0, r1, r2, r3}
   175f8:	ldm	lr, {r0, r1, r2, r3}
   175fc:	stm	ip, {r0, r1, r2, r3}
   17600:	mov	r2, r9
   17604:	ldr	r3, [r7, r6, lsl #2]
   17608:	ldr	ip, [r5]
   1760c:	mov	r1, r8
   17610:	mvn	r0, r3, lsr r4
   17614:	and	r0, r0, #1
   17618:	str	ip, [sp, #52]	; 0x34
   1761c:	eor	r4, r3, r0, lsl r4
   17620:	add	r3, sp, #4
   17624:	mov	r0, #0
   17628:	str	r4, [r7, r6, lsl #2]
   1762c:	bl	17018 <__assert_fail@plt+0x59dc>
   17630:	ldr	r2, [sp, #52]	; 0x34
   17634:	ldr	r3, [r5]
   17638:	cmp	r2, r3
   1763c:	bne	17648 <__assert_fail@plt+0x600c>
   17640:	add	sp, sp, #60	; 0x3c
   17644:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17648:	bl	1133c <__stack_chk_fail@plt>
   1764c:	andeq	ip, r2, r8, lsl #6
   17650:	andeq	fp, r2, r8, lsl #30
   17654:	mov	r2, r1
   17658:	mvn	r1, #0
   1765c:	b	175bc <__assert_fail@plt+0x5f80>
   17660:	mov	r2, #58	; 0x3a
   17664:	mvn	r1, #0
   17668:	b	175bc <__assert_fail@plt+0x5f80>
   1766c:	mov	r2, #58	; 0x3a
   17670:	b	175bc <__assert_fail@plt+0x5f80>
   17674:	push	{r4, r5, r6, r7, r8, lr}
   17678:	sub	sp, sp, #104	; 0x68
   1767c:	ldr	r5, [pc, #120]	; 176fc <__assert_fail@plt+0x60c0>
   17680:	mov	r6, r0
   17684:	mov	r0, sp
   17688:	ldr	r3, [r5]
   1768c:	mov	r7, r2
   17690:	str	r3, [sp, #100]	; 0x64
   17694:	bl	15690 <__assert_fail@plt+0x4054>
   17698:	mov	ip, sp
   1769c:	add	lr, sp, #52	; 0x34
   176a0:	ldm	ip!, {r0, r1, r2, r3}
   176a4:	stmia	lr!, {r0, r1, r2, r3}
   176a8:	ldm	ip!, {r0, r1, r2, r3}
   176ac:	ldr	r8, [sp, #64]	; 0x40
   176b0:	stmia	lr!, {r0, r1, r2, r3}
   176b4:	mvn	r4, r8
   176b8:	ldm	ip, {r0, r1, r2, r3}
   176bc:	and	ip, r4, #67108864	; 0x4000000
   176c0:	eor	ip, ip, r8
   176c4:	str	ip, [sp, #64]	; 0x40
   176c8:	stm	lr, {r0, r1, r2, r3}
   176cc:	add	r3, sp, #52	; 0x34
   176d0:	mvn	r2, #0
   176d4:	mov	r1, r7
   176d8:	mov	r0, r6
   176dc:	bl	17018 <__assert_fail@plt+0x59dc>
   176e0:	ldr	r2, [sp, #100]	; 0x64
   176e4:	ldr	r3, [r5]
   176e8:	cmp	r2, r3
   176ec:	bne	176f8 <__assert_fail@plt+0x60bc>
   176f0:	add	sp, sp, #104	; 0x68
   176f4:	pop	{r4, r5, r6, r7, r8, pc}
   176f8:	bl	1133c <__stack_chk_fail@plt>
   176fc:	andeq	fp, r2, r8, lsl #30
   17700:	push	{r4, r5, r6, r7, r8, r9, lr}
   17704:	mov	r6, r1
   17708:	ldr	lr, [pc, #132]	; 17794 <__assert_fail@plt+0x6158>
   1770c:	mov	r5, r2
   17710:	mov	r8, r0
   17714:	mov	r9, r3
   17718:	ldm	lr!, {r0, r1, r2, r3}
   1771c:	sub	sp, sp, #60	; 0x3c
   17720:	add	ip, sp, #4
   17724:	ldr	r4, [pc, #108]	; 17798 <__assert_fail@plt+0x615c>
   17728:	stmia	ip!, {r0, r1, r2, r3}
   1772c:	mov	r7, #10
   17730:	ldm	lr!, {r0, r1, r2, r3}
   17734:	cmp	r5, #0
   17738:	cmpne	r6, #0
   1773c:	str	r7, [sp, #4]
   17740:	stmia	ip!, {r0, r1, r2, r3}
   17744:	ldm	lr, {r0, r1, r2, r3}
   17748:	ldr	lr, [r4]
   1774c:	stm	ip, {r0, r1, r2, r3}
   17750:	str	lr, [sp, #52]	; 0x34
   17754:	beq	17790 <__assert_fail@plt+0x6154>
   17758:	add	r3, sp, #4
   1775c:	ldr	r2, [sp, #88]	; 0x58
   17760:	mov	r1, r9
   17764:	mov	r0, r8
   17768:	str	r6, [sp, #44]	; 0x2c
   1776c:	str	r5, [sp, #48]	; 0x30
   17770:	bl	17018 <__assert_fail@plt+0x59dc>
   17774:	ldr	r2, [sp, #52]	; 0x34
   17778:	ldr	r3, [r4]
   1777c:	cmp	r2, r3
   17780:	bne	1778c <__assert_fail@plt+0x6150>
   17784:	add	sp, sp, #60	; 0x3c
   17788:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1778c:	bl	1133c <__stack_chk_fail@plt>
   17790:	bl	11600 <abort@plt>
   17794:	andeq	ip, r2, r8, lsl #6
   17798:	andeq	fp, r2, r8, lsl #30
   1779c:	push	{lr}		; (str lr, [sp, #-4]!)
   177a0:	sub	sp, sp, #12
   177a4:	mvn	ip, #0
   177a8:	str	ip, [sp]
   177ac:	bl	17700 <__assert_fail@plt+0x60c4>
   177b0:	add	sp, sp, #12
   177b4:	pop	{pc}		; (ldr pc, [sp], #4)
   177b8:	push	{lr}		; (str lr, [sp, #-4]!)
   177bc:	sub	sp, sp, #12
   177c0:	mvn	ip, #0
   177c4:	mov	r3, r2
   177c8:	str	ip, [sp]
   177cc:	mov	r2, r1
   177d0:	mov	r1, r0
   177d4:	mov	r0, #0
   177d8:	bl	17700 <__assert_fail@plt+0x60c4>
   177dc:	add	sp, sp, #12
   177e0:	pop	{pc}		; (ldr pc, [sp], #4)
   177e4:	push	{lr}		; (str lr, [sp, #-4]!)
   177e8:	sub	sp, sp, #12
   177ec:	str	r3, [sp]
   177f0:	mov	r3, r2
   177f4:	mov	r2, r1
   177f8:	mov	r1, r0
   177fc:	mov	r0, #0
   17800:	bl	17700 <__assert_fail@plt+0x60c4>
   17804:	add	sp, sp, #12
   17808:	pop	{pc}		; (ldr pc, [sp], #4)
   1780c:	ldr	r3, [pc]	; 17814 <__assert_fail@plt+0x61d8>
   17810:	b	17018 <__assert_fail@plt+0x59dc>
   17814:	andeq	ip, r2, r4, lsl #3
   17818:	mov	r2, r1
   1781c:	ldr	r3, [pc, #8]	; 1782c <__assert_fail@plt+0x61f0>
   17820:	mov	r1, r0
   17824:	mov	r0, #0
   17828:	b	17018 <__assert_fail@plt+0x59dc>
   1782c:	andeq	ip, r2, r4, lsl #3
   17830:	ldr	r3, [pc, #4]	; 1783c <__assert_fail@plt+0x6200>
   17834:	mvn	r2, #0
   17838:	b	17018 <__assert_fail@plt+0x59dc>
   1783c:	andeq	ip, r2, r4, lsl #3
   17840:	mov	r1, r0
   17844:	ldr	r3, [pc, #8]	; 17854 <__assert_fail@plt+0x6218>
   17848:	mvn	r2, #0
   1784c:	mov	r0, #0
   17850:	b	17018 <__assert_fail@plt+0x59dc>
   17854:	andeq	ip, r2, r4, lsl #3
   17858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1785c:	sub	sp, sp, #228	; 0xe4
   17860:	ldr	r4, [pc, #508]	; 17a64 <__assert_fail@plt+0x6428>
   17864:	ldr	lr, [sp, #264]	; 0x108
   17868:	mov	fp, r0
   1786c:	ldr	ip, [r4]
   17870:	str	lr, [sp]
   17874:	str	ip, [sp, #220]	; 0xdc
   17878:	mov	r8, r1
   1787c:	mov	sl, r2
   17880:	mov	r7, r3
   17884:	bl	114d4 <renameat2@plt>
   17888:	subs	r6, r0, #0
   1788c:	bge	178d8 <__assert_fail@plt+0x629c>
   17890:	bl	1148c <__errno_location@plt>
   17894:	ldr	r5, [r0]
   17898:	mov	r9, r0
   1789c:	sub	r3, r5, #22
   178a0:	bic	r3, r3, #16
   178a4:	cmp	r5, #95	; 0x5f
   178a8:	cmpne	r3, #0
   178ac:	movne	r5, #1
   178b0:	moveq	r5, #0
   178b4:	bne	178d8 <__assert_fail@plt+0x629c>
   178b8:	ldr	r3, [sp, #264]	; 0x108
   178bc:	cmp	r3, #0
   178c0:	beq	17930 <__assert_fail@plt+0x62f4>
   178c4:	bics	r3, r3, #1
   178c8:	beq	178f4 <__assert_fail@plt+0x62b8>
   178cc:	mvn	r6, #0
   178d0:	mov	r3, #95	; 0x5f
   178d4:	str	r3, [r0]
   178d8:	ldr	r1, [sp, #220]	; 0xdc
   178dc:	ldr	r3, [r4]
   178e0:	mov	r0, r6
   178e4:	cmp	r1, r3
   178e8:	bne	17a60 <__assert_fail@plt+0x6424>
   178ec:	add	sp, sp, #228	; 0xe4
   178f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178f4:	mov	r3, #256	; 0x100
   178f8:	str	r3, [sp]
   178fc:	mov	r2, r7
   17900:	add	r3, sp, #112	; 0x70
   17904:	mov	r1, sl
   17908:	mov	r0, #3
   1790c:	bl	11360 <__fxstatat64@plt>
   17910:	cmp	r0, #0
   17914:	beq	17a30 <__assert_fail@plt+0x63f4>
   17918:	ldr	r3, [r9]
   1791c:	cmp	r3, #75	; 0x4b
   17920:	beq	17a30 <__assert_fail@plt+0x63f4>
   17924:	cmp	r3, #2
   17928:	bne	17a28 <__assert_fail@plt+0x63ec>
   1792c:	mov	r5, #1
   17930:	mov	r0, r8
   17934:	bl	11480 <strlen@plt>
   17938:	mov	r6, r0
   1793c:	mov	r0, r7
   17940:	bl	11480 <strlen@plt>
   17944:	cmp	r0, #0
   17948:	cmpne	r6, #0
   1794c:	beq	179f4 <__assert_fail@plt+0x63b8>
   17950:	add	r6, r8, r6
   17954:	add	r0, r7, r0
   17958:	ldrb	r2, [r6, #-1]
   1795c:	ldrb	r3, [r0, #-1]
   17960:	cmp	r2, #47	; 0x2f
   17964:	cmpne	r3, #47	; 0x2f
   17968:	bne	179f4 <__assert_fail@plt+0x63b8>
   1796c:	mov	r6, #256	; 0x100
   17970:	str	r6, [sp]
   17974:	add	r3, sp, #8
   17978:	mov	r2, r8
   1797c:	mov	r1, fp
   17980:	mov	r0, #3
   17984:	bl	11360 <__fxstatat64@plt>
   17988:	cmp	r0, #0
   1798c:	bne	17a28 <__assert_fail@plt+0x63ec>
   17990:	cmp	r5, #0
   17994:	beq	179b8 <__assert_fail@plt+0x637c>
   17998:	ldr	r3, [sp, #24]
   1799c:	and	r3, r3, #61440	; 0xf000
   179a0:	cmp	r3, #16384	; 0x4000
   179a4:	beq	179f4 <__assert_fail@plt+0x63b8>
   179a8:	mov	r3, #2
   179ac:	str	r3, [r9]
   179b0:	mvn	r6, #0
   179b4:	b	178d8 <__assert_fail@plt+0x629c>
   179b8:	str	r6, [sp]
   179bc:	add	r3, sp, #112	; 0x70
   179c0:	mov	r2, r7
   179c4:	mov	r1, sl
   179c8:	mov	r0, #3
   179cc:	bl	11360 <__fxstatat64@plt>
   179d0:	cmp	r0, #0
   179d4:	beq	17a10 <__assert_fail@plt+0x63d4>
   179d8:	ldr	r3, [r9]
   179dc:	cmp	r3, #2
   179e0:	bne	17a28 <__assert_fail@plt+0x63ec>
   179e4:	ldr	r3, [sp, #24]
   179e8:	and	r3, r3, #61440	; 0xf000
   179ec:	cmp	r3, #16384	; 0x4000
   179f0:	bne	17a28 <__assert_fail@plt+0x63ec>
   179f4:	mov	r3, r7
   179f8:	mov	r2, sl
   179fc:	mov	r1, r8
   17a00:	mov	r0, fp
   17a04:	bl	115b8 <renameat@plt>
   17a08:	mov	r6, r0
   17a0c:	b	178d8 <__assert_fail@plt+0x629c>
   17a10:	ldr	r3, [sp, #128]	; 0x80
   17a14:	and	r3, r3, #61440	; 0xf000
   17a18:	cmp	r3, #16384	; 0x4000
   17a1c:	beq	17a40 <__assert_fail@plt+0x6404>
   17a20:	mov	r3, #20
   17a24:	str	r3, [r9]
   17a28:	mvn	r6, #0
   17a2c:	b	178d8 <__assert_fail@plt+0x629c>
   17a30:	mov	r3, #17
   17a34:	str	r3, [r9]
   17a38:	mvn	r6, #0
   17a3c:	b	178d8 <__assert_fail@plt+0x629c>
   17a40:	ldr	r3, [sp, #24]
   17a44:	and	r3, r3, #61440	; 0xf000
   17a48:	cmp	r3, #16384	; 0x4000
   17a4c:	beq	179f4 <__assert_fail@plt+0x63b8>
   17a50:	mov	r3, #21
   17a54:	str	r3, [r9]
   17a58:	mvn	r6, #0
   17a5c:	b	178d8 <__assert_fail@plt+0x629c>
   17a60:	bl	1133c <__stack_chk_fail@plt>
   17a64:	andeq	fp, r2, r8, lsl #30
   17a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a6c:	mov	r9, r1
   17a70:	ldr	r4, [pc, #352]	; 17bd8 <__assert_fail@plt+0x659c>
   17a74:	sub	sp, sp, #228	; 0xe4
   17a78:	mov	fp, r0
   17a7c:	ldr	r1, [r4]
   17a80:	mov	r0, r9
   17a84:	mov	r8, r3
   17a88:	mov	sl, r2
   17a8c:	str	r1, [sp, #220]	; 0xdc
   17a90:	bl	14174 <__assert_fail@plt+0x2b38>
   17a94:	mov	r5, r0
   17a98:	mov	r0, r8
   17a9c:	bl	14174 <__assert_fail@plt+0x2b38>
   17aa0:	mov	r6, r0
   17aa4:	mov	r0, r5
   17aa8:	bl	141c4 <__assert_fail@plt+0x2b88>
   17aac:	mov	r7, r0
   17ab0:	mov	r0, r6
   17ab4:	bl	141c4 <__assert_fail@plt+0x2b88>
   17ab8:	cmp	r7, r0
   17abc:	beq	17ae0 <__assert_fail@plt+0x64a4>
   17ac0:	mov	r6, #0
   17ac4:	ldr	r2, [sp, #220]	; 0xdc
   17ac8:	ldr	r3, [r4]
   17acc:	mov	r0, r6
   17ad0:	cmp	r2, r3
   17ad4:	bne	17bd4 <__assert_fail@plt+0x6598>
   17ad8:	add	sp, sp, #228	; 0xe4
   17adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ae0:	mov	r2, r7
   17ae4:	mov	r1, r6
   17ae8:	mov	r0, r5
   17aec:	bl	11324 <memcmp@plt>
   17af0:	cmp	r0, #0
   17af4:	bne	17ac0 <__assert_fail@plt+0x6484>
   17af8:	mov	r0, r9
   17afc:	bl	140a0 <__assert_fail@plt+0x2a64>
   17b00:	mov	r3, #256	; 0x100
   17b04:	str	r3, [sp]
   17b08:	mov	r1, fp
   17b0c:	add	r3, sp, #8
   17b10:	mov	r2, r0
   17b14:	mov	r5, r0
   17b18:	mov	r0, #3
   17b1c:	bl	11360 <__fxstatat64@plt>
   17b20:	cmp	r0, #0
   17b24:	bne	17bb8 <__assert_fail@plt+0x657c>
   17b28:	mov	r0, r5
   17b2c:	bl	112f4 <free@plt>
   17b30:	mov	r0, r8
   17b34:	bl	140a0 <__assert_fail@plt+0x2a64>
   17b38:	mov	r3, #256	; 0x100
   17b3c:	str	r3, [sp]
   17b40:	mov	r1, sl
   17b44:	add	r3, sp, #112	; 0x70
   17b48:	mov	r2, r0
   17b4c:	mov	r5, r0
   17b50:	mov	r0, #3
   17b54:	bl	11360 <__fxstatat64@plt>
   17b58:	cmp	r0, #0
   17b5c:	bne	17b9c <__assert_fail@plt+0x6560>
   17b60:	ldrd	r0, [sp, #104]	; 0x68
   17b64:	ldrd	r2, [sp, #208]	; 0xd0
   17b68:	cmp	r1, r3
   17b6c:	cmpeq	r0, r2
   17b70:	movne	r6, #0
   17b74:	bne	17b90 <__assert_fail@plt+0x6554>
   17b78:	ldrd	r0, [sp, #8]
   17b7c:	ldrd	r2, [sp, #112]	; 0x70
   17b80:	cmp	r1, r3
   17b84:	cmpeq	r0, r2
   17b88:	moveq	r6, #1
   17b8c:	movne	r6, #0
   17b90:	mov	r0, r5
   17b94:	bl	112f4 <free@plt>
   17b98:	b	17ac4 <__assert_fail@plt+0x6488>
   17b9c:	bl	1148c <__errno_location@plt>
   17ba0:	mov	r3, r5
   17ba4:	ldr	r2, [pc, #48]	; 17bdc <__assert_fail@plt+0x65a0>
   17ba8:	ldr	r1, [r0]
   17bac:	mov	r0, #1
   17bb0:	bl	113cc <error@plt>
   17bb4:	b	17b60 <__assert_fail@plt+0x6524>
   17bb8:	bl	1148c <__errno_location@plt>
   17bbc:	mov	r3, r5
   17bc0:	ldr	r2, [pc, #20]	; 17bdc <__assert_fail@plt+0x65a0>
   17bc4:	ldr	r1, [r0]
   17bc8:	mov	r0, #1
   17bcc:	bl	113cc <error@plt>
   17bd0:	b	17b28 <__assert_fail@plt+0x64ec>
   17bd4:	bl	1133c <__stack_chk_fail@plt>
   17bd8:	andeq	fp, r2, r8, lsl #30
   17bdc:	andeq	fp, r1, r0, ror #3
   17be0:	mvn	r2, #99	; 0x63
   17be4:	mov	r3, r1
   17be8:	mov	r1, r0
   17bec:	mov	r0, r2
   17bf0:	b	17a68 <__assert_fail@plt+0x642c>
   17bf4:	push	{r4, r5, lr}
   17bf8:	sub	sp, sp, #116	; 0x74
   17bfc:	ldr	r4, [pc, #104]	; 17c6c <__assert_fail@plt+0x6630>
   17c00:	mov	r1, r0
   17c04:	mov	r2, sp
   17c08:	ldr	r3, [r4]
   17c0c:	mov	r0, #3
   17c10:	str	r3, [sp, #108]	; 0x6c
   17c14:	bl	11618 <__lxstat64@plt>
   17c18:	mov	r5, r0
   17c1c:	bl	1148c <__errno_location@plt>
   17c20:	cmp	r5, #0
   17c24:	beq	17c40 <__assert_fail@plt+0x6604>
   17c28:	ldr	r3, [r0]
   17c2c:	cmp	r3, #75	; 0x4b
   17c30:	beq	17c40 <__assert_fail@plt+0x6604>
   17c34:	subs	r3, r3, #2
   17c38:	mvnne	r3, #0
   17c3c:	b	17c4c <__assert_fail@plt+0x6610>
   17c40:	mvn	r3, #0
   17c44:	mov	r2, #17
   17c48:	str	r2, [r0]
   17c4c:	ldr	r1, [sp, #108]	; 0x6c
   17c50:	ldr	r2, [r4]
   17c54:	mov	r0, r3
   17c58:	cmp	r1, r2
   17c5c:	bne	17c68 <__assert_fail@plt+0x662c>
   17c60:	add	sp, sp, #116	; 0x74
   17c64:	pop	{r4, r5, pc}
   17c68:	bl	1133c <__stack_chk_fail@plt>
   17c6c:	andeq	fp, r2, r8, lsl #30
   17c70:	mov	r1, #448	; 0x1c0
   17c74:	b	114a4 <mkdir@plt>
   17c78:	ldr	r1, [r1]
   17c7c:	mov	r2, #384	; 0x180
   17c80:	bic	r1, r1, #195	; 0xc3
   17c84:	orr	r1, r1, #194	; 0xc2
   17c88:	b	113e4 <open64@plt>
   17c8c:	push	{r4, lr}
   17c90:	ldr	r3, [pc, #12]	; 17ca4 <__assert_fail@plt+0x6668>
   17c94:	ldr	r2, [pc, #12]	; 17ca8 <__assert_fail@plt+0x666c>
   17c98:	ldr	r1, [pc, #12]	; 17cac <__assert_fail@plt+0x6670>
   17c9c:	ldr	r0, [pc, #12]	; 17cb0 <__assert_fail@plt+0x6674>
   17ca0:	bl	1163c <__assert_fail@plt>
   17ca4:	andeq	fp, r1, ip, lsl #7
   17ca8:	andeq	r0, r0, r7, asr #2
   17cac:	andeq	fp, r1, ip, ror #7
   17cb0:	strdeq	fp, [r1], -ip
   17cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cb8:	sub	sp, sp, #20
   17cbc:	mov	r4, r1
   17cc0:	strd	r2, [sp]
   17cc4:	mov	sl, r0
   17cc8:	bl	1148c <__errno_location@plt>
   17ccc:	ldr	r9, [sp, #56]	; 0x38
   17cd0:	mov	fp, r0
   17cd4:	mov	r0, sl
   17cd8:	bl	11480 <strlen@plt>
   17cdc:	add	r3, r4, r9
   17ce0:	ldr	r2, [fp]
   17ce4:	str	r2, [sp, #12]
   17ce8:	cmp	r3, r0
   17cec:	bhi	17de4 <__assert_fail@plt+0x67a8>
   17cf0:	sub	r4, r0, r3
   17cf4:	add	r3, sl, r4
   17cf8:	mov	r0, r3
   17cfc:	ldr	r1, [pc, #248]	; 17dfc <__assert_fail@plt+0x67c0>
   17d00:	str	r3, [sp, #8]
   17d04:	bl	11630 <strspn@plt>
   17d08:	cmp	r9, r0
   17d0c:	bhi	17de4 <__assert_fail@plt+0x67a8>
   17d10:	mov	r1, r9
   17d14:	mov	r0, #0
   17d18:	bl	18fac <__assert_fail@plt+0x7970>
   17d1c:	subs	r6, r0, #0
   17d20:	beq	17df4 <__assert_fail@plt+0x67b8>
   17d24:	add	r5, sl, r9
   17d28:	ldr	r8, [pc, #208]	; 17e00 <__assert_fail@plt+0x67c4>
   17d2c:	ldr	r7, [pc, #208]	; 17e04 <__assert_fail@plt+0x67c8>
   17d30:	add	r5, r5, r4
   17d34:	cmp	r9, #0
   17d38:	ldrne	r4, [sp, #8]
   17d3c:	beq	17d64 <__assert_fail@plt+0x6728>
   17d40:	mov	r3, #0
   17d44:	mov	r2, #61	; 0x3d
   17d48:	mov	r0, r6
   17d4c:	bl	18fec <__assert_fail@plt+0x79b0>
   17d50:	add	r0, r7, r0
   17d54:	ldrb	r3, [r0, #20]
   17d58:	strb	r3, [r4], #1
   17d5c:	cmp	r4, r5
   17d60:	bne	17d40 <__assert_fail@plt+0x6704>
   17d64:	ldr	r1, [sp]
   17d68:	mov	r0, sl
   17d6c:	ldr	r3, [sp, #4]
   17d70:	blx	r3
   17d74:	cmp	r0, #0
   17d78:	bge	17dac <__assert_fail@plt+0x6770>
   17d7c:	ldr	r4, [fp]
   17d80:	cmp	r4, #17
   17d84:	bne	17ddc <__assert_fail@plt+0x67a0>
   17d88:	subs	r8, r8, #1
   17d8c:	bne	17d34 <__assert_fail@plt+0x66f8>
   17d90:	mov	r0, r6
   17d94:	bl	191d8 <__assert_fail@plt+0x7b9c>
   17d98:	mvn	r3, #0
   17d9c:	mov	r0, r3
   17da0:	str	r4, [fp]
   17da4:	add	sp, sp, #20
   17da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dac:	ldr	r2, [sp, #12]
   17db0:	mov	r3, r0
   17db4:	mov	r4, r2
   17db8:	str	r2, [fp]
   17dbc:	mov	r0, r6
   17dc0:	str	r3, [sp]
   17dc4:	bl	191d8 <__assert_fail@plt+0x7b9c>
   17dc8:	ldr	r3, [sp]
   17dcc:	str	r4, [fp]
   17dd0:	mov	r0, r3
   17dd4:	add	sp, sp, #20
   17dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ddc:	mvn	r3, #0
   17de0:	b	17dbc <__assert_fail@plt+0x6780>
   17de4:	mov	r3, #22
   17de8:	str	r3, [fp]
   17dec:	mvn	r3, #0
   17df0:	b	17dd0 <__assert_fail@plt+0x6794>
   17df4:	mvn	r3, #0
   17df8:	b	17dd0 <__assert_fail@plt+0x6794>
   17dfc:			; <UNDEFINED> instruction: 0x0001b7b8
   17e00:	strdeq	sl, [r3], -r8
   17e04:	andeq	fp, r1, ip, lsl #7
   17e08:	push	{lr}		; (str lr, [sp, #-4]!)
   17e0c:	sub	sp, sp, #20
   17e10:	cmp	r3, #2
   17e14:	str	r2, [sp, #12]
   17e18:	bhi	17e40 <__assert_fail@plt+0x6804>
   17e1c:	ldr	r2, [pc, #32]	; 17e44 <__assert_fail@plt+0x6808>
   17e20:	ldr	ip, [sp, #24]
   17e24:	add	r3, r2, r3, lsl #2
   17e28:	str	ip, [sp]
   17e2c:	add	r2, sp, #12
   17e30:	ldr	r3, [r3, #84]	; 0x54
   17e34:	bl	17cb4 <__assert_fail@plt+0x6678>
   17e38:	add	sp, sp, #20
   17e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e40:	bl	17c8c <__assert_fail@plt+0x6650>
   17e44:	andeq	fp, r1, ip, lsl #7
   17e48:	push	{r4, lr}
   17e4c:	sub	sp, sp, #16
   17e50:	ldr	r4, [pc, #76]	; 17ea4 <__assert_fail@plt+0x6868>
   17e54:	cmp	r3, #2
   17e58:	str	r2, [sp, #8]
   17e5c:	ldr	ip, [r4]
   17e60:	str	ip, [sp, #12]
   17e64:	bhi	17e9c <__assert_fail@plt+0x6860>
   17e68:	ldr	r2, [pc, #56]	; 17ea8 <__assert_fail@plt+0x686c>
   17e6c:	mov	ip, #6
   17e70:	add	r2, r2, r3, lsl #2
   17e74:	str	ip, [sp]
   17e78:	ldr	r3, [r2, #84]	; 0x54
   17e7c:	add	r2, sp, #8
   17e80:	bl	17cb4 <__assert_fail@plt+0x6678>
   17e84:	ldr	r2, [sp, #12]
   17e88:	ldr	r3, [r4]
   17e8c:	cmp	r2, r3
   17e90:	bne	17ea0 <__assert_fail@plt+0x6864>
   17e94:	add	sp, sp, #16
   17e98:	pop	{r4, pc}
   17e9c:	bl	17c8c <__assert_fail@plt+0x6650>
   17ea0:	bl	1133c <__stack_chk_fail@plt>
   17ea4:	andeq	fp, r2, r8, lsl #30
   17ea8:	andeq	fp, r1, ip, lsl #7
   17eac:	push	{lr}		; (str lr, [sp, #-4]!)
   17eb0:	sub	sp, sp, #12
   17eb4:	mov	ip, #6
   17eb8:	str	ip, [sp]
   17ebc:	bl	17cb4 <__assert_fail@plt+0x6678>
   17ec0:	add	sp, sp, #12
   17ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ec8:	push	{r4, r5, r6, lr}
   17ecc:	sub	sp, sp, #32
   17ed0:	cmp	r1, #0
   17ed4:	mov	r5, r0
   17ed8:	ldr	r4, [sp, #48]	; 0x30
   17edc:	ldr	r6, [sp, #52]	; 0x34
   17ee0:	beq	17f70 <__assert_fail@plt+0x6934>
   17ee4:	strd	r2, [sp]
   17ee8:	mov	r3, r1
   17eec:	ldr	r2, [pc, #828]	; 18230 <__assert_fail@plt+0x6bf4>
   17ef0:	mov	r1, #1
   17ef4:	bl	114f8 <__fprintf_chk@plt>
   17ef8:	mov	r2, #5
   17efc:	ldr	r1, [pc, #816]	; 18234 <__assert_fail@plt+0x6bf8>
   17f00:	mov	r0, #0
   17f04:	bl	11330 <dcgettext@plt>
   17f08:	ldr	r3, [pc, #808]	; 18238 <__assert_fail@plt+0x6bfc>
   17f0c:	ldr	r2, [pc, #808]	; 1823c <__assert_fail@plt+0x6c00>
   17f10:	str	r3, [sp]
   17f14:	mov	r1, #1
   17f18:	mov	r3, r0
   17f1c:	mov	r0, r5
   17f20:	bl	114f8 <__fprintf_chk@plt>
   17f24:	ldr	r1, [pc, #788]	; 18240 <__assert_fail@plt+0x6c04>
   17f28:	mov	r2, #5
   17f2c:	mov	r0, #0
   17f30:	bl	11330 <dcgettext@plt>
   17f34:	mov	r1, r5
   17f38:	bl	11270 <fputs_unlocked@plt>
   17f3c:	cmp	r6, #9
   17f40:	ldrls	pc, [pc, r6, lsl #2]
   17f44:	b	18220 <__assert_fail@plt+0x6be4>
   17f48:	andeq	r8, r1, ip, lsr #4
   17f4c:	strdeq	r7, [r1], -r4
   17f50:	andeq	r8, r1, r0, lsr #32
   17f54:	andeq	r8, r1, r4, asr r0
   17f58:	muleq	r1, r0, r0
   17f5c:	ldrdeq	r8, [r1], -r0
   17f60:	andeq	r8, r1, r8, lsl r1
   17f64:	andeq	r8, r1, r8, ror #2
   17f68:	andeq	r8, r1, r0, asr #3
   17f6c:	andeq	r7, r1, r8, lsl #31
   17f70:	str	r3, [sp]
   17f74:	mov	r1, #1
   17f78:	mov	r3, r2
   17f7c:	ldr	r2, [pc, #704]	; 18244 <__assert_fail@plt+0x6c08>
   17f80:	bl	114f8 <__fprintf_chk@plt>
   17f84:	b	17ef8 <__assert_fail@plt+0x68bc>
   17f88:	ldr	r1, [pc, #696]	; 18248 <__assert_fail@plt+0x6c0c>
   17f8c:	mov	r2, #5
   17f90:	mov	r0, #0
   17f94:	bl	11330 <dcgettext@plt>
   17f98:	ldr	r2, [r4, #32]
   17f9c:	ldr	r3, [r4, #28]
   17fa0:	ldr	r1, [r4, #24]
   17fa4:	str	r2, [sp, #28]
   17fa8:	ldr	r2, [r4, #20]
   17fac:	str	r3, [sp, #24]
   17fb0:	ldr	r3, [r4, #16]
   17fb4:	str	r1, [sp, #20]
   17fb8:	ldr	r1, [r4, #12]
   17fbc:	str	r2, [sp, #16]
   17fc0:	ldr	r2, [r4, #8]
   17fc4:	str	r3, [sp, #12]
   17fc8:	ldr	r3, [r4, #4]
   17fcc:	str	r1, [sp, #8]
   17fd0:	str	r2, [sp, #4]
   17fd4:	str	r3, [sp]
   17fd8:	mov	r1, #1
   17fdc:	ldr	r3, [r4]
   17fe0:	mov	r2, r0
   17fe4:	mov	r0, r5
   17fe8:	bl	114f8 <__fprintf_chk@plt>
   17fec:	add	sp, sp, #32
   17ff0:	pop	{r4, r5, r6, pc}
   17ff4:	mov	r2, #5
   17ff8:	ldr	r1, [pc, #588]	; 1824c <__assert_fail@plt+0x6c10>
   17ffc:	mov	r0, #0
   18000:	bl	11330 <dcgettext@plt>
   18004:	ldr	r3, [r4]
   18008:	mov	r1, #1
   1800c:	mov	r2, r0
   18010:	mov	r0, r5
   18014:	add	sp, sp, #32
   18018:	pop	{r4, r5, r6, lr}
   1801c:	b	114f8 <__fprintf_chk@plt>
   18020:	mov	r2, #5
   18024:	ldr	r1, [pc, #548]	; 18250 <__assert_fail@plt+0x6c14>
   18028:	mov	r0, #0
   1802c:	bl	11330 <dcgettext@plt>
   18030:	ldr	r2, [r4, #4]
   18034:	ldr	r3, [r4]
   18038:	mov	r1, #1
   1803c:	str	r2, [sp, #48]	; 0x30
   18040:	mov	r2, r0
   18044:	mov	r0, r5
   18048:	add	sp, sp, #32
   1804c:	pop	{r4, r5, r6, lr}
   18050:	b	114f8 <__fprintf_chk@plt>
   18054:	mov	r2, #5
   18058:	ldr	r1, [pc, #500]	; 18254 <__assert_fail@plt+0x6c18>
   1805c:	mov	r0, #0
   18060:	bl	11330 <dcgettext@plt>
   18064:	ldr	r2, [r4, #8]
   18068:	ldr	r3, [r4, #4]
   1806c:	mov	r1, #1
   18070:	str	r2, [sp, #52]	; 0x34
   18074:	str	r3, [sp, #48]	; 0x30
   18078:	ldr	r3, [r4]
   1807c:	mov	r2, r0
   18080:	mov	r0, r5
   18084:	add	sp, sp, #32
   18088:	pop	{r4, r5, r6, lr}
   1808c:	b	114f8 <__fprintf_chk@plt>
   18090:	mov	r2, #5
   18094:	ldr	r1, [pc, #444]	; 18258 <__assert_fail@plt+0x6c1c>
   18098:	mov	r0, #0
   1809c:	bl	11330 <dcgettext@plt>
   180a0:	ldr	r1, [r4, #12]
   180a4:	ldr	r2, [r4, #8]
   180a8:	ldr	r3, [r4, #4]
   180ac:	str	r1, [sp, #8]
   180b0:	str	r2, [sp, #4]
   180b4:	str	r3, [sp]
   180b8:	mov	r1, #1
   180bc:	ldr	r3, [r4]
   180c0:	mov	r2, r0
   180c4:	mov	r0, r5
   180c8:	bl	114f8 <__fprintf_chk@plt>
   180cc:	b	17fec <__assert_fail@plt+0x69b0>
   180d0:	mov	r2, #5
   180d4:	ldr	r1, [pc, #384]	; 1825c <__assert_fail@plt+0x6c20>
   180d8:	mov	r0, #0
   180dc:	bl	11330 <dcgettext@plt>
   180e0:	ldr	r3, [r4, #16]
   180e4:	ldr	r1, [r4, #12]
   180e8:	ldr	r2, [r4, #8]
   180ec:	str	r3, [sp, #12]
   180f0:	ldr	r3, [r4, #4]
   180f4:	str	r1, [sp, #8]
   180f8:	str	r2, [sp, #4]
   180fc:	str	r3, [sp]
   18100:	mov	r1, #1
   18104:	ldr	r3, [r4]
   18108:	mov	r2, r0
   1810c:	mov	r0, r5
   18110:	bl	114f8 <__fprintf_chk@plt>
   18114:	b	17fec <__assert_fail@plt+0x69b0>
   18118:	mov	r2, #5
   1811c:	ldr	r1, [pc, #316]	; 18260 <__assert_fail@plt+0x6c24>
   18120:	mov	r0, #0
   18124:	bl	11330 <dcgettext@plt>
   18128:	ldr	r2, [r4, #20]
   1812c:	ldr	r3, [r4, #16]
   18130:	ldr	r1, [r4, #12]
   18134:	str	r2, [sp, #16]
   18138:	ldr	r2, [r4, #8]
   1813c:	str	r3, [sp, #12]
   18140:	ldr	r3, [r4, #4]
   18144:	str	r1, [sp, #8]
   18148:	str	r2, [sp, #4]
   1814c:	str	r3, [sp]
   18150:	mov	r1, #1
   18154:	ldr	r3, [r4]
   18158:	mov	r2, r0
   1815c:	mov	r0, r5
   18160:	bl	114f8 <__fprintf_chk@plt>
   18164:	b	17fec <__assert_fail@plt+0x69b0>
   18168:	mov	r2, #5
   1816c:	ldr	r1, [pc, #240]	; 18264 <__assert_fail@plt+0x6c28>
   18170:	mov	r0, #0
   18174:	bl	11330 <dcgettext@plt>
   18178:	ldr	r1, [r4, #24]
   1817c:	ldr	r2, [r4, #20]
   18180:	ldr	r3, [r4, #16]
   18184:	str	r1, [sp, #20]
   18188:	ldr	r1, [r4, #12]
   1818c:	str	r2, [sp, #16]
   18190:	ldr	r2, [r4, #8]
   18194:	str	r3, [sp, #12]
   18198:	ldr	r3, [r4, #4]
   1819c:	str	r1, [sp, #8]
   181a0:	str	r2, [sp, #4]
   181a4:	str	r3, [sp]
   181a8:	mov	r1, #1
   181ac:	ldr	r3, [r4]
   181b0:	mov	r2, r0
   181b4:	mov	r0, r5
   181b8:	bl	114f8 <__fprintf_chk@plt>
   181bc:	b	17fec <__assert_fail@plt+0x69b0>
   181c0:	mov	r2, #5
   181c4:	ldr	r1, [pc, #156]	; 18268 <__assert_fail@plt+0x6c2c>
   181c8:	mov	r0, #0
   181cc:	bl	11330 <dcgettext@plt>
   181d0:	ldr	r3, [r4, #28]
   181d4:	ldr	r1, [r4, #24]
   181d8:	ldr	r2, [r4, #20]
   181dc:	str	r3, [sp, #24]
   181e0:	ldr	r3, [r4, #16]
   181e4:	str	r1, [sp, #20]
   181e8:	ldr	r1, [r4, #12]
   181ec:	str	r2, [sp, #16]
   181f0:	ldr	r2, [r4, #8]
   181f4:	str	r3, [sp, #12]
   181f8:	ldr	r3, [r4, #4]
   181fc:	str	r1, [sp, #8]
   18200:	str	r2, [sp, #4]
   18204:	str	r3, [sp]
   18208:	mov	r1, #1
   1820c:	ldr	r3, [r4]
   18210:	mov	r2, r0
   18214:	mov	r0, r5
   18218:	bl	114f8 <__fprintf_chk@plt>
   1821c:	b	17fec <__assert_fail@plt+0x69b0>
   18220:	mov	r2, #5
   18224:	ldr	r1, [pc, #64]	; 1826c <__assert_fail@plt+0x6c30>
   18228:	b	17f90 <__assert_fail@plt+0x6954>
   1822c:	bl	11600 <abort@plt>
   18230:	andeq	fp, r1, r0, lsr #8
   18234:	andeq	fp, r1, r4, lsr r4
   18238:	andeq	r0, r0, r2, ror #15
   1823c:	andeq	fp, r1, r8, lsl #14
   18240:	andeq	fp, r1, r8, lsr r4
   18244:	andeq	fp, r1, ip, lsr #8
   18248:	andeq	fp, r1, r0, lsl r6
   1824c:	andeq	fp, r1, r4, lsl #10
   18250:	andeq	fp, r1, r4, lsl r5
   18254:	andeq	fp, r1, ip, lsr #10
   18258:	andeq	fp, r1, r8, asr #10
   1825c:	andeq	fp, r1, r8, ror #10
   18260:	andeq	fp, r1, ip, lsl #11
   18264:			; <UNDEFINED> instruction: 0x0001b5b4
   18268:	andeq	fp, r1, r0, ror #11
   1826c:	andeq	fp, r1, r4, asr #12
   18270:	push	{r4, r5, lr}
   18274:	sub	sp, sp, #12
   18278:	ldr	r5, [sp, #24]
   1827c:	ldr	ip, [r5]
   18280:	cmp	ip, #0
   18284:	beq	182a0 <__assert_fail@plt+0x6c64>
   18288:	mov	lr, r5
   1828c:	mov	ip, #0
   18290:	ldr	r4, [lr, #4]!
   18294:	add	ip, ip, #1
   18298:	cmp	r4, #0
   1829c:	bne	18290 <__assert_fail@plt+0x6c54>
   182a0:	stm	sp, {r5, ip}
   182a4:	bl	17ec8 <__assert_fail@plt+0x688c>
   182a8:	add	sp, sp, #12
   182ac:	pop	{r4, r5, pc}
   182b0:	push	{r4, r5, r6, lr}
   182b4:	sub	sp, sp, #56	; 0x38
   182b8:	ldr	r6, [pc, #88]	; 18318 <__assert_fail@plt+0x6cdc>
   182bc:	ldr	r5, [sp, #72]	; 0x48
   182c0:	add	r4, sp, #8
   182c4:	ldr	ip, [r6]
   182c8:	str	ip, [sp, #52]	; 0x34
   182cc:	mov	ip, #0
   182d0:	ldr	lr, [r5], #4
   182d4:	cmp	lr, #0
   182d8:	str	lr, [r4, #4]!
   182dc:	beq	182ec <__assert_fail@plt+0x6cb0>
   182e0:	add	ip, ip, #1
   182e4:	cmp	ip, #10
   182e8:	bne	182d0 <__assert_fail@plt+0x6c94>
   182ec:	add	lr, sp, #12
   182f0:	str	ip, [sp, #4]
   182f4:	str	lr, [sp]
   182f8:	bl	17ec8 <__assert_fail@plt+0x688c>
   182fc:	ldr	r2, [sp, #52]	; 0x34
   18300:	ldr	r3, [r6]
   18304:	cmp	r2, r3
   18308:	bne	18314 <__assert_fail@plt+0x6cd8>
   1830c:	add	sp, sp, #56	; 0x38
   18310:	pop	{r4, r5, r6, pc}
   18314:	bl	1133c <__stack_chk_fail@plt>
   18318:	andeq	fp, r2, r8, lsl #30
   1831c:	push	{r3}		; (str r3, [sp, #-4]!)
   18320:	mov	ip, #0
   18324:	push	{r4, r5, r6, lr}
   18328:	sub	sp, sp, #60	; 0x3c
   1832c:	ldr	r6, [pc, #100]	; 18398 <__assert_fail@plt+0x6d5c>
   18330:	add	r5, sp, #8
   18334:	add	r4, sp, #80	; 0x50
   18338:	ldr	r3, [r6]
   1833c:	str	r4, [sp, #8]
   18340:	str	r3, [sp, #52]	; 0x34
   18344:	ldr	r3, [sp, #76]	; 0x4c
   18348:	ldr	lr, [r4], #4
   1834c:	cmp	lr, #0
   18350:	str	lr, [r5, #4]!
   18354:	beq	18364 <__assert_fail@plt+0x6d28>
   18358:	add	ip, ip, #1
   1835c:	cmp	ip, #10
   18360:	bne	18348 <__assert_fail@plt+0x6d0c>
   18364:	add	lr, sp, #12
   18368:	str	ip, [sp, #4]
   1836c:	str	lr, [sp]
   18370:	bl	17ec8 <__assert_fail@plt+0x688c>
   18374:	ldr	r2, [sp, #52]	; 0x34
   18378:	ldr	r3, [r6]
   1837c:	cmp	r2, r3
   18380:	bne	18394 <__assert_fail@plt+0x6d58>
   18384:	add	sp, sp, #60	; 0x3c
   18388:	pop	{r4, r5, r6, lr}
   1838c:	add	sp, sp, #4
   18390:	bx	lr
   18394:	bl	1133c <__stack_chk_fail@plt>
   18398:	andeq	fp, r2, r8, lsl #30
   1839c:	push	{r4, lr}
   183a0:	mov	r2, #5
   183a4:	ldr	r1, [pc, #88]	; 18404 <__assert_fail@plt+0x6dc8>
   183a8:	mov	r0, #0
   183ac:	bl	11330 <dcgettext@plt>
   183b0:	ldr	r2, [pc, #80]	; 18408 <__assert_fail@plt+0x6dcc>
   183b4:	mov	r1, r0
   183b8:	mov	r0, #1
   183bc:	bl	114e0 <__printf_chk@plt>
   183c0:	mov	r2, #5
   183c4:	ldr	r1, [pc, #64]	; 1840c <__assert_fail@plt+0x6dd0>
   183c8:	mov	r0, #0
   183cc:	bl	11330 <dcgettext@plt>
   183d0:	ldr	r3, [pc, #56]	; 18410 <__assert_fail@plt+0x6dd4>
   183d4:	ldr	r2, [pc, #56]	; 18414 <__assert_fail@plt+0x6dd8>
   183d8:	mov	r1, r0
   183dc:	mov	r0, #1
   183e0:	bl	114e0 <__printf_chk@plt>
   183e4:	ldr	r1, [pc, #44]	; 18418 <__assert_fail@plt+0x6ddc>
   183e8:	mov	r2, #5
   183ec:	mov	r0, #0
   183f0:	bl	11330 <dcgettext@plt>
   183f4:	ldr	r3, [pc, #32]	; 1841c <__assert_fail@plt+0x6de0>
   183f8:	pop	{r4, lr}
   183fc:	ldr	r1, [r3]
   18400:	b	11270 <fputs_unlocked@plt>
   18404:	andeq	fp, r1, r0, lsl #13
   18408:	muleq	r1, r8, r6
   1840c:			; <UNDEFINED> instruction: 0x0001b6b0
   18410:	muleq	r1, r0, sp
   18414:			; <UNDEFINED> instruction: 0x0001adb8
   18418:	andeq	fp, r1, r4, asr #13
   1841c:	ldrdeq	ip, [r2], -r4
   18420:	push	{r4, lr}
   18424:	mov	r4, r0
   18428:	bl	113fc <malloc@plt>
   1842c:	adds	r4, r4, #0
   18430:	movne	r4, #1
   18434:	cmp	r0, #0
   18438:	movne	r4, #0
   1843c:	cmp	r4, #0
   18440:	popeq	{r4, pc}
   18444:	bl	18668 <__assert_fail@plt+0x702c>
   18448:	push	{r4, r5, r6, lr}
   1844c:	umull	r4, r5, r0, r1
   18450:	adds	r3, r5, #0
   18454:	movne	r3, #1
   18458:	cmp	r4, #0
   1845c:	blt	18474 <__assert_fail@plt+0x6e38>
   18460:	cmp	r3, #0
   18464:	bne	18474 <__assert_fail@plt+0x6e38>
   18468:	mul	r0, r1, r0
   1846c:	pop	{r4, r5, r6, lr}
   18470:	b	18420 <__assert_fail@plt+0x6de4>
   18474:	bl	18668 <__assert_fail@plt+0x702c>
   18478:	b	18420 <__assert_fail@plt+0x6de4>
   1847c:	adds	r3, r0, #0
   18480:	movne	r3, #1
   18484:	cmp	r1, #0
   18488:	movne	r3, #0
   1848c:	cmp	r3, #0
   18490:	push	{r4, lr}
   18494:	bne	184bc <__assert_fail@plt+0x6e80>
   18498:	mov	r4, r1
   1849c:	bl	11348 <realloc@plt>
   184a0:	adds	r4, r4, #0
   184a4:	movne	r4, #1
   184a8:	cmp	r0, #0
   184ac:	movne	r4, #0
   184b0:	cmp	r4, #0
   184b4:	popeq	{r4, pc}
   184b8:	bl	18668 <__assert_fail@plt+0x702c>
   184bc:	bl	112f4 <free@plt>
   184c0:	mov	r0, #0
   184c4:	pop	{r4, pc}
   184c8:	push	{r4, r5, r6, lr}
   184cc:	umull	r4, r5, r1, r2
   184d0:	adds	r3, r5, #0
   184d4:	movne	r3, #1
   184d8:	cmp	r4, #0
   184dc:	blt	184f4 <__assert_fail@plt+0x6eb8>
   184e0:	cmp	r3, #0
   184e4:	bne	184f4 <__assert_fail@plt+0x6eb8>
   184e8:	mul	r1, r2, r1
   184ec:	pop	{r4, r5, r6, lr}
   184f0:	b	1847c <__assert_fail@plt+0x6e40>
   184f4:	bl	18668 <__assert_fail@plt+0x702c>
   184f8:	push	{r4, r5, r6, r7, r8, lr}
   184fc:	subs	r7, r0, #0
   18500:	mov	r6, r1
   18504:	mov	r5, r2
   18508:	ldr	r4, [r1]
   1850c:	beq	18540 <__assert_fail@plt+0x6f04>
   18510:	mov	r1, r2
   18514:	ldr	r0, [pc, #104]	; 18584 <__assert_fail@plt+0x6f48>
   18518:	bl	19bc0 <__assert_fail@plt+0x8584>
   1851c:	cmp	r0, r4
   18520:	bls	18564 <__assert_fail@plt+0x6f28>
   18524:	add	r3, r4, #1
   18528:	add	r4, r3, r4, lsr #1
   1852c:	str	r4, [r6]
   18530:	mul	r1, r5, r4
   18534:	mov	r0, r7
   18538:	pop	{r4, r5, r6, r7, r8, lr}
   1853c:	b	1847c <__assert_fail@plt+0x6e40>
   18540:	cmp	r4, #0
   18544:	beq	18568 <__assert_fail@plt+0x6f2c>
   18548:	umull	r0, r1, r4, r5
   1854c:	adds	r3, r1, #0
   18550:	movne	r3, #1
   18554:	cmp	r0, #0
   18558:	blt	18564 <__assert_fail@plt+0x6f28>
   1855c:	cmp	r3, #0
   18560:	beq	1852c <__assert_fail@plt+0x6ef0>
   18564:	bl	18668 <__assert_fail@plt+0x702c>
   18568:	mov	r1, r2
   1856c:	mov	r0, #64	; 0x40
   18570:	bl	19bc0 <__assert_fail@plt+0x8584>
   18574:	cmp	r5, #64	; 0x40
   18578:	movls	r4, r0
   1857c:	addhi	r4, r0, #1
   18580:	b	18548 <__assert_fail@plt+0x6f0c>
   18584:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   18588:	cmp	r0, #0
   1858c:	ldr	r3, [r1]
   18590:	beq	185b4 <__assert_fail@plt+0x6f78>
   18594:	ldr	r2, [pc, #60]	; 185d8 <__assert_fail@plt+0x6f9c>
   18598:	cmp	r3, r2
   1859c:	bhi	185d0 <__assert_fail@plt+0x6f94>
   185a0:	add	r2, r3, #1
   185a4:	add	r3, r2, r3, lsr #1
   185a8:	str	r3, [r1]
   185ac:	mov	r1, r3
   185b0:	b	1847c <__assert_fail@plt+0x6e40>
   185b4:	cmp	r3, #0
   185b8:	bne	185cc <__assert_fail@plt+0x6f90>
   185bc:	mov	r3, #64	; 0x40
   185c0:	str	r3, [r1]
   185c4:	mov	r1, r3
   185c8:	b	1847c <__assert_fail@plt+0x6e40>
   185cc:	bge	185a8 <__assert_fail@plt+0x6f6c>
   185d0:	push	{r4, lr}
   185d4:	bl	18668 <__assert_fail@plt+0x702c>
   185d8:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   185dc:	push	{r4, lr}
   185e0:	mov	r4, r0
   185e4:	bl	18420 <__assert_fail@plt+0x6de4>
   185e8:	mov	r2, r4
   185ec:	mov	r1, #0
   185f0:	pop	{r4, lr}
   185f4:	b	114c8 <memset@plt>
   185f8:	push	{r4, r5, r6, lr}
   185fc:	umull	r4, r5, r0, r1
   18600:	adds	r3, r5, #0
   18604:	movne	r3, #1
   18608:	cmp	r4, #0
   1860c:	blt	18624 <__assert_fail@plt+0x6fe8>
   18610:	cmp	r3, #0
   18614:	bne	18624 <__assert_fail@plt+0x6fe8>
   18618:	bl	11264 <calloc@plt>
   1861c:	cmp	r0, #0
   18620:	popne	{r4, r5, r6, pc}
   18624:	bl	18668 <__assert_fail@plt+0x702c>
   18628:	push	{r4, r5, r6, lr}
   1862c:	mov	r4, r1
   18630:	mov	r5, r0
   18634:	mov	r0, r1
   18638:	bl	18420 <__assert_fail@plt+0x6de4>
   1863c:	mov	r2, r4
   18640:	mov	r1, r5
   18644:	pop	{r4, r5, r6, lr}
   18648:	b	1130c <memcpy@plt>
   1864c:	push	{r4, lr}
   18650:	mov	r4, r0
   18654:	bl	11480 <strlen@plt>
   18658:	add	r1, r0, #1
   1865c:	mov	r0, r4
   18660:	pop	{r4, lr}
   18664:	b	18628 <__assert_fail@plt+0x6fec>
   18668:	ldr	r3, [pc, #44]	; 1869c <__assert_fail@plt+0x7060>
   1866c:	push	{r4, lr}
   18670:	mov	r2, #5
   18674:	ldr	r1, [pc, #36]	; 186a0 <__assert_fail@plt+0x7064>
   18678:	mov	r0, #0
   1867c:	ldr	r4, [r3]
   18680:	bl	11330 <dcgettext@plt>
   18684:	ldr	r2, [pc, #24]	; 186a4 <__assert_fail@plt+0x7068>
   18688:	mov	r1, #0
   1868c:	mov	r3, r0
   18690:	mov	r0, r4
   18694:	bl	113cc <error@plt>
   18698:	bl	11600 <abort@plt>
   1869c:	andeq	ip, r2, r0, ror r1
   186a0:	andeq	fp, r1, r8, lsr r7
   186a4:	andeq	fp, r1, r0, ror #3
   186a8:	mov	r1, #0
   186ac:	push	{r4, lr}
   186b0:	mov	r0, r1
   186b4:	bl	1145c <getcwd@plt>
   186b8:	subs	r4, r0, #0
   186bc:	beq	186c8 <__assert_fail@plt+0x708c>
   186c0:	mov	r0, r4
   186c4:	pop	{r4, pc}
   186c8:	bl	1148c <__errno_location@plt>
   186cc:	ldr	r3, [r0]
   186d0:	cmp	r3, #12
   186d4:	bne	186c0 <__assert_fail@plt+0x7084>
   186d8:	bl	18668 <__assert_fail@plt+0x702c>
   186dc:	push	{r4, r5, lr}
   186e0:	sub	sp, sp, #20
   186e4:	ldr	r5, [pc, #128]	; 1876c <__assert_fail@plt+0x7130>
   186e8:	ldr	r3, [pc, #128]	; 18770 <__assert_fail@plt+0x7134>
   186ec:	mov	r4, #0
   186f0:	ldr	ip, [r5]
   186f4:	ldr	r3, [r3]
   186f8:	mov	r2, #10
   186fc:	add	r1, sp, #8
   18700:	add	r0, sp, #4
   18704:	str	ip, [sp, #12]
   18708:	str	r4, [sp, #4]
   1870c:	str	r4, [sp, #8]
   18710:	bl	11288 <__getdelim@plt>
   18714:	subs	r3, r0, #0
   18718:	ble	18744 <__assert_fail@plt+0x7108>
   1871c:	ldr	r0, [sp, #4]
   18720:	sub	r3, r3, #1
   18724:	ldrb	r2, [r0, r3]
   18728:	cmp	r2, #10
   1872c:	strbeq	r4, [r0, r3]
   18730:	ldreq	r0, [sp, #4]
   18734:	bl	11534 <rpmatch@plt>
   18738:	cmp	r0, #0
   1873c:	movle	r4, #0
   18740:	movgt	r4, #1
   18744:	ldr	r0, [sp, #4]
   18748:	bl	112f4 <free@plt>
   1874c:	ldr	r2, [sp, #12]
   18750:	ldr	r3, [r5]
   18754:	mov	r0, r4
   18758:	cmp	r2, r3
   1875c:	bne	18768 <__assert_fail@plt+0x712c>
   18760:	add	sp, sp, #20
   18764:	pop	{r4, r5, pc}
   18768:	bl	1133c <__stack_chk_fail@plt>
   1876c:	andeq	fp, r2, r8, lsl #30
   18770:	ldrdeq	ip, [r2], -r0
   18774:	push	{r1, r2, r3}
   18778:	push	{r4, r5, r6, r7, r8, lr}
   1877c:	sub	sp, sp, #12
   18780:	ldr	r4, [pc, #300]	; 188b4 <__assert_fail@plt+0x7278>
   18784:	ldr	r3, [pc, #300]	; 188b8 <__assert_fail@plt+0x727c>
   18788:	ldr	r1, [sp, #36]	; 0x24
   1878c:	ldr	r2, [r4]
   18790:	cmp	r1, r3
   18794:	add	r3, sp, #40	; 0x28
   18798:	str	r2, [sp, #4]
   1879c:	str	r3, [sp]
   187a0:	bne	1886c <__assert_fail@plt+0x7230>
   187a4:	ldr	r6, [pc, #272]	; 188bc <__assert_fail@plt+0x7280>
   187a8:	add	r3, sp, #44	; 0x2c
   187ac:	str	r3, [sp]
   187b0:	ldr	r3, [r6]
   187b4:	ldr	r7, [sp, #40]	; 0x28
   187b8:	cmp	r3, #0
   187bc:	blt	18800 <__assert_fail@plt+0x71c4>
   187c0:	mov	r2, r7
   187c4:	mov	r8, r0
   187c8:	bl	11528 <fcntl64@plt>
   187cc:	subs	r5, r0, #0
   187d0:	blt	1887c <__assert_fail@plt+0x7240>
   187d4:	mov	r3, #1
   187d8:	str	r3, [r6]
   187dc:	ldr	r2, [sp, #4]
   187e0:	ldr	r3, [r4]
   187e4:	mov	r0, r5
   187e8:	cmp	r2, r3
   187ec:	bne	188b0 <__assert_fail@plt+0x7274>
   187f0:	add	sp, sp, #12
   187f4:	pop	{r4, r5, r6, r7, r8, lr}
   187f8:	add	sp, sp, #12
   187fc:	bx	lr
   18800:	mov	r2, r7
   18804:	mov	r1, #0
   18808:	bl	18774 <__assert_fail@plt+0x7138>
   1880c:	subs	r5, r0, #0
   18810:	blt	187dc <__assert_fail@plt+0x71a0>
   18814:	ldr	r3, [r6]
   18818:	cmn	r3, #1
   1881c:	bne	187dc <__assert_fail@plt+0x71a0>
   18820:	mov	r1, #1
   18824:	mov	r0, r5
   18828:	bl	11528 <fcntl64@plt>
   1882c:	subs	r2, r0, #0
   18830:	blt	1884c <__assert_fail@plt+0x7210>
   18834:	orr	r2, r2, #1
   18838:	mov	r1, #2
   1883c:	mov	r0, r5
   18840:	bl	11528 <fcntl64@plt>
   18844:	cmn	r0, #1
   18848:	bne	187dc <__assert_fail@plt+0x71a0>
   1884c:	bl	1148c <__errno_location@plt>
   18850:	mov	r6, r0
   18854:	mov	r0, r5
   18858:	ldr	r7, [r6]
   1885c:	mvn	r5, #0
   18860:	bl	1160c <close@plt>
   18864:	str	r7, [r6]
   18868:	b	187dc <__assert_fail@plt+0x71a0>
   1886c:	ldr	r2, [sp, #40]	; 0x28
   18870:	bl	11528 <fcntl64@plt>
   18874:	mov	r5, r0
   18878:	b	187dc <__assert_fail@plt+0x71a0>
   1887c:	bl	1148c <__errno_location@plt>
   18880:	ldr	r3, [r0]
   18884:	cmp	r3, #22
   18888:	bne	187d4 <__assert_fail@plt+0x7198>
   1888c:	mov	r2, r7
   18890:	mov	r0, r8
   18894:	mov	r1, #0
   18898:	bl	18774 <__assert_fail@plt+0x7138>
   1889c:	subs	r5, r0, #0
   188a0:	mvnge	r3, #0
   188a4:	strge	r3, [r6]
   188a8:	bge	18820 <__assert_fail@plt+0x71e4>
   188ac:	b	187dc <__assert_fail@plt+0x71a0>
   188b0:	bl	1133c <__stack_chk_fail@plt>
   188b4:	andeq	fp, r2, r8, lsl #30
   188b8:	andeq	r0, r0, r6, lsl #8
   188bc:	andeq	ip, r2, r8, lsr r3
   188c0:	push	{r4, lr}
   188c4:	subs	r4, r0, #0
   188c8:	sub	sp, sp, #8
   188cc:	beq	188e8 <__assert_fail@plt+0x72ac>
   188d0:	bl	11414 <__freading@plt>
   188d4:	cmp	r0, #0
   188d8:	beq	188e8 <__assert_fail@plt+0x72ac>
   188dc:	ldr	r3, [r4]
   188e0:	tst	r3, #256	; 0x100
   188e4:	bne	188f8 <__assert_fail@plt+0x72bc>
   188e8:	mov	r0, r4
   188ec:	add	sp, sp, #8
   188f0:	pop	{r4, lr}
   188f4:	b	112c4 <fflush@plt>
   188f8:	mov	r3, #1
   188fc:	str	r3, [sp]
   18900:	mov	r2, #0
   18904:	mov	r3, #0
   18908:	mov	r0, r4
   1890c:	bl	1895c <__assert_fail@plt+0x7320>
   18910:	mov	r0, r4
   18914:	add	sp, sp, #8
   18918:	pop	{r4, lr}
   1891c:	b	112c4 <fflush@plt>
   18920:	ldr	r2, [r0, #20]
   18924:	ldr	r3, [r0, #16]
   18928:	cmp	r2, r3
   1892c:	bhi	18954 <__assert_fail@plt+0x7318>
   18930:	ldm	r0, {r1, r2, r3}
   18934:	tst	r1, #256	; 0x100
   18938:	sub	r3, r3, r2
   1893c:	ldrne	r1, [r0, #36]	; 0x24
   18940:	ldrne	r2, [r0, #44]	; 0x2c
   18944:	subne	r2, r2, r1
   18948:	addne	r3, r3, r2
   1894c:	mov	r0, r3
   18950:	bx	lr
   18954:	mov	r0, #0
   18958:	bx	lr
   1895c:	push	{r4, r5, r6, r7, r8, lr}
   18960:	sub	sp, sp, #8
   18964:	ldmib	r0, {ip, lr}
   18968:	mov	r4, r0
   1896c:	ldr	r5, [sp, #32]
   18970:	cmp	lr, ip
   18974:	beq	1898c <__assert_fail@plt+0x7350>
   18978:	str	r5, [sp, #32]
   1897c:	mov	r0, r4
   18980:	add	sp, sp, #8
   18984:	pop	{r4, r5, r6, r7, r8, lr}
   18988:	b	1151c <fseeko64@plt>
   1898c:	ldr	lr, [r0, #20]
   18990:	ldr	ip, [r0, #16]
   18994:	cmp	lr, ip
   18998:	bne	18978 <__assert_fail@plt+0x733c>
   1899c:	ldr	r8, [r0, #36]	; 0x24
   189a0:	cmp	r8, #0
   189a4:	bne	18978 <__assert_fail@plt+0x733c>
   189a8:	mov	r6, r2
   189ac:	mov	r7, r3
   189b0:	bl	114ec <fileno@plt>
   189b4:	mov	r2, r6
   189b8:	mov	r3, r7
   189bc:	str	r5, [sp]
   189c0:	bl	11390 <lseek64@plt>
   189c4:	mvn	r3, #0
   189c8:	mvn	r2, #0
   189cc:	cmp	r1, r3
   189d0:	cmpeq	r0, r2
   189d4:	beq	189f4 <__assert_fail@plt+0x73b8>
   189d8:	ldr	r3, [r4]
   189dc:	strd	r0, [r4, #80]	; 0x50
   189e0:	mov	r0, r8
   189e4:	bic	r3, r3, #16
   189e8:	str	r3, [r4]
   189ec:	add	sp, sp, #8
   189f0:	pop	{r4, r5, r6, r7, r8, pc}
   189f4:	mvn	r0, #0
   189f8:	b	189ec <__assert_fail@plt+0x73b0>
   189fc:	push	{r4, r5, r6, r7, r8, lr}
   18a00:	subs	r7, r0, #0
   18a04:	ldr	r5, [pc, #108]	; 18a78 <__assert_fail@plt+0x743c>
   18a08:	sub	sp, sp, #8
   18a0c:	mov	r8, r1
   18a10:	ldr	r1, [r5]
   18a14:	moveq	r7, sp
   18a18:	str	r1, [sp, #4]
   18a1c:	mov	r0, r7
   18a20:	mov	r1, r8
   18a24:	mov	r6, r2
   18a28:	bl	113c0 <mbrtowc@plt>
   18a2c:	cmp	r6, #0
   18a30:	cmnne	r0, #3
   18a34:	mov	r4, r0
   18a38:	bhi	18a58 <__assert_fail@plt+0x741c>
   18a3c:	ldr	r2, [sp, #4]
   18a40:	ldr	r3, [r5]
   18a44:	mov	r0, r4
   18a48:	cmp	r2, r3
   18a4c:	bne	18a74 <__assert_fail@plt+0x7438>
   18a50:	add	sp, sp, #8
   18a54:	pop	{r4, r5, r6, r7, r8, pc}
   18a58:	mov	r0, #0
   18a5c:	bl	18ec8 <__assert_fail@plt+0x788c>
   18a60:	cmp	r0, #0
   18a64:	moveq	r4, #1
   18a68:	ldrbeq	r3, [r8]
   18a6c:	streq	r3, [r7]
   18a70:	b	18a3c <__assert_fail@plt+0x7400>
   18a74:	bl	1133c <__stack_chk_fail@plt>
   18a78:	andeq	fp, r2, r8, lsl #30
   18a7c:	cmp	r1, #1024	; 0x400
   18a80:	push	{r4, r5, r6, r7, r8, lr}
   18a84:	mov	r7, r0
   18a88:	ldrhi	r4, [pc, #156]	; 18b2c <__assert_fail@plt+0x74f0>
   18a8c:	addls	r4, r1, #1
   18a90:	mov	r0, r4
   18a94:	bl	113fc <malloc@plt>
   18a98:	mov	r2, r4
   18a9c:	subs	r5, r0, #0
   18aa0:	mov	r1, r5
   18aa4:	mov	r0, r7
   18aa8:	beq	18af0 <__assert_fail@plt+0x74b4>
   18aac:	bl	11378 <readlink@plt>
   18ab0:	subs	r6, r0, #0
   18ab4:	blt	18af8 <__assert_fail@plt+0x74bc>
   18ab8:	cmp	r4, r6
   18abc:	mov	r0, r5
   18ac0:	bhi	18b1c <__assert_fail@plt+0x74e0>
   18ac4:	bl	112f4 <free@plt>
   18ac8:	cmn	r4, #-1073741823	; 0xc0000001
   18acc:	lslls	r4, r4, #1
   18ad0:	bls	18a90 <__assert_fail@plt+0x7454>
   18ad4:	cmn	r4, #-2147483646	; 0x80000002
   18ad8:	mvn	r4, #-2147483648	; 0x80000000
   18adc:	bls	18a90 <__assert_fail@plt+0x7454>
   18ae0:	bl	1148c <__errno_location@plt>
   18ae4:	mov	r5, #0
   18ae8:	mov	r3, #12
   18aec:	str	r3, [r0]
   18af0:	mov	r0, r5
   18af4:	pop	{r4, r5, r6, r7, r8, pc}
   18af8:	bl	1148c <__errno_location@plt>
   18afc:	ldr	r3, [r0]
   18b00:	cmp	r3, #34	; 0x22
   18b04:	beq	18ab8 <__assert_fail@plt+0x747c>
   18b08:	mov	r0, r5
   18b0c:	mov	r5, #0
   18b10:	bl	112f4 <free@plt>
   18b14:	mov	r0, r5
   18b18:	pop	{r4, r5, r6, r7, r8, pc}
   18b1c:	mov	r3, #0
   18b20:	strb	r3, [r5, r6]
   18b24:	mov	r0, r5
   18b28:	pop	{r4, r5, r6, r7, r8, pc}
   18b2c:	andeq	r0, r0, r1, lsl #8
   18b30:	mov	r0, #1
   18b34:	b	12818 <__assert_fail@plt+0x11dc>
   18b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b3c:	mov	r5, r1
   18b40:	sub	sp, sp, #12
   18b44:	mov	r4, r2
   18b48:	str	r2, [sp]
   18b4c:	mov	r7, r3
   18b50:	mov	sl, r0
   18b54:	bl	11480 <strlen@plt>
   18b58:	ldr	fp, [r5]
   18b5c:	cmp	fp, #0
   18b60:	beq	18c24 <__assert_fail@plt+0x75e8>
   18b64:	mov	r6, #0
   18b68:	mov	r8, r0
   18b6c:	str	r6, [sp, #4]
   18b70:	mvn	r9, #0
   18b74:	b	18ba0 <__assert_fail@plt+0x7564>
   18b78:	bl	11324 <memcmp@plt>
   18b7c:	ldr	r3, [sp, #4]
   18b80:	cmp	r0, #0
   18b84:	movne	r3, #1
   18b88:	str	r3, [sp, #4]
   18b8c:	ldr	fp, [r5, #4]!
   18b90:	add	r6, r6, #1
   18b94:	cmp	fp, #0
   18b98:	add	r4, r4, r7
   18b9c:	beq	18bfc <__assert_fail@plt+0x75c0>
   18ba0:	mov	r2, r8
   18ba4:	mov	r1, sl
   18ba8:	mov	r0, fp
   18bac:	bl	115f4 <strncmp@plt>
   18bb0:	cmp	r0, #0
   18bb4:	mov	r0, fp
   18bb8:	bne	18b8c <__assert_fail@plt+0x7550>
   18bbc:	bl	11480 <strlen@plt>
   18bc0:	ldr	r3, [sp]
   18bc4:	mov	r2, r7
   18bc8:	mov	r1, r4
   18bcc:	cmp	r0, r8
   18bd0:	mla	r0, r7, r9, r3
   18bd4:	beq	18c14 <__assert_fail@plt+0x75d8>
   18bd8:	cmn	r9, #1
   18bdc:	moveq	r9, r6
   18be0:	beq	18b8c <__assert_fail@plt+0x7550>
   18be4:	ldr	r3, [sp]
   18be8:	cmp	r3, #0
   18bec:	bne	18b78 <__assert_fail@plt+0x753c>
   18bf0:	mov	r3, #1
   18bf4:	str	r3, [sp, #4]
   18bf8:	b	18b8c <__assert_fail@plt+0x7550>
   18bfc:	ldr	r3, [sp, #4]
   18c00:	cmp	r3, #0
   18c04:	mvnne	r9, #1
   18c08:	mov	r0, r9
   18c0c:	add	sp, sp, #12
   18c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c14:	mov	r9, r6
   18c18:	mov	r0, r9
   18c1c:	add	sp, sp, #12
   18c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c24:	mvn	r9, #0
   18c28:	b	18c08 <__assert_fail@plt+0x75cc>
   18c2c:	cmn	r2, #1
   18c30:	push	{r4, r5, r6, lr}
   18c34:	mov	r2, #5
   18c38:	sub	sp, sp, #8
   18c3c:	mov	r5, r1
   18c40:	mov	r6, r0
   18c44:	ldreq	r1, [pc, #76]	; 18c98 <__assert_fail@plt+0x765c>
   18c48:	ldrne	r1, [pc, #76]	; 18c9c <__assert_fail@plt+0x7660>
   18c4c:	mov	r0, #0
   18c50:	bl	11330 <dcgettext@plt>
   18c54:	mov	r2, r5
   18c58:	mov	r1, #8
   18c5c:	mov	r4, r0
   18c60:	mov	r0, #0
   18c64:	bl	174e4 <__assert_fail@plt+0x5ea8>
   18c68:	mov	r1, r6
   18c6c:	mov	r5, r0
   18c70:	mov	r0, #1
   18c74:	bl	17830 <__assert_fail@plt+0x61f4>
   18c78:	mov	r1, #0
   18c7c:	mov	r3, r5
   18c80:	mov	r2, r4
   18c84:	str	r0, [sp]
   18c88:	mov	r0, r1
   18c8c:	bl	113cc <error@plt>
   18c90:	add	sp, sp, #8
   18c94:	pop	{r4, r5, r6, pc}
   18c98:	andeq	fp, r1, ip, asr #14
   18c9c:	andeq	fp, r1, r8, ror #14
   18ca0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ca4:	mov	r6, r0
   18ca8:	ldr	sl, [pc, #224]	; 18d90 <__assert_fail@plt+0x7754>
   18cac:	mov	r4, r1
   18cb0:	mov	r7, r2
   18cb4:	ldr	r1, [pc, #216]	; 18d94 <__assert_fail@plt+0x7758>
   18cb8:	mov	r2, #5
   18cbc:	mov	r0, #0
   18cc0:	bl	11330 <dcgettext@plt>
   18cc4:	ldr	r1, [sl]
   18cc8:	bl	11270 <fputs_unlocked@plt>
   18ccc:	ldr	fp, [r6]
   18cd0:	cmp	fp, #0
   18cd4:	movne	r9, #0
   18cd8:	movne	r5, r9
   18cdc:	bne	18d18 <__assert_fail@plt+0x76dc>
   18ce0:	b	18d5c <__assert_fail@plt+0x7720>
   18ce4:	mov	r0, fp
   18ce8:	bl	17840 <__assert_fail@plt+0x6204>
   18cec:	ldr	r2, [pc, #164]	; 18d98 <__assert_fail@plt+0x775c>
   18cf0:	mov	r1, #1
   18cf4:	mov	r9, r4
   18cf8:	mov	r3, r0
   18cfc:	mov	r0, r8
   18d00:	bl	114f8 <__fprintf_chk@plt>
   18d04:	ldr	fp, [r6, #4]!
   18d08:	add	r5, r5, #1
   18d0c:	cmp	fp, #0
   18d10:	add	r4, r4, r7
   18d14:	beq	18d5c <__assert_fail@plt+0x7720>
   18d18:	cmp	r5, #0
   18d1c:	mov	r1, r4
   18d20:	mov	r2, r7
   18d24:	mov	r0, r9
   18d28:	ldr	r8, [sl]
   18d2c:	beq	18ce4 <__assert_fail@plt+0x76a8>
   18d30:	bl	11324 <memcmp@plt>
   18d34:	cmp	r0, #0
   18d38:	bne	18ce4 <__assert_fail@plt+0x76a8>
   18d3c:	mov	r0, fp
   18d40:	bl	17840 <__assert_fail@plt+0x6204>
   18d44:	ldr	r2, [pc, #80]	; 18d9c <__assert_fail@plt+0x7760>
   18d48:	mov	r1, #1
   18d4c:	mov	r3, r0
   18d50:	mov	r0, r8
   18d54:	bl	114f8 <__fprintf_chk@plt>
   18d58:	b	18d04 <__assert_fail@plt+0x76c8>
   18d5c:	ldr	r0, [sl]
   18d60:	ldr	r3, [r0, #20]
   18d64:	ldr	r2, [r0, #24]
   18d68:	cmp	r3, r2
   18d6c:	bcs	18d84 <__assert_fail@plt+0x7748>
   18d70:	add	r1, r3, #1
   18d74:	mov	r2, #10
   18d78:	str	r1, [r0, #20]
   18d7c:	strb	r2, [r3]
   18d80:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d84:	mov	r1, #10
   18d88:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d8c:	b	11540 <__overflow@plt>
   18d90:	andeq	ip, r2, r8, asr #3
   18d94:	andeq	fp, r1, r8, lsl #15
   18d98:	andeq	fp, r1, r0, lsr #15
   18d9c:	andeq	fp, r1, r8, lsr #15
   18da0:	push	{r4, r5, r6, r7, r8, lr}
   18da4:	mov	r6, r1
   18da8:	mov	r4, r2
   18dac:	mov	r5, r3
   18db0:	mov	r7, r0
   18db4:	ldr	r3, [sp, #24]
   18db8:	mov	r2, r5
   18dbc:	mov	r1, r4
   18dc0:	mov	r0, r6
   18dc4:	bl	18b38 <__assert_fail@plt+0x74fc>
   18dc8:	cmp	r0, #0
   18dcc:	popge	{r4, r5, r6, r7, r8, pc}
   18dd0:	mov	r2, r0
   18dd4:	mov	r1, r6
   18dd8:	mov	r0, r7
   18ddc:	bl	18c2c <__assert_fail@plt+0x75f0>
   18de0:	mov	r0, r4
   18de4:	ldr	r2, [sp, #24]
   18de8:	mov	r1, r5
   18dec:	bl	18ca0 <__assert_fail@plt+0x7664>
   18df0:	ldr	r3, [sp, #28]
   18df4:	blx	r3
   18df8:	mvn	r0, #0
   18dfc:	pop	{r4, r5, r6, r7, r8, pc}
   18e00:	push	{r4, r5, r6, r7, r8, lr}
   18e04:	ldr	r7, [r1]
   18e08:	cmp	r7, #0
   18e0c:	beq	18e4c <__assert_fail@plt+0x7810>
   18e10:	mov	r6, r3
   18e14:	mov	r8, r0
   18e18:	mov	r4, r2
   18e1c:	mov	r5, r1
   18e20:	b	18e30 <__assert_fail@plt+0x77f4>
   18e24:	ldr	r7, [r5, #4]!
   18e28:	cmp	r7, #0
   18e2c:	beq	18e4c <__assert_fail@plt+0x7810>
   18e30:	mov	r1, r4
   18e34:	mov	r2, r6
   18e38:	mov	r0, r8
   18e3c:	bl	11324 <memcmp@plt>
   18e40:	add	r4, r4, r6
   18e44:	cmp	r0, #0
   18e48:	bne	18e24 <__assert_fail@plt+0x77e8>
   18e4c:	mov	r0, r7
   18e50:	pop	{r4, r5, r6, r7, r8, pc}
   18e54:	push	{r4, r5, r6, lr}
   18e58:	mov	r4, r0
   18e5c:	bl	113b4 <__fpending@plt>
   18e60:	ldr	r5, [r4]
   18e64:	and	r5, r5, #32
   18e68:	mov	r6, r0
   18e6c:	mov	r0, r4
   18e70:	bl	19a7c <__assert_fail@plt+0x8440>
   18e74:	cmp	r5, #0
   18e78:	mov	r4, r0
   18e7c:	bne	18ea8 <__assert_fail@plt+0x786c>
   18e80:	cmp	r0, #0
   18e84:	beq	18ea0 <__assert_fail@plt+0x7864>
   18e88:	cmp	r6, #0
   18e8c:	bne	18ec0 <__assert_fail@plt+0x7884>
   18e90:	bl	1148c <__errno_location@plt>
   18e94:	ldr	r4, [r0]
   18e98:	subs	r4, r4, #9
   18e9c:	mvnne	r4, #0
   18ea0:	mov	r0, r4
   18ea4:	pop	{r4, r5, r6, pc}
   18ea8:	cmp	r0, #0
   18eac:	bne	18ec0 <__assert_fail@plt+0x7884>
   18eb0:	bl	1148c <__errno_location@plt>
   18eb4:	str	r4, [r0]
   18eb8:	mvn	r4, #0
   18ebc:	b	18ea0 <__assert_fail@plt+0x7864>
   18ec0:	mvn	r4, #0
   18ec4:	b	18ea0 <__assert_fail@plt+0x7864>
   18ec8:	push	{r4, lr}
   18ecc:	mov	r1, #0
   18ed0:	bl	1154c <setlocale@plt>
   18ed4:	subs	r4, r0, #0
   18ed8:	beq	18f04 <__assert_fail@plt+0x78c8>
   18edc:	ldr	r1, [pc, #40]	; 18f0c <__assert_fail@plt+0x78d0>
   18ee0:	bl	11294 <strcmp@plt>
   18ee4:	cmp	r0, #0
   18ee8:	popeq	{r4, pc}
   18eec:	mov	r0, r4
   18ef0:	ldr	r1, [pc, #24]	; 18f10 <__assert_fail@plt+0x78d4>
   18ef4:	bl	11294 <strcmp@plt>
   18ef8:	adds	r0, r0, #0
   18efc:	movne	r0, #1
   18f00:	pop	{r4, pc}
   18f04:	mov	r0, #1
   18f08:	pop	{r4, pc}
   18f0c:			; <UNDEFINED> instruction: 0x0001b7b0
   18f10:			; <UNDEFINED> instruction: 0x0001b7b4
   18f14:	ldrb	r3, [r0]
   18f18:	cmp	r3, #0
   18f1c:	beq	18f48 <__assert_fail@plt+0x790c>
   18f20:	mov	r2, #0
   18f24:	push	{r4, lr}
   18f28:	add	r2, r3, r2, ror #23
   18f2c:	ldrb	r3, [r0, #1]!
   18f30:	cmp	r3, #0
   18f34:	bne	18f28 <__assert_fail@plt+0x78ec>
   18f38:	mov	r0, r2
   18f3c:	bl	19dac <__assert_fail@plt+0x8770>
   18f40:	mov	r0, r1
   18f44:	pop	{r4, pc}
   18f48:	mov	r0, r3
   18f4c:	bx	lr
   18f50:	push	{r4, lr}
   18f54:	mov	r0, #14
   18f58:	bl	11570 <nl_langinfo@plt>
   18f5c:	cmp	r0, #0
   18f60:	beq	18f78 <__assert_fail@plt+0x793c>
   18f64:	ldrb	r2, [r0]
   18f68:	ldr	r3, [pc, #16]	; 18f80 <__assert_fail@plt+0x7944>
   18f6c:	cmp	r2, #0
   18f70:	moveq	r0, r3
   18f74:	pop	{r4, pc}
   18f78:	ldr	r0, [pc]	; 18f80 <__assert_fail@plt+0x7944>
   18f7c:	pop	{r4, pc}
   18f80:			; <UNDEFINED> instruction: 0x0001b7bc
   18f84:	push	{r4, r5, r6, lr}
   18f88:	mov	r6, r0
   18f8c:	mov	r0, #24
   18f90:	bl	18420 <__assert_fail@plt+0x6de4>
   18f94:	mov	r4, #0
   18f98:	mov	r5, #0
   18f9c:	str	r6, [r0]
   18fa0:	strd	r4, [r0, #16]
   18fa4:	strd	r4, [r0, #8]
   18fa8:	pop	{r4, r5, r6, pc}
   18fac:	push	{r4, lr}
   18fb0:	bl	19284 <__assert_fail@plt+0x7c48>
   18fb4:	subs	r4, r0, #0
   18fb8:	beq	18fdc <__assert_fail@plt+0x79a0>
   18fbc:	mov	r0, #24
   18fc0:	bl	18420 <__assert_fail@plt+0x6de4>
   18fc4:	mov	r2, #0
   18fc8:	mov	r3, #0
   18fcc:	str	r4, [r0]
   18fd0:	strd	r2, [r0, #16]
   18fd4:	strd	r2, [r0, #8]
   18fd8:	pop	{r4, pc}
   18fdc:	mov	r0, r4
   18fe0:	pop	{r4, pc}
   18fe4:	ldr	r0, [r0]
   18fe8:	bx	lr
   18fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ff0:	sub	sp, sp, #60	; 0x3c
   18ff4:	mov	r9, r3
   18ff8:	adds	r3, r2, #1
   18ffc:	str	r3, [sp, #16]
   19000:	adc	r3, r9, #0
   19004:	str	r3, [sp, #20]
   19008:	ldr	r3, [pc, #420]	; 191b4 <__assert_fail@plt+0x7b78>
   1900c:	mov	r8, r2
   19010:	ldr	r2, [r0]
   19014:	ldr	r3, [r3]
   19018:	str	r0, [sp, #36]	; 0x24
   1901c:	str	r2, [sp, #32]
   19020:	ldrd	r6, [r0, #8]
   19024:	ldrd	r4, [r0, #16]
   19028:	str	r3, [sp, #52]	; 0x34
   1902c:	strd	r8, [sp]
   19030:	b	190b4 <__assert_fail@plt+0x7a78>
   19034:	ldrd	r2, [sp]
   19038:	cmp	r5, r3
   1903c:	cmpeq	r4, r2
   19040:	beq	19158 <__assert_fail@plt+0x7b1c>
   19044:	ldrd	r2, [sp]
   19048:	ldr	r9, [sp, #16]
   1904c:	ldr	r8, [sp, #20]
   19050:	subs	r0, r4, r2
   19054:	sbc	r1, r5, r3
   19058:	mov	r2, r9
   1905c:	mov	r3, r8
   19060:	bl	19dcc <__assert_fail@plt+0x8790>
   19064:	mov	fp, r3
   19068:	subs	r3, r4, r2
   1906c:	str	r3, [sp, #8]
   19070:	sbc	r3, r5, fp
   19074:	strd	r0, [sp, #24]
   19078:	str	r3, [sp, #12]
   1907c:	mov	sl, r2
   19080:	mov	r3, r8
   19084:	mov	r2, r9
   19088:	mov	r0, r6
   1908c:	mov	r1, r7
   19090:	bl	19dcc <__assert_fail@plt+0x8790>
   19094:	ldrd	r8, [sp, #8]
   19098:	cmp	r7, r9
   1909c:	cmpeq	r6, r8
   190a0:	bls	19190 <__assert_fail@plt+0x7b54>
   190a4:	subs	r4, sl, #1
   190a8:	mov	r6, r2
   190ac:	sbc	r5, fp, #0
   190b0:	mov	r7, r3
   190b4:	ldrd	r2, [sp]
   190b8:	cmp	r5, r3
   190bc:	cmpeq	r4, r2
   190c0:	bcs	19034 <__assert_fail@plt+0x79f8>
   190c4:	ldrd	r8, [sp]
   190c8:	mov	r0, r4
   190cc:	mov	r1, r5
   190d0:	mov	r2, #0
   190d4:	lsl	r3, r1, #8
   190d8:	lsl	ip, r0, #8
   190dc:	orr	r3, r3, r0, lsr #24
   190e0:	adds	r0, ip, #255	; 0xff
   190e4:	adc	r1, r3, #0
   190e8:	cmp	r9, r1
   190ec:	cmpeq	r8, r0
   190f0:	add	r2, r2, #1
   190f4:	bhi	190d4 <__assert_fail@plt+0x7a98>
   190f8:	add	r1, sp, #44	; 0x2c
   190fc:	ldr	r0, [sp, #32]
   19100:	bl	19500 <__assert_fail@plt+0x7ec4>
   19104:	add	ip, sp, #44	; 0x2c
   19108:	ldrb	sl, [ip], #1
   1910c:	lsl	r0, r7, #8
   19110:	lsl	r1, r6, #8
   19114:	orr	r0, r0, r6, lsr #24
   19118:	lsl	r2, r5, #8
   1911c:	adds	r6, sl, r1
   19120:	mov	fp, #0
   19124:	lsl	r1, r4, #8
   19128:	orr	r2, r2, r4, lsr #24
   1912c:	adc	r7, fp, r0
   19130:	adds	r4, r1, #255	; 0xff
   19134:	adc	r5, r2, #0
   19138:	cmp	r9, r5
   1913c:	cmpeq	r8, r4
   19140:	bhi	19108 <__assert_fail@plt+0x7acc>
   19144:	strd	r8, [sp]
   19148:	ldrd	r2, [sp]
   1914c:	cmp	r5, r3
   19150:	cmpeq	r4, r2
   19154:	bne	19044 <__assert_fail@plt+0x7a08>
   19158:	ldr	r1, [sp, #36]	; 0x24
   1915c:	mov	r2, #0
   19160:	mov	r3, #0
   19164:	strd	r2, [r1, #16]
   19168:	strd	r2, [r1, #8]
   1916c:	ldr	r3, [pc, #64]	; 191b4 <__assert_fail@plt+0x7b78>
   19170:	ldr	r2, [sp, #52]	; 0x34
   19174:	mov	r0, r6
   19178:	ldr	r3, [r3]
   1917c:	mov	r1, r7
   19180:	cmp	r2, r3
   19184:	bne	191b0 <__assert_fail@plt+0x7b74>
   19188:	add	sp, sp, #60	; 0x3c
   1918c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19190:	mov	r7, r3
   19194:	ldr	r3, [sp, #36]	; 0x24
   19198:	mov	r6, r2
   1919c:	strd	r0, [r3, #8]
   191a0:	mov	r1, r3
   191a4:	ldrd	r2, [sp, #24]
   191a8:	strd	r2, [r1, #16]
   191ac:	b	1916c <__assert_fail@plt+0x7b30>
   191b0:	bl	1133c <__stack_chk_fail@plt>
   191b4:	andeq	fp, r2, r8, lsl #30
   191b8:	push	{r4, lr}
   191bc:	mvn	r2, #0
   191c0:	mov	r4, r0
   191c4:	mov	r1, #24
   191c8:	bl	11558 <__explicit_bzero_chk@plt>
   191cc:	mov	r0, r4
   191d0:	pop	{r4, lr}
   191d4:	b	112f4 <free@plt>
   191d8:	push	{r4, r5, r6, r7, r8, lr}
   191dc:	mov	r4, r0
   191e0:	ldr	r0, [r0]
   191e4:	bl	19638 <__assert_fail@plt+0x7ffc>
   191e8:	mov	r6, r0
   191ec:	bl	1148c <__errno_location@plt>
   191f0:	mvn	r2, #0
   191f4:	mov	r1, #24
   191f8:	ldr	r7, [r0]
   191fc:	mov	r5, r0
   19200:	mov	r0, r4
   19204:	bl	11558 <__explicit_bzero_chk@plt>
   19208:	mov	r0, r4
   1920c:	bl	112f4 <free@plt>
   19210:	str	r7, [r5]
   19214:	mov	r0, r6
   19218:	pop	{r4, r5, r6, r7, r8, pc}
   1921c:	subs	r5, r0, #0
   19220:	push	{r7, lr}
   19224:	beq	19274 <__assert_fail@plt+0x7c38>
   19228:	ldr	r3, [pc, #72]	; 19278 <__assert_fail@plt+0x7c3c>
   1922c:	ldr	r6, [r3]
   19230:	bl	1148c <__errno_location@plt>
   19234:	mov	r2, #5
   19238:	ldr	r4, [r0]
   1923c:	cmp	r4, #0
   19240:	moveq	r0, r4
   19244:	ldreq	r1, [pc, #48]	; 1927c <__assert_fail@plt+0x7c40>
   19248:	ldrne	r1, [pc, #48]	; 19280 <__assert_fail@plt+0x7c44>
   1924c:	movne	r0, #0
   19250:	bl	11330 <dcgettext@plt>
   19254:	mov	r7, r0
   19258:	mov	r0, r5
   1925c:	bl	17840 <__assert_fail@plt+0x6204>
   19260:	mov	r2, r7
   19264:	mov	r1, r4
   19268:	mov	r3, r0
   1926c:	mov	r0, r6
   19270:	bl	113cc <error@plt>
   19274:	bl	11600 <abort@plt>
   19278:	andeq	ip, r2, r0, ror r1
   1927c:	andeq	fp, r1, r4, asr #15
   19280:	ldrdeq	fp, [r1], -r4
   19284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19288:	sub	sp, sp, #20
   1928c:	ldr	r6, [pc, #576]	; 194d4 <__assert_fail@plt+0x7e98>
   19290:	subs	r7, r1, #0
   19294:	ldr	r3, [r6]
   19298:	str	r3, [sp, #12]
   1929c:	beq	19388 <__assert_fail@plt+0x7d4c>
   192a0:	cmp	r0, #0
   192a4:	mov	r5, r0
   192a8:	beq	19314 <__assert_fail@plt+0x7cd8>
   192ac:	ldr	r1, [pc, #548]	; 194d8 <__assert_fail@plt+0x7e9c>
   192b0:	bl	19b1c <__assert_fail@plt+0x84e0>
   192b4:	subs	r8, r0, #0
   192b8:	moveq	r4, r8
   192bc:	beq	192f8 <__assert_fail@plt+0x7cbc>
   192c0:	ldr	r0, [pc, #532]	; 194dc <__assert_fail@plt+0x7ea0>
   192c4:	bl	18420 <__assert_fail@plt+0x6de4>
   192c8:	ldr	r2, [pc, #528]	; 194e0 <__assert_fail@plt+0x7ea4>
   192cc:	cmp	r7, #2048	; 0x800
   192d0:	movcc	r3, r7
   192d4:	movcs	r3, #2048	; 0x800
   192d8:	mov	r4, r0
   192dc:	str	r8, [r0]
   192e0:	str	r5, [r0, #8]
   192e4:	add	r1, r4, #12
   192e8:	str	r2, [r4, #4]
   192ec:	mov	r0, r8
   192f0:	mov	r2, #0
   192f4:	bl	114b0 <setvbuf@plt>
   192f8:	ldr	r2, [sp, #12]
   192fc:	ldr	r3, [r6]
   19300:	mov	r0, r4
   19304:	cmp	r2, r3
   19308:	bne	1945c <__assert_fail@plt+0x7e20>
   1930c:	add	sp, sp, #20
   19310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19314:	ldr	r0, [pc, #448]	; 194dc <__assert_fail@plt+0x7ea0>
   19318:	bl	18420 <__assert_fail@plt+0x6de4>
   1931c:	ldr	r3, [pc, #444]	; 194e0 <__assert_fail@plt+0x7ea4>
   19320:	mov	r1, r5
   19324:	mov	r4, r0
   19328:	str	r5, [r0]
   1932c:	str	r5, [r0, #8]
   19330:	str	r5, [r0, #12]
   19334:	str	r3, [r0, #4]
   19338:	ldr	r0, [pc, #420]	; 194e4 <__assert_fail@plt+0x7ea8>
   1933c:	bl	113e4 <open64@plt>
   19340:	add	r8, r4, #16
   19344:	subs	r9, r0, #0
   19348:	blt	193a4 <__assert_fail@plt+0x7d68>
   1934c:	cmp	r7, #1024	; 0x400
   19350:	movcc	r2, r7
   19354:	movcs	r2, #1024	; 0x400
   19358:	ldr	r3, [pc, #392]	; 194e8 <__assert_fail@plt+0x7eac>
   1935c:	mov	r1, r8
   19360:	bl	112b8 <__read_chk@plt>
   19364:	ldr	sl, [pc, #384]	; 194ec <__assert_fail@plt+0x7eb0>
   19368:	mov	r7, r0
   1936c:	mov	r0, r9
   19370:	bl	1160c <close@plt>
   19374:	cmp	r7, sl
   19378:	ble	19460 <__assert_fail@plt+0x7e24>
   1937c:	mov	r0, r8
   19380:	bl	19888 <__assert_fail@plt+0x824c>
   19384:	b	192f8 <__assert_fail@plt+0x7cbc>
   19388:	ldr	r0, [pc, #332]	; 194dc <__assert_fail@plt+0x7ea0>
   1938c:	bl	18420 <__assert_fail@plt+0x6de4>
   19390:	ldr	r3, [pc, #328]	; 194e0 <__assert_fail@plt+0x7ea4>
   19394:	mov	r4, r0
   19398:	str	r7, [r0]
   1939c:	stmib	r0, {r3, r7}
   193a0:	b	192f8 <__assert_fail@plt+0x7cbc>
   193a4:	add	r7, sp, #4
   193a8:	mov	r1, r5
   193ac:	mov	r0, r7
   193b0:	bl	113a8 <gettimeofday@plt>
   193b4:	mov	r3, r7
   193b8:	mov	fp, #12
   193bc:	ldm	r3!, {r0, r1}
   193c0:	str	r0, [r4, #16]
   193c4:	str	r1, [r8, #4]
   193c8:	bl	11468 <getpid@plt>
   193cc:	str	r0, [sp, #4]
   193d0:	str	r0, [r4, #24]
   193d4:	rsb	r5, fp, #1024	; 0x400
   193d8:	cmp	r5, #4
   193dc:	movcs	r5, #4
   193e0:	bl	115a0 <getppid@plt>
   193e4:	ldr	sl, [pc, #256]	; 194ec <__assert_fail@plt+0x7eb0>
   193e8:	mov	r2, r5
   193ec:	add	r9, r5, fp
   193f0:	mov	r1, r7
   193f4:	str	r0, [sp, #4]
   193f8:	add	r0, r8, fp
   193fc:	bl	1130c <memcpy@plt>
   19400:	cmp	r9, sl
   19404:	bhi	1937c <__assert_fail@plt+0x7d40>
   19408:	rsb	r5, r9, #1024	; 0x400
   1940c:	cmp	r5, #4
   19410:	movcs	r5, #4
   19414:	bl	112dc <getuid@plt>
   19418:	add	fp, r9, r5
   1941c:	mov	r2, r5
   19420:	mov	r1, r7
   19424:	str	r0, [sp, #4]
   19428:	add	r0, r8, r9
   1942c:	bl	1130c <memcpy@plt>
   19430:	cmp	fp, sl
   19434:	bhi	1937c <__assert_fail@plt+0x7d40>
   19438:	bl	114bc <getgid@plt>
   1943c:	rsb	r2, fp, #1024	; 0x400
   19440:	cmp	r2, #4
   19444:	mov	r1, r7
   19448:	movcs	r2, #4
   1944c:	str	r0, [sp, #4]
   19450:	add	r0, r8, fp
   19454:	bl	1130c <memcpy@plt>
   19458:	b	1937c <__assert_fail@plt+0x7d40>
   1945c:	bl	1133c <__stack_chk_fail@plt>
   19460:	bic	r3, r7, r7, asr #31
   19464:	rsb	r9, r3, #1024	; 0x400
   19468:	cmp	r9, #8
   1946c:	add	r7, sp, #4
   19470:	movcs	r9, #8
   19474:	mov	r1, r5
   19478:	add	fp, r8, r3
   1947c:	mov	r0, r7
   19480:	add	r5, r9, r3
   19484:	bl	113a8 <gettimeofday@plt>
   19488:	mov	r2, r9
   1948c:	mov	r1, r7
   19490:	mov	r0, fp
   19494:	bl	1130c <memcpy@plt>
   19498:	cmp	r5, sl
   1949c:	bgt	1937c <__assert_fail@plt+0x7d40>
   194a0:	rsb	r9, r5, #1024	; 0x400
   194a4:	cmp	r9, #4
   194a8:	movcs	r9, #4
   194ac:	bl	11468 <getpid@plt>
   194b0:	add	fp, r9, r5
   194b4:	mov	r2, r9
   194b8:	mov	r1, r7
   194bc:	str	r0, [sp, #4]
   194c0:	add	r0, r8, r5
   194c4:	bl	1130c <memcpy@plt>
   194c8:	cmp	fp, sl
   194cc:	bls	193d4 <__assert_fail@plt+0x7d98>
   194d0:	b	1937c <__assert_fail@plt+0x7d40>
   194d4:	andeq	fp, r2, r8, lsl #30
   194d8:	strdeq	fp, [r1], -r4
   194dc:	andeq	r0, r0, ip, lsl r8
   194e0:	andeq	r9, r1, ip, lsl r2
   194e4:	andeq	fp, r1, r4, ror #15
   194e8:	andeq	r0, r0, ip, lsl #16
   194ec:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   194f0:	str	r1, [r0, #4]
   194f4:	bx	lr
   194f8:	str	r1, [r0, #8]
   194fc:	bx	lr
   19500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19504:	mov	r6, r0
   19508:	ldr	r7, [r0]
   1950c:	mov	r5, r1
   19510:	cmp	r7, #0
   19514:	mov	r4, r2
   19518:	beq	1956c <__assert_fail@plt+0x7f30>
   1951c:	bl	1148c <__errno_location@plt>
   19520:	mov	r8, r0
   19524:	mov	r3, r7
   19528:	mov	r2, r4
   1952c:	mov	r0, r5
   19530:	mov	r1, #1
   19534:	bl	115d0 <fread_unlocked@plt>
   19538:	ldr	r3, [r8]
   1953c:	subs	r4, r4, r0
   19540:	add	r5, r5, r0
   19544:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19548:	ldm	r6, {r1, r2}
   1954c:	ldr	r0, [r6, #8]
   19550:	ldr	r1, [r1]
   19554:	tst	r1, #32
   19558:	moveq	r3, #0
   1955c:	str	r3, [r8]
   19560:	blx	r2
   19564:	ldr	r7, [r6]
   19568:	b	19524 <__assert_fail@plt+0x7ee8>
   1956c:	mov	r8, r0
   19570:	ldr	r7, [r8, #12]!
   19574:	cmp	r2, r7
   19578:	add	r8, r8, #1040	; 0x410
   1957c:	addhi	r9, r0, #16
   19580:	bls	19628 <__assert_fail@plt+0x7fec>
   19584:	rsb	r1, r7, #1024	; 0x400
   19588:	add	r1, r8, r1
   1958c:	mov	r0, r5
   19590:	mov	r2, r7
   19594:	add	r5, r5, r7
   19598:	bl	1130c <memcpy@plt>
   1959c:	tst	r5, #3
   195a0:	mov	r1, r8
   195a4:	mov	r0, r9
   195a8:	sub	r4, r4, r7
   195ac:	beq	195c4 <__assert_fail@plt+0x7f88>
   195b0:	bl	1966c <__assert_fail@plt+0x8030>
   195b4:	cmp	r4, #1024	; 0x400
   195b8:	mov	r7, #1024	; 0x400
   195bc:	bhi	19584 <__assert_fail@plt+0x7f48>
   195c0:	b	19608 <__assert_fail@plt+0x7fcc>
   195c4:	ldr	r7, [pc, #104]	; 19634 <__assert_fail@plt+0x7ff8>
   195c8:	cmp	r4, r7
   195cc:	bhi	195dc <__assert_fail@plt+0x7fa0>
   195d0:	b	195fc <__assert_fail@plt+0x7fc0>
   195d4:	cmp	r4, r7
   195d8:	bls	195fc <__assert_fail@plt+0x7fc0>
   195dc:	mov	r1, r5
   195e0:	mov	r0, r9
   195e4:	bl	1966c <__assert_fail@plt+0x8030>
   195e8:	subs	r4, r4, #1024	; 0x400
   195ec:	add	r5, r5, #1024	; 0x400
   195f0:	bne	195d4 <__assert_fail@plt+0x7f98>
   195f4:	str	r4, [r6, #12]
   195f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195fc:	mov	r0, r9
   19600:	mov	r1, r8
   19604:	bl	1966c <__assert_fail@plt+0x8030>
   19608:	mov	r7, #1024	; 0x400
   1960c:	mov	r2, r4
   19610:	mov	r1, r8
   19614:	mov	r0, r5
   19618:	sub	r4, r7, r4
   1961c:	bl	1130c <memcpy@plt>
   19620:	str	r4, [r6, #12]
   19624:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19628:	rsb	r3, r7, #1024	; 0x400
   1962c:	add	r8, r8, r3
   19630:	b	1960c <__assert_fail@plt+0x7fd0>
   19634:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19638:	push	{r4, r5, r6, lr}
   1963c:	mvn	r2, #0
   19640:	ldr	r5, [r0]
   19644:	mov	r4, r0
   19648:	ldr	r1, [pc, #24]	; 19668 <__assert_fail@plt+0x802c>
   1964c:	bl	11558 <__explicit_bzero_chk@plt>
   19650:	mov	r0, r4
   19654:	bl	112f4 <free@plt>
   19658:	subs	r0, r5, #0
   1965c:	popeq	{r4, r5, r6, pc}
   19660:	pop	{r4, r5, r6, lr}
   19664:	b	19a7c <__assert_fail@plt+0x8440>
   19668:	andeq	r0, r0, ip, lsl r8
   1966c:	push	{r4, r5, r6, r7, lr}
   19670:	add	ip, r1, #16
   19674:	ldr	r5, [r0, #1032]	; 0x408
   19678:	ldr	r4, [r0, #1028]	; 0x404
   1967c:	add	r5, r5, #1
   19680:	ldr	r3, [r0, #1024]	; 0x400
   19684:	add	r6, r4, r5
   19688:	add	r2, r0, #16
   1968c:	add	lr, r1, #528	; 0x210
   19690:	str	r5, [r0, #1032]	; 0x408
   19694:	ldr	r5, [r2, #-16]
   19698:	ldr	r7, [r2, #496]	; 0x1f0
   1969c:	and	r4, r5, #1020	; 0x3fc
   196a0:	eor	r3, r3, r3, lsl #13
   196a4:	ldr	r4, [r0, r4]
   196a8:	add	r3, r3, r7
   196ac:	add	r4, r3, r4
   196b0:	add	r4, r4, r6
   196b4:	str	r4, [r2, #-16]
   196b8:	lsr	r4, r4, #8
   196bc:	and	r4, r4, #1020	; 0x3fc
   196c0:	eor	r3, r3, r3, lsr #6
   196c4:	ldr	r4, [r0, r4]
   196c8:	add	ip, ip, #16
   196cc:	add	r5, r5, r4
   196d0:	str	r5, [ip, #-32]	; 0xffffffe0
   196d4:	ldr	r6, [r2, #-12]
   196d8:	ldr	r7, [r2, #500]	; 0x1f4
   196dc:	and	r4, r6, #1020	; 0x3fc
   196e0:	add	r3, r3, r7
   196e4:	ldr	r7, [r0, r4]
   196e8:	eor	r4, r3, r3, lsl #2
   196ec:	add	r3, r3, r7
   196f0:	add	r3, r3, r5
   196f4:	str	r3, [r2, #-12]
   196f8:	lsr	r3, r3, #8
   196fc:	and	r3, r3, #1020	; 0x3fc
   19700:	add	r2, r2, #16
   19704:	ldr	r3, [r0, r3]
   19708:	add	r6, r6, r3
   1970c:	str	r6, [ip, #-28]	; 0xffffffe4
   19710:	ldr	r5, [r2, #-24]	; 0xffffffe8
   19714:	ldr	r7, [r2, #488]	; 0x1e8
   19718:	and	r3, r5, #1020	; 0x3fc
   1971c:	add	r4, r4, r7
   19720:	ldr	r7, [r0, r3]
   19724:	eor	r3, r4, r4, lsr #16
   19728:	add	r4, r4, r7
   1972c:	add	r4, r4, r6
   19730:	str	r4, [r2, #-24]	; 0xffffffe8
   19734:	lsr	r4, r4, #8
   19738:	and	r4, r4, #1020	; 0x3fc
   1973c:	ldr	r4, [r0, r4]
   19740:	add	r5, r5, r4
   19744:	str	r5, [ip, #-24]	; 0xffffffe8
   19748:	ldr	r6, [r2, #-20]	; 0xffffffec
   1974c:	ldr	r7, [r2, #492]	; 0x1ec
   19750:	and	r4, r6, #1020	; 0x3fc
   19754:	add	r3, r3, r7
   19758:	ldr	r4, [r0, r4]
   1975c:	add	r4, r3, r4
   19760:	add	r4, r4, r5
   19764:	str	r4, [r2, #-20]	; 0xffffffec
   19768:	lsr	r4, r4, #8
   1976c:	and	r4, r4, #1020	; 0x3fc
   19770:	ldr	r4, [r0, r4]
   19774:	add	r6, r6, r4
   19778:	str	r6, [ip, #-20]	; 0xffffffec
   1977c:	cmp	ip, lr
   19780:	bne	19694 <__assert_fail@plt+0x8058>
   19784:	add	r1, r1, #1040	; 0x410
   19788:	add	r2, r0, #528	; 0x210
   1978c:	ldr	lr, [r2, #-16]
   19790:	ldr	r5, [r2, #-528]	; 0xfffffdf0
   19794:	and	r4, lr, #1020	; 0x3fc
   19798:	eor	r3, r3, r3, lsl #13
   1979c:	ldr	r4, [r0, r4]
   197a0:	add	r3, r3, r5
   197a4:	add	r4, r3, r4
   197a8:	add	r4, r4, r6
   197ac:	str	r4, [r2, #-16]
   197b0:	lsr	r4, r4, #8
   197b4:	and	r4, r4, #1020	; 0x3fc
   197b8:	eor	r3, r3, r3, lsr #6
   197bc:	ldr	r5, [r0, r4]
   197c0:	add	ip, ip, #16
   197c4:	add	r5, lr, r5
   197c8:	str	r5, [ip, #-32]	; 0xffffffe0
   197cc:	ldr	r4, [r2, #-12]
   197d0:	ldr	r6, [r2, #-524]	; 0xfffffdf4
   197d4:	and	lr, r4, #1020	; 0x3fc
   197d8:	add	r3, r3, r6
   197dc:	ldr	r6, [r0, lr]
   197e0:	eor	lr, r3, r3, lsl #2
   197e4:	add	r3, r3, r6
   197e8:	add	r3, r3, r5
   197ec:	str	r3, [r2, #-12]
   197f0:	lsr	r3, r3, #8
   197f4:	and	r3, r3, #1020	; 0x3fc
   197f8:	add	r2, r2, #16
   197fc:	ldr	r3, [r0, r3]
   19800:	add	r4, r4, r3
   19804:	str	r4, [ip, #-28]	; 0xffffffe4
   19808:	ldr	r5, [r2, #-24]	; 0xffffffe8
   1980c:	ldr	r6, [r2, #-536]	; 0xfffffde8
   19810:	and	r3, r5, #1020	; 0x3fc
   19814:	add	lr, lr, r6
   19818:	ldr	r6, [r0, r3]
   1981c:	eor	r3, lr, lr, lsr #16
   19820:	add	lr, lr, r6
   19824:	add	lr, lr, r4
   19828:	str	lr, [r2, #-24]	; 0xffffffe8
   1982c:	lsr	lr, lr, #8
   19830:	and	lr, lr, #1020	; 0x3fc
   19834:	ldr	lr, [r0, lr]
   19838:	add	r5, r5, lr
   1983c:	str	r5, [ip, #-24]	; 0xffffffe8
   19840:	ldr	r4, [r2, #-20]	; 0xffffffec
   19844:	ldr	r6, [r2, #-532]	; 0xfffffdec
   19848:	and	lr, r4, #1020	; 0x3fc
   1984c:	add	r3, r3, r6
   19850:	ldr	lr, [r0, lr]
   19854:	add	lr, r3, lr
   19858:	add	lr, lr, r5
   1985c:	str	lr, [r2, #-20]	; 0xffffffec
   19860:	lsr	lr, lr, #8
   19864:	and	lr, lr, #1020	; 0x3fc
   19868:	ldr	r6, [r0, lr]
   1986c:	add	r6, r4, r6
   19870:	str	r6, [ip, #-20]	; 0xffffffec
   19874:	cmp	r1, ip
   19878:	bne	1978c <__assert_fail@plt+0x8150>
   1987c:	str	r3, [r0, #1024]	; 0x400
   19880:	str	r6, [r0, #1028]	; 0x404
   19884:	pop	{r4, r5, r6, r7, pc}
   19888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1988c:	mov	r2, r0
   19890:	ldr	r8, [pc, #452]	; 19a5c <__assert_fail@plt+0x8420>
   19894:	ldr	r7, [pc, #452]	; 19a60 <__assert_fail@plt+0x8424>
   19898:	ldr	r6, [pc, #452]	; 19a64 <__assert_fail@plt+0x8428>
   1989c:	ldr	r4, [pc, #452]	; 19a68 <__assert_fail@plt+0x842c>
   198a0:	ldr	lr, [pc, #452]	; 19a6c <__assert_fail@plt+0x8430>
   198a4:	ldr	ip, [pc, #452]	; 19a70 <__assert_fail@plt+0x8434>
   198a8:	ldr	r1, [pc, #452]	; 19a74 <__assert_fail@plt+0x8438>
   198ac:	ldr	r9, [pc, #452]	; 19a78 <__assert_fail@plt+0x843c>
   198b0:	add	fp, r0, #1024	; 0x400
   198b4:	mov	r3, r0
   198b8:	ldm	r3, {r5, sl}
   198bc:	add	r3, r3, #32
   198c0:	add	r1, r1, sl
   198c4:	add	r9, r9, r5
   198c8:	ldr	sl, [r3, #-24]	; 0xffffffe8
   198cc:	ldr	r5, [r3, #-20]	; 0xffffffec
   198d0:	eor	r9, r9, r1, lsl #11
   198d4:	add	ip, ip, sl
   198d8:	add	r5, r9, r5
   198dc:	ldr	sl, [r3, #-16]
   198e0:	add	lr, r5, lr
   198e4:	add	r1, r1, ip
   198e8:	ldr	r5, [r3, #-12]
   198ec:	eor	r1, r1, ip, lsr #2
   198f0:	add	ip, ip, lr
   198f4:	add	sl, r1, sl
   198f8:	eor	ip, ip, lr, lsl #8
   198fc:	add	r4, sl, r4
   19900:	add	r5, ip, r5
   19904:	add	r6, r5, r6
   19908:	add	lr, lr, r4
   1990c:	ldr	r5, [r3, #-8]
   19910:	eor	lr, lr, r4, lsr #16
   19914:	ldr	sl, [r3, #-4]
   19918:	add	r4, r4, r6
   1991c:	add	r5, lr, r5
   19920:	eor	r4, r4, r6, lsl #10
   19924:	add	r7, r5, r7
   19928:	add	r6, r6, r7
   1992c:	add	sl, r4, sl
   19930:	add	r8, sl, r8
   19934:	eor	r6, r6, r7, lsr #4
   19938:	add	r9, r9, r6
   1993c:	add	r7, r7, r8
   19940:	eor	r7, r7, r8, lsl #8
   19944:	add	r8, r8, r9
   19948:	eor	r8, r8, r9, lsr #9
   1994c:	add	r1, r1, r7
   19950:	add	r9, r9, r1
   19954:	add	ip, ip, r8
   19958:	str	r4, [r3, #-16]
   1995c:	str	lr, [r3, #-20]	; 0xffffffec
   19960:	str	r1, [r3, #-28]	; 0xffffffe4
   19964:	str	r9, [r3, #-32]	; 0xffffffe0
   19968:	str	ip, [r3, #-24]	; 0xffffffe8
   1996c:	str	r7, [r3, #-8]
   19970:	str	r8, [r3, #-4]
   19974:	str	r6, [r3, #-12]
   19978:	cmp	fp, r3
   1997c:	bne	198b8 <__assert_fail@plt+0x827c>
   19980:	ldm	r2, {r3, r5}
   19984:	ldr	sl, [r2, #24]
   19988:	add	r2, r2, #32
   1998c:	add	r1, r1, r5
   19990:	ldr	r5, [r2, #-24]	; 0xffffffe8
   19994:	add	r9, r9, r3
   19998:	ldr	r3, [r2, #-20]	; 0xffffffec
   1999c:	add	ip, ip, r5
   199a0:	eor	r9, r9, r1, lsl #11
   199a4:	ldr	r5, [r2, #-16]
   199a8:	add	r3, r9, r3
   199ac:	add	r1, r1, ip
   199b0:	add	lr, r3, lr
   199b4:	eor	r1, r1, ip, lsr #2
   199b8:	ldr	r3, [r2, #-12]
   199bc:	add	ip, ip, lr
   199c0:	add	r5, r1, r5
   199c4:	eor	ip, ip, lr, lsl #8
   199c8:	add	r4, r5, r4
   199cc:	add	r3, ip, r3
   199d0:	add	lr, lr, r4
   199d4:	add	r6, r3, r6
   199d8:	eor	lr, lr, r4, lsr #16
   199dc:	ldr	r3, [r2, #-4]
   199e0:	add	r4, r4, r6
   199e4:	add	sl, lr, sl
   199e8:	eor	r4, r4, r6, lsl #10
   199ec:	add	r7, sl, r7
   199f0:	add	r6, r6, r7
   199f4:	add	r3, r4, r3
   199f8:	add	r8, r3, r8
   199fc:	eor	r6, r6, r7, lsr #4
   19a00:	add	r9, r9, r6
   19a04:	add	r7, r7, r8
   19a08:	eor	r7, r7, r8, lsl #8
   19a0c:	add	r8, r8, r9
   19a10:	eor	r8, r8, r9, lsr #9
   19a14:	add	r1, r1, r7
   19a18:	add	r9, r9, r1
   19a1c:	add	ip, ip, r8
   19a20:	str	r4, [r2, #-16]
   19a24:	str	lr, [r2, #-20]	; 0xffffffec
   19a28:	str	r1, [r2, #-28]	; 0xffffffe4
   19a2c:	str	r9, [r2, #-32]	; 0xffffffe0
   19a30:	str	ip, [r2, #-24]	; 0xffffffe8
   19a34:	str	r7, [r2, #-8]
   19a38:	str	r8, [r2, #-4]
   19a3c:	str	r6, [r2, #-12]
   19a40:	cmp	fp, r2
   19a44:	bne	19980 <__assert_fail@plt+0x8344>
   19a48:	mov	r3, #0
   19a4c:	str	r3, [r0, #1032]	; 0x408
   19a50:	str	r3, [r0, #1028]	; 0x404
   19a54:	str	r3, [r0, #1024]	; 0x400
   19a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a5c:	rsbcc	r9, r0, r9, lsl r1
   19a60:	strbtgt	lr, [pc], #2587	; 19a68 <__assert_fail@plt+0x842c>
   19a64:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   19a68:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   19a6c:	svceq	0x00421ad8
   19a70:	tstgt	r6, #1200	; 0x4b0
   19a74:	ldrbls	r0, [r9, #89]	; 0x59
   19a78:	cmnne	r7, #360	; 0x168
   19a7c:	push	{r4, r5, lr}
   19a80:	sub	sp, sp, #12
   19a84:	mov	r4, r0
   19a88:	bl	114ec <fileno@plt>
   19a8c:	cmp	r0, #0
   19a90:	mov	r0, r4
   19a94:	blt	19b10 <__assert_fail@plt+0x84d4>
   19a98:	bl	11414 <__freading@plt>
   19a9c:	cmp	r0, #0
   19aa0:	bne	19adc <__assert_fail@plt+0x84a0>
   19aa4:	mov	r0, r4
   19aa8:	bl	188c0 <__assert_fail@plt+0x7284>
   19aac:	cmp	r0, #0
   19ab0:	beq	19b0c <__assert_fail@plt+0x84d0>
   19ab4:	bl	1148c <__errno_location@plt>
   19ab8:	mov	r5, r0
   19abc:	mov	r0, r4
   19ac0:	ldr	r4, [r5]
   19ac4:	bl	11504 <fclose@plt>
   19ac8:	cmp	r4, #0
   19acc:	mvnne	r0, #0
   19ad0:	strne	r4, [r5]
   19ad4:	add	sp, sp, #12
   19ad8:	pop	{r4, r5, pc}
   19adc:	mov	r0, r4
   19ae0:	bl	114ec <fileno@plt>
   19ae4:	mov	r3, #1
   19ae8:	str	r3, [sp]
   19aec:	mov	r2, #0
   19af0:	mov	r3, #0
   19af4:	bl	11390 <lseek64@plt>
   19af8:	mvn	r3, #0
   19afc:	mvn	r2, #0
   19b00:	cmp	r1, r3
   19b04:	cmpeq	r0, r2
   19b08:	bne	19aa4 <__assert_fail@plt+0x8468>
   19b0c:	mov	r0, r4
   19b10:	add	sp, sp, #12
   19b14:	pop	{r4, r5, lr}
   19b18:	b	11504 <fclose@plt>
   19b1c:	push	{r4, r5, r6, lr}
   19b20:	mov	r5, r1
   19b24:	bl	115ac <fopen64@plt>
   19b28:	subs	r4, r0, #0
   19b2c:	beq	19b3c <__assert_fail@plt+0x8500>
   19b30:	bl	114ec <fileno@plt>
   19b34:	cmp	r0, #2
   19b38:	bls	19b44 <__assert_fail@plt+0x8508>
   19b3c:	mov	r0, r4
   19b40:	pop	{r4, r5, r6, pc}
   19b44:	bl	19bb4 <__assert_fail@plt+0x8578>
   19b48:	subs	r6, r0, #0
   19b4c:	blt	19b94 <__assert_fail@plt+0x8558>
   19b50:	mov	r0, r4
   19b54:	bl	19a7c <__assert_fail@plt+0x8440>
   19b58:	cmp	r0, #0
   19b5c:	bne	19b74 <__assert_fail@plt+0x8538>
   19b60:	mov	r1, r5
   19b64:	mov	r0, r6
   19b68:	bl	11258 <fdopen@plt>
   19b6c:	subs	r4, r0, #0
   19b70:	bne	19b3c <__assert_fail@plt+0x8500>
   19b74:	bl	1148c <__errno_location@plt>
   19b78:	mov	r4, #0
   19b7c:	mov	r5, r0
   19b80:	mov	r0, r6
   19b84:	ldr	r6, [r5]
   19b88:	bl	1160c <close@plt>
   19b8c:	str	r6, [r5]
   19b90:	b	19b3c <__assert_fail@plt+0x8500>
   19b94:	bl	1148c <__errno_location@plt>
   19b98:	mov	r5, r0
   19b9c:	mov	r0, r4
   19ba0:	ldr	r6, [r5]
   19ba4:	mov	r4, #0
   19ba8:	bl	19a7c <__assert_fail@plt+0x8440>
   19bac:	str	r6, [r5]
   19bb0:	b	19b3c <__assert_fail@plt+0x8500>
   19bb4:	mov	r2, #3
   19bb8:	mov	r1, #0
   19bbc:	b	18774 <__assert_fail@plt+0x7138>
   19bc0:	subs	r2, r1, #1
   19bc4:	bxeq	lr
   19bc8:	bcc	19da0 <__assert_fail@plt+0x8764>
   19bcc:	cmp	r0, r1
   19bd0:	bls	19d84 <__assert_fail@plt+0x8748>
   19bd4:	tst	r1, r2
   19bd8:	beq	19d90 <__assert_fail@plt+0x8754>
   19bdc:	clz	r3, r0
   19be0:	clz	r2, r1
   19be4:	sub	r3, r2, r3
   19be8:	rsbs	r3, r3, #31
   19bec:	addne	r3, r3, r3, lsl #1
   19bf0:	mov	r2, #0
   19bf4:	addne	pc, pc, r3, lsl #2
   19bf8:	nop			; (mov r0, r0)
   19bfc:	cmp	r0, r1, lsl #31
   19c00:	adc	r2, r2, r2
   19c04:	subcs	r0, r0, r1, lsl #31
   19c08:	cmp	r0, r1, lsl #30
   19c0c:	adc	r2, r2, r2
   19c10:	subcs	r0, r0, r1, lsl #30
   19c14:	cmp	r0, r1, lsl #29
   19c18:	adc	r2, r2, r2
   19c1c:	subcs	r0, r0, r1, lsl #29
   19c20:	cmp	r0, r1, lsl #28
   19c24:	adc	r2, r2, r2
   19c28:	subcs	r0, r0, r1, lsl #28
   19c2c:	cmp	r0, r1, lsl #27
   19c30:	adc	r2, r2, r2
   19c34:	subcs	r0, r0, r1, lsl #27
   19c38:	cmp	r0, r1, lsl #26
   19c3c:	adc	r2, r2, r2
   19c40:	subcs	r0, r0, r1, lsl #26
   19c44:	cmp	r0, r1, lsl #25
   19c48:	adc	r2, r2, r2
   19c4c:	subcs	r0, r0, r1, lsl #25
   19c50:	cmp	r0, r1, lsl #24
   19c54:	adc	r2, r2, r2
   19c58:	subcs	r0, r0, r1, lsl #24
   19c5c:	cmp	r0, r1, lsl #23
   19c60:	adc	r2, r2, r2
   19c64:	subcs	r0, r0, r1, lsl #23
   19c68:	cmp	r0, r1, lsl #22
   19c6c:	adc	r2, r2, r2
   19c70:	subcs	r0, r0, r1, lsl #22
   19c74:	cmp	r0, r1, lsl #21
   19c78:	adc	r2, r2, r2
   19c7c:	subcs	r0, r0, r1, lsl #21
   19c80:	cmp	r0, r1, lsl #20
   19c84:	adc	r2, r2, r2
   19c88:	subcs	r0, r0, r1, lsl #20
   19c8c:	cmp	r0, r1, lsl #19
   19c90:	adc	r2, r2, r2
   19c94:	subcs	r0, r0, r1, lsl #19
   19c98:	cmp	r0, r1, lsl #18
   19c9c:	adc	r2, r2, r2
   19ca0:	subcs	r0, r0, r1, lsl #18
   19ca4:	cmp	r0, r1, lsl #17
   19ca8:	adc	r2, r2, r2
   19cac:	subcs	r0, r0, r1, lsl #17
   19cb0:	cmp	r0, r1, lsl #16
   19cb4:	adc	r2, r2, r2
   19cb8:	subcs	r0, r0, r1, lsl #16
   19cbc:	cmp	r0, r1, lsl #15
   19cc0:	adc	r2, r2, r2
   19cc4:	subcs	r0, r0, r1, lsl #15
   19cc8:	cmp	r0, r1, lsl #14
   19ccc:	adc	r2, r2, r2
   19cd0:	subcs	r0, r0, r1, lsl #14
   19cd4:	cmp	r0, r1, lsl #13
   19cd8:	adc	r2, r2, r2
   19cdc:	subcs	r0, r0, r1, lsl #13
   19ce0:	cmp	r0, r1, lsl #12
   19ce4:	adc	r2, r2, r2
   19ce8:	subcs	r0, r0, r1, lsl #12
   19cec:	cmp	r0, r1, lsl #11
   19cf0:	adc	r2, r2, r2
   19cf4:	subcs	r0, r0, r1, lsl #11
   19cf8:	cmp	r0, r1, lsl #10
   19cfc:	adc	r2, r2, r2
   19d00:	subcs	r0, r0, r1, lsl #10
   19d04:	cmp	r0, r1, lsl #9
   19d08:	adc	r2, r2, r2
   19d0c:	subcs	r0, r0, r1, lsl #9
   19d10:	cmp	r0, r1, lsl #8
   19d14:	adc	r2, r2, r2
   19d18:	subcs	r0, r0, r1, lsl #8
   19d1c:	cmp	r0, r1, lsl #7
   19d20:	adc	r2, r2, r2
   19d24:	subcs	r0, r0, r1, lsl #7
   19d28:	cmp	r0, r1, lsl #6
   19d2c:	adc	r2, r2, r2
   19d30:	subcs	r0, r0, r1, lsl #6
   19d34:	cmp	r0, r1, lsl #5
   19d38:	adc	r2, r2, r2
   19d3c:	subcs	r0, r0, r1, lsl #5
   19d40:	cmp	r0, r1, lsl #4
   19d44:	adc	r2, r2, r2
   19d48:	subcs	r0, r0, r1, lsl #4
   19d4c:	cmp	r0, r1, lsl #3
   19d50:	adc	r2, r2, r2
   19d54:	subcs	r0, r0, r1, lsl #3
   19d58:	cmp	r0, r1, lsl #2
   19d5c:	adc	r2, r2, r2
   19d60:	subcs	r0, r0, r1, lsl #2
   19d64:	cmp	r0, r1, lsl #1
   19d68:	adc	r2, r2, r2
   19d6c:	subcs	r0, r0, r1, lsl #1
   19d70:	cmp	r0, r1
   19d74:	adc	r2, r2, r2
   19d78:	subcs	r0, r0, r1
   19d7c:	mov	r0, r2
   19d80:	bx	lr
   19d84:	moveq	r0, #1
   19d88:	movne	r0, #0
   19d8c:	bx	lr
   19d90:	clz	r2, r1
   19d94:	rsb	r2, r2, #31
   19d98:	lsr	r0, r0, r2
   19d9c:	bx	lr
   19da0:	cmp	r0, #0
   19da4:	mvnne	r0, #0
   19da8:	b	19e08 <__assert_fail@plt+0x87cc>
   19dac:	cmp	r1, #0
   19db0:	beq	19da0 <__assert_fail@plt+0x8764>
   19db4:	push	{r0, r1, lr}
   19db8:	bl	19bc0 <__assert_fail@plt+0x8584>
   19dbc:	pop	{r1, r2, lr}
   19dc0:	mul	r3, r2, r0
   19dc4:	sub	r1, r1, r3
   19dc8:	bx	lr
   19dcc:	cmp	r3, #0
   19dd0:	cmpeq	r2, #0
   19dd4:	bne	19dec <__assert_fail@plt+0x87b0>
   19dd8:	cmp	r1, #0
   19ddc:	cmpeq	r0, #0
   19de0:	mvnne	r1, #0
   19de4:	mvnne	r0, #0
   19de8:	b	19e08 <__assert_fail@plt+0x87cc>
   19dec:	sub	sp, sp, #8
   19df0:	push	{sp, lr}
   19df4:	bl	19e18 <__assert_fail@plt+0x87dc>
   19df8:	ldr	lr, [sp, #4]
   19dfc:	add	sp, sp, #8
   19e00:	pop	{r2, r3}
   19e04:	bx	lr
   19e08:	push	{r1, lr}
   19e0c:	mov	r0, #8
   19e10:	bl	1127c <raise@plt>
   19e14:	pop	{r1, pc}
   19e18:	cmp	r1, r3
   19e1c:	cmpeq	r0, r2
   19e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e24:	mov	r4, r0
   19e28:	movcc	r0, #0
   19e2c:	mov	r5, r1
   19e30:	ldr	lr, [sp, #36]	; 0x24
   19e34:	movcc	r1, r0
   19e38:	bcc	19f34 <__assert_fail@plt+0x88f8>
   19e3c:	cmp	r3, #0
   19e40:	clzeq	ip, r2
   19e44:	clzne	ip, r3
   19e48:	addeq	ip, ip, #32
   19e4c:	cmp	r5, #0
   19e50:	clzeq	r1, r4
   19e54:	addeq	r1, r1, #32
   19e58:	clzne	r1, r5
   19e5c:	sub	ip, ip, r1
   19e60:	sub	sl, ip, #32
   19e64:	lsl	r9, r3, ip
   19e68:	rsb	fp, ip, #32
   19e6c:	orr	r9, r9, r2, lsl sl
   19e70:	orr	r9, r9, r2, lsr fp
   19e74:	lsl	r8, r2, ip
   19e78:	cmp	r5, r9
   19e7c:	cmpeq	r4, r8
   19e80:	movcc	r0, #0
   19e84:	movcc	r1, r0
   19e88:	bcc	19ea4 <__assert_fail@plt+0x8868>
   19e8c:	mov	r0, #1
   19e90:	subs	r4, r4, r8
   19e94:	lsl	r1, r0, sl
   19e98:	orr	r1, r1, r0, lsr fp
   19e9c:	lsl	r0, r0, ip
   19ea0:	sbc	r5, r5, r9
   19ea4:	cmp	ip, #0
   19ea8:	beq	19f34 <__assert_fail@plt+0x88f8>
   19eac:	lsr	r6, r8, #1
   19eb0:	orr	r6, r6, r9, lsl #31
   19eb4:	lsr	r7, r9, #1
   19eb8:	mov	r2, ip
   19ebc:	b	19ee0 <__assert_fail@plt+0x88a4>
   19ec0:	subs	r3, r4, r6
   19ec4:	sbc	r8, r5, r7
   19ec8:	adds	r3, r3, r3
   19ecc:	adc	r8, r8, r8
   19ed0:	adds	r4, r3, #1
   19ed4:	adc	r5, r8, #0
   19ed8:	subs	r2, r2, #1
   19edc:	beq	19efc <__assert_fail@plt+0x88c0>
   19ee0:	cmp	r5, r7
   19ee4:	cmpeq	r4, r6
   19ee8:	bcs	19ec0 <__assert_fail@plt+0x8884>
   19eec:	adds	r4, r4, r4
   19ef0:	adc	r5, r5, r5
   19ef4:	subs	r2, r2, #1
   19ef8:	bne	19ee0 <__assert_fail@plt+0x88a4>
   19efc:	lsr	r3, r4, ip
   19f00:	orr	r3, r3, r5, lsl fp
   19f04:	lsr	r2, r5, ip
   19f08:	orr	r3, r3, r5, lsr sl
   19f0c:	adds	r0, r0, r4
   19f10:	mov	r4, r3
   19f14:	lsl	r3, r2, ip
   19f18:	orr	r3, r3, r4, lsl sl
   19f1c:	lsl	ip, r4, ip
   19f20:	orr	r3, r3, r4, lsr fp
   19f24:	adc	r1, r1, r5
   19f28:	subs	r0, r0, ip
   19f2c:	mov	r5, r2
   19f30:	sbc	r1, r1, r3
   19f34:	cmp	lr, #0
   19f38:	strdne	r4, [lr]
   19f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f44:	mov	r7, r0
   19f48:	ldr	r6, [pc, #72]	; 19f98 <__assert_fail@plt+0x895c>
   19f4c:	ldr	r5, [pc, #72]	; 19f9c <__assert_fail@plt+0x8960>
   19f50:	add	r6, pc, r6
   19f54:	add	r5, pc, r5
   19f58:	sub	r6, r6, r5
   19f5c:	mov	r8, r1
   19f60:	mov	r9, r2
   19f64:	bl	11238 <fdopen@plt-0x20>
   19f68:	asrs	r6, r6, #2
   19f6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f70:	mov	r4, #0
   19f74:	add	r4, r4, #1
   19f78:	ldr	r3, [r5], #4
   19f7c:	mov	r2, r9
   19f80:	mov	r1, r8
   19f84:	mov	r0, r7
   19f88:	blx	r3
   19f8c:	cmp	r6, r4
   19f90:	bne	19f74 <__assert_fail@plt+0x8938>
   19f94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f98:	andeq	r1, r1, ip, lsr #31
   19f9c:	andeq	r1, r1, r4, lsr #31
   19fa0:	bx	lr
   19fa4:	ldr	r3, [pc, #12]	; 19fb8 <__assert_fail@plt+0x897c>
   19fa8:	mov	r1, #0
   19fac:	add	r3, pc, r3
   19fb0:	ldr	r2, [r3]
   19fb4:	b	11498 <__cxa_atexit@plt>
   19fb8:			; <UNDEFINED> instruction: 0x000121b0

Disassembly of section .fini:

00019fbc <.fini>:
   19fbc:	push	{r3, lr}
   19fc0:	pop	{r3, pc}
