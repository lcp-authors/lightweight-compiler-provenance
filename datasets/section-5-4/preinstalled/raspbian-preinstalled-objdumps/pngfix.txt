
raspbian-preinstalled/pngfix:     file format elf32-littlearm


Disassembly of section .init:

00010d54 <.init>:
   10d54:	push	{r3, lr}
   10d58:	bl	11940 <__assert_fail@plt+0x950>
   10d5c:	pop	{r3, pc}

Disassembly of section .plt:

00010d60 <strcmp@plt-0x14>:
   10d60:	push	{lr}		; (str lr, [sp, #-4]!)
   10d64:	ldr	lr, [pc, #4]	; 10d70 <strcmp@plt-0x4>
   10d68:	add	lr, pc, lr
   10d6c:	ldr	pc, [lr, #8]!
   10d70:	andeq	r8, r1, r4, lsr #3

00010d74 <strcmp@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #420]!	; 0x1a4

00010d80 <strtol@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #412]!	; 0x19c

00010d8c <fgetpos@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #404]!	; 0x194

00010d98 <fopen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #396]!	; 0x18c

00010da4 <inflate@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #388]!	; 0x184

00010db0 <fflush@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #380]!	; 0x17c

00010dbc <_setjmp@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #372]!	; 0x174

00010dc8 <png_error@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #364]!	; 0x16c

00010dd4 <inflateReset2@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #356]!	; 0x164

00010de0 <free@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #348]!	; 0x15c

00010dec <png_read_end@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #340]!	; 0x154

00010df8 <ferror@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #332]!	; 0x14c

00010e04 <memcpy@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #324]!	; 0x144

00010e10 <__stack_chk_fail@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #316]!	; 0x13c

00010e1c <perror@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #308]!	; 0x134

00010e28 <__memcpy_chk@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #300]!	; 0x12c

00010e34 <fwrite@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #292]!	; 0x124

00010e40 <png_set_read_fn@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #284]!	; 0x11c

00010e4c <malloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #276]!	; 0x114

00010e58 <__libc_start_main@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #268]!	; 0x10c

00010e64 <strerror@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #260]!	; 0x104

00010e70 <__gmon_start__@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #252]!	; 0xfc

00010e7c <__ctype_b_loc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #244]!	; 0xf4

00010e88 <exit@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #236]!	; 0xec

00010e94 <feof@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #228]!	; 0xe4

00010ea0 <png_set_interlace_handling@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #220]!	; 0xdc

00010eac <inflateEnd@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #212]!	; 0xd4

00010eb8 <strlen@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #204]!	; 0xcc

00010ec4 <png_create_info_struct@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #196]!	; 0xc4

00010ed0 <png_set_chunk_malloc_max@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #188]!	; 0xbc

00010edc <png_read_row@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #180]!	; 0xb4

00010ee8 <png_read_info@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #172]!	; 0xac

00010ef4 <__errno_location@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #164]!	; 0xa4

00010f00 <png_destroy_read_struct@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #156]!	; 0x9c

00010f0c <__printf_chk@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #148]!	; 0x94

00010f18 <__fprintf_chk@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #140]!	; 0x8c

00010f24 <fclose@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #132]!	; 0x84

00010f30 <png_set_chunk_cache_max@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #124]!	; 0x7c

00010f3c <__longjmp_chk@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #116]!	; 0x74

00010f48 <fsetpos@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #108]!	; 0x6c

00010f54 <png_get_error_ptr@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #100]!	; 0x64

00010f60 <fputc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #92]!	; 0x5c

00010f6c <inflateInit2_@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #84]!	; 0x54

00010f78 <putc@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #76]!	; 0x4c

00010f84 <png_set_user_limits@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #68]!	; 0x44

00010f90 <fseek@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #24, 20	; 0x18000
   10f98:	ldr	pc, [ip, #60]!	; 0x3c

00010f9c <png_get_image_height@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #24, 20	; 0x18000
   10fa4:	ldr	pc, [ip, #52]!	; 0x34

00010fa8 <png_start_read_image@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #24, 20	; 0x18000
   10fb0:	ldr	pc, [ip, #44]!	; 0x2c

00010fb4 <fputs@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #24, 20	; 0x18000
   10fbc:	ldr	pc, [ip, #36]!	; 0x24

00010fc0 <strncmp@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #24, 20	; 0x18000
   10fc8:	ldr	pc, [ip, #28]!

00010fcc <abort@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #24, 20	; 0x18000
   10fd4:	ldr	pc, [ip, #20]!

00010fd8 <getc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #24, 20	; 0x18000
   10fe0:	ldr	pc, [ip, #12]!

00010fe4 <png_create_read_struct@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #24, 20	; 0x18000
   10fec:	ldr	pc, [ip, #4]!

00010ff0 <__assert_fail@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #4092]!	; 0xffc

Disassembly of section .text:

00010ffc <.text>:
   10ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11000:	sub	sp, sp, #4864	; 0x1300
   11004:	ldr	r3, [pc, #2156]	; 11878 <__assert_fail@plt+0x888>
   11008:	sub	sp, sp, #4
   1100c:	add	r2, sp, #4800	; 0x12c0
   11010:	add	r2, r2, #60	; 0x3c
   11014:	ldr	r3, [r3]
   11018:	mov	r6, r1
   1101c:	str	r3, [r2]
   11020:	ldr	r3, [r6]
   11024:	mov	r1, #88	; 0x58
   11028:	mov	r5, r0
   1102c:	add	r0, sp, #48	; 0x30
   11030:	str	r3, [sp, #28]
   11034:	bl	11bcc <__assert_fail@plt+0xbdc>
   11038:	add	r2, sp, #48	; 0x30
   1103c:	mov	r4, #0
   11040:	ldr	r7, [pc, #2100]	; 1187c <__assert_fail@plt+0x88c>
   11044:	ldr	fp, [pc, #2100]	; 11880 <__assert_fail@plt+0x890>
   11048:	ldr	sl, [pc, #2100]	; 11884 <__assert_fail@plt+0x894>
   1104c:	ldr	r8, [pc, #2100]	; 11888 <__assert_fail@plt+0x898>
   11050:	add	r0, sp, #60	; 0x3c
   11054:	mov	r1, #76	; 0x4c
   11058:	mov	r9, r4
   1105c:	str	r4, [sp, #52]	; 0x34
   11060:	str	r4, [sp, #56]	; 0x38
   11064:	ldrh	r3, [r2]
   11068:	and	r3, r3, #63488	; 0xf800
   1106c:	strh	r3, [r2]
   11070:	bl	11bcc <__assert_fail@plt+0xbdc>
   11074:	mov	r3, #16
   11078:	str	r4, [sp, #60]	; 0x3c
   1107c:	str	r3, [sp, #64]	; 0x40
   11080:	str	r4, [sp, #24]
   11084:	str	r4, [sp, #20]
   11088:	str	r4, [sp, #16]
   1108c:	sub	r5, r5, #1
   11090:	cmp	r5, #0
   11094:	ble	110d4 <__assert_fail@plt+0xe4>
   11098:	ldr	r4, [r6, #4]!
   1109c:	mov	r1, r7
   110a0:	mov	r0, r4
   110a4:	bl	10d74 <strcmp@plt>
   110a8:	cmp	r0, #0
   110ac:	bne	11158 <__assert_fail@plt+0x168>
   110b0:	ldrb	r3, [sp, #48]	; 0x30
   110b4:	sub	r5, r5, #1
   110b8:	cmp	r5, #0
   110bc:	and	r3, r3, #4
   110c0:	mvn	r3, r3
   110c4:	and	r3, r3, #28
   110c8:	mvn	r3, r3
   110cc:	strb	r3, [sp, #48]	; 0x30
   110d0:	bgt	11098 <__assert_fail@plt+0xa8>
   110d4:	cmp	r9, #0
   110d8:	beq	11370 <__assert_fail@plt+0x380>
   110dc:	ldr	r4, [sp, #60]	; 0x3c
   110e0:	add	r0, sp, #60	; 0x3c
   110e4:	mov	r1, #76	; 0x4c
   110e8:	bl	11bcc <__assert_fail@plt+0xbdc>
   110ec:	cmp	r4, #0
   110f0:	beq	1111c <__assert_fail@plt+0x12c>
   110f4:	ldr	r1, [r4, #4]
   110f8:	mov	r0, r4
   110fc:	add	r1, r1, #3
   11100:	ldr	r5, [r4]
   11104:	lsl	r1, r1, #2
   11108:	bl	11bcc <__assert_fail@plt+0xbdc>
   1110c:	mov	r0, r4
   11110:	bl	10de0 <free@plt>
   11114:	subs	r4, r5, #0
   11118:	bne	110f4 <__assert_fail@plt+0x104>
   1111c:	add	r0, sp, #48	; 0x30
   11120:	mov	r1, #88	; 0x58
   11124:	ldr	r4, [sp, #56]	; 0x38
   11128:	bl	11bcc <__assert_fail@plt+0xbdc>
   1112c:	add	r3, sp, #4800	; 0x12c0
   11130:	add	r3, r3, #60	; 0x3c
   11134:	ldr	r2, [r3]
   11138:	ldr	r3, [pc, #1848]	; 11878 <__assert_fail@plt+0x888>
   1113c:	mov	r0, r4
   11140:	ldr	r3, [r3]
   11144:	cmp	r2, r3
   11148:	bne	1136c <__assert_fail@plt+0x37c>
   1114c:	add	sp, sp, #4864	; 0x1300
   11150:	add	sp, sp, #4
   11154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11158:	mov	r1, fp
   1115c:	mov	r2, #6
   11160:	mov	r0, r4
   11164:	bl	10fc0 <strncmp@plt>
   11168:	subs	r1, r0, #0
   1116c:	beq	11270 <__assert_fail@plt+0x280>
   11170:	mov	r1, sl
   11174:	mov	r0, r4
   11178:	bl	10d74 <strcmp@plt>
   1117c:	cmp	r0, #0
   11180:	bne	111ac <__assert_fail@plt+0x1bc>
   11184:	ldrb	r3, [sp, #49]	; 0x31
   11188:	mvn	r2, #-2147483648	; 0x80000000
   1118c:	str	r2, [sp, #52]	; 0x34
   11190:	and	r2, r3, #7
   11194:	cmp	r2, #1
   11198:	bhi	1108c <__assert_fail@plt+0x9c>
   1119c:	bic	r3, r3, #5
   111a0:	orr	r3, r3, #2
   111a4:	strb	r3, [sp, #49]	; 0x31
   111a8:	b	1108c <__assert_fail@plt+0x9c>
   111ac:	mov	r1, r8
   111b0:	mov	r0, r4
   111b4:	bl	10d74 <strcmp@plt>
   111b8:	cmp	r0, #0
   111bc:	beq	11294 <__assert_fail@plt+0x2a4>
   111c0:	ldr	r1, [pc, #1732]	; 1188c <__assert_fail@plt+0x89c>
   111c4:	mov	r0, r4
   111c8:	bl	10d74 <strcmp@plt>
   111cc:	cmp	r0, #0
   111d0:	beq	11294 <__assert_fail@plt+0x2a4>
   111d4:	mov	r2, #6
   111d8:	ldr	r1, [pc, #1712]	; 11890 <__assert_fail@plt+0x8a0>
   111dc:	mov	r0, r4
   111e0:	bl	10fc0 <strncmp@plt>
   111e4:	cmp	r0, #0
   111e8:	addeq	r3, r4, #6
   111ec:	streq	r3, [sp, #16]
   111f0:	beq	1108c <__assert_fail@plt+0x9c>
   111f4:	mov	r2, #9
   111f8:	ldr	r1, [pc, #1684]	; 11894 <__assert_fail@plt+0x8a4>
   111fc:	mov	r0, r4
   11200:	bl	10fc0 <strncmp@plt>
   11204:	cmp	r0, #0
   11208:	addeq	r3, r4, #9
   1120c:	streq	r3, [sp, #20]
   11210:	beq	1108c <__assert_fail@plt+0x9c>
   11214:	mov	r2, #9
   11218:	ldr	r1, [pc, #1656]	; 11898 <__assert_fail@plt+0x8a8>
   1121c:	mov	r0, r4
   11220:	bl	10fc0 <strncmp@plt>
   11224:	cmp	r0, #0
   11228:	addeq	r3, r4, #9
   1122c:	streq	r3, [sp, #24]
   11230:	beq	1108c <__assert_fail@plt+0x9c>
   11234:	ldr	r1, [pc, #1632]	; 1189c <__assert_fail@plt+0x8ac>
   11238:	mov	r0, r4
   1123c:	bl	10d74 <strcmp@plt>
   11240:	cmp	r0, #0
   11244:	beq	112a4 <__assert_fail@plt+0x2b4>
   11248:	ldr	r1, [pc, #1616]	; 118a0 <__assert_fail@plt+0x8b0>
   1124c:	mov	r0, r4
   11250:	bl	10d74 <strcmp@plt>
   11254:	cmp	r0, #0
   11258:	bne	112b4 <__assert_fail@plt+0x2c4>
   1125c:	ldrb	r3, [sp, #49]	; 0x31
   11260:	bic	r3, r3, #6
   11264:	orr	r3, r3, #1
   11268:	strb	r3, [sp, #49]	; 0x31
   1126c:	b	1108c <__assert_fail@plt+0x9c>
   11270:	mov	r2, #10
   11274:	add	r0, r4, #6
   11278:	bl	10d80 <strtol@plt>
   1127c:	ldrb	r3, [sp, #49]	; 0x31
   11280:	and	r2, r3, #7
   11284:	cmp	r2, #1
   11288:	str	r0, [sp, #52]	; 0x34
   1128c:	bhi	1108c <__assert_fail@plt+0x9c>
   11290:	b	1119c <__assert_fail@plt+0x1ac>
   11294:	ldrb	r3, [sp, #48]	; 0x30
   11298:	orr	r3, r3, #4
   1129c:	strb	r3, [sp, #48]	; 0x30
   112a0:	b	1108c <__assert_fail@plt+0x9c>
   112a4:	ldrb	r3, [sp, #49]	; 0x31
   112a8:	bic	r3, r3, #7
   112ac:	strb	r3, [sp, #49]	; 0x31
   112b0:	b	1108c <__assert_fail@plt+0x9c>
   112b4:	ldr	r1, [pc, #1512]	; 118a4 <__assert_fail@plt+0x8b4>
   112b8:	mov	r0, r4
   112bc:	bl	10d74 <strcmp@plt>
   112c0:	cmp	r0, #0
   112c4:	ldrbeq	r3, [sp, #49]	; 0x31
   112c8:	beq	1119c <__assert_fail@plt+0x1ac>
   112cc:	ldr	r1, [pc, #1492]	; 118a8 <__assert_fail@plt+0x8b8>
   112d0:	mov	r0, r4
   112d4:	bl	10d74 <strcmp@plt>
   112d8:	cmp	r0, #0
   112dc:	bne	112f4 <__assert_fail@plt+0x304>
   112e0:	ldrb	r3, [sp, #49]	; 0x31
   112e4:	bic	r3, r3, #4
   112e8:	orr	r3, r3, #3
   112ec:	strb	r3, [sp, #49]	; 0x31
   112f0:	b	1108c <__assert_fail@plt+0x9c>
   112f4:	ldr	r1, [pc, #1456]	; 118ac <__assert_fail@plt+0x8bc>
   112f8:	mov	r0, r4
   112fc:	bl	10d74 <strcmp@plt>
   11300:	cmp	r0, #0
   11304:	bne	1131c <__assert_fail@plt+0x32c>
   11308:	ldrb	r3, [sp, #49]	; 0x31
   1130c:	bic	r3, r3, #3
   11310:	orr	r3, r3, #4
   11314:	strb	r3, [sp, #49]	; 0x31
   11318:	b	1108c <__assert_fail@plt+0x9c>
   1131c:	ldr	r1, [pc, #1420]	; 118b0 <__assert_fail@plt+0x8c0>
   11320:	mov	r0, r4
   11324:	bl	10d74 <strcmp@plt>
   11328:	cmp	r0, #0
   1132c:	bne	11344 <__assert_fail@plt+0x354>
   11330:	ldrb	r3, [sp, #49]	; 0x31
   11334:	bic	r3, r3, #2
   11338:	orr	r3, r3, #5
   1133c:	strb	r3, [sp, #49]	; 0x31
   11340:	b	1108c <__assert_fail@plt+0x9c>
   11344:	ldr	r1, [pc, #1384]	; 118b4 <__assert_fail@plt+0x8c4>
   11348:	mov	r0, r4
   1134c:	bl	10d74 <strcmp@plt>
   11350:	cmp	r0, #0
   11354:	bne	11378 <__assert_fail@plt+0x388>
   11358:	ldrb	r3, [sp, #49]	; 0x31
   1135c:	bic	r3, r3, #1
   11360:	orr	r3, r3, #6
   11364:	strb	r3, [sp, #49]	; 0x31
   11368:	b	1108c <__assert_fail@plt+0x9c>
   1136c:	bl	10e10 <__stack_chk_fail@plt>
   11370:	ldr	r0, [sp, #28]
   11374:	bl	123c0 <__assert_fail@plt+0x13d0>
   11378:	ldr	r1, [pc, #1336]	; 118b8 <__assert_fail@plt+0x8c8>
   1137c:	mov	r0, r4
   11380:	bl	10d74 <strcmp@plt>
   11384:	cmp	r0, #0
   11388:	beq	11844 <__assert_fail@plt+0x854>
   1138c:	ldr	r1, [pc, #1320]	; 118bc <__assert_fail@plt+0x8cc>
   11390:	mov	r0, r4
   11394:	bl	10d74 <strcmp@plt>
   11398:	cmp	r0, #0
   1139c:	beq	11844 <__assert_fail@plt+0x854>
   113a0:	ldr	r1, [pc, #1304]	; 118c0 <__assert_fail@plt+0x8d0>
   113a4:	mov	r0, r4
   113a8:	bl	10d74 <strcmp@plt>
   113ac:	cmp	r0, #0
   113b0:	beq	11834 <__assert_fail@plt+0x844>
   113b4:	ldr	r1, [pc, #1288]	; 118c4 <__assert_fail@plt+0x8d4>
   113b8:	mov	r0, r4
   113bc:	bl	10d74 <strcmp@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	11834 <__assert_fail@plt+0x844>
   113c8:	ldr	r1, [pc, #1272]	; 118c8 <__assert_fail@plt+0x8d8>
   113cc:	mov	r0, r4
   113d0:	bl	10d74 <strcmp@plt>
   113d4:	cmp	r0, #0
   113d8:	beq	11814 <__assert_fail@plt+0x824>
   113dc:	ldr	r1, [pc, #1256]	; 118cc <__assert_fail@plt+0x8dc>
   113e0:	mov	r0, r4
   113e4:	bl	10d74 <strcmp@plt>
   113e8:	cmp	r0, #0
   113ec:	beq	11814 <__assert_fail@plt+0x824>
   113f0:	ldr	r1, [pc, #1240]	; 118d0 <__assert_fail@plt+0x8e0>
   113f4:	mov	r0, r4
   113f8:	bl	10d74 <strcmp@plt>
   113fc:	cmp	r0, #0
   11400:	beq	11670 <__assert_fail@plt+0x680>
   11404:	ldr	r1, [pc, #1224]	; 118d4 <__assert_fail@plt+0x8e4>
   11408:	mov	r0, r4
   1140c:	bl	10d74 <strcmp@plt>
   11410:	cmp	r0, #0
   11414:	beq	11670 <__assert_fail@plt+0x680>
   11418:	ldrb	r3, [r4]
   1141c:	cmp	r3, #45	; 0x2d
   11420:	beq	11370 <__assert_fail@plt+0x380>
   11424:	ldr	r3, [sp, #16]
   11428:	cmp	r3, #0
   1142c:	beq	115f0 <__assert_fail@plt+0x600>
   11430:	ldrb	r3, [sp, #48]	; 0x30
   11434:	tst	r3, #224	; 0xe0
   11438:	bne	115c4 <__assert_fail@plt+0x5d4>
   1143c:	add	r0, sp, #136	; 0x88
   11440:	mov	r1, #512	; 0x200
   11444:	bl	11bcc <__assert_fail@plt+0xbdc>
   11448:	add	r0, sp, #136	; 0x88
   1144c:	str	r0, [sp, #636]	; 0x27c
   11450:	add	r0, sp, #48	; 0x30
   11454:	str	r0, [sp, #136]	; 0x88
   11458:	ldr	r0, [sp, #16]
   1145c:	ldr	r2, [pc, #1140]	; 118d8 <__assert_fail@plt+0x8e8>
   11460:	mov	r3, #0
   11464:	str	r0, [sp, #144]	; 0x90
   11468:	ldr	r1, [pc, #1132]	; 118dc <__assert_fail@plt+0x8ec>
   1146c:	mov	r0, r4
   11470:	str	r4, [sp, #140]	; 0x8c
   11474:	str	r2, [sp, #640]	; 0x280
   11478:	str	r3, [sp, #148]	; 0x94
   1147c:	str	r3, [sp, #152]	; 0x98
   11480:	str	r3, [sp, #156]	; 0x9c
   11484:	str	r3, [sp, #188]	; 0xbc
   11488:	str	r3, [sp, #192]	; 0xc0
   1148c:	str	r3, [sp, #616]	; 0x268
   11490:	str	r3, [sp, #624]	; 0x270
   11494:	str	r3, [sp, #628]	; 0x274
   11498:	str	r3, [sp, #632]	; 0x278
   1149c:	bl	10d98 <fopen@plt>
   114a0:	cmp	r0, #0
   114a4:	str	r0, [sp, #188]	; 0xbc
   114a8:	beq	115a0 <__assert_fail@plt+0x5b0>
   114ac:	ldr	r3, [sp, #16]
   114b0:	cmp	r3, #0
   114b4:	beq	114d0 <__assert_fail@plt+0x4e0>
   114b8:	ldr	r1, [pc, #1056]	; 118e0 <__assert_fail@plt+0x8f0>
   114bc:	mov	r0, r3
   114c0:	bl	10d98 <fopen@plt>
   114c4:	cmp	r0, #0
   114c8:	str	r0, [sp, #192]	; 0xc0
   114cc:	beq	11854 <__assert_fail@plt+0x864>
   114d0:	add	r0, sp, #136	; 0x88
   114d4:	bl	11ef0 <__assert_fail@plt+0xf00>
   114d8:	ldr	r3, [sp, #632]	; 0x278
   114dc:	cmp	r3, #0
   114e0:	beq	114ec <__assert_fail@plt+0x4fc>
   114e4:	add	r0, sp, #632	; 0x278
   114e8:	bl	127e0 <__assert_fail@plt+0x17f0>
   114ec:	ldr	r0, [sp, #628]	; 0x274
   114f0:	cmp	r0, #0
   114f4:	beq	11508 <__assert_fail@plt+0x518>
   114f8:	mov	r3, #0
   114fc:	mov	r1, #76	; 0x4c
   11500:	str	r3, [sp, #628]	; 0x274
   11504:	bl	11bcc <__assert_fail@plt+0xbdc>
   11508:	ldr	r0, [sp, #188]	; 0xbc
   1150c:	ldr	r4, [sp, #148]	; 0x94
   11510:	cmp	r0, #0
   11514:	beq	1151c <__assert_fail@plt+0x52c>
   11518:	bl	10f24 <fclose@plt>
   1151c:	ldr	r0, [sp, #192]	; 0xc0
   11520:	cmp	r0, #0
   11524:	beq	11574 <__assert_fail@plt+0x584>
   11528:	bl	10df8 <ferror@plt>
   1152c:	str	r0, [sp, #16]
   11530:	ldr	r0, [sp, #192]	; 0xc0
   11534:	bl	10db0 <fflush@plt>
   11538:	ldr	r3, [sp, #16]
   1153c:	orr	r3, r3, r0
   11540:	ldr	r0, [sp, #192]	; 0xc0
   11544:	str	r3, [sp, #16]
   11548:	bl	10f24 <fclose@plt>
   1154c:	ldr	r3, [sp, #16]
   11550:	orrs	r3, r3, r0
   11554:	beq	11574 <__assert_fail@plt+0x584>
   11558:	ldr	r0, [sp, #144]	; 0x90
   1155c:	bl	10e1c <perror@plt>
   11560:	ldr	r2, [pc, #892]	; 118e4 <__assert_fail@plt+0x8f4>
   11564:	mov	r1, #5
   11568:	add	r0, sp, #136	; 0x88
   1156c:	bl	11ca8 <__assert_fail@plt+0xcb8>
   11570:	orr	r4, r4, #32
   11574:	ldr	r2, [sp, #136]	; 0x88
   11578:	add	r0, sp, #136	; 0x88
   1157c:	mov	r1, #512	; 0x200
   11580:	ldr	r3, [r2, #8]
   11584:	add	r9, r9, #1
   11588:	orr	r4, r3, r4
   1158c:	str	r4, [r2, #8]
   11590:	bl	11bcc <__assert_fail@plt+0xbdc>
   11594:	mov	r3, #0
   11598:	str	r3, [sp, #16]
   1159c:	b	1108c <__assert_fail@plt+0x9c>
   115a0:	bl	10ef4 <__errno_location@plt>
   115a4:	ldr	r3, [sp, #148]	; 0x94
   115a8:	orr	r3, r3, #16
   115ac:	str	r3, [sp, #148]	; 0x94
   115b0:	ldr	r3, [r0]
   115b4:	mov	r0, r4
   115b8:	str	r3, [sp, #152]	; 0x98
   115bc:	bl	10e1c <perror@plt>
   115c0:	b	114d8 <__assert_fail@plt+0x4e8>
   115c4:	ldr	r3, [pc, #796]	; 118e8 <__assert_fail@plt+0x8f8>
   115c8:	ldr	ip, [sp, #16]
   115cc:	ldr	r0, [r3]
   115d0:	ldr	r3, [sp, #16]
   115d4:	ldr	r2, [pc, #784]	; 118ec <__assert_fail@plt+0x8fc>
   115d8:	str	r3, [sp]
   115dc:	mov	r1, #1
   115e0:	mov	r3, r4
   115e4:	str	ip, [sp, #16]
   115e8:	bl	10f18 <__fprintf_chk@plt>
   115ec:	b	1143c <__assert_fail@plt+0x44c>
   115f0:	mov	r0, r4
   115f4:	bl	10eb8 <strlen@plt>
   115f8:	ldr	r3, [sp, #24]
   115fc:	cmp	r3, #0
   11600:	str	r0, [sp, #36]	; 0x24
   11604:	beq	11730 <__assert_fail@plt+0x740>
   11608:	mov	r0, r3
   1160c:	bl	10eb8 <strlen@plt>
   11610:	ldr	r2, [sp, #36]	; 0x24
   11614:	add	r2, r2, r0
   11618:	cmp	r2, #4096	; 0x1000
   1161c:	str	r0, [sp, #44]	; 0x2c
   11620:	str	r2, [sp, #40]	; 0x28
   11624:	bls	11680 <__assert_fail@plt+0x690>
   11628:	ldr	r0, [sp, #20]
   1162c:	ldr	r2, [pc, #692]	; 118e8 <__assert_fail@plt+0x8f8>
   11630:	ldr	r3, [pc, #696]	; 118f0 <__assert_fail@plt+0x900>
   11634:	cmp	r0, #0
   11638:	ldr	r1, [sp, #24]
   1163c:	movne	r3, r0
   11640:	str	r1, [sp]
   11644:	str	r3, [sp, #8]
   11648:	str	r4, [sp, #4]
   1164c:	ldr	r3, [sp, #28]
   11650:	ldr	r0, [r2]
   11654:	mov	r1, #1
   11658:	ldr	r2, [pc, #660]	; 118f4 <__assert_fail@plt+0x904>
   1165c:	bl	10f18 <__fprintf_chk@plt>
   11660:	ldr	r3, [sp, #56]	; 0x38
   11664:	orr	r3, r3, #32
   11668:	str	r3, [sp, #56]	; 0x38
   1166c:	b	1108c <__assert_fail@plt+0x9c>
   11670:	ldrb	r3, [sp, #48]	; 0x30
   11674:	add	r3, r3, #32
   11678:	strb	r3, [sp, #48]	; 0x30
   1167c:	b	1108c <__assert_fail@plt+0x9c>
   11680:	add	r3, sp, #760	; 0x2f8
   11684:	str	r3, [sp, #32]
   11688:	mov	r0, r3
   1168c:	ldr	r2, [sp, #44]	; 0x2c
   11690:	ldr	r3, [pc, #608]	; 118f8 <__assert_fail@plt+0x908>
   11694:	ldr	r1, [sp, #24]
   11698:	bl	10e28 <__memcpy_chk@plt>
   1169c:	ldr	r3, [sp, #32]
   116a0:	ldr	r0, [sp, #44]	; 0x2c
   116a4:	ldr	r2, [sp, #36]	; 0x24
   116a8:	add	r0, r3, r0
   116ac:	mov	r1, r4
   116b0:	bl	10e04 <memcpy@plt>
   116b4:	ldr	r2, [sp, #40]	; 0x28
   116b8:	add	r3, sp, #768	; 0x300
   116bc:	add	r3, r3, r2
   116c0:	ldr	r2, [sp, #20]
   116c4:	cmp	r2, #0
   116c8:	ldr	r2, [sp, #16]
   116cc:	strb	r2, [r3, #-8]
   116d0:	ldrne	r3, [sp, #32]
   116d4:	strne	r3, [sp, #16]
   116d8:	beq	117ac <__assert_fail@plt+0x7bc>
   116dc:	ldr	r0, [sp, #20]
   116e0:	bl	10eb8 <strlen@plt>
   116e4:	ldr	r3, [sp, #40]	; 0x28
   116e8:	add	r3, r0, r3
   116ec:	cmp	r3, #4096	; 0x1000
   116f0:	mov	r2, r0
   116f4:	bhi	11778 <__assert_fail@plt+0x788>
   116f8:	str	r3, [sp, #16]
   116fc:	ldr	r0, [sp, #40]	; 0x28
   11700:	ldr	r3, [sp, #32]
   11704:	ldr	r1, [sp, #20]
   11708:	add	r0, r3, r0
   1170c:	bl	10e04 <memcpy@plt>
   11710:	ldr	r3, [sp, #16]
   11714:	add	r2, sp, #768	; 0x300
   11718:	add	r2, r2, r3
   1171c:	ldr	r1, [sp, #32]
   11720:	mov	r3, #0
   11724:	str	r1, [sp, #16]
   11728:	strb	r3, [r2, #-8]
   1172c:	b	11430 <__assert_fail@plt+0x440>
   11730:	ldr	r3, [sp, #20]
   11734:	cmp	r3, #0
   11738:	beq	117d4 <__assert_fail@plt+0x7e4>
   1173c:	add	r3, sp, #760	; 0x2f8
   11740:	str	r3, [sp, #32]
   11744:	mov	r0, r3
   11748:	ldr	r2, [sp, #36]	; 0x24
   1174c:	ldr	r3, [pc, #420]	; 118f8 <__assert_fail@plt+0x908>
   11750:	mov	r1, r4
   11754:	bl	10e28 <__memcpy_chk@plt>
   11758:	ldr	r2, [sp, #36]	; 0x24
   1175c:	add	r3, sp, #768	; 0x300
   11760:	add	r3, r3, r2
   11764:	str	r2, [sp, #40]	; 0x28
   11768:	ldr	r2, [sp, #24]
   1176c:	strb	r2, [r3, #-8]
   11770:	str	r2, [sp, #16]
   11774:	b	116dc <__assert_fail@plt+0x6ec>
   11778:	ldr	r3, [pc, #360]	; 118e8 <__assert_fail@plt+0x8f8>
   1177c:	ldr	r2, [sp, #20]
   11780:	str	r4, [sp]
   11784:	str	r2, [sp, #4]
   11788:	mov	r1, #1
   1178c:	ldr	r0, [r3]
   11790:	ldr	r2, [pc, #356]	; 118fc <__assert_fail@plt+0x90c>
   11794:	ldr	r3, [sp, #28]
   11798:	bl	10f18 <__fprintf_chk@plt>
   1179c:	ldr	r3, [sp, #56]	; 0x38
   117a0:	orr	r3, r3, #32
   117a4:	str	r3, [sp, #56]	; 0x38
   117a8:	b	1108c <__assert_fail@plt+0x9c>
   117ac:	ldrb	r3, [sp, #48]	; 0x30
   117b0:	tst	r3, #224	; 0xe0
   117b4:	ldreq	r3, [sp, #32]
   117b8:	streq	r3, [sp, #16]
   117bc:	beq	1143c <__assert_fail@plt+0x44c>
   117c0:	ldr	r3, [pc, #288]	; 118e8 <__assert_fail@plt+0x8f8>
   117c4:	ldr	ip, [sp, #32]
   117c8:	ldr	r0, [r3]
   117cc:	str	ip, [sp, #16]
   117d0:	b	115d0 <__assert_fail@plt+0x5e0>
   117d4:	ldrb	r2, [sp, #48]	; 0x30
   117d8:	ldr	r1, [sp, #36]	; 0x24
   117dc:	add	r3, sp, #768	; 0x300
   117e0:	add	r3, r3, r1
   117e4:	ldr	ip, [sp, #20]
   117e8:	tst	r2, #224	; 0xe0
   117ec:	strb	ip, [r3, #-8]
   117f0:	beq	11808 <__assert_fail@plt+0x818>
   117f4:	ldr	r3, [pc, #236]	; 118e8 <__assert_fail@plt+0x8f8>
   117f8:	ldr	r2, [pc, #256]	; 11900 <__assert_fail@plt+0x910>
   117fc:	ldr	r0, [r3]
   11800:	str	r2, [sp, #16]
   11804:	b	115d0 <__assert_fail@plt+0x5e0>
   11808:	ldr	r3, [sp, #20]
   1180c:	str	r3, [sp, #16]
   11810:	b	1143c <__assert_fail@plt+0x44c>
   11814:	ldrb	r3, [sp, #48]	; 0x30
   11818:	tst	r3, #24
   1181c:	bicne	r3, r3, #8
   11820:	biceq	r3, r3, #16
   11824:	orrne	r3, r3, #16
   11828:	orreq	r3, r3, #8
   1182c:	strb	r3, [sp, #48]	; 0x30
   11830:	b	1108c <__assert_fail@plt+0x9c>
   11834:	ldrb	r3, [sp, #48]	; 0x30
   11838:	orr	r3, r3, #2
   1183c:	strb	r3, [sp, #48]	; 0x30
   11840:	b	1108c <__assert_fail@plt+0x9c>
   11844:	ldrb	r3, [sp, #48]	; 0x30
   11848:	orr	r3, r3, #1
   1184c:	strb	r3, [sp, #48]	; 0x30
   11850:	b	1108c <__assert_fail@plt+0x9c>
   11854:	bl	10ef4 <__errno_location@plt>
   11858:	ldr	r3, [sp, #148]	; 0x94
   1185c:	orr	r3, r3, #32
   11860:	str	r3, [sp, #148]	; 0x94
   11864:	ldr	r3, [r0]
   11868:	ldr	r0, [sp, #16]
   1186c:	str	r3, [sp, #156]	; 0x9c
   11870:	bl	10e1c <perror@plt>
   11874:	b	114d8 <__assert_fail@plt+0x4e8>
   11878:	andeq	r8, r2, r0, lsl #28
   1187c:	andeq	r6, r1, r8, ror #5
   11880:	strdeq	r6, [r1], -r0
   11884:	strdeq	r6, [r1], -r8
   11888:	andeq	r6, r1, r0, lsl #6
   1188c:	andeq	r6, r1, ip, lsl #6
   11890:	andeq	r6, r1, r0, lsl r3
   11894:	andeq	r6, r1, r8, lsl r3
   11898:	andeq	r6, r1, r4, lsr #6
   1189c:	andeq	r6, r1, r0, lsr r3
   118a0:	andeq	r6, r1, r0, asr #6
   118a4:	andeq	r6, r1, ip, asr #6
   118a8:	andeq	r6, r1, ip, asr r3
   118ac:	andeq	r6, r1, ip, ror #6
   118b0:	andeq	r6, r1, r0, lsl #7
   118b4:	muleq	r1, r0, r3
   118b8:	muleq	r1, ip, r3
   118bc:	andeq	r6, r1, r8, lsr #7
   118c0:	andeq	r6, r1, ip, lsr #7
   118c4:			; <UNDEFINED> instruction: 0x000163b8
   118c8:			; <UNDEFINED> instruction: 0x000163bc
   118cc:	andeq	r6, r1, r4, asr #7
   118d0:	andeq	r6, r1, r8, asr #7
   118d4:	ldrdeq	r6, [r1], -r4
   118d8:	andeq	r2, r1, ip, lsl #9
   118dc:	andeq	r6, r1, r0, asr r4
   118e0:	andeq	r6, r1, r8, lsr r4
   118e4:	andeq	r6, r1, ip, lsr r4
   118e8:	andeq	r9, r2, r0, lsl r0
   118ec:	andeq	r6, r1, r8, lsr #8
   118f0:	andeq	r6, r1, r4, lsr #8
   118f4:	ldrdeq	r6, [r1], -r8
   118f8:	andeq	r1, r0, r1
   118fc:	andeq	r6, r1, r0, lsl #8
   11900:	andeq	r6, r1, r0, ror #5
   11904:	mov	fp, #0
   11908:	mov	lr, #0
   1190c:	pop	{r1}		; (ldr r1, [sp], #4)
   11910:	mov	r2, sp
   11914:	push	{r2}		; (str r2, [sp, #-4]!)
   11918:	push	{r0}		; (str r0, [sp, #-4]!)
   1191c:	ldr	ip, [pc, #16]	; 11934 <__assert_fail@plt+0x944>
   11920:	push	{ip}		; (str ip, [sp, #-4]!)
   11924:	ldr	r0, [pc, #12]	; 11938 <__assert_fail@plt+0x948>
   11928:	ldr	r3, [pc, #12]	; 1193c <__assert_fail@plt+0x94c>
   1192c:	bl	10e58 <__libc_start_main@plt>
   11930:	bl	10fcc <abort@plt>
   11934:	andeq	r5, r1, r4, lsr #4
   11938:	strdeq	r0, [r1], -ip
   1193c:	andeq	r5, r1, r4, asr #3
   11940:	ldr	r3, [pc, #20]	; 1195c <__assert_fail@plt+0x96c>
   11944:	ldr	r2, [pc, #20]	; 11960 <__assert_fail@plt+0x970>
   11948:	add	r3, pc, r3
   1194c:	ldr	r2, [r3, r2]
   11950:	cmp	r2, #0
   11954:	bxeq	lr
   11958:	b	10e70 <__gmon_start__@plt>
   1195c:	andeq	r7, r1, r4, asr #11
   11960:	andeq	r0, r0, r4, ror #1
   11964:	ldr	r0, [pc, #24]	; 11984 <__assert_fail@plt+0x994>
   11968:	ldr	r3, [pc, #24]	; 11988 <__assert_fail@plt+0x998>
   1196c:	cmp	r3, r0
   11970:	bxeq	lr
   11974:	ldr	r3, [pc, #16]	; 1198c <__assert_fail@plt+0x99c>
   11978:	cmp	r3, #0
   1197c:	bxeq	lr
   11980:	bx	r3
   11984:	andeq	r9, r2, r0, lsl r0
   11988:	andeq	r9, r2, r0, lsl r0
   1198c:	andeq	r0, r0, r0
   11990:	ldr	r0, [pc, #36]	; 119bc <__assert_fail@plt+0x9cc>
   11994:	ldr	r1, [pc, #36]	; 119c0 <__assert_fail@plt+0x9d0>
   11998:	sub	r1, r1, r0
   1199c:	asr	r1, r1, #2
   119a0:	add	r1, r1, r1, lsr #31
   119a4:	asrs	r1, r1, #1
   119a8:	bxeq	lr
   119ac:	ldr	r3, [pc, #16]	; 119c4 <__assert_fail@plt+0x9d4>
   119b0:	cmp	r3, #0
   119b4:	bxeq	lr
   119b8:	bx	r3
   119bc:	andeq	r9, r2, r0, lsl r0
   119c0:	andeq	r9, r2, r0, lsl r0
   119c4:	andeq	r0, r0, r0
   119c8:	push	{r4, lr}
   119cc:	ldr	r4, [pc, #24]	; 119ec <__assert_fail@plt+0x9fc>
   119d0:	ldrb	r3, [r4]
   119d4:	cmp	r3, #0
   119d8:	popne	{r4, pc}
   119dc:	bl	11964 <__assert_fail@plt+0x974>
   119e0:	mov	r3, #1
   119e4:	strb	r3, [r4]
   119e8:	pop	{r4, pc}
   119ec:	andeq	r9, r2, r8, lsl r0
   119f0:	b	11990 <__assert_fail@plt+0x9a0>
   119f4:	push	{r4, lr}
   119f8:	sub	sp, sp, #8
   119fc:	mov	r3, #0
   11a00:	str	r3, [sp, #4]
   11a04:	ldr	r3, [sp, #4]
   11a08:	cmp	r1, r3
   11a0c:	ble	11a68 <__assert_fail@plt+0xa78>
   11a10:	ldr	ip, [sp, #4]
   11a14:	ldr	r3, [sp, #4]
   11a18:	lsl	ip, ip, #1
   11a1c:	add	r4, r3, #1
   11a20:	ldrh	lr, [r0, ip]
   11a24:	str	r4, [sp, #4]
   11a28:	ldr	ip, [sp, #4]
   11a2c:	add	r2, lr, r2
   11a30:	lsl	r3, r3, #1
   11a34:	cmp	ip, r1
   11a38:	strh	r2, [r0, r3]
   11a3c:	asr	r2, r2, #16
   11a40:	blt	11a10 <__assert_fail@plt+0xa20>
   11a44:	add	r3, r2, #1
   11a48:	cmp	r3, #1
   11a4c:	ldr	r3, [sp, #4]
   11a50:	bls	11a78 <__assert_fail@plt+0xa88>
   11a54:	add	r1, r3, #1
   11a58:	lsl	r3, r3, #1
   11a5c:	str	r1, [sp, #4]
   11a60:	strh	r2, [r0, r3]
   11a64:	asr	r2, r2, #16
   11a68:	add	r3, r2, #1
   11a6c:	cmp	r3, #1
   11a70:	ldr	r3, [sp, #4]
   11a74:	bhi	11a54 <__assert_fail@plt+0xa64>
   11a78:	cmp	r2, #0
   11a7c:	beq	11ae0 <__assert_fail@plt+0xaf0>
   11a80:	cmp	r3, #1
   11a84:	ble	11ad0 <__assert_fail@plt+0xae0>
   11a88:	ldr	r3, [sp, #4]
   11a8c:	ldr	r1, [pc, #144]	; 11b24 <__assert_fail@plt+0xb34>
   11a90:	add	r3, r0, r3, lsl #1
   11a94:	ldrh	r2, [r3, #-2]
   11a98:	cmp	r2, r1
   11a9c:	beq	11ab8 <__assert_fail@plt+0xac8>
   11aa0:	b	11ad0 <__assert_fail@plt+0xae0>
   11aa4:	ldr	r3, [sp, #4]
   11aa8:	add	r3, r0, r3, lsl #1
   11aac:	ldrh	r3, [r3, #-2]
   11ab0:	cmp	r3, r2
   11ab4:	bne	11ad0 <__assert_fail@plt+0xae0>
   11ab8:	ldr	r3, [sp, #4]
   11abc:	sub	r3, r3, #1
   11ac0:	str	r3, [sp, #4]
   11ac4:	ldr	r3, [sp, #4]
   11ac8:	cmp	r3, #1
   11acc:	bgt	11aa4 <__assert_fail@plt+0xab4>
   11ad0:	ldr	r0, [sp, #4]
   11ad4:	rsb	r0, r0, #0
   11ad8:	add	sp, sp, #8
   11adc:	pop	{r4, pc}
   11ae0:	cmp	r3, #0
   11ae4:	bgt	11b04 <__assert_fail@plt+0xb14>
   11ae8:	b	11b18 <__assert_fail@plt+0xb28>
   11aec:	ldr	r3, [sp, #4]
   11af0:	sub	r3, r3, #1
   11af4:	str	r3, [sp, #4]
   11af8:	ldr	r3, [sp, #4]
   11afc:	cmp	r3, #0
   11b00:	ble	11b18 <__assert_fail@plt+0xb28>
   11b04:	ldr	r3, [sp, #4]
   11b08:	add	r3, r0, r3, lsl #1
   11b0c:	ldrh	r3, [r3, #-2]
   11b10:	cmp	r3, #0
   11b14:	beq	11aec <__assert_fail@plt+0xafc>
   11b18:	ldr	r0, [sp, #4]
   11b1c:	add	sp, sp, #8
   11b20:	pop	{r4, pc}
   11b24:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   11b28:	push	{r4, r5, r6, lr}
   11b2c:	sub	sp, sp, #8
   11b30:	ldrh	r6, [sp, #24]
   11b34:	str	r3, [sp, #4]
   11b38:	cmp	r6, #0
   11b3c:	bne	11b4c <__assert_fail@plt+0xb5c>
   11b40:	mov	r0, r1
   11b44:	add	sp, sp, #8
   11b48:	pop	{r4, r5, r6, pc}
   11b4c:	ldr	r3, [sp, #4]
   11b50:	cmp	r3, #0
   11b54:	ble	11b40 <__assert_fail@plt+0xb50>
   11b58:	ldr	r3, [sp, #4]
   11b5c:	cmp	r3, #0
   11b60:	mov	r3, #0
   11b64:	ble	11bb8 <__assert_fail@plt+0xbc8>
   11b68:	sub	r4, r0, #2
   11b6c:	mov	ip, r3
   11b70:	cmp	r1, r3
   11b74:	lsl	r0, r3, #1
   11b78:	ldrhgt	lr, [r4, #2]
   11b7c:	addgt	ip, ip, lr
   11b80:	ldr	lr, [sp, #4]
   11b84:	ldr	r5, [sp, #4]
   11b88:	cmp	lr, r3
   11b8c:	add	r3, r3, #1
   11b90:	ldrhgt	r0, [r2, r0]
   11b94:	mlagt	ip, r6, r0, ip
   11b98:	strh	ip, [r4, #2]!
   11b9c:	lsrs	ip, ip, #16
   11ba0:	movne	lr, #1
   11ba4:	moveq	lr, #0
   11ba8:	cmp	r5, r3
   11bac:	orrgt	lr, lr, #1
   11bb0:	cmp	lr, #0
   11bb4:	bne	11b70 <__assert_fail@plt+0xb80>
   11bb8:	cmp	r1, r3
   11bbc:	movlt	r1, r3
   11bc0:	mov	r0, r1
   11bc4:	add	sp, sp, #8
   11bc8:	pop	{r4, r5, r6, pc}
   11bcc:	push	{r4, lr}
   11bd0:	cmp	r1, #0
   11bd4:	ldr	r4, [pc, #56]	; 11c14 <__assert_fail@plt+0xc24>
   11bd8:	ldm	r4, {r2, ip}
   11bdc:	beq	11c0c <__assert_fail@plt+0xc1c>
   11be0:	add	r1, r0, r1
   11be4:	lsr	r3, r2, #25
   11be8:	orr	r3, r3, ip, lsl #7
   11bec:	eor	r3, r3, r2, lsr #12
   11bf0:	strb	r3, [r0], #1
   11bf4:	lsr	lr, r2, #24
   11bf8:	uxtb	r3, r3
   11bfc:	cmp	r0, r1
   11c00:	orr	ip, lr, ip, lsl #8
   11c04:	orr	r2, r3, r2, lsl #8
   11c08:	bne	11be4 <__assert_fail@plt+0xbf4>
   11c0c:	stm	r4, {r2, ip}
   11c10:	pop	{r4, pc}
   11c14:	andeq	r9, r2, r8
   11c18:	mvn	r3, r0
   11c1c:	ldr	r1, [pc, #64]	; 11c64 <__assert_fail@plt+0xc74>
   11c20:	lsr	r3, r3, #24
   11c24:	ldr	r3, [r1, r3, lsl #2]
   11c28:	eor	r3, r3, #-16777216	; 0xff000000
   11c2c:	mvn	r3, r3
   11c30:	eor	r2, r3, r0, lsr #16
   11c34:	uxtb	r2, r2
   11c38:	ldr	r2, [r1, r2, lsl #2]
   11c3c:	eor	r3, r2, r3, lsr #8
   11c40:	eor	r2, r3, r0, lsr #8
   11c44:	uxtb	r2, r2
   11c48:	ldr	r2, [r1, r2, lsl #2]
   11c4c:	eor	r2, r2, r3, lsr #8
   11c50:	eor	r3, r0, r2
   11c54:	uxtb	r3, r3
   11c58:	ldr	r0, [r1, r3, lsl #2]
   11c5c:	eor	r0, r0, r2, lsr #8
   11c60:	bx	lr
   11c64:	andeq	r5, r1, r4, lsr r2
   11c68:	add	ip, r1, #1
   11c6c:	and	r3, r1, #7
   11c70:	add	r2, r1, #2
   11c74:	and	ip, ip, #7
   11c78:	ldrb	r3, [r0, r3]
   11c7c:	and	r2, r2, #7
   11c80:	ldrb	ip, [r0, ip]
   11c84:	add	r1, r1, #3
   11c88:	ldrb	r2, [r0, r2]
   11c8c:	and	r1, r1, #7
   11c90:	lsl	r3, r3, #24
   11c94:	ldrb	r0, [r0, r1]
   11c98:	add	r3, r3, ip, lsl #16
   11c9c:	add	r3, r3, r2, lsl #8
   11ca0:	add	r0, r3, r0
   11ca4:	bx	lr
   11ca8:	sub	r1, r1, #2
   11cac:	push	{r4, r5, r6, lr}
   11cb0:	mov	r3, r0
   11cb4:	sub	sp, sp, #24
   11cb8:	cmp	r1, #5
   11cbc:	ldrls	pc, [pc, r1, lsl #2]
   11cc0:	b	11d94 <__assert_fail@plt+0xda4>
   11cc4:	andeq	r1, r1, r4, lsl #27
   11cc8:	ldrdeq	r1, [r1], -ip
   11ccc:	andeq	r1, r1, r8, lsl #26
   11cd0:	andeq	r1, r1, r0, lsl sp
   11cd4:	andeq	r1, r1, r0, ror #26
   11cd8:	andeq	r1, r1, ip, ror #26
   11cdc:	ldr	r4, [pc, #184]	; 11d9c <__assert_fail@plt+0xdac>
   11ce0:	ldr	r1, [pc, #184]	; 11da0 <__assert_fail@plt+0xdb0>
   11ce4:	str	r2, [sp, #4]
   11ce8:	str	r4, [sp]
   11cec:	ldr	r2, [pc, #176]	; 11da4 <__assert_fail@plt+0xdb4>
   11cf0:	ldr	r3, [r3, #4]
   11cf4:	ldr	r0, [r1]
   11cf8:	mov	r1, #1
   11cfc:	bl	10f18 <__fprintf_chk@plt>
   11d00:	add	sp, sp, #24
   11d04:	pop	{r4, r5, r6, pc}
   11d08:	ldr	r4, [pc, #152]	; 11da8 <__assert_fail@plt+0xdb8>
   11d0c:	b	11ce0 <__assert_fail@plt+0xcf0>
   11d10:	ldr	r0, [r0, #16]
   11d14:	ldr	r4, [pc, #144]	; 11dac <__assert_fail@plt+0xdbc>
   11d18:	cmp	r0, #0
   11d1c:	beq	11ce0 <__assert_fail@plt+0xcf0>
   11d20:	ldr	r1, [pc, #120]	; 11da0 <__assert_fail@plt+0xdb0>
   11d24:	str	r2, [sp, #20]
   11d28:	ldr	r6, [r3, #4]
   11d2c:	ldr	r5, [r1]
   11d30:	bl	10e64 <strerror@plt>
   11d34:	ldr	r2, [sp, #20]
   11d38:	mov	r3, r6
   11d3c:	str	r2, [sp, #4]
   11d40:	str	r4, [sp]
   11d44:	ldr	r2, [pc, #100]	; 11db0 <__assert_fail@plt+0xdc0>
   11d48:	mov	r1, #1
   11d4c:	str	r0, [sp, #8]
   11d50:	mov	r0, r5
   11d54:	bl	10f18 <__fprintf_chk@plt>
   11d58:	add	sp, sp, #24
   11d5c:	pop	{r4, r5, r6, pc}
   11d60:	ldr	r0, [r0, #20]
   11d64:	ldr	r4, [pc, #72]	; 11db4 <__assert_fail@plt+0xdc4>
   11d68:	b	11d18 <__assert_fail@plt+0xd28>
   11d6c:	ldr	r0, [r0, #16]
   11d70:	cmp	r0, #0
   11d74:	bne	11d8c <__assert_fail@plt+0xd9c>
   11d78:	ldr	r0, [r3, #20]
   11d7c:	ldr	r4, [pc, #52]	; 11db8 <__assert_fail@plt+0xdc8>
   11d80:	b	11d18 <__assert_fail@plt+0xd28>
   11d84:	ldr	r4, [pc, #48]	; 11dbc <__assert_fail@plt+0xdcc>
   11d88:	b	11ce0 <__assert_fail@plt+0xcf0>
   11d8c:	ldr	r4, [pc, #36]	; 11db8 <__assert_fail@plt+0xdc8>
   11d90:	b	11d20 <__assert_fail@plt+0xd30>
   11d94:	ldr	r4, [pc, #36]	; 11dc0 <__assert_fail@plt+0xdd0>
   11d98:	b	11ce0 <__assert_fail@plt+0xcf0>
   11d9c:	andeq	r5, r1, r4, lsl #20
   11da0:	andeq	r9, r2, r0, lsl r0
   11da4:	andeq	r5, r1, r8, lsr sl
   11da8:	andeq	r5, r1, r0, lsr #20
   11dac:	ldrdeq	r5, [r1], -r8
   11db0:	andeq	r5, r1, r8, lsr #20
   11db4:	andeq	r5, r1, r8, ror #19
   11db8:	andeq	r5, r1, r4, asr #19
   11dbc:	andeq	r5, r1, r0, lsl sl
   11dc0:	strdeq	r5, [r1], -r4
   11dc4:	push	{r4, r5, r6, lr}
   11dc8:	mov	r5, r0
   11dcc:	mov	r6, #0
   11dd0:	b	11df4 <__assert_fail@plt+0xe04>
   11dd4:	cmn	r0, #1
   11dd8:	bne	11e14 <__assert_fail@plt+0xe24>
   11ddc:	bl	10ef4 <__errno_location@plt>
   11de0:	ldr	r3, [r0]
   11de4:	mov	r4, r0
   11de8:	cmp	r3, #4
   11dec:	bne	11e4c <__assert_fail@plt+0xe5c>
   11df0:	str	r6, [r0]
   11df4:	ldr	r0, [r5, #52]	; 0x34
   11df8:	bl	10fd8 <getc@plt>
   11dfc:	cmp	r0, #255	; 0xff
   11e00:	bhi	11dd4 <__assert_fail@plt+0xde4>
   11e04:	ldr	r3, [r5, #480]	; 0x1e0
   11e08:	add	r3, r3, #1
   11e0c:	str	r3, [r5, #480]	; 0x1e0
   11e10:	pop	{r4, r5, r6, pc}
   11e14:	ldr	r3, [r5, #12]
   11e18:	mov	r2, #34	; 0x22
   11e1c:	orr	r3, r3, #64	; 0x40
   11e20:	str	r2, [r5, #16]
   11e24:	str	r3, [r5, #12]
   11e28:	ldr	r2, [pc, #80]	; 11e80 <__assert_fail@plt+0xe90>
   11e2c:	mov	r1, #7
   11e30:	mov	r0, r5
   11e34:	bl	11ca8 <__assert_fail@plt+0xcb8>
   11e38:	ldr	r3, [r5, #12]
   11e3c:	mvn	r0, #0
   11e40:	orr	r3, r3, #8
   11e44:	str	r3, [r5, #12]
   11e48:	pop	{r4, r5, r6, pc}
   11e4c:	ldr	r0, [r5, #52]	; 0x34
   11e50:	bl	10df8 <ferror@plt>
   11e54:	subs	r6, r0, #0
   11e58:	ldrne	r3, [r4]
   11e5c:	strne	r3, [r5, #16]
   11e60:	bne	11e38 <__assert_fail@plt+0xe48>
   11e64:	ldr	r0, [r5, #52]	; 0x34
   11e68:	bl	10e94 <feof@plt>
   11e6c:	cmp	r0, #0
   11e70:	moveq	r3, #33	; 0x21
   11e74:	strne	r6, [r5, #16]
   11e78:	streq	r3, [r5, #16]
   11e7c:	b	11e38 <__assert_fail@plt+0xe48>
   11e80:	andeq	r5, r1, r4, asr #20
   11e84:	push	{r4, r5, r6, r7, r8, lr}
   11e88:	mov	r5, #0
   11e8c:	mov	r6, r0
   11e90:	mov	r7, r1
   11e94:	mov	r4, r5
   11e98:	mov	r0, r6
   11e9c:	bl	11dc4 <__assert_fail@plt+0xdd4>
   11ea0:	cmn	r0, #1
   11ea4:	beq	11ebc <__assert_fail@plt+0xecc>
   11ea8:	add	r4, r4, #1
   11eac:	cmp	r4, #4
   11eb0:	add	r5, r0, r5, lsl #8
   11eb4:	bne	11e98 <__assert_fail@plt+0xea8>
   11eb8:	str	r5, [r7]
   11ebc:	mov	r0, r4
   11ec0:	pop	{r4, r5, r6, r7, r8, pc}
   11ec4:	push	{r4, lr}
   11ec8:	mov	r4, r1
   11ecc:	bl	10f54 <png_get_error_ptr@plt>
   11ed0:	ldr	r3, [r0]
   11ed4:	ldrb	r3, [r3]
   11ed8:	tst	r3, #2
   11edc:	popeq	{r4, pc}
   11ee0:	mov	r2, r4
   11ee4:	mov	r1, #1
   11ee8:	pop	{r4, lr}
   11eec:	b	11ca8 <__assert_fail@plt+0xcb8>
   11ef0:	ldr	r3, [pc, #496]	; 120e8 <__assert_fail@plt+0x10f8>
   11ef4:	push	{r4, r5, r6, r7, r8, lr}
   11ef8:	sub	sp, sp, #24
   11efc:	mov	r1, r0
   11f00:	str	r0, [sp, #4]
   11f04:	ldr	r0, [r3]
   11f08:	mov	ip, #0
   11f0c:	ldr	r3, [pc, #472]	; 120ec <__assert_fail@plt+0x10fc>
   11f10:	str	r0, [sp, #20]
   11f14:	ldr	r2, [pc, #468]	; 120f0 <__assert_fail@plt+0x1100>
   11f18:	ldr	r0, [pc, #468]	; 120f4 <__assert_fail@plt+0x1104>
   11f1c:	str	ip, [sp, #12]
   11f20:	bl	10fe4 <png_create_read_struct@plt>
   11f24:	ldr	r3, [sp, #4]
   11f28:	cmp	r0, #0
   11f2c:	str	r0, [sp, #8]
   11f30:	beq	1207c <__assert_fail@plt+0x108c>
   11f34:	add	r0, r3, #64	; 0x40
   11f38:	bl	10dbc <_setjmp@plt>
   11f3c:	str	r0, [sp, #16]
   11f40:	ldr	r6, [sp, #16]
   11f44:	cmp	r6, #0
   11f48:	beq	11f7c <__assert_fail@plt+0xf8c>
   11f4c:	add	r0, sp, #8
   11f50:	mov	r2, #0
   11f54:	add	r1, sp, #12
   11f58:	bl	10f00 <png_destroy_read_struct@plt>
   11f5c:	ldr	r0, [sp, #16]
   11f60:	ldr	r3, [pc, #384]	; 120e8 <__assert_fail@plt+0x10f8>
   11f64:	ldr	r2, [sp, #20]
   11f68:	ldr	r3, [r3]
   11f6c:	cmp	r2, r3
   11f70:	bne	120e4 <__assert_fail@plt+0x10f4>
   11f74:	add	sp, sp, #24
   11f78:	pop	{r4, r5, r6, r7, r8, pc}
   11f7c:	mvn	r2, #-2147483648	; 0x80000000
   11f80:	mov	r1, r2
   11f84:	ldr	r0, [sp, #8]
   11f88:	bl	10f84 <png_set_user_limits@plt>
   11f8c:	mov	r1, r6
   11f90:	ldr	r0, [sp, #8]
   11f94:	bl	10f30 <png_set_chunk_cache_max@plt>
   11f98:	mov	r1, r6
   11f9c:	ldr	r0, [sp, #8]
   11fa0:	bl	10ed0 <png_set_chunk_malloc_max@plt>
   11fa4:	ldr	r1, [sp, #4]
   11fa8:	ldr	r2, [pc, #328]	; 120f8 <__assert_fail@plt+0x1108>
   11fac:	ldr	r0, [sp, #8]
   11fb0:	bl	10e40 <png_set_read_fn@plt>
   11fb4:	ldr	r0, [sp, #8]
   11fb8:	bl	10ec4 <png_create_info_struct@plt>
   11fbc:	cmp	r0, #0
   11fc0:	mov	r1, r0
   11fc4:	str	r0, [sp, #12]
   11fc8:	beq	120d8 <__assert_fail@plt+0x10e8>
   11fcc:	ldr	r3, [sp, #4]
   11fd0:	ldr	r3, [r3]
   11fd4:	ldrb	r3, [r3]
   11fd8:	tst	r3, #224	; 0xe0
   11fdc:	bne	120a4 <__assert_fail@plt+0x10b4>
   11fe0:	ldr	r0, [sp, #8]
   11fe4:	bl	10ee8 <png_read_info@plt>
   11fe8:	ldrd	r0, [sp, #8]
   11fec:	bl	10f9c <png_get_image_height@plt>
   11ff0:	mov	r8, r0
   11ff4:	ldr	r0, [sp, #8]
   11ff8:	bl	10ea0 <png_set_interlace_handling@plt>
   11ffc:	mov	r7, r0
   12000:	ldr	r0, [sp, #8]
   12004:	bl	10fa8 <png_start_read_image@plt>
   12008:	cmp	r7, #0
   1200c:	ble	12044 <__assert_fail@plt+0x1054>
   12010:	mov	r5, #0
   12014:	mov	r4, r8
   12018:	b	12030 <__assert_fail@plt+0x1040>
   1201c:	mov	r2, r5
   12020:	mov	r1, r5
   12024:	ldr	r0, [sp, #8]
   12028:	bl	10edc <png_read_row@plt>
   1202c:	sub	r4, r4, #1
   12030:	cmp	r4, #0
   12034:	bne	1201c <__assert_fail@plt+0x102c>
   12038:	add	r6, r6, #1
   1203c:	cmp	r7, r6
   12040:	bne	12014 <__assert_fail@plt+0x1024>
   12044:	ldr	r3, [sp, #4]
   12048:	ldr	r3, [r3]
   1204c:	ldrb	r3, [r3]
   12050:	tst	r3, #224	; 0xe0
   12054:	beq	12070 <__assert_fail@plt+0x1080>
   12058:	ldr	r3, [pc, #156]	; 120fc <__assert_fail@plt+0x110c>
   1205c:	mov	r2, #5
   12060:	mov	r1, #1
   12064:	ldr	r3, [r3]
   12068:	ldr	r0, [pc, #144]	; 12100 <__assert_fail@plt+0x1110>
   1206c:	bl	10e34 <fwrite@plt>
   12070:	ldrd	r0, [sp, #8]
   12074:	bl	10dec <png_read_end@plt>
   12078:	b	11f4c <__assert_fail@plt+0xf5c>
   1207c:	ldr	r3, [r3]
   12080:	ldrb	r3, [r3]
   12084:	tst	r3, #1
   12088:	bne	120c4 <__assert_fail@plt+0x10d4>
   1208c:	ldr	r2, [sp, #4]
   12090:	mov	r0, #2
   12094:	ldr	r3, [r2, #12]
   12098:	orr	r3, r3, #64	; 0x40
   1209c:	str	r3, [r2, #12]
   120a0:	b	11f60 <__assert_fail@plt+0xf70>
   120a4:	ldr	r3, [pc, #80]	; 120fc <__assert_fail@plt+0x110c>
   120a8:	mov	r1, #1
   120ac:	mov	r2, #6
   120b0:	ldr	r3, [r3]
   120b4:	ldr	r0, [pc, #72]	; 12104 <__assert_fail@plt+0x1114>
   120b8:	bl	10e34 <fwrite@plt>
   120bc:	ldr	r1, [sp, #12]
   120c0:	b	11fe0 <__assert_fail@plt+0xff0>
   120c4:	ldr	r2, [pc, #60]	; 12108 <__assert_fail@plt+0x1118>
   120c8:	mov	r1, #2
   120cc:	ldr	r0, [sp, #4]
   120d0:	bl	11ca8 <__assert_fail@plt+0xcb8>
   120d4:	b	1208c <__assert_fail@plt+0x109c>
   120d8:	ldr	r1, [pc, #44]	; 1210c <__assert_fail@plt+0x111c>
   120dc:	ldr	r0, [sp, #8]
   120e0:	bl	10dc8 <png_error@plt>
   120e4:	bl	10e10 <__stack_chk_fail@plt>
   120e8:	andeq	r8, r2, r0, lsl #28
   120ec:	andeq	r1, r1, r4, asr #29
   120f0:	andeq	r2, r1, r8, lsr #7
   120f4:	andeq	r5, r1, r0, asr sl
   120f8:	ldrdeq	r4, [r1], -r0
   120fc:	andeq	r9, r2, r0, lsl r0
   12100:	muleq	r1, ip, sl
   12104:	muleq	r1, r4, sl
   12108:	andeq	r5, r1, r8, asr sl
   1210c:	andeq	r5, r1, r4, ror sl
   12110:	lsr	r3, r0, #24
   12114:	tst	r3, #32
   12118:	and	r3, r3, #31
   1211c:	ldrne	r2, [pc, #116]	; 12198 <__assert_fail@plt+0x11a8>
   12120:	ldreq	r2, [pc, #116]	; 1219c <__assert_fail@plt+0x11ac>
   12124:	push	{r4, r5, r6, lr}
   12128:	mov	r4, r0
   1212c:	ldrb	r0, [r2, r3]
   12130:	mov	r5, r1
   12134:	bl	10f78 <putc@plt>
   12138:	lsr	r3, r4, #16
   1213c:	tst	r3, #32
   12140:	and	r3, r3, #31
   12144:	ldrne	r2, [pc, #76]	; 12198 <__assert_fail@plt+0x11a8>
   12148:	ldreq	r2, [pc, #76]	; 1219c <__assert_fail@plt+0x11ac>
   1214c:	mov	r1, r5
   12150:	ldrb	r0, [r2, r3]
   12154:	bl	10f78 <putc@plt>
   12158:	lsr	r3, r4, #8
   1215c:	tst	r3, #32
   12160:	and	r3, r3, #31
   12164:	ldrne	r2, [pc, #44]	; 12198 <__assert_fail@plt+0x11a8>
   12168:	ldreq	r2, [pc, #44]	; 1219c <__assert_fail@plt+0x11ac>
   1216c:	mov	r1, r5
   12170:	ldrb	r0, [r2, r3]
   12174:	bl	10f78 <putc@plt>
   12178:	tst	r4, #32
   1217c:	and	r4, r4, #31
   12180:	ldrne	r3, [pc, #16]	; 12198 <__assert_fail@plt+0x11a8>
   12184:	ldreq	r3, [pc, #16]	; 1219c <__assert_fail@plt+0x11ac>
   12188:	mov	r1, r5
   1218c:	ldrb	r0, [r3, r4]
   12190:	pop	{r4, r5, r6, lr}
   12194:	b	10f78 <putc@plt>
   12198:	andeq	r5, r1, r4, lsr #21
   1219c:	andeq	r5, r1, r8, asr #21
   121a0:	push	{r4, r5, r6, r7, lr}
   121a4:	sub	sp, sp, #12
   121a8:	ldrb	r3, [r0]
   121ac:	cmp	r3, #0
   121b0:	str	r3, [sp, #4]
   121b4:	beq	12224 <__assert_fail@plt+0x1234>
   121b8:	mov	r4, r0
   121bc:	mov	r5, r1
   121c0:	bl	10e7c <__ctype_b_loc@plt>
   121c4:	ldr	r7, [pc, #112]	; 1223c <__assert_fail@plt+0x124c>
   121c8:	ldr	r3, [sp, #4]
   121cc:	mov	r6, r0
   121d0:	b	121ec <__assert_fail@plt+0x11fc>
   121d4:	mov	r1, r5
   121d8:	mov	r0, #95	; 0x5f
   121dc:	bl	10f78 <putc@plt>
   121e0:	ldrb	r3, [r4, #1]!
   121e4:	cmp	r3, #0
   121e8:	beq	12224 <__assert_fail@plt+0x1234>
   121ec:	ldr	r1, [r6]
   121f0:	lsl	r2, r3, #1
   121f4:	ldrh	ip, [r1, r2]
   121f8:	tst	ip, #32768	; 0x8000
   121fc:	bne	1222c <__assert_fail@plt+0x123c>
   12200:	tst	ip, #8192	; 0x2000
   12204:	mov	r2, r7
   12208:	mov	r1, #1
   1220c:	mov	r0, r5
   12210:	bne	121d4 <__assert_fail@plt+0x11e4>
   12214:	bl	10f18 <__fprintf_chk@plt>
   12218:	ldrb	r3, [r4, #1]!
   1221c:	cmp	r3, #0
   12220:	bne	121ec <__assert_fail@plt+0x11fc>
   12224:	add	sp, sp, #12
   12228:	pop	{r4, r5, r6, r7, pc}
   1222c:	mov	r0, r3
   12230:	mov	r1, r5
   12234:	bl	10f78 <putc@plt>
   12238:	b	121e0 <__assert_fail@plt+0x11f0>
   1223c:	andeq	r5, r1, ip, ror #21
   12240:	ldr	r3, [r0]
   12244:	push	{r7, lr}
   12248:	mov	r4, r0
   1224c:	ldrb	ip, [r3]
   12250:	mov	r6, r1
   12254:	mov	r7, r2
   12258:	tst	ip, #1
   1225c:	bne	12378 <__assert_fail@plt+0x1388>
   12260:	ldrb	r3, [r3]
   12264:	lsr	r3, r3, #3
   12268:	and	r3, r3, #3
   1226c:	cmp	r3, #1
   12270:	bls	1228c <__assert_fail@plt+0x129c>
   12274:	ldr	r3, [r4, #12]
   12278:	mov	r1, r6
   1227c:	orr	r3, r3, #16
   12280:	str	r3, [r4, #12]
   12284:	add	r0, r4, #64	; 0x40
   12288:	bl	10f3c <__longjmp_chk@plt>
   1228c:	ldr	r3, [r4, #492]	; 0x1ec
   12290:	cmp	r3, #0
   12294:	beq	12350 <__assert_fail@plt+0x1360>
   12298:	ldr	r0, [r3, #56]	; 0x38
   1229c:	ldr	r3, [pc, #224]	; 12384 <__assert_fail@plt+0x1394>
   122a0:	cmp	r6, #2
   122a4:	cmple	r0, r3
   122a8:	bne	12354 <__assert_fail@plt+0x1364>
   122ac:	ldr	r2, [r4, #484]	; 0x1e4
   122b0:	cmp	r2, #8
   122b4:	movne	r0, r3
   122b8:	beq	1235c <__assert_fail@plt+0x136c>
   122bc:	ldr	r5, [pc, #196]	; 12388 <__assert_fail@plt+0x1398>
   122c0:	ldr	r1, [r5]
   122c4:	bl	12110 <__assert_fail@plt+0x1120>
   122c8:	ldr	r3, [pc, #188]	; 1238c <__assert_fail@plt+0x139c>
   122cc:	ldr	r2, [r4, #12]
   122d0:	add	r3, r3, r6, lsl #2
   122d4:	ldr	r1, [pc, #180]	; 12390 <__assert_fail@plt+0x13a0>
   122d8:	ldr	r3, [r3, #1020]	; 0x3fc
   122dc:	mov	r0, #1
   122e0:	bl	10f0c <__printf_chk@plt>
   122e4:	ldr	r0, [r4, #16]
   122e8:	bl	10e64 <strerror@plt>
   122ec:	ldr	r1, [r5]
   122f0:	bl	121a0 <__assert_fail@plt+0x11b0>
   122f4:	ldr	r1, [r5]
   122f8:	mov	r0, #32
   122fc:	bl	10f78 <putc@plt>
   12300:	ldr	r0, [r4, #20]
   12304:	bl	10e64 <strerror@plt>
   12308:	ldr	r1, [r5]
   1230c:	bl	121a0 <__assert_fail@plt+0x11b0>
   12310:	ldr	r1, [r5]
   12314:	mov	r0, #32
   12318:	bl	10f78 <putc@plt>
   1231c:	mov	r0, r7
   12320:	ldr	r1, [r5]
   12324:	bl	121a0 <__assert_fail@plt+0x11b0>
   12328:	ldr	r1, [r5]
   1232c:	mov	r0, #32
   12330:	bl	10f78 <putc@plt>
   12334:	ldr	r1, [r5]
   12338:	ldr	r0, [r4, #4]
   1233c:	bl	10fb4 <fputs@plt>
   12340:	ldr	r1, [r5]
   12344:	mov	r0, #10
   12348:	bl	10f78 <putc@plt>
   1234c:	b	12274 <__assert_fail@plt+0x1284>
   12350:	ldr	r0, [r4, #472]	; 0x1d8
   12354:	cmp	r0, #0
   12358:	bne	122bc <__assert_fail@plt+0x12cc>
   1235c:	ldr	r5, [pc, #36]	; 12388 <__assert_fail@plt+0x1398>
   12360:	mov	r2, #4
   12364:	mov	r1, #1
   12368:	ldr	r3, [r5]
   1236c:	ldr	r0, [pc, #32]	; 12394 <__assert_fail@plt+0x13a4>
   12370:	bl	10e34 <fwrite@plt>
   12374:	b	122c8 <__assert_fail@plt+0x12d8>
   12378:	bl	11ca8 <__assert_fail@plt+0xcb8>
   1237c:	ldr	r3, [r4]
   12380:	b	12260 <__assert_fail@plt+0x1270>
   12384:	stmdbmi	r4, {r2, r4, r6, r8, lr}^
   12388:	andeq	r9, r2, r4, lsl r0
   1238c:	andeq	r5, r1, r4, lsr r2
   12390:	strdeq	r5, [r1], -ip
   12394:	strdeq	r5, [r1], -r4
   12398:	mov	r2, r1
   1239c:	push	{r4, lr}
   123a0:	mov	r1, #4
   123a4:	bl	12240 <__assert_fail@plt+0x1250>
   123a8:	push	{r4, lr}
   123ac:	mov	r4, r1
   123b0:	bl	10f54 <png_get_error_ptr@plt>
   123b4:	mov	r2, r4
   123b8:	mov	r1, #2
   123bc:	bl	12240 <__assert_fail@plt+0x1250>
   123c0:	push	{r4, r5, r6, lr}
   123c4:	mov	r3, r0
   123c8:	ldr	r5, [pc, #76]	; 1241c <__assert_fail@plt+0x142c>
   123cc:	ldr	r4, [pc, #76]	; 12420 <__assert_fail@plt+0x1430>
   123d0:	ldr	r2, [pc, #76]	; 12424 <__assert_fail@plt+0x1434>
   123d4:	ldr	r0, [r5]
   123d8:	mov	r1, #1
   123dc:	bl	10f18 <__fprintf_chk@plt>
   123e0:	add	r6, r4, #612	; 0x264
   123e4:	ldr	r0, [pc, #60]	; 12428 <__assert_fail@plt+0x1438>
   123e8:	b	123f0 <__assert_fail@plt+0x1400>
   123ec:	ldr	r0, [r4, #4]!
   123f0:	cmp	r0, #0
   123f4:	ldr	r1, [r5]
   123f8:	beq	12404 <__assert_fail@plt+0x1414>
   123fc:	bl	10fb4 <fputs@plt>
   12400:	ldr	r1, [r5]
   12404:	mov	r0, #10
   12408:	bl	10f60 <fputc@plt>
   1240c:	cmp	r4, r6
   12410:	bne	123ec <__assert_fail@plt+0x13fc>
   12414:	mov	r0, #255	; 0xff
   12418:	bl	10e88 <exit@plt>
   1241c:	andeq	r9, r2, r0, lsl r0
   12420:	andeq	r5, r1, r0, asr r6
   12424:	andeq	r5, r1, r4, asr fp
   12428:	andeq	r5, r1, ip, lsl #22
   1242c:	cmp	r1, #0
   12430:	push	{r4, r5, r6, lr}
   12434:	mov	r4, r2
   12438:	mov	r5, r0
   1243c:	bgt	12464 <__assert_fail@plt+0x1474>
   12440:	cmp	r2, #0
   12444:	subne	r3, r0, #2
   12448:	movne	r0, #0
   1244c:	beq	12484 <__assert_fail@plt+0x1494>
   12450:	strh	r4, [r3, #2]!
   12454:	lsrs	r4, r4, #16
   12458:	add	r0, r0, #1
   1245c:	bne	12450 <__assert_fail@plt+0x1460>
   12460:	pop	{r4, r5, r6, pc}
   12464:	uxth	r2, r2
   12468:	bl	119f4 <__assert_fail@plt+0xa04>
   1246c:	lsr	r2, r4, #16
   12470:	sub	r1, r0, #1
   12474:	add	r0, r5, #2
   12478:	bl	119f4 <__assert_fail@plt+0xa04>
   1247c:	add	r0, r0, #1
   12480:	pop	{r4, r5, r6, pc}
   12484:	mov	r0, r2
   12488:	pop	{r4, r5, r6, pc}
   1248c:	cmp	r1, #0
   12490:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12494:	mov	r4, r0
   12498:	ldr	r5, [r0, #500]	; 0x1f4
   1249c:	beq	12508 <__assert_fail@plt+0x1518>
   124a0:	ldr	r3, [r0, #496]	; 0x1f0
   124a4:	cmp	r3, #0
   124a8:	bne	12560 <__assert_fail@plt+0x1570>
   124ac:	ldr	r6, [r0, #492]	; 0x1ec
   124b0:	add	r7, r5, #588	; 0x24c
   124b4:	cmp	r6, #0
   124b8:	bne	12588 <__assert_fail@plt+0x1598>
   124bc:	mov	r1, #32
   124c0:	mov	r0, r7
   124c4:	bl	11bcc <__assert_fail@plt+0xbdc>
   124c8:	ldr	r3, [r4]
   124cc:	mov	r1, r6
   124d0:	add	r2, r3, #12
   124d4:	str	r3, [r5, #592]	; 0x250
   124d8:	str	r4, [r5, #588]	; 0x24c
   124dc:	mov	r0, r4
   124e0:	str	r6, [r3, #20]
   124e4:	ldr	r3, [r4, #504]	; 0x1f8
   124e8:	str	r2, [r5, #600]	; 0x258
   124ec:	str	r2, [r5, #596]	; 0x254
   124f0:	blx	r3
   124f4:	ldr	r3, [r4, #492]	; 0x1ec
   124f8:	cmp	r3, #0
   124fc:	beq	1259c <__assert_fail@plt+0x15ac>
   12500:	str	r7, [r4, #496]	; 0x1f0
   12504:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12508:	ldr	r6, [r0, #492]	; 0x1ec
   1250c:	cmp	r6, #0
   12510:	bne	12574 <__assert_fail@plt+0x1584>
   12514:	add	r7, r5, #512	; 0x200
   12518:	mov	r0, r7
   1251c:	mov	r1, #76	; 0x4c
   12520:	bl	11bcc <__assert_fail@plt+0xbdc>
   12524:	mov	r3, r4
   12528:	ldr	r8, [r4, #468]	; 0x1d4
   1252c:	ldr	r9, [r3], #456	; 0x1c8
   12530:	ldr	lr, [r4, #472]	; 0x1d8
   12534:	add	ip, r5, #552	; 0x228
   12538:	ldm	r3, {r0, r1, r2}
   1253c:	str	r4, [r5, #512]	; 0x200
   12540:	str	r9, [r5, #516]	; 0x204
   12544:	stm	ip, {r0, r1, r2}
   12548:	str	r8, [r5, #564]	; 0x234
   1254c:	str	lr, [r5, #568]	; 0x238
   12550:	str	r6, [r5, #532]	; 0x214
   12554:	str	r6, [r5, #548]	; 0x224
   12558:	str	r7, [r4, #492]	; 0x1ec
   1255c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12560:	ldr	r3, [pc, #72]	; 125b0 <__assert_fail@plt+0x15c0>
   12564:	ldr	r2, [pc, #72]	; 125b4 <__assert_fail@plt+0x15c4>
   12568:	ldr	r1, [pc, #72]	; 125b8 <__assert_fail@plt+0x15c8>
   1256c:	ldr	r0, [pc, #72]	; 125bc <__assert_fail@plt+0x15cc>
   12570:	bl	10ff0 <__assert_fail@plt>
   12574:	ldr	r3, [pc, #52]	; 125b0 <__assert_fail@plt+0x15c0>
   12578:	ldr	r2, [pc, #64]	; 125c0 <__assert_fail@plt+0x15d0>
   1257c:	ldr	r1, [pc, #52]	; 125b8 <__assert_fail@plt+0x15c8>
   12580:	ldr	r0, [pc, #60]	; 125c4 <__assert_fail@plt+0x15d4>
   12584:	bl	10ff0 <__assert_fail@plt>
   12588:	ldr	r3, [pc, #56]	; 125c8 <__assert_fail@plt+0x15d8>
   1258c:	ldr	r2, [pc, #56]	; 125cc <__assert_fail@plt+0x15dc>
   12590:	ldr	r1, [pc, #32]	; 125b8 <__assert_fail@plt+0x15c8>
   12594:	ldr	r0, [pc, #40]	; 125c4 <__assert_fail@plt+0x15d4>
   12598:	bl	10ff0 <__assert_fail@plt>
   1259c:	ldr	r3, [pc, #36]	; 125c8 <__assert_fail@plt+0x15d8>
   125a0:	ldr	r2, [pc, #40]	; 125d0 <__assert_fail@plt+0x15e0>
   125a4:	ldr	r1, [pc, #12]	; 125b8 <__assert_fail@plt+0x15c8>
   125a8:	ldr	r0, [pc, #36]	; 125d4 <__assert_fail@plt+0x15e4>
   125ac:	bl	10ff0 <__assert_fail@plt>
   125b0:			; <UNDEFINED> instruction: 0x000158b8
   125b4:	andeq	r0, r0, r2, ror #27
   125b8:	andeq	r5, r1, r4, ror fp
   125bc:	andeq	r5, r1, ip, lsl #23
   125c0:	andeq	r0, r0, r8, ror #27
   125c4:	andeq	r5, r1, r0, lsr #23
   125c8:	andeq	r5, r1, r4, asr #17
   125cc:	andeq	r0, r0, r7, lsl #14
   125d0:	andeq	r0, r0, r9, lsl r7
   125d4:			; <UNDEFINED> instruction: 0x00015bb4
   125d8:	push	{r4, r5, r6, r7, lr}
   125dc:	sub	sp, sp, #12
   125e0:	ldr	r4, [sp, #32]
   125e4:	cmp	r4, #0
   125e8:	cmpne	r3, #0
   125ec:	movle	ip, r1
   125f0:	bgt	12600 <__assert_fail@plt+0x1610>
   125f4:	mov	r0, ip
   125f8:	add	sp, sp, #12
   125fc:	pop	{r4, r5, r6, r7, pc}
   12600:	uxth	ip, r4
   12604:	str	ip, [sp]
   12608:	mov	r5, r0
   1260c:	mov	r7, r3
   12610:	bl	11b28 <__assert_fail@plt+0xb38>
   12614:	lsrs	r4, r4, #16
   12618:	mov	ip, r0
   1261c:	bne	1263c <__assert_fail@plt+0x164c>
   12620:	cmp	ip, #0
   12624:	bgt	125f4 <__assert_fail@plt+0x1604>
   12628:	ldr	r3, [pc, #40]	; 12658 <__assert_fail@plt+0x1668>
   1262c:	ldr	r2, [pc, #40]	; 1265c <__assert_fail@plt+0x166c>
   12630:	ldr	r1, [pc, #40]	; 12660 <__assert_fail@plt+0x1670>
   12634:	ldr	r0, [pc, #40]	; 12664 <__assert_fail@plt+0x1674>
   12638:	bl	10ff0 <__assert_fail@plt>
   1263c:	sub	r1, r0, #1
   12640:	str	r4, [sp]
   12644:	mov	r3, r7
   12648:	add	r0, r5, #2
   1264c:	bl	11b28 <__assert_fail@plt+0xb38>
   12650:	add	ip, r0, #1
   12654:	b	12620 <__assert_fail@plt+0x1630>
   12658:	ldrdeq	r5, [r1], -r0
   1265c:	andeq	r0, r0, r7, asr #2
   12660:	andeq	r5, r1, r4, ror fp
   12664:	andeq	r5, r1, r8, asr #23
   12668:	ldr	r2, [r0, #4]
   1266c:	push	{r4, lr}
   12670:	ldr	lr, [r2, #4]
   12674:	ldr	r3, [r0, #28]
   12678:	cmp	lr, #0
   1267c:	bne	126f0 <__assert_fail@plt+0x1700>
   12680:	cmp	r1, #0
   12684:	bne	12750 <__assert_fail@plt+0x1760>
   12688:	ldr	r1, [r0, #24]
   1268c:	ldr	r2, [r0, #16]
   12690:	cmp	r1, r3
   12694:	ldr	r3, [r0, #20]
   12698:	bne	1277c <__assert_fail@plt+0x178c>
   1269c:	add	ip, r2, r3, lsl #2
   126a0:	ldr	lr, [ip, #12]
   126a4:	cmp	lr, r1
   126a8:	bne	1277c <__assert_fail@plt+0x178c>
   126ac:	ldr	r1, [r2, #8]
   126b0:	add	r3, r3, #1
   126b4:	cmp	r3, r1
   126b8:	ldrcc	lr, [ip, #16]
   126bc:	bcc	126e8 <__assert_fail@plt+0x16f8>
   126c0:	ldr	r3, [r0, #12]
   126c4:	cmp	r2, r3
   126c8:	beq	12790 <__assert_fail@plt+0x17a0>
   126cc:	ldr	r3, [r2]
   126d0:	cmp	r3, #0
   126d4:	beq	12768 <__assert_fail@plt+0x1778>
   126d8:	ldr	r2, [r3, #8]
   126dc:	cmp	r2, #0
   126e0:	ldrne	lr, [r3, #12]
   126e4:	beq	12768 <__assert_fail@plt+0x1778>
   126e8:	mov	r0, lr
   126ec:	pop	{r4, pc}
   126f0:	ldr	r1, [r0, #24]
   126f4:	sub	r1, r3, r1
   126f8:	cmp	lr, r1
   126fc:	bls	126e8 <__assert_fail@plt+0x16f8>
   12700:	ldrd	r2, [r0, #16]
   12704:	cmp	r2, #0
   12708:	add	r3, r3, #1
   1270c:	bne	12728 <__assert_fail@plt+0x1738>
   12710:	b	127a4 <__assert_fail@plt+0x17b4>
   12714:	ldr	r3, [r0, #12]
   12718:	cmp	r3, r2
   1271c:	beq	1275c <__assert_fail@plt+0x176c>
   12720:	ldr	r2, [r2]
   12724:	mov	r3, #0
   12728:	ldr	ip, [r2, #8]
   1272c:	cmp	r3, ip
   12730:	bcs	12714 <__assert_fail@plt+0x1724>
   12734:	add	r4, r2, r3, lsl #2
   12738:	ldr	r4, [r4, #12]
   1273c:	add	r1, r1, r4
   12740:	cmp	lr, r1
   12744:	bls	126e8 <__assert_fail@plt+0x16f8>
   12748:	add	r3, r3, #1
   1274c:	b	1272c <__assert_fail@plt+0x173c>
   12750:	mov	lr, r3
   12754:	mov	r0, lr
   12758:	pop	{r4, pc}
   1275c:	mov	lr, r1
   12760:	mov	r0, lr
   12764:	pop	{r4, pc}
   12768:	ldr	r3, [pc, #72]	; 127b8 <__assert_fail@plt+0x17c8>
   1276c:	ldr	r2, [pc, #72]	; 127bc <__assert_fail@plt+0x17cc>
   12770:	ldr	r1, [pc, #72]	; 127c0 <__assert_fail@plt+0x17d0>
   12774:	ldr	r0, [pc, #72]	; 127c4 <__assert_fail@plt+0x17d4>
   12778:	bl	10ff0 <__assert_fail@plt>
   1277c:	ldr	r3, [pc, #52]	; 127b8 <__assert_fail@plt+0x17c8>
   12780:	ldr	r2, [pc, #64]	; 127c8 <__assert_fail@plt+0x17d8>
   12784:	ldr	r1, [pc, #52]	; 127c0 <__assert_fail@plt+0x17d0>
   12788:	ldr	r0, [pc, #60]	; 127cc <__assert_fail@plt+0x17dc>
   1278c:	bl	10ff0 <__assert_fail@plt>
   12790:	ldr	r3, [pc, #32]	; 127b8 <__assert_fail@plt+0x17c8>
   12794:	ldr	r2, [pc, #52]	; 127d0 <__assert_fail@plt+0x17e0>
   12798:	ldr	r1, [pc, #32]	; 127c0 <__assert_fail@plt+0x17d0>
   1279c:	ldr	r0, [pc, #48]	; 127d4 <__assert_fail@plt+0x17e4>
   127a0:	bl	10ff0 <__assert_fail@plt>
   127a4:	ldr	r3, [pc, #12]	; 127b8 <__assert_fail@plt+0x17c8>
   127a8:	ldr	r2, [pc, #40]	; 127d8 <__assert_fail@plt+0x17e8>
   127ac:	ldr	r1, [pc, #12]	; 127c0 <__assert_fail@plt+0x17d0>
   127b0:	ldr	r0, [pc, #36]	; 127dc <__assert_fail@plt+0x17ec>
   127b4:	bl	10ff0 <__assert_fail@plt>
   127b8:	ldrdeq	r5, [r1], -ip
   127bc:	andeq	r0, r0, r1, asr #14
   127c0:	andeq	r5, r1, r4, ror fp
   127c4:	andeq	r5, r1, r8, asr #24
   127c8:	andeq	r0, r0, r8, lsr r7
   127cc:	ldrdeq	r5, [r1], -r8
   127d0:	andeq	r0, r0, pc, lsr r7
   127d4:	andeq	r5, r1, ip, lsr #24
   127d8:	andeq	r0, r0, r7, asr r7
   127dc:	andeq	r5, r1, r8, ror #24
   127e0:	ldr	r2, [r0]
   127e4:	push	{r4, r5, r6, lr}
   127e8:	mov	r3, r0
   127ec:	ldr	r4, [r2]
   127f0:	mov	r5, #0
   127f4:	mov	r0, r2
   127f8:	mov	r1, #32
   127fc:	str	r5, [r3]
   12800:	bl	11bcc <__assert_fail@plt+0xbdc>
   12804:	ldr	r0, [r4, #492]	; 0x1ec
   12808:	cmp	r0, r5
   1280c:	beq	12828 <__assert_fail@plt+0x1838>
   12810:	str	r5, [r4, #492]	; 0x1ec
   12814:	mov	r1, #76	; 0x4c
   12818:	bl	11bcc <__assert_fail@plt+0xbdc>
   1281c:	mov	r3, #1
   12820:	str	r3, [r4, #488]	; 0x1e8
   12824:	pop	{r4, r5, r6, pc}
   12828:	ldr	r3, [pc, #12]	; 1283c <__assert_fail@plt+0x184c>
   1282c:	ldr	r2, [pc, #12]	; 12840 <__assert_fail@plt+0x1850>
   12830:	ldr	r1, [pc, #12]	; 12844 <__assert_fail@plt+0x1854>
   12834:	ldr	r0, [pc, #12]	; 12848 <__assert_fail@plt+0x1858>
   12838:	bl	10ff0 <__assert_fail@plt>
   1283c:	andeq	r5, r1, ip, ror #17
   12840:	strdeq	r0, [r0], -r4
   12844:	andeq	r5, r1, r4, ror fp
   12848:			; <UNDEFINED> instruction: 0x00015bb4
   1284c:	lsl	r3, r1, #1
   12850:	cmp	r3, #4
   12854:	push	{r4, r5, r6, r7, r8, lr}
   12858:	mov	r4, r1
   1285c:	mov	r5, r0
   12860:	mov	r6, r2
   12864:	bhi	128a0 <__assert_fail@plt+0x18b0>
   12868:	cmp	r1, #0
   1286c:	movle	r3, #0
   12870:	ble	1288c <__assert_fail@plt+0x189c>
   12874:	add	r2, r0, r3
   12878:	mov	r3, #0
   1287c:	ldrh	r1, [r2, #-2]!
   12880:	cmp	r2, r5
   12884:	add	r3, r1, r3, lsl #16
   12888:	bne	1287c <__assert_fail@plt+0x188c>
   1288c:	mov	r0, r6
   12890:	ldr	r2, [pc, #132]	; 1291c <__assert_fail@plt+0x192c>
   12894:	mov	r1, #1
   12898:	pop	{r4, r5, r6, r7, r8, lr}
   1289c:	b	10f18 <__fprintf_chk@plt>
   128a0:	cmp	r1, #0
   128a4:	pople	{r4, r5, r6, r7, r8, pc}
   128a8:	add	r2, r0, r3
   128ac:	ldrh	r3, [r2, #-2]!
   128b0:	sub	r4, r4, #1
   128b4:	cmp	r3, #0
   128b8:	bne	128dc <__assert_fail@plt+0x18ec>
   128bc:	cmp	r4, #0
   128c0:	bne	128ac <__assert_fail@plt+0x18bc>
   128c4:	mov	r3, r6
   128c8:	mov	r2, #3
   128cc:	mov	r1, #1
   128d0:	ldr	r0, [pc, #72]	; 12920 <__assert_fail@plt+0x1930>
   128d4:	pop	{r4, r5, r6, r7, r8, lr}
   128d8:	b	10e34 <fwrite@plt>
   128dc:	ldr	r2, [pc, #64]	; 12924 <__assert_fail@plt+0x1934>
   128e0:	mov	r1, #1
   128e4:	mov	r0, r6
   128e8:	bl	10f18 <__fprintf_chk@plt>
   128ec:	cmp	r4, #0
   128f0:	popeq	{r4, r5, r6, r7, r8, pc}
   128f4:	ldr	r7, [pc, #44]	; 12928 <__assert_fail@plt+0x1938>
   128f8:	add	r4, r5, r4, lsl #1
   128fc:	ldrh	r3, [r4, #-2]!
   12900:	mov	r2, r7
   12904:	mov	r1, #1
   12908:	mov	r0, r6
   1290c:	bl	10f18 <__fprintf_chk@plt>
   12910:	cmp	r5, r4
   12914:	bne	128fc <__assert_fail@plt+0x190c>
   12918:	pop	{r4, r5, r6, r7, r8, pc}
   1291c:	andeq	r5, r1, r8, lsl #25
   12920:	andeq	r5, r1, r4, lsl #25
   12924:	andeq	r5, r1, r4, ror ip
   12928:	andeq	r5, r1, ip, ror ip
   1292c:	push	{r4, r5, r6, r7, r8, lr}
   12930:	mov	r6, r0
   12934:	ldr	r2, [r0, #8]
   12938:	ldr	r5, [pc, #152]	; 129d8 <__assert_fail@plt+0x19e8>
   1293c:	ldr	r4, [r0, #88]	; 0x58
   12940:	ldr	r3, [pc, #148]	; 129dc <__assert_fail@plt+0x19ec>
   12944:	sub	sp, sp, #16
   12948:	cmp	r4, #0
   1294c:	ldr	r0, [r2, #4]
   12950:	mov	r8, r1
   12954:	ldr	r1, [r5]
   12958:	moveq	r4, r3
   1295c:	bl	10fb4 <fputs@plt>
   12960:	ldr	r7, [r5]
   12964:	mov	r0, #58	; 0x3a
   12968:	mov	r1, r7
   1296c:	bl	10f78 <putc@plt>
   12970:	mov	r1, r7
   12974:	mov	r0, #32
   12978:	bl	10f78 <putc@plt>
   1297c:	ldr	r3, [r6, #4]
   12980:	ldr	r1, [r5]
   12984:	ldr	r0, [r3, #56]	; 0x38
   12988:	bl	12110 <__assert_fail@plt+0x1120>
   1298c:	ldr	r2, [r6, #128]	; 0x80
   12990:	ldr	r0, [pc, #72]	; 129e0 <__assert_fail@plt+0x19f0>
   12994:	add	r1, r2, #6
   12998:	cmp	r8, #0
   1299c:	ldr	r3, [pc, #64]	; 129e4 <__assert_fail@plt+0x19f4>
   129a0:	moveq	r3, r0
   129a4:	cmp	r1, #8
   129a8:	str	r2, [sp]
   129ac:	ldrls	ip, [pc, #52]	; 129e8 <__assert_fail@plt+0x19f8>
   129b0:	ldrhi	r1, [pc, #52]	; 129ec <__assert_fail@plt+0x19fc>
   129b4:	ldr	r0, [r5]
   129b8:	ldr	r2, [pc, #48]	; 129f0 <__assert_fail@plt+0x1a00>
   129bc:	addls	r1, ip, r1, lsl #2
   129c0:	ldrls	r1, [r1, #1732]	; 0x6c4
   129c4:	stmib	sp, {r1, r4}
   129c8:	mov	r1, #1
   129cc:	bl	10f18 <__fprintf_chk@plt>
   129d0:	add	sp, sp, #16
   129d4:	pop	{r4, r5, r6, r7, r8, pc}
   129d8:	andeq	r9, r2, r0, lsl r0
   129dc:	andeq	r5, r1, ip, lsl #25
   129e0:	andeq	r6, r1, r4, lsr #8
   129e4:	muleq	r1, ip, ip
   129e8:	andeq	r5, r1, r4, lsr r2
   129ec:	andeq	r5, r1, r8, lsr #25
   129f0:			; <UNDEFINED> instruction: 0x00015cb8
   129f4:	ldr	r3, [r0, #12]
   129f8:	push	{r4, r5, r6, lr}
   129fc:	mov	r4, r0
   12a00:	ldrb	r3, [r3]
   12a04:	sub	sp, sp, #8
   12a08:	tst	r3, #24
   12a0c:	bne	12ad8 <__assert_fail@plt+0x1ae8>
   12a10:	ldr	r3, [r0, #56]	; 0x38
   12a14:	ldr	r2, [r0, #4]
   12a18:	ldr	r5, [pc, #416]	; 12bc0 <__assert_fail@plt+0x1bd0>
   12a1c:	cmp	r3, #15
   12a20:	ldr	r0, [r2, #56]	; 0x38
   12a24:	ldr	r1, [r5]
   12a28:	bgt	12b34 <__assert_fail@plt+0x1b44>
   12a2c:	ldr	r2, [r4, #60]	; 0x3c
   12a30:	cmp	r2, #0
   12a34:	bne	12b2c <__assert_fail@plt+0x1b3c>
   12a38:	ldr	r2, [r4, #52]	; 0x34
   12a3c:	cmp	r3, r2
   12a40:	bgt	12bb0 <__assert_fail@plt+0x1bc0>
   12a44:	beq	12bb8 <__assert_fail@plt+0x1bc8>
   12a48:	ldr	r6, [pc, #372]	; 12bc4 <__assert_fail@plt+0x1bd4>
   12a4c:	bl	12110 <__assert_fail@plt+0x1120>
   12a50:	ldrb	r1, [r4, #137]	; 0x89
   12a54:	ldr	r3, [pc, #364]	; 12bc8 <__assert_fail@plt+0x1bd8>
   12a58:	ldr	ip, [r4, #56]	; 0x38
   12a5c:	ldr	r0, [r4, #52]	; 0x34
   12a60:	lsr	r1, r1, #6
   12a64:	str	ip, [sp, #4]
   12a68:	add	r3, r3, r1, lsl #2
   12a6c:	mov	r2, r6
   12a70:	ldr	r3, [r3, #1768]	; 0x6e8
   12a74:	str	r0, [sp]
   12a78:	ldr	r1, [pc, #332]	; 12bcc <__assert_fail@plt+0x1bdc>
   12a7c:	mov	r0, #1
   12a80:	bl	10f0c <__printf_chk@plt>
   12a84:	ldr	r2, [r5]
   12a88:	ldr	r1, [r4, #32]
   12a8c:	add	r0, r4, #20
   12a90:	bl	1284c <__assert_fail@plt+0x185c>
   12a94:	ldr	r1, [r5]
   12a98:	mov	r0, #32
   12a9c:	bl	10f78 <putc@plt>
   12aa0:	ldr	r2, [r5]
   12aa4:	ldr	r1, [r4, #48]	; 0x30
   12aa8:	add	r0, r4, #36	; 0x24
   12aac:	bl	1284c <__assert_fail@plt+0x185c>
   12ab0:	ldr	r1, [r5]
   12ab4:	mov	r0, #32
   12ab8:	bl	10f78 <putc@plt>
   12abc:	ldr	r3, [r4, #8]
   12ac0:	ldr	r1, [r5]
   12ac4:	ldr	r0, [r3, #4]
   12ac8:	bl	10fb4 <fputs@plt>
   12acc:	ldr	r1, [r5]
   12ad0:	mov	r0, #10
   12ad4:	bl	10f78 <putc@plt>
   12ad8:	ldr	r3, [r4, #124]	; 0x7c
   12adc:	cmp	r3, #0
   12ae0:	bge	12af8 <__assert_fail@plt+0x1b08>
   12ae4:	mov	r0, r4
   12ae8:	mov	r1, #140	; 0x8c
   12aec:	add	sp, sp, #8
   12af0:	pop	{r4, r5, r6, lr}
   12af4:	b	11bcc <__assert_fail@plt+0xbdc>
   12af8:	add	r0, r4, #64	; 0x40
   12afc:	bl	10eac <inflateEnd@plt>
   12b00:	cmp	r0, #0
   12b04:	str	r0, [r4, #128]	; 0x80
   12b08:	beq	12ae4 <__assert_fail@plt+0x1af4>
   12b0c:	ldr	r3, [r4, #12]
   12b10:	ldrb	r3, [r3]
   12b14:	tst	r3, #1
   12b18:	beq	12ae4 <__assert_fail@plt+0x1af4>
   12b1c:	mov	r1, #1
   12b20:	mov	r0, r4
   12b24:	bl	1292c <__assert_fail@plt+0x193c>
   12b28:	b	12ae4 <__assert_fail@plt+0x1af4>
   12b2c:	ldr	r6, [pc, #156]	; 12bd0 <__assert_fail@plt+0x1be0>
   12b30:	b	12a4c <__assert_fail@plt+0x1a5c>
   12b34:	bl	12110 <__assert_fail@plt+0x1120>
   12b38:	ldrb	r2, [r4, #137]	; 0x89
   12b3c:	ldr	r1, [r4, #128]	; 0x80
   12b40:	ldr	r0, [pc, #128]	; 12bc8 <__assert_fail@plt+0x1bd8>
   12b44:	add	r1, r1, #6
   12b48:	cmp	r1, #8
   12b4c:	addls	r1, r0, r1, lsl #2
   12b50:	lsr	r2, r2, #6
   12b54:	ldrls	r1, [r1, #1732]	; 0x6c4
   12b58:	ldrhi	r1, [pc, #116]	; 12bd4 <__assert_fail@plt+0x1be4>
   12b5c:	add	r2, r0, r2, lsl #2
   12b60:	ldr	r3, [r4, #52]	; 0x34
   12b64:	ldr	r2, [r2, #1768]	; 0x6e8
   12b68:	str	r1, [sp]
   12b6c:	mov	r0, #1
   12b70:	ldr	r1, [pc, #96]	; 12bd8 <__assert_fail@plt+0x1be8>
   12b74:	bl	10f0c <__printf_chk@plt>
   12b78:	ldr	r2, [r5]
   12b7c:	ldr	r1, [r4, #32]
   12b80:	add	r0, r4, #20
   12b84:	bl	1284c <__assert_fail@plt+0x185c>
   12b88:	ldr	r1, [r5]
   12b8c:	mov	r0, #32
   12b90:	bl	10f78 <putc@plt>
   12b94:	ldr	r0, [r4, #88]	; 0x58
   12b98:	ldr	r3, [pc, #60]	; 12bdc <__assert_fail@plt+0x1bec>
   12b9c:	cmp	r0, #0
   12ba0:	ldr	r1, [r5]
   12ba4:	moveq	r0, r3
   12ba8:	bl	121a0 <__assert_fail@plt+0x11b0>
   12bac:	b	12ab0 <__assert_fail@plt+0x1ac0>
   12bb0:	ldr	r6, [pc, #40]	; 12be0 <__assert_fail@plt+0x1bf0>
   12bb4:	b	12a4c <__assert_fail@plt+0x1a5c>
   12bb8:	ldr	r6, [pc, #36]	; 12be4 <__assert_fail@plt+0x1bf4>
   12bbc:	b	12a4c <__assert_fail@plt+0x1a5c>
   12bc0:	andeq	r9, r2, r4, lsl r0
   12bc4:	andeq	r5, r1, r4, ror #25
   12bc8:	andeq	r5, r1, r4, lsr r2
   12bcc:	strdeq	r5, [r1], -r8
   12bd0:	ldrdeq	r5, [r1], -ip
   12bd4:	andeq	r5, r1, r8, lsr #25
   12bd8:	andeq	r5, r1, r8, lsl #26
   12bdc:	andeq	r5, r1, r8, ror #25
   12be0:	andeq	r5, r1, r0, ror #25
   12be4:	ldrdeq	r5, [r1], -r8
   12be8:	push	{r4, r5, r6, r7, r8, lr}
   12bec:	mov	r7, r1
   12bf0:	ldr	r4, [pc, #108]	; 12c64 <__assert_fail@plt+0x1c74>
   12bf4:	ldr	r0, [r0]
   12bf8:	mov	r6, r2
   12bfc:	ldr	r1, [r4]
   12c00:	bl	10fb4 <fputs@plt>
   12c04:	ldr	r5, [r4]
   12c08:	mov	r0, #58	; 0x3a
   12c0c:	mov	r1, r5
   12c10:	bl	10f78 <putc@plt>
   12c14:	mov	r1, r5
   12c18:	mov	r0, #32
   12c1c:	bl	10f78 <putc@plt>
   12c20:	mov	r0, r7
   12c24:	ldr	r1, [r4]
   12c28:	bl	12110 <__assert_fail@plt+0x1120>
   12c2c:	ldr	r5, [r4]
   12c30:	mov	r0, #58	; 0x3a
   12c34:	mov	r1, r5
   12c38:	bl	10f78 <putc@plt>
   12c3c:	mov	r1, r5
   12c40:	mov	r0, #32
   12c44:	bl	10f78 <putc@plt>
   12c48:	ldr	r1, [r4]
   12c4c:	mov	r0, r6
   12c50:	bl	10fb4 <fputs@plt>
   12c54:	ldr	r1, [r4]
   12c58:	mov	r0, #10
   12c5c:	pop	{r4, r5, r6, r7, r8, lr}
   12c60:	b	10f78 <putc@plt>
   12c64:	andeq	r9, r2, r0, lsl r0
   12c68:	push	{r4, lr}
   12c6c:	mov	r4, r0
   12c70:	ldr	r0, [r0, #52]	; 0x34
   12c74:	bl	10d8c <fgetpos@plt>
   12c78:	cmp	r0, #0
   12c7c:	popeq	{r4, pc}
   12c80:	ldr	r0, [r4, #4]
   12c84:	bl	10e1c <perror@plt>
   12c88:	mov	r0, r4
   12c8c:	ldr	r2, [pc, #4]	; 12c98 <__assert_fail@plt+0x1ca8>
   12c90:	mov	r1, #5
   12c94:	bl	12240 <__assert_fail@plt+0x1250>
   12c98:	andeq	r5, r1, r8, lsl sp
   12c9c:	push	{r4, lr}
   12ca0:	mov	r2, #1
   12ca4:	mov	r4, r0
   12ca8:	mov	r1, #12
   12cac:	ldr	r0, [r0, #52]	; 0x34
   12cb0:	bl	10f90 <fseek@plt>
   12cb4:	cmp	r0, #0
   12cb8:	popeq	{r4, pc}
   12cbc:	bl	10ef4 <__errno_location@plt>
   12cc0:	ldr	r2, [pc, #20]	; 12cdc <__assert_fail@plt+0x1cec>
   12cc4:	mov	r1, #7
   12cc8:	ldr	r3, [r0]
   12ccc:	mov	r0, r4
   12cd0:	cmp	r3, #0
   12cd4:	strne	r3, [r4, #16]
   12cd8:	bl	12240 <__assert_fail@plt+0x1250>
   12cdc:	andeq	r5, r1, r0, lsr #26
   12ce0:	push	{r4, r5, r6, lr}
   12ce4:	mov	r5, r0
   12ce8:	ldr	r0, [r0, #52]	; 0x34
   12cec:	bl	10fd8 <getc@plt>
   12cf0:	mov	r4, r0
   12cf4:	bl	10ef4 <__errno_location@plt>
   12cf8:	ldr	r3, [r0]
   12cfc:	cmp	r3, #0
   12d00:	strne	r3, [r5, #16]
   12d04:	cmp	r4, #255	; 0xff
   12d08:	bhi	12d14 <__assert_fail@plt+0x1d24>
   12d0c:	uxtb	r0, r4
   12d10:	pop	{r4, r5, r6, pc}
   12d14:	mov	r0, r5
   12d18:	ldr	r2, [pc, #4]	; 12d24 <__assert_fail@plt+0x1d34>
   12d1c:	mov	r1, #7
   12d20:	bl	12240 <__assert_fail@plt+0x1250>
   12d24:	andeq	r5, r1, r8, lsr #26
   12d28:	ldr	r3, [pc, #1212]	; 131ec <__assert_fail@plt+0x21fc>
   12d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d30:	sub	sp, sp, #20
   12d34:	ldr	r7, [r0, #124]	; 0x7c
   12d38:	ldr	r3, [r3]
   12d3c:	cmp	r7, #0
   12d40:	str	r3, [sp, #12]
   12d44:	str	r1, [sp]
   12d48:	ldr	r3, [r0, #8]
   12d4c:	blt	131c4 <__assert_fail@plt+0x21d4>
   12d50:	cmp	r1, #0
   12d54:	mov	r4, r0
   12d58:	beq	13160 <__assert_fail@plt+0x2170>
   12d5c:	mov	r6, #0
   12d60:	add	r9, r0, #64	; 0x40
   12d64:	add	sl, sp, #11
   12d68:	mov	r8, #1
   12d6c:	mov	fp, r3
   12d70:	mov	r0, fp
   12d74:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   12d78:	cmp	r7, #0
   12d7c:	strb	r0, [sp, #10]
   12d80:	beq	12fdc <__assert_fail@plt+0x1fec>
   12d84:	cmp	r7, #1
   12d88:	bne	12de4 <__assert_fail@plt+0x1df4>
   12d8c:	ldrb	r3, [r4, #136]	; 0x88
   12d90:	and	r1, r0, #224	; 0xe0
   12d94:	ldr	r2, [pc, #1108]	; 131f0 <__assert_fail@plt+0x2200>
   12d98:	add	r3, r1, r3, lsl #8
   12d9c:	smull	ip, r2, r2, r3
   12da0:	add	r2, r2, r3
   12da4:	asr	r2, r2, #4
   12da8:	rsb	r2, r2, r2, lsl #5
   12dac:	sub	r3, r3, r2
   12db0:	rsb	r3, r3, #31
   12db4:	add	r3, r3, r1
   12db8:	cmp	r0, r3
   12dbc:	beq	12dd8 <__assert_fail@plt+0x1de8>
   12dc0:	ldr	r1, [r4, #52]	; 0x34
   12dc4:	ldr	r2, [r4, #132]	; 0x84
   12dc8:	uxtb	r0, r3
   12dcc:	cmp	r1, r2
   12dd0:	streq	r7, [r4, #60]	; 0x3c
   12dd4:	strb	r0, [sp, #10]
   12dd8:	mov	r7, #2
   12ddc:	strb	r0, [r4, #137]	; 0x89
   12de0:	str	r7, [r4, #124]	; 0x7c
   12de4:	mov	r1, #0
   12de8:	mov	r5, r1
   12dec:	add	r3, sp, #10
   12df0:	str	r3, [r4, #64]	; 0x40
   12df4:	str	r8, [r4, #68]	; 0x44
   12df8:	str	sl, [r4, #76]	; 0x4c
   12dfc:	str	r1, [r4, #80]	; 0x50
   12e00:	mov	r0, r9
   12e04:	bl	10da4 <inflate@plt>
   12e08:	ldr	r1, [r4, #80]	; 0x50
   12e0c:	sub	r2, r5, r1
   12e10:	add	r3, r0, #5
   12e14:	str	r0, [r4, #128]	; 0x80
   12e18:	cmp	r3, #7
   12e1c:	ldrls	pc, [pc, r3, lsl #2]
   12e20:	b	12fc0 <__assert_fail@plt+0x1fd0>
   12e24:	andeq	r2, r1, r8, ror pc
   12e28:	andeq	r2, r1, r0, asr #31
   12e2c:	andeq	r2, r1, r0, lsr #30
   12e30:	andeq	r2, r1, r0, asr #31
   12e34:	andeq	r2, r1, r0, asr #31
   12e38:	strdeq	r2, [r1], -r8
   12e3c:	andeq	r2, r1, r4, ror #29
   12e40:	andeq	r2, r1, r4, asr #28
   12e44:	ldr	r1, [r4, #12]
   12e48:	mov	fp, r0
   12e4c:	add	r5, r4, #36	; 0x24
   12e50:	ldrb	r1, [r1]
   12e54:	tst	r1, #1
   12e58:	beq	12e70 <__assert_fail@plt+0x1e80>
   12e5c:	mov	r1, #0
   12e60:	mov	r0, r4
   12e64:	str	r2, [sp, #4]
   12e68:	bl	1292c <__assert_fail@plt+0x193c>
   12e6c:	ldr	r2, [sp, #4]
   12e70:	ldr	r1, [r4, #48]	; 0x30
   12e74:	mov	r0, r5
   12e78:	bl	1242c <__assert_fail@plt+0x143c>
   12e7c:	ldr	r2, [r4, #68]	; 0x44
   12e80:	rsb	r1, r2, #1
   12e84:	add	r6, r6, r1
   12e88:	str	r0, [r4, #48]	; 0x30
   12e8c:	adds	r1, fp, #0
   12e90:	ldr	r3, [sp]
   12e94:	movne	r1, #1
   12e98:	cmp	r3, r6
   12e9c:	orreq	r1, r1, #1
   12ea0:	cmp	r1, #0
   12ea4:	beq	131b0 <__assert_fail@plt+0x21c0>
   12ea8:	sub	r2, r6, r2
   12eac:	ldr	r1, [r4, #32]
   12eb0:	add	r0, r4, #20
   12eb4:	bl	1242c <__assert_fail@plt+0x143c>
   12eb8:	cmp	fp, #1
   12ebc:	str	r0, [r4, #32]
   12ec0:	beq	13060 <__assert_fail@plt+0x2070>
   12ec4:	ldr	r3, [pc, #800]	; 131ec <__assert_fail@plt+0x21fc>
   12ec8:	ldr	r1, [sp, #12]
   12ecc:	mov	r0, fp
   12ed0:	ldr	r2, [r3]
   12ed4:	cmp	r1, r2
   12ed8:	bne	131ac <__assert_fail@plt+0x21bc>
   12edc:	add	sp, sp, #20
   12ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee4:	mov	r1, #3
   12ee8:	mov	fp, r0
   12eec:	str	r1, [r4, #124]	; 0x7c
   12ef0:	add	r5, r4, #36	; 0x24
   12ef4:	b	12e70 <__assert_fail@plt+0x1e80>
   12ef8:	cmp	r1, #0
   12efc:	beq	12f0c <__assert_fail@plt+0x1f1c>
   12f00:	ldr	r3, [r4, #68]	; 0x44
   12f04:	cmp	r3, #0
   12f08:	bne	131d8 <__assert_fail@plt+0x21e8>
   12f0c:	add	r5, r2, #1
   12f10:	mov	r1, #2
   12f14:	str	sl, [r4, #76]	; 0x4c
   12f18:	str	r8, [r4, #80]	; 0x50
   12f1c:	b	12e00 <__assert_fail@plt+0x1e10>
   12f20:	ldr	r0, [r4, #88]	; 0x58
   12f24:	add	r5, r4, #36	; 0x24
   12f28:	cmp	r0, #0
   12f2c:	beq	12f4c <__assert_fail@plt+0x1f5c>
   12f30:	ldr	r1, [pc, #700]	; 131f4 <__assert_fail@plt+0x2204>
   12f34:	str	r2, [sp, #4]
   12f38:	bl	10d74 <strcmp@plt>
   12f3c:	ldr	r2, [sp, #4]
   12f40:	cmp	r0, #0
   12f44:	mvneq	fp, #0
   12f48:	beq	12e70 <__assert_fail@plt+0x1e80>
   12f4c:	ldr	r3, [r4, #12]
   12f50:	ldrb	r3, [r3]
   12f54:	tst	r3, #1
   12f58:	beq	12fd4 <__assert_fail@plt+0x1fe4>
   12f5c:	mov	r1, #0
   12f60:	mov	r0, r4
   12f64:	str	r2, [sp, #4]
   12f68:	mov	fp, #2
   12f6c:	bl	1292c <__assert_fail@plt+0x193c>
   12f70:	ldr	r2, [sp, #4]
   12f74:	b	12e70 <__assert_fail@plt+0x1e80>
   12f78:	cmp	r1, #0
   12f7c:	beq	12f0c <__assert_fail@plt+0x1f1c>
   12f80:	ldr	r3, [r4, #68]	; 0x44
   12f84:	add	r0, r4, #36	; 0x24
   12f88:	cmp	r3, #0
   12f8c:	beq	13030 <__assert_fail@plt+0x2040>
   12f90:	ldr	r3, [r4, #12]
   12f94:	mov	r5, r0
   12f98:	ldrb	r3, [r3]
   12f9c:	tst	r3, #1
   12fa0:	beq	12fd4 <__assert_fail@plt+0x1fe4>
   12fa4:	mov	r1, #1
   12fa8:	mov	r0, r4
   12fac:	str	r2, [sp, #4]
   12fb0:	mov	fp, #2
   12fb4:	bl	1292c <__assert_fail@plt+0x193c>
   12fb8:	ldr	r2, [sp, #4]
   12fbc:	b	12e70 <__assert_fail@plt+0x1e80>
   12fc0:	ldr	r3, [r4, #12]
   12fc4:	add	r5, r4, #36	; 0x24
   12fc8:	ldrb	r3, [r3]
   12fcc:	tst	r3, #1
   12fd0:	bne	12f5c <__assert_fail@plt+0x1f6c>
   12fd4:	mov	fp, #2
   12fd8:	b	12e70 <__assert_fail@plt+0x1e80>
   12fdc:	lsr	r3, r0, #4
   12fe0:	ldr	r2, [r4, #132]	; 0x84
   12fe4:	uxtb	r3, r3
   12fe8:	add	r3, r3, #8
   12fec:	cmp	r2, #0
   12ff0:	str	r3, [r4, #52]	; 0x34
   12ff4:	bne	13014 <__assert_fail@plt+0x2024>
   12ff8:	cmp	r3, #15
   12ffc:	movge	r3, #15
   13000:	str	r3, [r4, #132]	; 0x84
   13004:	strb	r0, [r4, #136]	; 0x88
   13008:	str	r8, [r4, #124]	; 0x7c
   1300c:	mov	r7, #1
   13010:	b	12de4 <__assert_fail@plt+0x1df4>
   13014:	cmp	r3, r2
   13018:	subne	r2, r2, #8
   1301c:	andne	r0, r0, #15
   13020:	addne	r2, r0, r2, lsl #4
   13024:	uxtbne	r0, r2
   13028:	strbne	r0, [sp, #10]
   1302c:	b	13004 <__assert_fail@plt+0x2014>
   13030:	ldr	r1, [r4, #48]	; 0x30
   13034:	bl	1242c <__assert_fail@plt+0x143c>
   13038:	ldr	r2, [r4, #68]	; 0x44
   1303c:	cmp	r2, #0
   13040:	str	r0, [r4, #48]	; 0x30
   13044:	bne	13198 <__assert_fail@plt+0x21a8>
   13048:	ldr	r3, [sp]
   1304c:	add	r6, r6, #1
   13050:	cmp	r3, r6
   13054:	bhi	12d70 <__assert_fail@plt+0x1d80>
   13058:	mov	fp, r2
   1305c:	b	12e8c <__assert_fail@plt+0x1e9c>
   13060:	ldr	r5, [r4, #132]	; 0x84
   13064:	ldr	r2, [r4, #56]	; 0x38
   13068:	cmp	r5, r2
   1306c:	bge	12ec4 <__assert_fail@plt+0x1ed4>
   13070:	ldr	r9, [r4, #48]	; 0x30
   13074:	ldr	lr, [r4, #4]
   13078:	cmp	r9, #0
   1307c:	mov	ip, #0
   13080:	ble	130ac <__assert_fail@plt+0x20bc>
   13084:	mov	r2, ip
   13088:	add	r8, r4, #34	; 0x22
   1308c:	add	r7, lr, #6
   13090:	ldrh	r3, [r8, #2]!
   13094:	add	r2, r2, #1
   13098:	cmp	r3, #0
   1309c:	movne	ip, r2
   130a0:	cmp	r9, r2
   130a4:	strh	r3, [r7, #2]!
   130a8:	bne	13090 <__assert_fail@plt+0x20a0>
   130ac:	cmp	r0, #0
   130b0:	str	ip, [lr, #20]
   130b4:	mov	ip, #0
   130b8:	ble	130e4 <__assert_fail@plt+0x20f4>
   130bc:	mov	r2, ip
   130c0:	add	r8, r4, #18
   130c4:	add	r7, lr, #22
   130c8:	ldrh	r3, [r8, #2]!
   130cc:	add	r2, r2, #1
   130d0:	cmp	r3, #0
   130d4:	movne	ip, r2
   130d8:	cmp	r0, r2
   130dc:	strh	r3, [r7, #2]!
   130e0:	bne	130c8 <__assert_fail@plt+0x20d8>
   130e4:	str	ip, [lr, #36]	; 0x24
   130e8:	ldrb	r2, [r4, #136]	; 0x88
   130ec:	strb	r2, [lr, #72]	; 0x48
   130f0:	ldrb	r2, [r4, #137]	; 0x89
   130f4:	strb	r2, [lr, #73]	; 0x49
   130f8:	ldr	r2, [r4, #52]	; 0x34
   130fc:	cmp	r5, r2
   13100:	beq	13148 <__assert_fail@plt+0x2158>
   13104:	ldr	r1, [r4, #16]
   13108:	mov	r2, #2
   1310c:	str	r1, [lr, #64]	; 0x40
   13110:	str	r2, [lr, #68]	; 0x44
   13114:	ldr	r3, [sp]
   13118:	cmp	r3, r6
   1311c:	bls	13134 <__assert_fail@plt+0x2144>
   13120:	ldr	r0, [lr]
   13124:	ldr	r2, [r0]
   13128:	ldrb	r2, [r2]
   1312c:	tst	r2, #1
   13130:	bne	13180 <__assert_fail@plt+0x2190>
   13134:	ldr	r3, [sp]
   13138:	str	r5, [r4, #56]	; 0x38
   1313c:	sub	r6, r3, r6
   13140:	str	r6, [r4, #120]	; 0x78
   13144:	b	12ec4 <__assert_fail@plt+0x1ed4>
   13148:	ldr	r2, [r4, #60]	; 0x3c
   1314c:	cmp	r2, #0
   13150:	streq	r2, [lr, #64]	; 0x40
   13154:	streq	r2, [lr, #68]	; 0x44
   13158:	beq	13114 <__assert_fail@plt+0x2124>
   1315c:	b	13104 <__assert_fail@plt+0x2114>
   13160:	ldr	r2, [r0, #68]	; 0x44
   13164:	ldr	r1, [r0, #32]
   13168:	rsb	r2, r2, #0
   1316c:	add	r0, r0, #20
   13170:	bl	1242c <__assert_fail@plt+0x143c>
   13174:	ldr	fp, [sp]
   13178:	str	r0, [r4, #32]
   1317c:	b	12ec4 <__assert_fail@plt+0x1ed4>
   13180:	ldr	r1, [lr, #56]	; 0x38
   13184:	add	r0, r0, #4
   13188:	ldr	r2, [pc, #104]	; 131f8 <__assert_fail@plt+0x2208>
   1318c:	bl	12be8 <__assert_fail@plt+0x1bf8>
   13190:	ldr	r5, [r4, #132]	; 0x84
   13194:	b	13134 <__assert_fail@plt+0x2144>
   13198:	ldr	r3, [pc, #92]	; 131fc <__assert_fail@plt+0x220c>
   1319c:	ldr	r2, [pc, #92]	; 13200 <__assert_fail@plt+0x2210>
   131a0:	ldr	r1, [pc, #92]	; 13204 <__assert_fail@plt+0x2214>
   131a4:	ldr	r0, [pc, #92]	; 13208 <__assert_fail@plt+0x2218>
   131a8:	bl	10ff0 <__assert_fail@plt>
   131ac:	bl	10e10 <__stack_chk_fail@plt>
   131b0:	ldr	r3, [pc, #68]	; 131fc <__assert_fail@plt+0x220c>
   131b4:	ldr	r2, [pc, #80]	; 1320c <__assert_fail@plt+0x221c>
   131b8:	ldr	r1, [pc, #68]	; 13204 <__assert_fail@plt+0x2214>
   131bc:	ldr	r0, [pc, #76]	; 13210 <__assert_fail@plt+0x2220>
   131c0:	bl	10ff0 <__assert_fail@plt>
   131c4:	ldr	r3, [pc, #48]	; 131fc <__assert_fail@plt+0x220c>
   131c8:	ldr	r2, [pc, #68]	; 13214 <__assert_fail@plt+0x2224>
   131cc:	ldr	r1, [pc, #48]	; 13204 <__assert_fail@plt+0x2214>
   131d0:	ldr	r0, [pc, #64]	; 13218 <__assert_fail@plt+0x2228>
   131d4:	bl	10ff0 <__assert_fail@plt>
   131d8:	ldr	r3, [pc, #28]	; 131fc <__assert_fail@plt+0x220c>
   131dc:	ldr	r2, [pc, #56]	; 1321c <__assert_fail@plt+0x222c>
   131e0:	ldr	r1, [pc, #28]	; 13204 <__assert_fail@plt+0x2214>
   131e4:	ldr	r0, [pc, #52]	; 13220 <__assert_fail@plt+0x2230>
   131e8:	bl	10ff0 <__assert_fail@plt>
   131ec:	andeq	r8, r2, r0, lsl #28
   131f0:	strthi	r0, [r1], #-2115	; 0xfffff7bd
   131f4:	andeq	r5, r1, ip, ror #26
   131f8:	andeq	r5, r1, r0, ror #27
   131fc:	andeq	r5, r1, ip, lsr #18
   13200:	andeq	r0, r0, r8, lsl #19
   13204:	andeq	r5, r1, r4, ror fp
   13208:	andeq	r5, r1, ip, lsl #27
   1320c:	andeq	r0, r0, sp, lsl #19
   13210:			; <UNDEFINED> instruction: 0x00015db8
   13214:	andeq	r0, r0, pc, ror #17
   13218:	andeq	r5, r1, r0, lsr sp
   1321c:	andeq	r0, r0, ip, asr r9
   13220:	andeq	r5, r1, ip, lsr sp
   13224:	ldr	r3, [r0]
   13228:	mov	r2, #0
   1322c:	cmp	r3, r2
   13230:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13234:	mov	r5, r0
   13238:	str	r2, [r0, #120]	; 0x78
   1323c:	ldr	r4, [r0, #16]
   13240:	beq	132ec <__assert_fail@plt+0x22fc>
   13244:	cmp	r4, r2
   13248:	ldrd	r6, [r3, #8]
   1324c:	bne	133c4 <__assert_fail@plt+0x23d4>
   13250:	ldr	sl, [r6, #8]
   13254:	cmp	sl, #0
   13258:	beq	133b0 <__assert_fail@plt+0x23c0>
   1325c:	cmp	r4, #0
   13260:	bne	13388 <__assert_fail@plt+0x2398>
   13264:	add	r3, r6, r4, lsl #2
   13268:	mov	r0, r5
   1326c:	ldr	r1, [r3, #12]
   13270:	bl	12d28 <__assert_fail@plt+0x1d38>
   13274:	subs	r8, r0, #0
   13278:	beq	13370 <__assert_fail@plt+0x2380>
   1327c:	cmp	r8, #1
   13280:	bne	13318 <__assert_fail@plt+0x2328>
   13284:	ldr	r3, [r5, #12]
   13288:	ldr	ip, [r5, #120]	; 0x78
   1328c:	add	r9, r4, #1
   13290:	ldrb	r3, [r3]
   13294:	tst	r3, #1
   13298:	beq	1334c <__assert_fail@plt+0x235c>
   1329c:	cmp	ip, #0
   132a0:	bne	1334c <__assert_fail@plt+0x235c>
   132a4:	mov	r2, sl
   132a8:	mov	r3, r9
   132ac:	mov	r1, r6
   132b0:	cmp	r3, r2
   132b4:	blt	132d4 <__assert_fail@plt+0x22e4>
   132b8:	cmp	r1, r7
   132bc:	beq	1334c <__assert_fail@plt+0x235c>
   132c0:	ldr	r1, [r1]
   132c4:	mov	r3, #0
   132c8:	ldr	r2, [r1, #8]
   132cc:	cmp	r3, r2
   132d0:	bge	132b8 <__assert_fail@plt+0x22c8>
   132d4:	add	r0, r1, r3, lsl #2
   132d8:	ldr	r0, [r0, #12]
   132dc:	cmp	r0, #0
   132e0:	bne	13320 <__assert_fail@plt+0x2330>
   132e4:	add	r3, r3, #1
   132e8:	b	132b0 <__assert_fail@plt+0x22c0>
   132ec:	ldr	r6, [r0, #4]
   132f0:	ldr	r1, [r6, #52]	; 0x34
   132f4:	cmp	r1, r4
   132f8:	bls	133d8 <__assert_fail@plt+0x23e8>
   132fc:	sub	r1, r1, r4
   13300:	bl	12d28 <__assert_fail@plt+0x1d38>
   13304:	ldr	r2, [r5, #120]	; 0x78
   13308:	ldr	r3, [r6, #52]	; 0x34
   1330c:	sub	r3, r3, r2
   13310:	str	r3, [r6, #52]	; 0x34
   13314:	mov	r8, r0
   13318:	mov	r0, r8
   1331c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13320:	ldr	r3, [r5, #4]
   13324:	ldr	r0, [r3]
   13328:	ldr	r2, [r0]
   1332c:	ldrb	r2, [r2]
   13330:	tst	r2, #1
   13334:	beq	1334c <__assert_fail@plt+0x235c>
   13338:	ldr	r1, [r3, #56]	; 0x38
   1333c:	add	r0, r0, #4
   13340:	ldr	r2, [pc, #164]	; 133ec <__assert_fail@plt+0x23fc>
   13344:	bl	12be8 <__assert_fail@plt+0x1bf8>
   13348:	ldr	ip, [r5, #120]	; 0x78
   1334c:	add	r4, r6, r4, lsl #2
   13350:	ldr	r2, [r5]
   13354:	ldr	r3, [r4, #12]
   13358:	mov	r0, r8
   1335c:	sub	r3, r3, ip
   13360:	str	r3, [r4, #12]
   13364:	str	r9, [r6, #8]
   13368:	str	r6, [r2, #12]
   1336c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13370:	add	r4, r4, #1
   13374:	cmp	r4, sl
   13378:	bcs	13390 <__assert_fail@plt+0x23a0>
   1337c:	ldr	r0, [r5, #8]
   13380:	bl	12c9c <__assert_fail@plt+0x1cac>
   13384:	b	13264 <__assert_fail@plt+0x2274>
   13388:	mov	r4, #0
   1338c:	b	1337c <__assert_fail@plt+0x238c>
   13390:	cmp	r7, r6
   13394:	beq	133bc <__assert_fail@plt+0x23cc>
   13398:	ldr	r6, [r6]
   1339c:	mov	r4, r8
   133a0:	ldr	sl, [r6, #8]
   133a4:	cmp	sl, #0
   133a8:	bne	1337c <__assert_fail@plt+0x238c>
   133ac:	mov	r4, #12
   133b0:	cmp	r7, r6
   133b4:	ldrne	r6, [r6]
   133b8:	bne	13250 <__assert_fail@plt+0x2260>
   133bc:	mov	r8, #0
   133c0:	b	13318 <__assert_fail@plt+0x2328>
   133c4:	ldr	r3, [pc, #36]	; 133f0 <__assert_fail@plt+0x2400>
   133c8:	ldr	r2, [pc, #36]	; 133f4 <__assert_fail@plt+0x2404>
   133cc:	ldr	r1, [pc, #36]	; 133f8 <__assert_fail@plt+0x2408>
   133d0:	ldr	r0, [pc, #36]	; 133fc <__assert_fail@plt+0x240c>
   133d4:	bl	10ff0 <__assert_fail@plt>
   133d8:	ldr	r3, [pc, #16]	; 133f0 <__assert_fail@plt+0x2400>
   133dc:	mov	r2, #2592	; 0xa20
   133e0:	ldr	r1, [pc, #16]	; 133f8 <__assert_fail@plt+0x2408>
   133e4:	ldr	r0, [pc, #20]	; 13400 <__assert_fail@plt+0x2410>
   133e8:	bl	10ff0 <__assert_fail@plt>
   133ec:	andeq	r5, r1, r0, ror #27
   133f0:	andeq	r5, r1, ip, lsr r9
   133f4:	andeq	r0, r0, lr, asr #19
   133f8:	andeq	r5, r1, r4, ror fp
   133fc:	strdeq	r5, [r1], -r8
   13400:	andeq	r5, r1, r4, lsl lr
   13404:	push	{r4, lr}
   13408:	mov	r4, r0
   1340c:	ldr	r0, [r0, #52]	; 0x34
   13410:	bl	10f48 <fsetpos@plt>
   13414:	cmp	r0, #0
   13418:	popeq	{r4, pc}
   1341c:	ldr	r0, [r4, #4]
   13420:	bl	10e1c <perror@plt>
   13424:	mov	r0, r4
   13428:	ldr	r2, [pc, #4]	; 13434 <__assert_fail@plt+0x2444>
   1342c:	mov	r1, #5
   13430:	bl	12240 <__assert_fail@plt+0x1250>
   13434:	andeq	r5, r1, r0, asr #28
   13438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1343c:	mov	r6, r0
   13440:	ldr	r7, [pc, #940]	; 137f4 <__assert_fail@plt+0x2804>
   13444:	sub	sp, sp, #160	; 0xa0
   13448:	mov	r5, r1
   1344c:	ldr	r3, [r7]
   13450:	add	r1, sp, #4
   13454:	str	r3, [sp, #156]	; 0x9c
   13458:	bl	12c68 <__assert_fail@plt+0x1c78>
   1345c:	ldr	r4, [r6, #492]	; 0x1ec
   13460:	add	r0, sp, #16
   13464:	mov	r1, #140	; 0x8c
   13468:	ldr	r8, [r6, #496]	; 0x1f0
   1346c:	bl	11bcc <__assert_fail@plt+0xbdc>
   13470:	ldr	r2, [r4, #4]
   13474:	ldr	ip, [r4]
   13478:	mov	r3, #0
   1347c:	str	r2, [sp, #28]
   13480:	mov	r2, #24
   13484:	mov	r1, r3
   13488:	str	ip, [sp, #24]
   1348c:	mvn	lr, #0
   13490:	str	r3, [sp, #80]	; 0x50
   13494:	str	r3, [sp, #84]	; 0x54
   13498:	str	r3, [sp, #112]	; 0x70
   1349c:	str	r3, [sp, #116]	; 0x74
   134a0:	str	r3, [sp, #120]	; 0x78
   134a4:	str	r3, [sp, #148]	; 0x94
   134a8:	str	r3, [sp, #48]	; 0x30
   134ac:	str	r3, [sp, #64]	; 0x40
   134b0:	str	r3, [sp, #76]	; 0x4c
   134b4:	mov	ip, #16
   134b8:	str	r2, [sp, #68]	; 0x44
   134bc:	add	r0, sp, #80	; 0x50
   134c0:	mov	r3, #56	; 0x38
   134c4:	ldr	r2, [pc, #812]	; 137f8 <__assert_fail@plt+0x2808>
   134c8:	str	r8, [sp, #16]
   134cc:	str	r4, [sp, #20]
   134d0:	str	r5, [sp, #32]
   134d4:	str	lr, [sp, #140]	; 0x8c
   134d8:	str	ip, [sp, #72]	; 0x48
   134dc:	bl	10f6c <inflateInit2_@plt>
   134e0:	cmp	r0, #0
   134e4:	str	r0, [sp, #144]	; 0x90
   134e8:	bne	13538 <__assert_fail@plt+0x2548>
   134ec:	mov	r8, r0
   134f0:	add	r0, sp, #16
   134f4:	str	r8, [sp, #140]	; 0x8c
   134f8:	bl	13224 <__assert_fail@plt+0x2234>
   134fc:	cmp	r0, #0
   13500:	beq	136b4 <__assert_fail@plt+0x26c4>
   13504:	cmp	r0, #1
   13508:	beq	13614 <__assert_fail@plt+0x2624>
   1350c:	cmn	r0, #1
   13510:	beq	13564 <__assert_fail@plt+0x2574>
   13514:	add	r0, sp, #16
   13518:	bl	129f4 <__assert_fail@plt+0x1a04>
   1351c:	ldr	r2, [sp, #156]	; 0x9c
   13520:	ldr	r3, [r7]
   13524:	mov	r0, r8
   13528:	cmp	r2, r3
   1352c:	bne	137c8 <__assert_fail@plt+0x27d8>
   13530:	add	sp, sp, #160	; 0xa0
   13534:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13538:	ldr	r3, [sp, #28]
   1353c:	ldrb	r3, [r3]
   13540:	tst	r3, #1
   13544:	beq	13554 <__assert_fail@plt+0x2564>
   13548:	mov	r1, #1
   1354c:	add	r0, sp, #16
   13550:	bl	1292c <__assert_fail@plt+0x193c>
   13554:	add	r0, sp, #16
   13558:	bl	129f4 <__assert_fail@plt+0x1a04>
   1355c:	mov	r8, #0
   13560:	b	1351c <__assert_fail@plt+0x252c>
   13564:	ldr	sl, [sp, #148]	; 0x94
   13568:	ldr	r3, [r6, #12]
   1356c:	add	sl, sl, #1
   13570:	mov	r9, #15
   13574:	orr	r3, r3, #1
   13578:	str	r3, [r6, #12]
   1357c:	mov	r4, #0
   13580:	cmp	sl, r9
   13584:	blt	13594 <__assert_fail@plt+0x25a4>
   13588:	ldr	r3, [sp, #72]	; 0x48
   1358c:	cmp	r3, r9
   13590:	ble	137a0 <__assert_fail@plt+0x27b0>
   13594:	ldr	r3, [sp, #140]	; 0x8c
   13598:	add	r5, sl, r9
   1359c:	cmp	r3, #0
   135a0:	asr	r5, r5, #1
   135a4:	blt	137cc <__assert_fail@plt+0x27dc>
   135a8:	mov	r1, #0
   135ac:	add	r0, sp, #80	; 0x50
   135b0:	str	r4, [sp, #80]	; 0x50
   135b4:	str	r4, [sp, #84]	; 0x54
   135b8:	str	r4, [sp, #92]	; 0x5c
   135bc:	str	r4, [sp, #96]	; 0x60
   135c0:	str	r5, [sp, #148]	; 0x94
   135c4:	str	r4, [sp, #48]	; 0x30
   135c8:	str	r4, [sp, #64]	; 0x40
   135cc:	str	r4, [sp, #140]	; 0x8c
   135d0:	bl	10dd4 <inflateReset2@plt>
   135d4:	cmp	r0, #0
   135d8:	str	r0, [sp, #144]	; 0x90
   135dc:	bne	13538 <__assert_fail@plt+0x2548>
   135e0:	add	r1, sp, #4
   135e4:	mov	r0, r6
   135e8:	bl	13404 <__assert_fail@plt+0x2414>
   135ec:	add	r0, sp, #16
   135f0:	bl	13224 <__assert_fail@plt+0x2234>
   135f4:	cmn	r0, #1
   135f8:	beq	136dc <__assert_fail@plt+0x26ec>
   135fc:	cmp	r0, #1
   13600:	bne	13514 <__assert_fail@plt+0x2524>
   13604:	mov	r9, r5
   13608:	cmp	sl, r9
   1360c:	bge	13588 <__assert_fail@plt+0x2598>
   13610:	b	13594 <__assert_fail@plt+0x25a4>
   13614:	ldr	r3, [sp, #28]
   13618:	ldr	r1, [sp, #76]	; 0x4c
   1361c:	ldrb	r3, [r3]
   13620:	tst	r3, #4
   13624:	bne	13638 <__assert_fail@plt+0x2648>
   13628:	ldr	r2, [sp, #148]	; 0x94
   1362c:	ldr	r3, [sp, #68]	; 0x44
   13630:	cmp	r2, r3
   13634:	beq	13728 <__assert_fail@plt+0x2738>
   13638:	ldr	r2, [sp, #64]	; 0x40
   1363c:	ldr	r3, [sp, #72]	; 0x48
   13640:	cmp	r2, #1
   13644:	bgt	13720 <__assert_fail@plt+0x2730>
   13648:	ldrh	r2, [sp, #52]	; 0x34
   1364c:	cmp	r2, #16384	; 0x4000
   13650:	bhi	13720 <__assert_fail@plt+0x2730>
   13654:	cmp	r2, #8192	; 0x2000
   13658:	movhi	r9, #14
   1365c:	bhi	1369c <__assert_fail@plt+0x26ac>
   13660:	cmp	r2, #4096	; 0x1000
   13664:	movhi	r9, #13
   13668:	bhi	1369c <__assert_fail@plt+0x26ac>
   1366c:	cmp	r2, #2048	; 0x800
   13670:	movhi	r9, #12
   13674:	bhi	1369c <__assert_fail@plt+0x26ac>
   13678:	cmp	r2, #1024	; 0x400
   1367c:	movhi	r9, #11
   13680:	bhi	1369c <__assert_fail@plt+0x26ac>
   13684:	cmp	r2, #512	; 0x200
   13688:	movhi	r9, #10
   1368c:	bhi	1369c <__assert_fail@plt+0x26ac>
   13690:	cmp	r2, #256	; 0x100
   13694:	movls	r9, #8
   13698:	movhi	r9, #9
   1369c:	cmp	r9, r3
   136a0:	movge	r9, r3
   136a4:	cmp	r1, #0
   136a8:	bne	13760 <__assert_fail@plt+0x2770>
   136ac:	mov	sl, #8
   136b0:	b	1357c <__assert_fail@plt+0x258c>
   136b4:	ldr	r3, [sp, #28]
   136b8:	ldr	r2, [pc, #316]	; 137fc <__assert_fail@plt+0x280c>
   136bc:	ldrb	r3, [r3]
   136c0:	str	r2, [sp, #104]	; 0x68
   136c4:	tst	r3, #1
   136c8:	beq	13514 <__assert_fail@plt+0x2524>
   136cc:	mov	r1, r8
   136d0:	add	r0, sp, #16
   136d4:	bl	1292c <__assert_fail@plt+0x193c>
   136d8:	b	13514 <__assert_fail@plt+0x2524>
   136dc:	add	sl, r5, #1
   136e0:	cmp	r9, sl
   136e4:	bge	13580 <__assert_fail@plt+0x2590>
   136e8:	cmp	r5, #15
   136ec:	bne	137e0 <__assert_fail@plt+0x27f0>
   136f0:	ldr	r3, [sp, #104]	; 0x68
   136f4:	cmp	r3, #0
   136f8:	ldreq	r3, [pc, #256]	; 13800 <__assert_fail@plt+0x2810>
   136fc:	streq	r3, [sp, #104]	; 0x68
   13700:	ldr	r3, [sp, #28]
   13704:	ldrb	r3, [r3]
   13708:	tst	r3, #1
   1370c:	beq	13554 <__assert_fail@plt+0x2564>
   13710:	mov	r1, #0
   13714:	add	r0, sp, #16
   13718:	bl	1292c <__assert_fail@plt+0x193c>
   1371c:	b	13554 <__assert_fail@plt+0x2564>
   13720:	mov	r9, #15
   13724:	b	1369c <__assert_fail@plt+0x26ac>
   13728:	cmp	r1, #0
   1372c:	beq	13790 <__assert_fail@plt+0x27a0>
   13730:	ldr	r2, [sp, #64]	; 0x40
   13734:	ldr	r3, [sp, #72]	; 0x48
   13738:	cmp	r2, #1
   1373c:	bgt	137b8 <__assert_fail@plt+0x27c8>
   13740:	ldrh	r2, [sp, #52]	; 0x34
   13744:	cmp	r2, #16384	; 0x4000
   13748:	bhi	137b8 <__assert_fail@plt+0x27c8>
   1374c:	cmp	r2, #8192	; 0x2000
   13750:	bls	13660 <__assert_fail@plt+0x2670>
   13754:	cmp	r3, #14
   13758:	movlt	r9, r3
   1375c:	movge	r9, #14
   13760:	ldr	r3, [sp, #20]
   13764:	ldr	r0, [r3]
   13768:	ldr	r2, [r0]
   1376c:	ldrb	r2, [r2]
   13770:	tst	r2, #1
   13774:	beq	136ac <__assert_fail@plt+0x26bc>
   13778:	ldr	r1, [r3, #56]	; 0x38
   1377c:	add	r0, r0, #4
   13780:	ldr	r2, [pc, #124]	; 13804 <__assert_fail@plt+0x2814>
   13784:	bl	12be8 <__assert_fail@plt+0x1bf8>
   13788:	mov	sl, #8
   1378c:	b	1357c <__assert_fail@plt+0x258c>
   13790:	add	r0, sp, #16
   13794:	bl	129f4 <__assert_fail@plt+0x1a04>
   13798:	mov	r8, #1
   1379c:	b	1351c <__assert_fail@plt+0x252c>
   137a0:	beq	13790 <__assert_fail@plt+0x27a0>
   137a4:	ldr	r3, [pc, #92]	; 13808 <__assert_fail@plt+0x2818>
   137a8:	ldr	r2, [pc, #92]	; 1380c <__assert_fail@plt+0x281c>
   137ac:	ldr	r1, [pc, #92]	; 13810 <__assert_fail@plt+0x2820>
   137b0:	ldr	r0, [pc, #92]	; 13814 <__assert_fail@plt+0x2824>
   137b4:	bl	10ff0 <__assert_fail@plt>
   137b8:	cmp	r3, #15
   137bc:	movlt	r9, r3
   137c0:	movge	r9, #15
   137c4:	b	13760 <__assert_fail@plt+0x2770>
   137c8:	bl	10e10 <__stack_chk_fail@plt>
   137cc:	ldr	r3, [pc, #68]	; 13818 <__assert_fail@plt+0x2828>
   137d0:	ldr	r2, [pc, #68]	; 1381c <__assert_fail@plt+0x282c>
   137d4:	ldr	r1, [pc, #52]	; 13810 <__assert_fail@plt+0x2820>
   137d8:	ldr	r0, [pc, #64]	; 13820 <__assert_fail@plt+0x2830>
   137dc:	bl	10ff0 <__assert_fail@plt>
   137e0:	ldr	r3, [pc, #32]	; 13808 <__assert_fail@plt+0x2818>
   137e4:	ldr	r2, [pc, #56]	; 13824 <__assert_fail@plt+0x2834>
   137e8:	ldr	r1, [pc, #32]	; 13810 <__assert_fail@plt+0x2820>
   137ec:	ldr	r0, [pc, #52]	; 13828 <__assert_fail@plt+0x2838>
   137f0:	bl	10ff0 <__assert_fail@plt>
   137f4:	andeq	r8, r2, r0, lsl #28
   137f8:	andeq	r5, r1, r8, asr #28
   137fc:	andeq	r5, r1, r0, ror #28
   13800:	andeq	r5, r1, ip, ror #26
   13804:	andeq	r5, r1, r0, asr lr
   13808:	andeq	r5, r1, r4, asr r9
   1380c:			; <UNDEFINED> instruction: 0x00000ab6
   13810:	andeq	r5, r1, r4, ror fp
   13814:	muleq	r1, r0, lr
   13818:	andeq	r5, r1, r8, asr #18
   1381c:	andeq	r0, r0, ip, ror r8
   13820:	andeq	r5, r1, ip, ror #28
   13824:	muleq	r0, r4, sl
   13828:	andeq	r5, r1, r0, lsl #29
   1382c:	push	{r4, r5, lr}
   13830:	sub	sp, sp, #12
   13834:	mov	r5, #0
   13838:	str	r1, [sp, #4]
   1383c:	b	13880 <__assert_fail@plt+0x2890>
   13840:	ldr	r3, [sp, #4]
   13844:	ldr	lr, [sp, #4]
   13848:	ldr	r2, [sp, #4]
   1384c:	lsl	r3, r3, #1
   13850:	lsl	lr, lr, #1
   13854:	ldrh	r3, [r0, r3]
   13858:	ldrh	ip, [r0, lr]
   1385c:	ldr	lr, [sp, #4]
   13860:	lsl	r2, r2, #1
   13864:	orr	r3, r5, r3, lsr #3
   13868:	cmp	r4, lr
   1386c:	cmpeq	r3, #0
   13870:	lsl	ip, ip, #13
   13874:	ldreq	r1, [sp, #4]
   13878:	uxth	r5, ip
   1387c:	strh	r3, [r0, r2]
   13880:	ldr	r3, [sp, #4]
   13884:	sub	r4, r1, #1
   13888:	sub	r3, r3, #1
   1388c:	cmp	r3, #0
   13890:	str	r3, [sp, #4]
   13894:	bge	13840 <__assert_fail@plt+0x2850>
   13898:	mov	r0, r1
   1389c:	add	sp, sp, #12
   138a0:	pop	{r4, r5, pc}
   138a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138a8:	mov	r4, r0
   138ac:	ldr	r0, [r0]
   138b0:	ldr	r5, [pc, #3100]	; 144d4 <__assert_fail@plt+0x34e4>
   138b4:	mov	r7, r1
   138b8:	ldrb	r1, [r0]
   138bc:	sub	sp, sp, #28
   138c0:	mov	r9, r2
   138c4:	ldr	r2, [r5]
   138c8:	cmp	r1, #63	; 0x3f
   138cc:	mov	r8, r3
   138d0:	str	r2, [sp, #20]
   138d4:	ldr	r6, [r4, #472]	; 0x1d8
   138d8:	bls	13924 <__assert_fail@plt+0x2934>
   138dc:	ldr	sl, [pc, #3060]	; 144d8 <__assert_fail@plt+0x34e8>
   138e0:	mov	r2, #2
   138e4:	mov	r1, #1
   138e8:	ldr	r3, [sl]
   138ec:	ldr	r0, [pc, #3048]	; 144dc <__assert_fail@plt+0x34ec>
   138f0:	bl	10e34 <fwrite@plt>
   138f4:	ldr	r1, [sl]
   138f8:	ldr	r0, [r4, #472]	; 0x1d8
   138fc:	bl	12110 <__assert_fail@plt+0x1120>
   13900:	ldr	r3, [r4, #476]	; 0x1dc
   13904:	ldr	r0, [sl]
   13908:	mvn	r3, r3
   1390c:	ldr	r2, [pc, #3020]	; 144e0 <__assert_fail@plt+0x34f0>
   13910:	stm	sp, {r3, r7}
   13914:	mov	r1, #1
   13918:	ldr	r3, [r4, #468]	; 0x1d4
   1391c:	bl	10f18 <__fprintf_chk@plt>
   13920:	ldr	r0, [r4]
   13924:	ldr	r3, [r4, #476]	; 0x1dc
   13928:	and	sl, r6, #536870912	; 0x20000000
   1392c:	mvn	r3, r3
   13930:	cmp	r3, r7
   13934:	beq	13960 <__assert_fail@plt+0x2970>
   13938:	ldrb	r2, [r0, #1]
   1393c:	ldr	r3, [r4, #12]
   13940:	and	r2, r2, #7
   13944:	orr	r3, r3, #2
   13948:	cmp	r2, #1
   1394c:	str	r3, [r4, #12]
   13950:	beq	13d28 <__assert_fail@plt+0x2d38>
   13954:	ldrb	r3, [r0]
   13958:	tst	r3, #1
   1395c:	bne	13eb4 <__assert_fail@plt+0x2ec4>
   13960:	cmp	sl, #0
   13964:	beq	13a30 <__assert_fail@plt+0x2a40>
   13968:	ldr	r3, [pc, #2932]	; 144e4 <__assert_fail@plt+0x34f4>
   1396c:	cmp	r6, r3
   13970:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13974:	bhi	13a04 <__assert_fail@plt+0x2a14>
   13978:	add	r3, r3, #-134217728	; 0xf8000000
   1397c:	add	r3, r3, #195584	; 0x2fc00
   13980:	add	r3, r3, #1012	; 0x3f4
   13984:	cmp	r6, r3
   13988:	beq	13c2c <__assert_fail@plt+0x2c3c>
   1398c:	bhi	13c74 <__assert_fail@plt+0x2c84>
   13990:	add	r3, r3, #-67108864	; 0xfc000000
   13994:	sub	r3, r3, #62464	; 0xf400
   13998:	sub	r3, r3, #26
   1399c:	cmp	r6, r3
   139a0:	beq	13c90 <__assert_fail@plt+0x2ca0>
   139a4:	bhi	13c40 <__assert_fail@plt+0x2c50>
   139a8:	add	r3, r3, #-16777216	; 0xff000000
   139ac:	add	r3, r3, #193536	; 0x2f400
   139b0:	add	r3, r3, #247	; 0xf7
   139b4:	cmp	r6, r3
   139b8:	bne	13bc0 <__assert_fail@plt+0x2bd0>
   139bc:	ldrb	r3, [r0, #1]
   139c0:	and	r3, r3, #7
   139c4:	cmp	r3, #3
   139c8:	bhi	13bd8 <__assert_fail@plt+0x2be8>
   139cc:	ldr	r3, [r4, #504]	; 0x1f8
   139d0:	mov	r1, #0
   139d4:	mov	r0, r4
   139d8:	blx	r3
   139dc:	str	r9, [r4, #468]	; 0x1d4
   139e0:	str	r8, [r4, #472]	; 0x1d8
   139e4:	add	r1, r4, #456	; 0x1c8
   139e8:	mov	r0, r4
   139ec:	bl	12c68 <__assert_fail@plt+0x1c78>
   139f0:	ldr	r3, [r4, #492]	; 0x1ec
   139f4:	mov	r2, #0
   139f8:	str	r2, [r3, #68]	; 0x44
   139fc:	str	r2, [r3, #64]	; 0x40
   13a00:	b	13bf4 <__assert_fail@plt+0x2c04>
   13a04:	ldr	r3, [pc, #2780]	; 144e8 <__assert_fail@plt+0x34f8>
   13a08:	cmp	r6, r3
   13a0c:	beq	13c60 <__assert_fail@plt+0x2c70>
   13a10:	bls	13b80 <__assert_fail@plt+0x2b90>
   13a14:	ldr	r3, [pc, #2768]	; 144ec <__assert_fail@plt+0x34fc>
   13a18:	cmp	r6, r3
   13a1c:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13a20:	bls	13cfc <__assert_fail@plt+0x2d0c>
   13a24:	ldr	r3, [pc, #2756]	; 144f0 <__assert_fail@plt+0x3500>
   13a28:	cmp	r6, r3
   13a2c:	bne	13ccc <__assert_fail@plt+0x2cdc>
   13a30:	ldr	r3, [pc, #2748]	; 144f4 <__assert_fail@plt+0x3504>
   13a34:	cmp	r6, r3
   13a38:	beq	13ecc <__assert_fail@plt+0x2edc>
   13a3c:	ldr	r3, [r4, #504]	; 0x1f8
   13a40:	mov	r1, #0
   13a44:	mov	r0, r4
   13a48:	add	r7, r4, #456	; 0x1c8
   13a4c:	blx	r3
   13a50:	str	r9, [r4, #468]	; 0x1d4
   13a54:	str	r8, [r4, #472]	; 0x1d8
   13a58:	mov	r1, r7
   13a5c:	mov	r0, r4
   13a60:	bl	12c68 <__assert_fail@plt+0x1c78>
   13a64:	ldr	r9, [r4, #492]	; 0x1ec
   13a68:	ldr	r3, [pc, #2696]	; 144f8 <__assert_fail@plt+0x3508>
   13a6c:	mov	r8, #0
   13a70:	cmp	r6, r3
   13a74:	str	r8, [r9, #68]	; 0x44
   13a78:	str	r8, [r9, #64]	; 0x40
   13a7c:	beq	13e40 <__assert_fail@plt+0x2e50>
   13a80:	bls	13d50 <__assert_fail@plt+0x2d60>
   13a84:	ldr	r3, [pc, #2672]	; 144fc <__assert_fail@plt+0x350c>
   13a88:	cmp	r6, r3
   13a8c:	bne	13e34 <__assert_fail@plt+0x2e44>
   13a90:	ldr	r3, [r4, #496]	; 0x1f0
   13a94:	cmp	r3, #0
   13a98:	bne	14410 <__assert_fail@plt+0x3420>
   13a9c:	mov	r1, r9
   13aa0:	ldr	r8, [r9, #52]	; 0x34
   13aa4:	ldr	r0, [r1], #40	; 0x28
   13aa8:	mov	r3, #8
   13aac:	str	r3, [r0, #480]	; 0x1e0
   13ab0:	bl	13404 <__assert_fail@plt+0x2414>
   13ab4:	cmp	r8, #4
   13ab8:	movhi	r6, r8
   13abc:	bhi	13ad0 <__assert_fail@plt+0x2ae0>
   13ac0:	b	13b4c <__assert_fail@plt+0x2b5c>
   13ac4:	cmp	r3, #4
   13ac8:	mov	r6, r3
   13acc:	beq	13b4c <__assert_fail@plt+0x2b5c>
   13ad0:	mov	r0, r4
   13ad4:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13ad8:	sub	r3, r6, #1
   13adc:	cmp	r0, #0
   13ae0:	bne	13ac4 <__assert_fail@plt+0x2ad4>
   13ae4:	mov	r0, r4
   13ae8:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13aec:	cmp	r0, #0
   13af0:	beq	13bf4 <__assert_fail@plt+0x2c04>
   13af4:	sub	r6, r6, #3
   13af8:	mov	r0, r4
   13afc:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13b00:	cmp	r6, #8
   13b04:	bhi	13b14 <__assert_fail@plt+0x2b24>
   13b08:	b	13b4c <__assert_fail@plt+0x2b5c>
   13b0c:	cmp	r6, #8
   13b10:	beq	13b4c <__assert_fail@plt+0x2b5c>
   13b14:	mov	r0, r4
   13b18:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13b1c:	sub	r6, r6, #1
   13b20:	sub	r9, r8, r6
   13b24:	cmp	r0, #0
   13b28:	bne	13b0c <__assert_fail@plt+0x2b1c>
   13b2c:	sub	r8, r8, #7
   13b30:	mov	r0, r4
   13b34:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13b38:	add	r9, r9, #1
   13b3c:	cmp	r0, #0
   13b40:	beq	1437c <__assert_fail@plt+0x338c>
   13b44:	cmp	r9, r8
   13b48:	bne	13b30 <__assert_fail@plt+0x2b40>
   13b4c:	ldr	r3, [r4]
   13b50:	ldrb	r3, [r3]
   13b54:	tst	r3, #1
   13b58:	bne	1432c <__assert_fail@plt+0x333c>
   13b5c:	mov	r3, #0
   13b60:	ldr	r0, [r4, #492]	; 0x1ec
   13b64:	mov	r1, #76	; 0x4c
   13b68:	str	r3, [r4, #492]	; 0x1ec
   13b6c:	bl	11bcc <__assert_fail@plt+0xbdc>
   13b70:	mov	r1, r7
   13b74:	mov	r0, r4
   13b78:	bl	13404 <__assert_fail@plt+0x2414>
   13b7c:	b	13bec <__assert_fail@plt+0x2bfc>
   13b80:	add	r3, r3, #528	; 0x210
   13b84:	add	r3, r3, #-67108862	; 0xfc000002
   13b88:	add	r3, r3, #66060288	; 0x3f00000
   13b8c:	cmp	r6, r3
   13b90:	beq	13a30 <__assert_fail@plt+0x2a40>
   13b94:	bhi	13c0c <__assert_fail@plt+0x2c1c>
   13b98:	add	r3, r3, #-50331648	; 0xfd000000
   13b9c:	add	r3, r3, #63232	; 0xf700
   13ba0:	add	r3, r3, #248	; 0xf8
   13ba4:	cmp	r6, r3
   13ba8:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13bac:	add	r3, r3, #331776	; 0x51000
   13bb0:	add	r3, r3, #2080	; 0x820
   13bb4:	add	r3, r3, #7
   13bb8:	cmp	r6, r3
   13bbc:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13bc0:	ldrb	r3, [r0, #1]
   13bc4:	tst	r6, #32
   13bc8:	and	r3, r3, #7
   13bcc:	beq	1402c <__assert_fail@plt+0x303c>
   13bd0:	cmp	r3, #2
   13bd4:	bls	13a30 <__assert_fail@plt+0x2a40>
   13bd8:	str	r9, [r4, #468]	; 0x1d4
   13bdc:	str	r8, [r4, #472]	; 0x1d8
   13be0:	add	r1, r4, #456	; 0x1c8
   13be4:	mov	r0, r4
   13be8:	bl	12c68 <__assert_fail@plt+0x1c78>
   13bec:	mov	r0, r4
   13bf0:	bl	145a0 <__assert_fail@plt+0x35b0>
   13bf4:	ldr	r2, [sp, #20]
   13bf8:	ldr	r3, [r5]
   13bfc:	cmp	r2, r3
   13c00:	bne	143e8 <__assert_fail@plt+0x33f8>
   13c04:	add	sp, sp, #28
   13c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c0c:	ldr	r3, [pc, #2284]	; 14500 <__assert_fail@plt+0x3510>
   13c10:	cmp	r6, r3
   13c14:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13c18:	add	r3, r3, #851968	; 0xd0000
   13c1c:	add	r3, r3, #2816	; 0xb00
   13c20:	add	r3, r3, #8
   13c24:	cmp	r6, r3
   13c28:	bne	13bc0 <__assert_fail@plt+0x2bd0>
   13c2c:	ldrb	r3, [r0, #1]
   13c30:	and	r3, r3, #7
   13c34:	cmp	r3, #2
   13c38:	bls	13a30 <__assert_fail@plt+0x2a40>
   13c3c:	b	13bd8 <__assert_fail@plt+0x2be8>
   13c40:	ldr	r3, [pc, #2236]	; 14504 <__assert_fail@plt+0x3514>
   13c44:	cmp	r6, r3
   13c48:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13c4c:	add	r3, r3, #15663104	; 0xef0000
   13c50:	add	r3, r3, #3024	; 0xbd0
   13c54:	add	r3, r3, #14
   13c58:	cmp	r6, r3
   13c5c:	bne	13bc0 <__assert_fail@plt+0x2bd0>
   13c60:	ldrb	r3, [r0, #1]
   13c64:	and	r3, r3, #7
   13c68:	cmp	r3, #5
   13c6c:	bls	13a30 <__assert_fail@plt+0x2a40>
   13c70:	b	13bd8 <__assert_fail@plt+0x2be8>
   13c74:	ldr	r3, [pc, #2188]	; 14508 <__assert_fail@plt+0x3518>
   13c78:	cmp	r6, r3
   13c7c:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13c80:	bls	13cdc <__assert_fail@plt+0x2cec>
   13c84:	ldr	r3, [pc, #2156]	; 144f8 <__assert_fail@plt+0x3508>
   13c88:	cmp	r6, r3
   13c8c:	bne	13ca4 <__assert_fail@plt+0x2cb4>
   13c90:	ldrb	r3, [r0, #1]
   13c94:	and	r3, r3, #7
   13c98:	cmp	r3, #4
   13c9c:	bls	13a30 <__assert_fail@plt+0x2a40>
   13ca0:	b	13bd8 <__assert_fail@plt+0x2be8>
   13ca4:	add	r3, r3, #1114112	; 0x110000
   13ca8:	add	r3, r3, #5376	; 0x1500
   13cac:	add	r3, r3, #36	; 0x24
   13cb0:	cmp	r6, r3
   13cb4:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13cb8:	ldrb	r3, [r0, #1]
   13cbc:	tst	r6, #32
   13cc0:	and	r3, r3, #7
   13cc4:	beq	1402c <__assert_fail@plt+0x303c>
   13cc8:	b	13bd0 <__assert_fail@plt+0x2be0>
   13ccc:	ldr	r3, [pc, #2104]	; 1450c <__assert_fail@plt+0x351c>
   13cd0:	cmp	r6, r3
   13cd4:	bne	13bc0 <__assert_fail@plt+0x2bd0>
   13cd8:	b	13c2c <__assert_fail@plt+0x2c3c>
   13cdc:	add	r3, r3, #-16777216	; 0xff000000
   13ce0:	sub	r3, r3, #3296	; 0xce0
   13ce4:	cmp	r6, r3
   13ce8:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13cec:	add	r3, r3, #4
   13cf0:	cmp	r6, r3
   13cf4:	bne	13bc0 <__assert_fail@plt+0x2bd0>
   13cf8:	b	13c2c <__assert_fail@plt+0x2c3c>
   13cfc:	sub	r3, r3, #16056320	; 0xf50000
   13d00:	sub	r3, r3, #2032	; 0x7f0
   13d04:	sub	r3, r3, #3
   13d08:	cmp	r6, r3
   13d0c:	beq	13c2c <__assert_fail@plt+0x2c3c>
   13d10:	add	r3, r3, #15794176	; 0xf10000
   13d14:	add	r3, r3, #4864	; 0x1300
   13d18:	add	r3, r3, #34	; 0x22
   13d1c:	cmp	r6, r3
   13d20:	bne	13bc0 <__assert_fail@plt+0x2bd0>
   13d24:	b	13c2c <__assert_fail@plt+0x2c3c>
   13d28:	cmp	sl, #0
   13d2c:	beq	14400 <__assert_fail@plt+0x3410>
   13d30:	ldrb	r3, [r0]
   13d34:	tst	r3, #1
   13d38:	beq	13bd8 <__assert_fail@plt+0x2be8>
   13d3c:	mov	r1, r6
   13d40:	ldr	r2, [pc, #1992]	; 14510 <__assert_fail@plt+0x3520>
   13d44:	add	r0, r4, #4
   13d48:	bl	12be8 <__assert_fail@plt+0x1bf8>
   13d4c:	b	13bd8 <__assert_fail@plt+0x2be8>
   13d50:	add	r3, r3, #327680	; 0x50000
   13d54:	add	r3, r3, #256	; 0x100
   13d58:	add	r3, r3, #-536870910	; 0xe0000002
   13d5c:	cmp	r6, r3
   13d60:	bne	13bf4 <__assert_fail@plt+0x2c04>
   13d64:	ldr	r3, [r9, #52]	; 0x34
   13d68:	cmp	r3, #13
   13d6c:	bne	144a0 <__assert_fail@plt+0x34b0>
   13d70:	mov	r1, r9
   13d74:	mov	r3, #8
   13d78:	ldr	r0, [r1], #40	; 0x28
   13d7c:	mov	r6, #4
   13d80:	str	r3, [r0, #480]	; 0x1e0
   13d84:	bl	13404 <__assert_fail@plt+0x2414>
   13d88:	mov	r0, r4
   13d8c:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13d90:	lsl	r8, r8, #8
   13d94:	subs	r6, r6, #1
   13d98:	add	r8, r0, r8
   13d9c:	bne	13d88 <__assert_fail@plt+0x2d98>
   13da0:	mov	r7, #4
   13da4:	str	r8, [r4, #24]
   13da8:	mov	r0, r4
   13dac:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13db0:	lsl	r6, r6, #8
   13db4:	subs	r7, r7, #1
   13db8:	add	r6, r0, r6
   13dbc:	bne	13da8 <__assert_fail@plt+0x2db8>
   13dc0:	str	r6, [r4, #28]
   13dc4:	mov	r0, r4
   13dc8:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13dcc:	strb	r0, [r4, #32]
   13dd0:	mov	r0, r4
   13dd4:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13dd8:	strb	r0, [r4, #33]	; 0x21
   13ddc:	mov	r0, r4
   13de0:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13de4:	strb	r0, [r4, #34]	; 0x22
   13de8:	mov	r0, r4
   13dec:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13df0:	strb	r0, [r4, #35]	; 0x23
   13df4:	mov	r0, r4
   13df8:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13dfc:	ldrb	r3, [r4, #32]
   13e00:	ldrb	r2, [r4, #33]	; 0x21
   13e04:	uxth	fp, r3
   13e08:	strb	r0, [r4, #36]	; 0x24
   13e0c:	cmp	r2, #6
   13e10:	ldrls	pc, [pc, r2, lsl #2]
   13e14:	b	14444 <__assert_fail@plt+0x3454>
   13e18:	andeq	r4, r1, ip, asr #3
   13e1c:	andeq	r4, r1, r4, asr #8
   13e20:			; <UNDEFINED> instruction: 0x000141b4
   13e24:	muleq	r1, r0, r1
   13e28:	andeq	r4, r1, r8, ror r1
   13e2c:	andeq	r4, r1, r4, asr #8
   13e30:	muleq	r1, r8, r0
   13e34:	add	r3, r3, #285212672	; 0x11000000
   13e38:	cmp	r6, r3
   13e3c:	bne	13bf4 <__assert_fail@plt+0x2c04>
   13e40:	ldr	r6, [r4, #496]	; 0x1f0
   13e44:	cmp	r6, #0
   13e48:	bne	143ec <__assert_fail@plt+0x33fc>
   13e4c:	mov	r1, r9
   13e50:	ldr	r8, [r9, #52]	; 0x34
   13e54:	ldr	r0, [r1], #40	; 0x28
   13e58:	mov	r3, #8
   13e5c:	str	r3, [r0, #480]	; 0x1e0
   13e60:	bl	13404 <__assert_fail@plt+0x2414>
   13e64:	cmp	r8, #8
   13e68:	subhi	r8, r8, #8
   13e6c:	bhi	13e80 <__assert_fail@plt+0x2e90>
   13e70:	b	13ff0 <__assert_fail@plt+0x3000>
   13e74:	cmp	r3, r8
   13e78:	mov	r6, r3
   13e7c:	beq	13ff0 <__assert_fail@plt+0x3000>
   13e80:	mov	r0, r4
   13e84:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13e88:	add	r3, r6, #1
   13e8c:	cmp	r0, #0
   13e90:	bne	13e74 <__assert_fail@plt+0x2e84>
   13e94:	mov	r0, r4
   13e98:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   13e9c:	add	r1, r6, #2
   13ea0:	mov	r0, r4
   13ea4:	bl	13438 <__assert_fail@plt+0x2448>
   13ea8:	cmp	r0, #0
   13eac:	bne	13bf4 <__assert_fail@plt+0x2c04>
   13eb0:	b	13b5c <__assert_fail@plt+0x2b6c>
   13eb4:	add	r0, r4, #4
   13eb8:	ldr	r2, [pc, #1620]	; 14514 <__assert_fail@plt+0x3524>
   13ebc:	mov	r1, r6
   13ec0:	bl	12be8 <__assert_fail@plt+0x1bf8>
   13ec4:	ldr	r0, [r4]
   13ec8:	b	13960 <__assert_fail@plt+0x2970>
   13ecc:	ldr	r3, [r4, #496]	; 0x1f0
   13ed0:	cmp	r3, #0
   13ed4:	beq	14018 <__assert_fail@plt+0x3028>
   13ed8:	ldr	r3, [r4, #492]	; 0x1ec
   13edc:	cmp	r3, #0
   13ee0:	beq	144c0 <__assert_fail@plt+0x34d0>
   13ee4:	ldr	r2, [r3, #56]	; 0x38
   13ee8:	cmp	r2, r6
   13eec:	ldreq	r2, [r4, #468]	; 0x1d4
   13ef0:	streq	r2, [r3, #52]	; 0x34
   13ef4:	bne	144ac <__assert_fail@plt+0x34bc>
   13ef8:	add	r1, r4, #456	; 0x1c8
   13efc:	str	r9, [r4, #468]	; 0x1d4
   13f00:	str	r8, [r4, #472]	; 0x1d8
   13f04:	mov	r0, r4
   13f08:	bl	12c68 <__assert_fail@plt+0x1c78>
   13f0c:	ldr	r2, [r4, #496]	; 0x1f0
   13f10:	ldr	r1, [r4, #492]	; 0x1ec
   13f14:	mov	sl, #0
   13f18:	cmp	r2, sl
   13f1c:	str	sl, [r1, #68]	; 0x44
   13f20:	str	sl, [r1, #64]	; 0x40
   13f24:	beq	14424 <__assert_fail@plt+0x3434>
   13f28:	ldr	r7, [r2, #12]
   13f2c:	ldmib	r7, {r0, r3}
   13f30:	cmp	r3, r0
   13f34:	addne	r0, r3, #1
   13f38:	beq	14340 <__assert_fail@plt+0x3350>
   13f3c:	ldr	r2, [r4, #472]	; 0x1d8
   13f40:	ldr	ip, [pc, #1452]	; 144f4 <__assert_fail@plt+0x3504>
   13f44:	str	r0, [r7, #8]
   13f48:	add	r3, r7, r3, lsl #2
   13f4c:	ldr	r0, [r1, #52]	; 0x34
   13f50:	cmp	r2, ip
   13f54:	str	r0, [r3, #12]
   13f58:	beq	13fd4 <__assert_fail@plt+0x2fe4>
   13f5c:	ldr	r0, [r1], #40	; 0x28
   13f60:	mov	r3, #8
   13f64:	str	r3, [r0, #480]	; 0x1e0
   13f68:	bl	13404 <__assert_fail@plt+0x2414>
   13f6c:	mov	r1, #0
   13f70:	mov	r0, r4
   13f74:	bl	13438 <__assert_fail@plt+0x2448>
   13f78:	cmp	r0, #0
   13f7c:	beq	14468 <__assert_fail@plt+0x3478>
   13f80:	ldr	r1, [r4, #492]	; 0x1ec
   13f84:	ldr	r3, [r4, #48]	; 0x30
   13f88:	ldr	r2, [r1, #20]
   13f8c:	cmp	r3, r2
   13f90:	blt	14038 <__assert_fail@plt+0x3048>
   13f94:	bgt	14490 <__assert_fail@plt+0x34a0>
   13f98:	add	r2, r3, #19
   13f9c:	lsl	r2, r2, #1
   13fa0:	sub	r0, r2, #30
   13fa4:	add	r0, r1, r0
   13fa8:	add	r2, r4, r2
   13fac:	b	13fc8 <__assert_fail@plt+0x2fd8>
   13fb0:	ldrh	lr, [r2, #-2]!
   13fb4:	ldrh	ip, [r0, #-2]!
   13fb8:	cmp	lr, ip
   13fbc:	bcc	14038 <__assert_fail@plt+0x3048>
   13fc0:	sub	r3, r3, #1
   13fc4:	bhi	14490 <__assert_fail@plt+0x34a0>
   13fc8:	cmp	r3, #0
   13fcc:	bgt	13fb0 <__assert_fail@plt+0x2fc0>
   13fd0:	b	14048 <__assert_fail@plt+0x3058>
   13fd4:	cmp	r8, r2
   13fd8:	beq	13bec <__assert_fail@plt+0x2bfc>
   13fdc:	ldr	r3, [pc, #1332]	; 14518 <__assert_fail@plt+0x3528>
   13fe0:	ldr	r2, [pc, #1332]	; 1451c <__assert_fail@plt+0x352c>
   13fe4:	ldr	r1, [pc, #1332]	; 14520 <__assert_fail@plt+0x3530>
   13fe8:	ldr	r0, [pc, #1332]	; 14524 <__assert_fail@plt+0x3534>
   13fec:	bl	10ff0 <__assert_fail@plt>
   13ff0:	ldr	r0, [r9]
   13ff4:	ldr	r3, [r0]
   13ff8:	ldrb	r3, [r3]
   13ffc:	tst	r3, #1
   14000:	beq	13b5c <__assert_fail@plt+0x2b6c>
   14004:	ldr	r1, [r9, #56]	; 0x38
   14008:	add	r0, r0, #4
   1400c:	ldr	r2, [pc, #1300]	; 14528 <__assert_fail@plt+0x3538>
   14010:	bl	12be8 <__assert_fail@plt+0x1bf8>
   14014:	b	13b5c <__assert_fail@plt+0x2b6c>
   14018:	ldr	r3, [r4, #504]	; 0x1f8
   1401c:	mov	r1, #1
   14020:	mov	r0, r4
   14024:	blx	r3
   14028:	b	13ef8 <__assert_fail@plt+0x2f08>
   1402c:	cmp	r3, #1
   14030:	bls	13a30 <__assert_fail@plt+0x2a40>
   14034:	b	13bd8 <__assert_fail@plt+0x2be8>
   14038:	ldr	r3, [r4]
   1403c:	ldrb	r3, [r3]
   14040:	tst	r3, #1
   14044:	bne	14364 <__assert_fail@plt+0x3374>
   14048:	ldr	r0, [r1], #40	; 0x28
   1404c:	mov	r3, #8
   14050:	str	r3, [r0, #480]	; 0x1e0
   14054:	bl	13404 <__assert_fail@plt+0x2414>
   14058:	ldr	r3, [r4, #496]	; 0x1f0
   1405c:	mov	r2, #0
   14060:	mov	r0, r3
   14064:	ldr	ip, [r3, #8]
   14068:	mov	r1, #1
   1406c:	str	ip, [r3, #16]
   14070:	ldr	ip, [ip, #12]
   14074:	str	r2, [r3, #20]
   14078:	str	r2, [r3, #24]
   1407c:	str	ip, [r3, #28]
   14080:	bl	12668 <__assert_fail@plt+0x1678>
   14084:	ldr	r2, [r4, #492]	; 0x1ec
   14088:	mov	r3, #2
   1408c:	str	r0, [r2, #52]	; 0x34
   14090:	str	r3, [r4, #488]	; 0x1e8
   14094:	b	13bf4 <__assert_fail@plt+0x2c04>
   14098:	sub	r3, r3, #8
   1409c:	tst	r3, #247	; 0xf7
   140a0:	bne	141a8 <__assert_fail@plt+0x31b8>
   140a4:	lsl	fp, fp, #2
   140a8:	uxth	fp, fp
   140ac:	ldr	r6, [r4, #24]
   140b0:	cmp	r6, #0
   140b4:	ble	1445c <__assert_fail@plt+0x346c>
   140b8:	ldr	r3, [r4, #28]
   140bc:	cmp	r3, #0
   140c0:	ble	14450 <__assert_fail@plt+0x3460>
   140c4:	ldrb	r3, [r4, #34]	; 0x22
   140c8:	cmp	r3, #0
   140cc:	bne	14484 <__assert_fail@plt+0x3494>
   140d0:	ldrb	sl, [r4, #35]	; 0x23
   140d4:	cmp	sl, #0
   140d8:	bne	14478 <__assert_fail@plt+0x3488>
   140dc:	cmp	r0, #0
   140e0:	bne	141f0 <__assert_fail@plt+0x3200>
   140e4:	mov	r3, r0
   140e8:	add	r2, sp, #6
   140ec:	mov	r1, #7
   140f0:	strh	r1, [sp, #12]
   140f4:	strh	r6, [r2, #2]!
   140f8:	lsrs	r6, r6, #16
   140fc:	add	r3, r3, #1
   14100:	bne	140f4 <__assert_fail@plt+0x3104>
   14104:	add	r2, sp, #8
   14108:	mov	r1, #1
   1410c:	str	fp, [sp]
   14110:	add	r0, sp, #12
   14114:	bl	11b28 <__assert_fail@plt+0xb38>
   14118:	mov	r1, r0
   1411c:	add	r0, sp, #12
   14120:	bl	1382c <__assert_fail@plt+0x283c>
   14124:	mov	r2, #1
   14128:	mov	r1, r0
   1412c:	add	r0, sp, #12
   14130:	bl	119f4 <__assert_fail@plt+0xa04>
   14134:	ldr	r3, [r4, #28]
   14138:	add	r2, sp, #12
   1413c:	str	r3, [sp]
   14140:	mov	r1, r6
   14144:	mov	r3, r0
   14148:	add	r0, r4, #38	; 0x26
   1414c:	bl	125d8 <__assert_fail@plt+0x15e8>
   14150:	mov	sl, r0
   14154:	str	sl, [r4, #48]	; 0x30
   14158:	sub	sl, sl, #1
   1415c:	cmp	sl, #4
   14160:	bls	13bf4 <__assert_fail@plt+0x2c04>
   14164:	ldr	r3, [pc, #960]	; 1452c <__assert_fail@plt+0x353c>
   14168:	ldr	r2, [pc, #960]	; 14530 <__assert_fail@plt+0x3540>
   1416c:	ldr	r1, [pc, #940]	; 14520 <__assert_fail@plt+0x3530>
   14170:	ldr	r0, [pc, #956]	; 14534 <__assert_fail@plt+0x3544>
   14174:	bl	10ff0 <__assert_fail@plt>
   14178:	sub	r3, r3, #8
   1417c:	tst	r3, #247	; 0xf7
   14180:	bne	141a8 <__assert_fail@plt+0x31b8>
   14184:	lsl	fp, fp, #1
   14188:	uxth	fp, fp
   1418c:	b	140ac <__assert_fail@plt+0x30bc>
   14190:	sub	r3, fp, #1
   14194:	cmp	fp, #4
   14198:	cmpne	r3, #1
   1419c:	bls	140ac <__assert_fail@plt+0x30bc>
   141a0:	cmp	fp, #8
   141a4:	beq	140ac <__assert_fail@plt+0x30bc>
   141a8:	mov	r0, r4
   141ac:	ldr	r1, [pc, #900]	; 14538 <__assert_fail@plt+0x3548>
   141b0:	bl	12398 <__assert_fail@plt+0x13a8>
   141b4:	sub	r3, r3, #8
   141b8:	tst	r3, #247	; 0xf7
   141bc:	bne	141a8 <__assert_fail@plt+0x31b8>
   141c0:	add	fp, fp, fp, lsl #1
   141c4:	uxth	fp, fp
   141c8:	b	140ac <__assert_fail@plt+0x30bc>
   141cc:	sub	r3, r3, #4
   141d0:	and	r3, r3, #251	; 0xfb
   141d4:	sub	r2, fp, #1
   141d8:	cmp	r3, #0
   141dc:	cmpne	r2, #1
   141e0:	bls	140ac <__assert_fail@plt+0x30bc>
   141e4:	cmp	fp, #16
   141e8:	beq	140ac <__assert_fail@plt+0x30bc>
   141ec:	b	141a8 <__assert_fail@plt+0x31b8>
   141f0:	cmp	r0, #1
   141f4:	bne	14438 <__assert_fail@plt+0x3448>
   141f8:	mov	r7, r0
   141fc:	mov	r8, sl
   14200:	b	14238 <__assert_fail@plt+0x3248>
   14204:	rsb	r1, r9, #8
   14208:	and	r2, r3, #7
   1420c:	asr	r1, r1, #1
   14210:	lsl	r3, r7, r1
   14214:	sub	r3, r3, #1
   14218:	sub	r3, r3, r2
   1421c:	add	r6, r3, r6
   14220:	lsrs	r6, r6, r1
   14224:	bne	14268 <__assert_fail@plt+0x3278>
   14228:	cmp	r9, #7
   1422c:	beq	14154 <__assert_fail@plt+0x3164>
   14230:	ldr	r6, [r4, #24]
   14234:	mov	r8, r9
   14238:	add	r9, r8, #1
   1423c:	and	r3, r8, #1
   14240:	asr	r2, r9, #1
   14244:	rsb	r2, r2, #3
   14248:	cmp	r8, #1
   1424c:	lsl	r3, r3, r2
   14250:	bhi	14204 <__assert_fail@plt+0x3214>
   14254:	mvn	r3, r3
   14258:	and	r3, r3, #7
   1425c:	add	r6, r3, r6
   14260:	mov	r1, #3
   14264:	b	14220 <__assert_fail@plt+0x3230>
   14268:	add	r2, sp, #6
   1426c:	mov	r3, #0
   14270:	mov	r1, #7
   14274:	strh	r1, [sp, #12]
   14278:	strh	r6, [r2, #2]!
   1427c:	lsrs	r6, r6, #16
   14280:	add	r3, r3, #1
   14284:	bne	14278 <__assert_fail@plt+0x3288>
   14288:	add	r2, sp, #8
   1428c:	mov	r1, #1
   14290:	str	fp, [sp]
   14294:	add	r0, sp, #12
   14298:	bl	11b28 <__assert_fail@plt+0xb38>
   1429c:	mov	r1, r0
   142a0:	add	r0, sp, #12
   142a4:	bl	1382c <__assert_fail@plt+0x283c>
   142a8:	mov	r2, #1
   142ac:	mov	r1, r0
   142b0:	add	r0, sp, #12
   142b4:	bl	119f4 <__assert_fail@plt+0xa04>
   142b8:	mvn	r2, r8
   142bc:	asr	r1, r8, #1
   142c0:	rsb	r1, r1, #3
   142c4:	and	r2, r2, #1
   142c8:	cmp	r8, #2
   142cc:	lsl	r2, r2, r1
   142d0:	ldr	r1, [r4, #28]
   142d4:	mov	r3, r0
   142d8:	add	r0, r4, #38	; 0x26
   142dc:	bls	14318 <__assert_fail@plt+0x3328>
   142e0:	rsb	ip, r9, #9
   142e4:	and	r2, r2, #7
   142e8:	asr	ip, ip, #1
   142ec:	lsl	lr, r7, ip
   142f0:	sub	lr, lr, #1
   142f4:	sub	r2, lr, r2
   142f8:	add	r2, r2, r1
   142fc:	lsr	r2, r2, ip
   14300:	mov	r1, sl
   14304:	str	r2, [sp]
   14308:	add	r2, sp, #12
   1430c:	bl	125d8 <__assert_fail@plt+0x15e8>
   14310:	mov	sl, r0
   14314:	b	14228 <__assert_fail@plt+0x3238>
   14318:	mvn	r2, r2
   1431c:	and	r2, r2, #7
   14320:	add	r2, r2, r1
   14324:	mov	ip, #3
   14328:	b	142fc <__assert_fail@plt+0x330c>
   1432c:	ldr	r2, [pc, #520]	; 1453c <__assert_fail@plt+0x354c>
   14330:	mov	r1, #4
   14334:	mov	r0, r4
   14338:	bl	11ca8 <__assert_fail@plt+0xcb8>
   1433c:	b	13b5c <__assert_fail@plt+0x2b6c>
   14340:	ldr	r9, [r7]
   14344:	cmp	r9, #0
   14348:	beq	14394 <__assert_fail@plt+0x33a4>
   1434c:	mov	r3, #0
   14350:	str	r3, [r9, #8]
   14354:	mov	r7, r9
   14358:	str	r9, [r2, #12]
   1435c:	mov	r0, #1
   14360:	b	13f3c <__assert_fail@plt+0x2f4c>
   14364:	ldr	r1, [pc, #392]	; 144f4 <__assert_fail@plt+0x3504>
   14368:	ldr	r2, [pc, #464]	; 14540 <__assert_fail@plt+0x3550>
   1436c:	add	r0, r4, #4
   14370:	bl	12be8 <__assert_fail@plt+0x1bf8>
   14374:	ldr	r1, [r4, #492]	; 0x1ec
   14378:	b	14048 <__assert_fail@plt+0x3058>
   1437c:	mov	r1, r9
   14380:	mov	r0, r4
   14384:	bl	13438 <__assert_fail@plt+0x2448>
   14388:	cmp	r0, #0
   1438c:	bne	13bf4 <__assert_fail@plt+0x2c04>
   14390:	b	13b5c <__assert_fail@plt+0x2b6c>
   14394:	lsl	r6, r3, #1
   14398:	cmp	r3, r6
   1439c:	movcs	r6, r3
   143a0:	add	r0, r6, #3
   143a4:	lsl	r0, r0, #2
   143a8:	bl	10e4c <malloc@plt>
   143ac:	mov	r1, #76	; 0x4c
   143b0:	mov	r9, r0
   143b4:	bl	11bcc <__assert_fail@plt+0xbdc>
   143b8:	cmp	r9, #0
   143bc:	beq	143d8 <__assert_fail@plt+0x33e8>
   143c0:	str	sl, [r9]
   143c4:	str	r6, [r9, #4]
   143c8:	ldr	r2, [r4, #496]	; 0x1f0
   143cc:	ldr	r1, [r4, #492]	; 0x1ec
   143d0:	str	r9, [r7]
   143d4:	b	1434c <__assert_fail@plt+0x335c>
   143d8:	mov	r0, r4
   143dc:	ldr	r2, [pc, #352]	; 14544 <__assert_fail@plt+0x3554>
   143e0:	mov	r1, #5
   143e4:	bl	12240 <__assert_fail@plt+0x1250>
   143e8:	bl	10e10 <__stack_chk_fail@plt>
   143ec:	ldr	r3, [pc, #340]	; 14548 <__assert_fail@plt+0x3558>
   143f0:	ldr	r2, [pc, #340]	; 1454c <__assert_fail@plt+0x355c>
   143f4:	ldr	r1, [pc, #292]	; 14520 <__assert_fail@plt+0x3530>
   143f8:	ldr	r0, [pc, #336]	; 14550 <__assert_fail@plt+0x3560>
   143fc:	bl	10ff0 <__assert_fail@plt>
   14400:	mov	r0, r4
   14404:	ldr	r2, [pc, #328]	; 14554 <__assert_fail@plt+0x3564>
   14408:	mov	r1, #5
   1440c:	bl	12240 <__assert_fail@plt+0x1250>
   14410:	ldr	r3, [pc, #320]	; 14558 <__assert_fail@plt+0x3568>
   14414:	ldr	r2, [pc, #320]	; 1455c <__assert_fail@plt+0x356c>
   14418:	ldr	r1, [pc, #256]	; 14520 <__assert_fail@plt+0x3530>
   1441c:	ldr	r0, [pc, #300]	; 14550 <__assert_fail@plt+0x3560>
   14420:	bl	10ff0 <__assert_fail@plt>
   14424:	ldr	r3, [pc, #308]	; 14560 <__assert_fail@plt+0x3570>
   14428:	ldr	r2, [pc, #308]	; 14564 <__assert_fail@plt+0x3574>
   1442c:	ldr	r1, [pc, #236]	; 14520 <__assert_fail@plt+0x3530>
   14430:	ldr	r0, [pc, #304]	; 14568 <__assert_fail@plt+0x3578>
   14434:	bl	10ff0 <__assert_fail@plt>
   14438:	mov	r0, r4
   1443c:	ldr	r1, [pc, #296]	; 1456c <__assert_fail@plt+0x357c>
   14440:	bl	12398 <__assert_fail@plt+0x13a8>
   14444:	mov	r0, r4
   14448:	ldr	r1, [pc, #288]	; 14570 <__assert_fail@plt+0x3580>
   1444c:	bl	12398 <__assert_fail@plt+0x13a8>
   14450:	mov	r0, r4
   14454:	ldr	r1, [pc, #280]	; 14574 <__assert_fail@plt+0x3584>
   14458:	bl	12398 <__assert_fail@plt+0x13a8>
   1445c:	mov	r0, r4
   14460:	ldr	r1, [pc, #272]	; 14578 <__assert_fail@plt+0x3588>
   14464:	bl	12398 <__assert_fail@plt+0x13a8>
   14468:	mov	r0, r4
   1446c:	ldr	r2, [pc, #264]	; 1457c <__assert_fail@plt+0x358c>
   14470:	mov	r1, #3
   14474:	bl	12240 <__assert_fail@plt+0x1250>
   14478:	mov	r0, r4
   1447c:	ldr	r1, [pc, #252]	; 14580 <__assert_fail@plt+0x3590>
   14480:	bl	12398 <__assert_fail@plt+0x13a8>
   14484:	mov	r0, r4
   14488:	ldr	r1, [pc, #244]	; 14584 <__assert_fail@plt+0x3594>
   1448c:	bl	12398 <__assert_fail@plt+0x13a8>
   14490:	mov	r0, r4
   14494:	ldr	r2, [pc, #236]	; 14588 <__assert_fail@plt+0x3598>
   14498:	mov	r1, #2
   1449c:	bl	12240 <__assert_fail@plt+0x1250>
   144a0:	mov	r0, r4
   144a4:	ldr	r1, [pc, #224]	; 1458c <__assert_fail@plt+0x359c>
   144a8:	bl	12398 <__assert_fail@plt+0x13a8>
   144ac:	ldr	r3, [pc, #100]	; 14518 <__assert_fail@plt+0x3528>
   144b0:	ldr	r2, [pc, #216]	; 14590 <__assert_fail@plt+0x35a0>
   144b4:	ldr	r1, [pc, #100]	; 14520 <__assert_fail@plt+0x3530>
   144b8:	ldr	r0, [pc, #212]	; 14594 <__assert_fail@plt+0x35a4>
   144bc:	bl	10ff0 <__assert_fail@plt>
   144c0:	ldr	r3, [pc, #80]	; 14518 <__assert_fail@plt+0x3528>
   144c4:	ldr	r2, [pc, #204]	; 14598 <__assert_fail@plt+0x35a8>
   144c8:	ldr	r1, [pc, #80]	; 14520 <__assert_fail@plt+0x3530>
   144cc:	ldr	r0, [pc, #200]	; 1459c <__assert_fail@plt+0x35ac>
   144d0:	bl	10ff0 <__assert_fail@plt>
   144d4:	andeq	r8, r2, r0, lsl #28
   144d8:	andeq	r9, r2, r0, lsl r0
   144dc:	andeq	r5, r1, ip, lsr #29
   144e0:			; <UNDEFINED> instruction: 0x00015eb0
   144e4:	svcvs	0x00464673
   144e8:	cmpvc	r2, #17301504	; 0x1080000
   144ec:	strbvc	r4, [r9], #-3397	; 0xfffff2bb
   144f0:	ldrbvc	r4, [r2], #-3667	; 0xfffff1ad
   144f4:	stmdbmi	r4, {r2, r4, r6, r8, lr}^
   144f8:	stmdbvs	r3, {r4, r6, r8, r9, lr}^
   144fc:	ldmdbvs	r4, {r2, r4, r5, r6, fp, ip, lr}^
   14500:	movtvc	r4, #12620	; 0x314c
   14504:	ldrbvs	r4, [r2], -r3, ror #2
   14508:	stmdavs	r9, {r2, r4, r6, r8, r9, ip, lr}^
   1450c:	bvc	152a6e4 <stdout@@GLIBC_2.4+0x15016d0>
   14510:	andeq	r5, r1, r8, ror #29
   14514:	andeq	r5, r1, r4, asr #29
   14518:	andeq	r5, r1, r0, ror #18
   1451c:	andeq	r0, r0, pc, ror #22
   14520:	andeq	r5, r1, r4, ror fp
   14524:	andeq	r6, r1, r0, asr #1
   14528:	andeq	r6, r1, ip
   1452c:	andeq	r5, r1, r0, ror r9
   14530:	strdeq	r0, [r0], -sl
   14534:			; <UNDEFINED> instruction: 0x00015fb4
   14538:	andeq	r5, r1, r0, asr #30
   1453c:	andeq	r6, r1, r8, lsl r0
   14540:	andeq	r6, r1, r8, rrx
   14544:	andeq	r6, r1, r8, asr r0
   14548:	andeq	r5, r1, r0, lsl #19
   1454c:	andeq	r0, r0, r8, lsl #13
   14550:	andeq	r5, r1, r8, ror #31
   14554:	andeq	r5, r1, ip, asr #29
   14558:	muleq	r1, r4, r9
   1455c:	andeq	r0, r0, r5, lsr #13
   14560:	andeq	r5, r1, r4, lsr #19
   14564:	andeq	r0, r0, r6, lsl #15
   14568:	andeq	r6, r1, ip, lsr #32
   1456c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14570:	andeq	r5, r1, ip, lsr #30
   14574:	andeq	r5, r1, ip, asr pc
   14578:	andeq	r5, r1, r0, asr pc
   1457c:	andeq	r6, r1, r4, lsr #1
   14580:	andeq	r5, r1, r8, lsl #31
   14584:	andeq	r5, r1, ip, ror #30
   14588:	andeq	r6, r1, r0, lsl #1
   1458c:	andeq	r5, r1, r0, lsr #30
   14590:	andeq	r0, r0, r8, lsr #22
   14594:	strdeq	r5, [r1], -ip
   14598:	andeq	r0, r0, r7, lsr #22
   1459c:			; <UNDEFINED> instruction: 0x00015bb4
   145a0:	ldr	r3, [pc, #1004]	; 14994 <__assert_fail@plt+0x39a4>
   145a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a8:	sub	sp, sp, #20
   145ac:	ldr	r6, [r0, #472]	; 0x1d8
   145b0:	ldr	r3, [r3]
   145b4:	cmp	r6, #0
   145b8:	ldr	r4, [r0, #468]	; 0x1d4
   145bc:	str	r3, [sp, #12]
   145c0:	beq	14984 <__assert_fail@plt+0x3994>
   145c4:	ldr	r3, [r0]
   145c8:	mov	r5, r0
   145cc:	ldrb	r3, [r3]
   145d0:	cmp	r3, #95	; 0x5f
   145d4:	bhi	148fc <__assert_fail@plt+0x390c>
   145d8:	mov	r0, r6
   145dc:	bl	11c18 <__assert_fail@plt+0xc28>
   145e0:	cmp	r4, #0
   145e4:	mov	r8, r0
   145e8:	str	r0, [r5, #476]	; 0x1dc
   145ec:	beq	146fc <__assert_fail@plt+0x370c>
   145f0:	ldr	r7, [pc, #928]	; 14998 <__assert_fail@plt+0x39a8>
   145f4:	b	14610 <__assert_fail@plt+0x3620>
   145f8:	eor	r0, r0, r8
   145fc:	subs	r4, r4, #1
   14600:	uxtb	r0, r0
   14604:	ldr	r3, [r7, r0, lsl #2]
   14608:	eor	r8, r3, r8, lsr #8
   1460c:	beq	146f8 <__assert_fail@plt+0x3708>
   14610:	mov	r0, r5
   14614:	bl	11dc4 <__assert_fail@plt+0xdd4>
   14618:	cmn	r0, #1
   1461c:	bne	145f8 <__assert_fail@plt+0x3608>
   14620:	ldr	r2, [r5]
   14624:	ldr	r3, [r5, #12]
   14628:	ldrb	r2, [r2]
   1462c:	orr	r3, r3, #4
   14630:	str	r3, [r5, #12]
   14634:	tst	r2, #224	; 0xe0
   14638:	bne	14938 <__assert_fail@plt+0x3948>
   1463c:	add	r1, r5, #456	; 0x1c8
   14640:	mov	r0, r5
   14644:	mov	r4, #4
   14648:	mov	r6, #0
   1464c:	bl	13404 <__assert_fail@plt+0x2414>
   14650:	mov	r3, #8
   14654:	str	r3, [r5, #480]	; 0x1e0
   14658:	mov	r0, r5
   1465c:	bl	11dc4 <__assert_fail@plt+0xdd4>
   14660:	cmn	r0, #1
   14664:	beq	146e8 <__assert_fail@plt+0x36f8>
   14668:	subs	r4, r4, #1
   1466c:	add	r6, r0, r6, lsl #8
   14670:	bne	14658 <__assert_fail@plt+0x3668>
   14674:	ldr	r9, [r5, #472]	; 0x1d8
   14678:	mov	r8, r4
   1467c:	mov	r0, r9
   14680:	bl	11c18 <__assert_fail@plt+0xc28>
   14684:	mov	sl, r4
   14688:	mov	r7, r0
   1468c:	b	146c4 <__assert_fail@plt+0x36d4>
   14690:	add	sl, sl, #1
   14694:	and	r3, sl, #7
   14698:	add	r2, sp, #16
   1469c:	add	r3, r2, r3
   146a0:	ldrb	r0, [r3, #-12]
   146a4:	eor	r3, r7, r6, lsr #24
   146a8:	ldr	r2, [pc, #744]	; 14998 <__assert_fail@plt+0x39a8>
   146ac:	uxtb	r3, r3
   146b0:	adds	r8, r8, #1
   146b4:	ldr	r3, [r2, r3, lsl #2]
   146b8:	add	r6, r0, r6, lsl #8
   146bc:	eor	r7, r3, r7, lsr #8
   146c0:	bmi	146e8 <__assert_fail@plt+0x36f8>
   146c4:	mvn	r3, r7
   146c8:	cmp	r3, r6
   146cc:	beq	147dc <__assert_fail@plt+0x37ec>
   146d0:	cmp	r4, sl
   146d4:	bhi	14690 <__assert_fail@plt+0x36a0>
   146d8:	mov	r0, r5
   146dc:	bl	11dc4 <__assert_fail@plt+0xdd4>
   146e0:	cmn	r0, #1
   146e4:	bne	146a4 <__assert_fail@plt+0x36b4>
   146e8:	mov	r0, r5
   146ec:	ldr	r2, [pc, #680]	; 1499c <__assert_fail@plt+0x39ac>
   146f0:	mov	r1, #5
   146f4:	bl	12240 <__assert_fail@plt+0x1250>
   146f8:	str	r8, [r5, #476]	; 0x1dc
   146fc:	mov	r4, #4
   14700:	mov	r7, #0
   14704:	mov	r0, r5
   14708:	bl	11dc4 <__assert_fail@plt+0xdd4>
   1470c:	cmn	r0, #1
   14710:	beq	14620 <__assert_fail@plt+0x3630>
   14714:	subs	r4, r4, #1
   14718:	add	r7, r0, r7, lsl #8
   1471c:	bne	14704 <__assert_fail@plt+0x3714>
   14720:	ldr	r3, [pc, #632]	; 149a0 <__assert_fail@plt+0x39b0>
   14724:	cmp	r6, r3
   14728:	movne	r6, #4
   1472c:	beq	1496c <__assert_fail@plt+0x397c>
   14730:	mov	r0, r5
   14734:	bl	11dc4 <__assert_fail@plt+0xdd4>
   14738:	cmn	r0, #1
   1473c:	beq	14620 <__assert_fail@plt+0x3630>
   14740:	subs	r6, r6, #1
   14744:	add	r4, r0, r4, lsl #8
   14748:	bne	14730 <__assert_fail@plt+0x3740>
   1474c:	cmp	r4, #0
   14750:	movge	r8, #4
   14754:	blt	14620 <__assert_fail@plt+0x3630>
   14758:	mov	r0, r5
   1475c:	bl	11dc4 <__assert_fail@plt+0xdd4>
   14760:	cmn	r0, #1
   14764:	beq	14620 <__assert_fail@plt+0x3630>
   14768:	subs	r8, r8, #1
   1476c:	add	r6, r0, r6, lsl #8
   14770:	bne	14758 <__assert_fail@plt+0x3768>
   14774:	ldr	r1, [pc, #552]	; 149a4 <__assert_fail@plt+0x39b4>
   14778:	ldr	ip, [pc, #552]	; 149a8 <__assert_fail@plt+0x39b8>
   1477c:	ldr	r2, [pc, #552]	; 149ac <__assert_fail@plt+0x39bc>
   14780:	ldr	r0, [pc, #552]	; 149b0 <__assert_fail@plt+0x39c0>
   14784:	ldr	r3, [pc, #552]	; 149b4 <__assert_fail@plt+0x39c4>
   14788:	and	r1, r1, r6
   1478c:	and	ip, ip, r6
   14790:	add	r2, r1, r2
   14794:	add	r3, r1, r3
   14798:	eor	r0, r0, ip
   1479c:	orr	r2, r2, r0
   147a0:	mvn	r3, r3
   147a4:	ldr	r1, [pc, #524]	; 149b8 <__assert_fail@plt+0x39c8>
   147a8:	orr	r3, r3, r2
   147ac:	and	r1, r1, r3
   147b0:	cmp	r1, #0
   147b4:	bne	14620 <__assert_fail@plt+0x3630>
   147b8:	ldr	r0, [r5, #480]	; 0x1e0
   147bc:	mov	r3, r6
   147c0:	sub	r0, r0, #8
   147c4:	str	r0, [r5, #480]	; 0x1e0
   147c8:	mov	r2, r4
   147cc:	mov	r1, r7
   147d0:	mov	r0, r5
   147d4:	bl	138a4 <__assert_fail@plt+0x28b4>
   147d8:	b	148e0 <__assert_fail@plt+0x38f0>
   147dc:	ldr	r3, [pc, #444]	; 149a0 <__assert_fail@plt+0x39b0>
   147e0:	cmp	r9, r3
   147e4:	beq	148c8 <__assert_fail@plt+0x38d8>
   147e8:	add	fp, sl, #8
   147ec:	cmp	r4, fp
   147f0:	bcs	14820 <__assert_fail@plt+0x3830>
   147f4:	mov	r0, r5
   147f8:	bl	11dc4 <__assert_fail@plt+0xdd4>
   147fc:	cmn	r0, #1
   14800:	beq	146e8 <__assert_fail@plt+0x36f8>
   14804:	and	r3, r4, #7
   14808:	add	r2, sp, #16
   1480c:	add	r3, r2, r3
   14810:	add	r4, r4, #1
   14814:	cmp	r4, fp
   14818:	strb	r0, [r3, #-12]
   1481c:	bcc	147f4 <__assert_fail@plt+0x3804>
   14820:	bic	r3, sl, #7
   14824:	and	sl, sl, #7
   14828:	mov	r1, sl
   1482c:	add	r0, sp, #4
   14830:	sub	r4, r4, r3
   14834:	bl	11c68 <__assert_fail@plt+0xc78>
   14838:	cmn	r0, #-2147483646	; 0x80000002
   1483c:	mov	fp, r0
   14840:	bhi	146d0 <__assert_fail@plt+0x36e0>
   14844:	add	r1, sl, #4
   14848:	add	r0, sp, #4
   1484c:	bl	11c68 <__assert_fail@plt+0xc78>
   14850:	ldr	r3, [pc, #332]	; 149a4 <__assert_fail@plt+0x39b4>
   14854:	ldr	r2, [pc, #332]	; 149a8 <__assert_fail@plt+0x39b8>
   14858:	ldr	r1, [pc, #332]	; 149ac <__assert_fail@plt+0x39bc>
   1485c:	and	r3, r0, r3
   14860:	and	r2, r0, r2
   14864:	add	r1, r3, r1
   14868:	eor	r2, r2, #1073741824	; 0x40000000
   1486c:	add	r3, r3, #-1526726656	; 0xa5000000
   14870:	add	r3, r3, #10813440	; 0xa50000
   14874:	eor	r2, r2, #4194304	; 0x400000
   14878:	add	r3, r3, #42240	; 0xa500
   1487c:	eor	r2, r2, #16384	; 0x4000
   14880:	eor	r2, r2, #64	; 0x40
   14884:	add	r3, r3, #165	; 0xa5
   14888:	orr	r1, r1, r2
   1488c:	mvn	r3, r3
   14890:	ldr	r2, [pc, #288]	; 149b8 <__assert_fail@plt+0x39c8>
   14894:	orr	r3, r3, r1
   14898:	and	r2, r2, r3
   1489c:	cmp	r2, #0
   148a0:	bne	146d0 <__assert_fail@plt+0x36e0>
   148a4:	ldr	r1, [r5, #480]	; 0x1e0
   148a8:	mov	r3, r0
   148ac:	sub	r0, r1, #8
   148b0:	str	r0, [r5, #480]	; 0x1e0
   148b4:	mov	r2, fp
   148b8:	mov	r1, r6
   148bc:	mov	r0, r5
   148c0:	bl	138a4 <__assert_fail@plt+0x28b4>
   148c4:	b	148e0 <__assert_fail@plt+0x38f0>
   148c8:	mov	r3, #0
   148cc:	str	r8, [r5, #468]	; 0x1d4
   148d0:	mov	r1, r6
   148d4:	mov	r0, r5
   148d8:	mov	r2, r3
   148dc:	bl	138a4 <__assert_fail@plt+0x28b4>
   148e0:	ldr	r3, [pc, #172]	; 14994 <__assert_fail@plt+0x39a4>
   148e4:	ldr	r2, [sp, #12]
   148e8:	ldr	r3, [r3]
   148ec:	cmp	r2, r3
   148f0:	bne	14990 <__assert_fail@plt+0x39a0>
   148f4:	add	sp, sp, #20
   148f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148fc:	ldr	r7, [pc, #184]	; 149bc <__assert_fail@plt+0x39cc>
   14900:	mov	r2, #3
   14904:	mov	r1, #1
   14908:	ldr	r3, [r7]
   1490c:	ldr	r0, [pc, #172]	; 149c0 <__assert_fail@plt+0x39d0>
   14910:	bl	10e34 <fwrite@plt>
   14914:	ldr	r1, [r7]
   14918:	mov	r0, r6
   1491c:	bl	12110 <__assert_fail@plt+0x1120>
   14920:	mov	r3, r4
   14924:	ldr	r0, [r7]
   14928:	ldr	r2, [pc, #148]	; 149c4 <__assert_fail@plt+0x39d4>
   1492c:	mov	r1, #1
   14930:	bl	10f18 <__fprintf_chk@plt>
   14934:	b	145d8 <__assert_fail@plt+0x35e8>
   14938:	ldr	r4, [pc, #124]	; 149bc <__assert_fail@plt+0x39cc>
   1493c:	mov	r2, #6
   14940:	mov	r1, #1
   14944:	ldr	r3, [r4]
   14948:	ldr	r0, [pc, #120]	; 149c8 <__assert_fail@plt+0x39d8>
   1494c:	bl	10e34 <fwrite@plt>
   14950:	ldr	r1, [r4]
   14954:	ldr	r0, [r5, #472]	; 0x1d8
   14958:	bl	12110 <__assert_fail@plt+0x1120>
   1495c:	ldr	r1, [r4]
   14960:	mov	r0, #10
   14964:	bl	10f78 <putc@plt>
   14968:	b	1463c <__assert_fail@plt+0x364c>
   1496c:	mov	r1, r7
   14970:	mov	r0, r5
   14974:	mov	r3, r4
   14978:	mov	r2, r4
   1497c:	bl	138a4 <__assert_fail@plt+0x28b4>
   14980:	b	148e0 <__assert_fail@plt+0x38f0>
   14984:	ldr	r2, [pc, #64]	; 149cc <__assert_fail@plt+0x39dc>
   14988:	mov	r1, #7
   1498c:	bl	12240 <__assert_fail@plt+0x1250>
   14990:	bl	10e10 <__stack_chk_fail@plt>
   14994:	andeq	r8, r2, r0, lsl #28
   14998:	andeq	r5, r1, r4, lsr r2
   1499c:	andeq	r6, r1, r0, lsl #2
   149a0:	stmdbmi	r5, {r2, r6, r9, sl, fp, lr}^
   149a4:	svcle	0x00dfffdf
   149a8:	sbcgt	lr, r0, r0, asr #1
   149ac:	mrclt	14, 5, fp, cr14, cr15, {5}
   149b0:	submi	r4, r0, r0, asr #32
   149b4:	strge	sl, [r5, #1445]!	; 0x5a5
   149b8:	rsc	lr, r0, r0, ror #1
   149bc:	andeq	r9, r2, r0, lsl r0
   149c0:	andeq	r6, r1, ip, ror #1
   149c4:	strdeq	r6, [r1], -r0
   149c8:	strdeq	r6, [r1], -r8
   149cc:	ldrdeq	r6, [r1], -r8
   149d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d4:	mov	sl, r1
   149d8:	sub	sp, sp, #20
   149dc:	mov	r9, r2
   149e0:	str	r0, [sp, #12]
   149e4:	ldr	r0, [sp, #12]
   149e8:	bl	10f54 <png_get_error_ptr@plt>
   149ec:	cmp	r9, #0
   149f0:	mov	fp, r0
   149f4:	beq	14ed8 <__assert_fail@plt+0x3ee8>
   149f8:	ldr	r3, [r0, #480]	; 0x1e0
   149fc:	cmp	r3, #7
   14a00:	bhi	14a70 <__assert_fail@plt+0x3a80>
   14a04:	cmp	r3, #0
   14a08:	bne	14ea0 <__assert_fail@plt+0x3eb0>
   14a0c:	ldr	r3, [r0, #12]
   14a10:	tst	r3, #8
   14a14:	bne	14e8c <__assert_fail@plt+0x3e9c>
   14a18:	add	r1, r0, #468	; 0x1d4
   14a1c:	bl	11e84 <__assert_fail@plt+0xe94>
   14a20:	ldr	r3, [fp, #480]	; 0x1e0
   14a24:	cmp	r3, #4
   14a28:	beq	14de4 <__assert_fail@plt+0x3df4>
   14a2c:	cmp	r3, #7
   14a30:	bls	14e20 <__assert_fail@plt+0x3e30>
   14a34:	ldr	r4, [fp, #488]	; 0x1e8
   14a38:	cmp	r4, #0
   14a3c:	beq	14da8 <__assert_fail@plt+0x3db8>
   14a40:	cmp	r4, #1
   14a44:	bne	14f1c <__assert_fail@plt+0x3f2c>
   14a48:	ldr	r3, [fp, #468]	; 0x1d4
   14a4c:	cmp	r3, #13
   14a50:	bne	14f30 <__assert_fail@plt+0x3f40>
   14a54:	ldr	r3, [fp, #472]	; 0x1d8
   14a58:	ldr	r2, [pc, #1716]	; 15114 <__assert_fail@plt+0x4124>
   14a5c:	cmp	r3, r2
   14a60:	bne	14f30 <__assert_fail@plt+0x3f40>
   14a64:	add	r1, fp, #456	; 0x1c8
   14a68:	mov	r0, fp
   14a6c:	bl	12c68 <__assert_fail@plt+0x1c78>
   14a70:	ldr	r4, [fp, #488]	; 0x1e8
   14a74:	ldr	r5, [fp, #492]	; 0x1ec
   14a78:	cmp	r5, #0
   14a7c:	ldrdne	r6, [r5, #52]	; 0x34
   14a80:	ldreq	r6, [fp, #468]	; 0x1d4
   14a84:	ldreq	r7, [fp, #472]	; 0x1d8
   14a88:	cmp	r4, #0
   14a8c:	beq	14b1c <__assert_fail@plt+0x3b2c>
   14a90:	cmp	r5, #0
   14a94:	beq	14c80 <__assert_fail@plt+0x3c90>
   14a98:	ldr	r8, [fp, #484]	; 0x1e4
   14a9c:	mov	r3, r8
   14aa0:	cmp	r8, #8
   14aa4:	ldrls	pc, [pc, r8, lsl #2]
   14aa8:	b	14bcc <__assert_fail@plt+0x3bdc>
   14aac:			; <UNDEFINED> instruction: 0x00014cb4
   14ab0:	muleq	r1, r8, fp
   14ab4:	andeq	r4, r1, r8, lsl #23
   14ab8:	andeq	r4, r1, ip, ror fp
   14abc:	andeq	r4, r1, r0, ror fp
   14ac0:	andeq	r4, r1, r0, ror #22
   14ac4:	andeq	r4, r1, r0, asr fp
   14ac8:	ldrdeq	r4, [r1], -r0
   14acc:	andeq	r4, r1, r8, lsr #23
   14ad0:	uxtb	r4, r7
   14ad4:	mov	r0, r4
   14ad8:	strb	r0, [sl], #1
   14adc:	ldr	r1, [fp, #56]	; 0x38
   14ae0:	sub	r9, r9, #1
   14ae4:	cmp	r1, #0
   14ae8:	beq	14afc <__assert_fail@plt+0x3b0c>
   14aec:	mov	r0, r4
   14af0:	bl	10f78 <putc@plt>
   14af4:	cmp	r4, r0
   14af8:	bne	14df8 <__assert_fail@plt+0x3e08>
   14afc:	ldr	r3, [fp, #484]	; 0x1e4
   14b00:	cmp	r9, #0
   14b04:	add	r3, r3, #1
   14b08:	str	r3, [fp, #484]	; 0x1e4
   14b0c:	beq	14d00 <__assert_fail@plt+0x3d10>
   14b10:	ldr	r4, [fp, #488]	; 0x1e8
   14b14:	cmp	r4, #0
   14b18:	bne	14a90 <__assert_fail@plt+0x3aa0>
   14b1c:	ldr	r3, [fp, #484]	; 0x1e4
   14b20:	cmp	r3, #8
   14b24:	ldrls	pc, [pc, r3, lsl #2]
   14b28:	b	14f40 <__assert_fail@plt+0x3f50>
   14b2c:			; <UNDEFINED> instruction: 0x00014cb4
   14b30:	muleq	r1, r8, fp
   14b34:	andeq	r4, r1, r8, lsl #23
   14b38:	andeq	r4, r1, ip, ror fp
   14b3c:	andeq	r4, r1, r0, ror fp
   14b40:	andeq	r4, r1, r0, ror #22
   14b44:	andeq	r4, r1, r0, asr fp
   14b48:	ldrdeq	r4, [r1], -r0
   14b4c:	andeq	r4, r1, r0, asr #25
   14b50:	lsr	r4, r7, #8
   14b54:	uxtb	r4, r4
   14b58:	mov	r0, r4
   14b5c:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14b60:	lsr	r4, r7, #16
   14b64:	uxtb	r4, r4
   14b68:	mov	r0, r4
   14b6c:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14b70:	lsr	r4, r7, #24
   14b74:	uxtb	r0, r4
   14b78:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14b7c:	uxtb	r4, r6
   14b80:	mov	r0, r4
   14b84:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14b88:	lsr	r4, r6, #8
   14b8c:	uxtb	r4, r4
   14b90:	mov	r0, r4
   14b94:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14b98:	lsr	r4, r6, #16
   14b9c:	uxtb	r4, r4
   14ba0:	mov	r0, r4
   14ba4:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14ba8:	cmp	r5, #0
   14bac:	beq	14ef8 <__assert_fail@plt+0x3f08>
   14bb0:	mov	r0, r7
   14bb4:	bl	11c18 <__assert_fail@plt+0xc28>
   14bb8:	cmp	r4, #2
   14bbc:	cmpne	r6, #0
   14bc0:	moveq	r3, r8
   14bc4:	str	r0, [r5, #60]	; 0x3c
   14bc8:	bne	14ce4 <__assert_fail@plt+0x3cf4>
   14bcc:	sub	r3, r3, r6
   14bd0:	sub	r3, r3, #8
   14bd4:	cmp	r3, #3
   14bd8:	ldrls	pc, [pc, r3, lsl #2]
   14bdc:	b	14f6c <__assert_fail@plt+0x3f7c>
   14be0:	andeq	r4, r1, r8, ror ip
   14be4:	andeq	r4, r1, r0, ror ip
   14be8:	andeq	r4, r1, r4, ror #24
   14bec:	strdeq	r4, [r1], -r0
   14bf0:	ldr	r3, [fp]
   14bf4:	ldr	r8, [r5, #60]	; 0x3c
   14bf8:	ldrb	r3, [r3]
   14bfc:	cmp	r3, #95	; 0x5f
   14c00:	bhi	14d60 <__assert_fail@plt+0x3d70>
   14c04:	ldr	r3, [fp, #488]	; 0x1e8
   14c08:	cmp	r3, #2
   14c0c:	beq	14d08 <__assert_fail@plt+0x3d18>
   14c10:	ldr	r3, [r5, #68]	; 0x44
   14c14:	cmp	r3, #0
   14c18:	bgt	14f0c <__assert_fail@plt+0x3f1c>
   14c1c:	ldr	r3, [r5, #64]	; 0x40
   14c20:	cmp	r3, #0
   14c24:	bne	14f0c <__assert_fail@plt+0x3f1c>
   14c28:	mov	r3, #8
   14c2c:	str	r3, [fp, #480]	; 0x1e0
   14c30:	add	r1, fp, #456	; 0x1c8
   14c34:	mov	r0, fp
   14c38:	bl	13404 <__assert_fail@plt+0x2414>
   14c3c:	ldr	r3, [fp, #496]	; 0x1f0
   14c40:	cmp	r3, #0
   14c44:	beq	14dd0 <__assert_fail@plt+0x3de0>
   14c48:	add	r0, fp, #496	; 0x1f0
   14c4c:	bl	127e0 <__assert_fail@plt+0x17f0>
   14c50:	mvn	r4, r8
   14c54:	eor	r0, r8, #255	; 0xff
   14c58:	uxtb	r4, r4
   14c5c:	uxtb	r0, r0
   14c60:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14c64:	ldr	r0, [r5, #60]	; 0x3c
   14c68:	lsr	r8, r0, #8
   14c6c:	b	14c50 <__assert_fail@plt+0x3c60>
   14c70:	ldrh	r8, [r5, #62]	; 0x3e
   14c74:	b	14c50 <__assert_fail@plt+0x3c60>
   14c78:	ldrb	r8, [r5, #63]	; 0x3f
   14c7c:	b	14c50 <__assert_fail@plt+0x3c60>
   14c80:	ldr	r3, [fp, #480]	; 0x1e0
   14c84:	cmp	r3, #8
   14c88:	bne	14e64 <__assert_fail@plt+0x3e74>
   14c8c:	ldr	r4, [fp, #496]	; 0x1f0
   14c90:	cmp	r4, #0
   14c94:	bne	14e40 <__assert_fail@plt+0x3e50>
   14c98:	mov	r0, fp
   14c9c:	bl	145a0 <__assert_fail@plt+0x35b0>
   14ca0:	ldr	r5, [fp, #492]	; 0x1ec
   14ca4:	cmp	r5, #0
   14ca8:	beq	14e78 <__assert_fail@plt+0x3e88>
   14cac:	ldrd	r6, [r5, #52]	; 0x34
   14cb0:	str	r4, [fp, #484]	; 0x1e4
   14cb4:	lsr	r4, r6, #24
   14cb8:	uxtb	r0, r4
   14cbc:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14cc0:	ldr	r3, [pc, #1104]	; 15118 <__assert_fail@plt+0x4128>
   14cc4:	ldr	r2, [pc, #1104]	; 1511c <__assert_fail@plt+0x412c>
   14cc8:	cmp	r6, r3
   14ccc:	cmpeq	r7, r2
   14cd0:	bne	14eb4 <__assert_fail@plt+0x3ec4>
   14cd4:	mov	r3, #1
   14cd8:	str	r4, [fp, #480]	; 0x1e0
   14cdc:	str	r3, [fp, #488]	; 0x1e8
   14ce0:	b	149e4 <__assert_fail@plt+0x39f4>
   14ce4:	mov	r1, r5
   14ce8:	mov	r3, #8
   14cec:	ldr	r0, [r1], #40	; 0x28
   14cf0:	str	r3, [r0, #480]	; 0x1e0
   14cf4:	bl	13404 <__assert_fail@plt+0x2414>
   14cf8:	ldr	r3, [fp, #484]	; 0x1e4
   14cfc:	b	14bcc <__assert_fail@plt+0x3bdc>
   14d00:	add	sp, sp, #20
   14d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d08:	ldr	r0, [fp, #496]	; 0x1f0
   14d0c:	ldrd	r2, [r0, #24]
   14d10:	cmp	r2, r3
   14d14:	bcc	14d38 <__assert_fail@plt+0x3d48>
   14d18:	ldrd	r2, [r0, #16]
   14d1c:	ldr	r1, [r2, #8]
   14d20:	add	r3, r3, #1
   14d24:	cmp	r3, r1
   14d28:	bcc	14d38 <__assert_fail@plt+0x3d48>
   14d2c:	ldr	r3, [r0, #12]
   14d30:	cmp	r2, r3
   14d34:	beq	14c10 <__assert_fail@plt+0x3c20>
   14d38:	mov	r1, #0
   14d3c:	bl	12668 <__assert_fail@plt+0x1678>
   14d40:	ldr	r3, [pc, #984]	; 15120 <__assert_fail@plt+0x4130>
   14d44:	cmp	r7, r3
   14d48:	mov	r6, r0
   14d4c:	str	r0, [r5, #52]	; 0x34
   14d50:	bne	14ee4 <__assert_fail@plt+0x3ef4>
   14d54:	mvn	r3, #0
   14d58:	str	r3, [fp, #484]	; 0x1e4
   14d5c:	b	14c50 <__assert_fail@plt+0x3c60>
   14d60:	ldr	r4, [pc, #956]	; 15124 <__assert_fail@plt+0x4134>
   14d64:	mov	r2, #3
   14d68:	mov	r1, #1
   14d6c:	ldr	r3, [r4]
   14d70:	ldr	r0, [pc, #944]	; 15128 <__assert_fail@plt+0x4138>
   14d74:	bl	10e34 <fwrite@plt>
   14d78:	ldr	r1, [r4]
   14d7c:	mov	r0, r7
   14d80:	bl	12110 <__assert_fail@plt+0x1120>
   14d84:	ldr	r2, [r5, #60]	; 0x3c
   14d88:	mov	r3, r6
   14d8c:	mvn	r2, r2
   14d90:	str	r2, [sp]
   14d94:	mov	r1, #1
   14d98:	ldr	r2, [pc, #908]	; 1512c <__assert_fail@plt+0x413c>
   14d9c:	ldr	r0, [r4]
   14da0:	bl	10f18 <__fprintf_chk@plt>
   14da4:	b	14c04 <__assert_fail@plt+0x3c14>
   14da8:	ldr	r3, [fp, #468]	; 0x1d4
   14dac:	ldr	r2, [pc, #868]	; 15118 <__assert_fail@plt+0x4128>
   14db0:	cmp	r3, r2
   14db4:	bne	14ec8 <__assert_fail@plt+0x3ed8>
   14db8:	ldr	r3, [fp, #472]	; 0x1d8
   14dbc:	ldr	r2, [pc, #856]	; 1511c <__assert_fail@plt+0x412c>
   14dc0:	cmp	r3, r2
   14dc4:	bne	14ec8 <__assert_fail@plt+0x3ed8>
   14dc8:	str	r4, [fp, #484]	; 0x1e4
   14dcc:	b	14a74 <__assert_fail@plt+0x3a84>
   14dd0:	ldr	r0, [fp, #492]	; 0x1ec
   14dd4:	mov	r1, #76	; 0x4c
   14dd8:	str	r3, [fp, #492]	; 0x1ec
   14ddc:	bl	11bcc <__assert_fail@plt+0xbdc>
   14de0:	b	14c50 <__assert_fail@plt+0x3c60>
   14de4:	add	r1, fp, #472	; 0x1d8
   14de8:	mov	r0, fp
   14dec:	bl	11e84 <__assert_fail@plt+0xe94>
   14df0:	ldr	r3, [fp, #480]	; 0x1e0
   14df4:	b	14a2c <__assert_fail@plt+0x3a3c>
   14df8:	bl	10ef4 <__errno_location@plt>
   14dfc:	ldr	r3, [fp, #12]
   14e00:	ldr	r2, [pc, #808]	; 15130 <__assert_fail@plt+0x4140>
   14e04:	orr	r3, r3, #32
   14e08:	mov	r1, #6
   14e0c:	ldr	r0, [r0]
   14e10:	str	r3, [fp, #12]
   14e14:	str	r0, [fp, #20]
   14e18:	mov	r0, fp
   14e1c:	bl	12240 <__assert_fail@plt+0x1250>
   14e20:	ldr	r3, [fp, #12]
   14e24:	tst	r3, #8
   14e28:	bne	14e54 <__assert_fail@plt+0x3e64>
   14e2c:	ldr	r3, [pc, #768]	; 15134 <__assert_fail@plt+0x4144>
   14e30:	ldr	r2, [pc, #768]	; 15138 <__assert_fail@plt+0x4148>
   14e34:	ldr	r1, [pc, #768]	; 1513c <__assert_fail@plt+0x414c>
   14e38:	ldr	r0, [pc, #768]	; 15140 <__assert_fail@plt+0x4150>
   14e3c:	bl	10ff0 <__assert_fail@plt>
   14e40:	ldr	r3, [pc, #748]	; 15134 <__assert_fail@plt+0x4144>
   14e44:	ldr	r2, [pc, #760]	; 15144 <__assert_fail@plt+0x4154>
   14e48:	ldr	r1, [pc, #748]	; 1513c <__assert_fail@plt+0x414c>
   14e4c:	ldr	r0, [pc, #756]	; 15148 <__assert_fail@plt+0x4158>
   14e50:	bl	10ff0 <__assert_fail@plt>
   14e54:	mov	r0, fp
   14e58:	ldr	r2, [pc, #748]	; 1514c <__assert_fail@plt+0x415c>
   14e5c:	mov	r1, #5
   14e60:	bl	12240 <__assert_fail@plt+0x1250>
   14e64:	ldr	r3, [pc, #712]	; 15134 <__assert_fail@plt+0x4144>
   14e68:	ldr	r2, [pc, #736]	; 15150 <__assert_fail@plt+0x4160>
   14e6c:	ldr	r1, [pc, #712]	; 1513c <__assert_fail@plt+0x414c>
   14e70:	ldr	r0, [pc, #732]	; 15154 <__assert_fail@plt+0x4164>
   14e74:	bl	10ff0 <__assert_fail@plt>
   14e78:	ldr	r3, [pc, #692]	; 15134 <__assert_fail@plt+0x4144>
   14e7c:	ldr	r2, [pc, #724]	; 15158 <__assert_fail@plt+0x4168>
   14e80:	ldr	r1, [pc, #692]	; 1513c <__assert_fail@plt+0x414c>
   14e84:	ldr	r0, [pc, #720]	; 1515c <__assert_fail@plt+0x416c>
   14e88:	bl	10ff0 <__assert_fail@plt>
   14e8c:	ldr	r3, [pc, #672]	; 15134 <__assert_fail@plt+0x4144>
   14e90:	ldr	r2, [pc, #712]	; 15160 <__assert_fail@plt+0x4170>
   14e94:	ldr	r1, [pc, #672]	; 1513c <__assert_fail@plt+0x414c>
   14e98:	ldr	r0, [pc, #708]	; 15164 <__assert_fail@plt+0x4174>
   14e9c:	bl	10ff0 <__assert_fail@plt>
   14ea0:	ldr	r3, [pc, #652]	; 15134 <__assert_fail@plt+0x4144>
   14ea4:	ldr	r2, [pc, #700]	; 15168 <__assert_fail@plt+0x4178>
   14ea8:	ldr	r1, [pc, #652]	; 1513c <__assert_fail@plt+0x414c>
   14eac:	ldr	r0, [pc, #696]	; 1516c <__assert_fail@plt+0x417c>
   14eb0:	bl	10ff0 <__assert_fail@plt>
   14eb4:	ldr	r3, [pc, #632]	; 15134 <__assert_fail@plt+0x4144>
   14eb8:	ldr	r2, [pc, #688]	; 15170 <__assert_fail@plt+0x4180>
   14ebc:	ldr	r1, [pc, #632]	; 1513c <__assert_fail@plt+0x414c>
   14ec0:	ldr	r0, [pc, #684]	; 15174 <__assert_fail@plt+0x4184>
   14ec4:	bl	10ff0 <__assert_fail@plt>
   14ec8:	mov	r0, fp
   14ecc:	ldr	r2, [pc, #676]	; 15178 <__assert_fail@plt+0x4188>
   14ed0:	mov	r1, #2
   14ed4:	bl	12240 <__assert_fail@plt+0x1250>
   14ed8:	ldr	r2, [pc, #668]	; 1517c <__assert_fail@plt+0x418c>
   14edc:	mov	r1, #7
   14ee0:	bl	12240 <__assert_fail@plt+0x1250>
   14ee4:	ldr	r3, [pc, #584]	; 15134 <__assert_fail@plt+0x4144>
   14ee8:	ldr	r2, [pc, #656]	; 15180 <__assert_fail@plt+0x4190>
   14eec:	ldr	r1, [pc, #584]	; 1513c <__assert_fail@plt+0x414c>
   14ef0:	ldr	r0, [pc, #652]	; 15184 <__assert_fail@plt+0x4194>
   14ef4:	bl	10ff0 <__assert_fail@plt>
   14ef8:	ldr	r3, [pc, #564]	; 15134 <__assert_fail@plt+0x4144>
   14efc:	ldr	r2, [pc, #644]	; 15188 <__assert_fail@plt+0x4198>
   14f00:	ldr	r1, [pc, #564]	; 1513c <__assert_fail@plt+0x414c>
   14f04:	ldr	r0, [pc, #592]	; 1515c <__assert_fail@plt+0x416c>
   14f08:	bl	10ff0 <__assert_fail@plt>
   14f0c:	mov	r0, fp
   14f10:	ldr	r2, [pc, #628]	; 1518c <__assert_fail@plt+0x419c>
   14f14:	mov	r1, #7
   14f18:	bl	12240 <__assert_fail@plt+0x1250>
   14f1c:	ldr	r3, [pc, #528]	; 15134 <__assert_fail@plt+0x4144>
   14f20:	mov	r2, #3232	; 0xca0
   14f24:	ldr	r1, [pc, #528]	; 1513c <__assert_fail@plt+0x414c>
   14f28:	ldr	r0, [pc, #608]	; 15190 <__assert_fail@plt+0x41a0>
   14f2c:	bl	10ff0 <__assert_fail@plt>
   14f30:	mov	r0, fp
   14f34:	ldr	r2, [pc, #600]	; 15194 <__assert_fail@plt+0x41a4>
   14f38:	mov	r1, #2
   14f3c:	bl	12240 <__assert_fail@plt+0x1250>
   14f40:	cmp	r5, #0
   14f44:	beq	14fd8 <__assert_fail@plt+0x3fe8>
   14f48:	sub	r3, r3, r6
   14f4c:	sub	r3, r3, #8
   14f50:	cmp	r3, #3
   14f54:	ldrls	pc, [pc, r3, lsl #2]
   14f58:	b	14f78 <__assert_fail@plt+0x3f88>
   14f5c:	andeq	r4, r1, r8, ror ip
   14f60:	andeq	r4, r1, r0, ror ip
   14f64:	andeq	r4, r1, r4, ror #24
   14f68:	strdeq	r4, [r1], -r0
   14f6c:	ldr	r3, [fp, #488]	; 0x1e8
   14f70:	cmp	r3, #2
   14f74:	beq	14fec <__assert_fail@plt+0x3ffc>
   14f78:	mov	r0, fp
   14f7c:	bl	12ce0 <__assert_fail@plt+0x1cf0>
   14f80:	ldr	r3, [r5, #68]	; 0x44
   14f84:	cmp	r3, #0
   14f88:	mov	r4, r0
   14f8c:	ble	14fb8 <__assert_fail@plt+0x3fc8>
   14f90:	ldr	r2, [r5, #64]	; 0x40
   14f94:	cmp	r2, #0
   14f98:	subne	r2, r2, #1
   14f9c:	ldrbeq	r0, [r5, #72]	; 0x48
   14fa0:	ldrbeq	r2, [r5, #73]	; 0x49
   14fa4:	subeq	r3, r3, #1
   14fa8:	moveq	r4, r0
   14fac:	strne	r2, [r5, #64]	; 0x40
   14fb0:	streq	r3, [r5, #68]	; 0x44
   14fb4:	strbeq	r2, [r5, #72]	; 0x48
   14fb8:	ldr	r2, [r5, #60]	; 0x3c
   14fbc:	ldr	r1, [pc, #468]	; 15198 <__assert_fail@plt+0x41a8>
   14fc0:	eor	r3, r2, r0
   14fc4:	uxtb	r3, r3
   14fc8:	ldr	r3, [r1, r3, lsl #2]
   14fcc:	eor	r3, r3, r2, lsr #8
   14fd0:	str	r3, [r5, #60]	; 0x3c
   14fd4:	b	14ad8 <__assert_fail@plt+0x3ae8>
   14fd8:	ldr	r3, [pc, #340]	; 15134 <__assert_fail@plt+0x4144>
   14fdc:	ldr	r2, [pc, #440]	; 1519c <__assert_fail@plt+0x41ac>
   14fe0:	ldr	r1, [pc, #340]	; 1513c <__assert_fail@plt+0x414c>
   14fe4:	ldr	r0, [pc, #368]	; 1515c <__assert_fail@plt+0x416c>
   14fe8:	bl	10ff0 <__assert_fail@plt>
   14fec:	ldr	r4, [fp, #496]	; 0x1f0
   14ff0:	cmp	r4, #0
   14ff4:	beq	150bc <__assert_fail@plt+0x40cc>
   14ff8:	ldr	r3, [r4, #24]
   14ffc:	ldr	r2, [r4, #28]
   15000:	cmp	r2, r3
   15004:	bhi	150d0 <__assert_fail@plt+0x40e0>
   15008:	ldr	r3, [r4, #16]
   1500c:	bne	150dc <__assert_fail@plt+0x40ec>
   15010:	cmp	r3, #0
   15014:	beq	150a8 <__assert_fail@plt+0x40b8>
   15018:	ldr	r1, [r3, #8]
   1501c:	cmp	r1, #0
   15020:	beq	150a8 <__assert_fail@plt+0x40b8>
   15024:	mov	r8, #0
   15028:	ldr	r2, [r4, #20]
   1502c:	add	r2, r2, #1
   15030:	cmp	r2, r1
   15034:	str	r2, [r4, #20]
   15038:	bcc	15064 <__assert_fail@plt+0x4074>
   1503c:	bne	150f0 <__assert_fail@plt+0x4100>
   15040:	ldr	r3, [r3]
   15044:	cmp	r3, #0
   15048:	beq	15104 <__assert_fail@plt+0x4114>
   1504c:	ldr	r2, [r3, #8]
   15050:	cmp	r2, #0
   15054:	beq	15104 <__assert_fail@plt+0x4114>
   15058:	mov	r2, #0
   1505c:	str	r8, [r4, #20]
   15060:	str	r3, [r4, #16]
   15064:	add	r3, r3, r2, lsl #2
   15068:	str	r8, [r4, #24]
   1506c:	ldr	r3, [r3, #12]
   15070:	mov	r0, fp
   15074:	str	r3, [r4, #28]
   15078:	bl	12c9c <__assert_fail@plt+0x1cac>
   1507c:	ldr	r3, [r4, #24]
   15080:	ldr	r2, [r4, #28]
   15084:	cmp	r3, r2
   15088:	bcc	150d0 <__assert_fail@plt+0x40e0>
   1508c:	ldr	r3, [r4, #16]
   15090:	bne	150dc <__assert_fail@plt+0x40ec>
   15094:	cmp	r3, #0
   15098:	beq	150a8 <__assert_fail@plt+0x40b8>
   1509c:	ldr	r1, [r3, #8]
   150a0:	cmp	r1, #0
   150a4:	bne	15028 <__assert_fail@plt+0x4038>
   150a8:	ldr	r3, [pc, #132]	; 15134 <__assert_fail@plt+0x4144>
   150ac:	ldr	r2, [pc, #236]	; 151a0 <__assert_fail@plt+0x41b0>
   150b0:	ldr	r1, [pc, #132]	; 1513c <__assert_fail@plt+0x414c>
   150b4:	ldr	r0, [pc, #232]	; 151a4 <__assert_fail@plt+0x41b4>
   150b8:	bl	10ff0 <__assert_fail@plt>
   150bc:	ldr	r3, [pc, #112]	; 15134 <__assert_fail@plt+0x4144>
   150c0:	ldr	r2, [pc, #224]	; 151a8 <__assert_fail@plt+0x41b8>
   150c4:	ldr	r1, [pc, #112]	; 1513c <__assert_fail@plt+0x414c>
   150c8:	ldr	r0, [pc, #220]	; 151ac <__assert_fail@plt+0x41bc>
   150cc:	bl	10ff0 <__assert_fail@plt>
   150d0:	add	r3, r3, #1
   150d4:	str	r3, [r4, #24]
   150d8:	b	14f78 <__assert_fail@plt+0x3f88>
   150dc:	ldr	r3, [pc, #80]	; 15134 <__assert_fail@plt+0x4144>
   150e0:	ldr	r2, [pc, #200]	; 151b0 <__assert_fail@plt+0x41c0>
   150e4:	ldr	r1, [pc, #80]	; 1513c <__assert_fail@plt+0x414c>
   150e8:	ldr	r0, [pc, #196]	; 151b4 <__assert_fail@plt+0x41c4>
   150ec:	bl	10ff0 <__assert_fail@plt>
   150f0:	ldr	r3, [pc, #60]	; 15134 <__assert_fail@plt+0x4144>
   150f4:	ldr	r2, [pc, #188]	; 151b8 <__assert_fail@plt+0x41c8>
   150f8:	ldr	r1, [pc, #60]	; 1513c <__assert_fail@plt+0x414c>
   150fc:	ldr	r0, [pc, #184]	; 151bc <__assert_fail@plt+0x41cc>
   15100:	bl	10ff0 <__assert_fail@plt>
   15104:	mov	r0, fp
   15108:	ldr	r2, [pc, #176]	; 151c0 <__assert_fail@plt+0x41d0>
   1510c:	mov	r1, #7
   15110:	bl	12240 <__assert_fail@plt+0x1250>
   15114:	stmdbmi	r8, {r1, r4, r6, sl, lr}^
   15118:	ldmdbhi	r0, {r0, r1, r2, r6, r9, sl, fp, lr}^
   1511c:	vstreq	s2, [sl, #-40]	; 0xffffffd8
   15120:	stmdbmi	r4, {r2, r4, r6, r8, lr}^
   15124:	andeq	r9, r2, r0, lsl r0
   15128:	andeq	r6, r1, ip, ror #1
   1512c:	andeq	r6, r1, r0, lsr #5
   15130:	ldrdeq	r6, [r1], -r4
   15134:			; <UNDEFINED> instruction: 0x000159b4
   15138:	andeq	r0, r0, pc, lsl #25
   1513c:	andeq	r5, r1, r4, ror fp
   15140:	andeq	r6, r1, r0, ror r1
   15144:	ldrdeq	r0, [r0], -r2
   15148:	andeq	r5, r1, ip, lsl #23
   1514c:	muleq	r1, r8, r1
   15150:	ldrdeq	r0, [r0], -r1
   15154:	strdeq	r6, [r1], -r8
   15158:	ldrdeq	r0, [r0], -r5
   1515c:	andeq	r6, r1, r8, asr #32
   15160:	andeq	r0, r0, r6, lsl #25
   15164:	andeq	r6, r1, r8, asr #2
   15168:	andeq	r0, r0, r5, lsl #25
   1516c:	andeq	r6, r1, r0, lsr r1
   15170:	strdeq	r0, [r0], -sl
   15174:	andeq	r6, r1, r0, lsl r2
   15178:			; <UNDEFINED> instruction: 0x000161b0
   1517c:	andeq	r6, r1, r4, lsl r1
   15180:	muleq	r0, r5, sp
   15184:			; <UNDEFINED> instruction: 0x000162b0
   15188:	andeq	r0, r0, r3, lsl #26
   1518c:	andeq	r6, r1, r4, asr #5
   15190:	andeq	r6, r1, r8, asr #3
   15194:	andeq	r6, r1, r4, ror #3
   15198:	andeq	r5, r1, r4, lsr r2
   1519c:	andeq	r0, r0, r2, lsl sp
   151a0:	andeq	r0, r0, r2, lsr sp
   151a4:	andeq	r5, r1, r8, asr #24
   151a8:	andeq	r0, r0, r4, lsr #26
   151ac:	andeq	r6, r1, r8, asr r2
   151b0:	andeq	r0, r0, r1, lsr sp
   151b4:	andeq	r6, r1, r0, lsr r2
   151b8:	andeq	r0, r0, r7, lsr sp
   151bc:	andeq	r6, r1, r8, ror #4
   151c0:	andeq	r6, r1, r8, lsl #5
   151c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151c8:	mov	r7, r0
   151cc:	ldr	r6, [pc, #72]	; 1521c <__assert_fail@plt+0x422c>
   151d0:	ldr	r5, [pc, #72]	; 15220 <__assert_fail@plt+0x4230>
   151d4:	add	r6, pc, r6
   151d8:	add	r5, pc, r5
   151dc:	sub	r6, r6, r5
   151e0:	mov	r8, r1
   151e4:	mov	r9, r2
   151e8:	bl	10d54 <strcmp@plt-0x20>
   151ec:	asrs	r6, r6, #2
   151f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   151f4:	mov	r4, #0
   151f8:	add	r4, r4, #1
   151fc:	ldr	r3, [r5], #4
   15200:	mov	r2, r9
   15204:	mov	r1, r8
   15208:	mov	r0, r7
   1520c:	blx	r3
   15210:	cmp	r6, r4
   15214:	bne	151f8 <__assert_fail@plt+0x4208>
   15218:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1521c:	andeq	r3, r1, r0, lsr #24
   15220:	andeq	r3, r1, r8, lsl ip
   15224:	bx	lr

Disassembly of section .fini:

00015228 <.fini>:
   15228:	push	{r3, lr}
   1522c:	pop	{r3, pc}
